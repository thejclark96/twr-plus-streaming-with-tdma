
/home/joel/Capstone/uwb-apps/bin/targets/ultrawidebuffs_datatransfer/app/apps/ultrawidebuffs_datatransfer/ultrawidebuffs_datatransfer.elf:     file format elf32-littlearm
/home/joel/Capstone/uwb-apps/bin/targets/ultrawidebuffs_datatransfer/app/apps/ultrawidebuffs_datatransfer/ultrawidebuffs_datatransfer.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000080f9

Program Header:
0x70000001 off    0x000226d8 vaddr 0x000226d8 paddr 0x000226d8 align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x000226f0 memsz 0x000226f0 flags rwx
    LOAD off    0x00030530 vaddr 0x20000530 paddr 0x000226f0 align 2**16
         filesz 0x00001600 memsz 0x00006ef8 flags rw-
    LOAD off    0x00000000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x00000530 flags rw-
private flags = 0x5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  00008000  00008000  00008000  2**0  ALLOC
  1 .text              0001a6b8  00008020  00008020  00008020  2**3  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab         00000000  000226d8  000226d8  00031b30  2**0  CONTENTS
  3 .ARM.exidx         00000018  000226d8  000226d8  000226d8  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .vector_relocation 000000d8  20000000  20000000  00040000  2**0  ALLOC
  5 .rtt               00000458  200000d8  200000d8  00040000  2**2  ALLOC
  6 .data              00001600  20000530  000226f0  00030530  2**3  CONTENTS, ALLOC, LOAD, DATA
  7 .bssnz             00000000  20001b30  20001b30  00031b30  2**0  CONTENTS
  8 .bss               000058f8  20001b30  00023cf0  00031b30  2**3  ALLOC
  9 .stack_dummy       000001b0  20007428  20007428  00031b30  2**3  CONTENTS, READONLY
 10 .ARM.attributes    00000030  00000000  00000000  00031ce0  2**0  CONTENTS, READONLY
 11 .comment           000000b2  00000000  00000000  00031d10  2**0  CONTENTS, READONLY
 12 .svc_table         00000004  00000000  00000000  00031dc2  2**0  CONTENTS, READONLY
 13 .debug_line        0003e1ed  00000000  00000000  00031dc6  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info        000ac0da  00000000  00000000  0006ffb3  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev      0001c57c  00000000  00000000  0011c08d  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges     000039e0  00000000  00000000  00138610  2**3  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str         0001a555  00000000  00000000  0013bff0  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc         00046483  00000000  00000000  00156545  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges      00006b18  00000000  00000000  0019c9c8  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame       00009ce4  00000000  00000000  001a34e0  2**2  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro       0000279b  00000000  00000000  001ad1c4  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00008000 l    d  .imghdr	00000000 .imghdr
00008020 l    d  .text	00000000 .text
000226d8 l    d  .ARM.extab	00000000 .ARM.extab
000226d8 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
200000d8 l    d  .rtt	00000000 .rtt
20000530 l    d  .data	00000000 .data
20001b30 l    d  .bssnz	00000000 .bssnz
20001b30 l    d  .bss	00000000 .bss
20007428 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    df *ABS*	00000000 gcc_startup_nrf52.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
00008100 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 sbrk.c
20000530 l     O .data	00000004 sbrkBase
20000534 l     O .data	00000004 sbrkLimit
20000538 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 system_nrf52.c
00008228 l     F .text	0000002a errata_16
00008228 l     F .text	0000002a errata_57
00008228 l     F .text	0000002a errata_37
00008228 l     F .text	0000002a errata_32
00008252 l     F .text	00000036 errata_31
00008252 l     F .text	00000036 errata_108
00008252 l     F .text	00000036 errata_36
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 main.c
00008494 l     F .text	00000074 uwb_transport_cb
00008558 l     F .text	00000090 stream_timer
000085e8 l     F .text	00000124 stream_slot_cb
20001b54 l     O .bss	00000020 stream_callout
20001b78 l     O .bss	00000001 uwb_config_updated
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 uwb.c
00008914 l     F .text	0000000e uwb_interrupt_task
00000000 l    df *ABS*	00000000 dw1000_gpio.c
00000000 l    df *ABS*	00000000 dw1000_hal.c
20000540 l     O .data	00000df8 hal_dw1000_instances
00000000 l    df *ABS*	00000000 dw1000_dev.c
000092a2 l     F .text	0000000a uwb_dw1000_read_sts_rxtime
000092ac l     F .text	00000004 uwb_dw1000_hal_noblock_wait
00009300 l     F .text	00000020 uwb_dw1000_calc_pdoa
00009320 l     F .text	00000004 uwb_dw1000_estimate_los
00009324 l     F .text	00000004 uwb_dw1000_calc_fppl
00009328 l     F .text	00000004 uwb_dw1000_calc_seq_rssi
0000932c l     F .text	00000004 uwb_dw1000_calc_rssi
00009330 l     F .text	00000004 uwb_dw1000_get_fppl
00009334 l     F .text	00000004 uwb_dw1000_get_rssi
00009338 l     F .text	00000004 uwb_dw1000_set_on_error_continue
0000933c l     F .text	00000004 uwb_dw1000_phy_repeated_frames
00009340 l     F .text	00000004 uwb_dw1000_phy_rx_reset
00009344 l     F .text	00000004 uwb_dw1000_phy_forcetrxoff
00009348 l     F .text	00000008 uwb_dw1000_phy_data_duration
00009350 l     F .text	00000008 uwb_dw1000_phy_SHR_duration
00009358 l     F .text	00000008 uwb_dw1000_phy_frame_duration
00009360 l     F .text	00000004 uwb_dw1000_read_txtime_lo32
00009364 l     F .text	00000004 uwb_dw1000_read_txtime
00009368 l     F .text	00000004 uwb_dw1000_read_rxtime_lo32
0000936c l     F .text	00000004 uwb_dw1000_read_rxtime
00009370 l     F .text	00000004 uwb_dw1000_read_systime_lo32
00009374 l     F .text	00000004 uwb_dw1000_read_systime
00009378 l     F .text	00000004 uwb_dw1000_set_rxauto_disable
0000937c l     F .text	00000004 uwb_dw1000_set_wait4resp_delay
00009380 l     F .text	00000004 uwb_dw1000_set_wait4resp
00009384 l     F .text	00000004 uwb_dw1000_tx_wait
00009388 l     F .text	00000004 uwb_dw1000_write_tx_fctrl
0000938c l     F .text	00000004 uwb_dw1000_write_tx
00009390 l     F .text	00000004 uwb_dw1000_stop_rx
00009394 l     F .text	00000004 uwb_dw1000_start_rx
00009398 l     F .text	00000004 uwb_dw1000_start_tx
0000939c l     F .text	00000004 uwb_dw1000_set_delay_start
000093a0 l     F .text	00000004 uwb_dw1000_set_abs_timeout
000093a4 l     F .text	00000004 uwb_dw1000_set_rx_window
000093a8 l     F .text	00000006 uwb_dw1000_adj_rx_timeout
000093ae l     F .text	00000006 uwb_dw1000_set_rx_timeout
000093b4 l     F .text	00000004 uwb_dw1000_set_dblrxbuf
000093b8 l     F .text	00000004 uwb_dw1000_txrf_power_value
000093bc l     F .text	00000004 uwb_dw1000_txrf_config
000093c0 l     F .text	00000004 uwb_dw1000_mac_config
000093c8 l     F .text	00000020 uwb_dw1000_calc_clock_offset_ratio
0000967e l     F .text	00000018 uwb_dw1000_set_euid
00009696 l     F .text	00000018 uwb_dw1000_set_uid
000096ae l     F .text	00000018 uwb_dw1000_set_panid
00009808 l     F .text	00000004 uwb_dw1000_sleep_config
00009884 l     F .text	00000004 uwb_dw1000_enter_sleep
00009af0 l     F .text	00000004 uwb_dw1000_wakeup
00009b38 l     F .text	00000004 uwb_dw1000_enter_sleep_after_tx
00009b80 l     F .text	00000004 uwb_dw1000_enter_sleep_after_rx
00020230 l     O .text	00000015 __func__.0
00020248 l     O .text	000000dc dw1000_uwb_funcs
00000000 l    df *ABS*	00000000 dw1000_mac.c
00009cb8 l     F .text	00000024 dw1000_irq
0000a0ee l     F .text	00000034 update_rx_window_timeout.isra.0
0000ad70 l     F .text	000008a8 dw1000_interrupt_ev_cb
00020380 l     O .text	00000008 agc_config
00020388 l     O .text	00000008 chan_idx
00020390 l     O .text	00000020 digital_bb_config
000203b0 l     O .text	00000004 dtune1
000203b4 l     O .text	00000003 dwnsSFDlen
000203b8 l     O .text	00000018 fs_pll_cfg
000203d0 l     O .text	00000006 fs_pll_tune
00020412 l     O .text	00000032 lde_replicaCoeff
00020444 l     O .text	00000002 rx_config
00020446 l     O .text	0000000c sftsh
00020454 l     O .text	00000018 tx_config
00000000 l    df *ABS*	00000000 dw1000_phy.c
00000000 l    df *ABS*	00000000 dw1000_otp.c
00000000 l    df *ABS*	00000000 hal_gpio.c
0000bfb4 l     F .text	0000004c hal_gpio_irq_handler
0000c000 l     F .text	00000034 hal_gpio_find_pin
20001b7c l     O .bss	00000040 hal_gpio_irqs
20001bbc l     O .bss	00000001 irq_setup.0
00000000 l    df *ABS*	00000000 hal_spi.c
00020490 l     O .text	00000010 nrf52_hal_spis
00000000 l    df *ABS*	00000000 os_arch_arm.c
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os.c
0000c95c l     F .text	00000016 os_main
20001d48 l     O .bss	00001000 g_os_main_stack
20001c40 l     O .bss	00000100 g_idle_task_stack
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_dev.c
0000cc7c l     F .text	00000020 os_dev_initialize
20002da4 l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
20002dac l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mempool.c
0000cf10 l     F .text	00000068 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
0000d050 l     F .text	00000024 os_msys_find_pool
20002dc4 l     O .bss	00000db0 os_msys_1_data
20003b74 l     O .bss	0000000c os_msys_1_mbuf_pool
20003b80 l     O .bss	0000001c os_msys_1_mempool
20001338 l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 os_sanity.c
0000d2e8 l     F .text	0000001c os_sanity_check_list_lock
0000d304 l     F .text	00000018 os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
0000d8f8 l     F .text	00000044 os_deltatime
20003bc0 l     O .bss	00000030 basetod
20001350 l     O .data	00000008 os_time_change_listeners
00000000 l    df *ABS*	00000000 HAL_CM4.o
0000dbb0 l       .text	00000000 SVC_User
0000dbce l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 os_mbuf.c
0000dc58 l     F .text	00000016 _os_mbuf_trailingspace
00000000 l    df *ABS*	00000000 tdma.c
0000e030 l     F .text	000000c8 tdma_superframe_slot_cb
0000e0f8 l     F .text	00000022 superframe_cb
0000e11a l     F .text	00000034 tdma_task
0000e14e l     F .text	0000000e slot_timer_cb.part.0
0000e14e l     F .text	0000000e tdma_free.part.0
0000e14e l     F .text	0000000e tdma_release_slot.part.0
0000e15c l     F .text	00000030 slot_timer_cb
00000000 l    df *ABS*	00000000 uwb_ccp.c
0000e4f8 l     F .text	00000006 uwb_read_systime_lo32
0000e4fe l     F .text	00000008 uwb_phy_SHR_duration
0000e506 l     F .text	00000008 uwb_phy_forcetrxoff
0000e50e l     F .text	00000052 error_cb
0000e560 l     F .text	000001d4 tx_complete_cb
0000e734 l     F .text	0000000e ccp_task
0000e742 l     F .text	0000000e reset_cb.part.0
0000e742 l     F .text	0000000e ccp_timer_irq.part.0
0000e742 l     F .text	0000000e rx_timeout_cb.part.0
0000e750 l     F .text	00000026 reset_cb
0000e776 l     F .text	00000040 rx_timeout_cb
0000e7b6 l     F .text	00000018 ccp_timer_irq
0000e7ce l     F .text	00000006 uwb_set_delay_start.isra.0
0000e7d8 l     F .text	000000f8 ccp_listen.constprop.0.isra.0
0000e8d0 l     F .text	00000006 uwb_set_rx_timeout.isra.0
0000e8d8 l     F .text	00000170 ccp_slave_timer_ev_cb
0000ea48 l     F .text	00000288 ccp_master_timer_ev_cb
0000f080 l     F .text	00000448 rx_complete_cb
00000000 l    df *ABS*	00000000 uwb_transport.c
0000f526 l     F .text	00000004 dpl_sem_release.isra.0
0000f52a l     F .text	00000132 rx_complete_cb
0000f65c l     F .text	00000016 tx_begins_cb
0000f672 l     F .text	00000022 tx_complete_cb
0000f694 l     F .text	00000024 rx_timeout_cb
0000f6b8 l     F .text	00000032 reset_cb
20003bf4 l     O .bss	00002200 g_mbuf_buffer
0000f814 l     F .text	00000038 uwb_transport_process_rx_queue
20005df4 l     O .bss	00000028 g_mbuf_mempool
20005e1c l     O .bss	0000000c g_mbuf_pool
20001358 l     O .data	0000003c g_cbs
00000000 l    df *ABS*	00000000 uwb_wcs.c
0000fe44 l     F .text	00000006 uwb_read_systime
0000fe4a l     F .text	0000000e uwb_wcs_init.part.0
0000fe4a l     F .text	0000000e uwb_wcs_free.part.0
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 malloc.c
000100ac l     F .text	00000004 malloc_lock_nop
000100b0 l     F .text	00000002 malloc_unlock_nop
000100b4 l     F .text	00000060 __free_block.isra.0
20001394 l     O .data	00000018 __malloc_head
200013ac l     O .data	00000004 malloc_lock
200013b0 l     O .data	00000004 malloc_unlock
00000000 l    df *ABS*	00000000 memcmp.c
00010240 l       .text	00000000 test1
00010234 l       .text	00000000 loop1
00010246 l       .text	00000000 res1
00010262 l       .text	00000000 test2
0001026a l       .text	00000000 done
00010256 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
00010276 l       .text	00000000 test1
00010272 l       .text	00000000 loop1
00010284 l       .text	00000000 test2
00010280 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 tinyprintf.c
000102f4 l     F .text	000000b4 ui2a
000103a8 l     F .text	00000016 i2a
000103be l     F .text	00000022 putf
000103e0 l     F .text	0000011c putchw
00000000 l    df *ABS*	00000000 memfile.c
00000000 l    df *ABS*	00000000 mynewt.c
000108f4 l     F .text	00000004 stdin_read
000108f8 l     F .text	00000010 stdout_write
200013b4 l     O .data	00000004 _stdin
200013b8 l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 dpl_cputime.c
00000000 l    df *ABS*	00000000 dpl_mbuf.c
0001097a l     F .text	00000016 _dpl_mbuf_trailingspace
00010990 l     F .text	00000024 _dpl_msys_find_pool
00000000 l    df *ABS*	00000000 dpl_mem.c
00000000 l    df *ABS*	00000000 dpl_mempool.c
00000000 l    df *ABS*	00000000 config_store.c
00010fc8 l     F .text	00000020 conf_load_cb
00010fe8 l     F .text	0000002e conf_dup_check_cb
00011118 l     F .text	00000004 conf_store_one
20005e2c l     O .bss	00000001 conf_loaded
20005e2d l     O .bss	00000001 conf_loading
00000000 l    df *ABS*	00000000 config.c
00011188 l     F .text	00000004 conf_ev_fn_load
20005e38 l     O .bss	0000000c conf_mtx
200013d0 l     O .data	00000010 conf_ev_load
00000000 l    df *ABS*	00000000 config_cli.c
00011464 l     F .text	00000018 conf_running_one
0001147c l     F .text	000000f4 shell_conf_command
200013e0 l     O .data	00000010 shell_conf_cmd
00000000 l    df *ABS*	00000000 config_nmgr.c
0001157c l     F .text	000000a4 conf_nmgr_write
00011620 l     F .text	0000007c conf_nmgr_read
200013f0 l     O .data	0000000c conf_nmgr_group
00020a50 l     O .text	00000008 conf_nmgr_handlers
00000000 l    df *ABS*	00000000 console.c
00011734 l     F .text	0000003c console_append_char
00011770 l     F .text	00000018 cursor_save
00011788 l     F .text	00000018 cursor_restore
000117a0 l     F .text	00000042 del_char
000117e4 l     F .text	0000005c insert_char
00011840 l     F .text	000001d8 handle_ansi
20005e44 l     O .bss	00000004 ansi_val
20005e48 l     O .bss	00000004 ansi_val_2
20005e4c l     O .bss	00000010 avail_queue
20005e5c l     O .bss	00000004 completion
20005e60 l     O .bss	00000004 console_compat_rx_cb
20005e64 l     O .bss	00000028 console_hist
20005e8c l     O .bss	00000800 console_hist_lines
20006690 l     O .bss	0000000c console_write_lock
2000669c l     O .bss	00000002 cur
2000669e l     O .bss	00000002 end
200066a0 l     O .bss	00000004 esc_state
200066a4 l     O .bss	00000004 ev.2
200066ac l     O .bss	00000004 input.1
200066b0 l     O .bss	00000004 lines_queue
200066b4 l     O .bss	00000004 nlip_state
200066b8 l     O .bss	00000001 prev_endl.0
200066b9 l     O .bss	00000001 rx_stalled
200013fc l     O .data	00000004 echo
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 rtt_console.c
00012014 l     F .text	00000054 rtt_console_write_ch
00012068 l     F .text	00000064 rtt_console_poll_func
200066bc l     O .bss	00000018 rtt_timer
20001400 l     O .data	00000004 itvl_ms.0
20001404 l     O .data	00000004 key.1
20001408 l     O .data	00000004 rtt_console_retries_left.2
00000000 l    df *ABS*	00000000 ticks.c
2000140c l     O .data	00000001 do_ticks
00000000 l    df *ABS*	00000000 shell.c
0001215c l     F .text	00000060 print_module_commands
000121bc l     F .text	00000038 print_modules
000121f4 l     F .text	00000040 print_command_params
00012234 l     F .text	00000048 get_destination_module
0001227c l     F .text	0000001c set_default_module
00012298 l     F .text	00000020 select_module
000122b8 l     F .text	0000004c print_prompt
00012304 l     F .text	00000016 print_prompt_if_console
0001231c l     F .text	0000010c complete_command
00012428 l     F .text	0000003c get_token
00012464 l     F .text	00000140 complete_module
000125a4 l     F .text	00000254 completion
000127f8 l     F .text	00000064 get_command_and_module.constprop.0
0001285c l     F .text	000000e0 show_cmd_help
0001293c l     F .text	0000007c show_help
00012aec l     F .text	00000078 shell_process_command
00012b64 l     F .text	00000060 shell
200066d4 l     O .bss	00000010 app_cmd
200066e4 l     O .bss	00000004 app_prompt_handler
200066e8 l     O .bss	00000200 buf
200068e8 l     O .bss	00000150 compat_commands
20006a38 l     O .bss	00000004 module_registered
20006a3c l     O .bss	00000004 num_compat_commands
20006a40 l     O .bss	00000004 num_of_shell_entities
20006a44 l     O .bss	00000004 prompt
20006a48 l     O .bss	00000020 shell_console_ev
20006a68 l     O .bss	00000018 shell_modules
20001410 l     O .data	00000004 default_module
00020c44 l     O .text	00000010 shell_cmd_help
00020c54 l     O .text	00000010 shell_cmd_select_module
00000000 l    df *ABS*	00000000 shell_nlip.c
00012cf0 l     F .text	0000012c shell_event_data_in
20006a80 l     O .bss	00000002 g_nlip_expected_len
20006a84 l     O .bss	00000004 g_nlip_mbuf
20006a88 l     O .bss	00000004 g_shell_nlip_in_arg
20006a8c l     O .bss	00000004 g_shell_nlip_in_func
20006a90 l     O .bss	00000018 g_shell_nlip_mq
00000000 l    df *ABS*	00000000 shell_os.c
00012f40 l     F .text	00000020 shell_os_ls_dev
00013060 l     F .text	000000f4 shell_os_tasks_display_cmd
00020e30 l     O .text	0000000c date_help
00020e3c l     O .text	00000010 date_params
00020e4c l     O .text	0000000c ls_dev_help
00020e58 l     O .text	0000000c mpool_help
00020e64 l     O .text	00000010 mpool_params
00020e74 l     O .text	00000060 os_commands
00020ee8 l     O .text	0000000c tasks_help
00020ed4 l     O .text	0000000c reset_help
00020ee0 l     O .text	00000008 reset_params
00020ef4 l     O .text	00000010 tasks_params
00000000 l    df *ABS*	00000000 shell_prompt.c
00020f88 l     O .text	00000020 prompt_commands
00020fa8 l     O .text	0000000c ticks_help
00020fb4 l     O .text	00000018 ticks_params
00000000 l    df *ABS*	00000000 stats.c
00013264 l     F .text	00000044 stats_register_internal
00013370 l     F .text	0000004c stats_module_init_internal
00000000 l    df *ABS*	00000000 stats_nmgr.c
00013474 l     F .text	0000001c cbor_encode_text_stringz
00013490 l     F .text	00000060 stats_nmgr_list
000134f0 l     F .text	0000000a stats_nmgr_encode_name
000134fc l     F .text	000000dc stats_nmgr_read
000135d8 l     F .text	00000042 stats_nmgr_walk_func
20006ac0 l     O .bss	0000000c shell_nmgr_group
2000141c l     O .data	00000010 shell_nmgr_group_handlers
00000000 l    df *ABS*	00000000 stats_shell.c
00013634 l     F .text	00000054 stats_shell_display_entry
00013688 l     F .text	00000018 stats_shell_display_group
000136a0 l     F .text	00000050 shell_stats_display
2000142c l     O .data	00000010 shell_stats_cmd
00000000 l    df *ABS*	00000000 sysdown.c
00013710 l     F .text	0000000e sysdown_timer_exp
20006ad0 l     O .bss	00000004 sysdown_num_in_progress
20006ad4 l     O .bss	00000020 sysdown_timer
00000000 l    df *ABS*	00000000 sysinit.c
000137b4 l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 uwbcfg.c
000137d4 l     F .text	00000054 uwbcfg_export
00013828 l     F .text	00000044 uwbcfg_set
0001386c l     F .text	00000034 uwbcfg_get
20006b10 l     O .bss	00000004 uwbcfg_callbacks
20001530 l     O .data	00000018 uwbcfg_handler
00000000 l    df *ABS*	00000000 uwbcfg_dw1000.c
00013b64 l     F .text	00000094 check_preamble_code.isra.0
00000000 l    df *ABS*	00000000 uwbcfg_strtod.c
00000000 l    df *ABS*	00000000 datetime.c
00013f94 l     F .text	00000032 parse_number
00013fc6 l     F .text	0000002c leapyear
00021244 l     O .text	00000030 month_days
00000000 l    df *ABS*	00000000 crc16.c
00021274 l     O .text	00000200 crc16tab
00000000 l    df *ABS*	00000000 crc8.c
00021474 l     O .text	00000010 crc8_small_table
00000000 l    df *ABS*	00000000 streamer.c
00000000 l    df *ABS*	00000000 streamer_console.c
000144ac l     F .text	00000008 streamer_console_vprintf
000144b4 l     F .text	0000000e streamer_console_write
20001548 l     O .data	00000004 streamer_console
00021484 l     O .text	00000008 streamer_cfg_console
00000000 l    df *ABS*	00000000 ultrawidebuffs_datatransfer-sysinit-app.c
00000000 l    df *ABS*	00000000 split.c
20006b14 l     O .bss	00000001 split_app_active
20006b15 l     O .bss	00000001 split_mode_cur
00000000 l    df *ABS*	00000000 split_config.c
000145b4 l     F .text	00000004 split_conf_commit
000145b8 l     F .text	0000002c split_conf_export
000145e4 l     F .text	0000003c split_conf_set
00014620 l     F .text	00000038 split_conf_get
2000154c l     O .data	00000018 split_conf_handler
00000000 l    df *ABS*	00000000 base64.c
000214bf l     O .text	00000041 base64_chars
00000000 l    df *ABS*	00000000 cborattr.c
00014808 l     F .text	00000046 cbor_target_address
0001484e l     F .text	0000000e cbor_value_get_boolean.part.0
0001484e l     F .text	0000000e cbor_value_copy_text_string.part.0
0001484e l     F .text	0000000e cbor_value_get_double.part.0
0001484e l     F .text	0000000e cbor_value_get_uint64.part.0
0001484e l     F .text	0000000e cbor_value_get_int64.part.0
0001485c l     F .text	00000036 cbor_value_get_int64
00014892 l     F .text	00000036 cbor_value_get_double
000148c8 l     F .text	0000002a cbor_value_get_uint64
000149f6 l     F .text	00000266 cbor_internal_read_object
00000000 l    df *ABS*	00000000 cbor_mbuf_reader.c
00014c64 l     F .text	0000001a cbor_mbuf_reader_cpy
00014c7e l     F .text	0000001a cbor_mbuf_reader_get8
00014c98 l     F .text	00000018 cbor_mbuf_reader_cmp
00014cb0 l     F .text	0000001c cbor_mbuf_reader_get64
00014ccc l     F .text	00000018 cbor_mbuf_reader_get32
00014ce4 l     F .text	0000001e cbor_mbuf_reader_get16
00000000 l    df *ABS*	00000000 cbor_mbuf_writer.c
00000000 l    df *ABS*	00000000 cborencoder.c
00014d84 l     F .text	00000004 append_to_buffer.isra.0
00014d88 l     F .text	0000005e encode_number_no_update
00014de6 l     F .text	00000014 encode_number
00014dfa l     F .text	00000044 create_container
00000000 l    df *ABS*	00000000 cborparser.c
00014f2e l     F .text	00000014 is_fixed_type
00014f42 l     F .text	00000004 iterate_noop
00014f46 l     F .text	000000fa preparse_value
00015040 l     F .text	0000004a preparse_next_value
0001508a l     F .text	00000088 extract_number
00015112 l     F .text	00000044 advance_internal
00015156 l     F .text	0000000e cbor_value_advance_fixed.part.0
00015156 l     F .text	0000000e cbor_value_advance.part.0
00015156 l     F .text	0000000e cbor_value_leave_container.part.0
00015164 l     F .text	00000156 iterate_string_chunks
00015428 l     F .text	00000072 advance_recursive
00000000 l    df *ABS*	00000000 hal_bsp.c
0002150c l     O .text	00000018 dw1000_0_cfg
00000000 l    df *ABS*	00000000 SEGGER_RTT.c
20000120 l     O .rtt	00000400 _acUpBuffer
20000520 l     O .rtt	00000010 _acDownBuffer
00000000 l    df *ABS*	00000000 dw1000_pkg.c
00000000 l    df *ABS*	00000000 dw1000_cli.c
000158bc l     F .text	00000044 fctrl_ledgend
00015900 l     F .text	000001b0 fctrl_to_string
00015ab0 l     F .text	00000360 sys_status_to_string
0001625c l     F .text	000002f4 dw1000_cli_cmd
20006b20 l     O .bss	00000080 b.0
20006ba0 l     O .bss	00000028 b.1
20001564 l     O .data	00000010 shell_dw1000_cmd
00000000 l    df *ABS*	00000000 hal_flash.c
00016560 l     F .text	00000024 nrf52k_flash_wait_ready
00016584 l     F .text	0000004c nrf52k_flash_erase_sector
000165d0 l     F .text	00000004 nrf52k_flash_init
000165d4 l     F .text	000000c0 nrf52k_flash_write
00016694 l     F .text	0000000e nrf52k_flash_read
000166a2 l     F .text	00000020 nrf52k_flash_sector_info
00021d8c l     O .text	0000001c nrf52k_flash_funcs
00000000 l    df *ABS*	00000000 hal_os_tick.c
000166c2 l     F .text	0000002e sub24
000166f0 l     F .text	00000040 nrf52_os_tick_set_ocmp
00016730 l     F .text	00000050 nrf52_timer_handler
00000000 l    df *ABS*	00000000 hal_timer.c
00016858 l     F .text	00000020 __NVIC_SetPendingIRQ
00016878 l     F .text	00000038 hal_timer_read_bsptimer
000168b0 l     F .text	0000007e nrf_timer_set_ocmp
00021da8 l     O .text	00000018 nrf52_hal_timers
00000000 l    df *ABS*	00000000 hal_watchdog.c
00016c34 l     F .text	00000024 nrf52_wdt_irq_handler
00000000 l    df *ABS*	00000000 nrf52_periph.c
00021dc0 l     O .text	00000004 os_bsp_spi0m_cfg
00000000 l    df *ABS*	00000000 nrng.c
00016d24 l     F .text	0000000e nrng_set_frames.part.0
00016d24 l     F .text	0000000e nrng_config.part.0
20001574 l     O .data	00000010 g_config
00000000 l    df *ABS*	00000000 rng_math.c
00000000 l    df *ABS*	00000000 timescale.c
00017068 l     F .text	00000174 timescale_QUpdate
000171dc l     F .text	00000084 timescale_JofAx
00017260 l     F .text	00000074 timescale_Aofx
000172d8 l     F .text	000000f8 timescale_innovation
000173d0 l     F .text	00000044 timescale_constraints
00017418 l     F .text	0000006c timescale_Hofx
00021e64 l     O .text	0000000f __func__.7324
00021e73 l     O .text	0000000f __func__.7336
00000000 l    df *ABS*	00000000 srkf_dbl.c
00017678 l     F .text	00000080 Hofx
000176f8 l     F .text	000000a0 Aofx
00021ec1 l     O .text	0000000e __func__.7283
00021ecf l     O .text	0000000e __func__.7299
00021edd l     O .text	0000000e __func__.7311
00000000 l    df *ABS*	00000000 trisolve_dbl.c
00000000 l    df *ABS*	00000000 ud_dbl.c
00000000 l    df *ABS*	00000000 thornton_dbl.c
00000000 l    df *ABS*	00000000 bierman_dbl.c
00000000 l    df *ABS*	00000000 twr_ss_nrng.c
000188cc l     F .text	00000050 rx_timeout_cb
0001891c l     F .text	0000000e reset_cb.part.0
0001891c l     F .text	0000000e rx_error_cb.part.0
0001892c l     F .text	0000002c reset_cb
00018958 l     F .text	00000038 rx_error_cb
00018990 l     F .text	0000033c rx_complete_cb
20001584 l     O .data	0000003c g_cbs
200015c0 l     O .data	00000010 g_config
200015d0 l     O .data	00000010 g_rng_cfgs
00000000 l    df *ABS*	00000000 slots.c
00000000 l    df *ABS*	00000000 uwb_rng.c
00018db8 l     F .text	0000000e reset_cb.part.0
00018db8 l     F .text	0000000e uwb_rng_config.part.0
00018db8 l     F .text	0000000e uwb_rng_set_frames.part.0
00018db8 l     F .text	0000000e uwb_rng_free.part.0
00018db8 l     F .text	0000000e complete_ev_cb.part.0
00018db8 l     F .text	0000000e superframe_reset_cb.part.0
00018db8 l     F .text	0000000e rx_timeout_cb.part.0
00018dc6 l     F .text	00000032 reset_cb
00018df8 l     F .text	00000036 rx_timeout_cb
00018e30 l     F .text	00000040 superframe_reset_cb
00018e70 l     F .text	00000012 complete_ev_cb
00018e84 l     F .text	00000120 complete_cb
000190f0 l     F .text	000000d0 rx_complete_cb
00019270 l     F .text	00000138 tx_final_cb
000193c2 l     F .text	00000056 tx_complete_cb
20006c18 l     O .bss	000003c0 g_twr_frames
200015e0 l     O .data	0000003c g_cbs
2000161c l     O .data	00000010 g_config
00000000 l    df *ABS*	00000000 rng_encode.c
00000000 l    df *ABS*	00000000 rng_json.c
000195f4 l     F .text	0000003c rng_write_line
00000000 l    df *ABS*	00000000 wcs_timescale.c
00019a78 l     F .text	0000008c wcs_timescale_cb
00000000 l    df *ABS*	00000000 inline.c
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strrchr.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll.c
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 strntoumax.c
00000000 l    df *ABS*	00000000 strsep.c
00000000 l    df *ABS*	00000000 strpbrk.c
00000000 l    df *ABS*	00000000 imgmgr.c
0001a07c l     F .text	0000001c cbor_encode_text_stringz
0001a098 l     F .text	0000004c imgr_upload_good_rsp
0001a0e4 l     F .text	00000034 imgr_erase_state.part.0
0001a0e4 l     F .text	00000034 imgr_erase.part.0
0001a28c l     F .text	00000036 imgr_erase_state
0001a2c2 l     F .text	00000036 imgr_erase
0001a334 l     F .text	00000340 imgr_upload
20006fdc l     O .bss	00000030 imgr_state
2000700c l     O .bss	00000004 imgr_upload_arg
20007010 l     O .bss	00000004 imgr_upload_cb
2000162c l     O .data	0000000c imgr_nmgr_group
000221bc l     O .text	00000038 imgr_nmgr_handlers
00000000 l    df *ABS*	00000000 imgmgr_log.c
00000000 l    df *ABS*	00000000 imgmgr_state.c
0001a6d4 l     F .text	0000001c cbor_encode_text_stringz
00000000 l    df *ABS*	00000000 imgmgr_util.c
00000000 l    df *ABS*	00000000 mgmt.c
0001aaa4 l     F .text	00000018 mgmt_group_list_lock
20007014 l     O .bss	0000000c mgmt_group_lock
20001638 l     O .data	00000008 mgmt_group_list
00000000 l    df *ABS*	00000000 newtmgr.c
0001ab5c l     F .text	00000024 nmgr_rsp_frag_alloc
0001ab80 l     F .text	00000064 nmgr_init_rsp
0001abe4 l     F .text	000001bc nmgr_event_data_in
20007024 l     O .bss	00000060 nmgr_task_cbuf
00000000 l    df *ABS*	00000000 newtmgr_os.c
0001ae2c l     F .text	0000004c nmgr_reset
0001ae78 l     F .text	00000006 nmgr_reset_tmo
0001ae80 l     F .text	0000005c nmgr_datetime_set
0001aedc l     F .text	0000001c cbor_encode_text_stringz
0001aef8 l     F .text	00000078 nmgr_datetime_get
0001af70 l     F .text	00000078 nmgr_def_echo
0001afe8 l     F .text	0000010c nmgr_def_mpstat_read
0001b0f4 l     F .text	000001a4 nmgr_def_taskstat_read
0001b298 l     F .text	00000054 nmgr_def_console_echo
20007084 l     O .bss	00000020 nmgr_reset_callout
20001640 l     O .data	0000000c nmgr_def_group
000222c0 l     O .text	00000030 nmgr_def_group_handlers
00000000 l    df *ABS*	00000000 nmgr_shell.c
0001b2f8 l     F .text	00000006 nmgr_shell_get_mtu
0001b300 l     F .text	0000000c nmgr_shell_in
0001b30c l     F .text	00000018 nmgr_shell_out
200070a4 l     O .bss	00000020 nmgr_shell_transport
00000000 l    df *ABS*	00000000 config_init.c
200070c4 l     O .bss	0000006c conf_fcb_area
2000164c l     O .data	00000038 config_init_conf_fcb
00000000 l    df *ABS*	00000000 config_fcb.c
0001b434 l     F .text	00000024 conf_fcb_load
0001b458 l     F .text	00000040 conf_fcb_load_cb
0001b498 l     F .text	000000f2 conf_fcb_compress_internal.part.0
0001b66e l     F .text	00000006 conf_fcb_save
20001684 l     O .data	00000010 conf_fcb_itf
00000000 l    df *ABS*	00000000 config_line.c
00000000 l    df *ABS*	00000000 flash_map.c
20007138 l     O .bss	00000078 mfg_areas.0
00000000 l    df *ABS*	00000000 log.c
0001b98c l     F .text	00000014 log_call_append_cb
0001b9a0 l     F .text	000000c0 log_append_prepare
0001bc6e l     F .text	00000026 log_read_hdr_walk
0001bcb0 l     F .text	00000040 log_walk_body_fn
200071b8 l     O .bss	00000004 g_log_module_list
200071bc l     O .bss	00000001 log_written
20001694 l     O .data	00000008 g_log_list
00022338 l     O .text	00000024 CSWTCH.19
00000000 l    df *ABS*	00000000 log_console.c
0001bd0a l     F .text	00000004 log_console_read
0001bd0e l     F .text	00000004 log_console_walk
0001bd12 l     F .text	00000004 log_console_flush
0001bd18 l     F .text	0000003c log_console_append_body
0001bd54 l     F .text	00000040 log_console_append
200071c0 l     O .bss	00000018 log_console
00000000 l    df *ABS*	00000000 log_level.c
200071d8 l     O .bss	00000080 log_level_map
00000000 l    df *ABS*	00000000 log_nmgr.c
0001be30 l     F .text	0000000a cbor_cnt_writer
0001be3a l     F .text	0000001c cbor_encode_text_stringz
0001be58 l     F .text	00000070 log_nmgr_modlevel_set
0001bec8 l     F .text	00000070 log_nmgr_modlevel_get
0001bf38 l     F .text	00000074 log_nmgr_logs_list
0001bfac l     F .text	000000d8 log_nmgr_level_list
0001c084 l     F .text	0000008c log_nmgr_module_list
0001c110 l     F .text	00000238 log_nmgr_read
0001c348 l     F .text	00000220 log_nmgr_encode_entry
0001c568 l     F .text	0000002e log_nmgr_clear
20007258 l     O .bss	0000000c log_nmgr_group
2000169c l     O .data	00000048 log_nmgr_group_handlers
00000000 l    df *ABS*	00000000 modlog.c
20007264 l     O .bss	00000004 modlog_first_dflt
20007268 l     O .bss	000000c0 modlog_mapping_buf
20007344 l     O .bss	00000004 modlog_mappings
20007348 l     O .bss	00000024 modlog_rwl
00000000 l    df *ABS*	00000000 mfg.c
0001c7e8 l     F .text	000000a4 mfg_read_next_mmr
0001c88c l     F .text	00000060 mfg_read_tlv_body
2000736c l     O .bss	00000001 mfg_initialized
20007370 l     O .bss	00000018 mfg_mmrs
20007388 l     O .bss	00000004 mfg_num_mmrs
00000000 l    df *ABS*	00000000 log_reboot.c
0001ca0c l     F .text	00000130 log_reboot_write
0001cb3c l     F .text	00000028 reboot_conf_export
0001cb64 l     F .text	00000054 reboot_conf_get
0001cbb8 l     F .text	0000004c reboot_conf_set
2000738c l     O .bss	00000001 log_reboot_written
2000738d l     O .bss	0000000c log_reboot_written_str
2000739c l     O .bss	0000000c reboot_cnt_str
00000000 l    df *ABS*	00000000 rwlock.c
0001cc94 l     F .text	0000003a rwlock_unblock
00000000 l    df *ABS*	00000000 bootutil_misc.c
0001ce02 l     F .text	00000048 boot_write_trailer_byte
0001cf18 l     F .text	0000001e boot_read_swap_state_by_id.part.0
00022578 l     O .text	00000012 boot_swap_tables
00000000 l    df *ABS*	00000000 loader.c
0001d0c4 l     F .text	0000004c boot_read_image_headers
0001d110 l     F .text	00000068 boot_read_sectors
200073ac l     O .bss	00000068 boot_data
20007414 l     O .bss	00000004 tmpbuf.0
00000000 l    df *ABS*	00000000 image_validate.c
00000000 l    df *ABS*	00000000 sha256.c
0002258c l     O .text	00000100 K
00000000 l    df *ABS*	00000000 fcb.c
00000000 l    df *ABS*	00000000 fcb_append.c
0001d902 l     F .text	00000012 fcb_len_in_flash.isra.0
00000000 l    df *ABS*	00000000 fcb_elem_info.c
00000000 l    df *ABS*	00000000 fcb_getnext.c
00000000 l    df *ABS*	00000000 fcb_rotate.c
00000000 l    df *ABS*	00000000 fcb_walk.c
00000000 l    df *ABS*	00000000 hal_flash.c
0001dd5e l     F .text	0000001c hal_flash_check_addr
20007418 l     O .bss	00000001 protected_flash
00000000 l    df *ABS*	00000000 os_heap.c
0001dfce l     F .text	0000000e os_malloc_lock.part.0
0001dfce l     F .text	0000000e os_malloc_unlock.part.0
0001dfdc l     F .text	00000024 os_malloc_lock
0001e000 l     F .text	00000020 os_malloc_unlock
2000741c l     O .bss	0000000c os_malloc_mutex
00000000 l    df *ABS*	00000000 json_encode.c
0001e148 l     F .text	000001ec json_encode_value
00000000 l    df *ABS*	00000000 json_util.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _arm_fixunsdfsi.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _aeabi_ldivmod.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 sf_ceil.c
00000000 l    df *ABS*	00000000 w_asin.c
00000000 l    df *ABS*	00000000 w_fmod.c
00000000 l    df *ABS*	00000000 wf_log10.c
00000000 l    df *ABS*	00000000 e_asin.c
00000000 l    df *ABS*	00000000 e_fmod.c
000226c8 l     O .text	00000010 Zero
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 ef_log10.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 ef_log.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 ultrawidebuffs_datatransfer-sysdown-app.c
00000000 l    df *ABS*	00000000 ultrawidebuffs_datatransfer-sysflash.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 impure.c
20001708 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
000152ba g     F .text	00000060 _cbor_value_decode_int64_internal
00015528 g     F .text	000001ac SEGGER_RTT_WriteNoLock
00014d74 g     F .text	00000010 cbor_mbuf_writer_init
0001ecec g     F .text	0000002c .hidden __aeabi_dcmpun
0000c778 g     F .text	00000030 os_arch_start
0001b8c0 g     F .text	0000001c flash_area_id_from_image_slot
00010950 g     F .text	00000004 dpl_cputime_delay_usecs
0001b5e0 g     F .text	00000014 conf_fcb_dst
20007428 g       .bss	00000000 __HeapBase
20003bb4 g     O .bss	00000008 g_os_task_list
0000c8e0 g     F .text	0000007c os_idle_task
0001ecb0 g     F .text	00000012 .hidden __aeabi_dcmple
00009fe0 g     F .text	000000b0 dw1000_stop_rx
00019e60 g     F .text	00000010 strcpy
0000b842 g     F .text	00000044 dw1000_phy_config_lde
0000bed2 g     F .text	00000038 dw1000_phy_event_cnt_ctrl
00019d28 g     F .text	0000001c wcs_timescale_free
0000b76e g     F .text	0000002c dw1000_phy_sysclk_PLL
00000000 g       .svc_table	00000000 SVC_Count
0000a0d2 g     F .text	0000001c dw1000_adj_rx_timeout
00008164  w    F .text	00000002 TIMER2_IRQHandler
000108e0 g     F .text	00000014 fmemopen_w
0001ebec g     F .text	0000007a .hidden __cmpdf2
00019d74 g     F .text	00000022 wcs_timescale_pkg_down
00010e50 g     F .text	00000048 mem_split_frag
0001f298 g     F .text	00000012 fabs
0000de26 g     F .text	0000004c os_mbuf_copydata
20002dbc g     O .bss	00000008 g_os_mempool_list
0000cad4 g     F .text	0000001a os_callout_init
0000caf0 g     F .text	0000003c os_callout_stop
00008164  w    F .text	00000002 RTC0_IRQHandler
000092ee g     F .text	00000004 uwb_dw1000_set_autoack
0001ce68 g     F .text	000000b0 boot_read_swap_state
00018280 g     F .text	00000446 thornton_dbl
00010114 g     F .text	00000050 add_malloc_block
0001ebec g     F .text	0000007a .hidden __eqdf2
0000a1cc g     F .text	00000058 dw1000_set_rx_window
0000cdba g     F .text	00000066 os_eventq_put
000129b8 g     F .text	00000004 shell_evq_set
00008d08 g     F .text	00000054 hal_dw1000_reset
0001800c g     F .text	000000cc trisolve_dbl
20000530 g       .data	00000000 __data_start__
0000dfe4 g     F .text	0000004c os_mbuf_extend
0000eeec g     F .text	00000110 uwb_ccp_start
00019eba g     F .text	0000001c strtok_r
00021d74 g     O .text	00000018 nrf52k_flash_dev
0001e75c g     F .text	0000005a .hidden __floatdidf
0001da50 g     F .text	00000036 fcb_append_finish
0001083c g     F .text	00000024 printf
0001a7fe g     F .text	00000046 imgmgr_state_confirm
000209b8 g     O .text	00000004 stdout
00009074 g     F .text	0000017c hal_dw1000_write_noblock
00013204 g     F .text	00000050 shell_ticks_cmd
00008164  w    F .text	00000002 SWI0_EGU0_IRQHandler
0000c084 g     F .text	00000018 hal_gpio_write
0001d45c g     F .text	0000013c mbedtls_internal_sha256_process
0001d718 g     F .text	00000024 fcb_free_sector_cnt
00012f10 g     F .text	0000001c shell_nlip_output
0001bd04 g     F .text	00000006 log_flush
0000c6f8 g     F .text	0000007c os_arch_os_init
0001cc04 g     F .text	00000034 log_reboot
00008156  w    F .text	00000002 HardFault_Handler
00014390 g     F .text	000000a0 datetime_format
000169d8 g     F .text	00000058 hal_timer_init
0001c960 g     F .text	00000016 mfg_seek_next_with_type
00014e58 g     F .text	0000001c cbor_encode_int
0000c7a8 g     F .text	00000050 os_arch_os_start
200066a8 g     O .bss	00000001 g_console_ignore_non_nlip
200066aa g     O .bss	00000001 g_console_silence_non_nlip
0001dd9e g     F .text	00000010 hal_flash_align
0001bc5c g     F .text	00000012 log_read
000133fc g     F .text	00000024 stats_group_walk
00019418 g     F .text	00000060 uwb_rng_pkg_init
00008164  w    F .text	00000002 SWI2_EGU2_IRQHandler
0001ce4a g     F .text	0000001c boot_magic_compatible_check
00012138 g     F .text	0000000c console_no_ticks
00008ae8 g     F .text	000000b8 uwb_calc_aoa
0000e440 g     F .text	00000058 tdma_tx_slot_start
0000dc1a g     F .text	0000000c SysTick_Handler
00018d50 g     F .text	00000022 BitPosition
00008164  w    F .text	00000002 GPIOTE_IRQHandler
0000d84c g     F .text	00000044 os_task_remove
00016930 g     F .text	000000a8 nrf52_timer0_irq_handler
00014c5c g     F .text	00000008 cbor_read_object
00016550 g     F .text	0000000c dw1000_cli_register
00014d54 g     F .text	0000001e cbor_mbuf_writer
0000cfd8 g     F .text	00000032 os_memblock_put
000180d8 g     F .text	000001a4 ud_dbl
00008164  w    F .text	00000002 PWM1_IRQHandler
00011040 g     F .text	0000000c conf_dst_register
0000d0c4 g     F .text	00000030 os_msys_get_pkthdr
20007130 g     O .bss	00000004 flash_map
00013c34 g     F .text	00000218 uwbcfg_commit_to_inst_dw1000
0001df20 g     F .text	0000002e hal_flash_is_erased
0000dbd4 g     F .text	00000046 PendSV_Handler
0001089c g     F .text	0000001a snprintf
00008154  w    F .text	00000002 NMI_Handler
0000fe10 g     F .text	00000034 uwb_transport_pkg_init
000226f0 g       .ARM.exidx	00000000 __exidx_end
0001d3b0 g     F .text	00000008 mbedtls_sha256_init
00008020 g       .text	00000000 __isr_vector_start
0000a4d0 g     F .text	00000028 dw1000_set_autoack_delay
0001ba60 g     F .text	00000064 log_init
000108b6 g     F .text	00000028 memfile_write
0000c674 g     F .text	00000014 os_arch_ctx_sw
00014e74 g     F .text	00000022 cbor_encode_simple_value
00012110 g     F .text	00000004 rtt_console_is_init
0000ca9a g     F .text	0000000a os_system_reset
00008cf8 g     F .text	00000010 hal_dw1000_inst
000081b0 g     F .text	0000002c hal_system_reset
0000c980 g     F .text	00000058 os_init_idle_task
0000980c g     F .text	00000078 dw1000_dev_enter_sleep
20001358 g       .data	00000000 __aeabi_unwind_cpp_pr0
0001ebdc g     F .text	0000008a .hidden __gtdf2
0000d430 g     F .text	0000000c os_sched_set_current_task
00008164  w    F .text	00000002 POWER_CLOCK_IRQHandler
0002002c g     F .text	0000000c __errno
000226f0 g       .ARM.exidx	00000000 __etext
0000db30 g     F .text	00000028 os_get_uptime_usec
0000ff00 g     F .text	00000078 uwb_wcs_prediction
00011fbc g     F .text	0000003c console_vprintf
0001c598 g     F .text	0000001c log_nmgr_register_group
00008164  w    F .text	00000002 RADIO_IRQHandler
0001b834 g     F .text	00000024 flash_area_write
00016f28 g     F .text	00000028 usecs_to_response
0000f876 g     F .text	000000d0 uwb_transport_listen
000109dc g     F .text	00000038 dpl_mqueue_get
0001ef18 g     F .text	0000002e .hidden __aeabi_d2lz
0000d168 g     F .text	000000a4 os_mutex_release
00013444 g     F .text	00000030 stats_register
0001f93c g     F .text	0000027c __ieee754_fmod
20007020 g     O .bss	00000004 nmgr_evq
0000d32c g     F .text	00000020 os_sanity_check_register
20001b30 g       .bssnz	00000000 __bssnz_start__
20005e28 g     O .bss	00000004 conf_load_srcs
0001d762 g     F .text	00000020 fcb_get_len
0000b8b8 g     F .text	000001ca dw1000_phy_init
0000d9c4 g     F .text	00000028 os_time_delay
0001cf68 g     F .text	00000094 boot_swap_type
20001440 g     O .data	000000a0 g_uwb_config
0000df68 g     F .text	0000007c os_mbuf_copyinto
00008ba0 g     F .text	0000002c dw1000_gpio5_config_ext_txe
00008164  w    F .text	00000002 PDM_IRQHandler
0001ec78 g     F .text	00000010 .hidden __aeabi_cdcmple
0000ba82 g     F .text	00000068 dw1000_phy_rx_reset
0001c976 g     F .text	00000006 mfg_read_tlv_flash_area
00012150 g     F .text	0000000c console_get_ticks
0000a0c0 g     F .text	00000012 dw1000_set_rxauto_disable
0001a776 g     F .text	00000014 imgmgr_state_slot_in_use
00014430 g     F .text	00000028 crc16_ccitt
00019b08 g     F .text	00000198 wcs_timescale_ev
0001531a g     F .text	00000022 cbor_parser_init
0000ac64 g     F .text	0000005c dw1000_calc_rssi
00012104 g     F .text	0000000c console_rx_restart
0000d040 g     F .text	00000010 os_mempool_module_init
00008164  w    F .text	00000002 TEMP_IRQHandler
0000c69a g     F .text	0000000a os_arch_in_critical
000203d6 g     O .text	0000003c g_stats_map_mac_stat_section
00008164  w    F .text	00000002 QDEC_IRQHandler
0000bdc4 g     F .text	00000048 dw1000_phy_data_duration
200014e0 g     O .data	00000050 g_uwbcfg_str
000156d4 g     F .text	00000110 SEGGER_RTT_GetKey
00008164  w    F .text	00000002 TIMER3_IRQHandler
000190c8 g     F .text	00000028 uwb_rng_clear_twr_data
0000c66c g     F .text	00000006 timer_handler
0000cd48 g     F .text	00000024 os_dev_lookup
0000d460 g     F .text	00000074 os_sched_sleep
00009524 g     F .text	000000a4 dw1000_read_reg
00011f30 g     F .text	0000000c console_set_completion_cb
000093e8 g     F .text	00000098 dw1000_read
00010270 g     F .text	0000001a memcpy
0001ec68 g     F .text	00000020 .hidden __aeabi_cdrcmple
00022033 g     O .text	0000001e g_stats_map_twr_ss_nrng_stat_section
00012e3c g     F .text	000000c0 shell_nlip_process
00014658 g     F .text	0000000c split_conf_init
00011248 g     F .text	00000030 conf_parse_name
00008a18 g     F .text	00000078 uwb_task_init
00016c58 g     F .text	00000070 hal_watchdog_init
0000fff6 g     F .text	00000020 uwb_wcs_read_systime_master64
0001e6e4 g     F .text	00000022 .hidden __floatsidf
0001104c g     F .text	00000054 conf_load
0001e378 g     F .text	00000038 json_encode_array_value
0000ff78 g     F .text	00000068 uwb_wcs_local_to_master64
0001ebe4 g     F .text	00000082 .hidden __ltdf2
0001e3f8 g     F .text	00000028 json_readn
0000cc24 g     F .text	00000008 os_cputime_init
20005e34 g     O .bss	00000004 conf_handlers
0001e3b0 g     F .text	0000001c json_encode_array_finish
00016b40 g     F .text	00000024 hal_timer_set_cb
0001eee8 g     F .text	00000000 .hidden __aeabi_uldivmod
0001df4e g     F .text	00000050 hal_flash_isempty
0001453c g     F .text	00000024 split_app_init
00019db4 g     F .text	00000034 puts
000193a8 g     F .text	0000001a rng_issue_complete
00000020 g       *ABS*	00000000 _imghdr_size
0000d3f8 g     F .text	0000002c os_sched_ctx_sw_hook
0001fe2c g     F .text	00000200 __ieee754_logf
0001db38 g     F .text	00000050 fcb_elem_info
2000668c g     O .bss	00000004 console_is_midline
000129bc g     F .text	00000130 shell_exec
0000dd42 g     F .text	00000014 os_mbuf_free
2000053c g     O .data	00000004 SystemCoreClock
00010954 g     F .text	00000026 dpl_cputime_timer_relative
0000a090 g     F .text	0000001e dw1000_set_wait4resp
000081a4 g     F .text	0000000c hal_system_init
00014e96 g     F .text	00000024 cbor_encode_byte_string
0000baf0 g     F .text	000000f8 dw1000_phy_forcetrxoff
00008164  w    F .text	00000002 SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
0000c6a4 g     F .text	00000040 os_arch_task_stack_init
0000aa6e g     F .text	00000034 dw1000_calc_clock_offset_ratio_ttco
000095c8 g     F .text	000000b6 dw1000_write_reg
00010164 g     F .text	00000098 malloc
0001b810 g     F .text	00000024 flash_area_read
0000b820 g     F .text	00000022 dw1000_phy_disable_sequencing
0000c7fc g     F .text	0000004c __assert_func
0001a200 g     F .text	00000014 imgr_my_version
0000c1c8 g     F .text	00000074 nrf52_spi0_irq_handler
0001a6f0 g     F .text	00000086 imgmgr_state_flags
0000d5e4 g     F .text	00000034 os_sched_wakeup_ticks
000136f0 g     F .text	00000020 stats_shell_register
00011f3c g     F .text	00000080 console_pkg_init
00010ad2 g     F .text	0000001c dpl_msys_get_pkthdr
0001a688 g     F .text	0000003c imgmgr_module_init
0000815c  w    F .text	00000002 UsageFault_Handler
00009f6c g     F .text	0000006e dw1000_set_delay_start
00019ee2 g     F .text	00000008 strtoll
00010860 g     F .text	0000003c vsnprintf
20006af8 g     O .bss	00000018 _uwbcfg_log
0001ed68 g     F .text	00000040 .hidden __fixunsdfsi
20002d9c g     O .bss	00000008 g_callout_list
0001e020 g     F .text	0000001c os_malloc
0000ee7c g     F .text	0000006e uwb_ccp_free
00008164  w    F .text	00000002 UARTE0_UART0_IRQHandler
000104fc g     F .text	0000033c tfp_format
2000fe50 g       *ABS*	00000000 __HeapLimit
20001b30 g       .bss	00000000 __bss_start__
0000e348 g     F .text	0000002e tdma_release_slot
000081dc g     F .text	00000010 hal_debugger_connected
0001e6c4 g     F .text	0000001e .hidden __aeabi_ui2d
0001de04 g     F .text	00000064 hal_flash_write
00010bd2 g     F .text	0000004e dpl_mbuf_appendfrom
0001a6c4 g     F .text	00000004 imgmgr_log_upload_start
00008164  w    F .text	00000002 TIMER4_IRQHandler
0000f6ec g     F .text	00000058 uwb_transport_create_mbuf_pool
00008cc2 g     F .text	00000036 hal_dw1000_spi_txrx_cb
0001efc4 g     F .text	000002d0 .hidden __udivmoddi4
0001e440 g     F .text	00000000 .hidden __aeabi_drsub
00010930 g     F .text	00000004 dpl_cputime_timer_stop
0000e3a6 g     F .text	00000034 tdma_free
0001addc g     F .text	00000050 nmgr_pkg_init
0000fa64 g     F .text	0000005e uwb_transport_start_tx
000153f8 g     F .text	00000030 _cbor_value_copy_string
00008bf8 g     F .text	000000ca dw1000_gpio_config_leds
00008a90 g     F .text	0000001a uwb_task_deinit
20003bac g     O .bss	00000004 g_current_task
0000d34c g     F .text	00000050 os_sanity_run
00014f06 g     F .text	00000028 cbor_encoder_close_container
0000c688 g     F .text	0000000c os_arch_save_sr
20006acd g     O .bss	00000001 sysdown_active
0001ec9c g     F .text	00000012 .hidden __aeabi_dcmplt
0001cf38 g     F .text	0000001c boot_write_magic
0000cf78 g     F .text	00000012 os_mempool_init
0001b368 g     F .text	000000c8 config_pkg_init
0000d9ec g     F .text	0000003c os_gettimeofday
20003bbc g     O .bss	00000001 g_task_id
00011278 g     F .text	00000018 conf_parse_and_lookup
00014124 g     F .text	00000108 timeval_to_clocktime
00013b00 g     F .text	00000010 uwbcfg_register
20001414 g     O .data	00000008 g_stats_registry
0001e708 g     F .text	00000042 .hidden __extendsfdf2
00011224 g     F .text	00000024 conf_handler_lookup
0000acc0 g     F .text	0000001c dw1000_get_rssi
0001ea0c g     F .text	000001d0 .hidden __aeabi_ddiv
0001e44c g     F .text	00000276 .hidden __adddf3
00008924 g     F .text	00000054 uwb_dev_idx_lookup
00010c20 g     F .text	0000004c dpl_mbuf_copydata
0000fd84 g     F .text	0000008c uwb_transport_enqueue_tx
200013c0 g     O .data	00000008 g_msys_pool_list
000226d8 g       .text	00000000 __exidx_start
00019efc g     F .text	00000130 strntoumax
0001e7b8 g     F .text	00000254 .hidden __aeabi_dmul
000207c3 g     O .text	00000078 g_stats_map_uwb_ccp_stat_section
0000d39c g     F .text	00000010 os_sanity_init
200016fc g     O .data	00000001 __fdlib_version
20006fd8 g     O .bss	00000004 imgmgr_dfu_callbacks_fn
00016f50 g     F .text	00000048 uwb_rng_tof_to_meters
0001a844 g     F .text	000001a4 imgmgr_state_read
0000dd6a g     F .text	000000a0 os_mbuf_append
0001c97c g     F .text	00000006 mfg_read_tlv_mmr_ref
00012114 g     F .text	00000024 rtt_console_init
0000db74 g     F .text	00000014 os_set_env
00010f60 g     F .text	00000036 dpl_memblock_put_from_cb
00009af4 g     F .text	00000044 dw1000_dev_enter_sleep_after_tx
0000ad34 g     F .text	0000000e dw1000_read_systime_lo
0000acdc g     F .text	00000048 dw1000_estimate_los
000154c8 g     F .text	00000010 hal_bsp_flash_dev
00018ccc g     F .text	00000074 twr_ss_nrng_pkg_init
0000a57c g     F .text	0000008a dw1000_set_dblrxbuff
00016cec g     F .text	00000038 nrf52_periph_create
00017484 g     F .text	000000f4 timescale_init
0000b79a g     F .text	0000002c dw1000_phy_txclk_PLL
00010aa6 g     F .text	0000002c dpl_mbuf_get_pkthdr
0000aba0 g     F .text	0000001c dw1000_ic_and_host_ptrs_equal
000209b0 g     O .text	00000008 MemFile_methods
0000bbe8 g     F .text	0000006a dw1000_phy_interrupt_mask
20003ba0 g     O .bss	0000000c g_os_sanity_check_mu
0001b880 g     F .text	00000006 flash_area_align
0001e6c4 g     F .text	0000001e .hidden __floatunsidf
0001a6d0 g     F .text	00000004 imgmgr_log_confirm
00011efc g     F .text	0000000c console_line_queue_set
0001e03c g     F .text	00000018 os_free
00008178 g     F .text	0000002c _sbrk
00014730 g     F .text	00000022 base64_pad
000154b8 g     F .text	00000010 cbor_value_calculate_string_length
0000a964 g     F .text	00000020 dw1000_read_carrier_integrator
00016780 g     F .text	00000044 os_tick_idle
00011ff8 g     F .text	0000001a console_printf
0001adac g     F .text	00000010 nmgr_transport_init
0001a674 g     F .text	00000014 imgmgr_dfu_confirmed
00013014 g     F .text	00000012 shell_os_reset_cmd
00009480 g     F .text	000000a4 dw1000_write
0000f948 g     F .text	0000011c uwb_transport_write_tx
0000abbc g     F .text	0000008c dw1000_calc_fppl
00011a94 g     F .text	00000002 console_blocking_mode
000110a0 g     F .text	00000014 conf_ensure_loaded
0000a4f8 g     F .text	00000084 dw1000_set_wait4resp_delay
0001533c g     F .text	0000008c cbor_value_enter_container
00008164  w    F .text	00000002 I2S_IRQHandler
00008490 g     F .text	00000002 _init
0001de68 g     F .text	000000b8 hal_flash_erase
00014588 g     F .text	0000000c split_mode_get
00019ed6 g     F .text	0000000c strtol
00013154 g     F .text	0000007c shell_os_date_cmd
0000e498 g     F .text	0000002c tdma_pkg_init
0001fd50 g     F .text	000000c0 __ieee754_log10f
0001db88 g     F .text	00000042 fcb_getnext_in_area
00008164  w    F .text	00000002 SWI4_EGU4_IRQHandler
0001eda8 g     F .text	0000009e .hidden __aeabi_d2f
000167c4 g     F .text	00000094 os_tick_init
0001ef88 g     F .text	0000003c .hidden __aeabi_d2ulz
0000bc54 g     F .text	00000148 dw1000_phy_repeated_frames
200013c8 g     O .data	00000008 g_dpl_mempool_list
0000a224 g     F .text	00000020 dw1000_set_abs_timeout
0001da86 g     F .text	000000b2 fcb_elem_crc8
0001bd94 g     F .text	00000008 log_console_get
00008164  w    F .text	00000002 TIMER0_IRQHandler
0000c9d8 g     F .text	000000a4 os_init
0001a6c8 g     F .text	00000004 imgmgr_log_upload_done
000080f8 g     F .text	0000005c Reset_Handler
00017f6c g     F .text	000000a0 srkf_dbl_free
00019ea0 g     F .text	0000001a strrchr
0001d73c g     F .text	00000026 fcb_put_len
00014560 g     F .text	00000026 split_check_status
00015e10 g     F .text	00000110 dw1000_cli_dump_registers
0001c66c g     F .text	000000a4 modlog_append
000116a8 g     F .text	0000000c console_echo
0001ed18 g     F .text	0000004e .hidden __fixdfsi
0001007c g     F .text	00000030 calloc
0000d00c g     F .text	00000034 os_mempool_info_get_next
20006af4 g     O .bss	00000001 sysinit_active
000157e4 g     F .text	00000064 SEGGER_RTT_Init
200066a9 g     O .bss	00000001 g_console_silence
00014594 g     F .text	0000000c split_app_active_get
00014ede g     F .text	00000006 cbor_encoder_create_array
0000dc26 g     F .text	0000001e os_default_irq_asm
20006bf0 g     O .bss	00000028 g_twr_ss_nrng_stat
00021d20 g     O .text	0000000c cmd_dw1000_help
0000d618 g     F .text	0000000c os_sched_next_task
0000d3ac g     F .text	0000004c os_sched_insert
0000cb2c g     F .text	00000074 os_callout_reset
0001c984 g     F .text	00000078 mfg_init
0000cd6c g     F .text	00000010 os_dev_reset
00012c7c g     F .text	00000074 shell_init
00010d04 g     F .text	0000007c dpl_mbuf_copyinto
0001e44c g     F .text	00000276 .hidden __aeabi_dadd
0001ebe4 g     F .text	00000082 .hidden __ledf2
0001aabc g     F .text	00000014 mgmt_group_list_unlock
0000d154 g     F .text	00000014 os_mutex_init
00008168 g     F .text	00000010 _sbrkInit
0001ef48 g     F .text	00000040 .hidden __aeabi_f2ulz
0000ce20 g     F .text	00000018 os_eventq_get_no_wait
0001e74c g     F .text	0000006a .hidden __aeabi_ul2d
00010050 g     F .text	0000002c uwb_wcs_pkg_down
20001b30 g       .bssnz	00000000 __bssnz_end__
0001b8dc g     F .text	000000b0 flash_map_init
00019eec g     F .text	00000010 vprintf
0000c974 g     F .text	0000000c os_started
00008164  w    F .text	00000002 TIMER1_IRQHandler
20000000 g       .bss	00000000 _ram_start
200016e4 g     O .data	00000018 reboot_conf_handler
000111fc g     F .text	0000000c conf_unlock
0000d5a8 g     F .text	0000003c os_sched_os_timer_exp
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
0000be0c g     F .text	0000001c dw1000_phy_frame_duration
00013420 g     F .text	00000024 stats_group_find
00022384 g     O .text	00000028 log_console_handler
0001cdb6 g     F .text	00000020 rwlock_release_write
0001adbc g     F .text	00000020 nmgr_rx_req
0000c034 g     F .text	0000002a hal_gpio_init_in
0000fed8 g     F .text	00000026 uwb_wcs_dtu_time_adjust
0001655c g     F .text	00000004 dw1000_cli_down
00012f2c g     F .text	00000014 shell_nlip_init
0001549a g     F .text	0000001e cbor_value_advance
0002069f g     O .text	00000018 g_stats_map_tdma_stat_section
0001bac4 g     F .text	00000010 log_list_get_next
00008164  w    F .text	00000002 PWM2_IRQHandler
0001e3cc g     F .text	0000001a json_read_next
0001f428 g     F .text	0000006c log10f
0001aa74 g     F .text	00000030 imgr_ver_str
20001b30 g       .data	00000000 __data_end__
0001bb88 g     F .text	000000b0 log_register
0001d612 g     F .text	00000106 mbedtls_sha256_finish_ret
00008a0c g     F .text	0000000c uwb_mac_find_cb_inst_ptr
00013b60 g     F .text	00000004 uwbcfg_pkg_down
0001dbca g     F .text	00000018 fcb_getnext_area
0001a6cc g     F .text	00000004 imgmgr_log_pending
0001cd34 g     F .text	00000026 rwlock_release_read
0000ac48 g     F .text	0000001c dw1000_get_fppl
000109b4 g     F .text	00000028 dpl_mqueue_init
0001169c g     F .text	0000000c conf_nmgr_register
00008164  w    F .text	00000002 ECB_IRQHandler
00013254 g     F .text	00000010 shell_prompt_register
0001f498 g     F .text	000004a4 __ieee754_asin
00010aee g     F .text	00000014 dpl_mbuf_free
00012144 g     F .text	0000000c console_yes_ticks
20001b42 g     O .bss	00000012 reciever
0001ecd8 g     F .text	00000012 .hidden __aeabi_dcmpgt
0001f3b0 g     F .text	00000078 fmod
00010dcc g     F .text	00000052 dpl_mbuf_trim_front
20003bf0 g     O .bss	00000004 g_os_time
0001ada0 g     F .text	0000000c mgmt_evq_get
0000c3f4 g     F .text	000000e0 hal_spi_init
00016cd8 g     F .text	00000014 hal_watchdog_tickle
20007428 g       .bss	00000000 __bss_end__
0000cd7c g     F .text	00000020 os_dev_walk
00009b3c g     F .text	00000044 dw1000_dev_enter_sleep_after_rx
0000dcec g     F .text	0000002a os_mbuf_get
00008164  w    F .text	00000002 SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
0001b324 g     F .text	00000044 nmgr_shell_pkg_init
00016e18 g     F .text	000000d4 nrng_init
0001ecc4 g     F .text	00000012 .hidden __aeabi_dcmpge
00019014 g     F .text	000000b4 uwb_rng_init
00015848 g     F .text	00000024 dw1000_pkg_init
0001d782 g     F .text	00000032 fcb_sector_hdr_init
0001a118 g     F .text	000000e8 imgr_read_info
00013bf8 g     F .text	0000003c remap_framefilter
00010d80 g     F .text	0000004c dpl_mbuf_extend
0000ecd0 g     F .text	000001ac uwb_ccp_init
00016eec g     F .text	00000038 nrng_pkg_init
0001e448 g     F .text	0000027a .hidden __aeabi_dsub
0000d0b4 g     F .text	00000010 os_msys_reset
00008164 g     F .text	00000002 Default_Handler
0000847c g     F .text	00000014 _start
000091f0 g     F .text	00000032 hal_dw1000_rw_noblock_wait
00016f98 g     F .text	00000060 calc_tof_ss
00013028 g     F .text	00000038 shell_os_ls_dev_cmd
0001e74c g     F .text	0000006a .hidden __floatundidf
00008aaa g     F .text	0000003c uwb_dev_init
0000feb8 g     F .text	00000020 uwb_wcs_set_postprocess
20006acc g     O .bss	00000001 stats_shell_registered
20006aa8 g     O .bss	00000018 g_stats_stats
00014698 g     F .text	00000098 base64_encode
0000da28 g     F .text	00000018 os_time_is_set
0000db88 g     F .text	00000006 os_arch_init_task_stack
0000ceae g     F .text	0000001a os_eventq_run
000111ec g     F .text	00000010 conf_lock
0000d890 g     F .text	00000068 os_task_info_get_next
00022568 g     O .text	00000010 boot_img_magic
00014664 g     F .text	00000034 split_write_split
000116b4 g     F .text	00000030 console_lock
00019e80 g     F .text	00000020 strncmp
000132a8 g     F .text	00000094 stats_walk
20005e30 g     O .bss	00000004 conf_save_dst
0000c190 g     F .text	00000038 hal_gpio_irq_release
0000bd9c g     F .text	00000028 dw1000_phy_SHR_duration
20001bec g     O .bss	00000050 g_idle_task
0000c05e g     F .text	00000026 hal_gpio_init_out
0000c09c g     F .text	00000022 hal_gpio_read
00008bcc g     F .text	0000002c dw1000_gpio6_config_ext_rxe
2000143c g     O .data	00000004 sysinit_panic_cb
00016b64 g     F .text	00000072 hal_timer_start_at
0000998c g     F .text	00000164 dw1000_dev_config
0001a2f8 g     F .text	00000014 imgmgr_dfu_stopped
00016ff8 g     F .text	00000070 calc_tof_ds
20003b9c g     O .bss	00000004 g_os_sanity_check_list
0000a43c g     F .text	00000094 dw1000_set_autoack
0001e3e6 g     F .text	00000012 json_read_prev
000102d6 g     F .text	0000001e strncpy
0000aaa2 g     F .text	0000003a dw1000_read_rxdiag
0000ad52 g     F .text	0000000e dw1000_read_rxtime_lo
0000cf8a g     F .text	00000030 os_memblock_get
0000d540 g     F .text	00000068 os_sched_wakeup
0000dc8e g     F .text	00000020 os_mqueue_get
0000d648 g     F .text	00000010 os_sem_init
00012f60 g     F .text	000000b4 shell_os_mpool_display_cmd
0000be28 g     F .text	000000aa dw1000_phy_txrf_power_value
00009222 g     F .text	00000080 hal_dw1000_wakeup
00019de8 g     F .text	0000005e realloc
000131d0 g     F .text	00000034 shell_os_register
00010e1e g     F .text	00000032 mem_init_mbuf_pool
00017578 g     F .text	00000038 timescale_free
0000f84c g     F .text	0000002a uwb_transport_append_extension
0000c848 g     F .text	00000098 os_default_irq
0001b886 g     F .text	0000000a flash_area_erased_val
00009888 g     F .text	00000104 dw1000_dev_wakeup
0001e6e4 g     F .text	00000022 .hidden __aeabi_i2d
00010b02 g     F .text	00000014 dpl_mbuf_free_chain
20003bb0 g     O .bss	00000004 g_os_last_ctx_sw_time
0000d658 g     F .text	00000064 os_sem_release
0000f7f4 g     F .text	00000020 uwb_transport_get_extension
00010228 g     F .text	00000048 memcmp
0000c6e4 g     F .text	00000014 os_arch_init
00015fdc g     F .text	00000280 dw1000_cli_interrupt_backtrace
00009b84 g     F .text	000000e8 dw1000_dev_init
0001d7b4 g     F .text	00000048 fcb_sector_hdr_read
0001b674 g     F .text	00000090 conf_line_parse
0001f294  w    F .text	00000002 .hidden __aeabi_ldiv0
00010a72 g     F .text	0000000a dpl_mbuf_pool_init
0001947c g     F .text	00000024 uwb_rng_pkg_down
00011418 g     F .text	0000004c conf_commit
0001445c g     F .text	00000030 crc8_calc
0000effc g     F .text	00000044 uwb_ccp_stop
000137bc g     F .text	0000000c sysinit_start
0001ea0c g     F .text	000001d0 .hidden __divdf3
00016a30 g     F .text	000000d8 hal_timer_config
00009f56 g     F .text	00000016 dw1000_tx_wait
0000fe58 g     F .text	00000034 uwb_wcs_init
0000f744 g     F .text	0000001a uwb_transport_mtu
0000e4c4 g     F .text	00000034 tdma_pkg_down
000145a0 g     F .text	00000014 split_mode_set
0001d7fc g     F .text	00000106 fcb_init
0000e2c4 g     F .text	00000084 tdma_assign_slot
0001e7b8 g     F .text	00000254 .hidden __muldf3
00011ef8 g     F .text	00000004 console_is_init
0001111c g     F .text	00000058 conf_save
000191c0 g     F .text	000000b0 uwb_rng_twr_to_tof
0000e18c g     F .text	00000138 tdma_init
0000d6bc g     F .text	000000ac os_sem_pend
0001b2ec g     F .text	0000000c nmgr_os_groups_register
00016cc8 g     F .text	00000010 hal_watchdog_enable
0001cdd6 g     F .text	0000002c rwlock_init
00021e22 g     O .text	00000042 g_stats_map_nrng_stat_section
00010018 g     F .text	00000038 uwb_wcs_pkg_init
0001ccce g     F .text	00000066 rwlock_acquire_read
0000cc56 g     F .text	00000026 os_cputime_timer_relative
00009dca g     F .text	0000008c dw1000_write_tx_fctrl
0000dcae g     F .text	0000003e os_mqueue_put
0000d074 g     F .text	00000040 os_msys_register
20001d40 g     O .bss	00000004 g_os_idle_ctr
0001b760 g     F .text	0000003c flash_area_open
0000a122 g     F .text	000000aa dw1000_set_rx_timeout
0000df0a g     F .text	0000005e os_mbuf_cmpf
0001bc38 g     F .text	00000024 log_walk_body
00008164  w    F .text	00000002 SAADC_IRQHandler
00018d40 g     F .text	00000010 NumberOfBits
00017a6c g     F .text	00000500 srkf_dbl_init
000089ec g     F .text	00000020 uwb_mac_get_interface
0001028a g     F .text	00000036 memset
00008020 g       .text	000000d8 __isr_vector
0000870c g     F .text	000001e0 main
0000c4d4 g     F .text	00000028 hal_spi_set_txrx_cb
0001bcf0 g     F .text	00000014 log_read_body
0001dc50 g     F .text	00000034 fcb_getnext
20006b18 g     O .bss	00000008 g_spi0_sem
000120cc g     F .text	00000038 console_out_nolock
00014e48 g     F .text	00000010 cbor_encode_uint
00010f18 g     F .text	00000048 dpl_memblock_get
0001e358 g     F .text	00000020 json_encode_array_start
00008164  w    F .text	00000002 CCM_AAR_IRQHandler
00008164  w    F .text	00000002 WDT_IRQHandler
0001c5b4 g     F .text	000000b8 modlog_register
00016d32 g     F .text	0000007a nrng_set_frames
0001dc84 g     F .text	00000074 fcb_rotate
000137c8 g     F .text	0000000c sysinit_end
0001c74c g     F .text	0000009c modlog_init
0000db8e g     F .text	00000046 SVC_Handler
0000cdb0 g     F .text	0000000a os_eventq_inited
0001eda8 g     F .text	0000009e .hidden __truncdfsf2
0002148c g     O .text	00000020 sysdown_cbs
00013ff4 g     F .text	00000130 clocktime_to_timeval
0001aad0 g     F .text	00000024 mgmt_group_register
00014492 g     F .text	0000001a streamer_printf
000194a0 g     F .text	00000154 rng_encode
00010e98 g     F .text	00000080 dpl_mempool_init
0001e75c g     F .text	0000005a .hidden __aeabi_l2d
0001ddbe g     F .text	00000046 hal_flash_read
000116e4 g     F .text	00000034 console_unlock
0000cf08 g     F .text	00000008 os_eventq_dflt_get
00016b08 g     F .text	00000038 hal_timer_read
00018ff0 g     F .text	00000024 uwb_rng_config
0000ce38 g     F .text	00000076 os_eventq_get
0001b858 g     F .text	00000028 flash_area_erase
20001bc0 g     O .bss	00000028 nrf52_hal_spi0
0000b628 g     F .text	0000011c dw1000_configcwmode
000092f6 g     F .text	00000004 uwb_dw1000_event_cnt_ctrl
0000db58 g     F .text	0000001a os_time_ms_to_ticks
0001bb82 g     F .text	00000006 log_walk
0000cbf4 g     F .text	00000030 os_callout_wakeup_ticks
0001ef48 g     F .text	00000040 .hidden __fixunssfdi
00008164  w    F .text	00000002 SWI5_EGU5_IRQHandler
0000aa50 g     F .text	0000001e dw1000_read_time_tracking_offset
00009e56 g     F .text	00000100 dw1000_start_tx
0001448c g     F .text	00000006 streamer_vprintf
20007134 g     O .bss	00000004 flash_map_entries
0000de72 g     F .text	00000098 os_mbuf_adj
2000739a g     O .bss	00000002 reboot_cnt
00011208 g     F .text	0000001c conf_register
0000ca96 g     F .text	00000004 os_reboot
00008020 g       .imghdr	00000000 __text
00014458 g     F .text	00000004 crc8_init
0001b5f4 g     F .text	0000007a conf_fcb_kv_save
0000f4c8 g     F .text	0000002c uwb_ccp_pkg_init
0001c8ec g     F .text	00000074 mfg_seek_next
00016df2 g     F .text	00000024 nrng_config
000102c0 g     F .text	00000016 strcmp
0001b8b0 g     F .text	00000010 flash_area_read_is_empty
0000d424 g     F .text	0000000c os_sched_get_current_task
00014ee4 g     F .text	00000022 cbor_encoder_create_map
00011a18 g     F .text	0000007c console_write
0000e3da g     F .text	00000064 tdma_rx_slot_start
00008508 g     F .text	00000050 uwb_config_updated_func
00008288 g     F .text	000001f4 SystemInit
0000cc50 g     F .text	00000006 os_cputime_get32
0001b58c g     F .text	00000054 conf_fcb_src
00008164  w    F .text	00000002 RNG_IRQHandler
0000a3bc g     F .text	00000080 dw1000_mac_framefilter
0001bc94 g     F .text	0000001c log_read_hdr
0001ef88 g     F .text	0000003c .hidden __fixunsdfdi
0001ebec g     F .text	0000007a .hidden __nedf2
0001e354 g     F .text	00000004 json_encode_array_name
0001361c g     F .text	00000018 stats_nmgr_register_group
0000cec8 g     F .text	00000040 os_eventq_remove
00008fe8 g     F .text	0000008a hal_dw1000_write
00009d3e g     F .text	0000008c dw1000_write_tx
000110b4 g     F .text	00000064 conf_save_one
00011290 g     F .text	000000b8 conf_value_from_str
0001bad4 g     F .text	00000028 log_module_get_name
000092f2 g     F .text	00000004 uwb_dw1000_set_autoack_delay
0001e420 g     F .text	0000001e sprintf
0001ef18 g     F .text	0000002e .hidden __fixdfdi
0000d43c g     F .text	00000024 os_sched
0001ddae g     F .text	00000010 hal_flash_erased_val
0001d294 g     F .text	0000011c bootutil_img_validate
0000bf5a g     F .text	00000058 _dw1000_otp_read
0000d20c g     F .text	000000dc os_mutex_pend
000092b0 g     F .text	0000003e uwb_dw1000_mac_framefilter
00000000 g       .svc_table	00000000 SVC_Table
0001f338 g     F .text	00000078 asin
0001a78a g     F .text	00000074 imgmgr_state_set_pending
0000f760 g     F .text	00000094 uwb_transport_init
00008164  w    F .text	00000002 RTC2_IRQHandler
000220be g     O .text	00000048 g_stats_map_rng_stat_section
0000ad60 g     F .text	00000010 dw1000_read_txtime
0001e054 g     F .text	0000003c json_encode_object_start
20010000 g       .bss	00000000 __StackTop
00010a14 g     F .text	0000005e dpl_mqueue_put
00014eba g     F .text	00000024 cbor_encode_text_string
0001fe20 g     F .text	0000000c nanf
000148f2 g     F .text	00000104 cbor_read_array
20001700 g     O .data	00000004 _impure_ptr
0001b430 g     F .text	00000002 config_pkg_init_stage2
0000dc6e g     F .text	00000020 os_mqueue_init
0000da40 g     F .text	000000b0 os_settimeofday
0001be00 g     F .text	00000030 log_level_set
00015f20 g     F .text	000000bc dw1000_cli_dump_address
00008164  w    F .text	00000002 PWM0_IRQHandler
00008164  w    F .text	00000002 SWI3_EGU3_IRQHandler
0001a02c g     F .text	0000001c strsep
0000c23c g     F .text	0000011c hal_spi_config
0001b704 g     F .text	0000005a conf_line_make
0001b79c g     F .text	00000074 flash_area_to_sectors
00014754 g     F .text	000000b4 base64_decode
0000b618 g     F .text	0000000e dw1000_read_txtime_lo
000186c8 g     F .text	00000204 bierman_dbl
00019630 g     F .text	00000448 rng_json_write
000089b2 g     F .text	0000003a uwb_mac_remove_interface
00017798 g     F .text	000002d4 srkf_dbl_main
0000cba0 g     F .text	00000054 os_callout_tick
00022520 g     O .text	00000048 sysflash_map_dflt
20006bd4 g     O .bss	0000001c nrf52_hal_timer0
00018d72 g     F .text	00000046 BitIndex
20001b30 g     O .bss	00000012 payload
000080f8 g       .text	00000000 __isr_vector_end
0000c58c g     F .text	000000e0 hal_spi_txrx_noblock
0000ca7c g     F .text	0000001a os_start
0000b886 g     F .text	00000032 dw1000_phy_config_txrf
00008164  w    F .text	00000002 RTC1_IRQHandler
0001cffc g     F .text	00000082 boot_set_pending
00009c6c g     F .text	0000004c dw1000_dev_deinit
0000c358 g     F .text	00000040 hal_spi_enable
0001a9e8 g     F .text	0000008c imgmgr_state_write
0001ed68 g     F .text	00000040 .hidden __aeabi_d2uiz
00010908 g     F .text	00000024 dpl_cputime_timer_init
0001fe10 g     F .text	00000010 nan
0000cc2c g     F .text	00000024 os_cputime_timer_init
00008978 g     F .text	0000003a uwb_mac_append_interface
0001fbb8 g     F .text	00000198 __ieee754_sqrt
00011174 g     F .text	00000014 conf_store_init
0000bf0a g     F .text	00000050 dw1000_phy_event_cnt_read
0001092c g     F .text	00000004 dpl_cputime_timer_start
00016dac g     F .text	0000001c nrng_get_config
0001f2ac g     F .text	0000008c ceilf
00008164  w    F .text	00000002 SWI1_EGU1_IRQHandler
00011a98 g     F .text	00000460 console_handle_char
0000b7c6 g     F .text	00000032 dw1000_phy_sysclk_LDE
0001ec88 g     F .text	00000012 .hidden __aeabi_dcmpeq
00019d96 g     F .text	0000001e fwrite
00012bc4 g     F .text	00000040 shell_register
0001c9fc g     F .text	00000010 mfg_open
20001340 g     O .data	00000008 g_os_run_list
0000ab54 g     F .text	0000004c dw1000_mac_init
0000ad42 g     F .text	00000010 dw1000_read_rxtime
00019478 g     F .text	00000002 uwb_rng_pkg_init2
0000a608 g     F .text	0000035c dw1000_mac_config
000088ec g     F .text	00000028 NVIC_Relocate
20001b74 g     O .bss	00000004 this_tdma_slot
00011018 g     F .text	00000028 conf_src_register
00014e3e g     F .text	0000000a cbor_encoder_init
000144cc g     F .text	0000006e sysinit_app
20001be8 g     O .bss	00000004 os_flags
0001e090 g     F .text	00000054 json_encode_object_key
0000e376 g     F .text	00000030 tdma_stop
0001cf5e g     F .text	0000000a boot_write_swap_type
0000c694 g     F .text	00000006 os_arch_restore_sr
20006bc8 g     O .bss	0000000c g_hal_os_tick
00010a7c g     F .text	0000002a dpl_mbuf_get
0000a284 g     F .text	00000136 dw1000_start_rx
0000f040 g     F .text	00000040 uwb_ccp_skew_compensation_ui64
0001e0e4 g     F .text	00000064 json_encode_object_entry
0001cc38 g     F .text	0000005c log_reboot_pkg_init
2000fe50 g       *ABS*	000001b0 __StackLimit
0001b890 g     F .text	00000020 flash_area_is_empty
0001a30c g     F .text	00000014 imgmgr_dfu_started
20002d98 g     O .bss	00000004 g_os_started
0001d598 g     F .text	0000007a mbedtls_sha256_update_ret
00019d44 g     F .text	00000030 wcs_timescale_pkg_init
0001d178 g     F .text	0000011c split_go
00008164  w    F .text	00000002 SPIM2_SPIS2_SPI2_IRQHandler
00008164  w    F .text	00000002 NFCT_IRQHandler
000138a0 g     F .text	0000023c uwbcfg_commit_to_inst
0001a214 g     F .text	00000036 imgr_find_by_hash
0001093a g     F .text	00000016 dpl_cputime_delay_ticks
000153c8 g     F .text	0000002e cbor_value_leave_container
0001d914 g     F .text	00000038 fcb_append_to_scratch
0001ab34 g     F .text	00000028 mgmt_cbuf_setoerr
0001e334 g     F .text	00000020 json_encode_object_finish
0000dd56 g     F .text	00000014 os_mbuf_free_chain
0001ed18 g     F .text	0000004e .hidden __aeabi_d2iz
0000daf0 g     F .text	00000040 os_get_uptime
00016dc8 g     F .text	0000002a nrng_append_config
0000d0f4 g     F .text	00000060 os_msys_init
0001dbe2 g     F .text	0000006e fcb_getnext_nolock
0000de0a g     F .text	0000001c os_mbuf_off
200066ab g     O .bss	00000001 g_is_output_nlip
00012c04 g     F .text	00000078 shell_cmd_register
0000c14c g     F .text	00000028 hal_gpio_irq_enable
0000d93c g     F .text	0000000c os_time_get
20007328 g     O .bss	0000001c modlog_mapping_pool
0000c4fc g     F .text	00000090 hal_spi_txrx
000175b0 g     F .text	000000c8 timescale_main
00016bd6 g     F .text	0000005e hal_timer_stop
00009cdc g     F .text	00000062 dw1000_read_rx
0000a244 g     F .text	00000040 dw1000_sync_rxbufptrs
000113e0 g     F .text	00000038 conf_get_value
0001bafc g     F .text	00000044 log_append_body
00018fa4 g     F .text	00000024 uwb_rng_free
0000dd16 g     F .text	0000002c os_mbuf_get_pkthdr
200071b0 g     O .bss	00000008 g_log_info
00011348 g     F .text	00000064 conf_str_from_value
0001f294  w    F .text	00000002 .hidden __aeabi_idiv0
00014d04 g     F .text	00000050 cbor_mbuf_reader_init
0001ecec g     F .text	0000002c .hidden __unorddf2
0001422c g     F .text	00000162 datetime_parse
0001d94c g     F .text	00000104 fcb_append
200000d8 g     O .rtt	00000048 _SEGGER_RTT
000113ac g     F .text	00000034 conf_set_value
00021d2c g     O .text	00000048 cmd_dw1000_param
00010934 g     F .text	00000006 dpl_cputime_get32
0001bb40 g     F .text	00000042 log_printf
00020fe4 g     O .text	00000006 g_stats_map_stats
0000d768 g     F .text	000000e4 os_task_init
00010c6c g     F .text	00000098 dpl_mbuf_adj
000081ec g     F .text	0000003c hal_system_clock_start
0000815a  w    F .text	00000002 BusFault_Handler
0001bd9c g     F .text	0000004c log_console_init
00013720 g     F .text	00000094 sysdown
000092fa g     F .text	00000004 uwb_dw1000_event_cnt_read
0000ffe0 g     F .text	00000016 uwb_wcs_local_to_master
00011f08 g     F .text	00000028 console_line_event_put
00019e70 g     F .text	00000010 strlen
0000cc9c g     F .text	00000084 os_dev_create
0000cfba g     F .text	0000001e os_memblock_put_from_cb
0001cd5a g     F .text	0000005c rwlock_acquire_write
00009762 g     F .text	000000a6 dw1000_dev_configure_sleep
0000cd9c g     F .text	00000014 os_eventq_init
0000d948 g     F .text	0000007c os_time_advance
00008e08 g     F .text	000001e0 hal_dw1000_read_noblock
0001ec78 g     F .text	00000010 .hidden __aeabi_cdcmpeq
00011570 g     F .text	0000000c conf_cli_register
0001ebdc g     F .text	0000008a .hidden __gedf2
0000d624 g     F .text	00000024 os_sched_resort
200073a8 g     O .bss	00000004 boot_current_slot
0000fac8 g     F .text	000002bc uwb_transport_dequeue_tx
00019ca0 g     F .text	00000088 wcs_timescale_init
0001586c g     F .text	00000050 dw1000_pkg_down
00010f96 g     F .text	00000032 dpl_memblock_put
0001dd7a g     F .text	00000024 hal_flash_init
0000fe8c g     F .text	0000002c uwb_wcs_free
00019e46 g     F .text	0000001a strchr
00008164  w    F .text	00000002 MWU_IRQHandler
000133bc g     F .text	00000040 stats_module_init
0001aaf4 g     F .text	00000040 mgmt_find_handler
0001e708 g     F .text	00000042 .hidden __aeabi_f2d
00008158  w    F .text	00000002 MemoryManagement_Handler
000096c6 g     F .text	0000009c dw1000_softreset
00008d5c g     F .text	000000aa hal_dw1000_read
0001a320 g     F .text	00000014 imgmgr_dfu_pending
00010b16 g     F .text	000000a0 dpl_mbuf_append
0001bde8 g     F .text	00000018 log_level_get
0001d07e g     F .text	00000046 boot_set_confirmed
00012efc g     F .text	00000014 shell_nlip_input_register
00008164  w    F .text	00000002 COMP_LPCOMP_IRQHandler
0001df9e g     F .text	00000030 hal_flash_isempty_no_buf
00013adc g     F .text	00000024 uwbcfg_commit
0000cd20 g     F .text	00000028 os_dev_initialize_all
0001e448 g     F .text	0000027a .hidden __subdf3
00012e1c g     F .text	00000020 shell_nlip_clear_pkt
0001c710 g     F .text	0000003c modlog_printf
0000a0ae g     F .text	00000012 dw1000_set_on_error_continue
0000d4d4 g     F .text	0000006c os_sched_remove
0001a24a g     F .text	00000042 imgmgr_find_best_area_id
20001348 g     O .data	00000008 g_os_sleep_list
0001ee48 g     F .text	00000000 .hidden __aeabi_ldivmod
000144c4 g     F .text	00000008 streamer_console_get
000154d8 g     F .text	00000050 hal_bsp_init
0000caa4 g     F .text	00000030 os_pkg_init
0000aae0 g     F .text	00000074 dw1000_tasks_init
0000c398 g     F .text	0000005c hal_spi_disable
00013e4c g     F .text	00000148 strtod_soft
0001118c g     F .text	00000060 conf_init
0000d31c g     F .text	0000000e os_sanity_check_init
0001dcf8 g     F .text	00000066 fcb_walk
00018fc8 g     F .text	00000028 uwb_rng_set_frames
00010bb6 g     F .text	0000001c dpl_mbuf_off
0000ad24 g     F .text	00000010 dw1000_read_systime
0001333c g     F .text	00000032 stats_init
00010838 g     F .text	00000004 vfprintf
0001a048 g     F .text	00000034 strpbrk
0000a988 g     F .text	000000c8 dw1000_calc_clock_offset_ratio
0000c0c0 g     F .text	0000008c hal_gpio_irq_init
20002d48 g     O .bss	00000050 g_os_main_task
0000b744 g     F .text	0000002a dw1000_phy_sysclk_XTAL
0000c174 g     F .text	0000001c hal_gpio_irq_disable
000101fc g     F .text	0000002c free
0000f4f4 g     F .text	00000032 uwb_ccp_pkg_down
0001cf54 g     F .text	0000000a boot_write_image_ok
0001d3b8 g     F .text	000000a4 mbedtls_sha256_starts_ret
00013b10 g     F .text	00000050 uwbcfg_pkg_init
00011718 g     F .text	0000001c console_out
0000b7f8 g     F .text	00000028 dw1000_phy_sysclk_SEQ



Disassembly of section .text:

00008020 <__isr_vector>:
    8020:	20010000 	.word	0x20010000
    8024:	000080f9 	.word	0x000080f9
    8028:	00008155 	.word	0x00008155
    802c:	00008157 	.word	0x00008157
	...
    804c:	0000db8f 	.word	0x0000db8f
	...
    8058:	0000dbd5 	.word	0x0000dbd5
    805c:	0000dc1b 	.word	0x0000dc1b
    8060:	00008165 	.word	0x00008165
    8064:	00008165 	.word	0x00008165
    8068:	00008165 	.word	0x00008165
    806c:	00008165 	.word	0x00008165
    8070:	00008165 	.word	0x00008165
    8074:	00008165 	.word	0x00008165
    8078:	00008165 	.word	0x00008165
    807c:	00008165 	.word	0x00008165
    8080:	00008165 	.word	0x00008165
    8084:	00008165 	.word	0x00008165
    8088:	00008165 	.word	0x00008165
    808c:	00008165 	.word	0x00008165
    8090:	00008165 	.word	0x00008165
    8094:	00008165 	.word	0x00008165
    8098:	00008165 	.word	0x00008165
    809c:	00008165 	.word	0x00008165
    80a0:	00008165 	.word	0x00008165
    80a4:	00008165 	.word	0x00008165
    80a8:	00008165 	.word	0x00008165
    80ac:	00008165 	.word	0x00008165
    80b0:	00008165 	.word	0x00008165
    80b4:	00008165 	.word	0x00008165
    80b8:	00008165 	.word	0x00008165
    80bc:	00008165 	.word	0x00008165
    80c0:	00008165 	.word	0x00008165
    80c4:	00008165 	.word	0x00008165
    80c8:	00008165 	.word	0x00008165
    80cc:	00008165 	.word	0x00008165
    80d0:	00008165 	.word	0x00008165
    80d4:	00008165 	.word	0x00008165
	...
    80e0:	00008165 	.word	0x00008165
    80e4:	00008165 	.word	0x00008165
    80e8:	00008165 	.word	0x00008165
    80ec:	00008165 	.word	0x00008165
    80f0:	00008165 	.word	0x00008165
    80f4:	00008165 	.word	0x00008165

000080f8 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
    80f8:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
    80fc:	4a0c      	ldr	r2, [pc, #48]	; (8130 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
    80fe:	4b0d      	ldr	r3, [pc, #52]	; (8134 <.bss_zero_loop+0x34>)

00008100 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
    8100:	429a      	cmp	r2, r3
    itt     lt
    8102:	bfbc      	itt	lt
    strlt   r0, [r2], #4
    8104:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
    8108:	e7fa      	blt.n	8100 <.bss_zero_loop>
 *      of copy from/to are specified by following symbols evaluated in
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */
    ldr    r1, =__etext
    810a:	490b      	ldr	r1, [pc, #44]	; (8138 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
    810c:	4a0b      	ldr	r2, [pc, #44]	; (813c <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
    810e:	4b0c      	ldr	r3, [pc, #48]	; (8140 <.bss_zero_loop+0x40>)

    subs    r3, r2
    8110:	1a9b      	subs	r3, r3, r2
    ble     .LC0
    8112:	dd03      	ble.n	811c <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
    8114:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
    8116:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
    8118:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
    811a:	dcfb      	bgt.n	8114 <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
    811c:	4809      	ldr	r0, [pc, #36]	; (8144 <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
    811e:	490a      	ldr	r1, [pc, #40]	; (8148 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
    8120:	f000 f822 	bl	8168 <_sbrkInit>

    LDR     R0, =SystemInit
    8124:	4809      	ldr	r0, [pc, #36]	; (814c <.bss_zero_loop+0x4c>)
    BLX     R0
    8126:	4780      	blx	r0

    BL      hal_system_init
    8128:	f000 f83c 	bl	81a4 <hal_system_init>

    LDR     R0, =_start
    812c:	4808      	ldr	r0, [pc, #32]	; (8150 <.bss_zero_loop+0x50>)
    BX      R0
    812e:	4700      	bx	r0
    ldr     r2, =__bss_start__
    8130:	20001b30 	.word	0x20001b30
    ldr     r3, =__bss_end__
    8134:	20007428 	.word	0x20007428
    ldr    r1, =__etext
    8138:	000226f0 	.word	0x000226f0
    ldr    r2, =__data_start__
    813c:	20000530 	.word	0x20000530
    ldr    r3, =__data_end__
    8140:	20001b30 	.word	0x20001b30
    LDR     R0, =__HeapBase
    8144:	20007428 	.word	0x20007428
    LDR     R1, =__HeapLimit
    8148:	2000fe50 	.word	0x2000fe50
    LDR     R0, =SystemInit
    814c:	00008289 	.word	0x00008289
    LDR     R0, =_start
    8150:	0000847d 	.word	0x0000847d

00008154 <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
    8154:	e7fe      	b.n	8154 <NMI_Handler>

00008156 <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
    8156:	e7fe      	b.n	8156 <HardFault_Handler>

00008158 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
    8158:	e7fe      	b.n	8158 <MemoryManagement_Handler>

0000815a <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
    815a:	e7fe      	b.n	815a <BusFault_Handler>

0000815c <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
    815c:	e7fe      	b.n	815c <UsageFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
    815e:	e7fe      	b.n	815e <UsageFault_Handler+0x2>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
    8160:	e7fe      	b.n	8160 <UsageFault_Handler+0x4>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
    8162:	e7fe      	b.n	8162 <UsageFault_Handler+0x6>

00008164 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
    8164:	e7fe      	b.n	8164 <Default_Handler>
    8166:	bf00      	nop

00008168 <_sbrkInit>:
static char *sbrkLimit __attribute__ ((section (".data")));
static char *brk __attribute__ ((section (".data")));

void
_sbrkInit(char *base, char *limit) {
    sbrkBase = base;
    8168:	4b02      	ldr	r3, [pc, #8]	; (8174 <_sbrkInit+0xc>)
    sbrkLimit = limit;
    816a:	e9c3 0100 	strd	r0, r1, [r3]
    brk = base;
    816e:	6098      	str	r0, [r3, #8]
}
    8170:	4770      	bx	lr
    8172:	bf00      	nop
    8174:	20000530 	.word	0x20000530

00008178 <_sbrk>:
    void *prev_brk;

    if (incr < 0) {
        /* Returning memory to the heap. */
        incr = -incr;
        if (brk - incr < sbrkBase) {
    8178:	4909      	ldr	r1, [pc, #36]	; (81a0 <_sbrk+0x28>)
    if (incr < 0) {
    817a:	1e03      	subs	r3, r0, #0
        if (brk - incr < sbrkBase) {
    817c:	688a      	ldr	r2, [r1, #8]
    if (incr < 0) {
    817e:	da06      	bge.n	818e <_sbrk+0x16>
        if (brk - incr < sbrkBase) {
    8180:	6808      	ldr	r0, [r1, #0]
    8182:	4413      	add	r3, r2
    8184:	4283      	cmp	r3, r0
    8186:	d308      	bcc.n	819a <_sbrk+0x22>
        }
    } else {
        /* Allocating memory from the heap. */
        if (sbrkLimit - brk >= incr) {
            prev_brk = brk;
            brk += incr;
    8188:	608b      	str	r3, [r1, #8]
            prev_brk = (void *)-1;
        }
    }

    return prev_brk;
}
    818a:	4610      	mov	r0, r2
    818c:	4770      	bx	lr
        if (sbrkLimit - brk >= incr) {
    818e:	6848      	ldr	r0, [r1, #4]
    8190:	1a80      	subs	r0, r0, r2
    8192:	4298      	cmp	r0, r3
    8194:	db01      	blt.n	819a <_sbrk+0x22>
            brk += incr;
    8196:	4413      	add	r3, r2
    8198:	e7f6      	b.n	8188 <_sbrk+0x10>
            prev_brk = (void *)-1;
    819a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    return prev_brk;
    819e:	e7f4      	b.n	818a <_sbrk+0x12>
    81a0:	20000530 	.word	0x20000530

000081a4 <hal_system_init>:
 */
void
hal_system_init(void)
{
#if MYNEWT_VAL(MCU_DCDC_ENABLED)
    NRF_POWER->DCDCEN = 1;
    81a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81a8:	2201      	movs	r2, #1
    81aa:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
#endif
}
    81ae:	4770      	bx	lr

000081b0 <hal_system_reset>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
    81b0:	4b08      	ldr	r3, [pc, #32]	; (81d4 <hal_system_reset+0x24>)
    81b2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
        if (hal_debugger_connected()) {
    81b6:	07d2      	lsls	r2, r2, #31
    81b8:	d500      	bpl.n	81bc <hal_system_reset+0xc>
            asm("bkpt");
    81ba:	be00      	bkpt	0x0000
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    81bc:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    81c0:	68d9      	ldr	r1, [r3, #12]
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    81c2:	4a05      	ldr	r2, [pc, #20]	; (81d8 <hal_system_reset+0x28>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    81c4:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    81c8:	430a      	orrs	r2, r1
    81ca:	60da      	str	r2, [r3, #12]
    81cc:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    81d0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    81d2:	e7fd      	b.n	81d0 <hal_system_reset+0x20>
    81d4:	e000ed00 	.word	0xe000ed00
    81d8:	05fa0004 	.word	0x05fa0004

000081dc <hal_debugger_connected>:
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
    81dc:	4b02      	ldr	r3, [pc, #8]	; (81e8 <hal_debugger_connected+0xc>)
    81de:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
}
    81e2:	f000 0001 	and.w	r0, r0, #1
    81e6:	4770      	bx	lr
    81e8:	e000ed00 	.word	0xe000ed00

000081ec <hal_system_clock_start>:
        }
    }
#endif

    /* Check if this clock source is already running */
    if ((NRF_CLOCK->LFCLKSTAT & regmsk) != regval) {
    81ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81f0:	490c      	ldr	r1, [pc, #48]	; (8224 <hal_system_clock_start+0x38>)
    81f2:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    81f6:	400a      	ands	r2, r1
    81f8:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
    81fc:	d011      	beq.n	8222 <hal_system_clock_start+0x36>
        NRF_CLOCK->TASKS_LFCLKSTOP = 1;
    81fe:	2201      	movs	r2, #1
        NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    8200:	2000      	movs	r0, #0
        NRF_CLOCK->TASKS_LFCLKSTOP = 1;
    8202:	60da      	str	r2, [r3, #12]
        NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    8204:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
        NRF_CLOCK->LFCLKSRC = clksrc;
    8208:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
        NRF_CLOCK->TASKS_LFCLKSTART = 1;
    820c:	609a      	str	r2, [r3, #8]

        /* Wait here till started! */
        while (1) {
            if (NRF_CLOCK->EVENTS_LFCLKSTARTED) {
    820e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    8212:	2a00      	cmp	r2, #0
    8214:	d0fb      	beq.n	820e <hal_system_clock_start+0x22>
                if ((NRF_CLOCK->LFCLKSTAT & regmsk) == regval) {
    8216:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    821a:	400a      	ands	r2, r1
    821c:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
    8220:	d1f5      	bne.n	820e <hal_system_clock_start+0x22>
                }
            }
        }
    }
#endif
}
    8222:	4770      	bx	lr
    8224:	00010003 	.word	0x00010003

00008228 <errata_16>:
}

#ifdef NRF52
static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8228:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    822c:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
    8230:	2a06      	cmp	r2, #6
    8232:	d10c      	bne.n	824e <errata_16+0x26>
    8234:	f8d3 2fe4 	ldr.w	r2, [r3, #4068]	; 0xfe4
    8238:	0712      	lsls	r2, r2, #28
    823a:	d108      	bne.n	824e <errata_16+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    823c:	f8d3 0fe8 	ldr.w	r0, [r3, #4072]	; 0xfe8
    8240:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
    8244:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    8248:	4258      	negs	r0, r3
    824a:	4158      	adcs	r0, r3
    824c:	4770      	bx	lr
            return true;
        }
    }

    return false;
    824e:	2000      	movs	r0, #0
}
    8250:	4770      	bx	lr

00008252 <errata_108>:

static bool errata_31(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8252:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8256:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
    825a:	2a06      	cmp	r2, #6
    825c:	d110      	bne.n	8280 <errata_108+0x2e>
    825e:	f8d3 2fe4 	ldr.w	r2, [r3, #4068]	; 0xfe4
    8262:	0712      	lsls	r2, r2, #28
    8264:	d10c      	bne.n	8280 <errata_108+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8266:	f8d3 0fe8 	ldr.w	r0, [r3, #4072]	; 0xfe8
    826a:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
    826e:	2b30      	cmp	r3, #48	; 0x30
    8270:	d008      	beq.n	8284 <errata_108+0x32>
            return true;
        }
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    8272:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
    8276:	f1a0 0340 	sub.w	r3, r0, #64	; 0x40
    827a:	4258      	negs	r0, r3
    827c:	4158      	adcs	r0, r3
    827e:	4770      	bx	lr
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    8280:	2000      	movs	r0, #0
    8282:	4770      	bx	lr
            return true;
    8284:	2001      	movs	r0, #1
}
    8286:	4770      	bx	lr

00008288 <SystemInit>:
{
    8288:	b508      	push	{r3, lr}
    if (errata_16()){
    828a:	f7ff ffcd 	bl	8228 <errata_16>
    828e:	b110      	cbz	r0, 8296 <SystemInit+0xe>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    8290:	4b71      	ldr	r3, [pc, #452]	; (8458 <SystemInit+0x1d0>)
    8292:	4a72      	ldr	r2, [pc, #456]	; (845c <SystemInit+0x1d4>)
    8294:	675a      	str	r2, [r3, #116]	; 0x74
    if (errata_31()){
    8296:	f7ff ffdc 	bl	8252 <errata_108>
    829a:	b148      	cbz	r0, 82b0 <SystemInit+0x28>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    829c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    82a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    82a4:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
    82a8:	f3c3 3342 	ubfx	r3, r3, #13, #3
    82ac:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    if (errata_32()){
    82b0:	f7ff ffba 	bl	8228 <errata_16>
    82b4:	b130      	cbz	r0, 82c4 <SystemInit+0x3c>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    82b6:	4a6a      	ldr	r2, [pc, #424]	; (8460 <SystemInit+0x1d8>)
    82b8:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    82bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    82c0:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    if (errata_36()){
    82c4:	f7ff ffc5 	bl	8252 <errata_108>
    82c8:	b140      	cbz	r0, 82dc <SystemInit+0x54>
        NRF_CLOCK->EVENTS_DONE = 0;
    82ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    82ce:	2200      	movs	r2, #0
    82d0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    82d4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    82d8:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
    82dc:	f7ff ffa4 	bl	8228 <errata_16>
    82e0:	b120      	cbz	r0, 82ec <SystemInit+0x64>
        *(volatile uint32_t *)0x400005A0 = 0x3;
    82e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    82e6:	2203      	movs	r2, #3
    82e8:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    if (errata_57()){
    82ec:	f7ff ff9c 	bl	8228 <errata_16>
    82f0:	b160      	cbz	r0, 830c <SystemInit+0x84>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
    82f2:	4b5c      	ldr	r3, [pc, #368]	; (8464 <SystemInit+0x1dc>)
    82f4:	2205      	movs	r2, #5
    82f6:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
        *(volatile uint32_t *)0x40005688 = 0x00000001;
    82fa:	2201      	movs	r2, #1
    82fc:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
        *(volatile uint32_t *)0x40005618 = 0x00000000;
    8300:	2200      	movs	r2, #0
    8302:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
    8306:	223f      	movs	r2, #63	; 0x3f
    8308:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
    return false;
}

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    830c:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8310:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
    8314:	2a06      	cmp	r2, #6
    8316:	d150      	bne.n	83ba <SystemInit+0x132>
    8318:	f8d3 2fe4 	ldr.w	r2, [r3, #4068]	; 0xfe4
    831c:	0712      	lsls	r2, r2, #28
    831e:	d14c      	bne.n	83ba <SystemInit+0x132>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    8320:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    8324:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8328:	2b50      	cmp	r3, #80	; 0x50
    832a:	d146      	bne.n	83ba <SystemInit+0x132>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    832c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    8330:	4b4d      	ldr	r3, [pc, #308]	; (8468 <SystemInit+0x1e0>)
    8332:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    8336:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    833a:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    833e:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    8342:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    8346:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    834a:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    834e:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    8352:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    8356:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    835a:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    835e:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    8362:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    8366:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    836a:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    836e:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    8372:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    8376:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    837a:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    837e:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    8382:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    8386:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    838a:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    838e:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    8392:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    8396:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    839a:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    839e:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    83a2:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    83a6:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    83aa:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    83ae:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    83b2:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    83b6:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
    83ba:	f7ff ff4a 	bl	8252 <errata_108>
    83be:	b148      	cbz	r0, 83d4 <SystemInit+0x14c>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
    83c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    83c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    83c8:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    83cc:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    83d0:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
    83d4:	4a22      	ldr	r2, [pc, #136]	; (8460 <SystemInit+0x1d8>)
    83d6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    83da:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    83de:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    83e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    83e6:	f3bf 8f6f 	isb	sy
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
    83ea:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    83ee:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
    83f2:	07db      	lsls	r3, r3, #31
    83f4:	d528      	bpl.n	8448 <SystemInit+0x1c0>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    83f6:	4b1d      	ldr	r3, [pc, #116]	; (846c <SystemInit+0x1e4>)
    83f8:	2201      	movs	r2, #1
    83fa:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    83fe:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    8402:	2a00      	cmp	r2, #0
    8404:	d0fb      	beq.n	83fe <SystemInit+0x176>
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
    8406:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    840a:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
    840e:	f023 0301 	bic.w	r3, r3, #1
    8412:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    8416:	4b15      	ldr	r3, [pc, #84]	; (846c <SystemInit+0x1e4>)
    8418:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    841c:	2a00      	cmp	r2, #0
    841e:	d0fb      	beq.n	8418 <SystemInit+0x190>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    8420:	2200      	movs	r2, #0
    8422:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    8426:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    842a:	2a00      	cmp	r2, #0
    842c:	d0fb      	beq.n	8426 <SystemInit+0x19e>
  __ASM volatile ("dsb 0xF":::"memory");
    842e:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    8432:	490b      	ldr	r1, [pc, #44]	; (8460 <SystemInit+0x1d8>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    8434:	4b0e      	ldr	r3, [pc, #56]	; (8470 <SystemInit+0x1e8>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    8436:	68ca      	ldr	r2, [r1, #12]
    8438:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    843c:	4313      	orrs	r3, r2
    843e:	60cb      	str	r3, [r1, #12]
    8440:	f3bf 8f4f 	dsb	sy
    __NOP();
    8444:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    8446:	e7fd      	b.n	8444 <SystemInit+0x1bc>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    8448:	4b0a      	ldr	r3, [pc, #40]	; (8474 <SystemInit+0x1ec>)
    844a:	4a0b      	ldr	r2, [pc, #44]	; (8478 <SystemInit+0x1f0>)
    844c:	601a      	str	r2, [r3, #0]
}
    844e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    NVIC_Relocate();
    8452:	f000 ba4b 	b.w	88ec <NVIC_Relocate>
    8456:	bf00      	nop
    8458:	4007c000 	.word	0x4007c000
    845c:	baadf00d 	.word	0xbaadf00d
    8460:	e000ed00 	.word	0xe000ed00
    8464:	40005000 	.word	0x40005000
    8468:	4000c000 	.word	0x4000c000
    846c:	4001e000 	.word	0x4001e000
    8470:	05fa0004 	.word	0x05fa0004
    8474:	2000053c 	.word	0x2000053c
    8478:	03d09000 	.word	0x03d09000

0000847c <_start>:

/*
 * Rudimentary startup function.
 */
void _start(void)
{
    847c:	b508      	push	{r3, lr}
    int rc;

    rc = main(0, NULL);
    exit(rc);
#else
    os_init(main);
    847e:	4803      	ldr	r0, [pc, #12]	; (848c <_start+0x10>)
    8480:	f004 faaa 	bl	c9d8 <os_init>
    os_start();
#endif
}
    8484:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    os_start();
    8488:	f004 baf8 	b.w	ca7c <os_start>
    848c:	0000870d 	.word	0x0000870d

00008490 <_init>:

void
_init(void)
{
}
    8490:	4770      	bx	lr
	...

00008494 <uwb_transport_cb>:
// static uint8_t g_idx = 0;
// static uint32_t g_missed_count = 0;
// static uint32_t g_ok_count = 0;
static bool
uwb_transport_cb(struct uwb_dev * inst, uint16_t uid, struct dpl_mbuf * mbuf)
{
    8494:	b570      	push	{r4, r5, r6, lr}
    uint16_t len = DPL_MBUF_PKTLEN(mbuf);
    dpl_mbuf_copydata(mbuf, 0, sizeof(reciever), reciever);
    8496:	4d17      	ldr	r5, [pc, #92]	; (84f4 <uwb_transport_cb+0x60>)
    uint16_t len = DPL_MBUF_PKTLEN(mbuf);
    8498:	8a16      	ldrh	r6, [r2, #16]
{
    849a:	4614      	mov	r4, r2
    dpl_mbuf_copydata(mbuf, 0, sizeof(reciever), reciever);
    849c:	462b      	mov	r3, r5
    849e:	2212      	movs	r2, #18
    84a0:	2100      	movs	r1, #0
    84a2:	4620      	mov	r0, r4
    84a4:	f008 fbbc 	bl	10c20 <dpl_mbuf_copydata>
    dpl_mbuf_free_chain(mbuf);
    84a8:	4620      	mov	r0, r4
    84aa:	f008 fb2a 	bl	10b02 <dpl_mbuf_free_chain>
    // g_idx++;


    /* First byte stores crc */
    uint8_t crc = (uint8_t) (reciever[0]); 
    84ae:	4629      	mov	r1, r5

    // since I am sending string data here the string won't always be the length of the reciever buffer
        // later I will worry about variable length packets
    if (crc != crc8_calc(0, reciever+1, sizeof(reciever)-1) || len != sizeof(reciever))
    84b0:	2211      	movs	r2, #17
    uint8_t crc = (uint8_t) (reciever[0]); 
    84b2:	f811 4b01 	ldrb.w	r4, [r1], #1
    if (crc != crc8_calc(0, reciever+1, sizeof(reciever)-1) || len != sizeof(reciever))
    84b6:	2000      	movs	r0, #0
    84b8:	f00b ffd0 	bl	1445c <crc8_calc>
    84bc:	42a0      	cmp	r0, r4
    84be:	d101      	bne.n	84c4 <uwb_transport_cb+0x30>
    84c0:	2e12      	cmp	r6, #18
    84c2:	d009      	beq.n	84d8 <uwb_transport_cb+0x44>
    {
        uint32_t utime = os_cputime_ticks_to_usecs(os_cputime_get32());
    84c4:	f004 fbc4 	bl	cc50 <os_cputime_get32>
        printf("{\"utime\": %lu,\"error\": \" crc mismatch len=%d, sizeof(test) = %d\"}\n",utime, len, sizeof(reciever));
    84c8:	2312      	movs	r3, #18
        uint32_t utime = os_cputime_ticks_to_usecs(os_cputime_get32());
    84ca:	4601      	mov	r1, r0
        printf("{\"utime\": %lu,\"error\": \" crc mismatch len=%d, sizeof(test) = %d\"}\n",utime, len, sizeof(reciever));
    84cc:	4632      	mov	r2, r6
    84ce:	480a      	ldr	r0, [pc, #40]	; (84f8 <uwb_transport_cb+0x64>)
    84d0:	f008 f9b4 	bl	1083c <printf>
        
    }

    // g_idx = test[1];
    return true;
}
    84d4:	2001      	movs	r0, #1
    84d6:	bd70      	pop	{r4, r5, r6, pc}
        uint32_t utime = os_cputime_ticks_to_usecs(os_cputime_get32());
    84d8:	f004 fbba 	bl	cc50 <os_cputime_get32>
        printf("{\"utime\": %lu , message:%s\"}\n", utime, reciever);
    84dc:	462a      	mov	r2, r5
        uint32_t utime = os_cputime_ticks_to_usecs(os_cputime_get32());
    84de:	4601      	mov	r1, r0
        printf("{\"utime\": %lu , message:%s\"}\n", utime, reciever);
    84e0:	4806      	ldr	r0, [pc, #24]	; (84fc <uwb_transport_cb+0x68>)
    84e2:	f008 f9ab 	bl	1083c <printf>
        printf("{\"This TDMA slot (_/160)\": %lu}\n", this_tdma_slot);
    84e6:	4b06      	ldr	r3, [pc, #24]	; (8500 <uwb_transport_cb+0x6c>)
    84e8:	4806      	ldr	r0, [pc, #24]	; (8504 <uwb_transport_cb+0x70>)
    84ea:	6819      	ldr	r1, [r3, #0]
    84ec:	f008 f9a6 	bl	1083c <printf>
    84f0:	e7f0      	b.n	84d4 <uwb_transport_cb+0x40>
    84f2:	bf00      	nop
    84f4:	20001b42 	.word	0x20001b42
    84f8:	00020038 	.word	0x00020038
    84fc:	0002007b 	.word	0x0002007b
    8500:	20001b74 	.word	0x20001b74
    8504:	00020099 	.word	0x00020099

00008508 <uwb_config_updated_func>:
{
    8508:	b538      	push	{r3, r4, r5, lr}
    struct uwb_dev * udev = uwb_dev_idx_lookup(0);
    850a:	2000      	movs	r0, #0
    850c:	f000 fa0a 	bl	8924 <uwb_dev_idx_lookup>
    struct uwb_ccp_instance *ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_CCP);
    8510:	2101      	movs	r1, #1
    struct uwb_dev * udev = uwb_dev_idx_lookup(0);
    8512:	4604      	mov	r4, r0
    struct uwb_ccp_instance *ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_CCP);
    8514:	f000 fa7a 	bl	8a0c <uwb_mac_find_cb_inst_ptr>
    if (dpl_sem_get_count(&ccp->sem) == 0) {
    8518:	f8b0 50b6 	ldrh.w	r5, [r0, #182]	; 0xb6
    851c:	b9ad      	cbnz	r5, 854a <uwb_config_updated_func+0x42>
 * @return void
 */
UWB_API_IMPL_PREFIX void
uwb_phy_forcetrxoff(struct uwb_dev* dev)
{
    return (dev->uw_funcs->uf_phy_forcetrxoff(dev));
    851e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8520:	4620      	mov	r0, r4
    8522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    8526:	4798      	blx	r3
    return (dev->uw_funcs->uf_mac_config(dev, config));
    8528:	6a63      	ldr	r3, [r4, #36]	; 0x24
    852a:	4629      	mov	r1, r5
    852c:	681b      	ldr	r3, [r3, #0]
    852e:	4620      	mov	r0, r4
    8530:	4798      	blx	r3
    return (dev->uw_funcs->uf_txrf_config(dev, config));
    8532:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8534:	4620      	mov	r0, r4
    8536:	685b      	ldr	r3, [r3, #4]
    8538:	f204 5124 	addw	r1, r4, #1316	; 0x524
    853c:	4798      	blx	r3
    return (dev->uw_funcs->uf_start_rx(dev));
    853e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8540:	4620      	mov	r0, r4
    8542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    8544:	4798      	blx	r3
}
    8546:	2000      	movs	r0, #0
    8548:	bd38      	pop	{r3, r4, r5, pc}
    uwb_config_updated = true;
    854a:	4b02      	ldr	r3, [pc, #8]	; (8554 <uwb_config_updated_func+0x4c>)
    854c:	2201      	movs	r2, #1
    854e:	701a      	strb	r2, [r3, #0]
    return 0;
    8550:	e7f9      	b.n	8546 <uwb_config_updated_func+0x3e>
    8552:	bf00      	nop
    8554:	20001b78 	.word	0x20001b78

00008558 <stream_timer>:

#if MYNEWT_VAL(UWB_TRANSPORT_ROLE) == 1
static struct dpl_callout stream_callout;
static void
stream_timer(struct dpl_event *ev)
{
    8558:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    855c:	4604      	mov	r4, r0
}

static inline dpl_error_t
dpl_callout_reset(struct dpl_callout *co, dpl_time_t ticks)
{
    return (dpl_error_t)os_callout_reset(&co->co, ticks);
    855e:	2180      	movs	r1, #128	; 0x80
    8560:	481f      	ldr	r0, [pc, #124]	; (85e0 <stream_timer+0x88>)
        if (mbuf)
        {
            // /* Second byte stores an index */
            // test[1]++;
            /* First byte stores crc */
            payload[0] = crc8_calc(0, payload+1, sizeof(payload)-1);
    8562:	f8df 9080 	ldr.w	r9, [pc, #128]	; 85e4 <stream_timer+0x8c>
    8566:	f004 fae1 	bl	cb2c <os_callout_reset>
    return ev->ev.ev_arg;
    856a:	68a6      	ldr	r6, [r4, #8]
    struct uwb_ccp_instance * ccp = (struct uwb_ccp_instance *)uwb_mac_find_cb_inst_ptr(uwb_transport->dev_inst, UWBEXT_CCP);
    856c:	2101      	movs	r1, #1
    856e:	6830      	ldr	r0, [r6, #0]
    8570:	f000 fa4c 	bl	8a0c <uwb_mac_find_cb_inst_ptr>
    8574:	2512      	movs	r5, #18
    8576:	4607      	mov	r7, r0
            payload[0] = crc8_calc(0, payload+1, sizeof(payload)-1);
    8578:	f109 0a01 	add.w	sl, r9, #1
        uint16_t destination_uid = ccp->frames[0]->short_address;
    857c:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
    8580:	f8b3 800a 	ldrh.w	r8, [r3, #10]
        if (!destination_uid) break;
    8584:	f1b8 0f00 	cmp.w	r8, #0
    8588:	d022      	beq.n	85d0 <stream_timer+0x78>
        if (uwb_transport->config.os_msys_mpool)
    858a:	79b3      	ldrb	r3, [r6, #6]
    858c:	07db      	lsls	r3, r3, #31
            mbuf = dpl_msys_get_pkthdr(sizeof(payload), sizeof(uwb_transport_user_header_t));
    858e:	f04f 0108 	mov.w	r1, #8
        if (uwb_transport->config.os_msys_mpool)
    8592:	d520      	bpl.n	85d6 <stream_timer+0x7e>
            mbuf = dpl_msys_get_pkthdr(sizeof(payload), sizeof(uwb_transport_user_header_t));
    8594:	2012      	movs	r0, #18
    8596:	f008 fa9c 	bl	10ad2 <dpl_msys_get_pkthdr>
            mbuf = dpl_mbuf_get_pkthdr(uwb_transport->omp, sizeof(uwb_transport_user_header_t));
    859a:	4604      	mov	r4, r0
        if (mbuf)
    859c:	b1c0      	cbz	r0, 85d0 <stream_timer+0x78>
            payload[0] = crc8_calc(0, payload+1, sizeof(payload)-1);
    859e:	2211      	movs	r2, #17
    85a0:	4651      	mov	r1, sl
    85a2:	2000      	movs	r0, #0
    85a4:	f00b ff5a 	bl	1445c <crc8_calc>
            dpl_mbuf_copyinto(mbuf, 0, payload, sizeof(payload));
    85a8:	4a0e      	ldr	r2, [pc, #56]	; (85e4 <stream_timer+0x8c>)
            payload[0] = crc8_calc(0, payload+1, sizeof(payload)-1);
    85aa:	f889 0000 	strb.w	r0, [r9]
            dpl_mbuf_copyinto(mbuf, 0, payload, sizeof(payload));
    85ae:	2312      	movs	r3, #18
    85b0:	2100      	movs	r1, #0
    85b2:	4620      	mov	r0, r4
    85b4:	f008 fba6 	bl	10d04 <dpl_mbuf_copyinto>
    for (uint8_t i = 0; i < 18; i++)
    85b8:	3d01      	subs	r5, #1
            uwb_transport_enqueue_tx(uwb_transport, destination_uid, 0xDEAD, 8, mbuf);
    85ba:	9400      	str	r4, [sp, #0]
    85bc:	2308      	movs	r3, #8
    85be:	f64d 62ad 	movw	r2, #57005	; 0xdead
    85c2:	4641      	mov	r1, r8
    85c4:	4630      	mov	r0, r6
    85c6:	f007 fbdd 	bl	fd84 <uwb_transport_enqueue_tx>
    for (uint8_t i = 0; i < 18; i++)
    85ca:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    85ce:	d1d5      	bne.n	857c <stream_timer+0x24>
        }else{
            break;
        }
    }
}
    85d0:	b002      	add	sp, #8
    85d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            mbuf = dpl_mbuf_get_pkthdr(uwb_transport->omp, sizeof(uwb_transport_user_header_t));
    85d6:	f8d6 0088 	ldr.w	r0, [r6, #136]	; 0x88
    85da:	f008 fa64 	bl	10aa6 <dpl_mbuf_get_pkthdr>
    85de:	e7dc      	b.n	859a <stream_timer+0x42>
    85e0:	20001b54 	.word	0x20001b54
    85e4:	20001b30 	.word	0x20001b30

000085e8 <stream_slot_cb>:
{
    85e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    85ec:	ed2d 8b02 	vpush	{d8}
    assert(ev);
    85f0:	4603      	mov	r3, r0
{
    85f2:	b085      	sub	sp, #20
    assert(ev);
    85f4:	b918      	cbnz	r0, 85fe <stream_slot_cb+0x16>
    85f6:	4602      	mov	r2, r0
    85f8:	4601      	mov	r1, r0
    85fa:	f004 f8ff 	bl	c7fc <__assert_func>
    85fe:	6883      	ldr	r3, [r0, #8]
    tdma_instance_t * tdma = slot->parent;
    8600:	689f      	ldr	r7, [r3, #8]
/**
 * Get current semaphore's count
 */
static inline uint16_t os_sem_get_count(struct os_sem *sem)
{
    return sem->sem_tokens;
    8602:	687a      	ldr	r2, [r7, #4]
    if (dpl_sem_get_count(&ccp->sem) == 0) {
    8604:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
    8608:	b182      	cbz	r2, 862c <stream_slot_cb+0x44>
    if (uwb_config_updated) {
    860a:	4c3f      	ldr	r4, [pc, #252]	; (8708 <stream_slot_cb+0x120>)
    struct uwb_dev * inst = tdma->dev_inst;
    860c:	683d      	ldr	r5, [r7, #0]
    if (uwb_config_updated) {
    860e:	7821      	ldrb	r1, [r4, #0]
    return (dev->uw_funcs->uf_mac_config(dev, config));
    8610:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    8612:	b181      	cbz	r1, 8636 <stream_slot_cb+0x4e>
    8614:	6813      	ldr	r3, [r2, #0]
    8616:	2100      	movs	r1, #0
    8618:	4628      	mov	r0, r5
    861a:	4798      	blx	r3
    return (dev->uw_funcs->uf_txrf_config(dev, config));
    861c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    861e:	f205 5124 	addw	r1, r5, #1316	; 0x524
    8622:	685b      	ldr	r3, [r3, #4]
    8624:	4628      	mov	r0, r5
    8626:	4798      	blx	r3
        uwb_config_updated = false;
    8628:	2300      	movs	r3, #0
    862a:	7023      	strb	r3, [r4, #0]
}
    862c:	b005      	add	sp, #20
    862e:	ecbd 8b02 	vpop	{d8}
    8632:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint16_t idx = slot->idx;
    8636:	881c      	ldrh	r4, [r3, #0]
    uwb_transport_instance_t * uwb_transport = (uwb_transport_instance_t *)slot->arg;
    8638:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
    return (dev->uw_funcs->uf_phy_SHR_duration(dev));
    863c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    8640:	4628      	mov	r0, r5
    8642:	4798      	blx	r3
    preamble_duration = (uint64_t) ceilf(uwb_usecs_to_dwt_usecs(uwb_phy_SHR_duration(tdma->dev_inst)));
    8644:	f016 f84e 	bl	1e6e4 <__aeabi_i2d>
    8648:	a32d      	add	r3, pc, #180	; (adr r3, 8700 <stream_slot_cb+0x118>)
    864a:	e9d3 2300 	ldrd	r2, r3, [r3]
    864e:	f016 f9dd 	bl	1ea0c <__aeabi_ddiv>
    8652:	f016 fba9 	bl	1eda8 <__aeabi_d2f>
    8656:	ee00 0a10 	vmov	s0, r0
    865a:	f016 fe27 	bl	1f2ac <ceilf>
    dxtime = tdma_tx_slot_start(tdma, idx);
    865e:	ee07 4a90 	vmov	s15, r4
    8662:	eef8 8a67 	vcvt.f32.u32	s17, s15
    preamble_duration = (uint64_t) ceilf(uwb_usecs_to_dwt_usecs(uwb_phy_SHR_duration(tdma->dev_inst)));
    8666:	ee10 5a10 	vmov	r5, s0
    dxtime_end = (tdma_tx_slot_start(tdma, idx+1) -
    866a:	3401      	adds	r4, #1
    dxtime = tdma_tx_slot_start(tdma, idx);
    866c:	eeb0 0a68 	vmov.f32	s0, s17
    8670:	4638      	mov	r0, r7
    8672:	f005 fee5 	bl	e440 <tdma_tx_slot_start>
    dxtime_end = (tdma_tx_slot_start(tdma, idx+1) -
    8676:	ee07 4a90 	vmov	s15, r4
    867a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
    dxtime = tdma_tx_slot_start(tdma, idx);
    867e:	9003      	str	r0, [sp, #12]
    dxtime_end = (tdma_tx_slot_start(tdma, idx+1) -
    8680:	eeb0 0a48 	vmov.f32	s0, s16
    8684:	4638      	mov	r0, r7
    dxtime = tdma_tx_slot_start(tdma, idx);
    8686:	9102      	str	r1, [sp, #8]
    dxtime_end = (tdma_tx_slot_start(tdma, idx+1) -
    8688:	f005 feda 	bl	e440 <tdma_tx_slot_start>
    868c:	4680      	mov	r8, r0
    preamble_duration = (uint64_t) ceilf(uwb_usecs_to_dwt_usecs(uwb_phy_SHR_duration(tdma->dev_inst)));
    868e:	4628      	mov	r0, r5
    dxtime_end = (tdma_tx_slot_start(tdma, idx+1) -
    8690:	460e      	mov	r6, r1
    preamble_duration = (uint64_t) ceilf(uwb_usecs_to_dwt_usecs(uwb_phy_SHR_duration(tdma->dev_inst)));
    8692:	f016 fc59 	bl	1ef48 <__aeabi_f2ulz>
                  ((preamble_duration + MYNEWT_VAL(OS_LATENCY))<<16)) & UWB_DTU_40BMASK;
    8696:	f510 707a 	adds.w	r0, r0, #1000	; 0x3e8
    869a:	f141 0100 	adc.w	r1, r1, #0
    869e:	040d      	lsls	r5, r1, #16
    86a0:	0404      	lsls	r4, r0, #16
    86a2:	ea45 4510 	orr.w	r5, r5, r0, lsr #16
    dxtime_end = (tdma_tx_slot_start(tdma, idx+1) -
    86a6:	ebb8 0004 	subs.w	r0, r8, r4
    86aa:	eb66 0605 	sbc.w	r6, r6, r5
    86ae:	f006 06ff 	and.w	r6, r6, #255	; 0xff
    if (uwb_transport_dequeue_tx(uwb_transport, dxtime, dxtime_end) == false) {
    86b2:	e9cd 0600 	strd	r0, r6, [sp]
    86b6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
    86ba:	4648      	mov	r0, r9
    86bc:	f007 fa04 	bl	fac8 <uwb_transport_dequeue_tx>
    86c0:	4606      	mov	r6, r0
    86c2:	2800      	cmp	r0, #0
    86c4:	d1b2      	bne.n	862c <stream_slot_cb+0x44>
        dxtime = tdma_rx_slot_start(tdma, idx);
    86c6:	eeb0 0a68 	vmov.f32	s0, s17
    86ca:	4638      	mov	r0, r7
    86cc:	f005 fe85 	bl	e3da <tdma_rx_slot_start>
        dxtime_end = (tdma_rx_slot_start(tdma, idx+1) -
    86d0:	eeb0 0a48 	vmov.f32	s0, s16
        dxtime = tdma_rx_slot_start(tdma, idx);
    86d4:	9003      	str	r0, [sp, #12]
        dxtime_end = (tdma_rx_slot_start(tdma, idx+1) -
    86d6:	4638      	mov	r0, r7
        dxtime = tdma_rx_slot_start(tdma, idx);
    86d8:	9102      	str	r1, [sp, #8]
        dxtime_end = (tdma_rx_slot_start(tdma, idx+1) -
    86da:	f005 fe7e 	bl	e3da <tdma_rx_slot_start>
    86de:	1b00      	subs	r0, r0, r4
    86e0:	eb61 0505 	sbc.w	r5, r1, r5
    86e4:	f005 05ff 	and.w	r5, r5, #255	; 0xff
        uwb_transport_listen(uwb_transport, UWB_BLOCKING, dxtime, dxtime_end);
    86e8:	e9cd 0500 	strd	r0, r5, [sp]
    86ec:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
    86f0:	4631      	mov	r1, r6
    86f2:	4648      	mov	r0, r9
    86f4:	f007 f8bf 	bl	f876 <uwb_transport_listen>
    86f8:	e798      	b.n	862c <stream_slot_cb+0x44>
    86fa:	bf00      	nop
    86fc:	f3af 8000 	nop.w
    8700:	90690691 	.word	0x90690691
    8704:	3ff06906 	.word	0x3ff06906
    8708:	20001b78 	.word	0x20001b78

0000870c <main>:
#endif



int main(int argc, char **argv){
    870c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8710:	b088      	sub	sp, #32
    int rc;

    sysinit();
    8712:	f00b f853 	bl	137bc <sysinit_start>
    8716:	f00b fed9 	bl	144cc <sysinit_app>
    871a:	f00b f855 	bl	137c8 <sysinit_end>

    struct uwb_dev * udev = uwb_dev_idx_lookup(0);
    871e:	2000      	movs	r0, #0
    8720:	f000 f900 	bl	8924 <uwb_dev_idx_lookup>
        /* Make sure to enable double buffring */
        udev->config.dblbuffon_enabled = 1;
        udev->config.rxauto_enable = 0;
        uwb_set_dblrxbuff(udev, true);
    #else
        udev->config.dblbuffon_enabled = 0;
    8724:	f8b0 352c 	ldrh.w	r3, [r0, #1324]	; 0x52c
    8728:	f423 7388 	bic.w	r3, r3, #272	; 0x110
    872c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    8730:	f8a0 352c 	strh.w	r3, [r0, #1324]	; 0x52c
    return (dev->uw_funcs->uf_set_dblrxbuf(dev, enable));
    8734:	6a43      	ldr	r3, [r0, #36]	; 0x24
    8736:	2100      	movs	r1, #0
    8738:	6a1b      	ldr	r3, [r3, #32]
    struct uwb_dev * udev = uwb_dev_idx_lookup(0);
    873a:	4604      	mov	r4, r0
        uwb_set_dblrxbuff(udev, false);
    #endif

    #if MYNEWT_VAL(UWBCFG_ENABLED)
        /* Register callback for UWB configuration changes */
        struct uwbcfg_cbs uwb_cb = {
    873c:	2600      	movs	r6, #0
    873e:	4798      	blx	r3
    8740:	4b58      	ldr	r3, [pc, #352]	; (88a4 <main+0x198>)
    8742:	9302      	str	r3, [sp, #8]
            .uc_update = uwb_config_updated_func
        };
        uwbcfg_register(&uwb_cb);
    8744:	a801      	add	r0, sp, #4
        struct uwbcfg_cbs uwb_cb = {
    8746:	9601      	str	r6, [sp, #4]
        uwbcfg_register(&uwb_cb);
    8748:	f00b f9da 	bl	13b00 <uwbcfg_register>
        /* Load config from flash */
        conf_load();
    874c:	f008 fc7e 	bl	1104c <conf_load>
    #endif

    hal_gpio_init_out(LED_BLINK_PIN, 1);
    8750:	2101      	movs	r1, #1
    8752:	201f      	movs	r0, #31
    8754:	f003 fc83 	bl	c05e <hal_gpio_init_out>
    hal_gpio_init_out(LED_1, 1);
    8758:	2101      	movs	r1, #1
    875a:	201e      	movs	r0, #30
    875c:	f003 fc7f 	bl	c05e <hal_gpio_init_out>
    hal_gpio_init_out(LED_3, 1);
    8760:	2101      	movs	r1, #1
    8762:	2016      	movs	r0, #22
    8764:	f003 fc7b 	bl	c05e <hal_gpio_init_out>

    struct _uwb_transport_instance * uwb_transport = (struct _uwb_transport_instance *)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_TRANSPORT);
    8768:	2160      	movs	r1, #96	; 0x60
    876a:	4620      	mov	r0, r4
    876c:	f000 f94e 	bl	8a0c <uwb_mac_find_cb_inst_ptr>
    assert(uwb_transport);
    8770:	4605      	mov	r5, r0
    8772:	b928      	cbnz	r0, 8780 <main+0x74>
    8774:	2300      	movs	r3, #0
    8776:	461a      	mov	r2, r3
    8778:	4619      	mov	r1, r3
    877a:	4618      	mov	r0, r3
    877c:	f004 f83e 	bl	c7fc <__assert_func>

    struct _uwb_transport_extension extension = {
    8780:	2214      	movs	r2, #20
    8782:	4631      	mov	r1, r6
    8784:	a803      	add	r0, sp, #12
    8786:	f007 fd80 	bl	1028a <memset>
    878a:	f64d 63ad 	movw	r3, #57005	; 0xdead
    878e:	f8ad 300c 	strh.w	r3, [sp, #12]
        .tsp_code = 0xDEAD,
        .receive_cb = uwb_transport_cb
    };

    uwb_transport_append_extension(uwb_transport, &extension);
    8792:	a903      	add	r1, sp, #12
    struct _uwb_transport_extension extension = {
    8794:	4b44      	ldr	r3, [pc, #272]	; (88a8 <main+0x19c>)
    8796:	9305      	str	r3, [sp, #20]
    uwb_transport_append_extension(uwb_transport, &extension);
    8798:	4628      	mov	r0, r5
    879a:	f007 f857 	bl	f84c <uwb_transport_append_extension>

    struct uwb_ccp_instance * ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_CCP);
    879e:	2101      	movs	r1, #1
    87a0:	4620      	mov	r0, r4
    87a2:	f000 f933 	bl	8a0c <uwb_mac_find_cb_inst_ptr>
    assert(ccp);
    87a6:	2800      	cmp	r0, #0
    87a8:	d0e4      	beq.n	8774 <main+0x68>

    if ((udev->role & UWB_ROLE_CCP_MASTER) || MYNEWT_VAL(UWB_TRANSPORT_ROLE) == 0) {
    87aa:	f8b4 34b4 	ldrh.w	r3, [r4, #1204]	; 0x4b4
    87ae:	07db      	lsls	r3, r3, #31
        /* Start as clock-master */
        uwb_ccp_start(ccp, CCP_ROLE_MASTER);
    87b0:	bf4c      	ite	mi
    87b2:	4631      	movmi	r1, r6
    } else {
        uwb_ccp_start(ccp, CCP_ROLE_SLAVE);
    87b4:	2101      	movpl	r1, #1
    87b6:	f006 fb99 	bl	eeec <uwb_ccp_start>
        ble_init(udev->euid);
    #endif

    #if MYNEWT_VAL(DW1000_DEVICE_0)
        // Using GPIO5 and GPIO6 to study timing.
        dw1000_gpio5_config_ext_txe( hal_dw1000_inst(0));
    87ba:	2000      	movs	r0, #0
    87bc:	f000 fa9c 	bl	8cf8 <hal_dw1000_inst>
    87c0:	f000 f9ee 	bl	8ba0 <dw1000_gpio5_config_ext_txe>
        dw1000_gpio6_config_ext_rxe( hal_dw1000_inst(0));
    87c4:	2000      	movs	r0, #0
    87c6:	f000 fa97 	bl	8cf8 <hal_dw1000_inst>
    87ca:	f000 f9ff 	bl	8bcc <dw1000_gpio6_config_ext_rxe>
    #endif

    uint32_t utime = os_cputime_ticks_to_usecs(os_cputime_get32());
    87ce:	f004 fa3f 	bl	cc50 <os_cputime_get32>
    printf("{\"utime\": %lu,\"exec\": \"%s\"}\n",utime,__FILE__);
    87d2:	4a36      	ldr	r2, [pc, #216]	; (88ac <main+0x1a0>)
    uint32_t utime = os_cputime_ticks_to_usecs(os_cputime_get32());
    87d4:	4606      	mov	r6, r0
    printf("{\"utime\": %lu,\"exec\": \"%s\"}\n",utime,__FILE__);
    87d6:	4601      	mov	r1, r0
    87d8:	4835      	ldr	r0, [pc, #212]	; (88b0 <main+0x1a4>)
    87da:	f008 f82f 	bl	1083c <printf>
    printf("{\"device_id\"=\"%lX\"",udev->device_id);
    87de:	f8d4 14c8 	ldr.w	r1, [r4, #1224]	; 0x4c8
    87e2:	4834      	ldr	r0, [pc, #208]	; (88b4 <main+0x1a8>)
    87e4:	f008 f82a 	bl	1083c <printf>
    printf(",\"panid=\"%X\"",udev->pan_id);
    87e8:	f8b4 14c0 	ldrh.w	r1, [r4, #1216]	; 0x4c0
    87ec:	4832      	ldr	r0, [pc, #200]	; (88b8 <main+0x1ac>)
    87ee:	f008 f825 	bl	1083c <printf>
    printf(",\"addr\"=\"%X\"",udev->uid);
    87f2:	f8b4 14b6 	ldrh.w	r1, [r4, #1206]	; 0x4b6
    87f6:	4831      	ldr	r0, [pc, #196]	; (88bc <main+0x1b0>)
    87f8:	f008 f820 	bl	1083c <printf>
    printf(",\"part_id\"=\"%lX\"",(uint32_t)(udev->euid&0xffffffff));
    87fc:	f8d4 14b8 	ldr.w	r1, [r4, #1208]	; 0x4b8
    8800:	482f      	ldr	r0, [pc, #188]	; (88c0 <main+0x1b4>)
    8802:	f008 f81b 	bl	1083c <printf>
    printf(",\"lot_id\"=\"%lX\"}\n",(uint32_t)(udev->euid>>32));
    8806:	f8d4 14bc 	ldr.w	r1, [r4, #1212]	; 0x4bc
    880a:	482e      	ldr	r0, [pc, #184]	; (88c4 <main+0x1b8>)
    880c:	f008 f816 	bl	1083c <printf>
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
    8810:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8812:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
    8816:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    8818:	4620      	mov	r0, r4
    881a:	4798      	blx	r3
    printf("{\"utime\": %lu,\"msg\": \"frame_duration = %d usec\"}\n",utime,uwb_phy_frame_duration(udev, sizeof(test) + sizeof(uwb_transport_frame_header_t)));
    881c:	4631      	mov	r1, r6
    881e:	4602      	mov	r2, r0
    8820:	4829      	ldr	r0, [pc, #164]	; (88c8 <main+0x1bc>)
    8822:	f008 f80b 	bl	1083c <printf>
    return (dev->uw_funcs->uf_phy_SHR_duration(dev));
    8826:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8828:	4620      	mov	r0, r4
    882a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    882e:	4798      	blx	r3
    printf("{\"utime\": %lu,\"msg\": \"SHR_duration = %d usec\"}\n",utime,uwb_phy_SHR_duration(udev));
    8830:	4631      	mov	r1, r6
    8832:	4602      	mov	r2, r0
    8834:	4825      	ldr	r0, [pc, #148]	; (88cc <main+0x1c0>)
    8836:	f008 f801 	bl	1083c <printf>
    printf("UWB_TRANSPORT_ROLE = %d\n",  MYNEWT_VAL(UWB_TRANSPORT_ROLE));
    883a:	2101      	movs	r1, #1
    883c:	4824      	ldr	r0, [pc, #144]	; (88d0 <main+0x1c4>)
    883e:	f007 fffd 	bl	1083c <printf>

    tdma_instance_t * tdma = (tdma_instance_t*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_TDMA);
    8842:	2103      	movs	r1, #3
    8844:	4620      	mov	r0, r4
    8846:	f000 f8e1 	bl	8a0c <uwb_mac_find_cb_inst_ptr>
    assert(tdma);
    884a:	4606      	mov	r6, r0
    884c:	2800      	cmp	r0, #0
    884e:	d091      	beq.n	8774 <main+0x68>
                tdma_assign_slot(tdma, stream_slot_cb,  i, (void*)uwb_transport);
        }
    #else
    /* Slot 0:ccp, 1-160 stream */
        for (uint16_t i = 1; i < MYNEWT_VAL(TDMA_NSLOTS) - 1; i++){
                tdma_assign_slot(tdma, stream_slot_cb,  i, (void*)uwb_transport);   //(pointer to tdma instance, CB for the particular slot, slot number, CB arg)
    8850:	f8df 8094 	ldr.w	r8, [pc, #148]	; 88e8 <main+0x1dc>
                this_tdma_slot = i;
    8854:	4f1f      	ldr	r7, [pc, #124]	; (88d4 <main+0x1c8>)
    8856:	2401      	movs	r4, #1
                tdma_assign_slot(tdma, stream_slot_cb,  i, (void*)uwb_transport);   //(pointer to tdma instance, CB for the particular slot, slot number, CB arg)
    8858:	b2a2      	uxth	r2, r4
    885a:	462b      	mov	r3, r5
    885c:	4641      	mov	r1, r8
    885e:	4630      	mov	r0, r6
    8860:	f005 fd30 	bl	e2c4 <tdma_assign_slot>
                this_tdma_slot = i;
    8864:	603c      	str	r4, [r7, #0]
        for (uint16_t i = 1; i < MYNEWT_VAL(TDMA_NSLOTS) - 1; i++){
    8866:	3401      	adds	r4, #1
    8868:	2c0f      	cmp	r4, #15
    886a:	d1f5      	bne.n	8858 <main+0x14c>
    886c:	491a      	ldr	r1, [pc, #104]	; (88d8 <main+0x1cc>)
    886e:	4a1b      	ldr	r2, [pc, #108]	; (88dc <main+0x1d0>)
    8870:	2311      	movs	r3, #17
        }
    #endif


    char* message = "UWB Test";
    for (uint16_t i=1; i < sizeof(payload); i++)
    8872:	3b01      	subs	r3, #1
        payload[i] = message[i-1];
    8874:	f811 0b01 	ldrb.w	r0, [r1], #1
    8878:	f802 0b01 	strb.w	r0, [r2], #1
    for (uint16_t i=1; i < sizeof(payload); i++)
    887c:	b29b      	uxth	r3, r3
    887e:	2b00      	cmp	r3, #0
    8880:	d1f7      	bne.n	8872 <main+0x166>
    return (struct dpl_eventq *) os_eventq_dflt_get();
    8882:	f004 fb41 	bl	cf08 <os_eventq_dflt_get>
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
    8886:	4a16      	ldr	r2, [pc, #88]	; (88e0 <main+0x1d4>)
    return (struct dpl_eventq *) os_eventq_dflt_get();
    8888:	4601      	mov	r1, r0
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
    888a:	462b      	mov	r3, r5
    888c:	4815      	ldr	r0, [pc, #84]	; (88e4 <main+0x1d8>)
    888e:	f004 f921 	bl	cad4 <os_callout_init>
    return (dpl_error_t)os_callout_reset(&co->co, ticks);
    8892:	4814      	ldr	r0, [pc, #80]	; (88e4 <main+0x1d8>)
    8894:	2180      	movs	r1, #128	; 0x80
    8896:	f004 f949 	bl	cb2c <os_callout_reset>
    return (struct dpl_eventq *) os_eventq_dflt_get();
    889a:	f004 fb35 	bl	cf08 <os_eventq_dflt_get>
    os_eventq_run((struct os_eventq * )evq);
    889e:	f004 fb06 	bl	ceae <os_eventq_run>
    88a2:	e7fa      	b.n	889a <main+0x18e>
    88a4:	00008509 	.word	0x00008509
    88a8:	00008495 	.word	0x00008495
    88ac:	000200ba 	.word	0x000200ba
    88b0:	000200e6 	.word	0x000200e6
    88b4:	00020103 	.word	0x00020103
    88b8:	00020116 	.word	0x00020116
    88bc:	00020123 	.word	0x00020123
    88c0:	00020130 	.word	0x00020130
    88c4:	00020141 	.word	0x00020141
    88c8:	00020153 	.word	0x00020153
    88cc:	00020185 	.word	0x00020185
    88d0:	000201b5 	.word	0x000201b5
    88d4:	20001b74 	.word	0x20001b74
    88d8:	000201ce 	.word	0x000201ce
    88dc:	20001b31 	.word	0x20001b31
    88e0:	00008559 	.word	0x00008559
    88e4:	20001b54 	.word	0x20001b54
    88e8:	000085e9 	.word	0x000085e9

000088ec <NVIC_Relocate>:
extern char __isr_vector[];
extern char __vector_tbl_reloc__[];

void
NVIC_Relocate(void)
{
    88ec:	b508      	push	{r3, lr}
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
    88ee:	4906      	ldr	r1, [pc, #24]	; (8908 <NVIC_Relocate+0x1c>)
    88f0:	4b06      	ldr	r3, [pc, #24]	; (890c <NVIC_Relocate+0x20>)
    88f2:	428b      	cmp	r3, r1
    88f4:	d004      	beq.n	8900 <NVIC_Relocate+0x14>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
            new_location[i] = current_location[i];
    88f6:	4618      	mov	r0, r3
    88f8:	22d8      	movs	r2, #216	; 0xd8
    88fa:	f007 fcb9 	bl	10270 <memcpy>
    88fe:	4603      	mov	r3, r0
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
    8900:	4a03      	ldr	r2, [pc, #12]	; (8910 <NVIC_Relocate+0x24>)
    8902:	6093      	str	r3, [r2, #8]
#endif
}
    8904:	bd08      	pop	{r3, pc}
    8906:	bf00      	nop
    8908:	00008020 	.word	0x00008020
    890c:	20000000 	.word	0x20000000
    8910:	e000ed00 	.word	0xe000ed00

00008914 <uwb_interrupt_task>:
 * @param arg  Pointer to the queue of interrupts.
 * @return void
 */
static void *
uwb_interrupt_task(void *arg)
{
    8914:	b510      	push	{r4, lr}
    struct uwb_dev * inst = (struct uwb_dev *)arg;
    while (1) {
        dpl_eventq_run(&inst->eventq);
    8916:	f100 043c 	add.w	r4, r0, #60	; 0x3c
    891a:	4620      	mov	r0, r4
    891c:	f004 fac7 	bl	ceae <os_eventq_run>
    8920:	e7fb      	b.n	891a <uwb_interrupt_task+0x6>
	...

00008924 <uwb_dev_idx_lookup>:
{
    8924:	b510      	push	{r4, lr}
    const char base1k[] = "dw1000_%d";
    8926:	4c12      	ldr	r4, [pc, #72]	; (8970 <uwb_dev_idx_lookup+0x4c>)
{
    8928:	b08c      	sub	sp, #48	; 0x30
    892a:	4603      	mov	r3, r0
    const char base1k[] = "dw1000_%d";
    892c:	6861      	ldr	r1, [r4, #4]
    892e:	6820      	ldr	r0, [r4, #0]
    snprintf(buf, sizeof buf, base1k, idx);
    8930:	9301      	str	r3, [sp, #4]
    const char base1k[] = "dw1000_%d";
    8932:	aa03      	add	r2, sp, #12
    8934:	c203      	stmia	r2!, {r0, r1}
    8936:	8921      	ldrh	r1, [r4, #8]
    const char base3k[] = "dw3000_%d";
    8938:	4c0e      	ldr	r4, [pc, #56]	; (8974 <uwb_dev_idx_lookup+0x50>)
    const char base1k[] = "dw1000_%d";
    893a:	8011      	strh	r1, [r2, #0]
    const char base3k[] = "dw3000_%d";
    893c:	6820      	ldr	r0, [r4, #0]
    893e:	6861      	ldr	r1, [r4, #4]
    8940:	aa06      	add	r2, sp, #24
    8942:	c203      	stmia	r2!, {r0, r1}
    8944:	8921      	ldrh	r1, [r4, #8]
    8946:	8011      	strh	r1, [r2, #0]
    snprintf(buf, sizeof buf, base1k, idx);
    8948:	a809      	add	r0, sp, #36	; 0x24
    894a:	aa03      	add	r2, sp, #12
    894c:	210c      	movs	r1, #12
    894e:	f007 ffa5 	bl	1089c <snprintf>
    odev = os_dev_lookup(buf);
    8952:	a809      	add	r0, sp, #36	; 0x24
    8954:	f004 f9f8 	bl	cd48 <os_dev_lookup>
    if (!odev) {
    8958:	9b01      	ldr	r3, [sp, #4]
    895a:	b938      	cbnz	r0, 896c <uwb_dev_idx_lookup+0x48>
        snprintf(buf, sizeof buf, base3k, idx);
    895c:	aa06      	add	r2, sp, #24
    895e:	210c      	movs	r1, #12
    8960:	a809      	add	r0, sp, #36	; 0x24
    8962:	f007 ff9b 	bl	1089c <snprintf>
        odev = os_dev_lookup(buf);
    8966:	a809      	add	r0, sp, #36	; 0x24
    8968:	f004 f9ee 	bl	cd48 <os_dev_lookup>
}
    896c:	b00c      	add	sp, #48	; 0x30
    896e:	bd10      	pop	{r4, pc}
    8970:	000201d7 	.word	0x000201d7
    8974:	000201e1 	.word	0x000201e1

00008978 <uwb_mac_append_interface>:
{
    8978:	b508      	push	{r3, lr}
    assert(dev);
    897a:	b928      	cbnz	r0, 8988 <uwb_mac_append_interface+0x10>
    897c:	2300      	movs	r3, #0
    897e:	461a      	mov	r2, r3
    8980:	4619      	mov	r1, r3
    8982:	4618      	mov	r0, r3
    8984:	f003 ff3a 	bl	c7fc <__assert_func>
    assert(cbs);
    8988:	2900      	cmp	r1, #0
    898a:	d0f7      	beq.n	897c <uwb_mac_append_interface+0x4>
    cbs->status.initialized = true;
    898c:	780b      	ldrb	r3, [r1, #0]
    898e:	f043 0301 	orr.w	r3, r3, #1
    8992:	700b      	strb	r3, [r1, #0]
    if(!(SLIST_EMPTY(&dev->interface_cbs))) {
    8994:	f8d0 3530 	ldr.w	r3, [r0, #1328]	; 0x530
    8998:	b13b      	cbz	r3, 89aa <uwb_mac_append_interface+0x32>
        SLIST_FOREACH(cur_cbs, &dev->interface_cbs, next){
    899a:	461a      	mov	r2, r3
    899c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    899e:	2b00      	cmp	r3, #0
    89a0:	d1fb      	bne.n	899a <uwb_mac_append_interface+0x22>
        SLIST_INSERT_AFTER(prev_cbs, cbs, next);
    89a2:	638b      	str	r3, [r1, #56]	; 0x38
    89a4:	6391      	str	r1, [r2, #56]	; 0x38
}
    89a6:	4608      	mov	r0, r1
    89a8:	bd08      	pop	{r3, pc}
        SLIST_INSERT_HEAD(&dev->interface_cbs, cbs, next);
    89aa:	638b      	str	r3, [r1, #56]	; 0x38
    89ac:	f8c0 1530 	str.w	r1, [r0, #1328]	; 0x530
    89b0:	e7f9      	b.n	89a6 <uwb_mac_append_interface+0x2e>

000089b2 <uwb_mac_remove_interface>:
{
    89b2:	b510      	push	{r4, lr}
    assert(dev);
    89b4:	4603      	mov	r3, r0
    89b6:	b918      	cbnz	r0, 89c0 <uwb_mac_remove_interface+0xe>
    89b8:	4602      	mov	r2, r0
    89ba:	4601      	mov	r1, r0
    89bc:	f003 ff1e 	bl	c7fc <__assert_func>
    SLIST_FOREACH(cbs, &dev->interface_cbs, next){
    89c0:	f8d0 4530 	ldr.w	r4, [r0, #1328]	; 0x530
    89c4:	4622      	mov	r2, r4
    89c6:	b13a      	cbz	r2, 89d8 <uwb_mac_remove_interface+0x26>
        if(cbs->id == id){
    89c8:	8850      	ldrh	r0, [r2, #2]
    89ca:	4288      	cmp	r0, r1
    89cc:	d10c      	bne.n	89e8 <uwb_mac_remove_interface+0x36>
            SLIST_REMOVE(&dev->interface_cbs, cbs, uwb_mac_interface, next);
    89ce:	42a2      	cmp	r2, r4
    89d0:	d103      	bne.n	89da <uwb_mac_remove_interface+0x28>
    89d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
    89d4:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
}
    89d8:	bd10      	pop	{r4, pc}
            SLIST_REMOVE(&dev->interface_cbs, cbs, uwb_mac_interface, next);
    89da:	4623      	mov	r3, r4
    89dc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    89de:	4294      	cmp	r4, r2
    89e0:	d1fb      	bne.n	89da <uwb_mac_remove_interface+0x28>
    89e2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    89e4:	639a      	str	r2, [r3, #56]	; 0x38
    89e6:	e7f7      	b.n	89d8 <uwb_mac_remove_interface+0x26>
    SLIST_FOREACH(cbs, &dev->interface_cbs, next){
    89e8:	6b92      	ldr	r2, [r2, #56]	; 0x38
    89ea:	e7ec      	b.n	89c6 <uwb_mac_remove_interface+0x14>

000089ec <uwb_mac_get_interface>:
{
    89ec:	b508      	push	{r3, lr}
    assert(dev);
    89ee:	4603      	mov	r3, r0
    89f0:	b918      	cbnz	r0, 89fa <uwb_mac_get_interface+0xe>
    89f2:	4602      	mov	r2, r0
    89f4:	4601      	mov	r1, r0
    89f6:	f003 ff01 	bl	c7fc <__assert_func>
    SLIST_FOREACH(cbs, &dev->interface_cbs, next){
    89fa:	f8d0 0530 	ldr.w	r0, [r0, #1328]	; 0x530
    89fe:	b900      	cbnz	r0, 8a02 <uwb_mac_get_interface+0x16>
}
    8a00:	bd08      	pop	{r3, pc}
        if(cbs->id == id){
    8a02:	8843      	ldrh	r3, [r0, #2]
    8a04:	428b      	cmp	r3, r1
    8a06:	d0fb      	beq.n	8a00 <uwb_mac_get_interface+0x14>
    SLIST_FOREACH(cbs, &dev->interface_cbs, next){
    8a08:	6b80      	ldr	r0, [r0, #56]	; 0x38
    8a0a:	e7f8      	b.n	89fe <uwb_mac_get_interface+0x12>

00008a0c <uwb_mac_find_cb_inst_ptr>:
{
    8a0c:	b508      	push	{r3, lr}
    struct uwb_mac_interface * cbs = uwb_mac_get_interface(dev, id);
    8a0e:	f7ff ffed 	bl	89ec <uwb_mac_get_interface>
    if (cbs) {
    8a12:	b100      	cbz	r0, 8a16 <uwb_mac_find_cb_inst_ptr+0xa>
        return cbs->inst_ptr;
    8a14:	6840      	ldr	r0, [r0, #4]
}
    8a16:	bd08      	pop	{r3, pc}

00008a18 <uwb_task_init>:
 *
 * @return void
 */
void
uwb_task_init(struct uwb_dev * inst, void (*irq_ev_cb)(struct dpl_event*))
{
    8a18:	b5f0      	push	{r4, r5, r6, r7, lr}
    int rc;
    /* Check if the task is already initiated */
    if (!dpl_eventq_inited(&inst->eventq))
    8a1a:	f100 073c 	add.w	r7, r0, #60	; 0x3c
{
    8a1e:	b085      	sub	sp, #20
    8a20:	4604      	mov	r4, r0
    return os_eventq_inited((struct os_eventq *) evq);
    8a22:	4638      	mov	r0, r7
    8a24:	460e      	mov	r6, r1
    8a26:	f004 f9c3 	bl	cdb0 <os_eventq_inited>
    if (!dpl_eventq_inited(&inst->eventq))
    8a2a:	4605      	mov	r5, r0
    8a2c:	bb48      	cbnz	r0, 8a82 <uwb_task_init+0x6a>
    os_eventq_init((struct os_eventq *) evq);
    8a2e:	4638      	mov	r0, r7
    8a30:	f004 f9b4 	bl	cd9c <os_eventq_init>
    memset(ev, 0, sizeof(*ev));
    8a34:	4629      	mov	r1, r5
    8a36:	2210      	movs	r2, #16
    8a38:	f104 004c 	add.w	r0, r4, #76	; 0x4c
    8a3c:	f007 fc25 	bl	1028a <memset>
    ev->ev.ev_arg = arg;
    8a40:	e9c4 6414 	strd	r6, r4, [r4, #80]	; 0x50
    return (dpl_error_t)os_sem_init(&sem->sem, tokens);
    8a44:	2101      	movs	r1, #1
    8a46:	f104 0034 	add.w	r0, r4, #52	; 0x34
    8a4a:	f004 fdfd 	bl	d648 <os_sem_init>
         */
        dpl_event_init(&inst->interrupt_ev, irq_ev_cb, (void *)inst);

        /* IRQ / ISR Semaphore init */
        rc = dpl_sem_init(&inst->irq_sem, 0x1);
        assert(rc == DPL_OK);
    8a4e:	b128      	cbz	r0, 8a5c <uwb_task_init+0x44>
    8a50:	462b      	mov	r3, r5
    8a52:	462a      	mov	r2, r5
    8a54:	4629      	mov	r1, r5
    8a56:	4628      	mov	r0, r5
    8a58:	f003 fed0 	bl	c7fc <__assert_func>
static inline int dpl_task_init(struct dpl_task *t, const char *name, dpl_task_func_t func,
		 void *arg, uint8_t prio, dpl_time_t sanity_itvl,
		 os_stack_t * stack_bottom, uint16_t stack_size)
{

    return os_task_init((struct os_task *) t, name, (os_task_func_t) func,
    8a5c:	f44f 7380 	mov.w	r3, #256	; 0x100
    8a60:	9303      	str	r3, [sp, #12]
#ifndef __KERNEL__
        dpl_task_init(&inst->task_str, "uwb_irq",
                      uwb_interrupt_task,
                      (void *) inst,
                      inst->task_prio, DPL_WAIT_FOREVER,
                      inst->task_stack,
    8a62:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
    8a66:	9302      	str	r3, [sp, #8]
    8a68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8a6c:	9301      	str	r3, [sp, #4]
    8a6e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    8a72:	9300      	str	r3, [sp, #0]
    8a74:	4a04      	ldr	r2, [pc, #16]	; (8a88 <uwb_task_init+0x70>)
    8a76:	4905      	ldr	r1, [pc, #20]	; (8a8c <uwb_task_init+0x74>)
    8a78:	4623      	mov	r3, r4
    8a7a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    8a7e:	f004 fe73 	bl	d768 <os_task_init>
                      MYNEWT_VAL(UWB_DEV_TASK_STACK_SZ));
#endif
    }
}
    8a82:	b005      	add	sp, #20
    8a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8a86:	bf00      	nop
    8a88:	00008915 	.word	0x00008915
    8a8c:	000201eb 	.word	0x000201eb

00008a90 <uwb_task_deinit>:

void
uwb_task_deinit(struct uwb_dev * inst)
{
    8a90:	b510      	push	{r4, lr}
    8a92:	4604      	mov	r4, r0
    return os_eventq_inited((struct os_eventq *) evq);
    8a94:	303c      	adds	r0, #60	; 0x3c
    8a96:	f004 f98b 	bl	cdb0 <os_eventq_inited>
    if (dpl_eventq_inited(&inst->eventq))
    8a9a:	b128      	cbz	r0, 8aa8 <uwb_task_deinit+0x18>
        (os_stack_t *) stack_bottom, stack_size) ;
}

static inline int dpl_task_remove(struct dpl_task * t)
{
    return os_task_remove((struct os_task * ) t);
    8a9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    {
        dpl_task_remove(&inst->task_str);
        dpl_eventq_deinit(&inst->eventq);
    }
}
    8aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8aa4:	f004 bed2 	b.w	d84c <os_task_remove>
    8aa8:	bd10      	pop	{r4, pc}

00008aaa <uwb_dev_init>:

void
uwb_dev_init(struct uwb_dev * inst)
{
    if (!inst->txbuf) {
    8aaa:	f8d0 3500 	ldr.w	r3, [r0, #1280]	; 0x500
{
    8aae:	b510      	push	{r4, lr}
    8ab0:	4604      	mov	r4, r0
    if (!inst->txbuf) {
    8ab2:	b963      	cbnz	r3, 8ace <uwb_dev_init+0x24>
        if (!inst->txbuf) {
            printk("ERROR, can't allocate txbuf\n");
            assert(inst->txbuf);
        }
#else
        inst->txbuf = malloc(inst->txbuf_size);
    8ab4:	f8b0 0506 	ldrh.w	r0, [r0, #1286]	; 0x506
    8ab8:	f007 fb54 	bl	10164 <malloc>
    8abc:	f8c4 0500 	str.w	r0, [r4, #1280]	; 0x500
        assert(inst->txbuf);
    8ac0:	b928      	cbnz	r0, 8ace <uwb_dev_init+0x24>
    8ac2:	2300      	movs	r3, #0
    8ac4:	461a      	mov	r2, r3
    8ac6:	4619      	mov	r1, r3
    8ac8:	4618      	mov	r0, r3
    8aca:	f003 fe97 	bl	c7fc <__assert_func>
#endif
    }
    if (!inst->rxbuf) {
    8ace:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
    8ad2:	b93b      	cbnz	r3, 8ae4 <uwb_dev_init+0x3a>
        if (!inst->rxbuf) {
            printk("ERROR, can't allocate rxbuf\n");
            assert(inst->rxbuf);
        }
#else
        inst->rxbuf = malloc(inst->rxbuf_size);
    8ad4:	f8b4 0504 	ldrh.w	r0, [r4, #1284]	; 0x504
    8ad8:	f007 fb44 	bl	10164 <malloc>
    8adc:	f8c4 04fc 	str.w	r0, [r4, #1276]	; 0x4fc
        assert(inst->rxbuf);
    8ae0:	2800      	cmp	r0, #0
    8ae2:	d0ee      	beq.n	8ac2 <uwb_dev_init+0x18>
#endif
    }
}
    8ae4:	bd10      	pop	{r4, pc}
	...

00008ae8 <uwb_calc_aoa>:
 *
 * returns angle of arrival - float, in radians
 */
dpl_float32_t
uwb_calc_aoa(dpl_float32_t pdoa, int channel, dpl_float32_t antenna_separation)
{
    8ae8:	b508      	push	{r3, lr}
    dpl_float32_t pd_dist, wavelength;
    dpl_float32_t frequency = DPL_FLOAT32_INIT(0);
    switch(channel) {
    8aea:	3801      	subs	r0, #1
{
    8aec:	ed2d 8b02 	vpush	{d8}
    8af0:	ee10 3a10 	vmov	r3, s0
    8af4:	eef0 8a60 	vmov.f32	s17, s1
    switch(channel) {
    8af8:	2808      	cmp	r0, #8
    8afa:	d833      	bhi.n	8b64 <uwb_calc_aoa+0x7c>
    8afc:	e8df f000 	tbb	[pc, r0]
    8b00:	3b3b0538 	.word	0x3b3b0538
    8b04:	322c322c 	.word	0x322c322c
    8b08:	2f          	.byte	0x2f
    8b09:	00          	.byte	0x00
    8b0a:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 8b88 <uwb_calc_aoa+0xa0>
    case (7): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_7);break;
    case (9): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_9);break;
    default: assert(0); break;
    }
    wavelength = DPL_FLOAT32_DIV(DPL_FLOAT32_INIT(SPEED_OF_LIGHT), frequency);
    pd_dist = DPL_FLOAT32_DIV(pdoa, DPL_FLOAT32_INIT(2.0f*M_PI));
    8b0e:	4618      	mov	r0, r3
    8b10:	f015 fdfa 	bl	1e708 <__aeabi_f2d>
    8b14:	a31a      	add	r3, pc, #104	; (adr r3, 8b80 <uwb_calc_aoa+0x98>)
    8b16:	e9d3 2300 	ldrd	r2, r3, [r3]
    8b1a:	f015 ff77 	bl	1ea0c <__aeabi_ddiv>
    8b1e:	f016 f943 	bl	1eda8 <__aeabi_d2f>
    wavelength = DPL_FLOAT32_DIV(DPL_FLOAT32_INIT(SPEED_OF_LIGHT), frequency);
    8b22:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8b8c <uwb_calc_aoa+0xa4>
    8b26:	eec7 7a08 	vdiv.f32	s15, s14, s16
    pd_dist = DPL_FLOAT32_MUL(pd_dist, wavelength);
    8b2a:	ee07 0a10 	vmov	s14, r0
    8b2e:	ee67 7a87 	vmul.f32	s15, s15, s14
    return DPL_FLOAT32_FROM_F64(
    8b32:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    8b36:	ee17 0a90 	vmov	r0, s15
    8b3a:	f015 fde5 	bl	1e708 <__aeabi_f2d>
    8b3e:	ec41 0b10 	vmov	d0, r0, r1
    8b42:	f016 fbf9 	bl	1f338 <asin>
    8b46:	ec51 0b10 	vmov	r0, r1, d0
    8b4a:	f016 f92d 	bl	1eda8 <__aeabi_d2f>
        DPL_FLOAT64_ASIN(DPL_FLOAT64_FROM_F32(
                         DPL_FLOAT32_DIV(pd_dist, antenna_separation)
                         )
            )
        );
}
    8b4e:	ecbd 8b02 	vpop	{d8}
    8b52:	ee00 0a10 	vmov	s0, r0
    8b56:	bd08      	pop	{r3, pc}
    case (5): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_5);break;
    8b58:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 8b90 <uwb_calc_aoa+0xa8>
    8b5c:	e7d7      	b.n	8b0e <uwb_calc_aoa+0x26>
    case (9): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_9);break;
    8b5e:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 8b94 <uwb_calc_aoa+0xac>
    8b62:	e7d4      	b.n	8b0e <uwb_calc_aoa+0x26>
    default: assert(0); break;
    8b64:	2300      	movs	r3, #0
    8b66:	461a      	mov	r2, r3
    8b68:	4619      	mov	r1, r3
    8b6a:	4618      	mov	r0, r3
    8b6c:	f003 fe46 	bl	c7fc <__assert_func>
    case (1): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_1);break;
    8b70:	ed9f 8a09 	vldr	s16, [pc, #36]	; 8b98 <uwb_calc_aoa+0xb0>
    8b74:	e7cb      	b.n	8b0e <uwb_calc_aoa+0x26>
    case (3): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_3);break;
    8b76:	ed9f 8a09 	vldr	s16, [pc, #36]	; 8b9c <uwb_calc_aoa+0xb4>
    8b7a:	e7c8      	b.n	8b0e <uwb_calc_aoa+0x26>
    8b7c:	f3af 8000 	nop.w
    8b80:	54442d18 	.word	0x54442d18
    8b84:	401921fb 	.word	0x401921fb
    8b88:	4f6e0980 	.word	0x4f6e0980
    8b8c:	4d8ef3c2 	.word	0x4d8ef3c2
    8b90:	4fc167b8 	.word	0x4fc167b8
    8b94:	4fee0980 	.word	0x4fee0980
    8b98:	4f504850 	.word	0x4f504850
    8b9c:	4f85e558 	.word	0x4f85e558

00008ba0 <dw1000_gpio5_config_ext_txe>:
        reg |= GPIO_PIN4_EXTPA;
        dw1000_write_reg(inst, GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg, sizeof(uint32_t));
}

void dw1000_gpio5_config_ext_txe(struct _dw1000_dev_instance_t * inst)
{
    8ba0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint32_t reg;

        reg = (uint32_t) dw1000_read_reg(inst, GPIO_CTRL_ID, GPIO_MODE_OFFSET, sizeof(uint32_t));
    8ba2:	2304      	movs	r3, #4
    8ba4:	2200      	movs	r2, #0
    8ba6:	2126      	movs	r1, #38	; 0x26
{
    8ba8:	4604      	mov	r4, r0
        reg = (uint32_t) dw1000_read_reg(inst, GPIO_CTRL_ID, GPIO_MODE_OFFSET, sizeof(uint32_t));
    8baa:	f000 fcbb 	bl	9524 <dw1000_read_reg>
        reg &= ~GPIO_MSGP5_MASK;
        reg |= GPIO_PIN5_EXTTXE;
        dw1000_write_reg(inst, GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg, sizeof(uint32_t));
    8bae:	2204      	movs	r2, #4
        reg &= ~GPIO_MSGP5_MASK;
    8bb0:	f420 3340 	bic.w	r3, r0, #196608	; 0x30000
        dw1000_write_reg(inst, GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg, sizeof(uint32_t));
    8bb4:	9202      	str	r2, [sp, #8]
        reg |= GPIO_PIN5_EXTTXE;
    8bb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
        dw1000_write_reg(inst, GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg, sizeof(uint32_t));
    8bba:	2200      	movs	r2, #0
    8bbc:	e9cd 3200 	strd	r3, r2, [sp]
    8bc0:	2126      	movs	r1, #38	; 0x26
    8bc2:	4620      	mov	r0, r4
    8bc4:	f000 fd00 	bl	95c8 <dw1000_write_reg>
}
    8bc8:	b004      	add	sp, #16
    8bca:	bd10      	pop	{r4, pc}

00008bcc <dw1000_gpio6_config_ext_rxe>:

void dw1000_gpio6_config_ext_rxe(struct _dw1000_dev_instance_t * inst)
{
    8bcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint32_t reg;

        reg = (uint32_t) dw1000_read_reg(inst, GPIO_CTRL_ID, GPIO_MODE_OFFSET, sizeof(uint32_t));
    8bce:	2304      	movs	r3, #4
    8bd0:	2200      	movs	r2, #0
    8bd2:	2126      	movs	r1, #38	; 0x26
{
    8bd4:	4604      	mov	r4, r0
        reg = (uint32_t) dw1000_read_reg(inst, GPIO_CTRL_ID, GPIO_MODE_OFFSET, sizeof(uint32_t));
    8bd6:	f000 fca5 	bl	9524 <dw1000_read_reg>
        reg &= ~GPIO_MSGP6_MASK;
        reg |= GPIO_PIN6_EXTRXE;
        dw1000_write_reg(inst, GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg, sizeof(uint32_t));
    8bda:	2204      	movs	r2, #4
        reg &= ~GPIO_MSGP6_MASK;
    8bdc:	f420 2340 	bic.w	r3, r0, #786432	; 0xc0000
        dw1000_write_reg(inst, GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg, sizeof(uint32_t));
    8be0:	9202      	str	r2, [sp, #8]
        reg |= GPIO_PIN6_EXTRXE;
    8be2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
        dw1000_write_reg(inst, GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg, sizeof(uint32_t));
    8be6:	2200      	movs	r2, #0
    8be8:	e9cd 3200 	strd	r3, r2, [sp]
    8bec:	2126      	movs	r1, #38	; 0x26
    8bee:	4620      	mov	r0, r4
    8bf0:	f000 fcea 	bl	95c8 <dw1000_write_reg>
}
    8bf4:	b004      	add	sp, #16
    8bf6:	bd10      	pop	{r4, pc}

00008bf8 <dw1000_gpio_config_leds>:
 *          - bit 2 to 7: reserved
 *
 * @return void
 */
void dw1000_gpio_config_leds(struct _dw1000_dev_instance_t * inst, dw1000_led_modes_t mode)
{
    8bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t reg;

    if (mode & DWT_LEDS_ENABLE){
    8bfa:	f011 0202 	ands.w	r2, r1, #2
{
    8bfe:	b087      	sub	sp, #28
    8c00:	4604      	mov	r4, r0
    8c02:	460f      	mov	r7, r1
        // Set up MFIO for LED output.
        reg = (uint32_t) dw1000_read_reg(inst, GPIO_CTRL_ID, GPIO_MODE_OFFSET, sizeof(uint32_t));
    8c04:	f04f 0304 	mov.w	r3, #4
    if (mode & DWT_LEDS_ENABLE){
    8c08:	d04e      	beq.n	8ca8 <dw1000_gpio_config_leds+0xb0>
        reg = (uint32_t) dw1000_read_reg(inst, GPIO_CTRL_ID, GPIO_MODE_OFFSET, sizeof(uint32_t));
    8c0a:	2200      	movs	r2, #0
    8c0c:	2126      	movs	r1, #38	; 0x26
    8c0e:	f000 fc89 	bl	9524 <dw1000_read_reg>
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
    8c12:	f420 5070 	bic.w	r0, r0, #15360	; 0x3c00
        reg |= (GPIO_PIN2_RXLED | GPIO_PIN3_TXLED);
        dw1000_write_reg(inst, GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg, sizeof(uint32_t));
    8c16:	2500      	movs	r5, #0
    8c18:	2604      	movs	r6, #4
        reg |= (GPIO_PIN2_RXLED | GPIO_PIN3_TXLED);
    8c1a:	f440 50a0 	orr.w	r0, r0, #5120	; 0x1400
        dw1000_write_reg(inst, GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg, sizeof(uint32_t));
    8c1e:	e9cd 0500 	strd	r0, r5, [sp]
    8c22:	462a      	mov	r2, r5
    8c24:	2126      	movs	r1, #38	; 0x26
    8c26:	4620      	mov	r0, r4
    8c28:	9602      	str	r6, [sp, #8]
    8c2a:	f000 fccd 	bl	95c8 <dw1000_write_reg>

        // Enable LP Oscillator to run from counter and turn on de-bounce clock.
        reg = (uint32_t) dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint32_t));
    8c2e:	4633      	mov	r3, r6
    8c30:	462a      	mov	r2, r5
    8c32:	2136      	movs	r1, #54	; 0x36
    8c34:	4620      	mov	r0, r4
    8c36:	f000 fc75 	bl	9524 <dw1000_read_reg>
        reg |= (PMSC_CTRL0_GPDCE | PMSC_CTRL0_KHZCLEN);
    8c3a:	f440 0004 	orr.w	r0, r0, #8650752	; 0x840000
        dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, reg, sizeof(uint32_t));
    8c3e:	e9cd 0500 	strd	r0, r5, [sp]
    8c42:	462a      	mov	r2, r5
    8c44:	2136      	movs	r1, #54	; 0x36
    8c46:	4620      	mov	r0, r4
    8c48:	9602      	str	r6, [sp, #8]
    8c4a:	f000 fcbd 	bl	95c8 <dw1000_write_reg>
        dw1000_write_reg(inst, PMSC_ID, PMSC_LEDC_OFFSET, PMSC_LEDC_BLNKEN | PMSC_LEDC_BLINK_TIME_DEF, sizeof(uint32_t));
    8c4e:	2300      	movs	r3, #0
    8c50:	f44f 7288 	mov.w	r2, #272	; 0x110
    8c54:	e9cd 2300 	strd	r2, r3, [sp]
    8c58:	9602      	str	r6, [sp, #8]
    8c5a:	2228      	movs	r2, #40	; 0x28
    8c5c:	2136      	movs	r1, #54	; 0x36
    8c5e:	4620      	mov	r0, r4
    8c60:	f000 fcb2 	bl	95c8 <dw1000_write_reg>

        if (mode & DWT_LEDS_INIT_BLINK){
    8c64:	077b      	lsls	r3, r7, #29
    8c66:	d51d      	bpl.n	8ca4 <dw1000_gpio_config_leds+0xac>
            // Single blink sign-of-life.
            reg = (uint32_t) dw1000_read_reg(inst, PMSC_ID, PMSC_LEDC_OFFSET, sizeof(uint32_t));
    8c68:	4633      	mov	r3, r6
    8c6a:	2228      	movs	r2, #40	; 0x28
    8c6c:	2136      	movs	r1, #54	; 0x36
    8c6e:	4620      	mov	r0, r4
    8c70:	f000 fc58 	bl	9524 <dw1000_read_reg>
            reg |= PMSC_LEDC_BLINK_NOW_ALL;
    8c74:	f440 2370 	orr.w	r3, r0, #983040	; 0xf0000

            dw1000_write_reg(inst, PMSC_ID, PMSC_LEDC_OFFSET, reg, sizeof(uint32_t));
    8c78:	2228      	movs	r2, #40	; 0x28
    8c7a:	2136      	movs	r1, #54	; 0x36
    8c7c:	e9cd 3500 	strd	r3, r5, [sp]
            reg = (uint32_t) dw1000_read_reg(inst, PMSC_ID, PMSC_LEDC_OFFSET, sizeof(uint32_t));
    8c80:	4607      	mov	r7, r0
            dw1000_write_reg(inst, PMSC_ID, PMSC_LEDC_OFFSET, reg, sizeof(uint32_t));
    8c82:	9602      	str	r6, [sp, #8]
    8c84:	4620      	mov	r0, r4
    8c86:	f000 fc9f 	bl	95c8 <dw1000_write_reg>
            reg &= ~PMSC_LEDC_BLINK_NOW_ALL;
            dpl_cputime_delay_usecs(10);
            dw1000_write_reg(inst, PMSC_ID, PMSC_LEDC_OFFSET, reg, sizeof(uint32_t));
    8c8a:	f427 2770 	bic.w	r7, r7, #983040	; 0xf0000
            dpl_cputime_delay_usecs(10);
    8c8e:	200a      	movs	r0, #10
    8c90:	f007 fe5e 	bl	10950 <dpl_cputime_delay_usecs>
            dw1000_write_reg(inst, PMSC_ID, PMSC_LEDC_OFFSET, reg, sizeof(uint32_t));
    8c94:	e9cd 7500 	strd	r7, r5, [sp]
    8c98:	9602      	str	r6, [sp, #8]
    8c9a:	2228      	movs	r2, #40	; 0x28
    8c9c:	2136      	movs	r1, #54	; 0x36
        }
    }else{
        // Clear the GPIO bits that are used for LED control.
        reg = dw1000_read_reg(inst,GPIO_CTRL_ID, GPIO_MODE_OFFSET,sizeof(uint32_t));
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
        dw1000_write_reg(inst, GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg, sizeof(uint32_t));
    8c9e:	4620      	mov	r0, r4
    8ca0:	f000 fc92 	bl	95c8 <dw1000_write_reg>
    }
}
    8ca4:	b007      	add	sp, #28
    8ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        reg = dw1000_read_reg(inst,GPIO_CTRL_ID, GPIO_MODE_OFFSET,sizeof(uint32_t));
    8ca8:	2126      	movs	r1, #38	; 0x26
    8caa:	9205      	str	r2, [sp, #20]
    8cac:	f000 fc3a 	bl	9524 <dw1000_read_reg>
        dw1000_write_reg(inst, GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg, sizeof(uint32_t));
    8cb0:	9a05      	ldr	r2, [sp, #20]
    8cb2:	9201      	str	r2, [sp, #4]
    8cb4:	2304      	movs	r3, #4
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
    8cb6:	f420 5070 	bic.w	r0, r0, #15360	; 0x3c00
        dw1000_write_reg(inst, GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg, sizeof(uint32_t));
    8cba:	9302      	str	r3, [sp, #8]
    8cbc:	9000      	str	r0, [sp, #0]
    8cbe:	2126      	movs	r1, #38	; 0x26
    8cc0:	e7ed      	b.n	8c9e <dw1000_gpio_config_leds+0xa6>

00008cc2 <hal_dw1000_spi_txrx_cb>:
 * @param ev    pointer to os_event
 * @return void
 */
void
hal_dw1000_spi_txrx_cb(void *arg, int len)
{
    8cc2:	b510      	push	{r4, lr}
    dpl_error_t err;
    struct _dw1000_dev_instance_t * inst = arg;
    assert(inst!=0);
    8cc4:	4604      	mov	r4, r0
    8cc6:	b928      	cbnz	r0, 8cd4 <hal_dw1000_spi_txrx_cb+0x12>
    8cc8:	2300      	movs	r3, #0
    8cca:	461a      	mov	r2, r3
    8ccc:	4619      	mov	r1, r3
    8cce:	4618      	mov	r0, r3
    8cd0:	f003 fd94 	bl	c7fc <__assert_func>

    /* Check for longer nonblocking read/write op */
    if (dpl_sem_get_count(&inst->spi_nb_sem) == 0) {
    8cd4:	f8b0 3552 	ldrh.w	r3, [r0, #1362]	; 0x552
    8cd8:	b933      	cbnz	r3, 8ce8 <hal_dw1000_spi_txrx_cb+0x26>
    return (dpl_error_t)os_sem_release(&sem->sem);
    8cda:	f200 504c 	addw	r0, r0, #1356	; 0x54c
    8cde:	f004 fcbb 	bl	d658 <os_sem_release>
        assert(err == DPL_OK);
    } else {
        hal_gpio_write(inst->ss_pin, 1);
        DW1000_SPI_BT_ADD_END(inst);
        err = dpl_sem_release(inst->spi_sem);
        assert(err == DPL_OK);
    8ce2:	2800      	cmp	r0, #0
    8ce4:	d1f0      	bne.n	8cc8 <hal_dw1000_spi_txrx_cb+0x6>
    }
}
    8ce6:	bd10      	pop	{r4, pc}
        hal_gpio_write(inst->ss_pin, 1);
    8ce8:	f890 055e 	ldrb.w	r0, [r0, #1374]	; 0x55e
    8cec:	2101      	movs	r1, #1
    8cee:	f003 f9c9 	bl	c084 <hal_gpio_write>
    8cf2:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
    8cf6:	e7f2      	b.n	8cde <hal_dw1000_spi_txrx_cb+0x1c>

00008cf8 <hal_dw1000_inst>:
        return &hal_dw1000_instances[idx];
    8cf8:	2800      	cmp	r0, #0
}
    8cfa:	4802      	ldr	r0, [pc, #8]	; (8d04 <hal_dw1000_inst+0xc>)
    8cfc:	bf18      	it	ne
    8cfe:	2000      	movne	r0, #0
    8d00:	4770      	bx	lr
    8d02:	bf00      	nop
    8d04:	20000540 	.word	0x20000540

00008d08 <hal_dw1000_reset>:
{
    8d08:	b510      	push	{r4, lr}
    assert(inst);
    8d0a:	4604      	mov	r4, r0
    8d0c:	b920      	cbnz	r0, 8d18 <hal_dw1000_reset+0x10>
    8d0e:	4603      	mov	r3, r0
    8d10:	4602      	mov	r2, r0
    8d12:	4601      	mov	r1, r0
    8d14:	f003 fd72 	bl	c7fc <__assert_func>
    hal_gpio_init_out(inst->ss_pin, 1);
    8d18:	2101      	movs	r1, #1
    8d1a:	f890 055e 	ldrb.w	r0, [r0, #1374]	; 0x55e
    8d1e:	f003 f99e 	bl	c05e <hal_gpio_init_out>
    hal_gpio_init_out(inst->rst_pin, 0);
    8d22:	f894 055f 	ldrb.w	r0, [r4, #1375]	; 0x55f
    8d26:	2100      	movs	r1, #0
    8d28:	f003 f999 	bl	c05e <hal_gpio_init_out>
    hal_gpio_write(inst->rst_pin, 0);
    8d2c:	f894 055f 	ldrb.w	r0, [r4, #1375]	; 0x55f
    8d30:	2100      	movs	r1, #0
    8d32:	f003 f9a7 	bl	c084 <hal_gpio_write>
    dpl_cputime_delay_usecs(1);
    8d36:	2001      	movs	r0, #1
    8d38:	f007 fe0a 	bl	10950 <dpl_cputime_delay_usecs>
    hal_gpio_write(inst->rst_pin, 1);
    8d3c:	f894 055f 	ldrb.w	r0, [r4, #1375]	; 0x55f
    8d40:	2101      	movs	r1, #1
    8d42:	f003 f99f 	bl	c084 <hal_gpio_write>
    hal_gpio_init_in(inst->rst_pin, HAL_GPIO_PULL_NONE);
    8d46:	f894 055f 	ldrb.w	r0, [r4, #1375]	; 0x55f
    8d4a:	2100      	movs	r1, #0
    8d4c:	f003 f972 	bl	c034 <hal_gpio_init_in>
}
    8d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dpl_cputime_delay_usecs(5000);
    8d54:	f241 3088 	movw	r0, #5000	; 0x1388
    8d58:	f007 bdfa 	b.w	10950 <dpl_cputime_delay_usecs>

00008d5c <hal_dw1000_read>:
{
    8d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8d60:	4605      	mov	r5, r0
    assert(inst->spi_sem);
    8d62:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548
{
    8d66:	f8bd a020 	ldrh.w	sl, [sp, #32]
    8d6a:	460e      	mov	r6, r1
    8d6c:	4617      	mov	r7, r2
    8d6e:	4699      	mov	r9, r3
    assert(inst->spi_sem);
    8d70:	b928      	cbnz	r0, 8d7e <hal_dw1000_read+0x22>
    8d72:	2300      	movs	r3, #0
    8d74:	461a      	mov	r2, r3
    8d76:	4619      	mov	r1, r3
    8d78:	4618      	mov	r0, r3
    8d7a:	f003 fd3f 	bl	c7fc <__assert_func>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    8d7e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8d82:	f004 fc9b 	bl	d6bc <os_sem_pend>
    if (rc != DPL_OK) {
    8d86:	4604      	mov	r4, r0
    8d88:	b140      	cbz	r0, 8d9c <hal_dw1000_read+0x40>
        inst->uwb_dev.status.sem_error = 1;
    8d8a:	f895 350b 	ldrb.w	r3, [r5, #1291]	; 0x50b
    8d8e:	f043 0304 	orr.w	r3, r3, #4
    8d92:	f885 350b 	strb.w	r3, [r5, #1291]	; 0x50b
}
    8d96:	4620      	mov	r0, r4
    8d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hal_gpio_write(inst->ss_pin, 0);
    8d9c:	4601      	mov	r1, r0
    8d9e:	f895 055e 	ldrb.w	r0, [r5, #1374]	; 0x55e
    8da2:	f003 f96f 	bl	c084 <hal_gpio_write>
    rc = hal_spi_txrx(inst->spi_num, (void*)cmd, 0, cmd_size);
    8da6:	4622      	mov	r2, r4
    8da8:	f895 055c 	ldrb.w	r0, [r5, #1372]	; 0x55c
    8dac:	463b      	mov	r3, r7
    8dae:	4631      	mov	r1, r6
    8db0:	f003 fba4 	bl	c4fc <hal_spi_txrx>
    assert(rc == DPL_OK);
    8db4:	4604      	mov	r4, r0
    8db6:	2800      	cmp	r0, #0
    8db8:	d1db      	bne.n	8d72 <hal_dw1000_read+0x16>
        MYNEWT_VAL(DW1000_HAL_SPI_MAX_CNT) : inst->uwb_dev.txbuf_size;
    8dba:	f8b5 7506 	ldrh.w	r7, [r5, #1286]	; 0x506
    int step = (inst->uwb_dev.txbuf_size > MYNEWT_VAL(DW1000_HAL_SPI_MAX_CNT)) ?
    8dbe:	2fff      	cmp	r7, #255	; 0xff
    8dc0:	bf28      	it	cs
    8dc2:	27ff      	movcs	r7, #255	; 0xff
    for (int offset = 0;offset<length && rc == DPL_OK;offset+=step) {
    8dc4:	4606      	mov	r6, r0
    int bytes_left = length;
    8dc6:	46d0      	mov	r8, sl
    for (int offset = 0;offset<length && rc == DPL_OK;offset+=step) {
    8dc8:	4556      	cmp	r6, sl
    8dca:	da00      	bge.n	8dce <hal_dw1000_read+0x72>
    8dcc:	b158      	cbz	r0, 8de6 <hal_dw1000_read+0x8a>
    hal_gpio_write(inst->ss_pin, 1);
    8dce:	f895 055e 	ldrb.w	r0, [r5, #1374]	; 0x55e
    8dd2:	2101      	movs	r1, #1
    8dd4:	f003 f956 	bl	c084 <hal_gpio_write>
    return (dpl_error_t)os_sem_release(&sem->sem);
    8dd8:	f8d5 0548 	ldr.w	r0, [r5, #1352]	; 0x548
    8ddc:	f004 fc3c 	bl	d658 <os_sem_release>
    assert(rc == DPL_OK);
    8de0:	2800      	cmp	r0, #0
    8de2:	d0d8      	beq.n	8d96 <hal_dw1000_read+0x3a>
    8de4:	e7c5      	b.n	8d72 <hal_dw1000_read+0x16>
        int bytes_to_read = (bytes_left > step) ? step : bytes_left;
    8de6:	45b8      	cmp	r8, r7
    8de8:	4643      	mov	r3, r8
        rc = hal_spi_txrx(inst->spi_num, inst->uwb_dev.txbuf, buffer+offset, bytes_to_read);
    8dea:	eb09 0206 	add.w	r2, r9, r6
        int bytes_to_read = (bytes_left > step) ? step : bytes_left;
    8dee:	bfa8      	it	ge
    8df0:	463b      	movge	r3, r7
        rc = hal_spi_txrx(inst->spi_num, inst->uwb_dev.txbuf, buffer+offset, bytes_to_read);
    8df2:	f8d5 1500 	ldr.w	r1, [r5, #1280]	; 0x500
    8df6:	f895 055c 	ldrb.w	r0, [r5, #1372]	; 0x55c
        bytes_left-=bytes_to_read;
    8dfa:	eba8 0803 	sub.w	r8, r8, r3
    for (int offset = 0;offset<length && rc == DPL_OK;offset+=step) {
    8dfe:	443e      	add	r6, r7
        rc = hal_spi_txrx(inst->spi_num, inst->uwb_dev.txbuf, buffer+offset, bytes_to_read);
    8e00:	f003 fb7c 	bl	c4fc <hal_spi_txrx>
    for (int offset = 0;offset<length && rc == DPL_OK;offset+=step) {
    8e04:	e7e0      	b.n	8dc8 <hal_dw1000_read+0x6c>
	...

00008e08 <hal_dw1000_read_noblock>:
 * @param length    Represents buffer length.
 * @return int      DPL_OK if read is ok, error otherwise
 */
int
hal_dw1000_read_noblock(struct _dw1000_dev_instance_t * inst, const uint8_t * cmd, uint8_t cmd_size, uint8_t * buffer, uint16_t length)
{
    8e08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8e0c:	4604      	mov	r4, r0
    int rc = DPL_OK;
    assert(inst->spi_sem);
    8e0e:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548
{
    8e12:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
    8e16:	9301      	str	r3, [sp, #4]
    8e18:	4689      	mov	r9, r1
    8e1a:	4616      	mov	r6, r2
    assert(inst->spi_sem);
    8e1c:	b928      	cbnz	r0, 8e2a <hal_dw1000_read_noblock+0x22>
    8e1e:	2300      	movs	r3, #0
    8e20:	461a      	mov	r2, r3
    8e22:	4619      	mov	r1, r3
    8e24:	4618      	mov	r0, r3
    8e26:	f003 fce9 	bl	c7fc <__assert_func>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    8e2a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8e2e:	f004 fc45 	bl	d6bc <os_sem_pend>

    rc = dpl_sem_pend(inst->spi_sem, DPL_TIMEOUT_NEVER);
    if (rc != DPL_OK) {
    8e32:	4607      	mov	r7, r0
    8e34:	b148      	cbz	r0, 8e4a <hal_dw1000_read_noblock+0x42>
        inst->uwb_dev.status.sem_error = 1;
    8e36:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
    8e3a:	f043 0304 	orr.w	r3, r3, #4
    8e3e:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
    rc = dpl_sem_release(inst->spi_sem);
    assert(rc == DPL_OK);

early_exit:
    return rc;
}
    8e42:	4638      	mov	r0, r7
    8e44:	b003      	add	sp, #12
    8e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rc = hal_spi_disable(inst->spi_num);
    8e4a:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
    8e4e:	f003 faa3 	bl	c398 <hal_spi_disable>
    rc |= hal_spi_set_txrx_cb(inst->spi_num, hal_dw1000_spi_txrx_cb, (void*)inst);
    8e52:	4964      	ldr	r1, [pc, #400]	; (8fe4 <hal_dw1000_read_noblock+0x1dc>)
    rc = hal_spi_disable(inst->spi_num);
    8e54:	4605      	mov	r5, r0
    rc |= hal_spi_set_txrx_cb(inst->spi_num, hal_dw1000_spi_txrx_cb, (void*)inst);
    8e56:	4622      	mov	r2, r4
    8e58:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
    8e5c:	f003 fb3a 	bl	c4d4 <hal_spi_set_txrx_cb>
    8e60:	4305      	orrs	r5, r0
    rc |= hal_spi_enable(inst->spi_num);
    8e62:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
    8e66:	f003 fa77 	bl	c358 <hal_spi_enable>
    if (rc != DPL_OK) {
    8e6a:	ea55 0300 	orrs.w	r3, r5, r0
    8e6e:	d127      	bne.n	8ec0 <hal_dw1000_read_noblock+0xb8>
    hal_gpio_write(inst->ss_pin, 0);
    8e70:	f894 055e 	ldrb.w	r0, [r4, #1374]	; 0x55e
    8e74:	4639      	mov	r1, r7
    8e76:	f003 f905 	bl	c084 <hal_gpio_write>
    if (cmd_size + length < inst->uwb_dev.txbuf_size &&
    8e7a:	f8b4 3506 	ldrh.w	r3, [r4, #1286]	; 0x506
    8e7e:	eb06 0a08 	add.w	sl, r6, r8
    8e82:	459a      	cmp	sl, r3
    8e84:	f204 554c 	addw	r5, r4, #1356	; 0x54c
    8e88:	da42      	bge.n	8f10 <hal_dw1000_read_noblock+0x108>
    8e8a:	f1ba 0ffe 	cmp.w	sl, #254	; 0xfe
    8e8e:	dc3f      	bgt.n	8f10 <hal_dw1000_read_noblock+0x108>
        memset(inst->uwb_dev.txbuf, 0, cmd_size + length);
    8e90:	4652      	mov	r2, sl
    8e92:	4639      	mov	r1, r7
    8e94:	f8d4 0500 	ldr.w	r0, [r4, #1280]	; 0x500
    8e98:	f007 f9f7 	bl	1028a <memset>
        memcpy(inst->uwb_dev.txbuf, cmd, cmd_size);
    8e9c:	4649      	mov	r1, r9
    8e9e:	f8d4 0500 	ldr.w	r0, [r4, #1280]	; 0x500
    8ea2:	4632      	mov	r2, r6
    8ea4:	f007 f9e4 	bl	10270 <memcpy>
    8ea8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8eac:	4628      	mov	r0, r5
    8eae:	f004 fc05 	bl	d6bc <os_sem_pend>
        if (rc != DPL_OK) {
    8eb2:	b160      	cbz	r0, 8ece <hal_dw1000_read_noblock+0xc6>
            inst->uwb_dev.status.sem_error = 1;
    8eb4:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
    8eb8:	f043 0304 	orr.w	r3, r3, #4
    8ebc:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
    return (dpl_error_t)os_sem_release(&sem->sem);
    8ec0:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
    8ec4:	f004 fbc8 	bl	d658 <os_sem_release>
    assert(rc == DPL_OK);
    8ec8:	2800      	cmp	r0, #0
    8eca:	d0ba      	beq.n	8e42 <hal_dw1000_read_noblock+0x3a>
    8ecc:	e7a7      	b.n	8e1e <hal_dw1000_read_noblock+0x16>
        rc = hal_spi_txrx_noblock(inst->spi_num, inst->uwb_dev.txbuf,
    8ece:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
    8ed2:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
    8ed6:	4611      	mov	r1, r2
    8ed8:	4653      	mov	r3, sl
    8eda:	f003 fb57 	bl	c58c <hal_spi_txrx_noblock>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    8ede:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8ee2:	4628      	mov	r0, r5
    8ee4:	f004 fbea 	bl	d6bc <os_sem_pend>
        if (rc != DPL_OK) {
    8ee8:	2800      	cmp	r0, #0
    8eea:	d1e3      	bne.n	8eb4 <hal_dw1000_read_noblock+0xac>
    return (dpl_error_t)os_sem_release(&sem->sem);
    8eec:	4628      	mov	r0, r5
    8eee:	f004 fbb3 	bl	d658 <os_sem_release>
        assert(rc == DPL_OK);
    8ef2:	2800      	cmp	r0, #0
    8ef4:	d193      	bne.n	8e1e <hal_dw1000_read_noblock+0x16>
        hal_gpio_write(inst->ss_pin, 1);
    8ef6:	f894 055e 	ldrb.w	r0, [r4, #1374]	; 0x55e
    8efa:	2101      	movs	r1, #1
    8efc:	f003 f8c2 	bl	c084 <hal_gpio_write>
        memcpy(buffer, inst->uwb_dev.txbuf + cmd_size, length);
    8f00:	f8d4 1500 	ldr.w	r1, [r4, #1280]	; 0x500
    8f04:	9801      	ldr	r0, [sp, #4]
    8f06:	4642      	mov	r2, r8
    8f08:	4431      	add	r1, r6
    8f0a:	f007 f9b1 	bl	10270 <memcpy>
    8f0e:	e7d7      	b.n	8ec0 <hal_dw1000_read_noblock+0xb8>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    8f10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8f14:	4628      	mov	r0, r5
    8f16:	f004 fbd1 	bl	d6bc <os_sem_pend>
    if (rc != DPL_OK) {
    8f1a:	2800      	cmp	r0, #0
    8f1c:	d1ca      	bne.n	8eb4 <hal_dw1000_read_noblock+0xac>
    rc = hal_spi_txrx_noblock(inst->spi_num, (void*)cmd, inst->uwb_dev.txbuf, cmd_size);
    8f1e:	4633      	mov	r3, r6
    8f20:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
    8f24:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
    8f28:	4649      	mov	r1, r9
    8f2a:	f003 fb2f 	bl	c58c <hal_spi_txrx_noblock>
    if (rc != DPL_OK) {
    8f2e:	4606      	mov	r6, r0
    8f30:	2800      	cmp	r0, #0
    8f32:	d1c5      	bne.n	8ec0 <hal_dw1000_read_noblock+0xb8>
    memset(inst->uwb_dev.txbuf, 0, (length < inst->uwb_dev.txbuf_size)? length : inst->uwb_dev.txbuf_size);
    8f34:	f8b4 2506 	ldrh.w	r2, [r4, #1286]	; 0x506
    8f38:	4542      	cmp	r2, r8
    8f3a:	4601      	mov	r1, r0
    8f3c:	bf28      	it	cs
    8f3e:	4642      	movcs	r2, r8
    8f40:	f8d4 0500 	ldr.w	r0, [r4, #1280]	; 0x500
    8f44:	f007 f9a1 	bl	1028a <memset>
    8f48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8f4c:	4628      	mov	r0, r5
    8f4e:	f004 fbb5 	bl	d6bc <os_sem_pend>
    if (rc != DPL_OK) {
    8f52:	2800      	cmp	r0, #0
    8f54:	d1ae      	bne.n	8eb4 <hal_dw1000_read_noblock+0xac>
    return (dpl_error_t)os_sem_release(&sem->sem);
    8f56:	4628      	mov	r0, r5
    8f58:	f004 fb7e 	bl	d658 <os_sem_release>
    assert(rc == DPL_OK);
    8f5c:	2800      	cmp	r0, #0
    8f5e:	f47f af5e 	bne.w	8e1e <hal_dw1000_read_noblock+0x16>
        MYNEWT_VAL(DW1000_HAL_SPI_MAX_CNT) : inst->uwb_dev.txbuf_size;
    8f62:	f8b4 b506 	ldrh.w	fp, [r4, #1286]	; 0x506
    int step = (inst->uwb_dev.txbuf_size > MYNEWT_VAL(DW1000_HAL_SPI_MAX_CNT))?
    8f66:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    8f6a:	bf28      	it	cs
    8f6c:	f04f 0bff 	movcs.w	fp, #255	; 0xff
    int bytes_left = length;
    8f70:	46c1      	mov	r9, r8
    while (offset<length) {
    8f72:	45b0      	cmp	r8, r6
    8f74:	dc08      	bgt.n	8f88 <hal_dw1000_read_noblock+0x180>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    8f76:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
    8f7a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8f7e:	f004 fb9d 	bl	d6bc <os_sem_pend>
    if (rc != DPL_OK) {
    8f82:	2800      	cmp	r0, #0
    8f84:	d09c      	beq.n	8ec0 <hal_dw1000_read_noblock+0xb8>
    8f86:	e795      	b.n	8eb4 <hal_dw1000_read_noblock+0xac>
        int bytes_to_read = (bytes_left > step) ? step : bytes_left;
    8f88:	45d9      	cmp	r9, fp
    8f8a:	46ca      	mov	sl, r9
    8f8c:	bfa8      	it	ge
    8f8e:	46da      	movge	sl, fp
        if (bytes_left) {
    8f90:	ebb9 090a 	subs.w	r9, r9, sl
    8f94:	d006      	beq.n	8fa4 <hal_dw1000_read_noblock+0x19c>
    8f96:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8f9a:	4628      	mov	r0, r5
    8f9c:	f004 fb8e 	bl	d6bc <os_sem_pend>
            if (rc != DPL_OK) {
    8fa0:	2800      	cmp	r0, #0
    8fa2:	d187      	bne.n	8eb4 <hal_dw1000_read_noblock+0xac>
        rc = hal_spi_txrx_noblock(inst->spi_num, (void*)inst->uwb_dev.txbuf,
    8fa4:	9a01      	ldr	r2, [sp, #4]
    8fa6:	f8d4 1500 	ldr.w	r1, [r4, #1280]	; 0x500
    8faa:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
    8fae:	4653      	mov	r3, sl
    8fb0:	4432      	add	r2, r6
    8fb2:	f003 faeb 	bl	c58c <hal_spi_txrx_noblock>
        assert(rc==DPL_OK);
    8fb6:	2800      	cmp	r0, #0
    8fb8:	f47f af31 	bne.w	8e1e <hal_dw1000_read_noblock+0x16>
        if (bytes_left) {
    8fbc:	f1b9 0f00 	cmp.w	r9, #0
    8fc0:	d00d      	beq.n	8fde <hal_dw1000_read_noblock+0x1d6>
    8fc2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8fc6:	4628      	mov	r0, r5
    8fc8:	f004 fb78 	bl	d6bc <os_sem_pend>
            if (rc != DPL_OK) {
    8fcc:	2800      	cmp	r0, #0
    8fce:	f47f af71 	bne.w	8eb4 <hal_dw1000_read_noblock+0xac>
    return (dpl_error_t)os_sem_release(&sem->sem);
    8fd2:	4628      	mov	r0, r5
    8fd4:	f004 fb40 	bl	d658 <os_sem_release>
            assert(rc == DPL_OK);
    8fd8:	2800      	cmp	r0, #0
    8fda:	f47f af20 	bne.w	8e1e <hal_dw1000_read_noblock+0x16>
        offset+=bytes_to_read;
    8fde:	4456      	add	r6, sl
    8fe0:	e7c7      	b.n	8f72 <hal_dw1000_read_noblock+0x16a>
    8fe2:	bf00      	nop
    8fe4:	00008cc3 	.word	0x00008cc3

00008fe8 <hal_dw1000_write>:
 * @param length    Represents buffer length.
 * @return int      DPL_OK if read is ok, error otherwise
 */
int
hal_dw1000_write(struct _dw1000_dev_instance_t * inst, const uint8_t * cmd, uint8_t cmd_size, uint8_t * buffer, uint16_t length)
{
    8fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8fec:	4605      	mov	r5, r0
    int rc = DPL_OK;
    assert(inst->spi_sem);
    8fee:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548
{
    8ff2:	f8bd 9020 	ldrh.w	r9, [sp, #32]
    8ff6:	460f      	mov	r7, r1
    8ff8:	4690      	mov	r8, r2
    8ffa:	461e      	mov	r6, r3
    assert(inst->spi_sem);
    8ffc:	b928      	cbnz	r0, 900a <hal_dw1000_write+0x22>
    8ffe:	2300      	movs	r3, #0
    9000:	461a      	mov	r2, r3
    9002:	4619      	mov	r1, r3
    9004:	4618      	mov	r0, r3
    9006:	f003 fbf9 	bl	c7fc <__assert_func>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    900a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    900e:	f004 fb55 	bl	d6bc <os_sem_pend>
    rc = dpl_sem_pend(inst->spi_sem, DPL_TIMEOUT_NEVER);
    if (rc != DPL_OK) {
    9012:	4604      	mov	r4, r0
    9014:	b140      	cbz	r0, 9028 <hal_dw1000_write+0x40>
        inst->uwb_dev.status.sem_error = 1;
    9016:	f895 350b 	ldrb.w	r3, [r5, #1291]	; 0x50b
    901a:	f043 0304 	orr.w	r3, r3, #4
    901e:	f885 350b 	strb.w	r3, [r5, #1291]	; 0x50b
    DW1000_SPI_BT_ADD_END(inst);
    rc = dpl_sem_release(inst->spi_sem);
    assert(rc == DPL_OK);
early_exit:
    return rc;
}
    9022:	4620      	mov	r0, r4
    9024:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hal_gpio_write(inst->ss_pin, 0);
    9028:	4601      	mov	r1, r0
    902a:	f895 055e 	ldrb.w	r0, [r5, #1374]	; 0x55e
    902e:	f003 f829 	bl	c084 <hal_gpio_write>
    rc = hal_spi_txrx(inst->spi_num, (void*)cmd, 0, cmd_size);
    9032:	4622      	mov	r2, r4
    9034:	f895 055c 	ldrb.w	r0, [r5, #1372]	; 0x55c
    9038:	4643      	mov	r3, r8
    903a:	4639      	mov	r1, r7
    903c:	f003 fa5e 	bl	c4fc <hal_spi_txrx>
    assert(rc == DPL_OK);
    9040:	4604      	mov	r4, r0
    9042:	2800      	cmp	r0, #0
    9044:	d1db      	bne.n	8ffe <hal_dw1000_write+0x16>
    if (length) {
    9046:	f1b9 0f00 	cmp.w	r9, #0
    904a:	d006      	beq.n	905a <hal_dw1000_write+0x72>
        hal_spi_txrx(inst->spi_num, (void*)buffer, 0, length);
    904c:	4602      	mov	r2, r0
    904e:	464b      	mov	r3, r9
    9050:	f895 055c 	ldrb.w	r0, [r5, #1372]	; 0x55c
    9054:	4631      	mov	r1, r6
    9056:	f003 fa51 	bl	c4fc <hal_spi_txrx>
    hal_gpio_write(inst->ss_pin, 1);
    905a:	f895 055e 	ldrb.w	r0, [r5, #1374]	; 0x55e
    905e:	2101      	movs	r1, #1
    9060:	f003 f810 	bl	c084 <hal_gpio_write>
    return (dpl_error_t)os_sem_release(&sem->sem);
    9064:	f8d5 0548 	ldr.w	r0, [r5, #1352]	; 0x548
    9068:	f004 faf6 	bl	d658 <os_sem_release>
    assert(rc == DPL_OK);
    906c:	2800      	cmp	r0, #0
    906e:	d0d8      	beq.n	9022 <hal_dw1000_write+0x3a>
    9070:	e7c5      	b.n	8ffe <hal_dw1000_write+0x16>
	...

00009074 <hal_dw1000_write_noblock>:
 * @param length    Represents buffer length.
 * @return int      DPL_OK if read is ok, error otherwise
 */
int
hal_dw1000_write_noblock(struct _dw1000_dev_instance_t * inst, const uint8_t * cmd, uint8_t cmd_size, uint8_t * buffer, uint16_t length)
{
    9074:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9078:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
    907c:	4604      	mov	r4, r0
    907e:	4689      	mov	r9, r1
    9080:	4690      	mov	r8, r2
    9082:	469a      	mov	sl, r3
    int rc = DPL_OK;
    assert(length);
    9084:	b92f      	cbnz	r7, 9092 <hal_dw1000_write_noblock+0x1e>
    9086:	2300      	movs	r3, #0
    9088:	461a      	mov	r2, r3
    908a:	4619      	mov	r1, r3
    908c:	4618      	mov	r0, r3
    908e:	f003 fbb5 	bl	c7fc <__assert_func>
    assert(inst->spi_sem);
    9092:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548
    9096:	2800      	cmp	r0, #0
    9098:	d0f5      	beq.n	9086 <hal_dw1000_write_noblock+0x12>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    909a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    909e:	f004 fb0d 	bl	d6bc <os_sem_pend>
    rc = dpl_sem_pend(inst->spi_sem, DPL_TIMEOUT_NEVER);
    if (rc != DPL_OK) {
    90a2:	9001      	str	r0, [sp, #4]
    90a4:	b148      	cbz	r0, 90ba <hal_dw1000_write_noblock+0x46>
        inst->uwb_dev.status.sem_error = 1;
    90a6:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
    90aa:	f043 0304 	orr.w	r3, r3, #4
    90ae:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b

err_return:
    rc = dpl_sem_release(inst->spi_sem);
    assert(rc == DPL_OK);
    return rc;
}
    90b2:	9801      	ldr	r0, [sp, #4]
    90b4:	b003      	add	sp, #12
    90b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rc = hal_spi_disable(inst->spi_num);
    90ba:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
    90be:	f003 f96b 	bl	c398 <hal_spi_disable>
    rc |= hal_spi_set_txrx_cb(inst->spi_num, hal_dw1000_spi_txrx_cb, (void*)inst);
    90c2:	494a      	ldr	r1, [pc, #296]	; (91ec <hal_dw1000_write_noblock+0x178>)
    rc = hal_spi_disable(inst->spi_num);
    90c4:	4605      	mov	r5, r0
    rc |= hal_spi_set_txrx_cb(inst->spi_num, hal_dw1000_spi_txrx_cb, (void*)inst);
    90c6:	4622      	mov	r2, r4
    90c8:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
    90cc:	f003 fa02 	bl	c4d4 <hal_spi_set_txrx_cb>
    90d0:	4305      	orrs	r5, r0
    rc |= hal_spi_enable(inst->spi_num);
    90d2:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
    90d6:	f003 f93f 	bl	c358 <hal_spi_enable>
    if (rc != DPL_OK) {
    90da:	ea55 0100 	orrs.w	r1, r5, r0
    90de:	d131      	bne.n	9144 <hal_dw1000_write_noblock+0xd0>
    hal_gpio_write(inst->ss_pin, 0);
    90e0:	f894 055e 	ldrb.w	r0, [r4, #1374]	; 0x55e
    90e4:	f002 ffce 	bl	c084 <hal_gpio_write>
    if (cmd_size + length < inst->uwb_dev.txbuf_size &&
    90e8:	f8b4 3506 	ldrh.w	r3, [r4, #1286]	; 0x506
    90ec:	eb08 0507 	add.w	r5, r8, r7
    90f0:	429d      	cmp	r5, r3
    90f2:	da19      	bge.n	9128 <hal_dw1000_write_noblock+0xb4>
    90f4:	2dfe      	cmp	r5, #254	; 0xfe
    90f6:	dc17      	bgt.n	9128 <hal_dw1000_write_noblock+0xb4>
        memcpy(inst->uwb_dev.txbuf, cmd, cmd_size);
    90f8:	4642      	mov	r2, r8
    90fa:	4649      	mov	r1, r9
    90fc:	f8d4 0500 	ldr.w	r0, [r4, #1280]	; 0x500
    9100:	f007 f8b6 	bl	10270 <memcpy>
        memcpy(inst->uwb_dev.txbuf+cmd_size, buffer, length);
    9104:	f8d4 0500 	ldr.w	r0, [r4, #1280]	; 0x500
    9108:	463a      	mov	r2, r7
    910a:	4651      	mov	r1, sl
    910c:	4440      	add	r0, r8
    910e:	f007 f8af 	bl	10270 <memcpy>
        rc = hal_spi_txrx_noblock(inst->spi_num, (void*)inst->uwb_dev.txbuf,
    9112:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
    9116:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
    911a:	462b      	mov	r3, r5
    911c:	4611      	mov	r1, r2
}
    911e:	b003      	add	sp, #12
    9120:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        rc = hal_spi_txrx_noblock(inst->spi_num, (void*)inst->uwb_dev.txbuf,
    9124:	f003 ba32 	b.w	c58c <hal_spi_txrx_noblock>
    9128:	f204 564c 	addw	r6, r4, #1356	; 0x54c
    912c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9130:	4630      	mov	r0, r6
    9132:	f004 fac3 	bl	d6bc <os_sem_pend>
    if (rc != DPL_OK) {
    9136:	b160      	cbz	r0, 9152 <hal_dw1000_write_noblock+0xde>
        inst->uwb_dev.status.sem_error = 1;
    9138:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
    913c:	f043 0304 	orr.w	r3, r3, #4
    9140:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
    return (dpl_error_t)os_sem_release(&sem->sem);
    9144:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
    9148:	f004 fa86 	bl	d658 <os_sem_release>
    assert(rc == DPL_OK);
    914c:	2800      	cmp	r0, #0
    914e:	d0b0      	beq.n	90b2 <hal_dw1000_write_noblock+0x3e>
    9150:	e799      	b.n	9086 <hal_dw1000_write_noblock+0x12>
    rc = hal_spi_txrx_noblock(inst->spi_num, (void*)cmd, inst->uwb_dev.txbuf, cmd_size);
    9152:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
    9156:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
    915a:	4643      	mov	r3, r8
    915c:	4649      	mov	r1, r9
    915e:	f003 fa15 	bl	c58c <hal_spi_txrx_noblock>
    assert(rc==DPL_OK);
    9162:	4605      	mov	r5, r0
    9164:	2800      	cmp	r0, #0
    9166:	d18e      	bne.n	9086 <hal_dw1000_write_noblock+0x12>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    9168:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    916c:	4630      	mov	r0, r6
    916e:	f004 faa5 	bl	d6bc <os_sem_pend>
    if (rc != DPL_OK) {
    9172:	2800      	cmp	r0, #0
    9174:	d1e0      	bne.n	9138 <hal_dw1000_write_noblock+0xc4>
    return (dpl_error_t)os_sem_release(&sem->sem);
    9176:	4630      	mov	r0, r6
    9178:	f004 fa6e 	bl	d658 <os_sem_release>
    assert(rc == DPL_OK);
    917c:	2800      	cmp	r0, #0
    917e:	d182      	bne.n	9086 <hal_dw1000_write_noblock+0x12>
        MYNEWT_VAL(DW1000_HAL_SPI_MAX_CNT) : inst->uwb_dev.txbuf_size;
    9180:	f8b4 b506 	ldrh.w	fp, [r4, #1286]	; 0x506
    int step = (inst->uwb_dev.txbuf_size > MYNEWT_VAL(DW1000_HAL_SPI_MAX_CNT)) ?
    9184:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    9188:	bf28      	it	cs
    918a:	f04f 0bff 	movcs.w	fp, #255	; 0xff
    int bytes_left = length;
    918e:	46b8      	mov	r8, r7
        int bytes_to_write = (bytes_left > step) ? step : bytes_left;
    9190:	45c3      	cmp	fp, r8
    9192:	46d9      	mov	r9, fp
    9194:	bfa8      	it	ge
    9196:	46c1      	movge	r9, r8
        if (bytes_left) {
    9198:	ebb8 0809 	subs.w	r8, r8, r9
    919c:	d006      	beq.n	91ac <hal_dw1000_write_noblock+0x138>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    919e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    91a2:	4630      	mov	r0, r6
    91a4:	f004 fa8a 	bl	d6bc <os_sem_pend>
            if (rc != DPL_OK) {
    91a8:	2800      	cmp	r0, #0
    91aa:	d1c5      	bne.n	9138 <hal_dw1000_write_noblock+0xc4>
        rc = hal_spi_txrx_noblock(inst->spi_num, (void*)buffer+offset,
    91ac:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
    91b0:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
    91b4:	464b      	mov	r3, r9
    91b6:	eb0a 0105 	add.w	r1, sl, r5
    91ba:	f003 f9e7 	bl	c58c <hal_spi_txrx_noblock>
        assert(rc==DPL_OK);
    91be:	2800      	cmp	r0, #0
    91c0:	f47f af61 	bne.w	9086 <hal_dw1000_write_noblock+0x12>
        if (bytes_left) {
    91c4:	f1b8 0f00 	cmp.w	r8, #0
    91c8:	d00c      	beq.n	91e4 <hal_dw1000_write_noblock+0x170>
    91ca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    91ce:	4630      	mov	r0, r6
    91d0:	f004 fa74 	bl	d6bc <os_sem_pend>
            if (rc != DPL_OK) {
    91d4:	2800      	cmp	r0, #0
    91d6:	d1af      	bne.n	9138 <hal_dw1000_write_noblock+0xc4>
    return (dpl_error_t)os_sem_release(&sem->sem);
    91d8:	4630      	mov	r0, r6
    91da:	f004 fa3d 	bl	d658 <os_sem_release>
            assert(rc == DPL_OK);
    91de:	2800      	cmp	r0, #0
    91e0:	f47f af51 	bne.w	9086 <hal_dw1000_write_noblock+0x12>
        offset+=bytes_to_write;
    91e4:	444d      	add	r5, r9
    while (offset<length) {
    91e6:	42af      	cmp	r7, r5
    91e8:	dcd2      	bgt.n	9190 <hal_dw1000_write_noblock+0x11c>
    91ea:	e762      	b.n	90b2 <hal_dw1000_write_noblock+0x3e>
    91ec:	00008cc3 	.word	0x00008cc3

000091f0 <hal_dw1000_rw_noblock_wait>:
int
hal_dw1000_rw_noblock_wait(struct _dw1000_dev_instance_t * inst, uint32_t timeout_ms)
{
    int err;
    dpl_time_t ticks;
    if (timeout_ms != DPL_TIMEOUT_NEVER) {
    91f0:	1c4b      	adds	r3, r1, #1
{
    91f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    91f4:	4604      	mov	r4, r0
    91f6:	4608      	mov	r0, r1
    if (timeout_ms != DPL_TIMEOUT_NEVER) {
    91f8:	d011      	beq.n	921e <hal_dw1000_rw_noblock_wait+0x2e>
    return (dpl_error_t)os_time_ms_to_ticks(ms, out_ticks);
    91fa:	a901      	add	r1, sp, #4
    91fc:	f004 fcac 	bl	db58 <os_time_ms_to_ticks>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    9200:	9901      	ldr	r1, [sp, #4]
    9202:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
    9206:	f004 fa59 	bl	d6bc <os_sem_pend>
    920a:	4605      	mov	r5, r0
        dpl_time_ms_to_ticks(timeout_ms, &ticks);
    } else {
        ticks = DPL_TIMEOUT_NEVER;
    }
    err = dpl_sem_pend(inst->spi_sem, ticks);
    if (dpl_sem_get_count(inst->spi_sem) == 0) {
    920c:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
    9210:	88c3      	ldrh	r3, [r0, #6]
    9212:	b90b      	cbnz	r3, 9218 <hal_dw1000_rw_noblock_wait+0x28>
    return (dpl_error_t)os_sem_release(&sem->sem);
    9214:	f004 fa20 	bl	d658 <os_sem_release>
        dpl_sem_release(inst->spi_sem);
    }
    return err;
}
    9218:	4628      	mov	r0, r5
    921a:	b003      	add	sp, #12
    921c:	bd30      	pop	{r4, r5, pc}
        ticks = DPL_TIMEOUT_NEVER;
    921e:	9101      	str	r1, [sp, #4]
    9220:	e7ee      	b.n	9200 <hal_dw1000_rw_noblock_wait+0x10>

00009222 <hal_dw1000_wakeup>:
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return int  DPL_OK if read is ok, error otherwise
 */
int
hal_dw1000_wakeup(struct _dw1000_dev_instance_t * inst)
{
    9222:	b570      	push	{r4, r5, r6, lr}
    9224:	4604      	mov	r4, r0
    int rc = DPL_OK;
    os_sr_t sr;
    assert(inst->spi_sem);
    9226:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548
    922a:	b928      	cbnz	r0, 9238 <hal_dw1000_wakeup+0x16>
    922c:	2300      	movs	r3, #0
    922e:	461a      	mov	r2, r3
    9230:	4619      	mov	r1, r3
    9232:	4618      	mov	r0, r3
    9234:	f003 fae2 	bl	c7fc <__assert_func>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    9238:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    923c:	f004 fa3e 	bl	d6bc <os_sem_pend>
    rc = dpl_sem_pend(inst->spi_sem, DPL_TIMEOUT_NEVER);
    if (rc != DPL_OK) {
    9240:	4605      	mov	r5, r0
    9242:	b138      	cbz	r0, 9254 <hal_dw1000_wakeup+0x32>
        inst->uwb_dev.status.sem_error = 1;
    9244:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
    9248:	f043 0304 	orr.w	r3, r3, #4
    924c:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b

    rc = dpl_sem_release(inst->spi_sem);
    assert(rc == DPL_OK);
early_exit:
    return rc;
}
    9250:	4628      	mov	r0, r5
    9252:	bd70      	pop	{r4, r5, r6, pc}
    return os_arch_save_sr();
    9254:	f003 fa18 	bl	c688 <os_arch_save_sr>
    9258:	4606      	mov	r6, r0
    hal_spi_disable(inst->spi_num);
    925a:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
    925e:	f003 f89b 	bl	c398 <hal_spi_disable>
    hal_gpio_write(inst->ss_pin, 0);
    9262:	4629      	mov	r1, r5
    9264:	f894 055e 	ldrb.w	r0, [r4, #1374]	; 0x55e
    9268:	f002 ff0c 	bl	c084 <hal_gpio_write>
    dpl_cputime_delay_usecs(2000);
    926c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    9270:	f007 fb6e 	bl	10950 <dpl_cputime_delay_usecs>
    hal_gpio_write(inst->ss_pin, 1);
    9274:	2101      	movs	r1, #1
    9276:	f894 055e 	ldrb.w	r0, [r4, #1374]	; 0x55e
    927a:	f002 ff03 	bl	c084 <hal_gpio_write>
    hal_spi_enable(inst->spi_num);
    927e:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
    9282:	f003 f869 	bl	c358 <hal_spi_enable>
    dpl_cputime_delay_usecs(5000);
    9286:	f241 3088 	movw	r0, #5000	; 0x1388
    928a:	f007 fb61 	bl	10950 <dpl_cputime_delay_usecs>
    os_arch_restore_sr(ctx);
    928e:	4630      	mov	r0, r6
    9290:	f003 fa00 	bl	c694 <os_arch_restore_sr>
    return (dpl_error_t)os_sem_release(&sem->sem);
    9294:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
    9298:	f004 f9de 	bl	d658 <os_sem_release>
    assert(rc == DPL_OK);
    929c:	2800      	cmp	r0, #0
    929e:	d0d7      	beq.n	9250 <hal_dw1000_wakeup+0x2e>
    92a0:	e7c4      	b.n	922c <hal_dw1000_wakeup+0xa>

000092a2 <uwb_dw1000_read_sts_rxtime>:
inline static uint64_t
uwb_dw1000_read_sts_rxtime(struct uwb_dev* __attribute((unused)) dev)
{
    /* No such functionality */
    return 0xffffffffffffffffULL;
}
    92a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    92a6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    92aa:	4770      	bx	lr

000092ac <uwb_dw1000_hal_noblock_wait>:
    return hal_dw1000_rw_noblock_wait((dw1000_dev_instance_t *)dev, timeout);
    92ac:	f7ff bfa0 	b.w	91f0 <hal_dw1000_rw_noblock_wait>

000092b0 <uwb_dw1000_mac_framefilter>:
    assert(0);
}

struct uwb_dev_status
uwb_dw1000_mac_framefilter(struct uwb_dev * dev, uint16_t enable)
{
    92b0:	460a      	mov	r2, r1
    uint16_t dw1k_en = 0;

    /* Translate uwb-level frame filtering flags to dw1000 reg */
    if (enable & UWB_FF_BEACON_EN) dw1k_en |= DWT_FF_BEACON_EN;
    92b2:	f011 0101 	ands.w	r1, r1, #1
    92b6:	bf18      	it	ne
    92b8:	2104      	movne	r1, #4
    if (enable & UWB_FF_DATA_EN)   dw1k_en |= DWT_FF_DATA_EN;
    92ba:	0793      	lsls	r3, r2, #30
    92bc:	bf48      	it	mi
    92be:	f041 0108 	orrmi.w	r1, r1, #8
    if (enable & UWB_FF_ACK_EN)    dw1k_en |= DWT_FF_ACK_EN;
    92c2:	0753      	lsls	r3, r2, #29
    92c4:	bf44      	itt	mi
    92c6:	f041 0310 	orrmi.w	r3, r1, #16
    92ca:	b299      	uxthmi	r1, r3
    if (enable & UWB_FF_MAC_EN)    dw1k_en |= DWT_FF_MAC_EN;
    92cc:	0713      	lsls	r3, r2, #28
    92ce:	bf44      	itt	mi
    92d0:	f041 0320 	orrmi.w	r3, r1, #32
    92d4:	b299      	uxthmi	r1, r3
    if (enable & UWB_FF_RSVD_EN)   dw1k_en |= DWT_FF_RSVD_EN;
    92d6:	06d3      	lsls	r3, r2, #27
    92d8:	bf44      	itt	mi
    92da:	f041 0340 	orrmi.w	r3, r1, #64	; 0x40
    92de:	b299      	uxthmi	r1, r3
    if (enable & UWB_FF_COORD_EN)  dw1k_en |= DWT_FF_COORD_EN;
    92e0:	05d3      	lsls	r3, r2, #23
    92e2:	bf44      	itt	mi
    92e4:	f041 0102 	orrmi.w	r1, r1, #2
    92e8:	b289      	uxthmi	r1, r1

    return dw1000_mac_framefilter((dw1000_dev_instance_t *)dev, dw1k_en);
    92ea:	f001 b867 	b.w	a3bc <dw1000_mac_framefilter>

000092ee <uwb_dw1000_set_autoack>:
}

struct uwb_dev_status
uwb_dw1000_set_autoack(struct uwb_dev * dev, bool enable)
{
    return dw1000_set_autoack((dw1000_dev_instance_t *)dev, enable);
    92ee:	f001 b8a5 	b.w	a43c <dw1000_set_autoack>

000092f2 <uwb_dw1000_set_autoack_delay>:
}

struct uwb_dev_status
uwb_dw1000_set_autoack_delay(struct uwb_dev * dev, uint8_t delay)
{
    return dw1000_set_autoack_delay((dw1000_dev_instance_t *)dev, delay);
    92f2:	f001 b8ed 	b.w	a4d0 <dw1000_set_autoack_delay>

000092f6 <uwb_dw1000_event_cnt_ctrl>:
}

struct uwb_dev_status
uwb_dw1000_event_cnt_ctrl(struct uwb_dev * dev, bool enable, bool reset)
{
    return dw1000_phy_event_cnt_ctrl((dw1000_dev_instance_t *)dev, enable, reset);
    92f6:	f002 bdec 	b.w	bed2 <dw1000_phy_event_cnt_ctrl>

000092fa <uwb_dw1000_event_cnt_read>:
}

struct uwb_dev_status
uwb_dw1000_event_cnt_read(struct uwb_dev * dev, struct uwb_dev_evcnt *res)
{
    return dw1000_phy_event_cnt_read((dw1000_dev_instance_t *)dev, res);
    92fa:	f002 be06 	b.w	bf0a <dw1000_phy_event_cnt_read>
	...

00009300 <uwb_dw1000_calc_pdoa>:
{
    9300:	b508      	push	{r3, lr}
    printf("%s not implemented\n", __func__);
    9302:	4905      	ldr	r1, [pc, #20]	; (9318 <uwb_dw1000_calc_pdoa+0x18>)
    9304:	4805      	ldr	r0, [pc, #20]	; (931c <uwb_dw1000_calc_pdoa+0x1c>)
    9306:	f007 fa99 	bl	1083c <printf>
    assert(0);
    930a:	2300      	movs	r3, #0
    930c:	461a      	mov	r2, r3
    930e:	4619      	mov	r1, r3
    9310:	4618      	mov	r0, r3
    9312:	f003 fa73 	bl	c7fc <__assert_func>
    9316:	bf00      	nop
    9318:	00020230 	.word	0x00020230
    931c:	000201f3 	.word	0x000201f3

00009320 <uwb_dw1000_estimate_los>:
    return dw1000_estimate_los(rssi, fppl);
    9320:	f001 bcdc 	b.w	acdc <dw1000_estimate_los>

00009324 <uwb_dw1000_calc_fppl>:
    return dw1000_calc_fppl((dw1000_dev_instance_t *)dev, (struct _dw1000_dev_rxdiag_t*)diag);
    9324:	f001 bc4a 	b.w	abbc <dw1000_calc_fppl>

00009328 <uwb_dw1000_calc_seq_rssi>:
    return dw1000_calc_rssi((dw1000_dev_instance_t *)dev, (struct _dw1000_dev_rxdiag_t*)diag);
    9328:	f001 bc9c 	b.w	ac64 <dw1000_calc_rssi>

0000932c <uwb_dw1000_calc_rssi>:
    return dw1000_calc_rssi((dw1000_dev_instance_t *)dev, (struct _dw1000_dev_rxdiag_t*)diag);
    932c:	f001 bc9a 	b.w	ac64 <dw1000_calc_rssi>

00009330 <uwb_dw1000_get_fppl>:
    return dw1000_get_fppl((dw1000_dev_instance_t *)dev);
    9330:	f001 bc8a 	b.w	ac48 <dw1000_get_fppl>

00009334 <uwb_dw1000_get_rssi>:
    return dw1000_get_rssi((dw1000_dev_instance_t *)dev);
    9334:	f001 bcc4 	b.w	acc0 <dw1000_get_rssi>

00009338 <uwb_dw1000_set_on_error_continue>:
    return dw1000_set_on_error_continue((dw1000_dev_instance_t *)dev, enable);
    9338:	f000 beb9 	b.w	a0ae <dw1000_set_on_error_continue>

0000933c <uwb_dw1000_phy_repeated_frames>:
    return dw1000_phy_repeated_frames((dw1000_dev_instance_t *)dev, rate);
    933c:	f002 bc8a 	b.w	bc54 <dw1000_phy_repeated_frames>

00009340 <uwb_dw1000_phy_rx_reset>:
    return dw1000_phy_rx_reset((dw1000_dev_instance_t *)dev);
    9340:	f002 bb9f 	b.w	ba82 <dw1000_phy_rx_reset>

00009344 <uwb_dw1000_phy_forcetrxoff>:
    return dw1000_phy_forcetrxoff((dw1000_dev_instance_t *)dev);
    9344:	f002 bbd4 	b.w	baf0 <dw1000_phy_forcetrxoff>

00009348 <uwb_dw1000_phy_data_duration>:
    return dw1000_phy_data_duration(&dev->attrib, nlen);
    9348:	f200 5034 	addw	r0, r0, #1332	; 0x534
    934c:	f002 bd3a 	b.w	bdc4 <dw1000_phy_data_duration>

00009350 <uwb_dw1000_phy_SHR_duration>:
    return dw1000_phy_SHR_duration(&dev->attrib);
    9350:	f200 5034 	addw	r0, r0, #1332	; 0x534
    9354:	f002 bd22 	b.w	bd9c <dw1000_phy_SHR_duration>

00009358 <uwb_dw1000_phy_frame_duration>:
    return dw1000_phy_frame_duration(&dev->attrib, nlen);
    9358:	f200 5034 	addw	r0, r0, #1332	; 0x534
    935c:	f002 bd56 	b.w	be0c <dw1000_phy_frame_duration>

00009360 <uwb_dw1000_read_txtime_lo32>:
    return dw1000_read_txtime_lo((dw1000_dev_instance_t *)dev);
    9360:	f002 b95a 	b.w	b618 <dw1000_read_txtime_lo>

00009364 <uwb_dw1000_read_txtime>:
    return dw1000_read_txtime((dw1000_dev_instance_t *)dev);
    9364:	f001 bcfc 	b.w	ad60 <dw1000_read_txtime>

00009368 <uwb_dw1000_read_rxtime_lo32>:
    return dw1000_read_rxtime_lo((dw1000_dev_instance_t *)dev);
    9368:	f001 bcf3 	b.w	ad52 <dw1000_read_rxtime_lo>

0000936c <uwb_dw1000_read_rxtime>:
    return dw1000_read_rxtime((dw1000_dev_instance_t *)dev);
    936c:	f001 bce9 	b.w	ad42 <dw1000_read_rxtime>

00009370 <uwb_dw1000_read_systime_lo32>:
    return dw1000_read_systime_lo((dw1000_dev_instance_t *)dev);
    9370:	f001 bce0 	b.w	ad34 <dw1000_read_systime_lo>

00009374 <uwb_dw1000_read_systime>:
    return dw1000_read_systime((dw1000_dev_instance_t *)dev);
    9374:	f001 bcd6 	b.w	ad24 <dw1000_read_systime>

00009378 <uwb_dw1000_set_rxauto_disable>:
    return dw1000_set_rxauto_disable((dw1000_dev_instance_t *)dev, disable);
    9378:	f000 bea2 	b.w	a0c0 <dw1000_set_rxauto_disable>

0000937c <uwb_dw1000_set_wait4resp_delay>:
    return dw1000_set_wait4resp_delay((dw1000_dev_instance_t *)dev, delay);
    937c:	f001 b8bc 	b.w	a4f8 <dw1000_set_wait4resp_delay>

00009380 <uwb_dw1000_set_wait4resp>:
    return dw1000_set_wait4resp((dw1000_dev_instance_t *)dev, enable);
    9380:	f000 be86 	b.w	a090 <dw1000_set_wait4resp>

00009384 <uwb_dw1000_tx_wait>:
    return dw1000_tx_wait((dw1000_dev_instance_t *)dev, timeout);
    9384:	f000 bde7 	b.w	9f56 <dw1000_tx_wait>

00009388 <uwb_dw1000_write_tx_fctrl>:
    dw1000_write_tx_fctrl((dw1000_dev_instance_t *)dev, tx_frame_length,
    9388:	f000 bd1f 	b.w	9dca <dw1000_write_tx_fctrl>

0000938c <uwb_dw1000_write_tx>:
    return dw1000_write_tx((dw1000_dev_instance_t *)dev, tx_frame_bytes,
    938c:	f000 bcd7 	b.w	9d3e <dw1000_write_tx>

00009390 <uwb_dw1000_stop_rx>:
    return dw1000_stop_rx((dw1000_dev_instance_t *)dev);
    9390:	f000 be26 	b.w	9fe0 <dw1000_stop_rx>

00009394 <uwb_dw1000_start_rx>:
    return dw1000_start_rx((dw1000_dev_instance_t *)dev);
    9394:	f000 bf76 	b.w	a284 <dw1000_start_rx>

00009398 <uwb_dw1000_start_tx>:
    return dw1000_start_tx((dw1000_dev_instance_t *)dev);
    9398:	f000 bd5d 	b.w	9e56 <dw1000_start_tx>

0000939c <uwb_dw1000_set_delay_start>:
    return dw1000_set_delay_start((dw1000_dev_instance_t *)dev, dx_time);
    939c:	f000 bde6 	b.w	9f6c <dw1000_set_delay_start>

000093a0 <uwb_dw1000_set_abs_timeout>:
    return dw1000_set_abs_timeout((dw1000_dev_instance_t *)dev, rx_end);
    93a0:	f000 bf40 	b.w	a224 <dw1000_set_abs_timeout>

000093a4 <uwb_dw1000_set_rx_window>:
    return dw1000_set_rx_window((dw1000_dev_instance_t *)dev, rx_start, rx_end);
    93a4:	f000 bf12 	b.w	a1cc <dw1000_set_rx_window>

000093a8 <uwb_dw1000_adj_rx_timeout>:
    return dw1000_adj_rx_timeout((dw1000_dev_instance_t *)dev, timeout);
    93a8:	b289      	uxth	r1, r1
    93aa:	f000 be92 	b.w	a0d2 <dw1000_adj_rx_timeout>

000093ae <uwb_dw1000_set_rx_timeout>:
    return dw1000_set_rx_timeout((dw1000_dev_instance_t *)dev, timeout);
    93ae:	b289      	uxth	r1, r1
    93b0:	f000 beb7 	b.w	a122 <dw1000_set_rx_timeout>

000093b4 <uwb_dw1000_set_dblrxbuf>:
    return dw1000_set_dblrxbuff((dw1000_dev_instance_t *)dev, enable);
    93b4:	f001 b8e2 	b.w	a57c <dw1000_set_dblrxbuff>

000093b8 <uwb_dw1000_txrf_power_value>:
    return dw1000_phy_txrf_power_value((dw1000_dev_instance_t *)dev, reg, coarse, fine);
    93b8:	f002 bd36 	b.w	be28 <dw1000_phy_txrf_power_value>

000093bc <uwb_dw1000_txrf_config>:
    dw1000_phy_config_txrf((dw1000_dev_instance_t *)dev, config);
    93bc:	f002 ba63 	b.w	b886 <dw1000_phy_config_txrf>

000093c0 <uwb_dw1000_mac_config>:
    return dw1000_mac_config((dw1000_dev_instance_t *)dev, config);
    93c0:	f001 b922 	b.w	a608 <dw1000_mac_config>
    93c4:	0000      	movs	r0, r0
	...

000093c8 <uwb_dw1000_calc_clock_offset_ratio>:
    if (type == UWB_CR_CARRIER_INTEGRATOR) {
    93c8:	b90a      	cbnz	r2, 93ce <uwb_dw1000_calc_clock_offset_ratio+0x6>
        return dw1000_calc_clock_offset_ratio((dw1000_dev_instance_t *)dev, val);
    93ca:	f001 badd 	b.w	a988 <dw1000_calc_clock_offset_ratio>
    } else if (type == UWB_CR_RXTTCKO) {
    93ce:	2a01      	cmp	r2, #1
    93d0:	d101      	bne.n	93d6 <uwb_dw1000_calc_clock_offset_ratio+0xe>
        return dw1000_calc_clock_offset_ratio_ttco((dw1000_dev_instance_t *)dev, val);
    93d2:	f001 bb4c 	b.w	aa6e <dw1000_calc_clock_offset_ratio_ttco>
}
    93d6:	ed9f 0b02 	vldr	d0, [pc, #8]	; 93e0 <uwb_dw1000_calc_clock_offset_ratio+0x18>
    93da:	4770      	bx	lr
    93dc:	f3af 8000 	nop.w
	...

000093e8 <dw1000_read>:
{
    93e8:	b5f0      	push	{r4, r5, r6, r7, lr}
        .subindex = subaddress != 0,
    93ea:	1e17      	subs	r7, r2, #0
{
    93ec:	b085      	sub	sp, #20
        .subindex = subaddress != 0,
    93ee:	bf18      	it	ne
    93f0:	2701      	movne	r7, #1
    dw1000_cmd_t cmd = {
    93f2:	f001 043f 	and.w	r4, r1, #63	; 0x3f
        .extended = subaddress > 0x7F,
    93f6:	2a7f      	cmp	r2, #127	; 0x7f
        .subindex = subaddress != 0,
    93f8:	4615      	mov	r5, r2
        [0] = cmd.operation << 7 | cmd.subindex << 6 | cmd.reg,
    93fa:	ea44 1c87 	orr.w	ip, r4, r7, lsl #6
        .extended = subaddress > 0x7F,
    93fe:	bf94      	ite	ls
    9400:	2200      	movls	r2, #0
    9402:	2201      	movhi	r2, #1
    uint8_t header[] = {
    9404:	f88d c00c 	strb.w	ip, [sp, #12]
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
    9408:	ea44 1487 	orr.w	r4, r4, r7, lsl #6
        [1] = cmd.extended << 7 | (uint8_t) (subaddress),
    940c:	ea45 1cc2 	orr.w	ip, r5, r2, lsl #7
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
    9410:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
    uint8_t header[] = {
    9414:	f88d c00d 	strb.w	ip, [sp, #13]
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
    9418:	f3c5 020e 	ubfx	r2, r5, #0, #15
        [2] = (uint8_t) (subaddress >> 7)
    941c:	ea4f 1cd5 	mov.w	ip, r5, lsr #7
{
    9420:	4606      	mov	r6, r0
        [2] = (uint8_t) (subaddress >> 7)
    9422:	f88d c00e 	strb.w	ip, [sp, #14]
{
    9426:	f8bd 0028 	ldrh.w	r0, [sp, #40]	; 0x28
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
    942a:	ea44 2442 	orr.w	r4, r4, r2, lsl #9
    942e:	b152      	cbz	r2, 9446 <dw1000_read+0x5e>
    9430:	f3c4 2400 	ubfx	r4, r4, #8, #1
    9434:	1ca2      	adds	r2, r4, #2
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
    9436:	293f      	cmp	r1, #63	; 0x3f
    9438:	d907      	bls.n	944a <dw1000_read+0x62>
    943a:	2300      	movs	r3, #0
    943c:	461a      	mov	r2, r3
    943e:	4619      	mov	r1, r3
    9440:	4618      	mov	r0, r3
    9442:	f003 f9db 	bl	c7fc <__assert_func>
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
    9446:	2201      	movs	r2, #1
    9448:	e7f5      	b.n	9436 <dw1000_read+0x4e>
    assert((subaddress <= 0x7FFF) && ((subaddress + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
    944a:	042c      	lsls	r4, r5, #16
    944c:	d4f5      	bmi.n	943a <dw1000_read+0x52>
    944e:	4405      	add	r5, r0
    9450:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    9454:	daf1      	bge.n	943a <dw1000_read+0x52>
    if (length < MYNEWT_VAL(DW1000_DEVICE_SPI_RD_MAX_NOBLOCK) ||
    9456:	2808      	cmp	r0, #8
    9458:	d903      	bls.n	9462 <dw1000_read+0x7a>
    945a:	f896 152e 	ldrb.w	r1, [r6, #1326]	; 0x52e
    945e:	07c9      	lsls	r1, r1, #31
    9460:	d508      	bpl.n	9474 <dw1000_read+0x8c>
        hal_dw1000_read(inst, header, len, buffer, length);
    9462:	9000      	str	r0, [sp, #0]
    9464:	a903      	add	r1, sp, #12
    9466:	4630      	mov	r0, r6
    9468:	f7ff fc78 	bl	8d5c <hal_dw1000_read>
}
    946c:	f8d6 0508 	ldr.w	r0, [r6, #1288]	; 0x508
    9470:	b005      	add	sp, #20
    9472:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hal_dw1000_read_noblock(inst, header, len, buffer, length);
    9474:	9000      	str	r0, [sp, #0]
    9476:	a903      	add	r1, sp, #12
    9478:	4630      	mov	r0, r6
    947a:	f7ff fcc5 	bl	8e08 <hal_dw1000_read_noblock>
    947e:	e7f5      	b.n	946c <dw1000_read+0x84>

00009480 <dw1000_write>:
{
    9480:	b5f0      	push	{r4, r5, r6, r7, lr}
        .subindex = subaddress != 0,
    9482:	f1b2 0c00 	subs.w	ip, r2, #0
    9486:	bf18      	it	ne
    9488:	f04f 0c01 	movne.w	ip, #1
    dw1000_cmd_t cmd = {
    948c:	f001 043f 	and.w	r4, r1, #63	; 0x3f
{
    9490:	b085      	sub	sp, #20
        .extended = subaddress > 0x7F,
    9492:	2a7f      	cmp	r2, #127	; 0x7f
        [0] = cmd.operation << 7 | cmd.subindex << 6 | cmd.reg,
    9494:	ea44 178c 	orr.w	r7, r4, ip, lsl #6
    9498:	f067 077f 	orn	r7, r7, #127	; 0x7f
{
    949c:	4605      	mov	r5, r0
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
    949e:	f044 0480 	orr.w	r4, r4, #128	; 0x80
        .subindex = subaddress != 0,
    94a2:	4610      	mov	r0, r2
        .extended = subaddress > 0x7F,
    94a4:	bf94      	ite	ls
    94a6:	2200      	movls	r2, #0
    94a8:	2201      	movhi	r2, #1
    uint8_t header[] = {
    94aa:	f88d 700c 	strb.w	r7, [sp, #12]
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
    94ae:	ea44 148c 	orr.w	r4, r4, ip, lsl #6
        [1] = cmd.extended << 7 | (uint8_t) (subaddress),
    94b2:	ea40 17c2 	orr.w	r7, r0, r2, lsl #7
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
    94b6:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
    uint8_t header[] = {
    94ba:	f88d 700d 	strb.w	r7, [sp, #13]
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
    94be:	f3c0 020e 	ubfx	r2, r0, #0, #15
        [2] = (uint8_t) (subaddress >> 7)
    94c2:	09c7      	lsrs	r7, r0, #7
{
    94c4:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
        [2] = (uint8_t) (subaddress >> 7)
    94c8:	f88d 700e 	strb.w	r7, [sp, #14]
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
    94cc:	ea44 2442 	orr.w	r4, r4, r2, lsl #9
    94d0:	b152      	cbz	r2, 94e8 <dw1000_write+0x68>
    94d2:	f3c4 2400 	ubfx	r4, r4, #8, #1
    94d6:	1ca2      	adds	r2, r4, #2
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
    94d8:	293f      	cmp	r1, #63	; 0x3f
    94da:	d907      	bls.n	94ec <dw1000_write+0x6c>
    94dc:	2300      	movs	r3, #0
    94de:	461a      	mov	r2, r3
    94e0:	4619      	mov	r1, r3
    94e2:	4618      	mov	r0, r3
    94e4:	f003 f98a 	bl	c7fc <__assert_func>
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
    94e8:	2201      	movs	r2, #1
    94ea:	e7f5      	b.n	94d8 <dw1000_write+0x58>
    assert((subaddress <= 0x7FFF) && ((subaddress + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
    94ec:	0404      	lsls	r4, r0, #16
    94ee:	d4f5      	bmi.n	94dc <dw1000_write+0x5c>
    94f0:	4430      	add	r0, r6
    94f2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    94f6:	daf1      	bge.n	94dc <dw1000_write+0x5c>
    if (len+length < MYNEWT_VAL(DW1000_DEVICE_SPI_RD_MAX_NOBLOCK) ||
    94f8:	1991      	adds	r1, r2, r6
    94fa:	2908      	cmp	r1, #8
    94fc:	dd03      	ble.n	9506 <dw1000_write+0x86>
    94fe:	f895 152e 	ldrb.w	r1, [r5, #1326]	; 0x52e
    9502:	07c9      	lsls	r1, r1, #31
    9504:	d508      	bpl.n	9518 <dw1000_write+0x98>
        hal_dw1000_write(inst, header, len, buffer, length);
    9506:	9600      	str	r6, [sp, #0]
    9508:	a903      	add	r1, sp, #12
    950a:	4628      	mov	r0, r5
    950c:	f7ff fd6c 	bl	8fe8 <hal_dw1000_write>
}
    9510:	f8d5 0508 	ldr.w	r0, [r5, #1288]	; 0x508
    9514:	b005      	add	sp, #20
    9516:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hal_dw1000_write_noblock(inst, header, len, buffer, length);
    9518:	9600      	str	r6, [sp, #0]
    951a:	a903      	add	r1, sp, #12
    951c:	4628      	mov	r0, r5
    951e:	f7ff fda9 	bl	9074 <hal_dw1000_write_noblock>
    9522:	e7f5      	b.n	9510 <dw1000_write+0x90>

00009524 <dw1000_read_reg>:
{
    9524:	b5f0      	push	{r4, r5, r6, r7, lr}
        .subindex = subaddress != 0,
    9526:	1e16      	subs	r6, r2, #0
{
    9528:	b087      	sub	sp, #28
    } __attribute__((__packed__, aligned (8))) buffer = {0};
    952a:	f04f 0400 	mov.w	r4, #0
    952e:	f04f 0500 	mov.w	r5, #0
        .subindex = subaddress != 0,
    9532:	bf18      	it	ne
    9534:	2601      	movne	r6, #1
    } __attribute__((__packed__, aligned (8))) buffer = {0};
    9536:	e9cd 4504 	strd	r4, r5, [sp, #16]
        .extended = subaddress > 0x7F,
    953a:	2a7f      	cmp	r2, #127	; 0x7f
    dw1000_cmd_t cmd = {
    953c:	f001 043f 	and.w	r4, r1, #63	; 0x3f
        .subindex = subaddress != 0,
    9540:	4615      	mov	r5, r2
        [0] = cmd.operation << 7 | cmd.subindex << 6 | cmd.reg,
    9542:	ea44 1786 	orr.w	r7, r4, r6, lsl #6
        .extended = subaddress > 0x7F,
    9546:	bf94      	ite	ls
    9548:	2200      	movls	r2, #0
    954a:	2201      	movhi	r2, #1
    uint8_t header[] = {
    954c:	f88d 700c 	strb.w	r7, [sp, #12]
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
    9550:	ea44 1486 	orr.w	r4, r4, r6, lsl #6
        [1] = cmd.extended << 7 | (uint8_t) (subaddress),
    9554:	ea45 17c2 	orr.w	r7, r5, r2, lsl #7
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
    9558:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
    uint8_t header[] = {
    955c:	f88d 700d 	strb.w	r7, [sp, #13]
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
    9560:	f3c5 020e 	ubfx	r2, r5, #0, #15
        [2] = (uint8_t) (subaddress >> 7)
    9564:	09ef      	lsrs	r7, r5, #7
    9566:	f88d 700e 	strb.w	r7, [sp, #14]
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
    956a:	ea44 2442 	orr.w	r4, r4, r2, lsl #9
    956e:	b152      	cbz	r2, 9586 <dw1000_read_reg+0x62>
    9570:	f3c4 2400 	ubfx	r4, r4, #8, #1
    9574:	1ca2      	adds	r2, r4, #2
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
    9576:	293f      	cmp	r1, #63	; 0x3f
    9578:	d907      	bls.n	958a <dw1000_read_reg+0x66>
    957a:	2300      	movs	r3, #0
    957c:	461a      	mov	r2, r3
    957e:	4619      	mov	r1, r3
    9580:	4618      	mov	r0, r3
    9582:	f003 f93b 	bl	c7fc <__assert_func>
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
    9586:	2201      	movs	r2, #1
    9588:	e7f5      	b.n	9576 <dw1000_read_reg+0x52>
    assert((subaddress <= 0x7FFF) && ((subaddress + nbytes) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
    958a:	0429      	lsls	r1, r5, #16
    958c:	d4f5      	bmi.n	957a <dw1000_read_reg+0x56>
    958e:	441d      	add	r5, r3
    9590:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    9594:	d2f1      	bcs.n	957a <dw1000_read_reg+0x56>
    assert(nbytes <= sizeof(uint64_t));
    9596:	2b08      	cmp	r3, #8
    9598:	d8ef      	bhi.n	957a <dw1000_read_reg+0x56>
        hal_dw1000_read_noblock(inst, header, len, buffer.array, nbytes);
    959a:	b299      	uxth	r1, r3
    if (len+nbytes < MYNEWT_VAL(DW1000_DEVICE_SPI_RD_MAX_NOBLOCK) ||
    959c:	4413      	add	r3, r2
    959e:	2b08      	cmp	r3, #8
    95a0:	d903      	bls.n	95aa <dw1000_read_reg+0x86>
    95a2:	f890 352e 	ldrb.w	r3, [r0, #1326]	; 0x52e
    95a6:	07db      	lsls	r3, r3, #31
    95a8:	d508      	bpl.n	95bc <dw1000_read_reg+0x98>
        hal_dw1000_read(inst, header, len, buffer.array, nbytes);
    95aa:	9100      	str	r1, [sp, #0]
    95ac:	ab04      	add	r3, sp, #16
    95ae:	a903      	add	r1, sp, #12
    95b0:	f7ff fbd4 	bl	8d5c <hal_dw1000_read>
}
    95b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    95b8:	b007      	add	sp, #28
    95ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hal_dw1000_read_noblock(inst, header, len, buffer.array, nbytes);
    95bc:	9100      	str	r1, [sp, #0]
    95be:	ab04      	add	r3, sp, #16
    95c0:	a903      	add	r1, sp, #12
    95c2:	f7ff fc21 	bl	8e08 <hal_dw1000_read_noblock>
    95c6:	e7f5      	b.n	95b4 <dw1000_read_reg+0x90>

000095c8 <dw1000_write_reg>:
{
    95c8:	b5f0      	push	{r4, r5, r6, r7, lr}
        .subindex = subaddress != 0,
    95ca:	1e17      	subs	r7, r2, #0
    95cc:	bf18      	it	ne
    95ce:	2701      	movne	r7, #1
    dw1000_cmd_t cmd = {
    95d0:	f001 033f 	and.w	r3, r1, #63	; 0x3f
{
    95d4:	b087      	sub	sp, #28
        .extended = subaddress > 0x7F,
    95d6:	2a7f      	cmp	r2, #127	; 0x7f
        [0] = cmd.operation << 7 | cmd.subindex << 6 | cmd.reg,
    95d8:	ea43 1687 	orr.w	r6, r3, r7, lsl #6
    95dc:	f066 067f 	orn	r6, r6, #127	; 0x7f
{
    95e0:	4604      	mov	r4, r0
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
    95e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        .subindex = subaddress != 0,
    95e6:	4610      	mov	r0, r2
        .extended = subaddress > 0x7F,
    95e8:	bf94      	ite	ls
    95ea:	2200      	movls	r2, #0
    95ec:	2201      	movhi	r2, #1
    uint8_t header[] = {
    95ee:	f88d 600c 	strb.w	r6, [sp, #12]
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
    95f2:	ea43 1387 	orr.w	r3, r3, r7, lsl #6
        [1] = cmd.extended << 7 | (uint8_t) (subaddress),
    95f6:	ea40 16c2 	orr.w	r6, r0, r2, lsl #7
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
    95fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    uint8_t header[] = {
    95fe:	f88d 600d 	strb.w	r6, [sp, #13]
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
    9602:	f3c0 020e 	ubfx	r2, r0, #0, #15
        [2] = (uint8_t) (subaddress >> 7)
    9606:	09c6      	lsrs	r6, r0, #7
{
    9608:	9d0e      	ldr	r5, [sp, #56]	; 0x38
        [2] = (uint8_t) (subaddress >> 7)
    960a:	f88d 600e 	strb.w	r6, [sp, #14]
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
    960e:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    9612:	b172      	cbz	r2, 9632 <dw1000_write_reg+0x6a>
    9614:	f3c3 2300 	ubfx	r3, r3, #8, #1
    9618:	1c9a      	adds	r2, r3, #2
    buffer.value = val;
    961a:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
    assert(nbytes <= sizeof(uint64_t));
    961e:	2d08      	cmp	r5, #8
    buffer.value = val;
    9620:	e9cd 6704 	strd	r6, r7, [sp, #16]
    assert(nbytes <= sizeof(uint64_t));
    9624:	d907      	bls.n	9636 <dw1000_write_reg+0x6e>
    9626:	2300      	movs	r3, #0
    9628:	461a      	mov	r2, r3
    962a:	4619      	mov	r1, r3
    962c:	4618      	mov	r0, r3
    962e:	f003 f8e5 	bl	c7fc <__assert_func>
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
    9632:	2201      	movs	r2, #1
    9634:	e7f1      	b.n	961a <dw1000_write_reg+0x52>
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
    9636:	293f      	cmp	r1, #63	; 0x3f
    9638:	d8f5      	bhi.n	9626 <dw1000_write_reg+0x5e>
    assert((subaddress <= 0x7FFF) && ((subaddress + nbytes) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
    963a:	0406      	lsls	r6, r0, #16
    963c:	d4f3      	bmi.n	9626 <dw1000_write_reg+0x5e>
    963e:	4428      	add	r0, r5
    9640:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    9644:	d2ef      	bcs.n	9626 <dw1000_write_reg+0x5e>
        hal_dw1000_write_noblock(inst, header, len, buffer.array, nbytes);
    9646:	b2ab      	uxth	r3, r5
    if (len+nbytes < MYNEWT_VAL(DW1000_DEVICE_SPI_RD_MAX_NOBLOCK) ||
    9648:	4415      	add	r5, r2
    964a:	2d08      	cmp	r5, #8
    964c:	d903      	bls.n	9656 <dw1000_write_reg+0x8e>
    964e:	f894 152e 	ldrb.w	r1, [r4, #1326]	; 0x52e
    9652:	07c9      	lsls	r1, r1, #31
    9654:	d507      	bpl.n	9666 <dw1000_write_reg+0x9e>
        hal_dw1000_write(inst, header, len, buffer.array, nbytes);
    9656:	9300      	str	r3, [sp, #0]
    9658:	a903      	add	r1, sp, #12
    965a:	ab04      	add	r3, sp, #16
    965c:	4620      	mov	r0, r4
    965e:	f7ff fcc3 	bl	8fe8 <hal_dw1000_write>
}
    9662:	b007      	add	sp, #28
    9664:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hal_dw1000_write_noblock(inst, header, len, buffer.array, nbytes);
    9666:	9300      	str	r3, [sp, #0]
    9668:	a903      	add	r1, sp, #12
    966a:	ab04      	add	r3, sp, #16
    966c:	4620      	mov	r0, r4
    966e:	f7ff fd01 	bl	9074 <hal_dw1000_write_noblock>
        hal_dw1000_rw_noblock_wait(inst, DPL_TIMEOUT_NEVER);
    9672:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9676:	4620      	mov	r0, r4
    9678:	f7ff fdba 	bl	91f0 <hal_dw1000_rw_noblock_wait>
}
    967c:	e7f1      	b.n	9662 <dw1000_write_reg+0x9a>

0000967e <uwb_dw1000_set_euid>:
{
    967e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return dw1000_set_eui((dw1000_dev_instance_t *)dev, euid);
    9680:	2108      	movs	r1, #8
    9682:	e9cd 2300 	strd	r2, r3, [sp]
    9686:	9102      	str	r1, [sp, #8]
    9688:	2200      	movs	r2, #0
    968a:	2101      	movs	r1, #1
    968c:	f7ff ff9c 	bl	95c8 <dw1000_write_reg>
}
    9690:	b005      	add	sp, #20
    9692:	f85d fb04 	ldr.w	pc, [sp], #4

00009696 <uwb_dw1000_set_uid>:
{
    9696:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return dw1000_set_address16((dw1000_dev_instance_t *)dev, uid);
    9698:	2302      	movs	r3, #2
    969a:	2200      	movs	r2, #0
    969c:	e9cd 1200 	strd	r1, r2, [sp]
    96a0:	9302      	str	r3, [sp, #8]
    96a2:	2103      	movs	r1, #3
    96a4:	f7ff ff90 	bl	95c8 <dw1000_write_reg>
}
    96a8:	b005      	add	sp, #20
    96aa:	f85d fb04 	ldr.w	pc, [sp], #4

000096ae <uwb_dw1000_set_panid>:
{
    96ae:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return dw1000_set_panid((dw1000_dev_instance_t *)dev, pan_id);
    96b0:	2202      	movs	r2, #2
    96b2:	2300      	movs	r3, #0
    96b4:	9100      	str	r1, [sp, #0]
    96b6:	9202      	str	r2, [sp, #8]
    96b8:	9301      	str	r3, [sp, #4]
    96ba:	2103      	movs	r1, #3
    96bc:	f7ff ff84 	bl	95c8 <dw1000_write_reg>
}
    96c0:	b005      	add	sp, #20
    96c2:	f85d fb04 	ldr.w	pc, [sp], #4

000096c6 <dw1000_softreset>:
{
    96c6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    96ca:	4604      	mov	r4, r0
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE, sizeof(uint16_t)); // Disable PMSC ctrl of RF and RX clk blocks
    96cc:	2600      	movs	r6, #0
    96ce:	2700      	movs	r7, #0
    96d0:	f04f 0802 	mov.w	r8, #2
    dw1000_phy_sysclk_XTAL(inst);
    96d4:	f002 f836 	bl	b744 <dw1000_phy_sysclk_XTAL>
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE, sizeof(uint16_t)); // Disable PMSC ctrl of RF and RX clk blocks
    96d8:	4620      	mov	r0, r4
    96da:	e9cd 6700 	strd	r6, r7, [sp]
    96de:	f8cd 8008 	str.w	r8, [sp, #8]
    96e2:	2204      	movs	r2, #4
    96e4:	2136      	movs	r1, #54	; 0x36
    96e6:	f7ff ff6f 	bl	95c8 <dw1000_write_reg>
    dw1000_write_reg(inst, AON_ID, AON_CFG0_OFFSET, 0x0, sizeof(uint8_t));  // Clear the wake-up configuration
    96ea:	2501      	movs	r5, #1
    dw1000_write_reg(inst, AON_ID, AON_WCFG_OFFSET, 0x0, sizeof(uint16_t)); // Clear any AON auto download bits (as reset will trigger AON download)
    96ec:	4620      	mov	r0, r4
    96ee:	e9cd 6700 	strd	r6, r7, [sp]
    96f2:	f8cd 8008 	str.w	r8, [sp, #8]
    96f6:	2200      	movs	r2, #0
    96f8:	212c      	movs	r1, #44	; 0x2c
    96fa:	f7ff ff65 	bl	95c8 <dw1000_write_reg>
    dw1000_write_reg(inst, AON_ID, AON_CFG0_OFFSET, 0x0, sizeof(uint8_t));  // Clear the wake-up configuration
    96fe:	4620      	mov	r0, r4
    9700:	e9cd 6700 	strd	r6, r7, [sp]
    9704:	9502      	str	r5, [sp, #8]
    9706:	2206      	movs	r2, #6
    9708:	212c      	movs	r1, #44	; 0x2c
    970a:	f7ff ff5d 	bl	95c8 <dw1000_write_reg>
    dw1000_write_reg(inst, AON_ID, AON_CTRL_OFFSET, 0x0, sizeof(uint8_t)); // Clear the register
    970e:	4642      	mov	r2, r8
    9710:	4620      	mov	r0, r4
    9712:	e9cd 6700 	strd	r6, r7, [sp]
    9716:	9502      	str	r5, [sp, #8]
    9718:	212c      	movs	r1, #44	; 0x2c
    971a:	f7ff ff55 	bl	95c8 <dw1000_write_reg>
    dw1000_write_reg(inst, AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE, sizeof(uint8_t));
    971e:	2300      	movs	r3, #0
    9720:	2202      	movs	r2, #2
    9722:	e9cd 2300 	strd	r2, r3, [sp]
    9726:	4620      	mov	r0, r4
    9728:	4642      	mov	r2, r8
    972a:	9502      	str	r5, [sp, #8]
    972c:	212c      	movs	r1, #44	; 0x2c
    972e:	f7ff ff4b 	bl	95c8 <dw1000_write_reg>
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL, sizeof(uint8_t));// Reset HIF, TX, RX and PMSC
    9732:	2203      	movs	r2, #3
    9734:	2136      	movs	r1, #54	; 0x36
    9736:	4620      	mov	r0, r4
    9738:	e9cd 6700 	strd	r6, r7, [sp]
    973c:	9502      	str	r5, [sp, #8]
    973e:	f7ff ff43 	bl	95c8 <dw1000_write_reg>
    dpl_cputime_delay_usecs(10);
    9742:	200a      	movs	r0, #10
    9744:	f007 f904 	bl	10950 <dpl_cputime_delay_usecs>
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR, sizeof(uint8_t)); // Clear reset
    9748:	2300      	movs	r3, #0
    974a:	22f0      	movs	r2, #240	; 0xf0
    974c:	e9cd 2300 	strd	r2, r3, [sp]
    9750:	9502      	str	r5, [sp, #8]
    9752:	2203      	movs	r2, #3
    9754:	2136      	movs	r1, #54	; 0x36
    9756:	4620      	mov	r0, r4
    9758:	f7ff ff36 	bl	95c8 <dw1000_write_reg>
}
    975c:	b004      	add	sp, #16
    975e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009762 <dw1000_dev_configure_sleep>:
{
    9762:	b530      	push	{r4, r5, lr}
    uint16_t reg = dw1000_read_reg(inst, AON_ID, AON_WCFG_OFFSET, sizeof(uint16_t));
    9764:	2302      	movs	r3, #2
{
    9766:	b085      	sub	sp, #20
    9768:	4604      	mov	r4, r0
    uint16_t reg = dw1000_read_reg(inst, AON_ID, AON_WCFG_OFFSET, sizeof(uint16_t));
    976a:	2200      	movs	r2, #0
    976c:	212c      	movs	r1, #44	; 0x2c
    976e:	f7ff fed9 	bl	9524 <dw1000_read_reg>
    if (inst->uwb_dev.status.LDE_enabled)
    9772:	f894 2509 	ldrb.w	r2, [r4, #1289]	; 0x509
    uint16_t reg = dw1000_read_reg(inst, AON_ID, AON_WCFG_OFFSET, sizeof(uint16_t));
    9776:	b283      	uxth	r3, r0
    if (inst->uwb_dev.status.LDE_enabled)
    9778:	06d0      	lsls	r0, r2, #27
        reg |= AON_WCFG_ONW_LLDE;
    977a:	bf5a      	itte	pl
    977c:	f423 6300 	bicpl.w	r3, r3, #2048	; 0x800
        reg &= ~AON_WCFG_ONW_LLDE;
    9780:	f043 03c0 	orrpl.w	r3, r3, #192	; 0xc0
        reg |= AON_WCFG_ONW_LLDE;
    9784:	f443 630c 	orrmi.w	r3, r3, #2240	; 0x8c0
    if (inst->uwb_dev.status.LDO_enabled)
    9788:	0691      	lsls	r1, r2, #26
    if (inst->uwb_dev.config.wakeup_rx_enable)
    978a:	f894 252d 	ldrb.w	r2, [r4, #1325]	; 0x52d
        reg &= ~AON_WCFG_ONW_LLDO;
    978e:	bf5a      	itte	pl
    9790:	f423 5380 	bicpl.w	r3, r3, #4096	; 0x1000
    9794:	b29b      	uxthpl	r3, r3
        reg |= AON_WCFG_ONW_LLDO;
    9796:	f443 5380 	orrmi.w	r3, r3, #4096	; 0x1000
    if (inst->uwb_dev.config.wakeup_rx_enable)
    979a:	06d2      	lsls	r2, r2, #27
        reg &= ~AON_WCFG_ONW_RX;
    979c:	bf56      	itet	pl
    979e:	f023 0302 	bicpl.w	r3, r3, #2
        reg |= AON_WCFG_ONW_RX;
    97a2:	f043 0302 	orrmi.w	r3, r3, #2
        reg &= ~AON_WCFG_ONW_RX;
    97a6:	b29b      	uxthpl	r3, r3
    dw1000_write_reg(inst, AON_ID, AON_WCFG_OFFSET, reg, sizeof(uint16_t));
    97a8:	2502      	movs	r5, #2
    97aa:	2200      	movs	r2, #0
    97ac:	e9cd 3200 	strd	r3, r2, [sp]
    97b0:	4620      	mov	r0, r4
    97b2:	9502      	str	r5, [sp, #8]
    97b4:	212c      	movs	r1, #44	; 0x2c
    97b6:	f7ff ff07 	bl	95c8 <dw1000_write_reg>
    reg = dw1000_read_reg(inst, AON_ID, AON_CFG0_OFFSET, sizeof(uint16_t));
    97ba:	462b      	mov	r3, r5
    97bc:	2206      	movs	r2, #6
    97be:	4620      	mov	r0, r4
    97c0:	212c      	movs	r1, #44	; 0x2c
    97c2:	f7ff feaf 	bl	9524 <dw1000_read_reg>
    inst->uwb_dev.status.sleep_enabled = inst->uwb_dev.config.sleep_enable;
    97c6:	f894 252d 	ldrb.w	r2, [r4, #1325]	; 0x52d
    97ca:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
    97ce:	f3c2 1240 	ubfx	r2, r2, #5, #1
    97d2:	f362 13c7 	bfi	r3, r2, #7, #1
    reg = dw1000_read_reg(inst, AON_ID, AON_CFG0_OFFSET, sizeof(uint16_t));
    97d6:	b280      	uxth	r0, r0
    inst->uwb_dev.status.sleep_enabled = inst->uwb_dev.config.sleep_enable;
    97d8:	f884 3509 	strb.w	r3, [r4, #1289]	; 0x509
    if (inst->uwb_dev.status.sleep_enabled)
    97dc:	061b      	lsls	r3, r3, #24
        reg |= AON_CFG0_WAKE_CNT | AON_CFG0_SLEEP_EN;
    97de:	bf58      	it	pl
    97e0:	f020 0009 	bicpl.w	r0, r0, #9
    dw1000_write_reg(inst, AON_ID, AON_CFG0_OFFSET, reg, sizeof(uint16_t));
    97e4:	f04f 0302 	mov.w	r3, #2
        reg |= AON_CFG0_WAKE_CNT | AON_CFG0_SLEEP_EN;
    97e8:	bf4c      	ite	mi
    97ea:	f040 000f 	orrmi.w	r0, r0, #15
        reg &= ~(AON_CFG0_WAKE_CNT | AON_CFG0_SLEEP_EN);
    97ee:	f040 0006 	orrpl.w	r0, r0, #6
    dw1000_write_reg(inst, AON_ID, AON_CFG0_OFFSET, reg, sizeof(uint16_t));
    97f2:	9302      	str	r3, [sp, #8]
    97f4:	2300      	movs	r3, #0
    97f6:	9000      	str	r0, [sp, #0]
    97f8:	9301      	str	r3, [sp, #4]
    97fa:	2206      	movs	r2, #6
    97fc:	212c      	movs	r1, #44	; 0x2c
    97fe:	4620      	mov	r0, r4
    9800:	f7ff fee2 	bl	95c8 <dw1000_write_reg>
}
    9804:	b005      	add	sp, #20
    9806:	bd30      	pop	{r4, r5, pc}

00009808 <uwb_dw1000_sleep_config>:
    dw1000_dev_configure_sleep((dw1000_dev_instance_t *)dev);
    9808:	f7ff bfab 	b.w	9762 <dw1000_dev_configure_sleep>

0000980c <dw1000_dev_enter_sleep>:
{
    980c:	b5f0      	push	{r4, r5, r6, r7, lr}
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
    980e:	f500 67ad 	add.w	r7, r0, #1384	; 0x568
    9812:	b085      	sub	sp, #20
    9814:	4604      	mov	r4, r0
    9816:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    981a:	4638      	mov	r0, r7
    981c:	f003 fcf6 	bl	d20c <os_mutex_pend>
    if (err != DPL_OK) {
    9820:	4605      	mov	r5, r0
    9822:	b148      	cbz	r0, 9838 <dw1000_dev_enter_sleep+0x2c>
        inst->uwb_dev.status.mtx_error = 1;
    9824:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
    9828:	f043 0308 	orr.w	r3, r3, #8
    982c:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
    9830:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    9834:	b005      	add	sp, #20
    9836:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dw1000_write_reg(inst, AON_ID, AON_CTRL_OFFSET, 0x0, sizeof(uint16_t));
    9838:	2602      	movs	r6, #2
    983a:	2300      	movs	r3, #0
    983c:	2200      	movs	r2, #0
    983e:	e9cd 2300 	strd	r2, r3, [sp]
    9842:	212c      	movs	r1, #44	; 0x2c
    9844:	4632      	mov	r2, r6
    9846:	4620      	mov	r0, r4
    9848:	9602      	str	r6, [sp, #8]
    984a:	f7ff febd 	bl	95c8 <dw1000_write_reg>
    dw1000_write_reg(inst, AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE, sizeof(uint16_t));
    984e:	2300      	movs	r3, #0
    9850:	2202      	movs	r2, #2
    9852:	e9cd 2300 	strd	r2, r3, [sp]
    9856:	4620      	mov	r0, r4
    9858:	9602      	str	r6, [sp, #8]
    985a:	4632      	mov	r2, r6
    985c:	212c      	movs	r1, #44	; 0x2c
    985e:	f7ff feb3 	bl	95c8 <dw1000_write_reg>
    inst->uwb_dev.status.sleeping = 1;
    9862:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
    9866:	f043 0301 	orr.w	r3, r3, #1
    986a:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
    return (dpl_error_t)os_mutex_release(&mu->mu);
    986e:	4638      	mov	r0, r7
    9870:	f003 fc7a 	bl	d168 <os_mutex_release>
    assert(err == DPL_OK);
    9874:	2800      	cmp	r0, #0
    9876:	d0db      	beq.n	9830 <dw1000_dev_enter_sleep+0x24>
    9878:	462b      	mov	r3, r5
    987a:	462a      	mov	r2, r5
    987c:	4629      	mov	r1, r5
    987e:	4628      	mov	r0, r5
    9880:	f002 ffbc 	bl	c7fc <__assert_func>

00009884 <uwb_dw1000_enter_sleep>:
    return dw1000_dev_enter_sleep((dw1000_dev_instance_t *)dev);
    9884:	f7ff bfc2 	b.w	980c <dw1000_dev_enter_sleep>

00009888 <dw1000_dev_wakeup>:
{
    9888:	b5f0      	push	{r4, r5, r6, r7, lr}
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
    988a:	f500 65ad 	add.w	r5, r0, #1384	; 0x568
    988e:	b085      	sub	sp, #20
    9890:	4604      	mov	r4, r0
    9892:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9896:	4628      	mov	r0, r5
    9898:	f003 fcb8 	bl	d20c <os_mutex_pend>
    if (err != DPL_OK) {
    989c:	4602      	mov	r2, r0
    989e:	b148      	cbz	r0, 98b4 <dw1000_dev_wakeup+0x2c>
        inst->uwb_dev.status.mtx_error = 1;
    98a0:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
    98a4:	f043 0308 	orr.w	r3, r3, #8
    98a8:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
    98ac:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    98b0:	b005      	add	sp, #20
    98b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    inst->uwb_dev.status.sleeping = 0;
    98b4:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
    while (devid != 0xDECA0130 && --timeout)
    98b8:	4f33      	ldr	r7, [pc, #204]	; (9988 <dw1000_dev_wakeup+0x100>)
    inst->uwb_dev.status.sleeping = 0;
    98ba:	f360 0300 	bfi	r3, r0, #0, #1
    98be:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
    devid = dw1000_read_reg(inst, DEV_ID_ID, 0, sizeof(uint32_t));
    98c2:	4601      	mov	r1, r0
    98c4:	2304      	movs	r3, #4
    98c6:	4620      	mov	r0, r4
    98c8:	f7ff fe2c 	bl	9524 <dw1000_read_reg>
    while (devid != 0xDECA0130 && --timeout)
    98cc:	2605      	movs	r6, #5
    98ce:	42b8      	cmp	r0, r7
    98d0:	d001      	beq.n	98d6 <dw1000_dev_wakeup+0x4e>
    98d2:	3e01      	subs	r6, #1
    98d4:	d140      	bne.n	9958 <dw1000_dev_wakeup+0xd0>
    inst->uwb_dev.status.sleeping = (devid != DWT_DEVICE_ID);
    98d6:	1bc0      	subs	r0, r0, r7
    98d8:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
    98dc:	bf18      	it	ne
    98de:	2001      	movne	r0, #1
    98e0:	f360 0300 	bfi	r3, r0, #0, #1
    dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_SLP2INIT, sizeof(uint32_t));
    98e4:	2604      	movs	r6, #4
    inst->uwb_dev.status.sleeping = (devid != DWT_DEVICE_ID);
    98e6:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
    dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_SLP2INIT, sizeof(uint32_t));
    98ea:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    98ee:	2300      	movs	r3, #0
    98f0:	e9cd 2300 	strd	r2, r3, [sp]
    98f4:	9602      	str	r6, [sp, #8]
    98f6:	2200      	movs	r2, #0
    98f8:	210f      	movs	r1, #15
    98fa:	4620      	mov	r0, r4
    98fc:	f7ff fe64 	bl	95c8 <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_ALL_RX_ERR, sizeof(uint32_t));
    9900:	a31f      	add	r3, pc, #124	; (adr r3, 9980 <dw1000_dev_wakeup+0xf8>)
    9902:	e9d3 2300 	ldrd	r2, r3, [r3]
    9906:	9602      	str	r6, [sp, #8]
    9908:	e9cd 2300 	strd	r2, r3, [sp]
    990c:	210f      	movs	r1, #15
    990e:	2200      	movs	r2, #0
    9910:	4620      	mov	r0, r4
    9912:	f7ff fe59 	bl	95c8 <dw1000_write_reg>
    dw1000_phy_set_rx_antennadelay(inst, inst->uwb_dev.rx_antenna_delay);
    9916:	f8b4 34cc 	ldrh.w	r3, [r4, #1228]	; 0x4cc
    991a:	2600      	movs	r6, #0
    991c:	2702      	movs	r7, #2
    991e:	e9cd 3600 	strd	r3, r6, [sp]
    9922:	f641 0204 	movw	r2, #6148	; 0x1804
    9926:	212e      	movs	r1, #46	; 0x2e
    9928:	4620      	mov	r0, r4
    992a:	9702      	str	r7, [sp, #8]
    992c:	f7ff fe4c 	bl	95c8 <dw1000_write_reg>
    dw1000_phy_set_tx_antennadelay(inst, inst->uwb_dev.tx_antenna_delay);
    9930:	f8b4 34ce 	ldrh.w	r3, [r4, #1230]	; 0x4ce
    9934:	9702      	str	r7, [sp, #8]
    9936:	4620      	mov	r0, r4
    9938:	e9cd 3600 	strd	r3, r6, [sp]
    993c:	4632      	mov	r2, r6
    993e:	2118      	movs	r1, #24
    9940:	f7ff fe42 	bl	95c8 <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
    9944:	4628      	mov	r0, r5
    9946:	f003 fc0f 	bl	d168 <os_mutex_release>
    assert(err == DPL_OK);
    994a:	b178      	cbz	r0, 996c <dw1000_dev_wakeup+0xe4>
    994c:	4633      	mov	r3, r6
    994e:	4632      	mov	r2, r6
    9950:	4631      	mov	r1, r6
    9952:	4630      	mov	r0, r6
    9954:	f002 ff52 	bl	c7fc <__assert_func>
        hal_dw1000_wakeup(inst);
    9958:	4620      	mov	r0, r4
    995a:	f7ff fc62 	bl	9222 <hal_dw1000_wakeup>
        devid = dw1000_read_reg(inst, DEV_ID_ID, 0, sizeof(uint32_t));
    995e:	2200      	movs	r2, #0
    9960:	2304      	movs	r3, #4
    9962:	4611      	mov	r1, r2
    9964:	4620      	mov	r0, r4
    9966:	f7ff fddd 	bl	9524 <dw1000_read_reg>
    996a:	e7b0      	b.n	98ce <dw1000_dev_wakeup+0x46>
    if(dpl_sem_get_count(&inst->tx_sem) == 0) {
    996c:	f8b4 3566 	ldrh.w	r3, [r4, #1382]	; 0x566
    9970:	2b00      	cmp	r3, #0
    9972:	d19b      	bne.n	98ac <dw1000_dev_wakeup+0x24>
    return (dpl_error_t)os_sem_release(&sem->sem);
    9974:	f504 60ac 	add.w	r0, r4, #1376	; 0x560
    9978:	f003 fe6e 	bl	d658 <os_sem_release>
    997c:	e796      	b.n	98ac <dw1000_dev_wakeup+0x24>
    997e:	bf00      	nop
    9980:	24119000 	.word	0x24119000
    9984:	00000000 	.word	0x00000000
    9988:	deca0130 	.word	0xdeca0130

0000998c <dw1000_dev_config>:
{
    998c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    inst->uwb_dev.status.initialized = (inst->uwb_dev.device_id == DWT_DEVICE_ID);
    9990:	f8df 8158 	ldr.w	r8, [pc, #344]	; 9aec <dw1000_dev_config+0x160>
{
    9994:	4604      	mov	r4, r0
    9996:	2603      	movs	r6, #3
    rc = hal_spi_config(inst->spi_num, &inst->spi_settings);
    9998:	f200 5794 	addw	r7, r0, #1428	; 0x594
    inst->spi_settings.baudrate = inst->spi_baudrate_low;
    999c:	f8d4 3558 	ldr.w	r3, [r4, #1368]	; 0x558
    99a0:	f8c4 3598 	str.w	r3, [r4, #1432]	; 0x598
    hal_dw1000_reset(inst);
    99a4:	4620      	mov	r0, r4
    99a6:	f7ff f9af 	bl	8d08 <hal_dw1000_reset>
    rc = hal_spi_disable(inst->spi_num);
    99aa:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
    99ae:	f002 fcf3 	bl	c398 <hal_spi_disable>
    assert(rc == 0);
    99b2:	b128      	cbz	r0, 99c0 <dw1000_dev_config+0x34>
    99b4:	2300      	movs	r3, #0
    99b6:	461a      	mov	r2, r3
    99b8:	4619      	mov	r1, r3
    99ba:	4618      	mov	r0, r3
    99bc:	f002 ff1e 	bl	c7fc <__assert_func>
    rc = hal_spi_config(inst->spi_num, &inst->spi_settings);
    99c0:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
    99c4:	4639      	mov	r1, r7
    99c6:	f002 fc39 	bl	c23c <hal_spi_config>
    assert(rc == 0);
    99ca:	2800      	cmp	r0, #0
    99cc:	d1f2      	bne.n	99b4 <dw1000_dev_config+0x28>
    rc = hal_spi_enable(inst->spi_num);
    99ce:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
    99d2:	f002 fcc1 	bl	c358 <hal_spi_enable>
    assert(rc == 0);
    99d6:	4605      	mov	r5, r0
    99d8:	2800      	cmp	r0, #0
    99da:	d1eb      	bne.n	99b4 <dw1000_dev_config+0x28>
    inst->uwb_dev.device_id = dw1000_read_reg(inst, DEV_ID_ID, 0, sizeof(uint32_t));
    99dc:	4602      	mov	r2, r0
    99de:	2304      	movs	r3, #4
    99e0:	4601      	mov	r1, r0
    99e2:	4620      	mov	r0, r4
    99e4:	f7ff fd9e 	bl	9524 <dw1000_read_reg>
    inst->uwb_dev.status.initialized = (inst->uwb_dev.device_id == DWT_DEVICE_ID);
    99e8:	eba0 0308 	sub.w	r3, r0, r8
    inst->uwb_dev.device_id = dw1000_read_reg(inst, DEV_ID_ID, 0, sizeof(uint32_t));
    99ec:	f8c4 04c8 	str.w	r0, [r4, #1224]	; 0x4c8
    inst->uwb_dev.status.initialized = (inst->uwb_dev.device_id == DWT_DEVICE_ID);
    99f0:	4258      	negs	r0, r3
    99f2:	4158      	adcs	r0, r3
    99f4:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
    99f8:	f360 0341 	bfi	r3, r0, #1, #1
    if (!inst->uwb_dev.status.initialized && --timeout)
    99fc:	079a      	lsls	r2, r3, #30
    inst->uwb_dev.status.initialized = (inst->uwb_dev.device_id == DWT_DEVICE_ID);
    99fe:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
    if (!inst->uwb_dev.status.initialized && --timeout)
    9a02:	d407      	bmi.n	9a14 <dw1000_dev_config+0x88>
    9a04:	3e01      	subs	r6, #1
    9a06:	d003      	beq.n	9a10 <dw1000_dev_config+0x84>
        dw1000_dev_wakeup(inst);
    9a08:	4620      	mov	r0, r4
    9a0a:	f7ff ff3d 	bl	9888 <dw1000_dev_wakeup>
        goto retry;
    9a0e:	e7c5      	b.n	999c <dw1000_dev_config+0x10>
        return DPL_TIMEOUT;
    9a10:	2506      	movs	r5, #6
    9a12:	e067      	b.n	9ae4 <dw1000_dev_config+0x158>
    dw1000_phy_init(inst, NULL);
    9a14:	4629      	mov	r1, r5
    9a16:	4620      	mov	r0, r4
    9a18:	f001 ff4e 	bl	b8b8 <dw1000_phy_init>
    inst->spi_settings.baudrate = inst->spi_baudrate;
    9a1c:	f8d4 3554 	ldr.w	r3, [r4, #1364]	; 0x554
    rc = hal_spi_disable(inst->spi_num);
    9a20:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
    inst->spi_settings.baudrate = inst->spi_baudrate;
    9a24:	f8c4 3598 	str.w	r3, [r4, #1432]	; 0x598
    rc = hal_spi_disable(inst->spi_num);
    9a28:	f002 fcb6 	bl	c398 <hal_spi_disable>
    assert(rc == 0);
    9a2c:	2800      	cmp	r0, #0
    9a2e:	d1c1      	bne.n	99b4 <dw1000_dev_config+0x28>
    rc = hal_spi_config(inst->spi_num, &inst->spi_settings);
    9a30:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
    9a34:	4639      	mov	r1, r7
    9a36:	f002 fc01 	bl	c23c <hal_spi_config>
    assert(rc == 0);
    9a3a:	2800      	cmp	r0, #0
    9a3c:	d1ba      	bne.n	99b4 <dw1000_dev_config+0x28>
    rc = hal_spi_enable(inst->spi_num);
    9a3e:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
    9a42:	f002 fc89 	bl	c358 <hal_spi_enable>
    assert(rc == 0);
    9a46:	4605      	mov	r5, r0
    9a48:	2800      	cmp	r0, #0
    9a4a:	d1b3      	bne.n	99b4 <dw1000_dev_config+0x28>
    inst->uwb_dev.pan_id = MYNEWT_VAL(PANID);
    9a4c:	f64d 63ca 	movw	r3, #57034	; 0xdeca
    9a50:	f8a4 34c0 	strh.w	r3, [r4, #1216]	; 0x4c0
    inst->uwb_dev.uid = inst->part_id & 0xffff;
    9a54:	f8d4 3574 	ldr.w	r3, [r4, #1396]	; 0x574
    9a58:	f8a4 34b6 	strh.w	r3, [r4, #1206]	; 0x4b6
    if (inst == hal_dw1000_inst(0)) {
    9a5c:	f7ff f94c 	bl	8cf8 <hal_dw1000_inst>
    9a60:	4284      	cmp	r4, r0
    9a62:	d007      	beq.n	9a74 <dw1000_dev_config+0xe8>
    } else if (inst == hal_dw1000_inst(1)){
    9a64:	2001      	movs	r0, #1
    9a66:	f7ff f947 	bl	8cf8 <hal_dw1000_inst>
    9a6a:	4284      	cmp	r4, r0
    9a6c:	d002      	beq.n	9a74 <dw1000_dev_config+0xe8>
    } else if (inst == hal_dw1000_inst(2)){
    9a6e:	2002      	movs	r0, #2
    9a70:	f7ff f942 	bl	8cf8 <hal_dw1000_inst>
    inst->uwb_dev.euid = (((uint64_t)inst->lot_id) << 32) + inst->part_id;
    9a74:	f8d4 3578 	ldr.w	r3, [r4, #1400]	; 0x578
    9a78:	f8d4 2574 	ldr.w	r2, [r4, #1396]	; 0x574
    9a7c:	f504 6898 	add.w	r8, r4, #1216	; 0x4c0
    9a80:	e948 2302 	strd	r2, r3, [r8, #-8]
    dw1000_mac_init(inst, NULL);
    9a84:	2100      	movs	r1, #0
    9a86:	4620      	mov	r0, r4
    9a88:	f001 f864 	bl	ab54 <dw1000_mac_init>
    if (!inst->uwb_dev.uid || inst->uwb_dev.uid == 0xFFFF) {
    9a8c:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
    9a90:	3b01      	subs	r3, #1
    9a92:	b29b      	uxth	r3, r3
    9a94:	f64f 72fd 	movw	r2, #65533	; 0xfffd
    9a98:	4293      	cmp	r3, r2
        inst->uwb_dev.uid = 0x1;
    9a9a:	bf84      	itt	hi
    9a9c:	2301      	movhi	r3, #1
    9a9e:	f8a4 34b6 	strhhi.w	r3, [r4, #1206]	; 0x4b6
    dw1000_set_panid(inst,inst->uwb_dev.pan_id);
    9aa2:	f8b4 34c0 	ldrh.w	r3, [r4, #1216]	; 0x4c0
    9aa6:	2600      	movs	r6, #0
    9aa8:	2702      	movs	r7, #2
    9aaa:	e9cd 3600 	strd	r3, r6, [sp]
    9aae:	463a      	mov	r2, r7
    9ab0:	2103      	movs	r1, #3
    9ab2:	4620      	mov	r0, r4
    9ab4:	9702      	str	r7, [sp, #8]
    9ab6:	f7ff fd87 	bl	95c8 <dw1000_write_reg>
    dw1000_set_eui(inst,inst->uwb_dev.euid);
    9aba:	2308      	movs	r3, #8
    9abc:	9302      	str	r3, [sp, #8]
    9abe:	e958 2302 	ldrd	r2, r3, [r8, #-8]
    9ac2:	2101      	movs	r1, #1
    9ac4:	e9cd 2300 	strd	r2, r3, [sp]
    9ac8:	4620      	mov	r0, r4
    9aca:	4632      	mov	r2, r6
    9acc:	f7ff fd7c 	bl	95c8 <dw1000_write_reg>
    dw1000_set_address16(inst,inst->uwb_dev.uid);
    9ad0:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
    9ad4:	9702      	str	r7, [sp, #8]
    9ad6:	e9cd 3600 	strd	r3, r6, [sp]
    9ada:	4632      	mov	r2, r6
    9adc:	2103      	movs	r1, #3
    9ade:	4620      	mov	r0, r4
    9ae0:	f7ff fd72 	bl	95c8 <dw1000_write_reg>
}
    9ae4:	4628      	mov	r0, r5
    9ae6:	b004      	add	sp, #16
    9ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9aec:	deca0130 	.word	0xdeca0130

00009af0 <uwb_dw1000_wakeup>:
    return dw1000_dev_wakeup((dw1000_dev_instance_t *)dev);
    9af0:	f7ff beca 	b.w	9888 <dw1000_dev_wakeup>

00009af4 <dw1000_dev_enter_sleep_after_tx>:
{
    9af4:	b530      	push	{r4, r5, lr}
    uint32_t reg = dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, sizeof(uint32_t));
    9af6:	2304      	movs	r3, #4
{
    9af8:	4604      	mov	r4, r0
    9afa:	b085      	sub	sp, #20
    9afc:	460d      	mov	r5, r1
    uint32_t reg = dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, sizeof(uint32_t));
    9afe:	461a      	mov	r2, r3
    9b00:	2136      	movs	r1, #54	; 0x36
    9b02:	f7ff fd0f 	bl	9524 <dw1000_read_reg>
    inst->control.sleep_after_tx = enable;
    9b06:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
    9b0a:	f365 13c7 	bfi	r3, r5, #7, #1
    9b0e:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    if(inst->control.sleep_after_tx)
    9b12:	061b      	lsls	r3, r3, #24
        reg |= PMSC_CTRL1_ATXSLP;
    9b14:	bf4c      	ite	mi
    9b16:	f440 6000 	orrmi.w	r0, r0, #2048	; 0x800
        reg &= ~(PMSC_CTRL1_ATXSLP);
    9b1a:	f420 6000 	bicpl.w	r0, r0, #2048	; 0x800
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, reg, sizeof(uint32_t));
    9b1e:	2204      	movs	r2, #4
    9b20:	2300      	movs	r3, #0
    9b22:	9000      	str	r0, [sp, #0]
    9b24:	9202      	str	r2, [sp, #8]
    9b26:	4620      	mov	r0, r4
    9b28:	9301      	str	r3, [sp, #4]
    9b2a:	2136      	movs	r1, #54	; 0x36
    9b2c:	f7ff fd4c 	bl	95c8 <dw1000_write_reg>
}
    9b30:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    9b34:	b005      	add	sp, #20
    9b36:	bd30      	pop	{r4, r5, pc}

00009b38 <uwb_dw1000_enter_sleep_after_tx>:
    return dw1000_dev_enter_sleep_after_tx((dw1000_dev_instance_t *)dev, enable);
    9b38:	f7ff bfdc 	b.w	9af4 <dw1000_dev_enter_sleep_after_tx>

00009b3c <dw1000_dev_enter_sleep_after_rx>:
{
    9b3c:	b530      	push	{r4, r5, lr}
    uint32_t reg = dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, sizeof(uint32_t));
    9b3e:	2304      	movs	r3, #4
{
    9b40:	4604      	mov	r4, r0
    9b42:	b085      	sub	sp, #20
    9b44:	460d      	mov	r5, r1
    uint32_t reg = dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, sizeof(uint32_t));
    9b46:	461a      	mov	r2, r3
    9b48:	2136      	movs	r1, #54	; 0x36
    9b4a:	f7ff fceb 	bl	9524 <dw1000_read_reg>
    inst->control.sleep_after_rx = enable;
    9b4e:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
    9b52:	f365 0300 	bfi	r3, r5, #0, #1
    9b56:	f884 35b1 	strb.w	r3, [r4, #1457]	; 0x5b1
    if(inst->control.sleep_after_rx)
    9b5a:	07db      	lsls	r3, r3, #31
        reg |= PMSC_CTRL1_ARXSLP;
    9b5c:	bf4c      	ite	mi
    9b5e:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
        reg &= ~(PMSC_CTRL1_ARXSLP);
    9b62:	f420 5080 	bicpl.w	r0, r0, #4096	; 0x1000
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, reg, sizeof(uint32_t));
    9b66:	2204      	movs	r2, #4
    9b68:	2300      	movs	r3, #0
    9b6a:	9000      	str	r0, [sp, #0]
    9b6c:	9202      	str	r2, [sp, #8]
    9b6e:	4620      	mov	r0, r4
    9b70:	9301      	str	r3, [sp, #4]
    9b72:	2136      	movs	r1, #54	; 0x36
    9b74:	f7ff fd28 	bl	95c8 <dw1000_write_reg>
}
    9b78:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    9b7c:	b005      	add	sp, #20
    9b7e:	bd30      	pop	{r4, r5, pc}

00009b80 <uwb_dw1000_enter_sleep_after_rx>:
    return dw1000_dev_enter_sleep_after_rx((dw1000_dev_instance_t *)dev, enable);
    9b80:	f7ff bfdc 	b.w	9b3c <dw1000_dev_enter_sleep_after_rx>

00009b84 <dw1000_dev_init>:
 * @param arg   Argument to set as pointer to struct dw1000_dev_cfg.
 * @return DPL_OK on success
 */
int
dw1000_dev_init(struct os_dev *odev, void *arg)
{
    9b84:	b570      	push	{r4, r5, r6, lr}
    9b86:	4604      	mov	r4, r0
    9b88:	460d      	mov	r5, r1
    dpl_error_t err;
    struct dw1000_dev_cfg *cfg = (struct dw1000_dev_cfg*)arg;
    struct uwb_dev *udev = (struct uwb_dev*)odev;
    dw1000_dev_instance_t *inst = (dw1000_dev_instance_t *)odev;
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    DIAGMSG("{\"utime\": %"PRIu32",\"msg\": \"dw1000_dev_init\"}\n", dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
    9b8a:	f006 fed3 	bl	10934 <dpl_cputime_get32>
    9b8e:	4601      	mov	r1, r0
    9b90:	4830      	ldr	r0, [pc, #192]	; (9c54 <dw1000_dev_init+0xd0>)
    9b92:	f006 fe53 	bl	1083c <printf>
#endif
    /* TODO, replace with open anch close function pointers below */
    OS_DEV_SETHANDLERS(odev, 0, 0);
    9b96:	2600      	movs	r6, #0
        assert(inst);
        inst->uwb_dev.status.selfmalloc = 1;
        udev = (struct uwb_dev*)inst;
    }

    udev->rxbuf_size = MYNEWT_VAL(UWB_RX_BUFFER_SIZE);
    9b98:	4b2f      	ldr	r3, [pc, #188]	; (9c58 <dw1000_dev_init+0xd4>)
    9b9a:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    udev->txbuf_size = MYNEWT_VAL(DW1000_HAL_SPI_BUFFER_SIZE);
    uwb_dev_init(udev);
    9b9e:	4620      	mov	r0, r4
    OS_DEV_SETHANDLERS(odev, 0, 0);
    9ba0:	6026      	str	r6, [r4, #0]
    9ba2:	60e6      	str	r6, [r4, #12]
    uwb_dev_init(udev);
    9ba4:	f7fe ff81 	bl	8aaa <uwb_dev_init>

    /* Setup common uwb interface */
    udev->uw_funcs = &dw1000_uwb_funcs;
    9ba8:	4b2c      	ldr	r3, [pc, #176]	; (9c5c <dw1000_dev_init+0xd8>)
    9baa:	6263      	str	r3, [r4, #36]	; 0x24
    udev->rxdiag = (struct uwb_dev_rxdiag*)&inst->rxdiag;
    9bac:	f204 539c 	addw	r3, r4, #1436	; 0x59c
#if MYNEWT_VAL(CIR_ENABLED)
    udev->cir = (struct cir_instance*)inst->cir;
#endif
#if MYNEWT_VAL(DW1000_SYS_STATUS_BACKTRACE_LEN)
    inst->sys_status_bt_idx = 0;
    inst->sys_status_bt_lock = 0;
    9bb0:	f884 6df2 	strb.w	r6, [r4, #3570]	; 0xdf2
    udev->rxdiag = (struct uwb_dev_rxdiag*)&inst->rxdiag;
    9bb4:	f8c4 34f8 	str.w	r3, [r4, #1272]	; 0x4f8
    udev->rxdiag->rxd_len = sizeof(inst->rxdiag);
    9bb8:	2314      	movs	r3, #20
    9bba:	f8a4 359c 	strh.w	r3, [r4, #1436]	; 0x59c

    /* Check size requirements */
    assert(sizeof(inst->rxdiag) <= MYNEWT_VAL(UWB_DEV_RXDIAG_MAXLEN));

    /* Capture dev_cfg parameters */
    inst->spi_sem = cfg->spi_sem;
    9bbe:	682b      	ldr	r3, [r5, #0]
    inst->sys_status_bt_idx = 0;
    9bc0:	f8a4 6df0 	strh.w	r6, [r4, #3568]	; 0xdf0
    inst->spi_sem = cfg->spi_sem;
    9bc4:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    inst->spi_num = cfg->spi_num;
    9bc8:	7b2b      	ldrb	r3, [r5, #12]
    9bca:	f884 355c 	strb.w	r3, [r4, #1372]	; 0x55c
    inst->spi_baudrate = cfg->spi_baudrate;
    9bce:	686b      	ldr	r3, [r5, #4]
    9bd0:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
    inst->spi_baudrate_low = cfg->spi_baudrate_low;
    9bd4:	68ab      	ldr	r3, [r5, #8]
    9bd6:	f8c4 3558 	str.w	r3, [r4, #1368]	; 0x558
    inst->irq_pin = cfg->irq_pin;
    9bda:	7bab      	ldrb	r3, [r5, #14]
    9bdc:	f884 355d 	strb.w	r3, [r4, #1373]	; 0x55d
    inst->rst_pin = cfg->rst_pin;
    9be0:	7b6b      	ldrb	r3, [r5, #13]
    9be2:	f884 355f 	strb.w	r3, [r4, #1375]	; 0x55f
    inst->ss_pin  = cfg->ss_pin;
    9be6:	7beb      	ldrb	r3, [r5, #15]
    9be8:	f884 355e 	strb.w	r3, [r4, #1374]	; 0x55e

    udev->rx_antenna_delay = cfg->rx_antenna_delay;
    9bec:	8a2b      	ldrh	r3, [r5, #16]
    9bee:	f8a4 34cc 	strh.w	r3, [r4, #1228]	; 0x4cc
    udev->tx_antenna_delay = cfg->tx_antenna_delay;
    9bf2:	8a6b      	ldrh	r3, [r5, #18]
    9bf4:	f8a4 34ce 	strh.w	r3, [r4, #1230]	; 0x4ce
    udev->ext_clock_delay = cfg->ext_clock_delay;
    9bf8:	696b      	ldr	r3, [r5, #20]
    9bfa:	f8c4 34d4 	str.w	r3, [r4, #1236]	; 0x4d4
    return (dpl_error_t)os_mutex_init(&mu->mu);
    9bfe:	f504 60ad 	add.w	r0, r4, #1384	; 0x568
    9c02:	f003 faa7 	bl	d154 <os_mutex_init>

    err = dpl_mutex_init(&inst->mutex);
    assert(err == DPL_OK);
    9c06:	b128      	cbz	r0, 9c14 <dw1000_dev_init+0x90>
    9c08:	2300      	movs	r3, #0
    9c0a:	461a      	mov	r2, r3
    9c0c:	4619      	mov	r1, r3
    9c0e:	4618      	mov	r0, r3
    9c10:	f002 fdf4 	bl	c7fc <__assert_func>
    return (dpl_error_t)os_sem_init(&sem->sem, tokens);
    9c14:	2101      	movs	r1, #1
    9c16:	f504 60ac 	add.w	r0, r4, #1376	; 0x560
    9c1a:	f003 fd15 	bl	d648 <os_sem_init>
    err = dpl_sem_init(&inst->tx_sem, 0x1);
    assert(err == DPL_OK);
    9c1e:	2800      	cmp	r0, #0
    9c20:	d1f2      	bne.n	9c08 <dw1000_dev_init+0x84>
    9c22:	2101      	movs	r1, #1
    9c24:	f204 504c 	addw	r0, r4, #1356	; 0x54c
    9c28:	f003 fd0e 	bl	d648 <os_sem_init>
    err = dpl_sem_init(&inst->spi_nb_sem, 0x1);
    assert(err == DPL_OK);
    9c2c:	2800      	cmp	r0, #0
    9c2e:	d1eb      	bne.n	9c08 <dw1000_dev_init+0x84>

    /* phy attritubes per the IEEE802.15.4-2011 standard, Table 99 and Table 101 */
    udev->attrib.Tpsym = DPL_FLOAT32_INIT(1.0176282f); //!< Preamble symbols duration (usec) for MPRF of 62.89Mhz
    9c30:	f204 5234 	addw	r2, r4, #1332	; 0x534
    9c34:	490a      	ldr	r1, [pc, #40]	; (9c60 <dw1000_dev_init+0xdc>)
    9c36:	6011      	str	r1, [r2, #0]
    udev->attrib.Tbsym = DPL_FLOAT32_INIT(1.0256410f); //!< Baserate symbols duration (usec) 850khz
    9c38:	f504 62a7 	add.w	r2, r4, #1336	; 0x538
    9c3c:	4909      	ldr	r1, [pc, #36]	; (9c64 <dw1000_dev_init+0xe0>)
    9c3e:	6011      	str	r1, [r2, #0]
    udev->attrib.Tdsym = DPL_FLOAT32_INIT(0.1282051f); //!< Datarate symbols duration (usec) 6.81Mhz
    9c40:	f204 523c 	addw	r2, r4, #1340	; 0x53c
    9c44:	4908      	ldr	r1, [pc, #32]	; (9c68 <dw1000_dev_init+0xe4>)
    9c46:	6011      	str	r1, [r2, #0]

    SLIST_INIT(&inst->uwb_dev.interface_cbs);

#if MYNEWT_VAL(DW1000_SPI_BACKTRACE_LEN) || MYNEWT_VAL(DW1000_SYS_STATUS_BACKTRACE_LEN)
    inst->bt_ticks2usec = 1000000/MYNEWT_VAL(OS_CPUTIME_FREQ);
    9c48:	2301      	movs	r3, #1
    SLIST_INIT(&inst->uwb_dev.interface_cbs);
    9c4a:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    inst->bt_ticks2usec = 1000000/MYNEWT_VAL(OS_CPUTIME_FREQ);
    9c4e:	f8c4 3df4 	str.w	r3, [r4, #3572]	; 0xdf4
#endif
    return DPL_OK;
}
    9c52:	bd70      	pop	{r4, r5, r6, pc}
    9c54:	00020207 	.word	0x00020207
    9c58:	01000400 	.word	0x01000400
    9c5c:	00020248 	.word	0x00020248
    9c60:	3f8241a4 	.word	0x3f8241a4
    9c64:	3f834834 	.word	0x3f834834
    9c68:	3e034833 	.word	0x3e034833

00009c6c <dw1000_dev_deinit>:
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void
dw1000_dev_deinit(dw1000_dev_instance_t * inst)
{
    9c6c:	b510      	push	{r4, lr}
    assert(inst);
    9c6e:	4604      	mov	r4, r0
    9c70:	b920      	cbnz	r0, 9c7c <dw1000_dev_deinit+0x10>
    9c72:	4603      	mov	r3, r0
    9c74:	4602      	mov	r2, r0
    9c76:	4601      	mov	r1, r0
    9c78:	f002 fdc0 	bl	c7fc <__assert_func>
    hal_spi_disable(inst->spi_num);
    9c7c:	f890 055c 	ldrb.w	r0, [r0, #1372]	; 0x55c
    9c80:	f002 fb8a 	bl	c398 <hal_spi_disable>

    /* De-Initialise task structures in uwb_dev */
    uwb_task_deinit(&inst->uwb_dev);
    9c84:	4620      	mov	r0, r4
    9c86:	f7fe ff03 	bl	8a90 <uwb_task_deinit>
    hal_gpio_irq_disable(inst->irq_pin);
    9c8a:	f894 055d 	ldrb.w	r0, [r4, #1373]	; 0x55d
    9c8e:	f002 fa71 	bl	c174 <hal_gpio_irq_disable>
    hal_gpio_irq_release(inst->irq_pin);
    9c92:	f894 055d 	ldrb.w	r0, [r4, #1373]	; 0x55d
    9c96:	f002 fa7b 	bl	c190 <hal_gpio_irq_release>

    if (inst->uwb_dev.status.selfmalloc) {
    9c9a:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
    9c9e:	f013 0201 	ands.w	r2, r3, #1
    9ca2:	d004      	beq.n	9cae <dw1000_dev_deinit+0x42>
        free(inst);
    9ca4:	4620      	mov	r0, r4
    } else {
        inst->uwb_dev.status.initialized = 0;
    }
}
    9ca6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        free(inst);
    9caa:	f006 baa7 	b.w	101fc <free>
        inst->uwb_dev.status.initialized = 0;
    9cae:	f362 0341 	bfi	r3, r2, #1, #1
    9cb2:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
}
    9cb6:	bd10      	pop	{r4, pc}

00009cb8 <dw1000_irq>:
 * @param arg  Pointer to the queue of interrupts.
 * @return void
 */
static void
dw1000_irq(void *arg)
{
    9cb8:	b510      	push	{r4, lr}
    9cba:	4604      	mov	r4, r0
    dw1000_dev_instance_t * inst = arg;
    inst->uwb_dev.irq_at_ticks = dpl_cputime_get32();
    9cbc:	f006 fe3a 	bl	10934 <dpl_cputime_get32>
    if (!inst->uwb_dev.status.sleeping) {
    9cc0:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
    inst->uwb_dev.irq_at_ticks = dpl_cputime_get32();
    9cc4:	6320      	str	r0, [r4, #48]	; 0x30
    if (!inst->uwb_dev.status.sleeping) {
    9cc6:	07db      	lsls	r3, r3, #31
    9cc8:	d407      	bmi.n	9cda <dw1000_irq+0x22>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    9cca:	f104 014c 	add.w	r1, r4, #76	; 0x4c
    9cce:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        dpl_eventq_put(&inst->uwb_dev.eventq, &inst->uwb_dev.interrupt_ev);
    }
}
    9cd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9cd6:	f003 b870 	b.w	cdba <os_eventq_put>
    9cda:	bd10      	pop	{r4, pc}

00009cdc <dw1000_read_rx>:
{
    9cdc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    9ce0:	461e      	mov	r6, r3
    MAC_STATS_INCN(rx_bytes, rxFrameLength);
    9ce2:	f8d0 35cc 	ldr.w	r3, [r0, #1484]	; 0x5cc
{
    9ce6:	9203      	str	r2, [sp, #12]
    MAC_STATS_INCN(rx_bytes, rxFrameLength);
    9ce8:	4433      	add	r3, r6
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
    9cea:	f500 68ad 	add.w	r8, r0, #1384	; 0x568
    9cee:	f8c0 35cc 	str.w	r3, [r0, #1484]	; 0x5cc
{
    9cf2:	4604      	mov	r4, r0
    9cf4:	460f      	mov	r7, r1
    9cf6:	4640      	mov	r0, r8
    9cf8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9cfc:	f003 fa86 	bl	d20c <os_mutex_pend>
    if (err != DPL_OK) {
    9d00:	9a03      	ldr	r2, [sp, #12]
    9d02:	4605      	mov	r5, r0
    9d04:	b150      	cbz	r0, 9d1c <dw1000_read_rx+0x40>
        inst->uwb_dev.status.mtx_error = 1;
    9d06:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
    9d0a:	f043 0308 	orr.w	r3, r3, #8
    9d0e:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
    9d12:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    9d16:	b004      	add	sp, #16
    9d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dw1000_read(inst, RX_BUFFER_ID, rxBufferOffset, rxFrameBytes, rxFrameLength);
    9d1c:	9600      	str	r6, [sp, #0]
    9d1e:	463b      	mov	r3, r7
    9d20:	2111      	movs	r1, #17
    9d22:	4620      	mov	r0, r4
    9d24:	f7ff fb60 	bl	93e8 <dw1000_read>
    return (dpl_error_t)os_mutex_release(&mu->mu);
    9d28:	4640      	mov	r0, r8
    9d2a:	f003 fa1d 	bl	d168 <os_mutex_release>
    assert(err == DPL_OK);
    9d2e:	2800      	cmp	r0, #0
    9d30:	d0ef      	beq.n	9d12 <dw1000_read_rx+0x36>
    9d32:	462b      	mov	r3, r5
    9d34:	462a      	mov	r2, r5
    9d36:	4629      	mov	r1, r5
    9d38:	4628      	mov	r0, r5
    9d3a:	f002 fd5f 	bl	c7fc <__assert_func>

00009d3e <dw1000_write_tx>:
{
    9d3e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    9d42:	461f      	mov	r7, r3
    MAC_STATS_INCN(tx_bytes, txFrameLength);
    9d44:	f8d0 35c8 	ldr.w	r3, [r0, #1480]	; 0x5c8
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
    9d48:	f500 68ad 	add.w	r8, r0, #1384	; 0x568
    9d4c:	443b      	add	r3, r7
{
    9d4e:	4604      	mov	r4, r0
    9d50:	460d      	mov	r5, r1
    MAC_STATS_INCN(tx_bytes, txFrameLength);
    9d52:	f8c0 35c8 	str.w	r3, [r0, #1480]	; 0x5c8
    9d56:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9d5a:	4640      	mov	r0, r8
{
    9d5c:	4616      	mov	r6, r2
    9d5e:	f003 fa55 	bl	d20c <os_mutex_pend>
    if (err != DPL_OK) {
    9d62:	b150      	cbz	r0, 9d7a <dw1000_write_tx+0x3c>
        inst->uwb_dev.status.mtx_error = 1;
    9d64:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
    9d68:	f043 0308 	orr.w	r3, r3, #8
    9d6c:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
    9d70:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    9d74:	b002      	add	sp, #8
    9d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((txBufferOffset + txFrameLength) <= 1024){
    9d7a:	19f3      	adds	r3, r6, r7
    9d7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    9d80:	dc1e      	bgt.n	9dc0 <dw1000_write_tx+0x82>
        dw1000_write(inst, TX_BUFFER_ID, txBufferOffset,  txFrameBytes, txFrameLength);
    9d82:	9700      	str	r7, [sp, #0]
    9d84:	462b      	mov	r3, r5
    9d86:	4632      	mov	r2, r6
    9d88:	2109      	movs	r1, #9
    9d8a:	4620      	mov	r0, r4
    9d8c:	f7ff fb78 	bl	9480 <dw1000_write>
        if (txBufferOffset == 0) {
    9d90:	b92e      	cbnz	r6, 9d9e <dw1000_write_tx+0x60>
                inst->uwb_dev.fctrl_array[i] =  txFrameBytes[i];
    9d92:	782b      	ldrb	r3, [r5, #0]
    9d94:	f884 34e0 	strb.w	r3, [r4, #1248]	; 0x4e0
    9d98:	786b      	ldrb	r3, [r5, #1]
    9d9a:	f884 34e1 	strb.w	r3, [r4, #1249]	; 0x4e1
        inst->uwb_dev.status.tx_frame_error = 0;
    9d9e:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
    9da2:	f36f 1304 	bfc	r3, #4, #1
        inst->uwb_dev.status.tx_frame_error = 1;
    9da6:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
    return (dpl_error_t)os_mutex_release(&mu->mu);
    9daa:	4640      	mov	r0, r8
    9dac:	f003 f9dc 	bl	d168 <os_mutex_release>
    assert(err == DPL_OK);
    9db0:	2800      	cmp	r0, #0
    9db2:	d0dd      	beq.n	9d70 <dw1000_write_tx+0x32>
    9db4:	2300      	movs	r3, #0
    9db6:	461a      	mov	r2, r3
    9db8:	4619      	mov	r1, r3
    9dba:	4618      	mov	r0, r3
    9dbc:	f002 fd1e 	bl	c7fc <__assert_func>
        inst->uwb_dev.status.tx_frame_error = 1;
    9dc0:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
    9dc4:	f043 0310 	orr.w	r3, r3, #16
    9dc8:	e7ed      	b.n	9da6 <dw1000_write_tx+0x68>

00009dca <dw1000_write_tx_fctrl>:
{
    9dca:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
    9dce:	f500 66ad 	add.w	r6, r0, #1384	; 0x568
    9dd2:	4605      	mov	r5, r0
    9dd4:	460c      	mov	r4, r1
    9dd6:	4630      	mov	r0, r6
    9dd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9ddc:	4617      	mov	r7, r2
    9dde:	4698      	mov	r8, r3
    9de0:	f003 fa14 	bl	d20c <os_mutex_pend>
    if (err != DPL_OK) {
    9de4:	b140      	cbz	r0, 9df8 <dw1000_write_tx_fctrl+0x2e>
        inst->uwb_dev.status.mtx_error = 1;
    9de6:	f895 350b 	ldrb.w	r3, [r5, #1291]	; 0x50b
    9dea:	f043 0308 	orr.w	r3, r3, #8
    9dee:	f885 350b 	strb.w	r3, [r5, #1291]	; 0x50b
}
    9df2:	b004      	add	sp, #16
    9df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (ext) {
    9df8:	f1b8 0f00 	cmp.w	r8, #0
    9dfc:	d028      	beq.n	9e50 <dw1000_write_tx_fctrl+0x86>
            (((uint32_t)ext->ranging_en_bit) << TX_FCTRL_TR_SHFT);
    9dfe:	f898 1002 	ldrb.w	r1, [r8, #2]
            (((uint32_t)ext->dataRate) << TX_FCTRL_TXBR_SHFT) |
    9e02:	f898 3000 	ldrb.w	r3, [r8]
        tx_fctrl_reg = (((uint32_t)(ext->preambleLength | config->prf)) << TX_FCTRL_TXPRF_SHFT) |
    9e06:	f895 250e 	ldrb.w	r2, [r5, #1294]	; 0x50e
            (((uint32_t)ext->ranging_en_bit) << TX_FCTRL_TR_SHFT);
    9e0a:	03c9      	lsls	r1, r1, #15
        tx_fctrl_reg = (((uint32_t)(ext->preambleLength | config->prf)) << TX_FCTRL_TXPRF_SHFT) |
    9e0c:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
    9e10:	f898 3001 	ldrb.w	r3, [r8, #1]
    9e14:	4313      	orrs	r3, r2
    9e16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
    tx_fctrl_reg |= ((txFrameLength + 2) & TX_FCTRL_FLE_MASK)  |
    9e1a:	1ca1      	adds	r1, r4, #2
    9e1c:	f3c1 0109 	ubfx	r1, r1, #0, #10
    9e20:	ea41 5487 	orr.w	r4, r1, r7, lsl #22
    dw1000_write_reg(inst, TX_FCTRL_ID, 0, tx_fctrl_reg, sizeof(uint32_t));
    9e24:	2204      	movs	r2, #4
    tx_fctrl_reg |= ((txFrameLength + 2) & TX_FCTRL_FLE_MASK)  |
    9e26:	431c      	orrs	r4, r3
    dw1000_write_reg(inst, TX_FCTRL_ID, 0, tx_fctrl_reg, sizeof(uint32_t));
    9e28:	2300      	movs	r3, #0
    9e2a:	e9cd 4300 	strd	r4, r3, [sp]
    9e2e:	9202      	str	r2, [sp, #8]
    9e30:	2108      	movs	r1, #8
    9e32:	461a      	mov	r2, r3
    9e34:	4628      	mov	r0, r5
    9e36:	f7ff fbc7 	bl	95c8 <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
    9e3a:	4630      	mov	r0, r6
    9e3c:	f003 f994 	bl	d168 <os_mutex_release>
    assert(err == DPL_OK);
    9e40:	2300      	movs	r3, #0
    9e42:	2800      	cmp	r0, #0
    9e44:	d0d5      	beq.n	9df2 <dw1000_write_tx_fctrl+0x28>
    9e46:	461a      	mov	r2, r3
    9e48:	4619      	mov	r1, r3
    9e4a:	4618      	mov	r0, r3
    9e4c:	f002 fcd6 	bl	c7fc <__assert_func>
        tx_fctrl_reg = inst->tx_fctrl;
    9e50:	f8d5 3588 	ldr.w	r3, [r5, #1416]	; 0x588
    9e54:	e7e1      	b.n	9e1a <dw1000_write_tx_fctrl+0x50>

00009e56 <dw1000_start_tx>:
{
    9e56:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    9e5a:	f500 67ac 	add.w	r7, r0, #1376	; 0x560
    9e5e:	4604      	mov	r4, r0
    9e60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9e64:	4638      	mov	r0, r7
    9e66:	f003 fc29 	bl	d6bc <os_sem_pend>
    if (err != DPL_OK) {
    9e6a:	b150      	cbz	r0, 9e82 <dw1000_start_tx+0x2c>
        inst->uwb_dev.status.sem_error = 1;
    9e6c:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
    9e70:	f043 0304 	orr.w	r3, r3, #4
    9e74:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
    9e78:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    9e7c:	b004      	add	sp, #16
    9e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (config->trxoff_enable){ // force return to idle state
    9e82:	f894 352c 	ldrb.w	r3, [r4, #1324]	; 0x52c
    control = inst->control;
    9e86:	f8d4 55b0 	ldr.w	r5, [r4, #1456]	; 0x5b0
    if (config->trxoff_enable){ // force return to idle state
    9e8a:	069a      	lsls	r2, r3, #26
    9e8c:	d50a      	bpl.n	9ea4 <dw1000_start_tx+0x4e>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) SYS_CTRL_TRXOFF, sizeof(uint8_t));
    9e8e:	2301      	movs	r3, #1
    9e90:	2240      	movs	r2, #64	; 0x40
    9e92:	9302      	str	r3, [sp, #8]
    9e94:	2300      	movs	r3, #0
    9e96:	e9cd 2300 	strd	r2, r3, [sp]
    9e9a:	210d      	movs	r1, #13
    9e9c:	4602      	mov	r2, r0
    9e9e:	4620      	mov	r0, r4
    9ea0:	f7ff fb92 	bl	95c8 <dw1000_write_reg>
        sys_ctrl_reg |= SYS_CTRL_WAIT4RESP;
    9ea4:	f015 0f01 	tst.w	r5, #1
    9ea8:	bf14      	ite	ne
    9eaa:	2382      	movne	r3, #130	; 0x82
    9eac:	2302      	moveq	r3, #2
    if (control.delay_start_enabled)
    9eae:	f015 0504 	ands.w	r5, r5, #4
        sys_ctrl_reg |= SYS_CTRL_TXDLYS;
    9eb2:	bf18      	it	ne
    9eb4:	f043 0304 	orrne.w	r3, r3, #4
    dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) sys_ctrl_reg, sizeof(uint8_t));
    9eb8:	2600      	movs	r6, #0
    9eba:	f04f 0801 	mov.w	r8, #1
    9ebe:	e9cd 3600 	strd	r3, r6, [sp]
    9ec2:	f8cd 8008 	str.w	r8, [sp, #8]
    9ec6:	4632      	mov	r2, r6
    9ec8:	210d      	movs	r1, #13
    9eca:	4620      	mov	r0, r4
    9ecc:	f7ff fb7c 	bl	95c8 <dw1000_write_reg>
    if (control.delay_start_enabled){
    9ed0:	b33d      	cbz	r5, 9f22 <dw1000_start_tx+0xcc>
        sys_status_reg = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint16_t)); // Read at offset 3 to get the upper 2 bytes out of 5
    9ed2:	2203      	movs	r2, #3
    9ed4:	2302      	movs	r3, #2
    9ed6:	210f      	movs	r1, #15
    9ed8:	4620      	mov	r0, r4
    9eda:	f7ff fb23 	bl	9524 <dw1000_read_reg>
        inst->uwb_dev.status.start_tx_error = (sys_status_reg & ((SYS_STATUS_HPDWARN | SYS_STATUS_TXPUTE) >> 24)) != 0;
    9ede:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
    9ee2:	f410 6f81 	tst.w	r0, #1032	; 0x408
    9ee6:	bf14      	ite	ne
    9ee8:	4642      	movne	r2, r8
    9eea:	4632      	moveq	r2, r6
    9eec:	f362 0382 	bfi	r3, r2, #2, #1
    9ef0:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
        if (inst->uwb_dev.status.start_tx_error){
    9ef4:	075b      	lsls	r3, r3, #29
    9ef6:	d51a      	bpl.n	9f2e <dw1000_start_tx+0xd8>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) SYS_CTRL_TRXOFF, sizeof(uint8_t));
    9ef8:	2240      	movs	r2, #64	; 0x40
    9efa:	2300      	movs	r3, #0
    9efc:	e9cd 2300 	strd	r2, r3, [sp]
    9f00:	4620      	mov	r0, r4
    9f02:	f8cd 8008 	str.w	r8, [sp, #8]
    9f06:	4632      	mov	r2, r6
    9f08:	210d      	movs	r1, #13
    9f0a:	f7ff fb5d 	bl	95c8 <dw1000_write_reg>
    return (dpl_error_t)os_sem_release(&sem->sem);
    9f0e:	4638      	mov	r0, r7
    9f10:	f003 fba2 	bl	d658 <os_sem_release>
            assert(err == DPL_OK);
    9f14:	b158      	cbz	r0, 9f2e <dw1000_start_tx+0xd8>
    9f16:	4633      	mov	r3, r6
    9f18:	4632      	mov	r2, r6
    9f1a:	4631      	mov	r1, r6
    9f1c:	4630      	mov	r0, r6
    9f1e:	f002 fc6d 	bl	c7fc <__assert_func>
        inst->uwb_dev.status.start_tx_error = 0;
    9f22:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
    9f26:	f365 0382 	bfi	r3, r5, #2, #1
    9f2a:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
    if(inst->control.sleep_after_tx) {
    9f2e:	f994 35b0 	ldrsb.w	r3, [r4, #1456]	; 0x5b0
    9f32:	2b00      	cmp	r3, #0
    9f34:	da08      	bge.n	9f48 <dw1000_start_tx+0xf2>
        inst->uwb_dev.status.sleeping = 1;
    9f36:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
    9f3a:	f043 0301 	orr.w	r3, r3, #1
    9f3e:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
    9f42:	4638      	mov	r0, r7
    9f44:	f003 fb88 	bl	d658 <os_sem_release>
    inst->control.wait4resp_enabled = false;
    9f48:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
    9f4c:	f023 034f 	bic.w	r3, r3, #79	; 0x4f
    9f50:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    9f54:	e790      	b.n	9e78 <dw1000_start_tx+0x22>

00009f56 <dw1000_tx_wait>:
{
    9f56:	b510      	push	{r4, lr}
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    9f58:	f500 64ac 	add.w	r4, r0, #1376	; 0x560
    9f5c:	4620      	mov	r0, r4
    9f5e:	f003 fbad 	bl	d6bc <os_sem_pend>
    if (rc == DPL_OK) {
    9f62:	b910      	cbnz	r0, 9f6a <dw1000_tx_wait+0x14>
    return (dpl_error_t)os_sem_release(&sem->sem);
    9f64:	4620      	mov	r0, r4
    9f66:	f003 fb77 	bl	d658 <os_sem_release>
}
    9f6a:	bd10      	pop	{r4, pc}

00009f6c <dw1000_set_delay_start>:
{
    9f6c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
    9f70:	f500 68ad 	add.w	r8, r0, #1384	; 0x568
    9f74:	4604      	mov	r4, r0
    9f76:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9f7a:	4640      	mov	r0, r8
    9f7c:	4616      	mov	r6, r2
    9f7e:	461d      	mov	r5, r3
    9f80:	f003 f944 	bl	d20c <os_mutex_pend>
    if (err != DPL_OK) {
    9f84:	4607      	mov	r7, r0
    9f86:	b150      	cbz	r0, 9f9e <dw1000_set_delay_start+0x32>
        inst->uwb_dev.status.mtx_error = 1;
    9f88:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
    9f8c:	f043 0308 	orr.w	r3, r3, #8
    9f90:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
    9f94:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    9f98:	b004      	add	sp, #16
    9f9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    inst->control.delay_start_enabled = true;
    9f9e:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
    dw1000_write_reg(inst, DX_TIME_ID, 1, dx_time >> 8, DX_TIME_LEN-1);
    9fa2:	0a36      	lsrs	r6, r6, #8
    inst->control.delay_start_enabled = true;
    9fa4:	f043 0304 	orr.w	r3, r3, #4
    9fa8:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    dw1000_write_reg(inst, DX_TIME_ID, 1, dx_time >> 8, DX_TIME_LEN-1);
    9fac:	ea46 6605 	orr.w	r6, r6, r5, lsl #24
    9fb0:	2304      	movs	r3, #4
    9fb2:	0a2d      	lsrs	r5, r5, #8
    9fb4:	4620      	mov	r0, r4
    9fb6:	e9cd 6500 	strd	r6, r5, [sp]
    9fba:	9302      	str	r3, [sp, #8]
    9fbc:	2201      	movs	r2, #1
    9fbe:	210a      	movs	r1, #10
    9fc0:	f7ff fb02 	bl	95c8 <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
    9fc4:	4640      	mov	r0, r8
    9fc6:	f003 f8cf 	bl	d168 <os_mutex_release>
    assert(err == DPL_OK);
    9fca:	2800      	cmp	r0, #0
    9fcc:	d0e2      	beq.n	9f94 <dw1000_set_delay_start+0x28>
    9fce:	463b      	mov	r3, r7
    9fd0:	463a      	mov	r2, r7
    9fd2:	4639      	mov	r1, r7
    9fd4:	4638      	mov	r0, r7
    9fd6:	f002 fc11 	bl	c7fc <__assert_func>
    9fda:	0000      	movs	r0, r0
    9fdc:	0000      	movs	r0, r0
	...

00009fe0 <dw1000_stop_rx>:
{
    9fe0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
    9fe4:	f500 68ad 	add.w	r8, r0, #1384	; 0x568
    9fe8:	4604      	mov	r4, r0
    9fea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9fee:	4640      	mov	r0, r8
    9ff0:	f003 f90c 	bl	d20c <os_mutex_pend>
    if (err != DPL_OK) {
    9ff4:	4605      	mov	r5, r0
    9ff6:	b150      	cbz	r0, a00e <dw1000_stop_rx+0x2e>
        inst->uwb_dev.status.mtx_error = 1;
    9ff8:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
    9ffc:	f043 0308 	orr.w	r3, r3, #8
    a000:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
    a004:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    a008:	b004      	add	sp, #16
    a00a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    mask = dw1000_read_reg(inst, SYS_MASK_ID, 0 , sizeof(uint32_t)) ; // Read set interrupt mask
    a00e:	4602      	mov	r2, r0
    a010:	2304      	movs	r3, #4
    a012:	210e      	movs	r1, #14
    a014:	4620      	mov	r0, r4
    a016:	f7ff fa85 	bl	9524 <dw1000_read_reg>
    dw1000_write_reg(inst, SYS_MASK_ID, 0, 0, sizeof(uint32_t)) ; // Clear interrupt mask - so we don't get any unwanted events
    a01a:	2704      	movs	r7, #4
    a01c:	2300      	movs	r3, #0
    a01e:	2200      	movs	r2, #0
    a020:	e9cd 2300 	strd	r2, r3, [sp]
    mask = dw1000_read_reg(inst, SYS_MASK_ID, 0 , sizeof(uint32_t)) ; // Read set interrupt mask
    a024:	4606      	mov	r6, r0
    dw1000_write_reg(inst, SYS_MASK_ID, 0, 0, sizeof(uint32_t)) ; // Clear interrupt mask - so we don't get any unwanted events
    a026:	462a      	mov	r2, r5
    a028:	210e      	movs	r1, #14
    a02a:	4620      	mov	r0, r4
    a02c:	9702      	str	r7, [sp, #8]
    a02e:	f7ff facb 	bl	95c8 <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) SYS_CTRL_TRXOFF, sizeof(uint8_t)); // return to idle state
    a032:	2301      	movs	r3, #1
    a034:	9302      	str	r3, [sp, #8]
    a036:	2240      	movs	r2, #64	; 0x40
    a038:	2300      	movs	r3, #0
    a03a:	e9cd 2300 	strd	r2, r3, [sp]
    a03e:	210d      	movs	r1, #13
    a040:	462a      	mov	r2, r5
    a042:	4620      	mov	r0, r4
    a044:	f7ff fac0 	bl	95c8 <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_STATUS_ID, 0, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD), sizeof(uint32_t));
    a048:	a30f      	add	r3, pc, #60	; (adr r3, a088 <dw1000_stop_rx+0xa8>)
    a04a:	e9d3 2300 	ldrd	r2, r3, [r3]
    a04e:	210f      	movs	r1, #15
    a050:	e9cd 2300 	strd	r2, r3, [sp]
    a054:	4620      	mov	r0, r4
    a056:	462a      	mov	r2, r5
    a058:	9702      	str	r7, [sp, #8]
    a05a:	f7ff fab5 	bl	95c8 <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_MASK_ID, 0, mask, sizeof(uint32_t)); // Restore mask to what it was
    a05e:	4620      	mov	r0, r4
    a060:	e9cd 6500 	strd	r6, r5, [sp]
    a064:	9702      	str	r7, [sp, #8]
    a066:	462a      	mov	r2, r5
    a068:	210e      	movs	r1, #14
    a06a:	f7ff faad 	bl	95c8 <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
    a06e:	4640      	mov	r0, r8
    a070:	f003 f87a 	bl	d168 <os_mutex_release>
    assert(err == DPL_OK);
    a074:	2800      	cmp	r0, #0
    a076:	d0c5      	beq.n	a004 <dw1000_stop_rx+0x24>
    a078:	462b      	mov	r3, r5
    a07a:	462a      	mov	r2, r5
    a07c:	4629      	mov	r1, r5
    a07e:	4628      	mov	r0, r5
    a080:	f002 fbbc 	bl	c7fc <__assert_func>
    a084:	f3af 8000 	nop.w
    a088:	2433fbf8 	.word	0x2433fbf8
    a08c:	00000000 	.word	0x00000000

0000a090 <dw1000_set_wait4resp>:
    inst->uwb_dev.status.rx_restarted = 0;
    a090:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
    a094:	f36f 03c3 	bfc	r3, #3, #1
    a098:	f880 350a 	strb.w	r3, [r0, #1290]	; 0x50a
    inst->control.wait4resp_enabled = enable;
    a09c:	f890 35b0 	ldrb.w	r3, [r0, #1456]	; 0x5b0
    a0a0:	f361 0300 	bfi	r3, r1, #0, #1
    a0a4:	f880 35b0 	strb.w	r3, [r0, #1456]	; 0x5b0
}
    a0a8:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
    a0ac:	4770      	bx	lr

0000a0ae <dw1000_set_on_error_continue>:
    inst->control.on_error_continue_enabled = enable;
    a0ae:	f890 35b0 	ldrb.w	r3, [r0, #1456]	; 0x5b0
    a0b2:	f361 1386 	bfi	r3, r1, #6, #1
    a0b6:	f880 35b0 	strb.w	r3, [r0, #1456]	; 0x5b0
}
    a0ba:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
    a0be:	4770      	bx	lr

0000a0c0 <dw1000_set_rxauto_disable>:
    inst->control.rxauto_disable = disable;
    a0c0:	f890 35b1 	ldrb.w	r3, [r0, #1457]	; 0x5b1
    a0c4:	f361 0382 	bfi	r3, r1, #2, #1
    a0c8:	f880 35b1 	strb.w	r3, [r0, #1457]	; 0x5b1
}
    a0cc:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
    a0d0:	4770      	bx	lr

0000a0d2 <dw1000_adj_rx_timeout>:
{
    a0d2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    dw1000_write_reg(inst, RX_FWTO_ID, RX_FWTO_OFFSET, timeout, sizeof(uint16_t));
    a0d4:	2302      	movs	r3, #2
    a0d6:	2200      	movs	r2, #0
    a0d8:	e9cd 1200 	strd	r1, r2, [sp]
{
    a0dc:	4604      	mov	r4, r0
    dw1000_write_reg(inst, RX_FWTO_ID, RX_FWTO_OFFSET, timeout, sizeof(uint16_t));
    a0de:	9302      	str	r3, [sp, #8]
    a0e0:	210c      	movs	r1, #12
    a0e2:	f7ff fa71 	bl	95c8 <dw1000_write_reg>
}
    a0e6:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    a0ea:	b004      	add	sp, #16
    a0ec:	bd10      	pop	{r4, pc}

0000a0ee <update_rx_window_timeout.isra.0>:
update_rx_window_timeout(struct _dw1000_dev_instance_t * inst, uint64_t rel_start)
    a0ee:	b430      	push	{r4, r5}
    uint32_t timeout = ((rx_end - rx_start) & UWB_DTU_40BMASK) >> 16;
    a0f0:	f8d0 44d8 	ldr.w	r4, [r0, #1240]	; 0x4d8
    a0f4:	f8d0 54dc 	ldr.w	r5, [r0, #1244]	; 0x4dc
    a0f8:	1aa1      	subs	r1, r4, r2
    a0fa:	eb65 0503 	sbc.w	r5, r5, r3
    a0fe:	0c09      	lsrs	r1, r1, #16
    a100:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    if (timeout > 0x7fffff) {
    a104:	020b      	lsls	r3, r1, #8
    a106:	d40a      	bmi.n	a11e <update_rx_window_timeout.isra.0+0x30>
    uint32_t timeout = ((rx_end - rx_start) & UWB_DTU_40BMASK) >> 16;
    a108:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    a10c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    a110:	4299      	cmp	r1, r3
    a112:	bf28      	it	cs
    a114:	4619      	movcs	r1, r3
}
    a116:	bc30      	pop	{r4, r5}
    dw1000_adj_rx_timeout(inst, timeout);
    a118:	b289      	uxth	r1, r1
    a11a:	f7ff bfda 	b.w	a0d2 <dw1000_adj_rx_timeout>
        timeout = 1;
    a11e:	2101      	movs	r1, #1
    a120:	e7f9      	b.n	a116 <update_rx_window_timeout.isra.0+0x28>

0000a122 <dw1000_set_rx_timeout>:
{
    a122:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
    a126:	f500 68ad 	add.w	r8, r0, #1384	; 0x568
    a12a:	4604      	mov	r4, r0
    a12c:	460f      	mov	r7, r1
    a12e:	4640      	mov	r0, r8
    a130:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a134:	f003 f86a 	bl	d20c <os_mutex_pend>
    if (err != DPL_OK) {
    a138:	4605      	mov	r5, r0
    a13a:	b150      	cbz	r0, a152 <dw1000_set_rx_timeout+0x30>
        inst->uwb_dev.status.mtx_error = 1;
    a13c:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
    a140:	f043 0308 	orr.w	r3, r3, #8
    a144:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
    a148:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    a14c:	b004      	add	sp, #16
    a14e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    inst->uwb_dev.status.rx_timeout_error = 0;
    a152:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
    a156:	f360 13c7 	bfi	r3, r0, #7, #1
    a15a:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
    sys_cfg_reg = dw1000_read_reg(inst, SYS_CFG_ID, 3, sizeof(uint8_t));
    a15e:	2203      	movs	r2, #3
    a160:	2301      	movs	r3, #1
    a162:	2104      	movs	r1, #4
    a164:	4620      	mov	r0, r4
    a166:	f7ff f9dd 	bl	9524 <dw1000_read_reg>
    inst->control.rx_timeout_enabled = timeout > 0;
    a16a:	1e3a      	subs	r2, r7, #0
    a16c:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
    a170:	bf18      	it	ne
    a172:	2201      	movne	r2, #1
    a174:	f362 1345 	bfi	r3, r2, #5, #1
    a178:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    if(inst->control.rx_timeout_enabled) {
    a17c:	069b      	lsls	r3, r3, #26
    sys_cfg_reg = dw1000_read_reg(inst, SYS_CFG_ID, 3, sizeof(uint8_t));
    a17e:	b2c6      	uxtb	r6, r0
    if(inst->control.rx_timeout_enabled) {
    a180:	d521      	bpl.n	a1c6 <dw1000_set_rx_timeout+0xa4>
        dw1000_write_reg(inst, RX_FWTO_ID, RX_FWTO_OFFSET, timeout, sizeof(uint16_t));
    a182:	2302      	movs	r3, #2
    a184:	9302      	str	r3, [sp, #8]
    a186:	e9cd 7500 	strd	r7, r5, [sp]
    a18a:	462a      	mov	r2, r5
    a18c:	210c      	movs	r1, #12
    a18e:	4620      	mov	r0, r4
    a190:	f7ff fa1a 	bl	95c8 <dw1000_write_reg>
        new_reg_val = sys_cfg_reg | (SYS_CFG_RXWTOE>>24);
    a194:	f046 0310 	orr.w	r3, r6, #16
    if (sys_cfg_reg != new_reg_val) {
    a198:	42b3      	cmp	r3, r6
    a19a:	d009      	beq.n	a1b0 <dw1000_set_rx_timeout+0x8e>
        dw1000_write_reg(inst, SYS_CFG_ID, 3, new_reg_val, sizeof(uint8_t));
    a19c:	2201      	movs	r2, #1
    a19e:	9300      	str	r3, [sp, #0]
    a1a0:	2300      	movs	r3, #0
    a1a2:	9202      	str	r2, [sp, #8]
    a1a4:	9301      	str	r3, [sp, #4]
    a1a6:	2203      	movs	r2, #3
    a1a8:	2104      	movs	r1, #4
    a1aa:	4620      	mov	r0, r4
    a1ac:	f7ff fa0c 	bl	95c8 <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
    a1b0:	4640      	mov	r0, r8
    a1b2:	f002 ffd9 	bl	d168 <os_mutex_release>
    assert(err == DPL_OK);
    a1b6:	2800      	cmp	r0, #0
    a1b8:	d0c6      	beq.n	a148 <dw1000_set_rx_timeout+0x26>
    a1ba:	2300      	movs	r3, #0
    a1bc:	461a      	mov	r2, r3
    a1be:	4619      	mov	r1, r3
    a1c0:	4618      	mov	r0, r3
    a1c2:	f002 fb1b 	bl	c7fc <__assert_func>
        new_reg_val = sys_cfg_reg & (~(SYS_CFG_RXWTOE>>24));
    a1c6:	f006 03ef 	and.w	r3, r6, #239	; 0xef
    a1ca:	e7e5      	b.n	a198 <dw1000_set_rx_timeout+0x76>

0000a1cc <dw1000_set_rx_window>:
{
    a1cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a1d0:	e9dd 7806 	ldrd	r7, r8, [sp, #24]
    a1d4:	4614      	mov	r4, r2
    a1d6:	461e      	mov	r6, r3
    a1d8:	4605      	mov	r5, r0
    dw1000_set_delay_start(inst, rx_start);
    a1da:	f7ff fec7 	bl	9f6c <dw1000_set_delay_start>
    uint32_t timeout = ((rx_end - rx_start) & UWB_DTU_40BMASK) >> 16;
    a1de:	1b39      	subs	r1, r7, r4
    a1e0:	eb68 0606 	sbc.w	r6, r8, r6
    a1e4:	0c09      	lsrs	r1, r1, #16
    a1e6:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
    if (timeout > 0x7fffff) {
    a1ea:	020b      	lsls	r3, r1, #8
    a1ec:	d418      	bmi.n	a220 <dw1000_set_rx_window+0x54>
    uint32_t timeout = ((rx_end - rx_start) & UWB_DTU_40BMASK) >> 16;
    a1ee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    a1f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    a1f6:	4299      	cmp	r1, r3
    a1f8:	bf28      	it	cs
    a1fa:	4619      	movcs	r1, r3
    inst->control.abs_timeout = 1;
    a1fc:	f895 35b1 	ldrb.w	r3, [r5, #1457]	; 0x5b1
    inst->uwb_dev.abs_timeout = rx_end;
    a200:	f8c5 74d8 	str.w	r7, [r5, #1240]	; 0x4d8
    inst->control.abs_timeout = 1;
    a204:	f043 0308 	orr.w	r3, r3, #8
    a208:	f885 35b1 	strb.w	r3, [r5, #1457]	; 0x5b1
    inst->uwb_dev.abs_timeout = rx_end;
    a20c:	f8c5 84dc 	str.w	r8, [r5, #1244]	; 0x4dc
    dw1000_set_rx_timeout(inst, timeout);
    a210:	b289      	uxth	r1, r1
    a212:	4628      	mov	r0, r5
    a214:	f7ff ff85 	bl	a122 <dw1000_set_rx_timeout>
}
    a218:	f8d5 0508 	ldr.w	r0, [r5, #1288]	; 0x508
    a21c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        timeout = 1;
    a220:	2101      	movs	r1, #1
    a222:	e7eb      	b.n	a1fc <dw1000_set_rx_window+0x30>

0000a224 <dw1000_set_abs_timeout>:
{
    a224:	b530      	push	{r4, r5, lr}
    a226:	461d      	mov	r5, r3
    inst->control.abs_timeout = 1;
    a228:	f890 35b1 	ldrb.w	r3, [r0, #1457]	; 0x5b1
    a22c:	f043 0308 	orr.w	r3, r3, #8
    a230:	f880 35b1 	strb.w	r3, [r0, #1457]	; 0x5b1
{
    a234:	4614      	mov	r4, r2
    inst->uwb_dev.abs_timeout = rx_end;
    a236:	f500 639c 	add.w	r3, r0, #1248	; 0x4e0
    a23a:	e943 4502 	strd	r4, r5, [r3, #-8]
}
    a23e:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
    a242:	bd30      	pop	{r4, r5, pc}

0000a244 <dw1000_sync_rxbufptrs>:
{
    a244:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    inst->control.start_rx_syncbuf_enabled = 1;
    a246:	f890 35b0 	ldrb.w	r3, [r0, #1456]	; 0x5b0
    a24a:	f043 0310 	orr.w	r3, r3, #16
    a24e:	f880 35b0 	strb.w	r3, [r0, #1456]	; 0x5b0
    buff = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t)); // Read 1 byte at offset 3 to get the 4th byte out of 5
    a252:	2203      	movs	r2, #3
    a254:	2301      	movs	r3, #1
    a256:	210f      	movs	r1, #15
{
    a258:	4604      	mov	r4, r0
    buff = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t)); // Read 1 byte at offset 3 to get the 4th byte out of 5
    a25a:	f7ff f963 	bl	9524 <dw1000_read_reg>
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=         // IC side Receive Buffer Pointer
    a25e:	ea80 0040 	eor.w	r0, r0, r0, lsl #1
    a262:	0603      	lsls	r3, r0, #24
    a264:	d50a      	bpl.n	a27c <dw1000_sync_rxbufptrs+0x38>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 0x01, sizeof(uint8_t)); // We need to swap RX buffer status reg (write one to toggle internally)
    a266:	2301      	movs	r3, #1
    a268:	2201      	movs	r2, #1
    a26a:	9302      	str	r3, [sp, #8]
    a26c:	2300      	movs	r3, #0
    a26e:	e9cd 2300 	strd	r2, r3, [sp]
    a272:	210d      	movs	r1, #13
    a274:	2203      	movs	r2, #3
    a276:	4620      	mov	r0, r4
    a278:	f7ff f9a6 	bl	95c8 <dw1000_write_reg>
}
    a27c:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    a280:	b004      	add	sp, #16
    a282:	bd10      	pop	{r4, pc}

0000a284 <dw1000_start_rx>:
{
    a284:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
    a288:	f500 67ad 	add.w	r7, r0, #1384	; 0x568
    a28c:	4604      	mov	r4, r0
    a28e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a292:	4638      	mov	r0, r7
    a294:	f002 ffba 	bl	d20c <os_mutex_pend>
    if (err != DPL_OK) {
    a298:	4605      	mov	r5, r0
    a29a:	b150      	cbz	r0, a2b2 <dw1000_start_rx+0x2e>
        inst->uwb_dev.status.mtx_error = 1;
    a29c:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
    a2a0:	f043 0308 	orr.w	r3, r3, #8
    a2a4:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
    a2a8:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    a2ac:	b004      	add	sp, #16
    a2ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    inst->uwb_dev.status.rx_restarted = 0;
    a2b2:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
    control = inst->control;
    a2b6:	f8d4 65b0 	ldr.w	r6, [r4, #1456]	; 0x5b0
    inst->uwb_dev.status.rx_restarted = 0;
    a2ba:	f360 03c3 	bfi	r3, r0, #3, #1
    a2be:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
    if (config->trxoff_enable){ // force return to idle state, if in RX state
    a2c2:	f894 352c 	ldrb.w	r3, [r4, #1324]	; 0x52c
    a2c6:	0698      	lsls	r0, r3, #26
    a2c8:	d513      	bpl.n	a2f2 <dw1000_start_rx+0x6e>
        uint8_t state = (uint8_t) dw1000_read_reg(inst, SYS_STATE_ID, PMSC_STATE_OFFSET, sizeof(uint8_t));
    a2ca:	2301      	movs	r3, #1
    a2cc:	2202      	movs	r2, #2
    a2ce:	2119      	movs	r1, #25
    a2d0:	4620      	mov	r0, r4
    a2d2:	f7ff f927 	bl	9524 <dw1000_read_reg>
        if(state != PMSC_STATE_IDLE){
    a2d6:	b2c0      	uxtb	r0, r0
    a2d8:	2801      	cmp	r0, #1
    a2da:	d00a      	beq.n	a2f2 <dw1000_start_rx+0x6e>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) SYS_CTRL_TRXOFF, sizeof(uint8_t));
    a2dc:	2301      	movs	r3, #1
    a2de:	2240      	movs	r2, #64	; 0x40
    a2e0:	9302      	str	r3, [sp, #8]
    a2e2:	2300      	movs	r3, #0
    a2e4:	e9cd 2300 	strd	r2, r3, [sp]
    a2e8:	210d      	movs	r1, #13
    a2ea:	462a      	mov	r2, r5
    a2ec:	4620      	mov	r0, r4
    a2ee:	f7ff f96b 	bl	95c8 <dw1000_write_reg>
    if (config->dblbuffon_enabled) {
    a2f2:	f894 352c 	ldrb.w	r3, [r4, #1324]	; 0x52c
    a2f6:	06d9      	lsls	r1, r3, #27
    a2f8:	d502      	bpl.n	a300 <dw1000_start_rx+0x7c>
        dw1000_sync_rxbufptrs(inst);
    a2fa:	4620      	mov	r0, r4
    a2fc:	f7ff ffa2 	bl	a244 <dw1000_sync_rxbufptrs>
        sys_ctrl |= SYS_CTRL_RXDLYE;
    a300:	f016 0a04 	ands.w	sl, r6, #4
    a304:	bf0c      	ite	eq
    a306:	f44f 7580 	moveq.w	r5, #256	; 0x100
    a30a:	f44f 7540 	movne.w	r5, #768	; 0x300
    if (control.wait4resp_enabled) {
    a30e:	07f2      	lsls	r2, r6, #31
        sys_ctrl |= SYS_CTRL_WAIT4RESP;
    a310:	bf48      	it	mi
    a312:	f045 0580 	orrmi.w	r5, r5, #128	; 0x80
    if (control.delay_start_enabled)
    a316:	fa5f f886 	uxtb.w	r8, r6
    dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, sys_ctrl, sizeof(uint16_t));
    a31a:	f04f 0902 	mov.w	r9, #2
    a31e:	2600      	movs	r6, #0
    a320:	e9cd 5600 	strd	r5, r6, [sp]
    a324:	f8cd 9008 	str.w	r9, [sp, #8]
    a328:	4632      	mov	r2, r6
    a32a:	210d      	movs	r1, #13
    a32c:	4620      	mov	r0, r4
    a32e:	f7ff f94b 	bl	95c8 <dw1000_write_reg>
    if (control.delay_start_enabled){   // check for errors
    a332:	f1ba 0f00 	cmp.w	sl, #0
    a336:	d039      	beq.n	a3ac <dw1000_start_rx+0x128>
        sys_status = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t));  // Read 1 byte at offset 3 to get the 4th byte out of 5
    a338:	2301      	movs	r3, #1
    a33a:	2203      	movs	r2, #3
    a33c:	210f      	movs	r1, #15
    a33e:	4620      	mov	r0, r4
    a340:	f7ff f8f0 	bl	9524 <dw1000_read_reg>
        inst->uwb_dev.status.start_rx_error = (sys_status & (SYS_STATUS_HPDWARN >> 24)) != 0;
    a344:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
    a348:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    a34c:	f360 03c3 	bfi	r3, r0, #3, #1
    a350:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
        if (inst->uwb_dev.status.start_rx_error){   // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
    a354:	071b      	lsls	r3, r3, #28
    a356:	d518      	bpl.n	a38a <dw1000_start_rx+0x106>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) SYS_CTRL_TRXOFF, sizeof(uint8_t)); // return to idle state
    a358:	2301      	movs	r3, #1
    a35a:	9302      	str	r3, [sp, #8]
    a35c:	2240      	movs	r2, #64	; 0x40
    a35e:	2300      	movs	r3, #0
    a360:	e9cd 2300 	strd	r2, r3, [sp]
    a364:	210d      	movs	r1, #13
    a366:	4632      	mov	r2, r6
    a368:	4620      	mov	r0, r4
    a36a:	f7ff f92d 	bl	95c8 <dw1000_write_reg>
            if (control.on_error_continue_enabled){
    a36e:	f018 0f40 	tst.w	r8, #64	; 0x40
    a372:	d00a      	beq.n	a38a <dw1000_start_rx+0x106>
                dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, sys_ctrl, sizeof(uint16_t)); // turn on receiver
    a374:	f405 75c0 	and.w	r5, r5, #384	; 0x180
    a378:	e9cd 5600 	strd	r5, r6, [sp]
    a37c:	f8cd 9008 	str.w	r9, [sp, #8]
    a380:	4632      	mov	r2, r6
    a382:	210d      	movs	r1, #13
    a384:	4620      	mov	r0, r4
    a386:	f7ff f91f 	bl	95c8 <dw1000_write_reg>
    inst->control.wait4resp_enabled = false;
    a38a:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
    a38e:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
    a392:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    return (dpl_error_t)os_mutex_release(&mu->mu);
    a396:	4638      	mov	r0, r7
    a398:	f002 fee6 	bl	d168 <os_mutex_release>
    assert(err == DPL_OK);
    a39c:	2800      	cmp	r0, #0
    a39e:	d083      	beq.n	a2a8 <dw1000_start_rx+0x24>
    a3a0:	2300      	movs	r3, #0
    a3a2:	461a      	mov	r2, r3
    a3a4:	4619      	mov	r1, r3
    a3a6:	4618      	mov	r0, r3
    a3a8:	f002 fa28 	bl	c7fc <__assert_func>
        inst->uwb_dev.status.start_rx_error = 0;
    a3ac:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
    a3b0:	f36a 03c3 	bfi	r3, sl, #3, #1
    a3b4:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
    a3b8:	e7e7      	b.n	a38a <dw1000_start_rx+0x106>
	...

0000a3bc <dw1000_mac_framefilter>:
{
    a3bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
    a3be:	f500 66ad 	add.w	r6, r0, #1384	; 0x568
    a3c2:	4605      	mov	r5, r0
    a3c4:	460c      	mov	r4, r1
    a3c6:	4630      	mov	r0, r6
    a3c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a3cc:	f002 ff1e 	bl	d20c <os_mutex_pend>
    if (err != DPL_OK) {
    a3d0:	4602      	mov	r2, r0
    a3d2:	b148      	cbz	r0, a3e8 <dw1000_mac_framefilter+0x2c>
        inst->uwb_dev.status.mtx_error = 1;
    a3d4:	f895 350b 	ldrb.w	r3, [r5, #1291]	; 0x50b
    a3d8:	f043 0308 	orr.w	r3, r3, #8
    a3dc:	f885 350b 	strb.w	r3, [r5, #1291]	; 0x50b
}
    a3e0:	f8d5 0508 	ldr.w	r0, [r5, #1288]	; 0x508
    a3e4:	b004      	add	sp, #16
    a3e6:	bd70      	pop	{r4, r5, r6, pc}
    sys_cfg_reg = SYS_CFG_MASK & dw1000_read_reg(inst, SYS_CFG_ID, 0, sizeof(uint32_t)) ; // Read sysconfig register
    a3e8:	2304      	movs	r3, #4
    a3ea:	4619      	mov	r1, r3
    a3ec:	4628      	mov	r0, r5
    a3ee:	f7ff f899 	bl	9524 <dw1000_read_reg>
    inst->uwb_dev.config.rx.frameFilter = enable;
    a3f2:	f8a5 451c 	strh.w	r4, [r5, #1308]	; 0x51c
    if(enable > 0){   // Enable frame filtering and configure frame types
    a3f6:	b1d4      	cbz	r4, a42e <dw1000_mac_framefilter+0x72>
        sys_cfg_reg &= ~(SYS_CFG_FF_ALL_EN);  // Clear all
    a3f8:	490e      	ldr	r1, [pc, #56]	; (a434 <dw1000_mac_framefilter+0x78>)
        sys_cfg_reg |= (enable & SYS_CFG_FF_ALL_EN) | SYS_CFG_FFE;
    a3fa:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
        sys_cfg_reg &= ~(SYS_CFG_FF_ALL_EN);  // Clear all
    a3fe:	4001      	ands	r1, r0
        sys_cfg_reg |= (enable & SYS_CFG_FF_ALL_EN) | SYS_CFG_FFE;
    a400:	430c      	orrs	r4, r1
    a402:	f044 0401 	orr.w	r4, r4, #1
    dw1000_write_reg(inst, SYS_CFG_ID,0, sys_cfg_reg, sizeof(uint32_t));
    a406:	2300      	movs	r3, #0
    a408:	2104      	movs	r1, #4
    a40a:	e9cd 4300 	strd	r4, r3, [sp]
    a40e:	461a      	mov	r2, r3
    a410:	9102      	str	r1, [sp, #8]
    a412:	4628      	mov	r0, r5
    a414:	f7ff f8d8 	bl	95c8 <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
    a418:	4630      	mov	r0, r6
    a41a:	f002 fea5 	bl	d168 <os_mutex_release>
    assert(err == DPL_OK);
    a41e:	2300      	movs	r3, #0
    a420:	2800      	cmp	r0, #0
    a422:	d0dd      	beq.n	a3e0 <dw1000_mac_framefilter+0x24>
    a424:	461a      	mov	r2, r3
    a426:	4619      	mov	r1, r3
    a428:	4618      	mov	r0, r3
    a42a:	f002 f9e7 	bl	c7fc <__assert_func>
        sys_cfg_reg &= ~(SYS_CFG_FFE);
    a42e:	4c02      	ldr	r4, [pc, #8]	; (a438 <dw1000_mac_framefilter+0x7c>)
    a430:	4004      	ands	r4, r0
    a432:	e7e8      	b.n	a406 <dw1000_mac_framefilter+0x4a>
    a434:	f047fe01 	.word	0xf047fe01
    a438:	f047fffe 	.word	0xf047fffe

0000a43c <dw1000_set_autoack>:
{
    a43c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
    a440:	f500 66ad 	add.w	r6, r0, #1384	; 0x568
    a444:	4604      	mov	r4, r0
    a446:	4688      	mov	r8, r1
    a448:	4630      	mov	r0, r6
    a44a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a44e:	f002 fedd 	bl	d20c <os_mutex_pend>
    if (err != DPL_OK) {
    a452:	4607      	mov	r7, r0
    a454:	b150      	cbz	r0, a46c <dw1000_set_autoack+0x30>
        inst->uwb_dev.status.mtx_error = 1;
    a456:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
    a45a:	f043 0308 	orr.w	r3, r3, #8
    a45e:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
    a462:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    a466:	b004      	add	sp, #16
    a468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sys_cfg_reg = SYS_CFG_MASK & dw1000_read_reg(inst, SYS_CFG_ID, 0, sizeof(uint32_t)); // Read sysconfig register
    a46c:	2304      	movs	r3, #4
    a46e:	4602      	mov	r2, r0
    a470:	4619      	mov	r1, r3
    a472:	4620      	mov	r0, r4
    a474:	f7ff f856 	bl	9524 <dw1000_read_reg>
    inst->uwb_dev.config.autoack_enabled = enable;
    a478:	f894 552c 	ldrb.w	r5, [r4, #1324]	; 0x52c
    a47c:	f368 0582 	bfi	r5, r8, #2, #1
    if(inst->uwb_dev.config.autoack_enabled){
    a480:	f015 0204 	ands.w	r2, r5, #4
    sys_cfg_reg = SYS_CFG_MASK & dw1000_read_reg(inst, SYS_CFG_ID, 0, sizeof(uint32_t)); // Read sysconfig register
    a484:	4603      	mov	r3, r0
    inst->uwb_dev.config.autoack_enabled = enable;
    a486:	f884 552c 	strb.w	r5, [r4, #1324]	; 0x52c
    if(inst->uwb_dev.config.autoack_enabled){
    a48a:	f04f 0104 	mov.w	r1, #4
    a48e:	d017      	beq.n	a4c0 <dw1000_set_autoack+0x84>
    sys_cfg_reg = SYS_CFG_MASK & dw1000_read_reg(inst, SYS_CFG_ID, 0, sizeof(uint32_t)); // Read sysconfig register
    a490:	f023 637b 	bic.w	r3, r3, #263192576	; 0xfb00000
    a494:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
        sys_cfg_reg |= SYS_CFG_AUTOACK;
    a498:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
        dw1000_write_reg(inst, SYS_CFG_ID,0, sys_cfg_reg, sizeof(uint32_t));
    a49c:	e9cd 3700 	strd	r3, r7, [sp]
    a4a0:	9102      	str	r1, [sp, #8]
    a4a2:	463a      	mov	r2, r7
        dw1000_write_reg(inst, SYS_CFG_ID,0, sys_cfg_reg, sizeof(uint32_t));
    a4a4:	4620      	mov	r0, r4
    a4a6:	f7ff f88f 	bl	95c8 <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
    a4aa:	4630      	mov	r0, r6
    a4ac:	f002 fe5c 	bl	d168 <os_mutex_release>
    assert(err == DPL_OK);
    a4b0:	2800      	cmp	r0, #0
    a4b2:	d0d6      	beq.n	a462 <dw1000_set_autoack+0x26>
    a4b4:	2300      	movs	r3, #0
    a4b6:	461a      	mov	r2, r3
    a4b8:	4619      	mov	r1, r3
    a4ba:	4618      	mov	r0, r3
    a4bc:	f002 f99e 	bl	c7fc <__assert_func>
        sys_cfg_reg &= ~SYS_CFG_AUTOACK;
    a4c0:	f023 439f 	bic.w	r3, r3, #1333788672	; 0x4f800000
    a4c4:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
        dw1000_write_reg(inst, SYS_CFG_ID,0, sys_cfg_reg, sizeof(uint32_t));
    a4c8:	e9cd 3200 	strd	r3, r2, [sp]
    a4cc:	9102      	str	r1, [sp, #8]
    a4ce:	e7e9      	b.n	a4a4 <dw1000_set_autoack+0x68>

0000a4d0 <dw1000_set_autoack_delay>:
{
    a4d0:	b530      	push	{r4, r5, lr}
    a4d2:	b085      	sub	sp, #20
    dw1000_write_reg(inst, ACK_RESP_T_ID, ACK_RESP_T_ACK_TIM_OFFSET, delay, sizeof(uint8_t));
    a4d4:	2300      	movs	r3, #0
    a4d6:	2501      	movs	r5, #1
{
    a4d8:	4604      	mov	r4, r0
    dw1000_write_reg(inst, ACK_RESP_T_ID, ACK_RESP_T_ACK_TIM_OFFSET, delay, sizeof(uint8_t));
    a4da:	9100      	str	r1, [sp, #0]
    a4dc:	9301      	str	r3, [sp, #4]
    a4de:	2203      	movs	r2, #3
    a4e0:	9502      	str	r5, [sp, #8]
    a4e2:	211a      	movs	r1, #26
    a4e4:	f7ff f870 	bl	95c8 <dw1000_write_reg>
    dw1000_set_autoack(inst, true);
    a4e8:	4629      	mov	r1, r5
    a4ea:	4620      	mov	r0, r4
    a4ec:	f7ff ffa6 	bl	a43c <dw1000_set_autoack>
}
    a4f0:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    a4f4:	b005      	add	sp, #20
    a4f6:	bd30      	pop	{r4, r5, pc}

0000a4f8 <dw1000_set_wait4resp_delay>:
{
    a4f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
    a4fa:	f500 66ad 	add.w	r6, r0, #1384	; 0x568
    a4fe:	4604      	mov	r4, r0
    a500:	460d      	mov	r5, r1
    a502:	4630      	mov	r0, r6
    a504:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a508:	f002 fe80 	bl	d20c <os_mutex_pend>
    if (err != DPL_OK) {
    a50c:	4602      	mov	r2, r0
    a50e:	b148      	cbz	r0, a524 <dw1000_set_wait4resp_delay+0x2c>
        inst->uwb_dev.status.mtx_error = 1;
    a510:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
    a514:	f043 0308 	orr.w	r3, r3, #8
    a518:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
    a51c:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    a520:	b004      	add	sp, #16
    a522:	bd70      	pop	{r4, r5, r6, pc}
    ack_resp_reg = dw1000_read_reg(inst, ACK_RESP_T_ID, 0, sizeof(uint32_t));
    a524:	2304      	movs	r3, #4
    a526:	211a      	movs	r1, #26
    a528:	4620      	mov	r0, r4
    a52a:	f7fe fffb 	bl	9524 <dw1000_read_reg>
    inst->control.wait4resp_delay_enabled = delay > 0;
    a52e:	1e2a      	subs	r2, r5, #0
    a530:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
    a534:	bf18      	it	ne
    a536:	2201      	movne	r2, #1
    a538:	f362 0341 	bfi	r3, r2, #1, #1
    a53c:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    if (inst->control.wait4resp_delay_enabled || (ack_resp_reg&ACK_RESP_T_W4R_TIM_MASK)) {
    a540:	079b      	lsls	r3, r3, #30
    a542:	d402      	bmi.n	a54a <dw1000_set_wait4resp_delay+0x52>
    a544:	f3c0 0313 	ubfx	r3, r0, #0, #20
    a548:	b16b      	cbz	r3, a566 <dw1000_set_wait4resp_delay+0x6e>
        ack_resp_reg &= ~(ACK_RESP_T_W4R_TIM_MASK) ;        // Clear the timer (19:0)
    a54a:	0d00      	lsrs	r0, r0, #20
    a54c:	0500      	lsls	r0, r0, #20
        ack_resp_reg |= (delay & ACK_RESP_T_W4R_TIM_MASK) ; // In UWB microseconds (e.g. turn the receiver on 20uus after TX)
    a54e:	f3c5 0513 	ubfx	r5, r5, #0, #20
    a552:	4328      	orrs	r0, r5
        dw1000_write_reg(inst, ACK_RESP_T_ID, 0, ack_resp_reg, sizeof(uint32_t));
    a554:	2304      	movs	r3, #4
    a556:	2200      	movs	r2, #0
    a558:	e9cd 0200 	strd	r0, r2, [sp]
    a55c:	9302      	str	r3, [sp, #8]
    a55e:	211a      	movs	r1, #26
    a560:	4620      	mov	r0, r4
    a562:	f7ff f831 	bl	95c8 <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
    a566:	4630      	mov	r0, r6
    a568:	f002 fdfe 	bl	d168 <os_mutex_release>
    assert(err == DPL_OK);
    a56c:	2800      	cmp	r0, #0
    a56e:	d0d5      	beq.n	a51c <dw1000_set_wait4resp_delay+0x24>
    a570:	2300      	movs	r3, #0
    a572:	461a      	mov	r2, r3
    a574:	4619      	mov	r1, r3
    a576:	4618      	mov	r0, r3
    a578:	f002 f940 	bl	c7fc <__assert_func>

0000a57c <dw1000_set_dblrxbuff>:
{
    a57c:	b5f0      	push	{r4, r5, r6, r7, lr}
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
    a57e:	f500 66ad 	add.w	r6, r0, #1384	; 0x568
    a582:	b085      	sub	sp, #20
    a584:	4605      	mov	r5, r0
    a586:	460f      	mov	r7, r1
    a588:	4630      	mov	r0, r6
    a58a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a58e:	f002 fe3d 	bl	d20c <os_mutex_pend>
    if (err != DPL_OK) {
    a592:	4602      	mov	r2, r0
    a594:	b148      	cbz	r0, a5aa <dw1000_set_dblrxbuff+0x2e>
        inst->uwb_dev.status.mtx_error = 1;
    a596:	f895 350b 	ldrb.w	r3, [r5, #1291]	; 0x50b
    a59a:	f043 0308 	orr.w	r3, r3, #8
    a59e:	f885 350b 	strb.w	r3, [r5, #1291]	; 0x50b
}
    a5a2:	f8d5 0508 	ldr.w	r0, [r5, #1288]	; 0x508
    a5a6:	b005      	add	sp, #20
    a5a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sys_cfg_reg = SYS_CFG_MASK & dw1000_read_reg(inst, SYS_CFG_ID, 0, sizeof(uint32_t));
    a5aa:	2304      	movs	r3, #4
    a5ac:	4619      	mov	r1, r3
    a5ae:	4628      	mov	r0, r5
    a5b0:	f7fe ffb8 	bl	9524 <dw1000_read_reg>
    inst->uwb_dev.config.dblbuffon_enabled = enable;
    a5b4:	f895 352c 	ldrb.w	r3, [r5, #1324]	; 0x52c
    a5b8:	f367 1304 	bfi	r3, r7, #4, #1
        sys_cfg_reg &= ~SYS_CFG_DIS_DRXB;
    a5bc:	f020 647b 	bic.w	r4, r0, #263192576	; 0xfb00000
    inst->uwb_dev.config.dblbuffon_enabled = enable;
    a5c0:	f885 352c 	strb.w	r3, [r5, #1324]	; 0x52c
    if(inst->uwb_dev.config.dblbuffon_enabled)
    a5c4:	06db      	lsls	r3, r3, #27
    sys_cfg_reg = SYS_CFG_MASK & dw1000_read_reg(inst, SYS_CFG_ID, 0, sizeof(uint32_t));
    a5c6:	bf58      	it	pl
    a5c8:	f424 2400 	bicpl.w	r4, r4, #524288	; 0x80000
    dw1000_write_reg(inst, SYS_CFG_ID, 0, sys_cfg_reg, sizeof(uint32_t));
    a5cc:	f04f 0300 	mov.w	r3, #0
        sys_cfg_reg &= ~SYS_CFG_DIS_DRXB;
    a5d0:	bf4c      	ite	mi
    a5d2:	f424 2401 	bicmi.w	r4, r4, #528384	; 0x81000
        sys_cfg_reg |= SYS_CFG_DIS_DRXB;
    a5d6:	f444 5480 	orrpl.w	r4, r4, #4096	; 0x1000
    dw1000_write_reg(inst, SYS_CFG_ID, 0, sys_cfg_reg, sizeof(uint32_t));
    a5da:	2104      	movs	r1, #4
    a5dc:	e9cd 4300 	strd	r4, r3, [sp]
    a5e0:	461a      	mov	r2, r3
    a5e2:	9102      	str	r1, [sp, #8]
    a5e4:	4628      	mov	r0, r5
    a5e6:	f7fe ffef 	bl	95c8 <dw1000_write_reg>
    dw1000_sync_rxbufptrs(inst);
    a5ea:	4628      	mov	r0, r5
    a5ec:	f7ff fe2a 	bl	a244 <dw1000_sync_rxbufptrs>
    return (dpl_error_t)os_mutex_release(&mu->mu);
    a5f0:	4630      	mov	r0, r6
    a5f2:	f002 fdb9 	bl	d168 <os_mutex_release>
    assert(err == DPL_OK);
    a5f6:	2300      	movs	r3, #0
    a5f8:	2800      	cmp	r0, #0
    a5fa:	d0d2      	beq.n	a5a2 <dw1000_set_dblrxbuff+0x26>
    a5fc:	461a      	mov	r2, r3
    a5fe:	4619      	mov	r1, r3
    a600:	4618      	mov	r0, r3
    a602:	f002 f8fb 	bl	c7fc <__assert_func>
	...

0000a608 <dw1000_mac_config>:
{
    a608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a60c:	4604      	mov	r4, r0
    a60e:	b087      	sub	sp, #28
        config = &inst->uwb_dev.config;
    a610:	f200 550c 	addw	r5, r0, #1292	; 0x50c
    if (config == NULL) {
    a614:	b149      	cbz	r1, a62a <dw1000_mac_config+0x22>
        memcpy(&inst->uwb_dev.config, config, sizeof(struct uwb_dev_config));
    a616:	460b      	mov	r3, r1
    a618:	f101 0224 	add.w	r2, r1, #36	; 0x24
    a61c:	f853 0b04 	ldr.w	r0, [r3], #4
    a620:	f845 0b04 	str.w	r0, [r5], #4
    a624:	4293      	cmp	r3, r2
    a626:	d1f9      	bne.n	a61c <dw1000_mac_config+0x14>
    a628:	460d      	mov	r5, r1
    chan = config->channel;
    a62a:	782e      	ldrb	r6, [r5, #0]
    prfIndex = config->prf - DWT_PRF_16M;
    a62c:	f895 9002 	ldrb.w	r9, [r5, #2]
    bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
    a630:	2e04      	cmp	r6, #4
    prfIndex = config->prf - DWT_PRF_16M;
    a632:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    a636:	fa5f f989 	uxtb.w	r9, r9
    bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
    a63a:	f000 8142 	beq.w	a8c2 <dw1000_mac_config+0x2ba>
    a63e:	1ff1      	subs	r1, r6, #7
    a640:	424b      	negs	r3, r1
    a642:	414b      	adcs	r3, r1
    reg16 = lde_replicaCoeff[config->rx.preambleCodeIndex];
    a644:	796a      	ldrb	r2, [r5, #5]
    bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
    a646:	9305      	str	r3, [sp, #20]
    reg16 = lde_replicaCoeff[config->rx.preambleCodeIndex];
    a648:	4bbb      	ldr	r3, [pc, #748]	; (a938 <dw1000_mac_config+0x330>)
    a64a:	f833 b012 	ldrh.w	fp, [r3, r2, lsl #1]
    inst->sys_cfg_reg = SYS_CFG_MASK & dw1000_read_reg(inst, SYS_CFG_ID, 0, sizeof(uint32_t));
    a64e:	2304      	movs	r3, #4
    a650:	4619      	mov	r1, r3
    a652:	2200      	movs	r2, #0
    a654:	4620      	mov	r0, r4
    a656:	f7fe ff65 	bl	9524 <dw1000_read_reg>
    if(config->dataRate == DWT_BR_110K){
    a65a:	786b      	ldrb	r3, [r5, #1]
    a65c:	2b00      	cmp	r3, #0
    a65e:	f040 8132 	bne.w	a8c6 <dw1000_mac_config+0x2be>
    inst->sys_cfg_reg = SYS_CFG_MASK & dw1000_read_reg(inst, SYS_CFG_ID, 0, sizeof(uint32_t));
    a662:	f020 607b 	bic.w	r0, r0, #263192576	; 0xfb00000
    a666:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
        inst->sys_cfg_reg |= SYS_CFG_RXM110K;
    a66a:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
    a66e:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
    inst->sys_cfg_reg |= (SYS_CFG_PHR_MODE_11 & (((uint32_t)config->rx.phrMode) << SYS_CFG_PHR_MODE_SHFT));
    a672:	79eb      	ldrb	r3, [r5, #7]
    a674:	041b      	lsls	r3, r3, #16
    a676:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    inst->sys_cfg_reg &= ~SYS_CFG_PHR_MODE_11;
    a67a:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000
    inst->sys_cfg_reg |= (SYS_CFG_PHR_MODE_11 & (((uint32_t)config->rx.phrMode) << SYS_CFG_PHR_MODE_SHFT));
    a67e:	4318      	orrs	r0, r3
    if (config->rxauto_enable)
    a680:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
    a684:	07da      	lsls	r2, r3, #31
        inst->sys_cfg_reg |=SYS_CFG_RXAUTR;
    a686:	bf4c      	ite	mi
    a688:	f040 5000 	orrmi.w	r0, r0, #536870912	; 0x20000000
        inst->sys_cfg_reg &= (~SYS_CFG_RXAUTR);
    a68c:	f020 5000 	bicpl.w	r0, r0, #536870912	; 0x20000000
    dw1000_write_reg(inst, SYS_CFG_ID, 0, inst->sys_cfg_reg, sizeof(uint32_t));
    a690:	f04f 0800 	mov.w	r8, #0
    a694:	f04f 0a04 	mov.w	sl, #4
    inst->sys_cfg_reg |= SYS_CFG_DIS_DRXB;
    a698:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
    dw1000_write_reg(inst, LDE_IF_ID, LDE_REPC_OFFSET, reg16, sizeof(uint16_t));
    a69c:	2702      	movs	r7, #2
    dw1000_write_reg(inst, SYS_CFG_ID, 0, inst->sys_cfg_reg, sizeof(uint32_t));
    a69e:	e9cd 0800 	strd	r0, r8, [sp]
    inst->sys_cfg_reg |= SYS_CFG_DIS_DRXB;
    a6a2:	f8c4 0584 	str.w	r0, [r4, #1412]	; 0x584
    dw1000_write_reg(inst, SYS_CFG_ID, 0, inst->sys_cfg_reg, sizeof(uint32_t));
    a6a6:	4642      	mov	r2, r8
    a6a8:	4651      	mov	r1, sl
    a6aa:	4620      	mov	r0, r4
    a6ac:	f8cd a008 	str.w	sl, [sp, #8]
    a6b0:	f7fe ff8a 	bl	95c8 <dw1000_write_reg>
    dw1000_write_reg(inst, LDE_IF_ID, LDE_REPC_OFFSET, reg16, sizeof(uint16_t));
    a6b4:	f642 0204 	movw	r2, #10244	; 0x2804
    a6b8:	e9cd b800 	strd	fp, r8, [sp]
    a6bc:	212e      	movs	r1, #46	; 0x2e
    a6be:	4620      	mov	r0, r4
    a6c0:	9702      	str	r7, [sp, #8]
    a6c2:	f7fe ff81 	bl	95c8 <dw1000_write_reg>
    dw1000_phy_config_lde(inst, prfIndex);
    a6c6:	4649      	mov	r1, r9
    a6c8:	4620      	mov	r0, r4
    a6ca:	f001 f8ba 	bl	b842 <dw1000_phy_config_lde>
    dw1000_write_reg(inst, FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]], sizeof(uint32_t));
    a6ce:	4b9b      	ldr	r3, [pc, #620]	; (a93c <dw1000_mac_config+0x334>)
    a6d0:	f8cd a008 	str.w	sl, [sp, #8]
    a6d4:	f813 b006 	ldrb.w	fp, [r3, r6]
    a6d8:	4b99      	ldr	r3, [pc, #612]	; (a940 <dw1000_mac_config+0x338>)
    a6da:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
    a6de:	2207      	movs	r2, #7
    a6e0:	e9cd 3800 	strd	r3, r8, [sp]
    a6e4:	212b      	movs	r1, #43	; 0x2b
    a6e6:	4620      	mov	r0, r4
    a6e8:	f7fe ff6e 	bl	95c8 <dw1000_write_reg>
    dw1000_write_reg(inst, FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]], sizeof(uint8_t));
    a6ec:	4a95      	ldr	r2, [pc, #596]	; (a944 <dw1000_mac_config+0x33c>)
    a6ee:	f812 200b 	ldrb.w	r2, [r2, fp]
    a6f2:	2301      	movs	r3, #1
    a6f4:	e9cd 2800 	strd	r2, r8, [sp]
    a6f8:	9302      	str	r3, [sp, #8]
    a6fa:	220b      	movs	r2, #11
    a6fc:	212b      	movs	r1, #43	; 0x2b
    a6fe:	4620      	mov	r0, r4
    a700:	f7fe ff62 	bl	95c8 <dw1000_write_reg>
    dw1000_write_reg(inst, RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw], sizeof(uint8_t));
    a704:	2301      	movs	r3, #1
    a706:	9a05      	ldr	r2, [sp, #20]
    a708:	9302      	str	r3, [sp, #8]
    a70a:	4b8f      	ldr	r3, [pc, #572]	; (a948 <dw1000_mac_config+0x340>)
    a70c:	5c9b      	ldrb	r3, [r3, r2]
    a70e:	2128      	movs	r1, #40	; 0x28
    a710:	e9cd 3800 	strd	r3, r8, [sp]
    a714:	220b      	movs	r2, #11
    a716:	4620      	mov	r0, r4
    a718:	f7fe ff56 	bl	95c8 <dw1000_write_reg>
    dw1000_write_reg(inst, RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]], sizeof(uint32_t));
    a71c:	4b8b      	ldr	r3, [pc, #556]	; (a94c <dw1000_mac_config+0x344>)
    a71e:	f8cd a008 	str.w	sl, [sp, #8]
    a722:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
    a726:	220c      	movs	r2, #12
    a728:	e9cd 3800 	strd	r3, r8, [sp]
    a72c:	2128      	movs	r1, #40	; 0x28
    a72e:	4620      	mov	r0, r4
    a730:	f7fe ff4a 	bl	95c8 <dw1000_write_reg>
    dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->rx.sfdType], sizeof(uint16_t));
    a734:	9702      	str	r7, [sp, #8]
    a736:	786a      	ldrb	r2, [r5, #1]
    a738:	79ab      	ldrb	r3, [r5, #6]
    a73a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    a73e:	4a84      	ldr	r2, [pc, #528]	; (a950 <dw1000_mac_config+0x348>)
    a740:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    a744:	2127      	movs	r1, #39	; 0x27
    a746:	e9cd 3800 	strd	r3, r8, [sp]
    a74a:	463a      	mov	r2, r7
    a74c:	4620      	mov	r0, r4
    a74e:	f7fe ff3b 	bl	95c8 <dw1000_write_reg>
    dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex], sizeof(uint16_t));
    a752:	4b80      	ldr	r3, [pc, #512]	; (a954 <dw1000_mac_config+0x34c>)
    a754:	9702      	str	r7, [sp, #8]
    a756:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
    a75a:	4652      	mov	r2, sl
    a75c:	e9cd 3800 	strd	r3, r8, [sp]
    a760:	2127      	movs	r1, #39	; 0x27
    a762:	4620      	mov	r0, r4
    a764:	f7fe ff30 	bl	95c8 <dw1000_write_reg>
    if(config->dataRate == DWT_BR_110K){
    a768:	786b      	ldrb	r3, [r5, #1]
    a76a:	2b00      	cmp	r3, #0
    a76c:	f040 80b0 	bne.w	a8d0 <dw1000_mac_config+0x2c8>
        dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K, sizeof(uint16_t));
    a770:	2264      	movs	r2, #100	; 0x64
    a772:	2300      	movs	r3, #0
    a774:	e9cd 2300 	strd	r2, r3, [sp]
    a778:	9702      	str	r7, [sp, #8]
    a77a:	2206      	movs	r2, #6
            dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS, sizeof(uint16_t));
    a77c:	2127      	movs	r1, #39	; 0x27
    a77e:	4620      	mov	r0, r4
    a780:	f7fe ff22 	bl	95c8 <dw1000_write_reg>
    dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE2_OFFSET,
    a784:	2304      	movs	r3, #4
    a786:	9302      	str	r3, [sp, #8]
                     digital_bb_config[prfIndex][config->rx.pacLength], sizeof(uint32_t));
    a788:	792b      	ldrb	r3, [r5, #4]
    dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE2_OFFSET,
    a78a:	4a73      	ldr	r2, [pc, #460]	; (a958 <dw1000_mac_config+0x350>)
                     digital_bb_config[prfIndex][config->rx.pacLength], sizeof(uint32_t));
    a78c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
    dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE2_OFFSET,
    a790:	2127      	movs	r1, #39	; 0x27
    a792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a796:	9300      	str	r3, [sp, #0]
    a798:	2300      	movs	r3, #0
    a79a:	9301      	str	r3, [sp, #4]
    a79c:	2208      	movs	r2, #8
    a79e:	4620      	mov	r0, r4
    a7a0:	f7fe ff12 	bl	95c8 <dw1000_write_reg>
    if(config->rx.sfdTimeout == 0)
    a7a4:	896b      	ldrh	r3, [r5, #10]
    a7a6:	b90b      	cbnz	r3, a7ac <dw1000_mac_config+0x1a4>
        config->rx.sfdTimeout= DWT_SFDTOC_DEF;
    a7a8:	2381      	movs	r3, #129	; 0x81
    a7aa:	816b      	strh	r3, [r5, #10]
    dw1000_write_reg(inst, DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->rx.sfdTimeout, sizeof(uint16_t));
    a7ac:	f04f 0a02 	mov.w	sl, #2
    a7b0:	f8cd a008 	str.w	sl, [sp, #8]
    a7b4:	896b      	ldrh	r3, [r5, #10]
    a7b6:	2700      	movs	r7, #0
    a7b8:	e9cd 3700 	strd	r3, r7, [sp]
    a7bc:	2220      	movs	r2, #32
    a7be:	2127      	movs	r1, #39	; 0x27
    a7c0:	4620      	mov	r0, r4
    a7c2:	f7fe ff01 	bl	95c8 <dw1000_write_reg>
    dw1000_write_reg(inst, AGC_CTRL_ID, AGC_TUNE2_OFFSET, agc_config.lo32, sizeof(uint32_t));
    a7c6:	a35a      	add	r3, pc, #360	; (adr r3, a930 <dw1000_mac_config+0x328>)
    a7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
    a7cc:	f04f 0804 	mov.w	r8, #4
    a7d0:	e9cd 2300 	strd	r2, r3, [sp]
    a7d4:	2123      	movs	r1, #35	; 0x23
    a7d6:	220c      	movs	r2, #12
    a7d8:	4620      	mov	r0, r4
    a7da:	f8cd 8008 	str.w	r8, [sp, #8]
    a7de:	f7fe fef3 	bl	95c8 <dw1000_write_reg>
    dw1000_write_reg(inst, AGC_CTRL_ID, AGC_TUNE1_OFFSET, agc_config.target[prfIndex], sizeof(uint16_t));
    a7e2:	4b5e      	ldr	r3, [pc, #376]	; (a95c <dw1000_mac_config+0x354>)
    a7e4:	f8cd a008 	str.w	sl, [sp, #8]
    a7e8:	eb03 0949 	add.w	r9, r3, r9, lsl #1
    a7ec:	4620      	mov	r0, r4
    a7ee:	f8b9 3004 	ldrh.w	r3, [r9, #4]
    a7f2:	4642      	mov	r2, r8
    a7f4:	e9cd 3700 	strd	r3, r7, [sp]
    a7f8:	2123      	movs	r1, #35	; 0x23
    a7fa:	f7fe fee5 	bl	95c8 <dw1000_write_reg>
    if(config->rx.sfdType){
    a7fe:	79a8      	ldrb	r0, [r5, #6]
    a800:	2800      	cmp	r0, #0
    a802:	f000 8088 	beq.w	a916 <dw1000_mac_config+0x30e>
        dw1000_write_reg(inst, USR_SFD_ID, 0x0, dwnsSFDlen[config->dataRate], sizeof(uint8_t));
    a806:	f04f 0801 	mov.w	r8, #1
    a80a:	f8cd 8008 	str.w	r8, [sp, #8]
    a80e:	786b      	ldrb	r3, [r5, #1]
    a810:	4a53      	ldr	r2, [pc, #332]	; (a960 <dw1000_mac_config+0x358>)
    a812:	5cd3      	ldrb	r3, [r2, r3]
    a814:	4620      	mov	r0, r4
    a816:	463a      	mov	r2, r7
    a818:	e9cd 3700 	strd	r3, r7, [sp]
    a81c:	2121      	movs	r1, #33	; 0x21
    a81e:	f7fe fed3 	bl	95c8 <dw1000_write_reg>
        useDWnsSFD = 1 ;
    a822:	4642      	mov	r2, r8
        nsSfd_result = 3 ;
    a824:	2003      	movs	r0, #3
    dw1000_write_reg(inst, CHAN_CTRL_ID, 0, regval, sizeof(uint32_t)) ;
    a826:	2704      	movs	r7, #4
    a828:	9702      	str	r7, [sp, #8]
        (CHAN_CTRL_RX_PCOD_MASK & (((uint32_t)config->rx.preambleCodeIndex) << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
    a82a:	7969      	ldrb	r1, [r5, #5]
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (((uint32_t)chan) << CHAN_CTRL_TX_CHAN_SHIFT)) |                   // Transmit Channel
    a82c:	f006 030f 	and.w	r3, r6, #15
        (CHAN_CTRL_RX_CHAN_MASK & (((uint32_t)chan) << CHAN_CTRL_RX_CHAN_SHIFT)) |                         // Receive Channel
    a830:	40be      	lsls	r6, r7
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (((uint32_t)chan) << CHAN_CTRL_TX_CHAN_SHIFT)) |                   // Transmit Channel
    a832:	ea43 63c1 	orr.w	r3, r3, r1, lsl #27
        (CHAN_CTRL_RX_CHAN_MASK & (((uint32_t)chan) << CHAN_CTRL_RX_CHAN_SHIFT)) |                         // Receive Channel
    a836:	b2f6      	uxtb	r6, r6
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (((uint32_t)chan) << CHAN_CTRL_TX_CHAN_SHIFT)) |                   // Transmit Channel
    a838:	4333      	orrs	r3, r6
        (CHAN_CTRL_RXFPRF_MASK & (((uint32_t)config->prf) << CHAN_CTRL_RXFPRF_SHIFT)) |                    // RX PRF
    a83a:	78ae      	ldrb	r6, [r5, #2]
        (CHAN_CTRL_TX_PCOD_MASK & (((uint32_t)config->tx.preambleCodeIndex) << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
    a83c:	7d29      	ldrb	r1, [r5, #20]
        (CHAN_CTRL_RXFPRF_MASK & (((uint32_t)config->prf) << CHAN_CTRL_RXFPRF_SHIFT)) |                    // RX PRF
    a83e:	04b6      	lsls	r6, r6, #18
    a840:	f406 2640 	and.w	r6, r6, #786432	; 0xc0000
        (CHAN_CTRL_TX_PCOD_MASK & (((uint32_t)config->tx.preambleCodeIndex) << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
    a844:	0589      	lsls	r1, r1, #22
    a846:	f001 61f8 	and.w	r1, r1, #130023424	; 0x7c00000
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (((uint32_t)chan) << CHAN_CTRL_TX_CHAN_SHIFT)) |                   // Transmit Channel
    a84a:	4333      	orrs	r3, r6
    a84c:	430b      	orrs	r3, r1
    a84e:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
    a852:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
    dw1000_write_reg(inst, CHAN_CTRL_ID, 0, regval, sizeof(uint32_t)) ;
    a856:	2200      	movs	r2, #0
    a858:	e9cd 3200 	strd	r3, r2, [sp]
    a85c:	211f      	movs	r1, #31
    a85e:	4620      	mov	r0, r4
    a860:	f7fe feb2 	bl	95c8 <dw1000_write_reg>
    inst->tx_fctrl = (((uint32_t)(config->tx.preambleLength | config->prf)) << TX_FCTRL_TXPRF_SHFT) |
    a864:	7d6b      	ldrb	r3, [r5, #21]
    a866:	78a9      	ldrb	r1, [r5, #2]
    a868:	4319      	orrs	r1, r3
        (((uint32_t)config->dataRate) << TX_FCTRL_TXBR_SHFT);
    a86a:	786b      	ldrb	r3, [r5, #1]
    dw1000_write_reg(inst, TX_FCTRL_ID, 0, inst->tx_fctrl, sizeof(uint32_t));
    a86c:	9702      	str	r7, [sp, #8]
        (((uint32_t)config->dataRate) << TX_FCTRL_TXBR_SHFT);
    a86e:	035b      	lsls	r3, r3, #13
    inst->tx_fctrl = (((uint32_t)(config->tx.preambleLength | config->prf)) << TX_FCTRL_TXPRF_SHFT) |
    a870:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    dw1000_write_reg(inst, TX_FCTRL_ID, 0, inst->tx_fctrl, sizeof(uint32_t));
    a874:	2200      	movs	r2, #0
    inst->tx_fctrl = (((uint32_t)(config->tx.preambleLength | config->prf)) << TX_FCTRL_TXPRF_SHFT) |
    a876:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    dw1000_write_reg(inst, TX_FCTRL_ID, 0, inst->tx_fctrl, sizeof(uint32_t));
    a87a:	9300      	str	r3, [sp, #0]
    a87c:	9201      	str	r2, [sp, #4]
    a87e:	2108      	movs	r1, #8
    a880:	4620      	mov	r0, r4
    a882:	f7fe fea1 	bl	95c8 <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF, sizeof(uint8_t));
    a886:	2301      	movs	r3, #1
    a888:	2042      	movs	r0, #66	; 0x42
    a88a:	2100      	movs	r1, #0
    a88c:	e9cd 0100 	strd	r0, r1, [sp]
    a890:	9302      	str	r3, [sp, #8]
    a892:	2200      	movs	r2, #0
    a894:	210d      	movs	r1, #13
    a896:	4620      	mov	r0, r4
    a898:	f7fe fe96 	bl	95c8 <dw1000_write_reg>
    dw1000_mac_framefilter(inst, config->rx.frameFilter);
    a89c:	8a29      	ldrh	r1, [r5, #16]
    a89e:	4620      	mov	r0, r4
    a8a0:	f7ff fd8c 	bl	a3bc <dw1000_mac_framefilter>
    if (config->rxauto_enable)
    a8a4:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
    a8a8:	f895 2020 	ldrb.w	r2, [r5, #32]
    a8ac:	f013 0f01 	tst.w	r3, #1
    a8b0:	d033      	beq.n	a91a <dw1000_mac_config+0x312>
        assert(config->trxoff_enable);
    a8b2:	f012 0320 	ands.w	r3, r2, #32
    a8b6:	d130      	bne.n	a91a <dw1000_mac_config+0x312>
    a8b8:	461a      	mov	r2, r3
    a8ba:	4619      	mov	r1, r3
    a8bc:	4618      	mov	r0, r3
    a8be:	f001 ff9d 	bl	c7fc <__assert_func>
    bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
    a8c2:	2301      	movs	r3, #1
    a8c4:	e6be      	b.n	a644 <dw1000_mac_config+0x3c>
        inst->sys_cfg_reg &= (~SYS_CFG_RXM110K);
    a8c6:	f020 607f 	bic.w	r0, r0, #267386880	; 0xff00000
    a8ca:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
    a8ce:	e6d0      	b.n	a672 <dw1000_mac_config+0x6a>
        if(config->tx.preambleLength == DWT_PLEN_64){
    a8d0:	7d6b      	ldrb	r3, [r5, #21]
            dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64, sizeof(uint16_t));
    a8d2:	9702      	str	r7, [sp, #8]
        if(config->tx.preambleLength == DWT_PLEN_64){
    a8d4:	2b04      	cmp	r3, #4
    a8d6:	d10f      	bne.n	a8f8 <dw1000_mac_config+0x2f0>
            dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64, sizeof(uint16_t));
    a8d8:	f04f 0a10 	mov.w	sl, #16
    a8dc:	f04f 0b00 	mov.w	fp, #0
    a8e0:	e9cd ab00 	strd	sl, fp, [sp]
    a8e4:	2206      	movs	r2, #6
    a8e6:	2127      	movs	r1, #39	; 0x27
    a8e8:	4620      	mov	r0, r4
    a8ea:	f7fe fe6d 	bl	95c8 <dw1000_write_reg>
            dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64, sizeof(uint16_t));
    a8ee:	e9cd ab00 	strd	sl, fp, [sp]
    a8f2:	9702      	str	r7, [sp, #8]
            dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS, sizeof(uint16_t));
    a8f4:	2226      	movs	r2, #38	; 0x26
    a8f6:	e741      	b.n	a77c <dw1000_mac_config+0x174>
            dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8, sizeof(uint16_t));
    a8f8:	2300      	movs	r3, #0
    a8fa:	2220      	movs	r2, #32
    a8fc:	e9cd 2300 	strd	r2, r3, [sp]
    a900:	2127      	movs	r1, #39	; 0x27
    a902:	2206      	movs	r2, #6
    a904:	4620      	mov	r0, r4
    a906:	f7fe fe5f 	bl	95c8 <dw1000_write_reg>
            dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS, sizeof(uint16_t));
    a90a:	2228      	movs	r2, #40	; 0x28
    a90c:	2300      	movs	r3, #0
    a90e:	e9cd 2300 	strd	r2, r3, [sp]
    a912:	9702      	str	r7, [sp, #8]
    a914:	e7ee      	b.n	a8f4 <dw1000_mac_config+0x2ec>
    uint8_t useDWnsSFD = 0;
    a916:	4602      	mov	r2, r0
    a918:	e785      	b.n	a826 <dw1000_mac_config+0x21e>
    if(config->dblbuffon_enabled)
    a91a:	06d3      	lsls	r3, r2, #27
    a91c:	d503      	bpl.n	a926 <dw1000_mac_config+0x31e>
        dw1000_set_dblrxbuff(inst, true);
    a91e:	2101      	movs	r1, #1
    a920:	4620      	mov	r0, r4
    a922:	f7ff fe2b 	bl	a57c <dw1000_set_dblrxbuff>
}
    a926:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    a92a:	b007      	add	sp, #28
    a92c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a930:	2502a907 	.word	0x2502a907
    a934:	00000000 	.word	0x00000000
    a938:	00020412 	.word	0x00020412
    a93c:	00020388 	.word	0x00020388
    a940:	000203b8 	.word	0x000203b8
    a944:	000203d0 	.word	0x000203d0
    a948:	00020444 	.word	0x00020444
    a94c:	00020454 	.word	0x00020454
    a950:	00020446 	.word	0x00020446
    a954:	000203b0 	.word	0x000203b0
    a958:	00020390 	.word	0x00020390
    a95c:	00020380 	.word	0x00020380
    a960:	000203b4 	.word	0x000203b4

0000a964 <dw1000_read_carrier_integrator>:
{
    a964:	b508      	push	{r3, lr}
    regval = dw1000_read_reg(inst, DRX_CONF_ID, DRX_CARRIER_INT_OFFSET, DRX_CARRIER_INT_LEN);
    a966:	2228      	movs	r2, #40	; 0x28
    a968:	2303      	movs	r3, #3
    a96a:	2127      	movs	r1, #39	; 0x27
    a96c:	f7fe fdda 	bl	9524 <dw1000_read_reg>
    if (regval & B20_SIGN_EXTEND_TEST) {
    a970:	02c3      	lsls	r3, r0, #11
        regval |= B20_SIGN_EXTEND_MASK;
    a972:	bf46      	itte	mi
    a974:	ea6f 3000 	mvnmi.w	r0, r0, lsl #12
    a978:	ea6f 3010 	mvnmi.w	r0, r0, lsr #12
        regval &= DRX_CARRIER_INT_MASK;
    a97c:	f3c0 0014 	ubfxpl	r0, r0, #0, #21
}
    a980:	4240      	negs	r0, r0
    a982:	bd08      	pop	{r3, pc}
    a984:	0000      	movs	r0, r0
	...

0000a988 <dw1000_calc_clock_offset_ratio>:
{
    a988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a98c:	4603      	mov	r3, r0
    a98e:	4608      	mov	r0, r1
    if (inst->uwb_dev.config.dataRate == DWT_BR_110K) {
    a990:	f893 250d 	ldrb.w	r2, [r3, #1293]	; 0x50d
    a994:	b96a      	cbnz	r2, a9b2 <dw1000_calc_clock_offset_ratio+0x2a>
        fom = DPL_FLOAT64_INIT(DWT_FREQ_OFFSET_MULTIPLIER_110KB);
    a996:	a720      	add	r7, pc, #128	; (adr r7, aa18 <dw1000_calc_clock_offset_ratio+0x90>)
    a998:	e9d7 6700 	ldrd	r6, r7, [r7]
    switch ( inst->uwb_dev.config.channel ) {
    a99c:	f893 350c 	ldrb.w	r3, [r3, #1292]	; 0x50c
    a9a0:	3b01      	subs	r3, #1
    a9a2:	2b06      	cmp	r3, #6
    a9a4:	d829      	bhi.n	a9fa <dw1000_calc_clock_offset_ratio+0x72>
    a9a6:	e8df f003 	tbb	[pc, r3]
    a9aa:	082e      	.short	0x082e
    a9ac:	28243232 	.word	0x28243232
    a9b0:	24          	.byte	0x24
    a9b1:	00          	.byte	0x00
    dpl_float64_t fom = DPL_FLOAT64_INIT(DWT_FREQ_OFFSET_MULTIPLIER);
    a9b2:	a71b      	add	r7, pc, #108	; (adr r7, aa20 <dw1000_calc_clock_offset_ratio+0x98>)
    a9b4:	e9d7 6700 	ldrd	r6, r7, [r7]
    a9b8:	e7f0      	b.n	a99c <dw1000_calc_clock_offset_ratio+0x14>
    switch ( inst->uwb_dev.config.channel ) {
    a9ba:	a51b      	add	r5, pc, #108	; (adr r5, aa28 <dw1000_calc_clock_offset_ratio+0xa0>)
    a9bc:	e9d5 4500 	ldrd	r4, r5, [r5]
    ccor = DPL_FLOAT64_MUL(DPL_FLOAT64_I32_TO_F64(integrator_val), DPL_FLOAT64_MUL(fom, hz_to_ppm));
    a9c0:	f013 fe90 	bl	1e6e4 <__aeabi_i2d>
    a9c4:	4622      	mov	r2, r4
    a9c6:	4680      	mov	r8, r0
    a9c8:	4689      	mov	r9, r1
    a9ca:	462b      	mov	r3, r5
    a9cc:	4630      	mov	r0, r6
    a9ce:	4639      	mov	r1, r7
    a9d0:	f013 fef2 	bl	1e7b8 <__aeabi_dmul>
    a9d4:	4602      	mov	r2, r0
    a9d6:	460b      	mov	r3, r1
    a9d8:	4640      	mov	r0, r8
    a9da:	4649      	mov	r1, r9
    a9dc:	f013 feec 	bl	1e7b8 <__aeabi_dmul>
    ccor = DPL_FLOAT64_DIV(ccor, DPL_FLOAT64_INIT(1.0e6));
    a9e0:	a313      	add	r3, pc, #76	; (adr r3, aa30 <dw1000_calc_clock_offset_ratio+0xa8>)
    a9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
    a9e6:	f014 f811 	bl	1ea0c <__aeabi_ddiv>
}
    a9ea:	ec41 0b10 	vmov	d0, r0, r1
    a9ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    case 5: hz_to_ppm = DPL_FLOAT64_INIT(DWT_HZ_TO_PPM_MULTIPLIER_CHAN_5);break;
    a9f2:	a511      	add	r5, pc, #68	; (adr r5, aa38 <dw1000_calc_clock_offset_ratio+0xb0>)
    a9f4:	e9d5 4500 	ldrd	r4, r5, [r5]
    a9f8:	e7e2      	b.n	a9c0 <dw1000_calc_clock_offset_ratio+0x38>
    default: assert(0);
    a9fa:	2300      	movs	r3, #0
    a9fc:	461a      	mov	r2, r3
    a9fe:	4619      	mov	r1, r3
    aa00:	4618      	mov	r0, r3
    aa02:	f001 fefb 	bl	c7fc <__assert_func>
    case 1: hz_to_ppm = DPL_FLOAT64_INIT(DWT_HZ_TO_PPM_MULTIPLIER_CHAN_1);break;
    aa06:	a50e      	add	r5, pc, #56	; (adr r5, aa40 <dw1000_calc_clock_offset_ratio+0xb8>)
    aa08:	e9d5 4500 	ldrd	r4, r5, [r5]
    aa0c:	e7d8      	b.n	a9c0 <dw1000_calc_clock_offset_ratio+0x38>
    case 3: hz_to_ppm = DPL_FLOAT64_INIT(DWT_HZ_TO_PPM_MULTIPLIER_CHAN_3);break;
    aa0e:	a50e      	add	r5, pc, #56	; (adr r5, aa48 <dw1000_calc_clock_offset_ratio+0xc0>)
    aa10:	e9d5 4500 	ldrd	r4, r5, [r5]
    aa14:	e7d4      	b.n	a9c0 <dw1000_calc_clock_offset_ratio+0x38>
    aa16:	bf00      	nop
    aa18:	00000000 	.word	0x00000000
    aa1c:	3fddc130 	.word	0x3fddc130
    aa20:	00000000 	.word	0x00000000
    aa24:	400dc130 	.word	0x400dc130
    aa28:	90690690 	.word	0x90690690
    aa2c:	3f306906 	.word	0x3f306906
    aa30:	00000000 	.word	0x00000000
    aa34:	412e8480 	.word	0x412e8480
    aa38:	3b94f463 	.word	0x3b94f463
    aa3c:	3f24327e 	.word	0x3f24327e
    aa40:	12c12c13 	.word	0x12c12c13
    aa44:	3f32c12c 	.word	0x3f32c12c
    aa48:	7281d2c8 	.word	0x7281d2c8
    aa4c:	3f2d2c7d 	.word	0x3f2d2c7d

0000aa50 <dw1000_read_time_tracking_offset>:
{
    aa50:	b508      	push	{r3, lr}
    regval = dw1000_read_reg(inst, RX_TTCKO_ID, 0, 3);
    aa52:	2200      	movs	r2, #0
    aa54:	2303      	movs	r3, #3
    aa56:	2114      	movs	r1, #20
    aa58:	f7fe fd64 	bl	9524 <dw1000_read_reg>
    if (regval & B18_SIGN_EXTEND_TEST) {
    aa5c:	0343      	lsls	r3, r0, #13
        regval |= B18_SIGN_EXTEND_MASK;
    aa5e:	bf46      	itte	mi
    aa60:	ea6f 3080 	mvnmi.w	r0, r0, lsl #14
    aa64:	ea6f 3090 	mvnmi.w	r0, r0, lsr #14
        regval &= RX_TTCKO_RXTOFS_MASK;
    aa68:	f3c0 0012 	ubfxpl	r0, r0, #0, #19
}
    aa6c:	bd08      	pop	{r3, pc}

0000aa6e <dw1000_calc_clock_offset_ratio_ttco>:
{
    aa6e:	b570      	push	{r4, r5, r6, lr}
    if (inst->uwb_dev.config.prf != DWT_PRF_16M) {
    aa70:	f890 350e 	ldrb.w	r3, [r0, #1294]	; 0x50e
    return DPL_FLOAT64_DIV(DPL_FLOAT64_I32_TO_F64(-ttcko), DPL_FLOAT64_I32_TO_F64(denom));
    aa74:	4248      	negs	r0, r1
        denom = 0x01FC0000;
    aa76:	2b01      	cmp	r3, #1
    aa78:	bf0c      	ite	eq
    aa7a:	f04f 76f8 	moveq.w	r6, #32505856	; 0x1f00000
    aa7e:	f04f 76fe 	movne.w	r6, #33292288	; 0x1fc0000
    return DPL_FLOAT64_DIV(DPL_FLOAT64_I32_TO_F64(-ttcko), DPL_FLOAT64_I32_TO_F64(denom));
    aa82:	f013 fe2f 	bl	1e6e4 <__aeabi_i2d>
    aa86:	4604      	mov	r4, r0
    aa88:	4630      	mov	r0, r6
    aa8a:	460d      	mov	r5, r1
    aa8c:	f013 fe2a 	bl	1e6e4 <__aeabi_i2d>
    aa90:	4602      	mov	r2, r0
    aa92:	460b      	mov	r3, r1
    aa94:	4620      	mov	r0, r4
    aa96:	4629      	mov	r1, r5
    aa98:	f013 ffb8 	bl	1ea0c <__aeabi_ddiv>
}
    aa9c:	ec41 0b10 	vmov	d0, r0, r1
    aaa0:	bd70      	pop	{r4, r5, r6, pc}

0000aaa2 <dw1000_read_rxdiag>:
{
    aaa2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    dw1000_read(inst, RX_TIME_ID, RX_TIME_FP_INDEX_OFFSET, (uint8_t*)&diag->rx_time, sizeof(diag->rx_time));
    aaa4:	2604      	movs	r6, #4
{
    aaa6:	460c      	mov	r4, r1
    dw1000_read(inst, RX_TIME_ID, RX_TIME_FP_INDEX_OFFSET, (uint8_t*)&diag->rx_time, sizeof(diag->rx_time));
    aaa8:	1d8b      	adds	r3, r1, #6
    aaaa:	9600      	str	r6, [sp, #0]
    aaac:	2205      	movs	r2, #5
    aaae:	2115      	movs	r1, #21
{
    aab0:	4605      	mov	r5, r0
    dw1000_read(inst, RX_TIME_ID, RX_TIME_FP_INDEX_OFFSET, (uint8_t*)&diag->rx_time, sizeof(diag->rx_time));
    aab2:	f7fe fc99 	bl	93e8 <dw1000_read>
    dw1000_read(inst, RX_FQUAL_ID, 0, (uint8_t*)&diag->rx_fqual, sizeof(diag->rx_fqual));
    aab6:	2308      	movs	r3, #8
    aab8:	9300      	str	r3, [sp, #0]
    aaba:	2200      	movs	r2, #0
    aabc:	f104 030a 	add.w	r3, r4, #10
    aac0:	2112      	movs	r1, #18
    aac2:	4628      	mov	r0, r5
    aac4:	f7fe fc90 	bl	93e8 <dw1000_read>
    diag->pacc_cnt =  (dw1000_read_reg(inst, RX_FINFO_ID, 0, sizeof(uint32_t)) & RX_FINFO_RXPACC_MASK) >> RX_FINFO_RXPACC_SHIFT;
    aac8:	4633      	mov	r3, r6
    aaca:	2200      	movs	r2, #0
    aacc:	4628      	mov	r0, r5
    aace:	2110      	movs	r1, #16
    aad0:	f7fe fd28 	bl	9524 <dw1000_read_reg>
    aad4:	0d00      	lsrs	r0, r0, #20
    aad6:	8260      	strh	r0, [r4, #18]
}
    aad8:	b002      	add	sp, #8
    aada:	bd70      	pop	{r4, r5, r6, pc}
    aadc:	0000      	movs	r0, r0
	...

0000aae0 <dw1000_tasks_init>:
{
    aae0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    aae2:	4604      	mov	r4, r0
    return os_eventq_inited((struct os_eventq *) evq);
    aae4:	303c      	adds	r0, #60	; 0x3c
    aae6:	f002 f963 	bl	cdb0 <os_eventq_inited>
    if (!dpl_eventq_inited(&inst->uwb_dev.eventq))
    aaea:	b980      	cbnz	r0, ab0e <dw1000_tasks_init+0x2e>
        uwb_task_init(&inst->uwb_dev, dw1000_interrupt_ev_cb);
    aaec:	4916      	ldr	r1, [pc, #88]	; (ab48 <dw1000_tasks_init+0x68>)
    aaee:	4620      	mov	r0, r4
    aaf0:	f7fd ff92 	bl	8a18 <uwb_task_init>
        hal_gpio_irq_init(inst->irq_pin, dw1000_irq, inst, HAL_GPIO_TRIG_RISING, HAL_GPIO_PULL_DOWN);
    aaf4:	2302      	movs	r3, #2
    aaf6:	9300      	str	r3, [sp, #0]
    aaf8:	4914      	ldr	r1, [pc, #80]	; (ab4c <dw1000_tasks_init+0x6c>)
    aafa:	f894 055d 	ldrb.w	r0, [r4, #1373]	; 0x55d
    aafe:	2301      	movs	r3, #1
    ab00:	4622      	mov	r2, r4
    ab02:	f001 fadd 	bl	c0c0 <hal_gpio_irq_init>
        hal_gpio_irq_enable(inst->irq_pin);
    ab06:	f894 055d 	ldrb.w	r0, [r4, #1373]	; 0x55d
    ab0a:	f001 fb1f 	bl	c14c <hal_gpio_irq_enable>
    dw1000_phy_interrupt_mask(inst,          SYS_MASK_MCPLOCK | SYS_MASK_MRXDFR | SYS_MASK_MLDEERR | SYS_MASK_MTXFRB | SYS_MASK_MTXFRS | SYS_MASK_ALL_RX_TO   | SYS_MASK_ALL_RX_ERR | SYS_MASK_MTXBERR, false);
    ab0e:	4620      	mov	r0, r4
    ab10:	490f      	ldr	r1, [pc, #60]	; (ab50 <dw1000_tasks_init+0x70>)
    ab12:	2200      	movs	r2, #0
    ab14:	f001 f868 	bl	bbe8 <dw1000_phy_interrupt_mask>
    dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_SLP2INIT | SYS_STATUS_CPLOCK| SYS_STATUS_RXDFR | SYS_STATUS_LDEERR | SYS_STATUS_TXFRB | SYS_STATUS_TXFRS | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_TXBERR, sizeof(uint32_t));
    ab18:	2304      	movs	r3, #4
    ab1a:	9302      	str	r3, [sp, #8]
    ab1c:	a308      	add	r3, pc, #32	; (adr r3, ab40 <dw1000_tasks_init+0x60>)
    ab1e:	e9d3 2300 	ldrd	r2, r3, [r3]
    ab22:	4620      	mov	r0, r4
    ab24:	e9cd 2300 	strd	r2, r3, [sp]
    ab28:	210f      	movs	r1, #15
    ab2a:	2200      	movs	r2, #0
    ab2c:	f7fe fd4c 	bl	95c8 <dw1000_write_reg>
    dw1000_phy_interrupt_mask(inst,          SYS_MASK_MCPLOCK | SYS_MASK_MRXDFR | SYS_MASK_MLDEERR | SYS_MASK_MTXFRB | SYS_MASK_MTXFRS | SYS_MASK_ALL_RX_TO   | SYS_MASK_ALL_RX_ERR | SYS_MASK_MTXBERR, true);
    ab30:	4907      	ldr	r1, [pc, #28]	; (ab50 <dw1000_tasks_init+0x70>)
    ab32:	2201      	movs	r2, #1
    ab34:	4620      	mov	r0, r4
}
    ab36:	b004      	add	sp, #16
    ab38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dw1000_phy_interrupt_mask(inst,          SYS_MASK_MCPLOCK | SYS_MASK_MRXDFR | SYS_MASK_MLDEERR | SYS_MASK_MTXFRB | SYS_MASK_MTXFRS | SYS_MASK_ALL_RX_TO   | SYS_MASK_ALL_RX_ERR | SYS_MASK_MTXBERR, true);
    ab3c:	f001 b854 	b.w	bbe8 <dw1000_phy_interrupt_mask>
    ab40:	34b7b092 	.word	0x34b7b092
    ab44:	00000000 	.word	0x00000000
    ab48:	0000ad71 	.word	0x0000ad71
    ab4c:	00009cb9 	.word	0x00009cb9
    ab50:	3437b092 	.word	0x3437b092

0000ab54 <dw1000_mac_init>:
{
    ab54:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ab56:	4604      	mov	r4, r0
    dw1000_mac_config(inst, config);
    ab58:	f7ff fd56 	bl	a608 <dw1000_mac_config>
    dw1000_tasks_init(inst);
    ab5c:	4620      	mov	r0, r4
    ab5e:	f7ff ffbf 	bl	aae0 <dw1000_tasks_init>
        int rc = stats_init(
    ab62:	f204 55b4 	addw	r5, r4, #1460	; 0x5b4
    ab66:	220a      	movs	r2, #10
    ab68:	4b0b      	ldr	r3, [pc, #44]	; (ab98 <dw1000_mac_init+0x44>)
    ab6a:	9200      	str	r2, [sp, #0]
    ab6c:	2104      	movs	r1, #4
    ab6e:	4628      	mov	r0, r5
    ab70:	f008 fbe4 	bl	1333c <stats_init>
        assert(rc == 0);
    ab74:	b128      	cbz	r0, ab82 <dw1000_mac_init+0x2e>
    ab76:	2300      	movs	r3, #0
    ab78:	461a      	mov	r2, r3
    ab7a:	4619      	mov	r1, r3
    ab7c:	4618      	mov	r0, r3
    ab7e:	f001 fe3d 	bl	c7fc <__assert_func>
        rc = stats_register("mac", STATS_HDR(inst->stat));
    ab82:	4806      	ldr	r0, [pc, #24]	; (ab9c <dw1000_mac_init+0x48>)
    ab84:	4629      	mov	r1, r5
    ab86:	f008 fc5d 	bl	13444 <stats_register>
        assert(rc == 0);
    ab8a:	2800      	cmp	r0, #0
    ab8c:	d1f3      	bne.n	ab76 <dw1000_mac_init+0x22>
}
    ab8e:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    ab92:	b003      	add	sp, #12
    ab94:	bd30      	pop	{r4, r5, pc}
    ab96:	bf00      	nop
    ab98:	000203d6 	.word	0x000203d6
    ab9c:	00020324 	.word	0x00020324

0000aba0 <dw1000_ic_and_host_ptrs_equal>:
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return uint8_t 1 = host and ic pointers match, 0 otherwise
 */
uint8_t
dw1000_ic_and_host_ptrs_equal(dw1000_dev_instance_t * inst)
{
    aba0:	b508      	push	{r3, lr}
    uint8_t b = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t));
    aba2:	2203      	movs	r2, #3
    aba4:	2301      	movs	r3, #1
    aba6:	210f      	movs	r1, #15
    aba8:	f7fe fcbc 	bl	9524 <dw1000_read_reg>
    /* Check where the receiver is at, and if it's in the same buffer as the host */
    return (uint8_t)((b & (SYS_STATUS_ICRBP >> 24)) == ((b & (SYS_STATUS_HSRBP >> 24)) << 1));
    abac:	b2c0      	uxtb	r0, r0
    abae:	ea80 0040 	eor.w	r0, r0, r0, lsl #1
    abb2:	f080 0080 	eor.w	r0, r0, #128	; 0x80
}
    abb6:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    abba:	bd08      	pop	{r3, pc}

0000abbc <dw1000_calc_fppl>:
 * @return fppl on success, nan otherwise
 */
dpl_float32_t
dw1000_calc_fppl(struct _dw1000_dev_instance_t * inst,
                 struct _dw1000_dev_rxdiag_t * diag)
{
    abbc:	b538      	push	{r3, r4, r5, lr}
    abbe:	ed2d 8b02 	vpush	{d8}
    dpl_float32_t A, N, v, fppl;
    if (diag->pacc_cnt == 0 ||
    abc2:	8a4a      	ldrh	r2, [r1, #18]
    abc4:	b3ba      	cbz	r2, ac36 <dw1000_calc_fppl+0x7a>
        (!diag->fp_amp && !diag->fp_amp2 && !diag->fp_amp3)) {
    abc6:	890b      	ldrh	r3, [r1, #8]
    abc8:	898c      	ldrh	r4, [r1, #12]
    abca:	89c9      	ldrh	r1, [r1, #14]
    abcc:	ea43 0504 	orr.w	r5, r3, r4
    abd0:	430d      	orrs	r5, r1
    abd2:	d030      	beq.n	ac36 <dw1000_calc_fppl+0x7a>
        return DPL_FLOAT32_NAN();
    }
    A = (inst->uwb_dev.config.prf == DWT_PRF_16M) ? DPL_FLOAT32_INIT(113.77f) : DPL_FLOAT32_INIT(121.74f);
    abd4:	f890 050e 	ldrb.w	r0, [r0, #1294]	; 0x50e
    abd8:	eddf 7a18 	vldr	s15, [pc, #96]	; ac3c <dw1000_calc_fppl+0x80>
    abdc:	ed9f 8a18 	vldr	s16, [pc, #96]	; ac40 <dw1000_calc_fppl+0x84>
    abe0:	2801      	cmp	r0, #1
    abe2:	bf08      	it	eq
    abe4:	eeb0 8a67 	vmoveq.f32	s16, s15
                        ui32_to_f32(diag->fp_amp2*diag->fp_amp2)),
                ui32_to_f32(diag->fp_amp3*diag->fp_amp3));
    v = f32_div(v, f32_mul(N, N));
    fppl = f32_sub(f32_mul(DPL_FLOAT32_INIT(10.0), f64_to_f32(log10_soft(f32_to_f64(v)))), A);
#else
    N = (float)(diag->pacc_cnt);
    abe8:	ee07 2a90 	vmov	s15, r2
    v = (float)(diag->fp_amp*diag->fp_amp) +
    abec:	435b      	muls	r3, r3
    N = (float)(diag->pacc_cnt);
    abee:	eeb8 0a67 	vcvt.f32.u32	s0, s15
    v = (float)(diag->fp_amp*diag->fp_amp) +
    abf2:	ee07 3a90 	vmov	s15, r3
        (float)(diag->fp_amp2*diag->fp_amp2) +
    abf6:	4364      	muls	r4, r4
    v = (float)(diag->fp_amp*diag->fp_amp) +
    abf8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
        (float)(diag->fp_amp2*diag->fp_amp2) +
    abfc:	ee07 4a90 	vmov	s15, r4
    ac00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        (float)(diag->fp_amp3*diag->fp_amp3);
    ac04:	fb01 f301 	mul.w	r3, r1, r1
    v = (float)(diag->fp_amp*diag->fp_amp) +
    ac08:	ee36 7aa7 	vadd.f32	s14, s13, s15
        (float)(diag->fp_amp3*diag->fp_amp3);
    ac0c:	ee07 3a90 	vmov	s15, r3
    ac10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    v /= N * N;
    ac14:	ee20 0a00 	vmul.f32	s0, s0, s0
    v = (float)(diag->fp_amp*diag->fp_amp) +
    ac18:	ee77 7a27 	vadd.f32	s15, s14, s15
    fppl = 10.0f * log10f(v) - A;
    ac1c:	ee87 0a80 	vdiv.f32	s0, s15, s0
    ac20:	f014 fc02 	bl	1f428 <log10f>
    ac24:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
    ac28:	ee90 8a07 	vfnms.f32	s16, s0, s14
#endif
    return fppl;
}
    ac2c:	eeb0 0a48 	vmov.f32	s0, s16
    ac30:	ecbd 8b02 	vpop	{d8}
    ac34:	bd38      	pop	{r3, r4, r5, pc}
        return DPL_FLOAT32_NAN();
    ac36:	ed9f 8a03 	vldr	s16, [pc, #12]	; ac44 <dw1000_calc_fppl+0x88>
    ac3a:	e7f7      	b.n	ac2c <dw1000_calc_fppl+0x70>
    ac3c:	42e38a3d 	.word	0x42e38a3d
    ac40:	42f37ae1 	.word	0x42f37ae1
    ac44:	7fc00000 	.word	0x7fc00000

0000ac48 <dw1000_get_fppl>:
 * @return fppl on success, nan otherwise
 */
dpl_float32_t
dw1000_get_fppl(struct _dw1000_dev_instance_t * inst)
{
    if (!inst->uwb_dev.config.rxdiag_enable) {
    ac48:	f890 352c 	ldrb.w	r3, [r0, #1324]	; 0x52c
    ac4c:	065b      	lsls	r3, r3, #25
    ac4e:	d503      	bpl.n	ac58 <dw1000_get_fppl+0x10>
        return DPL_FLOAT32_NAN();
    }
    return dw1000_calc_fppl(inst, &inst->rxdiag);
    ac50:	f200 519c 	addw	r1, r0, #1436	; 0x59c
    ac54:	f7ff bfb2 	b.w	abbc <dw1000_calc_fppl>
}
    ac58:	ed9f 0a01 	vldr	s0, [pc, #4]	; ac60 <dw1000_get_fppl+0x18>
    ac5c:	4770      	bx	lr
    ac5e:	bf00      	nop
    ac60:	7fc00000 	.word	0x7fc00000

0000ac64 <dw1000_calc_rssi>:
 * @return rssi on success, nan otherwise
 */
dpl_float32_t
dw1000_calc_rssi(struct _dw1000_dev_instance_t * inst,
                 struct _dw1000_dev_rxdiag_t * diag)
{
    ac64:	b508      	push	{r3, lr}
    ac66:	ed2d 8b02 	vpush	{d8}
    dpl_float32_t rssi, A, B;
    uint32_t pacc_cnt = diag->pacc_cnt;
    uint32_t cir_pwr = diag->cir_pwr;
    ac6a:	8a0b      	ldrh	r3, [r1, #16]
    if (cir_pwr == 0 || pacc_cnt == 0) {
    ac6c:	b1f3      	cbz	r3, acac <dw1000_calc_rssi+0x48>
    uint32_t pacc_cnt = diag->pacc_cnt;
    ac6e:	8a4a      	ldrh	r2, [r1, #18]
    if (cir_pwr == 0 || pacc_cnt == 0) {
    ac70:	b1e2      	cbz	r2, acac <dw1000_calc_rssi+0x48>
        return DPL_FLOAT32_NAN();
    }
    B = (inst->uwb_dev.config.prf == DWT_PRF_16M) ? DPL_FLOAT32_INIT(113.77f) : DPL_FLOAT32_INIT(121.74f);
    ac72:	f890 150e 	ldrb.w	r1, [r0, #1294]	; 0x50e
    ac76:	eddf 7a0f 	vldr	s15, [pc, #60]	; acb4 <dw1000_calc_rssi+0x50>
    ac7a:	ed9f 8a0f 	vldr	s16, [pc, #60]	; acb8 <dw1000_calc_rssi+0x54>
#ifndef __KERNEL__
    A = cir_pwr * 0x20000/(pacc_cnt * pacc_cnt);
    ac7e:	4352      	muls	r2, r2
    ac80:	045b      	lsls	r3, r3, #17
    ac82:	fbb3 f3f2 	udiv	r3, r3, r2
    ac86:	ee00 3a10 	vmov	s0, r3
    B = (inst->uwb_dev.config.prf == DWT_PRF_16M) ? DPL_FLOAT32_INIT(113.77f) : DPL_FLOAT32_INIT(121.74f);
    ac8a:	2901      	cmp	r1, #1
    rssi = 10.0f * log10f(A) - B;
    ac8c:	eeb8 0a40 	vcvt.f32.u32	s0, s0
    B = (inst->uwb_dev.config.prf == DWT_PRF_16M) ? DPL_FLOAT32_INIT(113.77f) : DPL_FLOAT32_INIT(121.74f);
    ac90:	bf08      	it	eq
    ac92:	eeb0 8a67 	vmoveq.f32	s16, s15
    rssi = 10.0f * log10f(A) - B;
    ac96:	f014 fbc7 	bl	1f428 <log10f>
    ac9a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
    ac9e:	ee90 8a07 	vfnms.f32	s16, s0, s14
    A = f32_div(A, ui32_to_f32(pacc_cnt * pacc_cnt));
    A = f32_mul(i32_to_f32(10), f64_to_f32(log10_soft(f32_to_f64(A))));
    rssi = f32_sub(A, B);
#endif
    return rssi;
}
    aca2:	eeb0 0a48 	vmov.f32	s0, s16
    aca6:	ecbd 8b02 	vpop	{d8}
    acaa:	bd08      	pop	{r3, pc}
        return DPL_FLOAT32_NAN();
    acac:	ed9f 8a03 	vldr	s16, [pc, #12]	; acbc <dw1000_calc_rssi+0x58>
    acb0:	e7f7      	b.n	aca2 <dw1000_calc_rssi+0x3e>
    acb2:	bf00      	nop
    acb4:	42e38a3d 	.word	0x42e38a3d
    acb8:	42f37ae1 	.word	0x42f37ae1
    acbc:	7fc00000 	.word	0x7fc00000

0000acc0 <dw1000_get_rssi>:
 * @return rssi on success, nan otherwise
 */
dpl_float32_t
dw1000_get_rssi(struct _dw1000_dev_instance_t * inst)
{
    if (!inst->uwb_dev.config.rxdiag_enable) {
    acc0:	f890 352c 	ldrb.w	r3, [r0, #1324]	; 0x52c
    acc4:	065b      	lsls	r3, r3, #25
    acc6:	d503      	bpl.n	acd0 <dw1000_get_rssi+0x10>
        return DPL_FLOAT32_NAN();
    }
    return dw1000_calc_rssi(inst, &inst->rxdiag);
    acc8:	f200 519c 	addw	r1, r0, #1436	; 0x59c
    accc:	f7ff bfca 	b.w	ac64 <dw1000_calc_rssi>
}
    acd0:	ed9f 0a01 	vldr	s0, [pc, #4]	; acd8 <dw1000_get_rssi+0x18>
    acd4:	4770      	bx	lr
    acd6:	bf00      	nop
    acd8:	7fc00000 	.word	0x7fc00000

0000acdc <dw1000_estimate_los>:
    if (f32_lt(DPL_FLOAT32_INIT(10.0f), d)) return DPL_FLOAT32_INIT(0.0f);
    /* 1.0 - (d-6)/4.0; */
    los = f32_sub(DPL_FLOAT32_INIT(1.0f),
        f32_div(f32_sub(d, DPL_FLOAT32_INIT(6.0f)), DPL_FLOAT32_INIT(4.0f)));
#else
    d = DPL_FLOAT32_FABS(DPL_FLOAT32_SUB(rssi, fppl));
    acdc:	ee70 0a60 	vsub.f32	s1, s0, s1
    /* Less than 6dB difference - LOS */
    if (d < DPL_FLOAT32_INIT(6.0f))  return DPL_FLOAT32_INIT(1.0f);
    ace0:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
    d = DPL_FLOAT32_FABS(DPL_FLOAT32_SUB(rssi, fppl));
    ace4:	eef0 0ae0 	vabs.f32	s1, s1
    if (d < DPL_FLOAT32_INIT(6.0f))  return DPL_FLOAT32_INIT(1.0f);
    ace8:	eef4 0ac0 	vcmpe.f32	s1, s0
    acec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    acf0:	d40f      	bmi.n	ad12 <dw1000_estimate_los+0x36>
    /* More than 10dB difference - NLOS */
    if (d > DPL_FLOAT32_INIT(10.0f)) return DPL_FLOAT32_INIT(0.0f);
    acf2:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
    acf6:	eef4 0ae7 	vcmpe.f32	s1, s15
    acfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    acfe:	dc0b      	bgt.n	ad18 <dw1000_estimate_los+0x3c>
    /* 1.0 - (d-6)/4.0; */
    los = DPL_FLOAT32_SUB(DPL_FLOAT32_INIT(1.0f),
    ad00:	ee70 0ac0 	vsub.f32	s1, s1, s0
    ad04:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
    ad08:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    ad0c:	eea0 0ae7 	vfms.f32	s0, s1, s15
               DPL_FLOAT32_DIV(d - DPL_FLOAT32_INIT(6.0f),
                               DPL_FLOAT32_INIT(4.0f))
        );
#endif
    return los;
    ad10:	4770      	bx	lr
    if (d < DPL_FLOAT32_INIT(6.0f))  return DPL_FLOAT32_INIT(1.0f);
    ad12:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    ad16:	4770      	bx	lr
    if (d > DPL_FLOAT32_INIT(10.0f)) return DPL_FLOAT32_INIT(0.0f);
    ad18:	ed9f 0a01 	vldr	s0, [pc, #4]	; ad20 <dw1000_estimate_los+0x44>
}
    ad1c:	4770      	bx	lr
    ad1e:	bf00      	nop
    ad20:	00000000 	.word	0x00000000

0000ad24 <dw1000_read_systime>:
 * API to read system time.
 *
 * @param inst  Pointer to _dw1000_dev_instance_t.
 * @return time
 */
inline uint64_t dw1000_read_systime(struct _dw1000_dev_instance_t * inst){
    ad24:	b508      	push	{r3, lr}
    uint64_t time = ((uint64_t) dw1000_read_reg(inst, SYS_TIME_ID, SYS_TIME_OFFSET, SYS_TIME_LEN)) & 0x0FFFFFFFFFFULL;
    ad26:	2200      	movs	r2, #0
    ad28:	2305      	movs	r3, #5
    ad2a:	2106      	movs	r1, #6
    ad2c:	f7fe fbfa 	bl	9524 <dw1000_read_reg>
    return time;
}
    ad30:	b2c9      	uxtb	r1, r1
    ad32:	bd08      	pop	{r3, pc}

0000ad34 <dw1000_read_systime_lo>:
 *
 * @param inst  Pointer to _dw1000_dev_instance_t.
 *
 * @return time
 */
inline uint32_t dw1000_read_systime_lo(struct _dw1000_dev_instance_t * inst){
    ad34:	b508      	push	{r3, lr}
    uint32_t time = (uint32_t) dw1000_read_reg(inst, SYS_TIME_ID, SYS_TIME_OFFSET, sizeof(uint32_t));
    ad36:	2200      	movs	r2, #0
    ad38:	2304      	movs	r3, #4
    ad3a:	2106      	movs	r1, #6
    ad3c:	f7fe fbf2 	bl	9524 <dw1000_read_reg>
    return time;
}
    ad40:	bd08      	pop	{r3, pc}

0000ad42 <dw1000_read_rxtime>:
 * @param inst  Pointer to _dw1000_dev_instance_t.
 *
 * @return time
 */

inline uint64_t dw1000_read_rxtime(struct _dw1000_dev_instance_t * inst){
    ad42:	b508      	push	{r3, lr}
    uint64_t time = (uint64_t)  dw1000_read_reg(inst, RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET, RX_TIME_RX_STAMP_LEN) & 0x0FFFFFFFFFFULL;
    ad44:	2200      	movs	r2, #0
    ad46:	2305      	movs	r3, #5
    ad48:	2115      	movs	r1, #21
    ad4a:	f7fe fbeb 	bl	9524 <dw1000_read_reg>
    return time;
}
    ad4e:	b2c9      	uxtb	r1, r1
    ad50:	bd08      	pop	{r3, pc}

0000ad52 <dw1000_read_rxtime_lo>:
 *
 * @param inst  Pointer to _dw1000_dev_instance_t.
 *
 * @return time
 */
inline uint32_t dw1000_read_rxtime_lo(struct _dw1000_dev_instance_t * inst){
    ad52:	b508      	push	{r3, lr}
    uint64_t time = (uint32_t) dw1000_read_reg(inst, RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET, sizeof(uint32_t));
    ad54:	2200      	movs	r2, #0
    ad56:	2304      	movs	r3, #4
    ad58:	2115      	movs	r1, #21
    ad5a:	f7fe fbe3 	bl	9524 <dw1000_read_reg>
    return time;
}
    ad5e:	bd08      	pop	{r3, pc}

0000ad60 <dw1000_read_txtime>:
 * @param inst  Pointer to _dw1000_dev_instance_t.
 *
 * @return time
 *
 */
inline uint64_t dw1000_read_txtime(struct _dw1000_dev_instance_t * inst){
    ad60:	b508      	push	{r3, lr}
    uint64_t time = (uint64_t) dw1000_read_reg(inst, TX_TIME_ID, TX_TIME_TX_STAMP_OFFSET, TX_TIME_TX_STAMP_LEN) & 0x0FFFFFFFFFFULL;
    ad62:	2200      	movs	r2, #0
    ad64:	2305      	movs	r3, #5
    ad66:	2117      	movs	r1, #23
    ad68:	f7fe fbdc 	bl	9524 <dw1000_read_reg>
    return time;
}
    ad6c:	b2c9      	uxtb	r1, r1
    ad6e:	bd08      	pop	{r3, pc}

0000ad70 <dw1000_interrupt_ev_cb>:
{
    ad70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    return ev->ev.ev_arg;
    ad74:	6884      	ldr	r4, [r0, #8]
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    ad76:	f104 0634 	add.w	r6, r4, #52	; 0x34
    ad7a:	b085      	sub	sp, #20
    ad7c:	4605      	mov	r5, r0
    ad7e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ad82:	4630      	mov	r0, r6
    ad84:	f002 fc9a 	bl	d6bc <os_sem_pend>
    if (err != DPL_OK) {
    ad88:	4607      	mov	r7, r0
    ad8a:	b398      	cbz	r0, adf4 <dw1000_interrupt_ev_cb+0x84>
        inst->uwb_dev.status.sem_error = 1;
    ad8c:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
    ad90:	f043 0304 	orr.w	r3, r3, #4
    ad94:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
    if (hal_gpio_read(inst->irq_pin) && !dpl_event_is_queued(ev)) {
    ad98:	f894 055d 	ldrb.w	r0, [r4, #1373]	; 0x55d
    ad9c:	f001 f97e 	bl	c09c <hal_gpio_read>
    ada0:	2800      	cmp	r0, #0
    ada2:	f000 842d 	beq.w	b600 <dw1000_interrupt_ev_cb+0x890>
    ada6:	782b      	ldrb	r3, [r5, #0]
    ada8:	2b00      	cmp	r3, #0
    adaa:	f040 8429 	bne.w	b600 <dw1000_interrupt_ev_cb+0x890>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    adae:	f104 014c 	add.w	r1, r4, #76	; 0x4c
    adb2:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    adb6:	f002 f800 	bl	cdba <os_eventq_put>
        if(!inst->sys_status_bt_lock) {
    adba:	f894 3df2 	ldrb.w	r3, [r4, #3570]	; 0xdf2
    adbe:	2b00      	cmp	r3, #0
    adc0:	f040 8423 	bne.w	b60a <dw1000_interrupt_ev_cb+0x89a>
            DW1000_SYS_STATUS_BT_PTR(inst).interrupt_reentry = 1;
    adc4:	f8b4 3df0 	ldrh.w	r3, [r4, #3568]	; 0xdf0
    adc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    adcc:	eb04 1303 	add.w	r3, r4, r3, lsl #4
    add0:	f893 25f9 	ldrb.w	r2, [r3, #1529]	; 0x5f9
    add4:	f042 0201 	orr.w	r2, r2, #1
    add8:	f883 25f9 	strb.w	r2, [r3, #1529]	; 0x5f9
        DW1000_SYS_STATUS_BT_PTR(inst).utime_end = dpl_cputime_get32();
    addc:	f8b4 5df0 	ldrh.w	r5, [r4, #3568]	; 0xdf0
    ade0:	f005 fda8 	bl	10934 <dpl_cputime_get32>
    ade4:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    ade8:	eb04 1405 	add.w	r4, r4, r5, lsl #4
    adec:	f8c4 05fc 	str.w	r0, [r4, #1532]	; 0x5fc
}
    adf0:	f000 bc0b 	b.w	b60a <dw1000_interrupt_ev_cb+0x89a>
        uint32_t irq_utime = dpl_cputime_get32();
    adf4:	f005 fd9e 	bl	10934 <dpl_cputime_get32>
        inst->sys_status = dw1000_read_reg(inst, SYS_STATUS_ID, 0, sizeof(uint32_t));
    adf8:	2304      	movs	r3, #4
        uint32_t irq_utime = dpl_cputime_get32();
    adfa:	4681      	mov	r9, r0
        inst->sys_status = dw1000_read_reg(inst, SYS_STATUS_ID, 0, sizeof(uint32_t));
    adfc:	463a      	mov	r2, r7
    adfe:	210f      	movs	r1, #15
    ae00:	4620      	mov	r0, r4
    ae02:	f7fe fb8f 	bl	9524 <dw1000_read_reg>
        if (!(inst->sys_status & (SYS_MASK_MCPLOCK | SYS_MASK_MRXDFR | SYS_MASK_MLDEERR | SYS_MASK_MTXFRB | SYS_MASK_MTXFRS | SYS_MASK_ALL_RX_TO | SYS_MASK_ALL_RX_ERR | SYS_MASK_MTXBERR))) {
    ae06:	4b5f      	ldr	r3, [pc, #380]	; (af84 <dw1000_interrupt_ev_cb+0x214>)
        inst->sys_status = dw1000_read_reg(inst, SYS_STATUS_ID, 0, sizeof(uint32_t));
    ae08:	f8c4 058c 	str.w	r0, [r4, #1420]	; 0x58c
        if (!(inst->sys_status & (SYS_MASK_MCPLOCK | SYS_MASK_MRXDFR | SYS_MASK_MLDEERR | SYS_MASK_MTXFRB | SYS_MASK_MTXFRS | SYS_MASK_ALL_RX_TO | SYS_MASK_ALL_RX_ERR | SYS_MASK_MTXBERR))) {
    ae0c:	4003      	ands	r3, r0
    ae0e:	b93b      	cbnz	r3, ae20 <dw1000_interrupt_ev_cb+0xb0>
            inst->sys_status_hi = dw1000_read_reg(inst, SYS_STATUS_ID, 4, sizeof(uint8_t));
    ae10:	2301      	movs	r3, #1
    ae12:	2204      	movs	r2, #4
    ae14:	210f      	movs	r1, #15
    ae16:	4620      	mov	r0, r4
    ae18:	f7fe fb84 	bl	9524 <dw1000_read_reg>
    ae1c:	f884 0590 	strb.w	r0, [r4, #1424]	; 0x590
        if(!inst->sys_status_bt_lock) {
    ae20:	f894 1df2 	ldrb.w	r1, [r4, #3570]	; 0xdf2
            DW1000_SYS_STATUS_BT_ADD(inst, inst->sys_status, irq_utime);
    ae24:	f8d4 758c 	ldr.w	r7, [r4, #1420]	; 0x58c
        if(!inst->sys_status_bt_lock) {
    ae28:	b9a1      	cbnz	r1, ae54 <dw1000_interrupt_ev_cb+0xe4>
            DW1000_SYS_STATUS_BT_ADD(inst, inst->sys_status, irq_utime);
    ae2a:	f8b4 8df0 	ldrh.w	r8, [r4, #3568]	; 0xdf0
    ae2e:	f108 0801 	add.w	r8, r8, #1
    ae32:	fa1f f888 	uxth.w	r8, r8
    ae36:	f8a4 8df0 	strh.w	r8, [r4, #3568]	; 0xdf0
    ae3a:	f008 087f 	and.w	r8, r8, #127	; 0x7f
    ae3e:	eb04 1808 	add.w	r8, r4, r8, lsl #4
    ae42:	2210      	movs	r2, #16
    ae44:	f508 60be 	add.w	r0, r8, #1520	; 0x5f0
    ae48:	f005 fa1f 	bl	1028a <memset>
    ae4c:	f8c8 95f0 	str.w	r9, [r8, #1520]	; 0x5f0
    ae50:	f8c8 75f4 	str.w	r7, [r8, #1524]	; 0x5f4
    inst->uwb_dev.status.rx_error |= (inst->sys_status_hi & (SYS_STATUS_RXRSCS>>32)) != 0;
    ae54:	f894 2590 	ldrb.w	r2, [r4, #1424]	; 0x590
    inst->uwb_dev.status.rx_error = (inst->sys_status & SYS_STATUS_ALL_RX_ERR) !=0;
    ae58:	484b      	ldr	r0, [pc, #300]	; (af88 <dw1000_interrupt_ev_cb+0x218>)
    inst->uwb_dev.status.rx_error |= (inst->sys_status_hi & (SYS_STATUS_RXRSCS>>32)) != 0;
    ae5a:	f002 0301 	and.w	r3, r2, #1
    inst->uwb_dev.status.rx_error = (inst->sys_status & SYS_STATUS_ALL_RX_ERR) !=0;
    ae5e:	4038      	ands	r0, r7
    inst->uwb_dev.status.txbuf_error = (inst->sys_status & SYS_STATUS_TXBERR) != 0;
    ae60:	2800      	cmp	r0, #0
    ae62:	bf0c      	ite	eq
    ae64:	4619      	moveq	r1, r3
    ae66:	f043 0101 	orrne.w	r1, r3, #1
    ae6a:	f3c7 7300 	ubfx	r3, r7, #28, #1
    inst->uwb_dev.status.rx_timeout_error = (inst->sys_status & SYS_STATUS_ALL_RX_TO) !=0;
    ae6e:	f417 1f08 	tst.w	r7, #2228224	; 0x220000
    inst->uwb_dev.status.txbuf_error = (inst->sys_status & SYS_STATUS_TXBERR) != 0;
    ae72:	ea4f 1343 	mov.w	r3, r3, lsl #5
    ae76:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    inst->uwb_dev.status.rx_timeout_error = (inst->sys_status & SYS_STATUS_ALL_RX_TO) !=0;
    ae7a:	bf14      	ite	ne
    ae7c:	2101      	movne	r1, #1
    ae7e:	2100      	moveq	r1, #0
    inst->uwb_dev.status.txbuf_error = (inst->sys_status & SYS_STATUS_TXBERR) != 0;
    ae80:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
    inst->uwb_dev.status.rx_autoframefilt_rej = (inst->sys_status & SYS_STATUS_AFFREJ) !=0;
    ae84:	f3c7 7140 	ubfx	r1, r7, #29, #1
    inst->uwb_dev.status.rx_prej = (inst->sys_status_hi & (SYS_STATUS_RXPREJ>>32)) != 0;
    ae88:	f3c2 0240 	ubfx	r2, r2, #1, #1
    inst->uwb_dev.status.txbuf_error = (inst->sys_status & SYS_STATUS_TXBERR) != 0;
    ae8c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    ae90:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    inst->uwb_dev.status.lde_error = (inst->sys_status & SYS_STATUS_LDEDONE) == 0;
    ae94:	f487 6280 	eor.w	r2, r7, #1024	; 0x400
    inst->uwb_dev.status.txbuf_error = (inst->sys_status & SYS_STATUS_TXBERR) != 0;
    ae98:	f402 6280 	and.w	r2, r2, #1024	; 0x400
    ae9c:	4313      	orrs	r3, r2
    inst->uwb_dev.status.autoack_triggered = (inst->sys_status & SYS_STATUS_AAT) != 0;
    ae9e:	f3c7 02c0 	ubfx	r2, r7, #3, #1
    inst->uwb_dev.status.txbuf_error = (inst->sys_status & SYS_STATUS_TXBERR) != 0;
    aea2:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
    inst->uwb_dev.status.overrun_error = (inst->sys_status & SYS_STATUS_RXOVRR) != 0;
    aea6:	f3c7 5200 	ubfx	r2, r7, #20, #1
    inst->uwb_dev.status.txbuf_error = (inst->sys_status & SYS_STATUS_TXBERR) != 0;
    aeaa:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
    aeae:	f8d4 2508 	ldr.w	r2, [r4, #1288]	; 0x508
    aeb2:	f422 2288 	bic.w	r2, r2, #278528	; 0x44000
    aeb6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
    aeba:	4313      	orrs	r3, r2
    aebc:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    if(dpl_sem_get_count(&inst->tx_sem) == 0 && !(
    aec0:	f8b4 3566 	ldrh.w	r3, [r4, #1382]	; 0x566
    aec4:	b973      	cbnz	r3, aee4 <dw1000_interrupt_ev_cb+0x174>
    aec6:	f007 0790 	and.w	r7, r7, #144	; 0x90
    aeca:	2f10      	cmp	r7, #16
    aecc:	d00a      	beq.n	aee4 <dw1000_interrupt_ev_cb+0x174>
    return (dpl_error_t)os_sem_release(&sem->sem);
    aece:	f504 60ac 	add.w	r0, r4, #1376	; 0x560
    aed2:	f002 fbc1 	bl	d658 <os_sem_release>
        assert(err == DPL_OK);
    aed6:	b128      	cbz	r0, aee4 <dw1000_interrupt_ev_cb+0x174>
    aed8:	2300      	movs	r3, #0
    aeda:	461a      	mov	r2, r3
    aedc:	4619      	mov	r1, r3
    aede:	4618      	mov	r0, r3
    aee0:	f001 fc8c 	bl	c7fc <__assert_func>
    if((inst->sys_status & SYS_STATUS_RXFCG)){
    aee4:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
    aee8:	0459      	lsls	r1, r3, #17
    aeea:	d41a      	bmi.n	af22 <dw1000_interrupt_ev_cb+0x1b2>
    if(inst->sys_status & SYS_STATUS_TXFRB) {
    aeec:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
    aef0:	06da      	lsls	r2, r3, #27
    aef2:	f140 81ca 	bpl.w	b28a <dw1000_interrupt_ev_cb+0x51a>
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_TXFRB, sizeof(uint8_t)); // Clear TX Frame Begins
    aef6:	2301      	movs	r3, #1
    aef8:	9302      	str	r3, [sp, #8]
    aefa:	2210      	movs	r2, #16
    aefc:	2300      	movs	r3, #0
    aefe:	e9cd 2300 	strd	r2, r3, [sp]
    af02:	210f      	movs	r1, #15
    af04:	2200      	movs	r2, #0
    af06:	4620      	mov	r0, r4
    af08:	f7fe fb5e 	bl	95c8 <dw1000_write_reg>
        if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
    af0c:	f8d4 7530 	ldr.w	r7, [r4, #1328]	; 0x530
    af10:	2f00      	cmp	r7, #0
    af12:	f000 81ba 	beq.w	b28a <dw1000_interrupt_ev_cb+0x51a>
            if (cbs!=NULL && cbs->tx_begins_cb)
    af16:	68bb      	ldr	r3, [r7, #8]
    af18:	2b00      	cmp	r3, #0
    af1a:	f040 81b0 	bne.w	b27e <dw1000_interrupt_ev_cb+0x50e>
            SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
    af1e:	6bbf      	ldr	r7, [r7, #56]	; 0x38
    af20:	e7f6      	b.n	af10 <dw1000_interrupt_ev_cb+0x1a0>
        MAC_STATS_INC(DFR_cnt);
    af22:	f8d4 35d0 	ldr.w	r3, [r4, #1488]	; 0x5d0
    af26:	3301      	adds	r3, #1
    af28:	f8c4 35d0 	str.w	r3, [r4, #1488]	; 0x5d0
        if (inst->uwb_dev.status.overrun_error){
    af2c:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
    af30:	075b      	lsls	r3, r3, #29
    af32:	d52d      	bpl.n	af90 <dw1000_interrupt_ev_cb+0x220>
            MAC_STATS_INC(ROV_err);
    af34:	f8d4 35d8 	ldr.w	r3, [r4, #1496]	; 0x5d8
            dw1000_write_reg(inst, SYS_STATUS_ID, 0, (SYS_STATUS_RXOVRR |SYS_STATUS_LDEDONE | SYS_STATUS_RXDFR | SYS_STATUS_RXFCG | SYS_STATUS_RXFCE | SYS_STATUS_RXDFR), sizeof(uint32_t));
    af38:	4a14      	ldr	r2, [pc, #80]	; (af8c <dw1000_interrupt_ev_cb+0x21c>)
            MAC_STATS_INC(ROV_err);
    af3a:	3301      	adds	r3, #1
    af3c:	f8c4 35d8 	str.w	r3, [r4, #1496]	; 0x5d8
            dw1000_write_reg(inst, SYS_STATUS_ID, 0, (SYS_STATUS_RXOVRR |SYS_STATUS_LDEDONE | SYS_STATUS_RXDFR | SYS_STATUS_RXFCG | SYS_STATUS_RXFCE | SYS_STATUS_RXDFR), sizeof(uint32_t));
    af40:	2304      	movs	r3, #4
    af42:	9302      	str	r3, [sp, #8]
    af44:	2300      	movs	r3, #0
    af46:	e9cd 2300 	strd	r2, r3, [sp]
    af4a:	210f      	movs	r1, #15
    af4c:	2200      	movs	r2, #0
    af4e:	4620      	mov	r0, r4
    af50:	f7fe fb3a 	bl	95c8 <dw1000_write_reg>
            dw1000_phy_forcetrxoff(inst);
    af54:	4620      	mov	r0, r4
    af56:	f000 fdcb 	bl	baf0 <dw1000_phy_forcetrxoff>
            dw1000_phy_rx_reset(inst);
    af5a:	4620      	mov	r0, r4
    af5c:	f000 fd91 	bl	ba82 <dw1000_phy_rx_reset>
            dw1000_sync_rxbufptrs(inst);
    af60:	4620      	mov	r0, r4
    af62:	f7ff f96f 	bl	a244 <dw1000_sync_rxbufptrs>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
    af66:	2001      	movs	r0, #1
    af68:	2100      	movs	r1, #0
    af6a:	2201      	movs	r2, #1
    af6c:	e9cd 0100 	strd	r0, r1, [sp]
    af70:	9202      	str	r2, [sp, #8]
    af72:	210d      	movs	r1, #13
    af74:	4620      	mov	r0, r4
    af76:	f7fe fb27 	bl	95c8 <dw1000_write_reg>
    af7a:	4630      	mov	r0, r6
    af7c:	f002 fb6c 	bl	d658 <os_sem_release>
    af80:	e70a      	b.n	ad98 <dw1000_interrupt_ev_cb+0x28>
    af82:	bf00      	nop
    af84:	3437b092 	.word	0x3437b092
    af88:	24119000 	.word	0x24119000
    af8c:	0010e400 	.word	0x0010e400
        if (inst->uwb_dev.config.rxauto_enable == 0 && inst->uwb_dev.config.dblbuffon_enabled) {
    af90:	f8b4 352c 	ldrh.w	r3, [r4, #1324]	; 0x52c
    af94:	f403 7388 	and.w	r3, r3, #272	; 0x110
    af98:	2b10      	cmp	r3, #16
    af9a:	d11d      	bne.n	afd8 <dw1000_interrupt_ev_cb+0x268>
            if (inst->control.rxauto_disable == false && !inst->uwb_dev.status.autoack_triggered) {
    af9c:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
    afa0:	075f      	lsls	r7, r3, #29
    afa2:	d413      	bmi.n	afcc <dw1000_interrupt_ev_cb+0x25c>
    afa4:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
    afa8:	0658      	lsls	r0, r3, #25
    afaa:	d40f      	bmi.n	afcc <dw1000_interrupt_ev_cb+0x25c>
                dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
    afac:	2201      	movs	r2, #1
    afae:	2001      	movs	r0, #1
    afb0:	2100      	movs	r1, #0
    afb2:	e9cd 0100 	strd	r0, r1, [sp]
    afb6:	9202      	str	r2, [sp, #8]
    afb8:	210d      	movs	r1, #13
    afba:	4620      	mov	r0, r4
    afbc:	f7fe fb04 	bl	95c8 <dw1000_write_reg>
                inst->uwb_dev.status.rx_restarted = 1;
    afc0:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
    afc4:	f043 0308 	orr.w	r3, r3, #8
    afc8:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
            inst->control.rxauto_disable = false;
    afcc:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
    afd0:	f36f 0382 	bfc	r3, #2, #1
    afd4:	f884 35b1 	strb.w	r3, [r4, #1457]	; 0x5b1
        finfo = dw1000_read_reg(inst, RX_FINFO_ID, RX_FINFO_OFFSET, sizeof(uint16_t));
    afd8:	2302      	movs	r3, #2
    afda:	2200      	movs	r2, #0
    afdc:	2110      	movs	r1, #16
    afde:	4620      	mov	r0, r4
    afe0:	f7fe faa0 	bl	9524 <dw1000_read_reg>
        inst->uwb_dev.frame_len = (finfo & RX_FINFO_RXFL_MASK_1023);
    afe4:	f3c0 0009 	ubfx	r0, r0, #0, #10
        if (inst->uwb_dev.frame_len) inst->uwb_dev.frame_len -= 2;
    afe8:	2800      	cmp	r0, #0
    afea:	f040 80e0 	bne.w	b1ae <dw1000_interrupt_ev_cb+0x43e>
    afee:	f8a4 04e2 	strh.w	r0, [r4, #1250]	; 0x4e2
        dw1000_read_rx(inst, inst->uwb_dev.rxbuf, 0,
    aff2:	f8b4 2504 	ldrh.w	r2, [r4, #1284]	; 0x504
    aff6:	f8b4 34e2 	ldrh.w	r3, [r4, #1250]	; 0x4e2
    affa:	f8d4 14fc 	ldr.w	r1, [r4, #1276]	; 0x4fc
    affe:	4293      	cmp	r3, r2
    b000:	bf28      	it	cs
    b002:	4613      	movcs	r3, r2
    b004:	4620      	mov	r0, r4
    b006:	2200      	movs	r2, #0
    b008:	f7fe fe68 	bl	9cdc <dw1000_read_rx>
        inst->uwb_dev.fctrl = ((uint16_t)inst->uwb_dev.rxbuf[1]<<8) | inst->uwb_dev.rxbuf[0];
    b00c:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
    b010:	881a      	ldrh	r2, [r3, #0]
        if(!inst->sys_status_bt_lock) {
    b012:	f894 3df2 	ldrb.w	r3, [r4, #3570]	; 0xdf2
        inst->uwb_dev.fctrl = ((uint16_t)inst->uwb_dev.rxbuf[1]<<8) | inst->uwb_dev.rxbuf[0];
    b016:	f8a4 24e0 	strh.w	r2, [r4, #1248]	; 0x4e0
        if(!inst->sys_status_bt_lock) {
    b01a:	b93b      	cbnz	r3, b02c <dw1000_interrupt_ev_cb+0x2bc>
            DW1000_SYS_STATUS_BT_FCTRL(inst, inst->uwb_dev.fctrl);
    b01c:	f8b4 3df0 	ldrh.w	r3, [r4, #3568]	; 0xdf0
    b020:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b024:	eb04 1303 	add.w	r3, r4, r3, lsl #4
    b028:	f8a3 25fa 	strh.w	r2, [r3, #1530]	; 0x5fa
        if (inst->uwb_dev.status.lde_error) // retest lde_error condition
    b02c:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
    b030:	0759      	lsls	r1, r3, #29
    b032:	d517      	bpl.n	b064 <dw1000_interrupt_ev_cb+0x2f4>
            inst->uwb_dev.status.lde_error = (dw1000_read_reg(inst, SYS_STATUS_ID, 1, sizeof(uint8_t))  & (SYS_STATUS_LDEDONE >> 8)) == 0;
    b034:	2301      	movs	r3, #1
    b036:	461a      	mov	r2, r3
    b038:	210f      	movs	r1, #15
    b03a:	4620      	mov	r0, r4
    b03c:	f7fe fa72 	bl	9524 <dw1000_read_reg>
    b040:	0880      	lsrs	r0, r0, #2
    b042:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
    b046:	ea40 7081 	orr.w	r0, r0, r1, lsl #30
    b04a:	f080 0001 	eor.w	r0, r0, #1
    b04e:	f360 0382 	bfi	r3, r0, #2, #1
        if (inst->uwb_dev.status.lde_error) // LDE error or LDE late
    b052:	075a      	lsls	r2, r3, #29
            inst->uwb_dev.status.lde_error = (dw1000_read_reg(inst, SYS_STATUS_ID, 1, sizeof(uint8_t))  & (SYS_STATUS_LDEDONE >> 8)) == 0;
    b054:	f884 3509 	strb.w	r3, [r4, #1289]	; 0x509
            MAC_STATS_INC(LDE_err);
    b058:	bf42      	ittt	mi
    b05a:	f8d4 35e0 	ldrmi.w	r3, [r4, #1504]	; 0x5e0
    b05e:	3301      	addmi	r3, #1
    b060:	f8c4 35e0 	strmi.w	r3, [r4, #1504]	; 0x5e0
        inst->uwb_dev.rxtimestamp = dw1000_read_rxtime(inst);
    b064:	4620      	mov	r0, r4
    b066:	f7ff fe6c 	bl	ad42 <dw1000_read_rxtime>
        if (inst->control.abs_timeout) {
    b06a:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
        inst->uwb_dev.rxtimestamp = dw1000_read_rxtime(inst);
    b06e:	f8c4 04e8 	str.w	r0, [r4, #1256]	; 0x4e8
        if (inst->control.abs_timeout) {
    b072:	071b      	lsls	r3, r3, #28
        inst->uwb_dev.rxtimestamp = dw1000_read_rxtime(inst);
    b074:	4602      	mov	r2, r0
    b076:	f8c4 14ec 	str.w	r1, [r4, #1260]	; 0x4ec
        if (inst->control.abs_timeout) {
    b07a:	d503      	bpl.n	b084 <dw1000_interrupt_ev_cb+0x314>
            update_rx_window_timeout(inst, inst->uwb_dev.rxtimestamp);
    b07c:	460b      	mov	r3, r1
    b07e:	4620      	mov	r0, r4
    b080:	f7ff f835 	bl	a0ee <update_rx_window_timeout.isra.0>
        if (inst->uwb_dev.status.autoack_triggered) {
    b084:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
    b088:	065f      	lsls	r7, r3, #25
    b08a:	d51c      	bpl.n	b0c6 <dw1000_interrupt_ev_cb+0x356>
            if ((inst->uwb_dev.fctrl & UWB_FCTRL_ACK_REQUESTED) == 0){
    b08c:	f8b4 74e0 	ldrh.w	r7, [r4, #1248]	; 0x4e0
    b090:	2201      	movs	r2, #1
    b092:	f017 0720 	ands.w	r7, r7, #32
                dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_AAT, sizeof(uint8_t));
    b096:	9202      	str	r2, [sp, #8]
            if ((inst->uwb_dev.fctrl & UWB_FCTRL_ACK_REQUESTED) == 0){
    b098:	f040 808b 	bne.w	b1b2 <dw1000_interrupt_ev_cb+0x442>
                dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_AAT, sizeof(uint8_t));
    b09c:	2300      	movs	r3, #0
    b09e:	2208      	movs	r2, #8
    b0a0:	e9cd 2300 	strd	r2, r3, [sp]
    b0a4:	210f      	movs	r1, #15
    b0a6:	463a      	mov	r2, r7
    b0a8:	4620      	mov	r0, r4
    b0aa:	f7fe fa8d 	bl	95c8 <dw1000_write_reg>
                inst->sys_status &= ~SYS_STATUS_AAT;
    b0ae:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
    b0b2:	f023 0308 	bic.w	r3, r3, #8
    b0b6:	f8c4 358c 	str.w	r3, [r4, #1420]	; 0x58c
                inst->uwb_dev.status.autoack_triggered = 0;
    b0ba:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
    b0be:	f367 1386 	bfi	r3, r7, #6, #1
    b0c2:	f884 3509 	strb.w	r3, [r4, #1289]	; 0x509
        if(inst->uwb_dev.config.rxdiag_enable)
    b0c6:	f894 352c 	ldrb.w	r3, [r4, #1324]	; 0x52c
    b0ca:	0658      	lsls	r0, r3, #25
    b0cc:	d504      	bpl.n	b0d8 <dw1000_interrupt_ev_cb+0x368>
            dw1000_read_rxdiag(inst, &inst->rxdiag);
    b0ce:	f204 519c 	addw	r1, r4, #1436	; 0x59c
    b0d2:	4620      	mov	r0, r4
    b0d4:	f7ff fce5 	bl	aaa2 <dw1000_read_rxdiag>
        if (inst->uwb_dev.config.dblbuffon_enabled) {
    b0d8:	f894 352c 	ldrb.w	r3, [r4, #1324]	; 0x52c
    b0dc:	f013 0710 	ands.w	r7, r3, #16
    b0e0:	f000 80a0 	beq.w	b224 <dw1000_interrupt_ev_cb+0x4b4>
            if (inst->uwb_dev.config.rxttcko_enable) {
    b0e4:	0619      	lsls	r1, r3, #24
    b0e6:	d504      	bpl.n	b0f2 <dw1000_interrupt_ev_cb+0x382>
                inst->uwb_dev.rxttcko = dw1000_read_time_tracking_offset(inst);
    b0e8:	4620      	mov	r0, r4
    b0ea:	f7ff fcb1 	bl	aa50 <dw1000_read_time_tracking_offset>
    b0ee:	f8c4 04f4 	str.w	r0, [r4, #1268]	; 0x4f4
    uint8_t ov = dw1000_read_reg(inst, SYS_STATUS_ID, 2, sizeof(uint8_t)) & (SYS_STATUS_RXOVRR >> 16);
    b0f2:	2301      	movs	r3, #1
    b0f4:	2202      	movs	r2, #2
    b0f6:	210f      	movs	r1, #15
    b0f8:	4620      	mov	r0, r4
    b0fa:	f7fe fa13 	bl	9524 <dw1000_read_reg>
            inst->uwb_dev.status.overrun_error = dw1000_checkoverrun(inst);
    b0fe:	f894 750a 	ldrb.w	r7, [r4, #1290]	; 0x50a
    return (ov!=0);
    b102:	f3c0 1000 	ubfx	r0, r0, #4, #1
            inst->uwb_dev.status.overrun_error = dw1000_checkoverrun(inst);
    b106:	f360 0782 	bfi	r7, r0, #2, #1
    b10a:	f884 750a 	strb.w	r7, [r4, #1290]	; 0x50a
            if (inst->uwb_dev.status.overrun_error == 0) {
    b10e:	f017 0704 	ands.w	r7, r7, #4
    b112:	d166      	bne.n	b1e2 <dw1000_interrupt_ev_cb+0x472>
                if (inst->uwb_dev.config.rxauto_enable) {
    b114:	f894 352d 	ldrb.w	r3, [r4, #1325]	; 0x52d
    b118:	07da      	lsls	r2, r3, #31
    b11a:	d531      	bpl.n	b180 <dw1000_interrupt_ev_cb+0x410>
                    if (dw1000_ic_and_host_ptrs_equal(inst)) {
    b11c:	4620      	mov	r0, r4
    b11e:	f7ff fd3f 	bl	aba0 <dw1000_ic_and_host_ptrs_equal>
    b122:	2800      	cmp	r0, #0
    b124:	d052      	beq.n	b1cc <dw1000_interrupt_ev_cb+0x45c>
                        uint8_t mask = dw1000_read_reg(inst, SYS_MASK_ID, 1 , sizeof(uint8_t));
    b126:	2301      	movs	r3, #1
    b128:	461a      	mov	r2, r3
    b12a:	210e      	movs	r1, #14
    b12c:	4620      	mov	r0, r4
    b12e:	f7fe f9f9 	bl	9524 <dw1000_read_reg>
                        dw1000_write_reg(inst, SYS_MASK_ID, 1, 0, sizeof(uint8_t));
    b132:	f04f 0801 	mov.w	r8, #1
    b136:	2300      	movs	r3, #0
    b138:	2200      	movs	r2, #0
    b13a:	e9cd 2300 	strd	r2, r3, [sp]
                        uint8_t mask = dw1000_read_reg(inst, SYS_MASK_ID, 1 , sizeof(uint8_t));
    b13e:	4681      	mov	r9, r0
                        dw1000_write_reg(inst, SYS_MASK_ID, 1, 0, sizeof(uint8_t));
    b140:	4642      	mov	r2, r8
    b142:	210e      	movs	r1, #14
    b144:	4620      	mov	r0, r4
    b146:	f8cd 8008 	str.w	r8, [sp, #8]
    b14a:	f7fe fa3d 	bl	95c8 <dw1000_write_reg>
                        dw1000_write_reg(inst, SYS_STATUS_ID, 1, (inst->sys_status&(SYS_STATUS_LDEDONE | SYS_STATUS_RXDFR | SYS_STATUS_RXFCG | SYS_STATUS_RXFCE | SYS_STATUS_RXDFR))>>8, sizeof(uint8_t));
    b14e:	f8cd 8008 	str.w	r8, [sp, #8]
    b152:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
    b156:	0a1b      	lsrs	r3, r3, #8
    b158:	f003 03e4 	and.w	r3, r3, #228	; 0xe4
    b15c:	4642      	mov	r2, r8
    b15e:	210f      	movs	r1, #15
    b160:	4620      	mov	r0, r4
    b162:	e9cd 3700 	strd	r3, r7, [sp]
    b166:	f7fe fa2f 	bl	95c8 <dw1000_write_reg>
                        dw1000_write_reg(inst, SYS_MASK_ID, 1, mask, sizeof(uint8_t));
    b16a:	f009 00ff 	and.w	r0, r9, #255	; 0xff
    b16e:	e9cd 0700 	strd	r0, r7, [sp]
    b172:	f8cd 8008 	str.w	r8, [sp, #8]
    b176:	4642      	mov	r2, r8
    b178:	210e      	movs	r1, #14
                        dw1000_write_reg(inst, SYS_STATUS_ID, 1, (inst->sys_status&(SYS_STATUS_LDEDONE | SYS_STATUS_RXDFR | SYS_STATUS_RXFCG | SYS_STATUS_RXFCE | SYS_STATUS_RXDFR))>>8, sizeof(uint8_t));
    b17a:	4620      	mov	r0, r4
    b17c:	f7fe fa24 	bl	95c8 <dw1000_write_reg>
                dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0b1, sizeof(uint8_t));
    b180:	2301      	movs	r3, #1
    b182:	2201      	movs	r2, #1
    b184:	9302      	str	r3, [sp, #8]
    b186:	2300      	movs	r3, #0
    b188:	e9cd 2300 	strd	r2, r3, [sp]
    b18c:	2203      	movs	r2, #3
                dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
    b18e:	210d      	movs	r1, #13
    b190:	4620      	mov	r0, r4
    b192:	f7fe fa19 	bl	95c8 <dw1000_write_reg>
        if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
    b196:	f8d4 7530 	ldr.w	r7, [r4, #1328]	; 0x530
    b19a:	2f00      	cmp	r7, #0
    b19c:	f43f aea6 	beq.w	aeec <dw1000_interrupt_ev_cb+0x17c>
            if (cbs != NULL && cbs->rx_complete_cb)
    b1a0:	693b      	ldr	r3, [r7, #16]
    b1a2:	b113      	cbz	r3, b1aa <dw1000_interrupt_ev_cb+0x43a>
                if(cbs->rx_complete_cb((struct uwb_dev*)inst,cbs)) continue;
    b1a4:	4639      	mov	r1, r7
    b1a6:	4620      	mov	r0, r4
    b1a8:	4798      	blx	r3
            SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
    b1aa:	6bbf      	ldr	r7, [r7, #56]	; 0x38
    b1ac:	e7f5      	b.n	b19a <dw1000_interrupt_ev_cb+0x42a>
        if (inst->uwb_dev.frame_len) inst->uwb_dev.frame_len -= 2;
    b1ae:	3802      	subs	r0, #2
    b1b0:	e71d      	b.n	afee <dw1000_interrupt_ev_cb+0x27e>
                dw1000_write_reg(inst, SYS_STATUS_ID, 1, (inst->sys_status&(SYS_STATUS_LDEDONE | SYS_STATUS_RXDFR | SYS_STATUS_RXFCG | SYS_STATUS_RXFCE | SYS_STATUS_RXDFR))>>8, sizeof(uint8_t));
    b1b2:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
    b1b6:	0a1b      	lsrs	r3, r3, #8
    b1b8:	f003 03e4 	and.w	r3, r3, #228	; 0xe4
    b1bc:	9300      	str	r3, [sp, #0]
    b1be:	2300      	movs	r3, #0
    b1c0:	9301      	str	r3, [sp, #4]
    b1c2:	210f      	movs	r1, #15
    b1c4:	4620      	mov	r0, r4
    b1c6:	f7fe f9ff 	bl	95c8 <dw1000_write_reg>
    b1ca:	e77c      	b.n	b0c6 <dw1000_interrupt_ev_cb+0x356>
                        dw1000_write_reg(inst, SYS_STATUS_ID, 1, (inst->sys_status&(SYS_STATUS_LDEDONE | SYS_STATUS_RXDFR | SYS_STATUS_RXFCG | SYS_STATUS_RXFCE | SYS_STATUS_RXDFR))>>8, sizeof(uint8_t));
    b1cc:	2201      	movs	r2, #1
    b1ce:	9202      	str	r2, [sp, #8]
    b1d0:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
    b1d4:	0a1b      	lsrs	r3, r3, #8
    b1d6:	f003 03e4 	and.w	r3, r3, #228	; 0xe4
    b1da:	e9cd 3000 	strd	r3, r0, [sp]
    b1de:	210f      	movs	r1, #15
    b1e0:	e7cb      	b.n	b17a <dw1000_interrupt_ev_cb+0x40a>
                MAC_STATS_INC(ROV_err);
    b1e2:	f8d4 35d8 	ldr.w	r3, [r4, #1496]	; 0x5d8
    b1e6:	3301      	adds	r3, #1
    b1e8:	f8c4 35d8 	str.w	r3, [r4, #1496]	; 0x5d8
                dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_RXOVRR, sizeof(uint32_t));
    b1ec:	2304      	movs	r3, #4
    b1ee:	9302      	str	r3, [sp, #8]
    b1f0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    b1f4:	2300      	movs	r3, #0
    b1f6:	e9cd 2300 	strd	r2, r3, [sp]
    b1fa:	210f      	movs	r1, #15
    b1fc:	2200      	movs	r2, #0
    b1fe:	4620      	mov	r0, r4
    b200:	f7fe f9e2 	bl	95c8 <dw1000_write_reg>
                dw1000_phy_forcetrxoff(inst);
    b204:	4620      	mov	r0, r4
    b206:	f000 fc73 	bl	baf0 <dw1000_phy_forcetrxoff>
                dw1000_phy_rx_reset(inst);
    b20a:	4620      	mov	r0, r4
    b20c:	f000 fc39 	bl	ba82 <dw1000_phy_rx_reset>
                dw1000_sync_rxbufptrs(inst);
    b210:	4620      	mov	r0, r4
    b212:	f7ff f817 	bl	a244 <dw1000_sync_rxbufptrs>
                dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
    b216:	2201      	movs	r2, #1
    b218:	2001      	movs	r0, #1
    b21a:	2100      	movs	r1, #0
    b21c:	e9cd 0100 	strd	r0, r1, [sp]
    b220:	9202      	str	r2, [sp, #8]
    b222:	e7b4      	b.n	b18e <dw1000_interrupt_ev_cb+0x41e>
            inst->uwb_dev.carrier_integrator = dw1000_read_carrier_integrator(inst);
    b224:	4620      	mov	r0, r4
    b226:	f7ff fb9d 	bl	a964 <dw1000_read_carrier_integrator>
            dw1000_write_reg(inst, SYS_STATUS_ID, 0,
    b22a:	2302      	movs	r3, #2
            inst->uwb_dev.carrier_integrator = dw1000_read_carrier_integrator(inst);
    b22c:	f8c4 04f0 	str.w	r0, [r4, #1264]	; 0x4f0
            dw1000_write_reg(inst, SYS_STATUS_ID, 0,
    b230:	9302      	str	r3, [sp, #8]
    b232:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
    b236:	f403 436c 	and.w	r3, r3, #60416	; 0xec00
    b23a:	e9cd 3700 	strd	r3, r7, [sp]
    b23e:	463a      	mov	r2, r7
    b240:	210f      	movs	r1, #15
    b242:	4620      	mov	r0, r4
    b244:	f7fe f9c0 	bl	95c8 <dw1000_write_reg>
            if (inst->control.rxauto_disable == false){
    b248:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
    b24c:	075b      	lsls	r3, r3, #29
    b24e:	d40f      	bmi.n	b270 <dw1000_interrupt_ev_cb+0x500>
                dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
    b250:	2201      	movs	r2, #1
    b252:	2001      	movs	r0, #1
    b254:	2100      	movs	r1, #0
    b256:	e9cd 0100 	strd	r0, r1, [sp]
    b25a:	9202      	str	r2, [sp, #8]
    b25c:	210d      	movs	r1, #13
    b25e:	4620      	mov	r0, r4
    b260:	f7fe f9b2 	bl	95c8 <dw1000_write_reg>
                inst->uwb_dev.status.rx_restarted = 1;
    b264:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
    b268:	f043 0308 	orr.w	r3, r3, #8
    b26c:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
            inst->control.rxauto_disable = false;
    b270:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
    b274:	f36f 0382 	bfc	r3, #2, #1
    b278:	f884 35b1 	strb.w	r3, [r4, #1457]	; 0x5b1
    b27c:	e78b      	b.n	b196 <dw1000_interrupt_ev_cb+0x426>
                if(cbs->tx_begins_cb((struct uwb_dev*)inst,cbs)) break;
    b27e:	4639      	mov	r1, r7
    b280:	4620      	mov	r0, r4
    b282:	4798      	blx	r3
    b284:	2800      	cmp	r0, #0
    b286:	f43f ae4a 	beq.w	af1e <dw1000_interrupt_ev_cb+0x1ae>
    if(inst->sys_status & SYS_STATUS_TXFRS) {
    b28a:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
    b28e:	061f      	lsls	r7, r3, #24
    b290:	d54c      	bpl.n	b32c <dw1000_interrupt_ev_cb+0x5bc>
        MAC_STATS_INC(TFG_cnt);
    b292:	f8d4 35dc 	ldr.w	r3, [r4, #1500]	; 0x5dc
    b296:	3301      	adds	r3, #1
    b298:	f8c4 35dc 	str.w	r3, [r4, #1500]	; 0x5dc
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_ALL_TX, sizeof(uint8_t)); // Clear TX event bits
    b29c:	22f8      	movs	r2, #248	; 0xf8
    b29e:	2300      	movs	r3, #0
    b2a0:	2701      	movs	r7, #1
    b2a2:	e9cd 2300 	strd	r2, r3, [sp]
    b2a6:	210f      	movs	r1, #15
    b2a8:	9702      	str	r7, [sp, #8]
    b2aa:	2200      	movs	r2, #0
    b2ac:	4620      	mov	r0, r4
    b2ae:	f7fe f98b 	bl	95c8 <dw1000_write_reg>
        if (inst->control.abs_timeout) {
    b2b2:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
    b2b6:	0719      	lsls	r1, r3, #28
    b2b8:	d511      	bpl.n	b2de <dw1000_interrupt_ev_cb+0x56e>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
    b2ba:	2300      	movs	r3, #0
    b2bc:	2201      	movs	r2, #1
    b2be:	e9cd 2300 	strd	r2, r3, [sp]
    b2c2:	210d      	movs	r1, #13
    b2c4:	463a      	mov	r2, r7
    b2c6:	4620      	mov	r0, r4
    b2c8:	9702      	str	r7, [sp, #8]
    b2ca:	f7fe f97d 	bl	95c8 <dw1000_write_reg>
            update_rx_window_timeout(inst, dw1000_read_txtime(inst));
    b2ce:	4620      	mov	r0, r4
    b2d0:	f7ff fd46 	bl	ad60 <dw1000_read_txtime>
    b2d4:	4602      	mov	r2, r0
    b2d6:	460b      	mov	r3, r1
    b2d8:	4620      	mov	r0, r4
    b2da:	f7fe ff08 	bl	a0ee <update_rx_window_timeout.isra.0>
        if(dpl_sem_get_count(&inst->tx_sem) == 0){
    b2de:	f8b4 3566 	ldrh.w	r3, [r4, #1382]	; 0x566
    b2e2:	b933      	cbnz	r3, b2f2 <dw1000_interrupt_ev_cb+0x582>
    b2e4:	f504 60ac 	add.w	r0, r4, #1376	; 0x560
    b2e8:	f002 f9b6 	bl	d658 <os_sem_release>
            assert(err == DPL_OK);
    b2ec:	2800      	cmp	r0, #0
    b2ee:	f47f adf3 	bne.w	aed8 <dw1000_interrupt_ev_cb+0x168>
        if(!inst->sys_status_bt_lock && !inst->uwb_dev.status.autoack_triggered) {
    b2f2:	f894 3df2 	ldrb.w	r3, [r4, #3570]	; 0xdf2
    b2f6:	b96b      	cbnz	r3, b314 <dw1000_interrupt_ev_cb+0x5a4>
    b2f8:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
    b2fc:	065a      	lsls	r2, r3, #25
    b2fe:	d409      	bmi.n	b314 <dw1000_interrupt_ev_cb+0x5a4>
            DW1000_SYS_STATUS_BT_FCTRL(inst, inst->uwb_dev.fctrl);
    b300:	f8b4 3df0 	ldrh.w	r3, [r4, #3568]	; 0xdf0
    b304:	f8b4 24e0 	ldrh.w	r2, [r4, #1248]	; 0x4e0
    b308:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b30c:	eb04 1303 	add.w	r3, r4, r3, lsl #4
    b310:	f8a3 25fa 	strh.w	r2, [r3, #1530]	; 0x5fa
        if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
    b314:	f8d4 7530 	ldr.w	r7, [r4, #1328]	; 0x530
    b318:	b147      	cbz	r7, b32c <dw1000_interrupt_ev_cb+0x5bc>
            if (cbs!=NULL && cbs->tx_complete_cb)
    b31a:	68fb      	ldr	r3, [r7, #12]
    b31c:	b90b      	cbnz	r3, b322 <dw1000_interrupt_ev_cb+0x5b2>
            SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
    b31e:	6bbf      	ldr	r7, [r7, #56]	; 0x38
    b320:	e7fa      	b.n	b318 <dw1000_interrupt_ev_cb+0x5a8>
                if(cbs->tx_complete_cb((struct uwb_dev*)inst,cbs)) break;
    b322:	4639      	mov	r1, r7
    b324:	4620      	mov	r0, r4
    b326:	4798      	blx	r3
    b328:	2800      	cmp	r0, #0
    b32a:	d0f8      	beq.n	b31e <dw1000_interrupt_ev_cb+0x5ae>
    if(inst->uwb_dev.status.txbuf_error){
    b32c:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
    b330:	0698      	lsls	r0, r3, #26
    b332:	d51a      	bpl.n	b36a <dw1000_interrupt_ev_cb+0x5fa>
        MAC_STATS_INC(TXBUF_err);
    b334:	f8d4 35e8 	ldr.w	r3, [r4, #1512]	; 0x5e8
    b338:	3301      	adds	r3, #1
    b33a:	f8c4 35e8 	str.w	r3, [r4, #1512]	; 0x5e8
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_TXBERR, sizeof(uint32_t));
    b33e:	2304      	movs	r3, #4
    b340:	9302      	str	r3, [sp, #8]
    b342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    b346:	2300      	movs	r3, #0
    b348:	e9cd 2300 	strd	r2, r3, [sp]
    b34c:	210f      	movs	r1, #15
    b34e:	2200      	movs	r2, #0
    b350:	4620      	mov	r0, r4
    b352:	f7fe f939 	bl	95c8 <dw1000_write_reg>
        if(dpl_sem_get_count(&inst->tx_sem) == 0){
    b356:	f8b4 3566 	ldrh.w	r3, [r4, #1382]	; 0x566
    b35a:	b933      	cbnz	r3, b36a <dw1000_interrupt_ev_cb+0x5fa>
    b35c:	f504 60ac 	add.w	r0, r4, #1376	; 0x560
    b360:	f002 f97a 	bl	d658 <os_sem_release>
            assert(err == DPL_OK);
    b364:	2800      	cmp	r0, #0
    b366:	f47f adb7 	bne.w	aed8 <dw1000_interrupt_ev_cb+0x168>
    if(inst->sys_status & SYS_STATUS_LDEERR){
    b36a:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
    b36e:	035b      	lsls	r3, r3, #13
    b370:	d510      	bpl.n	b394 <dw1000_interrupt_ev_cb+0x624>
        MAC_STATS_INC(LDE_err);
    b372:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
    b376:	3301      	adds	r3, #1
    b378:	f8c4 35e0 	str.w	r3, [r4, #1504]	; 0x5e0
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_LDEERR, sizeof(uint32_t));
    b37c:	2304      	movs	r3, #4
    b37e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    b382:	9302      	str	r3, [sp, #8]
    b384:	2300      	movs	r3, #0
    b386:	e9cd 2300 	strd	r2, r3, [sp]
    b38a:	210f      	movs	r1, #15
    b38c:	2200      	movs	r2, #0
    b38e:	4620      	mov	r0, r4
    b390:	f7fe f91a 	bl	95c8 <dw1000_write_reg>
    if(inst->uwb_dev.status.rx_timeout_error){
    b394:	f994 3508 	ldrsb.w	r3, [r4, #1288]	; 0x508
    b398:	2b00      	cmp	r3, #0
    b39a:	db56      	blt.n	b44a <dw1000_interrupt_ev_cb+0x6da>
    if(inst->uwb_dev.status.rx_error) {
    b39c:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
    b3a0:	065f      	lsls	r7, r3, #25
    b3a2:	f140 80be 	bpl.w	b522 <dw1000_interrupt_ev_cb+0x7b2>
        MAC_STATS_INC(RX_err);
    b3a6:	f8d4 35e4 	ldr.w	r3, [r4, #1508]	; 0x5e4
    b3aa:	3301      	adds	r3, #1
    b3ac:	f8c4 35e4 	str.w	r3, [r4, #1508]	; 0x5e4
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, (SYS_STATUS_ALL_RX_ERR), sizeof(uint32_t)); // Clear RX error event bits
    b3b0:	2304      	movs	r3, #4
    b3b2:	9302      	str	r3, [sp, #8]
    b3b4:	a396      	add	r3, pc, #600	; (adr r3, b610 <dw1000_interrupt_ev_cb+0x8a0>)
    b3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
    b3ba:	210f      	movs	r1, #15
    b3bc:	e9cd 2300 	strd	r2, r3, [sp]
    b3c0:	4620      	mov	r0, r4
    b3c2:	2200      	movs	r2, #0
    b3c4:	f7fe f900 	bl	95c8 <dw1000_write_reg>
        if (inst->uwb_dev.config.dblbuffon_enabled && inst->uwb_dev.status.overrun_error) {
    b3c8:	f894 352c 	ldrb.w	r3, [r4, #1324]	; 0x52c
    b3cc:	06df      	lsls	r7, r3, #27
    b3ce:	f140 8108 	bpl.w	b5e2 <dw1000_interrupt_ev_cb+0x872>
    b3d2:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
    b3d6:	0758      	lsls	r0, r3, #29
    b3d8:	f140 8103 	bpl.w	b5e2 <dw1000_interrupt_ev_cb+0x872>
            MAC_STATS_INC(ROV_err);
    b3dc:	f8d4 35d8 	ldr.w	r3, [r4, #1496]	; 0x5d8
    b3e0:	3301      	adds	r3, #1
    b3e2:	f8c4 35d8 	str.w	r3, [r4, #1496]	; 0x5d8
            dw1000_phy_rx_reset(inst);
    b3e6:	4620      	mov	r0, r4
    b3e8:	f000 fb4b 	bl	ba82 <dw1000_phy_rx_reset>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 0b1, sizeof(uint8_t));
    b3ec:	2301      	movs	r3, #1
    b3ee:	9302      	str	r3, [sp, #8]
    b3f0:	2201      	movs	r2, #1
    b3f2:	2300      	movs	r3, #0
    b3f4:	e9cd 2300 	strd	r2, r3, [sp]
    b3f8:	4620      	mov	r0, r4
    b3fa:	2203      	movs	r2, #3
    b3fc:	210d      	movs	r1, #13
    b3fe:	f7fe f8e3 	bl	95c8 <dw1000_write_reg>
            dw1000_sync_rxbufptrs(inst);
    b402:	4620      	mov	r0, r4
    b404:	f7fe ff1e 	bl	a244 <dw1000_sync_rxbufptrs>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
    b408:	2201      	movs	r2, #1
    b40a:	2001      	movs	r0, #1
    b40c:	2100      	movs	r1, #0
    b40e:	e9cd 0100 	strd	r0, r1, [sp]
    b412:	9202      	str	r2, [sp, #8]
    b414:	210d      	movs	r1, #13
    b416:	4620      	mov	r0, r4
    b418:	f7fe f8d6 	bl	95c8 <dw1000_write_reg>
        if (inst->control.abs_timeout) {
    b41c:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
    b420:	0719      	lsls	r1, r3, #28
    b422:	d507      	bpl.n	b434 <dw1000_interrupt_ev_cb+0x6c4>
            update_rx_window_timeout(inst, dw1000_read_systime(inst));
    b424:	4620      	mov	r0, r4
    b426:	f7ff fc7d 	bl	ad24 <dw1000_read_systime>
    b42a:	4602      	mov	r2, r0
    b42c:	460b      	mov	r3, r1
    b42e:	4620      	mov	r0, r4
    b430:	f7fe fe5d 	bl	a0ee <update_rx_window_timeout.isra.0>
        if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
    b434:	f8d4 7530 	ldr.w	r7, [r4, #1328]	; 0x530
    b438:	2f00      	cmp	r7, #0
    b43a:	d072      	beq.n	b522 <dw1000_interrupt_ev_cb+0x7b2>
            if (cbs!=NULL && cbs->rx_error_cb)
    b43c:	69fb      	ldr	r3, [r7, #28]
    b43e:	b113      	cbz	r3, b446 <dw1000_interrupt_ev_cb+0x6d6>
                if(cbs->rx_error_cb((struct uwb_dev*)inst,cbs)) continue;
    b440:	4639      	mov	r1, r7
    b442:	4620      	mov	r0, r4
    b444:	4798      	blx	r3
            SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
    b446:	6bbf      	ldr	r7, [r7, #56]	; 0x38
    b448:	e7f6      	b.n	b438 <dw1000_interrupt_ev_cb+0x6c8>
        MAC_STATS_INC(RTO_cnt);
    b44a:	f8d4 35d4 	ldr.w	r3, [r4, #1492]	; 0x5d4
    b44e:	3301      	adds	r3, #1
    b450:	f8c4 35d4 	str.w	r3, [r4, #1492]	; 0x5d4
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_ALL_RX_TO, sizeof(uint32_t)); // Clear RX timeout event bits
    b454:	2304      	movs	r3, #4
    b456:	9302      	str	r3, [sp, #8]
    b458:	f44f 1208 	mov.w	r2, #2228224	; 0x220000
    b45c:	2300      	movs	r3, #0
    b45e:	e9cd 2300 	strd	r2, r3, [sp]
    b462:	4620      	mov	r0, r4
    b464:	2200      	movs	r2, #0
    b466:	210f      	movs	r1, #15
    b468:	f7fe f8ae 	bl	95c8 <dw1000_write_reg>
        if (inst->control.abs_timeout) {
    b46c:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
    b470:	0718      	lsls	r0, r3, #28
    b472:	d41f      	bmi.n	b4b4 <dw1000_interrupt_ev_cb+0x744>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint16_t)SYS_CTRL_TRXOFF, sizeof(uint16_t)) ; // Disable the radio
    b474:	2302      	movs	r3, #2
    b476:	9302      	str	r3, [sp, #8]
    b478:	2240      	movs	r2, #64	; 0x40
    b47a:	2300      	movs	r3, #0
    b47c:	e9cd 2300 	strd	r2, r3, [sp]
    b480:	210d      	movs	r1, #13
    b482:	2200      	movs	r2, #0
    b484:	4620      	mov	r0, r4
    b486:	f7fe f89f 	bl	95c8 <dw1000_write_reg>
            dw1000_phy_rx_reset(inst);
    b48a:	4620      	mov	r0, r4
    b48c:	f000 faf9 	bl	ba82 <dw1000_phy_rx_reset>
            inst->control.cir_enable = false;
    b490:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
            if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
    b494:	f8d4 7530 	ldr.w	r7, [r4, #1328]	; 0x530
            inst->control.cir_enable = false;
    b498:	f023 030e 	bic.w	r3, r3, #14
    b49c:	f884 35b1 	strb.w	r3, [r4, #1457]	; 0x5b1
                SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
    b4a0:	2f00      	cmp	r7, #0
    b4a2:	f43f af7b 	beq.w	b39c <dw1000_interrupt_ev_cb+0x62c>
                    if (cbs!=NULL && cbs->rx_timeout_cb)
    b4a6:	69bb      	ldr	r3, [r7, #24]
    b4a8:	b113      	cbz	r3, b4b0 <dw1000_interrupt_ev_cb+0x740>
                        if(cbs->rx_timeout_cb((struct uwb_dev*)inst,cbs)) continue;
    b4aa:	4639      	mov	r1, r7
    b4ac:	4620      	mov	r0, r4
    b4ae:	4798      	blx	r3
                SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
    b4b0:	6bbf      	ldr	r7, [r7, #56]	; 0x38
    b4b2:	e7f5      	b.n	b4a0 <dw1000_interrupt_ev_cb+0x730>
            uint64_t systime = dw1000_read_systime(inst);
    b4b4:	4620      	mov	r0, r4
    b4b6:	f7ff fc35 	bl	ad24 <dw1000_read_systime>
    uint32_t timeout = ((rx_end - rx_start) & UWB_DTU_40BMASK) >> 16;
    b4ba:	f8d4 34d8 	ldr.w	r3, [r4, #1240]	; 0x4d8
    b4be:	f8d4 24dc 	ldr.w	r2, [r4, #1244]	; 0x4dc
    b4c2:	1a18      	subs	r0, r3, r0
    b4c4:	eb62 0201 	sbc.w	r2, r2, r1
    b4c8:	0c00      	lsrs	r0, r0, #16
    b4ca:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
    if (timeout > 0x7fffff) {
    b4ce:	0201      	lsls	r1, r0, #8
    b4d0:	d420      	bmi.n	b514 <dw1000_interrupt_ev_cb+0x7a4>
    uint32_t timeout = ((rx_end - rx_start) & UWB_DTU_40BMASK) >> 16;
    b4d2:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    return timeout;
    b4d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b4da:	4299      	cmp	r1, r3
            if (new_timeout > 1) {
    b4dc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    return timeout;
    b4e0:	bf28      	it	cs
    b4e2:	4619      	movcs	r1, r3
            if (new_timeout > 1) {
    b4e4:	f020 0001 	bic.w	r0, r0, #1
    return timeout;
    b4e8:	b28f      	uxth	r7, r1
            if (new_timeout > 1) {
    b4ea:	b198      	cbz	r0, b514 <dw1000_interrupt_ev_cb+0x7a4>
                dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
    b4ec:	2201      	movs	r2, #1
    b4ee:	2001      	movs	r0, #1
    b4f0:	2100      	movs	r1, #0
    b4f2:	e9cd 0100 	strd	r0, r1, [sp]
    b4f6:	9202      	str	r2, [sp, #8]
    b4f8:	210d      	movs	r1, #13
    b4fa:	4620      	mov	r0, r4
    b4fc:	f7fe f864 	bl	95c8 <dw1000_write_reg>
                dw1000_adj_rx_timeout(inst, new_timeout);
    b500:	4639      	mov	r1, r7
    b502:	4620      	mov	r0, r4
    b504:	f7fe fde5 	bl	a0d2 <dw1000_adj_rx_timeout>
        if (!inst->control.abs_timeout) {
    b508:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
    b50c:	071a      	lsls	r2, r3, #28
    b50e:	f53f af45 	bmi.w	b39c <dw1000_interrupt_ev_cb+0x62c>
    b512:	e7af      	b.n	b474 <dw1000_interrupt_ev_cb+0x704>
                inst->control.abs_timeout = false;
    b514:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
    b518:	f36f 03c3 	bfc	r3, #3, #1
    b51c:	f884 35b1 	strb.w	r3, [r4, #1457]	; 0x5b1
    b520:	e7f2      	b.n	b508 <dw1000_interrupt_ev_cb+0x798>
    if(inst->sys_status & SYS_STATUS_SLP2INIT){
    b522:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
    b526:	021b      	lsls	r3, r3, #8
    b528:	d50a      	bpl.n	b540 <dw1000_interrupt_ev_cb+0x7d0>
        dw1000_write_reg(inst, SYS_STATUS_ID, 2, SYS_STATUS_SLP2INIT>>16, 1);
    b52a:	2301      	movs	r3, #1
    b52c:	2280      	movs	r2, #128	; 0x80
    b52e:	9302      	str	r3, [sp, #8]
    b530:	2300      	movs	r3, #0
    b532:	e9cd 2300 	strd	r2, r3, [sp]
    b536:	210f      	movs	r1, #15
    b538:	2202      	movs	r2, #2
    b53a:	4620      	mov	r0, r4
    b53c:	f7fe f844 	bl	95c8 <dw1000_write_reg>
    if(inst->sys_status & SYS_STATUS_CLKPLL_LL){
    b540:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
    b544:	019a      	lsls	r2, r3, #6
    b546:	d510      	bpl.n	b56a <dw1000_interrupt_ev_cb+0x7fa>
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_CLKPLL_LL, sizeof(uint32_t));
    b548:	2304      	movs	r3, #4
    b54a:	9302      	str	r3, [sp, #8]
    b54c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    b550:	2300      	movs	r3, #0
    b552:	e9cd 2300 	strd	r2, r3, [sp]
    b556:	210f      	movs	r1, #15
    b558:	2200      	movs	r2, #0
    b55a:	4620      	mov	r0, r4
    b55c:	f7fe f834 	bl	95c8 <dw1000_write_reg>
        MAC_STATS_INC(PLL_LL_err);
    b560:	f8d4 35ec 	ldr.w	r3, [r4, #1516]	; 0x5ec
    b564:	3301      	adds	r3, #1
    b566:	f8c4 35ec 	str.w	r3, [r4, #1516]	; 0x5ec
    if(inst->sys_status & SYS_MASK_MCPLOCK){
    b56a:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
    b56e:	079b      	lsls	r3, r3, #30
    b570:	f57f ad03 	bpl.w	af7a <dw1000_interrupt_ev_cb+0x20a>
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_MASK_MCPLOCK, sizeof(uint32_t));
    b574:	2304      	movs	r3, #4
    b576:	9302      	str	r3, [sp, #8]
    b578:	2202      	movs	r2, #2
    b57a:	2300      	movs	r3, #0
    b57c:	e9cd 2300 	strd	r2, r3, [sp]
    b580:	210f      	movs	r1, #15
    b582:	2200      	movs	r2, #0
    b584:	4620      	mov	r0, r4
        dw1000_phy_set_rx_antennadelay(inst, inst->uwb_dev.rx_antenna_delay);
    b586:	f04f 0802 	mov.w	r8, #2
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_MASK_MCPLOCK, sizeof(uint32_t));
    b58a:	f7fe f81d 	bl	95c8 <dw1000_write_reg>
        dw1000_phy_set_rx_antennadelay(inst, inst->uwb_dev.rx_antenna_delay);
    b58e:	f8cd 8008 	str.w	r8, [sp, #8]
    b592:	f8b4 34cc 	ldrh.w	r3, [r4, #1228]	; 0x4cc
    b596:	2700      	movs	r7, #0
    b598:	e9cd 3700 	strd	r3, r7, [sp]
    b59c:	f641 0204 	movw	r2, #6148	; 0x1804
    b5a0:	212e      	movs	r1, #46	; 0x2e
    b5a2:	4620      	mov	r0, r4
    b5a4:	f7fe f810 	bl	95c8 <dw1000_write_reg>
        dw1000_phy_set_tx_antennadelay(inst, inst->uwb_dev.tx_antenna_delay);
    b5a8:	f8cd 8008 	str.w	r8, [sp, #8]
    b5ac:	f8b4 34ce 	ldrh.w	r3, [r4, #1230]	; 0x4ce
    b5b0:	463a      	mov	r2, r7
    b5b2:	e9cd 3700 	strd	r3, r7, [sp]
    b5b6:	2118      	movs	r1, #24
    b5b8:	4620      	mov	r0, r4
    b5ba:	f7fe f805 	bl	95c8 <dw1000_write_reg>
        inst->uwb_dev.status.sleeping = 0;
    b5be:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
    b5c2:	f367 0300 	bfi	r3, r7, #0, #1
        if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
    b5c6:	f8d4 7530 	ldr.w	r7, [r4, #1328]	; 0x530
        inst->uwb_dev.status.sleeping = 0;
    b5ca:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
        if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
    b5ce:	2f00      	cmp	r7, #0
    b5d0:	f43f acd3 	beq.w	af7a <dw1000_interrupt_ev_cb+0x20a>
            if (cbs!=NULL && cbs->sleep_cb)
    b5d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b5d6:	b113      	cbz	r3, b5de <dw1000_interrupt_ev_cb+0x86e>
                if (cbs->sleep_cb((struct uwb_dev*)inst,cbs)) continue;
    b5d8:	4639      	mov	r1, r7
    b5da:	4620      	mov	r0, r4
    b5dc:	4798      	blx	r3
            SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
    b5de:	6bbf      	ldr	r7, [r7, #56]	; 0x38
    b5e0:	e7f5      	b.n	b5ce <dw1000_interrupt_ev_cb+0x85e>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) SYS_CTRL_TRXOFF, sizeof(uint8_t));
    b5e2:	2301      	movs	r3, #1
    b5e4:	9302      	str	r3, [sp, #8]
    b5e6:	2240      	movs	r2, #64	; 0x40
    b5e8:	2300      	movs	r3, #0
    b5ea:	e9cd 2300 	strd	r2, r3, [sp]
    b5ee:	4620      	mov	r0, r4
    b5f0:	2200      	movs	r2, #0
    b5f2:	210d      	movs	r1, #13
    b5f4:	f7fd ffe8 	bl	95c8 <dw1000_write_reg>
            dw1000_phy_rx_reset(inst);
    b5f8:	4620      	mov	r0, r4
    b5fa:	f000 fa42 	bl	ba82 <dw1000_phy_rx_reset>
    b5fe:	e703      	b.n	b408 <dw1000_interrupt_ev_cb+0x698>
    if(!inst->sys_status_bt_lock) {
    b600:	f894 3df2 	ldrb.w	r3, [r4, #3570]	; 0xdf2
    b604:	2b00      	cmp	r3, #0
    b606:	f43f abe9 	beq.w	addc <dw1000_interrupt_ev_cb+0x6c>
}
    b60a:	b005      	add	sp, #20
    b60c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    b610:	24119000 	.word	0x24119000
    b614:	00000000 	.word	0x00000000

0000b618 <dw1000_read_txtime_lo>:
 *
 * @param inst  Pointer to _dw1000_dev_instance_t.
 *
 * @return time
 */
inline uint32_t dw1000_read_txtime_lo(struct _dw1000_dev_instance_t * inst){
    b618:	b508      	push	{r3, lr}
    uint32_t time = (uint32_t) dw1000_read_reg(inst, TX_TIME_ID, TX_TIME_TX_STAMP_OFFSET, sizeof(uint32_t));
    b61a:	2200      	movs	r2, #0
    b61c:	2304      	movs	r3, #4
    b61e:	2117      	movs	r1, #23
    b620:	f7fd ff80 	bl	9524 <dw1000_read_reg>
    return time;
}
    b624:	bd08      	pop	{r3, pc}
	...

0000b628 <dw1000_configcwmode>:
 * @param chan - specifies the operating channel (e.g. 1, 2, 3, 4, 5, 6 or 7)
 *
 */
void
dw1000_configcwmode(struct _dw1000_dev_instance_t * inst, uint8_t chan)
{
    b628:	b5f0      	push	{r4, r5, r6, r7, lr}
    int rc;
    if ((chan < 1) || (chan > 7) || (6 == chan)) {
    b62a:	1e4b      	subs	r3, r1, #1
    b62c:	2b06      	cmp	r3, #6
{
    b62e:	b085      	sub	sp, #20
    b630:	4604      	mov	r4, r0
    b632:	460e      	mov	r6, r1
    if ((chan < 1) || (chan > 7) || (6 == chan)) {
    b634:	d801      	bhi.n	b63a <dw1000_configcwmode+0x12>
    b636:	2906      	cmp	r1, #6
    b638:	d105      	bne.n	b646 <dw1000_configcwmode+0x1e>
        assert(0);
    b63a:	2300      	movs	r3, #0
    b63c:	461a      	mov	r2, r3
    b63e:	4619      	mov	r1, r3
    b640:	4618      	mov	r0, r3
    b642:	f001 f8db 	bl	c7fc <__assert_func>
    }

    /* Lower the speed of the SPI bus before activating CW mode.
     * This is needed because we disable the hiher sysclk and thus
     * dw1000 only support < 2Mbit spi */
    inst->spi_settings.baudrate = inst->spi_baudrate_low;
    b646:	f8d0 3558 	ldr.w	r3, [r0, #1368]	; 0x558
    b64a:	f8c0 3598 	str.w	r3, [r0, #1432]	; 0x598
    rc = hal_spi_disable(inst->spi_num);
    b64e:	f890 055c 	ldrb.w	r0, [r0, #1372]	; 0x55c
    b652:	f000 fea1 	bl	c398 <hal_spi_disable>
    assert(rc == 0);
    b656:	2800      	cmp	r0, #0
    b658:	d1ef      	bne.n	b63a <dw1000_configcwmode+0x12>
    rc = hal_spi_config(inst->spi_num, &inst->spi_settings);
    b65a:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
    b65e:	f204 5194 	addw	r1, r4, #1428	; 0x594
    b662:	f000 fdeb 	bl	c23c <hal_spi_config>
    assert(rc == 0);
    b666:	2800      	cmp	r0, #0
    b668:	d1e7      	bne.n	b63a <dw1000_configcwmode+0x12>
    rc = hal_spi_enable(inst->spi_num);
    b66a:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
    b66e:	f000 fe73 	bl	c358 <hal_spi_enable>
    assert(rc == 0);
    b672:	4605      	mov	r5, r0
    b674:	2800      	cmp	r0, #0
    b676:	d1e0      	bne.n	b63a <dw1000_configcwmode+0x12>

    /* disable TX/RX RF block sequencing (needed for cw frame mode) */
    dw1000_phy_disable_sequencing(inst);
    b678:	4620      	mov	r0, r4
    b67a:	f000 f8d1 	bl	b820 <dw1000_phy_disable_sequencing>

    /* config RF pll (for a given channel) */
    /* configure PLL2/RF PLL block CFG */
    dw1000_write_reg(inst, FS_CTRL_ID, FS_PLLCFG_OFFSET,
                     fs_pll_cfg[chan_idx[chan]], sizeof(uint32_t));
    b67e:	4b2d      	ldr	r3, [pc, #180]	; (b734 <dw1000_configcwmode+0x10c>)
    b680:	5d9f      	ldrb	r7, [r3, r6]
    b682:	4b2d      	ldr	r3, [pc, #180]	; (b738 <dw1000_configcwmode+0x110>)
    dw1000_write_reg(inst, FS_CTRL_ID, FS_PLLCFG_OFFSET,
    b684:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
    b688:	2604      	movs	r6, #4
    b68a:	e9cd 3500 	strd	r3, r5, [sp]
    b68e:	9602      	str	r6, [sp, #8]
    b690:	4620      	mov	r0, r4
    b692:	2207      	movs	r2, #7
    b694:	212b      	movs	r1, #43	; 0x2b
    b696:	f7fd ff97 	bl	95c8 <dw1000_write_reg>

    /* Configure RF TX blocks (for specified channel and prf) */
    /* Config RF TX control */
    dw1000_write_reg(inst, RF_CONF_ID, RF_TXCTRL_OFFSET,
                     tx_config[chan_idx[chan]], sizeof(uint32_t));
    b69a:	4b28      	ldr	r3, [pc, #160]	; (b73c <dw1000_configcwmode+0x114>)
    dw1000_write_reg(inst, RF_CONF_ID, RF_TXCTRL_OFFSET,
    b69c:	9602      	str	r6, [sp, #8]
    b69e:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
    b6a2:	4620      	mov	r0, r4
    b6a4:	e9cd 3500 	strd	r3, r5, [sp]
    b6a8:	220c      	movs	r2, #12
    b6aa:	2128      	movs	r1, #40	; 0x28
    b6ac:	f7fd ff8c 	bl	95c8 <dw1000_write_reg>

    /* enable RF PLL */
    dw1000_write_reg(inst, RF_CONF_ID, 0, RF_CONF_TXPLLPOWEN_MASK, sizeof(uint32_t));
    b6b0:	2300      	movs	r3, #0
    b6b2:	f44f 12ff 	mov.w	r2, #2088960	; 0x1fe000
    b6b6:	e9cd 2300 	strd	r2, r3, [sp]
    b6ba:	9602      	str	r6, [sp, #8]
    b6bc:	462a      	mov	r2, r5
    b6be:	4620      	mov	r0, r4
    b6c0:	2128      	movs	r1, #40	; 0x28
    b6c2:	f7fd ff81 	bl	95c8 <dw1000_write_reg>
    dw1000_write_reg(inst, RF_CONF_ID, 0, RF_CONF_TXALLEN_MASK, sizeof(uint32_t));
    b6c6:	4a1e      	ldr	r2, [pc, #120]	; (b740 <dw1000_configcwmode+0x118>)
    b6c8:	9602      	str	r6, [sp, #8]
    b6ca:	2300      	movs	r3, #0
    b6cc:	e9cd 2300 	strd	r2, r3, [sp]
    b6d0:	4620      	mov	r0, r4
    b6d2:	462a      	mov	r2, r5
    b6d4:	2128      	movs	r1, #40	; 0x28
    b6d6:	f7fd ff77 	bl	95c8 <dw1000_write_reg>

    /* configure TX clocks */
    dw1000_write_reg(inst, PMSC_ID,PMSC_CTRL0_OFFSET, 0x22, 1);
    b6da:	2601      	movs	r6, #1
    b6dc:	2300      	movs	r3, #0
    b6de:	2222      	movs	r2, #34	; 0x22
    b6e0:	e9cd 2300 	strd	r2, r3, [sp]
    b6e4:	4620      	mov	r0, r4
    b6e6:	462a      	mov	r2, r5
    b6e8:	9602      	str	r6, [sp, #8]
    b6ea:	2136      	movs	r1, #54	; 0x36
    b6ec:	f7fd ff6c 	bl	95c8 <dw1000_write_reg>
    dw1000_write_reg(inst, PMSC_ID, 0x1, 0x07, 1);
    b6f0:	2300      	movs	r3, #0
    b6f2:	2207      	movs	r2, #7
    b6f4:	e9cd 2300 	strd	r2, r3, [sp]
    b6f8:	4620      	mov	r0, r4
    b6fa:	4632      	mov	r2, r6
    b6fc:	9602      	str	r6, [sp, #8]
    b6fe:	2136      	movs	r1, #54	; 0x36
    b700:	f7fd ff62 	bl	95c8 <dw1000_write_reg>

    /* disable fine grain TX seq */
    dw1000_write_reg(inst, PMSC_ID, PMSC_TXFINESEQ_OFFSET,
    b704:	2302      	movs	r3, #2
    b706:	9302      	str	r3, [sp, #8]
    b708:	2200      	movs	r2, #0
    b70a:	2300      	movs	r3, #0
    b70c:	e9cd 2300 	strd	r2, r3, [sp]
    b710:	4620      	mov	r0, r4
    b712:	2226      	movs	r2, #38	; 0x26
    b714:	2136      	movs	r1, #54	; 0x36
    b716:	f7fd ff57 	bl	95c8 <dw1000_write_reg>
                     PMSC_TXFINESEQ_DISABLE, sizeof(uint16_t));

    /* configure CW mode */
    dw1000_write_reg(inst, TX_CAL_ID, TC_PGTEST_OFFSET,
    b71a:	2300      	movs	r3, #0
    b71c:	2213      	movs	r2, #19
    b71e:	e9cd 2300 	strd	r2, r3, [sp]
    b722:	9602      	str	r6, [sp, #8]
    b724:	220c      	movs	r2, #12
    b726:	212a      	movs	r1, #42	; 0x2a
    b728:	4620      	mov	r0, r4
    b72a:	f7fd ff4d 	bl	95c8 <dw1000_write_reg>
                     TC_PGTEST_CW, TC_PGTEST_LEN);
}
    b72e:	b005      	add	sp, #20
    b730:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b732:	bf00      	nop
    b734:	00020388 	.word	0x00020388
    b738:	000203b8 	.word	0x000203b8
    b73c:	00020454 	.word	0x00020454
    b740:	005fff00 	.word	0x005fff00

0000b744 <dw1000_phy_sysclk_XTAL>:
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_sysclk_XTAL(struct _dw1000_dev_instance_t * inst)
{
    b744:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t reg = (uint8_t) dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint8_t));
    b746:	2301      	movs	r3, #1
    b748:	2200      	movs	r2, #0
    b74a:	2136      	movs	r1, #54	; 0x36
{
    b74c:	4604      	mov	r4, r0
    uint8_t reg = (uint8_t) dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint8_t));
    b74e:	f7fd fee9 	bl	9524 <dw1000_read_reg>
    reg &= (uint8_t)~PMSC_CTRL0_SYSCLKS_19M & (uint8_t)~PMSC_CTRL0_SYSCLKS_125M;
    reg |= (uint8_t) PMSC_CTRL0_SYSCLKS_19M;
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, reg, sizeof(uint8_t));
    b752:	2201      	movs	r2, #1
    reg &= (uint8_t)~PMSC_CTRL0_SYSCLKS_19M & (uint8_t)~PMSC_CTRL0_SYSCLKS_125M;
    b754:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, reg, sizeof(uint8_t));
    b758:	4313      	orrs	r3, r2
    b75a:	9202      	str	r2, [sp, #8]
    b75c:	2200      	movs	r2, #0
    b75e:	e9cd 3200 	strd	r3, r2, [sp]
    b762:	2136      	movs	r1, #54	; 0x36
    b764:	4620      	mov	r0, r4
    b766:	f7fd ff2f 	bl	95c8 <dw1000_write_reg>
}
    b76a:	b004      	add	sp, #16
    b76c:	bd10      	pop	{r4, pc}

0000b76e <dw1000_phy_sysclk_PLL>:
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_sysclk_PLL(struct _dw1000_dev_instance_t * inst)
{
    b76e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t reg = (uint8_t) dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint8_t));
    b770:	2301      	movs	r3, #1
    b772:	2200      	movs	r2, #0
    b774:	2136      	movs	r1, #54	; 0x36
{
    b776:	4604      	mov	r4, r0
    uint8_t reg = (uint8_t) dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint8_t));
    b778:	f7fd fed4 	bl	9524 <dw1000_read_reg>
    reg &= (uint8_t)~PMSC_CTRL0_SYSCLKS_19M & (uint8_t)~PMSC_CTRL0_SYSCLKS_125M;
    reg |= (uint8_t) PMSC_CTRL0_SYSCLKS_125M;
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, reg, sizeof(uint8_t));
    b77c:	2201      	movs	r2, #1
    reg &= (uint8_t)~PMSC_CTRL0_SYSCLKS_19M & (uint8_t)~PMSC_CTRL0_SYSCLKS_125M;
    b77e:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, reg, sizeof(uint8_t));
    b782:	9202      	str	r2, [sp, #8]
    b784:	f043 0302 	orr.w	r3, r3, #2
    b788:	2200      	movs	r2, #0
    b78a:	e9cd 3200 	strd	r3, r2, [sp]
    b78e:	2136      	movs	r1, #54	; 0x36
    b790:	4620      	mov	r0, r4
    b792:	f7fd ff19 	bl	95c8 <dw1000_write_reg>
}
    b796:	b004      	add	sp, #16
    b798:	bd10      	pop	{r4, pc}

0000b79a <dw1000_phy_txclk_PLL>:
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_txclk_PLL(struct _dw1000_dev_instance_t * inst)
{
    b79a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t reg = (uint8_t) dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint8_t));
    b79c:	2301      	movs	r3, #1
    b79e:	2200      	movs	r2, #0
    b7a0:	2136      	movs	r1, #54	; 0x36
{
    b7a2:	4604      	mov	r4, r0
    uint8_t reg = (uint8_t) dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint8_t));
    b7a4:	f7fd febe 	bl	9524 <dw1000_read_reg>
    reg &= (uint8_t)~PMSC_CTRL0_TXCLKS_19M & (uint8_t)~PMSC_CTRL0_TXCLKS_125M;
    reg |= (uint8_t) PMSC_CTRL0_TXCLKS_125M;
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, reg, sizeof(uint8_t));
    b7a8:	2201      	movs	r2, #1
    reg &= (uint8_t)~PMSC_CTRL0_TXCLKS_19M & (uint8_t)~PMSC_CTRL0_TXCLKS_125M;
    b7aa:	f000 03cf 	and.w	r3, r0, #207	; 0xcf
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, reg, sizeof(uint8_t));
    b7ae:	9202      	str	r2, [sp, #8]
    b7b0:	f043 0320 	orr.w	r3, r3, #32
    b7b4:	2200      	movs	r2, #0
    b7b6:	e9cd 3200 	strd	r3, r2, [sp]
    b7ba:	2136      	movs	r1, #54	; 0x36
    b7bc:	4620      	mov	r0, r4
    b7be:	f7fd ff03 	bl	95c8 <dw1000_write_reg>
}
    b7c2:	b004      	add	sp, #16
    b7c4:	bd10      	pop	{r4, pc}

0000b7c6 <dw1000_phy_sysclk_LDE>:
 * API to enable running of the LDE algorithm.
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_sysclk_LDE(struct _dw1000_dev_instance_t * inst){
    b7c6:	b530      	push	{r4, r5, lr}
    b7c8:	b085      	sub	sp, #20
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, 0x01, sizeof(uint8_t));
    b7ca:	2501      	movs	r5, #1
    b7cc:	2300      	movs	r3, #0
    b7ce:	2201      	movs	r2, #1
    b7d0:	e9cd 2300 	strd	r2, r3, [sp]
    b7d4:	9502      	str	r5, [sp, #8]
    b7d6:	2200      	movs	r2, #0
    b7d8:	2136      	movs	r1, #54	; 0x36
void dw1000_phy_sysclk_LDE(struct _dw1000_dev_instance_t * inst){
    b7da:	4604      	mov	r4, r0
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, 0x01, sizeof(uint8_t));
    b7dc:	f7fd fef4 	bl	95c8 <dw1000_write_reg>
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET + 1 , 0x03, sizeof(uint8_t));
    b7e0:	2300      	movs	r3, #0
    b7e2:	2203      	movs	r2, #3
    b7e4:	e9cd 2300 	strd	r2, r3, [sp]
    b7e8:	9502      	str	r5, [sp, #8]
    b7ea:	462a      	mov	r2, r5
    b7ec:	2136      	movs	r1, #54	; 0x36
    b7ee:	4620      	mov	r0, r4
    b7f0:	f7fd feea 	bl	95c8 <dw1000_write_reg>
}
    b7f4:	b005      	add	sp, #20
    b7f6:	bd30      	pop	{r4, r5, pc}

0000b7f8 <dw1000_phy_sysclk_SEQ>:
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_sysclk_SEQ(struct _dw1000_dev_instance_t * inst)
{
    b7f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t reg = (uint8_t) dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint8_t));
    b7fa:	2301      	movs	r3, #1
    b7fc:	2200      	movs	r2, #0
    b7fe:	2136      	movs	r1, #54	; 0x36
{
    b800:	4604      	mov	r4, r0
    uint8_t reg = (uint8_t) dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint8_t));
    b802:	f7fd fe8f 	bl	9524 <dw1000_read_reg>
    reg &= (uint8_t)~PMSC_CTRL0_SYSCLKS_19M & (uint8_t)~PMSC_CTRL0_SYSCLKS_125M;
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, reg, sizeof(uint8_t));
    b806:	2301      	movs	r3, #1
    b808:	2200      	movs	r2, #0
    b80a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
    b80e:	e9cd 0200 	strd	r0, r2, [sp]
    b812:	9302      	str	r3, [sp, #8]
    b814:	2136      	movs	r1, #54	; 0x36
    b816:	4620      	mov	r0, r4
    b818:	f7fd fed6 	bl	95c8 <dw1000_write_reg>
}
    b81c:	b004      	add	sp, #16
    b81e:	bd10      	pop	{r4, pc}

0000b820 <dw1000_phy_disable_sequencing>:
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_disable_sequencing(struct _dw1000_dev_instance_t * inst)
{
    b820:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    b822:	4604      	mov	r4, r0
    dw1000_phy_sysclk_XTAL(inst);
    b824:	f7ff ff8e 	bl	b744 <dw1000_phy_sysclk_XTAL>
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE, sizeof(uint16_t)); // Disable PMSC ctrl of RF and RX clk blocks
    b828:	2302      	movs	r3, #2
    b82a:	9302      	str	r3, [sp, #8]
    b82c:	2200      	movs	r2, #0
    b82e:	2300      	movs	r3, #0
    b830:	e9cd 2300 	strd	r2, r3, [sp]
    b834:	2136      	movs	r1, #54	; 0x36
    b836:	2204      	movs	r2, #4
    b838:	4620      	mov	r0, r4
    b83a:	f7fd fec5 	bl	95c8 <dw1000_write_reg>
}
    b83e:	b004      	add	sp, #16
    b840:	bd10      	pop	{r4, pc}

0000b842 <dw1000_phy_config_lde>:
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @param prf   This is the PRF index (0 or 1) 0 corresponds to 16 and 1 to 64 PRF.
 * @return void
 */
void dw1000_phy_config_lde(struct _dw1000_dev_instance_t * inst, int prfIndex)
{
    b842:	b530      	push	{r4, r5, lr}
    b844:	b085      	sub	sp, #20
    dw1000_write_reg(inst, LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1, sizeof(uint8_t)); // 8-bit configuration register
    b846:	2301      	movs	r3, #1
    b848:	9302      	str	r3, [sp, #8]
    b84a:	226d      	movs	r2, #109	; 0x6d
    b84c:	2300      	movs	r3, #0
    b84e:	e9cd 2300 	strd	r2, r3, [sp]
{
    b852:	460d      	mov	r5, r1
    dw1000_write_reg(inst, LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1, sizeof(uint8_t)); // 8-bit configuration register
    b854:	f640 0206 	movw	r2, #2054	; 0x806
    b858:	212e      	movs	r1, #46	; 0x2e
{
    b85a:	4604      	mov	r4, r0
    dw1000_write_reg(inst, LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1, sizeof(uint8_t)); // 8-bit configuration register
    b85c:	f7fd feb4 	bl	95c8 <dw1000_write_reg>

    if(prfIndex)
    b860:	2302      	movs	r3, #2
        dw1000_write_reg(inst, LDE_IF_ID, LDE_CFG2_OFFSET, LDE_PARAM3_64, sizeof(uint16_t)); // 16-bit LDE configuration tuning register
    b862:	9302      	str	r3, [sp, #8]
    if(prfIndex)
    b864:	b165      	cbz	r5, b880 <dw1000_phy_config_lde+0x3e>
        dw1000_write_reg(inst, LDE_IF_ID, LDE_CFG2_OFFSET, LDE_PARAM3_64, sizeof(uint16_t)); // 16-bit LDE configuration tuning register
    b866:	f240 6207 	movw	r2, #1543	; 0x607
    else
        dw1000_write_reg(inst, LDE_IF_ID, LDE_CFG2_OFFSET, LDE_PARAM3_16, sizeof(uint16_t));
    b86a:	2300      	movs	r3, #0
    b86c:	e9cd 2300 	strd	r2, r3, [sp]
    b870:	212e      	movs	r1, #46	; 0x2e
    b872:	f641 0206 	movw	r2, #6150	; 0x1806
    b876:	4620      	mov	r0, r4
    b878:	f7fd fea6 	bl	95c8 <dw1000_write_reg>
}
    b87c:	b005      	add	sp, #20
    b87e:	bd30      	pop	{r4, r5, pc}
        dw1000_write_reg(inst, LDE_IF_ID, LDE_CFG2_OFFSET, LDE_PARAM3_16, sizeof(uint16_t));
    b880:	f241 6207 	movw	r2, #5639	; 0x1607
    b884:	e7f1      	b.n	b86a <dw1000_phy_config_lde+0x28>

0000b886 <dw1000_phy_config_txrf>:
 * @param inst      Pointer to dw1000_dev_instance_t.
 * @param config    Pointer to dw1000_dev_txrf_config_t.
 * @return void
 */
void dw1000_phy_config_txrf(struct _dw1000_dev_instance_t * inst, struct uwb_dev_txrf_config *config)
{
    b886:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    // Configure RF TX PG_DELAY
    dw1000_write_reg(inst, TX_CAL_ID, TC_PGDELAY_OFFSET, config->PGdly, sizeof(uint8_t));
    b888:	2301      	movs	r3, #1
    b88a:	9302      	str	r3, [sp, #8]
    b88c:	780b      	ldrb	r3, [r1, #0]
    b88e:	2600      	movs	r6, #0
    b890:	e9cd 3600 	strd	r3, r6, [sp]
{
    b894:	460c      	mov	r4, r1
    dw1000_write_reg(inst, TX_CAL_ID, TC_PGDELAY_OFFSET, config->PGdly, sizeof(uint8_t));
    b896:	220b      	movs	r2, #11
    b898:	212a      	movs	r1, #42	; 0x2a
{
    b89a:	4605      	mov	r5, r0
    dw1000_write_reg(inst, TX_CAL_ID, TC_PGDELAY_OFFSET, config->PGdly, sizeof(uint8_t));
    b89c:	f7fd fe94 	bl	95c8 <dw1000_write_reg>
    // Configure TX power
    dw1000_write_reg(inst, TX_POWER_ID, 0, config->power, sizeof(uint32_t));
    b8a0:	2304      	movs	r3, #4
    b8a2:	9302      	str	r3, [sp, #8]
    b8a4:	6863      	ldr	r3, [r4, #4]
    b8a6:	4632      	mov	r2, r6
    b8a8:	e9cd 3600 	strd	r3, r6, [sp]
    b8ac:	211e      	movs	r1, #30
    b8ae:	4628      	mov	r0, r5
    b8b0:	f7fd fe8a 	bl	95c8 <dw1000_write_reg>
}
    b8b4:	b004      	add	sp, #16
    b8b6:	bd70      	pop	{r4, r5, r6, pc}

0000b8b8 <dw1000_phy_init>:
{
    b8b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    b8ba:	4604      	mov	r4, r0
    b8bc:	b085      	sub	sp, #20
        txrf_config = &inst->uwb_dev.config.txrf;
    b8be:	f200 5624 	addw	r6, r0, #1316	; 0x524
    if (txrf_config == NULL)
    b8c2:	b129      	cbz	r1, b8d0 <dw1000_phy_init+0x18>
        memcpy(&inst->uwb_dev.config.txrf, txrf_config, sizeof(struct uwb_dev_txrf_config));
    b8c4:	680b      	ldr	r3, [r1, #0]
    b8c6:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    b8ca:	684b      	ldr	r3, [r1, #4]
    b8cc:	6073      	str	r3, [r6, #4]
    b8ce:	460e      	mov	r6, r1
    dw1000_softreset(inst);
    b8d0:	4620      	mov	r0, r4
    b8d2:	f7fd fef8 	bl	96c6 <dw1000_softreset>
    dw1000_phy_sysclk_XTAL(inst);
    b8d6:	4620      	mov	r0, r4
    b8d8:	f7ff ff34 	bl	b744 <dw1000_phy_sysclk_XTAL>
    dw1000_gpio_config_leds(inst, DWT_LEDS_ENABLE | DWT_LEDS_INIT_BLINK);
    b8dc:	2106      	movs	r1, #6
    b8de:	4620      	mov	r0, r4
    b8e0:	f7fd f98a 	bl	8bf8 <dw1000_gpio_config_leds>
    dw1000_gpio5_config_ext_txe(inst);
    b8e4:	4620      	mov	r0, r4
    b8e6:	f7fd f95b 	bl	8ba0 <dw1000_gpio5_config_ext_txe>
    dw1000_gpio6_config_ext_rxe(inst);
    b8ea:	4620      	mov	r0, r4
    b8ec:	f7fd f96e 	bl	8bcc <dw1000_gpio6_config_ext_rxe>
    reg = dw1000_read_reg(inst, EXT_SYNC_ID, EC_CTRL_OFFSET, sizeof(uint8_t));
    b8f0:	2301      	movs	r3, #1
    b8f2:	2200      	movs	r2, #0
    b8f4:	2124      	movs	r1, #36	; 0x24
    b8f6:	4620      	mov	r0, r4
    b8f8:	f7fd fe14 	bl	9524 <dw1000_read_reg>
    b8fc:	b2c0      	uxtb	r0, r0
    dw1000_write_reg(inst, EXT_SYNC_ID, EC_CTRL_OFFSET, reg, sizeof(uint8_t));
    b8fe:	2200      	movs	r2, #0
    b900:	f040 0004 	orr.w	r0, r0, #4
    b904:	2701      	movs	r7, #1
    b906:	e9cd 0200 	strd	r0, r2, [sp]
    b90a:	2124      	movs	r1, #36	; 0x24
    b90c:	4620      	mov	r0, r4
    b90e:	9702      	str	r7, [sp, #8]
    b910:	f7fd fe5a 	bl	95c8 <dw1000_write_reg>
    otp_addr = (uint32_t) _dw1000_otp_read(inst, OTP_XTRIM_ADDRESS) & 0xffff;    // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
    b914:	211e      	movs	r1, #30
    b916:	4620      	mov	r0, r4
    b918:	f000 fb1f 	bl	bf5a <_dw1000_otp_read>
    b91c:	b285      	uxth	r5, r0
    inst->otp_rev = (otp_addr >> 8) & 0xff;                                               // OTP revision is next byte
    b91e:	f3c0 2007 	ubfx	r0, r0, #8, #8
    b922:	f8a4 057c 	strh.w	r0, [r4, #1404]	; 0x57c
    ldo_tune = _dw1000_otp_read(inst, OTP_LDOTUNE_ADDRESS);
    b926:	2104      	movs	r1, #4
    b928:	4620      	mov	r0, r4
    b92a:	f000 fb16 	bl	bf5a <_dw1000_otp_read>
    if((ldo_tune & 0xFF) != 0){
    b92e:	b2c0      	uxtb	r0, r0
    b930:	b178      	cbz	r0, b952 <dw1000_phy_init+0x9a>
        dw1000_write_reg(inst, OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK, sizeof(uint8_t)); // Set load LDE kick bit
    b932:	2300      	movs	r3, #0
    b934:	2202      	movs	r2, #2
    b936:	e9cd 2300 	strd	r2, r3, [sp]
    b93a:	9702      	str	r7, [sp, #8]
    b93c:	2212      	movs	r2, #18
    b93e:	212d      	movs	r1, #45	; 0x2d
    b940:	4620      	mov	r0, r4
    b942:	f7fd fe41 	bl	95c8 <dw1000_write_reg>
        inst->uwb_dev.status.LDO_enabled = 1; // LDO tune must be kicked at wake-up
    b946:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
    b94a:	f043 0320 	orr.w	r3, r3, #32
    b94e:	f884 3509 	strb.w	r3, [r4, #1289]	; 0x509
    inst->part_id = _dw1000_otp_read(inst, OTP_PARTID_ADDRESS);
    b952:	2106      	movs	r1, #6
    b954:	4620      	mov	r0, r4
    b956:	f000 fb00 	bl	bf5a <_dw1000_otp_read>
    inst->lot_id = _dw1000_otp_read(inst, OTP_LOTID_ADDRESS);
    b95a:	2107      	movs	r1, #7
    inst->part_id = _dw1000_otp_read(inst, OTP_PARTID_ADDRESS);
    b95c:	f8c4 0574 	str.w	r0, [r4, #1396]	; 0x574
    inst->lot_id = _dw1000_otp_read(inst, OTP_LOTID_ADDRESS);
    b960:	4620      	mov	r0, r4
    b962:	f000 fafa 	bl	bf5a <_dw1000_otp_read>
    inst->otp_vbat = _dw1000_otp_read(inst, OTP_VBAT_ADDRESS);
    b966:	2108      	movs	r1, #8
    inst->lot_id = _dw1000_otp_read(inst, OTP_LOTID_ADDRESS);
    b968:	f8c4 0578 	str.w	r0, [r4, #1400]	; 0x578
    inst->otp_vbat = _dw1000_otp_read(inst, OTP_VBAT_ADDRESS);
    b96c:	4620      	mov	r0, r4
    b96e:	f000 faf4 	bl	bf5a <_dw1000_otp_read>
    inst->otp_temp = _dw1000_otp_read(inst, OTP_VTEMP_ADDRESS);
    b972:	2109      	movs	r1, #9
    inst->otp_vbat = _dw1000_otp_read(inst, OTP_VBAT_ADDRESS);
    b974:	f884 057e 	strb.w	r0, [r4, #1406]	; 0x57e
    inst->otp_temp = _dw1000_otp_read(inst, OTP_VTEMP_ADDRESS);
    b978:	4620      	mov	r0, r4
    b97a:	f000 faee 	bl	bf5a <_dw1000_otp_read>
    inst->otp_xtal_trim = otp_addr & 0x1F;
    b97e:	f005 051f 	and.w	r5, r5, #31
    inst->otp_temp = _dw1000_otp_read(inst, OTP_VTEMP_ADDRESS);
    b982:	f884 057f 	strb.w	r0, [r4, #1407]	; 0x57f
    inst->otp_xtal_trim = otp_addr & 0x1F;
    b986:	f884 5580 	strb.w	r5, [r4, #1408]	; 0x580
    if (inst->otp_xtal_trim && (inst->uwb_dev.config.rx.xtalTrim == 0xff)) {
    b98a:	b12d      	cbz	r5, b998 <dw1000_phy_init+0xe0>
    b98c:	f894 251e 	ldrb.w	r2, [r4, #1310]	; 0x51e
    b990:	2aff      	cmp	r2, #255	; 0xff
        inst->uwb_dev.config.rx.xtalTrim = inst->otp_xtal_trim;
    b992:	bf08      	it	eq
    b994:	f884 551e 	strbeq.w	r5, [r4, #1310]	; 0x51e
    dw1000_write_reg(inst, FS_CTRL_ID, FS_XTALT_OFFSET, reg, sizeof(uint8_t));
    b998:	2301      	movs	r3, #1
    b99a:	9302      	str	r3, [sp, #8]
    reg = (3 << 5) | (inst->uwb_dev.config.rx.xtalTrim & FS_XTALT_MASK);
    b99c:	f894 351e 	ldrb.w	r3, [r4, #1310]	; 0x51e
    b9a0:	f003 031f 	and.w	r3, r3, #31
    dw1000_write_reg(inst, FS_CTRL_ID, FS_XTALT_OFFSET, reg, sizeof(uint8_t));
    b9a4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    b9a8:	9300      	str	r3, [sp, #0]
    b9aa:	2300      	movs	r3, #0
    b9ac:	9301      	str	r3, [sp, #4]
    b9ae:	220e      	movs	r2, #14
    b9b0:	212b      	movs	r1, #43	; 0x2b
    b9b2:	4620      	mov	r0, r4
    b9b4:	f7fd fe08 	bl	95c8 <dw1000_write_reg>
    if(inst->uwb_dev.config.LDE_enable)
    b9b8:	f894 352d 	ldrb.w	r3, [r4, #1325]	; 0x52d
    b9bc:	075b      	lsls	r3, r3, #29
    b9be:	d51a      	bpl.n	b9f6 <dw1000_phy_init+0x13e>
    dw1000_phy_sysclk_LDE(inst);
    b9c0:	4620      	mov	r0, r4
    b9c2:	f7ff ff00 	bl	b7c6 <dw1000_phy_sysclk_LDE>
    dw1000_write_reg(inst, OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD, sizeof(uint16_t)); // Set load LDE kick bit
    b9c6:	2302      	movs	r3, #2
    b9c8:	9302      	str	r3, [sp, #8]
    b9ca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    b9ce:	2300      	movs	r3, #0
    b9d0:	e9cd 2300 	strd	r2, r3, [sp]
    b9d4:	212d      	movs	r1, #45	; 0x2d
    b9d6:	2206      	movs	r2, #6
    b9d8:	4620      	mov	r0, r4
    b9da:	f7fd fdf5 	bl	95c8 <dw1000_write_reg>
    dpl_cputime_delay_usecs(120); // Allow time for code to upload (should take up to 120 us)
    b9de:	2078      	movs	r0, #120	; 0x78
    b9e0:	f004 ffb6 	bl	10950 <dpl_cputime_delay_usecs>
    dw1000_phy_sysclk_SEQ(inst); // Enable clocks for sequencing
    b9e4:	4620      	mov	r0, r4
    b9e6:	f7ff ff07 	bl	b7f8 <dw1000_phy_sysclk_SEQ>
    inst->uwb_dev.status.LDE_enabled = 1;
    b9ea:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
    b9ee:	f043 0310 	orr.w	r3, r3, #16
    b9f2:	f884 3509 	strb.w	r3, [r4, #1289]	; 0x509
    dw1000_phy_sysclk_SEQ(inst);    // Enable clocks for sequencing
    b9f6:	4620      	mov	r0, r4
    b9f8:	f7ff fefe 	bl	b7f8 <dw1000_phy_sysclk_SEQ>
    reg = dw1000_read_reg(inst, AON_ID, AON_CFG1_OFFSET, sizeof(uint8_t));
    b9fc:	2301      	movs	r3, #1
    b9fe:	220a      	movs	r2, #10
    ba00:	4620      	mov	r0, r4
    ba02:	212c      	movs	r1, #44	; 0x2c
    ba04:	f7fd fd8e 	bl	9524 <dw1000_read_reg>
    reg |= ~AON_CFG1_SMXX;
    ba08:	f060 0002 	orn	r0, r0, #2
    dw1000_write_reg(inst, AON_ID, AON_CFG1_OFFSET, reg, sizeof(uint8_t));
    ba0c:	2500      	movs	r5, #0
    ba0e:	2301      	movs	r3, #1
    ba10:	b2c0      	uxtb	r0, r0
    ba12:	e9cd 0500 	strd	r0, r5, [sp]
    ba16:	9302      	str	r3, [sp, #8]
    ba18:	4620      	mov	r0, r4
    ba1a:	220a      	movs	r2, #10
    ba1c:	212c      	movs	r1, #44	; 0x2c
    ba1e:	f7fd fdd3 	bl	95c8 <dw1000_write_reg>
    dw1000_write_reg(inst, AON_ID, AON_WCFG_OFFSET , AON_WCFG_ONW_RADC, sizeof(uint16_t));
    ba22:	2702      	movs	r7, #2
    ba24:	2300      	movs	r3, #0
    ba26:	2201      	movs	r2, #1
    ba28:	e9cd 2300 	strd	r2, r3, [sp]
    ba2c:	4620      	mov	r0, r4
    ba2e:	462a      	mov	r2, r5
    ba30:	9702      	str	r7, [sp, #8]
    ba32:	212c      	movs	r1, #44	; 0x2c
    ba34:	f7fd fdc8 	bl	95c8 <dw1000_write_reg>
    dw1000_phy_set_rx_antennadelay(inst, inst->uwb_dev.rx_antenna_delay);
    ba38:	f8b4 34cc 	ldrh.w	r3, [r4, #1228]	; 0x4cc
    ba3c:	9702      	str	r7, [sp, #8]
    ba3e:	e9cd 3500 	strd	r3, r5, [sp]
    ba42:	4620      	mov	r0, r4
    ba44:	f641 0204 	movw	r2, #6148	; 0x1804
    ba48:	212e      	movs	r1, #46	; 0x2e
    ba4a:	f7fd fdbd 	bl	95c8 <dw1000_write_reg>
    dw1000_phy_set_tx_antennadelay(inst, inst->uwb_dev.tx_antenna_delay);
    ba4e:	f8b4 34ce 	ldrh.w	r3, [r4, #1230]	; 0x4ce
    ba52:	9702      	str	r7, [sp, #8]
    ba54:	e9cd 3500 	strd	r3, r5, [sp]
    ba58:	462a      	mov	r2, r5
    ba5a:	4620      	mov	r0, r4
    ba5c:	2118      	movs	r1, #24
    ba5e:	f7fd fdb3 	bl	95c8 <dw1000_write_reg>
    dw1000_phy_config_txrf(inst, txrf_config);
    ba62:	4631      	mov	r1, r6
    ba64:	4620      	mov	r0, r4
    ba66:	f7ff ff0e 	bl	b886 <dw1000_phy_config_txrf>
    inst->sys_cfg_reg = dw1000_read_reg(inst, SYS_CFG_ID, 0, sizeof(uint32_t)) ; // Read sysconfig register
    ba6a:	2304      	movs	r3, #4
    ba6c:	462a      	mov	r2, r5
    ba6e:	4619      	mov	r1, r3
    ba70:	4620      	mov	r0, r4
    ba72:	f7fd fd57 	bl	9524 <dw1000_read_reg>
    ba76:	f8c4 0584 	str.w	r0, [r4, #1412]	; 0x584
}
    ba7a:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    ba7e:	b005      	add	sp, #20
    ba80:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000ba82 <dw1000_phy_rx_reset>:
 *
 * @param inst   Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_rx_reset(struct _dw1000_dev_instance_t * inst)
{
    ba82:	b5f0      	push	{r4, r5, r6, r7, lr}
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
    ba84:	f500 66ad 	add.w	r6, r0, #1384	; 0x568
    ba88:	b085      	sub	sp, #20
    ba8a:	4604      	mov	r4, r0
    ba8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ba90:	4630      	mov	r0, r6
    ba92:	f001 fbbb 	bl	d20c <os_mutex_pend>
    dpl_error_t err = dpl_mutex_pend(&inst->mutex, DPL_WAIT_FOREVER);
    if (err != DPL_OK) {
    ba96:	4605      	mov	r5, r0
    ba98:	b138      	cbz	r0, baaa <dw1000_phy_rx_reset+0x28>
        inst->uwb_dev.status.mtx_error = 1;
    ba9a:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
    ba9e:	f043 0308 	orr.w	r3, r3, #8
    baa2:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
    // Clear RX reset
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR, sizeof(uint8_t));

    err = dpl_mutex_release(&inst->mutex);
    assert(err == DPL_OK);
}
    baa6:	b005      	add	sp, #20
    baa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_RX, sizeof(uint8_t));
    baaa:	2300      	movs	r3, #0
    baac:	2701      	movs	r7, #1
    baae:	22e0      	movs	r2, #224	; 0xe0
    bab0:	e9cd 2300 	strd	r2, r3, [sp]
    bab4:	2136      	movs	r1, #54	; 0x36
    bab6:	2203      	movs	r2, #3
    bab8:	4620      	mov	r0, r4
    baba:	9702      	str	r7, [sp, #8]
    babc:	f7fd fd84 	bl	95c8 <dw1000_write_reg>
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR, sizeof(uint8_t));
    bac0:	22f0      	movs	r2, #240	; 0xf0
    bac2:	2300      	movs	r3, #0
    bac4:	e9cd 2300 	strd	r2, r3, [sp]
    bac8:	4620      	mov	r0, r4
    baca:	9702      	str	r7, [sp, #8]
    bacc:	2203      	movs	r2, #3
    bace:	2136      	movs	r1, #54	; 0x36
    bad0:	f7fd fd7a 	bl	95c8 <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
    bad4:	4630      	mov	r0, r6
    bad6:	f001 fb47 	bl	d168 <os_mutex_release>
    assert(err == DPL_OK);
    bada:	2800      	cmp	r0, #0
    badc:	d0e3      	beq.n	baa6 <dw1000_phy_rx_reset+0x24>
    bade:	462b      	mov	r3, r5
    bae0:	462a      	mov	r2, r5
    bae2:	4629      	mov	r1, r5
    bae4:	4628      	mov	r0, r5
    bae6:	f000 fe89 	bl	c7fc <__assert_func>
    baea:	0000      	movs	r0, r0
    baec:	0000      	movs	r0, r0
	...

0000baf0 <dw1000_phy_forcetrxoff>:
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_forcetrxoff(struct _dw1000_dev_instance_t * inst)
{
    baf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    dpl_error_t err;
    struct uwb_mac_interface * cbs = NULL;
    uint32_t mask = dw1000_read_reg(inst, SYS_MASK_ID, 0 , sizeof(uint32_t)) ; // Read set interrupt mask
    baf2:	2200      	movs	r2, #0
{
    baf4:	b087      	sub	sp, #28
    uint32_t mask = dw1000_read_reg(inst, SYS_MASK_ID, 0 , sizeof(uint32_t)) ; // Read set interrupt mask
    baf6:	2304      	movs	r3, #4
    baf8:	210e      	movs	r1, #14
{
    bafa:	4604      	mov	r4, r0
    uint32_t mask = dw1000_read_reg(inst, SYS_MASK_ID, 0 , sizeof(uint32_t)) ; // Read set interrupt mask
    bafc:	f7fd fd12 	bl	9524 <dw1000_read_reg>
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
    bb00:	f504 67ad 	add.w	r7, r4, #1384	; 0x568
    bb04:	4605      	mov	r5, r0
    bb06:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    bb0a:	4638      	mov	r0, r7
    bb0c:	f001 fb7e 	bl	d20c <os_mutex_pend>
    // We can disable the radio, but before the status is cleared an interrupt can be set (e.g. the
    // event has just happened before the radio was disabled)
    // thus we need to disable interrupt during this operation

    err = dpl_mutex_pend(&inst->mutex, DPL_WAIT_FOREVER);
    if (err != DPL_OK) {
    bb10:	4602      	mov	r2, r0
    bb12:	b138      	cbz	r0, bb24 <dw1000_phy_forcetrxoff+0x34>
        inst->uwb_dev.status.mtx_error = 1;
    bb14:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
    bb18:	f043 0308 	orr.w	r3, r3, #8
    bb1c:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
    if (dpl_sem_get_count(&inst->tx_sem) == 0) {
        err = dpl_sem_release(&inst->tx_sem);
        assert(err == DPL_OK);
        inst->uwb_dev.status.sem_force_released = 1;
    }
}
    bb20:	b007      	add	sp, #28
    bb22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dw1000_write_reg(inst, SYS_MASK_ID, 0, 0, sizeof(uint32_t)) ; // Clear interrupt mask - so we don't get any unwanted events
    bb24:	2604      	movs	r6, #4
    bb26:	2000      	movs	r0, #0
    bb28:	2100      	movs	r1, #0
    bb2a:	e9cd 0100 	strd	r0, r1, [sp]
    bb2e:	9602      	str	r6, [sp, #8]
    bb30:	210e      	movs	r1, #14
    bb32:	4620      	mov	r0, r4
    bb34:	9205      	str	r2, [sp, #20]
    bb36:	f7fd fd47 	bl	95c8 <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TRXOFF, sizeof(uint8_t)) ; // Disable the radio
    bb3a:	2301      	movs	r3, #1
    bb3c:	2040      	movs	r0, #64	; 0x40
    bb3e:	2100      	movs	r1, #0
    bb40:	e9cd 0100 	strd	r0, r1, [sp]
    bb44:	9302      	str	r3, [sp, #8]
    bb46:	9a05      	ldr	r2, [sp, #20]
    bb48:	210d      	movs	r1, #13
    bb4a:	4620      	mov	r0, r4
    bb4c:	f7fd fd3c 	bl	95c8 <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_STATUS_ID, 0, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD| SYS_STATUS_TXBERR), sizeof(uint32_t));
    bb50:	a123      	add	r1, pc, #140	; (adr r1, bbe0 <dw1000_phy_forcetrxoff+0xf0>)
    bb52:	e9d1 0100 	ldrd	r0, r1, [r1]
    bb56:	9a05      	ldr	r2, [sp, #20]
    bb58:	9602      	str	r6, [sp, #8]
    bb5a:	e9cd 0100 	strd	r0, r1, [sp]
    bb5e:	210f      	movs	r1, #15
    bb60:	4620      	mov	r0, r4
    bb62:	f7fd fd31 	bl	95c8 <dw1000_write_reg>
    if (inst->uwb_dev.config.dblbuffon_enabled)
    bb66:	f894 352c 	ldrb.w	r3, [r4, #1324]	; 0x52c
    bb6a:	06db      	lsls	r3, r3, #27
    bb6c:	d502      	bpl.n	bb74 <dw1000_phy_forcetrxoff+0x84>
        dw1000_sync_rxbufptrs(inst);
    bb6e:	4620      	mov	r0, r4
    bb70:	f7fe fb68 	bl	a244 <dw1000_sync_rxbufptrs>
    dw1000_write_reg(inst, SYS_MASK_ID, 0, mask, sizeof(uint32_t)); // Restore mask to what it was
    bb74:	2200      	movs	r2, #0
    bb76:	e9cd 5200 	strd	r5, r2, [sp]
    bb7a:	9602      	str	r6, [sp, #8]
    bb7c:	210e      	movs	r1, #14
    bb7e:	4620      	mov	r0, r4
    bb80:	f7fd fd22 	bl	95c8 <dw1000_write_reg>
    if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
    bb84:	f8d4 5530 	ldr.w	r5, [r4, #1328]	; 0x530
    bb88:	b135      	cbz	r5, bb98 <dw1000_phy_forcetrxoff+0xa8>
            if (cbs!=NULL && cbs->reset_cb)
    bb8a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    bb8c:	b113      	cbz	r3, bb94 <dw1000_phy_forcetrxoff+0xa4>
                if(cbs->reset_cb((struct uwb_dev*)inst, cbs)) continue;
    bb8e:	4629      	mov	r1, r5
    bb90:	4620      	mov	r0, r4
    bb92:	4798      	blx	r3
        SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
    bb94:	6bad      	ldr	r5, [r5, #56]	; 0x38
    bb96:	e7f7      	b.n	bb88 <dw1000_phy_forcetrxoff+0x98>
    return (dpl_error_t)os_mutex_release(&mu->mu);
    bb98:	4638      	mov	r0, r7
    bb9a:	f001 fae5 	bl	d168 <os_mutex_release>
    assert(err == DPL_OK);
    bb9e:	b128      	cbz	r0, bbac <dw1000_phy_forcetrxoff+0xbc>
    bba0:	2300      	movs	r3, #0
    bba2:	461a      	mov	r2, r3
    bba4:	4619      	mov	r1, r3
    bba6:	4618      	mov	r0, r3
    bba8:	f000 fe28 	bl	c7fc <__assert_func>
    inst->control.wait4resp_enabled = 0;
    bbac:	f8b4 35b0 	ldrh.w	r3, [r4, #1456]	; 0x5b0
    bbb0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
    bbb4:	f023 0301 	bic.w	r3, r3, #1
    bbb8:	f8a4 35b0 	strh.w	r3, [r4, #1456]	; 0x5b0
    if (dpl_sem_get_count(&inst->tx_sem) == 0) {
    bbbc:	f8b4 3566 	ldrh.w	r3, [r4, #1382]	; 0x566
    bbc0:	2b00      	cmp	r3, #0
    bbc2:	d1ad      	bne.n	bb20 <dw1000_phy_forcetrxoff+0x30>
    return (dpl_error_t)os_sem_release(&sem->sem);
    bbc4:	f504 60ac 	add.w	r0, r4, #1376	; 0x560
    bbc8:	f001 fd46 	bl	d658 <os_sem_release>
        assert(err == DPL_OK);
    bbcc:	2800      	cmp	r0, #0
    bbce:	d1e7      	bne.n	bba0 <dw1000_phy_forcetrxoff+0xb0>
        inst->uwb_dev.status.sem_force_released = 1;
    bbd0:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
    bbd4:	f043 0302 	orr.w	r3, r3, #2
    bbd8:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
    bbdc:	e7a0      	b.n	bb20 <dw1000_phy_forcetrxoff+0x30>
    bbde:	bf00      	nop
    bbe0:	3433fbf8 	.word	0x3433fbf8
    bbe4:	00000000 	.word	0x00000000

0000bbe8 <dw1000_phy_interrupt_mask>:
 * @param bitmask   Sets the events which generates interrupt.
 * @param enable    If set, the interrupts are enabled else they are cleared.
 * @return void
 */
void dw1000_phy_interrupt_mask(struct _dw1000_dev_instance_t * inst, uint32_t bitmask, uint8_t enable)
{
    bbe8:	b5f0      	push	{r4, r5, r6, r7, lr}
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
    bbea:	f500 66ad 	add.w	r6, r0, #1384	; 0x568
    bbee:	b085      	sub	sp, #20
    bbf0:	4604      	mov	r4, r0
    bbf2:	460d      	mov	r5, r1
    bbf4:	4630      	mov	r0, r6
    bbf6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    bbfa:	4617      	mov	r7, r2
    bbfc:	f001 fb06 	bl	d20c <os_mutex_pend>
    // Critical region, atomic lock with mutex
    uint32_t mask;
    dpl_error_t err = dpl_mutex_pend(&inst->mutex, DPL_WAIT_FOREVER);
    if (err != DPL_OK) {
    bc00:	4602      	mov	r2, r0
    bc02:	b138      	cbz	r0, bc14 <dw1000_phy_interrupt_mask+0x2c>
        inst->uwb_dev.status.mtx_error = 1;
    bc04:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
    bc08:	f043 0308 	orr.w	r3, r3, #8
    bc0c:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
    // Critical region, unlock mutex
    err = dpl_mutex_release(&inst->mutex);
    assert(err == DPL_OK);
mtx_error:
    return;
}
    bc10:	b005      	add	sp, #20
    bc12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mask = dw1000_read_reg(inst, SYS_MASK_ID, 0, sizeof(uint32_t)) ; // Read register
    bc14:	2304      	movs	r3, #4
    bc16:	210e      	movs	r1, #14
    bc18:	4620      	mov	r0, r4
    bc1a:	f7fd fc83 	bl	9524 <dw1000_read_reg>
    if(enable)
    bc1e:	b1af      	cbz	r7, bc4c <dw1000_phy_interrupt_mask+0x64>
        mask |= bitmask ;
    bc20:	4328      	orrs	r0, r5
    dw1000_write_reg(inst, SYS_MASK_ID, 0, mask, sizeof(uint32_t));
    bc22:	2304      	movs	r3, #4
    bc24:	9302      	str	r3, [sp, #8]
    bc26:	2300      	movs	r3, #0
    bc28:	e9cd 0300 	strd	r0, r3, [sp]
    bc2c:	461a      	mov	r2, r3
    bc2e:	210e      	movs	r1, #14
    bc30:	4620      	mov	r0, r4
    bc32:	f7fd fcc9 	bl	95c8 <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
    bc36:	4630      	mov	r0, r6
    bc38:	f001 fa96 	bl	d168 <os_mutex_release>
    assert(err == DPL_OK);
    bc3c:	2300      	movs	r3, #0
    bc3e:	2800      	cmp	r0, #0
    bc40:	d0e6      	beq.n	bc10 <dw1000_phy_interrupt_mask+0x28>
    bc42:	461a      	mov	r2, r3
    bc44:	4619      	mov	r1, r3
    bc46:	4618      	mov	r0, r3
    bc48:	f000 fdd8 	bl	c7fc <__assert_func>
        mask &= ~bitmask ; // Clear the bit
    bc4c:	ea20 0005 	bic.w	r0, r0, r5
    bc50:	e7e7      	b.n	bc22 <dw1000_phy_interrupt_mask+0x3a>
	...

0000bc54 <dw1000_phy_repeated_frames>:
 * @param rate     Rate at which frames with be repeated in dtu, set to 0 to disable
 * @return void
 */
void
dw1000_phy_repeated_frames(struct _dw1000_dev_instance_t * inst, uint64_t rate)
{
    bc54:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    bc58:	461d      	mov	r5, r3
    int rc;

    if (!rate) {
    bc5a:	ea52 0305 	orrs.w	r3, r2, r5
{
    bc5e:	4604      	mov	r4, r0
    bc60:	4616      	mov	r6, r2
    if (!rate) {
    bc62:	d115      	bne.n	bc90 <dw1000_phy_repeated_frames+0x3c>
        /* Stop sending packets */
        dw1000_write_reg(inst, RF_CONF_ID, 0, 0, sizeof(uint32_t));
    bc64:	2304      	movs	r3, #4
    bc66:	2600      	movs	r6, #0
    bc68:	2700      	movs	r7, #0
    bc6a:	9302      	str	r3, [sp, #8]
    bc6c:	2200      	movs	r2, #0
    bc6e:	2128      	movs	r1, #40	; 0x28
    bc70:	e9cd 6700 	strd	r6, r7, [sp]
    bc74:	f7fd fca8 	bl	95c8 <dw1000_write_reg>
        dw1000_write_reg(inst, DIG_DIAG_ID, DIAG_TMC_OFFSET, 0, sizeof(uint8_t));
    bc78:	e9cd 6700 	strd	r6, r7, [sp]
    bc7c:	2301      	movs	r3, #1
    bc7e:	9302      	str	r3, [sp, #8]
    bc80:	2224      	movs	r2, #36	; 0x24
    bc82:	212f      	movs	r1, #47	; 0x2f
        /* Turn the tx power spectrum test mode - continuous sending of frames */
        dw1000_write_reg(inst, DIG_DIAG_ID, DIAG_TMC_OFFSET,
                         (uint8_t)(DIAG_TMC_TX_PSTM), sizeof(uint8_t));

        /* Trigger first frame - Needed?? */
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT, sizeof(uint8_t));
    bc84:	4620      	mov	r0, r4
    bc86:	f7fd fc9f 	bl	95c8 <dw1000_write_reg>
    }
}
    bc8a:	b004      	add	sp, #16
    bc8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        inst->spi_settings.baudrate = inst->spi_baudrate_low;
    bc90:	f8d0 3558 	ldr.w	r3, [r0, #1368]	; 0x558
    bc94:	f8c0 3598 	str.w	r3, [r0, #1432]	; 0x598
        rc = hal_spi_disable(inst->spi_num);
    bc98:	f890 055c 	ldrb.w	r0, [r0, #1372]	; 0x55c
    bc9c:	f000 fb7c 	bl	c398 <hal_spi_disable>
        assert(rc == 0);
    bca0:	b128      	cbz	r0, bcae <dw1000_phy_repeated_frames+0x5a>
    bca2:	2300      	movs	r3, #0
    bca4:	461a      	mov	r2, r3
    bca6:	4619      	mov	r1, r3
    bca8:	4618      	mov	r0, r3
    bcaa:	f000 fda7 	bl	c7fc <__assert_func>
        rc = hal_spi_config(inst->spi_num, &inst->spi_settings);
    bcae:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
    bcb2:	f204 5194 	addw	r1, r4, #1428	; 0x594
    bcb6:	f000 fac1 	bl	c23c <hal_spi_config>
        assert(rc == 0);
    bcba:	2800      	cmp	r0, #0
    bcbc:	d1f1      	bne.n	bca2 <dw1000_phy_repeated_frames+0x4e>
        rc = hal_spi_enable(inst->spi_num);
    bcbe:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
    bcc2:	f000 fb49 	bl	c358 <hal_spi_enable>
        assert(rc == 0);
    bcc6:	4607      	mov	r7, r0
    bcc8:	2800      	cmp	r0, #0
    bcca:	d1ea      	bne.n	bca2 <dw1000_phy_repeated_frames+0x4e>
        printf("PMSC_ID[0]: %"PRIx32"\n", (uint32_t)dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint32_t)));
    bccc:	4602      	mov	r2, r0
    bcce:	2304      	movs	r3, #4
    bcd0:	2136      	movs	r1, #54	; 0x36
    bcd2:	4620      	mov	r0, r4
    bcd4:	f7fd fc26 	bl	9524 <dw1000_read_reg>
    bcd8:	4601      	mov	r1, r0
    bcda:	482d      	ldr	r0, [pc, #180]	; (bd90 <dw1000_phy_repeated_frames+0x13c>)
    bcdc:	f004 fdae 	bl	1083c <printf>
        printf("PMSC_ID[1]: %"PRIx32"\n", (uint32_t)dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, sizeof(uint32_t)));
    bce0:	2304      	movs	r3, #4
    bce2:	461a      	mov	r2, r3
    bce4:	2136      	movs	r1, #54	; 0x36
    bce6:	4620      	mov	r0, r4
    bce8:	f7fd fc1c 	bl	9524 <dw1000_read_reg>
    bcec:	4601      	mov	r1, r0
    bcee:	4829      	ldr	r0, [pc, #164]	; (bd94 <dw1000_phy_repeated_frames+0x140>)
    bcf0:	f004 fda4 	bl	1083c <printf>
        dw1000_phy_disable_sequencing(inst);
    bcf4:	4620      	mov	r0, r4
    bcf6:	f7ff fd93 	bl	b820 <dw1000_phy_disable_sequencing>
        dw1000_write_reg(inst, RF_CONF_ID, 0, RF_CONF_TXPLLPOWEN_MASK, sizeof(uint32_t));
    bcfa:	f04f 0804 	mov.w	r8, #4
    bcfe:	2300      	movs	r3, #0
    bd00:	f44f 12ff 	mov.w	r2, #2088960	; 0x1fe000
    bd04:	e9cd 2300 	strd	r2, r3, [sp]
    bd08:	2128      	movs	r1, #40	; 0x28
    bd0a:	463a      	mov	r2, r7
    bd0c:	4620      	mov	r0, r4
    bd0e:	f8cd 8008 	str.w	r8, [sp, #8]
    bd12:	f7fd fc59 	bl	95c8 <dw1000_write_reg>
        dw1000_write_reg(inst, RF_CONF_ID, 0, RF_CONF_TXALLEN_MASK, sizeof(uint32_t));
    bd16:	4a20      	ldr	r2, [pc, #128]	; (bd98 <dw1000_phy_repeated_frames+0x144>)
    bd18:	f8cd 8008 	str.w	r8, [sp, #8]
    bd1c:	2300      	movs	r3, #0
    bd1e:	e9cd 2300 	strd	r2, r3, [sp]
    bd22:	2128      	movs	r1, #40	; 0x28
    bd24:	463a      	mov	r2, r7
    bd26:	4620      	mov	r0, r4
    bd28:	f7fd fc4e 	bl	95c8 <dw1000_write_reg>
        dw1000_phy_sysclk_PLL(inst);
    bd2c:	4620      	mov	r0, r4
    bd2e:	f7ff fd1e 	bl	b76e <dw1000_phy_sysclk_PLL>
        dw1000_phy_txclk_PLL(inst);
    bd32:	4620      	mov	r0, r4
    bd34:	f7ff fd31 	bl	b79a <dw1000_phy_txclk_PLL>
        if ((rate>>8) < 4) {
    bd38:	0a32      	lsrs	r2, r6, #8
    bd3a:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    bd3e:	0a2b      	lsrs	r3, r5, #8
    bd40:	4542      	cmp	r2, r8
    bd42:	f173 0300 	sbcs.w	r3, r3, #0
            rate = ((uint64_t)4<<8);
    bd46:	bf3c      	itt	cc
    bd48:	f44f 6680 	movcc.w	r6, #1024	; 0x400
    bd4c:	463d      	movcc	r5, r7
        dw1000_write_reg(inst, DX_TIME_ID, 0, rate>>8, sizeof(uint32_t));
    bd4e:	0a36      	lsrs	r6, r6, #8
    bd50:	ea46 6605 	orr.w	r6, r6, r5, lsl #24
    bd54:	0a2d      	lsrs	r5, r5, #8
    bd56:	e9cd 6500 	strd	r6, r5, [sp]
    bd5a:	2200      	movs	r2, #0
    bd5c:	210a      	movs	r1, #10
    bd5e:	4620      	mov	r0, r4
    bd60:	f8cd 8008 	str.w	r8, [sp, #8]
    bd64:	f7fd fc30 	bl	95c8 <dw1000_write_reg>
        dw1000_write_reg(inst, DIG_DIAG_ID, DIAG_TMC_OFFSET,
    bd68:	2501      	movs	r5, #1
    bd6a:	2300      	movs	r3, #0
    bd6c:	2210      	movs	r2, #16
    bd6e:	e9cd 2300 	strd	r2, r3, [sp]
    bd72:	212f      	movs	r1, #47	; 0x2f
    bd74:	2224      	movs	r2, #36	; 0x24
    bd76:	9502      	str	r5, [sp, #8]
    bd78:	4620      	mov	r0, r4
    bd7a:	f7fd fc25 	bl	95c8 <dw1000_write_reg>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT, sizeof(uint8_t));
    bd7e:	2202      	movs	r2, #2
    bd80:	2300      	movs	r3, #0
    bd82:	e9cd 2300 	strd	r2, r3, [sp]
    bd86:	9502      	str	r5, [sp, #8]
    bd88:	2200      	movs	r2, #0
    bd8a:	210d      	movs	r1, #13
    bd8c:	e77a      	b.n	bc84 <dw1000_phy_repeated_frames+0x30>
    bd8e:	bf00      	nop
    bd90:	0002046c 	.word	0x0002046c
    bd94:	0002047d 	.word	0x0002047d
    bd98:	005fff00 	.word	0x005fff00

0000bd9c <dw1000_phy_SHR_duration>:
 * @param nlen      The length of the frame to be transmitted/received excluding crc
 * @return uint16_t duration in usec
 */
uint16_t
dw1000_phy_SHR_duration(struct uwb_phy_attributes * attrib)
{
    bd9c:	b508      	push	{r3, lr}
    /* TXsym is represented as a float32_t */
#ifdef __KERNEL__
    duration = f32_to_i32(
        f32_mul(attrib->Tpsym, ui32_to_f32(attrib->nsync + attrib->nsfd)), 3, false);
#else
    duration = ceilf(attrib->Tpsym * (attrib->nsync + attrib->nsfd));
    bd9e:	89c3      	ldrh	r3, [r0, #14]
    bda0:	7b02      	ldrb	r2, [r0, #12]
    bda2:	ed90 0a00 	vldr	s0, [r0]
    bda6:	4413      	add	r3, r2
    bda8:	ee07 3a90 	vmov	s15, r3
    bdac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    bdb0:	ee27 0a80 	vmul.f32	s0, s15, s0
    bdb4:	f013 fa7a 	bl	1f2ac <ceilf>
    bdb8:	eebc 0ac0 	vcvt.u32.f32	s0, s0
#endif
    return duration;
}
    bdbc:	ee10 3a10 	vmov	r3, s0
    bdc0:	b298      	uxth	r0, r3
    bdc2:	bd08      	pop	{r3, pc}

0000bdc4 <dw1000_phy_data_duration>:
 *                  when using Cipher Mode 3 (no payload)
 * @return uint16_t duration in usec
 */
uint16_t
dw1000_phy_data_duration(struct uwb_phy_attributes * attrib, uint16_t nlen)
{
    bdc4:	b508      	push	{r3, lr}
        tmp = DPL_FLOAT32_MUL(attrib->Tbsym, DPL_FLOAT32_I32_TO_F32(attrib->nphr));
        tmp = DPL_FLOAT32_ADD(tmp, DPL_FLOAT32_MUL(attrib->Tdsym, DPL_FLOAT32_I32_TO_F32(total_payload_bits)));
        duration = f32_to_i32(DPL_FLOAT32_CEIL(tmp), softfloat_round_max, false);
    }
#else
    duration = (int)ceilf(attrib->Tbsym * attrib->nphr +
    bdc6:	7c83      	ldrb	r3, [r0, #18]
                          attrib->Tdsym * total_payload_bits);
    bdc8:	ed90 7a02 	vldr	s14, [r0, #8]
    parity_data_bits += ((8*(nlen+2))/330) * 48;
    bdcc:	3102      	adds	r1, #2
    bdce:	00c9      	lsls	r1, r1, #3
    duration = (int)ceilf(attrib->Tbsym * attrib->nphr +
    bdd0:	ee07 3a90 	vmov	s15, r3
    parity_data_bits += ((8*(nlen+2))/330) * 48;
    bdd4:	f44f 73a5 	mov.w	r3, #330	; 0x14a
    bdd8:	fbb1 f2f3 	udiv	r2, r1, r3
    bddc:	2330      	movs	r3, #48	; 0x30
    bdde:	fb02 3303 	mla	r3, r2, r3, r3
    total_payload_bits = 8*(nlen+2) + parity_data_bits;
    bde2:	440b      	add	r3, r1
    bde4:	ee00 3a10 	vmov	s0, r3
                          attrib->Tdsym * total_payload_bits);
    bde8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    duration = (int)ceilf(attrib->Tbsym * attrib->nphr +
    bdec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                          attrib->Tdsym * total_payload_bits);
    bdf0:	ee20 0a07 	vmul.f32	s0, s0, s14
    duration = (int)ceilf(attrib->Tbsym * attrib->nphr +
    bdf4:	ed90 7a01 	vldr	s14, [r0, #4]
    bdf8:	eea7 0a27 	vfma.f32	s0, s14, s15
    bdfc:	f013 fa56 	bl	1f2ac <ceilf>
    be00:	eebd 0ac0 	vcvt.s32.f32	s0, s0
#endif
    return duration;
}
    be04:	ee10 3a10 	vmov	r3, s0
    be08:	b298      	uxth	r0, r3
    be0a:	bd08      	pop	{r3, pc}

0000be0c <dw1000_phy_frame_duration>:
 * @param nlen      The length of the frame to be transmitted/received excluding crc
 * @return uint16_t duration in usec
 */
inline uint16_t
dw1000_phy_frame_duration(struct uwb_phy_attributes * attrib, uint16_t nlen)
{
    be0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    be0e:	4605      	mov	r5, r0
    be10:	9101      	str	r1, [sp, #4]
    return dw1000_phy_SHR_duration(attrib) + dw1000_phy_data_duration(attrib, nlen);
    be12:	f7ff ffc3 	bl	bd9c <dw1000_phy_SHR_duration>
    be16:	9901      	ldr	r1, [sp, #4]
    be18:	4604      	mov	r4, r0
    be1a:	4628      	mov	r0, r5
    be1c:	f7ff ffd2 	bl	bdc4 <dw1000_phy_data_duration>
    be20:	4420      	add	r0, r4
}
    be22:	b280      	uxth	r0, r0
    be24:	b003      	add	sp, #12
    be26:	bd30      	pop	{r4, r5, pc}

0000be28 <dw1000_phy_txrf_power_value>:
bool
dw1000_phy_txrf_power_value(struct _dw1000_dev_instance_t * inst, uint8_t *reg,
                            dpl_float32_t coarse, dpl_float32_t fine)
{
    int c = DPL_FLOAT32_INT(coarse);
    if (!reg) {
    be28:	2900      	cmp	r1, #0
    be2a:	d050      	beq.n	bece <dw1000_phy_txrf_power_value+0xa6>
        return false;
    }
    if (DPL_FLOAT32_INT(fine) < 0 || DPL_FLOAT32_INT(fine) > 32) {
    be2c:	eefd 7ae0 	vcvt.s32.f32	s15, s1
    be30:	ee17 3a90 	vmov	r3, s15
    be34:	2b20      	cmp	r3, #32
    be36:	d84a      	bhi.n	bece <dw1000_phy_txrf_power_value+0xa6>
    int c = DPL_FLOAT32_INT(coarse);
    be38:	eebd 0ac0 	vcvt.s32.f32	s0, s0
        return false;
    }

    switch (c) {
    be3c:	ee10 3a10 	vmov	r3, s0
    be40:	2b12      	cmp	r3, #18
    be42:	d844      	bhi.n	bece <dw1000_phy_txrf_power_value+0xa6>
    be44:	e8df f003 	tbb	[pc, r3]
    be48:	3343433b 	.word	0x3343433b
    be4c:	432b4343 	.word	0x432b4343
    be50:	43432343 	.word	0x43432343
    be54:	1343431b 	.word	0x1343431b
    be58:	4343      	.short	0x4343
    be5a:	0a          	.byte	0x0a
    be5b:	00          	.byte	0x00
    case(18): *reg = dw1000_power_valuef(DW1000_txrf_config_18db, fine);break;
    be5c:	ee70 0aa0 	vadd.f32	s1, s1, s1
    be60:	eefd 7ae0 	vcvt.s32.f32	s15, s1
    be64:	ee17 3a90 	vmov	r3, s15
    case(15): *reg = dw1000_power_valuef(DW1000_txrf_config_15db, fine);break;
    be68:	700b      	strb	r3, [r1, #0]
    case(3):  *reg = dw1000_power_valuef(DW1000_txrf_config_3db, fine);break;
    case(0):  *reg = dw1000_power_valuef(DW1000_txrf_config_0db, fine);break;
    default:
        return false;
    }
    return true;
    be6a:	2001      	movs	r0, #1
    case(15): *reg = dw1000_power_valuef(DW1000_txrf_config_15db, fine);break;
    be6c:	4770      	bx	lr
    be6e:	ee70 0aa0 	vadd.f32	s1, s1, s1
    be72:	eefd 0ae0 	vcvt.s32.f32	s1, s1
    be76:	ee10 3a90 	vmov	r3, s1
    be7a:	3320      	adds	r3, #32
    be7c:	e7f4      	b.n	be68 <dw1000_phy_txrf_power_value+0x40>
    case(12): *reg = dw1000_power_valuef(DW1000_txrf_config_12db, fine);break;
    be7e:	ee70 0aa0 	vadd.f32	s1, s1, s1
    be82:	eefd 0ae0 	vcvt.s32.f32	s1, s1
    be86:	ee10 3a90 	vmov	r3, s1
    be8a:	3340      	adds	r3, #64	; 0x40
    be8c:	e7ec      	b.n	be68 <dw1000_phy_txrf_power_value+0x40>
    case(9):  *reg = dw1000_power_valuef(DW1000_txrf_config_9db, fine);break;
    be8e:	ee70 0aa0 	vadd.f32	s1, s1, s1
    be92:	eefd 0ae0 	vcvt.s32.f32	s1, s1
    be96:	ee10 3a90 	vmov	r3, s1
    be9a:	3360      	adds	r3, #96	; 0x60
    be9c:	e7e4      	b.n	be68 <dw1000_phy_txrf_power_value+0x40>
    case(6):  *reg = dw1000_power_valuef(DW1000_txrf_config_6db, fine);break;
    be9e:	ee70 0aa0 	vadd.f32	s1, s1, s1
    bea2:	eefd 0ae0 	vcvt.s32.f32	s1, s1
    bea6:	ee10 3a90 	vmov	r3, s1
    beaa:	3b80      	subs	r3, #128	; 0x80
    beac:	e7dc      	b.n	be68 <dw1000_phy_txrf_power_value+0x40>
    case(3):  *reg = dw1000_power_valuef(DW1000_txrf_config_3db, fine);break;
    beae:	ee70 0aa0 	vadd.f32	s1, s1, s1
    beb2:	eefd 0ae0 	vcvt.s32.f32	s1, s1
    beb6:	ee10 3a90 	vmov	r3, s1
    beba:	3b60      	subs	r3, #96	; 0x60
    bebc:	e7d4      	b.n	be68 <dw1000_phy_txrf_power_value+0x40>
    case(0):  *reg = dw1000_power_valuef(DW1000_txrf_config_0db, fine);break;
    bebe:	ee70 0aa0 	vadd.f32	s1, s1, s1
    bec2:	eefd 0ae0 	vcvt.s32.f32	s1, s1
    bec6:	ee10 3a90 	vmov	r3, s1
    beca:	3b40      	subs	r3, #64	; 0x40
    becc:	e7cc      	b.n	be68 <dw1000_phy_txrf_power_value+0x40>
    switch (c) {
    bece:	2000      	movs	r0, #0
}
    bed0:	4770      	bx	lr

0000bed2 <dw1000_phy_event_cnt_ctrl>:
 * @param reset   If true, reset counters
 * @return struct uwb_dev_status
 */
struct uwb_dev_status
dw1000_phy_event_cnt_ctrl(struct _dw1000_dev_instance_t *inst, bool enable, bool reset)
{
    bed2:	b530      	push	{r4, r5, lr}
    bed4:	4604      	mov	r4, r0
    bed6:	b085      	sub	sp, #20
    bed8:	460d      	mov	r5, r1
    if (reset) {
    beda:	b14a      	cbz	r2, bef0 <dw1000_phy_event_cnt_ctrl+0x1e>
        /* A reset command must also write enable = 0 or the clearing will not happen */
        dw1000_write_reg(inst, DIG_DIAG_ID, EVC_CTRL_OFFSET, EVC_CLR, sizeof(uint32_t));
    bedc:	2304      	movs	r3, #4
    bede:	2202      	movs	r2, #2
    bee0:	9302      	str	r3, [sp, #8]
    bee2:	2300      	movs	r3, #0
    bee4:	e9cd 2300 	strd	r2, r3, [sp]
    bee8:	212f      	movs	r1, #47	; 0x2f
    beea:	2200      	movs	r2, #0
    beec:	f7fd fb6c 	bl	95c8 <dw1000_write_reg>
    }

    /* Intentionally writing 32 bits here and above as the register requires at least 16 bits
     * written to take effect. */
    dw1000_write_reg(inst, DIG_DIAG_ID, EVC_CTRL_OFFSET, (enable) ? EVC_EN : 0, sizeof(uint32_t));
    bef0:	2304      	movs	r3, #4
    bef2:	2200      	movs	r2, #0
    bef4:	4620      	mov	r0, r4
    bef6:	e9cd 5200 	strd	r5, r2, [sp]
    befa:	9302      	str	r3, [sp, #8]
    befc:	212f      	movs	r1, #47	; 0x2f
    befe:	f7fd fb63 	bl	95c8 <dw1000_write_reg>
    return inst->uwb_dev.status;
}
    bf02:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    bf06:	b005      	add	sp, #20
    bf08:	bd30      	pop	{r4, r5, pc}

0000bf0a <dw1000_phy_event_cnt_read>:
 * @param res     Pointer to struct uwb_dev_evcnt
 * @return struct uwb_dev_status
 */
struct uwb_dev_status
dw1000_phy_event_cnt_read(struct _dw1000_dev_instance_t *inst, struct uwb_dev_evcnt *res)
{
    bf0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bf0c:	4605      	mov	r5, r0
    if (!res) {
    bf0e:	460c      	mov	r4, r1
    bf10:	b919      	cbnz	r1, bf1a <dw1000_phy_event_cnt_read+0x10>
    res->event_count1 &= ((EVC_FCE_MASK << 16) | EVC_FCG_MASK);
    res->event_count2 &= ((EVC_OVR_MASK << 16) | EVC_FFR_MASK);
    res->event_count3 &= ((EVC_PTO_MASK << 16) | EVC_STO_MASK);
    res->event_count4 &= ((EVC_TXFS_MASK << 16) | EVC_FWTO_MASK);
    res->event_count5 &= ((EVC_TPW_MASK << 16) | EVC_HPW_MASK);
    return inst->uwb_dev.status;
    bf12:	f8d5 0508 	ldr.w	r0, [r5, #1288]	; 0x508
}
    bf16:	b003      	add	sp, #12
    bf18:	bd30      	pop	{r4, r5, pc}
    dw1000_read(inst, DIG_DIAG_ID, EVC_PHE_OFFSET, (uint8_t*)res,
    bf1a:	2318      	movs	r3, #24
    bf1c:	9300      	str	r3, [sp, #0]
    bf1e:	2204      	movs	r2, #4
    bf20:	460b      	mov	r3, r1
    bf22:	212f      	movs	r1, #47	; 0x2f
    bf24:	f7fd fa60 	bl	93e8 <dw1000_read>
    res->event_count0 &= ((EVC_RSE_MASK << 16) | EVC_PHE_MASK);
    bf28:	6823      	ldr	r3, [r4, #0]
    bf2a:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
    bf2e:	6023      	str	r3, [r4, #0]
    res->event_count1 &= ((EVC_FCE_MASK << 16) | EVC_FCG_MASK);
    bf30:	6863      	ldr	r3, [r4, #4]
    bf32:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
    bf36:	6063      	str	r3, [r4, #4]
    res->event_count2 &= ((EVC_OVR_MASK << 16) | EVC_FFR_MASK);
    bf38:	68a3      	ldr	r3, [r4, #8]
    bf3a:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
    bf3e:	60a3      	str	r3, [r4, #8]
    res->event_count3 &= ((EVC_PTO_MASK << 16) | EVC_STO_MASK);
    bf40:	68e3      	ldr	r3, [r4, #12]
    bf42:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
    bf46:	60e3      	str	r3, [r4, #12]
    res->event_count4 &= ((EVC_TXFS_MASK << 16) | EVC_FWTO_MASK);
    bf48:	6923      	ldr	r3, [r4, #16]
    bf4a:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
    bf4e:	6123      	str	r3, [r4, #16]
    res->event_count5 &= ((EVC_TPW_MASK << 16) | EVC_HPW_MASK);
    bf50:	6963      	ldr	r3, [r4, #20]
    bf52:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
    bf56:	6163      	str	r3, [r4, #20]
    bf58:	e7db      	b.n	bf12 <dw1000_phy_event_cnt_read+0x8>

0000bf5a <_dw1000_otp_read>:
 * @param address  From where it starts reading
 * @return data value read from an OTP location.
 */

uint32_t _dw1000_otp_read(struct _dw1000_dev_instance_t * inst, uint16_t address)
{
    bf5a:	b530      	push	{r4, r5, lr}
    bf5c:	b085      	sub	sp, #20
    // Write the address
    dw1000_write_reg(inst, OTP_IF_ID, OTP_ADDR, address, sizeof(uint16_t));
    bf5e:	2302      	movs	r3, #2
    bf60:	9302      	str	r3, [sp, #8]
    bf62:	2300      	movs	r3, #0
    bf64:	9100      	str	r1, [sp, #0]
    bf66:	9301      	str	r3, [sp, #4]
    bf68:	2204      	movs	r2, #4
    bf6a:	212d      	movs	r1, #45	; 0x2d
{
    bf6c:	4604      	mov	r4, r0

    // Perform OTP Read - Manual read mode has to be set
    dw1000_write_reg(inst, OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN, sizeof(uint8_t));
    bf6e:	2501      	movs	r5, #1
    dw1000_write_reg(inst, OTP_IF_ID, OTP_ADDR, address, sizeof(uint16_t));
    bf70:	f7fd fb2a 	bl	95c8 <dw1000_write_reg>
    dw1000_write_reg(inst, OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN, sizeof(uint8_t));
    bf74:	2300      	movs	r3, #0
    bf76:	2203      	movs	r2, #3
    bf78:	e9cd 2300 	strd	r2, r3, [sp]
    bf7c:	4620      	mov	r0, r4
    bf7e:	9502      	str	r5, [sp, #8]
    bf80:	2206      	movs	r2, #6
    bf82:	212d      	movs	r1, #45	; 0x2d
    bf84:	f7fd fb20 	bl	95c8 <dw1000_write_reg>
    dw1000_write_reg(inst, OTP_IF_ID, OTP_CTRL, 0x0, sizeof(uint8_t)); // OTPREAD is self clearing but OTPRDEN is not
    bf88:	2300      	movs	r3, #0
    bf8a:	2200      	movs	r2, #0
    bf8c:	e9cd 2300 	strd	r2, r3, [sp]
    bf90:	212d      	movs	r1, #45	; 0x2d
    bf92:	2206      	movs	r2, #6
    bf94:	4620      	mov	r0, r4
    bf96:	9502      	str	r5, [sp, #8]
    bf98:	f7fd fb16 	bl	95c8 <dw1000_write_reg>

    // Read data, available 40ns after rising edge of OTP_READ
    dpl_cputime_delay_usecs(1);
    bf9c:	4628      	mov	r0, r5
    bf9e:	f004 fcd7 	bl	10950 <dpl_cputime_delay_usecs>
    return  (uint32_t) dw1000_read_reg(inst, OTP_IF_ID, OTP_RDAT, sizeof(uint32_t));
    bfa2:	2304      	movs	r3, #4
    bfa4:	220a      	movs	r2, #10
    bfa6:	4620      	mov	r0, r4
    bfa8:	212d      	movs	r1, #45	; 0x2d
    bfaa:	f7fd fabb 	bl	9524 <dw1000_read_reg>
}
    bfae:	b005      	add	sp, #20
    bfb0:	bd30      	pop	{r4, r5, pc}
	...

0000bfb4 <hal_gpio_irq_handler>:
 *
 * @param index
 */
static void
hal_gpio_irq_handler(void)
{
    bfb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if NRF52840_XXAA
    gpio_state |= (uint64_t)NRF_P1->IN << 32;
#endif
#endif

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
    bfb8:	2400      	movs	r4, #0
    bfba:	4d0f      	ldr	r5, [pc, #60]	; (bff8 <hal_gpio_irq_handler+0x44>)
        if ((hal_gpio_irqs[i].sense_trig == HAL_GPIO_SENSE_TRIG_BOTH) ||
            (hal_gpio_irqs[i].sense_trig == sense_trig)) {
            hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
        }
#else
        if (NRF_GPIOTE->EVENTS_IN[i] && (NRF_GPIOTE->INTENSET & (1 << i))) {
    bfbc:	4e0f      	ldr	r6, [pc, #60]	; (bffc <hal_gpio_irq_handler+0x48>)
    bfbe:	2701      	movs	r7, #1
            NRF_GPIOTE->EVENTS_IN[i] = 0;
    bfc0:	46a0      	mov	r8, r4
        if (NRF_GPIOTE->EVENTS_IN[i] && (NRF_GPIOTE->INTENSET & (1 << i))) {
    bfc2:	00a3      	lsls	r3, r4, #2
    bfc4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    bfc8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    bfcc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    bfd0:	b15a      	cbz	r2, bfea <hal_gpio_irq_handler+0x36>
    bfd2:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
    bfd6:	fa07 f104 	lsl.w	r1, r7, r4
    bfda:	4211      	tst	r1, r2
    bfdc:	d005      	beq.n	bfea <hal_gpio_irq_handler+0x36>
            NRF_GPIOTE->EVENTS_IN[i] = 0;
    bfde:	f8c3 8100 	str.w	r8, [r3, #256]	; 0x100
            if (hal_gpio_irqs[i].func) {
    bfe2:	682b      	ldr	r3, [r5, #0]
    bfe4:	b10b      	cbz	r3, bfea <hal_gpio_irq_handler+0x36>
                hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
    bfe6:	6868      	ldr	r0, [r5, #4]
    bfe8:	4798      	blx	r3
    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
    bfea:	3401      	adds	r4, #1
    bfec:	2c08      	cmp	r4, #8
    bfee:	f105 0508 	add.w	r5, r5, #8
    bff2:	d1e6      	bne.n	bfc2 <hal_gpio_irq_handler+0xe>
        }
#endif
    }

    os_trace_isr_exit();
}
    bff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bff8:	20001b7c 	.word	0x20001b7c
    bffc:	40006000 	.word	0x40006000

0000c000 <hal_gpio_find_pin>:
/*
 * Find the GPIOTE event which handles this pin.
 */
static int
hal_gpio_find_pin(int pin)
{
    c000:	b510      	push	{r4, lr}
    }
#else
    pin = pin << GPIOTE_CONFIG_PSEL_Pos;

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
        if (hal_gpio_irqs[i].func &&
    c002:	490a      	ldr	r1, [pc, #40]	; (c02c <hal_gpio_find_pin+0x2c>)
           (NRF_GPIOTE->CONFIG[i] & HAL_GPIOTE_PIN_MASK) == pin) {
    c004:	4c0a      	ldr	r4, [pc, #40]	; (c030 <hal_gpio_find_pin+0x30>)
    pin = pin << GPIOTE_CONFIG_PSEL_Pos;
    c006:	0203      	lsls	r3, r0, #8
    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
    c008:	2000      	movs	r0, #0
        if (hal_gpio_irqs[i].func &&
    c00a:	f851 2030 	ldr.w	r2, [r1, r0, lsl #3]
    c00e:	b13a      	cbz	r2, c020 <hal_gpio_find_pin+0x20>
           (NRF_GPIOTE->CONFIG[i] & HAL_GPIOTE_PIN_MASK) == pin) {
    c010:	f500 72a2 	add.w	r2, r0, #324	; 0x144
    c014:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    c018:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
        if (hal_gpio_irqs[i].func &&
    c01c:	429a      	cmp	r2, r3
    c01e:	d004      	beq.n	c02a <hal_gpio_find_pin+0x2a>
    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
    c020:	3001      	adds	r0, #1
    c022:	2808      	cmp	r0, #8
    c024:	d1f1      	bne.n	c00a <hal_gpio_find_pin+0xa>
            return i;
        }
    }
#endif

    return -1;
    c026:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    c02a:	bd10      	pop	{r4, pc}
    c02c:	20001b7c 	.word	0x20001b7c
    c030:	40006000 	.word	0x40006000

0000c034 <hal_gpio_init_in>:
    switch (pull) {
    c034:	2901      	cmp	r1, #1
    c036:	d010      	beq.n	c05a <hal_gpio_init_in+0x26>
    c038:	2902      	cmp	r1, #2
    c03a:	bf14      	ite	ne
    c03c:	2300      	movne	r3, #0
    c03e:	2304      	moveq	r3, #4
    port->PIN_CNF[pin_index] = conf;
    c040:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    c044:	f500 71e0 	add.w	r1, r0, #448	; 0x1c0
    c048:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    port->DIRCLR = HAL_GPIO_MASK(pin);
    c04c:	2301      	movs	r3, #1
    c04e:	fa03 f000 	lsl.w	r0, r3, r0
    c052:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
}
    c056:	2000      	movs	r0, #0
    c058:	4770      	bx	lr
        conf = GPIO_PIN_CNF_PULL_Pullup << GPIO_PIN_CNF_PULL_Pos;
    c05a:	230c      	movs	r3, #12
    c05c:	e7f0      	b.n	c040 <hal_gpio_init_in+0xc>

0000c05e <hal_gpio_init_out>:
        port->OUTSET = HAL_GPIO_MASK(pin);
    c05e:	2301      	movs	r3, #1
    c060:	4083      	lsls	r3, r0
    c062:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    if (val) {
    c066:	b151      	cbz	r1, c07e <hal_gpio_init_out+0x20>
        port->OUTSET = HAL_GPIO_MASK(pin);
    c068:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    port->PIN_CNF[pin_index] = GPIO_PIN_CNF_DIR_Output |
    c06c:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
    c070:	2103      	movs	r1, #3
    c072:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
    port->DIRSET = HAL_GPIO_MASK(pin);
    c076:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
}
    c07a:	2000      	movs	r0, #0
    c07c:	4770      	bx	lr
        port->OUTCLR = HAL_GPIO_MASK(pin);
    c07e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    c082:	e7f3      	b.n	c06c <hal_gpio_init_out+0xe>

0000c084 <hal_gpio_write>:
        port->OUTSET = HAL_GPIO_MASK(pin);
    c084:	2301      	movs	r3, #1
    c086:	fa03 f000 	lsl.w	r0, r3, r0
    c08a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    if (val) {
    c08e:	b111      	cbz	r1, c096 <hal_gpio_write+0x12>
        port->OUTSET = HAL_GPIO_MASK(pin);
    c090:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    c094:	4770      	bx	lr
        port->OUTCLR = HAL_GPIO_MASK(pin);
    c096:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
    c09a:	4770      	bx	lr

0000c09c <hal_gpio_read>:
    return (port->DIR & HAL_GPIO_MASK(pin)) ?
    c09c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    c0a0:	2201      	movs	r2, #1
    c0a2:	f8d3 1514 	ldr.w	r1, [r3, #1300]	; 0x514
    c0a6:	4082      	lsls	r2, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
    c0a8:	420a      	tst	r2, r1
    c0aa:	bf14      	ite	ne
    c0ac:	f8d3 3504 	ldrne.w	r3, [r3, #1284]	; 0x504
        (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
    c0b0:	f8d3 3510 	ldreq.w	r3, [r3, #1296]	; 0x510
    c0b4:	fa23 f000 	lsr.w	r0, r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
    c0b8:	f000 0001 	and.w	r0, r0, #1
}
    c0bc:	4770      	bx	lr
	...

0000c0c0 <hal_gpio_irq_init>:
 * @return int
 */
int
hal_gpio_irq_init(int pin, hal_gpio_irq_handler_t handler, void *arg,
                  hal_gpio_irq_trig_t trig, hal_gpio_pull_t pull)
{
    c0c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c0c4:	461c      	mov	r4, r3
    if (!irq_setup) {
    c0c6:	4b1b      	ldr	r3, [pc, #108]	; (c134 <hal_gpio_irq_init+0x74>)
{
    c0c8:	4691      	mov	r9, r2
    if (!irq_setup) {
    c0ca:	781a      	ldrb	r2, [r3, #0]
{
    c0cc:	4607      	mov	r7, r0
    c0ce:	4688      	mov	r8, r1
    if (!irq_setup) {
    c0d0:	b942      	cbnz	r2, c0e4 <hal_gpio_irq_init+0x24>
  uint32_t vectors = (uint32_t )SCB->VTOR;
    c0d2:	4a19      	ldr	r2, [pc, #100]	; (c138 <hal_gpio_irq_init+0x78>)
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    c0d4:	4919      	ldr	r1, [pc, #100]	; (c13c <hal_gpio_irq_init+0x7c>)
  uint32_t vectors = (uint32_t )SCB->VTOR;
    c0d6:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    c0d8:	6591      	str	r1, [r2, #88]	; 0x58
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c0da:	4a19      	ldr	r2, [pc, #100]	; (c140 <hal_gpio_irq_init+0x80>)
    c0dc:	2140      	movs	r1, #64	; 0x40
    c0de:	6011      	str	r1, [r2, #0]
        irq_setup = 1;
    c0e0:	2201      	movs	r2, #1
    c0e2:	701a      	strb	r2, [r3, #0]
        if (hal_gpio_irqs[i].func == NULL) {
    c0e4:	f8df a060 	ldr.w	sl, [pc, #96]	; c148 <hal_gpio_irq_init+0x88>
    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
    c0e8:	2500      	movs	r5, #0
        if (hal_gpio_irqs[i].func == NULL) {
    c0ea:	f85a 6035 	ldr.w	r6, [sl, r5, lsl #3]
    c0ee:	b136      	cbz	r6, c0fe <hal_gpio_irq_init+0x3e>
    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
    c0f0:	3501      	adds	r5, #1
    c0f2:	2d08      	cmp	r5, #8
    c0f4:	d1f9      	bne.n	c0ea <hal_gpio_irq_init+0x2a>
    int i;

    hal_gpio_irq_setup();
    i = hal_gpio_find_empty_slot();
    if (i < 0) {
        return -1;
    c0f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

    hal_gpio_irqs[i].func = handler;
    hal_gpio_irqs[i].arg = arg;

    return 0;
}
    c0fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hal_gpio_init_in(pin, pull);
    c0fe:	f89d 1020 	ldrb.w	r1, [sp, #32]
    c102:	4638      	mov	r0, r7
    c104:	f7ff ff96 	bl	c034 <hal_gpio_init_in>
    switch (trig) {
    c108:	1e63      	subs	r3, r4, #1
    c10a:	2b02      	cmp	r3, #2
    c10c:	d8f3      	bhi.n	c0f6 <hal_gpio_irq_init+0x36>
    conf |= pin << GPIOTE_CONFIG_PSEL_Pos;
    c10e:	0423      	lsls	r3, r4, #16
    c110:	ea43 2007 	orr.w	r0, r3, r7, lsl #8
    NRF_GPIOTE->CONFIG[i] = conf;
    c114:	f505 72a2 	add.w	r2, r5, #324	; 0x144
    c118:	4b0a      	ldr	r3, [pc, #40]	; (c144 <hal_gpio_irq_init+0x84>)
    conf |= GPIOTE_CONFIG_MODE_Event << GPIOTE_CONFIG_MODE_Pos;
    c11a:	f040 0001 	orr.w	r0, r0, #1
    NRF_GPIOTE->CONFIG[i] = conf;
    c11e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
    hal_gpio_irqs[i].func = handler;
    c122:	f84a 8035 	str.w	r8, [sl, r5, lsl #3]
    hal_gpio_irqs[i].arg = arg;
    c126:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
    return 0;
    c12a:	4630      	mov	r0, r6
    hal_gpio_irqs[i].arg = arg;
    c12c:	f8c5 9004 	str.w	r9, [r5, #4]
    return 0;
    c130:	e7e3      	b.n	c0fa <hal_gpio_irq_init+0x3a>
    c132:	bf00      	nop
    c134:	20001bbc 	.word	0x20001bbc
    c138:	e000ed00 	.word	0xe000ed00
    c13c:	0000bfb5 	.word	0x0000bfb5
    c140:	e000e100 	.word	0xe000e100
    c144:	40006000 	.word	0x40006000
    c148:	20001b7c 	.word	0x20001b7c

0000c14c <hal_gpio_irq_enable>:
 *
 * @param pin
 */
void
hal_gpio_irq_enable(int pin)
{
    c14c:	b508      	push	{r3, lr}
    NRF_GPIO_Type *nrf_gpio;
    int pin_index;
#endif
    int i;

    i = hal_gpio_find_pin(pin);
    c14e:	f7ff ff57 	bl	c000 <hal_gpio_find_pin>
    if (i < 0) {
    c152:	2800      	cmp	r0, #0
    c154:	db0a      	blt.n	c16c <hal_gpio_irq_enable+0x20>
        nrf_gpio->PIN_CNF[pin_index] |= GPIO_PIN_CNF_SENSE_High << GPIO_PIN_CNF_SENSE_Pos;
    }

    NRF_GPIOTE->INTENSET = GPIOTE_INTENSET_PORT_Msk;
#else
    NRF_GPIOTE->EVENTS_IN[i] = 0;
    c156:	f100 0340 	add.w	r3, r0, #64	; 0x40
    c15a:	4a05      	ldr	r2, [pc, #20]	; (c170 <hal_gpio_irq_enable+0x24>)
    c15c:	2100      	movs	r1, #0
    c15e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    NRF_GPIOTE->INTENSET = 1 << i;
    c162:	2301      	movs	r3, #1
    c164:	fa03 f000 	lsl.w	r0, r3, r0
    c168:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
#endif
}
    c16c:	bd08      	pop	{r3, pc}
    c16e:	bf00      	nop
    c170:	40006000 	.word	0x40006000

0000c174 <hal_gpio_irq_disable>:
 *
 * @param pin
 */
void
hal_gpio_irq_disable(int pin)
{
    c174:	b508      	push	{r3, lr}
    int pin_index;
    bool sense_enabled = false;
#endif
    int i;

    i = hal_gpio_find_pin(pin);
    c176:	f7ff ff43 	bl	c000 <hal_gpio_find_pin>
    if (i < 0) {
    c17a:	2800      	cmp	r0, #0

    if (!sense_enabled) {
        NRF_GPIOTE->INTENCLR = GPIOTE_INTENCLR_PORT_Msk;
    }
#else
    NRF_GPIOTE->INTENCLR = 1 << i;
    c17c:	bfa1      	itttt	ge
    c17e:	2301      	movge	r3, #1
    c180:	fa03 f000 	lslge.w	r0, r3, r0
    c184:	4b01      	ldrge	r3, [pc, #4]	; (c18c <hal_gpio_irq_disable+0x18>)
    c186:	f8c3 0308 	strge.w	r0, [r3, #776]	; 0x308
#endif
}
    c18a:	bd08      	pop	{r3, pc}
    c18c:	40006000 	.word	0x40006000

0000c190 <hal_gpio_irq_release>:
{
    c190:	b538      	push	{r3, r4, r5, lr}
    c192:	4605      	mov	r5, r0
    i = hal_gpio_find_pin(pin);
    c194:	f7ff ff34 	bl	c000 <hal_gpio_find_pin>
    if (i < 0) {
    c198:	1e04      	subs	r4, r0, #0
    c19a:	db12      	blt.n	c1c2 <hal_gpio_irq_release+0x32>
    hal_gpio_irq_disable(pin);
    c19c:	4628      	mov	r0, r5
    c19e:	f7ff ffe9 	bl	c174 <hal_gpio_irq_disable>
    NRF_GPIOTE->CONFIG[i] = 0;
    c1a2:	00a3      	lsls	r3, r4, #2
    c1a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c1a8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    c1ac:	2200      	movs	r2, #0
    c1ae:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    NRF_GPIOTE->EVENTS_IN[i] = 0;
    c1b2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    hal_gpio_irqs[i].arg = NULL;
    c1b6:	4b03      	ldr	r3, [pc, #12]	; (c1c4 <hal_gpio_irq_release+0x34>)
    c1b8:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
    hal_gpio_irqs[i].func = NULL;
    c1bc:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
    hal_gpio_irqs[i].arg = NULL;
    c1c0:	604a      	str	r2, [r1, #4]
}
    c1c2:	bd38      	pop	{r3, r4, r5, pc}
    c1c4:	20001b7c 	.word	0x20001b7c

0000c1c8 <nrf52_spi0_irq_handler>:

/* Interrupt handlers for SPI ports */
#if MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_0_SLAVE)
void
nrf52_spi0_irq_handler(void)
{
    c1c8:	b570      	push	{r4, r5, r6, lr}
    os_trace_isr_enter();
    if (nrf52_hal_spi0.spi_type == HAL_SPI_TYPE_MASTER) {
    c1ca:	4c1b      	ldr	r4, [pc, #108]	; (c238 <nrf52_spi0_irq_handler+0x70>)
    c1cc:	7823      	ldrb	r3, [r4, #0]
    c1ce:	bb43      	cbnz	r3, c222 <nrf52_spi0_irq_handler+0x5a>
    spim = spi->nhs_spi.spim;
    c1d0:	6925      	ldr	r5, [r4, #16]
    if (spim->EVENTS_END) {
    c1d2:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
    c1d6:	b322      	cbz	r2, c222 <nrf52_spi0_irq_handler+0x5a>
        spim->EVENTS_END = 0;
    c1d8:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118
        if (spi->spi_xfr_flag == 0) {
    c1dc:	7863      	ldrb	r3, [r4, #1]
    c1de:	b303      	cbz	r3, c222 <nrf52_spi0_irq_handler+0x5a>
        spi->nhs_bytes_txd += xfr_bytes;
    c1e0:	88e1      	ldrh	r1, [r4, #6]
        xfr_bytes = spim->TXD.AMOUNT;
    c1e2:	f8d5 254c 	ldr.w	r2, [r5, #1356]	; 0x54c
        spi->nhs_bytes_txd += xfr_bytes;
    c1e6:	4411      	add	r1, r2
    c1e8:	b28b      	uxth	r3, r1
        if (spi->nhs_bytes_txd < spi->nhs_buflen) {
    c1ea:	88a1      	ldrh	r1, [r4, #4]
        spi->nhs_bytes_txd += xfr_bytes;
    c1ec:	80e3      	strh	r3, [r4, #6]
        if (spi->nhs_bytes_txd < spi->nhs_buflen) {
    c1ee:	428b      	cmp	r3, r1
    c1f0:	d218      	bcs.n	c224 <nrf52_spi0_irq_handler+0x5c>
            len = spi->nhs_buflen - spi->nhs_bytes_txd;
    c1f2:	1ac9      	subs	r1, r1, r3
    c1f4:	b289      	uxth	r1, r1
            spi->nhs_txbuf += xfr_bytes;
    c1f6:	69a6      	ldr	r6, [r4, #24]
            if (spi->nhs_rxbuf) {
    c1f8:	69e3      	ldr	r3, [r4, #28]
            spim->TXD.MAXCNT = len;
    c1fa:	29ff      	cmp	r1, #255	; 0xff
    c1fc:	b290      	uxth	r0, r2
    c1fe:	bf28      	it	cs
    c200:	21ff      	movcs	r1, #255	; 0xff
            spi->nhs_txbuf += xfr_bytes;
    c202:	fa16 f282 	uxtah	r2, r6, r2
            spim->TXD.PTR = (uint32_t)spi->nhs_txbuf;
    c206:	f8c5 2544 	str.w	r2, [r5, #1348]	; 0x544
            spi->nhs_txbuf += xfr_bytes;
    c20a:	61a2      	str	r2, [r4, #24]
            spim->TXD.MAXCNT = len;
    c20c:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
            if (spi->nhs_rxbuf) {
    c210:	b12b      	cbz	r3, c21e <nrf52_spi0_irq_handler+0x56>
                spi->nhs_rxbuf += xfr_bytes;
    c212:	4403      	add	r3, r0
                spim->RXD.PTR    = (uint32_t)spi->nhs_rxbuf;
    c214:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
                spi->nhs_rxbuf += xfr_bytes;
    c218:	61e3      	str	r3, [r4, #28]
                spim->RXD.MAXCNT = len;
    c21a:	f8c5 1538 	str.w	r1, [r5, #1336]	; 0x538
            spim->TASKS_START = 1;
    c21e:	2301      	movs	r3, #1
    c220:	612b      	str	r3, [r5, #16]
#if MYNEWT_VAL(SPI_0_SLAVE)
        nrf52_irqs_handler(&nrf52_hal_spi0);
#endif
    }
    os_trace_isr_exit();
}
    c222:	bd70      	pop	{r4, r5, r6, pc}
            if (spi->txrx_cb_func) {
    c224:	6a23      	ldr	r3, [r4, #32]
    c226:	b10b      	cbz	r3, c22c <nrf52_spi0_irq_handler+0x64>
                spi->txrx_cb_func(spi->txrx_cb_arg, spi->nhs_buflen);
    c228:	6a60      	ldr	r0, [r4, #36]	; 0x24
    c22a:	4798      	blx	r3
            spi->spi_xfr_flag = 0;
    c22c:	2300      	movs	r3, #0
    c22e:	7063      	strb	r3, [r4, #1]
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
    c230:	2340      	movs	r3, #64	; 0x40
    c232:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
}
    c236:	e7f4      	b.n	c222 <nrf52_spi0_irq_handler+0x5a>
    c238:	20001bc0 	.word	0x20001bc0

0000c23c <hal_spi_config>:
{
    int rc;
    struct nrf52_hal_spi *spi;
    NRF_SPIM_Type *spim;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    c23c:	2803      	cmp	r0, #3
{
    c23e:	b570      	push	{r4, r5, r6, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    c240:	f300 8083 	bgt.w	c34a <hal_spi_config+0x10e>
    c244:	4b43      	ldr	r3, [pc, #268]	; (c354 <hal_spi_config+0x118>)
    c246:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    c24a:	2a00      	cmp	r2, #0
    c24c:	d07d      	beq.n	c34a <hal_spi_config+0x10e>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
    c24e:	6914      	ldr	r4, [r2, #16]
    if (spim->ENABLE != 0) {
    c250:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
    c254:	2b00      	cmp	r3, #0
    c256:	d17a      	bne.n	c34e <hal_spi_config+0x112>
        return -1;
    }

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
    c258:	7810      	ldrb	r0, [r2, #0]
    c25a:	2800      	cmp	r0, #0
    c25c:	d163      	bne.n	c326 <hal_spi_config+0xea>
    memcpy(&spi->spi_cfg, settings, sizeof(*settings));
    c25e:	6808      	ldr	r0, [r1, #0]
    c260:	6090      	str	r0, [r2, #8]
    c262:	6848      	ldr	r0, [r1, #4]
    c264:	60d0      	str	r0, [r2, #12]
    pin = spim->PSEL.SCK & SPIM_PSEL_SCK_PIN_Msk;
    c266:	f8d4 2508 	ldr.w	r2, [r4, #1288]	; 0x508
    if (settings->data_mode <= HAL_SPI_MODE1) {
    c26a:	780d      	ldrb	r5, [r1, #0]
    c26c:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    pin = spim->PSEL.SCK & SPIM_PSEL_SCK_PIN_Msk;
    c270:	f002 021f 	and.w	r2, r2, #31
    if (settings->data_mode <= HAL_SPI_MODE1) {
    c274:	2001      	movs	r0, #1
        port->OUTCLR = (1UL << pin);
    c276:	4090      	lsls	r0, r2
    if (settings->data_mode <= HAL_SPI_MODE1) {
    c278:	2d01      	cmp	r5, #1
        port->OUTCLR = (1UL << pin);
    c27a:	bf94      	ite	ls
    c27c:	f8c6 050c 	strls.w	r0, [r6, #1292]	; 0x50c
        port->OUTSET = (1UL << pin);
    c280:	f8c6 0508 	strhi.w	r0, [r6, #1288]	; 0x508
    port->PIN_CNF[pin] =
    c284:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    c288:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    c28c:	2603      	movs	r6, #3
    c28e:	f840 6022 	str.w	r6, [r0, r2, lsl #2]
    switch (settings->word_size) {
    c292:	788a      	ldrb	r2, [r1, #2]
            rc = EINVAL;
    c294:	2a00      	cmp	r2, #0
    c296:	bf0c      	ite	eq
    c298:	2000      	moveq	r0, #0
    c29a:	2016      	movne	r0, #22
    switch (settings->data_mode) {
    c29c:	42b5      	cmp	r5, r6
    c29e:	d822      	bhi.n	c2e6 <hal_spi_config+0xaa>
    c2a0:	e8df f005 	tbb	[pc, r5]
    c2a4:	1f1d0224 	.word	0x1f1d0224
    c2a8:	2202      	movs	r2, #2
    if (settings->data_order == HAL_SPI_LSB_FIRST) {
    c2aa:	784d      	ldrb	r5, [r1, #1]
    c2ac:	2d01      	cmp	r5, #1
        nrf_config |= SPIM_CONFIG_ORDER_LsbFirst;
    c2ae:	bf08      	it	eq
    c2b0:	f042 0201 	orreq.w	r2, r2, #1
    spim->CONFIG = nrf_config;
    c2b4:	f8c4 2554 	str.w	r2, [r4, #1364]	; 0x554
    switch (settings->baudrate) {
    c2b8:	684a      	ldr	r2, [r1, #4]
    c2ba:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    c2be:	d023      	beq.n	c308 <hal_spi_config+0xcc>
    c2c0:	d816      	bhi.n	c2f0 <hal_spi_config+0xb4>
    c2c2:	2afa      	cmp	r2, #250	; 0xfa
    c2c4:	d023      	beq.n	c30e <hal_spi_config+0xd2>
    c2c6:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
    c2ca:	d023      	beq.n	c314 <hal_spi_config+0xd8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K125;
    c2cc:	2a7d      	cmp	r2, #125	; 0x7d
    c2ce:	bf08      	it	eq
    c2d0:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
            frequency = SPIM_FREQUENCY_FREQUENCY_M2;
    c2d4:	bf18      	it	ne
    c2d6:	2016      	movne	r0, #22
    spim->FREQUENCY = frequency;
    c2d8:	f8c4 3524 	str.w	r3, [r4, #1316]	; 0x524
        rc = hal_spi_config_slave(spi, settings);
    }

err:
    return (rc);
}
    c2dc:	bd70      	pop	{r4, r5, r6, pc}
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
    c2de:	2204      	movs	r2, #4
            break;
    c2e0:	e7e3      	b.n	c2aa <hal_spi_config+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
    c2e2:	2206      	movs	r2, #6
            break;
    c2e4:	e7e1      	b.n	c2aa <hal_spi_config+0x6e>
            nrf_config = 0;
    c2e6:	2200      	movs	r2, #0
            rc = EINVAL;
    c2e8:	2016      	movs	r0, #22
            break;
    c2ea:	e7de      	b.n	c2aa <hal_spi_config+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
    c2ec:	2200      	movs	r2, #0
    c2ee:	e7dc      	b.n	c2aa <hal_spi_config+0x6e>
    switch (settings->baudrate) {
    c2f0:	f5b2 6f7a 	cmp.w	r2, #4000	; 0xfa0
    c2f4:	d011      	beq.n	c31a <hal_spi_config+0xde>
    c2f6:	f5b2 5ffa 	cmp.w	r2, #8000	; 0x1f40
    c2fa:	d011      	beq.n	c320 <hal_spi_config+0xe4>
            frequency = SPIM_FREQUENCY_FREQUENCY_M2;
    c2fc:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
    c300:	bf08      	it	eq
    c302:	f04f 5300 	moveq.w	r3, #536870912	; 0x20000000
    c306:	e7e5      	b.n	c2d4 <hal_spi_config+0x98>
            frequency = SPIM_FREQUENCY_FREQUENCY_M1;
    c308:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    c30c:	e7e4      	b.n	c2d8 <hal_spi_config+0x9c>
    switch (settings->baudrate) {
    c30e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    c312:	e7e1      	b.n	c2d8 <hal_spi_config+0x9c>
            frequency = SPIM_FREQUENCY_FREQUENCY_K500;
    c314:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    c318:	e7de      	b.n	c2d8 <hal_spi_config+0x9c>
            frequency = SPIM_FREQUENCY_FREQUENCY_M4;
    c31a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c31e:	e7db      	b.n	c2d8 <hal_spi_config+0x9c>
            frequency = SPIM_FREQUENCY_FREQUENCY_M8;
    c320:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    c324:	e7d8      	b.n	c2d8 <hal_spi_config+0x9c>
        rc = hal_spi_config_slave(spi, settings);
    c326:	780a      	ldrb	r2, [r1, #0]
    c328:	784d      	ldrb	r5, [r1, #1]
    c32a:	7889      	ldrb	r1, [r1, #2]
    switch (settings->data_mode) {
    c32c:	2a03      	cmp	r2, #3
    c32e:	bf9a      	itte	ls
    c330:	0053      	lslls	r3, r2, #1
    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
    c332:	2000      	movls	r0, #0
    c334:	2016      	movhi	r0, #22
    if (settings->data_order == HAL_SPI_LSB_FIRST) {
    c336:	2d01      	cmp	r5, #1
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
    c338:	bf08      	it	eq
    c33a:	f043 0301 	orreq.w	r3, r3, #1
            rc = EINVAL;
    c33e:	2900      	cmp	r1, #0
    spis->CONFIG = nrf_config;
    c340:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
            rc = EINVAL;
    c344:	bf18      	it	ne
    c346:	2016      	movne	r0, #22
    c348:	e7c8      	b.n	c2dc <hal_spi_config+0xa0>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    c34a:	2016      	movs	r0, #22
    c34c:	e7c6      	b.n	c2dc <hal_spi_config+0xa0>
        return -1;
    c34e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c352:	e7c3      	b.n	c2dc <hal_spi_config+0xa0>
    c354:	00020490 	.word	0x00020490

0000c358 <hal_spi_enable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPI_Type *nrf_spi;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    c358:	2803      	cmp	r0, #3
    c35a:	dc18      	bgt.n	c38e <hal_spi_enable+0x36>
    c35c:	4b0d      	ldr	r3, [pc, #52]	; (c394 <hal_spi_enable+0x3c>)
    c35e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    c362:	b1a3      	cbz	r3, c38e <hal_spi_enable+0x36>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
    c364:	7818      	ldrb	r0, [r3, #0]
    c366:	b920      	cbnz	r0, c372 <hal_spi_enable+0x1a>
        /* For now, enable this in normal SPI mode (not spim) */
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
    c368:	691b      	ldr	r3, [r3, #16]
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    c36a:	2201      	movs	r2, #1

        spis = spi->nhs_spi.spis;
        spis->EVENTS_END = 0;
        spis->EVENTS_ACQUIRED = 0;
        spis->INTENSET = SPIS_INTENSET_END_Msk | SPIS_INTENSET_ACQUIRED_Msk;
        spis->ENABLE = (SPIS_ENABLE_ENABLE_Enabled << SPIS_ENABLE_ENABLE_Pos);
    c36c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    c370:	4770      	bx	lr
        if (spi->txrx_cb_func == NULL) {
    c372:	6a1a      	ldr	r2, [r3, #32]
    c374:	b15a      	cbz	r2, c38e <hal_spi_enable+0x36>
        spis = spi->nhs_spi.spis;
    c376:	691b      	ldr	r3, [r3, #16]
        spis->EVENTS_END = 0;
    c378:	2000      	movs	r0, #0
        spis->INTENSET = SPIS_INTENSET_END_Msk | SPIS_INTENSET_ACQUIRED_Msk;
    c37a:	f240 4202 	movw	r2, #1026	; 0x402
        spis->EVENTS_END = 0;
    c37e:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
    c382:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
        spis->INTENSET = SPIS_INTENSET_END_Msk | SPIS_INTENSET_ACQUIRED_Msk;
    c386:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
        spis->ENABLE = (SPIS_ENABLE_ENABLE_Enabled << SPIS_ENABLE_ENABLE_Pos);
    c38a:	2202      	movs	r2, #2
    c38c:	e7ee      	b.n	c36c <hal_spi_enable+0x14>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    c38e:	2016      	movs	r0, #22
    }
    rc = 0;

err:
    return rc;
}
    c390:	4770      	bx	lr
    c392:	bf00      	nop
    c394:	00020490 	.word	0x00020490

0000c398 <hal_spi_disable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    c398:	2803      	cmp	r0, #3
    c39a:	dc27      	bgt.n	c3ec <hal_spi_disable+0x54>
    c39c:	4b14      	ldr	r3, [pc, #80]	; (c3f0 <hal_spi_disable+0x58>)
    c39e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    c3a2:	b31b      	cbz	r3, c3ec <hal_spi_disable+0x54>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
        spim = spi->nhs_spi.spim;
    c3a4:	691a      	ldr	r2, [r3, #16]
    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
    c3a6:	7818      	ldrb	r0, [r3, #0]
    c3a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
        spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
    c3ac:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
    c3b0:	b998      	cbnz	r0, c3da <hal_spi_disable+0x42>

        if (spi->spi_xfr_flag) {
    c3b2:	7859      	ldrb	r1, [r3, #1]
    c3b4:	b149      	cbz	r1, c3ca <hal_spi_disable+0x32>
    spim->TASKS_STOP = 1;
    c3b6:	2101      	movs	r1, #1
    c3b8:	6151      	str	r1, [r2, #20]
    while (!spim->EVENTS_STOPPED) {}
    c3ba:	f8d2 1104 	ldr.w	r1, [r2, #260]	; 0x104
    c3be:	2900      	cmp	r1, #0
    c3c0:	d0fb      	beq.n	c3ba <hal_spi_disable+0x22>
    spim->EVENTS_STOPPED = 0;
    c3c2:	2100      	movs	r1, #0
    c3c4:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
            hal_spi_stop_transfer(spim);
            spi->spi_xfr_flag = 0;
    c3c8:	7059      	strb	r1, [r3, #1]
        }
        spim->ENABLE = 0;
    c3ca:	2100      	movs	r1, #0
    c3cc:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
        spis->EVENTS_ACQUIRED = 0;
        spis->ENABLE = 0;
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
    }

    spi->nhs_txbuf = NULL;
    c3d0:	2000      	movs	r0, #0
    spi->nhs_rxbuf = NULL;
    c3d2:	e9c3 0006 	strd	r0, r0, [r3, #24]
    spi->nhs_buflen = 0;
    c3d6:	6058      	str	r0, [r3, #4]
    spi->nhs_bytes_txd = 0;

    rc = 0;
    c3d8:	4770      	bx	lr
        spis->EVENTS_END = 0;
    c3da:	2100      	movs	r1, #0
    c3dc:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
    c3e0:	f8c2 1128 	str.w	r1, [r2, #296]	; 0x128
        spis->ENABLE = 0;
    c3e4:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
    c3e8:	70d9      	strb	r1, [r3, #3]
    c3ea:	e7f1      	b.n	c3d0 <hal_spi_disable+0x38>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    c3ec:	2016      	movs	r0, #22

err:
    return rc;
}
    c3ee:	4770      	bx	lr
    c3f0:	00020490 	.word	0x00020490

0000c3f4 <hal_spi_init>:
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    c3f4:	2803      	cmp	r0, #3
{
    c3f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c3f8:	4604      	mov	r4, r0
    c3fa:	460d      	mov	r5, r1
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    c3fc:	dc5e      	bgt.n	c4bc <hal_spi_init+0xc8>
    c3fe:	4b30      	ldr	r3, [pc, #192]	; (c4c0 <hal_spi_init+0xcc>)
    c400:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    c404:	2b00      	cmp	r3, #0
    c406:	d059      	beq.n	c4bc <hal_spi_init+0xc8>
    if (cfg == NULL) {
    c408:	2900      	cmp	r1, #0
    c40a:	d057      	beq.n	c4bc <hal_spi_init+0xc8>
    if ((spi_type != HAL_SPI_TYPE_MASTER) && (spi_type != HAL_SPI_TYPE_SLAVE)) {
    c40c:	2a01      	cmp	r2, #1
    c40e:	d855      	bhi.n	c4bc <hal_spi_init+0xc8>
    spi->spi_type  = spi_type;
    c410:	701a      	strb	r2, [r3, #0]
    if (spi_num == 0) {
    c412:	2800      	cmp	r0, #0
    c414:	d152      	bne.n	c4bc <hal_spi_init+0xc8>
        spi->irq_num = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQn;
    c416:	4e2b      	ldr	r6, [pc, #172]	; (c4c4 <hal_spi_init+0xd0>)
    c418:	2703      	movs	r7, #3
    c41a:	7537      	strb	r7, [r6, #20]
        if (spi_type == HAL_SPI_TYPE_MASTER) {
    c41c:	2a00      	cmp	r2, #0
    c41e:	d148      	bne.n	c4b2 <hal_spi_init+0xbe>
            spi->nhs_spi.spim = NRF_SPIM0;
    c420:	4b29      	ldr	r3, [pc, #164]	; (c4c8 <hal_spi_init+0xd4>)
    c422:	6133      	str	r3, [r6, #16]
    hal_spi_disable(spi_num);
    c424:	f7ff ffb8 	bl	c398 <hal_spi_disable>
    pin = HAL_GPIO_INDEX(cfg->mosi_pin);
    c428:	7869      	ldrb	r1, [r5, #1]
    c42a:	78a8      	ldrb	r0, [r5, #2]
    port->OUTCLR = (1UL << pin);
    c42c:	f895 c000 	ldrb.w	ip, [r5]
    c430:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    c434:	2301      	movs	r3, #1
    c436:	fa03 f501 	lsl.w	r5, r3, r1
    c43a:	f8c2 550c 	str.w	r5, [r2, #1292]	; 0x50c
    port->PIN_CNF[pin] =
    c43e:	f501 75e0 	add.w	r5, r1, #448	; 0x1c0
    c442:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
    port->PIN_CNF[pin] =
    c446:	f500 75e0 	add.w	r5, r0, #448	; 0x1c0
    c44a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    spim = (NRF_SPIM_Type *)spi->nhs_spi.spim;
    c44e:	6932      	ldr	r2, [r6, #16]
    spim->PSEL.SCK = cfg->sck_pin;
    c450:	f8c2 c508 	str.w	ip, [r2, #1288]	; 0x508
    spim->PSEL.MOSI = cfg->mosi_pin;
    c454:	f8c2 150c 	str.w	r1, [r2, #1292]	; 0x50c
    spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
    c458:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    spim->PSEL.MISO = cfg->miso_pin;
    c45c:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
    c460:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    NVIC_SetVector(spi->irq_num, (uint32_t)handler);
    c464:	f996 2014 	ldrsb.w	r2, [r6, #20]
  uint32_t vectors = (uint32_t )SCB->VTOR;
    c468:	4918      	ldr	r1, [pc, #96]	; (c4cc <hal_spi_init+0xd8>)
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    c46a:	4e19      	ldr	r6, [pc, #100]	; (c4d0 <hal_spi_init+0xdc>)
  uint32_t vectors = (uint32_t )SCB->VTOR;
    c46c:	6888      	ldr	r0, [r1, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    c46e:	f102 0510 	add.w	r5, r2, #16
  if ((int32_t)(IRQn) >= 0)
    c472:	2a00      	cmp	r2, #0
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    c474:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
  if ((int32_t)(IRQn) >= 0)
    c478:	db14      	blt.n	c4a4 <hal_spi_init+0xb0>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    c47a:	f102 4160 	add.w	r1, r2, #3758096384	; 0xe0000000
    c47e:	f501 4161 	add.w	r1, r1, #57600	; 0xe100
    c482:	20e0      	movs	r0, #224	; 0xe0
    c484:	f881 0300 	strb.w	r0, [r1, #768]	; 0x300
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c488:	f002 011f 	and.w	r1, r2, #31
    c48c:	0952      	lsrs	r2, r2, #5
    c48e:	0092      	lsls	r2, r2, #2
    c490:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
    c494:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
    c498:	408b      	lsls	r3, r1
    c49a:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c49e:	6013      	str	r3, [r2, #0]
}
    c4a0:	4620      	mov	r0, r4
    c4a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    c4a4:	f002 020f 	and.w	r2, r2, #15
    c4a8:	3a04      	subs	r2, #4
    c4aa:	440a      	add	r2, r1
    c4ac:	23e0      	movs	r3, #224	; 0xe0
    c4ae:	7613      	strb	r3, [r2, #24]
  if ((int32_t)(IRQn) >= 0)
    c4b0:	e7f6      	b.n	c4a0 <hal_spi_init+0xac>
            assert(0);
    c4b2:	4603      	mov	r3, r0
    c4b4:	4602      	mov	r2, r0
    c4b6:	4601      	mov	r1, r0
    c4b8:	f000 f9a0 	bl	c7fc <__assert_func>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    c4bc:	2416      	movs	r4, #22
    c4be:	e7ef      	b.n	c4a0 <hal_spi_init+0xac>
    c4c0:	00020490 	.word	0x00020490
    c4c4:	20001bc0 	.word	0x20001bc0
    c4c8:	40003000 	.word	0x40003000
    c4cc:	e000ed00 	.word	0xe000ed00
    c4d0:	0000c1c9 	.word	0x0000c1c9

0000c4d4 <hal_spi_set_txrx_cb>:
{
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    c4d4:	2803      	cmp	r0, #3
    c4d6:	dc0a      	bgt.n	c4ee <hal_spi_set_txrx_cb+0x1a>
    c4d8:	4b07      	ldr	r3, [pc, #28]	; (c4f8 <hal_spi_set_txrx_cb+0x24>)
    c4da:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    c4de:	b133      	cbz	r3, c4ee <hal_spi_set_txrx_cb+0x1a>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
    c4e0:	6918      	ldr	r0, [r3, #16]
    if (spim->ENABLE != 0) {
    c4e2:	f8d0 0500 	ldr.w	r0, [r0, #1280]	; 0x500
    c4e6:	b920      	cbnz	r0, c4f2 <hal_spi_set_txrx_cb+0x1e>
        rc = -1;
    } else {
        spi->txrx_cb_func = txrx_cb;
        spi->txrx_cb_arg = arg;
    c4e8:	e9c3 1208 	strd	r1, r2, [r3, #32]
        rc = 0;
    c4ec:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    c4ee:	2016      	movs	r0, #22
    c4f0:	4770      	bx	lr
        rc = -1;
    c4f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }

err:
    return rc;
}
    c4f6:	4770      	bx	lr
    c4f8:	00020490 	.word	0x00020490

0000c4fc <hal_spi_txrx>:
 *
 * @return int 0 on success, non-zero error code on failure.
 */
int
hal_spi_txrx(int spi_num, void *txbuf, void *rxbuf, int len)
{
    c4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c4fe:	460d      	mov	r5, r1
    c500:	4617      	mov	r7, r2
    NRF_SPI_Type *spi;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *hal_spi;

    rc = EINVAL;
    if (!len) {
    c502:	461e      	mov	r6, r3
    c504:	2b00      	cmp	r3, #0
    c506:	d03d      	beq.n	c584 <hal_spi_txrx+0x88>
        goto err;
    }

    NRF52_HAL_SPI_RESOLVE(spi_num, hal_spi);
    c508:	2803      	cmp	r0, #3
    c50a:	dc3b      	bgt.n	c584 <hal_spi_txrx+0x88>
    c50c:	4b1e      	ldr	r3, [pc, #120]	; (c588 <hal_spi_txrx+0x8c>)
    c50e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    c512:	b3bb      	cbz	r3, c584 <hal_spi_txrx+0x88>

    if (hal_spi->spi_type  == HAL_SPI_TYPE_MASTER) {
    c514:	781a      	ldrb	r2, [r3, #0]
    c516:	bbaa      	cbnz	r2, c584 <hal_spi_txrx+0x88>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
    c518:	b3a1      	cbz	r1, c584 <hal_spi_txrx+0x88>

        /*
         * If SPIM is enabled, we want to stop, disable, then enable
         * the legacy SPI interface.
         */
        spim = hal_spi->nhs_spi.spim;
    c51a:	691c      	ldr	r4, [r3, #16]
        enabled = spim->ENABLE;
    c51c:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        if (enabled == SPIM_ENABLE_ENABLE_Enabled) {
    c520:	2b07      	cmp	r3, #7
    c522:	d105      	bne.n	c530 <hal_spi_txrx+0x34>
            hal_spi_disable(spi_num);
    c524:	f7ff ff38 	bl	c398 <hal_spi_disable>
            enabled = 0;
        }

        spi = (NRF_SPI_Type *)spim;
        if (enabled == 0) {
            spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    c528:	2301      	movs	r3, #1
    c52a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    c52e:	e001      	b.n	c534 <hal_spi_txrx+0x38>
        if (enabled == 0) {
    c530:	2b00      	cmp	r3, #0
    c532:	d0f9      	beq.n	c528 <hal_spi_txrx+0x2c>
        }

        while (spi->EVENTS_READY) {
            rxval = (uint8_t)spi->RXD;
            spi->EVENTS_READY = 0;
    c534:	2300      	movs	r3, #0
        while (spi->EVENTS_READY) {
    c536:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    c53a:	b948      	cbnz	r0, c550 <hal_spi_txrx+0x54>
        }
        txd = (uint8_t *)txbuf;
        spi->TXD = *txd;
    c53c:	782b      	ldrb	r3, [r5, #0]
    c53e:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c

        txcnt = len - 1;
        rxd = (uint8_t *)rxbuf;
    c542:	463a      	mov	r2, r7
        txcnt = len - 1;
    c544:	1e73      	subs	r3, r6, #1
                ++txd;
                spi->TXD = *txd;
                --txcnt;
            }
            while (!spi->EVENTS_READY) {}
            spi->EVENTS_READY = 0;
    c546:	4601      	mov	r1, r0
        for (i = 0; i < len; ++i) {
    c548:	4286      	cmp	r6, r0
    c54a:	dc06      	bgt.n	c55a <hal_spi_txrx+0x5e>
            if (rxbuf) {
                *rxd = rxval;
                ++rxd;
            }
        }
        return 0;
    c54c:	2000      	movs	r0, #0
    }

err:
    return rc;
}
    c54e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            rxval = (uint8_t)spi->RXD;
    c550:	f8d4 2518 	ldr.w	r2, [r4, #1304]	; 0x518
            spi->EVENTS_READY = 0;
    c554:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    c558:	e7ed      	b.n	c536 <hal_spi_txrx+0x3a>
            if (txcnt) {
    c55a:	b12b      	cbz	r3, c568 <hal_spi_txrx+0x6c>
                spi->TXD = *txd;
    c55c:	f895 c001 	ldrb.w	ip, [r5, #1]
    c560:	f8c4 c51c 	str.w	ip, [r4, #1308]	; 0x51c
                --txcnt;
    c564:	3b01      	subs	r3, #1
                ++txd;
    c566:	3501      	adds	r5, #1
            while (!spi->EVENTS_READY) {}
    c568:	f8d4 c108 	ldr.w	ip, [r4, #264]	; 0x108
    c56c:	f1bc 0f00 	cmp.w	ip, #0
    c570:	d0fa      	beq.n	c568 <hal_spi_txrx+0x6c>
            spi->EVENTS_READY = 0;
    c572:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
            rxval = (uint8_t)spi->RXD;
    c576:	f8d4 c518 	ldr.w	ip, [r4, #1304]	; 0x518
            if (rxbuf) {
    c57a:	b10f      	cbz	r7, c580 <hal_spi_txrx+0x84>
            rxval = (uint8_t)spi->RXD;
    c57c:	f802 cb01 	strb.w	ip, [r2], #1
        for (i = 0; i < len; ++i) {
    c580:	3001      	adds	r0, #1
    c582:	e7e1      	b.n	c548 <hal_spi_txrx+0x4c>
    return rc;
    c584:	2016      	movs	r0, #22
    c586:	e7e2      	b.n	c54e <hal_spi_txrx+0x52>
    c588:	00020490 	.word	0x00020490

0000c58c <hal_spi_txrx_noblock>:
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    rc = EINVAL;
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    c58c:	2803      	cmp	r0, #3
{
    c58e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c590:	4694      	mov	ip, r2
    c592:	460f      	mov	r7, r1
    c594:	461e      	mov	r6, r3
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    c596:	dc61      	bgt.n	c65c <hal_spi_txrx_noblock+0xd0>
    c598:	4d33      	ldr	r5, [pc, #204]	; (c668 <hal_spi_txrx_noblock+0xdc>)
    c59a:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
    c59e:	2d00      	cmp	r5, #0
    c5a0:	d05c      	beq.n	c65c <hal_spi_txrx_noblock+0xd0>

    if ((spi->txrx_cb_func == NULL) || (len == 0)) {
    c5a2:	6a2c      	ldr	r4, [r5, #32]
    c5a4:	2c00      	cmp	r4, #0
    c5a6:	d059      	beq.n	c65c <hal_spi_txrx_noblock+0xd0>
    c5a8:	2b00      	cmp	r3, #0
    c5aa:	d057      	beq.n	c65c <hal_spi_txrx_noblock+0xd0>
#if MYNEWT_VAL_CHOICE(MCU_TARGET,nRF52832)
    /* There is a known issue in nRF52832 with sending 1 byte in SPIM mode that
     * it clocks out additional byte. For this reason, let us use SPI mode
     * for such a write
     */
    if (len == 1) {
    c5ac:	2b01      	cmp	r3, #1
    c5ae:	d109      	bne.n	c5c4 <hal_spi_txrx_noblock+0x38>
        rc = hal_spi_txrx(spi_num, txbuf, rxbuf, len);
    c5b0:	f7ff ffa4 	bl	c4fc <hal_spi_txrx>
        if (rc == 0) {
    c5b4:	4604      	mov	r4, r0
    c5b6:	b918      	cbnz	r0, c5c0 <hal_spi_txrx_noblock+0x34>
            spi->txrx_cb_func(spi->txrx_cb_arg, len);
    c5b8:	6a2b      	ldr	r3, [r5, #32]
    c5ba:	6a68      	ldr	r0, [r5, #36]	; 0x24
    c5bc:	4631      	mov	r1, r6
    c5be:	4798      	blx	r3
    }
    return 0;

err:
    return rc;
}
    c5c0:	4620      	mov	r0, r4
    c5c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
    c5c4:	782b      	ldrb	r3, [r5, #0]
    c5c6:	2b00      	cmp	r3, #0
    c5c8:	d13a      	bne.n	c640 <hal_spi_txrx_noblock+0xb4>
        if (txbuf == NULL) {
    c5ca:	2900      	cmp	r1, #0
    c5cc:	d046      	beq.n	c65c <hal_spi_txrx_noblock+0xd0>
        if (spi->spi_xfr_flag) {
    c5ce:	786b      	ldrb	r3, [r5, #1]
    c5d0:	2b00      	cmp	r3, #0
    c5d2:	d145      	bne.n	c660 <hal_spi_txrx_noblock+0xd4>
        spim = spi->nhs_spi.spim;
    c5d4:	6928      	ldr	r0, [r5, #16]
        spim->INTENCLR = SPIM_INTENCLR_END_Msk;
    c5d6:	2240      	movs	r2, #64	; 0x40
    c5d8:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
        spi->spi_xfr_flag = 1;
    c5dc:	2201      	movs	r2, #1
    c5de:	706a      	strb	r2, [r5, #1]
        if (spim->ENABLE != SPIM_ENABLE_ENABLE_Enabled) {
    c5e0:	f8d0 2500 	ldr.w	r2, [r0, #1280]	; 0x500
    c5e4:	2a07      	cmp	r2, #7
            spim->ENABLE = 0;
    c5e6:	bf1e      	ittt	ne
    c5e8:	f8c0 3500 	strne.w	r3, [r0, #1280]	; 0x500
            spim->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
    c5ec:	2307      	movne	r3, #7
    c5ee:	f8c0 3500 	strne.w	r3, [r0, #1280]	; 0x500
        len = min(SPIM_TXD_MAXCNT_MAX, len);
    c5f2:	2eff      	cmp	r6, #255	; 0xff
        spi->nhs_buflen = len;
    c5f4:	80ae      	strh	r6, [r5, #4]
        spi->nhs_bytes_txd = 0;
    c5f6:	f04f 0300 	mov.w	r3, #0
        len = min(SPIM_TXD_MAXCNT_MAX, len);
    c5fa:	bfa8      	it	ge
    c5fc:	26ff      	movge	r6, #255	; 0xff
        spi->nhs_bytes_txd = 0;
    c5fe:	80eb      	strh	r3, [r5, #6]
        spi->nhs_txbuf = txbuf;
    c600:	61a9      	str	r1, [r5, #24]
        spim->TXD.PTR = (uint32_t)txbuf;
    c602:	f8c0 1544 	str.w	r1, [r0, #1348]	; 0x544
        spim->TXD.MAXCNT = len;
    c606:	f8c0 6548 	str.w	r6, [r0, #1352]	; 0x548
        spi->nhs_rxbuf = rxbuf;
    c60a:	f8c5 c01c 	str.w	ip, [r5, #28]
        if (rxbuf == NULL) {
    c60e:	f1bc 0f00 	cmp.w	ip, #0
    c612:	d110      	bne.n	c636 <hal_spi_txrx_noblock+0xaa>
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
    c614:	3502      	adds	r5, #2
            spim->RXD.MAXCNT = 1;
    c616:	2301      	movs	r3, #1
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
    c618:	f8c0 5534 	str.w	r5, [r0, #1332]	; 0x534
            spim->RXD.MAXCNT = 1;
    c61c:	f8c0 3538 	str.w	r3, [r0, #1336]	; 0x538
        spim->EVENTS_END = 0;
    c620:	2400      	movs	r4, #0
        spim->TASKS_START = 1;
    c622:	2301      	movs	r3, #1
        spim->EVENTS_END = 0;
    c624:	f8c0 4118 	str.w	r4, [r0, #280]	; 0x118
        spim->EVENTS_STOPPED = 0;
    c628:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
        spim->TASKS_START = 1;
    c62c:	6103      	str	r3, [r0, #16]
        spim->INTENSET = SPIM_INTENSET_END_Msk;
    c62e:	2340      	movs	r3, #64	; 0x40
    c630:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
    c634:	e7c4      	b.n	c5c0 <hal_spi_txrx_noblock+0x34>
            spim->RXD.PTR = (uint32_t)rxbuf;
    c636:	f8c0 c534 	str.w	ip, [r0, #1332]	; 0x534
            spim->RXD.MAXCNT = len;
    c63a:	f8c0 6538 	str.w	r6, [r0, #1336]	; 0x538
    c63e:	e7ef      	b.n	c620 <hal_spi_txrx_noblock+0x94>
        if ((txbuf == NULL) && (rxbuf == NULL)) {
    c640:	b901      	cbnz	r1, c644 <hal_spi_txrx_noblock+0xb8>
    c642:	b15a      	cbz	r2, c65c <hal_spi_txrx_noblock+0xd0>
        if (len > 255) {
    c644:	2eff      	cmp	r6, #255	; 0xff
    c646:	dc09      	bgt.n	c65c <hal_spi_txrx_noblock+0xd0>
        if (spi->slave_state != HAL_SPI_SLAVE_STATE_IDLE) {
    c648:	78ec      	ldrb	r4, [r5, #3]
    c64a:	b94c      	cbnz	r4, c660 <hal_spi_txrx_noblock+0xd4>
        spi->nhs_spi.spis->TASKS_ACQUIRE = 1;
    c64c:	692a      	ldr	r2, [r5, #16]
        spi->nhs_buflen = len;
    c64e:	80ae      	strh	r6, [r5, #4]
        spi->slave_state = HAL_SPI_SLAVE_STATE_ACQ_SEM;
    c650:	2301      	movs	r3, #1
        spi->nhs_txbuf = txbuf;
    c652:	e9c5 7c06 	strd	r7, ip, [r5, #24]
        spi->slave_state = HAL_SPI_SLAVE_STATE_ACQ_SEM;
    c656:	70eb      	strb	r3, [r5, #3]
        spi->nhs_spi.spis->TASKS_ACQUIRE = 1;
    c658:	6253      	str	r3, [r2, #36]	; 0x24
    c65a:	e7b1      	b.n	c5c0 <hal_spi_txrx_noblock+0x34>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    c65c:	2416      	movs	r4, #22
    c65e:	e7af      	b.n	c5c0 <hal_spi_txrx_noblock+0x34>
            rc = -1;
    c660:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    c664:	e7ac      	b.n	c5c0 <hal_spi_txrx_noblock+0x34>
    c666:	bf00      	nop
    c668:	00020490 	.word	0x00020490

0000c66c <timer_handler>:
uint32_t os_flags = OS_RUN_PRIV;

void
timer_handler(void)
{
    os_time_advance(1);
    c66c:	2001      	movs	r0, #1
    c66e:	f001 b96b 	b.w	d948 <os_time_advance>
	...

0000c674 <os_arch_ctx_sw>:
}

void
os_arch_ctx_sw(struct os_task *t)
{
    c674:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
    c676:	f000 febf 	bl	d3f8 <os_sched_ctx_sw_hook>

    /* Set PendSV interrupt pending bit to force context switch */
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
    c67a:	4b02      	ldr	r3, [pc, #8]	; (c684 <os_arch_ctx_sw+0x10>)
    c67c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    c680:	605a      	str	r2, [r3, #4]
}
    c682:	bd08      	pop	{r3, pc}
    c684:	e000ed00 	.word	0xe000ed00

0000c688 <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    c688:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    c68c:	b672      	cpsid	i
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    __disable_irq();
    return (isr_ctx & 1);
}
    c68e:	f000 0001 	and.w	r0, r0, #1
    c692:	4770      	bx	lr

0000c694 <os_arch_restore_sr>:

void
os_arch_restore_sr(os_sr_t isr_ctx)
{
    if (!isr_ctx) {
    c694:	b900      	cbnz	r0, c698 <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
    c696:	b662      	cpsie	i
        __enable_irq();
    }
}
    c698:	4770      	bx	lr

0000c69a <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    c69a:	f3ef 8010 	mrs	r0, PRIMASK
{
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    return (isr_ctx & 1);
}
    c69e:	f000 0001 	and.w	r0, r0, #1
    c6a2:	4770      	bx	lr

0000c6a4 <os_arch_task_stack_init>:

os_stack_t *
os_arch_task_stack_init(struct os_task *t, os_stack_t *stack_top, int size)
{
    c6a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));

    /* Zero out R1-R3, R12, LR */
    for (i = 9; i < 14; ++i) {
        s[i] = 0;
    c6a6:	2300      	movs	r3, #0
{
    c6a8:	460c      	mov	r4, r1
    c6aa:	4605      	mov	r5, r0
        s[i] = 0;
    c6ac:	e941 3308 	strd	r3, r3, [r1, #-32]
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
    c6b0:	f1a1 0044 	sub.w	r0, r1, #68	; 0x44
        s[i] = 0;
    c6b4:	e941 3306 	strd	r3, r3, [r1, #-24]
    c6b8:	f841 3c10 	str.w	r3, [r1, #-16]
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
    c6bc:	9001      	str	r0, [sp, #4]
    c6be:	f001 fa63 	bl	db88 <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
    c6c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    c6c6:	f844 3c04 	str.w	r3, [r4, #-4]
    sf->pc = (uint32_t)t->t_func;
    c6ca:	696b      	ldr	r3, [r5, #20]
#if MYNEWT_VAL(HARDFLOAT)
    sf->exc_lr = INITIAL_LR;
#endif

    return (s);
}
    c6cc:	9801      	ldr	r0, [sp, #4]
    sf->pc = (uint32_t)t->t_func;
    c6ce:	f844 3c08 	str.w	r3, [r4, #-8]
    sf->r0 = (uint32_t)t->t_arg;
    c6d2:	69ab      	ldr	r3, [r5, #24]
    c6d4:	f844 3c20 	str.w	r3, [r4, #-32]
    sf->exc_lr = INITIAL_LR;
    c6d8:	f06f 0302 	mvn.w	r3, #2
    c6dc:	f844 3c24 	str.w	r3, [r4, #-36]
}
    c6e0:	b003      	add	sp, #12
    c6e2:	bd30      	pop	{r4, r5, pc}

0000c6e4 <os_arch_init>:
os_arch_init(void)
{
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    c6e4:	4a03      	ldr	r2, [pc, #12]	; (c6f4 <os_arch_init+0x10>)
    c6e6:	6953      	ldr	r3, [r2, #20]
    c6e8:	f043 0310 	orr.w	r3, r3, #16
    c6ec:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
    c6ee:	f000 b947 	b.w	c980 <os_init_idle_task>
    c6f2:	bf00      	nop
    c6f4:	e000ed00 	.word	0xe000ed00

0000c6f8 <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
    c6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    c6fa:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
    c6fe:	bb54      	cbnz	r4, c756 <os_arch_os_init+0x5e>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
            NVIC->IP[i] = -1;
    c700:	4f16      	ldr	r7, [pc, #88]	; (c75c <os_arch_os_init+0x64>)
    c702:	26ff      	movs	r6, #255	; 0xff
    c704:	193d      	adds	r5, r7, r4
        for (i = 0; i < sizeof(NVIC->IP); i++) {
    c706:	3401      	adds	r4, #1
    c708:	2cf0      	cmp	r4, #240	; 0xf0
            NVIC->IP[i] = -1;
    c70a:	f885 6300 	strb.w	r6, [r5, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
    c70e:	d1f9      	bne.n	c704 <os_arch_os_init+0xc>
  uint32_t vectors = (uint32_t )SCB->VTOR;
    c710:	4c13      	ldr	r4, [pc, #76]	; (c760 <os_arch_os_init+0x68>)
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    c712:	4f14      	ldr	r7, [pc, #80]	; (c764 <os_arch_os_init+0x6c>)
    c714:	2508      	movs	r5, #8
  uint32_t vectors = (uint32_t )SCB->VTOR;
    c716:	68a6      	ldr	r6, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    c718:	51af      	str	r7, [r5, r6]
         * Install default interrupt handler for all interrupts except Reset,
         * which'll print out system state at the time of the interrupt, and
         * few other regs which should help in trying to figure out what went
         * wrong.
         */
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
    c71a:	3504      	adds	r5, #4
    c71c:	2dd8      	cmp	r5, #216	; 0xd8
    c71e:	d1fa      	bne.n	c716 <os_arch_os_init+0x1e>
  uint32_t vectors = (uint32_t )SCB->VTOR;
    c720:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    c722:	4e11      	ldr	r6, [pc, #68]	; (c768 <os_arch_os_init+0x70>)
    c724:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
    c726:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    c728:	4e10      	ldr	r6, [pc, #64]	; (c76c <os_arch_os_init+0x74>)
    c72a:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
    c72c:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    c72e:	4e10      	ldr	r6, [pc, #64]	; (c770 <os_arch_os_init+0x78>)
    c730:	63ee      	str	r6, [r5, #60]	; 0x3c
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    c732:	25e0      	movs	r5, #224	; 0xe0
    c734:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
    c738:	2520      	movs	r5, #32
    c73a:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    c73c:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVCall_IRQn, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
    c740:	f014 0401 	ands.w	r4, r4, #1
    c744:	d103      	bne.n	c74e <os_arch_os_init+0x56>
            os_arch_init();
    c746:	f7ff ffcd 	bl	c6e4 <os_arch_init>
        err = OS_OK;
    c74a:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
    c74c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SVC_Call(os_arch_init);
    c74e:	f8df c024 	ldr.w	ip, [pc, #36]	; c774 <os_arch_os_init+0x7c>
    c752:	df00      	svc	0
    c754:	e7f9      	b.n	c74a <os_arch_os_init+0x52>
    err = OS_ERR_IN_ISR;
    c756:	2007      	movs	r0, #7
    c758:	e7f8      	b.n	c74c <os_arch_os_init+0x54>
    c75a:	bf00      	nop
    c75c:	e000e100 	.word	0xe000e100
    c760:	e000ed00 	.word	0xe000ed00
    c764:	0000dc27 	.word	0x0000dc27
    c768:	0000db8f 	.word	0x0000db8f
    c76c:	0000dbd5 	.word	0x0000dbd5
    c770:	0000dc1b 	.word	0x0000dc1b
    c774:	0000c6e5 	.word	0x0000c6e5

0000c778 <os_arch_start>:

uint32_t
os_arch_start(void)
{
    c778:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
    c77a:	f000 ff4d 	bl	d618 <os_sched_next_task>
    c77e:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
    c780:	f000 fe56 	bl	d430 <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
    c784:	6823      	ldr	r3, [r4, #0]
    c786:	3324      	adds	r3, #36	; 0x24
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    c788:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
    c78c:	2106      	movs	r1, #6
    c78e:	2080      	movs	r0, #128	; 0x80
    c790:	f00a f818 	bl	167c4 <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
    c794:	4b03      	ldr	r3, [pc, #12]	; (c7a4 <os_arch_start+0x2c>)
    c796:	2201      	movs	r2, #1

    /* Perform context switch */
    os_arch_ctx_sw(t);
    c798:	4620      	mov	r0, r4
    g_os_started = 1;
    c79a:	601a      	str	r2, [r3, #0]
    os_arch_ctx_sw(t);
    c79c:	f7ff ff6a 	bl	c674 <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
    c7a0:	69a0      	ldr	r0, [r4, #24]
    c7a2:	bd10      	pop	{r4, pc}
    c7a4:	20002d98 	.word	0x20002d98

0000c7a8 <os_arch_os_start>:
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
    c7a8:	4811      	ldr	r0, [pc, #68]	; (c7f0 <os_arch_os_start+0x48>)
    c7aa:	6800      	ldr	r0, [r0, #0]
{
    c7ac:	b510      	push	{r4, lr}
    os_set_env(g_idle_task.t_stackptr - 1);
    c7ae:	3804      	subs	r0, #4
    c7b0:	f001 f9e0 	bl	db74 <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    c7b4:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
    c7b8:	b9bc      	cbnz	r4, c7ea <os_arch_os_start+0x42>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    c7ba:	f3ef 8414 	mrs	r4, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
    c7be:	f004 0403 	and.w	r4, r4, #3
    c7c2:	2c02      	cmp	r4, #2
    c7c4:	d003      	beq.n	c7ce <os_arch_os_start+0x26>
    c7c6:	2c03      	cmp	r4, #3
    c7c8:	d00a      	beq.n	c7e0 <os_arch_os_start+0x38>
            /*
             * We are running in Privileged Thread mode w/SP = PSP but we
             * are supposed to be un-privileged.
             */
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
                err = OS_ERR_PRIV;
    c7ca:	2008      	movs	r0, #8
    c7cc:	e007      	b.n	c7de <os_arch_os_start+0x36>
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
    c7ce:	4c09      	ldr	r4, [pc, #36]	; (c7f4 <os_arch_os_start+0x4c>)
    c7d0:	6824      	ldr	r4, [r4, #0]
    c7d2:	07e4      	lsls	r4, r4, #31
    c7d4:	d4f9      	bmi.n	c7ca <os_arch_os_start+0x22>
    SVC_Call(os_arch_start);
    c7d6:	f8df c020 	ldr.w	ip, [pc, #32]	; c7f8 <os_arch_os_start+0x50>
    c7da:	df00      	svc	0
}
    c7dc:	2000      	movs	r0, #0
            svc_os_arch_start();
        }
    }

    return err;
}
    c7de:	bd10      	pop	{r4, pc}
            if  ((os_flags & 1) == OS_RUN_PRIV) {
    c7e0:	4c04      	ldr	r4, [pc, #16]	; (c7f4 <os_arch_os_start+0x4c>)
    c7e2:	6824      	ldr	r4, [r4, #0]
    c7e4:	07e4      	lsls	r4, r4, #31
    c7e6:	d5f0      	bpl.n	c7ca <os_arch_os_start+0x22>
    c7e8:	e7f5      	b.n	c7d6 <os_arch_os_start+0x2e>
    err = OS_ERR_IN_ISR;
    c7ea:	2007      	movs	r0, #7
    c7ec:	e7f7      	b.n	c7de <os_arch_os_start+0x36>
    c7ee:	bf00      	nop
    c7f0:	20001bec 	.word	0x20001bec
    c7f4:	20001be8 	.word	0x20001be8
    c7f8:	0000c779 	.word	0x0000c779

0000c7fc <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
    c7fc:	b507      	push	{r0, r1, r2, lr}
    c7fe:	4605      	mov	r5, r0
    c800:	4674      	mov	r4, lr
    c802:	9101      	str	r1, [sp, #4]
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
    c804:	f7ff ff40 	bl	c688 <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
    c808:	f005 f944 	bl	11a94 <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
    c80c:	9b01      	ldr	r3, [sp, #4]
    c80e:	b97d      	cbnz	r5, c830 <__assert_func+0x34>
    c810:	480a      	ldr	r0, [pc, #40]	; (c83c <__assert_func+0x40>)
    c812:	4621      	mov	r1, r4
    c814:	f005 fbf0 	bl	11ff8 <console_printf>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    if (hal_debugger_connected()) {
    c818:	f7fb fce0 	bl	81dc <hal_debugger_connected>
    c81c:	b100      	cbz	r0, c820 <__assert_func+0x24>
       /*
        * If debugger is attached, breakpoint before the trap.
        */
#if !MYNEWT_VAL(MCU_DEBUG_IGNORE_BKPT)
       asm("bkpt");
    c81e:	be00      	bkpt	0x0000
#endif
    }
    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
    c820:	4b07      	ldr	r3, [pc, #28]	; (c840 <__assert_func+0x44>)
    c822:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    c826:	605a      	str	r2, [r3, #4]
    asm("isb");
    c828:	f3bf 8f6f 	isb	sy
    hal_system_reset();
    c82c:	f7fb fcc0 	bl	81b0 <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
    c830:	462a      	mov	r2, r5
    c832:	4621      	mov	r1, r4
    c834:	4803      	ldr	r0, [pc, #12]	; (c844 <__assert_func+0x48>)
    c836:	f005 fbdf 	bl	11ff8 <console_printf>
    c83a:	e7ed      	b.n	c818 <__assert_func+0x1c>
    c83c:	000204a0 	.word	0x000204a0
    c840:	e000ed00 	.word	0xe000ed00
    c844:	000204af 	.word	0x000204af

0000c848 <os_default_irq>:
    uint32_t orig_sp;
#endif

    console_blocking_mode();
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
    c848:	4d1d      	ldr	r5, [pc, #116]	; (c8c0 <os_default_irq+0x78>)
{
    c84a:	b507      	push	{r0, r1, r2, lr}
    c84c:	4604      	mov	r4, r0
    console_blocking_mode();
    c84e:	f005 f921 	bl	11a94 <console_blocking_mode>
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
    c852:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
    c854:	6822      	ldr	r2, [r4, #0]
    c856:	481b      	ldr	r0, [pc, #108]	; (c8c4 <os_default_irq+0x7c>)
    c858:	f3c1 0108 	ubfx	r1, r1, #0, #9
    c85c:	f005 fbcc 	bl	11ff8 <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
    c860:	6821      	ldr	r1, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
    c862:	4819      	ldr	r0, [pc, #100]	; (c8c8 <os_default_irq+0x80>)
    c864:	68cb      	ldr	r3, [r1, #12]
    c866:	9300      	str	r3, [sp, #0]
    c868:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    c86c:	6809      	ldr	r1, [r1, #0]
    c86e:	f005 fbc3 	bl	11ff8 <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
    c872:	6923      	ldr	r3, [r4, #16]
    c874:	6861      	ldr	r1, [r4, #4]
    c876:	9300      	str	r3, [sp, #0]
    c878:	4814      	ldr	r0, [pc, #80]	; (c8cc <os_default_irq+0x84>)
    c87a:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    c87e:	f005 fbbb 	bl	11ff8 <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
    c882:	6a23      	ldr	r3, [r4, #32]
    c884:	6961      	ldr	r1, [r4, #20]
    c886:	9300      	str	r3, [sp, #0]
    c888:	4811      	ldr	r0, [pc, #68]	; (c8d0 <os_default_irq+0x88>)
    c88a:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
    c88e:	f005 fbb3 	bl	11ff8 <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
    c892:	6821      	ldr	r1, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
    c894:	480f      	ldr	r0, [pc, #60]	; (c8d4 <os_default_irq+0x8c>)
    c896:	69cb      	ldr	r3, [r1, #28]
    c898:	9300      	str	r3, [sp, #0]
    c89a:	e9d1 2305 	ldrd	r2, r3, [r1, #20]
    c89e:	6909      	ldr	r1, [r1, #16]
    c8a0:	f005 fbaa 	bl	11ff8 <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
    c8a4:	6869      	ldr	r1, [r5, #4]
    c8a6:	480c      	ldr	r0, [pc, #48]	; (c8d8 <os_default_irq+0x90>)
    c8a8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    c8aa:	6aab      	ldr	r3, [r5, #40]	; 0x28
    c8ac:	f005 fba4 	bl	11ff8 <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
    c8b0:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    c8b2:	480a      	ldr	r0, [pc, #40]	; (c8dc <os_default_irq+0x94>)
    c8b4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    c8b6:	f005 fb9f 	bl	11ff8 <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
    c8ba:	f7fb fc79 	bl	81b0 <hal_system_reset>
    c8be:	bf00      	nop
    c8c0:	e000ed00 	.word	0xe000ed00
    c8c4:	000204c6 	.word	0x000204c6
    c8c8:	000204f7 	.word	0x000204f7
    c8cc:	00020528 	.word	0x00020528
    c8d0:	00020559 	.word	0x00020559
    c8d4:	0002058a 	.word	0x0002058a
    c8d8:	000205bb 	.word	0x000205bb
    c8dc:	000205e3 	.word	0x000205e3

0000c8e0 <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
    c8e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    os_time_t sanity_itvl_ticks;

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

    hal_watchdog_tickle();
    c8e4:	f00a f9f8 	bl	16cd8 <hal_watchdog_tickle>
    os_cputime_timer_stop(&os_wdog_monitor);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif

    while (1) {
        ++g_os_idle_ctr;
    c8e8:	4f1b      	ldr	r7, [pc, #108]	; (c958 <os_idle_task+0x78>)
    sanity_last = 0;
    c8ea:	2600      	movs	r6, #0
        ++g_os_idle_ctr;
    c8ec:	683b      	ldr	r3, [r7, #0]
    c8ee:	3301      	adds	r3, #1
    c8f0:	603b      	str	r3, [r7, #0]

        now = os_time_get();
    c8f2:	f001 f823 	bl	d93c <os_time_get>
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
    c8f6:	f5a0 63f0 	sub.w	r3, r0, #1920	; 0x780
    c8fa:	1b9b      	subs	r3, r3, r6
    c8fc:	2b00      	cmp	r3, #0
        now = os_time_get();
    c8fe:	4604      	mov	r4, r0
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
    c900:	dd04      	ble.n	c90c <os_idle_task+0x2c>
            os_sanity_run();
    c902:	f000 fd23 	bl	d34c <os_sanity_run>
            /* Tickle the watchdog after successfully running sanity */
            hal_watchdog_tickle();
    c906:	f00a f9e7 	bl	16cd8 <hal_watchdog_tickle>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
            os_cputime_timer_stop(&os_wdog_monitor);
            os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
            sanity_last = now;
    c90a:	4626      	mov	r6, r4
        }

        OS_ENTER_CRITICAL(sr);
    c90c:	f7ff febc 	bl	c688 <os_arch_save_sr>
    c910:	4605      	mov	r5, r0
        now = os_time_get();
    c912:	f001 f813 	bl	d93c <os_time_get>
    c916:	4680      	mov	r8, r0
        sticks = os_sched_wakeup_ticks(now);
    c918:	f000 fe64 	bl	d5e4 <os_sched_wakeup_ticks>
    c91c:	4604      	mov	r4, r0
        cticks = os_callout_wakeup_ticks(now);
    c91e:	4640      	mov	r0, r8
    c920:	f000 f968 	bl	cbf4 <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
        /* Wakeup in time to run sanity as well from the idle context,
         * as the idle task does not schedule itself.
         */
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));
    c924:	f506 62f0 	add.w	r2, r6, #1920	; 0x780
        iticks = min(sticks, cticks);
    c928:	42a0      	cmp	r0, r4
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));
    c92a:	eba2 0308 	sub.w	r3, r2, r8
        iticks = min(sticks, cticks);
    c92e:	bf28      	it	cs
    c930:	4620      	movcs	r0, r4
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));
    c932:	4283      	cmp	r3, r0
    c934:	bf28      	it	cs
    c936:	4603      	movcs	r3, r0

        if (iticks < MIN_IDLE_TICKS) {
    c938:	2b0b      	cmp	r3, #11
    c93a:	d90b      	bls.n	c954 <os_idle_task+0x74>
            iticks = 0;
        } else if (iticks > MAX_IDLE_TICKS) {
    c93c:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    c940:	bf28      	it	cs
    c942:	f44f 3396 	movcs.w	r3, #76800	; 0x12c00
    c946:	4618      	mov	r0, r3
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
    c948:	f009 ff1a 	bl	16780 <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
    c94c:	4628      	mov	r0, r5
    c94e:	f7ff fea1 	bl	c694 <os_arch_restore_sr>
        ++g_os_idle_ctr;
    c952:	e7cb      	b.n	c8ec <os_idle_task+0xc>
            iticks = 0;
    c954:	2000      	movs	r0, #0
    c956:	e7f7      	b.n	c948 <os_idle_task+0x68>
    c958:	20001d40 	.word	0x20001d40

0000c95c <os_main>:
os_main(void *arg)
{
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
    c95c:	2100      	movs	r1, #0
{
    c95e:	b508      	push	{r3, lr}
    c960:	4603      	mov	r3, r0
    fn(0, NULL);
    c962:	4608      	mov	r0, r1
    c964:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
    c966:	2300      	movs	r3, #0
    c968:	461a      	mov	r2, r3
    c96a:	4619      	mov	r1, r3
    c96c:	4618      	mov	r0, r3
    c96e:	f7ff ff45 	bl	c7fc <__assert_func>
	...

0000c974 <os_started>:
}
    c974:	4b01      	ldr	r3, [pc, #4]	; (c97c <os_started+0x8>)
    c976:	6818      	ldr	r0, [r3, #0]
    c978:	4770      	bx	lr
    c97a:	bf00      	nop
    c97c:	20002d98 	.word	0x20002d98

0000c980 <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
    c980:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
    c982:	2340      	movs	r3, #64	; 0x40
    c984:	9303      	str	r3, [sp, #12]
    c986:	4b10      	ldr	r3, [pc, #64]	; (c9c8 <os_init_idle_task+0x48>)
    c988:	9302      	str	r3, [sp, #8]
    c98a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    c98e:	23ff      	movs	r3, #255	; 0xff
    c990:	e9cd 3200 	strd	r3, r2, [sp]
    c994:	490d      	ldr	r1, [pc, #52]	; (c9cc <os_init_idle_task+0x4c>)
    c996:	4a0e      	ldr	r2, [pc, #56]	; (c9d0 <os_init_idle_task+0x50>)
    c998:	480e      	ldr	r0, [pc, #56]	; (c9d4 <os_init_idle_task+0x54>)
    c99a:	2300      	movs	r3, #0
    c99c:	f000 fee4 	bl	d768 <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
    c9a0:	b128      	cbz	r0, c9ae <os_init_idle_task+0x2e>
    c9a2:	2300      	movs	r3, #0
    c9a4:	461a      	mov	r2, r3
    c9a6:	4619      	mov	r1, r3
    c9a8:	4618      	mov	r0, r3
    c9aa:	f7ff ff27 	bl	c7fc <__assert_func>

    /* Initialize sanity */
    rc = os_sanity_init();
    c9ae:	f000 fcf5 	bl	d39c <os_sanity_init>
    assert(rc == 0);
    c9b2:	2800      	cmp	r0, #0
    c9b4:	d1f5      	bne.n	c9a2 <os_init_idle_task+0x22>

    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
    c9b6:	f247 5030 	movw	r0, #30000	; 0x7530
    c9ba:	f00a f94d 	bl	16c58 <hal_watchdog_init>
    assert(rc == 0);
    c9be:	2800      	cmp	r0, #0
    c9c0:	d1ef      	bne.n	c9a2 <os_init_idle_task+0x22>

#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
}
    c9c2:	b005      	add	sp, #20
    c9c4:	f85d fb04 	ldr.w	pc, [sp], #4
    c9c8:	20001c40 	.word	0x20001c40
    c9cc:	000205ff 	.word	0x000205ff
    c9d0:	0000c8e1 	.word	0x0000c8e1
    c9d4:	20001bec 	.word	0x20001bec

0000c9d8 <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
    c9d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    os_error_t err;

#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    c9da:	2100      	movs	r1, #0
    c9dc:	2248      	movs	r2, #72	; 0x48
{
    c9de:	4604      	mov	r4, r0
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    c9e0:	481f      	ldr	r0, [pc, #124]	; (ca60 <os_init+0x88>)
    c9e2:	f003 fc52 	bl	1028a <memset>
    SEGGER_RTT_Init();
    c9e6:	f008 fefd 	bl	157e4 <SEGGER_RTT_Init>
#endif

    TAILQ_INIT(&g_callout_list);
    c9ea:	4b1e      	ldr	r3, [pc, #120]	; (ca64 <os_init+0x8c>)
    c9ec:	2200      	movs	r2, #0
    c9ee:	e9c3 2300 	strd	r2, r3, [r3]
    STAILQ_INIT(&g_os_task_list);
    c9f2:	4b1d      	ldr	r3, [pc, #116]	; (ca68 <os_init+0x90>)
    c9f4:	e9c3 2300 	strd	r2, r3, [r3]
    os_eventq_init(os_eventq_dflt_get());
    c9f8:	f000 fa86 	bl	cf08 <os_eventq_dflt_get>
    c9fc:	f000 f9ce 	bl	cd9c <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
    ca00:	f000 f9b4 	bl	cd6c <os_dev_reset>

    err = os_arch_os_init();
    ca04:	f7ff fe78 	bl	c6f8 <os_arch_os_init>
    assert(err == OS_OK);
    ca08:	b128      	cbz	r0, ca16 <os_init+0x3e>
    ca0a:	2300      	movs	r3, #0
    ca0c:	461a      	mov	r2, r3
    ca0e:	4619      	mov	r1, r3
    ca10:	4618      	mov	r0, r3
    ca12:	f7ff fef3 	bl	c7fc <__assert_func>

    if (main_fn) {
    ca16:	b194      	cbz	r4, ca3e <os_init+0x66>
        err = os_task_init(&g_os_main_task, "main", os_main, main_fn,
    ca18:	f44f 6380 	mov.w	r3, #1024	; 0x400
    ca1c:	9303      	str	r3, [sp, #12]
    ca1e:	4b13      	ldr	r3, [pc, #76]	; (ca6c <os_init+0x94>)
    ca20:	9302      	str	r3, [sp, #8]
    ca22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ca26:	237f      	movs	r3, #127	; 0x7f
    ca28:	e9cd 3200 	strd	r3, r2, [sp]
    ca2c:	4910      	ldr	r1, [pc, #64]	; (ca70 <os_init+0x98>)
    ca2e:	4a11      	ldr	r2, [pc, #68]	; (ca74 <os_init+0x9c>)
    ca30:	4811      	ldr	r0, [pc, #68]	; (ca78 <os_init+0xa0>)
    ca32:	4623      	mov	r3, r4
    ca34:	f000 fe98 	bl	d768 <os_task_init>
                   OS_MAIN_TASK_PRIO,
                   (OS_MAIN_TASK_TIMER_TICKS == 0) ? OS_WAIT_FOREVER : OS_MAIN_TASK_TIMER_TICKS,
                   g_os_main_stack, OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
    ca38:	b2c0      	uxtb	r0, r0
    ca3a:	2800      	cmp	r0, #0
    ca3c:	d1e5      	bne.n	ca0a <os_init+0x32>
    }

    /* Call bsp related OS initializations */
    hal_bsp_init();
    ca3e:	f008 fd4b 	bl	154d8 <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
    ca42:	2001      	movs	r0, #1
    ca44:	f000 f96c 	bl	cd20 <os_dev_initialize_all>
    assert(err == OS_OK);
    ca48:	b2c0      	uxtb	r0, r0
    ca4a:	2800      	cmp	r0, #0
    ca4c:	d1dd      	bne.n	ca0a <os_init+0x32>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
    ca4e:	2002      	movs	r0, #2
    ca50:	f000 f966 	bl	cd20 <os_dev_initialize_all>
    assert(err == OS_OK);
    ca54:	b2c0      	uxtb	r0, r0
    ca56:	2800      	cmp	r0, #0
    ca58:	d1d7      	bne.n	ca0a <os_init+0x32>
}
    ca5a:	b004      	add	sp, #16
    ca5c:	bd10      	pop	{r4, pc}
    ca5e:	bf00      	nop
    ca60:	200000d8 	.word	0x200000d8
    ca64:	20002d9c 	.word	0x20002d9c
    ca68:	20003bb4 	.word	0x20003bb4
    ca6c:	20001d48 	.word	0x20001d48
    ca70:	00020604 	.word	0x00020604
    ca74:	0000c95d 	.word	0x0000c95d
    ca78:	20002d48 	.word	0x20002d48

0000ca7c <os_start>:

void
os_start(void)
{
    ca7c:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
    ca7e:	f00a f923 	bl	16cc8 <hal_watchdog_enable>

    err = os_arch_os_start();
    ca82:	f7ff fe91 	bl	c7a8 <os_arch_os_start>
    assert(err == OS_OK);
    ca86:	b128      	cbz	r0, ca94 <os_start+0x18>
    ca88:	2300      	movs	r3, #0
    ca8a:	461a      	mov	r2, r3
    ca8c:	4619      	mov	r1, r3
    ca8e:	4618      	mov	r0, r3
    ca90:	f7ff feb4 	bl	c7fc <__assert_func>
#else
    assert(0);
#endif
}
    ca94:	bd08      	pop	{r3, pc}

0000ca96 <os_reboot>:

void
os_reboot(int reason)
{
    sysdown(reason);
    ca96:	f006 be43 	b.w	13720 <sysdown>

0000ca9a <os_system_reset>:
}

void
os_system_reset(void)
{
    ca9a:	b508      	push	{r3, lr}
    /* Tickle watchdog just before re-entering bootloader.  Depending on what
     * the system has been doing lately, the watchdog timer might be close to
     * firing.
     */
    hal_watchdog_tickle();
    ca9c:	f00a f91c 	bl	16cd8 <hal_watchdog_tickle>
    hal_system_reset();
    caa0:	f7fb fb86 	bl	81b0 <hal_system_reset>

0000caa4 <os_pkg_init>:
}

void
os_pkg_init(void)
{
    caa4:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
    caa6:	4b0a      	ldr	r3, [pc, #40]	; (cad0 <os_pkg_init+0x2c>)
    caa8:	781b      	ldrb	r3, [r3, #0]
    caaa:	b92b      	cbnz	r3, cab8 <os_pkg_init+0x14>
    caac:	2300      	movs	r3, #0
    caae:	461a      	mov	r2, r3
    cab0:	4619      	mov	r1, r3
    cab2:	4618      	mov	r0, r3
    cab4:	f7ff fea2 	bl	c7fc <__assert_func>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
    cab8:	2003      	movs	r0, #3
    caba:	f000 f931 	bl	cd20 <os_dev_initialize_all>
    assert(err == OS_OK);
    cabe:	b2c0      	uxtb	r0, r0
    cac0:	2800      	cmp	r0, #0
    cac2:	d1f3      	bne.n	caac <os_pkg_init+0x8>

    os_mempool_module_init();
    cac4:	f000 fabc 	bl	d040 <os_mempool_module_init>
    os_msys_init();
}
    cac8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    os_msys_init();
    cacc:	f000 bb12 	b.w	d0f4 <os_msys_init>
    cad0:	20006af4 	.word	0x20006af4

0000cad4 <os_callout_init>:

struct os_callout_list g_callout_list;

void os_callout_init(struct os_callout *c, struct os_eventq *evq,
                     os_event_fn *ev_cb, void *ev_arg)
{
    cad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cad6:	4604      	mov	r4, r0
    cad8:	460d      	mov	r5, r1
    cada:	4617      	mov	r7, r2
    cadc:	461e      	mov	r6, r3
    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_INIT, (uint32_t)c, (uint32_t)evq);

    memset(c, 0, sizeof(*c));
    cade:	2220      	movs	r2, #32
    cae0:	2100      	movs	r1, #0
    cae2:	f003 fbd2 	bl	1028a <memset>
    c->c_ev.ev_cb = ev_cb;
    c->c_ev.ev_arg = ev_arg;
    cae6:	e9c4 7601 	strd	r7, r6, [r4, #4]
    c->c_evq = evq;
    caea:	6125      	str	r5, [r4, #16]

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_INIT);
}
    caec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000caf0 <os_callout_stop>:

void
os_callout_stop(struct os_callout *c)
{
    caf0:	b538      	push	{r3, r4, r5, lr}
    caf2:	4604      	mov	r4, r0
    os_sr_t sr;

    os_trace_api_u32(OS_TRACE_ID_CALLOUT_STOP, (uint32_t)c);

    OS_ENTER_CRITICAL(sr);
    caf4:	f7ff fdc8 	bl	c688 <os_arch_save_sr>
 * @return 1 if queued, 0 if not queued.
 */
static inline int
os_callout_queued(struct os_callout *c)
{
    return c->c_next.tqe_prev != NULL;
    caf8:	69e2      	ldr	r2, [r4, #28]
    cafa:	4605      	mov	r5, r0

    if (os_callout_queued(c)) {
    cafc:	b132      	cbz	r2, cb0c <os_callout_stop+0x1c>
        TAILQ_REMOVE(&g_callout_list, c, c_next);
    cafe:	69a3      	ldr	r3, [r4, #24]
    cb00:	b173      	cbz	r3, cb20 <os_callout_stop+0x30>
    cb02:	61da      	str	r2, [r3, #28]
    cb04:	69e2      	ldr	r2, [r4, #28]
    cb06:	6013      	str	r3, [r2, #0]
        c->c_next.tqe_prev = NULL;
    cb08:	2300      	movs	r3, #0
    cb0a:	61e3      	str	r3, [r4, #28]
    }

    if (c->c_evq) {
    cb0c:	6920      	ldr	r0, [r4, #16]
    cb0e:	b110      	cbz	r0, cb16 <os_callout_stop+0x26>
        os_eventq_remove(c->c_evq, &c->c_ev);
    cb10:	4621      	mov	r1, r4
    cb12:	f000 f9d9 	bl	cec8 <os_eventq_remove>
    }

    OS_EXIT_CRITICAL(sr);
    cb16:	4628      	mov	r0, r5

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_STOP);
}
    cb18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    OS_EXIT_CRITICAL(sr);
    cb1c:	f7ff bdba 	b.w	c694 <os_arch_restore_sr>
        TAILQ_REMOVE(&g_callout_list, c, c_next);
    cb20:	4901      	ldr	r1, [pc, #4]	; (cb28 <os_callout_stop+0x38>)
    cb22:	604a      	str	r2, [r1, #4]
    cb24:	e7ee      	b.n	cb04 <os_callout_stop+0x14>
    cb26:	bf00      	nop
    cb28:	20002d9c 	.word	0x20002d9c

0000cb2c <os_callout_reset>:
    struct os_callout *entry;
    os_sr_t sr;
    int ret;

    /* Ensure this callout has been initialized. */
    assert(c->c_evq != NULL);
    cb2c:	6903      	ldr	r3, [r0, #16]
{
    cb2e:	b570      	push	{r4, r5, r6, lr}
    cb30:	4604      	mov	r4, r0
    cb32:	460d      	mov	r5, r1
    assert(c->c_evq != NULL);
    cb34:	b923      	cbnz	r3, cb40 <os_callout_reset+0x14>
    cb36:	461a      	mov	r2, r3
    cb38:	4619      	mov	r1, r3
    cb3a:	4618      	mov	r0, r3
    cb3c:	f7ff fe5e 	bl	c7fc <__assert_func>

    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)c, (uint32_t)ticks);

    if (ticks > INT32_MAX) {
    cb40:	2900      	cmp	r1, #0
    cb42:	db1c      	blt.n	cb7e <os_callout_reset+0x52>
        ret = OS_EINVAL;
        goto err;
    }

    OS_ENTER_CRITICAL(sr);
    cb44:	f7ff fda0 	bl	c688 <os_arch_save_sr>
    cb48:	4606      	mov	r6, r0

    os_callout_stop(c);
    cb4a:	4620      	mov	r0, r4
    cb4c:	f7ff ffd0 	bl	caf0 <os_callout_stop>

    if (ticks == 0) {
        ticks = 1;
    }

    c->c_ticks = os_time_get() + ticks;
    cb50:	f000 fef4 	bl	d93c <os_time_get>

    entry = NULL;
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
    cb54:	4911      	ldr	r1, [pc, #68]	; (cb9c <os_callout_reset+0x70>)
    c->c_ticks = os_time_get() + ticks;
    cb56:	2d01      	cmp	r5, #1
    cb58:	bf2c      	ite	cs
    cb5a:	1942      	addcs	r2, r0, r5
    cb5c:	1c42      	addcc	r2, r0, #1
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
    cb5e:	680b      	ldr	r3, [r1, #0]
    c->c_ticks = os_time_get() + ticks;
    cb60:	6162      	str	r2, [r4, #20]
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
    cb62:	b933      	cbnz	r3, cb72 <os_callout_reset+0x46>
    }

    if (entry) {
        TAILQ_INSERT_BEFORE(entry, c, c_next);
    } else {
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
    cb64:	61a3      	str	r3, [r4, #24]
    cb66:	684b      	ldr	r3, [r1, #4]
    cb68:	61e3      	str	r3, [r4, #28]
    cb6a:	601c      	str	r4, [r3, #0]
    cb6c:	3418      	adds	r4, #24
    cb6e:	604c      	str	r4, [r1, #4]
    cb70:	e00e      	b.n	cb90 <os_callout_reset+0x64>
        if (OS_TIME_TICK_LT(c->c_ticks, entry->c_ticks)) {
    cb72:	6958      	ldr	r0, [r3, #20]
    cb74:	1a10      	subs	r0, r2, r0
    cb76:	2800      	cmp	r0, #0
    cb78:	db03      	blt.n	cb82 <os_callout_reset+0x56>
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
    cb7a:	699b      	ldr	r3, [r3, #24]
    cb7c:	e7f1      	b.n	cb62 <os_callout_reset+0x36>
        ret = OS_EINVAL;
    cb7e:	2002      	movs	r0, #2

    ret = OS_OK;

err:
    os_trace_api_ret_u32(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)ret);
    return ret;
    cb80:	e00a      	b.n	cb98 <os_callout_reset+0x6c>
        TAILQ_INSERT_BEFORE(entry, c, c_next);
    cb82:	69da      	ldr	r2, [r3, #28]
    cb84:	e9c4 3206 	strd	r3, r2, [r4, #24]
    cb88:	69da      	ldr	r2, [r3, #28]
    cb8a:	6014      	str	r4, [r2, #0]
    cb8c:	3418      	adds	r4, #24
    cb8e:	61dc      	str	r4, [r3, #28]
    OS_EXIT_CRITICAL(sr);
    cb90:	4630      	mov	r0, r6
    cb92:	f7ff fd7f 	bl	c694 <os_arch_restore_sr>
    ret = OS_OK;
    cb96:	2000      	movs	r0, #0
}
    cb98:	bd70      	pop	{r4, r5, r6, pc}
    cb9a:	bf00      	nop
    cb9c:	20002d9c 	.word	0x20002d9c

0000cba0 <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
    cba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
    cba2:	f000 fecb 	bl	d93c <os_time_get>

    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
    cba6:	4e12      	ldr	r6, [pc, #72]	; (cbf0 <os_callout_tick+0x50>)
    now = os_time_get();
    cba8:	4605      	mov	r5, r0
    cbaa:	2700      	movs	r7, #0
        OS_ENTER_CRITICAL(sr);
    cbac:	f7ff fd6c 	bl	c688 <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
    cbb0:	6834      	ldr	r4, [r6, #0]
        if (c) {
    cbb2:	b154      	cbz	r4, cbca <os_callout_tick+0x2a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
    cbb4:	6963      	ldr	r3, [r4, #20]
    cbb6:	1aeb      	subs	r3, r5, r3
    cbb8:	2b00      	cmp	r3, #0
    cbba:	db11      	blt.n	cbe0 <os_callout_tick+0x40>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
    cbbc:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
    cbc0:	b163      	cbz	r3, cbdc <os_callout_tick+0x3c>
    cbc2:	61da      	str	r2, [r3, #28]
    cbc4:	69e2      	ldr	r2, [r4, #28]
    cbc6:	6013      	str	r3, [r2, #0]
                c->c_next.tqe_prev = NULL;
    cbc8:	61e7      	str	r7, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
    cbca:	f7ff fd63 	bl	c694 <os_arch_restore_sr>

        if (c) {
    cbce:	b16c      	cbz	r4, cbec <os_callout_tick+0x4c>
            if (c->c_evq) {
    cbd0:	6920      	ldr	r0, [r4, #16]
    cbd2:	b138      	cbz	r0, cbe4 <os_callout_tick+0x44>
                os_eventq_put(c->c_evq, &c->c_ev);
    cbd4:	4621      	mov	r1, r4
    cbd6:	f000 f8f0 	bl	cdba <os_eventq_put>
    cbda:	e7e7      	b.n	cbac <os_callout_tick+0xc>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
    cbdc:	6072      	str	r2, [r6, #4]
    cbde:	e7f1      	b.n	cbc4 <os_callout_tick+0x24>
    cbe0:	2400      	movs	r4, #0
    cbe2:	e7f2      	b.n	cbca <os_callout_tick+0x2a>
            } else {
                c->c_ev.ev_cb(&c->c_ev);
    cbe4:	6863      	ldr	r3, [r4, #4]
    cbe6:	4620      	mov	r0, r4
    cbe8:	4798      	blx	r3
    cbea:	e7df      	b.n	cbac <os_callout_tick+0xc>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
    cbec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cbee:	bf00      	nop
    cbf0:	20002d9c 	.word	0x20002d9c

0000cbf4 <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
    cbf4:	b510      	push	{r4, lr}
    cbf6:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
    cbf8:	f7ff fd4f 	bl	c69a <os_arch_in_critical>
    cbfc:	4603      	mov	r3, r0
    cbfe:	b918      	cbnz	r0, cc08 <os_callout_wakeup_ticks+0x14>
    cc00:	4602      	mov	r2, r0
    cc02:	4601      	mov	r1, r0
    cc04:	f7ff fdfa 	bl	c7fc <__assert_func>

    c = TAILQ_FIRST(&g_callout_list);
    cc08:	4b05      	ldr	r3, [pc, #20]	; (cc20 <os_callout_wakeup_ticks+0x2c>)
    cc0a:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
    cc0c:	b123      	cbz	r3, cc18 <os_callout_wakeup_ticks+0x24>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
    cc0e:	6958      	ldr	r0, [r3, #20]
    cc10:	1b00      	subs	r0, r0, r4
            rt = c->c_ticks - now;
        } else {
            rt = 0;     /* callout time is in the past */
    cc12:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
    cc16:	bd10      	pop	{r4, pc}
        rt = OS_TIMEOUT_NEVER;
    cc18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    cc1c:	e7fb      	b.n	cc16 <os_callout_wakeup_ticks+0x22>
    cc1e:	bf00      	nop
    cc20:	20002d9c 	.word	0x20002d9c

0000cc24 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
    cc24:	4601      	mov	r1, r0

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
    cc26:	2000      	movs	r0, #0
    cc28:	f009 bf02 	b.w	16a30 <hal_timer_config>

0000cc2c <os_cputime_timer_init>:
    os_cputime_delay_ticks(ticks);
}

void
os_cputime_timer_init(struct hal_timer *timer, hal_timer_cb fp, void *arg)
{
    cc2c:	b510      	push	{r4, lr}
    cc2e:	4613      	mov	r3, r2
    assert(timer != NULL);
    cc30:	b928      	cbnz	r0, cc3e <os_cputime_timer_init+0x12>
    cc32:	2300      	movs	r3, #0
    cc34:	461a      	mov	r2, r3
    cc36:	4619      	mov	r1, r3
    cc38:	4618      	mov	r0, r3
    cc3a:	f7ff fddf 	bl	c7fc <__assert_func>
    assert(fp != NULL);
    cc3e:	2900      	cmp	r1, #0
    cc40:	d0f7      	beq.n	cc32 <os_cputime_timer_init+0x6>

    hal_timer_set_cb(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), timer, fp, arg);
    cc42:	460a      	mov	r2, r1
}
    cc44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hal_timer_set_cb(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), timer, fp, arg);
    cc48:	4601      	mov	r1, r0
    cc4a:	2000      	movs	r0, #0
    cc4c:	f009 bf78 	b.w	16b40 <hal_timer_set_cb>

0000cc50 <os_cputime_get32>:
uint32_t
os_cputime_get32(void)
{
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
    cc50:	2000      	movs	r0, #0
    cc52:	f009 bf59 	b.w	16b08 <hal_timer_read>

0000cc56 <os_cputime_timer_relative>:
{
    cc56:	b513      	push	{r0, r1, r4, lr}
    assert(timer != NULL);
    cc58:	4603      	mov	r3, r0
{
    cc5a:	460c      	mov	r4, r1
    assert(timer != NULL);
    cc5c:	b918      	cbnz	r0, cc66 <os_cputime_timer_relative+0x10>
    cc5e:	4602      	mov	r2, r0
    cc60:	4601      	mov	r1, r0
    cc62:	f7ff fdcb 	bl	c7fc <__assert_func>
    cc66:	9001      	str	r0, [sp, #4]
    cputime = os_cputime_get32() + os_cputime_usecs_to_ticks(usecs);
    cc68:	f7ff fff2 	bl	cc50 <os_cputime_get32>
    rc = hal_timer_start_at(timer, cputime);
    cc6c:	9b01      	ldr	r3, [sp, #4]
    cc6e:	1901      	adds	r1, r0, r4
    cc70:	4618      	mov	r0, r3
}
    cc72:	b002      	add	sp, #8
    cc74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    rc = hal_timer_start_at(timer, cputime);
    cc78:	f009 bf74 	b.w	16b64 <hal_timer_start_at>

0000cc7c <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
    cc7c:	b510      	push	{r4, lr}
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
    cc7e:	e9d0 3104 	ldrd	r3, r1, [r0, #16]
{
    cc82:	4604      	mov	r4, r0
    rc = dev->od_init(dev, dev->od_init_arg);
    cc84:	4798      	blx	r3
    if (rc != 0) {
    cc86:	7ee3      	ldrb	r3, [r4, #27]
    cc88:	b120      	cbz	r0, cc94 <os_dev_initialize+0x18>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
    cc8a:	f013 0f08 	tst.w	r3, #8
    cc8e:	bf08      	it	eq
    cc90:	2000      	moveq	r0, #0
err:
    return rc;
}
    cc92:	bd10      	pop	{r4, pc}
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    cc94:	f043 0301 	orr.w	r3, r3, #1
    cc98:	76e3      	strb	r3, [r4, #27]
    cc9a:	e7fa      	b.n	cc92 <os_dev_initialize+0x16>

0000cc9c <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
    cc9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dev->od_priority = priority;
    cca0:	7643      	strb	r3, [r0, #25]
{
    cca2:	4699      	mov	r9, r3
    dev->od_init = od_init;
    cca4:	9b08      	ldr	r3, [sp, #32]
    cca6:	6103      	str	r3, [r0, #16]
    dev->od_open_ref = 0;
    cca8:	2500      	movs	r5, #0
    dev->od_init_arg = arg;
    ccaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    dev->od_name = name;
    ccac:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
    ccae:	7602      	strb	r2, [r0, #24]
{
    ccb0:	4690      	mov	r8, r2
    dev->od_open_ref = 0;
    ccb2:	8345      	strh	r5, [r0, #26]
    dev->od_init_arg = arg;
    ccb4:	6143      	str	r3, [r0, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
    ccb6:	2210      	movs	r2, #16
    ccb8:	4629      	mov	r1, r5
{
    ccba:	4604      	mov	r4, r0
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
    ccbc:	f003 fae5 	bl	1028a <memset>
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
    ccc0:	4815      	ldr	r0, [pc, #84]	; (cd18 <os_dev_create+0x7c>)
    ccc2:	6807      	ldr	r7, [r0, #0]
    ccc4:	b92f      	cbnz	r7, ccd2 <os_dev_create+0x36>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    ccc6:	4623      	mov	r3, r4
    ccc8:	f843 7f20 	str.w	r7, [r3, #32]!
    cccc:	6043      	str	r3, [r0, #4]
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    ccce:	6004      	str	r4, [r0, #0]
    ccd0:	e011      	b.n	ccf6 <os_dev_create+0x5a>
    ccd2:	463e      	mov	r6, r7
        if (dev->od_stage < cur_dev->od_stage ||
    ccd4:	7e33      	ldrb	r3, [r6, #24]
    ccd6:	4598      	cmp	r8, r3
    ccd8:	d317      	bcc.n	cd0a <os_dev_create+0x6e>
    ccda:	d102      	bne.n	cce2 <os_dev_create+0x46>
            ((dev->od_stage == cur_dev->od_stage) &&
    ccdc:	7e73      	ldrb	r3, [r6, #25]
    ccde:	454b      	cmp	r3, r9
    cce0:	d813      	bhi.n	cd0a <os_dev_create+0x6e>
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
    cce2:	6a33      	ldr	r3, [r6, #32]
    cce4:	4635      	mov	r5, r6
    cce6:	b973      	cbnz	r3, cd06 <os_dev_create+0x6a>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
    cce8:	6a2b      	ldr	r3, [r5, #32]
    ccea:	6223      	str	r3, [r4, #32]
    ccec:	b913      	cbnz	r3, ccf4 <os_dev_create+0x58>
    ccee:	f104 0320 	add.w	r3, r4, #32
    ccf2:	6043      	str	r3, [r0, #4]
    ccf4:	622c      	str	r4, [r5, #32]
    rc = os_dev_add(dev);
    if (rc != 0) {
        goto err;
    }

    if (g_os_started) {
    ccf6:	4b09      	ldr	r3, [pc, #36]	; (cd1c <os_dev_create+0x80>)
    ccf8:	6818      	ldr	r0, [r3, #0]
    ccfa:	b150      	cbz	r0, cd12 <os_dev_create+0x76>
        rc = os_dev_initialize(dev);
    ccfc:	4620      	mov	r0, r4
    }
err:
    return (rc);
}
    ccfe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        rc = os_dev_initialize(dev);
    cd02:	f7ff bfbb 	b.w	cc7c <os_dev_initialize>
    cd06:	461e      	mov	r6, r3
    cd08:	e7e4      	b.n	ccd4 <os_dev_create+0x38>
    if (prev_dev) {
    cd0a:	2d00      	cmp	r5, #0
    cd0c:	d1ec      	bne.n	cce8 <os_dev_create+0x4c>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    cd0e:	6227      	str	r7, [r4, #32]
    cd10:	e7dd      	b.n	ccce <os_dev_create+0x32>
}
    cd12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cd16:	bf00      	nop
    cd18:	20002da4 	.word	0x20002da4
    cd1c:	20002d98 	.word	0x20002d98

0000cd20 <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
    cd20:	b538      	push	{r3, r4, r5, lr}
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    cd22:	4b08      	ldr	r3, [pc, #32]	; (cd44 <os_dev_initialize_all+0x24>)
    cd24:	681c      	ldr	r4, [r3, #0]
{
    cd26:	4605      	mov	r5, r0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    cd28:	b90c      	cbnz	r4, cd2e <os_dev_initialize_all+0xe>
    cd2a:	4620      	mov	r0, r4
                break;
            }
        }
    }

    return (rc);
    cd2c:	e009      	b.n	cd42 <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
    cd2e:	7e23      	ldrb	r3, [r4, #24]
    cd30:	42ab      	cmp	r3, r5
    cd32:	d001      	beq.n	cd38 <os_dev_initialize_all+0x18>
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    cd34:	6a24      	ldr	r4, [r4, #32]
    cd36:	e7f7      	b.n	cd28 <os_dev_initialize_all+0x8>
            rc = os_dev_initialize(dev);
    cd38:	4620      	mov	r0, r4
    cd3a:	f7ff ff9f 	bl	cc7c <os_dev_initialize>
            if (rc) {
    cd3e:	2800      	cmp	r0, #0
    cd40:	d0f8      	beq.n	cd34 <os_dev_initialize_all+0x14>
}
    cd42:	bd38      	pop	{r3, r4, r5, pc}
    cd44:	20002da4 	.word	0x20002da4

0000cd48 <os_dev_lookup>:
    return (rc);
}

struct os_dev *
os_dev_lookup(const char *name)
{
    cd48:	b538      	push	{r3, r4, r5, lr}
    struct os_dev *dev;

    dev = NULL;
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    cd4a:	4b07      	ldr	r3, [pc, #28]	; (cd68 <os_dev_lookup+0x20>)
    cd4c:	681c      	ldr	r4, [r3, #0]
{
    cd4e:	4605      	mov	r5, r0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    cd50:	b90c      	cbnz	r4, cd56 <os_dev_lookup+0xe>
        if (!strcmp(dev->od_name, name)) {
            break;
        }
    }
    return (dev);
}
    cd52:	4620      	mov	r0, r4
    cd54:	bd38      	pop	{r3, r4, r5, pc}
        if (!strcmp(dev->od_name, name)) {
    cd56:	69e0      	ldr	r0, [r4, #28]
    cd58:	4629      	mov	r1, r5
    cd5a:	f003 fab1 	bl	102c0 <strcmp>
    cd5e:	2800      	cmp	r0, #0
    cd60:	d0f7      	beq.n	cd52 <os_dev_lookup+0xa>
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    cd62:	6a24      	ldr	r4, [r4, #32]
    cd64:	e7f4      	b.n	cd50 <os_dev_lookup+0x8>
    cd66:	bf00      	nop
    cd68:	20002da4 	.word	0x20002da4

0000cd6c <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
    cd6c:	4b02      	ldr	r3, [pc, #8]	; (cd78 <os_dev_reset+0xc>)
    cd6e:	2200      	movs	r2, #0
    cd70:	e9c3 2300 	strd	r2, r3, [r3]
}
    cd74:	4770      	bx	lr
    cd76:	bf00      	nop
    cd78:	20002da4 	.word	0x20002da4

0000cd7c <os_dev_walk>:
void
os_dev_walk(int (*walk_func)(struct os_dev *, void *), void *arg)
{
    struct os_dev *dev;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    cd7c:	4b06      	ldr	r3, [pc, #24]	; (cd98 <os_dev_walk+0x1c>)
{
    cd7e:	b570      	push	{r4, r5, r6, lr}
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    cd80:	681c      	ldr	r4, [r3, #0]
{
    cd82:	4605      	mov	r5, r0
    cd84:	460e      	mov	r6, r1
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    cd86:	b904      	cbnz	r4, cd8a <os_dev_walk+0xe>
        if (walk_func(dev, arg)) {
            break;
        }
    }
}
    cd88:	bd70      	pop	{r4, r5, r6, pc}
        if (walk_func(dev, arg)) {
    cd8a:	4631      	mov	r1, r6
    cd8c:	4620      	mov	r0, r4
    cd8e:	47a8      	blx	r5
    cd90:	2800      	cmp	r0, #0
    cd92:	d1f9      	bne.n	cd88 <os_dev_walk+0xc>
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    cd94:	6a24      	ldr	r4, [r4, #32]
    cd96:	e7f6      	b.n	cd86 <os_dev_walk+0xa>
    cd98:	20002da4 	.word	0x20002da4

0000cd9c <os_eventq_init>:

static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    cd9c:	b510      	push	{r4, lr}
    memset(evq, 0, sizeof(*evq));
    cd9e:	2210      	movs	r2, #16
{
    cda0:	4604      	mov	r4, r0
    memset(evq, 0, sizeof(*evq));
    cda2:	2100      	movs	r1, #0
    cda4:	f003 fa71 	bl	1028a <memset>
    STAILQ_INIT(&evq->evq_list);
    cda8:	f104 0308 	add.w	r3, r4, #8
    cdac:	60e3      	str	r3, [r4, #12]
}
    cdae:	bd10      	pop	{r4, pc}

0000cdb0 <os_eventq_inited>:

int
os_eventq_inited(const struct os_eventq *evq)
{
    return evq->evq_list.stqh_last != NULL;
    cdb0:	68c0      	ldr	r0, [r0, #12]
}
    cdb2:	3800      	subs	r0, #0
    cdb4:	bf18      	it	ne
    cdb6:	2001      	movne	r0, #1
    cdb8:	4770      	bx	lr

0000cdba <os_eventq_put>:

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
    cdba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cdbc:	460c      	mov	r4, r1
    int resched;
    os_sr_t sr;

    assert(evq != NULL && os_eventq_inited(evq));
    cdbe:	4605      	mov	r5, r0
    cdc0:	b108      	cbz	r0, cdc6 <os_eventq_put+0xc>
    cdc2:	68c3      	ldr	r3, [r0, #12]
    cdc4:	b92b      	cbnz	r3, cdd2 <os_eventq_put+0x18>
    cdc6:	2300      	movs	r3, #0
    cdc8:	461a      	mov	r2, r3
    cdca:	4619      	mov	r1, r3
    cdcc:	4618      	mov	r0, r3
    cdce:	f7ff fd15 	bl	c7fc <__assert_func>

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
    cdd2:	f7ff fc59 	bl	c688 <os_arch_save_sr>

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
    cdd6:	7822      	ldrb	r2, [r4, #0]
    OS_ENTER_CRITICAL(sr);
    cdd8:	4606      	mov	r6, r0
    if (OS_EVENT_QUEUED(ev)) {
    cdda:	b11a      	cbz	r2, cde4 <os_eventq_put+0x2a>
    if (resched) {
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
    cddc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        OS_EXIT_CRITICAL(sr);
    cde0:	f7ff bc58 	b.w	c694 <os_arch_restore_sr>
    ev->ev_queued = 1;
    cde4:	2701      	movs	r7, #1
    cde6:	7027      	strb	r7, [r4, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
    cde8:	68eb      	ldr	r3, [r5, #12]
    if (evq->evq_task) {
    cdea:	6868      	ldr	r0, [r5, #4]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
    cdec:	60e2      	str	r2, [r4, #12]
    cdee:	601c      	str	r4, [r3, #0]
    cdf0:	340c      	adds	r4, #12
    cdf2:	60ec      	str	r4, [r5, #12]
    if (evq->evq_task) {
    cdf4:	b188      	cbz	r0, ce1a <os_eventq_put+0x60>
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
    cdf6:	7b01      	ldrb	r1, [r0, #12]
    cdf8:	2902      	cmp	r1, #2
    cdfa:	d10c      	bne.n	ce16 <os_eventq_put+0x5c>
            os_sched_wakeup(evq->evq_task);
    cdfc:	f000 fba0 	bl	d540 <os_sched_wakeup>
        evq->evq_task = NULL;
    ce00:	2300      	movs	r3, #0
    ce02:	606b      	str	r3, [r5, #4]
    OS_EXIT_CRITICAL(sr);
    ce04:	4630      	mov	r0, r6
    ce06:	f7ff fc45 	bl	c694 <os_arch_restore_sr>
    if (resched) {
    ce0a:	b147      	cbz	r7, ce1e <os_eventq_put+0x64>
}
    ce0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        os_sched(NULL);
    ce10:	2000      	movs	r0, #0
    ce12:	f000 bb13 	b.w	d43c <os_sched>
    resched = 0;
    ce16:	4617      	mov	r7, r2
    ce18:	e7f2      	b.n	ce00 <os_eventq_put+0x46>
    ce1a:	4607      	mov	r7, r0
    ce1c:	e7f2      	b.n	ce04 <os_eventq_put+0x4a>
}
    ce1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000ce20 <os_eventq_get_no_wait>:
{
    struct os_event *ev;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET_NO_WAIT, (uint32_t)evq);

    ev = STAILQ_FIRST(&evq->evq_list);
    ce20:	6883      	ldr	r3, [r0, #8]
    if (ev) {
    ce22:	b13b      	cbz	r3, ce34 <os_eventq_get_no_wait+0x14>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    ce24:	68da      	ldr	r2, [r3, #12]
    ce26:	6082      	str	r2, [r0, #8]
    ce28:	b912      	cbnz	r2, ce30 <os_eventq_get_no_wait+0x10>
    ce2a:	f100 0208 	add.w	r2, r0, #8
    ce2e:	60c2      	str	r2, [r0, #12]
        ev->ev_queued = 0;
    ce30:	2200      	movs	r2, #0
    ce32:	701a      	strb	r2, [r3, #0]
    }

    os_trace_api_ret_u32(OS_TRACE_ID_EVENTQ_GET_NO_WAIT, (uint32_t)ev);

    return ev;
}
    ce34:	4618      	mov	r0, r3
    ce36:	4770      	bx	lr

0000ce38 <os_eventq_get>:

struct os_event *
os_eventq_get(struct os_eventq *evq)
{
    ce38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ce3a:	4604      	mov	r4, r0
    os_sr_t sr;
    struct os_task *t;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET, (uint32_t)evq);

    t = os_sched_get_current_task();
    ce3c:	f000 faf2 	bl	d424 <os_sched_get_current_task>
    if (evq->evq_owner != t) {
    ce40:	6823      	ldr	r3, [r4, #0]
    ce42:	4283      	cmp	r3, r0
    t = os_sched_get_current_task();
    ce44:	4605      	mov	r5, r0
    if (evq->evq_owner != t) {
    ce46:	d001      	beq.n	ce4c <os_eventq_get+0x14>
        if (evq->evq_owner == NULL) {
    ce48:	b9b3      	cbnz	r3, ce78 <os_eventq_get+0x40>
            evq->evq_owner = t;
    ce4a:	6020      	str	r0, [r4, #0]
             * by another.
             */
            assert(0);
        }
    }
    OS_ENTER_CRITICAL(sr);
    ce4c:	f7ff fc1c 	bl	c688 <os_arch_save_sr>
    ce50:	4606      	mov	r6, r0
pull_one:
    ev = STAILQ_FIRST(&evq->evq_list);
    ce52:	68a7      	ldr	r7, [r4, #8]
    if (ev) {
    ce54:	b1b7      	cbz	r7, ce84 <os_eventq_get+0x4c>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    ce56:	68fb      	ldr	r3, [r7, #12]
    ce58:	60a3      	str	r3, [r4, #8]
    ce5a:	b913      	cbnz	r3, ce62 <os_eventq_get+0x2a>
    ce5c:	f104 0308 	add.w	r3, r4, #8
    ce60:	60e3      	str	r3, [r4, #12]
        ev->ev_queued = 0;
    ce62:	2300      	movs	r3, #0
    ce64:	703b      	strb	r3, [r7, #0]
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    ce66:	7b6b      	ldrb	r3, [r5, #13]
    ce68:	f023 0308 	bic.w	r3, r3, #8

        OS_ENTER_CRITICAL(sr);
        evq->evq_task = NULL;
        goto pull_one;
    }
    OS_EXIT_CRITICAL(sr);
    ce6c:	4630      	mov	r0, r6
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    ce6e:	736b      	strb	r3, [r5, #13]
    OS_EXIT_CRITICAL(sr);
    ce70:	f7ff fc10 	bl	c694 <os_arch_restore_sr>
#if MYNEWT_VAL(OS_EVENTQ_DEBUG)
    evq->evq_prev = ev;
#endif

    return (ev);
}
    ce74:	4638      	mov	r0, r7
    ce76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            assert(0);
    ce78:	2300      	movs	r3, #0
    ce7a:	461a      	mov	r2, r3
    ce7c:	4619      	mov	r1, r3
    ce7e:	4618      	mov	r0, r3
    ce80:	f7ff fcbc 	bl	c7fc <__assert_func>
        os_sched_sleep(evq->evq_task, OS_TIMEOUT_NEVER);
    ce84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
        evq->evq_task = t;
    ce88:	6065      	str	r5, [r4, #4]
        os_sched_sleep(evq->evq_task, OS_TIMEOUT_NEVER);
    ce8a:	4628      	mov	r0, r5
    ce8c:	f000 fae8 	bl	d460 <os_sched_sleep>
        t->t_flags |= OS_TASK_FLAG_EVQ_WAIT;
    ce90:	7b6b      	ldrb	r3, [r5, #13]
    ce92:	f043 0308 	orr.w	r3, r3, #8
    ce96:	736b      	strb	r3, [r5, #13]
        OS_EXIT_CRITICAL(sr);
    ce98:	4630      	mov	r0, r6
    ce9a:	f7ff fbfb 	bl	c694 <os_arch_restore_sr>
        os_sched(NULL);
    ce9e:	4638      	mov	r0, r7
    cea0:	f000 facc 	bl	d43c <os_sched>
        OS_ENTER_CRITICAL(sr);
    cea4:	f7ff fbf0 	bl	c688 <os_arch_save_sr>
        evq->evq_task = NULL;
    cea8:	6067      	str	r7, [r4, #4]
        OS_ENTER_CRITICAL(sr);
    ceaa:	4606      	mov	r6, r0
        goto pull_one;
    ceac:	e7d1      	b.n	ce52 <os_eventq_get+0x1a>

0000ceae <os_eventq_run>:
}
#endif

void
os_eventq_run(struct os_eventq *evq)
{
    ceae:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    struct os_eventq_mon *mon;
    uint32_t ticks;
#endif

    ev = os_eventq_get(evq);
    ceb0:	f7ff ffc2 	bl	ce38 <os_eventq_get>
    assert(ev->ev_cb != NULL);
    ceb4:	6843      	ldr	r3, [r0, #4]
    ceb6:	b923      	cbnz	r3, cec2 <os_eventq_run+0x14>
    ceb8:	461a      	mov	r2, r3
    ceba:	4619      	mov	r1, r3
    cebc:	4618      	mov	r0, r3
    cebe:	f7ff fc9d 	bl	c7fc <__assert_func>
        if (ticks > mon->em_max) {
            mon->em_max = ticks;
        }
    }
#endif
}
    cec2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ev->ev_cb(ev);
    cec6:	4718      	bx	r3

0000cec8 <os_eventq_remove>:
    return (ev);
}

void
os_eventq_remove(struct os_eventq *evq, struct os_event *ev)
{
    cec8:	b538      	push	{r3, r4, r5, lr}
    ceca:	460c      	mov	r4, r1
    cecc:	4605      	mov	r5, r0
    os_sr_t sr;

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_REMOVE, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
    cece:	f7ff fbdb 	bl	c688 <os_arch_save_sr>
    if (OS_EVENT_QUEUED(ev)) {
    ced2:	7823      	ldrb	r3, [r4, #0]
    ced4:	b143      	cbz	r3, cee8 <os_eventq_remove+0x20>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    ced6:	68ab      	ldr	r3, [r5, #8]
    ced8:	68e1      	ldr	r1, [r4, #12]
    ceda:	42a3      	cmp	r3, r4
    cedc:	d10a      	bne.n	cef4 <os_eventq_remove+0x2c>
    cede:	60a9      	str	r1, [r5, #8]
    cee0:	b911      	cbnz	r1, cee8 <os_eventq_remove+0x20>
    cee2:	f105 0308 	add.w	r3, r5, #8
    cee6:	60eb      	str	r3, [r5, #12]
    }
    ev->ev_queued = 0;
    cee8:	2300      	movs	r3, #0
    ceea:	7023      	strb	r3, [r4, #0]
    OS_EXIT_CRITICAL(sr);

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_REMOVE);
}
    ceec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    OS_EXIT_CRITICAL(sr);
    cef0:	f7ff bbd0 	b.w	c694 <os_arch_restore_sr>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    cef4:	461a      	mov	r2, r3
    cef6:	68db      	ldr	r3, [r3, #12]
    cef8:	42a3      	cmp	r3, r4
    cefa:	d1fb      	bne.n	cef4 <os_eventq_remove+0x2c>
    cefc:	60d1      	str	r1, [r2, #12]
    cefe:	2900      	cmp	r1, #0
    cf00:	d1f2      	bne.n	cee8 <os_eventq_remove+0x20>
    cf02:	320c      	adds	r2, #12
    cf04:	60ea      	str	r2, [r5, #12]
    cf06:	e7ef      	b.n	cee8 <os_eventq_remove+0x20>

0000cf08 <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
    cf08:	4800      	ldr	r0, [pc, #0]	; (cf0c <os_eventq_dflt_get+0x4>)
    cf0a:	4770      	bx	lr
    cf0c:	20002dac 	.word	0x20002dac

0000cf10 <os_mempool_init_internal>:

static os_error_t
os_mempool_init_internal(struct os_mempool *mp, uint16_t blocks,
                         uint32_t block_size, void *membuf, char *name,
                         uint8_t flags)
{
    cf10:	b570      	push	{r4, r5, r6, lr}
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
    cf12:	b110      	cbz	r0, cf1a <os_mempool_init_internal+0xa>
    cf14:	b10a      	cbz	r2, cf1a <os_mempool_init_internal+0xa>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
    cf16:	b913      	cbnz	r3, cf1e <os_mempool_init_internal+0xe>
    cf18:	b119      	cbz	r1, cf22 <os_mempool_init_internal+0x12>
        return OS_INVALID_PARM;
    cf1a:	2003      	movs	r0, #3
    cf1c:	e022      	b.n	cf64 <os_mempool_init_internal+0x54>

    if (membuf != NULL) {
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
    cf1e:	079d      	lsls	r5, r3, #30
    cf20:	d126      	bne.n	cf70 <os_mempool_init_internal+0x60>

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
    mp->mp_num_free = blocks;
    mp->mp_min_free = blocks;
    mp->mp_flags = flags;
    cf22:	f89d 4014 	ldrb.w	r4, [sp, #20]
    cf26:	7284      	strb	r4, [r0, #10]
    mp->mp_num_blocks = blocks;
    mp->mp_membuf_addr = (uint32_t)membuf;
    mp->name = name;
    cf28:	9c04      	ldr	r4, [sp, #16]
    mp->mp_block_size = block_size;
    cf2a:	6002      	str	r2, [r0, #0]
    SLIST_FIRST(mp) = membuf;
    cf2c:	e9c0 3405 	strd	r3, r4, [r0, #20]
    mp->mp_num_free = blocks;
    cf30:	80c1      	strh	r1, [r0, #6]
    mp->mp_min_free = blocks;
    cf32:	8101      	strh	r1, [r0, #8]
    mp->mp_num_blocks = blocks;
    cf34:	8081      	strh	r1, [r0, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
    cf36:	60c3      	str	r3, [r0, #12]

    if (blocks > 0) {
    cf38:	b161      	cbz	r1, cf54 <os_mempool_init_internal+0x44>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
    cf3a:	0794      	lsls	r4, r2, #30
    cf3c:	bf1c      	itt	ne
    cf3e:	f022 0203 	bicne.w	r2, r2, #3
    cf42:	3204      	addne	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
    cf44:	461d      	mov	r5, r3
    cf46:	2401      	movs	r4, #1
    cf48:	428c      	cmp	r4, r1
    cf4a:	db0c      	blt.n	cf66 <os_mempool_init_internal+0x56>
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
    cf4c:	3901      	subs	r1, #1
    cf4e:	434a      	muls	r2, r1
    cf50:	2100      	movs	r1, #0
    cf52:	5099      	str	r1, [r3, r2]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
    cf54:	4a07      	ldr	r2, [pc, #28]	; (cf74 <os_mempool_init_internal+0x64>)
    cf56:	6851      	ldr	r1, [r2, #4]
    cf58:	2300      	movs	r3, #0
    cf5a:	6103      	str	r3, [r0, #16]
    cf5c:	6008      	str	r0, [r1, #0]
    cf5e:	3010      	adds	r0, #16
    cf60:	6050      	str	r0, [r2, #4]
    cf62:	4618      	mov	r0, r3

    return OS_OK;
}
    cf64:	bd70      	pop	{r4, r5, r6, pc}
            block_addr += true_block_size;
    cf66:	18ae      	adds	r6, r5, r2
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
    cf68:	602e      	str	r6, [r5, #0]
        for (i = 1; i < blocks; i++) {
    cf6a:	3401      	adds	r4, #1
            block_addr += true_block_size;
    cf6c:	4635      	mov	r5, r6
    cf6e:	e7eb      	b.n	cf48 <os_mempool_init_internal+0x38>
            return OS_MEM_NOT_ALIGNED;
    cf70:	2004      	movs	r0, #4
    cf72:	e7f7      	b.n	cf64 <os_mempool_init_internal+0x54>
    cf74:	20002dbc 	.word	0x20002dbc

0000cf78 <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
    cf78:	b513      	push	{r0, r1, r4, lr}
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
    cf7a:	2400      	movs	r4, #0
    cf7c:	9401      	str	r4, [sp, #4]
    cf7e:	9c04      	ldr	r4, [sp, #16]
    cf80:	9400      	str	r4, [sp, #0]
    cf82:	f7ff ffc5 	bl	cf10 <os_mempool_init_internal>
}
    cf86:	b002      	add	sp, #8
    cf88:	bd10      	pop	{r4, pc}

0000cf8a <os_memblock_get>:
    return 1;
}

void *
os_memblock_get(struct os_mempool *mp)
{
    cf8a:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)mp);

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
    cf8c:	4604      	mov	r4, r0
    cf8e:	b180      	cbz	r0, cfb2 <os_memblock_get+0x28>
        OS_ENTER_CRITICAL(sr);
    cf90:	f7ff fb7a 	bl	c688 <os_arch_save_sr>
        /* Check for any free */
        if (mp->mp_num_free) {
    cf94:	88e3      	ldrh	r3, [r4, #6]
    cf96:	b173      	cbz	r3, cfb6 <os_memblock_get+0x2c>
            /* Get a free block */
            block = SLIST_FIRST(mp);
    cf98:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
    cf9a:	682a      	ldr	r2, [r5, #0]
    cf9c:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
    cf9e:	3b01      	subs	r3, #1
            if (mp->mp_min_free > mp->mp_num_free) {
    cfa0:	8922      	ldrh	r2, [r4, #8]
            mp->mp_num_free--;
    cfa2:	b29b      	uxth	r3, r3
            if (mp->mp_min_free > mp->mp_num_free) {
    cfa4:	429a      	cmp	r2, r3
            mp->mp_num_free--;
    cfa6:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
    cfa8:	d900      	bls.n	cfac <os_memblock_get+0x22>
                mp->mp_min_free = mp->mp_num_free;
    cfaa:	8123      	strh	r3, [r4, #8]
            }
        }
        OS_EXIT_CRITICAL(sr);
    cfac:	f7ff fb72 	bl	c694 <os_arch_restore_sr>

        if (block) {
    cfb0:	462c      	mov	r4, r5
    }

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)block);

    return (void *)block;
}
    cfb2:	4620      	mov	r0, r4
    cfb4:	bd38      	pop	{r3, r4, r5, pc}
    block = NULL;
    cfb6:	461d      	mov	r5, r3
    cfb8:	e7f8      	b.n	cfac <os_memblock_get+0x22>

0000cfba <os_memblock_put_from_cb>:

os_error_t
os_memblock_put_from_cb(struct os_mempool *mp, void *block_addr)
{
    cfba:	b538      	push	{r3, r4, r5, lr}
    cfbc:	4604      	mov	r4, r0
    cfbe:	460d      	mov	r5, r1

    os_mempool_guard_check(mp, block_addr);
    os_mempool_poison(mp, block_addr);

    block = (struct os_memblock *)block_addr;
    OS_ENTER_CRITICAL(sr);
    cfc0:	f7ff fb62 	bl	c688 <os_arch_save_sr>

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
    cfc4:	6963      	ldr	r3, [r4, #20]
    cfc6:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
    cfc8:	88e3      	ldrh	r3, [r4, #6]
    SLIST_FIRST(mp) = block;
    cfca:	6165      	str	r5, [r4, #20]
    mp->mp_num_free++;
    cfcc:	3301      	adds	r3, #1
    cfce:	80e3      	strh	r3, [r4, #6]

    OS_EXIT_CRITICAL(sr);
    cfd0:	f7ff fb60 	bl	c694 <os_arch_restore_sr>

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT_FROM_CB, (uint32_t)OS_OK);

    return OS_OK;
}
    cfd4:	2000      	movs	r0, #0
    cfd6:	bd38      	pop	{r3, r4, r5, pc}

0000cfd8 <os_memblock_put>:

os_error_t
os_memblock_put(struct os_mempool *mp, void *block_addr)
{
    cfd8:	b410      	push	{r4}
    cfda:	460a      	mov	r2, r1

    os_trace_api_u32x2(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)mp,
                       (uint32_t)block_addr);

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
    cfdc:	4603      	mov	r3, r0
    cfde:	b180      	cbz	r0, d002 <os_memblock_put+0x2a>
    cfe0:	b179      	cbz	r1, d002 <os_memblock_put+0x2a>
    }
#endif
    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & OS_MEMPOOL_F_EXT) {
    cfe2:	7a84      	ldrb	r4, [r0, #10]
    cfe4:	07e4      	lsls	r4, r4, #31
    cfe6:	d506      	bpl.n	cff6 <os_memblock_put+0x1e>
        mpe = (struct os_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
    cfe8:	69c4      	ldr	r4, [r0, #28]
    cfea:	b124      	cbz	r4, cff6 <os_memblock_put+0x1e>
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
    cfec:	4623      	mov	r3, r4
    cfee:	6a02      	ldr	r2, [r0, #32]
    ret = os_memblock_put_from_cb(mp, block_addr);

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)ret);
    return ret;
}
    cff0:	f85d 4b04 	ldr.w	r4, [sp], #4
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
    cff4:	4718      	bx	r3
}
    cff6:	f85d 4b04 	ldr.w	r4, [sp], #4
    ret = os_memblock_put_from_cb(mp, block_addr);
    cffa:	4611      	mov	r1, r2
    cffc:	4618      	mov	r0, r3
    cffe:	f7ff bfdc 	b.w	cfba <os_memblock_put_from_cb>
}
    d002:	2003      	movs	r0, #3
    d004:	f85d 4b04 	ldr.w	r4, [sp], #4
    d008:	4770      	bx	lr
	...

0000d00c <os_mempool_info_get_next>:

struct os_mempool *
os_mempool_info_get_next(struct os_mempool *mp, struct os_mempool_info *omi)
{
    d00c:	b510      	push	{r4, lr}
    d00e:	460b      	mov	r3, r1
    struct os_mempool *cur;

    if (mp == NULL) {
    d010:	b990      	cbnz	r0, d038 <os_mempool_info_get_next+0x2c>
        cur = STAILQ_FIRST(&g_os_mempool_list);
    d012:	4a0a      	ldr	r2, [pc, #40]	; (d03c <os_mempool_info_get_next+0x30>)
    d014:	6814      	ldr	r4, [r2, #0]
    } else {
        cur = STAILQ_NEXT(mp, mp_list);
    }

    if (cur == NULL) {
    d016:	b16c      	cbz	r4, d034 <os_mempool_info_get_next+0x28>
        return (NULL);
    }

    omi->omi_block_size = cur->mp_block_size;
    d018:	6822      	ldr	r2, [r4, #0]
    d01a:	601a      	str	r2, [r3, #0]
    omi->omi_num_blocks = cur->mp_num_blocks;
    d01c:	88a2      	ldrh	r2, [r4, #4]
    d01e:	605a      	str	r2, [r3, #4]
    omi->omi_num_free = cur->mp_num_free;
    d020:	88e2      	ldrh	r2, [r4, #6]
    d022:	609a      	str	r2, [r3, #8]
    omi->omi_min_free = cur->mp_min_free;
    d024:	8922      	ldrh	r2, [r4, #8]
    d026:	60da      	str	r2, [r3, #12]
    strncpy(omi->omi_name, cur->name, sizeof(omi->omi_name));
    d028:	69a1      	ldr	r1, [r4, #24]
    d02a:	2220      	movs	r2, #32
    d02c:	f103 0010 	add.w	r0, r3, #16
    d030:	f003 f951 	bl	102d6 <strncpy>

    return (cur);
}
    d034:	4620      	mov	r0, r4
    d036:	bd10      	pop	{r4, pc}
        cur = STAILQ_NEXT(mp, mp_list);
    d038:	6904      	ldr	r4, [r0, #16]
    d03a:	e7ec      	b.n	d016 <os_mempool_info_get_next+0xa>
    d03c:	20002dbc 	.word	0x20002dbc

0000d040 <os_mempool_module_init>:

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
    d040:	4b02      	ldr	r3, [pc, #8]	; (d04c <os_mempool_module_init+0xc>)
    d042:	2200      	movs	r2, #0
    d044:	e9c3 2300 	strd	r2, r3, [r3]
}
    d048:	4770      	bx	lr
    d04a:	bf00      	nop
    d04c:	20002dbc 	.word	0x20002dbc

0000d050 <os_msys_find_pool>:
os_msys_find_pool(uint16_t dsize)
{
    struct os_mbuf_pool *pool;

    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    d050:	4907      	ldr	r1, [pc, #28]	; (d070 <os_msys_find_pool+0x20>)
{
    d052:	b510      	push	{r4, lr}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    d054:	680a      	ldr	r2, [r1, #0]
{
    d056:	4603      	mov	r3, r0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    d058:	4610      	mov	r0, r2
    d05a:	b918      	cbnz	r0, d064 <os_msys_find_pool+0x14>
            break;
        }
    }

    if (!pool) {
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    d05c:	b10a      	cbz	r2, d062 <os_msys_find_pool+0x12>
    d05e:	6848      	ldr	r0, [r1, #4]
    d060:	3808      	subs	r0, #8
    }

    return (pool);
}
    d062:	bd10      	pop	{r4, pc}
        if (dsize <= pool->omp_databuf_len) {
    d064:	8804      	ldrh	r4, [r0, #0]
    d066:	429c      	cmp	r4, r3
    d068:	d2fb      	bcs.n	d062 <os_msys_find_pool+0x12>
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    d06a:	6880      	ldr	r0, [r0, #8]
    d06c:	e7f5      	b.n	d05a <os_msys_find_pool+0xa>
    d06e:	bf00      	nop
    d070:	20001338 	.word	0x20001338

0000d074 <os_msys_register>:
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    d074:	4a0e      	ldr	r2, [pc, #56]	; (d0b0 <os_msys_register+0x3c>)
{
    d076:	b570      	push	{r4, r5, r6, lr}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    d078:	6814      	ldr	r4, [r2, #0]
    prev = NULL;
    d07a:	2100      	movs	r1, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    d07c:	4623      	mov	r3, r4
    d07e:	b11b      	cbz	r3, d088 <os_msys_register+0x14>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
    d080:	8806      	ldrh	r6, [r0, #0]
    d082:	881d      	ldrh	r5, [r3, #0]
    d084:	42ae      	cmp	r6, r5
    d086:	d207      	bcs.n	d098 <os_msys_register+0x24>
    if (prev) {
    d088:	b949      	cbnz	r1, d09e <os_msys_register+0x2a>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
    d08a:	6084      	str	r4, [r0, #8]
    d08c:	b914      	cbnz	r4, d094 <os_msys_register+0x20>
    d08e:	f100 0308 	add.w	r3, r0, #8
    d092:	6053      	str	r3, [r2, #4]
    d094:	6010      	str	r0, [r2, #0]
    d096:	e009      	b.n	d0ac <os_msys_register+0x38>
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    d098:	4619      	mov	r1, r3
    d09a:	689b      	ldr	r3, [r3, #8]
    d09c:	e7ef      	b.n	d07e <os_msys_register+0xa>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
    d09e:	688b      	ldr	r3, [r1, #8]
    d0a0:	6083      	str	r3, [r0, #8]
    d0a2:	b913      	cbnz	r3, d0aa <os_msys_register+0x36>
    d0a4:	f100 0308 	add.w	r3, r0, #8
    d0a8:	6053      	str	r3, [r2, #4]
    d0aa:	6088      	str	r0, [r1, #8]
}
    d0ac:	2000      	movs	r0, #0
    d0ae:	bd70      	pop	{r4, r5, r6, pc}
    d0b0:	20001338 	.word	0x20001338

0000d0b4 <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
    d0b4:	4b02      	ldr	r3, [pc, #8]	; (d0c0 <os_msys_reset+0xc>)
    d0b6:	2200      	movs	r2, #0
    d0b8:	e9c3 2300 	strd	r2, r3, [r3]
}
    d0bc:	4770      	bx	lr
    d0be:	bf00      	nop
    d0c0:	20001338 	.word	0x20001338

0000d0c4 <os_msys_get_pkthdr>:
    return (NULL);
}

struct os_mbuf *
os_msys_get_pkthdr(uint16_t dsize, uint16_t user_hdr_len)
{
    d0c4:	b510      	push	{r4, lr}
    d0c6:	460c      	mov	r4, r1
    total_pkthdr_len =  user_hdr_len + sizeof(struct os_mbuf_pkthdr);

    /* If dsize = 0 that means user has no idea how big block size is needed,
     * therefore lets find for him the biggest one
     */
    if (dsize == 0) {
    d0c8:	b948      	cbnz	r0, d0de <os_msys_get_pkthdr+0x1a>
    return STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    d0ca:	4b09      	ldr	r3, [pc, #36]	; (d0f0 <os_msys_get_pkthdr+0x2c>)
    d0cc:	6818      	ldr	r0, [r3, #0]
    d0ce:	b168      	cbz	r0, d0ec <os_msys_get_pkthdr+0x28>
    d0d0:	6858      	ldr	r0, [r3, #4]
    d0d2:	3808      	subs	r0, #8

    if (!pool) {
        goto err;
    }

    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
    d0d4:	b2e1      	uxtb	r1, r4
    return (m);
err:
    return (NULL);
}
    d0d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
    d0da:	f000 be1c 	b.w	dd16 <os_mbuf_get_pkthdr>
        pool = os_msys_find_pool(dsize + total_pkthdr_len);
    d0de:	3008      	adds	r0, #8
    d0e0:	4408      	add	r0, r1
    d0e2:	b280      	uxth	r0, r0
    d0e4:	f7ff ffb4 	bl	d050 <os_msys_find_pool>
    if (!pool) {
    d0e8:	2800      	cmp	r0, #0
    d0ea:	d1f3      	bne.n	d0d4 <os_msys_get_pkthdr+0x10>
}
    d0ec:	2000      	movs	r0, #0
    d0ee:	bd10      	pop	{r4, pc}
    d0f0:	20001338 	.word	0x20001338

0000d0f4 <os_msys_init>:
    SYSINIT_PANIC_ASSERT(rc == 0);
}

void
os_msys_init(void)
{
    d0f4:	b513      	push	{r0, r1, r4, lr}
    int rc;

    os_msys_reset();
    d0f6:	f7ff ffdd 	bl	d0b4 <os_msys_reset>
    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
    d0fa:	4b11      	ldr	r3, [pc, #68]	; (d140 <os_msys_init+0x4c>)
    d0fc:	9301      	str	r3, [sp, #4]
    d0fe:	f44f 7392 	mov.w	r3, #292	; 0x124
    d102:	9300      	str	r3, [sp, #0]
    d104:	4a0f      	ldr	r2, [pc, #60]	; (d144 <os_msys_init+0x50>)
    d106:	4910      	ldr	r1, [pc, #64]	; (d148 <os_msys_init+0x54>)
    d108:	4810      	ldr	r0, [pc, #64]	; (d14c <os_msys_init+0x58>)
    d10a:	230c      	movs	r3, #12
    d10c:	f003 fe87 	bl	10e1e <mem_init_mbuf_pool>
    SYSINIT_PANIC_ASSERT(rc == 0);
    d110:	b138      	cbz	r0, d122 <os_msys_init+0x2e>
    d112:	2300      	movs	r3, #0
    d114:	4a0e      	ldr	r2, [pc, #56]	; (d150 <os_msys_init+0x5c>)
    d116:	9300      	str	r3, [sp, #0]
    d118:	6814      	ldr	r4, [r2, #0]
    d11a:	4619      	mov	r1, r3
    d11c:	461a      	mov	r2, r3
    d11e:	4618      	mov	r0, r3
    d120:	47a0      	blx	r4
    rc = os_msys_register(mbuf_pool);
    d122:	4808      	ldr	r0, [pc, #32]	; (d144 <os_msys_init+0x50>)
    d124:	f7ff ffa6 	bl	d074 <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
    d128:	b138      	cbz	r0, d13a <os_msys_init+0x46>
    d12a:	2300      	movs	r3, #0
    d12c:	4a08      	ldr	r2, [pc, #32]	; (d150 <os_msys_init+0x5c>)
    d12e:	9300      	str	r3, [sp, #0]
    d130:	6814      	ldr	r4, [r2, #0]
    d132:	4619      	mov	r1, r3
    d134:	461a      	mov	r2, r3
    d136:	4618      	mov	r0, r3
    d138:	47a0      	blx	r4
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
    d13a:	b002      	add	sp, #8
    d13c:	bd10      	pop	{r4, pc}
    d13e:	bf00      	nop
    d140:	00020609 	.word	0x00020609
    d144:	20003b74 	.word	0x20003b74
    d148:	20003b80 	.word	0x20003b80
    d14c:	20002dc4 	.word	0x20002dc4
    d150:	2000143c 	.word	0x2000143c

0000d154 <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
    d154:	b130      	cbz	r0, d164 <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
    d156:	2300      	movs	r3, #0
    d158:	7143      	strb	r3, [r0, #5]
    mu->mu_level = 0;
    d15a:	80c3      	strh	r3, [r0, #6]
    mu->mu_owner = NULL;
    d15c:	6083      	str	r3, [r0, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
    d15e:	6003      	str	r3, [r0, #0]

    ret = OS_OK;
    d160:	4618      	mov	r0, r3
    d162:	4770      	bx	lr
        ret = OS_INVALID_PARM;
    d164:	2003      	movs	r0, #3

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
    d166:	4770      	bx	lr

0000d168 <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
    d168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
    d16a:	4b27      	ldr	r3, [pc, #156]	; (d208 <os_mutex_release+0xa0>)
    d16c:	681b      	ldr	r3, [r3, #0]
{
    d16e:	4604      	mov	r4, r0
    if (!g_os_started) {
    d170:	2b00      	cmp	r3, #0
    d172:	d042      	beq.n	d1fa <os_mutex_release+0x92>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
    d174:	2800      	cmp	r0, #0
    d176:	d042      	beq.n	d1fe <os_mutex_release+0x96>
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
    d178:	f000 f954 	bl	d424 <os_sched_get_current_task>
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
    d17c:	88e3      	ldrh	r3, [r4, #6]
    current = os_sched_get_current_task();
    d17e:	4605      	mov	r5, r0
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
    d180:	2b00      	cmp	r3, #0
    d182:	d03e      	beq.n	d202 <os_mutex_release+0x9a>
    d184:	68a2      	ldr	r2, [r4, #8]
    d186:	4282      	cmp	r2, r0
    d188:	d13b      	bne.n	d202 <os_mutex_release+0x9a>
        ret = OS_BAD_MUTEX;
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
    d18a:	2b01      	cmp	r3, #1
    d18c:	d003      	beq.n	d196 <os_mutex_release+0x2e>
        --mu->mu_level;
    d18e:	3b01      	subs	r3, #1
    d190:	80e3      	strh	r3, [r4, #6]
    /* Re-schedule if needed */
    if (resched) {
        os_sched(rdy);
    }

    ret = OS_OK;
    d192:	2000      	movs	r0, #0
    d194:	e032      	b.n	d1fc <os_mutex_release+0x94>
    OS_ENTER_CRITICAL(sr);
    d196:	f7ff fa77 	bl	c688 <os_arch_save_sr>
    --mu->mu_level;
    d19a:	88e3      	ldrh	r3, [r4, #6]
    d19c:	3b01      	subs	r3, #1
    d19e:	80e3      	strh	r3, [r4, #6]
    if (current->t_prio != mu->mu_prio) {
    d1a0:	7aea      	ldrb	r2, [r5, #11]
    d1a2:	7963      	ldrb	r3, [r4, #5]
    d1a4:	429a      	cmp	r2, r3
    OS_ENTER_CRITICAL(sr);
    d1a6:	4607      	mov	r7, r0
    if (current->t_prio != mu->mu_prio) {
    d1a8:	d003      	beq.n	d1b2 <os_mutex_release+0x4a>
        current->t_prio = mu->mu_prio;
    d1aa:	72eb      	strb	r3, [r5, #11]
        os_sched_resort(current);
    d1ac:	4628      	mov	r0, r5
    d1ae:	f000 fa39 	bl	d624 <os_sched_resort>
    rdy = SLIST_FIRST(&mu->mu_head);
    d1b2:	6826      	ldr	r6, [r4, #0]
    if (rdy) {
    d1b4:	b16e      	cbz	r6, d1d2 <os_mutex_release+0x6a>
        assert(rdy->t_obj);
    d1b6:	69f3      	ldr	r3, [r6, #28]
    d1b8:	b923      	cbnz	r3, d1c4 <os_mutex_release+0x5c>
    d1ba:	461a      	mov	r2, r3
    d1bc:	4619      	mov	r1, r3
    d1be:	4618      	mov	r0, r3
    d1c0:	f7ff fb1c 	bl	c7fc <__assert_func>
        os_sched_wakeup(rdy);
    d1c4:	4630      	mov	r0, r6
    d1c6:	f000 f9bb 	bl	d540 <os_sched_wakeup>
        mu->mu_level = 1;
    d1ca:	2301      	movs	r3, #1
    d1cc:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
    d1ce:	7af3      	ldrb	r3, [r6, #11]
    d1d0:	7163      	strb	r3, [r4, #5]
    mu->mu_owner = rdy;
    d1d2:	60a6      	str	r6, [r4, #8]
    if (rdy) {
    d1d4:	b116      	cbz	r6, d1dc <os_mutex_release+0x74>
        rdy->t_lockcnt++;
    d1d6:	7bb3      	ldrb	r3, [r6, #14]
    d1d8:	3301      	adds	r3, #1
    d1da:	73b3      	strb	r3, [r6, #14]
    --current->t_lockcnt;
    d1dc:	7bab      	ldrb	r3, [r5, #14]
    d1de:	3b01      	subs	r3, #1
    d1e0:	73ab      	strb	r3, [r5, #14]
    rdy = os_sched_next_task();
    d1e2:	f000 fa19 	bl	d618 <os_sched_next_task>
    d1e6:	4604      	mov	r4, r0
    OS_EXIT_CRITICAL(sr);
    d1e8:	4638      	mov	r0, r7
    d1ea:	f7ff fa53 	bl	c694 <os_arch_restore_sr>
    if (resched) {
    d1ee:	42a5      	cmp	r5, r4
    d1f0:	d0cf      	beq.n	d192 <os_mutex_release+0x2a>
        os_sched(rdy);
    d1f2:	4620      	mov	r0, r4
    d1f4:	f000 f922 	bl	d43c <os_sched>
    d1f8:	e7cb      	b.n	d192 <os_mutex_release+0x2a>
        ret = OS_NOT_STARTED;
    d1fa:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
    d1fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
    d1fe:	2003      	movs	r0, #3
    d200:	e7fc      	b.n	d1fc <os_mutex_release+0x94>
        ret = OS_BAD_MUTEX;
    d202:	2005      	movs	r0, #5
    d204:	e7fa      	b.n	d1fc <os_mutex_release+0x94>
    d206:	bf00      	nop
    d208:	20002d98 	.word	0x20002d98

0000d20c <os_mutex_pend>:
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
    d20c:	4b35      	ldr	r3, [pc, #212]	; (d2e4 <os_mutex_pend+0xd8>)
    d20e:	681b      	ldr	r3, [r3, #0]
{
    d210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d214:	4606      	mov	r6, r0
    d216:	4688      	mov	r8, r1
    if (!g_os_started) {
    d218:	2b00      	cmp	r3, #0
    d21a:	d05e      	beq.n	d2da <os_mutex_pend+0xce>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
    d21c:	2800      	cmp	r0, #0
    d21e:	d05e      	beq.n	d2de <os_mutex_pend+0xd2>
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
    d220:	f7ff fa32 	bl	c688 <os_arch_save_sr>
    d224:	4607      	mov	r7, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
    d226:	f000 f8fd 	bl	d424 <os_sched_get_current_task>
    if (mu->mu_level == 0) {
    d22a:	88f5      	ldrh	r5, [r6, #6]
    current = os_sched_get_current_task();
    d22c:	4604      	mov	r4, r0
    if (mu->mu_level == 0) {
    d22e:	b96d      	cbnz	r5, d24c <os_mutex_pend+0x40>
        mu->mu_owner = current;
    d230:	60b0      	str	r0, [r6, #8]
        mu->mu_prio  = current->t_prio;
    d232:	7ac3      	ldrb	r3, [r0, #11]
    d234:	7173      	strb	r3, [r6, #5]
        current->t_lockcnt++;
    d236:	7b83      	ldrb	r3, [r0, #14]
    d238:	3301      	adds	r3, #1
    d23a:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
    d23c:	2301      	movs	r3, #1
    d23e:	80f3      	strh	r3, [r6, #6]
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
        ++mu->mu_level;
        OS_EXIT_CRITICAL(sr);
    d240:	4638      	mov	r0, r7
    d242:	f7ff fa27 	bl	c694 <os_arch_restore_sr>
        ret = OS_OK;
    d246:	2000      	movs	r0, #0
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
    d248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (mu->mu_owner == current) {
    d24c:	68b0      	ldr	r0, [r6, #8]
    d24e:	42a0      	cmp	r0, r4
    d250:	d102      	bne.n	d258 <os_mutex_pend+0x4c>
        ++mu->mu_level;
    d252:	3501      	adds	r5, #1
    d254:	80f5      	strh	r5, [r6, #6]
    d256:	e7f3      	b.n	d240 <os_mutex_pend+0x34>
    if (timeout == 0) {
    d258:	f1b8 0f00 	cmp.w	r8, #0
    d25c:	d104      	bne.n	d268 <os_mutex_pend+0x5c>
        OS_EXIT_CRITICAL(sr);
    d25e:	4638      	mov	r0, r7
    d260:	f7ff fa18 	bl	c694 <os_arch_restore_sr>
        ret = OS_TIMEOUT;
    d264:	2006      	movs	r0, #6
        goto done;
    d266:	e7ef      	b.n	d248 <os_mutex_pend+0x3c>
    if (mu->mu_owner->t_prio > current->t_prio) {
    d268:	7ae3      	ldrb	r3, [r4, #11]
    d26a:	7ac2      	ldrb	r2, [r0, #11]
    d26c:	429a      	cmp	r2, r3
    d26e:	d902      	bls.n	d276 <os_mutex_pend+0x6a>
        mu->mu_owner->t_prio = current->t_prio;
    d270:	72c3      	strb	r3, [r0, #11]
        os_sched_resort(mu->mu_owner);
    d272:	f000 f9d7 	bl	d624 <os_sched_resort>
    if (!SLIST_EMPTY(&mu->mu_head)) {
    d276:	6831      	ldr	r1, [r6, #0]
    d278:	b361      	cbz	r1, d2d4 <os_mutex_pend+0xc8>
            if (current->t_prio < entry->t_prio) {
    d27a:	7ae5      	ldrb	r5, [r4, #11]
    d27c:	460a      	mov	r2, r1
    last = NULL;
    d27e:	2300      	movs	r3, #0
            if (current->t_prio < entry->t_prio) {
    d280:	7ad0      	ldrb	r0, [r2, #11]
    d282:	42a8      	cmp	r0, r5
    d284:	d824      	bhi.n	d2d0 <os_mutex_pend+0xc4>
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
    d286:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
    d288:	4613      	mov	r3, r2
    d28a:	b9f8      	cbnz	r0, d2cc <os_mutex_pend+0xc0>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
    d28c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    d28e:	64e2      	str	r2, [r4, #76]	; 0x4c
    d290:	64dc      	str	r4, [r3, #76]	; 0x4c
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
    d292:	7b63      	ldrb	r3, [r4, #13]
    current->t_obj = mu;
    d294:	61e6      	str	r6, [r4, #28]
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
    d296:	f043 0304 	orr.w	r3, r3, #4
    d29a:	7363      	strb	r3, [r4, #13]
    os_sched_sleep(current, timeout);
    d29c:	4641      	mov	r1, r8
    d29e:	4620      	mov	r0, r4
    d2a0:	f000 f8de 	bl	d460 <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
    d2a4:	4638      	mov	r0, r7
    d2a6:	f7ff f9f5 	bl	c694 <os_arch_restore_sr>
    os_sched(NULL);
    d2aa:	2000      	movs	r0, #0
    d2ac:	f000 f8c6 	bl	d43c <os_sched>
    OS_ENTER_CRITICAL(sr);
    d2b0:	f7ff f9ea 	bl	c688 <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
    d2b4:	7b63      	ldrb	r3, [r4, #13]
    d2b6:	f023 0304 	bic.w	r3, r3, #4
    d2ba:	7363      	strb	r3, [r4, #13]
    OS_EXIT_CRITICAL(sr);
    d2bc:	f7ff f9ea 	bl	c694 <os_arch_restore_sr>
    if (mu->mu_owner == current) {
    d2c0:	68b0      	ldr	r0, [r6, #8]
        ret = OS_TIMEOUT;
    d2c2:	42a0      	cmp	r0, r4
    d2c4:	bf14      	ite	ne
    d2c6:	2006      	movne	r0, #6
    d2c8:	2000      	moveq	r0, #0
    d2ca:	e7bd      	b.n	d248 <os_mutex_pend+0x3c>
    d2cc:	4602      	mov	r2, r0
    d2ce:	e7d7      	b.n	d280 <os_mutex_pend+0x74>
    if (last) {
    d2d0:	2b00      	cmp	r3, #0
    d2d2:	d1db      	bne.n	d28c <os_mutex_pend+0x80>
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
    d2d4:	64e1      	str	r1, [r4, #76]	; 0x4c
    d2d6:	6034      	str	r4, [r6, #0]
    d2d8:	e7db      	b.n	d292 <os_mutex_pend+0x86>
        ret = OS_NOT_STARTED;
    d2da:	2009      	movs	r0, #9
    d2dc:	e7b4      	b.n	d248 <os_mutex_pend+0x3c>
        ret = OS_INVALID_PARM;
    d2de:	2003      	movs	r0, #3
    d2e0:	e7b2      	b.n	d248 <os_mutex_pend+0x3c>
    d2e2:	bf00      	nop
    d2e4:	20002d98 	.word	0x20002d98

0000d2e8 <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
    d2e8:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
    d2ea:	4b04      	ldr	r3, [pc, #16]	; (d2fc <os_sanity_check_list_lock+0x14>)
    d2ec:	6818      	ldr	r0, [r3, #0]
    d2ee:	b120      	cbz	r0, d2fa <os_sanity_check_list_lock+0x12>
        return (0);
    }

    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
    d2f0:	4803      	ldr	r0, [pc, #12]	; (d300 <os_sanity_check_list_lock+0x18>)
    d2f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    d2f6:	f7ff ff89 	bl	d20c <os_mutex_pend>
    }

    return (0);
err:
    return (rc);
}
    d2fa:	bd08      	pop	{r3, pc}
    d2fc:	20002d98 	.word	0x20002d98
    d300:	20003ba0 	.word	0x20003ba0

0000d304 <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
    d304:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
    d306:	4b03      	ldr	r3, [pc, #12]	; (d314 <os_sanity_check_list_unlock+0x10>)
    d308:	6818      	ldr	r0, [r3, #0]
    d30a:	b110      	cbz	r0, d312 <os_sanity_check_list_unlock+0xe>
        return (0);
    }

    rc = os_mutex_release(&g_os_sanity_check_mu);
    d30c:	4802      	ldr	r0, [pc, #8]	; (d318 <os_sanity_check_list_unlock+0x14>)
    d30e:	f7ff ff2b 	bl	d168 <os_mutex_release>
    }

    return (0);
err:
    return (rc);
}
    d312:	bd08      	pop	{r3, pc}
    d314:	20002d98 	.word	0x20002d98
    d318:	20003ba0 	.word	0x20003ba0

0000d31c <os_sanity_check_init>:
{
    d31c:	b508      	push	{r3, lr}
    memset(sc, 0, sizeof(*sc));
    d31e:	2214      	movs	r2, #20
    d320:	2100      	movs	r1, #0
    d322:	f002 ffb2 	bl	1028a <memset>
}
    d326:	2000      	movs	r0, #0
    d328:	bd08      	pop	{r3, pc}
	...

0000d32c <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
    d32c:	b510      	push	{r4, lr}
    d32e:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
    d330:	f7ff ffda 	bl	d2e8 <os_sanity_check_list_lock>
    if (rc != OS_OK) {
    d334:	b938      	cbnz	r0, d346 <os_sanity_check_register+0x1a>
        goto err;
    }

    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
    d336:	4b04      	ldr	r3, [pc, #16]	; (d348 <os_sanity_check_register+0x1c>)
    d338:	681a      	ldr	r2, [r3, #0]
    d33a:	6122      	str	r2, [r4, #16]
    d33c:	601c      	str	r4, [r3, #0]
    }

    return (0);
err:
    return (rc);
}
    d33e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    rc = os_sanity_check_list_unlock();
    d342:	f7ff bfdf 	b.w	d304 <os_sanity_check_list_unlock>
}
    d346:	bd10      	pop	{r4, pc}
    d348:	20003b9c 	.word	0x20003b9c

0000d34c <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
    d34c:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
    d34e:	f7ff ffcb 	bl	d2e8 <os_sanity_check_list_lock>
    if (rc != 0) {
    d352:	b128      	cbz	r0, d360 <os_sanity_run+0x14>
        assert(0);
    d354:	2300      	movs	r3, #0
    d356:	461a      	mov	r2, r3
    d358:	4619      	mov	r1, r3
    d35a:	4618      	mov	r0, r3
    d35c:	f7ff fa4e 	bl	c7fc <__assert_func>
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
    d360:	4b0d      	ldr	r3, [pc, #52]	; (d398 <os_sanity_run+0x4c>)
    d362:	681c      	ldr	r4, [r3, #0]
    d364:	b924      	cbnz	r4, d370 <os_sanity_run+0x24>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
        }
    }

    rc = os_sanity_check_list_unlock();
    d366:	f7ff ffcd 	bl	d304 <os_sanity_check_list_unlock>
    if (rc != 0) {
    d36a:	2800      	cmp	r0, #0
    d36c:	d1f2      	bne.n	d354 <os_sanity_run+0x8>
        assert(0);
    }
}
    d36e:	bd10      	pop	{r4, pc}
        if (sc->sc_func) {
    d370:	68a3      	ldr	r3, [r4, #8]
    d372:	b143      	cbz	r3, d386 <os_sanity_run+0x3a>
            rc = sc->sc_func(sc, sc->sc_arg);
    d374:	68e1      	ldr	r1, [r4, #12]
    d376:	4620      	mov	r0, r4
    d378:	4798      	blx	r3
            if (rc == OS_OK) {
    d37a:	b920      	cbnz	r0, d386 <os_sanity_run+0x3a>
                sc->sc_checkin_last = os_time_get();
    d37c:	f000 fade 	bl	d93c <os_time_get>
    d380:	6020      	str	r0, [r4, #0]
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
    d382:	6924      	ldr	r4, [r4, #16]
    d384:	e7ee      	b.n	d364 <os_sanity_run+0x18>
        if (OS_TIME_TICK_GT(os_time_get(),
    d386:	f000 fad9 	bl	d93c <os_time_get>
    d38a:	e9d4 3200 	ldrd	r3, r2, [r4]
    d38e:	4413      	add	r3, r2
    d390:	1ac0      	subs	r0, r0, r3
    d392:	2800      	cmp	r0, #0
    d394:	ddf5      	ble.n	d382 <os_sanity_run+0x36>
    d396:	e7dd      	b.n	d354 <os_sanity_run+0x8>
    d398:	20003b9c 	.word	0x20003b9c

0000d39c <os_sanity_init>:

int
os_sanity_init(void)
{
    d39c:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
    d39e:	4802      	ldr	r0, [pc, #8]	; (d3a8 <os_sanity_init+0xc>)
    d3a0:	f7ff fed8 	bl	d154 <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
    d3a4:	bd08      	pop	{r3, pc}
    d3a6:	bf00      	nop
    d3a8:	20003ba0 	.word	0x20003ba0

0000d3ac <os_sched_insert>:
 * @return int  OS_OK: task was inserted into run list
 *              OS_EINVAL: Task was not in ready state.
 */
os_error_t
os_sched_insert(struct os_task *t)
{
    d3ac:	b538      	push	{r3, r4, r5, lr}
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
    d3ae:	7b03      	ldrb	r3, [r0, #12]
    d3b0:	2b01      	cmp	r3, #1
{
    d3b2:	4604      	mov	r4, r0
    if (t->t_state != OS_TASK_READY) {
    d3b4:	d111      	bne.n	d3da <os_sched_insert+0x2e>
        rc = OS_EINVAL;
        goto err;
    }

    entry = NULL;
    OS_ENTER_CRITICAL(sr);
    d3b6:	f7ff f967 	bl	c688 <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
    d3ba:	4a0e      	ldr	r2, [pc, #56]	; (d3f4 <os_sched_insert+0x48>)
    d3bc:	6813      	ldr	r3, [r2, #0]
    d3be:	b933      	cbnz	r3, d3ce <os_sched_insert+0x22>
        }
    }
    if (entry) {
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
    } else {
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
    d3c0:	6463      	str	r3, [r4, #68]	; 0x44
    d3c2:	6853      	ldr	r3, [r2, #4]
    d3c4:	64a3      	str	r3, [r4, #72]	; 0x48
    d3c6:	601c      	str	r4, [r3, #0]
    d3c8:	3444      	adds	r4, #68	; 0x44
    d3ca:	6054      	str	r4, [r2, #4]
    d3cc:	e00d      	b.n	d3ea <os_sched_insert+0x3e>
        if (t->t_prio < entry->t_prio) {
    d3ce:	7ae5      	ldrb	r5, [r4, #11]
    d3d0:	7ad9      	ldrb	r1, [r3, #11]
    d3d2:	428d      	cmp	r5, r1
    d3d4:	d303      	bcc.n	d3de <os_sched_insert+0x32>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
    d3d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    d3d8:	e7f1      	b.n	d3be <os_sched_insert+0x12>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
    d3da:	2002      	movs	r0, #2
    d3dc:	e008      	b.n	d3f0 <os_sched_insert+0x44>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
    d3de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    d3e0:	e9c4 3211 	strd	r3, r2, [r4, #68]	; 0x44
    d3e4:	6014      	str	r4, [r2, #0]
    d3e6:	3444      	adds	r4, #68	; 0x44
    d3e8:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
    d3ea:	f7ff f953 	bl	c694 <os_arch_restore_sr>
    d3ee:	2000      	movs	r0, #0
}
    d3f0:	bd38      	pop	{r3, r4, r5, pc}
    d3f2:	bf00      	nop
    d3f4:	20001340 	.word	0x20001340

0000d3f8 <os_sched_ctx_sw_hook>:
    top = g_current_task->t_stacktop - g_current_task->t_stacksize;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(top[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
    d3f8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    g_current_task->t_run_time += g_os_time - g_os_last_ctx_sw_time;
    d3fa:	4a07      	ldr	r2, [pc, #28]	; (d418 <os_sched_ctx_sw_hook+0x20>)
    next_t->t_ctx_sw_cnt++;
    d3fc:	3301      	adds	r3, #1
{
    d3fe:	b510      	push	{r4, lr}
    next_t->t_ctx_sw_cnt++;
    d400:	63c3      	str	r3, [r0, #60]	; 0x3c
    g_current_task->t_run_time += g_os_time - g_os_last_ctx_sw_time;
    d402:	4b06      	ldr	r3, [pc, #24]	; (d41c <os_sched_ctx_sw_hook+0x24>)
    d404:	6814      	ldr	r4, [r2, #0]
    d406:	6818      	ldr	r0, [r3, #0]
    d408:	4b05      	ldr	r3, [pc, #20]	; (d420 <os_sched_ctx_sw_hook+0x28>)
    d40a:	6819      	ldr	r1, [r3, #0]
    d40c:	6b83      	ldr	r3, [r0, #56]	; 0x38
    g_os_last_ctx_sw_time = g_os_time;
    d40e:	6011      	str	r1, [r2, #0]
    g_current_task->t_run_time += g_os_time - g_os_last_ctx_sw_time;
    d410:	1b1b      	subs	r3, r3, r4
    d412:	440b      	add	r3, r1
    d414:	6383      	str	r3, [r0, #56]	; 0x38
}
    d416:	bd10      	pop	{r4, pc}
    d418:	20003bb0 	.word	0x20003bb0
    d41c:	20003bac 	.word	0x20003bac
    d420:	20003bf0 	.word	0x20003bf0

0000d424 <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
    d424:	4b01      	ldr	r3, [pc, #4]	; (d42c <os_sched_get_current_task+0x8>)
    d426:	6818      	ldr	r0, [r3, #0]
    d428:	4770      	bx	lr
    d42a:	bf00      	nop
    d42c:	20003bac 	.word	0x20003bac

0000d430 <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
    d430:	4b01      	ldr	r3, [pc, #4]	; (d438 <os_sched_set_current_task+0x8>)
    d432:	6018      	str	r0, [r3, #0]
}
    d434:	4770      	bx	lr
    d436:	bf00      	nop
    d438:	20003bac 	.word	0x20003bac

0000d43c <os_sched>:

void
os_sched(struct os_task *next_t)
{
    d43c:	b538      	push	{r3, r4, r5, lr}
    d43e:	4604      	mov	r4, r0
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
    d440:	f7ff f922 	bl	c688 <os_arch_save_sr>
    d444:	4605      	mov	r5, r0

    if (!next_t) {
    d446:	b90c      	cbnz	r4, d44c <os_sched+0x10>
 * @return struct os_task*
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
    d448:	4b04      	ldr	r3, [pc, #16]	; (d45c <os_sched+0x20>)
    d44a:	681c      	ldr	r4, [r3, #0]
    os_arch_ctx_sw(next_t);
    d44c:	4620      	mov	r0, r4
    d44e:	f7ff f911 	bl	c674 <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
    d452:	4628      	mov	r0, r5
}
    d454:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    OS_EXIT_CRITICAL(sr);
    d458:	f7ff b91c 	b.w	c694 <os_arch_restore_sr>
    d45c:	20001340 	.word	0x20001340

0000d460 <os_sched_sleep>:
{
    d460:	b538      	push	{r3, r4, r5, lr}
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    d462:	e9d0 3211 	ldrd	r3, r2, [r0, #68]	; 0x44
{
    d466:	4604      	mov	r4, r0
    d468:	460d      	mov	r5, r1
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    d46a:	b1cb      	cbz	r3, d4a0 <os_sched_sleep+0x40>
    d46c:	649a      	str	r2, [r3, #72]	; 0x48
    d46e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    d470:	6013      	str	r3, [r2, #0]
    t->t_state = OS_TASK_SLEEP;
    d472:	2302      	movs	r3, #2
    d474:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
    d476:	f000 fa61 	bl	d93c <os_time_get>
    d47a:	4428      	add	r0, r5
    if (nticks == OS_TIMEOUT_NEVER) {
    d47c:	3501      	adds	r5, #1
    d47e:	4a13      	ldr	r2, [pc, #76]	; (d4cc <os_sched_sleep+0x6c>)
    t->t_next_wakeup = os_time_get() + nticks;
    d480:	6360      	str	r0, [r4, #52]	; 0x34
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    d482:	f104 0144 	add.w	r1, r4, #68	; 0x44
    if (nticks == OS_TIMEOUT_NEVER) {
    d486:	d10e      	bne.n	d4a6 <os_sched_sleep+0x46>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
    d488:	7b63      	ldrb	r3, [r4, #13]
    d48a:	f043 0301 	orr.w	r3, r3, #1
    d48e:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    d490:	2300      	movs	r3, #0
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    d492:	6463      	str	r3, [r4, #68]	; 0x44
    d494:	6853      	ldr	r3, [r2, #4]
    d496:	64a3      	str	r3, [r4, #72]	; 0x48
    d498:	601c      	str	r4, [r3, #0]
    d49a:	6051      	str	r1, [r2, #4]
}
    d49c:	2000      	movs	r0, #0
    d49e:	bd38      	pop	{r3, r4, r5, pc}
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    d4a0:	490b      	ldr	r1, [pc, #44]	; (d4d0 <os_sched_sleep+0x70>)
    d4a2:	604a      	str	r2, [r1, #4]
    d4a4:	e7e3      	b.n	d46e <os_sched_sleep+0xe>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
    d4a6:	6813      	ldr	r3, [r2, #0]
    d4a8:	2b00      	cmp	r3, #0
    d4aa:	d0f2      	beq.n	d492 <os_sched_sleep+0x32>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
    d4ac:	7b5d      	ldrb	r5, [r3, #13]
    d4ae:	07ed      	lsls	r5, r5, #31
    d4b0:	d405      	bmi.n	d4be <os_sched_sleep+0x5e>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
    d4b2:	6b5d      	ldr	r5, [r3, #52]	; 0x34
    d4b4:	1a2d      	subs	r5, r5, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
    d4b6:	2d00      	cmp	r5, #0
    d4b8:	dc01      	bgt.n	d4be <os_sched_sleep+0x5e>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
    d4ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    d4bc:	e7f4      	b.n	d4a8 <os_sched_sleep+0x48>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
    d4be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    d4c0:	e9c4 3211 	strd	r3, r2, [r4, #68]	; 0x44
    d4c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    d4c6:	6014      	str	r4, [r2, #0]
    d4c8:	6499      	str	r1, [r3, #72]	; 0x48
    return (0);
    d4ca:	e7e7      	b.n	d49c <os_sched_sleep+0x3c>
    d4cc:	20001348 	.word	0x20001348
    d4d0:	20001340 	.word	0x20001340

0000d4d4 <os_sched_remove>:
{
    d4d4:	b510      	push	{r4, lr}
    if (t->t_state == OS_TASK_SLEEP) {
    d4d6:	7b03      	ldrb	r3, [r0, #12]
    d4d8:	2b02      	cmp	r3, #2
    d4da:	d118      	bne.n	d50e <os_sched_remove+0x3a>
        TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
    d4dc:	e9d0 3211 	ldrd	r3, r2, [r0, #68]	; 0x44
    d4e0:	b193      	cbz	r3, d508 <os_sched_remove+0x34>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    d4e2:	649a      	str	r2, [r3, #72]	; 0x48
    d4e4:	6c82      	ldr	r2, [r0, #72]	; 0x48
    d4e6:	6013      	str	r3, [r2, #0]
    t->t_next_wakeup = 0;
    d4e8:	2300      	movs	r3, #0
    d4ea:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
    d4ec:	7b43      	ldrb	r3, [r0, #13]
    STAILQ_REMOVE(&g_os_task_list, t, os_task, t_os_task_list);
    d4ee:	6c04      	ldr	r4, [r0, #64]	; 0x40
    t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
    d4f0:	f043 0301 	orr.w	r3, r3, #1
    d4f4:	7343      	strb	r3, [r0, #13]
    STAILQ_REMOVE(&g_os_task_list, t, os_task, t_os_task_list);
    d4f6:	4b0f      	ldr	r3, [pc, #60]	; (d534 <os_sched_remove+0x60>)
    d4f8:	681a      	ldr	r2, [r3, #0]
    d4fa:	4282      	cmp	r2, r0
    d4fc:	d10f      	bne.n	d51e <os_sched_remove+0x4a>
    d4fe:	601c      	str	r4, [r3, #0]
    d500:	b904      	cbnz	r4, d504 <os_sched_remove+0x30>
    d502:	605b      	str	r3, [r3, #4]
}
    d504:	2000      	movs	r0, #0
    d506:	bd10      	pop	{r4, pc}
        TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
    d508:	490b      	ldr	r1, [pc, #44]	; (d538 <os_sched_remove+0x64>)
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    d50a:	604a      	str	r2, [r1, #4]
    d50c:	e7ea      	b.n	d4e4 <os_sched_remove+0x10>
    } else if (t->t_state == OS_TASK_READY) {
    d50e:	2b01      	cmp	r3, #1
    d510:	d1ea      	bne.n	d4e8 <os_sched_remove+0x14>
        TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
    d512:	e9d0 3211 	ldrd	r3, r2, [r0, #68]	; 0x44
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    d516:	2b00      	cmp	r3, #0
    d518:	d1e3      	bne.n	d4e2 <os_sched_remove+0xe>
    d51a:	4908      	ldr	r1, [pc, #32]	; (d53c <os_sched_remove+0x68>)
    d51c:	e7f5      	b.n	d50a <os_sched_remove+0x36>
    STAILQ_REMOVE(&g_os_task_list, t, os_task, t_os_task_list);
    d51e:	4611      	mov	r1, r2
    d520:	6c12      	ldr	r2, [r2, #64]	; 0x40
    d522:	4282      	cmp	r2, r0
    d524:	d1fb      	bne.n	d51e <os_sched_remove+0x4a>
    d526:	640c      	str	r4, [r1, #64]	; 0x40
    d528:	2c00      	cmp	r4, #0
    d52a:	d1eb      	bne.n	d504 <os_sched_remove+0x30>
    d52c:	3140      	adds	r1, #64	; 0x40
    d52e:	6059      	str	r1, [r3, #4]
    d530:	e7e8      	b.n	d504 <os_sched_remove+0x30>
    d532:	bf00      	nop
    d534:	20003bb4 	.word	0x20003bb4
    d538:	20001348 	.word	0x20001348
    d53c:	20001340 	.word	0x20001340

0000d540 <os_sched_wakeup>:
{
    d540:	b508      	push	{r3, lr}
    assert(t->t_state == OS_TASK_SLEEP);
    d542:	7b03      	ldrb	r3, [r0, #12]
    d544:	2b02      	cmp	r3, #2
    d546:	d005      	beq.n	d554 <os_sched_wakeup+0x14>
    d548:	2300      	movs	r3, #0
    d54a:	461a      	mov	r2, r3
    d54c:	4619      	mov	r1, r3
    d54e:	4618      	mov	r0, r3
    d550:	f7ff f954 	bl	c7fc <__assert_func>
    if (t->t_obj) {
    d554:	69c2      	ldr	r2, [r0, #28]
    d556:	b14a      	cbz	r2, d56c <os_sched_wakeup+0x2c>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
    d558:	6813      	ldr	r3, [r2, #0]
    d55a:	2b00      	cmp	r3, #0
    d55c:	d0f4      	beq.n	d548 <os_sched_wakeup+0x8>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
    d55e:	4283      	cmp	r3, r0
    d560:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
    d562:	d115      	bne.n	d590 <os_sched_wakeup+0x50>
    d564:	6011      	str	r1, [r2, #0]
        SLIST_NEXT(t, t_obj_list) = NULL;
    d566:	2300      	movs	r3, #0
    d568:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
    d56a:	61c3      	str	r3, [r0, #28]
    t->t_state = OS_TASK_READY;
    d56c:	2301      	movs	r3, #1
    d56e:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
    d570:	2300      	movs	r3, #0
    d572:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
    d574:	7b43      	ldrb	r3, [r0, #13]
    d576:	f023 0301 	bic.w	r3, r3, #1
    d57a:	7343      	strb	r3, [r0, #13]
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
    d57c:	e9d0 3211 	ldrd	r3, r2, [r0, #68]	; 0x44
    d580:	b163      	cbz	r3, d59c <os_sched_wakeup+0x5c>
    d582:	649a      	str	r2, [r3, #72]	; 0x48
    d584:	6c82      	ldr	r2, [r0, #72]	; 0x48
    d586:	6013      	str	r3, [r2, #0]
    os_sched_insert(t);
    d588:	f7ff ff10 	bl	d3ac <os_sched_insert>
}
    d58c:	2000      	movs	r0, #0
    d58e:	bd08      	pop	{r3, pc}
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
    d590:	461a      	mov	r2, r3
    d592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    d594:	4283      	cmp	r3, r0
    d596:	d1fb      	bne.n	d590 <os_sched_wakeup+0x50>
    d598:	64d1      	str	r1, [r2, #76]	; 0x4c
    d59a:	e7e4      	b.n	d566 <os_sched_wakeup+0x26>
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
    d59c:	4901      	ldr	r1, [pc, #4]	; (d5a4 <os_sched_wakeup+0x64>)
    d59e:	604a      	str	r2, [r1, #4]
    d5a0:	e7f0      	b.n	d584 <os_sched_wakeup+0x44>
    d5a2:	bf00      	nop
    d5a4:	20001348 	.word	0x20001348

0000d5a8 <os_sched_os_timer_exp>:
{
    d5a8:	b570      	push	{r4, r5, r6, lr}
    now = os_time_get();
    d5aa:	f000 f9c7 	bl	d93c <os_time_get>
    d5ae:	4605      	mov	r5, r0
    OS_ENTER_CRITICAL(sr);
    d5b0:	f7ff f86a 	bl	c688 <os_arch_save_sr>
    t = TAILQ_FIRST(&g_os_sleep_list);
    d5b4:	4b0a      	ldr	r3, [pc, #40]	; (d5e0 <os_sched_os_timer_exp+0x38>)
    OS_ENTER_CRITICAL(sr);
    d5b6:	4604      	mov	r4, r0
    t = TAILQ_FIRST(&g_os_sleep_list);
    d5b8:	6818      	ldr	r0, [r3, #0]
    while (t) {
    d5ba:	b920      	cbnz	r0, d5c6 <os_sched_os_timer_exp+0x1e>
    OS_EXIT_CRITICAL(sr);
    d5bc:	4620      	mov	r0, r4
}
    d5be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    OS_EXIT_CRITICAL(sr);
    d5c2:	f7ff b867 	b.w	c694 <os_arch_restore_sr>
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
    d5c6:	7b42      	ldrb	r2, [r0, #13]
    d5c8:	07d3      	lsls	r3, r2, #31
    d5ca:	d4f7      	bmi.n	d5bc <os_sched_os_timer_exp+0x14>
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
    d5cc:	6b42      	ldr	r2, [r0, #52]	; 0x34
        next = TAILQ_NEXT(t, t_os_list);
    d5ce:	6c46      	ldr	r6, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
    d5d0:	1aaa      	subs	r2, r5, r2
    d5d2:	2a00      	cmp	r2, #0
    d5d4:	dbf2      	blt.n	d5bc <os_sched_os_timer_exp+0x14>
            os_sched_wakeup(t);
    d5d6:	f7ff ffb3 	bl	d540 <os_sched_wakeup>
        t = next;
    d5da:	4630      	mov	r0, r6
    d5dc:	e7ed      	b.n	d5ba <os_sched_os_timer_exp+0x12>
    d5de:	bf00      	nop
    d5e0:	20001348 	.word	0x20001348

0000d5e4 <os_sched_wakeup_ticks>:
{
    d5e4:	b510      	push	{r4, lr}
    d5e6:	4604      	mov	r4, r0
    OS_ASSERT_CRITICAL();
    d5e8:	f7ff f857 	bl	c69a <os_arch_in_critical>
    d5ec:	4603      	mov	r3, r0
    d5ee:	b918      	cbnz	r0, d5f8 <os_sched_wakeup_ticks+0x14>
    d5f0:	4602      	mov	r2, r0
    d5f2:	4601      	mov	r1, r0
    d5f4:	f7ff f902 	bl	c7fc <__assert_func>
    t = TAILQ_FIRST(&g_os_sleep_list);
    d5f8:	4b06      	ldr	r3, [pc, #24]	; (d614 <os_sched_wakeup_ticks+0x30>)
    d5fa:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
    d5fc:	b13b      	cbz	r3, d60e <os_sched_wakeup_ticks+0x2a>
    d5fe:	7b5a      	ldrb	r2, [r3, #13]
    d600:	07d2      	lsls	r2, r2, #31
    d602:	d404      	bmi.n	d60e <os_sched_wakeup_ticks+0x2a>
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
    d604:	6b58      	ldr	r0, [r3, #52]	; 0x34
    d606:	1b00      	subs	r0, r0, r4
        rt = 0;     /* wakeup time was in the past */
    d608:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
    d60c:	bd10      	pop	{r4, pc}
        rt = OS_TIMEOUT_NEVER;
    d60e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d612:	e7fb      	b.n	d60c <os_sched_wakeup_ticks+0x28>
    d614:	20001348 	.word	0x20001348

0000d618 <os_sched_next_task>:
}
    d618:	4b01      	ldr	r3, [pc, #4]	; (d620 <os_sched_next_task+0x8>)
    d61a:	6818      	ldr	r0, [r3, #0]
    d61c:	4770      	bx	lr
    d61e:	bf00      	nop
    d620:	20001340 	.word	0x20001340

0000d624 <os_sched_resort>:
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
    if (t->t_state == OS_TASK_READY) {
    d624:	7b03      	ldrb	r3, [r0, #12]
    d626:	2b01      	cmp	r3, #1
    d628:	d10a      	bne.n	d640 <os_sched_resort+0x1c>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    d62a:	e9d0 3211 	ldrd	r3, r2, [r0, #68]	; 0x44
    d62e:	b123      	cbz	r3, d63a <os_sched_resort+0x16>
    d630:	649a      	str	r2, [r3, #72]	; 0x48
    d632:	6c82      	ldr	r2, [r0, #72]	; 0x48
    d634:	6013      	str	r3, [r2, #0]
        os_sched_insert(t);
    d636:	f7ff beb9 	b.w	d3ac <os_sched_insert>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    d63a:	4902      	ldr	r1, [pc, #8]	; (d644 <os_sched_resort+0x20>)
    d63c:	604a      	str	r2, [r1, #4]
    d63e:	e7f8      	b.n	d632 <os_sched_resort+0xe>
    }
}
    d640:	4770      	bx	lr
    d642:	bf00      	nop
    d644:	20001340 	.word	0x20001340

0000d648 <os_sem_init>:
{
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_INIT, (uint32_t)sem, (uint32_t)tokens);

    if (!sem) {
    d648:	b120      	cbz	r0, d654 <os_sem_init+0xc>
        ret = OS_INVALID_PARM;
        goto done;
    }

    sem->sem_tokens = tokens;
    SLIST_FIRST(&sem->sem_head) = NULL;
    d64a:	2300      	movs	r3, #0
    sem->sem_tokens = tokens;
    d64c:	80c1      	strh	r1, [r0, #6]
    SLIST_FIRST(&sem->sem_head) = NULL;
    d64e:	6003      	str	r3, [r0, #0]

    ret = OS_OK;
    d650:	4618      	mov	r0, r3
    d652:	4770      	bx	lr
        ret = OS_INVALID_PARM;
    d654:	2003      	movs	r0, #3

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_INIT, (uint32_t)ret);
    return ret;
}
    d656:	4770      	bx	lr

0000d658 <os_sem_release>:

os_error_t
os_sem_release(struct os_sem *sem)
{
    d658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)sem);

    /* OS must be started to release semaphores */
    if (!g_os_started) {
    d65a:	4b17      	ldr	r3, [pc, #92]	; (d6b8 <os_sem_release+0x60>)
    d65c:	681b      	ldr	r3, [r3, #0]
{
    d65e:	4604      	mov	r4, r0
    if (!g_os_started) {
    d660:	b31b      	cbz	r3, d6aa <os_sem_release+0x52>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
    d662:	b320      	cbz	r0, d6ae <os_sem_release+0x56>
        goto done;
    }

    /* Get current task */
    resched = 0;
    current = os_sched_get_current_task();
    d664:	f7ff fede 	bl	d424 <os_sched_get_current_task>
    d668:	4607      	mov	r7, r0

    OS_ENTER_CRITICAL(sr);
    d66a:	f7ff f80d 	bl	c688 <os_arch_save_sr>

    /* Check if tasks are waiting for the semaphore */
    rdy = SLIST_FIRST(&sem->sem_head);
    d66e:	6825      	ldr	r5, [r4, #0]
    OS_ENTER_CRITICAL(sr);
    d670:	4606      	mov	r6, r0
    if (rdy) {
    d672:	b1ad      	cbz	r5, d6a0 <os_sem_release+0x48>
        /* Clear flag that we are waiting on the semaphore; wake up task */
        rdy->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
    d674:	7b6b      	ldrb	r3, [r5, #13]
    d676:	f023 0302 	bic.w	r3, r3, #2
    d67a:	736b      	strb	r3, [r5, #13]
        os_sched_wakeup(rdy);
    d67c:	4628      	mov	r0, r5
    d67e:	f7ff ff5f 	bl	d540 <os_sched_wakeup>

        /* Schedule if waiting task higher priority */
        if (current->t_prio > rdy->t_prio) {
    d682:	7afc      	ldrb	r4, [r7, #11]
    d684:	7ae8      	ldrb	r0, [r5, #11]
    d686:	4284      	cmp	r4, r0
    d688:	bf94      	ite	ls
    d68a:	2400      	movls	r4, #0
    d68c:	2401      	movhi	r4, #1
    } else {
        /* Add to the number of tokens */
        sem->sem_tokens++;
    }

    OS_EXIT_CRITICAL(sr);
    d68e:	4630      	mov	r0, r6
    d690:	f7ff f800 	bl	c694 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
    d694:	b16c      	cbz	r4, d6b2 <os_sem_release+0x5a>
        os_sched(rdy);
    d696:	4628      	mov	r0, r5
    d698:	f7ff fed0 	bl	d43c <os_sched>
    }

    ret = OS_OK;
    d69c:	2000      	movs	r0, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)ret);
    return ret;
}
    d69e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        sem->sem_tokens++;
    d6a0:	88e3      	ldrh	r3, [r4, #6]
    d6a2:	3301      	adds	r3, #1
    d6a4:	80e3      	strh	r3, [r4, #6]
    resched = 0;
    d6a6:	462c      	mov	r4, r5
    d6a8:	e7f1      	b.n	d68e <os_sem_release+0x36>
        ret = OS_NOT_STARTED;
    d6aa:	2009      	movs	r0, #9
    d6ac:	e7f7      	b.n	d69e <os_sem_release+0x46>
        ret = OS_INVALID_PARM;
    d6ae:	2003      	movs	r0, #3
    d6b0:	e7f5      	b.n	d69e <os_sem_release+0x46>
    ret = OS_OK;
    d6b2:	4620      	mov	r0, r4
    d6b4:	e7f3      	b.n	d69e <os_sem_release+0x46>
    d6b6:	bf00      	nop
    d6b8:	20002d98 	.word	0x20002d98

0000d6bc <os_sem_pend>:

os_error_t
os_sem_pend(struct os_sem *sem, os_time_t timeout)
{
    d6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_PEND, (uint32_t)sem, (uint32_t)timeout);

    /* Check if OS is started */
    if (!g_os_started) {
    d6be:	4b29      	ldr	r3, [pc, #164]	; (d764 <os_sem_pend+0xa8>)
    d6c0:	681b      	ldr	r3, [r3, #0]
{
    d6c2:	4605      	mov	r5, r0
    d6c4:	460e      	mov	r6, r1
    if (!g_os_started) {
    d6c6:	2b00      	cmp	r3, #0
    d6c8:	d047      	beq.n	d75a <os_sem_pend+0x9e>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
    d6ca:	2800      	cmp	r0, #0
    d6cc:	d047      	beq.n	d75e <os_sem_pend+0xa2>
        goto done;
    }

    /* Assume we dont have to put task to sleep; get current task */
    sched = 0;
    current = os_sched_get_current_task();
    d6ce:	f7ff fea9 	bl	d424 <os_sched_get_current_task>
    d6d2:	4604      	mov	r4, r0

    OS_ENTER_CRITICAL(sr);
    d6d4:	f7fe ffd8 	bl	c688 <os_arch_save_sr>

    /*
     * If there is a token available, take it. If no token, either return
     * with error if timeout was 0 or put this task to sleep.
     */
    if (sem->sem_tokens != 0) {
    d6d8:	88eb      	ldrh	r3, [r5, #6]
    OS_ENTER_CRITICAL(sr);
    d6da:	4607      	mov	r7, r0
    if (sem->sem_tokens != 0) {
    d6dc:	b1cb      	cbz	r3, d712 <os_sem_pend+0x56>
        sem->sem_tokens--;
    d6de:	3b01      	subs	r3, #1
    d6e0:	80eb      	strh	r3, [r5, #6]
        ret = OS_OK;
    d6e2:	2500      	movs	r5, #0
    sched = 0;
    d6e4:	462e      	mov	r6, r5
        /* We will put this task to sleep */
        sched = 1;
        os_sched_sleep(current, timeout);
    }

    OS_EXIT_CRITICAL(sr);
    d6e6:	4638      	mov	r0, r7
    d6e8:	f7fe ffd4 	bl	c694 <os_arch_restore_sr>

    if (sched) {
    d6ec:	b17e      	cbz	r6, d70e <os_sem_pend+0x52>
        os_sched(NULL);
    d6ee:	2000      	movs	r0, #0
    d6f0:	f7ff fea4 	bl	d43c <os_sched>
        /* Check if we timed out or got the semaphore */
        if (current->t_flags & OS_TASK_FLAG_SEM_WAIT) {
    d6f4:	7b65      	ldrb	r5, [r4, #13]
    d6f6:	f015 0502 	ands.w	r5, r5, #2
    d6fa:	d008      	beq.n	d70e <os_sem_pend+0x52>
            OS_ENTER_CRITICAL(sr);
    d6fc:	f7fe ffc4 	bl	c688 <os_arch_save_sr>
            current->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
    d700:	7b63      	ldrb	r3, [r4, #13]
    d702:	f023 0302 	bic.w	r3, r3, #2
    d706:	7363      	strb	r3, [r4, #13]
            OS_EXIT_CRITICAL(sr);
    d708:	f7fe ffc4 	bl	c694 <os_arch_restore_sr>
            ret = OS_TIMEOUT;
    d70c:	2506      	movs	r5, #6
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_PEND, (uint32_t)ret);
    return ret;
}
    d70e:	4628      	mov	r0, r5
    d710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (timeout == 0) {
    d712:	b306      	cbz	r6, d756 <os_sem_pend+0x9a>
        current->t_flags |= OS_TASK_FLAG_SEM_WAIT;
    d714:	7b62      	ldrb	r2, [r4, #13]
        current->t_obj = sem;
    d716:	61e5      	str	r5, [r4, #28]
        current->t_flags |= OS_TASK_FLAG_SEM_WAIT;
    d718:	f042 0202 	orr.w	r2, r2, #2
    d71c:	7362      	strb	r2, [r4, #13]
        if (!SLIST_EMPTY(&sem->sem_head)) {
    d71e:	6829      	ldr	r1, [r5, #0]
    d720:	b1b1      	cbz	r1, d750 <os_sem_pend+0x94>
                if (current->t_prio < entry->t_prio) {
    d722:	f894 c00b 	ldrb.w	ip, [r4, #11]
    d726:	460a      	mov	r2, r1
    d728:	7ad0      	ldrb	r0, [r2, #11]
    d72a:	4560      	cmp	r0, ip
    d72c:	d80e      	bhi.n	d74c <os_sem_pend+0x90>
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
    d72e:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
    d730:	4613      	mov	r3, r2
    d732:	b948      	cbnz	r0, d748 <os_sem_pend+0x8c>
            SLIST_INSERT_AFTER(last, current, t_obj_list);
    d734:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    d736:	64e2      	str	r2, [r4, #76]	; 0x4c
    d738:	64dc      	str	r4, [r3, #76]	; 0x4c
        os_sched_sleep(current, timeout);
    d73a:	4631      	mov	r1, r6
    d73c:	4620      	mov	r0, r4
    d73e:	f7ff fe8f 	bl	d460 <os_sched_sleep>
        ret = OS_OK;
    d742:	2500      	movs	r5, #0
        sched = 1;
    d744:	2601      	movs	r6, #1
    d746:	e7ce      	b.n	d6e6 <os_sem_pend+0x2a>
    d748:	4602      	mov	r2, r0
    d74a:	e7ed      	b.n	d728 <os_sem_pend+0x6c>
        if (last) {
    d74c:	2b00      	cmp	r3, #0
    d74e:	d1f1      	bne.n	d734 <os_sem_pend+0x78>
            SLIST_INSERT_HEAD(&sem->sem_head, current, t_obj_list);
    d750:	64e1      	str	r1, [r4, #76]	; 0x4c
    d752:	602c      	str	r4, [r5, #0]
    d754:	e7f1      	b.n	d73a <os_sem_pend+0x7e>
        ret = OS_TIMEOUT;
    d756:	2506      	movs	r5, #6
    d758:	e7c5      	b.n	d6e6 <os_sem_pend+0x2a>
        ret = OS_NOT_STARTED;
    d75a:	2509      	movs	r5, #9
    d75c:	e7d7      	b.n	d70e <os_sem_pend+0x52>
        ret = OS_INVALID_PARM;
    d75e:	2503      	movs	r5, #3
    d760:	e7d5      	b.n	d70e <os_sem_pend+0x52>
    d762:	bf00      	nop
    d764:	20002d98 	.word	0x20002d98

0000d768 <os_task_init>:

int
os_task_init(struct os_task *t, const char *name, os_task_func_t func,
        void *arg, uint8_t prio, os_time_t sanity_itvl,
        os_stack_t *stack_bottom, uint16_t stack_size)
{
    d768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d76c:	4604      	mov	r4, r0
    d76e:	461e      	mov	r6, r3
    d770:	460d      	mov	r5, r1
    d772:	4692      	mov	sl, r2
    struct os_sanity_check *sc;
    int rc;
    struct os_task *task;

    memset(t, 0, sizeof(*t));
    d774:	2100      	movs	r1, #0
    d776:	2250      	movs	r2, #80	; 0x50
{
    d778:	e9dd 9709 	ldrd	r9, r7, [sp, #36]	; 0x24
    d77c:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    memset(t, 0, sizeof(*t));
    d780:	f002 fd83 	bl	1028a <memset>

    t->t_func = func;
    t->t_arg = arg;
    d784:	e9c4 a605 	strd	sl, r6, [r4, #20]
    OS_ENTER_CRITICAL(sr);
    d788:	f7fe ff7e 	bl	c688 <os_arch_save_sr>
    rc = g_task_id;
    d78c:	4b2c      	ldr	r3, [pc, #176]	; (d840 <os_task_init+0xd8>)
    d78e:	781e      	ldrb	r6, [r3, #0]
    g_task_id++;
    d790:	1c72      	adds	r2, r6, #1
    d792:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
    d794:	f7fe ff7e 	bl	c694 <os_arch_restore_sr>

    t->t_taskid = os_task_next_id();
    t->t_prio = prio;
    d798:	f89d 3020 	ldrb.w	r3, [sp, #32]
    d79c:	72e3      	strb	r3, [r4, #11]

    t->t_state = OS_TASK_READY;
    d79e:	2301      	movs	r3, #1
    d7a0:	7323      	strb	r3, [r4, #12]
    t->t_name = name;
    d7a2:	6125      	str	r5, [r4, #16]
    t->t_next_wakeup = 0;
    d7a4:	2300      	movs	r3, #0

    rc = os_sanity_check_init(&t->t_sanity_check);
    d7a6:	f104 0520 	add.w	r5, r4, #32
    t->t_taskid = os_task_next_id();
    d7aa:	72a6      	strb	r6, [r4, #10]
    t->t_next_wakeup = 0;
    d7ac:	6363      	str	r3, [r4, #52]	; 0x34
    rc = os_sanity_check_init(&t->t_sanity_check);
    d7ae:	4628      	mov	r0, r5
    d7b0:	f7ff fdb4 	bl	d31c <os_sanity_check_init>
    if (rc != OS_OK) {
    d7b4:	4606      	mov	r6, r0
    d7b6:	2800      	cmp	r0, #0
    d7b8:	d13f      	bne.n	d83a <os_task_init+0xd2>
        goto err;
    }

    if (sanity_itvl != OS_WAIT_FOREVER) {
    d7ba:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
    d7be:	d121      	bne.n	d804 <os_task_init+0x9c>
        stack_bottom[i] = OS_STACK_PATTERN;
    d7c0:	4b20      	ldr	r3, [pc, #128]	; (d844 <os_task_init+0xdc>)
    for (i = 0; i < size; i++) {
    d7c2:	45b0      	cmp	r8, r6
    d7c4:	dc29      	bgt.n	d81a <os_task_init+0xb2>
            goto err;
        }
    }

    _clear_stack(stack_bottom, stack_size);
    t->t_stacktop = &stack_bottom[stack_size];
    d7c6:	eb07 0188 	add.w	r1, r7, r8, lsl #2
    d7ca:	6061      	str	r1, [r4, #4]
    t->t_stacksize = stack_size;
    d7cc:	f8a4 8008 	strh.w	r8, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, t->t_stacktop,
    d7d0:	4642      	mov	r2, r8
    d7d2:	4620      	mov	r0, r4
    d7d4:	f7fe ff66 	bl	c6a4 <os_arch_task_stack_init>
            t->t_stacksize);

    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
    d7d8:	4b1b      	ldr	r3, [pc, #108]	; (d848 <os_task_init+0xe0>)
    t->t_stackptr = os_arch_task_stack_init(t, t->t_stacktop,
    d7da:	6020      	str	r0, [r4, #0]
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
    d7dc:	681e      	ldr	r6, [r3, #0]
    d7de:	bb06      	cbnz	r6, d822 <os_task_init+0xba>
        assert(t->t_prio != task->t_prio);
    }

    /* insert this task into the task list */
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
    d7e0:	685a      	ldr	r2, [r3, #4]
    d7e2:	6426      	str	r6, [r4, #64]	; 0x40

    /* insert this task into the scheduler list */
    rc = os_sched_insert(t);
    d7e4:	4620      	mov	r0, r4
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
    d7e6:	6014      	str	r4, [r2, #0]
    d7e8:	f104 0240 	add.w	r2, r4, #64	; 0x40
    d7ec:	605a      	str	r2, [r3, #4]
    rc = os_sched_insert(t);
    d7ee:	f7ff fddd 	bl	d3ac <os_sched_insert>
    if (rc != OS_OK) {
    d7f2:	4605      	mov	r5, r0
    d7f4:	b970      	cbnz	r0, d814 <os_task_init+0xac>
    os_trace_task_info(t);

    /* Allow a preemption in case the new task has a higher priority than the
     * current one.
     */
    if (os_started()) {
    d7f6:	f7ff f8bd 	bl	c974 <os_started>
    d7fa:	b158      	cbz	r0, d814 <os_task_init+0xac>
        os_sched(NULL);
    d7fc:	4630      	mov	r0, r6
    d7fe:	f7ff fe1d 	bl	d43c <os_sched>
    d802:	e007      	b.n	d814 <os_task_init+0xac>
        rc = os_sanity_check_register(sc);
    d804:	4628      	mov	r0, r5
        sc->sc_checkin_itvl = sanity_itvl;
    d806:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
        rc = os_sanity_check_register(sc);
    d80a:	f7ff fd8f 	bl	d32c <os_sanity_check_register>
        if (rc != OS_OK) {
    d80e:	4605      	mov	r5, r0
    d810:	2800      	cmp	r0, #0
    d812:	d0d5      	beq.n	d7c0 <os_task_init+0x58>
    }

    return (0);
err:
    return (rc);
}
    d814:	4628      	mov	r0, r5
    d816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        stack_bottom[i] = OS_STACK_PATTERN;
    d81a:	f847 3026 	str.w	r3, [r7, r6, lsl #2]
    for (i = 0; i < size; i++) {
    d81e:	3601      	adds	r6, #1
    d820:	e7cf      	b.n	d7c2 <os_task_init+0x5a>
        assert(t->t_prio != task->t_prio);
    d822:	7ae1      	ldrb	r1, [r4, #11]
    d824:	7af2      	ldrb	r2, [r6, #11]
    d826:	4291      	cmp	r1, r2
    d828:	d105      	bne.n	d836 <os_task_init+0xce>
    d82a:	2300      	movs	r3, #0
    d82c:	461a      	mov	r2, r3
    d82e:	4619      	mov	r1, r3
    d830:	4618      	mov	r0, r3
    d832:	f7fe ffe3 	bl	c7fc <__assert_func>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
    d836:	6c36      	ldr	r6, [r6, #64]	; 0x40
    d838:	e7d1      	b.n	d7de <os_task_init+0x76>
    d83a:	4605      	mov	r5, r0
    d83c:	e7ea      	b.n	d814 <os_task_init+0xac>
    d83e:	bf00      	nop
    d840:	20003bbc 	.word	0x20003bbc
    d844:	deadbeef 	.word	0xdeadbeef
    d848:	20003bb4 	.word	0x20003bb4

0000d84c <os_task_remove>:

int
os_task_remove(struct os_task *t)
{
    d84c:	b538      	push	{r3, r4, r5, lr}
    d84e:	4604      	mov	r4, r0
    os_sr_t sr;

    /*
     * Can't suspend yourself
     */
    if (t == os_sched_get_current_task()) {
    d850:	f7ff fde8 	bl	d424 <os_sched_get_current_task>
    d854:	4284      	cmp	r4, r0
    d856:	d015      	beq.n	d884 <os_task_remove+0x38>
    }

    /*
     * If state is not READY or SLEEP, assume task has not been initialized
     */
    if (t->t_state != OS_TASK_READY && t->t_state != OS_TASK_SLEEP)
    d858:	7b23      	ldrb	r3, [r4, #12]
    d85a:	3b01      	subs	r3, #1
    d85c:	2b01      	cmp	r3, #1
    d85e:	d813      	bhi.n	d888 <os_task_remove+0x3c>
    }

    /*
     * Disallow suspending tasks which are waiting on a lock
     */
    if (t->t_flags & (OS_TASK_FLAG_SEM_WAIT | OS_TASK_FLAG_MUTEX_WAIT |
    d860:	7b63      	ldrb	r3, [r4, #13]
    d862:	f013 0f0e 	tst.w	r3, #14
    d866:	d111      	bne.n	d88c <os_task_remove+0x40>
    }

    /*
     * Disallowing suspending tasks which are holding a mutex
     */
    if (t->t_lockcnt) {
    d868:	7ba3      	ldrb	r3, [r4, #14]
    d86a:	b97b      	cbnz	r3, d88c <os_task_remove+0x40>
        return OS_EBUSY;
    }

    OS_ENTER_CRITICAL(sr);
    d86c:	f7fe ff0c 	bl	c688 <os_arch_save_sr>
    d870:	4605      	mov	r5, r0
    rc = os_sched_remove(t);
    d872:	4620      	mov	r0, r4
    d874:	f7ff fe2e 	bl	d4d4 <os_sched_remove>
    d878:	4604      	mov	r4, r0
    OS_EXIT_CRITICAL(sr);
    d87a:	4628      	mov	r0, r5
    d87c:	f7fe ff0a 	bl	c694 <os_arch_restore_sr>
    return rc;
}
    d880:	4620      	mov	r0, r4
    d882:	bd38      	pop	{r3, r4, r5, pc}
        return OS_INVALID_PARM;
    d884:	2403      	movs	r4, #3
    d886:	e7fb      	b.n	d880 <os_task_remove+0x34>
        return OS_NOT_STARTED;
    d888:	2409      	movs	r4, #9
    d88a:	e7f9      	b.n	d880 <os_task_remove+0x34>
        return OS_EBUSY;
    d88c:	240b      	movs	r4, #11
    d88e:	e7f7      	b.n	d880 <os_task_remove+0x34>

0000d890 <os_task_info_get_next>:


struct os_task *
os_task_info_get_next(const struct os_task *prev, struct os_task_info *oti)
{
    d890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d892:	460b      	mov	r3, r1
    struct os_task *next;
    os_stack_t *top;
    os_stack_t *bottom;

    if (prev != NULL) {
    d894:	b348      	cbz	r0, d8ea <os_task_info_get_next+0x5a>
        next = STAILQ_NEXT(prev, t_os_task_list);
    d896:	6c04      	ldr	r4, [r0, #64]	; 0x40
    } else {
        next = STAILQ_FIRST(&g_os_task_list);
    }

    if (next == NULL) {
    d898:	b32c      	cbz	r4, d8e6 <os_task_info_get_next+0x56>
    }

    /* Otherwise, copy OS task information into the OTI structure, and
     * return 1, which means continue
     */
    oti->oti_prio = next->t_prio;
    d89a:	7ae2      	ldrb	r2, [r4, #11]
    d89c:	701a      	strb	r2, [r3, #0]
    oti->oti_taskid = next->t_taskid;
    d89e:	7aa2      	ldrb	r2, [r4, #10]
    d8a0:	705a      	strb	r2, [r3, #1]
    oti->oti_state = next->t_state;
    d8a2:	7b22      	ldrb	r2, [r4, #12]
    d8a4:	709a      	strb	r2, [r3, #2]

    top = next->t_stacktop;
    d8a6:	6862      	ldr	r2, [r4, #4]
    bottom = next->t_stacktop - next->t_stacksize;
    d8a8:	8920      	ldrh	r0, [r4, #8]
    while (bottom < top) {
        if (*bottom != OS_STACK_PATTERN) {
    d8aa:	4e11      	ldr	r6, [pc, #68]	; (d8f0 <os_task_info_get_next+0x60>)
    bottom = next->t_stacktop - next->t_stacksize;
    d8ac:	eba2 0180 	sub.w	r1, r2, r0, lsl #2
    while (bottom < top) {
    d8b0:	4291      	cmp	r1, r2
    d8b2:	460d      	mov	r5, r1
    d8b4:	d204      	bcs.n	d8c0 <os_task_info_get_next+0x30>
        if (*bottom != OS_STACK_PATTERN) {
    d8b6:	682f      	ldr	r7, [r5, #0]
    d8b8:	42b7      	cmp	r7, r6
    d8ba:	f101 0104 	add.w	r1, r1, #4
    d8be:	d0f7      	beq.n	d8b0 <os_task_info_get_next+0x20>
            break;
        }
        ++bottom;
    }

    oti->oti_stkusage = (uint16_t) (next->t_stacktop - bottom);
    d8c0:	1b52      	subs	r2, r2, r5
    d8c2:	1092      	asrs	r2, r2, #2
    d8c4:	809a      	strh	r2, [r3, #4]
    oti->oti_stksize = next->t_stacksize;
    oti->oti_cswcnt = next->t_ctx_sw_cnt;
    d8c6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    d8c8:	609a      	str	r2, [r3, #8]
    oti->oti_runtime = next->t_run_time;
    d8ca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    oti->oti_last_checkin = next->t_sanity_check.sc_checkin_last;
    d8cc:	6a21      	ldr	r1, [r4, #32]
    oti->oti_runtime = next->t_run_time;
    d8ce:	60da      	str	r2, [r3, #12]
    oti->oti_next_checkin = next->t_sanity_check.sc_checkin_last +
    d8d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
    oti->oti_stksize = next->t_stacksize;
    d8d2:	80d8      	strh	r0, [r3, #6]
    oti->oti_next_checkin = next->t_sanity_check.sc_checkin_last +
    d8d4:	440a      	add	r2, r1
    oti->oti_last_checkin = next->t_sanity_check.sc_checkin_last;
    d8d6:	6119      	str	r1, [r3, #16]
    oti->oti_next_checkin = next->t_sanity_check.sc_checkin_last +
    d8d8:	615a      	str	r2, [r3, #20]
        next->t_sanity_check.sc_checkin_itvl;
    strncpy(oti->oti_name, next->t_name, sizeof(oti->oti_name));
    d8da:	6921      	ldr	r1, [r4, #16]
    d8dc:	2220      	movs	r2, #32
    d8de:	f103 0018 	add.w	r0, r3, #24
    d8e2:	f002 fcf8 	bl	102d6 <strncpy>

    return (next);
}
    d8e6:	4620      	mov	r0, r4
    d8e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        next = STAILQ_FIRST(&g_os_task_list);
    d8ea:	4a02      	ldr	r2, [pc, #8]	; (d8f4 <os_task_info_get_next+0x64>)
    d8ec:	6814      	ldr	r4, [r2, #0]
    d8ee:	e7d3      	b.n	d898 <os_task_info_get_next+0x8>
    d8f0:	deadbeef 	.word	0xdeadbeef
    d8f4:	20003bb4 	.word	0x20003bb4

0000d8f8 <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
    d8f8:	b530      	push	{r4, r5, lr}
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
    os_timeradd(base, &tvdelta, result);
    d8fa:	e9d1 5400 	ldrd	r5, r4, [r1]
    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
    d8fe:	09c3      	lsrs	r3, r0, #7
    os_timeradd(base, &tvdelta, result);
    d900:	195b      	adds	r3, r3, r5
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
    d902:	f000 057f 	and.w	r5, r0, #127	; 0x7f
    os_timeradd(base, &tvdelta, result);
    d906:	6888      	ldr	r0, [r1, #8]
    d908:	f641 6184 	movw	r1, #7812	; 0x1e84
    d90c:	fb01 0005 	mla	r0, r1, r5, r0
    d910:	4909      	ldr	r1, [pc, #36]	; (d938 <os_deltatime+0x40>)
    d912:	6090      	str	r0, [r2, #8]
    d914:	f144 0400 	adc.w	r4, r4, #0
    d918:	4288      	cmp	r0, r1
    d91a:	e9c2 3400 	strd	r3, r4, [r2]
    d91e:	dd09      	ble.n	d934 <os_deltatime+0x3c>
    d920:	3301      	adds	r3, #1
    d922:	f144 0400 	adc.w	r4, r4, #0
    d926:	f5a0 2074 	sub.w	r0, r0, #999424	; 0xf4000
    d92a:	e9c2 3400 	strd	r3, r4, [r2]
    d92e:	f5a0 7010 	sub.w	r0, r0, #576	; 0x240
    d932:	6090      	str	r0, [r2, #8]
}
    d934:	bd30      	pop	{r4, r5, pc}
    d936:	bf00      	nop
    d938:	000f423f 	.word	0x000f423f

0000d93c <os_time_get>:

os_time_t
os_time_get(void)
{
    return (g_os_time);
}
    d93c:	4b01      	ldr	r3, [pc, #4]	; (d944 <os_time_get+0x8>)
    d93e:	6818      	ldr	r0, [r3, #0]
    d940:	4770      	bx	lr
    d942:	bf00      	nop
    d944:	20003bf0 	.word	0x20003bf0

0000d948 <os_time_advance>:
    OS_EXIT_CRITICAL(sr);
}

void
os_time_advance(int ticks)
{
    d948:	b573      	push	{r0, r1, r4, r5, r6, lr}
    assert(ticks >= 0);
    d94a:	1e04      	subs	r4, r0, #0
    d94c:	da05      	bge.n	d95a <os_time_advance+0x12>
    d94e:	2300      	movs	r3, #0
    d950:	461a      	mov	r2, r3
    d952:	4619      	mov	r1, r3
    d954:	4618      	mov	r0, r3
    d956:	f7fe ff51 	bl	c7fc <__assert_func>

    if (ticks > 0) {
    d95a:	d006      	beq.n	d96a <os_time_advance+0x22>
        if (!os_started()) {
    d95c:	f7ff f80a 	bl	c974 <os_started>
    d960:	4d16      	ldr	r5, [pc, #88]	; (d9bc <os_time_advance+0x74>)
    d962:	b920      	cbnz	r0, d96e <os_time_advance+0x26>
            g_os_time += ticks;
    d964:	682b      	ldr	r3, [r5, #0]
    d966:	4423      	add	r3, r4
    d968:	602b      	str	r3, [r5, #0]
            os_callout_tick();
            os_sched_os_timer_exp();
            os_sched(NULL);
        }
    }
}
    d96a:	b002      	add	sp, #8
    d96c:	bd70      	pop	{r4, r5, r6, pc}
    OS_ENTER_CRITICAL(sr);
    d96e:	f7fe fe8b 	bl	c688 <os_arch_save_sr>
    prev_os_time = g_os_time;
    d972:	682a      	ldr	r2, [r5, #0]
    g_os_time += ticks;
    d974:	18a3      	adds	r3, r4, r2
    if ((prev_os_time ^ g_os_time) >> 31) {
    d976:	ea92 0f03 	teq	r2, r3
    OS_ENTER_CRITICAL(sr);
    d97a:	4606      	mov	r6, r0
    g_os_time += ticks;
    d97c:	602b      	str	r3, [r5, #0]
    if ((prev_os_time ^ g_os_time) >> 31) {
    d97e:	d510      	bpl.n	d9a2 <os_time_advance+0x5a>
        delta = g_os_time - basetod.ostime;
    d980:	4c0f      	ldr	r4, [pc, #60]	; (d9c0 <os_time_advance+0x78>)
    d982:	4622      	mov	r2, r4
    d984:	f852 0b08 	ldr.w	r0, [r2], #8
    d988:	1a18      	subs	r0, r3, r0
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
    d98a:	4611      	mov	r1, r2
    d98c:	9001      	str	r0, [sp, #4]
    d98e:	f7ff ffb3 	bl	d8f8 <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
    d992:	f104 0218 	add.w	r2, r4, #24
    d996:	9801      	ldr	r0, [sp, #4]
    d998:	4611      	mov	r1, r2
    d99a:	f7ff ffad 	bl	d8f8 <os_deltatime>
        basetod.ostime = g_os_time;
    d99e:	682b      	ldr	r3, [r5, #0]
    d9a0:	6023      	str	r3, [r4, #0]
    OS_EXIT_CRITICAL(sr);
    d9a2:	4630      	mov	r0, r6
    d9a4:	f7fe fe76 	bl	c694 <os_arch_restore_sr>
            os_callout_tick();
    d9a8:	f7ff f8fa 	bl	cba0 <os_callout_tick>
            os_sched_os_timer_exp();
    d9ac:	f7ff fdfc 	bl	d5a8 <os_sched_os_timer_exp>
            os_sched(NULL);
    d9b0:	2000      	movs	r0, #0
}
    d9b2:	b002      	add	sp, #8
    d9b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_sched(NULL);
    d9b8:	f7ff bd40 	b.w	d43c <os_sched>
    d9bc:	20003bf0 	.word	0x20003bf0
    d9c0:	20003bc0 	.word	0x20003bc0

0000d9c4 <os_time_delay>:

void
os_time_delay(os_time_t osticks)
{
    d9c4:	b538      	push	{r3, r4, r5, lr}
    os_sr_t sr;

    if (osticks > 0) {
    d9c6:	4604      	mov	r4, r0
    d9c8:	b178      	cbz	r0, d9ea <os_time_delay+0x26>
        OS_ENTER_CRITICAL(sr);
    d9ca:	f7fe fe5d 	bl	c688 <os_arch_save_sr>
    d9ce:	4605      	mov	r5, r0
        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);
    d9d0:	f7ff fd28 	bl	d424 <os_sched_get_current_task>
    d9d4:	4621      	mov	r1, r4
    d9d6:	f7ff fd43 	bl	d460 <os_sched_sleep>
        OS_EXIT_CRITICAL(sr);
    d9da:	4628      	mov	r0, r5
    d9dc:	f7fe fe5a 	bl	c694 <os_arch_restore_sr>
        os_sched(NULL);
    }
}
    d9e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        os_sched(NULL);
    d9e4:	2000      	movs	r0, #0
    d9e6:	f7ff bd29 	b.w	d43c <os_sched>
}
    d9ea:	bd38      	pop	{r3, r4, r5, pc}

0000d9ec <os_gettimeofday>:
    return (0);
}

int
os_gettimeofday(struct os_timeval *tv, struct os_timezone *tz)
{
    d9ec:	b570      	push	{r4, r5, r6, lr}
    d9ee:	4605      	mov	r5, r0
    d9f0:	460c      	mov	r4, r1
    os_sr_t sr;
    os_time_t delta;

    OS_ENTER_CRITICAL(sr);
    d9f2:	f7fe fe49 	bl	c688 <os_arch_save_sr>
    d9f6:	4606      	mov	r6, r0
    if (tv != NULL) {
    d9f8:	b145      	cbz	r5, da0c <os_gettimeofday+0x20>
    return (g_os_time);
    d9fa:	4b09      	ldr	r3, [pc, #36]	; (da20 <os_gettimeofday+0x34>)
        delta = os_time_get() - basetod.ostime;
    d9fc:	4909      	ldr	r1, [pc, #36]	; (da24 <os_gettimeofday+0x38>)
    d9fe:	6818      	ldr	r0, [r3, #0]
    da00:	f851 3b18 	ldr.w	r3, [r1], #24
        os_deltatime(delta, &basetod.utctime, tv);
    da04:	462a      	mov	r2, r5
    da06:	1ac0      	subs	r0, r0, r3
    da08:	f7ff ff76 	bl	d8f8 <os_deltatime>
    }

    if (tz != NULL) {
    da0c:	b114      	cbz	r4, da14 <os_gettimeofday+0x28>
        *tz = basetod.timezone;
    da0e:	4b05      	ldr	r3, [pc, #20]	; (da24 <os_gettimeofday+0x38>)
    da10:	6a98      	ldr	r0, [r3, #40]	; 0x28
    da12:	6020      	str	r0, [r4, #0]
    }
    OS_EXIT_CRITICAL(sr);
    da14:	4630      	mov	r0, r6
    da16:	f7fe fe3d 	bl	c694 <os_arch_restore_sr>

    return (0);
}
    da1a:	2000      	movs	r0, #0
    da1c:	bd70      	pop	{r4, r5, r6, pc}
    da1e:	bf00      	nop
    da20:	20003bf0 	.word	0x20003bf0
    da24:	20003bc0 	.word	0x20003bc0

0000da28 <os_time_is_set>:

bool
os_time_is_set(void)
{
    return basetod.utctime.tv_sec > 0;
    da28:	4b04      	ldr	r3, [pc, #16]	; (da3c <os_time_is_set+0x14>)
    da2a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
    da2e:	2a01      	cmp	r2, #1
    da30:	f173 0300 	sbcs.w	r3, r3, #0
}
    da34:	bfac      	ite	ge
    da36:	2001      	movge	r0, #1
    da38:	2000      	movlt	r0, #0
    da3a:	4770      	bx	lr
    da3c:	20003bc0 	.word	0x20003bc0

0000da40 <os_settimeofday>:
{
    da40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    da44:	b087      	sub	sp, #28
    da46:	4605      	mov	r5, r0
    da48:	460c      	mov	r4, r1
    OS_ENTER_CRITICAL(sr);
    da4a:	f7fe fe1d 	bl	c688 <os_arch_save_sr>
    da4e:	4681      	mov	r9, r0
    if (new_tv == NULL && new_tz == NULL) {
    da50:	2d00      	cmp	r5, #0
    da52:	d134      	bne.n	dabe <os_settimeofday+0x7e>
    da54:	2c00      	cmp	r4, #0
    da56:	d038      	beq.n	daca <os_settimeofday+0x8a>
        new_tv = &basetod.utctime;
    da58:	4a20      	ldr	r2, [pc, #128]	; (dadc <os_settimeofday+0x9c>)
    da5a:	4623      	mov	r3, r4
    info->tci_prev_tv = &basetod.utctime;
    da5c:	4e20      	ldr	r6, [pc, #128]	; (dae0 <os_settimeofday+0xa0>)
    info->tci_cur_tv = new_tv;
    da5e:	9203      	str	r2, [sp, #12]
    info->tci_prev_tv = &basetod.utctime;
    da60:	f106 0718 	add.w	r7, r6, #24
    info->tci_prev_tz = &basetod.timezone;
    da64:	f106 0228 	add.w	r2, r6, #40	; 0x28
    info->tci_prev_tv = &basetod.utctime;
    da68:	9701      	str	r7, [sp, #4]
    info->tci_prev_tz = &basetod.timezone;
    da6a:	9202      	str	r2, [sp, #8]
    info->tci_cur_tz = new_tz;
    da6c:	9304      	str	r3, [sp, #16]
    info->tci_newly_synced = !os_time_is_set();
    da6e:	f7ff ffdb 	bl	da28 <os_time_is_set>
    da72:	f080 0001 	eor.w	r0, r0, #1
    da76:	f88d 0014 	strb.w	r0, [sp, #20]
    if (utctime != NULL) {
    da7a:	b18d      	cbz	r5, daa0 <os_settimeofday+0x60>
        delta = os_time_get() - basetod.ostime;
    da7c:	4632      	mov	r2, r6
    return (g_os_time);
    da7e:	4b19      	ldr	r3, [pc, #100]	; (dae4 <os_settimeofday+0xa4>)
        delta = os_time_get() - basetod.ostime;
    da80:	f852 1b08 	ldr.w	r1, [r2], #8
    da84:	681b      	ldr	r3, [r3, #0]
    da86:	eba3 0801 	sub.w	r8, r3, r1
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
    da8a:	4640      	mov	r0, r8
    da8c:	4611      	mov	r1, r2
    da8e:	f7ff ff33 	bl	d8f8 <os_deltatime>
        basetod.utctime = *utctime;
    da92:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    da96:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
        basetod.ostime += delta;
    da9a:	6833      	ldr	r3, [r6, #0]
    da9c:	4443      	add	r3, r8
    da9e:	6033      	str	r3, [r6, #0]
    if (tz != NULL) {
    daa0:	b114      	cbz	r4, daa8 <os_settimeofday+0x68>
        basetod.timezone = *tz;
    daa2:	6820      	ldr	r0, [r4, #0]
    daa4:	62b0      	str	r0, [r6, #40]	; 0x28
    daa6:	2400      	movs	r4, #0
    OS_EXIT_CRITICAL(sr);
    daa8:	4648      	mov	r0, r9
    daaa:	f7fe fdf3 	bl	c694 <os_arch_restore_sr>
    if (notify) {
    daae:	b914      	cbnz	r4, dab6 <os_settimeofday+0x76>
    STAILQ_FOREACH(listener, &os_time_change_listeners, tcl_next) {
    dab0:	4b0d      	ldr	r3, [pc, #52]	; (dae8 <os_settimeofday+0xa8>)
    dab2:	681c      	ldr	r4, [r3, #0]
    dab4:	b964      	cbnz	r4, dad0 <os_settimeofday+0x90>
}
    dab6:	2000      	movs	r0, #0
    dab8:	b007      	add	sp, #28
    daba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (new_tz == NULL) {
    dabe:	4b0b      	ldr	r3, [pc, #44]	; (daec <os_settimeofday+0xac>)
    dac0:	462a      	mov	r2, r5
    dac2:	2c00      	cmp	r4, #0
    dac4:	bf18      	it	ne
    dac6:	4623      	movne	r3, r4
    dac8:	e7c8      	b.n	da5c <os_settimeofday+0x1c>
        return SYS_EINVAL;
    daca:	f06f 0401 	mvn.w	r4, #1
    dace:	e7eb      	b.n	daa8 <os_settimeofday+0x68>
        listener->tcl_fn(info, listener->tcl_arg);
    dad0:	e9d4 3100 	ldrd	r3, r1, [r4]
    dad4:	a801      	add	r0, sp, #4
    dad6:	4798      	blx	r3
    STAILQ_FOREACH(listener, &os_time_change_listeners, tcl_next) {
    dad8:	68a4      	ldr	r4, [r4, #8]
    dada:	e7eb      	b.n	dab4 <os_settimeofday+0x74>
    dadc:	20003bd8 	.word	0x20003bd8
    dae0:	20003bc0 	.word	0x20003bc0
    dae4:	20003bf0 	.word	0x20003bf0
    dae8:	20001350 	.word	0x20001350
    daec:	20003be8 	.word	0x20003be8

0000daf0 <os_get_uptime>:

void
os_get_uptime(struct os_timeval *tvp)
{
    daf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    daf2:	b085      	sub	sp, #20
  os_time_t delta;
  os_sr_t sr;
  os_time_t ostime;

  OS_ENTER_CRITICAL(sr);
  tv = basetod.uptime;
    daf4:	4f0c      	ldr	r7, [pc, #48]	; (db28 <os_get_uptime+0x38>)
{
    daf6:	4606      	mov	r6, r0
  OS_ENTER_CRITICAL(sr);
    daf8:	f7fe fdc6 	bl	c688 <os_arch_save_sr>
  tv = basetod.uptime;
    dafc:	f107 0308 	add.w	r3, r7, #8
  OS_ENTER_CRITICAL(sr);
    db00:	4684      	mov	ip, r0
  tv = basetod.uptime;
    db02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    db04:	466c      	mov	r4, sp
    db06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return (g_os_time);
    db0a:	4b08      	ldr	r3, [pc, #32]	; (db2c <os_get_uptime+0x3c>)
  ostime = basetod.ostime;
  delta = os_time_get() - ostime;
    db0c:	681d      	ldr	r5, [r3, #0]
    db0e:	683b      	ldr	r3, [r7, #0]
  OS_EXIT_CRITICAL(sr);
    db10:	4660      	mov	r0, ip
  delta = os_time_get() - ostime;
    db12:	1aed      	subs	r5, r5, r3
  OS_EXIT_CRITICAL(sr);
    db14:	f7fe fdbe 	bl	c694 <os_arch_restore_sr>

  os_deltatime(delta, &tv, tvp);
    db18:	4632      	mov	r2, r6
    db1a:	4621      	mov	r1, r4
    db1c:	4628      	mov	r0, r5
    db1e:	f7ff feeb 	bl	d8f8 <os_deltatime>
}
    db22:	b005      	add	sp, #20
    db24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    db26:	bf00      	nop
    db28:	20003bc0 	.word	0x20003bc0
    db2c:	20003bf0 	.word	0x20003bf0

0000db30 <os_get_uptime_usec>:

int64_t
os_get_uptime_usec(void)
{
    db30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  struct os_timeval tv;

  os_get_uptime(&tv);
    db32:	4668      	mov	r0, sp
    db34:	f7ff ffdc 	bl	daf0 <os_get_uptime>

  return (tv.tv_sec * 1000000 + tv.tv_usec);
    db38:	4906      	ldr	r1, [pc, #24]	; (db54 <os_get_uptime_usec+0x24>)
    db3a:	9800      	ldr	r0, [sp, #0]
    db3c:	9a01      	ldr	r2, [sp, #4]
    db3e:	fba0 0301 	umull	r0, r3, r0, r1
    db42:	fb01 3302 	mla	r3, r1, r2, r3
    db46:	9902      	ldr	r1, [sp, #8]
    db48:	1840      	adds	r0, r0, r1
}
    db4a:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
    db4e:	b005      	add	sp, #20
    db50:	f85d fb04 	ldr.w	pc, [sp], #4
    db54:	000f4240 	.word	0x000f4240

0000db58 <os_time_ms_to_ticks>:

int
os_time_ms_to_ticks(uint32_t ms, os_time_t *out_ticks)
{
    db58:	b538      	push	{r3, r4, r5, lr}
    db5a:	4604      	mov	r4, r0
    db5c:	460d      	mov	r5, r1
#endif

    static_assert(OS_TICKS_PER_SEC <= UINT32_MAX,
                  "OS_TICKS_PER_SEC must be <= UINT32_MAX");

    ticks = ((uint64_t)ms * OS_TICKS_PER_SEC) / 1000;
    db5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    db62:	2300      	movs	r3, #0
    db64:	0e61      	lsrs	r1, r4, #25
    db66:	01c0      	lsls	r0, r0, #7
    db68:	f011 f9be 	bl	1eee8 <__aeabi_uldivmod>
    if (ticks > UINT32_MAX) {
        return OS_EINVAL;
    }

    *out_ticks = ticks;
    db6c:	6028      	str	r0, [r5, #0]
    return 0;
}
    db6e:	2000      	movs	r0, #0
    db70:	bd38      	pop	{r3, r4, r5, pc}
	...

0000db74 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
    db74:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
    db78:	4832      	ldr	r0, [pc, #200]	; (dc44 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
    db7a:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
    db7c:	3002      	adds	r0, #2
        MSR     CONTROL,R0
    db7e:	f380 8814 	msr	CONTROL, r0
        ISB
    db82:	f3bf 8f6f 	isb	sy
        BX      LR
    db86:	4770      	bx	lr

0000db88 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
    db88:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
    db8c:	4770      	bx	lr

0000db8e <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
    db8e:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
    db92:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
    db94:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
    db98:	b951      	cbnz	r1, dbb0 <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
    db9a:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    db9e:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
    dba0:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    dba2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
    dba6:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
    dbaa:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
    dbae:	4770      	bx	lr

0000dbb0 <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    dbb0:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
    dbb2:	4a25      	ldr	r2, [pc, #148]	; (dc48 <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
    dbb4:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
    dbb6:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
    dbb8:	d809      	bhi.n	dbce <SVC_Done>

        LDR     R4,=SVC_Table-4
    dbba:	4c24      	ldr	r4, [pc, #144]	; (dc4c <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
    dbbc:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
    dbc0:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
    dbc4:	47a0      	blx	r4

        MRS     R12,PSP
    dbc6:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
    dbca:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

0000dbce <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    dbce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
    dbd2:	4770      	bx	lr

0000dbd4 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
    dbd4:	4b1e      	ldr	r3, [pc, #120]	; (dc50 <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
    dbd6:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
    dbd8:	4b1e      	ldr	r3, [pc, #120]	; (dc54 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
    dbda:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
    dbdc:	4291      	cmp	r1, r2
        IT      EQ
    dbde:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
    dbe0:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
    dbe2:	f3ef 8c09 	mrs	ip, PSP
#if MYNEWT_VAL(HARDFLOAT)
        TST     LR,#0x10                /* is it extended frame? */
    dbe6:	f01e 0f10 	tst.w	lr, #16
        IT      EQ
    dbea:	bf08      	it	eq
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
    dbec:	ed2c 8a10 	vstmdbeq	ip!, {s16-s31}
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
    dbf0:	e92c 4ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
    dbf4:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
    dbf8:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
    dbfa:	f8d2 c000 	ldr.w	ip, [r2]
#if MYNEWT_VAL(HARDFLOAT)
        LDMIA   R12!,{R4-R11,LR}        /* Restore New Context */
    dbfe:	e8bc 4ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        TST     LR,#0x10                /* is it extended frame? */
    dc02:	f01e 0f10 	tst.w	lr, #16
        ITTE    EQ
    dc06:	bf06      	itte	eq
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
    dc08:	ecbc 8a10 	vldmiaeq	ip!, {s16-s31}
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
    dc0c:	f06f 0e12 	mvneq.w	lr, #18
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
    dc10:	f06f 0e02 	mvnne.w	lr, #2
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
#endif
        MSR     PSP,R12                 /* Write PSP */
    dc14:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
    dc18:	4770      	bx	lr

0000dc1a <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    dc1a:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
    dc1c:	f7fe fd26 	bl	c66c <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    dc20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
    dc24:	4770      	bx	lr

0000dc26 <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
    dc26:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
    dc2a:	bf0c      	ite	eq
        MRSEQ   R3,MSP
    dc2c:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
    dc30:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
    dc34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
    dc38:	4668      	mov	r0, sp
        BL      os_default_irq
    dc3a:	f7fe fe05 	bl	c848 <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
    dc3e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
    dc42:	4770      	bx	lr
        LDR     R0,=os_flags
    dc44:	20001be8 	.word	0x20001be8
        LDR     R2,=SVC_Count
    dc48:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
    dc4c:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
    dc50:	20001340 	.word	0x20001340
        LDR     R3,=g_current_task      /* Get current task */
    dc54:	20003bac 	.word	0x20003bac

0000dc58 <_os_mbuf_trailingspace>:
{
    struct os_mbuf_pool *omp;

    omp = om->om_omp;

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    dc58:	6882      	ldr	r2, [r0, #8]
    dc5a:	8812      	ldrh	r2, [r2, #0]
    dc5c:	f100 0310 	add.w	r3, r0, #16
    dc60:	4413      	add	r3, r2
      (om->om_data + om->om_len);
    dc62:	88c2      	ldrh	r2, [r0, #6]
    dc64:	6800      	ldr	r0, [r0, #0]
    dc66:	4410      	add	r0, r2
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    dc68:	1a18      	subs	r0, r3, r0
}
    dc6a:	b280      	uxth	r0, r0
    dc6c:	4770      	bx	lr

0000dc6e <os_mqueue_init>:
#endif
#include "os/mynewt.h"

int
os_mqueue_init(struct os_mqueue *mq, os_event_fn *ev_cb, void *arg)
{
    dc6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_event *ev;

    STAILQ_INIT(&mq->mq_head);
    dc70:	2500      	movs	r5, #0
    dc72:	e9c0 5000 	strd	r5, r0, [r0]
{
    dc76:	4604      	mov	r4, r0
    dc78:	460f      	mov	r7, r1
    dc7a:	4616      	mov	r6, r2

    ev = &mq->mq_ev;
    memset(ev, 0, sizeof(*ev));
    dc7c:	4629      	mov	r1, r5
    dc7e:	2210      	movs	r2, #16
    dc80:	3008      	adds	r0, #8
    dc82:	f002 fb02 	bl	1028a <memset>
    ev->ev_cb = ev_cb;
    ev->ev_arg = arg;
    dc86:	e9c4 7603 	strd	r7, r6, [r4, #12]

    return (0);
}
    dc8a:	4628      	mov	r0, r5
    dc8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000dc8e <os_mqueue_get>:

struct os_mbuf *
os_mqueue_get(struct os_mqueue *mq)
{
    dc8e:	b538      	push	{r3, r4, r5, lr}
    dc90:	4605      	mov	r5, r0
    struct os_mbuf_pkthdr *mp;
    struct os_mbuf *m;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
    dc92:	f7fe fcf9 	bl	c688 <os_arch_save_sr>
    mp = STAILQ_FIRST(&mq->mq_head);
    dc96:	682c      	ldr	r4, [r5, #0]
    if (mp) {
    dc98:	b11c      	cbz	r4, dca2 <os_mqueue_get+0x14>
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
    dc9a:	6863      	ldr	r3, [r4, #4]
    dc9c:	602b      	str	r3, [r5, #0]
    dc9e:	b903      	cbnz	r3, dca2 <os_mqueue_get+0x14>
    dca0:	606d      	str	r5, [r5, #4]
    }
    OS_EXIT_CRITICAL(sr);
    dca2:	f7fe fcf7 	bl	c694 <os_arch_restore_sr>

    if (mp) {
    dca6:	b104      	cbz	r4, dcaa <os_mqueue_get+0x1c>
        m = OS_MBUF_PKTHDR_TO_MBUF(mp);
    dca8:	3c10      	subs	r4, #16
    } else {
        m = NULL;
    }

    return (m);
}
    dcaa:	4620      	mov	r0, r4
    dcac:	bd38      	pop	{r3, r4, r5, pc}

0000dcae <os_mqueue_put>:

int
os_mqueue_put(struct os_mqueue *mq, struct os_eventq *evq, struct os_mbuf *m)
{
    dcae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf_pkthdr *mp;
    os_sr_t sr;
    int rc;

    /* Can only place the head of a chained mbuf on the queue. */
    if (!OS_MBUF_IS_PKTHDR(m)) {
    dcb0:	7953      	ldrb	r3, [r2, #5]
    dcb2:	2b07      	cmp	r3, #7
{
    dcb4:	4606      	mov	r6, r0
    dcb6:	460c      	mov	r4, r1
    dcb8:	4615      	mov	r5, r2
    if (!OS_MBUF_IS_PKTHDR(m)) {
    dcba:	d913      	bls.n	dce4 <os_mqueue_put+0x36>
        goto err;
    }

    mp = OS_MBUF_PKTHDR(m);

    OS_ENTER_CRITICAL(sr);
    dcbc:	f7fe fce4 	bl	c688 <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&mq->mq_head, mp, omp_next);
    dcc0:	2700      	movs	r7, #0
    dcc2:	6873      	ldr	r3, [r6, #4]
    dcc4:	616f      	str	r7, [r5, #20]
    mp = OS_MBUF_PKTHDR(m);
    dcc6:	f105 0210 	add.w	r2, r5, #16
    STAILQ_INSERT_TAIL(&mq->mq_head, mp, omp_next);
    dcca:	3514      	adds	r5, #20
    dccc:	601a      	str	r2, [r3, #0]
    dcce:	6075      	str	r5, [r6, #4]
    OS_EXIT_CRITICAL(sr);
    dcd0:	f7fe fce0 	bl	c694 <os_arch_restore_sr>

    /* Only post an event to the queue if its specified */
    if (evq) {
    dcd4:	b144      	cbz	r4, dce8 <os_mqueue_put+0x3a>
        os_eventq_put(evq, &mq->mq_ev);
    dcd6:	4620      	mov	r0, r4
    dcd8:	f106 0108 	add.w	r1, r6, #8
    dcdc:	f7ff f86d 	bl	cdba <os_eventq_put>
    }

    return (0);
    dce0:	4638      	mov	r0, r7
err:
    return (rc);
}
    dce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (rc);
    dce4:	2002      	movs	r0, #2
    dce6:	e7fc      	b.n	dce2 <os_mqueue_put+0x34>
    return (0);
    dce8:	4620      	mov	r0, r4
    dcea:	e7fa      	b.n	dce2 <os_mqueue_put+0x34>

0000dcec <os_mbuf_get>:
    return (0);
}

struct os_mbuf *
os_mbuf_get(struct os_mbuf_pool *omp, uint16_t leadingspace)
{
    dcec:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET, (uint32_t)omp,
                       (uint32_t)leadingspace);

    if (leadingspace > omp->omp_databuf_len) {
    dcee:	8803      	ldrh	r3, [r0, #0]
    dcf0:	428b      	cmp	r3, r1
{
    dcf2:	4604      	mov	r4, r0
    dcf4:	460d      	mov	r5, r1
    if (leadingspace > omp->omp_databuf_len) {
    dcf6:	d30c      	bcc.n	dd12 <os_mbuf_get+0x26>
        om = NULL;
        goto done;
    }

    om = os_memblock_get(omp->omp_pool);
    dcf8:	6840      	ldr	r0, [r0, #4]
    dcfa:	f7ff f946 	bl	cf8a <os_memblock_get>
    if (!om) {
    dcfe:	b138      	cbz	r0, dd10 <os_mbuf_get+0x24>

    SLIST_NEXT(om, om_next) = NULL;
    om->om_flags = 0;
    om->om_pkthdr_len = 0;
    om->om_len = 0;
    om->om_data = (&om->om_databuf[0] + leadingspace);
    dd00:	f100 0110 	add.w	r1, r0, #16
    SLIST_NEXT(om, om_next) = NULL;
    dd04:	2300      	movs	r3, #0
    om->om_data = (&om->om_databuf[0] + leadingspace);
    dd06:	440d      	add	r5, r1
    SLIST_NEXT(om, om_next) = NULL;
    dd08:	60c3      	str	r3, [r0, #12]
    om->om_flags = 0;
    dd0a:	6043      	str	r3, [r0, #4]
    om->om_data = (&om->om_databuf[0] + leadingspace);
    dd0c:	6005      	str	r5, [r0, #0]
    om->om_omp = omp;
    dd0e:	6084      	str	r4, [r0, #8]

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET, (uint32_t)om);
    return om;
}
    dd10:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
    dd12:	2000      	movs	r0, #0
    return om;
    dd14:	e7fc      	b.n	dd10 <os_mbuf_get+0x24>

0000dd16 <os_mbuf_get_pkthdr>:

struct os_mbuf *
os_mbuf_get_pkthdr(struct os_mbuf_pool *omp, uint8_t user_pkthdr_len)
{
    dd16:	b538      	push	{r3, r4, r5, lr}
    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)omp,
                       (uint32_t)user_pkthdr_len);

    /* User packet header must fit inside mbuf */
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
    dd18:	8803      	ldrh	r3, [r0, #0]
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
    dd1a:	f101 0508 	add.w	r5, r1, #8
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
    dd1e:	42ab      	cmp	r3, r5
    dd20:	d30d      	bcc.n	dd3e <os_mbuf_get_pkthdr+0x28>
    dd22:	2dff      	cmp	r5, #255	; 0xff
    dd24:	d80b      	bhi.n	dd3e <os_mbuf_get_pkthdr+0x28>
        om = NULL;
        goto done;
    }

    om = os_mbuf_get(omp, 0);
    dd26:	2100      	movs	r1, #0
    dd28:	f7ff ffe0 	bl	dcec <os_mbuf_get>
    if (om) {
    dd2c:	b130      	cbz	r0, dd3c <os_mbuf_get_pkthdr+0x26>
        om->om_pkthdr_len = pkthdr_len;
        om->om_data += pkthdr_len;
    dd2e:	6801      	ldr	r1, [r0, #0]
        om->om_pkthdr_len = pkthdr_len;
    dd30:	7145      	strb	r5, [r0, #5]

        pkthdr = OS_MBUF_PKTHDR(om);
        pkthdr->omp_len = 0;
    dd32:	2300      	movs	r3, #0
        pkthdr->omp_flags = 0;
        STAILQ_NEXT(pkthdr, omp_next) = NULL;
    dd34:	e9c0 3304 	strd	r3, r3, [r0, #16]
        om->om_data += pkthdr_len;
    dd38:	4429      	add	r1, r5
    dd3a:	6001      	str	r1, [r0, #0]
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)om);
    return om;
}
    dd3c:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
    dd3e:	2000      	movs	r0, #0
    return om;
    dd40:	e7fc      	b.n	dd3c <os_mbuf_get_pkthdr+0x26>

0000dd42 <os_mbuf_free>:

int
os_mbuf_free(struct os_mbuf *om)
{
    dd42:	b508      	push	{r3, lr}
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)om);

    if (om->om_omp != NULL) {
    dd44:	6883      	ldr	r3, [r0, #8]
{
    dd46:	4601      	mov	r1, r0
    if (om->om_omp != NULL) {
    dd48:	b11b      	cbz	r3, dd52 <os_mbuf_free+0x10>
        rc = os_memblock_put(om->om_omp->omp_pool, om);
    dd4a:	6858      	ldr	r0, [r3, #4]
    dd4c:	f7ff f944 	bl	cfd8 <os_memblock_put>
    rc = 0;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)rc);
    return (rc);
}
    dd50:	bd08      	pop	{r3, pc}
    rc = 0;
    dd52:	4618      	mov	r0, r3
    return (rc);
    dd54:	e7fc      	b.n	dd50 <os_mbuf_free+0xe>

0000dd56 <os_mbuf_free_chain>:

int
os_mbuf_free_chain(struct os_mbuf *om)
{
    dd56:	b510      	push	{r4, lr}
    struct os_mbuf *next;
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)om);

    while (om != NULL) {
    dd58:	b900      	cbnz	r0, dd5c <os_mbuf_free_chain+0x6>
    rc = 0;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)rc);
    return (rc);
}
    dd5a:	bd10      	pop	{r4, pc}
        next = SLIST_NEXT(om, om_next);
    dd5c:	68c4      	ldr	r4, [r0, #12]
        rc = os_mbuf_free(om);
    dd5e:	f7ff fff0 	bl	dd42 <os_mbuf_free>
        if (rc != 0) {
    dd62:	2800      	cmp	r0, #0
    dd64:	d1f9      	bne.n	dd5a <os_mbuf_free_chain+0x4>
        om = next;
    dd66:	4620      	mov	r0, r4
    dd68:	e7f6      	b.n	dd58 <os_mbuf_free_chain+0x2>

0000dd6a <os_mbuf_append>:
    return len;
}

int
os_mbuf_append(struct os_mbuf *om, const void *data,  uint16_t len)
{
    dd6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dd6e:	460f      	mov	r7, r1
    dd70:	4615      	mov	r5, r2
    struct os_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
    dd72:	4606      	mov	r6, r0
    dd74:	2800      	cmp	r0, #0
    dd76:	d046      	beq.n	de06 <os_mbuf_append+0x9c>
        rc = OS_EINVAL;
        goto err;
    }

    omp = om->om_omp;
    dd78:	f8d0 8008 	ldr.w	r8, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
    while (SLIST_NEXT(last, om_next) != NULL) {
    dd7c:	4603      	mov	r3, r0
    dd7e:	4699      	mov	r9, r3
    dd80:	68db      	ldr	r3, [r3, #12]
    dd82:	2b00      	cmp	r3, #0
    dd84:	d1fb      	bne.n	dd7e <os_mbuf_append+0x14>
        last = SLIST_NEXT(last, om_next);
    }

    remainder = len;
    space = OS_MBUF_TRAILINGSPACE(last);
    dd86:	4648      	mov	r0, r9
    remainder = len;
    dd88:	462c      	mov	r4, r5
    space = OS_MBUF_TRAILINGSPACE(last);
    dd8a:	f7ff ff65 	bl	dc58 <_os_mbuf_trailingspace>

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
    dd8e:	b198      	cbz	r0, ddb8 <os_mbuf_append+0x4e>
        if (space > remainder) {
    dd90:	42a8      	cmp	r0, r5
    dd92:	bfa8      	it	ge
    dd94:	4628      	movge	r0, r5
    dd96:	4604      	mov	r4, r0
            space = remainder;
        }

        memcpy(OS_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
    dd98:	f8d9 3000 	ldr.w	r3, [r9]
    dd9c:	f8b9 0006 	ldrh.w	r0, [r9, #6]
    dda0:	4622      	mov	r2, r4
    dda2:	4639      	mov	r1, r7
    dda4:	4418      	add	r0, r3
    dda6:	f002 fa63 	bl	10270 <memcpy>

        last->om_len += space;
    ddaa:	f8b9 3006 	ldrh.w	r3, [r9, #6]
    ddae:	4423      	add	r3, r4
        data += space;
    ddb0:	4427      	add	r7, r4
        last->om_len += space;
    ddb2:	f8a9 3006 	strh.w	r3, [r9, #6]
        remainder -= space;
    ddb6:	1b2c      	subs	r4, r5, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
    ddb8:	2c00      	cmp	r4, #0
    ddba:	dd05      	ble.n	ddc8 <os_mbuf_append+0x5e>
        new = os_mbuf_get(omp, 0);
    ddbc:	2100      	movs	r1, #0
    ddbe:	4640      	mov	r0, r8
    ddc0:	f7ff ff94 	bl	dcec <os_mbuf_get>
        if (!new) {
    ddc4:	4682      	mov	sl, r0
    ddc6:	b938      	cbnz	r0, ddd8 <os_mbuf_append+0x6e>
        SLIST_NEXT(last, om_next) = new;
        last = new;
    }

    /* Adjust the packet header length in the buffer */
    if (OS_MBUF_IS_PKTHDR(om)) {
    ddc8:	7973      	ldrb	r3, [r6, #5]
    ddca:	2b07      	cmp	r3, #7
    ddcc:	d816      	bhi.n	ddfc <os_mbuf_append+0x92>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
    }

    if (remainder != 0) {
    ddce:	1e20      	subs	r0, r4, #0
    ddd0:	bf18      	it	ne
    ddd2:	2001      	movne	r0, #1


    return (0);
err:
    return (rc);
}
    ddd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        new->om_len = min(omp->omp_databuf_len, remainder);
    ddd8:	f8b8 2000 	ldrh.w	r2, [r8]
    dddc:	42a2      	cmp	r2, r4
    ddde:	bfa8      	it	ge
    dde0:	4622      	movge	r2, r4
    dde2:	80c2      	strh	r2, [r0, #6]
        memcpy(OS_MBUF_DATA(new, void *), data, new->om_len);
    dde4:	4639      	mov	r1, r7
    dde6:	6800      	ldr	r0, [r0, #0]
    dde8:	f002 fa42 	bl	10270 <memcpy>
        data += new->om_len;
    ddec:	f8ba 3006 	ldrh.w	r3, [sl, #6]
        SLIST_NEXT(last, om_next) = new;
    ddf0:	f8c9 a00c 	str.w	sl, [r9, #12]
        data += new->om_len;
    ddf4:	441f      	add	r7, r3
        remainder -= new->om_len;
    ddf6:	1ae4      	subs	r4, r4, r3
        SLIST_NEXT(last, om_next) = new;
    ddf8:	46d1      	mov	r9, sl
    ddfa:	e7dd      	b.n	ddb8 <os_mbuf_append+0x4e>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
    ddfc:	8a32      	ldrh	r2, [r6, #16]
    ddfe:	4415      	add	r5, r2
    de00:	1b2d      	subs	r5, r5, r4
    de02:	8235      	strh	r5, [r6, #16]
    de04:	e7e3      	b.n	ddce <os_mbuf_append+0x64>
        rc = OS_EINVAL;
    de06:	2002      	movs	r0, #2
    de08:	e7e4      	b.n	ddd4 <os_mbuf_append+0x6a>

0000de0a <os_mbuf_off>:
    return (NULL);
}

struct os_mbuf *
os_mbuf_off(const struct os_mbuf *om, int off, uint16_t *out_off)
{
    de0a:	b510      	push	{r4, lr}

    /* Cast away const. */
    cur = (struct os_mbuf *)om;

    while (1) {
        if (cur == NULL) {
    de0c:	b120      	cbz	r0, de18 <os_mbuf_off+0xe>
            return NULL;
        }

        next = SLIST_NEXT(cur, om_next);

        if (cur->om_len > off ||
    de0e:	88c4      	ldrh	r4, [r0, #6]
        next = SLIST_NEXT(cur, om_next);
    de10:	68c3      	ldr	r3, [r0, #12]
        if (cur->om_len > off ||
    de12:	428c      	cmp	r4, r1
    de14:	dd01      	ble.n	de1a <os_mbuf_off+0x10>
            (cur->om_len == off && next == NULL)) {

            *out_off = off;
    de16:	8011      	strh	r1, [r2, #0]
        }

        off -= cur->om_len;
        cur = next;
    }
}
    de18:	bd10      	pop	{r4, pc}
        if (cur->om_len > off ||
    de1a:	d101      	bne.n	de20 <os_mbuf_off+0x16>
            (cur->om_len == off && next == NULL)) {
    de1c:	2b00      	cmp	r3, #0
    de1e:	d0fa      	beq.n	de16 <os_mbuf_off+0xc>
        off -= cur->om_len;
    de20:	1b09      	subs	r1, r1, r4
        next = SLIST_NEXT(cur, om_next);
    de22:	4618      	mov	r0, r3
        if (cur == NULL) {
    de24:	e7f2      	b.n	de0c <os_mbuf_off+0x2>

0000de26 <os_mbuf_copydata>:

int
os_mbuf_copydata(const struct os_mbuf *m, int off, int len, void *dst)
{
    de26:	b570      	push	{r4, r5, r6, lr}
    de28:	4604      	mov	r4, r0
    unsigned int count;
    uint8_t *udst;

    if (!len) {
    de2a:	4615      	mov	r5, r2
    de2c:	b952      	cbnz	r2, de44 <os_mbuf_copydata+0x1e>
        return 0;
    de2e:	2000      	movs	r0, #0
        off = 0;
        m = SLIST_NEXT(m, om_next);
    }

    return (len > 0 ? -1 : 0);
}
    de30:	bd70      	pop	{r4, r5, r6, pc}
        if (!m) {
    de32:	b914      	cbnz	r4, de3a <os_mbuf_copydata+0x14>
            return (-1);
    de34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    de38:	e7fa      	b.n	de30 <os_mbuf_copydata+0xa>
        if (off < m->om_len)
    de3a:	88e2      	ldrh	r2, [r4, #6]
    de3c:	428a      	cmp	r2, r1
    de3e:	dc03      	bgt.n	de48 <os_mbuf_copydata+0x22>
        m = SLIST_NEXT(m, om_next);
    de40:	68e4      	ldr	r4, [r4, #12]
        off -= m->om_len;
    de42:	1a89      	subs	r1, r1, r2
    while (off > 0) {
    de44:	2900      	cmp	r1, #0
    de46:	dcf4      	bgt.n	de32 <os_mbuf_copydata+0xc>
    while (len > 0 && m != NULL) {
    de48:	2d00      	cmp	r5, #0
    de4a:	ddf0      	ble.n	de2e <os_mbuf_copydata+0x8>
    de4c:	2c00      	cmp	r4, #0
    de4e:	d0f1      	beq.n	de34 <os_mbuf_copydata+0xe>
        count = min(m->om_len - off, len);
    de50:	88e6      	ldrh	r6, [r4, #6]
        memcpy(udst, m->om_data + off, count);
    de52:	6820      	ldr	r0, [r4, #0]
        count = min(m->om_len - off, len);
    de54:	1a76      	subs	r6, r6, r1
    de56:	42ae      	cmp	r6, r5
    de58:	bfa8      	it	ge
    de5a:	462e      	movge	r6, r5
        memcpy(udst, m->om_data + off, count);
    de5c:	4401      	add	r1, r0
    de5e:	4632      	mov	r2, r6
    de60:	4618      	mov	r0, r3
    de62:	f002 fa05 	bl	10270 <memcpy>
    de66:	4603      	mov	r3, r0
        m = SLIST_NEXT(m, om_next);
    de68:	68e4      	ldr	r4, [r4, #12]
        len -= count;
    de6a:	1bad      	subs	r5, r5, r6
        udst += count;
    de6c:	4433      	add	r3, r6
        off = 0;
    de6e:	2100      	movs	r1, #0
    de70:	e7ea      	b.n	de48 <os_mbuf_copydata+0x22>

0000de72 <os_mbuf_adj>:

void
os_mbuf_adj(struct os_mbuf *mp, int req_len)
{
    de72:	b570      	push	{r4, r5, r6, lr}
    int len = req_len;
    struct os_mbuf *m;
    int count;

    if ((m = mp) == NULL)
    de74:	2800      	cmp	r0, #0
    de76:	d030      	beq.n	deda <os_mbuf_adj+0x68>
        return;
    if (len >= 0) {
    de78:	2900      	cmp	r1, #0
    de7a:	da1a      	bge.n	deb2 <os_mbuf_adj+0x40>
         * calculating its length and finding the last mbuf.
         * If the adjustment only affects this mbuf, then just
         * adjust and return.  Otherwise, rescan and truncate
         * after the remaining size.
         */
        len = -len;
    de7c:	424b      	negs	r3, r1
    de7e:	4604      	mov	r4, r0
        count = 0;
    de80:	2500      	movs	r5, #0
        for (;;) {
            count += m->om_len;
    de82:	88e2      	ldrh	r2, [r4, #6]
    de84:	4626      	mov	r6, r4
            if (SLIST_NEXT(m, om_next) == (struct os_mbuf *)0)
    de86:	68e4      	ldr	r4, [r4, #12]
            count += m->om_len;
    de88:	4415      	add	r5, r2
            if (SLIST_NEXT(m, om_next) == (struct os_mbuf *)0)
    de8a:	2c00      	cmp	r4, #0
    de8c:	d1f9      	bne.n	de82 <os_mbuf_adj+0x10>
                break;
            m = SLIST_NEXT(m, om_next);
        }
        if (m->om_len >= len) {
    de8e:	429a      	cmp	r2, r3
            m->om_len -= len;
            if (OS_MBUF_IS_PKTHDR(mp))
    de90:	7944      	ldrb	r4, [r0, #5]
        if (m->om_len >= len) {
    de92:	db23      	blt.n	dedc <os_mbuf_adj+0x6a>
            m->om_len -= len;
    de94:	b29b      	uxth	r3, r3
    de96:	1ad2      	subs	r2, r2, r3
            if (OS_MBUF_IS_PKTHDR(mp))
    de98:	2c07      	cmp	r4, #7
            m->om_len -= len;
    de9a:	80f2      	strh	r2, [r6, #6]
            if (OS_MBUF_IS_PKTHDR(mp))
    de9c:	d91d      	bls.n	deda <os_mbuf_adj+0x68>
                OS_MBUF_PKTHDR(mp)->omp_len -= len;
    de9e:	8a02      	ldrh	r2, [r0, #16]
    dea0:	1ad3      	subs	r3, r2, r3
    dea2:	e019      	b.n	ded8 <os_mbuf_adj+0x66>
                m->om_len -= len;
    dea4:	1ae4      	subs	r4, r4, r3
    dea6:	80d4      	strh	r4, [r2, #6]
                m->om_data += len;
    dea8:	6814      	ldr	r4, [r2, #0]
    deaa:	4423      	add	r3, r4
    deac:	6013      	str	r3, [r2, #0]
                len = 0;
    deae:	2300      	movs	r3, #0
    deb0:	e00c      	b.n	decc <os_mbuf_adj+0x5a>
    deb2:	4602      	mov	r2, r0
    deb4:	460b      	mov	r3, r1
                m->om_len = 0;
    deb6:	2500      	movs	r5, #0
        while (m != NULL && len > 0) {
    deb8:	2b00      	cmp	r3, #0
    deba:	dd07      	ble.n	decc <os_mbuf_adj+0x5a>
            if (m->om_len <= len) {
    debc:	88d4      	ldrh	r4, [r2, #6]
    debe:	429c      	cmp	r4, r3
    dec0:	dcf0      	bgt.n	dea4 <os_mbuf_adj+0x32>
                m->om_len = 0;
    dec2:	80d5      	strh	r5, [r2, #6]
                m = SLIST_NEXT(m, om_next);
    dec4:	68d2      	ldr	r2, [r2, #12]
                len -= m->om_len;
    dec6:	1b1b      	subs	r3, r3, r4
        while (m != NULL && len > 0) {
    dec8:	2a00      	cmp	r2, #0
    deca:	d1f5      	bne.n	deb8 <os_mbuf_adj+0x46>
        if (OS_MBUF_IS_PKTHDR(mp))
    decc:	7942      	ldrb	r2, [r0, #5]
    dece:	2a07      	cmp	r2, #7
    ded0:	d903      	bls.n	deda <os_mbuf_adj+0x68>
            OS_MBUF_PKTHDR(mp)->omp_len -= (req_len - len);
    ded2:	8a02      	ldrh	r2, [r0, #16]
    ded4:	1a51      	subs	r1, r2, r1
    ded6:	440b      	add	r3, r1
                OS_MBUF_PKTHDR(mp)->omp_len -= len;
    ded8:	8203      	strh	r3, [r0, #16]
                break;
            }
            count -= m->om_len;
        }
    }
}
    deda:	bd70      	pop	{r4, r5, r6, pc}
        count -= len;
    dedc:	4429      	add	r1, r5
        if (count < 0)
    dede:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
        if (OS_MBUF_IS_PKTHDR(m))
    dee2:	2c07      	cmp	r4, #7
            OS_MBUF_PKTHDR(m)->omp_len = count;
    dee4:	bf88      	it	hi
    dee6:	8201      	strhhi	r1, [r0, #16]
            if (m->om_len >= count) {
    dee8:	88c3      	ldrh	r3, [r0, #6]
    deea:	428b      	cmp	r3, r1
    deec:	4604      	mov	r4, r0
                if (SLIST_NEXT(m, om_next) != NULL) {
    deee:	68c0      	ldr	r0, [r0, #12]
            if (m->om_len >= count) {
    def0:	db07      	blt.n	df02 <os_mbuf_adj+0x90>
                m->om_len = count;
    def2:	80e1      	strh	r1, [r4, #6]
                if (SLIST_NEXT(m, om_next) != NULL) {
    def4:	2800      	cmp	r0, #0
    def6:	d0f0      	beq.n	deda <os_mbuf_adj+0x68>
                    os_mbuf_free_chain(SLIST_NEXT(m, om_next));
    def8:	f7ff ff2d 	bl	dd56 <os_mbuf_free_chain>
                    SLIST_NEXT(m, om_next) = NULL;
    defc:	2300      	movs	r3, #0
    defe:	60e3      	str	r3, [r4, #12]
    df00:	e7eb      	b.n	deda <os_mbuf_adj+0x68>
            count -= m->om_len;
    df02:	1ac9      	subs	r1, r1, r3
        for (; m; m = SLIST_NEXT(m, om_next)) {
    df04:	2800      	cmp	r0, #0
    df06:	d1ef      	bne.n	dee8 <os_mbuf_adj+0x76>
    df08:	e7e7      	b.n	deda <os_mbuf_adj+0x68>

0000df0a <os_mbuf_cmpf>:

int
os_mbuf_cmpf(const struct os_mbuf *om, int off, const void *data, int len)
{
    df0a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    uint16_t chunk_sz;
    uint16_t data_off;
    uint16_t om_off;
    int rc;

    if (len <= 0) {
    df0e:	1e1e      	subs	r6, r3, #0
{
    df10:	4690      	mov	r8, r2
    if (len <= 0) {
    df12:	dd27      	ble.n	df64 <os_mbuf_cmpf+0x5a>
        return 0;
    }

    data_off = 0;
    om = os_mbuf_off(om, off, &om_off);
    df14:	f10d 0206 	add.w	r2, sp, #6
    df18:	f7ff ff77 	bl	de0a <os_mbuf_off>
    data_off = 0;
    df1c:	2500      	movs	r5, #0
    om = os_mbuf_off(om, off, &om_off);
    df1e:	4604      	mov	r4, r0
        if (data_off == len) {
            return 0;
        }

        om = SLIST_NEXT(om, om_next);
        om_off = 0;
    df20:	46a9      	mov	r9, r5
        if (om == NULL) {
    df22:	b924      	cbnz	r4, df2e <os_mbuf_cmpf+0x24>
            return INT_MAX;
    df24:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

        if (om == NULL) {
            return INT_MAX;
        }
    }
}
    df28:	b003      	add	sp, #12
    df2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        chunk_sz = min(om->om_len - om_off, len - data_off);
    df2e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    df32:	88e2      	ldrh	r2, [r4, #6]
    df34:	1b73      	subs	r3, r6, r5
    df36:	1a12      	subs	r2, r2, r0
    df38:	429a      	cmp	r2, r3
    df3a:	bfa8      	it	ge
    df3c:	461a      	movge	r2, r3
    df3e:	b297      	uxth	r7, r2
        if (chunk_sz > 0) {
    df40:	b147      	cbz	r7, df54 <os_mbuf_cmpf+0x4a>
            rc = memcmp(om->om_data + om_off, data + data_off, chunk_sz);
    df42:	6823      	ldr	r3, [r4, #0]
    df44:	463a      	mov	r2, r7
    df46:	eb08 0105 	add.w	r1, r8, r5
    df4a:	4418      	add	r0, r3
    df4c:	f002 f96c 	bl	10228 <memcmp>
            if (rc != 0) {
    df50:	2800      	cmp	r0, #0
    df52:	d1e9      	bne.n	df28 <os_mbuf_cmpf+0x1e>
        data_off += chunk_sz;
    df54:	443d      	add	r5, r7
    df56:	b2ad      	uxth	r5, r5
        if (data_off == len) {
    df58:	42b5      	cmp	r5, r6
    df5a:	d003      	beq.n	df64 <os_mbuf_cmpf+0x5a>
        om = SLIST_NEXT(om, om_next);
    df5c:	68e4      	ldr	r4, [r4, #12]
        om_off = 0;
    df5e:	f8ad 9006 	strh.w	r9, [sp, #6]
        if (om == NULL) {
    df62:	e7de      	b.n	df22 <os_mbuf_cmpf+0x18>
        return 0;
    df64:	2000      	movs	r0, #0
    df66:	e7df      	b.n	df28 <os_mbuf_cmpf+0x1e>

0000df68 <os_mbuf_copyinto>:
    return om;
}

int
os_mbuf_copyinto(struct os_mbuf *om, int off, const void *src, int len)
{
    df68:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    df6c:	4691      	mov	r9, r2
    uint16_t cur_off;
    int copylen;
    int rc;

    /* Find the mbuf,offset pair for the start of the destination. */
    cur = os_mbuf_off(om, off, &cur_off);
    df6e:	f10d 0206 	add.w	r2, sp, #6
{
    df72:	4607      	mov	r7, r0
    df74:	4688      	mov	r8, r1
    df76:	461c      	mov	r4, r3
    cur = os_mbuf_off(om, off, &cur_off);
    df78:	f7ff ff47 	bl	de0a <os_mbuf_off>
    if (cur == NULL) {
    df7c:	4605      	mov	r5, r0
    df7e:	b370      	cbz	r0, dfde <os_mbuf_copyinto+0x76>
        if (next == NULL) {
            break;
        }

        cur = next;
        cur_off = 0;
    df80:	f04f 0a00 	mov.w	sl, #0
        copylen = min(cur->om_len - cur_off, len);
    df84:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    df88:	88ee      	ldrh	r6, [r5, #6]
    df8a:	1a36      	subs	r6, r6, r0
    df8c:	42a6      	cmp	r6, r4
    df8e:	bfa8      	it	ge
    df90:	4626      	movge	r6, r4
        if (copylen > 0) {
    df92:	2e00      	cmp	r6, #0
    df94:	dd07      	ble.n	dfa6 <os_mbuf_copyinto+0x3e>
            memcpy(cur->om_data + cur_off, sptr, copylen);
    df96:	682b      	ldr	r3, [r5, #0]
    df98:	4649      	mov	r1, r9
    df9a:	4632      	mov	r2, r6
    df9c:	4418      	add	r0, r3
    df9e:	f002 f967 	bl	10270 <memcpy>
            sptr += copylen;
    dfa2:	44b1      	add	r9, r6
            len -= copylen;
    dfa4:	1ba4      	subs	r4, r4, r6
        if (len == 0) {
    dfa6:	b91c      	cbnz	r4, dfb0 <os_mbuf_copyinto+0x48>
            return 0;
    dfa8:	2000      	movs	r0, #0
        OS_MBUF_PKTHDR(om)->omp_len =
            max(OS_MBUF_PKTHDR(om)->omp_len, off + len);
    }

    return 0;
}
    dfaa:	b002      	add	sp, #8
    dfac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        next = SLIST_NEXT(cur, om_next);
    dfb0:	68eb      	ldr	r3, [r5, #12]
        if (next == NULL) {
    dfb2:	b11b      	cbz	r3, dfbc <os_mbuf_copyinto+0x54>
        cur_off = 0;
    dfb4:	f8ad a006 	strh.w	sl, [sp, #6]
        copylen = min(cur->om_len - cur_off, len);
    dfb8:	461d      	mov	r5, r3
    dfba:	e7e3      	b.n	df84 <os_mbuf_copyinto+0x1c>
    rc = os_mbuf_append(cur, sptr, len);
    dfbc:	b2a2      	uxth	r2, r4
    dfbe:	4649      	mov	r1, r9
    dfc0:	4628      	mov	r0, r5
    dfc2:	f7ff fed2 	bl	dd6a <os_mbuf_append>
    if (rc != 0) {
    dfc6:	2800      	cmp	r0, #0
    dfc8:	d1ef      	bne.n	dfaa <os_mbuf_copyinto+0x42>
    if (OS_MBUF_IS_PKTHDR(om)) {
    dfca:	797b      	ldrb	r3, [r7, #5]
    dfcc:	2b07      	cmp	r3, #7
    dfce:	d9eb      	bls.n	dfa8 <os_mbuf_copyinto+0x40>
            max(OS_MBUF_PKTHDR(om)->omp_len, off + len);
    dfd0:	8a39      	ldrh	r1, [r7, #16]
    dfd2:	4444      	add	r4, r8
    dfd4:	428c      	cmp	r4, r1
    dfd6:	bfb8      	it	lt
    dfd8:	460c      	movlt	r4, r1
        OS_MBUF_PKTHDR(om)->omp_len =
    dfda:	823c      	strh	r4, [r7, #16]
    dfdc:	e7e5      	b.n	dfaa <os_mbuf_copyinto+0x42>
        return -1;
    dfde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    dfe2:	e7e2      	b.n	dfaa <os_mbuf_copyinto+0x42>

0000dfe4 <os_mbuf_extend>:
    second->om_pkthdr_len = 0;
}

void *
os_mbuf_extend(struct os_mbuf *om, uint16_t len)
{
    dfe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf *newm;
    struct os_mbuf *last;
    void *data;

    if (len > om->om_omp->omp_databuf_len) {
    dfe6:	6887      	ldr	r7, [r0, #8]
    dfe8:	883b      	ldrh	r3, [r7, #0]
    dfea:	428b      	cmp	r3, r1
{
    dfec:	4605      	mov	r5, r0
    dfee:	460c      	mov	r4, r1
    if (len > om->om_omp->omp_databuf_len) {
    dff0:	d201      	bcs.n	dff6 <os_mbuf_extend+0x12>
        return NULL;
    dff2:	2000      	movs	r0, #0
    if (OS_MBUF_IS_PKTHDR(om)) {
        OS_MBUF_PKTHDR(om)->omp_len += len;
    }

    return data;
}
    dff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dff6:	4601      	mov	r1, r0
    while (SLIST_NEXT(last, om_next) != NULL) {
    dff8:	460e      	mov	r6, r1
    dffa:	68c9      	ldr	r1, [r1, #12]
    dffc:	2900      	cmp	r1, #0
    dffe:	d1fb      	bne.n	dff8 <os_mbuf_extend+0x14>
    if (OS_MBUF_TRAILINGSPACE(last) < len) {
    e000:	4630      	mov	r0, r6
    e002:	f7ff fe29 	bl	dc58 <_os_mbuf_trailingspace>
    e006:	42a0      	cmp	r0, r4
    e008:	d206      	bcs.n	e018 <os_mbuf_extend+0x34>
        newm = os_mbuf_get(om->om_omp, 0);
    e00a:	4638      	mov	r0, r7
    e00c:	f7ff fe6e 	bl	dcec <os_mbuf_get>
        if (newm == NULL) {
    e010:	2800      	cmp	r0, #0
    e012:	d0ee      	beq.n	dff2 <os_mbuf_extend+0xe>
        SLIST_NEXT(last, om_next) = newm;
    e014:	60f0      	str	r0, [r6, #12]
    e016:	4606      	mov	r6, r0
    data = last->om_data + last->om_len;
    e018:	88f3      	ldrh	r3, [r6, #6]
    e01a:	6830      	ldr	r0, [r6, #0]
    e01c:	4418      	add	r0, r3
    last->om_len += len;
    e01e:	4423      	add	r3, r4
    e020:	80f3      	strh	r3, [r6, #6]
    if (OS_MBUF_IS_PKTHDR(om)) {
    e022:	796b      	ldrb	r3, [r5, #5]
    e024:	2b07      	cmp	r3, #7
        OS_MBUF_PKTHDR(om)->omp_len += len;
    e026:	bf82      	ittt	hi
    e028:	8a29      	ldrhhi	r1, [r5, #16]
    e02a:	1864      	addhi	r4, r4, r1
    e02c:	822c      	strhhi	r4, [r5, #16]
    e02e:	e7e1      	b.n	dff4 <os_mbuf_extend+0x10>

0000e030 <tdma_superframe_slot_cb>:
 *
 * @return void
 */
static void
tdma_superframe_slot_cb(struct dpl_event * ev)
{
    e030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint16_t i;
    uint32_t slot_period_us;
    struct _tdma_slot_t *slot;
    tdma_instance_t * tdma;
    struct uwb_ccp_instance * ccp;
    assert(ev != NULL);
    e034:	b928      	cbnz	r0, e042 <tdma_superframe_slot_cb+0x12>
    e036:	2300      	movs	r3, #0
    e038:	461a      	mov	r2, r3
    e03a:	4619      	mov	r1, r3
    e03c:	4618      	mov	r0, r3
    e03e:	f7fe fbdd 	bl	c7fc <__assert_func>
    return ev->ev.ev_arg;
    e042:	6886      	ldr	r6, [r0, #8]
    assert(dpl_event_get_arg(ev) != NULL);
    e044:	2e00      	cmp	r6, #0
    e046:	d0f6      	beq.n	e036 <tdma_superframe_slot_cb+0x6>

    DIAGMSG("{\"utime\": %"PRIu32",\"msg\": \"tdma_superframe_slot_cb\"}\n",
            dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
    slot = (struct _tdma_slot_t *) dpl_event_get_arg(ev);
    tdma = slot->parent;
    e048:	68b4      	ldr	r4, [r6, #8]
    ccp = tdma->ccp;

    TDMA_STATS_INC(superframe_cnt);
    e04a:	6a23      	ldr	r3, [r4, #32]
    ccp = tdma->ccp;
    e04c:	f8d4 a004 	ldr.w	sl, [r4, #4]
    TDMA_STATS_INC(superframe_cnt);
    e050:	3301      	adds	r3, #1

    /* Make sure all timers are stopped */
    dpl_cputime_timer_stop(&slot->timer);
    e052:	f106 080c 	add.w	r8, r6, #12
    TDMA_STATS_INC(superframe_cnt);
    e056:	6223      	str	r3, [r4, #32]
    dpl_cputime_timer_stop(&slot->timer);
    e058:	4640      	mov	r0, r8
    e05a:	f002 fc69 	bl	10930 <dpl_cputime_timer_stop>
    for (i = 0; i < tdma->nslots; i++) {
    e05e:	2500      	movs	r5, #0
    e060:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    e064:	b2aa      	uxth	r2, r5
    e066:	4293      	cmp	r3, r2
    e068:	d827      	bhi.n	e0ba <tdma_superframe_slot_cb+0x8a>
        }
    }
#if __KERNEL__
    slot_period_us = uwb_dwt_usecs_to_usecs(div64_s64(ccp->period, tdma->nslots));
#else
    slot_period_us = uwb_dwt_usecs_to_usecs(ccp->period / tdma->nslots);
    e06a:	f8da 00e8 	ldr.w	r0, [sl, #232]	; 0xe8
    e06e:	fbb0 f0f3 	udiv	r0, r0, r3
    e072:	f010 fb27 	bl	1e6c4 <__aeabi_ui2d>
    e076:	a31e      	add	r3, pc, #120	; (adr r3, e0f0 <tdma_superframe_slot_cb+0xc0>)
    e078:	e9d3 2300 	ldrd	r2, r3, [r3]
    e07c:	f010 fb9c 	bl	1e7b8 <__aeabi_dmul>
    e080:	f010 fe72 	bl	1ed68 <__aeabi_d2uiz>
#endif
    for (i = 0; i < tdma->nslots; i++) {
    e084:	2700      	movs	r7, #0
    slot_period_us = uwb_dwt_usecs_to_usecs(ccp->period / tdma->nslots);
    e086:	4681      	mov	r9, r0
    for (i = 0; i < tdma->nslots; i++) {
    e088:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
        if (tdma->slot[i]){
            tdma->slot[i]->cputime_slot_start = tdma->os_epoch
    e08c:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
    for (i = 0; i < tdma->nslots; i++) {
    e08e:	b2bb      	uxth	r3, r7
    e090:	429a      	cmp	r2, r3
    e092:	d81d      	bhi.n	e0d0 <tdma_superframe_slot_cb+0xa0>
        }
    }

    /* Next superframe slot estimate */
    slot->cputime_slot_start = tdma->os_epoch
        + dpl_cputime_usecs_to_ticks(
    e094:	f8da 00e8 	ldr.w	r0, [sl, #232]	; 0xe8
    e098:	f010 fb14 	bl	1e6c4 <__aeabi_ui2d>
    e09c:	a314      	add	r3, pc, #80	; (adr r3, e0f0 <tdma_superframe_slot_cb+0xc0>)
    e09e:	e9d3 2300 	ldrd	r2, r3, [r3]
    e0a2:	f010 fb89 	bl	1e7b8 <__aeabi_dmul>
    e0a6:	f010 fe5f 	bl	1ed68 <__aeabi_d2uiz>
    e0aa:	4448      	add	r0, r9
    e0ac:	1941      	adds	r1, r0, r5
    slot->cputime_slot_start = tdma->os_epoch
    e0ae:	6071      	str	r1, [r6, #4]
            (uint32_t)uwb_dwt_usecs_to_usecs(ccp->period) + slot_period_us);
    hal_timer_start_at(&slot->timer, slot->cputime_slot_start);
    e0b0:	4640      	mov	r0, r8
}
    e0b2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    hal_timer_start_at(&slot->timer, slot->cputime_slot_start);
    e0b6:	f008 bd55 	b.w	16b64 <hal_timer_start_at>
        if (tdma->slot[i]){
    e0ba:	b2ab      	uxth	r3, r5
    e0bc:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    e0c0:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
    e0c4:	b110      	cbz	r0, e0cc <tdma_superframe_slot_cb+0x9c>
            dpl_cputime_timer_stop(&tdma->slot[i]->timer);
    e0c6:	300c      	adds	r0, #12
    e0c8:	f002 fc32 	bl	10930 <dpl_cputime_timer_stop>
    for (i = 0; i < tdma->nslots; i++) {
    e0cc:	3501      	adds	r5, #1
    e0ce:	e7c7      	b.n	e060 <tdma_superframe_slot_cb+0x30>
        if (tdma->slot[i]){
    e0d0:	b2bb      	uxth	r3, r7
    e0d2:	f503 72a4 	add.w	r2, r3, #328	; 0x148
    e0d6:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
    e0da:	b138      	cbz	r0, e0ec <tdma_superframe_slot_cb+0xbc>
                + dpl_cputime_usecs_to_ticks((uint32_t) (i * slot_period_us) - MYNEWT_VAL(OS_LATENCY));
    e0dc:	f5a5 717a 	sub.w	r1, r5, #1000	; 0x3e8
    e0e0:	fb09 1103 	mla	r1, r9, r3, r1
            tdma->slot[i]->cputime_slot_start = tdma->os_epoch
    e0e4:	6041      	str	r1, [r0, #4]
            hal_timer_start_at(&tdma->slot[i]->timer, tdma->slot[i]->cputime_slot_start);
    e0e6:	300c      	adds	r0, #12
    e0e8:	f008 fd3c 	bl	16b64 <hal_timer_start_at>
    for (i = 0; i < tdma->nslots; i++) {
    e0ec:	3701      	adds	r7, #1
    e0ee:	e7cb      	b.n	e088 <tdma_superframe_slot_cb+0x58>
    e0f0:	90690691 	.word	0x90690691
    e0f4:	3ff06906 	.word	0x3ff06906

0000e0f8 <superframe_cb>:
    tdma_instance_t * tdma = (tdma_instance_t*)cbs->inst_ptr;
    e0f8:	6848      	ldr	r0, [r1, #4]
{
    e0fa:	b508      	push	{r3, lr}
    if (tdma->status.initialized) {
    e0fc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    e100:	079b      	lsls	r3, r3, #30
    e102:	d508      	bpl.n	e116 <superframe_cb+0x1e>
        tdma->os_epoch = ccp->os_epoch;
    e104:	6843      	ldr	r3, [r0, #4]
    e106:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    e10a:	67c3      	str	r3, [r0, #124]	; 0x7c
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    e10c:	f100 01a4 	add.w	r1, r0, #164	; 0xa4
    e110:	30b8      	adds	r0, #184	; 0xb8
    e112:	f7fe fe52 	bl	cdba <os_eventq_put>
}
    e116:	2000      	movs	r0, #0
    e118:	bd08      	pop	{r3, pc}

0000e11a <tdma_task>:
{
    e11a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e11c:	4605      	mov	r5, r0
        ev = dpl_eventq_get(&tdma->eventq);
    e11e:	f100 06b8 	add.w	r6, r0, #184	; 0xb8
    return (struct dpl_event *) os_eventq_get((struct os_eventq *) evq);
    e122:	4630      	mov	r0, r6
    e124:	f7fe fe88 	bl	ce38 <os_eventq_get>
    return ev->ev.ev_arg;
    e128:	6887      	ldr	r7, [r0, #8]
    return (struct dpl_event *) os_eventq_get((struct os_eventq *) evq);
    e12a:	4604      	mov	r4, r0
        ticks = dpl_cputime_get32();
    e12c:	f002 fc02 	bl	10934 <dpl_cputime_get32>
        if (slot->idx!=0 && delay > MYNEWT_VAL(TDMA_MAX_SLOT_DELAY_US)) {
    e130:	883b      	ldrh	r3, [r7, #0]
    e132:	b143      	cbz	r3, e146 <tdma_task+0x2c>
        delay = dpl_cputime_ticks_to_usecs(ticks - slot->cputime_slot_start);
    e134:	687b      	ldr	r3, [r7, #4]
    e136:	1ac0      	subs	r0, r0, r3
        if (slot->idx!=0 && delay > MYNEWT_VAL(TDMA_MAX_SLOT_DELAY_US)) {
    e138:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    e13c:	d903      	bls.n	e146 <tdma_task+0x2c>
            TDMA_STATS_INC(dropped_slots);
    e13e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    e140:	3301      	adds	r3, #1
    e142:	62ab      	str	r3, [r5, #40]	; 0x28
    e144:	e7ed      	b.n	e122 <tdma_task+0x8>
    return ((struct os_event*)ev)->ev_cb((struct os_event*)ev);
    e146:	6863      	ldr	r3, [r4, #4]
    e148:	4620      	mov	r0, r4
    e14a:	4798      	blx	r3
    e14c:	e7e9      	b.n	e122 <tdma_task+0x8>

0000e14e <slot_timer_cb.part.0>:
 * @param arg    A void type argument.
 *
 * @return void
 */
static void
slot_timer_cb(void * arg)
    e14e:	b508      	push	{r3, lr}
{
    assert(arg);
    e150:	2300      	movs	r3, #0
    e152:	461a      	mov	r2, r3
    e154:	4619      	mov	r1, r3
    e156:	4618      	mov	r0, r3
    e158:	f7fe fb50 	bl	c7fc <__assert_func>

0000e15c <slot_timer_cb>:
{
    e15c:	b508      	push	{r3, lr}
    assert(arg);
    e15e:	b908      	cbnz	r0, e164 <slot_timer_cb+0x8>
    e160:	f7ff fff5 	bl	e14e <slot_timer_cb.part.0>
    tdma_slot_t * slot = (tdma_slot_t *) arg;
    /* No point in continuing if this slot is NULL */
    if (slot == NULL) {
        return;
    }
    tdma_instance_t * tdma = slot->parent;
    e164:	6883      	ldr	r3, [r0, #8]

    DIAGMSG("{\"utime\": %"PRIu32",\"msg\": \"slot_timer_cb\"}\n",
            dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));

    TDMA_STATS_INC(slot_timer_cnt);
    e166:	69da      	ldr	r2, [r3, #28]
    e168:	3201      	adds	r2, #1
    e16a:	61da      	str	r2, [r3, #28]

    if (slot == &tdma->superframe_slot) {
    e16c:	f103 0280 	add.w	r2, r3, #128	; 0x80
    e170:	4290      	cmp	r0, r2
    e172:	d103      	bne.n	e17c <slot_timer_cb+0x20>
        /* Superframe must have been missed by ccp */
        TDMA_STATS_INC(superframe_miss);
    e174:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    e176:	3201      	adds	r2, #1
    e178:	625a      	str	r2, [r3, #36]	; 0x24
#ifdef TDMA_TASKS_ENABLE
    dpl_eventq_put(&tdma->eventq, &slot->event);
#else
    dpl_eventq_put(&tdma->dev_inst->eventq, &slot->event);
#endif
}
    e17a:	bd08      	pop	{r3, pc}
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    e17c:	f100 0124 	add.w	r1, r0, #36	; 0x24
    e180:	f103 00b8 	add.w	r0, r3, #184	; 0xb8
    e184:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    e188:	f7fe be17 	b.w	cdba <os_eventq_put>

0000e18c <tdma_init>:
{
    e18c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    e18e:	460e      	mov	r6, r1
    assert(dev);
    e190:	4605      	mov	r5, r0
    e192:	b928      	cbnz	r0, e1a0 <tdma_init+0x14>
    e194:	2300      	movs	r3, #0
    e196:	461a      	mov	r2, r3
    e198:	4619      	mov	r1, r3
    e19a:	4618      	mov	r0, r3
    e19c:	f7fe fb2e 	bl	c7fc <__assert_func>
    tdma_instance_t * tdma = (tdma_instance_t*)uwb_mac_find_cb_inst_ptr(dev, UWBEXT_TDMA);
    e1a0:	2103      	movs	r1, #3
    e1a2:	f7fa fc33 	bl	8a0c <uwb_mac_find_cb_inst_ptr>
    if (tdma == NULL) {
    e1a6:	4604      	mov	r4, r0
    e1a8:	b9d8      	cbnz	r0, e1e2 <tdma_init+0x56>
        tdma = (tdma_instance_t *) calloc(1, sizeof(struct _tdma_instance_t) + nslots * sizeof(struct _tdma_slot_t *));
    e1aa:	f506 71a4 	add.w	r1, r6, #328	; 0x148
    e1ae:	0089      	lsls	r1, r1, #2
    e1b0:	2001      	movs	r0, #1
    e1b2:	f001 ff63 	bl	1007c <calloc>
        assert(tdma);
    e1b6:	4604      	mov	r4, r0
    e1b8:	2800      	cmp	r0, #0
    e1ba:	d0eb      	beq.n	e194 <tdma_init+0x8>
        tdma->status.selfmalloc = 1;
    e1bc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    e1c0:	f043 0301 	orr.w	r3, r3, #1
    e1c4:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
    return (dpl_error_t)os_mutex_init(&mu->mu);
    e1c8:	306c      	adds	r0, #108	; 0x6c
    e1ca:	f7fe ffc3 	bl	d154 <os_mutex_init>
        assert(err == DPL_OK);
    e1ce:	2800      	cmp	r0, #0
    e1d0:	d1e0      	bne.n	e194 <tdma_init+0x8>
        tdma->task_prio = dev->task_prio + 0x6;
    e1d2:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
        tdma->nslots = nslots;
    e1d6:	f8a4 607a 	strh.w	r6, [r4, #122]	; 0x7a
        tdma->task_prio = dev->task_prio + 0x6;
    e1da:	3306      	adds	r3, #6
        tdma->dev_inst = dev;
    e1dc:	6025      	str	r5, [r4, #0]
        tdma->task_prio = dev->task_prio + 0x6;
    e1de:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
    tdma->cbs = (struct uwb_mac_interface){
    e1e2:	f104 0330 	add.w	r3, r4, #48	; 0x30
    e1e6:	4618      	mov	r0, r3
    e1e8:	223c      	movs	r2, #60	; 0x3c
    e1ea:	2100      	movs	r1, #0
    e1ec:	f002 f84d 	bl	1028a <memset>
    e1f0:	2203      	movs	r2, #3
    e1f2:	8662      	strh	r2, [r4, #50]	; 0x32
    e1f4:	4a2d      	ldr	r2, [pc, #180]	; (e2ac <tdma_init+0x120>)
    e1f6:	6662      	str	r2, [r4, #100]	; 0x64
    uwb_mac_append_interface(dev, &tdma->cbs);
    e1f8:	4601      	mov	r1, r0
    tdma->cbs = (struct uwb_mac_interface){
    e1fa:	6364      	str	r4, [r4, #52]	; 0x34
    uwb_mac_append_interface(dev, &tdma->cbs);
    e1fc:	4628      	mov	r0, r5
    e1fe:	f7fa fbbb 	bl	8978 <uwb_mac_append_interface>
    tdma->ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(dev, UWBEXT_CCP);
    e202:	2101      	movs	r1, #1
    e204:	4628      	mov	r0, r5
    e206:	f7fa fc01 	bl	8a0c <uwb_mac_find_cb_inst_ptr>
    e20a:	6060      	str	r0, [r4, #4]
    assert(tdma->ccp);
    e20c:	2800      	cmp	r0, #0
    e20e:	d0c1      	beq.n	e194 <tdma_init+0x8>
    int rc = stats_init(
    e210:	2204      	movs	r2, #4
    e212:	f104 0508 	add.w	r5, r4, #8
    e216:	4b26      	ldr	r3, [pc, #152]	; (e2b0 <tdma_init+0x124>)
    e218:	9200      	str	r2, [sp, #0]
    e21a:	4611      	mov	r1, r2
    e21c:	4628      	mov	r0, r5
    e21e:	f005 f88d 	bl	1333c <stats_init>
    assert(rc == 0);
    e222:	2800      	cmp	r0, #0
    e224:	d1b6      	bne.n	e194 <tdma_init+0x8>
    rc = stats_register("tdma", STATS_HDR(tdma->stat));
    e226:	4629      	mov	r1, r5
    e228:	4822      	ldr	r0, [pc, #136]	; (e2b4 <tdma_init+0x128>)
    e22a:	f005 f90b 	bl	13444 <stats_register>
    assert(rc == 0);
    e22e:	4605      	mov	r5, r0
    e230:	2800      	cmp	r0, #0
    e232:	d1af      	bne.n	e194 <tdma_init+0x8>
    tdma->superframe_slot.idx = 0;
    e234:	4626      	mov	r6, r4
    tdma->superframe_slot.parent = tdma;
    e236:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
    tdma->superframe_slot.idx = 0;
    e23a:	f826 0f80 	strh.w	r0, [r6, #128]!
    dpl_cputime_timer_init(&tdma->superframe_slot.timer, slot_timer_cb, (void *) &tdma->superframe_slot);
    e23e:	491e      	ldr	r1, [pc, #120]	; (e2b8 <tdma_init+0x12c>)
    e240:	4632      	mov	r2, r6
    e242:	f104 008c 	add.w	r0, r4, #140	; 0x8c
    e246:	f002 fb5f 	bl	10908 <dpl_cputime_timer_init>
    memset(ev, 0, sizeof(*ev));
    e24a:	4629      	mov	r1, r5
    e24c:	2210      	movs	r2, #16
    e24e:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
    e252:	f002 f81a 	bl	1028a <memset>
    ev->ev.ev_cb = (os_event_fn *)fn;
    e256:	4b19      	ldr	r3, [pc, #100]	; (e2bc <tdma_init+0x130>)
    ev->ev.ev_arg = arg;
    e258:	e9c4 362a 	strd	r3, r6, [r4, #168]	; 0xa8
    tdma->status.initialized = true;
    e25c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    e260:	f043 0302 	orr.w	r3, r3, #2
    e264:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    tdma->os_epoch = dpl_cputime_get32();
    e268:	f002 fb64 	bl	10934 <dpl_cputime_get32>
    if (!dpl_eventq_inited(&inst->eventq))
    e26c:	f104 05b8 	add.w	r5, r4, #184	; 0xb8
    tdma->os_epoch = dpl_cputime_get32();
    e270:	67e0      	str	r0, [r4, #124]	; 0x7c
    return os_eventq_inited((struct os_eventq *) evq);
    e272:	4628      	mov	r0, r5
    e274:	f7fe fd9c 	bl	cdb0 <os_eventq_inited>
    if (!dpl_eventq_inited(&inst->eventq))
    e278:	b9a8      	cbnz	r0, e2a6 <tdma_init+0x11a>
    os_eventq_init((struct os_eventq *) evq);
    e27a:	4628      	mov	r0, r5
    e27c:	f7fe fd8e 	bl	cd9c <os_eventq_init>
    return os_task_init((struct os_task *) t, name, (os_task_func_t) func,
    e280:	f44f 7380 	mov.w	r3, #256	; 0x100
    e284:	9303      	str	r3, [sp, #12]
                      inst->task_stack,
    e286:	f504 7390 	add.w	r3, r4, #288	; 0x120
    e28a:	9302      	str	r3, [sp, #8]
    e28c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e290:	9301      	str	r3, [sp, #4]
    e292:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    e296:	9300      	str	r3, [sp, #0]
    e298:	4a09      	ldr	r2, [pc, #36]	; (e2c0 <tdma_init+0x134>)
    e29a:	4906      	ldr	r1, [pc, #24]	; (e2b4 <tdma_init+0x128>)
    e29c:	4623      	mov	r3, r4
    e29e:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    e2a2:	f7ff fa61 	bl	d768 <os_task_init>
}
    e2a6:	4620      	mov	r0, r4
    e2a8:	b004      	add	sp, #16
    e2aa:	bd70      	pop	{r4, r5, r6, pc}
    e2ac:	0000e0f9 	.word	0x0000e0f9
    e2b0:	0002069f 	.word	0x0002069f
    e2b4:	00020610 	.word	0x00020610
    e2b8:	0000e15d 	.word	0x0000e15d
    e2bc:	0000e031 	.word	0x0000e031
    e2c0:	0000e11b 	.word	0x0000e11b

0000e2c4 <tdma_assign_slot>:
{
    e2c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e2c8:	4699      	mov	r9, r3
    assert(idx < inst->nslots);
    e2ca:	f8b0 307a 	ldrh.w	r3, [r0, #122]	; 0x7a
    e2ce:	4293      	cmp	r3, r2
{
    e2d0:	4605      	mov	r5, r0
    e2d2:	4688      	mov	r8, r1
    e2d4:	4616      	mov	r6, r2
    assert(idx < inst->nslots);
    e2d6:	d805      	bhi.n	e2e4 <tdma_assign_slot+0x20>
    e2d8:	2300      	movs	r3, #0
    e2da:	461a      	mov	r2, r3
    e2dc:	4619      	mov	r1, r3
    e2de:	4618      	mov	r0, r3
    e2e0:	f7fe fa8c 	bl	c7fc <__assert_func>
    if (inst->status.initialized == false)
    e2e4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    e2e8:	079b      	lsls	r3, r3, #30
    e2ea:	d528      	bpl.n	e33e <tdma_assign_slot+0x7a>
    if (inst->slot[idx] == NULL){
    e2ec:	eb00 0782 	add.w	r7, r0, r2, lsl #2
    e2f0:	f8d7 0520 	ldr.w	r0, [r7, #1312]	; 0x520
    e2f4:	b9f0      	cbnz	r0, e334 <tdma_assign_slot+0x70>
        inst->slot[idx] = (tdma_slot_t  *) calloc(1, sizeof(struct _tdma_slot_t));
    e2f6:	2138      	movs	r1, #56	; 0x38
    e2f8:	2001      	movs	r0, #1
    e2fa:	f001 febf 	bl	1007c <calloc>
    e2fe:	f8c7 0520 	str.w	r0, [r7, #1312]	; 0x520
        assert(inst->slot[idx]);
    e302:	2800      	cmp	r0, #0
    e304:	d0e8      	beq.n	e2d8 <tdma_assign_slot+0x14>
    inst->slot[idx]->idx = idx;
    e306:	f8d7 4520 	ldr.w	r4, [r7, #1312]	; 0x520
    memset(ev, 0, sizeof(*ev));
    e30a:	2210      	movs	r2, #16
    e30c:	8026      	strh	r6, [r4, #0]
    inst->slot[idx]->parent = inst;
    e30e:	60a5      	str	r5, [r4, #8]
    inst->slot[idx]->arg = arg;
    e310:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
    e314:	2100      	movs	r1, #0
    e316:	f104 0024 	add.w	r0, r4, #36	; 0x24
    e31a:	f001 ffb6 	bl	1028a <memset>
    ev->ev.ev_arg = arg;
    e31e:	e9c4 840a 	strd	r8, r4, [r4, #40]	; 0x28
    dpl_cputime_timer_init(&inst->slot[idx]->timer, slot_timer_cb, (void *) inst->slot[idx]);
    e322:	f8d7 2520 	ldr.w	r2, [r7, #1312]	; 0x520
    e326:	4907      	ldr	r1, [pc, #28]	; (e344 <tdma_assign_slot+0x80>)
}
    e328:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dpl_cputime_timer_init(&inst->slot[idx]->timer, slot_timer_cb, (void *) inst->slot[idx]);
    e32c:	f102 000c 	add.w	r0, r2, #12
    e330:	f002 baea 	b.w	10908 <dpl_cputime_timer_init>
        memset(inst->slot[idx], 0, sizeof(struct _tdma_slot_t));
    e334:	2238      	movs	r2, #56	; 0x38
    e336:	2100      	movs	r1, #0
    e338:	f001 ffa7 	bl	1028a <memset>
    e33c:	e7e3      	b.n	e306 <tdma_assign_slot+0x42>
}
    e33e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e342:	bf00      	nop
    e344:	0000e15d 	.word	0x0000e15d

0000e348 <tdma_release_slot>:
    assert(idx < inst->nslots);
    e348:	f8b0 307a 	ldrh.w	r3, [r0, #122]	; 0x7a
    e34c:	428b      	cmp	r3, r1
{
    e34e:	b510      	push	{r4, lr}
    assert(idx < inst->nslots);
    e350:	d801      	bhi.n	e356 <tdma_release_slot+0xe>
    e352:	f7ff fefc 	bl	e14e <slot_timer_cb.part.0>
    if (inst->slot[idx]) {
    e356:	eb00 0481 	add.w	r4, r0, r1, lsl #2
    e35a:	f8d4 0520 	ldr.w	r0, [r4, #1312]	; 0x520
    e35e:	b148      	cbz	r0, e374 <tdma_release_slot+0x2c>
        dpl_cputime_timer_stop(&inst->slot[idx]->timer);
    e360:	300c      	adds	r0, #12
    e362:	f002 fae5 	bl	10930 <dpl_cputime_timer_stop>
        free(inst->slot[idx]);
    e366:	f8d4 0520 	ldr.w	r0, [r4, #1312]	; 0x520
    e36a:	f001 ff47 	bl	101fc <free>
        inst->slot[idx] =  NULL;
    e36e:	2300      	movs	r3, #0
    e370:	f8c4 3520 	str.w	r3, [r4, #1312]	; 0x520
}
    e374:	bd10      	pop	{r4, pc}

0000e376 <tdma_stop>:
 *
 * @return void
 */
void
tdma_stop(struct _tdma_instance_t * tdma)
{
    e376:	b570      	push	{r4, r5, r6, lr}
    e378:	4604      	mov	r4, r0
    uint16_t i;
    for (i = 0; i < tdma->nslots; i++) {
    e37a:	2500      	movs	r5, #0
    e37c:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    e380:	b2ae      	uxth	r6, r5
    e382:	42b3      	cmp	r3, r6
    e384:	d800      	bhi.n	e388 <tdma_stop+0x12>
        if (tdma->slot[i]){
            dpl_cputime_timer_stop(&tdma->slot[i]->timer);
            tdma_release_slot(tdma, i);
        }
    }
}
    e386:	bd70      	pop	{r4, r5, r6, pc}
        if (tdma->slot[i]){
    e388:	b2ab      	uxth	r3, r5
    e38a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    e38e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
    e392:	b130      	cbz	r0, e3a2 <tdma_stop+0x2c>
            dpl_cputime_timer_stop(&tdma->slot[i]->timer);
    e394:	300c      	adds	r0, #12
    e396:	f002 facb 	bl	10930 <dpl_cputime_timer_stop>
            tdma_release_slot(tdma, i);
    e39a:	4631      	mov	r1, r6
    e39c:	4620      	mov	r0, r4
    e39e:	f7ff ffd3 	bl	e348 <tdma_release_slot>
    for (i = 0; i < tdma->nslots; i++) {
    e3a2:	3501      	adds	r5, #1
    e3a4:	e7ea      	b.n	e37c <tdma_stop+0x6>

0000e3a6 <tdma_free>:
{
    e3a6:	b510      	push	{r4, lr}
    assert(inst);
    e3a8:	4604      	mov	r4, r0
    e3aa:	b908      	cbnz	r0, e3b0 <tdma_free+0xa>
    e3ac:	f7ff fecf 	bl	e14e <slot_timer_cb.part.0>
    tdma_stop(inst);
    e3b0:	f7ff ffe1 	bl	e376 <tdma_stop>
    uwb_mac_remove_interface(inst->dev_inst, inst->cbs.id);
    e3b4:	8e61      	ldrh	r1, [r4, #50]	; 0x32
    e3b6:	6820      	ldr	r0, [r4, #0]
    e3b8:	f7fa fafb 	bl	89b2 <uwb_mac_remove_interface>
    if (inst->status.selfmalloc)
    e3bc:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    e3c0:	f013 0201 	ands.w	r2, r3, #1
    e3c4:	d004      	beq.n	e3d0 <tdma_free+0x2a>
        free(inst);
    e3c6:	4620      	mov	r0, r4
}
    e3c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        free(inst);
    e3cc:	f001 bf16 	b.w	101fc <free>
        inst->status.initialized = 0;
    e3d0:	f362 0341 	bfi	r3, r2, #1, #1
    e3d4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
    e3d8:	bd10      	pop	{r4, pc}

0000e3da <tdma_rx_slot_start>:
 *
 * @return dx_time   The time for a rx operation to start
 */
uint64_t
tdma_rx_slot_start(struct _tdma_instance_t * tdma, dpl_float32_t idx)
{
    e3da:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint64_t dx_time, slot_offset;
    dpl_float64_t slot_period;
    struct uwb_ccp_instance * ccp = tdma->ccp;
    e3de:	6846      	ldr	r6, [r0, #4]
    uint64_t rx_stable = tdma->dev_inst->config.rx.timeToRxStable;
#if __KERNEL__
    slot_period = DPL_FLOAT64_U64_TO_F64(div64_s64(((uint64_t)ccp->period << 16), tdma->nslots));
#else
    slot_period = DPL_FLOAT64_U64_TO_F64((((uint64_t)ccp->period << 16) / tdma->nslots));
    e3e0:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
    e3e4:	f8d6 10e8 	ldr.w	r1, [r6, #232]	; 0xe8
    e3e8:	2300      	movs	r3, #0
{
    e3ea:	4605      	mov	r5, r0
    slot_period = DPL_FLOAT64_U64_TO_F64((((uint64_t)ccp->period << 16) / tdma->nslots));
    e3ec:	0408      	lsls	r0, r1, #16
    e3ee:	0c09      	lsrs	r1, r1, #16
{
    e3f0:	ee10 4a10 	vmov	r4, s0
    slot_period = DPL_FLOAT64_U64_TO_F64((((uint64_t)ccp->period << 16) / tdma->nslots));
    e3f4:	f010 fd78 	bl	1eee8 <__aeabi_uldivmod>
    e3f8:	f010 f9a8 	bl	1e74c <__aeabi_ul2d>
    e3fc:	4680      	mov	r8, r0
#endif
    slot_offset = DPL_FLOAT64_INT(DPL_FLOAT64_MUL(DPL_FLOAT64_FROM_F32(idx), slot_period));
    e3fe:	4620      	mov	r0, r4
    slot_period = DPL_FLOAT64_U64_TO_F64((((uint64_t)ccp->period << 16) / tdma->nslots));
    e400:	4689      	mov	r9, r1
    slot_offset = DPL_FLOAT64_INT(DPL_FLOAT64_MUL(DPL_FLOAT64_FROM_F32(idx), slot_period));
    e402:	f010 f981 	bl	1e708 <__aeabi_f2d>
    e406:	4602      	mov	r2, r0
    e408:	460b      	mov	r3, r1
    e40a:	4640      	mov	r0, r8
    e40c:	4649      	mov	r1, r9
    e40e:	f010 f9d3 	bl	1e7b8 <__aeabi_dmul>
    e412:	f010 fd81 	bl	1ef18 <__aeabi_d2lz>
    uint64_t rx_stable = tdma->dev_inst->config.rx.timeToRxStable;
    e416:	682b      	ldr	r3, [r5, #0]
    e418:	f893 251b 	ldrb.w	r2, [r3, #1307]	; 0x51b
    /* Compensate for the time it takes to turn on the receiver */
    slot_offset -= (rx_stable << 16);
    e41c:	0413      	lsls	r3, r2, #16

#if MYNEWT_VAL(UWB_WCS_ENABLED)
    {
        struct uwb_wcs_instance * wcs = ccp->wcs;
        dx_time = ccp->local_epoch + (uint64_t) uwb_wcs_dtu_time_adjust(wcs, slot_offset);
    e41e:	4283      	cmp	r3, r0
    e420:	bf94      	ite	ls
    e422:	460b      	movls	r3, r1
    e424:	1e4b      	subhi	r3, r1, #1
    e426:	eba0 4202 	sub.w	r2, r0, r2, lsl #16
    e42a:	6eb0      	ldr	r0, [r6, #104]	; 0x68
    e42c:	e9d6 4736 	ldrd	r4, r7, [r6, #216]	; 0xd8
    e430:	f001 fd52 	bl	fed8 <uwb_wcs_dtu_time_adjust>
    e434:	1820      	adds	r0, r4, r0
    }
#else
    dx_time = ccp->local_epoch + slot_offset;
#endif
    return dx_time;
}
    e436:	eb47 0101 	adc.w	r1, r7, r1
    e43a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0000e440 <tdma_tx_slot_start>:
 *
 * @return dx_time   The time for a rx operation to start (dtu)
 */
uint64_t
tdma_tx_slot_start(struct _tdma_instance_t * tdma, dpl_float32_t idx)
{
    e440:	b570      	push	{r4, r5, r6, lr}
    e442:	4606      	mov	r6, r0
    uint64_t dx_time = tdma_rx_slot_start(tdma, idx);
    e444:	f7ff ffc9 	bl	e3da <tdma_rx_slot_start>
    e448:	4604      	mov	r4, r0
#ifndef __KERNEL__
    dx_time = (dx_time + ((uint64_t)ceilf(uwb_usecs_to_dwt_usecs(uwb_phy_SHR_duration(tdma->dev_inst))) << 16));
    e44a:	6830      	ldr	r0, [r6, #0]
    e44c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    e44e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    uint64_t dx_time = tdma_rx_slot_start(tdma, idx);
    e452:	460d      	mov	r5, r1
    e454:	4798      	blx	r3
    dx_time = (dx_time + ((uint64_t)ceilf(uwb_usecs_to_dwt_usecs(uwb_phy_SHR_duration(tdma->dev_inst))) << 16));
    e456:	f010 f945 	bl	1e6e4 <__aeabi_i2d>
    e45a:	a30d      	add	r3, pc, #52	; (adr r3, e490 <tdma_tx_slot_start+0x50>)
    e45c:	e9d3 2300 	ldrd	r2, r3, [r3]
    e460:	f010 fad4 	bl	1ea0c <__aeabi_ddiv>
    e464:	f010 fca0 	bl	1eda8 <__aeabi_d2f>
    e468:	ee00 0a10 	vmov	s0, r0
    e46c:	f010 ff1e 	bl	1f2ac <ceilf>
    e470:	ee10 0a10 	vmov	r0, s0
    e474:	f010 fd68 	bl	1ef48 <__aeabi_f2ulz>
    e478:	4603      	mov	r3, r0
    e47a:	0409      	lsls	r1, r1, #16
    e47c:	ea41 4113 	orr.w	r1, r1, r3, lsr #16
    e480:	041b      	lsls	r3, r3, #16
    e482:	1918      	adds	r0, r3, r4
#else
    dx_time = (dx_time + ((uint64_t)(uwb_usecs_to_dwt_usecs(uwb_phy_SHR_duration(tdma->dev_inst))) << 16));
#endif
    return dx_time;
}
    e484:	eb45 0101 	adc.w	r1, r5, r1
    e488:	bd70      	pop	{r4, r5, r6, pc}
    e48a:	bf00      	nop
    e48c:	f3af 8000 	nop.w
    e490:	90690691 	.word	0x90690691
    e494:	3ff06906 	.word	0x3ff06906

0000e498 <tdma_pkg_init>:
 *
 * @return void
 */
void
tdma_pkg_init(void)
{
    e498:	b510      	push	{r4, lr}
    int i;
    struct uwb_dev *udev;
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    printf("{\"utime\": %"PRIu32",\"msg\": \"tdma_pkg_init\"}\n",
    e49a:	f002 fa4b 	bl	10934 <dpl_cputime_get32>
    e49e:	4601      	mov	r1, r0
    e4a0:	4807      	ldr	r0, [pc, #28]	; (e4c0 <tdma_pkg_init+0x28>)
    e4a2:	f002 f9cb 	bl	1083c <printf>
           dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
#endif

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
    e4a6:	2400      	movs	r4, #0
        udev = uwb_dev_idx_lookup(i);
    e4a8:	4620      	mov	r0, r4
    e4aa:	f7fa fa3b 	bl	8924 <uwb_dev_idx_lookup>
        if (!udev) {
    e4ae:	b110      	cbz	r0, e4b6 <tdma_pkg_init+0x1e>
            continue;
        }
        tdma_init(udev, MYNEWT_VAL(TDMA_NSLOTS));
    e4b0:	2110      	movs	r1, #16
    e4b2:	f7ff fe6b 	bl	e18c <tdma_init>
    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
    e4b6:	3401      	adds	r4, #1
    e4b8:	2c03      	cmp	r4, #3
    e4ba:	d1f5      	bne.n	e4a8 <tdma_pkg_init+0x10>
    }
}
    e4bc:	bd10      	pop	{r4, pc}
    e4be:	bf00      	nop
    e4c0:	00020615 	.word	0x00020615

0000e4c4 <tdma_pkg_down>:
 *
 * @return void
 */
int
tdma_pkg_down(int reason)
{
    e4c4:	b510      	push	{r4, lr}
    int i;
    struct uwb_dev *udev;
    struct _tdma_instance_t * tdma;
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    printf("{\"utime\": %"PRIu32",\"msg\": \"tdma_pkg_down\"}\n",
    e4c6:	f002 fa35 	bl	10934 <dpl_cputime_get32>
    e4ca:	4601      	mov	r1, r0
    e4cc:	4809      	ldr	r0, [pc, #36]	; (e4f4 <tdma_pkg_down+0x30>)
    e4ce:	f002 f9b5 	bl	1083c <printf>
           dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
#endif

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
    e4d2:	2400      	movs	r4, #0
        udev = uwb_dev_idx_lookup(i);
    e4d4:	4620      	mov	r0, r4
    e4d6:	f7fa fa25 	bl	8924 <uwb_dev_idx_lookup>
        if (!udev) {
    e4da:	b128      	cbz	r0, e4e8 <tdma_pkg_down+0x24>
            continue;
        }
        tdma = (struct _tdma_instance_t*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_TDMA);
    e4dc:	2103      	movs	r1, #3
    e4de:	f7fa fa95 	bl	8a0c <uwb_mac_find_cb_inst_ptr>
        if (!tdma) {
    e4e2:	b108      	cbz	r0, e4e8 <tdma_pkg_down+0x24>
            continue;
        }
        tdma_free(tdma);
    e4e4:	f7ff ff5f 	bl	e3a6 <tdma_free>
    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
    e4e8:	3401      	adds	r4, #1
    e4ea:	2c03      	cmp	r4, #3
    e4ec:	d1f2      	bne.n	e4d4 <tdma_pkg_down+0x10>
    }
    return 0;
}
    e4ee:	2000      	movs	r0, #0
    e4f0:	bd10      	pop	{r4, pc}
    e4f2:	bf00      	nop
    e4f4:	0002063c 	.word	0x0002063c

0000e4f8 <uwb_read_systime_lo32>:
    return (dev->uw_funcs->uf_read_systime_lo32(dev));
    e4f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
    e4fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    e4fc:	4718      	bx	r3

0000e4fe <uwb_phy_SHR_duration>:
    return (dev->uw_funcs->uf_phy_SHR_duration(dev));
    e4fe:	6a43      	ldr	r3, [r0, #36]	; 0x24
    e500:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    e504:	4718      	bx	r3

0000e506 <uwb_phy_forcetrxoff>:
    return (dev->uw_funcs->uf_phy_forcetrxoff(dev));
    e506:	6a43      	ldr	r3, [r0, #36]	; 0x24
    e508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    e50c:	4718      	bx	r3

0000e50e <error_cb>:
 * @return void
 */
static bool
error_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
    struct uwb_ccp_instance * ccp = (struct uwb_ccp_instance *)cbs->inst_ptr;
    e50e:	6848      	ldr	r0, [r1, #4]
    e510:	f8b0 20b6 	ldrh.w	r2, [r0, #182]	; 0xb6
    if(dpl_sem_get_count(&ccp->sem) == 1)
    e514:	2a01      	cmp	r2, #1
{
    e516:	b508      	push	{r3, lr}
    if(dpl_sem_get_count(&ccp->sem) == 1)
    e518:	d020      	beq.n	e55c <error_cb+0x4e>
        return false;

    CCP_STATS_INC(txrx_error);
    e51a:	6c03      	ldr	r3, [r0, #64]	; 0x40
    e51c:	3301      	adds	r3, #1
    e51e:	6403      	str	r3, [r0, #64]	; 0x40
    if(dpl_sem_get_count(&ccp->sem) == 0) {
    e520:	b10a      	cbz	r2, e526 <error_cb+0x18>
#endif
        }
        dpl_error_t err = dpl_sem_release(&ccp->sem);
        assert(err == DPL_OK);
    }
    return true;
    e522:	2001      	movs	r0, #1
}
    e524:	bd08      	pop	{r3, pc}
        if (ccp->config.role != CCP_ROLE_MASTER) {
    e526:	f890 30ca 	ldrb.w	r3, [r0, #202]	; 0xca
    e52a:	f013 0f1e 	tst.w	r3, #30
    e52e:	d00a      	beq.n	e546 <error_cb+0x38>
            ccp->status.rx_error = 1;
    e530:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
    e534:	f043 0301 	orr.w	r3, r3, #1
    e538:	f880 30c9 	strb.w	r3, [r0, #201]	; 0xc9
            ccp->missed_frames++;
    e53c:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
    e540:	3301      	adds	r3, #1
    e542:	f880 30f1 	strb.w	r3, [r0, #241]	; 0xf1
    return (dpl_error_t)os_sem_release(&sem->sem);
    e546:	30b0      	adds	r0, #176	; 0xb0
    e548:	f7ff f886 	bl	d658 <os_sem_release>
        assert(err == DPL_OK);
    e54c:	2800      	cmp	r0, #0
    e54e:	d0e8      	beq.n	e522 <error_cb+0x14>
    e550:	2300      	movs	r3, #0
    e552:	461a      	mov	r2, r3
    e554:	4619      	mov	r1, r3
    e556:	4618      	mov	r0, r3
    e558:	f7fe f950 	bl	c7fc <__assert_func>
        return false;
    e55c:	2000      	movs	r0, #0
    e55e:	e7e1      	b.n	e524 <error_cb+0x16>

0000e560 <tx_complete_cb>:
{
    e560:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    struct uwb_ccp_instance * ccp = (struct uwb_ccp_instance *)cbs->inst_ptr;
    e564:	684c      	ldr	r4, [r1, #4]
    if(dpl_sem_get_count(&ccp->sem) == 1)
    e566:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
    e56a:	2b01      	cmp	r3, #1
{
    e56c:	4605      	mov	r5, r0
    if(dpl_sem_get_count(&ccp->sem) == 1)
    e56e:	f000 80d7 	beq.w	e720 <tx_complete_cb+0x1c0>
    CCP_STATS_INC(tx_complete);
    e572:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    e574:	3301      	adds	r3, #1
    e576:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ccp->config.role != CCP_ROLE_MASTER)
    e578:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
    e57c:	f013 0f1e 	tst.w	r3, #30
    e580:	f040 80ce 	bne.w	e720 <tx_complete_cb+0x1c0>
    uwb_ccp_frame_t * frame = ccp->frames[(++ccp->idx)%ccp->nframes];
    e584:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
    e588:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
    e58c:	3301      	adds	r3, #1
    e58e:	b29b      	uxth	r3, r3
    e590:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
    e594:	fbb3 f1f2 	udiv	r1, r3, r2
    e598:	fb02 3311 	mls	r3, r2, r1, r3
    e59c:	b29b      	uxth	r3, r3
    e59e:	33e0      	adds	r3, #224	; 0xe0
    e5a0:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
    uint32_t delta_0 = 0xffffffffU&(uwb_read_systime_lo32(inst) - frame->transmission_timestamp.lo);
    e5a4:	f7ff ffa8 	bl	e4f8 <uwb_read_systime_lo32>
    e5a8:	6977      	ldr	r7, [r6, #20]
    e5aa:	1bc7      	subs	r7, r0, r7
    ccp->os_epoch = dpl_cputime_get32();
    e5ac:	f002 f9c2 	bl	10934 <dpl_cputime_get32>
    e5b0:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    uint32_t delta_1 = 0xffffffffU&(uwb_read_systime_lo32(inst) - frame->transmission_timestamp.lo);
    e5b4:	4628      	mov	r0, r5
    e5b6:	f7ff ff9f 	bl	e4f8 <uwb_read_systime_lo32>
    e5ba:	f8d6 a014 	ldr.w	sl, [r6, #20]
    e5be:	f896 b018 	ldrb.w	fp, [r6, #24]
    uint32_t delta = (delta_0>>1) + (delta_1>>1);
    e5c2:	087f      	lsrs	r7, r7, #1
    uint32_t delta_1 = 0xffffffffU&(uwb_read_systime_lo32(inst) - frame->transmission_timestamp.lo);
    e5c4:	eba0 000a 	sub.w	r0, r0, sl
    uint32_t delta = (delta_0>>1) + (delta_1>>1);
    e5c8:	eb07 0050 	add.w	r0, r7, r0, lsr #1
    ccp->os_epoch -= dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(delta>>16));
    e5cc:	0c00      	lsrs	r0, r0, #16
    e5ce:	f010 f879 	bl	1e6c4 <__aeabi_ui2d>
    e5d2:	a356      	add	r3, pc, #344	; (adr r3, e72c <tx_complete_cb+0x1cc>)
    e5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
    e5d8:	f010 f8ee 	bl	1e7b8 <__aeabi_dmul>
    e5dc:	4680      	mov	r8, r0
    e5de:	4689      	mov	r9, r1
    e5e0:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
    e5e4:	f010 f86e 	bl	1e6c4 <__aeabi_ui2d>
    e5e8:	4642      	mov	r2, r8
    e5ea:	464b      	mov	r3, r9
    e5ec:	f00f ff2c 	bl	1e448 <__aeabi_dsub>
    e5f0:	f010 fbba 	bl	1ed68 <__aeabi_d2uiz>
    CCP_STATS_SET(irq_latency, uwb_dwt_usecs_to_usecs(delta>>16));
    e5f4:	2200      	movs	r2, #0
    ccp->os_epoch -= dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(delta>>16));
    e5f6:	4607      	mov	r7, r0
    CCP_STATS_SET(irq_latency, uwb_dwt_usecs_to_usecs(delta>>16));
    e5f8:	2300      	movs	r3, #0
    e5fa:	4640      	mov	r0, r8
    e5fc:	4649      	mov	r1, r9
    e5fe:	f00f ff25 	bl	1e44c <__adddf3>
    e602:	f010 fbb1 	bl	1ed68 <__aeabi_d2uiz>
    e606:	6520      	str	r0, [r4, #80]	; 0x50
    ccp->master_epoch = frame->transmission_timestamp;
    e608:	6972      	ldr	r2, [r6, #20]
    e60a:	69b1      	ldr	r1, [r6, #24]
    ccp->period = (frame->transmission_interval >> 16);
    e60c:	f8d6 800c 	ldr.w	r8, [r6, #12]
    e610:	7c33      	ldrb	r3, [r6, #16]
    ccp->master_epoch = frame->transmission_timestamp;
    e612:	e9c4 2134 	strd	r2, r1, [r4, #208]	; 0xd0
    ccp->period = (frame->transmission_interval >> 16);
    e616:	ea4f 4818 	mov.w	r8, r8, lsr #16
    e61a:	ea48 4803 	orr.w	r8, r8, r3, lsl #16
    e61e:	f8c4 80e8 	str.w	r8, [r4, #232]	; 0xe8
    adjust_for_epoch_to_rm(ccp, frame->epoch_to_rm_us);
    e622:	f8b6 901e 	ldrh.w	r9, [r6, #30]
    ccp->master_epoch.timestamp -= ((uint64_t)epoch_to_rm_us << 16);
    e626:	ea4f 4309 	mov.w	r3, r9, lsl #16
    e62a:	1ad2      	subs	r2, r2, r3
    e62c:	f04f 0000 	mov.w	r0, #0
    e630:	eb61 0100 	sbc.w	r1, r1, r0
    ccp->local_epoch -= ((uint64_t)epoch_to_rm_us << 16);
    e634:	ebba 0303 	subs.w	r3, sl, r3
    e638:	eb6b 0000 	sbc.w	r0, fp, r0
    e63c:	e9c4 3036 	strd	r3, r0, [r4, #216]	; 0xd8
    ccp->master_epoch.timestamp -= ((uint64_t)epoch_to_rm_us << 16);
    e640:	e9c4 2134 	strd	r2, r1, [r4, #208]	; 0xd0
    ccp->os_epoch -= dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(epoch_to_rm_us));
    e644:	4638      	mov	r0, r7
    e646:	f010 f83d 	bl	1e6c4 <__aeabi_ui2d>
    e64a:	4606      	mov	r6, r0
    e64c:	4648      	mov	r0, r9
    e64e:	460f      	mov	r7, r1
    e650:	f010 f848 	bl	1e6e4 <__aeabi_i2d>
    e654:	a335      	add	r3, pc, #212	; (adr r3, e72c <tx_complete_cb+0x1cc>)
    e656:	e9d3 2300 	ldrd	r2, r3, [r3]
    e65a:	f010 f8ad 	bl	1e7b8 <__aeabi_dmul>
    e65e:	460b      	mov	r3, r1
    e660:	4602      	mov	r2, r0
    e662:	4639      	mov	r1, r7
    e664:	4630      	mov	r0, r6
    e666:	f00f feef 	bl	1e448 <__aeabi_dsub>
    e66a:	f010 fb7d 	bl	1ed68 <__aeabi_d2uiz>
    if (ccp->status.timer_enabled){
    e66e:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    ccp->os_epoch -= dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(epoch_to_rm_us));
    e672:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    if (ccp->status.timer_enabled){
    e676:	075b      	lsls	r3, r3, #29
    e678:	d521      	bpl.n	e6be <tx_complete_cb+0x15e>
            + dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(ccp->period))
    e67a:	f5a0 707a 	sub.w	r0, r0, #1000	; 0x3e8
    e67e:	f010 f821 	bl	1e6c4 <__aeabi_ui2d>
    e682:	4606      	mov	r6, r0
    e684:	4640      	mov	r0, r8
    e686:	460f      	mov	r7, r1
    e688:	f010 f81c 	bl	1e6c4 <__aeabi_ui2d>
    e68c:	a327      	add	r3, pc, #156	; (adr r3, e72c <tx_complete_cb+0x1cc>)
    e68e:	e9d3 2300 	ldrd	r2, r3, [r3]
    e692:	f010 f891 	bl	1e7b8 <__aeabi_dmul>
    e696:	4602      	mov	r2, r0
    e698:	460b      	mov	r3, r1
    e69a:	4630      	mov	r0, r6
    e69c:	4639      	mov	r1, r7
    e69e:	f00f fed5 	bl	1e44c <__adddf3>
        rc = dpl_cputime_timer_start(&ccp->timer, ccp->os_epoch
    e6a2:	f010 fb61 	bl	1ed68 <__aeabi_d2uiz>
    e6a6:	4601      	mov	r1, r0
    e6a8:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
    e6ac:	f002 f93e 	bl	1092c <dpl_cputime_timer_start>
        if (rc == 0) ccp->status.timer_restarted = 1;
    e6b0:	b928      	cbnz	r0, e6be <tx_complete_cb+0x15e>
    e6b2:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    e6b6:	f043 0308 	orr.w	r3, r3, #8
    e6ba:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
    ccp->status.valid |= ccp->idx > 1;
    e6be:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    e6c2:	f8b4 10ee 	ldrh.w	r1, [r4, #238]	; 0xee
    if(!(SLIST_EMPTY(&inst->interface_cbs))) {
    e6c6:	f8d5 6530 	ldr.w	r6, [r5, #1328]	; 0x530
    ccp->status.valid |= ccp->idx > 1;
    e6ca:	f3c3 0280 	ubfx	r2, r3, #2, #1
    e6ce:	2901      	cmp	r1, #1
    e6d0:	bf88      	it	hi
    e6d2:	f042 0201 	orrhi.w	r2, r2, #1
    e6d6:	f362 0382 	bfi	r3, r2, #2, #1
    e6da:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
    if(!(SLIST_EMPTY(&inst->interface_cbs))) {
    e6de:	b136      	cbz	r6, e6ee <tx_complete_cb+0x18e>
            if (lcbs != NULL && lcbs->superframe_cb) {
    e6e0:	6b73      	ldr	r3, [r6, #52]	; 0x34
    e6e2:	b113      	cbz	r3, e6ea <tx_complete_cb+0x18a>
                if(lcbs->superframe_cb((struct uwb_dev*)inst, lcbs)) continue;
    e6e4:	4631      	mov	r1, r6
    e6e6:	4628      	mov	r0, r5
    e6e8:	4798      	blx	r3
        SLIST_FOREACH(lcbs, &inst->interface_cbs, next) {
    e6ea:	6bb6      	ldr	r6, [r6, #56]	; 0x38
    e6ec:	e7f7      	b.n	e6de <tx_complete_cb+0x17e>
    if (ccp->config.postprocess && ccp->status.valid)
    e6ee:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
    e6f2:	4b0d      	ldr	r3, [pc, #52]	; (e728 <tx_complete_cb+0x1c8>)
    e6f4:	4393      	bics	r3, r2
    e6f6:	d105      	bne.n	e704 <tx_complete_cb+0x1a4>
    return (struct dpl_eventq *) os_eventq_dflt_get();
    e6f8:	f7fe fc06 	bl	cf08 <os_eventq_dflt_get>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    e6fc:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
    e700:	f7fe fb5b 	bl	cdba <os_eventq_put>
    if(dpl_sem_get_count(&ccp->sem) == 0){
    e704:	f8b4 50b6 	ldrh.w	r5, [r4, #182]	; 0xb6
    e708:	b955      	cbnz	r5, e720 <tx_complete_cb+0x1c0>
    return (dpl_error_t)os_sem_release(&sem->sem);
    e70a:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    e70e:	f7fe ffa3 	bl	d658 <os_sem_release>
        assert(err == DPL_OK);
    e712:	b128      	cbz	r0, e720 <tx_complete_cb+0x1c0>
    e714:	462b      	mov	r3, r5
    e716:	462a      	mov	r2, r5
    e718:	4629      	mov	r1, r5
    e71a:	4628      	mov	r0, r5
    e71c:	f7fe f86e 	bl	c7fc <__assert_func>
}
    e720:	2000      	movs	r0, #0
    e722:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e726:	bf00      	nop
    e728:	00010004 	.word	0x00010004
    e72c:	90690691 	.word	0x90690691
    e730:	3ff06906 	.word	0x3ff06906

0000e734 <ccp_task>:
{
    e734:	b510      	push	{r4, lr}
        dpl_eventq_run(&inst->eventq);
    e736:	f500 7486 	add.w	r4, r0, #268	; 0x10c
    os_eventq_run((struct os_eventq * )evq);
    e73a:	4620      	mov	r0, r4
    e73c:	f7fe fbb7 	bl	ceae <os_eventq_run>
    e740:	e7fb      	b.n	e73a <ccp_task+0x6>

0000e742 <ccp_timer_irq.part.0>:
 * @param cbs    Pointer to struct uwb_mac_interface.
 *
 * @return void
 */
static bool
reset_cb(struct uwb_dev *inst, struct uwb_mac_interface * cbs)
    e742:	b508      	push	{r3, lr}
    struct uwb_ccp_instance * ccp = (struct uwb_ccp_instance *)cbs->inst_ptr;
    if(dpl_sem_get_count(&ccp->sem) == 0){
        DIAGMSG("{\"utime\": %"PRIu32",\"msg\": \"uwb_ccp_reset_cb\"}\n",
                dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
        dpl_error_t err = dpl_sem_release(&ccp->sem);
        assert(err == DPL_OK);
    e744:	2300      	movs	r3, #0
    e746:	461a      	mov	r2, r3
    e748:	4619      	mov	r1, r3
    e74a:	4618      	mov	r0, r3
    e74c:	f7fe f856 	bl	c7fc <__assert_func>

0000e750 <reset_cb>:
{
    e750:	b510      	push	{r4, lr}
    struct uwb_ccp_instance * ccp = (struct uwb_ccp_instance *)cbs->inst_ptr;
    e752:	684c      	ldr	r4, [r1, #4]
    if(dpl_sem_get_count(&ccp->sem) == 0){
    e754:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
    e758:	b95b      	cbnz	r3, e772 <reset_cb+0x22>
    return (dpl_error_t)os_sem_release(&sem->sem);
    e75a:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    e75e:	f7fe ff7b 	bl	d658 <os_sem_release>
        assert(err == DPL_OK);
    e762:	b108      	cbz	r0, e768 <reset_cb+0x18>
    e764:	f7ff ffed 	bl	e742 <ccp_timer_irq.part.0>
        CCP_STATS_INC(reset);
    e768:	6e63      	ldr	r3, [r4, #100]	; 0x64
    e76a:	3301      	adds	r3, #1
    e76c:	6663      	str	r3, [r4, #100]	; 0x64
        return true;
    e76e:	2001      	movs	r0, #1
    }
    return false;   // CCP is an observer and should not return true
}
    e770:	bd10      	pop	{r4, pc}
    return false;   // CCP is an observer and should not return true
    e772:	2000      	movs	r0, #0
    e774:	e7fc      	b.n	e770 <reset_cb+0x20>

0000e776 <rx_timeout_cb>:
    struct uwb_ccp_instance * ccp = (struct uwb_ccp_instance *)cbs->inst_ptr;
    e776:	6848      	ldr	r0, [r1, #4]
{
    e778:	b508      	push	{r3, lr}
    e77a:	f8b0 30b6 	ldrh.w	r3, [r0, #182]	; 0xb6
    if(dpl_sem_get_count(&ccp->sem) == 1)
    e77e:	2b01      	cmp	r3, #1
    e780:	d017      	beq.n	e7b2 <rx_timeout_cb+0x3c>
    if (dpl_sem_get_count(&ccp->sem) == 0){
    e782:	b10b      	cbz	r3, e788 <rx_timeout_cb+0x12>
    return true;
    e784:	2001      	movs	r0, #1
}
    e786:	bd08      	pop	{r3, pc}
        ccp->status.rx_timeout_error = 1;
    e788:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
    e78c:	f043 0302 	orr.w	r3, r3, #2
    e790:	f880 30c9 	strb.w	r3, [r0, #201]	; 0xc9
        ccp->missed_frames++;
    e794:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
    e798:	3301      	adds	r3, #1
    e79a:	f880 30f1 	strb.w	r3, [r0, #241]	; 0xf1
        CCP_STATS_INC(rx_timeout);
    e79e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    e7a0:	3301      	adds	r3, #1
    e7a2:	65c3      	str	r3, [r0, #92]	; 0x5c
    e7a4:	30b0      	adds	r0, #176	; 0xb0
    e7a6:	f7fe ff57 	bl	d658 <os_sem_release>
        assert(err == DPL_OK);
    e7aa:	2800      	cmp	r0, #0
    e7ac:	d0ea      	beq.n	e784 <rx_timeout_cb+0xe>
    e7ae:	f7ff ffc8 	bl	e742 <ccp_timer_irq.part.0>
        return false;
    e7b2:	2000      	movs	r0, #0
    e7b4:	e7e7      	b.n	e786 <rx_timeout_cb+0x10>

0000e7b6 <ccp_timer_irq>:
ccp_timer_irq(void * arg){
    e7b6:	b508      	push	{r3, lr}
    assert(arg);
    e7b8:	b908      	cbnz	r0, e7be <ccp_timer_irq+0x8>
    e7ba:	f7ff ffc2 	bl	e742 <ccp_timer_irq.part.0>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    e7be:	f500 718e 	add.w	r1, r0, #284	; 0x11c
}
    e7c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    e7c6:	f500 7086 	add.w	r0, r0, #268	; 0x10c
    e7ca:	f7fe baf6 	b.w	cdba <os_eventq_put>

0000e7ce <uwb_set_delay_start.isra.0>:
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
    e7ce:	6a41      	ldr	r1, [r0, #36]	; 0x24
    e7d0:	6b49      	ldr	r1, [r1, #52]	; 0x34
    e7d2:	4708      	bx	r1
    e7d4:	0000      	movs	r0, r0
	...

0000e7d8 <ccp_listen.constprop.0.isra.0>:
 * output parameters
 *
 * returns struct uwb_ccp_status_t
 */
static struct uwb_ccp_status
ccp_listen(struct uwb_ccp_instance *ccp, uint64_t dx_time, uwb_dev_modes_t mode)
    e7d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
{
    struct uwb_dev * inst = ccp->dev_inst;
    e7dc:	4606      	mov	r6, r0
ccp_listen(struct uwb_ccp_instance *ccp, uint64_t dx_time, uwb_dev_modes_t mode)
    e7de:	4604      	mov	r4, r0
    struct uwb_dev * inst = ccp->dev_inst;
    e7e0:	f856 7bb0 	ldr.w	r7, [r6], #176
    DIAGMSG("{\"utime\": %"PRIu32",\"msg\": \"uwb_ccp_listen\"}\n",
            dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
    uwb_phy_forcetrxoff(inst);
    e7e4:	4638      	mov	r0, r7
ccp_listen(struct uwb_ccp_instance *ccp, uint64_t dx_time, uwb_dev_modes_t mode)
    e7e6:	4615      	mov	r5, r2
    e7e8:	4698      	mov	r8, r3
    uwb_phy_forcetrxoff(inst);
    e7ea:	f7ff fe8c 	bl	e506 <uwb_phy_forcetrxoff>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    e7ee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e7f2:	4630      	mov	r0, r6
    e7f4:	f7fe ff62 	bl	d6bc <os_sem_pend>
    dpl_error_t err = dpl_sem_pend(&ccp->sem,  DPL_TIMEOUT_NEVER);
    assert(err == DPL_OK);
    e7f8:	b128      	cbz	r0, e806 <ccp_listen.constprop.0.isra.0+0x2e>
    e7fa:	2300      	movs	r3, #0
    e7fc:	461a      	mov	r2, r3
    e7fe:	4619      	mov	r1, r3
    e800:	4618      	mov	r0, r3
    e802:	f7fd fffb 	bl	c7fc <__assert_func>

    CCP_STATS_INC(listen);
    e806:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e808:	3301      	adds	r3, #1
    e80a:	6263      	str	r3, [r4, #36]	; 0x24

    if (dx_time) {
    e80c:	ea55 0308 	orrs.w	r3, r5, r8
    e810:	d004      	beq.n	e81c <ccp_listen.constprop.0.isra.0+0x44>
        uwb_set_delay_start(inst, dx_time);
    e812:	462a      	mov	r2, r5
    e814:	4643      	mov	r3, r8
    e816:	4638      	mov	r0, r7
    e818:	f7ff ffd9 	bl	e7ce <uwb_set_delay_start.isra.0>
    }

    ccp->status.rx_timeout_error = 0;
    e81c:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    e820:	f36f 0341 	bfc	r3, #1, #1
    e824:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
    return (dev->uw_funcs->uf_start_rx(dev));
    e828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e82a:	4638      	mov	r0, r7
    e82c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    e82e:	4798      	blx	r3
    ccp->status.start_rx_error = uwb_start_rx(inst).start_rx_error;
    e830:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    e834:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    e838:	f360 13c7 	bfi	r3, r0, #7, #1
    e83c:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
    if (ccp->status.start_rx_error) {
    e840:	061b      	lsls	r3, r3, #24
    e842:	d51a      	bpl.n	e87a <ccp_listen.constprop.0.isra.0+0xa2>
#if MYNEWT_VAL(UWB_CCP_STATS)
        uint32_t behind = 0xffffffffU&(uwb_read_systime_lo32(inst) - dx_time);
    e844:	4638      	mov	r0, r7
    e846:	f7ff fe57 	bl	e4f8 <uwb_read_systime_lo32>
    e84a:	1b40      	subs	r0, r0, r5
        CCP_STATS_SET(os_lat_behind, uwb_dwt_usecs_to_usecs(behind>>16));
    e84c:	0c00      	lsrs	r0, r0, #16
    e84e:	f00f ff39 	bl	1e6c4 <__aeabi_ui2d>
    e852:	a31d      	add	r3, pc, #116	; (adr r3, e8c8 <ccp_listen.constprop.0.isra.0+0xf0>)
    e854:	e9d3 2300 	ldrd	r2, r3, [r3]
    e858:	f00f ffae 	bl	1e7b8 <__aeabi_dmul>
    e85c:	2300      	movs	r3, #0
    e85e:	2200      	movs	r2, #0
    e860:	f00f fdf4 	bl	1e44c <__adddf3>
    e864:	f010 fa80 	bl	1ed68 <__aeabi_d2uiz>
#endif
        /*  */
        CCP_STATS_INC(rx_start_error);
    e868:	6b63      	ldr	r3, [r4, #52]	; 0x34
        CCP_STATS_SET(os_lat_behind, uwb_dwt_usecs_to_usecs(behind>>16));
    e86a:	6560      	str	r0, [r4, #84]	; 0x54
        CCP_STATS_INC(rx_start_error);
    e86c:	3301      	adds	r3, #1
    e86e:	6363      	str	r3, [r4, #52]	; 0x34
    return (dpl_error_t)os_sem_release(&sem->sem);
    e870:	4630      	mov	r0, r6
    e872:	f7fe fef1 	bl	d658 <os_sem_release>
        if (err==DPL_TIMEOUT) {
            CCP_STATS_INC(sem_timeout);
        }
        if(dpl_sem_get_count(&ccp->sem) == 0){
            err = dpl_sem_release(&ccp->sem);
            assert(err == DPL_OK);
    e876:	b318      	cbz	r0, e8c0 <ccp_listen.constprop.0.isra.0+0xe8>
    e878:	e7bf      	b.n	e7fa <ccp_listen.constprop.0.isra.0+0x22>
        if (dx_time) {
    e87a:	ea55 0308 	orrs.w	r3, r5, r8
    e87e:	d012      	beq.n	e8a6 <ccp_listen.constprop.0.isra.0+0xce>
            uint32_t margin = 0xffffffffU&(dx_time - uwb_read_systime_lo32(inst));
    e880:	4638      	mov	r0, r7
    e882:	f7ff fe39 	bl	e4f8 <uwb_read_systime_lo32>
    e886:	1a28      	subs	r0, r5, r0
            CCP_STATS_SET(os_lat_margin, uwb_dwt_usecs_to_usecs(margin>>16));
    e888:	0c00      	lsrs	r0, r0, #16
    e88a:	f00f ff1b 	bl	1e6c4 <__aeabi_ui2d>
    e88e:	a30e      	add	r3, pc, #56	; (adr r3, e8c8 <ccp_listen.constprop.0.isra.0+0xf0>)
    e890:	e9d3 2300 	ldrd	r2, r3, [r3]
    e894:	f00f ff90 	bl	1e7b8 <__aeabi_dmul>
    e898:	2200      	movs	r2, #0
    e89a:	2300      	movs	r3, #0
    e89c:	f00f fdd6 	bl	1e44c <__adddf3>
    e8a0:	f010 fa62 	bl	1ed68 <__aeabi_d2uiz>
    e8a4:	65a0      	str	r0, [r4, #88]	; 0x58
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    e8a6:	2121      	movs	r1, #33	; 0x21
    e8a8:	4630      	mov	r0, r6
    e8aa:	f7fe ff07 	bl	d6bc <os_sem_pend>
        if (err==DPL_TIMEOUT) {
    e8ae:	2806      	cmp	r0, #6
            CCP_STATS_INC(sem_timeout);
    e8b0:	bf02      	ittt	eq
    e8b2:	6e23      	ldreq	r3, [r4, #96]	; 0x60
    e8b4:	3301      	addeq	r3, #1
    e8b6:	6623      	streq	r3, [r4, #96]	; 0x60
        if(dpl_sem_get_count(&ccp->sem) == 0){
    e8b8:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
    e8bc:	2b00      	cmp	r3, #0
    e8be:	d0d7      	beq.n	e870 <ccp_listen.constprop.0.isra.0+0x98>
        }
    }
    return ccp->status;
}
    e8c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e8c4:	f3af 8000 	nop.w
    e8c8:	90690691 	.word	0x90690691
    e8cc:	3ff06906 	.word	0x3ff06906

0000e8d0 <uwb_set_rx_timeout.isra.0>:
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
    e8d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
    e8d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e8d4:	4718      	bx	r3
	...

0000e8d8 <ccp_slave_timer_ev_cb>:
{
    e8d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    assert(ev != NULL);
    e8dc:	b928      	cbnz	r0, e8ea <ccp_slave_timer_ev_cb+0x12>
    e8de:	2300      	movs	r3, #0
    e8e0:	461a      	mov	r2, r3
    e8e2:	4619      	mov	r1, r3
    e8e4:	4618      	mov	r0, r3
    e8e6:	f7fd ff89 	bl	c7fc <__assert_func>
    return ev->ev.ev_arg;
    e8ea:	6884      	ldr	r4, [r0, #8]
    assert(dpl_event_get_arg(ev));
    e8ec:	2c00      	cmp	r4, #0
    e8ee:	d0f6      	beq.n	e8de <ccp_slave_timer_ev_cb+0x6>
    struct uwb_dev * inst = ccp->dev_inst;
    e8f0:	6825      	ldr	r5, [r4, #0]
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
    e8f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e8f4:	2120      	movs	r1, #32
    e8f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    e8f8:	4628      	mov	r0, r5
    e8fa:	4798      	blx	r3
    if (!ccp->status.enabled) {
    e8fc:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    ccp->blink_frame_duration = uwb_phy_frame_duration(inst, sizeof(uwb_ccp_blink_frame_t));
    e900:	f8a4 017e 	strh.w	r0, [r4, #382]	; 0x17e
    if (!ccp->status.enabled) {
    e904:	06d8      	lsls	r0, r3, #27
    e906:	d577      	bpl.n	e9f8 <ccp_slave_timer_ev_cb+0x120>
    if (ccp->status.rx_timeout_error) {
    e908:	0799      	lsls	r1, r3, #30
    e90a:	d50a      	bpl.n	e922 <ccp_slave_timer_ev_cb+0x4a>
        uwb_set_rx_timeout(inst, MYNEWT_VAL(UWB_CCP_LONG_RX_TO));
    e90c:	4628      	mov	r0, r5
    e90e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e912:	f7ff ffdd 	bl	e8d0 <uwb_set_rx_timeout.isra.0>
        ccp_listen(ccp, 0, UWB_BLOCKING);
    e916:	2200      	movs	r2, #0
    e918:	2300      	movs	r3, #0
    e91a:	4620      	mov	r0, r4
    e91c:	f7ff ff5c 	bl	e7d8 <ccp_listen.constprop.0.isra.0>
    e920:	e04f      	b.n	e9c2 <ccp_slave_timer_ev_cb+0xea>
    CCP_STATS_INC(slave_cnt);
    e922:	69e3      	ldr	r3, [r4, #28]
    if (ccp->wcs) {
    e924:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
    CCP_STATS_INC(slave_cnt);
    e928:	3301      	adds	r3, #1
    dx_time = ccp->local_epoch;
    e92a:	e9d4 7636 	ldrd	r7, r6, [r4, #216]	; 0xd8
    CCP_STATS_INC(slave_cnt);
    e92e:	61e3      	str	r3, [r4, #28]
    if (ccp->wcs) {
    e930:	f1b8 0f00 	cmp.w	r8, #0
    e934:	d00f      	beq.n	e956 <ccp_slave_timer_ev_cb+0x7e>
        dx_time += DPL_FLOAT64_F64_TO_U64(DPL_FLOAT64_MUL(DPL_FLOAT64_U64_TO_F64((uint64_t)ccp->period << 16),
    e936:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
    e93a:	0408      	lsls	r0, r1, #16
    e93c:	0c09      	lsrs	r1, r1, #16
    e93e:	f00f ff05 	bl	1e74c <__aeabi_ul2d>
    e942:	e9d8 2310 	ldrd	r2, r3, [r8, #64]	; 0x40
    e946:	f00f ff37 	bl	1e7b8 <__aeabi_dmul>
    e94a:	f010 fb1d 	bl	1ef88 <__aeabi_d2ulz>
    e94e:	19c2      	adds	r2, r0, r7
    e950:	4617      	mov	r7, r2
    e952:	eb46 0601 	adc.w	r6, r6, r1
    dx_time -= ((uint64_t)ceilf(uwb_usecs_to_dwt_usecs(uwb_phy_SHR_duration(inst) +
    e956:	4628      	mov	r0, r5
    e958:	f7ff fdd1 	bl	e4fe <uwb_phy_SHR_duration>
    e95c:	f895 351b 	ldrb.w	r3, [r5, #1307]	; 0x51b
    e960:	4418      	add	r0, r3
    e962:	f00f febf 	bl	1e6e4 <__aeabi_i2d>
    e966:	a336      	add	r3, pc, #216	; (adr r3, ea40 <ccp_slave_timer_ev_cb+0x168>)
    e968:	e9d3 2300 	ldrd	r2, r3, [r3]
    e96c:	f010 f84e 	bl	1ea0c <__aeabi_ddiv>
    e970:	f010 fa1a 	bl	1eda8 <__aeabi_d2f>
    e974:	ee00 0a10 	vmov	s0, r0
    e978:	f010 fc98 	bl	1f2ac <ceilf>
    e97c:	ee10 0a10 	vmov	r0, s0
    e980:	f010 fae2 	bl	1ef48 <__aeabi_f2ulz>
                                                       inst->config.rx.timeToRxStable)) << 16);
    e984:	0409      	lsls	r1, r1, #16
    e986:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
    e98a:	0400      	lsls	r0, r0, #16
    dx_time -= ((uint64_t)ceilf(uwb_usecs_to_dwt_usecs(uwb_phy_SHR_duration(inst) +
    e98c:	1a3a      	subs	r2, r7, r0
    e98e:	eb66 0301 	sbc.w	r3, r6, r1
    timeout = ccp->blink_frame_duration + MYNEWT_VAL(XTALT_GUARD);
    e992:	f8b4 117e 	ldrh.w	r1, [r4, #382]	; 0x17e
    timeout += (ccp->config.tx_holdoff_dly + ccp->blink_frame_duration) * MYNEWT_VAL(UWB_CCP_MAX_CASCADE_RPTS);
    e996:	f8b4 60cc 	ldrh.w	r6, [r4, #204]	; 0xcc
    dx_time -= ((uint64_t)ceilf(uwb_usecs_to_dwt_usecs(uwb_phy_SHR_duration(inst) +
    e99a:	9201      	str	r2, [sp, #4]
    timeout = ccp->blink_frame_duration + MYNEWT_VAL(XTALT_GUARD);
    e99c:	f501 7080 	add.w	r0, r1, #256	; 0x100
    timeout += (ccp->config.tx_holdoff_dly + ccp->blink_frame_duration) * MYNEWT_VAL(UWB_CCP_MAX_CASCADE_RPTS);
    e9a0:	4431      	add	r1, r6
    e9a2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    uwb_set_rx_timeout(inst, timeout);
    e9a6:	b289      	uxth	r1, r1
    e9a8:	4628      	mov	r0, r5
    dx_time -= ((uint64_t)ceilf(uwb_usecs_to_dwt_usecs(uwb_phy_SHR_duration(inst) +
    e9aa:	9300      	str	r3, [sp, #0]
    uwb_set_rx_timeout(inst, timeout);
    e9ac:	f7ff ff90 	bl	e8d0 <uwb_set_rx_timeout.isra.0>
    ccp_listen(ccp, dx_time, UWB_BLOCKING);
    e9b0:	e9dd 3200 	ldrd	r3, r2, [sp]
    e9b4:	4620      	mov	r0, r4
    e9b6:	f7ff ff0f 	bl	e7d8 <ccp_listen.constprop.0.isra.0>
    if(ccp->status.start_rx_error){
    e9ba:	f994 30c8 	ldrsb.w	r3, [r4, #200]	; 0xc8
    e9be:	2b00      	cmp	r3, #0
    e9c0:	dba4      	blt.n	e90c <ccp_slave_timer_ev_cb+0x34>
    if (!ccp->status.enabled) {
    e9c2:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    e9c6:	06da      	lsls	r2, r3, #27
    e9c8:	d516      	bpl.n	e9f8 <ccp_slave_timer_ev_cb+0x120>
    dpl_cputime_timer_stop(&ccp->timer);
    e9ca:	f104 06f4 	add.w	r6, r4, #244	; 0xf4
    e9ce:	4630      	mov	r0, r6
    e9d0:	f001 ffae 	bl	10930 <dpl_cputime_timer_stop>
    if (ccp->status.rx_timeout_error &&
    e9d4:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    e9d8:	079b      	lsls	r3, r3, #30
    e9da:	d510      	bpl.n	e9fe <ccp_slave_timer_ev_cb+0x126>
    e9dc:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
    e9e0:	b16b      	cbz	r3, e9fe <ccp_slave_timer_ev_cb+0x126>
        rc = dpl_cputime_timer_relative(&ccp->timer, 0);
    e9e2:	2100      	movs	r1, #0
    e9e4:	4630      	mov	r0, r6
    e9e6:	f001 ffb5 	bl	10954 <dpl_cputime_timer_relative>
    if (rc == 0) ccp->status.timer_restarted = 1;
    e9ea:	b928      	cbnz	r0, e9f8 <ccp_slave_timer_ev_cb+0x120>
    e9ec:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    e9f0:	f043 0308 	orr.w	r3, r3, #8
    e9f4:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
}
    e9f8:	b002      	add	sp, #8
    e9fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ccp->status.rx_timeout_error = 0;
    e9fe:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
        timer_expiry = ccp->os_epoch + dpl_cputime_usecs_to_ticks(
    ea02:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
        ccp->status.rx_timeout_error = 0;
    ea06:	f36f 0341 	bfc	r3, #1, #1
    ea0a:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
        timer_expiry = ccp->os_epoch + dpl_cputime_usecs_to_ticks(
    ea0e:	f00f fe59 	bl	1e6c4 <__aeabi_ui2d>
    ea12:	a30b      	add	r3, pc, #44	; (adr r3, ea40 <ccp_slave_timer_ev_cb+0x168>)
    ea14:	e9d3 2300 	ldrd	r2, r3, [r3]
    ea18:	f00f fece 	bl	1e7b8 <__aeabi_dmul>
    ea1c:	f010 f9a4 	bl	1ed68 <__aeabi_d2uiz>
    ea20:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    ea24:	f8b4 117e 	ldrh.w	r1, [r4, #382]	; 0x17e
    ea28:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
    ea2c:	1a5b      	subs	r3, r3, r1
    ea2e:	f895 151b 	ldrb.w	r1, [r5, #1307]	; 0x51b
    ea32:	4418      	add	r0, r3
        rc = dpl_cputime_timer_start(&ccp->timer, timer_expiry);
    ea34:	1a41      	subs	r1, r0, r1
    ea36:	4630      	mov	r0, r6
    ea38:	f001 ff78 	bl	1092c <dpl_cputime_timer_start>
    ea3c:	e7d5      	b.n	e9ea <ccp_slave_timer_ev_cb+0x112>
    ea3e:	bf00      	nop
    ea40:	90690691 	.word	0x90690691
    ea44:	3ff06906 	.word	0x3ff06906

0000ea48 <ccp_master_timer_ev_cb>:
{
    ea48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    assert(ev != NULL);
    ea4c:	b928      	cbnz	r0, ea5a <ccp_master_timer_ev_cb+0x12>
    ea4e:	2300      	movs	r3, #0
    ea50:	461a      	mov	r2, r3
    ea52:	4619      	mov	r1, r3
    ea54:	4618      	mov	r0, r3
    ea56:	f7fd fed1 	bl	c7fc <__assert_func>
    ea5a:	6884      	ldr	r4, [r0, #8]
    assert(dpl_event_get_arg(ev));
    ea5c:	2c00      	cmp	r4, #0
    ea5e:	d0f6      	beq.n	ea4e <ccp_master_timer_ev_cb+0x6>
    if (!ccp->status.enabled) {
    ea60:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    ea64:	06dd      	lsls	r5, r3, #27
    ea66:	f140 810e 	bpl.w	ec86 <ccp_master_timer_ev_cb+0x23e>
    ccp->status.timer_restarted = 0;
    ea6a:	f36f 03c3 	bfc	r3, #3, #1
    CCP_STATS_INC(master_cnt);
    ea6e:	69a2      	ldr	r2, [r4, #24]
    ccp->status.timer_restarted = 0;
    ea70:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
    CCP_STATS_INC(send);
    ea74:	6a23      	ldr	r3, [r4, #32]
    struct uwb_dev * inst = ccp->dev_inst;
    ea76:	6825      	ldr	r5, [r4, #0]
    CCP_STATS_INC(master_cnt);
    ea78:	3201      	adds	r2, #1
    CCP_STATS_INC(send);
    ea7a:	3301      	adds	r3, #1
    CCP_STATS_INC(master_cnt);
    ea7c:	61a2      	str	r2, [r4, #24]
    CCP_STATS_INC(send);
    ea7e:	6223      	str	r3, [r4, #32]
    uwb_phy_forcetrxoff(inst);
    ea80:	4628      	mov	r0, r5
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    ea82:	f104 08b0 	add.w	r8, r4, #176	; 0xb0
    ea86:	f7ff fd3e 	bl	e506 <uwb_phy_forcetrxoff>
    ea8a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ea8e:	4640      	mov	r0, r8
    ea90:	f7fe fe14 	bl	d6bc <os_sem_pend>
    assert(err == DPL_OK);
    ea94:	4681      	mov	r9, r0
    ea96:	2800      	cmp	r0, #0
    ea98:	d1d9      	bne.n	ea4e <ccp_master_timer_ev_cb+0x6>
    uwb_ccp_frame_t * previous_frame = ccp->frames[(uint16_t)(ccp->idx)%ccp->nframes];
    ea9a:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	; 0xec
    ea9e:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
    eaa2:	fbb3 f2f1 	udiv	r2, r3, r1
    eaa6:	fb01 3212 	mls	r2, r1, r2, r3
    eaaa:	b292      	uxth	r2, r2
    eaac:	32e0      	adds	r2, #224	; 0xe0
    uwb_ccp_frame_t * frame = ccp->frames[(ccp->idx+1)%ccp->nframes];
    eaae:	3301      	adds	r3, #1
    uwb_ccp_frame_t * previous_frame = ccp->frames[(uint16_t)(ccp->idx)%ccp->nframes];
    eab0:	f854 a022 	ldr.w	sl, [r4, r2, lsl #2]
    uwb_ccp_frame_t * frame = ccp->frames[(ccp->idx+1)%ccp->nframes];
    eab4:	fbb3 f2f1 	udiv	r2, r3, r1
    eab8:	fb01 3312 	mls	r3, r1, r2, r3
    eabc:	33e0      	adds	r3, #224	; 0xe0
    eabe:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
    frame->rpt_max = MYNEWT_VAL(UWB_CCP_MAX_CASCADE_RPTS);
    eac2:	2304      	movs	r3, #4
    frame->rpt_count = 0;
    eac4:	7730      	strb	r0, [r6, #28]
    frame->rpt_max = MYNEWT_VAL(UWB_CCP_MAX_CASCADE_RPTS);
    eac6:	7773      	strb	r3, [r6, #29]
    frame->epoch_to_rm_us = uwb_phy_SHR_duration(inst);
    eac8:	4628      	mov	r0, r5
    eaca:	f7ff fd18 	bl	e4fe <uwb_phy_SHR_duration>
                        + ((uint64_t)ccp->period << 16);
    eace:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    frame->epoch_to_rm_us = uwb_phy_SHR_duration(inst);
    ead2:	83f0      	strh	r0, [r6, #30]
    uint64_t timestamp = previous_frame->transmission_timestamp.timestamp
    ead4:	f8da 7014 	ldr.w	r7, [sl, #20]
    ead8:	f8da b018 	ldr.w	fp, [sl, #24]
                        + ((uint64_t)ccp->period << 16);
    eadc:	041a      	lsls	r2, r3, #16
    uint64_t timestamp = previous_frame->transmission_timestamp.timestamp
    eade:	18bf      	adds	r7, r7, r2
    timestamp = timestamp & 0xFFFFFFFFFFFFFE00ULL; /* Mask off the last 9 bits */
    eae0:	f427 77ff 	bic.w	r7, r7, #510	; 0x1fe
    uint64_t timestamp = previous_frame->transmission_timestamp.timestamp
    eae4:	eb4b 4b13 	adc.w	fp, fp, r3, lsr #16
    timestamp = timestamp & 0xFFFFFFFFFFFFFE00ULL; /* Mask off the last 9 bits */
    eae8:	f027 0701 	bic.w	r7, r7, #1
    uwb_set_delay_start(inst, timestamp);
    eaec:	463a      	mov	r2, r7
    eaee:	465b      	mov	r3, fp
    eaf0:	4628      	mov	r0, r5
    eaf2:	f7ff fe6c 	bl	e7ce <uwb_set_delay_start.isra.0>
    timestamp += inst->tx_antenna_delay;
    eaf6:	f8b5 24ce 	ldrh.w	r2, [r5, #1230]	; 0x4ce
    eafa:	19d7      	adds	r7, r2, r7
    eafc:	f14b 0300 	adc.w	r3, fp, #0
    frame->transmission_timestamp.timestamp = timestamp;
    eb00:	6177      	str	r7, [r6, #20]
    eb02:	61b3      	str	r3, [r6, #24]
    timestamp += inst->tx_antenna_delay;
    eb04:	9301      	str	r3, [sp, #4]
    frame->seq_num = ++ccp->seq_num;
    eb06:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
    eb0a:	3301      	adds	r3, #1
    eb0c:	b2db      	uxtb	r3, r3
    eb0e:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
    eb12:	7073      	strb	r3, [r6, #1]
    frame->euid = inst->euid;
    eb14:	f8d5 34bc 	ldr.w	r3, [r5, #1212]	; 0x4bc
    eb18:	f8d5 24b8 	ldr.w	r2, [r5, #1208]	; 0x4b8
    eb1c:	f8c6 3006 	str.w	r3, [r6, #6]
    frame->short_address = inst->my_short_address;
    eb20:	f8b5 34b6 	ldrh.w	r3, [r5, #1206]	; 0x4b6
    eb24:	8173      	strh	r3, [r6, #10]
    frame->transmission_interval = ((uint64_t)ccp->period << 16);
    eb26:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    frame->euid = inst->euid;
    eb2a:	f8c6 2002 	str.w	r2, [r6, #2]
    frame->transmission_interval = ((uint64_t)ccp->period << 16);
    eb2e:	0c1a      	lsrs	r2, r3, #16
    eb30:	041b      	lsls	r3, r3, #16
    eb32:	60f3      	str	r3, [r6, #12]
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
    eb34:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    eb36:	7432      	strb	r2, [r6, #16]
    eb38:	f8d3 b044 	ldr.w	fp, [r3, #68]	; 0x44
    eb3c:	464a      	mov	r2, r9
    eb3e:	2320      	movs	r3, #32
    eb40:	4631      	mov	r1, r6
    eb42:	4628      	mov	r0, r5
    eb44:	47d8      	blx	fp
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
    eb46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    eb48:	464a      	mov	r2, r9
    eb4a:	f8d3 b048 	ldr.w	fp, [r3, #72]	; 0x48
    eb4e:	2120      	movs	r1, #32
    eb50:	464b      	mov	r3, r9
    eb52:	4628      	mov	r0, r5
    eb54:	47d8      	blx	fp
    return (dev->uw_funcs->uf_set_wait4resp(dev, enable));
    eb56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    eb58:	4649      	mov	r1, r9
    eb5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    eb5c:	4628      	mov	r0, r5
    eb5e:	4798      	blx	r3
    return (dev->uw_funcs->uf_start_tx(dev));
    eb60:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    eb62:	4628      	mov	r0, r5
    eb64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    eb66:	4798      	blx	r3
    ccp->status.start_tx_error = uwb_start_tx(inst).start_tx_error;
    eb68:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    eb6c:	f3c0 0080 	ubfx	r0, r0, #2, #1
    eb70:	f360 1386 	bfi	r3, r0, #6, #1
    if (ccp->status.start_tx_error) {
    eb74:	0658      	lsls	r0, r3, #25
    ccp->status.start_tx_error = uwb_start_tx(inst).start_tx_error;
    eb76:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
    if (ccp->status.start_tx_error) {
    eb7a:	f140 8087 	bpl.w	ec8c <ccp_master_timer_ev_cb+0x244>
    return (dev->uw_funcs->uf_read_systime(dev));
    eb7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    eb80:	4628      	mov	r0, r5
    eb82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    eb84:	4798      	blx	r3
        CCP_STATS_INC(tx_start_error);
    eb86:	6c63      	ldr	r3, [r4, #68]	; 0x44
                        + ((uint64_t)ccp->period << 16));
    eb88:	f8d4 20e8 	ldr.w	r2, [r4, #232]	; 0xe8
        CCP_STATS_INC(tx_start_error);
    eb8c:	3301      	adds	r3, #1
    eb8e:	6463      	str	r3, [r4, #68]	; 0x44
        previous_frame->transmission_timestamp.timestamp = (frame->transmission_timestamp.timestamp
    eb90:	6973      	ldr	r3, [r6, #20]
    eb92:	69b6      	ldr	r6, [r6, #24]
                        + ((uint64_t)ccp->period << 16));
    eb94:	0415      	lsls	r5, r2, #16
    eb96:	195b      	adds	r3, r3, r5
        previous_frame->transmission_timestamp.timestamp = (frame->transmission_timestamp.timestamp
    eb98:	f8ca 3014 	str.w	r3, [sl, #20]
        ccp->idx++;
    eb9c:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
                        + ((uint64_t)ccp->period << 16));
    eba0:	eb46 4612 	adc.w	r6, r6, r2, lsr #16
        ccp->idx++;
    eba4:	3301      	adds	r3, #1
        previous_frame->transmission_timestamp.timestamp = (frame->transmission_timestamp.timestamp
    eba6:	f8ca 6018 	str.w	r6, [sl, #24]
        ccp->idx++;
    ebaa:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
        uint64_t late_us = ((systime - timestamp)&UWB_DTU_40BMASK) >> 16;
    ebae:	9b01      	ldr	r3, [sp, #4]
    ebb0:	1bc7      	subs	r7, r0, r7
    ebb2:	eb61 0103 	sbc.w	r1, r1, r3
    ebb6:	0c3f      	lsrs	r7, r7, #16
    ebb8:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
    ebbc:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
        ccp->os_epoch += dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(ccp->period - late_us));
    ebc0:	1bd0      	subs	r0, r2, r7
    ebc2:	eb61 0101 	sbc.w	r1, r1, r1
                        + ((uint64_t)ccp->period << 16));
    ebc6:	ea4f 4912 	mov.w	r9, r2, lsr #16
        ccp->os_epoch += dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(ccp->period - late_us));
    ebca:	f00f fdbf 	bl	1e74c <__aeabi_ul2d>
    ebce:	a33e      	add	r3, pc, #248	; (adr r3, ecc8 <ccp_master_timer_ev_cb+0x280>)
    ebd0:	e9d3 2300 	ldrd	r2, r3, [r3]
    ebd4:	f00f fdf0 	bl	1e7b8 <__aeabi_dmul>
    ebd8:	4606      	mov	r6, r0
    ebda:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
    ebde:	460f      	mov	r7, r1
    ebe0:	f00f fd70 	bl	1e6c4 <__aeabi_ui2d>
    ebe4:	4602      	mov	r2, r0
    ebe6:	460b      	mov	r3, r1
    ebe8:	4630      	mov	r0, r6
    ebea:	4639      	mov	r1, r7
    ebec:	f00f fc2e 	bl	1e44c <__adddf3>
    ebf0:	f010 f8ba 	bl	1ed68 <__aeabi_d2uiz>
        ccp->master_epoch.timestamp += ((uint64_t)ccp->period)<<16;
    ebf4:	e9d4 3234 	ldrd	r3, r2, [r4, #208]	; 0xd0
    ebf8:	195b      	adds	r3, r3, r5
    ebfa:	eb49 0202 	adc.w	r2, r9, r2
    ebfe:	e9c4 3234 	strd	r3, r2, [r4, #208]	; 0xd0
        ccp->local_epoch += ((uint64_t)ccp->period)<<16;
    ec02:	e9d4 3236 	ldrd	r3, r2, [r4, #216]	; 0xd8
    ec06:	195b      	adds	r3, r3, r5
    ec08:	eb49 0202 	adc.w	r2, r9, r2
    ec0c:	e9c4 3236 	strd	r3, r2, [r4, #216]	; 0xd8
        ccp->os_epoch -= dpl_cputime_usecs_to_ticks(MYNEWT_VAL(OS_LATENCY));
    ec10:	f5a0 707a 	sub.w	r0, r0, #1000	; 0x3e8
    ec14:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    return (dpl_error_t)os_sem_release(&sem->sem);
    ec18:	4640      	mov	r0, r8
    ec1a:	f7fe fd1d 	bl	d658 <os_sem_release>
        assert(err == DPL_OK);
    ec1e:	2800      	cmp	r0, #0
    ec20:	f47f af15 	bne.w	ea4e <ccp_master_timer_ev_cb+0x6>
    return ccp->status;
    ec24:	f8b4 20c8 	ldrh.w	r2, [r4, #200]	; 0xc8
        if (!ccp->status.enabled) {
    ec28:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    if (ccp_send(ccp, UWB_BLOCKING).start_tx_error) {
    ec2c:	0651      	lsls	r1, r2, #25
    ec2e:	d501      	bpl.n	ec34 <ccp_master_timer_ev_cb+0x1ec>
        if (!ccp->status.enabled) {
    ec30:	06da      	lsls	r2, r3, #27
    ec32:	d528      	bpl.n	ec86 <ccp_master_timer_ev_cb+0x23e>
    if (!ccp->status.timer_restarted && ccp->status.enabled) {
    ec34:	f003 0318 	and.w	r3, r3, #24
    ec38:	2b10      	cmp	r3, #16
    ec3a:	d124      	bne.n	ec86 <ccp_master_timer_ev_cb+0x23e>
            - dpl_cputime_usecs_to_ticks(MYNEWT_VAL(OS_LATENCY))
    ec3c:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
            + dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(ccp->period))
    ec40:	f5a0 707a 	sub.w	r0, r0, #1000	; 0x3e8
    ec44:	f00f fd3e 	bl	1e6c4 <__aeabi_ui2d>
    ec48:	4606      	mov	r6, r0
    ec4a:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
    ec4e:	460f      	mov	r7, r1
    ec50:	f00f fd38 	bl	1e6c4 <__aeabi_ui2d>
    ec54:	a31c      	add	r3, pc, #112	; (adr r3, ecc8 <ccp_master_timer_ev_cb+0x280>)
    ec56:	e9d3 2300 	ldrd	r2, r3, [r3]
    ec5a:	f00f fdad 	bl	1e7b8 <__aeabi_dmul>
    ec5e:	4602      	mov	r2, r0
    ec60:	460b      	mov	r3, r1
    ec62:	4630      	mov	r0, r6
    ec64:	4639      	mov	r1, r7
    ec66:	f00f fbf1 	bl	1e44c <__adddf3>
        rc = dpl_cputime_timer_start(&ccp->timer, ccp->os_epoch
    ec6a:	f010 f87d 	bl	1ed68 <__aeabi_d2uiz>
    ec6e:	4601      	mov	r1, r0
    ec70:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
    ec74:	f001 fe5a 	bl	1092c <dpl_cputime_timer_start>
        if (rc == 0) ccp->status.timer_restarted = 1;
    ec78:	b928      	cbnz	r0, ec86 <ccp_master_timer_ev_cb+0x23e>
    ec7a:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    ec7e:	f043 0308 	orr.w	r3, r3, #8
    ec82:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
}
    ec86:	b003      	add	sp, #12
    ec88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t margin = 0xffffffffU&(frame->transmission_timestamp.lo - uwb_read_systime_lo32(inst));
    ec8c:	4628      	mov	r0, r5
    ec8e:	6976      	ldr	r6, [r6, #20]
    ec90:	f7ff fc32 	bl	e4f8 <uwb_read_systime_lo32>
    ec94:	1a30      	subs	r0, r6, r0
        CCP_STATS_SET(os_lat_margin, uwb_dwt_usecs_to_usecs(margin>>16));
    ec96:	0c00      	lsrs	r0, r0, #16
    ec98:	f00f fd14 	bl	1e6c4 <__aeabi_ui2d>
    ec9c:	a30a      	add	r3, pc, #40	; (adr r3, ecc8 <ccp_master_timer_ev_cb+0x280>)
    ec9e:	e9d3 2300 	ldrd	r2, r3, [r3]
    eca2:	f00f fd89 	bl	1e7b8 <__aeabi_dmul>
    eca6:	2200      	movs	r2, #0
    eca8:	2300      	movs	r3, #0
    ecaa:	f00f fbcf 	bl	1e44c <__adddf3>
    ecae:	f010 f85b 	bl	1ed68 <__aeabi_d2uiz>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    ecb2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ecb6:	65a0      	str	r0, [r4, #88]	; 0x58
    ecb8:	4640      	mov	r0, r8
    ecba:	f7fe fcff 	bl	d6bc <os_sem_pend>
        assert(err == DPL_OK);
    ecbe:	2800      	cmp	r0, #0
    ecc0:	d0aa      	beq.n	ec18 <ccp_master_timer_ev_cb+0x1d0>
    ecc2:	e6c4      	b.n	ea4e <ccp_master_timer_ev_cb+0x6>
    ecc4:	f3af 8000 	nop.w
    ecc8:	90690691 	.word	0x90690691
    eccc:	3ff06906 	.word	0x3ff06906

0000ecd0 <uwb_ccp_init>:
{
    ecd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ecd4:	460f      	mov	r7, r1
    ecd6:	b091      	sub	sp, #68	; 0x44
    assert(dev);
    ecd8:	4680      	mov	r8, r0
    ecda:	b928      	cbnz	r0, ece8 <uwb_ccp_init+0x18>
    ecdc:	2300      	movs	r3, #0
    ecde:	461a      	mov	r2, r3
    ece0:	4619      	mov	r1, r3
    ece2:	4618      	mov	r0, r3
    ece4:	f7fd fd8a 	bl	c7fc <__assert_func>
    assert(nframes > 1);
    ece8:	2901      	cmp	r1, #1
    ecea:	d9f7      	bls.n	ecdc <uwb_ccp_init+0xc>
    struct uwb_ccp_instance *ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(dev, UWBEXT_CCP);
    ecec:	2101      	movs	r1, #1
    ecee:	f7f9 fe8d 	bl	8a0c <uwb_mac_find_cb_inst_ptr>
    if (ccp == NULL) {
    ecf2:	4604      	mov	r4, r0
    ecf4:	2800      	cmp	r0, #0
    ecf6:	f040 80ab 	bne.w	ee50 <uwb_ccp_init+0x180>
        ccp = (struct uwb_ccp_instance *) calloc(1, sizeof(struct uwb_ccp_instance) + nframes * sizeof(uwb_ccp_frame_t *));
    ecfa:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
    ecfe:	0089      	lsls	r1, r1, #2
    ed00:	2001      	movs	r0, #1
    ed02:	f001 f9bb 	bl	1007c <calloc>
        assert(ccp);
    ed06:	4604      	mov	r4, r0
    ed08:	2800      	cmp	r0, #0
    ed0a:	d0e7      	beq.n	ecdc <uwb_ccp_init+0xc>
        ccp->status.selfmalloc = 1;
    ed0c:	f890 30c8 	ldrb.w	r3, [r0, #200]	; 0xc8
        ccp->nframes = nframes;
    ed10:	f8a0 70ec 	strh.w	r7, [r0, #236]	; 0xec
        ccp->status.selfmalloc = 1;
    ed14:	f043 0301 	orr.w	r3, r3, #1
    ed18:	f880 30c8 	strb.w	r3, [r0, #200]	; 0xc8
        uwb_ccp_frame_t ccp_default = {
    ed1c:	2230      	movs	r2, #48	; 0x30
    ed1e:	2100      	movs	r1, #0
    ed20:	a804      	add	r0, sp, #16
    ed22:	f001 fab2 	bl	1028a <memset>
        for (i = 0; i < ccp->nframes; i++){
    ed26:	f504 7a60 	add.w	sl, r4, #896	; 0x380
    ed2a:	f04f 0900 	mov.w	r9, #0
            memcpy(ccp->frames[i], &ccp_default, sizeof(uwb_ccp_frame_t));
    ed2e:	f04f 0bc5 	mov.w	fp, #197	; 0xc5
            ccp->frames[i] = (uwb_ccp_frame_t *) calloc(1, sizeof(uwb_ccp_frame_t));
    ed32:	2130      	movs	r1, #48	; 0x30
    ed34:	2001      	movs	r0, #1
    ed36:	f001 f9a1 	bl	1007c <calloc>
    ed3a:	f84a 0b04 	str.w	r0, [sl], #4
    ed3e:	4684      	mov	ip, r0
            assert(ccp->frames[i]);
    ed40:	2800      	cmp	r0, #0
    ed42:	d0cb      	beq.n	ecdc <uwb_ccp_init+0xc>
            memcpy(ccp->frames[i], &ccp_default, sizeof(uwb_ccp_frame_t));
    ed44:	23ff      	movs	r3, #255	; 0xff
    ed46:	f88d 3011 	strb.w	r3, [sp, #17]
    ed4a:	2304      	movs	r3, #4
    ed4c:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    ed50:	f88d b010 	strb.w	fp, [sp, #16]
    ed54:	ae04      	add	r6, sp, #16
    ed56:	4605      	mov	r5, r0
    ed58:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    ed5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    ed5c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    ed5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    ed60:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
        for (i = 0; i < ccp->nframes; i++){
    ed64:	f109 0901 	add.w	r9, r9, #1
            memcpy(ccp->frames[i], &ccp_default, sizeof(uwb_ccp_frame_t));
    ed68:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
        for (i = 0; i < ccp->nframes; i++){
    ed6c:	454f      	cmp	r7, r9
            ccp->frames[i]->seq_num = 0;
    ed6e:	f04f 0300 	mov.w	r3, #0
    ed72:	f88c 3001 	strb.w	r3, [ip, #1]
        for (i = 0; i < ccp->nframes; i++){
    ed76:	dcdc      	bgt.n	ed32 <uwb_ccp_init+0x62>
        ccp->task_prio = dev->task_prio - 0x4;
    ed78:	f898 302c 	ldrb.w	r3, [r8, #44]	; 0x2c
        ccp->dev_inst = dev;
    ed7c:	f8c4 8000 	str.w	r8, [r4]
        ccp->task_prio = dev->task_prio - 0x4;
    ed80:	3b04      	subs	r3, #4
    ed82:	f884 317c 	strb.w	r3, [r4, #380]	; 0x17c
    ccp->period = MYNEWT_VAL(UWB_CCP_PERIOD);
    ed86:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    ed8a:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    ccp->config = (struct uwb_ccp_config){
    ed8e:	2300      	movs	r3, #0
    ed90:	f8c4 30ca 	str.w	r3, [r4, #202]	; 0xca
    ed94:	f44f 7360 	mov.w	r3, #896	; 0x380
    return (dpl_error_t)os_sem_init(&sem->sem, tokens);
    ed98:	2101      	movs	r1, #1
    ed9a:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
    ed9e:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    eda2:	f7fe fc51 	bl	d648 <os_sem_init>
    assert(err == DPL_OK);
    eda6:	4601      	mov	r1, r0
    eda8:	2800      	cmp	r0, #0
    edaa:	d197      	bne.n	ecdc <uwb_ccp_init+0xc>
    ccp->cbs = (struct uwb_mac_interface){
    edac:	f104 036c 	add.w	r3, r4, #108	; 0x6c
    edb0:	223c      	movs	r2, #60	; 0x3c
    edb2:	4618      	mov	r0, r3
    edb4:	f001 fa69 	bl	1028a <memset>
    edb8:	2201      	movs	r2, #1
    edba:	f8a4 206e 	strh.w	r2, [r4, #110]	; 0x6e
    edbe:	4a27      	ldr	r2, [pc, #156]	; (ee5c <uwb_ccp_init+0x18c>)
    edc0:	67a2      	str	r2, [r4, #120]	; 0x78
    edc2:	4a27      	ldr	r2, [pc, #156]	; (ee60 <uwb_ccp_init+0x190>)
    edc4:	67e2      	str	r2, [r4, #124]	; 0x7c
    edc6:	4a27      	ldr	r2, [pc, #156]	; (ee64 <uwb_ccp_init+0x194>)
    edc8:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
    edcc:	4a26      	ldr	r2, [pc, #152]	; (ee68 <uwb_ccp_init+0x198>)
    edce:	6724      	str	r4, [r4, #112]	; 0x70
    edd0:	e9c4 2222 	strd	r2, r2, [r4, #136]	; 0x88
    edd4:	4a25      	ldr	r2, [pc, #148]	; (ee6c <uwb_ccp_init+0x19c>)
    edd6:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    uwb_mac_append_interface(dev, &ccp->cbs);
    edda:	4601      	mov	r1, r0
    if (!dpl_eventq_inited(&inst->eventq))
    eddc:	f504 7586 	add.w	r5, r4, #268	; 0x10c
    uwb_mac_append_interface(dev, &ccp->cbs);
    ede0:	4640      	mov	r0, r8
    ede2:	f7f9 fdc9 	bl	8978 <uwb_mac_append_interface>
    return os_eventq_inited((struct os_eventq *) evq);
    ede6:	4628      	mov	r0, r5
    ede8:	f7fd ffe2 	bl	cdb0 <os_eventq_inited>
    if (!dpl_eventq_inited(&inst->eventq))
    edec:	b9a0      	cbnz	r0, ee18 <uwb_ccp_init+0x148>
    os_eventq_init((struct os_eventq *) evq);
    edee:	4628      	mov	r0, r5
    edf0:	f7fd ffd4 	bl	cd9c <os_eventq_init>
    return os_task_init((struct os_task *) t, name, (os_task_func_t) func,
    edf4:	2380      	movs	r3, #128	; 0x80
    edf6:	9303      	str	r3, [sp, #12]
                      inst->task_stack,
    edf8:	f504 73c0 	add.w	r3, r4, #384	; 0x180
    edfc:	9302      	str	r3, [sp, #8]
    edfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ee02:	9301      	str	r3, [sp, #4]
    ee04:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
    ee08:	9300      	str	r3, [sp, #0]
    ee0a:	4a19      	ldr	r2, [pc, #100]	; (ee70 <uwb_ccp_init+0x1a0>)
    ee0c:	4919      	ldr	r1, [pc, #100]	; (ee74 <uwb_ccp_init+0x1a4>)
    ee0e:	4623      	mov	r3, r4
    ee10:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    ee14:	f7fe fca8 	bl	d768 <os_task_init>
    ccp->status.initialized = 1;
    ee18:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    int rc = stats_init(
    ee1c:	1d25      	adds	r5, r4, #4
    ccp->status.initialized = 1;
    ee1e:	f043 0302 	orr.w	r3, r3, #2
    int rc = stats_init(
    ee22:	2214      	movs	r2, #20
    ccp->status.initialized = 1;
    ee24:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
    int rc = stats_init(
    ee28:	2104      	movs	r1, #4
    ee2a:	4b13      	ldr	r3, [pc, #76]	; (ee78 <uwb_ccp_init+0x1a8>)
    ee2c:	9200      	str	r2, [sp, #0]
    ee2e:	4628      	mov	r0, r5
    ee30:	f004 fa84 	bl	1333c <stats_init>
    assert(rc == 0);
    ee34:	2800      	cmp	r0, #0
    ee36:	f47f af51 	bne.w	ecdc <uwb_ccp_init+0xc>
    rc = stats_register("ccp", STATS_HDR(ccp->stat));
    ee3a:	480e      	ldr	r0, [pc, #56]	; (ee74 <uwb_ccp_init+0x1a4>)
    ee3c:	4629      	mov	r1, r5
    ee3e:	f004 fb01 	bl	13444 <stats_register>
    assert(rc == 0);
    ee42:	2800      	cmp	r0, #0
    ee44:	f47f af4a 	bne.w	ecdc <uwb_ccp_init+0xc>
}
    ee48:	4620      	mov	r0, r4
    ee4a:	b011      	add	sp, #68	; 0x44
    ee4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        assert(ccp->nframes == nframes);
    ee50:	f8b0 30ec 	ldrh.w	r3, [r0, #236]	; 0xec
    ee54:	42bb      	cmp	r3, r7
    ee56:	d096      	beq.n	ed86 <uwb_ccp_init+0xb6>
    ee58:	e740      	b.n	ecdc <uwb_ccp_init+0xc>
    ee5a:	bf00      	nop
    ee5c:	0000e561 	.word	0x0000e561
    ee60:	0000f081 	.word	0x0000f081
    ee64:	0000e777 	.word	0x0000e777
    ee68:	0000e50f 	.word	0x0000e50f
    ee6c:	0000e751 	.word	0x0000e751
    ee70:	0000e735 	.word	0x0000e735
    ee74:	000206b7 	.word	0x000206b7
    ee78:	000207c3 	.word	0x000207c3

0000ee7c <uwb_ccp_free>:
{
    ee7c:	b570      	push	{r4, r5, r6, lr}
    assert(inst);
    ee7e:	4604      	mov	r4, r0
    ee80:	b920      	cbnz	r0, ee8c <uwb_ccp_free+0x10>
    ee82:	4603      	mov	r3, r0
    ee84:	4602      	mov	r2, r0
    ee86:	4601      	mov	r1, r0
    ee88:	f7fd fcb8 	bl	c7fc <__assert_func>
    inst->status.enabled = 0;
    ee8c:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
    uwb_mac_remove_interface(inst->dev_inst, inst->cbs.id);
    ee90:	4625      	mov	r5, r4
    inst->status.enabled = 0;
    ee92:	f36f 1304 	bfc	r3, #4, #1
    ee96:	f880 30c9 	strb.w	r3, [r0, #201]	; 0xc9
    return (dpl_error_t)os_sem_release(&sem->sem);
    ee9a:	30b0      	adds	r0, #176	; 0xb0
    ee9c:	f7fe fbdc 	bl	d658 <os_sem_release>
    uwb_mac_remove_interface(inst->dev_inst, inst->cbs.id);
    eea0:	f855 0bf4 	ldr.w	r0, [r5], #244
    eea4:	f8b4 106e 	ldrh.w	r1, [r4, #110]	; 0x6e
    eea8:	f7f9 fd83 	bl	89b2 <uwb_mac_remove_interface>
    dpl_cputime_timer_stop(&inst->timer);
    eeac:	4628      	mov	r0, r5
    eeae:	f001 fd3f 	bl	10930 <dpl_cputime_timer_stop>
    if (inst->status.selfmalloc) {
    eeb2:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    eeb6:	f013 0201 	ands.w	r2, r3, #1
    eeba:	d011      	beq.n	eee0 <uwb_ccp_free+0x64>
    eebc:	f504 7660 	add.w	r6, r4, #896	; 0x380
        for (i = 0; i < inst->nframes; i++) {
    eec0:	2500      	movs	r5, #0
    eec2:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
    eec6:	42ab      	cmp	r3, r5
    eec8:	dc04      	bgt.n	eed4 <uwb_ccp_free+0x58>
        free(inst);
    eeca:	4620      	mov	r0, r4
}
    eecc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        free(inst);
    eed0:	f001 b994 	b.w	101fc <free>
            free(inst->frames[i]);
    eed4:	f856 0b04 	ldr.w	r0, [r6], #4
    eed8:	f001 f990 	bl	101fc <free>
        for (i = 0; i < inst->nframes; i++) {
    eedc:	3501      	adds	r5, #1
    eede:	e7f0      	b.n	eec2 <uwb_ccp_free+0x46>
        inst->status.initialized = 0;
    eee0:	f362 0341 	bfi	r3, r2, #1, #1
    eee4:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
}
    eee8:	bd70      	pop	{r4, r5, r6, pc}
	...

0000eeec <uwb_ccp_start>:
 *
 * @return void
 */
void
uwb_ccp_start(struct uwb_ccp_instance *ccp, uwb_ccp_role_t role)
{
    eeec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    struct uwb_dev * inst = ccp->dev_inst;
    eef0:	f8d0 8000 	ldr.w	r8, [r0]
{
    eef4:	4604      	mov	r4, r0
    uint16_t epoch_to_rm = uwb_phy_SHR_duration(inst);
    eef6:	4640      	mov	r0, r8
{
    eef8:	460d      	mov	r5, r1
    uint16_t epoch_to_rm = uwb_phy_SHR_duration(inst);
    eefa:	f7ff fb00 	bl	e4fe <uwb_phy_SHR_duration>

    // Initialise frame timestamp to current time
    DIAGMSG("{\"utime\": %"PRIu32",\"msg\": \"uwb_ccp_start\"}\n",
            dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
    assert(ccp);
    ccp->idx = 0x0;
    eefe:	2300      	movs	r3, #0
    ccp->status.valid = false;
    ccp->master_euid = 0x0;
    ef00:	2200      	movs	r2, #0
    ccp->idx = 0x0;
    ef02:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
    ccp->master_euid = 0x0;
    ef06:	2300      	movs	r3, #0
    ef08:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
    ccp->status.valid = false;
    ef0c:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    uwb_ccp_frame_t * frame = ccp->frames[(ccp->idx)%ccp->nframes];
    ef10:	f8d4 7380 	ldr.w	r7, [r4, #896]	; 0x380
    ccp->status.valid = false;
    ef14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    ef18:	f023 0304 	bic.w	r3, r3, #4
    ef1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    ef20:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
    ccp->config.role = role;
    ef24:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
    ef28:	f365 0344 	bfi	r3, r5, #1, #4
    ef2c:	f884 30ca 	strb.w	r3, [r4, #202]	; 0xca
    uint16_t epoch_to_rm = uwb_phy_SHR_duration(inst);
    ef30:	4606      	mov	r6, r0
    ccp->status.enabled = 1;

    /* Setup CCP to send/listen for the first packet ASAP */
    ccp->os_epoch = dpl_cputime_get32() - epoch_to_rm;
    ef32:	f001 fcff 	bl	10934 <dpl_cputime_get32>
    ef36:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    ef3a:	1b80      	subs	r0, r0, r6
    ef3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    ef3e:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    ef42:	4640      	mov	r0, r8
    ef44:	4798      	blx	r3
    uint64_t ts = (uwb_read_systime(inst) - (((uint64_t)ccp->period)<<16))&UWB_DTU_40BMASK;
    ef46:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    ef4a:	041a      	lsls	r2, r3, #16
    ef4c:	1a80      	subs	r0, r0, r2
    ef4e:	eb61 4313 	sbc.w	r3, r1, r3, lsr #16
    ts += ((uint64_t)ccp->config.tx_holdoff_dly + 2 * MYNEWT_VAL(OS_LATENCY))<<16;
    ef52:	f8b4 10cc 	ldrh.w	r1, [r4, #204]	; 0xcc
    ef56:	f501 61fa 	add.w	r1, r1, #2000	; 0x7d0
    ef5a:	040a      	lsls	r2, r1, #16
    ef5c:	1810      	adds	r0, r2, r0

    if (ccp->config.role == CCP_ROLE_MASTER){
    ef5e:	f894 20ca 	ldrb.w	r2, [r4, #202]	; 0xca
    uint64_t ts = (uwb_read_systime(inst) - (((uint64_t)ccp->period)<<16))&UWB_DTU_40BMASK;
    ef62:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    ts += ((uint64_t)ccp->config.tx_holdoff_dly + 2 * MYNEWT_VAL(OS_LATENCY))<<16;
    ef66:	eb43 4311 	adc.w	r3, r3, r1, lsr #16
    if (ccp->config.role == CCP_ROLE_MASTER){
    ef6a:	f012 021e 	ands.w	r2, r2, #30
    ef6e:	d135      	bne.n	efdc <uwb_ccp_start+0xf0>
        ccp->local_epoch = frame->transmission_timestamp.lo = ts;
    ef70:	763b      	strb	r3, [r7, #24]
    ef72:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    ef76:	6178      	str	r0, [r7, #20]
    ef78:	e9c4 0336 	strd	r0, r3, [r4, #216]	; 0xd8
        frame->transmission_timestamp.hi = 0;
    ef7c:	7efb      	ldrb	r3, [r7, #27]
    ef7e:	767a      	strb	r2, [r7, #25]
    ef80:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    ef84:	76ba      	strb	r2, [r7, #26]
    ef86:	76fb      	strb	r3, [r7, #27]
    } else {
        ccp->local_epoch = frame->reception_timestamp = ts;
    }
    ccp->local_epoch -= epoch_to_rm;
    ef88:	e9d4 0336 	ldrd	r0, r3, [r4, #216]	; 0xd8
    ef8c:	1b80      	subs	r0, r0, r6
    ef8e:	f163 0300 	sbc.w	r3, r3, #0
    ccp->local_epoch &= UWB_DTU_40BMASK;
    ef92:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    ef96:	e9c4 0336 	strd	r0, r3, [r4, #216]	; 0xd8
    ccp->status.timer_enabled = true;
    ef9a:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    dpl_cputime_timer_init(&ccp->timer, ccp_timer_irq, (void *) ccp);
    ef9e:	4914      	ldr	r1, [pc, #80]	; (eff0 <uwb_ccp_start+0x104>)
    ccp->status.timer_enabled = true;
    efa0:	f043 0304 	orr.w	r3, r3, #4
    dpl_cputime_timer_init(&ccp->timer, ccp_timer_irq, (void *) ccp);
    efa4:	f104 06f4 	add.w	r6, r4, #244	; 0xf4
    ccp->status.timer_enabled = true;
    efa8:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
    dpl_cputime_timer_init(&ccp->timer, ccp_timer_irq, (void *) ccp);
    efac:	4622      	mov	r2, r4
    efae:	4630      	mov	r0, r6
    efb0:	f001 fcaa 	bl	10908 <dpl_cputime_timer_init>
    if (dpl_event_get_arg(&ccp->timer_event) != (void *) ccp) {
    efb4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    efb8:	429c      	cmp	r4, r3
    efba:	d009      	beq.n	efd0 <uwb_ccp_start+0xe4>
            dpl_event_init(&ccp->timer_event, ccp_master_timer_ev_cb, (void *) ccp);
    efbc:	f504 708e 	add.w	r0, r4, #284	; 0x11c
    memset(ev, 0, sizeof(*ev));
    efc0:	2210      	movs	r2, #16
        if (role == CCP_ROLE_MASTER){
    efc2:	b985      	cbnz	r5, efe6 <uwb_ccp_start+0xfa>
    efc4:	4629      	mov	r1, r5
    efc6:	f001 f960 	bl	1028a <memset>
    ev->ev.ev_cb = (os_event_fn *)fn;
    efca:	4b0a      	ldr	r3, [pc, #40]	; (eff4 <uwb_ccp_start+0x108>)
    ev->ev.ev_arg = arg;
    efcc:	e9c4 3448 	strd	r3, r4, [r4, #288]	; 0x120
    dpl_cputime_timer_relative(&ccp->timer, 0);
    efd0:	4630      	mov	r0, r6
    efd2:	2100      	movs	r1, #0

    ccp_timer_init(ccp, role);
}
    efd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    dpl_cputime_timer_relative(&ccp->timer, 0);
    efd8:	f001 bcbc 	b.w	10954 <dpl_cputime_timer_relative>
        ccp->local_epoch = frame->reception_timestamp = ts;
    efdc:	6238      	str	r0, [r7, #32]
    efde:	627b      	str	r3, [r7, #36]	; 0x24
    efe0:	e9c4 0336 	strd	r0, r3, [r4, #216]	; 0xd8
    efe4:	e7d0      	b.n	ef88 <uwb_ccp_start+0x9c>
    memset(ev, 0, sizeof(*ev));
    efe6:	2100      	movs	r1, #0
    efe8:	f001 f94f 	bl	1028a <memset>
    ev->ev.ev_cb = (os_event_fn *)fn;
    efec:	4b02      	ldr	r3, [pc, #8]	; (eff8 <uwb_ccp_start+0x10c>)
    efee:	e7ed      	b.n	efcc <uwb_ccp_start+0xe0>
    eff0:	0000e7b7 	.word	0x0000e7b7
    eff4:	0000ea49 	.word	0x0000ea49
    eff8:	0000e8d9 	.word	0x0000e8d9

0000effc <uwb_ccp_stop>:
 * @param inst   Pointer to struct uwb_ccp_instance.
 * @return void
 */
void
uwb_ccp_stop(struct uwb_ccp_instance *ccp)
{
    effc:	b510      	push	{r4, lr}
    assert(ccp);
    effe:	4604      	mov	r4, r0
    f000:	b928      	cbnz	r0, f00e <uwb_ccp_stop+0x12>
    f002:	2300      	movs	r3, #0
    f004:	461a      	mov	r2, r3
    f006:	4619      	mov	r1, r3
    f008:	4618      	mov	r0, r3
    f00a:	f7fd fbf7 	bl	c7fc <__assert_func>
    DIAGMSG("{\"utime\": %"PRIu32",\"msg\": \"uwb_ccp_stop\"}\n",
            dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
    ccp->status.enabled = 0;
    f00e:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
    f012:	f36f 1304 	bfc	r3, #4, #1
    f016:	f880 30c9 	strb.w	r3, [r0, #201]	; 0xc9
    dpl_cputime_timer_stop(&ccp->timer);
    f01a:	30f4      	adds	r0, #244	; 0xf4
    f01c:	f001 fc88 	bl	10930 <dpl_cputime_timer_stop>
    if(dpl_sem_get_count(&ccp->sem) == 0){
    f020:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
    f024:	b95b      	cbnz	r3, f03e <uwb_ccp_stop+0x42>
        uwb_phy_forcetrxoff(ccp->dev_inst);
    f026:	6820      	ldr	r0, [r4, #0]
    f028:	f7ff fa6d 	bl	e506 <uwb_phy_forcetrxoff>
        if(dpl_sem_get_count(&ccp->sem) == 0){
    f02c:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
    f030:	b92b      	cbnz	r3, f03e <uwb_ccp_stop+0x42>
    return (dpl_error_t)os_sem_release(&sem->sem);
    f032:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    f036:	f7fe fb0f 	bl	d658 <os_sem_release>
            dpl_error_t err = dpl_sem_release(&ccp->sem);
            assert(err == DPL_OK);
    f03a:	2800      	cmp	r0, #0
    f03c:	d1e1      	bne.n	f002 <uwb_ccp_stop+0x6>
        }
    }
}
    f03e:	bd10      	pop	{r4, pc}

0000f040 <uwb_ccp_skew_compensation_ui64>:
EXPORT_SYMBOL(uwb_ccp_stop);

uint64_t uwb_ccp_skew_compensation_ui64(struct uwb_ccp_instance *ccp, uint64_t value)
{
    f040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f042:	461c      	mov	r4, r3
#if MYNEWT_VAL(UWB_WCS_ENABLED)
    struct uwb_wcs_instance * wcs = ccp->wcs;
    f044:	6e83      	ldr	r3, [r0, #104]	; 0x68
{
    f046:	4615      	mov	r5, r2
    if (!wcs) return value;
    f048:	b1ab      	cbz	r3, f076 <uwb_ccp_skew_compensation_ui64+0x36>
    // value *= (1.0l - fractional_skew);
    value = DPL_FLOAT64_F64_TO_U64(DPL_FLOAT64_MUL( DPL_FLOAT64_U64_TO_F64(value), DPL_FLOAT64_SUB( DPL_FLOAT64_INIT(1.0l),wcs->fractional_skew)));
    f04a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
    f04e:	490b      	ldr	r1, [pc, #44]	; (f07c <uwb_ccp_skew_compensation_ui64+0x3c>)
    f050:	2000      	movs	r0, #0
    f052:	f00f f9f9 	bl	1e448 <__aeabi_dsub>
    f056:	4606      	mov	r6, r0
    f058:	460f      	mov	r7, r1
    f05a:	4628      	mov	r0, r5
    f05c:	4621      	mov	r1, r4
    f05e:	f00f fb75 	bl	1e74c <__aeabi_ul2d>
    f062:	4602      	mov	r2, r0
    f064:	460b      	mov	r3, r1
    f066:	4630      	mov	r0, r6
    f068:	4639      	mov	r1, r7
    f06a:	f00f fba5 	bl	1e7b8 <__aeabi_dmul>
    f06e:	f00f ff8b 	bl	1ef88 <__aeabi_d2ulz>
    f072:	4605      	mov	r5, r0
    f074:	460c      	mov	r4, r1
#endif
    return value;
}
    f076:	4628      	mov	r0, r5
    f078:	4621      	mov	r1, r4
    f07a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f07c:	3ff00000 	.word	0x3ff00000

0000f080 <rx_complete_cb>:
{
    f080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    struct uwb_ccp_instance * ccp = (struct uwb_ccp_instance *)cbs->inst_ptr;
    f084:	684c      	ldr	r4, [r1, #4]
    if (ccp->config.role == CCP_ROLE_MASTER) {
    f086:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
    f08a:	f013 0f1e 	tst.w	r3, #30
{
    f08e:	b08f      	sub	sp, #60	; 0x3c
    f090:	4606      	mov	r6, r0
    if (ccp->config.role == CCP_ROLE_MASTER) {
    f092:	d103      	bne.n	f09c <rx_complete_cb+0x1c>
            return true;
    f094:	2001      	movs	r0, #1
}
    f096:	b00f      	add	sp, #60	; 0x3c
    f098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (inst->fctrl_array[0] != FCNTL_IEEE_BLINK_CCP_64){
    f09c:	f890 24e0 	ldrb.w	r2, [r0, #1248]	; 0x4e0
    f0a0:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
    f0a4:	2ac5      	cmp	r2, #197	; 0xc5
    f0a6:	d009      	beq.n	f0bc <rx_complete_cb+0x3c>
        if(dpl_sem_get_count(&ccp->sem) == 0){
    f0a8:	b963      	cbnz	r3, f0c4 <rx_complete_cb+0x44>
    return (dev->uw_funcs->uf_adj_rx_timeout(dev, to));
    f0aa:	6a43      	ldr	r3, [r0, #36]	; 0x24
    f0ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f0b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f0b2:	4798      	blx	r3
            CCP_STATS_INC(rx_other_frame);
    f0b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    f0b6:	3301      	adds	r3, #1
    f0b8:	63e3      	str	r3, [r4, #60]	; 0x3c
    f0ba:	e7eb      	b.n	f094 <rx_complete_cb+0x14>
    if(dpl_sem_get_count(&ccp->sem) != 0){
    f0bc:	b123      	cbz	r3, f0c8 <rx_complete_cb+0x48>
        CCP_STATS_INC(rx_unsolicited);
    f0be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    f0c0:	3301      	adds	r3, #1
    f0c2:	63a3      	str	r3, [r4, #56]	; 0x38
        return false;
    f0c4:	2000      	movs	r0, #0
    f0c6:	e7e6      	b.n	f096 <rx_complete_cb+0x16>
    if (inst->frame_len >= sizeof(uwb_ccp_blink_frame_t) && inst->frame_len <= sizeof(frame->array))
    f0c8:	f8b0 34e2 	ldrh.w	r3, [r0, #1250]	; 0x4e2
    f0cc:	3b20      	subs	r3, #32
    f0ce:	b29b      	uxth	r3, r3
    f0d0:	2b10      	cmp	r3, #16
    f0d2:	d8df      	bhi.n	f094 <rx_complete_cb+0x14>
    uwb_ccp_frame_t * frame = ccp->frames[(ccp->idx+1)%ccp->nframes];  // speculative frame advance
    f0d4:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
    f0d8:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
    f0dc:	3301      	adds	r3, #1
    f0de:	fbb3 f1f2 	udiv	r1, r3, r2
    f0e2:	fb02 3311 	mls	r3, r2, r1, r3
    f0e6:	33e0      	adds	r3, #224	; 0xe0
    f0e8:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
        memcpy(frame->array, inst->rxbuf, sizeof(uwb_ccp_blink_frame_t));
    f0ec:	f8d0 34fc 	ldr.w	r3, [r0, #1276]	; 0x4fc
    f0f0:	462a      	mov	r2, r5
    f0f2:	f103 0120 	add.w	r1, r3, #32
    f0f6:	f853 0b04 	ldr.w	r0, [r3], #4
    f0fa:	f842 0b04 	str.w	r0, [r2], #4
    f0fe:	428b      	cmp	r3, r1
    f100:	d1f9      	bne.n	f0f6 <rx_complete_cb+0x76>
    if (inst->status.lde_error)
    f102:	f896 a509 	ldrb.w	sl, [r6, #1289]	; 0x509
    f106:	f01a 0a04 	ands.w	sl, sl, #4
    f10a:	d1c3      	bne.n	f094 <rx_complete_cb+0x14>
    return (dev->uw_funcs->uf_stop_rx(dev));
    f10c:	6a73      	ldr	r3, [r6, #36]	; 0x24
    f10e:	4630      	mov	r0, r6
    f110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    f112:	4798      	blx	r3
    ccp->idx++; // confirmed frame advance
    f114:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
    f118:	3301      	adds	r3, #1
    f11a:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
    ccp->seq_num = frame->seq_num;
    f11e:	786b      	ldrb	r3, [r5, #1]
    f120:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
    ccp->missed_frames = 0;
    f124:	f884 a0f1 	strb.w	sl, [r4, #241]	; 0xf1
    uint32_t delta_0 = 0xffffffffU&(uwb_read_systime_lo32(inst) - (uint32_t)(inst->rxtimestamp&0xFFFFFFFFUL));
    f128:	4630      	mov	r0, r6
    f12a:	f7ff f9e5 	bl	e4f8 <uwb_read_systime_lo32>
    f12e:	f8d6 34e8 	ldr.w	r3, [r6, #1256]	; 0x4e8
    f132:	eba0 0803 	sub.w	r8, r0, r3
    ccp->os_epoch = dpl_cputime_get32();
    f136:	f001 fbfd 	bl	10934 <dpl_cputime_get32>
    f13a:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    uint32_t delta_1 = 0xffffffffU&(uwb_read_systime_lo32(inst) - (uint32_t)(inst->rxtimestamp&0xFFFFFFFFUL));
    f13e:	4630      	mov	r0, r6
    f140:	f7ff f9da 	bl	e4f8 <uwb_read_systime_lo32>
    f144:	f8d6 74e8 	ldr.w	r7, [r6, #1256]	; 0x4e8
    f148:	f8d6 34ec 	ldr.w	r3, [r6, #1260]	; 0x4ec
    f14c:	9301      	str	r3, [sp, #4]
    uint32_t delta = (delta_0>>1) + (delta_1>>1);
    f14e:	ea4f 0858 	mov.w	r8, r8, lsr #1
    uint32_t delta_1 = 0xffffffffU&(uwb_read_systime_lo32(inst) - (uint32_t)(inst->rxtimestamp&0xFFFFFFFFUL));
    f152:	1bc0      	subs	r0, r0, r7
    uint32_t delta = (delta_0>>1) + (delta_1>>1);
    f154:	eb08 0050 	add.w	r0, r8, r0, lsr #1
    ccp->os_epoch -= dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(delta>>16));
    f158:	0c00      	lsrs	r0, r0, #16
    f15a:	f00f fab3 	bl	1e6c4 <__aeabi_ui2d>
    f15e:	a3d8      	add	r3, pc, #864	; (adr r3, f4c0 <rx_complete_cb+0x440>)
    f160:	e9d3 2300 	ldrd	r2, r3, [r3]
    f164:	f00f fb28 	bl	1e7b8 <__aeabi_dmul>
    f168:	4680      	mov	r8, r0
    f16a:	4689      	mov	r9, r1
    f16c:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
    f170:	f00f faa8 	bl	1e6c4 <__aeabi_ui2d>
    f174:	4642      	mov	r2, r8
    f176:	464b      	mov	r3, r9
    f178:	f00f f966 	bl	1e448 <__aeabi_dsub>
    f17c:	f00f fdf4 	bl	1ed68 <__aeabi_d2uiz>
    CCP_STATS_SET(irq_latency, uwb_dwt_usecs_to_usecs(delta>>16));
    f180:	2300      	movs	r3, #0
    ccp->os_epoch -= dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(delta>>16));
    f182:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    CCP_STATS_SET(irq_latency, uwb_dwt_usecs_to_usecs(delta>>16));
    f186:	2200      	movs	r2, #0
    ccp->os_epoch -= dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(delta>>16));
    f188:	4683      	mov	fp, r0
    CCP_STATS_SET(irq_latency, uwb_dwt_usecs_to_usecs(delta>>16));
    f18a:	4649      	mov	r1, r9
    f18c:	4640      	mov	r0, r8
    f18e:	f00f f95d 	bl	1e44c <__adddf3>
    f192:	f00f fde9 	bl	1ed68 <__aeabi_d2uiz>
    CCP_STATS_INC(rx_complete);
    f196:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    CCP_STATS_SET(irq_latency, uwb_dwt_usecs_to_usecs(delta>>16));
    f198:	6520      	str	r0, [r4, #80]	; 0x50
    CCP_STATS_INC(rx_complete);
    f19a:	3301      	adds	r3, #1
    f19c:	62e3      	str	r3, [r4, #44]	; 0x2c
    ccp->status.rx_timeout_error = 0;
    f19e:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    f1a2:	f36a 0341 	bfi	r3, sl, #1, #1
    f1a6:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
    if (frame->transmission_timestamp.timestamp < ccp->master_epoch.timestamp ||
    f1aa:	e9d4 0334 	ldrd	r0, r3, [r4, #208]	; 0xd0
    f1ae:	f8d5 e014 	ldr.w	lr, [r5, #20]
    f1b2:	f8d5 8018 	ldr.w	r8, [r5, #24]
    f1b6:	4586      	cmp	lr, r0
    f1b8:	eb78 0303 	sbcs.w	r3, r8, r3
    f1bc:	f8d5 0002 	ldr.w	r0, [r5, #2]
    f1c0:	f8d5 3006 	ldr.w	r3, [r5, #6]
    f1c4:	d306      	bcc.n	f1d4 <rx_complete_cb+0x154>
    f1c6:	e9d4 212a 	ldrd	r2, r1, [r4, #168]	; 0xa8
    f1ca:	428b      	cmp	r3, r1
    f1cc:	bf08      	it	eq
    f1ce:	4290      	cmpeq	r0, r2
    f1d0:	f000 814e 	beq.w	f470 <rx_complete_cb+0x3f0>
        ccp->master_euid = frame->euid;
    f1d4:	e9c4 032a 	strd	r0, r3, [r4, #168]	; 0xa8
        ccp->status.valid = (MYNEWT_VAL(UWB_CCP_VALID_THRESHOLD)==0);
    f1d8:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    f1dc:	f023 033c 	bic.w	r3, r3, #60	; 0x3c
        ccp->status.valid |= (ccp->status.valid_count == MYNEWT_VAL(UWB_CCP_VALID_THRESHOLD)-1);
    f1e0:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
    ccp->local_epoch = frame->reception_timestamp = inst->rxtimestamp;
    f1e4:	9b01      	ldr	r3, [sp, #4]
    f1e6:	626b      	str	r3, [r5, #36]	; 0x24
    ccp->period = (frame->transmission_interval >> 16);
    f1e8:	68eb      	ldr	r3, [r5, #12]
    f1ea:	7c28      	ldrb	r0, [r5, #16]
    ccp->local_epoch = frame->reception_timestamp = inst->rxtimestamp;
    f1ec:	622f      	str	r7, [r5, #32]
    ccp->period = (frame->transmission_interval >> 16);
    f1ee:	0c1b      	lsrs	r3, r3, #16
    f1f0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    f1f4:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    adjust_for_epoch_to_rm(ccp, frame->epoch_to_rm_us);
    f1f8:	f8b5 a01e 	ldrh.w	sl, [r5, #30]
    ccp->master_epoch.timestamp -= ((uint64_t)epoch_to_rm_us << 16);
    f1fc:	ea4f 400a 	mov.w	r0, sl, lsl #16
    f200:	ebbe 0200 	subs.w	r2, lr, r0
    f204:	f04f 0300 	mov.w	r3, #0
    f208:	eb68 0103 	sbc.w	r1, r8, r3
    f20c:	e9c4 2134 	strd	r2, r1, [r4, #208]	; 0xd0
    ccp->local_epoch -= ((uint64_t)epoch_to_rm_us << 16);
    f210:	9a01      	ldr	r2, [sp, #4]
    f212:	1a3f      	subs	r7, r7, r0
    f214:	eb62 0303 	sbc.w	r3, r2, r3
    f218:	e9c4 7336 	strd	r7, r3, [r4, #216]	; 0xd8
    ccp->os_epoch -= dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(epoch_to_rm_us));
    f21c:	4658      	mov	r0, fp
    f21e:	f00f fa51 	bl	1e6c4 <__aeabi_ui2d>
    f222:	4680      	mov	r8, r0
    f224:	4650      	mov	r0, sl
    f226:	4689      	mov	r9, r1
    f228:	f00f fa5c 	bl	1e6e4 <__aeabi_i2d>
    f22c:	a3a4      	add	r3, pc, #656	; (adr r3, f4c0 <rx_complete_cb+0x440>)
    f22e:	e9d3 2300 	ldrd	r2, r3, [r3]
    f232:	f00f fac1 	bl	1e7b8 <__aeabi_dmul>
    f236:	460b      	mov	r3, r1
    f238:	4602      	mov	r2, r0
    f23a:	4649      	mov	r1, r9
    f23c:	4640      	mov	r0, r8
    f23e:	f00f f903 	bl	1e448 <__aeabi_dsub>
    f242:	f00f fd91 	bl	1ed68 <__aeabi_d2uiz>
    frame->carrier_integrator = inst->carrier_integrator;
    f246:	f8d6 34f0 	ldr.w	r3, [r6, #1264]	; 0x4f0
    ccp->os_epoch -= dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(epoch_to_rm_us));
    f24a:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    frame->carrier_integrator = inst->carrier_integrator;
    f24e:	62ab      	str	r3, [r5, #40]	; 0x28
    if (inst->config.rxttcko_enable) {
    f250:	f996 352c 	ldrsb.w	r3, [r6, #1324]	; 0x52c
    f254:	2b00      	cmp	r3, #0
        frame->rxttcko = inst->rxttcko;
    f256:	bfb4      	ite	lt
    f258:	f8d6 34f4 	ldrlt.w	r3, [r6, #1268]	; 0x4f4
        frame->rxttcko = 0;
    f25c:	2300      	movge	r3, #0
    f25e:	62eb      	str	r3, [r5, #44]	; 0x2c
    if (ccp->tof_comp_cb) {
    f260:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    f264:	b17b      	cbz	r3, f286 <rx_complete_cb+0x206>
        uint32_t tof_comp = ccp->tof_comp_cb(frame->short_address);
    f266:	8968      	ldrh	r0, [r5, #10]
    f268:	4798      	blx	r3
        tof_comp = uwb_ccp_skew_compensation_ui64(ccp, (uint64_t)tof_comp);
    f26a:	2300      	movs	r3, #0
        uint32_t tof_comp = ccp->tof_comp_cb(frame->short_address);
    f26c:	4602      	mov	r2, r0
        tof_comp = uwb_ccp_skew_compensation_ui64(ccp, (uint64_t)tof_comp);
    f26e:	4620      	mov	r0, r4
    f270:	f7ff fee6 	bl	f040 <uwb_ccp_skew_compensation_ui64>
        ccp->local_epoch -= tof_comp;
    f274:	e9d4 3236 	ldrd	r3, r2, [r4, #216]	; 0xd8
    f278:	1a18      	subs	r0, r3, r0
    f27a:	f162 0200 	sbc.w	r2, r2, #0
    f27e:	e9c4 0236 	strd	r0, r2, [r4, #216]	; 0xd8
        frame->reception_timestamp = ccp->local_epoch;
    f282:	6228      	str	r0, [r5, #32]
    f284:	626a      	str	r2, [r5, #36]	; 0x24
    if (frame->rpt_count != 0) {
    f286:	f895 a01c 	ldrb.w	sl, [r5, #28]
    f28a:	f1ba 0f00 	cmp.w	sl, #0
    f28e:	d059      	beq.n	f344 <rx_complete_cb+0x2c4>
        CCP_STATS_INC(rx_relayed);
    f290:	6b23      	ldr	r3, [r4, #48]	; 0x30
        uint64_t master_interval = ((frame->transmission_interval/0x100000000UL+1)*0x100000000UL);
    f292:	7c29      	ldrb	r1, [r5, #16]
    f294:	68e8      	ldr	r0, [r5, #12]
    f296:	f111 0c01 	adds.w	ip, r1, #1
        CCP_STATS_INC(rx_relayed);
    f29a:	3301      	adds	r3, #1
    f29c:	6323      	str	r3, [r4, #48]	; 0x30
        ccp->period = master_interval>>16;
    f29e:	ea4f 430c 	mov.w	r3, ip, lsl #16
        uint64_t master_interval = ((frame->transmission_interval/0x100000000UL+1)*0x100000000UL);
    f2a2:	2700      	movs	r7, #0
        ccp->period = master_interval>>16;
    f2a4:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
        ccp->master_epoch.timestamp = (ccp->master_epoch.timestamp - repeat_dly);
    f2a8:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
        uint64_t repeat_dly = master_interval - frame->transmission_interval;
    f2ac:	1a3a      	subs	r2, r7, r0
    f2ae:	eb6c 0e01 	sbc.w	lr, ip, r1
        ccp->master_epoch.timestamp = (ccp->master_epoch.timestamp - repeat_dly);
    f2b2:	18c0      	adds	r0, r0, r3
    f2b4:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
    f2b8:	eb41 0103 	adc.w	r1, r1, r3
    f2bc:	eba1 010c 	sub.w	r1, r1, ip
        repeat_dly = uwb_ccp_skew_compensation_ui64(ccp, repeat_dly);
    f2c0:	4673      	mov	r3, lr
        ccp->master_epoch.timestamp = (ccp->master_epoch.timestamp - repeat_dly);
    f2c2:	e9c4 0134 	strd	r0, r1, [r4, #208]	; 0xd0
        repeat_dly = uwb_ccp_skew_compensation_ui64(ccp, repeat_dly);
    f2c6:	4620      	mov	r0, r4
    f2c8:	f7ff feba 	bl	f040 <uwb_ccp_skew_compensation_ui64>
    f2cc:	460a      	mov	r2, r1
        ccp->local_epoch = (ccp->local_epoch - repeat_dly) & 0x0FFFFFFFFFFUL;
    f2ce:	e9d4 1336 	ldrd	r1, r3, [r4, #216]	; 0xd8
        repeat_dly = uwb_ccp_skew_compensation_ui64(ccp, repeat_dly);
    f2d2:	4683      	mov	fp, r0
        ccp->local_epoch = (ccp->local_epoch - repeat_dly) & 0x0FFFFFFFFFFUL;
    f2d4:	ebb1 010b 	subs.w	r1, r1, fp
    f2d8:	eb63 0302 	sbc.w	r3, r3, r2
    f2dc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
        ccp->os_epoch -= dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs((repeat_dly >> 16)));
    f2e0:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
        ccp->local_epoch = (ccp->local_epoch - repeat_dly) & 0x0FFFFFFFFFFUL;
    f2e4:	9201      	str	r2, [sp, #4]
    f2e6:	e9c4 1336 	strd	r1, r3, [r4, #216]	; 0xd8
        frame->reception_timestamp = ccp->local_epoch;
    f2ea:	626b      	str	r3, [r5, #36]	; 0x24
    f2ec:	6229      	str	r1, [r5, #32]
        ccp->os_epoch -= dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs((repeat_dly >> 16)));
    f2ee:	f00f f9e9 	bl	1e6c4 <__aeabi_ui2d>
    f2f2:	9a01      	ldr	r2, [sp, #4]
    f2f4:	4680      	mov	r8, r0
    f2f6:	ea4f 401b 	mov.w	r0, fp, lsr #16
    f2fa:	4689      	mov	r9, r1
    f2fc:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
    f300:	0c11      	lsrs	r1, r2, #16
    f302:	f00f fa23 	bl	1e74c <__aeabi_ul2d>
    f306:	a36e      	add	r3, pc, #440	; (adr r3, f4c0 <rx_complete_cb+0x440>)
    f308:	e9d3 2300 	ldrd	r2, r3, [r3]
    f30c:	f00f fa54 	bl	1e7b8 <__aeabi_dmul>
    f310:	4602      	mov	r2, r0
    f312:	460b      	mov	r3, r1
    f314:	4640      	mov	r0, r8
    f316:	4649      	mov	r1, r9
    f318:	f00f f896 	bl	1e448 <__aeabi_dsub>
    f31c:	f00f fd24 	bl	1ed68 <__aeabi_d2uiz>
    f320:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
        frame->carrier_integrator = 0;
    f324:	f885 7028 	strb.w	r7, [r5, #40]	; 0x28
    f328:	f885 7029 	strb.w	r7, [r5, #41]	; 0x29
    f32c:	f885 702a 	strb.w	r7, [r5, #42]	; 0x2a
    f330:	f885 702b 	strb.w	r7, [r5, #43]	; 0x2b
        frame->rxttcko = 0;
    f334:	f885 702c 	strb.w	r7, [r5, #44]	; 0x2c
    f338:	f885 702d 	strb.w	r7, [r5, #45]	; 0x2d
    f33c:	f885 702e 	strb.w	r7, [r5, #46]	; 0x2e
    f340:	f885 702f 	strb.w	r7, [r5, #47]	; 0x2f
    if (ccp->config.role == CCP_ROLE_RELAY && ccp->status.valid && frame->rpt_count < frame->rpt_max) {
    f344:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
    f348:	4b5b      	ldr	r3, [pc, #364]	; (f4b8 <rx_complete_cb+0x438>)
    f34a:	4013      	ands	r3, r2
    f34c:	f1b3 1f04 	cmp.w	r3, #262148	; 0x40004
    f350:	d17b      	bne.n	f44a <rx_complete_cb+0x3ca>
    f352:	7f6b      	ldrb	r3, [r5, #29]
    f354:	4553      	cmp	r3, sl
    f356:	d978      	bls.n	f44a <rx_complete_cb+0x3ca>
        memcpy(tx_frame.array, frame->array, sizeof(uwb_ccp_frame_t));
    f358:	aa02      	add	r2, sp, #8
    f35a:	462b      	mov	r3, r5
    f35c:	f105 0c30 	add.w	ip, r5, #48	; 0x30
    f360:	4690      	mov	r8, r2
    f362:	6818      	ldr	r0, [r3, #0]
    f364:	6859      	ldr	r1, [r3, #4]
    f366:	4617      	mov	r7, r2
    f368:	c703      	stmia	r7!, {r0, r1}
    f36a:	3308      	adds	r3, #8
    f36c:	4563      	cmp	r3, ip
    f36e:	463a      	mov	r2, r7
    f370:	d1f7      	bne.n	f362 <rx_complete_cb+0x2e2>
        tx_frame.short_address = inst->my_short_address;
    f372:	f8b6 34b6 	ldrh.w	r3, [r6, #1206]	; 0x4b6
    f376:	f8ad 3012 	strh.w	r3, [sp, #18]
        tx_frame.rpt_count++;
    f37a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
        tx_timestamp += (inst->slot_id%4)*(((uint64_t)ccp->blink_frame_duration)<<16);
    f37e:	f8b6 74c2 	ldrh.w	r7, [r6, #1218]	; 0x4c2
    f382:	f8b4 117e 	ldrh.w	r1, [r4, #382]	; 0x17e
        tx_timestamp += tx_frame.rpt_count*((uint64_t)ccp->config.tx_holdoff_dly<<16);
    f386:	f8b4 c0cc 	ldrh.w	ip, [r4, #204]	; 0xcc
        tx_frame.rpt_count++;
    f38a:	3301      	adds	r3, #1
    f38c:	b2db      	uxtb	r3, r3
    f38e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        tx_timestamp += (inst->slot_id%4)*(((uint64_t)ccp->blink_frame_duration)<<16);
    f392:	f007 0703 	and.w	r7, r7, #3
    f396:	0409      	lsls	r1, r1, #16
        tx_timestamp += tx_frame.rpt_count*((uint64_t)ccp->config.tx_holdoff_dly<<16);
    f398:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
    f39c:	fbac c303 	umull	ip, r3, ip, r3
        uint64_t tx_timestamp = frame->reception_timestamp;
    f3a0:	6a2a      	ldr	r2, [r5, #32]
    f3a2:	6a68      	ldr	r0, [r5, #36]	; 0x24
        tx_timestamp += (inst->slot_id%4)*(((uint64_t)ccp->blink_frame_duration)<<16);
    f3a4:	fba7 7101 	umull	r7, r1, r7, r1
    f3a8:	eb17 070c 	adds.w	r7, r7, ip
    f3ac:	eb41 0303 	adc.w	r3, r1, r3
    f3b0:	18bf      	adds	r7, r7, r2
    f3b2:	eb40 0303 	adc.w	r3, r0, r3
        tx_timestamp &= 0x0FFFFFFFE00UL;
    f3b6:	f427 77ff 	bic.w	r7, r7, #510	; 0x1fe
    f3ba:	f027 0701 	bic.w	r7, r7, #1
    f3be:	f003 09ff 	and.w	r9, r3, #255	; 0xff
        uwb_set_delay_start(inst, tx_timestamp);
    f3c2:	463a      	mov	r2, r7
    f3c4:	464b      	mov	r3, r9
    f3c6:	4630      	mov	r0, r6
    f3c8:	f7ff fa01 	bl	e7ce <uwb_set_delay_start.isra.0>
        uint64_t tx_delay = (tx_timestamp - frame->reception_timestamp);
    f3cc:	6a29      	ldr	r1, [r5, #32]
        tx_timestamp += inst->tx_antenna_delay;
    f3ce:	f8b6 24ce 	ldrh.w	r2, [r6, #1230]	; 0x4ce
        uint64_t tx_delay = (tx_timestamp - frame->reception_timestamp);
    f3d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    f3d4:	1a52      	subs	r2, r2, r1
    f3d6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    f3da:	19d2      	adds	r2, r2, r7
        tx_delay = uwb_ccp_skew_compensation_ui64(ccp, tx_delay);
    f3dc:	eb49 0303 	adc.w	r3, r9, r3
    f3e0:	4620      	mov	r0, r4
    f3e2:	f7ff fe2d 	bl	f040 <uwb_ccp_skew_compensation_ui64>
        tx_frame.transmission_timestamp.timestamp += tx_delay;
    f3e6:	9b07      	ldr	r3, [sp, #28]
    f3e8:	9a08      	ldr	r2, [sp, #32]
    f3ea:	181b      	adds	r3, r3, r0
    f3ec:	eb41 0202 	adc.w	r2, r1, r2
    f3f0:	e9cd 3207 	strd	r3, r2, [sp, #28]
        tx_frame.transmission_interval = frame->transmission_interval - tx_delay;
    f3f4:	68eb      	ldr	r3, [r5, #12]
    f3f6:	7c2a      	ldrb	r2, [r5, #16]
    f3f8:	1a18      	subs	r0, r3, r0
    f3fa:	eb62 0101 	sbc.w	r1, r2, r1
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
    f3fe:	6a73      	ldr	r3, [r6, #36]	; 0x24
    f400:	9005      	str	r0, [sp, #20]
    f402:	f88d 1018 	strb.w	r1, [sp, #24]
    f406:	6c5d      	ldr	r5, [r3, #68]	; 0x44
    f408:	2200      	movs	r2, #0
    f40a:	2320      	movs	r3, #32
    f40c:	4641      	mov	r1, r8
    f40e:	4630      	mov	r0, r6
    f410:	47a8      	blx	r5
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
    f412:	6a73      	ldr	r3, [r6, #36]	; 0x24
    f414:	6c9d      	ldr	r5, [r3, #72]	; 0x48
    f416:	2300      	movs	r3, #0
    f418:	461a      	mov	r2, r3
    f41a:	2120      	movs	r1, #32
    f41c:	4630      	mov	r0, r6
    f41e:	47a8      	blx	r5
    return (dev->uw_funcs->uf_start_tx(dev));
    f420:	6a73      	ldr	r3, [r6, #36]	; 0x24
    f422:	4630      	mov	r0, r6
    f424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    f426:	4798      	blx	r3
        ccp->status.start_tx_error = uwb_start_tx(inst).start_tx_error;
    f428:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    f42c:	f3c0 0080 	ubfx	r0, r0, #2, #1
    f430:	f360 1386 	bfi	r3, r0, #6, #1
    f434:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
        if (ccp->status.start_tx_error){
    f438:	065b      	lsls	r3, r3, #25
            CCP_STATS_INC(tx_relay_error);
    f43a:	bf4b      	itete	mi
    f43c:	6ca3      	ldrmi	r3, [r4, #72]	; 0x48
            CCP_STATS_INC(tx_relay_ok);
    f43e:	6ce3      	ldrpl	r3, [r4, #76]	; 0x4c
            CCP_STATS_INC(tx_relay_error);
    f440:	3301      	addmi	r3, #1
            CCP_STATS_INC(tx_relay_ok);
    f442:	3301      	addpl	r3, #1
            CCP_STATS_INC(tx_relay_error);
    f444:	bf4c      	ite	mi
    f446:	64a3      	strmi	r3, [r4, #72]	; 0x48
            CCP_STATS_INC(tx_relay_ok);
    f448:	64e3      	strpl	r3, [r4, #76]	; 0x4c
    if(!(SLIST_EMPTY(&inst->interface_cbs))) {
    f44a:	f8d6 5530 	ldr.w	r5, [r6, #1328]	; 0x530
    f44e:	bb4d      	cbnz	r5, f4a4 <rx_complete_cb+0x424>
    if (ccp->config.postprocess && ccp->status.valid) {
    f450:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
    f454:	4b19      	ldr	r3, [pc, #100]	; (f4bc <rx_complete_cb+0x43c>)
    f456:	4393      	bics	r3, r2
    f458:	d105      	bne.n	f466 <rx_complete_cb+0x3e6>
    return (struct dpl_eventq *) os_eventq_dflt_get();
    f45a:	f7fd fd55 	bl	cf08 <os_eventq_dflt_get>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    f45e:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
    f462:	f7fd fcaa 	bl	cdba <os_eventq_put>
    return (dpl_error_t)os_sem_release(&sem->sem);
    f466:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    f46a:	f7fe f8f5 	bl	d658 <os_sem_release>
    f46e:	e629      	b.n	f0c4 <rx_complete_cb+0x44>
        if(ccp->status.valid_count < MYNEWT_VAL(UWB_CCP_VALID_THRESHOLD)-1){
    f470:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    f474:	f013 0f38 	tst.w	r3, #56	; 0x38
            ccp->status.valid_count++;
    f478:	bf01      	itttt	eq
    f47a:	f3c3 00c2 	ubfxeq	r0, r3, #3, #3
    f47e:	3001      	addeq	r0, #1
    f480:	f360 03c5 	bfieq	r3, r0, #3, #3
    f484:	f884 30c8 	strbeq.w	r3, [r4, #200]	; 0xc8
        ccp->status.valid |= (ccp->status.valid_count == MYNEWT_VAL(UWB_CCP_VALID_THRESHOLD)-1);
    f488:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    f48c:	f003 0c38 	and.w	ip, r3, #56	; 0x38
    f490:	f3c3 0080 	ubfx	r0, r3, #2, #1
    f494:	f1bc 0f08 	cmp.w	ip, #8
    f498:	bf08      	it	eq
    f49a:	f040 0001 	orreq.w	r0, r0, #1
    f49e:	f360 0382 	bfi	r3, r0, #2, #1
    f4a2:	e69d      	b.n	f1e0 <rx_complete_cb+0x160>
            if (lcbs != NULL && lcbs->superframe_cb) {
    f4a4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    f4a6:	b113      	cbz	r3, f4ae <rx_complete_cb+0x42e>
                if(lcbs->superframe_cb((struct uwb_dev*)inst, lcbs)) continue;
    f4a8:	4629      	mov	r1, r5
    f4aa:	4630      	mov	r0, r6
    f4ac:	4798      	blx	r3
        SLIST_FOREACH(lcbs, &inst->interface_cbs, next) {
    f4ae:	6bad      	ldr	r5, [r5, #56]	; 0x38
    f4b0:	e7cd      	b.n	f44e <rx_complete_cb+0x3ce>
    f4b2:	bf00      	nop
    f4b4:	f3af 8000 	nop.w
    f4b8:	001e0004 	.word	0x001e0004
    f4bc:	00010004 	.word	0x00010004
    f4c0:	90690691 	.word	0x90690691
    f4c4:	3ff06906 	.word	0x3ff06906

0000f4c8 <uwb_ccp_pkg_init>:
 *
 * @return void
 */
void
uwb_ccp_pkg_init(void)
{
    f4c8:	b510      	push	{r4, lr}
    int i;
    struct uwb_dev *udev;
    struct uwb_ccp_instance * ccp __attribute__((unused));
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    printf("{\"utime\": %"PRIu32",\"msg\": \"uwb_ccp_pkg_init\"}\n",
    f4ca:	f001 fa33 	bl	10934 <dpl_cputime_get32>
    f4ce:	4601      	mov	r1, r0
    f4d0:	4807      	ldr	r0, [pc, #28]	; (f4f0 <uwb_ccp_pkg_init+0x28>)
    f4d2:	f001 f9b3 	bl	1083c <printf>
           dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
#endif

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
    f4d6:	2400      	movs	r4, #0
        udev = uwb_dev_idx_lookup(i);
    f4d8:	4620      	mov	r0, r4
    f4da:	f7f9 fa23 	bl	8924 <uwb_dev_idx_lookup>
        if (!udev) {
    f4de:	b110      	cbz	r0, f4e6 <uwb_ccp_pkg_init+0x1e>
            continue;
        }
        ccp = uwb_ccp_init(udev, 2);
    f4e0:	2102      	movs	r1, #2
    f4e2:	f7ff fbf5 	bl	ecd0 <uwb_ccp_init>
    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
    f4e6:	3401      	adds	r4, #1
    f4e8:	2c03      	cmp	r4, #3
    f4ea:	d1f5      	bne.n	f4d8 <uwb_ccp_pkg_init+0x10>
        pr_info("uwbccp: To start service: echo 1 > /sys/kernel/uwbcore/uwbccp%d/role; echo 1 > /sys/kernel/uwbcore/uwbccp%d/enable; cat /dev/uwbccp%d\n",
                udev->idx, udev->idx, udev->idx);
#endif  /* __KERNEL__ */
    }

}
    f4ec:	bd10      	pop	{r4, pc}
    f4ee:	bf00      	nop
    f4f0:	000206bb 	.word	0x000206bb

0000f4f4 <uwb_ccp_pkg_down>:
 *
 * @return void
 */
int
uwb_ccp_pkg_down(int reason)
{
    f4f4:	b538      	push	{r3, r4, r5, lr}
    int i;
    struct uwb_dev *udev;
    struct uwb_ccp_instance * ccp;

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
    f4f6:	2500      	movs	r5, #0
        udev = uwb_dev_idx_lookup(i);
    f4f8:	4628      	mov	r0, r5
    f4fa:	f7f9 fa13 	bl	8924 <uwb_dev_idx_lookup>
        if (!udev) {
    f4fe:	b168      	cbz	r0, f51c <uwb_ccp_pkg_down+0x28>
            continue;
        }
        ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_CCP);
    f500:	2101      	movs	r1, #1
    f502:	f7f9 fa83 	bl	8a0c <uwb_mac_find_cb_inst_ptr>
        if (!ccp) {
    f506:	4604      	mov	r4, r0
    f508:	b140      	cbz	r0, f51c <uwb_ccp_pkg_down+0x28>
            continue;
        }
        if (ccp->status.enabled) {
    f50a:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
    f50e:	06db      	lsls	r3, r3, #27
    f510:	d501      	bpl.n	f516 <uwb_ccp_pkg_down+0x22>
            uwb_ccp_stop(ccp);
    f512:	f7ff fd73 	bl	effc <uwb_ccp_stop>
        }
#if __KERNEL__
        ccp_chrdev_destroy(udev->idx);
        ccp_sysfs_deinit(udev->idx);
#endif
        uwb_ccp_free(ccp);
    f516:	4620      	mov	r0, r4
    f518:	f7ff fcb0 	bl	ee7c <uwb_ccp_free>
    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
    f51c:	3501      	adds	r5, #1
    f51e:	2d03      	cmp	r5, #3
    f520:	d1ea      	bne.n	f4f8 <uwb_ccp_pkg_down+0x4>
    }

    return 0;
}
    f522:	2000      	movs	r0, #0
    f524:	bd38      	pop	{r3, r4, r5, pc}

0000f526 <dpl_sem_release.isra.0>:
    f526:	f7fe b897 	b.w	d658 <os_sem_release>

0000f52a <rx_complete_cb>:
 *
 * @return true on sucess
 */
static bool
rx_complete_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
    f52a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f52e:	4606      	mov	r6, r0
    uwb_transport_instance_t * uwb_transport = (uwb_transport_instance_t *)cbs->inst_ptr;
    f530:	684c      	ldr	r4, [r1, #4]
    bool ret = false;
    struct dpl_mbuf * mbuf;
    uint32_t cputime = dpl_cputime_get32();
    f532:	f001 f9ff 	bl	10934 <dpl_cputime_get32>

    if (inst->fctrl == UWB_FCTRL_FRAME_TYPE_ACK) {
    f536:	f8b6 34e0 	ldrh.w	r3, [r6, #1248]	; 0x4e0
    f53a:	2b02      	cmp	r3, #2
    uint32_t cputime = dpl_cputime_get32();
    f53c:	4680      	mov	r8, r0
    if (inst->fctrl == UWB_FCTRL_FRAME_TYPE_ACK) {
    f53e:	d10d      	bne.n	f55c <rx_complete_cb+0x32>
        if(dpl_sem_get_count(&uwb_transport->ack_sem) == 0) {
    f540:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    f542:	b113      	cbz	r3, f54a <rx_complete_cb+0x20>
        ret = true;
    }
    else{
        UWB_TRANSPORT_INC(rx_err);
    }
    return ret;
    f544:	2001      	movs	r0, #1
early_ret:
    if(dpl_sem_get_count(&uwb_transport->sem) == 0){
        dpl_sem_release(&uwb_transport->sem);
    }
    return ret;
}
    f546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            uwb_transport->ack_seq_num = inst->rxbuf[2];
    f54a:	f8d6 34fc 	ldr.w	r3, [r6, #1276]	; 0x4fc
    f54e:	789b      	ldrb	r3, [r3, #2]
    f550:	60e3      	str	r3, [r4, #12]
            dpl_sem_release(&uwb_transport->ack_sem);
    f552:	f104 0038 	add.w	r0, r4, #56	; 0x38
    f556:	f7ff ffe6 	bl	f526 <dpl_sem_release.isra.0>
    f55a:	e7f3      	b.n	f544 <rx_complete_cb+0x1a>
    if(inst->fctrl != UWB_TRANSPORT_FCTRL &&
    f55c:	f023 0320 	bic.w	r3, r3, #32
    f560:	f648 0241 	movw	r2, #34881	; 0x8841
    f564:	4293      	cmp	r3, r2
    f566:	d171      	bne.n	f64c <rx_complete_cb+0x122>
    if (inst->status.autoack_triggered) {
    f568:	f896 3509 	ldrb.w	r3, [r6, #1289]	; 0x509
    uwb_transport_frame_header_t * frame = (uwb_transport_frame_header_t* )inst->rxbuf;
    f56c:	f8d6 74fc 	ldr.w	r7, [r6, #1276]	; 0x4fc
    if (inst->status.autoack_triggered) {
    f570:	0658      	lsls	r0, r3, #25
        uwb_transport->status.awaiting_ack_tx = 1;
    f572:	bf42      	ittt	mi
    f574:	7923      	ldrbmi	r3, [r4, #4]
    f576:	f043 0302 	orrmi.w	r3, r3, #2
    f57a:	7123      	strbmi	r3, [r4, #4]
    if(frame->code < UWB_DATA_CODE_TRNSPRT_REQUEST ||
    f57c:	f8b7 3009 	ldrh.w	r3, [r7, #9]
    f580:	f46f 6182 	mvn.w	r1, #1040	; 0x410
    f584:	440b      	add	r3, r1
    f586:	2b0e      	cmp	r3, #14
    f588:	d860      	bhi.n	f64c <rx_complete_cb+0x122>
    if(frame->dst_address != inst->my_short_address && frame->dst_address != 0xffff) {
    f58a:	f8b7 3005 	ldrh.w	r3, [r7, #5]
    f58e:	f8b6 24b6 	ldrh.w	r2, [r6, #1206]	; 0x4b6
    f592:	429a      	cmp	r2, r3
    f594:	d003      	beq.n	f59e <rx_complete_cb+0x74>
    f596:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f59a:	4293      	cmp	r3, r2
    f59c:	d156      	bne.n	f64c <rx_complete_cb+0x122>
    if ((cputime - uwb_transport->last_frame_time) < dpl_cputime_usecs_to_ticks(10000) &&
    f59e:	6923      	ldr	r3, [r4, #16]
    f5a0:	f242 720f 	movw	r2, #9999	; 0x270f
    f5a4:	eba8 0303 	sub.w	r3, r8, r3
    f5a8:	4293      	cmp	r3, r2
        !memcmp(&uwb_transport->last_frame, frame, sizeof(*frame))) {
    f5aa:	f104 0514 	add.w	r5, r4, #20
    if ((cputime - uwb_transport->last_frame_time) < dpl_cputime_usecs_to_ticks(10000) &&
    f5ae:	d806      	bhi.n	f5be <rx_complete_cb+0x94>
        !memcmp(&uwb_transport->last_frame, frame, sizeof(*frame))) {
    f5b0:	220d      	movs	r2, #13
    f5b2:	4639      	mov	r1, r7
    f5b4:	4628      	mov	r0, r5
    f5b6:	f000 fe37 	bl	10228 <memcmp>
    if ((cputime - uwb_transport->last_frame_time) < dpl_cputime_usecs_to_ticks(10000) &&
    f5ba:	2800      	cmp	r0, #0
    f5bc:	d046      	beq.n	f64c <rx_complete_cb+0x122>
    memcpy(&uwb_transport->last_frame, frame, sizeof(*frame));
    f5be:	463a      	mov	r2, r7
    f5c0:	462b      	mov	r3, r5
    f5c2:	f107 010c 	add.w	r1, r7, #12
    f5c6:	f852 0b04 	ldr.w	r0, [r2], #4
    f5ca:	f843 0b04 	str.w	r0, [r3], #4
    f5ce:	428a      	cmp	r2, r1
    f5d0:	d1f9      	bne.n	f5c6 <rx_complete_cb+0x9c>
    f5d2:	7812      	ldrb	r2, [r2, #0]
    f5d4:	701a      	strb	r2, [r3, #0]
    if (uwb_transport->config.os_msys_mpool){
    f5d6:	79a3      	ldrb	r3, [r4, #6]
    uwb_transport->last_frame_time = cputime;
    f5d8:	f8c4 8010 	str.w	r8, [r4, #16]
    if (uwb_transport->config.os_msys_mpool){
    f5dc:	07da      	lsls	r2, r3, #31
    f5de:	d527      	bpl.n	f630 <rx_complete_cb+0x106>
        mbuf = dpl_msys_get_pkthdr(inst->frame_len - sizeof(uwb_transport_frame_header_t),
    f5e0:	f8b6 04e2 	ldrh.w	r0, [r6, #1250]	; 0x4e2
    f5e4:	380d      	subs	r0, #13
    f5e6:	2108      	movs	r1, #8
    f5e8:	b280      	uxth	r0, r0
    f5ea:	f001 fa72 	bl	10ad2 <dpl_msys_get_pkthdr>
        mbuf = dpl_mbuf_get_pkthdr(uwb_transport->omp, sizeof(uwb_transport_user_header_t));
    f5ee:	4605      	mov	r5, r0
    if (mbuf) {
    f5f0:	2800      	cmp	r0, #0
    f5f2:	d0a7      	beq.n	f544 <rx_complete_cb+0x1a>
        hdr->tsp_code = frame->tsp_code;
    f5f4:	f8b7 300b 	ldrh.w	r3, [r7, #11]
    f5f8:	8303      	strh	r3, [r0, #24]
        hdr->uid = frame->src_address;
    f5fa:	f8b7 3007 	ldrh.w	r3, [r7, #7]
        int rc = dpl_mbuf_copyinto(mbuf, 0, inst->rxbuf + sizeof(uwb_transport_frame_header_t),
    f5fe:	f8d6 24fc 	ldr.w	r2, [r6, #1276]	; 0x4fc
        hdr->uid = frame->src_address;
    f602:	8343      	strh	r3, [r0, #26]
                                      (inst->frame_len - sizeof(uwb_transport_frame_header_t)));
    f604:	f8b6 34e2 	ldrh.w	r3, [r6, #1250]	; 0x4e2
        hdr->uwb_transport = uwb_transport;
    f608:	61c4      	str	r4, [r0, #28]
        int rc = dpl_mbuf_copyinto(mbuf, 0, inst->rxbuf + sizeof(uwb_transport_frame_header_t),
    f60a:	3b0d      	subs	r3, #13
    f60c:	320d      	adds	r2, #13
    f60e:	2100      	movs	r1, #0
    f610:	f001 fb78 	bl	10d04 <dpl_mbuf_copyinto>
        if (rc == 0){
    f614:	b9b0      	cbnz	r0, f644 <rx_complete_cb+0x11a>
            if (uwb_transport->config.dflt_eventq){
    f616:	79a3      	ldrb	r3, [r4, #6]
    f618:	079b      	lsls	r3, r3, #30
                dpl_mqueue_put(&uwb_transport->rx_q, dpl_eventq_dflt_get(), mbuf);
    f61a:	f104 0664 	add.w	r6, r4, #100	; 0x64
            if (uwb_transport->config.dflt_eventq){
    f61e:	d50d      	bpl.n	f63c <rx_complete_cb+0x112>
    return (struct dpl_eventq *) os_eventq_dflt_get();
    f620:	f7fd fc72 	bl	cf08 <os_eventq_dflt_get>
                dpl_mqueue_put(&uwb_transport->rx_q, dpl_eventq_dflt_get(), mbuf);
    f624:	462a      	mov	r2, r5
    f626:	4601      	mov	r1, r0
                dpl_mqueue_put(&uwb_transport->rx_q, uwb_transport->oeq, mbuf);
    f628:	4630      	mov	r0, r6
    f62a:	f001 f9f3 	bl	10a14 <dpl_mqueue_put>
    f62e:	e789      	b.n	f544 <rx_complete_cb+0x1a>
        mbuf = dpl_mbuf_get_pkthdr(uwb_transport->omp, sizeof(uwb_transport_user_header_t));
    f630:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    f634:	2108      	movs	r1, #8
    f636:	f001 fa36 	bl	10aa6 <dpl_mbuf_get_pkthdr>
    f63a:	e7d8      	b.n	f5ee <rx_complete_cb+0xc4>
                dpl_mqueue_put(&uwb_transport->rx_q, uwb_transport->oeq, mbuf);
    f63c:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
    f640:	462a      	mov	r2, r5
    f642:	e7f1      	b.n	f628 <rx_complete_cb+0xfe>
            dpl_mbuf_free_chain(mbuf);
    f644:	4628      	mov	r0, r5
    f646:	f001 fa5c 	bl	10b02 <dpl_mbuf_free_chain>
    f64a:	e77b      	b.n	f544 <rx_complete_cb+0x1a>
    if(dpl_sem_get_count(&uwb_transport->sem) == 0){
    f64c:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
    f64e:	b91d      	cbnz	r5, f658 <rx_complete_cb+0x12e>
        dpl_sem_release(&uwb_transport->sem);
    f650:	f104 0028 	add.w	r0, r4, #40	; 0x28
    f654:	f7ff ff67 	bl	f526 <dpl_sem_release.isra.0>
    return ret;
    f658:	2000      	movs	r0, #0
    f65a:	e774      	b.n	f546 <rx_complete_cb+0x1c>

0000f65c <tx_begins_cb>:
 * @return true on sucess
 */
static bool
tx_begins_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
    uwb_transport_instance_t * uwb_transport = (uwb_transport_instance_t *)cbs->inst_ptr;
    f65c:	6848      	ldr	r0, [r1, #4]
{
    f65e:	b508      	push	{r3, lr}
    if(dpl_sem_get_count(&uwb_transport->write_tx_lock) == 0) {
    f660:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
    f662:	b923      	cbnz	r3, f66e <tx_begins_cb+0x12>
        dpl_sem_release(&uwb_transport->write_tx_lock);
    f664:	3030      	adds	r0, #48	; 0x30
    f666:	f7ff ff5e 	bl	f526 <dpl_sem_release.isra.0>
        return true;
    f66a:	2001      	movs	r0, #1
    }
    return false;
}
    f66c:	bd08      	pop	{r3, pc}
    return false;
    f66e:	2000      	movs	r0, #0
    f670:	e7fc      	b.n	f66c <tx_begins_cb+0x10>

0000f672 <tx_complete_cb>:
 * @return true on sucess
 */
static bool
tx_complete_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
    uwb_transport_instance_t * uwb_transport = (uwb_transport_instance_t *)cbs->inst_ptr;
    f672:	6848      	ldr	r0, [r1, #4]
{
    f674:	b508      	push	{r3, lr}

    if (uwb_transport->status.awaiting_ack_tx) {
    f676:	7903      	ldrb	r3, [r0, #4]
    f678:	079a      	lsls	r2, r3, #30
        uwb_transport->status.awaiting_ack_tx = 0;
    f67a:	bf44      	itt	mi
    f67c:	f36f 0341 	bfcmi	r3, #1, #1
    f680:	7103      	strbmi	r3, [r0, #4]
    }

    if(dpl_sem_get_count(&uwb_transport->sem) == 0) {
    f682:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
    f684:	b923      	cbnz	r3, f690 <tx_complete_cb+0x1e>
        dpl_sem_release(&uwb_transport->sem);
    f686:	3028      	adds	r0, #40	; 0x28
    f688:	f7ff ff4d 	bl	f526 <dpl_sem_release.isra.0>
        return true;
    f68c:	2001      	movs	r0, #1
    }
    return false;
}
    f68e:	bd08      	pop	{r3, pc}
    return false;
    f690:	2000      	movs	r0, #0
    f692:	e7fc      	b.n	f68e <tx_complete_cb+0x1c>

0000f694 <rx_timeout_cb>:
    uwb_transport_instance_t * uwb_transport = (uwb_transport_instance_t *)cbs->inst_ptr;
    f694:	6848      	ldr	r0, [r1, #4]
{
    f696:	b508      	push	{r3, lr}
    if(dpl_sem_get_count(&uwb_transport->ack_sem) == 0) {
    f698:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
    f69a:	b93b      	cbnz	r3, f6ac <rx_timeout_cb+0x18>
        uwb_transport->ack_seq_num = -1;
    f69c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f6a0:	60c3      	str	r3, [r0, #12]
        dpl_sem_release(&uwb_transport->ack_sem);
    f6a2:	3038      	adds	r0, #56	; 0x38
        dpl_sem_release(&uwb_transport->sem);
    f6a4:	f7ff ff3f 	bl	f526 <dpl_sem_release.isra.0>
        return true;
    f6a8:	2001      	movs	r0, #1
}
    f6aa:	bd08      	pop	{r3, pc}
    if(dpl_sem_get_count(&uwb_transport->sem) == 0){
    f6ac:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
    f6ae:	b90b      	cbnz	r3, f6b4 <rx_timeout_cb+0x20>
        dpl_sem_release(&uwb_transport->sem);
    f6b0:	3028      	adds	r0, #40	; 0x28
    f6b2:	e7f7      	b.n	f6a4 <rx_timeout_cb+0x10>
    return false;
    f6b4:	2000      	movs	r0, #0
    f6b6:	e7f8      	b.n	f6aa <rx_timeout_cb+0x16>

0000f6b8 <reset_cb>:
 *
 * @return void
 */
static bool
reset_cb(struct uwb_dev *inst, struct uwb_mac_interface * cbs)
{
    f6b8:	b510      	push	{r4, lr}
    uwb_transport_instance_t * uwb_transport = (uwb_transport_instance_t *)cbs->inst_ptr;
    f6ba:	684c      	ldr	r4, [r1, #4]
    if(dpl_sem_get_count(&uwb_transport->ack_sem) == 0) {
    f6bc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    f6be:	b933      	cbnz	r3, f6ce <reset_cb+0x16>
        uwb_transport->ack_seq_num = -1;
    f6c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f6c4:	60e3      	str	r3, [r4, #12]
        dpl_sem_release(&uwb_transport->ack_sem);
    f6c6:	f104 0038 	add.w	r0, r4, #56	; 0x38
    f6ca:	f7ff ff2c 	bl	f526 <dpl_sem_release.isra.0>
    }
    if(dpl_sem_get_count(&uwb_transport->sem) == 0) {
    f6ce:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    f6d0:	b91b      	cbnz	r3, f6da <reset_cb+0x22>
        dpl_sem_release(&uwb_transport->sem);
    f6d2:	f104 0028 	add.w	r0, r4, #40	; 0x28
    f6d6:	f7ff ff26 	bl	f526 <dpl_sem_release.isra.0>
    }
    if(dpl_sem_get_count(&uwb_transport->write_tx_lock) == 0) {
    f6da:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    f6dc:	b91b      	cbnz	r3, f6e6 <reset_cb+0x2e>
        dpl_sem_release(&uwb_transport->write_tx_lock);
    f6de:	f104 0030 	add.w	r0, r4, #48	; 0x30
    f6e2:	f7ff ff20 	bl	f526 <dpl_sem_release.isra.0>
    }
    return false;  // Pass it forward
}
    f6e6:	2000      	movs	r0, #0
    f6e8:	bd10      	pop	{r4, pc}
	...

0000f6ec <uwb_transport_create_mbuf_pool>:
{
    f6ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
    rc = dpl_mempool_init(&g_mbuf_mempool, MBUF_NUM_MBUFS,
    f6ee:	4b11      	ldr	r3, [pc, #68]	; (f734 <uwb_transport_create_mbuf_pool+0x48>)
    f6f0:	9300      	str	r3, [sp, #0]
{
    f6f2:	4604      	mov	r4, r0
    rc = dpl_mempool_init(&g_mbuf_mempool, MBUF_NUM_MBUFS,
    f6f4:	4b10      	ldr	r3, [pc, #64]	; (f738 <uwb_transport_create_mbuf_pool+0x4c>)
    f6f6:	4811      	ldr	r0, [pc, #68]	; (f73c <uwb_transport_create_mbuf_pool+0x50>)
    f6f8:	f44f 7208 	mov.w	r2, #544	; 0x220
    f6fc:	2110      	movs	r1, #16
    f6fe:	f001 fbcb 	bl	10e98 <dpl_mempool_init>
    assert(rc == 0);
    f702:	b128      	cbz	r0, f710 <uwb_transport_create_mbuf_pool+0x24>
    f704:	2300      	movs	r3, #0
    f706:	461a      	mov	r2, r3
    f708:	4619      	mov	r1, r3
    f70a:	4618      	mov	r0, r3
    f70c:	f7fd f876 	bl	c7fc <__assert_func>
    rc = dpl_mbuf_pool_init(&g_mbuf_pool, &g_mbuf_mempool, MBUF_MEMBLOCK_SIZE,
    f710:	4d0b      	ldr	r5, [pc, #44]	; (f740 <uwb_transport_create_mbuf_pool+0x54>)
    f712:	490a      	ldr	r1, [pc, #40]	; (f73c <uwb_transport_create_mbuf_pool+0x50>)
    f714:	2310      	movs	r3, #16
    f716:	f44f 7208 	mov.w	r2, #544	; 0x220
    f71a:	4628      	mov	r0, r5
    f71c:	f001 f9a9 	bl	10a72 <dpl_mbuf_pool_init>
    assert(rc == 0);
    f720:	2800      	cmp	r0, #0
    f722:	d1ef      	bne.n	f704 <uwb_transport_create_mbuf_pool+0x18>
    uwb_transport->config.os_msys_mpool = false;
    f724:	79a3      	ldrb	r3, [r4, #6]
    uwb_transport->omp = &g_mbuf_pool;
    f726:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    uwb_transport->config.os_msys_mpool = false;
    f72a:	f360 0300 	bfi	r3, r0, #0, #1
    f72e:	71a3      	strb	r3, [r4, #6]
}
    f730:	b003      	add	sp, #12
    f732:	bd30      	pop	{r4, r5, pc}
    f734:	0002083b 	.word	0x0002083b
    f738:	20003bf4 	.word	0x20003bf4
    f73c:	20005df4 	.word	0x20005df4
    f740:	20005e1c 	.word	0x20005e1c

0000f744 <uwb_transport_mtu>:
{
    f744:	b508      	push	{r3, lr}
    struct uwb_dev* inst = uwb_dev_idx_lookup(idx);
    f746:	4608      	mov	r0, r1
    f748:	f7f9 f8ec 	bl	8924 <uwb_dev_idx_lookup>
    if (!inst) {
    f74c:	b130      	cbz	r0, f75c <uwb_transport_mtu+0x18>
    return (inst->config.rx.phrMode==DWT_PHRMODE_STD) ? UWB_TRANSPORT_MTU_STD : UWB_TRANSPORT_MTU_EXT;
    f74e:	f890 3513 	ldrb.w	r3, [r0, #1299]	; 0x513
    f752:	2b00      	cmp	r3, #0
    f754:	f240 10f1 	movw	r0, #497	; 0x1f1
    f758:	bf08      	it	eq
    f75a:	2071      	moveq	r0, #113	; 0x71
}
    f75c:	bd08      	pop	{r3, pc}
	...

0000f760 <uwb_transport_init>:
{
    f760:	b538      	push	{r3, r4, r5, lr}
    uwb_transport_instance_t * uwb_transport = (uwb_transport_instance_t*)uwb_mac_find_cb_inst_ptr(dev, UWBEXT_TRANSPORT);
    f762:	2160      	movs	r1, #96	; 0x60
{
    f764:	4605      	mov	r5, r0
    uwb_transport_instance_t * uwb_transport = (uwb_transport_instance_t*)uwb_mac_find_cb_inst_ptr(dev, UWBEXT_TRANSPORT);
    f766:	f7f9 f951 	bl	8a0c <uwb_mac_find_cb_inst_ptr>
    if (uwb_transport == NULL) {
    f76a:	4604      	mov	r4, r0
    f76c:	b968      	cbnz	r0, f78a <uwb_transport_init+0x2a>
        uwb_transport = (uwb_transport_instance_t *)calloc(1, sizeof(uwb_transport_instance_t));
    f76e:	21a0      	movs	r1, #160	; 0xa0
    f770:	2001      	movs	r0, #1
    f772:	f000 fc83 	bl	1007c <calloc>
        assert(uwb_transport);
    f776:	4604      	mov	r4, r0
    f778:	b920      	cbnz	r0, f784 <uwb_transport_init+0x24>
    f77a:	4603      	mov	r3, r0
    f77c:	4602      	mov	r2, r0
    f77e:	4601      	mov	r1, r0
    f780:	f7fd f83c 	bl	c7fc <__assert_func>
        uwb_transport->config = (uwb_transport_config_t){
    f784:	2303      	movs	r3, #3
        uwb_transport->dev_inst = dev;
    f786:	6005      	str	r5, [r0, #0]
        uwb_transport->config = (uwb_transport_config_t){
    f788:	80c3      	strh	r3, [r0, #6]
    return (dpl_error_t)os_sem_init(&sem->sem, tokens);
    f78a:	2101      	movs	r1, #1
    f78c:	f104 0028 	add.w	r0, r4, #40	; 0x28
    f790:	f7fd ff5a 	bl	d648 <os_sem_init>
    f794:	2101      	movs	r1, #1
    f796:	f104 0030 	add.w	r0, r4, #48	; 0x30
    f79a:	f7fd ff55 	bl	d648 <os_sem_init>
    f79e:	2101      	movs	r1, #1
    f7a0:	f104 0038 	add.w	r0, r4, #56	; 0x38
    f7a4:	f7fd ff50 	bl	d648 <os_sem_init>
    dpl_mqueue_init(&uwb_transport->tx_q, NULL, NULL);
    f7a8:	2200      	movs	r2, #0
    f7aa:	4611      	mov	r1, r2
    f7ac:	f104 0040 	add.w	r0, r4, #64	; 0x40
    f7b0:	f001 f900 	bl	109b4 <dpl_mqueue_init>
    dpl_mqueue_init(&uwb_transport->rx_q, (dpl_event_fn *) uwb_transport_process_rx_queue, uwb_transport);
    f7b4:	4622      	mov	r2, r4
    f7b6:	490d      	ldr	r1, [pc, #52]	; (f7ec <uwb_transport_init+0x8c>)
    f7b8:	f104 0064 	add.w	r0, r4, #100	; 0x64
    f7bc:	f001 f8fa 	bl	109b4 <dpl_mqueue_init>
    snprintf(uwb_transport->device_name, sizeof(uwb_transport->device_name), "uwbtp%d", dev->idx);
    f7c0:	f895 34b0 	ldrb.w	r3, [r5, #1200]	; 0x4b0
    f7c4:	4a0a      	ldr	r2, [pc, #40]	; (f7f0 <uwb_transport_init+0x90>)
    f7c6:	210c      	movs	r1, #12
    f7c8:	f104 0094 	add.w	r0, r4, #148	; 0x94
    f7cc:	f001 f866 	bl	1089c <snprintf>
    uwb_transport->config.request_acks = 1;
    f7d0:	79a3      	ldrb	r3, [r4, #6]
    f7d2:	f043 0304 	orr.w	r3, r3, #4
    f7d6:	71a3      	strb	r3, [r4, #6]
    uwb_transport_create_mbuf_pool(uwb_transport);
    f7d8:	4620      	mov	r0, r4
    f7da:	f7ff ff87 	bl	f6ec <uwb_transport_create_mbuf_pool>
    uwb_transport->status.has_init = 1;
    f7de:	7923      	ldrb	r3, [r4, #4]
    f7e0:	f043 0301 	orr.w	r3, r3, #1
    f7e4:	7123      	strb	r3, [r4, #4]
}
    f7e6:	4620      	mov	r0, r4
    f7e8:	bd38      	pop	{r3, r4, r5, pc}
    f7ea:	bf00      	nop
    f7ec:	0000f815 	.word	0x0000f815
    f7f0:	00020853 	.word	0x00020853

0000f7f4 <uwb_transport_get_extension>:
{
    f7f4:	b508      	push	{r3, lr}
    assert(uwb_transport);
    f7f6:	4603      	mov	r3, r0
    f7f8:	b918      	cbnz	r0, f802 <uwb_transport_get_extension+0xe>
    f7fa:	4602      	mov	r2, r0
    f7fc:	4601      	mov	r1, r0
    f7fe:	f7fc fffd 	bl	c7fc <__assert_func>
    if(!(SLIST_EMPTY(&uwb_transport->extension_list))){
    f802:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
    f806:	b120      	cbz	r0, f812 <uwb_transport_get_extension+0x1e>
            if (extension != NULL && extension->tsp_code == tsp_code) {
    f808:	8803      	ldrh	r3, [r0, #0]
    f80a:	428b      	cmp	r3, r1
    f80c:	d001      	beq.n	f812 <uwb_transport_get_extension+0x1e>
        SLIST_FOREACH(extension, &uwb_transport->extension_list, next){
    f80e:	6900      	ldr	r0, [r0, #16]
    f810:	e7f9      	b.n	f806 <uwb_transport_get_extension+0x12>
}
    f812:	bd08      	pop	{r3, pc}

0000f814 <uwb_transport_process_rx_queue>:
{
    f814:	b570      	push	{r4, r5, r6, lr}
    return ev->ev.ev_arg;
    f816:	6885      	ldr	r5, [r0, #8]
    while ((mbuf = dpl_mqueue_get(&uwb_transport->rx_q)) &&
    f818:	f105 0664 	add.w	r6, r5, #100	; 0x64
    f81c:	4630      	mov	r0, r6
    f81e:	f001 f8dd 	bl	109dc <dpl_mqueue_get>
    f822:	4604      	mov	r4, r0
    f824:	b110      	cbz	r0, f82c <uwb_transport_process_rx_queue+0x18>
    f826:	792b      	ldrb	r3, [r5, #4]
    f828:	07db      	lsls	r3, r3, #31
    f82a:	d400      	bmi.n	f82e <uwb_transport_process_rx_queue+0x1a>
}
    f82c:	bd70      	pop	{r4, r5, r6, pc}
        extension = uwb_transport_get_extension(uwb_transport, hdr->tsp_code);
    f82e:	8b21      	ldrh	r1, [r4, #24]
    f830:	4628      	mov	r0, r5
    f832:	f7ff ffdf 	bl	f7f4 <uwb_transport_get_extension>
        if (extension)
    f836:	b128      	cbz	r0, f844 <uwb_transport_process_rx_queue+0x30>
            extension->receive_cb(uwb_transport->dev_inst, hdr->uid, mbuf);
    f838:	6883      	ldr	r3, [r0, #8]
    f83a:	8b61      	ldrh	r1, [r4, #26]
    f83c:	6828      	ldr	r0, [r5, #0]
    f83e:	4622      	mov	r2, r4
    f840:	4798      	blx	r3
    f842:	e7eb      	b.n	f81c <uwb_transport_process_rx_queue+0x8>
            dpl_mbuf_free_chain(mbuf);
    f844:	4620      	mov	r0, r4
    f846:	f001 f95c 	bl	10b02 <dpl_mbuf_free_chain>
    f84a:	e7e7      	b.n	f81c <uwb_transport_process_rx_queue+0x8>

0000f84c <uwb_transport_append_extension>:
{
    f84c:	b508      	push	{r3, lr}
    assert(uwb_transport);
    f84e:	4603      	mov	r3, r0
    f850:	b918      	cbnz	r0, f85a <uwb_transport_append_extension+0xe>
    f852:	4602      	mov	r2, r0
    f854:	4601      	mov	r1, r0
    f856:	f7fc ffd1 	bl	c7fc <__assert_func>
    if(!(SLIST_EMPTY(&uwb_transport->extension_list))) {
    f85a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
    f85e:	b132      	cbz	r2, f86e <uwb_transport_append_extension+0x22>
        SLIST_FOREACH(cur, &uwb_transport->extension_list, next){
    f860:	4613      	mov	r3, r2
    f862:	6912      	ldr	r2, [r2, #16]
    f864:	2a00      	cmp	r2, #0
    f866:	d1fb      	bne.n	f860 <uwb_transport_append_extension+0x14>
        SLIST_INSERT_AFTER(prev, extension, next);
    f868:	610a      	str	r2, [r1, #16]
    f86a:	6119      	str	r1, [r3, #16]
}
    f86c:	bd08      	pop	{r3, pc}
        SLIST_INSERT_HEAD(&uwb_transport->extension_list, extension, next);
    f86e:	610a      	str	r2, [r1, #16]
    f870:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
}
    f874:	e7fa      	b.n	f86c <uwb_transport_append_extension+0x20>

0000f876 <uwb_transport_listen>:
 *
 * @return struct uwb_dev_status
 */
struct uwb_dev_status
uwb_transport_listen(struct _uwb_transport_instance *uwb_transport, uwb_dev_modes_t mode, uint64_t dx_time, uint64_t dx_time_end)
{
    f876:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    f87a:	4604      	mov	r4, r0
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    f87c:	f100 0728 	add.w	r7, r0, #40	; 0x28
    f880:	4689      	mov	r9, r1
    f882:	4638      	mov	r0, r7
    f884:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    f888:	4698      	mov	r8, r3
    f88a:	4692      	mov	sl, r2
    f88c:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
    f890:	f7fd ff14 	bl	d6bc <os_sem_pend>
    dpl_error_t err;
    dpl_sem_pend(&uwb_transport->sem, DPL_TIMEOUT_NEVER);
    struct uwb_dev * inst = uwb_transport->dev_inst;
    f894:	6824      	ldr	r4, [r4, #0]
    /* Stop listening in time to get ready for next slot */
    if (dx_time) {
    f896:	ea5a 0308 	orrs.w	r3, sl, r8
    f89a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f89c:	d038      	beq.n	f910 <uwb_transport_listen+0x9a>
        dx_time_end -= (MYNEWT_VAL(UWB_TRANSPORT_PERIOD_END_GUARD) << 16);
    f89e:	f1b5 65fa 	subs.w	r5, r5, #131072000	; 0x7d00000
    f8a2:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
        dx_time_end &= UWB_DTU_40BMASK;
    f8a6:	f006 06ff 	and.w	r6, r6, #255	; 0xff
    return (dev->uw_funcs->uf_set_rx_window(dev, rx_start, rx_end));
    f8aa:	e9cd 5600 	strd	r5, r6, [sp]
    f8ae:	4652      	mov	r2, sl
    f8b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    f8b2:	4620      	mov	r0, r4
    f8b4:	4643      	mov	r3, r8
    f8b6:	4788      	blx	r1
 * @return struct uwb_dev_status
 */
UWB_API_IMPL_PREFIX struct uwb_dev_status
uwb_set_autoack(struct uwb_dev * dev, bool enable)
{
    return (dev->uw_funcs->uf_set_autoack(dev, enable));
    f8b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f8ba:	2101      	movs	r1, #1
    f8bc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    f8c0:	4620      	mov	r0, r4
    f8c2:	4798      	blx	r3
 * @return struct uwb_dev_status
 */
UWB_API_IMPL_PREFIX struct uwb_dev_status
uwb_set_autoack_delay(struct uwb_dev * dev, uint8_t delay)
{
    return (dev->uw_funcs->uf_set_autoack_delay(dev, delay));
    f8c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f8c6:	210c      	movs	r1, #12
    f8c8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    f8cc:	4620      	mov	r0, r4
    f8ce:	4798      	blx	r3
    return (dev->uw_funcs->uf_set_wait4resp(dev, enable));
    f8d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f8d2:	2101      	movs	r1, #1
    f8d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    f8d6:	4620      	mov	r0, r4
    f8d8:	4798      	blx	r3
    return (dev->uw_funcs->uf_set_wait4resp_delay(dev, delay));
    f8da:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f8dc:	2100      	movs	r1, #0
    f8de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    f8e0:	4620      	mov	r0, r4
    f8e2:	4798      	blx	r3
    return (dev->uw_funcs->uf_set_on_error_continue(dev, enable));
    f8e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f8e6:	2101      	movs	r1, #1
    f8e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    f8ec:	4620      	mov	r0, r4
    f8ee:	4798      	blx	r3
    return (dev->uw_funcs->uf_start_rx(dev));
    f8f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f8f2:	4620      	mov	r0, r4
    f8f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    f8f6:	4798      	blx	r3
    uwb_set_autoack_delay(inst, 12);
    uwb_set_wait4resp(inst, 1);
    uwb_set_wait4resp_delay(inst, 0);

    uwb_set_on_error_continue(inst, true);
    if(uwb_start_rx(inst).start_rx_error) {
    f8f8:	0703      	lsls	r3, r0, #28
    f8fa:	d510      	bpl.n	f91e <uwb_transport_listen+0xa8>
    return (dpl_error_t)os_sem_release(&sem->sem);
    f8fc:	4638      	mov	r0, r7
    f8fe:	f7fd feab 	bl	d658 <os_sem_release>
        UWB_TRANSPORT_INC(rx_start_err);
        err = dpl_sem_release(&uwb_transport->sem);
        assert(err == DPL_OK);
    f902:	b160      	cbz	r0, f91e <uwb_transport_listen+0xa8>
    f904:	2300      	movs	r3, #0
    f906:	461a      	mov	r2, r3
    f908:	4619      	mov	r1, r3
    f90a:	4618      	mov	r0, r3
    f90c:	f7fc ff76 	bl	c7fc <__assert_func>
        uwb_set_rx_timeout(inst, dx_time_end>>16);
    f910:	0c2d      	lsrs	r5, r5, #16
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
    f912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f914:	ea45 4106 	orr.w	r1, r5, r6, lsl #16
    f918:	4620      	mov	r0, r4
    f91a:	4798      	blx	r3
    f91c:	e7cc      	b.n	f8b8 <uwb_transport_listen+0x42>
    }

    if (mode == UWB_BLOCKING){
    f91e:	f1b9 0f00 	cmp.w	r9, #0
    f922:	d10b      	bne.n	f93c <uwb_transport_listen+0xc6>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    f924:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    f928:	4638      	mov	r0, r7
    f92a:	f7fd fec7 	bl	d6bc <os_sem_pend>
        err = dpl_sem_pend(&uwb_transport->sem, DPL_TIMEOUT_NEVER);
        assert(err == DPL_OK);
    f92e:	2800      	cmp	r0, #0
    f930:	d1e8      	bne.n	f904 <uwb_transport_listen+0x8e>
    return (dpl_error_t)os_sem_release(&sem->sem);
    f932:	4638      	mov	r0, r7
    f934:	f7fd fe90 	bl	d658 <os_sem_release>
        err = dpl_sem_release(&uwb_transport->sem);
        assert(err == DPL_OK);
    f938:	2800      	cmp	r0, #0
    f93a:	d1e3      	bne.n	f904 <uwb_transport_listen+0x8e>
    }
    return inst->status;
}
    f93c:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    f940:	b002      	add	sp, #8
    f942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0000f948 <uwb_transport_write_tx>:
 * @return struct uwb_dev_status
 */
struct uwb_dev_status
uwb_transport_write_tx(struct _uwb_transport_instance *uwb_transport,
                       struct dpl_mbuf *om, uint16_t idx)
{
    f948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int rc;
    struct uwb_dev * inst = uwb_transport->dev_inst;
    f94c:	6806      	ldr	r6, [r0, #0]
    uint8_t buf[128];
    int mbuf_offset = 0;
    int device_offset;
    struct uwb_dev_status status;
    int tx_buffer_offset = (idx%2)?512:0;
    int tx_len = DPL_MBUF_PKTLEN(om) - 6;
    f94e:	f8b1 9010 	ldrh.w	r9, [r1, #16]
    size_t mtu = (inst->config.rx.phrMode==DWT_PHRMODE_STD) ? UWB_TRANSPORT_MTU_STD : UWB_TRANSPORT_MTU_EXT;
    f952:	f896 3513 	ldrb.w	r3, [r6, #1299]	; 0x513
    f956:	2b00      	cmp	r3, #0
    int tx_buffer_offset = (idx%2)?512:0;
    f958:	ea4f 2442 	mov.w	r4, r2, lsl #9
    int tx_len = DPL_MBUF_PKTLEN(om) - 6;
    f95c:	f1a9 0906 	sub.w	r9, r9, #6
    size_t mtu = (inst->config.rx.phrMode==DWT_PHRMODE_STD) ? UWB_TRANSPORT_MTU_STD : UWB_TRANSPORT_MTU_EXT;
    f960:	f240 12f1 	movw	r2, #497	; 0x1f1
    f964:	bf08      	it	eq
    f966:	2271      	moveq	r2, #113	; 0x71
    if (tx_len > mtu) {
    f968:	4591      	cmp	r9, r2
{
    f96a:	b0a7      	sub	sp, #156	; 0x9c
    f96c:	4607      	mov	r7, r0
    f96e:	460d      	mov	r5, r1
    int tx_buffer_offset = (idx%2)?512:0;
    f970:	f404 7400 	and.w	r4, r4, #512	; 0x200
    if (tx_len > mtu) {
    f974:	d903      	bls.n	f97e <uwb_transport_write_tx+0x36>
        slog("uwb_transport: ERROR %d > MTU %zd", tx_len, mtu);
    f976:	483a      	ldr	r0, [pc, #232]	; (fa60 <uwb_transport_write_tx+0x118>)
    f978:	4649      	mov	r1, r9
    f97a:	f000 ff5f 	bl	1083c <printf>
    }

    /* Prepare header and write to device */
    uwb_hdr.src_address = inst->uid;
    f97e:	f8b6 34b6 	ldrh.w	r3, [r6, #1206]	; 0x4b6
    f982:	f8ad 300f 	strh.w	r3, [sp, #15]
    uwb_hdr.code = UWB_DATA_CODE_TRNSPRT_REQUEST;
    f986:	2311      	movs	r3, #17
    f988:	f88d 3011 	strb.w	r3, [sp, #17]
    f98c:	2304      	movs	r3, #4
    f98e:	f88d 3012 	strb.w	r3, [sp, #18]
    uwb_hdr.seq_num = ++uwb_transport->frame_seq_num;
    f992:	7a3b      	ldrb	r3, [r7, #8]
    f994:	3301      	adds	r3, #1
    f996:	b2db      	uxtb	r3, r3
    f998:	723b      	strb	r3, [r7, #8]
    f99a:	f88d 300a 	strb.w	r3, [sp, #10]
    uwb_hdr.PANID = inst->pan_id;
    f99e:	f8b6 34c0 	ldrh.w	r3, [r6, #1216]	; 0x4c0
    f9a2:	f8ad 300b 	strh.w	r3, [sp, #11]
    uwb_hdr.fctrl = UWB_TRANSPORT_FCTRL;
    f9a6:	f648 0341 	movw	r3, #34881	; 0x8841
    f9aa:	f8ad 3008 	strh.w	r3, [sp, #8]
    if (uwb_transport->config.request_acks) {
    f9ae:	79bb      	ldrb	r3, [r7, #6]
        uwb_hdr.fctrl |= UWB_FCTRL_ACK_REQUESTED;
    }

    /* Extract dest address and tsp_code */
    rc = dpl_mbuf_copydata(om, DPL_MBUF_PKTLEN(om)-6, sizeof(uwb_hdr.dst_address), &uwb_hdr.dst_address);
    f9b0:	8a29      	ldrh	r1, [r5, #16]
    if (uwb_transport->config.request_acks) {
    f9b2:	075b      	lsls	r3, r3, #29
        uwb_hdr.fctrl |= UWB_FCTRL_ACK_REQUESTED;
    f9b4:	bf44      	itt	mi
    f9b6:	f648 0361 	movwmi	r3, #34913	; 0x8861
    f9ba:	f8ad 3008 	strhmi.w	r3, [sp, #8]
    rc = dpl_mbuf_copydata(om, DPL_MBUF_PKTLEN(om)-6, sizeof(uwb_hdr.dst_address), &uwb_hdr.dst_address);
    f9be:	2202      	movs	r2, #2
    f9c0:	f10d 030d 	add.w	r3, sp, #13
    f9c4:	3906      	subs	r1, #6
    f9c6:	4628      	mov	r0, r5
    f9c8:	f001 f92a 	bl	10c20 <dpl_mbuf_copydata>
    assert(rc==0);
    f9cc:	b128      	cbz	r0, f9da <uwb_transport_write_tx+0x92>
    f9ce:	2300      	movs	r3, #0
    f9d0:	461a      	mov	r2, r3
    f9d2:	4619      	mov	r1, r3
    f9d4:	4618      	mov	r0, r3
    f9d6:	f7fc ff11 	bl	c7fc <__assert_func>
    rc = dpl_mbuf_copydata(om, DPL_MBUF_PKTLEN(om)-4, sizeof(uwb_hdr.tsp_code), &uwb_hdr.tsp_code);
    f9da:	8a29      	ldrh	r1, [r5, #16]
    f9dc:	f10d 0313 	add.w	r3, sp, #19
    f9e0:	2202      	movs	r2, #2
    f9e2:	3904      	subs	r1, #4
    f9e4:	4628      	mov	r0, r5
    f9e6:	f001 f91b 	bl	10c20 <dpl_mbuf_copydata>
    assert(rc==0);
    f9ea:	4680      	mov	r8, r0
    f9ec:	2800      	cmp	r0, #0
    f9ee:	d1ee      	bne.n	f9ce <uwb_transport_write_tx+0x86>
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
    f9f0:	6a73      	ldr	r3, [r6, #36]	; 0x24

    status = uwb_write_tx(inst, (uint8_t*)&uwb_hdr, tx_buffer_offset, sizeof(uwb_transport_frame_header_t));
    f9f2:	fa1f fb84 	uxth.w	fp, r4
    f9f6:	f8d3 a044 	ldr.w	sl, [r3, #68]	; 0x44
    f9fa:	465a      	mov	r2, fp
    f9fc:	230d      	movs	r3, #13
    f9fe:	a902      	add	r1, sp, #8
    fa00:	4630      	mov	r0, r6
    fa02:	47d0      	blx	sl
    device_offset = sizeof(uwb_transport_frame_header_t) + tx_buffer_offset;
    fa04:	f104 030d 	add.w	r3, r4, #13

    /* Copy the mbuf payload data to the device to be sent */
    while (mbuf_offset < tx_len) {
    fa08:	45c8      	cmp	r8, r9
         * until that's finished before updating the buffer */
        uwb_hal_noblock_wait(inst, DPL_TIMEOUT_NEVER);
        dpl_mbuf_copydata(om, mbuf_offset, cpy_len, buf);
        status = uwb_write_tx(inst, buf, device_offset, cpy_len);
        mbuf_offset += cpy_len;
        device_offset += cpy_len;
    fa0a:	9301      	str	r3, [sp, #4]
    while (mbuf_offset < tx_len) {
    fa0c:	db07      	blt.n	fa1e <uwb_transport_write_tx+0xd6>
    }

    /* Store next fctrl values but don't write them here as this affects the frame thay may be still sending */
    uwb_transport->tx_buffer_len = sizeof(uwb_transport_frame_header_t) + DPL_MBUF_PKTLEN(om) - 6;
    fa0e:	8a2b      	ldrh	r3, [r5, #16]
    uwb_transport->tx_buffer_offset = tx_buffer_offset;
    fa10:	f8a7 b024 	strh.w	fp, [r7, #36]	; 0x24
    uwb_transport->tx_buffer_len = sizeof(uwb_transport_frame_header_t) + DPL_MBUF_PKTLEN(om) - 6;
    fa14:	3307      	adds	r3, #7
    fa16:	847b      	strh	r3, [r7, #34]	; 0x22
    return status;
}
    fa18:	b027      	add	sp, #156	; 0x9c
    fa1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        int cpy_len = tx_len - mbuf_offset;
    fa1e:	eba9 0a08 	sub.w	sl, r9, r8
    return (dev->uw_funcs->uf_hal_noblock_wait(dev, timeout));
    fa22:	6a73      	ldr	r3, [r6, #36]	; 0x24
        cpy_len = (cpy_len > sizeof(buf)) ? sizeof(buf) : cpy_len;
    fa24:	f1ba 0f80 	cmp.w	sl, #128	; 0x80
    fa28:	bf28      	it	cs
    fa2a:	f04f 0a80 	movcs.w	sl, #128	; 0x80
    fa2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    fa30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    fa34:	4630      	mov	r0, r6
    fa36:	4798      	blx	r3
        dpl_mbuf_copydata(om, mbuf_offset, cpy_len, buf);
    fa38:	4641      	mov	r1, r8
    fa3a:	ab06      	add	r3, sp, #24
    fa3c:	4652      	mov	r2, sl
    fa3e:	4628      	mov	r0, r5
    fa40:	f001 f8ee 	bl	10c20 <dpl_mbuf_copydata>
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
    fa44:	6a73      	ldr	r3, [r6, #36]	; 0x24
    fa46:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    fa4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    fa4c:	a906      	add	r1, sp, #24
    fa4e:	461c      	mov	r4, r3
    fa50:	4630      	mov	r0, r6
    fa52:	fa1f f38a 	uxth.w	r3, sl
    fa56:	47a0      	blx	r4
        device_offset += cpy_len;
    fa58:	9b01      	ldr	r3, [sp, #4]
        mbuf_offset += cpy_len;
    fa5a:	44d0      	add	r8, sl
        device_offset += cpy_len;
    fa5c:	4453      	add	r3, sl
    fa5e:	e7d3      	b.n	fa08 <uwb_transport_write_tx+0xc0>
    fa60:	0002085b 	.word	0x0002085b

0000fa64 <uwb_transport_start_tx>:
{
    struct uwb_dev * inst = uwb_transport->dev_inst;
    struct uwb_dev_status status;

    /* If dx_time provided, delay until then with tx */
    if (dx_time) {
    fa64:	ea52 0103 	orrs.w	r1, r2, r3
{
    fa68:	b570      	push	{r4, r5, r6, lr}
    struct uwb_dev * inst = uwb_transport->dev_inst;
    fa6a:	6804      	ldr	r4, [r0, #0]
{
    fa6c:	4605      	mov	r5, r0
    if (dx_time) {
    fa6e:	d003      	beq.n	fa78 <uwb_transport_start_tx+0x14>
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
    fa70:	6a61      	ldr	r1, [r4, #36]	; 0x24
    fa72:	4620      	mov	r0, r4
    fa74:	6b49      	ldr	r1, [r1, #52]	; 0x34
    fa76:	4788      	blx	r1
        uwb_set_delay_start(inst, dx_time);
    }

    /* Wait for ack? */
    if (uwb_transport->config.request_acks) {
    fa78:	79ab      	ldrb	r3, [r5, #6]
    fa7a:	075b      	lsls	r3, r3, #29
    fa7c:	d514      	bpl.n	faa8 <uwb_transport_start_tx+0x44>
    return (dev->uw_funcs->uf_set_wait4resp(dev, enable));
    fa7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fa80:	2101      	movs	r1, #1
    fa82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    fa84:	4620      	mov	r0, r4
    fa86:	4798      	blx	r3
        uwb_set_wait4resp(inst, 1);
        uwb_set_rx_timeout(inst, 12 + 10 + uwb_phy_frame_duration(uwb_transport->dev_inst, 5));
    fa88:	6828      	ldr	r0, [r5, #0]
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
    fa8a:	6a43      	ldr	r3, [r0, #36]	; 0x24
    fa8c:	2105      	movs	r1, #5
    fa8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    fa90:	4798      	blx	r3
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
    fa92:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fa94:	f100 0116 	add.w	r1, r0, #22
    fa98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    fa9a:	4620      	mov	r0, r4
    fa9c:	4798      	blx	r3
    return (dev->uw_funcs->uf_set_rxauto_disable(dev, disable));
    fa9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    faa0:	2101      	movs	r1, #1
    faa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    faa4:	4620      	mov	r0, r4
    faa6:	4798      	blx	r3
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
    faa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    faaa:	8caa      	ldrh	r2, [r5, #36]	; 0x24
    faac:	6c9e      	ldr	r6, [r3, #72]	; 0x48
    faae:	8c69      	ldrh	r1, [r5, #34]	; 0x22
    fab0:	4620      	mov	r0, r4
    fab2:	2300      	movs	r3, #0
    fab4:	47b0      	blx	r6
    return (dev->uw_funcs->uf_start_tx(dev));
    fab6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fab8:	4620      	mov	r0, r4
    faba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    }

    uwb_write_tx_fctrl(inst, uwb_transport->tx_buffer_len, uwb_transport->tx_buffer_offset);
    status = uwb_start_tx(inst);
    return status;
}
    fabc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fac0:	4718      	bx	r3
    fac2:	0000      	movs	r0, r0
    fac4:	0000      	movs	r0, r0
	...

0000fac8 <uwb_transport_dequeue_tx>:
 *
 * @return int 1 if some tx was attemted, 0 otherwise
 */
int
uwb_transport_dequeue_tx(struct _uwb_transport_instance *uwb_transport, uint64_t arg_dx_time, uint64_t dx_time_end)
{
    fac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    facc:	ed2d 8b02 	vpush	{d8}
    fad0:	b08f      	sub	sp, #60	; 0x3c
    fad2:	e9cd 2305 	strd	r2, r3, [sp, #20]
    fad6:	4604      	mov	r4, r0
    fad8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    uint16_t idx=0, retries, *retries_p;
    uint64_t dx_time, systime;
    uint64_t preamble_duration, data_duration;
    uint64_t last_duration = 0, next_duration;

    if (STAILQ_FIRST(&uwb_transport->tx_q.mq_head) == NULL) {
    fada:	6c00      	ldr	r0, [r0, #64]	; 0x40
{
    fadc:	9307      	str	r3, [sp, #28]
    fade:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    fae0:	9308      	str	r3, [sp, #32]
    if (STAILQ_FIRST(&uwb_transport->tx_q.mq_head) == NULL) {
    fae2:	2800      	cmp	r0, #0
    fae4:	f000 811b 	beq.w	fd1e <uwb_transport_dequeue_tx+0x256>
        return false;
    }
    dx_time = arg_dx_time;
    preamble_duration = (uint64_t) ceilf(uwb_usecs_to_dwt_usecs(uwb_phy_SHR_duration(uwb_transport->dev_inst)));
    fae8:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_phy_SHR_duration(dev));
    faea:	6a43      	ldr	r3, [r0, #36]	; 0x24
    faec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    faf0:	4798      	blx	r3
    faf2:	f00e fdf7 	bl	1e6e4 <__aeabi_i2d>
    faf6:	a3a1      	add	r3, pc, #644	; (adr r3, fd7c <uwb_transport_dequeue_tx+0x2b4>)
    faf8:	e9d3 2300 	ldrd	r2, r3, [r3]
    fafc:	f00e ff86 	bl	1ea0c <__aeabi_ddiv>
    fb00:	f00f f952 	bl	1eda8 <__aeabi_d2f>
    fb04:	ee00 0a10 	vmov	s0, r0
    fb08:	f00f fbd0 	bl	1f2ac <ceilf>
    fb0c:	ee10 0a10 	vmov	r0, s0
    fb10:	f00f fa1a 	bl	1ef48 <__aeabi_f2ulz>
                dpl_sem_release(&uwb_transport->ack_sem);
            }
            /* Check if we've slipped far behind systime and correct if so */
            systime = uwb_read_systime(uwb_transport->dev_inst);
            if (dx_time - systime > 0x7fffffffffULL) {
                dx_time = systime + (preamble_duration<<16);
    fb14:	040b      	lsls	r3, r1, #16
    fb16:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
    fb1a:	9303      	str	r3, [sp, #12]
    preamble_duration = (uint64_t) ceilf(uwb_usecs_to_dwt_usecs(uwb_phy_SHR_duration(uwb_transport->dev_inst)));
    fb1c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
                dx_time = systime + (preamble_duration<<16);
    fb20:	0403      	lsls	r3, r0, #16
    uint64_t last_duration = 0, next_duration;
    fb22:	2600      	movs	r6, #0
                dx_time = systime + (preamble_duration<<16);
    fb24:	9309      	str	r3, [sp, #36]	; 0x24
    dx_time = arg_dx_time;
    fb26:	f8dd b018 	ldr.w	fp, [sp, #24]
    fb2a:	9b05      	ldr	r3, [sp, #20]
    fb2c:	9301      	str	r3, [sp, #4]
    uint64_t last_duration = 0, next_duration;
    fb2e:	46b2      	mov	sl, r6
    uint16_t idx=0, retries, *retries_p;
    fb30:	9602      	str	r6, [sp, #8]
    struct dpl_mbuf_pkthdr * mp = NULL;
    fb32:	46b0      	mov	r8, r6
    struct dpl_mbuf *om = NULL;
    fb34:	4635      	mov	r5, r6
    bool membuf_transferred = false;
    fb36:	4637      	mov	r7, r6
    int rc, n_sent = 0;
    fb38:	46b1      	mov	r9, r6
        if (!uwb_transport->status.has_init) {
    fb3a:	7923      	ldrb	r3, [r4, #4]
    fb3c:	07db      	lsls	r3, r3, #31
    fb3e:	f140 80e1 	bpl.w	fd04 <uwb_transport_dequeue_tx+0x23c>
        if (!mp) {
    fb42:	f1b8 0f00 	cmp.w	r8, #0
    fb46:	d108      	bne.n	fb5a <uwb_transport_dequeue_tx+0x92>
            mp = STAILQ_FIRST(&uwb_transport->tx_q.mq_head);
    fb48:	f8d4 8040 	ldr.w	r8, [r4, #64]	; 0x40
            if(mp == NULL)
    fb4c:	f1b8 0f00 	cmp.w	r8, #0
    fb50:	f000 80d8 	beq.w	fd04 <uwb_transport_dequeue_tx+0x23c>
            om = DPL_MBUF_PKTHDR_TO_MBUF(mp);
    fb54:	f1a8 0510 	sub.w	r5, r8, #16
            membuf_transferred = false;
    fb58:	2700      	movs	r7, #0
        dx_time += last_duration;
    fb5a:	9b01      	ldr	r3, [sp, #4]
        data_duration = (uint64_t) ceilf(uwb_usecs_to_dwt_usecs(uwb_phy_data_duration(uwb_transport->dev_inst,
    fb5c:	6820      	ldr	r0, [r4, #0]
        dx_time += last_duration;
    fb5e:	199b      	adds	r3, r3, r6
    fb60:	eb4b 010a 	adc.w	r1, fp, sl
        dx_time &= UWB_DTU_40BMASK;
    fb64:	f001 0bff 	and.w	fp, r1, #255	; 0xff
        data_duration = (uint64_t) ceilf(uwb_usecs_to_dwt_usecs(uwb_phy_data_duration(uwb_transport->dev_inst,
    fb68:	8a29      	ldrh	r1, [r5, #16]
        dx_time += last_duration;
    fb6a:	9304      	str	r3, [sp, #16]
        dx_time &= UWB_DTU_40BMASK;
    fb6c:	9301      	str	r3, [sp, #4]
    return (dev->uw_funcs->uf_phy_data_duration(dev, nlen));
    fb6e:	6a43      	ldr	r3, [r0, #36]	; 0x24
        data_duration = (uint64_t) ceilf(uwb_usecs_to_dwt_usecs(uwb_phy_data_duration(uwb_transport->dev_inst,
    fb70:	310d      	adds	r1, #13
    fb72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    fb76:	b289      	uxth	r1, r1
    fb78:	4798      	blx	r3
    fb7a:	f00e fdb3 	bl	1e6e4 <__aeabi_i2d>
    fb7e:	a37f      	add	r3, pc, #508	; (adr r3, fd7c <uwb_transport_dequeue_tx+0x2b4>)
    fb80:	e9d3 2300 	ldrd	r2, r3, [r3]
    fb84:	f00e ff42 	bl	1ea0c <__aeabi_ddiv>
    fb88:	f00f f90e 	bl	1eda8 <__aeabi_d2f>
    fb8c:	ee00 0a10 	vmov	s0, r0
    fb90:	f00f fb8c 	bl	1f2ac <ceilf>
    fb94:	ee10 0a10 	vmov	r0, s0
    fb98:	f00f f9d6 	bl	1ef48 <__aeabi_f2ulz>
        next_duration = ((preamble_duration + data_duration + MYNEWT_VAL(UWB_TRANSPORT_SUBSLOT_GUARD)) << 16);
    fb9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fb9e:	f513 76c8 	adds.w	r6, r3, #400	; 0x190
    fba2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fba4:	f143 0300 	adc.w	r3, r3, #0
    fba8:	1980      	adds	r0, r0, r6
    fbaa:	eb43 0101 	adc.w	r1, r3, r1
        if (dx_time_end && tx_time_remaining > 0x7fffffffffULL) {
    fbae:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
        next_duration = ((preamble_duration + data_duration + MYNEWT_VAL(UWB_TRANSPORT_SUBSLOT_GUARD)) << 16);
    fbb2:	ea4f 4a01 	mov.w	sl, r1, lsl #16
        if (dx_time_end && tx_time_remaining > 0x7fffffffffULL) {
    fbb6:	4313      	orrs	r3, r2
        next_duration = ((preamble_duration + data_duration + MYNEWT_VAL(UWB_TRANSPORT_SUBSLOT_GUARD)) << 16);
    fbb8:	ea4a 4a10 	orr.w	sl, sl, r0, lsr #16
    fbbc:	ea4f 4600 	mov.w	r6, r0, lsl #16
        if (dx_time_end && tx_time_remaining > 0x7fffffffffULL) {
    fbc0:	d010      	beq.n	fbe4 <uwb_transport_dequeue_tx+0x11c>
        tx_time_remaining -= (MYNEWT_VAL(UWB_TRANSPORT_PERIOD_END_GUARD) << 16);
    fbc2:	9b07      	ldr	r3, [sp, #28]
    fbc4:	f1b3 61fa 	subs.w	r1, r3, #131072000	; 0x7d00000
    fbc8:	f142 33ff 	adc.w	r3, r2, #4294967295	; 0xffffffff
        uint64_t tx_time_remaining = dx_time_end - ((dx_time + next_duration)&UWB_DTU_40BMASK);
    fbcc:	9a01      	ldr	r2, [sp, #4]
    fbce:	1990      	adds	r0, r2, r6
    fbd0:	eb4b 020a 	adc.w	r2, fp, sl
    fbd4:	f002 02ff 	and.w	r2, r2, #255	; 0xff
        tx_time_remaining -= (MYNEWT_VAL(UWB_TRANSPORT_PERIOD_END_GUARD) << 16);
    fbd8:	1a09      	subs	r1, r1, r0
    fbda:	eb63 0302 	sbc.w	r3, r3, r2
        if (dx_time_end && tx_time_remaining > 0x7fffffffffULL) {
    fbde:	2b7f      	cmp	r3, #127	; 0x7f
    fbe0:	f200 8090 	bhi.w	fd04 <uwb_transport_dequeue_tx+0x23c>
        dpl_sem_pend(&uwb_transport->write_tx_lock, DPL_TIMEOUT_NEVER);
    fbe4:	f104 0330 	add.w	r3, r4, #48	; 0x30
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    fbe8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    fbec:	4618      	mov	r0, r3
    fbee:	ee08 3a10 	vmov	s16, r3
    fbf2:	f7fd fd63 	bl	d6bc <os_sem_pend>
        if (!membuf_transferred) {
    fbf6:	b94f      	cbnz	r7, fc0c <uwb_transport_dequeue_tx+0x144>
            uwb_transport_write_tx(uwb_transport, om, ++idx);
    fbf8:	9b02      	ldr	r3, [sp, #8]
    fbfa:	3301      	adds	r3, #1
    fbfc:	b29b      	uxth	r3, r3
    fbfe:	461a      	mov	r2, r3
    fc00:	4629      	mov	r1, r5
    fc02:	4620      	mov	r0, r4
    fc04:	9302      	str	r3, [sp, #8]
    fc06:	f7ff fe9f 	bl	f948 <uwb_transport_write_tx>
            n_sent = 0;
    fc0a:	46b9      	mov	r9, r7
        dpl_sem_pend(&uwb_transport->sem, DPL_TIMEOUT_NEVER);
    fc0c:	f104 0728 	add.w	r7, r4, #40	; 0x28
    fc10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    fc14:	4638      	mov	r0, r7
    fc16:	f7fd fd51 	bl	d6bc <os_sem_pend>
        if (uwb_transport->config.request_acks) {
    fc1a:	79a3      	ldrb	r3, [r4, #6]
    fc1c:	0758      	lsls	r0, r3, #29
    fc1e:	d505      	bpl.n	fc2c <uwb_transport_dequeue_tx+0x164>
    fc20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    fc24:	f104 0038 	add.w	r0, r4, #56	; 0x38
    fc28:	f7fd fd48 	bl	d6bc <os_sem_pend>
        if(uwb_transport_start_tx(uwb_transport, om, (arg_dx_time) ? dx_time : 0).start_tx_error){
    fc2c:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    fc30:	4313      	orrs	r3, r2
    fc32:	bf0e      	itee	eq
    fc34:	e9dd 2305 	ldrdeq	r2, r3, [sp, #20]
    fc38:	9a04      	ldrne	r2, [sp, #16]
    fc3a:	465b      	movne	r3, fp
    fc3c:	4629      	mov	r1, r5
    fc3e:	4620      	mov	r0, r4
    fc40:	f7ff ff10 	bl	fa64 <uwb_transport_start_tx>
    fc44:	0741      	lsls	r1, r0, #29
    fc46:	d522      	bpl.n	fc8e <uwb_transport_dequeue_tx+0x1c6>
            if(dpl_sem_get_count(&uwb_transport->sem) == 0) {
    fc48:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    fc4a:	b913      	cbnz	r3, fc52 <uwb_transport_dequeue_tx+0x18a>
                dpl_sem_release(&uwb_transport->sem);
    fc4c:	4638      	mov	r0, r7
    fc4e:	f7ff fc6a 	bl	f526 <dpl_sem_release.isra.0>
            if(dpl_sem_get_count(&uwb_transport->write_tx_lock) == 0) {
    fc52:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    fc54:	b91b      	cbnz	r3, fc5e <uwb_transport_dequeue_tx+0x196>
                dpl_sem_release(&uwb_transport->write_tx_lock);
    fc56:	ee18 0a10 	vmov	r0, s16
    fc5a:	f7ff fc64 	bl	f526 <dpl_sem_release.isra.0>
            if(dpl_sem_get_count(&uwb_transport->ack_sem) == 0) {
    fc5e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    fc60:	b91b      	cbnz	r3, fc6a <uwb_transport_dequeue_tx+0x1a2>
                dpl_sem_release(&uwb_transport->ack_sem);
    fc62:	f104 0038 	add.w	r0, r4, #56	; 0x38
    fc66:	f7ff fc5e 	bl	f526 <dpl_sem_release.isra.0>
            systime = uwb_read_systime(uwb_transport->dev_inst);
    fc6a:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_read_systime(dev));
    fc6c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    fc6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    fc70:	4798      	blx	r3
            if (dx_time - systime > 0x7fffffffffULL) {
    fc72:	9b04      	ldr	r3, [sp, #16]
    fc74:	1a1b      	subs	r3, r3, r0
    fc76:	eb6b 0301 	sbc.w	r3, fp, r1
    fc7a:	2b7f      	cmp	r3, #127	; 0x7f
    fc7c:	d905      	bls.n	fc8a <uwb_transport_dequeue_tx+0x1c2>
                dx_time = systime + (preamble_duration<<16);
    fc7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fc80:	181b      	adds	r3, r3, r0
    fc82:	9301      	str	r3, [sp, #4]
    fc84:	9b03      	ldr	r3, [sp, #12]
    fc86:	eb43 0b01 	adc.w	fp, r3, r1
        membuf_transferred = true;
    fc8a:	2701      	movs	r7, #1
    fc8c:	e034      	b.n	fcf8 <uwb_transport_dequeue_tx+0x230>
            continue;
        } else {
            n_sent++;
        }

        if (uwb_transport->config.request_acks) {
    fc8e:	79a3      	ldrb	r3, [r4, #6]
    fc90:	075a      	lsls	r2, r3, #29
            n_sent++;
    fc92:	f109 0901 	add.w	r9, r9, #1
        if (uwb_transport->config.request_acks) {
    fc96:	d55a      	bpl.n	fd4e <uwb_transport_dequeue_tx+0x286>
            dpl_sem_pend(&uwb_transport->ack_sem, DPL_TIMEOUT_NEVER);
    fc98:	f104 0738 	add.w	r7, r4, #56	; 0x38
    fc9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    fca0:	4638      	mov	r0, r7
    fca2:	f7fd fd0b 	bl	d6bc <os_sem_pend>
            if(dpl_sem_get_count(&uwb_transport->ack_sem) == 0) {
    fca6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    fca8:	b913      	cbnz	r3, fcb0 <uwb_transport_dequeue_tx+0x1e8>
                dpl_sem_release(&uwb_transport->ack_sem);
    fcaa:	4638      	mov	r0, r7
    fcac:	f7ff fc3b 	bl	f526 <dpl_sem_release.isra.0>
            }

            if (uwb_transport->ack_seq_num != uwb_transport->frame_seq_num) {
    fcb0:	7a23      	ldrb	r3, [r4, #8]
    fcb2:	68e2      	ldr	r2, [r4, #12]
    fcb4:	429a      	cmp	r2, r3
    fcb6:	d04a      	beq.n	fd4e <uwb_transport_dequeue_tx+0x286>
                rc = dpl_mbuf_copydata(om, DPL_MBUF_PKTLEN(om)-2, sizeof(uint16_t), &retries);
    fcb8:	8a29      	ldrh	r1, [r5, #16]
    fcba:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    fcbe:	2202      	movs	r2, #2
    fcc0:	3902      	subs	r1, #2
    fcc2:	4628      	mov	r0, r5
    fcc4:	f000 ffac 	bl	10c20 <dpl_mbuf_copydata>
                assert(rc==0);
    fcc8:	4607      	mov	r7, r0
    fcca:	b128      	cbz	r0, fcd8 <uwb_transport_dequeue_tx+0x210>
    fccc:	2300      	movs	r3, #0
    fcce:	461a      	mov	r2, r3
    fcd0:	4619      	mov	r1, r3
    fcd2:	4618      	mov	r0, r3
    fcd4:	f7fc fd92 	bl	c7fc <__assert_func>
                /* Check for retries */
                if (n_sent > retries) {
    fcd8:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
    fcdc:	454a      	cmp	r2, r9
    fcde:	da23      	bge.n	fd28 <uwb_transport_dequeue_tx+0x260>
                    printf("dropped n:%d r:%d\n", n_sent, retries);
    fce0:	4649      	mov	r1, r9
    fce2:	4825      	ldr	r0, [pc, #148]	; (fd78 <uwb_transport_dequeue_tx+0x2b0>)
    fce4:	f000 fdaa 	bl	1083c <printf>
                    /* Drop packet */
                    om = dpl_mqueue_get(&uwb_transport->tx_q);
    fce8:	f104 0040 	add.w	r0, r4, #64	; 0x40
    fcec:	f000 fe76 	bl	109dc <dpl_mqueue_get>
                    dpl_mbuf_free_chain(om);
    fcf0:	f000 ff07 	bl	10b02 <dpl_mbuf_free_chain>
                    mp = NULL;
    fcf4:	46b8      	mov	r8, r7
                    om = NULL;
    fcf6:	463d      	mov	r5, r7
        om = NULL;
        membuf_transferred = false;

        extension_signal_tx(uwb_transport);
    } while(STAILQ_FIRST(&uwb_transport->tx_q.mq_head) != NULL &&
            uwb_transport->status.has_init);
    fcf8:	6c23      	ldr	r3, [r4, #64]	; 0x40
    fcfa:	b11b      	cbz	r3, fd04 <uwb_transport_dequeue_tx+0x23c>
    } while(STAILQ_FIRST(&uwb_transport->tx_q.mq_head) != NULL &&
    fcfc:	7923      	ldrb	r3, [r4, #4]
    fcfe:	07db      	lsls	r3, r3, #31
    fd00:	f53f af1b 	bmi.w	fb3a <uwb_transport_dequeue_tx+0x72>

    dpl_sem_pend(&uwb_transport->sem, DPL_TIMEOUT_NEVER);
    fd04:	f104 0528 	add.w	r5, r4, #40	; 0x28
    fd08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    fd0c:	4628      	mov	r0, r5
    fd0e:	f7fd fcd5 	bl	d6bc <os_sem_pend>
    if(dpl_sem_get_count(&uwb_transport->sem) == 0) {
    fd12:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    fd14:	b913      	cbnz	r3, fd1c <uwb_transport_dequeue_tx+0x254>
        dpl_sem_release(&uwb_transport->sem);
    fd16:	4628      	mov	r0, r5
    fd18:	f7ff fc05 	bl	f526 <dpl_sem_release.isra.0>
    }

    return true;
    fd1c:	2001      	movs	r0, #1
}
    fd1e:	b00f      	add	sp, #60	; 0x3c
    fd20:	ecbd 8b02 	vpop	{d8}
    fd24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    dpl_mbuf_adj(om, -2);
    fd28:	f06f 0101 	mvn.w	r1, #1
    fd2c:	4628      	mov	r0, r5
    fd2e:	f000 ff9d 	bl	10c6c <dpl_mbuf_adj>
                    retries_p = dpl_mbuf_extend(om, sizeof(uint16_t));
    fd32:	2102      	movs	r1, #2
    fd34:	4628      	mov	r0, r5
    fd36:	f001 f823 	bl	10d80 <dpl_mbuf_extend>
                    if (retries_p) {
    fd3a:	2800      	cmp	r0, #0
    fd3c:	d0a5      	beq.n	fc8a <uwb_transport_dequeue_tx+0x1c2>
                        *retries_p = retries - n_sent;
    fd3e:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
    fd42:	eba3 0909 	sub.w	r9, r3, r9
    fd46:	f8a0 9000 	strh.w	r9, [r0]
                        n_sent = 0;
    fd4a:	46b9      	mov	r9, r7
    fd4c:	e79d      	b.n	fc8a <uwb_transport_dequeue_tx+0x1c2>
        om = dpl_mqueue_get(&uwb_transport->tx_q);
    fd4e:	f104 0040 	add.w	r0, r4, #64	; 0x40
    fd52:	f000 fe43 	bl	109dc <dpl_mqueue_get>
        if (om) {
    fd56:	b108      	cbz	r0, fd5c <uwb_transport_dequeue_tx+0x294>
            dpl_mbuf_free_chain(om);
    fd58:	f000 fed3 	bl	10b02 <dpl_mbuf_free_chain>
    if(!(SLIST_EMPTY(&uwb_transport->extension_list))){
    fd5c:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
    fd60:	b12d      	cbz	r5, fd6e <uwb_transport_dequeue_tx+0x2a6>
            if (extension->transmit_cb != NULL) {
    fd62:	68eb      	ldr	r3, [r5, #12]
    fd64:	b10b      	cbz	r3, fd6a <uwb_transport_dequeue_tx+0x2a2>
                extension->transmit_cb(uwb_transport->dev_inst);
    fd66:	6820      	ldr	r0, [r4, #0]
    fd68:	4798      	blx	r3
        SLIST_FOREACH(extension, &uwb_transport->extension_list, next){
    fd6a:	692d      	ldr	r5, [r5, #16]
    fd6c:	e7f8      	b.n	fd60 <uwb_transport_dequeue_tx+0x298>
        mp = NULL;
    fd6e:	46a8      	mov	r8, r5
        membuf_transferred = false;
    fd70:	462f      	mov	r7, r5
    fd72:	e7c1      	b.n	fcf8 <uwb_transport_dequeue_tx+0x230>
    fd74:	f3af 8000 	nop.w
    fd78:	0002087d 	.word	0x0002087d
    fd7c:	90690691 	.word	0x90690691
    fd80:	3ff06906 	.word	0x3ff06906

0000fd84 <uwb_transport_enqueue_tx>:
 * @return struct uwb_dev_status
 */
int
uwb_transport_enqueue_tx(struct _uwb_transport_instance *uwb_transport, uint16_t dst_addr,
                         uint16_t tsp_code, uint16_t retries, struct dpl_mbuf *om)
{
    fd84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fd88:	9c06      	ldr	r4, [sp, #24]
    fd8a:	461e      	mov	r6, r3
    int rc;
    uint16_t *p;
    size_t mtu = uwb_transport_mtu(om, uwb_transport->dev_inst->idx);
    fd8c:	6803      	ldr	r3, [r0, #0]
{
    fd8e:	4605      	mov	r5, r0
    fd90:	4688      	mov	r8, r1
    size_t mtu = uwb_transport_mtu(om, uwb_transport->dev_inst->idx);
    fd92:	4620      	mov	r0, r4
    fd94:	f893 14b0 	ldrb.w	r1, [r3, #1200]	; 0x4b0
{
    fd98:	4617      	mov	r7, r2
    size_t mtu = uwb_transport_mtu(om, uwb_transport->dev_inst->idx);
    fd9a:	f7ff fcd3 	bl	f744 <uwb_transport_mtu>
    size_t tx_len = DPL_MBUF_PKTLEN(om);
    fd9e:	8a21      	ldrh	r1, [r4, #16]
    if (tx_len > mtu) {
    fda0:	4288      	cmp	r0, r1
    size_t mtu = uwb_transport_mtu(om, uwb_transport->dev_inst->idx);
    fda2:	4602      	mov	r2, r0
    if (tx_len > mtu) {
    fda4:	d205      	bcs.n	fdb2 <uwb_transport_enqueue_tx+0x2e>
        slog("uwb_transport: ERROR %zd > MTU %zd", tx_len, mtu);
    fda6:	4816      	ldr	r0, [pc, #88]	; (fe00 <uwb_transport_enqueue_tx+0x7c>)
    fda8:	f000 fd48 	bl	1083c <printf>
    if (rc != 0) {
        uint32_t utime = dpl_cputime_ticks_to_usecs(dpl_cputime_get32());
        slog("{\"utime\": %"PRIu32",\"error\": \"dpl_mqueue_put %s:%d\"\"}\n",
             utime,__FILE__,__LINE__);
        rc = dpl_mbuf_free_chain(om);
        return DPL_EINVAL;
    fdac:	2002      	movs	r0, #2
    }

    return 0;
}
    fdae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    p = dpl_mbuf_extend(om, sizeof(uint16_t)*3);
    fdb2:	2106      	movs	r1, #6
    fdb4:	4620      	mov	r0, r4
    fdb6:	f000 ffe3 	bl	10d80 <dpl_mbuf_extend>
    if (!p) {
    fdba:	b960      	cbnz	r0, fdd6 <uwb_transport_enqueue_tx+0x52>
        uint32_t utime = dpl_cputime_ticks_to_usecs(dpl_cputime_get32());
    fdbc:	f000 fdba 	bl	10934 <dpl_cputime_get32>
        slog("{\"utime\": %"PRIu32",\"error\": \"dpl_mbuf_extend %s:%d\"\"}\n",
    fdc0:	4a10      	ldr	r2, [pc, #64]	; (fe04 <uwb_transport_enqueue_tx+0x80>)
        uint32_t utime = dpl_cputime_ticks_to_usecs(dpl_cputime_get32());
    fdc2:	4601      	mov	r1, r0
        slog("{\"utime\": %"PRIu32",\"error\": \"dpl_mbuf_extend %s:%d\"\"}\n",
    fdc4:	4810      	ldr	r0, [pc, #64]	; (fe08 <uwb_transport_enqueue_tx+0x84>)
    fdc6:	f240 335b 	movw	r3, #859	; 0x35b
        slog("{\"utime\": %"PRIu32",\"error\": \"dpl_mqueue_put %s:%d\"\"}\n",
    fdca:	f000 fd37 	bl	1083c <printf>
        rc = dpl_mbuf_free_chain(om);
    fdce:	4620      	mov	r0, r4
    fdd0:	f000 fe97 	bl	10b02 <dpl_mbuf_free_chain>
    fdd4:	e7ea      	b.n	fdac <uwb_transport_enqueue_tx+0x28>
    p[0] = dst_addr;
    fdd6:	f8a0 8000 	strh.w	r8, [r0]
    p[1] = tsp_code;
    fdda:	8047      	strh	r7, [r0, #2]
    p[2] = retries;
    fddc:	8086      	strh	r6, [r0, #4]
    rc = dpl_mqueue_put(&uwb_transport->tx_q, NULL, om);
    fdde:	4622      	mov	r2, r4
    fde0:	2100      	movs	r1, #0
    fde2:	f105 0040 	add.w	r0, r5, #64	; 0x40
    fde6:	f000 fe15 	bl	10a14 <dpl_mqueue_put>
    if (rc != 0) {
    fdea:	2800      	cmp	r0, #0
    fdec:	d0df      	beq.n	fdae <uwb_transport_enqueue_tx+0x2a>
        uint32_t utime = dpl_cputime_ticks_to_usecs(dpl_cputime_get32());
    fdee:	f000 fda1 	bl	10934 <dpl_cputime_get32>
        slog("{\"utime\": %"PRIu32",\"error\": \"dpl_mqueue_put %s:%d\"\"}\n",
    fdf2:	4a04      	ldr	r2, [pc, #16]	; (fe04 <uwb_transport_enqueue_tx+0x80>)
        uint32_t utime = dpl_cputime_ticks_to_usecs(dpl_cputime_get32());
    fdf4:	4601      	mov	r1, r0
        slog("{\"utime\": %"PRIu32",\"error\": \"dpl_mqueue_put %s:%d\"\"}\n",
    fdf6:	f44f 735a 	mov.w	r3, #872	; 0x368
    fdfa:	4804      	ldr	r0, [pc, #16]	; (fe0c <uwb_transport_enqueue_tx+0x88>)
    fdfc:	e7e5      	b.n	fdca <uwb_transport_enqueue_tx+0x46>
    fdfe:	bf00      	nop
    fe00:	00020890 	.word	0x00020890
    fe04:	000208b3 	.word	0x000208b3
    fe08:	000208f1 	.word	0x000208f1
    fe0c:	00020923 	.word	0x00020923

0000fe10 <uwb_transport_pkg_init>:
 *
 *
 * @return void
 */
void uwb_transport_pkg_init(void)
{
    fe10:	b510      	push	{r4, lr}
    int i;
    struct uwb_dev* udev;
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    printf("{\"utime\": %"PRIu32",\"msg\": \"uwb_transport_pkg_init\"}\n",
    fe12:	f000 fd8f 	bl	10934 <dpl_cputime_get32>
    fe16:	4601      	mov	r1, r0
    fe18:	4808      	ldr	r0, [pc, #32]	; (fe3c <uwb_transport_pkg_init+0x2c>)
    fe1a:	f000 fd0f 	bl	1083c <printf>

    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
        if (i >= MYNEWT_VAL(UWB_DEVICE_MAX)) {
            break;
        }
        udev = uwb_dev_idx_lookup(i);
    fe1e:	2000      	movs	r0, #0
    fe20:	f7f8 fd80 	bl	8924 <uwb_dev_idx_lookup>
        if (!udev) {
    fe24:	4604      	mov	r4, r0
    fe26:	b140      	cbz	r0, fe3a <uwb_transport_pkg_init+0x2a>
            continue;
        }
        g_cbs[i].inst_ptr = uwb_transport_init(udev);
    fe28:	f7ff fc9a 	bl	f760 <uwb_transport_init>
    fe2c:	4904      	ldr	r1, [pc, #16]	; (fe40 <uwb_transport_pkg_init+0x30>)
    fe2e:	6048      	str	r0, [r1, #4]
        uwb_mac_append_interface(udev, &g_cbs[i]);
    fe30:	4620      	mov	r0, r4
    }
}
    fe32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        uwb_mac_append_interface(udev, &g_cbs[i]);
    fe36:	f7f8 bd9f 	b.w	8978 <uwb_mac_append_interface>
}
    fe3a:	bd10      	pop	{r4, pc}
    fe3c:	00020954 	.word	0x00020954
    fe40:	20001358 	.word	0x20001358

0000fe44 <uwb_read_systime>:
    fe44:	6a43      	ldr	r3, [r0, #36]	; 0x24
    fe46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    fe48:	4718      	bx	r3

0000fe4a <uwb_wcs_free.part.0>:
 *
 * returns struct uwb_wcs_instance *
 */

struct uwb_wcs_instance *
uwb_wcs_init(struct uwb_wcs_instance * wcs, struct uwb_ccp_instance * ccp)
    fe4a:	b508      	push	{r3, lr}
{
    if (wcs == NULL ) {
        wcs = (struct uwb_wcs_instance *) calloc(1, sizeof(struct uwb_wcs_instance));
        assert(wcs);
    fe4c:	2300      	movs	r3, #0
    fe4e:	461a      	mov	r2, r3
    fe50:	4619      	mov	r1, r3
    fe52:	4618      	mov	r0, r3
    fe54:	f7fc fcd2 	bl	c7fc <__assert_func>

0000fe58 <uwb_wcs_init>:
{
    fe58:	b510      	push	{r4, lr}
    fe5a:	460c      	mov	r4, r1
    if (wcs == NULL ) {
    fe5c:	b950      	cbnz	r0, fe74 <uwb_wcs_init+0x1c>
        wcs = (struct uwb_wcs_instance *) calloc(1, sizeof(struct uwb_wcs_instance));
    fe5e:	21a8      	movs	r1, #168	; 0xa8
    fe60:	2001      	movs	r0, #1
    fe62:	f000 f90b 	bl	1007c <calloc>
        assert(wcs);
    fe66:	b908      	cbnz	r0, fe6c <uwb_wcs_init+0x14>
    fe68:	f7ff ffef 	bl	fe4a <uwb_wcs_free.part.0>
        wcs->status.selfmalloc = 1;
    fe6c:	7803      	ldrb	r3, [r0, #0]
    fe6e:	f043 0301 	orr.w	r3, r3, #1
    fe72:	7003      	strb	r3, [r0, #0]
    }
    wcs->ccp = ccp;
    wcs->normalized_skew = DPL_FLOAT64_INIT(1.0l);
    fe74:	4b04      	ldr	r3, [pc, #16]	; (fe88 <uwb_wcs_init+0x30>)
    wcs->ccp = ccp;
    fe76:	6604      	str	r4, [r0, #96]	; 0x60
    wcs->normalized_skew = DPL_FLOAT64_INIT(1.0l);
    fe78:	2200      	movs	r2, #0
    fe7a:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
    wcs->fractional_skew = DPL_FLOAT64_INIT(0.0l);
    fe7e:	2200      	movs	r2, #0
    fe80:	2300      	movs	r3, #0
    fe82:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48

    return wcs;
}
    fe86:	bd10      	pop	{r4, pc}
    fe88:	3ff00000 	.word	0x3ff00000

0000fe8c <uwb_wcs_free>:
 *
 * returns none
 */
void
uwb_wcs_free(struct uwb_wcs_instance * inst)
{
    fe8c:	b510      	push	{r4, lr}
    assert(inst);
    fe8e:	4604      	mov	r4, r0
    fe90:	b908      	cbnz	r0, fe96 <uwb_wcs_free+0xa>
    fe92:	f7ff ffda 	bl	fe4a <uwb_wcs_free.part.0>
#ifndef __KERNEL__
#if MYNEWT_VAL(TIMESCALE_ENABLED)
    timescale_free(inst->timescale);
    fe96:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
    fe9a:	f007 fb6d 	bl	17578 <timescale_free>
#endif
#endif
    if (inst->status.selfmalloc)
    fe9e:	7823      	ldrb	r3, [r4, #0]
    fea0:	f013 0201 	ands.w	r2, r3, #1
    fea4:	d004      	beq.n	feb0 <uwb_wcs_free+0x24>
        free(inst);
    fea6:	4620      	mov	r0, r4
    else
        inst->status.initialized = 0;
}
    fea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        free(inst);
    feac:	f000 b9a6 	b.w	101fc <free>
        inst->status.initialized = 0;
    feb0:	f362 0341 	bfi	r3, r2, #1, #1
    feb4:	7023      	strb	r3, [r4, #0]
}
    feb6:	bd10      	pop	{r4, pc}

0000feb8 <uwb_wcs_set_postprocess>:
 *
 * returns none
 */
void
uwb_wcs_set_postprocess(struct uwb_wcs_instance * wcs, dpl_event_fn * postprocess)
{
    feb8:	b538      	push	{r3, r4, r5, lr}
    feba:	460d      	mov	r5, r1
    if(!wcs) return;
    febc:	4604      	mov	r4, r0
    febe:	b150      	cbz	r0, fed6 <uwb_wcs_set_postprocess+0x1e>
    memset(ev, 0, sizeof(*ev));
    fec0:	2210      	movs	r2, #16
    fec2:	2100      	movs	r1, #0
    fec4:	3050      	adds	r0, #80	; 0x50
    fec6:	f000 f9e0 	bl	1028a <memset>
    dpl_event_init(&wcs->postprocess_ev, postprocess, (void *)wcs);
    wcs->config.postprocess = true;
    feca:	7923      	ldrb	r3, [r4, #4]
    ev->ev.ev_arg = arg;
    fecc:	e9c4 5415 	strd	r5, r4, [r4, #84]	; 0x54
    fed0:	f043 0301 	orr.w	r3, r3, #1
    fed4:	7123      	strb	r3, [r4, #4]
}
    fed6:	bd38      	pop	{r3, r4, r5, pc}

0000fed8 <uwb_wcs_dtu_time_adjust>:
 * @return dtu_time compensated.
 *
 */
uint64_t
uwb_wcs_dtu_time_adjust(struct uwb_wcs_instance * wcs, uint64_t dtu_time)
{
    fed8:	b510      	push	{r4, lr}
    feda:	4604      	mov	r4, r0
    fedc:	4619      	mov	r1, r3
    fede:	4610      	mov	r0, r2
    if(!wcs) return dtu_time;
    fee0:	b164      	cbz	r4, fefc <uwb_wcs_dtu_time_adjust+0x24>
    if (wcs->status.valid){
    fee2:	7823      	ldrb	r3, [r4, #0]
    fee4:	075b      	lsls	r3, r3, #29
    fee6:	d507      	bpl.n	fef8 <uwb_wcs_dtu_time_adjust+0x20>
        dtu_time = (uint64_t) DPL_FLOAT64_INT(DPL_FLOAT64_MUL(wcs->normalized_skew,DPL_FLOAT64_I64_TO_F64(dtu_time)));
    fee8:	f00e fc30 	bl	1e74c <__aeabi_ul2d>
    feec:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	; 0x40
    fef0:	f00e fc62 	bl	1e7b8 <__aeabi_dmul>
    fef4:	f00f f810 	bl	1ef18 <__aeabi_d2lz>
    }

    return dtu_time & 0x00FFFFFFFFFFUL;
    fef8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
}
    fefc:	bd10      	pop	{r4, pc}
	...

0000ff00 <uwb_wcs_prediction>:
 * @param T interval over which to predict.
 * @return Clock master prediction for local epoch T
 */
dpl_float64_t
uwb_wcs_prediction(dpl_float64_t * x, dpl_float64_t T)
{
    ff00:	b570      	push	{r4, r5, r6, lr}
    ff02:	ec53 2b10 	vmov	r2, r3, d0
    // x = A * x;
    dpl_float64_t A[] = { DPL_FLOAT64_INIT(1.0l), T, DPL_FLOAT64_DIV(DPL_FLOAT64_MUL(T,T),DPL_FLOAT64_INIT(2.0l))};
    ff06:	491a      	ldr	r1, [pc, #104]	; (ff70 <uwb_wcs_prediction+0x70>)
{
    ff08:	b088      	sub	sp, #32
    ff0a:	4604      	mov	r4, r0
    dpl_float64_t A[] = { DPL_FLOAT64_INIT(1.0l), T, DPL_FLOAT64_DIV(DPL_FLOAT64_MUL(T,T),DPL_FLOAT64_INIT(2.0l))};
    ff0c:	2000      	movs	r0, #0
    ff0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
    ff12:	ee10 0a10 	vmov	r0, s0
    ff16:	4619      	mov	r1, r3
    ff18:	ed8d 0b04 	vstr	d0, [sp, #16]
    ff1c:	f00e fc4c 	bl	1e7b8 <__aeabi_dmul>
    ff20:	4b14      	ldr	r3, [pc, #80]	; (ff74 <uwb_wcs_prediction+0x74>)
    ff22:	2200      	movs	r2, #0
    ff24:	f00e fc48 	bl	1e7b8 <__aeabi_dmul>
    dpl_float64_t tmp = DPL_FLOAT64_INIT(0.0l);
    ff28:	ed9f 0b0f 	vldr	d0, [pc, #60]	; ff68 <uwb_wcs_prediction+0x68>
    dpl_float64_t A[] = { DPL_FLOAT64_INIT(1.0l), T, DPL_FLOAT64_DIV(DPL_FLOAT64_MUL(T,T),DPL_FLOAT64_INIT(2.0l))};
    ff2c:	e9cd 0106 	strd	r0, r1, [sp, #24]
    for (uint8_t i=0 ; i < sizeof(A)/sizeof(dpl_float64_t); i++ ){
    ff30:	ad02      	add	r5, sp, #8
    ff32:	f104 0618 	add.w	r6, r4, #24
            tmp = DPL_FLOAT64_ADD(tmp,DPL_FLOAT64_MUL(A[i],x[i]));
    ff36:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    ff3a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
    ff3e:	ed8d 0b00 	vstr	d0, [sp]
    ff42:	f00e fc39 	bl	1e7b8 <__aeabi_dmul>
    ff46:	ed9d 0b00 	vldr	d0, [sp]
    ff4a:	4602      	mov	r2, r0
    ff4c:	460b      	mov	r3, r1
    ff4e:	ec51 0b10 	vmov	r0, r1, d0
    ff52:	f00e fa7b 	bl	1e44c <__adddf3>
    for (uint8_t i=0 ; i < sizeof(A)/sizeof(dpl_float64_t); i++ ){
    ff56:	42b4      	cmp	r4, r6
            tmp = DPL_FLOAT64_ADD(tmp,DPL_FLOAT64_MUL(A[i],x[i]));
    ff58:	ec41 0b10 	vmov	d0, r0, r1
    for (uint8_t i=0 ; i < sizeof(A)/sizeof(dpl_float64_t); i++ ){
    ff5c:	d1eb      	bne.n	ff36 <uwb_wcs_prediction+0x36>
    }
    return tmp;
}
    ff5e:	b008      	add	sp, #32
    ff60:	bd70      	pop	{r4, r5, r6, pc}
    ff62:	bf00      	nop
    ff64:	f3af 8000 	nop.w
	...
    ff70:	3ff00000 	.word	0x3ff00000
    ff74:	3fe00000 	.word	0x3fe00000

0000ff78 <uwb_wcs_local_to_master64>:
{
    ff78:	b510      	push	{r4, lr}
    if(!wcs) return 0xffffffffffffffffULL;
    ff7a:	4604      	mov	r4, r0
    ff7c:	b338      	cbz	r0, ffce <uwb_wcs_local_to_master64+0x56>
    delta = ((dtu_time & 0x0FFFFFFFFFFUL) - wcs->local_epoch.lo) & 0x0FFFFFFFFFFUL;
    ff7e:	6980      	ldr	r0, [r0, #24]
    ff80:	7f21      	ldrb	r1, [r4, #28]
    ff82:	1a10      	subs	r0, r2, r0
    ff84:	eb63 0101 	sbc.w	r1, r3, r1
    if (wcs->status.valid) {
    ff88:	7823      	ldrb	r3, [r4, #0]
    ff8a:	075b      	lsls	r3, r3, #29
    delta = ((dtu_time & 0x0FFFFFFFFFFUL) - wcs->local_epoch.lo) & 0x0FFFFFFFFFFUL;
    ff8c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    if (wcs->status.valid) {
    ff90:	d517      	bpl.n	ffc2 <uwb_wcs_local_to_master64+0x4a>
        interval = DPL_FLOAT64_DIV(DPL_FLOAT64_U64_TO_F64(delta), DPL_FLOAT64_INIT(MYNEWT_VAL(UWB_WCS_DTU)));
    ff92:	f00e fbdb 	bl	1e74c <__aeabi_ul2d>
    ff96:	a310      	add	r3, pc, #64	; (adr r3, ffd8 <uwb_wcs_local_to_master64+0x60>)
    ff98:	e9d3 2300 	ldrd	r2, r3, [r3]
    ff9c:	f00e fd36 	bl	1ea0c <__aeabi_ddiv>
        master_lo40 = (uint64_t) DPL_FLOAT64_INT(uwb_wcs_prediction(wcs->states.array, interval));
    ffa0:	ec41 0b10 	vmov	d0, r0, r1
    ffa4:	f104 0020 	add.w	r0, r4, #32
    ffa8:	f7ff ffaa 	bl	ff00 <uwb_wcs_prediction>
    ffac:	ec51 0b10 	vmov	r0, r1, d0
    ffb0:	f00e ffb2 	bl	1ef18 <__aeabi_d2lz>
    ffb4:	4603      	mov	r3, r0
    return (wcs->master_epoch.timestamp & 0xFFFFFF0000000000UL) + master_lo40;
    ffb6:	6962      	ldr	r2, [r4, #20]
    ffb8:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    ffbc:	4618      	mov	r0, r3
    ffbe:	4411      	add	r1, r2
}
    ffc0:	bd10      	pop	{r4, pc}
        master_lo40 = wcs->master_epoch.lo + delta;
    ffc2:	6923      	ldr	r3, [r4, #16]
    ffc4:	7d22      	ldrb	r2, [r4, #20]
    ffc6:	181b      	adds	r3, r3, r0
    ffc8:	eb42 0101 	adc.w	r1, r2, r1
    ffcc:	e7f3      	b.n	ffb6 <uwb_wcs_local_to_master64+0x3e>
    if(!wcs) return 0xffffffffffffffffULL;
    ffce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ffd2:	4601      	mov	r1, r0
    ffd4:	e7f4      	b.n	ffc0 <uwb_wcs_local_to_master64+0x48>
    ffd6:	bf00      	nop
    ffd8:	00000000 	.word	0x00000000
    ffdc:	422e8480 	.word	0x422e8480

0000ffe0 <uwb_wcs_local_to_master>:
{
    ffe0:	b508      	push	{r3, lr}
    assert(wcs);
    ffe2:	4601      	mov	r1, r0
    ffe4:	b918      	cbnz	r0, ffee <uwb_wcs_local_to_master+0xe>
    ffe6:	4603      	mov	r3, r0
    ffe8:	4602      	mov	r2, r0
    ffea:	f7fc fc07 	bl	c7fc <__assert_func>
    return uwb_wcs_local_to_master64(wcs, dtu_time) & 0x0FFFFFFFFFFUL;
    ffee:	f7ff ffc3 	bl	ff78 <uwb_wcs_local_to_master64>
}
    fff2:	b2c9      	uxtb	r1, r1
    fff4:	bd08      	pop	{r3, pc}

0000fff6 <uwb_wcs_read_systime_master64>:
{
    fff6:	b570      	push	{r4, r5, r6, lr}
    struct uwb_ccp_instance *ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(inst, UWBEXT_CCP);
    fff8:	2101      	movs	r1, #1
{
    fffa:	4604      	mov	r4, r0
    struct uwb_ccp_instance *ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(inst, UWBEXT_CCP);
    fffc:	f7f8 fd06 	bl	8a0c <uwb_mac_find_cb_inst_ptr>
    struct uwb_wcs_instance *wcs = ccp->wcs;
   10000:	6e85      	ldr	r5, [r0, #104]	; 0x68
    return uwb_wcs_local_to_master64(wcs, uwb_read_systime(inst));
   10002:	4620      	mov	r0, r4
   10004:	f7ff ff1e 	bl	fe44 <uwb_read_systime>
   10008:	4602      	mov	r2, r0
   1000a:	460b      	mov	r3, r1
   1000c:	4628      	mov	r0, r5
}
   1000e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return uwb_wcs_local_to_master64(wcs, uwb_read_systime(inst));
   10012:	f7ff bfb1 	b.w	ff78 <uwb_wcs_local_to_master64>
	...

00010018 <uwb_wcs_pkg_init>:
 *
 * @return void
 */
void
uwb_wcs_pkg_init(void)
{
   10018:	b538      	push	{r3, r4, r5, lr}
    int i;
    struct uwb_dev * udev;
    struct uwb_ccp_instance * ccp;
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    printf("{\"utime\": %"PRIu32",\"msg\": \"uwb_wcs_pkg_init\"}\n",
   1001a:	f000 fc8b 	bl	10934 <dpl_cputime_get32>
   1001e:	4601      	mov	r1, r0
   10020:	480a      	ldr	r0, [pc, #40]	; (1004c <uwb_wcs_pkg_init+0x34>)
   10022:	f000 fc0b 	bl	1083c <printf>
           dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
#endif

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
   10026:	2500      	movs	r5, #0
        udev = uwb_dev_idx_lookup(i);
   10028:	4628      	mov	r0, r5
   1002a:	f7f8 fc7b 	bl	8924 <uwb_dev_idx_lookup>
        if (!udev) {
   1002e:	b148      	cbz	r0, 10044 <uwb_wcs_pkg_init+0x2c>
            continue;
        }
#if MYNEWT_VAL(UWB_CCP_ENABLED)
        ccp = (struct uwb_ccp_instance *)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_CCP);
   10030:	2101      	movs	r1, #1
   10032:	f7f8 fceb 	bl	8a0c <uwb_mac_find_cb_inst_ptr>
        if (!ccp) {
   10036:	4604      	mov	r4, r0
   10038:	b120      	cbz	r0, 10044 <uwb_wcs_pkg_init+0x2c>
            continue;
        }
        ccp->wcs = uwb_wcs_init(NULL, ccp);
   1003a:	4601      	mov	r1, r0
   1003c:	2000      	movs	r0, #0
   1003e:	f7ff ff0b 	bl	fe58 <uwb_wcs_init>
   10042:	66a0      	str	r0, [r4, #104]	; 0x68
    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
   10044:	3501      	adds	r5, #1
   10046:	2d03      	cmp	r5, #3
   10048:	d1ee      	bne.n	10028 <uwb_wcs_pkg_init+0x10>
        wcs_chrdev_create(ccp->wcs);
#endif /* __KERNEL__ */
#endif
    }

}
   1004a:	bd38      	pop	{r3, r4, r5, pc}
   1004c:	00020984 	.word	0x00020984

00010050 <uwb_wcs_pkg_down>:
 *
 * @return void
 */
int
uwb_wcs_pkg_down(int reason)
{
   10050:	b570      	push	{r4, r5, r6, lr}
    int i;
    struct uwb_dev * udev;
    struct uwb_ccp_instance * ccp;

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
   10052:	2400      	movs	r4, #0
        if (!ccp) {
            continue;
        }
        if (ccp->wcs) {
            uwb_wcs_free(ccp->wcs);
            ccp->wcs = 0;
   10054:	4626      	mov	r6, r4
        udev = uwb_dev_idx_lookup(i);
   10056:	4620      	mov	r0, r4
   10058:	f7f8 fc64 	bl	8924 <uwb_dev_idx_lookup>
        if (!udev) {
   1005c:	b148      	cbz	r0, 10072 <uwb_wcs_pkg_down+0x22>
        ccp = (struct uwb_ccp_instance *)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_CCP);
   1005e:	2101      	movs	r1, #1
   10060:	f7f8 fcd4 	bl	8a0c <uwb_mac_find_cb_inst_ptr>
        if (!ccp) {
   10064:	4605      	mov	r5, r0
   10066:	b120      	cbz	r0, 10072 <uwb_wcs_pkg_down+0x22>
        if (ccp->wcs) {
   10068:	6e80      	ldr	r0, [r0, #104]	; 0x68
   1006a:	b110      	cbz	r0, 10072 <uwb_wcs_pkg_down+0x22>
            uwb_wcs_free(ccp->wcs);
   1006c:	f7ff ff0e 	bl	fe8c <uwb_wcs_free>
            ccp->wcs = 0;
   10070:	66ae      	str	r6, [r5, #104]	; 0x68
    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
   10072:	3401      	adds	r4, #1
   10074:	2c03      	cmp	r4, #3
   10076:	d1ee      	bne.n	10056 <uwb_wcs_pkg_down+0x6>
        }
#endif
    }

    return 0;
}
   10078:	2000      	movs	r0, #0
   1007a:	bd70      	pop	{r4, r5, r6, pc}

0001007c <calloc>:
{
	void *ptr;
        int nb;

        nb = sizeof(size_t) * 4;
        if (size >= SIZE_MAX >> nb || nmemb >= SIZE_MAX >> nb) {
   1007c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   10080:	4299      	cmp	r1, r3
{
   10082:	b513      	push	{r0, r1, r4, lr}
        if (size >= SIZE_MAX >> nb || nmemb >= SIZE_MAX >> nb) {
   10084:	d810      	bhi.n	100a8 <calloc+0x2c>
   10086:	4298      	cmp	r0, r3
   10088:	d80e      	bhi.n	100a8 <calloc+0x2c>
            return NULL;
        }
	size *= nmemb;
   1008a:	fb00 f201 	mul.w	r2, r0, r1
	ptr = malloc(size);
   1008e:	4610      	mov	r0, r2
   10090:	9201      	str	r2, [sp, #4]
   10092:	f000 f867 	bl	10164 <malloc>
	if (ptr)
   10096:	4604      	mov	r4, r0
   10098:	b118      	cbz	r0, 100a2 <calloc+0x26>
		memset(ptr, 0, size);
   1009a:	9a01      	ldr	r2, [sp, #4]
   1009c:	2100      	movs	r1, #0
   1009e:	f000 f8f4 	bl	1028a <memset>

	return ptr;
}
   100a2:	4620      	mov	r0, r4
   100a4:	b002      	add	sp, #8
   100a6:	bd10      	pop	{r4, pc}
            return NULL;
   100a8:	2400      	movs	r4, #0
   100aa:	e7fa      	b.n	100a2 <calloc+0x26>

000100ac <malloc_lock_nop>:
    },
    &__malloc_head,
    &__malloc_head
};

static bool malloc_lock_nop() {return true;}
   100ac:	2001      	movs	r0, #1
   100ae:	4770      	bx	lr

000100b0 <malloc_unlock_nop>:
static void malloc_unlock_nop() {}
   100b0:	4770      	bx	lr
	...

000100b4 <__free_block.isra.0>:
static struct free_arena_header *__free_block(struct free_arena_header *ah)
{
    struct free_arena_header *pah, *nah;

    pah = ah->a.prev;
    nah = ah->a.next;
   100b4:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    if (pah->a.type == ARENA_TYPE_FREE &&
   100b8:	6819      	ldr	r1, [r3, #0]
   100ba:	2901      	cmp	r1, #1
static struct free_arena_header *__free_block(struct free_arena_header *ah)
   100bc:	b510      	push	{r4, lr}
    if (pah->a.type == ARENA_TYPE_FREE &&
   100be:	d11b      	bne.n	100f8 <__free_block.isra.0+0x44>
        (char *)pah + pah->a.size == (char *)ah) {
   100c0:	685c      	ldr	r4, [r3, #4]
   100c2:	1919      	adds	r1, r3, r4
    if (pah->a.type == ARENA_TYPE_FREE &&
   100c4:	4288      	cmp	r0, r1
   100c6:	d117      	bne.n	100f8 <__free_block.isra.0+0x44>
        /* Coalesce into the previous block */
        pah->a.size += ah->a.size;
   100c8:	6841      	ldr	r1, [r0, #4]
   100ca:	4421      	add	r1, r4
        pah->a.next = nah;
   100cc:	e9c3 1201 	strd	r1, r2, [r3, #4]
        nah->a.prev = pah;
   100d0:	60d3      	str	r3, [r2, #12]
        ah->next_free->prev_free = ah;
    }

    /* In either of the previous cases, we might be able to merge
       with the subsequent block... */
    if (nah->a.type == ARENA_TYPE_FREE &&
   100d2:	6811      	ldr	r1, [r2, #0]
   100d4:	2901      	cmp	r1, #1
   100d6:	d10e      	bne.n	100f6 <__free_block.isra.0+0x42>
        (char *)ah + ah->a.size == (char *)nah) {
   100d8:	6858      	ldr	r0, [r3, #4]
   100da:	1819      	adds	r1, r3, r0
    if (nah->a.type == ARENA_TYPE_FREE &&
   100dc:	428a      	cmp	r2, r1
   100de:	d10a      	bne.n	100f6 <__free_block.isra.0+0x42>
        ah->a.size += nah->a.size;
   100e0:	6851      	ldr	r1, [r2, #4]
   100e2:	4401      	add	r1, r0
   100e4:	6059      	str	r1, [r3, #4]
    an = ah->next_free;
   100e6:	e9d2 3104 	ldrd	r3, r1, [r2, #16]
    ap->next_free = an;
   100ea:	610b      	str	r3, [r1, #16]
    an->prev_free = ap;
   100ec:	6159      	str	r1, [r3, #20]
    an = ah->a.next;
   100ee:	e9d2 3102 	ldrd	r3, r1, [r2, #8]
    ap->a.next = an;
   100f2:	608b      	str	r3, [r1, #8]
    an->a.prev = ap;
   100f4:	60d9      	str	r1, [r3, #12]
        remove_from_chains(nah);
    }

    /* Return the block that contains the called block */
    return ah;
}
   100f6:	bd10      	pop	{r4, pc}
        ah->a.type = ARENA_TYPE_FREE;
   100f8:	2301      	movs	r3, #1
   100fa:	6003      	str	r3, [r0, #0]
        ah->next_free = __malloc_head.next_free;
   100fc:	4b04      	ldr	r3, [pc, #16]	; (10110 <__free_block.isra.0+0x5c>)
   100fe:	6919      	ldr	r1, [r3, #16]
        ah->prev_free = &__malloc_head;
   10100:	e9c0 1304 	strd	r1, r3, [r0, #16]
        __malloc_head.next_free = ah;
   10104:	6118      	str	r0, [r3, #16]
        ah->next_free->prev_free = ah;
   10106:	6903      	ldr	r3, [r0, #16]
   10108:	6158      	str	r0, [r3, #20]
   1010a:	4603      	mov	r3, r0
   1010c:	e7e1      	b.n	100d2 <__free_block.isra.0+0x1e>
   1010e:	bf00      	nop
   10110:	20001394 	.word	0x20001394

00010114 <add_malloc_block>:
void add_malloc_block(void *buf, size_t size)
{
    struct free_arena_header *fp = buf;
    struct free_arena_header *pah;

    if (size < sizeof(struct free_arena_header))
   10114:	2917      	cmp	r1, #23
{
   10116:	b510      	push	{r4, lr}
   10118:	4604      	mov	r4, r0
    if (size < sizeof(struct free_arena_header))
   1011a:	d91b      	bls.n	10154 <add_malloc_block+0x40>
        return; // Too small.

    /* Insert the block into the management chains.  We need to set
       up the size and the main block list pointer, the rest of
       the work is logically identical to free(). */
    fp->a.type = ARENA_TYPE_FREE;
   1011c:	2301      	movs	r3, #1
    fp->a.size = size;
   1011e:	e9c0 3100 	strd	r3, r1, [r0]

    if (!malloc_lock())
   10122:	4b0d      	ldr	r3, [pc, #52]	; (10158 <add_malloc_block+0x44>)
   10124:	681b      	ldr	r3, [r3, #0]
   10126:	4798      	blx	r3
   10128:	b1a0      	cbz	r0, 10154 <add_malloc_block+0x40>

    /* We need to insert this into the main block list in the proper
       place -- this list is required to be sorted.  Since we most likely
       get memory assignments in ascending order, search backwards for
       the proper place. */
    for (pah = __malloc_head.a.prev; pah->a.type != ARENA_TYPE_HEAD;
   1012a:	4b0c      	ldr	r3, [pc, #48]	; (1015c <add_malloc_block+0x48>)
         pah = pah->a.prev) {
   1012c:	68db      	ldr	r3, [r3, #12]
    for (pah = __malloc_head.a.prev; pah->a.type != ARENA_TYPE_HEAD;
   1012e:	681a      	ldr	r2, [r3, #0]
   10130:	2a02      	cmp	r2, #2
   10132:	d001      	beq.n	10138 <add_malloc_block+0x24>
        if (pah < fp)
   10134:	429c      	cmp	r4, r3
   10136:	d9f9      	bls.n	1012c <add_malloc_block+0x18>
            break;
    }

    /* Now pah points to the node that should be the predecessor of
       the new node */
    fp->a.next = pah->a.next;
   10138:	689a      	ldr	r2, [r3, #8]
    fp->a.prev = pah;
   1013a:	e9c4 2302 	strd	r2, r3, [r4, #8]
    pah->a.next = fp;
   1013e:	609c      	str	r4, [r3, #8]
    fp->a.next->a.prev = fp;
   10140:	68a3      	ldr	r3, [r4, #8]

    /* Insert into the free chain and coalesce with adjacent blocks */
    fp = __free_block(fp);
   10142:	4620      	mov	r0, r4
    fp->a.next->a.prev = fp;
   10144:	60dc      	str	r4, [r3, #12]
    fp = __free_block(fp);
   10146:	f7ff ffb5 	bl	100b4 <__free_block.isra.0>

    malloc_unlock();
   1014a:	4b05      	ldr	r3, [pc, #20]	; (10160 <add_malloc_block+0x4c>)
}
   1014c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    malloc_unlock();
   10150:	681b      	ldr	r3, [r3, #0]
   10152:	4718      	bx	r3
}
   10154:	bd10      	pop	{r4, pc}
   10156:	bf00      	nop
   10158:	200013ac 	.word	0x200013ac
   1015c:	20001394 	.word	0x20001394
   10160:	200013b0 	.word	0x200013b0

00010164 <malloc>:
{
   10164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size == 0 || size > (SIZE_MAX - sizeof(struct arena_header))) {
   10166:	1e43      	subs	r3, r0, #1
   10168:	3312      	adds	r3, #18
   1016a:	d902      	bls.n	10172 <malloc+0xe>
        return NULL;
   1016c:	2400      	movs	r4, #0
}
   1016e:	4620      	mov	r0, r4
   10170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!malloc_lock())
   10172:	4b1f      	ldr	r3, [pc, #124]	; (101f0 <malloc+0x8c>)
    size = (size + 2 * sizeof(struct arena_header) - 1) & ARENA_SIZE_MASK;
   10174:	301f      	adds	r0, #31
    if (!malloc_lock())
   10176:	681b      	ldr	r3, [r3, #0]
    size = (size + 2 * sizeof(struct arena_header) - 1) & ARENA_SIZE_MASK;
   10178:	f020 040f 	bic.w	r4, r0, #15
    if (!malloc_lock())
   1017c:	4798      	blx	r3
   1017e:	2800      	cmp	r0, #0
   10180:	d0f4      	beq.n	1016c <malloc+0x8>
    for (fp = __malloc_head.next_free; fp->a.type != ARENA_TYPE_HEAD;
   10182:	4d1c      	ldr	r5, [pc, #112]	; (101f4 <malloc+0x90>)
   10184:	6928      	ldr	r0, [r5, #16]
   10186:	6803      	ldr	r3, [r0, #0]
   10188:	2b02      	cmp	r3, #2
   1018a:	d106      	bne.n	1019a <malloc+0x36>
        more_mem = _sbrk(size);
   1018c:	4620      	mov	r0, r4
   1018e:	f7f7 fff3 	bl	8178 <_sbrk>
        if (more_mem != (void *)-1) {
   10192:	1c43      	adds	r3, r0, #1
   10194:	d128      	bne.n	101e8 <malloc+0x84>
   10196:	2400      	movs	r4, #0
   10198:	e01b      	b.n	101d2 <malloc+0x6e>
        if (fp->a.size >= size) {
   1019a:	6841      	ldr	r1, [r0, #4]
        nfp->next_free = fpn = fp->next_free;
   1019c:	6902      	ldr	r2, [r0, #16]
        if (fp->a.size >= size) {
   1019e:	42a1      	cmp	r1, r4
   101a0:	d320      	bcc.n	101e4 <malloc+0x80>
    if (fsize >= size + 2 * sizeof(struct arena_header)) {
   101a2:	f104 0320 	add.w	r3, r4, #32
   101a6:	4299      	cmp	r1, r3
        nfp->prev_free = fpp = fp->prev_free;
   101a8:	6945      	ldr	r5, [r0, #20]
    if (fsize >= size + 2 * sizeof(struct arena_header)) {
   101aa:	d316      	bcc.n	101da <malloc+0x76>
        nfp = (struct free_arena_header *)((char *)fp + size);
   101ac:	1903      	adds	r3, r0, r4
        na = fp->a.next;
   101ae:	6886      	ldr	r6, [r0, #8]
        nfp->a.size = fsize - size;
   101b0:	1b09      	subs	r1, r1, r4
        nfp->a.type = ARENA_TYPE_FREE;
   101b2:	2701      	movs	r7, #1
   101b4:	5107      	str	r7, [r0, r4]
        nfp->a.size = fsize - size;
   101b6:	6059      	str	r1, [r3, #4]
        fp->a.type = ARENA_TYPE_USED;
   101b8:	2100      	movs	r1, #0
        fp->a.size = size;
   101ba:	e9c0 1400 	strd	r1, r4, [r0]
        nfp->a.next = na;
   101be:	e9c3 6002 	strd	r6, r0, [r3, #8]
        na->a.prev = nfp;
   101c2:	60f3      	str	r3, [r6, #12]
        fp->a.next = nfp;
   101c4:	6083      	str	r3, [r0, #8]
        nfp->prev_free = fpp = fp->prev_free;
   101c6:	e9c3 2504 	strd	r2, r5, [r3, #16]
        fpn->prev_free = nfp;
   101ca:	6153      	str	r3, [r2, #20]
        fpp->next_free = nfp;
   101cc:	612b      	str	r3, [r5, #16]
    return (void *)(&fp->a + 1);
   101ce:	f100 0410 	add.w	r4, r0, #16
    malloc_unlock();
   101d2:	4b09      	ldr	r3, [pc, #36]	; (101f8 <malloc+0x94>)
   101d4:	681b      	ldr	r3, [r3, #0]
   101d6:	4798      	blx	r3
    return result;
   101d8:	e7c9      	b.n	1016e <malloc+0xa>
        fp->a.type = ARENA_TYPE_USED; /* Allocate the whole block */
   101da:	2300      	movs	r3, #0
   101dc:	6003      	str	r3, [r0, #0]
    ap->next_free = an;
   101de:	612a      	str	r2, [r5, #16]
    an->prev_free = ap;
   101e0:	6155      	str	r5, [r2, #20]
}
   101e2:	e7f4      	b.n	101ce <malloc+0x6a>
        nfp->next_free = fpn = fp->next_free;
   101e4:	4610      	mov	r0, r2
   101e6:	e7ce      	b.n	10186 <malloc+0x22>
            add_malloc_block(more_mem, size);
   101e8:	4621      	mov	r1, r4
   101ea:	f7ff ff93 	bl	10114 <add_malloc_block>
            goto retry_alloc;
   101ee:	e7c9      	b.n	10184 <malloc+0x20>
   101f0:	200013ac 	.word	0x200013ac
   101f4:	20001394 	.word	0x20001394
   101f8:	200013b0 	.word	0x200013b0

000101fc <free>:

void free(void *ptr)
{
   101fc:	b510      	push	{r4, lr}
    struct free_arena_header *ah;

    if (!ptr)
   101fe:	4604      	mov	r4, r0
   10200:	b160      	cbz	r0, 1021c <free+0x20>

#ifdef DEBUG_MALLOC
    assert(ah->a.type == ARENA_TYPE_USED);
#endif

    if (!malloc_lock())
   10202:	4b07      	ldr	r3, [pc, #28]	; (10220 <free+0x24>)
   10204:	681b      	ldr	r3, [r3, #0]
   10206:	4798      	blx	r3
   10208:	b140      	cbz	r0, 1021c <free+0x20>
        return;

    /* Merge into adjacent free blocks */
    ah = __free_block(ah);
   1020a:	f1a4 0010 	sub.w	r0, r4, #16
   1020e:	f7ff ff51 	bl	100b4 <__free_block.isra.0>
    malloc_unlock();
   10212:	4b04      	ldr	r3, [pc, #16]	; (10224 <free+0x28>)
}
   10214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    malloc_unlock();
   10218:	681b      	ldr	r3, [r3, #0]
   1021a:	4718      	bx	r3
}
   1021c:	bd10      	pop	{r4, pc}
   1021e:	bf00      	nop
   10220:	200013ac 	.word	0x200013ac
   10224:	200013b0 	.word	0x200013b0

00010228 <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7)
    asm (".syntax unified                   \n"
   10228:	b470      	push	{r4, r5, r6}
   1022a:	f04f 0500 	mov.w	r5, #0
   1022e:	f022 0603 	bic.w	r6, r2, #3
   10232:	e005      	b.n	10240 <test1>

00010234 <loop1>:
   10234:	5943      	ldr	r3, [r0, r5]
   10236:	594c      	ldr	r4, [r1, r5]
   10238:	42a3      	cmp	r3, r4
   1023a:	d104      	bne.n	10246 <res1>
   1023c:	f105 0504 	add.w	r5, r5, #4

00010240 <test1>:
   10240:	42b5      	cmp	r5, r6
   10242:	d1f7      	bne.n	10234 <loop1>
   10244:	e00d      	b.n	10262 <test2>

00010246 <res1>:
   10246:	ba1b      	rev	r3, r3
   10248:	ba24      	rev	r4, r4
   1024a:	1b1b      	subs	r3, r3, r4
   1024c:	bf8c      	ite	hi
   1024e:	2301      	movhi	r3, #1
   10250:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
   10254:	e009      	b.n	1026a <done>

00010256 <loop2>:
   10256:	5d43      	ldrb	r3, [r0, r5]
   10258:	5d4c      	ldrb	r4, [r1, r5]
   1025a:	1b1b      	subs	r3, r3, r4
   1025c:	d105      	bne.n	1026a <done>
   1025e:	f105 0501 	add.w	r5, r5, #1

00010262 <test2>:
   10262:	4295      	cmp	r5, r2
   10264:	d1f7      	bne.n	10256 <loop2>
   10266:	f04f 0300 	mov.w	r3, #0

0001026a <done>:
   1026a:	4618      	mov	r0, r3
   1026c:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
   1026e:	4770      	bx	lr

00010270 <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
   10270:	e001      	b.n	10276 <test1>

00010272 <loop1>:
   10272:	588b      	ldr	r3, [r1, r2]
   10274:	5083      	str	r3, [r0, r2]

00010276 <test1>:
   10276:	3a04      	subs	r2, #4
   10278:	d5fb      	bpl.n	10272 <loop1>
   1027a:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
   1027e:	e001      	b.n	10284 <test2>

00010280 <loop2>:
   10280:	5c8b      	ldrb	r3, [r1, r2]
   10282:	5483      	strb	r3, [r0, r2]

00010284 <test2>:
   10284:	3a01      	subs	r2, #1
   10286:	d5fb      	bpl.n	10280 <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
   10288:	4770      	bx	lr

0001028a <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
   1028a:	b530      	push	{r4, r5, lr}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
   1028c:	4605      	mov	r5, r0
   1028e:	b2c9      	uxtb	r1, r1
   10290:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   10294:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   10298:	18ab      	adds	r3, r5, r2
   1029a:	2403      	movs	r4, #3
   1029c:	4023      	ands	r3, r4
   1029e:	1ad3      	subs	r3, r2, r3
   102a0:	d40b      	bmi.n	102ba <memset+0x30>
   102a2:	e001      	b.n	102a8 <memset+0x1e>
   102a4:	3a01      	subs	r2, #1
   102a6:	54a9      	strb	r1, [r5, r2]
   102a8:	429a      	cmp	r2, r3
   102aa:	d1fb      	bne.n	102a4 <memset+0x1a>
   102ac:	e000      	b.n	102b0 <memset+0x26>
   102ae:	50a9      	str	r1, [r5, r2]
   102b0:	3a04      	subs	r2, #4
   102b2:	d5fc      	bpl.n	102ae <memset+0x24>
   102b4:	3204      	adds	r2, #4
   102b6:	e000      	b.n	102ba <memset+0x30>
   102b8:	54a9      	strb	r1, [r5, r2]
   102ba:	3a01      	subs	r2, #1
   102bc:	d5fc      	bpl.n	102b8 <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
   102be:	bd30      	pop	{r4, r5, pc}

000102c0 <strcmp>:
 */

#include <string.h>

int strcmp(const char *s1, const char *s2)
{
   102c0:	b510      	push	{r4, lr}
   102c2:	4602      	mov	r2, r0
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;

	while (1) {
		d = (int)(ch = *c1++) - (int)*c2++;
   102c4:	f812 4b01 	ldrb.w	r4, [r2], #1
   102c8:	f811 3b01 	ldrb.w	r3, [r1], #1
		if (d || !ch)
   102cc:	1ae0      	subs	r0, r4, r3
   102ce:	d101      	bne.n	102d4 <strcmp+0x14>
   102d0:	2c00      	cmp	r4, #0
   102d2:	d1f7      	bne.n	102c4 <strcmp+0x4>
			break;
	}

	return d;
}
   102d4:	bd10      	pop	{r4, pc}

000102d6 <strncpy>:
 */

#include <string.h>

char *strncpy(char *dst, const char *src, size_t n)
{
   102d6:	b510      	push	{r4, lr}
   102d8:	4604      	mov	r4, r0
	char *q = dst;
	const char *p = src;
	char ch;

	while (n) {
   102da:	b132      	cbz	r2, 102ea <strncpy+0x14>
		n--;
		*q++ = ch = *p++;
   102dc:	f811 3b01 	ldrb.w	r3, [r1], #1
   102e0:	f800 3b01 	strb.w	r3, [r0], #1
		n--;
   102e4:	3a01      	subs	r2, #1
		if (!ch)
   102e6:	2b00      	cmp	r3, #0
   102e8:	d1f7      	bne.n	102da <strncpy+0x4>
			break;
	}

	/* The specs say strncpy() fills the entire buffer with NUL.  Sigh. */
	memset(q, 0, n);
   102ea:	2100      	movs	r1, #0
   102ec:	f7ff ffcd 	bl	1028a <memset>

	return dst;
}
   102f0:	4620      	mov	r0, r4
   102f2:	bd10      	pop	{r4, pc}

000102f4 <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
   102f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
   102f8:	6856      	ldr	r6, [r2, #4]
    while (num / d >= p->base)
   102fa:	f892 a003 	ldrb.w	sl, [r2, #3]
{
   102fe:	b085      	sub	sp, #20
   10300:	4680      	mov	r8, r0
   10302:	4689      	mov	r9, r1
   10304:	4617      	mov	r7, r2
    unsigned long long int d = 1;
   10306:	2501      	movs	r5, #1
   10308:	2400      	movs	r4, #0
    while (num / d >= p->base)
   1030a:	4623      	mov	r3, r4
   1030c:	462a      	mov	r2, r5
   1030e:	4640      	mov	r0, r8
   10310:	4649      	mov	r1, r9
   10312:	f00e fde9 	bl	1eee8 <__aeabi_uldivmod>
   10316:	4550      	cmp	r0, sl
   10318:	f171 0300 	sbcs.w	r3, r1, #0
   1031c:	d209      	bcs.n	10332 <ui2a+0x3e>
    int n = 0;
   1031e:	f04f 0b00 	mov.w	fp, #0
        d *= p->base;
    while (d != 0) {
   10322:	ea55 0304 	orrs.w	r3, r5, r4
   10326:	d10a      	bne.n	1033e <ui2a+0x4a>
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
            ++n;
        }
    }
    *bf = 0;
   10328:	2300      	movs	r3, #0
   1032a:	7033      	strb	r3, [r6, #0]
}
   1032c:	b005      	add	sp, #20
   1032e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        d *= p->base;
   10332:	fb0a f304 	mul.w	r3, sl, r4
   10336:	fba5 540a 	umull	r5, r4, r5, sl
   1033a:	441c      	add	r4, r3
   1033c:	e7e5      	b.n	1030a <ui2a+0x16>
        unsigned long long  dgt = num / d;
   1033e:	462a      	mov	r2, r5
   10340:	4623      	mov	r3, r4
   10342:	4640      	mov	r0, r8
   10344:	4649      	mov	r1, r9
   10346:	f00e fdcf 	bl	1eee8 <__aeabi_uldivmod>
   1034a:	e9cd 1200 	strd	r1, r2, [sp]
   1034e:	4682      	mov	sl, r0
        d /= p->base;
   10350:	78fa      	ldrb	r2, [r7, #3]
   10352:	9302      	str	r3, [sp, #8]
   10354:	4628      	mov	r0, r5
   10356:	2300      	movs	r3, #0
   10358:	4621      	mov	r1, r4
   1035a:	9203      	str	r2, [sp, #12]
   1035c:	f00e fdc4 	bl	1eee8 <__aeabi_uldivmod>
        if (n || dgt > 0 || d == 0) {
   10360:	f1bb 0f00 	cmp.w	fp, #0
   10364:	d108      	bne.n	10378 <ui2a+0x84>
   10366:	45a8      	cmp	r8, r5
   10368:	eb79 0304 	sbcs.w	r3, r9, r4
   1036c:	d204      	bcs.n	10378 <ui2a+0x84>
   1036e:	9a03      	ldr	r2, [sp, #12]
   10370:	4295      	cmp	r5, r2
   10372:	f174 0300 	sbcs.w	r3, r4, #0
   10376:	d210      	bcs.n	1039a <ui2a+0xa6>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   10378:	9b00      	ldr	r3, [sp, #0]
   1037a:	f1ba 0f0a 	cmp.w	sl, #10
   1037e:	f173 0300 	sbcs.w	r3, r3, #0
   10382:	d30f      	bcc.n	103a4 <ui2a+0xb0>
   10384:	78bb      	ldrb	r3, [r7, #2]
   10386:	f013 0f04 	tst.w	r3, #4
   1038a:	bf14      	ite	ne
   1038c:	2337      	movne	r3, #55	; 0x37
   1038e:	2357      	moveq	r3, #87	; 0x57
   10390:	4453      	add	r3, sl
   10392:	f806 3b01 	strb.w	r3, [r6], #1
            ++n;
   10396:	f10b 0b01 	add.w	fp, fp, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1039a:	e9dd 8901 	ldrd	r8, r9, [sp, #4]
   1039e:	4605      	mov	r5, r0
   103a0:	460c      	mov	r4, r1
   103a2:	e7be      	b.n	10322 <ui2a+0x2e>
   103a4:	2330      	movs	r3, #48	; 0x30
   103a6:	e7f3      	b.n	10390 <ui2a+0x9c>

000103a8 <i2a>:

static void i2a(long long int num, struct param *p)
{
    if (num < 0) {
   103a8:	2900      	cmp	r1, #0
   103aa:	da06      	bge.n	103ba <i2a+0x12>
        num = -num;
        p->sign = 1;
   103ac:	7893      	ldrb	r3, [r2, #2]
        num = -num;
   103ae:	4240      	negs	r0, r0
        p->sign = 1;
   103b0:	f043 0301 	orr.w	r3, r3, #1
        num = -num;
   103b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
   103b8:	7093      	strb	r3, [r2, #2]
    }
    ui2a(num, p);
   103ba:	f7ff bf9b 	b.w	102f4 <ui2a>

000103be <putf>:
    *nump = num;
    return ch;
}

static int putf(FILE *putp, char c)
{
   103be:	b507      	push	{r0, r1, r2, lr}
    return stream->vmt->read(stream, (char*)buf, size*nmemb) / size;
}

__extern_inline size_t fwrite(const void *buf, size_t size, size_t nmemb, FILE *stream)
{
    if (stream->vmt->write == NULL) return 0;
   103c0:	6803      	ldr	r3, [r0, #0]
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
}

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
   103c2:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
   103c6:	681b      	ldr	r3, [r3, #0]
   103c8:	b91b      	cbnz	r3, 103d2 <putf+0x14>
    if (fputc(c, putp) == EOF)
        return 0;
   103ca:	2000      	movs	r0, #0
    else
        return 1;
}
   103cc:	b003      	add	sp, #12
   103ce:	f85d fb04 	ldr.w	pc, [sp], #4
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
   103d2:	2201      	movs	r2, #1
   103d4:	f10d 0107 	add.w	r1, sp, #7
   103d8:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
   103da:	2801      	cmp	r0, #1
   103dc:	d0f6      	beq.n	103cc <putf+0xe>
   103de:	e7f4      	b.n	103ca <putf+0xc>

000103e0 <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
   103e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unsigned written = 0;
    char ch;
    int n = p->width;
    char *bf = p->bf;
   103e4:	684b      	ldr	r3, [r1, #4]
    int n = p->width;
   103e6:	780c      	ldrb	r4, [r1, #0]
{
   103e8:	4607      	mov	r7, r0
   103ea:	460e      	mov	r6, r1

    /* Number of filling characters */
    while (*bf++ && n > 0)
   103ec:	f813 2b01 	ldrb.w	r2, [r3], #1
   103f0:	b10a      	cbz	r2, 103f6 <putchw+0x16>
   103f2:	2c00      	cmp	r4, #0
   103f4:	d152      	bne.n	1049c <putchw+0xbc>
        n--;
    if (p->sign)
   103f6:	78b3      	ldrb	r3, [r6, #2]
   103f8:	07d9      	lsls	r1, r3, #31
        n--;
    if (p->alt && p->base == 16)
   103fa:	8873      	ldrh	r3, [r6, #2]
   103fc:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   10400:	b29b      	uxth	r3, r3
   10402:	f241 0202 	movw	r2, #4098	; 0x1002
        n--;
   10406:	bf48      	it	mi
   10408:	f104 34ff 	addmi.w	r4, r4, #4294967295	; 0xffffffff
    if (p->alt && p->base == 16)
   1040c:	4293      	cmp	r3, r2
   1040e:	d147      	bne.n	104a0 <putchw+0xc0>
        n -= 2;
   10410:	3c02      	subs	r4, #2
    else if (p->alt && p->base == 8)
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
   10412:	6833      	ldr	r3, [r6, #0]
   10414:	4d38      	ldr	r5, [pc, #224]	; (104f8 <putchw+0x118>)
   10416:	401d      	ands	r5, r3
   10418:	2d00      	cmp	r5, #0
   1041a:	d150      	bne.n	104be <putchw+0xde>
   1041c:	46a0      	mov	r8, r4
        while (n-- > 0)
   1041e:	f1b8 0f00 	cmp.w	r8, #0
   10422:	dc44      	bgt.n	104ae <putchw+0xce>
   10424:	1e63      	subs	r3, r4, #1
   10426:	2c00      	cmp	r4, #0
   10428:	bfac      	ite	ge
   1042a:	1b1c      	subge	r4, r3, r4
   1042c:	461c      	movlt	r4, r3
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
   1042e:	78b3      	ldrb	r3, [r6, #2]
   10430:	07da      	lsls	r2, r3, #31
   10432:	d504      	bpl.n	1043e <putchw+0x5e>
        written += putf(putp, '-');
   10434:	212d      	movs	r1, #45	; 0x2d
   10436:	4638      	mov	r0, r7
   10438:	f7ff ffc1 	bl	103be <putf>
   1043c:	4405      	add	r5, r0

    /* Alternate */
    if (p->alt && p->base == 16) {
   1043e:	8873      	ldrh	r3, [r6, #2]
   10440:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   10444:	b29b      	uxth	r3, r3
   10446:	f241 0202 	movw	r2, #4098	; 0x1002
   1044a:	4293      	cmp	r3, r2
   1044c:	d139      	bne.n	104c2 <putchw+0xe2>
        written += putf(putp, '0');
   1044e:	2130      	movs	r1, #48	; 0x30
   10450:	4638      	mov	r0, r7
   10452:	f7ff ffb4 	bl	103be <putf>
        written += putf(putp, (p->uc ? 'X' : 'x'));
   10456:	78b3      	ldrb	r3, [r6, #2]
   10458:	f013 0f04 	tst.w	r3, #4
        written += putf(putp, '0');
   1045c:	4405      	add	r5, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
   1045e:	bf14      	ite	ne
   10460:	2158      	movne	r1, #88	; 0x58
   10462:	2178      	moveq	r1, #120	; 0x78
    } else if (p->alt && p->base == 8) {
        written += putf(putp, '0');
   10464:	4638      	mov	r0, r7
   10466:	f7ff ffaa 	bl	103be <putf>
   1046a:	4405      	add	r5, r0
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
   1046c:	7873      	ldrb	r3, [r6, #1]
   1046e:	b143      	cbz	r3, 10482 <putchw+0xa2>
   10470:	46a0      	mov	r8, r4
        while (n-- > 0)
   10472:	f1b8 0f00 	cmp.w	r8, #0
   10476:	dc2a      	bgt.n	104ce <putchw+0xee>
   10478:	1e63      	subs	r3, r4, #1
   1047a:	2c00      	cmp	r4, #0
   1047c:	bfac      	ite	ge
   1047e:	1b1c      	subge	r4, r3, r4
   10480:	461c      	movlt	r4, r3
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
   10482:	f8d6 8004 	ldr.w	r8, [r6, #4]
    while ((ch = *bf++))
   10486:	f818 1b01 	ldrb.w	r1, [r8], #1
   1048a:	bb41      	cbnz	r1, 104de <putchw+0xfe>
        written += putf(putp, ch);

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
   1048c:	78b3      	ldrb	r3, [r6, #2]
   1048e:	071b      	lsls	r3, r3, #28
   10490:	d501      	bpl.n	10496 <putchw+0xb6>
        while (n-- > 0)
   10492:	2c00      	cmp	r4, #0
   10494:	dc28      	bgt.n	104e8 <putchw+0x108>
            written += putf(putp, ' ');
    }
    
    return written;
}
   10496:	4628      	mov	r0, r5
   10498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        n--;
   1049c:	3c01      	subs	r4, #1
   1049e:	e7a5      	b.n	103ec <putchw+0xc>
    else if (p->alt && p->base == 8)
   104a0:	f640 0202 	movw	r2, #2050	; 0x802
   104a4:	4293      	cmp	r3, r2
        n--;
   104a6:	bf08      	it	eq
   104a8:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
   104ac:	e7b1      	b.n	10412 <putchw+0x32>
            written += putf(putp, ' ');
   104ae:	2120      	movs	r1, #32
   104b0:	4638      	mov	r0, r7
   104b2:	f7ff ff84 	bl	103be <putf>
   104b6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   104ba:	4405      	add	r5, r0
   104bc:	e7af      	b.n	1041e <putchw+0x3e>
    unsigned written = 0;
   104be:	2500      	movs	r5, #0
   104c0:	e7b5      	b.n	1042e <putchw+0x4e>
    } else if (p->alt && p->base == 8) {
   104c2:	f640 0202 	movw	r2, #2050	; 0x802
   104c6:	4293      	cmp	r3, r2
   104c8:	d1d0      	bne.n	1046c <putchw+0x8c>
        written += putf(putp, '0');
   104ca:	2130      	movs	r1, #48	; 0x30
   104cc:	e7ca      	b.n	10464 <putchw+0x84>
            written += putf(putp, '0');
   104ce:	2130      	movs	r1, #48	; 0x30
   104d0:	4638      	mov	r0, r7
   104d2:	f7ff ff74 	bl	103be <putf>
   104d6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   104da:	4405      	add	r5, r0
   104dc:	e7c9      	b.n	10472 <putchw+0x92>
        written += putf(putp, ch);
   104de:	4638      	mov	r0, r7
   104e0:	f7ff ff6d 	bl	103be <putf>
   104e4:	4405      	add	r5, r0
   104e6:	e7ce      	b.n	10486 <putchw+0xa6>
            written += putf(putp, ' ');
   104e8:	2120      	movs	r1, #32
   104ea:	4638      	mov	r0, r7
   104ec:	f7ff ff67 	bl	103be <putf>
   104f0:	3c01      	subs	r4, #1
   104f2:	4405      	add	r5, r0
   104f4:	e7cd      	b.n	10492 <putchw+0xb2>
   104f6:	bf00      	nop
   104f8:	0008ff00 	.word	0x0008ff00

000104fc <tfp_format>:

    return val;
}

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
   104fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10500:	b08b      	sub	sp, #44	; 0x2c
    double d;
    int n;
#endif
    int i;

    p.bf = bf;
   10502:	ae04      	add	r6, sp, #16
{
   10504:	4607      	mov	r7, r0
   10506:	4614      	mov	r4, r2
    p.bf = bf;
   10508:	9603      	str	r6, [sp, #12]
    size_t written = 0;
   1050a:	2500      	movs	r5, #0

    while ((ch = *(fmt++))) {
   1050c:	468a      	mov	sl, r1
   1050e:	f81a 1b01 	ldrb.w	r1, [sl], #1
   10512:	b919      	cbnz	r1, 1051c <tfp_format+0x20>
        }
    }
 abort:;
 
 return written;
}
   10514:	4628      	mov	r0, r5
   10516:	b00b      	add	sp, #44	; 0x2c
   10518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (ch != '%') {
   1051c:	2925      	cmp	r1, #37	; 0x25
   1051e:	d003      	beq.n	10528 <tfp_format+0x2c>
                written += putf(putp, ch);
   10520:	4638      	mov	r0, r7
   10522:	f7ff ff4c 	bl	103be <putf>
   10526:	e0d9      	b.n	106dc <tfp_format+0x1e0>
            p.width = 0;
   10528:	f04f 0300 	mov.w	r3, #0
   1052c:	f8ad 3008 	strh.w	r3, [sp, #8]
            p.sign = 0;
   10530:	f89d 300a 	ldrb.w	r3, [sp, #10]
   10534:	f023 030f 	bic.w	r3, r3, #15
   10538:	f88d 300a 	strb.w	r3, [sp, #10]
            while ((ch = *(fmt++))) {
   1053c:	2300      	movs	r3, #0
   1053e:	461a      	mov	r2, r3
   10540:	4650      	mov	r0, sl
   10542:	f810 1b01 	ldrb.w	r1, [r0], #1
   10546:	b989      	cbnz	r1, 1056c <tfp_format+0x70>
   10548:	b10b      	cbz	r3, 1054e <tfp_format+0x52>
   1054a:	f88d 2009 	strb.w	r2, [sp, #9]
            lng = 0;
   1054e:	2200      	movs	r2, #0
   10550:	4682      	mov	sl, r0
            switch (ch) {
   10552:	2978      	cmp	r1, #120	; 0x78
   10554:	d808      	bhi.n	10568 <tfp_format+0x6c>
   10556:	2962      	cmp	r1, #98	; 0x62
   10558:	d870      	bhi.n	1063c <tfp_format+0x140>
   1055a:	2925      	cmp	r1, #37	; 0x25
   1055c:	d0e0      	beq.n	10520 <tfp_format+0x24>
   1055e:	2958      	cmp	r1, #88	; 0x58
   10560:	f000 80be 	beq.w	106e0 <tfp_format+0x1e4>
   10564:	2900      	cmp	r1, #0
   10566:	d0d5      	beq.n	10514 <tfp_format+0x18>
                v = va_arg(va, void *);
   10568:	4651      	mov	r1, sl
   1056a:	e7cf      	b.n	1050c <tfp_format+0x10>
                switch (ch) {
   1056c:	292d      	cmp	r1, #45	; 0x2d
   1056e:	d012      	beq.n	10596 <tfp_format+0x9a>
   10570:	2930      	cmp	r1, #48	; 0x30
   10572:	d008      	beq.n	10586 <tfp_format+0x8a>
   10574:	2923      	cmp	r1, #35	; 0x23
   10576:	d117      	bne.n	105a8 <tfp_format+0xac>
                    p.alt = 1;
   10578:	f89d 100a 	ldrb.w	r1, [sp, #10]
   1057c:	f041 0102 	orr.w	r1, r1, #2
   10580:	f88d 100a 	strb.w	r1, [sp, #10]
                    continue;
   10584:	e005      	b.n	10592 <tfp_format+0x96>
                    if (!p.left) {
   10586:	f89d 100a 	ldrb.w	r1, [sp, #10]
   1058a:	0709      	lsls	r1, r1, #28
   1058c:	d401      	bmi.n	10592 <tfp_format+0x96>
   1058e:	2301      	movs	r3, #1
                        p.lz = 1;
   10590:	461a      	mov	r2, r3
   10592:	4682      	mov	sl, r0
   10594:	e7d4      	b.n	10540 <tfp_format+0x44>
                    p.left = 1;
   10596:	f89d 300a 	ldrb.w	r3, [sp, #10]
   1059a:	f043 0308 	orr.w	r3, r3, #8
   1059e:	f88d 300a 	strb.w	r3, [sp, #10]
                    p.lz = 0;
   105a2:	2200      	movs	r2, #0
                    continue;
   105a4:	2301      	movs	r3, #1
   105a6:	e7f4      	b.n	10592 <tfp_format+0x96>
   105a8:	b10b      	cbz	r3, 105ae <tfp_format+0xb2>
   105aa:	f88d 2009 	strb.w	r2, [sp, #9]
            if (ch == '*') {
   105ae:	292a      	cmp	r1, #42	; 0x2a
   105b0:	d11d      	bne.n	105ee <tfp_format+0xf2>
            val = va_arg(*va, int);
   105b2:	f854 3b04 	ldr.w	r3, [r4], #4
                if (i > UCHAR_MAX) {
   105b6:	2bff      	cmp	r3, #255	; 0xff
   105b8:	dd03      	ble.n	105c2 <tfp_format+0xc6>
                    p.width = UCHAR_MAX;
   105ba:	23ff      	movs	r3, #255	; 0xff
                    p.width = i;
   105bc:	f88d 3008 	strb.w	r3, [sp, #8]
   105c0:	e001      	b.n	105c6 <tfp_format+0xca>
                } else if (i > 0) {
   105c2:	2b00      	cmp	r3, #0
   105c4:	dcfa      	bgt.n	105bc <tfp_format+0xc0>
                ch = *(fmt++);
   105c6:	7801      	ldrb	r1, [r0, #0]
   105c8:	f10a 0002 	add.w	r0, sl, #2
            if (ch == 'l') {
   105cc:	296c      	cmp	r1, #108	; 0x6c
   105ce:	d133      	bne.n	10638 <tfp_format+0x13c>
                ch = *(fmt++);
   105d0:	7801      	ldrb	r1, [r0, #0]
                if (ch == 'l') {
   105d2:	296c      	cmp	r1, #108	; 0x6c
                    ch = *(fmt++);
   105d4:	bf0d      	iteet	eq
   105d6:	7841      	ldrbeq	r1, [r0, #1]
                ch = *(fmt++);
   105d8:	3001      	addne	r0, #1
                lng = 1;
   105da:	2201      	movne	r2, #1
                    ch = *(fmt++);
   105dc:	3002      	addeq	r0, #2
                    lng = 2;
   105de:	bf08      	it	eq
   105e0:	2202      	moveq	r2, #2
            if (ch == 'z') {
   105e2:	297a      	cmp	r1, #122	; 0x7a
   105e4:	d1b4      	bne.n	10550 <tfp_format+0x54>
                ch = *(fmt++);
   105e6:	4682      	mov	sl, r0
   105e8:	f81a 1b01 	ldrb.w	r1, [sl], #1
   105ec:	e7b1      	b.n	10552 <tfp_format+0x56>
            } else if (ch >= '0' && ch <= '9') {
   105ee:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   105f2:	2b09      	cmp	r3, #9
   105f4:	d8ea      	bhi.n	105cc <tfp_format+0xd0>
    int num = 0;
   105f6:	2200      	movs	r2, #0
        num = num * base + digit;
   105f8:	f04f 0c0a 	mov.w	ip, #10
   105fc:	e003      	b.n	10606 <tfp_format+0x10a>
        ch = *p++;
   105fe:	f810 1b01 	ldrb.w	r1, [r0], #1
        num = num * base + digit;
   10602:	fb0c 3202 	mla	r2, ip, r2, r3
    if (ch >= '0' && ch <= '9')
   10606:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   1060a:	fa5f fe83 	uxtb.w	lr, r3
   1060e:	f1be 0f09 	cmp.w	lr, #9
   10612:	d9f4      	bls.n	105fe <tfp_format+0x102>
    else if (ch >= 'a' && ch <= 'f')
   10614:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
   10618:	2b05      	cmp	r3, #5
   1061a:	d806      	bhi.n	1062a <tfp_format+0x12e>
        return ch - 'a' + 10;
   1061c:	f1a1 0357 	sub.w	r3, r1, #87	; 0x57
        if (digit > base)
   10620:	2b0a      	cmp	r3, #10
   10622:	d0ec      	beq.n	105fe <tfp_format+0x102>
    *nump = num;
   10624:	f88d 2008 	strb.w	r2, [sp, #8]
    return ch;
   10628:	e7d0      	b.n	105cc <tfp_format+0xd0>
    else if (ch >= 'A' && ch <= 'F')
   1062a:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   1062e:	2b05      	cmp	r3, #5
   10630:	d8f8      	bhi.n	10624 <tfp_format+0x128>
        return ch - 'A' + 10;
   10632:	f1a1 0337 	sub.w	r3, r1, #55	; 0x37
   10636:	e7f3      	b.n	10620 <tfp_format+0x124>
            lng = 0;
   10638:	2200      	movs	r2, #0
   1063a:	e7d2      	b.n	105e2 <tfp_format+0xe6>
            switch (ch) {
   1063c:	f1a1 0363 	sub.w	r3, r1, #99	; 0x63
   10640:	2b15      	cmp	r3, #21
   10642:	d891      	bhi.n	10568 <tfp_format+0x6c>
   10644:	a001      	add	r0, pc, #4	; (adr r0, 1064c <tfp_format+0x150>)
   10646:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   1064a:	bf00      	nop
   1064c:	00010761 	.word	0x00010761
   10650:	000106ad 	.word	0x000106ad
   10654:	00010569 	.word	0x00010569
   10658:	0001077d 	.word	0x0001077d
   1065c:	00010569 	.word	0x00010569
   10660:	00010569 	.word	0x00010569
   10664:	000106ad 	.word	0x000106ad
   10668:	00010569 	.word	0x00010569
   1066c:	00010569 	.word	0x00010569
   10670:	00010569 	.word	0x00010569
   10674:	00010569 	.word	0x00010569
   10678:	00010569 	.word	0x00010569
   1067c:	00010711 	.word	0x00010711
   10680:	00010723 	.word	0x00010723
   10684:	00010569 	.word	0x00010569
   10688:	00010569 	.word	0x00010569
   1068c:	00010769 	.word	0x00010769
   10690:	00010569 	.word	0x00010569
   10694:	000106a5 	.word	0x000106a5
   10698:	00010569 	.word	0x00010569
   1069c:	00010569 	.word	0x00010569
   106a0:	000106e1 	.word	0x000106e1
                p.base = 10;
   106a4:	230a      	movs	r3, #10
                p.base = 8;
   106a6:	f88d 300b 	strb.w	r3, [sp, #11]
   106aa:	e026      	b.n	106fa <tfp_format+0x1fe>
                p.base = 10;
   106ac:	230a      	movs	r3, #10
   106ae:	f88d 300b 	strb.w	r3, [sp, #11]
    switch (lng) {
   106b2:	b14a      	cbz	r2, 106c8 <tfp_format+0x1cc>
   106b4:	2a01      	cmp	r2, #1
   106b6:	d007      	beq.n	106c8 <tfp_format+0x1cc>
            val = va_arg(*va, long long);
   106b8:	1de2      	adds	r2, r4, #7
   106ba:	f022 0207 	bic.w	r2, r2, #7
   106be:	4614      	mov	r4, r2
   106c0:	6851      	ldr	r1, [r2, #4]
   106c2:	f854 0b08 	ldr.w	r0, [r4], #8
   106c6:	e002      	b.n	106ce <tfp_format+0x1d2>
            val = va_arg(*va, long);
   106c8:	f854 0b04 	ldr.w	r0, [r4], #4
   106cc:	17c1      	asrs	r1, r0, #31
                i2a(intarg(lng, 1, &va), &p);
   106ce:	aa02      	add	r2, sp, #8
   106d0:	f7ff fe6a 	bl	103a8 <i2a>
                written += putchw(putp, &p);
   106d4:	a902      	add	r1, sp, #8
   106d6:	4638      	mov	r0, r7
   106d8:	f7ff fe82 	bl	103e0 <putchw>
                written += putf(putp, ch);
   106dc:	4405      	add	r5, r0
                break;
   106de:	e743      	b.n	10568 <tfp_format+0x6c>
                p.uc = (ch == 'X');
   106e0:	3958      	subs	r1, #88	; 0x58
   106e2:	424b      	negs	r3, r1
   106e4:	414b      	adcs	r3, r1
   106e6:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   106ea:	009b      	lsls	r3, r3, #2
   106ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   106f0:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
   106f4:	430b      	orrs	r3, r1
   106f6:	f8ad 300a 	strh.w	r3, [sp, #10]
    switch (lng) {
   106fa:	b15a      	cbz	r2, 10714 <tfp_format+0x218>
   106fc:	2a01      	cmp	r2, #1
   106fe:	d009      	beq.n	10714 <tfp_format+0x218>
            val = va_arg(*va, unsigned long long);
   10700:	1de2      	adds	r2, r4, #7
   10702:	f022 0207 	bic.w	r2, r2, #7
   10706:	4614      	mov	r4, r2
   10708:	6851      	ldr	r1, [r2, #4]
   1070a:	f854 0b08 	ldr.w	r0, [r4], #8
   1070e:	e004      	b.n	1071a <tfp_format+0x21e>
                p.base = 8;
   10710:	2308      	movs	r3, #8
   10712:	e7c8      	b.n	106a6 <tfp_format+0x1aa>
            val = va_arg(*va, unsigned long);
   10714:	f854 0b04 	ldr.w	r0, [r4], #4
   10718:	2100      	movs	r1, #0
                ui2a(intarg(lng, 0, &va), &p);
   1071a:	aa02      	add	r2, sp, #8
   1071c:	f7ff fdea 	bl	102f4 <ui2a>
                written += putchw(putp, &p);
   10720:	e7d8      	b.n	106d4 <tfp_format+0x1d8>
                ui2a((uintptr_t)v, &p);
   10722:	aa02      	add	r2, sp, #8
                p.base = 16;
   10724:	2310      	movs	r3, #16
                ui2a((uintptr_t)v, &p);
   10726:	f854 0b04 	ldr.w	r0, [r4], #4
                p.base = 16;
   1072a:	f88d 300b 	strb.w	r3, [sp, #11]
                ui2a((uintptr_t)v, &p);
   1072e:	2100      	movs	r1, #0
   10730:	f7ff fde0 	bl	102f4 <ui2a>
                p.width = 2 * sizeof(void*);
   10734:	f44f 7384 	mov.w	r3, #264	; 0x108
                written += putf(putp, '0');
   10738:	2130      	movs	r1, #48	; 0x30
   1073a:	4638      	mov	r0, r7
                p.width = 2 * sizeof(void*);
   1073c:	f8ad 3008 	strh.w	r3, [sp, #8]
                written += putf(putp, '0');
   10740:	f7ff fe3d 	bl	103be <putf>
                written += putf(putp, 'x');
   10744:	2178      	movs	r1, #120	; 0x78
                written += putf(putp, '0');
   10746:	4681      	mov	r9, r0
                written += putf(putp, 'x');
   10748:	4638      	mov	r0, r7
   1074a:	f7ff fe38 	bl	103be <putf>
                written += putchw(putp, &p);
   1074e:	a902      	add	r1, sp, #8
                written += putf(putp, 'x');
   10750:	4680      	mov	r8, r0
                written += putchw(putp, &p);
   10752:	4638      	mov	r0, r7
   10754:	f7ff fe44 	bl	103e0 <putchw>
   10758:	4405      	add	r5, r0
   1075a:	444d      	add	r5, r9
   1075c:	4445      	add	r5, r8
                break;
   1075e:	e703      	b.n	10568 <tfp_format+0x6c>
                written += putf(putp, (char)(va_arg(va, int)));
   10760:	f854 1b04 	ldr.w	r1, [r4], #4
   10764:	b2c9      	uxtb	r1, r1
   10766:	e6db      	b.n	10520 <tfp_format+0x24>
                p.bf = va_arg(va, char *);
   10768:	f854 3b04 	ldr.w	r3, [r4], #4
   1076c:	9303      	str	r3, [sp, #12]
                written += putchw(putp, &p);
   1076e:	a902      	add	r1, sp, #8
   10770:	4638      	mov	r0, r7
   10772:	f7ff fe35 	bl	103e0 <putchw>
                p.bf = bf;
   10776:	9603      	str	r6, [sp, #12]
                written += putchw(putp, &p);
   10778:	4405      	add	r5, r0
                break;
   1077a:	e6f5      	b.n	10568 <tfp_format+0x6c>
                d = va_arg(va, double);
   1077c:	3407      	adds	r4, #7
   1077e:	f024 0407 	bic.w	r4, r4, #7
   10782:	e8f4 8902 	ldrd	r8, r9, [r4], #8
                p.base = 10;
   10786:	230a      	movs	r3, #10
                n = d;
   10788:	4649      	mov	r1, r9
   1078a:	4640      	mov	r0, r8
                p.base = 10;
   1078c:	f88d 300b 	strb.w	r3, [sp, #11]
                n = d;
   10790:	f00e fac2 	bl	1ed18 <__aeabi_d2iz>
                i2a(n, &p);
   10794:	aa02      	add	r2, sp, #8
   10796:	17c1      	asrs	r1, r0, #31
                n = d;
   10798:	4683      	mov	fp, r0
                i2a(n, &p);
   1079a:	f7ff fe05 	bl	103a8 <i2a>
                if (d < 0.0) {
   1079e:	2200      	movs	r2, #0
   107a0:	2300      	movs	r3, #0
   107a2:	4640      	mov	r0, r8
   107a4:	4649      	mov	r1, r9
   107a6:	f00e fa79 	bl	1ec9c <__aeabi_dcmplt>
   107aa:	b128      	cbz	r0, 107b8 <tfp_format+0x2bc>
                    p.sign = 1;
   107ac:	f89d 300a 	ldrb.w	r3, [sp, #10]
   107b0:	f043 0301 	orr.w	r3, r3, #1
   107b4:	f88d 300a 	strb.w	r3, [sp, #10]
                p.left = 0;
   107b8:	f89d 300a 	ldrb.w	r3, [sp, #10]
   107bc:	f36f 03c3 	bfc	r3, #3, #1
   107c0:	f88d 300a 	strb.w	r3, [sp, #10]
                if (p.width >= 4) {
   107c4:	f89d 3008 	ldrb.w	r3, [sp, #8]
   107c8:	2b03      	cmp	r3, #3
                    p.width -= 4;
   107ca:	bf86      	itte	hi
   107cc:	3b04      	subhi	r3, #4
   107ce:	b2db      	uxtbhi	r3, r3
                    p.width = 0;
   107d0:	2300      	movls	r3, #0
                written += putchw(putp, &p);
   107d2:	a902      	add	r1, sp, #8
   107d4:	4638      	mov	r0, r7
   107d6:	f88d 3008 	strb.w	r3, [sp, #8]
   107da:	f7ff fe01 	bl	103e0 <putchw>
   107de:	9001      	str	r0, [sp, #4]
                n = (d-n)*1000;
   107e0:	4658      	mov	r0, fp
   107e2:	f00d ff7f 	bl	1e6e4 <__aeabi_i2d>
   107e6:	4602      	mov	r2, r0
   107e8:	460b      	mov	r3, r1
   107ea:	4640      	mov	r0, r8
   107ec:	4649      	mov	r1, r9
   107ee:	f00d fe2b 	bl	1e448 <__aeabi_dsub>
   107f2:	4b10      	ldr	r3, [pc, #64]	; (10834 <tfp_format+0x338>)
   107f4:	2200      	movs	r2, #0
   107f6:	f00d ffdf 	bl	1e7b8 <__aeabi_dmul>
   107fa:	f00e fa8d 	bl	1ed18 <__aeabi_d2iz>
                i2a(n, &p);
   107fe:	aa02      	add	r2, sp, #8
   10800:	17c1      	asrs	r1, r0, #31
   10802:	f7ff fdd1 	bl	103a8 <i2a>
                p.width = 3;
   10806:	f240 3303 	movw	r3, #771	; 0x303
   1080a:	f8ad 3008 	strh.w	r3, [sp, #8]
                p.sign = 0;
   1080e:	f89d 300a 	ldrb.w	r3, [sp, #10]
                putf(putp, '.');
   10812:	212e      	movs	r1, #46	; 0x2e
                p.sign = 0;
   10814:	f36f 0300 	bfc	r3, #0, #1
                putf(putp, '.');
   10818:	4638      	mov	r0, r7
                p.sign = 0;
   1081a:	f88d 300a 	strb.w	r3, [sp, #10]
                putf(putp, '.');
   1081e:	f7ff fdce 	bl	103be <putf>
                written += putchw(putp, &p);
   10822:	a902      	add	r1, sp, #8
   10824:	4638      	mov	r0, r7
   10826:	f7ff fddb 	bl	103e0 <putchw>
   1082a:	9b01      	ldr	r3, [sp, #4]
   1082c:	4403      	add	r3, r0
   1082e:	4618      	mov	r0, r3
   10830:	e754      	b.n	106dc <tfp_format+0x1e0>
   10832:	bf00      	nop
   10834:	408f4000 	.word	0x408f4000

00010838 <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
    return tfp_format(f, fmt, va);
   10838:	f7ff be60 	b.w	104fc <tfp_format>

0001083c <printf>:
    va_end(va);
    return rv;
}

int printf(const char *fmt, ...)
{
   1083c:	b40f      	push	{r0, r1, r2, r3}
   1083e:	b507      	push	{r0, r1, r2, lr}
    return tfp_format(f, fmt, va);
   10840:	4b06      	ldr	r3, [pc, #24]	; (1085c <printf+0x20>)
{
   10842:	aa04      	add	r2, sp, #16
    return tfp_format(f, fmt, va);
   10844:	6818      	ldr	r0, [r3, #0]
{
   10846:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
   1084a:	9201      	str	r2, [sp, #4]
    return tfp_format(f, fmt, va);
   1084c:	f7ff fe56 	bl	104fc <tfp_format>
    int rv = vfprintf(stdout, fmt, va);
    va_end(va);
    return rv;
}
   10850:	b003      	add	sp, #12
   10852:	f85d eb04 	ldr.w	lr, [sp], #4
   10856:	b004      	add	sp, #16
   10858:	4770      	bx	lr
   1085a:	bf00      	nop
   1085c:	000209b8 	.word	0x000209b8

00010860 <vsnprintf>:

int vsnprintf(char *str, size_t size, const char *fmt, va_list va)
{
   10860:	b5f0      	push	{r4, r5, r6, r7, lr}
   10862:	b085      	sub	sp, #20
   10864:	460d      	mov	r5, r1
   10866:	4616      	mov	r6, r2
   10868:	461f      	mov	r7, r3
    struct MemFile state;
    FILE *f = fmemopen_w(&state, str, size);
   1086a:	460a      	mov	r2, r1
{
   1086c:	4604      	mov	r4, r0
    FILE *f = fmemopen_w(&state, str, size);
   1086e:	4601      	mov	r1, r0
   10870:	4668      	mov	r0, sp
   10872:	f000 f835 	bl	108e0 <fmemopen_w>
    tfp_format(f, fmt, va);
   10876:	463a      	mov	r2, r7
   10878:	4631      	mov	r1, r6
   1087a:	f7ff fe3f 	bl	104fc <tfp_format>
    if (size > 0) {
   1087e:	b155      	cbz	r5, 10896 <vsnprintf+0x36>
        if (state.bytes_written < size) {
   10880:	9b02      	ldr	r3, [sp, #8]
   10882:	42ab      	cmp	r3, r5
            *(state.buffer) = '\0';
   10884:	bf34      	ite	cc
   10886:	9a01      	ldrcc	r2, [sp, #4]
        } else {
            str[size - 1] = '\0';
   10888:	1964      	addcs	r4, r4, r5
   1088a:	f04f 0300 	mov.w	r3, #0
            *(state.buffer) = '\0';
   1088e:	bf34      	ite	cc
   10890:	7013      	strbcc	r3, [r2, #0]
            str[size - 1] = '\0';
   10892:	f804 3c01 	strbcs.w	r3, [r4, #-1]
        }
    }
    return state.bytes_written;
}
   10896:	9802      	ldr	r0, [sp, #8]
   10898:	b005      	add	sp, #20
   1089a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001089c <snprintf>:

int snprintf(char *str, size_t size, const char *fmt, ...)
{
   1089c:	b40c      	push	{r2, r3}
   1089e:	b507      	push	{r0, r1, r2, lr}
   108a0:	ab04      	add	r3, sp, #16
   108a2:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list va;
    va_start(va, fmt);
   108a6:	9301      	str	r3, [sp, #4]
    int rv = vsnprintf(str, size, fmt, va);
   108a8:	f7ff ffda 	bl	10860 <vsnprintf>
    va_end(va);
    return rv;
}
   108ac:	b003      	add	sp, #12
   108ae:	f85d eb04 	ldr.w	lr, [sp], #4
   108b2:	b002      	add	sp, #8
   108b4:	4770      	bx	lr

000108b6 <memfile_write>:
#include <stdio.h>

size_t memfile_write(FILE *instance, const char *bp, size_t n)
{
   108b6:	b530      	push	{r4, r5, lr}
    struct MemFile *f = (struct MemFile*)instance;
    size_t i = 0;
   108b8:	2400      	movs	r4, #0
    
    while (n--)
   108ba:	3a01      	subs	r2, #1
   108bc:	d201      	bcs.n	108c2 <memfile_write+0xc>
            i++;
        }
    }
    
    return i;
}
   108be:	4620      	mov	r0, r4
   108c0:	bd30      	pop	{r4, r5, pc}
        f->bytes_written++;
   108c2:	6883      	ldr	r3, [r0, #8]
        if (f->bytes_written <= f->size)
   108c4:	68c5      	ldr	r5, [r0, #12]
        f->bytes_written++;
   108c6:	3301      	adds	r3, #1
        if (f->bytes_written <= f->size)
   108c8:	42ab      	cmp	r3, r5
        f->bytes_written++;
   108ca:	6083      	str	r3, [r0, #8]
        if (f->bytes_written <= f->size)
   108cc:	d8f5      	bhi.n	108ba <memfile_write+0x4>
            *f->buffer++ = *bp++;
   108ce:	6843      	ldr	r3, [r0, #4]
   108d0:	1c5d      	adds	r5, r3, #1
   108d2:	6045      	str	r5, [r0, #4]
   108d4:	f811 5b01 	ldrb.w	r5, [r1], #1
   108d8:	701d      	strb	r5, [r3, #0]
            i++;
   108da:	3401      	adds	r4, #1
   108dc:	e7ed      	b.n	108ba <memfile_write+0x4>
	...

000108e0 <fmemopen_w>:
    &memfile_write,
    NULL
};

FILE *fmemopen_w(struct MemFile* storage, char *buffer, size_t size)
{
   108e0:	b510      	push	{r4, lr}
    storage->file.vmt = &MemFile_methods;
   108e2:	4c03      	ldr	r4, [pc, #12]	; (108f0 <fmemopen_w+0x10>)
    storage->buffer = buffer;
   108e4:	e9c0 4100 	strd	r4, r1, [r0]
    storage->bytes_written = 0;
   108e8:	2100      	movs	r1, #0
    storage->size = size;
   108ea:	e9c0 1202 	strd	r1, r2, [r0, #8]
    return (FILE*)storage;
}
   108ee:	bd10      	pop	{r4, pc}
   108f0:	000209b0 	.word	0x000209b0

000108f4 <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
   108f4:	2000      	movs	r0, #0
   108f6:	4770      	bx	lr

000108f8 <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
   108f8:	b510      	push	{r4, lr}
   108fa:	4608      	mov	r0, r1
   108fc:	4614      	mov	r4, r2
    console_write(bp, n);
   108fe:	4611      	mov	r1, r2
   10900:	f001 f88a 	bl	11a18 <console_write>
    return n;
}
   10904:	4620      	mov	r0, r4
   10906:	bd10      	pop	{r4, pc}

00010908 <dpl_cputime_timer_init>:
    dpl_cputime_delay_ticks(ticks);
}

void
dpl_cputime_timer_init(struct hal_timer *timer, hal_timer_cb fp, void *arg)
{
   10908:	b510      	push	{r4, lr}
   1090a:	4613      	mov	r3, r2
    assert(timer != NULL);
   1090c:	b928      	cbnz	r0, 1091a <dpl_cputime_timer_init+0x12>
   1090e:	2300      	movs	r3, #0
   10910:	461a      	mov	r2, r3
   10912:	4619      	mov	r1, r3
   10914:	4618      	mov	r0, r3
   10916:	f7fb ff71 	bl	c7fc <__assert_func>
    assert(fp != NULL);
   1091a:	2900      	cmp	r1, #0
   1091c:	d0f7      	beq.n	1090e <dpl_cputime_timer_init+0x6>
    hal_timer_set_cb(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), timer, fp, arg);
   1091e:	460a      	mov	r2, r1
}
   10920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hal_timer_set_cb(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), timer, fp, arg);
   10924:	4601      	mov	r1, r0
   10926:	2000      	movs	r0, #0
   10928:	f006 b90a 	b.w	16b40 <hal_timer_set_cb>

0001092c <dpl_cputime_timer_start>:
int
dpl_cputime_timer_start(struct hal_timer *timer, uint32_t cputime)
{
    int rc;

    rc = hal_timer_start_at(timer, cputime);
   1092c:	f006 b91a 	b.w	16b64 <hal_timer_start_at>

00010930 <dpl_cputime_timer_stop>:
}

void
dpl_cputime_timer_stop(struct hal_timer *timer)
{
    hal_timer_stop(timer);
   10930:	f006 b951 	b.w	16bd6 <hal_timer_stop>

00010934 <dpl_cputime_get32>:
uint32_t
dpl_cputime_get32(void)
{
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
   10934:	2000      	movs	r0, #0
   10936:	f006 b8e7 	b.w	16b08 <hal_timer_read>

0001093a <dpl_cputime_delay_ticks>:
{
   1093a:	b510      	push	{r4, lr}
   1093c:	4604      	mov	r4, r0
    until = dpl_cputime_get32() + ticks;
   1093e:	f7ff fff9 	bl	10934 <dpl_cputime_get32>
   10942:	4404      	add	r4, r0
    while ((int32_t)(dpl_cputime_get32() - until) < 0) {
   10944:	f7ff fff6 	bl	10934 <dpl_cputime_get32>
   10948:	1b00      	subs	r0, r0, r4
   1094a:	2800      	cmp	r0, #0
   1094c:	dbfa      	blt.n	10944 <dpl_cputime_delay_ticks+0xa>
}
   1094e:	bd10      	pop	{r4, pc}

00010950 <dpl_cputime_delay_usecs>:
    dpl_cputime_delay_ticks(ticks);
   10950:	f7ff bff3 	b.w	1093a <dpl_cputime_delay_ticks>

00010954 <dpl_cputime_timer_relative>:
{
   10954:	b513      	push	{r0, r1, r4, lr}
    assert(timer != NULL);
   10956:	4603      	mov	r3, r0
{
   10958:	460c      	mov	r4, r1
    assert(timer != NULL);
   1095a:	b918      	cbnz	r0, 10964 <dpl_cputime_timer_relative+0x10>
   1095c:	4602      	mov	r2, r0
   1095e:	4601      	mov	r1, r0
   10960:	f7fb ff4c 	bl	c7fc <__assert_func>
   10964:	9001      	str	r0, [sp, #4]
    cputime = dpl_cputime_get32() + dpl_cputime_usecs_to_ticks(usecs);
   10966:	f7ff ffe5 	bl	10934 <dpl_cputime_get32>
    rc = hal_timer_start_at(timer, cputime);
   1096a:	9b01      	ldr	r3, [sp, #4]
   1096c:	1901      	adds	r1, r0, r4
   1096e:	4618      	mov	r0, r3
}
   10970:	b002      	add	sp, #8
   10972:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    rc = hal_timer_start_at(timer, cputime);
   10976:	f006 b8f5 	b.w	16b64 <hal_timer_start_at>

0001097a <_dpl_mbuf_trailingspace>:
{
    struct dpl_mbuf_pool *omp;

    omp = om->om_omp;

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   1097a:	6882      	ldr	r2, [r0, #8]
   1097c:	8812      	ldrh	r2, [r2, #0]
   1097e:	f100 0310 	add.w	r3, r0, #16
   10982:	4413      	add	r3, r2
      (om->om_data + om->om_len);
   10984:	88c2      	ldrh	r2, [r0, #6]
   10986:	6800      	ldr	r0, [r0, #0]
   10988:	4410      	add	r0, r2
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   1098a:	1a18      	subs	r0, r3, r0
}
   1098c:	b280      	uxth	r0, r0
   1098e:	4770      	bx	lr

00010990 <_dpl_msys_find_pool>:
_dpl_msys_find_pool(uint16_t dsize)
{
    struct dpl_mbuf_pool *pool;

    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   10990:	4907      	ldr	r1, [pc, #28]	; (109b0 <_dpl_msys_find_pool+0x20>)
{
   10992:	b510      	push	{r4, lr}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   10994:	680a      	ldr	r2, [r1, #0]
{
   10996:	4603      	mov	r3, r0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   10998:	4610      	mov	r0, r2
   1099a:	b918      	cbnz	r0, 109a4 <_dpl_msys_find_pool+0x14>
            break;
        }
    }

    if (!pool) {
        pool = STAILQ_LAST(&g_msys_pool_list, dpl_mbuf_pool, omp_next);
   1099c:	b10a      	cbz	r2, 109a2 <_dpl_msys_find_pool+0x12>
   1099e:	6848      	ldr	r0, [r1, #4]
   109a0:	3808      	subs	r0, #8
    }

    return (pool);
}
   109a2:	bd10      	pop	{r4, pc}
        if (dsize <= pool->omp_databuf_len) {
   109a4:	8804      	ldrh	r4, [r0, #0]
   109a6:	429c      	cmp	r4, r3
   109a8:	d2fb      	bcs.n	109a2 <_dpl_msys_find_pool+0x12>
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   109aa:	6880      	ldr	r0, [r0, #8]
   109ac:	e7f5      	b.n	1099a <_dpl_msys_find_pool+0xa>
   109ae:	bf00      	nop
   109b0:	200013c0 	.word	0x200013c0

000109b4 <dpl_mqueue_init>:
{
   109b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    STAILQ_INIT(&mq->mq_head);
   109b6:	2500      	movs	r5, #0
{
   109b8:	4604      	mov	r4, r0
    STAILQ_INIT(&mq->mq_head);
   109ba:	e9c0 5000 	strd	r5, r0, [r0]
{
   109be:	460f      	mov	r7, r1
   109c0:	4616      	mov	r6, r2
    memset(ev, 0, sizeof(*ev));
   109c2:	4629      	mov	r1, r5
   109c4:	2210      	movs	r2, #16
   109c6:	3008      	adds	r0, #8
   109c8:	f7ff fc5f 	bl	1028a <memset>
    ev->ev.ev_arg = arg;
   109cc:	e9c4 7603 	strd	r7, r6, [r4, #12]
    return (dpl_error_t)os_mutex_init(&mu->mu);
   109d0:	f104 0018 	add.w	r0, r4, #24
   109d4:	f7fc fbbe 	bl	d154 <os_mutex_init>
}
   109d8:	4628      	mov	r0, r5
   109da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000109dc <dpl_mqueue_get>:
{
   109dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   109de:	4604      	mov	r4, r0
    return os_arch_save_sr();
   109e0:	f7fb fe52 	bl	c688 <os_arch_save_sr>
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   109e4:	f104 0718 	add.w	r7, r4, #24
    return os_arch_save_sr();
   109e8:	4606      	mov	r6, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   109ea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   109ee:	4638      	mov	r0, r7
   109f0:	f7fc fc0c 	bl	d20c <os_mutex_pend>
    mp = STAILQ_FIRST(&mq->mq_head);
   109f4:	6825      	ldr	r5, [r4, #0]
    if (mp) {
   109f6:	b11d      	cbz	r5, 10a00 <dpl_mqueue_get+0x24>
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
   109f8:	686b      	ldr	r3, [r5, #4]
   109fa:	6023      	str	r3, [r4, #0]
   109fc:	b903      	cbnz	r3, 10a00 <dpl_mqueue_get+0x24>
   109fe:	6064      	str	r4, [r4, #4]
    return (dpl_error_t)os_mutex_release(&mu->mu);
   10a00:	4638      	mov	r0, r7
   10a02:	f7fc fbb1 	bl	d168 <os_mutex_release>
    os_arch_restore_sr(ctx);
   10a06:	4630      	mov	r0, r6
   10a08:	f7fb fe44 	bl	c694 <os_arch_restore_sr>
    if (mp) {
   10a0c:	b105      	cbz	r5, 10a10 <dpl_mqueue_get+0x34>
        m = DPL_MBUF_PKTHDR_TO_MBUF(mp);
   10a0e:	3d10      	subs	r5, #16
}
   10a10:	4628      	mov	r0, r5
   10a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00010a14 <dpl_mqueue_put>:
{
   10a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (!DPL_MBUF_IS_PKTHDR(m)) {
   10a18:	7953      	ldrb	r3, [r2, #5]
   10a1a:	2b07      	cmp	r3, #7
{
   10a1c:	4606      	mov	r6, r0
   10a1e:	460c      	mov	r4, r1
   10a20:	4615      	mov	r5, r2
    if (!DPL_MBUF_IS_PKTHDR(m)) {
   10a22:	d922      	bls.n	10a6a <dpl_mqueue_put+0x56>
    return os_arch_save_sr();
   10a24:	f7fb fe30 	bl	c688 <os_arch_save_sr>
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   10a28:	f106 0718 	add.w	r7, r6, #24
    return os_arch_save_sr();
   10a2c:	4680      	mov	r8, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   10a2e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   10a32:	4638      	mov	r0, r7
   10a34:	f7fc fbea 	bl	d20c <os_mutex_pend>
    STAILQ_INSERT_TAIL(&mq->mq_head, mp, omp_next);
   10a38:	f04f 0900 	mov.w	r9, #0
   10a3c:	6873      	ldr	r3, [r6, #4]
   10a3e:	f8c5 9014 	str.w	r9, [r5, #20]
    mp = DPL_MBUF_PKTHDR(m);
   10a42:	f105 0210 	add.w	r2, r5, #16
    STAILQ_INSERT_TAIL(&mq->mq_head, mp, omp_next);
   10a46:	3514      	adds	r5, #20
   10a48:	601a      	str	r2, [r3, #0]
    return (dpl_error_t)os_mutex_release(&mu->mu);
   10a4a:	4638      	mov	r0, r7
   10a4c:	6075      	str	r5, [r6, #4]
   10a4e:	f7fc fb8b 	bl	d168 <os_mutex_release>
    os_arch_restore_sr(ctx);
   10a52:	4640      	mov	r0, r8
   10a54:	f7fb fe1e 	bl	c694 <os_arch_restore_sr>
    if (evq) {
   10a58:	b14c      	cbz	r4, 10a6e <dpl_mqueue_put+0x5a>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
   10a5a:	4620      	mov	r0, r4
   10a5c:	f106 0108 	add.w	r1, r6, #8
   10a60:	f7fc f9ab 	bl	cdba <os_eventq_put>
    return (0);
   10a64:	4648      	mov	r0, r9
}
   10a66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return (rc);
   10a6a:	2002      	movs	r0, #2
   10a6c:	e7fb      	b.n	10a66 <dpl_mqueue_put+0x52>
    return (0);
   10a6e:	4620      	mov	r0, r4
   10a70:	e7f9      	b.n	10a66 <dpl_mqueue_put+0x52>

00010a72 <dpl_mbuf_pool_init>:

int
dpl_mbuf_pool_init(struct dpl_mbuf_pool *omp, struct dpl_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct dpl_mbuf);
   10a72:	3a10      	subs	r2, #16
   10a74:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
   10a76:	6041      	str	r1, [r0, #4]

    return (0);
}
   10a78:	2000      	movs	r0, #0
   10a7a:	4770      	bx	lr

00010a7c <dpl_mbuf_get>:

struct dpl_mbuf *
dpl_mbuf_get(struct dpl_mbuf_pool *omp, uint16_t leadingspace)
{
   10a7c:	b538      	push	{r3, r4, r5, lr}
    struct dpl_mbuf *om;

    if (leadingspace > omp->omp_databuf_len) {
   10a7e:	8803      	ldrh	r3, [r0, #0]
   10a80:	428b      	cmp	r3, r1
{
   10a82:	4604      	mov	r4, r0
   10a84:	460d      	mov	r5, r1
    if (leadingspace > omp->omp_databuf_len) {
   10a86:	d30c      	bcc.n	10aa2 <dpl_mbuf_get+0x26>
        goto err;
    }

    om = dpl_memblock_get(omp->omp_pool);
   10a88:	6840      	ldr	r0, [r0, #4]
   10a8a:	f000 fa45 	bl	10f18 <dpl_memblock_get>
    if (!om) {
   10a8e:	b138      	cbz	r0, 10aa0 <dpl_mbuf_get+0x24>

    SLIST_NEXT(om, om_next) = NULL;
    om->om_flags = 0;
    om->om_pkthdr_len = 0;
    om->om_len = 0;
    om->om_data = (&om->om_databuf[0] + leadingspace);
   10a90:	f100 0110 	add.w	r1, r0, #16
    SLIST_NEXT(om, om_next) = NULL;
   10a94:	2300      	movs	r3, #0
    om->om_data = (&om->om_databuf[0] + leadingspace);
   10a96:	440d      	add	r5, r1
    SLIST_NEXT(om, om_next) = NULL;
   10a98:	60c3      	str	r3, [r0, #12]
    om->om_flags = 0;
   10a9a:	6043      	str	r3, [r0, #4]
    om->om_data = (&om->om_databuf[0] + leadingspace);
   10a9c:	6005      	str	r5, [r0, #0]
    om->om_omp = omp;
   10a9e:	6084      	str	r4, [r0, #8]

    return (om);
err:
    return (NULL);
}
   10aa0:	bd38      	pop	{r3, r4, r5, pc}
    return (NULL);
   10aa2:	2000      	movs	r0, #0
   10aa4:	e7fc      	b.n	10aa0 <dpl_mbuf_get+0x24>

00010aa6 <dpl_mbuf_get_pkthdr>:

struct dpl_mbuf *
dpl_mbuf_get_pkthdr(struct dpl_mbuf_pool *omp, uint8_t user_pkthdr_len)
{
   10aa6:	b538      	push	{r3, r4, r5, lr}
    struct dpl_mbuf_pkthdr *pkthdr;
    struct dpl_mbuf *om;

    /* User packet header must fit inside mbuf */
    pkthdr_len = user_pkthdr_len + sizeof(struct dpl_mbuf_pkthdr);
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
   10aa8:	8803      	ldrh	r3, [r0, #0]
    pkthdr_len = user_pkthdr_len + sizeof(struct dpl_mbuf_pkthdr);
   10aaa:	f101 0508 	add.w	r5, r1, #8
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
   10aae:	42ab      	cmp	r3, r5
   10ab0:	d30d      	bcc.n	10ace <dpl_mbuf_get_pkthdr+0x28>
   10ab2:	2dff      	cmp	r5, #255	; 0xff
   10ab4:	d80b      	bhi.n	10ace <dpl_mbuf_get_pkthdr+0x28>
        return NULL;
    }

    om = dpl_mbuf_get(omp, 0);
   10ab6:	2100      	movs	r1, #0
   10ab8:	f7ff ffe0 	bl	10a7c <dpl_mbuf_get>
    if (om) {
   10abc:	b130      	cbz	r0, 10acc <dpl_mbuf_get_pkthdr+0x26>
        om->om_pkthdr_len = pkthdr_len;
        om->om_data += pkthdr_len;
   10abe:	6801      	ldr	r1, [r0, #0]
        om->om_pkthdr_len = pkthdr_len;
   10ac0:	7145      	strb	r5, [r0, #5]

        pkthdr = DPL_MBUF_PKTHDR(om);
        pkthdr->omp_len = 0;
   10ac2:	2300      	movs	r3, #0
        pkthdr->omp_flags = 0;
        STAILQ_NEXT(pkthdr, omp_next) = NULL;
   10ac4:	e9c0 3304 	strd	r3, r3, [r0, #16]
        om->om_data += pkthdr_len;
   10ac8:	4429      	add	r1, r5
   10aca:	6001      	str	r1, [r0, #0]
    }

    return om;
}
   10acc:	bd38      	pop	{r3, r4, r5, pc}
        return NULL;
   10ace:	2000      	movs	r0, #0
   10ad0:	e7fc      	b.n	10acc <dpl_mbuf_get_pkthdr+0x26>

00010ad2 <dpl_msys_get_pkthdr>:
    pool = _dpl_msys_find_pool(dsize + total_pkthdr_len);
   10ad2:	3008      	adds	r0, #8
   10ad4:	4408      	add	r0, r1
{
   10ad6:	b510      	push	{r4, lr}
    pool = _dpl_msys_find_pool(dsize + total_pkthdr_len);
   10ad8:	b280      	uxth	r0, r0
{
   10ada:	460c      	mov	r4, r1
    pool = _dpl_msys_find_pool(dsize + total_pkthdr_len);
   10adc:	f7ff ff58 	bl	10990 <_dpl_msys_find_pool>
    if (!pool) {
   10ae0:	b120      	cbz	r0, 10aec <dpl_msys_get_pkthdr+0x1a>
    m = dpl_mbuf_get_pkthdr(pool, user_hdr_len);
   10ae2:	b2e1      	uxtb	r1, r4
}
   10ae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    m = dpl_mbuf_get_pkthdr(pool, user_hdr_len);
   10ae8:	f7ff bfdd 	b.w	10aa6 <dpl_mbuf_get_pkthdr>
}
   10aec:	bd10      	pop	{r4, pc}

00010aee <dpl_mbuf_free>:

int
dpl_mbuf_free(struct dpl_mbuf *om)
{
   10aee:	b508      	push	{r3, lr}
    int rc;

    if (om->om_omp != NULL) {
   10af0:	6883      	ldr	r3, [r0, #8]
{
   10af2:	4601      	mov	r1, r0
    if (om->om_omp != NULL) {
   10af4:	b11b      	cbz	r3, 10afe <dpl_mbuf_free+0x10>
        rc = dpl_memblock_put(om->om_omp->omp_pool, om);
   10af6:	6858      	ldr	r0, [r3, #4]
   10af8:	f000 fa4d 	bl	10f96 <dpl_memblock_put>
    }

    return (0);
err:
    return (rc);
}
   10afc:	bd08      	pop	{r3, pc}
    return (0);
   10afe:	4618      	mov	r0, r3
   10b00:	e7fc      	b.n	10afc <dpl_mbuf_free+0xe>

00010b02 <dpl_mbuf_free_chain>:

int
dpl_mbuf_free_chain(struct dpl_mbuf *om)
{
   10b02:	b510      	push	{r4, lr}
    struct dpl_mbuf *next;
    int rc;

    while (om != NULL) {
   10b04:	b900      	cbnz	r0, 10b08 <dpl_mbuf_free_chain+0x6>
    }

    return (0);
err:
    return (rc);
}
   10b06:	bd10      	pop	{r4, pc}
        next = SLIST_NEXT(om, om_next);
   10b08:	68c4      	ldr	r4, [r0, #12]
        rc = dpl_mbuf_free(om);
   10b0a:	f7ff fff0 	bl	10aee <dpl_mbuf_free>
        if (rc != 0) {
   10b0e:	2800      	cmp	r0, #0
   10b10:	d1f9      	bne.n	10b06 <dpl_mbuf_free_chain+0x4>
        om = next;
   10b12:	4620      	mov	r0, r4
   10b14:	e7f6      	b.n	10b04 <dpl_mbuf_free_chain+0x2>

00010b16 <dpl_mbuf_append>:
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
}

int
dpl_mbuf_append(struct dpl_mbuf *om, const void *data,  uint16_t len)
{
   10b16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10b1a:	460f      	mov	r7, r1
   10b1c:	4615      	mov	r5, r2
    struct dpl_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
   10b1e:	4606      	mov	r6, r0
   10b20:	2800      	cmp	r0, #0
   10b22:	d046      	beq.n	10bb2 <dpl_mbuf_append+0x9c>
        rc = DPL_EINVAL;
        goto err;
    }

    omp = om->om_omp;
   10b24:	f8d0 8008 	ldr.w	r8, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
    while (SLIST_NEXT(last, om_next) != NULL) {
   10b28:	4603      	mov	r3, r0
   10b2a:	4699      	mov	r9, r3
   10b2c:	68db      	ldr	r3, [r3, #12]
   10b2e:	2b00      	cmp	r3, #0
   10b30:	d1fb      	bne.n	10b2a <dpl_mbuf_append+0x14>
        last = SLIST_NEXT(last, om_next);
    }

    remainder = len;
    space = DPL_MBUF_TRAILINGSPACE(last);
   10b32:	4648      	mov	r0, r9
    remainder = len;
   10b34:	462c      	mov	r4, r5
    space = DPL_MBUF_TRAILINGSPACE(last);
   10b36:	f7ff ff20 	bl	1097a <_dpl_mbuf_trailingspace>

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
   10b3a:	b198      	cbz	r0, 10b64 <dpl_mbuf_append+0x4e>
        if (space > remainder) {
   10b3c:	42a8      	cmp	r0, r5
   10b3e:	bfa8      	it	ge
   10b40:	4628      	movge	r0, r5
   10b42:	4604      	mov	r4, r0
            space = remainder;
        }

        memcpy(DPL_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
   10b44:	f8d9 3000 	ldr.w	r3, [r9]
   10b48:	f8b9 0006 	ldrh.w	r0, [r9, #6]
   10b4c:	4622      	mov	r2, r4
   10b4e:	4639      	mov	r1, r7
   10b50:	4418      	add	r0, r3
   10b52:	f7ff fb8d 	bl	10270 <memcpy>

        last->om_len += space;
   10b56:	f8b9 3006 	ldrh.w	r3, [r9, #6]
   10b5a:	4423      	add	r3, r4
        data += space;
   10b5c:	4427      	add	r7, r4
        last->om_len += space;
   10b5e:	f8a9 3006 	strh.w	r3, [r9, #6]
        remainder -= space;
   10b62:	1b2c      	subs	r4, r5, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
   10b64:	2c00      	cmp	r4, #0
   10b66:	dd05      	ble.n	10b74 <dpl_mbuf_append+0x5e>
        new = dpl_mbuf_get(omp, 0);
   10b68:	2100      	movs	r1, #0
   10b6a:	4640      	mov	r0, r8
   10b6c:	f7ff ff86 	bl	10a7c <dpl_mbuf_get>
        if (!new) {
   10b70:	4682      	mov	sl, r0
   10b72:	b938      	cbnz	r0, 10b84 <dpl_mbuf_append+0x6e>
        SLIST_NEXT(last, om_next) = new;
        last = new;
    }

    /* Adjust the packet header length in the buffer */
    if (DPL_MBUF_IS_PKTHDR(om)) {
   10b74:	7973      	ldrb	r3, [r6, #5]
   10b76:	2b07      	cmp	r3, #7
   10b78:	d816      	bhi.n	10ba8 <dpl_mbuf_append+0x92>
        DPL_MBUF_PKTHDR(om)->omp_len += len - remainder;
    }

    if (remainder != 0) {
   10b7a:	1e20      	subs	r0, r4, #0
   10b7c:	bf18      	it	ne
   10b7e:	2001      	movne	r0, #1


    return (0);
err:
    return (rc);
}
   10b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        new->om_len = mynewt_min(omp->omp_databuf_len, remainder);
   10b84:	f8b8 2000 	ldrh.w	r2, [r8]
   10b88:	42a2      	cmp	r2, r4
   10b8a:	bfa8      	it	ge
   10b8c:	4622      	movge	r2, r4
   10b8e:	80c2      	strh	r2, [r0, #6]
        memcpy(DPL_MBUF_DATA(new, void *), data, new->om_len);
   10b90:	4639      	mov	r1, r7
   10b92:	6800      	ldr	r0, [r0, #0]
   10b94:	f7ff fb6c 	bl	10270 <memcpy>
        data += new->om_len;
   10b98:	f8ba 3006 	ldrh.w	r3, [sl, #6]
        SLIST_NEXT(last, om_next) = new;
   10b9c:	f8c9 a00c 	str.w	sl, [r9, #12]
        data += new->om_len;
   10ba0:	441f      	add	r7, r3
        remainder -= new->om_len;
   10ba2:	1ae4      	subs	r4, r4, r3
        SLIST_NEXT(last, om_next) = new;
   10ba4:	46d1      	mov	r9, sl
   10ba6:	e7dd      	b.n	10b64 <dpl_mbuf_append+0x4e>
        DPL_MBUF_PKTHDR(om)->omp_len += len - remainder;
   10ba8:	8a32      	ldrh	r2, [r6, #16]
   10baa:	4415      	add	r5, r2
   10bac:	1b2d      	subs	r5, r5, r4
   10bae:	8235      	strh	r5, [r6, #16]
   10bb0:	e7e3      	b.n	10b7a <dpl_mbuf_append+0x64>
        rc = DPL_EINVAL;
   10bb2:	2002      	movs	r0, #2
   10bb4:	e7e4      	b.n	10b80 <dpl_mbuf_append+0x6a>

00010bb6 <dpl_mbuf_off>:
    return (NULL);
}

struct dpl_mbuf *
dpl_mbuf_off(const struct dpl_mbuf *om, int off, uint16_t *out_off)
{
   10bb6:	b510      	push	{r4, lr}

    /* Cast away const. */
    cur = (struct dpl_mbuf *)om;

    while (1) {
        if (cur == NULL) {
   10bb8:	b120      	cbz	r0, 10bc4 <dpl_mbuf_off+0xe>
            return NULL;
        }

        next = SLIST_NEXT(cur, om_next);

        if (cur->om_len > off ||
   10bba:	88c4      	ldrh	r4, [r0, #6]
        next = SLIST_NEXT(cur, om_next);
   10bbc:	68c3      	ldr	r3, [r0, #12]
        if (cur->om_len > off ||
   10bbe:	428c      	cmp	r4, r1
   10bc0:	dd01      	ble.n	10bc6 <dpl_mbuf_off+0x10>
            (cur->om_len == off && next == NULL)) {

            *out_off = off;
   10bc2:	8011      	strh	r1, [r2, #0]
        }

        off -= cur->om_len;
        cur = next;
    }
}
   10bc4:	bd10      	pop	{r4, pc}
        if (cur->om_len > off ||
   10bc6:	d101      	bne.n	10bcc <dpl_mbuf_off+0x16>
            (cur->om_len == off && next == NULL)) {
   10bc8:	2b00      	cmp	r3, #0
   10bca:	d0fa      	beq.n	10bc2 <dpl_mbuf_off+0xc>
        off -= cur->om_len;
   10bcc:	1b09      	subs	r1, r1, r4
        next = SLIST_NEXT(cur, om_next);
   10bce:	4618      	mov	r0, r3
        if (cur == NULL) {
   10bd0:	e7f2      	b.n	10bb8 <dpl_mbuf_off+0x2>

00010bd2 <dpl_mbuf_appendfrom>:
{
   10bd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10bd4:	4605      	mov	r5, r0
   10bd6:	4608      	mov	r0, r1
   10bd8:	4611      	mov	r1, r2
    src_cur_om = dpl_mbuf_off(src, src_off, &src_cur_off);
   10bda:	f10d 0206 	add.w	r2, sp, #6
{
   10bde:	461f      	mov	r7, r3
    src_cur_om = dpl_mbuf_off(src, src_off, &src_cur_off);
   10be0:	f7ff ffe9 	bl	10bb6 <dpl_mbuf_off>
   10be4:	4606      	mov	r6, r0
    while (len > 0) {
   10be6:	b917      	cbnz	r7, 10bee <dpl_mbuf_appendfrom+0x1c>
    return 0;
   10be8:	4638      	mov	r0, r7
}
   10bea:	b003      	add	sp, #12
   10bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (src_cur_om == NULL) {
   10bee:	b1ae      	cbz	r6, 10c1c <dpl_mbuf_appendfrom+0x4a>
        chunk_sz = mynewt_min(len, src_cur_om->om_len - src_cur_off);
   10bf0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   10bf4:	88f2      	ldrh	r2, [r6, #6]
        rc = dpl_mbuf_append(dst, src_cur_om->om_data + src_cur_off, chunk_sz);
   10bf6:	6831      	ldr	r1, [r6, #0]
        chunk_sz = mynewt_min(len, src_cur_om->om_len - src_cur_off);
   10bf8:	1ad2      	subs	r2, r2, r3
   10bfa:	42ba      	cmp	r2, r7
   10bfc:	bfa8      	it	ge
   10bfe:	463a      	movge	r2, r7
   10c00:	b294      	uxth	r4, r2
        rc = dpl_mbuf_append(dst, src_cur_om->om_data + src_cur_off, chunk_sz);
   10c02:	4622      	mov	r2, r4
   10c04:	4419      	add	r1, r3
   10c06:	4628      	mov	r0, r5
   10c08:	f7ff ff85 	bl	10b16 <dpl_mbuf_append>
        if (rc != 0) {
   10c0c:	2800      	cmp	r0, #0
   10c0e:	d1ec      	bne.n	10bea <dpl_mbuf_appendfrom+0x18>
        len -= chunk_sz;
   10c10:	1b3c      	subs	r4, r7, r4
        src_cur_om = SLIST_NEXT(src_cur_om, om_next);
   10c12:	68f6      	ldr	r6, [r6, #12]
        src_cur_off = 0;
   10c14:	f8ad 0006 	strh.w	r0, [sp, #6]
        len -= chunk_sz;
   10c18:	b2a7      	uxth	r7, r4
        src_cur_off = 0;
   10c1a:	e7e4      	b.n	10be6 <dpl_mbuf_appendfrom+0x14>
            return DPL_EINVAL;
   10c1c:	2002      	movs	r0, #2
   10c1e:	e7e4      	b.n	10bea <dpl_mbuf_appendfrom+0x18>

00010c20 <dpl_mbuf_copydata>:

int
dpl_mbuf_copydata(const struct dpl_mbuf *m, int off, int len, void *dst)
{
   10c20:	b570      	push	{r4, r5, r6, lr}
   10c22:	4604      	mov	r4, r0
    unsigned int count;
    uint8_t *udst;

    if (!len) {
   10c24:	4615      	mov	r5, r2
   10c26:	b952      	cbnz	r2, 10c3e <dpl_mbuf_copydata+0x1e>
        return 0;
   10c28:	2000      	movs	r0, #0
        off = 0;
        m = SLIST_NEXT(m, om_next);
    }

    return (len > 0 ? -1 : 0);
}
   10c2a:	bd70      	pop	{r4, r5, r6, pc}
        if (!m) {
   10c2c:	b914      	cbnz	r4, 10c34 <dpl_mbuf_copydata+0x14>
            return (-1);
   10c2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10c32:	e7fa      	b.n	10c2a <dpl_mbuf_copydata+0xa>
        if (off < m->om_len)
   10c34:	88e2      	ldrh	r2, [r4, #6]
   10c36:	428a      	cmp	r2, r1
   10c38:	dc03      	bgt.n	10c42 <dpl_mbuf_copydata+0x22>
        m = SLIST_NEXT(m, om_next);
   10c3a:	68e4      	ldr	r4, [r4, #12]
        off -= m->om_len;
   10c3c:	1a89      	subs	r1, r1, r2
    while (off > 0) {
   10c3e:	2900      	cmp	r1, #0
   10c40:	dcf4      	bgt.n	10c2c <dpl_mbuf_copydata+0xc>
    while (len > 0 && m != NULL) {
   10c42:	2d00      	cmp	r5, #0
   10c44:	ddf0      	ble.n	10c28 <dpl_mbuf_copydata+0x8>
   10c46:	2c00      	cmp	r4, #0
   10c48:	d0f1      	beq.n	10c2e <dpl_mbuf_copydata+0xe>
        count = mynewt_min(m->om_len - off, len);
   10c4a:	88e6      	ldrh	r6, [r4, #6]
        memcpy(udst, m->om_data + off, count);
   10c4c:	6820      	ldr	r0, [r4, #0]
        count = mynewt_min(m->om_len - off, len);
   10c4e:	1a76      	subs	r6, r6, r1
   10c50:	42ae      	cmp	r6, r5
   10c52:	bfa8      	it	ge
   10c54:	462e      	movge	r6, r5
        memcpy(udst, m->om_data + off, count);
   10c56:	4401      	add	r1, r0
   10c58:	4632      	mov	r2, r6
   10c5a:	4618      	mov	r0, r3
   10c5c:	f7ff fb08 	bl	10270 <memcpy>
   10c60:	4603      	mov	r3, r0
        m = SLIST_NEXT(m, om_next);
   10c62:	68e4      	ldr	r4, [r4, #12]
        len -= count;
   10c64:	1bad      	subs	r5, r5, r6
        udst += count;
   10c66:	4433      	add	r3, r6
        off = 0;
   10c68:	2100      	movs	r1, #0
   10c6a:	e7ea      	b.n	10c42 <dpl_mbuf_copydata+0x22>

00010c6c <dpl_mbuf_adj>:
EXPORT_SYMBOL(dpl_mbuf_copydata);

void
dpl_mbuf_adj(struct dpl_mbuf *mp, int req_len)
{
   10c6c:	b570      	push	{r4, r5, r6, lr}
    int len = req_len;
    struct dpl_mbuf *m;
    int count;

    if ((m = mp) == NULL)
   10c6e:	2800      	cmp	r0, #0
   10c70:	d030      	beq.n	10cd4 <dpl_mbuf_adj+0x68>
        return;
    if (len >= 0) {
   10c72:	2900      	cmp	r1, #0
   10c74:	da1a      	bge.n	10cac <dpl_mbuf_adj+0x40>
         * calculating its length and finding the last mbuf.
         * If the adjustment only affects this mbuf, then just
         * adjust and return.  Otherwise, rescan and truncate
         * after the remaining size.
         */
        len = -len;
   10c76:	424b      	negs	r3, r1
   10c78:	4604      	mov	r4, r0
        count = 0;
   10c7a:	2500      	movs	r5, #0
        for (;;) {
            count += m->om_len;
   10c7c:	88e2      	ldrh	r2, [r4, #6]
   10c7e:	4626      	mov	r6, r4
            if (SLIST_NEXT(m, om_next) == (struct dpl_mbuf *)0)
   10c80:	68e4      	ldr	r4, [r4, #12]
            count += m->om_len;
   10c82:	4415      	add	r5, r2
            if (SLIST_NEXT(m, om_next) == (struct dpl_mbuf *)0)
   10c84:	2c00      	cmp	r4, #0
   10c86:	d1f9      	bne.n	10c7c <dpl_mbuf_adj+0x10>
                break;
            m = SLIST_NEXT(m, om_next);
        }
        if (m->om_len >= len) {
   10c88:	429a      	cmp	r2, r3
            m->om_len -= len;
            if (DPL_MBUF_IS_PKTHDR(mp))
   10c8a:	7944      	ldrb	r4, [r0, #5]
        if (m->om_len >= len) {
   10c8c:	db23      	blt.n	10cd6 <dpl_mbuf_adj+0x6a>
            m->om_len -= len;
   10c8e:	b29b      	uxth	r3, r3
   10c90:	1ad2      	subs	r2, r2, r3
            if (DPL_MBUF_IS_PKTHDR(mp))
   10c92:	2c07      	cmp	r4, #7
            m->om_len -= len;
   10c94:	80f2      	strh	r2, [r6, #6]
            if (DPL_MBUF_IS_PKTHDR(mp))
   10c96:	d91d      	bls.n	10cd4 <dpl_mbuf_adj+0x68>
                DPL_MBUF_PKTHDR(mp)->omp_len -= len;
   10c98:	8a02      	ldrh	r2, [r0, #16]
   10c9a:	1ad3      	subs	r3, r2, r3
   10c9c:	e019      	b.n	10cd2 <dpl_mbuf_adj+0x66>
                m->om_len -= len;
   10c9e:	1ae4      	subs	r4, r4, r3
   10ca0:	80d4      	strh	r4, [r2, #6]
                m->om_data += len;
   10ca2:	6814      	ldr	r4, [r2, #0]
   10ca4:	4423      	add	r3, r4
   10ca6:	6013      	str	r3, [r2, #0]
                len = 0;
   10ca8:	2300      	movs	r3, #0
   10caa:	e00c      	b.n	10cc6 <dpl_mbuf_adj+0x5a>
   10cac:	4602      	mov	r2, r0
   10cae:	460b      	mov	r3, r1
                m->om_len = 0;
   10cb0:	2500      	movs	r5, #0
        while (m != NULL && len > 0) {
   10cb2:	2b00      	cmp	r3, #0
   10cb4:	dd07      	ble.n	10cc6 <dpl_mbuf_adj+0x5a>
            if (m->om_len <= len) {
   10cb6:	88d4      	ldrh	r4, [r2, #6]
   10cb8:	429c      	cmp	r4, r3
   10cba:	dcf0      	bgt.n	10c9e <dpl_mbuf_adj+0x32>
                m->om_len = 0;
   10cbc:	80d5      	strh	r5, [r2, #6]
                m = SLIST_NEXT(m, om_next);
   10cbe:	68d2      	ldr	r2, [r2, #12]
                len -= m->om_len;
   10cc0:	1b1b      	subs	r3, r3, r4
        while (m != NULL && len > 0) {
   10cc2:	2a00      	cmp	r2, #0
   10cc4:	d1f5      	bne.n	10cb2 <dpl_mbuf_adj+0x46>
        if (DPL_MBUF_IS_PKTHDR(mp))
   10cc6:	7942      	ldrb	r2, [r0, #5]
   10cc8:	2a07      	cmp	r2, #7
   10cca:	d903      	bls.n	10cd4 <dpl_mbuf_adj+0x68>
            DPL_MBUF_PKTHDR(mp)->omp_len -= (req_len - len);
   10ccc:	8a02      	ldrh	r2, [r0, #16]
   10cce:	1a51      	subs	r1, r2, r1
   10cd0:	440b      	add	r3, r1
                DPL_MBUF_PKTHDR(mp)->omp_len -= len;
   10cd2:	8203      	strh	r3, [r0, #16]
                break;
            }
            count -= m->om_len;
        }
    }
}
   10cd4:	bd70      	pop	{r4, r5, r6, pc}
        count -= len;
   10cd6:	4429      	add	r1, r5
        if (count < 0)
   10cd8:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
        if (DPL_MBUF_IS_PKTHDR(m))
   10cdc:	2c07      	cmp	r4, #7
            DPL_MBUF_PKTHDR(m)->omp_len = count;
   10cde:	bf88      	it	hi
   10ce0:	8201      	strhhi	r1, [r0, #16]
            if (m->om_len >= count) {
   10ce2:	88c3      	ldrh	r3, [r0, #6]
   10ce4:	428b      	cmp	r3, r1
   10ce6:	4604      	mov	r4, r0
                if (SLIST_NEXT(m, om_next) != NULL) {
   10ce8:	68c0      	ldr	r0, [r0, #12]
            if (m->om_len >= count) {
   10cea:	db07      	blt.n	10cfc <dpl_mbuf_adj+0x90>
                m->om_len = count;
   10cec:	80e1      	strh	r1, [r4, #6]
                if (SLIST_NEXT(m, om_next) != NULL) {
   10cee:	2800      	cmp	r0, #0
   10cf0:	d0f0      	beq.n	10cd4 <dpl_mbuf_adj+0x68>
                    dpl_mbuf_free_chain(SLIST_NEXT(m, om_next));
   10cf2:	f7ff ff06 	bl	10b02 <dpl_mbuf_free_chain>
                    SLIST_NEXT(m, om_next) = NULL;
   10cf6:	2300      	movs	r3, #0
   10cf8:	60e3      	str	r3, [r4, #12]
   10cfa:	e7eb      	b.n	10cd4 <dpl_mbuf_adj+0x68>
            count -= m->om_len;
   10cfc:	1ac9      	subs	r1, r1, r3
        for (; m; m = SLIST_NEXT(m, om_next)) {
   10cfe:	2800      	cmp	r0, #0
   10d00:	d1ef      	bne.n	10ce2 <dpl_mbuf_adj+0x76>
   10d02:	e7e7      	b.n	10cd4 <dpl_mbuf_adj+0x68>

00010d04 <dpl_mbuf_copyinto>:
    return om;
}

int
dpl_mbuf_copyinto(struct dpl_mbuf *om, int off, const void *src, int len)
{
   10d04:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   10d08:	4691      	mov	r9, r2
    uint16_t cur_off;
    int copylen;
    int rc;

    /* Find the mbuf,offset pair for the start of the destination. */
    cur = dpl_mbuf_off(om, off, &cur_off);
   10d0a:	f10d 0206 	add.w	r2, sp, #6
{
   10d0e:	4607      	mov	r7, r0
   10d10:	4688      	mov	r8, r1
   10d12:	461c      	mov	r4, r3
    cur = dpl_mbuf_off(om, off, &cur_off);
   10d14:	f7ff ff4f 	bl	10bb6 <dpl_mbuf_off>
    if (cur == NULL) {
   10d18:	4605      	mov	r5, r0
   10d1a:	b370      	cbz	r0, 10d7a <dpl_mbuf_copyinto+0x76>
        if (next == NULL) {
            break;
        }

        cur = next;
        cur_off = 0;
   10d1c:	f04f 0a00 	mov.w	sl, #0
        copylen = mynewt_min(cur->om_len - cur_off, len);
   10d20:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   10d24:	88ee      	ldrh	r6, [r5, #6]
   10d26:	1a36      	subs	r6, r6, r0
   10d28:	42a6      	cmp	r6, r4
   10d2a:	bfa8      	it	ge
   10d2c:	4626      	movge	r6, r4
        if (copylen > 0) {
   10d2e:	2e00      	cmp	r6, #0
   10d30:	dd07      	ble.n	10d42 <dpl_mbuf_copyinto+0x3e>
            memcpy(cur->om_data + cur_off, sptr, copylen);
   10d32:	682b      	ldr	r3, [r5, #0]
   10d34:	4649      	mov	r1, r9
   10d36:	4632      	mov	r2, r6
   10d38:	4418      	add	r0, r3
   10d3a:	f7ff fa99 	bl	10270 <memcpy>
            sptr += copylen;
   10d3e:	44b1      	add	r9, r6
            len -= copylen;
   10d40:	1ba4      	subs	r4, r4, r6
        if (len == 0) {
   10d42:	b91c      	cbnz	r4, 10d4c <dpl_mbuf_copyinto+0x48>
            return 0;
   10d44:	2000      	movs	r0, #0
        DPL_MBUF_PKTHDR(om)->omp_len =
            mynewt_max(DPL_MBUF_PKTHDR(om)->omp_len, off + len);
    }

    return 0;
}
   10d46:	b002      	add	sp, #8
   10d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        next = SLIST_NEXT(cur, om_next);
   10d4c:	68eb      	ldr	r3, [r5, #12]
        if (next == NULL) {
   10d4e:	b11b      	cbz	r3, 10d58 <dpl_mbuf_copyinto+0x54>
        cur_off = 0;
   10d50:	f8ad a006 	strh.w	sl, [sp, #6]
        copylen = mynewt_min(cur->om_len - cur_off, len);
   10d54:	461d      	mov	r5, r3
   10d56:	e7e3      	b.n	10d20 <dpl_mbuf_copyinto+0x1c>
    rc = dpl_mbuf_append(cur, sptr, len);
   10d58:	b2a2      	uxth	r2, r4
   10d5a:	4649      	mov	r1, r9
   10d5c:	4628      	mov	r0, r5
   10d5e:	f7ff feda 	bl	10b16 <dpl_mbuf_append>
    if (rc != 0) {
   10d62:	2800      	cmp	r0, #0
   10d64:	d1ef      	bne.n	10d46 <dpl_mbuf_copyinto+0x42>
    if (DPL_MBUF_IS_PKTHDR(om)) {
   10d66:	797b      	ldrb	r3, [r7, #5]
   10d68:	2b07      	cmp	r3, #7
   10d6a:	d9eb      	bls.n	10d44 <dpl_mbuf_copyinto+0x40>
            mynewt_max(DPL_MBUF_PKTHDR(om)->omp_len, off + len);
   10d6c:	8a39      	ldrh	r1, [r7, #16]
   10d6e:	4444      	add	r4, r8
   10d70:	428c      	cmp	r4, r1
   10d72:	bfb8      	it	lt
   10d74:	460c      	movlt	r4, r1
        DPL_MBUF_PKTHDR(om)->omp_len =
   10d76:	823c      	strh	r4, [r7, #16]
   10d78:	e7e5      	b.n	10d46 <dpl_mbuf_copyinto+0x42>
        return -1;
   10d7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10d7e:	e7e2      	b.n	10d46 <dpl_mbuf_copyinto+0x42>

00010d80 <dpl_mbuf_extend>:
    second->om_pkthdr_len = 0;
}

void *
dpl_mbuf_extend(struct dpl_mbuf *om, uint16_t len)
{
   10d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct dpl_mbuf *newm;
    struct dpl_mbuf *last;
    void *data;

    if (len > om->om_omp->omp_databuf_len) {
   10d82:	6887      	ldr	r7, [r0, #8]
   10d84:	883b      	ldrh	r3, [r7, #0]
   10d86:	428b      	cmp	r3, r1
{
   10d88:	4605      	mov	r5, r0
   10d8a:	460c      	mov	r4, r1
    if (len > om->om_omp->omp_databuf_len) {
   10d8c:	d201      	bcs.n	10d92 <dpl_mbuf_extend+0x12>
        return NULL;
   10d8e:	2000      	movs	r0, #0
    if (DPL_MBUF_IS_PKTHDR(om)) {
        DPL_MBUF_PKTHDR(om)->omp_len += len;
    }

    return data;
}
   10d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10d92:	4601      	mov	r1, r0
    while (SLIST_NEXT(last, om_next) != NULL) {
   10d94:	460e      	mov	r6, r1
   10d96:	68c9      	ldr	r1, [r1, #12]
   10d98:	2900      	cmp	r1, #0
   10d9a:	d1fb      	bne.n	10d94 <dpl_mbuf_extend+0x14>
    if (DPL_MBUF_TRAILINGSPACE(last) < len) {
   10d9c:	4630      	mov	r0, r6
   10d9e:	f7ff fdec 	bl	1097a <_dpl_mbuf_trailingspace>
   10da2:	42a0      	cmp	r0, r4
   10da4:	d206      	bcs.n	10db4 <dpl_mbuf_extend+0x34>
        newm = dpl_mbuf_get(om->om_omp, 0);
   10da6:	4638      	mov	r0, r7
   10da8:	f7ff fe68 	bl	10a7c <dpl_mbuf_get>
        if (newm == NULL) {
   10dac:	2800      	cmp	r0, #0
   10dae:	d0ee      	beq.n	10d8e <dpl_mbuf_extend+0xe>
        SLIST_NEXT(last, om_next) = newm;
   10db0:	60f0      	str	r0, [r6, #12]
   10db2:	4606      	mov	r6, r0
    data = last->om_data + last->om_len;
   10db4:	88f3      	ldrh	r3, [r6, #6]
   10db6:	6830      	ldr	r0, [r6, #0]
   10db8:	4418      	add	r0, r3
    last->om_len += len;
   10dba:	4423      	add	r3, r4
   10dbc:	80f3      	strh	r3, [r6, #6]
    if (DPL_MBUF_IS_PKTHDR(om)) {
   10dbe:	796b      	ldrb	r3, [r5, #5]
   10dc0:	2b07      	cmp	r3, #7
        DPL_MBUF_PKTHDR(om)->omp_len += len;
   10dc2:	bf82      	ittt	hi
   10dc4:	8a29      	ldrhhi	r1, [r5, #16]
   10dc6:	1864      	addhi	r4, r4, r1
   10dc8:	822c      	strhhi	r4, [r5, #16]
   10dca:	e7e1      	b.n	10d90 <dpl_mbuf_extend+0x10>

00010dcc <dpl_mbuf_trim_front>:
{
    struct dpl_mbuf *next;
    struct dpl_mbuf *cur;

    /* Abort early if there is nothing to trim. */
    if (om->om_len != 0) {
   10dcc:	88c3      	ldrh	r3, [r0, #6]
{
   10dce:	b570      	push	{r4, r5, r6, lr}
   10dd0:	4605      	mov	r5, r0
    if (om->om_len != 0) {
   10dd2:	b113      	cbz	r3, 10dda <dpl_mbuf_trim_front+0xe>
   10dd4:	462c      	mov	r4, r5
        dpl_mbuf_free(om);
        om = cur;
    }

    return om;
}
   10dd6:	4620      	mov	r0, r4
   10dd8:	bd70      	pop	{r4, r5, r6, pc}
    cur = SLIST_NEXT(om, om_next);
   10dda:	68c4      	ldr	r4, [r0, #12]
    while (cur != NULL && cur->om_len == 0) {
   10ddc:	2c00      	cmp	r4, #0
   10dde:	d0f9      	beq.n	10dd4 <dpl_mbuf_trim_front+0x8>
   10de0:	88e3      	ldrh	r3, [r4, #6]
   10de2:	b1ab      	cbz	r3, 10e10 <dpl_mbuf_trim_front+0x44>
    if (DPL_MBUF_IS_PKTHDR(om)) {
   10de4:	7963      	ldrb	r3, [r4, #5]
    leadingspace = (uint16_t) (DPL_MBUF_DATA(om, uint8_t *) -
   10de6:	6821      	ldr	r1, [r4, #0]
    if (DPL_MBUF_LEADINGSPACE(cur) >= om->om_pkthdr_len) {
   10de8:	796a      	ldrb	r2, [r5, #5]
   10dea:	2b07      	cmp	r3, #7
   10dec:	bf98      	it	ls
   10dee:	2300      	movls	r3, #0
        ((uint8_t *) &om->om_databuf[0] + startoff));
   10df0:	f104 0010 	add.w	r0, r4, #16
   10df4:	4403      	add	r3, r0
    leadingspace = (uint16_t) (DPL_MBUF_DATA(om, uint8_t *) -
   10df6:	1acb      	subs	r3, r1, r3
   10df8:	b29b      	uxth	r3, r3
   10dfa:	429a      	cmp	r2, r3
   10dfc:	d8ea      	bhi.n	10dd4 <dpl_mbuf_trim_front+0x8>
        cur->om_pkthdr_len = om->om_pkthdr_len;
   10dfe:	7162      	strb	r2, [r4, #5]
        memcpy(DPL_MBUF_PKTHDR(cur), DPL_MBUF_PKTHDR(om), om->om_pkthdr_len);
   10e00:	f105 0110 	add.w	r1, r5, #16
   10e04:	f7ff fa34 	bl	10270 <memcpy>
        dpl_mbuf_free(om);
   10e08:	4628      	mov	r0, r5
   10e0a:	f7ff fe70 	bl	10aee <dpl_mbuf_free>
        om = cur;
   10e0e:	e7e2      	b.n	10dd6 <dpl_mbuf_trim_front+0xa>
        next = SLIST_NEXT(cur, om_next);
   10e10:	68e6      	ldr	r6, [r4, #12]
        SLIST_NEXT(om, om_next) = next;
   10e12:	60ee      	str	r6, [r5, #12]
        dpl_mbuf_free(cur);
   10e14:	4620      	mov	r0, r4
   10e16:	f7ff fe6a 	bl	10aee <dpl_mbuf_free>
        cur = next;
   10e1a:	4634      	mov	r4, r6
   10e1c:	e7de      	b.n	10ddc <dpl_mbuf_trim_front+0x10>

00010e1e <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct dpl_mempool *mempool,
                   struct dpl_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
   10e1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10e20:	9f08      	ldr	r7, [sp, #32]
   10e22:	460c      	mov	r4, r1
    int rc;

    rc = dpl_mempool_init(mempool, num_blocks, block_size, mem, name);
   10e24:	b29d      	uxth	r5, r3
   10e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10e28:	9300      	str	r3, [sp, #0]
{
   10e2a:	4616      	mov	r6, r2
    rc = dpl_mempool_init(mempool, num_blocks, block_size, mem, name);
   10e2c:	4603      	mov	r3, r0
   10e2e:	463a      	mov	r2, r7
   10e30:	4629      	mov	r1, r5
   10e32:	4620      	mov	r0, r4
   10e34:	f000 f830 	bl	10e98 <dpl_mempool_init>
    if (rc != 0) {
   10e38:	b940      	cbnz	r0, 10e4c <mem_init_mbuf_pool+0x2e>
        return rc;
    }

    rc = dpl_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
   10e3a:	462b      	mov	r3, r5
   10e3c:	b2ba      	uxth	r2, r7
   10e3e:	4621      	mov	r1, r4
   10e40:	4630      	mov	r0, r6
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   10e42:	b003      	add	sp, #12
   10e44:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    rc = dpl_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
   10e48:	f7ff be13 	b.w	10a72 <dpl_mbuf_pool_init>
}
   10e4c:	b003      	add	sp, #12
   10e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00010e50 <mem_split_frag>:
 *                              NULL on failure.
 */
struct dpl_mbuf *
mem_split_frag(struct dpl_mbuf **om, uint16_t max_frag_sz,
               mem_frag_alloc_fn *alloc_cb, void *cb_arg)
{
   10e50:	b570      	push	{r4, r5, r6, lr}
    struct dpl_mbuf *frag;
    int rc;

    if (DPL_MBUF_PKTLEN(*om) <= max_frag_sz) {
   10e52:	6804      	ldr	r4, [r0, #0]
{
   10e54:	460e      	mov	r6, r1
   10e56:	4619      	mov	r1, r3
    if (DPL_MBUF_PKTLEN(*om) <= max_frag_sz) {
   10e58:	8a23      	ldrh	r3, [r4, #16]
   10e5a:	42b3      	cmp	r3, r6
{
   10e5c:	4605      	mov	r5, r0
    if (DPL_MBUF_PKTLEN(*om) <= max_frag_sz) {
   10e5e:	d803      	bhi.n	10e68 <mem_split_frag+0x18>
        /* Final fragment. */
        frag = *om;
        *om = NULL;
   10e60:	2300      	movs	r3, #0
   10e62:	6003      	str	r3, [r0, #0]
    return frag;

err:
    dpl_mbuf_free_chain(frag);
    return NULL;
}
   10e64:	4620      	mov	r0, r4
   10e66:	bd70      	pop	{r4, r5, r6, pc}
    frag = alloc_cb(max_frag_sz, cb_arg);
   10e68:	4630      	mov	r0, r6
   10e6a:	4790      	blx	r2
    if (frag == NULL) {
   10e6c:	4604      	mov	r4, r0
   10e6e:	b170      	cbz	r0, 10e8e <mem_split_frag+0x3e>
    rc = dpl_mbuf_appendfrom(frag, *om, 0, max_frag_sz);
   10e70:	6829      	ldr	r1, [r5, #0]
   10e72:	4633      	mov	r3, r6
   10e74:	2200      	movs	r2, #0
   10e76:	f7ff feac 	bl	10bd2 <dpl_mbuf_appendfrom>
    if (rc != 0) {
   10e7a:	b940      	cbnz	r0, 10e8e <mem_split_frag+0x3e>
    dpl_mbuf_adj(*om, max_frag_sz);
   10e7c:	6828      	ldr	r0, [r5, #0]
   10e7e:	4631      	mov	r1, r6
   10e80:	f7ff fef4 	bl	10c6c <dpl_mbuf_adj>
    *om = dpl_mbuf_trim_front(*om);
   10e84:	6828      	ldr	r0, [r5, #0]
   10e86:	f7ff ffa1 	bl	10dcc <dpl_mbuf_trim_front>
   10e8a:	6028      	str	r0, [r5, #0]
    return frag;
   10e8c:	e7ea      	b.n	10e64 <mem_split_frag+0x14>
    dpl_mbuf_free_chain(frag);
   10e8e:	4620      	mov	r0, r4
   10e90:	f7ff fe37 	bl	10b02 <dpl_mbuf_free_chain>
    return NULL;
   10e94:	2400      	movs	r4, #0
   10e96:	e7e5      	b.n	10e64 <mem_split_frag+0x14>

00010e98 <dpl_mempool_init>:
#endif

dpl_error_t
dpl_mempool_init(struct dpl_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
   10e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10e9a:	460d      	mov	r5, r1
   10e9c:	461e      	mov	r6, r3
    int true_block_size;
    uint8_t *block_addr;
    struct dpl_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
   10e9e:	4604      	mov	r4, r0
   10ea0:	b110      	cbz	r0, 10ea8 <dpl_mempool_init+0x10>
   10ea2:	b10a      	cbz	r2, 10ea8 <dpl_mempool_init+0x10>
        return DPL_INVALID_PARAM;
    }

    if ((!membuf) && (blocks != 0)) {
   10ea4:	b913      	cbnz	r3, 10eac <dpl_mempool_init+0x14>
   10ea6:	b119      	cbz	r1, 10eb0 <dpl_mempool_init+0x18>
        return DPL_INVALID_PARAM;
   10ea8:	2003      	movs	r0, #3
   10eaa:	e029      	b.n	10f00 <dpl_mempool_init+0x68>

    if (membuf != NULL) {
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uintptr_t)membuf & (DPL_ALIGNMENT - 1)) != 0) {
   10eac:	0799      	lsls	r1, r3, #30
   10eae:	d12e      	bne.n	10f0e <dpl_mempool_init+0x76>
            return DPL_MEM_NOT_ALIGNED;
        }
    }
    true_block_size = DPL_MEM_TRUE_BLOCK_SIZE(block_size);
   10eb0:	0793      	lsls	r3, r2, #30
   10eb2:	bf1c      	itt	ne
   10eb4:	f022 0303 	bicne.w	r3, r2, #3
   10eb8:	1d1f      	addne	r7, r3, #4

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
    mp->mp_num_free = blocks;
    mp->mp_min_free = blocks;
    mp->mp_flags = 0;
   10eba:	f04f 0300 	mov.w	r3, #0
   10ebe:	72a3      	strb	r3, [r4, #10]
    mp->mp_num_blocks = blocks;
    mp->mp_membuf_addr = (uintptr_t)membuf;
    mp->name = name;
   10ec0:	9b06      	ldr	r3, [sp, #24]
    mp->mp_block_size = block_size;
   10ec2:	6022      	str	r2, [r4, #0]
    dpl_mempool_poison(membuf, true_block_size);
    SLIST_FIRST(mp) = membuf;
   10ec4:	e9c4 6305 	strd	r6, r3, [r4, #20]
    mp->mp_num_free = blocks;
   10ec8:	80e5      	strh	r5, [r4, #6]
    mp->mp_min_free = blocks;
   10eca:	8125      	strh	r5, [r4, #8]
    mp->mp_num_blocks = blocks;
   10ecc:	80a5      	strh	r5, [r4, #4]
    mp->mp_membuf_addr = (uintptr_t)membuf;
   10ece:	60e6      	str	r6, [r4, #12]
    return (dpl_error_t)os_mutex_init(&mu->mu);
   10ed0:	f104 001c 	add.w	r0, r4, #28
    true_block_size = DPL_MEM_TRUE_BLOCK_SIZE(block_size);
   10ed4:	bf08      	it	eq
   10ed6:	4617      	moveq	r7, r2
   10ed8:	f7fc f93c 	bl	d154 <os_mutex_init>
   10edc:	4632      	mov	r2, r6
   10ede:	462b      	mov	r3, r5
    dpl_mutex_init(&mp->mutex);

    /* Chain the memory blocks to the free list */
    block_addr = (uint8_t *)membuf;
    block_ptr = (struct dpl_memblock *)block_addr;
    while (blocks > 1) {
   10ee0:	2b01      	cmp	r3, #1
   10ee2:	d80e      	bhi.n	10f02 <dpl_mempool_init+0x6a>
        block_ptr = (struct dpl_memblock *)block_addr;
        --blocks;
    }

    /* Last one in the list should be NULL */
    SLIST_NEXT(block_ptr, mb_next) = NULL;
   10ee4:	1e6b      	subs	r3, r5, #1
   10ee6:	2d00      	cmp	r5, #0
   10ee8:	b29b      	uxth	r3, r3
   10eea:	bf08      	it	eq
   10eec:	2300      	moveq	r3, #0
   10eee:	437b      	muls	r3, r7
   10ef0:	2000      	movs	r0, #0
   10ef2:	50f0      	str	r0, [r6, r3]

    STAILQ_INSERT_TAIL(&g_dpl_mempool_list, mp, mp_list);
   10ef4:	4b07      	ldr	r3, [pc, #28]	; (10f14 <dpl_mempool_init+0x7c>)
   10ef6:	6120      	str	r0, [r4, #16]
   10ef8:	685a      	ldr	r2, [r3, #4]
   10efa:	6014      	str	r4, [r2, #0]
   10efc:	3410      	adds	r4, #16
   10efe:	605c      	str	r4, [r3, #4]

    return DPL_OK;
}
   10f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        block_addr += true_block_size;
   10f02:	19d1      	adds	r1, r2, r7
        --blocks;
   10f04:	3b01      	subs	r3, #1
        SLIST_NEXT(block_ptr, mb_next) = (struct dpl_memblock *)block_addr;
   10f06:	6011      	str	r1, [r2, #0]
        --blocks;
   10f08:	b29b      	uxth	r3, r3
        block_addr += true_block_size;
   10f0a:	460a      	mov	r2, r1
   10f0c:	e7e8      	b.n	10ee0 <dpl_mempool_init+0x48>
            return DPL_MEM_NOT_ALIGNED;
   10f0e:	2004      	movs	r0, #4
   10f10:	e7f6      	b.n	10f00 <dpl_mempool_init+0x68>
   10f12:	bf00      	nop
   10f14:	200013c8 	.word	0x200013c8

00010f18 <dpl_memblock_get>:
    return 1;
}

void *
dpl_memblock_get(struct dpl_mempool *mp)
{
   10f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dpl_sr_t sr;
    struct dpl_memblock *block;

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
   10f1a:	4604      	mov	r4, r0
   10f1c:	b1e0      	cbz	r0, 10f58 <dpl_memblock_get+0x40>
    return os_arch_save_sr();
   10f1e:	f7fb fbb3 	bl	c688 <os_arch_save_sr>
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   10f22:	f104 071c 	add.w	r7, r4, #28
    return os_arch_save_sr();
   10f26:	4606      	mov	r6, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   10f28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   10f2c:	4638      	mov	r0, r7
   10f2e:	f7fc f96d 	bl	d20c <os_mutex_pend>
        DPL_ENTER_CRITICAL(sr);
        dpl_mutex_pend(&mp->mutex, DPL_WAIT_FOREVER);
        /* Check for any free */
        if (mp->mp_num_free) {
   10f32:	88e3      	ldrh	r3, [r4, #6]
   10f34:	b193      	cbz	r3, 10f5c <dpl_memblock_get+0x44>
            /* Get a free block */
            block = SLIST_FIRST(mp);
   10f36:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
   10f38:	682a      	ldr	r2, [r5, #0]
   10f3a:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
   10f3c:	3b01      	subs	r3, #1
            if (mp->mp_min_free > mp->mp_num_free) {
   10f3e:	8922      	ldrh	r2, [r4, #8]
            mp->mp_num_free--;
   10f40:	b29b      	uxth	r3, r3
            if (mp->mp_min_free > mp->mp_num_free) {
   10f42:	429a      	cmp	r2, r3
            mp->mp_num_free--;
   10f44:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
   10f46:	d900      	bls.n	10f4a <dpl_memblock_get+0x32>
                mp->mp_min_free = mp->mp_num_free;
   10f48:	8123      	strh	r3, [r4, #8]
    return (dpl_error_t)os_mutex_release(&mu->mu);
   10f4a:	4638      	mov	r0, r7
   10f4c:	f7fc f90c 	bl	d168 <os_mutex_release>
    os_arch_restore_sr(ctx);
   10f50:	4630      	mov	r0, r6
   10f52:	f7fb fb9f 	bl	c694 <os_arch_restore_sr>
}
   10f56:	462c      	mov	r4, r5
            dpl_mempool_poison_check(block, DPL_MEMPOOL_TRUE_BLOCK_SIZE(mp));
        }
    }

    return (void *)block;
}
   10f58:	4620      	mov	r0, r4
   10f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    block = NULL;
   10f5c:	461d      	mov	r5, r3
   10f5e:	e7f4      	b.n	10f4a <dpl_memblock_get+0x32>

00010f60 <dpl_memblock_put_from_cb>:

dpl_error_t
dpl_memblock_put_from_cb(struct dpl_mempool *mp, void *block_addr)
{
   10f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10f62:	4604      	mov	r4, r0
   10f64:	460d      	mov	r5, r1
    return os_arch_save_sr();
   10f66:	f7fb fb8f 	bl	c688 <os_arch_save_sr>
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   10f6a:	f104 071c 	add.w	r7, r4, #28
   10f6e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    return os_arch_save_sr();
   10f72:	4606      	mov	r6, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   10f74:	4638      	mov	r0, r7
   10f76:	f7fc f949 	bl	d20c <os_mutex_pend>
    block = (struct dpl_memblock *)block_addr;
    DPL_ENTER_CRITICAL(sr);
    dpl_mutex_pend(&mp->mutex, DPL_WAIT_FOREVER);

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
   10f7a:	6963      	ldr	r3, [r4, #20]
   10f7c:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
   10f7e:	88e3      	ldrh	r3, [r4, #6]
    SLIST_FIRST(mp) = block;
   10f80:	6165      	str	r5, [r4, #20]
    mp->mp_num_free++;
   10f82:	3301      	adds	r3, #1
   10f84:	80e3      	strh	r3, [r4, #6]
    return (dpl_error_t)os_mutex_release(&mu->mu);
   10f86:	4638      	mov	r0, r7
   10f88:	f7fc f8ee 	bl	d168 <os_mutex_release>
    os_arch_restore_sr(ctx);
   10f8c:	4630      	mov	r0, r6
   10f8e:	f7fb fb81 	bl	c694 <os_arch_restore_sr>

    dpl_mutex_release(&mp->mutex);
    DPL_EXIT_CRITICAL(sr);

    return DPL_OK;
}
   10f92:	2000      	movs	r0, #0
   10f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00010f96 <dpl_memblock_put>:

dpl_error_t
dpl_memblock_put(struct dpl_mempool *mp, void *block_addr)
{
   10f96:	b410      	push	{r4}
   10f98:	460a      	mov	r2, r1
#if MYNEWT_VAL(DPL_MEMPOOL_CHECK)
    struct dpl_memblock *block;
#endif

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
   10f9a:	4603      	mov	r3, r0
   10f9c:	b180      	cbz	r0, 10fc0 <dpl_memblock_put+0x2a>
   10f9e:	b179      	cbz	r1, 10fc0 <dpl_memblock_put+0x2a>
#endif

    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & DPL_MEMPOOL_F_EXT) {
   10fa0:	7a84      	ldrb	r4, [r0, #10]
   10fa2:	07e4      	lsls	r4, r4, #31
   10fa4:	d506      	bpl.n	10fb4 <dpl_memblock_put+0x1e>
        mpe = (struct dpl_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
   10fa6:	6a84      	ldr	r4, [r0, #40]	; 0x28
   10fa8:	b124      	cbz	r4, 10fb4 <dpl_memblock_put+0x1e>
            rc = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
   10faa:	4623      	mov	r3, r4
   10fac:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        }
    }

    /* No callback; free the block. */
    return dpl_memblock_put_from_cb(mp, block_addr);
}
   10fae:	f85d 4b04 	ldr.w	r4, [sp], #4
            rc = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
   10fb2:	4718      	bx	r3
}
   10fb4:	f85d 4b04 	ldr.w	r4, [sp], #4
    return dpl_memblock_put_from_cb(mp, block_addr);
   10fb8:	4611      	mov	r1, r2
   10fba:	4618      	mov	r0, r3
   10fbc:	f7ff bfd0 	b.w	10f60 <dpl_memblock_put_from_cb>
}
   10fc0:	2003      	movs	r0, #3
   10fc2:	f85d 4b04 	ldr.w	r4, [sp], #4
   10fc6:	4770      	bx	lr

00010fc8 <conf_load_cb>:
    conf_save_dst = cs;
}

static void
conf_load_cb(char *name, char *val, void *cb_arg)
{
   10fc8:	b538      	push	{r3, r4, r5, lr}
   10fca:	4604      	mov	r4, r0
   10fcc:	460d      	mov	r5, r1
    if (!cb_arg || !strcmp((char*)cb_arg, name)) {
   10fce:	4610      	mov	r0, r2
   10fd0:	b11a      	cbz	r2, 10fda <conf_load_cb+0x12>
   10fd2:	4621      	mov	r1, r4
   10fd4:	f7ff f974 	bl	102c0 <strcmp>
   10fd8:	b928      	cbnz	r0, 10fe6 <conf_load_cb+0x1e>
        /* If cb_arg is set, set specific conf value
         * If cb_arg is not set, just set the value
         * anyways
         */
        conf_set_value(name, val);
   10fda:	4629      	mov	r1, r5
   10fdc:	4620      	mov	r0, r4
    }
}
   10fde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        conf_set_value(name, val);
   10fe2:	f000 b9e3 	b.w	113ac <conf_set_value>
}
   10fe6:	bd38      	pop	{r3, r4, r5, pc}

00010fe8 <conf_dup_check_cb>:
    return 0;
}

static void
conf_dup_check_cb(char *name, char *val, void *cb_arg)
{
   10fe8:	b538      	push	{r3, r4, r5, lr}
   10fea:	460d      	mov	r5, r1
    struct conf_dup_check_arg *cdca = (struct conf_dup_check_arg *)cb_arg;

    if (strcmp(name, cdca->name)) {
   10fec:	6811      	ldr	r1, [r2, #0]
{
   10fee:	4614      	mov	r4, r2
    if (strcmp(name, cdca->name)) {
   10ff0:	f7ff f966 	bl	102c0 <strcmp>
   10ff4:	b930      	cbnz	r0, 11004 <conf_dup_check_cb+0x1c>
        return;
    }
    if (!val) {
        if (!cdca->val || cdca->val[0] == '\0') {
   10ff6:	6861      	ldr	r1, [r4, #4]
    if (!val) {
   10ff8:	b92d      	cbnz	r5, 11006 <conf_dup_check_cb+0x1e>
        if (!cdca->val || cdca->val[0] == '\0') {
   10ffa:	b109      	cbz	r1, 11000 <conf_dup_check_cb+0x18>
   10ffc:	780b      	ldrb	r3, [r1, #0]
   10ffe:	b943      	cbnz	r3, 11012 <conf_dup_check_cb+0x2a>
            cdca->is_dup = 1;
   11000:	2301      	movs	r3, #1
        } else {
            cdca->is_dup = 0;
   11002:	60a3      	str	r3, [r4, #8]
            cdca->is_dup = 1;
        } else {
            cdca->is_dup = 0;
        }
    }
}
   11004:	bd38      	pop	{r3, r4, r5, pc}
        if (cdca->val && !strcmp(val, cdca->val)) {
   11006:	b121      	cbz	r1, 11012 <conf_dup_check_cb+0x2a>
   11008:	4628      	mov	r0, r5
   1100a:	f7ff f959 	bl	102c0 <strcmp>
   1100e:	2800      	cmp	r0, #0
   11010:	d0f6      	beq.n	11000 <conf_dup_check_cb+0x18>
            cdca->is_dup = 0;
   11012:	2300      	movs	r3, #0
   11014:	e7f5      	b.n	11002 <conf_dup_check_cb+0x1a>
	...

00011018 <conf_src_register>:
    SLIST_FOREACH(cur, &conf_load_srcs, cs_next) {
   11018:	4908      	ldr	r1, [pc, #32]	; (1103c <conf_src_register+0x24>)
{
   1101a:	b510      	push	{r4, lr}
    SLIST_FOREACH(cur, &conf_load_srcs, cs_next) {
   1101c:	680c      	ldr	r4, [r1, #0]
    prev = NULL;
   1101e:	2300      	movs	r3, #0
    SLIST_FOREACH(cur, &conf_load_srcs, cs_next) {
   11020:	4622      	mov	r2, r4
   11022:	b91a      	cbnz	r2, 1102c <conf_src_register+0x14>
    if (!prev) {
   11024:	b92b      	cbnz	r3, 11032 <conf_src_register+0x1a>
        SLIST_INSERT_HEAD(&conf_load_srcs, cs, cs_next);
   11026:	6004      	str	r4, [r0, #0]
   11028:	6008      	str	r0, [r1, #0]
}
   1102a:	bd10      	pop	{r4, pc}
    SLIST_FOREACH(cur, &conf_load_srcs, cs_next) {
   1102c:	4613      	mov	r3, r2
   1102e:	6812      	ldr	r2, [r2, #0]
   11030:	e7f7      	b.n	11022 <conf_src_register+0xa>
        SLIST_INSERT_AFTER(prev, cs, cs_next);
   11032:	681a      	ldr	r2, [r3, #0]
   11034:	6002      	str	r2, [r0, #0]
   11036:	6018      	str	r0, [r3, #0]
}
   11038:	e7f7      	b.n	1102a <conf_src_register+0x12>
   1103a:	bf00      	nop
   1103c:	20005e28 	.word	0x20005e28

00011040 <conf_dst_register>:
    conf_save_dst = cs;
   11040:	4b01      	ldr	r3, [pc, #4]	; (11048 <conf_dst_register+0x8>)
   11042:	6018      	str	r0, [r3, #0]
}
   11044:	4770      	bx	lr
   11046:	bf00      	nop
   11048:	20005e30 	.word	0x20005e30

0001104c <conf_load>:
{
   1104c:	b570      	push	{r4, r5, r6, lr}
    conf_lock();
   1104e:	f000 f8cd 	bl	111ec <conf_lock>
    conf_loading = true;
   11052:	4d0f      	ldr	r5, [pc, #60]	; (11090 <conf_load+0x44>)
    conf_loaded = true;
   11054:	4a0f      	ldr	r2, [pc, #60]	; (11094 <conf_load+0x48>)
        cs->cs_itf->csi_load(cs, conf_load_cb, NULL);
   11056:	4e10      	ldr	r6, [pc, #64]	; (11098 <conf_load+0x4c>)
    conf_loaded = true;
   11058:	2301      	movs	r3, #1
   1105a:	7013      	strb	r3, [r2, #0]
    conf_loading = true;
   1105c:	702b      	strb	r3, [r5, #0]
    SLIST_FOREACH(cs, &conf_load_srcs, cs_next) {
   1105e:	4b0f      	ldr	r3, [pc, #60]	; (1109c <conf_load+0x50>)
   11060:	681c      	ldr	r4, [r3, #0]
   11062:	b93c      	cbnz	r4, 11074 <conf_load+0x28>
    conf_loading = false;
   11064:	702c      	strb	r4, [r5, #0]
    conf_unlock();
   11066:	f000 f8c9 	bl	111fc <conf_unlock>
    return conf_commit(NULL);
   1106a:	4620      	mov	r0, r4
}
   1106c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return conf_commit(NULL);
   11070:	f000 b9d2 	b.w	11418 <conf_commit>
        cs->cs_itf->csi_load(cs, conf_load_cb, NULL);
   11074:	6863      	ldr	r3, [r4, #4]
   11076:	2200      	movs	r2, #0
   11078:	681b      	ldr	r3, [r3, #0]
   1107a:	4631      	mov	r1, r6
   1107c:	4620      	mov	r0, r4
   1107e:	4798      	blx	r3
        if (SLIST_NEXT(cs, cs_next)) {
   11080:	6823      	ldr	r3, [r4, #0]
   11082:	b113      	cbz	r3, 1108a <conf_load+0x3e>
            conf_commit(NULL);
   11084:	2000      	movs	r0, #0
   11086:	f000 f9c7 	bl	11418 <conf_commit>
    SLIST_FOREACH(cs, &conf_load_srcs, cs_next) {
   1108a:	6824      	ldr	r4, [r4, #0]
   1108c:	e7e9      	b.n	11062 <conf_load+0x16>
   1108e:	bf00      	nop
   11090:	20005e2d 	.word	0x20005e2d
   11094:	20005e2c 	.word	0x20005e2c
   11098:	00010fc9 	.word	0x00010fc9
   1109c:	20005e28 	.word	0x20005e28

000110a0 <conf_ensure_loaded>:
    if (conf_loaded) {
   110a0:	4b03      	ldr	r3, [pc, #12]	; (110b0 <conf_ensure_loaded+0x10>)
   110a2:	781b      	ldrb	r3, [r3, #0]
   110a4:	b90b      	cbnz	r3, 110aa <conf_ensure_loaded+0xa>
    return conf_load();
   110a6:	f7ff bfd1 	b.w	1104c <conf_load>
}
   110aa:	2000      	movs	r0, #0
   110ac:	4770      	bx	lr
   110ae:	bf00      	nop
   110b0:	20005e2c 	.word	0x20005e2c

000110b4 <conf_save_one>:
/*
 * Append a single value to persisted config. Don't store duplicate value.
 */
int
conf_save_one(const char *name, char *value)
{
   110b4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    struct conf_store *cs;
    struct conf_dup_check_arg cdca;
    int rc;

    conf_lock();
    if (!conf_save_dst) {
   110b8:	4f14      	ldr	r7, [pc, #80]	; (1110c <conf_save_one+0x58>)
{
   110ba:	4605      	mov	r5, r0
   110bc:	460e      	mov	r6, r1
    conf_lock();
   110be:	f000 f895 	bl	111ec <conf_lock>
    if (!conf_save_dst) {
   110c2:	683b      	ldr	r3, [r7, #0]
   110c4:	b303      	cbz	r3, 11108 <conf_save_one+0x54>
    /*
     * Check if we're writing the same value again.
     */
    cdca.name = name;
    cdca.val = value;
    cdca.is_dup = 0;
   110c6:	2300      	movs	r3, #0
   110c8:	9303      	str	r3, [sp, #12]
    SLIST_FOREACH(cs, &conf_load_srcs, cs_next) {
   110ca:	4b11      	ldr	r3, [pc, #68]	; (11110 <conf_save_one+0x5c>)
        cs->cs_itf->csi_load(cs, conf_dup_check_cb, &cdca);
   110cc:	f8df 8044 	ldr.w	r8, [pc, #68]	; 11114 <conf_save_one+0x60>
    SLIST_FOREACH(cs, &conf_load_srcs, cs_next) {
   110d0:	681c      	ldr	r4, [r3, #0]
    cdca.val = value;
   110d2:	e9cd 5601 	strd	r5, r6, [sp, #4]
    SLIST_FOREACH(cs, &conf_load_srcs, cs_next) {
   110d6:	b97c      	cbnz	r4, 110f8 <conf_save_one+0x44>
    }
    if (cdca.is_dup == 1) {
   110d8:	9b03      	ldr	r3, [sp, #12]
   110da:	2b01      	cmp	r3, #1
   110dc:	d006      	beq.n	110ec <conf_save_one+0x38>
        rc = 0;
        goto out;
    }
    cs = conf_save_dst;
   110de:	6838      	ldr	r0, [r7, #0]
    rc = cs->cs_itf->csi_save(cs, name, value);
   110e0:	6843      	ldr	r3, [r0, #4]
   110e2:	4632      	mov	r2, r6
   110e4:	689b      	ldr	r3, [r3, #8]
   110e6:	4629      	mov	r1, r5
   110e8:	4798      	blx	r3
   110ea:	4604      	mov	r4, r0
out:
    conf_unlock();
   110ec:	f000 f886 	bl	111fc <conf_unlock>
    return rc;
}
   110f0:	4620      	mov	r0, r4
   110f2:	b004      	add	sp, #16
   110f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        cs->cs_itf->csi_load(cs, conf_dup_check_cb, &cdca);
   110f8:	6863      	ldr	r3, [r4, #4]
   110fa:	4620      	mov	r0, r4
   110fc:	681b      	ldr	r3, [r3, #0]
   110fe:	aa01      	add	r2, sp, #4
   11100:	4641      	mov	r1, r8
   11102:	4798      	blx	r3
    SLIST_FOREACH(cs, &conf_load_srcs, cs_next) {
   11104:	6824      	ldr	r4, [r4, #0]
   11106:	e7e6      	b.n	110d6 <conf_save_one+0x22>
        rc = OS_ENOENT;
   11108:	240a      	movs	r4, #10
   1110a:	e7ef      	b.n	110ec <conf_save_one+0x38>
   1110c:	20005e30 	.word	0x20005e30
   11110:	20005e28 	.word	0x20005e28
   11114:	00010fe9 	.word	0x00010fe9

00011118 <conf_store_one>:

static void
conf_store_one(char *name, char *value)
{
    conf_save_one(name, value);
   11118:	f7ff bfcc 	b.w	110b4 <conf_save_one>

0001111c <conf_save>:
 * Walk through all registered subsystems, and ask them to export their
 * config variables. Persist these settings.
 */
int
conf_save(void)
{
   1111c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct conf_store *cs;
    struct conf_handler *ch;
    int rc;
    int rc2;

    conf_lock();
   1111e:	f000 f865 	bl	111ec <conf_lock>
    cs = conf_save_dst;
   11122:	4b11      	ldr	r3, [pc, #68]	; (11168 <conf_save+0x4c>)
   11124:	681d      	ldr	r5, [r3, #0]
    if (!cs) {
   11126:	b1e5      	cbz	r5, 11162 <conf_save+0x46>
        rc = OS_ENOENT;
        goto out;
    }

    if (cs->cs_itf->csi_save_start) {
   11128:	686b      	ldr	r3, [r5, #4]
   1112a:	685b      	ldr	r3, [r3, #4]
   1112c:	b10b      	cbz	r3, 11132 <conf_save+0x16>
        cs->cs_itf->csi_save_start(cs);
   1112e:	4628      	mov	r0, r5
   11130:	4798      	blx	r3
    }
    rc = 0;
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   11132:	4b0e      	ldr	r3, [pc, #56]	; (1116c <conf_save+0x50>)
        if (ch->ch_export) {
            rc2 = ch->ch_export(conf_store_one, CONF_EXPORT_PERSIST);
   11134:	4f0e      	ldr	r7, [pc, #56]	; (11170 <conf_save+0x54>)
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   11136:	681e      	ldr	r6, [r3, #0]
    rc = 0;
   11138:	2400      	movs	r4, #0
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   1113a:	b946      	cbnz	r6, 1114e <conf_save+0x32>
            if (!rc) {
                rc = rc2;
            }
        }
    }
    if (cs->cs_itf->csi_save_end) {
   1113c:	686b      	ldr	r3, [r5, #4]
   1113e:	68db      	ldr	r3, [r3, #12]
   11140:	b10b      	cbz	r3, 11146 <conf_save+0x2a>
        cs->cs_itf->csi_save_end(cs);
   11142:	4628      	mov	r0, r5
   11144:	4798      	blx	r3
    }
out:
    conf_unlock();
   11146:	f000 f859 	bl	111fc <conf_unlock>
    return rc;
}
   1114a:	4620      	mov	r0, r4
   1114c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (ch->ch_export) {
   1114e:	6973      	ldr	r3, [r6, #20]
   11150:	b12b      	cbz	r3, 1115e <conf_save+0x42>
            rc2 = ch->ch_export(conf_store_one, CONF_EXPORT_PERSIST);
   11152:	2100      	movs	r1, #0
   11154:	4638      	mov	r0, r7
   11156:	4798      	blx	r3
                rc = rc2;
   11158:	2c00      	cmp	r4, #0
   1115a:	bf08      	it	eq
   1115c:	4604      	moveq	r4, r0
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   1115e:	6836      	ldr	r6, [r6, #0]
   11160:	e7eb      	b.n	1113a <conf_save+0x1e>
        rc = OS_ENOENT;
   11162:	240a      	movs	r4, #10
   11164:	e7ef      	b.n	11146 <conf_save+0x2a>
   11166:	bf00      	nop
   11168:	20005e30 	.word	0x20005e30
   1116c:	20005e34 	.word	0x20005e34
   11170:	00011119 	.word	0x00011119

00011174 <conf_store_init>:

void
conf_store_init(void)
{
    conf_loaded = false;
   11174:	4a02      	ldr	r2, [pc, #8]	; (11180 <conf_store_init+0xc>)
   11176:	2300      	movs	r3, #0
   11178:	7013      	strb	r3, [r2, #0]
    SLIST_INIT(&conf_load_srcs);
   1117a:	4a02      	ldr	r2, [pc, #8]	; (11184 <conf_store_init+0x10>)
   1117c:	6013      	str	r3, [r2, #0]
}
   1117e:	4770      	bx	lr
   11180:	20005e2c 	.word	0x20005e2c
   11184:	20005e28 	.word	0x20005e28

00011188 <conf_ev_fn_load>:

#if MYNEWT_VAL(OS_SCHEDULING)
static void
conf_ev_fn_load(struct os_event *ev)
{
    conf_ensure_loaded();
   11188:	f7ff bf8a 	b.w	110a0 <conf_ensure_loaded>

0001118c <conf_init>:
{
   1118c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    os_mutex_init(&conf_mtx);
   1118e:	4813      	ldr	r0, [pc, #76]	; (111dc <conf_init+0x50>)
   11190:	f7fb ffe0 	bl	d154 <os_mutex_init>
    SLIST_INIT(&conf_handlers);
   11194:	4b12      	ldr	r3, [pc, #72]	; (111e0 <conf_init+0x54>)
   11196:	2400      	movs	r4, #0
   11198:	601c      	str	r4, [r3, #0]
    conf_store_init();
   1119a:	f7ff ffeb 	bl	11174 <conf_store_init>
    rc = conf_cli_register();
   1119e:	f000 f9e7 	bl	11570 <conf_cli_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   111a2:	b138      	cbz	r0, 111b4 <conf_init+0x28>
   111a4:	4b0f      	ldr	r3, [pc, #60]	; (111e4 <conf_init+0x58>)
   111a6:	9400      	str	r4, [sp, #0]
   111a8:	681d      	ldr	r5, [r3, #0]
   111aa:	4622      	mov	r2, r4
   111ac:	4623      	mov	r3, r4
   111ae:	4621      	mov	r1, r4
   111b0:	4620      	mov	r0, r4
   111b2:	47a8      	blx	r5
    rc = conf_nmgr_register();
   111b4:	f000 fa72 	bl	1169c <conf_nmgr_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   111b8:	b138      	cbz	r0, 111ca <conf_init+0x3e>
   111ba:	2300      	movs	r3, #0
   111bc:	4a09      	ldr	r2, [pc, #36]	; (111e4 <conf_init+0x58>)
   111be:	9300      	str	r3, [sp, #0]
   111c0:	6814      	ldr	r4, [r2, #0]
   111c2:	4619      	mov	r1, r3
   111c4:	461a      	mov	r2, r3
   111c6:	4618      	mov	r0, r3
   111c8:	47a0      	blx	r4
    os_eventq_put(os_eventq_dflt_get(), &conf_ev_load);
   111ca:	f7fb fe9d 	bl	cf08 <os_eventq_dflt_get>
   111ce:	4906      	ldr	r1, [pc, #24]	; (111e8 <conf_init+0x5c>)
}
   111d0:	b003      	add	sp, #12
   111d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    os_eventq_put(os_eventq_dflt_get(), &conf_ev_load);
   111d6:	f7fb bdf0 	b.w	cdba <os_eventq_put>
   111da:	bf00      	nop
   111dc:	20005e38 	.word	0x20005e38
   111e0:	20005e34 	.word	0x20005e34
   111e4:	2000143c 	.word	0x2000143c
   111e8:	200013d0 	.word	0x200013d0

000111ec <conf_lock>:
    os_mutex_pend(&conf_mtx, 0xFFFFFFFF);
   111ec:	4802      	ldr	r0, [pc, #8]	; (111f8 <conf_lock+0xc>)
   111ee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   111f2:	f7fc b80b 	b.w	d20c <os_mutex_pend>
   111f6:	bf00      	nop
   111f8:	20005e38 	.word	0x20005e38

000111fc <conf_unlock>:
    os_mutex_release(&conf_mtx);
   111fc:	4801      	ldr	r0, [pc, #4]	; (11204 <conf_unlock+0x8>)
   111fe:	f7fb bfb3 	b.w	d168 <os_mutex_release>
   11202:	bf00      	nop
   11204:	20005e38 	.word	0x20005e38

00011208 <conf_register>:
{
   11208:	b510      	push	{r4, lr}
   1120a:	4604      	mov	r4, r0
    conf_lock();
   1120c:	f7ff ffee 	bl	111ec <conf_lock>
    SLIST_INSERT_HEAD(&conf_handlers, handler, ch_list);
   11210:	4b03      	ldr	r3, [pc, #12]	; (11220 <conf_register+0x18>)
   11212:	681a      	ldr	r2, [r3, #0]
   11214:	6022      	str	r2, [r4, #0]
   11216:	601c      	str	r4, [r3, #0]
    conf_unlock();
   11218:	f7ff fff0 	bl	111fc <conf_unlock>
}
   1121c:	2000      	movs	r0, #0
   1121e:	bd10      	pop	{r4, pc}
   11220:	20005e34 	.word	0x20005e34

00011224 <conf_handler_lookup>:
/*
 * Find conf_handler based on name.
 */
struct conf_handler *
conf_handler_lookup(char *name)
{
   11224:	b538      	push	{r3, r4, r5, lr}
    struct conf_handler *ch;

    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   11226:	4b07      	ldr	r3, [pc, #28]	; (11244 <conf_handler_lookup+0x20>)
   11228:	681c      	ldr	r4, [r3, #0]
{
   1122a:	4605      	mov	r5, r0
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   1122c:	b90c      	cbnz	r4, 11232 <conf_handler_lookup+0xe>
        if (!strcmp(name, ch->ch_name)) {
            return ch;
        }
    }
    return NULL;
}
   1122e:	4620      	mov	r0, r4
   11230:	bd38      	pop	{r3, r4, r5, pc}
        if (!strcmp(name, ch->ch_name)) {
   11232:	6861      	ldr	r1, [r4, #4]
   11234:	4628      	mov	r0, r5
   11236:	f7ff f843 	bl	102c0 <strcmp>
   1123a:	2800      	cmp	r0, #0
   1123c:	d0f7      	beq.n	1122e <conf_handler_lookup+0xa>
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   1123e:	6824      	ldr	r4, [r4, #0]
   11240:	e7f4      	b.n	1122c <conf_handler_lookup+0x8>
   11242:	bf00      	nop
   11244:	20005e34 	.word	0x20005e34

00011248 <conf_parse_name>:
/*
 * Separate string into argv array.
 */
int
conf_parse_name(char *name, int *name_argc, char *name_argv[])
{
   11248:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1124a:	460d      	mov	r5, r1
   1124c:	4616      	mov	r6, r2
    char *tok;
    char *tok_ptr;
    char *sep = CONF_NAME_SEPARATOR;
    int i;

    tok = strtok_r(name, sep, &tok_ptr);
   1124e:	4909      	ldr	r1, [pc, #36]	; (11274 <conf_parse_name+0x2c>)

    i = 0;
    while (tok) {
        name_argv[i++] = tok;
        tok = strtok_r(NULL, sep, &tok_ptr);
   11250:	4f08      	ldr	r7, [pc, #32]	; (11274 <conf_parse_name+0x2c>)
    tok = strtok_r(name, sep, &tok_ptr);
   11252:	aa01      	add	r2, sp, #4
   11254:	f008 fe31 	bl	19eba <strtok_r>
    while (tok) {
   11258:	2400      	movs	r4, #0
   1125a:	b910      	cbnz	r0, 11262 <conf_parse_name+0x1a>
    }
    *name_argc = i;
   1125c:	602c      	str	r4, [r5, #0]

    return 0;
}
   1125e:	b003      	add	sp, #12
   11260:	bdf0      	pop	{r4, r5, r6, r7, pc}
        name_argv[i++] = tok;
   11262:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
        tok = strtok_r(NULL, sep, &tok_ptr);
   11266:	aa01      	add	r2, sp, #4
   11268:	4639      	mov	r1, r7
   1126a:	2000      	movs	r0, #0
   1126c:	f008 fe25 	bl	19eba <strtok_r>
   11270:	3401      	adds	r4, #1
   11272:	e7f2      	b.n	1125a <conf_parse_name+0x12>
   11274:	000209bc 	.word	0x000209bc

00011278 <conf_parse_and_lookup>:

struct conf_handler *
conf_parse_and_lookup(char *name, int *name_argc, char *name_argv[])
{
   11278:	b510      	push	{r4, lr}
   1127a:	4614      	mov	r4, r2
    int rc;

    rc = conf_parse_name(name, name_argc, name_argv);
   1127c:	f7ff ffe4 	bl	11248 <conf_parse_name>
    if (rc) {
   11280:	b920      	cbnz	r0, 1128c <conf_parse_and_lookup+0x14>
        return NULL;
    }
    return conf_handler_lookup(name_argv[0]);
   11282:	6820      	ldr	r0, [r4, #0]
}
   11284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return conf_handler_lookup(name_argv[0]);
   11288:	f7ff bfcc 	b.w	11224 <conf_handler_lookup>
}
   1128c:	2000      	movs	r0, #0
   1128e:	bd10      	pop	{r4, pc}

00011290 <conf_value_from_str>:

int
conf_value_from_str(char *val_str, enum conf_type type, void *vp, int maxlen)
{
   11290:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11292:	460e      	mov	r6, r1
   11294:	4614      	mov	r4, r2
   11296:	461f      	mov	r7, r3
    int32_t val;
    int64_t val64;
    char *eptr;

    if (!val_str) {
   11298:	4605      	mov	r5, r0
   1129a:	b908      	cbnz	r0, 112a0 <conf_value_from_str+0x10>
        goto err;
    }
    switch (type) {
   1129c:	2003      	movs	r0, #3
   1129e:	e027      	b.n	112f0 <conf_value_from_str+0x60>
   112a0:	1e8b      	subs	r3, r1, #2
   112a2:	2b08      	cmp	r3, #8
   112a4:	d8fa      	bhi.n	1129c <conf_value_from_str+0xc>
   112a6:	a201      	add	r2, pc, #4	; (adr r2, 112ac <conf_value_from_str+0x1c>)
   112a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   112ac:	000112d1 	.word	0x000112d1
   112b0:	000112d1 	.word	0x000112d1
   112b4:	000112d1 	.word	0x000112d1
   112b8:	0001131f 	.word	0x0001131f
   112bc:	00011337 	.word	0x00011337
   112c0:	0001129d 	.word	0x0001129d
   112c4:	0001129d 	.word	0x0001129d
   112c8:	0001129d 	.word	0x0001129d
   112cc:	000112d1 	.word	0x000112d1
    case CONF_INT8:
    case CONF_INT16:
    case CONF_INT32:
    case CONF_BOOL:
        val = strtol(val_str, &eptr, 0);
   112d0:	2200      	movs	r2, #0
   112d2:	a901      	add	r1, sp, #4
   112d4:	f008 fdff 	bl	19ed6 <strtol>
        if (*eptr != '\0') {
   112d8:	9a01      	ldr	r2, [sp, #4]
        val = strtol(val_str, &eptr, 0);
   112da:	4603      	mov	r3, r0
        if (*eptr != '\0') {
   112dc:	7810      	ldrb	r0, [r2, #0]
   112de:	2800      	cmp	r0, #0
   112e0:	d1dc      	bne.n	1129c <conf_value_from_str+0xc>
            goto err;
        }
        if (type == CONF_BOOL) {
   112e2:	2e0a      	cmp	r6, #10
   112e4:	d106      	bne.n	112f4 <conf_value_from_str+0x64>
            if (val < 0 || val > 1) {
   112e6:	2b01      	cmp	r3, #1
   112e8:	d8d8      	bhi.n	1129c <conf_value_from_str+0xc>
                goto err;
            }
            *(bool *)vp = val;
   112ea:	f003 0301 	and.w	r3, r3, #1
        } else if (type == CONF_INT8) {
            if (val < INT8_MIN || val > UINT8_MAX) {
                goto err;
            }
            *(int8_t *)vp = val;
   112ee:	7023      	strb	r3, [r4, #0]
        goto err;
    }
    return 0;
err:
    return OS_INVALID_PARM;
}
   112f0:	b003      	add	sp, #12
   112f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if (type == CONF_INT8) {
   112f4:	2e02      	cmp	r6, #2
   112f6:	d105      	bne.n	11304 <conf_value_from_str+0x74>
            if (val < INT8_MIN || val > UINT8_MAX) {
   112f8:	f103 0280 	add.w	r2, r3, #128	; 0x80
   112fc:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   11300:	d3f5      	bcc.n	112ee <conf_value_from_str+0x5e>
   11302:	e7cb      	b.n	1129c <conf_value_from_str+0xc>
        } else if (type == CONF_INT16) {
   11304:	2e03      	cmp	r6, #3
   11306:	d106      	bne.n	11316 <conf_value_from_str+0x86>
            if (val < INT16_MIN || val > UINT16_MAX) {
   11308:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
   1130c:	f5b2 3fc0 	cmp.w	r2, #98304	; 0x18000
   11310:	d2c4      	bcs.n	1129c <conf_value_from_str+0xc>
            *(int16_t *)vp = val;
   11312:	8023      	strh	r3, [r4, #0]
   11314:	e7ec      	b.n	112f0 <conf_value_from_str+0x60>
        } else if (type == CONF_INT32) {
   11316:	2e04      	cmp	r6, #4
   11318:	d1ea      	bne.n	112f0 <conf_value_from_str+0x60>
            *(int32_t *)vp = val;
   1131a:	6023      	str	r3, [r4, #0]
   1131c:	e7e8      	b.n	112f0 <conf_value_from_str+0x60>
        val64 = strtoll(val_str, &eptr, 0);
   1131e:	2200      	movs	r2, #0
   11320:	a901      	add	r1, sp, #4
   11322:	f008 fdde 	bl	19ee2 <strtoll>
        if (*eptr != '\0') {
   11326:	9b01      	ldr	r3, [sp, #4]
   11328:	781b      	ldrb	r3, [r3, #0]
   1132a:	2b00      	cmp	r3, #0
   1132c:	d1b6      	bne.n	1129c <conf_value_from_str+0xc>
        *(int64_t *)vp = val64;
   1132e:	e9c4 0100 	strd	r0, r1, [r4]
    return 0;
   11332:	2000      	movs	r0, #0
        break;
   11334:	e7dc      	b.n	112f0 <conf_value_from_str+0x60>
        val = strlen(val_str);
   11336:	f008 fd9b 	bl	19e70 <strlen>
        if (val + 1 > maxlen) {
   1133a:	42b8      	cmp	r0, r7
   1133c:	daae      	bge.n	1129c <conf_value_from_str+0xc>
        strcpy(vp, val_str);
   1133e:	4629      	mov	r1, r5
   11340:	4620      	mov	r0, r4
   11342:	f008 fd8d 	bl	19e60 <strcpy>
   11346:	e7f4      	b.n	11332 <conf_value_from_str+0xa2>

00011348 <conf_str_from_value>:
    return 0;
}

char *
conf_str_from_value(enum conf_type type, void *vp, char *buf, int buf_len)
{
   11348:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1134a:	4604      	mov	r4, r0
    int32_t val;

    if (type == CONF_STRING) {
   1134c:	2c06      	cmp	r4, #6
{
   1134e:	4608      	mov	r0, r1
   11350:	4615      	mov	r5, r2
   11352:	4619      	mov	r1, r3
    if (type == CONF_STRING) {
   11354:	d012      	beq.n	1137c <conf_str_from_value+0x34>
        return vp;
    }
    switch (type) {
   11356:	2c05      	cmp	r4, #5
   11358:	d018      	beq.n	1138c <conf_str_from_value+0x44>
   1135a:	d807      	bhi.n	1136c <conf_str_from_value+0x24>
   1135c:	1ea3      	subs	r3, r4, #2
   1135e:	2b02      	cmp	r3, #2
   11360:	d81d      	bhi.n	1139e <conf_str_from_value+0x56>
    case CONF_INT16:
    case CONF_INT32:
    case CONF_BOOL:
        if (type == CONF_BOOL) {
            val = *(bool *)vp;
        } else if (type == CONF_INT8) {
   11362:	2c02      	cmp	r4, #2
   11364:	d10c      	bne.n	11380 <conf_str_from_value+0x38>
            val = *(int8_t *)vp;
   11366:	f990 3000 	ldrsb.w	r3, [r0]
   1136a:	e002      	b.n	11372 <conf_str_from_value+0x2a>
    switch (type) {
   1136c:	2c0a      	cmp	r4, #10
   1136e:	d116      	bne.n	1139e <conf_str_from_value+0x56>
            val = *(bool *)vp;
   11370:	7803      	ldrb	r3, [r0, #0]
        } else if (type == CONF_INT16) {
            val = *(int16_t *)vp;
        } else {
            val = *(int32_t *)vp;
        }
        snprintf(buf, buf_len, "%ld", (long)val);
   11372:	4a0c      	ldr	r2, [pc, #48]	; (113a4 <conf_str_from_value+0x5c>)
   11374:	4628      	mov	r0, r5
   11376:	f7ff fa91 	bl	1089c <snprintf>
        return buf;
    case CONF_INT64:
        snprintf(buf, buf_len, "%lld", *(long long *)vp);
        return buf;
   1137a:	4628      	mov	r0, r5
    default:
        return NULL;
    }
}
   1137c:	b003      	add	sp, #12
   1137e:	bd30      	pop	{r4, r5, pc}
        } else if (type == CONF_INT16) {
   11380:	2c03      	cmp	r4, #3
            val = *(int16_t *)vp;
   11382:	bf0c      	ite	eq
   11384:	f9b0 3000 	ldrsheq.w	r3, [r0]
            val = *(int32_t *)vp;
   11388:	6803      	ldrne	r3, [r0, #0]
   1138a:	e7f2      	b.n	11372 <conf_str_from_value+0x2a>
        snprintf(buf, buf_len, "%lld", *(long long *)vp);
   1138c:	e9d0 2300 	ldrd	r2, r3, [r0]
   11390:	4628      	mov	r0, r5
   11392:	e9cd 2300 	strd	r2, r3, [sp]
   11396:	4a04      	ldr	r2, [pc, #16]	; (113a8 <conf_str_from_value+0x60>)
   11398:	f7ff fa80 	bl	1089c <snprintf>
   1139c:	e7ed      	b.n	1137a <conf_str_from_value+0x32>
    switch (type) {
   1139e:	2000      	movs	r0, #0
   113a0:	e7ec      	b.n	1137c <conf_str_from_value+0x34>
   113a2:	bf00      	nop
   113a4:	000209be 	.word	0x000209be
   113a8:	000209c2 	.word	0x000209c2

000113ac <conf_set_value>:
    return buf;
}

int
conf_set_value(char *name, char *val_str)
{
   113ac:	b510      	push	{r4, lr}
   113ae:	b08c      	sub	sp, #48	; 0x30
   113b0:	460c      	mov	r4, r1
   113b2:	9001      	str	r0, [sp, #4]
    int name_argc;
    char *name_argv[CONF_MAX_DIR_DEPTH];
    struct conf_handler *ch;
    int rc;

    conf_lock();
   113b4:	f7ff ff1a 	bl	111ec <conf_lock>
    ch = conf_parse_and_lookup(name, &name_argc, name_argv);
   113b8:	9801      	ldr	r0, [sp, #4]
   113ba:	aa04      	add	r2, sp, #16
   113bc:	a903      	add	r1, sp, #12
   113be:	f7ff ff5b 	bl	11278 <conf_parse_and_lookup>
    if (!ch) {
   113c2:	b158      	cbz	r0, 113dc <conf_set_value+0x30>
        rc = OS_INVALID_PARM;
        goto out;
    }
    rc = ch->ch_set(name_argc - 1, &name_argv[1], val_str);
   113c4:	68c3      	ldr	r3, [r0, #12]
   113c6:	9803      	ldr	r0, [sp, #12]
   113c8:	4622      	mov	r2, r4
   113ca:	a905      	add	r1, sp, #20
   113cc:	3801      	subs	r0, #1
   113ce:	4798      	blx	r3
   113d0:	4604      	mov	r4, r0
out:
    conf_unlock();
   113d2:	f7ff ff13 	bl	111fc <conf_unlock>
    return rc;
}
   113d6:	4620      	mov	r0, r4
   113d8:	b00c      	add	sp, #48	; 0x30
   113da:	bd10      	pop	{r4, pc}
        rc = OS_INVALID_PARM;
   113dc:	2403      	movs	r4, #3
   113de:	e7f8      	b.n	113d2 <conf_set_value+0x26>

000113e0 <conf_get_value>:
 * Return value will be pointer to beginning of that buffer,
 * except for string it will pointer to beginning of string.
 */
char *
conf_get_value(char *name, char *buf, int buf_len)
{
   113e0:	b530      	push	{r4, r5, lr}
   113e2:	b08d      	sub	sp, #52	; 0x34
   113e4:	460d      	mov	r5, r1
   113e6:	9001      	str	r0, [sp, #4]
   113e8:	9200      	str	r2, [sp, #0]
    int name_argc;
    char *name_argv[CONF_MAX_DIR_DEPTH];
    struct conf_handler *ch;
    char *rval = NULL;

    conf_lock();
   113ea:	f7ff feff 	bl	111ec <conf_lock>
    ch = conf_parse_and_lookup(name, &name_argc, name_argv);
   113ee:	9801      	ldr	r0, [sp, #4]
   113f0:	aa04      	add	r2, sp, #16
   113f2:	a903      	add	r1, sp, #12
   113f4:	f7ff ff40 	bl	11278 <conf_parse_and_lookup>
    if (!ch) {
   113f8:	4604      	mov	r4, r0
   113fa:	b140      	cbz	r0, 1140e <conf_get_value+0x2e>
        goto out;
    }

    if (!ch->ch_get) {
   113fc:	6884      	ldr	r4, [r0, #8]
   113fe:	b134      	cbz	r4, 1140e <conf_get_value+0x2e>
        goto out;
    }
    rval = ch->ch_get(name_argc - 1, &name_argv[1], buf, buf_len);
   11400:	9803      	ldr	r0, [sp, #12]
   11402:	9b00      	ldr	r3, [sp, #0]
   11404:	462a      	mov	r2, r5
   11406:	a905      	add	r1, sp, #20
   11408:	3801      	subs	r0, #1
   1140a:	47a0      	blx	r4
   1140c:	4604      	mov	r4, r0
out:
    conf_unlock();
   1140e:	f7ff fef5 	bl	111fc <conf_unlock>
    return rval;
}
   11412:	4620      	mov	r0, r4
   11414:	b00d      	add	sp, #52	; 0x34
   11416:	bd30      	pop	{r4, r5, pc}

00011418 <conf_commit>:

int
conf_commit(char *name)
{
   11418:	b530      	push	{r4, r5, lr}
   1141a:	4604      	mov	r4, r0
   1141c:	b08b      	sub	sp, #44	; 0x2c
    char *name_argv[CONF_MAX_DIR_DEPTH];
    struct conf_handler *ch;
    int rc;
    int rc2;

    conf_lock();
   1141e:	f7ff fee5 	bl	111ec <conf_lock>
    if (name) {
   11422:	b174      	cbz	r4, 11442 <conf_commit+0x2a>
        ch = conf_parse_and_lookup(name, &name_argc, name_argv);
   11424:	aa02      	add	r2, sp, #8
   11426:	a901      	add	r1, sp, #4
   11428:	4620      	mov	r0, r4
   1142a:	f7ff ff25 	bl	11278 <conf_parse_and_lookup>
        if (!ch) {
   1142e:	b1a0      	cbz	r0, 1145a <conf_commit+0x42>
            rc = OS_INVALID_PARM;
            goto out;
        }
        if (ch->ch_commit) {
   11430:	6904      	ldr	r4, [r0, #16]
   11432:	b10c      	cbz	r4, 11438 <conf_commit+0x20>
            rc = ch->ch_commit();
   11434:	47a0      	blx	r4
   11436:	4604      	mov	r4, r0
                }
            }
        }
    }
out:
    conf_unlock();
   11438:	f7ff fee0 	bl	111fc <conf_unlock>
    return rc;
}
   1143c:	4620      	mov	r0, r4
   1143e:	b00b      	add	sp, #44	; 0x2c
   11440:	bd30      	pop	{r4, r5, pc}
        SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   11442:	4b07      	ldr	r3, [pc, #28]	; (11460 <conf_commit+0x48>)
   11444:	681d      	ldr	r5, [r3, #0]
   11446:	2d00      	cmp	r5, #0
   11448:	d0f6      	beq.n	11438 <conf_commit+0x20>
            if (ch->ch_commit) {
   1144a:	692b      	ldr	r3, [r5, #16]
   1144c:	b11b      	cbz	r3, 11456 <conf_commit+0x3e>
                rc2 = ch->ch_commit();
   1144e:	4798      	blx	r3
                    rc = rc2;
   11450:	2c00      	cmp	r4, #0
   11452:	bf08      	it	eq
   11454:	4604      	moveq	r4, r0
        SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   11456:	682d      	ldr	r5, [r5, #0]
   11458:	e7f5      	b.n	11446 <conf_commit+0x2e>
            rc = OS_INVALID_PARM;
   1145a:	2403      	movs	r4, #3
   1145c:	e7ec      	b.n	11438 <conf_commit+0x20>
   1145e:	bf00      	nop
   11460:	20005e34 	.word	0x20005e34

00011464 <conf_running_one>:

#if (MYNEWT_VAL(CONFIG_CLI_RW) & 1) == 1
static void
conf_running_one(char *name, char *val)
{
    console_printf("%s = %s\n", name, val ? val : "<del>");
   11464:	4a03      	ldr	r2, [pc, #12]	; (11474 <conf_running_one+0x10>)
   11466:	2900      	cmp	r1, #0
   11468:	bf18      	it	ne
   1146a:	460a      	movne	r2, r1
   1146c:	4601      	mov	r1, r0
   1146e:	4802      	ldr	r0, [pc, #8]	; (11478 <conf_running_one+0x14>)
   11470:	f000 bdc2 	b.w	11ff8 <console_printf>
   11474:	000209c7 	.word	0x000209c7
   11478:	000209cd 	.word	0x000209cd

0001147c <shell_conf_command>:
}
#endif

static int
shell_conf_command(int argc, char **argv)
{
   1147c:	b530      	push	{r4, r5, lr}
    char *val = NULL;
    char tmp_buf[CONF_MAX_VAL_LEN + 1];
    int rc;

    (void)rc;
    switch (argc) {
   1147e:	2802      	cmp	r0, #2
{
   11480:	b0c3      	sub	sp, #268	; 0x10c
    switch (argc) {
   11482:	d005      	beq.n	11490 <shell_conf_command+0x14>
   11484:	2803      	cmp	r0, #3
   11486:	d016      	beq.n	114b6 <shell_conf_command+0x3a>
        }
    }
    return 0;
err:
#endif
    console_printf("Invalid args\n");
   11488:	482c      	ldr	r0, [pc, #176]	; (1153c <shell_conf_command+0xc0>)
   1148a:	f000 fdb5 	bl	11ff8 <console_printf>
    return 0;
   1148e:	e028      	b.n	114e2 <shell_conf_command+0x66>
        name = argv[1];
   11490:	684c      	ldr	r4, [r1, #4]
    char *val = NULL;
   11492:	2500      	movs	r5, #0
    if (!strcmp(name, "commit")) {
   11494:	492a      	ldr	r1, [pc, #168]	; (11540 <shell_conf_command+0xc4>)
   11496:	4620      	mov	r0, r4
   11498:	f7fe ff12 	bl	102c0 <strcmp>
   1149c:	b970      	cbnz	r0, 114bc <shell_conf_command+0x40>
        rc = conf_commit(val);
   1149e:	4628      	mov	r0, r5
   114a0:	f7ff ffba 	bl	11418 <conf_commit>
        console_printf("%s", val);
   114a4:	4a27      	ldr	r2, [pc, #156]	; (11544 <shell_conf_command+0xc8>)
   114a6:	4928      	ldr	r1, [pc, #160]	; (11548 <shell_conf_command+0xcc>)
   114a8:	2800      	cmp	r0, #0
   114aa:	bf18      	it	ne
   114ac:	4611      	movne	r1, r2
   114ae:	4827      	ldr	r0, [pc, #156]	; (1154c <shell_conf_command+0xd0>)
        console_printf("%s\n", val);
   114b0:	f000 fda2 	bl	11ff8 <console_printf>
   114b4:	e015      	b.n	114e2 <shell_conf_command+0x66>
        val = argv[2];
   114b6:	e9d1 4501 	ldrd	r4, r5, [r1, #4]
        break;
   114ba:	e7eb      	b.n	11494 <shell_conf_command+0x18>
        if (!strcmp(name, "dump")) {
   114bc:	4924      	ldr	r1, [pc, #144]	; (11550 <shell_conf_command+0xd4>)
   114be:	4620      	mov	r0, r4
   114c0:	f7fe fefe 	bl	102c0 <strcmp>
   114c4:	b9b8      	cbnz	r0, 114f6 <shell_conf_command+0x7a>
            if (!val || !strcmp(val, "running")) {
   114c6:	b125      	cbz	r5, 114d2 <shell_conf_command+0x56>
   114c8:	4922      	ldr	r1, [pc, #136]	; (11554 <shell_conf_command+0xd8>)
   114ca:	4628      	mov	r0, r5
   114cc:	f7fe fef8 	bl	102c0 <strcmp>
   114d0:	b938      	cbnz	r0, 114e2 <shell_conf_command+0x66>
    conf_lock();
   114d2:	f7ff fe8b 	bl	111ec <conf_lock>
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   114d6:	4b20      	ldr	r3, [pc, #128]	; (11558 <shell_conf_command+0xdc>)
            ch->ch_export(conf_running_one, CONF_EXPORT_SHOW);
   114d8:	4d20      	ldr	r5, [pc, #128]	; (1155c <shell_conf_command+0xe0>)
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   114da:	681c      	ldr	r4, [r3, #0]
   114dc:	b924      	cbnz	r4, 114e8 <shell_conf_command+0x6c>
    conf_unlock();
   114de:	f7ff fe8d 	bl	111fc <conf_unlock>
}
   114e2:	2000      	movs	r0, #0
   114e4:	b043      	add	sp, #268	; 0x10c
   114e6:	bd30      	pop	{r4, r5, pc}
        if (ch->ch_export) {
   114e8:	6963      	ldr	r3, [r4, #20]
   114ea:	b113      	cbz	r3, 114f2 <shell_conf_command+0x76>
            ch->ch_export(conf_running_one, CONF_EXPORT_SHOW);
   114ec:	2101      	movs	r1, #1
   114ee:	4628      	mov	r0, r5
   114f0:	4798      	blx	r3
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   114f2:	6824      	ldr	r4, [r4, #0]
   114f4:	e7f2      	b.n	114dc <shell_conf_command+0x60>
            if (!strcmp(name, "save")) {
   114f6:	491a      	ldr	r1, [pc, #104]	; (11560 <shell_conf_command+0xe4>)
   114f8:	4620      	mov	r0, r4
   114fa:	f7fe fee1 	bl	102c0 <strcmp>
   114fe:	b910      	cbnz	r0, 11506 <shell_conf_command+0x8a>
                conf_save();
   11500:	f7ff fe0c 	bl	1111c <conf_save>
                return 0;
   11504:	e7ed      	b.n	114e2 <shell_conf_command+0x66>
    if (!val) {
   11506:	b96d      	cbnz	r5, 11524 <shell_conf_command+0xa8>
        val = conf_get_value(name, tmp_buf, sizeof(tmp_buf));
   11508:	a901      	add	r1, sp, #4
   1150a:	f240 1201 	movw	r2, #257	; 0x101
   1150e:	4620      	mov	r0, r4
   11510:	f7ff ff66 	bl	113e0 <conf_get_value>
        if (!val) {
   11514:	4601      	mov	r1, r0
   11516:	b918      	cbnz	r0, 11520 <shell_conf_command+0xa4>
            console_printf("Cannot display value\n");
   11518:	4812      	ldr	r0, [pc, #72]	; (11564 <shell_conf_command+0xe8>)
   1151a:	f000 fd6d 	bl	11ff8 <console_printf>
            goto err;
   1151e:	e7b3      	b.n	11488 <shell_conf_command+0xc>
        console_printf("%s\n", val);
   11520:	4811      	ldr	r0, [pc, #68]	; (11568 <shell_conf_command+0xec>)
   11522:	e7c5      	b.n	114b0 <shell_conf_command+0x34>
        rc = conf_set_value(name, val);
   11524:	4629      	mov	r1, r5
   11526:	4620      	mov	r0, r4
   11528:	f7ff ff40 	bl	113ac <conf_set_value>
        if (rc) {
   1152c:	4601      	mov	r1, r0
   1152e:	2800      	cmp	r0, #0
   11530:	d0d7      	beq.n	114e2 <shell_conf_command+0x66>
            console_printf("Failed to set, err: %d\n", rc);
   11532:	480e      	ldr	r0, [pc, #56]	; (1156c <shell_conf_command+0xf0>)
   11534:	f000 fd60 	bl	11ff8 <console_printf>
            goto err;
   11538:	e7a6      	b.n	11488 <shell_conf_command+0xc>
   1153a:	bf00      	nop
   1153c:	00020a35 	.word	0x00020a35
   11540:	000209ee 	.word	0x000209ee
   11544:	000209d6 	.word	0x000209d6
   11548:	000209e8 	.word	0x000209e8
   1154c:	00021afe 	.word	0x00021afe
   11550:	000209f5 	.word	0x000209f5
   11554:	000209fa 	.word	0x000209fa
   11558:	20005e34 	.word	0x20005e34
   1155c:	00011465 	.word	0x00011465
   11560:	00020a02 	.word	0x00020a02
   11564:	00020a07 	.word	0x00020a07
   11568:	00021041 	.word	0x00021041
   1156c:	00020a1d 	.word	0x00020a1d

00011570 <conf_cli_register>:

int
conf_cli_register(void)
{
    return shell_cmd_register(&shell_conf_cmd);
   11570:	4801      	ldr	r0, [pc, #4]	; (11578 <conf_cli_register+0x8>)
   11572:	f001 bb47 	b.w	12c04 <shell_cmd_register>
   11576:	bf00      	nop
   11578:	200013e0 	.word	0x200013e0

0001157c <conf_nmgr_write>:
    return 0;
}

static int
conf_nmgr_write(struct mgmt_cbuf *cb)
{
   1157c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11580:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
    int rc;
    char name_str[CONF_MAX_NAME_LEN];
    char val_str[CONF_MAX_VAL_LEN];
    bool do_save = false;
   11584:	2700      	movs	r7, #0
{
   11586:	4680      	mov	r8, r0
    const struct cbor_attr_t val_attr[] = {
   11588:	22bc      	movs	r2, #188	; 0xbc
   1158a:	4639      	mov	r1, r7
   1158c:	a813      	add	r0, sp, #76	; 0x4c
    bool do_save = false;
   1158e:	f88d 7007 	strb.w	r7, [sp, #7]
    const struct cbor_attr_t val_attr[] = {
   11592:	f7fe fe7a 	bl	1028a <memset>
   11596:	4b1f      	ldr	r3, [pc, #124]	; (11614 <conf_nmgr_write+0x98>)
   11598:	9312      	str	r3, [sp, #72]	; 0x48
   1159a:	2304      	movs	r3, #4
   1159c:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
   115a0:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
   115a4:	f44f 7380 	mov.w	r3, #256	; 0x100
   115a8:	2240      	movs	r2, #64	; 0x40
   115aa:	9328      	str	r3, [sp, #160]	; 0xa0
   115ac:	4b1a      	ldr	r3, [pc, #104]	; (11618 <conf_nmgr_write+0x9c>)
   115ae:	921c      	str	r2, [sp, #112]	; 0x70
    bool do_save = false;
   115b0:	f10d 0607 	add.w	r6, sp, #7
    const struct cbor_attr_t val_attr[] = {
   115b4:	ac02      	add	r4, sp, #8
   115b6:	ad42      	add	r5, sp, #264	; 0x108
   115b8:	4a18      	ldr	r2, [pc, #96]	; (1161c <conf_nmgr_write+0xa0>)
   115ba:	932a      	str	r3, [sp, #168]	; 0xa8
    };

    name_str[0] = '\0';
    val_str[0] = '\0';

    rc = cbor_read_object(&cb->it, val_attr);
   115bc:	a912      	add	r1, sp, #72	; 0x48
    const struct cbor_attr_t val_attr[] = {
   115be:	2305      	movs	r3, #5
    rc = cbor_read_object(&cb->it, val_attr);
   115c0:	f108 001c 	add.w	r0, r8, #28
    name_str[0] = '\0';
   115c4:	7027      	strb	r7, [r4, #0]
    const struct cbor_attr_t val_attr[] = {
   115c6:	9414      	str	r4, [sp, #80]	; 0x50
   115c8:	921e      	str	r2, [sp, #120]	; 0x78
   115ca:	9520      	str	r5, [sp, #128]	; 0x80
   115cc:	f88d 30ac 	strb.w	r3, [sp, #172]	; 0xac
   115d0:	962c      	str	r6, [sp, #176]	; 0xb0
    val_str[0] = '\0';
   115d2:	702f      	strb	r7, [r5, #0]
    rc = cbor_read_object(&cb->it, val_attr);
   115d4:	f003 fb42 	bl	14c5c <cbor_read_object>
    if (rc) {
   115d8:	b930      	cbnz	r0, 115e8 <conf_nmgr_write+0x6c>
        return MGMT_ERR_EINVAL;
    }

    if (name_str[0] != '\0') {
   115da:	7823      	ldrb	r3, [r4, #0]
   115dc:	b933      	cbnz	r3, 115ec <conf_nmgr_write+0x70>
        }
        if (rc) {
            return MGMT_ERR_EINVAL;
        }
    }
    rc = conf_commit(NULL);
   115de:	2000      	movs	r0, #0
   115e0:	f7ff ff1a 	bl	11418 <conf_commit>
    if (rc) {
   115e4:	4604      	mov	r4, r0
   115e6:	b150      	cbz	r0, 115fe <conf_nmgr_write+0x82>
        return MGMT_ERR_EINVAL;
    }
    if (do_save) {
        rc = conf_save();
        if (rc) {
            return MGMT_ERR_EINVAL;
   115e8:	2403      	movs	r4, #3
   115ea:	e00e      	b.n	1160a <conf_nmgr_write+0x8e>
        if (val_str[0] != '\0') {
   115ec:	7829      	ldrb	r1, [r5, #0]
   115ee:	b101      	cbz	r1, 115f2 <conf_nmgr_write+0x76>
            rc = conf_set_value(name_str, val_str);
   115f0:	4629      	mov	r1, r5
            rc = conf_set_value(name_str, NULL);
   115f2:	4620      	mov	r0, r4
   115f4:	f7ff feda 	bl	113ac <conf_set_value>
        if (rc) {
   115f8:	2800      	cmp	r0, #0
   115fa:	d0f0      	beq.n	115de <conf_nmgr_write+0x62>
   115fc:	e7f4      	b.n	115e8 <conf_nmgr_write+0x6c>
    if (do_save) {
   115fe:	7833      	ldrb	r3, [r6, #0]
   11600:	b11b      	cbz	r3, 1160a <conf_nmgr_write+0x8e>
        rc = conf_save();
   11602:	f7ff fd8b 	bl	1111c <conf_save>
        if (rc) {
   11606:	2800      	cmp	r0, #0
   11608:	d1ee      	bne.n	115e8 <conf_nmgr_write+0x6c>
        }
    }
    return 0;
}
   1160a:	4620      	mov	r0, r4
   1160c:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
   11610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11614:	00020e2a 	.word	0x00020e2a
   11618:	00020a02 	.word	0x00020a02
   1161c:	00020a4a 	.word	0x00020a4a

00011620 <conf_nmgr_read>:
{
   11620:	b5f0      	push	{r4, r5, r6, r7, lr}
   11622:	b0e9      	sub	sp, #420	; 0x1a4
   11624:	4605      	mov	r5, r0
    const struct cbor_attr_t attr[2] = {
   11626:	225c      	movs	r2, #92	; 0x5c
   11628:	2100      	movs	r1, #0
   1162a:	a811      	add	r0, sp, #68	; 0x44
   1162c:	f7fe fe2d 	bl	1028a <memset>
   11630:	4b18      	ldr	r3, [pc, #96]	; (11694 <conf_nmgr_read+0x74>)
   11632:	9310      	str	r3, [sp, #64]	; 0x40
   11634:	2304      	movs	r3, #4
   11636:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
   1163a:	2340      	movs	r3, #64	; 0x40
    rc = cbor_read_object(&cb->it, attr);
   1163c:	eb0d 0103 	add.w	r1, sp, r3
   11640:	f105 001c 	add.w	r0, r5, #28
    const struct cbor_attr_t attr[2] = {
   11644:	f8cd d048 	str.w	sp, [sp, #72]	; 0x48
   11648:	931a      	str	r3, [sp, #104]	; 0x68
    rc = cbor_read_object(&cb->it, attr);
   1164a:	f003 fb07 	bl	14c5c <cbor_read_object>
    if (rc) {
   1164e:	4604      	mov	r4, r0
   11650:	b118      	cbz	r0, 1165a <conf_nmgr_read+0x3a>
        return MGMT_ERR_EINVAL;
   11652:	2403      	movs	r4, #3
}
   11654:	4620      	mov	r0, r4
   11656:	b069      	add	sp, #420	; 0x1a4
   11658:	bdf0      	pop	{r4, r5, r6, r7, pc}
    val = conf_get_value(name_str, val_str, sizeof(val_str));
   1165a:	f44f 7280 	mov.w	r2, #256	; 0x100
   1165e:	a928      	add	r1, sp, #160	; 0xa0
   11660:	4668      	mov	r0, sp
   11662:	f7ff febd 	bl	113e0 <conf_get_value>
    if (!val) {
   11666:	4606      	mov	r6, r0
   11668:	2800      	cmp	r0, #0
   1166a:	d0f2      	beq.n	11652 <conf_nmgr_read+0x32>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "val");
   1166c:	350c      	adds	r5, #12
CBOR_API CborError cbor_encode_negative_int(CborEncoder *encoder, uint64_t absolute_value);
CBOR_API CborError cbor_encode_simple_value(CborEncoder *encoder, uint8_t value);
CBOR_API CborError cbor_encode_tag(CborEncoder *encoder, CborTag tag);
CBOR_API CborError cbor_encode_text_string(CborEncoder *encoder, const char *string, size_t length);
CBOR_INLINE_API CborError cbor_encode_text_stringz(CborEncoder *encoder, const char *string)
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1166e:	490a      	ldr	r1, [pc, #40]	; (11698 <conf_nmgr_read+0x78>)
   11670:	2203      	movs	r2, #3
   11672:	4628      	mov	r0, r5
   11674:	f003 fc21 	bl	14eba <cbor_encode_text_string>
   11678:	4607      	mov	r7, r0
   1167a:	4630      	mov	r0, r6
   1167c:	f008 fbf8 	bl	19e70 <strlen>
   11680:	4631      	mov	r1, r6
   11682:	4602      	mov	r2, r0
   11684:	4628      	mov	r0, r5
   11686:	f003 fc18 	bl	14eba <cbor_encode_text_string>
        return MGMT_ERR_ENOMEM;
   1168a:	ea50 0307 	orrs.w	r3, r0, r7
   1168e:	bf18      	it	ne
   11690:	2402      	movne	r4, #2
   11692:	e7df      	b.n	11654 <conf_nmgr_read+0x34>
   11694:	00020e2a 	.word	0x00020e2a
   11698:	00020a4a 	.word	0x00020a4a

0001169c <conf_nmgr_register>:

int
conf_nmgr_register(void)
{
    return mgmt_group_register(&conf_nmgr_group);
   1169c:	4801      	ldr	r0, [pc, #4]	; (116a4 <conf_nmgr_register+0x8>)
   1169e:	f009 ba17 	b.w	1aad0 <mgmt_group_register>
   116a2:	bf00      	nop
   116a4:	200013f0 	.word	0x200013f0

000116a8 <console_echo>:
}

void
console_echo(int on)
{
    echo = on;
   116a8:	4b01      	ldr	r3, [pc, #4]	; (116b0 <console_echo+0x8>)
   116aa:	6018      	str	r0, [r3, #0]
}
   116ac:	4770      	bx	lr
   116ae:	bf00      	nop
   116b0:	200013fc 	.word	0x200013fc

000116b4 <console_lock>:

int
console_lock(int timeout)
{
   116b4:	b508      	push	{r3, lr}
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   116b6:	4b09      	ldr	r3, [pc, #36]	; (116dc <console_lock+0x28>)
   116b8:	685b      	ldr	r3, [r3, #4]
   116ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
   116be:	4601      	mov	r1, r0
    int rc = OS_OK;

    /* Locking from isr while some task own mutex fails with OS_EBUSY */
    if (os_arch_in_isr()) {
   116c0:	b123      	cbz	r3, 116cc <console_lock+0x18>
 *
 * @return number of times lock was called from current task
 */
static inline uint16_t os_mutex_get_level(struct os_mutex *mu)
{
    return mu->mu_level;
   116c2:	4b07      	ldr	r3, [pc, #28]	; (116e0 <console_lock+0x2c>)
        if (os_mutex_get_level(&console_write_lock)) {
   116c4:	88db      	ldrh	r3, [r3, #6]
   116c6:	b93b      	cbnz	r3, 116d8 <console_lock+0x24>
    int rc = OS_OK;
   116c8:	2000      	movs	r0, #0
        rc = OS_OK;
    }

end:
    return rc;
}
   116ca:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&console_write_lock, timeout);
   116cc:	4804      	ldr	r0, [pc, #16]	; (116e0 <console_lock+0x2c>)
   116ce:	f7fb fd9d 	bl	d20c <os_mutex_pend>
    if (rc == OS_NOT_STARTED) {
   116d2:	2809      	cmp	r0, #9
   116d4:	d1f9      	bne.n	116ca <console_lock+0x16>
   116d6:	e7f7      	b.n	116c8 <console_lock+0x14>
            rc = OS_EBUSY;
   116d8:	200b      	movs	r0, #11
    return rc;
   116da:	e7f6      	b.n	116ca <console_lock+0x16>
   116dc:	e000ed00 	.word	0xe000ed00
   116e0:	20006690 	.word	0x20006690

000116e4 <console_unlock>:
   116e4:	4b0a      	ldr	r3, [pc, #40]	; (11710 <console_unlock+0x2c>)

int
console_unlock(void)
{
   116e6:	b510      	push	{r4, lr}
   116e8:	685c      	ldr	r4, [r3, #4]
   116ea:	f3c4 0408 	ubfx	r4, r4, #0, #9
    int rc = OS_OK;

    if (os_arch_in_isr()) {
   116ee:	b964      	cbnz	r4, 1170a <console_unlock+0x26>
        goto end;
    }

    rc = os_mutex_release(&console_write_lock);
   116f0:	4808      	ldr	r0, [pc, #32]	; (11714 <console_unlock+0x30>)
   116f2:	f7fb fd39 	bl	d168 <os_mutex_release>
   116f6:	4603      	mov	r3, r0
    assert(rc == OS_OK || rc == OS_NOT_STARTED);
   116f8:	b138      	cbz	r0, 1170a <console_unlock+0x26>
   116fa:	2809      	cmp	r0, #9
   116fc:	d006      	beq.n	1170c <console_unlock+0x28>
   116fe:	4623      	mov	r3, r4
   11700:	4622      	mov	r2, r4
   11702:	4621      	mov	r1, r4
   11704:	4620      	mov	r0, r4
   11706:	f7fb f879 	bl	c7fc <__assert_func>
    int rc = OS_OK;
   1170a:	2300      	movs	r3, #0
end:
    return rc;
}
   1170c:	4618      	mov	r0, r3
   1170e:	bd10      	pop	{r4, pc}
   11710:	e000ed00 	.word	0xe000ed00
   11714:	20006690 	.word	0x20006690

00011718 <console_out>:

int
console_out(int c)
{
   11718:	b510      	push	{r4, lr}
   1171a:	4604      	mov	r4, r0
    int rc;
    const os_time_t timeout =
        os_time_ms_to_ticks32(MYNEWT_VAL(CONSOLE_DEFAULT_LOCK_TIMEOUT));

    if (console_lock(timeout) != OS_OK) {
   1171c:	2080      	movs	r0, #128	; 0x80
   1171e:	f7ff ffc9 	bl	116b4 <console_lock>
   11722:	b928      	cbnz	r0, 11730 <console_out+0x18>
        return c;
    }
    rc = console_out_nolock(c);
   11724:	4620      	mov	r0, r4
   11726:	f000 fcd1 	bl	120cc <console_out_nolock>
   1172a:	4604      	mov	r4, r0

    (void)console_unlock();
   1172c:	f7ff ffda 	bl	116e4 <console_unlock>

    return rc;
}
   11730:	4620      	mov	r0, r4
   11732:	bd10      	pop	{r4, pc}

00011734 <console_append_char>:
    }
}

static int
console_append_char(char *line, uint8_t byte)
{
   11734:	b510      	push	{r4, lr}
    if (cur + end >= MYNEWT_VAL(CONSOLE_MAX_INPUT_LEN) - 1) {
   11736:	4a0b      	ldr	r2, [pc, #44]	; (11764 <console_append_char+0x30>)
   11738:	4c0b      	ldr	r4, [pc, #44]	; (11768 <console_append_char+0x34>)
   1173a:	8812      	ldrh	r2, [r2, #0]
   1173c:	8823      	ldrh	r3, [r4, #0]
   1173e:	4413      	add	r3, r2
   11740:	2bfe      	cmp	r3, #254	; 0xfe
   11742:	dc0c      	bgt.n	1175e <console_append_char+0x2a>
        return 0;
    }

    line[cur + end] = byte;
   11744:	54c1      	strb	r1, [r0, r3]

    if (byte == '\0') {
   11746:	b141      	cbz	r1, 1175a <console_append_char+0x26>
        return 1;
    }

    if (echo) {
   11748:	4b08      	ldr	r3, [pc, #32]	; (1176c <console_append_char+0x38>)
   1174a:	681b      	ldr	r3, [r3, #0]
   1174c:	b113      	cbz	r3, 11754 <console_append_char+0x20>
        /* Echo back to console */
        console_out(byte);
   1174e:	4608      	mov	r0, r1
   11750:	f7ff ffe2 	bl	11718 <console_out>
    }
    ++cur;
   11754:	8823      	ldrh	r3, [r4, #0]
   11756:	3301      	adds	r3, #1
   11758:	8023      	strh	r3, [r4, #0]
        return 1;
   1175a:	2001      	movs	r0, #1
   1175c:	e000      	b.n	11760 <console_append_char+0x2c>
        return 0;
   1175e:	2000      	movs	r0, #0
    return 1;
}
   11760:	bd10      	pop	{r4, pc}
   11762:	bf00      	nop
   11764:	2000669e 	.word	0x2000669e
   11768:	2000669c 	.word	0x2000669c
   1176c:	200013fc 	.word	0x200013fc

00011770 <cursor_save>:
{
   11770:	b508      	push	{r3, lr}
    console_out(ESC);
   11772:	201b      	movs	r0, #27
   11774:	f7ff ffd0 	bl	11718 <console_out>
    console_out('[');
   11778:	205b      	movs	r0, #91	; 0x5b
   1177a:	f7ff ffcd 	bl	11718 <console_out>
}
   1177e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    console_out('s');
   11782:	2073      	movs	r0, #115	; 0x73
   11784:	f7ff bfc8 	b.w	11718 <console_out>

00011788 <cursor_restore>:
{
   11788:	b508      	push	{r3, lr}
    console_out(ESC);
   1178a:	201b      	movs	r0, #27
   1178c:	f7ff ffc4 	bl	11718 <console_out>
    console_out('[');
   11790:	205b      	movs	r0, #91	; 0x5b
   11792:	f7ff ffc1 	bl	11718 <console_out>
}
   11796:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    console_out('u');
   1179a:	2075      	movs	r0, #117	; 0x75
   1179c:	f7ff bfbc 	b.w	11718 <console_out>

000117a0 <del_char>:
{
   117a0:	b538      	push	{r3, r4, r5, lr}
   117a2:	4604      	mov	r4, r0
   117a4:	460d      	mov	r5, r1
    console_out('\b');
   117a6:	2008      	movs	r0, #8
   117a8:	f7ff ffb6 	bl	11718 <console_out>
    if (end == 0) {
   117ac:	b93d      	cbnz	r5, 117be <del_char+0x1e>
        console_out(' ');
   117ae:	2020      	movs	r0, #32
   117b0:	f7ff ffb2 	bl	11718 <console_out>
}
   117b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        console_out('\b');
   117b8:	2008      	movs	r0, #8
   117ba:	f7ff bfad 	b.w	11718 <console_out>
    cursor_save();
   117be:	f7ff ffd7 	bl	11770 <cursor_save>
    while (end-- > 0) {
   117c2:	4425      	add	r5, r4
   117c4:	42ac      	cmp	r4, r5
   117c6:	d106      	bne.n	117d6 <del_char+0x36>
    console_out(' ');
   117c8:	2020      	movs	r0, #32
   117ca:	f7ff ffa5 	bl	11718 <console_out>
}
   117ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    cursor_restore();
   117d2:	f7ff bfd9 	b.w	11788 <cursor_restore>
        *pos = *(pos + 1);
   117d6:	7860      	ldrb	r0, [r4, #1]
   117d8:	f804 0b01 	strb.w	r0, [r4], #1
        console_out(*(pos++));
   117dc:	f7ff ff9c 	bl	11718 <console_out>
   117e0:	e7f0      	b.n	117c4 <del_char+0x24>
	...

000117e4 <insert_char>:
{
   117e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (cur + end >= MYNEWT_VAL(CONSOLE_MAX_INPUT_LEN) - 1) {
   117e6:	4e14      	ldr	r6, [pc, #80]	; (11838 <insert_char+0x54>)
   117e8:	8833      	ldrh	r3, [r6, #0]
   117ea:	4413      	add	r3, r2
   117ec:	2bfe      	cmp	r3, #254	; 0xfe
{
   117ee:	4605      	mov	r5, r0
   117f0:	460f      	mov	r7, r1
   117f2:	4614      	mov	r4, r2
    if (cur + end >= MYNEWT_VAL(CONSOLE_MAX_INPUT_LEN) - 1) {
   117f4:	dc0a      	bgt.n	1180c <insert_char+0x28>
    if (echo) {
   117f6:	4b11      	ldr	r3, [pc, #68]	; (1183c <insert_char+0x58>)
   117f8:	681b      	ldr	r3, [r3, #0]
   117fa:	b113      	cbz	r3, 11802 <insert_char+0x1e>
        console_out(c);
   117fc:	4608      	mov	r0, r1
   117fe:	f7ff ff8b 	bl	11718 <console_out>
    ++cur;
   11802:	8833      	ldrh	r3, [r6, #0]
   11804:	3301      	adds	r3, #1
   11806:	8033      	strh	r3, [r6, #0]
    if (end == 0) {
   11808:	b90c      	cbnz	r4, 1180e <insert_char+0x2a>
        *pos = c;
   1180a:	702f      	strb	r7, [r5, #0]
}
   1180c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp = *pos;
   1180e:	782e      	ldrb	r6, [r5, #0]
    *(pos++) = c;
   11810:	f805 7b01 	strb.w	r7, [r5], #1
    cursor_save();
   11814:	f7ff ffac 	bl	11770 <cursor_save>
        console_out(tmp);
   11818:	4630      	mov	r0, r6
   1181a:	3c01      	subs	r4, #1
   1181c:	f7ff ff7c 	bl	11718 <console_out>
        c = *pos;
   11820:	b2a4      	uxth	r4, r4
   11822:	4633      	mov	r3, r6
   11824:	782e      	ldrb	r6, [r5, #0]
        *(pos++) = tmp;
   11826:	f805 3b01 	strb.w	r3, [r5], #1
    while (end-- > 0) {
   1182a:	2c00      	cmp	r4, #0
   1182c:	d1f4      	bne.n	11818 <insert_char+0x34>
}
   1182e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    cursor_restore();
   11832:	f7ff bfa9 	b.w	11788 <cursor_restore>
   11836:	bf00      	nop
   11838:	2000669c 	.word	0x2000669c
   1183c:	200013fc 	.word	0x200013fc

00011840 <handle_ansi>:
{
   11840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (esc_state & ESC_ANSI_FIRST) {
   11844:	4c6c      	ldr	r4, [pc, #432]	; (119f8 <handle_ansi+0x1b8>)
   11846:	6823      	ldr	r3, [r4, #0]
   11848:	075e      	lsls	r6, r3, #29
{
   1184a:	460d      	mov	r5, r1
    if (esc_state & ESC_ANSI_FIRST) {
   1184c:	d520      	bpl.n	11890 <handle_ansi+0x50>
        if (!isdigit(byte)) {
   1184e:	f1a0 0130 	sub.w	r1, r0, #48	; 0x30
        esc_state &= ~ESC_ANSI_FIRST;
   11852:	f023 0304 	bic.w	r3, r3, #4
        if (!isdigit(byte)) {
   11856:	2909      	cmp	r1, #9
   11858:	4a68      	ldr	r2, [pc, #416]	; (119fc <handle_ansi+0x1bc>)
        esc_state &= ~ESC_ANSI_FIRST;
   1185a:	6023      	str	r3, [r4, #0]
        if (!isdigit(byte)) {
   1185c:	d90f      	bls.n	1187e <handle_ansi+0x3e>
            ansi_val = 1;
   1185e:	2301      	movs	r3, #1
   11860:	6013      	str	r3, [r2, #0]
    switch (byte) {
   11862:	2848      	cmp	r0, #72	; 0x48
   11864:	d839      	bhi.n	118da <handle_ansi+0x9a>
   11866:	2840      	cmp	r0, #64	; 0x40
   11868:	d939      	bls.n	118de <handle_ansi+0x9e>
   1186a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1186e:	2b07      	cmp	r3, #7
   11870:	d835      	bhi.n	118de <handle_ansi+0x9e>
   11872:	e8df f003 	tbb	[pc, r3]
   11876:	3838      	.short	0x3838
   11878:	a5347687 	.word	0xa5347687
   1187c:	9634      	.short	0x9634
        esc_state |= ESC_ANSI_VAL;
   1187e:	f043 0308 	orr.w	r3, r3, #8
   11882:	6023      	str	r3, [r4, #0]
        ansi_val_2 = 0;
   11884:	4b5e      	ldr	r3, [pc, #376]	; (11a00 <handle_ansi+0x1c0>)
        ansi_val = byte - '0';
   11886:	6011      	str	r1, [r2, #0]
        ansi_val_2 = 0;
   11888:	2200      	movs	r2, #0
   1188a:	601a      	str	r2, [r3, #0]
}
   1188c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (esc_state & ESC_ANSI_VAL) {
   11890:	0719      	lsls	r1, r3, #28
   11892:	d5e6      	bpl.n	11862 <handle_ansi+0x22>
        if (isdigit(byte)) {
   11894:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
   11898:	2a09      	cmp	r2, #9
   1189a:	d812      	bhi.n	118c2 <handle_ansi+0x82>
            if (esc_state & ESC_ANSI_VAL_2) {
   1189c:	f013 0f10 	tst.w	r3, #16
   118a0:	f04f 040a 	mov.w	r4, #10
   118a4:	d006      	beq.n	118b4 <handle_ansi+0x74>
                ansi_val_2 += byte - '0';
   118a6:	4b56      	ldr	r3, [pc, #344]	; (11a00 <handle_ansi+0x1c0>)
                ansi_val_2 *= 10;
   118a8:	681a      	ldr	r2, [r3, #0]
                ansi_val_2 += byte - '0';
   118aa:	fb04 0002 	mla	r0, r4, r2, r0
   118ae:	3830      	subs	r0, #48	; 0x30
   118b0:	6018      	str	r0, [r3, #0]
   118b2:	e7eb      	b.n	1188c <handle_ansi+0x4c>
                ansi_val += byte - '0';
   118b4:	4951      	ldr	r1, [pc, #324]	; (119fc <handle_ansi+0x1bc>)
                ansi_val *= 10;
   118b6:	680b      	ldr	r3, [r1, #0]
                ansi_val += byte - '0';
   118b8:	fb04 0003 	mla	r0, r4, r3, r0
   118bc:	3830      	subs	r0, #48	; 0x30
   118be:	6008      	str	r0, [r1, #0]
   118c0:	e7e4      	b.n	1188c <handle_ansi+0x4c>
        if (byte == ';' && !(esc_state & ESC_ANSI_VAL_2)) {
   118c2:	283b      	cmp	r0, #59	; 0x3b
   118c4:	d105      	bne.n	118d2 <handle_ansi+0x92>
   118c6:	06da      	lsls	r2, r3, #27
   118c8:	d403      	bmi.n	118d2 <handle_ansi+0x92>
            esc_state |= ESC_ANSI_VAL_2;
   118ca:	f043 0310 	orr.w	r3, r3, #16
    esc_state &= ~ESC_ANSI;
   118ce:	6023      	str	r3, [r4, #0]
   118d0:	e7dc      	b.n	1188c <handle_ansi+0x4c>
        esc_state &= ~ESC_ANSI_VAL_2;
   118d2:	f023 0318 	bic.w	r3, r3, #24
   118d6:	6023      	str	r3, [r4, #0]
   118d8:	e7c3      	b.n	11862 <handle_ansi+0x22>
    switch (byte) {
   118da:	287e      	cmp	r0, #126	; 0x7e
   118dc:	d079      	beq.n	119d2 <handle_ansi+0x192>
    esc_state &= ~ESC_ANSI;
   118de:	6823      	ldr	r3, [r4, #0]
   118e0:	f023 0302 	bic.w	r3, r3, #2
   118e4:	e7f3      	b.n	118ce <handle_ansi+0x8e>
    uint8_t limit = direction ==  ANSI_UP ? sh->tail : sh->head;
   118e6:	4e47      	ldr	r6, [pc, #284]	; (11a04 <handle_ansi+0x1c4>)
   118e8:	2841      	cmp	r0, #65	; 0x41
   118ea:	bf0c      	ite	eq
   118ec:	7872      	ldrbeq	r2, [r6, #1]
   118ee:	7832      	ldrbne	r2, [r6, #0]
    if (sh->curr == limit) {
   118f0:	78f3      	ldrb	r3, [r6, #3]
   118f2:	4293      	cmp	r3, r2
   118f4:	d0f3      	beq.n	118de <handle_ansi+0x9e>
    if (direction == ANSI_UP) {
   118f6:	2841      	cmp	r0, #65	; 0x41
        sh->curr = ring_buf_prev(sh->curr, sh->size);
   118f8:	78b2      	ldrb	r2, [r6, #2]
    if (direction == ANSI_UP) {
   118fa:	d12c      	bne.n	11956 <handle_ansi+0x116>
    return i == 0 ? i = size - 1 : --i;
   118fc:	bb4b      	cbnz	r3, 11952 <handle_ansi+0x112>
   118fe:	1e53      	subs	r3, r2, #1
   11900:	b2db      	uxtb	r3, r3
    if (cur) {
   11902:	4f41      	ldr	r7, [pc, #260]	; (11a08 <handle_ansi+0x1c8>)
    return (uint8_t) ((i + 1) % size);
   11904:	70f3      	strb	r3, [r6, #3]
    if (cur) {
   11906:	8839      	ldrh	r1, [r7, #0]
   11908:	b111      	cbz	r1, 11910 <handle_ansi+0xd0>
    console_printf("\x1b[%uD", count);
   1190a:	4840      	ldr	r0, [pc, #256]	; (11a0c <handle_ansi+0x1cc>)
   1190c:	f000 fb74 	bl	11ff8 <console_printf>
    end = 0;
   11910:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 11a10 <handle_ansi+0x1d0>
    cur = 0;
   11914:	2300      	movs	r3, #0
    console_out(ESC);
   11916:	201b      	movs	r0, #27
    cur = 0;
   11918:	803b      	strh	r3, [r7, #0]
    end = 0;
   1191a:	f8a8 3000 	strh.w	r3, [r8]
    console_out(ESC);
   1191e:	f7ff fefb 	bl	11718 <console_out>
    console_out('[');
   11922:	205b      	movs	r0, #91	; 0x5b
   11924:	f7ff fef8 	bl	11718 <console_out>
    console_out('K');
   11928:	204b      	movs	r0, #75	; 0x4b
   1192a:	f7ff fef5 	bl	11718 <console_out>
    str = sh->lines[sh->curr];
   1192e:	78f3      	ldrb	r3, [r6, #3]
   11930:	eb06 0683 	add.w	r6, r6, r3, lsl #2
   11934:	6876      	ldr	r6, [r6, #4]
   11936:	3e01      	subs	r6, #1
    while (str && *str != '\0') {
   11938:	1c73      	adds	r3, r6, #1
   1193a:	d0d0      	beq.n	118de <handle_ansi+0x9e>
   1193c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
   11940:	2900      	cmp	r1, #0
   11942:	d0cc      	beq.n	118de <handle_ansi+0x9e>
        insert_char(&line[cur], *str, end);
   11944:	8838      	ldrh	r0, [r7, #0]
   11946:	f8b8 2000 	ldrh.w	r2, [r8]
   1194a:	4428      	add	r0, r5
   1194c:	f7ff ff4a 	bl	117e4 <insert_char>
        ++str;
   11950:	e7f2      	b.n	11938 <handle_ansi+0xf8>
    return i == 0 ? i = size - 1 : --i;
   11952:	3b01      	subs	r3, #1
   11954:	e7d4      	b.n	11900 <handle_ansi+0xc0>
    return (uint8_t) ((i + 1) % size);
   11956:	3301      	adds	r3, #1
   11958:	fbb3 f1f2 	udiv	r1, r3, r2
   1195c:	fb02 3311 	mls	r3, r2, r1, r3
   11960:	e7cf      	b.n	11902 <handle_ansi+0xc2>
        if (ansi_val > cur) {
   11962:	4829      	ldr	r0, [pc, #164]	; (11a08 <handle_ansi+0x1c8>)
   11964:	4a25      	ldr	r2, [pc, #148]	; (119fc <handle_ansi+0x1bc>)
   11966:	8803      	ldrh	r3, [r0, #0]
   11968:	6811      	ldr	r1, [r2, #0]
   1196a:	428b      	cmp	r3, r1
   1196c:	d3b7      	bcc.n	118de <handle_ansi+0x9e>
        end += ansi_val;
   1196e:	4d28      	ldr	r5, [pc, #160]	; (11a10 <handle_ansi+0x1d0>)
   11970:	882a      	ldrh	r2, [r5, #0]
        cur -= ansi_val;
   11972:	1a5b      	subs	r3, r3, r1
        end += ansi_val;
   11974:	fa12 f281 	uxtah	r2, r2, r1
        cur -= ansi_val;
   11978:	8003      	strh	r3, [r0, #0]
    console_printf("\x1b[%uD", count);
   1197a:	4824      	ldr	r0, [pc, #144]	; (11a0c <handle_ansi+0x1cc>)
        end += ansi_val;
   1197c:	802a      	strh	r2, [r5, #0]
    console_printf("\x1b[%uC", count);
   1197e:	f000 fb3b 	bl	11ff8 <console_printf>
}
   11982:	e7ac      	b.n	118de <handle_ansi+0x9e>
        if (ansi_val > end) {
   11984:	4822      	ldr	r0, [pc, #136]	; (11a10 <handle_ansi+0x1d0>)
   11986:	4b1d      	ldr	r3, [pc, #116]	; (119fc <handle_ansi+0x1bc>)
   11988:	8802      	ldrh	r2, [r0, #0]
   1198a:	6819      	ldr	r1, [r3, #0]
   1198c:	428a      	cmp	r2, r1
   1198e:	d3a6      	bcc.n	118de <handle_ansi+0x9e>
        end -= ansi_val;
   11990:	b28b      	uxth	r3, r1
   11992:	1ad2      	subs	r2, r2, r3
   11994:	8002      	strh	r2, [r0, #0]
        cur += ansi_val;
   11996:	4a1c      	ldr	r2, [pc, #112]	; (11a08 <handle_ansi+0x1c8>)
   11998:	8810      	ldrh	r0, [r2, #0]
   1199a:	4403      	add	r3, r0
   1199c:	8013      	strh	r3, [r2, #0]
    console_printf("\x1b[%uC", count);
   1199e:	481d      	ldr	r0, [pc, #116]	; (11a14 <handle_ansi+0x1d4>)
   119a0:	e7ed      	b.n	1197e <handle_ansi+0x13e>
        if (!cur) {
   119a2:	4d19      	ldr	r5, [pc, #100]	; (11a08 <handle_ansi+0x1c8>)
   119a4:	8829      	ldrh	r1, [r5, #0]
   119a6:	2900      	cmp	r1, #0
   119a8:	d099      	beq.n	118de <handle_ansi+0x9e>
    console_printf("\x1b[%uD", count);
   119aa:	4818      	ldr	r0, [pc, #96]	; (11a0c <handle_ansi+0x1cc>)
   119ac:	f000 fb24 	bl	11ff8 <console_printf>
        end += cur;
   119b0:	4a17      	ldr	r2, [pc, #92]	; (11a10 <handle_ansi+0x1d0>)
        cur += end;
   119b2:	8813      	ldrh	r3, [r2, #0]
   119b4:	8829      	ldrh	r1, [r5, #0]
   119b6:	440b      	add	r3, r1
   119b8:	8013      	strh	r3, [r2, #0]
        end = 0;
   119ba:	2300      	movs	r3, #0
   119bc:	802b      	strh	r3, [r5, #0]
        break;
   119be:	e78e      	b.n	118de <handle_ansi+0x9e>
        if (!end) {
   119c0:	4d13      	ldr	r5, [pc, #76]	; (11a10 <handle_ansi+0x1d0>)
   119c2:	8829      	ldrh	r1, [r5, #0]
   119c4:	2900      	cmp	r1, #0
   119c6:	d08a      	beq.n	118de <handle_ansi+0x9e>
    console_printf("\x1b[%uC", count);
   119c8:	4812      	ldr	r0, [pc, #72]	; (11a14 <handle_ansi+0x1d4>)
   119ca:	f000 fb15 	bl	11ff8 <console_printf>
        cur += end;
   119ce:	4a0e      	ldr	r2, [pc, #56]	; (11a08 <handle_ansi+0x1c8>)
   119d0:	e7ef      	b.n	119b2 <handle_ansi+0x172>
        if (!end) {
   119d2:	4e0f      	ldr	r6, [pc, #60]	; (11a10 <handle_ansi+0x1d0>)
   119d4:	8833      	ldrh	r3, [r6, #0]
   119d6:	2b00      	cmp	r3, #0
   119d8:	d081      	beq.n	118de <handle_ansi+0x9e>
    console_printf("\x1b[%uC", count);
   119da:	2101      	movs	r1, #1
   119dc:	480d      	ldr	r0, [pc, #52]	; (11a14 <handle_ansi+0x1d4>)
   119de:	f000 fb0b 	bl	11ff8 <console_printf>
        del_char(&line[cur], --end);
   119e2:	4b09      	ldr	r3, [pc, #36]	; (11a08 <handle_ansi+0x1c8>)
   119e4:	8831      	ldrh	r1, [r6, #0]
   119e6:	8818      	ldrh	r0, [r3, #0]
   119e8:	3901      	subs	r1, #1
   119ea:	b289      	uxth	r1, r1
   119ec:	4428      	add	r0, r5
   119ee:	8031      	strh	r1, [r6, #0]
   119f0:	f7ff fed6 	bl	117a0 <del_char>
        break;
   119f4:	e773      	b.n	118de <handle_ansi+0x9e>
   119f6:	bf00      	nop
   119f8:	200066a0 	.word	0x200066a0
   119fc:	20005e44 	.word	0x20005e44
   11a00:	20005e48 	.word	0x20005e48
   11a04:	20005e64 	.word	0x20005e64
   11a08:	2000669c 	.word	0x2000669c
   11a0c:	00020a58 	.word	0x00020a58
   11a10:	2000669e 	.word	0x2000669e
   11a14:	00020a5e 	.word	0x00020a5e

00011a18 <console_write>:
{
   11a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11a1a:	4606      	mov	r6, r0
    if (console_lock(timeout) != OS_OK) {
   11a1c:	2080      	movs	r0, #128	; 0x80
{
   11a1e:	460c      	mov	r4, r1
    if (console_lock(timeout) != OS_OK) {
   11a20:	f7ff fe48 	bl	116b4 <console_lock>
   11a24:	4605      	mov	r5, r0
   11a26:	bb78      	cbnz	r0, 11a88 <console_write+0x70>
    if (cnt >= 2 && str[0] == CONSOLE_NLIP_DATA_START1 &&
   11a28:	2c01      	cmp	r4, #1
   11a2a:	4f18      	ldr	r7, [pc, #96]	; (11a8c <console_write+0x74>)
   11a2c:	dd18      	ble.n	11a60 <console_write+0x48>
   11a2e:	7833      	ldrb	r3, [r6, #0]
   11a30:	2b04      	cmp	r3, #4
   11a32:	d10d      	bne.n	11a50 <console_write+0x38>
   11a34:	7873      	ldrb	r3, [r6, #1]
   11a36:	2b14      	cmp	r3, #20
   11a38:	d10a      	bne.n	11a50 <console_write+0x38>
        g_is_output_nlip = 1;
   11a3a:	2301      	movs	r3, #1
   11a3c:	703b      	strb	r3, [r7, #0]
    for (i = 0; i < cnt; i++) {
   11a3e:	42a5      	cmp	r5, r4
   11a40:	da15      	bge.n	11a6e <console_write+0x56>
        if (console_out_nolock((int)str[i]) == EOF) {
   11a42:	5d70      	ldrb	r0, [r6, r5]
   11a44:	f000 fb42 	bl	120cc <console_out_nolock>
   11a48:	3001      	adds	r0, #1
   11a4a:	d012      	beq.n	11a72 <console_write+0x5a>
    for (i = 0; i < cnt; i++) {
   11a4c:	3501      	adds	r5, #1
   11a4e:	e7f6      	b.n	11a3e <console_write+0x26>
    if (cnt >= 3 && str[1] == CONSOLE_NLIP_PKT_START1 &&
   11a50:	2c02      	cmp	r4, #2
   11a52:	d005      	beq.n	11a60 <console_write+0x48>
   11a54:	7873      	ldrb	r3, [r6, #1]
   11a56:	2b06      	cmp	r3, #6
   11a58:	d102      	bne.n	11a60 <console_write+0x48>
   11a5a:	78b3      	ldrb	r3, [r6, #2]
   11a5c:	2b09      	cmp	r3, #9
   11a5e:	d0ec      	beq.n	11a3a <console_write+0x22>
    if (!g_is_output_nlip && g_console_silence_non_nlip) {
   11a60:	783b      	ldrb	r3, [r7, #0]
   11a62:	2b00      	cmp	r3, #0
   11a64:	d1eb      	bne.n	11a3e <console_write+0x26>
   11a66:	4b0a      	ldr	r3, [pc, #40]	; (11a90 <console_write+0x78>)
   11a68:	781b      	ldrb	r3, [r3, #0]
   11a6a:	2b00      	cmp	r3, #0
   11a6c:	d0e7      	beq.n	11a3e <console_write+0x26>
    if (cnt > 0 && str[cnt - 1] == '\n') {
   11a6e:	2c00      	cmp	r4, #0
   11a70:	dd06      	ble.n	11a80 <console_write+0x68>
   11a72:	4434      	add	r4, r6
   11a74:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   11a78:	2b0a      	cmp	r3, #10
   11a7a:	d101      	bne.n	11a80 <console_write+0x68>
        g_is_output_nlip = 0;
   11a7c:	2300      	movs	r3, #0
   11a7e:	703b      	strb	r3, [r7, #0]
}
   11a80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)console_unlock();
   11a84:	f7ff be2e 	b.w	116e4 <console_unlock>
}
   11a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11a8a:	bf00      	nop
   11a8c:	200066ab 	.word	0x200066ab
   11a90:	200066aa 	.word	0x200066aa

00011a94 <console_blocking_mode>:
   11a94:	4770      	bx	lr
	...

00011a98 <console_handle_char>:


int
console_handle_char(uint8_t byte)
{
   11a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#endif
    static struct os_event *ev;
    static struct console_input *input;
    static char prev_endl = '\0';

    if (!lines_queue) {
   11a9c:	f8df 82ec 	ldr.w	r8, [pc, #748]	; 11d8c <console_handle_char+0x2f4>
   11aa0:	f8d8 3000 	ldr.w	r3, [r8]
{
   11aa4:	b0c5      	sub	sp, #276	; 0x114
   11aa6:	4604      	mov	r4, r0
    if (!lines_queue) {
   11aa8:	b90b      	cbnz	r3, 11aae <console_handle_char+0x16>
#endif

            input = NULL;
            ev = NULL;
            console_echo(1);
            return 0;
   11aaa:	2700      	movs	r7, #0
   11aac:	e00f      	b.n	11ace <console_handle_char+0x36>
    if (!ev) {
   11aae:	f8df a2e0 	ldr.w	sl, [pc, #736]	; 11d90 <console_handle_char+0x2f8>
   11ab2:	f8da 3000 	ldr.w	r3, [sl]
   11ab6:	b98b      	cbnz	r3, 11adc <console_handle_char+0x44>
        ev = os_eventq_get_no_wait(&avail_queue);
   11ab8:	48a7      	ldr	r0, [pc, #668]	; (11d58 <console_handle_char+0x2c0>)
   11aba:	f7fb f9b1 	bl	ce20 <os_eventq_get_no_wait>
   11abe:	f8ca 0000 	str.w	r0, [sl]
        if (!ev) {
   11ac2:	b940      	cbnz	r0, 11ad6 <console_handle_char+0x3e>
            rx_stalled = true;
   11ac4:	4ba5      	ldr	r3, [pc, #660]	; (11d5c <console_handle_char+0x2c4>)
   11ac6:	2201      	movs	r2, #1
   11ac8:	701a      	strb	r2, [r3, #0]
            return -1;
   11aca:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

    if (!g_console_ignore_non_nlip) {
        insert_char(&input->line[cur], byte, end);
    }
    return 0;
}
   11ace:	4638      	mov	r0, r7
   11ad0:	b045      	add	sp, #276	; 0x114
   11ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        input = ev->ev_arg;
   11ad6:	4ba2      	ldr	r3, [pc, #648]	; (11d60 <console_handle_char+0x2c8>)
   11ad8:	6882      	ldr	r2, [r0, #8]
   11ada:	601a      	str	r2, [r3, #0]
    if (((nlip_state & NLIP_PKT_START1) &&
   11adc:	4da1      	ldr	r5, [pc, #644]	; (11d64 <console_handle_char+0x2cc>)
   11ade:	682b      	ldr	r3, [r5, #0]
   11ae0:	f003 0203 	and.w	r2, r3, #3
   11ae4:	2a03      	cmp	r2, #3
   11ae6:	d046      	beq.n	11b76 <console_handle_char+0xde>
        ((nlip_state & NLIP_DATA_START1) &&
   11ae8:	f003 020c 	and.w	r2, r3, #12
         (nlip_state & NLIP_PKT_START2)) ||
   11aec:	2a0c      	cmp	r2, #12
   11aee:	d042      	beq.n	11b76 <console_handle_char+0xde>
    if ((nlip_state & NLIP_PKT_START1) &&
   11af0:	07df      	lsls	r7, r3, #31
   11af2:	d512      	bpl.n	11b1a <console_handle_char+0x82>
   11af4:	2c09      	cmp	r4, #9
   11af6:	d110      	bne.n	11b1a <console_handle_char+0x82>
        nlip_state |= NLIP_PKT_START2;
   11af8:	f043 0302 	orr.w	r3, r3, #2
   11afc:	602b      	str	r3, [r5, #0]
    echo = on;
   11afe:	4b9a      	ldr	r3, [pc, #616]	; (11d68 <console_handle_char+0x2d0>)
   11b00:	2200      	movs	r2, #0
   11b02:	601a      	str	r2, [r3, #0]
            insert_char(&input->line[cur], CONSOLE_NLIP_PKT_START1, end);
   11b04:	4a96      	ldr	r2, [pc, #600]	; (11d60 <console_handle_char+0x2c8>)
   11b06:	4b99      	ldr	r3, [pc, #612]	; (11d6c <console_handle_char+0x2d4>)
   11b08:	6810      	ldr	r0, [r2, #0]
   11b0a:	4a99      	ldr	r2, [pc, #612]	; (11d70 <console_handle_char+0x2d8>)
   11b0c:	881b      	ldrh	r3, [r3, #0]
   11b0e:	8812      	ldrh	r2, [r2, #0]
   11b10:	2106      	movs	r1, #6
            insert_char(&input->line[cur], CONSOLE_NLIP_DATA_START1, end);
   11b12:	4418      	add	r0, r3
   11b14:	f7ff fe66 	bl	117e4 <insert_char>
   11b18:	e058      	b.n	11bcc <console_handle_char+0x134>
    } else if ((nlip_state & NLIP_DATA_START1) &&
   11b1a:	075e      	lsls	r6, r3, #29
   11b1c:	d50f      	bpl.n	11b3e <console_handle_char+0xa6>
   11b1e:	2c14      	cmp	r4, #20
   11b20:	d10d      	bne.n	11b3e <console_handle_char+0xa6>
        nlip_state |= NLIP_DATA_START2;
   11b22:	f043 0308 	orr.w	r3, r3, #8
   11b26:	602b      	str	r3, [r5, #0]
    echo = on;
   11b28:	4b8f      	ldr	r3, [pc, #572]	; (11d68 <console_handle_char+0x2d0>)
   11b2a:	2200      	movs	r2, #0
   11b2c:	601a      	str	r2, [r3, #0]
            insert_char(&input->line[cur], CONSOLE_NLIP_DATA_START1, end);
   11b2e:	4a8c      	ldr	r2, [pc, #560]	; (11d60 <console_handle_char+0x2c8>)
   11b30:	4b8e      	ldr	r3, [pc, #568]	; (11d6c <console_handle_char+0x2d4>)
   11b32:	6810      	ldr	r0, [r2, #0]
   11b34:	4a8e      	ldr	r2, [pc, #568]	; (11d70 <console_handle_char+0x2d8>)
   11b36:	881b      	ldrh	r3, [r3, #0]
   11b38:	8812      	ldrh	r2, [r2, #0]
   11b3a:	2104      	movs	r1, #4
   11b3c:	e7e9      	b.n	11b12 <console_handle_char+0x7a>
    if (esc_state & ESC_ANSI) {
   11b3e:	4e8d      	ldr	r6, [pc, #564]	; (11d74 <console_handle_char+0x2dc>)
        nlip_state = 0;
   11b40:	2300      	movs	r3, #0
   11b42:	602b      	str	r3, [r5, #0]
    if (esc_state & ESC_ANSI) {
   11b44:	6833      	ldr	r3, [r6, #0]
   11b46:	0798      	lsls	r0, r3, #30
   11b48:	d44b      	bmi.n	11be2 <console_handle_char+0x14a>
    if (esc_state & ESC_ESC) {
   11b4a:	f013 0701 	ands.w	r7, r3, #1
   11b4e:	d053      	beq.n	11bf8 <console_handle_char+0x160>
        if (g_console_ignore_non_nlip) {
   11b50:	4a89      	ldr	r2, [pc, #548]	; (11d78 <console_handle_char+0x2e0>)
   11b52:	7817      	ldrb	r7, [r2, #0]
   11b54:	2f00      	cmp	r7, #0
   11b56:	d1a8      	bne.n	11aaa <console_handle_char+0x12>
        esc_state &= ~ESC_ESC;
   11b58:	f023 0301 	bic.w	r3, r3, #1
   11b5c:	6033      	str	r3, [r6, #0]
        handle_ansi(byte, input->line);
   11b5e:	4b80      	ldr	r3, [pc, #512]	; (11d60 <console_handle_char+0x2c8>)
   11b60:	4620      	mov	r0, r4
   11b62:	6819      	ldr	r1, [r3, #0]
   11b64:	f7ff fe6c 	bl	11840 <handle_ansi>
        switch (byte) {
   11b68:	2c5b      	cmp	r4, #91	; 0x5b
   11b6a:	d19e      	bne.n	11aaa <console_handle_char+0x12>
            esc_state |= ESC_ANSI_FIRST;
   11b6c:	6833      	ldr	r3, [r6, #0]
   11b6e:	f043 0306 	orr.w	r3, r3, #6
            esc_state |= ESC_ESC;
   11b72:	6033      	str	r3, [r6, #0]
            break;
   11b74:	e7ab      	b.n	11ace <console_handle_char+0x36>
        if (byte == '\n') {
   11b76:	2c0a      	cmp	r4, #10
   11b78:	d124      	bne.n	11bc4 <console_handle_char+0x12c>
        insert_char(&input->line[cur], byte, end);
   11b7a:	4f7c      	ldr	r7, [pc, #496]	; (11d6c <console_handle_char+0x2d4>)
        handle_ansi(byte, input->line);
   11b7c:	4e78      	ldr	r6, [pc, #480]	; (11d60 <console_handle_char+0x2c8>)
        insert_char(&input->line[cur], byte, end);
   11b7e:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 11d70 <console_handle_char+0x2d8>
   11b82:	6833      	ldr	r3, [r6, #0]
   11b84:	8838      	ldrh	r0, [r7, #0]
            insert_char(&input->line[cur], byte, end);
   11b86:	f8b9 2000 	ldrh.w	r2, [r9]
   11b8a:	4621      	mov	r1, r4
   11b8c:	4418      	add	r0, r3
   11b8e:	f7ff fe29 	bl	117e4 <insert_char>
            input->line[cur] = '\0';
   11b92:	883b      	ldrh	r3, [r7, #0]
   11b94:	6832      	ldr	r2, [r6, #0]
            os_eventq_put(lines_queue, ev);
   11b96:	f8da 1000 	ldr.w	r1, [sl]
   11b9a:	f8d8 0000 	ldr.w	r0, [r8]
            input->line[cur] = '\0';
   11b9e:	2400      	movs	r4, #0
   11ba0:	54d4      	strb	r4, [r2, r3]
            cur = 0;
   11ba2:	803c      	strh	r4, [r7, #0]
            end = 0;
   11ba4:	f8a9 4000 	strh.w	r4, [r9]
            os_eventq_put(lines_queue, ev);
   11ba8:	f7fb f907 	bl	cdba <os_eventq_put>
            if (console_compat_rx_cb) {
   11bac:	4b73      	ldr	r3, [pc, #460]	; (11d7c <console_handle_char+0x2e4>)
            nlip_state = 0;
   11bae:	602c      	str	r4, [r5, #0]
            if (console_compat_rx_cb) {
   11bb0:	681b      	ldr	r3, [r3, #0]
   11bb2:	b103      	cbz	r3, 11bb6 <console_handle_char+0x11e>
                console_compat_rx_cb();
   11bb4:	4798      	blx	r3
    echo = on;
   11bb6:	4b6c      	ldr	r3, [pc, #432]	; (11d68 <console_handle_char+0x2d0>)
            input = NULL;
   11bb8:	6034      	str	r4, [r6, #0]
    echo = on;
   11bba:	2201      	movs	r2, #1
            ev = NULL;
   11bbc:	f8ca 4000 	str.w	r4, [sl]
    echo = on;
   11bc0:	601a      	str	r2, [r3, #0]
   11bc2:	e772      	b.n	11aaa <console_handle_char+0x12>
        } else if (byte == CONSOLE_NLIP_PKT_START2) {
   11bc4:	2c09      	cmp	r4, #9
   11bc6:	d09a      	beq.n	11afe <console_handle_char+0x66>
        } else if (byte == CONSOLE_NLIP_DATA_START2) {
   11bc8:	2c14      	cmp	r4, #20
   11bca:	d0ad      	beq.n	11b28 <console_handle_char+0x90>
        insert_char(&input->line[cur], byte, end);
   11bcc:	4a64      	ldr	r2, [pc, #400]	; (11d60 <console_handle_char+0x2c8>)
   11bce:	4b67      	ldr	r3, [pc, #412]	; (11d6c <console_handle_char+0x2d4>)
   11bd0:	6810      	ldr	r0, [r2, #0]
   11bd2:	881b      	ldrh	r3, [r3, #0]
   11bd4:	4a66      	ldr	r2, [pc, #408]	; (11d70 <console_handle_char+0x2d8>)
   11bd6:	4621      	mov	r1, r4
   11bd8:	8812      	ldrh	r2, [r2, #0]
   11bda:	4418      	add	r0, r3
   11bdc:	f7ff fe02 	bl	117e4 <insert_char>
        return 0;
   11be0:	e763      	b.n	11aaa <console_handle_char+0x12>
        if (g_console_ignore_non_nlip) {
   11be2:	4b65      	ldr	r3, [pc, #404]	; (11d78 <console_handle_char+0x2e0>)
   11be4:	781f      	ldrb	r7, [r3, #0]
   11be6:	2f00      	cmp	r7, #0
   11be8:	f47f af5f 	bne.w	11aaa <console_handle_char+0x12>
        handle_ansi(byte, input->line);
   11bec:	4b5c      	ldr	r3, [pc, #368]	; (11d60 <console_handle_char+0x2c8>)
   11bee:	4620      	mov	r0, r4
   11bf0:	6819      	ldr	r1, [r3, #0]
   11bf2:	f7ff fe25 	bl	11840 <handle_ansi>
        return 0;
   11bf6:	e76a      	b.n	11ace <console_handle_char+0x36>
	    (__c >= '{' && __c <= '~');
}

__extern_inline int isprint(int __c)
{
	return (__c >= 0x20 && __c <= 0x7e);
   11bf8:	f1a4 0320 	sub.w	r3, r4, #32
    if (!isprint(byte)) {
   11bfc:	2b5e      	cmp	r3, #94	; 0x5e
   11bfe:	f240 8155 	bls.w	11eac <console_handle_char+0x414>
        handle_ansi(byte, input->line);
   11c02:	f8df 915c 	ldr.w	r9, [pc, #348]	; 11d60 <console_handle_char+0x2c8>
   11c06:	4620      	mov	r0, r4
   11c08:	f8d9 1000 	ldr.w	r1, [r9]
   11c0c:	f7ff fe18 	bl	11840 <handle_ansi>
        switch (byte) {
   11c10:	2c0d      	cmp	r4, #13
   11c12:	d810      	bhi.n	11c36 <console_handle_char+0x19e>
   11c14:	2c03      	cmp	r4, #3
   11c16:	d914      	bls.n	11c42 <console_handle_char+0x1aa>
   11c18:	1f23      	subs	r3, r4, #4
   11c1a:	2b09      	cmp	r3, #9
   11c1c:	d811      	bhi.n	11c42 <console_handle_char+0x1aa>
   11c1e:	e8df f013 	tbh	[pc, r3, lsl #1]
   11c22:	0096      	.short	0x0096
   11c24:	00910010 	.word	0x00910010
   11c28:	00b90010 	.word	0x00b90010
   11c2c:	00d70131 	.word	0x00d70131
   11c30:	00100010 	.word	0x00100010
   11c34:	00d7      	.short	0x00d7
   11c36:	2c1b      	cmp	r4, #27
   11c38:	f000 80c1 	beq.w	11dbe <console_handle_char+0x326>
   11c3c:	2c7f      	cmp	r4, #127	; 0x7f
   11c3e:	f000 80a9 	beq.w	11d94 <console_handle_char+0x2fc>
            insert_char(&input->line[cur], byte, end);
   11c42:	4b4a      	ldr	r3, [pc, #296]	; (11d6c <console_handle_char+0x2d4>)
   11c44:	4a4a      	ldr	r2, [pc, #296]	; (11d70 <console_handle_char+0x2d8>)
   11c46:	8818      	ldrh	r0, [r3, #0]
   11c48:	f8d9 3000 	ldr.w	r3, [r9]
   11c4c:	8812      	ldrh	r2, [r2, #0]
   11c4e:	4621      	mov	r1, r4
   11c50:	4418      	add	r0, r3
   11c52:	f7ff fdc7 	bl	117e4 <insert_char>
            prev_endl = byte;
   11c56:	4b4a      	ldr	r3, [pc, #296]	; (11d80 <console_handle_char+0x2e8>)
            input->line[cur + end] = '\0';
   11c58:	4e44      	ldr	r6, [pc, #272]	; (11d6c <console_handle_char+0x2d4>)
   11c5a:	4d45      	ldr	r5, [pc, #276]	; (11d70 <console_handle_char+0x2d8>)
   11c5c:	8831      	ldrh	r1, [r6, #0]
            prev_endl = byte;
   11c5e:	701c      	strb	r4, [r3, #0]
            input->line[cur + end] = '\0';
   11c60:	f8d9 3000 	ldr.w	r3, [r9]
   11c64:	882a      	ldrh	r2, [r5, #0]
   11c66:	440b      	add	r3, r1
   11c68:	2400      	movs	r4, #0
   11c6a:	549c      	strb	r4, [r3, r2]
            console_out('\r');
   11c6c:	200d      	movs	r0, #13
   11c6e:	f7ff fd53 	bl	11718 <console_out>
            console_out('\n');
   11c72:	200a      	movs	r0, #10
   11c74:	f7ff fd50 	bl	11718 <console_out>
            end = 0;
   11c78:	802c      	strh	r4, [r5, #0]
    sh->curr = sh->head;
   11c7a:	4d42      	ldr	r5, [pc, #264]	; (11d84 <console_handle_char+0x2ec>)
            os_eventq_put(lines_queue, ev);
   11c7c:	f8d8 0000 	ldr.w	r0, [r8]
   11c80:	f8da 1000 	ldr.w	r1, [sl]
            cur = 0;
   11c84:	8034      	strh	r4, [r6, #0]
            os_eventq_put(lines_queue, ev);
   11c86:	f7fb f898 	bl	cdba <os_eventq_put>
    sh->curr = sh->head;
   11c8a:	f895 b000 	ldrb.w	fp, [r5]
   11c8e:	f8d9 2000 	ldr.w	r2, [r9]
	return __c == ' ' || __c == '\n' || __c == '\t' || __c == '\r';
   11c92:	483d      	ldr	r0, [pc, #244]	; (11d88 <console_handle_char+0x2f0>)
   11c94:	f885 b003 	strb.w	fp, [r5, #3]
    while (isspace((unsigned char)*str)) {
   11c98:	7811      	ldrb	r1, [r2, #0]
   11c9a:	f1a1 0309 	sub.w	r3, r1, #9
   11c9e:	b2db      	uxtb	r3, r3
   11ca0:	2b17      	cmp	r3, #23
   11ca2:	4614      	mov	r4, r2
   11ca4:	f102 0201 	add.w	r2, r2, #1
   11ca8:	f240 809c 	bls.w	11de4 <console_handle_char+0x34c>
    if (*str == 0) { /* All spaces? */
   11cac:	2900      	cmp	r1, #0
   11cae:	f000 80c1 	beq.w	11e34 <console_handle_char+0x39c>
    end = str + strlen(str) - 1;
   11cb2:	4620      	mov	r0, r4
   11cb4:	f008 f8dc 	bl	19e70 <strlen>
   11cb8:	4a33      	ldr	r2, [pc, #204]	; (11d88 <console_handle_char+0x2f0>)
   11cba:	3801      	subs	r0, #1
   11cbc:	4420      	add	r0, r4
    while (end > str && isspace((unsigned char)*end)) {
   11cbe:	4284      	cmp	r4, r0
   11cc0:	4606      	mov	r6, r0
   11cc2:	d20a      	bcs.n	11cda <console_handle_char+0x242>
   11cc4:	7833      	ldrb	r3, [r6, #0]
   11cc6:	3b09      	subs	r3, #9
   11cc8:	b2db      	uxtb	r3, r3
   11cca:	2b17      	cmp	r3, #23
   11ccc:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
   11cd0:	d803      	bhi.n	11cda <console_handle_char+0x242>
   11cd2:	fa22 f303 	lsr.w	r3, r2, r3
   11cd6:	07db      	lsls	r3, r3, #31
   11cd8:	d4f1      	bmi.n	11cbe <console_handle_char+0x226>
    end++;
   11cda:	3601      	adds	r6, #1
    out_size = min(end - str, len - 1);
   11cdc:	eba6 0804 	sub.w	r8, r6, r4
   11ce0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   11ce4:	bf28      	it	cs
   11ce6:	f04f 08ff 	movcs.w	r8, #255	; 0xff
    memcpy(out, str, out_size);
   11cea:	4642      	mov	r2, r8
   11cec:	4621      	mov	r1, r4
   11cee:	a804      	add	r0, sp, #16
   11cf0:	f7fe fabe 	bl	10270 <memcpy>
    out[out_size] = 0;
   11cf4:	aa04      	add	r2, sp, #16
   11cf6:	2300      	movs	r3, #0
    if (!len) {
   11cf8:	42b4      	cmp	r4, r6
    out[out_size] = 0;
   11cfa:	f802 3008 	strb.w	r3, [r2, r8]
    if (!len) {
   11cfe:	f000 8099 	beq.w	11e34 <console_handle_char+0x39c>
    curr = sh->tail;
   11d02:	f895 8001 	ldrb.w	r8, [r5, #1]
    return (uint8_t) ((i + 1) % size);
   11d06:	78ab      	ldrb	r3, [r5, #2]
    curr = sh->tail;
   11d08:	4646      	mov	r6, r8
        if (strcmp(sh->lines[curr], line) == 0) {
   11d0a:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
    while (curr != sh->head) {
   11d0e:	45b3      	cmp	fp, r6
    return (uint8_t) ((i + 1) % size);
   11d10:	f106 0401 	add.w	r4, r6, #1
        if (strcmp(sh->lines[curr], line) == 0) {
   11d14:	f8dc 2004 	ldr.w	r2, [ip, #4]
   11d18:	fbb4 f0f3 	udiv	r0, r4, r3
   11d1c:	ea4f 0186 	mov.w	r1, r6, lsl #2
   11d20:	9001      	str	r0, [sp, #4]
    while (curr != sh->head) {
   11d22:	d165      	bne.n	11df0 <console_handle_char+0x358>
    return (uint8_t) ((i + 1) % size);
   11d24:	9801      	ldr	r0, [sp, #4]
   11d26:	fb03 4410 	mls	r4, r3, r0, r4
    if (console_hist_is_full()) {
   11d2a:	b2e4      	uxtb	r4, r4
   11d2c:	45a0      	cmp	r8, r4
   11d2e:	f040 8099 	bne.w	11e64 <console_handle_char+0x3cc>
        assert(sh->lines[sh->head] == NULL);
   11d32:	2a00      	cmp	r2, #0
   11d34:	f000 8088 	beq.w	11e48 <console_handle_char+0x3b0>
   11d38:	2300      	movs	r3, #0
   11d3a:	461a      	mov	r2, r3
   11d3c:	4619      	mov	r1, r3
   11d3e:	4618      	mov	r0, r3
   11d40:	f7fa fd5c 	bl	c7fc <__assert_func>
            nlip_state |= NLIP_PKT_START1;
   11d44:	682b      	ldr	r3, [r5, #0]
   11d46:	f043 0301 	orr.w	r3, r3, #1
            nlip_state |= NLIP_DATA_START1;
   11d4a:	602b      	str	r3, [r5, #0]
            break;
   11d4c:	e6bf      	b.n	11ace <console_handle_char+0x36>
            nlip_state |= NLIP_DATA_START1;
   11d4e:	682b      	ldr	r3, [r5, #0]
   11d50:	f043 0304 	orr.w	r3, r3, #4
   11d54:	e7f9      	b.n	11d4a <console_handle_char+0x2b2>
   11d56:	bf00      	nop
   11d58:	20005e4c 	.word	0x20005e4c
   11d5c:	200066b9 	.word	0x200066b9
   11d60:	200066ac 	.word	0x200066ac
   11d64:	200066b4 	.word	0x200066b4
   11d68:	200013fc 	.word	0x200013fc
   11d6c:	2000669c 	.word	0x2000669c
   11d70:	2000669e 	.word	0x2000669e
   11d74:	200066a0 	.word	0x200066a0
   11d78:	200066a8 	.word	0x200066a8
   11d7c:	20005e60 	.word	0x20005e60
   11d80:	200066b8 	.word	0x200066b8
   11d84:	20005e64 	.word	0x20005e64
   11d88:	00800013 	.word	0x00800013
   11d8c:	200066b0 	.word	0x200066b0
   11d90:	200066a4 	.word	0x200066a4
            if (g_console_ignore_non_nlip) {
   11d94:	4b50      	ldr	r3, [pc, #320]	; (11ed8 <console_handle_char+0x440>)
   11d96:	781b      	ldrb	r3, [r3, #0]
   11d98:	2b00      	cmp	r3, #0
   11d9a:	f47f ae86 	bne.w	11aaa <console_handle_char+0x12>
            if (cur > 0) {
   11d9e:	4a4f      	ldr	r2, [pc, #316]	; (11edc <console_handle_char+0x444>)
   11da0:	8813      	ldrh	r3, [r2, #0]
   11da2:	2b00      	cmp	r3, #0
   11da4:	f43f ae81 	beq.w	11aaa <console_handle_char+0x12>
                del_char(&input->line[--cur], end);
   11da8:	3b01      	subs	r3, #1
   11daa:	b29b      	uxth	r3, r3
   11dac:	8013      	strh	r3, [r2, #0]
   11dae:	f8d9 0000 	ldr.w	r0, [r9]
   11db2:	4a4b      	ldr	r2, [pc, #300]	; (11ee0 <console_handle_char+0x448>)
   11db4:	4418      	add	r0, r3
   11db6:	8811      	ldrh	r1, [r2, #0]
   11db8:	f7ff fcf2 	bl	117a0 <del_char>
   11dbc:	e687      	b.n	11ace <console_handle_char+0x36>
            if (g_console_ignore_non_nlip) {
   11dbe:	4b46      	ldr	r3, [pc, #280]	; (11ed8 <console_handle_char+0x440>)
   11dc0:	781b      	ldrb	r3, [r3, #0]
   11dc2:	2b00      	cmp	r3, #0
   11dc4:	f47f ae71 	bne.w	11aaa <console_handle_char+0x12>
            esc_state |= ESC_ESC;
   11dc8:	6833      	ldr	r3, [r6, #0]
   11dca:	f043 0301 	orr.w	r3, r3, #1
   11dce:	e6d0      	b.n	11b72 <console_handle_char+0xda>
            if (byte == '\n' && prev_endl == '\r') {
   11dd0:	2c0a      	cmp	r4, #10
   11dd2:	f47f af40 	bne.w	11c56 <console_handle_char+0x1be>
   11dd6:	4b43      	ldr	r3, [pc, #268]	; (11ee4 <console_handle_char+0x44c>)
   11dd8:	781a      	ldrb	r2, [r3, #0]
   11dda:	2a0d      	cmp	r2, #13
   11ddc:	f47f af3b 	bne.w	11c56 <console_handle_char+0x1be>
                prev_endl = byte;
   11de0:	701c      	strb	r4, [r3, #0]
                break;
   11de2:	e674      	b.n	11ace <console_handle_char+0x36>
   11de4:	fa20 f303 	lsr.w	r3, r0, r3
   11de8:	07d9      	lsls	r1, r3, #31
   11dea:	f53f af55 	bmi.w	11c98 <console_handle_char+0x200>
   11dee:	e760      	b.n	11cb2 <console_handle_char+0x21a>
        if (strcmp(sh->lines[curr], line) == 0) {
   11df0:	4610      	mov	r0, r2
   11df2:	a904      	add	r1, sp, #16
   11df4:	9303      	str	r3, [sp, #12]
   11df6:	9202      	str	r2, [sp, #8]
   11df8:	f7fe fa62 	bl	102c0 <strcmp>
   11dfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   11e00:	2800      	cmp	r0, #0
   11e02:	d063      	beq.n	11ecc <console_handle_char+0x434>
    return (uint8_t) ((i + 1) % size);
   11e04:	9a01      	ldr	r2, [sp, #4]
   11e06:	fb03 4412 	mls	r4, r3, r2, r4
   11e0a:	b2e6      	uxtb	r6, r4
   11e0c:	e77d      	b.n	11d0a <console_handle_char+0x272>
        sh->lines[prev] = sh->lines[curr];
   11e0e:	eb05 0184 	add.w	r1, r5, r4, lsl #2
   11e12:	442e      	add	r6, r5
   11e14:	6849      	ldr	r1, [r1, #4]
   11e16:	6071      	str	r1, [r6, #4]
    return (uint8_t) ((i + 1) % size);
   11e18:	1c61      	adds	r1, r4, #1
   11e1a:	b2c9      	uxtb	r1, r1
   11e1c:	fbb1 f0f3 	udiv	r0, r1, r3
   11e20:	fb03 1110 	mls	r1, r3, r0, r1
   11e24:	4626      	mov	r6, r4
        curr = ring_buf_next(curr, sh->size);
   11e26:	b2cc      	uxtb	r4, r1
    while (curr != sh->head) {
   11e28:	45a3      	cmp	fp, r4
   11e2a:	ea4f 0686 	mov.w	r6, r6, lsl #2
   11e2e:	d1ee      	bne.n	11e0e <console_handle_char+0x376>
    sh->lines[prev] = match;
   11e30:	442e      	add	r6, r5
   11e32:	6072      	str	r2, [r6, #4]
            if (console_compat_rx_cb) {
   11e34:	4b2c      	ldr	r3, [pc, #176]	; (11ee8 <console_handle_char+0x450>)
   11e36:	681b      	ldr	r3, [r3, #0]
   11e38:	b103      	cbz	r3, 11e3c <console_handle_char+0x3a4>
                console_compat_rx_cb();
   11e3a:	4798      	blx	r3
            input = NULL;
   11e3c:	2300      	movs	r3, #0
   11e3e:	f8c9 3000 	str.w	r3, [r9]
            ev = NULL;
   11e42:	f8ca 3000 	str.w	r3, [sl]
            break;
   11e46:	e642      	b.n	11ace <console_handle_char+0x36>
        sh->lines[sh->head] = sh->lines[sh->tail];
   11e48:	eb05 0488 	add.w	r4, r5, r8, lsl #2
    return (uint8_t) ((i + 1) % size);
   11e4c:	f108 0801 	add.w	r8, r8, #1
        sh->lines[sh->head] = sh->lines[sh->tail];
   11e50:	6860      	ldr	r0, [r4, #4]
   11e52:	f8cc 0004 	str.w	r0, [ip, #4]
        sh->lines[sh->tail] = NULL;
   11e56:	6062      	str	r2, [r4, #4]
    return (uint8_t) ((i + 1) % size);
   11e58:	fbb8 f2f3 	udiv	r2, r8, r3
   11e5c:	fb03 8812 	mls	r8, r3, r2, r8
   11e60:	f885 8001 	strb.w	r8, [r5, #1]
    strcpy(sh->lines[sh->head], buf);
   11e64:	186b      	adds	r3, r5, r1
   11e66:	a904      	add	r1, sp, #16
   11e68:	6858      	ldr	r0, [r3, #4]
   11e6a:	f007 fff9 	bl	19e60 <strcpy>
    return (uint8_t) ((i + 1) % size);
   11e6e:	782b      	ldrb	r3, [r5, #0]
   11e70:	78aa      	ldrb	r2, [r5, #2]
   11e72:	3301      	adds	r3, #1
   11e74:	fbb3 f1f2 	udiv	r1, r3, r2
   11e78:	fb02 3311 	mls	r3, r2, r1, r3
   11e7c:	b2db      	uxtb	r3, r3
    sh->head = ring_buf_next(sh->head, sh->size);
   11e7e:	702b      	strb	r3, [r5, #0]
    sh->curr = sh->head;
   11e80:	70eb      	strb	r3, [r5, #3]
   11e82:	e7d7      	b.n	11e34 <console_handle_char+0x39c>
            if (g_console_ignore_non_nlip) {
   11e84:	4b14      	ldr	r3, [pc, #80]	; (11ed8 <console_handle_char+0x440>)
   11e86:	781b      	ldrb	r3, [r3, #0]
   11e88:	2b00      	cmp	r3, #0
   11e8a:	f47f ae0e 	bne.w	11aaa <console_handle_char+0x12>
            if (completion && !end) {
   11e8e:	4b17      	ldr	r3, [pc, #92]	; (11eec <console_handle_char+0x454>)
   11e90:	681b      	ldr	r3, [r3, #0]
   11e92:	2b00      	cmp	r3, #0
   11e94:	f43f ae09 	beq.w	11aaa <console_handle_char+0x12>
   11e98:	4a11      	ldr	r2, [pc, #68]	; (11ee0 <console_handle_char+0x448>)
   11e9a:	8812      	ldrh	r2, [r2, #0]
   11e9c:	2a00      	cmp	r2, #0
   11e9e:	f47f ae04 	bne.w	11aaa <console_handle_char+0x12>
                completion(input->line, console_append_char);
   11ea2:	4913      	ldr	r1, [pc, #76]	; (11ef0 <console_handle_char+0x458>)
   11ea4:	f8d9 0000 	ldr.w	r0, [r9]
   11ea8:	4798      	blx	r3
   11eaa:	e610      	b.n	11ace <console_handle_char+0x36>
    if (!g_console_ignore_non_nlip) {
   11eac:	4b0a      	ldr	r3, [pc, #40]	; (11ed8 <console_handle_char+0x440>)
   11eae:	781b      	ldrb	r3, [r3, #0]
   11eb0:	2b00      	cmp	r3, #0
   11eb2:	f47f adfa 	bne.w	11aaa <console_handle_char+0x12>
        insert_char(&input->line[cur], byte, end);
   11eb6:	4a0f      	ldr	r2, [pc, #60]	; (11ef4 <console_handle_char+0x45c>)
   11eb8:	4b08      	ldr	r3, [pc, #32]	; (11edc <console_handle_char+0x444>)
   11eba:	6810      	ldr	r0, [r2, #0]
   11ebc:	881b      	ldrh	r3, [r3, #0]
   11ebe:	4a08      	ldr	r2, [pc, #32]	; (11ee0 <console_handle_char+0x448>)
   11ec0:	4621      	mov	r1, r4
   11ec2:	8812      	ldrh	r2, [r2, #0]
   11ec4:	4418      	add	r0, r3
   11ec6:	f7ff fc8d 	bl	117e4 <insert_char>
   11eca:	e600      	b.n	11ace <console_handle_char+0x36>
    return (uint8_t) ((i + 1) % size);
   11ecc:	9901      	ldr	r1, [sp, #4]
   11ece:	fb03 4411 	mls	r4, r3, r1, r4
   11ed2:	b2e4      	uxtb	r4, r4
    while (curr != sh->head) {
   11ed4:	e7a8      	b.n	11e28 <console_handle_char+0x390>
   11ed6:	bf00      	nop
   11ed8:	200066a8 	.word	0x200066a8
   11edc:	2000669c 	.word	0x2000669c
   11ee0:	2000669e 	.word	0x2000669e
   11ee4:	200066b8 	.word	0x200066b8
   11ee8:	20005e60 	.word	0x20005e60
   11eec:	20005e5c 	.word	0x20005e5c
   11ef0:	00011735 	.word	0x00011735
   11ef4:	200066ac 	.word	0x200066ac

00011ef8 <console_is_init>:
{
#if MYNEWT_VAL(CONSOLE_UART)
    return uart_console_is_init();
#endif
#if MYNEWT_VAL(CONSOLE_RTT)
    return rtt_console_is_init();
   11ef8:	f000 b90a 	b.w	12110 <rtt_console_is_init>

00011efc <console_line_queue_set>:
}

void
console_line_queue_set(struct os_eventq *evq)
{
    lines_queue = evq;
   11efc:	4b01      	ldr	r3, [pc, #4]	; (11f04 <console_line_queue_set+0x8>)
   11efe:	6018      	str	r0, [r3, #0]
}
   11f00:	4770      	bx	lr
   11f02:	bf00      	nop
   11f04:	200066b0 	.word	0x200066b0

00011f08 <console_line_event_put>:

void
console_line_event_put(struct os_event *ev)
{
   11f08:	b508      	push	{r3, lr}
   11f0a:	4601      	mov	r1, r0
    os_eventq_put(&avail_queue, ev);
   11f0c:	4806      	ldr	r0, [pc, #24]	; (11f28 <console_line_event_put+0x20>)
   11f0e:	f7fa ff54 	bl	cdba <os_eventq_put>

    if (rx_stalled) {
   11f12:	4b06      	ldr	r3, [pc, #24]	; (11f2c <console_line_event_put+0x24>)
   11f14:	781a      	ldrb	r2, [r3, #0]
   11f16:	b12a      	cbz	r2, 11f24 <console_line_event_put+0x1c>
        rx_stalled = false;
   11f18:	2200      	movs	r2, #0
   11f1a:	701a      	strb	r2, [r3, #0]
        console_rx_restart();
    }
}
   11f1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        console_rx_restart();
   11f20:	f000 b8f0 	b.w	12104 <console_rx_restart>
}
   11f24:	bd08      	pop	{r3, pc}
   11f26:	bf00      	nop
   11f28:	20005e4c 	.word	0x20005e4c
   11f2c:	200066b9 	.word	0x200066b9

00011f30 <console_set_completion_cb>:

void
console_set_completion_cb(completion_cb cb)
{
    completion = cb;
   11f30:	4b01      	ldr	r3, [pc, #4]	; (11f38 <console_set_completion_cb+0x8>)
   11f32:	6018      	str	r0, [r3, #0]
}
   11f34:	4770      	bx	lr
   11f36:	bf00      	nop
   11f38:	20005e5c 	.word	0x20005e5c

00011f3c <console_pkg_init>:
}
#endif

void
console_pkg_init(void)
{
   11f3c:	b513      	push	{r0, r1, r4, lr}
    int rc = 0;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   11f3e:	4b19      	ldr	r3, [pc, #100]	; (11fa4 <console_pkg_init+0x68>)
   11f40:	781b      	ldrb	r3, [r3, #0]
   11f42:	b923      	cbnz	r3, 11f4e <console_pkg_init+0x12>
   11f44:	461a      	mov	r2, r3
   11f46:	4619      	mov	r1, r3
   11f48:	4618      	mov	r0, r3
   11f4a:	f7fa fc57 	bl	c7fc <__assert_func>

    os_eventq_init(&avail_queue);
   11f4e:	4816      	ldr	r0, [pc, #88]	; (11fa8 <console_pkg_init+0x6c>)
   11f50:	f7fa ff24 	bl	cd9c <os_eventq_init>
    os_mutex_init(&console_write_lock);
   11f54:	4815      	ldr	r0, [pc, #84]	; (11fac <console_pkg_init+0x70>)
   11f56:	f7fb f8fd 	bl	d154 <os_mutex_init>
    memset(console_hist_lines, 0, sizeof(console_hist_lines));
   11f5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   11f5e:	2100      	movs	r1, #0
   11f60:	4813      	ldr	r0, [pc, #76]	; (11fb0 <console_pkg_init+0x74>)
   11f62:	f7fe f992 	bl	1028a <memset>
    memset(&console_hist, 0, sizeof(console_hist));
   11f66:	4b13      	ldr	r3, [pc, #76]	; (11fb4 <console_pkg_init+0x78>)
   11f68:	2228      	movs	r2, #40	; 0x28
   11f6a:	2100      	movs	r1, #0
   11f6c:	4618      	mov	r0, r3
   11f6e:	f7fe f98c 	bl	1028a <memset>
    sh->size = MYNEWT_VAL(CONSOLE_HISTORY_SIZE) + 1;
   11f72:	2209      	movs	r2, #9
   11f74:	490e      	ldr	r1, [pc, #56]	; (11fb0 <console_pkg_init+0x74>)
   11f76:	7082      	strb	r2, [r0, #2]
    memset(&console_hist, 0, sizeof(console_hist));
   11f78:	4603      	mov	r3, r0
    for (i = 0; i < sh->size - 1; i++) {
   11f7a:	2200      	movs	r2, #0
   11f7c:	3201      	adds	r2, #1
   11f7e:	2a08      	cmp	r2, #8
        sh->lines[i] = console_hist_lines[i];
   11f80:	f843 1f04 	str.w	r1, [r3, #4]!
    for (i = 0; i < sh->size - 1; i++) {
   11f84:	f501 7180 	add.w	r1, r1, #256	; 0x100
   11f88:	d1f8      	bne.n	11f7c <console_pkg_init+0x40>

#if MYNEWT_VAL(CONSOLE_UART)
    rc = uart_console_init();
#endif
#if MYNEWT_VAL(CONSOLE_RTT)
    rc = rtt_console_init();
   11f8a:	f000 f8c3 	bl	12114 <rtt_console_init>
#endif
    SYSINIT_PANIC_ASSERT(rc == 0);
   11f8e:	b138      	cbz	r0, 11fa0 <console_pkg_init+0x64>
   11f90:	2300      	movs	r3, #0
   11f92:	4a09      	ldr	r2, [pc, #36]	; (11fb8 <console_pkg_init+0x7c>)
   11f94:	9300      	str	r3, [sp, #0]
   11f96:	6814      	ldr	r4, [r2, #0]
   11f98:	4619      	mov	r1, r3
   11f9a:	461a      	mov	r2, r3
   11f9c:	4618      	mov	r0, r3
   11f9e:	47a0      	blx	r4
}
   11fa0:	b002      	add	sp, #8
   11fa2:	bd10      	pop	{r4, pc}
   11fa4:	20006af4 	.word	0x20006af4
   11fa8:	20005e4c 	.word	0x20005e4c
   11fac:	20006690 	.word	0x20006690
   11fb0:	20005e8c 	.word	0x20005e8c
   11fb4:	20005e64 	.word	0x20005e64
   11fb8:	2000143c 	.word	0x2000143c

00011fbc <console_vprintf>:

#if MYNEWT_VAL(BASELIBC_PRESENT)

int
console_vprintf(const char *fmt, va_list ap)
{
   11fbc:	b570      	push	{r4, r5, r6, lr}
   11fbe:	4605      	mov	r5, r0
   11fc0:	460e      	mov	r6, r1
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
   11fc2:	f000 f8c5 	bl	12150 <console_get_ticks>
   11fc6:	4604      	mov	r4, r0
   11fc8:	b148      	cbz	r0, 11fde <console_vprintf+0x22>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
   11fca:	4b09      	ldr	r3, [pc, #36]	; (11ff0 <console_vprintf+0x34>)
   11fcc:	681b      	ldr	r3, [r3, #0]
   11fce:	b963      	cbnz	r3, 11fea <console_vprintf+0x2e>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
   11fd0:	f7fb fcb4 	bl	d93c <os_time_get>
   11fd4:	4601      	mov	r1, r0
   11fd6:	4807      	ldr	r0, [pc, #28]	; (11ff4 <console_vprintf+0x38>)
   11fd8:	f7fe fc30 	bl	1083c <printf>
   11fdc:	4604      	mov	r4, r0
        }
    }

    num_chars += vprintf(fmt, ap);
   11fde:	4631      	mov	r1, r6
   11fe0:	4628      	mov	r0, r5
   11fe2:	f007 ff83 	bl	19eec <vprintf>

    return num_chars;
}
   11fe6:	4420      	add	r0, r4
   11fe8:	bd70      	pop	{r4, r5, r6, pc}
    num_chars = 0;
   11fea:	2400      	movs	r4, #0
   11fec:	e7f7      	b.n	11fde <console_vprintf+0x22>
   11fee:	bf00      	nop
   11ff0:	2000668c 	.word	0x2000668c
   11ff4:	00020a64 	.word	0x00020a64

00011ff8 <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
   11ff8:	b40f      	push	{r0, r1, r2, r3}
   11ffa:	b507      	push	{r0, r1, r2, lr}
   11ffc:	a904      	add	r1, sp, #16
   11ffe:	f851 0b04 	ldr.w	r0, [r1], #4
    va_list args;
    int num_chars;

    va_start(args, fmt);
   12002:	9101      	str	r1, [sp, #4]
    num_chars = console_vprintf(fmt, args);
   12004:	f7ff ffda 	bl	11fbc <console_vprintf>
    va_end(args);

    return num_chars;
}
   12008:	b003      	add	sp, #12
   1200a:	f85d eb04 	ldr.w	lr, [sp], #4
   1200e:	b004      	add	sp, #16
   12010:	4770      	bx	lr
	...

00012014 <rtt_console_write_ch>:
    }
}

static void
rtt_console_write_ch(char c)
{
   12014:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12016:	4c12      	ldr	r4, [pc, #72]	; (12060 <rtt_console_write_ch+0x4c>)
   12018:	4e12      	ldr	r6, [pc, #72]	; (12064 <rtt_console_write_ch+0x50>)
   1201a:	f88d 0007 	strb.w	r0, [sp, #7]
    static int rtt_console_retries_left = MYNEWT_VAL(CONSOLE_RTT_RETRY_COUNT);
    os_sr_t sr;
    int ret;

    while (1) {
        OS_ENTER_CRITICAL(sr);
   1201e:	f7fa fb33 	bl	c688 <os_arch_save_sr>
        ret = SEGGER_RTT_WriteNoLock(0, &c, 1);
   12022:	2201      	movs	r2, #1
        OS_ENTER_CRITICAL(sr);
   12024:	4607      	mov	r7, r0
        ret = SEGGER_RTT_WriteNoLock(0, &c, 1);
   12026:	f10d 0107 	add.w	r1, sp, #7
   1202a:	2000      	movs	r0, #0
   1202c:	f003 fa7c 	bl	15528 <SEGGER_RTT_WriteNoLock>
   12030:	4605      	mov	r5, r0
        OS_EXIT_CRITICAL(sr);
   12032:	4638      	mov	r0, r7
   12034:	f7fa fb2e 	bl	c694 <os_arch_restore_sr>
         * retries (which means that most likely there is no host connected to
         * read data), we stop retrying until successful write (which means that
         * host is reading data).
         */

        if (ret) {
   12038:	b11d      	cbz	r5, 12042 <rtt_console_write_ch+0x2e>
            rtt_console_retries_left = MYNEWT_VAL(CONSOLE_RTT_RETRY_COUNT);
   1203a:	2302      	movs	r3, #2
   1203c:	6023      	str	r3, [r4, #0]
        }

        rtt_console_wait_for_retry();
        rtt_console_retries_left--;
    }
}
   1203e:	b003      	add	sp, #12
   12040:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (rtt_console_retries_left <= 0) {
   12042:	6823      	ldr	r3, [r4, #0]
   12044:	2b00      	cmp	r3, #0
   12046:	ddfa      	ble.n	1203e <rtt_console_write_ch+0x2a>
   12048:	6873      	ldr	r3, [r6, #4]
   1204a:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) {
   1204e:	b913      	cbnz	r3, 12056 <rtt_console_write_ch+0x42>
        os_time_delay(ticks);
   12050:	2001      	movs	r0, #1
   12052:	f7fb fcb7 	bl	d9c4 <os_time_delay>
        rtt_console_retries_left--;
   12056:	6823      	ldr	r3, [r4, #0]
   12058:	3b01      	subs	r3, #1
   1205a:	6023      	str	r3, [r4, #0]
        OS_ENTER_CRITICAL(sr);
   1205c:	e7df      	b.n	1201e <rtt_console_write_ch+0xa>
   1205e:	bf00      	nop
   12060:	20001408 	.word	0x20001408
   12064:	e000ed00 	.word	0xe000ed00

00012068 <rtt_console_poll_func>:
#define RTT_INPUT_POLL_INTERVAL_STEP    10 /* ms */
#define RTT_INPUT_POLL_INTERVAL_MAX     MYNEWT_VAL(CONSOLE_RTT_INPUT_POLL_INTERVAL_MAX)

static void
rtt_console_poll_func(void *arg)
{
   12068:	b510      	push	{r4, lr}
    static uint32_t itvl_ms = RTT_INPUT_POLL_INTERVAL_MIN;
    static int key = -1;
    int ret;

    if (key < 0) {
   1206a:	4c15      	ldr	r4, [pc, #84]	; (120c0 <rtt_console_poll_func+0x58>)
   1206c:	6823      	ldr	r3, [r4, #0]
   1206e:	2b00      	cmp	r3, #0
   12070:	da1d      	bge.n	120ae <rtt_console_poll_func+0x46>
        key = SEGGER_RTT_GetKey();
   12072:	f003 fb2f 	bl	156d4 <SEGGER_RTT_GetKey>
    }

    if (key < 0) {
   12076:	2800      	cmp	r0, #0
        key = SEGGER_RTT_GetKey();
   12078:	6020      	str	r0, [r4, #0]
    if (key < 0) {
   1207a:	da18      	bge.n	120ae <rtt_console_poll_func+0x46>
        itvl_ms += RTT_INPUT_POLL_INTERVAL_STEP;
        itvl_ms = min(itvl_ms, RTT_INPUT_POLL_INTERVAL_MAX);
   1207c:	4a11      	ldr	r2, [pc, #68]	; (120c4 <rtt_console_poll_func+0x5c>)
        itvl_ms += RTT_INPUT_POLL_INTERVAL_STEP;
   1207e:	6813      	ldr	r3, [r2, #0]
   12080:	330a      	adds	r3, #10
        itvl_ms = min(itvl_ms, RTT_INPUT_POLL_INTERVAL_MAX);
   12082:	2bfa      	cmp	r3, #250	; 0xfa
   12084:	bf28      	it	cs
   12086:	23fa      	movcs	r3, #250	; 0xfa
   12088:	6013      	str	r3, [r2, #0]
            key = SEGGER_RTT_GetKey();
        }
        itvl_ms = RTT_INPUT_POLL_INTERVAL_MIN;
    }

    os_cputime_timer_relative(&rtt_timer, itvl_ms * 1000);
   1208a:	4b0e      	ldr	r3, [pc, #56]	; (120c4 <rtt_console_poll_func+0x5c>)
   1208c:	480e      	ldr	r0, [pc, #56]	; (120c8 <rtt_console_poll_func+0x60>)
   1208e:	681b      	ldr	r3, [r3, #0]
   12090:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
}
   12094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    os_cputime_timer_relative(&rtt_timer, itvl_ms * 1000);
   12098:	4359      	muls	r1, r3
   1209a:	f7fa bddc 	b.w	cc56 <os_cputime_timer_relative>
            ret = console_handle_char((char)key);
   1209e:	b2c0      	uxtb	r0, r0
   120a0:	f7ff fcfa 	bl	11a98 <console_handle_char>
            if (ret < 0) {
   120a4:	2800      	cmp	r0, #0
   120a6:	db09      	blt.n	120bc <rtt_console_poll_func+0x54>
            key = SEGGER_RTT_GetKey();
   120a8:	f003 fb14 	bl	156d4 <SEGGER_RTT_GetKey>
   120ac:	6020      	str	r0, [r4, #0]
        while (key >= 0) {
   120ae:	6820      	ldr	r0, [r4, #0]
   120b0:	2800      	cmp	r0, #0
   120b2:	daf4      	bge.n	1209e <rtt_console_poll_func+0x36>
        itvl_ms = RTT_INPUT_POLL_INTERVAL_MIN;
   120b4:	4b03      	ldr	r3, [pc, #12]	; (120c4 <rtt_console_poll_func+0x5c>)
   120b6:	220a      	movs	r2, #10
   120b8:	601a      	str	r2, [r3, #0]
   120ba:	e7e6      	b.n	1208a <rtt_console_poll_func+0x22>
}
   120bc:	bd10      	pop	{r4, pc}
   120be:	bf00      	nop
   120c0:	20001404 	.word	0x20001404
   120c4:	20001400 	.word	0x20001400
   120c8:	200066bc 	.word	0x200066bc

000120cc <console_out_nolock>:
{
   120cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (g_console_silence) {
   120ce:	4b0b      	ldr	r3, [pc, #44]	; (120fc <console_out_nolock+0x30>)
   120d0:	781f      	ldrb	r7, [r3, #0]
{
   120d2:	4604      	mov	r4, r0
   120d4:	b2c5      	uxtb	r5, r0
    if (g_console_silence) {
   120d6:	b117      	cbz	r7, 120de <console_out_nolock+0x12>
        return c;
   120d8:	462c      	mov	r4, r5
}
   120da:	4620      	mov	r0, r4
   120dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ('\n' == c) {
   120de:	2d0a      	cmp	r5, #10
   120e0:	4e07      	ldr	r6, [pc, #28]	; (12100 <console_out_nolock+0x34>)
   120e2:	d107      	bne.n	120f4 <console_out_nolock+0x28>
        rtt_console_write_ch('\r');
   120e4:	200d      	movs	r0, #13
   120e6:	f7ff ff95 	bl	12014 <rtt_console_write_ch>
        console_is_midline = 0;
   120ea:	6037      	str	r7, [r6, #0]
    rtt_console_write_ch(c);
   120ec:	4628      	mov	r0, r5
   120ee:	f7ff ff91 	bl	12014 <rtt_console_write_ch>
    return character;
   120f2:	e7f2      	b.n	120da <console_out_nolock+0xe>
        console_is_midline = 1;
   120f4:	2301      	movs	r3, #1
   120f6:	6033      	str	r3, [r6, #0]
   120f8:	e7f8      	b.n	120ec <console_out_nolock+0x20>
   120fa:	bf00      	nop
   120fc:	200066a9 	.word	0x200066a9
   12100:	2000668c 	.word	0x2000668c

00012104 <console_rx_restart>:
    os_cputime_timer_relative(&rtt_timer, 0);
   12104:	4801      	ldr	r0, [pc, #4]	; (1210c <console_rx_restart+0x8>)
   12106:	2100      	movs	r1, #0
   12108:	f7fa bda5 	b.w	cc56 <os_cputime_timer_relative>
   1210c:	200066bc 	.word	0x200066bc

00012110 <rtt_console_is_init>:

int
rtt_console_is_init(void)
{
    return 1;
}
   12110:	2001      	movs	r0, #1
   12112:	4770      	bx	lr

00012114 <rtt_console_init>:

int
rtt_console_init(void)
{
   12114:	b508      	push	{r3, lr}
#if MYNEWT_VAL(CONSOLE_INPUT)
    os_cputime_timer_init(&rtt_timer, rtt_console_poll_func, NULL);
   12116:	2200      	movs	r2, #0
   12118:	4804      	ldr	r0, [pc, #16]	; (1212c <rtt_console_init+0x18>)
   1211a:	4905      	ldr	r1, [pc, #20]	; (12130 <rtt_console_init+0x1c>)
   1211c:	f7fa fd86 	bl	cc2c <os_cputime_timer_init>
    /* start after a second */
    os_cputime_timer_relative(&rtt_timer, 1000000);
   12120:	4904      	ldr	r1, [pc, #16]	; (12134 <rtt_console_init+0x20>)
   12122:	4802      	ldr	r0, [pc, #8]	; (1212c <rtt_console_init+0x18>)
   12124:	f7fa fd97 	bl	cc56 <os_cputime_timer_relative>
#endif
    return 0;
}
   12128:	2000      	movs	r0, #0
   1212a:	bd08      	pop	{r3, pc}
   1212c:	200066bc 	.word	0x200066bc
   12130:	00012069 	.word	0x00012069
   12134:	000f4240 	.word	0x000f4240

00012138 <console_no_ticks>:

/* Turn OS Ticks off */
void
console_no_ticks(void)
{
    do_ticks = 0;
   12138:	4b01      	ldr	r3, [pc, #4]	; (12140 <console_no_ticks+0x8>)
   1213a:	2200      	movs	r2, #0
   1213c:	701a      	strb	r2, [r3, #0]
}
   1213e:	4770      	bx	lr
   12140:	2000140c 	.word	0x2000140c

00012144 <console_yes_ticks>:

/* Turn OS Ticks on */
void
console_yes_ticks(void)
{
    do_ticks = 1;
   12144:	4b01      	ldr	r3, [pc, #4]	; (1214c <console_yes_ticks+0x8>)
   12146:	2201      	movs	r2, #1
   12148:	701a      	strb	r2, [r3, #0]
}
   1214a:	4770      	bx	lr
   1214c:	2000140c 	.word	0x2000140c

00012150 <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
   12150:	4b01      	ldr	r3, [pc, #4]	; (12158 <console_get_ticks+0x8>)
   12152:	7818      	ldrb	r0, [r3, #0]
   12154:	4770      	bx	lr
   12156:	bf00      	nop
   12158:	2000140c 	.word	0x2000140c

0001215c <print_module_commands>:
    }
}

static void
print_module_commands(const int module, struct streamer *streamer)
{
   1215c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1215e:	460c      	mov	r4, r1
   12160:	4606      	mov	r6, r0
    const struct shell_module *shell_module = &shell_modules[module];
    int i;

    streamer_printf(streamer, "help\n");
   12162:	4911      	ldr	r1, [pc, #68]	; (121a8 <print_module_commands+0x4c>)

    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
        streamer_printf(streamer, "%-30s", shell_module->commands[i].sc_cmd);
   12164:	4f11      	ldr	r7, [pc, #68]	; (121ac <print_module_commands+0x50>)
    streamer_printf(streamer, "help\n");
   12166:	4620      	mov	r0, r4
   12168:	f002 f993 	bl	14492 <streamer_printf>
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   1216c:	4810      	ldr	r0, [pc, #64]	; (121b0 <print_module_commands+0x54>)
   1216e:	2500      	movs	r5, #0
   12170:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
   12174:	6873      	ldr	r3, [r6, #4]
   12176:	442b      	add	r3, r5
   12178:	689a      	ldr	r2, [r3, #8]
   1217a:	b902      	cbnz	r2, 1217e <print_module_commands+0x22>
            streamer_printf(streamer, "%s",
                            shell_module->commands[i].help->summary);
        }
        streamer_printf(streamer, "\n");
    }
}
   1217c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        streamer_printf(streamer, "%-30s", shell_module->commands[i].sc_cmd);
   1217e:	4639      	mov	r1, r7
   12180:	4620      	mov	r0, r4
   12182:	f002 f986 	bl	14492 <streamer_printf>
        if (shell_module->commands[i].help &&
   12186:	6873      	ldr	r3, [r6, #4]
   12188:	442b      	add	r3, r5
   1218a:	68db      	ldr	r3, [r3, #12]
   1218c:	b12b      	cbz	r3, 1219a <print_module_commands+0x3e>
            shell_module->commands[i].help->summary) {
   1218e:	681a      	ldr	r2, [r3, #0]
        if (shell_module->commands[i].help &&
   12190:	b11a      	cbz	r2, 1219a <print_module_commands+0x3e>
            streamer_printf(streamer, "%s",
   12192:	4908      	ldr	r1, [pc, #32]	; (121b4 <print_module_commands+0x58>)
   12194:	4620      	mov	r0, r4
   12196:	f002 f97c 	bl	14492 <streamer_printf>
        streamer_printf(streamer, "\n");
   1219a:	4907      	ldr	r1, [pc, #28]	; (121b8 <print_module_commands+0x5c>)
   1219c:	4620      	mov	r0, r4
   1219e:	f002 f978 	bl	14492 <streamer_printf>
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   121a2:	3510      	adds	r5, #16
   121a4:	e7e6      	b.n	12174 <print_module_commands+0x18>
   121a6:	bf00      	nop
   121a8:	00020a6b 	.word	0x00020a6b
   121ac:	00020a71 	.word	0x00020a71
   121b0:	20006a68 	.word	0x20006a68
   121b4:	00021afe 	.word	0x00021afe
   121b8:	00021bd1 	.word	0x00021bd1

000121bc <print_modules>:
{
   121bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for (module = 0; module < num_of_shell_entities; module++) {
   121c0:	4e09      	ldr	r6, [pc, #36]	; (121e8 <print_modules+0x2c>)
        streamer_printf(streamer, "%s\n", shell_modules[module].name);
   121c2:	4f0a      	ldr	r7, [pc, #40]	; (121ec <print_modules+0x30>)
   121c4:	f8df 8028 	ldr.w	r8, [pc, #40]	; 121f0 <print_modules+0x34>
{
   121c8:	4605      	mov	r5, r0
    for (module = 0; module < num_of_shell_entities; module++) {
   121ca:	2400      	movs	r4, #0
   121cc:	6833      	ldr	r3, [r6, #0]
   121ce:	42a3      	cmp	r3, r4
   121d0:	d801      	bhi.n	121d6 <print_modules+0x1a>
}
   121d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        streamer_printf(streamer, "%s\n", shell_modules[module].name);
   121d6:	f857 2034 	ldr.w	r2, [r7, r4, lsl #3]
   121da:	4641      	mov	r1, r8
   121dc:	4628      	mov	r0, r5
   121de:	f002 f958 	bl	14492 <streamer_printf>
    for (module = 0; module < num_of_shell_entities; module++) {
   121e2:	3401      	adds	r4, #1
   121e4:	e7f2      	b.n	121cc <print_modules+0x10>
   121e6:	bf00      	nop
   121e8:	20006a40 	.word	0x20006a40
   121ec:	20006a68 	.word	0x20006a68
   121f0:	00021041 	.word	0x00021041

000121f4 <print_command_params>:
{
   121f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct shell_cmd *shell_cmd = &shell_module->commands[command];
   121f6:	4b0d      	ldr	r3, [pc, #52]	; (1222c <print_command_params+0x38>)
   121f8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
{
   121fc:	4616      	mov	r6, r2
	const struct shell_cmd *shell_cmd = &shell_module->commands[command];
   121fe:	6845      	ldr	r5, [r0, #4]
   12200:	eb05 1501 	add.w	r5, r5, r1, lsl #4
	if (!(shell_cmd->help && shell_cmd->help->params)) {
   12204:	68eb      	ldr	r3, [r5, #12]
   12206:	b14b      	cbz	r3, 1221c <print_command_params+0x28>
   12208:	689b      	ldr	r3, [r3, #8]
   1220a:	b13b      	cbz	r3, 1221c <print_command_params+0x28>
		streamer_printf(streamer, "%-30s%s\n",
   1220c:	4f08      	ldr	r7, [pc, #32]	; (12230 <print_command_params+0x3c>)
   1220e:	2400      	movs	r4, #0
	for (i = 0; shell_cmd->help->params[i].param_name; i++) {
   12210:	68eb      	ldr	r3, [r5, #12]
   12212:	689b      	ldr	r3, [r3, #8]
   12214:	591a      	ldr	r2, [r3, r4]
   12216:	1918      	adds	r0, r3, r4
   12218:	3408      	adds	r4, #8
   1221a:	b902      	cbnz	r2, 1221e <print_command_params+0x2a>
}
   1221c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		streamer_printf(streamer, "%-30s%s\n",
   1221e:	6843      	ldr	r3, [r0, #4]
   12220:	4639      	mov	r1, r7
   12222:	4630      	mov	r0, r6
   12224:	f002 f935 	bl	14492 <streamer_printf>
	for (i = 0; shell_cmd->help->params[i].param_name; i++) {
   12228:	e7f2      	b.n	12210 <print_command_params+0x1c>
   1222a:	bf00      	nop
   1222c:	20006a68 	.word	0x20006a68
   12230:	00020a77 	.word	0x00020a77

00012234 <get_destination_module>:
    for (i = 0; i < num_of_shell_entities; i++) {
   12234:	4b0f      	ldr	r3, [pc, #60]	; (12274 <get_destination_module+0x40>)
{
   12236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1223a:	681f      	ldr	r7, [r3, #0]
            if (!strcmp(module_str, shell_modules[i].name)) {
   1223c:	f8df 8038 	ldr.w	r8, [pc, #56]	; 12278 <get_destination_module+0x44>
{
   12240:	4605      	mov	r5, r0
   12242:	460e      	mov	r6, r1
    for (i = 0; i < num_of_shell_entities; i++) {
   12244:	2400      	movs	r4, #0
   12246:	42bc      	cmp	r4, r7
   12248:	d104      	bne.n	12254 <get_destination_module+0x20>
    return -1;
   1224a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   1224e:	4620      	mov	r0, r4
   12250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (len < 0) {
   12254:	2e00      	cmp	r6, #0
            if (!strcmp(module_str, shell_modules[i].name)) {
   12256:	f858 1034 	ldr.w	r1, [r8, r4, lsl #3]
        if (len < 0) {
   1225a:	da06      	bge.n	1226a <get_destination_module+0x36>
            if (!strcmp(module_str, shell_modules[i].name)) {
   1225c:	4628      	mov	r0, r5
   1225e:	f7fe f82f 	bl	102c0 <strcmp>
            if (!strncmp(module_str, shell_modules[i].name, len)) {
   12262:	2800      	cmp	r0, #0
   12264:	d0f3      	beq.n	1224e <get_destination_module+0x1a>
    for (i = 0; i < num_of_shell_entities; i++) {
   12266:	3401      	adds	r4, #1
   12268:	e7ed      	b.n	12246 <get_destination_module+0x12>
            if (!strncmp(module_str, shell_modules[i].name, len)) {
   1226a:	4632      	mov	r2, r6
   1226c:	4628      	mov	r0, r5
   1226e:	f007 fe07 	bl	19e80 <strncmp>
   12272:	e7f6      	b.n	12262 <get_destination_module+0x2e>
   12274:	20006a40 	.word	0x20006a40
   12278:	20006a68 	.word	0x20006a68

0001227c <set_default_module>:
static const struct shell_cmd shell_cmd_help =
    SHELL_CMD_EXT("help", show_help, NULL);

static int
set_default_module(const char *name)
{
   1227c:	b508      	push	{r3, lr}
    int module;

    module = get_destination_module(name, -1);
   1227e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12282:	f7ff ffd7 	bl	12234 <get_destination_module>

    if (module == -1) {
   12286:	1c43      	adds	r3, r0, #1
        return -1;
    }

    default_module = module;
   12288:	bf1e      	ittt	ne
   1228a:	4b02      	ldrne	r3, [pc, #8]	; (12294 <set_default_module+0x18>)
   1228c:	6018      	strne	r0, [r3, #0]

    return 0;
   1228e:	2000      	movne	r0, #0
}
   12290:	bd08      	pop	{r3, pc}
   12292:	bf00      	nop
   12294:	20001410 	.word	0x20001410

00012298 <select_module>:

static int
select_module(const struct shell_cmd *cmd, int argc, char *argv[],
              struct streamer *streamer)
{
    if (argc == 1) {
   12298:	2901      	cmp	r1, #1
{
   1229a:	b508      	push	{r3, lr}
    if (argc == 1) {
   1229c:	d105      	bne.n	122aa <select_module+0x12>
        default_module = -1;
   1229e:	4b05      	ldr	r3, [pc, #20]	; (122b4 <select_module+0x1c>)
   122a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   122a4:	601a      	str	r2, [r3, #0]
    } else {
        set_default_module(argv[1]);
    }

    return 0;
}
   122a6:	2000      	movs	r0, #0
   122a8:	bd08      	pop	{r3, pc}
        set_default_module(argv[1]);
   122aa:	6850      	ldr	r0, [r2, #4]
   122ac:	f7ff ffe6 	bl	1227c <set_default_module>
   122b0:	e7f9      	b.n	122a6 <select_module+0xe>
   122b2:	bf00      	nop
   122b4:	20001410 	.word	0x20001410

000122b8 <print_prompt>:
{
   122b8:	b508      	push	{r3, lr}
    if (app_prompt_handler) {
   122ba:	4b0c      	ldr	r3, [pc, #48]	; (122ec <print_prompt+0x34>)
   122bc:	681b      	ldr	r3, [r3, #0]
   122be:	b933      	cbnz	r3, 122ce <print_prompt+0x16>
    if (default_module != -1) {
   122c0:	4b0b      	ldr	r3, [pc, #44]	; (122f0 <print_prompt+0x38>)
   122c2:	681b      	ldr	r3, [r3, #0]
   122c4:	1c5a      	adds	r2, r3, #1
   122c6:	d10c      	bne.n	122e2 <print_prompt+0x2a>
    return prompt;
   122c8:	4b0a      	ldr	r3, [pc, #40]	; (122f4 <print_prompt+0x3c>)
   122ca:	6819      	ldr	r1, [r3, #0]
   122cc:	e003      	b.n	122d6 <print_prompt+0x1e>
        str = app_prompt_handler();
   122ce:	4798      	blx	r3
        if (str) {
   122d0:	4601      	mov	r1, r0
   122d2:	2800      	cmp	r0, #0
   122d4:	d0f4      	beq.n	122c0 <print_prompt+0x8>
}
   122d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    console_printf("%s%s", get_prompt(), MYNEWT_VAL(SHELL_PROMPT_SUFFIX));
   122da:	4a07      	ldr	r2, [pc, #28]	; (122f8 <print_prompt+0x40>)
   122dc:	4807      	ldr	r0, [pc, #28]	; (122fc <print_prompt+0x44>)
   122de:	f7ff be8b 	b.w	11ff8 <console_printf>
        return shell_modules[default_module].name;
   122e2:	4a07      	ldr	r2, [pc, #28]	; (12300 <print_prompt+0x48>)
   122e4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
   122e8:	e7f5      	b.n	122d6 <print_prompt+0x1e>
   122ea:	bf00      	nop
   122ec:	200066e4 	.word	0x200066e4
   122f0:	20001410 	.word	0x20001410
   122f4:	20006a44 	.word	0x20006a44
   122f8:	00020a80 	.word	0x00020a80
   122fc:	00020a83 	.word	0x00020a83
   12300:	20006a68 	.word	0x20006a68

00012304 <print_prompt_if_console>:
{
   12304:	b510      	push	{r4, lr}
   12306:	4604      	mov	r4, r0
    if (streamer == streamer_console_get()) {
   12308:	f002 f8dc 	bl	144c4 <streamer_console_get>
   1230c:	4284      	cmp	r4, r0
   1230e:	d103      	bne.n	12318 <print_prompt_if_console+0x14>
}
   12310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        print_prompt();
   12314:	f7ff bfd0 	b.w	122b8 <print_prompt>
}
   12318:	bd10      	pop	{r4, pc}
	...

0001231c <complete_command>:

static void
complete_command(char *line, char *command_prefix,
                 int command_len, int module_idx,
                 console_append_char_cb append_char)
{
   1231c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12320:	4615      	mov	r5, r2
    int first_match = -1;
    int match_count = 0;
    int i, j, common_chars = -1;
    const struct shell_cmd *commands;

    commands = shell_modules[module_idx].commands;
   12322:	4a3d      	ldr	r2, [pc, #244]	; (12418 <complete_command+0xfc>)
   12324:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
{
   12328:	b085      	sub	sp, #20
    commands = shell_modules[module_idx].commands;
   1232a:	685c      	ldr	r4, [r3, #4]
{
   1232c:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    int i, j, common_chars = -1;
   12330:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff

    for (i = 0; commands[i].sc_cmd; i++) {
   12334:	f04f 0900 	mov.w	r9, #0
   12338:	f104 0208 	add.w	r2, r4, #8
{
   1233c:	4607      	mov	r7, r0
   1233e:	468a      	mov	sl, r1
    int match_count = 0;
   12340:	46c8      	mov	r8, r9
    int first_match = -1;
   12342:	4633      	mov	r3, r6
    for (i = 0; commands[i].sc_cmd; i++) {
   12344:	9201      	str	r2, [sp, #4]
   12346:	9901      	ldr	r1, [sp, #4]
   12348:	ea4f 1209 	mov.w	r2, r9, lsl #4
   1234c:	5889      	ldr	r1, [r1, r2]
   1234e:	b9c9      	cbnz	r1, 12384 <complete_command+0x68>
            }
        }
        common_chars = j;
    }

    if (match_count == 0) {
   12350:	f1b8 0f00 	cmp.w	r8, #0
   12354:	d05d      	beq.n	12412 <complete_command+0xf6>
        return;
    }

    /* Additional characters could be appended */
    if (common_chars > command_len) {
   12356:	42ae      	cmp	r6, r5
            if (commands[first_match].sc_cmd[j] != commands[i].sc_cmd[j]) {
   12358:	eb04 1403 	add.w	r4, r4, r3, lsl #4
    if (common_chars > command_len) {
   1235c:	dd3a      	ble.n	123d4 <complete_command+0xb8>
        /* complete common part */
        for (i = command_len; i < common_chars; i++) {
            if (!append_char(line, (uint8_t)commands[first_match].sc_cmd[i])) {
   1235e:	68a3      	ldr	r3, [r4, #8]
   12360:	4638      	mov	r0, r7
   12362:	5d59      	ldrb	r1, [r3, r5]
   12364:	47d8      	blx	fp
   12366:	2800      	cmp	r0, #0
   12368:	d053      	beq.n	12412 <complete_command+0xf6>
        for (i = command_len; i < common_chars; i++) {
   1236a:	3501      	adds	r5, #1
   1236c:	42ae      	cmp	r6, r5
   1236e:	d1f6      	bne.n	1235e <complete_command+0x42>
                return;
            }
        }
        if (match_count == 1) {
   12370:	f1b8 0f01 	cmp.w	r8, #1
   12374:	d14d      	bne.n	12412 <complete_command+0xf6>
            /* Whole word matched, append space */
            append_char(line, ' ');
   12376:	2120      	movs	r1, #32
   12378:	4638      	mov	r0, r7
   1237a:	465b      	mov	r3, fp
        }
    }
    /* restore prompt */
    print_prompt();
    console_printf("%s", line);
}
   1237c:	b005      	add	sp, #20
   1237e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            append_char(line, ' ');
   12382:	4718      	bx	r3
        if (0 != strncmp(command_prefix, commands[i].sc_cmd, command_len)) {
   12384:	462a      	mov	r2, r5
   12386:	4650      	mov	r0, sl
   12388:	9303      	str	r3, [sp, #12]
   1238a:	9102      	str	r1, [sp, #8]
   1238c:	f007 fd78 	bl	19e80 <strncmp>
   12390:	9b03      	ldr	r3, [sp, #12]
   12392:	b950      	cbnz	r0, 123aa <complete_command+0x8e>
        match_count++;
   12394:	f108 0801 	add.w	r8, r8, #1
        if (match_count == 1) {
   12398:	f1b8 0f01 	cmp.w	r8, #1
   1239c:	9902      	ldr	r1, [sp, #8]
   1239e:	d107      	bne.n	123b0 <complete_command+0x94>
            common_chars = strlen(commands[i].sc_cmd);
   123a0:	4608      	mov	r0, r1
   123a2:	f007 fd65 	bl	19e70 <strlen>
            first_match = i;
   123a6:	464b      	mov	r3, r9
            common_chars = strlen(commands[i].sc_cmd);
   123a8:	4606      	mov	r6, r0
    for (i = 0; commands[i].sc_cmd; i++) {
   123aa:	f109 0901 	add.w	r9, r9, #1
   123ae:	e7ca      	b.n	12346 <complete_command+0x2a>
        if (common_chars <= command_len) {
   123b0:	42ae      	cmp	r6, r5
   123b2:	ddfa      	ble.n	123aa <complete_command+0x8e>
            if (commands[first_match].sc_cmd[j] != commands[i].sc_cmd[j]) {
   123b4:	eb04 1203 	add.w	r2, r4, r3, lsl #4
   123b8:	6890      	ldr	r0, [r2, #8]
   123ba:	462a      	mov	r2, r5
   123bc:	f810 e002 	ldrb.w	lr, [r0, r2]
   123c0:	f811 c002 	ldrb.w	ip, [r1, r2]
   123c4:	45e6      	cmp	lr, ip
   123c6:	d103      	bne.n	123d0 <complete_command+0xb4>
        for (j = command_len; j < common_chars; j++) {
   123c8:	3201      	adds	r2, #1
   123ca:	4296      	cmp	r6, r2
   123cc:	d1f6      	bne.n	123bc <complete_command+0xa0>
   123ce:	e7ec      	b.n	123aa <complete_command+0x8e>
   123d0:	4616      	mov	r6, r2
   123d2:	e7ea      	b.n	123aa <complete_command+0x8e>
    console_printf("\n");
   123d4:	4811      	ldr	r0, [pc, #68]	; (1241c <complete_command+0x100>)
            console_printf("%s\n", commands[i].sc_cmd);
   123d6:	4e12      	ldr	r6, [pc, #72]	; (12420 <complete_command+0x104>)
    console_printf("\n");
   123d8:	f7ff fe0e 	bl	11ff8 <console_printf>
    console_printf("%s\n", commands[first_match].sc_cmd);
   123dc:	68a1      	ldr	r1, [r4, #8]
   123de:	4810      	ldr	r0, [pc, #64]	; (12420 <complete_command+0x104>)
   123e0:	f7ff fe0a 	bl	11ff8 <console_printf>
    for (i = first_match + 1; commands[i].sc_cmd; i++) {
   123e4:	69a1      	ldr	r1, [r4, #24]
   123e6:	b941      	cbnz	r1, 123fa <complete_command+0xde>
    print_prompt();
   123e8:	f7ff ff66 	bl	122b8 <print_prompt>
    console_printf("%s", line);
   123ec:	480d      	ldr	r0, [pc, #52]	; (12424 <complete_command+0x108>)
   123ee:	4639      	mov	r1, r7
}
   123f0:	b005      	add	sp, #20
   123f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    console_printf("%s", line);
   123f6:	f7ff bdff 	b.w	11ff8 <console_printf>
        if (0 == strncmp(command_prefix, commands[i].sc_cmd, command_len)) {
   123fa:	462a      	mov	r2, r5
   123fc:	4650      	mov	r0, sl
   123fe:	9101      	str	r1, [sp, #4]
   12400:	f007 fd3e 	bl	19e80 <strncmp>
   12404:	9901      	ldr	r1, [sp, #4]
   12406:	b910      	cbnz	r0, 1240e <complete_command+0xf2>
            console_printf("%s\n", commands[i].sc_cmd);
   12408:	4630      	mov	r0, r6
   1240a:	f7ff fdf5 	bl	11ff8 <console_printf>
    for (i = first_match + 1; commands[i].sc_cmd; i++) {
   1240e:	3410      	adds	r4, #16
   12410:	e7e8      	b.n	123e4 <complete_command+0xc8>
}
   12412:	b005      	add	sp, #20
   12414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12418:	20006a68 	.word	0x20006a68
   1241c:	00021bd1 	.word	0x00021bd1
   12420:	00021041 	.word	0x00021041
   12424:	00021afe 	.word	0x00021afe

00012428 <get_token>:
{
   12428:	b538      	push	{r3, r4, r5, lr}
    *null_terminated = 0;
   1242a:	2300      	movs	r3, #0
    char *str = *cur;
   1242c:	6802      	ldr	r2, [r0, #0]
    *null_terminated = 0;
   1242e:	600b      	str	r3, [r1, #0]
{
   12430:	460c      	mov	r4, r1
   12432:	4615      	mov	r5, r2
    while (*str && *str == ' ') {
   12434:	f812 3b01 	ldrb.w	r3, [r2], #1
   12438:	2b20      	cmp	r3, #32
   1243a:	d0fa      	beq.n	12432 <get_token+0xa>
    if (*str == '\0') {
   1243c:	b91b      	cbnz	r3, 12446 <get_token+0x1e>
        *null_terminated = 1;
   1243e:	2201      	movs	r2, #1
   12440:	6022      	str	r2, [r4, #0]
        return 0;
   12442:	4618      	mov	r0, r3
}
   12444:	bd38      	pop	{r3, r4, r5, pc}
    *cur = str;
   12446:	6005      	str	r5, [r0, #0]
    str = strchr(str, ' ');
   12448:	2120      	movs	r1, #32
   1244a:	4628      	mov	r0, r5
   1244c:	f007 fcfb 	bl	19e46 <strchr>
    if (str == NULL) {
   12450:	b930      	cbnz	r0, 12460 <get_token+0x38>
        *null_terminated = 1;
   12452:	2301      	movs	r3, #1
   12454:	6023      	str	r3, [r4, #0]
        return strlen(*cur);
   12456:	4628      	mov	r0, r5
}
   12458:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return strlen(*cur);
   1245c:	f007 bd08 	b.w	19e70 <strlen>
    return str - *cur;
   12460:	1b40      	subs	r0, r0, r5
   12462:	e7ef      	b.n	12444 <get_token+0x1c>

00012464 <complete_module>:

static void
complete_module(char *line, char *module_prefix,
                int module_len, console_append_char_cb append_char)
{
   12464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12468:	ed2d 8b02 	vpush	{d8}
   1246c:	b083      	sub	sp, #12
   1246e:	ee08 1a10 	vmov	s16, r1
   12472:	f8df 912c 	ldr.w	r9, [pc, #300]	; 125a0 <complete_module+0x13c>
   12476:	9300      	str	r3, [sp, #0]
   12478:	4607      	mov	r7, r0
    int i, j;
    const char *first_match = NULL;
    int common_chars = -1, space = 0;

    if (!module_len) {
   1247a:	4614      	mov	r4, r2
   1247c:	2a00      	cmp	r2, #0
   1247e:	d16c      	bne.n	1255a <complete_module+0xf6>
        console_printf("\n");
   12480:	4843      	ldr	r0, [pc, #268]	; (12590 <complete_module+0x12c>)
        for (i = 0; i < num_of_shell_entities; i++) {
            console_printf("%s\n", shell_modules[i].name);
   12482:	4d44      	ldr	r5, [pc, #272]	; (12594 <complete_module+0x130>)
   12484:	4e44      	ldr	r6, [pc, #272]	; (12598 <complete_module+0x134>)
        console_printf("\n");
   12486:	f7ff fdb7 	bl	11ff8 <console_printf>
        for (i = 0; i < num_of_shell_entities; i++) {
   1248a:	f8d9 3000 	ldr.w	r3, [r9]
   1248e:	42a3      	cmp	r3, r4
   12490:	d80a      	bhi.n	124a8 <complete_module+0x44>
        }
        print_prompt();
   12492:	f7ff ff11 	bl	122b8 <print_prompt>
        console_printf("%s", line);
   12496:	4841      	ldr	r0, [pc, #260]	; (1259c <complete_module+0x138>)
   12498:	4639      	mov	r1, r7

    /* for convenience add space after command */
    if (space) {
        append_char(line, ' ');
    }
}
   1249a:	b003      	add	sp, #12
   1249c:	ecbd 8b02 	vpop	{d8}
   124a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        console_printf("%s", line);
   124a4:	f7ff bda8 	b.w	11ff8 <console_printf>
            console_printf("%s\n", shell_modules[i].name);
   124a8:	f855 1034 	ldr.w	r1, [r5, r4, lsl #3]
   124ac:	4630      	mov	r0, r6
   124ae:	f7ff fda3 	bl	11ff8 <console_printf>
        for (i = 0; i < num_of_shell_entities; i++) {
   124b2:	3401      	adds	r4, #1
   124b4:	e7e9      	b.n	1248a <complete_module+0x26>
        if (strncmp(module_prefix,
   124b6:	4b37      	ldr	r3, [pc, #220]	; (12594 <complete_module+0x130>)
   124b8:	ee18 0a10 	vmov	r0, s16
   124bc:	f853 1038 	ldr.w	r1, [r3, r8, lsl #3]
   124c0:	9101      	str	r1, [sp, #4]
   124c2:	4622      	mov	r2, r4
   124c4:	f007 fcdc 	bl	19e80 <strncmp>
   124c8:	4682      	mov	sl, r0
   124ca:	b9c0      	cbnz	r0, 124fe <complete_module+0x9a>
        if (!first_match) {
   124cc:	9901      	ldr	r1, [sp, #4]
   124ce:	2e00      	cmp	r6, #0
   124d0:	d041      	beq.n	12556 <complete_module+0xf2>
        if (first_match && (common_chars < 0)) {
   124d2:	1c6a      	adds	r2, r5, #1
   124d4:	d10a      	bne.n	124ec <complete_module+0x88>
            console_printf("\n");
   124d6:	482e      	ldr	r0, [pc, #184]	; (12590 <complete_module+0x12c>)
   124d8:	f7ff fd8e 	bl	11ff8 <console_printf>
            console_printf("%s\n", first_match);
   124dc:	4631      	mov	r1, r6
   124de:	4658      	mov	r0, fp
   124e0:	f7ff fd8a 	bl	11ff8 <console_printf>
            common_chars = strlen(first_match);
   124e4:	4630      	mov	r0, r6
   124e6:	f007 fcc3 	bl	19e70 <strlen>
   124ea:	4605      	mov	r5, r0
            if (first_match[j] != shell_modules[i].name[j]) {
   124ec:	4b29      	ldr	r3, [pc, #164]	; (12594 <complete_module+0x130>)
   124ee:	f853 1038 	ldr.w	r1, [r3, r8, lsl #3]
        for (j = 0; j < common_chars; j++) {
   124f2:	45aa      	cmp	sl, r5
   124f4:	d126      	bne.n	12544 <complete_module+0xe0>
        console_printf("%s\n", shell_modules[i].name);
   124f6:	4658      	mov	r0, fp
   124f8:	f7ff fd7e 	bl	11ff8 <console_printf>
   124fc:	4655      	mov	r5, sl
    for (i = 0; i < num_of_shell_entities; i++) {
   124fe:	f108 0801 	add.w	r8, r8, #1
   12502:	f8d9 2000 	ldr.w	r2, [r9]
   12506:	4590      	cmp	r8, r2
   12508:	d3d5      	bcc.n	124b6 <complete_module+0x52>
    if (!first_match) {
   1250a:	2e00      	cmp	r6, #0
   1250c:	d03a      	beq.n	12584 <complete_module+0x120>
    if (common_chars >= 0) {
   1250e:	1c6b      	adds	r3, r5, #1
   12510:	d02a      	beq.n	12568 <complete_module+0x104>
        print_prompt();
   12512:	f7ff fed1 	bl	122b8 <print_prompt>
        console_printf("%s", line);
   12516:	4821      	ldr	r0, [pc, #132]	; (1259c <complete_module+0x138>)
   12518:	4639      	mov	r1, r7
   1251a:	f7ff fd6d 	bl	11ff8 <console_printf>
    int common_chars = -1, space = 0;
   1251e:	f04f 0800 	mov.w	r8, #0
    for (i = module_len; i < common_chars; i++) {
   12522:	42ac      	cmp	r4, r5
   12524:	db27      	blt.n	12576 <complete_module+0x112>
    if (space) {
   12526:	f1b8 0f00 	cmp.w	r8, #0
   1252a:	d02b      	beq.n	12584 <complete_module+0x120>
        append_char(line, ' ');
   1252c:	eddd 7a00 	vldr	s15, [sp]
   12530:	ee17 3a90 	vmov	r3, s15
   12534:	2120      	movs	r1, #32
   12536:	4638      	mov	r0, r7
}
   12538:	b003      	add	sp, #12
   1253a:	ecbd 8b02 	vpop	{d8}
   1253e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        append_char(line, ' ');
   12542:	4718      	bx	r3
            if (first_match[j] != shell_modules[i].name[j]) {
   12544:	f816 c00a 	ldrb.w	ip, [r6, sl]
   12548:	f811 000a 	ldrb.w	r0, [r1, sl]
   1254c:	4584      	cmp	ip, r0
   1254e:	d1d2      	bne.n	124f6 <complete_module+0x92>
        for (j = 0; j < common_chars; j++) {
   12550:	f10a 0a01 	add.w	sl, sl, #1
   12554:	e7cd      	b.n	124f2 <complete_module+0x8e>
   12556:	460e      	mov	r6, r1
   12558:	e7d1      	b.n	124fe <complete_module+0x9a>
    const char *first_match = NULL;
   1255a:	2600      	movs	r6, #0
        console_printf("%s\n", shell_modules[i].name);
   1255c:	f8df b038 	ldr.w	fp, [pc, #56]	; 12598 <complete_module+0x134>
    int common_chars = -1, space = 0;
   12560:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    for (i = 0; i < num_of_shell_entities; i++) {
   12564:	46b0      	mov	r8, r6
   12566:	e7cc      	b.n	12502 <complete_module+0x9e>
        common_chars = strlen(first_match);
   12568:	4630      	mov	r0, r6
   1256a:	f007 fc81 	bl	19e70 <strlen>
        space = 1;
   1256e:	f04f 0801 	mov.w	r8, #1
        common_chars = strlen(first_match);
   12572:	4605      	mov	r5, r0
    for (i = module_len; i < common_chars; i++) {
   12574:	e7d5      	b.n	12522 <complete_module+0xbe>
        if (!append_char(line, first_match[i])) {
   12576:	5d31      	ldrb	r1, [r6, r4]
   12578:	9b00      	ldr	r3, [sp, #0]
   1257a:	4638      	mov	r0, r7
   1257c:	4798      	blx	r3
   1257e:	b108      	cbz	r0, 12584 <complete_module+0x120>
    for (i = module_len; i < common_chars; i++) {
   12580:	3401      	adds	r4, #1
   12582:	e7ce      	b.n	12522 <complete_module+0xbe>
}
   12584:	b003      	add	sp, #12
   12586:	ecbd 8b02 	vpop	{d8}
   1258a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1258e:	bf00      	nop
   12590:	00021bd1 	.word	0x00021bd1
   12594:	20006a68 	.word	0x20006a68
   12598:	00021041 	.word	0x00021041
   1259c:	00021afe 	.word	0x00021afe
   125a0:	20006a40 	.word	0x20006a40

000125a4 <completion>:
    }
}

static void
completion(char *line, console_append_char_cb append_char)
{
   125a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125a8:	b089      	sub	sp, #36	; 0x24
   125aa:	4688      	mov	r8, r1
    char *cur;
    int tok_len;
    int module, command;
    int null_terminated = 0;
   125ac:	2100      	movs	r1, #0
{
   125ae:	4604      	mov	r4, r0
    int null_terminated = 0;
   125b0:	9105      	str	r1, [sp, #20]

    /*
     * line to completion is not ended by '\0' as the line that gets from
     * os_eventq_get function
     */
    if (!append_char(line, '\0')) {
   125b2:	47c0      	blx	r8
   125b4:	b338      	cbz	r0, 12606 <completion+0x62>
        return;
    }

    cur = line;
    tok_len = get_token(&cur, &null_terminated);
   125b6:	a905      	add	r1, sp, #20
   125b8:	a804      	add	r0, sp, #16
    cur = line;
   125ba:	9404      	str	r4, [sp, #16]
    tok_len = get_token(&cur, &null_terminated);
   125bc:	f7ff ff34 	bl	12428 <get_token>

    /* empty token - print options */
    if (tok_len == 0) {
   125c0:	4606      	mov	r6, r0
   125c2:	b988      	cbnz	r0, 125e8 <completion+0x44>
        console_printf("\n");
   125c4:	4886      	ldr	r0, [pc, #536]	; (127e0 <completion+0x23c>)
   125c6:	f7ff fd17 	bl	11ff8 <console_printf>
        if (default_module == -1) {
   125ca:	4b86      	ldr	r3, [pc, #536]	; (127e4 <completion+0x240>)
   125cc:	681d      	ldr	r5, [r3, #0]
   125ce:	1c69      	adds	r1, r5, #1
   125d0:	d15d      	bne.n	1268e <completion+0xea>
        print_modules(streamer_console_get());
   125d2:	f001 ff77 	bl	144c4 <streamer_console_get>
   125d6:	f7ff fdf1 	bl	121bc <print_modules>
    cur += tok_len;
    tok_len = get_last_token(&cur);
    if (tok_len == 0) {
        console_printf("\n");
        print_command_params(module, command, streamer_console_get());
        print_prompt();
   125da:	f7ff fe6d 	bl	122b8 <print_prompt>
        console_printf("%s", line);
   125de:	4621      	mov	r1, r4
   125e0:	4881      	ldr	r0, [pc, #516]	; (127e8 <completion+0x244>)
   125e2:	f7ff fd09 	bl	11ff8 <console_printf>
        return;
   125e6:	e00e      	b.n	12606 <completion+0x62>
            complete_module(line, cur, tok_len, append_char);
   125e8:	e9dd 7904 	ldrd	r7, r9, [sp, #16]
    if (null_terminated) {
   125ec:	f1b9 0f00 	cmp.w	r9, #0
   125f0:	d014      	beq.n	1261c <completion+0x78>
        if (default_module == -1) {
   125f2:	4b7c      	ldr	r3, [pc, #496]	; (127e4 <completion+0x240>)
   125f4:	681b      	ldr	r3, [r3, #0]
   125f6:	1c5a      	adds	r2, r3, #1
   125f8:	d108      	bne.n	1260c <completion+0x68>
            complete_module(line, cur, tok_len, append_char);
   125fa:	4643      	mov	r3, r8
   125fc:	4602      	mov	r2, r0
   125fe:	4639      	mov	r1, r7
            complete_module(line, cur, tok_len, append_char);
   12600:	4620      	mov	r0, r4
   12602:	f7ff ff2f 	bl	12464 <complete_module>
    }
    complete_param(line, cur, tok_len,
                   module, command, append_char);
    return;
}
   12606:	b009      	add	sp, #36	; 0x24
   12608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        complete_command(line, cur, tok_len,
   1260c:	f8cd 8000 	str.w	r8, [sp]
   12610:	4602      	mov	r2, r0
   12612:	4639      	mov	r1, r7
            complete_command(line, cur, tok_len,
   12614:	4620      	mov	r0, r4
   12616:	f7ff fe81 	bl	1231c <complete_command>
            return;
   1261a:	e7f4      	b.n	12606 <completion+0x62>
    if (strncmp("select", cur, tok_len) == 0) {
   1261c:	4602      	mov	r2, r0
   1261e:	4639      	mov	r1, r7
   12620:	4872      	ldr	r0, [pc, #456]	; (127ec <completion+0x248>)
   12622:	f007 fc2d 	bl	19e80 <strncmp>
   12626:	b9d8      	cbnz	r0, 12660 <completion+0xbc>
    cur += tok_len + 1;
   12628:	3601      	adds	r6, #1
    int null_terminated = 0;
   1262a:	9007      	str	r0, [sp, #28]
    cur += tok_len + 1;
   1262c:	4437      	add	r7, r6
    tok_len = get_token(&cur, &null_terminated);
   1262e:	a907      	add	r1, sp, #28
   12630:	a806      	add	r0, sp, #24
    cur += tok_len + 1;
   12632:	9706      	str	r7, [sp, #24]
    tok_len = get_token(&cur, &null_terminated);
   12634:	f7ff fef8 	bl	12428 <get_token>
    if (tok_len == 0) {
   12638:	4602      	mov	r2, r0
   1263a:	b938      	cbnz	r0, 1264c <completion+0xa8>
        if (default_module != -1) {
   1263c:	4b69      	ldr	r3, [pc, #420]	; (127e4 <completion+0x240>)
   1263e:	681b      	ldr	r3, [r3, #0]
   12640:	3301      	adds	r3, #1
   12642:	d1e0      	bne.n	12606 <completion+0x62>
        console_printf("\n");
   12644:	4866      	ldr	r0, [pc, #408]	; (127e0 <completion+0x23c>)
   12646:	f7ff fcd7 	bl	11ff8 <console_printf>
   1264a:	e7c2      	b.n	125d2 <completion+0x2e>
    if (null_terminated) {
   1264c:	9b07      	ldr	r3, [sp, #28]
   1264e:	2b00      	cmp	r3, #0
   12650:	d0d9      	beq.n	12606 <completion+0x62>
        if (default_module == -1) {
   12652:	4b64      	ldr	r3, [pc, #400]	; (127e4 <completion+0x240>)
   12654:	681b      	ldr	r3, [r3, #0]
   12656:	3301      	adds	r3, #1
   12658:	d1d5      	bne.n	12606 <completion+0x62>
            complete_module(line, cur, tok_len, append_char);
   1265a:	9906      	ldr	r1, [sp, #24]
   1265c:	4643      	mov	r3, r8
   1265e:	e7cf      	b.n	12600 <completion+0x5c>
    if (default_module != -1) {
   12660:	4b60      	ldr	r3, [pc, #384]	; (127e4 <completion+0x240>)
   12662:	681d      	ldr	r5, [r3, #0]
   12664:	1c6b      	adds	r3, r5, #1
   12666:	d121      	bne.n	126ac <completion+0x108>
        module = get_destination_module(cur, tok_len);
   12668:	4631      	mov	r1, r6
   1266a:	4638      	mov	r0, r7
   1266c:	f7ff fde2 	bl	12234 <get_destination_module>
   12670:	4605      	mov	r5, r0
        if (module == -1) {
   12672:	1c68      	adds	r0, r5, #1
   12674:	d0c7      	beq.n	12606 <completion+0x62>
        cur += tok_len + 1;
   12676:	3601      	adds	r6, #1
   12678:	4437      	add	r7, r6
        tok_len = get_token(&cur, &null_terminated);
   1267a:	a905      	add	r1, sp, #20
   1267c:	a804      	add	r0, sp, #16
        cur += tok_len + 1;
   1267e:	9704      	str	r7, [sp, #16]
        tok_len = get_token(&cur, &null_terminated);
   12680:	f7ff fed2 	bl	12428 <get_token>
        if (tok_len == 0) {
   12684:	4606      	mov	r6, r0
   12686:	b948      	cbnz	r0, 1269c <completion+0xf8>
            console_printf("\n");
   12688:	4855      	ldr	r0, [pc, #340]	; (127e0 <completion+0x23c>)
   1268a:	f7ff fcb5 	bl	11ff8 <console_printf>
            print_module_commands(module, streamer_console_get());
   1268e:	f001 ff19 	bl	144c4 <streamer_console_get>
   12692:	4601      	mov	r1, r0
   12694:	4628      	mov	r0, r5
   12696:	f7ff fd61 	bl	1215c <print_module_commands>
            print_prompt();
   1269a:	e79e      	b.n	125da <completion+0x36>
        if (null_terminated) {
   1269c:	9b05      	ldr	r3, [sp, #20]
   1269e:	b12b      	cbz	r3, 126ac <completion+0x108>
            complete_command(line, cur, tok_len,
   126a0:	9904      	ldr	r1, [sp, #16]
   126a2:	f8cd 8000 	str.w	r8, [sp]
   126a6:	462b      	mov	r3, r5
   126a8:	4602      	mov	r2, r0
   126aa:	e7b3      	b.n	12614 <completion+0x70>
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   126ac:	4b50      	ldr	r3, [pc, #320]	; (127f0 <completion+0x24c>)
    command = get_command_from_module(cur, tok_len, module);
   126ae:	9f04      	ldr	r7, [sp, #16]
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   126b0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   126b4:	f8d3 a004 	ldr.w	sl, [r3, #4]
   126b8:	f8da 1008 	ldr.w	r1, [sl, #8]
   126bc:	2900      	cmp	r1, #0
   126be:	d0a2      	beq.n	12606 <completion+0x62>
        if (strlen(shell_module->commands[i].sc_cmd) != len) {
   126c0:	4608      	mov	r0, r1
   126c2:	9103      	str	r1, [sp, #12]
   126c4:	f007 fbd4 	bl	19e70 <strlen>
   126c8:	42b0      	cmp	r0, r6
   126ca:	d107      	bne.n	126dc <completion+0x138>
        if (!strncmp(command, shell_module->commands[i].sc_cmd, len)) {
   126cc:	9903      	ldr	r1, [sp, #12]
   126ce:	4632      	mov	r2, r6
   126d0:	4638      	mov	r0, r7
   126d2:	f007 fbd5 	bl	19e80 <strncmp>
   126d6:	4683      	mov	fp, r0
   126d8:	2800      	cmp	r0, #0
   126da:	d078      	beq.n	127ce <completion+0x22a>
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   126dc:	f109 0901 	add.w	r9, r9, #1
   126e0:	f10a 0a10 	add.w	sl, sl, #16
   126e4:	e7e8      	b.n	126b8 <completion+0x114>
    (*cur)++;
   126e6:	1c47      	adds	r7, r0, #1
    return strlen(*cur);
   126e8:	4638      	mov	r0, r7
    (*cur)++;
   126ea:	9704      	str	r7, [sp, #16]
    return strlen(*cur);
   126ec:	f007 fbc0 	bl	19e70 <strlen>
    if (tok_len == 0) {
   126f0:	4606      	mov	r6, r0
   126f2:	b950      	cbnz	r0, 1270a <completion+0x166>
        console_printf("\n");
   126f4:	483a      	ldr	r0, [pc, #232]	; (127e0 <completion+0x23c>)
   126f6:	f7ff fc7f 	bl	11ff8 <console_printf>
        print_command_params(module, command, streamer_console_get());
   126fa:	f001 fee3 	bl	144c4 <streamer_console_get>
   126fe:	4649      	mov	r1, r9
   12700:	4602      	mov	r2, r0
   12702:	4628      	mov	r0, r5
   12704:	f7ff fd76 	bl	121f4 <print_command_params>
   12708:	e767      	b.n	125da <completion+0x36>
    if (!(command->help && command->help->params)) {
   1270a:	f8da 300c 	ldr.w	r3, [sl, #12]
   1270e:	2b00      	cmp	r3, #0
   12710:	f43f af79 	beq.w	12606 <completion+0x62>
   12714:	689b      	ldr	r3, [r3, #8]
   12716:	2b00      	cmp	r3, #0
   12718:	f43f af75 	beq.w	12606 <completion+0x62>
    int i, j, common_chars = -1;
   1271c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    const char *first_match = NULL;
   12720:	46d9      	mov	r9, fp
    for (i = 0; command->help->params[i].param_name; i++) {
   12722:	f8da 200c 	ldr.w	r2, [sl, #12]
   12726:	6892      	ldr	r2, [r2, #8]
   12728:	f852 100b 	ldr.w	r1, [r2, fp]
   1272c:	b9b9      	cbnz	r1, 1275e <completion+0x1ba>
    if (!first_match) {
   1272e:	f1b9 0f00 	cmp.w	r9, #0
   12732:	f43f af68 	beq.w	12606 <completion+0x62>
    if (common_chars >= 0) {
   12736:	1c6b      	adds	r3, r5, #1
   12738:	d044      	beq.n	127c4 <completion+0x220>
        print_prompt();
   1273a:	f7ff fdbd 	bl	122b8 <print_prompt>
        console_printf("%s", line);
   1273e:	482a      	ldr	r0, [pc, #168]	; (127e8 <completion+0x244>)
   12740:	4621      	mov	r1, r4
   12742:	f7ff fc59 	bl	11ff8 <console_printf>
    for (i = param_len; i < common_chars; i++) {
   12746:	42ae      	cmp	r6, r5
   12748:	f6bf af5d 	bge.w	12606 <completion+0x62>
        if (!append_char(line, first_match[i])) {
   1274c:	f819 1006 	ldrb.w	r1, [r9, r6]
   12750:	4620      	mov	r0, r4
   12752:	47c0      	blx	r8
   12754:	2800      	cmp	r0, #0
   12756:	f43f af56 	beq.w	12606 <completion+0x62>
    for (i = param_len; i < common_chars; i++) {
   1275a:	3601      	adds	r6, #1
   1275c:	e7f3      	b.n	12746 <completion+0x1a2>
        if (strncmp(param_prefix,
   1275e:	4632      	mov	r2, r6
   12760:	4638      	mov	r0, r7
   12762:	9103      	str	r1, [sp, #12]
   12764:	f007 fb8c 	bl	19e80 <strncmp>
   12768:	4602      	mov	r2, r0
   1276a:	b9f8      	cbnz	r0, 127ac <completion+0x208>
        if (!first_match) {
   1276c:	9903      	ldr	r1, [sp, #12]
   1276e:	f1b9 0f00 	cmp.w	r9, #0
   12772:	d025      	beq.n	127c0 <completion+0x21c>
        if (first_match && (common_chars < 0)) {
   12774:	1c69      	adds	r1, r5, #1
   12776:	d10c      	bne.n	12792 <completion+0x1ee>
   12778:	9003      	str	r0, [sp, #12]
            console_printf("\n");
   1277a:	4819      	ldr	r0, [pc, #100]	; (127e0 <completion+0x23c>)
   1277c:	f7ff fc3c 	bl	11ff8 <console_printf>
            console_printf("%s\n", first_match);
   12780:	4649      	mov	r1, r9
   12782:	481c      	ldr	r0, [pc, #112]	; (127f4 <completion+0x250>)
   12784:	f7ff fc38 	bl	11ff8 <console_printf>
            common_chars = strlen(first_match);
   12788:	4648      	mov	r0, r9
   1278a:	f007 fb71 	bl	19e70 <strlen>
   1278e:	9a03      	ldr	r2, [sp, #12]
   12790:	4605      	mov	r5, r0
            if (first_match[j] != command->help->params[i].param_name[j]) {
   12792:	f8da 100c 	ldr.w	r1, [sl, #12]
   12796:	6889      	ldr	r1, [r1, #8]
   12798:	f851 100b 	ldr.w	r1, [r1, fp]
        for (j = 0; j < common_chars; j++) {
   1279c:	42aa      	cmp	r2, r5
   1279e:	d108      	bne.n	127b2 <completion+0x20e>
        console_printf("%s\n", command->help->params[i].param_name);
   127a0:	4814      	ldr	r0, [pc, #80]	; (127f4 <completion+0x250>)
   127a2:	9203      	str	r2, [sp, #12]
   127a4:	f7ff fc28 	bl	11ff8 <console_printf>
   127a8:	9a03      	ldr	r2, [sp, #12]
   127aa:	4615      	mov	r5, r2
    for (i = 0; command->help->params[i].param_name; i++) {
   127ac:	f10b 0b08 	add.w	fp, fp, #8
   127b0:	e7b7      	b.n	12722 <completion+0x17e>
            if (first_match[j] != command->help->params[i].param_name[j]) {
   127b2:	f819 c002 	ldrb.w	ip, [r9, r2]
   127b6:	5c88      	ldrb	r0, [r1, r2]
   127b8:	4584      	cmp	ip, r0
   127ba:	d1f1      	bne.n	127a0 <completion+0x1fc>
        for (j = 0; j < common_chars; j++) {
   127bc:	3201      	adds	r2, #1
   127be:	e7ed      	b.n	1279c <completion+0x1f8>
   127c0:	4689      	mov	r9, r1
   127c2:	e7f3      	b.n	127ac <completion+0x208>
        common_chars = strlen(first_match);
   127c4:	4648      	mov	r0, r9
   127c6:	f007 fb53 	bl	19e70 <strlen>
   127ca:	4605      	mov	r5, r0
    for (i = param_len; i < common_chars; i++) {
   127cc:	e7bb      	b.n	12746 <completion+0x1a2>
    cur += tok_len;
   127ce:	19b8      	adds	r0, r7, r6
    *cur = strrchr(*cur, ' ');
   127d0:	2120      	movs	r1, #32
    cur += tok_len;
   127d2:	9004      	str	r0, [sp, #16]
    *cur = strrchr(*cur, ' ');
   127d4:	f007 fb64 	bl	19ea0 <strrchr>
    if (*cur == NULL) {
   127d8:	2800      	cmp	r0, #0
   127da:	d184      	bne.n	126e6 <completion+0x142>
    *cur = strrchr(*cur, ' ');
   127dc:	9004      	str	r0, [sp, #16]
   127de:	e789      	b.n	126f4 <completion+0x150>
   127e0:	00021bd1 	.word	0x00021bd1
   127e4:	20001410 	.word	0x20001410
   127e8:	00021afe 	.word	0x00021afe
   127ec:	00020a88 	.word	0x00020a88
   127f0:	20006a68 	.word	0x20006a68
   127f4:	00021041 	.word	0x00021041

000127f8 <get_command_and_module.constprop.0>:
get_command_and_module(char *argv[], int *module, struct streamer *streamer)
   127f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!argv[0]) {
   127fa:	6804      	ldr	r4, [r0, #0]
    *module = -1;
   127fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
get_command_and_module(char *argv[], int *module, struct streamer *streamer)
   12800:	460d      	mov	r5, r1
   12802:	4616      	mov	r6, r2
    *module = -1;
   12804:	600b      	str	r3, [r1, #0]
    if (!argv[0]) {
   12806:	b92c      	cbnz	r4, 12814 <get_command_and_module.constprop.0+0x1c>
        streamer_printf(streamer, "Unrecognized command\n");
   12808:	4910      	ldr	r1, [pc, #64]	; (1284c <get_command_and_module.constprop.0+0x54>)
   1280a:	4610      	mov	r0, r2
   1280c:	f001 fe41 	bl	14492 <streamer_printf>
}
   12810:	4620      	mov	r0, r4
   12812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (default_module == -1) {
   12814:	4b0e      	ldr	r3, [pc, #56]	; (12850 <get_command_and_module.constprop.0+0x58>)
   12816:	6819      	ldr	r1, [r3, #0]
   12818:	1c4b      	adds	r3, r1, #1
   1281a:	d113      	bne.n	12844 <get_command_and_module.constprop.0+0x4c>
        if (!argv[1] || argv[1][0] == '\0') {
   1281c:	6847      	ldr	r7, [r0, #4]
   1281e:	b10f      	cbz	r7, 12824 <get_command_and_module.constprop.0+0x2c>
   12820:	783b      	ldrb	r3, [r7, #0]
   12822:	b933      	cbnz	r3, 12832 <get_command_and_module.constprop.0+0x3a>
            streamer_printf(streamer, "Unrecognized command: %s\n", argv[0]);
   12824:	490b      	ldr	r1, [pc, #44]	; (12854 <get_command_and_module.constprop.0+0x5c>)
   12826:	4622      	mov	r2, r4
            streamer_printf(streamer, "Illegal module %s\n", argv[0]);
   12828:	4630      	mov	r0, r6
   1282a:	f001 fe32 	bl	14492 <streamer_printf>
            return NULL;
   1282e:	2400      	movs	r4, #0
   12830:	e7ee      	b.n	12810 <get_command_and_module.constprop.0+0x18>
        *module = get_destination_module(argv[0], -1);
   12832:	4620      	mov	r0, r4
   12834:	f7ff fcfe 	bl	12234 <get_destination_module>
   12838:	6028      	str	r0, [r5, #0]
        if (*module == -1) {
   1283a:	3001      	adds	r0, #1
   1283c:	d104      	bne.n	12848 <get_command_and_module.constprop.0+0x50>
            streamer_printf(streamer, "Illegal module %s\n", argv[0]);
   1283e:	4906      	ldr	r1, [pc, #24]	; (12858 <get_command_and_module.constprop.0+0x60>)
   12840:	4622      	mov	r2, r4
   12842:	e7f1      	b.n	12828 <get_command_and_module.constprop.0+0x30>
    *module = default_module;
   12844:	6029      	str	r1, [r5, #0]
    return argv[0];
   12846:	e7e3      	b.n	12810 <get_command_and_module.constprop.0+0x18>
   12848:	463c      	mov	r4, r7
   1284a:	e7e1      	b.n	12810 <get_command_and_module.constprop.0+0x18>
   1284c:	00020a8f 	.word	0x00020a8f
   12850:	20001410 	.word	0x20001410
   12854:	00020aa5 	.word	0x00020aa5
   12858:	00020abf 	.word	0x00020abf

0001285c <show_cmd_help>:
{
   1285c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    int module = -1;
   12860:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    command = get_command_and_module(argv, &module, streamer);
   12864:	460a      	mov	r2, r1
{
   12866:	460c      	mov	r4, r1
    command = get_command_and_module(argv, &module, streamer);
   12868:	a901      	add	r1, sp, #4
    int module = -1;
   1286a:	9301      	str	r3, [sp, #4]
{
   1286c:	4680      	mov	r8, r0
    command = get_command_and_module(argv, &module, streamer);
   1286e:	f7ff ffc3 	bl	127f8 <get_command_and_module.constprop.0>
    if ((module == -1) || (command == NULL)) {
   12872:	9a01      	ldr	r2, [sp, #4]
   12874:	1c53      	adds	r3, r2, #1
    command = get_command_and_module(argv, &module, streamer);
   12876:	4607      	mov	r7, r0
    if ((module == -1) || (command == NULL)) {
   12878:	d03b      	beq.n	128f2 <show_cmd_help+0x96>
   1287a:	2800      	cmp	r0, #0
   1287c:	d039      	beq.n	128f2 <show_cmd_help+0x96>
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   1287e:	4b28      	ldr	r3, [pc, #160]	; (12920 <show_cmd_help+0xc4>)
   12880:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   12884:	f04f 0900 	mov.w	r9, #0
   12888:	685e      	ldr	r6, [r3, #4]
   1288a:	68b1      	ldr	r1, [r6, #8]
   1288c:	4635      	mov	r5, r6
   1288e:	b931      	cbnz	r1, 1289e <show_cmd_help+0x42>
    streamer_printf(streamer, "Unrecognized command: %s\n", argv[0]);
   12890:	f8d8 2000 	ldr.w	r2, [r8]
   12894:	4923      	ldr	r1, [pc, #140]	; (12924 <show_cmd_help+0xc8>)
   12896:	4620      	mov	r0, r4
   12898:	f001 fdfb 	bl	14492 <streamer_printf>
    return 0;
   1289c:	e029      	b.n	128f2 <show_cmd_help+0x96>
        if (!strcmp(command, cmd->sc_cmd)) {
   1289e:	4638      	mov	r0, r7
   128a0:	f7fd fd0e 	bl	102c0 <strcmp>
   128a4:	3610      	adds	r6, #16
   128a6:	2800      	cmp	r0, #0
   128a8:	d136      	bne.n	12918 <show_cmd_help+0xbc>
            if (!cmd->help || (!cmd->help->summary &&
   128aa:	68eb      	ldr	r3, [r5, #12]
   128ac:	b1eb      	cbz	r3, 128ea <show_cmd_help+0x8e>
   128ae:	681a      	ldr	r2, [r3, #0]
   128b0:	bb1a      	cbnz	r2, 128fa <show_cmd_help+0x9e>
   128b2:	685a      	ldr	r2, [r3, #4]
   128b4:	b1b2      	cbz	r2, 128e4 <show_cmd_help+0x88>
                streamer_printf(streamer, "Usage:\n");
   128b6:	491c      	ldr	r1, [pc, #112]	; (12928 <show_cmd_help+0xcc>)
   128b8:	4620      	mov	r0, r4
   128ba:	f001 fdea 	bl	14492 <streamer_printf>
                streamer_printf(streamer, "%s\n", cmd->help->usage);
   128be:	68eb      	ldr	r3, [r5, #12]
   128c0:	491a      	ldr	r1, [pc, #104]	; (1292c <show_cmd_help+0xd0>)
   128c2:	685a      	ldr	r2, [r3, #4]
   128c4:	4620      	mov	r0, r4
   128c6:	f001 fde4 	bl	14492 <streamer_printf>
            if (cmd->help->params) {
   128ca:	68eb      	ldr	r3, [r5, #12]
   128cc:	689b      	ldr	r3, [r3, #8]
   128ce:	b183      	cbz	r3, 128f2 <show_cmd_help+0x96>
                streamer_printf(streamer, "Parameters:\n");
   128d0:	4917      	ldr	r1, [pc, #92]	; (12930 <show_cmd_help+0xd4>)
   128d2:	4620      	mov	r0, r4
   128d4:	f001 fddd 	bl	14492 <streamer_printf>
                print_command_params(module, i, streamer);
   128d8:	9801      	ldr	r0, [sp, #4]
   128da:	4622      	mov	r2, r4
   128dc:	4649      	mov	r1, r9
   128de:	f7ff fc89 	bl	121f4 <print_command_params>
   128e2:	e006      	b.n	128f2 <show_cmd_help+0x96>
                               !cmd->help->usage &&
   128e4:	689b      	ldr	r3, [r3, #8]
   128e6:	2b00      	cmp	r3, #0
   128e8:	d1f2      	bne.n	128d0 <show_cmd_help+0x74>
                streamer_printf(streamer, "(no help available)\n");
   128ea:	4912      	ldr	r1, [pc, #72]	; (12934 <show_cmd_help+0xd8>)
   128ec:	4620      	mov	r0, r4
   128ee:	f001 fdd0 	bl	14492 <streamer_printf>
}
   128f2:	2000      	movs	r0, #0
   128f4:	b003      	add	sp, #12
   128f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                streamer_printf(streamer, "Summary:\n");
   128fa:	490f      	ldr	r1, [pc, #60]	; (12938 <show_cmd_help+0xdc>)
   128fc:	4620      	mov	r0, r4
   128fe:	f001 fdc8 	bl	14492 <streamer_printf>
                streamer_printf(streamer, "%s\n", cmd->help->summary);
   12902:	68eb      	ldr	r3, [r5, #12]
   12904:	4909      	ldr	r1, [pc, #36]	; (1292c <show_cmd_help+0xd0>)
   12906:	681a      	ldr	r2, [r3, #0]
   12908:	4620      	mov	r0, r4
   1290a:	f001 fdc2 	bl	14492 <streamer_printf>
            if (cmd->help->usage) {
   1290e:	68eb      	ldr	r3, [r5, #12]
   12910:	685b      	ldr	r3, [r3, #4]
   12912:	2b00      	cmp	r3, #0
   12914:	d0d9      	beq.n	128ca <show_cmd_help+0x6e>
   12916:	e7ce      	b.n	128b6 <show_cmd_help+0x5a>
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   12918:	f109 0901 	add.w	r9, r9, #1
   1291c:	e7b5      	b.n	1288a <show_cmd_help+0x2e>
   1291e:	bf00      	nop
   12920:	20006a68 	.word	0x20006a68
   12924:	00020aa5 	.word	0x00020aa5
   12928:	00020ad2 	.word	0x00020ad2
   1292c:	00021041 	.word	0x00021041
   12930:	00020af9 	.word	0x00020af9
   12934:	00020ada 	.word	0x00020ada
   12938:	00020aef 	.word	0x00020aef

0001293c <show_help>:
    if ((argc > 2) || ((default_module != -1) && (argc == 2))) {
   1293c:	2902      	cmp	r1, #2
{
   1293e:	b513      	push	{r0, r1, r4, lr}
   12940:	461c      	mov	r4, r3
    if ((argc > 2) || ((default_module != -1) && (argc == 2))) {
   12942:	dc05      	bgt.n	12950 <show_help+0x14>
   12944:	4b18      	ldr	r3, [pc, #96]	; (129a8 <show_help+0x6c>)
   12946:	6818      	ldr	r0, [r3, #0]
   12948:	1c43      	adds	r3, r0, #1
   1294a:	d01e      	beq.n	1298a <show_help+0x4e>
   1294c:	2902      	cmp	r1, #2
   1294e:	d106      	bne.n	1295e <show_help+0x22>
        return show_cmd_help(&argv[1], streamer);
   12950:	4621      	mov	r1, r4
   12952:	1d10      	adds	r0, r2, #4
}
   12954:	b002      	add	sp, #8
   12956:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return show_cmd_help(&argv[1], streamer);
   1295a:	f7ff bf7f 	b.w	1285c <show_cmd_help>
    if ((argc == 2) || ((default_module != -1) && (argc == 1))) {
   1295e:	2901      	cmp	r1, #1
   12960:	d115      	bne.n	1298e <show_help+0x52>
        print_module_commands(module, streamer);
   12962:	4621      	mov	r1, r4
   12964:	f7ff fbfa 	bl	1215c <print_module_commands>
   12968:	e00c      	b.n	12984 <show_help+0x48>
            module = get_destination_module(argv[1], -1);
   1296a:	6852      	ldr	r2, [r2, #4]
   1296c:	9201      	str	r2, [sp, #4]
   1296e:	4601      	mov	r1, r0
   12970:	4610      	mov	r0, r2
   12972:	f7ff fc5f 	bl	12234 <get_destination_module>
            if (module == -1) {
   12976:	1c43      	adds	r3, r0, #1
   12978:	9a01      	ldr	r2, [sp, #4]
   1297a:	d1f2      	bne.n	12962 <show_help+0x26>
                streamer_printf(streamer, "Illegal module %s\n", argv[1]);
   1297c:	490b      	ldr	r1, [pc, #44]	; (129ac <show_help+0x70>)
   1297e:	4620      	mov	r0, r4
   12980:	f001 fd87 	bl	14492 <streamer_printf>
}
   12984:	2000      	movs	r0, #0
   12986:	b002      	add	sp, #8
   12988:	bd10      	pop	{r4, pc}
    if ((argc == 2) || ((default_module != -1) && (argc == 1))) {
   1298a:	2902      	cmp	r1, #2
   1298c:	d0ed      	beq.n	1296a <show_help+0x2e>
        streamer_printf(streamer, "Available modules:\n");
   1298e:	4908      	ldr	r1, [pc, #32]	; (129b0 <show_help+0x74>)
   12990:	4620      	mov	r0, r4
   12992:	f001 fd7e 	bl	14492 <streamer_printf>
        print_modules(streamer);
   12996:	4620      	mov	r0, r4
   12998:	f7ff fc10 	bl	121bc <print_modules>
        streamer_printf(streamer,
   1299c:	4905      	ldr	r1, [pc, #20]	; (129b4 <show_help+0x78>)
   1299e:	4620      	mov	r0, r4
   129a0:	f001 fd77 	bl	14492 <streamer_printf>
   129a4:	e7ee      	b.n	12984 <show_help+0x48>
   129a6:	bf00      	nop
   129a8:	20001410 	.word	0x20001410
   129ac:	00020abf 	.word	0x00020abf
   129b0:	00020b06 	.word	0x00020b06
   129b4:	00020b1a 	.word	0x00020b1a

000129b8 <shell_evq_set>:
    console_line_queue_set(shell_evq);
   129b8:	f7ff baa0 	b.w	11efc <console_line_queue_set>

000129bc <shell_exec>:
{
   129bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    const char *first_string = argv[0];
   129c0:	680c      	ldr	r4, [r1, #0]
    int module = -1;
   129c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
   129c6:	4607      	mov	r7, r0
   129c8:	460e      	mov	r6, r1
   129ca:	4615      	mov	r5, r2
    int module = -1;
   129cc:	9301      	str	r3, [sp, #4]
    if (!first_string || first_string[0] == '\0') {
   129ce:	b10c      	cbz	r4, 129d4 <shell_exec+0x18>
   129d0:	7823      	ldrb	r3, [r4, #0]
   129d2:	b9cb      	cbnz	r3, 12a08 <shell_exec+0x4c>
        streamer_printf(streamer, "Illegal parameter\n");
   129d4:	493a      	ldr	r1, [pc, #232]	; (12ac0 <shell_exec+0x104>)
        streamer_printf(streamer, "Missing parameter\n");
   129d6:	4628      	mov	r0, r5
   129d8:	f001 fd5b 	bl	14492 <streamer_printf>
        if (app_cmd.sc_cmd_func != NULL) {
   129dc:	4c39      	ldr	r4, [pc, #228]	; (12ac4 <shell_exec+0x108>)
   129de:	6863      	ldr	r3, [r4, #4]
   129e0:	2b00      	cmp	r3, #0
   129e2:	d141      	bne.n	12a68 <shell_exec+0xac>
            streamer_printf(streamer, "Unrecognized command: %s\n", argv[0]);
   129e4:	6832      	ldr	r2, [r6, #0]
   129e6:	4938      	ldr	r1, [pc, #224]	; (12ac8 <shell_exec+0x10c>)
   129e8:	4628      	mov	r0, r5
   129ea:	f001 fd52 	bl	14492 <streamer_printf>
            streamer_printf(streamer,
   129ee:	4937      	ldr	r1, [pc, #220]	; (12acc <shell_exec+0x110>)
   129f0:	4628      	mov	r0, r5
   129f2:	f001 fd4e 	bl	14492 <streamer_printf>
            print_prompt_if_console(streamer);
   129f6:	4628      	mov	r0, r5
   129f8:	f7ff fc84 	bl	12304 <print_prompt_if_console>
            return SYS_ENOENT;
   129fc:	f06f 0403 	mvn.w	r4, #3
}
   12a00:	4620      	mov	r0, r4
   12a02:	b003      	add	sp, #12
   12a04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!strcmp(first_string, "help")) {
   12a08:	4931      	ldr	r1, [pc, #196]	; (12ad0 <shell_exec+0x114>)
   12a0a:	4620      	mov	r0, r4
   12a0c:	f7fd fc58 	bl	102c0 <strcmp>
   12a10:	2800      	cmp	r0, #0
   12a12:	d051      	beq.n	12ab8 <shell_exec+0xfc>
    if (!strcmp(first_string, "select")) {
   12a14:	492f      	ldr	r1, [pc, #188]	; (12ad4 <shell_exec+0x118>)
   12a16:	4620      	mov	r0, r4
   12a18:	f7fd fc52 	bl	102c0 <strcmp>
   12a1c:	2800      	cmp	r0, #0
   12a1e:	d04d      	beq.n	12abc <shell_exec+0x100>
    if ((argc == 1) && (default_module == -1)) {
   12a20:	2f01      	cmp	r7, #1
   12a22:	d105      	bne.n	12a30 <shell_exec+0x74>
   12a24:	4b2c      	ldr	r3, [pc, #176]	; (12ad8 <shell_exec+0x11c>)
   12a26:	681b      	ldr	r3, [r3, #0]
   12a28:	3301      	adds	r3, #1
   12a2a:	d101      	bne.n	12a30 <shell_exec+0x74>
        streamer_printf(streamer, "Missing parameter\n");
   12a2c:	492b      	ldr	r1, [pc, #172]	; (12adc <shell_exec+0x120>)
   12a2e:	e7d2      	b.n	129d6 <shell_exec+0x1a>
    command = get_command_and_module(argv, &module, streamer);
   12a30:	462a      	mov	r2, r5
   12a32:	a901      	add	r1, sp, #4
   12a34:	4630      	mov	r0, r6
   12a36:	f7ff fedf 	bl	127f8 <get_command_and_module.constprop.0>
    if ((module == -1) || (command == NULL)) {
   12a3a:	9a01      	ldr	r2, [sp, #4]
   12a3c:	1c51      	adds	r1, r2, #1
    command = get_command_and_module(argv, &module, streamer);
   12a3e:	4681      	mov	r9, r0
    if ((module == -1) || (command == NULL)) {
   12a40:	d0cc      	beq.n	129dc <shell_exec+0x20>
   12a42:	2800      	cmp	r0, #0
   12a44:	d0ca      	beq.n	129dc <shell_exec+0x20>
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   12a46:	4b26      	ldr	r3, [pc, #152]	; (12ae0 <shell_exec+0x124>)
   12a48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   12a4c:	f8d3 8004 	ldr.w	r8, [r3, #4]
   12a50:	f8d8 1008 	ldr.w	r1, [r8, #8]
   12a54:	4644      	mov	r4, r8
   12a56:	2900      	cmp	r1, #0
   12a58:	d0c0      	beq.n	129dc <shell_exec+0x20>
        if (!strcmp(command, shell_module->commands[i].sc_cmd)) {
   12a5a:	4648      	mov	r0, r9
   12a5c:	f7fd fc30 	bl	102c0 <strcmp>
   12a60:	f108 0810 	add.w	r8, r8, #16
   12a64:	2800      	cmp	r0, #0
   12a66:	d1f3      	bne.n	12a50 <shell_exec+0x94>
    if (default_module == -1 && cmd != &shell_cmd_select_module &&
   12a68:	4b1b      	ldr	r3, [pc, #108]	; (12ad8 <shell_exec+0x11c>)
   12a6a:	681b      	ldr	r3, [r3, #0]
   12a6c:	3301      	adds	r3, #1
   12a6e:	d11c      	bne.n	12aaa <shell_exec+0xee>
   12a70:	4b1c      	ldr	r3, [pc, #112]	; (12ae4 <shell_exec+0x128>)
   12a72:	429c      	cmp	r4, r3
   12a74:	d019      	beq.n	12aaa <shell_exec+0xee>
   12a76:	4a1c      	ldr	r2, [pc, #112]	; (12ae8 <shell_exec+0x12c>)
   12a78:	1aa2      	subs	r2, r4, r2
   12a7a:	bf18      	it	ne
   12a7c:	2201      	movne	r2, #1
    if (!cmd->sc_ext) {
   12a7e:	7823      	ldrb	r3, [r4, #0]
        rc = cmd->sc_cmd_func(argc - argc_offset, &argv[argc_offset]);
   12a80:	f8d4 8004 	ldr.w	r8, [r4, #4]
    if (!cmd->sc_ext) {
   12a84:	07db      	lsls	r3, r3, #31
        rc = cmd->sc_cmd_func(argc - argc_offset, &argv[argc_offset]);
   12a86:	eba7 0002 	sub.w	r0, r7, r2
   12a8a:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    if (!cmd->sc_ext) {
   12a8e:	d40e      	bmi.n	12aae <shell_exec+0xf2>
        rc = cmd->sc_cmd_func(argc - argc_offset, &argv[argc_offset]);
   12a90:	4611      	mov	r1, r2
   12a92:	47c0      	blx	r8
    if (rc < 0) {
   12a94:	2800      	cmp	r0, #0
        rc = cmd->sc_cmd_ext_func(cmd, argc - argc_offset, &argv[argc_offset],
   12a96:	4604      	mov	r4, r0
    if (rc < 0) {
   12a98:	da03      	bge.n	12aa2 <shell_exec+0xe6>
        show_cmd_help(argv, streamer);
   12a9a:	4629      	mov	r1, r5
   12a9c:	4630      	mov	r0, r6
   12a9e:	f7ff fedd 	bl	1285c <show_cmd_help>
    print_prompt_if_console(streamer);
   12aa2:	4628      	mov	r0, r5
   12aa4:	f7ff fc2e 	bl	12304 <print_prompt_if_console>
    return rc;
   12aa8:	e7aa      	b.n	12a00 <shell_exec+0x44>
    size_t argc_offset = 0;
   12aaa:	2200      	movs	r2, #0
   12aac:	e7e7      	b.n	12a7e <shell_exec+0xc2>
        rc = cmd->sc_cmd_ext_func(cmd, argc - argc_offset, &argv[argc_offset],
   12aae:	4601      	mov	r1, r0
   12ab0:	462b      	mov	r3, r5
   12ab2:	4620      	mov	r0, r4
   12ab4:	47c0      	blx	r8
   12ab6:	e7ed      	b.n	12a94 <shell_exec+0xd8>
        return &shell_cmd_help;
   12ab8:	4c0b      	ldr	r4, [pc, #44]	; (12ae8 <shell_exec+0x12c>)
   12aba:	e7d5      	b.n	12a68 <shell_exec+0xac>
        return &shell_cmd_select_module;
   12abc:	4c09      	ldr	r4, [pc, #36]	; (12ae4 <shell_exec+0x128>)
    if (!cmd) {
   12abe:	e7d3      	b.n	12a68 <shell_exec+0xac>
   12ac0:	00020b4d 	.word	0x00020b4d
   12ac4:	200066d4 	.word	0x200066d4
   12ac8:	00020aa5 	.word	0x00020aa5
   12acc:	00020b78 	.word	0x00020b78
   12ad0:	00020b60 	.word	0x00020b60
   12ad4:	00020a88 	.word	0x00020a88
   12ad8:	20001410 	.word	0x20001410
   12adc:	00020b65 	.word	0x00020b65
   12ae0:	20006a68 	.word	0x20006a68
   12ae4:	00020c54 	.word	0x00020c54
   12ae8:	00020c44 	.word	0x00020c44

00012aec <shell_process_command>:
{
   12aec:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!strlen(str)) {
   12aee:	7803      	ldrb	r3, [r0, #0]
{
   12af0:	b08f      	sub	sp, #60	; 0x3c
   12af2:	460d      	mov	r5, r1
    if (!strlen(str)) {
   12af4:	b37b      	cbz	r3, 12b56 <shell_process_command+0x6a>
   12af6:	4603      	mov	r3, r0
    while (*str && *str == ' ') {
   12af8:	781a      	ldrb	r2, [r3, #0]
   12afa:	2a20      	cmp	r2, #32
   12afc:	4618      	mov	r0, r3
   12afe:	f103 0301 	add.w	r3, r3, #1
   12b02:	d0f9      	beq.n	12af8 <shell_process_command+0xc>
    if (!*str) {
   12b04:	b33a      	cbz	r2, 12b56 <shell_process_command+0x6a>
    argv[argc++] = str;
   12b06:	9001      	str	r0, [sp, #4]
    while ((str = strchr(str, ' '))) {
   12b08:	2401      	movs	r4, #1
        *str++ = '\0';
   12b0a:	2600      	movs	r6, #0
        argv[argc++] = str;
   12b0c:	af01      	add	r7, sp, #4
    while ((str = strchr(str, ' '))) {
   12b0e:	2120      	movs	r1, #32
   12b10:	f007 f999 	bl	19e46 <strchr>
   12b14:	b140      	cbz	r0, 12b28 <shell_process_command+0x3c>
        *str++ = '\0';
   12b16:	4603      	mov	r3, r0
   12b18:	f803 6b01 	strb.w	r6, [r3], #1
        while (*str && *str == ' ') {
   12b1c:	4618      	mov	r0, r3
   12b1e:	f813 2b01 	ldrb.w	r2, [r3], #1
   12b22:	2a20      	cmp	r2, #32
   12b24:	d0fa      	beq.n	12b1c <shell_process_command+0x30>
        if (!*str) {
   12b26:	b962      	cbnz	r2, 12b42 <shell_process_command+0x56>
    argv[argc] = NULL;
   12b28:	ab0e      	add	r3, sp, #56	; 0x38
   12b2a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   12b2e:	2200      	movs	r2, #0
   12b30:	f843 2c34 	str.w	r2, [r3, #-52]
    shell_exec(argc, argv, streamer);
   12b34:	a901      	add	r1, sp, #4
   12b36:	462a      	mov	r2, r5
   12b38:	4620      	mov	r0, r4
   12b3a:	f7ff ff3f 	bl	129bc <shell_exec>
}
   12b3e:	b00f      	add	sp, #60	; 0x3c
   12b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
        argv[argc++] = str;
   12b42:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
        if (argc == size) {
   12b46:	3401      	adds	r4, #1
   12b48:	2c0d      	cmp	r4, #13
   12b4a:	d1e0      	bne.n	12b0e <shell_process_command+0x22>
            streamer_printf(streamer, "Too many parameters (max %zu)\n",
   12b4c:	4904      	ldr	r1, [pc, #16]	; (12b60 <shell_process_command+0x74>)
   12b4e:	220c      	movs	r2, #12
   12b50:	4628      	mov	r0, r5
   12b52:	f001 fc9e 	bl	14492 <streamer_printf>
        print_prompt_if_console(streamer);
   12b56:	4628      	mov	r0, r5
   12b58:	f7ff fbd4 	bl	12304 <print_prompt_if_console>
        return;
   12b5c:	e7ef      	b.n	12b3e <shell_process_command+0x52>
   12b5e:	bf00      	nop
   12b60:	00020ba4 	.word	0x00020ba4

00012b64 <shell>:
{
   12b64:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (!ev) {
   12b66:	4605      	mov	r5, r0
   12b68:	b920      	cbnz	r0, 12b74 <shell+0x10>
}
   12b6a:	b002      	add	sp, #8
   12b6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        print_prompt();
   12b70:	f7ff bba2 	b.w	122b8 <print_prompt>
    cmd = ev->ev_arg;
   12b74:	6884      	ldr	r4, [r0, #8]
    if (!cmd) {
   12b76:	2c00      	cmp	r4, #0
   12b78:	d0f7      	beq.n	12b6a <shell+0x6>
    streamer = streamer_console_get();
   12b7a:	f001 fca3 	bl	144c4 <streamer_console_get>
   12b7e:	9001      	str	r0, [sp, #4]
    shell_line_len = strlen(shell_line);
   12b80:	4620      	mov	r0, r4
   12b82:	f007 f975 	bl	19e70 <strlen>
    if (shell_line_len > 2) {
   12b86:	2802      	cmp	r0, #2
   12b88:	9901      	ldr	r1, [sp, #4]
    shell_line_len = strlen(shell_line);
   12b8a:	4606      	mov	r6, r0
    if (shell_line_len > 2) {
   12b8c:	d916      	bls.n	12bbc <shell+0x58>
        if (shell_line[0] == SHELL_NLIP_PKT_START1 &&
   12b8e:	7823      	ldrb	r3, [r4, #0]
   12b90:	2b06      	cmp	r3, #6
   12b92:	d10e      	bne.n	12bb2 <shell+0x4e>
   12b94:	7863      	ldrb	r3, [r4, #1]
   12b96:	2b09      	cmp	r3, #9
   12b98:	d110      	bne.n	12bbc <shell+0x58>
            shell_nlip_clear_pkt();
   12b9a:	f000 f93f 	bl	12e1c <shell_nlip_clear_pkt>
            shell_nlip_process(&shell_line[2], shell_line_len - 2);
   12b9e:	1eb1      	subs	r1, r6, #2
   12ba0:	1ca0      	adds	r0, r4, #2
   12ba2:	f000 f94b 	bl	12e3c <shell_nlip_process>
    console_line_event_put(ev);
   12ba6:	4628      	mov	r0, r5
}
   12ba8:	b002      	add	sp, #8
   12baa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    console_line_event_put(ev);
   12bae:	f7ff b9ab 	b.w	11f08 <console_line_event_put>
        } else if (shell_line[0] == SHELL_NLIP_DATA_START1 &&
   12bb2:	2b04      	cmp	r3, #4
   12bb4:	d102      	bne.n	12bbc <shell+0x58>
   12bb6:	7863      	ldrb	r3, [r4, #1]
   12bb8:	2b14      	cmp	r3, #20
   12bba:	d0f0      	beq.n	12b9e <shell+0x3a>
        shell_process_command(shell_line, streamer);
   12bbc:	4620      	mov	r0, r4
   12bbe:	f7ff ff95 	bl	12aec <shell_process_command>
   12bc2:	e7f0      	b.n	12ba6 <shell+0x42>

00012bc4 <shell_register>:
    }
}

int
shell_register(const char *module_name, const struct shell_cmd *commands)
{
   12bc4:	b510      	push	{r4, lr}
    if (num_of_shell_entities >= MYNEWT_VAL(SHELL_MAX_MODULES)) {
   12bc6:	4c0c      	ldr	r4, [pc, #48]	; (12bf8 <shell_register+0x34>)
   12bc8:	6823      	ldr	r3, [r4, #0]
   12bca:	2b02      	cmp	r3, #2
   12bcc:	d90a      	bls.n	12be4 <shell_register+0x20>
        MODLOG_ERROR(LOG_MODULE_DEFAULT, "Max number of modules reached\n");
   12bce:	4a0b      	ldr	r2, [pc, #44]	; (12bfc <shell_register+0x38>)
   12bd0:	2103      	movs	r1, #3
   12bd2:	2000      	movs	r0, #0
   12bd4:	f009 fd9c 	bl	1c710 <modlog_printf>
        assert(0);
   12bd8:	2300      	movs	r3, #0
   12bda:	461a      	mov	r2, r3
   12bdc:	4619      	mov	r1, r3
   12bde:	4618      	mov	r0, r3
   12be0:	f7f9 fe0c 	bl	c7fc <__assert_func>
    }

    shell_modules[num_of_shell_entities].name = module_name;
   12be4:	4a06      	ldr	r2, [pc, #24]	; (12c00 <shell_register+0x3c>)
   12be6:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
    shell_modules[num_of_shell_entities].commands = commands;
   12bea:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    ++num_of_shell_entities;
   12bee:	3301      	adds	r3, #1
    shell_modules[num_of_shell_entities].commands = commands;
   12bf0:	6051      	str	r1, [r2, #4]
    ++num_of_shell_entities;
   12bf2:	6023      	str	r3, [r4, #0]

    return 0;
}
   12bf4:	2000      	movs	r0, #0
   12bf6:	bd10      	pop	{r4, pc}
   12bf8:	20006a40 	.word	0x20006a40
   12bfc:	00020bc3 	.word	0x00020bc3
   12c00:	20006a68 	.word	0x20006a68

00012c04 <shell_cmd_register>:
static int num_compat_commands;
static int module_registered;

int
shell_cmd_register(const struct shell_cmd *sc)
{
   12c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int rc;

    if (num_compat_commands >= MYNEWT_VAL(SHELL_MAX_COMPAT_COMMANDS)) {
   12c06:	4f17      	ldr	r7, [pc, #92]	; (12c64 <shell_cmd_register+0x60>)
   12c08:	683b      	ldr	r3, [r7, #0]
   12c0a:	2b13      	cmp	r3, #19
{
   12c0c:	4605      	mov	r5, r0
    if (num_compat_commands >= MYNEWT_VAL(SHELL_MAX_COMPAT_COMMANDS)) {
   12c0e:	dd0a      	ble.n	12c26 <shell_cmd_register+0x22>
        MODLOG_ERROR(LOG_MODULE_DEFAULT,
   12c10:	4a15      	ldr	r2, [pc, #84]	; (12c68 <shell_cmd_register+0x64>)
   12c12:	2103      	movs	r1, #3
   12c14:	2000      	movs	r0, #0
   12c16:	f009 fd7b 	bl	1c710 <modlog_printf>
                     "Max number of compat commands reached\n");
        assert(0);
   12c1a:	2300      	movs	r3, #0
   12c1c:	461a      	mov	r2, r3
   12c1e:	4619      	mov	r1, r3
   12c20:	4618      	mov	r0, r3
   12c22:	f7f9 fdeb 	bl	c7fc <__assert_func>
    }

    if (!module_registered) {
   12c26:	4e11      	ldr	r6, [pc, #68]	; (12c6c <shell_cmd_register+0x68>)
   12c28:	6834      	ldr	r4, [r6, #0]
   12c2a:	b97c      	cbnz	r4, 12c4c <shell_cmd_register+0x48>
        shell_register(SHELL_COMPAT_MODULE_NAME, compat_commands);
   12c2c:	4910      	ldr	r1, [pc, #64]	; (12c70 <shell_cmd_register+0x6c>)
   12c2e:	4811      	ldr	r0, [pc, #68]	; (12c74 <shell_cmd_register+0x70>)
   12c30:	f7ff ffc8 	bl	12bc4 <shell_register>
        module_registered = 1;
   12c34:	2301      	movs	r3, #1

        rc = set_default_module(SHELL_COMPAT_MODULE_NAME);
   12c36:	480f      	ldr	r0, [pc, #60]	; (12c74 <shell_cmd_register+0x70>)
        module_registered = 1;
   12c38:	6033      	str	r3, [r6, #0]
        rc = set_default_module(SHELL_COMPAT_MODULE_NAME);
   12c3a:	f7ff fb1f 	bl	1227c <set_default_module>
        if (rc != 0) {
   12c3e:	b128      	cbz	r0, 12c4c <shell_cmd_register+0x48>
            MODLOG_ERROR(LOG_MODULE_DEFAULT,
   12c40:	4b0c      	ldr	r3, [pc, #48]	; (12c74 <shell_cmd_register+0x70>)
   12c42:	4a0d      	ldr	r2, [pc, #52]	; (12c78 <shell_cmd_register+0x74>)
   12c44:	2103      	movs	r1, #3
   12c46:	4620      	mov	r0, r4
   12c48:	f009 fd62 	bl	1c710 <modlog_printf>
                         "Illegal module %s, default is not changed\n",
                         SHELL_COMPAT_MODULE_NAME);
        }
    }

    compat_commands[num_compat_commands] = *sc;
   12c4c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   12c50:	683e      	ldr	r6, [r7, #0]
   12c52:	4c07      	ldr	r4, [pc, #28]	; (12c70 <shell_cmd_register+0x6c>)
   12c54:	eb04 1406 	add.w	r4, r4, r6, lsl #4
    ++num_compat_commands;
   12c58:	3601      	adds	r6, #1
    compat_commands[num_compat_commands] = *sc;
   12c5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    ++num_compat_commands;
   12c5e:	603e      	str	r6, [r7, #0]
    return 0;
}
   12c60:	2000      	movs	r0, #0
   12c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12c64:	20006a3c 	.word	0x20006a3c
   12c68:	00020be2 	.word	0x00020be2
   12c6c:	20006a38 	.word	0x20006a38
   12c70:	200068e8 	.word	0x200068e8
   12c74:	00020c09 	.word	0x00020c09
   12c78:	00020c10 	.word	0x00020c10

00012c7c <shell_init>:
#endif

void
shell_init(void)
{
   12c7c:	b570      	push	{r4, r5, r6, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   12c7e:	4b15      	ldr	r3, [pc, #84]	; (12cd4 <shell_init+0x58>)
   12c80:	781b      	ldrb	r3, [r3, #0]
   12c82:	b30b      	cbz	r3, 12cc8 <shell_init+0x4c>
        shell_console_ev[i].ev_cb = shell;
   12c84:	4c14      	ldr	r4, [pc, #80]	; (12cd8 <shell_init+0x5c>)
        shell_console_ev[i].ev_arg = &buf[i];
   12c86:	4d15      	ldr	r5, [pc, #84]	; (12cdc <shell_init+0x60>)
        shell_console_ev[i].ev_cb = shell;
   12c88:	4e15      	ldr	r6, [pc, #84]	; (12ce0 <shell_init+0x64>)
        shell_console_ev[i].ev_arg = &buf[i];
   12c8a:	60a5      	str	r5, [r4, #8]
        console_line_event_put(&shell_console_ev[i]);
   12c8c:	4620      	mov	r0, r4
        shell_console_ev[i].ev_cb = shell;
   12c8e:	6066      	str	r6, [r4, #4]
        shell_console_ev[i].ev_arg = &buf[i];
   12c90:	f505 7580 	add.w	r5, r5, #256	; 0x100
        console_line_event_put(&shell_console_ev[i]);
   12c94:	f7ff f938 	bl	11f08 <console_line_event_put>
   12c98:	f104 0010 	add.w	r0, r4, #16
        shell_console_ev[i].ev_cb = shell;
   12c9c:	6166      	str	r6, [r4, #20]
        shell_console_ev[i].ev_arg = &buf[i];
   12c9e:	61a5      	str	r5, [r4, #24]
        console_line_event_put(&shell_console_ev[i]);
   12ca0:	f7ff f932 	bl	11f08 <console_line_event_put>
#if !MYNEWT_VAL(SHELL_TASK)
    return;
#endif

    shell_avail_queue_init();
    shell_evq_set(os_eventq_dflt_get());
   12ca4:	f7fa f930 	bl	cf08 <os_eventq_dflt_get>
   12ca8:	f7ff fe86 	bl	129b8 <shell_evq_set>

    prompt = SHELL_PROMPT;
   12cac:	4b0d      	ldr	r3, [pc, #52]	; (12ce4 <shell_init+0x68>)
   12cae:	4a0e      	ldr	r2, [pc, #56]	; (12ce8 <shell_init+0x6c>)
   12cb0:	601a      	str	r2, [r3, #0]

#if MYNEWT_VAL(SHELL_NEWTMGR)
    shell_nlip_init();
   12cb2:	f000 f93b 	bl	12f2c <shell_nlip_init>
#endif

#if MYNEWT_VAL(SHELL_COMPLETION)
    console_set_completion_cb(completion);
   12cb6:	480d      	ldr	r0, [pc, #52]	; (12cec <shell_init+0x70>)
   12cb8:	f7ff f93a 	bl	11f30 <console_set_completion_cb>
#endif

#if MYNEWT_VAL(SHELL_OS_MODULE)
    shell_os_register();
   12cbc:	f000 fa88 	bl	131d0 <shell_os_register>
    shell_prompt_register();
#endif
#if MYNEWT_VAL(SHELL_BRIDGE)
    shell_bridge_init();
#endif
}
   12cc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    shell_prompt_register();
   12cc4:	f000 bac6 	b.w	13254 <shell_prompt_register>
    SYSINIT_ASSERT_ACTIVE();
   12cc8:	461a      	mov	r2, r3
   12cca:	4619      	mov	r1, r3
   12ccc:	4618      	mov	r0, r3
   12cce:	f7f9 fd95 	bl	c7fc <__assert_func>
   12cd2:	bf00      	nop
   12cd4:	20006af4 	.word	0x20006af4
   12cd8:	20006a48 	.word	0x20006a48
   12cdc:	200066e8 	.word	0x200066e8
   12ce0:	00012b65 	.word	0x00012b65
   12ce4:	20006a44 	.word	0x20006a44
   12ce8:	00020c3b 	.word	0x00020c3b
   12cec:	000125a5 	.word	0x000125a5

00012cf0 <shell_event_data_in>:
    return os_mqueue_put(&g_shell_nlip_mq, os_eventq_dflt_get(), m);
}

static void
shell_event_data_in(struct os_event *ev)
{
   12cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char pkt_seq[3] = { '\n', SHELL_NLIP_PKT_START1, SHELL_NLIP_PKT_START2 };
   12cf4:	f8df 911c 	ldr.w	r9, [pc, #284]	; 12e14 <shell_event_data_in+0x124>
            console_write("\n", 1);
   12cf8:	f8df a11c 	ldr.w	sl, [pc, #284]	; 12e18 <shell_event_data_in+0x128>
{
   12cfc:	b08b      	sub	sp, #44	; 0x2c

    /* Copy data out of the mbuf 12 bytes at a time and write it to
     * the console.
     */
    while (1) {
        m = os_mqueue_get(&g_shell_nlip_mq);
   12cfe:	4844      	ldr	r0, [pc, #272]	; (12e10 <shell_event_data_in+0x120>)
   12d00:	f7fa ffc5 	bl	dc8e <os_mqueue_get>
        if (!m) {
   12d04:	4606      	mov	r6, r0
   12d06:	2800      	cmp	r0, #0
   12d08:	d07e      	beq.n	12e08 <shell_event_data_in+0x118>
    char pkt_seq[3] = { '\n', SHELL_NLIP_PKT_START1, SHELL_NLIP_PKT_START2 };
   12d0a:	f899 3002 	ldrb.w	r3, [r9, #2]
   12d0e:	f8b9 2000 	ldrh.w	r2, [r9]
   12d12:	f88d 300a 	strb.w	r3, [sp, #10]
    char esc_seq[2] = { SHELL_NLIP_DATA_START1, SHELL_NLIP_DATA_START2 };
   12d16:	f241 4304 	movw	r3, #5124	; 0x1404
   12d1a:	4604      	mov	r4, r0
    char pkt_seq[3] = { '\n', SHELL_NLIP_PKT_START1, SHELL_NLIP_PKT_START2 };
   12d1c:	f8ad 2008 	strh.w	r2, [sp, #8]
    char esc_seq[2] = { SHELL_NLIP_DATA_START1, SHELL_NLIP_DATA_START2 };
   12d20:	f8ad 3004 	strh.w	r3, [sp, #4]
    crc = CRC16_INITIAL_CRC;
   12d24:	2000      	movs	r0, #0
        crc = crc16_ccitt(crc, tmp->om_data, tmp->om_len);
   12d26:	88e2      	ldrh	r2, [r4, #6]
   12d28:	6821      	ldr	r1, [r4, #0]
   12d2a:	f001 fb81 	bl	14430 <crc16_ccitt>
    for (tmp = m; tmp; tmp = SLIST_NEXT(tmp, om_next)) {
   12d2e:	68e4      	ldr	r4, [r4, #12]
   12d30:	2c00      	cmp	r4, #0
   12d32:	d1f8      	bne.n	12d26 <shell_event_data_in+0x36>
    crc = htons(crc);
   12d34:	ba45      	rev16	r5, r0
    ptr = os_mbuf_extend(m, sizeof(crc));
   12d36:	2102      	movs	r1, #2
   12d38:	4630      	mov	r0, r6
   12d3a:	f7fb f953 	bl	dfe4 <os_mbuf_extend>
    if (!ptr) {
   12d3e:	b1e8      	cbz	r0, 12d7c <shell_event_data_in+0x8c>
    memcpy(ptr, &crc, sizeof(crc));
   12d40:	8005      	strh	r5, [r0, #0]
    rc = console_lock(OS_TICKS_PER_SEC);
   12d42:	2080      	movs	r0, #128	; 0x80
   12d44:	8a37      	ldrh	r7, [r6, #16]
   12d46:	f7fe fcb5 	bl	116b4 <console_lock>
    if (rc != OS_OK) {
   12d4a:	b9b8      	cbnz	r0, 12d7c <shell_event_data_in+0x8c>
    console_write(pkt_seq, sizeof(pkt_seq));
   12d4c:	2103      	movs	r1, #3
   12d4e:	a802      	add	r0, sp, #8
   12d50:	f7fe fe62 	bl	11a18 <console_write>
    memcpy(readbuf, &dlen, sizeof(dlen));
   12d54:	ba7b      	rev16	r3, r7
   12d56:	f8ad 300c 	strh.w	r3, [sp, #12]
    off = 0;
   12d5a:	46a0      	mov	r8, r4
    rb_off += 2;
   12d5c:	2302      	movs	r3, #2
    while (totlen > 0) {
   12d5e:	b98f      	cbnz	r7, 12d84 <shell_event_data_in+0x94>
    elen = base64_pad(encodebuf, bodylen);
   12d60:	4621      	mov	r1, r4
   12d62:	a806      	add	r0, sp, #24
   12d64:	f001 fce4 	bl	14730 <base64_pad>
   12d68:	4601      	mov	r1, r0
    console_write(encodebuf, elen);
   12d6a:	a806      	add	r0, sp, #24
   12d6c:	f7fe fe54 	bl	11a18 <console_write>
    console_write("\n", 1);
   12d70:	2101      	movs	r1, #1
   12d72:	4650      	mov	r0, sl
   12d74:	f7fe fe50 	bl	11a18 <console_write>
    (void)console_unlock();
   12d78:	f7fe fcb4 	bl	116e4 <console_unlock>
            break;
        }

        (void) shell_nlip_mtx(m);

        os_mbuf_free_chain(m);
   12d7c:	4630      	mov	r0, r6
   12d7e:	f7fa ffea 	bl	dd56 <os_mbuf_free_chain>
        m = os_mqueue_get(&g_shell_nlip_mq);
   12d82:	e7bc      	b.n	12cfe <shell_event_data_in+0xe>
        dlen = min(SHELL_NLIP_MTX_BUF_SIZE - rb_off, totlen);
   12d84:	f1c3 050c 	rsb	r5, r3, #12
   12d88:	42bd      	cmp	r5, r7
   12d8a:	bfa8      	it	ge
   12d8c:	463d      	movge	r5, r7
        newbodylen = 2 + bodylen + BASE64_ENCODE_SIZE(dlen + rb_off) + 1;
   12d8e:	eb03 0b05 	add.w	fp, r3, r5
   12d92:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
   12d96:	2103      	movs	r1, #3
   12d98:	fbb2 f2f1 	udiv	r2, r2, r1
   12d9c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   12da0:	3207      	adds	r2, #7
        if (newbodylen > MGMT_NLIP_MAX_FRAME) {
   12da2:	b292      	uxth	r2, r2
   12da4:	2a7f      	cmp	r2, #127	; 0x7f
   12da6:	d912      	bls.n	12dce <shell_event_data_in+0xde>
            elen = base64_pad(encodebuf, bodylen);
   12da8:	4621      	mov	r1, r4
   12daa:	a806      	add	r0, sp, #24
   12dac:	f001 fcc0 	bl	14730 <base64_pad>
   12db0:	4601      	mov	r1, r0
            console_write(encodebuf, elen);
   12db2:	a806      	add	r0, sp, #24
   12db4:	f7fe fe30 	bl	11a18 <console_write>
            console_write("\n", 1);
   12db8:	2101      	movs	r1, #1
   12dba:	4650      	mov	r0, sl
   12dbc:	f7fe fe2c 	bl	11a18 <console_write>
            console_write(esc_seq, sizeof(esc_seq));
   12dc0:	2102      	movs	r1, #2
   12dc2:	a801      	add	r0, sp, #4
   12dc4:	f7fe fe28 	bl	11a18 <console_write>
            bodylen = 0;
   12dc8:	2400      	movs	r4, #0
   12dca:	2300      	movs	r3, #0
   12dcc:	e7c7      	b.n	12d5e <shell_event_data_in+0x6e>
            rc = os_mbuf_copydata(m, off, dlen, readbuf + rb_off);
   12dce:	aa03      	add	r2, sp, #12
   12dd0:	4413      	add	r3, r2
   12dd2:	4641      	mov	r1, r8
   12dd4:	462a      	mov	r2, r5
   12dd6:	4630      	mov	r0, r6
   12dd8:	f7fb f825 	bl	de26 <os_mbuf_copydata>
            if (rc != 0) {
   12ddc:	4603      	mov	r3, r0
   12dde:	2800      	cmp	r0, #0
   12de0:	d1ca      	bne.n	12d78 <shell_event_data_in+0x88>
            elen = base64_encode(readbuf, dlen + rb_off, encodebuf, 0);
   12de2:	4659      	mov	r1, fp
   12de4:	aa06      	add	r2, sp, #24
   12de6:	a803      	add	r0, sp, #12
   12de8:	f001 fc56 	bl	14698 <base64_encode>
        dlen = min(SHELL_NLIP_MTX_BUF_SIZE - rb_off, totlen);
   12dec:	b2ad      	uxth	r5, r5
            elen = base64_encode(readbuf, dlen + rb_off, encodebuf, 0);
   12dee:	4683      	mov	fp, r0
            console_write(encodebuf, elen);
   12df0:	4601      	mov	r1, r0
            bodylen += elen;
   12df2:	445c      	add	r4, fp
            console_write(encodebuf, elen);
   12df4:	a806      	add	r0, sp, #24
            totlen -= dlen;
   12df6:	1b7f      	subs	r7, r7, r5
            off += dlen;
   12df8:	44a8      	add	r8, r5
            console_write(encodebuf, elen);
   12dfa:	f7fe fe0d 	bl	11a18 <console_write>
            bodylen += elen;
   12dfe:	b2a4      	uxth	r4, r4
            totlen -= dlen;
   12e00:	b2bf      	uxth	r7, r7
            off += dlen;
   12e02:	fa1f f888 	uxth.w	r8, r8
   12e06:	e7e0      	b.n	12dca <shell_event_data_in+0xda>
    }
}
   12e08:	b00b      	add	sp, #44	; 0x2c
   12e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e0e:	bf00      	nop
   12e10:	20006a90 	.word	0x20006a90
   12e14:	00020c64 	.word	0x00020c64
   12e18:	00021bd1 	.word	0x00021bd1

00012e1c <shell_nlip_clear_pkt>:
{
   12e1c:	b510      	push	{r4, lr}
    if (g_nlip_mbuf) {
   12e1e:	4c05      	ldr	r4, [pc, #20]	; (12e34 <shell_nlip_clear_pkt+0x18>)
   12e20:	6820      	ldr	r0, [r4, #0]
   12e22:	b118      	cbz	r0, 12e2c <shell_nlip_clear_pkt+0x10>
        os_mbuf_free_chain(g_nlip_mbuf);
   12e24:	f7fa ff97 	bl	dd56 <os_mbuf_free_chain>
        g_nlip_mbuf = NULL;
   12e28:	2300      	movs	r3, #0
   12e2a:	6023      	str	r3, [r4, #0]
    g_nlip_expected_len = 0;
   12e2c:	4b02      	ldr	r3, [pc, #8]	; (12e38 <shell_nlip_clear_pkt+0x1c>)
   12e2e:	2200      	movs	r2, #0
   12e30:	801a      	strh	r2, [r3, #0]
}
   12e32:	bd10      	pop	{r4, pc}
   12e34:	20006a84 	.word	0x20006a84
   12e38:	20006a80 	.word	0x20006a80

00012e3c <shell_nlip_process>:
{
   12e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    rc = base64_decode(data, data);
   12e40:	4601      	mov	r1, r0
{
   12e42:	4606      	mov	r6, r0
    rc = base64_decode(data, data);
   12e44:	f001 fc86 	bl	14754 <base64_decode>
    if (rc < 0) {
   12e48:	1e04      	subs	r4, r0, #0
   12e4a:	db06      	blt.n	12e5a <shell_nlip_process+0x1e>
    if (g_nlip_mbuf == NULL) {
   12e4c:	4d27      	ldr	r5, [pc, #156]	; (12eec <shell_nlip_process+0xb0>)
   12e4e:	6829      	ldr	r1, [r5, #0]
   12e50:	b991      	cbnz	r1, 12e78 <shell_nlip_process+0x3c>
        if (len < 2) {
   12e52:	2c01      	cmp	r4, #1
   12e54:	dc04      	bgt.n	12e60 <shell_nlip_process+0x24>
            rc = -1;
   12e56:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   12e5a:	4620      	mov	r0, r4
   12e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        g_nlip_expected_len = ntohs(*(uint16_t *) data);
   12e60:	8830      	ldrh	r0, [r6, #0]
   12e62:	4b23      	ldr	r3, [pc, #140]	; (12ef0 <shell_nlip_process+0xb4>)
   12e64:	ba40      	rev16	r0, r0
   12e66:	8018      	strh	r0, [r3, #0]
        g_nlip_mbuf = os_msys_get_pkthdr(g_nlip_expected_len, 0);
   12e68:	b280      	uxth	r0, r0
   12e6a:	f7fa f92b 	bl	d0c4 <os_msys_get_pkthdr>
   12e6e:	6028      	str	r0, [r5, #0]
        if (!g_nlip_mbuf) {
   12e70:	2800      	cmp	r0, #0
   12e72:	d0f0      	beq.n	12e56 <shell_nlip_process+0x1a>
        data += sizeof(uint16_t);
   12e74:	3602      	adds	r6, #2
        len -= sizeof(uint16_t);
   12e76:	3c02      	subs	r4, #2
    copy_len = min(g_nlip_expected_len - OS_MBUF_PKTHDR(g_nlip_mbuf)->omp_len,
   12e78:	6828      	ldr	r0, [r5, #0]
   12e7a:	4f1d      	ldr	r7, [pc, #116]	; (12ef0 <shell_nlip_process+0xb4>)
   12e7c:	8a01      	ldrh	r1, [r0, #16]
   12e7e:	883b      	ldrh	r3, [r7, #0]
   12e80:	1a5b      	subs	r3, r3, r1
   12e82:	42a3      	cmp	r3, r4
   12e84:	bfa8      	it	ge
   12e86:	4623      	movge	r3, r4
    rc = os_mbuf_copyinto(g_nlip_mbuf, OS_MBUF_PKTHDR(g_nlip_mbuf)->omp_len,
   12e88:	b29b      	uxth	r3, r3
   12e8a:	4632      	mov	r2, r6
   12e8c:	f7fb f86c 	bl	df68 <os_mbuf_copyinto>
    if (rc != 0) {
   12e90:	4604      	mov	r4, r0
   12e92:	2800      	cmp	r0, #0
   12e94:	d1e1      	bne.n	12e5a <shell_nlip_process+0x1e>
    if (OS_MBUF_PKTHDR(g_nlip_mbuf)->omp_len == g_nlip_expected_len) {
   12e96:	682e      	ldr	r6, [r5, #0]
   12e98:	883b      	ldrh	r3, [r7, #0]
   12e9a:	8a32      	ldrh	r2, [r6, #16]
   12e9c:	429a      	cmp	r2, r3
   12e9e:	d1dc      	bne.n	12e5a <shell_nlip_process+0x1e>
        if (g_shell_nlip_in_func) {
   12ea0:	f8df 8054 	ldr.w	r8, [pc, #84]	; 12ef8 <shell_nlip_process+0xbc>
   12ea4:	f8d8 3000 	ldr.w	r3, [r8]
   12ea8:	b1e3      	cbz	r3, 12ee4 <shell_nlip_process+0xa8>
            crc = CRC16_INITIAL_CRC;
   12eaa:	4603      	mov	r3, r0
                crc = crc16_ccitt(crc, m->om_data, m->om_len);
   12eac:	88f2      	ldrh	r2, [r6, #6]
   12eae:	6831      	ldr	r1, [r6, #0]
   12eb0:	4618      	mov	r0, r3
   12eb2:	f001 fabd 	bl	14430 <crc16_ccitt>
            for (m = g_nlip_mbuf; m; m = SLIST_NEXT(m, om_next)) {
   12eb6:	68f6      	ldr	r6, [r6, #12]
                crc = crc16_ccitt(crc, m->om_data, m->om_len);
   12eb8:	4603      	mov	r3, r0
            for (m = g_nlip_mbuf; m; m = SLIST_NEXT(m, om_next)) {
   12eba:	2e00      	cmp	r6, #0
   12ebc:	d1f6      	bne.n	12eac <shell_nlip_process+0x70>
                os_mbuf_adj(g_nlip_mbuf, -sizeof(crc));
   12ebe:	6828      	ldr	r0, [r5, #0]
            if (crc == 0 && g_nlip_expected_len >= sizeof(crc)) {
   12ec0:	b98b      	cbnz	r3, 12ee6 <shell_nlip_process+0xaa>
   12ec2:	883b      	ldrh	r3, [r7, #0]
   12ec4:	2b01      	cmp	r3, #1
   12ec6:	d90e      	bls.n	12ee6 <shell_nlip_process+0xaa>
                os_mbuf_adj(g_nlip_mbuf, -sizeof(crc));
   12ec8:	f06f 0101 	mvn.w	r1, #1
   12ecc:	f7fa ffd1 	bl	de72 <os_mbuf_adj>
                g_shell_nlip_in_func(g_nlip_mbuf, g_shell_nlip_in_arg);
   12ed0:	4a08      	ldr	r2, [pc, #32]	; (12ef4 <shell_nlip_process+0xb8>)
   12ed2:	f8d8 3000 	ldr.w	r3, [r8]
   12ed6:	6811      	ldr	r1, [r2, #0]
   12ed8:	6828      	ldr	r0, [r5, #0]
   12eda:	4798      	blx	r3
        g_nlip_mbuf = NULL;
   12edc:	2300      	movs	r3, #0
   12ede:	602b      	str	r3, [r5, #0]
        g_nlip_expected_len = 0;
   12ee0:	803b      	strh	r3, [r7, #0]
   12ee2:	e7ba      	b.n	12e5a <shell_nlip_process+0x1e>
            os_mbuf_free_chain(g_nlip_mbuf);
   12ee4:	4630      	mov	r0, r6
   12ee6:	f7fa ff36 	bl	dd56 <os_mbuf_free_chain>
   12eea:	e7f7      	b.n	12edc <shell_nlip_process+0xa0>
   12eec:	20006a84 	.word	0x20006a84
   12ef0:	20006a80 	.word	0x20006a80
   12ef4:	20006a88 	.word	0x20006a88
   12ef8:	20006a8c 	.word	0x20006a8c

00012efc <shell_nlip_input_register>:
    g_shell_nlip_in_func = nf;
   12efc:	4b02      	ldr	r3, [pc, #8]	; (12f08 <shell_nlip_input_register+0xc>)
   12efe:	6018      	str	r0, [r3, #0]
    g_shell_nlip_in_arg = arg;
   12f00:	4b02      	ldr	r3, [pc, #8]	; (12f0c <shell_nlip_input_register+0x10>)
}
   12f02:	2000      	movs	r0, #0
    g_shell_nlip_in_arg = arg;
   12f04:	6019      	str	r1, [r3, #0]
}
   12f06:	4770      	bx	lr
   12f08:	20006a8c 	.word	0x20006a8c
   12f0c:	20006a88 	.word	0x20006a88

00012f10 <shell_nlip_output>:
{
   12f10:	b507      	push	{r0, r1, r2, lr}
   12f12:	9001      	str	r0, [sp, #4]
    return os_mqueue_put(&g_shell_nlip_mq, os_eventq_dflt_get(), m);
   12f14:	f7f9 fff8 	bl	cf08 <os_eventq_dflt_get>
   12f18:	9a01      	ldr	r2, [sp, #4]
   12f1a:	4601      	mov	r1, r0
   12f1c:	4802      	ldr	r0, [pc, #8]	; (12f28 <shell_nlip_output+0x18>)
}
   12f1e:	b003      	add	sp, #12
   12f20:	f85d eb04 	ldr.w	lr, [sp], #4
    return os_mqueue_put(&g_shell_nlip_mq, os_eventq_dflt_get(), m);
   12f24:	f7fa bec3 	b.w	dcae <os_mqueue_put>
   12f28:	20006a90 	.word	0x20006a90

00012f2c <shell_nlip_init>:

void
shell_nlip_init(void)
{
    os_mqueue_init(&g_shell_nlip_mq, shell_event_data_in, NULL);
   12f2c:	4902      	ldr	r1, [pc, #8]	; (12f38 <shell_nlip_init+0xc>)
   12f2e:	4803      	ldr	r0, [pc, #12]	; (12f3c <shell_nlip_init+0x10>)
   12f30:	2200      	movs	r2, #0
   12f32:	f7fa be9c 	b.w	dc6e <os_mqueue_init>
   12f36:	bf00      	nop
   12f38:	00012cf1 	.word	0x00012cf1
   12f3c:	20006a90 	.word	0x20006a90

00012f40 <shell_os_ls_dev>:
    return 0;
}

static int
shell_os_ls_dev(struct os_dev *dev, void *arg)
{
   12f40:	b507      	push	{r0, r1, r2, lr}
   12f42:	4602      	mov	r2, r0
   12f44:	4608      	mov	r0, r1
    struct streamer *streamer;

    streamer = arg;
    streamer_printf(streamer, "%4d %3x %s\n",
   12f46:	69d3      	ldr	r3, [r2, #28]
   12f48:	9300      	str	r3, [sp, #0]
   12f4a:	7ed3      	ldrb	r3, [r2, #27]
   12f4c:	4903      	ldr	r1, [pc, #12]	; (12f5c <shell_os_ls_dev+0x1c>)
   12f4e:	7e92      	ldrb	r2, [r2, #26]
   12f50:	f001 fa9f 	bl	14492 <streamer_printf>
                    dev->od_open_ref, dev->od_flags, dev->od_name);
    return 0;
}
   12f54:	2000      	movs	r0, #0
   12f56:	b003      	add	sp, #12
   12f58:	f85d fb04 	ldr.w	pc, [sp], #4
   12f5c:	00020c68 	.word	0x00020c68

00012f60 <shell_os_mpool_display_cmd>:
{
   12f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (argc > 1 && strcmp(argv[1], "")) {
   12f64:	2901      	cmp	r1, #1
{
   12f66:	b090      	sub	sp, #64	; 0x40
   12f68:	461d      	mov	r5, r3
    if (argc > 1 && strcmp(argv[1], "")) {
   12f6a:	dd33      	ble.n	12fd4 <shell_os_mpool_display_cmd+0x74>
   12f6c:	6854      	ldr	r4, [r2, #4]
   12f6e:	7823      	ldrb	r3, [r4, #0]
    name = NULL;
   12f70:	2b00      	cmp	r3, #0
   12f72:	bf08      	it	eq
   12f74:	2400      	moveq	r4, #0
    streamer_printf(streamer, "Mempools: \n");
   12f76:	491e      	ldr	r1, [pc, #120]	; (12ff0 <shell_os_mpool_display_cmd+0x90>)
        streamer_printf(streamer, "%32s %5d %4d %4d %4d\n", omi.omi_name,
   12f78:	f8df 8094 	ldr.w	r8, [pc, #148]	; 13010 <shell_os_mpool_display_cmd+0xb0>
    streamer_printf(streamer, "Mempools: \n");
   12f7c:	4628      	mov	r0, r5
   12f7e:	f001 fa88 	bl	14492 <streamer_printf>
    streamer_printf(streamer, "%32s %5s %4s %4s %4s\n",
   12f82:	4b1c      	ldr	r3, [pc, #112]	; (12ff4 <shell_os_mpool_display_cmd+0x94>)
   12f84:	9302      	str	r3, [sp, #8]
   12f86:	4b1c      	ldr	r3, [pc, #112]	; (12ff8 <shell_os_mpool_display_cmd+0x98>)
   12f88:	9301      	str	r3, [sp, #4]
   12f8a:	4b1c      	ldr	r3, [pc, #112]	; (12ffc <shell_os_mpool_display_cmd+0x9c>)
   12f8c:	9300      	str	r3, [sp, #0]
   12f8e:	4a1c      	ldr	r2, [pc, #112]	; (13000 <shell_os_mpool_display_cmd+0xa0>)
   12f90:	4b1c      	ldr	r3, [pc, #112]	; (13004 <shell_os_mpool_display_cmd+0xa4>)
   12f92:	491d      	ldr	r1, [pc, #116]	; (13008 <shell_os_mpool_display_cmd+0xa8>)
   12f94:	4628      	mov	r0, r5
   12f96:	f001 fa7c 	bl	14492 <streamer_printf>
    found = 0;
   12f9a:	2700      	movs	r7, #0
    mp = NULL;
   12f9c:	463e      	mov	r6, r7
        mp = os_mempool_info_get_next(mp, &omi);
   12f9e:	4630      	mov	r0, r6
   12fa0:	a904      	add	r1, sp, #16
   12fa2:	f7fa f833 	bl	d00c <os_mempool_info_get_next>
        if (mp == NULL) {
   12fa6:	4606      	mov	r6, r0
   12fa8:	b1b0      	cbz	r0, 12fd8 <shell_os_mpool_display_cmd+0x78>
        if (name) {
   12faa:	b134      	cbz	r4, 12fba <shell_os_mpool_display_cmd+0x5a>
            if (strcmp(name, omi.omi_name)) {
   12fac:	a908      	add	r1, sp, #32
   12fae:	4620      	mov	r0, r4
   12fb0:	f7fd f986 	bl	102c0 <strcmp>
   12fb4:	2800      	cmp	r0, #0
   12fb6:	d1f2      	bne.n	12f9e <shell_os_mpool_display_cmd+0x3e>
                found = 1;
   12fb8:	2701      	movs	r7, #1
        streamer_printf(streamer, "%32s %5d %4d %4d %4d\n", omi.omi_name,
   12fba:	9b07      	ldr	r3, [sp, #28]
   12fbc:	9302      	str	r3, [sp, #8]
   12fbe:	9b06      	ldr	r3, [sp, #24]
   12fc0:	9301      	str	r3, [sp, #4]
   12fc2:	9b05      	ldr	r3, [sp, #20]
   12fc4:	9300      	str	r3, [sp, #0]
   12fc6:	aa08      	add	r2, sp, #32
   12fc8:	9b04      	ldr	r3, [sp, #16]
   12fca:	4641      	mov	r1, r8
   12fcc:	4628      	mov	r0, r5
   12fce:	f001 fa60 	bl	14492 <streamer_printf>
   12fd2:	e7e4      	b.n	12f9e <shell_os_mpool_display_cmd+0x3e>
    name = NULL;
   12fd4:	2400      	movs	r4, #0
   12fd6:	e7ce      	b.n	12f76 <shell_os_mpool_display_cmd+0x16>
    if (name && !found) {
   12fd8:	b12c      	cbz	r4, 12fe6 <shell_os_mpool_display_cmd+0x86>
   12fda:	b927      	cbnz	r7, 12fe6 <shell_os_mpool_display_cmd+0x86>
        streamer_printf(streamer, "Couldn't find a memory pool with name %s\n",
   12fdc:	490b      	ldr	r1, [pc, #44]	; (1300c <shell_os_mpool_display_cmd+0xac>)
   12fde:	4622      	mov	r2, r4
   12fe0:	4628      	mov	r0, r5
   12fe2:	f001 fa56 	bl	14492 <streamer_printf>
}
   12fe6:	2000      	movs	r0, #0
   12fe8:	b010      	add	sp, #64	; 0x40
   12fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12fee:	bf00      	nop
   12ff0:	00020c74 	.word	0x00020c74
   12ff4:	00020c9c 	.word	0x00020c9c
   12ff8:	00022281 	.word	0x00022281
   12ffc:	00020356 	.word	0x00020356
   13000:	00020e2a 	.word	0x00020e2a
   13004:	00020c80 	.word	0x00020c80
   13008:	00020c86 	.word	0x00020c86
   1300c:	00020cb6 	.word	0x00020cb6
   13010:	00020ca0 	.word	0x00020ca0

00013014 <shell_os_reset_cmd>:
{
   13014:	b508      	push	{r3, lr}
    os_time_delay(OS_TICKS_PER_SEC / 10);
   13016:	200c      	movs	r0, #12
   13018:	f7fa fcd4 	bl	d9c4 <os_time_delay>
    os_reboot(HAL_RESET_REQUESTED);
   1301c:	2006      	movs	r0, #6
   1301e:	f7f9 fd3a 	bl	ca96 <os_reboot>
}
   13022:	2000      	movs	r0, #0
   13024:	bd08      	pop	{r3, pc}
	...

00013028 <shell_os_ls_dev_cmd>:

int
shell_os_ls_dev_cmd(const struct shell_cmd *cmd, int argc, char **argv,
                    struct streamer *streamer)
{
   13028:	b513      	push	{r0, r1, r4, lr}
   1302a:	461c      	mov	r4, r3
    streamer_printf(streamer, "%4s %3s %s\n", "ref", "flg", "name");
   1302c:	4b07      	ldr	r3, [pc, #28]	; (1304c <shell_os_ls_dev_cmd+0x24>)
   1302e:	4a08      	ldr	r2, [pc, #32]	; (13050 <shell_os_ls_dev_cmd+0x28>)
   13030:	9300      	str	r3, [sp, #0]
   13032:	4908      	ldr	r1, [pc, #32]	; (13054 <shell_os_ls_dev_cmd+0x2c>)
   13034:	4b08      	ldr	r3, [pc, #32]	; (13058 <shell_os_ls_dev_cmd+0x30>)
   13036:	4620      	mov	r0, r4
   13038:	f001 fa2b 	bl	14492 <streamer_printf>
    os_dev_walk(shell_os_ls_dev, streamer);
   1303c:	4807      	ldr	r0, [pc, #28]	; (1305c <shell_os_ls_dev_cmd+0x34>)
   1303e:	4621      	mov	r1, r4
   13040:	f7f9 fe9c 	bl	cd7c <os_dev_walk>
    return 0;
}
   13044:	2000      	movs	r0, #0
   13046:	b002      	add	sp, #8
   13048:	bd10      	pop	{r4, pc}
   1304a:	bf00      	nop
   1304c:	00020e2a 	.word	0x00020e2a
   13050:	00020ce4 	.word	0x00020ce4
   13054:	00020ce8 	.word	0x00020ce8
   13058:	00020ce0 	.word	0x00020ce0
   1305c:	00012f41 	.word	0x00012f41

00013060 <shell_os_tasks_display_cmd>:
{
   13060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (argc > 1 && strcmp(argv[1], "")) {
   13064:	2901      	cmp	r1, #1
{
   13066:	b096      	sub	sp, #88	; 0x58
   13068:	461d      	mov	r5, r3
    if (argc > 1 && strcmp(argv[1], "")) {
   1306a:	dd49      	ble.n	13100 <shell_os_tasks_display_cmd+0xa0>
   1306c:	6854      	ldr	r4, [r2, #4]
   1306e:	7823      	ldrb	r3, [r4, #0]
    name = NULL;
   13070:	2b00      	cmp	r3, #0
   13072:	bf08      	it	eq
   13074:	2400      	moveq	r4, #0
    streamer_printf(streamer, "Tasks: \n");
   13076:	4929      	ldr	r1, [pc, #164]	; (1311c <shell_os_tasks_display_cmd+0xbc>)
        streamer_printf(streamer, "%8s %3u %3u %8lu %8lu %8u %8u %8lu %8lu\n",
   13078:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 13150 <shell_os_tasks_display_cmd+0xf0>
    streamer_printf(streamer, "Tasks: \n");
   1307c:	4628      	mov	r0, r5
   1307e:	f001 fa08 	bl	14492 <streamer_printf>
    streamer_printf(streamer, "%8s %3s %3s %8s %8s %8s %8s %8s %8s %3s\n",
   13082:	4b27      	ldr	r3, [pc, #156]	; (13120 <shell_os_tasks_display_cmd+0xc0>)
   13084:	9307      	str	r3, [sp, #28]
   13086:	4b27      	ldr	r3, [pc, #156]	; (13124 <shell_os_tasks_display_cmd+0xc4>)
   13088:	9306      	str	r3, [sp, #24]
   1308a:	4b27      	ldr	r3, [pc, #156]	; (13128 <shell_os_tasks_display_cmd+0xc8>)
   1308c:	9305      	str	r3, [sp, #20]
   1308e:	4b27      	ldr	r3, [pc, #156]	; (1312c <shell_os_tasks_display_cmd+0xcc>)
   13090:	9304      	str	r3, [sp, #16]
   13092:	4b27      	ldr	r3, [pc, #156]	; (13130 <shell_os_tasks_display_cmd+0xd0>)
   13094:	9303      	str	r3, [sp, #12]
   13096:	4b27      	ldr	r3, [pc, #156]	; (13134 <shell_os_tasks_display_cmd+0xd4>)
   13098:	9302      	str	r3, [sp, #8]
   1309a:	4b27      	ldr	r3, [pc, #156]	; (13138 <shell_os_tasks_display_cmd+0xd8>)
   1309c:	9301      	str	r3, [sp, #4]
   1309e:	4b27      	ldr	r3, [pc, #156]	; (1313c <shell_os_tasks_display_cmd+0xdc>)
   130a0:	9300      	str	r3, [sp, #0]
   130a2:	4a27      	ldr	r2, [pc, #156]	; (13140 <shell_os_tasks_display_cmd+0xe0>)
   130a4:	4b27      	ldr	r3, [pc, #156]	; (13144 <shell_os_tasks_display_cmd+0xe4>)
   130a6:	4928      	ldr	r1, [pc, #160]	; (13148 <shell_os_tasks_display_cmd+0xe8>)
   130a8:	4628      	mov	r0, r5
   130aa:	f001 f9f2 	bl	14492 <streamer_printf>
    found = 0;
   130ae:	2700      	movs	r7, #0
    prev_task = NULL;
   130b0:	463e      	mov	r6, r7
        prev_task = os_task_info_get_next(prev_task, &oti);
   130b2:	4630      	mov	r0, r6
   130b4:	a908      	add	r1, sp, #32
   130b6:	f7fa fbeb 	bl	d890 <os_task_info_get_next>
        if (prev_task == NULL) {
   130ba:	4606      	mov	r6, r0
   130bc:	b310      	cbz	r0, 13104 <shell_os_tasks_display_cmd+0xa4>
        if (name) {
   130be:	b134      	cbz	r4, 130ce <shell_os_tasks_display_cmd+0x6e>
            if (strcmp(name, oti.oti_name)) {
   130c0:	a90e      	add	r1, sp, #56	; 0x38
   130c2:	4620      	mov	r0, r4
   130c4:	f7fd f8fc 	bl	102c0 <strcmp>
   130c8:	2800      	cmp	r0, #0
   130ca:	d1f2      	bne.n	130b2 <shell_os_tasks_display_cmd+0x52>
                found = 1;
   130cc:	2701      	movs	r7, #1
        streamer_printf(streamer, "%8s %3u %3u %8lu %8lu %8u %8u %8lu %8lu\n",
   130ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   130d0:	9306      	str	r3, [sp, #24]
   130d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   130d4:	9305      	str	r3, [sp, #20]
   130d6:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   130da:	9304      	str	r3, [sp, #16]
   130dc:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   130e0:	9303      	str	r3, [sp, #12]
   130e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   130e4:	9302      	str	r3, [sp, #8]
   130e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   130e8:	9301      	str	r3, [sp, #4]
   130ea:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   130ee:	9300      	str	r3, [sp, #0]
   130f0:	aa0e      	add	r2, sp, #56	; 0x38
   130f2:	f89d 3020 	ldrb.w	r3, [sp, #32]
   130f6:	4641      	mov	r1, r8
   130f8:	4628      	mov	r0, r5
   130fa:	f001 f9ca 	bl	14492 <streamer_printf>
   130fe:	e7d8      	b.n	130b2 <shell_os_tasks_display_cmd+0x52>
    name = NULL;
   13100:	2400      	movs	r4, #0
   13102:	e7b8      	b.n	13076 <shell_os_tasks_display_cmd+0x16>
    if (name && !found) {
   13104:	b12c      	cbz	r4, 13112 <shell_os_tasks_display_cmd+0xb2>
   13106:	b927      	cbnz	r7, 13112 <shell_os_tasks_display_cmd+0xb2>
        streamer_printf(streamer, "Couldn't find task with name %s\n", name);
   13108:	4910      	ldr	r1, [pc, #64]	; (1314c <shell_os_tasks_display_cmd+0xec>)
   1310a:	4622      	mov	r2, r4
   1310c:	4628      	mov	r0, r5
   1310e:	f001 f9c0 	bl	14492 <streamer_printf>
}
   13112:	2000      	movs	r0, #0
   13114:	b016      	add	sp, #88	; 0x58
   13116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1311a:	bf00      	nop
   1311c:	00020cf4 	.word	0x00020cf4
   13120:	00020ce0 	.word	0x00020ce0
   13124:	00020d2f 	.word	0x00020d2f
   13128:	00020d36 	.word	0x00020d36
   1312c:	00020d3d 	.word	0x00020d3d
   13130:	00020d44 	.word	0x00020d44
   13134:	00020d4a 	.word	0x00020d4a
   13138:	00020d4e 	.word	0x00020d4e
   1313c:	00020d56 	.word	0x00020d56
   13140:	00020d01 	.word	0x00020d01
   13144:	00020cfd 	.word	0x00020cfd
   13148:	00020d06 	.word	0x00020d06
   1314c:	00020d83 	.word	0x00020d83
   13150:	00020d5a 	.word	0x00020d5a

00013154 <shell_os_date_cmd>:
{
   13154:	b530      	push	{r4, r5, lr}
    if (argc == 0) {
   13156:	3901      	subs	r1, #1
{
   13158:	b091      	sub	sp, #68	; 0x44
   1315a:	4610      	mov	r0, r2
   1315c:	461d      	mov	r5, r3
    if (argc == 0) {
   1315e:	d11b      	bne.n	13198 <shell_os_date_cmd+0x44>
        rc = os_gettimeofday(&tv, &tz);
   13160:	a901      	add	r1, sp, #4
   13162:	a802      	add	r0, sp, #8
   13164:	f7fa fc42 	bl	d9ec <os_gettimeofday>
        assert(rc == 0);
   13168:	b128      	cbz	r0, 13176 <shell_os_date_cmd+0x22>
   1316a:	2300      	movs	r3, #0
   1316c:	461a      	mov	r2, r3
   1316e:	4619      	mov	r1, r3
   13170:	4618      	mov	r0, r3
   13172:	f7f9 fb43 	bl	c7fc <__assert_func>
        rc = datetime_format(&tv, &tz, buf, sizeof(buf));
   13176:	2321      	movs	r3, #33	; 0x21
   13178:	aa06      	add	r2, sp, #24
   1317a:	a901      	add	r1, sp, #4
   1317c:	a802      	add	r0, sp, #8
   1317e:	f001 f907 	bl	14390 <datetime_format>
        assert(rc == 0);
   13182:	4604      	mov	r4, r0
   13184:	2800      	cmp	r0, #0
   13186:	d1f0      	bne.n	1316a <shell_os_date_cmd+0x16>
        streamer_printf(streamer, "%s\n", buf);
   13188:	490f      	ldr	r1, [pc, #60]	; (131c8 <shell_os_date_cmd+0x74>)
   1318a:	aa06      	add	r2, sp, #24
   1318c:	4628      	mov	r0, r5
   1318e:	f001 f980 	bl	14492 <streamer_printf>
}
   13192:	4620      	mov	r0, r4
   13194:	b011      	add	sp, #68	; 0x44
   13196:	bd30      	pop	{r4, r5, pc}
    } else if (argc == 1) {
   13198:	2901      	cmp	r1, #1
   1319a:	d111      	bne.n	131c0 <shell_os_date_cmd+0x6c>
        rc = datetime_parse(*argv, &tv, &tz);
   1319c:	6840      	ldr	r0, [r0, #4]
   1319e:	aa02      	add	r2, sp, #8
   131a0:	a906      	add	r1, sp, #24
   131a2:	f001 f843 	bl	1422c <datetime_parse>
        if (rc == 0) {
   131a6:	4604      	mov	r4, r0
   131a8:	b928      	cbnz	r0, 131b6 <shell_os_date_cmd+0x62>
            rc = os_settimeofday(&tv, &tz);
   131aa:	a902      	add	r1, sp, #8
   131ac:	a806      	add	r0, sp, #24
   131ae:	f7fa fc47 	bl	da40 <os_settimeofday>
   131b2:	4604      	mov	r4, r0
   131b4:	e7ed      	b.n	13192 <shell_os_date_cmd+0x3e>
            streamer_printf(streamer, "Invalid datetime\n");
   131b6:	4905      	ldr	r1, [pc, #20]	; (131cc <shell_os_date_cmd+0x78>)
   131b8:	4628      	mov	r0, r5
   131ba:	f001 f96a 	bl	14492 <streamer_printf>
   131be:	e7e8      	b.n	13192 <shell_os_date_cmd+0x3e>
        rc = -1;
   131c0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    return rc;
   131c4:	e7e5      	b.n	13192 <shell_os_date_cmd+0x3e>
   131c6:	bf00      	nop
   131c8:	00021041 	.word	0x00021041
   131cc:	00020da4 	.word	0x00020da4

000131d0 <shell_os_register>:
    { 0 },
};

void
shell_os_register(void)
{
   131d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    const struct shell_cmd *cmd;
    int rc;

    for (cmd = os_commands; cmd->sc_cmd != NULL; cmd++) {
   131d2:	4c0a      	ldr	r4, [pc, #40]	; (131fc <shell_os_register+0x2c>)
        rc = shell_cmd_register(cmd);
        SYSINIT_PANIC_ASSERT_MSG(
   131d4:	4d0a      	ldr	r5, [pc, #40]	; (13200 <shell_os_register+0x30>)
   131d6:	2600      	movs	r6, #0
        rc = shell_cmd_register(cmd);
   131d8:	4620      	mov	r0, r4
   131da:	f7ff fd13 	bl	12c04 <shell_cmd_register>
        SYSINIT_PANIC_ASSERT_MSG(
   131de:	b130      	cbz	r0, 131ee <shell_os_register+0x1e>
   131e0:	2300      	movs	r3, #0
   131e2:	682f      	ldr	r7, [r5, #0]
   131e4:	9600      	str	r6, [sp, #0]
   131e6:	461a      	mov	r2, r3
   131e8:	4619      	mov	r1, r3
   131ea:	4618      	mov	r0, r3
   131ec:	47b8      	blx	r7
    for (cmd = os_commands; cmd->sc_cmd != NULL; cmd++) {
   131ee:	69a3      	ldr	r3, [r4, #24]
   131f0:	3410      	adds	r4, #16
   131f2:	2b00      	cmp	r3, #0
   131f4:	d1f0      	bne.n	131d8 <shell_os_register+0x8>
            rc == 0, "Failed to register OS shell commands");
    }
}
   131f6:	b003      	add	sp, #12
   131f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   131fa:	bf00      	nop
   131fc:	00020e74 	.word	0x00020e74
   13200:	2000143c 	.word	0x2000143c

00013204 <shell_ticks_cmd>:
 * Handles the 'ticks' command
 */
int
shell_ticks_cmd(int argc, char **argv)
{
    if (argc > 1) {
   13204:	2801      	cmp	r0, #1
{
   13206:	b510      	push	{r4, lr}
    if (argc > 1) {
   13208:	dd17      	ble.n	1323a <shell_ticks_cmd+0x36>
        if (!strcmp(argv[1], "on")) {
   1320a:	684c      	ldr	r4, [r1, #4]
   1320c:	490c      	ldr	r1, [pc, #48]	; (13240 <shell_ticks_cmd+0x3c>)
   1320e:	4620      	mov	r0, r4
   13210:	f7fd f856 	bl	102c0 <strcmp>
   13214:	b928      	cbnz	r0, 13222 <shell_ticks_cmd+0x1e>
            console_yes_ticks();
   13216:	f7fe ff95 	bl	12144 <console_yes_ticks>
            console_printf(" Console Ticks on\n");
   1321a:	480a      	ldr	r0, [pc, #40]	; (13244 <shell_ticks_cmd+0x40>)
            console_printf(" Console Ticks off\n");
            console_no_ticks();
        }
        return 0;
    }
    console_printf(" Usage: ticks [on|off]\n");
   1321c:	f7fe feec 	bl	11ff8 <console_printf>
    return 0;
   13220:	e009      	b.n	13236 <shell_ticks_cmd+0x32>
        else if (!strcmp(argv[1],"off")) {
   13222:	4909      	ldr	r1, [pc, #36]	; (13248 <shell_ticks_cmd+0x44>)
   13224:	4620      	mov	r0, r4
   13226:	f7fd f84b 	bl	102c0 <strcmp>
   1322a:	b920      	cbnz	r0, 13236 <shell_ticks_cmd+0x32>
            console_printf(" Console Ticks off\n");
   1322c:	4807      	ldr	r0, [pc, #28]	; (1324c <shell_ticks_cmd+0x48>)
   1322e:	f7fe fee3 	bl	11ff8 <console_printf>
            console_no_ticks();
   13232:	f7fe ff81 	bl	12138 <console_no_ticks>
}
   13236:	2000      	movs	r0, #0
   13238:	bd10      	pop	{r4, pc}
    console_printf(" Usage: ticks [on|off]\n");
   1323a:	4805      	ldr	r0, [pc, #20]	; (13250 <shell_ticks_cmd+0x4c>)
   1323c:	e7ee      	b.n	1321c <shell_ticks_cmd+0x18>
   1323e:	bf00      	nop
   13240:	00020f83 	.word	0x00020f83
   13244:	00020f04 	.word	0x00020f04
   13248:	00020f17 	.word	0x00020f17
   1324c:	00020f1b 	.word	0x00020f1b
   13250:	00020f2f 	.word	0x00020f2f

00013254 <shell_prompt_register>:


void
shell_prompt_register(void)
{
    shell_register(SHELL_PROMPT, prompt_commands);
   13254:	4901      	ldr	r1, [pc, #4]	; (1325c <shell_prompt_register+0x8>)
   13256:	4802      	ldr	r0, [pc, #8]	; (13260 <shell_prompt_register+0xc>)
   13258:	f7ff bcb4 	b.w	12bc4 <shell_register>
   1325c:	00020f88 	.word	0x00020f88
   13260:	00020f47 	.word	0x00020f47

00013264 <stats_register_internal>:
    return (uint8_t *)hdr + offset;
}

static int
stats_register_internal(const char *name, struct stats_hdr *shdr)
{
   13264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int rc;

    /* Don't allow duplicate entries, return an error if this stat
     * is already registered.
     */
    STAILQ_FOREACH(cur, &g_stats_registry, s_next) {
   13266:	4f0e      	ldr	r7, [pc, #56]	; (132a0 <stats_register_internal+0x3c>)
   13268:	683c      	ldr	r4, [r7, #0]
{
   1326a:	4606      	mov	r6, r0
   1326c:	460d      	mov	r5, r1
    STAILQ_FOREACH(cur, &g_stats_registry, s_next) {
   1326e:	b95c      	cbnz	r4, 13288 <stats_register_internal+0x24>
    if (shdr->s_flags & STATS_HDR_F_PERSIST) {
        stats_conf_assert_valid(shdr);
    }
#endif

    STAILQ_INSERT_TAIL(&g_stats_registry, shdr, s_next);
   13270:	687b      	ldr	r3, [r7, #4]

    STATS_INC(g_stats_stats, num_registered);
   13272:	4a0c      	ldr	r2, [pc, #48]	; (132a4 <stats_register_internal+0x40>)
    shdr->s_name = name;
   13274:	602e      	str	r6, [r5, #0]
    STAILQ_INSERT_TAIL(&g_stats_registry, shdr, s_next);
   13276:	612c      	str	r4, [r5, #16]
   13278:	601d      	str	r5, [r3, #0]
    STATS_INC(g_stats_stats, num_registered);
   1327a:	6953      	ldr	r3, [r2, #20]
    STAILQ_INSERT_TAIL(&g_stats_registry, shdr, s_next);
   1327c:	3510      	adds	r5, #16
    STATS_INC(g_stats_stats, num_registered);
   1327e:	3301      	adds	r3, #1
    STAILQ_INSERT_TAIL(&g_stats_registry, shdr, s_next);
   13280:	607d      	str	r5, [r7, #4]
    STATS_INC(g_stats_stats, num_registered);
   13282:	6153      	str	r3, [r2, #20]
   13284:	4620      	mov	r0, r4

    return (0);
err:
    return (rc);
}
   13286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (!strcmp(cur->s_name, name) || cur == shdr) {
   13288:	6820      	ldr	r0, [r4, #0]
   1328a:	4631      	mov	r1, r6
   1328c:	f7fd f818 	bl	102c0 <strcmp>
   13290:	b118      	cbz	r0, 1329a <stats_register_internal+0x36>
   13292:	42ac      	cmp	r4, r5
   13294:	d001      	beq.n	1329a <stats_register_internal+0x36>
    STAILQ_FOREACH(cur, &g_stats_registry, s_next) {
   13296:	6924      	ldr	r4, [r4, #16]
   13298:	e7e9      	b.n	1326e <stats_register_internal+0xa>
    return (rc);
   1329a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1329e:	e7f2      	b.n	13286 <stats_register_internal+0x22>
   132a0:	20001414 	.word	0x20001414
   132a4:	20006aa8 	.word	0x20006aa8

000132a8 <stats_walk>:
 * @return 0 on success, the return code of the walk_func on abort.
 *
 */
int
stats_walk(struct stats_hdr *hdr, stats_walk_func_t walk_func, void *arg)
{
   132a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (hdr->s_flags & STATS_HDR_F_PERSIST) {
   132ac:	88c3      	ldrh	r3, [r0, #6]
    return hdr->s_cnt * hdr->s_size;
   132ae:	7906      	ldrb	r6, [r0, #4]
         * is set.  Users may only partially name elements in the statistics
         * structure.
         */
        if (name == NULL) {
            ent_n = (cur - start) / hdr->s_size;
            len = snprintf(name_buf, sizeof(name_buf), "s%d", ent_n);
   132b0:	f8df b084 	ldr.w	fp, [pc, #132]	; 13338 <stats_walk+0x90>
        return sizeof (struct stats_hdr);
   132b4:	f013 0f01 	tst.w	r3, #1
    return hdr->s_cnt * hdr->s_size;
   132b8:	7943      	ldrb	r3, [r0, #5]
        return sizeof (struct stats_hdr);
   132ba:	bf14      	ite	ne
   132bc:	2738      	movne	r7, #56	; 0x38
   132be:	2714      	moveq	r7, #20
    end = start + stats_size(hdr);
   132c0:	fb03 7606 	mla	r6, r3, r6, r7
{
   132c4:	b085      	sub	sp, #20
   132c6:	4604      	mov	r4, r0
   132c8:	4688      	mov	r8, r1
   132ca:	4691      	mov	r9, r2
    start = stats_offset(hdr);
   132cc:	b2bd      	uxth	r5, r7
    end = start + stats_size(hdr);
   132ce:	b2b6      	uxth	r6, r6
            if (hdr->s_map[i].snm_off == cur) {
   132d0:	f04f 0a06 	mov.w	sl, #6
    while (cur < end) {
   132d4:	42b5      	cmp	r5, r6
   132d6:	d22a      	bcs.n	1332e <stats_walk+0x86>
        for (i = 0; i < hdr->s_map_cnt; ++i) {
   132d8:	68e0      	ldr	r0, [r4, #12]
   132da:	2300      	movs	r3, #0
   132dc:	e000      	b.n	132e0 <stats_walk+0x38>
   132de:	3301      	adds	r3, #1
   132e0:	4298      	cmp	r0, r3
   132e2:	dd0a      	ble.n	132fa <stats_walk+0x52>
            if (hdr->s_map[i].snm_off == cur) {
   132e4:	68a1      	ldr	r1, [r4, #8]
   132e6:	fb0a f203 	mul.w	r2, sl, r3
   132ea:	eb01 0c02 	add.w	ip, r1, r2
   132ee:	5a8a      	ldrh	r2, [r1, r2]
   132f0:	42aa      	cmp	r2, r5
   132f2:	d1f4      	bne.n	132de <stats_walk+0x36>
                name = hdr->s_map[i].snm_name;
   132f4:	f8dc 2002 	ldr.w	r2, [ip, #2]
        if (name == NULL) {
   132f8:	b982      	cbnz	r2, 1331c <stats_walk+0x74>
            ent_n = (cur - start) / hdr->s_size;
   132fa:	7922      	ldrb	r2, [r4, #4]
   132fc:	1beb      	subs	r3, r5, r7
            len = snprintf(name_buf, sizeof(name_buf), "s%d", ent_n);
   132fe:	210c      	movs	r1, #12
   13300:	fb93 f3f2 	sdiv	r3, r3, r2
   13304:	a801      	add	r0, sp, #4
   13306:	465a      	mov	r2, fp
   13308:	f7fd fac8 	bl	1089c <snprintf>
            name_buf[len] = '\0';
   1330c:	f100 0310 	add.w	r3, r0, #16
   13310:	eb0d 0003 	add.w	r0, sp, r3
   13314:	2300      	movs	r3, #0
   13316:	f800 3c0c 	strb.w	r3, [r0, #-12]
            name = name_buf;
   1331a:	aa01      	add	r2, sp, #4
        }

        rc = walk_func(hdr, arg, name, cur);
   1331c:	462b      	mov	r3, r5
   1331e:	4649      	mov	r1, r9
   13320:	4620      	mov	r0, r4
   13322:	47c0      	blx	r8
        if (rc != 0) {
   13324:	b920      	cbnz	r0, 13330 <stats_walk+0x88>
        }

        /* Statistics are variable sized, move forward either 16, 32 or 64
         * bits in the structure.
         */
        cur += hdr->s_size;
   13326:	7923      	ldrb	r3, [r4, #4]
   13328:	441d      	add	r5, r3
   1332a:	b2ad      	uxth	r5, r5
   1332c:	e7d2      	b.n	132d4 <stats_walk+0x2c>
    }

    return (0);
   1332e:	2000      	movs	r0, #0
err:
    return (rc);
}
   13330:	b005      	add	sp, #20
   13332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13336:	bf00      	nop
   13338:	00020fcc 	.word	0x00020fcc

0001333c <stats_init>:
 * @return 0 on success, non-zero error code on failure.
 */
int
stats_init(struct stats_hdr *shdr, uint8_t size, uint8_t cnt,
        const struct stats_name_map *map, uint8_t map_cnt)
{
   1333c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1333e:	461f      	mov	r7, r3
    if (hdr->s_flags & STATS_HDR_F_PERSIST) {
   13340:	88c3      	ldrh	r3, [r0, #6]
        return sizeof (struct stats_hdr);
   13342:	f013 0f01 	tst.w	r3, #1
{
   13346:	4604      	mov	r4, r0
        return sizeof (struct stats_hdr);
   13348:	bf14      	ite	ne
   1334a:	2038      	movne	r0, #56	; 0x38
   1334c:	2014      	moveq	r0, #20
{
   1334e:	460e      	mov	r6, r1
   13350:	4615      	mov	r5, r2
    size_t offset;

    offset = stats_offset(shdr);
    memset((uint8_t *)shdr + offset, 0, size * cnt);
   13352:	4420      	add	r0, r4
   13354:	434a      	muls	r2, r1
   13356:	2100      	movs	r1, #0
   13358:	f7fc ff97 	bl	1028a <memset>
    shdr->s_size = size;
    shdr->s_cnt = cnt;
    shdr->s_flags = 0;
#if MYNEWT_VAL(STATS_NAMES)
    shdr->s_map = map;
    shdr->s_map_cnt = map_cnt;
   1335c:	f89d 3018 	ldrb.w	r3, [sp, #24]
    shdr->s_size = size;
   13360:	7126      	strb	r6, [r4, #4]
    shdr->s_flags = 0;
   13362:	2000      	movs	r0, #0
    shdr->s_cnt = cnt;
   13364:	7165      	strb	r5, [r4, #5]
    shdr->s_flags = 0;
   13366:	80e0      	strh	r0, [r4, #6]
    shdr->s_map = map;
   13368:	60a7      	str	r7, [r4, #8]
    shdr->s_map_cnt = map_cnt;
   1336a:	60e3      	str	r3, [r4, #12]
#endif

    return (0);
}
   1336c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00013370 <stats_module_init_internal>:
{
   13370:	b507      	push	{r0, r1, r2, lr}
    STAILQ_INIT(&g_stats_registry);
   13372:	4b0e      	ldr	r3, [pc, #56]	; (133ac <stats_module_init_internal+0x3c>)
    rc = stats_init(STATS_HDR(g_stats_stats),
   13374:	480e      	ldr	r0, [pc, #56]	; (133b0 <stats_module_init_internal+0x40>)
    STAILQ_INIT(&g_stats_registry);
   13376:	2200      	movs	r2, #0
   13378:	e9c3 2300 	strd	r2, r3, [r3]
    rc = stats_init(STATS_HDR(g_stats_stats),
   1337c:	2201      	movs	r2, #1
   1337e:	4b0d      	ldr	r3, [pc, #52]	; (133b4 <stats_module_init_internal+0x44>)
   13380:	9200      	str	r2, [sp, #0]
   13382:	2104      	movs	r1, #4
   13384:	f7ff ffda 	bl	1333c <stats_init>
    if (rc) {
   13388:	b960      	cbnz	r0, 133a4 <stats_module_init_internal+0x34>
    rc = stats_register_internal("stat", STATS_HDR(g_stats_stats));
   1338a:	4909      	ldr	r1, [pc, #36]	; (133b0 <stats_module_init_internal+0x40>)
   1338c:	480a      	ldr	r0, [pc, #40]	; (133b8 <stats_module_init_internal+0x48>)
   1338e:	f7ff ff69 	bl	13264 <stats_register_internal>
    if (rc) {
   13392:	b938      	cbnz	r0, 133a4 <stats_module_init_internal+0x34>
    rc = stats_nmgr_register_group();
   13394:	f000 f942 	bl	1361c <stats_nmgr_register_group>
    if (rc) {
   13398:	b920      	cbnz	r0, 133a4 <stats_module_init_internal+0x34>
}
   1339a:	b003      	add	sp, #12
   1339c:	f85d eb04 	ldr.w	lr, [sp], #4
    rc = stats_shell_register();
   133a0:	f000 b9a6 	b.w	136f0 <stats_shell_register>
}
   133a4:	b003      	add	sp, #12
   133a6:	f85d fb04 	ldr.w	pc, [sp], #4
   133aa:	bf00      	nop
   133ac:	20001414 	.word	0x20001414
   133b0:	20006aa8 	.word	0x20006aa8
   133b4:	00020fe4 	.word	0x00020fe4
   133b8:	00020fd0 	.word	0x00020fd0

000133bc <stats_module_init>:
{
   133bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    SYSINIT_ASSERT_ACTIVE();
   133be:	4b0c      	ldr	r3, [pc, #48]	; (133f0 <stats_module_init+0x34>)
   133c0:	781b      	ldrb	r3, [r3, #0]
   133c2:	b923      	cbnz	r3, 133ce <stats_module_init+0x12>
   133c4:	461a      	mov	r2, r3
   133c6:	4619      	mov	r1, r3
   133c8:	4618      	mov	r0, r3
   133ca:	f7f9 fa17 	bl	c7fc <__assert_func>
    if (g_stats_stats.snum_registered) {
   133ce:	4b09      	ldr	r3, [pc, #36]	; (133f4 <stats_module_init+0x38>)
   133d0:	695c      	ldr	r4, [r3, #20]
   133d2:	b954      	cbnz	r4, 133ea <stats_module_init+0x2e>
    rc = stats_module_init_internal();
   133d4:	f7ff ffcc 	bl	13370 <stats_module_init_internal>
    SYSINIT_PANIC_ASSERT(rc == 0);
   133d8:	b138      	cbz	r0, 133ea <stats_module_init+0x2e>
   133da:	4b07      	ldr	r3, [pc, #28]	; (133f8 <stats_module_init+0x3c>)
   133dc:	9400      	str	r4, [sp, #0]
   133de:	681d      	ldr	r5, [r3, #0]
   133e0:	4622      	mov	r2, r4
   133e2:	4623      	mov	r3, r4
   133e4:	4621      	mov	r1, r4
   133e6:	4620      	mov	r0, r4
   133e8:	47a8      	blx	r5
}
   133ea:	b003      	add	sp, #12
   133ec:	bd30      	pop	{r4, r5, pc}
   133ee:	bf00      	nop
   133f0:	20006af4 	.word	0x20006af4
   133f4:	20006aa8 	.word	0x20006aa8
   133f8:	2000143c 	.word	0x2000143c

000133fc <stats_group_walk>:
stats_group_walk(stats_group_walk_func_t walk_func, void *arg)
{
    struct stats_hdr *hdr;
    int rc;

    STAILQ_FOREACH(hdr, &g_stats_registry, s_next) {
   133fc:	4b07      	ldr	r3, [pc, #28]	; (1341c <stats_group_walk+0x20>)
{
   133fe:	b570      	push	{r4, r5, r6, lr}
    STAILQ_FOREACH(hdr, &g_stats_registry, s_next) {
   13400:	681c      	ldr	r4, [r3, #0]
{
   13402:	4605      	mov	r5, r0
   13404:	460e      	mov	r6, r1
    STAILQ_FOREACH(hdr, &g_stats_registry, s_next) {
   13406:	b90c      	cbnz	r4, 1340c <stats_group_walk+0x10>
        rc = walk_func(hdr, arg);
        if (rc != 0) {
            goto err;
        }
    }
    return (0);
   13408:	4620      	mov	r0, r4
err:
    return (rc);
}
   1340a:	bd70      	pop	{r4, r5, r6, pc}
        rc = walk_func(hdr, arg);
   1340c:	4631      	mov	r1, r6
   1340e:	4620      	mov	r0, r4
   13410:	47a8      	blx	r5
        if (rc != 0) {
   13412:	2800      	cmp	r0, #0
   13414:	d1f9      	bne.n	1340a <stats_group_walk+0xe>
    STAILQ_FOREACH(hdr, &g_stats_registry, s_next) {
   13416:	6924      	ldr	r4, [r4, #16]
   13418:	e7f5      	b.n	13406 <stats_group_walk+0xa>
   1341a:	bf00      	nop
   1341c:	20001414 	.word	0x20001414

00013420 <stats_group_find>:
 *
 * @return statistic structure if found, NULL if not found.
 */
struct stats_hdr *
stats_group_find(const char *name)
{
   13420:	b538      	push	{r3, r4, r5, lr}
    struct stats_hdr *cur;

    cur = NULL;
    STAILQ_FOREACH(cur, &g_stats_registry, s_next) {
   13422:	4b07      	ldr	r3, [pc, #28]	; (13440 <stats_group_find+0x20>)
   13424:	681c      	ldr	r4, [r3, #0]
{
   13426:	4605      	mov	r5, r0
    STAILQ_FOREACH(cur, &g_stats_registry, s_next) {
   13428:	b90c      	cbnz	r4, 1342e <stats_group_find+0xe>
            break;
        }
    }

    return (cur);
}
   1342a:	4620      	mov	r0, r4
   1342c:	bd38      	pop	{r3, r4, r5, pc}
        if (!strcmp(cur->s_name, name)) {
   1342e:	6820      	ldr	r0, [r4, #0]
   13430:	4629      	mov	r1, r5
   13432:	f7fc ff45 	bl	102c0 <strcmp>
   13436:	2800      	cmp	r0, #0
   13438:	d0f7      	beq.n	1342a <stats_group_find+0xa>
    STAILQ_FOREACH(cur, &g_stats_registry, s_next) {
   1343a:	6924      	ldr	r4, [r4, #16]
   1343c:	e7f4      	b.n	13428 <stats_group_find+0x8>
   1343e:	bf00      	nop
   13440:	20001414 	.word	0x20001414

00013444 <stats_register>:
    /*
     * We should always have at least "stat" registered so if there are no stats
     * registered, try to initialize module first. This allows to register stat
     * before sysinit is called (e.g. from BSP).
     */
    if (g_stats_stats.snum_registered == 0) {
   13444:	4b0a      	ldr	r3, [pc, #40]	; (13470 <stats_register+0x2c>)
   13446:	695b      	ldr	r3, [r3, #20]
{
   13448:	b513      	push	{r0, r1, r4, lr}
   1344a:	4604      	mov	r4, r0
    if (g_stats_stats.snum_registered == 0) {
   1344c:	b12b      	cbz	r3, 1345a <stats_register+0x16>
        if (stats_module_init_internal()) {
            return -1;
        }
    }

    return stats_register_internal(name, shdr);
   1344e:	4620      	mov	r0, r4
}
   13450:	b002      	add	sp, #8
   13452:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return stats_register_internal(name, shdr);
   13456:	f7ff bf05 	b.w	13264 <stats_register_internal>
   1345a:	9101      	str	r1, [sp, #4]
        if (stats_module_init_internal()) {
   1345c:	f7ff ff88 	bl	13370 <stats_module_init_internal>
   13460:	9901      	ldr	r1, [sp, #4]
   13462:	2800      	cmp	r0, #0
   13464:	d0f3      	beq.n	1344e <stats_register+0xa>
}
   13466:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1346a:	b002      	add	sp, #8
   1346c:	bd10      	pop	{r4, pc}
   1346e:	bf00      	nop
   13470:	20006aa8 	.word	0x20006aa8

00013474 <cbor_encode_text_stringz>:
   13474:	b513      	push	{r0, r1, r4, lr}
   13476:	4604      	mov	r4, r0
   13478:	4608      	mov	r0, r1
   1347a:	9101      	str	r1, [sp, #4]
   1347c:	f006 fcf8 	bl	19e70 <strlen>
   13480:	9901      	ldr	r1, [sp, #4]
   13482:	4602      	mov	r2, r0
   13484:	4620      	mov	r0, r4
   13486:	b002      	add	sp, #8
   13488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1348c:	f001 bd15 	b.w	14eba <cbor_encode_text_string>

00013490 <stats_nmgr_list>:
    return (0);
}

static int
stats_nmgr_list(struct mgmt_cbuf *cb)
{
   13490:	b530      	push	{r4, r5, lr}
    CborError g_err = CborNoError;
    CborEncoder stats;

    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   13492:	f100 050c 	add.w	r5, r0, #12
{
   13496:	b085      	sub	sp, #20
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   13498:	4912      	ldr	r1, [pc, #72]	; (134e4 <stats_nmgr_list+0x54>)
   1349a:	4628      	mov	r0, r5
   1349c:	f7ff ffea 	bl	13474 <cbor_encode_text_stringz>
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   134a0:	2300      	movs	r3, #0
   134a2:	2200      	movs	r2, #0
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   134a4:	4604      	mov	r4, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   134a6:	4628      	mov	r0, r5
   134a8:	f001 fcd6 	bl	14e58 <cbor_encode_int>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "stat_list");
   134ac:	490e      	ldr	r1, [pc, #56]	; (134e8 <stats_nmgr_list+0x58>)
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   134ae:	4304      	orrs	r4, r0
    g_err |= cbor_encode_text_stringz(&cb->encoder, "stat_list");
   134b0:	4628      	mov	r0, r5
   134b2:	f7ff ffdf 	bl	13474 <cbor_encode_text_stringz>
    g_err |= cbor_encoder_create_array(&cb->encoder, &stats,
   134b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   134ba:	4669      	mov	r1, sp
    g_err |= cbor_encode_text_stringz(&cb->encoder, "stat_list");
   134bc:	4304      	orrs	r4, r0
    g_err |= cbor_encoder_create_array(&cb->encoder, &stats,
   134be:	4628      	mov	r0, r5
   134c0:	f001 fd0d 	bl	14ede <cbor_encoder_create_array>
                                       CborIndefiniteLength);
    stats_group_walk(stats_nmgr_encode_name, &stats);
   134c4:	4669      	mov	r1, sp
    g_err |= cbor_encoder_create_array(&cb->encoder, &stats,
   134c6:	4304      	orrs	r4, r0
    stats_group_walk(stats_nmgr_encode_name, &stats);
   134c8:	4808      	ldr	r0, [pc, #32]	; (134ec <stats_nmgr_list+0x5c>)
   134ca:	f7ff ff97 	bl	133fc <stats_group_walk>
    g_err |= cbor_encoder_close_container(&cb->encoder, &stats);
   134ce:	4669      	mov	r1, sp
   134d0:	4628      	mov	r0, r5
   134d2:	f001 fd18 	bl	14f06 <cbor_encoder_close_container>

    if (g_err) {
        return MGMT_ERR_ENOMEM;
   134d6:	ea54 0300 	orrs.w	r3, r4, r0
    }
    return (0);
}
   134da:	bf14      	ite	ne
   134dc:	2002      	movne	r0, #2
   134de:	2000      	moveq	r0, #0
   134e0:	b005      	add	sp, #20
   134e2:	bd30      	pop	{r4, r5, pc}
   134e4:	00020fea 	.word	0x00020fea
   134e8:	00020fed 	.word	0x00020fed
   134ec:	000134f1 	.word	0x000134f1

000134f0 <stats_nmgr_encode_name>:
{
   134f0:	460b      	mov	r3, r1
    return cbor_encode_text_stringz(penc, hdr->s_name);
   134f2:	6801      	ldr	r1, [r0, #0]
   134f4:	4618      	mov	r0, r3
   134f6:	f7ff bfbd 	b.w	13474 <cbor_encode_text_stringz>
	...

000134fc <stats_nmgr_read>:
{
   134fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13500:	b0a5      	sub	sp, #148	; 0x94
   13502:	4607      	mov	r7, r0
    struct cbor_attr_t attrs[] = {
   13504:	225c      	movs	r2, #92	; 0x5c
   13506:	2100      	movs	r1, #0
   13508:	a80d      	add	r0, sp, #52	; 0x34
   1350a:	f7fc febe 	bl	1028a <memset>
   1350e:	2304      	movs	r3, #4
   13510:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   13514:	4d2a      	ldr	r5, [pc, #168]	; (135c0 <stats_nmgr_read+0xc4>)
   13516:	950c      	str	r5, [sp, #48]	; 0x30
   13518:	2320      	movs	r3, #32
   1351a:	ac04      	add	r4, sp, #16
    g_err = cbor_read_object(&cb->it, attrs);
   1351c:	a90c      	add	r1, sp, #48	; 0x30
   1351e:	f107 001c 	add.w	r0, r7, #28
    struct cbor_attr_t attrs[] = {
   13522:	940e      	str	r4, [sp, #56]	; 0x38
   13524:	9316      	str	r3, [sp, #88]	; 0x58
    g_err = cbor_read_object(&cb->it, attrs);
   13526:	f001 fb99 	bl	14c5c <cbor_read_object>
    if (g_err != 0) {
   1352a:	4680      	mov	r8, r0
   1352c:	b128      	cbz	r0, 1353a <stats_nmgr_read+0x3e>
        return MGMT_ERR_EINVAL;
   1352e:	f04f 0803 	mov.w	r8, #3
}
   13532:	4640      	mov	r0, r8
   13534:	b025      	add	sp, #148	; 0x94
   13536:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hdr = stats_group_find(stats_name);
   1353a:	4620      	mov	r0, r4
   1353c:	f7ff ff70 	bl	13420 <stats_group_find>
    if (!hdr) {
   13540:	4681      	mov	r9, r0
   13542:	2800      	cmp	r0, #0
   13544:	d0f3      	beq.n	1352e <stats_nmgr_read+0x32>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   13546:	370c      	adds	r7, #12
   13548:	491e      	ldr	r1, [pc, #120]	; (135c4 <stats_nmgr_read+0xc8>)
   1354a:	4638      	mov	r0, r7
   1354c:	f7ff ff92 	bl	13474 <cbor_encode_text_stringz>
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   13550:	2300      	movs	r3, #0
   13552:	2200      	movs	r2, #0
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   13554:	4606      	mov	r6, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   13556:	4638      	mov	r0, r7
   13558:	f001 fc7e 	bl	14e58 <cbor_encode_int>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "name");
   1355c:	4629      	mov	r1, r5
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1355e:	4306      	orrs	r6, r0
    g_err |= cbor_encode_text_stringz(&cb->encoder, "name");
   13560:	4638      	mov	r0, r7
   13562:	f7ff ff87 	bl	13474 <cbor_encode_text_stringz>
    g_err |= cbor_encode_text_stringz(&cb->encoder, stats_name);
   13566:	4621      	mov	r1, r4
    g_err |= cbor_encode_text_stringz(&cb->encoder, "name");
   13568:	4306      	orrs	r6, r0
    g_err |= cbor_encode_text_stringz(&cb->encoder, stats_name);
   1356a:	4638      	mov	r0, r7
   1356c:	f7ff ff82 	bl	13474 <cbor_encode_text_stringz>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "group");
   13570:	4915      	ldr	r1, [pc, #84]	; (135c8 <stats_nmgr_read+0xcc>)
    g_err |= cbor_encode_text_stringz(&cb->encoder, stats_name);
   13572:	4306      	orrs	r6, r0
    g_err |= cbor_encode_text_stringz(&cb->encoder, "group");
   13574:	4638      	mov	r0, r7
   13576:	f7ff ff7d 	bl	13474 <cbor_encode_text_stringz>
    g_err |= cbor_encode_text_string(&cb->encoder, "sys", sizeof("sys")-1);
   1357a:	2203      	movs	r2, #3
   1357c:	4913      	ldr	r1, [pc, #76]	; (135cc <stats_nmgr_read+0xd0>)
    g_err |= cbor_encode_text_stringz(&cb->encoder, "group");
   1357e:	4306      	orrs	r6, r0
    g_err |= cbor_encode_text_string(&cb->encoder, "sys", sizeof("sys")-1);
   13580:	4638      	mov	r0, r7
   13582:	f001 fc9a 	bl	14eba <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "fields");
   13586:	4912      	ldr	r1, [pc, #72]	; (135d0 <stats_nmgr_read+0xd4>)
    g_err |= cbor_encode_text_string(&cb->encoder, "sys", sizeof("sys")-1);
   13588:	4306      	orrs	r6, r0
    g_err |= cbor_encode_text_stringz(&cb->encoder, "fields");
   1358a:	4638      	mov	r0, r7
   1358c:	f7ff ff72 	bl	13474 <cbor_encode_text_stringz>
    g_err |= cbor_encoder_create_map(&cb->encoder, &stats,
   13590:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    g_err |= cbor_encode_text_stringz(&cb->encoder, "fields");
   13594:	ea46 0500 	orr.w	r5, r6, r0
    g_err |= cbor_encoder_create_map(&cb->encoder, &stats,
   13598:	4669      	mov	r1, sp
   1359a:	4638      	mov	r0, r7
   1359c:	f001 fca2 	bl	14ee4 <cbor_encoder_create_map>
    stats_walk(hdr, stats_nmgr_walk_func, &stats);
   135a0:	490c      	ldr	r1, [pc, #48]	; (135d4 <stats_nmgr_read+0xd8>)
    g_err |= cbor_encoder_create_map(&cb->encoder, &stats,
   135a2:	4305      	orrs	r5, r0
    stats_walk(hdr, stats_nmgr_walk_func, &stats);
   135a4:	466a      	mov	r2, sp
   135a6:	4648      	mov	r0, r9
   135a8:	f7ff fe7e 	bl	132a8 <stats_walk>
    g_err |= cbor_encoder_close_container(&cb->encoder, &stats);
   135ac:	4669      	mov	r1, sp
   135ae:	4638      	mov	r0, r7
   135b0:	f001 fca9 	bl	14f06 <cbor_encoder_close_container>
        return MGMT_ERR_ENOMEM;
   135b4:	ea55 0300 	orrs.w	r3, r5, r0
   135b8:	bf18      	it	ne
   135ba:	f04f 0802 	movne.w	r8, #2
   135be:	e7b8      	b.n	13532 <stats_nmgr_read+0x36>
   135c0:	00020e2a 	.word	0x00020e2a
   135c4:	00020fea 	.word	0x00020fea
   135c8:	00020ff7 	.word	0x00020ff7
   135cc:	00020ffd 	.word	0x00020ffd
   135d0:	00021001 	.word	0x00021001
   135d4:	000135d9 	.word	0x000135d9

000135d8 <stats_nmgr_walk_func>:
{
   135d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   135dc:	4606      	mov	r6, r0
   135de:	460d      	mov	r5, r1
    stat_val = (uint8_t *)hdr + stat_off;
   135e0:	eb00 0803 	add.w	r8, r0, r3
    g_err |= cbor_encode_text_stringz(penc, sname);
   135e4:	4611      	mov	r1, r2
   135e6:	4628      	mov	r0, r5
{
   135e8:	461f      	mov	r7, r3
    g_err |= cbor_encode_text_stringz(penc, sname);
   135ea:	f7ff ff43 	bl	13474 <cbor_encode_text_stringz>
    switch (hdr->s_size) {
   135ee:	7933      	ldrb	r3, [r6, #4]
   135f0:	2b04      	cmp	r3, #4
    g_err |= cbor_encode_text_stringz(penc, sname);
   135f2:	4604      	mov	r4, r0
    switch (hdr->s_size) {
   135f4:	d00c      	beq.n	13610 <stats_nmgr_walk_func+0x38>
   135f6:	2b08      	cmp	r3, #8
   135f8:	d00c      	beq.n	13614 <stats_nmgr_walk_func+0x3c>
   135fa:	2b02      	cmp	r3, #2
   135fc:	d105      	bne.n	1360a <stats_nmgr_walk_func+0x32>
            g_err |= cbor_encode_uint(penc, *(uint16_t *) stat_val);
   135fe:	5bf2      	ldrh	r2, [r6, r7]
            g_err |= cbor_encode_uint(penc, *(uint32_t *) stat_val);
   13600:	2300      	movs	r3, #0
            g_err |= cbor_encode_uint(penc, *(uint64_t *) stat_val);
   13602:	4628      	mov	r0, r5
   13604:	f001 fc20 	bl	14e48 <cbor_encode_uint>
   13608:	4304      	orrs	r4, r0
}
   1360a:	4620      	mov	r0, r4
   1360c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            g_err |= cbor_encode_uint(penc, *(uint32_t *) stat_val);
   13610:	59f2      	ldr	r2, [r6, r7]
   13612:	e7f5      	b.n	13600 <stats_nmgr_walk_func+0x28>
            g_err |= cbor_encode_uint(penc, *(uint64_t *) stat_val);
   13614:	e9d8 2300 	ldrd	r2, r3, [r8]
   13618:	e7f3      	b.n	13602 <stats_nmgr_walk_func+0x2a>
	...

0001361c <stats_nmgr_register_group>:
int
stats_nmgr_register_group(void)
{
    int rc;

    MGMT_GROUP_SET_HANDLERS(&shell_nmgr_group, shell_nmgr_group_handlers);
   1361c:	4803      	ldr	r0, [pc, #12]	; (1362c <stats_nmgr_register_group+0x10>)
   1361e:	4b04      	ldr	r3, [pc, #16]	; (13630 <stats_nmgr_register_group+0x14>)
   13620:	6003      	str	r3, [r0, #0]
   13622:	f04f 1302 	mov.w	r3, #131074	; 0x20002
   13626:	6043      	str	r3, [r0, #4]
    shell_nmgr_group.mg_group_id = MGMT_GROUP_ID_STATS;

    rc = mgmt_group_register(&shell_nmgr_group);
   13628:	f007 ba52 	b.w	1aad0 <mgmt_group_register>
   1362c:	20006ac0 	.word	0x20006ac0
   13630:	2000141c 	.word	0x2000141c

00013634 <stats_shell_display_entry>:
uint8_t stats_shell_registered;

static int 
stats_shell_display_entry(struct stats_hdr *hdr, void *arg, char *name,
        uint16_t stat_off)
{
   13634:	b537      	push	{r0, r1, r2, r4, r5, lr}
   13636:	4604      	mov	r4, r0
   13638:	4608      	mov	r0, r1
    void *stat_val;

    streamer = arg;

    stat_val = (uint8_t *)hdr + stat_off;
    switch (hdr->s_size) {
   1363a:	7921      	ldrb	r1, [r4, #4]
   1363c:	2904      	cmp	r1, #4
    stat_val = (uint8_t *)hdr + stat_off;
   1363e:	eb04 0503 	add.w	r5, r4, r3
    switch (hdr->s_size) {
   13642:	d008      	beq.n	13656 <stats_shell_display_entry+0x22>
   13644:	2908      	cmp	r1, #8
   13646:	d009      	beq.n	1365c <stats_shell_display_entry+0x28>
   13648:	2902      	cmp	r1, #2
   1364a:	d111      	bne.n	13670 <stats_shell_display_entry+0x3c>
        case sizeof(uint16_t):
            streamer_printf(streamer, "%s: %u\n", name,
   1364c:	5ae3      	ldrh	r3, [r4, r3]
   1364e:	490a      	ldr	r1, [pc, #40]	; (13678 <stats_shell_display_entry+0x44>)
        case sizeof(uint64_t):
            streamer_printf(streamer, "%s: %llu\n", name,
                    *(uint64_t *) stat_val);
            break;
        default:
            streamer_printf(streamer, "Unknown stat size for %s %u\n", name, 
   13650:	f000 ff1f 	bl	14492 <streamer_printf>
                    hdr->s_size);
            break;
   13654:	e009      	b.n	1366a <stats_shell_display_entry+0x36>
            streamer_printf(streamer, "%s: %lu\n", name,
   13656:	58e3      	ldr	r3, [r4, r3]
   13658:	4908      	ldr	r1, [pc, #32]	; (1367c <stats_shell_display_entry+0x48>)
   1365a:	e7f9      	b.n	13650 <stats_shell_display_entry+0x1c>
            streamer_printf(streamer, "%s: %llu\n", name,
   1365c:	e9d5 4500 	ldrd	r4, r5, [r5]
   13660:	4907      	ldr	r1, [pc, #28]	; (13680 <stats_shell_display_entry+0x4c>)
   13662:	e9cd 4500 	strd	r4, r5, [sp]
   13666:	f000 ff14 	bl	14492 <streamer_printf>
    }

    return (0);
}
   1366a:	2000      	movs	r0, #0
   1366c:	b003      	add	sp, #12
   1366e:	bd30      	pop	{r4, r5, pc}
            streamer_printf(streamer, "Unknown stat size for %s %u\n", name, 
   13670:	460b      	mov	r3, r1
   13672:	4904      	ldr	r1, [pc, #16]	; (13684 <stats_shell_display_entry+0x50>)
   13674:	e7ec      	b.n	13650 <stats_shell_display_entry+0x1c>
   13676:	bf00      	nop
   13678:	00021008 	.word	0x00021008
   1367c:	00021010 	.word	0x00021010
   13680:	00021019 	.word	0x00021019
   13684:	00021023 	.word	0x00021023

00013688 <stats_shell_display_group>:

static int 
stats_shell_display_group(struct stats_hdr *hdr, void *arg)
{
   13688:	b508      	push	{r3, lr}
   1368a:	460b      	mov	r3, r1
    struct streamer *streamer;

    streamer = arg;
    streamer_printf(streamer, "\t%s\n", hdr->s_name);
   1368c:	6802      	ldr	r2, [r0, #0]
   1368e:	4903      	ldr	r1, [pc, #12]	; (1369c <stats_shell_display_group+0x14>)
   13690:	4618      	mov	r0, r3
   13692:	f000 fefe 	bl	14492 <streamer_printf>
    return (0);
}
   13696:	2000      	movs	r0, #0
   13698:	bd08      	pop	{r3, pc}
   1369a:	bf00      	nop
   1369c:	00021040 	.word	0x00021040

000136a0 <shell_stats_display>:

static int
shell_stats_display(const struct shell_cmd *cmd, int argc, char **argv,
                    struct streamer *streamer)
{
   136a0:	b538      	push	{r3, r4, r5, lr}
    struct stats_hdr *hdr;
    char *name;
    int rc;

    name = argv[1];
   136a2:	6855      	ldr	r5, [r2, #4]
{
   136a4:	461c      	mov	r4, r3
    if (name == NULL || !strcmp(name, "")) {
   136a6:	b10d      	cbz	r5, 136ac <shell_stats_display+0xc>
   136a8:	782b      	ldrb	r3, [r5, #0]
   136aa:	b94b      	cbnz	r3, 136c0 <shell_stats_display+0x20>
        streamer_printf(streamer, "Must specify a statistic name to dump, "
   136ac:	490c      	ldr	r1, [pc, #48]	; (136e0 <shell_stats_display+0x40>)
   136ae:	4620      	mov	r0, r4
   136b0:	f000 feef 	bl	14492 <streamer_printf>
                "possible names are:\n");
        stats_group_walk(stats_shell_display_group, streamer);
   136b4:	480b      	ldr	r0, [pc, #44]	; (136e4 <shell_stats_display+0x44>)
   136b6:	4621      	mov	r1, r4
   136b8:	f7ff fea0 	bl	133fc <stats_group_walk>
    }

    return (0);
err:
    return (rc);
}
   136bc:	2002      	movs	r0, #2
   136be:	bd38      	pop	{r3, r4, r5, pc}
    hdr = stats_group_find(name);
   136c0:	4628      	mov	r0, r5
   136c2:	f7ff fead 	bl	13420 <stats_group_find>
    if (!hdr) {
   136c6:	b928      	cbnz	r0, 136d4 <shell_stats_display+0x34>
        streamer_printf(streamer, "Could not find statistic group %s\n", name);
   136c8:	4907      	ldr	r1, [pc, #28]	; (136e8 <shell_stats_display+0x48>)
   136ca:	462a      	mov	r2, r5
   136cc:	4620      	mov	r0, r4
   136ce:	f000 fee0 	bl	14492 <streamer_printf>
        goto err;
   136d2:	e7f3      	b.n	136bc <shell_stats_display+0x1c>
    rc = stats_walk(hdr, stats_shell_display_entry, streamer);
   136d4:	4622      	mov	r2, r4
   136d6:	4905      	ldr	r1, [pc, #20]	; (136ec <shell_stats_display+0x4c>)
}
   136d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    rc = stats_walk(hdr, stats_shell_display_entry, streamer);
   136dc:	f7ff bde4 	b.w	132a8 <stats_walk>
   136e0:	00021045 	.word	0x00021045
   136e4:	00013689 	.word	0x00013689
   136e8:	00021081 	.word	0x00021081
   136ec:	00013635 	.word	0x00013635

000136f0 <stats_shell_register>:


int 
stats_shell_register(void)
{
   136f0:	b508      	push	{r3, lr}
    if (!stats_shell_registered) {
   136f2:	4b05      	ldr	r3, [pc, #20]	; (13708 <stats_shell_register+0x18>)
   136f4:	781a      	ldrb	r2, [r3, #0]
   136f6:	b922      	cbnz	r2, 13702 <stats_shell_register+0x12>
        stats_shell_registered = 1;
   136f8:	2201      	movs	r2, #1
        shell_cmd_register(&shell_stats_cmd);
   136fa:	4804      	ldr	r0, [pc, #16]	; (1370c <stats_shell_register+0x1c>)
        stats_shell_registered = 1;
   136fc:	701a      	strb	r2, [r3, #0]
        shell_cmd_register(&shell_stats_cmd);
   136fe:	f7ff fa81 	bl	12c04 <shell_cmd_register>
    }

    return (0);
}
   13702:	2000      	movs	r0, #0
   13704:	bd08      	pop	{r3, pc}
   13706:	bf00      	nop
   13708:	20006acc 	.word	0x20006acc
   1370c:	2000142c 	.word	0x2000142c

00013710 <sysdown_timer_exp>:
    }
}

static void
sysdown_timer_exp(struct os_event *unused)
{
   13710:	b508      	push	{r3, lr}
    assert(0);
   13712:	2300      	movs	r3, #0
   13714:	461a      	mov	r2, r3
   13716:	4619      	mov	r1, r3
   13718:	4618      	mov	r0, r3
   1371a:	f7f9 f86f 	bl	c7fc <__assert_func>
	...

00013720 <sysdown>:
}

int
sysdown(int reason)
{
   13720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13722:	4605      	mov	r5, r0
    os_sr_t sr;
    int rc;
    int i;

    /* Only allow one shutdown operation. */
    OS_ENTER_CRITICAL(sr);
   13724:	f7f8 ffb0 	bl	c688 <os_arch_save_sr>
    if (sysdown_active) {
   13728:	4b1d      	ldr	r3, [pc, #116]	; (137a0 <sysdown+0x80>)
   1372a:	781c      	ldrb	r4, [r3, #0]
   1372c:	bb1c      	cbnz	r4, 13776 <sysdown+0x56>
        rc = SYS_EALREADY;
    } else {
        sysdown_active = true;
   1372e:	2201      	movs	r2, #1
   13730:	701a      	strb	r2, [r3, #0]
        rc = 0;
    }
    OS_EXIT_CRITICAL(sr);
   13732:	f7f8 ffaf 	bl	c694 <os_arch_restore_sr>

    if (rc != 0) {
   13736:	b9e4      	cbnz	r4, 13772 <sysdown+0x52>
        return rc;
    }

    os_callout_init(&sysdown_timer, os_eventq_dflt_get(), sysdown_timer_exp,
   13738:	f7f9 fbe6 	bl	cf08 <os_eventq_dflt_get>
   1373c:	4623      	mov	r3, r4
   1373e:	4601      	mov	r1, r0
   13740:	4a18      	ldr	r2, [pc, #96]	; (137a4 <sysdown+0x84>)
   13742:	4819      	ldr	r0, [pc, #100]	; (137a8 <sysdown+0x88>)
   13744:	f7f9 f9c6 	bl	cad4 <os_callout_init>
                    NULL);
    rc = os_callout_reset(&sysdown_timer, SYSDOWN_TIMEOUT_TICKS);
   13748:	4817      	ldr	r0, [pc, #92]	; (137a8 <sysdown+0x88>)
   1374a:	f44f 61a0 	mov.w	r1, #1280	; 0x500
   1374e:	f7f9 f9ed 	bl	cb2c <os_callout_reset>
    assert(rc == 0);
   13752:	4604      	mov	r4, r0
   13754:	b990      	cbnz	r0, 1377c <sysdown+0x5c>
   13756:	4e15      	ldr	r6, [pc, #84]	; (137ac <sysdown+0x8c>)
        case SYSDOWN_COMPLETE:
            break;

        case SYSDOWN_IN_PROGRESS:
            OS_ENTER_CRITICAL(sr);
            sysdown_num_in_progress++;
   13758:	4f15      	ldr	r7, [pc, #84]	; (137b0 <sysdown+0x90>)
    for (i = 0; sysdown_cbs[i] != NULL; i++) {
   1375a:	f856 3b04 	ldr.w	r3, [r6], #4
   1375e:	b99b      	cbnz	r3, 13788 <sysdown+0x68>

    /* If all subprocedures are complete, signal completion of sysdown.
     * Otherwise, wait for in-progress subprocedures to signal completion
     * asynchronously.
     */
    if (sysdown_num_in_progress == 0) {
   13760:	4b13      	ldr	r3, [pc, #76]	; (137b0 <sysdown+0x90>)
   13762:	681d      	ldr	r5, [r3, #0]
   13764:	b92d      	cbnz	r5, 13772 <sysdown+0x52>
    os_callout_stop(&sysdown_timer);
   13766:	4810      	ldr	r0, [pc, #64]	; (137a8 <sysdown+0x88>)
   13768:	f7f9 f9c2 	bl	caf0 <os_callout_stop>
    os_system_reset();
   1376c:	f7f9 f995 	bl	ca9a <os_system_reset>
        sysdown_complete();
    }

    return 0;
   13770:	462c      	mov	r4, r5
}
   13772:	4620      	mov	r0, r4
   13774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = SYS_EALREADY;
   13776:	f06f 040a 	mvn.w	r4, #10
   1377a:	e7da      	b.n	13732 <sysdown+0x12>
    assert(rc == 0);
   1377c:	2300      	movs	r3, #0
   1377e:	461a      	mov	r2, r3
   13780:	4619      	mov	r1, r3
   13782:	4618      	mov	r0, r3
   13784:	f7f9 f83a 	bl	c7fc <__assert_func>
        rc = sysdown_cbs[i](reason);
   13788:	4628      	mov	r0, r5
   1378a:	4798      	blx	r3
        switch (rc) {
   1378c:	2801      	cmp	r0, #1
   1378e:	d1e4      	bne.n	1375a <sysdown+0x3a>
            OS_ENTER_CRITICAL(sr);
   13790:	f7f8 ff7a 	bl	c688 <os_arch_save_sr>
            sysdown_num_in_progress++;
   13794:	683b      	ldr	r3, [r7, #0]
   13796:	3301      	adds	r3, #1
   13798:	603b      	str	r3, [r7, #0]
            OS_EXIT_CRITICAL(sr);
   1379a:	f7f8 ff7b 	bl	c694 <os_arch_restore_sr>
            break;
   1379e:	e7dc      	b.n	1375a <sysdown+0x3a>
   137a0:	20006acd 	.word	0x20006acd
   137a4:	00013711 	.word	0x00013711
   137a8:	20006ad4 	.word	0x20006ad4
   137ac:	0002148c 	.word	0x0002148c
   137b0:	20006ad0 	.word	0x20006ad0

000137b4 <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
   137b4:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
   137b6:	f7f9 f821 	bl	c7fc <__assert_func>
	...

000137bc <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
   137bc:	4b01      	ldr	r3, [pc, #4]	; (137c4 <sysinit_start+0x8>)
   137be:	2201      	movs	r2, #1
   137c0:	701a      	strb	r2, [r3, #0]
}
   137c2:	4770      	bx	lr
   137c4:	20006af4 	.word	0x20006af4

000137c8 <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
   137c8:	4b01      	ldr	r3, [pc, #4]	; (137d0 <sysinit_end+0x8>)
   137ca:	2200      	movs	r2, #0
   137cc:	701a      	strb	r2, [r3, #0]
}
   137ce:	4770      	bx	lr
   137d0:	20006af4 	.word	0x20006af4

000137d4 <uwbcfg_export>:
}

static int
uwbcfg_export(void (*export_func)(char *name, char *val),
  enum conf_export_tgt tgt)
{
   137d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   137d8:	4f0f      	ldr	r7, [pc, #60]	; (13818 <uwbcfg_export+0x44>)
   137da:	4d10      	ldr	r5, [pc, #64]	; (1381c <uwbcfg_export+0x48>)
    int i;
    char b[32];
    for (i=0;i<CFGSTR_MAX;i++) {
        snprintf(b, sizeof(b), "%s/%s", uwbcfg_handler.ch_name, g_uwbcfg_str[i]);
   137dc:	f8df 9040 	ldr.w	r9, [pc, #64]	; 13820 <uwbcfg_export+0x4c>
   137e0:	f8df 8040 	ldr.w	r8, [pc, #64]	; 13824 <uwbcfg_export+0x50>
{
   137e4:	b08b      	sub	sp, #44	; 0x2c
   137e6:	4606      	mov	r6, r0
    for (i=0;i<CFGSTR_MAX;i++) {
   137e8:	2400      	movs	r4, #0
        snprintf(b, sizeof(b), "%s/%s", uwbcfg_handler.ch_name, g_uwbcfg_str[i]);
   137ea:	f857 3b04 	ldr.w	r3, [r7], #4
   137ee:	9300      	str	r3, [sp, #0]
   137f0:	4642      	mov	r2, r8
   137f2:	f8d9 3004 	ldr.w	r3, [r9, #4]
   137f6:	2120      	movs	r1, #32
   137f8:	a802      	add	r0, sp, #8
   137fa:	f7fd f84f 	bl	1089c <snprintf>
    for (i=0;i<CFGSTR_MAX;i++) {
   137fe:	3401      	adds	r4, #1
        export_func(b, g_uwb_config[i]);
   13800:	4629      	mov	r1, r5
   13802:	a802      	add	r0, sp, #8
   13804:	47b0      	blx	r6
    for (i=0;i<CFGSTR_MAX;i++) {
   13806:	2c14      	cmp	r4, #20
   13808:	f105 0508 	add.w	r5, r5, #8
   1380c:	d1ed      	bne.n	137ea <uwbcfg_export+0x16>
    }
    return 0;
}
   1380e:	2000      	movs	r0, #0
   13810:	b00b      	add	sp, #44	; 0x2c
   13812:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13816:	bf00      	nop
   13818:	200014e0 	.word	0x200014e0
   1381c:	20001440 	.word	0x20001440
   13820:	20001530 	.word	0x20001530
   13824:	000210a4 	.word	0x000210a4

00013828 <uwbcfg_set>:
    if (argc == 1) {
   13828:	2801      	cmp	r0, #1
{
   1382a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1382e:	4615      	mov	r5, r2
    if (argc == 1) {
   13830:	d115      	bne.n	1385e <uwbcfg_set+0x36>
            if (!strcmp(argv[0], g_uwbcfg_str[i]))
   13832:	680f      	ldr	r7, [r1, #0]
   13834:	4e0b      	ldr	r6, [pc, #44]	; (13864 <uwbcfg_set+0x3c>)
        for (i=0;i<CFGSTR_MAX;i++) {
   13836:	2400      	movs	r4, #0
            if (!strcmp(argv[0], g_uwbcfg_str[i]))
   13838:	f856 1b04 	ldr.w	r1, [r6], #4
   1383c:	4638      	mov	r0, r7
   1383e:	f7fc fd3f 	bl	102c0 <strcmp>
   13842:	b948      	cbnz	r0, 13858 <uwbcfg_set+0x30>
                return CONF_VALUE_SET(val, CONF_STRING, g_uwb_config[i]);
   13844:	4a08      	ldr	r2, [pc, #32]	; (13868 <uwbcfg_set+0x40>)
   13846:	4628      	mov	r0, r5
   13848:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
   1384c:	2308      	movs	r3, #8
}
   1384e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                return CONF_VALUE_SET(val, CONF_STRING, g_uwb_config[i]);
   13852:	2106      	movs	r1, #6
   13854:	f7fd bd1c 	b.w	11290 <conf_value_from_str>
        for (i=0;i<CFGSTR_MAX;i++) {
   13858:	3401      	adds	r4, #1
   1385a:	2c14      	cmp	r4, #20
   1385c:	d1ec      	bne.n	13838 <uwbcfg_set+0x10>
}
   1385e:	200a      	movs	r0, #10
   13860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13864:	200014e0 	.word	0x200014e0
   13868:	20001440 	.word	0x20001440

0001386c <uwbcfg_get>:
    if (argc == 1) {
   1386c:	2801      	cmp	r0, #1
{
   1386e:	b570      	push	{r4, r5, r6, lr}
    if (argc == 1) {
   13870:	d10f      	bne.n	13892 <uwbcfg_get+0x26>
            if (!strcmp(argv[0], g_uwbcfg_str[i])) return g_uwb_config[i];
   13872:	680e      	ldr	r6, [r1, #0]
   13874:	4d08      	ldr	r5, [pc, #32]	; (13898 <uwbcfg_get+0x2c>)
        for (i=0;i<CFGSTR_MAX;i++) {
   13876:	2400      	movs	r4, #0
            if (!strcmp(argv[0], g_uwbcfg_str[i])) return g_uwb_config[i];
   13878:	f855 1b04 	ldr.w	r1, [r5], #4
   1387c:	4630      	mov	r0, r6
   1387e:	f7fc fd1f 	bl	102c0 <strcmp>
   13882:	b918      	cbnz	r0, 1388c <uwbcfg_get+0x20>
   13884:	4805      	ldr	r0, [pc, #20]	; (1389c <uwbcfg_get+0x30>)
   13886:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
}
   1388a:	bd70      	pop	{r4, r5, r6, pc}
        for (i=0;i<CFGSTR_MAX;i++) {
   1388c:	3401      	adds	r4, #1
   1388e:	2c14      	cmp	r4, #20
   13890:	d1f2      	bne.n	13878 <uwbcfg_get+0xc>
    return NULL;
   13892:	2000      	movs	r0, #0
   13894:	e7f9      	b.n	1388a <uwbcfg_get+0x1e>
   13896:	bf00      	nop
   13898:	200014e0 	.word	0x200014e0
   1389c:	20001440 	.word	0x20001440

000138a0 <uwbcfg_commit_to_inst>:
{
   138a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   138a2:	460d      	mov	r5, r1
    conf_value_from_str(cfg[CFGSTR_CH], CONF_INT8, (void*)&(inst->config.channel), 0);
   138a4:	f200 520c 	addw	r2, r0, #1292	; 0x50c
   138a8:	2102      	movs	r1, #2
{
   138aa:	4604      	mov	r4, r0
    conf_value_from_str(cfg[CFGSTR_CH], CONF_INT8, (void*)&(inst->config.channel), 0);
   138ac:	2300      	movs	r3, #0
   138ae:	4628      	mov	r0, r5
    if (!strcmp(cfg[CFGSTR_DATARATE], "6m8")) {
   138b0:	f105 0610 	add.w	r6, r5, #16
    conf_value_from_str(cfg[CFGSTR_CH], CONF_INT8, (void*)&(inst->config.channel), 0);
   138b4:	f7fd fcec 	bl	11290 <conf_value_from_str>
    if (!strcmp(cfg[CFGSTR_DATARATE], "6m8")) {
   138b8:	497f      	ldr	r1, [pc, #508]	; (13ab8 <uwbcfg_commit_to_inst+0x218>)
   138ba:	4630      	mov	r0, r6
   138bc:	f7fc fd00 	bl	102c0 <strcmp>
   138c0:	2800      	cmp	r0, #0
   138c2:	f040 80c7 	bne.w	13a54 <uwbcfg_commit_to_inst+0x1b4>
        inst->attrib.Tdsym = DPL_FLOAT32_INIT(0.12821f);
   138c6:	4a7d      	ldr	r2, [pc, #500]	; (13abc <uwbcfg_commit_to_inst+0x21c>)
   138c8:	f204 533c 	addw	r3, r4, #1340	; 0x53c
        inst->attrib.Tdsym = DPL_FLOAT32_INIT(1.02564f);
   138cc:	601a      	str	r2, [r3, #0]
        sfd_len = 8;
   138ce:	2708      	movs	r7, #8
    conf_value_from_str(cfg[CFGSTR_RX_PACLEN], CONF_INT8, (void*)&paclen, 0);
   138d0:	2300      	movs	r3, #0
   138d2:	f10d 0203 	add.w	r2, sp, #3
   138d6:	2102      	movs	r1, #2
   138d8:	f105 0018 	add.w	r0, r5, #24
   138dc:	f7fd fcd8 	bl	11290 <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_RX_SFDTYPE], CONF_INT8,
   138e0:	2300      	movs	r3, #0
   138e2:	f204 5212 	addw	r2, r4, #1298	; 0x512
   138e6:	2102      	movs	r1, #2
   138e8:	f105 0028 	add.w	r0, r5, #40	; 0x28
   138ec:	f7fd fcd0 	bl	11290 <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_RX_SFD_TO], CONF_INT16, (void*)&sfd_timeout, 0);
   138f0:	2300      	movs	r3, #0
   138f2:	f10d 0206 	add.w	r2, sp, #6
   138f6:	2103      	movs	r1, #3
   138f8:	f105 0030 	add.w	r0, r5, #48	; 0x30
   138fc:	f7fd fcc8 	bl	11290 <conf_value_from_str>
    inst->config.rx.phrMode = (cfg[CFGSTR_RX_PHRMODE][0] == 's')? DWT_PHRMODE_STD : DWT_PHRMODE_EXT;
   13900:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    if (inst->rxdiag) {
   13904:	f8d4 24f8 	ldr.w	r2, [r4, #1272]	; 0x4f8
    inst->config.rx.phrMode = (cfg[CFGSTR_RX_PHRMODE][0] == 's')? DWT_PHRMODE_STD : DWT_PHRMODE_EXT;
   13908:	2b73      	cmp	r3, #115	; 0x73
   1390a:	bf0c      	ite	eq
   1390c:	2300      	moveq	r3, #0
   1390e:	2303      	movne	r3, #3
   13910:	f884 3513 	strb.w	r3, [r4, #1299]	; 0x513
    if (inst->rxdiag) {
   13914:	b192      	cbz	r2, 1393c <uwbcfg_commit_to_inst+0x9c>
        conf_value_from_str(cfg[CFGSTR_RX_DIAG_EN], CONF_INT16,
   13916:	2300      	movs	r3, #0
   13918:	3202      	adds	r2, #2
   1391a:	2103      	movs	r1, #3
   1391c:	f105 0040 	add.w	r0, r5, #64	; 0x40
   13920:	f7fd fcb6 	bl	11290 <conf_value_from_str>
        inst->config.rxdiag_enable = (inst->rxdiag->enabled != 0);
   13924:	f8d4 34f8 	ldr.w	r3, [r4, #1272]	; 0x4f8
   13928:	f894 252c 	ldrb.w	r2, [r4, #1324]	; 0x52c
   1392c:	885b      	ldrh	r3, [r3, #2]
   1392e:	3b00      	subs	r3, #0
   13930:	bf18      	it	ne
   13932:	2301      	movne	r3, #1
   13934:	f363 1286 	bfi	r2, r3, #6, #1
   13938:	f884 252c 	strb.w	r2, [r4, #1324]	; 0x52c
    conf_value_from_str(cfg[CFGSTR_RX_PREAM_CIDX], CONF_INT8,
   1393c:	2300      	movs	r3, #0
   1393e:	f204 5211 	addw	r2, r4, #1297	; 0x511
   13942:	2102      	movs	r1, #2
   13944:	f105 0020 	add.w	r0, r5, #32
   13948:	f7fd fca2 	bl	11290 <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_TX_PREAM_CIDX], CONF_INT8,
   1394c:	2300      	movs	r3, #0
   1394e:	f504 62a4 	add.w	r2, r4, #1312	; 0x520
   13952:	2102      	movs	r1, #2
   13954:	f105 0048 	add.w	r0, r5, #72	; 0x48
   13958:	f7fd fc9a 	bl	11290 <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_RX_ANTDLY], CONF_INT16, (void*)&inst->rx_antenna_delay, 0);
   1395c:	2300      	movs	r3, #0
   1395e:	f204 42cc 	addw	r2, r4, #1228	; 0x4cc
   13962:	2103      	movs	r1, #3
   13964:	f105 0068 	add.w	r0, r5, #104	; 0x68
   13968:	f7fd fc92 	bl	11290 <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_TX_ANTDLY], CONF_INT16, (void*)&inst->tx_antenna_delay, 0);
   1396c:	2300      	movs	r3, #0
   1396e:	f204 42ce 	addw	r2, r4, #1230	; 0x4ce
   13972:	2103      	movs	r1, #3
   13974:	f105 0070 	add.w	r0, r5, #112	; 0x70
   13978:	f7fd fc8a 	bl	11290 <conf_value_from_str>
    inst->rx_ant_separation = DPL_FLOAT32_FROM_F64(strtod_soft(cfg[CFGSTR_RX_ANTSEP], 0));
   1397c:	2100      	movs	r1, #0
   1397e:	f105 0078 	add.w	r0, r5, #120	; 0x78
   13982:	f000 fa63 	bl	13e4c <strtod_soft>
   13986:	ec51 0b10 	vmov	r0, r1, d0
   1398a:	f00b fa0d 	bl	1eda8 <__aeabi_d2f>
   1398e:	f504 669a 	add.w	r6, r4, #1232	; 0x4d0
    conf_value_from_str(cfg[CFGSTR_EXT_CLKDLY], CONF_INT32, (void*)&inst->ext_clock_delay, 0);
   13992:	2300      	movs	r3, #0
    inst->rx_ant_separation = DPL_FLOAT32_FROM_F64(strtod_soft(cfg[CFGSTR_RX_ANTSEP], 0));
   13994:	6030      	str	r0, [r6, #0]
    conf_value_from_str(cfg[CFGSTR_EXT_CLKDLY], CONF_INT32, (void*)&inst->ext_clock_delay, 0);
   13996:	f204 42d4 	addw	r2, r4, #1236	; 0x4d4
   1399a:	2104      	movs	r1, #4
   1399c:	f105 0080 	add.w	r0, r5, #128	; 0x80
   139a0:	f7fd fc76 	bl	11290 <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_ROLE], CONF_INT16, (void*)&inst->role, 0);
   139a4:	2300      	movs	r3, #0
   139a6:	f204 42b4 	addw	r2, r4, #1204	; 0x4b4
   139aa:	2103      	movs	r1, #3
   139ac:	f105 0088 	add.w	r0, r5, #136	; 0x88
   139b0:	f7fd fc6e 	bl	11290 <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_FRAME_FILTER], CONF_INT16,
   139b4:	2300      	movs	r3, #0
   139b6:	f204 521c 	addw	r2, r4, #1308	; 0x51c
   139ba:	2103      	movs	r1, #3
   139bc:	f105 0090 	add.w	r0, r5, #144	; 0x90
   139c0:	f7fd fc66 	bl	11290 <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_XTAL_TRIM], CONF_INT8,
   139c4:	2300      	movs	r3, #0
   139c6:	f204 521e 	addw	r2, r4, #1310	; 0x51e
   139ca:	2102      	movs	r1, #2
   139cc:	f105 0098 	add.w	r0, r5, #152	; 0x98
   139d0:	f7fd fc5e 	bl	11290 <conf_value_from_str>
    sfd_timeout = inst->config.rx.sfdTimeout;
   139d4:	f8b4 3516 	ldrh.w	r3, [r4, #1302]	; 0x516
   139d8:	f8ad 3006 	strh.w	r3, [sp, #6]
    conf_value_from_str(cfg[CFGSTR_TX_PREAM_LEN], CONF_INT16,
   139dc:	aa01      	add	r2, sp, #4
   139de:	2300      	movs	r3, #0
   139e0:	2103      	movs	r1, #3
   139e2:	f105 0050 	add.w	r0, r5, #80	; 0x50
    txP = inst->config.tx.preambleLength;
   139e6:	f894 6521 	ldrb.w	r6, [r4, #1313]	; 0x521
    conf_value_from_str(cfg[CFGSTR_TX_PREAM_LEN], CONF_INT16,
   139ea:	f7fd fc51 	bl	11290 <conf_value_from_str>
    switch (preamble_len)
   139ee:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   139f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   139f6:	d04e      	beq.n	13a96 <uwbcfg_commit_to_inst+0x1f6>
   139f8:	d842      	bhi.n	13a80 <uwbcfg_commit_to_inst+0x1e0>
   139fa:	2b80      	cmp	r3, #128	; 0x80
   139fc:	d04d      	beq.n	13a9a <uwbcfg_commit_to_inst+0x1fa>
   139fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   13a02:	d04c      	beq.n	13a9e <uwbcfg_commit_to_inst+0x1fe>
   13a04:	2b40      	cmp	r3, #64	; 0x40
   13a06:	d04c      	beq.n	13aa2 <uwbcfg_commit_to_inst+0x202>
        UC_WARN("inv preamb_len\n");
   13a08:	4b2d      	ldr	r3, [pc, #180]	; (13ac0 <uwbcfg_commit_to_inst+0x220>)
   13a0a:	482e      	ldr	r0, [pc, #184]	; (13ac4 <uwbcfg_commit_to_inst+0x224>)
   13a0c:	2202      	movs	r2, #2
   13a0e:	215c      	movs	r1, #92	; 0x5c
   13a10:	f008 f896 	bl	1bb40 <log_printf>
    if (sfd_timeout < 1) {
   13a14:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        sfd_timeout = (preamble_len + 1 + sfd_len - paclen);
   13a18:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    if (sfd_timeout < 1) {
   13a1c:	b933      	cbnz	r3, 13a2c <uwbcfg_commit_to_inst+0x18c>
        sfd_timeout = (preamble_len + 1 + sfd_len - paclen);
   13a1e:	f89d 1003 	ldrb.w	r1, [sp, #3]
   13a22:	1c53      	adds	r3, r2, #1
   13a24:	1a5b      	subs	r3, r3, r1
   13a26:	443b      	add	r3, r7
   13a28:	f8ad 3006 	strh.w	r3, [sp, #6]
    inst->config.rx.sfdTimeout = sfd_timeout;
   13a2c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   13a30:	f8a4 3516 	strh.w	r3, [r4, #1302]	; 0x516
    inst->config.tx.preambleLength = txP;
   13a34:	f884 6521 	strb.w	r6, [r4, #1313]	; 0x521
    inst->attrib.nsfd = sfd_len;
   13a38:	f884 7540 	strb.w	r7, [r4, #1344]	; 0x540
    inst->attrib.nsync = preamble_len;
   13a3c:	f8a4 2542 	strh.w	r2, [r4, #1346]	; 0x542
    uwbcfg_commit_to_inst_dw1000(inst, cfg);
   13a40:	4620      	mov	r0, r4
   13a42:	4629      	mov	r1, r5
   13a44:	f000 f8f6 	bl	13c34 <uwbcfg_commit_to_inst_dw1000>
    SLIST_FOREACH(cb, &uwbcfg_callbacks, uc_list) {
   13a48:	4b1f      	ldr	r3, [pc, #124]	; (13ac8 <uwbcfg_commit_to_inst+0x228>)
   13a4a:	681c      	ldr	r4, [r3, #0]
   13a4c:	bb7c      	cbnz	r4, 13aae <uwbcfg_commit_to_inst+0x20e>
}
   13a4e:	4620      	mov	r0, r4
   13a50:	b003      	add	sp, #12
   13a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (!strcmp(cfg[CFGSTR_DATARATE], "850k")) {
   13a54:	491d      	ldr	r1, [pc, #116]	; (13acc <uwbcfg_commit_to_inst+0x22c>)
   13a56:	4630      	mov	r0, r6
   13a58:	f7fc fc32 	bl	102c0 <strcmp>
   13a5c:	b918      	cbnz	r0, 13a66 <uwbcfg_commit_to_inst+0x1c6>
        inst->attrib.Tdsym = DPL_FLOAT32_INIT(1.02564f);
   13a5e:	4a1c      	ldr	r2, [pc, #112]	; (13ad0 <uwbcfg_commit_to_inst+0x230>)
   13a60:	f204 533c 	addw	r3, r4, #1340	; 0x53c
   13a64:	e732      	b.n	138cc <uwbcfg_commit_to_inst+0x2c>
    } else if (!strcmp(cfg[CFGSTR_DATARATE], "110k")) {
   13a66:	491b      	ldr	r1, [pc, #108]	; (13ad4 <uwbcfg_commit_to_inst+0x234>)
   13a68:	4630      	mov	r0, r6
   13a6a:	f7fc fc29 	bl	102c0 <strcmp>
   13a6e:	b928      	cbnz	r0, 13a7c <uwbcfg_commit_to_inst+0x1dc>
        inst->attrib.Tdsym = DPL_FLOAT32_INIT(8.20513f);
   13a70:	f204 533c 	addw	r3, r4, #1340	; 0x53c
   13a74:	4a18      	ldr	r2, [pc, #96]	; (13ad8 <uwbcfg_commit_to_inst+0x238>)
   13a76:	601a      	str	r2, [r3, #0]
        sfd_len = 64;
   13a78:	2740      	movs	r7, #64	; 0x40
   13a7a:	e729      	b.n	138d0 <uwbcfg_commit_to_inst+0x30>
    int sfd_len=0;
   13a7c:	2700      	movs	r7, #0
   13a7e:	e727      	b.n	138d0 <uwbcfg_commit_to_inst+0x30>
    switch (preamble_len)
   13a80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   13a84:	d00f      	beq.n	13aa6 <uwbcfg_commit_to_inst+0x206>
   13a86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   13a8a:	d00e      	beq.n	13aaa <uwbcfg_commit_to_inst+0x20a>
   13a8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   13a90:	d1ba      	bne.n	13a08 <uwbcfg_commit_to_inst+0x168>
    case (1024): txP = DWT_PLEN_1024;break;
   13a92:	2608      	movs	r6, #8
   13a94:	e7be      	b.n	13a14 <uwbcfg_commit_to_inst+0x174>
    case (512):  txP = DWT_PLEN_512 ;break;
   13a96:	2634      	movs	r6, #52	; 0x34
   13a98:	e7bc      	b.n	13a14 <uwbcfg_commit_to_inst+0x174>
    switch (preamble_len)
   13a9a:	2614      	movs	r6, #20
   13a9c:	e7ba      	b.n	13a14 <uwbcfg_commit_to_inst+0x174>
    case (256):  txP = DWT_PLEN_256 ;break;
   13a9e:	2624      	movs	r6, #36	; 0x24
   13aa0:	e7b8      	b.n	13a14 <uwbcfg_commit_to_inst+0x174>
    case (64):   txP = DWT_PLEN_64  ;break;
   13aa2:	2604      	movs	r6, #4
   13aa4:	e7b6      	b.n	13a14 <uwbcfg_commit_to_inst+0x174>
    case (2048): txP = DWT_PLEN_2048;break;
   13aa6:	2628      	movs	r6, #40	; 0x28
   13aa8:	e7b4      	b.n	13a14 <uwbcfg_commit_to_inst+0x174>
    case (4096): txP = DWT_PLEN_4096;break;
   13aaa:	260c      	movs	r6, #12
   13aac:	e7b2      	b.n	13a14 <uwbcfg_commit_to_inst+0x174>
        if (cb->uc_update) {
   13aae:	6863      	ldr	r3, [r4, #4]
   13ab0:	b103      	cbz	r3, 13ab4 <uwbcfg_commit_to_inst+0x214>
            cb->uc_update();
   13ab2:	4798      	blx	r3
    SLIST_FOREACH(cb, &uwbcfg_callbacks, uc_list) {
   13ab4:	6824      	ldr	r4, [r4, #0]
   13ab6:	e7c9      	b.n	13a4c <uwbcfg_commit_to_inst+0x1ac>
   13ab8:	000210aa 	.word	0x000210aa
   13abc:	3e03497b 	.word	0x3e03497b
   13ac0:	000210b8 	.word	0x000210b8
   13ac4:	20006af8 	.word	0x20006af8
   13ac8:	20006b10 	.word	0x20006b10
   13acc:	000210ae 	.word	0x000210ae
   13ad0:	3f83482c 	.word	0x3f83482c
   13ad4:	000210b3 	.word	0x000210b3
   13ad8:	41034836 	.word	0x41034836

00013adc <uwbcfg_commit>:
{
   13adc:	b538      	push	{r3, r4, r5, lr}
        uwbcfg_commit_to_inst(udev, g_uwb_config);
   13ade:	4d07      	ldr	r5, [pc, #28]	; (13afc <uwbcfg_commit+0x20>)
    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
   13ae0:	2400      	movs	r4, #0
        udev = uwb_dev_idx_lookup(i);
   13ae2:	4620      	mov	r0, r4
   13ae4:	f7f4 ff1e 	bl	8924 <uwb_dev_idx_lookup>
        if (!udev) {
   13ae8:	b110      	cbz	r0, 13af0 <uwbcfg_commit+0x14>
        uwbcfg_commit_to_inst(udev, g_uwb_config);
   13aea:	4629      	mov	r1, r5
   13aec:	f7ff fed8 	bl	138a0 <uwbcfg_commit_to_inst>
    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
   13af0:	3401      	adds	r4, #1
   13af2:	2c03      	cmp	r4, #3
   13af4:	d1f5      	bne.n	13ae2 <uwbcfg_commit+0x6>
}
   13af6:	2000      	movs	r0, #0
   13af8:	bd38      	pop	{r3, r4, r5, pc}
   13afa:	bf00      	nop
   13afc:	20001440 	.word	0x20001440

00013b00 <uwbcfg_register>:

int
uwbcfg_register(struct uwbcfg_cbs *handler)
{
    SLIST_INSERT_HEAD(&uwbcfg_callbacks, handler, uc_list);
   13b00:	4b02      	ldr	r3, [pc, #8]	; (13b0c <uwbcfg_register+0xc>)
   13b02:	681a      	ldr	r2, [r3, #0]
   13b04:	6002      	str	r2, [r0, #0]
   13b06:	6018      	str	r0, [r3, #0]
    return 0;
}
   13b08:	2000      	movs	r0, #0
   13b0a:	4770      	bx	lr
   13b0c:	20006b10 	.word	0x20006b10

00013b10 <uwbcfg_pkg_init>:
    return uwbcfg_commit();
}

int
uwbcfg_pkg_init(void)
{
   13b10:	b513      	push	{r0, r1, r4, lr}
#ifndef __KERNEL__
    int rc;
    rc = conf_register(&uwbcfg_handler);
   13b12:	480d      	ldr	r0, [pc, #52]	; (13b48 <uwbcfg_pkg_init+0x38>)
   13b14:	f7fd fb78 	bl	11208 <conf_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   13b18:	b138      	cbz	r0, 13b2a <uwbcfg_pkg_init+0x1a>
   13b1a:	2300      	movs	r3, #0
   13b1c:	4a0b      	ldr	r2, [pc, #44]	; (13b4c <uwbcfg_pkg_init+0x3c>)
   13b1e:	9300      	str	r3, [sp, #0]
   13b20:	6814      	ldr	r4, [r2, #0]
   13b22:	4619      	mov	r1, r3
   13b24:	461a      	mov	r2, r3
   13b26:	4618      	mov	r0, r3
   13b28:	47a0      	blx	r4
#endif

    /* Init log and Config */
    log_register("uwbcfg", &_uwbcfg_log, &log_console_handler,
   13b2a:	2400      	movs	r4, #0
   13b2c:	4a08      	ldr	r2, [pc, #32]	; (13b50 <uwbcfg_pkg_init+0x40>)
   13b2e:	4909      	ldr	r1, [pc, #36]	; (13b54 <uwbcfg_pkg_init+0x44>)
   13b30:	9400      	str	r4, [sp, #0]
   13b32:	4623      	mov	r3, r4
   13b34:	4808      	ldr	r0, [pc, #32]	; (13b58 <uwbcfg_pkg_init+0x48>)
   13b36:	f008 f827 	bl	1bb88 <log_register>
                 NULL, LOG_SYSLEVEL);

    SLIST_INIT(&uwbcfg_callbacks);
   13b3a:	4b08      	ldr	r3, [pc, #32]	; (13b5c <uwbcfg_pkg_init+0x4c>)
   13b3c:	601c      	str	r4, [r3, #0]
#if MYNEWT_VAL(UWBCFG_CLI)
    uwbcfg_cli_register();
#endif

#if MYNEWT_VAL(UWBCFG_APPLY_AT_INIT)
    uwbcfg_commit();
   13b3e:	f7ff ffcd 	bl	13adc <uwbcfg_commit>
#endif
#ifdef __KERNEL__
    uwbcfg_sysfs_init();
#endif
    return 0;
}
   13b42:	4620      	mov	r0, r4
   13b44:	b002      	add	sp, #8
   13b46:	bd10      	pop	{r4, pc}
   13b48:	20001530 	.word	0x20001530
   13b4c:	2000143c 	.word	0x2000143c
   13b50:	00022384 	.word	0x00022384
   13b54:	20006af8 	.word	0x20006af8
   13b58:	000210c8 	.word	0x000210c8
   13b5c:	20006b10 	.word	0x20006b10

00013b60 <uwbcfg_pkg_down>:
{
#ifdef __KERNEL__
    uwbcfg_sysfs_deinit();
#endif
    return 0;
}
   13b60:	2000      	movs	r0, #0
   13b62:	4770      	bx	lr

00013b64 <check_preamble_code.isra.0>:
 *  Thus to get 15.5dB from fine, set FINE to 31 */
#define power_value(COARSE,FINE) ((COARSE<<5) + FINE)

#if MYNEWT_VAL(DW1000_DEVICE_0)
static void
check_preamble_code(struct uwb_dev * inst, uint8_t *arg_code)
   13b64:	b537      	push	{r0, r1, r2, r4, r5, lr}
{
    int new_code = 0;
    int ch = inst->config.channel;
    int prf = inst->config.prf;
    uint8_t code = *arg_code;
    if (prf == DWT_PRF_16M) {
   13b66:	2901      	cmp	r1, #1
    uint8_t code = *arg_code;
   13b68:	7813      	ldrb	r3, [r2, #0]
check_preamble_code(struct uwb_dev * inst, uint8_t *arg_code)
   13b6a:	4615      	mov	r5, r2
    if (prf == DWT_PRF_16M) {
   13b6c:	d122      	bne.n	13bb4 <check_preamble_code.isra.0+0x50>
        if (ch == 1 && code != 1 && code != 2)              new_code = 1;
   13b6e:	2801      	cmp	r0, #1
   13b70:	d10e      	bne.n	13b90 <check_preamble_code.isra.0+0x2c>
   13b72:	3b01      	subs	r3, #1
   13b74:	2b01      	cmp	r3, #1
   13b76:	bf94      	ite	ls
   13b78:	2400      	movls	r4, #0
   13b7a:	2401      	movhi	r4, #1
            if (code < 9 || code > 12)  new_code = 9;
        } else { /* channels 4 and 7 */
            if (code < 17 || code > 20) new_code = 17;
        }
    }
    if (new_code) {
   13b7c:	b314      	cbz	r4, 13bc4 <check_preamble_code.isra.0+0x60>
        UC_WARN("inv pream code (using %d)\n", new_code);
   13b7e:	4b1c      	ldr	r3, [pc, #112]	; (13bf0 <check_preamble_code.isra.0+0x8c>)
   13b80:	481c      	ldr	r0, [pc, #112]	; (13bf4 <check_preamble_code.isra.0+0x90>)
   13b82:	9400      	str	r4, [sp, #0]
   13b84:	2202      	movs	r2, #2
   13b86:	215c      	movs	r1, #92	; 0x5c
   13b88:	f007 ffda 	bl	1bb40 <log_printf>
        *arg_code = new_code;
   13b8c:	702c      	strb	r4, [r5, #0]
    }
}
   13b8e:	e019      	b.n	13bc4 <check_preamble_code.isra.0+0x60>
        if ((ch == 2 || ch==5) && code != 3 && code != 4)   new_code = 3;
   13b90:	2802      	cmp	r0, #2
   13b92:	d001      	beq.n	13b98 <check_preamble_code.isra.0+0x34>
   13b94:	2805      	cmp	r0, #5
   13b96:	d10b      	bne.n	13bb0 <check_preamble_code.isra.0+0x4c>
   13b98:	2b03      	cmp	r3, #3
   13b9a:	d01c      	beq.n	13bd6 <check_preamble_code.isra.0+0x72>
   13b9c:	2b04      	cmp	r3, #4
   13b9e:	d01a      	beq.n	13bd6 <check_preamble_code.isra.0+0x72>
   13ba0:	2403      	movs	r4, #3
        if (ch == 3 && code != 5 && code != 6)              new_code = 5;
   13ba2:	2803      	cmp	r0, #3
   13ba4:	d11a      	bne.n	13bdc <check_preamble_code.isra.0+0x78>
   13ba6:	3b05      	subs	r3, #5
   13ba8:	2b01      	cmp	r3, #1
   13baa:	d9e7      	bls.n	13b7c <check_preamble_code.isra.0+0x18>
   13bac:	2405      	movs	r4, #5
   13bae:	e7e6      	b.n	13b7e <check_preamble_code.isra.0+0x1a>
   13bb0:	2400      	movs	r4, #0
   13bb2:	e7f6      	b.n	13ba2 <check_preamble_code.isra.0+0x3e>
        if (ch == 1 || ch==2 || ch==3 || ch==5) {
   13bb4:	1e42      	subs	r2, r0, #1
   13bb6:	2a02      	cmp	r2, #2
   13bb8:	d901      	bls.n	13bbe <check_preamble_code.isra.0+0x5a>
   13bba:	2805      	cmp	r0, #5
   13bbc:	d104      	bne.n	13bc8 <check_preamble_code.isra.0+0x64>
            if (code < 9 || code > 12)  new_code = 9;
   13bbe:	3b09      	subs	r3, #9
   13bc0:	2b03      	cmp	r3, #3
   13bc2:	d806      	bhi.n	13bd2 <check_preamble_code.isra.0+0x6e>
}
   13bc4:	b003      	add	sp, #12
   13bc6:	bd30      	pop	{r4, r5, pc}
            if (code < 17 || code > 20) new_code = 17;
   13bc8:	3b11      	subs	r3, #17
   13bca:	2b03      	cmp	r3, #3
   13bcc:	d9fa      	bls.n	13bc4 <check_preamble_code.isra.0+0x60>
   13bce:	2411      	movs	r4, #17
   13bd0:	e7d5      	b.n	13b7e <check_preamble_code.isra.0+0x1a>
            if (code < 9 || code > 12)  new_code = 9;
   13bd2:	2409      	movs	r4, #9
   13bd4:	e7d3      	b.n	13b7e <check_preamble_code.isra.0+0x1a>
        if (ch == 3 && code != 5 && code != 6)              new_code = 5;
   13bd6:	2803      	cmp	r0, #3
   13bd8:	d0e8      	beq.n	13bac <check_preamble_code.isra.0+0x48>
   13bda:	2400      	movs	r4, #0
        if ((ch == 4 || ch == 7) && code != 7 && code != 8) new_code = 7;
   13bdc:	2804      	cmp	r0, #4
   13bde:	d001      	beq.n	13be4 <check_preamble_code.isra.0+0x80>
   13be0:	2807      	cmp	r0, #7
   13be2:	d1cb      	bne.n	13b7c <check_preamble_code.isra.0+0x18>
   13be4:	3b07      	subs	r3, #7
   13be6:	2b01      	cmp	r3, #1
   13be8:	d9c8      	bls.n	13b7c <check_preamble_code.isra.0+0x18>
   13bea:	2407      	movs	r4, #7
   13bec:	e7c7      	b.n	13b7e <check_preamble_code.isra.0+0x1a>
   13bee:	bf00      	nop
   13bf0:	000211ad 	.word	0x000211ad
   13bf4:	20006af8 	.word	0x20006af8

00013bf8 <remap_framefilter>:

uint16_t
remap_framefilter(uint16_t cfg_ff)
{
   13bf8:	4602      	mov	r2, r0
    uint16_t r=0;
    if (cfg_ff & UWB_FF_BEACON_EN) r|= DWT_FF_BEACON_EN;
   13bfa:	f010 0001 	ands.w	r0, r0, #1
   13bfe:	bf18      	it	ne
   13c00:	2004      	movne	r0, #4
    if (cfg_ff & UWB_FF_DATA_EN)   r|= DWT_FF_DATA_EN;
   13c02:	0793      	lsls	r3, r2, #30
   13c04:	bf48      	it	mi
   13c06:	f040 0008 	orrmi.w	r0, r0, #8
    if (cfg_ff & UWB_FF_ACK_EN)    r|= DWT_FF_ACK_EN;
   13c0a:	0751      	lsls	r1, r2, #29
   13c0c:	bf44      	itt	mi
   13c0e:	f040 0310 	orrmi.w	r3, r0, #16
   13c12:	b298      	uxthmi	r0, r3
    if (cfg_ff & UWB_FF_MAC_EN)    r|= DWT_FF_MAC_EN;
   13c14:	0713      	lsls	r3, r2, #28
   13c16:	bf44      	itt	mi
   13c18:	f040 0320 	orrmi.w	r3, r0, #32
   13c1c:	b298      	uxthmi	r0, r3
    if (cfg_ff & UWB_FF_RSVD_EN)   r|= DWT_FF_RSVD_EN;
   13c1e:	06d1      	lsls	r1, r2, #27
   13c20:	bf44      	itt	mi
   13c22:	f040 0340 	orrmi.w	r3, r0, #64	; 0x40
   13c26:	b298      	uxthmi	r0, r3
    if (cfg_ff & UWB_FF_COORD_EN)  r|= DWT_FF_COORD_EN;
   13c28:	05d3      	lsls	r3, r2, #23
   13c2a:	bf44      	itt	mi
   13c2c:	f040 0002 	orrmi.w	r0, r0, #2
   13c30:	b280      	uxthmi	r0, r0
    return r;
}
   13c32:	4770      	bx	lr

00013c34 <uwbcfg_commit_to_inst_dw1000>:
#endif

int
uwbcfg_commit_to_inst_dw1000(struct uwb_dev * inst, char cfg[CFGSTR_MAX][CFGSTR_STRLEN])
{
   13c34:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
#if MYNEWT_VAL(DW1000_DEVICE_0)
    uint8_t prf, coarse, fine, txpwr, paclen;

    /* Only proceed if this device is a dw1000 */
    if(inst->device_id != DWT_DEVICE_ID) {
   13c36:	f8d0 24c8 	ldr.w	r2, [r0, #1224]	; 0x4c8
   13c3a:	4b79      	ldr	r3, [pc, #484]	; (13e20 <uwbcfg_commit_to_inst_dw1000+0x1ec>)
   13c3c:	429a      	cmp	r2, r3
{
   13c3e:	4604      	mov	r4, r0
   13c40:	460d      	mov	r5, r1
    if(inst->device_id != DWT_DEVICE_ID) {
   13c42:	f040 80c6 	bne.w	13dd2 <uwbcfg_commit_to_inst_dw1000+0x19e>
        return 0;
    }

    /* Set the PRF */
    conf_value_from_str(cfg[CFGSTR_PRF], CONF_INT8, (void*)&prf, 0);
   13c46:	2300      	movs	r3, #0
   13c48:	aa03      	add	r2, sp, #12
   13c4a:	2102      	movs	r1, #2
   13c4c:	f105 0008 	add.w	r0, r5, #8
   13c50:	f7fd fb1e 	bl	11290 <conf_value_from_str>
    if (prf == 16) {
   13c54:	f89d 300c 	ldrb.w	r3, [sp, #12]
   13c58:	2b10      	cmp	r3, #16
   13c5a:	d11d      	bne.n	13c98 <uwbcfg_commit_to_inst_dw1000+0x64>
        inst->config.prf = DWT_PRF_16M;
   13c5c:	2301      	movs	r3, #1
    } else if (prf == 64) {
        inst->config.prf = DWT_PRF_64M;
   13c5e:	f884 350e 	strb.w	r3, [r4, #1294]	; 0x50e
    } else {
        UC_WARN("inv prf %d\n", prf);
    }

    /* Check that the rx and tx preamble codes are legal for the ch+prf combo */
    check_preamble_code(inst, &inst->config.rx.preambleCodeIndex);
   13c62:	f894 150e 	ldrb.w	r1, [r4, #1294]	; 0x50e
   13c66:	f894 050c 	ldrb.w	r0, [r4, #1292]	; 0x50c
   13c6a:	f204 5211 	addw	r2, r4, #1297	; 0x511
   13c6e:	f7ff ff79 	bl	13b64 <check_preamble_code.isra.0>
    check_preamble_code(inst, &inst->config.tx.preambleCodeIndex);
   13c72:	f894 150e 	ldrb.w	r1, [r4, #1294]	; 0x50e
   13c76:	f894 050c 	ldrb.w	r0, [r4, #1292]	; 0x50c
   13c7a:	f504 62a4 	add.w	r2, r4, #1312	; 0x520
   13c7e:	f7ff ff71 	bl	13b64 <check_preamble_code.isra.0>

    switch (inst->config.channel) {
   13c82:	f894 350c 	ldrb.w	r3, [r4, #1292]	; 0x50c
   13c86:	3b01      	subs	r3, #1
   13c88:	2b06      	cmp	r3, #6
   13c8a:	d840      	bhi.n	13d0e <uwbcfg_commit_to_inst_dw1000+0xda>
   13c8c:	e8df f003 	tbb	[pc, r3]
   13c90:	39373510 	.word	0x39373510
   13c94:	3f3d      	.short	0x3f3d
   13c96:	3b          	.byte	0x3b
   13c97:	00          	.byte	0x00
    } else if (prf == 64) {
   13c98:	2b40      	cmp	r3, #64	; 0x40
   13c9a:	d101      	bne.n	13ca0 <uwbcfg_commit_to_inst_dw1000+0x6c>
        inst->config.prf = DWT_PRF_64M;
   13c9c:	2302      	movs	r3, #2
   13c9e:	e7de      	b.n	13c5e <uwbcfg_commit_to_inst_dw1000+0x2a>
        UC_WARN("inv prf %d\n", prf);
   13ca0:	9300      	str	r3, [sp, #0]
   13ca2:	4860      	ldr	r0, [pc, #384]	; (13e24 <uwbcfg_commit_to_inst_dw1000+0x1f0>)
   13ca4:	4b60      	ldr	r3, [pc, #384]	; (13e28 <uwbcfg_commit_to_inst_dw1000+0x1f4>)
   13ca6:	2202      	movs	r2, #2
   13ca8:	215c      	movs	r1, #92	; 0x5c
   13caa:	f007 ff49 	bl	1bb40 <log_printf>
   13cae:	e7d8      	b.n	13c62 <uwbcfg_commit_to_inst_dw1000+0x2e>
    case (1): inst->config.txrf.PGdly = TC_PGDELAY_CH1;break;
   13cb0:	23c9      	movs	r3, #201	; 0xc9
    case (2): inst->config.txrf.PGdly = TC_PGDELAY_CH2;break;
   13cb2:	f884 3524 	strb.w	r3, [r4, #1316]	; 0x524
        UC_WARN("inv ch\n");
        break;
    }

    /* Data rate */
    if (!strcmp(cfg[CFGSTR_DATARATE], "6m8")) {
   13cb6:	f105 0610 	add.w	r6, r5, #16
   13cba:	495c      	ldr	r1, [pc, #368]	; (13e2c <uwbcfg_commit_to_inst_dw1000+0x1f8>)
   13cbc:	4630      	mov	r0, r6
   13cbe:	f7fc faff 	bl	102c0 <strcmp>
   13cc2:	bb58      	cbnz	r0, 13d1c <uwbcfg_commit_to_inst_dw1000+0xe8>
        inst->config.dataRate = DWT_BR_6M8;
   13cc4:	2302      	movs	r3, #2
    } else if (!strcmp(cfg[CFGSTR_DATARATE], "850k")) {
        inst->config.dataRate = DWT_BR_850K;
   13cc6:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
    } else {
        UC_WARN("inv datarate\n");
    }

    /* PAC length */
    conf_value_from_str(cfg[CFGSTR_RX_PACLEN], CONF_INT8, (void*)&paclen, 0);
   13cca:	2300      	movs	r3, #0
   13ccc:	f10d 020f 	add.w	r2, sp, #15
   13cd0:	2102      	movs	r1, #2
   13cd2:	f105 0018 	add.w	r0, r5, #24
   13cd6:	f7fd fadb 	bl	11290 <conf_value_from_str>
    switch (paclen) {
   13cda:	f89d 300f 	ldrb.w	r3, [sp, #15]
   13cde:	2b20      	cmp	r3, #32
   13ce0:	d065      	beq.n	13dae <uwbcfg_commit_to_inst_dw1000+0x17a>
   13ce2:	d831      	bhi.n	13d48 <uwbcfg_commit_to_inst_dw1000+0x114>
   13ce4:	2b08      	cmp	r3, #8
   13ce6:	d033      	beq.n	13d50 <uwbcfg_commit_to_inst_dw1000+0x11c>
   13ce8:	2b10      	cmp	r3, #16
   13cea:	d05e      	beq.n	13daa <uwbcfg_commit_to_inst_dw1000+0x176>
    case (8):  inst->config.rx.pacLength = DWT_PAC8;break;
    case (16): inst->config.rx.pacLength = DWT_PAC16;break;
    case (32): inst->config.rx.pacLength = DWT_PAC32;break;
    case (64): inst->config.rx.pacLength = DWT_PAC64;break;
    default:
        UC_WARN("inv paclen\n");
   13cec:	4b50      	ldr	r3, [pc, #320]	; (13e30 <uwbcfg_commit_to_inst_dw1000+0x1fc>)
   13cee:	484d      	ldr	r0, [pc, #308]	; (13e24 <uwbcfg_commit_to_inst_dw1000+0x1f0>)
   13cf0:	2202      	movs	r2, #2
   13cf2:	215c      	movs	r1, #92	; 0x5c
   13cf4:	f007 ff24 	bl	1bb40 <log_printf>
   13cf8:	e02d      	b.n	13d56 <uwbcfg_commit_to_inst_dw1000+0x122>
    case (2): inst->config.txrf.PGdly = TC_PGDELAY_CH2;break;
   13cfa:	23c2      	movs	r3, #194	; 0xc2
   13cfc:	e7d9      	b.n	13cb2 <uwbcfg_commit_to_inst_dw1000+0x7e>
    case (3): inst->config.txrf.PGdly = TC_PGDELAY_CH3;break;
   13cfe:	23c5      	movs	r3, #197	; 0xc5
   13d00:	e7d7      	b.n	13cb2 <uwbcfg_commit_to_inst_dw1000+0x7e>
    case (4): inst->config.txrf.PGdly = TC_PGDELAY_CH4;break;
   13d02:	2395      	movs	r3, #149	; 0x95
   13d04:	e7d5      	b.n	13cb2 <uwbcfg_commit_to_inst_dw1000+0x7e>
    case (7): inst->config.txrf.PGdly = TC_PGDELAY_CH7;break;
   13d06:	2393      	movs	r3, #147	; 0x93
   13d08:	e7d3      	b.n	13cb2 <uwbcfg_commit_to_inst_dw1000+0x7e>
    case (5): inst->config.txrf.PGdly = TC_PGDELAY_CH5;break;
   13d0a:	23c0      	movs	r3, #192	; 0xc0
   13d0c:	e7d1      	b.n	13cb2 <uwbcfg_commit_to_inst_dw1000+0x7e>
        UC_WARN("inv ch\n");
   13d0e:	4b49      	ldr	r3, [pc, #292]	; (13e34 <uwbcfg_commit_to_inst_dw1000+0x200>)
   13d10:	4844      	ldr	r0, [pc, #272]	; (13e24 <uwbcfg_commit_to_inst_dw1000+0x1f0>)
   13d12:	2202      	movs	r2, #2
   13d14:	215c      	movs	r1, #92	; 0x5c
   13d16:	f007 ff13 	bl	1bb40 <log_printf>
        break;
   13d1a:	e7cc      	b.n	13cb6 <uwbcfg_commit_to_inst_dw1000+0x82>
    } else if (!strcmp(cfg[CFGSTR_DATARATE], "850k")) {
   13d1c:	4946      	ldr	r1, [pc, #280]	; (13e38 <uwbcfg_commit_to_inst_dw1000+0x204>)
   13d1e:	4630      	mov	r0, r6
   13d20:	f7fc face 	bl	102c0 <strcmp>
   13d24:	b908      	cbnz	r0, 13d2a <uwbcfg_commit_to_inst_dw1000+0xf6>
        inst->config.dataRate = DWT_BR_850K;
   13d26:	2301      	movs	r3, #1
   13d28:	e7cd      	b.n	13cc6 <uwbcfg_commit_to_inst_dw1000+0x92>
    } else if (!strcmp(cfg[CFGSTR_DATARATE], "110k")) {
   13d2a:	4944      	ldr	r1, [pc, #272]	; (13e3c <uwbcfg_commit_to_inst_dw1000+0x208>)
   13d2c:	4630      	mov	r0, r6
   13d2e:	f7fc fac7 	bl	102c0 <strcmp>
   13d32:	b910      	cbnz	r0, 13d3a <uwbcfg_commit_to_inst_dw1000+0x106>
        inst->config.dataRate = DWT_BR_110K;
   13d34:	f884 050d 	strb.w	r0, [r4, #1293]	; 0x50d
   13d38:	e7c7      	b.n	13cca <uwbcfg_commit_to_inst_dw1000+0x96>
        UC_WARN("inv datarate\n");
   13d3a:	4b41      	ldr	r3, [pc, #260]	; (13e40 <uwbcfg_commit_to_inst_dw1000+0x20c>)
   13d3c:	4839      	ldr	r0, [pc, #228]	; (13e24 <uwbcfg_commit_to_inst_dw1000+0x1f0>)
   13d3e:	2202      	movs	r2, #2
   13d40:	215c      	movs	r1, #92	; 0x5c
   13d42:	f007 fefd 	bl	1bb40 <log_printf>
   13d46:	e7c0      	b.n	13cca <uwbcfg_commit_to_inst_dw1000+0x96>
    switch (paclen) {
   13d48:	2b40      	cmp	r3, #64	; 0x40
   13d4a:	d1cf      	bne.n	13cec <uwbcfg_commit_to_inst_dw1000+0xb8>
    case (64): inst->config.rx.pacLength = DWT_PAC64;break;
   13d4c:	2303      	movs	r3, #3
   13d4e:	e000      	b.n	13d52 <uwbcfg_commit_to_inst_dw1000+0x11e>
    case (8):  inst->config.rx.pacLength = DWT_PAC8;break;
   13d50:	2300      	movs	r3, #0
    case (16): inst->config.rx.pacLength = DWT_PAC16;break;
   13d52:	f884 3510 	strb.w	r3, [r4, #1296]	; 0x510
    }

    /* SFDType, only 0 or 1 allowed on dw1000 */
    if (inst->config.rx.sfdType>1) {
   13d56:	f894 3512 	ldrb.w	r3, [r4, #1298]	; 0x512
   13d5a:	2b01      	cmp	r3, #1
   13d5c:	d905      	bls.n	13d6a <uwbcfg_commit_to_inst_dw1000+0x136>
        UC_WARN("inv sfdType\n");
   13d5e:	4b39      	ldr	r3, [pc, #228]	; (13e44 <uwbcfg_commit_to_inst_dw1000+0x210>)
   13d60:	4830      	ldr	r0, [pc, #192]	; (13e24 <uwbcfg_commit_to_inst_dw1000+0x1f0>)
   13d62:	2202      	movs	r2, #2
   13d64:	215c      	movs	r1, #92	; 0x5c
   13d66:	f007 feeb 	bl	1bb40 <log_printf>
    }

    /* Tx Power */
    conf_value_from_str(cfg[CFGSTR_TXRF_PWR_COARSE], CONF_INT8, (void*)&coarse, 0);
   13d6a:	2300      	movs	r3, #0
   13d6c:	f10d 020d 	add.w	r2, sp, #13
   13d70:	2102      	movs	r1, #2
   13d72:	f105 0058 	add.w	r0, r5, #88	; 0x58
   13d76:	f7fd fa8b 	bl	11290 <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_TXRF_PWR_FINE], CONF_INT8, (void*)&fine, 0);
   13d7a:	2300      	movs	r3, #0
   13d7c:	f10d 020e 	add.w	r2, sp, #14
   13d80:	2102      	movs	r1, #2
   13d82:	f105 0060 	add.w	r0, r5, #96	; 0x60
   13d86:	f7fd fa83 	bl	11290 <conf_value_from_str>

    txpwr = inst->config.txrf.BOOSTNORM;
    switch (coarse) {
   13d8a:	f89d 300d 	ldrb.w	r3, [sp, #13]
   13d8e:	2b12      	cmp	r3, #18
   13d90:	d83c      	bhi.n	13e0c <uwbcfg_commit_to_inst_dw1000+0x1d8>
   13d92:	e8df f003 	tbb	[pc, r3]
   13d96:	3b37      	.short	0x3b37
   13d98:	3b3b333b 	.word	0x3b3b333b
   13d9c:	2a3b3b2e 	.word	0x2a3b3b2e
   13da0:	3b263b3b 	.word	0x3b263b3b
   13da4:	3b3b213b 	.word	0x3b3b213b
   13da8:	0e          	.byte	0x0e
   13da9:	00          	.byte	0x00
    case (16): inst->config.rx.pacLength = DWT_PAC16;break;
   13daa:	2301      	movs	r3, #1
   13dac:	e7d1      	b.n	13d52 <uwbcfg_commit_to_inst_dw1000+0x11e>
    case (32): inst->config.rx.pacLength = DWT_PAC32;break;
   13dae:	2302      	movs	r3, #2
   13db0:	e7cf      	b.n	13d52 <uwbcfg_commit_to_inst_dw1000+0x11e>
    case(18): txpwr = power_value(DW1000_txrf_config_18db, fine);break;
   13db2:	f89d 500e 	ldrb.w	r5, [sp, #14]
    inst->config.txrf.BOOSTP250 = txpwr;
    inst->config.txrf.BOOSTP125 = txpwr;

    /* Remap the uwb_mac style framefilter to something that
     * dw1000 understands */
    inst->config.rx.frameFilter = remap_framefilter(
   13db6:	f8b4 051c 	ldrh.w	r0, [r4, #1308]	; 0x51c
    inst->config.txrf.BOOSTNORM = txpwr;
   13dba:	f884 5528 	strb.w	r5, [r4, #1320]	; 0x528
    inst->config.txrf.BOOSTP500 = txpwr;
   13dbe:	f884 5529 	strb.w	r5, [r4, #1321]	; 0x529
    inst->config.txrf.BOOSTP250 = txpwr;
   13dc2:	f884 552a 	strb.w	r5, [r4, #1322]	; 0x52a
    inst->config.txrf.BOOSTP125 = txpwr;
   13dc6:	f884 552b 	strb.w	r5, [r4, #1323]	; 0x52b
    inst->config.rx.frameFilter = remap_framefilter(
   13dca:	f7ff ff15 	bl	13bf8 <remap_framefilter>
   13dce:	f8a4 051c 	strh.w	r0, [r4, #1308]	; 0x51c
        inst->config.rx.frameFilter);
#endif
    return 0;
}
   13dd2:	2000      	movs	r0, #0
   13dd4:	b004      	add	sp, #16
   13dd6:	bd70      	pop	{r4, r5, r6, pc}
    case(15): txpwr = power_value(DW1000_txrf_config_15db, fine);break;
   13dd8:	f89d 500e 	ldrb.w	r5, [sp, #14]
   13ddc:	3520      	adds	r5, #32
    case(12): txpwr = power_value(DW1000_txrf_config_12db, fine);break;
   13dde:	b2ed      	uxtb	r5, r5
   13de0:	e7e9      	b.n	13db6 <uwbcfg_commit_to_inst_dw1000+0x182>
   13de2:	f89d 500e 	ldrb.w	r5, [sp, #14]
   13de6:	3540      	adds	r5, #64	; 0x40
   13de8:	e7f9      	b.n	13dde <uwbcfg_commit_to_inst_dw1000+0x1aa>
    case(9):  txpwr = power_value(DW1000_txrf_config_9db, fine);break;
   13dea:	f89d 500e 	ldrb.w	r5, [sp, #14]
   13dee:	3560      	adds	r5, #96	; 0x60
   13df0:	e7f5      	b.n	13dde <uwbcfg_commit_to_inst_dw1000+0x1aa>
    case(6):  txpwr = power_value(DW1000_txrf_config_6db, fine);break;
   13df2:	f89d 500e 	ldrb.w	r5, [sp, #14]
   13df6:	f085 0580 	eor.w	r5, r5, #128	; 0x80
   13dfa:	e7dc      	b.n	13db6 <uwbcfg_commit_to_inst_dw1000+0x182>
        txpwr = power_value(DW1000_txrf_config_3db, fine);
   13dfc:	f89d 500e 	ldrb.w	r5, [sp, #14]
   13e00:	3d60      	subs	r5, #96	; 0x60
   13e02:	e7ec      	b.n	13dde <uwbcfg_commit_to_inst_dw1000+0x1aa>
        txpwr = power_value(DW1000_txrf_config_0db, fine);
   13e04:	f89d 500e 	ldrb.w	r5, [sp, #14]
   13e08:	3d40      	subs	r5, #64	; 0x40
   13e0a:	e7e8      	b.n	13dde <uwbcfg_commit_to_inst_dw1000+0x1aa>
        UC_WARN("inv coarse txpwr\n");
   13e0c:	4b0e      	ldr	r3, [pc, #56]	; (13e48 <uwbcfg_commit_to_inst_dw1000+0x214>)
   13e0e:	4805      	ldr	r0, [pc, #20]	; (13e24 <uwbcfg_commit_to_inst_dw1000+0x1f0>)
    txpwr = inst->config.txrf.BOOSTNORM;
   13e10:	f894 5528 	ldrb.w	r5, [r4, #1320]	; 0x528
        UC_WARN("inv coarse txpwr\n");
   13e14:	2202      	movs	r2, #2
   13e16:	215c      	movs	r1, #92	; 0x5c
   13e18:	f007 fe92 	bl	1bb40 <log_printf>
   13e1c:	e7cb      	b.n	13db6 <uwbcfg_commit_to_inst_dw1000+0x182>
   13e1e:	bf00      	nop
   13e20:	deca0130 	.word	0xdeca0130
   13e24:	20006af8 	.word	0x20006af8
   13e28:	000211c8 	.word	0x000211c8
   13e2c:	000210aa 	.word	0x000210aa
   13e30:	000211ea 	.word	0x000211ea
   13e34:	000211d4 	.word	0x000211d4
   13e38:	000210ae 	.word	0x000210ae
   13e3c:	000210b3 	.word	0x000210b3
   13e40:	000211dc 	.word	0x000211dc
   13e44:	000211f6 	.word	0x000211f6
   13e48:	00021203 	.word	0x00021203

00013e4c <strtod_soft>:
#include <inttypes.h>

#ifndef __KERNEL__

double strtod_soft( const char *nptr, char **endptr )
{
   13e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e50:	b087      	sub	sp, #28
    int i, n;
    char *period_at;
    char *dash_at;
    char *exponent_at;
    char *ep = 0;
   13e52:	2300      	movs	r3, #0
{
   13e54:	460e      	mov	r6, r1
    int64_t ival, frac, div, exp;
    double f, f_frac;

    period_at = strchr(nptr, '.');
   13e56:	212e      	movs	r1, #46	; 0x2e
{
   13e58:	4604      	mov	r4, r0
    char *ep = 0;
   13e5a:	9305      	str	r3, [sp, #20]
    period_at = strchr(nptr, '.');
   13e5c:	f005 fff3 	bl	19e46 <strchr>
    dash_at = strchr(nptr, '-');
   13e60:	212d      	movs	r1, #45	; 0x2d
    period_at = strchr(nptr, '.');
   13e62:	4607      	mov	r7, r0
    dash_at = strchr(nptr, '-');
   13e64:	4620      	mov	r0, r4
   13e66:	f005 ffee 	bl	19e46 <strchr>
    exponent_at = strchr(nptr, 'e');
   13e6a:	2165      	movs	r1, #101	; 0x65
    dash_at = strchr(nptr, '-');
   13e6c:	4683      	mov	fp, r0
    exponent_at = strchr(nptr, 'e');
   13e6e:	4620      	mov	r0, r4
   13e70:	f005 ffe9 	bl	19e46 <strchr>
    ival = strtoll(nptr, &ep, 10);
   13e74:	220a      	movs	r2, #10
    exponent_at = strchr(nptr, 'e');
   13e76:	4682      	mov	sl, r0
    ival = strtoll(nptr, &ep, 10);
   13e78:	a905      	add	r1, sp, #20
   13e7a:	4620      	mov	r0, r4
   13e7c:	f006 f831 	bl	19ee2 <strtoll>
   13e80:	9101      	str	r1, [sp, #4]
    f = (double)(ival);
   13e82:	f00a fc6b 	bl	1e75c <__aeabi_l2d>
   13e86:	4604      	mov	r4, r0
   13e88:	460d      	mov	r5, r1

    if (period_at == 0 || *(period_at+1) == 0) {
   13e8a:	b10f      	cbz	r7, 13e90 <strtod_soft+0x44>
   13e8c:	787b      	ldrb	r3, [r7, #1]
   13e8e:	b93b      	cbnz	r3, 13ea0 <strtod_soft+0x54>
        /* No period, or period at the very end, treat as integer */
        if (endptr) *endptr = ep;
   13e90:	b10e      	cbz	r6, 13e96 <strtod_soft+0x4a>
   13e92:	9b05      	ldr	r3, [sp, #20]
   13e94:	6033      	str	r3, [r6, #0]
        exp = 1;
        for (i = 0; i < n; i++) exp *= 10;
        f *= (double)exp;
    }
    return f;
}
   13e96:	ec45 4b10 	vmov	d0, r4, r5
   13e9a:	b007      	add	sp, #28
   13e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    frac = strtoll(period_at+1, &ep, 10);
   13ea0:	f107 0901 	add.w	r9, r7, #1
   13ea4:	220a      	movs	r2, #10
   13ea6:	a905      	add	r1, sp, #20
   13ea8:	4648      	mov	r0, r9
   13eaa:	f006 f81a 	bl	19ee2 <strtoll>
   13eae:	4680      	mov	r8, r0
    if (endptr == 0) n = strlen(period_at + 1);
   13eb0:	2e00      	cmp	r6, #0
   13eb2:	d157      	bne.n	13f64 <strtod_soft+0x118>
   13eb4:	4648      	mov	r0, r9
   13eb6:	9102      	str	r1, [sp, #8]
   13eb8:	f005 ffda 	bl	19e70 <strlen>
   13ebc:	9902      	ldr	r1, [sp, #8]
   13ebe:	4684      	mov	ip, r0
    div = 1;
   13ec0:	2300      	movs	r3, #0
   13ec2:	2201      	movs	r2, #1
    for (i = 0; i < n; i++) div *= 10;
   13ec4:	4618      	mov	r0, r3
   13ec6:	f04f 0e0a 	mov.w	lr, #10
   13eca:	4560      	cmp	r0, ip
   13ecc:	db4f      	blt.n	13f6e <strtod_soft+0x122>
    f_frac = (double)frac / (double)div;
   13ece:	4640      	mov	r0, r8
   13ed0:	e9cd 2302 	strd	r2, r3, [sp, #8]
   13ed4:	f00a fc42 	bl	1e75c <__aeabi_l2d>
   13ed8:	9a02      	ldr	r2, [sp, #8]
   13eda:	9b03      	ldr	r3, [sp, #12]
   13edc:	4680      	mov	r8, r0
   13ede:	4689      	mov	r9, r1
   13ee0:	4610      	mov	r0, r2
   13ee2:	4619      	mov	r1, r3
   13ee4:	f00a fc3a 	bl	1e75c <__aeabi_l2d>
   13ee8:	4602      	mov	r2, r0
   13eea:	460b      	mov	r3, r1
   13eec:	4640      	mov	r0, r8
   13eee:	4649      	mov	r1, r9
   13ef0:	f00a fd8c 	bl	1ea0c <__aeabi_ddiv>
   13ef4:	460b      	mov	r3, r1
    if (ival < 0 || (dash_at != 0 && dash_at < period_at)) {
   13ef6:	9901      	ldr	r1, [sp, #4]
   13ef8:	2900      	cmp	r1, #0
    f_frac = (double)frac / (double)div;
   13efa:	4602      	mov	r2, r0
    if (ival < 0 || (dash_at != 0 && dash_at < period_at)) {
   13efc:	db04      	blt.n	13f08 <strtod_soft+0xbc>
   13efe:	f1bb 0f00 	cmp.w	fp, #0
   13f02:	d03b      	beq.n	13f7c <strtod_soft+0x130>
   13f04:	455f      	cmp	r7, fp
   13f06:	d939      	bls.n	13f7c <strtod_soft+0x130>
        f -= f_frac;
   13f08:	4620      	mov	r0, r4
   13f0a:	4629      	mov	r1, r5
   13f0c:	f00a fa9c 	bl	1e448 <__aeabi_dsub>
        f += f_frac;
   13f10:	4604      	mov	r4, r0
   13f12:	460d      	mov	r5, r1
    if (endptr) *endptr = ep;
   13f14:	b10e      	cbz	r6, 13f1a <strtod_soft+0xce>
   13f16:	9b05      	ldr	r3, [sp, #20]
   13f18:	6033      	str	r3, [r6, #0]
    if (exponent_at == 0 || *(exponent_at+1) == 0|| ep == 0 || exponent_at != ep) {
   13f1a:	f1ba 0f00 	cmp.w	sl, #0
   13f1e:	d0ba      	beq.n	13e96 <strtod_soft+0x4a>
   13f20:	f89a 3001 	ldrb.w	r3, [sl, #1]
   13f24:	2b00      	cmp	r3, #0
   13f26:	d0b6      	beq.n	13e96 <strtod_soft+0x4a>
   13f28:	9b05      	ldr	r3, [sp, #20]
   13f2a:	2b00      	cmp	r3, #0
   13f2c:	d0b3      	beq.n	13e96 <strtod_soft+0x4a>
   13f2e:	4553      	cmp	r3, sl
   13f30:	d1b1      	bne.n	13e96 <strtod_soft+0x4a>
    n = strtoll(exponent_at+1, &ep, 10);
   13f32:	220a      	movs	r2, #10
   13f34:	a905      	add	r1, sp, #20
   13f36:	f10a 0001 	add.w	r0, sl, #1
   13f3a:	f005 ffd2 	bl	19ee2 <strtoll>
    if (n < 0) {
   13f3e:	1e03      	subs	r3, r0, #0
   13f40:	dba9      	blt.n	13e96 <strtod_soft+0x4a>
        exp = 1;
   13f42:	2100      	movs	r1, #0
   13f44:	2001      	movs	r0, #1
        for (i = 0; i < n; i++) exp *= 10;
   13f46:	460a      	mov	r2, r1
   13f48:	260a      	movs	r6, #10
   13f4a:	429a      	cmp	r2, r3
   13f4c:	d11b      	bne.n	13f86 <strtod_soft+0x13a>
        f *= (double)exp;
   13f4e:	f00a fc05 	bl	1e75c <__aeabi_l2d>
   13f52:	4602      	mov	r2, r0
   13f54:	460b      	mov	r3, r1
   13f56:	4620      	mov	r0, r4
   13f58:	4629      	mov	r1, r5
   13f5a:	f00a fc2d 	bl	1e7b8 <__aeabi_dmul>
   13f5e:	4604      	mov	r4, r0
   13f60:	460d      	mov	r5, r1
   13f62:	e798      	b.n	13e96 <strtod_soft+0x4a>
    else n = *endptr - period_at + 1;
   13f64:	6830      	ldr	r0, [r6, #0]
   13f66:	1bc0      	subs	r0, r0, r7
   13f68:	f100 0c01 	add.w	ip, r0, #1
   13f6c:	e7a8      	b.n	13ec0 <strtod_soft+0x74>
    for (i = 0; i < n; i++) div *= 10;
   13f6e:	fb0e f903 	mul.w	r9, lr, r3
   13f72:	fba2 230e 	umull	r2, r3, r2, lr
   13f76:	444b      	add	r3, r9
   13f78:	3001      	adds	r0, #1
   13f7a:	e7a6      	b.n	13eca <strtod_soft+0x7e>
        f += f_frac;
   13f7c:	4620      	mov	r0, r4
   13f7e:	4629      	mov	r1, r5
   13f80:	f00a fa64 	bl	1e44c <__adddf3>
   13f84:	e7c4      	b.n	13f10 <strtod_soft+0xc4>
        for (i = 0; i < n; i++) exp *= 10;
   13f86:	fb06 f701 	mul.w	r7, r6, r1
   13f8a:	fba0 0106 	umull	r0, r1, r0, r6
   13f8e:	4439      	add	r1, r7
   13f90:	3201      	adds	r2, #1
   13f92:	e7da      	b.n	13f4a <strtod_soft+0xfe>

00013f94 <parse_number>:
parse_number(const char *str, int digits, int *val)
{
    const char *cp;
    const char *end;

    *val = 0;
   13f94:	2300      	movs	r3, #0
{
   13f96:	b530      	push	{r4, r5, lr}
    *val = 0;
   13f98:	6013      	str	r3, [r2, #0]
    cp = str;
    end = str + digits;
   13f9a:	4401      	add	r1, r0
    while (cp < end) {
        if (!isdigit((int) *cp)) {
            return (NULL);
        }
        *val *= 10;
   13f9c:	250a      	movs	r5, #10
    while (cp < end) {
   13f9e:	4288      	cmp	r0, r1
   13fa0:	d301      	bcc.n	13fa6 <parse_number+0x12>
        *val += (*cp - '0');
        cp++;
    }
    return (end);
}
   13fa2:	4608      	mov	r0, r1
   13fa4:	bd30      	pop	{r4, r5, pc}
        if (!isdigit((int) *cp)) {
   13fa6:	7803      	ldrb	r3, [r0, #0]
   13fa8:	3b30      	subs	r3, #48	; 0x30
   13faa:	2b09      	cmp	r3, #9
   13fac:	d809      	bhi.n	13fc2 <parse_number+0x2e>
        *val *= 10;
   13fae:	6813      	ldr	r3, [r2, #0]
   13fb0:	fb05 f403 	mul.w	r4, r5, r3
   13fb4:	6014      	str	r4, [r2, #0]
        *val += (*cp - '0');
   13fb6:	f810 3b01 	ldrb.w	r3, [r0], #1
   13fba:	3b30      	subs	r3, #48	; 0x30
   13fbc:	4423      	add	r3, r4
   13fbe:	6013      	str	r3, [r2, #0]
        cp++;
   13fc0:	e7ed      	b.n	13f9e <parse_number+0xa>
            return (NULL);
   13fc2:	2100      	movs	r1, #0
   13fc4:	e7ed      	b.n	13fa2 <parse_number+0xe>

00013fc6 <leapyear>:
    if ((year & 3) == 0) {
   13fc6:	0783      	lsls	r3, r0, #30
   13fc8:	d10f      	bne.n	13fea <leapyear+0x24>
        if ((year % 100) == 0) {
   13fca:	2264      	movs	r2, #100	; 0x64
   13fcc:	fb90 f3f2 	sdiv	r3, r0, r2
   13fd0:	fb02 0313 	mls	r3, r2, r3, r0
   13fd4:	b95b      	cbnz	r3, 13fee <leapyear+0x28>
            if ((year % 400) == 0)
   13fd6:	f44f 73c8 	mov.w	r3, #400	; 0x190
   13fda:	fb90 f2f3 	sdiv	r2, r0, r3
   13fde:	fb03 0012 	mls	r0, r3, r2, r0
   13fe2:	fab0 f080 	clz	r0, r0
   13fe6:	0940      	lsrs	r0, r0, #5
   13fe8:	4770      	bx	lr
    int rv = 0;
   13fea:	2000      	movs	r0, #0
   13fec:	4770      	bx	lr
        rv = 1;
   13fee:	2001      	movs	r0, #1
}
   13ff0:	4770      	bx	lr
	...

00013ff4 <clocktime_to_timeval>:
{
   13ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    year = ct->year;
   13ff8:	6805      	ldr	r5, [r0, #0]
{
   13ffa:	4616      	mov	r6, r2
    if (year < POSIX_BASE_YEAR ||
   13ffc:	f240 72b1 	movw	r2, #1969	; 0x7b1
   14000:	4295      	cmp	r5, r2
{
   14002:	b085      	sub	sp, #20
   14004:	4607      	mov	r7, r0
    if (year < POSIX_BASE_YEAR ||
   14006:	f340 8085 	ble.w	14114 <clocktime_to_timeval+0x120>
        ct->mon < 1 || ct->mon > 12 ||
   1400a:	f8d0 b004 	ldr.w	fp, [r0, #4]
    if (year < POSIX_BASE_YEAR ||
   1400e:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
   14012:	2a0b      	cmp	r2, #11
   14014:	d87e      	bhi.n	14114 <clocktime_to_timeval+0x120>
        ct->day < 1 || ct->day > days_in_month(year, ct->mon) ||
   14016:	6883      	ldr	r3, [r0, #8]
   14018:	9300      	str	r3, [sp, #0]
        ct->mon < 1 || ct->mon > 12 ||
   1401a:	2b00      	cmp	r3, #0
   1401c:	dd7a      	ble.n	14114 <clocktime_to_timeval+0x120>
        ct->day < 1 || ct->day > days_in_month(year, ct->mon) ||
   1401e:	483f      	ldr	r0, [pc, #252]	; (1411c <clocktime_to_timeval+0x128>)
   14020:	f1bb 0f02 	cmp.w	fp, #2
   14024:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   14028:	d151      	bne.n	140ce <clocktime_to_timeval+0xda>
   1402a:	4628      	mov	r0, r5
   1402c:	f7ff ffcb 	bl	13fc6 <leapyear>
   14030:	9b00      	ldr	r3, [sp, #0]
   14032:	4420      	add	r0, r4
   14034:	4283      	cmp	r3, r0
   14036:	dc6d      	bgt.n	14114 <clocktime_to_timeval+0x120>
        ct->hour < 0 || ct->hour > 23 ||
   14038:	68fc      	ldr	r4, [r7, #12]
   1403a:	2c17      	cmp	r4, #23
   1403c:	d86a      	bhi.n	14114 <clocktime_to_timeval+0x120>
        ct->min < 0 || ct->min > 59 ||
   1403e:	f8d7 9010 	ldr.w	r9, [r7, #16]
   14042:	f1b9 0f3b 	cmp.w	r9, #59	; 0x3b
   14046:	d865      	bhi.n	14114 <clocktime_to_timeval+0x120>
        ct->sec < 0 || ct->sec > 59 ||
   14048:	f8d7 8014 	ldr.w	r8, [r7, #20]
   1404c:	f1b8 0f3b 	cmp.w	r8, #59	; 0x3b
   14050:	d860      	bhi.n	14114 <clocktime_to_timeval+0x120>
        ct->usec < 0 || ct->usec > 999999) {
   14052:	69fb      	ldr	r3, [r7, #28]
   14054:	4a32      	ldr	r2, [pc, #200]	; (14120 <clocktime_to_timeval+0x12c>)
   14056:	9301      	str	r3, [sp, #4]
   14058:	4293      	cmp	r3, r2
   1405a:	d85b      	bhi.n	14114 <clocktime_to_timeval+0x120>
    days = 0;
   1405c:	2700      	movs	r7, #0
    for (i = POSIX_BASE_YEAR; i < year; i++)
   1405e:	f240 7ab2 	movw	sl, #1970	; 0x7b2
   14062:	45aa      	cmp	sl, r5
   14064:	d135      	bne.n	140d2 <clocktime_to_timeval+0xde>
   14066:	4a2d      	ldr	r2, [pc, #180]	; (1411c <clocktime_to_timeval+0x128>)
    for (i = 1; i < ct->mon; i++)
   14068:	f04f 0a01 	mov.w	sl, #1
   1406c:	45d3      	cmp	fp, sl
   1406e:	d13e      	bne.n	140ee <clocktime_to_timeval+0xfa>
    days += (ct->day - 1);
   14070:	9b00      	ldr	r3, [sp, #0]
   14072:	1e5d      	subs	r5, r3, #1
   14074:	442f      	add	r7, r5
    tv->tv_sec = (((int64_t)days * 24 + ct->hour) * 60 + ct->min) * 60 +
   14076:	2318      	movs	r3, #24
   14078:	17e0      	asrs	r0, r4, #31
   1407a:	223c      	movs	r2, #60	; 0x3c
   1407c:	fbc7 4003 	smlal	r4, r0, r7, r3
   14080:	fba4 3402 	umull	r3, r4, r4, r2
   14084:	eb13 0309 	adds.w	r3, r3, r9
   14088:	fb02 4400 	mla	r4, r2, r0, r4
   1408c:	eb44 79e9 	adc.w	r9, r4, r9, asr #31
   14090:	fba3 3402 	umull	r3, r4, r3, r2
   14094:	fb02 4909 	mla	r9, r2, r9, r4
   14098:	eb13 0408 	adds.w	r4, r3, r8
   1409c:	eb49 75e8 	adc.w	r5, r9, r8, asr #31
    tv->tv_usec = ct->usec;
   140a0:	9b01      	ldr	r3, [sp, #4]
   140a2:	60b3      	str	r3, [r6, #8]
    tv->tv_sec = (((int64_t)days * 24 + ct->hour) * 60 + ct->min) * 60 +
   140a4:	e9c6 4500 	strd	r4, r5, [r6]
    if (tz != NULL) {
   140a8:	b3b1      	cbz	r1, 14118 <clocktime_to_timeval+0x124>
	tv->tv_sec += tz->tz_minuteswest * 60;
   140aa:	880b      	ldrh	r3, [r1, #0]
   140ac:	fbc3 4582 	smlalbb	r4, r5, r3, r2
	tv->tv_sec -= tz->tz_dsttime ? 3600 : 0;
   140b0:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
   140b4:	2b00      	cmp	r3, #0
   140b6:	bf18      	it	ne
   140b8:	f44f 6361 	movne.w	r3, #3600	; 0xe10
   140bc:	1ae3      	subs	r3, r4, r3
   140be:	f165 0200 	sbc.w	r2, r5, #0
   140c2:	e9c6 3200 	strd	r3, r2, [r6]
    return (0);
   140c6:	2000      	movs	r0, #0
}
   140c8:	b005      	add	sp, #20
   140ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ct->day < 1 || ct->day > days_in_month(year, ct->mon) ||
   140ce:	2000      	movs	r0, #0
   140d0:	e7ae      	b.n	14030 <clocktime_to_timeval+0x3c>
        days += days_in_year(i);
   140d2:	4650      	mov	r0, sl
   140d4:	f7ff ff77 	bl	13fc6 <leapyear>
   140d8:	f240 126d 	movw	r2, #365	; 0x16d
   140dc:	2800      	cmp	r0, #0
   140de:	bf14      	ite	ne
   140e0:	f44f 70b7 	movne.w	r0, #366	; 0x16e
   140e4:	4610      	moveq	r0, r2
   140e6:	4407      	add	r7, r0
    for (i = POSIX_BASE_YEAR; i < year; i++)
   140e8:	f10a 0a01 	add.w	sl, sl, #1
   140ec:	e7b9      	b.n	14062 <clocktime_to_timeval+0x6e>
          days += days_in_month(year, i);
   140ee:	f852 3b04 	ldr.w	r3, [r2], #4
   140f2:	9302      	str	r3, [sp, #8]
   140f4:	f1ba 0f02 	cmp.w	sl, #2
   140f8:	d10a      	bne.n	14110 <clocktime_to_timeval+0x11c>
   140fa:	4628      	mov	r0, r5
   140fc:	9203      	str	r2, [sp, #12]
   140fe:	f7ff ff62 	bl	13fc6 <leapyear>
   14102:	9a03      	ldr	r2, [sp, #12]
   14104:	9b02      	ldr	r3, [sp, #8]
   14106:	4403      	add	r3, r0
   14108:	441f      	add	r7, r3
    for (i = 1; i < ct->mon; i++)
   1410a:	f10a 0a01 	add.w	sl, sl, #1
   1410e:	e7ad      	b.n	1406c <clocktime_to_timeval+0x78>
          days += days_in_month(year, i);
   14110:	2000      	movs	r0, #0
   14112:	e7f7      	b.n	14104 <clocktime_to_timeval+0x110>
        return (OS_EINVAL);
   14114:	2002      	movs	r0, #2
   14116:	e7d7      	b.n	140c8 <clocktime_to_timeval+0xd4>
    return (0);
   14118:	4608      	mov	r0, r1
   1411a:	e7d5      	b.n	140c8 <clocktime_to_timeval+0xd4>
   1411c:	00021244 	.word	0x00021244
   14120:	000f423f 	.word	0x000f423f

00014124 <timeval_to_clocktime>:
{
   14124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    secs = tv->tv_sec;
   14128:	e9d0 5700 	ldrd	r5, r7, [r0]
{
   1412c:	4616      	mov	r6, r2
    if (tz != NULL) {
   1412e:	b181      	cbz	r1, 14152 <timeval_to_clocktime+0x2e>
        secs -= tz->tz_minuteswest * 60;
   14130:	f9b1 3000 	ldrsh.w	r3, [r1]
   14134:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   14138:	009a      	lsls	r2, r3, #2
   1413a:	1aaa      	subs	r2, r5, r2
        secs += tz->tz_dsttime ? 3600 : 0;
   1413c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
        secs -= tz->tz_minuteswest * 60;
   14140:	eb67 73e3 	sbc.w	r3, r7, r3, asr #31
        secs += tz->tz_dsttime ? 3600 : 0;
   14144:	2d00      	cmp	r5, #0
   14146:	bf18      	it	ne
   14148:	f44f 6561 	movne.w	r5, #3600	; 0xe10
   1414c:	18ad      	adds	r5, r5, r2
   1414e:	f143 0700 	adc.w	r7, r3, #0
    if (secs < 0 || tv->tv_usec < 0 || tv->tv_usec > 999999) {
   14152:	2f00      	cmp	r7, #0
   14154:	db62      	blt.n	1421c <timeval_to_clocktime+0xf8>
   14156:	f8d0 8008 	ldr.w	r8, [r0, #8]
   1415a:	4b31      	ldr	r3, [pc, #196]	; (14220 <timeval_to_clocktime+0xfc>)
   1415c:	4598      	cmp	r8, r3
   1415e:	d85d      	bhi.n	1421c <timeval_to_clocktime+0xf8>
    days = secs / SECDAY;
   14160:	4a30      	ldr	r2, [pc, #192]	; (14224 <timeval_to_clocktime+0x100>)
   14162:	2300      	movs	r3, #0
   14164:	4628      	mov	r0, r5
   14166:	4639      	mov	r1, r7
   14168:	f00a fe6e 	bl	1ee48 <__aeabi_ldivmod>
    rsec = secs % SECDAY;
   1416c:	4639      	mov	r1, r7
    days = secs / SECDAY;
   1416e:	4604      	mov	r4, r0
    rsec = secs % SECDAY;
   14170:	4a2c      	ldr	r2, [pc, #176]	; (14224 <timeval_to_clocktime+0x100>)
   14172:	4628      	mov	r0, r5
   14174:	2300      	movs	r3, #0
   14176:	f00a fe67 	bl	1ee48 <__aeabi_ldivmod>
    ct->dow = day_of_week(days);
   1417a:	2507      	movs	r5, #7
    rsec = secs % SECDAY;
   1417c:	461f      	mov	r7, r3
    ct->dow = day_of_week(days);
   1417e:	1d23      	adds	r3, r4, #4
   14180:	fb93 f5f5 	sdiv	r5, r3, r5
   14184:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   14188:	1b5d      	subs	r5, r3, r5
   1418a:	61b5      	str	r5, [r6, #24]
    rsec = secs % SECDAY;
   1418c:	4691      	mov	r9, r2
    for (year = POSIX_BASE_YEAR; days >= days_in_year(year); year++)
   1418e:	f240 71b2 	movw	r1, #1970	; 0x7b2
   14192:	f240 156d 	movw	r5, #365	; 0x16d
   14196:	4608      	mov	r0, r1
   14198:	f7ff ff15 	bl	13fc6 <leapyear>
   1419c:	2800      	cmp	r0, #0
   1419e:	bf14      	ite	ne
   141a0:	f44f 73b7 	movne.w	r3, #366	; 0x16e
   141a4:	462b      	moveq	r3, r5
   141a6:	429c      	cmp	r4, r3
   141a8:	da32      	bge.n	14210 <timeval_to_clocktime+0xec>
    ct->year = year;
   141aa:	6031      	str	r1, [r6, #0]
    for (i = 1; days >= days_in_month(year, i); i++)
   141ac:	491e      	ldr	r1, [pc, #120]	; (14228 <timeval_to_clocktime+0x104>)
   141ae:	2301      	movs	r3, #1
    for (year = POSIX_BASE_YEAR; days >= days_in_year(year); year++)
   141b0:	2b02      	cmp	r3, #2
    for (i = 1; days >= days_in_month(year, i); i++)
   141b2:	f851 2b04 	ldr.w	r2, [r1], #4
    for (year = POSIX_BASE_YEAR; days >= days_in_year(year); year++)
   141b6:	bf0c      	ite	eq
   141b8:	4605      	moveq	r5, r0
   141ba:	2500      	movne	r5, #0
    for (i = 1; days >= days_in_month(year, i); i++)
   141bc:	442a      	add	r2, r5
   141be:	42a2      	cmp	r2, r4
   141c0:	dd29      	ble.n	14216 <timeval_to_clocktime+0xf2>
    ct->day = days + 1;
   141c2:	3401      	adds	r4, #1
    ct->mon = i;
   141c4:	6073      	str	r3, [r6, #4]
    ct->day = days + 1;
   141c6:	60b4      	str	r4, [r6, #8]
    ct->hour = rsec / 3600;
   141c8:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   141cc:	2300      	movs	r3, #0
   141ce:	4648      	mov	r0, r9
   141d0:	4639      	mov	r1, r7
   141d2:	f00a fe39 	bl	1ee48 <__aeabi_ldivmod>
    rsec = rsec % 3600;
   141d6:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    ct->hour = rsec / 3600;
   141da:	60f0      	str	r0, [r6, #12]
    rsec = rsec % 3600;
   141dc:	2300      	movs	r3, #0
   141de:	4648      	mov	r0, r9
   141e0:	4639      	mov	r1, r7
   141e2:	f00a fe31 	bl	1ee48 <__aeabi_ldivmod>
   141e6:	4615      	mov	r5, r2
   141e8:	461c      	mov	r4, r3
    ct->min  = rsec / 60;
   141ea:	223c      	movs	r2, #60	; 0x3c
   141ec:	2300      	movs	r3, #0
   141ee:	4628      	mov	r0, r5
   141f0:	4621      	mov	r1, r4
   141f2:	f00a fe29 	bl	1ee48 <__aeabi_ldivmod>
    rsec = rsec % 60;
   141f6:	223c      	movs	r2, #60	; 0x3c
    ct->min  = rsec / 60;
   141f8:	6130      	str	r0, [r6, #16]
    rsec = rsec % 60;
   141fa:	2300      	movs	r3, #0
   141fc:	4628      	mov	r0, r5
   141fe:	4621      	mov	r1, r4
   14200:	f00a fe22 	bl	1ee48 <__aeabi_ldivmod>
    ct->usec = tv->tv_usec;
   14204:	f8c6 801c 	str.w	r8, [r6, #28]
    ct->sec  = rsec;
   14208:	6172      	str	r2, [r6, #20]
    return (0);
   1420a:	2000      	movs	r0, #0
}
   1420c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        days -= days_in_year(year);
   14210:	1ae4      	subs	r4, r4, r3
    for (year = POSIX_BASE_YEAR; days >= days_in_year(year); year++)
   14212:	3101      	adds	r1, #1
   14214:	e7bf      	b.n	14196 <timeval_to_clocktime+0x72>
        days -= days_in_month(year, i);
   14216:	1aa4      	subs	r4, r4, r2
    for (i = 1; days >= days_in_month(year, i); i++)
   14218:	3301      	adds	r3, #1
   1421a:	e7c9      	b.n	141b0 <timeval_to_clocktime+0x8c>
        return (OS_EINVAL);
   1421c:	2002      	movs	r0, #2
   1421e:	e7f5      	b.n	1420c <timeval_to_clocktime+0xe8>
   14220:	000f423f 	.word	0x000f423f
   14224:	00015180 	.word	0x00015180
   14228:	00021244 	.word	0x00021244

0001422c <datetime_parse>:
 * 2016-03-02T22:44:00.1                fractional seconds
 * 2016-03-02T22:44:00.101+05:30        fractional seconds with timezone
 */
int
datetime_parse(const char *input, struct os_timeval *tv, struct os_timezone *tz)
{
   1422c:	b570      	push	{r4, r5, r6, lr}
   1422e:	b08a      	sub	sp, #40	; 0x28
   14230:	4604      	mov	r4, r0
   14232:	460e      	mov	r6, r1
   14234:	4615      	mov	r5, r2
    int off_hour, off_min;
    const char *cp;
    const char *ep;
    struct clocktime ct;

    bzero(&ct, sizeof(struct clocktime));
   14236:	2100      	movs	r1, #0
   14238:	2220      	movs	r2, #32
   1423a:	a802      	add	r0, sp, #8
   1423c:	f7fc f825 	bl	1028a <memset>
    bzero(tv, sizeof(struct os_timeval));
   14240:	2210      	movs	r2, #16
   14242:	2100      	movs	r1, #0
   14244:	4630      	mov	r0, r6
   14246:	f7fc f820 	bl	1028a <memset>
    bzero(tz, sizeof(struct os_timezone));      /* default to UTC time */
   1424a:	2300      	movs	r3, #0
   1424c:	602b      	str	r3, [r5, #0]

    cp = input;
    cp = parse_number(cp, 4, &ct.year);
   1424e:	aa02      	add	r2, sp, #8
   14250:	2104      	movs	r1, #4
   14252:	4620      	mov	r0, r4
   14254:	f7ff fe9e 	bl	13f94 <parse_number>
    if (cp == NULL || *cp != '-') {
   14258:	b918      	cbnz	r0, 14262 <datetime_parse+0x36>
        goto err;
    }

    return (0);
err:
    return (-1);
   1425a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1425e:	b00a      	add	sp, #40	; 0x28
   14260:	bd70      	pop	{r4, r5, r6, pc}
    if (cp == NULL || *cp != '-') {
   14262:	7803      	ldrb	r3, [r0, #0]
   14264:	2b2d      	cmp	r3, #45	; 0x2d
   14266:	d1f8      	bne.n	1425a <datetime_parse+0x2e>
    cp = parse_number(cp + 1, 2, &ct.mon);
   14268:	aa03      	add	r2, sp, #12
   1426a:	2102      	movs	r1, #2
   1426c:	3001      	adds	r0, #1
   1426e:	f7ff fe91 	bl	13f94 <parse_number>
    if (cp == NULL || *cp != '-') {
   14272:	2800      	cmp	r0, #0
   14274:	d0f1      	beq.n	1425a <datetime_parse+0x2e>
   14276:	7803      	ldrb	r3, [r0, #0]
   14278:	2b2d      	cmp	r3, #45	; 0x2d
   1427a:	d1ee      	bne.n	1425a <datetime_parse+0x2e>
    cp = parse_number(cp + 1, 2, &ct.day);
   1427c:	aa04      	add	r2, sp, #16
   1427e:	2102      	movs	r1, #2
   14280:	3001      	adds	r0, #1
   14282:	f7ff fe87 	bl	13f94 <parse_number>
    if (cp == NULL || *cp != 'T') {
   14286:	2800      	cmp	r0, #0
   14288:	d0e7      	beq.n	1425a <datetime_parse+0x2e>
   1428a:	7803      	ldrb	r3, [r0, #0]
   1428c:	2b54      	cmp	r3, #84	; 0x54
   1428e:	d1e4      	bne.n	1425a <datetime_parse+0x2e>
    cp = parse_number(cp + 1, 2, &ct.hour);
   14290:	aa05      	add	r2, sp, #20
   14292:	2102      	movs	r1, #2
   14294:	3001      	adds	r0, #1
   14296:	f7ff fe7d 	bl	13f94 <parse_number>
    if (cp == NULL || *cp != ':') {
   1429a:	2800      	cmp	r0, #0
   1429c:	d0dd      	beq.n	1425a <datetime_parse+0x2e>
   1429e:	7803      	ldrb	r3, [r0, #0]
   142a0:	2b3a      	cmp	r3, #58	; 0x3a
   142a2:	d1da      	bne.n	1425a <datetime_parse+0x2e>
    cp = parse_number(cp + 1, 2, &ct.min);
   142a4:	aa06      	add	r2, sp, #24
   142a6:	2102      	movs	r1, #2
   142a8:	3001      	adds	r0, #1
   142aa:	f7ff fe73 	bl	13f94 <parse_number>
    if (cp == NULL || *cp != ':') {
   142ae:	2800      	cmp	r0, #0
   142b0:	d0d3      	beq.n	1425a <datetime_parse+0x2e>
   142b2:	7803      	ldrb	r3, [r0, #0]
   142b4:	2b3a      	cmp	r3, #58	; 0x3a
   142b6:	d1d0      	bne.n	1425a <datetime_parse+0x2e>
    cp = parse_number(cp + 1, 2, &ct.sec);
   142b8:	aa07      	add	r2, sp, #28
   142ba:	2102      	movs	r1, #2
   142bc:	3001      	adds	r0, #1
   142be:	f7ff fe69 	bl	13f94 <parse_number>
    if (cp == NULL) {
   142c2:	2800      	cmp	r0, #0
   142c4:	d0c9      	beq.n	1425a <datetime_parse+0x2e>
    if (*cp == '.') {
   142c6:	7803      	ldrb	r3, [r0, #0]
   142c8:	2b2e      	cmp	r3, #46	; 0x2e
   142ca:	d119      	bne.n	14300 <datetime_parse+0xd4>
        ep = ++cp;
   142cc:	3001      	adds	r0, #1
        while (isdigit((int) *ep)) {
   142ce:	4602      	mov	r2, r0
   142d0:	4614      	mov	r4, r2
   142d2:	3201      	adds	r2, #1
   142d4:	7823      	ldrb	r3, [r4, #0]
   142d6:	3b30      	subs	r3, #48	; 0x30
   142d8:	2b09      	cmp	r3, #9
   142da:	d9f9      	bls.n	142d0 <datetime_parse+0xa4>
        digits = ep - cp;
   142dc:	1a24      	subs	r4, r4, r0
        if (digits <= 0 || digits > 6) {
   142de:	1e63      	subs	r3, r4, #1
   142e0:	2b05      	cmp	r3, #5
   142e2:	d8ba      	bhi.n	1425a <datetime_parse+0x2e>
        cp = parse_number(cp, digits, &ct.usec);
   142e4:	aa09      	add	r2, sp, #36	; 0x24
   142e6:	4621      	mov	r1, r4
   142e8:	f7ff fe54 	bl	13f94 <parse_number>
        if (cp == NULL) {
   142ec:	2800      	cmp	r0, #0
   142ee:	d0b4      	beq.n	1425a <datetime_parse+0x2e>
   142f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   142f2:	2200      	movs	r2, #0
            ct.usec *= 10;
   142f4:	210a      	movs	r1, #10
        while (digits++ < 6) {
   142f6:	3401      	adds	r4, #1
   142f8:	2c07      	cmp	r4, #7
   142fa:	d114      	bne.n	14326 <datetime_parse+0xfa>
   142fc:	b102      	cbz	r2, 14300 <datetime_parse+0xd4>
   142fe:	9309      	str	r3, [sp, #36]	; 0x24
    if (*cp == 'Z' || *cp == 'z') {
   14300:	7803      	ldrb	r3, [r0, #0]
   14302:	f003 02df 	and.w	r2, r3, #223	; 0xdf
   14306:	2a5a      	cmp	r2, #90	; 0x5a
   14308:	d110      	bne.n	1432c <datetime_parse+0x100>
        cp++;
   1430a:	3001      	adds	r0, #1
    if (*cp != '\0') {
   1430c:	7803      	ldrb	r3, [r0, #0]
   1430e:	2b00      	cmp	r3, #0
   14310:	d1a3      	bne.n	1425a <datetime_parse+0x2e>
    if (clocktime_to_timeval(&ct, tz, tv) != 0) {
   14312:	4632      	mov	r2, r6
   14314:	4629      	mov	r1, r5
   14316:	a802      	add	r0, sp, #8
   14318:	f7ff fe6c 	bl	13ff4 <clocktime_to_timeval>
   1431c:	3800      	subs	r0, #0
   1431e:	bf18      	it	ne
   14320:	2001      	movne	r0, #1
   14322:	4240      	negs	r0, r0
   14324:	e79b      	b.n	1425e <datetime_parse+0x32>
            ct.usec *= 10;
   14326:	434b      	muls	r3, r1
   14328:	2201      	movs	r2, #1
   1432a:	e7e4      	b.n	142f6 <datetime_parse+0xca>
    } else if (*cp == '+' || *cp == '-') {
   1432c:	2b2b      	cmp	r3, #43	; 0x2b
   1432e:	d02c      	beq.n	1438a <datetime_parse+0x15e>
   14330:	2b2d      	cmp	r3, #45	; 0x2d
   14332:	d1eb      	bne.n	1430c <datetime_parse+0xe0>
        sign = (*cp == '+') ? +1 : -1;
   14334:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
        cp = parse_number(cp + 1, 2, &off_hour);
   14338:	466a      	mov	r2, sp
   1433a:	2102      	movs	r1, #2
   1433c:	3001      	adds	r0, #1
   1433e:	f7ff fe29 	bl	13f94 <parse_number>
        if (cp == NULL || *cp != ':') {
   14342:	2800      	cmp	r0, #0
   14344:	d089      	beq.n	1425a <datetime_parse+0x2e>
   14346:	7803      	ldrb	r3, [r0, #0]
   14348:	2b3a      	cmp	r3, #58	; 0x3a
   1434a:	d186      	bne.n	1425a <datetime_parse+0x2e>
        cp = parse_number(cp + 1, 2, &off_min);
   1434c:	aa01      	add	r2, sp, #4
   1434e:	2102      	movs	r1, #2
   14350:	3001      	adds	r0, #1
   14352:	f7ff fe1f 	bl	13f94 <parse_number>
        if (cp == NULL) {
   14356:	2800      	cmp	r0, #0
   14358:	f43f af7f 	beq.w	1425a <datetime_parse+0x2e>
        if (off_hour < 0 || off_hour > 23 || off_min < 0 || off_min > 59) {
   1435c:	9a00      	ldr	r2, [sp, #0]
   1435e:	2a17      	cmp	r2, #23
   14360:	f63f af7b 	bhi.w	1425a <datetime_parse+0x2e>
   14364:	9b01      	ldr	r3, [sp, #4]
   14366:	2b3b      	cmp	r3, #59	; 0x3b
   14368:	f63f af77 	bhi.w	1425a <datetime_parse+0x2e>
        tz->tz_minuteswest = off_hour * 60 + off_min;
   1436c:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
   14370:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   14374:	b29b      	uxth	r3, r3
        if (tz->tz_minuteswest > 18 * 60) {
   14376:	f5b3 6f87 	cmp.w	r3, #1080	; 0x438
        tz->tz_minuteswest = off_hour * 60 + off_min;
   1437a:	802b      	strh	r3, [r5, #0]
        if (tz->tz_minuteswest > 18 * 60) {
   1437c:	f63f af6d 	bhi.w	1425a <datetime_parse+0x2e>
        if (sign > 0) {
   14380:	2c01      	cmp	r4, #1
            tz->tz_minuteswest = -tz->tz_minuteswest;
   14382:	bf04      	itt	eq
   14384:	425b      	negeq	r3, r3
   14386:	802b      	strheq	r3, [r5, #0]
   14388:	e7c0      	b.n	1430c <datetime_parse+0xe0>
        sign = (*cp == '+') ? +1 : -1;
   1438a:	2401      	movs	r4, #1
   1438c:	e7d4      	b.n	14338 <datetime_parse+0x10c>
	...

00014390 <datetime_format>:

int
datetime_format(const struct os_timeval *tv, const struct os_timezone *tz,
    char *ostr, int olen)
{
   14390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14394:	b08e      	sub	sp, #56	; 0x38
   14396:	4617      	mov	r7, r2
    char *cp;
    int rc, rlen, minswest;
    int off_hour, off_min, sign;
    struct clocktime ct;

    rc = timeval_to_clocktime(tv, tz, &ct);
   14398:	aa06      	add	r2, sp, #24
{
   1439a:	4688      	mov	r8, r1
   1439c:	461c      	mov	r4, r3
    rc = timeval_to_clocktime(tv, tz, &ct);
   1439e:	f7ff fec1 	bl	14124 <timeval_to_clocktime>
    if (rc != 0) {
   143a2:	4606      	mov	r6, r0
   143a4:	2800      	cmp	r0, #0
   143a6:	d134      	bne.n	14412 <datetime_format+0x82>
    }

    cp = ostr;
    rlen = olen;

    rc = snprintf(cp, rlen, "%04d-%02d-%02dT%02d:%02d:%02d.%06d",
   143a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   143aa:	9305      	str	r3, [sp, #20]
   143ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   143ae:	9304      	str	r3, [sp, #16]
   143b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   143b2:	9303      	str	r3, [sp, #12]
   143b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   143b6:	9302      	str	r3, [sp, #8]
   143b8:	9b08      	ldr	r3, [sp, #32]
   143ba:	9301      	str	r3, [sp, #4]
   143bc:	9b07      	ldr	r3, [sp, #28]
   143be:	9300      	str	r3, [sp, #0]
   143c0:	4621      	mov	r1, r4
   143c2:	9b06      	ldr	r3, [sp, #24]
   143c4:	4a18      	ldr	r2, [pc, #96]	; (14428 <datetime_format+0x98>)
   143c6:	4638      	mov	r0, r7
   143c8:	f7fc fa68 	bl	1089c <snprintf>
   143cc:	4605      	mov	r5, r0
        ct.year, ct.mon, ct.day, ct.hour, ct.min, ct.sec, ct.usec);
    cp += rc;
    rlen -= rc;
    if (rc < 0 || rlen <= 0) {
   143ce:	2d00      	cmp	r5, #0
    cp += rc;
   143d0:	4438      	add	r0, r7
    rlen -= rc;
   143d2:	eba4 0405 	sub.w	r4, r4, r5
    if (rc < 0 || rlen <= 0) {
   143d6:	db1c      	blt.n	14412 <datetime_format+0x82>
   143d8:	2c00      	cmp	r4, #0
   143da:	dd1a      	ble.n	14412 <datetime_format+0x82>
        goto err;
    }

    if (tz != NULL) {
   143dc:	f1b8 0f00 	cmp.w	r8, #0
   143e0:	d01d      	beq.n	1441e <datetime_format+0x8e>
        minswest = tz->tz_minuteswest;
        if (tz->tz_dsttime) {
   143e2:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
        minswest = tz->tz_minuteswest;
   143e6:	f9b8 5000 	ldrsh.w	r5, [r8]
        if (tz->tz_dsttime) {
   143ea:	b103      	cbz	r3, 143ee <datetime_format+0x5e>
            minswest -= 60;
   143ec:	3d3c      	subs	r5, #60	; 0x3c
        }
    } else {
        minswest = 0;
    }

    if (minswest <= 0) {
   143ee:	2d00      	cmp	r5, #0
   143f0:	dc17      	bgt.n	14422 <datetime_format+0x92>
        sign = '+';
        minswest = -minswest;
   143f2:	426d      	negs	r5, r5
        sign = '+';
   143f4:	232b      	movs	r3, #43	; 0x2b
    } else {
        sign = '-';
    }

    off_hour = minswest / 60;
    off_min = minswest % 60;
   143f6:	213c      	movs	r1, #60	; 0x3c
   143f8:	fbb5 f2f1 	udiv	r2, r5, r1
   143fc:	fb01 5512 	mls	r5, r1, r2, r5

    rc = snprintf(cp, rlen, "%c%02d:%02d", sign, off_hour, off_min);
   14400:	e9cd 2500 	strd	r2, r5, [sp]
   14404:	4621      	mov	r1, r4
   14406:	4a09      	ldr	r2, [pc, #36]	; (1442c <datetime_format+0x9c>)
   14408:	f7fc fa48 	bl	1089c <snprintf>
    cp += rc;
    rlen -= rc;
   1440c:	1a24      	subs	r4, r4, r0
    if (rc < 0 || rlen <= 0) {
   1440e:	2c00      	cmp	r4, #0
   14410:	dc01      	bgt.n	14416 <datetime_format+0x86>
    }

    return (0);

err:
    return (-1);
   14412:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
}
   14416:	4630      	mov	r0, r6
   14418:	b00e      	add	sp, #56	; 0x38
   1441a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        minswest = 0;
   1441e:	4635      	mov	r5, r6
   14420:	e7e7      	b.n	143f2 <datetime_format+0x62>
        sign = '-';
   14422:	232d      	movs	r3, #45	; 0x2d
   14424:	e7e7      	b.n	143f6 <datetime_format+0x66>
   14426:	bf00      	nop
   14428:	00021215 	.word	0x00021215
   1442c:	00021238 	.word	0x00021238

00014430 <crc16_ccitt>:
    0x6e17,0x7e36,0x4e55,0x5e74,0x2e93,0x3eb2,0x0ed1,0x1ef0
};

uint16_t
crc16_ccitt(uint16_t initial_crc, const void *buf, int len)
{
   14430:	b530      	push	{r4, r5, lr}

    crc = initial_crc;
    ptr = buf;

    for (counter = 0; counter < len; counter++) {
        crc = (crc<<8) ^ crc16tab[((crc>>8) ^ *ptr++)&0x00FF];
   14432:	4d08      	ldr	r5, [pc, #32]	; (14454 <crc16_ccitt+0x24>)
    ptr = buf;
   14434:	460b      	mov	r3, r1
    for (counter = 0; counter < len; counter++) {
   14436:	1a5c      	subs	r4, r3, r1
   14438:	42a2      	cmp	r2, r4
   1443a:	dc00      	bgt.n	1443e <crc16_ccitt+0xe>
    }

    return crc;
}
   1443c:	bd30      	pop	{r4, r5, pc}
        crc = (crc<<8) ^ crc16tab[((crc>>8) ^ *ptr++)&0x00FF];
   1443e:	f813 4b01 	ldrb.w	r4, [r3], #1
   14442:	ea84 2410 	eor.w	r4, r4, r0, lsr #8
   14446:	f835 4014 	ldrh.w	r4, [r5, r4, lsl #1]
   1444a:	ea84 2000 	eor.w	r0, r4, r0, lsl #8
   1444e:	b280      	uxth	r0, r0
    for (counter = 0; counter < len; counter++) {
   14450:	e7f1      	b.n	14436 <crc16_ccitt+0x6>
   14452:	bf00      	nop
   14454:	00021274 	.word	0x00021274

00014458 <crc8_init>:

uint8_t
crc8_init(void)
{
    return 0xff;
}
   14458:	20ff      	movs	r0, #255	; 0xff
   1445a:	4770      	bx	lr

0001445c <crc8_calc>:

uint8_t
crc8_calc(uint8_t val, void *buf, int cnt)
{
   1445c:	b530      	push	{r4, r5, lr}
	int i;
	uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_small_table[val >> 4];
   1445e:	4d0a      	ldr	r5, [pc, #40]	; (14488 <crc8_calc+0x2c>)
	for (i = 0; i < cnt; i++) {
   14460:	2400      	movs	r4, #0
   14462:	4294      	cmp	r4, r2
   14464:	db00      	blt.n	14468 <crc8_calc+0xc>
		val = (val << 4) ^ crc8_small_table[val >> 4];
	}
	return val;
}
   14466:	bd30      	pop	{r4, r5, pc}
		val ^= p[i];
   14468:	5d0b      	ldrb	r3, [r1, r4]
   1446a:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_small_table[val >> 4];
   1446c:	0903      	lsrs	r3, r0, #4
	for (i = 0; i < cnt; i++) {
   1446e:	3401      	adds	r4, #1
		val = (val << 4) ^ crc8_small_table[val >> 4];
   14470:	5ceb      	ldrb	r3, [r5, r3]
   14472:	ea83 1000 	eor.w	r0, r3, r0, lsl #4
   14476:	b2c3      	uxtb	r3, r0
		val = (val << 4) ^ crc8_small_table[val >> 4];
   14478:	f3c0 1003 	ubfx	r0, r0, #4, #4
   1447c:	5c28      	ldrb	r0, [r5, r0]
   1447e:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
   14482:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
   14484:	e7ed      	b.n	14462 <crc8_calc+0x6>
   14486:	bf00      	nop
   14488:	00021474 	.word	0x00021474

0001448c <streamer_vprintf>:
}

int
streamer_vprintf(struct streamer *streamer, const char *fmt, va_list ap)
{
    return streamer->cfg->vprintf_cb(streamer, fmt, ap);
   1448c:	6803      	ldr	r3, [r0, #0]
   1448e:	685b      	ldr	r3, [r3, #4]
   14490:	4718      	bx	r3

00014492 <streamer_printf>:
}

int
streamer_printf(struct streamer *streamer, const char *fmt, ...)
{
   14492:	b40e      	push	{r1, r2, r3}
   14494:	b503      	push	{r0, r1, lr}
   14496:	aa03      	add	r2, sp, #12
   14498:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list ap;
    int rc;

    va_start(ap, fmt);
   1449c:	9201      	str	r2, [sp, #4]
    rc = streamer_vprintf(streamer, fmt, ap);
   1449e:	f7ff fff5 	bl	1448c <streamer_vprintf>
    va_end(ap);

    return rc;
}
   144a2:	b002      	add	sp, #8
   144a4:	f85d eb04 	ldr.w	lr, [sp], #4
   144a8:	b003      	add	sp, #12
   144aa:	4770      	bx	lr

000144ac <streamer_console_vprintf>:
}

static int
streamer_console_vprintf(struct streamer *streamer,
                         const char *fmt, va_list ap)
{
   144ac:	4608      	mov	r0, r1
    return console_vprintf(fmt, ap);
   144ae:	4611      	mov	r1, r2
   144b0:	f7fd bd84 	b.w	11fbc <console_vprintf>

000144b4 <streamer_console_write>:
{
   144b4:	b508      	push	{r3, lr}
   144b6:	4608      	mov	r0, r1
    console_write(src, len);
   144b8:	4611      	mov	r1, r2
   144ba:	f7fd faad 	bl	11a18 <console_write>
}
   144be:	2000      	movs	r0, #0
   144c0:	bd08      	pop	{r3, pc}
	...

000144c4 <streamer_console_get>:

struct streamer *
streamer_console_get(void)
{
    return &streamer_console;
}
   144c4:	4800      	ldr	r0, [pc, #0]	; (144c8 <streamer_console_get+0x4>)
   144c6:	4770      	bx	lr
   144c8:	20001548 	.word	0x20001548

000144cc <sysinit_app>:
void nmgr_shell_pkg_init(void);
void uwb_rng_pkg_init2(void);

void
sysinit_app(void)
{
   144cc:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
   144ce:	f7f8 fae9 	bl	caa4 <os_pkg_init>

    /*** Stage 2 */
    /* 2.0: flash_map_init (sys/flash_map) */
    flash_map_init();
   144d2:	f007 fa03 	bl	1b8dc <flash_map_init>

    /*** Stage 10 */
    /* 10.0: stats_module_init (sys/stats/full) */
    stats_module_init();
   144d6:	f7fe ff71 	bl	133bc <stats_module_init>

    /*** Stage 20 */
    /* 20.0: console_pkg_init (sys/console/full) */
    console_pkg_init();
   144da:	f7fd fd2f 	bl	11f3c <console_pkg_init>

    /*** Stage 50 */
    /* 50.0: config_pkg_init (sys/config) */
    config_pkg_init();
   144de:	f006 ff43 	bl	1b368 <config_pkg_init>

    /*** Stage 100 */
    /* 100.0: log_init (sys/log/full) */
    log_init();
   144e2:	f007 fabd 	bl	1ba60 <log_init>
    /* 100.1: mfg_init (sys/mfg) */
    mfg_init();
   144e6:	f008 fa4d 	bl	1c984 <mfg_init>
    /* 100.2: modlog_init (sys/log/modlog) */
    modlog_init();
   144ea:	f008 f92f 	bl	1c74c <modlog_init>

    /*** Stage 200 */
    /* 200.0: log_reboot_pkg_init (sys/reboot) */
    log_reboot_pkg_init();
   144ee:	f008 fba3 	bl	1cc38 <log_reboot_pkg_init>

    /*** Stage 220 */
    /* 220.0: config_pkg_init_stage2 (sys/config) */
    config_pkg_init_stage2();
   144f2:	f006 ff9d 	bl	1b430 <config_pkg_init_stage2>

    /*** Stage 401 */
    /* 401.0: dw1000_pkg_init (hw/drivers/uwb/uwb_dw1000) */
    dw1000_pkg_init();
   144f6:	f001 f9a7 	bl	15848 <dw1000_pkg_init>

    /*** Stage 402 */
    /* 402.0: uwb_ccp_pkg_init (lib/uwb_ccp) */
    uwb_ccp_pkg_init();
   144fa:	f7fa ffe5 	bl	f4c8 <uwb_ccp_pkg_init>

    /*** Stage 403 */
    /* 403.0: uwb_wcs_pkg_init (lib/uwb_wcs) */
    uwb_wcs_pkg_init();
   144fe:	f7fb fd8b 	bl	10018 <uwb_wcs_pkg_init>

    /*** Stage 404 */
    /* 404.0: tdma_pkg_init (lib/tdma) */
    tdma_pkg_init();
   14502:	f7f9 ffc9 	bl	e498 <tdma_pkg_init>
    /* 404.1: uwb_rng_pkg_init (lib/uwb_rng) */
    uwb_rng_pkg_init();
   14506:	f004 ff87 	bl	19418 <uwb_rng_pkg_init>
    /* 404.2: wcs_timescale_pkg_init (lib/uwb_wcs) */
    wcs_timescale_pkg_init();
   1450a:	f005 fc1b 	bl	19d44 <wcs_timescale_pkg_init>

    /*** Stage 411 */
    /* 411.0: nrng_pkg_init (lib/nrng) */
    nrng_pkg_init();
   1450e:	f002 fced 	bl	16eec <nrng_pkg_init>

    /*** Stage 414 */
    /* 414.0: twr_ss_nrng_pkg_init (lib/twr_ss_nrng) */
    twr_ss_nrng_pkg_init();
   14512:	f004 fbdb 	bl	18ccc <twr_ss_nrng_pkg_init>

    /*** Stage 420 */
    /* 420.0: uwb_transport_pkg_init (lib/uwb_transport) */
    uwb_transport_pkg_init();
   14516:	f7fb fc7b 	bl	fe10 <uwb_transport_pkg_init>

    /*** Stage 500 */
    /* 500.0: imgmgr_module_init (mgmt/imgmgr) */
    imgmgr_module_init();
   1451a:	f006 f8b5 	bl	1a688 <imgmgr_module_init>
    /* 500.1: nmgr_pkg_init (mgmt/newtmgr) */
    nmgr_pkg_init();
   1451e:	f006 fc5d 	bl	1addc <nmgr_pkg_init>
    /* 500.2: shell_init (sys/shell) */
    shell_init();
   14522:	f7fe fbab 	bl	12c7c <shell_init>
    /* 500.3: split_app_init (boot/split) */
    split_app_init();
   14526:	f000 f809 	bl	1453c <split_app_init>
    /* 500.4: uwbcfg_pkg_init (sys/uwbcfg) */
    uwbcfg_pkg_init();
   1452a:	f7ff faf1 	bl	13b10 <uwbcfg_pkg_init>

    /*** Stage 501 */
    /* 501.0: nmgr_shell_pkg_init (mgmt/newtmgr/transport/nmgr_shell) */
    nmgr_shell_pkg_init();
   1452e:	f006 fef9 	bl	1b324 <nmgr_shell_pkg_init>

    /*** Stage 999 */
    /* 999.0: uwb_rng_pkg_init2 (lib/uwb_rng) */
    uwb_rng_pkg_init2();
}
   14532:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    uwb_rng_pkg_init2();
   14536:	f004 bf9f 	b.w	19478 <uwb_rng_pkg_init2>
	...

0001453c <split_app_init>:
static int8_t split_mode_cur;
static int8_t split_app_active;

void
split_app_init(void)
{
   1453c:	b508      	push	{r3, lr}
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1453e:	4b07      	ldr	r3, [pc, #28]	; (1455c <split_app_init+0x20>)
   14540:	781b      	ldrb	r3, [r3, #0]
   14542:	b92b      	cbnz	r3, 14550 <split_app_init+0x14>
   14544:	2300      	movs	r3, #0
   14546:	461a      	mov	r2, r3
   14548:	4619      	mov	r1, r3
   1454a:	4618      	mov	r0, r3
   1454c:	f7f8 f956 	bl	c7fc <__assert_func>

    rc = split_conf_init();
   14550:	f000 f882 	bl	14658 <split_conf_init>
    assert(rc == 0);
   14554:	2800      	cmp	r0, #0
   14556:	d1f5      	bne.n	14544 <split_app_init+0x8>
}
   14558:	bd08      	pop	{r3, pc}
   1455a:	bf00      	nop
   1455c:	20006af4 	.word	0x20006af4

00014560 <split_check_status>:

split_status_t
split_check_status(void)
{
   14560:	b507      	push	{r0, r1, r2, lr}
    void *entry;
    int rc;

    rc = split_go(LOADER_IMAGE_SLOT, SPLIT_IMAGE_SLOT, &entry);
   14562:	2101      	movs	r1, #1
   14564:	aa01      	add	r2, sp, #4
   14566:	2000      	movs	r0, #0
   14568:	f008 fe06 	bl	1d178 <split_go>
    switch (rc) {
   1456c:	3002      	adds	r0, #2
   1456e:	2802      	cmp	r0, #2
   14570:	d905      	bls.n	1457e <split_check_status+0x1e>

    case SPLIT_GO_OK:
        return SPLIT_STATUS_MATCHING;

    default:
        assert(0);
   14572:	2300      	movs	r3, #0
   14574:	461a      	mov	r2, r3
   14576:	4619      	mov	r1, r3
   14578:	4618      	mov	r0, r3
   1457a:	f7f8 f93f 	bl	c7fc <__assert_func>
        return SPLIT_STATUS_INVALID;
    }
}
   1457e:	b2c0      	uxtb	r0, r0
   14580:	b003      	add	sp, #12
   14582:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00014588 <split_mode_get>:

split_mode_t
split_mode_get(void)
{
    return split_mode_cur;
}
   14588:	4b01      	ldr	r3, [pc, #4]	; (14590 <split_mode_get+0x8>)
   1458a:	7818      	ldrb	r0, [r3, #0]
   1458c:	4770      	bx	lr
   1458e:	bf00      	nop
   14590:	20006b15 	.word	0x20006b15

00014594 <split_app_active_get>:

int
split_app_active_get(void)
{
    return split_app_active;
}
   14594:	4b01      	ldr	r3, [pc, #4]	; (1459c <split_app_active_get+0x8>)
   14596:	f993 0000 	ldrsb.w	r0, [r3]
   1459a:	4770      	bx	lr
   1459c:	20006b14 	.word	0x20006b14

000145a0 <split_mode_set>:
    /* XXX: For now, cast this as an integer.  This value should either be
     * treated as an enumeration generally (i.e. not read directly and assigned
     * from values in flash), or switched to a native type of integer.  However,
     * this is not a high priority change, so just cast it for now.
     */
    if ((int) split_mode < 0 || (int) split_mode >= SPLIT_MODE_CNT) {
   145a0:	2803      	cmp	r0, #3
        return SYS_EINVAL;
    }

    split_mode_cur = split_mode;
   145a2:	bf9d      	ittte	ls
   145a4:	4b02      	ldrls	r3, [pc, #8]	; (145b0 <split_mode_set+0x10>)
   145a6:	7018      	strbls	r0, [r3, #0]
    return 0;
   145a8:	2000      	movls	r0, #0
        return SYS_EINVAL;
   145aa:	f06f 0001 	mvnhi.w	r0, #1
}
   145ae:	4770      	bx	lr
   145b0:	20006b15 	.word	0x20006b15

000145b4 <split_conf_commit>:

static int
split_conf_commit(void)
{
    return 0;
}
   145b4:	2000      	movs	r0, #0
   145b6:	4770      	bx	lr

000145b8 <split_conf_export>:

static int
split_conf_export(void (*func)(char *name, char *val), enum conf_export_tgt tgt)
{
   145b8:	b513      	push	{r0, r1, r4, lr}
   145ba:	4604      	mov	r4, r0
    split_mode_t split_mode;
    char buf[4];

    split_mode = split_mode_get();
   145bc:	f7ff ffe4 	bl	14588 <split_mode_get>
    conf_str_from_value(CONF_INT8, &split_mode, buf, sizeof(buf));
   145c0:	2304      	movs	r3, #4
    split_mode = split_mode_get();
   145c2:	f88d 0003 	strb.w	r0, [sp, #3]
    conf_str_from_value(CONF_INT8, &split_mode, buf, sizeof(buf));
   145c6:	eb0d 0203 	add.w	r2, sp, r3
   145ca:	f10d 0103 	add.w	r1, sp, #3
   145ce:	2002      	movs	r0, #2
   145d0:	f7fc feba 	bl	11348 <conf_str_from_value>
    func("split/status", buf);
   145d4:	4802      	ldr	r0, [pc, #8]	; (145e0 <split_conf_export+0x28>)
   145d6:	a901      	add	r1, sp, #4
   145d8:	47a0      	blx	r4
    return 0;
}
   145da:	2000      	movs	r0, #0
   145dc:	b002      	add	sp, #8
   145de:	bd10      	pop	{r4, pc}
   145e0:	000214ac 	.word	0x000214ac

000145e4 <split_conf_set>:
    if (argc == 1) {
   145e4:	2801      	cmp	r0, #1
{
   145e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   145e8:	460b      	mov	r3, r1
   145ea:	4604      	mov	r4, r0
   145ec:	4615      	mov	r5, r2
    if (argc == 1) {
   145ee:	d112      	bne.n	14616 <split_conf_set+0x32>
        if (!strcmp(argv[0], "status")) {
   145f0:	490a      	ldr	r1, [pc, #40]	; (1461c <split_conf_set+0x38>)
   145f2:	6818      	ldr	r0, [r3, #0]
   145f4:	f7fb fe64 	bl	102c0 <strcmp>
   145f8:	b968      	cbnz	r0, 14616 <split_conf_set+0x32>
            rc = CONF_VALUE_SET(val, CONF_INT8, split_mode);
   145fa:	4623      	mov	r3, r4
   145fc:	f10d 0207 	add.w	r2, sp, #7
   14600:	2102      	movs	r1, #2
   14602:	4628      	mov	r0, r5
   14604:	f7fc fe44 	bl	11290 <conf_value_from_str>
            if (rc != 0) {
   14608:	b918      	cbnz	r0, 14612 <split_conf_set+0x2e>
            rc = split_mode_set(split_mode);
   1460a:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1460e:	f7ff ffc7 	bl	145a0 <split_mode_set>
}
   14612:	b003      	add	sp, #12
   14614:	bd30      	pop	{r4, r5, pc}
    return -1;
   14616:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1461a:	e7fa      	b.n	14612 <split_conf_set+0x2e>
   1461c:	000214b2 	.word	0x000214b2

00014620 <split_conf_get>:
    if (argc == 1) {
   14620:	2801      	cmp	r0, #1
{
   14622:	b573      	push	{r0, r1, r4, r5, r6, lr}
   14624:	460e      	mov	r6, r1
   14626:	4614      	mov	r4, r2
   14628:	461d      	mov	r5, r3
    if (argc == 1) {
   1462a:	d111      	bne.n	14650 <split_conf_get+0x30>
        if (!strcmp(argv[0], "status")) {
   1462c:	4909      	ldr	r1, [pc, #36]	; (14654 <split_conf_get+0x34>)
   1462e:	6830      	ldr	r0, [r6, #0]
   14630:	f7fb fe46 	bl	102c0 <strcmp>
   14634:	b960      	cbnz	r0, 14650 <split_conf_get+0x30>
            split_mode = split_mode_get();
   14636:	f7ff ffa7 	bl	14588 <split_mode_get>
            return conf_str_from_value(CONF_INT8, &split_mode, buf, max_len);
   1463a:	462b      	mov	r3, r5
            split_mode = split_mode_get();
   1463c:	f88d 0007 	strb.w	r0, [sp, #7]
            return conf_str_from_value(CONF_INT8, &split_mode, buf, max_len);
   14640:	4622      	mov	r2, r4
   14642:	f10d 0107 	add.w	r1, sp, #7
   14646:	2002      	movs	r0, #2
   14648:	f7fc fe7e 	bl	11348 <conf_str_from_value>
}
   1464c:	b002      	add	sp, #8
   1464e:	bd70      	pop	{r4, r5, r6, pc}
    return NULL;
   14650:	2000      	movs	r0, #0
   14652:	e7fb      	b.n	1464c <split_conf_get+0x2c>
   14654:	000214b2 	.word	0x000214b2

00014658 <split_conf_init>:
    rc = conf_register(&split_conf_handler);
   14658:	4801      	ldr	r0, [pc, #4]	; (14660 <split_conf_init+0x8>)
   1465a:	f7fc bdd5 	b.w	11208 <conf_register>
   1465e:	bf00      	nop
   14660:	2000154c 	.word	0x2000154c

00014664 <split_write_split>:

int
split_write_split(split_mode_t split_mode)
{
   14664:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   14666:	f88d 0007 	strb.w	r0, [sp, #7]
    char str[CONF_STR_FROM_BYTES_LEN(sizeof(split_mode_t))];
    int rc;

    rc = split_mode_set(split_mode);
   1466a:	f7ff ff99 	bl	145a0 <split_mode_set>
    if (rc != 0) {
   1466e:	b958      	cbnz	r0, 14688 <split_write_split+0x24>
        return rc;
    }

    if (!conf_str_from_value(CONF_INT8, &split_mode, str, sizeof(str))) {
   14670:	2305      	movs	r3, #5
   14672:	aa02      	add	r2, sp, #8
   14674:	f10d 0107 	add.w	r1, sp, #7
   14678:	2002      	movs	r0, #2
   1467a:	f7fc fe65 	bl	11348 <conf_str_from_value>
   1467e:	b130      	cbz	r0, 1468e <split_write_split+0x2a>
        return -1;
    }
    return conf_save_one("split/status", str);
   14680:	4804      	ldr	r0, [pc, #16]	; (14694 <split_write_split+0x30>)
   14682:	a902      	add	r1, sp, #8
   14684:	f7fc fd16 	bl	110b4 <conf_save_one>
}
   14688:	b005      	add	sp, #20
   1468a:	f85d fb04 	ldr.w	pc, [sp], #4
        return -1;
   1468e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14692:	e7f9      	b.n	14688 <split_write_split+0x24>
   14694:	000214ac 	.word	0x000214ac

00014698 <base64_encode>:
    return -1;
}

int
base64_encode(const void *data, int size, char *s, uint8_t should_pad)
{
   14698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1469a:	4615      	mov	r5, r2
    int c;
    const unsigned char *q;
    char *last;
    int diff;

    p = s;
   1469c:	4616      	mov	r6, r2

    q = (const unsigned char *) data;
    last = NULL;
   1469e:	2400      	movs	r4, #0
        i++;
        c *= 256;
        if (i < size)
            c += q[i];
        i++;
        p[0] = base64_chars[(c & 0x00fc0000) >> 18];
   146a0:	4a22      	ldr	r2, [pc, #136]	; (1472c <base64_encode+0x94>)
    i = 0;
   146a2:	4627      	mov	r7, r4
    while (i < size) {
   146a4:	428f      	cmp	r7, r1
   146a6:	db0e      	blt.n	146c6 <base64_encode+0x2e>
        p[3] = base64_chars[(c & 0x0000003f) >> 0];
        last = p;
        p += 4;
    }

    if (last) {
   146a8:	b14c      	cbz	r4, 146be <base64_encode+0x26>
        diff = i - size;
   146aa:	1a7a      	subs	r2, r7, r1
        if (diff > 0) {
   146ac:	2a00      	cmp	r2, #0
   146ae:	dd06      	ble.n	146be <base64_encode+0x26>
            if (should_pad) {
                memset(last + (4 - diff), '=', diff);
   146b0:	f1c2 0004 	rsb	r0, r2, #4
   146b4:	4420      	add	r0, r4
            if (should_pad) {
   146b6:	b3b3      	cbz	r3, 14726 <base64_encode+0x8e>
                memset(last + (4 - diff), '=', diff);
   146b8:	213d      	movs	r1, #61	; 0x3d
   146ba:	f7fb fde6 	bl	1028a <memset>
                p = last + (4 - diff);
            }
        }
    }

    *p = 0;
   146be:	2300      	movs	r3, #0
   146c0:	7033      	strb	r3, [r6, #0]

    return (p - s);
}
   146c2:	1b70      	subs	r0, r6, r5
   146c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (i < size)
   146c6:	f107 0c01 	add.w	ip, r7, #1
        c = q[i++];
   146ca:	7804      	ldrb	r4, [r0, #0]
        if (i < size)
   146cc:	458c      	cmp	ip, r1
            c += q[i];
   146ce:	bfb8      	it	lt
   146d0:	f890 c001 	ldrblt.w	ip, [r0, #1]
        c *= 256;
   146d4:	ea4f 2404 	mov.w	r4, r4, lsl #8
            c += q[i];
   146d8:	bfb8      	it	lt
   146da:	4464      	addlt	r4, ip
        if (i < size)
   146dc:	f107 0c02 	add.w	ip, r7, #2
   146e0:	458c      	cmp	ip, r1
            c += q[i];
   146e2:	bfb8      	it	lt
   146e4:	f890 c002 	ldrblt.w	ip, [r0, #2]
        c *= 256;
   146e8:	ea4f 2404 	mov.w	r4, r4, lsl #8
            c += q[i];
   146ec:	bfb8      	it	lt
   146ee:	4464      	addlt	r4, ip
        p[0] = base64_chars[(c & 0x00fc0000) >> 18];
   146f0:	ea4f 4ca4 	mov.w	ip, r4, asr #18
        i++;
   146f4:	3703      	adds	r7, #3
        p[0] = base64_chars[(c & 0x00fc0000) >> 18];
   146f6:	f812 c00c 	ldrb.w	ip, [r2, ip]
   146fa:	f886 c000 	strb.w	ip, [r6]
        p[1] = base64_chars[(c & 0x0003f000) >> 12];
   146fe:	f3c4 3c05 	ubfx	ip, r4, #12, #6
   14702:	3003      	adds	r0, #3
   14704:	f812 c00c 	ldrb.w	ip, [r2, ip]
   14708:	f886 c001 	strb.w	ip, [r6, #1]
        p[2] = base64_chars[(c & 0x00000fc0) >> 6];
   1470c:	f3c4 1c85 	ubfx	ip, r4, #6, #6
        p[3] = base64_chars[(c & 0x0000003f) >> 0];
   14710:	f004 043f 	and.w	r4, r4, #63	; 0x3f
        p[2] = base64_chars[(c & 0x00000fc0) >> 6];
   14714:	f812 c00c 	ldrb.w	ip, [r2, ip]
        p[3] = base64_chars[(c & 0x0000003f) >> 0];
   14718:	5d14      	ldrb	r4, [r2, r4]
   1471a:	70f4      	strb	r4, [r6, #3]
        p[2] = base64_chars[(c & 0x00000fc0) >> 6];
   1471c:	f886 c002 	strb.w	ip, [r6, #2]
        p += 4;
   14720:	4634      	mov	r4, r6
   14722:	3604      	adds	r6, #4
   14724:	e7be      	b.n	146a4 <base64_encode+0xc>
                memset(last + (4 - diff), '=', diff);
   14726:	4606      	mov	r6, r0
   14728:	e7c9      	b.n	146be <base64_encode+0x26>
   1472a:	bf00      	nop
   1472c:	000214bf 	.word	0x000214bf

00014730 <base64_pad>:

int
base64_pad(char *buf, int len)
{
   14730:	b510      	push	{r4, lr}
    int remainder;

    remainder = len % 4;
    if (remainder == 0) {
   14732:	f011 0403 	ands.w	r4, r1, #3
   14736:	d00a      	beq.n	1474e <base64_pad+0x1e>
    remainder = len % 4;
   14738:	4249      	negs	r1, r1
   1473a:	f001 0103 	and.w	r1, r1, #3
   1473e:	bf58      	it	pl
   14740:	424c      	negpl	r4, r1
        return (0);
    }

    memset(buf, '=', 4 - remainder);
   14742:	f1c4 0404 	rsb	r4, r4, #4
   14746:	4622      	mov	r2, r4
   14748:	213d      	movs	r1, #61	; 0x3d
   1474a:	f7fb fd9e 	bl	1028a <memset>

    return (4 - remainder);
}
   1474e:	4620      	mov	r0, r4
   14750:	bd10      	pop	{r4, pc}
	...

00014754 <base64_decode>:
    return (marker << 24) | val;
}

int
base64_decode(const char *str, void *data)
{
   14754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    const char *p;
    unsigned char *q;

    q = data;
    for (p = str; *p && (*p == '=' || strchr(base64_chars, *p)); p += 4) {
   14758:	4f2a      	ldr	r7, [pc, #168]	; (14804 <base64_decode+0xb0>)
{
   1475a:	460e      	mov	r6, r1
   1475c:	1e45      	subs	r5, r0, #1
    q = data;
   1475e:	460c      	mov	r4, r1
    for (p = str; *p && (*p == '=' || strchr(base64_chars, *p)); p += 4) {
   14760:	7869      	ldrb	r1, [r5, #1]
   14762:	f105 0801 	add.w	r8, r5, #1
   14766:	b9f9      	cbnz	r1, 147a8 <base64_decode+0x54>
        if (marker < 2)
            *q++ = (val >> 8) & 0xff;
        if (marker < 1)
            *q++ = val & 0xff;
    }
    return q - (unsigned char *) data;
   14768:	1ba0      	subs	r0, r4, r6
}
   1476a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        else if (marker > 0)
   1476e:	b982      	cbnz	r2, 14792 <base64_decode+0x3e>
   14770:	4824      	ldr	r0, [pc, #144]	; (14804 <base64_decode+0xb0>)
   14772:	4682      	mov	sl, r0
   14774:	4601      	mov	r1, r0
    for (p = base64_chars; *p; p++)
   14776:	f810 eb01 	ldrb.w	lr, [r0], #1
   1477a:	f1be 0f00 	cmp.w	lr, #0
   1477e:	d102      	bne.n	14786 <base64_decode+0x32>
    return -1;
   14780:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14784:	e003      	b.n	1478e <base64_decode+0x3a>
        if (*p == c)
   14786:	45f0      	cmp	r8, lr
   14788:	d1f4      	bne.n	14774 <base64_decode+0x20>
            return p - base64_chars;
   1478a:	eba1 010a 	sub.w	r1, r1, sl
            val += pos(token[i]);
   1478e:	440b      	add	r3, r1
   14790:	e023      	b.n	147da <base64_decode+0x86>
            return DECODE_ERROR;
   14792:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14796:	e026      	b.n	147e6 <base64_decode+0x92>
            *q++ = (val >> 8) & 0xff;
   14798:	0a02      	lsrs	r2, r0, #8
   1479a:	7062      	strb	r2, [r4, #1]
        if (marker < 1)
   1479c:	b10b      	cbz	r3, 147a2 <base64_decode+0x4e>
            *q++ = (val >> 8) & 0xff;
   1479e:	3402      	adds	r4, #2
   147a0:	e02a      	b.n	147f8 <base64_decode+0xa4>
            *q++ = val & 0xff;
   147a2:	70a0      	strb	r0, [r4, #2]
   147a4:	3403      	adds	r4, #3
   147a6:	e027      	b.n	147f8 <base64_decode+0xa4>
    for (p = str; *p && (*p == '=' || strchr(base64_chars, *p)); p += 4) {
   147a8:	293d      	cmp	r1, #61	; 0x3d
   147aa:	d004      	beq.n	147b6 <base64_decode+0x62>
   147ac:	4638      	mov	r0, r7
   147ae:	f005 fb4a 	bl	19e46 <strchr>
   147b2:	2800      	cmp	r0, #0
   147b4:	d0d8      	beq.n	14768 <base64_decode+0x14>
    if (strlen(token) < 4)
   147b6:	4640      	mov	r0, r8
   147b8:	f005 fb5a 	bl	19e70 <strlen>
   147bc:	2803      	cmp	r0, #3
   147be:	d91d      	bls.n	147fc <base64_decode+0xa8>
    int marker = 0;
   147c0:	2200      	movs	r2, #0
   147c2:	46ac      	mov	ip, r5
    unsigned int val = 0;
   147c4:	4613      	mov	r3, r2
    for (i = 0; i < 4; i++) {
   147c6:	f105 0904 	add.w	r9, r5, #4
        if (token[i] == '=')
   147ca:	f81c 8f01 	ldrb.w	r8, [ip, #1]!
   147ce:	f1b8 0f3d 	cmp.w	r8, #61	; 0x3d
        val *= 64;
   147d2:	ea4f 1383 	mov.w	r3, r3, lsl #6
        if (token[i] == '=')
   147d6:	d1ca      	bne.n	1476e <base64_decode+0x1a>
            marker++;
   147d8:	3201      	adds	r2, #1
    for (i = 0; i < 4; i++) {
   147da:	45cc      	cmp	ip, r9
   147dc:	d1f5      	bne.n	147ca <base64_decode+0x76>
    if (marker > 2)
   147de:	2a02      	cmp	r2, #2
   147e0:	dc0c      	bgt.n	147fc <base64_decode+0xa8>
    return (marker << 24) | val;
   147e2:	ea43 6002 	orr.w	r0, r3, r2, lsl #24
        if (val == DECODE_ERROR)
   147e6:	1c42      	adds	r2, r0, #1
        unsigned int marker = (val >> 24) & 0xff;
   147e8:	ea4f 6310 	mov.w	r3, r0, lsr #24
        if (val == DECODE_ERROR)
   147ec:	d0bd      	beq.n	1476a <base64_decode+0x16>
        *q++ = (val >> 16) & 0xff;
   147ee:	0c02      	lsrs	r2, r0, #16
        if (marker < 2)
   147f0:	2b01      	cmp	r3, #1
        *q++ = (val >> 16) & 0xff;
   147f2:	7022      	strb	r2, [r4, #0]
        if (marker < 2)
   147f4:	d9d0      	bls.n	14798 <base64_decode+0x44>
        *q++ = (val >> 16) & 0xff;
   147f6:	3401      	adds	r4, #1
    for (p = str; *p && (*p == '=' || strchr(base64_chars, *p)); p += 4) {
   147f8:	3504      	adds	r5, #4
   147fa:	e7b1      	b.n	14760 <base64_decode+0xc>
            return -1;
   147fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14800:	e7b3      	b.n	1476a <base64_decode+0x16>
   14802:	bf00      	nop
   14804:	000214bf 	.word	0x000214bf

00014808 <cbor_target_address>:
cbor_target_address(const struct cbor_attr_t *cursor,
                    const struct cbor_array_t *parent, int offset)
{
    char *targetaddr = NULL;

    if (parent == NULL || parent->element_type != CborAttrStructObjectType) {
   14808:	b111      	cbz	r1, 14810 <cbor_target_address+0x8>
   1480a:	780b      	ldrb	r3, [r1, #0]
   1480c:	2b0a      	cmp	r3, #10
   1480e:	d016      	beq.n	1483e <cbor_target_address+0x36>
        /* ordinary case - use the address in the cursor structure */
        switch (cursor->type) {
   14810:	7903      	ldrb	r3, [r0, #4]
   14812:	3b01      	subs	r3, #1
   14814:	2b06      	cmp	r3, #6
   14816:	d818      	bhi.n	1484a <cbor_target_address+0x42>
   14818:	e8df f003 	tbb	[pc, r3]
   1481c:	0c0c0808 	.word	0x0c0c0808
   14820:	040e      	.short	0x040e
   14822:	08          	.byte	0x08
   14823:	00          	.byte	0x00
        case CborAttrUnsignedIntegerType:
            targetaddr = (char *)&cursor->addr.uinteger[offset];
            break;
#if FLOAT_SUPPORT
        case CborAttrFloatType:
            targetaddr = (char *)&cursor->addr.fval[offset];
   14824:	6880      	ldr	r0, [r0, #8]
   14826:	eb00 0082 	add.w	r0, r0, r2, lsl #2
            break;
   1482a:	4770      	bx	lr
        case CborAttrDoubleType:
            targetaddr = (char *)&cursor->addr.real[offset];
   1482c:	6880      	ldr	r0, [r0, #8]
   1482e:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
            break;
   14832:	4770      	bx	lr
#endif
        case CborAttrByteStringType:
            targetaddr = (char *) cursor->addr.bytestring.data;
            break;
        case CborAttrTextStringType:
            targetaddr = cursor->addr.string;
   14834:	6880      	ldr	r0, [r0, #8]
            break;
   14836:	4770      	bx	lr
        case CborAttrBooleanType:
            targetaddr = (char *)&cursor->addr.boolean[offset];
   14838:	6880      	ldr	r0, [r0, #8]
            targetaddr = NULL;
            break;
        }
    } else {
        /* tricky case - hacking a member in an array of structures */
        targetaddr =
   1483a:	4410      	add	r0, r2
   1483c:	4770      	bx	lr
            parent->arr.objects.base + (offset * parent->arr.objects.stride) +
   1483e:	6880      	ldr	r0, [r0, #8]
   14840:	68cb      	ldr	r3, [r1, #12]
   14842:	fb03 0202 	mla	r2, r3, r2, r0
        targetaddr =
   14846:	6888      	ldr	r0, [r1, #8]
   14848:	e7f7      	b.n	1483a <cbor_target_address+0x32>
        switch (cursor->type) {
   1484a:	2000      	movs	r0, #0
            cursor->addr.offset;
    }
    return targetaddr;
}
   1484c:	4770      	bx	lr

0001484e <cbor_value_copy_text_string.part.0>:
{ return value->type == CborUndefinedType; }

/* Booleans */
CBOR_INLINE_API bool cbor_value_is_boolean(const CborValue *value)
{ return value->type == CborBooleanType; }
CBOR_INLINE_API CborError cbor_value_get_boolean(const CborValue *value, bool *result)
   1484e:	b508      	push	{r3, lr}
{
    assert(cbor_value_is_boolean(value));
   14850:	2300      	movs	r3, #0
   14852:	461a      	mov	r2, r3
   14854:	4619      	mov	r1, r3
   14856:	4618      	mov	r0, r3
   14858:	f7f7 ffd0 	bl	c7fc <__assert_func>

0001485c <cbor_value_get_int64>:
    *result = _cbor_value_extract_int64_helper(value);
    return CborNoError;
}

CBOR_INLINE_API CborError cbor_value_get_int64(const CborValue *value, int64_t *result)
{
   1485c:	b538      	push	{r3, r4, r5, lr}
    assert(cbor_value_is_integer(value));
   1485e:	7b83      	ldrb	r3, [r0, #14]
{
   14860:	4605      	mov	r5, r0
   14862:	460c      	mov	r4, r1
    assert(cbor_value_is_integer(value));
   14864:	b10b      	cbz	r3, 1486a <cbor_value_get_int64+0xe>
   14866:	f7ff fff2 	bl	1484e <cbor_value_copy_text_string.part.0>
                _cbor_value_decode_int64_internal(value) : value->extra;
   1486a:	7bc3      	ldrb	r3, [r0, #15]
   1486c:	f013 0301 	ands.w	r3, r3, #1
   14870:	d00c      	beq.n	1488c <cbor_value_get_int64+0x30>
   14872:	f000 fd22 	bl	152ba <_cbor_value_decode_int64_internal>
    *result = (int64_t) _cbor_value_extract_int64_helper(value);
   14876:	e9c4 0100 	strd	r0, r1, [r4]
    if (value->flags & CborIteratorFlag_NegativeInteger)
   1487a:	7beb      	ldrb	r3, [r5, #15]
   1487c:	079b      	lsls	r3, r3, #30
        *result = -*result - 1;
   1487e:	bf42      	ittt	mi
   14880:	43c0      	mvnmi	r0, r0
   14882:	43c9      	mvnmi	r1, r1
   14884:	e9c4 0100 	strdmi	r0, r1, [r4]
    return CborNoError;
}
   14888:	2000      	movs	r0, #0
   1488a:	bd38      	pop	{r3, r4, r5, pc}
                _cbor_value_decode_int64_internal(value) : value->extra;
   1488c:	8980      	ldrh	r0, [r0, #12]
   1488e:	4619      	mov	r1, r3
   14890:	e7f1      	b.n	14876 <cbor_value_get_int64+0x1a>

00014892 <cbor_value_get_double>:
}

CBOR_INLINE_API bool cbor_value_is_double(const CborValue *value)
{ return value->type == CborDoubleType; }
CBOR_INLINE_API CborError cbor_value_get_double(const CborValue *value, double *result)
{
   14892:	b513      	push	{r0, r1, r4, lr}
    assert(cbor_value_is_double(value));
   14894:	7b82      	ldrb	r2, [r0, #14]
   14896:	2afb      	cmp	r2, #251	; 0xfb
{
   14898:	460c      	mov	r4, r1
    assert(cbor_value_is_double(value));
   1489a:	d005      	beq.n	148a8 <cbor_value_get_double+0x16>
   1489c:	2300      	movs	r3, #0
   1489e:	461a      	mov	r2, r3
   148a0:	4619      	mov	r1, r3
   148a2:	4618      	mov	r0, r3
   148a4:	f7f7 ffaa 	bl	c7fc <__assert_func>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
   148a8:	7bc3      	ldrb	r3, [r0, #15]
   148aa:	07db      	lsls	r3, r3, #31
   148ac:	d401      	bmi.n	148b2 <cbor_value_get_double+0x20>
   148ae:	f7ff ffce 	bl	1484e <cbor_value_copy_text_string.part.0>
    uint64_t data = _cbor_value_decode_int64_internal(value);
   148b2:	f000 fd02 	bl	152ba <_cbor_value_decode_int64_internal>
   148b6:	e9cd 0100 	strd	r0, r1, [sp]
    memcpy(result, &data, sizeof(*result));
   148ba:	466b      	mov	r3, sp
   148bc:	cb03      	ldmia	r3!, {r0, r1}
   148be:	6020      	str	r0, [r4, #0]
    return CborNoError;
}
   148c0:	2000      	movs	r0, #0
    memcpy(result, &data, sizeof(*result));
   148c2:	6061      	str	r1, [r4, #4]
}
   148c4:	b002      	add	sp, #8
   148c6:	bd10      	pop	{r4, pc}

000148c8 <cbor_value_get_uint64>:
{
   148c8:	b510      	push	{r4, lr}
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   148ca:	7b83      	ldrb	r3, [r0, #14]
{
   148cc:	460c      	mov	r4, r1
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   148ce:	b963      	cbnz	r3, 148ea <cbor_value_get_uint64+0x22>
   148d0:	7bc3      	ldrb	r3, [r0, #15]
   148d2:	0799      	lsls	r1, r3, #30
   148d4:	d409      	bmi.n	148ea <cbor_value_get_uint64+0x22>
                _cbor_value_decode_int64_internal(value) : value->extra;
   148d6:	f013 0301 	ands.w	r3, r3, #1
   148da:	d008      	beq.n	148ee <cbor_value_get_uint64+0x26>
   148dc:	f000 fced 	bl	152ba <_cbor_value_decode_int64_internal>
   148e0:	460b      	mov	r3, r1
    *result = _cbor_value_extract_int64_helper(value);
   148e2:	e9c4 0300 	strd	r0, r3, [r4]
}
   148e6:	2000      	movs	r0, #0
   148e8:	bd10      	pop	{r4, pc}
   148ea:	f7ff ffb0 	bl	1484e <cbor_value_copy_text_string.part.0>
                _cbor_value_decode_int64_internal(value) : value->extra;
   148ee:	8980      	ldrh	r0, [r0, #12]
   148f0:	e7f7      	b.n	148e2 <cbor_value_get_uint64+0x1a>

000148f2 <cbor_read_array>:
    return err;
}

int
cbor_read_array(struct CborValue *value, const struct cbor_array_t *arr)
{
   148f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   148f6:	b086      	sub	sp, #24
   148f8:	460d      	mov	r5, r1
    int off, arrcount;
    size_t len;
    void *lptr;
    char *tp;

    err = cbor_value_enter_container(value, &elem);
   148fa:	a902      	add	r1, sp, #8
{
   148fc:	4680      	mov	r8, r0
    err = cbor_value_enter_container(value, &elem);
   148fe:	f000 fd1d 	bl	1533c <cbor_value_enter_container>
    if (err) {
   14902:	4604      	mov	r4, r0
   14904:	b110      	cbz	r0, 1490c <cbor_read_array+0x1a>
        err |= CborErrorDataTooLarge;
        cbor_value_advance(&elem);
    }
    err |= cbor_value_leave_container(value, &elem);
    return err;
}
   14906:	b006      	add	sp, #24
   14908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tp = arr->arr.strings.store;
   1490c:	68af      	ldr	r7, [r5, #8]
    for (off = 0; off < arr->maxlen; off++) {
   1490e:	4606      	mov	r6, r0
   14910:	696b      	ldr	r3, [r5, #20]
   14912:	42b3      	cmp	r3, r6
   14914:	dd24      	ble.n	14960 <cbor_read_array+0x6e>
        switch (arr->element_type) {
   14916:	782b      	ldrb	r3, [r5, #0]
   14918:	3b01      	subs	r3, #1
   1491a:	2b09      	cmp	r3, #9
   1491c:	d862      	bhi.n	149e4 <cbor_read_array+0xf2>
   1491e:	e8df f003 	tbb	[pc, r3]
   14922:	332b      	.short	0x332b
   14924:	3a054161 	.word	0x3a054161
   14928:	5a61613a 	.word	0x5a61613a
    assert(cbor_value_is_boolean(value));
   1492c:	f89d 1016 	ldrb.w	r1, [sp, #22]
            lptr = &arr->arr.booleans.store[off];
   14930:	686a      	ldr	r2, [r5, #4]
            err |= cbor_value_get_boolean(&elem, lptr);
   14932:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   14936:	29f5      	cmp	r1, #245	; 0xf5
   14938:	d001      	beq.n	1493e <cbor_read_array+0x4c>
   1493a:	f7ff ff88 	bl	1484e <cbor_value_copy_text_string.part.0>
    *result = !!value->extra;
   1493e:	3b00      	subs	r3, #0
   14940:	bf18      	it	ne
   14942:	2301      	movne	r3, #1
   14944:	5593      	strb	r3, [r2, r6]
        if (arr->element_type != CborAttrStructObjectType) {
   14946:	782b      	ldrb	r3, [r5, #0]
   14948:	2b0a      	cmp	r3, #10
        arrcount++;
   1494a:	f106 0601 	add.w	r6, r6, #1
        if (arr->element_type != CborAttrStructObjectType) {
   1494e:	d003      	beq.n	14958 <cbor_read_array+0x66>
            err |= cbor_value_advance(&elem);
   14950:	a802      	add	r0, sp, #8
   14952:	f000 fda2 	bl	1549a <cbor_value_advance>
   14956:	4304      	orrs	r4, r0
        if (!cbor_value_is_valid(&elem)) {
   14958:	f89d 3016 	ldrb.w	r3, [sp, #22]
   1495c:	2bff      	cmp	r3, #255	; 0xff
   1495e:	d1d7      	bne.n	14910 <cbor_read_array+0x1e>
    if (arr->count) {
   14960:	692b      	ldr	r3, [r5, #16]
   14962:	b103      	cbz	r3, 14966 <cbor_read_array+0x74>
        *arr->count = arrcount;
   14964:	601e      	str	r6, [r3, #0]
    while (!cbor_value_at_end(&elem)) {
   14966:	9b04      	ldr	r3, [sp, #16]
   14968:	2b00      	cmp	r3, #0
   1496a:	d13e      	bne.n	149ea <cbor_read_array+0xf8>
    err |= cbor_value_leave_container(value, &elem);
   1496c:	a902      	add	r1, sp, #8
   1496e:	4640      	mov	r0, r8
   14970:	f000 fd2a 	bl	153c8 <cbor_value_leave_container>
   14974:	4320      	orrs	r0, r4
    return err;
   14976:	e7c6      	b.n	14906 <cbor_read_array+0x14>
            lptr = &arr->arr.integers.store[off];
   14978:	6869      	ldr	r1, [r5, #4]
            err |= cbor_value_get_int64(&elem, lptr);
   1497a:	a802      	add	r0, sp, #8
   1497c:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
   14980:	f7ff ff6c 	bl	1485c <cbor_value_get_int64>
            err |= cbor_value_get_uint64(&elem, lptr);
   14984:	4304      	orrs	r4, r0
            break;
   14986:	e7de      	b.n	14946 <cbor_read_array+0x54>
            lptr = &arr->arr.uintegers.store[off];
   14988:	6869      	ldr	r1, [r5, #4]
            err |= cbor_value_get_uint64(&elem, lptr);
   1498a:	a802      	add	r0, sp, #8
   1498c:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
   14990:	f7ff ff9a 	bl	148c8 <cbor_value_get_uint64>
   14994:	e7f6      	b.n	14984 <cbor_read_array+0x92>
            lptr = &arr->arr.reals.store[off];
   14996:	6869      	ldr	r1, [r5, #4]
            err |= cbor_value_get_double(&elem, lptr);
   14998:	a802      	add	r0, sp, #8
   1499a:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
   1499e:	f7ff ff78 	bl	14892 <cbor_value_get_double>
   149a2:	e7ef      	b.n	14984 <cbor_read_array+0x92>
            len = arr->arr.strings.storelen - (tp - arr->arr.strings.store);
   149a4:	68ab      	ldr	r3, [r5, #8]
   149a6:	1afa      	subs	r2, r7, r3
   149a8:	68eb      	ldr	r3, [r5, #12]
   149aa:	1a9b      	subs	r3, r3, r2
   149ac:	9301      	str	r3, [sp, #4]
    assert(cbor_value_is_text_string(value));
   149ae:	f89d 3016 	ldrb.w	r3, [sp, #22]
   149b2:	2b60      	cmp	r3, #96	; 0x60
   149b4:	d001      	beq.n	149ba <cbor_read_array+0xc8>
   149b6:	f7ff ff4a 	bl	1484e <cbor_value_copy_text_string.part.0>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   149ba:	2300      	movs	r3, #0
   149bc:	4639      	mov	r1, r7
   149be:	aa01      	add	r2, sp, #4
   149c0:	a802      	add	r0, sp, #8
   149c2:	f000 fd19 	bl	153f8 <_cbor_value_copy_string>
            arr->arr.strings.ptrs[off] = tp;
   149c6:	686b      	ldr	r3, [r5, #4]
   149c8:	f843 7026 	str.w	r7, [r3, r6, lsl #2]
            tp += len + 1;
   149cc:	9b01      	ldr	r3, [sp, #4]
   149ce:	3301      	adds	r3, #1
            err |= cbor_value_copy_text_string(&elem, tp, &len, NULL);
   149d0:	4304      	orrs	r4, r0
            tp += len + 1;
   149d2:	441f      	add	r7, r3
            break;
   149d4:	e7b7      	b.n	14946 <cbor_read_array+0x54>
            err |= cbor_internal_read_object(&elem, arr->arr.objects.subtype,
   149d6:	6869      	ldr	r1, [r5, #4]
   149d8:	4633      	mov	r3, r6
   149da:	462a      	mov	r2, r5
   149dc:	a802      	add	r0, sp, #8
   149de:	f000 f80a 	bl	149f6 <cbor_internal_read_object>
   149e2:	e7cf      	b.n	14984 <cbor_read_array+0x92>
            err |= CborErrorIllegalType;
   149e4:	f444 7482 	orr.w	r4, r4, #260	; 0x104
            break;
   149e8:	e7ad      	b.n	14946 <cbor_read_array+0x54>
        cbor_value_advance(&elem);
   149ea:	a802      	add	r0, sp, #8
        err |= CborErrorDataTooLarge;
   149ec:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
        cbor_value_advance(&elem);
   149f0:	f000 fd53 	bl	1549a <cbor_value_advance>
   149f4:	e7b7      	b.n	14966 <cbor_read_array+0x74>

000149f6 <cbor_internal_read_object>:
{
   149f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149fa:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
   149fe:	4607      	mov	r7, r0
   14a00:	9101      	str	r1, [sp, #4]
   14a02:	4691      	mov	r9, r2
   14a04:	469a      	mov	sl, r3
   14a06:	f101 0420 	add.w	r4, r1, #32
    for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   14a0a:	f854 3c20 	ldr.w	r3, [r4, #-32]
   14a0e:	f1a4 0520 	sub.w	r5, r4, #32
   14a12:	bb0b      	cbnz	r3, 14a58 <cbor_internal_read_object+0x62>
    if (cbor_value_is_map(root_value)) {
   14a14:	7bbb      	ldrb	r3, [r7, #14]
   14a16:	2ba0      	cmp	r3, #160	; 0xa0
   14a18:	f040 811d 	bne.w	14c56 <cbor_internal_read_object+0x260>
        err |= cbor_value_enter_container(root_value, &cur_value);
   14a1c:	a907      	add	r1, sp, #28
   14a1e:	4638      	mov	r0, r7
   14a20:	f000 fc8c 	bl	1533c <cbor_value_enter_container>
   14a24:	4604      	mov	r4, r0
{ return value && value->type != CborInvalidType; }
   14a26:	f89d 602a 	ldrb.w	r6, [sp, #42]	; 0x2a
    while (cbor_value_is_valid(&cur_value) && !err) {
   14a2a:	2eff      	cmp	r6, #255	; 0xff
   14a2c:	f000 8107 	beq.w	14c3e <cbor_internal_read_object+0x248>
   14a30:	2c00      	cmp	r4, #0
   14a32:	d142      	bne.n	14aba <cbor_internal_read_object+0xc4>
        if (cbor_value_is_text_string(&cur_value)) {
   14a34:	2e60      	cmp	r6, #96	; 0x60
   14a36:	d145      	bne.n	14ac4 <cbor_internal_read_object+0xce>
            if (cbor_value_calculate_string_length(&cur_value, &len) == 0) {
   14a38:	a905      	add	r1, sp, #20
   14a3a:	a807      	add	r0, sp, #28
   14a3c:	f000 fd3c 	bl	154b8 <cbor_value_calculate_string_length>
   14a40:	bb80      	cbnz	r0, 14aa4 <cbor_internal_read_object+0xae>
                if (len > MYNEWT_VAL(CBORATTR_MAX_SIZE)) {
   14a42:	9b05      	ldr	r3, [sp, #20]
   14a44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   14a48:	f200 8102 	bhi.w	14c50 <cbor_internal_read_object+0x25a>
    assert(cbor_value_is_text_string(value));
   14a4c:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   14a50:	2b60      	cmp	r3, #96	; 0x60
   14a52:	d020      	beq.n	14a96 <cbor_internal_read_object+0xa0>
   14a54:	f7ff fefb 	bl	1484e <cbor_value_copy_text_string.part.0>
        if (!cursor->nodefault) {
   14a58:	7b23      	ldrb	r3, [r4, #12]
   14a5a:	b993      	cbnz	r3, 14a82 <cbor_internal_read_object+0x8c>
            lptr = cbor_target_address(cursor, parent, offset);
   14a5c:	4652      	mov	r2, sl
   14a5e:	4649      	mov	r1, r9
   14a60:	4628      	mov	r0, r5
   14a62:	f7ff fed1 	bl	14808 <cbor_target_address>
            if (lptr != NULL) {
   14a66:	b160      	cbz	r0, 14a82 <cbor_internal_read_object+0x8c>
                switch (cursor->type) {
   14a68:	f814 3c1c 	ldrb.w	r3, [r4, #-28]
   14a6c:	3b01      	subs	r3, #1
   14a6e:	2b06      	cmp	r3, #6
   14a70:	d807      	bhi.n	14a82 <cbor_internal_read_object+0x8c>
   14a72:	e8df f003 	tbb	[pc, r3]
   14a76:	0b0b      	.short	0x0b0b
   14a78:	08040606 	.word	0x08040606
   14a7c:	0b          	.byte	0x0b
   14a7d:	00          	.byte	0x00
                    memcpy(lptr, &cursor->dflt.boolean, sizeof(bool));
   14a7e:	7823      	ldrb	r3, [r4, #0]
   14a80:	7003      	strb	r3, [r0, #0]
    for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   14a82:	3430      	adds	r4, #48	; 0x30
   14a84:	e7c1      	b.n	14a0a <cbor_internal_read_object+0x14>
                    memcpy(lptr, &cursor->dflt.fval, sizeof(float));
   14a86:	6a2b      	ldr	r3, [r5, #32]
   14a88:	6003      	str	r3, [r0, #0]
                    break;
   14a8a:	e7fa      	b.n	14a82 <cbor_internal_read_object+0x8c>
                    memcpy(lptr, &cursor->dflt.real, sizeof(double));
   14a8c:	6823      	ldr	r3, [r4, #0]
   14a8e:	6003      	str	r3, [r0, #0]
   14a90:	6863      	ldr	r3, [r4, #4]
   14a92:	6043      	str	r3, [r0, #4]
                    break;
   14a94:	e7f5      	b.n	14a82 <cbor_internal_read_object+0x8c>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   14a96:	4623      	mov	r3, r4
   14a98:	aa05      	add	r2, sp, #20
   14a9a:	a90b      	add	r1, sp, #44	; 0x2c
   14a9c:	a807      	add	r0, sp, #28
   14a9e:	f000 fcab 	bl	153f8 <_cbor_value_copy_string>
   14aa2:	4604      	mov	r4, r0
            err |= cbor_value_advance(&cur_value);
   14aa4:	a807      	add	r0, sp, #28
   14aa6:	f000 fcf8 	bl	1549a <cbor_value_advance>
{ return value && value->type != CborInvalidType; }
   14aaa:	f89d 602a 	ldrb.w	r6, [sp, #42]	; 0x2a
            if (cbor_value_is_valid(&cur_value)) {
   14aae:	2eff      	cmp	r6, #255	; 0xff
            err |= cbor_value_advance(&cur_value);
   14ab0:	ea44 0400 	orr.w	r4, r4, r0
            if (cbor_value_is_valid(&cur_value)) {
   14ab4:	d108      	bne.n	14ac8 <cbor_internal_read_object+0xd2>
                err |= CborErrorIllegalType;
   14ab6:	f444 7482 	orr.w	r4, r4, #260	; 0x104
    return err;
   14aba:	4620      	mov	r0, r4
}
   14abc:	f50d 7d0d 	add.w	sp, sp, #564	; 0x234
   14ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            attrbuf[0] = '\0';
   14ac4:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
                    attrbuf[0] == '\0') {
   14ac8:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
                } else if (strlen(cursor->attribute) == len &&
   14acc:	9a05      	ldr	r2, [sp, #20]
        for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   14ace:	9d01      	ldr	r5, [sp, #4]
                    attrbuf[0] == '\0') {
   14ad0:	9302      	str	r3, [sp, #8]
        best_match = NULL;
   14ad2:	f04f 0800 	mov.w	r8, #0
        for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   14ad6:	f8d5 b000 	ldr.w	fp, [r5]
   14ada:	f1bb 0f00 	cmp.w	fp, #0
   14ade:	d104      	bne.n	14aea <cbor_internal_read_object+0xf4>
        if (!cursor->attribute && best_match) {
   14ae0:	f1b8 0f00 	cmp.w	r8, #0
   14ae4:	bf18      	it	ne
   14ae6:	4645      	movne	r5, r8
   14ae8:	e01e      	b.n	14b28 <cbor_internal_read_object+0x132>
    switch (at) {
   14aea:	7929      	ldrb	r1, [r5, #4]
   14aec:	3901      	subs	r1, #1
   14aee:	290a      	cmp	r1, #10
   14af0:	d830      	bhi.n	14b54 <cbor_internal_read_object+0x15e>
   14af2:	e8df f001 	tbb	[pc, r1]
   14af6:	0606      	.short	0x0606
   14af8:	3533312d 	.word	0x3533312d
   14afc:	2f3b3937 	.word	0x2f3b3937
   14b00:	3d          	.byte	0x3d
   14b01:	00          	.byte	0x00
        if (ct == CborIntegerType) {
   14b02:	bb3e      	cbnz	r6, 14b54 <cbor_internal_read_object+0x15e>
                if (cursor->attribute == CBORATTR_ATTR_UNNAMED &&
   14b04:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   14b08:	d101      	bne.n	14b0e <cbor_internal_read_object+0x118>
   14b0a:	9b02      	ldr	r3, [sp, #8]
   14b0c:	b393      	cbz	r3, 14b74 <cbor_internal_read_object+0x17e>
                } else if (strlen(cursor->attribute) == len &&
   14b0e:	4658      	mov	r0, fp
   14b10:	9203      	str	r2, [sp, #12]
   14b12:	f005 f9ad 	bl	19e70 <strlen>
   14b16:	9a03      	ldr	r2, [sp, #12]
   14b18:	4290      	cmp	r0, r2
   14b1a:	d11b      	bne.n	14b54 <cbor_internal_read_object+0x15e>
                    !memcmp(cursor->attribute, attrbuf, len)) {
   14b1c:	a90b      	add	r1, sp, #44	; 0x2c
   14b1e:	4658      	mov	r0, fp
   14b20:	f7fb fb82 	bl	10228 <memcmp>
                } else if (strlen(cursor->attribute) == len &&
   14b24:	9a03      	ldr	r2, [sp, #12]
   14b26:	b9a8      	cbnz	r0, 14b54 <cbor_internal_read_object+0x15e>
        if (cursor->attribute != NULL) {
   14b28:	682b      	ldr	r3, [r5, #0]
   14b2a:	b38b      	cbz	r3, 14b90 <cbor_internal_read_object+0x19a>
            lptr = cbor_target_address(cursor, parent, offset);
   14b2c:	4652      	mov	r2, sl
   14b2e:	4649      	mov	r1, r9
   14b30:	4628      	mov	r0, r5
   14b32:	f7ff fe69 	bl	14808 <cbor_target_address>
            switch (cursor->type) {
   14b36:	792b      	ldrb	r3, [r5, #4]
   14b38:	3b01      	subs	r3, #1
            lptr = cbor_target_address(cursor, parent, offset);
   14b3a:	4606      	mov	r6, r0
            switch (cursor->type) {
   14b3c:	2b0a      	cmp	r3, #10
   14b3e:	d87b      	bhi.n	14c38 <cbor_internal_read_object+0x242>
   14b40:	e8df f003 	tbb	[pc, r3]
   14b44:	5e4d302a 	.word	0x5e4d302a
   14b48:	6c48351a 	.word	0x6c48351a
   14b4c:	7a73      	.short	0x7a73
   14b4e:	26          	.byte	0x26
   14b4f:	00          	.byte	0x00
        if (ct == CborByteStringType) {
   14b50:	2e40      	cmp	r6, #64	; 0x40
        if (ct == CborNullType) {
   14b52:	d0d7      	beq.n	14b04 <cbor_internal_read_object+0x10e>
        for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   14b54:	3530      	adds	r5, #48	; 0x30
   14b56:	e7be      	b.n	14ad6 <cbor_internal_read_object+0xe0>
        if (ct == CborTextStringType) {
   14b58:	2e60      	cmp	r6, #96	; 0x60
   14b5a:	e7fa      	b.n	14b52 <cbor_internal_read_object+0x15c>
        if (ct == CborBooleanType) {
   14b5c:	2ef5      	cmp	r6, #245	; 0xf5
   14b5e:	d0d1      	beq.n	14b04 <cbor_internal_read_object+0x10e>
        if (ct == CborFloatType) {
   14b60:	2efa      	cmp	r6, #250	; 0xfa
   14b62:	e7f6      	b.n	14b52 <cbor_internal_read_object+0x15c>
        if (ct == CborDoubleType) {
   14b64:	2efb      	cmp	r6, #251	; 0xfb
   14b66:	e7f4      	b.n	14b52 <cbor_internal_read_object+0x15c>
        if (ct == CborArrayType) {
   14b68:	2e80      	cmp	r6, #128	; 0x80
   14b6a:	e7f2      	b.n	14b52 <cbor_internal_read_object+0x15c>
        if (ct == CborMapType) {
   14b6c:	2ea0      	cmp	r6, #160	; 0xa0
   14b6e:	e7f0      	b.n	14b52 <cbor_internal_read_object+0x15c>
        if (ct == CborNullType) {
   14b70:	2ef6      	cmp	r6, #246	; 0xf6
   14b72:	e7ee      	b.n	14b52 <cbor_internal_read_object+0x15c>
   14b74:	46a8      	mov	r8, r5
   14b76:	e7ed      	b.n	14b54 <cbor_internal_read_object+0x15e>
    assert(cbor_value_is_boolean(value));
   14b78:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
   14b7c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   14b80:	2af5      	cmp	r2, #245	; 0xf5
   14b82:	d001      	beq.n	14b88 <cbor_internal_read_object+0x192>
   14b84:	f7ff fe63 	bl	1484e <cbor_value_copy_text_string.part.0>
    *result = !!value->extra;
   14b88:	3b00      	subs	r3, #0
   14b8a:	bf18      	it	ne
   14b8c:	2301      	movne	r3, #1
   14b8e:	7003      	strb	r3, [r0, #0]
        cbor_value_advance(&cur_value);
   14b90:	a807      	add	r0, sp, #28
   14b92:	f000 fc82 	bl	1549a <cbor_value_advance>
   14b96:	e746      	b.n	14a26 <cbor_internal_read_object+0x30>
                err |= cbor_value_get_int64(&cur_value, lptr);
   14b98:	4601      	mov	r1, r0
   14b9a:	a807      	add	r0, sp, #28
   14b9c:	f7ff fe5e 	bl	1485c <cbor_value_get_int64>
                err |= cbor_value_get_uint64(&cur_value, lptr);
   14ba0:	4304      	orrs	r4, r0
                break;
   14ba2:	e7f5      	b.n	14b90 <cbor_internal_read_object+0x19a>
                err |= cbor_value_get_uint64(&cur_value, lptr);
   14ba4:	4601      	mov	r1, r0
   14ba6:	a807      	add	r0, sp, #28
   14ba8:	f7ff fe8e 	bl	148c8 <cbor_value_get_uint64>
   14bac:	e7f8      	b.n	14ba0 <cbor_internal_read_object+0x1aa>
    assert(cbor_value_is_float(value));
   14bae:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   14bb2:	2bfa      	cmp	r3, #250	; 0xfa
   14bb4:	d005      	beq.n	14bc2 <cbor_internal_read_object+0x1cc>
   14bb6:	2300      	movs	r3, #0
   14bb8:	461a      	mov	r2, r3
   14bba:	4619      	mov	r1, r3
   14bbc:	4618      	mov	r0, r3
   14bbe:	f7f7 fe1d 	bl	c7fc <__assert_func>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
   14bc2:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
   14bc6:	07db      	lsls	r3, r3, #31
   14bc8:	d5f5      	bpl.n	14bb6 <cbor_internal_read_object+0x1c0>
    uint32_t data = (uint32_t)_cbor_value_decode_int64_internal(value);
   14bca:	a807      	add	r0, sp, #28
   14bcc:	f000 fb75 	bl	152ba <_cbor_value_decode_int64_internal>
    memcpy(result, &data, sizeof(*result));
   14bd0:	6030      	str	r0, [r6, #0]
                break;
   14bd2:	e7dd      	b.n	14b90 <cbor_internal_read_object+0x19a>
                err |= cbor_value_get_double(&cur_value, lptr);
   14bd4:	4601      	mov	r1, r0
   14bd6:	a807      	add	r0, sp, #28
   14bd8:	f7ff fe5b 	bl	14892 <cbor_value_get_double>
   14bdc:	e7e0      	b.n	14ba0 <cbor_internal_read_object+0x1aa>
                size_t len = cursor->len;
   14bde:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14be0:	9306      	str	r3, [sp, #24]
    assert(cbor_value_is_byte_string(value));
   14be2:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   14be6:	2b40      	cmp	r3, #64	; 0x40
   14be8:	d1e5      	bne.n	14bb6 <cbor_internal_read_object+0x1c0>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   14bea:	2300      	movs	r3, #0
   14bec:	aa06      	add	r2, sp, #24
   14bee:	4601      	mov	r1, r0
   14bf0:	a807      	add	r0, sp, #28
   14bf2:	f000 fc01 	bl	153f8 <_cbor_value_copy_string>
                *cursor->addr.bytestring.len = len;
   14bf6:	68eb      	ldr	r3, [r5, #12]
   14bf8:	9a06      	ldr	r2, [sp, #24]
   14bfa:	601a      	str	r2, [r3, #0]
                err |= cbor_value_copy_byte_string(&cur_value, lptr,
   14bfc:	4304      	orrs	r4, r0
                break;
   14bfe:	e7c7      	b.n	14b90 <cbor_internal_read_object+0x19a>
                size_t len = cursor->len;
   14c00:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14c02:	9306      	str	r3, [sp, #24]
    assert(cbor_value_is_text_string(value));
   14c04:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   14c08:	2b60      	cmp	r3, #96	; 0x60
   14c0a:	f47f af23 	bne.w	14a54 <cbor_internal_read_object+0x5e>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   14c0e:	4601      	mov	r1, r0
   14c10:	2300      	movs	r3, #0
   14c12:	aa06      	add	r2, sp, #24
   14c14:	a807      	add	r0, sp, #28
   14c16:	f000 fbef 	bl	153f8 <_cbor_value_copy_string>
   14c1a:	e7c1      	b.n	14ba0 <cbor_internal_read_object+0x1aa>
                err |= cbor_read_array(&cur_value, &cursor->addr.array);
   14c1c:	f105 0108 	add.w	r1, r5, #8
   14c20:	a807      	add	r0, sp, #28
   14c22:	f7ff fe66 	bl	148f2 <cbor_read_array>
                err |= cbor_internal_read_object(&cur_value, cursor->addr.obj,
   14c26:	4304      	orrs	r4, r0
                continue;
   14c28:	e6fd      	b.n	14a26 <cbor_internal_read_object+0x30>
                err |= cbor_internal_read_object(&cur_value, cursor->addr.obj,
   14c2a:	2300      	movs	r3, #0
   14c2c:	68a9      	ldr	r1, [r5, #8]
   14c2e:	461a      	mov	r2, r3
   14c30:	a807      	add	r0, sp, #28
   14c32:	f7ff fee0 	bl	149f6 <cbor_internal_read_object>
   14c36:	e7f6      	b.n	14c26 <cbor_internal_read_object+0x230>
                err |= CborErrorIllegalType;
   14c38:	f444 7482 	orr.w	r4, r4, #260	; 0x104
   14c3c:	e7a8      	b.n	14b90 <cbor_internal_read_object+0x19a>
    if (!err) {
   14c3e:	2c00      	cmp	r4, #0
   14c40:	f47f af3b 	bne.w	14aba <cbor_internal_read_object+0xc4>
        err |= cbor_value_leave_container(root_value, &cur_value);
   14c44:	a907      	add	r1, sp, #28
   14c46:	4638      	mov	r0, r7
   14c48:	f000 fbbe 	bl	153c8 <cbor_value_leave_container>
   14c4c:	4604      	mov	r4, r0
   14c4e:	e734      	b.n	14aba <cbor_internal_read_object+0xc4>
                    err |= CborErrorDataTooLarge;
   14c50:	f44f 6480 	mov.w	r4, #1024	; 0x400
   14c54:	e731      	b.n	14aba <cbor_internal_read_object+0xc4>
        return err;
   14c56:	f44f 7082 	mov.w	r0, #260	; 0x104
   14c5a:	e72f      	b.n	14abc <cbor_internal_read_object+0xc6>

00014c5c <cbor_read_object>:
int
cbor_read_object(struct CborValue *value, const struct cbor_attr_t *attrs)
{
    int st;

    st = cbor_internal_read_object(value, attrs, NULL, 0);
   14c5c:	2300      	movs	r3, #0
   14c5e:	461a      	mov	r2, r3
   14c60:	f7ff bec9 	b.w	149f6 <cbor_internal_read_object>

00014c64 <cbor_mbuf_reader_cpy>:
}

static uintptr_t
cbor_mbuf_reader_cpy(struct cbor_decoder_reader *d, char *dst, int offset,
                     size_t len)
{
   14c64:	b538      	push	{r3, r4, r5, lr}
    int rc;
    struct cbor_mbuf_reader *cb = (struct cbor_mbuf_reader *) d;

    rc = os_mbuf_copydata(cb->m, offset + cb->init_off, len, dst);
   14c66:	69c4      	ldr	r4, [r0, #28]
   14c68:	6a00      	ldr	r0, [r0, #32]
{
   14c6a:	4615      	mov	r5, r2
   14c6c:	461a      	mov	r2, r3
    rc = os_mbuf_copydata(cb->m, offset + cb->init_off, len, dst);
   14c6e:	460b      	mov	r3, r1
   14c70:	1929      	adds	r1, r5, r4
   14c72:	f7f9 f8d8 	bl	de26 <os_mbuf_copydata>
    if (rc == 0) {
        return true;
    }
    return false;
}
   14c76:	fab0 f080 	clz	r0, r0
   14c7a:	0940      	lsrs	r0, r0, #5
   14c7c:	bd38      	pop	{r3, r4, r5, pc}

00014c7e <cbor_mbuf_reader_get8>:
{
   14c7e:	b513      	push	{r0, r1, r4, lr}
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   14c80:	69c4      	ldr	r4, [r0, #28]
   14c82:	6a00      	ldr	r0, [r0, #32]
   14c84:	f10d 0307 	add.w	r3, sp, #7
   14c88:	2201      	movs	r2, #1
   14c8a:	4421      	add	r1, r4
   14c8c:	f7f9 f8cb 	bl	de26 <os_mbuf_copydata>
}
   14c90:	f89d 0007 	ldrb.w	r0, [sp, #7]
   14c94:	b002      	add	sp, #8
   14c96:	bd10      	pop	{r4, pc}

00014c98 <cbor_mbuf_reader_cmp>:
{
   14c98:	b538      	push	{r3, r4, r5, lr}
    return os_mbuf_cmpf(cb->m, offset + cb->init_off, buf, len) == 0;
   14c9a:	69c4      	ldr	r4, [r0, #28]
   14c9c:	6a00      	ldr	r0, [r0, #32]
{
   14c9e:	4615      	mov	r5, r2
    return os_mbuf_cmpf(cb->m, offset + cb->init_off, buf, len) == 0;
   14ca0:	460a      	mov	r2, r1
   14ca2:	1929      	adds	r1, r5, r4
   14ca4:	f7f9 f931 	bl	df0a <os_mbuf_cmpf>
}
   14ca8:	fab0 f080 	clz	r0, r0
   14cac:	0940      	lsrs	r0, r0, #5
   14cae:	bd38      	pop	{r3, r4, r5, pc}

00014cb0 <cbor_mbuf_reader_get64>:
{
   14cb0:	b513      	push	{r0, r1, r4, lr}
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   14cb2:	69c4      	ldr	r4, [r0, #28]
   14cb4:	6a00      	ldr	r0, [r0, #32]
   14cb6:	4421      	add	r1, r4
   14cb8:	466b      	mov	r3, sp
   14cba:	2208      	movs	r2, #8
   14cbc:	f7f9 f8b3 	bl	de26 <os_mbuf_copydata>
}
   14cc0:	9801      	ldr	r0, [sp, #4]
   14cc2:	9900      	ldr	r1, [sp, #0]
   14cc4:	ba00      	rev	r0, r0
   14cc6:	ba09      	rev	r1, r1
   14cc8:	b002      	add	sp, #8
   14cca:	bd10      	pop	{r4, pc}

00014ccc <cbor_mbuf_reader_get32>:
{
   14ccc:	b513      	push	{r0, r1, r4, lr}
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   14cce:	69c4      	ldr	r4, [r0, #28]
   14cd0:	6a00      	ldr	r0, [r0, #32]
   14cd2:	ab01      	add	r3, sp, #4
   14cd4:	2204      	movs	r2, #4
   14cd6:	4421      	add	r1, r4
   14cd8:	f7f9 f8a5 	bl	de26 <os_mbuf_copydata>
}
   14cdc:	9801      	ldr	r0, [sp, #4]
   14cde:	ba00      	rev	r0, r0
   14ce0:	b002      	add	sp, #8
   14ce2:	bd10      	pop	{r4, pc}

00014ce4 <cbor_mbuf_reader_get16>:
{
   14ce4:	b513      	push	{r0, r1, r4, lr}
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   14ce6:	69c4      	ldr	r4, [r0, #28]
   14ce8:	6a00      	ldr	r0, [r0, #32]
   14cea:	f10d 0306 	add.w	r3, sp, #6
   14cee:	2202      	movs	r2, #2
   14cf0:	4421      	add	r1, r4
   14cf2:	f7f9 f898 	bl	de26 <os_mbuf_copydata>
    return cbor_ntohs(val);
   14cf6:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   14cfa:	ba40      	rev16	r0, r0
}
   14cfc:	b280      	uxth	r0, r0
   14cfe:	b002      	add	sp, #8
   14d00:	bd10      	pop	{r4, pc}
	...

00014d04 <cbor_mbuf_reader_init>:

void
cbor_mbuf_reader_init(struct cbor_mbuf_reader *cb, struct os_mbuf *m,
                      int initial_offset)
{
   14d04:	b508      	push	{r3, lr}
    struct os_mbuf_pkthdr *hdr;

    cb->r.get8 = &cbor_mbuf_reader_get8;
   14d06:	4b0d      	ldr	r3, [pc, #52]	; (14d3c <cbor_mbuf_reader_init+0x38>)
   14d08:	6003      	str	r3, [r0, #0]
    cb->r.get16 = &cbor_mbuf_reader_get16;
   14d0a:	4b0d      	ldr	r3, [pc, #52]	; (14d40 <cbor_mbuf_reader_init+0x3c>)
   14d0c:	6043      	str	r3, [r0, #4]
    cb->r.get32 = &cbor_mbuf_reader_get32;
   14d0e:	4b0d      	ldr	r3, [pc, #52]	; (14d44 <cbor_mbuf_reader_init+0x40>)
   14d10:	6083      	str	r3, [r0, #8]
    cb->r.get64 = &cbor_mbuf_reader_get64;
   14d12:	4b0d      	ldr	r3, [pc, #52]	; (14d48 <cbor_mbuf_reader_init+0x44>)
   14d14:	60c3      	str	r3, [r0, #12]
    cb->r.cmp = &cbor_mbuf_reader_cmp;
   14d16:	4b0d      	ldr	r3, [pc, #52]	; (14d4c <cbor_mbuf_reader_init+0x48>)
   14d18:	6103      	str	r3, [r0, #16]
    cb->r.cpy = &cbor_mbuf_reader_cpy;
   14d1a:	4b0d      	ldr	r3, [pc, #52]	; (14d50 <cbor_mbuf_reader_init+0x4c>)
   14d1c:	6143      	str	r3, [r0, #20]

    assert(OS_MBUF_IS_PKTHDR(m));
   14d1e:	794b      	ldrb	r3, [r1, #5]
   14d20:	2b07      	cmp	r3, #7
   14d22:	d805      	bhi.n	14d30 <cbor_mbuf_reader_init+0x2c>
   14d24:	2300      	movs	r3, #0
   14d26:	461a      	mov	r2, r3
   14d28:	4619      	mov	r1, r3
   14d2a:	4618      	mov	r0, r3
   14d2c:	f7f7 fd66 	bl	c7fc <__assert_func>
    hdr = OS_MBUF_PKTHDR(m);
    cb->m = m;
    cb->init_off = initial_offset;
    cb->r.message_size = hdr->omp_len - initial_offset;
   14d30:	8a0b      	ldrh	r3, [r1, #16]
    cb->init_off = initial_offset;
   14d32:	e9c0 2107 	strd	r2, r1, [r0, #28]
    cb->r.message_size = hdr->omp_len - initial_offset;
   14d36:	1a9a      	subs	r2, r3, r2
   14d38:	6182      	str	r2, [r0, #24]
}
   14d3a:	bd08      	pop	{r3, pc}
   14d3c:	00014c7f 	.word	0x00014c7f
   14d40:	00014ce5 	.word	0x00014ce5
   14d44:	00014ccd 	.word	0x00014ccd
   14d48:	00014cb1 	.word	0x00014cb1
   14d4c:	00014c99 	.word	0x00014c99
   14d50:	00014c65 	.word	0x00014c65

00014d54 <cbor_mbuf_writer>:
#include <tinycbor/cbor.h>
#include <tinycbor/cbor_mbuf_writer.h>

int
cbor_mbuf_writer(struct cbor_encoder_writer *arg, const char *data, int len)
{
   14d54:	b538      	push	{r3, r4, r5, lr}
   14d56:	4604      	mov	r4, r0
   14d58:	4615      	mov	r5, r2
    int rc;
    struct cbor_mbuf_writer *cb = (struct cbor_mbuf_writer *) arg;

    rc = os_mbuf_append(cb->m, data, len);
   14d5a:	6880      	ldr	r0, [r0, #8]
   14d5c:	b292      	uxth	r2, r2
   14d5e:	f7f9 f804 	bl	dd6a <os_mbuf_append>
    if (rc) {
   14d62:	b918      	cbnz	r0, 14d6c <cbor_mbuf_writer+0x18>
        return CborErrorOutOfMemory;
    }
    cb->enc.bytes_written += len;
   14d64:	6862      	ldr	r2, [r4, #4]
   14d66:	442a      	add	r2, r5
   14d68:	6062      	str	r2, [r4, #4]
    return CborNoError;
}
   14d6a:	bd38      	pop	{r3, r4, r5, pc}
        return CborErrorOutOfMemory;
   14d6c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   14d70:	e7fb      	b.n	14d6a <cbor_mbuf_writer+0x16>
	...

00014d74 <cbor_mbuf_writer_init>:

void
cbor_mbuf_writer_init(struct cbor_mbuf_writer *cb, struct os_mbuf *m)
{
    cb->m = m;
    cb->enc.bytes_written = 0;
   14d74:	2300      	movs	r3, #0
   14d76:	6043      	str	r3, [r0, #4]
    cb->enc.write = &cbor_mbuf_writer;
   14d78:	4b01      	ldr	r3, [pc, #4]	; (14d80 <cbor_mbuf_writer_init+0xc>)
    cb->m = m;
   14d7a:	6081      	str	r1, [r0, #8]
    cb->enc.write = &cbor_mbuf_writer;
   14d7c:	6003      	str	r3, [r0, #0]
}
   14d7e:	4770      	bx	lr
   14d80:	00014d55 	.word	0x00014d55

00014d84 <append_to_buffer.isra.0>:
    memcpy(where, &v, sizeof(v));
}

static inline CborError append_to_buffer(CborEncoder *encoder, const void *data, size_t len)
{
    return encoder->writer->write(encoder->writer, data, len);
   14d84:	6803      	ldr	r3, [r0, #0]
   14d86:	4718      	bx	r3

00014d88 <encode_number_no_update>:
{
    return append_to_buffer(encoder, &byte, 1);
}

static inline CborError encode_number_no_update(CborEncoder *encoder, uint64_t ui, uint8_t shiftedMajorType)
{
   14d88:	b530      	push	{r4, r5, lr}
    v = cbor_htonll(v);
   14d8a:	ba19      	rev	r1, r3
{
   14d8c:	b085      	sub	sp, #20
    v = cbor_htonll(v);
   14d8e:	ba15      	rev	r5, r2
    uint64_t buf[2];
    uint8_t *const bufend = (uint8_t *)buf + sizeof(buf);
    uint8_t *bufstart = bufend - 1;
    put64(buf + 1, ui);     /* we probably have a bunch of zeros in the beginning */

    if (ui < Value8Bit) {
   14d90:	2a18      	cmp	r2, #24
    memcpy(where, &v, sizeof(v));
   14d92:	e9cd 1502 	strd	r1, r5, [sp, #8]
    if (ui < Value8Bit) {
   14d96:	f173 0100 	sbcs.w	r1, r3, #0
{
   14d9a:	f89d 4020 	ldrb.w	r4, [sp, #32]
   14d9e:	f10d 010f 	add.w	r1, sp, #15
    if (ui < Value8Bit) {
   14da2:	d20a      	bcs.n	14dba <encode_number_no_update+0x32>
        *bufstart += shiftedMajorType;
   14da4:	eb04 6415 	add.w	r4, r4, r5, lsr #24
   14da8:	f88d 400f 	strb.w	r4, [sp, #15]
            ++more;
        bufstart -= (size_t)1 << more;
        *bufstart = shiftedMajorType + Value8Bit + more;
    }

    return append_to_buffer(encoder, bufstart, bufend - bufstart);
   14dac:	ab04      	add	r3, sp, #16
   14dae:	1a5a      	subs	r2, r3, r1
   14db0:	6800      	ldr	r0, [r0, #0]
   14db2:	f7ff ffe7 	bl	14d84 <append_to_buffer.isra.0>
}
   14db6:	b005      	add	sp, #20
   14db8:	bd30      	pop	{r4, r5, pc}
        if (ui > 0xffU)
   14dba:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   14dbe:	f173 0500 	sbcs.w	r5, r3, #0
   14dc2:	bf2c      	ite	cs
   14dc4:	2501      	movcs	r5, #1
   14dc6:	2500      	movcc	r5, #0
        if (ui > 0xffffU)
   14dc8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   14dcc:	f173 0200 	sbcs.w	r2, r3, #0
            ++more;
   14dd0:	bf28      	it	cs
   14dd2:	3501      	addcs	r5, #1
        if (ui > 0xffffffffU)
   14dd4:	b103      	cbz	r3, 14dd8 <encode_number_no_update+0x50>
            ++more;
   14dd6:	3501      	adds	r5, #1
        bufstart -= (size_t)1 << more;
   14dd8:	2301      	movs	r3, #1
   14dda:	40ab      	lsls	r3, r5
   14ddc:	1ac9      	subs	r1, r1, r3
        *bufstart = shiftedMajorType + Value8Bit + more;
   14dde:	3418      	adds	r4, #24
   14de0:	442c      	add	r4, r5
   14de2:	700c      	strb	r4, [r1, #0]
   14de4:	e7e2      	b.n	14dac <encode_number_no_update+0x24>

00014de6 <encode_number>:

static inline CborError encode_number(CborEncoder *encoder, uint64_t ui, uint8_t shiftedMajorType)
{
   14de6:	b430      	push	{r4, r5}
    ++encoder->added;
   14de8:	6884      	ldr	r4, [r0, #8]
{
   14dea:	f89d 5008 	ldrb.w	r5, [sp, #8]
    ++encoder->added;
   14dee:	3401      	adds	r4, #1
   14df0:	6084      	str	r4, [r0, #8]
    return encode_number_no_update(encoder, ui, shiftedMajorType);
   14df2:	9502      	str	r5, [sp, #8]
}
   14df4:	bc30      	pop	{r4, r5}
    return encode_number_no_update(encoder, ui, shiftedMajorType);
   14df6:	f7ff bfc7 	b.w	14d88 <encode_number_no_update>

00014dfa <create_container>:

#ifdef __GNUC__
__attribute__((noinline))
#endif
static CborError create_container(CborEncoder *encoder, CborEncoder *container, size_t length, uint8_t shiftedMajorType)
{
   14dfa:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    CborError err;
    container->writer = encoder->writer;
    ++encoder->added;
   14dfc:	6884      	ldr	r4, [r0, #8]
    container->writer = encoder->writer;
   14dfe:	6806      	ldr	r6, [r0, #0]
   14e00:	600e      	str	r6, [r1, #0]
    ++encoder->added;
   14e02:	3401      	adds	r4, #1
   14e04:	6084      	str	r4, [r0, #8]
    container->added = 0;
   14e06:	2500      	movs	r5, #0
   14e08:	f003 0420 	and.w	r4, r3, #32

    cbor_static_assert(((MapType << MajorTypeShift) & CborIteratorFlag_ContainerIsMap) == CborIteratorFlag_ContainerIsMap);
    cbor_static_assert(((ArrayType << MajorTypeShift) & CborIteratorFlag_ContainerIsMap) == 0);
    container->flags = shiftedMajorType & CborIteratorFlag_ContainerIsMap;

    if (length == CborIndefiniteLength) {
   14e0c:	1c50      	adds	r0, r2, #1
    container->added = 0;
   14e0e:	608d      	str	r5, [r1, #8]
    container->flags = shiftedMajorType & CborIteratorFlag_ContainerIsMap;
   14e10:	60cc      	str	r4, [r1, #12]
    if (length == CborIndefiniteLength) {
   14e12:	d10e      	bne.n	14e32 <create_container+0x38>
        container->flags |= CborIteratorFlag_UnknownLength;
   14e14:	f044 0404 	orr.w	r4, r4, #4
   14e18:	60cc      	str	r4, [r1, #12]
        err = append_byte_to_buffer(container, shiftedMajorType + IndefiniteLength);
   14e1a:	331f      	adds	r3, #31
   14e1c:	2201      	movs	r2, #1
   14e1e:	f10d 010f 	add.w	r1, sp, #15
   14e22:	4630      	mov	r0, r6
   14e24:	f88d 300f 	strb.w	r3, [sp, #15]
    return append_to_buffer(encoder, &byte, 1);
   14e28:	f7ff ffac 	bl	14d84 <append_to_buffer.isra.0>
    }
    if (err && !isOomError(err))
        return err;

    return CborNoError;
}
   14e2c:	2000      	movs	r0, #0
   14e2e:	b004      	add	sp, #16
   14e30:	bd70      	pop	{r4, r5, r6, pc}
        err = encode_number_no_update(container, length, shiftedMajorType);
   14e32:	9300      	str	r3, [sp, #0]
   14e34:	4608      	mov	r0, r1
   14e36:	462b      	mov	r3, r5
   14e38:	f7ff ffa6 	bl	14d88 <encode_number_no_update>
   14e3c:	e7f6      	b.n	14e2c <create_container+0x32>

00014e3e <cbor_encoder_init>:
    encoder->added = 0;
   14e3e:	2300      	movs	r3, #0
    encoder->flags = flags;
   14e40:	e9c0 3202 	strd	r3, r2, [r0, #8]
    encoder->writer = writer;
   14e44:	6001      	str	r1, [r0, #0]
}
   14e46:	4770      	bx	lr

00014e48 <cbor_encode_uint>:
{
   14e48:	b507      	push	{r0, r1, r2, lr}
    return encode_number(encoder, value, UnsignedIntegerType << MajorTypeShift);
   14e4a:	2100      	movs	r1, #0
   14e4c:	9100      	str	r1, [sp, #0]
   14e4e:	f7ff ffca 	bl	14de6 <encode_number>
}
   14e52:	b003      	add	sp, #12
   14e54:	f85d fb04 	ldr.w	pc, [sp], #4

00014e58 <cbor_encode_int>:
{
   14e58:	b507      	push	{r0, r1, r2, lr}
    uint64_t ui = value >> 63;              /* extend sign to whole length */
   14e5a:	17d9      	asrs	r1, r3, #31
    return encode_number(encoder, ui, majorType);
   14e5c:	f001 0120 	and.w	r1, r1, #32
   14e60:	ea82 72e3 	eor.w	r2, r2, r3, asr #31
   14e64:	9100      	str	r1, [sp, #0]
   14e66:	ea83 73e3 	eor.w	r3, r3, r3, asr #31
   14e6a:	f7ff ffbc 	bl	14de6 <encode_number>
}
   14e6e:	b003      	add	sp, #12
   14e70:	f85d fb04 	ldr.w	pc, [sp], #4

00014e74 <cbor_encode_simple_value>:
    if (value >= HalfPrecisionFloat && value <= Break)
   14e74:	f1a1 0319 	sub.w	r3, r1, #25
   14e78:	2b06      	cmp	r3, #6
{
   14e7a:	b507      	push	{r0, r1, r2, lr}
   14e7c:	460a      	mov	r2, r1
    if (value >= HalfPrecisionFloat && value <= Break)
   14e7e:	d907      	bls.n	14e90 <cbor_encode_simple_value+0x1c>
    return encode_number(encoder, value, SimpleTypesType << MajorTypeShift);
   14e80:	23e0      	movs	r3, #224	; 0xe0
   14e82:	9300      	str	r3, [sp, #0]
   14e84:	2300      	movs	r3, #0
   14e86:	f7ff ffae 	bl	14de6 <encode_number>
}
   14e8a:	b003      	add	sp, #12
   14e8c:	f85d fb04 	ldr.w	pc, [sp], #4
        return CborErrorIllegalSimpleType;
   14e90:	f44f 7083 	mov.w	r0, #262	; 0x106
   14e94:	e7f9      	b.n	14e8a <cbor_encode_simple_value+0x16>

00014e96 <cbor_encode_byte_string>:
{
   14e96:	b530      	push	{r4, r5, lr}
   14e98:	b085      	sub	sp, #20
    CborError err = encode_number(encoder, length, shiftedMajorType);
   14e9a:	2340      	movs	r3, #64	; 0x40
{
   14e9c:	4604      	mov	r4, r0
    CborError err = encode_number(encoder, length, shiftedMajorType);
   14e9e:	9300      	str	r3, [sp, #0]
   14ea0:	2300      	movs	r3, #0
{
   14ea2:	9103      	str	r1, [sp, #12]
   14ea4:	4615      	mov	r5, r2
    CborError err = encode_number(encoder, length, shiftedMajorType);
   14ea6:	f7ff ff9e 	bl	14de6 <encode_number>
    return append_to_buffer(encoder, string, length);
   14eaa:	9903      	ldr	r1, [sp, #12]
   14eac:	6820      	ldr	r0, [r4, #0]
   14eae:	462a      	mov	r2, r5
}
   14eb0:	b005      	add	sp, #20
   14eb2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return append_to_buffer(encoder, string, length);
   14eb6:	f7ff bf65 	b.w	14d84 <append_to_buffer.isra.0>

00014eba <cbor_encode_text_string>:
{
   14eba:	b530      	push	{r4, r5, lr}
   14ebc:	b085      	sub	sp, #20
    CborError err = encode_number(encoder, length, shiftedMajorType);
   14ebe:	2360      	movs	r3, #96	; 0x60
{
   14ec0:	4604      	mov	r4, r0
    CborError err = encode_number(encoder, length, shiftedMajorType);
   14ec2:	9300      	str	r3, [sp, #0]
   14ec4:	2300      	movs	r3, #0
{
   14ec6:	9103      	str	r1, [sp, #12]
   14ec8:	4615      	mov	r5, r2
    CborError err = encode_number(encoder, length, shiftedMajorType);
   14eca:	f7ff ff8c 	bl	14de6 <encode_number>
    return append_to_buffer(encoder, string, length);
   14ece:	9903      	ldr	r1, [sp, #12]
   14ed0:	6820      	ldr	r0, [r4, #0]
   14ed2:	462a      	mov	r2, r5
}
   14ed4:	b005      	add	sp, #20
   14ed6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return append_to_buffer(encoder, string, length);
   14eda:	f7ff bf53 	b.w	14d84 <append_to_buffer.isra.0>

00014ede <cbor_encoder_create_array>:
 *
 * \sa cbor_encoder_create_map
 */
CborError cbor_encoder_create_array(CborEncoder *encoder, CborEncoder *arrayEncoder, size_t length)
{
    return create_container(encoder, arrayEncoder, length, ArrayType << MajorTypeShift);
   14ede:	2380      	movs	r3, #128	; 0x80
   14ee0:	f7ff bf8b 	b.w	14dfa <create_container>

00014ee4 <cbor_encoder_create_map>:
 * value, this function returns error CborErrorDataTooLarge.
 *
 * \sa cbor_encoder_create_array
 */
CborError cbor_encoder_create_map(CborEncoder *encoder, CborEncoder *mapEncoder, size_t length)
{
   14ee4:	b410      	push	{r4}
    if (length != CborIndefiniteLength && length > SIZE_MAX / 2)
   14ee6:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
   14eea:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   14eee:	42a3      	cmp	r3, r4
   14ef0:	d304      	bcc.n	14efc <cbor_encoder_create_map+0x18>
        return CborErrorDataTooLarge;
    return create_container(encoder, mapEncoder, length, MapType << MajorTypeShift);
}
   14ef2:	f85d 4b04 	ldr.w	r4, [sp], #4
    return create_container(encoder, mapEncoder, length, MapType << MajorTypeShift);
   14ef6:	23a0      	movs	r3, #160	; 0xa0
   14ef8:	f7ff bf7f 	b.w	14dfa <create_container>
}
   14efc:	f44f 6080 	mov.w	r0, #1024	; 0x400
   14f00:	f85d 4b04 	ldr.w	r4, [sp], #4
   14f04:	4770      	bx	lr

00014f06 <cbor_encoder_close_container>:
 */
CborError cbor_encoder_close_container(CborEncoder *encoder, const CborEncoder *containerEncoder)
{
    encoder->writer = containerEncoder->writer;

    if (containerEncoder->flags & CborIteratorFlag_UnknownLength)
   14f06:	68cb      	ldr	r3, [r1, #12]
{
   14f08:	b513      	push	{r0, r1, r4, lr}
    if (containerEncoder->flags & CborIteratorFlag_UnknownLength)
   14f0a:	f013 0304 	ands.w	r3, r3, #4
    encoder->writer = containerEncoder->writer;
   14f0e:	680c      	ldr	r4, [r1, #0]
   14f10:	6004      	str	r4, [r0, #0]
    if (containerEncoder->flags & CborIteratorFlag_UnknownLength)
   14f12:	d00a      	beq.n	14f2a <cbor_encoder_close_container+0x24>
        return append_byte_to_buffer(encoder, BreakByte);
   14f14:	23ff      	movs	r3, #255	; 0xff
   14f16:	2201      	movs	r2, #1
   14f18:	f10d 0107 	add.w	r1, sp, #7
   14f1c:	4620      	mov	r0, r4
   14f1e:	f88d 3007 	strb.w	r3, [sp, #7]
    return append_to_buffer(encoder, &byte, 1);
   14f22:	f7ff ff2f 	bl	14d84 <append_to_buffer.isra.0>
    return CborNoError;
}
   14f26:	b002      	add	sp, #8
   14f28:	bd10      	pop	{r4, pc}
    return CborNoError;
   14f2a:	4618      	mov	r0, r3
   14f2c:	e7fb      	b.n	14f26 <cbor_encoder_close_container+0x20>

00014f2e <is_fixed_type>:
    return CborNoError;
}

static bool is_fixed_type(uint8_t type)
{
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
   14f2e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   14f32:	2840      	cmp	r0, #64	; 0x40
   14f34:	d003      	beq.n	14f3e <is_fixed_type+0x10>
   14f36:	3880      	subs	r0, #128	; 0x80
   14f38:	bf18      	it	ne
   14f3a:	2001      	movne	r0, #1
   14f3c:	4770      	bx	lr
   14f3e:	2000      	movs	r0, #0
           type != CborMapType;
}
   14f40:	4770      	bx	lr

00014f42 <iterate_noop>:
    (void)d;
    (void)dst;
    (void)src_offset;
    (void)len;
    return true;
}
   14f42:	2001      	movs	r0, #1
   14f44:	4770      	bx	lr

00014f46 <preparse_value>:
{
   14f46:	b570      	push	{r4, r5, r6, lr}
    it->type = CborInvalidType;
   14f48:	23ff      	movs	r3, #255	; 0xff
    const CborParser *parser = it->parser;
   14f4a:	6805      	ldr	r5, [r0, #0]
    it->type = CborInvalidType;
   14f4c:	7383      	strb	r3, [r0, #14]
    if (it->offset == parser->end)
   14f4e:	6841      	ldr	r1, [r0, #4]
   14f50:	686b      	ldr	r3, [r5, #4]
   14f52:	4299      	cmp	r1, r3
{
   14f54:	4604      	mov	r4, r0
    if (it->offset == parser->end)
   14f56:	d102      	bne.n	14f5e <preparse_value+0x18>
        return CborErrorUnexpectedEOF;
   14f58:	f240 1001 	movw	r0, #257	; 0x101
}
   14f5c:	bd70      	pop	{r4, r5, r6, pc}
    uint8_t descriptor = parser->d->get8(parser->d, it->offset);
   14f5e:	6828      	ldr	r0, [r5, #0]
   14f60:	6803      	ldr	r3, [r0, #0]
   14f62:	4798      	blx	r3
    uint8_t type = descriptor & MajorTypeMask;
   14f64:	f000 02e0 	and.w	r2, r0, #224	; 0xe0
    it->extra = (descriptor &= SmallValueMask);
   14f68:	f000 001f 	and.w	r0, r0, #31
    it->flags = 0;
   14f6c:	2300      	movs	r3, #0
    if (descriptor > Value64Bit) {
   14f6e:	281b      	cmp	r0, #27
    it->type = type;
   14f70:	73a2      	strb	r2, [r4, #14]
    it->flags = 0;
   14f72:	73e3      	strb	r3, [r4, #15]
    it->extra = (descriptor &= SmallValueMask);
   14f74:	81a0      	strh	r0, [r4, #12]
    if (descriptor > Value64Bit) {
   14f76:	d917      	bls.n	14fa8 <preparse_value+0x62>
        if (unlikely(descriptor != IndefiniteLength))
   14f78:	281f      	cmp	r0, #31
   14f7a:	d007      	beq.n	14f8c <preparse_value+0x46>
            return type == CborSimpleType ? CborErrorUnknownType : CborErrorIllegalNumber;
   14f7c:	f240 1005 	movw	r0, #261	; 0x105
   14f80:	f240 1303 	movw	r3, #259	; 0x103
   14f84:	2ae0      	cmp	r2, #224	; 0xe0
   14f86:	bf08      	it	eq
   14f88:	4618      	moveq	r0, r3
   14f8a:	e7e7      	b.n	14f5c <preparse_value+0x16>
        if (likely(!is_fixed_type(type))) {
   14f8c:	4610      	mov	r0, r2
   14f8e:	f7ff ffce 	bl	14f2e <is_fixed_type>
   14f92:	b910      	cbnz	r0, 14f9a <preparse_value+0x54>
            it->flags |= CborIteratorFlag_UnknownLength;
   14f94:	2304      	movs	r3, #4
   14f96:	73e3      	strb	r3, [r4, #15]
            return CborNoError;
   14f98:	e7e0      	b.n	14f5c <preparse_value+0x16>
        return type == CborSimpleType ? CborErrorUnexpectedBreak : CborErrorIllegalNumber;
   14f9a:	2ae0      	cmp	r2, #224	; 0xe0
   14f9c:	f240 1005 	movw	r0, #261	; 0x105
   14fa0:	bf08      	it	eq
   14fa2:	f44f 7081 	moveq.w	r0, #258	; 0x102
   14fa6:	e7d9      	b.n	14f5c <preparse_value+0x16>
    size_t bytesNeeded = descriptor < Value8Bit ? 0 : (1 << (descriptor - Value8Bit));
   14fa8:	2817      	cmp	r0, #23
   14faa:	bf82      	ittt	hi
   14fac:	f1a0 0118 	subhi.w	r1, r0, #24
   14fb0:	2301      	movhi	r3, #1
   14fb2:	408b      	lslhi	r3, r1
    if (bytesNeeded + 1 > (size_t)(parser->end - it->offset))
   14fb4:	686e      	ldr	r6, [r5, #4]
   14fb6:	6861      	ldr	r1, [r4, #4]
   14fb8:	3301      	adds	r3, #1
   14fba:	1a76      	subs	r6, r6, r1
   14fbc:	42b3      	cmp	r3, r6
   14fbe:	d8cb      	bhi.n	14f58 <preparse_value+0x12>
    if (majortype == NegativeIntegerType) {
   14fc0:	2a20      	cmp	r2, #32
    uint8_t majortype = type >> MajorTypeShift;
   14fc2:	ea4f 1352 	mov.w	r3, r2, lsr #5
    if (majortype == NegativeIntegerType) {
   14fc6:	d10c      	bne.n	14fe2 <preparse_value+0x9c>
        it->type = CborIntegerType;
   14fc8:	f44f 7300 	mov.w	r3, #512	; 0x200
   14fcc:	81e3      	strh	r3, [r4, #14]
    if (descriptor < Value8Bit)
   14fce:	2817      	cmp	r0, #23
   14fd0:	d916      	bls.n	15000 <preparse_value+0xba>
    if (descriptor == Value8Bit)
   14fd2:	2818      	cmp	r0, #24
   14fd4:	d12a      	bne.n	1502c <preparse_value+0xe6>
        it->extra = parser->d->get8(parser->d, it->offset + 1);
   14fd6:	6828      	ldr	r0, [r5, #0]
   14fd8:	6803      	ldr	r3, [r0, #0]
        it->extra = parser->d->get16(parser->d, it->offset + 1);
   14fda:	3101      	adds	r1, #1
   14fdc:	4798      	blx	r3
   14fde:	81a0      	strh	r0, [r4, #12]
   14fe0:	e00e      	b.n	15000 <preparse_value+0xba>
    } else if (majortype == SimpleTypesType) {
   14fe2:	2b07      	cmp	r3, #7
   14fe4:	d1f3      	bne.n	14fce <preparse_value+0x88>
        switch (descriptor) {
   14fe6:	3814      	subs	r0, #20
   14fe8:	2807      	cmp	r0, #7
   14fea:	d809      	bhi.n	15000 <preparse_value+0xba>
   14fec:	e8df f000 	tbb	[pc, r0]
   14ff0:	0c0c0c04 	.word	0x0c0c0c04
   14ff4:	0a0a0c11 	.word	0x0a0a0c11
            it->extra = false;
   14ff8:	2300      	movs	r3, #0
            it->type = CborBooleanType;
   14ffa:	22f5      	movs	r2, #245	; 0xf5
            it->extra = false;
   14ffc:	81a3      	strh	r3, [r4, #12]
            it->type = CborBooleanType;
   14ffe:	73a2      	strb	r2, [r4, #14]
        switch (descriptor) {
   15000:	2000      	movs	r0, #0
   15002:	e7ab      	b.n	14f5c <preparse_value+0x16>
            it->flags |= CborIteratorFlag_IntegerValueTooLarge;
   15004:	2301      	movs	r3, #1
   15006:	73e3      	strb	r3, [r4, #15]
            it->type = parser->d->get8(parser->d, it->offset);
   15008:	6828      	ldr	r0, [r5, #0]
   1500a:	6803      	ldr	r3, [r0, #0]
   1500c:	4798      	blx	r3
   1500e:	73a0      	strb	r0, [r4, #14]
            break;
   15010:	e7f6      	b.n	15000 <preparse_value+0xba>
            it->extra = parser->d->get8(parser->d, it->offset + 1);
   15012:	6828      	ldr	r0, [r5, #0]
   15014:	3101      	adds	r1, #1
   15016:	6803      	ldr	r3, [r0, #0]
   15018:	4798      	blx	r3
   1501a:	b280      	uxth	r0, r0
            if (unlikely(it->extra < 32)) {
   1501c:	281f      	cmp	r0, #31
            it->extra = parser->d->get8(parser->d, it->offset + 1);
   1501e:	81a0      	strh	r0, [r4, #12]
            if (unlikely(it->extra < 32)) {
   15020:	d8ee      	bhi.n	15000 <preparse_value+0xba>
                it->type = CborInvalidType;
   15022:	23ff      	movs	r3, #255	; 0xff
   15024:	73a3      	strb	r3, [r4, #14]
                return CborErrorIllegalSimpleType;
   15026:	f44f 7083 	mov.w	r0, #262	; 0x106
   1502a:	e797      	b.n	14f5c <preparse_value+0x16>
    else if (descriptor == Value16Bit)
   1502c:	2819      	cmp	r0, #25
   1502e:	d102      	bne.n	15036 <preparse_value+0xf0>
        it->extra = parser->d->get16(parser->d, it->offset + 1);
   15030:	6828      	ldr	r0, [r5, #0]
   15032:	6843      	ldr	r3, [r0, #4]
   15034:	e7d1      	b.n	14fda <preparse_value+0x94>
        it->flags |= CborIteratorFlag_IntegerValueTooLarge;     /* Value32Bit or Value64Bit */
   15036:	7be3      	ldrb	r3, [r4, #15]
   15038:	f043 0301 	orr.w	r3, r3, #1
   1503c:	73e3      	strb	r3, [r4, #15]
   1503e:	e7df      	b.n	15000 <preparse_value+0xba>

00015040 <preparse_next_value>:
{
   15040:	b538      	push	{r3, r4, r5, lr}
    if (it->remaining != UINT32_MAX) {
   15042:	6885      	ldr	r5, [r0, #8]
   15044:	1c6b      	adds	r3, r5, #1
{
   15046:	4604      	mov	r4, r0
    if (it->remaining != UINT32_MAX) {
   15048:	d009      	beq.n	1505e <preparse_next_value+0x1e>
        if (it->type != CborTagType && !--it->remaining) {
   1504a:	7b83      	ldrb	r3, [r0, #14]
   1504c:	2bc0      	cmp	r3, #192	; 0xc0
   1504e:	d017      	beq.n	15080 <preparse_next_value+0x40>
   15050:	3d01      	subs	r5, #1
   15052:	6085      	str	r5, [r0, #8]
   15054:	b9a5      	cbnz	r5, 15080 <preparse_next_value+0x40>
            it->type = CborInvalidType;
   15056:	23ff      	movs	r3, #255	; 0xff
   15058:	7383      	strb	r3, [r0, #14]
}
   1505a:	2000      	movs	r0, #0
   1505c:	bd38      	pop	{r3, r4, r5, pc}
    } else if (it->remaining == UINT32_MAX && it->offset != it->parser->end &&
   1505e:	e9d0 3100 	ldrd	r3, r1, [r0]
   15062:	685a      	ldr	r2, [r3, #4]
   15064:	4291      	cmp	r1, r2
   15066:	d00b      	beq.n	15080 <preparse_next_value+0x40>
        it->parser->d->get8(it->parser->d, it->offset) == (uint8_t)BreakByte) {
   15068:	6818      	ldr	r0, [r3, #0]
   1506a:	6803      	ldr	r3, [r0, #0]
   1506c:	4798      	blx	r3
    } else if (it->remaining == UINT32_MAX && it->offset != it->parser->end &&
   1506e:	28ff      	cmp	r0, #255	; 0xff
   15070:	d106      	bne.n	15080 <preparse_next_value+0x40>
        ++it->offset;
   15072:	6863      	ldr	r3, [r4, #4]
        it->type = CborInvalidType;
   15074:	73a5      	strb	r5, [r4, #14]
        ++it->offset;
   15076:	3301      	adds	r3, #1
   15078:	6063      	str	r3, [r4, #4]
        it->remaining = 0;
   1507a:	2300      	movs	r3, #0
   1507c:	60a3      	str	r3, [r4, #8]
        return CborNoError;
   1507e:	e7ec      	b.n	1505a <preparse_next_value+0x1a>
    return preparse_value(it);
   15080:	4620      	mov	r0, r4
}
   15082:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return preparse_value(it);
   15086:	f7ff bf5e 	b.w	14f46 <preparse_value>

0001508a <extract_number>:
    memcpy(&result, ptr, sizeof(result));
    return cbor_ntohll(result);
}

static inline CborError extract_number(const CborParser *p, int *offset, uint64_t *len)
{
   1508a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1508e:	4607      	mov	r7, r0
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   15090:	6800      	ldr	r0, [r0, #0]
{
   15092:	460d      	mov	r5, r1
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   15094:	6803      	ldr	r3, [r0, #0]
   15096:	6809      	ldr	r1, [r1, #0]
{
   15098:	4614      	mov	r4, r2
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   1509a:	4798      	blx	r3
    ++*offset;
   1509c:	6829      	ldr	r1, [r5, #0]
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   1509e:	f000 031f 	and.w	r3, r0, #31
    ++*offset;
   150a2:	3101      	adds	r1, #1
    *len = 1;
   150a4:	f04f 0801 	mov.w	r8, #1
   150a8:	f04f 0900 	mov.w	r9, #0
    if (additional_information < Value8Bit) {
   150ac:	2b17      	cmp	r3, #23
    ++*offset;
   150ae:	6029      	str	r1, [r5, #0]
    *len = 1;
   150b0:	e9c4 8900 	strd	r8, r9, [r4]
    if (additional_information < Value8Bit) {
   150b4:	d804      	bhi.n	150c0 <extract_number+0x36>
        *len = additional_information;
   150b6:	2000      	movs	r0, #0
   150b8:	e9c4 3000 	strd	r3, r0, [r4]
    } else {
        *len =  p->d->get64(p->d, *offset);
    }
    *offset += bytesNeeded;
    return CborNoError;
}
   150bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (unlikely(additional_information > Value64Bit))
   150c0:	2b1b      	cmp	r3, #27
   150c2:	d820      	bhi.n	15106 <extract_number+0x7c>
    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   150c4:	3b18      	subs	r3, #24
   150c6:	2601      	movs	r6, #1
   150c8:	409e      	lsls	r6, r3
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   150ca:	687b      	ldr	r3, [r7, #4]
   150cc:	1a5b      	subs	r3, r3, r1
   150ce:	42b3      	cmp	r3, r6
   150d0:	d31c      	bcc.n	1510c <extract_number+0x82>
    } else if (bytesNeeded == 1) {
   150d2:	2e01      	cmp	r6, #1
        *len = p->d->get8(p->d, *offset);
   150d4:	6838      	ldr	r0, [r7, #0]
    } else if (bytesNeeded == 1) {
   150d6:	d109      	bne.n	150ec <extract_number+0x62>
        *len = p->d->get8(p->d, *offset);
   150d8:	6803      	ldr	r3, [r0, #0]
        *len =  p->d->get16(p->d, *offset);
   150da:	4798      	blx	r3
   150dc:	2300      	movs	r3, #0
   150de:	6020      	str	r0, [r4, #0]
   150e0:	6063      	str	r3, [r4, #4]
    *offset += bytesNeeded;
   150e2:	682b      	ldr	r3, [r5, #0]
   150e4:	4433      	add	r3, r6
   150e6:	602b      	str	r3, [r5, #0]
    return CborNoError;
   150e8:	2000      	movs	r0, #0
   150ea:	e7e7      	b.n	150bc <extract_number+0x32>
    } else if (bytesNeeded == 2) {
   150ec:	2e02      	cmp	r6, #2
   150ee:	d101      	bne.n	150f4 <extract_number+0x6a>
        *len =  p->d->get16(p->d, *offset);
   150f0:	6843      	ldr	r3, [r0, #4]
   150f2:	e7f2      	b.n	150da <extract_number+0x50>
    } else if (bytesNeeded == 4) {
   150f4:	2e04      	cmp	r6, #4
   150f6:	d101      	bne.n	150fc <extract_number+0x72>
        *len =  p->d->get32(p->d, *offset);
   150f8:	6883      	ldr	r3, [r0, #8]
   150fa:	e7ee      	b.n	150da <extract_number+0x50>
        *len =  p->d->get64(p->d, *offset);
   150fc:	68c3      	ldr	r3, [r0, #12]
   150fe:	4798      	blx	r3
   15100:	e9c4 0100 	strd	r0, r1, [r4]
   15104:	e7ed      	b.n	150e2 <extract_number+0x58>
        return CborErrorIllegalNumber;
   15106:	f240 1005 	movw	r0, #261	; 0x105
   1510a:	e7d7      	b.n	150bc <extract_number+0x32>
        return CborErrorUnexpectedEOF;
   1510c:	f240 1001 	movw	r0, #257	; 0x101
   15110:	e7d4      	b.n	150bc <extract_number+0x32>

00015112 <advance_internal>:
{
   15112:	b513      	push	{r0, r1, r4, lr}
   15114:	4604      	mov	r4, r0
    CborError err = extract_number(it->parser, &it->offset,  &length);
   15116:	1d01      	adds	r1, r0, #4
   15118:	466a      	mov	r2, sp
   1511a:	6800      	ldr	r0, [r0, #0]
   1511c:	f7ff ffb5 	bl	1508a <extract_number>
    assert(err == CborNoError);
   15120:	b128      	cbz	r0, 1512e <advance_internal+0x1c>
   15122:	2300      	movs	r3, #0
   15124:	461a      	mov	r2, r3
   15126:	4619      	mov	r1, r3
   15128:	4618      	mov	r0, r3
   1512a:	f7f7 fb67 	bl	c7fc <__assert_func>
    if (it->type == CborByteStringType || it->type == CborTextStringType) {
   1512e:	7ba3      	ldrb	r3, [r4, #14]
   15130:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   15134:	2b40      	cmp	r3, #64	; 0x40
   15136:	d109      	bne.n	1514c <advance_internal+0x3a>
        assert(length == (size_t)length);
   15138:	e9dd 2300 	ldrd	r2, r3, [sp]
   1513c:	2b00      	cmp	r3, #0
   1513e:	d1f0      	bne.n	15122 <advance_internal+0x10>
        assert((it->flags & CborIteratorFlag_UnknownLength) == 0);
   15140:	7be3      	ldrb	r3, [r4, #15]
   15142:	075b      	lsls	r3, r3, #29
   15144:	d4ed      	bmi.n	15122 <advance_internal+0x10>
        it->offset += length;
   15146:	6863      	ldr	r3, [r4, #4]
   15148:	4413      	add	r3, r2
   1514a:	6063      	str	r3, [r4, #4]
    return preparse_next_value(it);
   1514c:	4620      	mov	r0, r4
   1514e:	f7ff ff77 	bl	15040 <preparse_next_value>
}
   15152:	b002      	add	sp, #8
   15154:	bd10      	pop	{r4, pc}

00015156 <cbor_value_advance.part.0>:
CborError cbor_value_advance_fixed(CborValue *it)
   15156:	b508      	push	{r3, lr}
    assert(is_fixed_type(it->type));
   15158:	2300      	movs	r3, #0
   1515a:	461a      	mov	r2, r3
   1515c:	4619      	mov	r1, r3
   1515e:	4618      	mov	r0, r3
   15160:	f7f7 fb4c 	bl	c7fc <__assert_func>

00015164 <iterate_string_chunks>:

static CborError iterate_string_chunks(const CborValue *value, char *buffer, size_t *buflen,
                                       bool *result, CborValue *next, IterateFunction func)
{
   15164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15168:	461e      	mov	r6, r3
    assert(cbor_value_is_byte_string(value) || cbor_value_is_text_string(value));
   1516a:	7b83      	ldrb	r3, [r0, #14]
   1516c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   15170:	2b40      	cmp	r3, #64	; 0x40
{
   15172:	b087      	sub	sp, #28
   15174:	4604      	mov	r4, r0
   15176:	4689      	mov	r9, r1
   15178:	4690      	mov	r8, r2
    assert(cbor_value_is_byte_string(value) || cbor_value_is_text_string(value));
   1517a:	d005      	beq.n	15188 <iterate_string_chunks+0x24>
   1517c:	2300      	movs	r3, #0
   1517e:	461a      	mov	r2, r3
   15180:	4619      	mov	r1, r3
   15182:	4618      	mov	r0, r3
   15184:	f7f7 fb3a 	bl	c7fc <__assert_func>

    size_t total;
    CborError err;
    int offset = value->offset;
    if (cbor_value_is_length_known(value)) {
   15188:	7bc2      	ldrb	r2, [r0, #15]
    int offset = value->offset;
   1518a:	6843      	ldr	r3, [r0, #4]
   1518c:	9303      	str	r3, [sp, #12]
    if (cbor_value_is_length_known(value)) {
   1518e:	0752      	lsls	r2, r2, #29
   15190:	d447      	bmi.n	15222 <iterate_string_chunks+0xbe>
    CborError err = extract_number(parser, offset, &v);
   15192:	6800      	ldr	r0, [r0, #0]
   15194:	aa04      	add	r2, sp, #16
   15196:	a903      	add	r1, sp, #12
   15198:	f7ff ff77 	bl	1508a <extract_number>
    if (err) {
   1519c:	b988      	cbnz	r0, 151c2 <iterate_string_chunks+0x5e>
    *len = v;
   1519e:	f8dd a010 	ldr.w	sl, [sp, #16]
    if (v != *len)
   151a2:	9b05      	ldr	r3, [sp, #20]
   151a4:	4283      	cmp	r3, r0
   151a6:	bf08      	it	eq
   151a8:	45d2      	cmpeq	sl, sl
    *len = v;
   151aa:	4655      	mov	r5, sl
    if (v != *len)
   151ac:	d15b      	bne.n	15266 <iterate_string_chunks+0x102>
        /* easy case: fixed length */
        err = extract_length(value->parser, &offset, &total);
        if (err)
            return err;
        if (total > (size_t)(value->parser->end - offset))
   151ae:	f8d4 c000 	ldr.w	ip, [r4]
   151b2:	9a03      	ldr	r2, [sp, #12]
   151b4:	f8dc 3004 	ldr.w	r3, [ip, #4]
   151b8:	1a9b      	subs	r3, r3, r2
   151ba:	4553      	cmp	r3, sl
   151bc:	d204      	bcs.n	151c8 <iterate_string_chunks+0x64>
            return CborErrorUnexpectedEOF;
   151be:	f240 1001 	movw	r0, #257	; 0x101
        *next = *value;
        next->offset = offset;
        return preparse_next_value(next);
    }
    return CborNoError;
}
   151c2:	b007      	add	sp, #28
   151c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (total <= *buflen)
   151c8:	f8d8 3000 	ldr.w	r3, [r8]
   151cc:	4553      	cmp	r3, sl
   151ce:	d308      	bcc.n	151e2 <iterate_string_chunks+0x7e>
            *result = !!func(value->parser->d, buffer, offset, total);
   151d0:	f8dc 0000 	ldr.w	r0, [ip]
   151d4:	9f11      	ldr	r7, [sp, #68]	; 0x44
   151d6:	4653      	mov	r3, sl
   151d8:	4649      	mov	r1, r9
   151da:	47b8      	blx	r7
   151dc:	3800      	subs	r0, #0
   151de:	bf18      	it	ne
   151e0:	2001      	movne	r0, #1
        offset += total;
   151e2:	9b03      	ldr	r3, [sp, #12]
            *result = false;
   151e4:	7030      	strb	r0, [r6, #0]
        offset += total;
   151e6:	4453      	add	r3, sl
                ++offset;
   151e8:	9303      	str	r3, [sp, #12]
    if (*result && *buflen > total) {
   151ea:	7833      	ldrb	r3, [r6, #0]
   151ec:	b14b      	cbz	r3, 15202 <iterate_string_chunks+0x9e>
   151ee:	f8d8 3000 	ldr.w	r3, [r8]
   151f2:	42ab      	cmp	r3, r5
   151f4:	d905      	bls.n	15202 <iterate_string_chunks+0x9e>
        if(buffer) {
   151f6:	f1b9 0f00 	cmp.w	r9, #0
   151fa:	d002      	beq.n	15202 <iterate_string_chunks+0x9e>
            *(buffer + total) = '\0';
   151fc:	2300      	movs	r3, #0
   151fe:	f809 3005 	strb.w	r3, [r9, r5]
    if (next) {
   15202:	9b10      	ldr	r3, [sp, #64]	; 0x40
    *buflen = total;
   15204:	f8c8 5000 	str.w	r5, [r8]
    if (next) {
   15208:	2b00      	cmp	r3, #0
   1520a:	d054      	beq.n	152b6 <iterate_string_chunks+0x152>
        *next = *value;
   1520c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   15210:	9c10      	ldr	r4, [sp, #64]	; 0x40
   15212:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        next->offset = offset;
   15216:	9b03      	ldr	r3, [sp, #12]
   15218:	6063      	str	r3, [r4, #4]
        return preparse_next_value(next);
   1521a:	4620      	mov	r0, r4
   1521c:	f7ff ff10 	bl	15040 <preparse_next_value>
   15220:	e7cf      	b.n	151c2 <iterate_string_chunks+0x5e>
        ++offset;
   15222:	3301      	adds	r3, #1
   15224:	9303      	str	r3, [sp, #12]
        total = 0;
   15226:	2500      	movs	r5, #0
        *result = true;
   15228:	2301      	movs	r3, #1
   1522a:	7033      	strb	r3, [r6, #0]
                *result = false;
   1522c:	46ab      	mov	fp, r5
            if (offset == value->parser->end)
   1522e:	6823      	ldr	r3, [r4, #0]
   15230:	9903      	ldr	r1, [sp, #12]
   15232:	685a      	ldr	r2, [r3, #4]
   15234:	428a      	cmp	r2, r1
   15236:	d0c2      	beq.n	151be <iterate_string_chunks+0x5a>
            val = value->parser->d->get8(value->parser->d, offset);
   15238:	6818      	ldr	r0, [r3, #0]
   1523a:	6803      	ldr	r3, [r0, #0]
   1523c:	4798      	blx	r3
            if (val == (uint8_t)BreakByte) {
   1523e:	28ff      	cmp	r0, #255	; 0xff
   15240:	d102      	bne.n	15248 <iterate_string_chunks+0xe4>
                ++offset;
   15242:	9b03      	ldr	r3, [sp, #12]
   15244:	3301      	adds	r3, #1
   15246:	e7cf      	b.n	151e8 <iterate_string_chunks+0x84>
            if ((val & MajorTypeMask) != value->type)
   15248:	7ba3      	ldrb	r3, [r4, #14]
   1524a:	f020 001f 	bic.w	r0, r0, #31
   1524e:	4298      	cmp	r0, r3
   15250:	d12e      	bne.n	152b0 <iterate_string_chunks+0x14c>
    CborError err = extract_number(parser, offset, &v);
   15252:	6820      	ldr	r0, [r4, #0]
   15254:	aa04      	add	r2, sp, #16
   15256:	a903      	add	r1, sp, #12
   15258:	f7ff ff17 	bl	1508a <extract_number>
    if (err) {
   1525c:	2800      	cmp	r0, #0
   1525e:	d1b0      	bne.n	151c2 <iterate_string_chunks+0x5e>
    *len = v;
   15260:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
    if (v != *len)
   15264:	b112      	cbz	r2, 1526c <iterate_string_chunks+0x108>
                return CborErrorDataTooLarge;
   15266:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1526a:	e7aa      	b.n	151c2 <iterate_string_chunks+0x5e>
#endif

static inline bool add_check_overflow(size_t v1, size_t v2, size_t *r)
{
#if ((defined(__GNUC__) && (__GNUC__ >= 5)) && !defined(__INTEL_COMPILER)) || __has_builtin(__builtin_add_overflow)
    return __builtin_add_overflow(v1, v2, r);
   1526c:	eb15 0a03 	adds.w	sl, r5, r3
   15270:	d2f9      	bcs.n	15266 <iterate_string_chunks+0x102>
            if (chunkLen > (size_t)(value->parser->end - offset))
   15272:	6820      	ldr	r0, [r4, #0]
   15274:	9a03      	ldr	r2, [sp, #12]
   15276:	6841      	ldr	r1, [r0, #4]
   15278:	1a89      	subs	r1, r1, r2
   1527a:	4299      	cmp	r1, r3
   1527c:	d39f      	bcc.n	151be <iterate_string_chunks+0x5a>
            if (*result && *buflen >= newTotal)
   1527e:	7831      	ldrb	r1, [r6, #0]
   15280:	b199      	cbz	r1, 152aa <iterate_string_chunks+0x146>
   15282:	f8d8 1000 	ldr.w	r1, [r8]
   15286:	4551      	cmp	r1, sl
   15288:	d30f      	bcc.n	152aa <iterate_string_chunks+0x146>
                *result = !!func(value->parser->d, buffer + total, offset, chunkLen);
   1528a:	9301      	str	r3, [sp, #4]
   1528c:	eb09 0105 	add.w	r1, r9, r5
   15290:	6800      	ldr	r0, [r0, #0]
   15292:	9d11      	ldr	r5, [sp, #68]	; 0x44
   15294:	47a8      	blx	r5
   15296:	3800      	subs	r0, #0
   15298:	bf18      	it	ne
   1529a:	2001      	movne	r0, #1
   1529c:	9b01      	ldr	r3, [sp, #4]
   1529e:	7030      	strb	r0, [r6, #0]
            offset += chunkLen;
   152a0:	9a03      	ldr	r2, [sp, #12]
   152a2:	4413      	add	r3, r2
   152a4:	9303      	str	r3, [sp, #12]
   152a6:	4655      	mov	r5, sl
        while (true) {
   152a8:	e7c1      	b.n	1522e <iterate_string_chunks+0xca>
                *result = false;
   152aa:	f886 b000 	strb.w	fp, [r6]
   152ae:	e7f7      	b.n	152a0 <iterate_string_chunks+0x13c>
                return CborErrorIllegalType;
   152b0:	f44f 7082 	mov.w	r0, #260	; 0x104
   152b4:	e785      	b.n	151c2 <iterate_string_chunks+0x5e>
    return CborNoError;
   152b6:	9810      	ldr	r0, [sp, #64]	; 0x40
   152b8:	e783      	b.n	151c2 <iterate_string_chunks+0x5e>

000152ba <_cbor_value_decode_int64_internal>:
    uint8_t val = value->parser->d->get8(value->parser->d, value->offset);
   152ba:	6803      	ldr	r3, [r0, #0]
{
   152bc:	b570      	push	{r4, r5, r6, lr}
   152be:	4604      	mov	r4, r0
    uint8_t val = value->parser->d->get8(value->parser->d, value->offset);
   152c0:	6818      	ldr	r0, [r3, #0]
   152c2:	6861      	ldr	r1, [r4, #4]
   152c4:	6803      	ldr	r3, [r0, #0]
   152c6:	4798      	blx	r3
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge ||
   152c8:	7be3      	ldrb	r3, [r4, #15]
   152ca:	07db      	lsls	r3, r3, #31
   152cc:	d40a      	bmi.n	152e4 <_cbor_value_decode_int64_internal+0x2a>
   152ce:	7ba3      	ldrb	r3, [r4, #14]
   152d0:	3306      	adds	r3, #6
   152d2:	b2db      	uxtb	r3, r3
   152d4:	2b01      	cmp	r3, #1
   152d6:	d905      	bls.n	152e4 <_cbor_value_decode_int64_internal+0x2a>
   152d8:	2300      	movs	r3, #0
   152da:	461a      	mov	r2, r3
   152dc:	4619      	mov	r1, r3
   152de:	4618      	mov	r0, r3
   152e0:	f7f7 fa8c 	bl	c7fc <__assert_func>
    assert((val & SmallValueMask) == Value32Bit || (val & SmallValueMask) == Value64Bit);
   152e4:	f000 031e 	and.w	r3, r0, #30
   152e8:	2b1a      	cmp	r3, #26
   152ea:	d1f5      	bne.n	152d8 <_cbor_value_decode_int64_internal+0x1e>
    if ((val & 1) == (Value32Bit & 1))
   152ec:	f010 0501 	ands.w	r5, r0, #1
   152f0:	d00b      	beq.n	1530a <_cbor_value_decode_int64_internal+0x50>
    assert((val & SmallValueMask) == Value64Bit);
   152f2:	f000 001f 	and.w	r0, r0, #31
   152f6:	281b      	cmp	r0, #27
   152f8:	d1ee      	bne.n	152d8 <_cbor_value_decode_int64_internal+0x1e>
        return value->parser->d->get64(value->parser->d, value->offset + 1);
   152fa:	6823      	ldr	r3, [r4, #0]
   152fc:	6861      	ldr	r1, [r4, #4]
   152fe:	6818      	ldr	r0, [r3, #0]
}
   15300:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return value->parser->d->get64(value->parser->d, value->offset + 1);
   15304:	68c3      	ldr	r3, [r0, #12]
   15306:	3101      	adds	r1, #1
   15308:	4718      	bx	r3
        return value->parser->d->get32(value->parser->d, value->offset + 1);
   1530a:	6823      	ldr	r3, [r4, #0]
   1530c:	6861      	ldr	r1, [r4, #4]
   1530e:	6818      	ldr	r0, [r3, #0]
   15310:	3101      	adds	r1, #1
   15312:	6883      	ldr	r3, [r0, #8]
   15314:	4798      	blx	r3
}
   15316:	4629      	mov	r1, r5
   15318:	bd70      	pop	{r4, r5, r6, pc}

0001531a <cbor_parser_init>:
{
   1531a:	b410      	push	{r4}
    memset(parser, 0, sizeof(*parser));
   1531c:	2400      	movs	r4, #0
   1531e:	6054      	str	r4, [r2, #4]
   15320:	6094      	str	r4, [r2, #8]
    parser->d = d;
   15322:	6010      	str	r0, [r2, #0]
    parser->end = d->message_size;
   15324:	6980      	ldr	r0, [r0, #24]
    parser->flags = flags;
   15326:	e9c2 0101 	strd	r0, r1, [r2, #4]
    it->offset = 0;
   1532a:	e9c3 2400 	strd	r2, r4, [r3]
    it->remaining = 1;/* there's one type altogether, usually an array or map */
   1532e:	2201      	movs	r2, #1
}
   15330:	f85d 4b04 	ldr.w	r4, [sp], #4
    it->remaining = 1;/* there's one type altogether, usually an array or map */
   15334:	609a      	str	r2, [r3, #8]
    return preparse_value(it);
   15336:	4618      	mov	r0, r3
   15338:	f7ff be05 	b.w	14f46 <preparse_value>

0001533c <cbor_value_enter_container>:
{
   1533c:	b537      	push	{r0, r1, r2, r4, r5, lr}
{ return it->type == CborArrayType || it->type == CborMapType; }
   1533e:	7b83      	ldrb	r3, [r0, #14]
   15340:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   15344:	2b80      	cmp	r3, #128	; 0x80
   15346:	4605      	mov	r5, r0
   15348:	460c      	mov	r4, r1
   1534a:	d005      	beq.n	15358 <cbor_value_enter_container+0x1c>
    assert(cbor_value_is_container(it));
   1534c:	2300      	movs	r3, #0
   1534e:	461a      	mov	r2, r3
   15350:	4619      	mov	r1, r3
   15352:	4618      	mov	r0, r3
   15354:	f7f7 fa52 	bl	c7fc <__assert_func>
    *recursed = *it;
   15358:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   1535a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (it->flags & CborIteratorFlag_UnknownLength) {
   1535e:	7beb      	ldrb	r3, [r5, #15]
   15360:	075b      	lsls	r3, r3, #29
   15362:	d512      	bpl.n	1538a <cbor_value_enter_container+0x4e>
        recursed->remaining = UINT32_MAX;
   15364:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
        ++recursed->offset;
   15368:	3101      	adds	r1, #1
        recursed->remaining = UINT32_MAX;
   1536a:	60a3      	str	r3, [r4, #8]
        ++recursed->offset;
   1536c:	6061      	str	r1, [r4, #4]
        err = preparse_value(recursed);
   1536e:	4620      	mov	r0, r4
   15370:	f7ff fde9 	bl	14f46 <preparse_value>
        if (err != CborErrorUnexpectedBreak)
   15374:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   15378:	d117      	bne.n	153aa <cbor_value_enter_container+0x6e>
        ++recursed->offset;
   1537a:	6863      	ldr	r3, [r4, #4]
   1537c:	3301      	adds	r3, #1
   1537e:	6063      	str	r3, [r4, #4]
    recursed->type = CborInvalidType;
   15380:	23ff      	movs	r3, #255	; 0xff
    recursed->remaining = 0;
   15382:	2000      	movs	r0, #0
    recursed->type = CborInvalidType;
   15384:	73a3      	strb	r3, [r4, #14]
    recursed->remaining = 0;
   15386:	60a0      	str	r0, [r4, #8]
    return CborNoError;
   15388:	e00f      	b.n	153aa <cbor_value_enter_container+0x6e>
        err = extract_number(recursed->parser, &recursed->offset, &len);
   1538a:	466a      	mov	r2, sp
   1538c:	1d21      	adds	r1, r4, #4
   1538e:	f7ff fe7c 	bl	1508a <extract_number>
        assert(err == CborNoError);
   15392:	2800      	cmp	r0, #0
   15394:	d1da      	bne.n	1534c <cbor_value_enter_container+0x10>
        recursed->remaining = (uint32_t)len;
   15396:	e9dd 3200 	ldrd	r3, r2, [sp]
   1539a:	60a3      	str	r3, [r4, #8]
        if (recursed->remaining != len || len == UINT32_MAX) {
   1539c:	b90a      	cbnz	r2, 153a2 <cbor_value_enter_container+0x66>
   1539e:	1c59      	adds	r1, r3, #1
   153a0:	d105      	bne.n	153ae <cbor_value_enter_container+0x72>
            recursed->offset = it->offset;
   153a2:	686b      	ldr	r3, [r5, #4]
   153a4:	6063      	str	r3, [r4, #4]
            return CborErrorDataTooLarge;
   153a6:	f44f 6080 	mov.w	r0, #1024	; 0x400
}
   153aa:	b003      	add	sp, #12
   153ac:	bd30      	pop	{r4, r5, pc}
        if (recursed->type == CborMapType) {
   153ae:	7ba1      	ldrb	r1, [r4, #14]
   153b0:	29a0      	cmp	r1, #160	; 0xa0
   153b2:	d103      	bne.n	153bc <cbor_value_enter_container+0x80>
            if (recursed->remaining > UINT32_MAX / 2) {
   153b4:	2b00      	cmp	r3, #0
   153b6:	dbf4      	blt.n	153a2 <cbor_value_enter_container+0x66>
            recursed->remaining *= 2;
   153b8:	0059      	lsls	r1, r3, #1
   153ba:	60a1      	str	r1, [r4, #8]
        if (len != 0)
   153bc:	4313      	orrs	r3, r2
   153be:	d0df      	beq.n	15380 <cbor_value_enter_container+0x44>
            return preparse_value(recursed);
   153c0:	4620      	mov	r0, r4
   153c2:	f7ff fdc0 	bl	14f46 <preparse_value>
   153c6:	e7f0      	b.n	153aa <cbor_value_enter_container+0x6e>

000153c8 <cbor_value_leave_container>:
{
   153c8:	b508      	push	{r3, lr}
   153ca:	7b82      	ldrb	r2, [r0, #14]
   153cc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   153d0:	2a80      	cmp	r2, #128	; 0x80
   153d2:	d005      	beq.n	153e0 <cbor_value_leave_container+0x18>
    assert(cbor_value_is_container(it));
   153d4:	2300      	movs	r3, #0
   153d6:	461a      	mov	r2, r3
   153d8:	4619      	mov	r1, r3
   153da:	4618      	mov	r0, r3
   153dc:	f7f7 fa0e 	bl	c7fc <__assert_func>
    assert(recursed->type == CborInvalidType);
   153e0:	7b8a      	ldrb	r2, [r1, #14]
   153e2:	2aff      	cmp	r2, #255	; 0xff
   153e4:	d001      	beq.n	153ea <cbor_value_leave_container+0x22>
   153e6:	f7ff feb6 	bl	15156 <cbor_value_advance.part.0>
    it->offset = recursed->offset;
   153ea:	684a      	ldr	r2, [r1, #4]
   153ec:	6042      	str	r2, [r0, #4]
}
   153ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return preparse_next_value(it);
   153f2:	f7ff be25 	b.w	15040 <preparse_next_value>
	...

000153f8 <_cbor_value_copy_string>:
 * \sa cbor_value_dup_text_string(), cbor_value_copy_text_string(), cbor_value_get_string_length(), cbor_value_calculate_string_length()
 */

CborError _cbor_value_copy_string(const CborValue *value, void *buffer,
                                 size_t *buflen, CborValue *next)
{
   153f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    bool copied_all;
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   153fa:	b189      	cbz	r1, 15420 <_cbor_value_copy_string+0x28>
                                          buffer ? (IterateFunction) value->parser->d->cpy : iterate_noop);
   153fc:	6804      	ldr	r4, [r0, #0]
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   153fe:	6824      	ldr	r4, [r4, #0]
   15400:	6964      	ldr	r4, [r4, #20]
   15402:	e9cd 3400 	strd	r3, r4, [sp]
   15406:	f10d 030f 	add.w	r3, sp, #15
   1540a:	f7ff feab 	bl	15164 <iterate_string_chunks>
    return err ? err :
   1540e:	b928      	cbnz	r0, 1541c <_cbor_value_copy_string+0x24>
   15410:	f89d 300f 	ldrb.w	r3, [sp, #15]
   15414:	2b00      	cmp	r3, #0
   15416:	bf08      	it	eq
   15418:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
                 copied_all ? CborNoError : CborErrorOutOfMemory;
}
   1541c:	b004      	add	sp, #16
   1541e:	bd10      	pop	{r4, pc}
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   15420:	4c00      	ldr	r4, [pc, #0]	; (15424 <_cbor_value_copy_string+0x2c>)
   15422:	e7ee      	b.n	15402 <_cbor_value_copy_string+0xa>
   15424:	00014f43 	.word	0x00014f43

00015428 <advance_recursive>:
{
   15428:	b530      	push	{r4, r5, lr}
    if (is_fixed_type(it->type))
   1542a:	7b83      	ldrb	r3, [r0, #14]
{
   1542c:	b085      	sub	sp, #20
   1542e:	4604      	mov	r4, r0
    if (is_fixed_type(it->type))
   15430:	4618      	mov	r0, r3
   15432:	f7ff fd7c 	bl	14f2e <is_fixed_type>
{
   15436:	460d      	mov	r5, r1
    if (is_fixed_type(it->type))
   15438:	4601      	mov	r1, r0
   1543a:	b128      	cbz	r0, 15448 <advance_recursive+0x20>
        return advance_internal(it);
   1543c:	4620      	mov	r0, r4
}
   1543e:	b005      	add	sp, #20
   15440:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return advance_internal(it);
   15444:	f7ff be65 	b.w	15112 <advance_internal>
   15448:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1544c:	2b80      	cmp	r3, #128	; 0x80
   1544e:	d009      	beq.n	15464 <advance_recursive+0x3c>
        size_t len = SIZE_MAX;
   15450:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15454:	9300      	str	r3, [sp, #0]
        return _cbor_value_copy_string(it, NULL, &len, it);
   15456:	466a      	mov	r2, sp
   15458:	4623      	mov	r3, r4
   1545a:	4620      	mov	r0, r4
   1545c:	f7ff ffcc 	bl	153f8 <_cbor_value_copy_string>
}
   15460:	b005      	add	sp, #20
   15462:	bd30      	pop	{r4, r5, pc}
    if (nestingLevel == CBOR_PARSER_MAX_RECURSIONS)
   15464:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   15468:	d014      	beq.n	15494 <advance_recursive+0x6c>
    err = cbor_value_enter_container(it, &recursed);
   1546a:	4669      	mov	r1, sp
   1546c:	4620      	mov	r0, r4
   1546e:	f7ff ff65 	bl	1533c <cbor_value_enter_container>
    if (err)
   15472:	2800      	cmp	r0, #0
   15474:	d1f4      	bne.n	15460 <advance_recursive+0x38>
        err = advance_recursive(&recursed, nestingLevel + 1);
   15476:	3501      	adds	r5, #1
    while (!cbor_value_at_end(&recursed)) {
   15478:	9b02      	ldr	r3, [sp, #8]
   1547a:	b923      	cbnz	r3, 15486 <advance_recursive+0x5e>
    return cbor_value_leave_container(it, &recursed);
   1547c:	4669      	mov	r1, sp
   1547e:	4620      	mov	r0, r4
   15480:	f7ff ffa2 	bl	153c8 <cbor_value_leave_container>
   15484:	e7ec      	b.n	15460 <advance_recursive+0x38>
        err = advance_recursive(&recursed, nestingLevel + 1);
   15486:	4629      	mov	r1, r5
   15488:	4668      	mov	r0, sp
   1548a:	f7ff ffcd 	bl	15428 <advance_recursive>
        if (err)
   1548e:	2800      	cmp	r0, #0
   15490:	d0f2      	beq.n	15478 <advance_recursive+0x50>
   15492:	e7e5      	b.n	15460 <advance_recursive+0x38>
        return CborErrorNestingTooDeep;
   15494:	f240 4001 	movw	r0, #1025	; 0x401
   15498:	e7e2      	b.n	15460 <advance_recursive+0x38>

0001549a <cbor_value_advance>:
{
   1549a:	b508      	push	{r3, lr}
    assert(it->type != CborInvalidType);
   1549c:	7b82      	ldrb	r2, [r0, #14]
   1549e:	2aff      	cmp	r2, #255	; 0xff
   154a0:	d101      	bne.n	154a6 <cbor_value_advance+0xc>
   154a2:	f7ff fe58 	bl	15156 <cbor_value_advance.part.0>
    if (!it->remaining)
   154a6:	6883      	ldr	r3, [r0, #8]
   154a8:	b123      	cbz	r3, 154b4 <cbor_value_advance+0x1a>
}
   154aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return advance_recursive(it, 0);
   154ae:	2100      	movs	r1, #0
   154b0:	f7ff bfba 	b.w	15428 <advance_recursive>
}
   154b4:	2003      	movs	r0, #3
   154b6:	bd08      	pop	{r3, pc}

000154b8 <cbor_value_calculate_string_length>:
    *len = SIZE_MAX;
   154b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   154bc:	600b      	str	r3, [r1, #0]
    return _cbor_value_copy_string(value, NULL, len, NULL);
   154be:	2300      	movs	r3, #0
{
   154c0:	460a      	mov	r2, r1
    return _cbor_value_copy_string(value, NULL, len, NULL);
   154c2:	4619      	mov	r1, r3
   154c4:	f7ff bf98 	b.w	153f8 <_cbor_value_copy_string>

000154c8 <hal_bsp_flash_dev>:
    case 0:
        /* MCU internal flash. */
        return &nrf52k_flash_dev;
    default:
        /* External flash.  Assume not present in this BSP. */
        return NULL;
   154c8:	2800      	cmp	r0, #0
    }
}
   154ca:	4802      	ldr	r0, [pc, #8]	; (154d4 <hal_bsp_flash_dev+0xc>)
   154cc:	bf18      	it	ne
   154ce:	2000      	movne	r0, #0
   154d0:	4770      	bx	lr
   154d2:	bf00      	nop
   154d4:	00021d74 	.word	0x00021d74

000154d8 <hal_bsp_init>:
}


void
hal_bsp_init(void)
{
   154d8:	b513      	push	{r0, r1, r4, lr}
    int rc;

    (void)rc;

    /* Make sure system clocks have started */
    hal_system_clock_start();
   154da:	f7f2 fe87 	bl	81ec <hal_system_clock_start>

    /* Create all available nRF52832 peripherals */
    nrf52_periph_create();
   154de:	f001 fc05 	bl	16cec <nrf52_periph_create>
    return (dpl_error_t)os_sem_init(&sem->sem, tokens);
   154e2:	480d      	ldr	r0, [pc, #52]	; (15518 <hal_bsp_init+0x40>)
   154e4:	2101      	movs	r1, #1
   154e6:	f7f8 f8af 	bl	d648 <os_sem_init>

#if MYNEWT_VAL(SPI_0_MASTER)
    rc = dpl_sem_init(&g_spi0_sem, 0x1);
    assert(rc == 0);
   154ea:	4604      	mov	r4, r0
   154ec:	b128      	cbz	r0, 154fa <hal_bsp_init+0x22>
   154ee:	2300      	movs	r3, #0
   154f0:	461a      	mov	r2, r3
   154f2:	4619      	mov	r1, r3
   154f4:	4618      	mov	r0, r3
   154f6:	f7f7 f981 	bl	c7fc <__assert_func>
#endif

#if MYNEWT_VAL(DW1000_DEVICE_0)
    dw1000_0 = hal_dw1000_inst(0);
   154fa:	f7f3 fbfd 	bl	8cf8 <hal_dw1000_inst>
    rc = os_dev_create((struct os_dev *) dw1000_0, "dw1000_0",
   154fe:	4b07      	ldr	r3, [pc, #28]	; (1551c <hal_bsp_init+0x44>)
   15500:	9301      	str	r3, [sp, #4]
   15502:	4b07      	ldr	r3, [pc, #28]	; (15520 <hal_bsp_init+0x48>)
   15504:	9300      	str	r3, [sp, #0]
   15506:	4907      	ldr	r1, [pc, #28]	; (15524 <hal_bsp_init+0x4c>)
   15508:	4623      	mov	r3, r4
   1550a:	2201      	movs	r2, #1
   1550c:	f7f7 fbc6 	bl	cc9c <os_dev_create>
      OS_DEV_INIT_PRIMARY, 0, dw1000_dev_init, (void *)&dw1000_0_cfg);
    assert(rc == 0);
   15510:	2800      	cmp	r0, #0
   15512:	d1ec      	bne.n	154ee <hal_bsp_init+0x16>
#endif
}
   15514:	b002      	add	sp, #8
   15516:	bd10      	pop	{r4, pc}
   15518:	20006b18 	.word	0x20006b18
   1551c:	0002150c 	.word	0x0002150c
   15520:	00009b85 	.word	0x00009b85
   15524:	00021500 	.word	0x00021500

00015528 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   15528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
   1552c:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 156d0 <SEGGER_RTT_WriteNoLock+0x1a8>
   15530:	eb00 0640 	add.w	r6, r0, r0, lsl #1
   15534:	eb09 06c6 	add.w	r6, r9, r6, lsl #3
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   15538:	b083      	sub	sp, #12
  switch (pRing->Flags) {
   1553a:	6af7      	ldr	r7, [r6, #44]	; 0x2c
   1553c:	2f01      	cmp	r7, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1553e:	4680      	mov	r8, r0
   15540:	468b      	mov	fp, r1
   15542:	4692      	mov	sl, r2
  switch (pRing->Flags) {
   15544:	ea4f 0440 	mov.w	r4, r0, lsl #1
   15548:	d007      	beq.n	1555a <SEGGER_RTT_WriteNoLock+0x32>
   1554a:	2f02      	cmp	r7, #2
   1554c:	d049      	beq.n	155e2 <SEGGER_RTT_WriteNoLock+0xba>
   1554e:	b33f      	cbz	r7, 155a0 <SEGGER_RTT_WriteNoLock+0x78>
   15550:	2700      	movs	r7, #0
  }
  //
  // Finish up.
  //
  return Status;
}
   15552:	4638      	mov	r0, r7
   15554:	b003      	add	sp, #12
   15556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  RdOff = pRing->RdOff;
   1555a:	6ab7      	ldr	r7, [r6, #40]	; 0x28
  WrOff = pRing->WrOff;
   1555c:	6a75      	ldr	r5, [r6, #36]	; 0x24
  if (RdOff <= WrOff) {
   1555e:	42af      	cmp	r7, r5
   15560:	d97a      	bls.n	15658 <SEGGER_RTT_WriteNoLock+0x130>
    r = RdOff - WrOff - 1u;
   15562:	3f01      	subs	r7, #1
   15564:	1b7f      	subs	r7, r7, r5
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   15566:	6a36      	ldr	r6, [r6, #32]
    Status = Avail < NumBytes ? Avail : NumBytes;
   15568:	4557      	cmp	r7, sl
   1556a:	bf28      	it	cs
   1556c:	4657      	movcs	r7, sl
  Rem = pRing->SizeOfBuffer - WrOff;
   1556e:	1b72      	subs	r2, r6, r5
  if (Rem > NumBytes) {
   15570:	4297      	cmp	r7, r2
   15572:	d27b      	bcs.n	1566c <SEGGER_RTT_WriteNoLock+0x144>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   15574:	f108 0301 	add.w	r3, r8, #1
   15578:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1557c:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
   15580:	4659      	mov	r1, fp
   15582:	6858      	ldr	r0, [r3, #4]
   15584:	463a      	mov	r2, r7
   15586:	4428      	add	r0, r5
   15588:	f7fa fe72 	bl	10270 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
   1558c:	4444      	add	r4, r8
   1558e:	eb09 09c4 	add.w	r9, r9, r4, lsl #3
   15592:	443d      	add	r5, r7
}
   15594:	4638      	mov	r0, r7
    pRing->WrOff = WrOff + NumBytes;
   15596:	f8c9 5024 	str.w	r5, [r9, #36]	; 0x24
}
   1559a:	b003      	add	sp, #12
   1559c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  RdOff = pRing->RdOff;
   155a0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  WrOff = pRing->WrOff;
   155a2:	6a75      	ldr	r5, [r6, #36]	; 0x24
  if (RdOff <= WrOff) {
   155a4:	42ab      	cmp	r3, r5
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   155a6:	bf9c      	itt	ls
   155a8:	6a32      	ldrls	r2, [r6, #32]
   155aa:	189b      	addls	r3, r3, r2
    r = RdOff - WrOff - 1u;
   155ac:	3b01      	subs	r3, #1
   155ae:	1b5b      	subs	r3, r3, r5
    if (Avail < NumBytes) {
   155b0:	459a      	cmp	sl, r3
   155b2:	d8ce      	bhi.n	15552 <SEGGER_RTT_WriteNoLock+0x2a>
  Rem = pRing->SizeOfBuffer - WrOff;
   155b4:	4404      	add	r4, r0
   155b6:	eb09 04c4 	add.w	r4, r9, r4, lsl #3
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   155ba:	f100 0801 	add.w	r8, r0, #1
  Rem = pRing->SizeOfBuffer - WrOff;
   155be:	6a26      	ldr	r6, [r4, #32]
   155c0:	1b77      	subs	r7, r6, r5
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   155c2:	eb08 0848 	add.w	r8, r8, r8, lsl #1
  if (Rem > NumBytes) {
   155c6:	45ba      	cmp	sl, r7
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   155c8:	eb09 09c8 	add.w	r9, r9, r8, lsl #3
  if (Rem > NumBytes) {
   155cc:	d26e      	bcs.n	156ac <SEGGER_RTT_WriteNoLock+0x184>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   155ce:	f8d9 0004 	ldr.w	r0, [r9, #4]
   155d2:	4652      	mov	r2, sl
   155d4:	4428      	add	r0, r5
    pRing->WrOff = WrOff + NumBytes;
   155d6:	4455      	add	r5, sl
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   155d8:	f7fa fe4a 	bl	10270 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
   155dc:	4657      	mov	r7, sl
   155de:	6265      	str	r5, [r4, #36]	; 0x24
   155e0:	e7b7      	b.n	15552 <SEGGER_RTT_WriteNoLock+0x2a>
  WrOff = pRing->WrOff;
   155e2:	f100 0801 	add.w	r8, r0, #1
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   155e6:	eb08 0848 	add.w	r8, r8, r8, lsl #1
  WrOff = pRing->WrOff;
   155ea:	6a75      	ldr	r5, [r6, #36]	; 0x24
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   155ec:	ea4f 08c8 	mov.w	r8, r8, lsl #3
  NumBytesWritten = 0u;
   155f0:	2700      	movs	r7, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   155f2:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    if (RdOff > WrOff) {
   155f4:	42aa      	cmp	r2, r5
      NumBytesToWrite = RdOff - WrOff - 1u;
   155f6:	f102 34ff 	add.w	r4, r2, #4294967295	; 0xffffffff
    if (RdOff > WrOff) {
   155fa:	d922      	bls.n	15642 <SEGGER_RTT_WriteNoLock+0x11a>
      NumBytesToWrite = RdOff - WrOff - 1u;
   155fc:	1b62      	subs	r2, r4, r5
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   155fe:	6a34      	ldr	r4, [r6, #32]
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   15600:	4552      	cmp	r2, sl
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   15602:	eb09 0108 	add.w	r1, r9, r8
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   15606:	eba4 0405 	sub.w	r4, r4, r5
   1560a:	bf28      	it	cs
   1560c:	4652      	movcs	r2, sl
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   1560e:	4294      	cmp	r4, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   15610:	6848      	ldr	r0, [r1, #4]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   15612:	bf28      	it	cs
   15614:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   15616:	4428      	add	r0, r5
   15618:	4659      	mov	r1, fp
   1561a:	4622      	mov	r2, r4
   1561c:	f7fa fe28 	bl	10270 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   15620:	6a33      	ldr	r3, [r6, #32]
    WrOff           += NumBytesToWrite;
   15622:	4425      	add	r5, r4
    if (WrOff == pRing->SizeOfBuffer) {
   15624:	429d      	cmp	r5, r3
    NumBytes        -= NumBytesToWrite;
   15626:	ebaa 0a04 	sub.w	sl, sl, r4
    NumBytesWritten += NumBytesToWrite;
   1562a:	4427      	add	r7, r4
    pBuffer         += NumBytesToWrite;
   1562c:	44a3      	add	fp, r4
    if (WrOff == pRing->SizeOfBuffer) {
   1562e:	d00d      	beq.n	1564c <SEGGER_RTT_WriteNoLock+0x124>
    pRing->WrOff = WrOff;
   15630:	6275      	str	r5, [r6, #36]	; 0x24
  } while (NumBytes);
   15632:	f1ba 0f00 	cmp.w	sl, #0
   15636:	d08c      	beq.n	15552 <SEGGER_RTT_WriteNoLock+0x2a>
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   15638:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    if (RdOff > WrOff) {
   1563a:	42aa      	cmp	r2, r5
      NumBytesToWrite = RdOff - WrOff - 1u;
   1563c:	f102 34ff 	add.w	r4, r2, #4294967295	; 0xffffffff
    if (RdOff > WrOff) {
   15640:	d8dc      	bhi.n	155fc <SEGGER_RTT_WriteNoLock+0xd4>
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   15642:	6a34      	ldr	r4, [r6, #32]
   15644:	4422      	add	r2, r4
   15646:	3a01      	subs	r2, #1
   15648:	1b52      	subs	r2, r2, r5
   1564a:	e7d9      	b.n	15600 <SEGGER_RTT_WriteNoLock+0xd8>
    pRing->WrOff = WrOff;
   1564c:	2500      	movs	r5, #0
   1564e:	6275      	str	r5, [r6, #36]	; 0x24
  } while (NumBytes);
   15650:	f1ba 0f00 	cmp.w	sl, #0
   15654:	d1cd      	bne.n	155f2 <SEGGER_RTT_WriteNoLock+0xca>
   15656:	e77c      	b.n	15552 <SEGGER_RTT_WriteNoLock+0x2a>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   15658:	6a36      	ldr	r6, [r6, #32]
   1565a:	4437      	add	r7, r6
   1565c:	3f01      	subs	r7, #1
   1565e:	1b7f      	subs	r7, r7, r5
    Status = Avail < NumBytes ? Avail : NumBytes;
   15660:	4557      	cmp	r7, sl
   15662:	bf28      	it	cs
   15664:	4657      	movcs	r7, sl
  Rem = pRing->SizeOfBuffer - WrOff;
   15666:	1b72      	subs	r2, r6, r5
  if (Rem > NumBytes) {
   15668:	4297      	cmp	r7, r2
   1566a:	d383      	bcc.n	15574 <SEGGER_RTT_WriteNoLock+0x4c>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1566c:	f108 0a01 	add.w	sl, r8, #1
   15670:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
   15674:	eb09 0aca 	add.w	sl, r9, sl, lsl #3
   15678:	4659      	mov	r1, fp
   1567a:	f8da 0004 	ldr.w	r0, [sl, #4]
   1567e:	9201      	str	r2, [sp, #4]
   15680:	4428      	add	r0, r5
   15682:	f7fa fdf5 	bl	10270 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
   15686:	1bbe      	subs	r6, r7, r6
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   15688:	9a01      	ldr	r2, [sp, #4]
   1568a:	f8da 0004 	ldr.w	r0, [sl, #4]
    NumBytesAtOnce = NumBytes - Rem;
   1568e:	4435      	add	r5, r6
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   15690:	eb0b 0102 	add.w	r1, fp, r2
   15694:	462a      	mov	r2, r5
   15696:	f7fa fdeb 	bl	10270 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   1569a:	4444      	add	r4, r8
   1569c:	eb09 09c4 	add.w	r9, r9, r4, lsl #3
}
   156a0:	4638      	mov	r0, r7
    pRing->WrOff = NumBytesAtOnce;
   156a2:	f8c9 5024 	str.w	r5, [r9, #36]	; 0x24
}
   156a6:	b003      	add	sp, #12
   156a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   156ac:	f8d9 0004 	ldr.w	r0, [r9, #4]
   156b0:	4428      	add	r0, r5
    NumBytesAtOnce = NumBytes - Rem;
   156b2:	4455      	add	r5, sl
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   156b4:	463a      	mov	r2, r7
    NumBytesAtOnce = NumBytes - Rem;
   156b6:	1bad      	subs	r5, r5, r6
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   156b8:	f7fa fdda 	bl	10270 <memcpy>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   156bc:	eb0b 0107 	add.w	r1, fp, r7
   156c0:	f8d9 0004 	ldr.w	r0, [r9, #4]
   156c4:	462a      	mov	r2, r5
   156c6:	f7fa fdd3 	bl	10270 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   156ca:	4657      	mov	r7, sl
   156cc:	6265      	str	r5, [r4, #36]	; 0x24
   156ce:	e740      	b.n	15552 <SEGGER_RTT_WriteNoLock+0x2a>
   156d0:	200000d8 	.word	0x200000d8

000156d4 <SEGGER_RTT_GetKey>:
*    >= 0 -   Character which has been read. (Possible values: 0 - 255)
*
*  Notes
*    (1) This function is only specified for accesses to RTT buffer 0.
*/
int SEGGER_RTT_GetKey(void) {
   156d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  INIT();
   156d8:	4c3e      	ldr	r4, [pc, #248]	; (157d4 <SEGGER_RTT_GetKey+0x100>)
int SEGGER_RTT_GetKey(void) {
   156da:	b082      	sub	sp, #8
  SEGGER_RTT_LOCK();
   156dc:	f7f6 ffd4 	bl	c688 <os_arch_save_sr>
  INIT();
   156e0:	7825      	ldrb	r5, [r4, #0]
  SEGGER_RTT_LOCK();
   156e2:	4606      	mov	r6, r0
  INIT();
   156e4:	2d00      	cmp	r5, #0
   156e6:	d04d      	beq.n	15784 <SEGGER_RTT_GetKey+0xb0>
  WrOff = pRing->WrOff;
   156e8:	f8d4 a03c 	ldr.w	sl, [r4, #60]	; 0x3c
  RdOff = pRing->RdOff;
   156ec:	6c25      	ldr	r5, [r4, #64]	; 0x40
  if (RdOff > WrOff) {
   156ee:	4555      	cmp	r5, sl
   156f0:	d809      	bhi.n	15706 <SEGGER_RTT_GetKey+0x32>
  if (NumBytesRem > 0u) {
   156f2:	4555      	cmp	r5, sl
   156f4:	d128      	bne.n	15748 <SEGGER_RTT_GetKey+0x74>
  SEGGER_RTT_UNLOCK();
   156f6:	4630      	mov	r0, r6
   156f8:	f7f6 ffcc 	bl	c694 <os_arch_restore_sr>

  r = (int)SEGGER_RTT_Read(0u, &c, 1u);
  if (r == 1) {
    r = (int)(unsigned char)c;
  } else {
    r = -1;
   156fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  }
  return r;
}
   15700:	b002      	add	sp, #8
   15702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
   15706:	e9d4 980d 	ldrd	r9, r8, [r4, #52]	; 0x34
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
   1570a:	eba8 0705 	sub.w	r7, r8, r5
    NumBytesRem = MIN(NumBytesRem, BufferSize);
   1570e:	2f01      	cmp	r7, #1
   15710:	bf28      	it	cs
   15712:	2701      	movcs	r7, #1
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
   15714:	463a      	mov	r2, r7
   15716:	eb09 0105 	add.w	r1, r9, r5
   1571a:	f10d 0007 	add.w	r0, sp, #7
   1571e:	f7fa fda7 	bl	10270 <memcpy>
    RdOff        += NumBytesRem;
   15722:	19eb      	adds	r3, r5, r7
    if (RdOff == pRing->SizeOfBuffer) {
   15724:	4598      	cmp	r8, r3
    BufferSize   -= NumBytesRem;
   15726:	f1c7 0201 	rsb	r2, r7, #1
  NumBytesRem = WrOff - RdOff;
   1572a:	bf14      	ite	ne
   1572c:	ebaa 0a03 	subne.w	sl, sl, r3
      RdOff = 0u;
   15730:	2300      	moveq	r3, #0
  NumBytesRem = MIN(NumBytesRem, BufferSize);
   15732:	4552      	cmp	r2, sl
   15734:	bf28      	it	cs
   15736:	4652      	movcs	r2, sl
  if (NumBytesRem > 0u) {
   15738:	b9a2      	cbnz	r2, 15764 <SEGGER_RTT_GetKey+0x90>
  if (NumBytesRead) {
   1573a:	4545      	cmp	r5, r8
   1573c:	d0db      	beq.n	156f6 <SEGGER_RTT_GetKey+0x22>
  SEGGER_RTT_UNLOCK();
   1573e:	4630      	mov	r0, r6
    pRing->RdOff = RdOff;
   15740:	6423      	str	r3, [r4, #64]	; 0x40
  SEGGER_RTT_UNLOCK();
   15742:	f7f6 ffa7 	bl	c694 <os_arch_restore_sr>
  if (r == 1) {
   15746:	e008      	b.n	1575a <SEGGER_RTT_GetKey+0x86>
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
   15748:	6b62      	ldr	r2, [r4, #52]	; 0x34
    RdOff        += NumBytesRem;
   1574a:	1c6b      	adds	r3, r5, #1
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
   1574c:	5d52      	ldrb	r2, [r2, r5]
   1574e:	f88d 2007 	strb.w	r2, [sp, #7]
  SEGGER_RTT_UNLOCK();
   15752:	4630      	mov	r0, r6
    pRing->RdOff = RdOff;
   15754:	6423      	str	r3, [r4, #64]	; 0x40
  SEGGER_RTT_UNLOCK();
   15756:	f7f6 ff9d 	bl	c694 <os_arch_restore_sr>
    r = (int)(unsigned char)c;
   1575a:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
   1575e:	b002      	add	sp, #8
   15760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
   15764:	f107 0208 	add.w	r2, r7, #8
   15768:	eb0d 0702 	add.w	r7, sp, r2
   1576c:	f819 2003 	ldrb.w	r2, [r9, r3]
   15770:	f807 2c01 	strb.w	r2, [r7, #-1]
    RdOff        += NumBytesRem;
   15774:	3301      	adds	r3, #1
  SEGGER_RTT_UNLOCK();
   15776:	4630      	mov	r0, r6
    pRing->RdOff = RdOff;
   15778:	6423      	str	r3, [r4, #64]	; 0x40
  SEGGER_RTT_UNLOCK();
   1577a:	f7f6 ff8b 	bl	c694 <os_arch_restore_sr>
  if (r == 1) {
   1577e:	4545      	cmp	r5, r8
   15780:	d0eb      	beq.n	1575a <SEGGER_RTT_GetKey+0x86>
   15782:	e7bb      	b.n	156fc <SEGGER_RTT_GetKey+0x28>
  p->aUp[0].sName         = "Terminal";
   15784:	4a14      	ldr	r2, [pc, #80]	; (157d8 <SEGGER_RTT_GetKey+0x104>)
  p->aUp[0].RdOff         = 0u;
   15786:	62a5      	str	r5, [r4, #40]	; 0x28
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   15788:	2301      	movs	r3, #1
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   1578a:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1578e:	f104 0348 	add.w	r3, r4, #72	; 0x48
   15792:	e9c4 2306 	strd	r2, r3, [r4, #24]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   15796:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1579a:	6223      	str	r3, [r4, #32]
  strcpy(&p->acID[7], "RTT");
   1579c:	4b0f      	ldr	r3, [pc, #60]	; (157dc <SEGGER_RTT_GetKey+0x108>)
  p->aDown[0].WrOff         = 0u;
   1579e:	63e5      	str	r5, [r4, #60]	; 0x3c
  strcpy(&p->acID[7], "RTT");
   157a0:	6818      	ldr	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
   157a2:	4b0f      	ldr	r3, [pc, #60]	; (157e0 <SEGGER_RTT_GetKey+0x10c>)
  WrOff = pRing->WrOff;
   157a4:	f8d4 a03c 	ldr.w	sl, [r4, #60]	; 0x3c
  strcpy(&p->acID[7], "RTT");
   157a8:	f8c4 0007 	str.w	r0, [r4, #7]
  p->aDown[0].pBuffer       = _acDownBuffer;
   157ac:	f504 6189 	add.w	r1, r4, #1096	; 0x448
   157b0:	6361      	str	r1, [r4, #52]	; 0x34
  strcpy(&p->acID[0], "SEGGER");
   157b2:	e893 0003 	ldmia.w	r3, {r0, r1}
  p->acID[6] = ' ';
   157b6:	2320      	movs	r3, #32
   157b8:	71a3      	strb	r3, [r4, #6]
  if (NumBytesRem > 0u) {
   157ba:	4555      	cmp	r5, sl
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   157bc:	f04f 0310 	mov.w	r3, #16
  p->aDown[0].sName         = "Terminal";
   157c0:	e9c4 520b 	strd	r5, r2, [r4, #44]	; 0x2c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   157c4:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
  p->aUp[0].WrOff         = 0u;
   157c8:	6265      	str	r5, [r4, #36]	; 0x24
  strcpy(&p->acID[0], "SEGGER");
   157ca:	6020      	str	r0, [r4, #0]
   157cc:	80a1      	strh	r1, [r4, #4]
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   157ce:	63a3      	str	r3, [r4, #56]	; 0x38
  if (NumBytesRem > 0u) {
   157d0:	d091      	beq.n	156f6 <SEGGER_RTT_GetKey+0x22>
   157d2:	e7b9      	b.n	15748 <SEGGER_RTT_GetKey+0x74>
   157d4:	200000d8 	.word	0x200000d8
   157d8:	00021524 	.word	0x00021524
   157dc:	00021530 	.word	0x00021530
   157e0:	00021534 	.word	0x00021534

000157e4 <SEGGER_RTT_Init>:
  strcpy(&p->acID[7], "RTT");
   157e4:	4814      	ldr	r0, [pc, #80]	; (15838 <SEGGER_RTT_Init+0x54>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   157e6:	4b15      	ldr	r3, [pc, #84]	; (1583c <SEGGER_RTT_Init+0x58>)
  strcpy(&p->acID[0], "SEGGER");
   157e8:	4915      	ldr	r1, [pc, #84]	; (15840 <SEGGER_RTT_Init+0x5c>)
  strcpy(&p->acID[7], "RTT");
   157ea:	6800      	ldr	r0, [r0, #0]
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
   157ec:	b410      	push	{r4}
  strcpy(&p->acID[7], "RTT");
   157ee:	f8c3 0007 	str.w	r0, [r3, #7]
  strcpy(&p->acID[0], "SEGGER");
   157f2:	c903      	ldmia	r1, {r0, r1}
  p->aUp[0].sName         = "Terminal";
   157f4:	4c13      	ldr	r4, [pc, #76]	; (15844 <SEGGER_RTT_Init+0x60>)
  strcpy(&p->acID[0], "SEGGER");
   157f6:	6018      	str	r0, [r3, #0]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   157f8:	2001      	movs	r0, #1
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   157fa:	e9c3 0004 	strd	r0, r0, [r3, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
   157fe:	f103 0048 	add.w	r0, r3, #72	; 0x48
   15802:	e9c3 4006 	strd	r4, r0, [r3, #24]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   15806:	f44f 6080 	mov.w	r0, #1024	; 0x400
  p->acID[6] = ' ';
   1580a:	f04f 0c20 	mov.w	ip, #32
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   1580e:	6218      	str	r0, [r3, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
   15810:	f503 6089 	add.w	r0, r3, #1096	; 0x448
  p->aUp[0].RdOff         = 0u;
   15814:	2200      	movs	r2, #0
  p->acID[6] = ' ';
   15816:	f883 c006 	strb.w	ip, [r3, #6]
  p->aDown[0].pBuffer       = _acDownBuffer;
   1581a:	6358      	str	r0, [r3, #52]	; 0x34
  strcpy(&p->acID[0], "SEGGER");
   1581c:	8099      	strh	r1, [r3, #4]
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   1581e:	2010      	movs	r0, #16
  p->aDown[0].sName         = "Terminal";
   15820:	e9c3 240b 	strd	r2, r4, [r3, #44]	; 0x2c
  p->aUp[0].RdOff         = 0u;
   15824:	629a      	str	r2, [r3, #40]	; 0x28
  _DoInit();
}
   15826:	f85d 4b04 	ldr.w	r4, [sp], #4
  p->aUp[0].WrOff         = 0u;
   1582a:	625a      	str	r2, [r3, #36]	; 0x24
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   1582c:	6398      	str	r0, [r3, #56]	; 0x38
  p->aDown[0].RdOff         = 0u;
   1582e:	641a      	str	r2, [r3, #64]	; 0x40
  p->aDown[0].WrOff         = 0u;
   15830:	63da      	str	r2, [r3, #60]	; 0x3c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   15832:	645a      	str	r2, [r3, #68]	; 0x44
}
   15834:	4770      	bx	lr
   15836:	bf00      	nop
   15838:	00021530 	.word	0x00021530
   1583c:	200000d8 	.word	0x200000d8
   15840:	00021534 	.word	0x00021534
   15844:	00021524 	.word	0x00021524

00015848 <dw1000_pkg_init>:
 *
 * @param void
 * @return void
 */
void dw1000_pkg_init(void)
{
   15848:	b508      	push	{r3, lr}
#if defined(MYNEWT)

#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    DIAGMSG("{\"utime\": %lu,\"msg\": \"dw1000_pkg_init\"}\n", dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
   1584a:	f7fb f873 	bl	10934 <dpl_cputime_get32>
   1584e:	4601      	mov	r1, r0
   15850:	4805      	ldr	r0, [pc, #20]	; (15868 <dw1000_pkg_init+0x20>)
   15852:	f7fa fff3 	bl	1083c <printf>
#endif

#if MYNEWT_VAL(DW1000_DEVICE_0)
    dw1000_dev_config(hal_dw1000_inst(0));
   15856:	2000      	movs	r0, #0
   15858:	f7f3 fa4e 	bl	8cf8 <hal_dw1000_inst>
   1585c:	f7f4 f896 	bl	998c <dw1000_dev_config>
#endif

#if MYNEWT_VAL(DW1000_CLI)
    dw1000_cli_register();
#endif
}
   15860:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dw1000_cli_register();
   15864:	f000 be74 	b.w	16550 <dw1000_cli_register>
   15868:	0002153b 	.word	0x0002153b

0001586c <dw1000_pkg_down>:

int dw1000_pkg_down(int reason)
{
   1586c:	b510      	push	{r4, lr}
   1586e:	4604      	mov	r4, r0
    struct os_dev *dev;
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    DIAGMSG("{\"utime\": %"PRIu32",\"msg\": \"dw1000_pkg_down\"}\n", dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
   15870:	f7fb f860 	bl	10934 <dpl_cputime_get32>
   15874:	4601      	mov	r1, r0
   15876:	480d      	ldr	r0, [pc, #52]	; (158ac <dw1000_pkg_down+0x40>)
   15878:	f7fa ffe0 	bl	1083c <printf>
#endif

    dev = os_dev_lookup("dw1000_0");
   1587c:	480c      	ldr	r0, [pc, #48]	; (158b0 <dw1000_pkg_down+0x44>)
   1587e:	f7f7 fa63 	bl	cd48 <os_dev_lookup>
    if (dev) {
   15882:	b108      	cbz	r0, 15888 <dw1000_pkg_down+0x1c>
        dw1000_dev_deinit((struct _dw1000_dev_instance_t *)dev);
   15884:	f7f4 f9f2 	bl	9c6c <dw1000_dev_deinit>
    }
    dev = os_dev_lookup("dw1000_1");
   15888:	480a      	ldr	r0, [pc, #40]	; (158b4 <dw1000_pkg_down+0x48>)
   1588a:	f7f7 fa5d 	bl	cd48 <os_dev_lookup>
    if (dev) {
   1588e:	b108      	cbz	r0, 15894 <dw1000_pkg_down+0x28>
        dw1000_dev_deinit((struct _dw1000_dev_instance_t *)dev);
   15890:	f7f4 f9ec 	bl	9c6c <dw1000_dev_deinit>
    }
    dev = os_dev_lookup("dw1000_2");
   15894:	4808      	ldr	r0, [pc, #32]	; (158b8 <dw1000_pkg_down+0x4c>)
   15896:	f7f7 fa57 	bl	cd48 <os_dev_lookup>
    if (dev) {
   1589a:	b108      	cbz	r0, 158a0 <dw1000_pkg_down+0x34>
        dw1000_dev_deinit((struct _dw1000_dev_instance_t *)dev);
   1589c:	f7f4 f9e6 	bl	9c6c <dw1000_dev_deinit>
    }
#if MYNEWT_VAL(DW1000_CLI)
    dw1000_cli_down(reason);
   158a0:	4620      	mov	r0, r4
   158a2:	f000 fe5b 	bl	1655c <dw1000_cli_down>
#endif
    return 0;
}
   158a6:	2000      	movs	r0, #0
   158a8:	bd10      	pop	{r4, pc}
   158aa:	bf00      	nop
   158ac:	00021564 	.word	0x00021564
   158b0:	00021500 	.word	0x00021500
   158b4:	0002158d 	.word	0x0002158d
   158b8:	00021596 	.word	0x00021596

000158bc <fctrl_ledgend>:
    return b;
}

static void
fctrl_ledgend(struct streamer *streamer)
{
   158bc:	b510      	push	{r4, lr}
    streamer_printf(streamer, "   D=Data, A=Ack, M=Mac\n");
   158be:	490b      	ldr	r1, [pc, #44]	; (158ec <fctrl_ledgend+0x30>)
{
   158c0:	4604      	mov	r4, r0
    streamer_printf(streamer, "   D=Data, A=Ack, M=Mac\n");
   158c2:	f7fe fde6 	bl	14492 <streamer_printf>
    streamer_printf(streamer, "   Secr: Security enabled, fPnd: Frame pending, ACKr: Ack requested, PANc: PANID Compress\n");
   158c6:	490a      	ldr	r1, [pc, #40]	; (158f0 <fctrl_ledgend+0x34>)
   158c8:	4620      	mov	r0, r4
   158ca:	f7fe fde2 	bl	14492 <streamer_printf>
    streamer_printf(streamer, "   Dst: No=no dest addres, Rs=Reserved, 16-bit address, 64-bit address\n");
   158ce:	4909      	ldr	r1, [pc, #36]	; (158f4 <fctrl_ledgend+0x38>)
   158d0:	4620      	mov	r0, r4
   158d2:	f7fe fdde 	bl	14492 <streamer_printf>
    streamer_printf(streamer, "   Frame version: I-IEEE 802.15.4, I2003-IEEE 802.15.4-2003, iFv-Invalid Frame Version\n");
   158d6:	4908      	ldr	r1, [pc, #32]	; (158f8 <fctrl_ledgend+0x3c>)
   158d8:	4620      	mov	r0, r4
   158da:	f7fe fdda 	bl	14492 <streamer_printf>
    streamer_printf(streamer, "   Src: No=no src addres, Rs=Reserved, 16-bit address, 64-bit address\n");
   158de:	4620      	mov	r0, r4
   158e0:	4906      	ldr	r1, [pc, #24]	; (158fc <fctrl_ledgend+0x40>)
}
   158e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    streamer_printf(streamer, "   Src: No=no src addres, Rs=Reserved, 16-bit address, 64-bit address\n");
   158e6:	f7fe bdd4 	b.w	14492 <streamer_printf>
   158ea:	bf00      	nop
   158ec:	0002159f 	.word	0x0002159f
   158f0:	000215b8 	.word	0x000215b8
   158f4:	00021613 	.word	0x00021613
   158f8:	0002165b 	.word	0x0002165b
   158fc:	000216b3 	.word	0x000216b3

00015900 <fctrl_to_string>:
{
   15900:	b570      	push	{r4, r5, r6, lr}
    memset(b,0,sizeof(b));
   15902:	4d57      	ldr	r5, [pc, #348]	; (15a60 <fctrl_to_string+0x160>)
{
   15904:	4606      	mov	r6, r0
    memset(b,0,sizeof(b));
   15906:	2228      	movs	r2, #40	; 0x28
   15908:	2100      	movs	r1, #0
   1590a:	4628      	mov	r0, r5
   1590c:	f7fa fcbd 	bl	1028a <memset>
    if ((s & 0x0007) == 0x0001) bp += snprintf(bp,sizeof(b)-(bp-b), "D|");  /* Data */
   15910:	f006 0307 	and.w	r3, r6, #7
   15914:	2b01      	cmp	r3, #1
   15916:	d138      	bne.n	1598a <fctrl_to_string+0x8a>
   15918:	4952      	ldr	r1, [pc, #328]	; (15a64 <fctrl_to_string+0x164>)
    if ((s & 0x0007) == 0x0003) bp += snprintf(bp,sizeof(b)-(bp-b), "M|");  /* Reserved */
   1591a:	4628      	mov	r0, r5
   1591c:	f004 faa0 	bl	19e60 <strcpy>
    if ((s & 0x0007) == 0x0004) bp += snprintf(bp,sizeof(b)-(bp-b), "R|");
   15920:	1cac      	adds	r4, r5, #2
    if ((s & 0x0008) == 0x0008) bp += snprintf(bp,sizeof(b)-(bp-b), "Secr|"); /* Security Enabeled */
   15922:	0730      	lsls	r0, r6, #28
   15924:	d507      	bpl.n	15936 <fctrl_to_string+0x36>
   15926:	1b61      	subs	r1, r4, r5
   15928:	4620      	mov	r0, r4
   1592a:	4a4f      	ldr	r2, [pc, #316]	; (15a68 <fctrl_to_string+0x168>)
   1592c:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   15930:	f7fa ffb4 	bl	1089c <snprintf>
   15934:	4404      	add	r4, r0
    if ((s & 0x0010) == 0x0010) bp += snprintf(bp,sizeof(b)-(bp-b), "fPnd|"); /* Frame Pending */
   15936:	06f1      	lsls	r1, r6, #27
   15938:	d507      	bpl.n	1594a <fctrl_to_string+0x4a>
   1593a:	1b61      	subs	r1, r4, r5
   1593c:	4620      	mov	r0, r4
   1593e:	4a4b      	ldr	r2, [pc, #300]	; (15a6c <fctrl_to_string+0x16c>)
   15940:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   15944:	f7fa ffaa 	bl	1089c <snprintf>
   15948:	4404      	add	r4, r0
    if ((s & 0x0020) == 0x0020) bp += snprintf(bp,sizeof(b)-(bp-b), "ACKr|"); /* Ack requested */
   1594a:	06b2      	lsls	r2, r6, #26
   1594c:	d507      	bpl.n	1595e <fctrl_to_string+0x5e>
   1594e:	1b61      	subs	r1, r4, r5
   15950:	4620      	mov	r0, r4
   15952:	4a47      	ldr	r2, [pc, #284]	; (15a70 <fctrl_to_string+0x170>)
   15954:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   15958:	f7fa ffa0 	bl	1089c <snprintf>
   1595c:	4404      	add	r4, r0
    if ((s & 0x0040) == 0x0040) bp += snprintf(bp,sizeof(b)-(bp-b), "PANc|"); /* PANID Compress */
   1595e:	0673      	lsls	r3, r6, #25
   15960:	d507      	bpl.n	15972 <fctrl_to_string+0x72>
   15962:	1b61      	subs	r1, r4, r5
   15964:	4620      	mov	r0, r4
   15966:	4a43      	ldr	r2, [pc, #268]	; (15a74 <fctrl_to_string+0x174>)
   15968:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   1596c:	f7fa ff96 	bl	1089c <snprintf>
   15970:	4404      	add	r4, r0
    if ((s & 0x0C00) == 0x0000) bp += snprintf(bp,sizeof(b)-(bp-b), "DstNo|"); /* No destination address */
   15972:	f416 6340 	ands.w	r3, r6, #3072	; 0xc00
   15976:	d126      	bne.n	159c6 <fctrl_to_string+0xc6>
   15978:	4a3f      	ldr	r2, [pc, #252]	; (15a78 <fctrl_to_string+0x178>)
   1597a:	1b61      	subs	r1, r4, r5
    if ((s & 0x0C00) == 0x0C00) bp += snprintf(bp,sizeof(b)-(bp-b), "Dst64|"); /* 64-bit destination address */
   1597c:	4620      	mov	r0, r4
   1597e:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   15982:	f7fa ff8b 	bl	1089c <snprintf>
   15986:	4404      	add	r4, r0
   15988:	e02c      	b.n	159e4 <fctrl_to_string+0xe4>
    if ((s & 0x0007) == 0x0002) bp += snprintf(bp,sizeof(b)-(bp-b), "A|");  /* Acknowledge */
   1598a:	2b02      	cmp	r3, #2
   1598c:	d003      	beq.n	15996 <fctrl_to_string+0x96>
    if ((s & 0x0007) == 0x0003) bp += snprintf(bp,sizeof(b)-(bp-b), "M|");  /* Reserved */
   1598e:	2b03      	cmp	r3, #3
   15990:	d103      	bne.n	1599a <fctrl_to_string+0x9a>
   15992:	493a      	ldr	r1, [pc, #232]	; (15a7c <fctrl_to_string+0x17c>)
   15994:	e7c1      	b.n	1591a <fctrl_to_string+0x1a>
    if ((s & 0x0007) == 0x0002) bp += snprintf(bp,sizeof(b)-(bp-b), "A|");  /* Acknowledge */
   15996:	493a      	ldr	r1, [pc, #232]	; (15a80 <fctrl_to_string+0x180>)
   15998:	e7bf      	b.n	1591a <fctrl_to_string+0x1a>
    if ((s & 0x0007) == 0x0004) bp += snprintf(bp,sizeof(b)-(bp-b), "R|");
   1599a:	2b04      	cmp	r3, #4
   1599c:	d00d      	beq.n	159ba <fctrl_to_string+0xba>
    if ((s & 0x0007) == 0x0005) bp += snprintf(bp,sizeof(b)-(bp-b), "R|");
   1599e:	2b05      	cmp	r3, #5
   159a0:	d004      	beq.n	159ac <fctrl_to_string+0xac>
    if ((s & 0x0007) == 0x0006) bp += snprintf(bp,sizeof(b)-(bp-b), "R|");
   159a2:	2b06      	cmp	r3, #6
    char *bp = b;
   159a4:	462c      	mov	r4, r5
    if ((s & 0x0007) == 0x0006) bp += snprintf(bp,sizeof(b)-(bp-b), "R|");
   159a6:	d001      	beq.n	159ac <fctrl_to_string+0xac>
    if ((s & 0x0007) == 0x0007) bp += snprintf(bp,sizeof(b)-(bp-b), "R|");
   159a8:	2b07      	cmp	r3, #7
   159aa:	d1ba      	bne.n	15922 <fctrl_to_string+0x22>
   159ac:	4a35      	ldr	r2, [pc, #212]	; (15a84 <fctrl_to_string+0x184>)
   159ae:	2128      	movs	r1, #40	; 0x28
   159b0:	4628      	mov	r0, r5
   159b2:	f7fa ff73 	bl	1089c <snprintf>
   159b6:	182c      	adds	r4, r5, r0
   159b8:	e7b3      	b.n	15922 <fctrl_to_string+0x22>
    if ((s & 0x0007) == 0x0004) bp += snprintf(bp,sizeof(b)-(bp-b), "R|");
   159ba:	4a32      	ldr	r2, [pc, #200]	; (15a84 <fctrl_to_string+0x184>)
   159bc:	2128      	movs	r1, #40	; 0x28
   159be:	4628      	mov	r0, r5
   159c0:	f7fa ff6c 	bl	1089c <snprintf>
   159c4:	e7ac      	b.n	15920 <fctrl_to_string+0x20>
    if ((s & 0x0C00) == 0x0400) bp += snprintf(bp,sizeof(b)-(bp-b), "DstRs|"); /* Reserved */
   159c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   159ca:	d005      	beq.n	159d8 <fctrl_to_string+0xd8>
    if ((s & 0x0C00) == 0x0800) bp += snprintf(bp,sizeof(b)-(bp-b), "Dst16|"); /* 16-bit destination address */
   159cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   159d0:	d105      	bne.n	159de <fctrl_to_string+0xde>
   159d2:	4a2d      	ldr	r2, [pc, #180]	; (15a88 <fctrl_to_string+0x188>)
   159d4:	1b61      	subs	r1, r4, r5
   159d6:	e7d1      	b.n	1597c <fctrl_to_string+0x7c>
    if ((s & 0x0C00) == 0x0400) bp += snprintf(bp,sizeof(b)-(bp-b), "DstRs|"); /* Reserved */
   159d8:	4a2c      	ldr	r2, [pc, #176]	; (15a8c <fctrl_to_string+0x18c>)
   159da:	1b61      	subs	r1, r4, r5
   159dc:	e7ce      	b.n	1597c <fctrl_to_string+0x7c>
    if ((s & 0x0C00) == 0x0C00) bp += snprintf(bp,sizeof(b)-(bp-b), "Dst64|"); /* 64-bit destination address */
   159de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
   159e2:	d00b      	beq.n	159fc <fctrl_to_string+0xfc>
    if ((s & 0x3000) == 0x0000) bp += snprintf(bp,sizeof(b)-(bp-b), "I2003|");
   159e4:	f416 5340 	ands.w	r3, r6, #12288	; 0x3000
   159e8:	d10b      	bne.n	15a02 <fctrl_to_string+0x102>
   159ea:	4a29      	ldr	r2, [pc, #164]	; (15a90 <fctrl_to_string+0x190>)
   159ec:	1b61      	subs	r1, r4, r5
    if ((s & 0x3000) == 0x3000) bp += snprintf(bp,sizeof(b)-(bp-b), "iFv|");
   159ee:	4620      	mov	r0, r4
   159f0:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   159f4:	f7fa ff52 	bl	1089c <snprintf>
   159f8:	4404      	add	r4, r0
   159fa:	e011      	b.n	15a20 <fctrl_to_string+0x120>
    if ((s & 0x0C00) == 0x0C00) bp += snprintf(bp,sizeof(b)-(bp-b), "Dst64|"); /* 64-bit destination address */
   159fc:	4a25      	ldr	r2, [pc, #148]	; (15a94 <fctrl_to_string+0x194>)
   159fe:	1b61      	subs	r1, r4, r5
   15a00:	e7bc      	b.n	1597c <fctrl_to_string+0x7c>
    if ((s & 0x3000) == 0x1000) bp += snprintf(bp,sizeof(b)-(bp-b), "I|");
   15a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   15a06:	d005      	beq.n	15a14 <fctrl_to_string+0x114>
    if ((s & 0x3000) == 0x2000) bp += snprintf(bp,sizeof(b)-(bp-b), "iFv|"); /* Invalid frame version */
   15a08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   15a0c:	d105      	bne.n	15a1a <fctrl_to_string+0x11a>
    if ((s & 0x3000) == 0x3000) bp += snprintf(bp,sizeof(b)-(bp-b), "iFv|");
   15a0e:	4a22      	ldr	r2, [pc, #136]	; (15a98 <fctrl_to_string+0x198>)
   15a10:	1b61      	subs	r1, r4, r5
   15a12:	e7ec      	b.n	159ee <fctrl_to_string+0xee>
    if ((s & 0x3000) == 0x1000) bp += snprintf(bp,sizeof(b)-(bp-b), "I|");
   15a14:	4a21      	ldr	r2, [pc, #132]	; (15a9c <fctrl_to_string+0x19c>)
   15a16:	1b61      	subs	r1, r4, r5
   15a18:	e7e9      	b.n	159ee <fctrl_to_string+0xee>
    if ((s & 0x3000) == 0x3000) bp += snprintf(bp,sizeof(b)-(bp-b), "iFv|");
   15a1a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
   15a1e:	d0f6      	beq.n	15a0e <fctrl_to_string+0x10e>
    if ((s & 0xC000) == 0x0000) bp += snprintf(bp,sizeof(b)-(bp-b), "SrcNo"); /* No destination address */
   15a20:	f416 4640 	ands.w	r6, r6, #49152	; 0xc000
   15a24:	d107      	bne.n	15a36 <fctrl_to_string+0x136>
   15a26:	4a1e      	ldr	r2, [pc, #120]	; (15aa0 <fctrl_to_string+0x1a0>)
   15a28:	1b61      	subs	r1, r4, r5
    if ((s & 0xC000) == 0xC000) bp += snprintf(bp,sizeof(b)-(bp-b), "Src64"); /* 64-bit destination address */
   15a2a:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   15a2e:	4620      	mov	r0, r4
   15a30:	f7fa ff34 	bl	1089c <snprintf>
   15a34:	e00e      	b.n	15a54 <fctrl_to_string+0x154>
    if ((s & 0xC000) == 0x4000) bp += snprintf(bp,sizeof(b)-(bp-b), "SrcRs"); /* Reserved */
   15a36:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
   15a3a:	d005      	beq.n	15a48 <fctrl_to_string+0x148>
    if ((s & 0xC000) == 0x8000) bp += snprintf(bp,sizeof(b)-(bp-b), "Src16"); /* 16-bit destination address */
   15a3c:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   15a40:	d105      	bne.n	15a4e <fctrl_to_string+0x14e>
   15a42:	4a18      	ldr	r2, [pc, #96]	; (15aa4 <fctrl_to_string+0x1a4>)
   15a44:	1b61      	subs	r1, r4, r5
   15a46:	e7f0      	b.n	15a2a <fctrl_to_string+0x12a>
    if ((s & 0xC000) == 0x4000) bp += snprintf(bp,sizeof(b)-(bp-b), "SrcRs"); /* Reserved */
   15a48:	4a17      	ldr	r2, [pc, #92]	; (15aa8 <fctrl_to_string+0x1a8>)
   15a4a:	1b61      	subs	r1, r4, r5
   15a4c:	e7ed      	b.n	15a2a <fctrl_to_string+0x12a>
    if ((s & 0xC000) == 0xC000) bp += snprintf(bp,sizeof(b)-(bp-b), "Src64"); /* 64-bit destination address */
   15a4e:	f5b6 4f40 	cmp.w	r6, #49152	; 0xc000
   15a52:	d001      	beq.n	15a58 <fctrl_to_string+0x158>
}
   15a54:	4802      	ldr	r0, [pc, #8]	; (15a60 <fctrl_to_string+0x160>)
   15a56:	bd70      	pop	{r4, r5, r6, pc}
    if ((s & 0xC000) == 0xC000) bp += snprintf(bp,sizeof(b)-(bp-b), "Src64"); /* 64-bit destination address */
   15a58:	4a14      	ldr	r2, [pc, #80]	; (15aac <fctrl_to_string+0x1ac>)
   15a5a:	1b61      	subs	r1, r4, r5
   15a5c:	e7e5      	b.n	15a2a <fctrl_to_string+0x12a>
   15a5e:	bf00      	nop
   15a60:	20006ba0 	.word	0x20006ba0
   15a64:	000216fa 	.word	0x000216fa
   15a68:	00021706 	.word	0x00021706
   15a6c:	0002170c 	.word	0x0002170c
   15a70:	00021712 	.word	0x00021712
   15a74:	00021718 	.word	0x00021718
   15a78:	0002171e 	.word	0x0002171e
   15a7c:	00021700 	.word	0x00021700
   15a80:	000216fd 	.word	0x000216fd
   15a84:	00021703 	.word	0x00021703
   15a88:	0002172c 	.word	0x0002172c
   15a8c:	00021725 	.word	0x00021725
   15a90:	0002173a 	.word	0x0002173a
   15a94:	00021733 	.word	0x00021733
   15a98:	00021744 	.word	0x00021744
   15a9c:	00021741 	.word	0x00021741
   15aa0:	00021749 	.word	0x00021749
   15aa4:	00021755 	.word	0x00021755
   15aa8:	0002174f 	.word	0x0002174f
   15aac:	0002175b 	.word	0x0002175b

00015ab0 <sys_status_to_string>:
{
   15ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    memset(b,0,sizeof(b));
   15ab2:	2280      	movs	r2, #128	; 0x80
{
   15ab4:	460f      	mov	r7, r1
   15ab6:	4605      	mov	r5, r0
    memset(b,0,sizeof(b));
   15ab8:	2100      	movs	r1, #0
   15aba:	48b0      	ldr	r0, [pc, #704]	; (15d7c <sys_status_to_string+0x2cc>)
   15abc:	4eaf      	ldr	r6, [pc, #700]	; (15d7c <sys_status_to_string+0x2cc>)
   15abe:	f7fa fbe4 	bl	1028a <memset>
    if (s & 0x0400000000) bp += snprintf(bp,sizeof(b)-(bp-b), "TxPwrUpTmErr|" );
   15ac2:	f017 0f04 	tst.w	r7, #4
   15ac6:	f000 8156 	beq.w	15d76 <sys_status_to_string+0x2c6>
   15aca:	49ad      	ldr	r1, [pc, #692]	; (15d80 <sys_status_to_string+0x2d0>)
   15acc:	4630      	mov	r0, r6
   15ace:	f004 f9c7 	bl	19e60 <strcpy>
   15ad2:	f106 040d 	add.w	r4, r6, #13
    if (s & 0x0200000000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxPreambRej|");
   15ad6:	07ba      	lsls	r2, r7, #30
   15ad8:	d507      	bpl.n	15aea <sys_status_to_string+0x3a>
   15ada:	1ba1      	subs	r1, r4, r6
   15adc:	4620      	mov	r0, r4
   15ade:	4aa9      	ldr	r2, [pc, #676]	; (15d84 <sys_status_to_string+0x2d4>)
   15ae0:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   15ae4:	f7fa feda 	bl	1089c <snprintf>
   15ae8:	4404      	add	r4, r0
    if (s & 0x0100000000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxReedSolCorr|");
   15aea:	07fb      	lsls	r3, r7, #31
   15aec:	d507      	bpl.n	15afe <sys_status_to_string+0x4e>
   15aee:	1ba1      	subs	r1, r4, r6
   15af0:	4620      	mov	r0, r4
   15af2:	4aa5      	ldr	r2, [pc, #660]	; (15d88 <sys_status_to_string+0x2d8>)
   15af4:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   15af8:	f7fa fed0 	bl	1089c <snprintf>
   15afc:	4404      	add	r4, r0
    if (s & 0x80000000) bp += snprintf(bp,sizeof(b)-(bp-b), "ICRxBufPtr=1|");
   15afe:	2d00      	cmp	r5, #0
   15b00:	da07      	bge.n	15b12 <sys_status_to_string+0x62>
   15b02:	1ba1      	subs	r1, r4, r6
   15b04:	4620      	mov	r0, r4
   15b06:	4aa1      	ldr	r2, [pc, #644]	; (15d8c <sys_status_to_string+0x2dc>)
   15b08:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   15b0c:	f7fa fec6 	bl	1089c <snprintf>
   15b10:	4404      	add	r4, r0
    if (s & 0x40000000) bp += snprintf(bp,sizeof(b)-(bp-b), "HostRxBufPtr=1|");
   15b12:	006f      	lsls	r7, r5, #1
   15b14:	d507      	bpl.n	15b26 <sys_status_to_string+0x76>
   15b16:	1ba1      	subs	r1, r4, r6
   15b18:	4620      	mov	r0, r4
   15b1a:	4a9d      	ldr	r2, [pc, #628]	; (15d90 <sys_status_to_string+0x2e0>)
   15b1c:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   15b20:	f7fa febc 	bl	1089c <snprintf>
   15b24:	4404      	add	r4, r0
    if (s & 0x20000000) bp += snprintf(bp,sizeof(b)-(bp-b), "AutFrameFiltRej|");
   15b26:	00a8      	lsls	r0, r5, #2
   15b28:	d507      	bpl.n	15b3a <sys_status_to_string+0x8a>
   15b2a:	1ba1      	subs	r1, r4, r6
   15b2c:	4620      	mov	r0, r4
   15b2e:	4a99      	ldr	r2, [pc, #612]	; (15d94 <sys_status_to_string+0x2e4>)
   15b30:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   15b34:	f7fa feb2 	bl	1089c <snprintf>
   15b38:	4404      	add	r4, r0
    if (s & 0x10000000) bp += snprintf(bp,sizeof(b)-(bp-b), "TransmitBufferError|");
   15b3a:	00e9      	lsls	r1, r5, #3
   15b3c:	d507      	bpl.n	15b4e <sys_status_to_string+0x9e>
   15b3e:	1ba1      	subs	r1, r4, r6
   15b40:	4620      	mov	r0, r4
   15b42:	4a95      	ldr	r2, [pc, #596]	; (15d98 <sys_status_to_string+0x2e8>)
   15b44:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   15b48:	f7fa fea8 	bl	1089c <snprintf>
   15b4c:	4404      	add	r4, r0
    if (s & 0x08000000) bp += snprintf(bp,sizeof(b)-(bp-b), "HalfPeriodDelayWarn|");
   15b4e:	012a      	lsls	r2, r5, #4
   15b50:	d507      	bpl.n	15b62 <sys_status_to_string+0xb2>
   15b52:	1ba1      	subs	r1, r4, r6
   15b54:	4620      	mov	r0, r4
   15b56:	4a91      	ldr	r2, [pc, #580]	; (15d9c <sys_status_to_string+0x2ec>)
   15b58:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   15b5c:	f7fa fe9e 	bl	1089c <snprintf>
   15b60:	4404      	add	r4, r0
    if (s & 0x04000000) bp += snprintf(bp,sizeof(b)-(bp-b), "RXSFDTimeout|");
   15b62:	016b      	lsls	r3, r5, #5
   15b64:	d507      	bpl.n	15b76 <sys_status_to_string+0xc6>
   15b66:	1ba1      	subs	r1, r4, r6
   15b68:	4620      	mov	r0, r4
   15b6a:	4a8d      	ldr	r2, [pc, #564]	; (15da0 <sys_status_to_string+0x2f0>)
   15b6c:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   15b70:	f7fa fe94 	bl	1089c <snprintf>
   15b74:	4404      	add	r4, r0
    if (s & 0x02000000) bp += snprintf(bp,sizeof(b)-(bp-b), "ClockPLLLosingLock|");
   15b76:	01af      	lsls	r7, r5, #6
   15b78:	d507      	bpl.n	15b8a <sys_status_to_string+0xda>
   15b7a:	1ba1      	subs	r1, r4, r6
   15b7c:	4620      	mov	r0, r4
   15b7e:	4a89      	ldr	r2, [pc, #548]	; (15da4 <sys_status_to_string+0x2f4>)
   15b80:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   15b84:	f7fa fe8a 	bl	1089c <snprintf>
   15b88:	4404      	add	r4, r0
    if (s & 0x01000000) bp += snprintf(bp,sizeof(b)-(bp-b), "RFPLLLosingLock|");
   15b8a:	01e8      	lsls	r0, r5, #7
   15b8c:	d507      	bpl.n	15b9e <sys_status_to_string+0xee>
   15b8e:	1ba1      	subs	r1, r4, r6
   15b90:	4620      	mov	r0, r4
   15b92:	4a85      	ldr	r2, [pc, #532]	; (15da8 <sys_status_to_string+0x2f8>)
   15b94:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   15b98:	f7fa fe80 	bl	1089c <snprintf>
   15b9c:	4404      	add	r4, r0
    if (s & 0x00800000) bp += snprintf(bp,sizeof(b)-(bp-b), "SLEEP2INIT|");
   15b9e:	0229      	lsls	r1, r5, #8
   15ba0:	d507      	bpl.n	15bb2 <sys_status_to_string+0x102>
   15ba2:	1ba1      	subs	r1, r4, r6
   15ba4:	4620      	mov	r0, r4
   15ba6:	4a81      	ldr	r2, [pc, #516]	; (15dac <sys_status_to_string+0x2fc>)
   15ba8:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   15bac:	f7fa fe76 	bl	1089c <snprintf>
   15bb0:	4404      	add	r4, r0
    if (s & 0x00400000) bp += snprintf(bp,sizeof(b)-(bp-b), "GpioInt|");
   15bb2:	026a      	lsls	r2, r5, #9
   15bb4:	d507      	bpl.n	15bc6 <sys_status_to_string+0x116>
   15bb6:	1ba1      	subs	r1, r4, r6
   15bb8:	4620      	mov	r0, r4
   15bba:	4a7d      	ldr	r2, [pc, #500]	; (15db0 <sys_status_to_string+0x300>)
   15bbc:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   15bc0:	f7fa fe6c 	bl	1089c <snprintf>
   15bc4:	4404      	add	r4, r0
    if (s & 0x00200000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxPreamDetTimeout|");
   15bc6:	02ab      	lsls	r3, r5, #10
   15bc8:	d507      	bpl.n	15bda <sys_status_to_string+0x12a>
   15bca:	1ba1      	subs	r1, r4, r6
   15bcc:	4620      	mov	r0, r4
   15bce:	4a79      	ldr	r2, [pc, #484]	; (15db4 <sys_status_to_string+0x304>)
   15bd0:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   15bd4:	f7fa fe62 	bl	1089c <snprintf>
   15bd8:	4404      	add	r4, r0
    if (s & 0x00100000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxOvErr|");
   15bda:	02ef      	lsls	r7, r5, #11
   15bdc:	d507      	bpl.n	15bee <sys_status_to_string+0x13e>
   15bde:	1ba1      	subs	r1, r4, r6
   15be0:	4620      	mov	r0, r4
   15be2:	4a75      	ldr	r2, [pc, #468]	; (15db8 <sys_status_to_string+0x308>)
   15be4:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   15be8:	f7fa fe58 	bl	1089c <snprintf>
   15bec:	4404      	add	r4, r0
    if (s & 0x00080000) bp += snprintf(bp,sizeof(b)-(bp-b), "(bit19 reserved)|");
   15bee:	0328      	lsls	r0, r5, #12
   15bf0:	d507      	bpl.n	15c02 <sys_status_to_string+0x152>
   15bf2:	1ba1      	subs	r1, r4, r6
   15bf4:	4620      	mov	r0, r4
   15bf6:	4a71      	ldr	r2, [pc, #452]	; (15dbc <sys_status_to_string+0x30c>)
   15bf8:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   15bfc:	f7fa fe4e 	bl	1089c <snprintf>
   15c00:	4404      	add	r4, r0
    if (s & 0x00040000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxLDEerr|");
   15c02:	0369      	lsls	r1, r5, #13
   15c04:	d507      	bpl.n	15c16 <sys_status_to_string+0x166>
   15c06:	1ba1      	subs	r1, r4, r6
   15c08:	4620      	mov	r0, r4
   15c0a:	4a6d      	ldr	r2, [pc, #436]	; (15dc0 <sys_status_to_string+0x310>)
   15c0c:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   15c10:	f7fa fe44 	bl	1089c <snprintf>
   15c14:	4404      	add	r4, r0
    if (s & 0x00020000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxTimeout|");
   15c16:	03aa      	lsls	r2, r5, #14
   15c18:	d507      	bpl.n	15c2a <sys_status_to_string+0x17a>
   15c1a:	1ba1      	subs	r1, r4, r6
   15c1c:	4620      	mov	r0, r4
   15c1e:	4a69      	ldr	r2, [pc, #420]	; (15dc4 <sys_status_to_string+0x314>)
   15c20:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   15c24:	f7fa fe3a 	bl	1089c <snprintf>
   15c28:	4404      	add	r4, r0
    if (s & 0x00010000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxReedSolomonFrameSyncLoss|");
   15c2a:	03eb      	lsls	r3, r5, #15
   15c2c:	d507      	bpl.n	15c3e <sys_status_to_string+0x18e>
   15c2e:	1ba1      	subs	r1, r4, r6
   15c30:	4620      	mov	r0, r4
   15c32:	4a65      	ldr	r2, [pc, #404]	; (15dc8 <sys_status_to_string+0x318>)
   15c34:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   15c38:	f7fa fe30 	bl	1089c <snprintf>
   15c3c:	4404      	add	r4, r0
    if (s & 0x00008000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxFCSErr|");
   15c3e:	042f      	lsls	r7, r5, #16
   15c40:	d507      	bpl.n	15c52 <sys_status_to_string+0x1a2>
   15c42:	1ba1      	subs	r1, r4, r6
   15c44:	4620      	mov	r0, r4
   15c46:	4a61      	ldr	r2, [pc, #388]	; (15dcc <sys_status_to_string+0x31c>)
   15c48:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   15c4c:	f7fa fe26 	bl	1089c <snprintf>
   15c50:	4404      	add	r4, r0
    if (s & 0x00004000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxFCSGood|");
   15c52:	0468      	lsls	r0, r5, #17
   15c54:	d507      	bpl.n	15c66 <sys_status_to_string+0x1b6>
   15c56:	1ba1      	subs	r1, r4, r6
   15c58:	4620      	mov	r0, r4
   15c5a:	4a5d      	ldr	r2, [pc, #372]	; (15dd0 <sys_status_to_string+0x320>)
   15c5c:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   15c60:	f7fa fe1c 	bl	1089c <snprintf>
   15c64:	4404      	add	r4, r0
    if (s & 0x00002000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxDataFrmRdy|");
   15c66:	04a9      	lsls	r1, r5, #18
   15c68:	d507      	bpl.n	15c7a <sys_status_to_string+0x1ca>
   15c6a:	1ba1      	subs	r1, r4, r6
   15c6c:	4620      	mov	r0, r4
   15c6e:	4a59      	ldr	r2, [pc, #356]	; (15dd4 <sys_status_to_string+0x324>)
   15c70:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   15c74:	f7fa fe12 	bl	1089c <snprintf>
   15c78:	4404      	add	r4, r0
    if (s & 0x00001000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxPHYErr|");
   15c7a:	04ea      	lsls	r2, r5, #19
   15c7c:	d507      	bpl.n	15c8e <sys_status_to_string+0x1de>
   15c7e:	1ba1      	subs	r1, r4, r6
   15c80:	4620      	mov	r0, r4
   15c82:	4a55      	ldr	r2, [pc, #340]	; (15dd8 <sys_status_to_string+0x328>)
   15c84:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   15c88:	f7fa fe08 	bl	1089c <snprintf>
   15c8c:	4404      	add	r4, r0
    if (s & 0x00000800) bp += snprintf(bp,sizeof(b)-(bp-b), "RxPHYDet|");
   15c8e:	052b      	lsls	r3, r5, #20
   15c90:	d507      	bpl.n	15ca2 <sys_status_to_string+0x1f2>
   15c92:	1ba1      	subs	r1, r4, r6
   15c94:	4620      	mov	r0, r4
   15c96:	4a51      	ldr	r2, [pc, #324]	; (15ddc <sys_status_to_string+0x32c>)
   15c98:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   15c9c:	f7fa fdfe 	bl	1089c <snprintf>
   15ca0:	4404      	add	r4, r0
    if (s & 0x00000400) bp += snprintf(bp,sizeof(b)-(bp-b), "RxLDEdone|");
   15ca2:	056f      	lsls	r7, r5, #21
   15ca4:	d507      	bpl.n	15cb6 <sys_status_to_string+0x206>
   15ca6:	1ba1      	subs	r1, r4, r6
   15ca8:	4620      	mov	r0, r4
   15caa:	4a4d      	ldr	r2, [pc, #308]	; (15de0 <sys_status_to_string+0x330>)
   15cac:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   15cb0:	f7fa fdf4 	bl	1089c <snprintf>
   15cb4:	4404      	add	r4, r0
    if (s & 0x00000200) bp += snprintf(bp,sizeof(b)-(bp-b), "RxSFDet|");
   15cb6:	05a8      	lsls	r0, r5, #22
   15cb8:	d507      	bpl.n	15cca <sys_status_to_string+0x21a>
   15cba:	1ba1      	subs	r1, r4, r6
   15cbc:	4620      	mov	r0, r4
   15cbe:	4a49      	ldr	r2, [pc, #292]	; (15de4 <sys_status_to_string+0x334>)
   15cc0:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   15cc4:	f7fa fdea 	bl	1089c <snprintf>
   15cc8:	4404      	add	r4, r0
    if (s & 0x00000100) bp += snprintf(bp,sizeof(b)-(bp-b), "RxPreamDet|");
   15cca:	05e9      	lsls	r1, r5, #23
   15ccc:	d507      	bpl.n	15cde <sys_status_to_string+0x22e>
   15cce:	1ba1      	subs	r1, r4, r6
   15cd0:	4620      	mov	r0, r4
   15cd2:	4a45      	ldr	r2, [pc, #276]	; (15de8 <sys_status_to_string+0x338>)
   15cd4:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   15cd8:	f7fa fde0 	bl	1089c <snprintf>
   15cdc:	4404      	add	r4, r0
    if (s & 0x00000080) bp += snprintf(bp,sizeof(b)-(bp-b), "TxFrameSent|");
   15cde:	062a      	lsls	r2, r5, #24
   15ce0:	d507      	bpl.n	15cf2 <sys_status_to_string+0x242>
   15ce2:	1ba1      	subs	r1, r4, r6
   15ce4:	4620      	mov	r0, r4
   15ce6:	4a41      	ldr	r2, [pc, #260]	; (15dec <sys_status_to_string+0x33c>)
   15ce8:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   15cec:	f7fa fdd6 	bl	1089c <snprintf>
   15cf0:	4404      	add	r4, r0
    if (s & 0x00000040) bp += snprintf(bp,sizeof(b)-(bp-b), "TxPHYDone|");
   15cf2:	066b      	lsls	r3, r5, #25
   15cf4:	d507      	bpl.n	15d06 <sys_status_to_string+0x256>
   15cf6:	1ba1      	subs	r1, r4, r6
   15cf8:	4620      	mov	r0, r4
   15cfa:	4a3d      	ldr	r2, [pc, #244]	; (15df0 <sys_status_to_string+0x340>)
   15cfc:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   15d00:	f7fa fdcc 	bl	1089c <snprintf>
   15d04:	4404      	add	r4, r0
    if (s & 0x00000020) bp += snprintf(bp,sizeof(b)-(bp-b), "TxPreamDone|");
   15d06:	06af      	lsls	r7, r5, #26
   15d08:	d507      	bpl.n	15d1a <sys_status_to_string+0x26a>
   15d0a:	1ba1      	subs	r1, r4, r6
   15d0c:	4620      	mov	r0, r4
   15d0e:	4a39      	ldr	r2, [pc, #228]	; (15df4 <sys_status_to_string+0x344>)
   15d10:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   15d14:	f7fa fdc2 	bl	1089c <snprintf>
   15d18:	4404      	add	r4, r0
    if (s & 0x00000010) bp += snprintf(bp,sizeof(b)-(bp-b), "TxStart|");
   15d1a:	06ee      	lsls	r6, r5, #27
   15d1c:	d506      	bpl.n	15d2c <sys_status_to_string+0x27c>
   15d1e:	4936      	ldr	r1, [pc, #216]	; (15df8 <sys_status_to_string+0x348>)
   15d20:	4a36      	ldr	r2, [pc, #216]	; (15dfc <sys_status_to_string+0x34c>)
   15d22:	1b09      	subs	r1, r1, r4
   15d24:	4620      	mov	r0, r4
   15d26:	f7fa fdb9 	bl	1089c <snprintf>
   15d2a:	4404      	add	r4, r0
    if (s & 0x00000008) bp += snprintf(bp,sizeof(b)-(bp-b), "AutoAck|");
   15d2c:	0728      	lsls	r0, r5, #28
   15d2e:	d506      	bpl.n	15d3e <sys_status_to_string+0x28e>
   15d30:	4931      	ldr	r1, [pc, #196]	; (15df8 <sys_status_to_string+0x348>)
   15d32:	4a33      	ldr	r2, [pc, #204]	; (15e00 <sys_status_to_string+0x350>)
   15d34:	1b09      	subs	r1, r1, r4
   15d36:	4620      	mov	r0, r4
   15d38:	f7fa fdb0 	bl	1089c <snprintf>
   15d3c:	4404      	add	r4, r0
    if (s & 0x00000004) bp += snprintf(bp,sizeof(b)-(bp-b), "ExtClock Reset|");
   15d3e:	0769      	lsls	r1, r5, #29
   15d40:	d506      	bpl.n	15d50 <sys_status_to_string+0x2a0>
   15d42:	492d      	ldr	r1, [pc, #180]	; (15df8 <sys_status_to_string+0x348>)
   15d44:	4a2f      	ldr	r2, [pc, #188]	; (15e04 <sys_status_to_string+0x354>)
   15d46:	1b09      	subs	r1, r1, r4
   15d48:	4620      	mov	r0, r4
   15d4a:	f7fa fda7 	bl	1089c <snprintf>
   15d4e:	4404      	add	r4, r0
    if (s & 0x00000002) bp += snprintf(bp,sizeof(b)-(bp-b), "Clock PLL Lock|");
   15d50:	07aa      	lsls	r2, r5, #30
   15d52:	d506      	bpl.n	15d62 <sys_status_to_string+0x2b2>
   15d54:	4928      	ldr	r1, [pc, #160]	; (15df8 <sys_status_to_string+0x348>)
   15d56:	4a2c      	ldr	r2, [pc, #176]	; (15e08 <sys_status_to_string+0x358>)
   15d58:	1b09      	subs	r1, r1, r4
   15d5a:	4620      	mov	r0, r4
   15d5c:	f7fa fd9e 	bl	1089c <snprintf>
   15d60:	4404      	add	r4, r0
    if (s & 0x00000001) bp += snprintf(bp,sizeof(b)-(bp-b), "IRS");
   15d62:	07eb      	lsls	r3, r5, #31
   15d64:	d505      	bpl.n	15d72 <sys_status_to_string+0x2c2>
   15d66:	4924      	ldr	r1, [pc, #144]	; (15df8 <sys_status_to_string+0x348>)
   15d68:	4a28      	ldr	r2, [pc, #160]	; (15e0c <sys_status_to_string+0x35c>)
   15d6a:	1b09      	subs	r1, r1, r4
   15d6c:	4620      	mov	r0, r4
   15d6e:	f7fa fd95 	bl	1089c <snprintf>
}
   15d72:	4802      	ldr	r0, [pc, #8]	; (15d7c <sys_status_to_string+0x2cc>)
   15d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    char *bp = b;
   15d76:	4634      	mov	r4, r6
   15d78:	e6ad      	b.n	15ad6 <sys_status_to_string+0x26>
   15d7a:	bf00      	nop
   15d7c:	20006b20 	.word	0x20006b20
   15d80:	00021761 	.word	0x00021761
   15d84:	0002176f 	.word	0x0002176f
   15d88:	0002177c 	.word	0x0002177c
   15d8c:	0002178b 	.word	0x0002178b
   15d90:	00021799 	.word	0x00021799
   15d94:	000217a9 	.word	0x000217a9
   15d98:	000217ba 	.word	0x000217ba
   15d9c:	000217cf 	.word	0x000217cf
   15da0:	000217e4 	.word	0x000217e4
   15da4:	000217f2 	.word	0x000217f2
   15da8:	00021806 	.word	0x00021806
   15dac:	00021817 	.word	0x00021817
   15db0:	00021823 	.word	0x00021823
   15db4:	0002182c 	.word	0x0002182c
   15db8:	0002183f 	.word	0x0002183f
   15dbc:	00021848 	.word	0x00021848
   15dc0:	0002185a 	.word	0x0002185a
   15dc4:	00021864 	.word	0x00021864
   15dc8:	0002186f 	.word	0x0002186f
   15dcc:	0002188b 	.word	0x0002188b
   15dd0:	00021895 	.word	0x00021895
   15dd4:	000218a0 	.word	0x000218a0
   15dd8:	000218ae 	.word	0x000218ae
   15ddc:	000218b8 	.word	0x000218b8
   15de0:	000218c2 	.word	0x000218c2
   15de4:	000218cd 	.word	0x000218cd
   15de8:	000218d6 	.word	0x000218d6
   15dec:	000218e2 	.word	0x000218e2
   15df0:	000218ef 	.word	0x000218ef
   15df4:	000218fa 	.word	0x000218fa
   15df8:	20006ba0 	.word	0x20006ba0
   15dfc:	00021907 	.word	0x00021907
   15e00:	00021910 	.word	0x00021910
   15e04:	00021919 	.word	0x00021919
   15e08:	00021929 	.word	0x00021929
   15e0c:	00021939 	.word	0x00021939

00015e10 <dw1000_cli_dump_registers>:
{
   15e10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
            streamer_printf(streamer, "{\"reg[%02X]\"=\"0x%016llX\"}\n",i,
   15e14:	4f3a      	ldr	r7, [pc, #232]	; (15f00 <dw1000_cli_dump_registers+0xf0>)
            streamer_printf(streamer, "{\"reg[%02X]\"=\"0x%010llX\"}\n",i,reg&0xffffffffffll);
   15e16:	f8df 8100 	ldr.w	r8, [pc, #256]	; 15f18 <dw1000_cli_dump_registers+0x108>
        if (i==0x05 || i==0x07 || i==0x0B ||
   15e1a:	f8df 9100 	ldr.w	r9, [pc, #256]	; 15f1c <dw1000_cli_dump_registers+0x10c>
{
   15e1e:	4606      	mov	r6, r0
   15e20:	460d      	mov	r5, r1
    for(i=0; i<0x37; i++)
   15e22:	2400      	movs	r4, #0
        if (i==0x05 || i==0x07 || i==0x0B ||
   15e24:	1f63      	subs	r3, r4, #5
   15e26:	2b1d      	cmp	r3, #29
   15e28:	d918      	bls.n	15e5c <dw1000_cli_dump_registers+0x4c>
            i==0x20 || i==0x22 || i==0x29 ||
   15e2a:	f1a4 0329 	sub.w	r3, r4, #41	; 0x29
   15e2e:	2b0c      	cmp	r3, #12
   15e30:	d918      	bls.n	15e64 <dw1000_cli_dump_registers+0x54>
        switch (i) {
   15e32:	b2a1      	uxth	r1, r4
   15e34:	2c1f      	cmp	r4, #31
   15e36:	d855      	bhi.n	15ee4 <dw1000_cli_dump_registers+0xd4>
   15e38:	e8df f004 	tbb	[pc, r4]
   15e3c:	3b54543b 	.word	0x3b54543b
   15e40:	5449543b 	.word	0x5449543b
   15e44:	54495449 	.word	0x54495449
   15e48:	49493b3b 	.word	0x49493b3b
   15e4c:	3b54543b 	.word	0x3b54543b
   15e50:	49544949 	.word	0x49544949
   15e54:	543b493b 	.word	0x543b493b
   15e58:	3b3b3b54 	.word	0x3b3b3b54
        if (i==0x05 || i==0x07 || i==0x0B ||
   15e5c:	fa29 f303 	lsr.w	r3, r9, r3
   15e60:	07db      	lsls	r3, r3, #31
   15e62:	d5e6      	bpl.n	15e32 <dw1000_cli_dump_registers+0x22>
    for(i=0; i<0x37; i++)
   15e64:	3401      	adds	r4, #1
   15e66:	2c37      	cmp	r4, #55	; 0x37
   15e68:	d1dc      	bne.n	15e24 <dw1000_cli_dump_registers+0x14>
    streamer_printf(streamer, "{\"inst->irq_sem\"=%d}\n", dpl_sem_get_count(&inst->uwb_dev.irq_sem));
   15e6a:	8f72      	ldrh	r2, [r6, #58]	; 0x3a
   15e6c:	4925      	ldr	r1, [pc, #148]	; (15f04 <dw1000_cli_dump_registers+0xf4>)
   15e6e:	4628      	mov	r0, r5
   15e70:	f7fe fb0f 	bl	14492 <streamer_printf>
    streamer_printf(streamer, "{\"inst->tx_sem\"=%d}\n", dpl_sem_get_count(&inst->tx_sem));
   15e74:	4924      	ldr	r1, [pc, #144]	; (15f08 <dw1000_cli_dump_registers+0xf8>)
   15e76:	f8b6 2566 	ldrh.w	r2, [r6, #1382]	; 0x566
   15e7a:	4628      	mov	r0, r5
   15e7c:	f7fe fb09 	bl	14492 <streamer_printf>
    struct uwb_rng_instance *rng = (struct uwb_rng_instance*)uwb_mac_find_cb_inst_ptr(&inst->uwb_dev, UWBEXT_RNG);
   15e80:	2104      	movs	r1, #4
   15e82:	4630      	mov	r0, r6
   15e84:	f7f2 fdc2 	bl	8a0c <uwb_mac_find_cb_inst_ptr>
    if (rng)
   15e88:	b128      	cbz	r0, 15e96 <dw1000_cli_dump_registers+0x86>
        streamer_printf(streamer, "{\"rng->sem\"=%d}\n", dpl_sem_get_count(&rng->sem));
   15e8a:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
   15e8e:	491f      	ldr	r1, [pc, #124]	; (15f0c <dw1000_cli_dump_registers+0xfc>)
   15e90:	4628      	mov	r0, r5
   15e92:	f7fe fafe 	bl	14492 <streamer_printf>
    struct uwb_ccp_instance *ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(&inst->uwb_dev, UWBEXT_CCP);
   15e96:	2101      	movs	r1, #1
   15e98:	4630      	mov	r0, r6
   15e9a:	f7f2 fdb7 	bl	8a0c <uwb_mac_find_cb_inst_ptr>
    if (ccp)
   15e9e:	b358      	cbz	r0, 15ef8 <dw1000_cli_dump_registers+0xe8>
        streamer_printf(streamer, "{\"ccp->sem\"=%d}\n", dpl_sem_get_count(&ccp->sem));
   15ea0:	f8b0 20b6 	ldrh.w	r2, [r0, #182]	; 0xb6
   15ea4:	491a      	ldr	r1, [pc, #104]	; (15f10 <dw1000_cli_dump_registers+0x100>)
   15ea6:	4628      	mov	r0, r5
}
   15ea8:	b003      	add	sp, #12
   15eaa:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        streamer_printf(streamer, "{\"ccp->sem\"=%d}\n", dpl_sem_get_count(&ccp->sem));
   15eae:	f7fe baf0 	b.w	14492 <streamer_printf>
            reg = dw1000_read_reg(inst, i, 0, 4);
   15eb2:	2304      	movs	r3, #4
   15eb4:	2200      	movs	r2, #0
   15eb6:	4630      	mov	r0, r6
   15eb8:	f7f3 fb34 	bl	9524 <dw1000_read_reg>
            streamer_printf(streamer, "{\"reg[%02X]\"=\"0x%08llX\"}\n",i,reg&0xffffffff);
   15ebc:	2300      	movs	r3, #0
   15ebe:	4915      	ldr	r1, [pc, #84]	; (15f14 <dw1000_cli_dump_registers+0x104>)
   15ec0:	9000      	str	r0, [sp, #0]
   15ec2:	9301      	str	r3, [sp, #4]
   15ec4:	4622      	mov	r2, r4
            streamer_printf(streamer, "{\"reg[%02X]\"=\"0x%016llX\"}\n",i,
   15ec6:	4628      	mov	r0, r5
   15ec8:	f7fe fae3 	bl	14492 <streamer_printf>
   15ecc:	e7ca      	b.n	15e64 <dw1000_cli_dump_registers+0x54>
            reg = dw1000_read_reg(inst, i, 0, 5);
   15ece:	2200      	movs	r2, #0
   15ed0:	2305      	movs	r3, #5
   15ed2:	4630      	mov	r0, r6
   15ed4:	f7f3 fb26 	bl	9524 <dw1000_read_reg>
            streamer_printf(streamer, "{\"reg[%02X]\"=\"0x%010llX\"}\n",i,reg&0xffffffffffll);
   15ed8:	b2c9      	uxtb	r1, r1
   15eda:	e9cd 0100 	strd	r0, r1, [sp]
   15ede:	4622      	mov	r2, r4
   15ee0:	4641      	mov	r1, r8
   15ee2:	e7f0      	b.n	15ec6 <dw1000_cli_dump_registers+0xb6>
            reg = dw1000_read_reg(inst, i, 0, l);
   15ee4:	2200      	movs	r2, #0
   15ee6:	2308      	movs	r3, #8
   15ee8:	4630      	mov	r0, r6
   15eea:	f7f3 fb1b 	bl	9524 <dw1000_read_reg>
            streamer_printf(streamer, "{\"reg[%02X]\"=\"0x%016llX\"}\n",i,
   15eee:	4622      	mov	r2, r4
   15ef0:	e9cd 0100 	strd	r0, r1, [sp]
   15ef4:	4639      	mov	r1, r7
   15ef6:	e7e6      	b.n	15ec6 <dw1000_cli_dump_registers+0xb6>
}
   15ef8:	b003      	add	sp, #12
   15efa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15efe:	bf00      	nop
   15f00:	00021972 	.word	0x00021972
   15f04:	0002198d 	.word	0x0002198d
   15f08:	000219a3 	.word	0x000219a3
   15f0c:	000219b8 	.word	0x000219b8
   15f10:	000219c9 	.word	0x000219c9
   15f14:	0002193d 	.word	0x0002193d
   15f18:	00021957 	.word	0x00021957
   15f1c:	28c20045 	.word	0x28c20045

00015f20 <dw1000_cli_dump_address>:
{
   15f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15f24:	4680      	mov	r8, r0
   15f26:	b094      	sub	sp, #80	; 0x50
   15f28:	460d      	mov	r5, r1
   15f2a:	4617      	mov	r7, r2
    streamer_printf(streamer, "Dump starting at %06"PRIX32":\n", addr);
   15f2c:	4618      	mov	r0, r3
   15f2e:	460a      	mov	r2, r1
   15f30:	4928      	ldr	r1, [pc, #160]	; (15fd4 <dw1000_cli_dump_address+0xb4>)
        streamer_printf(streamer, "%04X: %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n",
   15f32:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 15fd8 <dw1000_cli_dump_address+0xb8>
{
   15f36:	461e      	mov	r6, r3
    streamer_printf(streamer, "Dump starting at %06"PRIX32":\n", addr);
   15f38:	f7fe faab 	bl	14492 <streamer_printf>
    for (i=0;i<length;i+=step) {
   15f3c:	2400      	movs	r4, #0
        memset(b,0,sizeof(b));
   15f3e:	f04f 0910 	mov.w	r9, #16
    for (i=0;i<length;i+=step) {
   15f42:	42a7      	cmp	r7, r4
   15f44:	dc02      	bgt.n	15f4c <dw1000_cli_dump_address+0x2c>
}
   15f46:	b014      	add	sp, #80	; 0x50
   15f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        memset(b,0,sizeof(b));
   15f4c:	2210      	movs	r2, #16
   15f4e:	2100      	movs	r1, #0
   15f50:	a810      	add	r0, sp, #64	; 0x40
   15f52:	f7fa f99a 	bl	1028a <memset>
        dw1000_read(inst, addr, i, b, step);
   15f56:	b2a2      	uxth	r2, r4
   15f58:	ab10      	add	r3, sp, #64	; 0x40
   15f5a:	b2a9      	uxth	r1, r5
   15f5c:	f8cd 9000 	str.w	r9, [sp]
   15f60:	4640      	mov	r0, r8
   15f62:	f7f3 fa41 	bl	93e8 <dw1000_read>
        streamer_printf(streamer, "%04X: %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n",
   15f66:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
   15f6a:	930e      	str	r3, [sp, #56]	; 0x38
   15f6c:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
   15f70:	930d      	str	r3, [sp, #52]	; 0x34
   15f72:	f89d 304d 	ldrb.w	r3, [sp, #77]	; 0x4d
   15f76:	930c      	str	r3, [sp, #48]	; 0x30
   15f78:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
   15f7c:	930b      	str	r3, [sp, #44]	; 0x2c
   15f7e:	f89d 304b 	ldrb.w	r3, [sp, #75]	; 0x4b
   15f82:	930a      	str	r3, [sp, #40]	; 0x28
   15f84:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   15f88:	9309      	str	r3, [sp, #36]	; 0x24
   15f8a:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   15f8e:	9308      	str	r3, [sp, #32]
   15f90:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   15f94:	9307      	str	r3, [sp, #28]
   15f96:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
   15f9a:	9306      	str	r3, [sp, #24]
   15f9c:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
   15fa0:	9305      	str	r3, [sp, #20]
   15fa2:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
   15fa6:	9304      	str	r3, [sp, #16]
   15fa8:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
   15fac:	9303      	str	r3, [sp, #12]
   15fae:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   15fb2:	9302      	str	r3, [sp, #8]
   15fb4:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   15fb8:	9301      	str	r3, [sp, #4]
   15fba:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   15fbe:	9300      	str	r3, [sp, #0]
   15fc0:	4622      	mov	r2, r4
   15fc2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   15fc6:	4651      	mov	r1, sl
   15fc8:	4630      	mov	r0, r6
   15fca:	f7fe fa62 	bl	14492 <streamer_printf>
    for (i=0;i<length;i+=step) {
   15fce:	3410      	adds	r4, #16
   15fd0:	e7b7      	b.n	15f42 <dw1000_cli_dump_address+0x22>
   15fd2:	bf00      	nop
   15fd4:	000219da 	.word	0x000219da
   15fd8:	000219f3 	.word	0x000219f3

00015fdc <dw1000_cli_interrupt_backtrace>:
    return 1;
}

void
dw1000_cli_interrupt_backtrace(struct _dw1000_dev_instance_t * inst, uint16_t verbose, struct streamer *streamer)
{
   15fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15fe0:	4614      	mov	r4, r2
   15fe2:	b089      	sub	sp, #36	; 0x24
    int i;
    uint32_t start_t = 0;
    struct dw1000_sys_status_backtrace *p, *p_last=0;

    streamer_printf(streamer, " %10s ", "abs");
   15fe4:	4a7e      	ldr	r2, [pc, #504]	; (161e0 <dw1000_cli_interrupt_backtrace+0x204>)
{
   15fe6:	460e      	mov	r6, r1
   15fe8:	4607      	mov	r7, r0
    streamer_printf(streamer, " %10s ", "abs");
   15fea:	497e      	ldr	r1, [pc, #504]	; (161e4 <dw1000_cli_interrupt_backtrace+0x208>)
   15fec:	4620      	mov	r0, r4
   15fee:	f7fe fa50 	bl	14492 <streamer_printf>
    streamer_printf(streamer, " %10s ", "usec");
   15ff2:	4a7d      	ldr	r2, [pc, #500]	; (161e8 <dw1000_cli_interrupt_backtrace+0x20c>)
   15ff4:	497b      	ldr	r1, [pc, #492]	; (161e4 <dw1000_cli_interrupt_backtrace+0x208>)
   15ff6:	4620      	mov	r0, r4
   15ff8:	f7fe fa4b 	bl	14492 <streamer_printf>
    streamer_printf(streamer, " %8s ", "diff");
   15ffc:	4a7b      	ldr	r2, [pc, #492]	; (161ec <dw1000_cli_interrupt_backtrace+0x210>)
   15ffe:	497c      	ldr	r1, [pc, #496]	; (161f0 <dw1000_cli_interrupt_backtrace+0x214>)
   16000:	4620      	mov	r0, r4
   16002:	f7fe fa46 	bl	14492 <streamer_printf>
    streamer_printf(streamer, " %6s ", "dur");
   16006:	4a7b      	ldr	r2, [pc, #492]	; (161f4 <dw1000_cli_interrupt_backtrace+0x218>)
   16008:	497b      	ldr	r1, [pc, #492]	; (161f8 <dw1000_cli_interrupt_backtrace+0x21c>)
   1600a:	4620      	mov	r0, r4
   1600c:	f7fe fa41 	bl	14492 <streamer_printf>
    streamer_printf(streamer, " %2s", "ir");
   16010:	4a7a      	ldr	r2, [pc, #488]	; (161fc <dw1000_cli_interrupt_backtrace+0x220>)
   16012:	497b      	ldr	r1, [pc, #492]	; (16200 <dw1000_cli_interrupt_backtrace+0x224>)
   16014:	4620      	mov	r0, r4
   16016:	f7fe fa3c 	bl	14492 <streamer_printf>
    streamer_printf(streamer, " %5s", "fctrl");
   1601a:	4a7a      	ldr	r2, [pc, #488]	; (16204 <dw1000_cli_interrupt_backtrace+0x228>)
   1601c:	497a      	ldr	r1, [pc, #488]	; (16208 <dw1000_cli_interrupt_backtrace+0x22c>)
   1601e:	4620      	mov	r0, r4
   16020:	f7fe fa37 	bl	14492 <streamer_printf>
    if (verbose&0x1) {
   16024:	f016 0601 	ands.w	r6, r6, #1
   16028:	d004      	beq.n	16034 <dw1000_cli_interrupt_backtrace+0x58>
        streamer_printf(streamer, "(fctrl2txt)%21s ", "");
   1602a:	4a78      	ldr	r2, [pc, #480]	; (1620c <dw1000_cli_interrupt_backtrace+0x230>)
   1602c:	4978      	ldr	r1, [pc, #480]	; (16210 <dw1000_cli_interrupt_backtrace+0x234>)
   1602e:	4620      	mov	r0, r4
   16030:	f7fe fa2f 	bl	14492 <streamer_printf>
    }
    streamer_printf(streamer, " %*s ", 2*DW1000_SYS_STATUS_ASSEMBLE_LEN, "status");
   16034:	4b77      	ldr	r3, [pc, #476]	; (16214 <dw1000_cli_interrupt_backtrace+0x238>)
   16036:	4978      	ldr	r1, [pc, #480]	; (16218 <dw1000_cli_interrupt_backtrace+0x23c>)
    streamer_printf(streamer, "   status2txt\n");
    for (i=0;i<80;i++) streamer_printf(streamer, "-");
   16038:	4d78      	ldr	r5, [pc, #480]	; (1621c <dw1000_cli_interrupt_backtrace+0x240>)
    streamer_printf(streamer, " %*s ", 2*DW1000_SYS_STATUS_ASSEMBLE_LEN, "status");
   1603a:	2208      	movs	r2, #8
   1603c:	4620      	mov	r0, r4
   1603e:	f7fe fa28 	bl	14492 <streamer_printf>
    streamer_printf(streamer, "   status2txt\n");
   16042:	4977      	ldr	r1, [pc, #476]	; (16220 <dw1000_cli_interrupt_backtrace+0x244>)
   16044:	4620      	mov	r0, r4
   16046:	f7fe fa24 	bl	14492 <streamer_printf>
   1604a:	f04f 0850 	mov.w	r8, #80	; 0x50
    for (i=0;i<80;i++) streamer_printf(streamer, "-");
   1604e:	4629      	mov	r1, r5
   16050:	4620      	mov	r0, r4
   16052:	f7fe fa1e 	bl	14492 <streamer_printf>
   16056:	f1b8 0801 	subs.w	r8, r8, #1
   1605a:	d1f8      	bne.n	1604e <dw1000_cli_interrupt_backtrace+0x72>
    if (verbose&0x1) {
   1605c:	b146      	cbz	r6, 16070 <dw1000_cli_interrupt_backtrace+0x94>
        for (i=0;i<34;i++) streamer_printf(streamer, "-");
   1605e:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 1621c <dw1000_cli_interrupt_backtrace+0x240>
   16062:	2522      	movs	r5, #34	; 0x22
   16064:	4649      	mov	r1, r9
   16066:	4620      	mov	r0, r4
   16068:	f7fe fa13 	bl	14492 <streamer_printf>
   1606c:	3d01      	subs	r5, #1
   1606e:	d1f9      	bne.n	16064 <dw1000_cli_interrupt_backtrace+0x88>
    }
    streamer_printf(streamer, "\n");
   16070:	496c      	ldr	r1, [pc, #432]	; (16224 <dw1000_cli_interrupt_backtrace+0x248>)
    streamer_printf(streamer, " %10lu ", dpl_cputime_ticks_to_usecs(p->utime));
   16072:	f8df a1e0 	ldr.w	sl, [pc, #480]	; 16254 <dw1000_cli_interrupt_backtrace+0x278>
    streamer_printf(streamer, "\n");
   16076:	4620      	mov	r0, r4
   16078:	f7fe fa0b 	bl	14492 <streamer_printf>


    inst->sys_status_bt_lock = 1;
   1607c:	2301      	movs	r3, #1
   1607e:	f887 3df2 	strb.w	r3, [r7, #3570]	; 0xdf2
    struct dw1000_sys_status_backtrace *p, *p_last=0;
   16082:	2300      	movs	r3, #0
   16084:	9305      	str	r3, [sp, #20]
    for (i=0;i<MYNEWT_VAL(DW1000_SYS_STATUS_BACKTRACE_LEN);i++) {
   16086:	4699      	mov	r9, r3
        uint16_t i_mod = (inst->sys_status_bt_idx + i + 1) % MYNEWT_VAL(DW1000_SYS_STATUS_BACKTRACE_LEN);
   16088:	f8b7 5df0 	ldrh.w	r5, [r7, #3568]	; 0xdf0
   1608c:	9b05      	ldr	r3, [sp, #20]
   1608e:	444d      	add	r5, r9
   16090:	3501      	adds	r5, #1
   16092:	f005 057f 	and.w	r5, r5, #127	; 0x7f
        p = &inst->sys_status_bt[i_mod];
   16096:	f105 0b5f 	add.w	fp, r5, #95	; 0x5f
   1609a:	eb07 120b 	add.w	r2, r7, fp, lsl #4
   1609e:	9205      	str	r2, [sp, #20]
    if (!p->utime) return 0;
   160a0:	012a      	lsls	r2, r5, #4
   160a2:	eb07 1505 	add.w	r5, r7, r5, lsl #4
   160a6:	9206      	str	r2, [sp, #24]
   160a8:	f8d5 25f0 	ldr.w	r2, [r5, #1520]	; 0x5f0
   160ac:	2a00      	cmp	r2, #0
   160ae:	d06d      	beq.n	1618c <dw1000_cli_interrupt_backtrace+0x1b0>
    if (!*start_t) *start_t = p->utime;
   160b0:	f1b8 0f00 	cmp.w	r8, #0
   160b4:	bf08      	it	eq
   160b6:	4690      	moveq	r8, r2
    int32_t diff = (p_last)? p->utime-p_last->utime : 0;
   160b8:	b11b      	cbz	r3, 160c2 <dw1000_cli_interrupt_backtrace+0xe6>
   160ba:	681b      	ldr	r3, [r3, #0]
   160bc:	1ad3      	subs	r3, r2, r3
   160be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    streamer_printf(streamer, " %10lu ", dpl_cputime_ticks_to_usecs(p->utime));
   160c2:	4651      	mov	r1, sl
   160c4:	4620      	mov	r0, r4
   160c6:	9307      	str	r3, [sp, #28]
   160c8:	f7fe f9e3 	bl	14492 <streamer_printf>
    streamer_printf(streamer, " %10lu ", dpl_cputime_ticks_to_usecs(p->utime-*start_t));
   160cc:	f8d5 25f0 	ldr.w	r2, [r5, #1520]	; 0x5f0
   160d0:	4651      	mov	r1, sl
   160d2:	eba2 0208 	sub.w	r2, r2, r8
   160d6:	4620      	mov	r0, r4
   160d8:	f7fe f9db 	bl	14492 <streamer_printf>
    streamer_printf(streamer, " %8lu ", dpl_cputime_ticks_to_usecs(diff));
   160dc:	9b07      	ldr	r3, [sp, #28]
   160de:	4952      	ldr	r1, [pc, #328]	; (16228 <dw1000_cli_interrupt_backtrace+0x24c>)
   160e0:	461a      	mov	r2, r3
   160e2:	4620      	mov	r0, r4
   160e4:	f7fe f9d5 	bl	14492 <streamer_printf>
    streamer_printf(streamer, " %6lu ", dpl_cputime_ticks_to_usecs(p->utime_end-p->utime));
   160e8:	9b06      	ldr	r3, [sp, #24]
   160ea:	f8d5 25f0 	ldr.w	r2, [r5, #1520]	; 0x5f0
   160ee:	443b      	add	r3, r7
    streamer_printf(streamer, " %2s ", p->interrupt_reentry ? "r":" ");
   160f0:	eb07 1b0b 	add.w	fp, r7, fp, lsl #4
    streamer_printf(streamer, " %6lu ", dpl_cputime_ticks_to_usecs(p->utime_end-p->utime));
   160f4:	f8d3 15fc 	ldr.w	r1, [r3, #1532]	; 0x5fc
   160f8:	9306      	str	r3, [sp, #24]
   160fa:	1a8a      	subs	r2, r1, r2
   160fc:	4620      	mov	r0, r4
   160fe:	494b      	ldr	r1, [pc, #300]	; (1622c <dw1000_cli_interrupt_backtrace+0x250>)
   16100:	f7fe f9c7 	bl	14492 <streamer_printf>
    streamer_printf(streamer, " %2s ", p->interrupt_reentry ? "r":" ");
   16104:	f89b 2009 	ldrb.w	r2, [fp, #9]
   16108:	f8df b14c 	ldr.w	fp, [pc, #332]	; 16258 <dw1000_cli_interrupt_backtrace+0x27c>
   1610c:	4948      	ldr	r1, [pc, #288]	; (16230 <dw1000_cli_interrupt_backtrace+0x254>)
   1610e:	f012 0f01 	tst.w	r2, #1
   16112:	4620      	mov	r0, r4
   16114:	4a47      	ldr	r2, [pc, #284]	; (16234 <dw1000_cli_interrupt_backtrace+0x258>)
   16116:	bf08      	it	eq
   16118:	465a      	moveq	r2, fp
   1611a:	f7fe f9ba 	bl	14492 <streamer_printf>
    if (p->fctrl) {
   1611e:	9b06      	ldr	r3, [sp, #24]
   16120:	f8b3 05fa 	ldrh.w	r0, [r3, #1530]	; 0x5fa
   16124:	2800      	cmp	r0, #0
   16126:	d04c      	beq.n	161c2 <dw1000_cli_interrupt_backtrace+0x1e6>
        if (verbose&0x1) {
   16128:	2e00      	cmp	r6, #0
   1612a:	d043      	beq.n	161b4 <dw1000_cli_interrupt_backtrace+0x1d8>
            char *s = fctrl_to_string(p->fctrl);
   1612c:	f7ff fbe8 	bl	15900 <fctrl_to_string>
            streamer_printf(streamer, " %02X %02X (%s)%*s", p->fctrl&0xff, p->fctrl>>8, s, 32-strlen(s), " ");
   16130:	9b06      	ldr	r3, [sp, #24]
            char *s = fctrl_to_string(p->fctrl);
   16132:	9007      	str	r0, [sp, #28]
            streamer_printf(streamer, " %02X %02X (%s)%*s", p->fctrl&0xff, p->fctrl>>8, s, 32-strlen(s), " ");
   16134:	f8b3 25fa 	ldrh.w	r2, [r3, #1530]	; 0x5fa
   16138:	9206      	str	r2, [sp, #24]
   1613a:	f003 fe99 	bl	19e70 <strlen>
   1613e:	9a06      	ldr	r2, [sp, #24]
   16140:	9907      	ldr	r1, [sp, #28]
   16142:	9100      	str	r1, [sp, #0]
   16144:	f1c0 0020 	rsb	r0, r0, #32
   16148:	9001      	str	r0, [sp, #4]
   1614a:	0a13      	lsrs	r3, r2, #8
   1614c:	493a      	ldr	r1, [pc, #232]	; (16238 <dw1000_cli_interrupt_backtrace+0x25c>)
   1614e:	f8cd b008 	str.w	fp, [sp, #8]
   16152:	b2d2      	uxtb	r2, r2
   16154:	4620      	mov	r0, r4
   16156:	f7fe f99c 	bl	14492 <streamer_printf>
    streamer_printf(streamer, " %0*llX ", 2*DW1000_SYS_STATUS_ASSEMBLE_LEN, DW1000_SYS_STATUS_ASSEMBLE(p));
   1615a:	f8d5 35f4 	ldr.w	r3, [r5, #1524]	; 0x5f4
   1615e:	4937      	ldr	r1, [pc, #220]	; (1623c <dw1000_cli_interrupt_backtrace+0x260>)
   16160:	f04f 0b00 	mov.w	fp, #0
   16164:	e9cd 3b00 	strd	r3, fp, [sp]
   16168:	2208      	movs	r2, #8
   1616a:	4620      	mov	r0, r4
   1616c:	f7fe f991 	bl	14492 <streamer_printf>
    streamer_printf(streamer, " %s", sys_status_to_string(DW1000_SYS_STATUS_ASSEMBLE(p)));
   16170:	4659      	mov	r1, fp
   16172:	f8d5 05f4 	ldr.w	r0, [r5, #1524]	; 0x5f4
   16176:	f7ff fc9b 	bl	15ab0 <sys_status_to_string>
   1617a:	4931      	ldr	r1, [pc, #196]	; (16240 <dw1000_cli_interrupt_backtrace+0x264>)
   1617c:	4602      	mov	r2, r0
   1617e:	4620      	mov	r0, r4
   16180:	f7fe f987 	bl	14492 <streamer_printf>
        if (print_interrupt_bt_line(&start_t, verbose, p, p_last, streamer)) {
            streamer_printf(streamer, "\n");
   16184:	4927      	ldr	r1, [pc, #156]	; (16224 <dw1000_cli_interrupt_backtrace+0x248>)
   16186:	4620      	mov	r0, r4
   16188:	f7fe f983 	bl	14492 <streamer_printf>
    for (i=0;i<MYNEWT_VAL(DW1000_SYS_STATUS_BACKTRACE_LEN);i++) {
   1618c:	f109 0901 	add.w	r9, r9, #1
   16190:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
   16194:	f47f af78 	bne.w	16088 <dw1000_cli_interrupt_backtrace+0xac>
        }
        p_last = p;
    }
    inst->sys_status_bt_lock = 0;
   16198:	2300      	movs	r3, #0
   1619a:	f887 3df2 	strb.w	r3, [r7, #3570]	; 0xdf2

    if (verbose&0x1) {
   1619e:	b1e6      	cbz	r6, 161da <dw1000_cli_interrupt_backtrace+0x1fe>
        streamer_printf(streamer, "----\n fctrl2txt: \n");
   161a0:	4928      	ldr	r1, [pc, #160]	; (16244 <dw1000_cli_interrupt_backtrace+0x268>)
   161a2:	4620      	mov	r0, r4
   161a4:	f7fe f975 	bl	14492 <streamer_printf>
        fctrl_ledgend(streamer);
   161a8:	4620      	mov	r0, r4
    }
}
   161aa:	b009      	add	sp, #36	; 0x24
   161ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        fctrl_ledgend(streamer);
   161b0:	f7ff bb84 	b.w	158bc <fctrl_ledgend>
            streamer_printf(streamer, " %02X %02X ", p->fctrl&0xff, p->fctrl>>8);
   161b4:	0a03      	lsrs	r3, r0, #8
   161b6:	b2c2      	uxtb	r2, r0
   161b8:	4923      	ldr	r1, [pc, #140]	; (16248 <dw1000_cli_interrupt_backtrace+0x26c>)
   161ba:	4620      	mov	r0, r4
   161bc:	f7fe f969 	bl	14492 <streamer_printf>
   161c0:	e7cb      	b.n	1615a <dw1000_cli_interrupt_backtrace+0x17e>
        streamer_printf(streamer, "       ");
   161c2:	4922      	ldr	r1, [pc, #136]	; (1624c <dw1000_cli_interrupt_backtrace+0x270>)
   161c4:	4620      	mov	r0, r4
   161c6:	f7fe f964 	bl	14492 <streamer_printf>
        if (verbose&0x1) {
   161ca:	2e00      	cmp	r6, #0
   161cc:	d0c5      	beq.n	1615a <dw1000_cli_interrupt_backtrace+0x17e>
            streamer_printf(streamer, " %32s ", "");
   161ce:	4a0f      	ldr	r2, [pc, #60]	; (1620c <dw1000_cli_interrupt_backtrace+0x230>)
   161d0:	491f      	ldr	r1, [pc, #124]	; (16250 <dw1000_cli_interrupt_backtrace+0x274>)
   161d2:	4620      	mov	r0, r4
   161d4:	f7fe f95d 	bl	14492 <streamer_printf>
   161d8:	e7bf      	b.n	1615a <dw1000_cli_interrupt_backtrace+0x17e>
}
   161da:	b009      	add	sp, #36	; 0x24
   161dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   161e0:	00021a4a 	.word	0x00021a4a
   161e4:	00021a4e 	.word	0x00021a4e
   161e8:	00021a55 	.word	0x00021a55
   161ec:	00021a5a 	.word	0x00021a5a
   161f0:	00021a5f 	.word	0x00021a5f
   161f4:	00021a65 	.word	0x00021a65
   161f8:	00021a69 	.word	0x00021a69
   161fc:	00021a6f 	.word	0x00021a6f
   16200:	00021a72 	.word	0x00021a72
   16204:	00021a77 	.word	0x00021a77
   16208:	00021a7d 	.word	0x00021a7d
   1620c:	00020c67 	.word	0x00020c67
   16210:	00021a82 	.word	0x00021a82
   16214:	000214b2 	.word	0x000214b2
   16218:	00021a93 	.word	0x00021a93
   1621c:	00021aa8 	.word	0x00021aa8
   16220:	00021a99 	.word	0x00021a99
   16224:	00021bd1 	.word	0x00021bd1
   16228:	00021ab2 	.word	0x00021ab2
   1622c:	00021ab9 	.word	0x00021ab9
   16230:	00021ac0 	.word	0x00021ac0
   16234:	000226b7 	.word	0x000226b7
   16238:	00021ac6 	.word	0x00021ac6
   1623c:	00021af4 	.word	0x00021af4
   16240:	00021afd 	.word	0x00021afd
   16244:	00021b01 	.word	0x00021b01
   16248:	00021ad9 	.word	0x00021ad9
   1624c:	00021ae5 	.word	0x00021ae5
   16250:	00021aed 	.word	0x00021aed
   16254:	00021aaa 	.word	0x00021aaa
   16258:	00021aeb 	.word	0x00021aeb

0001625c <dw1000_cli_cmd>:
}
#endif

static int
dw1000_cli_cmd(const struct shell_cmd *cmd, int argc, char **argv, struct streamer *streamer)
{
   1625c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#ifndef __KERNEL__
    struct _dw1000_dev_instance_t * inst = 0;
    uint16_t inst_n;

    if (argc < 2) {
   16260:	2901      	cmp	r1, #1
{
   16262:	b086      	sub	sp, #24
   16264:	460f      	mov	r7, r1
   16266:	4614      	mov	r4, r2
   16268:	461e      	mov	r6, r3
    if (argc < 2) {
   1626a:	dc04      	bgt.n	16276 <dw1000_cli_cmd+0x1a>
    streamer_printf(streamer, "Too few args\n");
   1626c:	49a8      	ldr	r1, [pc, #672]	; (16510 <dw1000_cli_cmd+0x2b4>)
        console_no_ticks();
        dw1000_cli_backtrace(inst, d, streamer);
        console_yes_ticks();
#endif
    } else {
        streamer_printf(streamer, "Unknown cmd\n");
   1626e:	4630      	mov	r0, r6
   16270:	f7fe f90f 	bl	14492 <streamer_printf>
   16274:	e040      	b.n	162f8 <dw1000_cli_cmd+0x9c>
    if (!strcmp(argv[1], "dump")) {
   16276:	f8d2 8004 	ldr.w	r8, [r2, #4]
   1627a:	49a6      	ldr	r1, [pc, #664]	; (16514 <dw1000_cli_cmd+0x2b8>)
   1627c:	4640      	mov	r0, r8
   1627e:	f7fa f81f 	bl	102c0 <strcmp>
   16282:	b9a0      	cbnz	r0, 162ae <dw1000_cli_cmd+0x52>
        if (argc < 3) {
   16284:	2f02      	cmp	r7, #2
   16286:	d005      	beq.n	16294 <dw1000_cli_cmd+0x38>
            inst_n = strtol(argv[2], NULL, 0);
   16288:	4602      	mov	r2, r0
   1628a:	4601      	mov	r1, r0
   1628c:	68a0      	ldr	r0, [r4, #8]
   1628e:	f003 fe22 	bl	19ed6 <strtol>
   16292:	b280      	uxth	r0, r0
        inst = hal_dw1000_inst(inst_n);
   16294:	b2c0      	uxtb	r0, r0
   16296:	f7f2 fd2f 	bl	8cf8 <hal_dw1000_inst>
   1629a:	9004      	str	r0, [sp, #16]
        console_no_ticks();
   1629c:	f7fb ff4c 	bl	12138 <console_no_ticks>
        dw1000_cli_dump_registers(inst, streamer);
   162a0:	9804      	ldr	r0, [sp, #16]
   162a2:	4631      	mov	r1, r6
   162a4:	f7ff fdb4 	bl	15e10 <dw1000_cli_dump_registers>
        console_yes_ticks();
   162a8:	f7fb ff4c 	bl	12144 <console_yes_ticks>
   162ac:	e024      	b.n	162f8 <dw1000_cli_cmd+0x9c>
    } else if (!strcmp(argv[1], "da")) {
   162ae:	499a      	ldr	r1, [pc, #616]	; (16518 <dw1000_cli_cmd+0x2bc>)
   162b0:	4640      	mov	r0, r8
   162b2:	f7fa f805 	bl	102c0 <strcmp>
   162b6:	4602      	mov	r2, r0
   162b8:	bb20      	cbnz	r0, 16304 <dw1000_cli_cmd+0xa8>
        if (argc<3) {
   162ba:	2f02      	cmp	r7, #2
   162bc:	d01c      	beq.n	162f8 <dw1000_cli_cmd+0x9c>
        inst_n = strtol(argv[2], NULL, 0);
   162be:	4601      	mov	r1, r0
   162c0:	9004      	str	r0, [sp, #16]
   162c2:	68a0      	ldr	r0, [r4, #8]
   162c4:	f003 fe07 	bl	19ed6 <strtol>
        uint32_t addr = strtol(argv[3], NULL, 0);
   162c8:	9a04      	ldr	r2, [sp, #16]
        inst_n = strtol(argv[2], NULL, 0);
   162ca:	4680      	mov	r8, r0
        uint32_t addr = strtol(argv[3], NULL, 0);
   162cc:	4611      	mov	r1, r2
   162ce:	68e0      	ldr	r0, [r4, #12]
   162d0:	f003 fe01 	bl	19ed6 <strtol>
        if (argc>4) {
   162d4:	2f04      	cmp	r7, #4
   162d6:	9a04      	ldr	r2, [sp, #16]
        uint32_t addr = strtol(argv[3], NULL, 0);
   162d8:	4605      	mov	r5, r0
        if (argc>4) {
   162da:	dd11      	ble.n	16300 <dw1000_cli_cmd+0xa4>
            length = strtol(argv[4], NULL, 0);
   162dc:	6920      	ldr	r0, [r4, #16]
   162de:	4611      	mov	r1, r2
   162e0:	f003 fdf9 	bl	19ed6 <strtol>
   162e4:	4604      	mov	r4, r0
        inst = hal_dw1000_inst(inst_n);
   162e6:	fa5f f088 	uxtb.w	r0, r8
   162ea:	f7f2 fd05 	bl	8cf8 <hal_dw1000_inst>
        dw1000_cli_dump_address(inst, addr, length, streamer);
   162ee:	4633      	mov	r3, r6
   162f0:	b2a2      	uxth	r2, r4
   162f2:	4629      	mov	r1, r5
   162f4:	f7ff fe14 	bl	15f20 <dw1000_cli_dump_address>
    }
#endif  /* ifndef __KERNEL__ */

    return 0;
}
   162f8:	2000      	movs	r0, #0
   162fa:	b006      	add	sp, #24
   162fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        int length = 128;
   16300:	2480      	movs	r4, #128	; 0x80
   16302:	e7f0      	b.n	162e6 <dw1000_cli_cmd+0x8a>
    } else if (!strcmp(argv[1], "cw")) {
   16304:	4985      	ldr	r1, [pc, #532]	; (1651c <dw1000_cli_cmd+0x2c0>)
   16306:	4640      	mov	r0, r8
   16308:	f7f9 ffda 	bl	102c0 <strcmp>
   1630c:	4602      	mov	r2, r0
   1630e:	bb80      	cbnz	r0, 16372 <dw1000_cli_cmd+0x116>
        inst_n = strtol(argv[2], NULL, 0);
   16310:	4601      	mov	r1, r0
   16312:	9004      	str	r0, [sp, #16]
   16314:	68a0      	ldr	r0, [r4, #8]
   16316:	f003 fdde 	bl	19ed6 <strtol>
   1631a:	4605      	mov	r5, r0
        inst = hal_dw1000_inst(inst_n);
   1631c:	b2c0      	uxtb	r0, r0
   1631e:	f7f2 fceb 	bl	8cf8 <hal_dw1000_inst>
   16322:	4604      	mov	r4, r0
        hal_gpio_irq_disable(inst->irq_pin);
   16324:	f890 055d 	ldrb.w	r0, [r0, #1373]	; 0x55d
   16328:	f7f5 ff24 	bl	c174 <hal_gpio_irq_disable>
        dw1000_write_reg(inst, SYS_MASK_ID, 0, 0, sizeof(uint32_t));
   1632c:	2304      	movs	r3, #4
   1632e:	2000      	movs	r0, #0
   16330:	2100      	movs	r1, #0
   16332:	e9cd 0100 	strd	r0, r1, [sp]
   16336:	9a04      	ldr	r2, [sp, #16]
   16338:	9302      	str	r3, [sp, #8]
   1633a:	4620      	mov	r0, r4
   1633c:	210e      	movs	r1, #14
   1633e:	f7f3 f943 	bl	95c8 <dw1000_write_reg>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TRXOFF, sizeof(uint8_t));
   16342:	2301      	movs	r3, #1
   16344:	2040      	movs	r0, #64	; 0x40
   16346:	2100      	movs	r1, #0
   16348:	e9cd 0100 	strd	r0, r1, [sp]
   1634c:	9a04      	ldr	r2, [sp, #16]
   1634e:	9302      	str	r3, [sp, #8]
   16350:	4620      	mov	r0, r4
   16352:	210d      	movs	r1, #13
   16354:	f7f3 f938 	bl	95c8 <dw1000_write_reg>
        dw1000_configcwmode(inst, inst->uwb_dev.config.channel);
   16358:	f894 150c 	ldrb.w	r1, [r4, #1292]	; 0x50c
   1635c:	4620      	mov	r0, r4
   1635e:	f7f5 f963 	bl	b628 <dw1000_configcwmode>
        streamer_printf(streamer, "Device[%d] now in CW mode on ch %d. Reset to continue\n",
   16362:	f894 350c 	ldrb.w	r3, [r4, #1292]	; 0x50c
   16366:	496e      	ldr	r1, [pc, #440]	; (16520 <dw1000_cli_cmd+0x2c4>)
   16368:	b2aa      	uxth	r2, r5
   1636a:	4630      	mov	r0, r6
   1636c:	f7fe f891 	bl	14492 <streamer_printf>
   16370:	e7c2      	b.n	162f8 <dw1000_cli_cmd+0x9c>
    } else if (!strcmp(argv[1], "wr")) {
   16372:	496c      	ldr	r1, [pc, #432]	; (16524 <dw1000_cli_cmd+0x2c8>)
   16374:	4640      	mov	r0, r8
   16376:	f7f9 ffa3 	bl	102c0 <strcmp>
   1637a:	4602      	mov	r2, r0
   1637c:	bb60      	cbnz	r0, 163d8 <dw1000_cli_cmd+0x17c>
        if (argc < 7) {
   1637e:	2f06      	cmp	r7, #6
   16380:	ddba      	ble.n	162f8 <dw1000_cli_cmd+0x9c>
        inst_n = strtol(argv[2], NULL, 0);
   16382:	4601      	mov	r1, r0
   16384:	9004      	str	r0, [sp, #16]
   16386:	68a0      	ldr	r0, [r4, #8]
   16388:	f003 fda5 	bl	19ed6 <strtol>
        uint32_t addr = strtol(argv[3], NULL, 0);
   1638c:	9a04      	ldr	r2, [sp, #16]
        inst_n = strtol(argv[2], NULL, 0);
   1638e:	4680      	mov	r8, r0
        uint32_t addr = strtol(argv[3], NULL, 0);
   16390:	4611      	mov	r1, r2
   16392:	68e0      	ldr	r0, [r4, #12]
   16394:	f003 fd9f 	bl	19ed6 <strtol>
        uint32_t sub  = strtol(argv[4], NULL, 0);
   16398:	9a04      	ldr	r2, [sp, #16]
        uint32_t addr = strtol(argv[3], NULL, 0);
   1639a:	4606      	mov	r6, r0
        uint32_t sub  = strtol(argv[4], NULL, 0);
   1639c:	4611      	mov	r1, r2
   1639e:	6920      	ldr	r0, [r4, #16]
   163a0:	f003 fd99 	bl	19ed6 <strtol>
        uint64_t val  = strtol(argv[5], NULL, 0);
   163a4:	9a04      	ldr	r2, [sp, #16]
        uint32_t sub  = strtol(argv[4], NULL, 0);
   163a6:	4607      	mov	r7, r0
        uint64_t val  = strtol(argv[5], NULL, 0);
   163a8:	4611      	mov	r1, r2
   163aa:	6960      	ldr	r0, [r4, #20]
   163ac:	f003 fd93 	bl	19ed6 <strtol>
        int length = strtol(argv[6], NULL, 0);
   163b0:	9a04      	ldr	r2, [sp, #16]
        uint64_t val  = strtol(argv[5], NULL, 0);
   163b2:	4605      	mov	r5, r0
        int length = strtol(argv[6], NULL, 0);
   163b4:	4611      	mov	r1, r2
   163b6:	69a0      	ldr	r0, [r4, #24]
   163b8:	f003 fd8d 	bl	19ed6 <strtol>
   163bc:	4604      	mov	r4, r0
        dw1000_write_reg(hal_dw1000_inst(inst_n), addr, sub, val, length);
   163be:	fa5f f088 	uxtb.w	r0, r8
   163c2:	f7f2 fc99 	bl	8cf8 <hal_dw1000_inst>
        uint64_t val  = strtol(argv[5], NULL, 0);
   163c6:	17eb      	asrs	r3, r5, #31
   163c8:	e9cd 5300 	strd	r5, r3, [sp]
        dw1000_write_reg(hal_dw1000_inst(inst_n), addr, sub, val, length);
   163cc:	9402      	str	r4, [sp, #8]
   163ce:	b2ba      	uxth	r2, r7
   163d0:	b2b1      	uxth	r1, r6
   163d2:	f7f3 f8f9 	bl	95c8 <dw1000_write_reg>
   163d6:	e78f      	b.n	162f8 <dw1000_cli_cmd+0x9c>
    } else if (!strcmp(argv[1], "rd")) {
   163d8:	4953      	ldr	r1, [pc, #332]	; (16528 <dw1000_cli_cmd+0x2cc>)
   163da:	4640      	mov	r0, r8
   163dc:	f7f9 ff70 	bl	102c0 <strcmp>
   163e0:	4602      	mov	r2, r0
   163e2:	bb58      	cbnz	r0, 1643c <dw1000_cli_cmd+0x1e0>
        if (argc < 6) {
   163e4:	2f05      	cmp	r7, #5
   163e6:	dd87      	ble.n	162f8 <dw1000_cli_cmd+0x9c>
        inst_n = strtol(argv[2], NULL, 0);
   163e8:	4601      	mov	r1, r0
   163ea:	9004      	str	r0, [sp, #16]
   163ec:	68a0      	ldr	r0, [r4, #8]
   163ee:	f003 fd72 	bl	19ed6 <strtol>
        uint32_t addr = strtol(argv[3], NULL, 0);
   163f2:	9a04      	ldr	r2, [sp, #16]
        inst_n = strtol(argv[2], NULL, 0);
   163f4:	4680      	mov	r8, r0
        uint32_t addr = strtol(argv[3], NULL, 0);
   163f6:	4611      	mov	r1, r2
   163f8:	68e0      	ldr	r0, [r4, #12]
   163fa:	f003 fd6c 	bl	19ed6 <strtol>
        uint16_t sub  = strtol(argv[4], NULL, 0);
   163fe:	9a04      	ldr	r2, [sp, #16]
        uint32_t addr = strtol(argv[3], NULL, 0);
   16400:	4605      	mov	r5, r0
        uint16_t sub  = strtol(argv[4], NULL, 0);
   16402:	4611      	mov	r1, r2
   16404:	6920      	ldr	r0, [r4, #16]
   16406:	f003 fd66 	bl	19ed6 <strtol>
        int length = strtol(argv[5], NULL, 0);
   1640a:	9a04      	ldr	r2, [sp, #16]
        uint16_t sub  = strtol(argv[4], NULL, 0);
   1640c:	4607      	mov	r7, r0
        int length = strtol(argv[5], NULL, 0);
   1640e:	4611      	mov	r1, r2
   16410:	6960      	ldr	r0, [r4, #20]
   16412:	f003 fd60 	bl	19ed6 <strtol>
   16416:	9004      	str	r0, [sp, #16]
        uint64_t reg = dw1000_read_reg(hal_dw1000_inst(inst_n), addr, sub, length);
   16418:	fa5f f088 	uxtb.w	r0, r8
   1641c:	f7f2 fc6c 	bl	8cf8 <hal_dw1000_inst>
   16420:	9b04      	ldr	r3, [sp, #16]
   16422:	b2ba      	uxth	r2, r7
   16424:	b2a9      	uxth	r1, r5
   16426:	f7f3 f87d 	bl	9524 <dw1000_read_reg>
        streamer_printf(streamer, "0x%06"PRIX32",0x%04X: 0x%"PRIX64"\n", addr, sub, reg);
   1642a:	b2bb      	uxth	r3, r7
   1642c:	e9cd 0100 	strd	r0, r1, [sp]
   16430:	462a      	mov	r2, r5
   16432:	493e      	ldr	r1, [pc, #248]	; (1652c <dw1000_cli_cmd+0x2d0>)
   16434:	4630      	mov	r0, r6
   16436:	f7fe f82c 	bl	14492 <streamer_printf>
   1643a:	e75d      	b.n	162f8 <dw1000_cli_cmd+0x9c>
    } else if (!strcmp(argv[1], "ibt")){
   1643c:	493c      	ldr	r1, [pc, #240]	; (16530 <dw1000_cli_cmd+0x2d4>)
   1643e:	4640      	mov	r0, r8
   16440:	f7f9 ff3e 	bl	102c0 <strcmp>
   16444:	4605      	mov	r5, r0
   16446:	bb00      	cbnz	r0, 1648a <dw1000_cli_cmd+0x22e>
        if (argc < 3) {
   16448:	2f02      	cmp	r7, #2
   1644a:	d01b      	beq.n	16484 <dw1000_cli_cmd+0x228>
            inst_n = strtol(argv[2], NULL, 0);
   1644c:	4602      	mov	r2, r0
   1644e:	4601      	mov	r1, r0
   16450:	68a0      	ldr	r0, [r4, #8]
   16452:	f003 fd40 	bl	19ed6 <strtol>
        if (argc < 4) {
   16456:	2f03      	cmp	r7, #3
            inst_n = strtol(argv[2], NULL, 0);
   16458:	fa1f f880 	uxth.w	r8, r0
        if (argc < 4) {
   1645c:	d005      	beq.n	1646a <dw1000_cli_cmd+0x20e>
            d = strtol(argv[3], NULL, 0);
   1645e:	462a      	mov	r2, r5
   16460:	4629      	mov	r1, r5
   16462:	68e0      	ldr	r0, [r4, #12]
   16464:	f003 fd37 	bl	19ed6 <strtol>
   16468:	b2c5      	uxtb	r5, r0
        inst = hal_dw1000_inst(inst_n);
   1646a:	fa5f f088 	uxtb.w	r0, r8
   1646e:	f7f2 fc43 	bl	8cf8 <hal_dw1000_inst>
   16472:	9004      	str	r0, [sp, #16]
        console_no_ticks();
   16474:	f7fb fe60 	bl	12138 <console_no_ticks>
        dw1000_cli_interrupt_backtrace(inst, d, streamer);
   16478:	9804      	ldr	r0, [sp, #16]
   1647a:	4632      	mov	r2, r6
   1647c:	4629      	mov	r1, r5
   1647e:	f7ff fdad 	bl	15fdc <dw1000_cli_interrupt_backtrace>
   16482:	e711      	b.n	162a8 <dw1000_cli_cmd+0x4c>
            inst_n=0;
   16484:	4680      	mov	r8, r0
            d=0;
   16486:	4605      	mov	r5, r0
   16488:	e7ef      	b.n	1646a <dw1000_cli_cmd+0x20e>
    } else if (!strcmp(argv[1], "status2txt")){
   1648a:	492a      	ldr	r1, [pc, #168]	; (16534 <dw1000_cli_cmd+0x2d8>)
   1648c:	4640      	mov	r0, r8
   1648e:	f7f9 ff17 	bl	102c0 <strcmp>
   16492:	4602      	mov	r2, r0
   16494:	b970      	cbnz	r0, 164b4 <dw1000_cli_cmd+0x258>
        uint64_t d = strtoll(argv[2], NULL, 0);
   16496:	4601      	mov	r1, r0
   16498:	68a0      	ldr	r0, [r4, #8]
   1649a:	f003 fd22 	bl	19ee2 <strtoll>
   1649e:	9005      	str	r0, [sp, #20]
   164a0:	9104      	str	r1, [sp, #16]
        console_printf("%010llX: %s\n", d, sys_status_to_string(d));
   164a2:	f7ff fb05 	bl	15ab0 <sys_status_to_string>
   164a6:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   164aa:	9000      	str	r0, [sp, #0]
   164ac:	4822      	ldr	r0, [pc, #136]	; (16538 <dw1000_cli_cmd+0x2dc>)
   164ae:	f7fb fda3 	bl	11ff8 <console_printf>
   164b2:	e721      	b.n	162f8 <dw1000_cli_cmd+0x9c>
    } else if (!strcmp(argv[1], "fctrl2txt")){
   164b4:	4921      	ldr	r1, [pc, #132]	; (1653c <dw1000_cli_cmd+0x2e0>)
   164b6:	4640      	mov	r0, r8
   164b8:	f7f9 ff02 	bl	102c0 <strcmp>
   164bc:	bb28      	cbnz	r0, 1650a <dw1000_cli_cmd+0x2ae>
        if (argc < 4) {
   164be:	2f03      	cmp	r7, #3
   164c0:	dc03      	bgt.n	164ca <dw1000_cli_cmd+0x26e>
            console_printf("2 bytes needed\n");
   164c2:	481f      	ldr	r0, [pc, #124]	; (16540 <dw1000_cli_cmd+0x2e4>)
   164c4:	f7fb fd98 	bl	11ff8 <console_printf>
            return 0;
   164c8:	e716      	b.n	162f8 <dw1000_cli_cmd+0x9c>
            d = strtol(argv[2], NULL, 16);
   164ca:	68a0      	ldr	r0, [r4, #8]
   164cc:	2210      	movs	r2, #16
   164ce:	2100      	movs	r1, #0
   164d0:	f003 fd01 	bl	19ed6 <strtol>
            d2 = strtol(argv[3], NULL, 16);
   164d4:	2210      	movs	r2, #16
   164d6:	2100      	movs	r1, #0
            d = strtol(argv[2], NULL, 16);
   164d8:	4605      	mov	r5, r0
            d2 = strtol(argv[3], NULL, 16);
   164da:	68e0      	ldr	r0, [r4, #12]
   164dc:	f003 fcfb 	bl	19ed6 <strtol>
        streamer_printf(streamer, "%02X %02X: %s\n", (uint8_t)d, (uint8_t)d2, fctrl_to_string((d2<<8)|d));
   164e0:	b2ed      	uxtb	r5, r5
   164e2:	b2c7      	uxtb	r7, r0
   164e4:	ea45 2007 	orr.w	r0, r5, r7, lsl #8
   164e8:	f7ff fa0a 	bl	15900 <fctrl_to_string>
   164ec:	463b      	mov	r3, r7
   164ee:	9000      	str	r0, [sp, #0]
   164f0:	462a      	mov	r2, r5
   164f2:	4914      	ldr	r1, [pc, #80]	; (16544 <dw1000_cli_cmd+0x2e8>)
   164f4:	4630      	mov	r0, r6
   164f6:	f7fd ffcc 	bl	14492 <streamer_printf>
        streamer_printf(streamer, "----\n ledgend: \n");
   164fa:	4913      	ldr	r1, [pc, #76]	; (16548 <dw1000_cli_cmd+0x2ec>)
   164fc:	4630      	mov	r0, r6
   164fe:	f7fd ffc8 	bl	14492 <streamer_printf>
        fctrl_ledgend(streamer);
   16502:	4630      	mov	r0, r6
   16504:	f7ff f9da 	bl	158bc <fctrl_ledgend>
   16508:	e6f6      	b.n	162f8 <dw1000_cli_cmd+0x9c>
        streamer_printf(streamer, "Unknown cmd\n");
   1650a:	4910      	ldr	r1, [pc, #64]	; (1654c <dw1000_cli_cmd+0x2f0>)
   1650c:	e6af      	b.n	1626e <dw1000_cli_cmd+0x12>
   1650e:	bf00      	nop
   16510:	00021b14 	.word	0x00021b14
   16514:	000209f5 	.word	0x000209f5
   16518:	00021b22 	.word	0x00021b22
   1651c:	00021b25 	.word	0x00021b25
   16520:	00021b28 	.word	0x00021b28
   16524:	00021b5f 	.word	0x00021b5f
   16528:	00021b62 	.word	0x00021b62
   1652c:	00021b65 	.word	0x00021b65
   16530:	00021b7d 	.word	0x00021b7d
   16534:	00021b81 	.word	0x00021b81
   16538:	00021b8c 	.word	0x00021b8c
   1653c:	00021b99 	.word	0x00021b99
   16540:	00021ba3 	.word	0x00021ba3
   16544:	00021bb3 	.word	0x00021bb3
   16548:	00021bc2 	.word	0x00021bc2
   1654c:	00021bd3 	.word	0x00021bd3

00016550 <dw1000_cli_register>:
int
dw1000_cli_register(void)
{
#if MYNEWT_VAL(DW1000_CLI)
    int rc;
    rc = shell_cmd_register(&shell_dw1000_cmd);
   16550:	4801      	ldr	r0, [pc, #4]	; (16558 <dw1000_cli_register+0x8>)
   16552:	f7fc bb57 	b.w	12c04 <shell_cmd_register>
   16556:	bf00      	nop
   16558:	20001564 	.word	0x20001564

0001655c <dw1000_cli_down>:
        dw1000_sysfs_deinit(i);
    }
    dw1000_debugfs_deinit();
#endif
    return 0;
}
   1655c:	2000      	movs	r0, #0
   1655e:	4770      	bx	lr

00016560 <nrf52k_flash_wait_ready>:

#define NRF52K_FLASH_READY() (NRF_NVMC->READY == NVMC_READY_READY_Ready)

static int
nrf52k_flash_wait_ready(void)
{
   16560:	4b06      	ldr	r3, [pc, #24]	; (1657c <nrf52k_flash_wait_ready+0x1c>)
    int i;

    for (i = 0; i < 100000; i++) {
        if (NRF_NVMC->READY == NVMC_READY_READY_Ready) {
   16562:	4a07      	ldr	r2, [pc, #28]	; (16580 <nrf52k_flash_wait_ready+0x20>)
   16564:	f8d2 1400 	ldr.w	r1, [r2, #1024]	; 0x400
   16568:	2901      	cmp	r1, #1
   1656a:	d004      	beq.n	16576 <nrf52k_flash_wait_ready+0x16>
    for (i = 0; i < 100000; i++) {
   1656c:	3b01      	subs	r3, #1
   1656e:	d1f9      	bne.n	16564 <nrf52k_flash_wait_ready+0x4>
            return 0;
        }
    }
    return -1;
   16570:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16574:	4770      	bx	lr
            return 0;
   16576:	2000      	movs	r0, #0
}
   16578:	4770      	bx	lr
   1657a:	bf00      	nop
   1657c:	000186a0 	.word	0x000186a0
   16580:	4001e000 	.word	0x4001e000

00016584 <nrf52k_flash_erase_sector>:
    return rc;
}

static int
nrf52k_flash_erase_sector(const struct hal_flash *dev, uint32_t sector_address)
{
   16584:	b570      	push	{r4, r5, r6, lr}
   16586:	460d      	mov	r5, r1
    int sr;
    int rc = -1;

    if (nrf52k_flash_wait_ready()) {
   16588:	f7ff ffea 	bl	16560 <nrf52k_flash_wait_ready>
   1658c:	b9d0      	cbnz	r0, 165c4 <nrf52k_flash_erase_sector+0x40>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1658e:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   16592:	b672      	cpsid	i
        return -1;
    }
    __HAL_DISABLE_INTERRUPTS(sr);
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Een; /* Enable erase OP */
   16594:	4c0d      	ldr	r4, [pc, #52]	; (165cc <nrf52k_flash_erase_sector+0x48>)
   16596:	2302      	movs	r3, #2
   16598:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    if (nrf52k_flash_wait_ready()) {
   1659c:	f7ff ffe0 	bl	16560 <nrf52k_flash_wait_ready>
   165a0:	b968      	cbnz	r0, 165be <nrf52k_flash_erase_sector+0x3a>
        goto out;
    }

    NRF_NVMC->ERASEPAGE = sector_address;
   165a2:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    if (nrf52k_flash_wait_ready()) {
   165a6:	f7ff ffdb 	bl	16560 <nrf52k_flash_wait_ready>
   165aa:	3800      	subs	r0, #0
   165ac:	bf18      	it	ne
   165ae:	2001      	movne	r0, #1
   165b0:	4240      	negs	r0, r0
        goto out;
    }
    rc = 0;
out:
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren; /* Disable erase OP */
   165b2:	2300      	movs	r3, #0
   165b4:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   165b8:	b906      	cbnz	r6, 165bc <nrf52k_flash_erase_sector+0x38>
  __ASM volatile ("cpsie i" : : : "memory");
   165ba:	b662      	cpsie	i
    return rc;
}
   165bc:	bd70      	pop	{r4, r5, r6, pc}
    int rc = -1;
   165be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   165c2:	e7f6      	b.n	165b2 <nrf52k_flash_erase_sector+0x2e>
        return -1;
   165c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   165c8:	e7f8      	b.n	165bc <nrf52k_flash_erase_sector+0x38>
   165ca:	bf00      	nop
   165cc:	4001e000 	.word	0x4001e000

000165d0 <nrf52k_flash_init>:

static int
nrf52k_flash_init(const struct hal_flash *dev)
{
    return 0;
}
   165d0:	2000      	movs	r0, #0
   165d2:	4770      	bx	lr

000165d4 <nrf52k_flash_write>:
{
   165d4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   165d8:	460c      	mov	r4, r1
   165da:	4616      	mov	r6, r2
   165dc:	461d      	mov	r5, r3
    if (nrf52k_flash_wait_ready()) {
   165de:	f7ff ffbf 	bl	16560 <nrf52k_flash_wait_ready>
   165e2:	2800      	cmp	r0, #0
   165e4:	d151      	bne.n	1668a <nrf52k_flash_write+0xb6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   165e6:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   165ea:	b672      	cpsid	i
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen; /* Enable erase OP */
   165ec:	4b28      	ldr	r3, [pc, #160]	; (16690 <nrf52k_flash_write+0xbc>)
   165ee:	2201      	movs	r2, #1
    if (tmp) {
   165f0:	f014 0a03 	ands.w	sl, r4, #3
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen; /* Enable erase OP */
   165f4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (tmp) {
   165f8:	d026      	beq.n	16648 <nrf52k_flash_write+0x74>
        if (nrf52k_flash_wait_ready()) {
   165fa:	f7ff ffb1 	bl	16560 <nrf52k_flash_wait_ready>
   165fe:	b160      	cbz	r0, 1661a <nrf52k_flash_write+0x46>
    int rc = -1;
   16600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren;
   16604:	4b22      	ldr	r3, [pc, #136]	; (16690 <nrf52k_flash_write+0xbc>)
   16606:	2200      	movs	r2, #0
   16608:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   1660c:	f1b8 0f00 	cmp.w	r8, #0
   16610:	d100      	bne.n	16614 <nrf52k_flash_write+0x40>
  __ASM volatile ("cpsie i" : : : "memory");
   16612:	b662      	cpsie	i
}
   16614:	b002      	add	sp, #8
   16616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        val = *(uint32_t *)(address & ~0x3);
   1661a:	f024 0903 	bic.w	r9, r4, #3
        cnt = 4 - tmp;
   1661e:	f1ca 0704 	rsb	r7, sl, #4
        val = *(uint32_t *)(address & ~0x3);
   16622:	f8d9 3000 	ldr.w	r3, [r9]
   16626:	9301      	str	r3, [sp, #4]
        if (cnt > num_bytes) {
   16628:	42af      	cmp	r7, r5
   1662a:	bf28      	it	cs
   1662c:	462f      	movcs	r7, r5
        memcpy((uint8_t *)&val + tmp, src, cnt);
   1662e:	ab01      	add	r3, sp, #4
   16630:	4631      	mov	r1, r6
   16632:	eb03 000a 	add.w	r0, r3, sl
   16636:	463a      	mov	r2, r7
   16638:	f7f9 fe1a 	bl	10270 <memcpy>
        *(uint32_t *)(address & ~0x3) = val;
   1663c:	9b01      	ldr	r3, [sp, #4]
   1663e:	f8c9 3000 	str.w	r3, [r9]
        address += cnt;
   16642:	443c      	add	r4, r7
        num_bytes -= cnt;
   16644:	1bed      	subs	r5, r5, r7
        src += cnt;
   16646:	443e      	add	r6, r7
    while (num_bytes >= sizeof(uint32_t)) {
   16648:	2d03      	cmp	r5, #3
   1664a:	d814      	bhi.n	16676 <nrf52k_flash_write+0xa2>
    if (num_bytes) {
   1664c:	b165      	cbz	r5, 16668 <nrf52k_flash_write+0x94>
        val = *(uint32_t *)address;
   1664e:	6823      	ldr	r3, [r4, #0]
   16650:	9301      	str	r3, [sp, #4]
        memcpy(&val, src, num_bytes);
   16652:	462a      	mov	r2, r5
   16654:	4631      	mov	r1, r6
   16656:	a801      	add	r0, sp, #4
   16658:	f7f9 fe0a 	bl	10270 <memcpy>
        if (nrf52k_flash_wait_ready()) {
   1665c:	f7ff ff80 	bl	16560 <nrf52k_flash_wait_ready>
   16660:	2800      	cmp	r0, #0
   16662:	d1cd      	bne.n	16600 <nrf52k_flash_write+0x2c>
        *(uint32_t *)address = val;
   16664:	9b01      	ldr	r3, [sp, #4]
   16666:	6023      	str	r3, [r4, #0]
    if (nrf52k_flash_wait_ready()) {
   16668:	f7ff ff7a 	bl	16560 <nrf52k_flash_wait_ready>
   1666c:	3800      	subs	r0, #0
   1666e:	bf18      	it	ne
   16670:	2001      	movne	r0, #1
   16672:	4240      	negs	r0, r0
out:
   16674:	e7c6      	b.n	16604 <nrf52k_flash_write+0x30>
        if (nrf52k_flash_wait_ready()) {
   16676:	f7ff ff73 	bl	16560 <nrf52k_flash_wait_ready>
   1667a:	2800      	cmp	r0, #0
   1667c:	d1c0      	bne.n	16600 <nrf52k_flash_write+0x2c>
        *(uint32_t *)address = *(uint32_t *)src;
   1667e:	f856 3b04 	ldr.w	r3, [r6], #4
   16682:	f844 3b04 	str.w	r3, [r4], #4
        num_bytes -= sizeof(uint32_t);
   16686:	3d04      	subs	r5, #4
   16688:	e7de      	b.n	16648 <nrf52k_flash_write+0x74>
        return -1;
   1668a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1668e:	e7c1      	b.n	16614 <nrf52k_flash_write+0x40>
   16690:	4001e000 	.word	0x4001e000

00016694 <nrf52k_flash_read>:
{
   16694:	b508      	push	{r3, lr}
   16696:	4610      	mov	r0, r2
    memcpy(dst, (void *)address, num_bytes);
   16698:	461a      	mov	r2, r3
   1669a:	f7f9 fde9 	bl	10270 <memcpy>
}
   1669e:	2000      	movs	r0, #0
   166a0:	bd08      	pop	{r3, pc}

000166a2 <nrf52k_flash_sector_info>:
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   166a2:	297f      	cmp	r1, #127	; 0x7f
{
   166a4:	b508      	push	{r3, lr}
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   166a6:	dd05      	ble.n	166b4 <nrf52k_flash_sector_info+0x12>
   166a8:	2300      	movs	r3, #0
   166aa:	461a      	mov	r2, r3
   166ac:	4619      	mov	r1, r3
   166ae:	4618      	mov	r0, r3
   166b0:	f7f6 f8a4 	bl	c7fc <__assert_func>
    *address = idx * NRF52K_FLASH_SECTOR_SZ;
   166b4:	0309      	lsls	r1, r1, #12
   166b6:	6011      	str	r1, [r2, #0]
    *sz = NRF52K_FLASH_SECTOR_SZ;
   166b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   166bc:	601a      	str	r2, [r3, #0]
}
   166be:	2000      	movs	r0, #0
   166c0:	bd08      	pop	{r3, pc}

000166c2 <sub24>:
static inline int
sub24(uint32_t x, uint32_t y)
{
    int result;

    assert(x <= 0xffffff);
   166c2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
{
   166c6:	b508      	push	{r3, lr}
    assert(x <= 0xffffff);
   166c8:	d305      	bcc.n	166d6 <sub24+0x14>
   166ca:	2300      	movs	r3, #0
   166cc:	461a      	mov	r2, r3
   166ce:	4619      	mov	r1, r3
   166d0:	4618      	mov	r0, r3
   166d2:	f7f6 f893 	bl	c7fc <__assert_func>
    assert(y <= 0xffffff);
   166d6:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
   166da:	d2f6      	bcs.n	166ca <sub24+0x8>

    result = x - y;
   166dc:	1a40      	subs	r0, r0, r1
    if (result & 0x800000) {
   166de:	0203      	lsls	r3, r0, #8
        return (result | 0xff800000);
   166e0:	bf46      	itte	mi
   166e2:	ea6f 2040 	mvnmi.w	r0, r0, lsl #9
   166e6:	ea6f 2050 	mvnmi.w	r0, r0, lsr #9
    } else {
        return (result & 0x007fffff);
   166ea:	f3c0 0016 	ubfxpl	r0, r0, #0, #23
    }
}
   166ee:	bd08      	pop	{r3, pc}

000166f0 <nrf52_os_tick_set_ocmp>:
    return OS_TICK_TIMER->COUNTER;
}

static inline void
nrf52_os_tick_set_ocmp(uint32_t ocmp)
{
   166f0:	b570      	push	{r4, r5, r6, lr}
   166f2:	4604      	mov	r4, r0
    int delta;
    uint32_t counter;

    OS_ASSERT_CRITICAL();
   166f4:	f7f5 ffd1 	bl	c69a <os_arch_in_critical>
   166f8:	4603      	mov	r3, r0
   166fa:	b178      	cbz	r0, 1671c <nrf52_os_tick_set_ocmp+0x2c>
         */
        delta = sub24(ocmp, counter);
        if (delta > 2) {
            break;
        }
        ocmp += g_hal_os_tick.ticks_per_ostick;
   166fc:	4b0a      	ldr	r3, [pc, #40]	; (16728 <nrf52_os_tick_set_ocmp+0x38>)
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   166fe:	4d0b      	ldr	r5, [pc, #44]	; (1672c <nrf52_os_tick_set_ocmp+0x3c>)
        ocmp += g_hal_os_tick.ticks_per_ostick;
   16700:	681e      	ldr	r6, [r3, #0]
        ocmp &= 0xffffff;
   16702:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   16706:	f8c5 454c 	str.w	r4, [r5, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   1670a:	f8d5 1504 	ldr.w	r1, [r5, #1284]	; 0x504
        delta = sub24(ocmp, counter);
   1670e:	4620      	mov	r0, r4
   16710:	f7ff ffd7 	bl	166c2 <sub24>
        if (delta > 2) {
   16714:	2802      	cmp	r0, #2
   16716:	dc05      	bgt.n	16724 <nrf52_os_tick_set_ocmp+0x34>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   16718:	4434      	add	r4, r6
        ocmp &= 0xffffff;
   1671a:	e7f2      	b.n	16702 <nrf52_os_tick_set_ocmp+0x12>
    OS_ASSERT_CRITICAL();
   1671c:	4602      	mov	r2, r0
   1671e:	4601      	mov	r1, r0
   16720:	f7f6 f86c 	bl	c7fc <__assert_func>
    }
}
   16724:	bd70      	pop	{r4, r5, r6, pc}
   16726:	bf00      	nop
   16728:	20006bc8 	.word	0x20006bc8
   1672c:	40011000 	.word	0x40011000

00016730 <nrf52_timer_handler>:

static void
nrf52_timer_handler(void)
{
   16730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ticks;
    os_sr_t sr;
    uint32_t counter;

    os_trace_isr_enter();
    OS_ENTER_CRITICAL(sr);
   16732:	f7f5 ffa9 	bl	c688 <os_arch_save_sr>

    /* Calculate elapsed ticks and advance OS time. */

    counter = nrf52_os_tick_counter();
    delta = sub24(counter, g_hal_os_tick.lastocmp);
   16736:	4c10      	ldr	r4, [pc, #64]	; (16778 <nrf52_timer_handler+0x48>)
    return OS_TICK_TIMER->COUNTER;
   16738:	4f10      	ldr	r7, [pc, #64]	; (1677c <nrf52_timer_handler+0x4c>)
    delta = sub24(counter, g_hal_os_tick.lastocmp);
   1673a:	68a1      	ldr	r1, [r4, #8]
    OS_ENTER_CRITICAL(sr);
   1673c:	4606      	mov	r6, r0
    return OS_TICK_TIMER->COUNTER;
   1673e:	f8d7 0504 	ldr.w	r0, [r7, #1284]	; 0x504
    delta = sub24(counter, g_hal_os_tick.lastocmp);
   16742:	f7ff ffbe 	bl	166c2 <sub24>
    ticks = delta / g_hal_os_tick.ticks_per_ostick;
   16746:	6823      	ldr	r3, [r4, #0]
   16748:	fb90 f5f3 	sdiv	r5, r0, r3
    os_time_advance(ticks);
   1674c:	4628      	mov	r0, r5
   1674e:	f7f7 f8fb 	bl	d948 <os_time_advance>

    /* Clear timer interrupt */
    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   16752:	2300      	movs	r3, #0
   16754:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

    /* Update the time associated with the most recent tick */
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   16758:	6820      	ldr	r0, [r4, #0]
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1675a:	68a3      	ldr	r3, [r4, #8]
   1675c:	fb05 3300 	mla	r3, r5, r0, r3
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   16760:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

    /* Update the output compare to interrupt at the next tick */
    nrf52_os_tick_set_ocmp(g_hal_os_tick.lastocmp + g_hal_os_tick.ticks_per_ostick);
   16764:	4418      	add	r0, r3
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   16766:	60a3      	str	r3, [r4, #8]
    nrf52_os_tick_set_ocmp(g_hal_os_tick.lastocmp + g_hal_os_tick.ticks_per_ostick);
   16768:	f7ff ffc2 	bl	166f0 <nrf52_os_tick_set_ocmp>

    OS_EXIT_CRITICAL(sr);
   1676c:	4630      	mov	r0, r6
    os_trace_isr_exit();
}
   1676e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    OS_EXIT_CRITICAL(sr);
   16772:	f7f5 bf8f 	b.w	c694 <os_arch_restore_sr>
   16776:	bf00      	nop
   16778:	20006bc8 	.word	0x20006bc8
   1677c:	40011000 	.word	0x40011000

00016780 <os_tick_idle>:

void
os_tick_idle(os_time_t ticks)
{
   16780:	b510      	push	{r4, lr}
   16782:	4604      	mov	r4, r0
    uint32_t ocmp;

    OS_ASSERT_CRITICAL();
   16784:	f7f5 ff89 	bl	c69a <os_arch_in_critical>
   16788:	4603      	mov	r3, r0
   1678a:	b918      	cbnz	r0, 16794 <os_tick_idle+0x14>
   1678c:	4602      	mov	r2, r0
   1678e:	4601      	mov	r1, r0
   16790:	f7f6 f834 	bl	c7fc <__assert_func>

    if (ticks > 0) {
   16794:	b154      	cbz	r4, 167ac <os_tick_idle+0x2c>
        /*
         * Enter tickless regime during long idle durations.
         */
        if (ticks > g_hal_os_tick.max_idle_ticks) {
   16796:	4b0a      	ldr	r3, [pc, #40]	; (167c0 <os_tick_idle+0x40>)
   16798:	685a      	ldr	r2, [r3, #4]
            ticks = g_hal_os_tick.max_idle_ticks;
        }
        ocmp = g_hal_os_tick.lastocmp + (ticks*g_hal_os_tick.ticks_per_ostick);
   1679a:	6818      	ldr	r0, [r3, #0]
   1679c:	689b      	ldr	r3, [r3, #8]
   1679e:	4294      	cmp	r4, r2
   167a0:	bf28      	it	cs
   167a2:	4614      	movcs	r4, r2
        nrf52_os_tick_set_ocmp(ocmp);
   167a4:	fb00 3004 	mla	r0, r0, r4, r3
   167a8:	f7ff ffa2 	bl	166f0 <nrf52_os_tick_set_ocmp>
  __ASM volatile ("dsb 0xF":::"memory");
   167ac:	f3bf 8f4f 	dsb	sy
    }

    __DSB();
    __WFI();
   167b0:	bf30      	wfi

    if (ticks > 0) {
   167b2:	b11c      	cbz	r4, 167bc <os_tick_idle+0x3c>
         * Update OS time before anything else when coming out of
         * the tickless regime.
         */
        nrf52_timer_handler();
    }
}
   167b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf52_timer_handler();
   167b8:	f7ff bfba 	b.w	16730 <nrf52_timer_handler>
}
   167bc:	bd10      	pop	{r4, pc}
   167be:	bf00      	nop
   167c0:	20006bc8 	.word	0x20006bc8

000167c4 <os_tick_init>:
void
os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
    uint32_t sr;

    assert(RTC_FREQ % os_ticks_per_sec == 0);
   167c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   167c8:	fbb3 f3f0 	udiv	r3, r3, r0
   167cc:	4358      	muls	r0, r3
{
   167ce:	b570      	push	{r4, r5, r6, lr}
    assert(RTC_FREQ % os_ticks_per_sec == 0);
   167d0:	f5d0 4400 	rsbs	r4, r0, #32768	; 0x8000
{
   167d4:	460d      	mov	r5, r1
    assert(RTC_FREQ % os_ticks_per_sec == 0);
   167d6:	d005      	beq.n	167e4 <os_tick_init+0x20>
   167d8:	2300      	movs	r3, #0
   167da:	461a      	mov	r2, r3
   167dc:	4619      	mov	r1, r3
   167de:	4618      	mov	r0, r3
   167e0:	f7f6 f80c 	bl	c7fc <__assert_func>

    g_hal_os_tick.lastocmp = 0;
   167e4:	4e18      	ldr	r6, [pc, #96]	; (16848 <os_tick_init+0x84>)
    /*
     * The maximum number of OS ticks allowed to elapse during idle is
     * limited to 1/4th the number of timer ticks before the 24-bit counter
     * rolls over.
     */
    g_hal_os_tick.max_idle_ticks = (1UL << 22) / g_hal_os_tick.ticks_per_ostick;
   167e6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    g_hal_os_tick.ticks_per_ostick = RTC_FREQ / os_ticks_per_sec;
   167ea:	6033      	str	r3, [r6, #0]
    g_hal_os_tick.lastocmp = 0;
   167ec:	60b4      	str	r4, [r6, #8]
    g_hal_os_tick.max_idle_ticks = (1UL << 22) / g_hal_os_tick.ticks_per_ostick;
   167ee:	fbb2 f3f3 	udiv	r3, r2, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   167f2:	016d      	lsls	r5, r5, #5
   167f4:	6073      	str	r3, [r6, #4]

    /* disable interrupts */
    OS_ENTER_CRITICAL(sr);
   167f6:	f7f5 ff47 	bl	c688 <os_arch_save_sr>
   167fa:	4b14      	ldr	r3, [pc, #80]	; (1684c <os_tick_init+0x88>)
  uint32_t vectors = (uint32_t )SCB->VTOR;
   167fc:	4a14      	ldr	r2, [pc, #80]	; (16850 <os_tick_init+0x8c>)
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   167fe:	4915      	ldr	r1, [pc, #84]	; (16854 <os_tick_init+0x90>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   16800:	b2ed      	uxtb	r5, r5
   16802:	f883 5311 	strb.w	r5, [r3, #785]	; 0x311
  uint32_t vectors = (uint32_t )SCB->VTOR;
   16806:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   16808:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1680c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   16810:	601a      	str	r2, [r3, #0]

    /*
     * Program the OS_TICK_TIMER to operate at 32KHz and trigger an output
     * compare interrupt at a rate of 'os_ticks_per_sec'.
     */
    OS_TICK_TIMER->TASKS_STOP = 1;
   16812:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
   16816:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
   1681a:	2201      	movs	r2, #1
    OS_TICK_TIMER->TASKS_CLEAR = 1;

    OS_TICK_TIMER->EVTENCLR = 0xffffffff;
   1681c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    OS_TICK_TIMER->TASKS_STOP = 1;
   16820:	605a      	str	r2, [r3, #4]
    OS_TICK_TIMER->TASKS_CLEAR = 1;
   16822:	609a      	str	r2, [r3, #8]
    OS_TICK_TIMER->EVTENCLR = 0xffffffff;
   16824:	f8c3 1348 	str.w	r1, [r3, #840]	; 0x348
    OS_TICK_TIMER->INTENCLR = 0xffffffff;
   16828:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    OS_TICK_TIMER->INTENSET = RTC_COMPARE_INT_MASK(OS_TICK_CMPREG);
   1682c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   16830:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
    OS_TICK_TIMER->CC[OS_TICK_CMPREG] = g_hal_os_tick.ticks_per_ostick;
   16834:	6831      	ldr	r1, [r6, #0]
    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   16836:	f8c3 414c 	str.w	r4, [r3, #332]	; 0x14c
    OS_TICK_TIMER->CC[OS_TICK_CMPREG] = g_hal_os_tick.ticks_per_ostick;
   1683a:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c

    OS_TICK_TIMER->TASKS_START = 1;

    OS_EXIT_CRITICAL(sr);
}
   1683e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    OS_TICK_TIMER->TASKS_START = 1;
   16842:	601a      	str	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   16844:	f7f5 bf26 	b.w	c694 <os_arch_restore_sr>
   16848:	20006bc8 	.word	0x20006bc8
   1684c:	e000e100 	.word	0xe000e100
   16850:	e000ed00 	.word	0xe000ed00
   16854:	00016731 	.word	0x00016731

00016858 <__NVIC_SetPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
   16858:	2800      	cmp	r0, #0
   1685a:	db09      	blt.n	16870 <__NVIC_SetPendingIRQ+0x18>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1685c:	0943      	lsrs	r3, r0, #5
   1685e:	2201      	movs	r2, #1
   16860:	f000 001f 	and.w	r0, r0, #31
   16864:	fa02 f000 	lsl.w	r0, r2, r0
   16868:	3340      	adds	r3, #64	; 0x40
   1686a:	4a02      	ldr	r2, [pc, #8]	; (16874 <__NVIC_SetPendingIRQ+0x1c>)
   1686c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   16870:	4770      	bx	lr
   16872:	bf00      	nop
   16874:	e000e100 	.word	0xe000e100

00016878 <hal_timer_read_bsptimer>:
    rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
}

static uint32_t
hal_timer_read_bsptimer(struct nrf52_hal_timer *bsptimer)
{
   16878:	b538      	push	{r3, r4, r5, lr}
    uint32_t low32;
    uint32_t ctx;
    uint32_t tcntr;
    NRF_RTC_Type *rtctimer;

    rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1687a:	6903      	ldr	r3, [r0, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1687c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   16880:	b672      	cpsid	i
    __HAL_DISABLE_INTERRUPTS(ctx);
    tcntr = bsptimer->tmr_cntr;
    low32 = rtctimer->COUNTER;
   16882:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    if (rtctimer->EVENTS_OVRFLW) {
   16886:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    tcntr = bsptimer->tmr_cntr;
   1688a:	6844      	ldr	r4, [r0, #4]
    if (rtctimer->EVENTS_OVRFLW) {
   1688c:	b15a      	cbz	r2, 168a6 <hal_timer_read_bsptimer+0x2e>
        tcntr += (1UL << 24);
   1688e:	f104 7480 	add.w	r4, r4, #16777216	; 0x1000000
        bsptimer->tmr_cntr = tcntr;
        low32 = rtctimer->COUNTER;
        rtctimer->EVENTS_OVRFLW = 0;
   16892:	2200      	movs	r2, #0
        bsptimer->tmr_cntr = tcntr;
   16894:	6044      	str	r4, [r0, #4]
        low32 = rtctimer->COUNTER;
   16896:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
        rtctimer->EVENTS_OVRFLW = 0;
   1689a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1689e:	f990 0001 	ldrsb.w	r0, [r0, #1]
   168a2:	f7ff ffd9 	bl	16858 <__NVIC_SetPendingIRQ>
    }
    tcntr |= low32;
   168a6:	ea41 0004 	orr.w	r0, r1, r4
    __HAL_ENABLE_INTERRUPTS(ctx);
   168aa:	b905      	cbnz	r5, 168ae <hal_timer_read_bsptimer+0x36>
  __ASM volatile ("cpsie i" : : : "memory");
   168ac:	b662      	cpsie	i

    return tcntr;
}
   168ae:	bd38      	pop	{r3, r4, r5, pc}

000168b0 <nrf_timer_set_ocmp>:
{
   168b0:	b430      	push	{r4, r5}
    if (bsptimer->tmr_rtc) {
   168b2:	7884      	ldrb	r4, [r0, #2]
        rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   168b4:	6903      	ldr	r3, [r0, #16]
    if (bsptimer->tmr_rtc) {
   168b6:	b344      	cbz	r4, 1690a <nrf_timer_set_ocmp+0x5a>
        rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   168b8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   168bc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        cntr = rtctimer->COUNTER;
   168c0:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
        if (rtctimer->EVENTS_OVRFLW) {
   168c4:	f8d3 5104 	ldr.w	r5, [r3, #260]	; 0x104
        temp = bsptimer->tmr_cntr;
   168c8:	6842      	ldr	r2, [r0, #4]
        if (rtctimer->EVENTS_OVRFLW) {
   168ca:	b11d      	cbz	r5, 168d4 <nrf_timer_set_ocmp+0x24>
            cntr = rtctimer->COUNTER;
   168cc:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
            temp += (1UL << 24);
   168d0:	f102 7280 	add.w	r2, r2, #16777216	; 0x1000000
        temp |= cntr;
   168d4:	4322      	orrs	r2, r4
        delta_t = (int32_t)(expiry - temp);
   168d6:	1a8a      	subs	r2, r1, r2
        if (delta_t < 3) {
   168d8:	2a02      	cmp	r2, #2
   168da:	dc04      	bgt.n	168e6 <nrf_timer_set_ocmp+0x36>
}
   168dc:	bc30      	pop	{r4, r5}
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   168de:	f990 0001 	ldrsb.w	r0, [r0, #1]
   168e2:	f7ff bfb9 	b.w	16858 <__NVIC_SetPendingIRQ>
            if (delta_t < (1UL << 24)) {
   168e6:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = expiry & 0x00ffffff;
   168ea:	bf34      	ite	cc
   168ec:	f021 417f 	biccc.w	r1, r1, #4278190080	; 0xff000000
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
   168f0:	f504 0400 	addcs.w	r4, r4, #8388608	; 0x800000
            rtctimer->INTENSET = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   168f4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = expiry & 0x00ffffff;
   168f8:	bf34      	ite	cc
   168fa:	f8c3 1548 	strcc.w	r1, [r3, #1352]	; 0x548
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
   168fe:	f8c3 4548 	strcs.w	r4, [r3, #1352]	; 0x548
            rtctimer->INTENSET = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   16902:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   16906:	bc30      	pop	{r4, r5}
   16908:	4770      	bx	lr
        hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1690a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   1690e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        hwtimer->CC[NRF_TIMER_CC_INT] = expiry;
   16912:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   16916:	f8c3 414c 	str.w	r4, [r3, #332]	; 0x14c
        hwtimer->INTENSET = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1691a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
   1691e:	2201      	movs	r2, #1
   16920:	649a      	str	r2, [r3, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
   16922:	f8d3 3548 	ldr.w	r3, [r3, #1352]	; 0x548
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
   16926:	1a59      	subs	r1, r3, r1
   16928:	2900      	cmp	r1, #0
   1692a:	dbec      	blt.n	16906 <nrf_timer_set_ocmp+0x56>
   1692c:	e7d6      	b.n	168dc <nrf_timer_set_ocmp+0x2c>
	...

00016930 <nrf52_timer0_irq_handler>:
#endif

#if MYNEWT_VAL(TIMER_0)
void
nrf52_timer0_irq_handler(void)
{
   16930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    hwtimer = bsptimer->tmr_reg;
   16934:	4c27      	ldr	r4, [pc, #156]	; (169d4 <nrf52_timer0_irq_handler+0xa4>)
   16936:	6926      	ldr	r6, [r4, #16]
    compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   16938:	f8d6 314c 	ldr.w	r3, [r6, #332]	; 0x14c
    if (compare) {
   1693c:	b113      	cbz	r3, 16944 <nrf52_timer0_irq_handler+0x14>
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   1693e:	2300      	movs	r3, #0
   16940:	f8c6 314c 	str.w	r3, [r6, #332]	; 0x14c
    ++bsptimer->timer_isrs;
   16944:	68a3      	ldr	r3, [r4, #8]
   16946:	3301      	adds	r3, #1
   16948:	60a3      	str	r3, [r4, #8]
    if (hwtimer->INTENCLR & NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT)) {
   1694a:	f8d6 3308 	ldr.w	r3, [r6, #776]	; 0x308
   1694e:	031b      	lsls	r3, r3, #12
   16950:	d53b      	bpl.n	169ca <nrf52_timer0_irq_handler+0x9a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   16952:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   16956:	b672      	cpsid	i
            tcntr = hal_timer_read_bsptimer(bsptimer);
   16958:	f8df a078 	ldr.w	sl, [pc, #120]	; 169d4 <nrf52_timer0_irq_handler+0xa4>
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
   1695c:	f04f 0801 	mov.w	r8, #1
            delta = 0;
   16960:	f04f 0900 	mov.w	r9, #0
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
   16964:	6965      	ldr	r5, [r4, #20]
   16966:	b155      	cbz	r5, 1697e <nrf52_timer0_irq_handler+0x4e>
        if (bsptimer->tmr_rtc) {
   16968:	78a2      	ldrb	r2, [r4, #2]
   1696a:	b192      	cbz	r2, 16992 <nrf52_timer0_irq_handler+0x62>
            tcntr = hal_timer_read_bsptimer(bsptimer);
   1696c:	4650      	mov	r0, sl
   1696e:	f7ff ff83 	bl	16878 <hal_timer_read_bsptimer>
            delta = -3;
   16972:	f06f 0202 	mvn.w	r2, #2
        if ((int32_t)(tcntr - timer->expiry) >= delta) {
   16976:	68eb      	ldr	r3, [r5, #12]
   16978:	1ac0      	subs	r0, r0, r3
   1697a:	4290      	cmp	r0, r2
   1697c:	da0f      	bge.n	1699e <nrf52_timer0_irq_handler+0x6e>
    timer = TAILQ_FIRST(&bsptimer->hal_timer_q);
   1697e:	6963      	ldr	r3, [r4, #20]
    if (timer) {
   16980:	b9db      	cbnz	r3, 169ba <nrf52_timer0_irq_handler+0x8a>
        if (bsptimer->tmr_rtc) {
   16982:	78a2      	ldrb	r2, [r4, #2]
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
   16984:	6923      	ldr	r3, [r4, #16]
        if (bsptimer->tmr_rtc) {
   16986:	b312      	cbz	r2, 169ce <nrf52_timer0_irq_handler+0x9e>
    rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   16988:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1698c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   16990:	e017      	b.n	169c2 <nrf52_timer0_irq_handler+0x92>
            tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   16992:	6923      	ldr	r3, [r4, #16]
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
   16994:	f8c3 8048 	str.w	r8, [r3, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
   16998:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
            delta = 0;
   1699c:	e7eb      	b.n	16976 <nrf52_timer0_irq_handler+0x46>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1699e:	e9d5 3204 	ldrd	r3, r2, [r5, #16]
   169a2:	b143      	cbz	r3, 169b6 <nrf52_timer0_irq_handler+0x86>
   169a4:	615a      	str	r2, [r3, #20]
   169a6:	696a      	ldr	r2, [r5, #20]
   169a8:	6013      	str	r3, [r2, #0]
            timer->cb_func(timer->cb_arg);
   169aa:	e9d5 3001 	ldrd	r3, r0, [r5, #4]
            timer->link.tqe_prev = NULL;
   169ae:	f8c5 9014 	str.w	r9, [r5, #20]
            timer->cb_func(timer->cb_arg);
   169b2:	4798      	blx	r3
   169b4:	e7d6      	b.n	16964 <nrf52_timer0_irq_handler+0x34>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   169b6:	61a2      	str	r2, [r4, #24]
   169b8:	e7f5      	b.n	169a6 <nrf52_timer0_irq_handler+0x76>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
   169ba:	68d9      	ldr	r1, [r3, #12]
   169bc:	4805      	ldr	r0, [pc, #20]	; (169d4 <nrf52_timer0_irq_handler+0xa4>)
   169be:	f7ff ff77 	bl	168b0 <nrf_timer_set_ocmp>
    __HAL_ENABLE_INTERRUPTS(ctx);
   169c2:	b907      	cbnz	r7, 169c6 <nrf52_timer0_irq_handler+0x96>
  __ASM volatile ("cpsie i" : : : "memory");
   169c4:	b662      	cpsie	i
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   169c6:	f8d6 314c 	ldr.w	r3, [r6, #332]	; 0x14c
    hal_timer_irq_handler(&nrf52_hal_timer0);
}
   169ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   169ce:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   169d2:	e7db      	b.n	1698c <nrf52_timer0_irq_handler+0x5c>
   169d4:	20006bd4 	.word	0x20006bd4

000169d8 <hal_timer_init>:
    uint8_t irq_num;
    struct nrf52_hal_timer *bsptimer;
    void *hwtimer;
    hal_timer_irq_handler_t irq_isr;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   169d8:	2805      	cmp	r0, #5
   169da:	dc1d      	bgt.n	16a18 <hal_timer_init+0x40>
   169dc:	4b0f      	ldr	r3, [pc, #60]	; (16a1c <hal_timer_init+0x44>)
   169de:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   169e2:	b1cb      	cbz	r3, 16a18 <hal_timer_init+0x40>

    /* If timer is enabled do not allow init */
    if (bsptimer->tmr_enabled) {
   169e4:	781b      	ldrb	r3, [r3, #0]
   169e6:	b9bb      	cbnz	r3, 16a18 <hal_timer_init+0x40>
        rc = EINVAL;
        goto err;
    }

    switch (timer_num) {
   169e8:	b9b0      	cbnz	r0, 16a18 <hal_timer_init+0x40>
    if (hwtimer == NULL) {
        rc = EINVAL;
        goto err;
    }

    bsptimer->tmr_reg = hwtimer;
   169ea:	4b0d      	ldr	r3, [pc, #52]	; (16a20 <hal_timer_init+0x48>)
   169ec:	4a0d      	ldr	r2, [pc, #52]	; (16a24 <hal_timer_init+0x4c>)
   169ee:	611a      	str	r2, [r3, #16]
    bsptimer->tmr_irq_num = irq_num;
   169f0:	2208      	movs	r2, #8
   169f2:	705a      	strb	r2, [r3, #1]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   169f4:	4b0c      	ldr	r3, [pc, #48]	; (16a28 <hal_timer_init+0x50>)
   169f6:	f44f 7280 	mov.w	r2, #256	; 0x100
   169fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   169fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   16a02:	f3bf 8f6f 	isb	sy
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   16a06:	22e0      	movs	r2, #224	; 0xe0
   16a08:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
  uint32_t vectors = (uint32_t )SCB->VTOR;
   16a0c:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   16a10:	4a06      	ldr	r2, [pc, #24]	; (16a2c <hal_timer_init+0x54>)
  uint32_t vectors = (uint32_t )SCB->VTOR;
   16a12:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   16a14:	661a      	str	r2, [r3, #96]	; 0x60
}
   16a16:	4770      	bx	lr
    NVIC_SetVector(irq_num, (uint32_t)irq_isr);

    return 0;

err:
    return rc;
   16a18:	2016      	movs	r0, #22
}
   16a1a:	4770      	bx	lr
   16a1c:	00021da8 	.word	0x00021da8
   16a20:	20006bd4 	.word	0x20006bd4
   16a24:	40008000 	.word	0x40008000
   16a28:	e000e100 	.word	0xe000e100
   16a2c:	00016931 	.word	0x00016931

00016a30 <hal_timer_config>:
    NRF_TIMER_Type *hwtimer;
#if MYNEWT_VAL(TIMER_5)
    NRF_RTC_Type *rtctimer;
#endif

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   16a30:	2805      	cmp	r0, #5
{
   16a32:	b530      	push	{r4, r5, lr}
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   16a34:	dc5e      	bgt.n	16af4 <hal_timer_config+0xc4>
   16a36:	4b31      	ldr	r3, [pc, #196]	; (16afc <hal_timer_config+0xcc>)
   16a38:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   16a3c:	2c00      	cmp	r4, #0
   16a3e:	d059      	beq.n	16af4 <hal_timer_config+0xc4>
    /*
     * Largest prescaler is 2^9 and must make sure frequency not too high.
     * If hwtimer is NULL it means that the timer was not initialized prior
     * to call.
     */
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   16a40:	7822      	ldrb	r2, [r4, #0]
   16a42:	2a00      	cmp	r2, #0
   16a44:	d156      	bne.n	16af4 <hal_timer_config+0xc4>
   16a46:	4b2e      	ldr	r3, [pc, #184]	; (16b00 <hal_timer_config+0xd0>)
   16a48:	4299      	cmp	r1, r3
   16a4a:	d853      	bhi.n	16af4 <hal_timer_config+0xc4>
    div = NRF52_MAX_TIMER_FREQ / freq_hz;
   16a4c:	fbb3 f1f1 	udiv	r1, r3, r1
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   16a50:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   16a54:	d84e      	bhi.n	16af4 <hal_timer_config+0xc4>
   16a56:	6923      	ldr	r3, [r4, #16]
   16a58:	2b00      	cmp	r3, #0
   16a5a:	d04b      	beq.n	16af4 <hal_timer_config+0xc4>
        (bsptimer->tmr_reg == NULL)) {
        rc = EINVAL;
        goto err;
    }

    if (div == 1) {
   16a5c:	2901      	cmp	r1, #1
   16a5e:	d00f      	beq.n	16a80 <hal_timer_config+0x50>
   16a60:	2301      	movs	r3, #1
        prescaler = 0;
    } else {
        /* Find closest prescaler */
        for (prescaler = 1; prescaler < 10; ++prescaler) {
            if (div <= (1 << prescaler)) {
   16a62:	4618      	mov	r0, r3
   16a64:	fa00 f503 	lsl.w	r5, r0, r3
   16a68:	428d      	cmp	r5, r1
   16a6a:	b2da      	uxtb	r2, r3
   16a6c:	d33d      	bcc.n	16aea <hal_timer_config+0xba>
                min_delta = div - (1 << (prescaler - 1));
   16a6e:	3b01      	subs	r3, #1
   16a70:	fa00 f303 	lsl.w	r3, r0, r3
   16a74:	1acb      	subs	r3, r1, r3
                max_delta = (1 << prescaler) - div;
   16a76:	1a69      	subs	r1, r5, r1
                if (min_delta < max_delta) {
   16a78:	428b      	cmp	r3, r1
   16a7a:	d201      	bcs.n	16a80 <hal_timer_config+0x50>
                    prescaler -= 1;
   16a7c:	3a01      	subs	r2, #1
   16a7e:	b2d2      	uxtb	r2, r2
            }
        }
    }

    /* Now set the actual frequency */
    bsptimer->tmr_freq = NRF52_MAX_TIMER_FREQ / (1 << prescaler);
   16a80:	4b1f      	ldr	r3, [pc, #124]	; (16b00 <hal_timer_config+0xd0>)
    bsptimer->tmr_enabled = 1;
   16a82:	2501      	movs	r5, #1
    bsptimer->tmr_freq = NRF52_MAX_TIMER_FREQ / (1 << prescaler);
   16a84:	4113      	asrs	r3, r2
   16a86:	60e3      	str	r3, [r4, #12]
    bsptimer->tmr_enabled = 1;
   16a88:	7025      	strb	r5, [r4, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   16a8a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   16a8e:	b672      	cpsid	i

    /* disable interrupts */
    __HAL_DISABLE_INTERRUPTS(ctx);

    /* Make sure HFXO is started */
    if ((NRF_CLOCK->HFCLKSTAT &
   16a90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   16a94:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
   16a98:	f001 1101 	and.w	r1, r1, #65537	; 0x10001
   16a9c:	f1b1 1f01 	cmp.w	r1, #65537	; 0x10001
   16aa0:	d007      	beq.n	16ab2 <hal_timer_config+0x82>
         (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) !=
        (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) {
        NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
   16aa2:	2100      	movs	r1, #0
   16aa4:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
        NRF_CLOCK->TASKS_HFCLKSTART = 1;
   16aa8:	601d      	str	r5, [r3, #0]
        while (1) {
            if ((NRF_CLOCK->EVENTS_HFCLKSTARTED) != 0) {
   16aaa:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
   16aae:	2900      	cmp	r1, #0
   16ab0:	d0fb      	beq.n	16aaa <hal_timer_config+0x7a>
                break;
            }
        }
    }
    hwtimer = bsptimer->tmr_reg;
   16ab2:	6921      	ldr	r1, [r4, #16]

    /* Stop the timer first */
    hwtimer->TASKS_STOP = 1;
   16ab4:	2301      	movs	r3, #1
    hwtimer->TASKS_CLEAR = 1;

    /* Put the timer in timer mode using 32 bits. */
    hwtimer->MODE = TIMER_MODE_MODE_Timer;
   16ab6:	2500      	movs	r5, #0
    hwtimer->TASKS_STOP = 1;
   16ab8:	604b      	str	r3, [r1, #4]
    hwtimer->TASKS_CLEAR = 1;
   16aba:	60cb      	str	r3, [r1, #12]
    hwtimer->MODE = TIMER_MODE_MODE_Timer;
   16abc:	f8c1 5504 	str.w	r5, [r1, #1284]	; 0x504
    hwtimer->BITMODE = TIMER_BITMODE_BITMODE_32Bit;
   16ac0:	2503      	movs	r5, #3
   16ac2:	f8c1 5508 	str.w	r5, [r1, #1288]	; 0x508

    /* Set the pre-scalar */
    hwtimer->PRESCALER = prescaler;
   16ac6:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510

    /* Start the timer */
    hwtimer->TASKS_START = 1;
   16aca:	600b      	str	r3, [r1, #0]

    NVIC_EnableIRQ(bsptimer->tmr_irq_num);
   16acc:	f994 2001 	ldrsb.w	r2, [r4, #1]
   16ad0:	7861      	ldrb	r1, [r4, #1]
  if ((int32_t)(IRQn) >= 0)
   16ad2:	2a00      	cmp	r2, #0
   16ad4:	db06      	blt.n	16ae4 <hal_timer_config+0xb4>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16ad6:	f001 011f 	and.w	r1, r1, #31
   16ada:	408b      	lsls	r3, r1
   16adc:	0952      	lsrs	r2, r2, #5
   16ade:	4909      	ldr	r1, [pc, #36]	; (16b04 <hal_timer_config+0xd4>)
   16ae0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

    __HAL_ENABLE_INTERRUPTS(ctx);
   16ae4:	b940      	cbnz	r0, 16af8 <hal_timer_config+0xc8>
  __ASM volatile ("cpsie i" : : : "memory");
   16ae6:	b662      	cpsie	i

    return 0;

err:
    return rc;
}
   16ae8:	bd30      	pop	{r4, r5, pc}
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   16aea:	3301      	adds	r3, #1
   16aec:	2b0a      	cmp	r3, #10
   16aee:	d1b9      	bne.n	16a64 <hal_timer_config+0x34>
   16af0:	461a      	mov	r2, r3
   16af2:	e7c5      	b.n	16a80 <hal_timer_config+0x50>
    return rc;
   16af4:	2016      	movs	r0, #22
   16af6:	e7f7      	b.n	16ae8 <hal_timer_config+0xb8>
    return 0;
   16af8:	2000      	movs	r0, #0
   16afa:	e7f5      	b.n	16ae8 <hal_timer_config+0xb8>
   16afc:	00021da8 	.word	0x00021da8
   16b00:	00f42400 	.word	0x00f42400
   16b04:	e000e100 	.word	0xe000e100

00016b08 <hal_timer_read>:
{
    int rc;
    uint32_t tcntr;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   16b08:	2805      	cmp	r0, #5
{
   16b0a:	b508      	push	{r3, lr}
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   16b0c:	dc09      	bgt.n	16b22 <hal_timer_read+0x1a>
   16b0e:	4b0b      	ldr	r3, [pc, #44]	; (16b3c <hal_timer_read+0x34>)
   16b10:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   16b14:	b128      	cbz	r0, 16b22 <hal_timer_read+0x1a>
    if (bsptimer->tmr_rtc) {
   16b16:	7883      	ldrb	r3, [r0, #2]
   16b18:	b14b      	cbz	r3, 16b2e <hal_timer_read+0x26>
    /* Assert here since there is no invalid return code */
err:
    assert(0);
    rc = 0;
    return rc;
}
   16b1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        tcntr = hal_timer_read_bsptimer(bsptimer);
   16b1e:	f7ff beab 	b.w	16878 <hal_timer_read_bsptimer>
    assert(0);
   16b22:	2300      	movs	r3, #0
   16b24:	461a      	mov	r2, r3
   16b26:	4619      	mov	r1, r3
   16b28:	4618      	mov	r0, r3
   16b2a:	f7f5 fe67 	bl	c7fc <__assert_func>
        tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   16b2e:	6903      	ldr	r3, [r0, #16]
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
   16b30:	2201      	movs	r2, #1
   16b32:	649a      	str	r2, [r3, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
   16b34:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   16b38:	bd08      	pop	{r3, pc}
   16b3a:	bf00      	nop
   16b3c:	00021da8 	.word	0x00021da8

00016b40 <hal_timer_set_cb>:
                 void *arg)
{
    int rc;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   16b40:	2805      	cmp	r0, #5
{
   16b42:	b510      	push	{r4, lr}
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   16b44:	dc09      	bgt.n	16b5a <hal_timer_set_cb+0x1a>
   16b46:	4c06      	ldr	r4, [pc, #24]	; (16b60 <hal_timer_set_cb+0x20>)
   16b48:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
   16b4c:	b12c      	cbz	r4, 16b5a <hal_timer_set_cb+0x1a>

    timer->cb_func = cb_func;
    timer->cb_arg = arg;
   16b4e:	e9c1 2301 	strd	r2, r3, [r1, #4]
    timer->link.tqe_prev = NULL;
   16b52:	2000      	movs	r0, #0
   16b54:	6148      	str	r0, [r1, #20]
    timer->bsp_timer = bsptimer;
   16b56:	600c      	str	r4, [r1, #0]

    rc = 0;

err:
    return rc;
}
   16b58:	bd10      	pop	{r4, pc}
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   16b5a:	2016      	movs	r0, #22
    return rc;
   16b5c:	e7fc      	b.n	16b58 <hal_timer_set_cb+0x18>
   16b5e:	bf00      	nop
   16b60:	00021da8 	.word	0x00021da8

00016b64 <hal_timer_start_at>:
    return rc;
}

int
hal_timer_start_at(struct hal_timer *timer, uint32_t tick)
{
   16b64:	b570      	push	{r4, r5, r6, lr}
    uint32_t ctx;
    struct hal_timer *entry;
    struct nrf52_hal_timer *bsptimer;

    if ((timer == NULL) || (timer->link.tqe_prev != NULL) ||
   16b66:	2800      	cmp	r0, #0
   16b68:	d033      	beq.n	16bd2 <hal_timer_start_at+0x6e>
   16b6a:	6943      	ldr	r3, [r0, #20]
   16b6c:	2b00      	cmp	r3, #0
   16b6e:	d130      	bne.n	16bd2 <hal_timer_start_at+0x6e>
   16b70:	6843      	ldr	r3, [r0, #4]
   16b72:	2b00      	cmp	r3, #0
   16b74:	d02d      	beq.n	16bd2 <hal_timer_start_at+0x6e>
        (timer->cb_func == NULL)) {
        return EINVAL;
    }
    bsptimer = (struct nrf52_hal_timer *)timer->bsp_timer;
   16b76:	6802      	ldr	r2, [r0, #0]
    timer->expiry = tick;
   16b78:	60c1      	str	r1, [r0, #12]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   16b7a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   16b7e:	b672      	cpsid	i

    __HAL_DISABLE_INTERRUPTS(ctx);

    if (TAILQ_EMPTY(&bsptimer->hal_timer_q)) {
   16b80:	6953      	ldr	r3, [r2, #20]
        TAILQ_INSERT_HEAD(&bsptimer->hal_timer_q, timer, link);
   16b82:	f100 0110 	add.w	r1, r0, #16
    if (TAILQ_EMPTY(&bsptimer->hal_timer_q)) {
   16b86:	b953      	cbnz	r3, 16b9e <hal_timer_start_at+0x3a>
        TAILQ_INSERT_HEAD(&bsptimer->hal_timer_q, timer, link);
   16b88:	6103      	str	r3, [r0, #16]
   16b8a:	4613      	mov	r3, r2
   16b8c:	6191      	str	r1, [r2, #24]
   16b8e:	f843 0f14 	str.w	r0, [r3, #20]!
   16b92:	6143      	str	r3, [r0, #20]
        }
    }

    /* If this is the head, we need to set new OCMP */
    if (timer == TAILQ_FIRST(&bsptimer->hal_timer_q)) {
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
   16b94:	68c1      	ldr	r1, [r0, #12]
   16b96:	4610      	mov	r0, r2
   16b98:	f7ff fe8a 	bl	168b0 <nrf_timer_set_ocmp>
   16b9c:	e00c      	b.n	16bb8 <hal_timer_start_at+0x54>
            if ((int32_t)(timer->expiry - entry->expiry) < 0) {
   16b9e:	68c6      	ldr	r6, [r0, #12]
   16ba0:	68dd      	ldr	r5, [r3, #12]
   16ba2:	1b75      	subs	r5, r6, r5
   16ba4:	2d00      	cmp	r5, #0
   16ba6:	da0b      	bge.n	16bc0 <hal_timer_start_at+0x5c>
                TAILQ_INSERT_BEFORE(entry, timer, link);
   16ba8:	695d      	ldr	r5, [r3, #20]
   16baa:	e9c0 3504 	strd	r3, r5, [r0, #16]
   16bae:	6028      	str	r0, [r5, #0]
   16bb0:	6159      	str	r1, [r3, #20]
    if (timer == TAILQ_FIRST(&bsptimer->hal_timer_q)) {
   16bb2:	6953      	ldr	r3, [r2, #20]
   16bb4:	4298      	cmp	r0, r3
   16bb6:	d0ed      	beq.n	16b94 <hal_timer_start_at+0x30>
    }

    __HAL_ENABLE_INTERRUPTS(ctx);
   16bb8:	b904      	cbnz	r4, 16bbc <hal_timer_start_at+0x58>
  __ASM volatile ("cpsie i" : : : "memory");
   16bba:	b662      	cpsie	i
   16bbc:	2000      	movs	r0, #0
   16bbe:	e009      	b.n	16bd4 <hal_timer_start_at+0x70>
        TAILQ_FOREACH(entry, &bsptimer->hal_timer_q, link) {
   16bc0:	691b      	ldr	r3, [r3, #16]
   16bc2:	2b00      	cmp	r3, #0
   16bc4:	d1ec      	bne.n	16ba0 <hal_timer_start_at+0x3c>
            TAILQ_INSERT_TAIL(&bsptimer->hal_timer_q, timer, link);
   16bc6:	6103      	str	r3, [r0, #16]
   16bc8:	6993      	ldr	r3, [r2, #24]
   16bca:	6143      	str	r3, [r0, #20]
   16bcc:	6018      	str	r0, [r3, #0]
   16bce:	6191      	str	r1, [r2, #24]
   16bd0:	e7ef      	b.n	16bb2 <hal_timer_start_at+0x4e>
        return EINVAL;
   16bd2:	2016      	movs	r0, #22

    return 0;
}
   16bd4:	bd70      	pop	{r4, r5, r6, pc}

00016bd6 <hal_timer_stop>:
 *
 * @return int
 */
int
hal_timer_stop(struct hal_timer *timer)
{
   16bd6:	b570      	push	{r4, r5, r6, lr}
    uint32_t ctx;
    int reset_ocmp;
    struct hal_timer *entry;
    struct nrf52_hal_timer *bsptimer;

    if (timer == NULL) {
   16bd8:	b350      	cbz	r0, 16c30 <hal_timer_stop+0x5a>
        return EINVAL;
    }

   bsptimer = (struct nrf52_hal_timer *)timer->bsp_timer;
   16bda:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   16bdc:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   16be0:	b672      	cpsid	i

    __HAL_DISABLE_INTERRUPTS(ctx);

    if (timer->link.tqe_prev != NULL) {
   16be2:	6941      	ldr	r1, [r0, #20]
   16be4:	b199      	cbz	r1, 16c0e <hal_timer_stop+0x38>
        reset_ocmp = 0;
        if (timer == TAILQ_FIRST(&bsptimer->hal_timer_q)) {
   16be6:	695d      	ldr	r5, [r3, #20]
            /* If first on queue, we will need to reset OCMP */
            entry = TAILQ_NEXT(timer, link);
   16be8:	6902      	ldr	r2, [r0, #16]
        reset_ocmp = 0;
   16bea:	4285      	cmp	r5, r0
   16bec:	bf0b      	itete	eq
   16bee:	2601      	moveq	r6, #1
   16bf0:	2600      	movne	r6, #0
   16bf2:	4615      	moveq	r5, r2
   16bf4:	2500      	movne	r5, #0
            reset_ocmp = 1;
        }
        TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   16bf6:	b172      	cbz	r2, 16c16 <hal_timer_stop+0x40>
   16bf8:	6151      	str	r1, [r2, #20]
   16bfa:	6941      	ldr	r1, [r0, #20]
   16bfc:	600a      	str	r2, [r1, #0]
        timer->link.tqe_prev = NULL;
   16bfe:	2200      	movs	r2, #0
   16c00:	6142      	str	r2, [r0, #20]
        if (reset_ocmp) {
   16c02:	b126      	cbz	r6, 16c0e <hal_timer_stop+0x38>
            if (entry) {
   16c04:	b14d      	cbz	r5, 16c1a <hal_timer_stop+0x44>
                nrf_timer_set_ocmp((struct nrf52_hal_timer *)entry->bsp_timer,
   16c06:	68e9      	ldr	r1, [r5, #12]
   16c08:	6828      	ldr	r0, [r5, #0]
   16c0a:	f7ff fe51 	bl	168b0 <nrf_timer_set_ocmp>
                }
            }
        }
    }

    __HAL_ENABLE_INTERRUPTS(ctx);
   16c0e:	b904      	cbnz	r4, 16c12 <hal_timer_stop+0x3c>
  __ASM volatile ("cpsie i" : : : "memory");
   16c10:	b662      	cpsie	i

    return 0;
   16c12:	2000      	movs	r0, #0
   16c14:	e00d      	b.n	16c32 <hal_timer_stop+0x5c>
        TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   16c16:	6199      	str	r1, [r3, #24]
   16c18:	e7ef      	b.n	16bfa <hal_timer_stop+0x24>
                    nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
   16c1a:	691a      	ldr	r2, [r3, #16]
                if (bsptimer->tmr_rtc) {
   16c1c:	789b      	ldrb	r3, [r3, #2]
   16c1e:	b123      	cbz	r3, 16c2a <hal_timer_stop+0x54>
    rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   16c20:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   16c24:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   16c28:	e7f1      	b.n	16c0e <hal_timer_stop+0x38>
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   16c2a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   16c2e:	e7f9      	b.n	16c24 <hal_timer_stop+0x4e>
        return EINVAL;
   16c30:	2016      	movs	r0, #22
}
   16c32:	bd70      	pop	{r4, r5, r6, pc}

00016c34 <nrf52_wdt_irq_handler>:
/**@brief WDT interrupt handler. */
static void
nrf52_wdt_irq_handler(void)
{
    os_trace_isr_enter();
    if (NRF_WDT->INTENSET & WDT_INTENSET_TIMEOUT_Msk) {
   16c34:	4a07      	ldr	r2, [pc, #28]	; (16c54 <nrf52_wdt_irq_handler+0x20>)
{
   16c36:	b508      	push	{r3, lr}
    if (NRF_WDT->INTENSET & WDT_INTENSET_TIMEOUT_Msk) {
   16c38:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
   16c3c:	07db      	lsls	r3, r3, #31
   16c3e:	d507      	bpl.n	16c50 <nrf52_wdt_irq_handler+0x1c>
        NRF_WDT->EVENTS_TIMEOUT = 0;
   16c40:	2300      	movs	r3, #0
   16c42:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    assert(0);
   16c46:	4619      	mov	r1, r3
   16c48:	461a      	mov	r2, r3
   16c4a:	4618      	mov	r0, r3
   16c4c:	f7f5 fdd6 	bl	c7fc <__assert_func>
        nrf52_hal_wdt_default_handler();
    }
    os_trace_isr_exit();
}
   16c50:	bd08      	pop	{r3, pc}
   16c52:	bf00      	nop
   16c54:	40010000 	.word	0x40010000

00016c58 <hal_watchdog_init>:

int
hal_watchdog_init(uint32_t expire_msecs)
{
    NRF_WDT->CONFIG = WDT_CONFIG_SLEEP_Msk;
   16c58:	4a16      	ldr	r2, [pc, #88]	; (16cb4 <hal_watchdog_init+0x5c>)
{
   16c5a:	b508      	push	{r3, lr}
    NRF_WDT->CONFIG = WDT_CONFIG_SLEEP_Msk;
   16c5c:	2301      	movs	r3, #1
   16c5e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c

    if (expire_msecs >= 44739243) {
   16c62:	4b15      	ldr	r3, [pc, #84]	; (16cb8 <hal_watchdog_init+0x60>)
   16c64:	4298      	cmp	r0, r3
   16c66:	d905      	bls.n	16c74 <hal_watchdog_init+0x1c>
        /* maximum allowed time is near 12.5 hours! */
        assert(0);
   16c68:	2300      	movs	r3, #0
   16c6a:	461a      	mov	r2, r3
   16c6c:	4619      	mov	r1, r3
   16c6e:	4618      	mov	r0, r3
   16c70:	f7f5 fdc4 	bl	c7fc <__assert_func>
    } else {
        NRF_WDT->CRV = (expire_msecs * 32) + ((expire_msecs * 96) / 125);
   16c74:	2360      	movs	r3, #96	; 0x60
   16c76:	4343      	muls	r3, r0
   16c78:	217d      	movs	r1, #125	; 0x7d
   16c7a:	fbb3 f3f1 	udiv	r3, r3, r1
   16c7e:	eb03 1040 	add.w	r0, r3, r0, lsl #5
  uint32_t vectors = (uint32_t )SCB->VTOR;
   16c82:	4b0e      	ldr	r3, [pc, #56]	; (16cbc <hal_watchdog_init+0x64>)
   16c84:	f8c2 0504 	str.w	r0, [r2, #1284]	; 0x504
   16c88:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   16c8a:	490d      	ldr	r1, [pc, #52]	; (16cc0 <hal_watchdog_init+0x68>)
   16c8c:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   16c90:	4b0c      	ldr	r3, [pc, #48]	; (16cc4 <hal_watchdog_init+0x6c>)
   16c92:	21e0      	movs	r1, #224	; 0xe0
   16c94:	f883 1310 	strb.w	r1, [r3, #784]	; 0x310
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16c98:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   16c9c:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16ca0:	6019      	str	r1, [r3, #0]

    NVIC_SetVector(WDT_IRQn, (uint32_t) nrf52_wdt_irq_handler);
    NVIC_SetPriority(WDT_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_ClearPendingIRQ(WDT_IRQn);
    NVIC_EnableIRQ(WDT_IRQn);
    NRF_WDT->RREN |= 0x1;
   16ca2:	f8d2 3508 	ldr.w	r3, [r2, #1288]	; 0x508
   16ca6:	f043 0301 	orr.w	r3, r3, #1
   16caa:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508

    return (0);
}
   16cae:	2000      	movs	r0, #0
   16cb0:	bd08      	pop	{r3, pc}
   16cb2:	bf00      	nop
   16cb4:	40010000 	.word	0x40010000
   16cb8:	02aaaaaa 	.word	0x02aaaaaa
   16cbc:	e000ed00 	.word	0xe000ed00
   16cc0:	00016c35 	.word	0x00016c35
   16cc4:	e000e100 	.word	0xe000e100

00016cc8 <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
    NRF_WDT->INTENSET = WDT_INTENSET_TIMEOUT_Msk;
   16cc8:	4b02      	ldr	r3, [pc, #8]	; (16cd4 <hal_watchdog_enable+0xc>)
   16cca:	2201      	movs	r2, #1
   16ccc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NRF_WDT->TASKS_START = 1;
   16cd0:	601a      	str	r2, [r3, #0]
}
   16cd2:	4770      	bx	lr
   16cd4:	40010000 	.word	0x40010000

00016cd8 <hal_watchdog_tickle>:

void
hal_watchdog_tickle(void)
{
    NRF_WDT->RR[0] = WDT_RR_RR_Reload;
   16cd8:	4b02      	ldr	r3, [pc, #8]	; (16ce4 <hal_watchdog_tickle+0xc>)
   16cda:	4a03      	ldr	r2, [pc, #12]	; (16ce8 <hal_watchdog_tickle+0x10>)
   16cdc:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
}
   16ce0:	4770      	bx	lr
   16ce2:	bf00      	nop
   16ce4:	40010000 	.word	0x40010000
   16ce8:	6e524635 	.word	0x6e524635

00016cec <nrf52_periph_create>:
    int rc;

    (void)rc;

#if MYNEWT_VAL(TIMER_0)
    rc = hal_timer_init(0, NULL);
   16cec:	2100      	movs	r1, #0
#endif
}

void
nrf52_periph_create(void)
{
   16cee:	b508      	push	{r3, lr}
    rc = hal_timer_init(0, NULL);
   16cf0:	4608      	mov	r0, r1
   16cf2:	f7ff fe71 	bl	169d8 <hal_timer_init>
    assert(rc == 0);
   16cf6:	b128      	cbz	r0, 16d04 <nrf52_periph_create+0x18>
   16cf8:	2300      	movs	r3, #0
   16cfa:	461a      	mov	r2, r3
   16cfc:	4619      	mov	r1, r3
   16cfe:	4618      	mov	r0, r3
   16d00:	f7f5 fd7c 	bl	c7fc <__assert_func>
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
   16d04:	4805      	ldr	r0, [pc, #20]	; (16d1c <nrf52_periph_create+0x30>)
   16d06:	f7f5 ff8d 	bl	cc24 <os_cputime_init>
    assert(rc == 0);
   16d0a:	4602      	mov	r2, r0
   16d0c:	2800      	cmp	r0, #0
   16d0e:	d1f3      	bne.n	16cf8 <nrf52_periph_create+0xc>
    rc = hal_spi_init(0, (void *)&os_bsp_spi0m_cfg, HAL_SPI_TYPE_MASTER);
   16d10:	4903      	ldr	r1, [pc, #12]	; (16d20 <nrf52_periph_create+0x34>)
   16d12:	f7f5 fb6f 	bl	c3f4 <hal_spi_init>
    assert(rc == 0);
   16d16:	2800      	cmp	r0, #0
   16d18:	d1ee      	bne.n	16cf8 <nrf52_periph_create+0xc>
    nrf52_periph_create_trng();
    nrf52_periph_create_crypto();
    nrf52_periph_create_uart();
    nrf52_periph_create_i2c();
    nrf52_periph_create_spi();
}
   16d1a:	bd08      	pop	{r3, pc}
   16d1c:	000f4240 	.word	0x000f4240
   16d20:	00021dc0 	.word	0x00021dc0

00016d24 <nrng_config.part.0>:
 * @param nframes   Number of buffers defined to store the ranging data.
 *
 * @return void
 */
inline void
nrng_set_frames(struct nrng_instance * nrng, uint16_t nframes)
   16d24:	b508      	push	{r3, lr}
{
    assert(nframes <= nrng->nframes);
   16d26:	2300      	movs	r3, #0
   16d28:	461a      	mov	r2, r3
   16d2a:	4619      	mov	r1, r3
   16d2c:	4618      	mov	r0, r3
   16d2e:	f7f5 fd65 	bl	c7fc <__assert_func>

00016d32 <nrng_set_frames>:
{
   16d32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    assert(nframes <= nrng->nframes);
   16d36:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   16d3a:	428b      	cmp	r3, r1
{
   16d3c:	b08f      	sub	sp, #60	; 0x3c
   16d3e:	4604      	mov	r4, r0
   16d40:	460e      	mov	r6, r1
    assert(nframes <= nrng->nframes);
   16d42:	d201      	bcs.n	16d48 <nrng_set_frames+0x16>
   16d44:	f7ff ffee 	bl	16d24 <nrng_config.part.0>
    nrng_frame_t default_frame = {
   16d48:	2234      	movs	r2, #52	; 0x34
   16d4a:	2100      	movs	r1, #0
   16d4c:	a801      	add	r0, sp, #4
   16d4e:	f7f9 fa9c 	bl	1028a <memset>
        .PANID = 0xDECA,
        .fctrl = FCNTL_IEEE_RANGE_16,
        .code = UWB_DATA_CODE_DS_TWR_NRNG_INVALID
    };
    for (uint16_t i = 0; i < nframes; i++){
   16d52:	f104 07c8 	add.w	r7, r4, #200	; 0xc8
   16d56:	eb04 0486 	add.w	r4, r4, r6, lsl #2
   16d5a:	f104 06c8 	add.w	r6, r4, #200	; 0xc8
        nrng->frames[i] = (nrng_frame_t * ) malloc(sizeof(nrng_frame_t));
        assert(nrng->frames[i]);
        memcpy(nrng->frames[i], &default_frame, sizeof(nrng_frame_t));
   16d5e:	f648 0841 	movw	r8, #34881	; 0x8841
   16d62:	f64d 69ca 	movw	r9, #57034	; 0xdeca
    for (uint16_t i = 0; i < nframes; i++){
   16d66:	42b7      	cmp	r7, r6
   16d68:	d102      	bne.n	16d70 <nrng_set_frames+0x3e>
    }
}
   16d6a:	b00f      	add	sp, #60	; 0x3c
   16d6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        nrng->frames[i] = (nrng_frame_t * ) malloc(sizeof(nrng_frame_t));
   16d70:	2034      	movs	r0, #52	; 0x34
   16d72:	f7f9 f9f7 	bl	10164 <malloc>
   16d76:	f847 0b04 	str.w	r0, [r7], #4
   16d7a:	4603      	mov	r3, r0
        assert(nrng->frames[i]);
   16d7c:	b918      	cbnz	r0, 16d86 <nrng_set_frames+0x54>
   16d7e:	4602      	mov	r2, r0
   16d80:	4601      	mov	r1, r0
   16d82:	f7f5 fd3b 	bl	c7fc <__assert_func>
        memcpy(nrng->frames[i], &default_frame, sizeof(nrng_frame_t));
   16d86:	f44f 72a5 	mov.w	r2, #330	; 0x14a
   16d8a:	f8ad 8004 	strh.w	r8, [sp, #4]
   16d8e:	f8ad 9007 	strh.w	r9, [sp, #7]
   16d92:	f8ad 200d 	strh.w	r2, [sp, #13]
   16d96:	ad01      	add	r5, sp, #4
   16d98:	4604      	mov	r4, r0
   16d9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   16d9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   16d9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   16da0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   16da2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   16da4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   16da6:	682b      	ldr	r3, [r5, #0]
   16da8:	6023      	str	r3, [r4, #0]
    for (uint16_t i = 0; i < nframes; i++){
   16daa:	e7dc      	b.n	16d66 <nrng_set_frames+0x34>

00016dac <nrng_get_config>:
struct uwb_rng_config *
nrng_get_config(struct nrng_instance * nrng, uwb_dataframe_code_t code)
{
    struct rng_config_list * cfgs;

    if(!(SLIST_EMPTY(&nrng->rng_configs))){
   16dac:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
   16db0:	b133      	cbz	r3, 16dc0 <nrng_get_config+0x14>
        SLIST_FOREACH(cfgs, &nrng->rng_configs, next){
            if (cfgs != NULL && cfgs->rng_code == code) {
   16db2:	881a      	ldrh	r2, [r3, #0]
   16db4:	428a      	cmp	r2, r1
   16db6:	d101      	bne.n	16dbc <nrng_get_config+0x10>
                return cfgs->config;
   16db8:	6898      	ldr	r0, [r3, #8]
   16dba:	4770      	bx	lr
        SLIST_FOREACH(cfgs, &nrng->rng_configs, next){
   16dbc:	68db      	ldr	r3, [r3, #12]
   16dbe:	e7f7      	b.n	16db0 <nrng_get_config+0x4>
            }
        }
    }
    return &g_config;
   16dc0:	4800      	ldr	r0, [pc, #0]	; (16dc4 <nrng_get_config+0x18>)
}
   16dc2:	4770      	bx	lr
   16dc4:	20001574 	.word	0x20001574

00016dc8 <nrng_append_config>:
 * @param callbacks  callback instance.
 * @return void
 */
void
nrng_append_config(struct nrng_instance * nrng, struct rng_config_list *cfgs)
{
   16dc8:	b508      	push	{r3, lr}
    assert(nrng);
   16dca:	4603      	mov	r3, r0
   16dcc:	b918      	cbnz	r0, 16dd6 <nrng_append_config+0xe>
   16dce:	4602      	mov	r2, r0
   16dd0:	4601      	mov	r1, r0
   16dd2:	f7f5 fd13 	bl	c7fc <__assert_func>

    if(!(SLIST_EMPTY(&nrng->rng_configs))) {
   16dd6:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
   16dda:	b132      	cbz	r2, 16dea <nrng_append_config+0x22>
        struct rng_config_list * prev_cfgs = NULL;
        struct rng_config_list * cur_cfgs = NULL;
        SLIST_FOREACH(cur_cfgs, &nrng->rng_configs, next){
   16ddc:	4613      	mov	r3, r2
   16dde:	68d2      	ldr	r2, [r2, #12]
   16de0:	2a00      	cmp	r2, #0
   16de2:	d1fb      	bne.n	16ddc <nrng_append_config+0x14>
            prev_cfgs = cur_cfgs;
        }
        SLIST_INSERT_AFTER(prev_cfgs, cfgs, next);
   16de4:	60ca      	str	r2, [r1, #12]
   16de6:	60d9      	str	r1, [r3, #12]
    } else {
        SLIST_INSERT_HEAD(&nrng->rng_configs, cfgs, next);
    }
}
   16de8:	bd08      	pop	{r3, pc}
        SLIST_INSERT_HEAD(&nrng->rng_configs, cfgs, next);
   16dea:	60ca      	str	r2, [r1, #12]
   16dec:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
}
   16df0:	e7fa      	b.n	16de8 <nrng_append_config+0x20>

00016df2 <nrng_config>:
 *
 * @return struct uwb_dev_status
 */
struct uwb_dev_status
nrng_config(struct nrng_instance * nrng, struct uwb_rng_config * config)
{
   16df2:	b510      	push	{r4, lr}
    assert(config);
   16df4:	b909      	cbnz	r1, 16dfa <nrng_config+0x8>
   16df6:	f7ff ff95 	bl	16d24 <nrng_config.part.0>

    memcpy(&nrng->config, config, sizeof(struct uwb_rng_config));
   16dfa:	f100 03b0 	add.w	r3, r0, #176	; 0xb0
   16dfe:	f101 0210 	add.w	r2, r1, #16
   16e02:	f851 4b04 	ldr.w	r4, [r1], #4
   16e06:	f843 4b04 	str.w	r4, [r3], #4
   16e0a:	4291      	cmp	r1, r2
   16e0c:	d1f9      	bne.n	16e02 <nrng_config+0x10>
    return nrng->dev_inst->status;
   16e0e:	6803      	ldr	r3, [r0, #0]
}
   16e10:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
   16e14:	bd10      	pop	{r4, pc}
	...

00016e18 <nrng_init>:
{
   16e18:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   16e1c:	460e      	mov	r6, r1
   16e1e:	4690      	mov	r8, r2
   16e20:	461f      	mov	r7, r3
    assert(inst);
   16e22:	4605      	mov	r5, r0
   16e24:	b928      	cbnz	r0, 16e32 <nrng_init+0x1a>
   16e26:	2300      	movs	r3, #0
   16e28:	461a      	mov	r2, r3
   16e2a:	4619      	mov	r1, r3
   16e2c:	4618      	mov	r0, r3
   16e2e:	f7f5 fce5 	bl	c7fc <__assert_func>
    struct nrng_instance *nrng = (struct nrng_instance*)uwb_mac_find_cb_inst_ptr(inst, UWBEXT_NRNG);
   16e32:	210b      	movs	r1, #11
   16e34:	f7f1 fdea 	bl	8a0c <uwb_mac_find_cb_inst_ptr>
    if (nrng == NULL) {
   16e38:	4604      	mov	r4, r0
   16e3a:	b988      	cbnz	r0, 16e60 <nrng_init+0x48>
        nrng = (struct nrng_instance*) malloc(sizeof(struct nrng_instance) + nframes * sizeof(nrng_frame_t * ));
   16e3c:	f107 0032 	add.w	r0, r7, #50	; 0x32
   16e40:	0080      	lsls	r0, r0, #2
   16e42:	f7f9 f98f 	bl	10164 <malloc>
        assert(nrng);
   16e46:	4604      	mov	r4, r0
   16e48:	2800      	cmp	r0, #0
   16e4a:	d0ec      	beq.n	16e26 <nrng_init+0xe>
        memset(nrng, 0, sizeof(struct nrng_instance));
   16e4c:	22c8      	movs	r2, #200	; 0xc8
   16e4e:	2100      	movs	r1, #0
   16e50:	f7f9 fa1b 	bl	1028a <memset>
        nrng->status.selfmalloc = 1;
   16e54:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
   16e58:	f043 0301 	orr.w	r3, r3, #1
   16e5c:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
   16e60:	2101      	movs	r1, #1
   16e62:	f104 0064 	add.w	r0, r4, #100	; 0x64
   16e66:	f7f6 fbef 	bl	d648 <os_sem_init>
    assert(err == DPL_OK);
   16e6a:	2800      	cmp	r0, #0
   16e6c:	d1db      	bne.n	16e26 <nrng_init+0xe>
    nrng->nnodes = nnodes;
   16e6e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   16e72:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    nrng->idx = 0xFFFF;
   16e76:	f64f 73ff 	movw	r3, #65535	; 0xffff
    nrng->dev_inst = inst;
   16e7a:	6025      	str	r5, [r4, #0]
    nrng->nframes = nframes;
   16e7c:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
    nrng->device_type = type;
   16e80:	f884 80a8 	strb.w	r8, [r4, #168]	; 0xa8
    nrng->idx = 0xFFFF;
   16e84:	f8a4 30c0 	strh.w	r3, [r4, #192]	; 0xc0
    nrng->resp_count = nrng->t1_final_flag = 0;
   16e88:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
   16e8c:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
    nrng->seq_num = 0;
   16e90:	f884 0060 	strb.w	r0, [r4, #96]	; 0x60
    if (config != NULL ){
   16e94:	b11e      	cbz	r6, 16e9e <nrng_init+0x86>
        nrng_config(nrng, config);
   16e96:	4631      	mov	r1, r6
   16e98:	4620      	mov	r0, r4
   16e9a:	f7ff ffaa 	bl	16df2 <nrng_config>
    nrng->cbs = (struct uwb_mac_interface){
   16e9e:	f104 036c 	add.w	r3, r4, #108	; 0x6c
   16ea2:	223c      	movs	r2, #60	; 0x3c
   16ea4:	4618      	mov	r0, r3
   16ea6:	2100      	movs	r1, #0
   16ea8:	f7f9 f9ef 	bl	1028a <memset>
   16eac:	260b      	movs	r6, #11
    uwb_mac_append_interface(inst, &nrng->cbs);
   16eae:	4601      	mov	r1, r0
    nrng->cbs = (struct uwb_mac_interface){
   16eb0:	f8a4 606e 	strh.w	r6, [r4, #110]	; 0x6e
    uwb_mac_append_interface(inst, &nrng->cbs);
   16eb4:	4628      	mov	r0, r5
    nrng->cbs = (struct uwb_mac_interface){
   16eb6:	6724      	str	r4, [r4, #112]	; 0x70
    int rc = stats_init(
   16eb8:	1d25      	adds	r5, r4, #4
    uwb_mac_append_interface(inst, &nrng->cbs);
   16eba:	f7f1 fd5d 	bl	8978 <uwb_mac_append_interface>
    int rc = stats_init(
   16ebe:	4b09      	ldr	r3, [pc, #36]	; (16ee4 <nrng_init+0xcc>)
   16ec0:	9600      	str	r6, [sp, #0]
   16ec2:	4632      	mov	r2, r6
   16ec4:	2104      	movs	r1, #4
   16ec6:	4628      	mov	r0, r5
   16ec8:	f7fc fa38 	bl	1333c <stats_init>
        rc |= stats_register("nrng", STATS_HDR(nrng->stat));
   16ecc:	4629      	mov	r1, r5
    int rc = stats_init(
   16ece:	4606      	mov	r6, r0
        rc |= stats_register("nrng", STATS_HDR(nrng->stat));
   16ed0:	4805      	ldr	r0, [pc, #20]	; (16ee8 <nrng_init+0xd0>)
   16ed2:	f7fc fab7 	bl	13444 <stats_register>
    assert(rc == 0);
   16ed6:	ea56 0300 	orrs.w	r3, r6, r0
   16eda:	d1a4      	bne.n	16e26 <nrng_init+0xe>
}
   16edc:	4620      	mov	r0, r4
   16ede:	b002      	add	sp, #8
   16ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16ee4:	00021e22 	.word	0x00021e22
   16ee8:	0002202e 	.word	0x0002202e

00016eec <nrng_pkg_init>:


void nrng_pkg_init(void)
{
   16eec:	b507      	push	{r0, r1, r2, lr}
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    printf("{\"utime\": %lu,\"msg\": \"nrng_pkg_init\"}\n",os_cputime_ticks_to_usecs(os_cputime_get32()));
   16eee:	f7f5 feaf 	bl	cc50 <os_cputime_get32>
   16ef2:	4601      	mov	r1, r0
   16ef4:	4809      	ldr	r0, [pc, #36]	; (16f1c <nrng_pkg_init+0x30>)
   16ef6:	f7f9 fca1 	bl	1083c <printf>
#endif

    struct nrng_instance *nrng;
    struct uwb_dev *udev;
#if MYNEWT_VAL(UWB_DEVICE_0)
    udev = uwb_dev_idx_lookup(0);
   16efa:	2000      	movs	r0, #0
   16efc:	f7f1 fd12 	bl	8924 <uwb_dev_idx_lookup>
    nrng = nrng_init(udev, &g_config, (nrng_device_type_t) MYNEWT_VAL(NRNG_DEVICE_TYPE), MYNEWT_VAL(NRNG_NFRAMES), MYNEWT_VAL(NRNG_NNODES));
   16f00:	2310      	movs	r3, #16
   16f02:	9300      	str	r3, [sp, #0]
   16f04:	4906      	ldr	r1, [pc, #24]	; (16f20 <nrng_pkg_init+0x34>)
   16f06:	2320      	movs	r3, #32
   16f08:	2201      	movs	r2, #1
   16f0a:	f7ff ff85 	bl	16e18 <nrng_init>
    nrng_set_frames(nrng, MYNEWT_VAL(NRNG_NFRAMES));
   16f0e:	2120      	movs	r1, #32
    udev = uwb_dev_idx_lookup(2);
    nrng = nrng_init(udev, &g_config, (nrng_device_type_t) MYNEWT_VAL(NRNG_DEVICE_TYPE), MYNEWT_VAL(NRNG_NFRAMES), MYNEWT_VAL(NRNG_NNODES));
    nrng_set_frames(nrng, MYNEWT_VAL(NRNG_NFRAMES));
#endif

}
   16f10:	b003      	add	sp, #12
   16f12:	f85d eb04 	ldr.w	lr, [sp], #4
    nrng_set_frames(nrng, MYNEWT_VAL(NRNG_NFRAMES));
   16f16:	f7ff bf0c 	b.w	16d32 <nrng_set_frames>
   16f1a:	bf00      	nop
   16f1c:	00021dc4 	.word	0x00021dc4
   16f20:	20001574 	.word	0x20001574
   16f24:	00000000 	.word	0x00000000

00016f28 <usecs_to_response>:
 * @param duration     Time delay between request.
 *
 * @return ret of uint32_t constant
 */
uint32_t
usecs_to_response(struct uwb_dev * inst, uint16_t nslots, struct uwb_rng_config * config, uint32_t duration){
   16f28:	b538      	push	{r3, r4, r5, lr}
    uint32_t ret = nslots * ( duration + (uint32_t) uwb_dwt_usecs_to_usecs(config->tx_guard_delay));
   16f2a:	6890      	ldr	r0, [r2, #8]
usecs_to_response(struct uwb_dev * inst, uint16_t nslots, struct uwb_rng_config * config, uint32_t duration){
   16f2c:	461d      	mov	r5, r3
   16f2e:	460c      	mov	r4, r1
    uint32_t ret = nslots * ( duration + (uint32_t) uwb_dwt_usecs_to_usecs(config->tx_guard_delay));
   16f30:	f007 fbc8 	bl	1e6c4 <__aeabi_ui2d>
   16f34:	a304      	add	r3, pc, #16	; (adr r3, 16f48 <usecs_to_response+0x20>)
   16f36:	e9d3 2300 	ldrd	r2, r3, [r3]
   16f3a:	f007 fc3d 	bl	1e7b8 <__aeabi_dmul>
   16f3e:	f007 ff13 	bl	1ed68 <__aeabi_d2uiz>
   16f42:	4428      	add	r0, r5
    return ret;
}
   16f44:	4360      	muls	r0, r4
   16f46:	bd38      	pop	{r3, r4, r5, pc}
   16f48:	90690691 	.word	0x90690691
   16f4c:	3ff06906 	.word	0x3ff06906

00016f50 <uwb_rng_tof_to_meters>:
 *
 * @return range in meters
 */
dpl_float64_t
uwb_rng_tof_to_meters(dpl_float64_t ToF)
{
   16f50:	b538      	push	{r3, r4, r5, lr}
   16f52:	ec55 4b10 	vmov	r4, r5, d0
    if (DPL_FLOAT64_ISNAN(ToF)) {
   16f56:	ee10 2a10 	vmov	r2, s0
   16f5a:	ee10 0a10 	vmov	r0, s0
   16f5e:	462b      	mov	r3, r5
   16f60:	4629      	mov	r1, r5
   16f62:	f007 fec3 	bl	1ecec <__aeabi_dcmpun>
   16f66:	b948      	cbnz	r0, 16f7c <uwb_rng_tof_to_meters+0x2c>
        return DPL_FLOAT64_NAN();
    }
    /* ToF * (299792458.0l/1.000293l) * (1.0/499.2e6/128.0) */
    dpl_float64_t tmp = DPL_FLOAT64_INIT((299792458.0l/1.000293l) * (1.0/499.2e6/128.0));
    return DPL_FLOAT64_MUL(ToF, tmp);
   16f68:	a309      	add	r3, pc, #36	; (adr r3, 16f90 <uwb_rng_tof_to_meters+0x40>)
   16f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
   16f6e:	4620      	mov	r0, r4
   16f70:	4629      	mov	r1, r5
   16f72:	f007 fc21 	bl	1e7b8 <__aeabi_dmul>
   16f76:	ec41 0b10 	vmov	d0, r0, r1
}
   16f7a:	bd38      	pop	{r3, r4, r5, pc}
        return DPL_FLOAT64_NAN();
   16f7c:	ed9f 0b02 	vldr	d0, [pc, #8]	; 16f88 <uwb_rng_tof_to_meters+0x38>
   16f80:	e7fb      	b.n	16f7a <uwb_rng_tof_to_meters+0x2a>
   16f82:	bf00      	nop
   16f84:	f3af 8000 	nop.w
   16f88:	00000000 	.word	0x00000000
   16f8c:	7ff80000 	.word	0x7ff80000
   16f90:	e57d514d 	.word	0xe57d514d
   16f94:	3f73363a 	.word	0x3f73363a

00016f98 <calc_tof_ss>:

dpl_float64_t
calc_tof_ss(uint32_t response_timestamp, uint32_t request_timestamp,
            uint64_t transmission_timestamp,
            uint64_t reception_timestamp,  dpl_float64_t skew)
{
   16f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

    T1R = (response_timestamp - request_timestamp);
    T1r = (transmission_timestamp - reception_timestamp) & MASK32;
    tmpf = DPL_FLOAT64_MUL(DPL_FLOAT64_U64_TO_F64(T1r),
                                DPL_FLOAT64_SUB(DPL_FLOAT64_INIT(1.0), skew));
    ToF = DPL_FLOAT64_SUB(DPL_FLOAT64_U64_TO_F64(T1R), tmpf);
   16f9c:	1a40      	subs	r0, r0, r1
{
   16f9e:	ec59 8b10 	vmov	r8, r9, d0
   16fa2:	4614      	mov	r4, r2
    ToF = DPL_FLOAT64_SUB(DPL_FLOAT64_U64_TO_F64(T1R), tmpf);
   16fa4:	f007 fb8e 	bl	1e6c4 <__aeabi_ui2d>
{
   16fa8:	9d08      	ldr	r5, [sp, #32]
    ToF = DPL_FLOAT64_SUB(DPL_FLOAT64_U64_TO_F64(T1R), tmpf);
   16faa:	4606      	mov	r6, r0
   16fac:	460f      	mov	r7, r1
    T1r = (transmission_timestamp - reception_timestamp) & MASK32;
   16fae:	1b60      	subs	r0, r4, r5
    tmpf = DPL_FLOAT64_MUL(DPL_FLOAT64_U64_TO_F64(T1r),
   16fb0:	2100      	movs	r1, #0
   16fb2:	f007 fbcb 	bl	1e74c <__aeabi_ul2d>
   16fb6:	4642      	mov	r2, r8
   16fb8:	4604      	mov	r4, r0
   16fba:	460d      	mov	r5, r1
   16fbc:	464b      	mov	r3, r9
   16fbe:	490c      	ldr	r1, [pc, #48]	; (16ff0 <calc_tof_ss+0x58>)
   16fc0:	2000      	movs	r0, #0
   16fc2:	f007 fa41 	bl	1e448 <__aeabi_dsub>
   16fc6:	4602      	mov	r2, r0
   16fc8:	460b      	mov	r3, r1
   16fca:	4620      	mov	r0, r4
   16fcc:	4629      	mov	r1, r5
   16fce:	f007 fbf3 	bl	1e7b8 <__aeabi_dmul>
   16fd2:	4602      	mov	r2, r0
   16fd4:	460b      	mov	r3, r1
    ToF = DPL_FLOAT64_SUB(DPL_FLOAT64_U64_TO_F64(T1R), tmpf);
   16fd6:	4630      	mov	r0, r6
   16fd8:	4639      	mov	r1, r7
   16fda:	f007 fa35 	bl	1e448 <__aeabi_dsub>
    ToF = DPL_FLOAT64_DIV(ToF, DPL_FLOAT64_INIT(2.0));
   16fde:	4b05      	ldr	r3, [pc, #20]	; (16ff4 <calc_tof_ss+0x5c>)
   16fe0:	2200      	movs	r2, #0
   16fe2:	f007 fbe9 	bl	1e7b8 <__aeabi_dmul>

    return ToF;
}
   16fe6:	ec41 0b10 	vmov	d0, r0, r1
   16fea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   16fee:	bf00      	nop
   16ff0:	3ff00000 	.word	0x3ff00000
   16ff4:	3fe00000 	.word	0x3fe00000

00016ff8 <calc_tof_ds>:
dpl_float64_t
calc_tof_ds(uint32_t first_response_timestamp, uint32_t first_request_timestamp,
            uint64_t first_transmission_timestamp, uint64_t first_reception_timestamp,
            uint32_t response_timestamp, uint32_t request_timestamp,
            uint64_t transmission_timestamp, uint64_t reception_timestamp)
{
   16ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dpl_float64_t ToF = DPL_FLOAT64_I32_TO_F64(0);
    uint64_t T1R, T1r, T2R, T2r;
    int64_t nom, denom;

    T1R = (first_response_timestamp - first_request_timestamp);
   16ffa:	1a41      	subs	r1, r0, r1
    T1r = (first_transmission_timestamp  - first_reception_timestamp) & MASK32;
    T2R = (response_timestamp - request_timestamp);
   16ffc:	e9dd 3008 	ldrd	r3, r0, [sp, #32]
{
   17000:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   17002:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    T1r = (first_transmission_timestamp  - first_reception_timestamp) & MASK32;
   17004:	9d06      	ldr	r5, [sp, #24]
    T2R = (response_timestamp - request_timestamp);
   17006:	1a1b      	subs	r3, r3, r0
    T2r = (transmission_timestamp - reception_timestamp) & MASK32;
   17008:	1ba0      	subs	r0, r4, r6
    T1r = (first_transmission_timestamp  - first_reception_timestamp) & MASK32;
   1700a:	1b52      	subs	r2, r2, r5
    nom = T1R * T2R  - T1r * T2r;
    denom = T1R + T2R  + T1r + T2r;
   1700c:	181c      	adds	r4, r3, r0
    T1r = (first_transmission_timestamp  - first_reception_timestamp) & MASK32;
   1700e:	f04f 0500 	mov.w	r5, #0
    denom = T1R + T2R  + T1r + T2r;
   17012:	416d      	adcs	r5, r5
   17014:	18a4      	adds	r4, r4, r2
   17016:	f145 0500 	adc.w	r5, r5, #0
   1701a:	1864      	adds	r4, r4, r1
   1701c:	f145 0500 	adc.w	r5, r5, #0

    if (denom == 0) {
   17020:	ea54 0605 	orrs.w	r6, r4, r5
   17024:	d017      	beq.n	17056 <calc_tof_ds+0x5e>
    nom = T1R * T2R  - T1r * T2r;
   17026:	fba1 3103 	umull	r3, r1, r1, r3
   1702a:	fba2 0200 	umull	r0, r2, r2, r0
   1702e:	1a18      	subs	r0, r3, r0
   17030:	eb61 0102 	sbc.w	r1, r1, r2
        return DPL_FLOAT64_NAN();
    }

    ToF = DPL_FLOAT64_DIV(DPL_FLOAT64_I64_TO_F64(nom),
   17034:	f007 fb92 	bl	1e75c <__aeabi_l2d>
   17038:	4606      	mov	r6, r0
   1703a:	460f      	mov	r7, r1
   1703c:	4620      	mov	r0, r4
   1703e:	4629      	mov	r1, r5
   17040:	f007 fb8c 	bl	1e75c <__aeabi_l2d>
   17044:	4602      	mov	r2, r0
   17046:	460b      	mov	r3, r1
   17048:	4630      	mov	r0, r6
   1704a:	4639      	mov	r1, r7
   1704c:	f007 fcde 	bl	1ea0c <__aeabi_ddiv>
   17050:	ec41 0b10 	vmov	d0, r0, r1
                                                DPL_FLOAT64_I64_TO_F64(denom));
    return ToF;
}
   17054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return DPL_FLOAT64_NAN();
   17056:	ed9f 0b02 	vldr	d0, [pc, #8]	; 17060 <calc_tof_ds+0x68>
   1705a:	e7fb      	b.n	17054 <calc_tof_ds+0x5c>
   1705c:	f3af 8000 	nop.w
   17060:	00000000 	.word	0x00000000
   17064:	7ff80000 	.word	0x7ff80000

00017068 <timescale_QUpdate>:
   17068:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1706c:	4614      	mov	r4, r2
   1706e:	461d      	mov	r5, r3
   17070:	460f      	mov	r7, r1
   17072:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   17074:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   17078:	4682      	mov	sl, r0
   1707a:	4629      	mov	r1, r5
   1707c:	4620      	mov	r0, r4
   1707e:	f007 fb9b 	bl	1e7b8 <__aeabi_dmul>
   17082:	4622      	mov	r2, r4
   17084:	462b      	mov	r3, r5
   17086:	f007 fb97 	bl	1e7b8 <__aeabi_dmul>
   1708a:	2200      	movs	r2, #0
   1708c:	4b4f      	ldr	r3, [pc, #316]	; (171cc <timescale_QUpdate+0x164>)
   1708e:	f007 fcbd 	bl	1ea0c <__aeabi_ddiv>
   17092:	e9d7 2300 	ldrd	r2, r3, [r7]
   17096:	f007 f9d9 	bl	1e44c <__adddf3>
   1709a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   1709e:	4680      	mov	r8, r0
   170a0:	4689      	mov	r9, r1
   170a2:	4620      	mov	r0, r4
   170a4:	4629      	mov	r1, r5
   170a6:	f007 fb87 	bl	1e7b8 <__aeabi_dmul>
   170aa:	4622      	mov	r2, r4
   170ac:	462b      	mov	r3, r5
   170ae:	f007 fb83 	bl	1e7b8 <__aeabi_dmul>
   170b2:	4622      	mov	r2, r4
   170b4:	462b      	mov	r3, r5
   170b6:	f007 fb7f 	bl	1e7b8 <__aeabi_dmul>
   170ba:	4622      	mov	r2, r4
   170bc:	462b      	mov	r3, r5
   170be:	f007 fb7b 	bl	1e7b8 <__aeabi_dmul>
   170c2:	2200      	movs	r2, #0
   170c4:	4b42      	ldr	r3, [pc, #264]	; (171d0 <timescale_QUpdate+0x168>)
   170c6:	f007 fca1 	bl	1ea0c <__aeabi_ddiv>
   170ca:	4602      	mov	r2, r0
   170cc:	460b      	mov	r3, r1
   170ce:	4640      	mov	r0, r8
   170d0:	4649      	mov	r1, r9
   170d2:	f007 f9bb 	bl	1e44c <__adddf3>
   170d6:	e9c6 0100 	strd	r0, r1, [r6]
   170da:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   170de:	4620      	mov	r0, r4
   170e0:	4629      	mov	r1, r5
   170e2:	f007 fb69 	bl	1e7b8 <__aeabi_dmul>
   170e6:	4622      	mov	r2, r4
   170e8:	462b      	mov	r3, r5
   170ea:	f007 fb65 	bl	1e7b8 <__aeabi_dmul>
   170ee:	4622      	mov	r2, r4
   170f0:	462b      	mov	r3, r5
   170f2:	f007 fb61 	bl	1e7b8 <__aeabi_dmul>
   170f6:	2200      	movs	r2, #0
   170f8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   170fc:	f007 fb5c 	bl	1e7b8 <__aeabi_dmul>
   17100:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   17104:	4680      	mov	r8, r0
   17106:	4689      	mov	r9, r1
   17108:	4620      	mov	r0, r4
   1710a:	4629      	mov	r1, r5
   1710c:	f007 fb54 	bl	1e7b8 <__aeabi_dmul>
   17110:	2200      	movs	r2, #0
   17112:	4b30      	ldr	r3, [pc, #192]	; (171d4 <timescale_QUpdate+0x16c>)
   17114:	f007 fb50 	bl	1e7b8 <__aeabi_dmul>
   17118:	4602      	mov	r2, r0
   1711a:	460b      	mov	r3, r1
   1711c:	4640      	mov	r0, r8
   1711e:	4649      	mov	r1, r9
   17120:	f007 f994 	bl	1e44c <__adddf3>
   17124:	4680      	mov	r8, r0
   17126:	4689      	mov	r9, r1
   17128:	e9c6 8902 	strd	r8, r9, [r6, #8]
   1712c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   17130:	4620      	mov	r0, r4
   17132:	4629      	mov	r1, r5
   17134:	f007 fb40 	bl	1e7b8 <__aeabi_dmul>
   17138:	4622      	mov	r2, r4
   1713a:	462b      	mov	r3, r5
   1713c:	f007 fb3c 	bl	1e7b8 <__aeabi_dmul>
   17140:	2200      	movs	r2, #0
   17142:	4b25      	ldr	r3, [pc, #148]	; (171d8 <timescale_QUpdate+0x170>)
   17144:	f007 fc62 	bl	1ea0c <__aeabi_ddiv>
   17148:	f8ba 3000 	ldrh.w	r3, [sl]
   1714c:	9301      	str	r3, [sp, #4]
   1714e:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
   17152:	eb06 0a0b 	add.w	sl, r6, fp
   17156:	e9c6 0104 	strd	r0, r1, [r6, #16]
   1715a:	e9ca 8900 	strd	r8, r9, [sl]
   1715e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   17162:	4620      	mov	r0, r4
   17164:	4629      	mov	r1, r5
   17166:	f007 fb27 	bl	1e7b8 <__aeabi_dmul>
   1716a:	4622      	mov	r2, r4
   1716c:	462b      	mov	r3, r5
   1716e:	f007 fb23 	bl	1e7b8 <__aeabi_dmul>
   17172:	2200      	movs	r2, #0
   17174:	4b15      	ldr	r3, [pc, #84]	; (171cc <timescale_QUpdate+0x164>)
   17176:	f007 fc49 	bl	1ea0c <__aeabi_ddiv>
   1717a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1717e:	f007 f965 	bl	1e44c <__adddf3>
   17182:	e9ca 0102 	strd	r0, r1, [sl, #8]
   17186:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   1718a:	4620      	mov	r0, r4
   1718c:	4629      	mov	r1, r5
   1718e:	f007 fb13 	bl	1e7b8 <__aeabi_dmul>
   17192:	2200      	movs	r2, #0
   17194:	4b0f      	ldr	r3, [pc, #60]	; (171d4 <timescale_QUpdate+0x16c>)
   17196:	f007 fb0f 	bl	1e7b8 <__aeabi_dmul>
   1719a:	f10b 0810 	add.w	r8, fp, #16
   1719e:	44b0      	add	r8, r6
   171a0:	e9c8 0100 	strd	r0, r1, [r8]
   171a4:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
   171a8:	44da      	add	sl, fp
   171aa:	e9ca 2300 	strd	r2, r3, [sl]
   171ae:	9901      	ldr	r1, [sp, #4]
   171b0:	e9d8 2300 	ldrd	r2, r3, [r8]
   171b4:	eb06 1601 	add.w	r6, r6, r1, lsl #4
   171b8:	e9c6 2302 	strd	r2, r3, [r6, #8]
   171bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   171c0:	e9c6 2304 	strd	r2, r3, [r6, #16]
   171c4:	b003      	add	sp, #12
   171c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   171ca:	bf00      	nop
   171cc:	40080000 	.word	0x40080000
   171d0:	40340000 	.word	0x40340000
   171d4:	3fe00000 	.word	0x3fe00000
   171d8:	40180000 	.word	0x40180000

000171dc <timescale_JofAx>:
   171dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   171e0:	ec55 4b10 	vmov	r4, r5, d0
   171e4:	4f1c      	ldr	r7, [pc, #112]	; (17258 <timescale_JofAx+0x7c>)
   171e6:	b092      	sub	sp, #72	; 0x48
   171e8:	2600      	movs	r6, #0
   171ea:	ee10 2a10 	vmov	r2, s0
   171ee:	462b      	mov	r3, r5
   171f0:	4680      	mov	r8, r0
   171f2:	4629      	mov	r1, r5
   171f4:	ee10 0a10 	vmov	r0, s0
   171f8:	ed8d 0b02 	vstr	d0, [sp, #8]
   171fc:	e9cd 6700 	strd	r6, r7, [sp]
   17200:	f007 fada 	bl	1e7b8 <__aeabi_dmul>
   17204:	2200      	movs	r2, #0
   17206:	4b15      	ldr	r3, [pc, #84]	; (1725c <timescale_JofAx+0x80>)
   17208:	f007 fad6 	bl	1e7b8 <__aeabi_dmul>
   1720c:	e9cd 6708 	strd	r6, r7, [sp, #32]
   17210:	e9cd 0104 	strd	r0, r1, [sp, #16]
   17214:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   17218:	f8d8 104c 	ldr.w	r1, [r8, #76]	; 0x4c
   1721c:	2300      	movs	r3, #0
   1721e:	2200      	movs	r2, #0
   17220:	e9cd 2306 	strd	r2, r3, [sp, #24]
   17224:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
   17228:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   1722c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   17230:	f101 0518 	add.w	r5, r1, #24
   17234:	2300      	movs	r3, #0
   17236:	eb0d 0003 	add.w	r0, sp, r3
   1723a:	185a      	adds	r2, r3, r1
   1723c:	18ec      	adds	r4, r5, r3
   1723e:	e8f0 6702 	ldrd	r6, r7, [r0], #8
   17242:	e8e2 6702 	strd	r6, r7, [r2], #8
   17246:	42a2      	cmp	r2, r4
   17248:	d1f9      	bne.n	1723e <timescale_JofAx+0x62>
   1724a:	3318      	adds	r3, #24
   1724c:	2b48      	cmp	r3, #72	; 0x48
   1724e:	d1f2      	bne.n	17236 <timescale_JofAx+0x5a>
   17250:	b012      	add	sp, #72	; 0x48
   17252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17256:	bf00      	nop
   17258:	3ff00000 	.word	0x3ff00000
   1725c:	3fe00000 	.word	0x3fe00000

00017260 <timescale_Aofx>:
   17260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17264:	4606      	mov	r6, r0
   17266:	b089      	sub	sp, #36	; 0x24
   17268:	2218      	movs	r2, #24
   1726a:	2100      	movs	r1, #0
   1726c:	a802      	add	r0, sp, #8
   1726e:	f7f9 f80c 	bl	1028a <memset>
   17272:	68b5      	ldr	r5, [r6, #8]
   17274:	6cf6      	ldr	r6, [r6, #76]	; 0x4c
   17276:	f106 0348 	add.w	r3, r6, #72	; 0x48
   1727a:	ac02      	add	r4, sp, #8
   1727c:	9301      	str	r3, [sp, #4]
   1727e:	f105 0918 	add.w	r9, r5, #24
   17282:	e8f4 ab02 	ldrd	sl, fp, [r4], #8
   17286:	462f      	mov	r7, r5
   17288:	46b0      	mov	r8, r6
   1728a:	e8f7 2302 	ldrd	r2, r3, [r7], #8
   1728e:	e8f8 0102 	ldrd	r0, r1, [r8], #8
   17292:	f007 fa91 	bl	1e7b8 <__aeabi_dmul>
   17296:	4602      	mov	r2, r0
   17298:	460b      	mov	r3, r1
   1729a:	4650      	mov	r0, sl
   1729c:	4659      	mov	r1, fp
   1729e:	f007 f8d5 	bl	1e44c <__adddf3>
   172a2:	454f      	cmp	r7, r9
   172a4:	4682      	mov	sl, r0
   172a6:	468b      	mov	fp, r1
   172a8:	d1ef      	bne.n	1728a <timescale_Aofx+0x2a>
   172aa:	9b01      	ldr	r3, [sp, #4]
   172ac:	3618      	adds	r6, #24
   172ae:	429e      	cmp	r6, r3
   172b0:	e944 ab02 	strd	sl, fp, [r4, #-8]
   172b4:	d1e5      	bne.n	17282 <timescale_Aofx+0x22>
   172b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   172ba:	e9c5 2300 	strd	r2, r3, [r5]
   172be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   172c2:	e9c5 2302 	strd	r2, r3, [r5, #8]
   172c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   172ca:	e9c5 2304 	strd	r2, r3, [r5, #16]
   172ce:	b009      	add	sp, #36	; 0x24
   172d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   172d4:	0000      	movs	r0, r0
	...

000172d8 <timescale_innovation>:
   172d8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   172dc:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
   172de:	88aa      	ldrh	r2, [r5, #4]
   172e0:	f3c2 1280 	ubfx	r2, r2, #6, #1
   172e4:	4604      	mov	r4, r0
   172e6:	b37a      	cbz	r2, 17348 <timescale_innovation+0x70>
   172e8:	6946      	ldr	r6, [r0, #20]
   172ea:	4b37      	ldr	r3, [pc, #220]	; (173c8 <timescale_innovation+0xf0>)
   172ec:	ed96 0b00 	vldr	d0, [r6]
   172f0:	2200      	movs	r2, #0
   172f2:	ec51 0b10 	vmov	r0, r1, d0
   172f6:	ed8d 0b00 	vstr	d0, [sp]
   172fa:	f007 fccf 	bl	1ec9c <__aeabi_dcmplt>
   172fe:	f04f 0701 	mov.w	r7, #1
   17302:	ed9d 0b00 	vldr	d0, [sp]
   17306:	b900      	cbnz	r0, 1730a <timescale_innovation+0x32>
   17308:	4607      	mov	r7, r0
   1730a:	792b      	ldrb	r3, [r5, #4]
   1730c:	f367 1345 	bfi	r3, r7, #5, #1
   17310:	712b      	strb	r3, [r5, #4]
   17312:	88ab      	ldrh	r3, [r5, #4]
   17314:	069b      	lsls	r3, r3, #26
   17316:	d509      	bpl.n	1732c <timescale_innovation+0x54>
   17318:	ed9f 1b29 	vldr	d1, [pc, #164]	; 173c0 <timescale_innovation+0xe8>
   1731c:	f008 f848 	bl	1f3b0 <fmod>
   17320:	792b      	ldrb	r3, [r5, #4]
   17322:	ed86 0b00 	vstr	d0, [r6]
   17326:	f36f 1386 	bfc	r3, #6, #1
   1732a:	712b      	strb	r3, [r5, #4]
   1732c:	f8df 909c 	ldr.w	r9, [pc, #156]	; 173cc <timescale_innovation+0xf4>
   17330:	f04f 0a00 	mov.w	sl, #0
   17334:	f04f 0800 	mov.w	r8, #0
   17338:	8862      	ldrh	r2, [r4, #2]
   1733a:	fa1f f38a 	uxth.w	r3, sl
   1733e:	429a      	cmp	r2, r3
   17340:	d806      	bhi.n	17350 <timescale_innovation+0x78>
   17342:	b002      	add	sp, #8
   17344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17348:	792b      	ldrb	r3, [r5, #4]
   1734a:	f362 1345 	bfi	r3, r2, #5, #1
   1734e:	e7ec      	b.n	1732a <timescale_innovation+0x52>
   17350:	6963      	ldr	r3, [r4, #20]
   17352:	fa1f f58a 	uxth.w	r5, sl
   17356:	00ed      	lsls	r5, r5, #3
   17358:	1959      	adds	r1, r3, r5
   1735a:	6923      	ldr	r3, [r4, #16]
   1735c:	442b      	add	r3, r5
   1735e:	e9d3 2300 	ldrd	r2, r3, [r3]
   17362:	e9d1 0100 	ldrd	r0, r1, [r1]
   17366:	f007 f86f 	bl	1e448 <__aeabi_dsub>
   1736a:	69a3      	ldr	r3, [r4, #24]
   1736c:	442b      	add	r3, r5
   1736e:	e9c3 0100 	strd	r0, r1, [r3]
   17372:	ec41 0b10 	vmov	d0, r0, r1
   17376:	f007 ff8f 	bl	1f298 <fabs>
   1737a:	2200      	movs	r2, #0
   1737c:	4b12      	ldr	r3, [pc, #72]	; (173c8 <timescale_innovation+0xf0>)
   1737e:	ec51 0b10 	vmov	r0, r1, d0
   17382:	f007 fca9 	bl	1ecd8 <__aeabi_dcmpgt>
   17386:	b190      	cbz	r0, 173ae <timescale_innovation+0xd6>
   17388:	69a3      	ldr	r3, [r4, #24]
   1738a:	441d      	add	r5, r3
   1738c:	e9d5 6700 	ldrd	r6, r7, [r5]
   17390:	2200      	movs	r2, #0
   17392:	2300      	movs	r3, #0
   17394:	4630      	mov	r0, r6
   17396:	4639      	mov	r1, r7
   17398:	f007 fc80 	bl	1ec9c <__aeabi_dcmplt>
   1739c:	4642      	mov	r2, r8
   1739e:	464b      	mov	r3, r9
   173a0:	b140      	cbz	r0, 173b4 <timescale_innovation+0xdc>
   173a2:	4630      	mov	r0, r6
   173a4:	4639      	mov	r1, r7
   173a6:	f007 f851 	bl	1e44c <__adddf3>
   173aa:	e9c5 0100 	strd	r0, r1, [r5]
   173ae:	f10a 0a01 	add.w	sl, sl, #1
   173b2:	e7c1      	b.n	17338 <timescale_innovation+0x60>
   173b4:	4630      	mov	r0, r6
   173b6:	4639      	mov	r1, r7
   173b8:	f007 f846 	bl	1e448 <__aeabi_dsub>
   173bc:	e7f5      	b.n	173aa <timescale_innovation+0xd2>
   173be:	bf00      	nop
   173c0:	00000000 	.word	0x00000000
   173c4:	42700000 	.word	0x42700000
   173c8:	42600000 	.word	0x42600000
   173cc:	42700000 	.word	0x42700000

000173d0 <timescale_constraints>:
   173d0:	b513      	push	{r0, r1, r4, lr}
   173d2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   173d4:	889b      	ldrh	r3, [r3, #4]
   173d6:	065b      	lsls	r3, r3, #25
   173d8:	d513      	bpl.n	17402 <timescale_constraints+0x32>
   173da:	6884      	ldr	r4, [r0, #8]
   173dc:	4b0c      	ldr	r3, [pc, #48]	; (17410 <timescale_constraints+0x40>)
   173de:	ed94 0b00 	vldr	d0, [r4]
   173e2:	2200      	movs	r2, #0
   173e4:	ec51 0b10 	vmov	r0, r1, d0
   173e8:	ed8d 0b00 	vstr	d0, [sp]
   173ec:	f007 fc74 	bl	1ecd8 <__aeabi_dcmpgt>
   173f0:	ed9d 0b00 	vldr	d0, [sp]
   173f4:	b128      	cbz	r0, 17402 <timescale_constraints+0x32>
   173f6:	ed9f 1b04 	vldr	d1, [pc, #16]	; 17408 <timescale_constraints+0x38>
   173fa:	f007 ffd9 	bl	1f3b0 <fmod>
   173fe:	ed84 0b00 	vstr	d0, [r4]
   17402:	b002      	add	sp, #8
   17404:	bd10      	pop	{r4, pc}
   17406:	bf00      	nop
   17408:	00000000 	.word	0x00000000
   1740c:	42700000 	.word	0x42700000
   17410:	42700000 	.word	0x42700000
   17414:	00000000 	.word	0x00000000

00017418 <timescale_Hofx>:
   17418:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1741c:	6904      	ldr	r4, [r0, #16]
   1741e:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
   17420:	69c5      	ldr	r5, [r0, #28]
   17422:	6886      	ldr	r6, [r0, #8]
   17424:	2200      	movs	r2, #0
   17426:	2300      	movs	r3, #0
   17428:	e9c4 2300 	strd	r2, r3, [r4]
   1742c:	f105 0818 	add.w	r8, r5, #24
   17430:	e8f6 2302 	ldrd	r2, r3, [r6], #8
   17434:	e8f5 0102 	ldrd	r0, r1, [r5], #8
   17438:	f007 f9be 	bl	1e7b8 <__aeabi_dmul>
   1743c:	e9d4 2300 	ldrd	r2, r3, [r4]
   17440:	f007 f804 	bl	1e44c <__adddf3>
   17444:	4545      	cmp	r5, r8
   17446:	e9c4 0100 	strd	r0, r1, [r4]
   1744a:	d1f1      	bne.n	17430 <timescale_Hofx+0x18>
   1744c:	e9cd 0100 	strd	r0, r1, [sp]
   17450:	88bb      	ldrh	r3, [r7, #4]
   17452:	065b      	lsls	r3, r3, #25
   17454:	d50c      	bpl.n	17470 <timescale_Hofx+0x58>
   17456:	2200      	movs	r2, #0
   17458:	4b09      	ldr	r3, [pc, #36]	; (17480 <timescale_Hofx+0x68>)
   1745a:	f007 fc3d 	bl	1ecd8 <__aeabi_dcmpgt>
   1745e:	ed9d 0b00 	vldr	d0, [sp]
   17462:	b128      	cbz	r0, 17470 <timescale_Hofx+0x58>
   17464:	ed9f 1b04 	vldr	d1, [pc, #16]	; 17478 <timescale_Hofx+0x60>
   17468:	f007 ffa2 	bl	1f3b0 <fmod>
   1746c:	ed84 0b00 	vstr	d0, [r4]
   17470:	b002      	add	sp, #8
   17472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17476:	bf00      	nop
   17478:	00000000 	.word	0x00000000
   1747c:	42700000 	.word	0x42700000
   17480:	42700000 	.word	0x42700000

00017484 <timescale_init>:
   17484:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17488:	4688      	mov	r8, r1
   1748a:	4614      	mov	r4, r2
   1748c:	ec57 6b10 	vmov	r6, r7, d0
   17490:	4605      	mov	r5, r0
   17492:	b990      	cbnz	r0, 174ba <timescale_init+0x36>
   17494:	2008      	movs	r0, #8
   17496:	f7f8 fe65 	bl	10164 <malloc>
   1749a:	4605      	mov	r5, r0
   1749c:	b928      	cbnz	r0, 174aa <timescale_init+0x26>
   1749e:	4b2c      	ldr	r3, [pc, #176]	; (17550 <timescale_init+0xcc>)
   174a0:	4a2c      	ldr	r2, [pc, #176]	; (17554 <timescale_init+0xd0>)
   174a2:	482d      	ldr	r0, [pc, #180]	; (17558 <timescale_init+0xd4>)
   174a4:	21e0      	movs	r1, #224	; 0xe0
   174a6:	f7f5 f9a9 	bl	c7fc <__assert_func>
   174aa:	2208      	movs	r2, #8
   174ac:	2100      	movs	r1, #0
   174ae:	f7f8 feec 	bl	1028a <memset>
   174b2:	792b      	ldrb	r3, [r5, #4]
   174b4:	f043 0301 	orr.w	r3, r3, #1
   174b8:	712b      	strb	r3, [r5, #4]
   174ba:	4641      	mov	r1, r8
   174bc:	2301      	movs	r3, #1
   174be:	2203      	movs	r2, #3
   174c0:	6828      	ldr	r0, [r5, #0]
   174c2:	f000 fad3 	bl	17a6c <srkf_dbl_init>
   174c6:	463b      	mov	r3, r7
   174c8:	4621      	mov	r1, r4
   174ca:	6028      	str	r0, [r5, #0]
   174cc:	4632      	mov	r2, r6
   174ce:	f7ff fdcb 	bl	17068 <timescale_QUpdate>
   174d2:	682c      	ldr	r4, [r5, #0]
   174d4:	2700      	movs	r7, #0
   174d6:	f8b4 a000 	ldrh.w	sl, [r4]
   174da:	46b8      	mov	r8, r7
   174dc:	fa1f f388 	uxth.w	r3, r8
   174e0:	459a      	cmp	sl, r3
   174e2:	d91a      	bls.n	1751a <timescale_init+0x96>
   174e4:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   174e8:	2600      	movs	r6, #0
   174ea:	e00f      	b.n	1750c <timescale_init+0x88>
   174ec:	6a22      	ldr	r2, [r4, #32]
   174ee:	19f3      	adds	r3, r6, r7
   174f0:	00db      	lsls	r3, r3, #3
   174f2:	eb02 0903 	add.w	r9, r2, r3
   174f6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   174f8:	18d1      	adds	r1, r2, r3
   174fa:	e9d1 0100 	ldrd	r0, r1, [r1]
   174fe:	2200      	movs	r2, #0
   17500:	4b16      	ldr	r3, [pc, #88]	; (1755c <timescale_init+0xd8>)
   17502:	f007 f959 	bl	1e7b8 <__aeabi_dmul>
   17506:	e9c9 0100 	strd	r0, r1, [r9]
   1750a:	3601      	adds	r6, #1
   1750c:	b2b3      	uxth	r3, r6
   1750e:	459b      	cmp	fp, r3
   17510:	d8ec      	bhi.n	174ec <timescale_init+0x68>
   17512:	f108 0801 	add.w	r8, r8, #1
   17516:	4457      	add	r7, sl
   17518:	e7e0      	b.n	174dc <timescale_init+0x58>
   1751a:	69e3      	ldr	r3, [r4, #28]
   1751c:	4910      	ldr	r1, [pc, #64]	; (17560 <timescale_init+0xdc>)
   1751e:	792a      	ldrb	r2, [r5, #4]
   17520:	2000      	movs	r0, #0
   17522:	e9c3 0100 	strd	r0, r1, [r3]
   17526:	4b0f      	ldr	r3, [pc, #60]	; (17564 <timescale_init+0xe0>)
   17528:	65a3      	str	r3, [r4, #88]	; 0x58
   1752a:	4b0f      	ldr	r3, [pc, #60]	; (17568 <timescale_init+0xe4>)
   1752c:	6563      	str	r3, [r4, #84]	; 0x54
   1752e:	4b0f      	ldr	r3, [pc, #60]	; (1756c <timescale_init+0xe8>)
   17530:	65e3      	str	r3, [r4, #92]	; 0x5c
   17532:	4b0f      	ldr	r3, [pc, #60]	; (17570 <timescale_init+0xec>)
   17534:	6663      	str	r3, [r4, #100]	; 0x64
   17536:	4b0f      	ldr	r3, [pc, #60]	; (17574 <timescale_init+0xf0>)
   17538:	e9c4 351a 	strd	r3, r5, [r4, #104]	; 0x68
   1753c:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   17540:	f3c3 0340 	ubfx	r3, r3, #1, #1
   17544:	f363 0241 	bfi	r2, r3, #1, #1
   17548:	712a      	strb	r2, [r5, #4]
   1754a:	4628      	mov	r0, r5
   1754c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17550:	00021e8c 	.word	0x00021e8c
   17554:	00021e64 	.word	0x00021e64
   17558:	00021e91 	.word	0x00021e91
   1755c:	40590000 	.word	0x40590000
   17560:	3ff00000 	.word	0x3ff00000
   17564:	000171dd 	.word	0x000171dd
   17568:	00017261 	.word	0x00017261
   1756c:	00017419 	.word	0x00017419
   17570:	000173d1 	.word	0x000173d1
   17574:	000172d9 	.word	0x000172d9

00017578 <timescale_free>:
   17578:	b510      	push	{r4, lr}
   1757a:	4604      	mov	r4, r0
   1757c:	6800      	ldr	r0, [r0, #0]
   1757e:	b930      	cbnz	r0, 1758e <timescale_free+0x16>
   17580:	4b08      	ldr	r3, [pc, #32]	; (175a4 <timescale_free+0x2c>)
   17582:	4a09      	ldr	r2, [pc, #36]	; (175a8 <timescale_free+0x30>)
   17584:	4809      	ldr	r0, [pc, #36]	; (175ac <timescale_free+0x34>)
   17586:	f44f 7181 	mov.w	r1, #258	; 0x102
   1758a:	f7f5 f937 	bl	c7fc <__assert_func>
   1758e:	f000 fced 	bl	17f6c <srkf_dbl_free>
   17592:	7923      	ldrb	r3, [r4, #4]
   17594:	07db      	lsls	r3, r3, #31
   17596:	d504      	bpl.n	175a2 <timescale_free+0x2a>
   17598:	4620      	mov	r0, r4
   1759a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1759e:	f7f8 be2d 	b.w	101fc <free>
   175a2:	bd10      	pop	{r4, pc}
   175a4:	00021e82 	.word	0x00021e82
   175a8:	00021e73 	.word	0x00021e73
   175ac:	00021e91 	.word	0x00021e91

000175b0 <timescale_main>:
   175b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   175b4:	ed2d 8b02 	vpush	{d8}
   175b8:	eeb0 8a40 	vmov.f32	s16, s0
   175bc:	eef0 8a60 	vmov.f32	s17, s1
   175c0:	b083      	sub	sp, #12
   175c2:	4604      	mov	r4, r0
   175c4:	468a      	mov	sl, r1
   175c6:	4617      	mov	r7, r2
   175c8:	461d      	mov	r5, r3
   175ca:	2200      	movs	r2, #0
   175cc:	4b29      	ldr	r3, [pc, #164]	; (17674 <timescale_main+0xc4>)
   175ce:	e9d1 0100 	ldrd	r0, r1, [r1]
   175d2:	f04f 0601 	mov.w	r6, #1
   175d6:	f007 fb7f 	bl	1ecd8 <__aeabi_dcmpgt>
   175da:	b900      	cbnz	r0, 175de <timescale_main+0x2e>
   175dc:	4606      	mov	r6, r0
   175de:	7923      	ldrb	r3, [r4, #4]
   175e0:	6820      	ldr	r0, [r4, #0]
   175e2:	f3c3 1280 	ubfx	r2, r3, #6, #1
   175e6:	4316      	orrs	r6, r2
   175e8:	f366 1386 	bfi	r3, r6, #6, #1
   175ec:	7123      	strb	r3, [r4, #4]
   175ee:	4639      	mov	r1, r7
   175f0:	ec53 2b18 	vmov	r2, r3, d8
   175f4:	f7ff fd38 	bl	17068 <timescale_QUpdate>
   175f8:	6827      	ldr	r7, [r4, #0]
   175fa:	887a      	ldrh	r2, [r7, #2]
   175fc:	f06f 0907 	mvn.w	r9, #7
   17600:	1c53      	adds	r3, r2, #1
   17602:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
   17606:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
   1760a:	9201      	str	r2, [sp, #4]
   1760c:	fb09 f903 	mul.w	r9, r9, r3
   17610:	f04f 0800 	mov.w	r8, #0
   17614:	9b01      	ldr	r3, [sp, #4]
   17616:	429d      	cmp	r5, r3
   17618:	44d8      	add	r8, fp
   1761a:	d11e      	bne.n	1765a <timescale_main+0xaa>
   1761c:	eeb0 0a48 	vmov.f32	s0, s16
   17620:	eef0 0a68 	vmov.f32	s1, s17
   17624:	2300      	movs	r3, #0
   17626:	461a      	mov	r2, r3
   17628:	4651      	mov	r1, sl
   1762a:	4638      	mov	r0, r7
   1762c:	f000 f8b4 	bl	17798 <srkf_dbl_main>
   17630:	7923      	ldrb	r3, [r4, #4]
   17632:	f3c0 1000 	ubfx	r0, r0, #4, #1
   17636:	f3c3 0280 	ubfx	r2, r3, #2, #1
   1763a:	4302      	orrs	r2, r0
   1763c:	f362 0382 	bfi	r3, r2, #2, #1
   17640:	7123      	strb	r3, [r4, #4]
   17642:	b2db      	uxtb	r3, r3
   17644:	075a      	lsls	r2, r3, #29
   17646:	bf5c      	itt	pl
   17648:	f043 0308 	orrpl.w	r3, r3, #8
   1764c:	7123      	strbpl	r3, [r4, #4]
   1764e:	88a0      	ldrh	r0, [r4, #4]
   17650:	b003      	add	sp, #12
   17652:	ecbd 8b02 	vpop	{d8}
   17656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1765a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
   1765e:	6bbe      	ldr	r6, [r7, #56]	; 0x38
   17660:	4610      	mov	r0, r2
   17662:	4619      	mov	r1, r3
   17664:	f007 f8a8 	bl	1e7b8 <__aeabi_dmul>
   17668:	4446      	add	r6, r8
   1766a:	444e      	add	r6, r9
   1766c:	e9c6 0100 	strd	r0, r1, [r6]
   17670:	e7d0      	b.n	17614 <timescale_main+0x64>
   17672:	bf00      	nop
   17674:	42600000 	.word	0x42600000

00017678 <Hofx>:
   17678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1767c:	ed2d 8b02 	vpush	{d8}
   17680:	ed9f 8b1b 	vldr	d8, [pc, #108]	; 176f0 <Hofx+0x78>
   17684:	f04f 0800 	mov.w	r8, #0
   17688:	f8b0 9000 	ldrh.w	r9, [r0]
   1768c:	f8b0 a002 	ldrh.w	sl, [r0, #2]
   17690:	4604      	mov	r4, r0
   17692:	4647      	mov	r7, r8
   17694:	b2bb      	uxth	r3, r7
   17696:	459a      	cmp	sl, r3
   17698:	d803      	bhi.n	176a2 <Hofx+0x2a>
   1769a:	ecbd 8b02 	vpop	{d8}
   1769e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   176a2:	6926      	ldr	r6, [r4, #16]
   176a4:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
   176a8:	ed86 8b00 	vstr	d8, [r6]
   176ac:	2500      	movs	r5, #0
   176ae:	b2ab      	uxth	r3, r5
   176b0:	4599      	cmp	r9, r3
   176b2:	d802      	bhi.n	176ba <Hofx+0x42>
   176b4:	3701      	adds	r7, #1
   176b6:	44c8      	add	r8, r9
   176b8:	e7ec      	b.n	17694 <Hofx+0x1c>
   176ba:	69e3      	ldr	r3, [r4, #28]
   176bc:	eb05 0108 	add.w	r1, r5, r8
   176c0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   176c4:	68a3      	ldr	r3, [r4, #8]
   176c6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   176ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   176ce:	e9d1 0100 	ldrd	r0, r1, [r1]
   176d2:	f007 f871 	bl	1e7b8 <__aeabi_dmul>
   176d6:	4602      	mov	r2, r0
   176d8:	460b      	mov	r3, r1
   176da:	e9d6 0100 	ldrd	r0, r1, [r6]
   176de:	f006 feb5 	bl	1e44c <__adddf3>
   176e2:	3501      	adds	r5, #1
   176e4:	e9c6 0100 	strd	r0, r1, [r6]
   176e8:	e7e1      	b.n	176ae <Hofx+0x36>
   176ea:	bf00      	nop
   176ec:	f3af 8000 	nop.w
	...

000176f8 <Aofx>:
   176f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   176fc:	f8b0 a000 	ldrh.w	sl, [r0]
   17700:	ed2d 8b02 	vpush	{d8}
   17704:	ea4f 09ca 	mov.w	r9, sl, lsl #3
   17708:	f109 030e 	add.w	r3, r9, #14
   1770c:	466a      	mov	r2, sp
   1770e:	08db      	lsrs	r3, r3, #3
   17710:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
   17714:	af00      	add	r7, sp, #0
   17716:	ed9f 8b1e 	vldr	d8, [pc, #120]	; 17790 <Aofx+0x98>
   1771a:	469d      	mov	sp, r3
   1771c:	46e8      	mov	r8, sp
   1771e:	4606      	mov	r6, r0
   17720:	44c1      	add	r9, r8
   17722:	4644      	mov	r4, r8
   17724:	f04f 0b00 	mov.w	fp, #0
   17728:	454c      	cmp	r4, r9
   1772a:	d107      	bne.n	1773c <Aofx+0x44>
   1772c:	4643      	mov	r3, r8
   1772e:	42a3      	cmp	r3, r4
   17730:	d124      	bne.n	1777c <Aofx+0x84>
   17732:	46bd      	mov	sp, r7
   17734:	ecbd 8b02 	vpop	{d8}
   17738:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1773c:	eca4 8b02 	vstmia	r4!, {d8}
   17740:	2500      	movs	r5, #0
   17742:	b2ab      	uxth	r3, r5
   17744:	459a      	cmp	sl, r3
   17746:	d801      	bhi.n	1774c <Aofx+0x54>
   17748:	44d3      	add	fp, sl
   1774a:	e7ed      	b.n	17728 <Aofx+0x30>
   1774c:	6cf1      	ldr	r1, [r6, #76]	; 0x4c
   1774e:	eb05 030b 	add.w	r3, r5, fp
   17752:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   17756:	68b3      	ldr	r3, [r6, #8]
   17758:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   1775c:	e9d3 2300 	ldrd	r2, r3, [r3]
   17760:	e9d1 0100 	ldrd	r0, r1, [r1]
   17764:	f007 f828 	bl	1e7b8 <__aeabi_dmul>
   17768:	4602      	mov	r2, r0
   1776a:	460b      	mov	r3, r1
   1776c:	e954 0102 	ldrd	r0, r1, [r4, #-8]
   17770:	f006 fe6c 	bl	1e44c <__adddf3>
   17774:	3501      	adds	r5, #1
   17776:	e944 0102 	strd	r0, r1, [r4, #-8]
   1777a:	e7e2      	b.n	17742 <Aofx+0x4a>
   1777c:	68b2      	ldr	r2, [r6, #8]
   1777e:	eba3 0108 	sub.w	r1, r3, r8
   17782:	440a      	add	r2, r1
   17784:	e8f3 0102 	ldrd	r0, r1, [r3], #8
   17788:	e9c2 0100 	strd	r0, r1, [r2]
   1778c:	e7cf      	b.n	1772e <Aofx+0x36>
   1778e:	bf00      	nop
	...

00017798 <srkf_dbl_main>:
   17798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1779c:	ed2d 8b02 	vpush	{d8}
   177a0:	eeb0 8a40 	vmov.f32	s16, s0
   177a4:	eef0 8a60 	vmov.f32	s17, s1
   177a8:	b089      	sub	sp, #36	; 0x24
   177aa:	460d      	mov	r5, r1
   177ac:	af04      	add	r7, sp, #16
   177ae:	4690      	mov	r8, r2
   177b0:	461e      	mov	r6, r3
   177b2:	4604      	mov	r4, r0
   177b4:	b928      	cbnz	r0, 177c2 <srkf_dbl_main+0x2a>
   177b6:	4ba8      	ldr	r3, [pc, #672]	; (17a58 <srkf_dbl_main+0x2c0>)
   177b8:	4aa8      	ldr	r2, [pc, #672]	; (17a5c <srkf_dbl_main+0x2c4>)
   177ba:	2185      	movs	r1, #133	; 0x85
   177bc:	48a8      	ldr	r0, [pc, #672]	; (17a60 <srkf_dbl_main+0x2c8>)
   177be:	f7f5 f81d 	bl	c7fc <__assert_func>
   177c2:	6d43      	ldr	r3, [r0, #84]	; 0x54
   177c4:	b91b      	cbnz	r3, 177ce <srkf_dbl_main+0x36>
   177c6:	4ba7      	ldr	r3, [pc, #668]	; (17a64 <srkf_dbl_main+0x2cc>)
   177c8:	4aa4      	ldr	r2, [pc, #656]	; (17a5c <srkf_dbl_main+0x2c4>)
   177ca:	2186      	movs	r1, #134	; 0x86
   177cc:	e7f6      	b.n	177bc <srkf_dbl_main+0x24>
   177ce:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   177d0:	b91b      	cbnz	r3, 177da <srkf_dbl_main+0x42>
   177d2:	4ba5      	ldr	r3, [pc, #660]	; (17a68 <srkf_dbl_main+0x2d0>)
   177d4:	4aa1      	ldr	r2, [pc, #644]	; (17a5c <srkf_dbl_main+0x2c4>)
   177d6:	2187      	movs	r1, #135	; 0x87
   177d8:	e7f0      	b.n	177bc <srkf_dbl_main+0x24>
   177da:	6d83      	ldr	r3, [r0, #88]	; 0x58
   177dc:	b10b      	cbz	r3, 177e2 <srkf_dbl_main+0x4a>
   177de:	4611      	mov	r1, r2
   177e0:	4798      	blx	r3
   177e2:	eeb0 0a48 	vmov.f32	s0, s16
   177e6:	eef0 0a68 	vmov.f32	s1, s17
   177ea:	6d63      	ldr	r3, [r4, #84]	; 0x54
   177ec:	4641      	mov	r1, r8
   177ee:	4620      	mov	r0, r4
   177f0:	4798      	blx	r3
   177f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   177f4:	b12b      	cbz	r3, 17802 <srkf_dbl_main+0x6a>
   177f6:	eeb0 0a48 	vmov.f32	s0, s16
   177fa:	eef0 0a68 	vmov.f32	s1, s17
   177fe:	4620      	mov	r0, r4
   17800:	4798      	blx	r3
   17802:	8863      	ldrh	r3, [r4, #2]
   17804:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   17806:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
   1780a:	f000 fc65 	bl	180d8 <ud_dbl>
   1780e:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
   17812:	8823      	ldrh	r3, [r4, #0]
   17814:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   17816:	f000 fc5f 	bl	180d8 <ud_dbl>
   1781a:	8823      	ldrh	r3, [r4, #0]
   1781c:	9302      	str	r3, [sp, #8]
   1781e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   17820:	9301      	str	r3, [sp, #4]
   17822:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   17824:	9300      	str	r3, [sp, #0]
   17826:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
   1782a:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   1782e:	f000 fd27 	bl	18280 <thornton_dbl>
   17832:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   17836:	f000 0001 	and.w	r0, r0, #1
   1783a:	f3c3 1240 	ubfx	r2, r3, #5, #1
   1783e:	4302      	orrs	r2, r0
   17840:	f362 1345 	bfi	r3, r2, #5, #1
   17844:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
   17848:	2e00      	cmp	r6, #0
   1784a:	d156      	bne.n	178fa <srkf_dbl_main+0x162>
   1784c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1784e:	466e      	mov	r6, sp
   17850:	b12b      	cbz	r3, 1785e <srkf_dbl_main+0xc6>
   17852:	eeb0 0a48 	vmov.f32	s0, s16
   17856:	eef0 0a68 	vmov.f32	s1, s17
   1785a:	4620      	mov	r0, r4
   1785c:	4798      	blx	r3
   1785e:	eeb0 0a48 	vmov.f32	s0, s16
   17862:	eef0 0a68 	vmov.f32	s1, s17
   17866:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   17868:	4620      	mov	r0, r4
   1786a:	4798      	blx	r3
   1786c:	8863      	ldrh	r3, [r4, #2]
   1786e:	8822      	ldrh	r2, [r4, #0]
   17870:	435a      	muls	r2, r3
   17872:	00d2      	lsls	r2, r2, #3
   17874:	3208      	adds	r2, #8
   17876:	ebad 0d02 	sub.w	sp, sp, r2
   1787a:	2201      	movs	r2, #1
   1787c:	9200      	str	r2, [sp, #0]
   1787e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   17880:	6960      	ldr	r0, [r4, #20]
   17882:	462a      	mov	r2, r5
   17884:	f000 fbc2 	bl	1800c <trisolve_dbl>
   17888:	8822      	ldrh	r2, [r4, #0]
   1788a:	8863      	ldrh	r3, [r4, #2]
   1788c:	9200      	str	r2, [sp, #0]
   1788e:	f10d 0810 	add.w	r8, sp, #16
   17892:	69e2      	ldr	r2, [r4, #28]
   17894:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   17896:	4640      	mov	r0, r8
   17898:	f000 fbb8 	bl	1800c <trisolve_dbl>
   1789c:	6ea5      	ldr	r5, [r4, #104]	; 0x68
   1789e:	b9b5      	cbnz	r5, 178ce <srkf_dbl_main+0x136>
   178a0:	f8b4 a002 	ldrh.w	sl, [r4, #2]
   178a4:	b2ab      	uxth	r3, r5
   178a6:	459a      	cmp	sl, r3
   178a8:	d917      	bls.n	178da <srkf_dbl_main+0x142>
   178aa:	69a3      	ldr	r3, [r4, #24]
   178ac:	00ea      	lsls	r2, r5, #3
   178ae:	eb03 0902 	add.w	r9, r3, r2
   178b2:	6963      	ldr	r3, [r4, #20]
   178b4:	1899      	adds	r1, r3, r2
   178b6:	6923      	ldr	r3, [r4, #16]
   178b8:	4413      	add	r3, r2
   178ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   178be:	e9d1 0100 	ldrd	r0, r1, [r1]
   178c2:	f006 fdc1 	bl	1e448 <__aeabi_dsub>
   178c6:	3501      	adds	r5, #1
   178c8:	e9c9 0100 	strd	r0, r1, [r9]
   178cc:	e7ea      	b.n	178a4 <srkf_dbl_main+0x10c>
   178ce:	eeb0 0a48 	vmov.f32	s0, s16
   178d2:	eef0 0a68 	vmov.f32	s1, s17
   178d6:	4620      	mov	r0, r4
   178d8:	47a8      	blx	r5
   178da:	2300      	movs	r3, #0
   178dc:	8862      	ldrh	r2, [r4, #2]
   178de:	b299      	uxth	r1, r3
   178e0:	4291      	cmp	r1, r2
   178e2:	f103 0501 	add.w	r5, r3, #1
   178e6:	d326      	bcc.n	17936 <srkf_dbl_main+0x19e>
   178e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   178ea:	b12b      	cbz	r3, 178f8 <srkf_dbl_main+0x160>
   178ec:	eeb0 0a48 	vmov.f32	s0, s16
   178f0:	eef0 0a68 	vmov.f32	s1, s17
   178f4:	4620      	mov	r0, r4
   178f6:	4798      	blx	r3
   178f8:	46b5      	mov	sp, r6
   178fa:	f8b4 a000 	ldrh.w	sl, [r4]
   178fe:	ed9f 8b54 	vldr	d8, [pc, #336]	; 17a50 <srkf_dbl_main+0x2b8>
   17902:	ea4f 03ca 	mov.w	r3, sl, lsl #3
   17906:	2500      	movs	r5, #0
   17908:	60fb      	str	r3, [r7, #12]
   1790a:	60bd      	str	r5, [r7, #8]
   1790c:	893b      	ldrh	r3, [r7, #8]
   1790e:	459a      	cmp	sl, r3
   17910:	d85d      	bhi.n	179ce <srkf_dbl_main+0x236>
   17912:	ed9f 8b4f 	vldr	d8, [pc, #316]	; 17a50 <srkf_dbl_main+0x2b8>
   17916:	2500      	movs	r5, #0
   17918:	68fb      	ldr	r3, [r7, #12]
   1791a:	603b      	str	r3, [r7, #0]
   1791c:	46ab      	mov	fp, r5
   1791e:	607d      	str	r5, [r7, #4]
   17920:	88bb      	ldrh	r3, [r7, #4]
   17922:	459a      	cmp	sl, r3
   17924:	f240 808b 	bls.w	17a3e <srkf_dbl_main+0x2a6>
   17928:	f06f 0307 	mvn.w	r3, #7
   1792c:	436b      	muls	r3, r5
   1792e:	60bb      	str	r3, [r7, #8]
   17930:	f04f 0900 	mov.w	r9, #0
   17934:	e05e      	b.n	179f4 <srkf_dbl_main+0x25c>
   17936:	b29b      	uxth	r3, r3
   17938:	fb02 3c03 	mla	ip, r2, r3, r3
   1793c:	6c22      	ldr	r2, [r4, #64]	; 0x40
   1793e:	8821      	ldrh	r1, [r4, #0]
   17940:	eb02 0ccc 	add.w	ip, r2, ip, lsl #3
   17944:	69a2      	ldr	r2, [r4, #24]
   17946:	9100      	str	r1, [sp, #0]
   17948:	fb03 f001 	mul.w	r0, r3, r1
   1794c:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
   17950:	68a1      	ldr	r1, [r4, #8]
   17952:	e9d4 2309 	ldrd	r2, r3, [r4, #36]	; 0x24
   17956:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
   1795a:	ed9c 1b00 	vldr	d1, [ip]
   1795e:	ed9e 0b00 	vldr	d0, [lr]
   17962:	f000 feb1 	bl	186c8 <bierman_dbl>
   17966:	462b      	mov	r3, r5
   17968:	e7b8      	b.n	178dc <srkf_dbl_main+0x144>
   1796a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1796c:	eb06 0805 	add.w	r8, r6, r5
   17970:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
   17974:	ed88 8b00 	vstr	d8, [r8]
   17978:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
   1797c:	f04f 0900 	mov.w	r9, #0
   17980:	fa1f f389 	uxth.w	r3, r9
   17984:	459a      	cmp	sl, r3
   17986:	d808      	bhi.n	1799a <srkf_dbl_main+0x202>
   17988:	3601      	adds	r6, #1
   1798a:	b2b3      	uxth	r3, r6
   1798c:	459a      	cmp	sl, r3
   1798e:	d8ec      	bhi.n	1796a <srkf_dbl_main+0x1d2>
   17990:	68bb      	ldr	r3, [r7, #8]
   17992:	3301      	adds	r3, #1
   17994:	60bb      	str	r3, [r7, #8]
   17996:	4455      	add	r5, sl
   17998:	e7b8      	b.n	1790c <srkf_dbl_main+0x174>
   1799a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1799c:	eb09 0305 	add.w	r3, r9, r5
   179a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   179a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   179a6:	445b      	add	r3, fp
   179a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   179ac:	e9d1 0100 	ldrd	r0, r1, [r1]
   179b0:	f006 ff02 	bl	1e7b8 <__aeabi_dmul>
   179b4:	460b      	mov	r3, r1
   179b6:	4602      	mov	r2, r0
   179b8:	e9d8 0100 	ldrd	r0, r1, [r8]
   179bc:	f006 fd46 	bl	1e44c <__adddf3>
   179c0:	68fb      	ldr	r3, [r7, #12]
   179c2:	e9c8 0100 	strd	r0, r1, [r8]
   179c6:	f109 0901 	add.w	r9, r9, #1
   179ca:	449b      	add	fp, r3
   179cc:	e7d8      	b.n	17980 <srkf_dbl_main+0x1e8>
   179ce:	2600      	movs	r6, #0
   179d0:	e7db      	b.n	1798a <srkf_dbl_main+0x1f2>
   179d2:	6a23      	ldr	r3, [r4, #32]
   179d4:	eb09 0805 	add.w	r8, r9, r5
   179d8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
   179dc:	ed88 8b00 	vstr	d8, [r8]
   179e0:	465e      	mov	r6, fp
   179e2:	683b      	ldr	r3, [r7, #0]
   179e4:	429e      	cmp	r6, r3
   179e6:	d114      	bne.n	17a12 <srkf_dbl_main+0x27a>
   179e8:	e9d7 3202 	ldrd	r3, r2, [r7, #8]
   179ec:	4413      	add	r3, r2
   179ee:	f109 0901 	add.w	r9, r9, #1
   179f2:	60bb      	str	r3, [r7, #8]
   179f4:	fa1f f389 	uxth.w	r3, r9
   179f8:	459a      	cmp	sl, r3
   179fa:	d8ea      	bhi.n	179d2 <srkf_dbl_main+0x23a>
   179fc:	687b      	ldr	r3, [r7, #4]
   179fe:	68fa      	ldr	r2, [r7, #12]
   17a00:	3301      	adds	r3, #1
   17a02:	607b      	str	r3, [r7, #4]
   17a04:	68fb      	ldr	r3, [r7, #12]
   17a06:	449b      	add	fp, r3
   17a08:	683b      	ldr	r3, [r7, #0]
   17a0a:	4413      	add	r3, r2
   17a0c:	603b      	str	r3, [r7, #0]
   17a0e:	4455      	add	r5, sl
   17a10:	e786      	b.n	17920 <srkf_dbl_main+0x188>
   17a12:	6a63      	ldr	r3, [r4, #36]	; 0x24
   17a14:	68ba      	ldr	r2, [r7, #8]
   17a16:	4413      	add	r3, r2
   17a18:	1999      	adds	r1, r3, r6
   17a1a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   17a1c:	4433      	add	r3, r6
   17a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   17a22:	e9d1 0100 	ldrd	r0, r1, [r1]
   17a26:	f006 fec7 	bl	1e7b8 <__aeabi_dmul>
   17a2a:	4602      	mov	r2, r0
   17a2c:	460b      	mov	r3, r1
   17a2e:	e9d8 0100 	ldrd	r0, r1, [r8]
   17a32:	f006 fd0b 	bl	1e44c <__adddf3>
   17a36:	3608      	adds	r6, #8
   17a38:	e9c8 0100 	strd	r0, r1, [r8]
   17a3c:	e7d1      	b.n	179e2 <srkf_dbl_main+0x24a>
   17a3e:	f8b4 0070 	ldrh.w	r0, [r4, #112]	; 0x70
   17a42:	3714      	adds	r7, #20
   17a44:	46bd      	mov	sp, r7
   17a46:	ecbd 8b02 	vpop	{d8}
   17a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a4e:	bf00      	nop
	...
   17a58:	00021f9b 	.word	0x00021f9b
   17a5c:	00021ec1 	.word	0x00021ec1
   17a60:	00021fa8 	.word	0x00021fa8
   17a64:	00021fd7 	.word	0x00021fd7
   17a68:	00021fea 	.word	0x00021fea

00017a6c <srkf_dbl_init>:
   17a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17a70:	4688      	mov	r8, r1
   17a72:	4615      	mov	r5, r2
   17a74:	461e      	mov	r6, r3
   17a76:	4604      	mov	r4, r0
   17a78:	b9d8      	cbnz	r0, 17ab2 <srkf_dbl_init+0x46>
   17a7a:	2074      	movs	r0, #116	; 0x74
   17a7c:	f7f8 fb72 	bl	10164 <malloc>
   17a80:	4604      	mov	r4, r0
   17a82:	b928      	cbnz	r0, 17a90 <srkf_dbl_init+0x24>
   17a84:	4baa      	ldr	r3, [pc, #680]	; (17d30 <srkf_dbl_init+0x2c4>)
   17a86:	4aab      	ldr	r2, [pc, #684]	; (17d34 <srkf_dbl_init+0x2c8>)
   17a88:	21c5      	movs	r1, #197	; 0xc5
   17a8a:	48ab      	ldr	r0, [pc, #684]	; (17d38 <srkf_dbl_init+0x2cc>)
   17a8c:	f7f4 feb6 	bl	c7fc <__assert_func>
   17a90:	2274      	movs	r2, #116	; 0x74
   17a92:	2100      	movs	r1, #0
   17a94:	f7f8 fbf9 	bl	1028a <memset>
   17a98:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   17a9c:	8025      	strh	r5, [r4, #0]
   17a9e:	f043 0301 	orr.w	r3, r3, #1
   17aa2:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
   17aa6:	4ba5      	ldr	r3, [pc, #660]	; (17d3c <srkf_dbl_init+0x2d0>)
   17aa8:	6563      	str	r3, [r4, #84]	; 0x54
   17aaa:	4ba5      	ldr	r3, [pc, #660]	; (17d40 <srkf_dbl_init+0x2d4>)
   17aac:	80a6      	strh	r6, [r4, #4]
   17aae:	8066      	strh	r6, [r4, #2]
   17ab0:	65e3      	str	r3, [r4, #92]	; 0x5c
   17ab2:	8823      	ldrh	r3, [r4, #0]
   17ab4:	42ab      	cmp	r3, r5
   17ab6:	d003      	beq.n	17ac0 <srkf_dbl_init+0x54>
   17ab8:	4ba2      	ldr	r3, [pc, #648]	; (17d44 <srkf_dbl_init+0x2d8>)
   17aba:	4a9e      	ldr	r2, [pc, #632]	; (17d34 <srkf_dbl_init+0x2c8>)
   17abc:	21ce      	movs	r1, #206	; 0xce
   17abe:	e7e4      	b.n	17a8a <srkf_dbl_init+0x1e>
   17ac0:	88a3      	ldrh	r3, [r4, #4]
   17ac2:	42b3      	cmp	r3, r6
   17ac4:	d920      	bls.n	17b08 <srkf_dbl_init+0x9c>
   17ac6:	00f7      	lsls	r7, r6, #3
   17ac8:	8066      	strh	r6, [r4, #2]
   17aca:	463a      	mov	r2, r7
   17acc:	2100      	movs	r1, #0
   17ace:	4375      	muls	r5, r6
   17ad0:	6920      	ldr	r0, [r4, #16]
   17ad2:	f7f8 fbda 	bl	1028a <memset>
   17ad6:	00ed      	lsls	r5, r5, #3
   17ad8:	463a      	mov	r2, r7
   17ada:	2100      	movs	r1, #0
   17adc:	69a0      	ldr	r0, [r4, #24]
   17ade:	f7f8 fbd4 	bl	1028a <memset>
   17ae2:	4376      	muls	r6, r6
   17ae4:	462a      	mov	r2, r5
   17ae6:	2100      	movs	r1, #0
   17ae8:	69e0      	ldr	r0, [r4, #28]
   17aea:	f7f8 fbce 	bl	1028a <memset>
   17aee:	00f2      	lsls	r2, r6, #3
   17af0:	2100      	movs	r1, #0
   17af2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   17af4:	f7f8 fbc9 	bl	1028a <memset>
   17af8:	462a      	mov	r2, r5
   17afa:	2100      	movs	r1, #0
   17afc:	6d20      	ldr	r0, [r4, #80]	; 0x50
   17afe:	f7f8 fbc4 	bl	1028a <memset>
   17b02:	4620      	mov	r0, r4
   17b04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   17b08:	68a7      	ldr	r7, [r4, #8]
   17b0a:	b177      	cbz	r7, 17b2a <srkf_dbl_init+0xbe>
   17b0c:	f8d4 8010 	ldr.w	r8, [r4, #16]
   17b10:	00f7      	lsls	r7, r6, #3
   17b12:	f1b8 0f00 	cmp.w	r8, #0
   17b16:	d126      	bne.n	17b66 <srkf_dbl_init+0xfa>
   17b18:	4638      	mov	r0, r7
   17b1a:	f7f8 fb23 	bl	10164 <malloc>
   17b1e:	6120      	str	r0, [r4, #16]
   17b20:	bb58      	cbnz	r0, 17b7a <srkf_dbl_init+0x10e>
   17b22:	4b89      	ldr	r3, [pc, #548]	; (17d48 <srkf_dbl_init+0x2dc>)
   17b24:	4a83      	ldr	r2, [pc, #524]	; (17d34 <srkf_dbl_init+0x2c8>)
   17b26:	21e6      	movs	r1, #230	; 0xe6
   17b28:	e7af      	b.n	17a8a <srkf_dbl_init+0x1e>
   17b2a:	ea4f 09c5 	mov.w	r9, r5, lsl #3
   17b2e:	4648      	mov	r0, r9
   17b30:	f7f8 fb18 	bl	10164 <malloc>
   17b34:	60a0      	str	r0, [r4, #8]
   17b36:	b918      	cbnz	r0, 17b40 <srkf_dbl_init+0xd4>
   17b38:	4b84      	ldr	r3, [pc, #528]	; (17d4c <srkf_dbl_init+0x2e0>)
   17b3a:	4a7e      	ldr	r2, [pc, #504]	; (17d34 <srkf_dbl_init+0x2c8>)
   17b3c:	21dc      	movs	r1, #220	; 0xdc
   17b3e:	e7a4      	b.n	17a8a <srkf_dbl_init+0x1e>
   17b40:	464a      	mov	r2, r9
   17b42:	4639      	mov	r1, r7
   17b44:	f7f8 fba1 	bl	1028a <memset>
   17b48:	f1b8 0f00 	cmp.w	r8, #0
   17b4c:	d0de      	beq.n	17b0c <srkf_dbl_init+0xa0>
   17b4e:	463b      	mov	r3, r7
   17b50:	429d      	cmp	r5, r3
   17b52:	dddb      	ble.n	17b0c <srkf_dbl_init+0xa0>
   17b54:	68a2      	ldr	r2, [r4, #8]
   17b56:	e8f8 0102 	ldrd	r0, r1, [r8], #8
   17b5a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   17b5e:	e9c2 0100 	strd	r0, r1, [r2]
   17b62:	3301      	adds	r3, #1
   17b64:	e7f4      	b.n	17b50 <srkf_dbl_init+0xe4>
   17b66:	4639      	mov	r1, r7
   17b68:	4640      	mov	r0, r8
   17b6a:	f002 f93d 	bl	19de8 <realloc>
   17b6e:	6120      	str	r0, [r4, #16]
   17b70:	b918      	cbnz	r0, 17b7a <srkf_dbl_init+0x10e>
   17b72:	4b75      	ldr	r3, [pc, #468]	; (17d48 <srkf_dbl_init+0x2dc>)
   17b74:	4a6f      	ldr	r2, [pc, #444]	; (17d34 <srkf_dbl_init+0x2c8>)
   17b76:	21ea      	movs	r1, #234	; 0xea
   17b78:	e787      	b.n	17a8a <srkf_dbl_init+0x1e>
   17b7a:	463a      	mov	r2, r7
   17b7c:	2100      	movs	r1, #0
   17b7e:	f7f8 fb84 	bl	1028a <memset>
   17b82:	f8d4 8014 	ldr.w	r8, [r4, #20]
   17b86:	f1b8 0f00 	cmp.w	r8, #0
   17b8a:	d108      	bne.n	17b9e <srkf_dbl_init+0x132>
   17b8c:	4638      	mov	r0, r7
   17b8e:	f7f8 fae9 	bl	10164 <malloc>
   17b92:	6160      	str	r0, [r4, #20]
   17b94:	b968      	cbnz	r0, 17bb2 <srkf_dbl_init+0x146>
   17b96:	4b6e      	ldr	r3, [pc, #440]	; (17d50 <srkf_dbl_init+0x2e4>)
   17b98:	4a66      	ldr	r2, [pc, #408]	; (17d34 <srkf_dbl_init+0x2c8>)
   17b9a:	21ef      	movs	r1, #239	; 0xef
   17b9c:	e775      	b.n	17a8a <srkf_dbl_init+0x1e>
   17b9e:	4639      	mov	r1, r7
   17ba0:	4640      	mov	r0, r8
   17ba2:	f002 f921 	bl	19de8 <realloc>
   17ba6:	6160      	str	r0, [r4, #20]
   17ba8:	b918      	cbnz	r0, 17bb2 <srkf_dbl_init+0x146>
   17baa:	4b69      	ldr	r3, [pc, #420]	; (17d50 <srkf_dbl_init+0x2e4>)
   17bac:	4a61      	ldr	r2, [pc, #388]	; (17d34 <srkf_dbl_init+0x2c8>)
   17bae:	21f3      	movs	r1, #243	; 0xf3
   17bb0:	e76b      	b.n	17a8a <srkf_dbl_init+0x1e>
   17bb2:	463a      	mov	r2, r7
   17bb4:	2100      	movs	r1, #0
   17bb6:	f7f8 fb68 	bl	1028a <memset>
   17bba:	f8d4 8018 	ldr.w	r8, [r4, #24]
   17bbe:	f1b8 0f00 	cmp.w	r8, #0
   17bc2:	d108      	bne.n	17bd6 <srkf_dbl_init+0x16a>
   17bc4:	4638      	mov	r0, r7
   17bc6:	f7f8 facd 	bl	10164 <malloc>
   17bca:	61a0      	str	r0, [r4, #24]
   17bcc:	b968      	cbnz	r0, 17bea <srkf_dbl_init+0x17e>
   17bce:	4b61      	ldr	r3, [pc, #388]	; (17d54 <srkf_dbl_init+0x2e8>)
   17bd0:	4a58      	ldr	r2, [pc, #352]	; (17d34 <srkf_dbl_init+0x2c8>)
   17bd2:	21f8      	movs	r1, #248	; 0xf8
   17bd4:	e759      	b.n	17a8a <srkf_dbl_init+0x1e>
   17bd6:	4639      	mov	r1, r7
   17bd8:	4640      	mov	r0, r8
   17bda:	f002 f905 	bl	19de8 <realloc>
   17bde:	61a0      	str	r0, [r4, #24]
   17be0:	b918      	cbnz	r0, 17bea <srkf_dbl_init+0x17e>
   17be2:	4b5c      	ldr	r3, [pc, #368]	; (17d54 <srkf_dbl_init+0x2e8>)
   17be4:	4a53      	ldr	r2, [pc, #332]	; (17d34 <srkf_dbl_init+0x2c8>)
   17be6:	21fc      	movs	r1, #252	; 0xfc
   17be8:	e74f      	b.n	17a8a <srkf_dbl_init+0x1e>
   17bea:	463a      	mov	r2, r7
   17bec:	2100      	movs	r1, #0
   17bee:	f7f8 fb4c 	bl	1028a <memset>
   17bf2:	69e7      	ldr	r7, [r4, #28]
   17bf4:	fb05 f806 	mul.w	r8, r5, r6
   17bf8:	ea4f 08c8 	mov.w	r8, r8, lsl #3
   17bfc:	b94f      	cbnz	r7, 17c12 <srkf_dbl_init+0x1a6>
   17bfe:	4640      	mov	r0, r8
   17c00:	f7f8 fab0 	bl	10164 <malloc>
   17c04:	61e0      	str	r0, [r4, #28]
   17c06:	b978      	cbnz	r0, 17c28 <srkf_dbl_init+0x1bc>
   17c08:	4b53      	ldr	r3, [pc, #332]	; (17d58 <srkf_dbl_init+0x2ec>)
   17c0a:	4a4a      	ldr	r2, [pc, #296]	; (17d34 <srkf_dbl_init+0x2c8>)
   17c0c:	f240 1101 	movw	r1, #257	; 0x101
   17c10:	e73b      	b.n	17a8a <srkf_dbl_init+0x1e>
   17c12:	4641      	mov	r1, r8
   17c14:	4638      	mov	r0, r7
   17c16:	f002 f8e7 	bl	19de8 <realloc>
   17c1a:	61e0      	str	r0, [r4, #28]
   17c1c:	b920      	cbnz	r0, 17c28 <srkf_dbl_init+0x1bc>
   17c1e:	4b4e      	ldr	r3, [pc, #312]	; (17d58 <srkf_dbl_init+0x2ec>)
   17c20:	4a44      	ldr	r2, [pc, #272]	; (17d34 <srkf_dbl_init+0x2c8>)
   17c22:	f240 1105 	movw	r1, #261	; 0x105
   17c26:	e730      	b.n	17a8a <srkf_dbl_init+0x1e>
   17c28:	4642      	mov	r2, r8
   17c2a:	2100      	movs	r1, #0
   17c2c:	f7f8 fb2d 	bl	1028a <memset>
   17c30:	f8d4 9020 	ldr.w	r9, [r4, #32]
   17c34:	f1b9 0f00 	cmp.w	r9, #0
   17c38:	d110      	bne.n	17c5c <srkf_dbl_init+0x1f0>
   17c3a:	fb05 f705 	mul.w	r7, r5, r5
   17c3e:	00ff      	lsls	r7, r7, #3
   17c40:	4638      	mov	r0, r7
   17c42:	f7f8 fa8f 	bl	10164 <malloc>
   17c46:	6220      	str	r0, [r4, #32]
   17c48:	b920      	cbnz	r0, 17c54 <srkf_dbl_init+0x1e8>
   17c4a:	4b44      	ldr	r3, [pc, #272]	; (17d5c <srkf_dbl_init+0x2f0>)
   17c4c:	4a39      	ldr	r2, [pc, #228]	; (17d34 <srkf_dbl_init+0x2c8>)
   17c4e:	f44f 7185 	mov.w	r1, #266	; 0x10a
   17c52:	e71a      	b.n	17a8a <srkf_dbl_init+0x1e>
   17c54:	463a      	mov	r2, r7
   17c56:	4649      	mov	r1, r9
   17c58:	f7f8 fb17 	bl	1028a <memset>
   17c5c:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
   17c60:	f1b9 0f00 	cmp.w	r9, #0
   17c64:	d110      	bne.n	17c88 <srkf_dbl_init+0x21c>
   17c66:	fb05 f705 	mul.w	r7, r5, r5
   17c6a:	00ff      	lsls	r7, r7, #3
   17c6c:	4638      	mov	r0, r7
   17c6e:	f7f8 fa79 	bl	10164 <malloc>
   17c72:	6260      	str	r0, [r4, #36]	; 0x24
   17c74:	b920      	cbnz	r0, 17c80 <srkf_dbl_init+0x214>
   17c76:	4b3a      	ldr	r3, [pc, #232]	; (17d60 <srkf_dbl_init+0x2f4>)
   17c78:	4a2e      	ldr	r2, [pc, #184]	; (17d34 <srkf_dbl_init+0x2c8>)
   17c7a:	f240 110f 	movw	r1, #271	; 0x10f
   17c7e:	e704      	b.n	17a8a <srkf_dbl_init+0x1e>
   17c80:	463a      	mov	r2, r7
   17c82:	4649      	mov	r1, r9
   17c84:	f7f8 fb01 	bl	1028a <memset>
   17c88:	f8d4 9028 	ldr.w	r9, [r4, #40]	; 0x28
   17c8c:	f1b9 0f00 	cmp.w	r9, #0
   17c90:	d110      	bne.n	17cb4 <srkf_dbl_init+0x248>
   17c92:	fb05 f705 	mul.w	r7, r5, r5
   17c96:	00ff      	lsls	r7, r7, #3
   17c98:	4638      	mov	r0, r7
   17c9a:	f7f8 fa63 	bl	10164 <malloc>
   17c9e:	62a0      	str	r0, [r4, #40]	; 0x28
   17ca0:	b920      	cbnz	r0, 17cac <srkf_dbl_init+0x240>
   17ca2:	4b30      	ldr	r3, [pc, #192]	; (17d64 <srkf_dbl_init+0x2f8>)
   17ca4:	4a23      	ldr	r2, [pc, #140]	; (17d34 <srkf_dbl_init+0x2c8>)
   17ca6:	f44f 718a 	mov.w	r1, #276	; 0x114
   17caa:	e6ee      	b.n	17a8a <srkf_dbl_init+0x1e>
   17cac:	463a      	mov	r2, r7
   17cae:	4649      	mov	r1, r9
   17cb0:	f7f8 faeb 	bl	1028a <memset>
   17cb4:	f8d4 902c 	ldr.w	r9, [r4, #44]	; 0x2c
   17cb8:	f1b9 0f00 	cmp.w	r9, #0
   17cbc:	d110      	bne.n	17ce0 <srkf_dbl_init+0x274>
   17cbe:	fb05 f705 	mul.w	r7, r5, r5
   17cc2:	00ff      	lsls	r7, r7, #3
   17cc4:	4638      	mov	r0, r7
   17cc6:	f7f8 fa4d 	bl	10164 <malloc>
   17cca:	62e0      	str	r0, [r4, #44]	; 0x2c
   17ccc:	b920      	cbnz	r0, 17cd8 <srkf_dbl_init+0x26c>
   17cce:	4b26      	ldr	r3, [pc, #152]	; (17d68 <srkf_dbl_init+0x2fc>)
   17cd0:	4a18      	ldr	r2, [pc, #96]	; (17d34 <srkf_dbl_init+0x2c8>)
   17cd2:	f240 1119 	movw	r1, #281	; 0x119
   17cd6:	e6d8      	b.n	17a8a <srkf_dbl_init+0x1e>
   17cd8:	463a      	mov	r2, r7
   17cda:	4649      	mov	r1, r9
   17cdc:	f7f8 fad5 	bl	1028a <memset>
   17ce0:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
   17ce4:	f1b9 0f00 	cmp.w	r9, #0
   17ce8:	d110      	bne.n	17d0c <srkf_dbl_init+0x2a0>
   17cea:	fb05 f705 	mul.w	r7, r5, r5
   17cee:	00ff      	lsls	r7, r7, #3
   17cf0:	4638      	mov	r0, r7
   17cf2:	f7f8 fa37 	bl	10164 <malloc>
   17cf6:	6320      	str	r0, [r4, #48]	; 0x30
   17cf8:	b920      	cbnz	r0, 17d04 <srkf_dbl_init+0x298>
   17cfa:	4b1c      	ldr	r3, [pc, #112]	; (17d6c <srkf_dbl_init+0x300>)
   17cfc:	4a0d      	ldr	r2, [pc, #52]	; (17d34 <srkf_dbl_init+0x2c8>)
   17cfe:	f44f 718f 	mov.w	r1, #286	; 0x11e
   17d02:	e6c2      	b.n	17a8a <srkf_dbl_init+0x1e>
   17d04:	463a      	mov	r2, r7
   17d06:	4649      	mov	r1, r9
   17d08:	f7f8 fabf 	bl	1028a <memset>
   17d0c:	f8d4 9034 	ldr.w	r9, [r4, #52]	; 0x34
   17d10:	f1b9 0f00 	cmp.w	r9, #0
   17d14:	d132      	bne.n	17d7c <srkf_dbl_init+0x310>
   17d16:	fb05 f705 	mul.w	r7, r5, r5
   17d1a:	00ff      	lsls	r7, r7, #3
   17d1c:	4638      	mov	r0, r7
   17d1e:	f7f8 fa21 	bl	10164 <malloc>
   17d22:	6360      	str	r0, [r4, #52]	; 0x34
   17d24:	bb30      	cbnz	r0, 17d74 <srkf_dbl_init+0x308>
   17d26:	4b12      	ldr	r3, [pc, #72]	; (17d70 <srkf_dbl_init+0x304>)
   17d28:	4a02      	ldr	r2, [pc, #8]	; (17d34 <srkf_dbl_init+0x2c8>)
   17d2a:	f240 1123 	movw	r1, #291	; 0x123
   17d2e:	e6ac      	b.n	17a8a <srkf_dbl_init+0x1e>
   17d30:	00021e8c 	.word	0x00021e8c
   17d34:	00021ecf 	.word	0x00021ecf
   17d38:	00021fa8 	.word	0x00021fa8
   17d3c:	000176f9 	.word	0x000176f9
   17d40:	00017679 	.word	0x00017679
   17d44:	00021ef7 	.word	0x00021ef7
   17d48:	00021f0c 	.word	0x00021f0c
   17d4c:	00021f04 	.word	0x00021f04
   17d50:	00021f14 	.word	0x00021f14
   17d54:	00021f1c 	.word	0x00021f1c
   17d58:	00021f24 	.word	0x00021f24
   17d5c:	00021f2c 	.word	0x00021f2c
   17d60:	00021f34 	.word	0x00021f34
   17d64:	00021f3d 	.word	0x00021f3d
   17d68:	00021f46 	.word	0x00021f46
   17d6c:	00021f4e 	.word	0x00021f4e
   17d70:	00021f57 	.word	0x00021f57
   17d74:	463a      	mov	r2, r7
   17d76:	4649      	mov	r1, r9
   17d78:	f7f8 fa87 	bl	1028a <memset>
   17d7c:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
   17d80:	fb06 f706 	mul.w	r7, r6, r6
   17d84:	00ff      	lsls	r7, r7, #3
   17d86:	f1b9 0f00 	cmp.w	r9, #0
   17d8a:	d109      	bne.n	17da0 <srkf_dbl_init+0x334>
   17d8c:	4638      	mov	r0, r7
   17d8e:	f7f8 f9e9 	bl	10164 <malloc>
   17d92:	63a0      	str	r0, [r4, #56]	; 0x38
   17d94:	b978      	cbnz	r0, 17db6 <srkf_dbl_init+0x34a>
   17d96:	4b6d      	ldr	r3, [pc, #436]	; (17f4c <srkf_dbl_init+0x4e0>)
   17d98:	4a6d      	ldr	r2, [pc, #436]	; (17f50 <srkf_dbl_init+0x4e4>)
   17d9a:	f44f 7194 	mov.w	r1, #296	; 0x128
   17d9e:	e674      	b.n	17a8a <srkf_dbl_init+0x1e>
   17da0:	4639      	mov	r1, r7
   17da2:	4648      	mov	r0, r9
   17da4:	f002 f820 	bl	19de8 <realloc>
   17da8:	63a0      	str	r0, [r4, #56]	; 0x38
   17daa:	b920      	cbnz	r0, 17db6 <srkf_dbl_init+0x34a>
   17dac:	4b67      	ldr	r3, [pc, #412]	; (17f4c <srkf_dbl_init+0x4e0>)
   17dae:	4a68      	ldr	r2, [pc, #416]	; (17f50 <srkf_dbl_init+0x4e4>)
   17db0:	f44f 7196 	mov.w	r1, #300	; 0x12c
   17db4:	e669      	b.n	17a8a <srkf_dbl_init+0x1e>
   17db6:	463a      	mov	r2, r7
   17db8:	2100      	movs	r1, #0
   17dba:	f7f8 fa66 	bl	1028a <memset>
   17dbe:	f8d4 903c 	ldr.w	r9, [r4, #60]	; 0x3c
   17dc2:	f1b9 0f00 	cmp.w	r9, #0
   17dc6:	d109      	bne.n	17ddc <srkf_dbl_init+0x370>
   17dc8:	4638      	mov	r0, r7
   17dca:	f7f8 f9cb 	bl	10164 <malloc>
   17dce:	63e0      	str	r0, [r4, #60]	; 0x3c
   17dd0:	b978      	cbnz	r0, 17df2 <srkf_dbl_init+0x386>
   17dd2:	4b60      	ldr	r3, [pc, #384]	; (17f54 <srkf_dbl_init+0x4e8>)
   17dd4:	4a5e      	ldr	r2, [pc, #376]	; (17f50 <srkf_dbl_init+0x4e4>)
   17dd6:	f240 1131 	movw	r1, #305	; 0x131
   17dda:	e656      	b.n	17a8a <srkf_dbl_init+0x1e>
   17ddc:	4639      	mov	r1, r7
   17dde:	4648      	mov	r0, r9
   17de0:	f002 f802 	bl	19de8 <realloc>
   17de4:	63e0      	str	r0, [r4, #60]	; 0x3c
   17de6:	b920      	cbnz	r0, 17df2 <srkf_dbl_init+0x386>
   17de8:	4b5a      	ldr	r3, [pc, #360]	; (17f54 <srkf_dbl_init+0x4e8>)
   17dea:	4a59      	ldr	r2, [pc, #356]	; (17f50 <srkf_dbl_init+0x4e4>)
   17dec:	f240 1135 	movw	r1, #309	; 0x135
   17df0:	e64b      	b.n	17a8a <srkf_dbl_init+0x1e>
   17df2:	463a      	mov	r2, r7
   17df4:	2100      	movs	r1, #0
   17df6:	f7f8 fa48 	bl	1028a <memset>
   17dfa:	f8d4 9040 	ldr.w	r9, [r4, #64]	; 0x40
   17dfe:	f1b9 0f00 	cmp.w	r9, #0
   17e02:	d109      	bne.n	17e18 <srkf_dbl_init+0x3ac>
   17e04:	4638      	mov	r0, r7
   17e06:	f7f8 f9ad 	bl	10164 <malloc>
   17e0a:	6420      	str	r0, [r4, #64]	; 0x40
   17e0c:	b978      	cbnz	r0, 17e2e <srkf_dbl_init+0x3c2>
   17e0e:	4b52      	ldr	r3, [pc, #328]	; (17f58 <srkf_dbl_init+0x4ec>)
   17e10:	4a4f      	ldr	r2, [pc, #316]	; (17f50 <srkf_dbl_init+0x4e4>)
   17e12:	f44f 719d 	mov.w	r1, #314	; 0x13a
   17e16:	e638      	b.n	17a8a <srkf_dbl_init+0x1e>
   17e18:	4639      	mov	r1, r7
   17e1a:	4648      	mov	r0, r9
   17e1c:	f001 ffe4 	bl	19de8 <realloc>
   17e20:	6420      	str	r0, [r4, #64]	; 0x40
   17e22:	b920      	cbnz	r0, 17e2e <srkf_dbl_init+0x3c2>
   17e24:	4b4c      	ldr	r3, [pc, #304]	; (17f58 <srkf_dbl_init+0x4ec>)
   17e26:	4a4a      	ldr	r2, [pc, #296]	; (17f50 <srkf_dbl_init+0x4e4>)
   17e28:	f44f 719f 	mov.w	r1, #318	; 0x13e
   17e2c:	e62d      	b.n	17a8a <srkf_dbl_init+0x1e>
   17e2e:	463a      	mov	r2, r7
   17e30:	2100      	movs	r1, #0
   17e32:	f7f8 fa2a 	bl	1028a <memset>
   17e36:	6c60      	ldr	r0, [r4, #68]	; 0x44
   17e38:	b988      	cbnz	r0, 17e5e <srkf_dbl_init+0x3f2>
   17e3a:	42b5      	cmp	r5, r6
   17e3c:	bf8c      	ite	hi
   17e3e:	fb15 f705 	smulbbhi	r7, r5, r5
   17e42:	fb16 f706 	smulbbls	r7, r6, r6
   17e46:	b2bf      	uxth	r7, r7
   17e48:	00ff      	lsls	r7, r7, #3
   17e4a:	4638      	mov	r0, r7
   17e4c:	f7f8 f98a 	bl	10164 <malloc>
   17e50:	6460      	str	r0, [r4, #68]	; 0x44
   17e52:	b9b0      	cbnz	r0, 17e82 <srkf_dbl_init+0x416>
   17e54:	4b41      	ldr	r3, [pc, #260]	; (17f5c <srkf_dbl_init+0x4f0>)
   17e56:	4a3e      	ldr	r2, [pc, #248]	; (17f50 <srkf_dbl_init+0x4e4>)
   17e58:	f44f 71a2 	mov.w	r1, #324	; 0x144
   17e5c:	e615      	b.n	17a8a <srkf_dbl_init+0x1e>
   17e5e:	42b5      	cmp	r5, r6
   17e60:	bf8c      	ite	hi
   17e62:	fb15 f705 	smulbbhi	r7, r5, r5
   17e66:	fb16 f706 	smulbbls	r7, r6, r6
   17e6a:	b2bf      	uxth	r7, r7
   17e6c:	00ff      	lsls	r7, r7, #3
   17e6e:	4639      	mov	r1, r7
   17e70:	f001 ffba 	bl	19de8 <realloc>
   17e74:	6460      	str	r0, [r4, #68]	; 0x44
   17e76:	b920      	cbnz	r0, 17e82 <srkf_dbl_init+0x416>
   17e78:	4b38      	ldr	r3, [pc, #224]	; (17f5c <srkf_dbl_init+0x4f0>)
   17e7a:	4a35      	ldr	r2, [pc, #212]	; (17f50 <srkf_dbl_init+0x4e4>)
   17e7c:	f240 1149 	movw	r1, #329	; 0x149
   17e80:	e603      	b.n	17a8a <srkf_dbl_init+0x1e>
   17e82:	463a      	mov	r2, r7
   17e84:	2100      	movs	r1, #0
   17e86:	f7f8 fa00 	bl	1028a <memset>
   17e8a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   17e8c:	b988      	cbnz	r0, 17eb2 <srkf_dbl_init+0x446>
   17e8e:	42b5      	cmp	r5, r6
   17e90:	bf8c      	ite	hi
   17e92:	fb15 f705 	smulbbhi	r7, r5, r5
   17e96:	fb16 f706 	smulbbls	r7, r6, r6
   17e9a:	b2bf      	uxth	r7, r7
   17e9c:	00ff      	lsls	r7, r7, #3
   17e9e:	4638      	mov	r0, r7
   17ea0:	f7f8 f960 	bl	10164 <malloc>
   17ea4:	64a0      	str	r0, [r4, #72]	; 0x48
   17ea6:	b9b0      	cbnz	r0, 17ed6 <srkf_dbl_init+0x46a>
   17ea8:	4b2d      	ldr	r3, [pc, #180]	; (17f60 <srkf_dbl_init+0x4f4>)
   17eaa:	4a29      	ldr	r2, [pc, #164]	; (17f50 <srkf_dbl_init+0x4e4>)
   17eac:	f240 114f 	movw	r1, #335	; 0x14f
   17eb0:	e5eb      	b.n	17a8a <srkf_dbl_init+0x1e>
   17eb2:	42b5      	cmp	r5, r6
   17eb4:	bf8c      	ite	hi
   17eb6:	fb15 f705 	smulbbhi	r7, r5, r5
   17eba:	fb16 f706 	smulbbls	r7, r6, r6
   17ebe:	b2bf      	uxth	r7, r7
   17ec0:	00ff      	lsls	r7, r7, #3
   17ec2:	4639      	mov	r1, r7
   17ec4:	f001 ff90 	bl	19de8 <realloc>
   17ec8:	64a0      	str	r0, [r4, #72]	; 0x48
   17eca:	b920      	cbnz	r0, 17ed6 <srkf_dbl_init+0x46a>
   17ecc:	4b24      	ldr	r3, [pc, #144]	; (17f60 <srkf_dbl_init+0x4f4>)
   17ece:	4a20      	ldr	r2, [pc, #128]	; (17f50 <srkf_dbl_init+0x4e4>)
   17ed0:	f44f 71aa 	mov.w	r1, #340	; 0x154
   17ed4:	e5d9      	b.n	17a8a <srkf_dbl_init+0x1e>
   17ed6:	463a      	mov	r2, r7
   17ed8:	2100      	movs	r1, #0
   17eda:	f7f8 f9d6 	bl	1028a <memset>
   17ede:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
   17ee0:	b97f      	cbnz	r7, 17f02 <srkf_dbl_init+0x496>
   17ee2:	436d      	muls	r5, r5
   17ee4:	00ed      	lsls	r5, r5, #3
   17ee6:	4628      	mov	r0, r5
   17ee8:	f7f8 f93c 	bl	10164 <malloc>
   17eec:	64e0      	str	r0, [r4, #76]	; 0x4c
   17eee:	b920      	cbnz	r0, 17efa <srkf_dbl_init+0x48e>
   17ef0:	4b1c      	ldr	r3, [pc, #112]	; (17f64 <srkf_dbl_init+0x4f8>)
   17ef2:	4a17      	ldr	r2, [pc, #92]	; (17f50 <srkf_dbl_init+0x4e4>)
   17ef4:	f240 1159 	movw	r1, #345	; 0x159
   17ef8:	e5c7      	b.n	17a8a <srkf_dbl_init+0x1e>
   17efa:	462a      	mov	r2, r5
   17efc:	4639      	mov	r1, r7
   17efe:	f7f8 f9c4 	bl	1028a <memset>
   17f02:	6d25      	ldr	r5, [r4, #80]	; 0x50
   17f04:	b94d      	cbnz	r5, 17f1a <srkf_dbl_init+0x4ae>
   17f06:	4640      	mov	r0, r8
   17f08:	f7f8 f92c 	bl	10164 <malloc>
   17f0c:	6520      	str	r0, [r4, #80]	; 0x50
   17f0e:	b978      	cbnz	r0, 17f30 <srkf_dbl_init+0x4c4>
   17f10:	4b15      	ldr	r3, [pc, #84]	; (17f68 <srkf_dbl_init+0x4fc>)
   17f12:	4a0f      	ldr	r2, [pc, #60]	; (17f50 <srkf_dbl_init+0x4e4>)
   17f14:	f44f 71af 	mov.w	r1, #350	; 0x15e
   17f18:	e5b7      	b.n	17a8a <srkf_dbl_init+0x1e>
   17f1a:	4641      	mov	r1, r8
   17f1c:	4628      	mov	r0, r5
   17f1e:	f001 ff63 	bl	19de8 <realloc>
   17f22:	6520      	str	r0, [r4, #80]	; 0x50
   17f24:	b920      	cbnz	r0, 17f30 <srkf_dbl_init+0x4c4>
   17f26:	4b10      	ldr	r3, [pc, #64]	; (17f68 <srkf_dbl_init+0x4fc>)
   17f28:	4a09      	ldr	r2, [pc, #36]	; (17f50 <srkf_dbl_init+0x4e4>)
   17f2a:	f44f 71b1 	mov.w	r1, #354	; 0x162
   17f2e:	e5ac      	b.n	17a8a <srkf_dbl_init+0x1e>
   17f30:	4642      	mov	r2, r8
   17f32:	2100      	movs	r1, #0
   17f34:	f7f8 f9a9 	bl	1028a <memset>
   17f38:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   17f3c:	80a6      	strh	r6, [r4, #4]
   17f3e:	f043 0302 	orr.w	r3, r3, #2
   17f42:	8066      	strh	r6, [r4, #2]
   17f44:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
   17f48:	e5db      	b.n	17b02 <srkf_dbl_init+0x96>
   17f4a:	bf00      	nop
   17f4c:	00021f60 	.word	0x00021f60
   17f50:	00021ecf 	.word	0x00021ecf
   17f54:	00021f68 	.word	0x00021f68
   17f58:	00021f71 	.word	0x00021f71
   17f5c:	00021f7a 	.word	0x00021f7a
   17f60:	00021f82 	.word	0x00021f82
   17f64:	00021f8b 	.word	0x00021f8b
   17f68:	00021f93 	.word	0x00021f93

00017f6c <srkf_dbl_free>:
   17f6c:	b510      	push	{r4, lr}
   17f6e:	4604      	mov	r4, r0
   17f70:	b930      	cbnz	r0, 17f80 <srkf_dbl_free+0x14>
   17f72:	4b23      	ldr	r3, [pc, #140]	; (18000 <srkf_dbl_free+0x94>)
   17f74:	4a23      	ldr	r2, [pc, #140]	; (18004 <srkf_dbl_free+0x98>)
   17f76:	4824      	ldr	r0, [pc, #144]	; (18008 <srkf_dbl_free+0x9c>)
   17f78:	f240 1173 	movw	r1, #371	; 0x173
   17f7c:	f7f4 fc3e 	bl	c7fc <__assert_func>
   17f80:	6880      	ldr	r0, [r0, #8]
   17f82:	f7f8 f93b 	bl	101fc <free>
   17f86:	6920      	ldr	r0, [r4, #16]
   17f88:	f7f8 f938 	bl	101fc <free>
   17f8c:	69a0      	ldr	r0, [r4, #24]
   17f8e:	f7f8 f935 	bl	101fc <free>
   17f92:	69e0      	ldr	r0, [r4, #28]
   17f94:	f7f8 f932 	bl	101fc <free>
   17f98:	6a20      	ldr	r0, [r4, #32]
   17f9a:	f7f8 f92f 	bl	101fc <free>
   17f9e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   17fa0:	f7f8 f92c 	bl	101fc <free>
   17fa4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   17fa6:	f7f8 f929 	bl	101fc <free>
   17faa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   17fac:	f7f8 f926 	bl	101fc <free>
   17fb0:	6b20      	ldr	r0, [r4, #48]	; 0x30
   17fb2:	f7f8 f923 	bl	101fc <free>
   17fb6:	6b60      	ldr	r0, [r4, #52]	; 0x34
   17fb8:	f7f8 f920 	bl	101fc <free>
   17fbc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   17fbe:	f7f8 f91d 	bl	101fc <free>
   17fc2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   17fc4:	f7f8 f91a 	bl	101fc <free>
   17fc8:	6c20      	ldr	r0, [r4, #64]	; 0x40
   17fca:	f7f8 f917 	bl	101fc <free>
   17fce:	6c60      	ldr	r0, [r4, #68]	; 0x44
   17fd0:	f7f8 f914 	bl	101fc <free>
   17fd4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   17fd6:	f7f8 f911 	bl	101fc <free>
   17fda:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   17fdc:	f7f8 f90e 	bl	101fc <free>
   17fe0:	6d20      	ldr	r0, [r4, #80]	; 0x50
   17fe2:	f7f8 f90b 	bl	101fc <free>
   17fe6:	2300      	movs	r3, #0
   17fe8:	6023      	str	r3, [r4, #0]
   17fea:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   17fee:	07db      	lsls	r3, r3, #31
   17ff0:	d504      	bpl.n	17ffc <srkf_dbl_free+0x90>
   17ff2:	4620      	mov	r0, r4
   17ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17ff8:	f7f8 b900 	b.w	101fc <free>
   17ffc:	bd10      	pop	{r4, pc}
   17ffe:	bf00      	nop
   18000:	00021eeb 	.word	0x00021eeb
   18004:	00021edd 	.word	0x00021edd
   18008:	00021fa8 	.word	0x00021fa8

0001800c <trisolve_dbl>:
   1800c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18010:	b08b      	sub	sp, #44	; 0x2c
   18012:	4699      	mov	r9, r3
   18014:	f8bd 8050 	ldrh.w	r8, [sp, #80]	; 0x50
   18018:	9004      	str	r0, [sp, #16]
   1801a:	f06f 0307 	mvn.w	r3, #7
   1801e:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
   18022:	fb03 f308 	mul.w	r3, r3, r8
   18026:	b236      	sxth	r6, r6
   18028:	9303      	str	r3, [sp, #12]
   1802a:	e9cd 1208 	strd	r1, r2, [sp, #32]
   1802e:	fb06 f308 	mul.w	r3, r6, r8
   18032:	9306      	str	r3, [sp, #24]
   18034:	fb09 f306 	mul.w	r3, r9, r6
   18038:	9307      	str	r3, [sp, #28]
   1803a:	f04f 0b00 	mov.w	fp, #0
   1803e:	fa0f fa8b 	sxth.w	sl, fp
   18042:	45c2      	cmp	sl, r8
   18044:	db02      	blt.n	1804c <trisolve_dbl+0x40>
   18046:	b00b      	add	sp, #44	; 0x2c
   18048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1804c:	9b06      	ldr	r3, [sp, #24]
   1804e:	4453      	add	r3, sl
   18050:	00db      	lsls	r3, r3, #3
   18052:	9305      	str	r3, [sp, #20]
   18054:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   18058:	189f      	adds	r7, r3, r2
   1805a:	9b07      	ldr	r3, [sp, #28]
   1805c:	9301      	str	r3, [sp, #4]
   1805e:	2300      	movs	r3, #0
   18060:	4635      	mov	r5, r6
   18062:	9302      	str	r3, [sp, #8]
   18064:	2d00      	cmp	r5, #0
   18066:	da02      	bge.n	1806e <trisolve_dbl+0x62>
   18068:	f10b 0b01 	add.w	fp, fp, #1
   1806c:	e7e7      	b.n	1803e <trisolve_dbl+0x32>
   1806e:	9a05      	ldr	r2, [sp, #20]
   18070:	9b02      	ldr	r3, [sp, #8]
   18072:	4413      	add	r3, r2
   18074:	9a09      	ldr	r2, [sp, #36]	; 0x24
   18076:	4413      	add	r3, r2
   18078:	e9d3 2300 	ldrd	r2, r3, [r3]
   1807c:	e9c7 2300 	strd	r2, r3, [r7]
   18080:	b2ad      	uxth	r5, r5
   18082:	1c6c      	adds	r4, r5, #1
   18084:	b224      	sxth	r4, r4
   18086:	454c      	cmp	r4, r9
   18088:	db0c      	blt.n	180a4 <trisolve_dbl+0x98>
   1808a:	9b03      	ldr	r3, [sp, #12]
   1808c:	441f      	add	r7, r3
   1808e:	9b01      	ldr	r3, [sp, #4]
   18090:	eba3 0309 	sub.w	r3, r3, r9
   18094:	9301      	str	r3, [sp, #4]
   18096:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   1809a:	3d01      	subs	r5, #1
   1809c:	4413      	add	r3, r2
   1809e:	9302      	str	r3, [sp, #8]
   180a0:	b22d      	sxth	r5, r5
   180a2:	e7df      	b.n	18064 <trisolve_dbl+0x58>
   180a4:	9b04      	ldr	r3, [sp, #16]
   180a6:	9a08      	ldr	r2, [sp, #32]
   180a8:	fb08 a104 	mla	r1, r8, r4, sl
   180ac:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   180b0:	9b01      	ldr	r3, [sp, #4]
   180b2:	4423      	add	r3, r4
   180b4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   180b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   180bc:	e9d1 0100 	ldrd	r0, r1, [r1]
   180c0:	f006 fb7a 	bl	1e7b8 <__aeabi_dmul>
   180c4:	4602      	mov	r2, r0
   180c6:	460b      	mov	r3, r1
   180c8:	e9d7 0100 	ldrd	r0, r1, [r7]
   180cc:	f006 f9bc 	bl	1e448 <__aeabi_dsub>
   180d0:	3401      	adds	r4, #1
   180d2:	e9c7 0100 	strd	r0, r1, [r7]
   180d6:	e7d5      	b.n	18084 <trisolve_dbl+0x78>

000180d8 <ud_dbl>:
   180d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   180dc:	ed2d 8b02 	vpush	{d8}
   180e0:	fb03 f503 	mul.w	r5, r3, r3
   180e4:	b091      	sub	sp, #68	; 0x44
   180e6:	460f      	mov	r7, r1
   180e8:	00ed      	lsls	r5, r5, #3
   180ea:	4606      	mov	r6, r0
   180ec:	9209      	str	r2, [sp, #36]	; 0x24
   180ee:	2100      	movs	r1, #0
   180f0:	462a      	mov	r2, r5
   180f2:	4638      	mov	r0, r7
   180f4:	461c      	mov	r4, r3
   180f6:	f7f8 f8c8 	bl	1028a <memset>
   180fa:	462a      	mov	r2, r5
   180fc:	2100      	movs	r1, #0
   180fe:	9809      	ldr	r0, [sp, #36]	; 0x24
   18100:	f7f8 f8c3 	bl	1028a <memset>
   18104:	43e3      	mvns	r3, r4
   18106:	00db      	lsls	r3, r3, #3
   18108:	1e65      	subs	r5, r4, #1
   1810a:	b22d      	sxth	r5, r5
   1810c:	9306      	str	r3, [sp, #24]
   1810e:	1c63      	adds	r3, r4, #1
   18110:	930d      	str	r3, [sp, #52]	; 0x34
   18112:	436b      	muls	r3, r5
   18114:	00da      	lsls	r2, r3, #3
   18116:	00d9      	lsls	r1, r3, #3
   18118:	3301      	adds	r3, #1
   1811a:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
   1811e:	9308      	str	r3, [sp, #32]
   18120:	f06f 0307 	mvn.w	r3, #7
   18124:	4363      	muls	r3, r4
   18126:	920b      	str	r2, [sp, #44]	; 0x2c
   18128:	ed9f 8b51 	vldr	d8, [pc, #324]	; 18270 <ud_dbl+0x198>
   1812c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1812e:	930c      	str	r3, [sp, #48]	; 0x30
   18130:	fb05 fa04 	mul.w	sl, r5, r4
   18134:	187b      	adds	r3, r7, r1
   18136:	f04f 0900 	mov.w	r9, #0
   1813a:	eb02 0b01 	add.w	fp, r2, r1
   1813e:	f8cd a01c 	str.w	sl, [sp, #28]
   18142:	930f      	str	r3, [sp, #60]	; 0x3c
   18144:	f8cd 9010 	str.w	r9, [sp, #16]
   18148:	2d00      	cmp	r5, #0
   1814a:	da0d      	bge.n	18168 <ud_dbl+0x90>
   1814c:	2000      	movs	r0, #0
   1814e:	f04f 0800 	mov.w	r8, #0
   18152:	f04f 0900 	mov.w	r9, #0
   18156:	b201      	sxth	r1, r0
   18158:	428c      	cmp	r4, r1
   1815a:	dd7f      	ble.n	1825c <ud_dbl+0x184>
   1815c:	fb04 f301 	mul.w	r3, r4, r1
   18160:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
   18164:	2200      	movs	r2, #0
   18166:	e074      	b.n	18252 <ud_dbl+0x17a>
   18168:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1816a:	f8cd a014 	str.w	sl, [sp, #20]
   1816e:	444b      	add	r3, r9
   18170:	9303      	str	r3, [sp, #12]
   18172:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   18174:	444b      	add	r3, r9
   18176:	18fb      	adds	r3, r7, r3
   18178:	930e      	str	r3, [sp, #56]	; 0x38
   1817a:	9b08      	ldr	r3, [sp, #32]
   1817c:	930a      	str	r3, [sp, #40]	; 0x28
   1817e:	46a8      	mov	r8, r5
   18180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18182:	ed33 7b02 	vldmdb	r3!, {d7}
   18186:	ed8d 7b00 	vstr	d7, [sp]
   1818a:	930a      	str	r3, [sp, #40]	; 0x28
   1818c:	462e      	mov	r6, r5
   1818e:	42b4      	cmp	r4, r6
   18190:	dc30      	bgt.n	181f4 <ud_dbl+0x11c>
   18192:	4545      	cmp	r5, r8
   18194:	d150      	bne.n	18238 <ud_dbl+0x160>
   18196:	4b38      	ldr	r3, [pc, #224]	; (18278 <ud_dbl+0x1a0>)
   18198:	2200      	movs	r2, #0
   1819a:	e9dd 0100 	ldrd	r0, r1, [sp]
   1819e:	f006 fd87 	bl	1ecb0 <__aeabi_dcmple>
   181a2:	2800      	cmp	r0, #0
   181a4:	9b04      	ldr	r3, [sp, #16]
   181a6:	ed9d 7b00 	vldr	d7, [sp]
   181aa:	bf18      	it	ne
   181ac:	2301      	movne	r3, #1
   181ae:	9304      	str	r3, [sp, #16]
   181b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   181b2:	ed8b 7b00 	vstr	d7, [fp]
   181b6:	ed83 8b00 	vstr	d8, [r3]
   181ba:	9b03      	ldr	r3, [sp, #12]
   181bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   181be:	4413      	add	r3, r2
   181c0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   181c4:	9303      	str	r3, [sp, #12]
   181c6:	9b05      	ldr	r3, [sp, #20]
   181c8:	fa0f f888 	sxth.w	r8, r8
   181cc:	1b1b      	subs	r3, r3, r4
   181ce:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   181d2:	9305      	str	r3, [sp, #20]
   181d4:	d1d4      	bne.n	18180 <ud_dbl+0xa8>
   181d6:	9b06      	ldr	r3, [sp, #24]
   181d8:	9a06      	ldr	r2, [sp, #24]
   181da:	449b      	add	fp, r3
   181dc:	9b08      	ldr	r3, [sp, #32]
   181de:	4413      	add	r3, r2
   181e0:	9308      	str	r3, [sp, #32]
   181e2:	9b07      	ldr	r3, [sp, #28]
   181e4:	3d01      	subs	r5, #1
   181e6:	1b1b      	subs	r3, r3, r4
   181e8:	b22d      	sxth	r5, r5
   181ea:	ebaa 0a04 	sub.w	sl, sl, r4
   181ee:	9307      	str	r3, [sp, #28]
   181f0:	4491      	add	r9, r2
   181f2:	e7a9      	b.n	18148 <ud_dbl+0x70>
   181f4:	9b05      	ldr	r3, [sp, #20]
   181f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   181f8:	1999      	adds	r1, r3, r6
   181fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   181fc:	4373      	muls	r3, r6
   181fe:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
   18202:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   18206:	e9d3 2300 	ldrd	r2, r3, [r3]
   1820a:	e9d1 0100 	ldrd	r0, r1, [r1]
   1820e:	f006 fad3 	bl	1e7b8 <__aeabi_dmul>
   18212:	9b07      	ldr	r3, [sp, #28]
   18214:	4433      	add	r3, r6
   18216:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
   1821a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1821e:	f006 facb 	bl	1e7b8 <__aeabi_dmul>
   18222:	4602      	mov	r2, r0
   18224:	460b      	mov	r3, r1
   18226:	e9dd 0100 	ldrd	r0, r1, [sp]
   1822a:	f006 f90d 	bl	1e448 <__aeabi_dsub>
   1822e:	3601      	adds	r6, #1
   18230:	e9cd 0100 	strd	r0, r1, [sp]
   18234:	b236      	sxth	r6, r6
   18236:	e7aa      	b.n	1818e <ud_dbl+0xb6>
   18238:	e9db 2300 	ldrd	r2, r3, [fp]
   1823c:	e9dd 0100 	ldrd	r0, r1, [sp]
   18240:	f006 fbe4 	bl	1ea0c <__aeabi_ddiv>
   18244:	9b03      	ldr	r3, [sp, #12]
   18246:	e9c3 0100 	strd	r0, r1, [r3]
   1824a:	e7b6      	b.n	181ba <ud_dbl+0xe2>
   1824c:	e8e3 8902 	strd	r8, r9, [r3], #8
   18250:	3201      	adds	r2, #1
   18252:	b215      	sxth	r5, r2
   18254:	42a9      	cmp	r1, r5
   18256:	dcf9      	bgt.n	1824c <ud_dbl+0x174>
   18258:	3001      	adds	r0, #1
   1825a:	e77c      	b.n	18156 <ud_dbl+0x7e>
   1825c:	9b04      	ldr	r3, [sp, #16]
   1825e:	f04f 0000 	mov.w	r0, #0
   18262:	f363 0000 	bfi	r0, r3, #0, #1
   18266:	b011      	add	sp, #68	; 0x44
   18268:	ecbd 8b02 	vpop	{d8}
   1826c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18270:	00000000 	.word	0x00000000
   18274:	3ff00000 	.word	0x3ff00000
   18278:	3cb00000 	.word	0x3cb00000
   1827c:	00000000 	.word	0x00000000

00018280 <thornton_dbl>:
   18280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18284:	ed2d 8b02 	vpush	{d8}
   18288:	b09d      	sub	sp, #116	; 0x74
   1828a:	af00      	add	r7, sp, #0
   1828c:	f8b7 b0a8 	ldrh.w	fp, [r7, #168]	; 0xa8
   18290:	603b      	str	r3, [r7, #0]
   18292:	ea4f 03cb 	mov.w	r3, fp, lsl #3
   18296:	6578      	str	r0, [r7, #84]	; 0x54
   18298:	667b      	str	r3, [r7, #100]	; 0x64
   1829a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
   1829e:	6279      	str	r1, [r7, #36]	; 0x24
   182a0:	2300      	movs	r3, #0
   182a2:	637a      	str	r2, [r7, #52]	; 0x34
   182a4:	4619      	mov	r1, r3
   182a6:	b28a      	uxth	r2, r1
   182a8:	4593      	cmp	fp, r2
   182aa:	d856      	bhi.n	1835a <thornton_dbl+0xda>
   182ac:	f10b 34ff 	add.w	r4, fp, #4294967295	; 0xffffffff
   182b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   182b2:	b224      	sxth	r4, r4
   182b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   182b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   182ba:	65fc      	str	r4, [r7, #92]	; 0x5c
   182bc:	2300      	movs	r3, #0
   182be:	65bb      	str	r3, [r7, #88]	; 0x58
   182c0:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
   182c4:	455b      	cmp	r3, fp
   182c6:	db4e      	blt.n	18366 <thornton_dbl+0xe6>
   182c8:	fb0b f304 	mul.w	r3, fp, r4
   182cc:	643b      	str	r3, [r7, #64]	; 0x40
   182ce:	ea6f 030b 	mvn.w	r3, fp
   182d2:	00db      	lsls	r3, r3, #3
   182d4:	60bb      	str	r3, [r7, #8]
   182d6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   182da:	f10b 0301 	add.w	r3, fp, #1
   182de:	63bb      	str	r3, [r7, #56]	; 0x38
   182e0:	4363      	muls	r3, r4
   182e2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   182e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   182e8:	f06f 0307 	mvn.w	r3, #7
   182ec:	fb03 f30b 	mul.w	r3, r3, fp
   182f0:	607b      	str	r3, [r7, #4]
   182f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   182f4:	4363      	muls	r3, r4
   182f6:	65bb      	str	r3, [r7, #88]	; 0x58
   182f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   182fa:	00db      	lsls	r3, r3, #3
   182fc:	62bb      	str	r3, [r7, #40]	; 0x28
   182fe:	2300      	movs	r3, #0
   18300:	64fb      	str	r3, [r7, #76]	; 0x4c
   18302:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   18304:	330e      	adds	r3, #14
   18306:	08db      	lsrs	r3, r3, #3
   18308:	ed9f 8bb1 	vldr	d8, [pc, #708]	; 185d0 <thornton_dbl+0x350>
   1830c:	00db      	lsls	r3, r3, #3
   1830e:	653b      	str	r3, [r7, #80]	; 0x50
   18310:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   18312:	041b      	lsls	r3, r3, #16
   18314:	d56b      	bpl.n	183ee <thornton_dbl+0x16e>
   18316:	ed9f 6bae 	vldr	d6, [pc, #696]	; 185d0 <thornton_dbl+0x350>
   1831a:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 185dc <thornton_dbl+0x35c>
   1831e:	2100      	movs	r1, #0
   18320:	f04f 0800 	mov.w	r8, #0
   18324:	b20a      	sxth	r2, r1
   18326:	455a      	cmp	r2, fp
   18328:	f2c0 81a3 	blt.w	18672 <thornton_dbl+0x3f2>
   1832c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1832e:	f04f 0000 	mov.w	r0, #0
   18332:	f363 0000 	bfi	r0, r3, #0, #1
   18336:	3774      	adds	r7, #116	; 0x74
   18338:	46bd      	mov	sp, r7
   1833a:	ecbd 8b02 	vpop	{d8}
   1833e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18342:	e8f5 8902 	ldrd	r8, r9, [r5], #8
   18346:	e8e4 8902 	strd	r8, r9, [r4], #8
   1834a:	3201      	adds	r2, #1
   1834c:	b296      	uxth	r6, r2
   1834e:	45b3      	cmp	fp, r6
   18350:	d8f7      	bhi.n	18342 <thornton_dbl+0xc2>
   18352:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   18354:	3101      	adds	r1, #1
   18356:	4413      	add	r3, r2
   18358:	e7a5      	b.n	182a6 <thornton_dbl+0x26>
   1835a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   1835e:	18c5      	adds	r5, r0, r3
   18360:	18d4      	adds	r4, r2, r3
   18362:	2200      	movs	r2, #0
   18364:	e7f2      	b.n	1834c <thornton_dbl+0xcc>
   18366:	fb0b f303 	mul.w	r3, fp, r3
   1836a:	191d      	adds	r5, r3, r4
   1836c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   18370:	3501      	adds	r5, #1
   18372:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
   18376:	663a      	str	r2, [r7, #96]	; 0x60
   18378:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   1837c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   18380:	653b      	str	r3, [r7, #80]	; 0x50
   18382:	4626      	mov	r6, r4
   18384:	f04f 0800 	mov.w	r8, #0
   18388:	2e00      	cmp	r6, #0
   1838a:	da02      	bge.n	18392 <thornton_dbl+0x112>
   1838c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1838e:	3301      	adds	r3, #1
   18390:	e795      	b.n	182be <thornton_dbl+0x3e>
   18392:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   18394:	ed13 7b02 	vldr	d7, [r3, #-8]
   18398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1839a:	ed87 7b1a 	vstr	d7, [r7, #104]	; 0x68
   1839e:	eb08 0a03 	add.w	sl, r8, r3
   183a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   183a4:	f04f 0900 	mov.w	r9, #0
   183a8:	461d      	mov	r5, r3
   183aa:	fa0f f389 	sxth.w	r3, r9
   183ae:	429e      	cmp	r6, r3
   183b0:	dc0a      	bgt.n	183c8 <thornton_dbl+0x148>
   183b2:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
   183b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   183b8:	ed23 7b02 	vstmdb	r3!, {d7}
   183bc:	3e01      	subs	r6, #1
   183be:	663b      	str	r3, [r7, #96]	; 0x60
   183c0:	b236      	sxth	r6, r6
   183c2:	f1a8 0808 	sub.w	r8, r8, #8
   183c6:	e7df      	b.n	18388 <thornton_dbl+0x108>
   183c8:	e9da 2300 	ldrd	r2, r3, [sl]
   183cc:	e8f5 0102 	ldrd	r0, r1, [r5], #8
   183d0:	f006 f9f2 	bl	1e7b8 <__aeabi_dmul>
   183d4:	460b      	mov	r3, r1
   183d6:	4602      	mov	r2, r0
   183d8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
   183dc:	f006 f836 	bl	1e44c <__adddf3>
   183e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   183e2:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
   183e6:	f109 0901 	add.w	r9, r9, #1
   183ea:	449a      	add	sl, r3
   183ec:	e7dd      	b.n	183aa <thornton_dbl+0x12a>
   183ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   183f0:	f8c7 d020 	str.w	sp, [r7, #32]
   183f4:	ebad 0d03 	sub.w	sp, sp, r3
   183f8:	f8c7 d048 	str.w	sp, [r7, #72]	; 0x48
   183fc:	ebad 0d03 	sub.w	sp, sp, r3
   18400:	f8c7 d044 	str.w	sp, [r7, #68]	; 0x44
   18404:	ebad 0d03 	sub.w	sp, sp, r3
   18408:	f8c7 d030 	str.w	sp, [r7, #48]	; 0x30
   1840c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   18410:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   18412:	6a7d      	ldr	r5, [r7, #36]	; 0x24
   18414:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
   18418:	ebad 0d03 	sub.w	sp, sp, r3
   1841c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1841e:	f8c7 d02c 	str.w	sp, [r7, #44]	; 0x2c
   18422:	4413      	add	r3, r2
   18424:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   18426:	663b      	str	r3, [r7, #96]	; 0x60
   18428:	ed87 8b1a 	vstr	d8, [r7, #104]	; 0x68
   1842c:	4623      	mov	r3, r4
   1842e:	4413      	add	r3, r2
   18430:	6e3e      	ldr	r6, [r7, #96]	; 0x60
   18432:	60fb      	str	r3, [r7, #12]
   18434:	68fb      	ldr	r3, [r7, #12]
   18436:	429c      	cmp	r4, r3
   18438:	d137      	bne.n	184aa <thornton_dbl+0x22a>
   1843a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1843c:	6dba      	ldr	r2, [r7, #88]	; 0x58
   1843e:	6c7c      	ldr	r4, [r7, #68]	; 0x44
   18440:	683d      	ldr	r5, [r7, #0]
   18442:	f8d7 a02c 	ldr.w	sl, [r7, #44]	; 0x2c
   18446:	189e      	adds	r6, r3, r2
   18448:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   1844a:	4623      	mov	r3, r4
   1844c:	4413      	add	r3, r2
   1844e:	60fb      	str	r3, [r7, #12]
   18450:	68fb      	ldr	r3, [r7, #12]
   18452:	429c      	cmp	r4, r3
   18454:	d146      	bne.n	184e4 <thornton_dbl+0x264>
   18456:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
   1845a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1845c:	ec51 0b17 	vmov	r0, r1, d7
   18460:	ed83 7b00 	vstr	d7, [r3]
   18464:	2200      	movs	r2, #0
   18466:	4b5c      	ldr	r3, [pc, #368]	; (185d8 <thornton_dbl+0x358>)
   18468:	f006 fc22 	bl	1ecb0 <__aeabi_dcmple>
   1846c:	2800      	cmp	r0, #0
   1846e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   18470:	495a      	ldr	r1, [pc, #360]	; (185dc <thornton_dbl+0x35c>)
   18472:	bf18      	it	ne
   18474:	2301      	movne	r3, #1
   18476:	64fb      	str	r3, [r7, #76]	; 0x4c
   18478:	2000      	movs	r0, #0
   1847a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
   1847e:	f006 fac5 	bl	1ea0c <__aeabi_ddiv>
   18482:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   18484:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   18486:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
   1848a:	fa12 fa83 	uxtah	sl, r2, r3
   1848e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
   18492:	2600      	movs	r6, #0
   18494:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
   18498:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1849a:	4553      	cmp	r3, sl
   1849c:	f000 80d7 	beq.w	1864e <thornton_dbl+0x3ce>
   184a0:	f04f 0800 	mov.w	r8, #0
   184a4:	ec55 4b18 	vmov	r4, r5, d8
   184a8:	e04f      	b.n	1854a <thornton_dbl+0x2ca>
   184aa:	e8f6 8902 	ldrd	r8, r9, [r6], #8
   184ae:	e9d5 2300 	ldrd	r2, r3, [r5]
   184b2:	e8e4 8902 	strd	r8, r9, [r4], #8
   184b6:	4640      	mov	r0, r8
   184b8:	4649      	mov	r1, r9
   184ba:	f006 f97d 	bl	1e7b8 <__aeabi_dmul>
   184be:	4602      	mov	r2, r0
   184c0:	460b      	mov	r3, r1
   184c2:	e8ea 2302 	strd	r2, r3, [sl], #8
   184c6:	4640      	mov	r0, r8
   184c8:	4649      	mov	r1, r9
   184ca:	f006 f975 	bl	1e7b8 <__aeabi_dmul>
   184ce:	460b      	mov	r3, r1
   184d0:	4602      	mov	r2, r0
   184d2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
   184d6:	f005 ffb9 	bl	1e44c <__adddf3>
   184da:	6abb      	ldr	r3, [r7, #40]	; 0x28
   184dc:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
   184e0:	441d      	add	r5, r3
   184e2:	e7a7      	b.n	18434 <thornton_dbl+0x1b4>
   184e4:	e8f6 8902 	ldrd	r8, r9, [r6], #8
   184e8:	e9d5 2300 	ldrd	r2, r3, [r5]
   184ec:	e8e4 8902 	strd	r8, r9, [r4], #8
   184f0:	4640      	mov	r0, r8
   184f2:	4649      	mov	r1, r9
   184f4:	f006 f960 	bl	1e7b8 <__aeabi_dmul>
   184f8:	4602      	mov	r2, r0
   184fa:	460b      	mov	r3, r1
   184fc:	e8ea 2302 	strd	r2, r3, [sl], #8
   18500:	4640      	mov	r0, r8
   18502:	4649      	mov	r1, r9
   18504:	f006 f958 	bl	1e7b8 <__aeabi_dmul>
   18508:	460b      	mov	r3, r1
   1850a:	4602      	mov	r2, r0
   1850c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
   18510:	f005 ff9c 	bl	1e44c <__adddf3>
   18514:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18516:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
   1851a:	441d      	add	r5, r3
   1851c:	e798      	b.n	18450 <thornton_dbl+0x1d0>
   1851e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   18522:	18f1      	adds	r1, r6, r3
   18524:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
   18528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1852a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1852e:	e9d3 2300 	ldrd	r2, r3, [r3]
   18532:	e9d1 0100 	ldrd	r0, r1, [r1]
   18536:	f006 f93f 	bl	1e7b8 <__aeabi_dmul>
   1853a:	4602      	mov	r2, r0
   1853c:	460b      	mov	r3, r1
   1853e:	4620      	mov	r0, r4
   18540:	4629      	mov	r1, r5
   18542:	f005 ff83 	bl	1e44c <__adddf3>
   18546:	4604      	mov	r4, r0
   18548:	460d      	mov	r5, r1
   1854a:	fa0f f388 	sxth.w	r3, r8
   1854e:	455b      	cmp	r3, fp
   18550:	f108 0801 	add.w	r8, r8, #1
   18554:	dbe3      	blt.n	1851e <thornton_dbl+0x29e>
   18556:	f04f 0800 	mov.w	r8, #0
   1855a:	fa0f f388 	sxth.w	r3, r8
   1855e:	455b      	cmp	r3, fp
   18560:	f108 0801 	add.w	r8, r8, #1
   18564:	db1d      	blt.n	185a2 <thornton_dbl+0x322>
   18566:	4620      	mov	r0, r4
   18568:	4629      	mov	r1, r5
   1856a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
   1856e:	f006 f923 	bl	1e7b8 <__aeabi_dmul>
   18572:	f04f 0900 	mov.w	r9, #0
   18576:	4604      	mov	r4, r0
   18578:	460d      	mov	r5, r1
   1857a:	fa0f f389 	sxth.w	r3, r9
   1857e:	455b      	cmp	r3, fp
   18580:	f109 0901 	add.w	r9, r9, #1
   18584:	db2c      	blt.n	185e0 <thornton_dbl+0x360>
   18586:	f04f 0900 	mov.w	r9, #0
   1858a:	fa0f f389 	sxth.w	r3, r9
   1858e:	455b      	cmp	r3, fp
   18590:	f109 0901 	add.w	r9, r9, #1
   18594:	db40      	blt.n	18618 <thornton_dbl+0x398>
   18596:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   18598:	e8e3 4502 	strd	r4, r5, [r3], #8
   1859c:	445e      	add	r6, fp
   1859e:	663b      	str	r3, [r7, #96]	; 0x60
   185a0:	e77a      	b.n	18498 <thornton_dbl+0x218>
   185a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   185a4:	18f1      	adds	r1, r6, r3
   185a6:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
   185aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   185ac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   185b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   185b4:	e9d1 0100 	ldrd	r0, r1, [r1]
   185b8:	f006 f8fe 	bl	1e7b8 <__aeabi_dmul>
   185bc:	4602      	mov	r2, r0
   185be:	460b      	mov	r3, r1
   185c0:	4620      	mov	r0, r4
   185c2:	4629      	mov	r1, r5
   185c4:	f005 ff42 	bl	1e44c <__adddf3>
   185c8:	4604      	mov	r4, r0
   185ca:	460d      	mov	r5, r1
   185cc:	e7c5      	b.n	1855a <thornton_dbl+0x2da>
   185ce:	bf00      	nop
	...
   185d8:	3cb00000 	.word	0x3cb00000
   185dc:	3ff00000 	.word	0x3ff00000
   185e0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   185e4:	61bc      	str	r4, [r7, #24]
   185e6:	eb06 0803 	add.w	r8, r6, r3
   185ea:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
   185ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
   185f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   185f4:	f105 4200 	add.w	r2, r5, #2147483648	; 0x80000000
   185f8:	61fa      	str	r2, [r7, #28]
   185fa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   185fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   18602:	f006 f8d9 	bl	1e7b8 <__aeabi_dmul>
   18606:	4602      	mov	r2, r0
   18608:	460b      	mov	r3, r1
   1860a:	e9d8 0100 	ldrd	r0, r1, [r8]
   1860e:	f005 ff1d 	bl	1e44c <__adddf3>
   18612:	e9c8 0100 	strd	r0, r1, [r8]
   18616:	e7b0      	b.n	1857a <thornton_dbl+0x2fa>
   18618:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1861a:	613c      	str	r4, [r7, #16]
   1861c:	eb06 0803 	add.w	r8, r6, r3
   18620:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
   18624:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   18626:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1862a:	f105 4200 	add.w	r2, r5, #2147483648	; 0x80000000
   1862e:	617a      	str	r2, [r7, #20]
   18630:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   18634:	e9d3 2300 	ldrd	r2, r3, [r3]
   18638:	f006 f8be 	bl	1e7b8 <__aeabi_dmul>
   1863c:	4602      	mov	r2, r0
   1863e:	460b      	mov	r3, r1
   18640:	e9d8 0100 	ldrd	r0, r1, [r8]
   18644:	f005 ff02 	bl	1e44c <__adddf3>
   18648:	e9c8 0100 	strd	r0, r1, [r8]
   1864c:	e79d      	b.n	1858a <thornton_dbl+0x30a>
   1864e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   18650:	68ba      	ldr	r2, [r7, #8]
   18652:	f8d7 d020 	ldr.w	sp, [r7, #32]
   18656:	3b01      	subs	r3, #1
   18658:	65fb      	str	r3, [r7, #92]	; 0x5c
   1865a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1865c:	eba3 030b 	sub.w	r3, r3, fp
   18660:	643b      	str	r3, [r7, #64]	; 0x40
   18662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18664:	4413      	add	r3, r2
   18666:	63fb      	str	r3, [r7, #60]	; 0x3c
   18668:	687a      	ldr	r2, [r7, #4]
   1866a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1866c:	4413      	add	r3, r2
   1866e:	65bb      	str	r3, [r7, #88]	; 0x58
   18670:	e64e      	b.n	18310 <thornton_dbl+0x90>
   18672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   18674:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
   18678:	4353      	muls	r3, r2
   1867a:	00db      	lsls	r3, r3, #3
   1867c:	4418      	add	r0, r3
   1867e:	e9d0 4500 	ldrd	r4, r5, [r0]
   18682:	6a78      	ldr	r0, [r7, #36]	; 0x24
   18684:	4418      	add	r0, r3
   18686:	e9c0 4500 	strd	r4, r5, [r0]
   1868a:	6d78      	ldr	r0, [r7, #84]	; 0x54
   1868c:	4403      	add	r3, r0
   1868e:	e9c3 8900 	strd	r8, r9, [r3]
   18692:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
   18696:	fb0b f302 	mul.w	r3, fp, r2
   1869a:	00db      	lsls	r3, r3, #3
   1869c:	18c5      	adds	r5, r0, r3
   1869e:	6d78      	ldr	r0, [r7, #84]	; 0x54
   186a0:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
   186a4:	4403      	add	r3, r0
   186a6:	2000      	movs	r0, #0
   186a8:	b206      	sxth	r6, r0
   186aa:	42b2      	cmp	r2, r6
   186ac:	dc01      	bgt.n	186b2 <thornton_dbl+0x432>
   186ae:	3101      	adds	r1, #1
   186b0:	e638      	b.n	18324 <thornton_dbl+0xa4>
   186b2:	ecb5 7b02 	vldmia	r5!, {d7}
   186b6:	6e7e      	ldr	r6, [r7, #100]	; 0x64
   186b8:	ed84 7b00 	vstr	d7, [r4]
   186bc:	3001      	adds	r0, #1
   186be:	eca3 6b02 	vstmia	r3!, {d6}
   186c2:	4434      	add	r4, r6
   186c4:	e7f0      	b.n	186a8 <thornton_dbl+0x428>
   186c6:	bf00      	nop

000186c8 <bierman_dbl>:
   186c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   186cc:	ed2d 8b04 	vpush	{d8-d9}
   186d0:	eeb0 8a40 	vmov.f32	s16, s0
   186d4:	eef0 8a60 	vmov.f32	s17, s1
   186d8:	b095      	sub	sp, #84	; 0x54
   186da:	af00      	add	r7, sp, #0
   186dc:	4682      	mov	sl, r0
   186de:	62bb      	str	r3, [r7, #40]	; 0x28
   186e0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
   186e4:	637b      	str	r3, [r7, #52]	; 0x34
   186e6:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
   186ea:	f10b 030e 	add.w	r3, fp, #14
   186ee:	08db      	lsrs	r3, r3, #3
   186f0:	00db      	lsls	r3, r3, #3
   186f2:	ebad 0d03 	sub.w	sp, sp, r3
   186f6:	466c      	mov	r4, sp
   186f8:	6079      	str	r1, [r7, #4]
   186fa:	ebad 0d03 	sub.w	sp, sp, r3
   186fe:	61ba      	str	r2, [r7, #24]
   18700:	2000      	movs	r0, #0
   18702:	ec53 2b11 	vmov	r2, r3, d1
   18706:	4970      	ldr	r1, [pc, #448]	; (188c8 <bierman_dbl+0x200>)
   18708:	f8c7 d044 	str.w	sp, [r7, #68]	; 0x44
   1870c:	ed87 1b0e 	vstr	d1, [r7, #56]	; 0x38
   18710:	f006 f97c 	bl	1ea0c <__aeabi_ddiv>
   18714:	ed9f 9b6a 	vldr	d9, [pc, #424]	; 188c0 <bierman_dbl+0x1f8>
   18718:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
   1871c:	eb0a 030b 	add.w	r3, sl, fp
   18720:	627c      	str	r4, [r7, #36]	; 0x24
   18722:	643b      	str	r3, [r7, #64]	; 0x40
   18724:	4626      	mov	r6, r4
   18726:	2500      	movs	r5, #0
   18728:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1872a:	b2ab      	uxth	r3, r5
   1872c:	429a      	cmp	r2, r3
   1872e:	d820      	bhi.n	18772 <bierman_dbl+0xaa>
   18730:	f10b 0308 	add.w	r3, fp, #8
   18734:	61fb      	str	r3, [r7, #28]
   18736:	f8d7 a028 	ldr.w	sl, [r7, #40]	; 0x28
   1873a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1873c:	633b      	str	r3, [r7, #48]	; 0x30
   1873e:	eb04 060b 	add.w	r6, r4, fp
   18742:	461d      	mov	r5, r3
   18744:	46d0      	mov	r8, sl
   18746:	42b4      	cmp	r4, r6
   18748:	d12e      	bne.n	187a8 <bierman_dbl+0xe0>
   1874a:	2300      	movs	r3, #0
   1874c:	6c7c      	ldr	r4, [r7, #68]	; 0x44
   1874e:	643b      	str	r3, [r7, #64]	; 0x40
   18750:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
   18754:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   18756:	429a      	cmp	r2, r3
   18758:	d831      	bhi.n	187be <bierman_dbl+0xf6>
   1875a:	687e      	ldr	r6, [r7, #4]
   1875c:	eb06 0a0b 	add.w	sl, r6, fp
   18760:	4556      	cmp	r6, sl
   18762:	f040 8095 	bne.w	18890 <bierman_dbl+0x1c8>
   18766:	3754      	adds	r7, #84	; 0x54
   18768:	46bd      	mov	sp, r7
   1876a:	ecbd 8b04 	vpop	{d8-d9}
   1876e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18772:	69bb      	ldr	r3, [r7, #24]
   18774:	eca6 9b02 	vstmia	r6!, {d9}
   18778:	eb03 09c5 	add.w	r9, r3, r5, lsl #3
   1877c:	46d0      	mov	r8, sl
   1877e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   18780:	4598      	cmp	r8, r3
   18782:	d101      	bne.n	18788 <bierman_dbl+0xc0>
   18784:	3501      	adds	r5, #1
   18786:	e7cf      	b.n	18728 <bierman_dbl+0x60>
   18788:	e9d9 2300 	ldrd	r2, r3, [r9]
   1878c:	e8f8 0102 	ldrd	r0, r1, [r8], #8
   18790:	f006 f812 	bl	1e7b8 <__aeabi_dmul>
   18794:	4602      	mov	r2, r0
   18796:	460b      	mov	r3, r1
   18798:	e956 0102 	ldrd	r0, r1, [r6, #-8]
   1879c:	f005 fe56 	bl	1e44c <__adddf3>
   187a0:	44d9      	add	r9, fp
   187a2:	e946 0102 	strd	r0, r1, [r6, #-8]
   187a6:	e7ea      	b.n	1877e <bierman_dbl+0xb6>
   187a8:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   187ac:	e9d8 0100 	ldrd	r0, r1, [r8]
   187b0:	f006 f802 	bl	1e7b8 <__aeabi_dmul>
   187b4:	69fb      	ldr	r3, [r7, #28]
   187b6:	e8e5 0102 	strd	r0, r1, [r5], #8
   187ba:	4498      	add	r8, r3
   187bc:	e7c3      	b.n	18746 <bierman_dbl+0x7e>
   187be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   187c0:	e8f3 8902 	ldrd	r8, r9, [r3], #8
   187c4:	627b      	str	r3, [r7, #36]	; 0x24
   187c6:	f104 0308 	add.w	r3, r4, #8
   187ca:	623b      	str	r3, [r7, #32]
   187cc:	4640      	mov	r0, r8
   187ce:	e9d4 2300 	ldrd	r2, r3, [r4]
   187d2:	4649      	mov	r1, r9
   187d4:	f005 fff0 	bl	1e7b8 <__aeabi_dmul>
   187d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
   187dc:	f005 fe36 	bl	1e44c <__adddf3>
   187e0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   187e4:	617b      	str	r3, [r7, #20]
   187e6:	f8c7 8010 	str.w	r8, [r7, #16]
   187ea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
   187ee:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
   187f2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   187f6:	f005 ffdf 	bl	1e7b8 <__aeabi_dmul>
   187fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   187fe:	e9c7 0102 	strd	r0, r1, [r7, #8]
   18802:	2000      	movs	r0, #0
   18804:	4930      	ldr	r1, [pc, #192]	; (188c8 <bierman_dbl+0x200>)
   18806:	f006 f901 	bl	1ea0c <__aeabi_ddiv>
   1880a:	4602      	mov	r2, r0
   1880c:	460b      	mov	r3, r1
   1880e:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
   18812:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
   18816:	f005 ffcf 	bl	1e7b8 <__aeabi_dmul>
   1881a:	4602      	mov	r2, r0
   1881c:	460b      	mov	r3, r1
   1881e:	e9da 0100 	ldrd	r0, r1, [sl]
   18822:	f005 ffc9 	bl	1e7b8 <__aeabi_dmul>
   18826:	69bb      	ldr	r3, [r7, #24]
   18828:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1882a:	6c7d      	ldr	r5, [r7, #68]	; 0x44
   1882c:	e9ca 0100 	strd	r0, r1, [sl]
   18830:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
   18834:	42a5      	cmp	r5, r4
   18836:	d10a      	bne.n	1884e <bierman_dbl+0x186>
   18838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1883a:	6a3c      	ldr	r4, [r7, #32]
   1883c:	3301      	adds	r3, #1
   1883e:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
   18842:	643b      	str	r3, [r7, #64]	; 0x40
   18844:	69fb      	ldr	r3, [r7, #28]
   18846:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
   1884a:	449a      	add	sl, r3
   1884c:	e780      	b.n	18750 <bierman_dbl+0x88>
   1884e:	e9d5 8900 	ldrd	r8, r9, [r5]
   18852:	ed96 7b00 	vldr	d7, [r6]
   18856:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1885a:	4640      	mov	r0, r8
   1885c:	4649      	mov	r1, r9
   1885e:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
   18862:	f005 ffa9 	bl	1e7b8 <__aeabi_dmul>
   18866:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
   1886a:	f005 fdef 	bl	1e44c <__adddf3>
   1886e:	6a3b      	ldr	r3, [r7, #32]
   18870:	e9c6 0100 	strd	r0, r1, [r6]
   18874:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   18878:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
   1887c:	f005 ff9c 	bl	1e7b8 <__aeabi_dmul>
   18880:	4642      	mov	r2, r8
   18882:	464b      	mov	r3, r9
   18884:	f005 fde2 	bl	1e44c <__adddf3>
   18888:	445e      	add	r6, fp
   1888a:	e8e5 0102 	strd	r0, r1, [r5], #8
   1888e:	e7d1      	b.n	18834 <bierman_dbl+0x16c>
   18890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   18892:	e8f3 8902 	ldrd	r8, r9, [r3], #8
   18896:	e9d6 4500 	ldrd	r4, r5, [r6]
   1889a:	633b      	str	r3, [r7, #48]	; 0x30
   1889c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
   188a0:	ec53 2b18 	vmov	r2, r3, d8
   188a4:	f005 ff88 	bl	1e7b8 <__aeabi_dmul>
   188a8:	4642      	mov	r2, r8
   188aa:	464b      	mov	r3, r9
   188ac:	f005 ff84 	bl	1e7b8 <__aeabi_dmul>
   188b0:	4622      	mov	r2, r4
   188b2:	462b      	mov	r3, r5
   188b4:	f005 fdca 	bl	1e44c <__adddf3>
   188b8:	e8e6 0102 	strd	r0, r1, [r6], #8
   188bc:	e750      	b.n	18760 <bierman_dbl+0x98>
   188be:	bf00      	nop
	...
   188c8:	3ff00000 	.word	0x3ff00000

000188cc <rx_timeout_cb>:
 *
 * @return true on sucess
 */
static bool
rx_timeout_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
   188cc:	b570      	push	{r4, r5, r6, lr}
    struct nrng_instance * nrng = (struct nrng_instance *)cbs->inst_ptr;
   188ce:	684e      	ldr	r6, [r1, #4]
   188d0:	f8b6 306a 	ldrh.w	r3, [r6, #106]	; 0x6a
    if(dpl_sem_get_count(&nrng->sem) == 1)
   188d4:	2b01      	cmp	r3, #1
{
   188d6:	4605      	mov	r5, r0
    if(dpl_sem_get_count(&nrng->sem) == 1)
   188d8:	d01c      	beq.n	18914 <rx_timeout_cb+0x48>
        return false;

    if(dpl_sem_get_count(&nrng->sem) == 0){
   188da:	b10b      	cbz	r3, 188e0 <rx_timeout_cb+0x14>
            }
        }
        dpl_error_t err = dpl_sem_release(&nrng->sem);
        assert(err == DPL_OK);
    }
    return true;
   188dc:	2001      	movs	r0, #1
}
   188de:	bd70      	pop	{r4, r5, r6, pc}
        SS_STATS_INC(rx_timeout);
   188e0:	4a0d      	ldr	r2, [pc, #52]	; (18918 <rx_timeout_cb+0x4c>)
        if(!(SLIST_EMPTY(&inst->interface_cbs))){
   188e2:	f8d0 4530 	ldr.w	r4, [r0, #1328]	; 0x530
        SS_STATS_INC(rx_timeout);
   188e6:	6993      	ldr	r3, [r2, #24]
   188e8:	3301      	adds	r3, #1
   188ea:	6193      	str	r3, [r2, #24]
        if(!(SLIST_EMPTY(&inst->interface_cbs))){
   188ec:	b134      	cbz	r4, 188fc <rx_timeout_cb+0x30>
            if (cbs!=NULL && cbs->complete_cb)
   188ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   188f0:	b113      	cbz	r3, 188f8 <rx_timeout_cb+0x2c>
                if(cbs->complete_cb(inst, cbs)) continue;
   188f2:	4621      	mov	r1, r4
   188f4:	4628      	mov	r0, r5
   188f6:	4798      	blx	r3
            SLIST_FOREACH(cbs, &inst->interface_cbs, next){
   188f8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   188fa:	e7f7      	b.n	188ec <rx_timeout_cb+0x20>
    return (dpl_error_t)os_sem_release(&sem->sem);
   188fc:	f106 0064 	add.w	r0, r6, #100	; 0x64
   18900:	f7f4 feaa 	bl	d658 <os_sem_release>
        assert(err == DPL_OK);
   18904:	2800      	cmp	r0, #0
   18906:	d0e9      	beq.n	188dc <rx_timeout_cb+0x10>
   18908:	2300      	movs	r3, #0
   1890a:	461a      	mov	r2, r3
   1890c:	4619      	mov	r1, r3
   1890e:	4618      	mov	r0, r3
   18910:	f7f3 ff74 	bl	c7fc <__assert_func>
        return false;
   18914:	2000      	movs	r0, #0
   18916:	e7e2      	b.n	188de <rx_timeout_cb+0x12>
   18918:	20006bf0 	.word	0x20006bf0

0001891c <reset_cb.part.0>:
 *
 * @param inst   Pointer to struct uwb_dev.
 * @return true on sucess
 */
static bool
reset_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
   1891c:	b508      	push	{r3, lr}
{
    struct nrng_instance * nrng = (struct nrng_instance *)cbs->inst_ptr;
    if(dpl_sem_get_count(&nrng->sem) == 0){
        dpl_error_t err = dpl_sem_release(&nrng->sem);
        assert(err == DPL_OK);
   1891e:	2300      	movs	r3, #0
   18920:	461a      	mov	r2, r3
   18922:	4619      	mov	r1, r3
   18924:	4618      	mov	r0, r3
   18926:	f7f3 ff69 	bl	c7fc <__assert_func>
	...

0001892c <reset_cb>:
    struct nrng_instance * nrng = (struct nrng_instance *)cbs->inst_ptr;
   1892c:	6848      	ldr	r0, [r1, #4]
{
   1892e:	b508      	push	{r3, lr}
    if(dpl_sem_get_count(&nrng->sem) == 0){
   18930:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
   18934:	b95b      	cbnz	r3, 1894e <reset_cb+0x22>
   18936:	3064      	adds	r0, #100	; 0x64
   18938:	f7f4 fe8e 	bl	d658 <os_sem_release>
        assert(err == DPL_OK);
   1893c:	b108      	cbz	r0, 18942 <reset_cb+0x16>
   1893e:	f7ff ffed 	bl	1891c <reset_cb.part.0>
        SS_STATS_INC(reset);
   18942:	4a04      	ldr	r2, [pc, #16]	; (18954 <reset_cb+0x28>)
   18944:	6a53      	ldr	r3, [r2, #36]	; 0x24
   18946:	3301      	adds	r3, #1
   18948:	6253      	str	r3, [r2, #36]	; 0x24
        return true;
   1894a:	2001      	movs	r0, #1
    }
    else
        return false;
}
   1894c:	bd08      	pop	{r3, pc}
        return false;
   1894e:	2000      	movs	r0, #0
   18950:	e7fc      	b.n	1894c <reset_cb+0x20>
   18952:	bf00      	nop
   18954:	20006bf0 	.word	0x20006bf0

00018958 <rx_error_cb>:
    if(inst->fctrl != FCNTL_IEEE_RANGE_16)
   18958:	f8b0 24e0 	ldrh.w	r2, [r0, #1248]	; 0x4e0
{
   1895c:	b508      	push	{r3, lr}
    if(inst->fctrl != FCNTL_IEEE_RANGE_16)
   1895e:	f648 0341 	movw	r3, #34881	; 0x8841
   18962:	429a      	cmp	r2, r3
   18964:	d10d      	bne.n	18982 <rx_error_cb+0x2a>
    struct nrng_instance * nrng = (struct nrng_instance *)cbs->inst_ptr;
   18966:	6848      	ldr	r0, [r1, #4]
    if(dpl_sem_get_count(&nrng->sem) == 0){
   18968:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
   1896c:	b94b      	cbnz	r3, 18982 <rx_error_cb+0x2a>
        SS_STATS_INC(rx_error);
   1896e:	4a07      	ldr	r2, [pc, #28]	; (1898c <rx_error_cb+0x34>)
   18970:	6953      	ldr	r3, [r2, #20]
   18972:	3064      	adds	r0, #100	; 0x64
   18974:	3301      	adds	r3, #1
   18976:	6153      	str	r3, [r2, #20]
   18978:	f7f4 fe6e 	bl	d658 <os_sem_release>
        assert(err == DPL_OK);
   1897c:	b118      	cbz	r0, 18986 <rx_error_cb+0x2e>
   1897e:	f7ff ffcd 	bl	1891c <reset_cb.part.0>
        return false;
   18982:	2000      	movs	r0, #0
}
   18984:	bd08      	pop	{r3, pc}
        return true;
   18986:	2001      	movs	r0, #1
   18988:	e7fc      	b.n	18984 <rx_error_cb+0x2c>
   1898a:	bf00      	nop
   1898c:	20006bf0 	.word	0x20006bf0

00018990 <rx_complete_cb>:
 *
 * @return true on sucess
 */
static bool
rx_complete_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
   18990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    struct nrng_instance * nrng = (struct nrng_instance *)cbs->inst_ptr;

    if(inst->fctrl != FCNTL_IEEE_RANGE_16)
   18994:	f8b0 24e0 	ldrh.w	r2, [r0, #1248]	; 0x4e0
   18998:	f648 0341 	movw	r3, #34881	; 0x8841
   1899c:	429a      	cmp	r2, r3
{
   1899e:	b087      	sub	sp, #28
   189a0:	4604      	mov	r4, r0
    if(inst->fctrl != FCNTL_IEEE_RANGE_16)
   189a2:	d108      	bne.n	189b6 <rx_complete_cb+0x26>
    struct nrng_instance * nrng = (struct nrng_instance *)cbs->inst_ptr;
   189a4:	684f      	ldr	r7, [r1, #4]
        return false;

    if(dpl_sem_get_count(&nrng->sem) == 1){
   189a6:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
   189aa:	2b01      	cmp	r3, #1
   189ac:	d105      	bne.n	189ba <rx_complete_cb+0x2a>
        // unsolicited inbound
        SS_STATS_INC(rx_unsolicited);
   189ae:	4ac6      	ldr	r2, [pc, #792]	; (18cc8 <rx_complete_cb+0x338>)
   189b0:	6a13      	ldr	r3, [r2, #32]
   189b2:	3301      	adds	r3, #1
   189b4:	6213      	str	r3, [r2, #32]
        return false;
   189b6:	2000      	movs	r0, #0
   189b8:	e012      	b.n	189e0 <rx_complete_cb+0x50>
        return false;
    }

    struct uwb_rng_config * config = nrng_get_config(nrng, UWB_DATA_CODE_SS_TWR_NRNG);
   189ba:	f44f 7198 	mov.w	r1, #304	; 0x130
   189be:	4638      	mov	r0, r7
   189c0:	f7fe f9f4 	bl	16dac <nrng_get_config>
    nrng_request_frame_t * _frame = (nrng_request_frame_t * )inst->rxbuf;
   189c4:	f8d4 54fc 	ldr.w	r5, [r4, #1276]	; 0x4fc

    if (_frame->dst_address != inst->my_short_address && _frame->dst_address != UWB_BROADCAST_ADDRESS)
   189c8:	f8b4 24b6 	ldrh.w	r2, [r4, #1206]	; 0x4b6
   189cc:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   189d0:	429a      	cmp	r2, r3
    struct uwb_rng_config * config = nrng_get_config(nrng, UWB_DATA_CODE_SS_TWR_NRNG);
   189d2:	4681      	mov	r9, r0
    if (_frame->dst_address != inst->my_short_address && _frame->dst_address != UWB_BROADCAST_ADDRESS)
   189d4:	d007      	beq.n	189e6 <rx_complete_cb+0x56>
   189d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   189da:	4293      	cmp	r3, r2
   189dc:	d003      	beq.n	189e6 <rx_complete_cb+0x56>
            }
        default:
                return false;
            break;
        }
    return true;
   189de:	2001      	movs	r0, #1
}
   189e0:	b007      	add	sp, #28
   189e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    SS_STATS_INC(rx_complete);
   189e6:	4ab8      	ldr	r2, [pc, #736]	; (18cc8 <rx_complete_cb+0x338>)
   189e8:	69d3      	ldr	r3, [r2, #28]
   189ea:	3301      	adds	r3, #1
   189ec:	61d3      	str	r3, [r2, #28]
    switch(_frame->code){
   189ee:	f8b5 3009 	ldrh.w	r3, [r5, #9]
   189f2:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
   189f6:	d06f      	beq.n	18ad8 <rx_complete_cb+0x148>
   189f8:	f240 1231 	movw	r2, #305	; 0x131
   189fc:	4293      	cmp	r3, r2
   189fe:	d1da      	bne.n	189b6 <rx_complete_cb+0x26>
                if (inst->frame_len < sizeof(nrng_response_frame_t))
   18a00:	f8b4 34e2 	ldrh.w	r3, [r4, #1250]	; 0x4e2
   18a04:	2b13      	cmp	r3, #19
   18a06:	d9ea      	bls.n	189de <rx_complete_cb+0x4e>
                if (nrng->seq_num != _frame->seq_num)
   18a08:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
   18a0c:	78ab      	ldrb	r3, [r5, #2]
   18a0e:	429a      	cmp	r2, r3
   18a10:	d1e5      	bne.n	189de <rx_complete_cb+0x4e>
                uint16_t idx = _frame->slot_id;
   18a12:	f895 8013 	ldrb.w	r8, [r5, #19]
                nrng_frame_t * frame = nrng->frames[(nrng->idx + idx)%nrng->nframes];
   18a16:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
   18a1a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
   18a1e:	4443      	add	r3, r8
   18a20:	fbb3 f1f2 	udiv	r1, r3, r2
   18a24:	fb02 3311 	mls	r3, r2, r1, r3
   18a28:	3332      	adds	r3, #50	; 0x32
                memcpy(frame, inst->rxbuf, sizeof(nrng_response_frame_t));
   18a2a:	f105 0214 	add.w	r2, r5, #20
                nrng_frame_t * frame = nrng->frames[(nrng->idx + idx)%nrng->nframes];
   18a2e:	f857 6023 	ldr.w	r6, [r7, r3, lsl #2]
                memcpy(frame, inst->rxbuf, sizeof(nrng_response_frame_t));
   18a32:	4633      	mov	r3, r6
   18a34:	f855 1b04 	ldr.w	r1, [r5], #4
   18a38:	f843 1b04 	str.w	r1, [r3], #4
   18a3c:	4295      	cmp	r5, r2
   18a3e:	d1f9      	bne.n	18a34 <rx_complete_cb+0xa4>
                if (inst->status.lde_error == 0)
   18a40:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   18a44:	075a      	lsls	r2, r3, #29
                   response_timestamp = inst->rxtimestamp;
   18a46:	bf58      	it	pl
   18a48:	f504 639e 	addpl.w	r3, r4, #1264	; 0x4f0
                struct uwb_ccp_instance *ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(inst, UWBEXT_CCP);
   18a4c:	f04f 0101 	mov.w	r1, #1
   18a50:	4620      	mov	r0, r4
                   response_timestamp = inst->rxtimestamp;
   18a52:	bf52      	itee	pl
   18a54:	e953 ab02 	ldrdpl	sl, fp, [r3, #-8]
                uint64_t response_timestamp = 0x0;
   18a58:	f04f 0a00 	movmi.w	sl, #0
   18a5c:	f04f 0b00 	movmi.w	fp, #0
                struct uwb_ccp_instance *ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(inst, UWBEXT_CCP);
   18a60:	f7ef ffd4 	bl	8a0c <uwb_mac_find_cb_inst_ptr>
    return (dev->uw_funcs->uf_read_txtime(dev));
   18a64:	6a63      	ldr	r3, [r4, #36]	; 0x24
                struct uwb_wcs_instance * wcs = ccp->wcs;
   18a66:	6e85      	ldr	r5, [r0, #104]	; 0x68
   18a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   18a6a:	4620      	mov	r0, r4
   18a6c:	4798      	blx	r3
   18a6e:	4602      	mov	r2, r0
   18a70:	460b      	mov	r3, r1
                frame->request_timestamp = uwb_wcs_local_to_master(wcs, uwb_read_txtime(inst)) & 0xFFFFFFFFULL;
   18a72:	4628      	mov	r0, r5
   18a74:	f7f7 fab4 	bl	ffe0 <uwb_wcs_local_to_master>
                frame->response_timestamp = uwb_wcs_local_to_master(wcs, response_timestamp) & 0xFFFFFFFFULL;
   18a78:	4652      	mov	r2, sl
                frame->request_timestamp = uwb_wcs_local_to_master(wcs, uwb_read_txtime(inst)) & 0xFFFFFFFFULL;
   18a7a:	6170      	str	r0, [r6, #20]
                frame->response_timestamp = uwb_wcs_local_to_master(wcs, response_timestamp) & 0xFFFFFFFFULL;
   18a7c:	465b      	mov	r3, fp
   18a7e:	4628      	mov	r0, r5
   18a80:	f7f7 faae 	bl	ffe0 <uwb_wcs_local_to_master>
                frame->dst_address = frame->src_address;
   18a84:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   18a88:	f8a6 3005 	strh.w	r3, [r6, #5]
                frame->src_address = inst->my_short_address;
   18a8c:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
   18a90:	f8a6 3007 	strh.w	r3, [r6, #7]
                frame->code = UWB_DATA_CODE_SS_TWR_NRNG_FINAL;
   18a94:	2300      	movs	r3, #0
                frame->carrier_integrator  = 0.0l;
   18a96:	7733      	strb	r3, [r6, #28]
   18a98:	7773      	strb	r3, [r6, #29]
   18a9a:	77b3      	strb	r3, [r6, #30]
   18a9c:	77f3      	strb	r3, [r6, #31]
                if(inst->config.rxdiag_enable) {
   18a9e:	f894 352c 	ldrb.w	r3, [r4, #1324]	; 0x52c
                frame->response_timestamp = uwb_wcs_local_to_master(wcs, response_timestamp) & 0xFFFFFFFFULL;
   18aa2:	61b0      	str	r0, [r6, #24]
                frame->code = UWB_DATA_CODE_SS_TWR_NRNG_FINAL;
   18aa4:	2232      	movs	r2, #50	; 0x32
   18aa6:	7272      	strb	r2, [r6, #9]
                if(inst->config.rxdiag_enable) {
   18aa8:	065b      	lsls	r3, r3, #25
                frame->code = UWB_DATA_CODE_SS_TWR_NRNG_FINAL;
   18aaa:	f04f 0201 	mov.w	r2, #1
   18aae:	72b2      	strb	r2, [r6, #10]
                if(inst->config.rxdiag_enable) {
   18ab0:	d506      	bpl.n	18ac0 <rx_complete_cb+0x130>
                    memcpy(&frame->diag, inst->rxdiag, inst->rxdiag->rxd_len);
   18ab2:	f8d4 14f8 	ldr.w	r1, [r4, #1272]	; 0x4f8
   18ab6:	f106 0020 	add.w	r0, r6, #32
   18aba:	880a      	ldrh	r2, [r1, #0]
   18abc:	f7f7 fbd8 	bl	10270 <memcpy>
                if(idx == nrng->nnodes-1){
   18ac0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
   18ac4:	6a62      	ldr	r2, [r4, #36]	; 0x24
   18ac6:	1e59      	subs	r1, r3, #1
   18ac8:	4588      	cmp	r8, r1
   18aca:	f040 80e2 	bne.w	18c92 <rx_complete_cb+0x302>
   18ace:	6a53      	ldr	r3, [r2, #36]	; 0x24
   18ad0:	2101      	movs	r1, #1
   18ad2:	4620      	mov	r0, r4
   18ad4:	4798      	blx	r3
   18ad6:	e782      	b.n	189de <rx_complete_cb+0x4e>
                if (inst->frame_len < sizeof(nrng_request_frame_t))
   18ad8:	f8b4 34e2 	ldrh.w	r3, [r4, #1250]	; 0x4e2
   18adc:	2b12      	cmp	r3, #18
   18ade:	f67f af7e 	bls.w	189de <rx_complete_cb+0x4e>
                if (_frame->ptype != PTYPE_CELL)
   18ae2:	7aeb      	ldrb	r3, [r5, #11]
   18ae4:	079b      	lsls	r3, r3, #30
   18ae6:	f47f af7a 	bne.w	189de <rx_complete_cb+0x4e>
                if (_frame->cell_id != inst->cell_id)
   18aea:	7c2a      	ldrb	r2, [r5, #16]
   18aec:	7beb      	ldrb	r3, [r5, #15]
   18aee:	f002 013f 	and.w	r1, r2, #63	; 0x3f
   18af2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   18af6:	f8b4 14c4 	ldrh.w	r1, [r4, #1220]	; 0x4c4
   18afa:	428b      	cmp	r3, r1
   18afc:	f47f af6f 	bne.w	189de <rx_complete_cb+0x4e>
                if (_frame->slot_mask & (1UL << inst->slot_id))
   18b00:	7c68      	ldrb	r0, [r5, #17]
   18b02:	7cab      	ldrb	r3, [r5, #18]
   18b04:	f8b4 14c2 	ldrh.w	r1, [r4, #1218]	; 0x4c2
   18b08:	0080      	lsls	r0, r0, #2
   18b0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   18b0e:	ea40 1092 	orr.w	r0, r0, r2, lsr #6
   18b12:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
   18b16:	fa20 f301 	lsr.w	r3, r0, r1
   18b1a:	07de      	lsls	r6, r3, #31
   18b1c:	f57f af5f 	bpl.w	189de <rx_complete_cb+0x4e>
                    slot_idx = BitIndex(_frame->slot_mask, 1UL << inst->slot_id, SLOT_POSITION);
   18b20:	2201      	movs	r2, #1
   18b22:	fa02 f101 	lsl.w	r1, r2, r1
   18b26:	f000 f924 	bl	18d72 <BitIndex>
                nrng_final_frame_t * frame = (nrng_final_frame_t *) nrng->frames[(++nrng->idx)%nrng->nframes];
   18b2a:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
   18b2e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
                    slot_idx = BitIndex(_frame->slot_mask, 1UL << inst->slot_id, SLOT_POSITION);
   18b32:	9001      	str	r0, [sp, #4]
                nrng_final_frame_t * frame = (nrng_final_frame_t *) nrng->frames[(++nrng->idx)%nrng->nframes];
   18b34:	3301      	adds	r3, #1
   18b36:	b29b      	uxth	r3, r3
   18b38:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
   18b3c:	fbb3 f1f2 	udiv	r1, r3, r2
   18b40:	fb02 3311 	mls	r3, r2, r1, r3
   18b44:	b29b      	uxth	r3, r3
   18b46:	3332      	adds	r3, #50	; 0x32
   18b48:	f857 6023 	ldr.w	r6, [r7, r3, lsl #2]
                memcpy(frame->array, inst->rxbuf, sizeof(nrng_request_frame_t));
   18b4c:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
   18b50:	4632      	mov	r2, r6
   18b52:	f103 0110 	add.w	r1, r3, #16
   18b56:	f853 0b04 	ldr.w	r0, [r3], #4
   18b5a:	f842 0b04 	str.w	r0, [r2], #4
   18b5e:	428b      	cmp	r3, r1
   18b60:	d1f9      	bne.n	18b56 <rx_complete_cb+0x1c6>
   18b62:	8819      	ldrh	r1, [r3, #0]
   18b64:	8011      	strh	r1, [r2, #0]
   18b66:	789b      	ldrb	r3, [r3, #2]
   18b68:	7093      	strb	r3, [r2, #2]
                uint64_t request_timestamp = inst->rxtimestamp;
   18b6a:	f8d4 34ec 	ldr.w	r3, [r4, #1260]	; 0x4ec
   18b6e:	9303      	str	r3, [sp, #12]
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
   18b70:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18b72:	f8d4 24e8 	ldr.w	r2, [r4, #1256]	; 0x4e8
   18b76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   18b78:	9202      	str	r2, [sp, #8]
   18b7a:	2114      	movs	r1, #20
   18b7c:	4620      	mov	r0, r4
                            + (((uint64_t)config->tx_holdoff_delay
   18b7e:	f8d9 a004 	ldr.w	sl, [r9, #4]
                            + (uint64_t)(slot_idx * ((uint64_t)config->tx_guard_delay
   18b82:	f8d9 9008 	ldr.w	r9, [r9, #8]
   18b86:	4798      	blx	r3
                            + (uint64_t)(uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst, sizeof(nrng_response_frame_t)))))))<< 16);
   18b88:	f005 fdac 	bl	1e6e4 <__aeabi_i2d>
   18b8c:	a34c      	add	r3, pc, #304	; (adr r3, 18cc0 <rx_complete_cb+0x330>)
   18b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
   18b92:	f005 ff3b 	bl	1ea0c <__aeabi_ddiv>
   18b96:	f006 f9f7 	bl	1ef88 <__aeabi_d2ulz>
                            + (uint64_t)(slot_idx * ((uint64_t)config->tx_guard_delay
   18b9a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
                            + (uint64_t)(uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst, sizeof(nrng_response_frame_t)))))))<< 16);
   18b9e:	eb10 0009 	adds.w	r0, r0, r9
                            + (uint64_t)(slot_idx * ((uint64_t)config->tx_guard_delay
   18ba2:	fba0 0903 	umull	r0, r9, r0, r3
                            + (uint64_t)(uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst, sizeof(nrng_response_frame_t)))))))<< 16);
   18ba6:	f141 0100 	adc.w	r1, r1, #0
                            + (uint64_t)(slot_idx * ((uint64_t)config->tx_guard_delay
   18baa:	fb03 9901 	mla	r9, r3, r1, r9
   18bae:	eb10 0a0a 	adds.w	sl, r0, sl
   18bb2:	f149 0000 	adc.w	r0, r9, #0
                uint64_t response_tx_delay = request_timestamp
   18bb6:	9b02      	ldr	r3, [sp, #8]
                            + (uint64_t)(uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst, sizeof(nrng_response_frame_t)))))))<< 16);
   18bb8:	0400      	lsls	r0, r0, #16
   18bba:	ea40 401a 	orr.w	r0, r0, sl, lsr #16
   18bbe:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
                uint64_t response_tx_delay = request_timestamp
   18bc2:	eb1a 0303 	adds.w	r3, sl, r3
   18bc6:	9304      	str	r3, [sp, #16]
   18bc8:	9b03      	ldr	r3, [sp, #12]
   18bca:	eb43 0300 	adc.w	r3, r3, r0
   18bce:	9305      	str	r3, [sp, #20]
                uint64_t response_timestamp = (response_tx_delay & 0xFFFFFFFE00UL) + inst->tx_antenna_delay;
   18bd0:	9b04      	ldr	r3, [sp, #16]
   18bd2:	f423 79ff 	bic.w	r9, r3, #510	; 0x1fe
   18bd6:	9b05      	ldr	r3, [sp, #20]
   18bd8:	f003 0aff 	and.w	sl, r3, #255	; 0xff
   18bdc:	f8b4 34ce 	ldrh.w	r3, [r4, #1230]	; 0x4ce
   18be0:	f029 0901 	bic.w	r9, r9, #1
   18be4:	eb19 0903 	adds.w	r9, r9, r3
                struct uwb_ccp_instance *ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(inst, UWBEXT_CCP);
   18be8:	f04f 0101 	mov.w	r1, #1
   18bec:	4620      	mov	r0, r4
                uint64_t response_timestamp = (response_tx_delay & 0xFFFFFFFE00UL) + inst->tx_antenna_delay;
   18bee:	f14a 0a00 	adc.w	sl, sl, #0
                struct uwb_ccp_instance *ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(inst, UWBEXT_CCP);
   18bf2:	f7ef ff0b 	bl	8a0c <uwb_mac_find_cb_inst_ptr>
                struct uwb_wcs_instance * wcs = ccp->wcs;
   18bf6:	f8d0 b068 	ldr.w	fp, [r0, #104]	; 0x68
                frame->reception_timestamp = (uint32_t)(uwb_wcs_local_to_master(wcs, request_timestamp)) & 0xFFFFFFFFULL;
   18bfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   18bfe:	4658      	mov	r0, fp
   18c00:	f7f7 f9ee 	bl	ffe0 <uwb_wcs_local_to_master>
                frame->transmission_timestamp = (uint32_t)(uwb_wcs_local_to_master(wcs, response_timestamp)) & 0xFFFFFFFFULL;
   18c04:	464a      	mov	r2, r9
                frame->reception_timestamp = (uint32_t)(uwb_wcs_local_to_master(wcs, request_timestamp)) & 0xFFFFFFFFULL;
   18c06:	f8c6 000b 	str.w	r0, [r6, #11]
                frame->transmission_timestamp = (uint32_t)(uwb_wcs_local_to_master(wcs, response_timestamp)) & 0xFFFFFFFFULL;
   18c0a:	4653      	mov	r3, sl
   18c0c:	4658      	mov	r0, fp
   18c0e:	f7f7 f9e7 	bl	ffe0 <uwb_wcs_local_to_master>
   18c12:	f8c6 000f 	str.w	r0, [r6, #15]
                frame->dst_address = _frame->src_address;
   18c16:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   18c1a:	f8a6 3005 	strh.w	r3, [r6, #5]
                frame->src_address = inst->my_short_address;
   18c1e:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
   18c22:	f8a6 3007 	strh.w	r3, [r6, #7]
                frame->code = UWB_DATA_CODE_SS_TWR_NRNG_T1;
   18c26:	2331      	movs	r3, #49	; 0x31
   18c28:	7273      	strb	r3, [r6, #9]
                frame->slot_id = slot_idx;
   18c2a:	9b01      	ldr	r3, [sp, #4]
   18c2c:	74f3      	strb	r3, [r6, #19]
                frame->seq_num = _frame->seq_num;
   18c2e:	78ab      	ldrb	r3, [r5, #2]
   18c30:	70b3      	strb	r3, [r6, #2]
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
   18c32:	6a63      	ldr	r3, [r4, #36]	; 0x24
                            + (((uint64_t)config->tx_holdoff_delay
   18c34:	f04f 0800 	mov.w	r8, #0
                frame->code = UWB_DATA_CODE_SS_TWR_NRNG_T1;
   18c38:	f04f 0901 	mov.w	r9, #1
   18c3c:	6c5d      	ldr	r5, [r3, #68]	; 0x44
   18c3e:	f886 900a 	strb.w	r9, [r6, #10]
   18c42:	4642      	mov	r2, r8
   18c44:	4631      	mov	r1, r6
                frame->carrier_integrator  = 0.0l;
   18c46:	f886 801c 	strb.w	r8, [r6, #28]
   18c4a:	f886 801d 	strb.w	r8, [r6, #29]
   18c4e:	f886 801e 	strb.w	r8, [r6, #30]
   18c52:	f886 801f 	strb.w	r8, [r6, #31]
   18c56:	2314      	movs	r3, #20
   18c58:	4620      	mov	r0, r4
   18c5a:	47a8      	blx	r5
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
   18c5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18c5e:	4642      	mov	r2, r8
   18c60:	6c9d      	ldr	r5, [r3, #72]	; 0x48
   18c62:	4620      	mov	r0, r4
   18c64:	4643      	mov	r3, r8
   18c66:	2114      	movs	r1, #20
   18c68:	47a8      	blx	r5
    return (dev->uw_funcs->uf_set_wait4resp(dev, enable));
   18c6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18c6c:	4641      	mov	r1, r8
   18c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   18c70:	4620      	mov	r0, r4
   18c72:	4798      	blx	r3
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
   18c74:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18c76:	4620      	mov	r0, r4
   18c78:	6b59      	ldr	r1, [r3, #52]	; 0x34
   18c7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   18c7e:	4788      	blx	r1
    return (dev->uw_funcs->uf_start_tx(dev));
   18c80:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18c82:	4620      	mov	r0, r4
   18c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   18c86:	4798      	blx	r3
   18c88:	f107 0064 	add.w	r0, r7, #100	; 0x64
   18c8c:	f7f4 fce4 	bl	d658 <os_sem_release>
   18c90:	e6a5      	b.n	189de <rx_complete_cb+0x4e>
                    uint16_t timeout = usecs_to_response(inst,
   18c92:	eba3 0808 	sub.w	r8, r3, r8
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
   18c96:	2114      	movs	r1, #20
   18c98:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
   18c9a:	4620      	mov	r0, r4
   18c9c:	4798      	blx	r3
   18c9e:	fa1f f888 	uxth.w	r8, r8
   18ca2:	4603      	mov	r3, r0
   18ca4:	4641      	mov	r1, r8
   18ca6:	464a      	mov	r2, r9
   18ca8:	4620      	mov	r0, r4
   18caa:	f7fe f93d 	bl	16f28 <usecs_to_response>
   18cae:	f8b9 100c 	ldrh.w	r1, [r9, #12]
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
   18cb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18cb4:	4401      	add	r1, r0
   18cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   18cb8:	b289      	uxth	r1, r1
   18cba:	e70a      	b.n	18ad2 <rx_complete_cb+0x142>
   18cbc:	f3af 8000 	nop.w
   18cc0:	90690691 	.word	0x90690691
   18cc4:	3ff06906 	.word	0x3ff06906
   18cc8:	20006bf0 	.word	0x20006bf0

00018ccc <twr_ss_nrng_pkg_init>:
{
   18ccc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    printf("{\"utime\": %lu,\"msg\": \"ss_nrng_pkg_init\"}\n",os_cputime_ticks_to_usecs(os_cputime_get32()));
   18cce:	f7f3 ffbf 	bl	cc50 <os_cputime_get32>
   18cd2:	4601      	mov	r1, r0
   18cd4:	4814      	ldr	r0, [pc, #80]	; (18d28 <twr_ss_nrng_pkg_init+0x5c>)
   18cd6:	f7f7 fdb1 	bl	1083c <printf>
    udev = uwb_dev_idx_lookup(0);
   18cda:	2000      	movs	r0, #0
   18cdc:	f7ef fe22 	bl	8924 <uwb_dev_idx_lookup>
    struct nrng_instance *nrng = (struct nrng_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_NRNG);
   18ce0:	210b      	movs	r1, #11
    udev = uwb_dev_idx_lookup(0);
   18ce2:	4605      	mov	r5, r0
    struct nrng_instance *nrng = (struct nrng_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_NRNG);
   18ce4:	f7ef fe92 	bl	8a0c <uwb_mac_find_cb_inst_ptr>
    g_cbs.inst_ptr = nrng;
   18ce8:	4910      	ldr	r1, [pc, #64]	; (18d2c <twr_ss_nrng_pkg_init+0x60>)
    struct nrng_instance *nrng = (struct nrng_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_NRNG);
   18cea:	4604      	mov	r4, r0
    g_cbs.inst_ptr = nrng;
   18cec:	6048      	str	r0, [r1, #4]
    uwb_mac_append_interface(udev, &g_cbs);
   18cee:	4628      	mov	r0, r5
   18cf0:	f7ef fe42 	bl	8978 <uwb_mac_append_interface>
    nrng_append_config(nrng, &g_rng_cfgs);
   18cf4:	490e      	ldr	r1, [pc, #56]	; (18d30 <twr_ss_nrng_pkg_init+0x64>)
   18cf6:	4620      	mov	r0, r4
   18cf8:	f7fe f866 	bl	16dc8 <nrng_append_config>
    int rc = stats_init(
   18cfc:	2205      	movs	r2, #5
   18cfe:	4b0d      	ldr	r3, [pc, #52]	; (18d34 <twr_ss_nrng_pkg_init+0x68>)
   18d00:	480d      	ldr	r0, [pc, #52]	; (18d38 <twr_ss_nrng_pkg_init+0x6c>)
   18d02:	9200      	str	r2, [sp, #0]
   18d04:	2104      	movs	r1, #4
   18d06:	f7fa fb19 	bl	1333c <stats_init>
    assert(rc == 0);
   18d0a:	b128      	cbz	r0, 18d18 <twr_ss_nrng_pkg_init+0x4c>
   18d0c:	2300      	movs	r3, #0
   18d0e:	461a      	mov	r2, r3
   18d10:	4619      	mov	r1, r3
   18d12:	4618      	mov	r0, r3
   18d14:	f7f3 fd72 	bl	c7fc <__assert_func>
    rc = stats_register("twr_ss_nrng", STATS_HDR(g_twr_ss_nrng_stat));
   18d18:	4907      	ldr	r1, [pc, #28]	; (18d38 <twr_ss_nrng_pkg_init+0x6c>)
   18d1a:	4808      	ldr	r0, [pc, #32]	; (18d3c <twr_ss_nrng_pkg_init+0x70>)
   18d1c:	f7fa fb92 	bl	13444 <stats_register>
    assert(rc == 0);
   18d20:	2800      	cmp	r0, #0
   18d22:	d1f3      	bne.n	18d0c <twr_ss_nrng_pkg_init+0x40>
}
   18d24:	b003      	add	sp, #12
   18d26:	bd30      	pop	{r4, r5, pc}
   18d28:	00021ffd 	.word	0x00021ffd
   18d2c:	20001584 	.word	0x20001584
   18d30:	200015d0 	.word	0x200015d0
   18d34:	00022033 	.word	0x00022033
   18d38:	20006bf0 	.word	0x20006bf0
   18d3c:	00022027 	.word	0x00022027

00018d40 <NumberOfBits>:
 *
 * @return number of set bits
 */
uint32_t
NumberOfBits(uint32_t n) {
    uint32_t count = 0;
   18d40:	2300      	movs	r3, #0
    while (n) {
   18d42:	b908      	cbnz	r0, 18d48 <NumberOfBits+0x8>
        n &= (n-1);
        count++;
    }
    return count;
}
   18d44:	4618      	mov	r0, r3
   18d46:	4770      	bx	lr
        n &= (n-1);
   18d48:	1e42      	subs	r2, r0, #1
   18d4a:	4010      	ands	r0, r2
        count++;
   18d4c:	3301      	adds	r3, #1
   18d4e:	e7f8      	b.n	18d42 <NumberOfBits+0x2>

00018d50 <BitPosition>:
 *
 * @param n bitfield to count bits within
 *
 * @return number of set bits
 */
uint32_t BitPosition(uint32_t n) {
   18d50:	b508      	push	{r3, lr}
    uint32_t count = 0;
    assert(n && (! (n & (n-1)) )); // single bit set
   18d52:	b110      	cbz	r0, 18d5a <BitPosition+0xa>
   18d54:	1e43      	subs	r3, r0, #1
   18d56:	4003      	ands	r3, r0
   18d58:	d005      	beq.n	18d66 <BitPosition+0x16>
   18d5a:	2300      	movs	r3, #0
   18d5c:	461a      	mov	r2, r3
   18d5e:	4619      	mov	r1, r3
   18d60:	4618      	mov	r0, r3
   18d62:	f7f3 fd4b 	bl	c7fc <__assert_func>

    while (n){
   18d66:	0840      	lsrs	r0, r0, #1
        n = n >> 1;
        ++count; // position of bit within bitfield
   18d68:	f103 0301 	add.w	r3, r3, #1
    while (n){
   18d6c:	d1fb      	bne.n	18d66 <BitPosition+0x16>
    }
    return count;
}
   18d6e:	4618      	mov	r0, r3
   18d70:	bd08      	pop	{r3, pc}

00018d72 <BitIndex>:
 *
 * @return numerical ordering of a bit witin bitmask.
 */
uint32_t
BitIndex(uint32_t nslots_mask, uint32_t n, slot_mode_t mode)
{
   18d72:	b538      	push	{r3, r4, r5, lr}
   18d74:	4604      	mov	r4, r0
   18d76:	4615      	mov	r5, r2
    uint32_t idx, slot_mask, remaining_mask;
    assert(n && (! (n & (n-1)) ));  // single bit set
   18d78:	4608      	mov	r0, r1
   18d7a:	b111      	cbz	r1, 18d82 <BitIndex+0x10>
   18d7c:	1e4b      	subs	r3, r1, #1
   18d7e:	420b      	tst	r3, r1
   18d80:	d005      	beq.n	18d8e <BitIndex+0x1c>
   18d82:	2300      	movs	r3, #0
   18d84:	461a      	mov	r2, r3
   18d86:	4619      	mov	r1, r3
   18d88:	4618      	mov	r0, r3
   18d8a:	f7f3 fd37 	bl	c7fc <__assert_func>
    assert(n & nslots_mask);        // bit set is within ROI
   18d8e:	4221      	tst	r1, r4
   18d90:	d0f7      	beq.n	18d82 <BitIndex+0x10>

    idx = BitPosition(n);
   18d92:	f7ff ffdd 	bl	18d50 <BitPosition>
    slot_mask =  (((uint32_t)~0UL >> (sizeof(uint32_t) * 8 - idx)));
    remaining_mask = ((uint32_t)~0UL << idx);

    if (mode == SLOT_POSITION)
   18d96:	2d01      	cmp	r5, #1
   18d98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    slot_mask =  (((uint32_t)~0UL >> (sizeof(uint32_t) * 8 - idx)));
   18d9c:	bf05      	ittet	eq
   18d9e:	f1c0 0220 	rsbeq	r2, r0, #32
   18da2:	40d3      	lsreq	r3, r2
    remaining_mask = ((uint32_t)~0UL << idx);
   18da4:	fa03 f000 	lslne.w	r0, r3, r0
        return NumberOfBits(nslots_mask & slot_mask) - 1; // slot position
   18da8:	ea03 0004 	andeq.w	r0, r3, r4
    else
        return NumberOfBits(nslots_mask & remaining_mask) - 1; // no. of slots remaining
   18dac:	bf18      	it	ne
   18dae:	4020      	andne	r0, r4
   18db0:	f7ff ffc6 	bl	18d40 <NumberOfBits>
   18db4:	3801      	subs	r0, #1
}
   18db6:	bd38      	pop	{r3, r4, r5, pc}

00018db8 <complete_ev_cb.part.0>:
 * @param cbs    Pointer to struct uwb_mac_interface.
 *
 * @return true on sucess
 */
static bool
reset_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
   18db8:	b508      	push	{r3, lr}
{
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
    if(dpl_sem_get_count(&rng->sem) == 0){
        dpl_error_t err = dpl_sem_release(&rng->sem);
        assert(err == DPL_OK);
   18dba:	2300      	movs	r3, #0
   18dbc:	461a      	mov	r2, r3
   18dbe:	4619      	mov	r1, r3
   18dc0:	4618      	mov	r0, r3
   18dc2:	f7f3 fd1b 	bl	c7fc <__assert_func>

00018dc6 <reset_cb>:
{
   18dc6:	b510      	push	{r4, lr}
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
   18dc8:	684c      	ldr	r4, [r1, #4]
    if(dpl_sem_get_count(&rng->sem) == 0){
   18dca:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
   18dce:	b98b      	cbnz	r3, 18df4 <reset_cb+0x2e>
   18dd0:	f104 0050 	add.w	r0, r4, #80	; 0x50
   18dd4:	f7f4 fc40 	bl	d658 <os_sem_release>
        assert(err == DPL_OK);
   18dd8:	b108      	cbz	r0, 18dde <reset_cb+0x18>
   18dda:	f7ff ffed 	bl	18db8 <complete_ev_cb.part.0>
        RNG_STATS_INC(reset);
   18dde:	6c63      	ldr	r3, [r4, #68]	; 0x44
   18de0:	3301      	adds	r3, #1
   18de2:	6463      	str	r3, [r4, #68]	; 0x44
        rng->status.rx_ack_expected = 0;
        rng->status.tx_ack_expected = 0;
   18de4:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   18de8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   18dec:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        return true;
   18df0:	2001      	movs	r0, #1
    }
    else
        return false;
}
   18df2:	bd10      	pop	{r4, pc}
        return false;
   18df4:	2000      	movs	r0, #0
   18df6:	e7fc      	b.n	18df2 <reset_cb+0x2c>

00018df8 <rx_timeout_cb>:
{
   18df8:	b510      	push	{r4, lr}
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
   18dfa:	684c      	ldr	r4, [r1, #4]
    if(dpl_sem_get_count(&rng->sem) == 0){
   18dfc:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
   18e00:	b10b      	cbz	r3, 18e06 <rx_timeout_cb+0xe>
    return false;
   18e02:	2000      	movs	r0, #0
}
   18e04:	bd10      	pop	{r4, pc}
   18e06:	f104 0050 	add.w	r0, r4, #80	; 0x50
   18e0a:	f7f4 fc25 	bl	d658 <os_sem_release>
        assert(err == DPL_OK);
   18e0e:	b108      	cbz	r0, 18e14 <rx_timeout_cb+0x1c>
   18e10:	f7ff ffd2 	bl	18db8 <complete_ev_cb.part.0>
        RNG_STATS_INC(rx_timeout);
   18e14:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   18e16:	1c5a      	adds	r2, r3, #1
   18e18:	63e2      	str	r2, [r4, #60]	; 0x3c
        switch(rng->code){
   18e1a:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   18e1e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
   18e22:	2a18      	cmp	r2, #24
   18e24:	d8ed      	bhi.n	18e02 <rx_timeout_cb+0xa>
                    RNG_STATS_INC(rx_timeout);
   18e26:	3302      	adds	r3, #2
   18e28:	63e3      	str	r3, [r4, #60]	; 0x3c
                    return true;
   18e2a:	2001      	movs	r0, #1
   18e2c:	e7ea      	b.n	18e04 <rx_timeout_cb+0xc>
	...

00018e30 <superframe_reset_cb>:
 *
 * @return true on sucess
 */
static bool
superframe_reset_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
   18e30:	b510      	push	{r4, lr}
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
   18e32:	684c      	ldr	r4, [r1, #4]
    if(dpl_sem_get_count(&rng->sem) == 0){
   18e34:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
   18e38:	b9ab      	cbnz	r3, 18e66 <superframe_reset_cb+0x36>
   18e3a:	f104 0050 	add.w	r0, r4, #80	; 0x50
   18e3e:	f7f4 fc0b 	bl	d658 <os_sem_release>
        dpl_error_t err = dpl_sem_release(&rng->sem);
        assert(err == DPL_OK);
   18e42:	b108      	cbz	r0, 18e48 <superframe_reset_cb+0x18>
   18e44:	f7ff ffb8 	bl	18db8 <complete_ev_cb.part.0>
        RNG_STATS_INC(superframe_reset);
   18e48:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   18e4a:	3301      	adds	r3, #1
   18e4c:	64a3      	str	r3, [r4, #72]	; 0x48
        printf("{\"utime\": %"PRIu32",\"msg\": \"superframe_reset\"}\n",
   18e4e:	f7f7 fd71 	bl	10934 <dpl_cputime_get32>
   18e52:	4601      	mov	r1, r0
   18e54:	4805      	ldr	r0, [pc, #20]	; (18e6c <superframe_reset_cb+0x3c>)
   18e56:	f7f7 fcf1 	bl	1083c <printf>
               dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
        rng->status.rx_ack_expected = 0;
        rng->status.tx_ack_expected = 0;
   18e5a:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   18e5e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   18e62:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
    }
    return false;
}
   18e66:	2000      	movs	r0, #0
   18e68:	bd10      	pop	{r4, pc}
   18e6a:	bf00      	nop
   18e6c:	00022051 	.word	0x00022051

00018e70 <complete_ev_cb>:
    return ev->ev.ev_arg;
   18e70:	6880      	ldr	r0, [r0, #8]
 *
 * @return true on sucess
 */
static void
complete_ev_cb(struct dpl_event *ev)
{
   18e72:	b508      	push	{r3, lr}
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)dpl_event_get_arg(ev);
    assert(ev != NULL);
    assert(rng);
   18e74:	b908      	cbnz	r0, 18e7a <complete_ev_cb+0xa>
   18e76:	f7ff ff9f 	bl	18db8 <complete_ev_cb.part.0>
    rng_encode(rng);
}
   18e7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    rng_encode(rng);
   18e7e:	f000 bb0f 	b.w	194a0 <rng_encode>
	...

00018e84 <complete_cb>:
 *
 * @return true on sucess
 */
static bool
complete_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
   18e84:	b570      	push	{r4, r5, r6, lr}
    twr_frame_t * frame;
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
   18e86:	684e      	ldr	r6, [r1, #4]
    RNG_STATS_INC(complete_cb);
   18e88:	6c33      	ldr	r3, [r6, #64]	; 0x40
   18e8a:	3301      	adds	r3, #1
   18e8c:	6433      	str	r3, [r6, #64]	; 0x40
    if (inst->fctrl != FCNTL_IEEE_RANGE_16 &&
   18e8e:	f8b0 34e0 	ldrh.w	r3, [r0, #1248]	; 0x4e0
   18e92:	f023 0320 	bic.w	r3, r3, #32
   18e96:	b29b      	uxth	r3, r3
   18e98:	f648 0241 	movw	r2, #34881	; 0x8841
   18e9c:	4293      	cmp	r3, r2
{
   18e9e:	4604      	mov	r4, r0
    if (inst->fctrl != FCNTL_IEEE_RANGE_16 &&
   18ea0:	d17b      	bne.n	18f9a <complete_cb+0x116>
        inst->fctrl != (FCNTL_IEEE_RANGE_16|UWB_FCTRL_ACK_REQUESTED))
        return false;

    /* Calculate Local results and diagnostics.
     * XXX TODO: Generalise antenna distance */
    rng->idx_current = (rng->idx)%rng->nframes;
   18ea2:	f8b6 207a 	ldrh.w	r2, [r6, #122]	; 0x7a
   18ea6:	f8b6 3076 	ldrh.w	r3, [r6, #118]	; 0x76
   18eaa:	fbb3 f1f2 	udiv	r1, r3, r2
   18eae:	fb02 3311 	mls	r3, r2, r1, r3
   18eb2:	b29b      	uxth	r3, r3
   18eb4:	f8a6 3078 	strh.w	r3, [r6, #120]	; 0x78
    frame = rng->frames[rng->idx_current];
   18eb8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   18ebc:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
    if (inst->capabilities.single_receiver_pdoa) {
   18ec0:	f890 34b2 	ldrb.w	r3, [r0, #1202]	; 0x4b2
   18ec4:	079a      	lsls	r2, r3, #30
   18ec6:	d51a      	bpl.n	18efe <complete_cb+0x7a>
    return (dev->uw_funcs->uf_calc_pdoa(dev, diag));
   18ec8:	6a43      	ldr	r3, [r0, #36]	; 0x24
   18eca:	f8d0 14f8 	ldr.w	r1, [r0, #1272]	; 0x4f8
   18ece:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
   18ed2:	4798      	blx	r3
        dpl_float32_t tmp_pdoa = uwb_calc_pdoa(inst, inst->rxdiag);
        if (!DPL_FLOAT32_ISNAN(tmp_pdoa)) {
   18ed4:	eeb4 0a40 	vcmp.f32	s0, s0
   18ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   18edc:	d60f      	bvs.n	18efe <complete_cb+0x7a>
            frame->local.pdoa = tmp_pdoa;
            frame->local.spherical.azimuth = DPL_FLOAT64_FROM_F32(
   18ede:	f504 639a 	add.w	r3, r4, #1232	; 0x4d0
            frame->local.pdoa = tmp_pdoa;
   18ee2:	ed85 0a36 	vstr	s0, [r5, #216]	; 0xd8
            frame->local.spherical.azimuth = DPL_FLOAT64_FROM_F32(
   18ee6:	edd3 0a00 	vldr	s1, [r3]
   18eea:	f894 050c 	ldrb.w	r0, [r4, #1292]	; 0x50c
   18eee:	f7ef fdfb 	bl	8ae8 <uwb_calc_aoa>
   18ef2:	ee10 0a10 	vmov	r0, s0
   18ef6:	f005 fc07 	bl	1e708 <__aeabi_f2d>
   18efa:	e9c5 0124 	strd	r0, r1, [r5, #144]	; 0x90
                uwb_calc_aoa(frame->local.pdoa, inst->config.channel, inst->rx_ant_separation)
                );
        }
    }

    frame->local.vrssi[0] = DPL_FLOAT32_NAN();
   18efe:	4b28      	ldr	r3, [pc, #160]	; (18fa0 <complete_cb+0x11c>)
   18f00:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
    return (dev->uw_funcs->uf_calc_rssi(dev, diag));
   18f04:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18f06:	f8d4 14f8 	ldr.w	r1, [r4, #1272]	; 0x4f8
   18f0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   18f0e:	4620      	mov	r0, r4
   18f10:	4798      	blx	r3
    return (dev->uw_funcs->uf_calc_fppl(dev, diag));
   18f12:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18f14:	f8d4 14f8 	ldr.w	r1, [r4, #1272]	; 0x4f8
   18f18:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
    frame->local.rssi = uwb_calc_rssi(inst, inst->rxdiag);
   18f1c:	ed85 0a34 	vstr	s0, [r5, #208]	; 0xd0
   18f20:	4620      	mov	r0, r4
   18f22:	4798      	blx	r3
    frame->local.fppl = uwb_calc_fppl(inst, inst->rxdiag);

    if (inst->capabilities.sts) {
   18f24:	f894 34b2 	ldrb.w	r3, [r4, #1202]	; 0x4b2
    frame->local.fppl = uwb_calc_fppl(inst, inst->rxdiag);
   18f28:	ed85 0a35 	vstr	s0, [r5, #212]	; 0xd4
    if (inst->capabilities.sts) {
   18f2c:	07db      	lsls	r3, r3, #31
   18f2e:	d52e      	bpl.n	18f8e <complete_cb+0x10a>
        frame->local.flags.has_sts = inst->config.rx.stsMode != DWT_STS_MODE_OFF;
        frame->local.flags.has_valid_sts = !(inst->status.sts_ts_error || inst->status.sts_pream_error);
   18f30:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
    return (dev->uw_funcs->uf_calc_seq_rssi(dev, diag, type));
   18f34:	f8d4 14f8 	ldr.w	r1, [r4, #1272]	; 0x4f8
   18f38:	f013 0f30 	tst.w	r3, #48	; 0x30
        frame->local.flags.has_sts = inst->config.rx.stsMode != DWT_STS_MODE_OFF;
   18f3c:	f894 3518 	ldrb.w	r3, [r4, #1304]	; 0x518
        frame->local.flags.has_valid_sts = !(inst->status.sts_ts_error || inst->status.sts_pream_error);
   18f40:	bf0c      	ite	eq
   18f42:	2201      	moveq	r2, #1
   18f44:	2200      	movne	r2, #0
        frame->local.flags.has_sts = inst->config.rx.stsMode != DWT_STS_MODE_OFF;
   18f46:	3b00      	subs	r3, #0
   18f48:	bf18      	it	ne
   18f4a:	2301      	movne	r3, #1
   18f4c:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
   18f50:	f895 20dc 	ldrb.w	r2, [r5, #220]	; 0xdc
   18f54:	f022 0203 	bic.w	r2, r2, #3
   18f58:	4313      	orrs	r3, r2
   18f5a:	f885 30dc 	strb.w	r3, [r5, #220]	; 0xdc
        frame->local.vrssi[0] = frame->local.rssi;
   18f5e:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   18f62:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
   18f66:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18f68:	f44f 7200 	mov.w	r2, #512	; 0x200
   18f6c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   18f70:	4620      	mov	r0, r4
   18f72:	4798      	blx	r3
   18f74:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18f76:	f8d4 14f8 	ldr.w	r1, [r4, #1272]	; 0x4f8
   18f7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
        frame->local.vrssi[1] = uwb_calc_seq_rssi(inst, inst->rxdiag, UWB_RXDIAG_STS);
   18f7e:	ed85 0a39 	vstr	s0, [r5, #228]	; 0xe4
   18f82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   18f86:	4620      	mov	r0, r4
   18f88:	4798      	blx	r3
        frame->local.vrssi[2] = uwb_calc_seq_rssi(inst, inst->rxdiag, UWB_RXDIAG_STS2);
   18f8a:	ed85 0a3a 	vstr	s0, [r5, #232]	; 0xe8
    return (struct dpl_eventq *) os_eventq_dflt_get();
   18f8e:	f7f3 ffbb 	bl	cf08 <os_eventq_dflt_get>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
   18f92:	f106 0188 	add.w	r1, r6, #136	; 0x88
   18f96:	f7f3 ff10 	bl	cdba <os_eventq_put>
    }

    /* Postprocess in thread context */
    dpl_eventq_put(dpl_eventq_dflt_get(), &rng->complete_event);
    return false;
}
   18f9a:	2000      	movs	r0, #0
   18f9c:	bd70      	pop	{r4, r5, r6, pc}
   18f9e:	bf00      	nop
   18fa0:	7fc00000 	.word	0x7fc00000

00018fa4 <uwb_rng_free>:
{
   18fa4:	b508      	push	{r3, lr}
    assert(rng);
   18fa6:	b908      	cbnz	r0, 18fac <uwb_rng_free+0x8>
   18fa8:	f7ff ff06 	bl	18db8 <complete_ev_cb.part.0>
    if (rng->status.selfmalloc)
   18fac:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
   18fb0:	f013 0101 	ands.w	r1, r3, #1
   18fb4:	d003      	beq.n	18fbe <uwb_rng_free+0x1a>
}
   18fb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        free(rng);
   18fba:	f7f7 b91f 	b.w	101fc <free>
        rng->status.initialized = 0;
   18fbe:	f361 0341 	bfi	r3, r1, #1, #1
   18fc2:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
}
   18fc6:	bd08      	pop	{r3, pc}

00018fc8 <uwb_rng_set_frames>:
{
   18fc8:	b538      	push	{r3, r4, r5, lr}
    assert(nframes <= rng->nframes);
   18fca:	f8b0 307a 	ldrh.w	r3, [r0, #122]	; 0x7a
   18fce:	4293      	cmp	r3, r2
   18fd0:	d306      	bcc.n	18fe0 <uwb_rng_set_frames+0x18>
   18fd2:	309c      	adds	r0, #156	; 0x9c
   18fd4:	2300      	movs	r3, #0
        rng->frames[i] = &twr[i];
   18fd6:	25f0      	movs	r5, #240	; 0xf0
    for (i = 0; i < nframes; i++)
   18fd8:	b29c      	uxth	r4, r3
   18fda:	42a2      	cmp	r2, r4
   18fdc:	d802      	bhi.n	18fe4 <uwb_rng_set_frames+0x1c>
}
   18fde:	bd38      	pop	{r3, r4, r5, pc}
   18fe0:	f7ff feea 	bl	18db8 <complete_ev_cb.part.0>
        rng->frames[i] = &twr[i];
   18fe4:	fb05 1403 	mla	r4, r5, r3, r1
   18fe8:	f840 4b04 	str.w	r4, [r0], #4
    for (i = 0; i < nframes; i++)
   18fec:	3301      	adds	r3, #1
   18fee:	e7f3      	b.n	18fd8 <uwb_rng_set_frames+0x10>

00018ff0 <uwb_rng_config>:
uwb_rng_config(struct uwb_rng_instance * rng, struct uwb_rng_config * config){
   18ff0:	b510      	push	{r4, lr}
    assert(config);
   18ff2:	b909      	cbnz	r1, 18ff8 <uwb_rng_config+0x8>
   18ff4:	f7ff fee0 	bl	18db8 <complete_ev_cb.part.0>
    memcpy(&rng->config, config, sizeof(struct uwb_rng_config));
   18ff8:	f100 0360 	add.w	r3, r0, #96	; 0x60
   18ffc:	f101 0210 	add.w	r2, r1, #16
   19000:	f851 4b04 	ldr.w	r4, [r1], #4
   19004:	f843 4b04 	str.w	r4, [r3], #4
   19008:	4291      	cmp	r1, r2
   1900a:	d1f9      	bne.n	19000 <uwb_rng_config+0x10>
    return rng->dev_inst->status;
   1900c:	6803      	ldr	r3, [r0, #0]
}
   1900e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
   19012:	bd10      	pop	{r4, pc}

00019014 <uwb_rng_init>:
{
   19014:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   19016:	460e      	mov	r6, r1
   19018:	4617      	mov	r7, r2
    assert(dev);
   1901a:	4605      	mov	r5, r0
   1901c:	b928      	cbnz	r0, 1902a <uwb_rng_init+0x16>
   1901e:	2300      	movs	r3, #0
   19020:	461a      	mov	r2, r3
   19022:	4619      	mov	r1, r3
   19024:	4618      	mov	r0, r3
   19026:	f7f3 fbe9 	bl	c7fc <__assert_func>
    rng = (struct uwb_rng_instance*)uwb_mac_find_cb_inst_ptr(dev, UWBEXT_RNG);
   1902a:	2104      	movs	r1, #4
   1902c:	f7ef fcee 	bl	8a0c <uwb_mac_find_cb_inst_ptr>
    if (rng == NULL ) {
   19030:	4604      	mov	r4, r0
   19032:	b980      	cbnz	r0, 19056 <uwb_rng_init+0x42>
        rng = (struct uwb_rng_instance *) calloc(1, sizeof(*rng) + nframes * sizeof(twr_frame_t *));
   19034:	f107 0128 	add.w	r1, r7, #40	; 0x28
   19038:	0089      	lsls	r1, r1, #2
   1903a:	2001      	movs	r0, #1
   1903c:	f7f7 f81e 	bl	1007c <calloc>
        assert(rng);
   19040:	4604      	mov	r4, r0
   19042:	2800      	cmp	r0, #0
   19044:	d0eb      	beq.n	1901e <uwb_rng_init+0xa>
        rng->status.selfmalloc = 1;
   19046:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
        rng->nframes = nframes;
   1904a:	f8a0 707a 	strh.w	r7, [r0, #122]	; 0x7a
        rng->status.selfmalloc = 1;
   1904e:	f043 0301 	orr.w	r3, r3, #1
   19052:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
    rng->dev_inst = dev;
   19056:	6025      	str	r5, [r4, #0]
    rng->ccp_inst = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(dev, UWBEXT_CCP);
   19058:	2101      	movs	r1, #1
   1905a:	4628      	mov	r0, r5
   1905c:	f7ef fcd6 	bl	8a0c <uwb_mac_find_cb_inst_ptr>
   19060:	6060      	str	r0, [r4, #4]
    assert(rng->ccp_inst);
   19062:	2800      	cmp	r0, #0
   19064:	d0db      	beq.n	1901e <uwb_rng_init+0xa>
    return (dpl_error_t)os_sem_init(&sem->sem, tokens);
   19066:	2101      	movs	r1, #1
   19068:	f104 0050 	add.w	r0, r4, #80	; 0x50
   1906c:	f7f4 faec 	bl	d648 <os_sem_init>
    assert(err == DPL_OK);
   19070:	2800      	cmp	r0, #0
   19072:	d1d4      	bne.n	1901e <uwb_rng_init+0xa>
    if (config != NULL ) {
   19074:	b11e      	cbz	r6, 1907e <uwb_rng_init+0x6a>
        uwb_rng_config(rng, config);
   19076:	4631      	mov	r1, r6
   19078:	4620      	mov	r0, r4
   1907a:	f7ff ffb9 	bl	18ff0 <uwb_rng_config>
    rng->control = (uwb_rng_control_t){
   1907e:	2300      	movs	r3, #0
   19080:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
    rng->idx = 0xFFFF;
   19084:	f64f 73ff 	movw	r3, #65535	; 0xffff
   19088:	f8a4 3076 	strh.w	r3, [r4, #118]	; 0x76
    rng->status.initialized = 1;
   1908c:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
        int rc = stats_init(
   19090:	220c      	movs	r2, #12
    rng->status.initialized = 1;
   19092:	f043 0302 	orr.w	r3, r3, #2
        int rc = stats_init(
   19096:	f104 0508 	add.w	r5, r4, #8
    rng->status.initialized = 1;
   1909a:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        int rc = stats_init(
   1909e:	2104      	movs	r1, #4
   190a0:	4b07      	ldr	r3, [pc, #28]	; (190c0 <uwb_rng_init+0xac>)
   190a2:	9200      	str	r2, [sp, #0]
   190a4:	4628      	mov	r0, r5
   190a6:	f7fa f949 	bl	1333c <stats_init>
        rc |= stats_register("rng", STATS_HDR(rng->stat));
   190aa:	4629      	mov	r1, r5
        int rc = stats_init(
   190ac:	4606      	mov	r6, r0
        rc |= stats_register("rng", STATS_HDR(rng->stat));
   190ae:	4805      	ldr	r0, [pc, #20]	; (190c4 <uwb_rng_init+0xb0>)
   190b0:	f7fa f9c8 	bl	13444 <stats_register>
        assert(rc == 0);
   190b4:	ea56 0300 	orrs.w	r3, r6, r0
   190b8:	d1b1      	bne.n	1901e <uwb_rng_init+0xa>
}
   190ba:	4620      	mov	r0, r4
   190bc:	b003      	add	sp, #12
   190be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   190c0:	000220be 	.word	0x000220be
   190c4:	0002202f 	.word	0x0002202f

000190c8 <uwb_rng_clear_twr_data>:
    s->spherical.array[0] = DPL_FLOAT64_NAN();
   190c8:	4b07      	ldr	r3, [pc, #28]	; (190e8 <uwb_rng_clear_twr_data+0x20>)
   190ca:	2200      	movs	r2, #0
   190cc:	e9c0 2300 	strd	r2, r3, [r0]
    s->spherical.array[1] = DPL_FLOAT64_NAN();
   190d0:	e9c0 2302 	strd	r2, r3, [r0, #8]
    s->spherical.array[2] = DPL_FLOAT64_NAN();
   190d4:	e9c0 2304 	strd	r2, r3, [r0, #16]
    s->rssi = DPL_FLOAT32_NAN();
   190d8:	4b04      	ldr	r3, [pc, #16]	; (190ec <uwb_rng_clear_twr_data+0x24>)
   190da:	6483      	str	r3, [r0, #72]	; 0x48
    s->fppl = DPL_FLOAT32_NAN();
   190dc:	64c3      	str	r3, [r0, #76]	; 0x4c
    s->pdoa = DPL_FLOAT32_NAN();
   190de:	6503      	str	r3, [r0, #80]	; 0x50
    s->flags = (struct _rng_frame_flags){0};
   190e0:	2300      	movs	r3, #0
   190e2:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
}
   190e6:	4770      	bx	lr
   190e8:	7ff80000 	.word	0x7ff80000
   190ec:	7fc00000 	.word	0x7fc00000

000190f0 <rx_complete_cb>:
    if (inst->fctrl != FCNTL_IEEE_RANGE_16 &&
   190f0:	f8b0 34e0 	ldrh.w	r3, [r0, #1248]	; 0x4e0
{
   190f4:	b570      	push	{r4, r5, r6, lr}
    if (inst->fctrl != FCNTL_IEEE_RANGE_16 &&
   190f6:	f648 0241 	movw	r2, #34881	; 0x8841
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
   190fa:	684c      	ldr	r4, [r1, #4]
    if (inst->fctrl != FCNTL_IEEE_RANGE_16 &&
   190fc:	f023 0120 	bic.w	r1, r3, #32
   19100:	4291      	cmp	r1, r2
   19102:	f8b4 5056 	ldrh.w	r5, [r4, #86]	; 0x56
{
   19106:	4606      	mov	r6, r0
    if (inst->fctrl != FCNTL_IEEE_RANGE_16 &&
   19108:	d00c      	beq.n	19124 <rx_complete_cb+0x34>
        inst->fctrl != (FCNTL_IEEE_RANGE_16|UWB_FCTRL_ACK_REQUESTED) &&
   1910a:	2b02      	cmp	r3, #2
   1910c:	d00a      	beq.n	19124 <rx_complete_cb+0x34>
        if(dpl_sem_get_count(&rng->sem) == 0) {
   1910e:	b10d      	cbz	r5, 19114 <rx_complete_cb+0x24>
                    return false;   // Allow sub extensions to handle event
   19110:	2000      	movs	r0, #0
}
   19112:	bd70      	pop	{r4, r5, r6, pc}
            RNG_STATS_INC(rx_other_frame);
   19114:	6b23      	ldr	r3, [r4, #48]	; 0x30
   19116:	3301      	adds	r3, #1
   19118:	6323      	str	r3, [r4, #48]	; 0x30
    return (dpl_error_t)os_sem_release(&sem->sem);
   1911a:	f104 0050 	add.w	r0, r4, #80	; 0x50
   1911e:	f7f4 fa9b 	bl	d658 <os_sem_release>
   19122:	e7f5      	b.n	19110 <rx_complete_cb+0x20>
    if(dpl_sem_get_count(&rng->sem) == 1){
   19124:	2d01      	cmp	r5, #1
   19126:	d103      	bne.n	19130 <rx_complete_cb+0x40>
        RNG_STATS_INC(rx_unsolicited);
   19128:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1912a:	3301      	adds	r3, #1
   1912c:	62e3      	str	r3, [r4, #44]	; 0x2c
        return false;
   1912e:	e7ef      	b.n	19110 <rx_complete_cb+0x20>
    if (inst->frame_len < sizeof(ieee_rng_request_frame_t))
   19130:	f8b6 34e2 	ldrh.w	r3, [r6, #1250]	; 0x4e2
   19134:	2b0a      	cmp	r3, #10
   19136:	d9eb      	bls.n	19110 <rx_complete_cb+0x20>
    rng->code = req_frame->code;
   19138:	f8d6 34fc 	ldr.w	r3, [r6, #1276]	; 0x4fc
   1913c:	f8b3 2009 	ldrh.w	r2, [r3, #9]
   19140:	f8a4 204c 	strh.w	r2, [r4, #76]	; 0x4c
   19144:	b293      	uxth	r3, r2
    switch(rng->code) {
   19146:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
   1914a:	2b19      	cmp	r3, #25
   1914c:	d8e0      	bhi.n	19110 <rx_complete_cb+0x20>
                twr_frame_t * frame = rng->frames[(rng->idx+1)%rng->nframes]; // speculative frame advance
   1914e:	f8b4 3076 	ldrh.w	r3, [r4, #118]	; 0x76
   19152:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
   19156:	3301      	adds	r3, #1
   19158:	fbb3 f1f2 	udiv	r1, r3, r2
   1915c:	fb02 3311 	mls	r3, r2, r1, r3
   19160:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   19164:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
                uwb_rng_clear_twr_data(&frame->remote);
   19168:	f105 0020 	add.w	r0, r5, #32
   1916c:	f7ff ffac 	bl	190c8 <uwb_rng_clear_twr_data>
                uwb_rng_clear_twr_data(&frame->local);
   19170:	f105 0088 	add.w	r0, r5, #136	; 0x88
   19174:	f7ff ffa8 	bl	190c8 <uwb_rng_clear_twr_data>
                if (inst->frame_len <= sizeof(frame->array))
   19178:	f8b6 24e2 	ldrh.w	r2, [r6, #1250]	; 0x4e2
   1917c:	2a88      	cmp	r2, #136	; 0x88
   1917e:	d8c7      	bhi.n	19110 <rx_complete_cb+0x20>
                    memcpy(frame->array, inst->rxbuf, inst->frame_len);
   19180:	f8d6 14fc 	ldr.w	r1, [r6, #1276]	; 0x4fc
   19184:	4628      	mov	r0, r5
   19186:	f7f7 f873 	bl	10270 <memcpy>
                if (inst->config.rx.frameFilter == 0 && frame->dst_address != inst->my_short_address){
   1918a:	f8b6 351c 	ldrh.w	r3, [r6, #1308]	; 0x51c
   1918e:	b973      	cbnz	r3, 191ae <rx_complete_cb+0xbe>
   19190:	f8b5 2005 	ldrh.w	r2, [r5, #5]
   19194:	f8b6 34b6 	ldrh.w	r3, [r6, #1206]	; 0x4b6
   19198:	429a      	cmp	r2, r3
   1919a:	d008      	beq.n	191ae <rx_complete_cb+0xbe>
                    if(dpl_sem_get_count(&rng->sem) == 0){
   1919c:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
   191a0:	b91b      	cbnz	r3, 191aa <rx_complete_cb+0xba>
   191a2:	f104 0050 	add.w	r0, r4, #80	; 0x50
   191a6:	f7f4 fa57 	bl	d658 <os_sem_release>
                    return true;
   191aa:	2001      	movs	r0, #1
   191ac:	e7b1      	b.n	19112 <rx_complete_cb+0x22>
                    RNG_STATS_INC(rx_complete);
   191ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   191b0:	3301      	adds	r3, #1
   191b2:	62a3      	str	r3, [r4, #40]	; 0x28
                    rng->idx++;     // confirmed frame advance
   191b4:	f8b4 3076 	ldrh.w	r3, [r4, #118]	; 0x76
   191b8:	3301      	adds	r3, #1
   191ba:	f8a4 3076 	strh.w	r3, [r4, #118]	; 0x76
   191be:	e7a7      	b.n	19110 <rx_complete_cb+0x20>

000191c0 <uwb_rng_twr_to_tof>:
    twr_frame_t * first_frame = rng->frames[(uint16_t)(idx-1)%rng->nframes];
   191c0:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
    twr_frame_t * frame = rng->frames[(idx)%rng->nframes];
   191c4:	fbb1 f3f2 	udiv	r3, r1, r2
   191c8:	fb02 1313 	mls	r3, r2, r3, r1
{
   191cc:	b570      	push	{r4, r5, r6, lr}
    twr_frame_t * frame = rng->frames[(idx)%rng->nframes];
   191ce:	b29b      	uxth	r3, r3
   191d0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
{
   191d4:	b088      	sub	sp, #32
    twr_frame_t * frame = rng->frames[(idx)%rng->nframes];
   191d6:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
    switch(frame->code) {
   191da:	f8b4 3009 	ldrh.w	r3, [r4, #9]
   191de:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
   191e2:	d205      	bcs.n	191f0 <uwb_rng_twr_to_tof+0x30>
   191e4:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
   191e8:	d22d      	bcs.n	19246 <uwb_rng_twr_to_tof+0x86>
   191ea:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 19268 <uwb_rng_twr_to_tof+0xa8>
    return ToF;
   191ee:	e039      	b.n	19264 <uwb_rng_twr_to_tof+0xa4>
    switch(frame->code) {
   191f0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
   191f4:	2b09      	cmp	r3, #9
   191f6:	d8f8      	bhi.n	191ea <uwb_rng_twr_to_tof+0x2a>
    twr_frame_t * first_frame = rng->frames[(uint16_t)(idx-1)%rng->nframes];
   191f8:	3901      	subs	r1, #1
   191fa:	b289      	uxth	r1, r1
   191fc:	fbb1 f3f2 	udiv	r3, r1, r2
   19200:	fb02 1113 	mls	r1, r2, r3, r1
   19204:	b289      	uxth	r1, r1
   19206:	eb00 0181 	add.w	r1, r0, r1, lsl #2
                              frame->transmission_timestamp, frame->reception_timestamp);
   1920a:	f8d4 600b 	ldr.w	r6, [r4, #11]
    twr_frame_t * first_frame = rng->frames[(uint16_t)(idx-1)%rng->nframes];
   1920e:	f8d1 509c 	ldr.w	r5, [r1, #156]	; 0x9c
            ToF = calc_tof_ds(first_frame->response_timestamp, first_frame->request_timestamp,
   19212:	2300      	movs	r3, #0
                              first_frame->transmission_timestamp, first_frame->reception_timestamp,
   19214:	f8d5 200f 	ldr.w	r2, [r5, #15]
            ToF = calc_tof_ds(first_frame->response_timestamp, first_frame->request_timestamp,
   19218:	f8d5 1013 	ldr.w	r1, [r5, #19]
   1921c:	f8d5 0017 	ldr.w	r0, [r5, #23]
   19220:	e9cd 6306 	strd	r6, r3, [sp, #24]
                              frame->transmission_timestamp, frame->reception_timestamp);
   19224:	f8d4 600f 	ldr.w	r6, [r4, #15]
            ToF = calc_tof_ds(first_frame->response_timestamp, first_frame->request_timestamp,
   19228:	e9cd 6304 	strd	r6, r3, [sp, #16]
   1922c:	f8d4 6013 	ldr.w	r6, [r4, #19]
   19230:	9603      	str	r6, [sp, #12]
   19232:	f8d4 4017 	ldr.w	r4, [r4, #23]
   19236:	9402      	str	r4, [sp, #8]
                              first_frame->transmission_timestamp, first_frame->reception_timestamp,
   19238:	f8d5 400b 	ldr.w	r4, [r5, #11]
            ToF = calc_tof_ds(first_frame->response_timestamp, first_frame->request_timestamp,
   1923c:	e9cd 4300 	strd	r4, r3, [sp]
   19240:	f7fd feda 	bl	16ff8 <calc_tof_ds>
            break;
   19244:	e00e      	b.n	19264 <uwb_rng_twr_to_tof+0xa4>
                              frame->transmission_timestamp, frame->reception_timestamp, skew);
   19246:	f8d4 200f 	ldr.w	r2, [r4, #15]
            ToF = calc_tof_ss(frame->response_timestamp, frame->request_timestamp,
   1924a:	f8d4 1013 	ldr.w	r1, [r4, #19]
   1924e:	f8d4 0017 	ldr.w	r0, [r4, #23]
                              frame->transmission_timestamp, frame->reception_timestamp, skew);
   19252:	f8d4 400b 	ldr.w	r4, [r4, #11]
            ToF = calc_tof_ss(frame->response_timestamp, frame->request_timestamp,
   19256:	2300      	movs	r3, #0
   19258:	e9cd 4300 	strd	r4, r3, [sp]
   1925c:	ed9f 0b02 	vldr	d0, [pc, #8]	; 19268 <uwb_rng_twr_to_tof+0xa8>
   19260:	f7fd fe9a 	bl	16f98 <calc_tof_ss>
}
   19264:	b008      	add	sp, #32
   19266:	bd70      	pop	{r4, r5, r6, pc}
	...

00019270 <tx_final_cb>:
 *
 * @return void
 */
static bool
tx_final_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
   19270:	b570      	push	{r4, r5, r6, lr}
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
   19272:	684e      	ldr	r6, [r1, #4]
    twr_frame_t * frame = rng->frames[(rng->idx)%rng->nframes];
   19274:	f8b6 207a 	ldrh.w	r2, [r6, #122]	; 0x7a
   19278:	f8b6 3076 	ldrh.w	r3, [r6, #118]	; 0x76
   1927c:	fbb3 f1f2 	udiv	r1, r3, r2
   19280:	fb02 3311 	mls	r3, r2, r1, r3
   19284:	b29b      	uxth	r3, r3
   19286:	eb06 0383 	add.w	r3, r6, r3, lsl #2

    frame->remote.cartesian.x = DPL_FLOAT64_INIT(MYNEWT_VAL(LOCAL_COORDINATE_X));
   1928a:	2200      	movs	r2, #0
    twr_frame_t * frame = rng->frames[(rng->idx)%rng->nframes];
   1928c:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
    frame->remote.cartesian.x = DPL_FLOAT64_INIT(MYNEWT_VAL(LOCAL_COORDINATE_X));
   19290:	2300      	movs	r3, #0
   19292:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
    frame->remote.cartesian.y = DPL_FLOAT64_INIT(MYNEWT_VAL(LOCAL_COORDINATE_Y));
   19296:	e9c4 2316 	strd	r2, r3, [r4, #88]	; 0x58
    frame->remote.cartesian.z = DPL_FLOAT64_INIT(MYNEWT_VAL(LOCAL_COORDINATE_Z));
   1929a:	e9c4 2318 	strd	r2, r3, [r4, #96]	; 0x60

    if (inst->capabilities.single_receiver_pdoa) {
   1929e:	f890 34b2 	ldrb.w	r3, [r0, #1202]	; 0x4b2
   192a2:	079a      	lsls	r2, r3, #30
{
   192a4:	4605      	mov	r5, r0
    if (inst->capabilities.single_receiver_pdoa) {
   192a6:	d507      	bpl.n	192b8 <tx_final_cb+0x48>
    return (dev->uw_funcs->uf_calc_pdoa(dev, diag));
   192a8:	6a43      	ldr	r3, [r0, #36]	; 0x24
   192aa:	f8d0 14f8 	ldr.w	r1, [r0, #1272]	; 0x4f8
   192ae:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
   192b2:	4798      	blx	r3
        frame->remote.pdoa = uwb_calc_pdoa(inst, inst->rxdiag);
   192b4:	ed84 0a1c 	vstr	s0, [r4, #112]	; 0x70
    }
    if (inst->capabilities.sts) {
   192b8:	f895 34b2 	ldrb.w	r3, [r5, #1202]	; 0x4b2
   192bc:	07db      	lsls	r3, r3, #31
   192be:	d517      	bpl.n	192f0 <tx_final_cb+0x80>
        frame->remote.flags.has_sts = inst->config.rx.stsMode != DWT_STS_MODE_OFF;
   192c0:	f895 3518 	ldrb.w	r3, [r5, #1304]	; 0x518
   192c4:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
   192c8:	3b00      	subs	r3, #0
   192ca:	bf18      	it	ne
   192cc:	2301      	movne	r3, #1
   192ce:	f363 0200 	bfi	r2, r3, #0, #1
        frame->local.flags.has_valid_sts = !(inst->status.sts_ts_error || inst->status.sts_pream_error);
   192d2:	f895 350b 	ldrb.w	r3, [r5, #1291]	; 0x50b
        frame->remote.flags.has_sts = inst->config.rx.stsMode != DWT_STS_MODE_OFF;
   192d6:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
        frame->local.flags.has_valid_sts = !(inst->status.sts_ts_error || inst->status.sts_pream_error);
   192da:	f013 0f30 	tst.w	r3, #48	; 0x30
   192de:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   192e2:	bf0c      	ite	eq
   192e4:	2201      	moveq	r2, #1
   192e6:	2200      	movne	r2, #0
   192e8:	f362 0341 	bfi	r3, r2, #1, #1
   192ec:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
    return (dev->uw_funcs->uf_calc_rssi(dev, diag));
   192f0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   192f2:	f8d5 14f8 	ldr.w	r1, [r5, #1272]	; 0x4f8
   192f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   192fa:	4628      	mov	r0, r5
   192fc:	4798      	blx	r3
    return (dev->uw_funcs->uf_calc_fppl(dev, diag));
   192fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   19300:	f8d5 14f8 	ldr.w	r1, [r5, #1272]	; 0x4f8
   19304:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
    }
    frame->remote.rssi = uwb_calc_rssi(inst, inst->rxdiag);
   19308:	ed84 0a1a 	vstr	s0, [r4, #104]	; 0x68
   1930c:	4628      	mov	r0, r5
   1930e:	4798      	blx	r3
    frame->remote.fppl = uwb_calc_fppl(inst, inst->rxdiag);

    if (frame->code != UWB_DATA_CODE_SS_TWR_EXT_T1) {
   19310:	f8b4 2009 	ldrh.w	r2, [r4, #9]
    frame->remote.fppl = uwb_calc_fppl(inst, inst->rxdiag);
   19314:	ed84 0a1b 	vstr	s0, [r4, #108]	; 0x6c
    if (frame->code != UWB_DATA_CODE_SS_TWR_EXT_T1) {
   19318:	f240 1315 	movw	r3, #277	; 0x115
   1931c:	429a      	cmp	r2, r3
   1931e:	d02f      	beq.n	19380 <tx_final_cb+0x110>
                                                         range)
                );
            frame->spherical.range = range - bias;
        }
#else
        frame->remote.spherical.range = uwb_rng_tof_to_meters(uwb_rng_twr_to_tof(rng,rng->idx));
   19320:	f8b6 1076 	ldrh.w	r1, [r6, #118]	; 0x76
   19324:	4630      	mov	r0, r6
   19326:	f7ff ff4b 	bl	191c0 <uwb_rng_twr_to_tof>
   1932a:	f7fd fe11 	bl	16f50 <uwb_rng_tof_to_meters>
#endif
        frame->remote.spherical_variance.range = DPL_FLOAT64_I32_TO_F64(MYNEWT_VAL(RANGE_VARIANCE));
   1932e:	a31c      	add	r3, pc, #112	; (adr r3, 193a0 <tx_final_cb+0x130>)
   19330:	e9d3 2300 	ldrd	r2, r3, [r3]
        frame->remote.spherical.range = uwb_rng_tof_to_meters(uwb_rng_twr_to_tof(rng,rng->idx));
   19334:	ed84 0b08 	vstr	d0, [r4, #32]
        frame->remote.spherical_variance.range = DPL_FLOAT64_I32_TO_F64(MYNEWT_VAL(RANGE_VARIANCE));
   19338:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    } else {
        frame->remote.spherical.range = DPL_FLOAT64_NAN();
    }
    frame->remote.spherical_variance.azimuth = DPL_FLOAT64_INIT(-1.0);
    frame->remote.spherical_variance.zenith = DPL_FLOAT64_INIT(-1.0);
    if (!DPL_FLOAT32_ISNAN(frame->remote.pdoa)) {
   1933c:	ed94 0a1c 	vldr	s0, [r4, #112]	; 0x70
    frame->remote.spherical_variance.azimuth = DPL_FLOAT64_INIT(-1.0);
   19340:	4b15      	ldr	r3, [pc, #84]	; (19398 <tx_final_cb+0x128>)
    if (!DPL_FLOAT32_ISNAN(frame->remote.pdoa)) {
   19342:	eeb4 0a40 	vcmp.f32	s0, s0
    frame->remote.spherical_variance.azimuth = DPL_FLOAT64_INIT(-1.0);
   19346:	2200      	movs	r2, #0
    if (!DPL_FLOAT32_ISNAN(frame->remote.pdoa)) {
   19348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    frame->remote.spherical_variance.azimuth = DPL_FLOAT64_INIT(-1.0);
   1934c:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
    frame->remote.spherical_variance.zenith = DPL_FLOAT64_INIT(-1.0);
   19350:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
    if (!DPL_FLOAT32_ISNAN(frame->remote.pdoa)) {
   19354:	d612      	bvs.n	1937c <tx_final_cb+0x10c>
        frame->remote.spherical.azimuth = DPL_FLOAT64_FROM_F32(uwb_calc_aoa(
   19356:	f505 639a 	add.w	r3, r5, #1232	; 0x4d0
   1935a:	edd3 0a00 	vldr	s1, [r3]
   1935e:	f895 050c 	ldrb.w	r0, [r5, #1292]	; 0x50c
   19362:	f7ef fbc1 	bl	8ae8 <uwb_calc_aoa>
   19366:	ee10 0a10 	vmov	r0, s0
   1936a:	f005 f9cd 	bl	1e708 <__aeabi_f2d>
            frame->remote.pdoa, inst->config.channel, inst->rx_ant_separation)
            );
        frame->remote.spherical_variance.azimuth = DPL_FLOAT64_INIT(MYNEWT_VAL(AZIMUTH_VARIANCE));
   1936e:	a308      	add	r3, pc, #32	; (adr r3, 19390 <tx_final_cb+0x120>)
   19370:	e9d3 2300 	ldrd	r2, r3, [r3]
        frame->remote.spherical.azimuth = DPL_FLOAT64_FROM_F32(uwb_calc_aoa(
   19374:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
        frame->remote.spherical_variance.azimuth = DPL_FLOAT64_INIT(MYNEWT_VAL(AZIMUTH_VARIANCE));
   19378:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
    }

    return true;
}
   1937c:	2001      	movs	r0, #1
   1937e:	bd70      	pop	{r4, r5, r6, pc}
        frame->remote.spherical.range = DPL_FLOAT64_NAN();
   19380:	4b06      	ldr	r3, [pc, #24]	; (1939c <tx_final_cb+0x12c>)
   19382:	2200      	movs	r2, #0
   19384:	e9c4 2308 	strd	r2, r3, [r4, #32]
   19388:	e7d8      	b.n	1933c <tx_final_cb+0xcc>
   1938a:	bf00      	nop
   1938c:	f3af 8000 	nop.w
   19390:	00000000 	.word	0x00000000
   19394:	3f9dcc64 	.word	0x3f9dcc64
   19398:	bff00000 	.word	0xbff00000
   1939c:	7ff80000 	.word	0x7ff80000
   193a0:	00000000 	.word	0x00000000
   193a4:	3f41d718 	.word	0x3f41d718

000193a8 <rng_issue_complete>:
{
   193a8:	b538      	push	{r3, r4, r5, lr}
    if(!(SLIST_EMPTY(&inst->interface_cbs))) {
   193aa:	f8d0 4530 	ldr.w	r4, [r0, #1328]	; 0x530
{
   193ae:	4605      	mov	r5, r0
    if(!(SLIST_EMPTY(&inst->interface_cbs))) {
   193b0:	b134      	cbz	r4, 193c0 <rng_issue_complete+0x18>
            if (cbs_i != NULL && cbs_i->complete_cb)
   193b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   193b4:	b113      	cbz	r3, 193bc <rng_issue_complete+0x14>
                if(cbs_i->complete_cb(inst, cbs_i)) continue;
   193b6:	4621      	mov	r1, r4
   193b8:	4628      	mov	r0, r5
   193ba:	4798      	blx	r3
        SLIST_FOREACH(cbs_i, &inst->interface_cbs, next) {
   193bc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   193be:	e7f7      	b.n	193b0 <rng_issue_complete+0x8>
}
   193c0:	bd38      	pop	{r3, r4, r5, pc}

000193c2 <tx_complete_cb>:
    if (inst->fctrl != FCNTL_IEEE_RANGE_16)
   193c2:	f8b0 24e0 	ldrh.w	r2, [r0, #1248]	; 0x4e0
{
   193c6:	b538      	push	{r3, r4, r5, lr}
    if (inst->fctrl != FCNTL_IEEE_RANGE_16)
   193c8:	f648 0341 	movw	r3, #34881	; 0x8841
   193cc:	429a      	cmp	r2, r3
{
   193ce:	4605      	mov	r5, r0
    if (inst->fctrl != FCNTL_IEEE_RANGE_16)
   193d0:	d120      	bne.n	19414 <tx_complete_cb+0x52>
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
   193d2:	684c      	ldr	r4, [r1, #4]
    if(dpl_sem_get_count(&rng->sem) == 1) {
   193d4:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
   193d8:	2b01      	cmp	r3, #1
   193da:	d01b      	beq.n	19414 <tx_complete_cb+0x52>
    switch(rng->code) {
   193dc:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
   193e0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
   193e4:	2b19      	cmp	r3, #25
   193e6:	d815      	bhi.n	19414 <tx_complete_cb+0x52>
            RNG_STATS_INC(tx_complete);
   193e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   193ea:	3301      	adds	r3, #1
   193ec:	6263      	str	r3, [r4, #36]	; 0x24
            if (rng->control.complete_after_tx) {
   193ee:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   193f2:	079b      	lsls	r3, r3, #30
   193f4:	d506      	bpl.n	19404 <tx_complete_cb+0x42>
   193f6:	f104 0050 	add.w	r0, r4, #80	; 0x50
   193fa:	f7f4 f92d 	bl	d658 <os_sem_release>
                rng_issue_complete(inst);
   193fe:	4628      	mov	r0, r5
   19400:	f7ff ffd2 	bl	193a8 <rng_issue_complete>
            rng->control.complete_after_tx = 0;
   19404:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   19408:	f36f 0341 	bfc	r3, #1, #1
   1940c:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
            return true;
   19410:	2001      	movs	r0, #1
}
   19412:	bd38      	pop	{r3, r4, r5, pc}
        return false;
   19414:	2000      	movs	r0, #0
   19416:	e7fc      	b.n	19412 <tx_complete_cb+0x50>

00019418 <uwb_rng_pkg_init>:
 * @return void
 */

void
uwb_rng_pkg_init(void)
{
   19418:	b570      	push	{r4, r5, r6, lr}
    int i;
    struct uwb_rng_instance *rng;
    struct uwb_dev *udev;
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    printf("{\"utime\": %"PRIu32",\"msg\": \"rng_pkg_init\"}\n",
   1941a:	f7f7 fa8b 	bl	10934 <dpl_cputime_get32>
   1941e:	4601      	mov	r1, r0
   19420:	4810      	ldr	r0, [pc, #64]	; (19464 <uwb_rng_pkg_init+0x4c>)
   19422:	f7f7 fa0b 	bl	1083c <printf>
           dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
#endif

    for (i=0;i<ARRAY_SIZE(g_cbs);i++) {
        udev = uwb_dev_idx_lookup(i);
   19426:	2000      	movs	r0, #0
   19428:	f7ef fa7c 	bl	8924 <uwb_dev_idx_lookup>
        if (!udev) continue;
   1942c:	4605      	mov	r5, r0
   1942e:	b1b8      	cbz	r0, 19460 <uwb_rng_pkg_init+0x48>
        g_cbs[i].inst_ptr = rng = uwb_rng_init(udev, &g_config, sizeof(g_twr_frames[i])/sizeof(g_twr_frames[i][0]));
   19430:	490d      	ldr	r1, [pc, #52]	; (19468 <uwb_rng_pkg_init+0x50>)
   19432:	4e0e      	ldr	r6, [pc, #56]	; (1946c <uwb_rng_pkg_init+0x54>)
   19434:	2204      	movs	r2, #4
   19436:	f7ff fded 	bl	19014 <uwb_rng_init>
        uwb_rng_set_frames(rng, g_twr_frames[i], sizeof(g_twr_frames[0])/sizeof(g_twr_frames[0][0]));
   1943a:	2204      	movs	r2, #4
   1943c:	490c      	ldr	r1, [pc, #48]	; (19470 <uwb_rng_pkg_init+0x58>)
        g_cbs[i].inst_ptr = rng = uwb_rng_init(udev, &g_config, sizeof(g_twr_frames[i])/sizeof(g_twr_frames[i][0]));
   1943e:	6070      	str	r0, [r6, #4]
   19440:	4604      	mov	r4, r0
        uwb_rng_set_frames(rng, g_twr_frames[i], sizeof(g_twr_frames[0])/sizeof(g_twr_frames[0][0]));
   19442:	f7ff fdc1 	bl	18fc8 <uwb_rng_set_frames>
        uwb_mac_append_interface(udev, &g_cbs[i]);
   19446:	4631      	mov	r1, r6
   19448:	4628      	mov	r0, r5
   1944a:	f7ef fa95 	bl	8978 <uwb_mac_append_interface>
    memset(ev, 0, sizeof(*ev));
   1944e:	2210      	movs	r2, #16
   19450:	2100      	movs	r1, #0
   19452:	f104 0088 	add.w	r0, r4, #136	; 0x88
   19456:	f7f6 ff18 	bl	1028a <memset>
    ev->ev.ev_cb = (os_event_fn *)fn;
   1945a:	4b06      	ldr	r3, [pc, #24]	; (19474 <uwb_rng_pkg_init+0x5c>)
    ev->ev.ev_arg = arg;
   1945c:	e9c4 3423 	strd	r3, r4, [r4, #140]	; 0x8c
#if __KERNEL__
        rng_chrdev_create(udev->idx);
#endif
    }

}
   19460:	bd70      	pop	{r4, r5, r6, pc}
   19462:	bf00      	nop
   19464:	0002207b 	.word	0x0002207b
   19468:	2000161c 	.word	0x2000161c
   1946c:	200015e0 	.word	0x200015e0
   19470:	20006c18 	.word	0x20006c18
   19474:	00018e71 	.word	0x00018e71

00019478 <uwb_rng_pkg_init2>:
    for (i=0;i<ARRAY_SIZE(g_cbs);i++) {
        if (!g_cbs[i].inst_ptr) continue;
        uwbrng_sysfs_init((struct uwb_rng_instance *)g_cbs[i].inst_ptr);
    }
#endif
}
   19478:	4770      	bx	lr
	...

0001947c <uwb_rng_pkg_down>:

int
uwb_rng_pkg_down(int reason)
{
   1947c:	b510      	push	{r4, lr}
    int i;
    struct uwb_rng_instance * rng;

    for (i=0;i<ARRAY_SIZE(g_cbs);i++) {
        rng = (struct uwb_rng_instance *)g_cbs[i].inst_ptr;
   1947e:	4c07      	ldr	r4, [pc, #28]	; (1949c <uwb_rng_pkg_down+0x20>)
   19480:	6863      	ldr	r3, [r4, #4]
        if (!rng) continue;
   19482:	b143      	cbz	r3, 19496 <uwb_rng_pkg_down+0x1a>
#if __KERNEL__
        rng_chrdev_destroy(rng->dev_inst->idx);
        uwbrng_sysfs_deinit(rng->dev_inst->idx);
#endif
        uwb_mac_remove_interface(rng->dev_inst, g_cbs[i].id);
   19484:	6818      	ldr	r0, [r3, #0]
   19486:	8861      	ldrh	r1, [r4, #2]
   19488:	f7ef fa93 	bl	89b2 <uwb_mac_remove_interface>
        uwb_rng_free(g_cbs[i].inst_ptr);
   1948c:	6860      	ldr	r0, [r4, #4]
   1948e:	f7ff fd89 	bl	18fa4 <uwb_rng_free>
        g_cbs[i].inst_ptr = 0;
   19492:	2300      	movs	r3, #0
   19494:	6063      	str	r3, [r4, #4]
    }

    return 0;
}
   19496:	2000      	movs	r0, #0
   19498:	bd10      	pop	{r4, pc}
   1949a:	bf00      	nop
   1949c:	200015e0 	.word	0x200015e0

000194a0 <rng_encode>:
 * output parameters
 * returns void
 */
void
rng_encode(struct uwb_rng_instance * rng)
{
   194a0:	b530      	push	{r4, r5, lr}
    int rc;

    twr_frame_t * frame = rng->frames[rng->idx_current];
   194a2:	f8b0 1078 	ldrh.w	r1, [r0, #120]	; 0x78
   194a6:	eb00 0381 	add.w	r3, r0, r1, lsl #2
{
   194aa:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
    twr_frame_t * frame = rng->frames[rng->idx_current];
   194ae:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
{
   194b2:	4605      	mov	r5, r0
    dpl_float64_t time_of_flight = uwb_rng_twr_to_tof(rng, rng->idx_current);
   194b4:	f7ff fe84 	bl	191c0 <uwb_rng_twr_to_tof>
    frame->local.spherical.range = uwb_rng_tof_to_meters(time_of_flight);
   194b8:	f7fd fd4a 	bl	16f50 <uwb_rng_tof_to_meters>

    rng_json_t json = {
   194bc:	f44f 7206 	mov.w	r2, #536	; 0x218
    frame->local.spherical.range = uwb_rng_tof_to_meters(time_of_flight);
   194c0:	ed84 0b22 	vstr	d0, [r4, #136]	; 0x88
    rng_json_t json = {
   194c4:	2100      	movs	r1, #0
   194c6:	4668      	mov	r0, sp
   194c8:	f7f6 fedf 	bl	1028a <memset>
#if MYNEWT_VAL(UWB_WCS_ENABLED)
        .utime = uwb_wcs_read_systime_master64(rng->dev_inst),
   194cc:	6828      	ldr	r0, [r5, #0]
   194ce:	f7f6 fd92 	bl	fff6 <uwb_wcs_read_systime_master64>
    rng_json_t json = {
   194d2:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
#else
        .utime = dpl_cputime_ticks_to_usecs(dpl_cputime_get32()),
#endif
        .uid = frame->src_address,
   194d6:	f8b4 2007 	ldrh.w	r2, [r4, #7]
    rng_json_t json = {
   194da:	4942      	ldr	r1, [pc, #264]	; (195e4 <rng_encode+0x144>)
        .uid = frame->src_address,
   194dc:	2300      	movs	r3, #0
   194de:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
    rng_json_t json = {
   194e2:	2000      	movs	r0, #0
        .ouid = frame->dst_address,
   194e4:	f8b4 2005 	ldrh.w	r2, [r4, #5]
    rng_json_t json = {
   194e8:	e9cd 0140 	strd	r0, r1, [sp, #256]	; 0x100
   194ec:	e9cd 0142 	strd	r0, r1, [sp, #264]	; 0x108
        .ouid = frame->dst_address,
   194f0:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
   194f4:	aa24      	add	r2, sp, #144	; 0x90
        .ppm = DPL_FLOAT64_NAN(),
        .sts = DPL_FLOAT64_NAN(),
        .idx =0
    };

    for (uint8_t i = 0;i< sizeof(json.raz)/sizeof(json.raz.array[0]);i++)
   194f6:	3301      	adds	r3, #1
   194f8:	b2db      	uxtb	r3, r3
   194fa:	2b03      	cmp	r3, #3
            json.raz.array[i] = json.braz.array[i] = json.los[i] = DPL_FLOAT64_NAN();
   194fc:	e9c2 0114 	strd	r0, r1, [r2, #80]	; 0x50
   19500:	e9c2 0106 	strd	r0, r1, [r2, #24]
   19504:	e8e2 0102 	strd	r0, r1, [r2], #8
    for (uint8_t i = 0;i< sizeof(json.raz)/sizeof(json.raz.array[0]);i++)
   19508:	d1f5      	bne.n	194f6 <rng_encode+0x56>

    switch(frame->code){
   1950a:	f8b4 1009 	ldrh.w	r1, [r4, #9]
   1950e:	f5a1 7389 	sub.w	r3, r1, #274	; 0x112
   19512:	b29a      	uxth	r2, r3
   19514:	2a16      	cmp	r2, #22
   19516:	d85b      	bhi.n	195d0 <rng_encode+0x130>
   19518:	2301      	movs	r3, #1
   1951a:	4093      	lsls	r3, r2
   1951c:	4a32      	ldr	r2, [pc, #200]	; (195e8 <rng_encode+0x148>)
   1951e:	4213      	tst	r3, r2
   19520:	d10f      	bne.n	19542 <rng_encode+0xa2>
   19522:	4a32      	ldr	r2, [pc, #200]	; (195ec <rng_encode+0x14c>)
   19524:	401a      	ands	r2, r3
   19526:	2a00      	cmp	r2, #0
   19528:	d052      	beq.n	195d0 <rng_encode+0x130>
        case UWB_DATA_CODE_SS_TWR_EXT_FINAL:
        case UWB_DATA_CODE_DS_TWR_EXT_FINAL:
        for (uint8_t i = 0; i < sizeof(json.braz)/sizeof(json.braz.array[0]);i++){
            json.braz.array[i] = frame->remote.spherical.array[i];
   1952a:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
   1952e:	e9cd 232a 	strd	r2, r3, [sp, #168]	; 0xa8
   19532:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   19536:	e9cd 232c 	strd	r2, r3, [sp, #176]	; 0xb0
   1953a:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
   1953e:	e9cd 232e 	strd	r2, r3, [sp, #184]	; 0xb8
        /* Intentionally fall through */
        case UWB_DATA_CODE_SS_TWR_FINAL:
        case UWB_DATA_CODE_SS_TWR_ACK_FINAL:
        case UWB_DATA_CODE_DS_TWR_FINAL:
        for (uint8_t i = 0; i < sizeof(json.raz)/sizeof(json.raz.array[0]);i++){
            json.raz.array[i] = frame->local.spherical.array[i];
   19542:	e9d4 2322 	ldrd	r2, r3, [r4, #136]	; 0x88
   19546:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   1954a:	e9d4 2324 	ldrd	r2, r3, [r4, #144]	; 0x90
   1954e:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
   19552:	e9d4 2326 	ldrd	r2, r3, [r4, #152]	; 0x98
   19556:	e9cd 2328 	strd	r2, r3, [sp, #160]	; 0xa0
        break;
        default: printf(",error: \"Unknown Frame Code\", %x\n", frame->code);
    }

#if MYNEWT_VAL(RNG_VERBOSE) > 1
    json.pd   = DPL_FLOAT64_FROM_F32(frame->local.pdoa);
   1955a:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
   1955e:	f005 f8d3 	bl	1e708 <__aeabi_f2d>
   19562:	e9cd 013e 	strd	r0, r1, [sp, #248]	; 0xf8
    json.code = frame->code;
    if(rng->dev_inst->config.rxdiag_enable){
   19566:	682d      	ldr	r5, [r5, #0]
    json.code = frame->code;
   19568:	f8b4 3009 	ldrh.w	r3, [r4, #9]
   1956c:	931e      	str	r3, [sp, #120]	; 0x78
   1956e:	2300      	movs	r3, #0
   19570:	931f      	str	r3, [sp, #124]	; 0x7c
    if(rng->dev_inst->config.rxdiag_enable){
   19572:	f895 352c 	ldrb.w	r3, [r5, #1324]	; 0x52c
   19576:	065b      	lsls	r3, r3, #25
   19578:	d520      	bpl.n	195bc <rng_encode+0x11c>
        for (uint8_t i=0;i< sizeof(json.rssi)/sizeof(json.rssi[0]);i++)
            json.rssi[i] = DPL_FLOAT64_FROM_F32(frame->local.vrssi[i]);
   1957a:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
   1957e:	f005 f8c3 	bl	1e708 <__aeabi_f2d>
   19582:	e9cd 0130 	strd	r0, r1, [sp, #192]	; 0xc0
   19586:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
   1958a:	f005 f8bd 	bl	1e708 <__aeabi_f2d>
   1958e:	e9cd 0132 	strd	r0, r1, [sp, #200]	; 0xc8
   19592:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
   19596:	f005 f8b7 	bl	1e708 <__aeabi_f2d>
    return (dev->uw_funcs->uf_estimate_los(dev, rssi, fppl));
   1959a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1959c:	edd4 0a35 	vldr	s1, [r4, #212]	; 0xd4
   195a0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   195a4:	ed94 0a34 	vldr	s0, [r4, #208]	; 0xd0
   195a8:	e9cd 0134 	strd	r0, r1, [sp, #208]	; 0xd0
   195ac:	4628      	mov	r0, r5
   195ae:	4798      	blx	r3
   195b0:	ee10 0a10 	vmov	r0, s0
        dpl_float32_t fppl = frame->local.fppl;
        json.los[0] = DPL_FLOAT64_FROM_F32(uwb_estimate_los(rng->dev_inst, frame->local.rssi, fppl));
   195b4:	f005 f8a8 	bl	1e708 <__aeabi_f2d>
   195b8:	e9cd 0138 	strd	r0, r1, [sp, #224]	; 0xe0
    }

    rc = rng_json_write(&json);
   195bc:	4668      	mov	r0, sp
   195be:	f000 f837 	bl	19630 <rng_json_write>
    assert(rc == 0);
   195c2:	b148      	cbz	r0, 195d8 <rng_encode+0x138>
   195c4:	2300      	movs	r3, #0
   195c6:	461a      	mov	r2, r3
   195c8:	4619      	mov	r1, r3
   195ca:	4618      	mov	r0, r3
   195cc:	f7f3 f916 	bl	c7fc <__assert_func>
        default: printf(",error: \"Unknown Frame Code\", %x\n", frame->code);
   195d0:	4807      	ldr	r0, [pc, #28]	; (195f0 <rng_encode+0x150>)
   195d2:	f7f7 f933 	bl	1083c <printf>
   195d6:	e7c0      	b.n	1955a <rng_encode+0xba>
    size_t n = strlen(json.iobuf);
    json.iobuf[n]='\n';
    json.iobuf[n+1]='\0';
    rng_encode_output(rng->dev_inst->idx, json.iobuf, strlen(json.iobuf));
#else
    printf("%s\n",json.iobuf);
   195d8:	a844      	add	r0, sp, #272	; 0x110
   195da:	f000 fbeb 	bl	19db4 <puts>
#endif

}
   195de:	f50d 7d07 	add.w	sp, sp, #540	; 0x21c
   195e2:	bd30      	pop	{r4, r5, pc}
   195e4:	7ff80000 	.word	0x7ff80000
   195e8:	00020101 	.word	0x00020101
   195ec:	00400010 	.word	0x00400010
   195f0:	00022106 	.word	0x00022106

000195f4 <rng_write_line>:
        free(json);
}

static int
rng_write_line(void *buf, char* data, int len)
{
   195f4:	b570      	push	{r4, r5, r6, lr}
   195f6:	4603      	mov	r3, r0
    rng_json_t * json = buf;
    for (uint16_t i=0; i < len; i++){
   195f8:	2400      	movs	r4, #0
   195fa:	b2a5      	uxth	r5, r4
   195fc:	4295      	cmp	r5, r2
        json->iobuf[(json->idx++)%MYNEWT_VAL(UWB_RNG_JSON_BUFSIZE)] = data[i];
   195fe:	f8b3 0210 	ldrh.w	r0, [r3, #528]	; 0x210
    for (uint16_t i=0; i < len; i++){
   19602:	da0a      	bge.n	1961a <rng_write_line+0x26>
        json->iobuf[(json->idx++)%MYNEWT_VAL(UWB_RNG_JSON_BUFSIZE)] = data[i];
   19604:	1c46      	adds	r6, r0, #1
   19606:	f8a3 6210 	strh.w	r6, [r3, #528]	; 0x210
   1960a:	5d4d      	ldrb	r5, [r1, r5]
   1960c:	fa53 f080 	uxtab	r0, r3, r0
        if (data[i]=='\0'){
   19610:	3401      	adds	r4, #1
        json->iobuf[(json->idx++)%MYNEWT_VAL(UWB_RNG_JSON_BUFSIZE)] = data[i];
   19612:	f880 5110 	strb.w	r5, [r0, #272]	; 0x110
        if (data[i]=='\0'){
   19616:	2d00      	cmp	r5, #0
   19618:	d1ef      	bne.n	195fa <rng_write_line+0x6>
            break;
        }
    }
    if (json->iobuf[json->idx-1]=='\0')
   1961a:	f8b3 1210 	ldrh.w	r1, [r3, #528]	; 0x210
   1961e:	4419      	add	r1, r3
   19620:	f891 110f 	ldrb.w	r1, [r1, #271]	; 0x10f
   19624:	b109      	cbz	r1, 1962a <rng_write_line+0x36>
        json->idx = 0;
    return len;
}
   19626:	4610      	mov	r0, r2
   19628:	bd70      	pop	{r4, r5, r6, pc}
        json->idx = 0;
   1962a:	f8a3 1210 	strh.w	r1, [r3, #528]	; 0x210
   1962e:	e7fa      	b.n	19626 <rng_write_line+0x32>

00019630 <rng_json_write>:
rng_json_write(rng_json_t * json){

    struct json_value value;
    int rc;

    json->encoder.je_write = rng_write_line;
   19630:	4bc2      	ldr	r3, [pc, #776]	; (1993c <rng_json_write+0x30c>)
rng_json_write(rng_json_t * json){
   19632:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    json->encoder.je_arg = (void *)json;
   19636:	e9c0 3006 	strd	r3, r0, [r0, #24]
    json->decoder.json_buf.jb_read_next = json_read_next;
   1963a:	4bc1      	ldr	r3, [pc, #772]	; (19940 <rng_json_write+0x310>)
   1963c:	6043      	str	r3, [r0, #4]
    json->decoder.json_buf.jb_read_prev = json_read_prev;
   1963e:	4bc1      	ldr	r3, [pc, #772]	; (19944 <rng_json_write+0x314>)
   19640:	6083      	str	r3, [r0, #8]
    json->decoder.json_buf.jb_readn = json_readn;
   19642:	4bc1      	ldr	r3, [pc, #772]	; (19948 <rng_json_write+0x318>)
   19644:	6003      	str	r3, [r0, #0]
    json->encoder.je_wr_commas = 0;
   19646:	f890 3020 	ldrb.w	r3, [r0, #32]

    rc = json_encode_object_start(&json->encoder);
   1964a:	f100 0618 	add.w	r6, r0, #24
    json->encoder.je_wr_commas = 0;
   1964e:	f36f 0300 	bfc	r3, #0, #1
rng_json_write(rng_json_t * json){
   19652:	b085      	sub	sp, #20
   19654:	4604      	mov	r4, r0
    json->encoder.je_wr_commas = 0;
   19656:	f880 3020 	strb.w	r3, [r0, #32]
    rc = json_encode_object_start(&json->encoder);
   1965a:	4630      	mov	r0, r6
   1965c:	f004 fcfa 	bl	1e054 <json_encode_object_start>
    JSON_VALUE_UINT(&value, json->utime);
   19660:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
    rc |= json_encode_object_entry(&json->encoder, "utime", &value);
   19664:	49b9      	ldr	r1, [pc, #740]	; (1994c <rng_json_write+0x31c>)
    JSON_VALUE_UINT(&value, json->utime);
   19666:	e9cd 2302 	strd	r2, r3, [sp, #8]
    rc = json_encode_object_start(&json->encoder);
   1966a:	4607      	mov	r7, r0
    rc |= json_encode_object_entry(&json->encoder, "utime", &value);
   1966c:	466a      	mov	r2, sp
    JSON_VALUE_UINT(&value, json->utime);
   1966e:	f04f 0801 	mov.w	r8, #1
    rc |= json_encode_object_entry(&json->encoder, "utime", &value);
   19672:	4630      	mov	r0, r6
    JSON_VALUE_UINT(&value, json->utime);
   19674:	f88d 8001 	strb.w	r8, [sp, #1]
    rc |= json_encode_object_entry(&json->encoder, "utime", &value);
   19678:	f004 fd34 	bl	1e0e4 <json_encode_object_entry>

    if (json->seq){
   1967c:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
   19680:	ea52 0103 	orrs.w	r1, r2, r3
    rc |= json_encode_object_entry(&json->encoder, "utime", &value);
   19684:	ea47 0700 	orr.w	r7, r7, r0
    if (json->seq){
   19688:	d009      	beq.n	1969e <rng_json_write+0x6e>
        JSON_VALUE_UINT(&value, json->seq);
   1968a:	e9cd 2302 	strd	r2, r3, [sp, #8]
        rc |= json_encode_object_entry(&json->encoder, "seq", &value);
   1968e:	49b0      	ldr	r1, [pc, #704]	; (19950 <rng_json_write+0x320>)
        JSON_VALUE_UINT(&value, json->seq);
   19690:	f88d 8001 	strb.w	r8, [sp, #1]
        rc |= json_encode_object_entry(&json->encoder, "seq", &value);
   19694:	466a      	mov	r2, sp
   19696:	4630      	mov	r0, r6
   19698:	f004 fd24 	bl	1e0e4 <json_encode_object_entry>
   1969c:	4307      	orrs	r7, r0
    }
    if (json->code){
   1969e:	e9d4 231e 	ldrd	r2, r3, [r4, #120]	; 0x78
   196a2:	ea52 0103 	orrs.w	r1, r2, r3
   196a6:	d00a      	beq.n	196be <rng_json_write+0x8e>
        JSON_VALUE_UINT(&value, json->code);
   196a8:	2101      	movs	r1, #1
   196aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
   196ae:	f88d 1001 	strb.w	r1, [sp, #1]
        rc |= json_encode_object_entry(&json->encoder, "c", &value);
   196b2:	466a      	mov	r2, sp
   196b4:	49a7      	ldr	r1, [pc, #668]	; (19954 <rng_json_write+0x324>)
   196b6:	4630      	mov	r0, r6
   196b8:	f004 fd14 	bl	1e0e4 <json_encode_object_entry>
   196bc:	4307      	orrs	r7, r0
    }
    if (json->uid){
   196be:	e9d4 2320 	ldrd	r2, r3, [r4, #128]	; 0x80
   196c2:	ea52 0103 	orrs.w	r1, r2, r3
   196c6:	d00a      	beq.n	196de <rng_json_write+0xae>
        JSON_VALUE_UINT(&value, json->uid);
   196c8:	2101      	movs	r1, #1
   196ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
   196ce:	f88d 1001 	strb.w	r1, [sp, #1]
        rc |= json_encode_object_entry(&json->encoder, "uid", &value);
   196d2:	466a      	mov	r2, sp
   196d4:	49a0      	ldr	r1, [pc, #640]	; (19958 <rng_json_write+0x328>)
   196d6:	4630      	mov	r0, r6
   196d8:	f004 fd04 	bl	1e0e4 <json_encode_object_entry>
   196dc:	4307      	orrs	r7, r0
    }
    if (json->ouid){
   196de:	e9d4 2322 	ldrd	r2, r3, [r4, #136]	; 0x88
   196e2:	ea52 0103 	orrs.w	r1, r2, r3
   196e6:	d00a      	beq.n	196fe <rng_json_write+0xce>
        JSON_VALUE_UINT(&value, json->ouid);
   196e8:	2101      	movs	r1, #1
   196ea:	e9cd 2302 	strd	r2, r3, [sp, #8]
   196ee:	f88d 1001 	strb.w	r1, [sp, #1]
        rc |= json_encode_object_entry(&json->encoder, "ouid", &value);
   196f2:	466a      	mov	r2, sp
   196f4:	4999      	ldr	r1, [pc, #612]	; (1995c <rng_json_write+0x32c>)
   196f6:	4630      	mov	r0, r6
   196f8:	f004 fcf4 	bl	1e0e4 <json_encode_object_entry>
   196fc:	4307      	orrs	r7, r0
    }

    if(DPL_FLOAT64_ISNAN(json->raz.azimuth) && DPL_FLOAT64_ISNAN(json->raz.zenith)){
   196fe:	e9d4 2326 	ldrd	r2, r3, [r4, #152]	; 0x98
   19702:	4610      	mov	r0, r2
   19704:	4619      	mov	r1, r3
   19706:	f005 faf1 	bl	1ecec <__aeabi_dcmpun>
   1970a:	2800      	cmp	r0, #0
   1970c:	f000 80f7 	beq.w	198fe <rng_json_write+0x2ce>
   19710:	e9d4 2328 	ldrd	r2, r3, [r4, #160]	; 0xa0
   19714:	4610      	mov	r0, r2
   19716:	4619      	mov	r1, r3
   19718:	f005 fae8 	bl	1ecec <__aeabi_dcmpun>
   1971c:	2800      	cmp	r0, #0
   1971e:	f000 80ee 	beq.w	198fe <rng_json_write+0x2ce>
        rc |= json_encode_array_name(&json->encoder, "raz");
   19722:	498f      	ldr	r1, [pc, #572]	; (19960 <rng_json_write+0x330>)
   19724:	4630      	mov	r0, r6
   19726:	f004 fe15 	bl	1e354 <json_encode_array_name>
   1972a:	4605      	mov	r5, r0
        rc |= json_encode_array_start(&json->encoder);
   1972c:	4630      	mov	r0, r6
   1972e:	f004 fe13 	bl	1e358 <json_encode_array_start>
        JSON_VALUE_FLOAT64(&value, json->raz.range);
   19732:	2306      	movs	r3, #6
   19734:	f88d 3001 	strb.w	r3, [sp, #1]
   19738:	e9d4 2324 	ldrd	r2, r3, [r4, #144]	; 0x90
        rc |= json_encode_array_start(&json->encoder);
   1973c:	4328      	orrs	r0, r5
   1973e:	4307      	orrs	r7, r0
        rc |= json_encode_array_value(&json->encoder, &value);
   19740:	4669      	mov	r1, sp
   19742:	4630      	mov	r0, r6
        JSON_VALUE_FLOAT64(&value, json->raz.range);
   19744:	e9cd 2302 	strd	r2, r3, [sp, #8]
        rc |= json_encode_array_value(&json->encoder, &value);
   19748:	f004 fe16 	bl	1e378 <json_encode_array_value>
   1974c:	4307      	orrs	r7, r0
        rc |= json_encode_array_start(&json->encoder);
        for (uint8_t i = 0; i< sizeof(json->raz)/sizeof(dpl_float64_t); i++){
            JSON_VALUE_FLOAT64(&value, json->raz.array[i]);
            rc |= json_encode_array_value(&json->encoder, &value);
        }
        rc |= json_encode_array_finish(&json->encoder);
   1974e:	4630      	mov	r0, r6
   19750:	f004 fe2e 	bl	1e3b0 <json_encode_array_finish>
    }

    if(!DPL_FLOAT64_ISNAN(json->braz.range)){
   19754:	e9d4 232a 	ldrd	r2, r3, [r4, #168]	; 0xa8
        rc |= json_encode_array_finish(&json->encoder);
   19758:	ea40 0507 	orr.w	r5, r0, r7
    if(!DPL_FLOAT64_ISNAN(json->braz.range)){
   1975c:	4619      	mov	r1, r3
   1975e:	4610      	mov	r0, r2
   19760:	f005 fac4 	bl	1ecec <__aeabi_dcmpun>
   19764:	bb58      	cbnz	r0, 197be <rng_json_write+0x18e>
        if(DPL_FLOAT64_ISNAN(json->braz.azimuth) && DPL_FLOAT64_ISNAN(json->braz.zenith)){
   19766:	e9d4 232c 	ldrd	r2, r3, [r4, #176]	; 0xb0
   1976a:	4610      	mov	r0, r2
   1976c:	4619      	mov	r1, r3
   1976e:	f005 fabd 	bl	1ecec <__aeabi_dcmpun>
   19772:	2800      	cmp	r0, #0
   19774:	f000 8100 	beq.w	19978 <rng_json_write+0x348>
   19778:	e9d4 232e 	ldrd	r2, r3, [r4, #184]	; 0xb8
   1977c:	4610      	mov	r0, r2
   1977e:	4619      	mov	r1, r3
   19780:	f005 fab4 	bl	1ecec <__aeabi_dcmpun>
   19784:	2800      	cmp	r0, #0
   19786:	f000 80f7 	beq.w	19978 <rng_json_write+0x348>
            rc |= json_encode_array_name(&json->encoder, "braz");
   1978a:	4976      	ldr	r1, [pc, #472]	; (19964 <rng_json_write+0x334>)
   1978c:	4630      	mov	r0, r6
   1978e:	f004 fde1 	bl	1e354 <json_encode_array_name>
   19792:	4607      	mov	r7, r0
            rc |= json_encode_array_start(&json->encoder);
   19794:	4630      	mov	r0, r6
   19796:	f004 fddf 	bl	1e358 <json_encode_array_start>
            JSON_VALUE_FLOAT64(&value, json->braz.range);
   1979a:	2306      	movs	r3, #6
   1979c:	f88d 3001 	strb.w	r3, [sp, #1]
   197a0:	e9d4 232a 	ldrd	r2, r3, [r4, #168]	; 0xa8
            rc |= json_encode_array_start(&json->encoder);
   197a4:	4338      	orrs	r0, r7
   197a6:	4305      	orrs	r5, r0
            rc |= json_encode_array_value(&json->encoder, &value);
   197a8:	4669      	mov	r1, sp
   197aa:	4630      	mov	r0, r6
            JSON_VALUE_FLOAT64(&value, json->braz.range);
   197ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
            rc |= json_encode_array_value(&json->encoder, &value);
   197b0:	f004 fde2 	bl	1e378 <json_encode_array_value>
   197b4:	4305      	orrs	r5, r0
            rc |= json_encode_array_finish(&json->encoder);
   197b6:	4630      	mov	r0, r6
   197b8:	f004 fdfa 	bl	1e3b0 <json_encode_array_finish>
   197bc:	4305      	orrs	r5, r0
            }
            rc |= json_encode_array_finish(&json->encoder);
        }
    }

    if(!DPL_FLOAT64_ISNAN(json->rssi[0])){
   197be:	e9d4 8930 	ldrd	r8, r9, [r4, #192]	; 0xc0
   197c2:	4642      	mov	r2, r8
   197c4:	464b      	mov	r3, r9
   197c6:	4640      	mov	r0, r8
   197c8:	4649      	mov	r1, r9
   197ca:	f005 fa8f 	bl	1ecec <__aeabi_dcmpun>
   197ce:	bb48      	cbnz	r0, 19824 <rng_json_write+0x1f4>
        if(!DPL_FLOAT64_ISNAN(json->rssi[0]) && DPL_FLOAT64_ISNAN(json->rssi[1]) && DPL_FLOAT64_ISNAN(json->rssi[2])){
   197d0:	e9d4 2332 	ldrd	r2, r3, [r4, #200]	; 0xc8
   197d4:	4610      	mov	r0, r2
   197d6:	4619      	mov	r1, r3
   197d8:	f005 fa88 	bl	1ecec <__aeabi_dcmpun>
   197dc:	2800      	cmp	r0, #0
   197de:	f000 80f0 	beq.w	199c2 <rng_json_write+0x392>
   197e2:	e9d4 2334 	ldrd	r2, r3, [r4, #208]	; 0xd0
   197e6:	4610      	mov	r0, r2
   197e8:	4619      	mov	r1, r3
   197ea:	f005 fa7f 	bl	1ecec <__aeabi_dcmpun>
   197ee:	2800      	cmp	r0, #0
   197f0:	f000 80e7 	beq.w	199c2 <rng_json_write+0x392>
                JSON_VALUE_FLOAT64(&value, json->rssi[0]);
   197f4:	2306      	movs	r3, #6
                rc |= json_encode_array_name(&json->encoder, "rssi");
   197f6:	495c      	ldr	r1, [pc, #368]	; (19968 <rng_json_write+0x338>)
                JSON_VALUE_FLOAT64(&value, json->rssi[0]);
   197f8:	f88d 3001 	strb.w	r3, [sp, #1]
                rc |= json_encode_array_name(&json->encoder, "rssi");
   197fc:	4630      	mov	r0, r6
                JSON_VALUE_FLOAT64(&value, json->rssi[0]);
   197fe:	e9cd 8902 	strd	r8, r9, [sp, #8]
                rc |= json_encode_array_name(&json->encoder, "rssi");
   19802:	f004 fda7 	bl	1e354 <json_encode_array_name>
   19806:	4607      	mov	r7, r0
                rc |= json_encode_array_start(&json->encoder);
   19808:	4630      	mov	r0, r6
   1980a:	f004 fda5 	bl	1e358 <json_encode_array_start>
   1980e:	4338      	orrs	r0, r7
   19810:	4305      	orrs	r5, r0
                rc |= json_encode_array_value(&json->encoder, &value);
   19812:	4669      	mov	r1, sp
   19814:	4630      	mov	r0, r6
   19816:	f004 fdaf 	bl	1e378 <json_encode_array_value>
   1981a:	4305      	orrs	r5, r0
                rc |= json_encode_array_finish(&json->encoder);
   1981c:	4630      	mov	r0, r6
   1981e:	f004 fdc7 	bl	1e3b0 <json_encode_array_finish>
   19822:	4305      	orrs	r5, r0
                }
                rc |= json_encode_array_finish(&json->encoder);
        }
    }

    if(!DPL_FLOAT64_ISNAN(json->los[0])){
   19824:	e9d4 8938 	ldrd	r8, r9, [r4, #224]	; 0xe0
   19828:	4642      	mov	r2, r8
   1982a:	464b      	mov	r3, r9
   1982c:	4640      	mov	r0, r8
   1982e:	4649      	mov	r1, r9
   19830:	f005 fa5c 	bl	1ecec <__aeabi_dcmpun>
   19834:	bb48      	cbnz	r0, 1988a <rng_json_write+0x25a>
        if(!DPL_FLOAT64_ISNAN(json->los[0]) && DPL_FLOAT64_ISNAN(json->los[1]) && DPL_FLOAT64_ISNAN(json->los[2])){
   19836:	e9d4 233a 	ldrd	r2, r3, [r4, #232]	; 0xe8
   1983a:	4610      	mov	r0, r2
   1983c:	4619      	mov	r1, r3
   1983e:	f005 fa55 	bl	1ecec <__aeabi_dcmpun>
   19842:	2800      	cmp	r0, #0
   19844:	f000 80e2 	beq.w	19a0c <rng_json_write+0x3dc>
   19848:	e9d4 233c 	ldrd	r2, r3, [r4, #240]	; 0xf0
   1984c:	4610      	mov	r0, r2
   1984e:	4619      	mov	r1, r3
   19850:	f005 fa4c 	bl	1ecec <__aeabi_dcmpun>
   19854:	2800      	cmp	r0, #0
   19856:	f000 80d9 	beq.w	19a0c <rng_json_write+0x3dc>
                JSON_VALUE_FLOAT64(&value, json->los[0]);
   1985a:	2306      	movs	r3, #6
                rc |= json_encode_array_name(&json->encoder, "los");
   1985c:	4943      	ldr	r1, [pc, #268]	; (1996c <rng_json_write+0x33c>)
                JSON_VALUE_FLOAT64(&value, json->los[0]);
   1985e:	f88d 3001 	strb.w	r3, [sp, #1]
                rc |= json_encode_array_name(&json->encoder, "los");
   19862:	4630      	mov	r0, r6
                JSON_VALUE_FLOAT64(&value, json->los[0]);
   19864:	e9cd 8902 	strd	r8, r9, [sp, #8]
                rc |= json_encode_array_name(&json->encoder, "los");
   19868:	f004 fd74 	bl	1e354 <json_encode_array_name>
   1986c:	4607      	mov	r7, r0
                rc |= json_encode_array_start(&json->encoder);
   1986e:	4630      	mov	r0, r6
   19870:	f004 fd72 	bl	1e358 <json_encode_array_start>
   19874:	4338      	orrs	r0, r7
   19876:	4305      	orrs	r5, r0
                rc |= json_encode_array_value(&json->encoder, &value);
   19878:	4669      	mov	r1, sp
   1987a:	4630      	mov	r0, r6
   1987c:	f004 fd7c 	bl	1e378 <json_encode_array_value>
   19880:	4305      	orrs	r5, r0
                rc |= json_encode_array_finish(&json->encoder);
   19882:	4630      	mov	r0, r6
   19884:	f004 fd94 	bl	1e3b0 <json_encode_array_finish>
   19888:	4305      	orrs	r5, r0
                }
                rc |= json_encode_array_finish(&json->encoder);
        }
    }

    if (!DPL_FLOAT64_ISNAN(json->ppm)){
   1988a:	e9d4 8940 	ldrd	r8, r9, [r4, #256]	; 0x100
   1988e:	4642      	mov	r2, r8
   19890:	464b      	mov	r3, r9
   19892:	4640      	mov	r0, r8
   19894:	4649      	mov	r1, r9
   19896:	f005 fa29 	bl	1ecec <__aeabi_dcmpun>
   1989a:	b950      	cbnz	r0, 198b2 <rng_json_write+0x282>
        JSON_VALUE_FLOAT64(&value, json->ppm);
   1989c:	2306      	movs	r3, #6
        rc |= json_encode_object_entry(&json->encoder, "ppm", &value);
   1989e:	4934      	ldr	r1, [pc, #208]	; (19970 <rng_json_write+0x340>)
        JSON_VALUE_FLOAT64(&value, json->ppm);
   198a0:	f88d 3001 	strb.w	r3, [sp, #1]
        rc |= json_encode_object_entry(&json->encoder, "ppm", &value);
   198a4:	466a      	mov	r2, sp
   198a6:	4630      	mov	r0, r6
        JSON_VALUE_FLOAT64(&value, json->ppm);
   198a8:	e9cd 8902 	strd	r8, r9, [sp, #8]
        rc |= json_encode_object_entry(&json->encoder, "ppm", &value);
   198ac:	f004 fc1a 	bl	1e0e4 <json_encode_object_entry>
   198b0:	4305      	orrs	r5, r0
    }

    if (!DPL_FLOAT64_ISNAN(json->sts)){
   198b2:	e9d4 8942 	ldrd	r8, r9, [r4, #264]	; 0x108
   198b6:	4642      	mov	r2, r8
   198b8:	464b      	mov	r3, r9
   198ba:	4640      	mov	r0, r8
   198bc:	4649      	mov	r1, r9
   198be:	f005 fa15 	bl	1ecec <__aeabi_dcmpun>
   198c2:	b950      	cbnz	r0, 198da <rng_json_write+0x2aa>
        JSON_VALUE_FLOAT64(&value, json->sts);
   198c4:	2306      	movs	r3, #6
        rc |= json_encode_object_entry(&json->encoder, "sts", &value);
   198c6:	492b      	ldr	r1, [pc, #172]	; (19974 <rng_json_write+0x344>)
        JSON_VALUE_FLOAT64(&value, json->sts);
   198c8:	f88d 3001 	strb.w	r3, [sp, #1]
        rc |= json_encode_object_entry(&json->encoder, "sts", &value);
   198cc:	466a      	mov	r2, sp
   198ce:	4630      	mov	r0, r6
        JSON_VALUE_FLOAT64(&value, json->sts);
   198d0:	e9cd 8902 	strd	r8, r9, [sp, #8]
        rc |= json_encode_object_entry(&json->encoder, "sts", &value);
   198d4:	f004 fc06 	bl	1e0e4 <json_encode_object_entry>
   198d8:	4305      	orrs	r5, r0
    }
    rc |= json_encode_object_finish(&json->encoder);
   198da:	4630      	mov	r0, r6
   198dc:	f004 fd2a 	bl	1e334 <json_encode_object_finish>
    json->encoder.je_wr_commas = 0;
   198e0:	f894 3020 	ldrb.w	r3, [r4, #32]
    assert(rc == 0);
   198e4:	4305      	orrs	r5, r0
    json->encoder.je_wr_commas = 0;
   198e6:	f36f 0300 	bfc	r3, #0, #1
   198ea:	f884 3020 	strb.w	r3, [r4, #32]
    assert(rc == 0);
   198ee:	f000 80b2 	beq.w	19a56 <rng_json_write+0x426>
   198f2:	2300      	movs	r3, #0
   198f4:	461a      	mov	r2, r3
   198f6:	4619      	mov	r1, r3
   198f8:	4618      	mov	r0, r3
   198fa:	f7f2 ff7f 	bl	c7fc <__assert_func>
        rc |= json_encode_array_name(&json->encoder, "raz");
   198fe:	4918      	ldr	r1, [pc, #96]	; (19960 <rng_json_write+0x330>)
   19900:	4630      	mov	r0, r6
   19902:	f004 fd27 	bl	1e354 <json_encode_array_name>
   19906:	4605      	mov	r5, r0
        rc |= json_encode_array_start(&json->encoder);
   19908:	4630      	mov	r0, r6
   1990a:	f004 fd25 	bl	1e358 <json_encode_array_start>
   1990e:	4328      	orrs	r0, r5
   19910:	4307      	orrs	r7, r0
        for (uint8_t i = 0; i< sizeof(json->raz)/sizeof(dpl_float64_t); i++){
   19912:	f104 0590 	add.w	r5, r4, #144	; 0x90
   19916:	f104 08a8 	add.w	r8, r4, #168	; 0xa8
            JSON_VALUE_FLOAT64(&value, json->raz.array[i]);
   1991a:	f04f 0906 	mov.w	r9, #6
   1991e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
            rc |= json_encode_array_value(&json->encoder, &value);
   19922:	4669      	mov	r1, sp
   19924:	4630      	mov	r0, r6
            JSON_VALUE_FLOAT64(&value, json->raz.array[i]);
   19926:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1992a:	f88d 9001 	strb.w	r9, [sp, #1]
            rc |= json_encode_array_value(&json->encoder, &value);
   1992e:	f004 fd23 	bl	1e378 <json_encode_array_value>
        for (uint8_t i = 0; i< sizeof(json->raz)/sizeof(dpl_float64_t); i++){
   19932:	45a8      	cmp	r8, r5
            rc |= json_encode_array_value(&json->encoder, &value);
   19934:	ea47 0700 	orr.w	r7, r7, r0
        for (uint8_t i = 0; i< sizeof(json->raz)/sizeof(dpl_float64_t); i++){
   19938:	d1f1      	bne.n	1991e <rng_json_write+0x2ee>
   1993a:	e708      	b.n	1974e <rng_json_write+0x11e>
   1993c:	000195f5 	.word	0x000195f5
   19940:	0001e3cd 	.word	0x0001e3cd
   19944:	0001e3e7 	.word	0x0001e3e7
   19948:	0001e3f9 	.word	0x0001e3f9
   1994c:	00022128 	.word	0x00022128
   19950:	0002212e 	.word	0x0002212e
   19954:	00021ebf 	.word	0x00021ebf
   19958:	00022133 	.word	0x00022133
   1995c:	00022132 	.word	0x00022132
   19960:	00022138 	.word	0x00022138
   19964:	00022137 	.word	0x00022137
   19968:	0002213c 	.word	0x0002213c
   1996c:	00022141 	.word	0x00022141
   19970:	00022145 	.word	0x00022145
   19974:	00022149 	.word	0x00022149
            rc |= json_encode_array_name(&json->encoder, "braz");
   19978:	493b      	ldr	r1, [pc, #236]	; (19a68 <rng_json_write+0x438>)
   1997a:	4630      	mov	r0, r6
   1997c:	f004 fcea 	bl	1e354 <json_encode_array_name>
   19980:	4607      	mov	r7, r0
            rc |= json_encode_array_start(&json->encoder);
   19982:	4630      	mov	r0, r6
   19984:	f004 fce8 	bl	1e358 <json_encode_array_start>
   19988:	4338      	orrs	r0, r7
   1998a:	ea40 0705 	orr.w	r7, r0, r5
            for (uint8_t i = 0; i< sizeof(json->braz)/sizeof(dpl_float64_t); i++){
   1998e:	f104 08c0 	add.w	r8, r4, #192	; 0xc0
   19992:	f104 05a8 	add.w	r5, r4, #168	; 0xa8
                JSON_VALUE_FLOAT64(&value, json->braz.array[i]);
   19996:	f04f 0906 	mov.w	r9, #6
   1999a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
                rc |= json_encode_array_value(&json->encoder, &value);
   1999e:	4669      	mov	r1, sp
   199a0:	4630      	mov	r0, r6
                JSON_VALUE_FLOAT64(&value, json->braz.array[i]);
   199a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
   199a6:	f88d 9001 	strb.w	r9, [sp, #1]
                rc |= json_encode_array_value(&json->encoder, &value);
   199aa:	f004 fce5 	bl	1e378 <json_encode_array_value>
            for (uint8_t i = 0; i< sizeof(json->braz)/sizeof(dpl_float64_t); i++){
   199ae:	45a8      	cmp	r8, r5
                rc |= json_encode_array_value(&json->encoder, &value);
   199b0:	ea47 0700 	orr.w	r7, r7, r0
            for (uint8_t i = 0; i< sizeof(json->braz)/sizeof(dpl_float64_t); i++){
   199b4:	d1f1      	bne.n	1999a <rng_json_write+0x36a>
            rc |= json_encode_array_finish(&json->encoder);
   199b6:	4630      	mov	r0, r6
   199b8:	f004 fcfa 	bl	1e3b0 <json_encode_array_finish>
   199bc:	ea40 0507 	orr.w	r5, r0, r7
   199c0:	e6fd      	b.n	197be <rng_json_write+0x18e>
                rc |= json_encode_array_name(&json->encoder, "rssi");
   199c2:	492a      	ldr	r1, [pc, #168]	; (19a6c <rng_json_write+0x43c>)
   199c4:	4630      	mov	r0, r6
   199c6:	f004 fcc5 	bl	1e354 <json_encode_array_name>
   199ca:	4607      	mov	r7, r0
                rc |= json_encode_array_start(&json->encoder);
   199cc:	4630      	mov	r0, r6
   199ce:	f004 fcc3 	bl	1e358 <json_encode_array_start>
   199d2:	4338      	orrs	r0, r7
   199d4:	ea40 0705 	orr.w	r7, r0, r5
                for (uint8_t i = 0; i< sizeof(json->rssi)/sizeof(dpl_float64_t); i++){
   199d8:	f104 08d8 	add.w	r8, r4, #216	; 0xd8
   199dc:	f104 05c0 	add.w	r5, r4, #192	; 0xc0
                    JSON_VALUE_FLOAT64(&value, json->rssi[i]);
   199e0:	f04f 0906 	mov.w	r9, #6
   199e4:	e8f5 2302 	ldrd	r2, r3, [r5], #8
                    rc |= json_encode_array_value(&json->encoder, &value);
   199e8:	4669      	mov	r1, sp
   199ea:	4630      	mov	r0, r6
                    JSON_VALUE_FLOAT64(&value, json->rssi[i]);
   199ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
   199f0:	f88d 9001 	strb.w	r9, [sp, #1]
                    rc |= json_encode_array_value(&json->encoder, &value);
   199f4:	f004 fcc0 	bl	1e378 <json_encode_array_value>
                for (uint8_t i = 0; i< sizeof(json->rssi)/sizeof(dpl_float64_t); i++){
   199f8:	4545      	cmp	r5, r8
                    rc |= json_encode_array_value(&json->encoder, &value);
   199fa:	ea47 0700 	orr.w	r7, r7, r0
                for (uint8_t i = 0; i< sizeof(json->rssi)/sizeof(dpl_float64_t); i++){
   199fe:	d1f1      	bne.n	199e4 <rng_json_write+0x3b4>
                rc |= json_encode_array_finish(&json->encoder);
   19a00:	4630      	mov	r0, r6
   19a02:	f004 fcd5 	bl	1e3b0 <json_encode_array_finish>
   19a06:	ea40 0507 	orr.w	r5, r0, r7
   19a0a:	e70b      	b.n	19824 <rng_json_write+0x1f4>
                rc |= json_encode_array_name(&json->encoder, "los");
   19a0c:	4918      	ldr	r1, [pc, #96]	; (19a70 <rng_json_write+0x440>)
   19a0e:	4630      	mov	r0, r6
   19a10:	f004 fca0 	bl	1e354 <json_encode_array_name>
   19a14:	4607      	mov	r7, r0
                rc |= json_encode_array_start(&json->encoder);
   19a16:	4630      	mov	r0, r6
   19a18:	f004 fc9e 	bl	1e358 <json_encode_array_start>
   19a1c:	4338      	orrs	r0, r7
   19a1e:	ea40 0705 	orr.w	r7, r0, r5
                for (uint8_t i = 0; i< sizeof(json->los)/sizeof(dpl_float64_t); i++){
   19a22:	f104 08f8 	add.w	r8, r4, #248	; 0xf8
   19a26:	f104 05e0 	add.w	r5, r4, #224	; 0xe0
                    JSON_VALUE_FLOAT64(&value, json->los[i]);
   19a2a:	f04f 0906 	mov.w	r9, #6
   19a2e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
                    rc |= json_encode_array_value(&json->encoder, &value);
   19a32:	4669      	mov	r1, sp
   19a34:	4630      	mov	r0, r6
                    JSON_VALUE_FLOAT64(&value, json->los[i]);
   19a36:	e9cd 2302 	strd	r2, r3, [sp, #8]
   19a3a:	f88d 9001 	strb.w	r9, [sp, #1]
                    rc |= json_encode_array_value(&json->encoder, &value);
   19a3e:	f004 fc9b 	bl	1e378 <json_encode_array_value>
                for (uint8_t i = 0; i< sizeof(json->los)/sizeof(dpl_float64_t); i++){
   19a42:	4545      	cmp	r5, r8
                    rc |= json_encode_array_value(&json->encoder, &value);
   19a44:	ea47 0700 	orr.w	r7, r7, r0
                for (uint8_t i = 0; i< sizeof(json->los)/sizeof(dpl_float64_t); i++){
   19a48:	d1f1      	bne.n	19a2e <rng_json_write+0x3fe>
                rc |= json_encode_array_finish(&json->encoder);
   19a4a:	4630      	mov	r0, r6
   19a4c:	f004 fcb0 	bl	1e3b0 <json_encode_array_finish>
   19a50:	ea40 0507 	orr.w	r5, r0, r7
   19a54:	e719      	b.n	1988a <rng_json_write+0x25a>

    rng_write_line(json->encoder.je_arg, "\0", 1);
   19a56:	4907      	ldr	r1, [pc, #28]	; (19a74 <rng_json_write+0x444>)
   19a58:	69e0      	ldr	r0, [r4, #28]
   19a5a:	2201      	movs	r2, #1
   19a5c:	f7ff fdca 	bl	195f4 <rng_write_line>

    return rc;
}
   19a60:	4628      	mov	r0, r5
   19a62:	b005      	add	sp, #20
   19a64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19a68:	00022137 	.word	0x00022137
   19a6c:	0002213c 	.word	0x0002213c
   19a70:	00022141 	.word	0x00022141
   19a74:	0002214d 	.word	0x0002214d

00019a78 <wcs_timescale_cb>:
 *
 * returns none
 */
static bool
wcs_timescale_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
   19a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct uwb_wcs_instance * wcs = (struct uwb_wcs_instance *)cbs->inst_ptr;
   19a7a:	684c      	ldr	r4, [r1, #4]
    struct uwb_ccp_instance * ccp = wcs->ccp;
   19a7c:	6e22      	ldr	r2, [r4, #96]	; 0x60

    uwb_ccp_frame_t * frame = ccp->frames[(ccp->idx)%ccp->nframes];
    wcs->carrier_integrator = frame->carrier_integrator;
    wcs->observed_interval = (ccp->local_epoch - wcs->local_epoch.lo) & 0x0FFFFFFFFFFUL; // Observed ccp interval
   19a7e:	7f25      	ldrb	r5, [r4, #28]
    uwb_ccp_frame_t * frame = ccp->frames[(ccp->idx)%ccp->nframes];
   19a80:	f8b2 10ec 	ldrh.w	r1, [r2, #236]	; 0xec
   19a84:	f8b2 30ee 	ldrh.w	r3, [r2, #238]	; 0xee
   19a88:	fbb3 f0f1 	udiv	r0, r3, r1
   19a8c:	fb01 3310 	mls	r3, r1, r0, r3
   19a90:	b29b      	uxth	r3, r3
   19a92:	33e0      	adds	r3, #224	; 0xe0
    wcs->observed_interval = (ccp->local_epoch - wcs->local_epoch.lo) & 0x0FFFFFFFFFFUL; // Observed ccp interval
   19a94:	69a1      	ldr	r1, [r4, #24]
    wcs->carrier_integrator = frame->carrier_integrator;
   19a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   19a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   19a9c:	63a3      	str	r3, [r4, #56]	; 0x38
    wcs->observed_interval = (ccp->local_epoch - wcs->local_epoch.lo) & 0x0FFFFFFFFFFUL; // Observed ccp interval
   19a9e:	e9d2 0336 	ldrd	r0, r3, [r2, #216]	; 0xd8
   19aa2:	1a40      	subs	r0, r0, r1
   19aa4:	eb63 0305 	sbc.w	r3, r3, r5
    wcs->master_epoch.timestamp = ccp->master_epoch.timestamp;
    wcs->local_epoch.timestamp += wcs->observed_interval;
   19aa8:	69e5      	ldr	r5, [r4, #28]
   19aaa:	1809      	adds	r1, r1, r0
    wcs->observed_interval = (ccp->local_epoch - wcs->local_epoch.lo) & 0x0FFFFFFFFFFUL; // Observed ccp interval
   19aac:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   19ab0:	e9c4 0302 	strd	r0, r3, [r4, #8]
    wcs->local_epoch.timestamp += wcs->observed_interval;
   19ab4:	eb43 0305 	adc.w	r3, r3, r5
    wcs->master_epoch.timestamp = ccp->master_epoch.timestamp;
   19ab8:	e9d2 6734 	ldrd	r6, r7, [r2, #208]	; 0xd0
    wcs->local_epoch.timestamp += wcs->observed_interval;
   19abc:	e9c4 1306 	strd	r1, r3, [r4, #24]

    if(ccp->status.valid){
   19ac0:	f892 30c8 	ldrb.w	r3, [r2, #200]	; 0xc8
   19ac4:	f013 0304 	ands.w	r3, r3, #4
    wcs->master_epoch.timestamp = ccp->master_epoch.timestamp;
   19ac8:	e9c4 6704 	strd	r6, r7, [r4, #16]
    if(ccp->status.valid){
   19acc:	d00a      	beq.n	19ae4 <wcs_timescale_cb+0x6c>
        if (wcs->config.postprocess == true)
   19ace:	7923      	ldrb	r3, [r4, #4]
   19ad0:	07db      	lsls	r3, r3, #31
   19ad2:	d505      	bpl.n	19ae0 <wcs_timescale_cb+0x68>
    return (struct dpl_eventq *) os_eventq_dflt_get();
   19ad4:	f7f3 fa18 	bl	cf08 <os_eventq_dflt_get>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
   19ad8:	f104 0150 	add.w	r1, r4, #80	; 0x50
   19adc:	f7f3 f96d 	bl	cdba <os_eventq_put>
        wcs->fractional_skew = (dpl_float64_t) 0.0l;
        wcs->status.initialized = 0;
    }
    return true;

}
   19ae0:	2001      	movs	r0, #1
   19ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        wcs->normalized_skew = (dpl_float64_t) 1.0l;
   19ae4:	4906      	ldr	r1, [pc, #24]	; (19b00 <wcs_timescale_cb+0x88>)
        wcs->status.initialized = 0;
   19ae6:	7822      	ldrb	r2, [r4, #0]
        wcs->normalized_skew = (dpl_float64_t) 1.0l;
   19ae8:	2000      	movs	r0, #0
   19aea:	e9c4 0110 	strd	r0, r1, [r4, #64]	; 0x40
        wcs->status.initialized = 0;
   19aee:	f363 0241 	bfi	r2, r3, #1, #1
        wcs->fractional_skew = (dpl_float64_t) 0.0l;
   19af2:	2000      	movs	r0, #0
   19af4:	2100      	movs	r1, #0
   19af6:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
        wcs->status.initialized = 0;
   19afa:	7022      	strb	r2, [r4, #0]
   19afc:	e7f0      	b.n	19ae0 <wcs_timescale_cb+0x68>
   19afe:	bf00      	nop
   19b00:	3ff00000 	.word	0x3ff00000
   19b04:	00000000 	.word	0x00000000

00019b08 <wcs_timescale_ev>:
 *
 * returns none
 */
void
wcs_timescale_ev(struct dpl_event * ev)
{
   19b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19b0c:	b090      	sub	sp, #64	; 0x40
    assert(ev != NULL);
   19b0e:	b928      	cbnz	r0, 19b1c <wcs_timescale_ev+0x14>
   19b10:	2300      	movs	r3, #0
   19b12:	461a      	mov	r2, r3
   19b14:	4619      	mov	r1, r3
   19b16:	4618      	mov	r0, r3
   19b18:	f7f2 fe70 	bl	c7fc <__assert_func>
    return ev->ev.ev_arg;
   19b1c:	6884      	ldr	r4, [r0, #8]
    assert(dpl_event_get_arg(ev) != NULL);
   19b1e:	2c00      	cmp	r4, #0
   19b20:	d0f6      	beq.n	19b10 <wcs_timescale_ev+0x8>

    struct uwb_wcs_instance * wcs = (struct uwb_wcs_instance *)dpl_event_get_arg(ev);
    struct uwb_ccp_instance * ccp = wcs->ccp;
   19b22:	f8d4 a060 	ldr.w	sl, [r4, #96]	; 0x60
    uwb_wcs_states_t * states = (uwb_wcs_states_t *) wcs->states.array;
    timescale_instance_t * timescale = wcs->timescale;

    if(ccp->status.valid){
   19b26:	f89a 30c8 	ldrb.w	r3, [sl, #200]	; 0xc8
   19b2a:	075a      	lsls	r2, r3, #29
   19b2c:	d572      	bpl.n	19c14 <wcs_timescale_ev+0x10c>
        double q[] = { MYNEWT_VAL(TIMESCALE_QVAR) * 1.0l, MYNEWT_VAL(TIMESCALE_QVAR) * 0.1l, MYNEWT_VAL(TIMESCALE_QVAR) * 0.01l};
   19b2e:	4d5a      	ldr	r5, [pc, #360]	; (19c98 <wcs_timescale_ev+0x190>)
    timescale_instance_t * timescale = wcs->timescale;
   19b30:	f8d4 70a0 	ldr.w	r7, [r4, #160]	; 0xa0
        double q[] = { MYNEWT_VAL(TIMESCALE_QVAR) * 1.0l, MYNEWT_VAL(TIMESCALE_QVAR) * 0.1l, MYNEWT_VAL(TIMESCALE_QVAR) * 0.01l};
   19b34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   19b36:	ae04      	add	r6, sp, #16
   19b38:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   19b3a:	e895 0003 	ldmia.w	r5, {r0, r1}
   19b3e:	e886 0003 	stmia.w	r6, {r0, r1}

        if (wcs->status.initialized == 0){
            states->time = (double) wcs->master_epoch.lo;
   19b42:	6920      	ldr	r0, [r4, #16]
   19b44:	7d21      	ldrb	r1, [r4, #20]
   19b46:	f004 fe01 	bl	1e74c <__aeabi_ul2d>
   19b4a:	4680      	mov	r8, r0
            states->skew = (1.0l + (double ) uwb_calc_clock_offset_ratio(
   19b4c:	f8da 0000 	ldr.w	r0, [sl]
        if (wcs->status.initialized == 0){
   19b50:	7822      	ldrb	r2, [r4, #0]
    return (dev->uw_funcs->uf_calc_clock_offset_ratio(dev, integrator_val, type));
   19b52:	6a43      	ldr	r3, [r0, #36]	; 0x24
   19b54:	f012 0202 	ands.w	r2, r2, #2
            states->time = (double) wcs->master_epoch.lo;
   19b58:	4689      	mov	r9, r1
   19b5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
            states->skew = (1.0l + (double ) uwb_calc_clock_offset_ratio(
   19b5e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   19b60:	ae0a      	add	r6, sp, #40	; 0x28
        if (wcs->status.initialized == 0){
   19b62:	d15a      	bne.n	19c1a <wcs_timescale_ev+0x112>
            states->time = (double) wcs->master_epoch.lo;
   19b64:	e9c4 8908 	strd	r8, r9, [r4, #32]
   19b68:	4798      	blx	r3
            states->skew = (1.0l + (double ) uwb_calc_clock_offset_ratio(
   19b6a:	4b4c      	ldr	r3, [pc, #304]	; (19c9c <wcs_timescale_ev+0x194>)
   19b6c:	ec51 0b10 	vmov	r0, r1, d0
   19b70:	2200      	movs	r2, #0
   19b72:	f004 fc6b 	bl	1e44c <__adddf3>
                                ccp->dev_inst, wcs->carrier_integrator,
                                UWB_CR_CARRIER_INTEGRATOR)) * MYNEWT_VAL(UWB_WCS_DTU) ;
   19b76:	a344      	add	r3, pc, #272	; (adr r3, 19c88 <wcs_timescale_ev+0x180>)
   19b78:	e9d3 2300 	ldrd	r2, r3, [r3]
   19b7c:	f004 fe1c 	bl	1e7b8 <__aeabi_dmul>
            states->drift = 0;
            double x0[] = {states->time, states->skew, states->drift};
   19b80:	e9d4 8908 	ldrd	r8, r9, [r4, #32]
            states->drift = 0;
   19b84:	2300      	movs	r3, #0
   19b86:	2200      	movs	r2, #0
            states->skew = (1.0l + (double ) uwb_calc_clock_offset_ratio(
   19b88:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
            states->drift = 0;
   19b8c:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
            double T = 1e-6l * MYNEWT_VAL(UWB_CCP_PERIOD);
            timescale = timescale_init(timescale, x0, q, T);
   19b90:	ed9f 0b3f 	vldr	d0, [pc, #252]	; 19c90 <wcs_timescale_ev+0x188>
            double x0[] = {states->time, states->skew, states->drift};
   19b94:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   19b98:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
            timescale = timescale_init(timescale, x0, q, T);
   19b9c:	4631      	mov	r1, r6
   19b9e:	4638      	mov	r0, r7
   19ba0:	aa04      	add	r2, sp, #16
            double x0[] = {states->time, states->skew, states->drift};
   19ba2:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
            timescale = timescale_init(timescale, x0, q, T);
   19ba6:	f7fd fc6d 	bl	17484 <timescale_init>
            ((timescale_states_t * )timescale->eke->x)->time = states->time;
   19baa:	6803      	ldr	r3, [r0, #0]
            timescale = timescale_init(timescale, x0, q, T);
   19bac:	4607      	mov	r7, r0
            ((timescale_states_t * )timescale->eke->x)->time = states->time;
   19bae:	e9d4 0108 	ldrd	r0, r1, [r4, #32]
   19bb2:	689b      	ldr	r3, [r3, #8]
   19bb4:	e9c3 0100 	strd	r0, r1, [r3]
            ((timescale_states_t * )timescale->eke->x)->skew = states->skew;
   19bb8:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
   19bbc:	e9c3 0102 	strd	r0, r1, [r3, #8]
            ((timescale_states_t * )timescale->eke->x)->drift =states->drift;
   19bc0:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
   19bc4:	e9c3 0104 	strd	r0, r1, [r3, #16]
            wcs->status.valid = wcs->status.initialized = 1;
   19bc8:	7823      	ldrb	r3, [r4, #0]
   19bca:	f023 0306 	bic.w	r3, r3, #6
   19bce:	f043 0306 	orr.w	r3, r3, #6
                               ccp->dev_inst, wcs->carrier_integrator,
                               UWB_CR_CARRIER_INTEGRATOR)) * MYNEWT_VAL(UWB_WCS_DTU)
            };
            double T = wcs->observed_interval / MYNEWT_VAL(UWB_WCS_DTU) ; // observed interval in seconds, master reference
            double r[] = {MYNEWT_VAL(TIMESCALE_RVAR), MYNEWT_VAL(UWB_WCS_DTU) * 1e20};
            wcs->status.valid = timescale_main(timescale, z, q, r, T).valid;
   19bd2:	7023      	strb	r3, [r4, #0]
        }

        if (wcs->status.valid){
   19bd4:	7823      	ldrb	r3, [r4, #0]
   19bd6:	075b      	lsls	r3, r3, #29
   19bd8:	d54c      	bpl.n	19c74 <wcs_timescale_ev+0x16c>
            states->time = ((timescale_states_t * )timescale->eke->x)->time;
   19bda:	683b      	ldr	r3, [r7, #0]
   19bdc:	689b      	ldr	r3, [r3, #8]
   19bde:	e9d3 0100 	ldrd	r0, r1, [r3]
   19be2:	e9c4 0108 	strd	r0, r1, [r4, #32]
            states->skew = ((timescale_states_t * )timescale->eke->x)->skew;
   19be6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
            states->drift = ((timescale_states_t * )timescale->eke->x)->drift;
   19bea:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
            states->skew = ((timescale_states_t * )timescale->eke->x)->skew;
   19bee:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
            states->drift = ((timescale_states_t * )timescale->eke->x)->drift;
   19bf2:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
            wcs->normalized_skew = states->skew / MYNEWT_VAL(UWB_WCS_DTU);
   19bf6:	a324      	add	r3, pc, #144	; (adr r3, 19c88 <wcs_timescale_ev+0x180>)
   19bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
   19bfc:	f004 ff06 	bl	1ea0c <__aeabi_ddiv>
   19c00:	4602      	mov	r2, r0
   19c02:	460b      	mov	r3, r1
   19c04:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
            wcs->fractional_skew = (dpl_float64_t) 1.0l - wcs->normalized_skew;
   19c08:	4924      	ldr	r1, [pc, #144]	; (19c9c <wcs_timescale_ev+0x194>)
   19c0a:	2000      	movs	r0, #0
   19c0c:	f004 fc1c 	bl	1e448 <__aeabi_dsub>
   19c10:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
        .ppm = DPL_FLOAT64_MUL(wcs->fractional_skew, DPL_FLOAT64_INIT(1e6l))
    };
    wcs_json_write_uint64(&json);
#endif
    }
}
   19c14:	b010      	add	sp, #64	; 0x40
   19c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19c1a:	2200      	movs	r2, #0
            double z[] ={(double) wcs->master_epoch.lo,
   19c1c:	e9cd 8900 	strd	r8, r9, [sp]
   19c20:	4798      	blx	r3
                        (1.0l + (double ) uwb_calc_clock_offset_ratio(
   19c22:	4b1e      	ldr	r3, [pc, #120]	; (19c9c <wcs_timescale_ev+0x194>)
   19c24:	ec51 0b10 	vmov	r0, r1, d0
   19c28:	2200      	movs	r2, #0
   19c2a:	f004 fc0f 	bl	1e44c <__adddf3>
                               UWB_CR_CARRIER_INTEGRATOR)) * MYNEWT_VAL(UWB_WCS_DTU)
   19c2e:	a316      	add	r3, pc, #88	; (adr r3, 19c88 <wcs_timescale_ev+0x180>)
   19c30:	e9d3 2300 	ldrd	r2, r3, [r3]
   19c34:	f004 fdc0 	bl	1e7b8 <__aeabi_dmul>
            double z[] ={(double) wcs->master_epoch.lo,
   19c38:	e9cd 0102 	strd	r0, r1, [sp, #8]
            double T = wcs->observed_interval / MYNEWT_VAL(UWB_WCS_DTU) ; // observed interval in seconds, master reference
   19c3c:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
   19c40:	f004 fd84 	bl	1e74c <__aeabi_ul2d>
   19c44:	a310      	add	r3, pc, #64	; (adr r3, 19c88 <wcs_timescale_ev+0x180>)
   19c46:	e9d3 2300 	ldrd	r2, r3, [r3]
   19c4a:	f004 fedf 	bl	1ea0c <__aeabi_ddiv>
            double r[] = {MYNEWT_VAL(TIMESCALE_RVAR), MYNEWT_VAL(UWB_WCS_DTU) * 1e20};
   19c4e:	3508      	adds	r5, #8
            double T = wcs->observed_interval / MYNEWT_VAL(UWB_WCS_DTU) ; // observed interval in seconds, master reference
   19c50:	ec41 0b10 	vmov	d0, r0, r1
            double r[] = {MYNEWT_VAL(TIMESCALE_RVAR), MYNEWT_VAL(UWB_WCS_DTU) * 1e20};
   19c54:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   19c58:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
            wcs->status.valid = timescale_main(timescale, z, q, r, T).valid;
   19c5c:	4633      	mov	r3, r6
   19c5e:	aa04      	add	r2, sp, #16
   19c60:	4669      	mov	r1, sp
   19c62:	4638      	mov	r0, r7
   19c64:	f7fd fca4 	bl	175b0 <timescale_main>
   19c68:	7823      	ldrb	r3, [r4, #0]
   19c6a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   19c6e:	f360 0382 	bfi	r3, r0, #2, #1
   19c72:	e7ae      	b.n	19bd2 <wcs_timescale_ev+0xca>
            wcs->normalized_skew = (dpl_float64_t) 1.0l;
   19c74:	4b09      	ldr	r3, [pc, #36]	; (19c9c <wcs_timescale_ev+0x194>)
   19c76:	2200      	movs	r2, #0
   19c78:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
            wcs->fractional_skew = (dpl_float64_t) 0.0l;
   19c7c:	2200      	movs	r2, #0
   19c7e:	2300      	movs	r3, #0
   19c80:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
}
   19c84:	e7c6      	b.n	19c14 <wcs_timescale_ev+0x10c>
   19c86:	bf00      	nop
   19c88:	00000000 	.word	0x00000000
   19c8c:	422e8480 	.word	0x422e8480
   19c90:	a0b5ed8d 	.word	0xa0b5ed8d
   19c94:	3ff0c6f7 	.word	0x3ff0c6f7
   19c98:	00022180 	.word	0x00022180
   19c9c:	3ff00000 	.word	0x3ff00000

00019ca0 <wcs_timescale_init>:
wcs_timescale_init(struct uwb_wcs_instance * wcs){
   19ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
    double q[] = { MYNEWT_VAL(TIMESCALE_QVAR) * 1.0l, MYNEWT_VAL(TIMESCALE_QVAR) * 0.1l, MYNEWT_VAL(TIMESCALE_QVAR) * 0.01l};
   19ca2:	4e1d      	ldr	r6, [pc, #116]	; (19d18 <wcs_timescale_init+0x78>)
    struct uwb_ccp_instance * ccp = wcs->ccp;
   19ca4:	6e07      	ldr	r7, [r0, #96]	; 0x60
wcs_timescale_init(struct uwb_wcs_instance * wcs){
   19ca6:	4604      	mov	r4, r0
    double q[] = { MYNEWT_VAL(TIMESCALE_QVAR) * 1.0l, MYNEWT_VAL(TIMESCALE_QVAR) * 0.1l, MYNEWT_VAL(TIMESCALE_QVAR) * 0.01l};
   19ca8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
wcs_timescale_init(struct uwb_wcs_instance * wcs){
   19caa:	b087      	sub	sp, #28
    double q[] = { MYNEWT_VAL(TIMESCALE_QVAR) * 1.0l, MYNEWT_VAL(TIMESCALE_QVAR) * 0.1l, MYNEWT_VAL(TIMESCALE_QVAR) * 0.01l};
   19cac:	466d      	mov	r5, sp
   19cae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   19cb0:	e896 0003 	ldmia.w	r6, {r0, r1}
   19cb4:	e885 0003 	stmia.w	r5, {r0, r1}
    wcs->timescale = timescale_init(NULL, NULL, q, T);
   19cb8:	2100      	movs	r1, #0
   19cba:	ed9f 0b15 	vldr	d0, [pc, #84]	; 19d10 <wcs_timescale_init+0x70>
   19cbe:	466a      	mov	r2, sp
   19cc0:	4608      	mov	r0, r1
   19cc2:	f7fd fbdf 	bl	17484 <timescale_init>
    wcs->cbs = (struct uwb_mac_interface){
   19cc6:	f104 0364 	add.w	r3, r4, #100	; 0x64
    wcs->timescale = timescale_init(NULL, NULL, q, T);
   19cca:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    wcs->cbs = (struct uwb_mac_interface){
   19cce:	223c      	movs	r2, #60	; 0x3c
   19cd0:	2100      	movs	r1, #0
   19cd2:	4618      	mov	r0, r3
   19cd4:	f7f6 fad9 	bl	1028a <memset>
    wcs->normalized_skew = (dpl_float64_t) 1.0l;
   19cd8:	4910      	ldr	r1, [pc, #64]	; (19d1c <wcs_timescale_init+0x7c>)
    wcs->cbs = (struct uwb_mac_interface){
   19cda:	66a4      	str	r4, [r4, #104]	; 0x68
   19cdc:	4603      	mov	r3, r0
   19cde:	2202      	movs	r2, #2
    wcs->normalized_skew = (dpl_float64_t) 1.0l;
   19ce0:	2000      	movs	r0, #0
   19ce2:	e9c4 0110 	strd	r0, r1, [r4, #64]	; 0x40
    wcs->cbs = (struct uwb_mac_interface){
   19ce6:	f8a4 2066 	strh.w	r2, [r4, #102]	; 0x66
    wcs->fractional_skew = (dpl_float64_t) 0.0l;
   19cea:	2000      	movs	r0, #0
    wcs->cbs = (struct uwb_mac_interface){
   19cec:	4a0c      	ldr	r2, [pc, #48]	; (19d20 <wcs_timescale_init+0x80>)
   19cee:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
    wcs->fractional_skew = (dpl_float64_t) 0.0l;
   19cf2:	2100      	movs	r1, #0
   19cf4:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
    uwb_mac_append_interface(ccp->dev_inst, &wcs->cbs);
   19cf8:	4619      	mov	r1, r3
   19cfa:	6838      	ldr	r0, [r7, #0]
   19cfc:	f7ee fe3c 	bl	8978 <uwb_mac_append_interface>
    uwb_wcs_set_postprocess(wcs, &wcs_timescale_ev);      // Using default process
   19d00:	4620      	mov	r0, r4
   19d02:	4908      	ldr	r1, [pc, #32]	; (19d24 <wcs_timescale_init+0x84>)
   19d04:	f7f6 f8d8 	bl	feb8 <uwb_wcs_set_postprocess>
}
   19d08:	4620      	mov	r0, r4
   19d0a:	b007      	add	sp, #28
   19d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19d0e:	bf00      	nop
   19d10:	a0b5ed8d 	.word	0xa0b5ed8d
   19d14:	3ff0c6f7 	.word	0x3ff0c6f7
   19d18:	00022180 	.word	0x00022180
   19d1c:	3ff00000 	.word	0x3ff00000
   19d20:	00019a79 	.word	0x00019a79
   19d24:	00019b09 	.word	0x00019b09

00019d28 <wcs_timescale_free>:
{
   19d28:	b510      	push	{r4, lr}
    uwb_mac_remove_interface(wcs->ccp->dev_inst, wcs->cbs.id);
   19d2a:	6e03      	ldr	r3, [r0, #96]	; 0x60
   19d2c:	f8b0 1066 	ldrh.w	r1, [r0, #102]	; 0x66
{
   19d30:	4604      	mov	r4, r0
    uwb_mac_remove_interface(wcs->ccp->dev_inst, wcs->cbs.id);
   19d32:	6818      	ldr	r0, [r3, #0]
   19d34:	f7ee fe3d 	bl	89b2 <uwb_mac_remove_interface>
    timescale_free(wcs->timescale);
   19d38:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
}
   19d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    timescale_free(wcs->timescale);
   19d40:	f7fd bc1a 	b.w	17578 <timescale_free>

00019d44 <wcs_timescale_pkg_init>:
 *
 * @return void
 */
void
wcs_timescale_pkg_init(void)
{
   19d44:	b510      	push	{r4, lr}
    int i;
    struct uwb_dev * udev;
    struct uwb_ccp_instance * ccp;

#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    printf("{\"utime\": %lu,\"msg\": \"wcs_timescale_pkg_init\"}\n",dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
   19d46:	f7f6 fdf5 	bl	10934 <dpl_cputime_get32>
   19d4a:	4601      	mov	r1, r0
   19d4c:	4808      	ldr	r0, [pc, #32]	; (19d70 <wcs_timescale_pkg_init+0x2c>)
   19d4e:	f7f6 fd75 	bl	1083c <printf>
#endif

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
   19d52:	2400      	movs	r4, #0
        udev = uwb_dev_idx_lookup(i);
   19d54:	4620      	mov	r0, r4
   19d56:	f7ee fde5 	bl	8924 <uwb_dev_idx_lookup>
        if (!udev) {
   19d5a:	b128      	cbz	r0, 19d68 <wcs_timescale_pkg_init+0x24>
            continue;
        }
        ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_CCP);
   19d5c:	2101      	movs	r1, #1
   19d5e:	f7ee fe55 	bl	8a0c <uwb_mac_find_cb_inst_ptr>
        wcs_timescale_init(ccp->wcs);
   19d62:	6e80      	ldr	r0, [r0, #104]	; 0x68
   19d64:	f7ff ff9c 	bl	19ca0 <wcs_timescale_init>
    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
   19d68:	3401      	adds	r4, #1
   19d6a:	2c03      	cmp	r4, #3
   19d6c:	d1f2      	bne.n	19d54 <wcs_timescale_pkg_init+0x10>
    }
}
   19d6e:	bd10      	pop	{r4, pc}
   19d70:	0002214f 	.word	0x0002214f

00019d74 <wcs_timescale_pkg_down>:
 *
 * @return void
 */
int
wcs_timescale_pkg_down(int reason)
{
   19d74:	b510      	push	{r4, lr}
    int i;
    struct uwb_dev *udev;
    struct uwb_wcs_instance * wcs;

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
   19d76:	2400      	movs	r4, #0
        udev = uwb_dev_idx_lookup(i);
   19d78:	4620      	mov	r0, r4
   19d7a:	f7ee fdd3 	bl	8924 <uwb_dev_idx_lookup>
        if (!udev) {
   19d7e:	b128      	cbz	r0, 19d8c <wcs_timescale_pkg_down+0x18>
            continue;
        }
        wcs = (struct uwb_wcs_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_WCS);
   19d80:	2102      	movs	r1, #2
   19d82:	f7ee fe43 	bl	8a0c <uwb_mac_find_cb_inst_ptr>
        if (!wcs) {
   19d86:	b108      	cbz	r0, 19d8c <wcs_timescale_pkg_down+0x18>
            continue;
        }
        wcs_timescale_free(wcs);
   19d88:	f7ff ffce 	bl	19d28 <wcs_timescale_free>
    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
   19d8c:	3401      	adds	r4, #1
   19d8e:	2c03      	cmp	r4, #3
   19d90:	d1f2      	bne.n	19d78 <wcs_timescale_pkg_down+0x4>
    }

    return 0;
}
   19d92:	2000      	movs	r0, #0
   19d94:	bd10      	pop	{r4, pc}

00019d96 <fwrite>:
{
   19d96:	b570      	push	{r4, r5, r6, lr}
   19d98:	460d      	mov	r5, r1
    if (stream->vmt->write == NULL) return 0;
   19d9a:	6819      	ldr	r1, [r3, #0]
   19d9c:	680c      	ldr	r4, [r1, #0]
{
   19d9e:	4606      	mov	r6, r0
   19da0:	4618      	mov	r0, r3
    if (stream->vmt->write == NULL) return 0;
   19da2:	b12c      	cbz	r4, 19db0 <fwrite+0x1a>
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
   19da4:	436a      	muls	r2, r5
   19da6:	4631      	mov	r1, r6
   19da8:	47a0      	blx	r4
   19daa:	fbb0 f0f5 	udiv	r0, r0, r5
}
   19dae:	bd70      	pop	{r4, r5, r6, pc}
    if (stream->vmt->write == NULL) return 0;
   19db0:	4620      	mov	r0, r4
   19db2:	e7fc      	b.n	19dae <fwrite+0x18>

00019db4 <puts>:
{
   19db4:	b513      	push	{r0, r1, r4, lr}
   19db6:	4604      	mov	r4, r0
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
   19db8:	f000 f85a 	bl	19e70 <strlen>
   19dbc:	4b08      	ldr	r3, [pc, #32]	; (19de0 <puts+0x2c>)
   19dbe:	4602      	mov	r2, r0
   19dc0:	681b      	ldr	r3, [r3, #0]
   19dc2:	9301      	str	r3, [sp, #4]
   19dc4:	2101      	movs	r1, #1
   19dc6:	4620      	mov	r0, r4
   19dc8:	f7ff ffe5 	bl	19d96 <fwrite>
   19dcc:	2201      	movs	r2, #1
   19dce:	4604      	mov	r4, r0
   19dd0:	9b01      	ldr	r3, [sp, #4]
   19dd2:	4804      	ldr	r0, [pc, #16]	; (19de4 <puts+0x30>)
   19dd4:	4611      	mov	r1, r2
   19dd6:	f7ff ffde 	bl	19d96 <fwrite>
}
   19dda:	4420      	add	r0, r4
   19ddc:	b002      	add	sp, #8
   19dde:	bd10      	pop	{r4, pc}
   19de0:	000209b8 	.word	0x000209b8
   19de4:	00021bd1 	.word	0x00021bd1

00019de8 <realloc>:
#include "malloc.h"

/* FIXME: This is cheesy, it should be fixed later */

void *realloc(void *ptr, size_t size)
{
   19de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct free_arena_header *ah;
	void *newptr;
	size_t oldsize;

	if (!ptr)
   19dea:	4605      	mov	r5, r0
   19dec:	b920      	cbnz	r0, 19df8 <realloc+0x10>
                } else {
                    newptr = ptr;
                }
		return newptr;
	}
}
   19dee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return malloc(size);
   19df2:	4608      	mov	r0, r1
   19df4:	f7f6 b9b6 	b.w	10164 <malloc>
	if (size == 0 || size > (SIZE_MAX - sizeof(struct arena_header))) {
   19df8:	1e4b      	subs	r3, r1, #1
   19dfa:	3312      	adds	r3, #18
   19dfc:	d904      	bls.n	19e08 <realloc+0x20>
		free(ptr);
   19dfe:	f7f6 f9fd 	bl	101fc <free>
		return NULL;
   19e02:	2600      	movs	r6, #0
}
   19e04:	4630      	mov	r0, r6
   19e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (ah->a.size >= size && size >= (ah->a.size >> 2)) {
   19e08:	f850 7c0c 	ldr.w	r7, [r0, #-12]
	size = (size + 2 * sizeof(struct arena_header) - 1) & ARENA_SIZE_MASK;
   19e0c:	f101 041f 	add.w	r4, r1, #31
   19e10:	f024 040f 	bic.w	r4, r4, #15
	if (ah->a.size >= size && size >= (ah->a.size >> 2)) {
   19e14:	42a7      	cmp	r7, r4
   19e16:	d304      	bcc.n	19e22 <realloc+0x3a>
   19e18:	ebb4 0f97 	cmp.w	r4, r7, lsr #2
   19e1c:	d301      	bcc.n	19e22 <realloc+0x3a>
		return NULL;
   19e1e:	462e      	mov	r6, r5
   19e20:	e7f0      	b.n	19e04 <realloc+0x1c>
		newptr = malloc(size);
   19e22:	4620      	mov	r0, r4
   19e24:	f7f6 f99e 	bl	10164 <malloc>
		oldsize = ah->a.size - sizeof(struct arena_header);
   19e28:	3f10      	subs	r7, #16
                if (newptr) {
   19e2a:	4606      	mov	r6, r0
   19e2c:	2800      	cmp	r0, #0
   19e2e:	d0f6      	beq.n	19e1e <realloc+0x36>
                    memcpy(newptr, ptr, (size < oldsize) ? size : oldsize);
   19e30:	42bc      	cmp	r4, r7
   19e32:	4622      	mov	r2, r4
   19e34:	4629      	mov	r1, r5
   19e36:	bf28      	it	cs
   19e38:	463a      	movcs	r2, r7
   19e3a:	f7f6 fa19 	bl	10270 <memcpy>
                    free(ptr);
   19e3e:	4628      	mov	r0, r5
   19e40:	f7f6 f9dc 	bl	101fc <free>
   19e44:	e7de      	b.n	19e04 <realloc+0x1c>

00019e46 <strchr>:

#include <string.h>

char *strchr(const char *s, int c)
{
	while (*s != (char)c) {
   19e46:	4603      	mov	r3, r0
   19e48:	b2c9      	uxtb	r1, r1
   19e4a:	781a      	ldrb	r2, [r3, #0]
   19e4c:	428a      	cmp	r2, r1
   19e4e:	4618      	mov	r0, r3
   19e50:	f103 0301 	add.w	r3, r3, #1
   19e54:	d100      	bne.n	19e58 <strchr+0x12>
   19e56:	4770      	bx	lr
		if (!*s)
   19e58:	2a00      	cmp	r2, #0
   19e5a:	d1f6      	bne.n	19e4a <strchr+0x4>
			return NULL;
   19e5c:	4610      	mov	r0, r2
		s++;
	}

	return (char *)s;
}
   19e5e:	4770      	bx	lr

00019e60 <strcpy>:

#include <string.h>

char *strcpy(char *dst, const char *src)
{
	char *q = dst;
   19e60:	4602      	mov	r2, r0
	const char *p = src;
	char ch;

	do {
		*q++ = ch = *p++;
   19e62:	f811 3b01 	ldrb.w	r3, [r1], #1
   19e66:	f802 3b01 	strb.w	r3, [r2], #1
	} while (ch);
   19e6a:	2b00      	cmp	r3, #0
   19e6c:	d1f9      	bne.n	19e62 <strcpy+0x2>

	return dst;
}
   19e6e:	4770      	bx	lr

00019e70 <strlen>:
#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
	while (*ss)
   19e70:	4603      	mov	r3, r0
   19e72:	461a      	mov	r2, r3
   19e74:	3301      	adds	r3, #1
   19e76:	7811      	ldrb	r1, [r2, #0]
   19e78:	2900      	cmp	r1, #0
   19e7a:	d1fa      	bne.n	19e72 <strlen+0x2>
		ss++;
	return ss - s;
}
   19e7c:	1a10      	subs	r0, r2, r0
   19e7e:	4770      	bx	lr

00019e80 <strncmp>:
 */

#include <string.h>

int strncmp(const char *s1, const char *s2, size_t n)
{
   19e80:	b510      	push	{r4, lr}
   19e82:	4402      	add	r2, r0
	const unsigned char *c1 = (const unsigned char *)s1;
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;

	while (n--) {
   19e84:	4290      	cmp	r0, r2
   19e86:	d101      	bne.n	19e8c <strncmp+0xc>
		d = (int)(ch = *c1++) - (int)*c2++;
   19e88:	2300      	movs	r3, #0
		if (d || !ch)
			break;
	}

	return d;
   19e8a:	e007      	b.n	19e9c <strncmp+0x1c>
		d = (int)(ch = *c1++) - (int)*c2++;
   19e8c:	f810 4b01 	ldrb.w	r4, [r0], #1
   19e90:	f811 3b01 	ldrb.w	r3, [r1], #1
		if (d || !ch)
   19e94:	1ae3      	subs	r3, r4, r3
   19e96:	d101      	bne.n	19e9c <strncmp+0x1c>
   19e98:	2c00      	cmp	r4, #0
   19e9a:	d1f3      	bne.n	19e84 <strncmp+0x4>
}
   19e9c:	4618      	mov	r0, r3
   19e9e:	bd10      	pop	{r4, pc}

00019ea0 <strrchr>:
 */

#include <string.h>

char *strrchr(const char *s, int c)
{
   19ea0:	b510      	push	{r4, lr}
	const char *found = NULL;
   19ea2:	2300      	movs	r3, #0

	while (*s) {
		if (*s == (char)c)
   19ea4:	b2c9      	uxtb	r1, r1
   19ea6:	4604      	mov	r4, r0
	while (*s) {
   19ea8:	f810 2b01 	ldrb.w	r2, [r0], #1
   19eac:	b90a      	cbnz	r2, 19eb2 <strrchr+0x12>
			found = s;
		s++;
	}

	return (char *)found;
}
   19eae:	4618      	mov	r0, r3
   19eb0:	bd10      	pop	{r4, pc}
		if (*s == (char)c)
   19eb2:	4291      	cmp	r1, r2
   19eb4:	bf08      	it	eq
   19eb6:	4623      	moveq	r3, r4
		s++;
   19eb8:	e7f5      	b.n	19ea6 <strrchr+0x6>

00019eba <strtok_r>:
#include <string.h>

char *strtok_r(char *s, const char *delim, char **holder)
{
   19eba:	b538      	push	{r3, r4, r5, lr}
   19ebc:	460d      	mov	r5, r1
   19ebe:	4614      	mov	r4, r2
	if (s)
   19ec0:	b100      	cbz	r0, 19ec4 <strtok_r+0xa>
		*holder = s;
   19ec2:	6010      	str	r0, [r2, #0]

	do {
		s = strsep(holder, delim);
   19ec4:	4629      	mov	r1, r5
   19ec6:	4620      	mov	r0, r4
   19ec8:	f000 f8b0 	bl	1a02c <strsep>
	} while (s && !*s);
   19ecc:	b110      	cbz	r0, 19ed4 <strtok_r+0x1a>
   19ece:	7803      	ldrb	r3, [r0, #0]
   19ed0:	2b00      	cmp	r3, #0
   19ed2:	d0f7      	beq.n	19ec4 <strtok_r+0xa>

	return s;
}
   19ed4:	bd38      	pop	{r3, r4, r5, pc}

00019ed6 <strtol>:
#include <stddef.h>
#include <stdlib.h>
#include <inttypes.h>

TYPE NAME(const char *nptr, char **endptr, int base)
{
   19ed6:	b508      	push	{r3, lr}
	return (TYPE) strntoumax(nptr, endptr, base, ~(size_t) 0);
   19ed8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19edc:	f000 f80e 	bl	19efc <strntoumax>
}
   19ee0:	bd08      	pop	{r3, pc}

00019ee2 <strtoll>:
	return (TYPE) strntoumax(nptr, endptr, base, ~(size_t) 0);
   19ee2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19ee6:	f000 b809 	b.w	19efc <strntoumax>
	...

00019eec <vprintf>:
#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
	return vfprintf(stdout, format, ap);
   19eec:	4b02      	ldr	r3, [pc, #8]	; (19ef8 <vprintf+0xc>)
{
   19eee:	460a      	mov	r2, r1
	return vfprintf(stdout, format, ap);
   19ef0:	4601      	mov	r1, r0
   19ef2:	6818      	ldr	r0, [r3, #0]
   19ef4:	f7f6 bca0 	b.w	10838 <vfprintf>
   19ef8:	000209b8 	.word	0x000209b8

00019efc <strntoumax>:
		return -1;
	}
}

uintmax_t strntoumax(const char *nptr, char **endptr, int base, size_t n)
{
   19efc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19f00:	460f      	mov	r7, r1
   19f02:	4949      	ldr	r1, [pc, #292]	; (1a028 <strntoumax+0x12c>)
   19f04:	4604      	mov	r4, r0
	int minus = 0;
	uintmax_t v = 0;
	int d;

	while (n && isspace((unsigned char)*nptr)) {
   19f06:	2b00      	cmp	r3, #0
   19f08:	f000 8084 	beq.w	1a014 <strntoumax+0x118>
   19f0c:	f890 c000 	ldrb.w	ip, [r0]
   19f10:	f1ac 0509 	sub.w	r5, ip, #9
   19f14:	b2ed      	uxtb	r5, r5
   19f16:	2d17      	cmp	r5, #23
   19f18:	f100 0001 	add.w	r0, r0, #1
   19f1c:	d91c      	bls.n	19f58 <strntoumax+0x5c>
	}

	/* Single optional + or - */
	if (n) {
		char c = *nptr;
		if (c == '-' || c == '+') {
   19f1e:	f1bc 0f2d 	cmp.w	ip, #45	; 0x2d
   19f22:	d002      	beq.n	19f2a <strntoumax+0x2e>
   19f24:	f1bc 0f2b 	cmp.w	ip, #43	; 0x2b
   19f28:	d11c      	bne.n	19f64 <strntoumax+0x68>
			minus = (c == '-');
   19f2a:	f1ac 012d 	sub.w	r1, ip, #45	; 0x2d
   19f2e:	f1d1 0c00 	rsbs	ip, r1, #0
   19f32:	eb4c 0c01 	adc.w	ip, ip, r1
			nptr++;
   19f36:	3401      	adds	r4, #1
			n--;
   19f38:	3b01      	subs	r3, #1
		}
	}

	if (base == 0) {
   19f3a:	bb32      	cbnz	r2, 19f8a <strntoumax+0x8e>
		if (n >= 2 && nptr[0] == '0' &&
   19f3c:	2b01      	cmp	r3, #1
   19f3e:	d914      	bls.n	19f6a <strntoumax+0x6e>
   19f40:	7822      	ldrb	r2, [r4, #0]
   19f42:	2a30      	cmp	r2, #48	; 0x30
   19f44:	d14c      	bne.n	19fe0 <strntoumax+0xe4>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   19f46:	7862      	ldrb	r2, [r4, #1]
   19f48:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   19f4c:	2a58      	cmp	r2, #88	; 0x58
   19f4e:	d111      	bne.n	19f74 <strntoumax+0x78>
			n -= 2;
   19f50:	3b02      	subs	r3, #2
			nptr += 2;
   19f52:	3402      	adds	r4, #2
			base = 16;
   19f54:	2210      	movs	r2, #16
   19f56:	e010      	b.n	19f7a <strntoumax+0x7e>
   19f58:	fa21 f505 	lsr.w	r5, r1, r5
   19f5c:	07ed      	lsls	r5, r5, #31
   19f5e:	d501      	bpl.n	19f64 <strntoumax+0x68>
		n--;
   19f60:	3b01      	subs	r3, #1
   19f62:	e7cf      	b.n	19f04 <strntoumax+0x8>
	int minus = 0;
   19f64:	f04f 0c00 	mov.w	ip, #0
   19f68:	e7e7      	b.n	19f3a <strntoumax+0x3e>
		} else if (n >= 1 && nptr[0] == '0') {
   19f6a:	2b00      	cmp	r3, #0
   19f6c:	d041      	beq.n	19ff2 <strntoumax+0xf6>
   19f6e:	7822      	ldrb	r2, [r4, #0]
   19f70:	2a30      	cmp	r2, #48	; 0x30
   19f72:	d134      	bne.n	19fde <strntoumax+0xe2>
			n--;
   19f74:	3b01      	subs	r3, #1
			nptr++;
   19f76:	3401      	adds	r4, #1
			base = 8;
   19f78:	2208      	movs	r2, #8
			base = 16;
   19f7a:	2000      	movs	r0, #0
   19f7c:	46a6      	mov	lr, r4
   19f7e:	eb04 0803 	add.w	r8, r4, r3
   19f82:	4601      	mov	r1, r0
			nptr += 2;
		}
	}

	while (n && (d = digitval(*nptr)) >= 0 && d < base) {
		v = v * base + d;
   19f84:	ea4f 79e2 	mov.w	r9, r2, asr #31
   19f88:	e017      	b.n	19fba <strntoumax+0xbe>
	} else if (base == 16) {
   19f8a:	2a10      	cmp	r2, #16
   19f8c:	d1f5      	bne.n	19f7a <strntoumax+0x7e>
		if (n >= 2 && nptr[0] == '0' &&
   19f8e:	2b01      	cmp	r3, #1
   19f90:	d9e0      	bls.n	19f54 <strntoumax+0x58>
   19f92:	7821      	ldrb	r1, [r4, #0]
   19f94:	2930      	cmp	r1, #48	; 0x30
   19f96:	d1f0      	bne.n	19f7a <strntoumax+0x7e>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   19f98:	7861      	ldrb	r1, [r4, #1]
   19f9a:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   19f9e:	2958      	cmp	r1, #88	; 0x58
   19fa0:	d1eb      	bne.n	19f7a <strntoumax+0x7e>
			n -= 2;
   19fa2:	3b02      	subs	r3, #2
			nptr += 2;
   19fa4:	3402      	adds	r4, #2
   19fa6:	e7e8      	b.n	19f7a <strntoumax+0x7e>
		v = v * base + d;
   19fa8:	4351      	muls	r1, r2
   19faa:	fb00 1109 	mla	r1, r0, r9, r1
   19fae:	fba2 3000 	umull	r3, r0, r2, r0
   19fb2:	180c      	adds	r4, r1, r0
   19fb4:	18e8      	adds	r0, r5, r3
   19fb6:	eb44 71e5 	adc.w	r1, r4, r5, asr #31
	while (n && (d = digitval(*nptr)) >= 0 && d < base) {
   19fba:	45f0      	cmp	r8, lr
   19fbc:	4674      	mov	r4, lr
   19fbe:	d01a      	beq.n	19ff6 <strntoumax+0xfa>
   19fc0:	f81e 6b01 	ldrb.w	r6, [lr], #1
	if (ch >= '0' && ch <= '9') {
   19fc4:	f1a6 0530 	sub.w	r5, r6, #48	; 0x30
   19fc8:	2d09      	cmp	r5, #9
   19fca:	d905      	bls.n	19fd8 <strntoumax+0xdc>
	} else if (ch >= 'A' && ch <= 'Z') {
   19fcc:	f1a6 0341 	sub.w	r3, r6, #65	; 0x41
   19fd0:	2b19      	cmp	r3, #25
   19fd2:	d807      	bhi.n	19fe4 <strntoumax+0xe8>
		return ch - 'A' + 10;
   19fd4:	f1a6 0537 	sub.w	r5, r6, #55	; 0x37
	while (n && (d = digitval(*nptr)) >= 0 && d < base) {
   19fd8:	42aa      	cmp	r2, r5
   19fda:	dce5      	bgt.n	19fa8 <strntoumax+0xac>
   19fdc:	e00b      	b.n	19ff6 <strntoumax+0xfa>
   19fde:	2301      	movs	r3, #1
			base = 10;
   19fe0:	220a      	movs	r2, #10
   19fe2:	e7ca      	b.n	19f7a <strntoumax+0x7e>
	} else if (ch >= 'a' && ch <= 'z') {
   19fe4:	f1a6 0361 	sub.w	r3, r6, #97	; 0x61
   19fe8:	2b19      	cmp	r3, #25
   19fea:	d804      	bhi.n	19ff6 <strntoumax+0xfa>
		return ch - 'a' + 10;
   19fec:	f1a6 0557 	sub.w	r5, r6, #87	; 0x57
   19ff0:	e7f2      	b.n	19fd8 <strntoumax+0xdc>
   19ff2:	4618      	mov	r0, r3
   19ff4:	4619      	mov	r1, r3
		n--;
		nptr++;
	}

	if (endptr)
   19ff6:	b95f      	cbnz	r7, 1a010 <strntoumax+0x114>
		*endptr = (char *)nptr;

	return minus ? -v : v;
   19ff8:	f1bc 0f00 	cmp.w	ip, #0
   19ffc:	d003      	beq.n	1a006 <strntoumax+0x10a>
   19ffe:	4243      	negs	r3, r0
   1a000:	4618      	mov	r0, r3
   1a002:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
}
   1a006:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	int minus = 0;
   1a00a:	4694      	mov	ip, r2
	if (endptr)
   1a00c:	4610      	mov	r0, r2
   1a00e:	4611      	mov	r1, r2
		*endptr = (char *)nptr;
   1a010:	603c      	str	r4, [r7, #0]
   1a012:	e7f1      	b.n	19ff8 <strntoumax+0xfc>
	if (base == 0) {
   1a014:	b922      	cbnz	r2, 1a020 <strntoumax+0x124>
	if (endptr)
   1a016:	2f00      	cmp	r7, #0
   1a018:	d1f7      	bne.n	1a00a <strntoumax+0x10e>
   1a01a:	4638      	mov	r0, r7
   1a01c:	4639      	mov	r1, r7
   1a01e:	e7f2      	b.n	1a006 <strntoumax+0x10a>
	} else if (base == 16) {
   1a020:	2a10      	cmp	r2, #16
	int minus = 0;
   1a022:	469c      	mov	ip, r3
	} else if (base == 16) {
   1a024:	d1a9      	bne.n	19f7a <strntoumax+0x7e>
   1a026:	e795      	b.n	19f54 <strntoumax+0x58>
   1a028:	00800013 	.word	0x00800013

0001a02c <strsep>:
 */

#include <string.h>

char *strsep(char **stringp, const char *delim)
{
   1a02c:	b538      	push	{r3, r4, r5, lr}
	char *s = *stringp;
   1a02e:	6805      	ldr	r5, [r0, #0]
{
   1a030:	4604      	mov	r4, r0
	char *e;

	if (!s)
   1a032:	b13d      	cbz	r5, 1a044 <strsep+0x18>
		return NULL;

	e = strpbrk(s, delim);
   1a034:	4628      	mov	r0, r5
   1a036:	f000 f807 	bl	1a048 <strpbrk>
	if (e)
   1a03a:	b110      	cbz	r0, 1a042 <strsep+0x16>
		*e++ = '\0';
   1a03c:	2300      	movs	r3, #0
   1a03e:	f800 3b01 	strb.w	r3, [r0], #1

	*stringp = e;
   1a042:	6020      	str	r0, [r4, #0]
	return s;
}
   1a044:	4628      	mov	r0, r5
   1a046:	bd38      	pop	{r3, r4, r5, pc}

0001a048 <strpbrk>:
*/

#include <string.h>

char *strpbrk(const char *s1, const char *s2)
{
   1a048:	b570      	push	{r4, r5, r6, lr}
  const char *c = s2;
  if (!*s1)
   1a04a:	7803      	ldrb	r3, [r0, #0]
   1a04c:	b1a3      	cbz	r3, 1a078 <strpbrk+0x30>
   1a04e:	4603      	mov	r3, r0
  const char *c = s2;
   1a050:	460c      	mov	r4, r1
   1a052:	4618      	mov	r0, r3
    return (char *) NULL;

  while (*s1)
   1a054:	f813 5b01 	ldrb.w	r5, [r3], #1
   1a058:	b14d      	cbz	r5, 1a06e <strpbrk+0x26>
   1a05a:	460a      	mov	r2, r1
   1a05c:	e001      	b.n	1a062 <strpbrk+0x1a>
    {
      for (c = s2; *c; c++)
	{
	  if (*s1 == *c)
   1a05e:	42ae      	cmp	r6, r5
   1a060:	d009      	beq.n	1a076 <strpbrk+0x2e>
   1a062:	4614      	mov	r4, r2
      for (c = s2; *c; c++)
   1a064:	f812 6b01 	ldrb.w	r6, [r2], #1
   1a068:	2e00      	cmp	r6, #0
   1a06a:	d1f8      	bne.n	1a05e <strpbrk+0x16>
   1a06c:	e7f1      	b.n	1a052 <strpbrk+0xa>
      if (*c)
	break;
      s1++;
    }

  if (*c == '\0')
   1a06e:	7823      	ldrb	r3, [r4, #0]
    s1 = NULL;
   1a070:	2b00      	cmp	r3, #0
   1a072:	bf08      	it	eq
   1a074:	2000      	moveq	r0, #0

  return (char *) s1;
}
   1a076:	bd70      	pop	{r4, r5, r6, pc}
    s1 = NULL;
   1a078:	4618      	mov	r0, r3
   1a07a:	e7fc      	b.n	1a076 <strpbrk+0x2e>

0001a07c <cbor_encode_text_stringz>:
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1a07c:	b513      	push	{r0, r1, r4, lr}
   1a07e:	4604      	mov	r4, r0
   1a080:	4608      	mov	r0, r1
   1a082:	9101      	str	r1, [sp, #4]
   1a084:	f7ff fef4 	bl	19e70 <strlen>
   1a088:	9901      	ldr	r1, [sp, #4]
   1a08a:	4602      	mov	r2, r0
   1a08c:	4620      	mov	r0, r4
   1a08e:	b002      	add	sp, #8
   1a090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a094:	f7fa bf11 	b.w	14eba <cbor_encode_text_string>

0001a098 <imgr_upload_good_rsp>:
    return 0;
}

static int
imgr_upload_good_rsp(struct mgmt_cbuf *cb)
{
   1a098:	b538      	push	{r3, r4, r5, lr}
    CborError err = CborNoError;

    err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1a09a:	f100 050c 	add.w	r5, r0, #12
   1a09e:	490e      	ldr	r1, [pc, #56]	; (1a0d8 <imgr_upload_good_rsp+0x40>)
   1a0a0:	4628      	mov	r0, r5
   1a0a2:	f7ff ffeb 	bl	1a07c <cbor_encode_text_stringz>
    err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1a0a6:	2200      	movs	r2, #0
   1a0a8:	2300      	movs	r3, #0
    err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1a0aa:	4604      	mov	r4, r0
    err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1a0ac:	4628      	mov	r0, r5
   1a0ae:	f7fa fed3 	bl	14e58 <cbor_encode_int>
    err |= cbor_encode_text_stringz(&cb->encoder, "off");
   1a0b2:	490a      	ldr	r1, [pc, #40]	; (1a0dc <imgr_upload_good_rsp+0x44>)
    err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1a0b4:	4304      	orrs	r4, r0
    err |= cbor_encode_text_stringz(&cb->encoder, "off");
   1a0b6:	4628      	mov	r0, r5
   1a0b8:	f7ff ffe0 	bl	1a07c <cbor_encode_text_stringz>
    err |= cbor_encode_int(&cb->encoder, imgr_state.off);
   1a0bc:	4b08      	ldr	r3, [pc, #32]	; (1a0e0 <imgr_upload_good_rsp+0x48>)
    err |= cbor_encode_text_stringz(&cb->encoder, "off");
   1a0be:	4304      	orrs	r4, r0
    err |= cbor_encode_int(&cb->encoder, imgr_state.off);
   1a0c0:	685a      	ldr	r2, [r3, #4]
   1a0c2:	4628      	mov	r0, r5
   1a0c4:	2300      	movs	r3, #0
   1a0c6:	f7fa fec7 	bl	14e58 <cbor_encode_int>

    if (err != 0) {
        return MGMT_ERR_ENOMEM;
   1a0ca:	ea54 0300 	orrs.w	r3, r4, r0
    }

    return 0;
}
   1a0ce:	bf14      	ite	ne
   1a0d0:	2002      	movne	r0, #2
   1a0d2:	2000      	moveq	r0, #0
   1a0d4:	bd38      	pop	{r3, r4, r5, pc}
   1a0d6:	bf00      	nop
   1a0d8:	00020fea 	.word	0x00020fea
   1a0dc:	00020f17 	.word	0x00020f17
   1a0e0:	20006fdc 	.word	0x20006fdc

0001a0e4 <imgr_erase.part.0>:
imgr_erase_state(struct mgmt_cbuf *cb)
   1a0e4:	b538      	push	{r3, r4, r5, lr}
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1a0e6:	f100 050c 	add.w	r5, r0, #12
   1a0ea:	4909      	ldr	r1, [pc, #36]	; (1a110 <imgr_erase.part.0+0x2c>)
   1a0ec:	4628      	mov	r0, r5
   1a0ee:	f7ff ffc5 	bl	1a07c <cbor_encode_text_stringz>
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1a0f2:	2200      	movs	r2, #0
   1a0f4:	2300      	movs	r3, #0
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1a0f6:	4604      	mov	r4, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1a0f8:	4628      	mov	r0, r5
   1a0fa:	f7fa fead 	bl	14e58 <cbor_encode_int>
    if (g_err) {
   1a0fe:	4320      	orrs	r0, r4
    imgr_state.area_id = -1;
   1a100:	bf03      	ittte	eq
   1a102:	4b04      	ldreq	r3, [pc, #16]	; (1a114 <imgr_erase.part.0+0x30>)
   1a104:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   1a108:	601a      	streq	r2, [r3, #0]
        return MGMT_ERR_ENOMEM;
   1a10a:	2002      	movne	r0, #2
}
   1a10c:	bd38      	pop	{r3, r4, r5, pc}
   1a10e:	bf00      	nop
   1a110:	00020fea 	.word	0x00020fea
   1a114:	20006fdc 	.word	0x20006fdc

0001a118 <imgr_read_info>:
{
   1a118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a11c:	b08a      	sub	sp, #40	; 0x28
   1a11e:	460c      	mov	r4, r1
   1a120:	4615      	mov	r5, r2
   1a122:	461e      	mov	r6, r3
    area_id = flash_area_id_from_image_slot(image_slot);
   1a124:	f001 fbcc 	bl	1b8c0 <flash_area_id_from_image_slot>
    rc2 = flash_area_open(area_id, &fa);
   1a128:	4669      	mov	r1, sp
   1a12a:	b2c0      	uxtb	r0, r0
   1a12c:	f001 fb18 	bl	1b760 <flash_area_open>
    if (rc2) {
   1a130:	4601      	mov	r1, r0
   1a132:	b110      	cbz	r0, 1a13a <imgr_read_info+0x22>
        rc = -1;
   1a134:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1a138:	e059      	b.n	1a1ee <imgr_read_info+0xd6>
    rc2 = flash_area_read_is_empty(fa, 0, hdr, sizeof(*hdr));
   1a13a:	9800      	ldr	r0, [sp, #0]
   1a13c:	2320      	movs	r3, #32
   1a13e:	aa02      	add	r2, sp, #8
   1a140:	f001 fbb6 	bl	1b8b0 <flash_area_read_is_empty>
    if (rc2 < 0) {
   1a144:	2800      	cmp	r0, #0
   1a146:	dbf5      	blt.n	1a134 <imgr_read_info+0x1c>
    if (ver) {
   1a148:	b11c      	cbz	r4, 1a152 <imgr_read_info+0x3a>
        memset(ver, 0xff, sizeof(*ver));
   1a14a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a14e:	6023      	str	r3, [r4, #0]
   1a150:	6063      	str	r3, [r4, #4]
    if (hdr->ih_magic == IMAGE_MAGIC) {
   1a152:	4b2a      	ldr	r3, [pc, #168]	; (1a1fc <imgr_read_info+0xe4>)
   1a154:	9a02      	ldr	r2, [sp, #8]
   1a156:	429a      	cmp	r2, r3
   1a158:	d13c      	bne.n	1a1d4 <imgr_read_info+0xbc>
        if (ver) {
   1a15a:	b11c      	cbz	r4, 1a164 <imgr_read_info+0x4c>
            memcpy(ver, &hdr->ih_ver, sizeof(*ver));
   1a15c:	ab07      	add	r3, sp, #28
   1a15e:	cb03      	ldmia	r3!, {r0, r1}
   1a160:	6020      	str	r0, [r4, #0]
   1a162:	6061      	str	r1, [r4, #4]
    if (flags) {
   1a164:	b10e      	cbz	r6, 1a16a <imgr_read_info+0x52>
        *flags = hdr->ih_flags;
   1a166:	9b06      	ldr	r3, [sp, #24]
   1a168:	6033      	str	r3, [r6, #0]
    data_off = hdr->ih_hdr_size + hdr->ih_img_size;
   1a16a:	9905      	ldr	r1, [sp, #20]
   1a16c:	f8bd 4010 	ldrh.w	r4, [sp, #16]
    rc = flash_area_read(fa, *start_off, &tlv_info, sizeof(tlv_info));
   1a170:	9800      	ldr	r0, [sp, #0]
   1a172:	2304      	movs	r3, #4
    data_off = hdr->ih_hdr_size + hdr->ih_img_size;
   1a174:	440c      	add	r4, r1
    rc = flash_area_read(fa, *start_off, &tlv_info, sizeof(tlv_info));
   1a176:	eb0d 0203 	add.w	r2, sp, r3
   1a17a:	4621      	mov	r1, r4
   1a17c:	f001 fb48 	bl	1b810 <flash_area_read>
    if (rc) {
   1a180:	4606      	mov	r6, r0
   1a182:	2800      	cmp	r0, #0
   1a184:	d1d6      	bne.n	1a134 <imgr_read_info+0x1c>
    if (tlv_info.it_magic != IMAGE_TLV_INFO_MAGIC) {
   1a186:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1a18a:	f646 1307 	movw	r3, #26887	; 0x6907
   1a18e:	429a      	cmp	r2, r3
   1a190:	d122      	bne.n	1a1d8 <imgr_read_info+0xc0>
    if (data_end > fa->fa_size) {
   1a192:	9b00      	ldr	r3, [sp, #0]
    *end_off = *start_off + tlv_info.it_tlv_tot;
   1a194:	f8bd 7006 	ldrh.w	r7, [sp, #6]
    if (data_end > fa->fa_size) {
   1a198:	689b      	ldr	r3, [r3, #8]
    *start_off += sizeof(tlv_info);
   1a19a:	3404      	adds	r4, #4
    *end_off = *start_off + tlv_info.it_tlv_tot;
   1a19c:	4427      	add	r7, r4
    if (data_end > fa->fa_size) {
   1a19e:	42bb      	cmp	r3, r7
   1a1a0:	d31a      	bcc.n	1a1d8 <imgr_read_info+0xc0>
    while (data_off + sizeof(*tlv) <= data_end) {
   1a1a2:	f104 0804 	add.w	r8, r4, #4
   1a1a6:	45b8      	cmp	r8, r7
   1a1a8:	d816      	bhi.n	1a1d8 <imgr_read_info+0xc0>
        rc2 = flash_area_read_is_empty(fa, data_off, tlv, sizeof(*tlv));
   1a1aa:	2304      	movs	r3, #4
   1a1ac:	9800      	ldr	r0, [sp, #0]
   1a1ae:	aa02      	add	r2, sp, #8
   1a1b0:	4621      	mov	r1, r4
   1a1b2:	f001 fb7d 	bl	1b8b0 <flash_area_read_is_empty>
        if (rc2 < 0) {
   1a1b6:	1e03      	subs	r3, r0, #0
   1a1b8:	db19      	blt.n	1a1ee <imgr_read_info+0xd6>
        if (rc2 == 1) {
   1a1ba:	2b01      	cmp	r3, #1
   1a1bc:	d00c      	beq.n	1a1d8 <imgr_read_info+0xc0>
        if (tlv->it_type != IMAGE_TLV_SHA256 ||
   1a1be:	f89d 2008 	ldrb.w	r2, [sp, #8]
          tlv->it_len != IMGMGR_HASH_LEN) {
   1a1c2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
        if (tlv->it_type != IMAGE_TLV_SHA256 ||
   1a1c6:	2a10      	cmp	r2, #16
   1a1c8:	d101      	bne.n	1a1ce <imgr_read_info+0xb6>
   1a1ca:	2b20      	cmp	r3, #32
   1a1cc:	d006      	beq.n	1a1dc <imgr_read_info+0xc4>
            data_off += sizeof(*tlv) + tlv->it_len;
   1a1ce:	3304      	adds	r3, #4
   1a1d0:	441c      	add	r4, r3
            continue;
   1a1d2:	e7e6      	b.n	1a1a2 <imgr_read_info+0x8a>
    } else if (rc2 == 1) {
   1a1d4:	2801      	cmp	r0, #1
   1a1d6:	d00e      	beq.n	1a1f6 <imgr_read_info+0xde>
        rc = 1;
   1a1d8:	2601      	movs	r6, #1
    if (rc) {
   1a1da:	e008      	b.n	1a1ee <imgr_read_info+0xd6>
        if (hash) {
   1a1dc:	b13d      	cbz	r5, 1a1ee <imgr_read_info+0xd6>
            if (data_off + IMGMGR_HASH_LEN > data_end) {
   1a1de:	3424      	adds	r4, #36	; 0x24
   1a1e0:	42bc      	cmp	r4, r7
   1a1e2:	d804      	bhi.n	1a1ee <imgr_read_info+0xd6>
            rc2 = flash_area_read(fa, data_off, hash, IMGMGR_HASH_LEN);
   1a1e4:	9800      	ldr	r0, [sp, #0]
   1a1e6:	462a      	mov	r2, r5
   1a1e8:	4641      	mov	r1, r8
   1a1ea:	f001 fb11 	bl	1b810 <flash_area_read>
}
   1a1ee:	4630      	mov	r0, r6
   1a1f0:	b00a      	add	sp, #40	; 0x28
   1a1f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 2;
   1a1f6:	2602      	movs	r6, #2
   1a1f8:	e7f9      	b.n	1a1ee <imgr_read_info+0xd6>
   1a1fa:	bf00      	nop
   1a1fc:	96f3b83d 	.word	0x96f3b83d

0001a200 <imgr_my_version>:
{
   1a200:	4601      	mov	r1, r0
    return imgr_read_info(boot_current_slot, ver, NULL, NULL);
   1a202:	4803      	ldr	r0, [pc, #12]	; (1a210 <imgr_my_version+0x10>)
   1a204:	2300      	movs	r3, #0
   1a206:	6800      	ldr	r0, [r0, #0]
   1a208:	461a      	mov	r2, r3
   1a20a:	f7ff bf85 	b.w	1a118 <imgr_read_info>
   1a20e:	bf00      	nop
   1a210:	200073a8 	.word	0x200073a8

0001a214 <imgr_find_by_hash>:
{
   1a214:	b570      	push	{r4, r5, r6, lr}
   1a216:	4605      	mov	r5, r0
   1a218:	b088      	sub	sp, #32
   1a21a:	460e      	mov	r6, r1
    for (i = 0; i < 2; i++) {
   1a21c:	2400      	movs	r4, #0
        if (imgr_read_info(i, ver, hash, NULL) != 0) {
   1a21e:	2300      	movs	r3, #0
   1a220:	466a      	mov	r2, sp
   1a222:	4631      	mov	r1, r6
   1a224:	4620      	mov	r0, r4
   1a226:	f7ff ff77 	bl	1a118 <imgr_read_info>
   1a22a:	b928      	cbnz	r0, 1a238 <imgr_find_by_hash+0x24>
        if (!memcmp(hash, find, IMGMGR_HASH_LEN)) {
   1a22c:	2220      	movs	r2, #32
   1a22e:	4629      	mov	r1, r5
   1a230:	4668      	mov	r0, sp
   1a232:	f7f5 fff9 	bl	10228 <memcmp>
   1a236:	b118      	cbz	r0, 1a240 <imgr_find_by_hash+0x2c>
    for (i = 0; i < 2; i++) {
   1a238:	2c01      	cmp	r4, #1
   1a23a:	d104      	bne.n	1a246 <imgr_find_by_hash+0x32>
    return -1;
   1a23c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   1a240:	4620      	mov	r0, r4
   1a242:	b008      	add	sp, #32
   1a244:	bd70      	pop	{r4, r5, r6, pc}
   1a246:	2401      	movs	r4, #1
   1a248:	e7e9      	b.n	1a21e <imgr_find_by_hash+0xa>

0001a24a <imgmgr_find_best_area_id>:
{
   1a24a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    for (i = 0; i < 2; i++) {
   1a24c:	2500      	movs	r5, #0
    int best = -1;
   1a24e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
        rc = imgr_read_info(i, &ver, NULL, NULL);
   1a252:	2300      	movs	r3, #0
   1a254:	461a      	mov	r2, r3
   1a256:	4669      	mov	r1, sp
   1a258:	4628      	mov	r0, r5
   1a25a:	f7ff ff5d 	bl	1a118 <imgr_read_info>
        if (rc < 0) {
   1a25e:	2800      	cmp	r0, #0
   1a260:	db06      	blt.n	1a270 <imgmgr_find_best_area_id+0x26>
        if (rc == 0) {
   1a262:	d111      	bne.n	1a288 <imgmgr_find_best_area_id+0x3e>
            if (imgmgr_state_slot_in_use(i)) {
   1a264:	4628      	mov	r0, r5
   1a266:	f000 fa86 	bl	1a776 <imgmgr_state_slot_in_use>
   1a26a:	2800      	cmp	r0, #0
   1a26c:	bf08      	it	eq
   1a26e:	462c      	moveq	r4, r5
    for (i = 0; i < 2; i++) {
   1a270:	b145      	cbz	r5, 1a284 <imgmgr_find_best_area_id+0x3a>
    if (best >= 0) {
   1a272:	1c63      	adds	r3, r4, #1
   1a274:	d003      	beq.n	1a27e <imgmgr_find_best_area_id+0x34>
        best = flash_area_id_from_image_slot(best);
   1a276:	4620      	mov	r0, r4
   1a278:	f001 fb22 	bl	1b8c0 <flash_area_id_from_image_slot>
   1a27c:	4604      	mov	r4, r0
}
   1a27e:	4620      	mov	r0, r4
   1a280:	b003      	add	sp, #12
   1a282:	bd30      	pop	{r4, r5, pc}
   1a284:	2501      	movs	r5, #1
   1a286:	e7e4      	b.n	1a252 <imgmgr_find_best_area_id+0x8>
   1a288:	462c      	mov	r4, r5
   1a28a:	e7f4      	b.n	1a276 <imgmgr_find_best_area_id+0x2c>

0001a28c <imgr_erase_state>:
{
   1a28c:	b513      	push	{r0, r1, r4, lr}
   1a28e:	4604      	mov	r4, r0
    area_id = imgmgr_find_best_area_id();
   1a290:	f7ff ffdb 	bl	1a24a <imgmgr_find_best_area_id>
    if (area_id >= 0) {
   1a294:	2800      	cmp	r0, #0
   1a296:	db12      	blt.n	1a2be <imgr_erase_state+0x32>
        rc = flash_area_open(area_id, &fa);
   1a298:	a901      	add	r1, sp, #4
   1a29a:	b2c0      	uxtb	r0, r0
   1a29c:	f001 fa60 	bl	1b760 <flash_area_open>
        if (rc) {
   1a2a0:	4601      	mov	r1, r0
   1a2a2:	b110      	cbz	r0, 1a2aa <imgr_erase_state+0x1e>
            return imgr_error_rsp(cb, MGMT_ERR_EINVAL,
   1a2a4:	2003      	movs	r0, #3
}
   1a2a6:	b002      	add	sp, #8
   1a2a8:	bd10      	pop	{r4, pc}
        rc = flash_area_erase(fa, 0, sizeof(struct image_header));
   1a2aa:	9801      	ldr	r0, [sp, #4]
   1a2ac:	2220      	movs	r2, #32
   1a2ae:	f001 fad3 	bl	1b858 <flash_area_erase>
        if (rc) {
   1a2b2:	2800      	cmp	r0, #0
   1a2b4:	d1f6      	bne.n	1a2a4 <imgr_erase_state+0x18>
   1a2b6:	4620      	mov	r0, r4
   1a2b8:	f7ff ff14 	bl	1a0e4 <imgr_erase.part.0>
   1a2bc:	e7f3      	b.n	1a2a6 <imgr_erase_state+0x1a>
        return imgr_error_rsp(cb, MGMT_ERR_ENOMEM, imgmgr_err_str_no_slot);
   1a2be:	2002      	movs	r0, #2
   1a2c0:	e7f1      	b.n	1a2a6 <imgr_erase_state+0x1a>

0001a2c2 <imgr_erase>:
{
   1a2c2:	b513      	push	{r0, r1, r4, lr}
   1a2c4:	4604      	mov	r4, r0
    area_id = imgmgr_find_best_area_id();
   1a2c6:	f7ff ffc0 	bl	1a24a <imgmgr_find_best_area_id>
    if (area_id >= 0) {
   1a2ca:	2800      	cmp	r0, #0
   1a2cc:	db12      	blt.n	1a2f4 <imgr_erase+0x32>
        rc = flash_area_open(area_id, &fa);
   1a2ce:	a901      	add	r1, sp, #4
   1a2d0:	b2c0      	uxtb	r0, r0
   1a2d2:	f001 fa45 	bl	1b760 <flash_area_open>
        if (rc) {
   1a2d6:	4601      	mov	r1, r0
   1a2d8:	b110      	cbz	r0, 1a2e0 <imgr_erase+0x1e>
            return imgr_error_rsp(cb, MGMT_ERR_EINVAL,
   1a2da:	2003      	movs	r0, #3
}
   1a2dc:	b002      	add	sp, #8
   1a2de:	bd10      	pop	{r4, pc}
        rc = flash_area_erase(fa, 0, fa->fa_size);
   1a2e0:	9801      	ldr	r0, [sp, #4]
   1a2e2:	6882      	ldr	r2, [r0, #8]
   1a2e4:	f001 fab8 	bl	1b858 <flash_area_erase>
        if (rc) {
   1a2e8:	2800      	cmp	r0, #0
   1a2ea:	d1f6      	bne.n	1a2da <imgr_erase+0x18>
   1a2ec:	4620      	mov	r0, r4
   1a2ee:	f7ff fef9 	bl	1a0e4 <imgr_erase.part.0>
   1a2f2:	e7f3      	b.n	1a2dc <imgr_erase+0x1a>
        return imgr_error_rsp(cb, MGMT_ERR_ENOMEM, imgmgr_err_str_no_slot);
   1a2f4:	2002      	movs	r0, #2
   1a2f6:	e7f1      	b.n	1a2dc <imgr_erase+0x1a>

0001a2f8 <imgmgr_dfu_stopped>:
}

void
imgmgr_dfu_stopped(void)
{
    if (imgmgr_dfu_callbacks_fn && imgmgr_dfu_callbacks_fn->dfu_stopped_cb) {
   1a2f8:	4b03      	ldr	r3, [pc, #12]	; (1a308 <imgmgr_dfu_stopped+0x10>)
   1a2fa:	681b      	ldr	r3, [r3, #0]
   1a2fc:	b113      	cbz	r3, 1a304 <imgmgr_dfu_stopped+0xc>
   1a2fe:	685b      	ldr	r3, [r3, #4]
   1a300:	b103      	cbz	r3, 1a304 <imgmgr_dfu_stopped+0xc>
        imgmgr_dfu_callbacks_fn->dfu_stopped_cb();
   1a302:	4718      	bx	r3
    }
}
   1a304:	4770      	bx	lr
   1a306:	bf00      	nop
   1a308:	20006fd8 	.word	0x20006fd8

0001a30c <imgmgr_dfu_started>:

void
imgmgr_dfu_started(void)
{
    if (imgmgr_dfu_callbacks_fn && imgmgr_dfu_callbacks_fn->dfu_started_cb) {
   1a30c:	4b03      	ldr	r3, [pc, #12]	; (1a31c <imgmgr_dfu_started+0x10>)
   1a30e:	681b      	ldr	r3, [r3, #0]
   1a310:	b113      	cbz	r3, 1a318 <imgmgr_dfu_started+0xc>
   1a312:	681b      	ldr	r3, [r3, #0]
   1a314:	b103      	cbz	r3, 1a318 <imgmgr_dfu_started+0xc>
        imgmgr_dfu_callbacks_fn->dfu_started_cb();
   1a316:	4718      	bx	r3
    }
}
   1a318:	4770      	bx	lr
   1a31a:	bf00      	nop
   1a31c:	20006fd8 	.word	0x20006fd8

0001a320 <imgmgr_dfu_pending>:

void
imgmgr_dfu_pending(void)
{
    if (imgmgr_dfu_callbacks_fn && imgmgr_dfu_callbacks_fn->dfu_pending_cb) {
   1a320:	4b03      	ldr	r3, [pc, #12]	; (1a330 <imgmgr_dfu_pending+0x10>)
   1a322:	681b      	ldr	r3, [r3, #0]
   1a324:	b113      	cbz	r3, 1a32c <imgmgr_dfu_pending+0xc>
   1a326:	689b      	ldr	r3, [r3, #8]
   1a328:	b103      	cbz	r3, 1a32c <imgmgr_dfu_pending+0xc>
        imgmgr_dfu_callbacks_fn->dfu_pending_cb();
   1a32a:	4718      	bx	r3
    }
}
   1a32c:	4770      	bx	lr
   1a32e:	bf00      	nop
   1a330:	20006fd8 	.word	0x20006fd8

0001a334 <imgr_upload>:
{
   1a334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a338:	f5ad 7d6a 	sub.w	sp, sp, #936	; 0x3a8
    struct imgr_upload_req req = {
   1a33c:	ad5a      	add	r5, sp, #360	; 0x168
{
   1a33e:	4606      	mov	r6, r0
    struct imgr_upload_req req = {
   1a340:	f44f 7210 	mov.w	r2, #576	; 0x240
   1a344:	2100      	movs	r1, #0
   1a346:	4628      	mov	r0, r5
   1a348:	f7f5 ff9f 	bl	1028a <memset>
   1a34c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a350:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1a354:	e9cd 235a 	strd	r2, r3, [sp, #360]	; 0x168
   1a358:	e9c5 2302 	strd	r2, r3, [r5, #8]
    const struct cbor_attr_t off_attr[] = {
   1a35c:	2100      	movs	r1, #0
   1a35e:	f44f 7290 	mov.w	r2, #288	; 0x120
   1a362:	a812      	add	r0, sp, #72	; 0x48
   1a364:	f7f5 ff91 	bl	1028a <memset>
   1a368:	4baa      	ldr	r3, [pc, #680]	; (1a614 <imgr_upload+0x2e0>)
   1a36a:	9312      	str	r3, [sp, #72]	; 0x48
   1a36c:	ab5e      	add	r3, sp, #376	; 0x178
   1a36e:	9315      	str	r3, [sp, #84]	; 0x54
   1a370:	f44f 7300 	mov.w	r3, #512	; 0x200
   1a374:	931c      	str	r3, [sp, #112]	; 0x70
   1a376:	4ba8      	ldr	r3, [pc, #672]	; (1a618 <imgr_upload+0x2e4>)
   1a378:	931e      	str	r3, [sp, #120]	; 0x78
   1a37a:	ab5c      	add	r3, sp, #368	; 0x170
   1a37c:	9320      	str	r3, [sp, #128]	; 0x80
   1a37e:	2301      	movs	r3, #1
   1a380:	f88d 30a4 	strb.w	r3, [sp, #164]	; 0xa4
   1a384:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
   1a388:	4ba4      	ldr	r3, [pc, #656]	; (1a61c <imgr_upload+0x2e8>)
   1a38a:	9336      	str	r3, [sp, #216]	; 0xd8
   1a38c:	ab5f      	add	r3, sp, #380	; 0x17c
   1a38e:	9339      	str	r3, [sp, #228]	; 0xe4
   1a390:	2320      	movs	r3, #32
   1a392:	9340      	str	r3, [sp, #256]	; 0x100
   1a394:	4ba2      	ldr	r3, [pc, #648]	; (1a620 <imgr_upload+0x2ec>)
   1a396:	9342      	str	r3, [sp, #264]	; 0x108
   1a398:	2305      	movs	r3, #5
   1a39a:	49a2      	ldr	r1, [pc, #648]	; (1a624 <imgr_upload+0x2f0>)
   1a39c:	f88d 310c 	strb.w	r3, [sp, #268]	; 0x10c
   1a3a0:	abe8      	add	r3, sp, #928	; 0x3a0
   1a3a2:	2202      	movs	r2, #2
   1a3a4:	f04f 0903 	mov.w	r9, #3
   1a3a8:	912a      	str	r1, [sp, #168]	; 0xa8
   1a3aa:	9344      	str	r3, [sp, #272]	; 0x110
   1a3ac:	f50d 78c0 	add.w	r8, sp, #384	; 0x180
    const struct flash_area *fa = NULL;
   1a3b0:	2300      	movs	r3, #0
    const struct cbor_attr_t off_attr[] = {
   1a3b2:	afe0      	add	r7, sp, #896	; 0x380
    rc = cbor_read_object(&cb->it, off_attr);
   1a3b4:	a912      	add	r1, sp, #72	; 0x48
   1a3b6:	f106 001c 	add.w	r0, r6, #28
    const struct cbor_attr_t off_attr[] = {
   1a3ba:	f88d 904c 	strb.w	r9, [sp, #76]	; 0x4c
   1a3be:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   1a3c2:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
   1a3c6:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   1a3ca:	952c      	str	r5, [sp, #176]	; 0xb0
   1a3cc:	f88d 90dc 	strb.w	r9, [sp, #220]	; 0xdc
   1a3d0:	9738      	str	r7, [sp, #224]	; 0xe0
    const struct flash_area *fa = NULL;
   1a3d2:	9302      	str	r3, [sp, #8]
    rc = cbor_read_object(&cb->it, off_attr);
   1a3d4:	f7fa fc42 	bl	14c5c <cbor_read_object>
    if (rc != 0) {
   1a3d8:	4604      	mov	r4, r0
   1a3da:	2800      	cmp	r0, #0
   1a3dc:	f040 8145 	bne.w	1a66a <imgr_upload+0x336>
    memset(action, 0, sizeof *action);
   1a3e0:	2218      	movs	r2, #24
   1a3e2:	4601      	mov	r1, r0
   1a3e4:	a804      	add	r0, sp, #16
   1a3e6:	f7f5 ff50 	bl	1028a <memset>
    if (req->off == -1) {
   1a3ea:	e9d5 2300 	ldrd	r2, r3, [r5]
   1a3ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1a3f2:	bf08      	it	eq
   1a3f4:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   1a3f8:	f000 80b1 	beq.w	1a55e <imgr_upload+0x22a>
    if (req->off == 0) {
   1a3fc:	ea52 0103 	orrs.w	r1, r2, r3
   1a400:	f040 8093 	bne.w	1a52a <imgr_upload+0x1f6>
        if (req->data_len < sizeof(struct image_header)) {
   1a404:	692b      	ldr	r3, [r5, #16]
   1a406:	2b1f      	cmp	r3, #31
   1a408:	f240 80a9 	bls.w	1a55e <imgr_upload+0x22a>
        if (req->size == -1) {
   1a40c:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   1a410:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1a414:	bf08      	it	eq
   1a416:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   1a41a:	f000 80a0 	beq.w	1a55e <imgr_upload+0x22a>
        action->size = req->size;
   1a41e:	e9cd 2304 	strd	r2, r3, [sp, #16]
        if (hdr->ih_magic != IMAGE_MAGIC) {
   1a422:	69aa      	ldr	r2, [r5, #24]
   1a424:	4b80      	ldr	r3, [pc, #512]	; (1a628 <imgr_upload+0x2f4>)
   1a426:	429a      	cmp	r2, r3
   1a428:	f040 8099 	bne.w	1a55e <imgr_upload+0x22a>
        if (req->data_sha_len > IMGMGR_DATA_SHA_LEN) {
   1a42c:	696a      	ldr	r2, [r5, #20]
   1a42e:	2a20      	cmp	r2, #32
   1a430:	f200 8095 	bhi.w	1a55e <imgr_upload+0x22a>
        if ((req->data_sha_len > 0) && (imgr_state.area_id != -1)) {
   1a434:	b162      	cbz	r2, 1a450 <imgr_upload+0x11c>
   1a436:	4b7d      	ldr	r3, [pc, #500]	; (1a62c <imgr_upload+0x2f8>)
   1a438:	6819      	ldr	r1, [r3, #0]
   1a43a:	3101      	adds	r1, #1
   1a43c:	d008      	beq.n	1a450 <imgr_upload+0x11c>
            if ((imgr_state.data_sha_len == req->data_sha_len) &&
   1a43e:	7b1b      	ldrb	r3, [r3, #12]
   1a440:	429a      	cmp	r2, r3
   1a442:	d105      	bne.n	1a450 <imgr_upload+0x11c>
                            !memcmp(imgr_state.data_sha, req->data_sha,
   1a444:	487a      	ldr	r0, [pc, #488]	; (1a630 <imgr_upload+0x2fc>)
   1a446:	4639      	mov	r1, r7
   1a448:	f7f5 feee 	bl	10228 <memcmp>
            if ((imgr_state.data_sha_len == req->data_sha_len) &&
   1a44c:	2800      	cmp	r0, #0
   1a44e:	d077      	beq.n	1a540 <imgr_upload+0x20c>
        action->area_id = imgmgr_find_best_area_id();
   1a450:	f7ff fefb 	bl	1a24a <imgmgr_find_best_area_id>
        if (action->area_id < 0) {
   1a454:	2800      	cmp	r0, #0
        action->area_id = imgmgr_find_best_area_id();
   1a456:	4604      	mov	r4, r0
   1a458:	9007      	str	r0, [sp, #28]
        if (action->area_id < 0) {
   1a45a:	db7e      	blt.n	1a55a <imgr_upload+0x226>
        if (req->upgrade) {
   1a45c:	f895 3238 	ldrb.w	r3, [r5, #568]	; 0x238
   1a460:	2b00      	cmp	r3, #0
   1a462:	d149      	bne.n	1a4f8 <imgr_upload+0x1c4>
        rc = flash_area_open(action->area_id, &fa);
   1a464:	a903      	add	r1, sp, #12
   1a466:	b2e0      	uxtb	r0, r4
   1a468:	f001 f97a 	bl	1b760 <flash_area_open>
        if (rc) {
   1a46c:	2800      	cmp	r0, #0
   1a46e:	d16c      	bne.n	1a54a <imgr_upload+0x216>
        rc = flash_area_is_empty(fa, &empty);
   1a470:	9803      	ldr	r0, [sp, #12]
   1a472:	f10d 0107 	add.w	r1, sp, #7
   1a476:	f001 fa0b 	bl	1b890 <flash_area_is_empty>
        if (rc) {
   1a47a:	2800      	cmp	r0, #0
   1a47c:	d165      	bne.n	1a54a <imgr_upload+0x216>
        action->erase = !empty;
   1a47e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1a482:	f083 0301 	eor.w	r3, r3, #1
   1a486:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    if (req->off + req->data_len < action->size) {
   1a48a:	e9d5 3200 	ldrd	r3, r2, [r5]
   1a48e:	e9dd 9104 	ldrd	r9, r1, [sp, #16]
    action->write_bytes = req->data_len;
   1a492:	692c      	ldr	r4, [r5, #16]
   1a494:	9406      	str	r4, [sp, #24]
    if (req->off + req->data_len < action->size) {
   1a496:	18e3      	adds	r3, r4, r3
   1a498:	f142 0200 	adc.w	r2, r2, #0
   1a49c:	454b      	cmp	r3, r9
   1a49e:	eb72 0301 	sbcs.w	r3, r2, r1
   1a4a2:	d212      	bcs.n	1a4ca <imgr_upload+0x196>
        rc = flash_area_open(action->area_id, &fa);
   1a4a4:	f89d 001c 	ldrb.w	r0, [sp, #28]
   1a4a8:	a903      	add	r1, sp, #12
   1a4aa:	f001 f959 	bl	1b760 <flash_area_open>
        if (rc) {
   1a4ae:	2800      	cmp	r0, #0
   1a4b0:	d14b      	bne.n	1a54a <imgr_upload+0x216>
        rem_bytes = req->data_len % flash_area_align(fa);
   1a4b2:	9803      	ldr	r0, [sp, #12]
   1a4b4:	f8d5 a010 	ldr.w	sl, [r5, #16]
   1a4b8:	f001 f9e2 	bl	1b880 <flash_area_align>
   1a4bc:	fbba f3f0 	udiv	r3, sl, r0
   1a4c0:	fb03 a010 	mls	r0, r3, r0, sl
        if (rem_bytes) {
   1a4c4:	b108      	cbz	r0, 1a4ca <imgr_upload+0x196>
            action->write_bytes -= rem_bytes;
   1a4c6:	1a24      	subs	r4, r4, r0
   1a4c8:	9406      	str	r4, [sp, #24]
    action->proceed = true;
   1a4ca:	2301      	movs	r3, #1
   1a4cc:	f88d 3020 	strb.w	r3, [sp, #32]
    if (imgr_upload_cb != NULL) {
   1a4d0:	4b58      	ldr	r3, [pc, #352]	; (1a634 <imgr_upload+0x300>)
   1a4d2:	681b      	ldr	r3, [r3, #0]
   1a4d4:	2b00      	cmp	r3, #0
   1a4d6:	d144      	bne.n	1a562 <imgr_upload+0x22e>
    imgr_state.area_id = action.area_id;
   1a4d8:	9807      	ldr	r0, [sp, #28]
   1a4da:	f8df a150 	ldr.w	sl, [pc, #336]	; 1a62c <imgr_upload+0x2f8>
    rc = flash_area_open(imgr_state.area_id, &fa);
   1a4de:	a902      	add	r1, sp, #8
    imgr_state.area_id = action.area_id;
   1a4e0:	f8ca 0000 	str.w	r0, [sl]
    rc = flash_area_open(imgr_state.area_id, &fa);
   1a4e4:	b2c0      	uxtb	r0, r0
    imgr_state.size = action.size;
   1a4e6:	f8ca 9008 	str.w	r9, [sl, #8]
    rc = flash_area_open(imgr_state.area_id, &fa);
   1a4ea:	f001 f939 	bl	1b760 <flash_area_open>
    if (rc != 0) {
   1a4ee:	4604      	mov	r4, r0
   1a4f0:	2800      	cmp	r0, #0
   1a4f2:	d048      	beq.n	1a586 <imgr_upload+0x252>
        rc = MGMT_ERR_EUNKNOWN;
   1a4f4:	2401      	movs	r4, #1
   1a4f6:	e03c      	b.n	1a572 <imgr_upload+0x23e>
            rc = imgr_my_version(&cur_ver);
   1a4f8:	a80a      	add	r0, sp, #40	; 0x28
   1a4fa:	f7ff fe81 	bl	1a200 <imgr_my_version>
            if (rc != 0) {
   1a4fe:	bb20      	cbnz	r0, 1a54a <imgr_upload+0x216>
    if (a->iv_major < b->iv_major) {
   1a500:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
   1a504:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   1a508:	429a      	cmp	r2, r3
   1a50a:	d3ab      	bcc.n	1a464 <imgr_upload+0x130>
    } else if (a->iv_major > b->iv_major) {
   1a50c:	d80b      	bhi.n	1a526 <imgr_upload+0x1f2>
    if (a->iv_minor < b->iv_minor) {
   1a50e:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
   1a512:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
   1a516:	429a      	cmp	r2, r3
   1a518:	d3a4      	bcc.n	1a464 <imgr_upload+0x130>
    } else if (a->iv_minor > b->iv_minor) {
   1a51a:	d804      	bhi.n	1a526 <imgr_upload+0x1f2>
    if (a->iv_revision < b->iv_revision) {
   1a51c:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
   1a520:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
   1a522:	429a      	cmp	r2, r3
   1a524:	d39e      	bcc.n	1a464 <imgr_upload+0x130>
    if (rc != 0) {
   1a526:	2406      	movs	r4, #6
   1a528:	e010      	b.n	1a54c <imgr_upload+0x218>
        action->area_id = imgr_state.area_id;
   1a52a:	4840      	ldr	r0, [pc, #256]	; (1a62c <imgr_upload+0x2f8>)
   1a52c:	6801      	ldr	r1, [r0, #0]
   1a52e:	9107      	str	r1, [sp, #28]
        action->size = imgr_state.size;
   1a530:	6881      	ldr	r1, [r0, #8]
   1a532:	e9cd 1404 	strd	r1, r4, [sp, #16]
        if (req->off != imgr_state.off) {
   1a536:	6841      	ldr	r1, [r0, #4]
   1a538:	42a3      	cmp	r3, r4
   1a53a:	bf08      	it	eq
   1a53c:	428a      	cmpeq	r2, r1
   1a53e:	d0a4      	beq.n	1a48a <imgr_upload+0x156>
    return imgr_upload_good_rsp(cb);
   1a540:	4630      	mov	r0, r6
   1a542:	f7ff fda9 	bl	1a098 <imgr_upload_good_rsp>
   1a546:	4604      	mov	r4, r0
   1a548:	e002      	b.n	1a550 <imgr_upload+0x21c>
            return MGMT_ERR_EUNKNOWN;
   1a54a:	2401      	movs	r4, #1
        imgmgr_dfu_stopped();
   1a54c:	f7ff fed4 	bl	1a2f8 <imgmgr_dfu_stopped>
}
   1a550:	4620      	mov	r0, r4
   1a552:	f50d 7d6a 	add.w	sp, sp, #936	; 0x3a8
   1a556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return MGMT_ERR_ENOMEM;
   1a55a:	2402      	movs	r4, #2
   1a55c:	e7f6      	b.n	1a54c <imgr_upload+0x218>
            return MGMT_ERR_EINVAL;
   1a55e:	2403      	movs	r4, #3
        imgmgr_dfu_stopped();
   1a560:	e7f4      	b.n	1a54c <imgr_upload+0x218>
        rc = imgr_upload_cb(req.off, action.size, imgr_upload_arg);
   1a562:	4a35      	ldr	r2, [pc, #212]	; (1a638 <imgr_upload+0x304>)
   1a564:	6828      	ldr	r0, [r5, #0]
   1a566:	6812      	ldr	r2, [r2, #0]
   1a568:	4649      	mov	r1, r9
   1a56a:	4798      	blx	r3
        if (rc != 0) {
   1a56c:	4604      	mov	r4, r0
   1a56e:	2800      	cmp	r0, #0
   1a570:	d0b2      	beq.n	1a4d8 <imgr_upload+0x1a4>
    if (is_first) {
   1a572:	e9d5 2300 	ldrd	r2, r3, [r5]
   1a576:	4313      	orrs	r3, r2
   1a578:	d160      	bne.n	1a63c <imgr_upload+0x308>
        return imgmgr_log_upload_start(status);
   1a57a:	4620      	mov	r0, r4
   1a57c:	f000 f8a2 	bl	1a6c4 <imgmgr_log_upload_start>
    if (rc != 0) {
   1a580:	2c00      	cmp	r4, #0
   1a582:	d1e3      	bne.n	1a54c <imgr_upload+0x218>
   1a584:	e7dc      	b.n	1a540 <imgr_upload+0x20c>
    if (req.off == 0) {
   1a586:	e9d5 2300 	ldrd	r2, r3, [r5]
   1a58a:	4313      	orrs	r3, r2
   1a58c:	d01e      	beq.n	1a5cc <imgr_upload+0x298>
    if (req.data_len != 0) {
   1a58e:	692b      	ldr	r3, [r5, #16]
   1a590:	2b00      	cmp	r3, #0
   1a592:	d03d      	beq.n	1a610 <imgr_upload+0x2dc>
        rc = flash_area_write(fa, req.off, req.img_data, action.write_bytes);
   1a594:	9f06      	ldr	r7, [sp, #24]
   1a596:	6829      	ldr	r1, [r5, #0]
   1a598:	9802      	ldr	r0, [sp, #8]
   1a59a:	463b      	mov	r3, r7
   1a59c:	4642      	mov	r2, r8
   1a59e:	f001 f949 	bl	1b834 <flash_area_write>
        if (rc != 0) {
   1a5a2:	4604      	mov	r4, r0
   1a5a4:	2800      	cmp	r0, #0
   1a5a6:	d1a5      	bne.n	1a4f4 <imgr_upload+0x1c0>
            imgr_state.off += action.write_bytes;
   1a5a8:	f8df 8080 	ldr.w	r8, [pc, #128]	; 1a62c <imgr_upload+0x2f8>
   1a5ac:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1a5b0:	441f      	add	r7, r3
            if (imgr_state.off == imgr_state.size) {
   1a5b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
            imgr_state.off += action.write_bytes;
   1a5b6:	f8c8 7004 	str.w	r7, [r8, #4]
            if (imgr_state.off == imgr_state.size) {
   1a5ba:	429f      	cmp	r7, r3
   1a5bc:	d128      	bne.n	1a610 <imgr_upload+0x2dc>
                imgmgr_dfu_pending();
   1a5be:	f7ff feaf 	bl	1a320 <imgmgr_dfu_pending>
                imgr_state.area_id = -1;
   1a5c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a5c6:	f8c8 3000 	str.w	r3, [r8]
   1a5ca:	e7d2      	b.n	1a572 <imgr_upload+0x23e>
        imgr_state.off = 0;
   1a5cc:	f8ca 0004 	str.w	r0, [sl, #4]
        imgmgr_dfu_started();
   1a5d0:	f7ff fe9c 	bl	1a30c <imgmgr_dfu_started>
        imgr_state.data_sha_len = req.data_sha_len;
   1a5d4:	f8d5 9014 	ldr.w	r9, [r5, #20]
   1a5d8:	f88a 900c 	strb.w	r9, [sl, #12]
        memcpy(imgr_state.data_sha, req.data_sha, req.data_sha_len);
   1a5dc:	464a      	mov	r2, r9
   1a5de:	4639      	mov	r1, r7
   1a5e0:	f10a 000d 	add.w	r0, sl, #13
   1a5e4:	f7f5 fe44 	bl	10270 <memcpy>
        memset(&imgr_state.data_sha[req.data_sha_len], 0,
   1a5e8:	f109 000d 	add.w	r0, r9, #13
   1a5ec:	f1c9 0220 	rsb	r2, r9, #32
   1a5f0:	4621      	mov	r1, r4
   1a5f2:	4450      	add	r0, sl
   1a5f4:	f7f5 fe49 	bl	1028a <memset>
        if (action.erase) {
   1a5f8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1a5fc:	2b00      	cmp	r3, #0
   1a5fe:	d0c6      	beq.n	1a58e <imgr_upload+0x25a>
            rc = flash_area_erase(fa, 0, req.size);
   1a600:	68aa      	ldr	r2, [r5, #8]
   1a602:	9802      	ldr	r0, [sp, #8]
   1a604:	4621      	mov	r1, r4
   1a606:	f001 f927 	bl	1b858 <flash_area_erase>
            if (rc != 0) {
   1a60a:	2800      	cmp	r0, #0
   1a60c:	d0bf      	beq.n	1a58e <imgr_upload+0x25a>
   1a60e:	e771      	b.n	1a4f4 <imgr_upload+0x1c0>
            return MGMT_ERR_ENOMEM;
   1a610:	2400      	movs	r4, #0
   1a612:	e7ae      	b.n	1a572 <imgr_upload+0x23e>
   1a614:	000221a8 	.word	0x000221a8
   1a618:	0002113a 	.word	0x0002113a
   1a61c:	000221ad 	.word	0x000221ad
   1a620:	000221b1 	.word	0x000221b1
   1a624:	00020f17 	.word	0x00020f17
   1a628:	96f3b83d 	.word	0x96f3b83d
   1a62c:	20006fdc 	.word	0x20006fdc
   1a630:	20006fe9 	.word	0x20006fe9
   1a634:	20007010 	.word	0x20007010
   1a638:	2000700c 	.word	0x2000700c
    imgr_upload_log(req.off == 0, imgr_state.off == imgr_state.size, rc);
   1a63c:	4b0c      	ldr	r3, [pc, #48]	; (1a670 <imgr_upload+0x33c>)
    if (is_last || status != 0) {
   1a63e:	e9d3 2301 	ldrd	r2, r3, [r3, #4]
   1a642:	429a      	cmp	r2, r3
   1a644:	d002      	beq.n	1a64c <imgr_upload+0x318>
   1a646:	2c00      	cmp	r4, #0
   1a648:	f43f af7a 	beq.w	1a540 <imgr_upload+0x20c>
        rc = imgr_read_info(1, NULL, hash, NULL);
   1a64c:	ad0a      	add	r5, sp, #40	; 0x28
   1a64e:	2300      	movs	r3, #0
   1a650:	4619      	mov	r1, r3
   1a652:	462a      	mov	r2, r5
   1a654:	2001      	movs	r0, #1
   1a656:	f7ff fd5f 	bl	1a118 <imgr_read_info>
            hashp = hash;
   1a65a:	2800      	cmp	r0, #0
        return imgmgr_log_upload_done(status, hashp);
   1a65c:	bf0c      	ite	eq
   1a65e:	4629      	moveq	r1, r5
   1a660:	2100      	movne	r1, #0
   1a662:	4620      	mov	r0, r4
   1a664:	f000 f830 	bl	1a6c8 <imgmgr_log_upload_done>
   1a668:	e78a      	b.n	1a580 <imgr_upload+0x24c>
        return MGMT_ERR_EINVAL;
   1a66a:	464c      	mov	r4, r9
   1a66c:	e770      	b.n	1a550 <imgr_upload+0x21c>
   1a66e:	bf00      	nop
   1a670:	20006fdc 	.word	0x20006fdc

0001a674 <imgmgr_dfu_confirmed>:

void
imgmgr_dfu_confirmed(void)
{
    if (imgmgr_dfu_callbacks_fn && imgmgr_dfu_callbacks_fn->dfu_confirmed_cb) {
   1a674:	4b03      	ldr	r3, [pc, #12]	; (1a684 <imgmgr_dfu_confirmed+0x10>)
   1a676:	681b      	ldr	r3, [r3, #0]
   1a678:	b113      	cbz	r3, 1a680 <imgmgr_dfu_confirmed+0xc>
   1a67a:	68db      	ldr	r3, [r3, #12]
   1a67c:	b103      	cbz	r3, 1a680 <imgmgr_dfu_confirmed+0xc>
        imgmgr_dfu_callbacks_fn->dfu_confirmed_cb();
   1a67e:	4718      	bx	r3
    }
}
   1a680:	4770      	bx	lr
   1a682:	bf00      	nop
   1a684:	20006fd8 	.word	0x20006fd8

0001a688 <imgmgr_module_init>:
    imgmgr_dfu_callbacks_fn = cb_struct;
}

void
imgmgr_module_init(void)
{
   1a688:	b513      	push	{r0, r1, r4, lr}
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1a68a:	4b0b      	ldr	r3, [pc, #44]	; (1a6b8 <imgmgr_module_init+0x30>)
   1a68c:	781b      	ldrb	r3, [r3, #0]
   1a68e:	b923      	cbnz	r3, 1a69a <imgmgr_module_init+0x12>
   1a690:	461a      	mov	r2, r3
   1a692:	4619      	mov	r1, r3
   1a694:	4618      	mov	r0, r3
   1a696:	f7f2 f8b1 	bl	c7fc <__assert_func>

    rc = mgmt_group_register(&imgr_nmgr_group);
   1a69a:	4808      	ldr	r0, [pc, #32]	; (1a6bc <imgmgr_module_init+0x34>)
   1a69c:	f000 fa18 	bl	1aad0 <mgmt_group_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1a6a0:	b138      	cbz	r0, 1a6b2 <imgmgr_module_init+0x2a>
   1a6a2:	2300      	movs	r3, #0
   1a6a4:	4a06      	ldr	r2, [pc, #24]	; (1a6c0 <imgmgr_module_init+0x38>)
   1a6a6:	9300      	str	r3, [sp, #0]
   1a6a8:	6814      	ldr	r4, [r2, #0]
   1a6aa:	4619      	mov	r1, r3
   1a6ac:	461a      	mov	r2, r3
   1a6ae:	4618      	mov	r0, r3
   1a6b0:	47a0      	blx	r4
     */
    if (imgmgr_state_slot_in_use(1)) {
        log_fcb_slot1_lock();
    }
#endif
}
   1a6b2:	b002      	add	sp, #8
   1a6b4:	bd10      	pop	{r4, pc}
   1a6b6:	bf00      	nop
   1a6b8:	20006af4 	.word	0x20006af4
   1a6bc:	2000162c 	.word	0x2000162c
   1a6c0:	2000143c 	.word	0x2000143c

0001a6c4 <imgmgr_log_upload_start>:

int
imgmgr_log_upload_start(int status)
{
    return imgmgr_log_gen(IMGMGR_LOG_EV_UPSTART, status, NULL);
}
   1a6c4:	2000      	movs	r0, #0
   1a6c6:	4770      	bx	lr

0001a6c8 <imgmgr_log_upload_done>:

int
imgmgr_log_upload_done(int status, const uint8_t *hash)
{
    return imgmgr_log_gen(IMGMGR_LOG_EV_UPDONE, 0, hash);
}
   1a6c8:	2000      	movs	r0, #0
   1a6ca:	4770      	bx	lr

0001a6cc <imgmgr_log_pending>:
   1a6cc:	2000      	movs	r0, #0
   1a6ce:	4770      	bx	lr

0001a6d0 <imgmgr_log_confirm>:
   1a6d0:	2000      	movs	r0, #0
   1a6d2:	4770      	bx	lr

0001a6d4 <cbor_encode_text_stringz>:
   1a6d4:	b513      	push	{r0, r1, r4, lr}
   1a6d6:	4604      	mov	r4, r0
   1a6d8:	4608      	mov	r0, r1
   1a6da:	9101      	str	r1, [sp, #4]
   1a6dc:	f7ff fbc8 	bl	19e70 <strlen>
   1a6e0:	9901      	ldr	r1, [sp, #4]
   1a6e2:	4602      	mov	r2, r0
   1a6e4:	4620      	mov	r0, r4
   1a6e6:	b002      	add	sp, #8
   1a6e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a6ec:	f7fa bbe5 	b.w	14eba <cbor_encode_text_string>

0001a6f0 <imgmgr_state_flags>:
{
    split_mode_t split_mode;
    uint8_t flags;
    int swap_type;

    assert(query_slot == 0 || query_slot == 1);
   1a6f0:	2801      	cmp	r0, #1
{
   1a6f2:	b538      	push	{r3, r4, r5, lr}
   1a6f4:	4605      	mov	r5, r0
    assert(query_slot == 0 || query_slot == 1);
   1a6f6:	d905      	bls.n	1a704 <imgmgr_state_flags+0x14>
            flags |= IMGMGR_STATE_F_PENDING;
        }
        break;

    default:
        assert(0);
   1a6f8:	2300      	movs	r3, #0
   1a6fa:	461a      	mov	r2, r3
   1a6fc:	4619      	mov	r1, r3
   1a6fe:	4618      	mov	r0, r3
   1a700:	f7f2 f87c 	bl	c7fc <__assert_func>
    swap_type = boot_swap_type();
   1a704:	f002 fc30 	bl	1cf68 <boot_swap_type>
    switch (swap_type) {
   1a708:	3801      	subs	r0, #1
   1a70a:	2803      	cmp	r0, #3
   1a70c:	d81b      	bhi.n	1a746 <imgmgr_state_flags+0x56>
   1a70e:	e8df f000 	tbb	[pc, r0]
   1a712:	0502      	.short	0x0502
   1a714:	1714      	.short	0x1714
        if (query_slot == 0) {
   1a716:	b345      	cbz	r5, 1a76a <imgmgr_state_flags+0x7a>
    flags = 0;
   1a718:	2400      	movs	r4, #0
   1a71a:	e001      	b.n	1a720 <imgmgr_state_flags+0x30>
        if (query_slot == 0) {
   1a71c:	b33d      	cbz	r5, 1a76e <imgmgr_state_flags+0x7e>
            flags |= IMGMGR_STATE_F_PENDING;
   1a71e:	2401      	movs	r4, #1
    if (query_slot == 0 || split_app_active_get()) {
   1a720:	f7f9 ff38 	bl	14594 <split_app_active_get>
   1a724:	b108      	cbz	r0, 1a72a <imgmgr_state_flags+0x3a>
        flags |= IMGMGR_STATE_F_ACTIVE;
   1a726:	f044 0404 	orr.w	r4, r4, #4
    split_mode = split_mode_get();
   1a72a:	f7f9 ff2d 	bl	14588 <split_mode_get>
    switch (split_mode) {
   1a72e:	2803      	cmp	r0, #3
   1a730:	d8e2      	bhi.n	1a6f8 <imgmgr_state_flags+0x8>
   1a732:	e8df f000 	tbb	[pc, r0]
   1a736:	1710      	.short	0x1710
   1a738:	120c      	.short	0x120c
        if (query_slot == 0) {
   1a73a:	b1c5      	cbz	r5, 1a76e <imgmgr_state_flags+0x7e>
            flags |= IMGMGR_STATE_F_PENDING | IMGMGR_STATE_F_PERMANENT;
   1a73c:	2409      	movs	r4, #9
   1a73e:	e7ef      	b.n	1a720 <imgmgr_state_flags+0x30>
        if (query_slot == 0) {
   1a740:	b1bd      	cbz	r5, 1a772 <imgmgr_state_flags+0x82>
            flags |= IMGMGR_STATE_F_CONFIRMED;
   1a742:	2402      	movs	r4, #2
   1a744:	e7ec      	b.n	1a720 <imgmgr_state_flags+0x30>
    if (query_slot == 0 || split_app_active_get()) {
   1a746:	2d00      	cmp	r5, #0
   1a748:	d1e6      	bne.n	1a718 <imgmgr_state_flags+0x28>
    flags = 0;
   1a74a:	462c      	mov	r4, r5
   1a74c:	e7eb      	b.n	1a726 <imgmgr_state_flags+0x36>
        if (query_slot == 1) {
   1a74e:	2d01      	cmp	r5, #1
   1a750:	d101      	bne.n	1a756 <imgmgr_state_flags+0x66>
            flags |= IMGMGR_STATE_F_CONFIRMED;
   1a752:	f044 0402 	orr.w	r4, r4, #2
        break;
    }

    return flags;
}
   1a756:	4620      	mov	r0, r4
   1a758:	bd38      	pop	{r3, r4, r5, pc}
        if (query_slot == 0) {
   1a75a:	2d00      	cmp	r5, #0
   1a75c:	d1fb      	bne.n	1a756 <imgmgr_state_flags+0x66>
            flags |= IMGMGR_STATE_F_PENDING;
   1a75e:	f044 0401 	orr.w	r4, r4, #1
    return flags;
   1a762:	e7f8      	b.n	1a756 <imgmgr_state_flags+0x66>
        if (query_slot == 1) {
   1a764:	2d01      	cmp	r5, #1
   1a766:	d1f6      	bne.n	1a756 <imgmgr_state_flags+0x66>
   1a768:	e7f9      	b.n	1a75e <imgmgr_state_flags+0x6e>
            flags |= IMGMGR_STATE_F_ACTIVE;
   1a76a:	2406      	movs	r4, #6
   1a76c:	e7db      	b.n	1a726 <imgmgr_state_flags+0x36>
            flags |= IMGMGR_STATE_F_CONFIRMED;
   1a76e:	2402      	movs	r4, #2
   1a770:	e7d9      	b.n	1a726 <imgmgr_state_flags+0x36>
            flags |= IMGMGR_STATE_F_ACTIVE;
   1a772:	2404      	movs	r4, #4
    if (query_slot == 0 || split_app_active_get()) {
   1a774:	e7d7      	b.n	1a726 <imgmgr_state_flags+0x36>

0001a776 <imgmgr_state_slot_in_use>:
           (imgmgr_state_flags(1) & IMGMGR_STATE_F_PENDING);
}

int
imgmgr_state_slot_in_use(int slot)
{
   1a776:	b508      	push	{r3, lr}
    uint8_t state_flags;

    state_flags = imgmgr_state_flags(slot);
   1a778:	f7ff ffba 	bl	1a6f0 <imgmgr_state_flags>
    return (state_flags & IMGMGR_STATE_F_ACTIVE)       ||
           (state_flags & IMGMGR_STATE_F_CONFIRMED)    ||
   1a77c:	f010 0f06 	tst.w	r0, #6
   1a780:	bf0c      	ite	eq
   1a782:	f000 0001 	andeq.w	r0, r0, #1
   1a786:	2001      	movne	r0, #1
           (state_flags & IMGMGR_STATE_F_PENDING);
}
   1a788:	bd08      	pop	{r3, pc}

0001a78a <imgmgr_state_set_pending>:

int
imgmgr_state_set_pending(int slot, int permanent)
{
   1a78a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a78c:	b08b      	sub	sp, #44	; 0x2c
   1a78e:	460d      	mov	r5, r1
   1a790:	4604      	mov	r4, r0
    uint8_t hash[IMGMGR_HASH_LEN];
    const uint8_t *hashp;
    int split_app_active;
    int rc;

    state_flags = imgmgr_state_flags(slot);
   1a792:	f7ff ffad 	bl	1a6f0 <imgmgr_state_flags>
   1a796:	4607      	mov	r7, r0
    split_app_active = split_app_active_get();
   1a798:	f7f9 fefc 	bl	14594 <split_app_active_get>
    hashp = NULL;

    /* Unconfirmed slots are always runable.  A confirmed slot can only be
     * run if it is a loader in a split image setup.
     */
    if ((state_flags & IMGMGR_STATE_F_CONFIRMED) &&
   1a79c:	07ba      	lsls	r2, r7, #30
    split_app_active = split_app_active_get();
   1a79e:	4606      	mov	r6, r0
    if ((state_flags & IMGMGR_STATE_F_CONFIRMED) &&
   1a7a0:	d501      	bpl.n	1a7a6 <imgmgr_state_set_pending+0x1c>
   1a7a2:	bb24      	cbnz	r4, 1a7ee <imgmgr_state_set_pending+0x64>
        (slot != 0 || !split_app_active)) {
   1a7a4:	b318      	cbz	r0, 1a7ee <imgmgr_state_set_pending+0x64>

        rc = MGMT_ERR_EBADSTATE;
        goto done;
    }

    rc = imgr_read_info(slot, NULL, hash, &image_flags);
   1a7a6:	ab01      	add	r3, sp, #4
   1a7a8:	aa02      	add	r2, sp, #8
   1a7aa:	2100      	movs	r1, #0
   1a7ac:	4620      	mov	r0, r4
   1a7ae:	f7ff fcb3 	bl	1a118 <imgr_read_info>
    if (rc != 0) {
   1a7b2:	b9f8      	cbnz	r0, 1a7f4 <imgmgr_state_set_pending+0x6a>
        rc = MGMT_ERR_EUNKNOWN;
        goto done;
    }
    hashp = hash;

    if (!(image_flags & IMAGE_F_NON_BOOTABLE)) {
   1a7b4:	9b01      	ldr	r3, [sp, #4]
   1a7b6:	06db      	lsls	r3, r3, #27
   1a7b8:	d414      	bmi.n	1a7e4 <imgmgr_state_set_pending+0x5a>
        /* Unified image or loader. */
        if (!split_app_active) {
   1a7ba:	b96e      	cbnz	r6, 1a7d8 <imgmgr_state_set_pending+0x4e>
            /* No change in split status. */
            rc = boot_set_pending(permanent);
   1a7bc:	4628      	mov	r0, r5
   1a7be:	f002 fc1d 	bl	1cffc <boot_set_pending>
        if (permanent) {
            rc = split_write_split(SPLIT_MODE_APP);
        } else {
            rc = split_write_split(SPLIT_MODE_TEST_APP);
        }
        if (rc != 0) {
   1a7c2:	1e04      	subs	r4, r0, #0
   1a7c4:	bf18      	it	ne
   1a7c6:	2401      	movne	r4, #1
    hashp = hash;
   1a7c8:	a902      	add	r1, sp, #8
        }
    }

done:
    if (permanent) {
        imgmgr_log_confirm(rc, hashp);
   1a7ca:	4620      	mov	r0, r4
    if (permanent) {
   1a7cc:	b1a5      	cbz	r5, 1a7f8 <imgmgr_state_set_pending+0x6e>
        imgmgr_log_confirm(rc, hashp);
   1a7ce:	f7ff ff7f 	bl	1a6d0 <imgmgr_log_confirm>
    } else {
        imgmgr_log_pending(rc, hashp);
    }
    return rc;
}
   1a7d2:	4620      	mov	r0, r4
   1a7d4:	b00b      	add	sp, #44	; 0x2c
   1a7d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (permanent) {
   1a7d8:	b115      	cbz	r5, 1a7e0 <imgmgr_state_set_pending+0x56>
            rc = split_write_split(SPLIT_MODE_TEST_APP);
   1a7da:	f7f9 ff43 	bl	14664 <split_write_split>
   1a7de:	e7f0      	b.n	1a7c2 <imgmgr_state_set_pending+0x38>
                rc = split_write_split(SPLIT_MODE_TEST_LOADER);
   1a7e0:	2003      	movs	r0, #3
   1a7e2:	e7fa      	b.n	1a7da <imgmgr_state_set_pending+0x50>
        if (permanent) {
   1a7e4:	b10d      	cbz	r5, 1a7ea <imgmgr_state_set_pending+0x60>
            rc = split_write_split(SPLIT_MODE_APP);
   1a7e6:	2002      	movs	r0, #2
   1a7e8:	e7f7      	b.n	1a7da <imgmgr_state_set_pending+0x50>
            rc = split_write_split(SPLIT_MODE_TEST_APP);
   1a7ea:	2001      	movs	r0, #1
   1a7ec:	e7f5      	b.n	1a7da <imgmgr_state_set_pending+0x50>
        rc = MGMT_ERR_EBADSTATE;
   1a7ee:	2406      	movs	r4, #6
    hashp = NULL;
   1a7f0:	2100      	movs	r1, #0
   1a7f2:	e7ea      	b.n	1a7ca <imgmgr_state_set_pending+0x40>
        rc = MGMT_ERR_EUNKNOWN;
   1a7f4:	2401      	movs	r4, #1
   1a7f6:	e7fb      	b.n	1a7f0 <imgmgr_state_set_pending+0x66>
        imgmgr_log_pending(rc, hashp);
   1a7f8:	f7ff ff68 	bl	1a6cc <imgmgr_log_pending>
    return rc;
   1a7fc:	e7e9      	b.n	1a7d2 <imgmgr_state_set_pending+0x48>

0001a7fe <imgmgr_state_confirm>:

int
imgmgr_state_confirm(void)
{
   1a7fe:	b510      	push	{r4, lr}
    return (imgmgr_state_flags(0) & IMGMGR_STATE_F_PENDING) ||
   1a800:	2000      	movs	r0, #0
   1a802:	f7ff ff75 	bl	1a6f0 <imgmgr_state_flags>
   1a806:	07c2      	lsls	r2, r0, #31
   1a808:	d506      	bpl.n	1a818 <imgmgr_state_confirm+0x1a>
    int rc;

    /* Confirm disallowed if a test is pending. */
    if (imgmgr_state_any_pending()) {
        rc = MGMT_ERR_EBADSTATE;
   1a80a:	2406      	movs	r4, #6
    }

    imgmgr_dfu_confirmed();

done:
    imgmgr_log_confirm(rc, NULL);
   1a80c:	2100      	movs	r1, #0
   1a80e:	4620      	mov	r0, r4
   1a810:	f7ff ff5e 	bl	1a6d0 <imgmgr_log_confirm>
    return rc;
}
   1a814:	4620      	mov	r0, r4
   1a816:	bd10      	pop	{r4, pc}
           (imgmgr_state_flags(1) & IMGMGR_STATE_F_PENDING);
   1a818:	2001      	movs	r0, #1
   1a81a:	f7ff ff69 	bl	1a6f0 <imgmgr_state_flags>
    if (imgmgr_state_any_pending()) {
   1a81e:	07c3      	lsls	r3, r0, #31
   1a820:	d4f3      	bmi.n	1a80a <imgmgr_state_confirm+0xc>
    rc = boot_set_confirmed();
   1a822:	f002 fc2c 	bl	1d07e <boot_set_confirmed>
    if (rc != 0) {
   1a826:	4604      	mov	r4, r0
   1a828:	b108      	cbz	r0, 1a82e <imgmgr_state_confirm+0x30>
        rc = MGMT_ERR_EUNKNOWN;
   1a82a:	2401      	movs	r4, #1
   1a82c:	e7ee      	b.n	1a80c <imgmgr_state_confirm+0xe>
    if (split_app_active_get()) {
   1a82e:	f7f9 feb1 	bl	14594 <split_app_active_get>
   1a832:	b100      	cbz	r0, 1a836 <imgmgr_state_confirm+0x38>
        rc = split_write_split(SPLIT_MODE_APP);
   1a834:	2002      	movs	r0, #2
        rc = split_write_split(SPLIT_MODE_LOADER);
   1a836:	f7f9 ff15 	bl	14664 <split_write_split>
        if (rc != 0) {
   1a83a:	2800      	cmp	r0, #0
   1a83c:	d1f5      	bne.n	1a82a <imgmgr_state_confirm+0x2c>
    imgmgr_dfu_confirmed();
   1a83e:	f7ff ff19 	bl	1a674 <imgmgr_dfu_confirmed>
   1a842:	e7e3      	b.n	1a80c <imgmgr_state_confirm+0xe>

0001a844 <imgmgr_state_read>:

int
imgmgr_state_read(struct mgmt_cbuf *cb)
{
   1a844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    CborEncoder images;
    CborEncoder image;

    any_non_bootable = 0;

    g_err |= cbor_encode_text_stringz(&cb->encoder, "images");
   1a848:	f100 060c 	add.w	r6, r0, #12
{
   1a84c:	b09d      	sub	sp, #116	; 0x74
    g_err |= cbor_encode_text_stringz(&cb->encoder, "images");
   1a84e:	495c      	ldr	r1, [pc, #368]	; (1a9c0 <imgmgr_state_read+0x17c>)

        state_flags = imgmgr_state_flags(i);

        g_err |= cbor_encoder_create_map(&images, &image,
                                         CborIndefiniteLength);
        g_err |= cbor_encode_text_stringz(&image, "slot");
   1a850:	f8df 9188 	ldr.w	r9, [pc, #392]	; 1a9dc <imgmgr_state_read+0x198>
        g_err |= cbor_encode_int(&image, i);

        g_err |= cbor_encode_text_stringz(&image, "version");
   1a854:	f8df a188 	ldr.w	sl, [pc, #392]	; 1a9e0 <imgmgr_state_read+0x19c>
        imgr_ver_str(&ver, vers_str);
        g_err |= cbor_encode_text_stringz(&image, vers_str);

        g_err |= cbor_encode_text_stringz(&image, "hash");
   1a858:	f8df b188 	ldr.w	fp, [pc, #392]	; 1a9e4 <imgmgr_state_read+0x1a0>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "images");
   1a85c:	4630      	mov	r0, r6
   1a85e:	f7ff ff39 	bl	1a6d4 <cbor_encode_text_stringz>
    g_err |= cbor_encoder_create_array(&cb->encoder, &images,
   1a862:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    g_err |= cbor_encode_text_stringz(&cb->encoder, "images");
   1a866:	4604      	mov	r4, r0
    g_err |= cbor_encoder_create_array(&cb->encoder, &images,
   1a868:	a905      	add	r1, sp, #20
   1a86a:	4630      	mov	r0, r6
   1a86c:	f7fa fb37 	bl	14ede <cbor_encoder_create_array>
   1a870:	f04f 0800 	mov.w	r8, #0
   1a874:	4304      	orrs	r4, r0
    any_non_bootable = 0;
   1a876:	4647      	mov	r7, r8
        rc = imgr_read_info(i, &ver, hash, &flags);
   1a878:	ab02      	add	r3, sp, #8
   1a87a:	aa14      	add	r2, sp, #80	; 0x50
   1a87c:	a903      	add	r1, sp, #12
   1a87e:	4640      	mov	r0, r8
   1a880:	f7ff fc4a 	bl	1a118 <imgr_read_info>
        if (rc != 0) {
   1a884:	9001      	str	r0, [sp, #4]
   1a886:	2800      	cmp	r0, #0
   1a888:	d179      	bne.n	1a97e <imgmgr_state_read+0x13a>
            any_non_bootable = 1;
   1a88a:	9a02      	ldr	r2, [sp, #8]
        state_flags = imgmgr_state_flags(i);
   1a88c:	4640      	mov	r0, r8
            any_non_bootable = 1;
   1a88e:	f012 0f10 	tst.w	r2, #16
   1a892:	bf18      	it	ne
   1a894:	2701      	movne	r7, #1
        state_flags = imgmgr_state_flags(i);
   1a896:	f7ff ff2b 	bl	1a6f0 <imgmgr_state_flags>
        g_err |= cbor_encoder_create_map(&images, &image,
   1a89a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
        state_flags = imgmgr_state_flags(i);
   1a89e:	4605      	mov	r5, r0
        g_err |= cbor_encoder_create_map(&images, &image,
   1a8a0:	a909      	add	r1, sp, #36	; 0x24
   1a8a2:	a805      	add	r0, sp, #20
   1a8a4:	f7fa fb1e 	bl	14ee4 <cbor_encoder_create_map>
        g_err |= cbor_encode_text_stringz(&image, "slot");
   1a8a8:	4649      	mov	r1, r9
        g_err |= cbor_encoder_create_map(&images, &image,
   1a8aa:	9000      	str	r0, [sp, #0]
        g_err |= cbor_encode_text_stringz(&image, "slot");
   1a8ac:	a809      	add	r0, sp, #36	; 0x24
   1a8ae:	f7ff ff11 	bl	1a6d4 <cbor_encode_text_stringz>
   1a8b2:	9a00      	ldr	r2, [sp, #0]
        g_err |= cbor_encode_int(&image, i);
   1a8b4:	9b01      	ldr	r3, [sp, #4]
        g_err |= cbor_encode_text_stringz(&image, "slot");
   1a8b6:	4310      	orrs	r0, r2
   1a8b8:	4304      	orrs	r4, r0
        g_err |= cbor_encode_int(&image, i);
   1a8ba:	4642      	mov	r2, r8
   1a8bc:	a809      	add	r0, sp, #36	; 0x24
   1a8be:	f7fa facb 	bl	14e58 <cbor_encode_int>
        g_err |= cbor_encode_text_stringz(&image, "version");
   1a8c2:	4651      	mov	r1, sl
        g_err |= cbor_encode_int(&image, i);
   1a8c4:	4304      	orrs	r4, r0
        g_err |= cbor_encode_text_stringz(&image, "version");
   1a8c6:	a809      	add	r0, sp, #36	; 0x24
   1a8c8:	f7ff ff04 	bl	1a6d4 <cbor_encode_text_stringz>
        imgr_ver_str(&ver, vers_str);
   1a8cc:	a90d      	add	r1, sp, #52	; 0x34
        g_err |= cbor_encode_text_stringz(&image, "version");
   1a8ce:	4304      	orrs	r4, r0
        imgr_ver_str(&ver, vers_str);
   1a8d0:	a803      	add	r0, sp, #12
   1a8d2:	f000 f8cf 	bl	1aa74 <imgr_ver_str>
        g_err |= cbor_encode_text_stringz(&image, vers_str);
   1a8d6:	a90d      	add	r1, sp, #52	; 0x34
   1a8d8:	a809      	add	r0, sp, #36	; 0x24
   1a8da:	f7ff fefb 	bl	1a6d4 <cbor_encode_text_stringz>
        g_err |= cbor_encode_text_stringz(&image, "hash");
   1a8de:	4659      	mov	r1, fp
        g_err |= cbor_encode_text_stringz(&image, vers_str);
   1a8e0:	4304      	orrs	r4, r0
        g_err |= cbor_encode_text_stringz(&image, "hash");
   1a8e2:	a809      	add	r0, sp, #36	; 0x24
   1a8e4:	f7ff fef6 	bl	1a6d4 <cbor_encode_text_stringz>
        g_err |= cbor_encode_byte_string(&image, hash, IMGMGR_HASH_LEN);
   1a8e8:	2220      	movs	r2, #32
        g_err |= cbor_encode_text_stringz(&image, "hash");
   1a8ea:	4304      	orrs	r4, r0
        g_err |= cbor_encode_byte_string(&image, hash, IMGMGR_HASH_LEN);
   1a8ec:	a914      	add	r1, sp, #80	; 0x50
   1a8ee:	a809      	add	r0, sp, #36	; 0x24
   1a8f0:	f7fa fad1 	bl	14e96 <cbor_encode_byte_string>

        g_err |= cbor_encode_text_stringz(&image, "bootable");
   1a8f4:	4933      	ldr	r1, [pc, #204]	; (1a9c4 <imgmgr_state_read+0x180>)
        g_err |= cbor_encode_byte_string(&image, hash, IMGMGR_HASH_LEN);
   1a8f6:	4304      	orrs	r4, r0
        g_err |= cbor_encode_text_stringz(&image, "bootable");
   1a8f8:	a809      	add	r0, sp, #36	; 0x24
   1a8fa:	f7ff feeb 	bl	1a6d4 <cbor_encode_text_stringz>
        g_err |= cbor_encode_boolean(&image, !(flags & IMAGE_F_NON_BOOTABLE));
   1a8fe:	9902      	ldr	r1, [sp, #8]
   1a900:	f081 0110 	eor.w	r1, r1, #16
   1a904:	f3c1 1100 	ubfx	r1, r1, #4, #1
        g_err |= cbor_encode_text_stringz(&image, "bootable");
   1a908:	4304      	orrs	r4, r0
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   1a90a:	3114      	adds	r1, #20
   1a90c:	a809      	add	r0, sp, #36	; 0x24
   1a90e:	f7fa fab1 	bl	14e74 <cbor_encode_simple_value>

        g_err |= cbor_encode_text_stringz(&image, "pending");
   1a912:	492d      	ldr	r1, [pc, #180]	; (1a9c8 <imgmgr_state_read+0x184>)
        g_err |= cbor_encode_boolean(&image, !(flags & IMAGE_F_NON_BOOTABLE));
   1a914:	4304      	orrs	r4, r0
        g_err |= cbor_encode_text_stringz(&image, "pending");
   1a916:	a809      	add	r0, sp, #36	; 0x24
   1a918:	f7ff fedc 	bl	1a6d4 <cbor_encode_text_stringz>
   1a91c:	f005 0101 	and.w	r1, r5, #1
   1a920:	4304      	orrs	r4, r0
   1a922:	3114      	adds	r1, #20
   1a924:	a809      	add	r0, sp, #36	; 0x24
   1a926:	f7fa faa5 	bl	14e74 <cbor_encode_simple_value>
        g_err |= cbor_encode_boolean(&image,
                                     state_flags & IMGMGR_STATE_F_PENDING);

        g_err |= cbor_encode_text_stringz(&image, "confirmed");
   1a92a:	4928      	ldr	r1, [pc, #160]	; (1a9cc <imgmgr_state_read+0x188>)
        g_err |= cbor_encode_boolean(&image,
   1a92c:	4304      	orrs	r4, r0
        g_err |= cbor_encode_text_stringz(&image, "confirmed");
   1a92e:	a809      	add	r0, sp, #36	; 0x24
   1a930:	f7ff fed0 	bl	1a6d4 <cbor_encode_text_stringz>
        g_err |= cbor_encode_boolean(&image,
   1a934:	f3c5 0140 	ubfx	r1, r5, #1, #1
        g_err |= cbor_encode_text_stringz(&image, "confirmed");
   1a938:	4304      	orrs	r4, r0
   1a93a:	3114      	adds	r1, #20
   1a93c:	a809      	add	r0, sp, #36	; 0x24
   1a93e:	f7fa fa99 	bl	14e74 <cbor_encode_simple_value>
                                     state_flags & IMGMGR_STATE_F_CONFIRMED);

        g_err |= cbor_encode_text_stringz(&image, "active");
   1a942:	4923      	ldr	r1, [pc, #140]	; (1a9d0 <imgmgr_state_read+0x18c>)
        g_err |= cbor_encode_boolean(&image,
   1a944:	4304      	orrs	r4, r0
        g_err |= cbor_encode_text_stringz(&image, "active");
   1a946:	a809      	add	r0, sp, #36	; 0x24
   1a948:	f7ff fec4 	bl	1a6d4 <cbor_encode_text_stringz>
        g_err |= cbor_encode_boolean(&image,
   1a94c:	f3c5 0180 	ubfx	r1, r5, #2, #1
        g_err |= cbor_encode_text_stringz(&image, "active");
   1a950:	4304      	orrs	r4, r0
   1a952:	3114      	adds	r1, #20
   1a954:	a809      	add	r0, sp, #36	; 0x24
   1a956:	f7fa fa8d 	bl	14e74 <cbor_encode_simple_value>
                                     state_flags & IMGMGR_STATE_F_ACTIVE);

        g_err |= cbor_encode_text_stringz(&image, "permanent");
   1a95a:	491e      	ldr	r1, [pc, #120]	; (1a9d4 <imgmgr_state_read+0x190>)
        g_err |= cbor_encode_boolean(&image,
   1a95c:	4304      	orrs	r4, r0
        g_err |= cbor_encode_text_stringz(&image, "permanent");
   1a95e:	a809      	add	r0, sp, #36	; 0x24
   1a960:	f7ff feb8 	bl	1a6d4 <cbor_encode_text_stringz>
        g_err |= cbor_encode_boolean(&image,
   1a964:	f3c5 01c0 	ubfx	r1, r5, #3, #1
        g_err |= cbor_encode_text_stringz(&image, "permanent");
   1a968:	4304      	orrs	r4, r0
   1a96a:	3114      	adds	r1, #20
   1a96c:	a809      	add	r0, sp, #36	; 0x24
   1a96e:	f7fa fa81 	bl	14e74 <cbor_encode_simple_value>
                                     state_flags & IMGMGR_STATE_F_PERMANENT);

        g_err |= cbor_encoder_close_container(&images, &image);
   1a972:	a909      	add	r1, sp, #36	; 0x24
        g_err |= cbor_encode_boolean(&image,
   1a974:	4304      	orrs	r4, r0
        g_err |= cbor_encoder_close_container(&images, &image);
   1a976:	a805      	add	r0, sp, #20
   1a978:	f7fa fac5 	bl	14f06 <cbor_encoder_close_container>
   1a97c:	4304      	orrs	r4, r0
    for (i = 0; i < 2; i++) {
   1a97e:	f1b8 0f00 	cmp.w	r8, #0
   1a982:	d01a      	beq.n	1a9ba <imgmgr_state_read+0x176>
    }

    g_err |= cbor_encoder_close_container(&cb->encoder, &images);
   1a984:	a905      	add	r1, sp, #20
   1a986:	4630      	mov	r0, r6
   1a988:	f7fa fabd 	bl	14f06 <cbor_encoder_close_container>
   1a98c:	4304      	orrs	r4, r0

    if (any_non_bootable) {
   1a98e:	b117      	cbz	r7, 1a996 <imgmgr_state_read+0x152>
        split_status = split_check_status();
   1a990:	f7f9 fde6 	bl	14560 <split_check_status>
   1a994:	4607      	mov	r7, r0
    } else {
        split_status = SPLIT_STATUS_INVALID;
    }

    g_err |= cbor_encode_text_stringz(&cb->encoder, "splitStatus");
   1a996:	4910      	ldr	r1, [pc, #64]	; (1a9d8 <imgmgr_state_read+0x194>)
   1a998:	4630      	mov	r0, r6
   1a99a:	f7ff fe9b 	bl	1a6d4 <cbor_encode_text_stringz>
    g_err |= cbor_encode_int(&cb->encoder, split_status);
   1a99e:	17fb      	asrs	r3, r7, #31
    g_err |= cbor_encode_text_stringz(&cb->encoder, "splitStatus");
   1a9a0:	4304      	orrs	r4, r0
    g_err |= cbor_encode_int(&cb->encoder, split_status);
   1a9a2:	463a      	mov	r2, r7
   1a9a4:	4630      	mov	r0, r6
   1a9a6:	f7fa fa57 	bl	14e58 <cbor_encode_int>

    if (g_err) {
        return MGMT_ERR_ENOMEM;
   1a9aa:	ea54 0300 	orrs.w	r3, r4, r0
    }
    return 0;
}
   1a9ae:	bf14      	ite	ne
   1a9b0:	2002      	movne	r0, #2
   1a9b2:	2000      	moveq	r0, #0
   1a9b4:	b01d      	add	sp, #116	; 0x74
   1a9b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a9ba:	f04f 0801 	mov.w	r8, #1
   1a9be:	e75b      	b.n	1a878 <imgmgr_state_read+0x34>
   1a9c0:	000221f4 	.word	0x000221f4
   1a9c4:	0002220d 	.word	0x0002220d
   1a9c8:	00022216 	.word	0x00022216
   1a9cc:	0002221e 	.word	0x0002221e
   1a9d0:	00022228 	.word	0x00022228
   1a9d4:	0002222f 	.word	0x0002222f
   1a9d8:	00022239 	.word	0x00022239
   1a9dc:	000221fb 	.word	0x000221fb
   1a9e0:	00022200 	.word	0x00022200
   1a9e4:	00022208 	.word	0x00022208

0001a9e8 <imgmgr_state_write>:

int
imgmgr_state_write(struct mgmt_cbuf *cb)
{
   1a9e8:	b530      	push	{r4, r5, lr}
   1a9ea:	b0af      	sub	sp, #188	; 0xbc
    uint8_t hash[IMGMGR_HASH_LEN];
    size_t hash_len = 0;
   1a9ec:	2100      	movs	r1, #0
{
   1a9ee:	4604      	mov	r4, r0
    bool confirm;
    int slot;
    int rc;

    const struct cbor_attr_t write_attr[] = {
   1a9f0:	228c      	movs	r2, #140	; 0x8c
   1a9f2:	a80b      	add	r0, sp, #44	; 0x2c
    size_t hash_len = 0;
   1a9f4:	9101      	str	r1, [sp, #4]
    const struct cbor_attr_t write_attr[] = {
   1a9f6:	f7f5 fc48 	bl	1028a <memset>
   1a9fa:	4b1c      	ldr	r3, [pc, #112]	; (1aa6c <imgmgr_state_write+0x84>)
   1a9fc:	930a      	str	r3, [sp, #40]	; 0x28
   1a9fe:	2303      	movs	r3, #3
   1aa00:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   1aa04:	ab01      	add	r3, sp, #4
   1aa06:	930d      	str	r3, [sp, #52]	; 0x34
   1aa08:	2320      	movs	r3, #32
   1aa0a:	9314      	str	r3, [sp, #80]	; 0x50
   1aa0c:	4b18      	ldr	r3, [pc, #96]	; (1aa70 <imgmgr_state_write+0x88>)
   1aa0e:	9316      	str	r3, [sp, #88]	; 0x58
   1aa10:	2305      	movs	r3, #5
   1aa12:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
            .dflt.boolean = false,
        },
        [2] = { 0 },
    };

    rc = cbor_read_object(&cb->it, write_attr);
   1aa16:	a90a      	add	r1, sp, #40	; 0x28
    const struct cbor_attr_t write_attr[] = {
   1aa18:	f10d 0303 	add.w	r3, sp, #3
   1aa1c:	ad02      	add	r5, sp, #8
    rc = cbor_read_object(&cb->it, write_attr);
   1aa1e:	f104 001c 	add.w	r0, r4, #28
    const struct cbor_attr_t write_attr[] = {
   1aa22:	950c      	str	r5, [sp, #48]	; 0x30
   1aa24:	9318      	str	r3, [sp, #96]	; 0x60
    rc = cbor_read_object(&cb->it, write_attr);
   1aa26:	f7fa f919 	bl	14c5c <cbor_read_object>
    if (rc != 0) {
   1aa2a:	4601      	mov	r1, r0
   1aa2c:	b110      	cbz	r0, 1aa34 <imgmgr_state_write+0x4c>
        return MGMT_ERR_EINVAL;
   1aa2e:	2003      	movs	r0, #3
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1aa30:	b02f      	add	sp, #188	; 0xbc
   1aa32:	bd30      	pop	{r4, r5, pc}
    if (hash_len == 0) {
   1aa34:	9b01      	ldr	r3, [sp, #4]
   1aa36:	b95b      	cbnz	r3, 1aa50 <imgmgr_state_write+0x68>
        if (confirm) {
   1aa38:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1aa3c:	2b00      	cmp	r3, #0
   1aa3e:	d0f6      	beq.n	1aa2e <imgmgr_state_write+0x46>
        rc = imgmgr_state_confirm();
   1aa40:	f7ff fedd 	bl	1a7fe <imgmgr_state_confirm>
    if (rc != 0) {
   1aa44:	2800      	cmp	r0, #0
   1aa46:	d1f3      	bne.n	1aa30 <imgmgr_state_write+0x48>
    rc = imgmgr_state_read(cb);
   1aa48:	4620      	mov	r0, r4
   1aa4a:	f7ff fefb 	bl	1a844 <imgmgr_state_read>
    if (rc != 0) {
   1aa4e:	e7ef      	b.n	1aa30 <imgmgr_state_write+0x48>
        slot = imgr_find_by_hash(hash, NULL);
   1aa50:	4628      	mov	r0, r5
   1aa52:	f7ff fbdf 	bl	1a214 <imgr_find_by_hash>
        if (slot < 0) {
   1aa56:	2800      	cmp	r0, #0
   1aa58:	dbe9      	blt.n	1aa2e <imgmgr_state_write+0x46>
    if (slot == 0 && confirm) {
   1aa5a:	f89d 1003 	ldrb.w	r1, [sp, #3]
   1aa5e:	d101      	bne.n	1aa64 <imgmgr_state_write+0x7c>
   1aa60:	2900      	cmp	r1, #0
   1aa62:	d1ed      	bne.n	1aa40 <imgmgr_state_write+0x58>
        rc = imgmgr_state_set_pending(slot, confirm);
   1aa64:	f7ff fe91 	bl	1a78a <imgmgr_state_set_pending>
   1aa68:	e7ec      	b.n	1aa44 <imgmgr_state_write+0x5c>
   1aa6a:	bf00      	nop
   1aa6c:	00022208 	.word	0x00022208
   1aa70:	00022245 	.word	0x00022245

0001aa74 <imgr_ver_str>:
    return 0;
}

int
imgr_ver_str(struct image_version *ver, char *dst)
{
   1aa74:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1aa76:	4604      	mov	r4, r0
   1aa78:	4608      	mov	r0, r1
    if (ver->iv_build_num) {
   1aa7a:	6865      	ldr	r5, [r4, #4]
        return sprintf(dst, "%u.%u.%u.%lu",
   1aa7c:	7822      	ldrb	r2, [r4, #0]
   1aa7e:	7863      	ldrb	r3, [r4, #1]
   1aa80:	8861      	ldrh	r1, [r4, #2]
    if (ver->iv_build_num) {
   1aa82:	b135      	cbz	r5, 1aa92 <imgr_ver_str+0x1e>
        return sprintf(dst, "%u.%u.%u.%lu",
   1aa84:	e9cd 1500 	strd	r1, r5, [sp]
   1aa88:	4904      	ldr	r1, [pc, #16]	; (1aa9c <imgr_ver_str+0x28>)
   1aa8a:	f003 fcc9 	bl	1e420 <sprintf>
          (unsigned long)ver->iv_build_num);
    } else {
        return sprintf(dst, "%u.%u.%u",
          ver->iv_major, ver->iv_minor, ver->iv_revision);
    }
}
   1aa8e:	b003      	add	sp, #12
   1aa90:	bd30      	pop	{r4, r5, pc}
        return sprintf(dst, "%u.%u.%u",
   1aa92:	9100      	str	r1, [sp, #0]
   1aa94:	4902      	ldr	r1, [pc, #8]	; (1aaa0 <imgr_ver_str+0x2c>)
   1aa96:	f003 fcc3 	bl	1e420 <sprintf>
   1aa9a:	e7f8      	b.n	1aa8e <imgr_ver_str+0x1a>
   1aa9c:	0002224d 	.word	0x0002224d
   1aaa0:	0002225a 	.word	0x0002225a

0001aaa4 <mgmt_group_list_lock>:
static STAILQ_HEAD(, mgmt_group) mgmt_group_list =
    STAILQ_HEAD_INITIALIZER(mgmt_group_list);

static int
mgmt_group_list_lock(void)
{
   1aaa4:	b508      	push	{r3, lr}
    int rc;

    if (!os_started()) {
   1aaa6:	f7f1 ff65 	bl	c974 <os_started>
   1aaaa:	b120      	cbz	r0, 1aab6 <mgmt_group_list_lock+0x12>
        return (0);
    }

    rc = os_mutex_pend(&mgmt_group_lock, OS_WAIT_FOREVER);
   1aaac:	4802      	ldr	r0, [pc, #8]	; (1aab8 <mgmt_group_list_lock+0x14>)
   1aaae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1aab2:	f7f2 fbab 	bl	d20c <os_mutex_pend>
    }

    return (0);
err:
    return (rc);
}
   1aab6:	bd08      	pop	{r3, pc}
   1aab8:	20007014 	.word	0x20007014

0001aabc <mgmt_group_list_unlock>:

int
mgmt_group_list_unlock(void)
{
   1aabc:	b508      	push	{r3, lr}
    int rc;

    if (!os_started()) {
   1aabe:	f7f1 ff59 	bl	c974 <os_started>
   1aac2:	b110      	cbz	r0, 1aaca <mgmt_group_list_unlock+0xe>
        return (0);
    }

    rc = os_mutex_release(&mgmt_group_lock);
   1aac4:	4801      	ldr	r0, [pc, #4]	; (1aacc <mgmt_group_list_unlock+0x10>)
   1aac6:	f7f2 fb4f 	bl	d168 <os_mutex_release>
    }

    return (0);
err:
    return (rc);
}
   1aaca:	bd08      	pop	{r3, pc}
   1aacc:	20007014 	.word	0x20007014

0001aad0 <mgmt_group_register>:

int
mgmt_group_register(struct mgmt_group *group)
{
   1aad0:	b510      	push	{r4, lr}
   1aad2:	4604      	mov	r4, r0
    int rc;

    rc = mgmt_group_list_lock();
   1aad4:	f7ff ffe6 	bl	1aaa4 <mgmt_group_list_lock>
    if (rc != 0) {
   1aad8:	b948      	cbnz	r0, 1aaee <mgmt_group_register+0x1e>
        goto err;
    }

    STAILQ_INSERT_TAIL(&mgmt_group_list, group, mg_next);
   1aada:	4b05      	ldr	r3, [pc, #20]	; (1aaf0 <mgmt_group_register+0x20>)
   1aadc:	60a0      	str	r0, [r4, #8]
   1aade:	685a      	ldr	r2, [r3, #4]
   1aae0:	6014      	str	r4, [r2, #0]
   1aae2:	3408      	adds	r4, #8
   1aae4:	605c      	str	r4, [r3, #4]
    }

    return (0);
err:
    return (rc);
}
   1aae6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    rc = mgmt_group_list_unlock();
   1aaea:	f7ff bfe7 	b.w	1aabc <mgmt_group_list_unlock>
}
   1aaee:	bd10      	pop	{r4, pc}
   1aaf0:	20001638 	.word	0x20001638

0001aaf4 <mgmt_find_handler>:
    return (NULL);
}

const struct mgmt_handler *
mgmt_find_handler(uint16_t group_id, uint16_t handler_id)
{
   1aaf4:	b570      	push	{r4, r5, r6, lr}
   1aaf6:	4606      	mov	r6, r0
   1aaf8:	460d      	mov	r5, r1
    rc = mgmt_group_list_lock();
   1aafa:	f7ff ffd3 	bl	1aaa4 <mgmt_group_list_lock>
    if (rc != 0) {
   1aafe:	b108      	cbz	r0, 1ab04 <mgmt_find_handler+0x10>

    handler = &group->mg_handlers[handler_id];

    return (handler);
err:
    return (NULL);
   1ab00:	2000      	movs	r0, #0
}
   1ab02:	bd70      	pop	{r4, r5, r6, pc}
    STAILQ_FOREACH(group, &mgmt_group_list, mg_next) {
   1ab04:	4b0a      	ldr	r3, [pc, #40]	; (1ab30 <mgmt_find_handler+0x3c>)
   1ab06:	681c      	ldr	r4, [r3, #0]
   1ab08:	b964      	cbnz	r4, 1ab24 <mgmt_find_handler+0x30>
    rc = mgmt_group_list_unlock();
   1ab0a:	f7ff ffd7 	bl	1aabc <mgmt_group_list_unlock>
    if (rc != 0) {
   1ab0e:	2800      	cmp	r0, #0
   1ab10:	d1f6      	bne.n	1ab00 <mgmt_find_handler+0xc>
    if (!group) {
   1ab12:	2c00      	cmp	r4, #0
   1ab14:	d0f4      	beq.n	1ab00 <mgmt_find_handler+0xc>
    if (handler_id >= group->mg_handlers_count) {
   1ab16:	88a3      	ldrh	r3, [r4, #4]
   1ab18:	42ab      	cmp	r3, r5
   1ab1a:	d9f1      	bls.n	1ab00 <mgmt_find_handler+0xc>
    handler = &group->mg_handlers[handler_id];
   1ab1c:	6820      	ldr	r0, [r4, #0]
   1ab1e:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
    return (handler);
   1ab22:	e7ee      	b.n	1ab02 <mgmt_find_handler+0xe>
        if (group->mg_group_id == group_id) {
   1ab24:	88e3      	ldrh	r3, [r4, #6]
   1ab26:	42b3      	cmp	r3, r6
   1ab28:	d0ef      	beq.n	1ab0a <mgmt_find_handler+0x16>
    STAILQ_FOREACH(group, &mgmt_group_list, mg_next) {
   1ab2a:	68a4      	ldr	r4, [r4, #8]
   1ab2c:	e7ec      	b.n	1ab08 <mgmt_find_handler+0x14>
   1ab2e:	bf00      	nop
   1ab30:	20001638 	.word	0x20001638

0001ab34 <mgmt_cbuf_setoerr>:

int
mgmt_cbuf_setoerr(struct mgmt_cbuf *cb, int errcode)
{
   1ab34:	b570      	push	{r4, r5, r6, lr}
    int rc;

    rc = cbor_encode_text_stringz(&cb->encoder, "rc");
   1ab36:	f100 040c 	add.w	r4, r0, #12
{
   1ab3a:	460d      	mov	r5, r1
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1ab3c:	2202      	movs	r2, #2
   1ab3e:	4906      	ldr	r1, [pc, #24]	; (1ab58 <mgmt_cbuf_setoerr+0x24>)
   1ab40:	4620      	mov	r0, r4
   1ab42:	f7fa f9ba 	bl	14eba <cbor_encode_text_string>
    if (rc != 0) {
   1ab46:	b930      	cbnz	r0, 1ab56 <mgmt_cbuf_setoerr+0x22>
        return rc;
    }

    rc = cbor_encode_int(&cb->encoder, errcode);
   1ab48:	462a      	mov	r2, r5
   1ab4a:	17eb      	asrs	r3, r5, #31
   1ab4c:	4620      	mov	r0, r4
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1ab4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    rc = cbor_encode_int(&cb->encoder, errcode);
   1ab52:	f7fa b981 	b.w	14e58 <cbor_encode_int>
}
   1ab56:	bd70      	pop	{r4, r5, r6, pc}
   1ab58:	00020fea 	.word	0x00020fea

0001ab5c <nmgr_rsp_frag_alloc>:
/**
 * Allocates an mbuf to contain an outgoing response fragment.
 */
static struct os_mbuf *
nmgr_rsp_frag_alloc(uint16_t frag_size, void *arg)
{
   1ab5c:	b538      	push	{r3, r4, r5, lr}
   1ab5e:	460d      	mov	r5, r1
    /* We need to duplicate the user header from the source response, as that
     * is where transport-specific information is stored.
     */
    src_rsp = arg;

    frag = os_msys_get_pkthdr(frag_size, OS_MBUF_USRHDR_LEN(src_rsp));
   1ab60:	7949      	ldrb	r1, [r1, #5]
   1ab62:	3908      	subs	r1, #8
   1ab64:	b289      	uxth	r1, r1
   1ab66:	f7f2 faad 	bl	d0c4 <os_msys_get_pkthdr>
    if (frag != NULL) {
   1ab6a:	4604      	mov	r4, r0
   1ab6c:	b130      	cbz	r0, 1ab7c <nmgr_rsp_frag_alloc+0x20>
        /* Copy the user header from the response into the fragment mbuf. */
        memcpy(OS_MBUF_USRHDR(frag), OS_MBUF_USRHDR(src_rsp),
               OS_MBUF_USRHDR_LEN(src_rsp));
   1ab6e:	796a      	ldrb	r2, [r5, #5]
        memcpy(OS_MBUF_USRHDR(frag), OS_MBUF_USRHDR(src_rsp),
   1ab70:	f105 0118 	add.w	r1, r5, #24
   1ab74:	3a08      	subs	r2, #8
   1ab76:	3018      	adds	r0, #24
   1ab78:	f7f5 fb7a 	bl	10270 <memcpy>
    }

    return frag;
}
   1ab7c:	4620      	mov	r0, r4
   1ab7e:	bd38      	pop	{r3, r4, r5, pc}

0001ab80 <nmgr_init_rsp>:
{
   1ab80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ab82:	460d      	mov	r5, r1
    hdr = (struct nmgr_hdr *) os_mbuf_extend(m, sizeof(struct nmgr_hdr));
   1ab84:	2108      	movs	r1, #8
{
   1ab86:	4606      	mov	r6, r0
    hdr = (struct nmgr_hdr *) os_mbuf_extend(m, sizeof(struct nmgr_hdr));
   1ab88:	f7f3 fa2c 	bl	dfe4 <os_mbuf_extend>
    if (!hdr) {
   1ab8c:	4604      	mov	r4, r0
   1ab8e:	b320      	cbz	r0, 1abda <nmgr_init_rsp+0x5a>
    memcpy(hdr, src, sizeof(*hdr));
   1ab90:	682b      	ldr	r3, [r5, #0]
   1ab92:	6003      	str	r3, [r0, #0]
   1ab94:	686b      	ldr	r3, [r5, #4]
   1ab96:	6043      	str	r3, [r0, #4]
    hdr->nh_len = 0;
   1ab98:	2700      	movs	r7, #0
    hdr->nh_flags = 0;
   1ab9a:	7047      	strb	r7, [r0, #1]
    hdr->nh_len = 0;
   1ab9c:	8047      	strh	r7, [r0, #2]
    hdr->nh_op = (src->nh_op == NMGR_OP_READ) ? NMGR_OP_READ_RSP :
   1ab9e:	782b      	ldrb	r3, [r5, #0]
   1aba0:	f013 0f07 	tst.w	r3, #7
   1aba4:	7803      	ldrb	r3, [r0, #0]
   1aba6:	bf0c      	ite	eq
   1aba8:	2201      	moveq	r2, #1
   1abaa:	2203      	movne	r2, #3
   1abac:	f362 0302 	bfi	r3, r2, #0, #3
   1abb0:	7003      	strb	r3, [r0, #0]
    hdr->nh_group = src->nh_group;
   1abb2:	88ab      	ldrh	r3, [r5, #4]
   1abb4:	8083      	strh	r3, [r0, #4]
    hdr->nh_seq = src->nh_seq;
   1abb6:	79ab      	ldrb	r3, [r5, #6]
   1abb8:	7183      	strb	r3, [r0, #6]
    hdr->nh_id = src->nh_id;
   1abba:	79eb      	ldrb	r3, [r5, #7]
    cbor_mbuf_writer_init(&nmgr_task_cbuf.writer, m);
   1abbc:	4d08      	ldr	r5, [pc, #32]	; (1abe0 <nmgr_init_rsp+0x60>)
    hdr->nh_id = src->nh_id;
   1abbe:	71c3      	strb	r3, [r0, #7]
    cbor_mbuf_writer_init(&nmgr_task_cbuf.writer, m);
   1abc0:	4631      	mov	r1, r6
   1abc2:	f105 002c 	add.w	r0, r5, #44	; 0x2c
   1abc6:	f7fa f8d5 	bl	14d74 <cbor_mbuf_writer_init>
    cbor_encoder_init(&nmgr_task_cbuf.n_b.encoder, &nmgr_task_cbuf.writer.enc, 0);
   1abca:	463a      	mov	r2, r7
   1abcc:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   1abd0:	f105 000c 	add.w	r0, r5, #12
   1abd4:	f7fa f933 	bl	14e3e <cbor_encoder_init>
    nmgr_task_cbuf.n_out_m = m;
   1abd8:	65ee      	str	r6, [r5, #92]	; 0x5c
}
   1abda:	4620      	mov	r0, r4
   1abdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1abde:	bf00      	nop
   1abe0:	20007024 	.word	0x20007024

0001abe4 <nmgr_event_data_in>:
    }
}

static void
nmgr_event_data_in(struct os_event *ev)
{
   1abe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    rc = cbor_encoder_create_map(&nmgr_task_cbuf.n_b.encoder, &map,
   1abe8:	4e69      	ldr	r6, [pc, #420]	; (1ad90 <nmgr_event_data_in+0x1ac>)
    nmgr_process(ev->ev_arg);
   1abea:	6887      	ldr	r7, [r0, #8]
{
   1abec:	b08c      	sub	sp, #48	; 0x30
    rc = cbor_encoder_create_map(&nmgr_task_cbuf.n_b.encoder, &map,
   1abee:	f106 090c 	add.w	r9, r6, #12
        m = os_mqueue_get(&nt->nt_imq);
   1abf2:	4638      	mov	r0, r7
   1abf4:	f7f3 f84b 	bl	dc8e <os_mqueue_get>
        if (!m) {
   1abf8:	4605      	mov	r5, r0
   1abfa:	2800      	cmp	r0, #0
   1abfc:	f000 80c5 	beq.w	1ad8a <nmgr_event_data_in+0x1a6>
    rsp = os_msys_get_pkthdr(512, OS_MBUF_USRHDR_LEN(req));
   1ac00:	7941      	ldrb	r1, [r0, #5]
   1ac02:	3908      	subs	r1, #8
   1ac04:	b289      	uxth	r1, r1
   1ac06:	f44f 7000 	mov.w	r0, #512	; 0x200
   1ac0a:	f7f2 fa5b 	bl	d0c4 <os_msys_get_pkthdr>
   1ac0e:	4680      	mov	r8, r0
   1ac10:	9001      	str	r0, [sp, #4]
    if (!rsp) {
   1ac12:	b9d8      	cbnz	r0, 1ac4c <nmgr_event_data_in+0x68>
        rc = os_mbuf_copydata(req, 0, sizeof(hdr), &hdr);
   1ac14:	4601      	mov	r1, r0
   1ac16:	ab02      	add	r3, sp, #8
   1ac18:	2208      	movs	r2, #8
   1ac1a:	4628      	mov	r0, r5
   1ac1c:	f7f3 f903 	bl	de26 <os_mbuf_copydata>
        if (rc < 0) {
   1ac20:	1e04      	subs	r4, r0, #0
   1ac22:	f2c0 80b0 	blt.w	1ad86 <nmgr_event_data_in+0x1a2>
        rsp = req;
   1ac26:	9501      	str	r5, [sp, #4]
        req = NULL;
   1ac28:	4645      	mov	r5, r8
    os_mbuf_adj(rsp, OS_MBUF_PKTLEN(rsp));
   1ac2a:	9801      	ldr	r0, [sp, #4]
   1ac2c:	8a01      	ldrh	r1, [r0, #16]
   1ac2e:	f7f3 f920 	bl	de72 <os_mbuf_adj>
    nmgr_send_err_rsp(nt, rsp, &hdr, rc);
   1ac32:	f8dd a004 	ldr.w	sl, [sp, #4]
    hdr = nmgr_init_rsp(m, hdr);
   1ac36:	a902      	add	r1, sp, #8
   1ac38:	4650      	mov	r0, sl
   1ac3a:	f7ff ffa1 	bl	1ab80 <nmgr_init_rsp>
    if (!hdr) {
   1ac3e:	4680      	mov	r8, r0
   1ac40:	2800      	cmp	r0, #0
   1ac42:	d17d      	bne.n	1ad40 <nmgr_event_data_in+0x15c>
        os_mbuf_free_chain(m);
   1ac44:	4650      	mov	r0, sl
    os_mbuf_free_chain(rsp);
   1ac46:	f7f3 f886 	bl	dd56 <os_mbuf_free_chain>
   1ac4a:	e093      	b.n	1ad74 <nmgr_event_data_in+0x190>
    mtu = nt->nt_get_mtu(req);
   1ac4c:	69fb      	ldr	r3, [r7, #28]
   1ac4e:	4628      	mov	r0, r5
   1ac50:	4798      	blx	r3
    if (mtu == 0) {
   1ac52:	4682      	mov	sl, r0
   1ac54:	2800      	cmp	r0, #0
   1ac56:	f000 8096 	beq.w	1ad86 <nmgr_event_data_in+0x1a2>
    memcpy(OS_MBUF_USRHDR(rsp), OS_MBUF_USRHDR(req), OS_MBUF_USRHDR_LEN(req));
   1ac5a:	796a      	ldrb	r2, [r5, #5]
   1ac5c:	9801      	ldr	r0, [sp, #4]
   1ac5e:	3a08      	subs	r2, #8
   1ac60:	f105 0118 	add.w	r1, r5, #24
   1ac64:	3018      	adds	r0, #24
   1ac66:	f7f5 fb03 	bl	10270 <memcpy>
    rc = os_mbuf_copydata(req, 0, sizeof(hdr), &hdr);
   1ac6a:	ab02      	add	r3, sp, #8
   1ac6c:	2208      	movs	r2, #8
   1ac6e:	2100      	movs	r1, #0
   1ac70:	4628      	mov	r0, r5
   1ac72:	f7f3 f8d8 	bl	de26 <os_mbuf_copydata>
    if (rc < 0) {
   1ac76:	2800      	cmp	r0, #0
   1ac78:	f2c0 8085 	blt.w	1ad86 <nmgr_event_data_in+0x1a2>
    handler = mgmt_find_handler(ntohs(hdr.nh_group), hdr.nh_id);
   1ac7c:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    hdr.nh_len = ntohs(hdr.nh_len);
   1ac80:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    handler = mgmt_find_handler(ntohs(hdr.nh_group), hdr.nh_id);
   1ac84:	f89d 100f 	ldrb.w	r1, [sp, #15]
   1ac88:	ba40      	rev16	r0, r0
    hdr.nh_len = ntohs(hdr.nh_len);
   1ac8a:	ba5b      	rev16	r3, r3
    handler = mgmt_find_handler(ntohs(hdr.nh_group), hdr.nh_id);
   1ac8c:	b280      	uxth	r0, r0
    hdr.nh_len = ntohs(hdr.nh_len);
   1ac8e:	f8ad 300a 	strh.w	r3, [sp, #10]
    handler = mgmt_find_handler(ntohs(hdr.nh_group), hdr.nh_id);
   1ac92:	f7ff ff2f 	bl	1aaf4 <mgmt_find_handler>
    if (!handler) {
   1ac96:	4604      	mov	r4, r0
   1ac98:	2800      	cmp	r0, #0
   1ac9a:	d04d      	beq.n	1ad38 <nmgr_event_data_in+0x154>
    rsp_hdr = nmgr_init_rsp(rsp, &hdr);
   1ac9c:	9801      	ldr	r0, [sp, #4]
   1ac9e:	a902      	add	r1, sp, #8
   1aca0:	f7ff ff6e 	bl	1ab80 <nmgr_init_rsp>
    if (!rsp_hdr) {
   1aca4:	4680      	mov	r8, r0
   1aca6:	2800      	cmp	r0, #0
   1aca8:	d06d      	beq.n	1ad86 <nmgr_event_data_in+0x1a2>
    cbor_mbuf_reader_init(&nmgr_task_cbuf.reader, req, sizeof(hdr));
   1acaa:	483a      	ldr	r0, [pc, #232]	; (1ad94 <nmgr_event_data_in+0x1b0>)
   1acac:	2208      	movs	r2, #8
   1acae:	4629      	mov	r1, r5
   1acb0:	f7fa f828 	bl	14d04 <cbor_mbuf_reader_init>
    cbor_parser_init(&nmgr_task_cbuf.reader.r, 0,
   1acb4:	4b38      	ldr	r3, [pc, #224]	; (1ad98 <nmgr_event_data_in+0x1b4>)
   1acb6:	2100      	movs	r1, #0
   1acb8:	f1a3 021c 	sub.w	r2, r3, #28
   1acbc:	f103 001c 	add.w	r0, r3, #28
   1acc0:	f7fa fb2b 	bl	1531a <cbor_parser_init>
    rc = cbor_encoder_create_map(&nmgr_task_cbuf.n_b.encoder, &payload_enc,
   1acc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1acc8:	a904      	add	r1, sp, #16
   1acca:	4648      	mov	r0, r9
   1accc:	f7fa f90a 	bl	14ee4 <cbor_encoder_create_map>
    if (rc != 0) {
   1acd0:	2800      	cmp	r0, #0
   1acd2:	d133      	bne.n	1ad3c <nmgr_event_data_in+0x158>
    if (hdr.nh_op == NMGR_OP_READ) {
   1acd4:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1acd8:	f013 0307 	ands.w	r3, r3, #7
   1acdc:	d118      	bne.n	1ad10 <nmgr_event_data_in+0x12c>
        if (handler->mh_read) {
   1acde:	6823      	ldr	r3, [r4, #0]
        if (handler->mh_write) {
   1ace0:	b353      	cbz	r3, 1ad38 <nmgr_event_data_in+0x154>
            rc = handler->mh_write(&nmgr_task_cbuf.n_b);
   1ace2:	4630      	mov	r0, r6
   1ace4:	4798      	blx	r3
   1ace6:	4604      	mov	r4, r0
    if (rc != 0) {
   1ace8:	2800      	cmp	r0, #0
   1acea:	d19e      	bne.n	1ac2a <nmgr_event_data_in+0x46>
    rc = cbor_encoder_close_container(&nmgr_task_cbuf.n_b.encoder,
   1acec:	a904      	add	r1, sp, #16
   1acee:	4648      	mov	r0, r9
   1acf0:	f7fa f909 	bl	14f06 <cbor_encoder_close_container>
    if (rc != 0) {
   1acf4:	bb10      	cbnz	r0, 1ad3c <nmgr_event_data_in+0x158>
{   return encoder->writer->bytes_written; }
   1acf6:	68f3      	ldr	r3, [r6, #12]
    rsp_hdr->nh_len += cbor_encode_bytes_written(&nmgr_task_cbuf.n_b.encoder);
   1acf8:	f8b8 2002 	ldrh.w	r2, [r8, #2]
   1acfc:	685b      	ldr	r3, [r3, #4]
        frag = mem_split_frag(rsp, mtu, nmgr_rsp_frag_alloc, *rsp);
   1acfe:	4c27      	ldr	r4, [pc, #156]	; (1ad9c <nmgr_event_data_in+0x1b8>)
    rsp_hdr->nh_len += cbor_encode_bytes_written(&nmgr_task_cbuf.n_b.encoder);
   1ad00:	4413      	add	r3, r2
    rsp_hdr->nh_len = htons(rsp_hdr->nh_len);
   1ad02:	ba5b      	rev16	r3, r3
   1ad04:	f8a8 3002 	strh.w	r3, [r8, #2]
    while (*rsp != NULL) {
   1ad08:	9b01      	ldr	r3, [sp, #4]
   1ad0a:	b92b      	cbnz	r3, 1ad18 <nmgr_event_data_in+0x134>
    os_mbuf_free_chain(rsp);
   1ad0c:	4618      	mov	r0, r3
   1ad0e:	e79a      	b.n	1ac46 <nmgr_event_data_in+0x62>
    } else if (hdr.nh_op == NMGR_OP_WRITE) {
   1ad10:	2b02      	cmp	r3, #2
   1ad12:	d10f      	bne.n	1ad34 <nmgr_event_data_in+0x150>
        if (handler->mh_write) {
   1ad14:	6863      	ldr	r3, [r4, #4]
   1ad16:	e7e3      	b.n	1ace0 <nmgr_event_data_in+0xfc>
        frag = mem_split_frag(rsp, mtu, nmgr_rsp_frag_alloc, *rsp);
   1ad18:	4651      	mov	r1, sl
   1ad1a:	4622      	mov	r2, r4
   1ad1c:	a801      	add	r0, sp, #4
   1ad1e:	f7f6 f897 	bl	10e50 <mem_split_frag>
        if (frag == NULL) {
   1ad22:	4601      	mov	r1, r0
   1ad24:	b350      	cbz	r0, 1ad7c <nmgr_event_data_in+0x198>
        rc = nt->nt_output(nt, frag);
   1ad26:	69bb      	ldr	r3, [r7, #24]
   1ad28:	4638      	mov	r0, r7
   1ad2a:	4798      	blx	r3
        if (rc != 0) {
   1ad2c:	2800      	cmp	r0, #0
   1ad2e:	d0eb      	beq.n	1ad08 <nmgr_event_data_in+0x124>
            return MGMT_ERR_EUNKNOWN;
   1ad30:	2401      	movs	r4, #1
   1ad32:	e024      	b.n	1ad7e <nmgr_event_data_in+0x19a>
        rc = MGMT_ERR_EINVAL;
   1ad34:	2403      	movs	r4, #3
   1ad36:	e778      	b.n	1ac2a <nmgr_event_data_in+0x46>
            rc = MGMT_ERR_ENOENT;
   1ad38:	2405      	movs	r4, #5
   1ad3a:	e776      	b.n	1ac2a <nmgr_event_data_in+0x46>
        rc = MGMT_ERR_ENOMEM;
   1ad3c:	2402      	movs	r4, #2
   1ad3e:	e774      	b.n	1ac2a <nmgr_event_data_in+0x46>
    rc = cbor_encoder_create_map(&nmgr_task_cbuf.n_b.encoder, &map,
   1ad40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ad44:	a908      	add	r1, sp, #32
   1ad46:	4648      	mov	r0, r9
   1ad48:	f7fa f8cc 	bl	14ee4 <cbor_encoder_create_map>
    if (rc != 0) {
   1ad4c:	b990      	cbnz	r0, 1ad74 <nmgr_event_data_in+0x190>
    rc = mgmt_cbuf_setoerr(&nmgr_task_cbuf.n_b, status);
   1ad4e:	4621      	mov	r1, r4
   1ad50:	4630      	mov	r0, r6
   1ad52:	f7ff feef 	bl	1ab34 <mgmt_cbuf_setoerr>
    if (rc != 0) {
   1ad56:	b968      	cbnz	r0, 1ad74 <nmgr_event_data_in+0x190>
    rc = cbor_encoder_close_container(&nmgr_task_cbuf.n_b.encoder, &map);
   1ad58:	a908      	add	r1, sp, #32
   1ad5a:	4648      	mov	r0, r9
   1ad5c:	f7fa f8d3 	bl	14f06 <cbor_encoder_close_container>
    if (rc != 0) {
   1ad60:	b940      	cbnz	r0, 1ad74 <nmgr_event_data_in+0x190>
    hdr->nh_len =
   1ad62:	68f3      	ldr	r3, [r6, #12]
    nt->nt_output(nt, nmgr_task_cbuf.n_out_m);
   1ad64:	6df1      	ldr	r1, [r6, #92]	; 0x5c
    hdr->nh_len =
   1ad66:	889b      	ldrh	r3, [r3, #4]
   1ad68:	ba5b      	rev16	r3, r3
   1ad6a:	f8a8 3002 	strh.w	r3, [r8, #2]
    nt->nt_output(nt, nmgr_task_cbuf.n_out_m);
   1ad6e:	4638      	mov	r0, r7
   1ad70:	69bb      	ldr	r3, [r7, #24]
   1ad72:	4798      	blx	r3
    os_mbuf_free_chain(req);
   1ad74:	4628      	mov	r0, r5
   1ad76:	f7f2 ffee 	bl	dd56 <os_mbuf_free_chain>
    return;
   1ad7a:	e73a      	b.n	1abf2 <nmgr_event_data_in+0xe>
            return MGMT_ERR_ENOMEM;
   1ad7c:	2402      	movs	r4, #2
        if (rsp == NULL) {
   1ad7e:	9b01      	ldr	r3, [sp, #4]
   1ad80:	2b00      	cmp	r3, #0
   1ad82:	f47f af52 	bne.w	1ac2a <nmgr_event_data_in+0x46>
    os_mbuf_free_chain(rsp);
   1ad86:	9801      	ldr	r0, [sp, #4]
   1ad88:	e75d      	b.n	1ac46 <nmgr_event_data_in+0x62>
}
   1ad8a:	b00c      	add	sp, #48	; 0x30
   1ad8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ad90:	20007024 	.word	0x20007024
   1ad94:	2000705c 	.word	0x2000705c
   1ad98:	20007040 	.word	0x20007040
   1ad9c:	0001ab5d 	.word	0x0001ab5d

0001ada0 <mgmt_evq_get>:
}
   1ada0:	4b01      	ldr	r3, [pc, #4]	; (1ada8 <mgmt_evq_get+0x8>)
   1ada2:	6818      	ldr	r0, [r3, #0]
   1ada4:	4770      	bx	lr
   1ada6:	bf00      	nop
   1ada8:	20007020 	.word	0x20007020

0001adac <nmgr_transport_init>:
        nmgr_transport_get_mtu_func_t get_mtu_func)
{
    int rc;

    nt->nt_output = output_func;
    nt->nt_get_mtu = get_mtu_func;
   1adac:	e9c0 1206 	strd	r1, r2, [r0, #24]

    rc = os_mqueue_init(&nt->nt_imq, nmgr_event_data_in, nt);
   1adb0:	4901      	ldr	r1, [pc, #4]	; (1adb8 <nmgr_transport_init+0xc>)
   1adb2:	4602      	mov	r2, r0
   1adb4:	f7f2 bf5b 	b.w	dc6e <os_mqueue_init>
   1adb8:	0001abe5 	.word	0x0001abe5

0001adbc <nmgr_rx_req>:
 *
 * @return                      0 on success; nonzero on failure.
 */
int
nmgr_rx_req(struct nmgr_transport *nt, struct os_mbuf *req)
{
   1adbc:	b538      	push	{r3, r4, r5, lr}
    int rc;

    rc = os_mqueue_put(&nt->nt_imq, mgmt_evq_get(), req);
   1adbe:	4b06      	ldr	r3, [pc, #24]	; (1add8 <nmgr_rx_req+0x1c>)
   1adc0:	460a      	mov	r2, r1
{
   1adc2:	460d      	mov	r5, r1
    rc = os_mqueue_put(&nt->nt_imq, mgmt_evq_get(), req);
   1adc4:	6819      	ldr	r1, [r3, #0]
   1adc6:	f7f2 ff72 	bl	dcae <os_mqueue_put>
    if (rc != 0) {
   1adca:	4604      	mov	r4, r0
   1adcc:	b110      	cbz	r0, 1add4 <nmgr_rx_req+0x18>
        os_mbuf_free_chain(req);
   1adce:	4628      	mov	r0, r5
   1add0:	f7f2 ffc1 	bl	dd56 <os_mbuf_free_chain>
    }

    return rc;
}
   1add4:	4620      	mov	r0, r4
   1add6:	bd38      	pop	{r3, r4, r5, pc}
   1add8:	20007020 	.word	0x20007020

0001addc <nmgr_pkg_init>:

void
nmgr_pkg_init(void)
{
   1addc:	b513      	push	{r0, r1, r4, lr}
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1adde:	4b0f      	ldr	r3, [pc, #60]	; (1ae1c <nmgr_pkg_init+0x40>)
   1ade0:	781b      	ldrb	r3, [r3, #0]
   1ade2:	b923      	cbnz	r3, 1adee <nmgr_pkg_init+0x12>
   1ade4:	461a      	mov	r2, r3
   1ade6:	4619      	mov	r1, r3
   1ade8:	4618      	mov	r0, r3
   1adea:	f7f1 fd07 	bl	c7fc <__assert_func>

    rc = nmgr_os_groups_register();
   1adee:	f000 fa7d 	bl	1b2ec <nmgr_os_groups_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1adf2:	b138      	cbz	r0, 1ae04 <nmgr_pkg_init+0x28>
   1adf4:	2300      	movs	r3, #0
   1adf6:	4a0a      	ldr	r2, [pc, #40]	; (1ae20 <nmgr_pkg_init+0x44>)
   1adf8:	9300      	str	r3, [sp, #0]
   1adfa:	6814      	ldr	r4, [r2, #0]
   1adfc:	4619      	mov	r1, r3
   1adfe:	461a      	mov	r2, r3
   1ae00:	4618      	mov	r0, r3
   1ae02:	47a0      	blx	r4
    memset(njb, 0, sizeof(*njb));
   1ae04:	2260      	movs	r2, #96	; 0x60
   1ae06:	2100      	movs	r1, #0
   1ae08:	4806      	ldr	r0, [pc, #24]	; (1ae24 <nmgr_pkg_init+0x48>)
   1ae0a:	f7f5 fa3e 	bl	1028a <memset>

    nmgr_cbuf_init(&nmgr_task_cbuf);

    mgmt_evq_set(os_eventq_dflt_get());
   1ae0e:	f7f2 f87b 	bl	cf08 <os_eventq_dflt_get>
    nmgr_evq = evq;
   1ae12:	4b05      	ldr	r3, [pc, #20]	; (1ae28 <nmgr_pkg_init+0x4c>)
   1ae14:	6018      	str	r0, [r3, #0]
}
   1ae16:	b002      	add	sp, #8
   1ae18:	bd10      	pop	{r4, pc}
   1ae1a:	bf00      	nop
   1ae1c:	20006af4 	.word	0x20006af4
   1ae20:	2000143c 	.word	0x2000143c
   1ae24:	20007024 	.word	0x20007024
   1ae28:	20007020 	.word	0x20007020

0001ae2c <nmgr_reset>:
    os_reboot(HAL_RESET_REQUESTED);
}

static int
nmgr_reset(struct mgmt_cbuf *cb)
{
   1ae2c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1ae2e:	4605      	mov	r5, r0
#if MYNEWT_VAL(LOG_SOFT_RESET)
    struct log_reboot_info info;
#endif
    int rc;

    os_callout_init(&nmgr_reset_callout, mgmt_evq_get(), nmgr_reset_tmo, NULL);
   1ae30:	f7ff ffb6 	bl	1ada0 <mgmt_evq_get>
   1ae34:	4e0e      	ldr	r6, [pc, #56]	; (1ae70 <nmgr_reset+0x44>)
   1ae36:	4a0f      	ldr	r2, [pc, #60]	; (1ae74 <nmgr_reset+0x48>)
   1ae38:	4601      	mov	r1, r0
   1ae3a:	2300      	movs	r3, #0
   1ae3c:	4630      	mov	r0, r6
   1ae3e:	f7f1 fe49 	bl	cad4 <os_callout_init>

#if MYNEWT_VAL(LOG_SOFT_RESET)
    info = (struct log_reboot_info) {
   1ae42:	2400      	movs	r4, #0
   1ae44:	2306      	movs	r3, #6
        .reason = HAL_RESET_REQUESTED,
        .file = NULL,
        .line = 0,
        .pc = 0,
    };
    log_reboot(&info);
   1ae46:	4668      	mov	r0, sp
    info = (struct log_reboot_info) {
   1ae48:	f88d 3000 	strb.w	r3, [sp]
   1ae4c:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1ae50:	9403      	str	r4, [sp, #12]
    log_reboot(&info);
   1ae52:	f001 fed7 	bl	1cc04 <log_reboot>
#endif
    os_callout_reset(&nmgr_reset_callout, OS_TICKS_PER_SEC / 4);
   1ae56:	2120      	movs	r1, #32
   1ae58:	4630      	mov	r0, r6
   1ae5a:	f7f1 fe67 	bl	cb2c <os_callout_reset>

    rc = mgmt_cbuf_setoerr(cb, 0);
   1ae5e:	4621      	mov	r1, r4
   1ae60:	4628      	mov	r0, r5
   1ae62:	f7ff fe67 	bl	1ab34 <mgmt_cbuf_setoerr>
    if (rc != 0) {
        return MGMT_ERR_EUNKNOWN;
    }

    return 0;
}
   1ae66:	1b00      	subs	r0, r0, r4
   1ae68:	bf18      	it	ne
   1ae6a:	2001      	movne	r0, #1
   1ae6c:	b004      	add	sp, #16
   1ae6e:	bd70      	pop	{r4, r5, r6, pc}
   1ae70:	20007084 	.word	0x20007084
   1ae74:	0001ae79 	.word	0x0001ae79

0001ae78 <nmgr_reset_tmo>:
    os_reboot(HAL_RESET_REQUESTED);
   1ae78:	2006      	movs	r0, #6
   1ae7a:	f7f1 be0c 	b.w	ca96 <os_reboot>
	...

0001ae80 <nmgr_datetime_set>:
{
   1ae80:	b530      	push	{r4, r5, lr}
   1ae82:	b0a9      	sub	sp, #164	; 0xa4
   1ae84:	4604      	mov	r4, r0
    const struct cbor_attr_t datetime_write_attr[] = {
   1ae86:	2100      	movs	r1, #0
   1ae88:	225c      	movs	r2, #92	; 0x5c
   1ae8a:	a811      	add	r0, sp, #68	; 0x44
   1ae8c:	f7f5 f9fd 	bl	1028a <memset>
   1ae90:	4b11      	ldr	r3, [pc, #68]	; (1aed8 <nmgr_datetime_set+0x58>)
   1ae92:	9310      	str	r3, [sp, #64]	; 0x40
   1ae94:	2304      	movs	r3, #4
   1ae96:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
   1ae9a:	ad07      	add	r5, sp, #28
   1ae9c:	2321      	movs	r3, #33	; 0x21
    rc = cbor_read_object(&cb->it, datetime_write_attr);
   1ae9e:	a910      	add	r1, sp, #64	; 0x40
   1aea0:	f104 001c 	add.w	r0, r4, #28
    const struct cbor_attr_t datetime_write_attr[] = {
   1aea4:	9512      	str	r5, [sp, #72]	; 0x48
   1aea6:	931a      	str	r3, [sp, #104]	; 0x68
    rc = cbor_read_object(&cb->it, datetime_write_attr);
   1aea8:	f7f9 fed8 	bl	14c5c <cbor_read_object>
    if (rc) {
   1aeac:	b110      	cbz	r0, 1aeb4 <nmgr_datetime_set+0x34>
        return MGMT_ERR_EINVAL;
   1aeae:	2003      	movs	r0, #3
}
   1aeb0:	b029      	add	sp, #164	; 0xa4
   1aeb2:	bd30      	pop	{r4, r5, pc}
    rc = datetime_parse(buf, &tv, &tz);
   1aeb4:	aa01      	add	r2, sp, #4
   1aeb6:	a902      	add	r1, sp, #8
   1aeb8:	4628      	mov	r0, r5
   1aeba:	f7f9 f9b7 	bl	1422c <datetime_parse>
    if (!rc) {
   1aebe:	2800      	cmp	r0, #0
   1aec0:	d1f5      	bne.n	1aeae <nmgr_datetime_set+0x2e>
        rc = os_settimeofday(&tv, &tz);
   1aec2:	a901      	add	r1, sp, #4
   1aec4:	a802      	add	r0, sp, #8
   1aec6:	f7f2 fdbb 	bl	da40 <os_settimeofday>
        if (rc) {
   1aeca:	4601      	mov	r1, r0
   1aecc:	2800      	cmp	r0, #0
   1aece:	d1ee      	bne.n	1aeae <nmgr_datetime_set+0x2e>
    rc = mgmt_cbuf_setoerr(cb, 0);
   1aed0:	4620      	mov	r0, r4
   1aed2:	f7ff fe2f 	bl	1ab34 <mgmt_cbuf_setoerr>
    if (rc != 0) {
   1aed6:	e7eb      	b.n	1aeb0 <nmgr_datetime_set+0x30>
   1aed8:	00022263 	.word	0x00022263

0001aedc <cbor_encode_text_stringz>:
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1aedc:	b513      	push	{r0, r1, r4, lr}
   1aede:	4604      	mov	r4, r0
   1aee0:	4608      	mov	r0, r1
   1aee2:	9101      	str	r1, [sp, #4]
   1aee4:	f7fe ffc4 	bl	19e70 <strlen>
   1aee8:	9901      	ldr	r1, [sp, #4]
   1aeea:	4602      	mov	r2, r0
   1aeec:	4620      	mov	r0, r4
   1aeee:	b002      	add	sp, #8
   1aef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1aef4:	f7f9 bfe1 	b.w	14eba <cbor_encode_text_string>

0001aef8 <nmgr_datetime_get>:
{
   1aef8:	b5f0      	push	{r4, r5, r6, r7, lr}
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1aefa:	f100 060c 	add.w	r6, r0, #12
{
   1aefe:	b091      	sub	sp, #68	; 0x44
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1af00:	4919      	ldr	r1, [pc, #100]	; (1af68 <nmgr_datetime_get+0x70>)
   1af02:	4630      	mov	r0, r6
   1af04:	f7ff ffea 	bl	1aedc <cbor_encode_text_stringz>
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1af08:	2200      	movs	r2, #0
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1af0a:	4605      	mov	r5, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1af0c:	2300      	movs	r3, #0
   1af0e:	4630      	mov	r0, r6
   1af10:	f7f9 ffa2 	bl	14e58 <cbor_encode_int>
    rc = os_gettimeofday(&tv, &tz);
   1af14:	a901      	add	r1, sp, #4
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1af16:	4607      	mov	r7, r0
    rc = os_gettimeofday(&tv, &tz);
   1af18:	a802      	add	r0, sp, #8
   1af1a:	f7f2 fd67 	bl	d9ec <os_gettimeofday>
    assert(rc == 0);
   1af1e:	b128      	cbz	r0, 1af2c <nmgr_datetime_get+0x34>
   1af20:	2300      	movs	r3, #0
   1af22:	461a      	mov	r2, r3
   1af24:	4619      	mov	r1, r3
   1af26:	4618      	mov	r0, r3
   1af28:	f7f1 fc68 	bl	c7fc <__assert_func>
    rc = datetime_format(&tv, &tz, buf, DATETIME_BUFSIZE);
   1af2c:	2321      	movs	r3, #33	; 0x21
   1af2e:	aa07      	add	r2, sp, #28
   1af30:	a901      	add	r1, sp, #4
   1af32:	a802      	add	r0, sp, #8
   1af34:	f7f9 fa2c 	bl	14390 <datetime_format>
    if (rc) {
   1af38:	4604      	mov	r4, r0
   1af3a:	b990      	cbnz	r0, 1af62 <nmgr_datetime_get+0x6a>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "datetime");
   1af3c:	490b      	ldr	r1, [pc, #44]	; (1af6c <nmgr_datetime_get+0x74>)
   1af3e:	4630      	mov	r0, r6
   1af40:	f7ff ffcc 	bl	1aedc <cbor_encode_text_stringz>
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1af44:	ea45 0307 	orr.w	r3, r5, r7
    g_err |= cbor_encode_text_stringz(&cb->encoder, "datetime");
   1af48:	ea43 0500 	orr.w	r5, r3, r0
    g_err |= cbor_encode_text_stringz(&cb->encoder, buf);
   1af4c:	a907      	add	r1, sp, #28
   1af4e:	4630      	mov	r0, r6
   1af50:	f7ff ffc4 	bl	1aedc <cbor_encode_text_stringz>
        return MGMT_ERR_ENOMEM;
   1af54:	ea55 0300 	orrs.w	r3, r5, r0
   1af58:	bf18      	it	ne
   1af5a:	2402      	movne	r4, #2
}
   1af5c:	4620      	mov	r0, r4
   1af5e:	b011      	add	sp, #68	; 0x44
   1af60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (rc);
   1af62:	2403      	movs	r4, #3
   1af64:	e7fa      	b.n	1af5c <nmgr_datetime_get+0x64>
   1af66:	bf00      	nop
   1af68:	00020fea 	.word	0x00020fea
   1af6c:	00022263 	.word	0x00022263

0001af70 <nmgr_def_echo>:
{
   1af70:	b5f0      	push	{r4, r5, r6, r7, lr}
   1af72:	b0b9      	sub	sp, #228	; 0xe4
   1af74:	4605      	mov	r5, r0
    char echo_buf[128] = {'\0'};
   1af76:	2100      	movs	r1, #0
   1af78:	227c      	movs	r2, #124	; 0x7c
   1af7a:	a819      	add	r0, sp, #100	; 0x64
   1af7c:	9118      	str	r1, [sp, #96]	; 0x60
   1af7e:	f7f5 f984 	bl	1028a <memset>
    struct cbor_attr_t attrs[2] = {
   1af82:	225c      	movs	r2, #92	; 0x5c
   1af84:	2100      	movs	r1, #0
   1af86:	a801      	add	r0, sp, #4
   1af88:	f7f5 f97f 	bl	1028a <memset>
   1af8c:	4b14      	ldr	r3, [pc, #80]	; (1afe0 <nmgr_def_echo+0x70>)
   1af8e:	9300      	str	r3, [sp, #0]
   1af90:	2304      	movs	r3, #4
    g_err |= cbor_encode_text_stringz(&cb->encoder, "r");
   1af92:	f105 070c 	add.w	r7, r5, #12
    struct cbor_attr_t attrs[2] = {
   1af96:	f88d 3004 	strb.w	r3, [sp, #4]
   1af9a:	2380      	movs	r3, #128	; 0x80
   1af9c:	ae18      	add	r6, sp, #96	; 0x60
   1af9e:	930a      	str	r3, [sp, #40]	; 0x28
    g_err |= cbor_encode_text_stringz(&cb->encoder, "r");
   1afa0:	4910      	ldr	r1, [pc, #64]	; (1afe4 <nmgr_def_echo+0x74>)
    struct cbor_attr_t attrs[2] = {
   1afa2:	9602      	str	r6, [sp, #8]
   1afa4:	2301      	movs	r3, #1
    g_err |= cbor_encode_text_stringz(&cb->encoder, "r");
   1afa6:	4638      	mov	r0, r7
    struct cbor_attr_t attrs[2] = {
   1afa8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    g_err |= cbor_encode_text_stringz(&cb->encoder, "r");
   1afac:	f7ff ff96 	bl	1aedc <cbor_encode_text_stringz>
    g_err |= cbor_read_object(&cb->it, attrs);
   1afb0:	4669      	mov	r1, sp
    g_err |= cbor_encode_text_stringz(&cb->encoder, "r");
   1afb2:	4604      	mov	r4, r0
    g_err |= cbor_read_object(&cb->it, attrs);
   1afb4:	f105 001c 	add.w	r0, r5, #28
   1afb8:	f7f9 fe50 	bl	14c5c <cbor_read_object>
   1afbc:	4605      	mov	r5, r0
    g_err |= cbor_encode_text_string(&cb->encoder, echo_buf, strlen(echo_buf));
   1afbe:	4630      	mov	r0, r6
   1afc0:	f7fe ff56 	bl	19e70 <strlen>
   1afc4:	4631      	mov	r1, r6
   1afc6:	4602      	mov	r2, r0
   1afc8:	4638      	mov	r0, r7
   1afca:	f7f9 ff76 	bl	14eba <cbor_encode_text_string>
   1afce:	4304      	orrs	r4, r0
        return MGMT_ERR_ENOMEM;
   1afd0:	ea54 0305 	orrs.w	r3, r4, r5
}
   1afd4:	bf14      	ite	ne
   1afd6:	2002      	movne	r0, #2
   1afd8:	2000      	moveq	r0, #0
   1afda:	b039      	add	sp, #228	; 0xe4
   1afdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1afde:	bf00      	nop
   1afe0:	000224e9 	.word	0x000224e9
   1afe4:	000226b7 	.word	0x000226b7

0001afe8 <nmgr_def_mpstat_read>:
{
   1afe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1afec:	f100 070c 	add.w	r7, r0, #12
{
   1aff0:	b095      	sub	sp, #84	; 0x54
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1aff2:	493a      	ldr	r1, [pc, #232]	; (1b0dc <nmgr_def_mpstat_read+0xf4>)
        g_err |= cbor_encode_text_stringz(&pool, "blksiz");
   1aff4:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 1b0e8 <nmgr_def_mpstat_read+0x100>
        g_err |= cbor_encode_text_stringz(&pool, "nblks");
   1aff8:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 1b0ec <nmgr_def_mpstat_read+0x104>
        g_err |= cbor_encode_text_stringz(&pool, "nfree");
   1affc:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 1b0f0 <nmgr_def_mpstat_read+0x108>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1b000:	4638      	mov	r0, r7
   1b002:	f7ff ff6b 	bl	1aedc <cbor_encode_text_stringz>
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1b006:	2200      	movs	r2, #0
   1b008:	2300      	movs	r3, #0
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1b00a:	4604      	mov	r4, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1b00c:	4638      	mov	r0, r7
   1b00e:	f7f9 ff23 	bl	14e58 <cbor_encode_int>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "mpools");
   1b012:	4933      	ldr	r1, [pc, #204]	; (1b0e0 <nmgr_def_mpstat_read+0xf8>)
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1b014:	4304      	orrs	r4, r0
    g_err |= cbor_encode_text_stringz(&cb->encoder, "mpools");
   1b016:	4638      	mov	r0, r7
   1b018:	f7ff ff60 	bl	1aedc <cbor_encode_text_stringz>
    g_err |= cbor_encoder_create_map(&cb->encoder, &pools,
   1b01c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    g_err |= cbor_encode_text_stringz(&cb->encoder, "mpools");
   1b020:	4304      	orrs	r4, r0
    g_err |= cbor_encoder_create_map(&cb->encoder, &pools,
   1b022:	4669      	mov	r1, sp
   1b024:	4638      	mov	r0, r7
   1b026:	f7f9 ff5d 	bl	14ee4 <cbor_encoder_create_map>
    prev_mp = NULL;
   1b02a:	f04f 0800 	mov.w	r8, #0
    g_err |= cbor_encoder_create_map(&cb->encoder, &pools,
   1b02e:	4304      	orrs	r4, r0
        prev_mp = os_mempool_info_get_next(prev_mp, &omi);
   1b030:	4640      	mov	r0, r8
   1b032:	a908      	add	r1, sp, #32
   1b034:	f7f1 ffea 	bl	d00c <os_mempool_info_get_next>
        if (prev_mp == NULL) {
   1b038:	4680      	mov	r8, r0
   1b03a:	2800      	cmp	r0, #0
   1b03c:	d041      	beq.n	1b0c2 <nmgr_def_mpstat_read+0xda>
        g_err |= cbor_encode_text_stringz(&pools, omi.omi_name);
   1b03e:	a90c      	add	r1, sp, #48	; 0x30
   1b040:	4668      	mov	r0, sp
   1b042:	f7ff ff4b 	bl	1aedc <cbor_encode_text_stringz>
        g_err |= cbor_encoder_create_map(&pools, &pool, CborIndefiniteLength);
   1b046:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
        g_err |= cbor_encode_text_stringz(&pools, omi.omi_name);
   1b04a:	4605      	mov	r5, r0
        g_err |= cbor_encoder_create_map(&pools, &pool, CborIndefiniteLength);
   1b04c:	a904      	add	r1, sp, #16
   1b04e:	4668      	mov	r0, sp
   1b050:	f7f9 ff48 	bl	14ee4 <cbor_encoder_create_map>
        g_err |= cbor_encode_text_stringz(&pool, "blksiz");
   1b054:	4659      	mov	r1, fp
        g_err |= cbor_encoder_create_map(&pools, &pool, CborIndefiniteLength);
   1b056:	4305      	orrs	r5, r0
        g_err |= cbor_encode_text_stringz(&pool, "blksiz");
   1b058:	a804      	add	r0, sp, #16
   1b05a:	f7ff ff3f 	bl	1aedc <cbor_encode_text_stringz>
        g_err |= cbor_encode_uint(&pool, omi.omi_block_size);
   1b05e:	9a08      	ldr	r2, [sp, #32]
        g_err |= cbor_encoder_create_map(&pools, &pool, CborIndefiniteLength);
   1b060:	432c      	orrs	r4, r5
        g_err |= cbor_encode_uint(&pool, omi.omi_block_size);
   1b062:	17d3      	asrs	r3, r2, #31
        g_err |= cbor_encode_text_stringz(&pool, "blksiz");
   1b064:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&pool, omi.omi_block_size);
   1b066:	a804      	add	r0, sp, #16
   1b068:	f7f9 feee 	bl	14e48 <cbor_encode_uint>
        g_err |= cbor_encode_text_stringz(&pool, "nblks");
   1b06c:	4651      	mov	r1, sl
        g_err |= cbor_encode_uint(&pool, omi.omi_block_size);
   1b06e:	4304      	orrs	r4, r0
        g_err |= cbor_encode_text_stringz(&pool, "nblks");
   1b070:	a804      	add	r0, sp, #16
   1b072:	f7ff ff33 	bl	1aedc <cbor_encode_text_stringz>
        g_err |= cbor_encode_uint(&pool, omi.omi_num_blocks);
   1b076:	9a09      	ldr	r2, [sp, #36]	; 0x24
        g_err |= cbor_encode_text_stringz(&pool, "nblks");
   1b078:	ea44 0600 	orr.w	r6, r4, r0
        g_err |= cbor_encode_uint(&pool, omi.omi_num_blocks);
   1b07c:	17d3      	asrs	r3, r2, #31
   1b07e:	a804      	add	r0, sp, #16
   1b080:	f7f9 fee2 	bl	14e48 <cbor_encode_uint>
        g_err |= cbor_encode_text_stringz(&pool, "nfree");
   1b084:	4649      	mov	r1, r9
        g_err |= cbor_encode_uint(&pool, omi.omi_num_blocks);
   1b086:	4306      	orrs	r6, r0
        g_err |= cbor_encode_text_stringz(&pool, "nfree");
   1b088:	a804      	add	r0, sp, #16
   1b08a:	f7ff ff27 	bl	1aedc <cbor_encode_text_stringz>
        g_err |= cbor_encode_uint(&pool, omi.omi_num_free);
   1b08e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
        g_err |= cbor_encode_text_stringz(&pool, "nfree");
   1b090:	ea46 0500 	orr.w	r5, r6, r0
        g_err |= cbor_encode_uint(&pool, omi.omi_num_free);
   1b094:	17d3      	asrs	r3, r2, #31
   1b096:	a804      	add	r0, sp, #16
   1b098:	f7f9 fed6 	bl	14e48 <cbor_encode_uint>
        g_err |= cbor_encode_text_stringz(&pool, "min");
   1b09c:	4911      	ldr	r1, [pc, #68]	; (1b0e4 <nmgr_def_mpstat_read+0xfc>)
        g_err |= cbor_encode_uint(&pool, omi.omi_num_free);
   1b09e:	4305      	orrs	r5, r0
        g_err |= cbor_encode_text_stringz(&pool, "min");
   1b0a0:	a804      	add	r0, sp, #16
   1b0a2:	f7ff ff1b 	bl	1aedc <cbor_encode_text_stringz>
        g_err |= cbor_encode_uint(&pool, omi.omi_min_free);
   1b0a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        g_err |= cbor_encode_text_stringz(&pool, "min");
   1b0a8:	ea45 0400 	orr.w	r4, r5, r0
        g_err |= cbor_encode_uint(&pool, omi.omi_min_free);
   1b0ac:	17d3      	asrs	r3, r2, #31
   1b0ae:	a804      	add	r0, sp, #16
   1b0b0:	f7f9 feca 	bl	14e48 <cbor_encode_uint>
        g_err |= cbor_encoder_close_container(&pools, &pool);
   1b0b4:	a904      	add	r1, sp, #16
        g_err |= cbor_encode_uint(&pool, omi.omi_min_free);
   1b0b6:	4304      	orrs	r4, r0
        g_err |= cbor_encoder_close_container(&pools, &pool);
   1b0b8:	4668      	mov	r0, sp
   1b0ba:	f7f9 ff24 	bl	14f06 <cbor_encoder_close_container>
   1b0be:	4304      	orrs	r4, r0
        prev_mp = os_mempool_info_get_next(prev_mp, &omi);
   1b0c0:	e7b6      	b.n	1b030 <nmgr_def_mpstat_read+0x48>
    g_err |= cbor_encoder_close_container(&cb->encoder, &pools);
   1b0c2:	4669      	mov	r1, sp
   1b0c4:	4638      	mov	r0, r7
   1b0c6:	f7f9 ff1e 	bl	14f06 <cbor_encoder_close_container>
        return MGMT_ERR_ENOMEM;
   1b0ca:	ea54 0300 	orrs.w	r3, r4, r0
}
   1b0ce:	bf14      	ite	ne
   1b0d0:	2002      	movne	r0, #2
   1b0d2:	2000      	moveq	r0, #0
   1b0d4:	b015      	add	sp, #84	; 0x54
   1b0d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b0da:	bf00      	nop
   1b0dc:	00020fea 	.word	0x00020fea
   1b0e0:	0002226c 	.word	0x0002226c
   1b0e4:	00020c9c 	.word	0x00020c9c
   1b0e8:	00022273 	.word	0x00022273
   1b0ec:	0002227a 	.word	0x0002227a
   1b0f0:	00022280 	.word	0x00022280

0001b0f4 <nmgr_def_taskstat_read>:
{
   1b0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1b0f8:	f100 070c 	add.w	r7, r0, #12
{
   1b0fc:	b097      	sub	sp, #92	; 0x5c
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1b0fe:	495b      	ldr	r1, [pc, #364]	; (1b26c <nmgr_def_taskstat_read+0x178>)
        g_err |= cbor_encode_text_stringz(&task, "prio");
   1b100:	f8df b188 	ldr.w	fp, [pc, #392]	; 1b28c <nmgr_def_taskstat_read+0x198>
        g_err |= cbor_encode_text_stringz(&task, "tid");
   1b104:	f8df a188 	ldr.w	sl, [pc, #392]	; 1b290 <nmgr_def_taskstat_read+0x19c>
        g_err |= cbor_encode_text_stringz(&task, "state");
   1b108:	f8df 9188 	ldr.w	r9, [pc, #392]	; 1b294 <nmgr_def_taskstat_read+0x1a0>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1b10c:	4638      	mov	r0, r7
   1b10e:	f7ff fee5 	bl	1aedc <cbor_encode_text_stringz>
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1b112:	2200      	movs	r2, #0
   1b114:	2300      	movs	r3, #0
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1b116:	4604      	mov	r4, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1b118:	4638      	mov	r0, r7
   1b11a:	f7f9 fe9d 	bl	14e58 <cbor_encode_int>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "tasks");
   1b11e:	4954      	ldr	r1, [pc, #336]	; (1b270 <nmgr_def_taskstat_read+0x17c>)
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1b120:	4304      	orrs	r4, r0
    g_err |= cbor_encode_text_stringz(&cb->encoder, "tasks");
   1b122:	4638      	mov	r0, r7
   1b124:	f7ff feda 	bl	1aedc <cbor_encode_text_stringz>
    g_err |= cbor_encoder_create_map(&cb->encoder, &tasks,
   1b128:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    g_err |= cbor_encode_text_stringz(&cb->encoder, "tasks");
   1b12c:	4304      	orrs	r4, r0
    g_err |= cbor_encoder_create_map(&cb->encoder, &tasks,
   1b12e:	4669      	mov	r1, sp
   1b130:	4638      	mov	r0, r7
   1b132:	f7f9 fed7 	bl	14ee4 <cbor_encoder_create_map>
    prev_task = NULL;
   1b136:	f04f 0800 	mov.w	r8, #0
    g_err |= cbor_encoder_create_map(&cb->encoder, &tasks,
   1b13a:	4304      	orrs	r4, r0
        prev_task = os_task_info_get_next(prev_task, &oti);
   1b13c:	4640      	mov	r0, r8
   1b13e:	a908      	add	r1, sp, #32
   1b140:	f7f2 fba6 	bl	d890 <os_task_info_get_next>
        if (prev_task == NULL) {
   1b144:	4680      	mov	r8, r0
   1b146:	2800      	cmp	r0, #0
   1b148:	f000 8084 	beq.w	1b254 <nmgr_def_taskstat_read+0x160>
        g_err |= cbor_encode_text_stringz(&tasks, oti.oti_name);
   1b14c:	a90e      	add	r1, sp, #56	; 0x38
   1b14e:	4668      	mov	r0, sp
   1b150:	f7ff fec4 	bl	1aedc <cbor_encode_text_stringz>
        g_err |= cbor_encoder_create_map(&tasks, &task, CborIndefiniteLength);
   1b154:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
        g_err |= cbor_encode_text_stringz(&tasks, oti.oti_name);
   1b158:	4605      	mov	r5, r0
        g_err |= cbor_encoder_create_map(&tasks, &task, CborIndefiniteLength);
   1b15a:	a904      	add	r1, sp, #16
   1b15c:	4668      	mov	r0, sp
   1b15e:	f7f9 fec1 	bl	14ee4 <cbor_encoder_create_map>
        g_err |= cbor_encode_text_stringz(&task, "prio");
   1b162:	4659      	mov	r1, fp
        g_err |= cbor_encoder_create_map(&tasks, &task, CborIndefiniteLength);
   1b164:	4305      	orrs	r5, r0
        g_err |= cbor_encode_text_stringz(&task, "prio");
   1b166:	a804      	add	r0, sp, #16
   1b168:	f7ff feb8 	bl	1aedc <cbor_encode_text_stringz>
        g_err |= cbor_encoder_create_map(&tasks, &task, CborIndefiniteLength);
   1b16c:	432c      	orrs	r4, r5
        g_err |= cbor_encode_uint(&task, oti.oti_prio);
   1b16e:	f89d 2020 	ldrb.w	r2, [sp, #32]
        g_err |= cbor_encode_text_stringz(&task, "prio");
   1b172:	ea44 0600 	orr.w	r6, r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_prio);
   1b176:	2300      	movs	r3, #0
   1b178:	a804      	add	r0, sp, #16
   1b17a:	f7f9 fe65 	bl	14e48 <cbor_encode_uint>
        g_err |= cbor_encode_text_stringz(&task, "tid");
   1b17e:	4651      	mov	r1, sl
        g_err |= cbor_encode_uint(&task, oti.oti_prio);
   1b180:	4306      	orrs	r6, r0
        g_err |= cbor_encode_text_stringz(&task, "tid");
   1b182:	a804      	add	r0, sp, #16
   1b184:	f7ff feaa 	bl	1aedc <cbor_encode_text_stringz>
        g_err |= cbor_encode_uint(&task, oti.oti_taskid);
   1b188:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
        g_err |= cbor_encode_text_stringz(&task, "tid");
   1b18c:	ea46 0500 	orr.w	r5, r6, r0
        g_err |= cbor_encode_uint(&task, oti.oti_taskid);
   1b190:	2300      	movs	r3, #0
   1b192:	a804      	add	r0, sp, #16
   1b194:	f7f9 fe58 	bl	14e48 <cbor_encode_uint>
        g_err |= cbor_encode_text_stringz(&task, "state");
   1b198:	4649      	mov	r1, r9
        g_err |= cbor_encode_uint(&task, oti.oti_taskid);
   1b19a:	4305      	orrs	r5, r0
        g_err |= cbor_encode_text_stringz(&task, "state");
   1b19c:	a804      	add	r0, sp, #16
   1b19e:	f7ff fe9d 	bl	1aedc <cbor_encode_text_stringz>
        g_err |= cbor_encode_uint(&task, oti.oti_state);
   1b1a2:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
        g_err |= cbor_encode_text_stringz(&task, "state");
   1b1a6:	ea45 0400 	orr.w	r4, r5, r0
        g_err |= cbor_encode_uint(&task, oti.oti_state);
   1b1aa:	2300      	movs	r3, #0
   1b1ac:	a804      	add	r0, sp, #16
   1b1ae:	f7f9 fe4b 	bl	14e48 <cbor_encode_uint>
        g_err |= cbor_encode_text_stringz(&task, "stkuse");
   1b1b2:	4930      	ldr	r1, [pc, #192]	; (1b274 <nmgr_def_taskstat_read+0x180>)
        g_err |= cbor_encode_uint(&task, oti.oti_state);
   1b1b4:	4304      	orrs	r4, r0
        g_err |= cbor_encode_text_stringz(&task, "stkuse");
   1b1b6:	a804      	add	r0, sp, #16
   1b1b8:	f7ff fe90 	bl	1aedc <cbor_encode_text_stringz>
        g_err |= cbor_encode_uint(&task, oti.oti_stkusage);
   1b1bc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
        g_err |= cbor_encode_text_stringz(&task, "stkuse");
   1b1c0:	ea44 0600 	orr.w	r6, r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_stkusage);
   1b1c4:	2300      	movs	r3, #0
   1b1c6:	a804      	add	r0, sp, #16
   1b1c8:	f7f9 fe3e 	bl	14e48 <cbor_encode_uint>
        g_err |= cbor_encode_text_stringz(&task, "stksiz");
   1b1cc:	492a      	ldr	r1, [pc, #168]	; (1b278 <nmgr_def_taskstat_read+0x184>)
        g_err |= cbor_encode_uint(&task, oti.oti_stkusage);
   1b1ce:	4306      	orrs	r6, r0
        g_err |= cbor_encode_text_stringz(&task, "stksiz");
   1b1d0:	a804      	add	r0, sp, #16
   1b1d2:	f7ff fe83 	bl	1aedc <cbor_encode_text_stringz>
        g_err |= cbor_encode_uint(&task, oti.oti_stksize);
   1b1d6:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
        g_err |= cbor_encode_text_stringz(&task, "stksiz");
   1b1da:	ea46 0500 	orr.w	r5, r6, r0
        g_err |= cbor_encode_uint(&task, oti.oti_stksize);
   1b1de:	2300      	movs	r3, #0
   1b1e0:	a804      	add	r0, sp, #16
   1b1e2:	f7f9 fe31 	bl	14e48 <cbor_encode_uint>
        g_err |= cbor_encode_text_stringz(&task, "cswcnt");
   1b1e6:	4925      	ldr	r1, [pc, #148]	; (1b27c <nmgr_def_taskstat_read+0x188>)
        g_err |= cbor_encode_uint(&task, oti.oti_stksize);
   1b1e8:	4305      	orrs	r5, r0
        g_err |= cbor_encode_text_stringz(&task, "cswcnt");
   1b1ea:	a804      	add	r0, sp, #16
   1b1ec:	f7ff fe76 	bl	1aedc <cbor_encode_text_stringz>
        g_err |= cbor_encode_uint(&task, oti.oti_cswcnt);
   1b1f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
        g_err |= cbor_encode_text_stringz(&task, "cswcnt");
   1b1f2:	ea45 0400 	orr.w	r4, r5, r0
        g_err |= cbor_encode_uint(&task, oti.oti_cswcnt);
   1b1f6:	2300      	movs	r3, #0
   1b1f8:	a804      	add	r0, sp, #16
   1b1fa:	f7f9 fe25 	bl	14e48 <cbor_encode_uint>
        g_err |= cbor_encode_text_stringz(&task, "runtime");
   1b1fe:	4920      	ldr	r1, [pc, #128]	; (1b280 <nmgr_def_taskstat_read+0x18c>)
        g_err |= cbor_encode_uint(&task, oti.oti_cswcnt);
   1b200:	4304      	orrs	r4, r0
        g_err |= cbor_encode_text_stringz(&task, "runtime");
   1b202:	a804      	add	r0, sp, #16
   1b204:	f7ff fe6a 	bl	1aedc <cbor_encode_text_stringz>
        g_err |= cbor_encode_uint(&task, oti.oti_runtime);
   1b208:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        g_err |= cbor_encode_text_stringz(&task, "runtime");
   1b20a:	ea44 0600 	orr.w	r6, r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_runtime);
   1b20e:	2300      	movs	r3, #0
   1b210:	a804      	add	r0, sp, #16
   1b212:	f7f9 fe19 	bl	14e48 <cbor_encode_uint>
        g_err |= cbor_encode_text_stringz(&task, "last_checkin");
   1b216:	491b      	ldr	r1, [pc, #108]	; (1b284 <nmgr_def_taskstat_read+0x190>)
        g_err |= cbor_encode_uint(&task, oti.oti_runtime);
   1b218:	4306      	orrs	r6, r0
        g_err |= cbor_encode_text_stringz(&task, "last_checkin");
   1b21a:	a804      	add	r0, sp, #16
   1b21c:	f7ff fe5e 	bl	1aedc <cbor_encode_text_stringz>
        g_err |= cbor_encode_uint(&task, oti.oti_last_checkin);
   1b220:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1b222:	2300      	movs	r3, #0
        g_err |= cbor_encode_text_stringz(&task, "last_checkin");
   1b224:	ea46 0500 	orr.w	r5, r6, r0
        g_err |= cbor_encode_uint(&task, oti.oti_last_checkin);
   1b228:	a804      	add	r0, sp, #16
   1b22a:	f7f9 fe0d 	bl	14e48 <cbor_encode_uint>
        g_err |= cbor_encode_text_stringz(&task, "next_checkin");
   1b22e:	4916      	ldr	r1, [pc, #88]	; (1b288 <nmgr_def_taskstat_read+0x194>)
        g_err |= cbor_encode_uint(&task, oti.oti_last_checkin);
   1b230:	4305      	orrs	r5, r0
        g_err |= cbor_encode_text_stringz(&task, "next_checkin");
   1b232:	a804      	add	r0, sp, #16
   1b234:	f7ff fe52 	bl	1aedc <cbor_encode_text_stringz>
        g_err |= cbor_encode_uint(&task, oti.oti_next_checkin);
   1b238:	9a0d      	ldr	r2, [sp, #52]	; 0x34
        g_err |= cbor_encode_text_stringz(&task, "next_checkin");
   1b23a:	ea45 0400 	orr.w	r4, r5, r0
        g_err |= cbor_encode_uint(&task, oti.oti_next_checkin);
   1b23e:	2300      	movs	r3, #0
   1b240:	a804      	add	r0, sp, #16
   1b242:	f7f9 fe01 	bl	14e48 <cbor_encode_uint>
        g_err |= cbor_encoder_close_container(&tasks, &task);
   1b246:	a904      	add	r1, sp, #16
        g_err |= cbor_encode_uint(&task, oti.oti_next_checkin);
   1b248:	4304      	orrs	r4, r0
        g_err |= cbor_encoder_close_container(&tasks, &task);
   1b24a:	4668      	mov	r0, sp
   1b24c:	f7f9 fe5b 	bl	14f06 <cbor_encoder_close_container>
   1b250:	4304      	orrs	r4, r0
        prev_task = os_task_info_get_next(prev_task, &oti);
   1b252:	e773      	b.n	1b13c <nmgr_def_taskstat_read+0x48>
    g_err |= cbor_encoder_close_container(&cb->encoder, &tasks);
   1b254:	4669      	mov	r1, sp
   1b256:	4638      	mov	r0, r7
   1b258:	f7f9 fe55 	bl	14f06 <cbor_encoder_close_container>
        return MGMT_ERR_ENOMEM;
   1b25c:	ea54 0300 	orrs.w	r3, r4, r0
}
   1b260:	bf14      	ite	ne
   1b262:	2002      	movne	r0, #2
   1b264:	2000      	moveq	r0, #0
   1b266:	b017      	add	sp, #92	; 0x5c
   1b268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b26c:	00020fea 	.word	0x00020fea
   1b270:	00020e1f 	.word	0x00020e1f
   1b274:	00020d3d 	.word	0x00020d3d
   1b278:	00022291 	.word	0x00022291
   1b27c:	00022298 	.word	0x00022298
   1b280:	00020d4e 	.word	0x00020d4e
   1b284:	0002229f 	.word	0x0002229f
   1b288:	000222ac 	.word	0x000222ac
   1b28c:	00022286 	.word	0x00022286
   1b290:	00020d56 	.word	0x00020d56
   1b294:	0002228b 	.word	0x0002228b

0001b298 <nmgr_def_console_echo>:
{
   1b298:	b530      	push	{r4, r5, lr}
    long long int echo_on = 1;
   1b29a:	2300      	movs	r3, #0
{
   1b29c:	b09b      	sub	sp, #108	; 0x6c
    long long int echo_on = 1;
   1b29e:	2201      	movs	r2, #1
   1b2a0:	e9cd 2300 	strd	r2, r3, [sp]
{
   1b2a4:	4604      	mov	r4, r0
    struct cbor_attr_t attrs[2] = {
   1b2a6:	225c      	movs	r2, #92	; 0x5c
   1b2a8:	2100      	movs	r1, #0
   1b2aa:	a803      	add	r0, sp, #12
   1b2ac:	f7f4 ffed 	bl	1028a <memset>
   1b2b0:	2501      	movs	r5, #1
   1b2b2:	4b0d      	ldr	r3, [pc, #52]	; (1b2e8 <nmgr_def_console_echo+0x50>)
   1b2b4:	9302      	str	r3, [sp, #8]
    rc = cbor_read_object(&cb->it, attrs);
   1b2b6:	f104 001c 	add.w	r0, r4, #28
   1b2ba:	a902      	add	r1, sp, #8
    struct cbor_attr_t attrs[2] = {
   1b2bc:	f88d 500c 	strb.w	r5, [sp, #12]
   1b2c0:	f8cd d010 	str.w	sp, [sp, #16]
   1b2c4:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
    rc = cbor_read_object(&cb->it, attrs);
   1b2c8:	f7f9 fcc8 	bl	14c5c <cbor_read_object>
    if (rc) {
   1b2cc:	4604      	mov	r4, r0
   1b2ce:	b948      	cbnz	r0, 1b2e4 <nmgr_def_console_echo+0x4c>
    if (echo_on) {
   1b2d0:	e9dd 2300 	ldrd	r2, r3, [sp]
   1b2d4:	4313      	orrs	r3, r2
        console_echo(1);
   1b2d6:	bf18      	it	ne
   1b2d8:	4628      	movne	r0, r5
        console_echo(0);
   1b2da:	f7f6 f9e5 	bl	116a8 <console_echo>
}
   1b2de:	4620      	mov	r0, r4
   1b2e0:	b01b      	add	sp, #108	; 0x6c
   1b2e2:	bd30      	pop	{r4, r5, pc}
        return MGMT_ERR_EINVAL;
   1b2e4:	2403      	movs	r4, #3
   1b2e6:	e7fa      	b.n	1b2de <nmgr_def_console_echo+0x46>
   1b2e8:	000222b9 	.word	0x000222b9

0001b2ec <nmgr_os_groups_register>:

int
nmgr_os_groups_register(void)
{
    return mgmt_group_register(&nmgr_def_group);
   1b2ec:	4801      	ldr	r0, [pc, #4]	; (1b2f4 <nmgr_os_groups_register+0x8>)
   1b2ee:	f7ff bbef 	b.w	1aad0 <mgmt_group_register>
   1b2f2:	bf00      	nop
   1b2f4:	20001640 	.word	0x20001640

0001b2f8 <nmgr_shell_get_mtu>:

static uint16_t
nmgr_shell_get_mtu(struct os_mbuf *m)
{
    return MGMT_MAX_MTU;
}
   1b2f8:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1b2fc:	4770      	bx	lr
	...

0001b300 <nmgr_shell_in>:
    return (rc);
}

static int
nmgr_shell_in(struct os_mbuf *m, void *arg)
{
   1b300:	4601      	mov	r1, r0
    return nmgr_rx_req(&nmgr_shell_transport, m);
   1b302:	4801      	ldr	r0, [pc, #4]	; (1b308 <nmgr_shell_in+0x8>)
   1b304:	f7ff bd5a 	b.w	1adbc <nmgr_rx_req>
   1b308:	200070a4 	.word	0x200070a4

0001b30c <nmgr_shell_out>:
{
   1b30c:	b538      	push	{r3, r4, r5, lr}
    rc = shell_nlip_output(m);
   1b30e:	4608      	mov	r0, r1
{
   1b310:	460d      	mov	r5, r1
    rc = shell_nlip_output(m);
   1b312:	f7f7 fdfd 	bl	12f10 <shell_nlip_output>
    if (rc != 0) {
   1b316:	4604      	mov	r4, r0
   1b318:	b110      	cbz	r0, 1b320 <nmgr_shell_out+0x14>
    os_mbuf_free_chain(m);
   1b31a:	4628      	mov	r0, r5
   1b31c:	f7f2 fd1b 	bl	dd56 <os_mbuf_free_chain>
}
   1b320:	4620      	mov	r0, r4
   1b322:	bd38      	pop	{r3, r4, r5, pc}

0001b324 <nmgr_shell_pkg_init>:
}

void
nmgr_shell_pkg_init(void)
{
   1b324:	b508      	push	{r3, lr}
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1b326:	4b0b      	ldr	r3, [pc, #44]	; (1b354 <nmgr_shell_pkg_init+0x30>)
   1b328:	781b      	ldrb	r3, [r3, #0]
   1b32a:	b92b      	cbnz	r3, 1b338 <nmgr_shell_pkg_init+0x14>
   1b32c:	2300      	movs	r3, #0
   1b32e:	461a      	mov	r2, r3
   1b330:	4619      	mov	r1, r3
   1b332:	4618      	mov	r0, r3
   1b334:	f7f1 fa62 	bl	c7fc <__assert_func>

    rc = nmgr_transport_init(&nmgr_shell_transport, nmgr_shell_out,
   1b338:	4a07      	ldr	r2, [pc, #28]	; (1b358 <nmgr_shell_pkg_init+0x34>)
   1b33a:	4908      	ldr	r1, [pc, #32]	; (1b35c <nmgr_shell_pkg_init+0x38>)
   1b33c:	4808      	ldr	r0, [pc, #32]	; (1b360 <nmgr_shell_pkg_init+0x3c>)
   1b33e:	f7ff fd35 	bl	1adac <nmgr_transport_init>
      nmgr_shell_get_mtu);
    assert(rc == 0);
   1b342:	2800      	cmp	r0, #0
   1b344:	d1f2      	bne.n	1b32c <nmgr_shell_pkg_init+0x8>

    rc = shell_nlip_input_register(nmgr_shell_in, &nmgr_shell_transport);
   1b346:	4906      	ldr	r1, [pc, #24]	; (1b360 <nmgr_shell_pkg_init+0x3c>)
   1b348:	4806      	ldr	r0, [pc, #24]	; (1b364 <nmgr_shell_pkg_init+0x40>)
   1b34a:	f7f7 fdd7 	bl	12efc <shell_nlip_input_register>
    assert(rc == 0);
   1b34e:	2800      	cmp	r0, #0
   1b350:	d1ec      	bne.n	1b32c <nmgr_shell_pkg_init+0x8>
}
   1b352:	bd08      	pop	{r3, pc}
   1b354:	20006af4 	.word	0x20006af4
   1b358:	0001b2f9 	.word	0x0001b2f9
   1b35c:	0001b30d 	.word	0x0001b30d
   1b360:	200070a4 	.word	0x200070a4
   1b364:	0001b301 	.word	0x0001b301

0001b368 <config_pkg_init>:
#endif
#endif

void
config_pkg_init(void)
{
   1b368:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1b36a:	4b2d      	ldr	r3, [pc, #180]	; (1b420 <config_pkg_init+0xb8>)
   1b36c:	781b      	ldrb	r3, [r3, #0]
   1b36e:	b923      	cbnz	r3, 1b37a <config_pkg_init+0x12>
   1b370:	461a      	mov	r2, r3
   1b372:	4619      	mov	r1, r3
   1b374:	4618      	mov	r0, r3
   1b376:	f7f1 fa41 	bl	c7fc <__assert_func>

    conf_init();
   1b37a:	f7f5 ff07 	bl	1118c <conf_init>
    rc = flash_area_to_sectors(MYNEWT_VAL(CONFIG_FCB_FLASH_AREA), &cnt, NULL);
   1b37e:	2200      	movs	r2, #0
   1b380:	a903      	add	r1, sp, #12
   1b382:	2011      	movs	r0, #17
   1b384:	f000 fa0a 	bl	1b79c <flash_area_to_sectors>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1b388:	b138      	cbz	r0, 1b39a <config_pkg_init+0x32>
   1b38a:	2300      	movs	r3, #0
   1b38c:	4a25      	ldr	r2, [pc, #148]	; (1b424 <config_pkg_init+0xbc>)
   1b38e:	9300      	str	r3, [sp, #0]
   1b390:	6814      	ldr	r4, [r2, #0]
   1b392:	4619      	mov	r1, r3
   1b394:	461a      	mov	r2, r3
   1b396:	4618      	mov	r0, r3
   1b398:	47a0      	blx	r4
    SYSINIT_PANIC_ASSERT(
   1b39a:	9b03      	ldr	r3, [sp, #12]
   1b39c:	2b09      	cmp	r3, #9
   1b39e:	d907      	bls.n	1b3b0 <config_pkg_init+0x48>
   1b3a0:	2300      	movs	r3, #0
   1b3a2:	4a20      	ldr	r2, [pc, #128]	; (1b424 <config_pkg_init+0xbc>)
   1b3a4:	9300      	str	r3, [sp, #0]
   1b3a6:	6814      	ldr	r4, [r2, #0]
   1b3a8:	4619      	mov	r1, r3
   1b3aa:	461a      	mov	r2, r3
   1b3ac:	4618      	mov	r0, r3
   1b3ae:	47a0      	blx	r4
    config_init_conf_fcb.cf_fcb.f_sector_cnt = cnt;
   1b3b0:	4c1d      	ldr	r4, [pc, #116]	; (1b428 <config_pkg_init+0xc0>)
    flash_area_to_sectors(
   1b3b2:	4a1e      	ldr	r2, [pc, #120]	; (1b42c <config_pkg_init+0xc4>)
   1b3b4:	a903      	add	r1, sp, #12
   1b3b6:	2011      	movs	r0, #17
   1b3b8:	f000 f9f0 	bl	1b79c <flash_area_to_sectors>
    config_init_conf_fcb.cf_fcb.f_sector_cnt = cnt;
   1b3bc:	9b03      	ldr	r3, [sp, #12]
   1b3be:	7363      	strb	r3, [r4, #13]
    rc = conf_fcb_src(&config_init_conf_fcb);
   1b3c0:	4620      	mov	r0, r4
   1b3c2:	f000 f8e3 	bl	1b58c <conf_fcb_src>
    if (rc) {
   1b3c6:	b198      	cbz	r0, 1b3f0 <config_pkg_init+0x88>
        for (cnt = 0;
   1b3c8:	2300      	movs	r3, #0
            flash_area_erase(&conf_fcb_area[cnt], 0,
   1b3ca:	4d18      	ldr	r5, [pc, #96]	; (1b42c <config_pkg_init+0xc4>)
        for (cnt = 0;
   1b3cc:	9303      	str	r3, [sp, #12]
            flash_area_erase(&conf_fcb_area[cnt], 0,
   1b3ce:	260c      	movs	r6, #12
             cnt < config_init_conf_fcb.cf_fcb.f_sector_cnt;
   1b3d0:	9803      	ldr	r0, [sp, #12]
   1b3d2:	7b63      	ldrb	r3, [r4, #13]
        for (cnt = 0;
   1b3d4:	4298      	cmp	r0, r3
   1b3d6:	db19      	blt.n	1b40c <config_pkg_init+0xa4>
        rc = conf_fcb_src(&config_init_conf_fcb);
   1b3d8:	4813      	ldr	r0, [pc, #76]	; (1b428 <config_pkg_init+0xc0>)
   1b3da:	f000 f8d7 	bl	1b58c <conf_fcb_src>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1b3de:	b138      	cbz	r0, 1b3f0 <config_pkg_init+0x88>
   1b3e0:	2300      	movs	r3, #0
   1b3e2:	4a10      	ldr	r2, [pc, #64]	; (1b424 <config_pkg_init+0xbc>)
   1b3e4:	9300      	str	r3, [sp, #0]
   1b3e6:	6814      	ldr	r4, [r2, #0]
   1b3e8:	4619      	mov	r1, r3
   1b3ea:	461a      	mov	r2, r3
   1b3ec:	4618      	mov	r0, r3
   1b3ee:	47a0      	blx	r4
    rc = conf_fcb_dst(&config_init_conf_fcb);
   1b3f0:	480d      	ldr	r0, [pc, #52]	; (1b428 <config_pkg_init+0xc0>)
   1b3f2:	f000 f8f5 	bl	1b5e0 <conf_fcb_dst>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1b3f6:	b138      	cbz	r0, 1b408 <config_pkg_init+0xa0>
   1b3f8:	2300      	movs	r3, #0
   1b3fa:	4a0a      	ldr	r2, [pc, #40]	; (1b424 <config_pkg_init+0xbc>)
   1b3fc:	9300      	str	r3, [sp, #0]
   1b3fe:	6814      	ldr	r4, [r2, #0]
   1b400:	4619      	mov	r1, r3
   1b402:	461a      	mov	r2, r3
   1b404:	4618      	mov	r0, r3
   1b406:	47a0      	blx	r4
    config_init_fs();
#elif MYNEWT_VAL(CONFIG_FCB)
    config_init_fcb();
#endif
#endif
}
   1b408:	b004      	add	sp, #16
   1b40a:	bd70      	pop	{r4, r5, r6, pc}
            flash_area_erase(&conf_fcb_area[cnt], 0,
   1b40c:	fb06 5000 	mla	r0, r6, r0, r5
   1b410:	2100      	movs	r1, #0
   1b412:	6882      	ldr	r2, [r0, #8]
   1b414:	f000 fa20 	bl	1b858 <flash_area_erase>
             cnt++) {
   1b418:	9b03      	ldr	r3, [sp, #12]
   1b41a:	3301      	adds	r3, #1
   1b41c:	9303      	str	r3, [sp, #12]
   1b41e:	e7d7      	b.n	1b3d0 <config_pkg_init+0x68>
   1b420:	20006af4 	.word	0x20006af4
   1b424:	2000143c 	.word	0x2000143c
   1b428:	2000164c 	.word	0x2000164c
   1b42c:	200070c4 	.word	0x200070c4

0001b430 <config_pkg_init_stage2>:
     */
#if MYNEWT_VAL(CONFIG_NFFS)
    fs_mkdir(MYNEWT_VAL(CONFIG_NFFS_DIR));
#endif
#endif
}
   1b430:	4770      	bx	lr
	...

0001b434 <conf_fcb_load>:
    return 0;
}

static int
conf_fcb_load(struct conf_store *cs, conf_store_load_cb cb, void *cb_arg)
{
   1b434:	b507      	push	{r0, r1, r2, lr}
    struct conf_fcb_load_cb_arg arg;
    int rc;

    arg.cb = cb;
    arg.cb_arg = cb_arg;
    rc = fcb_walk(&cf->cf_fcb, 0, conf_fcb_load_cb, &arg);
   1b436:	3008      	adds	r0, #8
    arg.cb_arg = cb_arg;
   1b438:	e9cd 1200 	strd	r1, r2, [sp]
    rc = fcb_walk(&cf->cf_fcb, 0, conf_fcb_load_cb, &arg);
   1b43c:	466b      	mov	r3, sp
   1b43e:	4a05      	ldr	r2, [pc, #20]	; (1b454 <conf_fcb_load+0x20>)
   1b440:	2100      	movs	r1, #0
   1b442:	f002 fc59 	bl	1dcf8 <fcb_walk>
    if (rc) {
        return OS_EINVAL;
   1b446:	2800      	cmp	r0, #0
    }
    return OS_OK;
}
   1b448:	bf18      	it	ne
   1b44a:	2002      	movne	r0, #2
   1b44c:	b003      	add	sp, #12
   1b44e:	f85d fb04 	ldr.w	pc, [sp], #4
   1b452:	bf00      	nop
   1b454:	0001b459 	.word	0x0001b459

0001b458 <conf_fcb_load_cb>:
{
   1b458:	b570      	push	{r4, r5, r6, lr}
   1b45a:	8985      	ldrh	r5, [r0, #12]
   1b45c:	f240 135f 	movw	r3, #351	; 0x15f
   1b460:	429d      	cmp	r5, r3
   1b462:	b0da      	sub	sp, #360	; 0x168
   1b464:	bf28      	it	cs
   1b466:	461d      	movcs	r5, r3
    rc = flash_area_read(loc->fe_area, loc->fe_data_off, buf, len);
   1b468:	ae02      	add	r6, sp, #8
{
   1b46a:	460c      	mov	r4, r1
    rc = flash_area_read(loc->fe_area, loc->fe_data_off, buf, len);
   1b46c:	462b      	mov	r3, r5
   1b46e:	6881      	ldr	r1, [r0, #8]
   1b470:	6800      	ldr	r0, [r0, #0]
   1b472:	4632      	mov	r2, r6
   1b474:	f000 f9cc 	bl	1b810 <flash_area_read>
    if (rc) {
   1b478:	b958      	cbnz	r0, 1b492 <conf_fcb_load_cb+0x3a>
    buf[len] = '\0';
   1b47a:	5570      	strb	r0, [r6, r5]
    rc = conf_line_parse(buf, &name_str, &val_str);
   1b47c:	aa01      	add	r2, sp, #4
   1b47e:	4669      	mov	r1, sp
   1b480:	4630      	mov	r0, r6
   1b482:	f000 f8f7 	bl	1b674 <conf_line_parse>
    if (rc) {
   1b486:	b920      	cbnz	r0, 1b492 <conf_fcb_load_cb+0x3a>
    argp->cb(name_str, val_str, argp->cb_arg);
   1b488:	e9d4 3200 	ldrd	r3, r2, [r4]
   1b48c:	e9dd 0100 	ldrd	r0, r1, [sp]
   1b490:	4798      	blx	r3
}
   1b492:	2000      	movs	r0, #0
   1b494:	b05a      	add	sp, #360	; 0x168
   1b496:	bd70      	pop	{r4, r5, r6, pc}

0001b498 <conf_fcb_compress_internal.part.0>:
    rc = conf_line_parse(buf, name, val);
    return rc;
}

static void
conf_fcb_compress_internal(struct fcb *fcb,
   1b498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b49c:	f5ad 7d3c 	sub.w	sp, sp, #752	; 0x2f0
    rc = fcb_append_to_scratch(fcb);
    if (rc) {
        return; /* XXX */
    }

    loc1.fe_area = NULL;
   1b4a0:	ac04      	add	r4, sp, #16
   1b4a2:	2300      	movs	r3, #0
    loc1.fe_elem_off = 0;
   1b4a4:	e9c4 3300 	strd	r3, r3, [r4]
conf_fcb_compress_internal(struct fcb *fcb,
   1b4a8:	4606      	mov	r6, r0
   1b4aa:	4688      	mov	r8, r1
   1b4ac:	4691      	mov	r9, r2
    rc = flash_area_read(loc->fe_area, loc->fe_data_off, buf, loc->fe_data_len);
   1b4ae:	f50d 7ac8 	add.w	sl, sp, #400	; 0x190
   1b4b2:	af0c      	add	r7, sp, #48	; 0x30
    while (fcb_getnext(fcb, &loc1) == 0) {
   1b4b4:	4621      	mov	r1, r4
   1b4b6:	4630      	mov	r0, r6
   1b4b8:	f002 fbca 	bl	1dc50 <fcb_getnext>
   1b4bc:	b130      	cbz	r0, 1b4cc <conf_fcb_compress_internal.part.0+0x34>
        if (rc) {
            continue;
        }
        fcb_append_finish(fcb, &loc2);
    }
    rc = fcb_rotate(fcb);
   1b4be:	4630      	mov	r0, r6
   1b4c0:	f002 fbe0 	bl	1dc84 <fcb_rotate>
    if (rc) {
        /* XXXX */
        ;
    }
}
   1b4c4:	f50d 7d3c 	add.w	sp, sp, #752	; 0x2f0
   1b4c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (loc1.fe_area != fcb->f_oldest) {
   1b4cc:	6820      	ldr	r0, [r4, #0]
   1b4ce:	69b3      	ldr	r3, [r6, #24]
   1b4d0:	4298      	cmp	r0, r3
   1b4d2:	d1f4      	bne.n	1b4be <conf_fcb_compress_internal.part.0+0x26>
    rc = flash_area_read(loc->fe_area, loc->fe_data_off, buf, loc->fe_data_len);
   1b4d4:	89a3      	ldrh	r3, [r4, #12]
   1b4d6:	68a1      	ldr	r1, [r4, #8]
   1b4d8:	463a      	mov	r2, r7
   1b4da:	f000 f999 	bl	1b810 <flash_area_read>
    if (rc) {
   1b4de:	2800      	cmp	r0, #0
   1b4e0:	d1e8      	bne.n	1b4b4 <conf_fcb_compress_internal.part.0+0x1c>
    buf[loc->fe_data_len] = '\0';
   1b4e2:	89a3      	ldrh	r3, [r4, #12]
    rc = conf_line_parse(buf, name, val);
   1b4e4:	aa01      	add	r2, sp, #4
    buf[loc->fe_data_len] = '\0';
   1b4e6:	54f8      	strb	r0, [r7, r3]
    rc = conf_line_parse(buf, name, val);
   1b4e8:	4669      	mov	r1, sp
   1b4ea:	4638      	mov	r0, r7
   1b4ec:	f000 f8c2 	bl	1b674 <conf_line_parse>
        if (rc) {
   1b4f0:	2800      	cmp	r0, #0
   1b4f2:	d1de      	bne.n	1b4b2 <conf_fcb_compress_internal.part.0+0x1a>
        if (!val1) {
   1b4f4:	9b01      	ldr	r3, [sp, #4]
   1b4f6:	2b00      	cmp	r3, #0
   1b4f8:	d0db      	beq.n	1b4b2 <conf_fcb_compress_internal.part.0+0x1a>
        loc2 = loc1;
   1b4fa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1b4fe:	ad08      	add	r5, sp, #32
   1b500:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
        while (fcb_getnext(fcb, &loc2) == 0) {
   1b504:	4629      	mov	r1, r5
   1b506:	4630      	mov	r0, r6
   1b508:	f002 fba2 	bl	1dc50 <fcb_getnext>
   1b50c:	b320      	cbz	r0, 1b558 <conf_fcb_compress_internal.part.0+0xc0>
        if (copy_or_not) {
   1b50e:	f1b8 0f00 	cmp.w	r8, #0
   1b512:	d005      	beq.n	1b520 <conf_fcb_compress_internal.part.0+0x88>
            if (copy_or_not(name1, val1, cn_arg)) {
   1b514:	e9dd 0100 	ldrd	r0, r1, [sp]
   1b518:	464a      	mov	r2, r9
   1b51a:	47c0      	blx	r8
   1b51c:	2800      	cmp	r0, #0
   1b51e:	d1c8      	bne.n	1b4b2 <conf_fcb_compress_internal.part.0+0x1a>
        rc = flash_area_read(loc1.fe_area, loc1.fe_data_off, buf1,
   1b520:	89a3      	ldrh	r3, [r4, #12]
   1b522:	68a1      	ldr	r1, [r4, #8]
   1b524:	6820      	ldr	r0, [r4, #0]
   1b526:	463a      	mov	r2, r7
   1b528:	f000 f972 	bl	1b810 <flash_area_read>
        if (rc) {
   1b52c:	2800      	cmp	r0, #0
   1b52e:	d1c0      	bne.n	1b4b2 <conf_fcb_compress_internal.part.0+0x1a>
        rc = fcb_append(fcb, loc1.fe_data_len, &loc2);
   1b530:	89a1      	ldrh	r1, [r4, #12]
   1b532:	462a      	mov	r2, r5
   1b534:	4630      	mov	r0, r6
   1b536:	f002 fa09 	bl	1d94c <fcb_append>
        if (rc) {
   1b53a:	2800      	cmp	r0, #0
   1b53c:	d1b9      	bne.n	1b4b2 <conf_fcb_compress_internal.part.0+0x1a>
        rc = flash_area_write(loc2.fe_area, loc2.fe_data_off, buf1,
   1b53e:	89a3      	ldrh	r3, [r4, #12]
   1b540:	68a9      	ldr	r1, [r5, #8]
   1b542:	6828      	ldr	r0, [r5, #0]
   1b544:	463a      	mov	r2, r7
   1b546:	f000 f975 	bl	1b834 <flash_area_write>
        if (rc) {
   1b54a:	2800      	cmp	r0, #0
   1b54c:	d1b1      	bne.n	1b4b2 <conf_fcb_compress_internal.part.0+0x1a>
        fcb_append_finish(fcb, &loc2);
   1b54e:	4629      	mov	r1, r5
   1b550:	4630      	mov	r0, r6
   1b552:	f002 fa7d 	bl	1da50 <fcb_append_finish>
   1b556:	e7ac      	b.n	1b4b2 <conf_fcb_compress_internal.part.0+0x1a>
    rc = flash_area_read(loc->fe_area, loc->fe_data_off, buf, loc->fe_data_len);
   1b558:	89ab      	ldrh	r3, [r5, #12]
   1b55a:	68a9      	ldr	r1, [r5, #8]
   1b55c:	6828      	ldr	r0, [r5, #0]
   1b55e:	4652      	mov	r2, sl
   1b560:	f000 f956 	bl	1b810 <flash_area_read>
    if (rc) {
   1b564:	2800      	cmp	r0, #0
   1b566:	d1cd      	bne.n	1b504 <conf_fcb_compress_internal.part.0+0x6c>
    buf[loc->fe_data_len] = '\0';
   1b568:	89ab      	ldrh	r3, [r5, #12]
    rc = conf_line_parse(buf, name, val);
   1b56a:	aa03      	add	r2, sp, #12
    buf[loc->fe_data_len] = '\0';
   1b56c:	f80a 0003 	strb.w	r0, [sl, r3]
    rc = conf_line_parse(buf, name, val);
   1b570:	a902      	add	r1, sp, #8
   1b572:	4650      	mov	r0, sl
   1b574:	f000 f87e 	bl	1b674 <conf_line_parse>
            if (rc) {
   1b578:	2800      	cmp	r0, #0
   1b57a:	d1c3      	bne.n	1b504 <conf_fcb_compress_internal.part.0+0x6c>
            if (!strcmp(name1, name2)) {
   1b57c:	9902      	ldr	r1, [sp, #8]
   1b57e:	9800      	ldr	r0, [sp, #0]
   1b580:	f7f4 fe9e 	bl	102c0 <strcmp>
   1b584:	2800      	cmp	r0, #0
   1b586:	d1bd      	bne.n	1b504 <conf_fcb_compress_internal.part.0+0x6c>
   1b588:	e793      	b.n	1b4b2 <conf_fcb_compress_internal.part.0+0x1a>
	...

0001b58c <conf_fcb_src>:
{
   1b58c:	b570      	push	{r4, r5, r6, lr}
    cf->cf_fcb.f_version = CONF_FCB_VERS;
   1b58e:	2301      	movs	r3, #1
   1b590:	7303      	strb	r3, [r0, #12]
    if (cf->cf_fcb.f_sector_cnt > 1) {
   1b592:	7b43      	ldrb	r3, [r0, #13]
   1b594:	2b01      	cmp	r3, #1
   1b596:	bf94      	ite	ls
   1b598:	2300      	movls	r3, #0
   1b59a:	2301      	movhi	r3, #1
{
   1b59c:	4604      	mov	r4, r0
    if (cf->cf_fcb.f_sector_cnt > 1) {
   1b59e:	7383      	strb	r3, [r0, #14]
        rc = fcb_init(&cf->cf_fcb);
   1b5a0:	f100 0608 	add.w	r6, r0, #8
   1b5a4:	4630      	mov	r0, r6
   1b5a6:	f002 f929 	bl	1d7fc <fcb_init>
        if (rc) {
   1b5aa:	4605      	mov	r5, r0
   1b5ac:	b998      	cbnz	r0, 1b5d6 <conf_fcb_src+0x4a>
        if (cf->cf_fcb.f_scratch_cnt &&
   1b5ae:	7ba3      	ldrb	r3, [r4, #14]
   1b5b0:	b153      	cbz	r3, 1b5c8 <conf_fcb_src+0x3c>
            fcb_free_sector_cnt(&cf->cf_fcb) < 1) {
   1b5b2:	4630      	mov	r0, r6
   1b5b4:	f002 f8b0 	bl	1d718 <fcb_free_sector_cnt>
        if (cf->cf_fcb.f_scratch_cnt &&
   1b5b8:	2800      	cmp	r0, #0
   1b5ba:	dc05      	bgt.n	1b5c8 <conf_fcb_src+0x3c>
            flash_area_erase(cf->cf_fcb.f_active.fe_area, 0,
   1b5bc:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1b5be:	4629      	mov	r1, r5
   1b5c0:	6882      	ldr	r2, [r0, #8]
   1b5c2:	f000 f949 	bl	1b858 <flash_area_erase>
        rc = fcb_init(&cf->cf_fcb);
   1b5c6:	e7ed      	b.n	1b5a4 <conf_fcb_src+0x18>
    cf->cf_store.cs_itf = &conf_fcb_itf;
   1b5c8:	4b04      	ldr	r3, [pc, #16]	; (1b5dc <conf_fcb_src+0x50>)
   1b5ca:	6063      	str	r3, [r4, #4]
    conf_src_register(&cf->cf_store);
   1b5cc:	4620      	mov	r0, r4
   1b5ce:	f7f5 fd23 	bl	11018 <conf_src_register>
}
   1b5d2:	4628      	mov	r0, r5
   1b5d4:	bd70      	pop	{r4, r5, r6, pc}
            return OS_INVALID_PARM;
   1b5d6:	2503      	movs	r5, #3
   1b5d8:	e7fb      	b.n	1b5d2 <conf_fcb_src+0x46>
   1b5da:	bf00      	nop
   1b5dc:	20001684 	.word	0x20001684

0001b5e0 <conf_fcb_dst>:
{
   1b5e0:	b508      	push	{r3, lr}
    cf->cf_store.cs_itf = &conf_fcb_itf;
   1b5e2:	4b03      	ldr	r3, [pc, #12]	; (1b5f0 <conf_fcb_dst+0x10>)
   1b5e4:	6043      	str	r3, [r0, #4]
    conf_dst_register(&cf->cf_store);
   1b5e6:	f7f5 fd2b 	bl	11040 <conf_dst_register>
}
   1b5ea:	2000      	movs	r0, #0
   1b5ec:	bd08      	pop	{r3, pc}
   1b5ee:	bf00      	nop
   1b5f0:	20001684 	.word	0x20001684

0001b5f4 <conf_fcb_kv_save>:
    return OS_OK;
}

int
conf_fcb_kv_save(struct fcb *fcb, const char *name, const char *value)
{
   1b5f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b5f6:	4613      	mov	r3, r2
   1b5f8:	b0dd      	sub	sp, #372	; 0x174
   1b5fa:	4605      	mov	r5, r0
    char buf[CONF_MAX_NAME_LEN + CONF_MAX_VAL_LEN + 32];
    int len;

    if (!name) {
   1b5fc:	460a      	mov	r2, r1
   1b5fe:	b919      	cbnz	r1, 1b608 <conf_fcb_kv_save+0x14>
        return OS_INVALID_PARM;
   1b600:	2403      	movs	r4, #3
    len = conf_line_make(buf, sizeof(buf), name, value);
    if (len < 0 || len + 2 > sizeof(buf)) {
        return OS_INVALID_PARM;
    }
    return conf_fcb_append(fcb, buf, len);
}
   1b602:	4620      	mov	r0, r4
   1b604:	b05d      	add	sp, #372	; 0x174
   1b606:	bdf0      	pop	{r4, r5, r6, r7, pc}
    len = conf_line_make(buf, sizeof(buf), name, value);
   1b608:	f44f 71b0 	mov.w	r1, #352	; 0x160
   1b60c:	a804      	add	r0, sp, #16
   1b60e:	f000 f879 	bl	1b704 <conf_line_make>
    if (len < 0 || len + 2 > sizeof(buf)) {
   1b612:	f5b0 7faf 	cmp.w	r0, #350	; 0x15e
    len = conf_line_make(buf, sizeof(buf), name, value);
   1b616:	4604      	mov	r4, r0
    if (len < 0 || len + 2 > sizeof(buf)) {
   1b618:	d8f2      	bhi.n	1b600 <conf_fcb_kv_save+0xc>
   1b61a:	260a      	movs	r6, #10
        rc = fcb_append(fcb, len, &loc);
   1b61c:	b287      	uxth	r7, r0
   1b61e:	466a      	mov	r2, sp
   1b620:	4639      	mov	r1, r7
   1b622:	4628      	mov	r0, r5
   1b624:	f002 f992 	bl	1d94c <fcb_append>
        if (rc != FCB_ERR_NOSPACE) {
   1b628:	1d03      	adds	r3, r0, #4
   1b62a:	d10e      	bne.n	1b64a <conf_fcb_kv_save+0x56>
        if (fcb->f_scratch_cnt == 0) {
   1b62c:	79ab      	ldrb	r3, [r5, #6]
   1b62e:	b1e3      	cbz	r3, 1b66a <conf_fcb_kv_save+0x76>
    rc = fcb_append_to_scratch(fcb);
   1b630:	4628      	mov	r0, r5
   1b632:	f002 f96f 	bl	1d914 <fcb_append_to_scratch>
    if (rc) {
   1b636:	4602      	mov	r2, r0
   1b638:	b918      	cbnz	r0, 1b642 <conf_fcb_kv_save+0x4e>
   1b63a:	4601      	mov	r1, r0
   1b63c:	4628      	mov	r0, r5
   1b63e:	f7ff ff2b 	bl	1b498 <conf_fcb_compress_internal.part.0>
    for (i = 0; i < 10; i++) {
   1b642:	3e01      	subs	r6, #1
   1b644:	d1eb      	bne.n	1b61e <conf_fcb_kv_save+0x2a>
        return OS_EINVAL;
   1b646:	2402      	movs	r4, #2
   1b648:	e7db      	b.n	1b602 <conf_fcb_kv_save+0xe>
    if (rc) {
   1b64a:	2800      	cmp	r0, #0
   1b64c:	d1fb      	bne.n	1b646 <conf_fcb_kv_save+0x52>
    rc = flash_area_write(loc.fe_area, loc.fe_data_off, buf, len);
   1b64e:	4623      	mov	r3, r4
   1b650:	9902      	ldr	r1, [sp, #8]
   1b652:	9800      	ldr	r0, [sp, #0]
   1b654:	aa04      	add	r2, sp, #16
   1b656:	f000 f8ed 	bl	1b834 <flash_area_write>
    if (rc) {
   1b65a:	4604      	mov	r4, r0
   1b65c:	2800      	cmp	r0, #0
   1b65e:	d1f2      	bne.n	1b646 <conf_fcb_kv_save+0x52>
    fcb_append_finish(fcb, &loc);
   1b660:	4669      	mov	r1, sp
   1b662:	4628      	mov	r0, r5
   1b664:	f002 f9f4 	bl	1da50 <fcb_append_finish>
    return OS_OK;
   1b668:	e7cb      	b.n	1b602 <conf_fcb_kv_save+0xe>
            return OS_ENOMEM;
   1b66a:	2401      	movs	r4, #1
    return conf_fcb_append(fcb, buf, len);
   1b66c:	e7c9      	b.n	1b602 <conf_fcb_kv_save+0xe>

0001b66e <conf_fcb_save>:
    return conf_fcb_kv_save(&cf->cf_fcb, name, value);
   1b66e:	3008      	adds	r0, #8
   1b670:	f7ff bfc0 	b.w	1b5f4 <conf_fcb_kv_save>

0001b674 <conf_line_parse>:
#include "config/config.h"
#include "config_priv.h"

int
conf_line_parse(char *buf, char **namep, char **valp)
{
   1b674:	b5f0      	push	{r4, r5, r6, r7, lr}
        FIND_NAME_END,
        FIND_VAL,
        FIND_VAL_END
    } state = FIND_NAME;

    *valp = NULL;
   1b676:	2400      	movs	r4, #0
   1b678:	4d21      	ldr	r5, [pc, #132]	; (1b700 <conf_line_parse+0x8c>)
   1b67a:	6014      	str	r4, [r2, #0]
                state = FIND_VAL_END;
            }
            break;
        case FIND_VAL_END:
            if (!isprint((unsigned char)*cp)) {
                *cp = '\0';
   1b67c:	4626      	mov	r6, r4
   1b67e:	4607      	mov	r7, r0
    for (cp = buf; *cp != '\0'; cp++) {
   1b680:	f810 3b01 	ldrb.w	r3, [r0], #1
   1b684:	b933      	cbnz	r3, 1b694 <conf_line_parse+0x20>
            }
            break;
        }
    }
    if (state == FIND_VAL_END || state == FIND_VAL) {
   1b686:	1ea0      	subs	r0, r4, #2
        return 0;
    } else {
        return -1;
    }
}
   1b688:	2801      	cmp	r0, #1
   1b68a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b68e:	bf98      	it	ls
   1b690:	2000      	movls	r0, #0
   1b692:	bdf0      	pop	{r4, r5, r6, r7, pc}
        switch (state) {
   1b694:	2c03      	cmp	r4, #3
   1b696:	d8f2      	bhi.n	1b67e <conf_line_parse+0xa>
   1b698:	e8df f004 	tbb	[pc, r4]
   1b69c:	2b200d02 	.word	0x2b200d02
   1b6a0:	3b09      	subs	r3, #9
   1b6a2:	b2db      	uxtb	r3, r3
   1b6a4:	2b17      	cmp	r3, #23
   1b6a6:	d803      	bhi.n	1b6b0 <conf_line_parse+0x3c>
   1b6a8:	fa25 f303 	lsr.w	r3, r5, r3
   1b6ac:	07db      	lsls	r3, r3, #31
   1b6ae:	d4e6      	bmi.n	1b67e <conf_line_parse+0xa>
                *namep = cp;
   1b6b0:	600f      	str	r7, [r1, #0]
                state = FIND_NAME_END;
   1b6b2:	2401      	movs	r4, #1
   1b6b4:	e7e3      	b.n	1b67e <conf_line_parse+0xa>
            if (*cp == '=') {
   1b6b6:	2b3d      	cmp	r3, #61	; 0x3d
   1b6b8:	d103      	bne.n	1b6c2 <conf_line_parse+0x4e>
                *cp = '\0';
   1b6ba:	f800 6c01 	strb.w	r6, [r0, #-1]
                state = FIND_VAL;
   1b6be:	2402      	movs	r4, #2
   1b6c0:	e7dd      	b.n	1b67e <conf_line_parse+0xa>
   1b6c2:	3b09      	subs	r3, #9
   1b6c4:	b2db      	uxtb	r3, r3
   1b6c6:	2b17      	cmp	r3, #23
   1b6c8:	d8d9      	bhi.n	1b67e <conf_line_parse+0xa>
   1b6ca:	fa25 f303 	lsr.w	r3, r5, r3
   1b6ce:	43db      	mvns	r3, r3
   1b6d0:	f013 0301 	ands.w	r3, r3, #1
   1b6d4:	d1d3      	bne.n	1b67e <conf_line_parse+0xa>
                *cp = '\0';
   1b6d6:	f800 3c01 	strb.w	r3, [r0, #-1]
   1b6da:	e7d0      	b.n	1b67e <conf_line_parse+0xa>
   1b6dc:	3b09      	subs	r3, #9
   1b6de:	b2db      	uxtb	r3, r3
   1b6e0:	2b17      	cmp	r3, #23
   1b6e2:	d803      	bhi.n	1b6ec <conf_line_parse+0x78>
   1b6e4:	fa25 f303 	lsr.w	r3, r5, r3
   1b6e8:	07db      	lsls	r3, r3, #31
   1b6ea:	d4c8      	bmi.n	1b67e <conf_line_parse+0xa>
                *valp = cp;
   1b6ec:	6017      	str	r7, [r2, #0]
                state = FIND_VAL_END;
   1b6ee:	2403      	movs	r4, #3
   1b6f0:	e7c5      	b.n	1b67e <conf_line_parse+0xa>
	return (__c >= 0x20 && __c <= 0x7e);
   1b6f2:	3b20      	subs	r3, #32
            if (!isprint((unsigned char)*cp)) {
   1b6f4:	2b5e      	cmp	r3, #94	; 0x5e
                *cp = '\0';
   1b6f6:	bf88      	it	hi
   1b6f8:	f800 6c01 	strbhi.w	r6, [r0, #-1]
    for (cp = buf; *cp != '\0'; cp++) {
   1b6fc:	e7bf      	b.n	1b67e <conf_line_parse+0xa>
   1b6fe:	bf00      	nop
   1b700:	00800013 	.word	0x00800013

0001b704 <conf_line_make>:

int
conf_line_make(char *dst, int dlen, const char *name, const char *value)
{
   1b704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b708:	4605      	mov	r5, r0
    int nlen;
    int vlen;
    int off;

    nlen = strlen(name);
   1b70a:	4610      	mov	r0, r2
{
   1b70c:	4689      	mov	r9, r1
   1b70e:	4690      	mov	r8, r2
   1b710:	461e      	mov	r6, r3
    nlen = strlen(name);
   1b712:	f7fe fbad 	bl	19e70 <strlen>
   1b716:	4607      	mov	r7, r0
    if (value) {
   1b718:	b1e6      	cbz	r6, 1b754 <conf_line_make+0x50>
        vlen = strlen(value);
   1b71a:	4630      	mov	r0, r6
   1b71c:	f7fe fba8 	bl	19e70 <strlen>
   1b720:	4604      	mov	r4, r0
    } else {
        vlen = 0;
    }
    if (nlen + vlen + 2 > dlen) {
   1b722:	19e3      	adds	r3, r4, r7
   1b724:	3301      	adds	r3, #1
   1b726:	454b      	cmp	r3, r9
   1b728:	da16      	bge.n	1b758 <conf_line_make+0x54>
        return -1;
    }
    memcpy(dst, name, nlen);
   1b72a:	4641      	mov	r1, r8
   1b72c:	463a      	mov	r2, r7
   1b72e:	4628      	mov	r0, r5
   1b730:	f7f4 fd9e 	bl	10270 <memcpy>
    off = nlen;
    dst[off++] = '=';
   1b734:	f107 0801 	add.w	r8, r7, #1
   1b738:	233d      	movs	r3, #61	; 0x3d
   1b73a:	55eb      	strb	r3, [r5, r7]

    memcpy(dst + off, value, vlen);
   1b73c:	4622      	mov	r2, r4
   1b73e:	4631      	mov	r1, r6
   1b740:	eb05 0008 	add.w	r0, r5, r8
   1b744:	f7f4 fd94 	bl	10270 <memcpy>
    off += vlen;
   1b748:	eb04 0008 	add.w	r0, r4, r8
    dst[off] = '\0';
   1b74c:	2300      	movs	r3, #0
   1b74e:	542b      	strb	r3, [r5, r0]

    return off;
}
   1b750:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        vlen = 0;
   1b754:	4634      	mov	r4, r6
   1b756:	e7e4      	b.n	1b722 <conf_line_make+0x1e>
        return -1;
   1b758:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b75c:	e7f8      	b.n	1b750 <conf_line_make+0x4c>
	...

0001b760 <flash_area_open>:
flash_area_open(uint8_t id, const struct flash_area **fap)
{
    const struct flash_area *area;
    int i;

    if (flash_map == NULL) {
   1b760:	4b0c      	ldr	r3, [pc, #48]	; (1b794 <flash_area_open+0x34>)
   1b762:	681b      	ldr	r3, [r3, #0]
{
   1b764:	b570      	push	{r4, r5, r6, lr}
    if (flash_map == NULL) {
   1b766:	b18b      	cbz	r3, 1b78c <flash_area_open+0x2c>
        return SYS_EACCES;
    }

    for (i = 0; i < flash_map_entries; i++) {
   1b768:	4a0b      	ldr	r2, [pc, #44]	; (1b798 <flash_area_open+0x38>)
   1b76a:	6814      	ldr	r4, [r2, #0]
   1b76c:	2200      	movs	r2, #0
   1b76e:	4294      	cmp	r4, r2
   1b770:	dc02      	bgt.n	1b778 <flash_area_open+0x18>
            *fap = area;
            return 0;
        }
    }

    return SYS_ENOENT;
   1b772:	f06f 0003 	mvn.w	r0, #3
   1b776:	e006      	b.n	1b786 <flash_area_open+0x26>
        area = flash_map + i;
   1b778:	461d      	mov	r5, r3
        if (area->fa_id == id) {
   1b77a:	f813 6b0c 	ldrb.w	r6, [r3], #12
   1b77e:	4286      	cmp	r6, r0
   1b780:	d102      	bne.n	1b788 <flash_area_open+0x28>
            *fap = area;
   1b782:	600d      	str	r5, [r1, #0]
            return 0;
   1b784:	2000      	movs	r0, #0
}
   1b786:	bd70      	pop	{r4, r5, r6, pc}
    for (i = 0; i < flash_map_entries; i++) {
   1b788:	3201      	adds	r2, #1
   1b78a:	e7f0      	b.n	1b76e <flash_area_open+0xe>
        return SYS_EACCES;
   1b78c:	f06f 0006 	mvn.w	r0, #6
   1b790:	e7f9      	b.n	1b786 <flash_area_open+0x26>
   1b792:	bf00      	nop
   1b794:	20007130 	.word	0x20007130
   1b798:	20007134 	.word	0x20007134

0001b79c <flash_area_to_sectors>:

int
flash_area_to_sectors(int id, int *cnt, struct flash_area *ret)
{
   1b79c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    uint32_t start;
    uint32_t size;
    int rc;
    int i;

    rc = flash_area_open(id, &fa);
   1b7a0:	fa5f f980 	uxtb.w	r9, r0
{
   1b7a4:	460f      	mov	r7, r1
    rc = flash_area_open(id, &fa);
   1b7a6:	4648      	mov	r0, r9
   1b7a8:	a901      	add	r1, sp, #4
{
   1b7aa:	4614      	mov	r4, r2
    rc = flash_area_open(id, &fa);
   1b7ac:	f7ff ffd8 	bl	1b760 <flash_area_open>
    if (rc != 0) {
   1b7b0:	4605      	mov	r5, r0
   1b7b2:	b948      	cbnz	r0, 1b7c8 <flash_area_to_sectors+0x2c>
        return rc;
    }

    *cnt = 0;

    hf = hal_bsp_flash_dev(fa->fa_device_id);
   1b7b4:	9b01      	ldr	r3, [sp, #4]
    *cnt = 0;
   1b7b6:	6038      	str	r0, [r7, #0]
    hf = hal_bsp_flash_dev(fa->fa_device_id);
   1b7b8:	7858      	ldrb	r0, [r3, #1]
   1b7ba:	f7f9 fe85 	bl	154c8 <hal_bsp_flash_dev>
    for (i = 0; i < hf->hf_sector_cnt; i++) {
   1b7be:	46a8      	mov	r8, r5
    hf = hal_bsp_flash_dev(fa->fa_device_id);
   1b7c0:	4606      	mov	r6, r0
    for (i = 0; i < hf->hf_sector_cnt; i++) {
   1b7c2:	68f3      	ldr	r3, [r6, #12]
   1b7c4:	4543      	cmp	r3, r8
   1b7c6:	dc03      	bgt.n	1b7d0 <flash_area_to_sectors+0x34>
            (*cnt)++;
        }
    }
    flash_area_close(fa);
    return 0;
}
   1b7c8:	4628      	mov	r0, r5
   1b7ca:	b004      	add	sp, #16
   1b7cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hf->hf_itf->hff_sector_info(hf, i, &start, &size);
   1b7d0:	6833      	ldr	r3, [r6, #0]
   1b7d2:	aa02      	add	r2, sp, #8
   1b7d4:	f8d3 a00c 	ldr.w	sl, [r3, #12]
   1b7d8:	4641      	mov	r1, r8
   1b7da:	ab03      	add	r3, sp, #12
   1b7dc:	4630      	mov	r0, r6
   1b7de:	47d0      	blx	sl
        if (start >= fa->fa_off && start < fa->fa_off + fa->fa_size) {
   1b7e0:	9801      	ldr	r0, [sp, #4]
   1b7e2:	9a02      	ldr	r2, [sp, #8]
   1b7e4:	6843      	ldr	r3, [r0, #4]
   1b7e6:	4293      	cmp	r3, r2
   1b7e8:	d80f      	bhi.n	1b80a <flash_area_to_sectors+0x6e>
   1b7ea:	6881      	ldr	r1, [r0, #8]
   1b7ec:	440b      	add	r3, r1
   1b7ee:	429a      	cmp	r2, r3
   1b7f0:	d20b      	bcs.n	1b80a <flash_area_to_sectors+0x6e>
            if (ret) {
   1b7f2:	b13c      	cbz	r4, 1b804 <flash_area_to_sectors+0x68>
                ret->fa_id = id;
   1b7f4:	f884 9000 	strb.w	r9, [r4]
                ret->fa_device_id = fa->fa_device_id;
   1b7f8:	7843      	ldrb	r3, [r0, #1]
   1b7fa:	7063      	strb	r3, [r4, #1]
                ret->fa_size = size;
   1b7fc:	9b03      	ldr	r3, [sp, #12]
                ret->fa_off = start;
   1b7fe:	6062      	str	r2, [r4, #4]
                ret->fa_size = size;
   1b800:	60a3      	str	r3, [r4, #8]
                ret++;
   1b802:	340c      	adds	r4, #12
            (*cnt)++;
   1b804:	683b      	ldr	r3, [r7, #0]
   1b806:	3301      	adds	r3, #1
   1b808:	603b      	str	r3, [r7, #0]
    for (i = 0; i < hf->hf_sector_cnt; i++) {
   1b80a:	f108 0801 	add.w	r8, r8, #1
   1b80e:	e7d8      	b.n	1b7c2 <flash_area_to_sectors+0x26>

0001b810 <flash_area_read>:
}

int
flash_area_read(const struct flash_area *fa, uint32_t off, void *dst,
    uint32_t len)
{
   1b810:	b430      	push	{r4, r5}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   1b812:	6885      	ldr	r5, [r0, #8]
   1b814:	428d      	cmp	r5, r1
{
   1b816:	461c      	mov	r4, r3
    if (off > fa->fa_size || off + len > fa->fa_size) {
   1b818:	d308      	bcc.n	1b82c <flash_area_read+0x1c>
   1b81a:	440c      	add	r4, r1
   1b81c:	42a5      	cmp	r5, r4
   1b81e:	d305      	bcc.n	1b82c <flash_area_read+0x1c>
        return -1;
    }
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
   1b820:	6844      	ldr	r4, [r0, #4]
   1b822:	7840      	ldrb	r0, [r0, #1]
   1b824:	4421      	add	r1, r4
}
   1b826:	bc30      	pop	{r4, r5}
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
   1b828:	f002 bac9 	b.w	1ddbe <hal_flash_read>
}
   1b82c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b830:	bc30      	pop	{r4, r5}
   1b832:	4770      	bx	lr

0001b834 <flash_area_write>:

int
flash_area_write(const struct flash_area *fa, uint32_t off, const void *src,
    uint32_t len)
{
   1b834:	b430      	push	{r4, r5}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   1b836:	6885      	ldr	r5, [r0, #8]
   1b838:	428d      	cmp	r5, r1
{
   1b83a:	461c      	mov	r4, r3
    if (off > fa->fa_size || off + len > fa->fa_size) {
   1b83c:	d308      	bcc.n	1b850 <flash_area_write+0x1c>
   1b83e:	440c      	add	r4, r1
   1b840:	42a5      	cmp	r5, r4
   1b842:	d305      	bcc.n	1b850 <flash_area_write+0x1c>
        return -1;
    }
    return hal_flash_write(fa->fa_device_id, fa->fa_off + off,
   1b844:	6844      	ldr	r4, [r0, #4]
   1b846:	7840      	ldrb	r0, [r0, #1]
   1b848:	4421      	add	r1, r4
                           (void *)src, len);
}
   1b84a:	bc30      	pop	{r4, r5}
    return hal_flash_write(fa->fa_device_id, fa->fa_off + off,
   1b84c:	f002 bada 	b.w	1de04 <hal_flash_write>
}
   1b850:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b854:	bc30      	pop	{r4, r5}
   1b856:	4770      	bx	lr

0001b858 <flash_area_erase>:

int
flash_area_erase(const struct flash_area *fa, uint32_t off, uint32_t len)
{
   1b858:	b410      	push	{r4}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   1b85a:	6884      	ldr	r4, [r0, #8]
   1b85c:	428c      	cmp	r4, r1
{
   1b85e:	4613      	mov	r3, r2
    if (off > fa->fa_size || off + len > fa->fa_size) {
   1b860:	d309      	bcc.n	1b876 <flash_area_erase+0x1e>
   1b862:	440b      	add	r3, r1
   1b864:	429c      	cmp	r4, r3
   1b866:	d306      	bcc.n	1b876 <flash_area_erase+0x1e>
        return -1;
    }
    return hal_flash_erase(fa->fa_device_id, fa->fa_off + off, len);
   1b868:	6843      	ldr	r3, [r0, #4]
}
   1b86a:	f85d 4b04 	ldr.w	r4, [sp], #4
    return hal_flash_erase(fa->fa_device_id, fa->fa_off + off, len);
   1b86e:	7840      	ldrb	r0, [r0, #1]
   1b870:	4419      	add	r1, r3
   1b872:	f002 baf9 	b.w	1de68 <hal_flash_erase>
}
   1b876:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b87a:	f85d 4b04 	ldr.w	r4, [sp], #4
   1b87e:	4770      	bx	lr

0001b880 <flash_area_align>:

uint8_t
flash_area_align(const struct flash_area *fa)
{
    return hal_flash_align(fa->fa_device_id);
   1b880:	7840      	ldrb	r0, [r0, #1]
   1b882:	f002 ba8c 	b.w	1dd9e <hal_flash_align>

0001b886 <flash_area_erased_val>:
}

uint32_t
flash_area_erased_val(const struct flash_area *fa)
{
   1b886:	b508      	push	{r3, lr}
    return hal_flash_erased_val(fa->fa_device_id);
   1b888:	7840      	ldrb	r0, [r0, #1]
   1b88a:	f002 fa90 	bl	1ddae <hal_flash_erased_val>
}
   1b88e:	bd08      	pop	{r3, pc}

0001b890 <flash_area_is_empty>:
 *                                  here.
 * @return                      0 on success; nonzero on failure.
 */
int
flash_area_is_empty(const struct flash_area *fa, bool *empty)
{
   1b890:	b538      	push	{r3, r4, r5, lr}
    int rc;

    *empty = false;
   1b892:	2500      	movs	r5, #0
   1b894:	700d      	strb	r5, [r1, #0]
{
   1b896:	460c      	mov	r4, r1
    rc = hal_flash_isempty_no_buf(fa->fa_device_id, fa->fa_off, fa->fa_size);
   1b898:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
   1b89c:	7840      	ldrb	r0, [r0, #1]
   1b89e:	f002 fb7e 	bl	1df9e <hal_flash_isempty_no_buf>
    if (rc < 0) {
   1b8a2:	2800      	cmp	r0, #0
   1b8a4:	db03      	blt.n	1b8ae <flash_area_is_empty+0x1e>
        return rc;
    } else if (rc == 1) {
   1b8a6:	2801      	cmp	r0, #1
        *empty = true;
   1b8a8:	bf08      	it	eq
   1b8aa:	7020      	strbeq	r0, [r4, #0]
    }

    return 0;
   1b8ac:	4628      	mov	r0, r5
}
   1b8ae:	bd38      	pop	{r3, r4, r5, pc}

0001b8b0 <flash_area_read_is_empty>:

int
flash_area_read_is_empty(const struct flash_area *fa, uint32_t off, void *dst,
                         uint32_t len)
{
   1b8b0:	b410      	push	{r4}
    return hal_flash_isempty(fa->fa_device_id, fa->fa_off + off, dst, len);
   1b8b2:	6844      	ldr	r4, [r0, #4]
   1b8b4:	7840      	ldrb	r0, [r0, #1]
   1b8b6:	4421      	add	r1, r4
}
   1b8b8:	f85d 4b04 	ldr.w	r4, [sp], #4
    return hal_flash_isempty(fa->fa_device_id, fa->fa_off + off, dst, len);
   1b8bc:	f002 bb47 	b.w	1df4e <hal_flash_isempty>

0001b8c0 <flash_area_id_from_image_slot>:
 * specified value is not a valid image slot index (0 or 1), a crash is
 * triggered.
 */
int
flash_area_id_from_image_slot(int slot)
{
   1b8c0:	b508      	push	{r3, lr}
    switch (slot) {
   1b8c2:	b138      	cbz	r0, 1b8d4 <flash_area_id_from_image_slot+0x14>
   1b8c4:	2801      	cmp	r0, #1
   1b8c6:	d007      	beq.n	1b8d8 <flash_area_id_from_image_slot+0x18>
    case 0:
        return FLASH_AREA_IMAGE_0;
    case 1:
        return FLASH_AREA_IMAGE_1;
    default:
        assert(0);
   1b8c8:	2300      	movs	r3, #0
   1b8ca:	461a      	mov	r2, r3
   1b8cc:	4619      	mov	r1, r3
   1b8ce:	4618      	mov	r0, r3
   1b8d0:	f7f0 ff94 	bl	c7fc <__assert_func>
        return FLASH_AREA_IMAGE_0;
   1b8d4:	2001      	movs	r0, #1
        return FLASH_AREA_IMAGE_0;
    }
}
   1b8d6:	bd08      	pop	{r3, pc}
    switch (slot) {
   1b8d8:	2002      	movs	r0, #2
   1b8da:	e7fc      	b.n	1b8d6 <flash_area_id_from_image_slot+0x16>

0001b8dc <flash_map_init>:
    }
}

void
flash_map_init(void)
{
   1b8dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    int num_areas;
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1b8e0:	4b24      	ldr	r3, [pc, #144]	; (1b974 <flash_map_init+0x98>)
   1b8e2:	781b      	ldrb	r3, [r3, #0]
{
   1b8e4:	b088      	sub	sp, #32
    SYSINIT_ASSERT_ACTIVE();
   1b8e6:	b923      	cbnz	r3, 1b8f2 <flash_map_init+0x16>
   1b8e8:	461a      	mov	r2, r3
   1b8ea:	4619      	mov	r1, r3
   1b8ec:	4618      	mov	r0, r3
   1b8ee:	f7f0 ff85 	bl	c7fc <__assert_func>

    rc = hal_flash_init();
   1b8f2:	f002 fa42 	bl	1dd7a <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1b8f6:	b138      	cbz	r0, 1b908 <flash_map_init+0x2c>
   1b8f8:	2300      	movs	r3, #0
   1b8fa:	4a1f      	ldr	r2, [pc, #124]	; (1b978 <flash_map_init+0x9c>)
   1b8fc:	9300      	str	r3, [sp, #0]
   1b8fe:	6814      	ldr	r4, [r2, #0]
   1b900:	4619      	mov	r1, r3
   1b902:	461a      	mov	r2, r3
   1b904:	4618      	mov	r0, r3
   1b906:	47a0      	blx	r4
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
   1b908:	4f1c      	ldr	r7, [pc, #112]	; (1b97c <flash_map_init+0xa0>)
   1b90a:	4b1d      	ldr	r3, [pc, #116]	; (1b980 <flash_map_init+0xa4>)
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
   1b90c:	4e1d      	ldr	r6, [pc, #116]	; (1b984 <flash_map_init+0xa8>)
    flash_map = sysflash_map_dflt;
   1b90e:	603b      	str	r3, [r7, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
   1b910:	2306      	movs	r3, #6
   1b912:	6033      	str	r3, [r6, #0]
    mfg_init();
   1b914:	f001 f836 	bl	1c984 <mfg_init>
    mfg_open(&reader);
   1b918:	a803      	add	r0, sp, #12
   1b91a:	4c1b      	ldr	r4, [pc, #108]	; (1b988 <flash_map_init+0xac>)
   1b91c:	f001 f86e 	bl	1c9fc <mfg_open>
    *out_num_areas = 0;
   1b920:	2500      	movs	r5, #0
   1b922:	46a0      	mov	r8, r4
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_FLASH_AREA);
   1b924:	2102      	movs	r1, #2
   1b926:	a803      	add	r0, sp, #12
   1b928:	f001 f81a 	bl	1c960 <mfg_seek_next_with_type>
        switch (rc) {
   1b92c:	f110 0f0f 	cmn.w	r0, #15
   1b930:	d019      	beq.n	1b966 <flash_map_init+0x8a>
   1b932:	b9a8      	cbnz	r0, 1b960 <flash_map_init+0x84>
        rc = mfg_read_tlv_flash_area(&reader, &meta_flash_area);
   1b934:	a905      	add	r1, sp, #20
   1b936:	a803      	add	r0, sp, #12
   1b938:	f001 f81d 	bl	1c976 <mfg_read_tlv_flash_area>
        if (rc != 0) {
   1b93c:	b980      	cbnz	r0, 1b960 <flash_map_init+0x84>
        fap->fa_id = meta_flash_area.area_id;
   1b93e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1b942:	7023      	strb	r3, [r4, #0]
        fap->fa_device_id = meta_flash_area.device_id;
   1b944:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1b948:	7063      	strb	r3, [r4, #1]
        fap->fa_off = meta_flash_area.offset;
   1b94a:	f8dd 3016 	ldr.w	r3, [sp, #22]
   1b94e:	6063      	str	r3, [r4, #4]
        (*out_num_areas)++;
   1b950:	3501      	adds	r5, #1
        fap->fa_size = meta_flash_area.size;
   1b952:	f8dd 301a 	ldr.w	r3, [sp, #26]
   1b956:	60a3      	str	r3, [r4, #8]
        if (*out_num_areas >= max_areas) {
   1b958:	2d0a      	cmp	r5, #10
   1b95a:	f104 040c 	add.w	r4, r4, #12
   1b95e:	d1e1      	bne.n	1b924 <flash_map_init+0x48>
                            mfg_areas, &num_areas);
    if (rc == 0 && num_areas > 0) {
        flash_map = mfg_areas;
        flash_map_entries = num_areas;
    }
}
   1b960:	b008      	add	sp, #32
   1b962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (rc == 0 && num_areas > 0) {
   1b966:	2d00      	cmp	r5, #0
   1b968:	d0fa      	beq.n	1b960 <flash_map_init+0x84>
        flash_map = mfg_areas;
   1b96a:	f8c7 8000 	str.w	r8, [r7]
        flash_map_entries = num_areas;
   1b96e:	6035      	str	r5, [r6, #0]
}
   1b970:	e7f6      	b.n	1b960 <flash_map_init+0x84>
   1b972:	bf00      	nop
   1b974:	20006af4 	.word	0x20006af4
   1b978:	2000143c 	.word	0x2000143c
   1b97c:	20007130 	.word	0x20007130
   1b980:	00022520 	.word	0x00022520
   1b984:	20007134 	.word	0x20007134
   1b988:	20007138 	.word	0x20007138

0001b98c <log_call_append_cb>:
/**
 * Calls the given log's append callback, if it has one.
 */
static void
log_call_append_cb(struct log *log, uint32_t idx)
{
   1b98c:	b082      	sub	sp, #8
     * preventing a TOCTTOU race.
     * (This all assumes that function pointer reads and writes are atomic.)
     */
    log_append_cb * volatile cb;

    cb = log->l_append_cb;
   1b98e:	6903      	ldr	r3, [r0, #16]
   1b990:	9301      	str	r3, [sp, #4]
    if (cb != NULL) {
   1b992:	9b01      	ldr	r3, [sp, #4]
   1b994:	b113      	cbz	r3, 1b99c <log_call_append_cb+0x10>
        cb(log, idx);
   1b996:	9b01      	ldr	r3, [sp, #4]
    }
}
   1b998:	b002      	add	sp, #8
        cb(log, idx);
   1b99a:	4718      	bx	r3
}
   1b99c:	b002      	add	sp, #8
   1b99e:	4770      	bx	lr

0001b9a0 <log_append_prepare>:
{
   1b9a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b9a4:	461f      	mov	r7, r3
   1b9a6:	b085      	sub	sp, #20
    if (log->l_name == NULL || log->l_log == NULL) {
   1b9a8:	6803      	ldr	r3, [r0, #0]
{
   1b9aa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1b9ac:	460e      	mov	r6, r1
    if (log->l_name == NULL || log->l_log == NULL) {
   1b9ae:	2b00      	cmp	r3, #0
   1b9b0:	d047      	beq.n	1ba42 <log_append_prepare+0xa2>
   1b9b2:	6843      	ldr	r3, [r0, #4]
   1b9b4:	2b00      	cmp	r3, #0
   1b9b6:	d044      	beq.n	1ba42 <log_append_prepare+0xa2>
    if (log->l_log->log_type == LOG_TYPE_STORAGE) {
   1b9b8:	681b      	ldr	r3, [r3, #0]
   1b9ba:	2a0f      	cmp	r2, #15
   1b9bc:	bf28      	it	cs
   1b9be:	220f      	movcs	r2, #15
   1b9c0:	2b02      	cmp	r3, #2
        log_written = 1;
   1b9c2:	bf08      	it	eq
   1b9c4:	4b22      	ldreq	r3, [pc, #136]	; (1ba50 <log_append_prepare+0xb0>)
   1b9c6:	4615      	mov	r5, r2
   1b9c8:	bf04      	itt	eq
   1b9ca:	2201      	moveq	r2, #1
   1b9cc:	701a      	strbeq	r2, [r3, #0]
    if (level < log->l_level) {
   1b9ce:	7d03      	ldrb	r3, [r0, #20]
   1b9d0:	42ab      	cmp	r3, r5
   1b9d2:	d836      	bhi.n	1ba42 <log_append_prepare+0xa2>
    if (level < log_level_get(module)) {
   1b9d4:	4608      	mov	r0, r1
   1b9d6:	f000 fa07 	bl	1bde8 <log_level_get>
   1b9da:	42a8      	cmp	r0, r5
   1b9dc:	d831      	bhi.n	1ba42 <log_append_prepare+0xa2>
    OS_ENTER_CRITICAL(sr);
   1b9de:	f7f0 fe53 	bl	c688 <os_arch_save_sr>
    idx = g_log_info.li_next_index++;
   1b9e2:	4b1c      	ldr	r3, [pc, #112]	; (1ba54 <log_append_prepare+0xb4>)
   1b9e4:	f8d3 8000 	ldr.w	r8, [r3]
   1b9e8:	f108 0201 	add.w	r2, r8, #1
   1b9ec:	601a      	str	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   1b9ee:	f7f0 fe51 	bl	c694 <os_arch_restore_sr>
    rc = os_gettimeofday(&tv, NULL);
   1b9f2:	2100      	movs	r1, #0
   1b9f4:	4668      	mov	r0, sp
   1b9f6:	f7f1 fff9 	bl	d9ec <os_gettimeofday>
    if (rc || tv.tv_sec < UTC01_01_2016) {
   1b9fa:	4681      	mov	r9, r0
   1b9fc:	b930      	cbnz	r0, 1ba0c <log_append_prepare+0x6c>
   1b9fe:	e9dd 2000 	ldrd	r2, r0, [sp]
   1ba02:	4b15      	ldr	r3, [pc, #84]	; (1ba58 <log_append_prepare+0xb8>)
   1ba04:	4293      	cmp	r3, r2
   1ba06:	eb79 0300 	sbcs.w	r3, r9, r0
   1ba0a:	db0e      	blt.n	1ba2a <log_append_prepare+0x8a>
        ue->ue_ts = os_get_uptime_usec();
   1ba0c:	f7f2 f890 	bl	db30 <os_get_uptime_usec>
   1ba10:	6020      	str	r0, [r4, #0]
   1ba12:	6061      	str	r1, [r4, #4]
    ue->ue_level = level;
   1ba14:	7365      	strb	r5, [r4, #13]
    ue->ue_module = module;
   1ba16:	7326      	strb	r6, [r4, #12]
    ue->ue_index = idx;
   1ba18:	f8c4 8008 	str.w	r8, [r4, #8]
    assert(etype == LOG_ETYPE_STRING);
   1ba1c:	b19f      	cbz	r7, 1ba46 <log_append_prepare+0xa6>
   1ba1e:	2300      	movs	r3, #0
   1ba20:	461a      	mov	r2, r3
   1ba22:	4619      	mov	r1, r3
   1ba24:	4618      	mov	r0, r3
   1ba26:	f7f0 fee9 	bl	c7fc <__assert_func>
        ue->ue_ts = tv.tv_sec * 1000000 + tv.tv_usec;
   1ba2a:	490c      	ldr	r1, [pc, #48]	; (1ba5c <log_append_prepare+0xbc>)
   1ba2c:	fba2 2301 	umull	r2, r3, r2, r1
   1ba30:	fb01 3300 	mla	r3, r1, r0, r3
   1ba34:	9902      	ldr	r1, [sp, #8]
   1ba36:	1852      	adds	r2, r2, r1
   1ba38:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   1ba3c:	6022      	str	r2, [r4, #0]
   1ba3e:	6063      	str	r3, [r4, #4]
   1ba40:	e7e8      	b.n	1ba14 <log_append_prepare+0x74>
        rc = -1;
   1ba42:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
}
   1ba46:	4648      	mov	r0, r9
   1ba48:	b005      	add	sp, #20
   1ba4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ba4e:	bf00      	nop
   1ba50:	200071bc 	.word	0x200071bc
   1ba54:	200071b0 	.word	0x200071b0
   1ba58:	5685c17f 	.word	0x5685c17f
   1ba5c:	000f4240 	.word	0x000f4240

0001ba60 <log_init>:
{
   1ba60:	b537      	push	{r0, r1, r2, r4, r5, lr}
    SYSINIT_ASSERT_ACTIVE();
   1ba62:	4b12      	ldr	r3, [pc, #72]	; (1baac <log_init+0x4c>)
   1ba64:	781b      	ldrb	r3, [r3, #0]
   1ba66:	b923      	cbnz	r3, 1ba72 <log_init+0x12>
   1ba68:	461a      	mov	r2, r3
   1ba6a:	4619      	mov	r1, r3
   1ba6c:	4618      	mov	r0, r3
   1ba6e:	f7f0 fec5 	bl	c7fc <__assert_func>
    memset(g_log_module_list, 0, sizeof(g_log_module_list));
   1ba72:	4b0f      	ldr	r3, [pc, #60]	; (1bab0 <log_init+0x50>)
   1ba74:	2400      	movs	r4, #0
   1ba76:	601c      	str	r4, [r3, #0]
    log_written = 0;
   1ba78:	4b0e      	ldr	r3, [pc, #56]	; (1bab4 <log_init+0x54>)
   1ba7a:	701c      	strb	r4, [r3, #0]
    STAILQ_INIT(&g_log_list);
   1ba7c:	4b0e      	ldr	r3, [pc, #56]	; (1bab8 <log_init+0x58>)
   1ba7e:	e9c3 4300 	strd	r4, r3, [r3]
    g_log_info.li_version = MYNEWT_VAL(LOG_VERSION);
   1ba82:	4b0e      	ldr	r3, [pc, #56]	; (1babc <log_init+0x5c>)
   1ba84:	2202      	movs	r2, #2
   1ba86:	711a      	strb	r2, [r3, #4]
    g_log_info.li_next_index = 0;
   1ba88:	601c      	str	r4, [r3, #0]
    rc = log_nmgr_register_group();
   1ba8a:	f000 fd85 	bl	1c598 <log_nmgr_register_group>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1ba8e:	b138      	cbz	r0, 1baa0 <log_init+0x40>
   1ba90:	4b0b      	ldr	r3, [pc, #44]	; (1bac0 <log_init+0x60>)
   1ba92:	9400      	str	r4, [sp, #0]
   1ba94:	681d      	ldr	r5, [r3, #0]
   1ba96:	4622      	mov	r2, r4
   1ba98:	4623      	mov	r3, r4
   1ba9a:	4621      	mov	r1, r4
   1ba9c:	4620      	mov	r0, r4
   1ba9e:	47a8      	blx	r5
}
   1baa0:	b003      	add	sp, #12
   1baa2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    log_console_init();
   1baa6:	f000 b979 	b.w	1bd9c <log_console_init>
   1baaa:	bf00      	nop
   1baac:	20006af4 	.word	0x20006af4
   1bab0:	200071b8 	.word	0x200071b8
   1bab4:	200071bc 	.word	0x200071bc
   1bab8:	20001694 	.word	0x20001694
   1babc:	200071b0 	.word	0x200071b0
   1bac0:	2000143c 	.word	0x2000143c

0001bac4 <log_list_get_next>:
    if (log == NULL) {
   1bac4:	b910      	cbnz	r0, 1bacc <log_list_get_next+0x8>
        next = STAILQ_FIRST(&g_log_list);
   1bac6:	4b02      	ldr	r3, [pc, #8]	; (1bad0 <log_list_get_next+0xc>)
   1bac8:	6818      	ldr	r0, [r3, #0]
   1baca:	4770      	bx	lr
        next = STAILQ_NEXT(log, l_next);
   1bacc:	68c0      	ldr	r0, [r0, #12]
}
   1bace:	4770      	bx	lr
   1bad0:	20001694 	.word	0x20001694

0001bad4 <log_module_get_name>:
    if (module < LOG_MODULE_PERUSER) {
   1bad4:	283f      	cmp	r0, #63	; 0x3f
   1bad6:	d805      	bhi.n	1bae4 <log_module_get_name+0x10>
        switch (module) {
   1bad8:	2808      	cmp	r0, #8
   1bada:	d808      	bhi.n	1baee <log_module_get_name+0x1a>
   1badc:	4b05      	ldr	r3, [pc, #20]	; (1baf4 <log_module_get_name+0x20>)
   1bade:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1bae2:	4770      	bx	lr
    } else if (module - LOG_MODULE_PERUSER < MYNEWT_VAL(LOG_MAX_USER_MODULES)) {
   1bae4:	2840      	cmp	r0, #64	; 0x40
   1bae6:	d102      	bne.n	1baee <log_module_get_name+0x1a>
        return g_log_module_list[module - LOG_MODULE_PERUSER];
   1bae8:	4b03      	ldr	r3, [pc, #12]	; (1baf8 <log_module_get_name+0x24>)
   1baea:	6818      	ldr	r0, [r3, #0]
   1baec:	4770      	bx	lr
   1baee:	2000      	movs	r0, #0
}
   1baf0:	4770      	bx	lr
   1baf2:	bf00      	nop
   1baf4:	00022338 	.word	0x00022338
   1baf8:	200071b8 	.word	0x200071b8

0001bafc <log_append_body>:
}

int
log_append_body(struct log *log, uint8_t module, uint8_t level, uint8_t etype,
                const void *body, uint16_t body_len)
{
   1bafc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bafe:	4605      	mov	r5, r0
   1bb00:	b087      	sub	sp, #28
   1bb02:	8ac0      	ldrh	r0, [r0, #22]
   1bb04:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
    if (log->l_max_entry_len != 0) {
   1bb08:	b108      	cbz	r0, 1bb0e <log_append_body+0x12>
        if (len > log->l_max_entry_len) {
   1bb0a:	4287      	cmp	r7, r0
   1bb0c:	d816      	bhi.n	1bb3c <log_append_body+0x40>
    rc = log_chk_max_entry_len(log, body_len);
    if (rc != OS_OK) {
        return rc;
    }

    rc = log_append_prepare(log, module, level, etype, &hdr);
   1bb0e:	ae02      	add	r6, sp, #8
   1bb10:	9600      	str	r6, [sp, #0]
   1bb12:	4628      	mov	r0, r5
   1bb14:	f7ff ff44 	bl	1b9a0 <log_append_prepare>
    if (rc != 0) {
   1bb18:	4604      	mov	r4, r0
   1bb1a:	b960      	cbnz	r0, 1bb36 <log_append_body+0x3a>
        LOG_STATS_INC(log, drops);
        return rc;
    }

    rc = log->l_log->log_append_body(log, &hdr, body, body_len);
   1bb1c:	686b      	ldr	r3, [r5, #4]
   1bb1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1bb20:	691c      	ldr	r4, [r3, #16]
   1bb22:	4631      	mov	r1, r6
   1bb24:	463b      	mov	r3, r7
   1bb26:	4628      	mov	r0, r5
   1bb28:	47a0      	blx	r4
    if (rc != 0) {
   1bb2a:	4604      	mov	r4, r0
   1bb2c:	b918      	cbnz	r0, 1bb36 <log_append_body+0x3a>
        LOG_STATS_INC(log, errs);
        return rc;
    }

    log_call_append_cb(log, hdr.ue_index);
   1bb2e:	9904      	ldr	r1, [sp, #16]
   1bb30:	4628      	mov	r0, r5
   1bb32:	f7ff ff2b 	bl	1b98c <log_call_append_cb>

    return 0;
}
   1bb36:	4620      	mov	r0, r4
   1bb38:	b007      	add	sp, #28
   1bb3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            rc = OS_ENOMEM;
   1bb3c:	2401      	movs	r4, #1
   1bb3e:	e7fa      	b.n	1bb36 <log_append_body+0x3a>

0001bb40 <log_printf>:
}

void
log_printf(struct log *log, uint8_t module, uint8_t level,
           const char *msg, ...)
{
   1bb40:	b408      	push	{r3}
   1bb42:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bb44:	b0a4      	sub	sp, #144	; 0x90
   1bb46:	ab29      	add	r3, sp, #164	; 0xa4
    va_list args;
    char buf[LOG_PRINTF_MAX_ENTRY_LEN];
    int len;

    va_start(args, msg);
    len = vsnprintf(buf, LOG_PRINTF_MAX_ENTRY_LEN, msg, args);
   1bb48:	af04      	add	r7, sp, #16
{
   1bb4a:	4604      	mov	r4, r0
   1bb4c:	460d      	mov	r5, r1
   1bb4e:	4616      	mov	r6, r2
    len = vsnprintf(buf, LOG_PRINTF_MAX_ENTRY_LEN, msg, args);
   1bb50:	2180      	movs	r1, #128	; 0x80
{
   1bb52:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, msg);
   1bb56:	9303      	str	r3, [sp, #12]
    len = vsnprintf(buf, LOG_PRINTF_MAX_ENTRY_LEN, msg, args);
   1bb58:	4638      	mov	r0, r7
   1bb5a:	f7f4 fe81 	bl	10860 <vsnprintf>
    va_end(args);
    if (len >= LOG_PRINTF_MAX_ENTRY_LEN) {
        len = LOG_PRINTF_MAX_ENTRY_LEN-1;
    }

    log_append_body(log, module, level, LOG_ETYPE_STRING, buf, len);
   1bb5e:	287f      	cmp	r0, #127	; 0x7f
   1bb60:	4603      	mov	r3, r0
   1bb62:	bfa8      	it	ge
   1bb64:	237f      	movge	r3, #127	; 0x7f
   1bb66:	b29b      	uxth	r3, r3
   1bb68:	e9cd 7300 	strd	r7, r3, [sp]
   1bb6c:	4632      	mov	r2, r6
   1bb6e:	2300      	movs	r3, #0
   1bb70:	4629      	mov	r1, r5
   1bb72:	4620      	mov	r0, r4
   1bb74:	f7ff ffc2 	bl	1bafc <log_append_body>
}
   1bb78:	b024      	add	sp, #144	; 0x90
   1bb7a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1bb7e:	b001      	add	sp, #4
   1bb80:	4770      	bx	lr

0001bb82 <log_walk>:
log_walk(struct log *log, log_walk_func_t walk_func,
         struct log_offset *log_offset)
{
    int rc;

    rc = log->l_log->log_walk(log, walk_func, log_offset);
   1bb82:	6843      	ldr	r3, [r0, #4]
   1bb84:	69db      	ldr	r3, [r3, #28]
   1bb86:	4718      	bx	r3

0001bb88 <log_register>:
{
   1bb88:	b510      	push	{r4, lr}
   1bb8a:	460c      	mov	r4, r1
    assert(!log_written);
   1bb8c:	4926      	ldr	r1, [pc, #152]	; (1bc28 <log_register+0xa0>)
   1bb8e:	7809      	ldrb	r1, [r1, #0]
{
   1bb90:	b08c      	sub	sp, #48	; 0x30
    assert(!log_written);
   1bb92:	b129      	cbz	r1, 1bba0 <log_register+0x18>
   1bb94:	2300      	movs	r3, #0
   1bb96:	461a      	mov	r2, r3
   1bb98:	4619      	mov	r1, r3
   1bb9a:	4618      	mov	r0, r3
   1bb9c:	f7f0 fe2e 	bl	c7fc <__assert_func>
    log->l_arg = arg;
   1bba0:	60a3      	str	r3, [r4, #8]
    log->l_level = level;
   1bba2:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    log->l_append_cb = NULL;
   1bba6:	6121      	str	r1, [r4, #16]
    log->l_level = level;
   1bba8:	2b0f      	cmp	r3, #15
    log->l_max_entry_len = 0;
   1bbaa:	82e1      	strh	r1, [r4, #22]
    STAILQ_FOREACH(cur, &g_log_list, l_next) {
   1bbac:	491f      	ldr	r1, [pc, #124]	; (1bc2c <log_register+0xa4>)
    log->l_level = level;
   1bbae:	bf28      	it	cs
   1bbb0:	230f      	movcs	r3, #15
    log->l_log = lh;
   1bbb2:	e9c4 0200 	strd	r0, r2, [r4]
    log->l_level = level;
   1bbb6:	7523      	strb	r3, [r4, #20]
    STAILQ_FOREACH(cur, &g_log_list, l_next) {
   1bbb8:	680b      	ldr	r3, [r1, #0]
   1bbba:	2b00      	cmp	r3, #0
   1bbbc:	d130      	bne.n	1bc20 <log_register+0x98>
        STAILQ_INSERT_TAIL(&g_log_list, log, l_next);
   1bbbe:	60e3      	str	r3, [r4, #12]
   1bbc0:	684b      	ldr	r3, [r1, #4]
   1bbc2:	601c      	str	r4, [r3, #0]
   1bbc4:	f104 030c 	add.w	r3, r4, #12
   1bbc8:	604b      	str	r3, [r1, #4]
    if (log->l_log->log_registered) {
   1bbca:	6a53      	ldr	r3, [r2, #36]	; 0x24
   1bbcc:	b10b      	cbz	r3, 1bbd2 <log_register+0x4a>
        log->l_log->log_registered(log);
   1bbce:	4620      	mov	r0, r4
   1bbd0:	4798      	blx	r3
    if (log->l_log->log_type == LOG_TYPE_STORAGE) {
   1bbd2:	6863      	ldr	r3, [r4, #4]
   1bbd4:	681b      	ldr	r3, [r3, #0]
   1bbd6:	2b02      	cmp	r3, #2
   1bbd8:	d11f      	bne.n	1bc1a <log_register+0x92>
    arg.hdr = out_hdr;
   1bbda:	ab02      	add	r3, sp, #8
    log_offset.lo_ts = -1;
   1bbdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bbe0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1bbe4:	e9cd 0106 	strd	r0, r1, [sp, #24]
    arg.hdr = out_hdr;
   1bbe8:	9300      	str	r3, [sp, #0]
    log_walk(log, log_read_hdr_walk, &log_offset);
   1bbea:	4911      	ldr	r1, [pc, #68]	; (1bc30 <log_register+0xa8>)
    log_offset.lo_arg = &arg;
   1bbec:	f8cd d028 	str.w	sp, [sp, #40]	; 0x28
    arg.read_success = 0;
   1bbf0:	2300      	movs	r3, #0
    log_walk(log, log_read_hdr_walk, &log_offset);
   1bbf2:	aa06      	add	r2, sp, #24
   1bbf4:	4620      	mov	r0, r4
    log_offset.lo_data_len = 0;
   1bbf6:	e9cd 3308 	strd	r3, r3, [sp, #32]
    arg.read_success = 0;
   1bbfa:	9301      	str	r3, [sp, #4]
    log_walk(log, log_read_hdr_walk, &log_offset);
   1bbfc:	f7ff ffc1 	bl	1bb82 <log_walk>
    if (!arg.read_success) {
   1bc00:	9b01      	ldr	r3, [sp, #4]
   1bc02:	b153      	cbz	r3, 1bc1a <log_register+0x92>
            OS_ENTER_CRITICAL(sr);
   1bc04:	f7f0 fd40 	bl	c688 <os_arch_save_sr>
            if (hdr.ue_index >= g_log_info.li_next_index) {
   1bc08:	4a0a      	ldr	r2, [pc, #40]	; (1bc34 <log_register+0xac>)
   1bc0a:	9b04      	ldr	r3, [sp, #16]
   1bc0c:	6811      	ldr	r1, [r2, #0]
   1bc0e:	428b      	cmp	r3, r1
                g_log_info.li_next_index = hdr.ue_index + 1;
   1bc10:	bf24      	itt	cs
   1bc12:	3301      	addcs	r3, #1
   1bc14:	6013      	strcs	r3, [r2, #0]
            OS_EXIT_CRITICAL(sr);
   1bc16:	f7f0 fd3d 	bl	c694 <os_arch_restore_sr>
}
   1bc1a:	2000      	movs	r0, #0
   1bc1c:	b00c      	add	sp, #48	; 0x30
   1bc1e:	bd10      	pop	{r4, pc}
        if (cur == log) {
   1bc20:	429c      	cmp	r4, r3
   1bc22:	d0d2      	beq.n	1bbca <log_register+0x42>
    STAILQ_FOREACH(cur, &g_log_list, l_next) {
   1bc24:	68db      	ldr	r3, [r3, #12]
   1bc26:	e7c8      	b.n	1bbba <log_register+0x32>
   1bc28:	200071bc 	.word	0x200071bc
   1bc2c:	20001694 	.word	0x20001694
   1bc30:	0001bc6f 	.word	0x0001bc6f
   1bc34:	200071b0 	.word	0x200071b0

0001bc38 <log_walk_body>:
}

int
log_walk_body(struct log *log, log_walk_body_func_t walk_body_func,
              struct log_offset *log_offset)
{
   1bc38:	b513      	push	{r0, r1, r4, lr}
    struct log_walk_body_arg lwba = {
   1bc3a:	6913      	ldr	r3, [r2, #16]
   1bc3c:	9301      	str	r3, [sp, #4]
        .arg = log_offset->lo_arg,
    };
    int rc;

    log_offset->lo_arg = &lwba;
    rc = log->l_log->log_walk(log, log_walk_body_fn, log_offset);
   1bc3e:	6843      	ldr	r3, [r0, #4]
    struct log_walk_body_arg lwba = {
   1bc40:	9100      	str	r1, [sp, #0]
    rc = log->l_log->log_walk(log, log_walk_body_fn, log_offset);
   1bc42:	69db      	ldr	r3, [r3, #28]
   1bc44:	4904      	ldr	r1, [pc, #16]	; (1bc58 <log_walk_body+0x20>)
    log_offset->lo_arg = &lwba;
   1bc46:	f8c2 d010 	str.w	sp, [r2, #16]
{
   1bc4a:	4614      	mov	r4, r2
    rc = log->l_log->log_walk(log, log_walk_body_fn, log_offset);
   1bc4c:	4798      	blx	r3
    log_offset->lo_arg = lwba.arg;
   1bc4e:	9b01      	ldr	r3, [sp, #4]
   1bc50:	6123      	str	r3, [r4, #16]

    return rc;
}
   1bc52:	b002      	add	sp, #8
   1bc54:	bd10      	pop	{r4, pc}
   1bc56:	bf00      	nop
   1bc58:	0001bcb1 	.word	0x0001bcb1

0001bc5c <log_read>:
 * @return                      The number of bytes read; 0 on failure.
 */
int
log_read(struct log *log, void *dptr, void *buf, uint16_t off,
         uint16_t len)
{
   1bc5c:	b430      	push	{r4, r5}
    int rc;

    rc = log->l_log->log_read(log, dptr, buf, off, len);
   1bc5e:	6844      	ldr	r4, [r0, #4]
{
   1bc60:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    rc = log->l_log->log_read(log, dptr, buf, off, len);
   1bc64:	9502      	str	r5, [sp, #8]
   1bc66:	6864      	ldr	r4, [r4, #4]
   1bc68:	46a4      	mov	ip, r4

    return (rc);
}
   1bc6a:	bc30      	pop	{r4, r5}
    rc = log->l_log->log_read(log, dptr, buf, off, len);
   1bc6c:	4760      	bx	ip

0001bc6e <log_read_hdr_walk>:
{
   1bc6e:	b513      	push	{r0, r1, r4, lr}
   1bc70:	460b      	mov	r3, r1
   1bc72:	4611      	mov	r1, r2
    arg = log_offset->lo_arg;
   1bc74:	691c      	ldr	r4, [r3, #16]
    rc = log_read(log, dptr, arg->hdr, 0, sizeof *arg->hdr);
   1bc76:	230e      	movs	r3, #14
   1bc78:	9300      	str	r3, [sp, #0]
   1bc7a:	6822      	ldr	r2, [r4, #0]
   1bc7c:	2300      	movs	r3, #0
   1bc7e:	f7ff ffed 	bl	1bc5c <log_read>
    if (rc >= sizeof *arg->hdr) {
   1bc82:	280d      	cmp	r0, #13
        arg->read_success = 1;
   1bc84:	bf88      	it	hi
   1bc86:	2301      	movhi	r3, #1
}
   1bc88:	f04f 0001 	mov.w	r0, #1
        arg->read_success = 1;
   1bc8c:	bf88      	it	hi
   1bc8e:	6063      	strhi	r3, [r4, #4]
}
   1bc90:	b002      	add	sp, #8
   1bc92:	bd10      	pop	{r4, pc}

0001bc94 <log_read_hdr>:

int
log_read_hdr(struct log *log, void *dptr, struct log_entry_hdr *hdr)
{
   1bc94:	b507      	push	{r0, r1, r2, lr}
    int bytes_read;

    bytes_read = log_read(log, dptr, hdr, 0, LOG_ENTRY_HDR_SIZE);
   1bc96:	230e      	movs	r3, #14
   1bc98:	9300      	str	r3, [sp, #0]
   1bc9a:	2300      	movs	r3, #0
   1bc9c:	f7ff ffde 	bl	1bc5c <log_read>
    if (bytes_read != LOG_ENTRY_HDR_SIZE) {
        return SYS_EIO;
   1bca0:	280e      	cmp	r0, #14
    }

    return 0;
}
   1bca2:	bf14      	ite	ne
   1bca4:	f06f 0004 	mvnne.w	r0, #4
   1bca8:	2000      	moveq	r0, #0
   1bcaa:	b003      	add	sp, #12
   1bcac:	f85d fb04 	ldr.w	pc, [sp], #4

0001bcb0 <log_walk_body_fn>:
{
   1bcb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bcb4:	4690      	mov	r8, r2
   1bcb6:	b086      	sub	sp, #24
    lwba = log_offset->lo_arg;
   1bcb8:	690e      	ldr	r6, [r1, #16]
{
   1bcba:	460c      	mov	r4, r1
    rc = log_read_hdr(log, dptr, &ueh);
   1bcbc:	aa02      	add	r2, sp, #8
   1bcbe:	4641      	mov	r1, r8
{
   1bcc0:	4607      	mov	r7, r0
   1bcc2:	461d      	mov	r5, r3
    rc = log_read_hdr(log, dptr, &ueh);
   1bcc4:	f7ff ffe6 	bl	1bc94 <log_read_hdr>
    if (rc != 0) {
   1bcc8:	b978      	cbnz	r0, 1bcea <log_walk_body_fn+0x3a>
    if (log_offset->lo_index <= ueh.ue_index) {
   1bcca:	68a2      	ldr	r2, [r4, #8]
   1bccc:	9b04      	ldr	r3, [sp, #16]
   1bcce:	429a      	cmp	r2, r3
   1bcd0:	d80b      	bhi.n	1bcea <log_walk_body_fn+0x3a>
        len -= sizeof ueh;
   1bcd2:	3d0e      	subs	r5, #14
        rc = lwba->fn(log, log_offset, &ueh, dptr, len);
   1bcd4:	b2ad      	uxth	r5, r5
        log_offset->lo_arg = lwba->arg;
   1bcd6:	6873      	ldr	r3, [r6, #4]
        rc = lwba->fn(log, log_offset, &ueh, dptr, len);
   1bcd8:	9500      	str	r5, [sp, #0]
        log_offset->lo_arg = lwba->arg;
   1bcda:	6123      	str	r3, [r4, #16]
        rc = lwba->fn(log, log_offset, &ueh, dptr, len);
   1bcdc:	6835      	ldr	r5, [r6, #0]
   1bcde:	4643      	mov	r3, r8
   1bce0:	aa02      	add	r2, sp, #8
   1bce2:	4621      	mov	r1, r4
   1bce4:	4638      	mov	r0, r7
   1bce6:	47a8      	blx	r5
        log_offset->lo_arg = lwba;
   1bce8:	6126      	str	r6, [r4, #16]
}
   1bcea:	b006      	add	sp, #24
   1bcec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001bcf0 <log_read_body>:

int
log_read_body(struct log *log, void *dptr, void *buf, uint16_t off,
              uint16_t len)
{
   1bcf0:	b410      	push	{r4}
    return log_read(log, dptr, buf, LOG_ENTRY_HDR_SIZE + off, len);
   1bcf2:	330e      	adds	r3, #14
{
   1bcf4:	f8bd 4004 	ldrh.w	r4, [sp, #4]
    return log_read(log, dptr, buf, LOG_ENTRY_HDR_SIZE + off, len);
   1bcf8:	9401      	str	r4, [sp, #4]
   1bcfa:	b29b      	uxth	r3, r3
}
   1bcfc:	f85d 4b04 	ldr.w	r4, [sp], #4
    return log_read(log, dptr, buf, LOG_ENTRY_HDR_SIZE + off, len);
   1bd00:	f7ff bfac 	b.w	1bc5c <log_read>

0001bd04 <log_flush>:
int
log_flush(struct log *log)
{
    int rc;

    rc = log->l_log->log_flush(log);
   1bd04:	6843      	ldr	r3, [r0, #4]
   1bd06:	6a1b      	ldr	r3, [r3, #32]
   1bd08:	4718      	bx	r3

0001bd0a <log_console_read>:
log_console_read(struct log *log, void *dptr, void *buf, uint16_t offset,
        uint16_t len)
{
    /* You don't read console, console read you */
    return (OS_EINVAL);
}
   1bd0a:	2002      	movs	r0, #2
   1bd0c:	4770      	bx	lr

0001bd0e <log_console_walk>:
log_console_walk(struct log *log, log_walk_func_t walk_func,
        struct log_offset *log_offset)
{
    /* You don't walk console, console walk you. */
    return (OS_EINVAL);
}
   1bd0e:	2002      	movs	r0, #2
   1bd10:	4770      	bx	lr

0001bd12 <log_console_flush>:
static int
log_console_flush(struct log *log)
{
    /* You don't flush console, console flush you. */
    return (OS_EINVAL);
}
   1bd12:	2002      	movs	r0, #2
   1bd14:	4770      	bx	lr
	...

0001bd18 <log_console_append_body>:
{
   1bd18:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1bd1a:	460c      	mov	r4, r1
   1bd1c:	4615      	mov	r5, r2
   1bd1e:	461e      	mov	r6, r3
    if (!console_is_init()) {
   1bd20:	f7f6 f8ea 	bl	11ef8 <console_is_init>
   1bd24:	b178      	cbz	r0, 1bd46 <log_console_append_body+0x2e>
    if (!console_is_midline) {
   1bd26:	4b09      	ldr	r3, [pc, #36]	; (1bd4c <log_console_append_body+0x34>)
   1bd28:	681b      	ldr	r3, [r3, #0]
   1bd2a:	b943      	cbnz	r3, 1bd3e <log_console_append_body+0x26>
    console_printf("[ts=%lluus, mod=%u level=%u] ",
   1bd2c:	7b63      	ldrb	r3, [r4, #13]
   1bd2e:	9301      	str	r3, [sp, #4]
   1bd30:	7b23      	ldrb	r3, [r4, #12]
   1bd32:	9300      	str	r3, [sp, #0]
   1bd34:	6822      	ldr	r2, [r4, #0]
   1bd36:	6863      	ldr	r3, [r4, #4]
   1bd38:	4805      	ldr	r0, [pc, #20]	; (1bd50 <log_console_append_body+0x38>)
   1bd3a:	f7f6 f95d 	bl	11ff8 <console_printf>
    console_write(body, body_len);
   1bd3e:	4631      	mov	r1, r6
   1bd40:	4628      	mov	r0, r5
   1bd42:	f7f5 fe69 	bl	11a18 <console_write>
}
   1bd46:	2000      	movs	r0, #0
   1bd48:	b002      	add	sp, #8
   1bd4a:	bd70      	pop	{r4, r5, r6, pc}
   1bd4c:	2000668c 	.word	0x2000668c
   1bd50:	0002235c 	.word	0x0002235c

0001bd54 <log_console_append>:
{
   1bd54:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1bd56:	460c      	mov	r4, r1
   1bd58:	4615      	mov	r5, r2
    if (!console_is_init()) {
   1bd5a:	f7f6 f8cd 	bl	11ef8 <console_is_init>
   1bd5e:	b188      	cbz	r0, 1bd84 <log_console_append+0x30>
    if (!console_is_midline) {
   1bd60:	4b0a      	ldr	r3, [pc, #40]	; (1bd8c <log_console_append+0x38>)
   1bd62:	681b      	ldr	r3, [r3, #0]
   1bd64:	b943      	cbnz	r3, 1bd78 <log_console_append+0x24>
    console_printf("[ts=%lluus, mod=%u level=%u] ",
   1bd66:	7b63      	ldrb	r3, [r4, #13]
   1bd68:	9301      	str	r3, [sp, #4]
   1bd6a:	7b23      	ldrb	r3, [r4, #12]
   1bd6c:	9300      	str	r3, [sp, #0]
   1bd6e:	6822      	ldr	r2, [r4, #0]
   1bd70:	6863      	ldr	r3, [r4, #4]
   1bd72:	4807      	ldr	r0, [pc, #28]	; (1bd90 <log_console_append+0x3c>)
   1bd74:	f7f6 f940 	bl	11ff8 <console_printf>
    console_write((char *) buf + LOG_ENTRY_HDR_SIZE, len - LOG_ENTRY_HDR_SIZE);
   1bd78:	f1a5 010e 	sub.w	r1, r5, #14
   1bd7c:	f104 000e 	add.w	r0, r4, #14
   1bd80:	f7f5 fe4a 	bl	11a18 <console_write>
}
   1bd84:	2000      	movs	r0, #0
   1bd86:	b003      	add	sp, #12
   1bd88:	bd30      	pop	{r4, r5, pc}
   1bd8a:	bf00      	nop
   1bd8c:	2000668c 	.word	0x2000668c
   1bd90:	0002235c 	.word	0x0002235c

0001bd94 <log_console_get>:
}
   1bd94:	4800      	ldr	r0, [pc, #0]	; (1bd98 <log_console_get+0x4>)
   1bd96:	4770      	bx	lr
   1bd98:	200071c0 	.word	0x200071c0

0001bd9c <log_console_init>:
    .log_flush = log_console_flush,
};

void
log_console_init(void)
{
   1bd9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1bd9e:	4b0d      	ldr	r3, [pc, #52]	; (1bdd4 <log_console_init+0x38>)
   1bda0:	781b      	ldrb	r3, [r3, #0]
   1bda2:	b923      	cbnz	r3, 1bdae <log_console_init+0x12>
   1bda4:	461a      	mov	r2, r3
   1bda6:	4619      	mov	r1, r3
   1bda8:	4618      	mov	r0, r3
   1bdaa:	f7f0 fd27 	bl	c7fc <__assert_func>

    rc = log_register("console", &log_console, &log_console_handler, NULL,
   1bdae:	2400      	movs	r4, #0
   1bdb0:	4a09      	ldr	r2, [pc, #36]	; (1bdd8 <log_console_init+0x3c>)
   1bdb2:	490a      	ldr	r1, [pc, #40]	; (1bddc <log_console_init+0x40>)
   1bdb4:	480a      	ldr	r0, [pc, #40]	; (1bde0 <log_console_init+0x44>)
   1bdb6:	9400      	str	r4, [sp, #0]
   1bdb8:	4623      	mov	r3, r4
   1bdba:	f7ff fee5 	bl	1bb88 <log_register>
                      MYNEWT_VAL(LOG_LEVEL));
    SYSINIT_PANIC_ASSERT(rc == 0);
   1bdbe:	b138      	cbz	r0, 1bdd0 <log_console_init+0x34>
   1bdc0:	4b08      	ldr	r3, [pc, #32]	; (1bde4 <log_console_init+0x48>)
   1bdc2:	9400      	str	r4, [sp, #0]
   1bdc4:	681d      	ldr	r5, [r3, #0]
   1bdc6:	4622      	mov	r2, r4
   1bdc8:	4623      	mov	r3, r4
   1bdca:	4621      	mov	r1, r4
   1bdcc:	4620      	mov	r0, r4
   1bdce:	47a8      	blx	r5
}
   1bdd0:	b003      	add	sp, #12
   1bdd2:	bd30      	pop	{r4, r5, pc}
   1bdd4:	20006af4 	.word	0x20006af4
   1bdd8:	00022384 	.word	0x00022384
   1bddc:	200071c0 	.word	0x200071c0
   1bde0:	0002237a 	.word	0x0002237a
   1bde4:	2000143c 	.word	0x2000143c

0001bde8 <log_level_get>:
uint8_t
log_level_get(uint8_t module)
{
    uint8_t byte;

    byte = log_level_map[module / 2];
   1bde8:	0843      	lsrs	r3, r0, #1
   1bdea:	4a04      	ldr	r2, [pc, #16]	; (1bdfc <log_level_get+0x14>)
   1bdec:	5cd3      	ldrb	r3, [r2, r3]
    if (module % 2 == 0) {
   1bdee:	07c2      	lsls	r2, r0, #31
        return byte & 0x0f;
   1bdf0:	bf54      	ite	pl
   1bdf2:	f003 000f 	andpl.w	r0, r3, #15
    } else {
        return byte >> 4;
   1bdf6:	0918      	lsrmi	r0, r3, #4
    }
}
   1bdf8:	4770      	bx	lr
   1bdfa:	bf00      	nop
   1bdfc:	200071d8 	.word	0x200071d8

0001be00 <log_level_set>:

    if (level > LOG_LEVEL_MAX) {
        level = LOG_LEVEL_MAX;
    }

    byte = &log_level_map[module / 2];
   1be00:	0842      	lsrs	r2, r0, #1
{
   1be02:	b510      	push	{r4, lr}
    if (module % 2 == 0) {
        *byte = (*byte & 0xf0) | level;
   1be04:	4c09      	ldr	r4, [pc, #36]	; (1be2c <log_level_set+0x2c>)
   1be06:	290f      	cmp	r1, #15
   1be08:	56a3      	ldrsb	r3, [r4, r2]
   1be0a:	bf28      	it	cs
   1be0c:	210f      	movcs	r1, #15
    if (module % 2 == 0) {
   1be0e:	07c0      	lsls	r0, r0, #31
    } else {
        *byte = (*byte & 0x0f) | (level << 4);
   1be10:	bf47      	ittee	mi
   1be12:	f003 030f 	andmi.w	r3, r3, #15
   1be16:	ea43 1101 	orrmi.w	r1, r3, r1, lsl #4
        *byte = (*byte & 0xf0) | level;
   1be1a:	f003 03f0 	andpl.w	r3, r3, #240	; 0xf0
   1be1e:	4319      	orrpl	r1, r3
        *byte = (*byte & 0x0f) | (level << 4);
   1be20:	bf48      	it	mi
   1be22:	b2c9      	uxtbmi	r1, r1
   1be24:	54a1      	strb	r1, [r4, r2]
    }

    return 0;
}
   1be26:	2000      	movs	r0, #0
   1be28:	bd10      	pop	{r4, pc}
   1be2a:	bf00      	nop
   1be2c:	200071d8 	.word	0x200071d8

0001be30 <cbor_cnt_writer>:
};

static inline int
cbor_cnt_writer(struct cbor_encoder_writer *arg, const char *data, int len) {
    struct CborCntWriter *cb = (struct CborCntWriter *) arg;
    cb->enc.bytes_written += len;
   1be30:	6843      	ldr	r3, [r0, #4]
   1be32:	441a      	add	r2, r3
   1be34:	6042      	str	r2, [r0, #4]
    return CborNoError;
}
   1be36:	2000      	movs	r0, #0
   1be38:	4770      	bx	lr

0001be3a <cbor_encode_text_stringz>:
   1be3a:	b513      	push	{r0, r1, r4, lr}
   1be3c:	4604      	mov	r4, r0
   1be3e:	4608      	mov	r0, r1
   1be40:	9101      	str	r1, [sp, #4]
   1be42:	f7fe f815 	bl	19e70 <strlen>
   1be46:	9901      	ldr	r1, [sp, #4]
   1be48:	4602      	mov	r2, r0
   1be4a:	4620      	mov	r0, r4
   1be4c:	b002      	add	sp, #8
   1be4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1be52:	f7f9 b832 	b.w	14eba <cbor_encode_text_string>
	...

0001be58 <log_nmgr_modlevel_set>:
 * @param nmgr json buffer
 * @return 0 on success; non-zero on failure
 */
static int
log_nmgr_modlevel_set(struct mgmt_cbuf *cb)
{
   1be58:	b570      	push	{r4, r5, r6, lr}
   1be5a:	b0b4      	sub	sp, #208	; 0xd0
   1be5c:	4604      	mov	r4, r0
    int rc;
    uint64_t level;
    uint64_t module;
    CborError g_err = CborNoError;

    const struct cbor_attr_t attr[4] = {
   1be5e:	22bc      	movs	r2, #188	; 0xbc
   1be60:	2100      	movs	r1, #0
   1be62:	a805      	add	r0, sp, #20
   1be64:	f7f4 fa11 	bl	1028a <memset>
   1be68:	4b14      	ldr	r3, [pc, #80]	; (1bebc <log_nmgr_modlevel_set+0x64>)
   1be6a:	9304      	str	r3, [sp, #16]
   1be6c:	aa02      	add	r2, sp, #8
   1be6e:	2302      	movs	r3, #2
   1be70:	9206      	str	r2, [sp, #24]
        [2] = {
            .attribute = NULL
        }
    };

    rc = cbor_read_object(&cb->it, attr);
   1be72:	a904      	add	r1, sp, #16
    const struct cbor_attr_t attr[4] = {
   1be74:	4a12      	ldr	r2, [pc, #72]	; (1bec0 <log_nmgr_modlevel_set+0x68>)
   1be76:	f88d 3014 	strb.w	r3, [sp, #20]
    rc = cbor_read_object(&cb->it, attr);
   1be7a:	f104 001c 	add.w	r0, r4, #28
    const struct cbor_attr_t attr[4] = {
   1be7e:	9210      	str	r2, [sp, #64]	; 0x40
   1be80:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
   1be84:	f8cd d048 	str.w	sp, [sp, #72]	; 0x48
    rc = cbor_read_object(&cb->it, attr);
   1be88:	f7f8 fee8 	bl	14c5c <cbor_read_object>
    if (rc) {
   1be8c:	4606      	mov	r6, r0
   1be8e:	b990      	cbnz	r0, 1beb6 <log_nmgr_modlevel_set+0x5e>
        return rc;
    }

    rc = log_level_set(module, level);
   1be90:	f89d 1000 	ldrb.w	r1, [sp]
   1be94:	f89d 0008 	ldrb.w	r0, [sp, #8]
   1be98:	f7ff ffb2 	bl	1be00 <log_level_set>
    if (rc) {
        rc = MGMT_ERR_EINVAL;
    }

    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1be9c:	340c      	adds	r4, #12
        rc = MGMT_ERR_EINVAL;
   1be9e:	1e05      	subs	r5, r0, #0
   1bea0:	bf18      	it	ne
   1bea2:	2503      	movne	r5, #3
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1bea4:	4907      	ldr	r1, [pc, #28]	; (1bec4 <log_nmgr_modlevel_set+0x6c>)
   1bea6:	4620      	mov	r0, r4
   1bea8:	f7ff ffc7 	bl	1be3a <cbor_encode_text_stringz>
    g_err |= cbor_encode_int(&cb->encoder, rc);
   1beac:	462a      	mov	r2, r5
   1beae:	17eb      	asrs	r3, r5, #31
   1beb0:	4620      	mov	r0, r4
   1beb2:	f7f8 ffd1 	bl	14e58 <cbor_encode_int>

    rc = 0;
    return (rc);
}
   1beb6:	4630      	mov	r0, r6
   1beb8:	b034      	add	sp, #208	; 0xd0
   1beba:	bd70      	pop	{r4, r5, r6, pc}
   1bebc:	000223ac 	.word	0x000223ac
   1bec0:	000223b7 	.word	0x000223b7
   1bec4:	00020fea 	.word	0x00020fea

0001bec8 <log_nmgr_modlevel_get>:
 * @param nmgr json buffer
 * @return 0 on success; non-zero on failure
 */
static int
log_nmgr_modlevel_get(struct mgmt_cbuf *cb)
{
   1bec8:	b530      	push	{r4, r5, lr}
   1beca:	b0b5      	sub	sp, #212	; 0xd4
   1becc:	4604      	mov	r4, r0
    int rc;
    uint64_t level;
    uint64_t module;
    CborError g_err = CborNoError;

    const struct cbor_attr_t attr[4] = {
   1bece:	22bc      	movs	r2, #188	; 0xbc
   1bed0:	2100      	movs	r1, #0
   1bed2:	a805      	add	r0, sp, #20
   1bed4:	f7f4 f9d9 	bl	1028a <memset>
   1bed8:	4b14      	ldr	r3, [pc, #80]	; (1bf2c <log_nmgr_modlevel_get+0x64>)
   1beda:	9304      	str	r3, [sp, #16]
   1bedc:	2302      	movs	r3, #2
   1bede:	f88d 3014 	strb.w	r3, [sp, #20]
        [1] = {
            .attribute = NULL
        }
    };

    rc = cbor_read_object(&cb->it, attr);
   1bee2:	a904      	add	r1, sp, #16
    const struct cbor_attr_t attr[4] = {
   1bee4:	ab02      	add	r3, sp, #8
    rc = cbor_read_object(&cb->it, attr);
   1bee6:	f104 001c 	add.w	r0, r4, #28
    const struct cbor_attr_t attr[4] = {
   1beea:	9306      	str	r3, [sp, #24]
    rc = cbor_read_object(&cb->it, attr);
   1beec:	f7f8 feb6 	bl	14c5c <cbor_read_object>
    if (rc) {
   1bef0:	4605      	mov	r5, r0
   1bef2:	b9b8      	cbnz	r0, 1bf24 <log_nmgr_modlevel_get+0x5c>
        return rc;
    }

    level = log_level_get(module);
   1bef4:	f89d 0008 	ldrb.w	r0, [sp, #8]
   1bef8:	f7ff ff76 	bl	1bde8 <log_level_get>

    g_err |= cbor_encode_text_stringz(&cb->encoder, "level");
   1befc:	340c      	adds	r4, #12
   1befe:	490c      	ldr	r1, [pc, #48]	; (1bf30 <log_nmgr_modlevel_get+0x68>)
    level = log_level_get(module);
   1bf00:	9001      	str	r0, [sp, #4]
    g_err |= cbor_encode_text_stringz(&cb->encoder, "level");
   1bf02:	4620      	mov	r0, r4
   1bf04:	f7ff ff99 	bl	1be3a <cbor_encode_text_stringz>
    g_err |= cbor_encode_uint(&cb->encoder, level);
   1bf08:	9a01      	ldr	r2, [sp, #4]
   1bf0a:	462b      	mov	r3, r5
   1bf0c:	4620      	mov	r0, r4
   1bf0e:	f7f8 ff9b 	bl	14e48 <cbor_encode_uint>

    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1bf12:	4908      	ldr	r1, [pc, #32]	; (1bf34 <log_nmgr_modlevel_get+0x6c>)
   1bf14:	4620      	mov	r0, r4
   1bf16:	f7ff ff90 	bl	1be3a <cbor_encode_text_stringz>
    g_err |= cbor_encode_int(&cb->encoder, rc);
   1bf1a:	2200      	movs	r2, #0
   1bf1c:	2300      	movs	r3, #0
   1bf1e:	4620      	mov	r0, r4
   1bf20:	f7f8 ff9a 	bl	14e58 <cbor_encode_int>

    rc = 0;
    return (rc);
}
   1bf24:	4628      	mov	r0, r5
   1bf26:	b035      	add	sp, #212	; 0xd4
   1bf28:	bd30      	pop	{r4, r5, pc}
   1bf2a:	bf00      	nop
   1bf2c:	000223ac 	.word	0x000223ac
   1bf30:	000223b7 	.word	0x000223b7
   1bf34:	00020fea 	.word	0x00020fea

0001bf38 <log_nmgr_logs_list>:
{
   1bf38:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1bf3a:	f100 070c 	add.w	r7, r0, #12
   1bf3e:	4919      	ldr	r1, [pc, #100]	; (1bfa4 <log_nmgr_logs_list+0x6c>)
   1bf40:	4638      	mov	r0, r7
   1bf42:	f7ff ff7a 	bl	1be3a <cbor_encode_text_stringz>
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1bf46:	2200      	movs	r2, #0
   1bf48:	2300      	movs	r3, #0
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1bf4a:	4604      	mov	r4, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1bf4c:	4638      	mov	r0, r7
   1bf4e:	f7f8 ff83 	bl	14e58 <cbor_encode_int>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "log_list");
   1bf52:	4915      	ldr	r1, [pc, #84]	; (1bfa8 <log_nmgr_logs_list+0x70>)
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1bf54:	4304      	orrs	r4, r0
    g_err |= cbor_encode_text_stringz(&cb->encoder, "log_list");
   1bf56:	4638      	mov	r0, r7
   1bf58:	f7ff ff6f 	bl	1be3a <cbor_encode_text_stringz>
    g_err |= cbor_encoder_create_array(&cb->encoder, &log_list,
   1bf5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    g_err |= cbor_encode_text_stringz(&cb->encoder, "log_list");
   1bf60:	4304      	orrs	r4, r0
    g_err |= cbor_encoder_create_array(&cb->encoder, &log_list,
   1bf62:	4669      	mov	r1, sp
   1bf64:	4638      	mov	r0, r7
   1bf66:	f7f8 ffba 	bl	14ede <cbor_encoder_create_array>
    log = NULL;
   1bf6a:	2500      	movs	r5, #0
    g_err |= cbor_encoder_create_array(&cb->encoder, &log_list,
   1bf6c:	4304      	orrs	r4, r0
        log = log_list_get_next(log);
   1bf6e:	4628      	mov	r0, r5
   1bf70:	f7ff fda8 	bl	1bac4 <log_list_get_next>
        if (!log) {
   1bf74:	4605      	mov	r5, r0
   1bf76:	b148      	cbz	r0, 1bf8c <log_nmgr_logs_list+0x54>
        if (log->l_log->log_type == LOG_TYPE_STREAM) {
   1bf78:	6843      	ldr	r3, [r0, #4]
   1bf7a:	681b      	ldr	r3, [r3, #0]
   1bf7c:	2b00      	cmp	r3, #0
   1bf7e:	d0f6      	beq.n	1bf6e <log_nmgr_logs_list+0x36>
        g_err |= cbor_encode_text_stringz(&log_list, log->l_name);
   1bf80:	6801      	ldr	r1, [r0, #0]
   1bf82:	4668      	mov	r0, sp
   1bf84:	f7ff ff59 	bl	1be3a <cbor_encode_text_stringz>
   1bf88:	4304      	orrs	r4, r0
   1bf8a:	e7f0      	b.n	1bf6e <log_nmgr_logs_list+0x36>
    g_err |= cbor_encoder_close_container(&cb->encoder, &log_list);
   1bf8c:	4669      	mov	r1, sp
   1bf8e:	4638      	mov	r0, r7
   1bf90:	f7f8 ffb9 	bl	14f06 <cbor_encoder_close_container>
        return MGMT_ERR_ENOMEM;
   1bf94:	ea54 0300 	orrs.w	r3, r4, r0
}
   1bf98:	bf14      	ite	ne
   1bf9a:	2002      	movne	r0, #2
   1bf9c:	2000      	moveq	r0, #0
   1bf9e:	b004      	add	sp, #16
   1bfa0:	bdb0      	pop	{r4, r5, r7, pc}
   1bfa2:	bf00      	nop
   1bfa4:	00020fea 	.word	0x00020fea
   1bfa8:	000223bd 	.word	0x000223bd

0001bfac <log_nmgr_level_list>:
{
   1bfac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1bfb0:	f100 070c 	add.w	r7, r0, #12
{
   1bfb4:	b085      	sub	sp, #20
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1bfb6:	492b      	ldr	r1, [pc, #172]	; (1c064 <log_nmgr_level_list+0xb8>)
        str = LOG_LEVEL_STR(level);
   1bfb8:	4e2b      	ldr	r6, [pc, #172]	; (1c068 <log_nmgr_level_list+0xbc>)
        if (!strcmp(str, "UNKNOWN")) {
   1bfba:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 1c078 <log_nmgr_level_list+0xcc>
        str = LOG_LEVEL_STR(level);
   1bfbe:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 1c07c <log_nmgr_level_list+0xd0>
   1bfc2:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 1c080 <log_nmgr_level_list+0xd4>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1bfc6:	4638      	mov	r0, r7
   1bfc8:	f7ff ff37 	bl	1be3a <cbor_encode_text_stringz>
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1bfcc:	2200      	movs	r2, #0
   1bfce:	2300      	movs	r3, #0
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1bfd0:	4604      	mov	r4, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1bfd2:	4638      	mov	r0, r7
   1bfd4:	f7f8 ff40 	bl	14e58 <cbor_encode_int>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "level_map");
   1bfd8:	4924      	ldr	r1, [pc, #144]	; (1c06c <log_nmgr_level_list+0xc0>)
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1bfda:	4304      	orrs	r4, r0
    g_err |= cbor_encode_text_stringz(&cb->encoder, "level_map");
   1bfdc:	4638      	mov	r0, r7
   1bfde:	f7ff ff2c 	bl	1be3a <cbor_encode_text_stringz>
    g_err |= cbor_encoder_create_map(&cb->encoder, &level_map,
   1bfe2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    g_err |= cbor_encode_text_stringz(&cb->encoder, "level_map");
   1bfe6:	4304      	orrs	r4, r0
    g_err |= cbor_encoder_create_map(&cb->encoder, &level_map,
   1bfe8:	4669      	mov	r1, sp
   1bfea:	4638      	mov	r0, r7
   1bfec:	f7f8 ff7a 	bl	14ee4 <cbor_encoder_create_map>
   1bff0:	2500      	movs	r5, #0
   1bff2:	4304      	orrs	r4, r0
   1bff4:	46ab      	mov	fp, r5
        if (!strcmp(str, "UNKNOWN")) {
   1bff6:	4641      	mov	r1, r8
   1bff8:	4630      	mov	r0, r6
   1bffa:	f7f4 f961 	bl	102c0 <strcmp>
   1bffe:	b158      	cbz	r0, 1c018 <log_nmgr_level_list+0x6c>
        g_err |= cbor_encode_text_stringz(&level_map, str);
   1c000:	4631      	mov	r1, r6
   1c002:	4668      	mov	r0, sp
   1c004:	f7ff ff19 	bl	1be3a <cbor_encode_text_stringz>
        g_err |= cbor_encode_uint(&level_map, level);
   1c008:	462a      	mov	r2, r5
        g_err |= cbor_encode_text_stringz(&level_map, str);
   1c00a:	4606      	mov	r6, r0
        g_err |= cbor_encode_uint(&level_map, level);
   1c00c:	465b      	mov	r3, fp
   1c00e:	4668      	mov	r0, sp
   1c010:	f7f8 ff1a 	bl	14e48 <cbor_encode_uint>
   1c014:	4330      	orrs	r0, r6
   1c016:	4304      	orrs	r4, r0
    while (level < LOG_LEVEL_MAX) {
   1c018:	f1a5 030e 	sub.w	r3, r5, #14
   1c01c:	ea53 030b 	orrs.w	r3, r3, fp
   1c020:	d10b      	bne.n	1c03a <log_nmgr_level_list+0x8e>
    g_err |= cbor_encoder_close_container(&cb->encoder, &level_map);
   1c022:	4669      	mov	r1, sp
   1c024:	4638      	mov	r0, r7
   1c026:	f7f8 ff6e 	bl	14f06 <cbor_encoder_close_container>
        return MGMT_ERR_ENOMEM;
   1c02a:	ea54 0300 	orrs.w	r3, r4, r0
}
   1c02e:	bf14      	ite	ne
   1c030:	2002      	movne	r0, #2
   1c032:	2000      	moveq	r0, #0
   1c034:	b005      	add	sp, #20
   1c036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        str = LOG_LEVEL_STR(level);
   1c03a:	1c6b      	adds	r3, r5, #1
   1c03c:	b15d      	cbz	r5, 1c056 <log_nmgr_level_list+0xaa>
   1c03e:	2b02      	cmp	r3, #2
   1c040:	d00b      	beq.n	1c05a <log_nmgr_level_list+0xae>
   1c042:	2b03      	cmp	r3, #3
   1c044:	d00b      	beq.n	1c05e <log_nmgr_level_list+0xb2>
   1c046:	4e0a      	ldr	r6, [pc, #40]	; (1c070 <log_nmgr_level_list+0xc4>)
   1c048:	2b04      	cmp	r3, #4
   1c04a:	bf18      	it	ne
   1c04c:	4646      	movne	r6, r8
   1c04e:	3501      	adds	r5, #1
   1c050:	f14b 0b00 	adc.w	fp, fp, #0
   1c054:	e7cf      	b.n	1bff6 <log_nmgr_level_list+0x4a>
   1c056:	464e      	mov	r6, r9
   1c058:	e7f9      	b.n	1c04e <log_nmgr_level_list+0xa2>
   1c05a:	4656      	mov	r6, sl
   1c05c:	e7f7      	b.n	1c04e <log_nmgr_level_list+0xa2>
   1c05e:	4e05      	ldr	r6, [pc, #20]	; (1c074 <log_nmgr_level_list+0xc8>)
   1c060:	e7f5      	b.n	1c04e <log_nmgr_level_list+0xa2>
   1c062:	bf00      	nop
   1c064:	00020fea 	.word	0x00020fea
   1c068:	000223e7 	.word	0x000223e7
   1c06c:	000223ed 	.word	0x000223ed
   1c070:	000223de 	.word	0x000223de
   1c074:	000223cb 	.word	0x000223cb
   1c078:	000223d1 	.word	0x000223d1
   1c07c:	000223c6 	.word	0x000223c6
   1c080:	000223d9 	.word	0x000223d9

0001c084 <log_nmgr_module_list>:
{
   1c084:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1c088:	f100 070c 	add.w	r7, r0, #12
   1c08c:	491e      	ldr	r1, [pc, #120]	; (1c108 <log_nmgr_module_list+0x84>)
   1c08e:	4638      	mov	r0, r7
   1c090:	f7ff fed3 	bl	1be3a <cbor_encode_text_stringz>
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1c094:	2200      	movs	r2, #0
   1c096:	2300      	movs	r3, #0
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1c098:	4604      	mov	r4, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1c09a:	4638      	mov	r0, r7
   1c09c:	f7f8 fedc 	bl	14e58 <cbor_encode_int>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "module_map");
   1c0a0:	491a      	ldr	r1, [pc, #104]	; (1c10c <log_nmgr_module_list+0x88>)
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1c0a2:	4304      	orrs	r4, r0
    g_err |= cbor_encode_text_stringz(&cb->encoder, "module_map");
   1c0a4:	4638      	mov	r0, r7
   1c0a6:	f7ff fec8 	bl	1be3a <cbor_encode_text_stringz>
    g_err |= cbor_encoder_create_map(&cb->encoder, &modules,
   1c0aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    g_err |= cbor_encode_text_stringz(&cb->encoder, "module_map");
   1c0ae:	4304      	orrs	r4, r0
    g_err |= cbor_encoder_create_map(&cb->encoder, &modules,
   1c0b0:	4669      	mov	r1, sp
   1c0b2:	4638      	mov	r0, r7
   1c0b4:	f7f8 ff16 	bl	14ee4 <cbor_encoder_create_map>
   1c0b8:	2500      	movs	r5, #0
   1c0ba:	4304      	orrs	r4, r0
   1c0bc:	46a8      	mov	r8, r5
        str = LOG_MODULE_STR(module);
   1c0be:	b2e8      	uxtb	r0, r5
   1c0c0:	f7ff fd08 	bl	1bad4 <log_module_get_name>
        if (!str) {
   1c0c4:	4601      	mov	r1, r0
   1c0c6:	b150      	cbz	r0, 1c0de <log_nmgr_module_list+0x5a>
        g_err |= cbor_encode_text_stringz(&modules, str);
   1c0c8:	4668      	mov	r0, sp
   1c0ca:	f7ff feb6 	bl	1be3a <cbor_encode_text_stringz>
        g_err |= cbor_encode_uint(&modules, module);
   1c0ce:	462a      	mov	r2, r5
        g_err |= cbor_encode_text_stringz(&modules, str);
   1c0d0:	4606      	mov	r6, r0
        g_err |= cbor_encode_uint(&modules, module);
   1c0d2:	4643      	mov	r3, r8
   1c0d4:	4668      	mov	r0, sp
   1c0d6:	f7f8 feb7 	bl	14e48 <cbor_encode_uint>
   1c0da:	4330      	orrs	r0, r6
   1c0dc:	4304      	orrs	r4, r0
    while (module < LOG_MODULE_MAX) {
   1c0de:	3501      	adds	r5, #1
   1c0e0:	f148 0800 	adc.w	r8, r8, #0
   1c0e4:	f1a5 03ff 	sub.w	r3, r5, #255	; 0xff
   1c0e8:	ea53 0308 	orrs.w	r3, r3, r8
   1c0ec:	d1e7      	bne.n	1c0be <log_nmgr_module_list+0x3a>
    g_err |= cbor_encoder_close_container(&cb->encoder, &modules);
   1c0ee:	4669      	mov	r1, sp
   1c0f0:	4638      	mov	r0, r7
   1c0f2:	f7f8 ff08 	bl	14f06 <cbor_encoder_close_container>
        return MGMT_ERR_ENOMEM;
   1c0f6:	ea54 0300 	orrs.w	r3, r4, r0
}
   1c0fa:	bf14      	ite	ne
   1c0fc:	2002      	movne	r0, #2
   1c0fe:	2000      	moveq	r0, #0
   1c100:	b004      	add	sp, #16
   1c102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c106:	bf00      	nop
   1c108:	00020fea 	.word	0x00020fea
   1c10c:	000223f7 	.word	0x000223f7

0001c110 <log_nmgr_read>:
{
   1c110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c114:	ed2d 8b02 	vpush	{d8}
   1c118:	b0e3      	sub	sp, #396	; 0x18c
    char name[LOG_NAME_MAX_LEN] = {0};
   1c11a:	2100      	movs	r1, #0
{
   1c11c:	4604      	mov	r4, r0
    char name[LOG_NAME_MAX_LEN] = {0};
   1c11e:	223c      	movs	r2, #60	; 0x3c
   1c120:	a823      	add	r0, sp, #140	; 0x8c
   1c122:	9122      	str	r1, [sp, #136]	; 0x88
   1c124:	f7f4 f8b1 	bl	1028a <memset>
    const struct cbor_attr_t attr[4] = {
   1c128:	22bc      	movs	r2, #188	; 0xbc
   1c12a:	2100      	movs	r1, #0
   1c12c:	a833      	add	r0, sp, #204	; 0xcc
   1c12e:	f7f4 f8ac 	bl	1028a <memset>
   1c132:	4b79      	ldr	r3, [pc, #484]	; (1c318 <log_nmgr_read+0x208>)
   1c134:	9332      	str	r3, [sp, #200]	; 0xc8
   1c136:	2304      	movs	r3, #4
   1c138:	f88d 30cc 	strb.w	r3, [sp, #204]	; 0xcc
   1c13c:	2340      	movs	r3, #64	; 0x40
   1c13e:	933c      	str	r3, [sp, #240]	; 0xf0
   1c140:	4b76      	ldr	r3, [pc, #472]	; (1c31c <log_nmgr_read+0x20c>)
   1c142:	933e      	str	r3, [sp, #248]	; 0xf8
   1c144:	2301      	movs	r3, #1
   1c146:	f88d 30fc 	strb.w	r3, [sp, #252]	; 0xfc
   1c14a:	ab04      	add	r3, sp, #16
   1c14c:	9340      	str	r3, [sp, #256]	; 0x100
   1c14e:	4b74      	ldr	r3, [pc, #464]	; (1c320 <log_nmgr_read+0x210>)
   1c150:	934a      	str	r3, [sp, #296]	; 0x128
   1c152:	2302      	movs	r3, #2
   1c154:	f88d 312c 	strb.w	r3, [sp, #300]	; 0x12c
    char name[LOG_NAME_MAX_LEN] = {0};
   1c158:	af22      	add	r7, sp, #136	; 0x88
    const struct cbor_attr_t attr[4] = {
   1c15a:	ab06      	add	r3, sp, #24
    rc = cbor_read_object(&cb->it, attr);
   1c15c:	a932      	add	r1, sp, #200	; 0xc8
   1c15e:	f104 001c 	add.w	r0, r4, #28
    const struct cbor_attr_t attr[4] = {
   1c162:	9734      	str	r7, [sp, #208]	; 0xd0
   1c164:	934c      	str	r3, [sp, #304]	; 0x130
    rc = cbor_read_object(&cb->it, attr);
   1c166:	f7f8 fd79 	bl	14c5c <cbor_read_object>
    if (rc) {
   1c16a:	4606      	mov	r6, r0
   1c16c:	2800      	cmp	r0, #0
   1c16e:	f040 80ca 	bne.w	1c306 <log_nmgr_read+0x1f6>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "next_index");
   1c172:	340c      	adds	r4, #12
   1c174:	496b      	ldr	r1, [pc, #428]	; (1c324 <log_nmgr_read+0x214>)
    g_err |= cbor_encode_text_stringz(&logs, "type");
   1c176:	f8df b1cc 	ldr.w	fp, [pc, #460]	; 1c344 <log_nmgr_read+0x234>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "next_index");
   1c17a:	4620      	mov	r0, r4
   1c17c:	f7ff fe5d 	bl	1be3a <cbor_encode_text_stringz>
    g_err |= cbor_encode_int(&cb->encoder, g_log_info.li_next_index);
   1c180:	4b69      	ldr	r3, [pc, #420]	; (1c328 <log_nmgr_read+0x218>)
    g_err |= cbor_encode_text_stringz(&cb->encoder, "next_index");
   1c182:	4605      	mov	r5, r0
    g_err |= cbor_encode_int(&cb->encoder, g_log_info.li_next_index);
   1c184:	681a      	ldr	r2, [r3, #0]
   1c186:	4620      	mov	r0, r4
   1c188:	4633      	mov	r3, r6
   1c18a:	f7f8 fe65 	bl	14e58 <cbor_encode_int>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "logs");
   1c18e:	4967      	ldr	r1, [pc, #412]	; (1c32c <log_nmgr_read+0x21c>)
    g_err |= cbor_encode_int(&cb->encoder, g_log_info.li_next_index);
   1c190:	4305      	orrs	r5, r0
    g_err |= cbor_encode_text_stringz(&cb->encoder, "logs");
   1c192:	4620      	mov	r0, r4
   1c194:	f7ff fe51 	bl	1be3a <cbor_encode_text_stringz>
    g_err |= cbor_encoder_create_array(&cb->encoder, &logs,
   1c198:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    g_err |= cbor_encode_text_stringz(&cb->encoder, "logs");
   1c19c:	4305      	orrs	r5, r0
    g_err |= cbor_encoder_create_array(&cb->encoder, &logs,
   1c19e:	a90c      	add	r1, sp, #48	; 0x30
   1c1a0:	4620      	mov	r0, r4
   1c1a2:	f7f8 fe9c 	bl	14ede <cbor_encoder_create_array>
   1c1a6:	ea45 0300 	orr.w	r3, r5, r0
    name_len = strlen(name);
   1c1aa:	4638      	mov	r0, r7
    g_err |= cbor_encoder_create_array(&cb->encoder, &logs,
   1c1ac:	9301      	str	r3, [sp, #4]
    name_len = strlen(name);
   1c1ae:	f7fd fe5f 	bl	19e70 <strlen>
    log = NULL;
   1c1b2:	4635      	mov	r5, r6
    name_len = strlen(name);
   1c1b4:	4607      	mov	r7, r0
        log = log_list_get_next(log);
   1c1b6:	4628      	mov	r0, r5
   1c1b8:	f7ff fc84 	bl	1bac4 <log_list_get_next>
        if (!log) {
   1c1bc:	4605      	mov	r5, r0
   1c1be:	2800      	cmp	r0, #0
   1c1c0:	f000 80a7 	beq.w	1c312 <log_nmgr_read+0x202>
        if (log->l_log->log_type == LOG_TYPE_STREAM) {
   1c1c4:	6843      	ldr	r3, [r0, #4]
   1c1c6:	681b      	ldr	r3, [r3, #0]
   1c1c8:	2b00      	cmp	r3, #0
   1c1ca:	d0f4      	beq.n	1c1b6 <log_nmgr_read+0xa6>
        if ((name_len > 0) && strcmp(name, log->l_name)) {
   1c1cc:	b12f      	cbz	r7, 1c1da <log_nmgr_read+0xca>
   1c1ce:	6801      	ldr	r1, [r0, #0]
   1c1d0:	a822      	add	r0, sp, #136	; 0x88
   1c1d2:	f7f4 f875 	bl	102c0 <strcmp>
   1c1d6:	2800      	cmp	r0, #0
   1c1d8:	d1ed      	bne.n	1c1b6 <log_nmgr_read+0xa6>
        rc = log_encode(log, &logs, ts, index);
   1c1da:	9b06      	ldr	r3, [sp, #24]
   1c1dc:	9303      	str	r3, [sp, #12]
    g_err |= cbor_encoder_create_map(cb, &logs, CborIndefiniteLength);
   1c1de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c1e2:	a910      	add	r1, sp, #64	; 0x40
   1c1e4:	a80c      	add	r0, sp, #48	; 0x30
        rc = log_encode(log, &logs, ts, index);
   1c1e6:	ed9d 8b04 	vldr	d8, [sp, #16]
    g_err |= cbor_encoder_create_map(cb, &logs, CborIndefiniteLength);
   1c1ea:	f7f8 fe7b 	bl	14ee4 <cbor_encoder_create_map>
    g_err |= cbor_encode_text_stringz(&logs, "name");
   1c1ee:	4950      	ldr	r1, [pc, #320]	; (1c330 <log_nmgr_read+0x220>)
    g_err |= cbor_encoder_create_map(cb, &logs, CborIndefiniteLength);
   1c1f0:	4681      	mov	r9, r0
    g_err |= cbor_encode_text_stringz(&logs, "name");
   1c1f2:	a810      	add	r0, sp, #64	; 0x40
   1c1f4:	f7ff fe21 	bl	1be3a <cbor_encode_text_stringz>
    g_err |= cbor_encode_text_stringz(&logs, log->l_name);
   1c1f8:	6829      	ldr	r1, [r5, #0]
    g_err |= cbor_encode_text_stringz(&logs, "name");
   1c1fa:	ea49 0900 	orr.w	r9, r9, r0
    g_err |= cbor_encode_text_stringz(&logs, log->l_name);
   1c1fe:	a810      	add	r0, sp, #64	; 0x40
   1c200:	f7ff fe1b 	bl	1be3a <cbor_encode_text_stringz>
    g_err |= cbor_encode_text_stringz(&logs, "type");
   1c204:	4659      	mov	r1, fp
    g_err |= cbor_encode_text_stringz(&logs, log->l_name);
   1c206:	ea49 0900 	orr.w	r9, r9, r0
    g_err |= cbor_encode_text_stringz(&logs, "type");
   1c20a:	a810      	add	r0, sp, #64	; 0x40
   1c20c:	f7ff fe15 	bl	1be3a <cbor_encode_text_stringz>
    g_err |= cbor_encode_uint(&logs, log->l_log->log_type);
   1c210:	686b      	ldr	r3, [r5, #4]
   1c212:	681a      	ldr	r2, [r3, #0]
    g_err |= cbor_encode_text_stringz(&logs, "type");
   1c214:	ea49 0900 	orr.w	r9, r9, r0
    g_err |= cbor_encode_uint(&logs, log->l_log->log_type);
   1c218:	17d3      	asrs	r3, r2, #31
   1c21a:	a810      	add	r0, sp, #64	; 0x40
   1c21c:	f7f8 fe14 	bl	14e48 <cbor_encode_uint>

static inline void
cbor_cnt_writer_init(struct CborCntWriter *cb) {
    cb->enc.bytes_written = 0;
   1c220:	f04f 0a00 	mov.w	sl, #0
   1c224:	ea49 0300 	orr.w	r3, r9, r0
    memset(&log_offset, 0, sizeof(log_offset));
   1c228:	2218      	movs	r2, #24
   1c22a:	2100      	movs	r1, #0
   1c22c:	a81c      	add	r0, sp, #112	; 0x70
    g_err |= cbor_encode_uint(&logs, log->l_log->log_type);
   1c22e:	9302      	str	r3, [sp, #8]
    memset(&log_offset, 0, sizeof(log_offset));
   1c230:	f7f4 f82b 	bl	1028a <memset>
    cb->enc.write = &cbor_cnt_writer;
   1c234:	4b3f      	ldr	r3, [pc, #252]	; (1c334 <log_nmgr_read+0x224>)
   1c236:	9308      	str	r3, [sp, #32]
    cbor_encoder_init(&cnt_encoder, &cnt_writer.enc, 0);
   1c238:	4652      	mov	r2, sl
   1c23a:	a908      	add	r1, sp, #32
   1c23c:	a818      	add	r0, sp, #96	; 0x60
    g_err |= cbor_encoder_create_array(&cnt_encoder, &entries,
   1c23e:	f10d 0850 	add.w	r8, sp, #80	; 0x50
    cb->enc.bytes_written = 0;
   1c242:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    cbor_encoder_init(&cnt_encoder, &cnt_writer.enc, 0);
   1c246:	f7f8 fdfa 	bl	14e3e <cbor_encoder_init>
    g_err |= cbor_encode_text_stringz(&cnt_encoder, "entries");
   1c24a:	493b      	ldr	r1, [pc, #236]	; (1c338 <log_nmgr_read+0x228>)
   1c24c:	a818      	add	r0, sp, #96	; 0x60
   1c24e:	f7ff fdf4 	bl	1be3a <cbor_encode_text_stringz>
    g_err |= cbor_encoder_create_array(&cnt_encoder, &entries,
   1c252:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c256:	4641      	mov	r1, r8
   1c258:	a818      	add	r0, sp, #96	; 0x60
   1c25a:	f7f8 fe40 	bl	14ede <cbor_encoder_create_array>
    g_err |= cbor_encoder_close_container(&cnt_encoder, &entries);
   1c25e:	4641      	mov	r1, r8
   1c260:	a818      	add	r0, sp, #96	; 0x60
   1c262:	f7f8 fe50 	bl	14f06 <cbor_encoder_close_container>
{   return encoder->writer->bytes_written; }
   1c266:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1c268:	9818      	ldr	r0, [sp, #96]	; 0x60
    rsp_len = cbor_encode_bytes_written(cb) +
   1c26a:	6851      	ldr	r1, [r2, #4]
   1c26c:	6842      	ldr	r2, [r0, #4]
   1c26e:	eb01 0902 	add.w	r9, r1, r2
    if (rsp_len > MYNEWT_VAL(LOG_NMGR_MAX_RSP_LEN)) {
   1c272:	f5b9 7fc8 	cmp.w	r9, #400	; 0x190
   1c276:	dc27      	bgt.n	1c2c8 <log_nmgr_read+0x1b8>
    g_err |= cbor_encode_text_stringz(cb, "entries");
   1c278:	492f      	ldr	r1, [pc, #188]	; (1c338 <log_nmgr_read+0x228>)
   1c27a:	a810      	add	r0, sp, #64	; 0x40
   1c27c:	f7ff fddd 	bl	1be3a <cbor_encode_text_stringz>
    g_err |= cbor_encoder_create_array(cb, &entries, CborIndefiniteLength);
   1c280:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c284:	4641      	mov	r1, r8
   1c286:	a810      	add	r0, sp, #64	; 0x40
   1c288:	f7f8 fe29 	bl	14ede <cbor_encoder_create_array>
    ed.counter = 0;
   1c28c:	aa0a      	add	r2, sp, #40	; 0x28
        rc = log_encode(log, &logs, ts, index);
   1c28e:	9b03      	ldr	r3, [sp, #12]
    rc = log_walk_body(log, log_nmgr_encode_entry, &log_offset);
   1c290:	492a      	ldr	r1, [pc, #168]	; (1c33c <log_nmgr_read+0x22c>)
    log_offset.lo_arg       = &ed;
   1c292:	9220      	str	r2, [sp, #128]	; 0x80
    rc = log_walk_body(log, log_nmgr_encode_entry, &log_offset);
   1c294:	4628      	mov	r0, r5
   1c296:	aa1c      	add	r2, sp, #112	; 0x70
    log_offset.lo_data_len  = rsp_len;
   1c298:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
    ed.enc = &entries;
   1c29c:	e9cd a80a 	strd	sl, r8, [sp, #40]	; 0x28
    log_offset.lo_ts        = ts;
   1c2a0:	ed8d 8b1c 	vstr	d8, [sp, #112]	; 0x70
        rc = log_encode(log, &logs, ts, index);
   1c2a4:	931e      	str	r3, [sp, #120]	; 0x78
    rc = log_walk_body(log, log_nmgr_encode_entry, &log_offset);
   1c2a6:	f7ff fcc7 	bl	1bc38 <log_walk_body>
    g_err |= cbor_encoder_close_container(cb, &entries);
   1c2aa:	4641      	mov	r1, r8
    rc = log_walk_body(log, log_nmgr_encode_entry, &log_offset);
   1c2ac:	4681      	mov	r9, r0
    g_err |= cbor_encoder_close_container(cb, &entries);
   1c2ae:	a810      	add	r0, sp, #64	; 0x40
   1c2b0:	f7f8 fe29 	bl	14f06 <cbor_encoder_close_container>
    g_err |= cbor_encoder_close_container(cb, &logs);
   1c2b4:	a910      	add	r1, sp, #64	; 0x40
   1c2b6:	a80c      	add	r0, sp, #48	; 0x30
   1c2b8:	f7f8 fe25 	bl	14f06 <cbor_encoder_close_container>
    if (g_err) {
   1c2bc:	9b02      	ldr	r3, [sp, #8]
   1c2be:	4303      	orrs	r3, r0
   1c2c0:	d005      	beq.n	1c2ce <log_nmgr_read+0x1be>
        rc = OS_EINVAL;
   1c2c2:	f04f 0902 	mov.w	r9, #2
   1c2c6:	e00a      	b.n	1c2de <log_nmgr_read+0x1ce>
        rc = OS_ENOMEM;
   1c2c8:	f04f 0901 	mov.w	r9, #1
   1c2cc:	e7f2      	b.n	1c2b4 <log_nmgr_read+0x1a4>
        if (rc) {
   1c2ce:	f1b9 0f00 	cmp.w	r9, #0
   1c2d2:	d104      	bne.n	1c2de <log_nmgr_read+0x1ce>
        if (name_len > 0) {
   1c2d4:	2f00      	cmp	r7, #0
   1c2d6:	f43f af6e 	beq.w	1c1b6 <log_nmgr_read+0xa6>
        return MGMT_ERR_ENOMEM;
   1c2da:	f04f 0900 	mov.w	r9, #0
    g_err |= cbor_encoder_close_container(&cb->encoder, &logs);
   1c2de:	a90c      	add	r1, sp, #48	; 0x30
   1c2e0:	4620      	mov	r0, r4
   1c2e2:	f7f8 fe10 	bl	14f06 <cbor_encoder_close_container>
   1c2e6:	9f01      	ldr	r7, [sp, #4]
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1c2e8:	4915      	ldr	r1, [pc, #84]	; (1c340 <log_nmgr_read+0x230>)
    g_err |= cbor_encoder_close_container(&cb->encoder, &logs);
   1c2ea:	4307      	orrs	r7, r0
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1c2ec:	4620      	mov	r0, r4
   1c2ee:	f7ff fda4 	bl	1be3a <cbor_encode_text_stringz>
    g_err |= cbor_encode_int(&cb->encoder, rc);
   1c2f2:	464a      	mov	r2, r9
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1c2f4:	4307      	orrs	r7, r0
    g_err |= cbor_encode_int(&cb->encoder, rc);
   1c2f6:	17d3      	asrs	r3, r2, #31
   1c2f8:	4620      	mov	r0, r4
   1c2fa:	f7f8 fdad 	bl	14e58 <cbor_encode_int>
        return MGMT_ERR_ENOMEM;
   1c2fe:	ea57 0300 	orrs.w	r3, r7, r0
   1c302:	bf18      	it	ne
   1c304:	2602      	movne	r6, #2
}
   1c306:	4630      	mov	r0, r6
   1c308:	b063      	add	sp, #396	; 0x18c
   1c30a:	ecbd 8b02 	vpop	{d8}
   1c30e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!log && name_len > 0) {
   1c312:	2f00      	cmp	r7, #0
   1c314:	d1d5      	bne.n	1c2c2 <log_nmgr_read+0x1b2>
   1c316:	e7e0      	b.n	1c2da <log_nmgr_read+0x1ca>
   1c318:	00022402 	.word	0x00022402
   1c31c:	0002069c 	.word	0x0002069c
   1c320:	00022410 	.word	0x00022410
   1c324:	0002240b 	.word	0x0002240b
   1c328:	200071b0 	.word	0x200071b0
   1c32c:	00022416 	.word	0x00022416
   1c330:	00020e2a 	.word	0x00020e2a
   1c334:	0001be31 	.word	0x0001be31
   1c338:	0002241b 	.word	0x0002241b
   1c33c:	0001c349 	.word	0x0001c349
   1c340:	00020fea 	.word	0x00020fea
   1c344:	000210fe 	.word	0x000210fe

0001c348 <log_nmgr_encode_entry>:
{
   1c348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c34c:	468b      	mov	fp, r1
   1c34e:	4690      	mov	r8, r2
   1c350:	4619      	mov	r1, r3
    if (log_offset->lo_ts == 0) {
   1c352:	e9db 2300 	ldrd	r2, r3, [fp]
   1c356:	ea52 0403 	orrs.w	r4, r2, r3
{
   1c35a:	b0ad      	sub	sp, #180	; 0xb4
    if (log_offset->lo_ts == 0) {
   1c35c:	d107      	bne.n	1c36e <log_nmgr_encode_entry+0x26>
        if (log_offset->lo_index > ueh->ue_index) {
   1c35e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1c362:	f8db 2008 	ldr.w	r2, [fp, #8]
   1c366:	429a      	cmp	r2, r3
   1c368:	d913      	bls.n	1c392 <log_nmgr_encode_entry+0x4a>
    rc = OS_OK;
   1c36a:	2000      	movs	r0, #0
   1c36c:	e0e7      	b.n	1c53e <log_nmgr_encode_entry+0x1f6>
    } else if (ueh->ue_ts < log_offset->lo_ts   ||
   1c36e:	f8d8 5000 	ldr.w	r5, [r8]
   1c372:	f8d8 4004 	ldr.w	r4, [r8, #4]
   1c376:	4295      	cmp	r5, r2
   1c378:	eb74 0603 	sbcs.w	r6, r4, r3
   1c37c:	dbf5      	blt.n	1c36a <log_nmgr_encode_entry+0x22>
   1c37e:	42a3      	cmp	r3, r4
   1c380:	bf08      	it	eq
   1c382:	42aa      	cmpeq	r2, r5
   1c384:	d105      	bne.n	1c392 <log_nmgr_encode_entry+0x4a>
                ueh->ue_index < log_offset->lo_index)) {
   1c386:	f8d8 2008 	ldr.w	r2, [r8, #8]
               (ueh->ue_ts == log_offset->lo_ts &&
   1c38a:	f8db 3008 	ldr.w	r3, [fp, #8]
   1c38e:	429a      	cmp	r2, r3
   1c390:	d3eb      	bcc.n	1c36a <log_nmgr_encode_entry+0x22>
    rc = log_read_body(log, dptr, data, 0, min(len, 128));
   1c392:	f8bd 30d8 	ldrh.w	r3, [sp, #216]	; 0xd8
    struct log_encode_data *ed = log_offset->lo_arg;
   1c396:	f8db 9010 	ldr.w	r9, [fp, #16]
    rc = log_read_body(log, dptr, data, 0, min(len, 128));
   1c39a:	2b80      	cmp	r3, #128	; 0x80
   1c39c:	bf28      	it	cs
   1c39e:	2380      	movcs	r3, #128	; 0x80
   1c3a0:	9300      	str	r3, [sp, #0]
   1c3a2:	aa0c      	add	r2, sp, #48	; 0x30
   1c3a4:	2300      	movs	r3, #0
   1c3a6:	f7ff fca3 	bl	1bcf0 <log_read_body>
    if (rc < 0) {
   1c3aa:	2800      	cmp	r0, #0
   1c3ac:	f2c0 80ca 	blt.w	1c544 <log_nmgr_encode_entry+0x1fc>
    data[rc] = 0;
   1c3b0:	f100 03b0 	add.w	r3, r0, #176	; 0xb0
   1c3b4:	eb0d 0003 	add.w	r0, sp, r3
   1c3b8:	2700      	movs	r7, #0
    cb->enc.write = &cbor_cnt_writer;
   1c3ba:	4b64      	ldr	r3, [pc, #400]	; (1c54c <log_nmgr_encode_entry+0x204>)
   1c3bc:	f800 7c80 	strb.w	r7, [r0, #-128]
    cbor_encoder_init(&cnt_encoder, &cnt_writer.enc, 0);
   1c3c0:	463a      	mov	r2, r7
   1c3c2:	a902      	add	r1, sp, #8
   1c3c4:	a808      	add	r0, sp, #32
   1c3c6:	9302      	str	r3, [sp, #8]
    cb->enc.bytes_written = 0;
   1c3c8:	9703      	str	r7, [sp, #12]
   1c3ca:	f7f8 fd38 	bl	14e3e <cbor_encoder_init>
    g_err |= cbor_encoder_create_map(&cnt_encoder, &rsp, CborIndefiniteLength);
   1c3ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c3d2:	a904      	add	r1, sp, #16
   1c3d4:	a808      	add	r0, sp, #32
    rsp_len = log_offset->lo_data_len;
   1c3d6:	f8db 400c 	ldr.w	r4, [fp, #12]
    g_err |= cbor_encoder_create_map(&cnt_encoder, &rsp, CborIndefiniteLength);
   1c3da:	f7f8 fd83 	bl	14ee4 <cbor_encoder_create_map>
    g_err |= cbor_encode_text_stringz(&rsp, "msg");
   1c3de:	495c      	ldr	r1, [pc, #368]	; (1c550 <log_nmgr_encode_entry+0x208>)
    g_err |= cbor_encoder_create_map(&cnt_encoder, &rsp, CborIndefiniteLength);
   1c3e0:	4605      	mov	r5, r0
    g_err |= cbor_encode_text_stringz(&rsp, "msg");
   1c3e2:	a804      	add	r0, sp, #16
   1c3e4:	f7ff fd29 	bl	1be3a <cbor_encode_text_stringz>
    g_err |= cbor_encode_text_stringz(&rsp, (char *)data);
   1c3e8:	a90c      	add	r1, sp, #48	; 0x30
    g_err |= cbor_encode_text_stringz(&rsp, "msg");
   1c3ea:	4305      	orrs	r5, r0
    g_err |= cbor_encode_text_stringz(&rsp, (char *)data);
   1c3ec:	a804      	add	r0, sp, #16
   1c3ee:	f7ff fd24 	bl	1be3a <cbor_encode_text_stringz>
    g_err |= cbor_encode_text_stringz(&rsp, "ts");
   1c3f2:	4958      	ldr	r1, [pc, #352]	; (1c554 <log_nmgr_encode_entry+0x20c>)
    g_err |= cbor_encode_text_stringz(&rsp, (char *)data);
   1c3f4:	4305      	orrs	r5, r0
    g_err |= cbor_encode_text_stringz(&rsp, "ts");
   1c3f6:	a804      	add	r0, sp, #16
   1c3f8:	f7ff fd1f 	bl	1be3a <cbor_encode_text_stringz>
    g_err |= cbor_encode_int(&rsp, ueh->ue_ts);
   1c3fc:	f8d8 2000 	ldr.w	r2, [r8]
   1c400:	f8d8 3004 	ldr.w	r3, [r8, #4]
    g_err |= cbor_encode_text_stringz(&rsp, "ts");
   1c404:	ea45 0600 	orr.w	r6, r5, r0
    g_err |= cbor_encode_int(&rsp, ueh->ue_ts);
   1c408:	a804      	add	r0, sp, #16
   1c40a:	f7f8 fd25 	bl	14e58 <cbor_encode_int>
    g_err |= cbor_encode_text_stringz(&rsp, "level");
   1c40e:	4952      	ldr	r1, [pc, #328]	; (1c558 <log_nmgr_encode_entry+0x210>)
    g_err |= cbor_encode_int(&rsp, ueh->ue_ts);
   1c410:	4306      	orrs	r6, r0
    g_err |= cbor_encode_text_stringz(&rsp, "level");
   1c412:	a804      	add	r0, sp, #16
   1c414:	f7ff fd11 	bl	1be3a <cbor_encode_text_stringz>
    g_err |= cbor_encode_uint(&rsp, ueh->ue_level);
   1c418:	f898 200d 	ldrb.w	r2, [r8, #13]
    g_err |= cbor_encode_text_stringz(&rsp, "level");
   1c41c:	ea46 0500 	orr.w	r5, r6, r0
    g_err |= cbor_encode_uint(&rsp, ueh->ue_level);
   1c420:	463b      	mov	r3, r7
   1c422:	a804      	add	r0, sp, #16
   1c424:	f7f8 fd10 	bl	14e48 <cbor_encode_uint>
    g_err |= cbor_encode_text_stringz(&rsp, "index");
   1c428:	494c      	ldr	r1, [pc, #304]	; (1c55c <log_nmgr_encode_entry+0x214>)
    g_err |= cbor_encode_uint(&rsp, ueh->ue_level);
   1c42a:	4305      	orrs	r5, r0
    g_err |= cbor_encode_text_stringz(&rsp, "index");
   1c42c:	a804      	add	r0, sp, #16
   1c42e:	f7ff fd04 	bl	1be3a <cbor_encode_text_stringz>
    g_err |= cbor_encode_uint(&rsp,  ueh->ue_index);
   1c432:	f8d8 2008 	ldr.w	r2, [r8, #8]
    g_err |= cbor_encode_text_stringz(&rsp, "index");
   1c436:	ea45 0a00 	orr.w	sl, r5, r0
    g_err |= cbor_encode_uint(&rsp,  ueh->ue_index);
   1c43a:	463b      	mov	r3, r7
   1c43c:	a804      	add	r0, sp, #16
   1c43e:	f7f8 fd03 	bl	14e48 <cbor_encode_uint>
    g_err |= cbor_encode_text_stringz(&rsp, "module");
   1c442:	4947      	ldr	r1, [pc, #284]	; (1c560 <log_nmgr_encode_entry+0x218>)
    g_err |= cbor_encode_uint(&rsp,  ueh->ue_index);
   1c444:	ea4a 0a00 	orr.w	sl, sl, r0
    g_err |= cbor_encode_text_stringz(&rsp, "module");
   1c448:	a804      	add	r0, sp, #16
   1c44a:	f7ff fcf6 	bl	1be3a <cbor_encode_text_stringz>
    g_err |= cbor_encode_uint(&rsp,  ueh->ue_module);
   1c44e:	463b      	mov	r3, r7
   1c450:	f898 200c 	ldrb.w	r2, [r8, #12]
    g_err |= cbor_encode_text_stringz(&rsp, "module");
   1c454:	ea4a 0600 	orr.w	r6, sl, r0
    g_err |= cbor_encode_uint(&rsp,  ueh->ue_module);
   1c458:	a804      	add	r0, sp, #16
   1c45a:	f7f8 fcf5 	bl	14e48 <cbor_encode_uint>
    g_err |= cbor_encoder_close_container(&cnt_encoder, &rsp);
   1c45e:	a904      	add	r1, sp, #16
    g_err |= cbor_encode_uint(&rsp,  ueh->ue_module);
   1c460:	4306      	orrs	r6, r0
    g_err |= cbor_encoder_close_container(&cnt_encoder, &rsp);
   1c462:	a808      	add	r0, sp, #32
   1c464:	f7f8 fd4f 	bl	14f06 <cbor_encoder_close_container>
   1c468:	9b08      	ldr	r3, [sp, #32]
   1c46a:	ea46 0500 	orr.w	r5, r6, r0
    rsp_len += cbor_encode_bytes_written(&cnt_encoder);
   1c46e:	685e      	ldr	r6, [r3, #4]
   1c470:	4426      	add	r6, r4
    if (rsp_len > MYNEWT_VAL(LOG_NMGR_MAX_RSP_LEN)) {
   1c472:	f5b6 7fc8 	cmp.w	r6, #400	; 0x190
   1c476:	dd04      	ble.n	1c482 <log_nmgr_encode_entry+0x13a>
        if (ed->counter == 0) {
   1c478:	f8d9 3000 	ldr.w	r3, [r9]
   1c47c:	2b00      	cmp	r3, #0
   1c47e:	d163      	bne.n	1c548 <log_nmgr_encode_entry+0x200>
            too_long = true;
   1c480:	2701      	movs	r7, #1
    g_err |= cbor_encoder_create_map(ed->enc, &rsp, CborIndefiniteLength);
   1c482:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c486:	a904      	add	r1, sp, #16
   1c488:	f8d9 0004 	ldr.w	r0, [r9, #4]
    log_offset->lo_data_len = rsp_len;
   1c48c:	f8cb 600c 	str.w	r6, [fp, #12]
    g_err |= cbor_encoder_create_map(ed->enc, &rsp, CborIndefiniteLength);
   1c490:	f7f8 fd28 	bl	14ee4 <cbor_encoder_create_map>
    g_err |= cbor_encode_text_stringz(&rsp, "msg");
   1c494:	492e      	ldr	r1, [pc, #184]	; (1c550 <log_nmgr_encode_entry+0x208>)
    g_err |= cbor_encoder_create_map(ed->enc, &rsp, CborIndefiniteLength);
   1c496:	4305      	orrs	r5, r0
    g_err |= cbor_encode_text_stringz(&rsp, "msg");
   1c498:	a804      	add	r0, sp, #16
   1c49a:	f7ff fcce 	bl	1be3a <cbor_encode_text_stringz>
   1c49e:	ea45 0400 	orr.w	r4, r5, r0
    if (too_long) {
   1c4a2:	b127      	cbz	r7, 1c4ae <log_nmgr_encode_entry+0x166>
        sprintf((char *)data, "error: entry too large (%d bytes)", rsp_len);
   1c4a4:	492f      	ldr	r1, [pc, #188]	; (1c564 <log_nmgr_encode_entry+0x21c>)
   1c4a6:	4632      	mov	r2, r6
   1c4a8:	a80c      	add	r0, sp, #48	; 0x30
   1c4aa:	f001 ffb9 	bl	1e420 <sprintf>
    g_err |= cbor_encode_text_stringz(&rsp, (char *)data);
   1c4ae:	a90c      	add	r1, sp, #48	; 0x30
   1c4b0:	a804      	add	r0, sp, #16
   1c4b2:	f7ff fcc2 	bl	1be3a <cbor_encode_text_stringz>
    g_err |= cbor_encode_text_stringz(&rsp, "ts");
   1c4b6:	4927      	ldr	r1, [pc, #156]	; (1c554 <log_nmgr_encode_entry+0x20c>)
    g_err |= cbor_encode_text_stringz(&rsp, (char *)data);
   1c4b8:	4304      	orrs	r4, r0
    g_err |= cbor_encode_text_stringz(&rsp, "ts");
   1c4ba:	a804      	add	r0, sp, #16
   1c4bc:	f7ff fcbd 	bl	1be3a <cbor_encode_text_stringz>
    g_err |= cbor_encode_int(&rsp, ueh->ue_ts);
   1c4c0:	f8d8 2000 	ldr.w	r2, [r8]
   1c4c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
    g_err |= cbor_encode_text_stringz(&rsp, "ts");
   1c4c8:	4304      	orrs	r4, r0
    g_err |= cbor_encode_int(&rsp, ueh->ue_ts);
   1c4ca:	a804      	add	r0, sp, #16
   1c4cc:	f7f8 fcc4 	bl	14e58 <cbor_encode_int>
    g_err |= cbor_encode_text_stringz(&rsp, "level");
   1c4d0:	4921      	ldr	r1, [pc, #132]	; (1c558 <log_nmgr_encode_entry+0x210>)
    g_err |= cbor_encode_int(&rsp, ueh->ue_ts);
   1c4d2:	4304      	orrs	r4, r0
    g_err |= cbor_encode_text_stringz(&rsp, "level");
   1c4d4:	a804      	add	r0, sp, #16
   1c4d6:	f7ff fcb0 	bl	1be3a <cbor_encode_text_stringz>
    g_err |= cbor_encode_uint(&rsp, ueh->ue_level);
   1c4da:	f898 200d 	ldrb.w	r2, [r8, #13]
    g_err |= cbor_encode_text_stringz(&rsp, "level");
   1c4de:	ea44 0600 	orr.w	r6, r4, r0
    g_err |= cbor_encode_uint(&rsp, ueh->ue_level);
   1c4e2:	2300      	movs	r3, #0
   1c4e4:	a804      	add	r0, sp, #16
   1c4e6:	f7f8 fcaf 	bl	14e48 <cbor_encode_uint>
    g_err |= cbor_encode_text_stringz(&rsp, "index");
   1c4ea:	491c      	ldr	r1, [pc, #112]	; (1c55c <log_nmgr_encode_entry+0x214>)
    g_err |= cbor_encode_uint(&rsp, ueh->ue_level);
   1c4ec:	4306      	orrs	r6, r0
    g_err |= cbor_encode_text_stringz(&rsp, "index");
   1c4ee:	a804      	add	r0, sp, #16
   1c4f0:	f7ff fca3 	bl	1be3a <cbor_encode_text_stringz>
    g_err |= cbor_encode_uint(&rsp,  ueh->ue_index);
   1c4f4:	f8d8 2008 	ldr.w	r2, [r8, #8]
   1c4f8:	2300      	movs	r3, #0
    g_err |= cbor_encode_text_stringz(&rsp, "index");
   1c4fa:	ea46 0500 	orr.w	r5, r6, r0
    g_err |= cbor_encode_uint(&rsp,  ueh->ue_index);
   1c4fe:	a804      	add	r0, sp, #16
   1c500:	f7f8 fca2 	bl	14e48 <cbor_encode_uint>
    g_err |= cbor_encode_text_stringz(&rsp, "module");
   1c504:	4916      	ldr	r1, [pc, #88]	; (1c560 <log_nmgr_encode_entry+0x218>)
    g_err |= cbor_encode_uint(&rsp,  ueh->ue_index);
   1c506:	4305      	orrs	r5, r0
    g_err |= cbor_encode_text_stringz(&rsp, "module");
   1c508:	a804      	add	r0, sp, #16
   1c50a:	f7ff fc96 	bl	1be3a <cbor_encode_text_stringz>
    g_err |= cbor_encode_uint(&rsp,  ueh->ue_module);
   1c50e:	2300      	movs	r3, #0
   1c510:	f898 200c 	ldrb.w	r2, [r8, #12]
    g_err |= cbor_encode_text_stringz(&rsp, "module");
   1c514:	ea45 0400 	orr.w	r4, r5, r0
    g_err |= cbor_encode_uint(&rsp,  ueh->ue_module);
   1c518:	a804      	add	r0, sp, #16
   1c51a:	f7f8 fc95 	bl	14e48 <cbor_encode_uint>
    g_err |= cbor_encoder_close_container(ed->enc, &rsp);
   1c51e:	a904      	add	r1, sp, #16
    g_err |= cbor_encode_uint(&rsp,  ueh->ue_module);
   1c520:	4304      	orrs	r4, r0
    g_err |= cbor_encoder_close_container(ed->enc, &rsp);
   1c522:	f8d9 0004 	ldr.w	r0, [r9, #4]
   1c526:	f7f8 fcee 	bl	14f06 <cbor_encoder_close_container>
    ed->counter++;
   1c52a:	f8d9 3000 	ldr.w	r3, [r9]
   1c52e:	3301      	adds	r3, #1
   1c530:	f8c9 3000 	str.w	r3, [r9]
        return MGMT_ERR_ENOMEM;
   1c534:	ea54 0300 	orrs.w	r3, r4, r0
   1c538:	bf0c      	ite	eq
   1c53a:	4638      	moveq	r0, r7
   1c53c:	2002      	movne	r0, #2
}
   1c53e:	b02d      	add	sp, #180	; 0xb4
   1c540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = OS_ENOENT;
   1c544:	200a      	movs	r0, #10
   1c546:	e7fa      	b.n	1c53e <log_nmgr_encode_entry+0x1f6>
            rc = OS_ENOMEM;
   1c548:	2001      	movs	r0, #1
   1c54a:	e7f8      	b.n	1c53e <log_nmgr_encode_entry+0x1f6>
   1c54c:	0001be31 	.word	0x0001be31
   1c550:	00022423 	.word	0x00022423
   1c554:	0002069c 	.word	0x0002069c
   1c558:	000223b7 	.word	0x000223b7
   1c55c:	00022410 	.word	0x00022410
   1c560:	000223b0 	.word	0x000223b0
   1c564:	00022427 	.word	0x00022427

0001c568 <log_nmgr_clear>:
 * @param nmgr json buffer
 * @return 0 on success; non-zero on failure
 */
static int
log_nmgr_clear(struct mgmt_cbuf *cb)
{
   1c568:	b538      	push	{r3, r4, r5, lr}
   1c56a:	4605      	mov	r5, r0
    struct log *log;
    int rc;

    log = NULL;
   1c56c:	2400      	movs	r4, #0
    while (1) {
        log = log_list_get_next(log);
   1c56e:	4620      	mov	r0, r4
   1c570:	f7ff faa8 	bl	1bac4 <log_list_get_next>
        if (log == NULL) {
   1c574:	4604      	mov	r4, r0
   1c576:	b140      	cbz	r0, 1c58a <log_nmgr_clear+0x22>
            break;
        }

        if (log->l_log->log_type == LOG_TYPE_STREAM) {
   1c578:	6843      	ldr	r3, [r0, #4]
   1c57a:	681b      	ldr	r3, [r3, #0]
   1c57c:	2b00      	cmp	r3, #0
   1c57e:	d0f6      	beq.n	1c56e <log_nmgr_clear+0x6>
            continue;
        }

        rc = log_flush(log);
   1c580:	f7ff fbc0 	bl	1bd04 <log_flush>
        if (rc) {
   1c584:	2800      	cmp	r0, #0
   1c586:	d0f2      	beq.n	1c56e <log_nmgr_clear+0x6>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1c588:	bd38      	pop	{r3, r4, r5, pc}
    rc = mgmt_cbuf_setoerr(cb, 0);
   1c58a:	4601      	mov	r1, r0
   1c58c:	4628      	mov	r0, r5
}
   1c58e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    rc = mgmt_cbuf_setoerr(cb, 0);
   1c592:	f7fe bacf 	b.w	1ab34 <mgmt_cbuf_setoerr>
	...

0001c598 <log_nmgr_register_group>:
int
log_nmgr_register_group(void)
{
    int rc;

    MGMT_GROUP_SET_HANDLERS(&log_nmgr_group, log_nmgr_group_handlers);
   1c598:	4803      	ldr	r0, [pc, #12]	; (1c5a8 <log_nmgr_register_group+0x10>)
   1c59a:	4b04      	ldr	r3, [pc, #16]	; (1c5ac <log_nmgr_register_group+0x14>)
   1c59c:	6003      	str	r3, [r0, #0]
   1c59e:	4b04      	ldr	r3, [pc, #16]	; (1c5b0 <log_nmgr_register_group+0x18>)
   1c5a0:	6043      	str	r3, [r0, #4]
    log_nmgr_group.mg_group_id = MGMT_GROUP_ID_LOGS;

    rc = mgmt_group_register(&log_nmgr_group);
   1c5a2:	f7fe ba95 	b.w	1aad0 <mgmt_group_register>
   1c5a6:	bf00      	nop
   1c5a8:	20007258 	.word	0x20007258
   1c5ac:	2000169c 	.word	0x2000169c
   1c5b0:	00040009 	.word	0x00040009

0001c5b4 <modlog_register>:
}

int
modlog_register(uint8_t module, struct log *log, uint8_t min_level,
                uint8_t *out_handle)
{
   1c5b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c5b8:	4606      	mov	r6, r0
   1c5ba:	460f      	mov	r7, r1
    int rc;

    rwlock_acquire_write(&modlog_rwl);
   1c5bc:	4826      	ldr	r0, [pc, #152]	; (1c658 <modlog_register+0xa4>)
{
   1c5be:	4690      	mov	r8, r2
   1c5c0:	461d      	mov	r5, r3
    rwlock_acquire_write(&modlog_rwl);
   1c5c2:	f000 fbca 	bl	1cd5a <rwlock_acquire_write>
    if (log == NULL) {
   1c5c6:	2f00      	cmp	r7, #0
   1c5c8:	d040      	beq.n	1c64c <modlog_register+0x98>
    mm = os_memblock_get(&modlog_mapping_pool);
   1c5ca:	4824      	ldr	r0, [pc, #144]	; (1c65c <modlog_register+0xa8>)
   1c5cc:	f7f0 fcdd 	bl	cf8a <os_memblock_get>
    if (mm != NULL) {
   1c5d0:	2800      	cmp	r0, #0
   1c5d2:	d03e      	beq.n	1c652 <modlog_register+0x9e>
    off = (uintptr_t)mm - (uintptr_t)modlog_mapping_buf;
   1c5d4:	4c22      	ldr	r4, [pc, #136]	; (1c660 <modlog_register+0xac>)
   1c5d6:	1b04      	subs	r4, r0, r4
        *mm = (struct modlog_mapping) { 0 };
   1c5d8:	2300      	movs	r3, #0
    assert(idx >= 0 && idx < MYNEWT_VAL(MODLOG_MAX_MAPPINGS));
   1c5da:	2cbf      	cmp	r4, #191	; 0xbf
        *mm = (struct modlog_mapping) { 0 };
   1c5dc:	e9c0 3300 	strd	r3, r3, [r0]
   1c5e0:	6083      	str	r3, [r0, #8]
    idx = off / elem_sz;
   1c5e2:	f04f 020c 	mov.w	r2, #12
   1c5e6:	fbb4 f3f2 	udiv	r3, r4, r2
    assert(idx >= 0 && idx < MYNEWT_VAL(MODLOG_MAX_MAPPINGS));
   1c5ea:	d905      	bls.n	1c5f8 <modlog_register+0x44>
   1c5ec:	2300      	movs	r3, #0
   1c5ee:	461a      	mov	r2, r3
   1c5f0:	4619      	mov	r1, r3
   1c5f2:	4618      	mov	r0, r3
   1c5f4:	f7f0 f902 	bl	c7fc <__assert_func>
   1c5f8:	fb02 4213 	mls	r2, r2, r3, r4
    assert(off % elem_sz == 0);
   1c5fc:	2a00      	cmp	r2, #0
   1c5fe:	d1f5      	bne.n	1c5ec <modlog_register+0x38>
    mm->desc = (struct modlog_desc) {
   1c600:	6047      	str	r7, [r0, #4]
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   1c602:	4f18      	ldr	r7, [pc, #96]	; (1c664 <modlog_register+0xb0>)
    mm->desc = (struct modlog_desc) {
   1c604:	7246      	strb	r6, [r0, #9]
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   1c606:	f8d7 c000 	ldr.w	ip, [r7]
    mm->desc = (struct modlog_desc) {
   1c60a:	f880 800a 	strb.w	r8, [r0, #10]
    return idx;
   1c60e:	b2db      	uxtb	r3, r3
    mm->desc = (struct modlog_desc) {
   1c610:	7203      	strb	r3, [r0, #8]
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   1c612:	4661      	mov	r1, ip
   1c614:	b111      	cbz	r1, 1c61c <modlog_register+0x68>
        if (cur->desc.module > module) {
   1c616:	7a4c      	ldrb	r4, [r1, #9]
   1c618:	42b4      	cmp	r4, r6
   1c61a:	d310      	bcc.n	1c63e <modlog_register+0x8a>
    if (prev == NULL) {
   1c61c:	b992      	cbnz	r2, 1c644 <modlog_register+0x90>
        SLIST_INSERT_HEAD(&modlog_mappings, mm, next);
   1c61e:	f8c0 c000 	str.w	ip, [r0]
   1c622:	6038      	str	r0, [r7, #0]
    if (mm->desc.module == MODLOG_MODULE_DFLT) {
   1c624:	2eff      	cmp	r6, #255	; 0xff
        modlog_first_dflt = mm;
   1c626:	bf04      	itt	eq
   1c628:	4a0f      	ldreq	r2, [pc, #60]	; (1c668 <modlog_register+0xb4>)
   1c62a:	6010      	streq	r0, [r2, #0]
    if (out_handle != NULL) {
   1c62c:	b10d      	cbz	r5, 1c632 <modlog_register+0x7e>
        *out_handle = mm->desc.handle;
   1c62e:	702b      	strb	r3, [r5, #0]
    return 0;
   1c630:	2500      	movs	r5, #0
    rc = modlog_register_no_lock(module, log, min_level, out_handle);
    rwlock_release_write(&modlog_rwl);
   1c632:	4809      	ldr	r0, [pc, #36]	; (1c658 <modlog_register+0xa4>)
   1c634:	f000 fbbf 	bl	1cdb6 <rwlock_release_write>

    return rc;
}
   1c638:	4628      	mov	r0, r5
   1c63a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   1c63e:	460a      	mov	r2, r1
   1c640:	6809      	ldr	r1, [r1, #0]
   1c642:	e7e7      	b.n	1c614 <modlog_register+0x60>
        SLIST_INSERT_AFTER(prev, mm, next);
   1c644:	6811      	ldr	r1, [r2, #0]
   1c646:	6001      	str	r1, [r0, #0]
   1c648:	6010      	str	r0, [r2, #0]
   1c64a:	e7eb      	b.n	1c624 <modlog_register+0x70>
        return SYS_EINVAL;
   1c64c:	f06f 0501 	mvn.w	r5, #1
   1c650:	e7ef      	b.n	1c632 <modlog_register+0x7e>
        return SYS_ENOMEM;
   1c652:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1c656:	e7ec      	b.n	1c632 <modlog_register+0x7e>
   1c658:	20007348 	.word	0x20007348
   1c65c:	20007328 	.word	0x20007328
   1c660:	20007268 	.word	0x20007268
   1c664:	20007344 	.word	0x20007344
   1c668:	20007264 	.word	0x20007264

0001c66c <modlog_append>:
}

int
modlog_append(uint8_t module, uint8_t level, uint8_t etype,
              void *data, uint16_t len)
{
   1c66c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1c670:	4606      	mov	r6, r0
    int rc;

    rwlock_acquire_read(&modlog_rwl);
   1c672:	4824      	ldr	r0, [pc, #144]	; (1c704 <modlog_append+0x98>)
{
   1c674:	f8bd a028 	ldrh.w	sl, [sp, #40]	; 0x28
   1c678:	460d      	mov	r5, r1
   1c67a:	4617      	mov	r7, r2
   1c67c:	4698      	mov	r8, r3
    rwlock_acquire_read(&modlog_rwl);
   1c67e:	f000 fb26 	bl	1ccce <rwlock_acquire_read>
    if (module == MODLOG_MODULE_DFLT) {
   1c682:	2eff      	cmp	r6, #255	; 0xff
   1c684:	d03b      	beq.n	1c6fe <modlog_append+0x92>
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   1c686:	4b20      	ldr	r3, [pc, #128]	; (1c708 <modlog_append+0x9c>)
   1c688:	681c      	ldr	r4, [r3, #0]
   1c68a:	b914      	cbnz	r4, 1c692 <modlog_append+0x26>
    for (mm = modlog_first_dflt;
   1c68c:	4b1f      	ldr	r3, [pc, #124]	; (1c70c <modlog_append+0xa0>)
   1c68e:	681c      	ldr	r4, [r3, #0]
   1c690:	e027      	b.n	1c6e2 <modlog_append+0x76>
        if (cur->desc.module == module) {
   1c692:	f894 9009 	ldrb.w	r9, [r4, #9]
   1c696:	454e      	cmp	r6, r9
   1c698:	d017      	beq.n	1c6ca <modlog_append+0x5e>
        if (cur->desc.module > module) {
   1c69a:	d3f7      	bcc.n	1c68c <modlog_append+0x20>
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   1c69c:	6824      	ldr	r4, [r4, #0]
   1c69e:	e7f4      	b.n	1c68a <modlog_append+0x1e>
        rc = log_append_body(mm->desc.log, module, level, etype, data, len);
   1c6a0:	e9cd 8a00 	strd	r8, sl, [sp]
   1c6a4:	463b      	mov	r3, r7
   1c6a6:	6860      	ldr	r0, [r4, #4]
   1c6a8:	462a      	mov	r2, r5
   1c6aa:	4649      	mov	r1, r9
   1c6ac:	f7ff fa26 	bl	1bafc <log_append_body>
        if (rc != 0) {
   1c6b0:	b170      	cbz	r0, 1c6d0 <modlog_append+0x64>
            return SYS_EIO;
   1c6b2:	f06f 0404 	mvn.w	r4, #4
    rc = modlog_append_no_lock(module, level, etype, data, len);
    rwlock_release_read(&modlog_rwl);
   1c6b6:	4813      	ldr	r0, [pc, #76]	; (1c704 <modlog_append+0x98>)
   1c6b8:	f000 fb3c 	bl	1cd34 <rwlock_release_read>

    return rc;
}
   1c6bc:	4620      	mov	r0, r4
   1c6be:	b002      	add	sp, #8
   1c6c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        while (mm != NULL && mm->desc.module == module) {
   1c6c4:	7a63      	ldrb	r3, [r4, #9]
   1c6c6:	454b      	cmp	r3, r9
   1c6c8:	d105      	bne.n	1c6d6 <modlog_append+0x6a>
    if (level >= mm->desc.min_level) {
   1c6ca:	7aa3      	ldrb	r3, [r4, #10]
   1c6cc:	42ab      	cmp	r3, r5
   1c6ce:	d9e7      	bls.n	1c6a0 <modlog_append+0x34>
            mm = SLIST_NEXT(mm, next);
   1c6d0:	6824      	ldr	r4, [r4, #0]
        while (mm != NULL && mm->desc.module == module) {
   1c6d2:	2c00      	cmp	r4, #0
   1c6d4:	d1f6      	bne.n	1c6c4 <modlog_append+0x58>
        return 0;
   1c6d6:	2400      	movs	r4, #0
   1c6d8:	e7ed      	b.n	1c6b6 <modlog_append+0x4a>
    if (level >= mm->desc.min_level) {
   1c6da:	7aa3      	ldrb	r3, [r4, #10]
   1c6dc:	42ab      	cmp	r3, r5
   1c6de:	d903      	bls.n	1c6e8 <modlog_append+0x7c>
         mm = SLIST_NEXT(mm, next)) {
   1c6e0:	6824      	ldr	r4, [r4, #0]
    for (mm = modlog_first_dflt;
   1c6e2:	2c00      	cmp	r4, #0
   1c6e4:	d1f9      	bne.n	1c6da <modlog_append+0x6e>
   1c6e6:	e7f6      	b.n	1c6d6 <modlog_append+0x6a>
        rc = log_append_body(mm->desc.log, module, level, etype, data, len);
   1c6e8:	e9cd 8a00 	strd	r8, sl, [sp]
   1c6ec:	463b      	mov	r3, r7
   1c6ee:	6860      	ldr	r0, [r4, #4]
   1c6f0:	462a      	mov	r2, r5
   1c6f2:	4631      	mov	r1, r6
   1c6f4:	f7ff fa02 	bl	1bafc <log_append_body>
        if (rc != 0) {
   1c6f8:	2800      	cmp	r0, #0
   1c6fa:	d0f1      	beq.n	1c6e0 <modlog_append+0x74>
   1c6fc:	e7d9      	b.n	1c6b2 <modlog_append+0x46>
        return SYS_EINVAL;
   1c6fe:	f06f 0401 	mvn.w	r4, #1
   1c702:	e7d8      	b.n	1c6b6 <modlog_append+0x4a>
   1c704:	20007348 	.word	0x20007348
   1c708:	20007344 	.word	0x20007344
   1c70c:	20007264 	.word	0x20007264

0001c710 <modlog_printf>:
    return rc;
}

void
modlog_printf(uint8_t module, uint8_t level, const char *msg, ...)
{
   1c710:	b40c      	push	{r2, r3}
   1c712:	b530      	push	{r4, r5, lr}
   1c714:	b0a5      	sub	sp, #148	; 0x94
   1c716:	ab28      	add	r3, sp, #160	; 0xa0
   1c718:	4604      	mov	r4, r0
   1c71a:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    char buf[MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN)];
    int len;

    va_start(args, msg);
   1c71e:	9303      	str	r3, [sp, #12]
{
   1c720:	460d      	mov	r5, r1
    len = vsnprintf(buf, MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN), msg, args);
   1c722:	a804      	add	r0, sp, #16
   1c724:	2180      	movs	r1, #128	; 0x80
   1c726:	f7f4 f89b 	bl	10860 <vsnprintf>

    if (len >= MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN)) {
        len = MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN) - 1;
    }

    modlog_append(module, level, LOG_ETYPE_STRING, buf, len);
   1c72a:	287f      	cmp	r0, #127	; 0x7f
   1c72c:	4603      	mov	r3, r0
   1c72e:	bfa8      	it	ge
   1c730:	237f      	movge	r3, #127	; 0x7f
   1c732:	b29b      	uxth	r3, r3
   1c734:	9300      	str	r3, [sp, #0]
   1c736:	2200      	movs	r2, #0
   1c738:	ab04      	add	r3, sp, #16
   1c73a:	4629      	mov	r1, r5
   1c73c:	4620      	mov	r0, r4
   1c73e:	f7ff ff95 	bl	1c66c <modlog_append>
}
   1c742:	b025      	add	sp, #148	; 0x94
   1c744:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1c748:	b002      	add	sp, #8
   1c74a:	4770      	bx	lr

0001c74c <modlog_init>:

void
modlog_init(void)
{
   1c74c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int rc;

    SYSINIT_ASSERT_ACTIVE();
   1c74e:	4b1e      	ldr	r3, [pc, #120]	; (1c7c8 <modlog_init+0x7c>)
   1c750:	781b      	ldrb	r3, [r3, #0]
   1c752:	b923      	cbnz	r3, 1c75e <modlog_init+0x12>
   1c754:	461a      	mov	r2, r3
   1c756:	4619      	mov	r1, r3
   1c758:	4618      	mov	r0, r3
   1c75a:	f7f0 f84f 	bl	c7fc <__assert_func>

    rc = os_mempool_init(&modlog_mapping_pool, MYNEWT_VAL(MODLOG_MAX_MAPPINGS),
   1c75e:	4b1b      	ldr	r3, [pc, #108]	; (1c7cc <modlog_init+0x80>)
   1c760:	9300      	str	r3, [sp, #0]
   1c762:	481b      	ldr	r0, [pc, #108]	; (1c7d0 <modlog_init+0x84>)
   1c764:	4b1b      	ldr	r3, [pc, #108]	; (1c7d4 <modlog_init+0x88>)
   1c766:	220c      	movs	r2, #12
   1c768:	2110      	movs	r1, #16
   1c76a:	f7f0 fc05 	bl	cf78 <os_mempool_init>
                         sizeof (struct modlog_mapping), modlog_mapping_buf,
                         "modlog_mapping_pool");
    SYSINIT_PANIC_ASSERT(rc == 0);
   1c76e:	b138      	cbz	r0, 1c780 <modlog_init+0x34>
   1c770:	2300      	movs	r3, #0
   1c772:	4a19      	ldr	r2, [pc, #100]	; (1c7d8 <modlog_init+0x8c>)
   1c774:	9300      	str	r3, [sp, #0]
   1c776:	6814      	ldr	r4, [r2, #0]
   1c778:	4619      	mov	r1, r3
   1c77a:	461a      	mov	r2, r3
   1c77c:	4618      	mov	r0, r3
   1c77e:	47a0      	blx	r4

    SLIST_INIT(&modlog_mappings);
   1c780:	4b16      	ldr	r3, [pc, #88]	; (1c7dc <modlog_init+0x90>)
    modlog_first_dflt = NULL;

    rc = rwlock_init(&modlog_rwl);
   1c782:	4817      	ldr	r0, [pc, #92]	; (1c7e0 <modlog_init+0x94>)
    SLIST_INIT(&modlog_mappings);
   1c784:	2400      	movs	r4, #0
   1c786:	601c      	str	r4, [r3, #0]
    modlog_first_dflt = NULL;
   1c788:	4b16      	ldr	r3, [pc, #88]	; (1c7e4 <modlog_init+0x98>)
   1c78a:	601c      	str	r4, [r3, #0]
    rc = rwlock_init(&modlog_rwl);
   1c78c:	f000 fb23 	bl	1cdd6 <rwlock_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1c790:	b138      	cbz	r0, 1c7a2 <modlog_init+0x56>
   1c792:	4b11      	ldr	r3, [pc, #68]	; (1c7d8 <modlog_init+0x8c>)
   1c794:	9400      	str	r4, [sp, #0]
   1c796:	681d      	ldr	r5, [r3, #0]
   1c798:	4622      	mov	r2, r4
   1c79a:	4623      	mov	r3, r4
   1c79c:	4621      	mov	r1, r4
   1c79e:	4620      	mov	r0, r4
   1c7a0:	47a8      	blx	r5

    /* Register the default console mapping if configured. */
#if MYNEWT_VAL(MODLOG_CONSOLE_DFLT)
    rc = modlog_register(MODLOG_MODULE_DFLT, log_console_get(),
   1c7a2:	f7ff faf7 	bl	1bd94 <log_console_get>
   1c7a6:	2300      	movs	r3, #0
   1c7a8:	4601      	mov	r1, r0
   1c7aa:	461a      	mov	r2, r3
   1c7ac:	20ff      	movs	r0, #255	; 0xff
   1c7ae:	f7ff ff01 	bl	1c5b4 <modlog_register>
                         LOG_LEVEL_DEBUG, NULL);
    SYSINIT_PANIC_ASSERT(rc == 0);
   1c7b2:	b138      	cbz	r0, 1c7c4 <modlog_init+0x78>
   1c7b4:	2300      	movs	r3, #0
   1c7b6:	4a08      	ldr	r2, [pc, #32]	; (1c7d8 <modlog_init+0x8c>)
   1c7b8:	9300      	str	r3, [sp, #0]
   1c7ba:	6814      	ldr	r4, [r2, #0]
   1c7bc:	4619      	mov	r1, r3
   1c7be:	461a      	mov	r2, r3
   1c7c0:	4618      	mov	r0, r3
   1c7c2:	47a0      	blx	r4
#endif
}
   1c7c4:	b003      	add	sp, #12
   1c7c6:	bd30      	pop	{r4, r5, pc}
   1c7c8:	20006af4 	.word	0x20006af4
   1c7cc:	00022449 	.word	0x00022449
   1c7d0:	20007328 	.word	0x20007328
   1c7d4:	20007268 	.word	0x20007268
   1c7d8:	2000143c 	.word	0x2000143c
   1c7dc:	20007344 	.word	0x20007344
   1c7e0:	20007348 	.word	0x20007348
   1c7e4:	20007264 	.word	0x20007264

0001c7e8 <mfg_read_next_mmr>:
 * Reads an MMR from the end of the specified flash area.  On success, the
 * global MMR list is populated with the result for subsequent reading.
 */
static int
mfg_read_next_mmr(uint8_t area_id)
{
   1c7e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    int rc;
    int i;

    /* Detect if this MMR has already been read. */
    for (i = 0; i < mfg_num_mmrs; i++) {
   1c7ea:	4e25      	ldr	r6, [pc, #148]	; (1c880 <mfg_read_next_mmr+0x98>)
        if (mfg_mmrs[i].area_id == area_id) {
   1c7ec:	4a25      	ldr	r2, [pc, #148]	; (1c884 <mfg_read_next_mmr+0x9c>)
    for (i = 0; i < mfg_num_mmrs; i++) {
   1c7ee:	6834      	ldr	r4, [r6, #0]
{
   1c7f0:	b085      	sub	sp, #20
   1c7f2:	4605      	mov	r5, r0
    for (i = 0; i < mfg_num_mmrs; i++) {
   1c7f4:	2300      	movs	r3, #0
        if (mfg_mmrs[i].area_id == area_id) {
   1c7f6:	210c      	movs	r1, #12
    for (i = 0; i < mfg_num_mmrs; i++) {
   1c7f8:	429c      	cmp	r4, r3
   1c7fa:	dc0a      	bgt.n	1c812 <mfg_read_next_mmr+0x2a>
            return SYS_EALREADY;
        }
    }

    if (mfg_num_mmrs >= MYNEWT_VAL(MFG_MAX_MMRS)) {
   1c7fc:	2c02      	cmp	r4, #2
   1c7fe:	d03c      	beq.n	1c87a <mfg_read_next_mmr+0x92>
    rc = flash_area_open(area_id, &fap);
   1c800:	a901      	add	r1, sp, #4
   1c802:	4628      	mov	r0, r5
   1c804:	f7fe ffac 	bl	1b760 <flash_area_open>
    if (rc != 0) {
   1c808:	b150      	cbz	r0, 1c820 <mfg_read_next_mmr+0x38>
        return SYS_EIO;
   1c80a:	f06f 0004 	mvn.w	r0, #4
        return rc;
    }

    mfg_num_mmrs++;
    return 0;
}
   1c80e:	b005      	add	sp, #20
   1c810:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (mfg_mmrs[i].area_id == area_id) {
   1c812:	fb01 f003 	mul.w	r0, r1, r3
   1c816:	5c80      	ldrb	r0, [r0, r2]
   1c818:	42a8      	cmp	r0, r5
   1c81a:	d02b      	beq.n	1c874 <mfg_read_next_mmr+0x8c>
    for (i = 0; i < mfg_num_mmrs; i++) {
   1c81c:	3301      	adds	r3, #1
   1c81e:	e7eb      	b.n	1c7f8 <mfg_read_next_mmr+0x10>
    rc = flash_area_read(fap, fap->fa_size - sizeof ftr, &ftr, sizeof ftr);
   1c820:	9801      	ldr	r0, [sp, #4]
   1c822:	6881      	ldr	r1, [r0, #8]
   1c824:	2308      	movs	r3, #8
   1c826:	eb0d 0203 	add.w	r2, sp, r3
   1c82a:	3908      	subs	r1, #8
   1c82c:	f7fe fff0 	bl	1b810 <flash_area_read>
    if (rc != 0) {
   1c830:	2800      	cmp	r0, #0
   1c832:	d1ea      	bne.n	1c80a <mfg_read_next_mmr+0x22>
    if (ftr.magic != MFG_META_MAGIC) {
   1c834:	4b14      	ldr	r3, [pc, #80]	; (1c888 <mfg_read_next_mmr+0xa0>)
   1c836:	9a03      	ldr	r2, [sp, #12]
   1c838:	429a      	cmp	r2, r3
   1c83a:	d115      	bne.n	1c868 <mfg_read_next_mmr+0x80>
    if (ftr.version != MFG_META_VERSION) {
   1c83c:	f89d 300a 	ldrb.w	r3, [sp, #10]
   1c840:	2b02      	cmp	r3, #2
   1c842:	d114      	bne.n	1c86e <mfg_read_next_mmr+0x86>
    if (ftr.size > fap->fa_size) {
   1c844:	9b01      	ldr	r3, [sp, #4]
   1c846:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   1c84a:	689b      	ldr	r3, [r3, #8]
   1c84c:	429a      	cmp	r2, r3
   1c84e:	d80b      	bhi.n	1c868 <mfg_read_next_mmr+0x80>
    *out_mmr = (struct mfg_mmr) {
   1c850:	4f0c      	ldr	r7, [pc, #48]	; (1c884 <mfg_read_next_mmr+0x9c>)
   1c852:	210c      	movs	r1, #12
   1c854:	434c      	muls	r4, r1
        .offset = fap->fa_size - ftr.size,
   1c856:	1a9b      	subs	r3, r3, r2
    *out_mmr = (struct mfg_mmr) {
   1c858:	1939      	adds	r1, r7, r4
   1c85a:	e9c1 3201 	strd	r3, r2, [r1, #4]
    mfg_num_mmrs++;
   1c85e:	6833      	ldr	r3, [r6, #0]
    *out_mmr = (struct mfg_mmr) {
   1c860:	553d      	strb	r5, [r7, r4]
    mfg_num_mmrs++;
   1c862:	3301      	adds	r3, #1
   1c864:	6033      	str	r3, [r6, #0]
    return 0;
   1c866:	e7d2      	b.n	1c80e <mfg_read_next_mmr+0x26>
        return SYS_ENODEV;
   1c868:	f06f 0008 	mvn.w	r0, #8
   1c86c:	e7cf      	b.n	1c80e <mfg_read_next_mmr+0x26>
        return SYS_ENOTSUP;
   1c86e:	f06f 000b 	mvn.w	r0, #11
   1c872:	e7cc      	b.n	1c80e <mfg_read_next_mmr+0x26>
            return SYS_EALREADY;
   1c874:	f06f 000a 	mvn.w	r0, #10
   1c878:	e7c9      	b.n	1c80e <mfg_read_next_mmr+0x26>
        return SYS_ENOMEM;
   1c87a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c87e:	e7c6      	b.n	1c80e <mfg_read_next_mmr+0x26>
   1c880:	20007388 	.word	0x20007388
   1c884:	20007370 	.word	0x20007370
   1c888:	3bb2a269 	.word	0x3bb2a269

0001c88c <mfg_read_tlv_body>:
{
   1c88c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1c88e:	4616      	mov	r6, r2
    assert(reader->mmr_idx < mfg_num_mmrs);
   1c890:	4a14      	ldr	r2, [pc, #80]	; (1c8e4 <mfg_read_tlv_body+0x58>)
   1c892:	7883      	ldrb	r3, [r0, #2]
   1c894:	6812      	ldr	r2, [r2, #0]
   1c896:	4293      	cmp	r3, r2
{
   1c898:	4604      	mov	r4, r0
   1c89a:	460d      	mov	r5, r1
    assert(reader->mmr_idx < mfg_num_mmrs);
   1c89c:	db05      	blt.n	1c8aa <mfg_read_tlv_body+0x1e>
   1c89e:	2300      	movs	r3, #0
   1c8a0:	461a      	mov	r2, r3
   1c8a2:	4619      	mov	r1, r3
   1c8a4:	4618      	mov	r0, r3
   1c8a6:	f7ef ffa9 	bl	c7fc <__assert_func>
    rc = flash_area_open(mmr->area_id, fap);
   1c8aa:	220c      	movs	r2, #12
   1c8ac:	4353      	muls	r3, r2
   1c8ae:	4a0e      	ldr	r2, [pc, #56]	; (1c8e8 <mfg_read_tlv_body+0x5c>)
   1c8b0:	a901      	add	r1, sp, #4
   1c8b2:	5cd0      	ldrb	r0, [r2, r3]
   1c8b4:	f7fe ff54 	bl	1b760 <flash_area_open>
    if (rc != 0) {
   1c8b8:	4601      	mov	r1, r0
   1c8ba:	b970      	cbnz	r0, 1c8da <mfg_read_tlv_body+0x4e>
    memset(dst, 0, max_size);
   1c8bc:	4632      	mov	r2, r6
   1c8be:	4628      	mov	r0, r5
   1c8c0:	f7f3 fce3 	bl	1028a <memset>
    read_sz = min(max_size, reader->cur_tlv.size);
   1c8c4:	7863      	ldrb	r3, [r4, #1]
    rc = flash_area_read(fap, reader->offset + MFG_META_TLV_SZ, dst, read_sz);
   1c8c6:	6861      	ldr	r1, [r4, #4]
   1c8c8:	9801      	ldr	r0, [sp, #4]
   1c8ca:	42b3      	cmp	r3, r6
   1c8cc:	bfa8      	it	ge
   1c8ce:	4633      	movge	r3, r6
   1c8d0:	462a      	mov	r2, r5
   1c8d2:	3102      	adds	r1, #2
   1c8d4:	f7fe ff9c 	bl	1b810 <flash_area_read>
    if (rc != 0) {
   1c8d8:	b108      	cbz	r0, 1c8de <mfg_read_tlv_body+0x52>
        return SYS_EIO;
   1c8da:	f06f 0004 	mvn.w	r0, #4
}
   1c8de:	b002      	add	sp, #8
   1c8e0:	bd70      	pop	{r4, r5, r6, pc}
   1c8e2:	bf00      	nop
   1c8e4:	20007388 	.word	0x20007388
   1c8e8:	20007370 	.word	0x20007370

0001c8ec <mfg_seek_next>:
{
   1c8ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if (reader->mmr_idx >= mfg_num_mmrs) {
   1c8ee:	4d1a      	ldr	r5, [pc, #104]	; (1c958 <mfg_seek_next+0x6c>)
    rc = flash_area_open(mmr->area_id, &fap);
   1c8f0:	4e1a      	ldr	r6, [pc, #104]	; (1c95c <mfg_seek_next+0x70>)
{
   1c8f2:	4604      	mov	r4, r0
    if (reader->mmr_idx >= mfg_num_mmrs) {
   1c8f4:	78a3      	ldrb	r3, [r4, #2]
   1c8f6:	682a      	ldr	r2, [r5, #0]
   1c8f8:	4293      	cmp	r3, r2
   1c8fa:	db03      	blt.n	1c904 <mfg_seek_next+0x18>
        return SYS_EINVAL;
   1c8fc:	f06f 0001 	mvn.w	r0, #1
}
   1c900:	b003      	add	sp, #12
   1c902:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rc = flash_area_open(mmr->area_id, &fap);
   1c904:	220c      	movs	r2, #12
   1c906:	4353      	muls	r3, r2
   1c908:	a901      	add	r1, sp, #4
   1c90a:	5cf0      	ldrb	r0, [r6, r3]
   1c90c:	18f7      	adds	r7, r6, r3
   1c90e:	f7fe ff27 	bl	1b760 <flash_area_open>
    if (rc != 0) {
   1c912:	b9f0      	cbnz	r0, 1c952 <mfg_seek_next+0x66>
    if (reader->offset == 0) {
   1c914:	6863      	ldr	r3, [r4, #4]
   1c916:	b973      	cbnz	r3, 1c936 <mfg_seek_next+0x4a>
        reader->offset = mmr->offset;
   1c918:	6879      	ldr	r1, [r7, #4]
    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
   1c91a:	9801      	ldr	r0, [sp, #4]
   1c91c:	6061      	str	r1, [r4, #4]
   1c91e:	6883      	ldr	r3, [r0, #8]
   1c920:	3b08      	subs	r3, #8
   1c922:	428b      	cmp	r3, r1
   1c924:	d80f      	bhi.n	1c946 <mfg_seek_next+0x5a>
        if (reader->mmr_idx + 1 >= mfg_num_mmrs) {
   1c926:	78a3      	ldrb	r3, [r4, #2]
   1c928:	682a      	ldr	r2, [r5, #0]
   1c92a:	3301      	adds	r3, #1
   1c92c:	4293      	cmp	r3, r2
   1c92e:	db06      	blt.n	1c93e <mfg_seek_next+0x52>
            rc = SYS_EDONE;
   1c930:	f06f 000e 	mvn.w	r0, #14
   1c934:	e7e4      	b.n	1c900 <mfg_seek_next+0x14>
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
   1c936:	7861      	ldrb	r1, [r4, #1]
   1c938:	3302      	adds	r3, #2
   1c93a:	4419      	add	r1, r3
   1c93c:	e7ed      	b.n	1c91a <mfg_seek_next+0x2e>
            reader->offset = 0;
   1c93e:	2200      	movs	r2, #0
   1c940:	6062      	str	r2, [r4, #4]
            reader->mmr_idx++;
   1c942:	70a3      	strb	r3, [r4, #2]
    } while (rc == SYS_EAGAIN);
   1c944:	e7d6      	b.n	1c8f4 <mfg_seek_next+0x8>
    rc = flash_area_read(fap, reader->offset, &reader->cur_tlv,
   1c946:	2302      	movs	r3, #2
   1c948:	4622      	mov	r2, r4
   1c94a:	f7fe ff61 	bl	1b810 <flash_area_read>
    if (rc != 0) {
   1c94e:	2800      	cmp	r0, #0
   1c950:	d0d6      	beq.n	1c900 <mfg_seek_next+0x14>
        rc = SYS_EIO;
   1c952:	f06f 0004 	mvn.w	r0, #4
   1c956:	e7d3      	b.n	1c900 <mfg_seek_next+0x14>
   1c958:	20007388 	.word	0x20007388
   1c95c:	20007370 	.word	0x20007370

0001c960 <mfg_seek_next_with_type>:
{
   1c960:	b538      	push	{r3, r4, r5, lr}
   1c962:	4604      	mov	r4, r0
   1c964:	460d      	mov	r5, r1
        rc = mfg_seek_next(reader);
   1c966:	4620      	mov	r0, r4
   1c968:	f7ff ffc0 	bl	1c8ec <mfg_seek_next>
        if (rc != 0) {
   1c96c:	b910      	cbnz	r0, 1c974 <mfg_seek_next_with_type+0x14>
        if (reader->cur_tlv.type == type) {
   1c96e:	7823      	ldrb	r3, [r4, #0]
   1c970:	42ab      	cmp	r3, r5
   1c972:	d1f8      	bne.n	1c966 <mfg_seek_next_with_type+0x6>
}
   1c974:	bd38      	pop	{r3, r4, r5, pc}

0001c976 <mfg_read_tlv_flash_area>:
    return mfg_read_tlv_body(reader, out_mfa, sizeof *out_mfa);
   1c976:	220a      	movs	r2, #10
   1c978:	f7ff bf88 	b.w	1c88c <mfg_read_tlv_body>

0001c97c <mfg_read_tlv_mmr_ref>:
    return mfg_read_tlv_body(reader, out_mr, sizeof *out_mr);
   1c97c:	2201      	movs	r2, #1
   1c97e:	f7ff bf85 	b.w	1c88c <mfg_read_tlv_body>
	...

0001c984 <mfg_init>:
 * called before any TLVs can be read.  No-op if this function has already
 * executed successfully.
 */
void
mfg_init(void)
{
   1c984:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int rc;

    if (mfg_initialized) {
   1c986:	4b1a      	ldr	r3, [pc, #104]	; (1c9f0 <mfg_init+0x6c>)
   1c988:	7818      	ldrb	r0, [r3, #0]
   1c98a:	bb70      	cbnz	r0, 1c9ea <mfg_init+0x66>
        return;
    }
    mfg_initialized = true;
   1c98c:	2201      	movs	r2, #1
   1c98e:	701a      	strb	r2, [r3, #0]

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1c990:	4b18      	ldr	r3, [pc, #96]	; (1c9f4 <mfg_init+0x70>)
   1c992:	781b      	ldrb	r3, [r3, #0]
   1c994:	b923      	cbnz	r3, 1c9a0 <mfg_init+0x1c>
   1c996:	461a      	mov	r2, r3
   1c998:	4619      	mov	r1, r3
   1c99a:	4618      	mov	r0, r3
   1c99c:	f7ef ff2e 	bl	c7fc <__assert_func>

    /* Read the first MMR from the boot loader area. */
    rc = mfg_read_next_mmr(FLASH_AREA_BOOTLOADER);
   1c9a0:	f7ff ff22 	bl	1c7e8 <mfg_read_next_mmr>
    if (rc != 0) {
   1c9a4:	b9c0      	cbnz	r0, 1c9d8 <mfg_init+0x54>
    mfg_open(&reader);
   1c9a6:	a802      	add	r0, sp, #8
   1c9a8:	f000 f828 	bl	1c9fc <mfg_open>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_MMR_REF);
   1c9ac:	2104      	movs	r1, #4
   1c9ae:	a802      	add	r0, sp, #8
   1c9b0:	f7ff ffd6 	bl	1c960 <mfg_seek_next_with_type>
        switch (rc) {
   1c9b4:	f110 0f0f 	cmn.w	r0, #15
   1c9b8:	d017      	beq.n	1c9ea <mfg_init+0x66>
   1c9ba:	b968      	cbnz	r0, 1c9d8 <mfg_init+0x54>
        rc = mfg_read_tlv_mmr_ref(&reader, &mmr_ref);
   1c9bc:	a901      	add	r1, sp, #4
   1c9be:	a802      	add	r0, sp, #8
   1c9c0:	f7ff ffdc 	bl	1c97c <mfg_read_tlv_mmr_ref>
        if (rc != 0) {
   1c9c4:	b940      	cbnz	r0, 1c9d8 <mfg_init+0x54>
        rc = mfg_read_next_mmr(mmr_ref.area_id);
   1c9c6:	f89d 0004 	ldrb.w	r0, [sp, #4]
   1c9ca:	f7ff ff0d 	bl	1c7e8 <mfg_read_next_mmr>
        if (rc != 0 && rc != SYS_EALREADY) {
   1c9ce:	2800      	cmp	r0, #0
   1c9d0:	d0ec      	beq.n	1c9ac <mfg_init+0x28>
   1c9d2:	f110 0f0b 	cmn.w	r0, #11
   1c9d6:	d0e9      	beq.n	1c9ac <mfg_init+0x28>
    }

    return;

err:
    MFG_LOG(ERROR, "failed to read MMRs: rc=%d", rc);
   1c9d8:	4a07      	ldr	r2, [pc, #28]	; (1c9f8 <mfg_init+0x74>)
   1c9da:	4603      	mov	r3, r0
   1c9dc:	2103      	movs	r1, #3
   1c9de:	2080      	movs	r0, #128	; 0x80
}
   1c9e0:	b005      	add	sp, #20
   1c9e2:	f85d eb04 	ldr.w	lr, [sp], #4
    MFG_LOG(ERROR, "failed to read MMRs: rc=%d", rc);
   1c9e6:	f7ff be93 	b.w	1c710 <modlog_printf>
}
   1c9ea:	b005      	add	sp, #20
   1c9ec:	f85d fb04 	ldr.w	pc, [sp], #4
   1c9f0:	2000736c 	.word	0x2000736c
   1c9f4:	20006af4 	.word	0x20006af4
   1c9f8:	0002245d 	.word	0x0002245d

0001c9fc <mfg_open>:
{
   1c9fc:	b510      	push	{r4, lr}
   1c9fe:	4604      	mov	r4, r0
    mfg_init();
   1ca00:	f7ff ffc0 	bl	1c984 <mfg_init>
    *out_reader = (struct mfg_reader) { 0 };
   1ca04:	2300      	movs	r3, #0
   1ca06:	e9c4 3300 	strd	r3, r3, [r4]
}
   1ca0a:	bd10      	pop	{r4, pc}

0001ca0c <log_reboot_write>:
 * @param reason for reboot
 * @return 0 on success; non-zero on failure
 */
static int
log_reboot_write(const struct log_reboot_info *info)
{
   1ca0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ca10:	4605      	mov	r5, r0
            return 0;
        }
    }
#endif

    rc = imgr_read_info(boot_current_slot, &ver, hash, NULL);
   1ca12:	483c      	ldr	r0, [pc, #240]	; (1cb04 <log_reboot_write+0xf8>)
{
   1ca14:	b0d1      	sub	sp, #324	; 0x144
    rc = imgr_read_info(boot_current_slot, &ver, hash, NULL);
   1ca16:	6800      	ldr	r0, [r0, #0]
   1ca18:	2300      	movs	r3, #0
   1ca1a:	aa08      	add	r2, sp, #32
   1ca1c:	a906      	add	r1, sp, #24
   1ca1e:	f7fd fb7b 	bl	1a118 <imgr_read_info>
    if (rc != 0) {
   1ca22:	4607      	mov	r7, r0
   1ca24:	2800      	cmp	r0, #0
   1ca26:	d15d      	bne.n	1cae4 <log_reboot_write+0xd8>
    }

    off = 0;
    off += snprintf(buf + off, sizeof buf - off,
                    "rsn:%s, cnt:%u, img:%u.%u.%u.%u, hash:",
                    REBOOT_REASON_STR(info->reason), reboot_cnt, ver.iv_major,
   1ca28:	782a      	ldrb	r2, [r5, #0]
    off += snprintf(buf + off, sizeof buf - off,
   1ca2a:	2a01      	cmp	r2, #1
   1ca2c:	d05e      	beq.n	1caec <log_reboot_write+0xe0>
                    REBOOT_REASON_STR(info->reason), reboot_cnt, ver.iv_major,
   1ca2e:	2a02      	cmp	r2, #2
   1ca30:	d05e      	beq.n	1caf0 <log_reboot_write+0xe4>
   1ca32:	2a03      	cmp	r2, #3
   1ca34:	d05e      	beq.n	1caf4 <log_reboot_write+0xe8>
   1ca36:	2a04      	cmp	r2, #4
   1ca38:	d05e      	beq.n	1caf8 <log_reboot_write+0xec>
   1ca3a:	2a05      	cmp	r2, #5
   1ca3c:	d05e      	beq.n	1cafc <log_reboot_write+0xf0>
   1ca3e:	2a06      	cmp	r2, #6
   1ca40:	d05e      	beq.n	1cb00 <log_reboot_write+0xf4>
   1ca42:	4b31      	ldr	r3, [pc, #196]	; (1cb08 <log_reboot_write+0xfc>)
   1ca44:	4931      	ldr	r1, [pc, #196]	; (1cb0c <log_reboot_write+0x100>)
   1ca46:	2a07      	cmp	r2, #7
   1ca48:	bf18      	it	ne
   1ca4a:	460b      	movne	r3, r1
    off += snprintf(buf + off, sizeof buf - off,
   1ca4c:	9a07      	ldr	r2, [sp, #28]
   1ca4e:	9204      	str	r2, [sp, #16]
   1ca50:	f8bd 201a 	ldrh.w	r2, [sp, #26]
   1ca54:	9203      	str	r2, [sp, #12]
   1ca56:	f89d 2019 	ldrb.w	r2, [sp, #25]
   1ca5a:	9202      	str	r2, [sp, #8]
   1ca5c:	f89d 2018 	ldrb.w	r2, [sp, #24]
   1ca60:	9201      	str	r2, [sp, #4]
   1ca62:	4a2b      	ldr	r2, [pc, #172]	; (1cb10 <log_reboot_write+0x104>)
                    ver.iv_minor, ver.iv_revision,
                    (unsigned int)ver.iv_build_num);

    for (i = 0; i < sizeof hash; i++) {
        off += snprintf(buf + off, sizeof buf - off, "%02x",
   1ca64:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 1cb38 <log_reboot_write+0x12c>
    off += snprintf(buf + off, sizeof buf - off,
   1ca68:	8812      	ldrh	r2, [r2, #0]
   1ca6a:	9200      	str	r2, [sp, #0]
   1ca6c:	f44f 7180 	mov.w	r1, #256	; 0x100
   1ca70:	4a28      	ldr	r2, [pc, #160]	; (1cb14 <log_reboot_write+0x108>)
   1ca72:	a810      	add	r0, sp, #64	; 0x40
   1ca74:	f7f3 ff12 	bl	1089c <snprintf>
   1ca78:	ae08      	add	r6, sp, #32
   1ca7a:	4604      	mov	r4, r0
    for (i = 0; i < sizeof hash; i++) {
   1ca7c:	f04f 0800 	mov.w	r8, #0
        off += snprintf(buf + off, sizeof buf - off, "%02x",
   1ca80:	a810      	add	r0, sp, #64	; 0x40
   1ca82:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   1ca86:	4420      	add	r0, r4
   1ca88:	f816 3b01 	ldrb.w	r3, [r6], #1
   1ca8c:	464a      	mov	r2, r9
   1ca8e:	f7f3 ff05 	bl	1089c <snprintf>
    for (i = 0; i < sizeof hash; i++) {
   1ca92:	f108 0801 	add.w	r8, r8, #1
   1ca96:	f1b8 0f20 	cmp.w	r8, #32
        off += snprintf(buf + off, sizeof buf - off, "%02x",
   1ca9a:	4404      	add	r4, r0
    for (i = 0; i < sizeof hash; i++) {
   1ca9c:	d1f0      	bne.n	1ca80 <log_reboot_write+0x74>
                        (unsigned int)hash[i]);
    }

    if (info->file != NULL) {
   1ca9e:	686b      	ldr	r3, [r5, #4]
   1caa0:	b14b      	cbz	r3, 1cab6 <log_reboot_write+0xaa>
        off += snprintf(buf + off, sizeof buf - off, ", die:%s:%d",
   1caa2:	68aa      	ldr	r2, [r5, #8]
   1caa4:	9200      	str	r2, [sp, #0]
   1caa6:	a810      	add	r0, sp, #64	; 0x40
   1caa8:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   1caac:	4420      	add	r0, r4
   1caae:	4a1a      	ldr	r2, [pc, #104]	; (1cb18 <log_reboot_write+0x10c>)
   1cab0:	f7f3 fef4 	bl	1089c <snprintf>
   1cab4:	4404      	add	r4, r0
                info->file, info->line);
    }

    if (info->pc != 0) {
   1cab6:	68eb      	ldr	r3, [r5, #12]
   1cab8:	b13b      	cbz	r3, 1caca <log_reboot_write+0xbe>
        off += snprintf(buf + off, sizeof buf - off, ", pc:0x%lx",
   1caba:	a810      	add	r0, sp, #64	; 0x40
   1cabc:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   1cac0:	4420      	add	r0, r4
   1cac2:	4a16      	ldr	r2, [pc, #88]	; (1cb1c <log_reboot_write+0x110>)
   1cac4:	f7f3 feea 	bl	1089c <snprintf>
   1cac8:	4404      	add	r4, r0
                (unsigned long)info->pc);
    }

    /* Make sure we don't log beyond the end of the source buffer. */
    if (off > sizeof buf) {
        off = sizeof buf;
   1caca:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   1cace:	bf88      	it	hi
   1cad0:	f44f 7480 	movhi.w	r4, #256	; 0x100
    }

    /* Log a reboot */
    modlog_append(LOG_MODULE_REBOOT, LOG_LEVEL_CRITICAL, LOG_ETYPE_STRING,
   1cad4:	b2a4      	uxth	r4, r4
   1cad6:	9400      	str	r4, [sp, #0]
   1cad8:	ab10      	add	r3, sp, #64	; 0x40
   1cada:	2200      	movs	r2, #0
   1cadc:	2104      	movs	r1, #4
   1cade:	2006      	movs	r0, #6
   1cae0:	f7ff fdc4 	bl	1c66c <modlog_append>
                  buf, off);

    return 0;
}
   1cae4:	4638      	mov	r0, r7
   1cae6:	b051      	add	sp, #324	; 0x144
   1cae8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    off += snprintf(buf + off, sizeof buf - off,
   1caec:	4b0c      	ldr	r3, [pc, #48]	; (1cb20 <log_reboot_write+0x114>)
   1caee:	e7ad      	b.n	1ca4c <log_reboot_write+0x40>
                    REBOOT_REASON_STR(info->reason), reboot_cnt, ver.iv_major,
   1caf0:	4b0c      	ldr	r3, [pc, #48]	; (1cb24 <log_reboot_write+0x118>)
   1caf2:	e7ab      	b.n	1ca4c <log_reboot_write+0x40>
   1caf4:	4b0c      	ldr	r3, [pc, #48]	; (1cb28 <log_reboot_write+0x11c>)
   1caf6:	e7a9      	b.n	1ca4c <log_reboot_write+0x40>
   1caf8:	4b0c      	ldr	r3, [pc, #48]	; (1cb2c <log_reboot_write+0x120>)
   1cafa:	e7a7      	b.n	1ca4c <log_reboot_write+0x40>
   1cafc:	4b0c      	ldr	r3, [pc, #48]	; (1cb30 <log_reboot_write+0x124>)
   1cafe:	e7a5      	b.n	1ca4c <log_reboot_write+0x40>
   1cb00:	4b0c      	ldr	r3, [pc, #48]	; (1cb34 <log_reboot_write+0x128>)
   1cb02:	e7a3      	b.n	1ca4c <log_reboot_write+0x40>
   1cb04:	200073a8 	.word	0x200073a8
   1cb08:	00022490 	.word	0x00022490
   1cb0c:	000223d1 	.word	0x000223d1
   1cb10:	2000739a 	.word	0x2000739a
   1cb14:	000224b3 	.word	0x000224b3
   1cb18:	000224df 	.word	0x000224df
   1cb1c:	000224eb 	.word	0x000224eb
   1cb20:	0002249f 	.word	0x0002249f
   1cb24:	000224a4 	.word	0x000224a4
   1cb28:	00022481 	.word	0x00022481
   1cb2c:	000224ae 	.word	0x000224ae
   1cb30:	00022478 	.word	0x00022478
   1cb34:	00022486 	.word	0x00022486
   1cb38:	000224da 	.word	0x000224da

0001cb3c <reboot_conf_export>:

static int
reboot_conf_export(void (*func)(char *name, char *val),
                   enum conf_export_tgt tgt)
{
    if (tgt == CONF_EXPORT_SHOW) {
   1cb3c:	2901      	cmp	r1, #1
{
   1cb3e:	b510      	push	{r4, lr}
   1cb40:	4604      	mov	r4, r0
    if (tgt == CONF_EXPORT_SHOW) {
   1cb42:	d105      	bne.n	1cb50 <reboot_conf_export+0x14>
        func("reboot/reboot_cnt", reboot_cnt_str);
   1cb44:	4903      	ldr	r1, [pc, #12]	; (1cb54 <reboot_conf_export+0x18>)
   1cb46:	4804      	ldr	r0, [pc, #16]	; (1cb58 <reboot_conf_export+0x1c>)
   1cb48:	47a0      	blx	r4
        func("reboot/written", log_reboot_written_str);
   1cb4a:	4904      	ldr	r1, [pc, #16]	; (1cb5c <reboot_conf_export+0x20>)
   1cb4c:	4804      	ldr	r0, [pc, #16]	; (1cb60 <reboot_conf_export+0x24>)
   1cb4e:	47a0      	blx	r4
    }
    return 0;
}
   1cb50:	2000      	movs	r0, #0
   1cb52:	bd10      	pop	{r4, pc}
   1cb54:	2000739c 	.word	0x2000739c
   1cb58:	000224f6 	.word	0x000224f6
   1cb5c:	2000738d 	.word	0x2000738d
   1cb60:	00022508 	.word	0x00022508

0001cb64 <reboot_conf_get>:
    if (argc == 1) {
   1cb64:	2801      	cmp	r0, #1
{
   1cb66:	b510      	push	{r4, lr}
    if (argc == 1) {
   1cb68:	d117      	bne.n	1cb9a <reboot_conf_get+0x36>
        if (!strcmp(argv[0], "reboot_cnt")) {
   1cb6a:	680c      	ldr	r4, [r1, #0]
   1cb6c:	490c      	ldr	r1, [pc, #48]	; (1cba0 <reboot_conf_get+0x3c>)
   1cb6e:	4620      	mov	r0, r4
   1cb70:	f7f3 fba6 	bl	102c0 <strcmp>
   1cb74:	b938      	cbnz	r0, 1cb86 <reboot_conf_get+0x22>
            return conf_str_from_value(CONF_INT16, &reboot_cnt,
   1cb76:	4a0b      	ldr	r2, [pc, #44]	; (1cba4 <reboot_conf_get+0x40>)
   1cb78:	490b      	ldr	r1, [pc, #44]	; (1cba8 <reboot_conf_get+0x44>)
   1cb7a:	230c      	movs	r3, #12
   1cb7c:	2003      	movs	r0, #3
}
   1cb7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            return conf_str_from_value(CONF_BOOL, &log_reboot_written,
   1cb82:	f7f4 bbe1 	b.w	11348 <conf_str_from_value>
        } else if (!strcmp(argv[0], "written")) {
   1cb86:	4909      	ldr	r1, [pc, #36]	; (1cbac <reboot_conf_get+0x48>)
   1cb88:	4620      	mov	r0, r4
   1cb8a:	f7f3 fb99 	bl	102c0 <strcmp>
   1cb8e:	b920      	cbnz	r0, 1cb9a <reboot_conf_get+0x36>
            return conf_str_from_value(CONF_BOOL, &log_reboot_written,
   1cb90:	4a07      	ldr	r2, [pc, #28]	; (1cbb0 <reboot_conf_get+0x4c>)
   1cb92:	4908      	ldr	r1, [pc, #32]	; (1cbb4 <reboot_conf_get+0x50>)
   1cb94:	230c      	movs	r3, #12
   1cb96:	200a      	movs	r0, #10
   1cb98:	e7f1      	b.n	1cb7e <reboot_conf_get+0x1a>
}
   1cb9a:	2000      	movs	r0, #0
   1cb9c:	bd10      	pop	{r4, pc}
   1cb9e:	bf00      	nop
   1cba0:	000224fd 	.word	0x000224fd
   1cba4:	2000739c 	.word	0x2000739c
   1cba8:	2000739a 	.word	0x2000739a
   1cbac:	0002250f 	.word	0x0002250f
   1cbb0:	2000738d 	.word	0x2000738d
   1cbb4:	2000738c 	.word	0x2000738c

0001cbb8 <reboot_conf_set>:
    if (argc == 1) {
   1cbb8:	2801      	cmp	r0, #1
{
   1cbba:	b570      	push	{r4, r5, r6, lr}
   1cbbc:	4605      	mov	r5, r0
   1cbbe:	4614      	mov	r4, r2
    if (argc == 1) {
   1cbc0:	d115      	bne.n	1cbee <reboot_conf_set+0x36>
   1cbc2:	680e      	ldr	r6, [r1, #0]
        if (!strcmp(argv[0], "reboot_cnt")) {
   1cbc4:	490b      	ldr	r1, [pc, #44]	; (1cbf4 <reboot_conf_set+0x3c>)
   1cbc6:	4630      	mov	r0, r6
   1cbc8:	f7f3 fb7a 	bl	102c0 <strcmp>
   1cbcc:	b938      	cbnz	r0, 1cbde <reboot_conf_set+0x26>
            return CONF_VALUE_SET(val, CONF_INT16, reboot_cnt);
   1cbce:	4a0a      	ldr	r2, [pc, #40]	; (1cbf8 <reboot_conf_set+0x40>)
   1cbd0:	2302      	movs	r3, #2
            return CONF_VALUE_SET(val, CONF_INT16, log_reboot_written);
   1cbd2:	4620      	mov	r0, r4
   1cbd4:	2103      	movs	r1, #3
}
   1cbd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return CONF_VALUE_SET(val, CONF_INT16, log_reboot_written);
   1cbda:	f7f4 bb59 	b.w	11290 <conf_value_from_str>
        } else if (!strcmp(argv[0], "written")) {
   1cbde:	4907      	ldr	r1, [pc, #28]	; (1cbfc <reboot_conf_set+0x44>)
   1cbe0:	4630      	mov	r0, r6
   1cbe2:	f7f3 fb6d 	bl	102c0 <strcmp>
   1cbe6:	b910      	cbnz	r0, 1cbee <reboot_conf_set+0x36>
            return CONF_VALUE_SET(val, CONF_INT16, log_reboot_written);
   1cbe8:	4a05      	ldr	r2, [pc, #20]	; (1cc00 <reboot_conf_set+0x48>)
   1cbea:	462b      	mov	r3, r5
   1cbec:	e7f1      	b.n	1cbd2 <reboot_conf_set+0x1a>
}
   1cbee:	200a      	movs	r0, #10
   1cbf0:	bd70      	pop	{r4, r5, r6, pc}
   1cbf2:	bf00      	nop
   1cbf4:	000224fd 	.word	0x000224fd
   1cbf8:	2000739a 	.word	0x2000739a
   1cbfc:	0002250f 	.word	0x0002250f
   1cc00:	2000738c 	.word	0x2000738c

0001cc04 <log_reboot>:
{
   1cc04:	b538      	push	{r3, r4, r5, lr}
    if (log_reboot_written) {
   1cc06:	4d09      	ldr	r5, [pc, #36]	; (1cc2c <log_reboot+0x28>)
   1cc08:	f995 3000 	ldrsb.w	r3, [r5]
   1cc0c:	b95b      	cbnz	r3, 1cc26 <log_reboot+0x22>
    rc = log_reboot_write(info);
   1cc0e:	f7ff fefd 	bl	1ca0c <log_reboot_write>
    if (rc != 0) {
   1cc12:	4604      	mov	r4, r0
   1cc14:	b928      	cbnz	r0, 1cc22 <log_reboot+0x1e>
    log_reboot_written = 1;
   1cc16:	2301      	movs	r3, #1
    conf_save_one("reboot/written", "1");
   1cc18:	4905      	ldr	r1, [pc, #20]	; (1cc30 <log_reboot+0x2c>)
   1cc1a:	4806      	ldr	r0, [pc, #24]	; (1cc34 <log_reboot+0x30>)
    log_reboot_written = 1;
   1cc1c:	702b      	strb	r3, [r5, #0]
    conf_save_one("reboot/written", "1");
   1cc1e:	f7f4 fa49 	bl	110b4 <conf_save_one>
}
   1cc22:	4620      	mov	r0, r4
   1cc24:	bd38      	pop	{r3, r4, r5, pc}
        return 0;
   1cc26:	2400      	movs	r4, #0
   1cc28:	e7fb      	b.n	1cc22 <log_reboot+0x1e>
   1cc2a:	bf00      	nop
   1cc2c:	2000738c 	.word	0x2000738c
   1cc30:	00021594 	.word	0x00021594
   1cc34:	00022508 	.word	0x00022508

0001cc38 <log_reboot_pkg_init>:

void
log_reboot_pkg_init(void)
{
   1cc38:	b513      	push	{r0, r1, r4, lr}
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1cc3a:	4b13      	ldr	r3, [pc, #76]	; (1cc88 <log_reboot_pkg_init+0x50>)
   1cc3c:	781b      	ldrb	r3, [r3, #0]
   1cc3e:	b923      	cbnz	r3, 1cc4a <log_reboot_pkg_init+0x12>
   1cc40:	461a      	mov	r2, r3
   1cc42:	4619      	mov	r1, r3
   1cc44:	4618      	mov	r0, r3
   1cc46:	f7ef fdd9 	bl	c7fc <__assert_func>

    rc = conf_register(&reboot_conf_handler);
   1cc4a:	4810      	ldr	r0, [pc, #64]	; (1cc8c <log_reboot_pkg_init+0x54>)
   1cc4c:	f7f4 fadc 	bl	11208 <conf_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1cc50:	b138      	cbz	r0, 1cc62 <log_reboot_pkg_init+0x2a>
   1cc52:	2300      	movs	r3, #0
   1cc54:	4a0e      	ldr	r2, [pc, #56]	; (1cc90 <log_reboot_pkg_init+0x58>)
   1cc56:	9300      	str	r3, [sp, #0]
   1cc58:	6814      	ldr	r4, [r2, #0]
   1cc5a:	4619      	mov	r1, r3
   1cc5c:	461a      	mov	r2, r3
   1cc5e:	4618      	mov	r0, r3
   1cc60:	47a0      	blx	r4
    rc = modlog_register(LOG_MODULE_REBOOT, log_console_get(), LOG_SYSLEVEL,
   1cc62:	f7ff f897 	bl	1bd94 <log_console_get>
   1cc66:	2300      	movs	r3, #0
   1cc68:	4601      	mov	r1, r0
   1cc6a:	461a      	mov	r2, r3
   1cc6c:	2006      	movs	r0, #6
   1cc6e:	f7ff fca1 	bl	1c5b4 <modlog_register>
    if (rc != 0) {
   1cc72:	b138      	cbz	r0, 1cc84 <log_reboot_pkg_init+0x4c>
    rc = log_reboot_init_fcb();
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
#if MYNEWT_VAL(REBOOT_LOG_CONSOLE)
    rc = log_reboot_init_console();
    SYSINIT_PANIC_ASSERT(rc == 0);
   1cc74:	2300      	movs	r3, #0
   1cc76:	4a06      	ldr	r2, [pc, #24]	; (1cc90 <log_reboot_pkg_init+0x58>)
   1cc78:	9300      	str	r3, [sp, #0]
   1cc7a:	6814      	ldr	r4, [r2, #0]
   1cc7c:	4619      	mov	r1, r3
   1cc7e:	461a      	mov	r2, r3
   1cc80:	4618      	mov	r0, r3
   1cc82:	47a0      	blx	r4
#endif
}
   1cc84:	b002      	add	sp, #8
   1cc86:	bd10      	pop	{r4, pc}
   1cc88:	20006af4 	.word	0x20006af4
   1cc8c:	200016e4 	.word	0x200016e4
   1cc90:	2000143c 	.word	0x2000143c

0001cc94 <rwlock_unblock>:
 * Unblocks the next pending user.  The caller must lock the mutex prior to
 * calling this.
 */
static void
rwlock_unblock(struct rwlock *lock)
{
   1cc94:	b538      	push	{r3, r4, r5, lr}
    RWLOCK_DBG_ASSERT(lock->mtx.mu_owner == g_current_task);
    RWLOCK_DBG_ASSERT(lock->handoffs == 0);

    /* Give priority to pending writers. */
    if (lock->pending_writers > 0) {
   1cc96:	7fc3      	ldrb	r3, [r0, #31]
{
   1cc98:	4604      	mov	r4, r0
    if (lock->pending_writers > 0) {
   1cc9a:	b14b      	cbz	r3, 1ccb0 <rwlock_unblock+0x1c>
        /* Indicate that ownership is being transfered to a single writer. */
        lock->handoffs = 1;
   1cc9c:	2301      	movs	r3, #1
   1cc9e:	f880 3020 	strb.w	r3, [r0, #32]

        os_sem_release(&lock->wsem);
   1cca2:	3014      	adds	r0, #20
   1cca4:	f7f0 fcd8 	bl	d658 <os_sem_release>
        lock->pending_writers--;
   1cca8:	7fe3      	ldrb	r3, [r4, #31]
   1ccaa:	3b01      	subs	r3, #1
   1ccac:	77e3      	strb	r3, [r4, #31]
        while (lock->pending_readers > 0) {
            os_sem_release(&lock->rsem);
            lock->pending_readers--;
        }
    }
}
   1ccae:	bd38      	pop	{r3, r4, r5, pc}
        lock->handoffs = lock->pending_readers;
   1ccb0:	7f83      	ldrb	r3, [r0, #30]
   1ccb2:	f880 3020 	strb.w	r3, [r0, #32]
            os_sem_release(&lock->rsem);
   1ccb6:	f100 050c 	add.w	r5, r0, #12
        while (lock->pending_readers > 0) {
   1ccba:	7fa3      	ldrb	r3, [r4, #30]
   1ccbc:	2b00      	cmp	r3, #0
   1ccbe:	d0f6      	beq.n	1ccae <rwlock_unblock+0x1a>
            os_sem_release(&lock->rsem);
   1ccc0:	4628      	mov	r0, r5
   1ccc2:	f7f0 fcc9 	bl	d658 <os_sem_release>
            lock->pending_readers--;
   1ccc6:	7fa3      	ldrb	r3, [r4, #30]
   1ccc8:	3b01      	subs	r3, #1
   1ccca:	77a3      	strb	r3, [r4, #30]
   1cccc:	e7f5      	b.n	1ccba <rwlock_unblock+0x26>

0001ccce <rwlock_acquire_read>:
           lock->handoffs > 0;
}

void
rwlock_acquire_read(struct rwlock *lock)
{
   1ccce:	b538      	push	{r3, r4, r5, lr}
   1ccd0:	4604      	mov	r4, r0
    bool acquired;

    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1ccd2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ccd6:	f7f0 fa99 	bl	d20c <os_mutex_pend>
    return lock->active_writer ||
   1ccda:	69e3      	ldr	r3, [r4, #28]
           lock->pending_writers > 0 ||
   1ccdc:	f013 2fff 	tst.w	r3, #4278255360	; 0xff00ff00
   1cce0:	d102      	bne.n	1cce8 <rwlock_acquire_read+0x1a>

    if (rwlock_read_must_block(lock)) {
   1cce2:	f894 3020 	ldrb.w	r3, [r4, #32]
   1cce6:	b1fb      	cbz	r3, 1cd28 <rwlock_acquire_read+0x5a>
        lock->pending_readers++;
   1cce8:	7fa3      	ldrb	r3, [r4, #30]
   1ccea:	3301      	adds	r3, #1
   1ccec:	77a3      	strb	r3, [r4, #30]
        acquired = false;
   1ccee:	2500      	movs	r5, #0
    } else {
        lock->num_readers++;
        acquired = true;
    }

    os_mutex_release(&lock->mtx);
   1ccf0:	4620      	mov	r0, r4
   1ccf2:	f7f0 fa39 	bl	d168 <os_mutex_release>

    if (acquired) {
   1ccf6:	b9e5      	cbnz	r5, 1cd32 <rwlock_acquire_read+0x64>
        /* No contention; lock acquired. */
        return;
    }

    /* Wait for the lock to become available. */
    os_sem_pend(&lock->rsem, OS_TIMEOUT_NEVER);
   1ccf8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ccfc:	f104 000c 	add.w	r0, r4, #12
   1cd00:	f7f0 fcdc 	bl	d6bc <os_sem_pend>

    /* Record reader ownership. */
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1cd04:	4620      	mov	r0, r4
   1cd06:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1cd0a:	f7f0 fa7f 	bl	d20c <os_mutex_pend>
    lock->num_readers++;
   1cd0e:	7f23      	ldrb	r3, [r4, #28]
   1cd10:	3301      	adds	r3, #1
   1cd12:	7723      	strb	r3, [r4, #28]
    lock->handoffs--;
   1cd14:	f894 3020 	ldrb.w	r3, [r4, #32]
   1cd18:	3b01      	subs	r3, #1
   1cd1a:	f884 3020 	strb.w	r3, [r4, #32]
    rwlock_complete_handoff(lock);
    os_mutex_release(&lock->mtx);
   1cd1e:	4620      	mov	r0, r4
}
   1cd20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    os_mutex_release(&lock->mtx);
   1cd24:	f7f0 ba20 	b.w	d168 <os_mutex_release>
        lock->num_readers++;
   1cd28:	7f23      	ldrb	r3, [r4, #28]
   1cd2a:	3301      	adds	r3, #1
   1cd2c:	7723      	strb	r3, [r4, #28]
        acquired = true;
   1cd2e:	2501      	movs	r5, #1
   1cd30:	e7de      	b.n	1ccf0 <rwlock_acquire_read+0x22>
}
   1cd32:	bd38      	pop	{r3, r4, r5, pc}

0001cd34 <rwlock_release_read>:

void
rwlock_release_read(struct rwlock *lock)
{
   1cd34:	b510      	push	{r4, lr}
   1cd36:	4604      	mov	r4, r0
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1cd38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1cd3c:	f7f0 fa66 	bl	d20c <os_mutex_pend>

    RWLOCK_DBG_ASSERT(lock->num_readers > 0);
    lock->num_readers--;
   1cd40:	7f23      	ldrb	r3, [r4, #28]
   1cd42:	3b01      	subs	r3, #1
   1cd44:	b2db      	uxtb	r3, r3
   1cd46:	7723      	strb	r3, [r4, #28]

    /* If this is the last active reader, unblock a pending writer if there is
     * one.
     */
    if (lock->num_readers == 0) {
   1cd48:	b913      	cbnz	r3, 1cd50 <rwlock_release_read+0x1c>
        rwlock_unblock(lock);
   1cd4a:	4620      	mov	r0, r4
   1cd4c:	f7ff ffa2 	bl	1cc94 <rwlock_unblock>
    }

    os_mutex_release(&lock->mtx);
   1cd50:	4620      	mov	r0, r4
}
   1cd52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    os_mutex_release(&lock->mtx);
   1cd56:	f7f0 ba07 	b.w	d168 <os_mutex_release>

0001cd5a <rwlock_acquire_write>:

void
rwlock_acquire_write(struct rwlock *lock)
{
   1cd5a:	b538      	push	{r3, r4, r5, lr}
   1cd5c:	4604      	mov	r4, r0
    bool acquired;

    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1cd5e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1cd62:	f7f0 fa53 	bl	d20c <os_mutex_pend>
           lock->num_readers > 0 ||
   1cd66:	8ba3      	ldrh	r3, [r4, #28]
   1cd68:	b913      	cbnz	r3, 1cd70 <rwlock_acquire_write+0x16>

    if (rwlock_write_must_block(lock)) {
   1cd6a:	f894 3020 	ldrb.w	r3, [r4, #32]
   1cd6e:	b1f3      	cbz	r3, 1cdae <rwlock_acquire_write+0x54>
        lock->pending_writers++;
   1cd70:	7fe3      	ldrb	r3, [r4, #31]
   1cd72:	3301      	adds	r3, #1
   1cd74:	77e3      	strb	r3, [r4, #31]
        acquired = false;
   1cd76:	2500      	movs	r5, #0
    } else {
        lock->active_writer = true;
        acquired = true;
    }

    os_mutex_release(&lock->mtx);
   1cd78:	4620      	mov	r0, r4
   1cd7a:	f7f0 f9f5 	bl	d168 <os_mutex_release>

    if (acquired) {
   1cd7e:	b9cd      	cbnz	r5, 1cdb4 <rwlock_acquire_write+0x5a>
        /* No contention; lock acquired. */
        return;
    }

    /* Wait for the lock to become available. */
    os_sem_pend(&lock->wsem, OS_TIMEOUT_NEVER);
   1cd80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1cd84:	f104 0014 	add.w	r0, r4, #20
   1cd88:	f7f0 fc98 	bl	d6bc <os_sem_pend>

    /* Record writer ownership. */
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1cd8c:	4620      	mov	r0, r4
   1cd8e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1cd92:	f7f0 fa3b 	bl	d20c <os_mutex_pend>
    lock->active_writer = true;
   1cd96:	2301      	movs	r3, #1
   1cd98:	7763      	strb	r3, [r4, #29]
    lock->handoffs--;
   1cd9a:	f894 3020 	ldrb.w	r3, [r4, #32]
   1cd9e:	3b01      	subs	r3, #1
   1cda0:	f884 3020 	strb.w	r3, [r4, #32]
    rwlock_complete_handoff(lock);
    os_mutex_release(&lock->mtx);
   1cda4:	4620      	mov	r0, r4
}
   1cda6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    os_mutex_release(&lock->mtx);
   1cdaa:	f7f0 b9dd 	b.w	d168 <os_mutex_release>
        lock->active_writer = true;
   1cdae:	2501      	movs	r5, #1
   1cdb0:	7765      	strb	r5, [r4, #29]
        acquired = true;
   1cdb2:	e7e1      	b.n	1cd78 <rwlock_acquire_write+0x1e>
}
   1cdb4:	bd38      	pop	{r3, r4, r5, pc}

0001cdb6 <rwlock_release_write>:

void
rwlock_release_write(struct rwlock *lock)
{
   1cdb6:	b510      	push	{r4, lr}
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1cdb8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
{
   1cdbc:	4604      	mov	r4, r0
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1cdbe:	f7f0 fa25 	bl	d20c <os_mutex_pend>

    RWLOCK_DBG_ASSERT(lock->active_writer);
    lock->active_writer = false;
   1cdc2:	2300      	movs	r3, #0

    rwlock_unblock(lock);
   1cdc4:	4620      	mov	r0, r4
    lock->active_writer = false;
   1cdc6:	7763      	strb	r3, [r4, #29]
    rwlock_unblock(lock);
   1cdc8:	f7ff ff64 	bl	1cc94 <rwlock_unblock>

    os_mutex_release(&lock->mtx);
   1cdcc:	4620      	mov	r0, r4
}
   1cdce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    os_mutex_release(&lock->mtx);
   1cdd2:	f7f0 b9c9 	b.w	d168 <os_mutex_release>

0001cdd6 <rwlock_init>:

int
rwlock_init(struct rwlock *lock)
{
   1cdd6:	b510      	push	{r4, lr}
    int rc;

    *lock = (struct rwlock) { 0 };
   1cdd8:	2224      	movs	r2, #36	; 0x24
{
   1cdda:	4604      	mov	r4, r0
    *lock = (struct rwlock) { 0 };
   1cddc:	2100      	movs	r1, #0
   1cdde:	f7f3 fa54 	bl	1028a <memset>

    rc = os_mutex_init(&lock->mtx);
   1cde2:	4620      	mov	r0, r4
   1cde4:	f7f0 f9b6 	bl	d154 <os_mutex_init>
    if (rc != 0) {
   1cde8:	b950      	cbnz	r0, 1ce00 <rwlock_init+0x2a>
        return rc;
    }

    rc = os_sem_init(&lock->rsem, 0);
   1cdea:	4601      	mov	r1, r0
   1cdec:	f104 000c 	add.w	r0, r4, #12
   1cdf0:	f7f0 fc2a 	bl	d648 <os_sem_init>
    if (rc != 0) {
   1cdf4:	b920      	cbnz	r0, 1ce00 <rwlock_init+0x2a>
        return rc;
    }

    rc = os_sem_init(&lock->wsem, 0);
   1cdf6:	4601      	mov	r1, r0
   1cdf8:	f104 0014 	add.w	r0, r4, #20
   1cdfc:	f7f0 fc24 	bl	d648 <os_sem_init>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1ce00:	bd10      	pop	{r4, pc}

0001ce02 <boot_write_trailer_byte>:
}

static int
boot_write_trailer_byte(const struct flash_area *fap, uint32_t off,
                        uint8_t val)
{
   1ce02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ce04:	4604      	mov	r4, r0
   1ce06:	460e      	mov	r6, r1
   1ce08:	4617      	mov	r7, r2
    uint8_t buf[BOOT_MAX_ALIGN];
    uint8_t align;
    uint8_t erased_val;
    int rc;

    align = flash_area_align(fap);
   1ce0a:	f7fe fd39 	bl	1b880 <flash_area_align>
    assert(align <= BOOT_MAX_ALIGN);
   1ce0e:	2808      	cmp	r0, #8
    align = flash_area_align(fap);
   1ce10:	4605      	mov	r5, r0
    assert(align <= BOOT_MAX_ALIGN);
   1ce12:	d905      	bls.n	1ce20 <boot_write_trailer_byte+0x1e>
   1ce14:	2300      	movs	r3, #0
   1ce16:	461a      	mov	r2, r3
   1ce18:	4619      	mov	r1, r3
   1ce1a:	4618      	mov	r0, r3
   1ce1c:	f7ef fcee 	bl	c7fc <__assert_func>
    erased_val = flash_area_erased_val(fap);
   1ce20:	4620      	mov	r0, r4
   1ce22:	f7fe fd30 	bl	1b886 <flash_area_erased_val>
    memset(buf, erased_val, BOOT_MAX_ALIGN);
   1ce26:	2208      	movs	r2, #8
   1ce28:	b2c1      	uxtb	r1, r0
   1ce2a:	4668      	mov	r0, sp
   1ce2c:	f7f3 fa2d 	bl	1028a <memset>
    buf[0] = val;

    rc = flash_area_write(fap, off, buf, align);
   1ce30:	462b      	mov	r3, r5
   1ce32:	466a      	mov	r2, sp
   1ce34:	4631      	mov	r1, r6
   1ce36:	4620      	mov	r0, r4
    buf[0] = val;
   1ce38:	f88d 7000 	strb.w	r7, [sp]
    rc = flash_area_write(fap, off, buf, align);
   1ce3c:	f7fe fcfa 	bl	1b834 <flash_area_write>
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
   1ce40:	3800      	subs	r0, #0
   1ce42:	bf18      	it	ne
   1ce44:	2001      	movne	r0, #1
   1ce46:	b003      	add	sp, #12
   1ce48:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001ce4a <boot_magic_compatible_check>:
    switch (tbl_val) {
   1ce4a:	2804      	cmp	r0, #4
   1ce4c:	d009      	beq.n	1ce62 <boot_magic_compatible_check+0x18>
   1ce4e:	2805      	cmp	r0, #5
   1ce50:	d103      	bne.n	1ce5a <boot_magic_compatible_check+0x10>
        return val != BOOT_MAGIC_GOOD;
   1ce52:	1e48      	subs	r0, r1, #1
   1ce54:	bf18      	it	ne
   1ce56:	2001      	movne	r0, #1
   1ce58:	4770      	bx	lr
        return tbl_val == val;
   1ce5a:	1a43      	subs	r3, r0, r1
   1ce5c:	4258      	negs	r0, r3
   1ce5e:	4158      	adcs	r0, r3
   1ce60:	4770      	bx	lr
    switch (tbl_val) {
   1ce62:	2001      	movs	r0, #1
}
   1ce64:	4770      	bx	lr
	...

0001ce68 <boot_read_swap_state>:
{
   1ce68:	b530      	push	{r4, r5, lr}
   1ce6a:	460c      	mov	r4, r1
    return fap->fa_size - BOOT_MAGIC_SZ;
   1ce6c:	6881      	ldr	r1, [r0, #8]
{
   1ce6e:	b085      	sub	sp, #20
    rc = flash_area_read_is_empty(fap, off, magic, BOOT_MAGIC_SZ);
   1ce70:	2310      	movs	r3, #16
   1ce72:	466a      	mov	r2, sp
   1ce74:	3910      	subs	r1, #16
{
   1ce76:	4605      	mov	r5, r0
    rc = flash_area_read_is_empty(fap, off, magic, BOOT_MAGIC_SZ);
   1ce78:	f7fe fd1a 	bl	1b8b0 <flash_area_read_is_empty>
    if (rc < 0) {
   1ce7c:	2800      	cmp	r0, #0
   1ce7e:	da02      	bge.n	1ce86 <boot_read_swap_state+0x1e>
        return BOOT_EFLASH;
   1ce80:	2001      	movs	r0, #1
}
   1ce82:	b005      	add	sp, #20
   1ce84:	bd30      	pop	{r4, r5, pc}
    if (rc == 1) {
   1ce86:	2801      	cmp	r0, #1
   1ce88:	d12d      	bne.n	1cee6 <boot_read_swap_state+0x7e>
        state->magic = BOOT_MAGIC_UNSET;
   1ce8a:	2303      	movs	r3, #3
        state->magic = boot_magic_decode(magic);
   1ce8c:	7023      	strb	r3, [r4, #0]
    return fap->fa_size - BOOT_MAGIC_SZ - BOOT_MAX_ALIGN * 3;
   1ce8e:	68a9      	ldr	r1, [r5, #8]
    rc = flash_area_read_is_empty(fap, off, &state->swap_type,
   1ce90:	2301      	movs	r3, #1
   1ce92:	18e2      	adds	r2, r4, r3
   1ce94:	3928      	subs	r1, #40	; 0x28
   1ce96:	4628      	mov	r0, r5
   1ce98:	f7fe fd0a 	bl	1b8b0 <flash_area_read_is_empty>
    if (rc < 0) {
   1ce9c:	2800      	cmp	r0, #0
   1ce9e:	dbef      	blt.n	1ce80 <boot_read_swap_state+0x18>
    if (rc == 1 || state->swap_type > BOOT_SWAP_TYPE_REVERT) {
   1cea0:	2801      	cmp	r0, #1
   1cea2:	d002      	beq.n	1ceaa <boot_read_swap_state+0x42>
   1cea4:	7863      	ldrb	r3, [r4, #1]
   1cea6:	2b04      	cmp	r3, #4
   1cea8:	d901      	bls.n	1ceae <boot_read_swap_state+0x46>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
   1ceaa:	2301      	movs	r3, #1
   1ceac:	7063      	strb	r3, [r4, #1]
    return fap->fa_size - BOOT_MAGIC_SZ - BOOT_MAX_ALIGN * 2;
   1ceae:	68a9      	ldr	r1, [r5, #8]
    rc = flash_area_read_is_empty(fap, off, &state->copy_done,
   1ceb0:	2301      	movs	r3, #1
   1ceb2:	1ca2      	adds	r2, r4, #2
   1ceb4:	3920      	subs	r1, #32
   1ceb6:	4628      	mov	r0, r5
   1ceb8:	f7fe fcfa 	bl	1b8b0 <flash_area_read_is_empty>
    if (rc < 0) {
   1cebc:	2800      	cmp	r0, #0
   1cebe:	dbdf      	blt.n	1ce80 <boot_read_swap_state+0x18>
    if (rc == 1) {
   1cec0:	2801      	cmp	r0, #1
   1cec2:	d11a      	bne.n	1cefa <boot_read_swap_state+0x92>
        state->copy_done = BOOT_FLAG_UNSET;
   1cec4:	2303      	movs	r3, #3
        state->copy_done = boot_flag_decode(state->copy_done);
   1cec6:	70a3      	strb	r3, [r4, #2]
    return fap->fa_size - BOOT_MAGIC_SZ - BOOT_MAX_ALIGN;
   1cec8:	68a9      	ldr	r1, [r5, #8]
    rc = flash_area_read_is_empty(fap, off, &state->image_ok,
   1ceca:	2301      	movs	r3, #1
   1cecc:	1ce2      	adds	r2, r4, #3
   1cece:	3918      	subs	r1, #24
   1ced0:	4628      	mov	r0, r5
   1ced2:	f7fe fced 	bl	1b8b0 <flash_area_read_is_empty>
    if (rc < 0) {
   1ced6:	2800      	cmp	r0, #0
   1ced8:	dbd2      	blt.n	1ce80 <boot_read_swap_state+0x18>
    if (rc == 1) {
   1ceda:	2801      	cmp	r0, #1
   1cedc:	d113      	bne.n	1cf06 <boot_read_swap_state+0x9e>
        state->image_ok = BOOT_FLAG_UNSET;
   1cede:	2303      	movs	r3, #3
        state->image_ok = boot_flag_decode(state->image_ok);
   1cee0:	70e3      	strb	r3, [r4, #3]
    return 0;
   1cee2:	2000      	movs	r0, #0
   1cee4:	e7cd      	b.n	1ce82 <boot_read_swap_state+0x1a>
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
   1cee6:	490b      	ldr	r1, [pc, #44]	; (1cf14 <boot_read_swap_state+0xac>)
   1cee8:	2210      	movs	r2, #16
   1ceea:	4668      	mov	r0, sp
   1ceec:	f7f3 f99c 	bl	10228 <memcmp>
        return BOOT_MAGIC_GOOD;
   1cef0:	2800      	cmp	r0, #0
   1cef2:	bf14      	ite	ne
   1cef4:	2302      	movne	r3, #2
   1cef6:	2301      	moveq	r3, #1
   1cef8:	e7c8      	b.n	1ce8c <boot_read_swap_state+0x24>
    if (flag != BOOT_FLAG_SET) {
   1cefa:	78a3      	ldrb	r3, [r4, #2]
        return BOOT_FLAG_BAD;
   1cefc:	2b01      	cmp	r3, #1
   1cefe:	bf0c      	ite	eq
   1cf00:	2301      	moveq	r3, #1
   1cf02:	2302      	movne	r3, #2
   1cf04:	e7df      	b.n	1cec6 <boot_read_swap_state+0x5e>
    if (flag != BOOT_FLAG_SET) {
   1cf06:	78e3      	ldrb	r3, [r4, #3]
        return BOOT_FLAG_BAD;
   1cf08:	2b01      	cmp	r3, #1
   1cf0a:	bf0c      	ite	eq
   1cf0c:	2301      	moveq	r3, #1
   1cf0e:	2302      	movne	r3, #2
   1cf10:	e7e6      	b.n	1cee0 <boot_read_swap_state+0x78>
   1cf12:	bf00      	nop
   1cf14:	00022568 	.word	0x00022568

0001cf18 <boot_read_swap_state_by_id.part.0>:
boot_read_swap_state_by_id(int flash_area_id, struct boot_swap_state *state)
   1cf18:	b513      	push	{r0, r1, r4, lr}
   1cf1a:	460c      	mov	r4, r1
        rc = flash_area_open(flash_area_id, &fap);
   1cf1c:	b2c0      	uxtb	r0, r0
   1cf1e:	a901      	add	r1, sp, #4
   1cf20:	f7fe fc1e 	bl	1b760 <flash_area_open>
        if (rc != 0) {
   1cf24:	b928      	cbnz	r0, 1cf32 <boot_read_swap_state_by_id.part.0+0x1a>
    rc = boot_read_swap_state(fap, state);
   1cf26:	9801      	ldr	r0, [sp, #4]
   1cf28:	4621      	mov	r1, r4
   1cf2a:	f7ff ff9d 	bl	1ce68 <boot_read_swap_state>
}
   1cf2e:	b002      	add	sp, #8
   1cf30:	bd10      	pop	{r4, pc}
            return BOOT_EFLASH;
   1cf32:	2001      	movs	r0, #1
   1cf34:	e7fb      	b.n	1cf2e <boot_read_swap_state_by_id.part.0+0x16>
	...

0001cf38 <boot_write_magic>:
    return fap->fa_size - BOOT_MAGIC_SZ;
   1cf38:	6881      	ldr	r1, [r0, #8]
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
   1cf3a:	4a05      	ldr	r2, [pc, #20]	; (1cf50 <boot_write_magic+0x18>)
{
   1cf3c:	b508      	push	{r3, lr}
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
   1cf3e:	3910      	subs	r1, #16
   1cf40:	2310      	movs	r3, #16
   1cf42:	f7fe fc77 	bl	1b834 <flash_area_write>
}
   1cf46:	3800      	subs	r0, #0
   1cf48:	bf18      	it	ne
   1cf4a:	2001      	movne	r0, #1
   1cf4c:	bd08      	pop	{r3, pc}
   1cf4e:	bf00      	nop
   1cf50:	00022568 	.word	0x00022568

0001cf54 <boot_write_image_ok>:
    return fap->fa_size - BOOT_MAGIC_SZ - BOOT_MAX_ALIGN;
   1cf54:	6881      	ldr	r1, [r0, #8]
    uint32_t off;

    off = boot_image_ok_off(fap);
    BOOT_LOG_DBG("writing image_ok; fa_id=%d off=0x%x (0x%x)",
                 fap->fa_id, off, fap->fa_off + off);
    return boot_write_trailer_byte(fap, off, BOOT_FLAG_SET);
   1cf56:	2201      	movs	r2, #1
   1cf58:	3918      	subs	r1, #24
   1cf5a:	f7ff bf52 	b.w	1ce02 <boot_write_trailer_byte>

0001cf5e <boot_write_swap_type>:
 * This value is persisted so that the boot loader knows what swap operation to
 * resume in case of an unexpected reset.
 */
int
boot_write_swap_type(const struct flash_area *fap, uint8_t swap_type)
{
   1cf5e:	460a      	mov	r2, r1
    return fap->fa_size - BOOT_MAGIC_SZ - BOOT_MAX_ALIGN * 3;
   1cf60:	6881      	ldr	r1, [r0, #8]
    uint32_t off;

    off = boot_swap_type_off(fap);
    BOOT_LOG_DBG("writing swap_type; fa_id=%d off=0x%x (0x%x), swap_type=0x%x",
                 fap->fa_id, off, fap->fa_off + off, swap_type);
    return boot_write_trailer_byte(fap, off, swap_type);
   1cf62:	3928      	subs	r1, #40	; 0x28
   1cf64:	f7ff bf4d 	b.w	1ce02 <boot_write_trailer_byte>

0001cf68 <boot_swap_type>:
}
#endif

int
boot_swap_type(void)
{
   1cf68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    switch (flash_area_id) {
   1cf6c:	2001      	movs	r0, #1
   1cf6e:	4669      	mov	r1, sp
   1cf70:	f7ff ffd2 	bl	1cf18 <boot_read_swap_state_by_id.part.0>
    struct boot_swap_state secondary_slot;
    int rc;
    size_t i;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY, &primary_slot);
    if (rc) {
   1cf74:	2800      	cmp	r0, #0
   1cf76:	d13c      	bne.n	1cff2 <boot_swap_type+0x8a>
    switch (flash_area_id) {
   1cf78:	a901      	add	r1, sp, #4
   1cf7a:	2002      	movs	r0, #2
   1cf7c:	f7ff ffcc 	bl	1cf18 <boot_read_swap_state_by_id.part.0>
        return BOOT_SWAP_TYPE_PANIC;
    }

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY,
                                    &secondary_slot);
    if (rc) {
   1cf80:	bbb8      	cbnz	r0, 1cff2 <boot_swap_type+0x8a>
    }

    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
        table = boot_swap_tables + i;

        if (boot_magic_compatible_check(table->magic_primary_slot,
   1cf82:	f89d 5000 	ldrb.w	r5, [sp]
                                        primary_slot.magic) &&
            boot_magic_compatible_check(table->magic_secondary_slot,
   1cf86:	f89d 6004 	ldrb.w	r6, [sp, #4]
                                        secondary_slot.magic) &&
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
                table->image_ok_primary_slot == primary_slot.image_ok) &&
   1cf8a:	f89d 7003 	ldrb.w	r7, [sp, #3]
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
   1cf8e:	f89d 8007 	ldrb.w	r8, [sp, #7]
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
                table->copy_done_primary_slot == primary_slot.copy_done)) {
   1cf92:	f89d 9002 	ldrb.w	r9, [sp, #2]
   1cf96:	4c18      	ldr	r4, [pc, #96]	; (1cff8 <boot_swap_type+0x90>)
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
   1cf98:	4602      	mov	r2, r0
        if (boot_magic_compatible_check(table->magic_primary_slot,
   1cf9a:	7820      	ldrb	r0, [r4, #0]
   1cf9c:	4629      	mov	r1, r5
   1cf9e:	f7ff ff54 	bl	1ce4a <boot_magic_compatible_check>
   1cfa2:	b1e8      	cbz	r0, 1cfe0 <boot_swap_type+0x78>
            boot_magic_compatible_check(table->magic_secondary_slot,
   1cfa4:	7860      	ldrb	r0, [r4, #1]
   1cfa6:	4631      	mov	r1, r6
   1cfa8:	f7ff ff4f 	bl	1ce4a <boot_magic_compatible_check>
                                        primary_slot.magic) &&
   1cfac:	b1c0      	cbz	r0, 1cfe0 <boot_swap_type+0x78>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
   1cfae:	78a3      	ldrb	r3, [r4, #2]
                                        secondary_slot.magic) &&
   1cfb0:	2b04      	cmp	r3, #4
   1cfb2:	d001      	beq.n	1cfb8 <boot_swap_type+0x50>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
   1cfb4:	42bb      	cmp	r3, r7
   1cfb6:	d113      	bne.n	1cfe0 <boot_swap_type+0x78>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
   1cfb8:	78e3      	ldrb	r3, [r4, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
   1cfba:	2b04      	cmp	r3, #4
   1cfbc:	d001      	beq.n	1cfc2 <boot_swap_type+0x5a>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
   1cfbe:	4543      	cmp	r3, r8
   1cfc0:	d10e      	bne.n	1cfe0 <boot_swap_type+0x78>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
   1cfc2:	7923      	ldrb	r3, [r4, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
   1cfc4:	2b04      	cmp	r3, #4
   1cfc6:	d109      	bne.n	1cfdc <boot_swap_type+0x74>
            BOOT_LOG_INF("Swap type: %s",
   1cfc8:	7960      	ldrb	r0, [r4, #5]
                         table->swap_type == BOOT_SWAP_TYPE_TEST   ? "test"   :
                         table->swap_type == BOOT_SWAP_TYPE_PERM   ? "perm"   :
                         table->swap_type == BOOT_SWAP_TYPE_REVERT ? "revert" :
                         "BUG; can't happen");
            assert(table->swap_type == BOOT_SWAP_TYPE_TEST ||
   1cfca:	1e83      	subs	r3, r0, #2
   1cfcc:	2b02      	cmp	r3, #2
   1cfce:	d90d      	bls.n	1cfec <boot_swap_type+0x84>
   1cfd0:	2300      	movs	r3, #0
   1cfd2:	461a      	mov	r2, r3
   1cfd4:	4619      	mov	r1, r3
   1cfd6:	4618      	mov	r0, r3
   1cfd8:	f7ef fc10 	bl	c7fc <__assert_func>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
   1cfdc:	454b      	cmp	r3, r9
   1cfde:	d0f3      	beq.n	1cfc8 <boot_swap_type+0x60>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
   1cfe0:	3201      	adds	r2, #1
   1cfe2:	2a03      	cmp	r2, #3
   1cfe4:	f104 0406 	add.w	r4, r4, #6
   1cfe8:	d1d7      	bne.n	1cf9a <boot_swap_type+0x32>
            return table->swap_type;
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
   1cfea:	2001      	movs	r0, #1
}
   1cfec:	b003      	add	sp, #12
   1cfee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return BOOT_SWAP_TYPE_PANIC;
   1cff2:	20ff      	movs	r0, #255	; 0xff
   1cff4:	e7fa      	b.n	1cfec <boot_swap_type+0x84>
   1cff6:	bf00      	nop
   1cff8:	00022578 	.word	0x00022578

0001cffc <boot_set_pending>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_pending(int permanent)
{
   1cffc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1cffe:	4606      	mov	r6, r0
   1d000:	a901      	add	r1, sp, #4
   1d002:	2002      	movs	r0, #2
   1d004:	f7ff ff88 	bl	1cf18 <boot_read_swap_state_by_id.part.0>
    uint8_t swap_type;
    int rc;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY,
                                    &state_secondary_slot);
    if (rc != 0) {
   1d008:	4604      	mov	r4, r0
   1d00a:	b938      	cbnz	r0, 1d01c <boot_set_pending+0x20>
        return rc;
    }

    switch (state_secondary_slot.magic) {
   1d00c:	f89d 5004 	ldrb.w	r5, [sp, #4]
   1d010:	2d02      	cmp	r5, #2
   1d012:	d022      	beq.n	1d05a <boot_set_pending+0x5e>
   1d014:	2d03      	cmp	r5, #3
   1d016:	d004      	beq.n	1d022 <boot_set_pending+0x26>
   1d018:	2d01      	cmp	r5, #1
   1d01a:	d12b      	bne.n	1d074 <boot_set_pending+0x78>

    default:
        assert(0);
        return BOOT_EBADIMAGE;
    }
}
   1d01c:	4620      	mov	r0, r4
   1d01e:	b002      	add	sp, #8
   1d020:	bd70      	pop	{r4, r5, r6, pc}
        rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY, &fap);
   1d022:	4669      	mov	r1, sp
   1d024:	2002      	movs	r0, #2
   1d026:	f7fe fb9b 	bl	1b760 <flash_area_open>
        if (rc != 0) {
   1d02a:	b108      	cbz	r0, 1d030 <boot_set_pending+0x34>
            rc = BOOT_EFLASH;
   1d02c:	2401      	movs	r4, #1
   1d02e:	e7f5      	b.n	1d01c <boot_set_pending+0x20>
            rc = boot_write_magic(fap);
   1d030:	9800      	ldr	r0, [sp, #0]
   1d032:	f7ff ff81 	bl	1cf38 <boot_write_magic>
        if (rc == 0 && permanent) {
   1d036:	4604      	mov	r4, r0
   1d038:	2800      	cmp	r0, #0
   1d03a:	d1ef      	bne.n	1d01c <boot_set_pending+0x20>
            rc = boot_write_image_ok(fap);
   1d03c:	9800      	ldr	r0, [sp, #0]
        if (rc == 0 && permanent) {
   1d03e:	b156      	cbz	r6, 1d056 <boot_set_pending+0x5a>
            rc = boot_write_image_ok(fap);
   1d040:	f7ff ff88 	bl	1cf54 <boot_write_image_ok>
        if (rc == 0) {
   1d044:	4604      	mov	r4, r0
   1d046:	2800      	cmp	r0, #0
   1d048:	d1e8      	bne.n	1d01c <boot_set_pending+0x20>
            rc = boot_write_swap_type(fap, swap_type);
   1d04a:	9800      	ldr	r0, [sp, #0]
   1d04c:	4629      	mov	r1, r5
   1d04e:	f7ff ff86 	bl	1cf5e <boot_write_swap_type>
   1d052:	4604      	mov	r4, r0
   1d054:	e7e2      	b.n	1d01c <boot_set_pending+0x20>
                swap_type = BOOT_SWAP_TYPE_TEST;
   1d056:	2502      	movs	r5, #2
   1d058:	e7f7      	b.n	1d04a <boot_set_pending+0x4e>
        rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY, &fap);
   1d05a:	4669      	mov	r1, sp
   1d05c:	4628      	mov	r0, r5
   1d05e:	f7fe fb7f 	bl	1b760 <flash_area_open>
        if (rc != 0) {
   1d062:	2800      	cmp	r0, #0
   1d064:	d1e2      	bne.n	1d02c <boot_set_pending+0x30>
        flash_area_erase(fap, 0, fap->fa_size);
   1d066:	9800      	ldr	r0, [sp, #0]
   1d068:	4621      	mov	r1, r4
   1d06a:	6882      	ldr	r2, [r0, #8]
   1d06c:	f7fe fbf4 	bl	1b858 <flash_area_erase>
        return BOOT_EBADIMAGE;
   1d070:	2403      	movs	r4, #3
   1d072:	e7d3      	b.n	1d01c <boot_set_pending+0x20>
        assert(0);
   1d074:	4603      	mov	r3, r0
   1d076:	4602      	mov	r2, r0
   1d078:	4601      	mov	r1, r0
   1d07a:	f7ef fbbf 	bl	c7fc <__assert_func>

0001d07e <boot_set_confirmed>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_confirmed(void)
{
   1d07e:	b507      	push	{r0, r1, r2, lr}
    switch (flash_area_id) {
   1d080:	2001      	movs	r0, #1
   1d082:	a901      	add	r1, sp, #4
   1d084:	f7ff ff48 	bl	1cf18 <boot_read_swap_state_by_id.part.0>
    struct boot_swap_state state_primary_slot;
    int rc;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY,
                                    &state_primary_slot);
    if (rc != 0) {
   1d088:	b9a8      	cbnz	r0, 1d0b6 <boot_set_confirmed+0x38>
        return rc;
    }

    switch (state_primary_slot.magic) {
   1d08a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1d08e:	2b02      	cmp	r3, #2
   1d090:	d016      	beq.n	1d0c0 <boot_set_confirmed+0x42>
   1d092:	2b03      	cmp	r3, #3
   1d094:	d00f      	beq.n	1d0b6 <boot_set_confirmed+0x38>
    case BOOT_MAGIC_BAD:
        /* Unexpected state. */
        return BOOT_EBADVECT;
    }

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY, &fap);
   1d096:	4669      	mov	r1, sp
   1d098:	2001      	movs	r0, #1
   1d09a:	f7fe fb61 	bl	1b760 <flash_area_open>
    if (rc) {
   1d09e:	b968      	cbnz	r0, 1d0bc <boot_set_confirmed+0x3e>
        rc = BOOT_EFLASH;
        goto done;
    }

    if (state_primary_slot.copy_done == BOOT_FLAG_UNSET) {
   1d0a0:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1d0a4:	2b03      	cmp	r3, #3
   1d0a6:	d00b      	beq.n	1d0c0 <boot_set_confirmed+0x42>
        /* Swap never completed.  This is unexpected. */
        rc = BOOT_EBADVECT;
        goto done;
    }

    if (state_primary_slot.image_ok != BOOT_FLAG_UNSET) {
   1d0a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1d0ac:	2b03      	cmp	r3, #3
   1d0ae:	d102      	bne.n	1d0b6 <boot_set_confirmed+0x38>
        /* Already confirmed. */
        goto done;
    }

    rc = boot_write_image_ok(fap);
   1d0b0:	9800      	ldr	r0, [sp, #0]
   1d0b2:	f7ff ff4f 	bl	1cf54 <boot_write_image_ok>

done:
    flash_area_close(fap);
    return rc;
}
   1d0b6:	b003      	add	sp, #12
   1d0b8:	f85d fb04 	ldr.w	pc, [sp], #4
        rc = BOOT_EFLASH;
   1d0bc:	2001      	movs	r0, #1
   1d0be:	e7fa      	b.n	1d0b6 <boot_set_confirmed+0x38>
        rc = BOOT_EBADVECT;
   1d0c0:	2004      	movs	r0, #4
   1d0c2:	e7f8      	b.n	1d0b6 <boot_set_confirmed+0x38>

0001d0c4 <boot_read_image_headers>:
    return rc;
}

static int
boot_read_image_headers(bool require_all)
{
   1d0c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1d0c6:	4e11      	ldr	r6, [pc, #68]	; (1d10c <boot_read_image_headers+0x48>)
   1d0c8:	4605      	mov	r5, r0
    int rc;
    int i;

    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
   1d0ca:	2400      	movs	r4, #0
    area_id = flash_area_id_from_image_slot(slot);
   1d0cc:	4620      	mov	r0, r4
   1d0ce:	f7fe fbf7 	bl	1b8c0 <flash_area_id_from_image_slot>
    rc = flash_area_open(area_id, &fap);
   1d0d2:	a901      	add	r1, sp, #4
   1d0d4:	b2c0      	uxtb	r0, r0
   1d0d6:	f7fe fb43 	bl	1b760 <flash_area_open>
    if (rc != 0) {
   1d0da:	4601      	mov	r1, r0
   1d0dc:	b130      	cbz	r0, 1d0ec <boot_read_image_headers+0x28>
             * if at least the first slot's header was read successfully,
             * then the boot loader can attempt a boot.
             *
             * Failure to read any headers is a fatal error.
             */
            if (i > 0 && !require_all) {
   1d0de:	b98c      	cbnz	r4, 1d104 <boot_read_image_headers+0x40>
   1d0e0:	2401      	movs	r4, #1
            }
        }
    }

    return 0;
}
   1d0e2:	4620      	mov	r0, r4
   1d0e4:	b002      	add	sp, #8
   1d0e6:	bd70      	pop	{r4, r5, r6, pc}
   1d0e8:	2401      	movs	r4, #1
   1d0ea:	e7ef      	b.n	1d0cc <boot_read_image_headers+0x8>
    rc = flash_area_read(fap, 0, out_hdr, sizeof *out_hdr);
   1d0ec:	9801      	ldr	r0, [sp, #4]
   1d0ee:	2320      	movs	r3, #32
   1d0f0:	4632      	mov	r2, r6
   1d0f2:	f7fe fb8d 	bl	1b810 <flash_area_read>
    if (rc != 0) {
   1d0f6:	2800      	cmp	r0, #0
   1d0f8:	d1f1      	bne.n	1d0de <boot_read_image_headers+0x1a>
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
   1d0fa:	362c      	adds	r6, #44	; 0x2c
   1d0fc:	2c00      	cmp	r4, #0
   1d0fe:	d0f3      	beq.n	1d0e8 <boot_read_image_headers+0x24>
    return 0;
   1d100:	2400      	movs	r4, #0
   1d102:	e7ee      	b.n	1d0e2 <boot_read_image_headers+0x1e>
            if (i > 0 && !require_all) {
   1d104:	2d00      	cmp	r5, #0
   1d106:	d0fb      	beq.n	1d100 <boot_read_image_headers+0x3c>
   1d108:	e7eb      	b.n	1d0e2 <boot_read_image_headers+0x1e>
   1d10a:	bf00      	nop
   1d10c:	200073ac 	.word	0x200073ac

0001d110 <boot_read_sectors>:
 * and copy during an image swap.  The information collected during this
 * function is used to populate the boot_data global.
 */
static int
boot_read_sectors(void)
{
   1d110:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int rc;

    switch (flash_area) {
    case FLASH_AREA_IMAGE_PRIMARY:
        rc = flash_area_to_sectors(flash_area, &num_sectors,
                                   state->imgs[BOOT_PRIMARY_SLOT].sectors);
   1d112:	4c18      	ldr	r4, [pc, #96]	; (1d174 <boot_read_sectors+0x64>)
    int num_sectors = BOOT_MAX_IMG_SECTORS;
   1d114:	2580      	movs	r5, #128	; 0x80
        rc = flash_area_to_sectors(flash_area, &num_sectors,
   1d116:	6a62      	ldr	r2, [r4, #36]	; 0x24
    int num_sectors = BOOT_MAX_IMG_SECTORS;
   1d118:	9501      	str	r5, [sp, #4]
        rc = flash_area_to_sectors(flash_area, &num_sectors,
   1d11a:	a901      	add	r1, sp, #4
   1d11c:	2001      	movs	r0, #1
   1d11e:	f7fe fb3d 	bl	1b79c <flash_area_to_sectors>
        state->imgs[BOOT_PRIMARY_SLOT].num_sectors = (size_t)num_sectors;
   1d122:	9b01      	ldr	r3, [sp, #4]
   1d124:	62a3      	str	r3, [r4, #40]	; 0x28
    int rc;

    rc = boot_initialize_area(&boot_data, FLASH_AREA_IMAGE_PRIMARY);
    if (rc != 0) {
   1d126:	b118      	cbz	r0, 1d130 <boot_read_sectors+0x20>
        return BOOT_EFLASH;
   1d128:	2501      	movs	r5, #1
    }

    BOOT_WRITE_SZ(&boot_data) = boot_write_sz();

    return 0;
}
   1d12a:	4628      	mov	r0, r5
   1d12c:	b002      	add	sp, #8
   1d12e:	bd70      	pop	{r4, r5, r6, pc}
        break;
    case FLASH_AREA_IMAGE_SECONDARY:
        rc = flash_area_to_sectors(flash_area, &num_sectors,
   1d130:	6d22      	ldr	r2, [r4, #80]	; 0x50
    int num_sectors = BOOT_MAX_IMG_SECTORS;
   1d132:	9501      	str	r5, [sp, #4]
        rc = flash_area_to_sectors(flash_area, &num_sectors,
   1d134:	a901      	add	r1, sp, #4
   1d136:	2002      	movs	r0, #2
   1d138:	f7fe fb30 	bl	1b79c <flash_area_to_sectors>
                                   state->imgs[BOOT_SECONDARY_SLOT].sectors);
        state->imgs[BOOT_SECONDARY_SLOT].num_sectors = (size_t)num_sectors;
   1d13c:	9b01      	ldr	r3, [sp, #4]
   1d13e:	6563      	str	r3, [r4, #84]	; 0x54
    if (rc != 0) {
   1d140:	2800      	cmp	r0, #0
   1d142:	d1f1      	bne.n	1d128 <boot_read_sectors+0x18>
        break;
    case FLASH_AREA_IMAGE_SCRATCH:
        rc = flash_area_to_sectors(flash_area, &num_sectors,
   1d144:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    int num_sectors = BOOT_MAX_IMG_SECTORS;
   1d146:	9501      	str	r5, [sp, #4]
        rc = flash_area_to_sectors(flash_area, &num_sectors,
   1d148:	a901      	add	r1, sp, #4
   1d14a:	2003      	movs	r0, #3
   1d14c:	f7fe fb26 	bl	1b79c <flash_area_to_sectors>
                                   state->scratch.sectors);
        state->scratch.num_sectors = (size_t)num_sectors;
   1d150:	9b01      	ldr	r3, [sp, #4]
   1d152:	6623      	str	r3, [r4, #96]	; 0x60
    if (rc != 0) {
   1d154:	4605      	mov	r5, r0
   1d156:	2800      	cmp	r0, #0
   1d158:	d1e6      	bne.n	1d128 <boot_read_sectors+0x18>
    elem_sz = flash_area_align(boot_data.imgs[BOOT_PRIMARY_SLOT].area);
   1d15a:	6a20      	ldr	r0, [r4, #32]
   1d15c:	f7fe fb90 	bl	1b880 <flash_area_align>
   1d160:	4606      	mov	r6, r0
    align = flash_area_align(boot_data.scratch.area);
   1d162:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1d164:	f7fe fb8c 	bl	1b880 <flash_area_align>
    BOOT_WRITE_SZ(&boot_data) = boot_write_sz();
   1d168:	42b0      	cmp	r0, r6
   1d16a:	bf38      	it	cc
   1d16c:	4630      	movcc	r0, r6
   1d16e:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
    return 0;
   1d172:	e7da      	b.n	1d12a <boot_read_sectors+0x1a>
   1d174:	200073ac 	.word	0x200073ac

0001d178 <split_go>:
    return rc;
}

int
split_go(int loader_slot, int split_slot, void **entry)
{
   1d178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d17c:	b08f      	sub	sp, #60	; 0x3c
   1d17e:	4683      	mov	fp, r0
    uintptr_t entry_val;
    int loader_flash_id;
    int split_flash_id;
    int rc;

    sectors = malloc(BOOT_MAX_IMG_SECTORS * 2 * sizeof *sectors);
   1d180:	f44f 6040 	mov.w	r0, #3072	; 0xc00
{
   1d184:	4688      	mov	r8, r1
   1d186:	9204      	str	r2, [sp, #16]
    sectors = malloc(BOOT_MAX_IMG_SECTORS * 2 * sizeof *sectors);
   1d188:	f000 ff4a 	bl	1e020 <os_malloc>
    if (sectors == NULL) {
   1d18c:	4605      	mov	r5, r0
   1d18e:	2800      	cmp	r0, #0
   1d190:	d078      	beq.n	1d284 <split_go+0x10c>
        return SPLIT_GO_ERR;
    }
    boot_data.imgs[loader_slot].sectors = sectors + 0;
   1d192:	4c3e      	ldr	r4, [pc, #248]	; (1d28c <split_go+0x114>)
   1d194:	262c      	movs	r6, #44	; 0x2c
   1d196:	fb06 f70b 	mul.w	r7, r6, fp
    boot_data.imgs[split_slot].sectors = sectors + BOOT_MAX_IMG_SECTORS;
   1d19a:	fb06 f608 	mul.w	r6, r6, r8
    boot_data.imgs[loader_slot].sectors = sectors + 0;
   1d19e:	eb04 0a07 	add.w	sl, r4, r7
    boot_data.imgs[split_slot].sectors = sectors + BOOT_MAX_IMG_SECTORS;
   1d1a2:	eb04 0906 	add.w	r9, r4, r6
   1d1a6:	f500 63c0 	add.w	r3, r0, #1536	; 0x600
    boot_data.imgs[loader_slot].sectors = sectors + 0;
   1d1aa:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
    boot_data.imgs[split_slot].sectors = sectors + BOOT_MAX_IMG_SECTORS;
   1d1ae:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24

    loader_flash_id = flash_area_id_from_image_slot(loader_slot);
   1d1b2:	4658      	mov	r0, fp
   1d1b4:	f7fe fb84 	bl	1b8c0 <flash_area_id_from_image_slot>
    rc = flash_area_open(loader_flash_id,
   1d1b8:	f107 0120 	add.w	r1, r7, #32
   1d1bc:	4421      	add	r1, r4
   1d1be:	b2c0      	uxtb	r0, r0
   1d1c0:	f7fe face 	bl	1b760 <flash_area_open>
                         &BOOT_IMG_AREA(&boot_data, loader_slot));
    assert(rc == 0);
   1d1c4:	b128      	cbz	r0, 1d1d2 <split_go+0x5a>
   1d1c6:	2300      	movs	r3, #0
   1d1c8:	461a      	mov	r2, r3
   1d1ca:	4619      	mov	r1, r3
   1d1cc:	4618      	mov	r0, r3
   1d1ce:	f7ef fb15 	bl	c7fc <__assert_func>
    split_flash_id = flash_area_id_from_image_slot(split_slot);
   1d1d2:	4640      	mov	r0, r8
   1d1d4:	f7fe fb74 	bl	1b8c0 <flash_area_id_from_image_slot>
    rc = flash_area_open(split_flash_id,
   1d1d8:	f106 0120 	add.w	r1, r6, #32
   1d1dc:	4421      	add	r1, r4
   1d1de:	b2c0      	uxtb	r0, r0
   1d1e0:	f7fe fabe 	bl	1b760 <flash_area_open>
                         &BOOT_IMG_AREA(&boot_data, split_slot));
    assert(rc == 0);
   1d1e4:	2800      	cmp	r0, #0
   1d1e6:	d1ee      	bne.n	1d1c6 <split_go+0x4e>

    /* Determine the sector layout of the image slots and scratch area. */
    rc = boot_read_sectors();
   1d1e8:	f7ff ff92 	bl	1d110 <boot_read_sectors>
    if (rc != 0) {
   1d1ec:	2800      	cmp	r0, #0
   1d1ee:	d146      	bne.n	1d27e <split_go+0x106>
        rc = SPLIT_GO_ERR;
        goto done;
    }

    rc = boot_read_image_headers(true);
   1d1f0:	2001      	movs	r0, #1
   1d1f2:	f7ff ff67 	bl	1d0c4 <boot_read_image_headers>
    if (rc != 0) {
   1d1f6:	4607      	mov	r7, r0
   1d1f8:	b998      	cbnz	r0, 1d222 <split_go+0xaa>

    /* Don't check the bootable image flag because we could really call a
     * bootable or non-bootable image.  Just validate that the image check
     * passes which is distinct from the normal check.
     */
    rc = split_image_check(boot_img_hdr(&boot_data, split_slot),
   1d1fa:	f8d9 b020 	ldr.w	fp, [r9, #32]
    if (!tmpbuf) {
   1d1fe:	f8df 9090 	ldr.w	r9, [pc, #144]	; 1d290 <split_go+0x118>
    rc = split_image_check(boot_img_hdr(&boot_data, split_slot),
   1d202:	f8da 1020 	ldr.w	r1, [sl, #32]
    if (!tmpbuf) {
   1d206:	f8d9 3000 	ldr.w	r3, [r9]
   1d20a:	b98b      	cbnz	r3, 1d230 <split_go+0xb8>
        tmpbuf = malloc(BOOT_TMPBUF_SZ);
   1d20c:	f44f 7080 	mov.w	r0, #256	; 0x100
   1d210:	9105      	str	r1, [sp, #20]
   1d212:	f000 ff05 	bl	1e020 <os_malloc>
        if (!tmpbuf) {
   1d216:	9905      	ldr	r1, [sp, #20]
        tmpbuf = malloc(BOOT_TMPBUF_SZ);
   1d218:	f8c9 0000 	str.w	r0, [r9]
        if (!tmpbuf) {
   1d21c:	b940      	cbnz	r0, 1d230 <split_go+0xb8>
                           BOOT_IMG_AREA(&boot_data, split_slot),
                           boot_img_hdr(&boot_data, loader_slot),
                           BOOT_IMG_AREA(&boot_data, loader_slot));
    if (rc != 0) {
        rc = SPLIT_GO_NON_MATCHING;
   1d21e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    rc = SPLIT_GO_OK;

done:
    flash_area_close(BOOT_IMG_AREA(&boot_data, split_slot));
    flash_area_close(BOOT_IMG_AREA(&boot_data, loader_slot));
    free(sectors);
   1d222:	4628      	mov	r0, r5
   1d224:	f000 ff0a 	bl	1e03c <os_free>
    return rc;
}
   1d228:	4638      	mov	r0, r7
   1d22a:	b00f      	add	sp, #60	; 0x3c
   1d22c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (bootutil_img_validate(loader_hdr, loader_fap, tmpbuf, BOOT_TMPBUF_SZ,
   1d230:	2300      	movs	r3, #0
   1d232:	e9cd 3300 	strd	r3, r3, [sp]
   1d236:	af06      	add	r7, sp, #24
   1d238:	9702      	str	r7, [sp, #8]
   1d23a:	f8d9 2000 	ldr.w	r2, [r9]
   1d23e:	f44f 7380 	mov.w	r3, #256	; 0x100
   1d242:	4650      	mov	r0, sl
   1d244:	f000 f826 	bl	1d294 <bootutil_img_validate>
   1d248:	2800      	cmp	r0, #0
   1d24a:	d1e8      	bne.n	1d21e <split_go+0xa6>
    if (bootutil_img_validate(app_hdr, app_fap, tmpbuf, BOOT_TMPBUF_SZ,
   1d24c:	2320      	movs	r3, #32
   1d24e:	e9cd 7300 	strd	r7, r3, [sp]
   1d252:	9002      	str	r0, [sp, #8]
   1d254:	f8d9 2000 	ldr.w	r2, [r9]
   1d258:	f44f 7380 	mov.w	r3, #256	; 0x100
   1d25c:	4659      	mov	r1, fp
   1d25e:	19a0      	adds	r0, r4, r6
   1d260:	f000 f818 	bl	1d294 <bootutil_img_validate>
   1d264:	4607      	mov	r7, r0
   1d266:	2800      	cmp	r0, #0
   1d268:	d1d9      	bne.n	1d21e <split_go+0xa6>
    return state->imgs[slot].area->fa_off;
   1d26a:	212c      	movs	r1, #44	; 0x2c
   1d26c:	fb01 4408 	mla	r4, r1, r8, r4
   1d270:	6a23      	ldr	r3, [r4, #32]
                boot_img_hdr(&boot_data, split_slot)->ih_hdr_size;
   1d272:	8922      	ldrh	r2, [r4, #8]
    entry_val = boot_img_slot_off(&boot_data, split_slot) +
   1d274:	685b      	ldr	r3, [r3, #4]
   1d276:	4413      	add	r3, r2
    *entry = (void *) entry_val;
   1d278:	9a04      	ldr	r2, [sp, #16]
   1d27a:	6013      	str	r3, [r2, #0]
    rc = SPLIT_GO_OK;
   1d27c:	e7d1      	b.n	1d222 <split_go+0xaa>
        rc = SPLIT_GO_ERR;
   1d27e:	f06f 0701 	mvn.w	r7, #1
   1d282:	e7ce      	b.n	1d222 <split_go+0xaa>
        return SPLIT_GO_ERR;
   1d284:	f06f 0701 	mvn.w	r7, #1
   1d288:	e7ce      	b.n	1d228 <split_go+0xb0>
   1d28a:	bf00      	nop
   1d28c:	200073ac 	.word	0x200073ac
   1d290:	20007414 	.word	0x20007414

0001d294 <bootutil_img_validate>:
 */
int
bootutil_img_validate(struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz,
                      uint8_t *seed, int seed_len, uint8_t *out_hash)
{
   1d294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d298:	b0a7      	sub	sp, #156	; 0x9c
   1d29a:	e9dd 5930 	ldrd	r5, r9, [sp, #192]	; 0xc0
#ifdef MCUBOOT_USE_MBED_TLS
typedef mbedtls_sha256_context bootutil_sha256_context;

static inline void bootutil_sha256_init(bootutil_sha256_context *ctx)
{
    mbedtls_sha256_init(ctx);
   1d29e:	ac0b      	add	r4, sp, #44	; 0x2c
   1d2a0:	4607      	mov	r7, r0
   1d2a2:	4620      	mov	r0, r4
   1d2a4:	460e      	mov	r6, r1
   1d2a6:	4692      	mov	sl, r2
   1d2a8:	469b      	mov	fp, r3
   1d2aa:	f000 f881 	bl	1d3b0 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
   1d2ae:	2100      	movs	r1, #0
   1d2b0:	4620      	mov	r0, r4
   1d2b2:	f000 f881 	bl	1d3b8 <mbedtls_sha256_starts_ret>
    if (seed && (seed_len > 0)) {
   1d2b6:	b13d      	cbz	r5, 1d2c8 <bootutil_img_validate+0x34>
   1d2b8:	f1b9 0f00 	cmp.w	r9, #0
   1d2bc:	dd04      	ble.n	1d2c8 <bootutil_img_validate+0x34>

static inline void bootutil_sha256_update(bootutil_sha256_context *ctx,
                                          const void *data,
                                          uint32_t data_len)
{
    (void)mbedtls_sha256_update_ret(ctx, data, data_len);
   1d2be:	464a      	mov	r2, r9
   1d2c0:	4629      	mov	r1, r5
   1d2c2:	4620      	mov	r0, r4
   1d2c4:	f000 f968 	bl	1d598 <mbedtls_sha256_update_ret>
    size = hdr->ih_img_size + hdr_size;
   1d2c8:	f8b7 9008 	ldrh.w	r9, [r7, #8]
   1d2cc:	68fb      	ldr	r3, [r7, #12]
    for (off = 0; off < size; off += blk_sz) {
   1d2ce:	f04f 0800 	mov.w	r8, #0
    size = hdr->ih_img_size + hdr_size;
   1d2d2:	4499      	add	r9, r3
    for (off = 0; off < size; off += blk_sz) {
   1d2d4:	45c1      	cmp	r9, r8
   1d2d6:	d826      	bhi.n	1d326 <bootutil_img_validate+0x92>
}

static inline void bootutil_sha256_finish(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    (void)mbedtls_sha256_finish_ret(ctx, output);
   1d2d8:	a903      	add	r1, sp, #12
   1d2da:	4620      	mov	r0, r4
   1d2dc:	f000 f999 	bl	1d612 <mbedtls_sha256_finish_ret>
    rc = bootutil_img_hash(hdr, fap, tmp_buf, tmp_buf_sz, hash, seed, seed_len);
    if (rc) {
        return rc;
    }

    if (out_hash) {
   1d2e0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
   1d2e2:	b153      	cbz	r3, 1d2fa <bootutil_img_validate+0x66>
        memcpy(out_hash, hash, 32);
   1d2e4:	aa03      	add	r2, sp, #12
   1d2e6:	461d      	mov	r5, r3
   1d2e8:	4613      	mov	r3, r2
   1d2ea:	cb03      	ldmia	r3!, {r0, r1}
   1d2ec:	42a3      	cmp	r3, r4
   1d2ee:	6028      	str	r0, [r5, #0]
   1d2f0:	6069      	str	r1, [r5, #4]
   1d2f2:	461a      	mov	r2, r3
   1d2f4:	f105 0508 	add.w	r5, r5, #8
   1d2f8:	d1f6      	bne.n	1d2e8 <bootutil_img_validate+0x54>
    }

    /* The TLVs come after the image. */
    /* After image there are TLVs. */
    off = hdr->ih_img_size + hdr->ih_hdr_size;
   1d2fa:	68f9      	ldr	r1, [r7, #12]
   1d2fc:	893d      	ldrh	r5, [r7, #8]

    rc = flash_area_read(fap, off, &info, sizeof(info));
   1d2fe:	2304      	movs	r3, #4
    off = hdr->ih_img_size + hdr->ih_hdr_size;
   1d300:	440d      	add	r5, r1
    rc = flash_area_read(fap, off, &info, sizeof(info));
   1d302:	eb0d 0203 	add.w	r2, sp, r3
   1d306:	4629      	mov	r1, r5
   1d308:	4630      	mov	r0, r6
   1d30a:	f7fe fa81 	bl	1b810 <flash_area_read>
    if (rc) {
   1d30e:	b938      	cbnz	r0, 1d320 <bootutil_img_validate+0x8c>
        return rc;
    }
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
   1d310:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1d314:	f646 1307 	movw	r3, #26887	; 0x6907
   1d318:	429a      	cmp	r2, r3
   1d31a:	d018      	beq.n	1d34e <bootutil_img_validate+0xba>
        return -1;
   1d31c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return -1;
    }
#endif

    return 0;
}
   1d320:	b027      	add	sp, #156	; 0x9c
   1d322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        blk_sz = size - off;
   1d326:	eba9 0308 	sub.w	r3, r9, r8
        if (blk_sz > tmp_buf_sz) {
   1d32a:	455b      	cmp	r3, fp
   1d32c:	bf28      	it	cs
   1d32e:	465b      	movcs	r3, fp
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
   1d330:	4652      	mov	r2, sl
   1d332:	4641      	mov	r1, r8
   1d334:	4630      	mov	r0, r6
   1d336:	461d      	mov	r5, r3
   1d338:	f7fe fa6a 	bl	1b810 <flash_area_read>
        if (rc) {
   1d33c:	2800      	cmp	r0, #0
   1d33e:	d1ef      	bne.n	1d320 <bootutil_img_validate+0x8c>
    (void)mbedtls_sha256_update_ret(ctx, data, data_len);
   1d340:	462a      	mov	r2, r5
   1d342:	4651      	mov	r1, sl
   1d344:	4620      	mov	r0, r4
   1d346:	f000 f927 	bl	1d598 <mbedtls_sha256_update_ret>
    for (off = 0; off < size; off += blk_sz) {
   1d34a:	44a8      	add	r8, r5
   1d34c:	e7c2      	b.n	1d2d4 <bootutil_img_validate+0x40>
    end = off + info.it_tlv_tot;
   1d34e:	f8bd 7006 	ldrh.w	r7, [sp, #6]
    int sha256_valid = 0;
   1d352:	4680      	mov	r8, r0
    end = off + info.it_tlv_tot;
   1d354:	442f      	add	r7, r5
    off += sizeof(info);
   1d356:	3504      	adds	r5, #4
    for (; off < end; off += sizeof(tlv) + tlv.it_len) {
   1d358:	42bd      	cmp	r5, r7
   1d35a:	d302      	bcc.n	1d362 <bootutil_img_validate+0xce>
    if (!sha256_valid) {
   1d35c:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
   1d360:	e7de      	b.n	1d320 <bootutil_img_validate+0x8c>
        rc = flash_area_read(fap, off, &tlv, sizeof tlv);
   1d362:	2304      	movs	r3, #4
   1d364:	aa02      	add	r2, sp, #8
   1d366:	4629      	mov	r1, r5
   1d368:	4630      	mov	r0, r6
   1d36a:	f7fe fa51 	bl	1b810 <flash_area_read>
        if (rc) {
   1d36e:	2800      	cmp	r0, #0
   1d370:	d1d6      	bne.n	1d320 <bootutil_img_validate+0x8c>
        if (tlv.it_type == IMAGE_TLV_SHA256) {
   1d372:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1d376:	2b10      	cmp	r3, #16
   1d378:	d115      	bne.n	1d3a6 <bootutil_img_validate+0x112>
            if (tlv.it_len != sizeof(hash)) {
   1d37a:	f8bd 800a 	ldrh.w	r8, [sp, #10]
   1d37e:	f1b8 0f20 	cmp.w	r8, #32
   1d382:	d1cb      	bne.n	1d31c <bootutil_img_validate+0x88>
            rc = flash_area_read(fap, off + sizeof(tlv), buf, sizeof hash);
   1d384:	4643      	mov	r3, r8
   1d386:	4622      	mov	r2, r4
   1d388:	1d29      	adds	r1, r5, #4
   1d38a:	4630      	mov	r0, r6
   1d38c:	f7fe fa40 	bl	1b810 <flash_area_read>
            if (rc) {
   1d390:	2800      	cmp	r0, #0
   1d392:	d1c5      	bne.n	1d320 <bootutil_img_validate+0x8c>
            if (memcmp(hash, buf, sizeof(hash))) {
   1d394:	4642      	mov	r2, r8
   1d396:	4621      	mov	r1, r4
   1d398:	a803      	add	r0, sp, #12
   1d39a:	f7f2 ff45 	bl	10228 <memcmp>
   1d39e:	2800      	cmp	r0, #0
   1d3a0:	d1bc      	bne.n	1d31c <bootutil_img_validate+0x88>
            sha256_valid = 1;
   1d3a2:	f04f 0801 	mov.w	r8, #1
    for (; off < end; off += sizeof(tlv) + tlv.it_len) {
   1d3a6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1d3aa:	3304      	adds	r3, #4
   1d3ac:	441d      	add	r5, r3
   1d3ae:	e7d3      	b.n	1d358 <bootutil_img_validate+0xc4>

0001d3b0 <mbedtls_sha256_init>:
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
   1d3b0:	226c      	movs	r2, #108	; 0x6c
   1d3b2:	2100      	movs	r1, #0
   1d3b4:	f7f2 bf69 	b.w	1028a <memset>

0001d3b8 <mbedtls_sha256_starts_ret>:
/*
 * SHA-256 context setup
 */
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    ctx->total[0] = 0;
   1d3b8:	2300      	movs	r3, #0
    ctx->total[1] = 0;
   1d3ba:	e9c0 3300 	strd	r3, r3, [r0]

    if( is224 == 0 )
   1d3be:	b9c1      	cbnz	r1, 1d3f2 <mbedtls_sha256_starts_ret+0x3a>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
        ctx->state[1] = 0xBB67AE85;
   1d3c0:	4a19      	ldr	r2, [pc, #100]	; (1d428 <mbedtls_sha256_starts_ret+0x70>)
   1d3c2:	4b1a      	ldr	r3, [pc, #104]	; (1d42c <mbedtls_sha256_starts_ret+0x74>)
        ctx->state[2] = 0x3C6EF372;
        ctx->state[3] = 0xA54FF53A;
   1d3c4:	f8df c08c 	ldr.w	ip, [pc, #140]	; 1d454 <mbedtls_sha256_starts_ret+0x9c>
        ctx->state[1] = 0xBB67AE85;
   1d3c8:	e9c0 2302 	strd	r2, r3, [r0, #8]
        ctx->state[3] = 0xA54FF53A;
   1d3cc:	4b18      	ldr	r3, [pc, #96]	; (1d430 <mbedtls_sha256_starts_ret+0x78>)
        ctx->state[4] = 0x510E527F;
        ctx->state[5] = 0x9B05688C;
   1d3ce:	4a19      	ldr	r2, [pc, #100]	; (1d434 <mbedtls_sha256_starts_ret+0x7c>)
        ctx->state[3] = 0xA54FF53A;
   1d3d0:	e9c0 c304 	strd	ip, r3, [r0, #16]
        ctx->state[5] = 0x9B05688C;
   1d3d4:	4b18      	ldr	r3, [pc, #96]	; (1d438 <mbedtls_sha256_starts_ret+0x80>)
   1d3d6:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[6] = 0x1F83D9AB;
   1d3da:	4b18      	ldr	r3, [pc, #96]	; (1d43c <mbedtls_sha256_starts_ret+0x84>)
   1d3dc:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
   1d3de:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
   1d3e2:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
   1d3e6:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
        ctx->state[2] = 0x3070DD17;
        ctx->state[3] = 0xF70E5939;
        ctx->state[4] = 0xFFC00B31;
        ctx->state[5] = 0x68581511;
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
   1d3ea:	6243      	str	r3, [r0, #36]	; 0x24
    }

    ctx->is224 = is224;
   1d3ec:	6681      	str	r1, [r0, #104]	; 0x68

    return( 0 );
}
   1d3ee:	2000      	movs	r0, #0
   1d3f0:	4770      	bx	lr
        ctx->state[1] = 0x367CD507;
   1d3f2:	4b13      	ldr	r3, [pc, #76]	; (1d440 <mbedtls_sha256_starts_ret+0x88>)
   1d3f4:	4a13      	ldr	r2, [pc, #76]	; (1d444 <mbedtls_sha256_starts_ret+0x8c>)
        ctx->state[4] = 0xFFC00B31;
   1d3f6:	f8df c060 	ldr.w	ip, [pc, #96]	; 1d458 <mbedtls_sha256_starts_ret+0xa0>
        ctx->state[1] = 0x367CD507;
   1d3fa:	e9c0 2302 	strd	r2, r3, [r0, #8]
        ctx->state[2] = 0x3070DD17;
   1d3fe:	f103 4379 	add.w	r3, r3, #4177526784	; 0xf9000000
   1d402:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
   1d406:	f503 6301 	add.w	r3, r3, #2064	; 0x810
   1d40a:	6103      	str	r3, [r0, #16]
        ctx->state[4] = 0xFFC00B31;
   1d40c:	4b0e      	ldr	r3, [pc, #56]	; (1d448 <mbedtls_sha256_starts_ret+0x90>)
   1d40e:	e9c0 c305 	strd	ip, r3, [r0, #20]
        ctx->state[5] = 0x68581511;
   1d412:	f103 43d1 	add.w	r3, r3, #1753219072	; 0x68800000
   1d416:	f503 13c0 	add.w	r3, r3, #1572864	; 0x180000
   1d41a:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
   1d41e:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
   1d420:	4b0a      	ldr	r3, [pc, #40]	; (1d44c <mbedtls_sha256_starts_ret+0x94>)
   1d422:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
   1d424:	4b0a      	ldr	r3, [pc, #40]	; (1d450 <mbedtls_sha256_starts_ret+0x98>)
   1d426:	e7e0      	b.n	1d3ea <mbedtls_sha256_starts_ret+0x32>
   1d428:	6a09e667 	.word	0x6a09e667
   1d42c:	bb67ae85 	.word	0xbb67ae85
   1d430:	a54ff53a 	.word	0xa54ff53a
   1d434:	510e527f 	.word	0x510e527f
   1d438:	9b05688c 	.word	0x9b05688c
   1d43c:	1f83d9ab 	.word	0x1f83d9ab
   1d440:	367cd507 	.word	0x367cd507
   1d444:	c1059ed8 	.word	0xc1059ed8
   1d448:	ffc00b31 	.word	0xffc00b31
   1d44c:	64f98fa7 	.word	0x64f98fa7
   1d450:	befa4fa4 	.word	0xbefa4fa4
   1d454:	3c6ef372 	.word	0x3c6ef372
   1d458:	f70e5939 	.word	0xf70e5939

0001d45c <mbedtls_internal_sha256_process>:
    d += temp1; h = temp1 + temp2;              \
}

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
   1d45c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d460:	4602      	mov	r2, r0
   1d462:	b0cd      	sub	sp, #308	; 0x134
   1d464:	3208      	adds	r2, #8
   1d466:	9000      	str	r0, [sp, #0]
   1d468:	460b      	mov	r3, r1
   1d46a:	9203      	str	r2, [sp, #12]
    uint32_t temp1, temp2, W[64];
    uint32_t A[8];
    unsigned int i;

    for( i = 0; i < 8; i++ )
        A[i] = ctx->state[i];
   1d46c:	ad04      	add	r5, sp, #16
   1d46e:	f100 0628 	add.w	r6, r0, #40	; 0x28
   1d472:	6810      	ldr	r0, [r2, #0]
   1d474:	6851      	ldr	r1, [r2, #4]
   1d476:	462c      	mov	r4, r5
   1d478:	c403      	stmia	r4!, {r0, r1}
   1d47a:	3208      	adds	r2, #8
   1d47c:	42b2      	cmp	r2, r6
   1d47e:	4625      	mov	r5, r4
   1d480:	d1f7      	bne.n	1d472 <mbedtls_internal_sha256_process+0x16>
   1d482:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1d484:	9201      	str	r2, [sp, #4]
   1d486:	e9dd 8709 	ldrd	r8, r7, [sp, #36]	; 0x24
   1d48a:	e9dd 0604 	ldrd	r0, r6, [sp, #16]
   1d48e:	e9dd eb06 	ldrd	lr, fp, [sp, #24]
   1d492:	4a40      	ldr	r2, [pc, #256]	; (1d594 <mbedtls_internal_sha256_process+0x138>)
   1d494:	9c08      	ldr	r4, [sp, #32]
   1d496:	9202      	str	r2, [sp, #8]
   1d498:	ad0c      	add	r5, sp, #48	; 0x30
   1d49a:	4619      	mov	r1, r3

#if defined(MBEDTLS_SHA256_SMALLER)
    for( i = 0; i < 64; i++ )
   1d49c:	f04f 0900 	mov.w	r9, #0
    {
        if( i < 16 )
   1d4a0:	f1b9 0f0f 	cmp.w	r9, #15
   1d4a4:	d85e      	bhi.n	1d564 <mbedtls_internal_sha256_process+0x108>
            GET_UINT32_BE( W[i], data, 4 * i );
   1d4a6:	784b      	ldrb	r3, [r1, #1]
   1d4a8:	f891 a000 	ldrb.w	sl, [r1]
   1d4ac:	f891 c002 	ldrb.w	ip, [r1, #2]
   1d4b0:	041b      	lsls	r3, r3, #16
   1d4b2:	ea43 630a 	orr.w	r3, r3, sl, lsl #24
   1d4b6:	f891 a003 	ldrb.w	sl, [r1, #3]
   1d4ba:	ea43 030a 	orr.w	r3, r3, sl
   1d4be:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
        else
            R( i );

        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i], K[i] );
   1d4c2:	ea4f 22f4 	mov.w	r2, r4, ror #11
   1d4c6:	ea82 12b4 	eor.w	r2, r2, r4, ror #6
   1d4ca:	ea82 6c74 	eor.w	ip, r2, r4, ror #25
   1d4ce:	ea87 0208 	eor.w	r2, r7, r8
   1d4d2:	4022      	ands	r2, r4
   1d4d4:	407a      	eors	r2, r7
   1d4d6:	eb02 0a0c 	add.w	sl, r2, ip
   1d4da:	9a02      	ldr	r2, [sp, #8]
   1d4dc:	f845 3b04 	str.w	r3, [r5], #4
   1d4e0:	f852 cb04 	ldr.w	ip, [r2], #4
   1d4e4:	9202      	str	r2, [sp, #8]
   1d4e6:	44d4      	add	ip, sl
   1d4e8:	9a01      	ldr	r2, [sp, #4]
   1d4ea:	9701      	str	r7, [sp, #4]
   1d4ec:	4463      	add	r3, ip
   1d4ee:	4413      	add	r3, r2
   1d4f0:	ea40 0c06 	orr.w	ip, r0, r6
   1d4f4:	ea4f 3270 	mov.w	r2, r0, ror #13
   1d4f8:	eb0b 0a03 	add.w	sl, fp, r3
   1d4fc:	ea82 02b0 	eor.w	r2, r2, r0, ror #2
   1d500:	ea0c 0c0e 	and.w	ip, ip, lr
   1d504:	ea00 0b06 	and.w	fp, r0, r6
   1d508:	ea82 52b0 	eor.w	r2, r2, r0, ror #22
   1d50c:	ea4c 0b0b 	orr.w	fp, ip, fp
    for( i = 0; i < 64; i++ )
   1d510:	f109 0901 	add.w	r9, r9, #1
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i], K[i] );
   1d514:	4493      	add	fp, r2
    for( i = 0; i < 64; i++ )
   1d516:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i], K[i] );
   1d51a:	445b      	add	r3, fp
    for( i = 0; i < 64; i++ )
   1d51c:	f101 0104 	add.w	r1, r1, #4
   1d520:	46f3      	mov	fp, lr
   1d522:	d118      	bne.n	1d556 <mbedtls_internal_sha256_process+0xfa>
   1d524:	e9cd 3004 	strd	r3, r0, [sp, #16]
   1d528:	e9cd 4809 	strd	r4, r8, [sp, #36]	; 0x24
   1d52c:	9800      	ldr	r0, [sp, #0]
   1d52e:	9a03      	ldr	r2, [sp, #12]
   1d530:	970b      	str	r7, [sp, #44]	; 0x2c
   1d532:	e9cd 6e06 	strd	r6, lr, [sp, #24]
   1d536:	f8cd a020 	str.w	sl, [sp, #32]
   1d53a:	ab04      	add	r3, sp, #16
   1d53c:	3028      	adds	r0, #40	; 0x28
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += A[i];
   1d53e:	6811      	ldr	r1, [r2, #0]
   1d540:	f853 4b04 	ldr.w	r4, [r3], #4
   1d544:	4421      	add	r1, r4
   1d546:	f842 1b04 	str.w	r1, [r2], #4
    for( i = 0; i < 8; i++ )
   1d54a:	4282      	cmp	r2, r0
   1d54c:	d1f7      	bne.n	1d53e <mbedtls_internal_sha256_process+0xe2>

    return( 0 );
}
   1d54e:	2000      	movs	r0, #0
   1d550:	b04d      	add	sp, #308	; 0x134
   1d552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d556:	46b6      	mov	lr, r6
   1d558:	4647      	mov	r7, r8
   1d55a:	4606      	mov	r6, r0
   1d55c:	46a0      	mov	r8, r4
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i], K[i] );
   1d55e:	4618      	mov	r0, r3
   1d560:	4654      	mov	r4, sl
   1d562:	e79d      	b.n	1d4a0 <mbedtls_internal_sha256_process+0x44>
            R( i );
   1d564:	f855 3c08 	ldr.w	r3, [r5, #-8]
   1d568:	f855 ac3c 	ldr.w	sl, [r5, #-60]
   1d56c:	f855 2c40 	ldr.w	r2, [r5, #-64]
   1d570:	ea4f 4cf3 	mov.w	ip, r3, ror #19
   1d574:	ea8c 4c73 	eor.w	ip, ip, r3, ror #17
   1d578:	ea8c 2c93 	eor.w	ip, ip, r3, lsr #10
   1d57c:	f855 3c1c 	ldr.w	r3, [r5, #-28]
   1d580:	4413      	add	r3, r2
   1d582:	ea4f 42ba 	mov.w	r2, sl, ror #18
   1d586:	ea82 12fa 	eor.w	r2, r2, sl, ror #7
   1d58a:	449c      	add	ip, r3
   1d58c:	ea82 03da 	eor.w	r3, r2, sl, lsr #3
   1d590:	4463      	add	r3, ip
   1d592:	e796      	b.n	1d4c2 <mbedtls_internal_sha256_process+0x66>
   1d594:	0002258c 	.word	0x0002258c

0001d598 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
   1d598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d59c:	4605      	mov	r5, r0
   1d59e:	460e      	mov	r6, r1
    int ret;
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
   1d5a0:	4614      	mov	r4, r2
   1d5a2:	b912      	cbnz	r2, 1d5aa <mbedtls_sha256_update_ret+0x12>
    }

    if( ilen > 0 )
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
   1d5a4:	2000      	movs	r0, #0
}
   1d5a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    left = ctx->total[0] & 0x3F;
   1d5aa:	6803      	ldr	r3, [r0, #0]
   1d5ac:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    ctx->total[0] += (uint32_t) ilen;
   1d5b0:	18d3      	adds	r3, r2, r3
   1d5b2:	6003      	str	r3, [r0, #0]
        ctx->total[1]++;
   1d5b4:	bf22      	ittt	cs
   1d5b6:	6843      	ldrcs	r3, [r0, #4]
   1d5b8:	3301      	addcs	r3, #1
   1d5ba:	6043      	strcs	r3, [r0, #4]
    if( left && ilen >= fill )
   1d5bc:	b1a7      	cbz	r7, 1d5e8 <mbedtls_sha256_update_ret+0x50>
    fill = 64 - left;
   1d5be:	f1c7 0940 	rsb	r9, r7, #64	; 0x40
    if( left && ilen >= fill )
   1d5c2:	454a      	cmp	r2, r9
   1d5c4:	d310      	bcc.n	1d5e8 <mbedtls_sha256_update_ret+0x50>
        memcpy( (void *) (ctx->buffer + left), input, fill );
   1d5c6:	f100 0828 	add.w	r8, r0, #40	; 0x28
   1d5ca:	464a      	mov	r2, r9
   1d5cc:	eb08 0007 	add.w	r0, r8, r7
   1d5d0:	f7f2 fe4e 	bl	10270 <memcpy>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
   1d5d4:	4641      	mov	r1, r8
   1d5d6:	4628      	mov	r0, r5
   1d5d8:	f7ff ff40 	bl	1d45c <mbedtls_internal_sha256_process>
   1d5dc:	2800      	cmp	r0, #0
   1d5de:	d1e2      	bne.n	1d5a6 <mbedtls_sha256_update_ret+0xe>
        ilen  -= fill;
   1d5e0:	443c      	add	r4, r7
        input += fill;
   1d5e2:	444e      	add	r6, r9
        ilen  -= fill;
   1d5e4:	3c40      	subs	r4, #64	; 0x40
        left = 0;
   1d5e6:	4607      	mov	r7, r0
   1d5e8:	4426      	add	r6, r4
   1d5ea:	e005      	b.n	1d5f8 <mbedtls_sha256_update_ret+0x60>
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
   1d5ec:	4628      	mov	r0, r5
   1d5ee:	f7ff ff35 	bl	1d45c <mbedtls_internal_sha256_process>
   1d5f2:	2800      	cmp	r0, #0
   1d5f4:	d1d7      	bne.n	1d5a6 <mbedtls_sha256_update_ret+0xe>
        ilen  -= 64;
   1d5f6:	3c40      	subs	r4, #64	; 0x40
    while( ilen >= 64 )
   1d5f8:	2c3f      	cmp	r4, #63	; 0x3f
   1d5fa:	eba6 0104 	sub.w	r1, r6, r4
   1d5fe:	d8f5      	bhi.n	1d5ec <mbedtls_sha256_update_ret+0x54>
    if( ilen > 0 )
   1d600:	2c00      	cmp	r4, #0
   1d602:	d0cf      	beq.n	1d5a4 <mbedtls_sha256_update_ret+0xc>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
   1d604:	f105 0028 	add.w	r0, r5, #40	; 0x28
   1d608:	4622      	mov	r2, r4
   1d60a:	4438      	add	r0, r7
   1d60c:	f7f2 fe30 	bl	10270 <memcpy>
   1d610:	e7c8      	b.n	1d5a4 <mbedtls_sha256_update_ret+0xc>

0001d612 <mbedtls_sha256_finish_ret>:
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
   1d612:	6803      	ldr	r3, [r0, #0]
   1d614:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
   1d618:	1c5a      	adds	r2, r3, #1
   1d61a:	4403      	add	r3, r0
{
   1d61c:	b570      	push	{r4, r5, r6, lr}

    if( used <= 56 )
   1d61e:	2a38      	cmp	r2, #56	; 0x38
{
   1d620:	460d      	mov	r5, r1
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
   1d622:	f100 0628 	add.w	r6, r0, #40	; 0x28
    ctx->buffer[used++] = 0x80;
   1d626:	f04f 0180 	mov.w	r1, #128	; 0x80
{
   1d62a:	4604      	mov	r4, r0
    ctx->buffer[used++] = 0x80;
   1d62c:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
        memset( ctx->buffer + used, 0, 56 - used );
   1d630:	eb06 0002 	add.w	r0, r6, r2
    if( used <= 56 )
   1d634:	d861      	bhi.n	1d6fa <mbedtls_sha256_finish_ret+0xe8>
        memset( ctx->buffer + used, 0, 56 - used );
   1d636:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
   1d63a:	2100      	movs	r1, #0
        memset( ctx->buffer + used, 0, 64 - used );

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
            return( ret );

        memset( ctx->buffer, 0, 56 );
   1d63c:	f7f2 fe25 	bl	1028a <memset>

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
   1d640:	e9d4 3100 	ldrd	r3, r1, [r4]
    high = ( ctx->total[0] >> 29 )
   1d644:	0f5a      	lsrs	r2, r3, #29
   1d646:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );
   1d64a:	00db      	lsls	r3, r3, #3
   1d64c:	ba12      	rev	r2, r2
   1d64e:	ba1b      	rev	r3, r3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
   1d650:	6622      	str	r2, [r4, #96]	; 0x60
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
   1d652:	6663      	str	r3, [r4, #100]	; 0x64

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
   1d654:	4631      	mov	r1, r6
   1d656:	4620      	mov	r0, r4
   1d658:	f7ff ff00 	bl	1d45c <mbedtls_internal_sha256_process>
   1d65c:	2800      	cmp	r0, #0
   1d65e:	d14b      	bne.n	1d6f8 <mbedtls_sha256_finish_ret+0xe6>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
   1d660:	7ae3      	ldrb	r3, [r4, #11]
   1d662:	702b      	strb	r3, [r5, #0]
   1d664:	8963      	ldrh	r3, [r4, #10]
   1d666:	706b      	strb	r3, [r5, #1]
   1d668:	68a3      	ldr	r3, [r4, #8]
   1d66a:	0a1b      	lsrs	r3, r3, #8
   1d66c:	70ab      	strb	r3, [r5, #2]
   1d66e:	68a3      	ldr	r3, [r4, #8]
   1d670:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
   1d672:	7be3      	ldrb	r3, [r4, #15]
   1d674:	712b      	strb	r3, [r5, #4]
   1d676:	89e3      	ldrh	r3, [r4, #14]
   1d678:	716b      	strb	r3, [r5, #5]
   1d67a:	68e3      	ldr	r3, [r4, #12]
   1d67c:	0a1b      	lsrs	r3, r3, #8
   1d67e:	71ab      	strb	r3, [r5, #6]
   1d680:	68e3      	ldr	r3, [r4, #12]
   1d682:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
   1d684:	7ce3      	ldrb	r3, [r4, #19]
   1d686:	722b      	strb	r3, [r5, #8]
   1d688:	8a63      	ldrh	r3, [r4, #18]
   1d68a:	726b      	strb	r3, [r5, #9]
   1d68c:	6923      	ldr	r3, [r4, #16]
   1d68e:	0a1b      	lsrs	r3, r3, #8
   1d690:	72ab      	strb	r3, [r5, #10]
   1d692:	6923      	ldr	r3, [r4, #16]
   1d694:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
   1d696:	7de3      	ldrb	r3, [r4, #23]
   1d698:	732b      	strb	r3, [r5, #12]
   1d69a:	8ae3      	ldrh	r3, [r4, #22]
   1d69c:	736b      	strb	r3, [r5, #13]
   1d69e:	6963      	ldr	r3, [r4, #20]
   1d6a0:	0a1b      	lsrs	r3, r3, #8
   1d6a2:	73ab      	strb	r3, [r5, #14]
   1d6a4:	6963      	ldr	r3, [r4, #20]
   1d6a6:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
   1d6a8:	7ee3      	ldrb	r3, [r4, #27]
   1d6aa:	742b      	strb	r3, [r5, #16]
   1d6ac:	8b63      	ldrh	r3, [r4, #26]
   1d6ae:	746b      	strb	r3, [r5, #17]
   1d6b0:	69a3      	ldr	r3, [r4, #24]
   1d6b2:	0a1b      	lsrs	r3, r3, #8
   1d6b4:	74ab      	strb	r3, [r5, #18]
   1d6b6:	69a3      	ldr	r3, [r4, #24]
   1d6b8:	74eb      	strb	r3, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
   1d6ba:	7fe3      	ldrb	r3, [r4, #31]
   1d6bc:	752b      	strb	r3, [r5, #20]
   1d6be:	8be3      	ldrh	r3, [r4, #30]
   1d6c0:	756b      	strb	r3, [r5, #21]
   1d6c2:	69e3      	ldr	r3, [r4, #28]
   1d6c4:	0a1b      	lsrs	r3, r3, #8
   1d6c6:	75ab      	strb	r3, [r5, #22]
   1d6c8:	69e3      	ldr	r3, [r4, #28]
   1d6ca:	75eb      	strb	r3, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
   1d6cc:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1d6d0:	762b      	strb	r3, [r5, #24]
   1d6d2:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   1d6d4:	766b      	strb	r3, [r5, #25]
   1d6d6:	6a23      	ldr	r3, [r4, #32]
   1d6d8:	0a1b      	lsrs	r3, r3, #8
   1d6da:	76ab      	strb	r3, [r5, #26]
   1d6dc:	6a23      	ldr	r3, [r4, #32]
   1d6de:	76eb      	strb	r3, [r5, #27]

    if( ctx->is224 == 0 )
   1d6e0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   1d6e2:	b94b      	cbnz	r3, 1d6f8 <mbedtls_sha256_finish_ret+0xe6>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
   1d6e4:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   1d6e8:	772b      	strb	r3, [r5, #28]
   1d6ea:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   1d6ec:	776b      	strb	r3, [r5, #29]
   1d6ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d6f0:	0a1b      	lsrs	r3, r3, #8
   1d6f2:	77ab      	strb	r3, [r5, #30]
   1d6f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d6f6:	77eb      	strb	r3, [r5, #31]

    return( 0 );
}
   1d6f8:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer + used, 0, 64 - used );
   1d6fa:	2100      	movs	r1, #0
   1d6fc:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
   1d700:	f7f2 fdc3 	bl	1028a <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
   1d704:	4631      	mov	r1, r6
   1d706:	4620      	mov	r0, r4
   1d708:	f7ff fea8 	bl	1d45c <mbedtls_internal_sha256_process>
   1d70c:	2800      	cmp	r0, #0
   1d70e:	d1f3      	bne.n	1d6f8 <mbedtls_sha256_finish_ret+0xe6>
        memset( ctx->buffer, 0, 56 );
   1d710:	4601      	mov	r1, r0
   1d712:	2238      	movs	r2, #56	; 0x38
   1d714:	4630      	mov	r0, r6
   1d716:	e791      	b.n	1d63c <mbedtls_sha256_finish_ret+0x2a>

0001d718 <fcb_free_sector_cnt>:
fcb_free_sector_cnt(struct fcb *fcb)
{
    int i;
    struct flash_area *fa;

    fa = fcb->f_active.fe_area;
   1d718:	69c1      	ldr	r1, [r0, #28]
{
   1d71a:	b538      	push	{r3, r4, r5, lr}
   1d71c:	4604      	mov	r4, r0
    for (i = 0; i < fcb->f_sector_cnt; i++) {
   1d71e:	2500      	movs	r5, #0
   1d720:	7963      	ldrb	r3, [r4, #5]
   1d722:	42ab      	cmp	r3, r5
   1d724:	dc01      	bgt.n	1d72a <fcb_free_sector_cnt+0x12>
        if (fa == fcb->f_oldest) {
            break;
        }
    }
    return i;
}
   1d726:	4628      	mov	r0, r5
   1d728:	bd38      	pop	{r3, r4, r5, pc}
        fa = fcb_getnext_area(fcb, fa);
   1d72a:	4620      	mov	r0, r4
   1d72c:	f000 fa4d 	bl	1dbca <fcb_getnext_area>
        if (fa == fcb->f_oldest) {
   1d730:	69a3      	ldr	r3, [r4, #24]
   1d732:	4283      	cmp	r3, r0
        fa = fcb_getnext_area(fcb, fa);
   1d734:	4601      	mov	r1, r0
        if (fa == fcb->f_oldest) {
   1d736:	d0f6      	beq.n	1d726 <fcb_free_sector_cnt+0xe>
    for (i = 0; i < fcb->f_sector_cnt; i++) {
   1d738:	3501      	adds	r5, #1
   1d73a:	e7f1      	b.n	1d720 <fcb_free_sector_cnt+0x8>

0001d73c <fcb_put_len>:
 * 1 byte for lengths < 128 bytes, and 2 bytes for < 16384.
 */
int
fcb_put_len(uint8_t *buf, uint16_t len)
{
    if (len < 0x80) {
   1d73c:	297f      	cmp	r1, #127	; 0x7f
   1d73e:	d802      	bhi.n	1d746 <fcb_put_len+0xa>
        buf[0] = len;
   1d740:	7001      	strb	r1, [r0, #0]
        return 1;
   1d742:	2001      	movs	r0, #1
   1d744:	4770      	bx	lr
    } else if (len < FCB_MAX_LEN) {
   1d746:	f647 73fe 	movw	r3, #32766	; 0x7ffe
   1d74a:	4299      	cmp	r1, r3
        buf[0] = (len & 0x7f) | 0x80;
   1d74c:	bf9f      	itttt	ls
   1d74e:	f061 037f 	ornls	r3, r1, #127	; 0x7f
        buf[1] = len >> 7;
   1d752:	09c9      	lsrls	r1, r1, #7
        buf[0] = (len & 0x7f) | 0x80;
   1d754:	7003      	strbls	r3, [r0, #0]
        buf[1] = len >> 7;
   1d756:	7041      	strbls	r1, [r0, #1]
        return 2;
   1d758:	bf94      	ite	ls
   1d75a:	2002      	movls	r0, #2
    } else {
        return FCB_ERR_ARGS;
   1d75c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
    }
}
   1d760:	4770      	bx	lr

0001d762 <fcb_get_len>:
int
fcb_get_len(uint8_t *buf, uint16_t *len)
{
    int rc;

    if (buf[0] & 0x80) {
   1d762:	f990 2000 	ldrsb.w	r2, [r0]
   1d766:	7803      	ldrb	r3, [r0, #0]
   1d768:	2a00      	cmp	r2, #0
        *len = (buf[0] & 0x7f) | (buf[1] << 7);
   1d76a:	bfbd      	ittte	lt
   1d76c:	7842      	ldrblt	r2, [r0, #1]
   1d76e:	f003 037f 	andlt.w	r3, r3, #127	; 0x7f
   1d772:	ea43 13c2 	orrlt.w	r3, r3, r2, lsl #7
        rc = 2;
    } else {
        *len = buf[0];
   1d776:	b29b      	uxthge	r3, r3
        rc = 2;
   1d778:	bfb4      	ite	lt
   1d77a:	2002      	movlt	r0, #2
        rc = 1;
   1d77c:	2001      	movge	r0, #1
   1d77e:	800b      	strh	r3, [r1, #0]
    }
    return rc;
}
   1d780:	4770      	bx	lr

0001d782 <fcb_sector_hdr_init>:
/**
 * Initialize erased sector for use.
 */
int
fcb_sector_hdr_init(struct fcb *fcb, struct flash_area *fap, uint16_t id)
{
   1d782:	b507      	push	{r0, r1, r2, lr}
   1d784:	4603      	mov	r3, r0
   1d786:	4608      	mov	r0, r1
    struct fcb_disk_area fda;
    int rc;

    fda.fd_magic = fcb->f_magic;
   1d788:	6819      	ldr	r1, [r3, #0]
    fda.fd_ver = fcb->f_version;
   1d78a:	791b      	ldrb	r3, [r3, #4]
   1d78c:	f88d 3004 	strb.w	r3, [sp, #4]
    fda._pad = 0xff;
   1d790:	23ff      	movs	r3, #255	; 0xff
    fda.fd_magic = fcb->f_magic;
   1d792:	9100      	str	r1, [sp, #0]
    fda._pad = 0xff;
   1d794:	f88d 3005 	strb.w	r3, [sp, #5]
    fda.fd_id = id;
   1d798:	f8ad 2006 	strh.w	r2, [sp, #6]

    rc = flash_area_write(fap, 0, &fda, sizeof(fda));
   1d79c:	2308      	movs	r3, #8
   1d79e:	466a      	mov	r2, sp
   1d7a0:	2100      	movs	r1, #0
   1d7a2:	f7fe f847 	bl	1b834 <flash_area_write>
    if (rc) {
        return FCB_ERR_FLASH;
   1d7a6:	2800      	cmp	r0, #0
    }
    return 0;
}
   1d7a8:	bf18      	it	ne
   1d7aa:	f06f 0001 	mvnne.w	r0, #1
   1d7ae:	b003      	add	sp, #12
   1d7b0:	f85d fb04 	ldr.w	pc, [sp], #4

0001d7b4 <fcb_sector_hdr_read>:
 * Returns 1 if sector has data.
 */
int
fcb_sector_hdr_read(struct fcb *fcb, struct flash_area *fap,
  struct fcb_disk_area *fdap)
{
   1d7b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1d7b6:	4605      	mov	r5, r0
    struct fcb_disk_area fda;
    int rc;

    if (!fdap) {
   1d7b8:	4614      	mov	r4, r2
{
   1d7ba:	4608      	mov	r0, r1
    if (!fdap) {
   1d7bc:	b902      	cbnz	r2, 1d7c0 <fcb_sector_hdr_read+0xc>
        fdap = &fda;
   1d7be:	466c      	mov	r4, sp
    }
    rc = flash_area_read_is_empty(fap, 0, fdap, sizeof(*fdap));
   1d7c0:	2308      	movs	r3, #8
   1d7c2:	4622      	mov	r2, r4
   1d7c4:	2100      	movs	r1, #0
   1d7c6:	f7fe f873 	bl	1b8b0 <flash_area_read_is_empty>
    if (rc < 0) {
   1d7ca:	2800      	cmp	r0, #0
   1d7cc:	db0e      	blt.n	1d7ec <fcb_sector_hdr_read+0x38>
        return FCB_ERR_FLASH;
    } else if (rc == 1) {
   1d7ce:	2801      	cmp	r0, #1
   1d7d0:	d00f      	beq.n	1d7f2 <fcb_sector_hdr_read+0x3e>
        return 0;
    }
    if (fdap->fd_magic != fcb->f_magic) {
   1d7d2:	6822      	ldr	r2, [r4, #0]
   1d7d4:	682b      	ldr	r3, [r5, #0]
   1d7d6:	429a      	cmp	r2, r3
   1d7d8:	d10d      	bne.n	1d7f6 <fcb_sector_hdr_read+0x42>
        return FCB_ERR_MAGIC;
    }
    if (fdap->fd_ver != fcb->f_version) {
   1d7da:	7922      	ldrb	r2, [r4, #4]
   1d7dc:	792b      	ldrb	r3, [r5, #4]
        return FCB_ERR_VERSION;
   1d7de:	429a      	cmp	r2, r3
   1d7e0:	bf0c      	ite	eq
   1d7e2:	2001      	moveq	r0, #1
   1d7e4:	f06f 0007 	mvnne.w	r0, #7
    }
    return 1;
}
   1d7e8:	b003      	add	sp, #12
   1d7ea:	bd30      	pop	{r4, r5, pc}
        return FCB_ERR_FLASH;
   1d7ec:	f06f 0001 	mvn.w	r0, #1
   1d7f0:	e7fa      	b.n	1d7e8 <fcb_sector_hdr_read+0x34>
        return 0;
   1d7f2:	2000      	movs	r0, #0
   1d7f4:	e7f8      	b.n	1d7e8 <fcb_sector_hdr_read+0x34>
        return FCB_ERR_MAGIC;
   1d7f6:	f06f 0006 	mvn.w	r0, #6
   1d7fa:	e7f5      	b.n	1d7e8 <fcb_sector_hdr_read+0x34>

0001d7fc <fcb_init>:
{
   1d7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   1d800:	6883      	ldr	r3, [r0, #8]
{
   1d802:	b085      	sub	sp, #20
   1d804:	4604      	mov	r4, r0
    if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   1d806:	2b00      	cmp	r3, #0
   1d808:	d078      	beq.n	1d8fc <fcb_init+0x100>
   1d80a:	7943      	ldrb	r3, [r0, #5]
   1d80c:	7982      	ldrb	r2, [r0, #6]
   1d80e:	1a9b      	subs	r3, r3, r2
   1d810:	2b00      	cmp	r3, #0
   1d812:	dd73      	ble.n	1d8fc <fcb_init+0x100>
    struct flash_area *oldest_fap = NULL, *newest_fap = NULL;
   1d814:	2700      	movs	r7, #0
    int oldest = -1, newest = -1;
   1d816:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    struct flash_area *oldest_fap = NULL, *newest_fap = NULL;
   1d81a:	46b8      	mov	r8, r7
    int oldest = -1, newest = -1;
   1d81c:	46d9      	mov	r9, fp
    int max_align = 1;
   1d81e:	2601      	movs	r6, #1
    for (i = 0; i < fcb->f_sector_cnt; i++) {
   1d820:	9701      	str	r7, [sp, #4]
   1d822:	7962      	ldrb	r2, [r4, #5]
   1d824:	9b01      	ldr	r3, [sp, #4]
   1d826:	429a      	cmp	r2, r3
   1d828:	dc29      	bgt.n	1d87e <fcb_init+0x82>
    if (oldest < 0) {
   1d82a:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   1d82e:	d15d      	bne.n	1d8ec <fcb_init+0xf0>
        oldest_fap = newest_fap = &fcb->f_sectors[0];
   1d830:	f8d4 8008 	ldr.w	r8, [r4, #8]
        rc = fcb_sector_hdr_init(fcb, oldest_fap, 0);
   1d834:	2200      	movs	r2, #0
   1d836:	4641      	mov	r1, r8
   1d838:	4620      	mov	r0, r4
   1d83a:	f7ff ffa2 	bl	1d782 <fcb_sector_hdr_init>
        if (rc) {
   1d83e:	4605      	mov	r5, r0
   1d840:	b9c8      	cbnz	r0, 1d876 <fcb_init+0x7a>
        oldest_fap = newest_fap = &fcb->f_sectors[0];
   1d842:	4647      	mov	r7, r8
    fcb->f_active_id = newest;
   1d844:	85a5      	strh	r5, [r4, #44]	; 0x2c
    assert((fcb->f_align & (fcb->f_align - 1)) == 0);
   1d846:	1e75      	subs	r5, r6, #1
    fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   1d848:	2308      	movs	r3, #8
    assert((fcb->f_align & (fcb->f_align - 1)) == 0);
   1d84a:	4035      	ands	r5, r6
    fcb->f_active.fe_area = newest_fap;
   1d84c:	e9c4 8706 	strd	r8, r7, [r4, #24]
    fcb->f_align = max_align;
   1d850:	f884 602e 	strb.w	r6, [r4, #46]	; 0x2e
    fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   1d854:	6223      	str	r3, [r4, #32]
    assert((fcb->f_align & (fcb->f_align - 1)) == 0);
   1d856:	d14b      	bne.n	1d8f0 <fcb_init+0xf4>
        rc = fcb_getnext_in_area(fcb, &fcb->f_active);
   1d858:	f104 061c 	add.w	r6, r4, #28
   1d85c:	4631      	mov	r1, r6
   1d85e:	4620      	mov	r0, r4
   1d860:	f000 f992 	bl	1db88 <fcb_getnext_in_area>
        if (rc == FCB_ERR_NOVAR) {
   1d864:	1cc3      	adds	r3, r0, #3
   1d866:	d002      	beq.n	1d86e <fcb_init+0x72>
        if (rc != 0) {
   1d868:	2800      	cmp	r0, #0
   1d86a:	d0f7      	beq.n	1d85c <fcb_init+0x60>
   1d86c:	4605      	mov	r5, r0
    os_mutex_init(&fcb->f_mtx);
   1d86e:	f104 000c 	add.w	r0, r4, #12
   1d872:	f7ef fc6f 	bl	d154 <os_mutex_init>
}
   1d876:	4628      	mov	r0, r5
   1d878:	b005      	add	sp, #20
   1d87a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        fap = &fcb->f_sectors[i];
   1d87e:	68a1      	ldr	r1, [r4, #8]
   1d880:	9b01      	ldr	r3, [sp, #4]
   1d882:	220c      	movs	r2, #12
   1d884:	fb02 1a03 	mla	sl, r2, r3, r1
        align = flash_area_align(fap);
   1d888:	4650      	mov	r0, sl
   1d88a:	f7fd fff9 	bl	1b880 <flash_area_align>
        if (align > max_align) {
   1d88e:	4286      	cmp	r6, r0
   1d890:	da03      	bge.n	1d89a <fcb_init+0x9e>
            max_align = flash_area_align(fap);
   1d892:	4650      	mov	r0, sl
   1d894:	f7fd fff4 	bl	1b880 <flash_area_align>
   1d898:	4606      	mov	r6, r0
        rc = fcb_sector_hdr_read(fcb, fap, &fda);
   1d89a:	aa02      	add	r2, sp, #8
   1d89c:	4651      	mov	r1, sl
   1d89e:	4620      	mov	r0, r4
   1d8a0:	f7ff ff88 	bl	1d7b4 <fcb_sector_hdr_read>
        if (rc < 0) {
   1d8a4:	1e05      	subs	r5, r0, #0
   1d8a6:	dbe6      	blt.n	1d876 <fcb_init+0x7a>
        if (rc == 0) {
   1d8a8:	d008      	beq.n	1d8bc <fcb_init+0xc0>
        if (oldest < 0) {
   1d8aa:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
            oldest = newest = fda.fd_id;
   1d8ae:	f8bd 200e 	ldrh.w	r2, [sp, #14]
        if (oldest < 0) {
   1d8b2:	d107      	bne.n	1d8c4 <fcb_init+0xc8>
            oldest = newest = fda.fd_id;
   1d8b4:	4691      	mov	r9, r2
            oldest_fap = newest_fap = fap;
   1d8b6:	4657      	mov	r7, sl
   1d8b8:	46d0      	mov	r8, sl
            oldest = newest = fda.fd_id;
   1d8ba:	4693      	mov	fp, r2
    for (i = 0; i < fcb->f_sector_cnt; i++) {
   1d8bc:	9b01      	ldr	r3, [sp, #4]
   1d8be:	3301      	adds	r3, #1
   1d8c0:	9301      	str	r3, [sp, #4]
   1d8c2:	e7ae      	b.n	1d822 <fcb_init+0x26>
        if (FCB_ID_GT(fda.fd_id, newest)) {
   1d8c4:	fa0f fc82 	sxth.w	ip, r2
   1d8c8:	fa0f f58b 	sxth.w	r5, fp
   1d8cc:	ebac 0505 	sub.w	r5, ip, r5
   1d8d0:	2d00      	cmp	r5, #0
   1d8d2:	dd02      	ble.n	1d8da <fcb_init+0xde>
            newest = fda.fd_id;
   1d8d4:	4693      	mov	fp, r2
            newest_fap = fap;
   1d8d6:	4657      	mov	r7, sl
   1d8d8:	e7f0      	b.n	1d8bc <fcb_init+0xc0>
        } else if (FCB_ID_GT(oldest, fda.fd_id)) {
   1d8da:	fa0f f089 	sxth.w	r0, r9
   1d8de:	eba0 000c 	sub.w	r0, r0, ip
            oldest = fda.fd_id;
   1d8e2:	2800      	cmp	r0, #0
   1d8e4:	bfc4      	itt	gt
   1d8e6:	4691      	movgt	r9, r2
   1d8e8:	46d0      	movgt	r8, sl
   1d8ea:	e7e7      	b.n	1d8bc <fcb_init+0xc0>
   1d8ec:	465d      	mov	r5, fp
   1d8ee:	e7a9      	b.n	1d844 <fcb_init+0x48>
    assert((fcb->f_align & (fcb->f_align - 1)) == 0);
   1d8f0:	2300      	movs	r3, #0
   1d8f2:	461a      	mov	r2, r3
   1d8f4:	4619      	mov	r1, r3
   1d8f6:	4618      	mov	r0, r3
   1d8f8:	f7ee ff80 	bl	c7fc <__assert_func>
        return FCB_ERR_ARGS;
   1d8fc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1d900:	e7b9      	b.n	1d876 <fcb_init+0x7a>

0001d902 <fcb_len_in_flash.isra.0>:
int fcb_get_len(uint8_t *buf, uint16_t *len);

static inline int
fcb_len_in_flash(struct fcb *fcb, uint16_t len)
{
    if (fcb->f_align <= 1) {
   1d902:	2801      	cmp	r0, #1
        return len;
    }
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   1d904:	bf81      	itttt	hi
   1d906:	f100 33ff 	addhi.w	r3, r0, #4294967295	; 0xffffffff
   1d90a:	18c9      	addhi	r1, r1, r3
   1d90c:	4240      	neghi	r0, r0
   1d90e:	4001      	andhi	r1, r0
}
   1d910:	4608      	mov	r0, r1
   1d912:	4770      	bx	lr

0001d914 <fcb_append_to_scratch>:
/*
 * Take one of the scratch blocks into use, if at all possible.
 */
int
fcb_append_to_scratch(struct fcb *fcb)
{
   1d914:	b538      	push	{r3, r4, r5, lr}
        fa = fcb_getnext_area(fcb, fa);
   1d916:	69c1      	ldr	r1, [r0, #28]
{
   1d918:	4604      	mov	r4, r0
        fa = fcb_getnext_area(fcb, fa);
   1d91a:	f000 f956 	bl	1dbca <fcb_getnext_area>
        if (fa == fcb->f_oldest) {
   1d91e:	69a3      	ldr	r3, [r4, #24]
   1d920:	4298      	cmp	r0, r3
        fa = fcb_getnext_area(fcb, fa);
   1d922:	4605      	mov	r5, r0
        if (fa == fcb->f_oldest) {
   1d924:	d00f      	beq.n	1d946 <fcb_append_to_scratch+0x32>
    struct flash_area *fa;
    int rc;

    fa = fcb_new_area(fcb, 0);
    if (!fa) {
   1d926:	b170      	cbz	r0, 1d946 <fcb_append_to_scratch+0x32>
        return FCB_ERR_NOSPACE;
    }
    rc = fcb_sector_hdr_init(fcb, fa, fcb->f_active_id + 1);
   1d928:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   1d92a:	3201      	adds	r2, #1
   1d92c:	4601      	mov	r1, r0
   1d92e:	b292      	uxth	r2, r2
   1d930:	4620      	mov	r0, r4
   1d932:	f7ff ff26 	bl	1d782 <fcb_sector_hdr_init>
    if (rc) {
   1d936:	b928      	cbnz	r0, 1d944 <fcb_append_to_scratch+0x30>
        return rc;
    }
    fcb->f_active.fe_area = fa;
    fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   1d938:	2308      	movs	r3, #8
   1d93a:	6223      	str	r3, [r4, #32]
    fcb->f_active_id++;
   1d93c:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    fcb->f_active.fe_area = fa;
   1d93e:	61e5      	str	r5, [r4, #28]
    fcb->f_active_id++;
   1d940:	3301      	adds	r3, #1
   1d942:	85a3      	strh	r3, [r4, #44]	; 0x2c
    return FCB_OK;
}
   1d944:	bd38      	pop	{r3, r4, r5, pc}
        return FCB_ERR_NOSPACE;
   1d946:	f06f 0003 	mvn.w	r0, #3
   1d94a:	e7fb      	b.n	1d944 <fcb_append_to_scratch+0x30>

0001d94c <fcb_append>:

int
fcb_append(struct fcb *fcb, uint16_t len, struct fcb_entry *append_loc)
{
   1d94c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d950:	4604      	mov	r4, r0
    struct flash_area *fa;
    uint8_t tmp_str[2];
    int cnt;
    int rc;

    cnt = fcb_put_len(tmp_str, len);
   1d952:	a801      	add	r0, sp, #4
{
   1d954:	460e      	mov	r6, r1
   1d956:	4691      	mov	r9, r2
    cnt = fcb_put_len(tmp_str, len);
   1d958:	f7ff fef0 	bl	1d73c <fcb_put_len>
    if (cnt < 0) {
   1d95c:	1e05      	subs	r5, r0, #0
   1d95e:	db68      	blt.n	1da32 <fcb_append+0xe6>
        return cnt;
    }
    cnt = fcb_len_in_flash(fcb, cnt);
   1d960:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
   1d964:	b2a9      	uxth	r1, r5
   1d966:	4610      	mov	r0, r2
   1d968:	f7ff ffcb 	bl	1d902 <fcb_len_in_flash.isra.0>
    len = fcb_len_in_flash(fcb, len) + fcb_len_in_flash(fcb, FCB_CRC_SZ);
   1d96c:	4631      	mov	r1, r6
    cnt = fcb_len_in_flash(fcb, cnt);
   1d96e:	4607      	mov	r7, r0
    len = fcb_len_in_flash(fcb, len) + fcb_len_in_flash(fcb, FCB_CRC_SZ);
   1d970:	4610      	mov	r0, r2
   1d972:	f7ff ffc6 	bl	1d902 <fcb_len_in_flash.isra.0>
   1d976:	2101      	movs	r1, #1
   1d978:	4606      	mov	r6, r0
   1d97a:	4610      	mov	r0, r2
   1d97c:	f7ff ffc1 	bl	1d902 <fcb_len_in_flash.isra.0>

    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   1d980:	f104 0a0c 	add.w	sl, r4, #12
    len = fcb_len_in_flash(fcb, len) + fcb_len_in_flash(fcb, FCB_CRC_SZ);
   1d984:	4430      	add	r0, r6
   1d986:	b286      	uxth	r6, r0
    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   1d988:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d98c:	4650      	mov	r0, sl
   1d98e:	f7ef fc3d 	bl	d20c <os_mutex_pend>
    if (rc && rc != OS_NOT_STARTED) {
   1d992:	b108      	cbz	r0, 1d998 <fcb_append+0x4c>
   1d994:	2809      	cmp	r0, #9
   1d996:	d158      	bne.n	1da4a <fcb_append+0xfe>
        return FCB_ERR_ARGS;
    }
    active = &fcb->f_active;
    if (active->fe_elem_off + len + cnt > active->fe_area->fa_size) {
   1d998:	e9d4 1307 	ldrd	r1, r3, [r4, #28]
   1d99c:	688a      	ldr	r2, [r1, #8]
   1d99e:	443b      	add	r3, r7
   1d9a0:	4433      	add	r3, r6
   1d9a2:	4293      	cmp	r3, r2
   1d9a4:	d92c      	bls.n	1da00 <fcb_append+0xb4>
    i = 0;
   1d9a6:	2500      	movs	r5, #0
        fa = fcb_new_area(fcb, fcb->f_scratch_cnt);
   1d9a8:	f894 b006 	ldrb.w	fp, [r4, #6]
    rfa = NULL;
   1d9ac:	46a8      	mov	r8, r5
        fa = fcb_getnext_area(fcb, fa);
   1d9ae:	4620      	mov	r0, r4
   1d9b0:	f000 f90b 	bl	1dbca <fcb_getnext_area>
        if (fa == fcb->f_oldest) {
   1d9b4:	69a3      	ldr	r3, [r4, #24]
        fa = fcb_getnext_area(fcb, fa);
   1d9b6:	f1b8 0f00 	cmp.w	r8, #0
   1d9ba:	bf08      	it	eq
   1d9bc:	4680      	moveq	r8, r0
        if (fa == fcb->f_oldest) {
   1d9be:	4298      	cmp	r0, r3
        fa = fcb_getnext_area(fcb, fa);
   1d9c0:	4601      	mov	r1, r0
        if (fa == fcb->f_oldest) {
   1d9c2:	d03c      	beq.n	1da3e <fcb_append+0xf2>
    } while (i++ < cnt);
   1d9c4:	45ab      	cmp	fp, r5
   1d9c6:	f105 0301 	add.w	r3, r5, #1
   1d9ca:	dc36      	bgt.n	1da3a <fcb_append+0xee>
        if (!fa || (fa->fa_size <
   1d9cc:	f1b8 0f00 	cmp.w	r8, #0
   1d9d0:	d035      	beq.n	1da3e <fcb_append+0xf2>
   1d9d2:	f8d8 2008 	ldr.w	r2, [r8, #8]
            sizeof(struct fcb_disk_area) + len + cnt)) {
   1d9d6:	f107 0308 	add.w	r3, r7, #8
   1d9da:	4433      	add	r3, r6
        if (!fa || (fa->fa_size <
   1d9dc:	429a      	cmp	r2, r3
   1d9de:	d32e      	bcc.n	1da3e <fcb_append+0xf2>
            rc = FCB_ERR_NOSPACE;
            goto err;
        }
        rc = fcb_sector_hdr_init(fcb, fa, fcb->f_active_id + 1);
   1d9e0:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   1d9e2:	3201      	adds	r2, #1
   1d9e4:	b292      	uxth	r2, r2
   1d9e6:	4641      	mov	r1, r8
   1d9e8:	4620      	mov	r0, r4
   1d9ea:	f7ff feca 	bl	1d782 <fcb_sector_hdr_init>
        if (rc) {
   1d9ee:	4605      	mov	r5, r0
   1d9f0:	b9e0      	cbnz	r0, 1da2c <fcb_append+0xe0>
            goto err;
        }
        fcb->f_active.fe_area = fa;
        fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   1d9f2:	2308      	movs	r3, #8
   1d9f4:	6223      	str	r3, [r4, #32]
        fcb->f_active_id++;
   1d9f6:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
        fcb->f_active.fe_area = fa;
   1d9f8:	f8c4 801c 	str.w	r8, [r4, #28]
        fcb->f_active_id++;
   1d9fc:	3301      	adds	r3, #1
   1d9fe:	85a3      	strh	r3, [r4, #44]	; 0x2c
    }

    rc = flash_area_write(active->fe_area, active->fe_elem_off, tmp_str, cnt);
   1da00:	e9d4 0107 	ldrd	r0, r1, [r4, #28]
   1da04:	463b      	mov	r3, r7
   1da06:	aa01      	add	r2, sp, #4
   1da08:	f7fd ff14 	bl	1b834 <flash_area_write>
    if (rc) {
   1da0c:	4605      	mov	r5, r0
   1da0e:	b9c8      	cbnz	r0, 1da44 <fcb_append+0xf8>
        rc = FCB_ERR_FLASH;
        goto err;
    }
    append_loc->fe_area = active->fe_area;
   1da10:	69e3      	ldr	r3, [r4, #28]
   1da12:	f8c9 3000 	str.w	r3, [r9]
    append_loc->fe_elem_off = active->fe_elem_off;
   1da16:	6a23      	ldr	r3, [r4, #32]
   1da18:	f8c9 3004 	str.w	r3, [r9, #4]
    append_loc->fe_data_off = active->fe_elem_off + cnt;
   1da1c:	6a20      	ldr	r0, [r4, #32]
   1da1e:	4407      	add	r7, r0

    active->fe_elem_off = append_loc->fe_data_off + len;
   1da20:	19f3      	adds	r3, r6, r7
    append_loc->fe_data_off = active->fe_elem_off + cnt;
   1da22:	f8c9 7008 	str.w	r7, [r9, #8]
    active->fe_data_off = append_loc->fe_data_off;
   1da26:	e9c4 3708 	strd	r3, r7, [r4, #32]
    active->fe_data_len = len;
   1da2a:	8526      	strh	r6, [r4, #40]	; 0x28

    os_mutex_release(&fcb->f_mtx);

    return FCB_OK;
err:
    os_mutex_release(&fcb->f_mtx);
   1da2c:	4650      	mov	r0, sl
   1da2e:	f7ef fb9b 	bl	d168 <os_mutex_release>
    return rc;
}
   1da32:	4628      	mov	r0, r5
   1da34:	b003      	add	sp, #12
   1da36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } while (i++ < cnt);
   1da3a:	461d      	mov	r5, r3
   1da3c:	e7b7      	b.n	1d9ae <fcb_append+0x62>
            rc = FCB_ERR_NOSPACE;
   1da3e:	f06f 0503 	mvn.w	r5, #3
   1da42:	e7f3      	b.n	1da2c <fcb_append+0xe0>
        rc = FCB_ERR_FLASH;
   1da44:	f06f 0501 	mvn.w	r5, #1
   1da48:	e7f0      	b.n	1da2c <fcb_append+0xe0>
        return FCB_ERR_ARGS;
   1da4a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1da4e:	e7f0      	b.n	1da32 <fcb_append+0xe6>

0001da50 <fcb_append_finish>:

int
fcb_append_finish(struct fcb *fcb, struct fcb_entry *loc)
{
   1da50:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int rc;
    uint8_t crc8;
    uint32_t off;

    rc = fcb_elem_crc8(fcb, loc, &crc8);
   1da52:	f10d 0207 	add.w	r2, sp, #7
{
   1da56:	4605      	mov	r5, r0
   1da58:	460c      	mov	r4, r1
    rc = fcb_elem_crc8(fcb, loc, &crc8);
   1da5a:	f000 f814 	bl	1da86 <fcb_elem_crc8>
    if (rc) {
   1da5e:	b980      	cbnz	r0, 1da82 <fcb_append_finish+0x32>
        return rc;
    }
    off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   1da60:	89a1      	ldrh	r1, [r4, #12]
   1da62:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
   1da66:	f7ff ff4c 	bl	1d902 <fcb_len_in_flash.isra.0>
   1da6a:	68a1      	ldr	r1, [r4, #8]

    rc = flash_area_write(loc->fe_area, off, &crc8, sizeof(crc8));
   1da6c:	2301      	movs	r3, #1
   1da6e:	4401      	add	r1, r0
   1da70:	f10d 0207 	add.w	r2, sp, #7
   1da74:	6820      	ldr	r0, [r4, #0]
   1da76:	f7fd fedd 	bl	1b834 <flash_area_write>
    if (rc) {
        return FCB_ERR_FLASH;
   1da7a:	2800      	cmp	r0, #0
   1da7c:	bf18      	it	ne
   1da7e:	f06f 0001 	mvnne.w	r0, #1
    }
    return 0;
}
   1da82:	b003      	add	sp, #12
   1da84:	bd30      	pop	{r4, r5, pc}

0001da86 <fcb_elem_crc8>:
 * Given offset in flash area, fill in rest of the fcb_entry, and crc8 over
 * the data.
 */
int
fcb_elem_crc8(struct fcb *fcb, struct fcb_entry *loc, uint8_t *c8p)
{
   1da86:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1da8a:	4607      	mov	r7, r0
   1da8c:	460c      	mov	r4, r1
    uint16_t len;
    uint32_t off;
    uint32_t end;
    int rc;

    if (loc->fe_elem_off + 2 > loc->fe_area->fa_size) {
   1da8e:	e9d1 0100 	ldrd	r0, r1, [r1]
   1da92:	6883      	ldr	r3, [r0, #8]
{
   1da94:	4616      	mov	r6, r2
    if (loc->fe_elem_off + 2 > loc->fe_area->fa_size) {
   1da96:	1c8a      	adds	r2, r1, #2
   1da98:	429a      	cmp	r2, r3
{
   1da9a:	b08b      	sub	sp, #44	; 0x2c
    if (loc->fe_elem_off + 2 > loc->fe_area->fa_size) {
   1da9c:	d904      	bls.n	1daa8 <fcb_elem_crc8+0x22>
        return FCB_ERR_NOVAR;
   1da9e:	f06f 0002 	mvn.w	r0, #2
        crc8 = crc8_calc(crc8, tmp_str, blk_sz);
    }
    *c8p = crc8;

    return 0;
}
   1daa2:	b00b      	add	sp, #44	; 0x2c
   1daa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    rc = flash_area_read_is_empty(loc->fe_area, loc->fe_elem_off, tmp_str, 2);
   1daa8:	2302      	movs	r3, #2
   1daaa:	aa02      	add	r2, sp, #8
   1daac:	f7fd ff00 	bl	1b8b0 <flash_area_read_is_empty>
    if (rc < 0) {
   1dab0:	1e03      	subs	r3, r0, #0
   1dab2:	da02      	bge.n	1daba <fcb_elem_crc8+0x34>
        return FCB_ERR_FLASH;
   1dab4:	f06f 0001 	mvn.w	r0, #1
   1dab8:	e7f3      	b.n	1daa2 <fcb_elem_crc8+0x1c>
    } else if (rc == 1) {
   1daba:	2b01      	cmp	r3, #1
   1dabc:	d0ef      	beq.n	1da9e <fcb_elem_crc8+0x18>
    cnt = fcb_get_len(tmp_str, &len);
   1dabe:	f10d 0106 	add.w	r1, sp, #6
   1dac2:	a802      	add	r0, sp, #8
   1dac4:	f7ff fe4d 	bl	1d762 <fcb_get_len>
   1dac8:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
    loc->fe_data_off = loc->fe_elem_off + fcb_len_in_flash(fcb, cnt);
   1dacc:	6862      	ldr	r2, [r4, #4]
    if (fcb->f_align <= 1) {
   1dace:	2901      	cmp	r1, #1
   1dad0:	b283      	uxth	r3, r0
    cnt = fcb_get_len(tmp_str, &len);
   1dad2:	4605      	mov	r5, r0
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   1dad4:	bf81      	itttt	hi
   1dad6:	f101 30ff 	addhi.w	r0, r1, #4294967295	; 0xffffffff
   1dada:	181b      	addhi	r3, r3, r0
   1dadc:	4249      	neghi	r1, r1
   1dade:	400b      	andhi	r3, r1
    loc->fe_data_off = loc->fe_elem_off + fcb_len_in_flash(fcb, cnt);
   1dae0:	4413      	add	r3, r2
   1dae2:	60a3      	str	r3, [r4, #8]
    loc->fe_data_len = len;
   1dae4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1dae8:	81a3      	strh	r3, [r4, #12]
    crc8 = crc8_init();
   1daea:	f7f6 fcb5 	bl	14458 <crc8_init>
    crc8 = crc8_calc(crc8, tmp_str, cnt);
   1daee:	462a      	mov	r2, r5
   1daf0:	a902      	add	r1, sp, #8
   1daf2:	f7f6 fcb3 	bl	1445c <crc8_calc>
    off = loc->fe_data_off;
   1daf6:	68a7      	ldr	r7, [r4, #8]
    end = loc->fe_data_off + len;
   1daf8:	f8bd 9006 	ldrh.w	r9, [sp, #6]
    crc8 = crc8_calc(crc8, tmp_str, cnt);
   1dafc:	4605      	mov	r5, r0
    end = loc->fe_data_off + len;
   1dafe:	44b9      	add	r9, r7
    for (; off < end; off += blk_sz) {
   1db00:	454f      	cmp	r7, r9
   1db02:	d302      	bcc.n	1db0a <fcb_elem_crc8+0x84>
    *c8p = crc8;
   1db04:	7035      	strb	r5, [r6, #0]
    return 0;
   1db06:	2000      	movs	r0, #0
   1db08:	e7cb      	b.n	1daa2 <fcb_elem_crc8+0x1c>
        blk_sz = end - off;
   1db0a:	eba9 0807 	sub.w	r8, r9, r7
   1db0e:	f1b8 0f20 	cmp.w	r8, #32
   1db12:	bf28      	it	cs
   1db14:	f04f 0820 	movcs.w	r8, #32
        rc = flash_area_read(loc->fe_area, off, tmp_str, blk_sz);
   1db18:	6820      	ldr	r0, [r4, #0]
   1db1a:	4643      	mov	r3, r8
   1db1c:	aa02      	add	r2, sp, #8
   1db1e:	4639      	mov	r1, r7
   1db20:	f7fd fe76 	bl	1b810 <flash_area_read>
        if (rc) {
   1db24:	2800      	cmp	r0, #0
   1db26:	d1c5      	bne.n	1dab4 <fcb_elem_crc8+0x2e>
        crc8 = crc8_calc(crc8, tmp_str, blk_sz);
   1db28:	4628      	mov	r0, r5
   1db2a:	4642      	mov	r2, r8
   1db2c:	a902      	add	r1, sp, #8
   1db2e:	f7f6 fc95 	bl	1445c <crc8_calc>
    for (; off < end; off += blk_sz) {
   1db32:	4447      	add	r7, r8
        crc8 = crc8_calc(crc8, tmp_str, blk_sz);
   1db34:	4605      	mov	r5, r0
    for (; off < end; off += blk_sz) {
   1db36:	e7e3      	b.n	1db00 <fcb_elem_crc8+0x7a>

0001db38 <fcb_elem_info>:

int
fcb_elem_info(struct fcb *fcb, struct fcb_entry *loc)
{
   1db38:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int rc;
    uint8_t crc8;
    uint8_t fl_crc8;
    uint32_t off;

    rc = fcb_elem_crc8(fcb, loc, &crc8);
   1db3a:	f10d 0206 	add.w	r2, sp, #6
{
   1db3e:	4605      	mov	r5, r0
   1db40:	460c      	mov	r4, r1
    rc = fcb_elem_crc8(fcb, loc, &crc8);
   1db42:	f7ff ffa0 	bl	1da86 <fcb_elem_crc8>
    if (rc) {
   1db46:	b9d0      	cbnz	r0, 1db7e <fcb_elem_info+0x46>
        return rc;
    }
    off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   1db48:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
        return len;
   1db4c:	89a1      	ldrh	r1, [r4, #12]
   1db4e:	68a0      	ldr	r0, [r4, #8]
    if (fcb->f_align <= 1) {
   1db50:	2b01      	cmp	r3, #1
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   1db52:	bf81      	itttt	hi
   1db54:	f103 32ff 	addhi.w	r2, r3, #4294967295	; 0xffffffff
   1db58:	1889      	addhi	r1, r1, r2
   1db5a:	425b      	neghi	r3, r3
   1db5c:	4019      	andhi	r1, r3

    rc = flash_area_read(loc->fe_area, off, &fl_crc8, sizeof(fl_crc8));
   1db5e:	4401      	add	r1, r0
   1db60:	2301      	movs	r3, #1
   1db62:	6820      	ldr	r0, [r4, #0]
   1db64:	f10d 0207 	add.w	r2, sp, #7
   1db68:	f7fd fe52 	bl	1b810 <flash_area_read>
    if (rc) {
   1db6c:	b948      	cbnz	r0, 1db82 <fcb_elem_info+0x4a>
        return FCB_ERR_FLASH;
    }

    if (fl_crc8 != crc8) {
   1db6e:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1db72:	f89d 3006 	ldrb.w	r3, [sp, #6]
        return FCB_ERR_CRC;
   1db76:	429a      	cmp	r2, r3
   1db78:	bf18      	it	ne
   1db7a:	f06f 0005 	mvnne.w	r0, #5
    }
    return 0;
}
   1db7e:	b003      	add	sp, #12
   1db80:	bd30      	pop	{r4, r5, pc}
        return FCB_ERR_FLASH;
   1db82:	f06f 0001 	mvn.w	r0, #1
   1db86:	e7fa      	b.n	1db7e <fcb_elem_info+0x46>

0001db88 <fcb_getnext_in_area>:
#include "fcb/fcb.h"
#include "fcb_priv.h"

int
fcb_getnext_in_area(struct fcb *fcb, struct fcb_entry *loc)
{
   1db88:	b538      	push	{r3, r4, r5, lr}
   1db8a:	4605      	mov	r5, r0
   1db8c:	460c      	mov	r4, r1
    int rc;

    rc = fcb_elem_info(fcb, loc);
   1db8e:	f7ff ffd3 	bl	1db38 <fcb_elem_info>
    if (rc == 0 || rc == FCB_ERR_CRC) {
   1db92:	b108      	cbz	r0, 1db98 <fcb_getnext_in_area+0x10>
   1db94:	1d83      	adds	r3, r0, #6
   1db96:	d117      	bne.n	1dbc8 <fcb_getnext_in_area+0x40>
        do {
            loc->fe_elem_off = loc->fe_data_off +
   1db98:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
   1db9c:	89a3      	ldrh	r3, [r4, #12]
   1db9e:	68a2      	ldr	r2, [r4, #8]
    if (fcb->f_align <= 1) {
   1dba0:	2901      	cmp	r1, #1
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   1dba2:	bf81      	itttt	hi
   1dba4:	f101 30ff 	addhi.w	r0, r1, #4294967295	; 0xffffffff
   1dba8:	181b      	addhi	r3, r3, r0
   1dbaa:	4248      	neghi	r0, r1
   1dbac:	4003      	andhi	r3, r0
    if (fcb->f_align <= 1) {
   1dbae:	2901      	cmp	r1, #1
   1dbb0:	4413      	add	r3, r2
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   1dbb2:	bf86      	itte	hi
   1dbb4:	424a      	neghi	r2, r1
   1dbb6:	400a      	andhi	r2, r1
        return len;
   1dbb8:	2201      	movls	r2, #1
              fcb_len_in_flash(fcb, loc->fe_data_len) +
   1dbba:	4413      	add	r3, r2
            loc->fe_elem_off = loc->fe_data_off +
   1dbbc:	6063      	str	r3, [r4, #4]
              fcb_len_in_flash(fcb, FCB_CRC_SZ);
            rc = fcb_elem_info(fcb, loc);
   1dbbe:	4621      	mov	r1, r4
   1dbc0:	4628      	mov	r0, r5
   1dbc2:	f7ff ffb9 	bl	1db38 <fcb_elem_info>
            if (rc != FCB_ERR_CRC) {
   1dbc6:	e7e5      	b.n	1db94 <fcb_getnext_in_area+0xc>
                break;
            }
        } while (rc == FCB_ERR_CRC);
    }
    return rc;
}
   1dbc8:	bd38      	pop	{r3, r4, r5, pc}

0001dbca <fcb_getnext_area>:

struct flash_area *
fcb_getnext_area(struct fcb *fcb, struct flash_area *fap)
{
    fap++;
    if (fap >= &fcb->f_sectors[fcb->f_sector_cnt]) {
   1dbca:	7943      	ldrb	r3, [r0, #5]
   1dbcc:	6882      	ldr	r2, [r0, #8]
   1dbce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    fap++;
   1dbd2:	310c      	adds	r1, #12
    if (fap >= &fcb->f_sectors[fcb->f_sector_cnt]) {
   1dbd4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
        fap = &fcb->f_sectors[0];
    }
    return fap;
}
   1dbd8:	4299      	cmp	r1, r3
   1dbda:	bf34      	ite	cc
   1dbdc:	4608      	movcc	r0, r1
   1dbde:	4610      	movcs	r0, r2
   1dbe0:	4770      	bx	lr

0001dbe2 <fcb_getnext_nolock>:
int
fcb_getnext_nolock(struct fcb *fcb, struct fcb_entry *loc)
{
    int rc;

    if (loc->fe_area == NULL) {
   1dbe2:	680b      	ldr	r3, [r1, #0]
{
   1dbe4:	b570      	push	{r4, r5, r6, lr}
   1dbe6:	4605      	mov	r5, r0
   1dbe8:	460c      	mov	r4, r1
    if (loc->fe_area == NULL) {
   1dbea:	b90b      	cbnz	r3, 1dbf0 <fcb_getnext_nolock+0xe>
        /*
         * Find the first one we have in flash.
         */
        loc->fe_area = fcb->f_oldest;
   1dbec:	6983      	ldr	r3, [r0, #24]
   1dbee:	600b      	str	r3, [r1, #0]
    }
    if (loc->fe_elem_off == 0) {
   1dbf0:	6863      	ldr	r3, [r4, #4]
   1dbf2:	b953      	cbnz	r3, 1dc0a <fcb_getnext_nolock+0x28>
        /*
         * If offset is zero, we serve the first entry from the area.
         */
        loc->fe_elem_off = sizeof(struct fcb_disk_area);
   1dbf4:	2308      	movs	r3, #8
   1dbf6:	6063      	str	r3, [r4, #4]
        rc = fcb_elem_info(fcb, loc);
   1dbf8:	4621      	mov	r1, r4
   1dbfa:	4628      	mov	r0, r5
   1dbfc:	f7ff ff9c 	bl	1db38 <fcb_elem_info>
    } else {
        rc = fcb_getnext_in_area(fcb, loc);
    }
    switch (rc) {
   1dc00:	1d82      	adds	r2, r0, #6
   1dc02:	d007      	beq.n	1dc14 <fcb_getnext_nolock+0x32>
   1dc04:	b970      	cbnz	r0, 1dc24 <fcb_getnext_nolock+0x42>
    case 0:
        return 0;
   1dc06:	2000      	movs	r0, #0
            }
        }
    }

    return 0;
}
   1dc08:	bd70      	pop	{r4, r5, r6, pc}
        rc = fcb_getnext_in_area(fcb, loc);
   1dc0a:	4621      	mov	r1, r4
   1dc0c:	4628      	mov	r0, r5
   1dc0e:	f7ff ffbb 	bl	1db88 <fcb_getnext_in_area>
   1dc12:	e7f5      	b.n	1dc00 <fcb_getnext_nolock+0x1e>
        rc = fcb_getnext_in_area(fcb, loc);
   1dc14:	4621      	mov	r1, r4
   1dc16:	4628      	mov	r0, r5
   1dc18:	f7ff ffb6 	bl	1db88 <fcb_getnext_in_area>
        if (rc == 0) {
   1dc1c:	2800      	cmp	r0, #0
   1dc1e:	d0f3      	beq.n	1dc08 <fcb_getnext_nolock+0x26>
        if (rc != FCB_ERR_CRC) {
   1dc20:	3006      	adds	r0, #6
   1dc22:	d0f7      	beq.n	1dc14 <fcb_getnext_nolock+0x32>
            loc->fe_elem_off = sizeof(struct fcb_disk_area);
   1dc24:	2608      	movs	r6, #8
            if (loc->fe_area == fcb->f_active.fe_area) {
   1dc26:	6821      	ldr	r1, [r4, #0]
   1dc28:	69eb      	ldr	r3, [r5, #28]
   1dc2a:	4299      	cmp	r1, r3
   1dc2c:	d00d      	beq.n	1dc4a <fcb_getnext_nolock+0x68>
            loc->fe_area = fcb_getnext_area(fcb, loc->fe_area);
   1dc2e:	4628      	mov	r0, r5
   1dc30:	f7ff ffcb 	bl	1dbca <fcb_getnext_area>
            rc = fcb_elem_info(fcb, loc);
   1dc34:	4621      	mov	r1, r4
            loc->fe_elem_off = sizeof(struct fcb_disk_area);
   1dc36:	e9c4 0600 	strd	r0, r6, [r4]
            rc = fcb_elem_info(fcb, loc);
   1dc3a:	4628      	mov	r0, r5
   1dc3c:	f7ff ff7c 	bl	1db38 <fcb_elem_info>
            switch (rc) {
   1dc40:	1d83      	adds	r3, r0, #6
   1dc42:	d0e7      	beq.n	1dc14 <fcb_getnext_nolock+0x32>
   1dc44:	2800      	cmp	r0, #0
   1dc46:	d0de      	beq.n	1dc06 <fcb_getnext_nolock+0x24>
   1dc48:	e7ed      	b.n	1dc26 <fcb_getnext_nolock+0x44>
                return FCB_ERR_NOVAR;
   1dc4a:	f06f 0002 	mvn.w	r0, #2
   1dc4e:	e7db      	b.n	1dc08 <fcb_getnext_nolock+0x26>

0001dc50 <fcb_getnext>:

int
fcb_getnext(struct fcb *fcb, struct fcb_entry *loc)
{
   1dc50:	b570      	push	{r4, r5, r6, lr}
    int rc;

    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   1dc52:	f100 060c 	add.w	r6, r0, #12
{
   1dc56:	4604      	mov	r4, r0
   1dc58:	460d      	mov	r5, r1
    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   1dc5a:	4630      	mov	r0, r6
   1dc5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1dc60:	f7ef fad4 	bl	d20c <os_mutex_pend>
    if (rc && rc != OS_NOT_STARTED) {
   1dc64:	b108      	cbz	r0, 1dc6a <fcb_getnext+0x1a>
   1dc66:	2809      	cmp	r0, #9
   1dc68:	d109      	bne.n	1dc7e <fcb_getnext+0x2e>
        return FCB_ERR_ARGS;
    }
    rc = fcb_getnext_nolock(fcb, loc);
   1dc6a:	4620      	mov	r0, r4
   1dc6c:	4629      	mov	r1, r5
   1dc6e:	f7ff ffb8 	bl	1dbe2 <fcb_getnext_nolock>
   1dc72:	4604      	mov	r4, r0
    os_mutex_release(&fcb->f_mtx);
   1dc74:	4630      	mov	r0, r6
   1dc76:	f7ef fa77 	bl	d168 <os_mutex_release>

    return rc;
}
   1dc7a:	4620      	mov	r0, r4
   1dc7c:	bd70      	pop	{r4, r5, r6, pc}
        return FCB_ERR_ARGS;
   1dc7e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1dc82:	e7fa      	b.n	1dc7a <fcb_getnext+0x2a>

0001dc84 <fcb_rotate>:
#include "fcb/fcb.h"
#include "fcb_priv.h"

int
fcb_rotate(struct fcb *fcb)
{
   1dc84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct flash_area *fap;
    int rc = 0;

    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   1dc86:	f100 070c 	add.w	r7, r0, #12
{
   1dc8a:	4604      	mov	r4, r0
    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   1dc8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1dc90:	4638      	mov	r0, r7
   1dc92:	f7ef fabb 	bl	d20c <os_mutex_pend>
    if (rc && rc != OS_NOT_STARTED) {
   1dc96:	b108      	cbz	r0, 1dc9c <fcb_rotate+0x18>
   1dc98:	2809      	cmp	r0, #9
   1dc9a:	d12a      	bne.n	1dcf2 <fcb_rotate+0x6e>
        return FCB_ERR_ARGS;
    }

    rc = flash_area_erase(fcb->f_oldest, 0, fcb->f_oldest->fa_size);
   1dc9c:	69a0      	ldr	r0, [r4, #24]
   1dc9e:	2100      	movs	r1, #0
   1dca0:	6882      	ldr	r2, [r0, #8]
   1dca2:	f7fd fdd9 	bl	1b858 <flash_area_erase>
    if (rc) {
   1dca6:	bb08      	cbnz	r0, 1dcec <fcb_rotate+0x68>
        rc = FCB_ERR_FLASH;
        goto out;
    }
    if (fcb->f_oldest == fcb->f_active.fe_area) {
   1dca8:	e9d4 1306 	ldrd	r1, r3, [r4, #24]
   1dcac:	4299      	cmp	r1, r3
   1dcae:	d112      	bne.n	1dcd6 <fcb_rotate+0x52>
        /*
         * Need to create a new active area, as we're wiping the current.
         */
        fap = fcb_getnext_area(fcb, fcb->f_oldest);
   1dcb0:	4620      	mov	r0, r4
   1dcb2:	f7ff ff8a 	bl	1dbca <fcb_getnext_area>
        rc = fcb_sector_hdr_init(fcb, fap, fcb->f_active_id + 1);
   1dcb6:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   1dcb8:	3201      	adds	r2, #1
   1dcba:	4601      	mov	r1, r0
        fap = fcb_getnext_area(fcb, fcb->f_oldest);
   1dcbc:	4606      	mov	r6, r0
        rc = fcb_sector_hdr_init(fcb, fap, fcb->f_active_id + 1);
   1dcbe:	b292      	uxth	r2, r2
   1dcc0:	4620      	mov	r0, r4
   1dcc2:	f7ff fd5e 	bl	1d782 <fcb_sector_hdr_init>
        if (rc) {
   1dcc6:	4605      	mov	r5, r0
   1dcc8:	b958      	cbnz	r0, 1dce2 <fcb_rotate+0x5e>
            goto out;
        }
        fcb->f_active.fe_area = fap;
        fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   1dcca:	2308      	movs	r3, #8
   1dccc:	6223      	str	r3, [r4, #32]
        fcb->f_active_id++;
   1dcce:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
        fcb->f_active.fe_area = fap;
   1dcd0:	61e6      	str	r6, [r4, #28]
        fcb->f_active_id++;
   1dcd2:	3301      	adds	r3, #1
   1dcd4:	85a3      	strh	r3, [r4, #44]	; 0x2c
    }
    fcb->f_oldest = fcb_getnext_area(fcb, fcb->f_oldest);
   1dcd6:	69a1      	ldr	r1, [r4, #24]
   1dcd8:	4620      	mov	r0, r4
   1dcda:	f7ff ff76 	bl	1dbca <fcb_getnext_area>
   1dcde:	2500      	movs	r5, #0
   1dce0:	61a0      	str	r0, [r4, #24]
out:
    os_mutex_release(&fcb->f_mtx);
   1dce2:	4638      	mov	r0, r7
   1dce4:	f7ef fa40 	bl	d168 <os_mutex_release>
    return rc;
}
   1dce8:	4628      	mov	r0, r5
   1dcea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = FCB_ERR_FLASH;
   1dcec:	f06f 0501 	mvn.w	r5, #1
   1dcf0:	e7f7      	b.n	1dce2 <fcb_rotate+0x5e>
        return FCB_ERR_ARGS;
   1dcf2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1dcf6:	e7f7      	b.n	1dce8 <fcb_rotate+0x64>

0001dcf8 <fcb_walk>:
 * Call 'cb' for every element in flash circular buffer. If fap is specified,
 * only elements with that flash_area are reported.
 */
int
fcb_walk(struct fcb *fcb, struct flash_area *fap, fcb_walk_cb cb, void *cb_arg)
{
   1dcf8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    int rc;

    loc.fe_area = fap;
    loc.fe_elem_off = 0;

    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   1dcfc:	f100 050c 	add.w	r5, r0, #12
{
   1dd00:	4606      	mov	r6, r0
   1dd02:	460c      	mov	r4, r1
   1dd04:	4698      	mov	r8, r3
    loc.fe_area = fap;
   1dd06:	9100      	str	r1, [sp, #0]
    loc.fe_elem_off = 0;
   1dd08:	2300      	movs	r3, #0
    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   1dd0a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1dd0e:	4628      	mov	r0, r5
{
   1dd10:	4617      	mov	r7, r2
    loc.fe_elem_off = 0;
   1dd12:	9301      	str	r3, [sp, #4]
    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   1dd14:	f7ef fa7a 	bl	d20c <os_mutex_pend>
    if (rc && rc != OS_NOT_STARTED) {
   1dd18:	b1b0      	cbz	r0, 1dd48 <fcb_walk+0x50>
   1dd1a:	2809      	cmp	r0, #9
   1dd1c:	d014      	beq.n	1dd48 <fcb_walk+0x50>
        return FCB_ERR_ARGS;
   1dd1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        }
        os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
    }
    os_mutex_release(&fcb->f_mtx);
    return 0;
}
   1dd22:	b004      	add	sp, #16
   1dd24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        os_mutex_release(&fcb->f_mtx);
   1dd28:	f7ef fa1e 	bl	d168 <os_mutex_release>
        if (fap && loc.fe_area != fap) {
   1dd2c:	b114      	cbz	r4, 1dd34 <fcb_walk+0x3c>
   1dd2e:	9b00      	ldr	r3, [sp, #0]
   1dd30:	42a3      	cmp	r3, r4
   1dd32:	d112      	bne.n	1dd5a <fcb_walk+0x62>
        rc = cb(&loc, cb_arg);
   1dd34:	4641      	mov	r1, r8
   1dd36:	4668      	mov	r0, sp
   1dd38:	47b8      	blx	r7
        if (rc) {
   1dd3a:	2800      	cmp	r0, #0
   1dd3c:	d1f1      	bne.n	1dd22 <fcb_walk+0x2a>
        os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   1dd3e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1dd42:	4628      	mov	r0, r5
   1dd44:	f7ef fa62 	bl	d20c <os_mutex_pend>
    while ((rc = fcb_getnext_nolock(fcb, &loc)) != FCB_ERR_NOVAR) {
   1dd48:	4669      	mov	r1, sp
   1dd4a:	4630      	mov	r0, r6
   1dd4c:	f7ff ff49 	bl	1dbe2 <fcb_getnext_nolock>
   1dd50:	3003      	adds	r0, #3
        os_mutex_release(&fcb->f_mtx);
   1dd52:	4628      	mov	r0, r5
    while ((rc = fcb_getnext_nolock(fcb, &loc)) != FCB_ERR_NOVAR) {
   1dd54:	d1e8      	bne.n	1dd28 <fcb_walk+0x30>
    os_mutex_release(&fcb->f_mtx);
   1dd56:	f7ef fa07 	bl	d168 <os_mutex_release>
            return 0;
   1dd5a:	2000      	movs	r0, #0
   1dd5c:	e7e1      	b.n	1dd22 <fcb_walk+0x2a>

0001dd5e <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
   1dd5e:	6843      	ldr	r3, [r0, #4]
   1dd60:	428b      	cmp	r3, r1
   1dd62:	d807      	bhi.n	1dd74 <hal_flash_check_addr+0x16>
   1dd64:	6882      	ldr	r2, [r0, #8]
   1dd66:	4413      	add	r3, r2
        return SYS_EINVAL;
    }
    return 0;
   1dd68:	428b      	cmp	r3, r1
   1dd6a:	bf34      	ite	cc
   1dd6c:	f06f 0001 	mvncc.w	r0, #1
   1dd70:	2000      	movcs	r0, #0
   1dd72:	4770      	bx	lr
        return SYS_EINVAL;
   1dd74:	f06f 0001 	mvn.w	r0, #1
}
   1dd78:	4770      	bx	lr

0001dd7a <hal_flash_init>:
{
   1dd7a:	b538      	push	{r3, r4, r5, lr}
   1dd7c:	2400      	movs	r4, #0
    int rc = 0;
   1dd7e:	4625      	mov	r5, r4
        hf = hal_bsp_flash_dev(i);
   1dd80:	b2e0      	uxtb	r0, r4
   1dd82:	f7f7 fba1 	bl	154c8 <hal_bsp_flash_dev>
        if (!hf) {
   1dd86:	b140      	cbz	r0, 1dd9a <hal_flash_init+0x20>
        if (hf->hf_itf->hff_init(hf)) {
   1dd88:	6803      	ldr	r3, [r0, #0]
   1dd8a:	695b      	ldr	r3, [r3, #20]
   1dd8c:	4798      	blx	r3
            rc = SYS_EIO;
   1dd8e:	2800      	cmp	r0, #0
   1dd90:	bf18      	it	ne
   1dd92:	f06f 0504 	mvnne.w	r5, #4
    for (i = 0; ; i++) {
   1dd96:	3401      	adds	r4, #1
        hf = hal_bsp_flash_dev(i);
   1dd98:	e7f2      	b.n	1dd80 <hal_flash_init+0x6>
}
   1dd9a:	4628      	mov	r0, r5
   1dd9c:	bd38      	pop	{r3, r4, r5, pc}

0001dd9e <hal_flash_align>:
{
   1dd9e:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
   1dda0:	f7f7 fb92 	bl	154c8 <hal_bsp_flash_dev>
    if (!hf) {
   1dda4:	b108      	cbz	r0, 1ddaa <hal_flash_align+0xc>
    return hf->hf_align;
   1dda6:	7c00      	ldrb	r0, [r0, #16]
}
   1dda8:	bd08      	pop	{r3, pc}
        return 1;
   1ddaa:	2001      	movs	r0, #1
   1ddac:	e7fc      	b.n	1dda8 <hal_flash_align+0xa>

0001ddae <hal_flash_erased_val>:
{
   1ddae:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
   1ddb0:	f7f7 fb8a 	bl	154c8 <hal_bsp_flash_dev>
    if (!hf) {
   1ddb4:	b108      	cbz	r0, 1ddba <hal_flash_erased_val+0xc>
    return hf->hf_erased_val;
   1ddb6:	7d00      	ldrb	r0, [r0, #20]
}
   1ddb8:	bd08      	pop	{r3, pc}
        return 1;
   1ddba:	2001      	movs	r0, #1
   1ddbc:	e7fc      	b.n	1ddb8 <hal_flash_erased_val+0xa>

0001ddbe <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
   1ddbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ddc2:	460d      	mov	r5, r1
   1ddc4:	4617      	mov	r7, r2
   1ddc6:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   1ddc8:	f7f7 fb7e 	bl	154c8 <hal_bsp_flash_dev>
    if (!hf) {
   1ddcc:	4604      	mov	r4, r0
   1ddce:	b1b0      	cbz	r0, 1ddfe <hal_flash_read+0x40>
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   1ddd0:	4629      	mov	r1, r5
   1ddd2:	f7ff ffc4 	bl	1dd5e <hal_flash_check_addr>
   1ddd6:	b990      	cbnz	r0, 1ddfe <hal_flash_read+0x40>
      hal_flash_check_addr(hf, address + num_bytes)) {
   1ddd8:	19a9      	adds	r1, r5, r6
   1ddda:	4620      	mov	r0, r4
   1dddc:	f7ff ffbf 	bl	1dd5e <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   1dde0:	b968      	cbnz	r0, 1ddfe <hal_flash_read+0x40>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
   1dde2:	6823      	ldr	r3, [r4, #0]
   1dde4:	463a      	mov	r2, r7
   1dde6:	f8d3 8000 	ldr.w	r8, [r3]
   1ddea:	4629      	mov	r1, r5
   1ddec:	4633      	mov	r3, r6
   1ddee:	4620      	mov	r0, r4
   1ddf0:	47c0      	blx	r8
    if (rc != 0) {
        return SYS_EIO;
   1ddf2:	2800      	cmp	r0, #0
   1ddf4:	bf18      	it	ne
   1ddf6:	f06f 0004 	mvnne.w	r0, #4
    }

    return 0;
}
   1ddfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
   1ddfe:	f06f 0001 	mvn.w	r0, #1
   1de02:	e7fa      	b.n	1ddfa <hal_flash_read+0x3c>

0001de04 <hal_flash_write>:
#endif

int
hal_flash_write(uint8_t id, uint32_t address, const void *src,
  uint32_t num_bytes)
{
   1de04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1de08:	4605      	mov	r5, r0
   1de0a:	460e      	mov	r6, r1
   1de0c:	4690      	mov	r8, r2
   1de0e:	461f      	mov	r7, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   1de10:	f7f7 fb5a 	bl	154c8 <hal_bsp_flash_dev>
    if (!hf) {
   1de14:	4604      	mov	r4, r0
   1de16:	b1f0      	cbz	r0, 1de56 <hal_flash_write+0x52>
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   1de18:	4631      	mov	r1, r6
   1de1a:	f7ff ffa0 	bl	1dd5e <hal_flash_check_addr>
   1de1e:	b9d0      	cbnz	r0, 1de56 <hal_flash_write+0x52>
      hal_flash_check_addr(hf, address + num_bytes)) {
   1de20:	19f1      	adds	r1, r6, r7
   1de22:	4620      	mov	r0, r4
   1de24:	f7ff ff9b 	bl	1dd5e <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   1de28:	b9a8      	cbnz	r0, 1de56 <hal_flash_write+0x52>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
   1de2a:	08eb      	lsrs	r3, r5, #3
   1de2c:	4a0d      	ldr	r2, [pc, #52]	; (1de64 <hal_flash_write+0x60>)
   1de2e:	5cd0      	ldrb	r0, [r2, r3]
   1de30:	f005 0507 	and.w	r5, r5, #7
   1de34:	fa40 f505 	asr.w	r5, r0, r5
   1de38:	07eb      	lsls	r3, r5, #31
   1de3a:	d40f      	bmi.n	1de5c <hal_flash_write+0x58>
        return SYS_EACCES;
    }

    rc = hf->hf_itf->hff_write(hf, address, src, num_bytes);
   1de3c:	6823      	ldr	r3, [r4, #0]
   1de3e:	4642      	mov	r2, r8
   1de40:	685d      	ldr	r5, [r3, #4]
   1de42:	4631      	mov	r1, r6
   1de44:	463b      	mov	r3, r7
   1de46:	4620      	mov	r0, r4
   1de48:	47a8      	blx	r5
    if (rc != 0) {
        return SYS_EIO;
   1de4a:	2800      	cmp	r0, #0
   1de4c:	bf18      	it	ne
   1de4e:	f06f 0004 	mvnne.w	r0, #4
#if MYNEWT_VAL(HAL_FLASH_VERIFY_WRITES)
    assert(hal_flash_cmp(hf, address, src, num_bytes) == 0);
#endif

    return 0;
}
   1de52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
   1de56:	f06f 0001 	mvn.w	r0, #1
   1de5a:	e7fa      	b.n	1de52 <hal_flash_write+0x4e>
        return SYS_EACCES;
   1de5c:	f06f 0006 	mvn.w	r0, #6
   1de60:	e7f7      	b.n	1de52 <hal_flash_write+0x4e>
   1de62:	bf00      	nop
   1de64:	20007418 	.word	0x20007418

0001de68 <hal_flash_erase>:
    return 0;
}

int
hal_flash_erase(uint8_t id, uint32_t address, uint32_t num_bytes)
{
   1de68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1de6c:	4605      	mov	r5, r0
   1de6e:	460f      	mov	r7, r1
   1de70:	4690      	mov	r8, r2
    uint32_t end;
    uint32_t end_area;
    int i;
    int rc;

    hf = hal_bsp_flash_dev(id);
   1de72:	f7f7 fb29 	bl	154c8 <hal_bsp_flash_dev>
    if (!hf) {
   1de76:	4606      	mov	r6, r0
   1de78:	2800      	cmp	r0, #0
   1de7a:	d04b      	beq.n	1df14 <hal_flash_erase+0xac>
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   1de7c:	4639      	mov	r1, r7
   1de7e:	f7ff ff6e 	bl	1dd5e <hal_flash_check_addr>
   1de82:	2800      	cmp	r0, #0
   1de84:	d146      	bne.n	1df14 <hal_flash_erase+0xac>
      hal_flash_check_addr(hf, address + num_bytes)) {
   1de86:	eb07 0908 	add.w	r9, r7, r8
   1de8a:	4649      	mov	r1, r9
   1de8c:	4630      	mov	r0, r6
   1de8e:	f7ff ff66 	bl	1dd5e <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   1de92:	2800      	cmp	r0, #0
   1de94:	d13e      	bne.n	1df14 <hal_flash_erase+0xac>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
   1de96:	08eb      	lsrs	r3, r5, #3
   1de98:	4a20      	ldr	r2, [pc, #128]	; (1df1c <hal_flash_erase+0xb4>)
   1de9a:	5cd4      	ldrb	r4, [r2, r3]
   1de9c:	f005 0507 	and.w	r5, r5, #7
   1dea0:	412c      	asrs	r4, r5
   1dea2:	f014 0401 	ands.w	r4, r4, #1
   1dea6:	d132      	bne.n	1df0e <hal_flash_erase+0xa6>
        return SYS_EACCES;
    }

    end = address + num_bytes;
    if (end <= address) {
   1dea8:	45b9      	cmp	r9, r7
   1deaa:	d933      	bls.n	1df14 <hal_flash_erase+0xac>
         * Check for wrap-around.
         */
        return SYS_EINVAL;
    }

    if (hf->hf_itf->hff_erase) {
   1deac:	6833      	ldr	r3, [r6, #0]
   1deae:	699b      	ldr	r3, [r3, #24]
   1deb0:	b35b      	cbz	r3, 1df0a <hal_flash_erase+0xa2>
        hf->hf_itf->hff_erase(hf, address, num_bytes);
   1deb2:	4642      	mov	r2, r8
   1deb4:	4639      	mov	r1, r7
   1deb6:	4630      	mov	r0, r6
   1deb8:	4798      	blx	r3
#endif
            }
        }
    }
    return 0;
}
   1deba:	4620      	mov	r0, r4
   1debc:	b003      	add	sp, #12
   1debe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            end_area = start + size;
   1dec2:	e9dd 1300 	ldrd	r1, r3, [sp]
   1dec6:	440b      	add	r3, r1
            if (address < end_area && end > start) {
   1dec8:	429f      	cmp	r7, r3
   1deca:	d313      	bcc.n	1def4 <hal_flash_erase+0x8c>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
   1decc:	3501      	adds	r5, #1
   1dece:	68f3      	ldr	r3, [r6, #12]
   1ded0:	42ab      	cmp	r3, r5
   1ded2:	ddf2      	ble.n	1deba <hal_flash_erase+0x52>
            rc = hf->hf_itf->hff_sector_info(hf, i, &start, &size);
   1ded4:	6833      	ldr	r3, [r6, #0]
   1ded6:	466a      	mov	r2, sp
   1ded8:	f8d3 800c 	ldr.w	r8, [r3, #12]
   1dedc:	4629      	mov	r1, r5
   1dede:	ab01      	add	r3, sp, #4
   1dee0:	4630      	mov	r0, r6
   1dee2:	47c0      	blx	r8
            assert(rc == 0);
   1dee4:	2800      	cmp	r0, #0
   1dee6:	d0ec      	beq.n	1dec2 <hal_flash_erase+0x5a>
   1dee8:	2300      	movs	r3, #0
   1deea:	461a      	mov	r2, r3
   1deec:	4619      	mov	r1, r3
   1deee:	4618      	mov	r0, r3
   1def0:	f7ee fc84 	bl	c7fc <__assert_func>
            if (address < end_area && end > start) {
   1def4:	4589      	cmp	r9, r1
   1def6:	d9e9      	bls.n	1decc <hal_flash_erase+0x64>
                if (hf->hf_itf->hff_erase_sector(hf, start)) {
   1def8:	6833      	ldr	r3, [r6, #0]
   1defa:	4630      	mov	r0, r6
   1defc:	689b      	ldr	r3, [r3, #8]
   1defe:	4798      	blx	r3
   1df00:	2800      	cmp	r0, #0
   1df02:	d0e3      	beq.n	1decc <hal_flash_erase+0x64>
                    return SYS_EIO;
   1df04:	f06f 0404 	mvn.w	r4, #4
   1df08:	e7d7      	b.n	1deba <hal_flash_erase+0x52>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
   1df0a:	4625      	mov	r5, r4
   1df0c:	e7df      	b.n	1dece <hal_flash_erase+0x66>
        return SYS_EACCES;
   1df0e:	f06f 0406 	mvn.w	r4, #6
   1df12:	e7d2      	b.n	1deba <hal_flash_erase+0x52>
        return SYS_EINVAL;
   1df14:	f06f 0401 	mvn.w	r4, #1
   1df18:	e7cf      	b.n	1deba <hal_flash_erase+0x52>
   1df1a:	bf00      	nop
   1df1c:	20007418 	.word	0x20007418

0001df20 <hal_flash_is_erased>:

int
hal_flash_is_erased(const struct hal_flash *hf, uint32_t address, void *dst,
        uint32_t num_bytes)
{
   1df20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t *buf;
    int rc;

    buf = dst;

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
   1df22:	6807      	ldr	r7, [r0, #0]
   1df24:	683f      	ldr	r7, [r7, #0]
{
   1df26:	4606      	mov	r6, r0
   1df28:	4614      	mov	r4, r2
   1df2a:	461d      	mov	r5, r3
    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
   1df2c:	47b8      	blx	r7
    if (rc != 0) {
   1df2e:	b958      	cbnz	r0, 1df48 <hal_flash_is_erased+0x28>
   1df30:	4622      	mov	r2, r4
   1df32:	4425      	add	r5, r4
        return SYS_EIO;
    }

    for (i = 0; i < num_bytes; i++) {
   1df34:	4295      	cmp	r5, r2
   1df36:	d101      	bne.n	1df3c <hal_flash_is_erased+0x1c>
        if (buf[i] != hf->hf_erased_val) {
            return 0;
        }
    }
    return 1;
   1df38:	2001      	movs	r0, #1
   1df3a:	e004      	b.n	1df46 <hal_flash_is_erased+0x26>
        if (buf[i] != hf->hf_erased_val) {
   1df3c:	f812 3b01 	ldrb.w	r3, [r2], #1
   1df40:	7d31      	ldrb	r1, [r6, #20]
   1df42:	4299      	cmp	r1, r3
   1df44:	d0f6      	beq.n	1df34 <hal_flash_is_erased+0x14>
}
   1df46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return SYS_EIO;
   1df48:	f06f 0004 	mvn.w	r0, #4
   1df4c:	e7fb      	b.n	1df46 <hal_flash_is_erased+0x26>

0001df4e <hal_flash_isempty>:

int
hal_flash_isempty(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
   1df4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1df50:	460d      	mov	r5, r1
   1df52:	e9cd 3200 	strd	r3, r2, [sp]
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   1df56:	f7f7 fab7 	bl	154c8 <hal_bsp_flash_dev>
    if (!hf) {
   1df5a:	4604      	mov	r4, r0
   1df5c:	b1e0      	cbz	r0, 1df98 <hal_flash_isempty+0x4a>
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   1df5e:	4629      	mov	r1, r5
   1df60:	f7ff fefd 	bl	1dd5e <hal_flash_check_addr>
   1df64:	b9c0      	cbnz	r0, 1df98 <hal_flash_isempty+0x4a>
      hal_flash_check_addr(hf, address + num_bytes)) {
   1df66:	9b00      	ldr	r3, [sp, #0]
   1df68:	4620      	mov	r0, r4
   1df6a:	18e9      	adds	r1, r5, r3
   1df6c:	f7ff fef7 	bl	1dd5e <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   1df70:	b990      	cbnz	r0, 1df98 <hal_flash_isempty+0x4a>
        return SYS_EINVAL;
    }
    if (hf->hf_itf->hff_is_empty) {
   1df72:	6821      	ldr	r1, [r4, #0]
   1df74:	690e      	ldr	r6, [r1, #16]
   1df76:	e9dd 3200 	ldrd	r3, r2, [sp]
        rc = hf->hf_itf->hff_is_empty(hf, address, dst, num_bytes);
   1df7a:	4629      	mov	r1, r5
   1df7c:	4620      	mov	r0, r4
    if (hf->hf_itf->hff_is_empty) {
   1df7e:	b136      	cbz	r6, 1df8e <hal_flash_isempty+0x40>
        rc = hf->hf_itf->hff_is_empty(hf, address, dst, num_bytes);
   1df80:	47b0      	blx	r6
        if (rc < 0) {
            return SYS_EIO;
   1df82:	2800      	cmp	r0, #0
   1df84:	bfb8      	it	lt
   1df86:	f06f 0004 	mvnlt.w	r0, #4
            return rc;
        }
    } else {
        return hal_flash_is_erased(hf, address, dst, num_bytes);
    }
}
   1df8a:	b002      	add	sp, #8
   1df8c:	bd70      	pop	{r4, r5, r6, pc}
   1df8e:	b002      	add	sp, #8
   1df90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return hal_flash_is_erased(hf, address, dst, num_bytes);
   1df94:	f7ff bfc4 	b.w	1df20 <hal_flash_is_erased>
        return SYS_EINVAL;
   1df98:	f06f 0001 	mvn.w	r0, #1
   1df9c:	e7f5      	b.n	1df8a <hal_flash_isempty+0x3c>

0001df9e <hal_flash_isempty_no_buf>:

int
hal_flash_isempty_no_buf(uint8_t id, uint32_t address, uint32_t num_bytes)
{
   1df9e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dfa0:	4606      	mov	r6, r0
   1dfa2:	b085      	sub	sp, #20
   1dfa4:	460f      	mov	r7, r1
   1dfa6:	4615      	mov	r5, r2
    uint32_t blksz;
    uint32_t rem;
    uint32_t off;
    int empty;

    for (off = 0; off < num_bytes; off += sizeof buf) {
   1dfa8:	2400      	movs	r4, #0
   1dfaa:	42ac      	cmp	r4, r5
   1dfac:	d302      	bcc.n	1dfb4 <hal_flash_isempty_no_buf+0x16>
        if (empty != 1) {
            return empty;
        }
    }

    return 1;
   1dfae:	2001      	movs	r0, #1
}
   1dfb0:	b005      	add	sp, #20
   1dfb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rem = num_bytes - off;
   1dfb4:	1b2b      	subs	r3, r5, r4
        empty = hal_flash_isempty(id, address + off, buf, blksz);
   1dfb6:	2b10      	cmp	r3, #16
   1dfb8:	bf28      	it	cs
   1dfba:	2310      	movcs	r3, #16
   1dfbc:	466a      	mov	r2, sp
   1dfbe:	19e1      	adds	r1, r4, r7
   1dfc0:	4630      	mov	r0, r6
   1dfc2:	f7ff ffc4 	bl	1df4e <hal_flash_isempty>
        if (empty != 1) {
   1dfc6:	2801      	cmp	r0, #1
   1dfc8:	d1f2      	bne.n	1dfb0 <hal_flash_isempty_no_buf+0x12>
    for (off = 0; off < num_bytes; off += sizeof buf) {
   1dfca:	3410      	adds	r4, #16
   1dfcc:	e7ed      	b.n	1dfaa <hal_flash_isempty_no_buf+0xc>

0001dfce <os_malloc_lock.part.0>:
#if MYNEWT_VAL(OS_SCHEDULING)
static struct os_mutex os_malloc_mutex;
#endif

static void
os_malloc_lock(void)
   1dfce:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    int rc;

    if (g_os_started) {
        rc = os_mutex_pend(&os_malloc_mutex, 0xffffffff);
        assert(rc == 0);
   1dfd0:	2300      	movs	r3, #0
   1dfd2:	461a      	mov	r2, r3
   1dfd4:	4619      	mov	r1, r3
   1dfd6:	4618      	mov	r0, r3
   1dfd8:	f7ee fc10 	bl	c7fc <__assert_func>

0001dfdc <os_malloc_lock>:
{
   1dfdc:	b508      	push	{r3, lr}
    if (g_os_started) {
   1dfde:	4b06      	ldr	r3, [pc, #24]	; (1dff8 <os_malloc_lock+0x1c>)
   1dfe0:	681b      	ldr	r3, [r3, #0]
   1dfe2:	b13b      	cbz	r3, 1dff4 <os_malloc_lock+0x18>
        rc = os_mutex_pend(&os_malloc_mutex, 0xffffffff);
   1dfe4:	4805      	ldr	r0, [pc, #20]	; (1dffc <os_malloc_lock+0x20>)
   1dfe6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1dfea:	f7ef f90f 	bl	d20c <os_mutex_pend>
        assert(rc == 0);
   1dfee:	b108      	cbz	r0, 1dff4 <os_malloc_lock+0x18>
   1dff0:	f7ff ffed 	bl	1dfce <os_malloc_lock.part.0>
    }
#endif
}
   1dff4:	bd08      	pop	{r3, pc}
   1dff6:	bf00      	nop
   1dff8:	20002d98 	.word	0x20002d98
   1dffc:	2000741c 	.word	0x2000741c

0001e000 <os_malloc_unlock>:

static void
os_malloc_unlock(void)
{
   1e000:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    int rc;

    if (g_os_started) {
   1e002:	4b05      	ldr	r3, [pc, #20]	; (1e018 <os_malloc_unlock+0x18>)
   1e004:	681b      	ldr	r3, [r3, #0]
   1e006:	b12b      	cbz	r3, 1e014 <os_malloc_unlock+0x14>
        rc = os_mutex_release(&os_malloc_mutex);
   1e008:	4804      	ldr	r0, [pc, #16]	; (1e01c <os_malloc_unlock+0x1c>)
   1e00a:	f7ef f8ad 	bl	d168 <os_mutex_release>
        assert(rc == 0);
   1e00e:	b108      	cbz	r0, 1e014 <os_malloc_unlock+0x14>
   1e010:	f7ff ffdd 	bl	1dfce <os_malloc_lock.part.0>
    }
#endif
}
   1e014:	bd08      	pop	{r3, pc}
   1e016:	bf00      	nop
   1e018:	20002d98 	.word	0x20002d98
   1e01c:	2000741c 	.word	0x2000741c

0001e020 <os_malloc>:

void *
os_malloc(size_t size)
{
   1e020:	b507      	push	{r0, r1, r2, lr}
   1e022:	9001      	str	r0, [sp, #4]
    void *ptr;

    os_malloc_lock();
   1e024:	f7ff ffda 	bl	1dfdc <os_malloc_lock>
    ptr = malloc(size);
   1e028:	9801      	ldr	r0, [sp, #4]
   1e02a:	f7f2 f89b 	bl	10164 <malloc>
   1e02e:	9001      	str	r0, [sp, #4]
    os_malloc_unlock();
   1e030:	f7ff ffe6 	bl	1e000 <os_malloc_unlock>

    return ptr;
}
   1e034:	9801      	ldr	r0, [sp, #4]
   1e036:	b003      	add	sp, #12
   1e038:	f85d fb04 	ldr.w	pc, [sp], #4

0001e03c <os_free>:

void
os_free(void *mem)
{
   1e03c:	b507      	push	{r0, r1, r2, lr}
   1e03e:	9001      	str	r0, [sp, #4]
    os_malloc_lock();
   1e040:	f7ff ffcc 	bl	1dfdc <os_malloc_lock>
    free(mem);
   1e044:	9801      	ldr	r0, [sp, #4]
   1e046:	f7f2 f8d9 	bl	101fc <free>
    os_malloc_unlock();
}
   1e04a:	b003      	add	sp, #12
   1e04c:	f85d eb04 	ldr.w	lr, [sp], #4
    os_malloc_unlock();
   1e050:	f7ff bfd6 	b.w	1e000 <os_malloc_unlock>

0001e054 <json_encode_object_start>:


int
json_encode_object_start(struct json_encoder *encoder)
{
    if (encoder->je_wr_commas) {
   1e054:	7a03      	ldrb	r3, [r0, #8]
   1e056:	07db      	lsls	r3, r3, #31
{
   1e058:	b510      	push	{r4, lr}
   1e05a:	4604      	mov	r4, r0
    if (encoder->je_wr_commas) {
   1e05c:	d508      	bpl.n	1e070 <json_encode_object_start+0x1c>
        encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
   1e05e:	6803      	ldr	r3, [r0, #0]
   1e060:	4909      	ldr	r1, [pc, #36]	; (1e088 <json_encode_object_start+0x34>)
   1e062:	6840      	ldr	r0, [r0, #4]
   1e064:	2201      	movs	r2, #1
   1e066:	4798      	blx	r3
        encoder->je_wr_commas = 0;
   1e068:	7a23      	ldrb	r3, [r4, #8]
   1e06a:	f36f 0300 	bfc	r3, #0, #1
   1e06e:	7223      	strb	r3, [r4, #8]
    }
    JSON_ENCODE_OBJECT_START(encoder);
   1e070:	6823      	ldr	r3, [r4, #0]
   1e072:	4906      	ldr	r1, [pc, #24]	; (1e08c <json_encode_object_start+0x38>)
   1e074:	6860      	ldr	r0, [r4, #4]
   1e076:	2201      	movs	r2, #1
   1e078:	4798      	blx	r3
    encoder->je_wr_commas = 0;
   1e07a:	7a23      	ldrb	r3, [r4, #8]
   1e07c:	f36f 0300 	bfc	r3, #0, #1
   1e080:	7223      	strb	r3, [r4, #8]

    return (0);
}
   1e082:	2000      	movs	r0, #0
   1e084:	bd10      	pop	{r4, pc}
   1e086:	bf00      	nop
   1e088:	0002268c 	.word	0x0002268c
   1e08c:	0002268e 	.word	0x0002268e

0001e090 <json_encode_object_key>:
}
EXPORT_SYMBOL(json_encode_value);

int
json_encode_object_key(struct json_encoder *encoder, char *key)
{
   1e090:	b538      	push	{r3, r4, r5, lr}
    if (encoder->je_wr_commas) {
   1e092:	7a03      	ldrb	r3, [r0, #8]
   1e094:	07db      	lsls	r3, r3, #31
{
   1e096:	4604      	mov	r4, r0
   1e098:	460d      	mov	r5, r1
    if (encoder->je_wr_commas) {
   1e09a:	d508      	bpl.n	1e0ae <json_encode_object_key+0x1e>
        encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
   1e09c:	6803      	ldr	r3, [r0, #0]
   1e09e:	490e      	ldr	r1, [pc, #56]	; (1e0d8 <json_encode_object_key+0x48>)
   1e0a0:	6840      	ldr	r0, [r0, #4]
   1e0a2:	2201      	movs	r2, #1
   1e0a4:	4798      	blx	r3
        encoder->je_wr_commas = 0;
   1e0a6:	7a23      	ldrb	r3, [r4, #8]
   1e0a8:	f36f 0300 	bfc	r3, #0, #1
   1e0ac:	7223      	strb	r3, [r4, #8]
    }

    /* Write the key entry */
    encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
   1e0ae:	6823      	ldr	r3, [r4, #0]
   1e0b0:	490a      	ldr	r1, [pc, #40]	; (1e0dc <json_encode_object_key+0x4c>)
   1e0b2:	6860      	ldr	r0, [r4, #4]
   1e0b4:	2201      	movs	r2, #1
   1e0b6:	4798      	blx	r3
    encoder->je_write(encoder->je_arg, key, strlen(key));
   1e0b8:	4628      	mov	r0, r5
   1e0ba:	f7fb fed9 	bl	19e70 <strlen>
   1e0be:	6823      	ldr	r3, [r4, #0]
   1e0c0:	4602      	mov	r2, r0
   1e0c2:	4629      	mov	r1, r5
   1e0c4:	6860      	ldr	r0, [r4, #4]
   1e0c6:	4798      	blx	r3
    encoder->je_write(encoder->je_arg, "\": ", sizeof("\": ")-1);
   1e0c8:	6823      	ldr	r3, [r4, #0]
   1e0ca:	4905      	ldr	r1, [pc, #20]	; (1e0e0 <json_encode_object_key+0x50>)
   1e0cc:	6860      	ldr	r0, [r4, #4]
   1e0ce:	2203      	movs	r2, #3
   1e0d0:	4798      	blx	r3

    return (0);
}
   1e0d2:	2000      	movs	r0, #0
   1e0d4:	bd38      	pop	{r3, r4, r5, pc}
   1e0d6:	bf00      	nop
   1e0d8:	0002268c 	.word	0x0002268c
   1e0dc:	0002012e 	.word	0x0002012e
   1e0e0:	00022690 	.word	0x00022690

0001e0e4 <json_encode_object_entry>:
json_encode_object_entry(struct json_encoder *encoder, char *key,
        struct json_value *val)
{
    int rc;

    if (encoder->je_wr_commas) {
   1e0e4:	7a03      	ldrb	r3, [r0, #8]
   1e0e6:	07db      	lsls	r3, r3, #31
{
   1e0e8:	b570      	push	{r4, r5, r6, lr}
   1e0ea:	4604      	mov	r4, r0
   1e0ec:	460d      	mov	r5, r1
   1e0ee:	4616      	mov	r6, r2
    if (encoder->je_wr_commas) {
   1e0f0:	d508      	bpl.n	1e104 <json_encode_object_entry+0x20>
        encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
   1e0f2:	6803      	ldr	r3, [r0, #0]
   1e0f4:	4911      	ldr	r1, [pc, #68]	; (1e13c <json_encode_object_entry+0x58>)
   1e0f6:	6840      	ldr	r0, [r0, #4]
   1e0f8:	2201      	movs	r2, #1
   1e0fa:	4798      	blx	r3
        encoder->je_wr_commas = 0;
   1e0fc:	7a23      	ldrb	r3, [r4, #8]
   1e0fe:	f36f 0300 	bfc	r3, #0, #1
   1e102:	7223      	strb	r3, [r4, #8]
    }
    /* Write the key entry */
    encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
   1e104:	6823      	ldr	r3, [r4, #0]
   1e106:	490e      	ldr	r1, [pc, #56]	; (1e140 <json_encode_object_entry+0x5c>)
   1e108:	6860      	ldr	r0, [r4, #4]
   1e10a:	2201      	movs	r2, #1
   1e10c:	4798      	blx	r3
    encoder->je_write(encoder->je_arg, key, strlen(key));
   1e10e:	4628      	mov	r0, r5
   1e110:	f7fb feae 	bl	19e70 <strlen>
   1e114:	6823      	ldr	r3, [r4, #0]
   1e116:	4602      	mov	r2, r0
   1e118:	4629      	mov	r1, r5
   1e11a:	6860      	ldr	r0, [r4, #4]
   1e11c:	4798      	blx	r3
    encoder->je_write(encoder->je_arg, "\": ", sizeof("\": ")-1);
   1e11e:	4909      	ldr	r1, [pc, #36]	; (1e144 <json_encode_object_entry+0x60>)
   1e120:	6823      	ldr	r3, [r4, #0]
   1e122:	6860      	ldr	r0, [r4, #4]
   1e124:	2203      	movs	r2, #3
   1e126:	4798      	blx	r3

    rc = json_encode_value(encoder, val);
   1e128:	4631      	mov	r1, r6
   1e12a:	4620      	mov	r0, r4
   1e12c:	f000 f80c 	bl	1e148 <json_encode_value>
    if (rc != 0) {
   1e130:	b918      	cbnz	r0, 1e13a <json_encode_object_entry+0x56>
        goto err;
    }
    encoder->je_wr_commas = 1;
   1e132:	7a23      	ldrb	r3, [r4, #8]
   1e134:	f043 0301 	orr.w	r3, r3, #1
   1e138:	7223      	strb	r3, [r4, #8]

    return (0);
err:
    return (rc);
}
   1e13a:	bd70      	pop	{r4, r5, r6, pc}
   1e13c:	0002268c 	.word	0x0002268c
   1e140:	0002012e 	.word	0x0002012e
   1e144:	00022690 	.word	0x00022690

0001e148 <json_encode_value>:
{
   1e148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    switch (jv->jv_type) {
   1e14c:	784b      	ldrb	r3, [r1, #1]
{
   1e14e:	4604      	mov	r4, r0
   1e150:	460d      	mov	r5, r1
    switch (jv->jv_type) {
   1e152:	2b06      	cmp	r3, #6
   1e154:	f200 80c5 	bhi.w	1e2e2 <json_encode_value+0x19a>
   1e158:	e8df f003 	tbb	[pc, r3]
   1e15c:	401f1604 	.word	0x401f1604
   1e160:	a988      	.short	0xa988
   1e162:	25          	.byte	0x25
   1e163:	00          	.byte	0x00
            len = sprintf(encoder->je_encode_buf, "%s",
   1e164:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   1e168:	f100 0609 	add.w	r6, r0, #9
   1e16c:	4313      	orrs	r3, r2
   1e16e:	bf0c      	ite	eq
   1e170:	4a5d      	ldreq	r2, [pc, #372]	; (1e2e8 <json_encode_value+0x1a0>)
   1e172:	4a5e      	ldrne	r2, [pc, #376]	; (1e2ec <json_encode_value+0x1a4>)
   1e174:	495e      	ldr	r1, [pc, #376]	; (1e2f0 <json_encode_value+0x1a8>)
   1e176:	4630      	mov	r0, r6
   1e178:	f000 f952 	bl	1e420 <sprintf>
            encoder->je_write(encoder->je_arg, encoder->je_encode_buf, len);
   1e17c:	6823      	ldr	r3, [r4, #0]
            len = sprintf(encoder->je_encode_buf, "%" PRIu64,
   1e17e:	4602      	mov	r2, r0
            encoder->je_write(encoder->je_arg, encoder->je_encode_buf, len);
   1e180:	4631      	mov	r1, r6
            JSON_ENCODE_OBJECT_END(encoder);
   1e182:	6860      	ldr	r0, [r4, #4]
   1e184:	4798      	blx	r3
   1e186:	e03c      	b.n	1e202 <json_encode_value+0xba>
            len = sprintf(encoder->je_encode_buf, "%" PRIu64,
   1e188:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   1e18c:	4959      	ldr	r1, [pc, #356]	; (1e2f4 <json_encode_value+0x1ac>)
   1e18e:	f100 0609 	add.w	r6, r0, #9
   1e192:	4630      	mov	r0, r6
   1e194:	f000 f944 	bl	1e420 <sprintf>
   1e198:	e7f0      	b.n	1e17c <json_encode_value+0x34>
            len = sprintf(encoder->je_encode_buf, "%" PRIi64,
   1e19a:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   1e19e:	f100 0609 	add.w	r6, r0, #9
   1e1a2:	4955      	ldr	r1, [pc, #340]	; (1e2f8 <json_encode_value+0x1b0>)
   1e1a4:	e7f5      	b.n	1e192 <json_encode_value+0x4a>
        if  (DPL_FLOAT64_ISNAN(jv->jv_val.fl)){
   1e1a6:	e9d1 6702 	ldrd	r6, r7, [r1, #8]
            len = sprintf(encoder->je_encode_buf, "%s",
   1e1aa:	f100 0509 	add.w	r5, r0, #9
        if  (DPL_FLOAT64_ISNAN(jv->jv_val.fl)){
   1e1ae:	4632      	mov	r2, r6
   1e1b0:	463b      	mov	r3, r7
   1e1b2:	4630      	mov	r0, r6
   1e1b4:	4639      	mov	r1, r7
   1e1b6:	f000 fd99 	bl	1ecec <__aeabi_dcmpun>
   1e1ba:	b138      	cbz	r0, 1e1cc <json_encode_value+0x84>
            len = sprintf(encoder->je_encode_buf, "null");
   1e1bc:	494f      	ldr	r1, [pc, #316]	; (1e2fc <json_encode_value+0x1b4>)
   1e1be:	4628      	mov	r0, r5
   1e1c0:	f7fb fe4e 	bl	19e60 <strcpy>
   1e1c4:	2204      	movs	r2, #4
        encoder->je_write(encoder->je_arg, encoder->je_encode_buf, len);
   1e1c6:	6823      	ldr	r3, [r4, #0]
   1e1c8:	4629      	mov	r1, r5
   1e1ca:	e7da      	b.n	1e182 <json_encode_value+0x3a>
            len = sprintf(encoder->je_encode_buf,
   1e1cc:	4632      	mov	r2, r6
   1e1ce:	494c      	ldr	r1, [pc, #304]	; (1e300 <json_encode_value+0x1b8>)
   1e1d0:	463b      	mov	r3, r7
   1e1d2:	4628      	mov	r0, r5
   1e1d4:	f000 f924 	bl	1e420 <sprintf>
   1e1d8:	4602      	mov	r2, r0
   1e1da:	e7f4      	b.n	1e1c6 <json_encode_value+0x7e>
            encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
   1e1dc:	6803      	ldr	r3, [r0, #0]
   1e1de:	4949      	ldr	r1, [pc, #292]	; (1e304 <json_encode_value+0x1bc>)
   1e1e0:	6840      	ldr	r0, [r0, #4]
                        encoder->je_write(encoder->je_arg, "\\",
   1e1e2:	4f49      	ldr	r7, [pc, #292]	; (1e308 <json_encode_value+0x1c0>)
                        encoder->je_write(encoder->je_arg, "\\b",
   1e1e4:	f8df 8144 	ldr.w	r8, [pc, #324]	; 1e32c <json_encode_value+0x1e4>
                        encoder->je_write(encoder->je_arg, "\\f",
   1e1e8:	f8df 9144 	ldr.w	r9, [pc, #324]	; 1e330 <json_encode_value+0x1e8>
            encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
   1e1ec:	2201      	movs	r2, #1
   1e1ee:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
   1e1f0:	2600      	movs	r6, #0
   1e1f2:	886b      	ldrh	r3, [r5, #2]
   1e1f4:	42b3      	cmp	r3, r6
                        encoder->je_write(encoder->je_arg, "\\",
   1e1f6:	e9d4 a000 	ldrd	sl, r0, [r4]
            for (i = 0; i < jv->jv_len; i++) {
   1e1fa:	dc05      	bgt.n	1e208 <json_encode_value+0xc0>
            encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
   1e1fc:	4941      	ldr	r1, [pc, #260]	; (1e304 <json_encode_value+0x1bc>)
   1e1fe:	2201      	movs	r2, #1
   1e200:	47d0      	blx	sl
    return (0);
   1e202:	2000      	movs	r0, #0
}
   1e204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                switch (jv->jv_val.str[i]) {
   1e208:	68ab      	ldr	r3, [r5, #8]
   1e20a:	1999      	adds	r1, r3, r6
   1e20c:	5d9b      	ldrb	r3, [r3, r6]
   1e20e:	2b0d      	cmp	r3, #13
   1e210:	d809      	bhi.n	1e226 <json_encode_value+0xde>
   1e212:	2b07      	cmp	r3, #7
   1e214:	d928      	bls.n	1e268 <json_encode_value+0x120>
   1e216:	3b08      	subs	r3, #8
   1e218:	2b05      	cmp	r3, #5
   1e21a:	d825      	bhi.n	1e268 <json_encode_value+0x120>
   1e21c:	e8df f003 	tbb	[pc, r3]
   1e220:	241b1421 	.word	0x241b1421
   1e224:	181e      	.short	0x181e
   1e226:	2b2f      	cmp	r3, #47	; 0x2f
   1e228:	d003      	beq.n	1e232 <json_encode_value+0xea>
   1e22a:	2b5c      	cmp	r3, #92	; 0x5c
   1e22c:	d001      	beq.n	1e232 <json_encode_value+0xea>
   1e22e:	2b22      	cmp	r3, #34	; 0x22
   1e230:	d11a      	bne.n	1e268 <json_encode_value+0x120>
                        encoder->je_write(encoder->je_arg, "\\",
   1e232:	2201      	movs	r2, #1
   1e234:	4639      	mov	r1, r7
   1e236:	47d0      	blx	sl
                        encoder->je_write(encoder->je_arg,
   1e238:	68a9      	ldr	r1, [r5, #8]
   1e23a:	6823      	ldr	r3, [r4, #0]
   1e23c:	6860      	ldr	r0, [r4, #4]
   1e23e:	2201      	movs	r2, #1
   1e240:	4431      	add	r1, r6
   1e242:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
   1e244:	3601      	adds	r6, #1
   1e246:	e7d4      	b.n	1e1f2 <json_encode_value+0xaa>
                        encoder->je_write(encoder->je_arg, "\\t",
   1e248:	4930      	ldr	r1, [pc, #192]	; (1e30c <json_encode_value+0x1c4>)
   1e24a:	2202      	movs	r2, #2
                        encoder->je_write(encoder->je_arg,
   1e24c:	47d0      	blx	sl
                        break;
   1e24e:	e7f9      	b.n	1e244 <json_encode_value+0xfc>
                        encoder->je_write(encoder->je_arg, "\\r",
   1e250:	492f      	ldr	r1, [pc, #188]	; (1e310 <json_encode_value+0x1c8>)
   1e252:	2202      	movs	r2, #2
   1e254:	e7fa      	b.n	1e24c <json_encode_value+0x104>
                        encoder->je_write(encoder->je_arg, "\\n",
   1e256:	492f      	ldr	r1, [pc, #188]	; (1e314 <json_encode_value+0x1cc>)
   1e258:	2202      	movs	r2, #2
   1e25a:	e7f7      	b.n	1e24c <json_encode_value+0x104>
                        encoder->je_write(encoder->je_arg, "\\f",
   1e25c:	2202      	movs	r2, #2
   1e25e:	4649      	mov	r1, r9
   1e260:	e7f4      	b.n	1e24c <json_encode_value+0x104>
                        encoder->je_write(encoder->je_arg, "\\b",
   1e262:	2202      	movs	r2, #2
   1e264:	4641      	mov	r1, r8
   1e266:	e7f1      	b.n	1e24c <json_encode_value+0x104>
                        encoder->je_write(encoder->je_arg,
   1e268:	2201      	movs	r2, #1
   1e26a:	e7ef      	b.n	1e24c <json_encode_value+0x104>
            JSON_ENCODE_ARRAY_START(encoder);
   1e26c:	6803      	ldr	r3, [r0, #0]
   1e26e:	492a      	ldr	r1, [pc, #168]	; (1e318 <json_encode_value+0x1d0>)
   1e270:	6840      	ldr	r0, [r0, #4]
                    encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
   1e272:	4f2a      	ldr	r7, [pc, #168]	; (1e31c <json_encode_value+0x1d4>)
            JSON_ENCODE_ARRAY_START(encoder);
   1e274:	2201      	movs	r2, #1
   1e276:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
   1e278:	2600      	movs	r6, #0
   1e27a:	886b      	ldrh	r3, [r5, #2]
   1e27c:	42b3      	cmp	r3, r6
   1e27e:	dc03      	bgt.n	1e288 <json_encode_value+0x140>
            JSON_ENCODE_ARRAY_END(encoder);
   1e280:	6823      	ldr	r3, [r4, #0]
   1e282:	4927      	ldr	r1, [pc, #156]	; (1e320 <json_encode_value+0x1d8>)
   1e284:	2201      	movs	r2, #1
   1e286:	e77c      	b.n	1e182 <json_encode_value+0x3a>
                rc = json_encode_value(encoder, jv->jv_val.composite.values[i]);
   1e288:	68eb      	ldr	r3, [r5, #12]
   1e28a:	4620      	mov	r0, r4
   1e28c:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
   1e290:	f7ff ff5a 	bl	1e148 <json_encode_value>
                if (rc != 0) {
   1e294:	2800      	cmp	r0, #0
   1e296:	d1b5      	bne.n	1e204 <json_encode_value+0xbc>
                if (i != jv->jv_len - 1) {
   1e298:	886b      	ldrh	r3, [r5, #2]
   1e29a:	3b01      	subs	r3, #1
   1e29c:	42b3      	cmp	r3, r6
   1e29e:	d004      	beq.n	1e2aa <json_encode_value+0x162>
                    encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
   1e2a0:	6823      	ldr	r3, [r4, #0]
   1e2a2:	6860      	ldr	r0, [r4, #4]
   1e2a4:	2201      	movs	r2, #1
   1e2a6:	4639      	mov	r1, r7
   1e2a8:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
   1e2aa:	3601      	adds	r6, #1
   1e2ac:	e7e5      	b.n	1e27a <json_encode_value+0x132>
            JSON_ENCODE_OBJECT_START(encoder);
   1e2ae:	6803      	ldr	r3, [r0, #0]
   1e2b0:	491c      	ldr	r1, [pc, #112]	; (1e324 <json_encode_value+0x1dc>)
   1e2b2:	6840      	ldr	r0, [r0, #4]
   1e2b4:	2201      	movs	r2, #1
   1e2b6:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
   1e2b8:	2600      	movs	r6, #0
   1e2ba:	886b      	ldrh	r3, [r5, #2]
   1e2bc:	42b3      	cmp	r3, r6
   1e2be:	dc03      	bgt.n	1e2c8 <json_encode_value+0x180>
            JSON_ENCODE_OBJECT_END(encoder);
   1e2c0:	6823      	ldr	r3, [r4, #0]
   1e2c2:	4919      	ldr	r1, [pc, #100]	; (1e328 <json_encode_value+0x1e0>)
   1e2c4:	2201      	movs	r2, #1
   1e2c6:	e75c      	b.n	1e182 <json_encode_value+0x3a>
                rc = json_encode_object_entry(encoder,
   1e2c8:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
   1e2cc:	4620      	mov	r0, r4
   1e2ce:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
   1e2d2:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
   1e2d6:	f7ff ff05 	bl	1e0e4 <json_encode_object_entry>
                if (rc != 0) {
   1e2da:	2800      	cmp	r0, #0
   1e2dc:	d192      	bne.n	1e204 <json_encode_value+0xbc>
            for (i = 0; i < jv->jv_len; i++) {
   1e2de:	3601      	adds	r6, #1
   1e2e0:	e7eb      	b.n	1e2ba <json_encode_value+0x172>
    switch (jv->jv_type) {
   1e2e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e2e6:	e78d      	b.n	1e204 <json_encode_value+0xbc>
   1e2e8:	00022699 	.word	0x00022699
   1e2ec:	00022694 	.word	0x00022694
   1e2f0:	00021afe 	.word	0x00021afe
   1e2f4:	0002269f 	.word	0x0002269f
   1e2f8:	000226a4 	.word	0x000226a4
   1e2fc:	000226a9 	.word	0x000226a9
   1e300:	000226ae 	.word	0x000226ae
   1e304:	0002012e 	.word	0x0002012e
   1e308:	000226b1 	.word	0x000226b1
   1e30c:	000226b3 	.word	0x000226b3
   1e310:	000226b6 	.word	0x000226b6
   1e314:	000226b9 	.word	0x000226b9
   1e318:	000226c2 	.word	0x000226c2
   1e31c:	0002268c 	.word	0x0002268c
   1e320:	00020f7c 	.word	0x00020f7c
   1e324:	0002268e 	.word	0x0002268e
   1e328:	000226c4 	.word	0x000226c4
   1e32c:	000226bf 	.word	0x000226bf
   1e330:	000226bc 	.word	0x000226bc

0001e334 <json_encode_object_finish>:
EXPORT_SYMBOL(json_encode_object_entry);

int
json_encode_object_finish(struct json_encoder *encoder)
{
   1e334:	b510      	push	{r4, lr}
   1e336:	4604      	mov	r4, r0
    JSON_ENCODE_OBJECT_END(encoder);
   1e338:	6803      	ldr	r3, [r0, #0]
   1e33a:	4905      	ldr	r1, [pc, #20]	; (1e350 <json_encode_object_finish+0x1c>)
   1e33c:	6840      	ldr	r0, [r0, #4]
   1e33e:	2201      	movs	r2, #1
   1e340:	4798      	blx	r3
    /* Useful in case of nested objects. */
    encoder->je_wr_commas = 1;
   1e342:	7a23      	ldrb	r3, [r4, #8]
   1e344:	f043 0301 	orr.w	r3, r3, #1
   1e348:	7223      	strb	r3, [r4, #8]

    return (0);
}
   1e34a:	2000      	movs	r0, #0
   1e34c:	bd10      	pop	{r4, pc}
   1e34e:	bf00      	nop
   1e350:	000226c4 	.word	0x000226c4

0001e354 <json_encode_array_name>:
EXPORT_SYMBOL(json_encode_object_finish);

int
json_encode_array_name(struct json_encoder *encoder, char *name)
{
    return json_encode_object_key(encoder, name);
   1e354:	f7ff be9c 	b.w	1e090 <json_encode_object_key>

0001e358 <json_encode_array_start>:
}
EXPORT_SYMBOL(json_encode_array_name);

int
json_encode_array_start(struct json_encoder *encoder)
{
   1e358:	b510      	push	{r4, lr}
   1e35a:	4604      	mov	r4, r0
    JSON_ENCODE_ARRAY_START(encoder);
   1e35c:	6803      	ldr	r3, [r0, #0]
   1e35e:	4905      	ldr	r1, [pc, #20]	; (1e374 <json_encode_array_start+0x1c>)
   1e360:	6840      	ldr	r0, [r0, #4]
   1e362:	2201      	movs	r2, #1
   1e364:	4798      	blx	r3
    encoder->je_wr_commas = 0;
   1e366:	7a23      	ldrb	r3, [r4, #8]
   1e368:	f36f 0300 	bfc	r3, #0, #1
   1e36c:	7223      	strb	r3, [r4, #8]

    return (0);
}
   1e36e:	2000      	movs	r0, #0
   1e370:	bd10      	pop	{r4, pc}
   1e372:	bf00      	nop
   1e374:	000226c2 	.word	0x000226c2

0001e378 <json_encode_array_value>:
EXPORT_SYMBOL(json_encode_array_start);

int
json_encode_array_value(struct json_encoder *encoder, struct json_value *jv)
{
   1e378:	b538      	push	{r3, r4, r5, lr}
    int rc;

    if (encoder->je_wr_commas) {
   1e37a:	7a03      	ldrb	r3, [r0, #8]
   1e37c:	07db      	lsls	r3, r3, #31
{
   1e37e:	4604      	mov	r4, r0
   1e380:	460d      	mov	r5, r1
    if (encoder->je_wr_commas) {
   1e382:	d508      	bpl.n	1e396 <json_encode_array_value+0x1e>
        encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
   1e384:	6803      	ldr	r3, [r0, #0]
   1e386:	4909      	ldr	r1, [pc, #36]	; (1e3ac <json_encode_array_value+0x34>)
   1e388:	6840      	ldr	r0, [r0, #4]
   1e38a:	2201      	movs	r2, #1
   1e38c:	4798      	blx	r3
        encoder->je_wr_commas = 0;
   1e38e:	7a23      	ldrb	r3, [r4, #8]
   1e390:	f36f 0300 	bfc	r3, #0, #1
   1e394:	7223      	strb	r3, [r4, #8]
    }

    rc = json_encode_value(encoder, jv);
   1e396:	4629      	mov	r1, r5
   1e398:	4620      	mov	r0, r4
   1e39a:	f7ff fed5 	bl	1e148 <json_encode_value>
    if (rc != 0) {
   1e39e:	b918      	cbnz	r0, 1e3a8 <json_encode_array_value+0x30>
        goto err;
    }
    encoder->je_wr_commas = 1;
   1e3a0:	7a23      	ldrb	r3, [r4, #8]
   1e3a2:	f043 0301 	orr.w	r3, r3, #1
   1e3a6:	7223      	strb	r3, [r4, #8]

    return (0);
err:
    return (rc);
}
   1e3a8:	bd38      	pop	{r3, r4, r5, pc}
   1e3aa:	bf00      	nop
   1e3ac:	0002268c 	.word	0x0002268c

0001e3b0 <json_encode_array_finish>:
EXPORT_SYMBOL(json_encode_array_value);

int
json_encode_array_finish(struct json_encoder *encoder)
{
   1e3b0:	b508      	push	{r3, lr}
    encoder->je_wr_commas = 1;
   1e3b2:	7a03      	ldrb	r3, [r0, #8]
    JSON_ENCODE_ARRAY_END(encoder);
   1e3b4:	4904      	ldr	r1, [pc, #16]	; (1e3c8 <json_encode_array_finish+0x18>)
    encoder->je_wr_commas = 1;
   1e3b6:	f043 0301 	orr.w	r3, r3, #1
   1e3ba:	7203      	strb	r3, [r0, #8]
    JSON_ENCODE_ARRAY_END(encoder);
   1e3bc:	2201      	movs	r2, #1
   1e3be:	6803      	ldr	r3, [r0, #0]
   1e3c0:	6840      	ldr	r0, [r0, #4]
   1e3c2:	4798      	blx	r3

    return (0);
}
   1e3c4:	2000      	movs	r0, #0
   1e3c6:	bd08      	pop	{r3, pc}
   1e3c8:	00020f7c 	.word	0x00020f7c

0001e3cc <json_read_next>:
    return len;
}

char
json_read_next(struct json_buffer * jb)
{
   1e3cc:	b510      	push	{r4, lr}
    json_decoder_t * decoder = (json_decoder_t *) jb;
    char c;

    if ((decoder->start_buf + decoder->current_position) <= decoder->end_buf) {
   1e3ce:	6943      	ldr	r3, [r0, #20]
   1e3d0:	68c2      	ldr	r2, [r0, #12]
   1e3d2:	6901      	ldr	r1, [r0, #16]
   1e3d4:	18d4      	adds	r4, r2, r3
   1e3d6:	428c      	cmp	r4, r1
        c = *(decoder->start_buf + decoder->current_position);
   1e3d8:	bf97      	itett	ls
   1e3da:	5cd2      	ldrbls	r2, [r2, r3]
        decoder->current_position++;
        return c;
    }
   return '\0';
   1e3dc:	2200      	movhi	r2, #0
        decoder->current_position++;
   1e3de:	3301      	addls	r3, #1
   1e3e0:	6143      	strls	r3, [r0, #20]
}
   1e3e2:	4610      	mov	r0, r2
   1e3e4:	bd10      	pop	{r4, pc}

0001e3e6 <json_read_prev>:
json_read_prev(struct json_buffer * jb)
{
    json_decoder_t * decoder = (json_decoder_t *) jb;

    char c;
    if (decoder->current_position) {
   1e3e6:	6943      	ldr	r3, [r0, #20]
   1e3e8:	b123      	cbz	r3, 1e3f4 <json_read_prev+0xe>
       decoder->current_position--;
   1e3ea:	3b01      	subs	r3, #1
       c = *(decoder->start_buf + decoder->current_position);
   1e3ec:	68c2      	ldr	r2, [r0, #12]
       decoder->current_position--;
   1e3ee:	6143      	str	r3, [r0, #20]
       c = *(decoder->start_buf + decoder->current_position);
   1e3f0:	5cd0      	ldrb	r0, [r2, r3]
       return c;
   1e3f2:	4770      	bx	lr
    }
    /* can't rewind */
    return '\0';
   1e3f4:	4618      	mov	r0, r3
}
   1e3f6:	4770      	bx	lr

0001e3f8 <json_readn>:
EXPORT_SYMBOL(json_read_prev);

int
json_readn(struct json_buffer * jb, char *buf, int size)
{
   1e3f8:	b538      	push	{r3, r4, r5, lr}
   1e3fa:	4604      	mov	r4, r0
   1e3fc:	4608      	mov	r0, r1
    json_decoder_t * decoder = (json_decoder_t *) jb;
    int remlen;

    remlen = (int)(decoder->end_buf - (decoder->start_buf + decoder->current_position));
   1e3fe:	6963      	ldr	r3, [r4, #20]
   1e400:	68e1      	ldr	r1, [r4, #12]
   1e402:	4419      	add	r1, r3
   1e404:	6923      	ldr	r3, [r4, #16]
   1e406:	1a5b      	subs	r3, r3, r1
   1e408:	4293      	cmp	r3, r2
   1e40a:	bfa8      	it	ge
   1e40c:	4613      	movge	r3, r2
    if (size > remlen) {
        size = remlen;
    }

    memcpy(buf, decoder->start_buf + decoder->current_position, size);
   1e40e:	461a      	mov	r2, r3
   1e410:	461d      	mov	r5, r3
   1e412:	f7f1 ff2d 	bl	10270 <memcpy>
    decoder->current_position += size;
   1e416:	6963      	ldr	r3, [r4, #20]
   1e418:	442b      	add	r3, r5
   1e41a:	6163      	str	r3, [r4, #20]
    return size;
}
   1e41c:	4628      	mov	r0, r5
   1e41e:	bd38      	pop	{r3, r4, r5, pc}

0001e420 <sprintf>:
#include <stdio.h>
#include <unistd.h>
#include <stdint.h>

int sprintf(char *buffer, const char *format, ...)
{
   1e420:	b40e      	push	{r1, r2, r3}
   1e422:	b503      	push	{r0, r1, lr}
   1e424:	ab03      	add	r3, sp, #12
	va_list ap;
	int rv;

	va_start(ap, format);
	rv = vsnprintf(buffer, SIZE_MAX/2, format, ap);
   1e426:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
{
   1e42a:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, format);
   1e42e:	9301      	str	r3, [sp, #4]
	rv = vsnprintf(buffer, SIZE_MAX/2, format, ap);
   1e430:	f7f2 fa16 	bl	10860 <vsnprintf>
	va_end(ap);

	return rv;
}
   1e434:	b002      	add	sp, #8
   1e436:	f85d eb04 	ldr.w	lr, [sp], #4
   1e43a:	b003      	add	sp, #12
   1e43c:	4770      	bx	lr
	...

0001e440 <__aeabi_drsub>:
   1e440:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1e444:	e002      	b.n	1e44c <__adddf3>
   1e446:	bf00      	nop

0001e448 <__aeabi_dsub>:
   1e448:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001e44c <__adddf3>:
   1e44c:	b530      	push	{r4, r5, lr}
   1e44e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1e452:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1e456:	ea94 0f05 	teq	r4, r5
   1e45a:	bf08      	it	eq
   1e45c:	ea90 0f02 	teqeq	r0, r2
   1e460:	bf1f      	itttt	ne
   1e462:	ea54 0c00 	orrsne.w	ip, r4, r0
   1e466:	ea55 0c02 	orrsne.w	ip, r5, r2
   1e46a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1e46e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1e472:	f000 80e2 	beq.w	1e63a <__adddf3+0x1ee>
   1e476:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1e47a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1e47e:	bfb8      	it	lt
   1e480:	426d      	neglt	r5, r5
   1e482:	dd0c      	ble.n	1e49e <__adddf3+0x52>
   1e484:	442c      	add	r4, r5
   1e486:	ea80 0202 	eor.w	r2, r0, r2
   1e48a:	ea81 0303 	eor.w	r3, r1, r3
   1e48e:	ea82 0000 	eor.w	r0, r2, r0
   1e492:	ea83 0101 	eor.w	r1, r3, r1
   1e496:	ea80 0202 	eor.w	r2, r0, r2
   1e49a:	ea81 0303 	eor.w	r3, r1, r3
   1e49e:	2d36      	cmp	r5, #54	; 0x36
   1e4a0:	bf88      	it	hi
   1e4a2:	bd30      	pophi	{r4, r5, pc}
   1e4a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1e4a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1e4ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1e4b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1e4b4:	d002      	beq.n	1e4bc <__adddf3+0x70>
   1e4b6:	4240      	negs	r0, r0
   1e4b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1e4bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1e4c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1e4c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   1e4c8:	d002      	beq.n	1e4d0 <__adddf3+0x84>
   1e4ca:	4252      	negs	r2, r2
   1e4cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1e4d0:	ea94 0f05 	teq	r4, r5
   1e4d4:	f000 80a7 	beq.w	1e626 <__adddf3+0x1da>
   1e4d8:	f1a4 0401 	sub.w	r4, r4, #1
   1e4dc:	f1d5 0e20 	rsbs	lr, r5, #32
   1e4e0:	db0d      	blt.n	1e4fe <__adddf3+0xb2>
   1e4e2:	fa02 fc0e 	lsl.w	ip, r2, lr
   1e4e6:	fa22 f205 	lsr.w	r2, r2, r5
   1e4ea:	1880      	adds	r0, r0, r2
   1e4ec:	f141 0100 	adc.w	r1, r1, #0
   1e4f0:	fa03 f20e 	lsl.w	r2, r3, lr
   1e4f4:	1880      	adds	r0, r0, r2
   1e4f6:	fa43 f305 	asr.w	r3, r3, r5
   1e4fa:	4159      	adcs	r1, r3
   1e4fc:	e00e      	b.n	1e51c <__adddf3+0xd0>
   1e4fe:	f1a5 0520 	sub.w	r5, r5, #32
   1e502:	f10e 0e20 	add.w	lr, lr, #32
   1e506:	2a01      	cmp	r2, #1
   1e508:	fa03 fc0e 	lsl.w	ip, r3, lr
   1e50c:	bf28      	it	cs
   1e50e:	f04c 0c02 	orrcs.w	ip, ip, #2
   1e512:	fa43 f305 	asr.w	r3, r3, r5
   1e516:	18c0      	adds	r0, r0, r3
   1e518:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1e51c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1e520:	d507      	bpl.n	1e532 <__adddf3+0xe6>
   1e522:	f04f 0e00 	mov.w	lr, #0
   1e526:	f1dc 0c00 	rsbs	ip, ip, #0
   1e52a:	eb7e 0000 	sbcs.w	r0, lr, r0
   1e52e:	eb6e 0101 	sbc.w	r1, lr, r1
   1e532:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1e536:	d31b      	bcc.n	1e570 <__adddf3+0x124>
   1e538:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1e53c:	d30c      	bcc.n	1e558 <__adddf3+0x10c>
   1e53e:	0849      	lsrs	r1, r1, #1
   1e540:	ea5f 0030 	movs.w	r0, r0, rrx
   1e544:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1e548:	f104 0401 	add.w	r4, r4, #1
   1e54c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1e550:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1e554:	f080 809a 	bcs.w	1e68c <__adddf3+0x240>
   1e558:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1e55c:	bf08      	it	eq
   1e55e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1e562:	f150 0000 	adcs.w	r0, r0, #0
   1e566:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1e56a:	ea41 0105 	orr.w	r1, r1, r5
   1e56e:	bd30      	pop	{r4, r5, pc}
   1e570:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1e574:	4140      	adcs	r0, r0
   1e576:	eb41 0101 	adc.w	r1, r1, r1
   1e57a:	3c01      	subs	r4, #1
   1e57c:	bf28      	it	cs
   1e57e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   1e582:	d2e9      	bcs.n	1e558 <__adddf3+0x10c>
   1e584:	f091 0f00 	teq	r1, #0
   1e588:	bf04      	itt	eq
   1e58a:	4601      	moveq	r1, r0
   1e58c:	2000      	moveq	r0, #0
   1e58e:	fab1 f381 	clz	r3, r1
   1e592:	bf08      	it	eq
   1e594:	3320      	addeq	r3, #32
   1e596:	f1a3 030b 	sub.w	r3, r3, #11
   1e59a:	f1b3 0220 	subs.w	r2, r3, #32
   1e59e:	da0c      	bge.n	1e5ba <__adddf3+0x16e>
   1e5a0:	320c      	adds	r2, #12
   1e5a2:	dd08      	ble.n	1e5b6 <__adddf3+0x16a>
   1e5a4:	f102 0c14 	add.w	ip, r2, #20
   1e5a8:	f1c2 020c 	rsb	r2, r2, #12
   1e5ac:	fa01 f00c 	lsl.w	r0, r1, ip
   1e5b0:	fa21 f102 	lsr.w	r1, r1, r2
   1e5b4:	e00c      	b.n	1e5d0 <__adddf3+0x184>
   1e5b6:	f102 0214 	add.w	r2, r2, #20
   1e5ba:	bfd8      	it	le
   1e5bc:	f1c2 0c20 	rsble	ip, r2, #32
   1e5c0:	fa01 f102 	lsl.w	r1, r1, r2
   1e5c4:	fa20 fc0c 	lsr.w	ip, r0, ip
   1e5c8:	bfdc      	itt	le
   1e5ca:	ea41 010c 	orrle.w	r1, r1, ip
   1e5ce:	4090      	lslle	r0, r2
   1e5d0:	1ae4      	subs	r4, r4, r3
   1e5d2:	bfa2      	ittt	ge
   1e5d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   1e5d8:	4329      	orrge	r1, r5
   1e5da:	bd30      	popge	{r4, r5, pc}
   1e5dc:	ea6f 0404 	mvn.w	r4, r4
   1e5e0:	3c1f      	subs	r4, #31
   1e5e2:	da1c      	bge.n	1e61e <__adddf3+0x1d2>
   1e5e4:	340c      	adds	r4, #12
   1e5e6:	dc0e      	bgt.n	1e606 <__adddf3+0x1ba>
   1e5e8:	f104 0414 	add.w	r4, r4, #20
   1e5ec:	f1c4 0220 	rsb	r2, r4, #32
   1e5f0:	fa20 f004 	lsr.w	r0, r0, r4
   1e5f4:	fa01 f302 	lsl.w	r3, r1, r2
   1e5f8:	ea40 0003 	orr.w	r0, r0, r3
   1e5fc:	fa21 f304 	lsr.w	r3, r1, r4
   1e600:	ea45 0103 	orr.w	r1, r5, r3
   1e604:	bd30      	pop	{r4, r5, pc}
   1e606:	f1c4 040c 	rsb	r4, r4, #12
   1e60a:	f1c4 0220 	rsb	r2, r4, #32
   1e60e:	fa20 f002 	lsr.w	r0, r0, r2
   1e612:	fa01 f304 	lsl.w	r3, r1, r4
   1e616:	ea40 0003 	orr.w	r0, r0, r3
   1e61a:	4629      	mov	r1, r5
   1e61c:	bd30      	pop	{r4, r5, pc}
   1e61e:	fa21 f004 	lsr.w	r0, r1, r4
   1e622:	4629      	mov	r1, r5
   1e624:	bd30      	pop	{r4, r5, pc}
   1e626:	f094 0f00 	teq	r4, #0
   1e62a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1e62e:	bf06      	itte	eq
   1e630:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1e634:	3401      	addeq	r4, #1
   1e636:	3d01      	subne	r5, #1
   1e638:	e74e      	b.n	1e4d8 <__adddf3+0x8c>
   1e63a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1e63e:	bf18      	it	ne
   1e640:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1e644:	d029      	beq.n	1e69a <__adddf3+0x24e>
   1e646:	ea94 0f05 	teq	r4, r5
   1e64a:	bf08      	it	eq
   1e64c:	ea90 0f02 	teqeq	r0, r2
   1e650:	d005      	beq.n	1e65e <__adddf3+0x212>
   1e652:	ea54 0c00 	orrs.w	ip, r4, r0
   1e656:	bf04      	itt	eq
   1e658:	4619      	moveq	r1, r3
   1e65a:	4610      	moveq	r0, r2
   1e65c:	bd30      	pop	{r4, r5, pc}
   1e65e:	ea91 0f03 	teq	r1, r3
   1e662:	bf1e      	ittt	ne
   1e664:	2100      	movne	r1, #0
   1e666:	2000      	movne	r0, #0
   1e668:	bd30      	popne	{r4, r5, pc}
   1e66a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1e66e:	d105      	bne.n	1e67c <__adddf3+0x230>
   1e670:	0040      	lsls	r0, r0, #1
   1e672:	4149      	adcs	r1, r1
   1e674:	bf28      	it	cs
   1e676:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1e67a:	bd30      	pop	{r4, r5, pc}
   1e67c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1e680:	bf3c      	itt	cc
   1e682:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1e686:	bd30      	popcc	{r4, r5, pc}
   1e688:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1e68c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1e690:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1e694:	f04f 0000 	mov.w	r0, #0
   1e698:	bd30      	pop	{r4, r5, pc}
   1e69a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1e69e:	bf1a      	itte	ne
   1e6a0:	4619      	movne	r1, r3
   1e6a2:	4610      	movne	r0, r2
   1e6a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1e6a8:	bf1c      	itt	ne
   1e6aa:	460b      	movne	r3, r1
   1e6ac:	4602      	movne	r2, r0
   1e6ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1e6b2:	bf06      	itte	eq
   1e6b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1e6b8:	ea91 0f03 	teqeq	r1, r3
   1e6bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1e6c0:	bd30      	pop	{r4, r5, pc}
   1e6c2:	bf00      	nop

0001e6c4 <__aeabi_ui2d>:
   1e6c4:	f090 0f00 	teq	r0, #0
   1e6c8:	bf04      	itt	eq
   1e6ca:	2100      	moveq	r1, #0
   1e6cc:	4770      	bxeq	lr
   1e6ce:	b530      	push	{r4, r5, lr}
   1e6d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1e6d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1e6d8:	f04f 0500 	mov.w	r5, #0
   1e6dc:	f04f 0100 	mov.w	r1, #0
   1e6e0:	e750      	b.n	1e584 <__adddf3+0x138>
   1e6e2:	bf00      	nop

0001e6e4 <__aeabi_i2d>:
   1e6e4:	f090 0f00 	teq	r0, #0
   1e6e8:	bf04      	itt	eq
   1e6ea:	2100      	moveq	r1, #0
   1e6ec:	4770      	bxeq	lr
   1e6ee:	b530      	push	{r4, r5, lr}
   1e6f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1e6f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1e6f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1e6fc:	bf48      	it	mi
   1e6fe:	4240      	negmi	r0, r0
   1e700:	f04f 0100 	mov.w	r1, #0
   1e704:	e73e      	b.n	1e584 <__adddf3+0x138>
   1e706:	bf00      	nop

0001e708 <__aeabi_f2d>:
   1e708:	0042      	lsls	r2, r0, #1
   1e70a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1e70e:	ea4f 0131 	mov.w	r1, r1, rrx
   1e712:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1e716:	bf1f      	itttt	ne
   1e718:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1e71c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1e720:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1e724:	4770      	bxne	lr
   1e726:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   1e72a:	bf08      	it	eq
   1e72c:	4770      	bxeq	lr
   1e72e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   1e732:	bf04      	itt	eq
   1e734:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   1e738:	4770      	bxeq	lr
   1e73a:	b530      	push	{r4, r5, lr}
   1e73c:	f44f 7460 	mov.w	r4, #896	; 0x380
   1e740:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1e744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1e748:	e71c      	b.n	1e584 <__adddf3+0x138>
   1e74a:	bf00      	nop

0001e74c <__aeabi_ul2d>:
   1e74c:	ea50 0201 	orrs.w	r2, r0, r1
   1e750:	bf08      	it	eq
   1e752:	4770      	bxeq	lr
   1e754:	b530      	push	{r4, r5, lr}
   1e756:	f04f 0500 	mov.w	r5, #0
   1e75a:	e00a      	b.n	1e772 <__aeabi_l2d+0x16>

0001e75c <__aeabi_l2d>:
   1e75c:	ea50 0201 	orrs.w	r2, r0, r1
   1e760:	bf08      	it	eq
   1e762:	4770      	bxeq	lr
   1e764:	b530      	push	{r4, r5, lr}
   1e766:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1e76a:	d502      	bpl.n	1e772 <__aeabi_l2d+0x16>
   1e76c:	4240      	negs	r0, r0
   1e76e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1e772:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1e776:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1e77a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1e77e:	f43f aed8 	beq.w	1e532 <__adddf3+0xe6>
   1e782:	f04f 0203 	mov.w	r2, #3
   1e786:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1e78a:	bf18      	it	ne
   1e78c:	3203      	addne	r2, #3
   1e78e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1e792:	bf18      	it	ne
   1e794:	3203      	addne	r2, #3
   1e796:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1e79a:	f1c2 0320 	rsb	r3, r2, #32
   1e79e:	fa00 fc03 	lsl.w	ip, r0, r3
   1e7a2:	fa20 f002 	lsr.w	r0, r0, r2
   1e7a6:	fa01 fe03 	lsl.w	lr, r1, r3
   1e7aa:	ea40 000e 	orr.w	r0, r0, lr
   1e7ae:	fa21 f102 	lsr.w	r1, r1, r2
   1e7b2:	4414      	add	r4, r2
   1e7b4:	e6bd      	b.n	1e532 <__adddf3+0xe6>
   1e7b6:	bf00      	nop

0001e7b8 <__aeabi_dmul>:
   1e7b8:	b570      	push	{r4, r5, r6, lr}
   1e7ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1e7be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1e7c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1e7c6:	bf1d      	ittte	ne
   1e7c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1e7cc:	ea94 0f0c 	teqne	r4, ip
   1e7d0:	ea95 0f0c 	teqne	r5, ip
   1e7d4:	f000 f8de 	bleq	1e994 <__aeabi_dmul+0x1dc>
   1e7d8:	442c      	add	r4, r5
   1e7da:	ea81 0603 	eor.w	r6, r1, r3
   1e7de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1e7e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1e7e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1e7ea:	bf18      	it	ne
   1e7ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   1e7f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1e7f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1e7f8:	d038      	beq.n	1e86c <__aeabi_dmul+0xb4>
   1e7fa:	fba0 ce02 	umull	ip, lr, r0, r2
   1e7fe:	f04f 0500 	mov.w	r5, #0
   1e802:	fbe1 e502 	umlal	lr, r5, r1, r2
   1e806:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1e80a:	fbe0 e503 	umlal	lr, r5, r0, r3
   1e80e:	f04f 0600 	mov.w	r6, #0
   1e812:	fbe1 5603 	umlal	r5, r6, r1, r3
   1e816:	f09c 0f00 	teq	ip, #0
   1e81a:	bf18      	it	ne
   1e81c:	f04e 0e01 	orrne.w	lr, lr, #1
   1e820:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   1e824:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   1e828:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1e82c:	d204      	bcs.n	1e838 <__aeabi_dmul+0x80>
   1e82e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1e832:	416d      	adcs	r5, r5
   1e834:	eb46 0606 	adc.w	r6, r6, r6
   1e838:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1e83c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   1e840:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   1e844:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   1e848:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1e84c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1e850:	bf88      	it	hi
   1e852:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1e856:	d81e      	bhi.n	1e896 <__aeabi_dmul+0xde>
   1e858:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1e85c:	bf08      	it	eq
   1e85e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   1e862:	f150 0000 	adcs.w	r0, r0, #0
   1e866:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1e86a:	bd70      	pop	{r4, r5, r6, pc}
   1e86c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   1e870:	ea46 0101 	orr.w	r1, r6, r1
   1e874:	ea40 0002 	orr.w	r0, r0, r2
   1e878:	ea81 0103 	eor.w	r1, r1, r3
   1e87c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   1e880:	bfc2      	ittt	gt
   1e882:	ebd4 050c 	rsbsgt	r5, r4, ip
   1e886:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1e88a:	bd70      	popgt	{r4, r5, r6, pc}
   1e88c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1e890:	f04f 0e00 	mov.w	lr, #0
   1e894:	3c01      	subs	r4, #1
   1e896:	f300 80ab 	bgt.w	1e9f0 <__aeabi_dmul+0x238>
   1e89a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1e89e:	bfde      	ittt	le
   1e8a0:	2000      	movle	r0, #0
   1e8a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   1e8a6:	bd70      	pople	{r4, r5, r6, pc}
   1e8a8:	f1c4 0400 	rsb	r4, r4, #0
   1e8ac:	3c20      	subs	r4, #32
   1e8ae:	da35      	bge.n	1e91c <__aeabi_dmul+0x164>
   1e8b0:	340c      	adds	r4, #12
   1e8b2:	dc1b      	bgt.n	1e8ec <__aeabi_dmul+0x134>
   1e8b4:	f104 0414 	add.w	r4, r4, #20
   1e8b8:	f1c4 0520 	rsb	r5, r4, #32
   1e8bc:	fa00 f305 	lsl.w	r3, r0, r5
   1e8c0:	fa20 f004 	lsr.w	r0, r0, r4
   1e8c4:	fa01 f205 	lsl.w	r2, r1, r5
   1e8c8:	ea40 0002 	orr.w	r0, r0, r2
   1e8cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   1e8d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1e8d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1e8d8:	fa21 f604 	lsr.w	r6, r1, r4
   1e8dc:	eb42 0106 	adc.w	r1, r2, r6
   1e8e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1e8e4:	bf08      	it	eq
   1e8e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1e8ea:	bd70      	pop	{r4, r5, r6, pc}
   1e8ec:	f1c4 040c 	rsb	r4, r4, #12
   1e8f0:	f1c4 0520 	rsb	r5, r4, #32
   1e8f4:	fa00 f304 	lsl.w	r3, r0, r4
   1e8f8:	fa20 f005 	lsr.w	r0, r0, r5
   1e8fc:	fa01 f204 	lsl.w	r2, r1, r4
   1e900:	ea40 0002 	orr.w	r0, r0, r2
   1e904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1e908:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1e90c:	f141 0100 	adc.w	r1, r1, #0
   1e910:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1e914:	bf08      	it	eq
   1e916:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1e91a:	bd70      	pop	{r4, r5, r6, pc}
   1e91c:	f1c4 0520 	rsb	r5, r4, #32
   1e920:	fa00 f205 	lsl.w	r2, r0, r5
   1e924:	ea4e 0e02 	orr.w	lr, lr, r2
   1e928:	fa20 f304 	lsr.w	r3, r0, r4
   1e92c:	fa01 f205 	lsl.w	r2, r1, r5
   1e930:	ea43 0302 	orr.w	r3, r3, r2
   1e934:	fa21 f004 	lsr.w	r0, r1, r4
   1e938:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1e93c:	fa21 f204 	lsr.w	r2, r1, r4
   1e940:	ea20 0002 	bic.w	r0, r0, r2
   1e944:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   1e948:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1e94c:	bf08      	it	eq
   1e94e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1e952:	bd70      	pop	{r4, r5, r6, pc}
   1e954:	f094 0f00 	teq	r4, #0
   1e958:	d10f      	bne.n	1e97a <__aeabi_dmul+0x1c2>
   1e95a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1e95e:	0040      	lsls	r0, r0, #1
   1e960:	eb41 0101 	adc.w	r1, r1, r1
   1e964:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1e968:	bf08      	it	eq
   1e96a:	3c01      	subeq	r4, #1
   1e96c:	d0f7      	beq.n	1e95e <__aeabi_dmul+0x1a6>
   1e96e:	ea41 0106 	orr.w	r1, r1, r6
   1e972:	f095 0f00 	teq	r5, #0
   1e976:	bf18      	it	ne
   1e978:	4770      	bxne	lr
   1e97a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1e97e:	0052      	lsls	r2, r2, #1
   1e980:	eb43 0303 	adc.w	r3, r3, r3
   1e984:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   1e988:	bf08      	it	eq
   1e98a:	3d01      	subeq	r5, #1
   1e98c:	d0f7      	beq.n	1e97e <__aeabi_dmul+0x1c6>
   1e98e:	ea43 0306 	orr.w	r3, r3, r6
   1e992:	4770      	bx	lr
   1e994:	ea94 0f0c 	teq	r4, ip
   1e998:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1e99c:	bf18      	it	ne
   1e99e:	ea95 0f0c 	teqne	r5, ip
   1e9a2:	d00c      	beq.n	1e9be <__aeabi_dmul+0x206>
   1e9a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1e9a8:	bf18      	it	ne
   1e9aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1e9ae:	d1d1      	bne.n	1e954 <__aeabi_dmul+0x19c>
   1e9b0:	ea81 0103 	eor.w	r1, r1, r3
   1e9b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1e9b8:	f04f 0000 	mov.w	r0, #0
   1e9bc:	bd70      	pop	{r4, r5, r6, pc}
   1e9be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1e9c2:	bf06      	itte	eq
   1e9c4:	4610      	moveq	r0, r2
   1e9c6:	4619      	moveq	r1, r3
   1e9c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1e9cc:	d019      	beq.n	1ea02 <__aeabi_dmul+0x24a>
   1e9ce:	ea94 0f0c 	teq	r4, ip
   1e9d2:	d102      	bne.n	1e9da <__aeabi_dmul+0x222>
   1e9d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   1e9d8:	d113      	bne.n	1ea02 <__aeabi_dmul+0x24a>
   1e9da:	ea95 0f0c 	teq	r5, ip
   1e9de:	d105      	bne.n	1e9ec <__aeabi_dmul+0x234>
   1e9e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   1e9e4:	bf1c      	itt	ne
   1e9e6:	4610      	movne	r0, r2
   1e9e8:	4619      	movne	r1, r3
   1e9ea:	d10a      	bne.n	1ea02 <__aeabi_dmul+0x24a>
   1e9ec:	ea81 0103 	eor.w	r1, r1, r3
   1e9f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1e9f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1e9f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1e9fc:	f04f 0000 	mov.w	r0, #0
   1ea00:	bd70      	pop	{r4, r5, r6, pc}
   1ea02:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1ea06:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1ea0a:	bd70      	pop	{r4, r5, r6, pc}

0001ea0c <__aeabi_ddiv>:
   1ea0c:	b570      	push	{r4, r5, r6, lr}
   1ea0e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1ea12:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1ea16:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1ea1a:	bf1d      	ittte	ne
   1ea1c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1ea20:	ea94 0f0c 	teqne	r4, ip
   1ea24:	ea95 0f0c 	teqne	r5, ip
   1ea28:	f000 f8a7 	bleq	1eb7a <__aeabi_ddiv+0x16e>
   1ea2c:	eba4 0405 	sub.w	r4, r4, r5
   1ea30:	ea81 0e03 	eor.w	lr, r1, r3
   1ea34:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1ea38:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1ea3c:	f000 8088 	beq.w	1eb50 <__aeabi_ddiv+0x144>
   1ea40:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1ea44:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1ea48:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   1ea4c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1ea50:	ea4f 2202 	mov.w	r2, r2, lsl #8
   1ea54:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   1ea58:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   1ea5c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   1ea60:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   1ea64:	429d      	cmp	r5, r3
   1ea66:	bf08      	it	eq
   1ea68:	4296      	cmpeq	r6, r2
   1ea6a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   1ea6e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   1ea72:	d202      	bcs.n	1ea7a <__aeabi_ddiv+0x6e>
   1ea74:	085b      	lsrs	r3, r3, #1
   1ea76:	ea4f 0232 	mov.w	r2, r2, rrx
   1ea7a:	1ab6      	subs	r6, r6, r2
   1ea7c:	eb65 0503 	sbc.w	r5, r5, r3
   1ea80:	085b      	lsrs	r3, r3, #1
   1ea82:	ea4f 0232 	mov.w	r2, r2, rrx
   1ea86:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1ea8a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1ea8e:	ebb6 0e02 	subs.w	lr, r6, r2
   1ea92:	eb75 0e03 	sbcs.w	lr, r5, r3
   1ea96:	bf22      	ittt	cs
   1ea98:	1ab6      	subcs	r6, r6, r2
   1ea9a:	4675      	movcs	r5, lr
   1ea9c:	ea40 000c 	orrcs.w	r0, r0, ip
   1eaa0:	085b      	lsrs	r3, r3, #1
   1eaa2:	ea4f 0232 	mov.w	r2, r2, rrx
   1eaa6:	ebb6 0e02 	subs.w	lr, r6, r2
   1eaaa:	eb75 0e03 	sbcs.w	lr, r5, r3
   1eaae:	bf22      	ittt	cs
   1eab0:	1ab6      	subcs	r6, r6, r2
   1eab2:	4675      	movcs	r5, lr
   1eab4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1eab8:	085b      	lsrs	r3, r3, #1
   1eaba:	ea4f 0232 	mov.w	r2, r2, rrx
   1eabe:	ebb6 0e02 	subs.w	lr, r6, r2
   1eac2:	eb75 0e03 	sbcs.w	lr, r5, r3
   1eac6:	bf22      	ittt	cs
   1eac8:	1ab6      	subcs	r6, r6, r2
   1eaca:	4675      	movcs	r5, lr
   1eacc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1ead0:	085b      	lsrs	r3, r3, #1
   1ead2:	ea4f 0232 	mov.w	r2, r2, rrx
   1ead6:	ebb6 0e02 	subs.w	lr, r6, r2
   1eada:	eb75 0e03 	sbcs.w	lr, r5, r3
   1eade:	bf22      	ittt	cs
   1eae0:	1ab6      	subcs	r6, r6, r2
   1eae2:	4675      	movcs	r5, lr
   1eae4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1eae8:	ea55 0e06 	orrs.w	lr, r5, r6
   1eaec:	d018      	beq.n	1eb20 <__aeabi_ddiv+0x114>
   1eaee:	ea4f 1505 	mov.w	r5, r5, lsl #4
   1eaf2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   1eaf6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1eafa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1eafe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   1eb02:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   1eb06:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1eb0a:	d1c0      	bne.n	1ea8e <__aeabi_ddiv+0x82>
   1eb0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1eb10:	d10b      	bne.n	1eb2a <__aeabi_ddiv+0x11e>
   1eb12:	ea41 0100 	orr.w	r1, r1, r0
   1eb16:	f04f 0000 	mov.w	r0, #0
   1eb1a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1eb1e:	e7b6      	b.n	1ea8e <__aeabi_ddiv+0x82>
   1eb20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1eb24:	bf04      	itt	eq
   1eb26:	4301      	orreq	r1, r0
   1eb28:	2000      	moveq	r0, #0
   1eb2a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1eb2e:	bf88      	it	hi
   1eb30:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1eb34:	f63f aeaf 	bhi.w	1e896 <__aeabi_dmul+0xde>
   1eb38:	ebb5 0c03 	subs.w	ip, r5, r3
   1eb3c:	bf04      	itt	eq
   1eb3e:	ebb6 0c02 	subseq.w	ip, r6, r2
   1eb42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1eb46:	f150 0000 	adcs.w	r0, r0, #0
   1eb4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1eb4e:	bd70      	pop	{r4, r5, r6, pc}
   1eb50:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   1eb54:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   1eb58:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   1eb5c:	bfc2      	ittt	gt
   1eb5e:	ebd4 050c 	rsbsgt	r5, r4, ip
   1eb62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1eb66:	bd70      	popgt	{r4, r5, r6, pc}
   1eb68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1eb6c:	f04f 0e00 	mov.w	lr, #0
   1eb70:	3c01      	subs	r4, #1
   1eb72:	e690      	b.n	1e896 <__aeabi_dmul+0xde>
   1eb74:	ea45 0e06 	orr.w	lr, r5, r6
   1eb78:	e68d      	b.n	1e896 <__aeabi_dmul+0xde>
   1eb7a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1eb7e:	ea94 0f0c 	teq	r4, ip
   1eb82:	bf08      	it	eq
   1eb84:	ea95 0f0c 	teqeq	r5, ip
   1eb88:	f43f af3b 	beq.w	1ea02 <__aeabi_dmul+0x24a>
   1eb8c:	ea94 0f0c 	teq	r4, ip
   1eb90:	d10a      	bne.n	1eba8 <__aeabi_ddiv+0x19c>
   1eb92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1eb96:	f47f af34 	bne.w	1ea02 <__aeabi_dmul+0x24a>
   1eb9a:	ea95 0f0c 	teq	r5, ip
   1eb9e:	f47f af25 	bne.w	1e9ec <__aeabi_dmul+0x234>
   1eba2:	4610      	mov	r0, r2
   1eba4:	4619      	mov	r1, r3
   1eba6:	e72c      	b.n	1ea02 <__aeabi_dmul+0x24a>
   1eba8:	ea95 0f0c 	teq	r5, ip
   1ebac:	d106      	bne.n	1ebbc <__aeabi_ddiv+0x1b0>
   1ebae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1ebb2:	f43f aefd 	beq.w	1e9b0 <__aeabi_dmul+0x1f8>
   1ebb6:	4610      	mov	r0, r2
   1ebb8:	4619      	mov	r1, r3
   1ebba:	e722      	b.n	1ea02 <__aeabi_dmul+0x24a>
   1ebbc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1ebc0:	bf18      	it	ne
   1ebc2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1ebc6:	f47f aec5 	bne.w	1e954 <__aeabi_dmul+0x19c>
   1ebca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   1ebce:	f47f af0d 	bne.w	1e9ec <__aeabi_dmul+0x234>
   1ebd2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   1ebd6:	f47f aeeb 	bne.w	1e9b0 <__aeabi_dmul+0x1f8>
   1ebda:	e712      	b.n	1ea02 <__aeabi_dmul+0x24a>

0001ebdc <__gedf2>:
   1ebdc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   1ebe0:	e006      	b.n	1ebf0 <__cmpdf2+0x4>
   1ebe2:	bf00      	nop

0001ebe4 <__ledf2>:
   1ebe4:	f04f 0c01 	mov.w	ip, #1
   1ebe8:	e002      	b.n	1ebf0 <__cmpdf2+0x4>
   1ebea:	bf00      	nop

0001ebec <__cmpdf2>:
   1ebec:	f04f 0c01 	mov.w	ip, #1
   1ebf0:	f84d cd04 	str.w	ip, [sp, #-4]!
   1ebf4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1ebf8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1ebfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1ec00:	bf18      	it	ne
   1ec02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   1ec06:	d01b      	beq.n	1ec40 <__cmpdf2+0x54>
   1ec08:	b001      	add	sp, #4
   1ec0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   1ec0e:	bf0c      	ite	eq
   1ec10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   1ec14:	ea91 0f03 	teqne	r1, r3
   1ec18:	bf02      	ittt	eq
   1ec1a:	ea90 0f02 	teqeq	r0, r2
   1ec1e:	2000      	moveq	r0, #0
   1ec20:	4770      	bxeq	lr
   1ec22:	f110 0f00 	cmn.w	r0, #0
   1ec26:	ea91 0f03 	teq	r1, r3
   1ec2a:	bf58      	it	pl
   1ec2c:	4299      	cmppl	r1, r3
   1ec2e:	bf08      	it	eq
   1ec30:	4290      	cmpeq	r0, r2
   1ec32:	bf2c      	ite	cs
   1ec34:	17d8      	asrcs	r0, r3, #31
   1ec36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1ec3a:	f040 0001 	orr.w	r0, r0, #1
   1ec3e:	4770      	bx	lr
   1ec40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1ec44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1ec48:	d102      	bne.n	1ec50 <__cmpdf2+0x64>
   1ec4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1ec4e:	d107      	bne.n	1ec60 <__cmpdf2+0x74>
   1ec50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1ec54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1ec58:	d1d6      	bne.n	1ec08 <__cmpdf2+0x1c>
   1ec5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1ec5e:	d0d3      	beq.n	1ec08 <__cmpdf2+0x1c>
   1ec60:	f85d 0b04 	ldr.w	r0, [sp], #4
   1ec64:	4770      	bx	lr
   1ec66:	bf00      	nop

0001ec68 <__aeabi_cdrcmple>:
   1ec68:	4684      	mov	ip, r0
   1ec6a:	4610      	mov	r0, r2
   1ec6c:	4662      	mov	r2, ip
   1ec6e:	468c      	mov	ip, r1
   1ec70:	4619      	mov	r1, r3
   1ec72:	4663      	mov	r3, ip
   1ec74:	e000      	b.n	1ec78 <__aeabi_cdcmpeq>
   1ec76:	bf00      	nop

0001ec78 <__aeabi_cdcmpeq>:
   1ec78:	b501      	push	{r0, lr}
   1ec7a:	f7ff ffb7 	bl	1ebec <__cmpdf2>
   1ec7e:	2800      	cmp	r0, #0
   1ec80:	bf48      	it	mi
   1ec82:	f110 0f00 	cmnmi.w	r0, #0
   1ec86:	bd01      	pop	{r0, pc}

0001ec88 <__aeabi_dcmpeq>:
   1ec88:	f84d ed08 	str.w	lr, [sp, #-8]!
   1ec8c:	f7ff fff4 	bl	1ec78 <__aeabi_cdcmpeq>
   1ec90:	bf0c      	ite	eq
   1ec92:	2001      	moveq	r0, #1
   1ec94:	2000      	movne	r0, #0
   1ec96:	f85d fb08 	ldr.w	pc, [sp], #8
   1ec9a:	bf00      	nop

0001ec9c <__aeabi_dcmplt>:
   1ec9c:	f84d ed08 	str.w	lr, [sp, #-8]!
   1eca0:	f7ff ffea 	bl	1ec78 <__aeabi_cdcmpeq>
   1eca4:	bf34      	ite	cc
   1eca6:	2001      	movcc	r0, #1
   1eca8:	2000      	movcs	r0, #0
   1ecaa:	f85d fb08 	ldr.w	pc, [sp], #8
   1ecae:	bf00      	nop

0001ecb0 <__aeabi_dcmple>:
   1ecb0:	f84d ed08 	str.w	lr, [sp, #-8]!
   1ecb4:	f7ff ffe0 	bl	1ec78 <__aeabi_cdcmpeq>
   1ecb8:	bf94      	ite	ls
   1ecba:	2001      	movls	r0, #1
   1ecbc:	2000      	movhi	r0, #0
   1ecbe:	f85d fb08 	ldr.w	pc, [sp], #8
   1ecc2:	bf00      	nop

0001ecc4 <__aeabi_dcmpge>:
   1ecc4:	f84d ed08 	str.w	lr, [sp, #-8]!
   1ecc8:	f7ff ffce 	bl	1ec68 <__aeabi_cdrcmple>
   1eccc:	bf94      	ite	ls
   1ecce:	2001      	movls	r0, #1
   1ecd0:	2000      	movhi	r0, #0
   1ecd2:	f85d fb08 	ldr.w	pc, [sp], #8
   1ecd6:	bf00      	nop

0001ecd8 <__aeabi_dcmpgt>:
   1ecd8:	f84d ed08 	str.w	lr, [sp, #-8]!
   1ecdc:	f7ff ffc4 	bl	1ec68 <__aeabi_cdrcmple>
   1ece0:	bf34      	ite	cc
   1ece2:	2001      	movcc	r0, #1
   1ece4:	2000      	movcs	r0, #0
   1ece6:	f85d fb08 	ldr.w	pc, [sp], #8
   1ecea:	bf00      	nop

0001ecec <__aeabi_dcmpun>:
   1ecec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1ecf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1ecf4:	d102      	bne.n	1ecfc <__aeabi_dcmpun+0x10>
   1ecf6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1ecfa:	d10a      	bne.n	1ed12 <__aeabi_dcmpun+0x26>
   1ecfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1ed00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1ed04:	d102      	bne.n	1ed0c <__aeabi_dcmpun+0x20>
   1ed06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1ed0a:	d102      	bne.n	1ed12 <__aeabi_dcmpun+0x26>
   1ed0c:	f04f 0000 	mov.w	r0, #0
   1ed10:	4770      	bx	lr
   1ed12:	f04f 0001 	mov.w	r0, #1
   1ed16:	4770      	bx	lr

0001ed18 <__aeabi_d2iz>:
   1ed18:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1ed1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1ed20:	d215      	bcs.n	1ed4e <__aeabi_d2iz+0x36>
   1ed22:	d511      	bpl.n	1ed48 <__aeabi_d2iz+0x30>
   1ed24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1ed28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1ed2c:	d912      	bls.n	1ed54 <__aeabi_d2iz+0x3c>
   1ed2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1ed32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1ed36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1ed3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1ed3e:	fa23 f002 	lsr.w	r0, r3, r2
   1ed42:	bf18      	it	ne
   1ed44:	4240      	negne	r0, r0
   1ed46:	4770      	bx	lr
   1ed48:	f04f 0000 	mov.w	r0, #0
   1ed4c:	4770      	bx	lr
   1ed4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1ed52:	d105      	bne.n	1ed60 <__aeabi_d2iz+0x48>
   1ed54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   1ed58:	bf08      	it	eq
   1ed5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   1ed5e:	4770      	bx	lr
   1ed60:	f04f 0000 	mov.w	r0, #0
   1ed64:	4770      	bx	lr
   1ed66:	bf00      	nop

0001ed68 <__aeabi_d2uiz>:
   1ed68:	004a      	lsls	r2, r1, #1
   1ed6a:	d211      	bcs.n	1ed90 <__aeabi_d2uiz+0x28>
   1ed6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1ed70:	d211      	bcs.n	1ed96 <__aeabi_d2uiz+0x2e>
   1ed72:	d50d      	bpl.n	1ed90 <__aeabi_d2uiz+0x28>
   1ed74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1ed78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1ed7c:	d40e      	bmi.n	1ed9c <__aeabi_d2uiz+0x34>
   1ed7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1ed82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1ed86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1ed8a:	fa23 f002 	lsr.w	r0, r3, r2
   1ed8e:	4770      	bx	lr
   1ed90:	f04f 0000 	mov.w	r0, #0
   1ed94:	4770      	bx	lr
   1ed96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1ed9a:	d102      	bne.n	1eda2 <__aeabi_d2uiz+0x3a>
   1ed9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1eda0:	4770      	bx	lr
   1eda2:	f04f 0000 	mov.w	r0, #0
   1eda6:	4770      	bx	lr

0001eda8 <__aeabi_d2f>:
   1eda8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1edac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   1edb0:	bf24      	itt	cs
   1edb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   1edb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   1edba:	d90d      	bls.n	1edd8 <__aeabi_d2f+0x30>
   1edbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1edc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   1edc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   1edc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1edcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   1edd0:	bf08      	it	eq
   1edd2:	f020 0001 	biceq.w	r0, r0, #1
   1edd6:	4770      	bx	lr
   1edd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   1eddc:	d121      	bne.n	1ee22 <__aeabi_d2f+0x7a>
   1edde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   1ede2:	bfbc      	itt	lt
   1ede4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   1ede8:	4770      	bxlt	lr
   1edea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1edee:	ea4f 5252 	mov.w	r2, r2, lsr #21
   1edf2:	f1c2 0218 	rsb	r2, r2, #24
   1edf6:	f1c2 0c20 	rsb	ip, r2, #32
   1edfa:	fa10 f30c 	lsls.w	r3, r0, ip
   1edfe:	fa20 f002 	lsr.w	r0, r0, r2
   1ee02:	bf18      	it	ne
   1ee04:	f040 0001 	orrne.w	r0, r0, #1
   1ee08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1ee0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   1ee10:	fa03 fc0c 	lsl.w	ip, r3, ip
   1ee14:	ea40 000c 	orr.w	r0, r0, ip
   1ee18:	fa23 f302 	lsr.w	r3, r3, r2
   1ee1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1ee20:	e7cc      	b.n	1edbc <__aeabi_d2f+0x14>
   1ee22:	ea7f 5362 	mvns.w	r3, r2, asr #21
   1ee26:	d107      	bne.n	1ee38 <__aeabi_d2f+0x90>
   1ee28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   1ee2c:	bf1e      	ittt	ne
   1ee2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   1ee32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   1ee36:	4770      	bxne	lr
   1ee38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   1ee3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1ee40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1ee44:	4770      	bx	lr
   1ee46:	bf00      	nop

0001ee48 <__aeabi_ldivmod>:
   1ee48:	b97b      	cbnz	r3, 1ee6a <__aeabi_ldivmod+0x22>
   1ee4a:	b972      	cbnz	r2, 1ee6a <__aeabi_ldivmod+0x22>
   1ee4c:	2900      	cmp	r1, #0
   1ee4e:	bfbe      	ittt	lt
   1ee50:	2000      	movlt	r0, #0
   1ee52:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   1ee56:	e006      	blt.n	1ee66 <__aeabi_ldivmod+0x1e>
   1ee58:	bf08      	it	eq
   1ee5a:	2800      	cmpeq	r0, #0
   1ee5c:	bf1c      	itt	ne
   1ee5e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   1ee62:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1ee66:	f000 ba15 	b.w	1f294 <__aeabi_idiv0>
   1ee6a:	f1ad 0c08 	sub.w	ip, sp, #8
   1ee6e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1ee72:	2900      	cmp	r1, #0
   1ee74:	db09      	blt.n	1ee8a <__aeabi_ldivmod+0x42>
   1ee76:	2b00      	cmp	r3, #0
   1ee78:	db1a      	blt.n	1eeb0 <__aeabi_ldivmod+0x68>
   1ee7a:	f000 f8a3 	bl	1efc4 <__udivmoddi4>
   1ee7e:	f8dd e004 	ldr.w	lr, [sp, #4]
   1ee82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1ee86:	b004      	add	sp, #16
   1ee88:	4770      	bx	lr
   1ee8a:	4240      	negs	r0, r0
   1ee8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1ee90:	2b00      	cmp	r3, #0
   1ee92:	db1b      	blt.n	1eecc <__aeabi_ldivmod+0x84>
   1ee94:	f000 f896 	bl	1efc4 <__udivmoddi4>
   1ee98:	f8dd e004 	ldr.w	lr, [sp, #4]
   1ee9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1eea0:	b004      	add	sp, #16
   1eea2:	4240      	negs	r0, r0
   1eea4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1eea8:	4252      	negs	r2, r2
   1eeaa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1eeae:	4770      	bx	lr
   1eeb0:	4252      	negs	r2, r2
   1eeb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1eeb6:	f000 f885 	bl	1efc4 <__udivmoddi4>
   1eeba:	f8dd e004 	ldr.w	lr, [sp, #4]
   1eebe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1eec2:	b004      	add	sp, #16
   1eec4:	4240      	negs	r0, r0
   1eec6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1eeca:	4770      	bx	lr
   1eecc:	4252      	negs	r2, r2
   1eece:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1eed2:	f000 f877 	bl	1efc4 <__udivmoddi4>
   1eed6:	f8dd e004 	ldr.w	lr, [sp, #4]
   1eeda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1eede:	b004      	add	sp, #16
   1eee0:	4252      	negs	r2, r2
   1eee2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1eee6:	4770      	bx	lr

0001eee8 <__aeabi_uldivmod>:
   1eee8:	b953      	cbnz	r3, 1ef00 <__aeabi_uldivmod+0x18>
   1eeea:	b94a      	cbnz	r2, 1ef00 <__aeabi_uldivmod+0x18>
   1eeec:	2900      	cmp	r1, #0
   1eeee:	bf08      	it	eq
   1eef0:	2800      	cmpeq	r0, #0
   1eef2:	bf1c      	itt	ne
   1eef4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   1eef8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1eefc:	f000 b9ca 	b.w	1f294 <__aeabi_idiv0>
   1ef00:	f1ad 0c08 	sub.w	ip, sp, #8
   1ef04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1ef08:	f000 f85c 	bl	1efc4 <__udivmoddi4>
   1ef0c:	f8dd e004 	ldr.w	lr, [sp, #4]
   1ef10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1ef14:	b004      	add	sp, #16
   1ef16:	4770      	bx	lr

0001ef18 <__aeabi_d2lz>:
   1ef18:	b538      	push	{r3, r4, r5, lr}
   1ef1a:	2200      	movs	r2, #0
   1ef1c:	2300      	movs	r3, #0
   1ef1e:	4604      	mov	r4, r0
   1ef20:	460d      	mov	r5, r1
   1ef22:	f7ff febb 	bl	1ec9c <__aeabi_dcmplt>
   1ef26:	b928      	cbnz	r0, 1ef34 <__aeabi_d2lz+0x1c>
   1ef28:	4620      	mov	r0, r4
   1ef2a:	4629      	mov	r1, r5
   1ef2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1ef30:	f000 b82a 	b.w	1ef88 <__aeabi_d2ulz>
   1ef34:	4620      	mov	r0, r4
   1ef36:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   1ef3a:	f000 f825 	bl	1ef88 <__aeabi_d2ulz>
   1ef3e:	4240      	negs	r0, r0
   1ef40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1ef44:	bd38      	pop	{r3, r4, r5, pc}
   1ef46:	bf00      	nop

0001ef48 <__aeabi_f2ulz>:
   1ef48:	b5d0      	push	{r4, r6, r7, lr}
   1ef4a:	f7ff fbdd 	bl	1e708 <__aeabi_f2d>
   1ef4e:	4b0c      	ldr	r3, [pc, #48]	; (1ef80 <__aeabi_f2ulz+0x38>)
   1ef50:	2200      	movs	r2, #0
   1ef52:	4606      	mov	r6, r0
   1ef54:	460f      	mov	r7, r1
   1ef56:	f7ff fc2f 	bl	1e7b8 <__aeabi_dmul>
   1ef5a:	f7ff ff05 	bl	1ed68 <__aeabi_d2uiz>
   1ef5e:	4604      	mov	r4, r0
   1ef60:	f7ff fbb0 	bl	1e6c4 <__aeabi_ui2d>
   1ef64:	4b07      	ldr	r3, [pc, #28]	; (1ef84 <__aeabi_f2ulz+0x3c>)
   1ef66:	2200      	movs	r2, #0
   1ef68:	f7ff fc26 	bl	1e7b8 <__aeabi_dmul>
   1ef6c:	4602      	mov	r2, r0
   1ef6e:	460b      	mov	r3, r1
   1ef70:	4630      	mov	r0, r6
   1ef72:	4639      	mov	r1, r7
   1ef74:	f7ff fa68 	bl	1e448 <__aeabi_dsub>
   1ef78:	f7ff fef6 	bl	1ed68 <__aeabi_d2uiz>
   1ef7c:	4621      	mov	r1, r4
   1ef7e:	bdd0      	pop	{r4, r6, r7, pc}
   1ef80:	3df00000 	.word	0x3df00000
   1ef84:	41f00000 	.word	0x41f00000

0001ef88 <__aeabi_d2ulz>:
   1ef88:	b5d0      	push	{r4, r6, r7, lr}
   1ef8a:	4b0c      	ldr	r3, [pc, #48]	; (1efbc <__aeabi_d2ulz+0x34>)
   1ef8c:	2200      	movs	r2, #0
   1ef8e:	4606      	mov	r6, r0
   1ef90:	460f      	mov	r7, r1
   1ef92:	f7ff fc11 	bl	1e7b8 <__aeabi_dmul>
   1ef96:	f7ff fee7 	bl	1ed68 <__aeabi_d2uiz>
   1ef9a:	4604      	mov	r4, r0
   1ef9c:	f7ff fb92 	bl	1e6c4 <__aeabi_ui2d>
   1efa0:	4b07      	ldr	r3, [pc, #28]	; (1efc0 <__aeabi_d2ulz+0x38>)
   1efa2:	2200      	movs	r2, #0
   1efa4:	f7ff fc08 	bl	1e7b8 <__aeabi_dmul>
   1efa8:	4602      	mov	r2, r0
   1efaa:	460b      	mov	r3, r1
   1efac:	4630      	mov	r0, r6
   1efae:	4639      	mov	r1, r7
   1efb0:	f7ff fa4a 	bl	1e448 <__aeabi_dsub>
   1efb4:	f7ff fed8 	bl	1ed68 <__aeabi_d2uiz>
   1efb8:	4621      	mov	r1, r4
   1efba:	bdd0      	pop	{r4, r6, r7, pc}
   1efbc:	3df00000 	.word	0x3df00000
   1efc0:	41f00000 	.word	0x41f00000

0001efc4 <__udivmoddi4>:
   1efc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1efc8:	9d08      	ldr	r5, [sp, #32]
   1efca:	4604      	mov	r4, r0
   1efcc:	468e      	mov	lr, r1
   1efce:	2b00      	cmp	r3, #0
   1efd0:	d14d      	bne.n	1f06e <__udivmoddi4+0xaa>
   1efd2:	428a      	cmp	r2, r1
   1efd4:	4694      	mov	ip, r2
   1efd6:	d969      	bls.n	1f0ac <__udivmoddi4+0xe8>
   1efd8:	fab2 f282 	clz	r2, r2
   1efdc:	b152      	cbz	r2, 1eff4 <__udivmoddi4+0x30>
   1efde:	fa01 f302 	lsl.w	r3, r1, r2
   1efe2:	f1c2 0120 	rsb	r1, r2, #32
   1efe6:	fa20 f101 	lsr.w	r1, r0, r1
   1efea:	fa0c fc02 	lsl.w	ip, ip, r2
   1efee:	ea41 0e03 	orr.w	lr, r1, r3
   1eff2:	4094      	lsls	r4, r2
   1eff4:	ea4f 481c 	mov.w	r8, ip, lsr #16
   1eff8:	0c21      	lsrs	r1, r4, #16
   1effa:	fbbe f6f8 	udiv	r6, lr, r8
   1effe:	fa1f f78c 	uxth.w	r7, ip
   1f002:	fb08 e316 	mls	r3, r8, r6, lr
   1f006:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   1f00a:	fb06 f107 	mul.w	r1, r6, r7
   1f00e:	4299      	cmp	r1, r3
   1f010:	d90a      	bls.n	1f028 <__udivmoddi4+0x64>
   1f012:	eb1c 0303 	adds.w	r3, ip, r3
   1f016:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   1f01a:	f080 811f 	bcs.w	1f25c <__udivmoddi4+0x298>
   1f01e:	4299      	cmp	r1, r3
   1f020:	f240 811c 	bls.w	1f25c <__udivmoddi4+0x298>
   1f024:	3e02      	subs	r6, #2
   1f026:	4463      	add	r3, ip
   1f028:	1a5b      	subs	r3, r3, r1
   1f02a:	b2a4      	uxth	r4, r4
   1f02c:	fbb3 f0f8 	udiv	r0, r3, r8
   1f030:	fb08 3310 	mls	r3, r8, r0, r3
   1f034:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   1f038:	fb00 f707 	mul.w	r7, r0, r7
   1f03c:	42a7      	cmp	r7, r4
   1f03e:	d90a      	bls.n	1f056 <__udivmoddi4+0x92>
   1f040:	eb1c 0404 	adds.w	r4, ip, r4
   1f044:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1f048:	f080 810a 	bcs.w	1f260 <__udivmoddi4+0x29c>
   1f04c:	42a7      	cmp	r7, r4
   1f04e:	f240 8107 	bls.w	1f260 <__udivmoddi4+0x29c>
   1f052:	4464      	add	r4, ip
   1f054:	3802      	subs	r0, #2
   1f056:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   1f05a:	1be4      	subs	r4, r4, r7
   1f05c:	2600      	movs	r6, #0
   1f05e:	b11d      	cbz	r5, 1f068 <__udivmoddi4+0xa4>
   1f060:	40d4      	lsrs	r4, r2
   1f062:	2300      	movs	r3, #0
   1f064:	e9c5 4300 	strd	r4, r3, [r5]
   1f068:	4631      	mov	r1, r6
   1f06a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1f06e:	428b      	cmp	r3, r1
   1f070:	d909      	bls.n	1f086 <__udivmoddi4+0xc2>
   1f072:	2d00      	cmp	r5, #0
   1f074:	f000 80ef 	beq.w	1f256 <__udivmoddi4+0x292>
   1f078:	2600      	movs	r6, #0
   1f07a:	e9c5 0100 	strd	r0, r1, [r5]
   1f07e:	4630      	mov	r0, r6
   1f080:	4631      	mov	r1, r6
   1f082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1f086:	fab3 f683 	clz	r6, r3
   1f08a:	2e00      	cmp	r6, #0
   1f08c:	d14a      	bne.n	1f124 <__udivmoddi4+0x160>
   1f08e:	428b      	cmp	r3, r1
   1f090:	d302      	bcc.n	1f098 <__udivmoddi4+0xd4>
   1f092:	4282      	cmp	r2, r0
   1f094:	f200 80f9 	bhi.w	1f28a <__udivmoddi4+0x2c6>
   1f098:	1a84      	subs	r4, r0, r2
   1f09a:	eb61 0303 	sbc.w	r3, r1, r3
   1f09e:	2001      	movs	r0, #1
   1f0a0:	469e      	mov	lr, r3
   1f0a2:	2d00      	cmp	r5, #0
   1f0a4:	d0e0      	beq.n	1f068 <__udivmoddi4+0xa4>
   1f0a6:	e9c5 4e00 	strd	r4, lr, [r5]
   1f0aa:	e7dd      	b.n	1f068 <__udivmoddi4+0xa4>
   1f0ac:	b902      	cbnz	r2, 1f0b0 <__udivmoddi4+0xec>
   1f0ae:	deff      	udf	#255	; 0xff
   1f0b0:	fab2 f282 	clz	r2, r2
   1f0b4:	2a00      	cmp	r2, #0
   1f0b6:	f040 8092 	bne.w	1f1de <__udivmoddi4+0x21a>
   1f0ba:	eba1 010c 	sub.w	r1, r1, ip
   1f0be:	ea4f 471c 	mov.w	r7, ip, lsr #16
   1f0c2:	fa1f fe8c 	uxth.w	lr, ip
   1f0c6:	2601      	movs	r6, #1
   1f0c8:	0c20      	lsrs	r0, r4, #16
   1f0ca:	fbb1 f3f7 	udiv	r3, r1, r7
   1f0ce:	fb07 1113 	mls	r1, r7, r3, r1
   1f0d2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   1f0d6:	fb0e f003 	mul.w	r0, lr, r3
   1f0da:	4288      	cmp	r0, r1
   1f0dc:	d908      	bls.n	1f0f0 <__udivmoddi4+0x12c>
   1f0de:	eb1c 0101 	adds.w	r1, ip, r1
   1f0e2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   1f0e6:	d202      	bcs.n	1f0ee <__udivmoddi4+0x12a>
   1f0e8:	4288      	cmp	r0, r1
   1f0ea:	f200 80cb 	bhi.w	1f284 <__udivmoddi4+0x2c0>
   1f0ee:	4643      	mov	r3, r8
   1f0f0:	1a09      	subs	r1, r1, r0
   1f0f2:	b2a4      	uxth	r4, r4
   1f0f4:	fbb1 f0f7 	udiv	r0, r1, r7
   1f0f8:	fb07 1110 	mls	r1, r7, r0, r1
   1f0fc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   1f100:	fb0e fe00 	mul.w	lr, lr, r0
   1f104:	45a6      	cmp	lr, r4
   1f106:	d908      	bls.n	1f11a <__udivmoddi4+0x156>
   1f108:	eb1c 0404 	adds.w	r4, ip, r4
   1f10c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   1f110:	d202      	bcs.n	1f118 <__udivmoddi4+0x154>
   1f112:	45a6      	cmp	lr, r4
   1f114:	f200 80bb 	bhi.w	1f28e <__udivmoddi4+0x2ca>
   1f118:	4608      	mov	r0, r1
   1f11a:	eba4 040e 	sub.w	r4, r4, lr
   1f11e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   1f122:	e79c      	b.n	1f05e <__udivmoddi4+0x9a>
   1f124:	f1c6 0720 	rsb	r7, r6, #32
   1f128:	40b3      	lsls	r3, r6
   1f12a:	fa22 fc07 	lsr.w	ip, r2, r7
   1f12e:	ea4c 0c03 	orr.w	ip, ip, r3
   1f132:	fa20 f407 	lsr.w	r4, r0, r7
   1f136:	fa01 f306 	lsl.w	r3, r1, r6
   1f13a:	431c      	orrs	r4, r3
   1f13c:	40f9      	lsrs	r1, r7
   1f13e:	ea4f 491c 	mov.w	r9, ip, lsr #16
   1f142:	fa00 f306 	lsl.w	r3, r0, r6
   1f146:	fbb1 f8f9 	udiv	r8, r1, r9
   1f14a:	0c20      	lsrs	r0, r4, #16
   1f14c:	fa1f fe8c 	uxth.w	lr, ip
   1f150:	fb09 1118 	mls	r1, r9, r8, r1
   1f154:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   1f158:	fb08 f00e 	mul.w	r0, r8, lr
   1f15c:	4288      	cmp	r0, r1
   1f15e:	fa02 f206 	lsl.w	r2, r2, r6
   1f162:	d90b      	bls.n	1f17c <__udivmoddi4+0x1b8>
   1f164:	eb1c 0101 	adds.w	r1, ip, r1
   1f168:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   1f16c:	f080 8088 	bcs.w	1f280 <__udivmoddi4+0x2bc>
   1f170:	4288      	cmp	r0, r1
   1f172:	f240 8085 	bls.w	1f280 <__udivmoddi4+0x2bc>
   1f176:	f1a8 0802 	sub.w	r8, r8, #2
   1f17a:	4461      	add	r1, ip
   1f17c:	1a09      	subs	r1, r1, r0
   1f17e:	b2a4      	uxth	r4, r4
   1f180:	fbb1 f0f9 	udiv	r0, r1, r9
   1f184:	fb09 1110 	mls	r1, r9, r0, r1
   1f188:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   1f18c:	fb00 fe0e 	mul.w	lr, r0, lr
   1f190:	458e      	cmp	lr, r1
   1f192:	d908      	bls.n	1f1a6 <__udivmoddi4+0x1e2>
   1f194:	eb1c 0101 	adds.w	r1, ip, r1
   1f198:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
   1f19c:	d26c      	bcs.n	1f278 <__udivmoddi4+0x2b4>
   1f19e:	458e      	cmp	lr, r1
   1f1a0:	d96a      	bls.n	1f278 <__udivmoddi4+0x2b4>
   1f1a2:	3802      	subs	r0, #2
   1f1a4:	4461      	add	r1, ip
   1f1a6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   1f1aa:	fba0 9402 	umull	r9, r4, r0, r2
   1f1ae:	eba1 010e 	sub.w	r1, r1, lr
   1f1b2:	42a1      	cmp	r1, r4
   1f1b4:	46c8      	mov	r8, r9
   1f1b6:	46a6      	mov	lr, r4
   1f1b8:	d356      	bcc.n	1f268 <__udivmoddi4+0x2a4>
   1f1ba:	d053      	beq.n	1f264 <__udivmoddi4+0x2a0>
   1f1bc:	b15d      	cbz	r5, 1f1d6 <__udivmoddi4+0x212>
   1f1be:	ebb3 0208 	subs.w	r2, r3, r8
   1f1c2:	eb61 010e 	sbc.w	r1, r1, lr
   1f1c6:	fa01 f707 	lsl.w	r7, r1, r7
   1f1ca:	fa22 f306 	lsr.w	r3, r2, r6
   1f1ce:	40f1      	lsrs	r1, r6
   1f1d0:	431f      	orrs	r7, r3
   1f1d2:	e9c5 7100 	strd	r7, r1, [r5]
   1f1d6:	2600      	movs	r6, #0
   1f1d8:	4631      	mov	r1, r6
   1f1da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1f1de:	f1c2 0320 	rsb	r3, r2, #32
   1f1e2:	40d8      	lsrs	r0, r3
   1f1e4:	fa0c fc02 	lsl.w	ip, ip, r2
   1f1e8:	fa21 f303 	lsr.w	r3, r1, r3
   1f1ec:	4091      	lsls	r1, r2
   1f1ee:	4301      	orrs	r1, r0
   1f1f0:	ea4f 471c 	mov.w	r7, ip, lsr #16
   1f1f4:	fa1f fe8c 	uxth.w	lr, ip
   1f1f8:	fbb3 f0f7 	udiv	r0, r3, r7
   1f1fc:	fb07 3610 	mls	r6, r7, r0, r3
   1f200:	0c0b      	lsrs	r3, r1, #16
   1f202:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   1f206:	fb00 f60e 	mul.w	r6, r0, lr
   1f20a:	429e      	cmp	r6, r3
   1f20c:	fa04 f402 	lsl.w	r4, r4, r2
   1f210:	d908      	bls.n	1f224 <__udivmoddi4+0x260>
   1f212:	eb1c 0303 	adds.w	r3, ip, r3
   1f216:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
   1f21a:	d22f      	bcs.n	1f27c <__udivmoddi4+0x2b8>
   1f21c:	429e      	cmp	r6, r3
   1f21e:	d92d      	bls.n	1f27c <__udivmoddi4+0x2b8>
   1f220:	3802      	subs	r0, #2
   1f222:	4463      	add	r3, ip
   1f224:	1b9b      	subs	r3, r3, r6
   1f226:	b289      	uxth	r1, r1
   1f228:	fbb3 f6f7 	udiv	r6, r3, r7
   1f22c:	fb07 3316 	mls	r3, r7, r6, r3
   1f230:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1f234:	fb06 f30e 	mul.w	r3, r6, lr
   1f238:	428b      	cmp	r3, r1
   1f23a:	d908      	bls.n	1f24e <__udivmoddi4+0x28a>
   1f23c:	eb1c 0101 	adds.w	r1, ip, r1
   1f240:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
   1f244:	d216      	bcs.n	1f274 <__udivmoddi4+0x2b0>
   1f246:	428b      	cmp	r3, r1
   1f248:	d914      	bls.n	1f274 <__udivmoddi4+0x2b0>
   1f24a:	3e02      	subs	r6, #2
   1f24c:	4461      	add	r1, ip
   1f24e:	1ac9      	subs	r1, r1, r3
   1f250:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   1f254:	e738      	b.n	1f0c8 <__udivmoddi4+0x104>
   1f256:	462e      	mov	r6, r5
   1f258:	4628      	mov	r0, r5
   1f25a:	e705      	b.n	1f068 <__udivmoddi4+0xa4>
   1f25c:	4606      	mov	r6, r0
   1f25e:	e6e3      	b.n	1f028 <__udivmoddi4+0x64>
   1f260:	4618      	mov	r0, r3
   1f262:	e6f8      	b.n	1f056 <__udivmoddi4+0x92>
   1f264:	454b      	cmp	r3, r9
   1f266:	d2a9      	bcs.n	1f1bc <__udivmoddi4+0x1f8>
   1f268:	ebb9 0802 	subs.w	r8, r9, r2
   1f26c:	eb64 0e0c 	sbc.w	lr, r4, ip
   1f270:	3801      	subs	r0, #1
   1f272:	e7a3      	b.n	1f1bc <__udivmoddi4+0x1f8>
   1f274:	4646      	mov	r6, r8
   1f276:	e7ea      	b.n	1f24e <__udivmoddi4+0x28a>
   1f278:	4620      	mov	r0, r4
   1f27a:	e794      	b.n	1f1a6 <__udivmoddi4+0x1e2>
   1f27c:	4640      	mov	r0, r8
   1f27e:	e7d1      	b.n	1f224 <__udivmoddi4+0x260>
   1f280:	46d0      	mov	r8, sl
   1f282:	e77b      	b.n	1f17c <__udivmoddi4+0x1b8>
   1f284:	3b02      	subs	r3, #2
   1f286:	4461      	add	r1, ip
   1f288:	e732      	b.n	1f0f0 <__udivmoddi4+0x12c>
   1f28a:	4630      	mov	r0, r6
   1f28c:	e709      	b.n	1f0a2 <__udivmoddi4+0xde>
   1f28e:	4464      	add	r4, ip
   1f290:	3802      	subs	r0, #2
   1f292:	e742      	b.n	1f11a <__udivmoddi4+0x156>

0001f294 <__aeabi_idiv0>:
   1f294:	4770      	bx	lr
   1f296:	bf00      	nop

0001f298 <fabs>:
   1f298:	ec51 0b10 	vmov	r0, r1, d0
   1f29c:	ee10 2a10 	vmov	r2, s0
   1f2a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1f2a4:	ec43 2b10 	vmov	d0, r2, r3
   1f2a8:	4770      	bx	lr
   1f2aa:	bf00      	nop

0001f2ac <ceilf>:
   1f2ac:	ee10 2a10 	vmov	r2, s0
   1f2b0:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   1f2b4:	3b7f      	subs	r3, #127	; 0x7f
   1f2b6:	2b16      	cmp	r3, #22
   1f2b8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   1f2bc:	dc2f      	bgt.n	1f31e <ceilf+0x72>
   1f2be:	2b00      	cmp	r3, #0
   1f2c0:	db18      	blt.n	1f2f4 <ceilf+0x48>
   1f2c2:	491a      	ldr	r1, [pc, #104]	; (1f32c <ceilf+0x80>)
   1f2c4:	4119      	asrs	r1, r3
   1f2c6:	420a      	tst	r2, r1
   1f2c8:	d028      	beq.n	1f31c <ceilf+0x70>
   1f2ca:	eddf 7a19 	vldr	s15, [pc, #100]	; 1f330 <ceilf+0x84>
   1f2ce:	ee70 7a27 	vadd.f32	s15, s0, s15
   1f2d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   1f2d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1f2da:	dd1f      	ble.n	1f31c <ceilf+0x70>
   1f2dc:	2a00      	cmp	r2, #0
   1f2de:	dd04      	ble.n	1f2ea <ceilf+0x3e>
   1f2e0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   1f2e4:	fa40 f303 	asr.w	r3, r0, r3
   1f2e8:	441a      	add	r2, r3
   1f2ea:	ea22 0301 	bic.w	r3, r2, r1
   1f2ee:	ee00 3a10 	vmov	s0, r3
   1f2f2:	4770      	bx	lr
   1f2f4:	eddf 7a0e 	vldr	s15, [pc, #56]	; 1f330 <ceilf+0x84>
   1f2f8:	ee70 7a27 	vadd.f32	s15, s0, s15
   1f2fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   1f300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1f304:	dd0a      	ble.n	1f31c <ceilf+0x70>
   1f306:	2a00      	cmp	r2, #0
   1f308:	db06      	blt.n	1f318 <ceilf+0x6c>
   1f30a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1f30e:	2900      	cmp	r1, #0
   1f310:	bf18      	it	ne
   1f312:	eeb0 0a67 	vmovne.f32	s0, s15
   1f316:	4770      	bx	lr
   1f318:	ed9f 0a06 	vldr	s0, [pc, #24]	; 1f334 <ceilf+0x88>
   1f31c:	4770      	bx	lr
   1f31e:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   1f322:	d3fb      	bcc.n	1f31c <ceilf+0x70>
   1f324:	ee30 0a00 	vadd.f32	s0, s0, s0
   1f328:	4770      	bx	lr
   1f32a:	bf00      	nop
   1f32c:	007fffff 	.word	0x007fffff
   1f330:	7149f2ca 	.word	0x7149f2ca
   1f334:	80000000 	.word	0x80000000

0001f338 <asin>:
   1f338:	b538      	push	{r3, r4, r5, lr}
   1f33a:	ed2d 8b02 	vpush	{d8}
   1f33e:	ec55 4b10 	vmov	r4, r5, d0
   1f342:	f000 f8a9 	bl	1f498 <__ieee754_asin>
   1f346:	4b17      	ldr	r3, [pc, #92]	; (1f3a4 <asin+0x6c>)
   1f348:	eeb0 8a40 	vmov.f32	s16, s0
   1f34c:	eef0 8a60 	vmov.f32	s17, s1
   1f350:	f993 3000 	ldrsb.w	r3, [r3]
   1f354:	3301      	adds	r3, #1
   1f356:	d011      	beq.n	1f37c <asin+0x44>
   1f358:	4622      	mov	r2, r4
   1f35a:	462b      	mov	r3, r5
   1f35c:	4620      	mov	r0, r4
   1f35e:	4629      	mov	r1, r5
   1f360:	f7ff fcc4 	bl	1ecec <__aeabi_dcmpun>
   1f364:	b950      	cbnz	r0, 1f37c <asin+0x44>
   1f366:	ec45 4b10 	vmov	d0, r4, r5
   1f36a:	f7ff ff95 	bl	1f298 <fabs>
   1f36e:	4b0e      	ldr	r3, [pc, #56]	; (1f3a8 <asin+0x70>)
   1f370:	ec51 0b10 	vmov	r0, r1, d0
   1f374:	2200      	movs	r2, #0
   1f376:	f7ff fcaf 	bl	1ecd8 <__aeabi_dcmpgt>
   1f37a:	b930      	cbnz	r0, 1f38a <asin+0x52>
   1f37c:	eeb0 0a48 	vmov.f32	s0, s16
   1f380:	eef0 0a68 	vmov.f32	s1, s17
   1f384:	ecbd 8b02 	vpop	{d8}
   1f388:	bd38      	pop	{r3, r4, r5, pc}
   1f38a:	f000 fe4f 	bl	2002c <__errno>
   1f38e:	ecbd 8b02 	vpop	{d8}
   1f392:	4603      	mov	r3, r0
   1f394:	2221      	movs	r2, #33	; 0x21
   1f396:	601a      	str	r2, [r3, #0]
   1f398:	4804      	ldr	r0, [pc, #16]	; (1f3ac <asin+0x74>)
   1f39a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1f39e:	f000 bd37 	b.w	1fe10 <nan>
   1f3a2:	bf00      	nop
   1f3a4:	200016fc 	.word	0x200016fc
   1f3a8:	3ff00000 	.word	0x3ff00000
   1f3ac:	0002152c 	.word	0x0002152c

0001f3b0 <fmod>:
   1f3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f3b2:	ed2d 8b02 	vpush	{d8}
   1f3b6:	ec57 6b10 	vmov	r6, r7, d0
   1f3ba:	ec55 4b11 	vmov	r4, r5, d1
   1f3be:	f000 fabd 	bl	1f93c <__ieee754_fmod>
   1f3c2:	4b18      	ldr	r3, [pc, #96]	; (1f424 <fmod+0x74>)
   1f3c4:	eeb0 8a40 	vmov.f32	s16, s0
   1f3c8:	eef0 8a60 	vmov.f32	s17, s1
   1f3cc:	f993 3000 	ldrsb.w	r3, [r3]
   1f3d0:	3301      	adds	r3, #1
   1f3d2:	d00d      	beq.n	1f3f0 <fmod+0x40>
   1f3d4:	4630      	mov	r0, r6
   1f3d6:	4639      	mov	r1, r7
   1f3d8:	4622      	mov	r2, r4
   1f3da:	462b      	mov	r3, r5
   1f3dc:	f7ff fc86 	bl	1ecec <__aeabi_dcmpun>
   1f3e0:	b930      	cbnz	r0, 1f3f0 <fmod+0x40>
   1f3e2:	2200      	movs	r2, #0
   1f3e4:	2300      	movs	r3, #0
   1f3e6:	4620      	mov	r0, r4
   1f3e8:	4629      	mov	r1, r5
   1f3ea:	f7ff fc4d 	bl	1ec88 <__aeabi_dcmpeq>
   1f3ee:	b930      	cbnz	r0, 1f3fe <fmod+0x4e>
   1f3f0:	eeb0 0a48 	vmov.f32	s0, s16
   1f3f4:	eef0 0a68 	vmov.f32	s1, s17
   1f3f8:	ecbd 8b02 	vpop	{d8}
   1f3fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f3fe:	f000 fe15 	bl	2002c <__errno>
   1f402:	2200      	movs	r2, #0
   1f404:	2300      	movs	r3, #0
   1f406:	2121      	movs	r1, #33	; 0x21
   1f408:	6001      	str	r1, [r0, #0]
   1f40a:	4610      	mov	r0, r2
   1f40c:	4619      	mov	r1, r3
   1f40e:	f7ff fafd 	bl	1ea0c <__aeabi_ddiv>
   1f412:	ec41 0b18 	vmov	d8, r0, r1
   1f416:	eeb0 0a48 	vmov.f32	s0, s16
   1f41a:	eef0 0a68 	vmov.f32	s1, s17
   1f41e:	ecbd 8b02 	vpop	{d8}
   1f422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f424:	200016fc 	.word	0x200016fc

0001f428 <log10f>:
   1f428:	b508      	push	{r3, lr}
   1f42a:	ed2d 8b02 	vpush	{d8}
   1f42e:	eeb0 8a40 	vmov.f32	s16, s0
   1f432:	f000 fc8d 	bl	1fd50 <__ieee754_log10f>
   1f436:	4b14      	ldr	r3, [pc, #80]	; (1f488 <log10f+0x60>)
   1f438:	f993 3000 	ldrsb.w	r3, [r3]
   1f43c:	3301      	adds	r3, #1
   1f43e:	d014      	beq.n	1f46a <log10f+0x42>
   1f440:	eeb4 8a48 	vcmp.f32	s16, s16
   1f444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1f448:	d60f      	bvs.n	1f46a <log10f+0x42>
   1f44a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   1f44e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1f452:	d80a      	bhi.n	1f46a <log10f+0x42>
   1f454:	eeb5 8a40 	vcmp.f32	s16, #0.0
   1f458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1f45c:	d108      	bne.n	1f470 <log10f+0x48>
   1f45e:	f000 fde5 	bl	2002c <__errno>
   1f462:	2322      	movs	r3, #34	; 0x22
   1f464:	ed9f 0a09 	vldr	s0, [pc, #36]	; 1f48c <log10f+0x64>
   1f468:	6003      	str	r3, [r0, #0]
   1f46a:	ecbd 8b02 	vpop	{d8}
   1f46e:	bd08      	pop	{r3, pc}
   1f470:	f000 fddc 	bl	2002c <__errno>
   1f474:	ecbd 8b02 	vpop	{d8}
   1f478:	4603      	mov	r3, r0
   1f47a:	2221      	movs	r2, #33	; 0x21
   1f47c:	601a      	str	r2, [r3, #0]
   1f47e:	4804      	ldr	r0, [pc, #16]	; (1f490 <log10f+0x68>)
   1f480:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1f484:	f000 bccc 	b.w	1fe20 <nanf>
   1f488:	200016fc 	.word	0x200016fc
   1f48c:	ff800000 	.word	0xff800000
   1f490:	0002152c 	.word	0x0002152c
   1f494:	00000000 	.word	0x00000000

0001f498 <__ieee754_asin>:
   1f498:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f49c:	ec55 4b10 	vmov	r4, r5, d0
   1f4a0:	4bcf      	ldr	r3, [pc, #828]	; (1f7e0 <__ieee754_asin+0x348>)
   1f4a2:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
   1f4a6:	429f      	cmp	r7, r3
   1f4a8:	ed2d 8b04 	vpush	{d8-d9}
   1f4ac:	dd37      	ble.n	1f51e <__ieee754_asin+0x86>
   1f4ae:	ee10 3a10 	vmov	r3, s0
   1f4b2:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
   1f4b6:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
   1f4ba:	433b      	orrs	r3, r7
   1f4bc:	d010      	beq.n	1f4e0 <__ieee754_asin+0x48>
   1f4be:	ee10 2a10 	vmov	r2, s0
   1f4c2:	462b      	mov	r3, r5
   1f4c4:	4620      	mov	r0, r4
   1f4c6:	4629      	mov	r1, r5
   1f4c8:	f7fe ffbe 	bl	1e448 <__aeabi_dsub>
   1f4cc:	4602      	mov	r2, r0
   1f4ce:	460b      	mov	r3, r1
   1f4d0:	f7ff fa9c 	bl	1ea0c <__aeabi_ddiv>
   1f4d4:	ec41 0b10 	vmov	d0, r0, r1
   1f4d8:	ecbd 8b04 	vpop	{d8-d9}
   1f4dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f4e0:	ee10 0a10 	vmov	r0, s0
   1f4e4:	a3a2      	add	r3, pc, #648	; (adr r3, 1f770 <__ieee754_asin+0x2d8>)
   1f4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f4ea:	4629      	mov	r1, r5
   1f4ec:	f7ff f964 	bl	1e7b8 <__aeabi_dmul>
   1f4f0:	4602      	mov	r2, r0
   1f4f2:	460b      	mov	r3, r1
   1f4f4:	4620      	mov	r0, r4
   1f4f6:	4629      	mov	r1, r5
   1f4f8:	4614      	mov	r4, r2
   1f4fa:	461d      	mov	r5, r3
   1f4fc:	a39e      	add	r3, pc, #632	; (adr r3, 1f778 <__ieee754_asin+0x2e0>)
   1f4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f502:	f7ff f959 	bl	1e7b8 <__aeabi_dmul>
   1f506:	4602      	mov	r2, r0
   1f508:	460b      	mov	r3, r1
   1f50a:	4620      	mov	r0, r4
   1f50c:	4629      	mov	r1, r5
   1f50e:	f7fe ff9d 	bl	1e44c <__adddf3>
   1f512:	ecbd 8b04 	vpop	{d8-d9}
   1f516:	ec41 0b10 	vmov	d0, r0, r1
   1f51a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f51e:	4bb1      	ldr	r3, [pc, #708]	; (1f7e4 <__ieee754_asin+0x34c>)
   1f520:	429f      	cmp	r7, r3
   1f522:	462e      	mov	r6, r5
   1f524:	dc12      	bgt.n	1f54c <__ieee754_asin+0xb4>
   1f526:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
   1f52a:	f280 8163 	bge.w	1f7f4 <__ieee754_asin+0x35c>
   1f52e:	a394      	add	r3, pc, #592	; (adr r3, 1f780 <__ieee754_asin+0x2e8>)
   1f530:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f534:	ee10 0a10 	vmov	r0, s0
   1f538:	4629      	mov	r1, r5
   1f53a:	f7fe ff87 	bl	1e44c <__adddf3>
   1f53e:	4baa      	ldr	r3, [pc, #680]	; (1f7e8 <__ieee754_asin+0x350>)
   1f540:	2200      	movs	r2, #0
   1f542:	f7ff fbc9 	bl	1ecd8 <__aeabi_dcmpgt>
   1f546:	2800      	cmp	r0, #0
   1f548:	f040 810c 	bne.w	1f764 <__ieee754_asin+0x2cc>
   1f54c:	ec45 4b10 	vmov	d0, r4, r5
   1f550:	f7ff fea2 	bl	1f298 <fabs>
   1f554:	49a4      	ldr	r1, [pc, #656]	; (1f7e8 <__ieee754_asin+0x350>)
   1f556:	ec53 2b10 	vmov	r2, r3, d0
   1f55a:	2000      	movs	r0, #0
   1f55c:	f7fe ff74 	bl	1e448 <__aeabi_dsub>
   1f560:	4ba2      	ldr	r3, [pc, #648]	; (1f7ec <__ieee754_asin+0x354>)
   1f562:	2200      	movs	r2, #0
   1f564:	f7ff f928 	bl	1e7b8 <__aeabi_dmul>
   1f568:	a387      	add	r3, pc, #540	; (adr r3, 1f788 <__ieee754_asin+0x2f0>)
   1f56a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f56e:	4604      	mov	r4, r0
   1f570:	460d      	mov	r5, r1
   1f572:	f7ff f921 	bl	1e7b8 <__aeabi_dmul>
   1f576:	a386      	add	r3, pc, #536	; (adr r3, 1f790 <__ieee754_asin+0x2f8>)
   1f578:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f57c:	f7fe ff66 	bl	1e44c <__adddf3>
   1f580:	4622      	mov	r2, r4
   1f582:	462b      	mov	r3, r5
   1f584:	f7ff f918 	bl	1e7b8 <__aeabi_dmul>
   1f588:	a383      	add	r3, pc, #524	; (adr r3, 1f798 <__ieee754_asin+0x300>)
   1f58a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f58e:	f7fe ff5b 	bl	1e448 <__aeabi_dsub>
   1f592:	4622      	mov	r2, r4
   1f594:	462b      	mov	r3, r5
   1f596:	f7ff f90f 	bl	1e7b8 <__aeabi_dmul>
   1f59a:	a381      	add	r3, pc, #516	; (adr r3, 1f7a0 <__ieee754_asin+0x308>)
   1f59c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f5a0:	f7fe ff54 	bl	1e44c <__adddf3>
   1f5a4:	4622      	mov	r2, r4
   1f5a6:	462b      	mov	r3, r5
   1f5a8:	f7ff f906 	bl	1e7b8 <__aeabi_dmul>
   1f5ac:	a37e      	add	r3, pc, #504	; (adr r3, 1f7a8 <__ieee754_asin+0x310>)
   1f5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f5b2:	f7fe ff49 	bl	1e448 <__aeabi_dsub>
   1f5b6:	4622      	mov	r2, r4
   1f5b8:	462b      	mov	r3, r5
   1f5ba:	f7ff f8fd 	bl	1e7b8 <__aeabi_dmul>
   1f5be:	a37c      	add	r3, pc, #496	; (adr r3, 1f7b0 <__ieee754_asin+0x318>)
   1f5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f5c4:	f7fe ff42 	bl	1e44c <__adddf3>
   1f5c8:	4622      	mov	r2, r4
   1f5ca:	462b      	mov	r3, r5
   1f5cc:	f7ff f8f4 	bl	1e7b8 <__aeabi_dmul>
   1f5d0:	a379      	add	r3, pc, #484	; (adr r3, 1f7b8 <__ieee754_asin+0x320>)
   1f5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f5d6:	ec41 0b18 	vmov	d8, r0, r1
   1f5da:	ec41 0b19 	vmov	d9, r0, r1
   1f5de:	4620      	mov	r0, r4
   1f5e0:	4629      	mov	r1, r5
   1f5e2:	f7ff f8e9 	bl	1e7b8 <__aeabi_dmul>
   1f5e6:	a376      	add	r3, pc, #472	; (adr r3, 1f7c0 <__ieee754_asin+0x328>)
   1f5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f5ec:	f7fe ff2c 	bl	1e448 <__aeabi_dsub>
   1f5f0:	4622      	mov	r2, r4
   1f5f2:	462b      	mov	r3, r5
   1f5f4:	f7ff f8e0 	bl	1e7b8 <__aeabi_dmul>
   1f5f8:	a373      	add	r3, pc, #460	; (adr r3, 1f7c8 <__ieee754_asin+0x330>)
   1f5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f5fe:	f7fe ff25 	bl	1e44c <__adddf3>
   1f602:	4622      	mov	r2, r4
   1f604:	462b      	mov	r3, r5
   1f606:	f7ff f8d7 	bl	1e7b8 <__aeabi_dmul>
   1f60a:	a371      	add	r3, pc, #452	; (adr r3, 1f7d0 <__ieee754_asin+0x338>)
   1f60c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f610:	f7fe ff1a 	bl	1e448 <__aeabi_dsub>
   1f614:	4622      	mov	r2, r4
   1f616:	462b      	mov	r3, r5
   1f618:	f7ff f8ce 	bl	1e7b8 <__aeabi_dmul>
   1f61c:	4b72      	ldr	r3, [pc, #456]	; (1f7e8 <__ieee754_asin+0x350>)
   1f61e:	2200      	movs	r2, #0
   1f620:	f7fe ff14 	bl	1e44c <__adddf3>
   1f624:	ec45 4b10 	vmov	d0, r4, r5
   1f628:	4680      	mov	r8, r0
   1f62a:	4689      	mov	r9, r1
   1f62c:	f000 fac4 	bl	1fbb8 <__ieee754_sqrt>
   1f630:	4b6f      	ldr	r3, [pc, #444]	; (1f7f0 <__ieee754_asin+0x358>)
   1f632:	429f      	cmp	r7, r3
   1f634:	ec5b ab10 	vmov	sl, fp, d0
   1f638:	dc73      	bgt.n	1f722 <__ieee754_asin+0x28a>
   1f63a:	465b      	mov	r3, fp
   1f63c:	2200      	movs	r2, #0
   1f63e:	ee10 0a10 	vmov	r0, s0
   1f642:	ec43 2b18 	vmov	d8, r2, r3
   1f646:	4659      	mov	r1, fp
   1f648:	ee10 2a10 	vmov	r2, s0
   1f64c:	f7fe fefe 	bl	1e44c <__adddf3>
   1f650:	4642      	mov	r2, r8
   1f652:	464b      	mov	r3, r9
   1f654:	4680      	mov	r8, r0
   1f656:	4689      	mov	r9, r1
   1f658:	ec51 0b19 	vmov	r0, r1, d9
   1f65c:	f7ff f9d6 	bl	1ea0c <__aeabi_ddiv>
   1f660:	4602      	mov	r2, r0
   1f662:	460b      	mov	r3, r1
   1f664:	4640      	mov	r0, r8
   1f666:	4649      	mov	r1, r9
   1f668:	f7ff f8a6 	bl	1e7b8 <__aeabi_dmul>
   1f66c:	ec53 2b18 	vmov	r2, r3, d8
   1f670:	4680      	mov	r8, r0
   1f672:	4689      	mov	r9, r1
   1f674:	ec51 0b18 	vmov	r0, r1, d8
   1f678:	f7ff f89e 	bl	1e7b8 <__aeabi_dmul>
   1f67c:	4602      	mov	r2, r0
   1f67e:	460b      	mov	r3, r1
   1f680:	4620      	mov	r0, r4
   1f682:	4629      	mov	r1, r5
   1f684:	f7fe fee0 	bl	1e448 <__aeabi_dsub>
   1f688:	ec53 2b18 	vmov	r2, r3, d8
   1f68c:	4604      	mov	r4, r0
   1f68e:	460d      	mov	r5, r1
   1f690:	4650      	mov	r0, sl
   1f692:	4659      	mov	r1, fp
   1f694:	f7fe feda 	bl	1e44c <__adddf3>
   1f698:	4602      	mov	r2, r0
   1f69a:	460b      	mov	r3, r1
   1f69c:	4620      	mov	r0, r4
   1f69e:	4629      	mov	r1, r5
   1f6a0:	f7ff f9b4 	bl	1ea0c <__aeabi_ddiv>
   1f6a4:	4602      	mov	r2, r0
   1f6a6:	460b      	mov	r3, r1
   1f6a8:	f7fe fed0 	bl	1e44c <__adddf3>
   1f6ac:	4602      	mov	r2, r0
   1f6ae:	460b      	mov	r3, r1
   1f6b0:	a131      	add	r1, pc, #196	; (adr r1, 1f778 <__ieee754_asin+0x2e0>)
   1f6b2:	e9d1 0100 	ldrd	r0, r1, [r1]
   1f6b6:	f7fe fec7 	bl	1e448 <__aeabi_dsub>
   1f6ba:	4602      	mov	r2, r0
   1f6bc:	460b      	mov	r3, r1
   1f6be:	4640      	mov	r0, r8
   1f6c0:	4649      	mov	r1, r9
   1f6c2:	f7fe fec1 	bl	1e448 <__aeabi_dsub>
   1f6c6:	ec53 2b18 	vmov	r2, r3, d8
   1f6ca:	4604      	mov	r4, r0
   1f6cc:	460d      	mov	r5, r1
   1f6ce:	ee18 0a10 	vmov	r0, s16
   1f6d2:	4619      	mov	r1, r3
   1f6d4:	f7fe feba 	bl	1e44c <__adddf3>
   1f6d8:	4602      	mov	r2, r0
   1f6da:	460b      	mov	r3, r1
   1f6dc:	a13e      	add	r1, pc, #248	; (adr r1, 1f7d8 <__ieee754_asin+0x340>)
   1f6de:	e9d1 0100 	ldrd	r0, r1, [r1]
   1f6e2:	f7fe feb1 	bl	1e448 <__aeabi_dsub>
   1f6e6:	4602      	mov	r2, r0
   1f6e8:	460b      	mov	r3, r1
   1f6ea:	4620      	mov	r0, r4
   1f6ec:	4629      	mov	r1, r5
   1f6ee:	f7fe feab 	bl	1e448 <__aeabi_dsub>
   1f6f2:	4602      	mov	r2, r0
   1f6f4:	460b      	mov	r3, r1
   1f6f6:	a138      	add	r1, pc, #224	; (adr r1, 1f7d8 <__ieee754_asin+0x340>)
   1f6f8:	e9d1 0100 	ldrd	r0, r1, [r1]
   1f6fc:	f7fe fea4 	bl	1e448 <__aeabi_dsub>
   1f700:	ec41 0b10 	vmov	d0, r0, r1
   1f704:	2e00      	cmp	r6, #0
   1f706:	f73f aee7 	bgt.w	1f4d8 <__ieee754_asin+0x40>
   1f70a:	ecbd 8b04 	vpop	{d8-d9}
   1f70e:	ee10 1a90 	vmov	r1, s1
   1f712:	ee10 2a10 	vmov	r2, s0
   1f716:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1f71a:	ec43 2b10 	vmov	d0, r2, r3
   1f71e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f722:	4642      	mov	r2, r8
   1f724:	464b      	mov	r3, r9
   1f726:	ec51 0b18 	vmov	r0, r1, d8
   1f72a:	f7ff f96f 	bl	1ea0c <__aeabi_ddiv>
   1f72e:	4652      	mov	r2, sl
   1f730:	465b      	mov	r3, fp
   1f732:	f7ff f841 	bl	1e7b8 <__aeabi_dmul>
   1f736:	4652      	mov	r2, sl
   1f738:	465b      	mov	r3, fp
   1f73a:	f7fe fe87 	bl	1e44c <__adddf3>
   1f73e:	4602      	mov	r2, r0
   1f740:	460b      	mov	r3, r1
   1f742:	f7fe fe83 	bl	1e44c <__adddf3>
   1f746:	a30c      	add	r3, pc, #48	; (adr r3, 1f778 <__ieee754_asin+0x2e0>)
   1f748:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f74c:	f7fe fe7c 	bl	1e448 <__aeabi_dsub>
   1f750:	4602      	mov	r2, r0
   1f752:	460b      	mov	r3, r1
   1f754:	a106      	add	r1, pc, #24	; (adr r1, 1f770 <__ieee754_asin+0x2d8>)
   1f756:	e9d1 0100 	ldrd	r0, r1, [r1]
   1f75a:	f7fe fe75 	bl	1e448 <__aeabi_dsub>
   1f75e:	ec41 0b10 	vmov	d0, r0, r1
   1f762:	e7cf      	b.n	1f704 <__ieee754_asin+0x26c>
   1f764:	ec45 4b10 	vmov	d0, r4, r5
   1f768:	e6b6      	b.n	1f4d8 <__ieee754_asin+0x40>
   1f76a:	bf00      	nop
   1f76c:	f3af 8000 	nop.w
   1f770:	54442d18 	.word	0x54442d18
   1f774:	3ff921fb 	.word	0x3ff921fb
   1f778:	33145c07 	.word	0x33145c07
   1f77c:	3c91a626 	.word	0x3c91a626
   1f780:	8800759c 	.word	0x8800759c
   1f784:	7e37e43c 	.word	0x7e37e43c
   1f788:	0dfdf709 	.word	0x0dfdf709
   1f78c:	3f023de1 	.word	0x3f023de1
   1f790:	7501b288 	.word	0x7501b288
   1f794:	3f49efe0 	.word	0x3f49efe0
   1f798:	b5688f3b 	.word	0xb5688f3b
   1f79c:	3fa48228 	.word	0x3fa48228
   1f7a0:	0e884455 	.word	0x0e884455
   1f7a4:	3fc9c155 	.word	0x3fc9c155
   1f7a8:	03eb6f7d 	.word	0x03eb6f7d
   1f7ac:	3fd4d612 	.word	0x3fd4d612
   1f7b0:	55555555 	.word	0x55555555
   1f7b4:	3fc55555 	.word	0x3fc55555
   1f7b8:	b12e9282 	.word	0xb12e9282
   1f7bc:	3fb3b8c5 	.word	0x3fb3b8c5
   1f7c0:	1b8d0159 	.word	0x1b8d0159
   1f7c4:	3fe6066c 	.word	0x3fe6066c
   1f7c8:	9c598ac8 	.word	0x9c598ac8
   1f7cc:	40002ae5 	.word	0x40002ae5
   1f7d0:	1c8a2d4b 	.word	0x1c8a2d4b
   1f7d4:	40033a27 	.word	0x40033a27
   1f7d8:	54442d18 	.word	0x54442d18
   1f7dc:	3fe921fb 	.word	0x3fe921fb
   1f7e0:	3fefffff 	.word	0x3fefffff
   1f7e4:	3fdfffff 	.word	0x3fdfffff
   1f7e8:	3ff00000 	.word	0x3ff00000
   1f7ec:	3fe00000 	.word	0x3fe00000
   1f7f0:	3fef3332 	.word	0x3fef3332
   1f7f4:	ee10 2a10 	vmov	r2, s0
   1f7f8:	ee10 0a10 	vmov	r0, s0
   1f7fc:	462b      	mov	r3, r5
   1f7fe:	4629      	mov	r1, r5
   1f800:	f7fe ffda 	bl	1e7b8 <__aeabi_dmul>
   1f804:	a339      	add	r3, pc, #228	; (adr r3, 1f8ec <__ieee754_asin+0x454>)
   1f806:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f80a:	4606      	mov	r6, r0
   1f80c:	460f      	mov	r7, r1
   1f80e:	f7fe ffd3 	bl	1e7b8 <__aeabi_dmul>
   1f812:	a338      	add	r3, pc, #224	; (adr r3, 1f8f4 <__ieee754_asin+0x45c>)
   1f814:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f818:	f7fe fe18 	bl	1e44c <__adddf3>
   1f81c:	4632      	mov	r2, r6
   1f81e:	463b      	mov	r3, r7
   1f820:	f7fe ffca 	bl	1e7b8 <__aeabi_dmul>
   1f824:	a335      	add	r3, pc, #212	; (adr r3, 1f8fc <__ieee754_asin+0x464>)
   1f826:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f82a:	f7fe fe0d 	bl	1e448 <__aeabi_dsub>
   1f82e:	4632      	mov	r2, r6
   1f830:	463b      	mov	r3, r7
   1f832:	f7fe ffc1 	bl	1e7b8 <__aeabi_dmul>
   1f836:	a333      	add	r3, pc, #204	; (adr r3, 1f904 <__ieee754_asin+0x46c>)
   1f838:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f83c:	f7fe fe06 	bl	1e44c <__adddf3>
   1f840:	4632      	mov	r2, r6
   1f842:	463b      	mov	r3, r7
   1f844:	f7fe ffb8 	bl	1e7b8 <__aeabi_dmul>
   1f848:	a330      	add	r3, pc, #192	; (adr r3, 1f90c <__ieee754_asin+0x474>)
   1f84a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f84e:	f7fe fdfb 	bl	1e448 <__aeabi_dsub>
   1f852:	4632      	mov	r2, r6
   1f854:	463b      	mov	r3, r7
   1f856:	f7fe ffaf 	bl	1e7b8 <__aeabi_dmul>
   1f85a:	a32e      	add	r3, pc, #184	; (adr r3, 1f914 <__ieee754_asin+0x47c>)
   1f85c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f860:	f7fe fdf4 	bl	1e44c <__adddf3>
   1f864:	4632      	mov	r2, r6
   1f866:	463b      	mov	r3, r7
   1f868:	f7fe ffa6 	bl	1e7b8 <__aeabi_dmul>
   1f86c:	a32b      	add	r3, pc, #172	; (adr r3, 1f91c <__ieee754_asin+0x484>)
   1f86e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f872:	4680      	mov	r8, r0
   1f874:	4689      	mov	r9, r1
   1f876:	4630      	mov	r0, r6
   1f878:	4639      	mov	r1, r7
   1f87a:	f7fe ff9d 	bl	1e7b8 <__aeabi_dmul>
   1f87e:	a329      	add	r3, pc, #164	; (adr r3, 1f924 <__ieee754_asin+0x48c>)
   1f880:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f884:	f7fe fde0 	bl	1e448 <__aeabi_dsub>
   1f888:	4632      	mov	r2, r6
   1f88a:	463b      	mov	r3, r7
   1f88c:	f7fe ff94 	bl	1e7b8 <__aeabi_dmul>
   1f890:	a326      	add	r3, pc, #152	; (adr r3, 1f92c <__ieee754_asin+0x494>)
   1f892:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f896:	f7fe fdd9 	bl	1e44c <__adddf3>
   1f89a:	4632      	mov	r2, r6
   1f89c:	463b      	mov	r3, r7
   1f89e:	f7fe ff8b 	bl	1e7b8 <__aeabi_dmul>
   1f8a2:	a324      	add	r3, pc, #144	; (adr r3, 1f934 <__ieee754_asin+0x49c>)
   1f8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f8a8:	f7fe fdce 	bl	1e448 <__aeabi_dsub>
   1f8ac:	4632      	mov	r2, r6
   1f8ae:	463b      	mov	r3, r7
   1f8b0:	f7fe ff82 	bl	1e7b8 <__aeabi_dmul>
   1f8b4:	4b0c      	ldr	r3, [pc, #48]	; (1f8e8 <__ieee754_asin+0x450>)
   1f8b6:	2200      	movs	r2, #0
   1f8b8:	f7fe fdc8 	bl	1e44c <__adddf3>
   1f8bc:	4602      	mov	r2, r0
   1f8be:	460b      	mov	r3, r1
   1f8c0:	4640      	mov	r0, r8
   1f8c2:	4649      	mov	r1, r9
   1f8c4:	f7ff f8a2 	bl	1ea0c <__aeabi_ddiv>
   1f8c8:	4622      	mov	r2, r4
   1f8ca:	462b      	mov	r3, r5
   1f8cc:	f7fe ff74 	bl	1e7b8 <__aeabi_dmul>
   1f8d0:	4622      	mov	r2, r4
   1f8d2:	462b      	mov	r3, r5
   1f8d4:	f7fe fdba 	bl	1e44c <__adddf3>
   1f8d8:	ecbd 8b04 	vpop	{d8-d9}
   1f8dc:	ec41 0b10 	vmov	d0, r0, r1
   1f8e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f8e4:	f3af 8000 	nop.w
   1f8e8:	3ff00000 	.word	0x3ff00000
   1f8ec:	0dfdf709 	.word	0x0dfdf709
   1f8f0:	3f023de1 	.word	0x3f023de1
   1f8f4:	7501b288 	.word	0x7501b288
   1f8f8:	3f49efe0 	.word	0x3f49efe0
   1f8fc:	b5688f3b 	.word	0xb5688f3b
   1f900:	3fa48228 	.word	0x3fa48228
   1f904:	0e884455 	.word	0x0e884455
   1f908:	3fc9c155 	.word	0x3fc9c155
   1f90c:	03eb6f7d 	.word	0x03eb6f7d
   1f910:	3fd4d612 	.word	0x3fd4d612
   1f914:	55555555 	.word	0x55555555
   1f918:	3fc55555 	.word	0x3fc55555
   1f91c:	b12e9282 	.word	0xb12e9282
   1f920:	3fb3b8c5 	.word	0x3fb3b8c5
   1f924:	1b8d0159 	.word	0x1b8d0159
   1f928:	3fe6066c 	.word	0x3fe6066c
   1f92c:	9c598ac8 	.word	0x9c598ac8
   1f930:	40002ae5 	.word	0x40002ae5
   1f934:	1c8a2d4b 	.word	0x1c8a2d4b
   1f938:	40033a27 	.word	0x40033a27

0001f93c <__ieee754_fmod>:
   1f93c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f940:	ec53 2b11 	vmov	r2, r3, d1
   1f944:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
   1f948:	ea5e 0402 	orrs.w	r4, lr, r2
   1f94c:	ec51 0b10 	vmov	r0, r1, d0
   1f950:	d033      	beq.n	1f9ba <__ieee754_fmod+0x7e>
   1f952:	4c93      	ldr	r4, [pc, #588]	; (1fba0 <__ieee754_fmod+0x264>)
   1f954:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
   1f958:	45a1      	cmp	r9, r4
   1f95a:	4688      	mov	r8, r1
   1f95c:	dc2d      	bgt.n	1f9ba <__ieee754_fmod+0x7e>
   1f95e:	4254      	negs	r4, r2
   1f960:	4e90      	ldr	r6, [pc, #576]	; (1fba4 <__ieee754_fmod+0x268>)
   1f962:	4314      	orrs	r4, r2
   1f964:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
   1f968:	42b4      	cmp	r4, r6
   1f96a:	ee11 7a10 	vmov	r7, s2
   1f96e:	d824      	bhi.n	1f9ba <__ieee754_fmod+0x7e>
   1f970:	45f1      	cmp	r9, lr
   1f972:	469c      	mov	ip, r3
   1f974:	ee11 5a10 	vmov	r5, s2
   1f978:	ee10 3a10 	vmov	r3, s0
   1f97c:	4602      	mov	r2, r0
   1f97e:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
   1f982:	dc06      	bgt.n	1f992 <__ieee754_fmod+0x56>
   1f984:	f2c0 80bd 	blt.w	1fb02 <__ieee754_fmod+0x1c6>
   1f988:	42b8      	cmp	r0, r7
   1f98a:	f0c0 80ba 	bcc.w	1fb02 <__ieee754_fmod+0x1c6>
   1f98e:	f000 80ef 	beq.w	1fb70 <__ieee754_fmod+0x234>
   1f992:	4984      	ldr	r1, [pc, #528]	; (1fba4 <__ieee754_fmod+0x268>)
   1f994:	ea08 0101 	and.w	r1, r8, r1
   1f998:	b9c9      	cbnz	r1, 1f9ce <__ieee754_fmod+0x92>
   1f99a:	f1b9 0f00 	cmp.w	r9, #0
   1f99e:	f040 80d0 	bne.w	1fb42 <__ieee754_fmod+0x206>
   1f9a2:	2b00      	cmp	r3, #0
   1f9a4:	4618      	mov	r0, r3
   1f9a6:	f340 80f8 	ble.w	1fb9a <__ieee754_fmod+0x25e>
   1f9aa:	f2a1 4113 	subw	r1, r1, #1043	; 0x413
   1f9ae:	0040      	lsls	r0, r0, #1
   1f9b0:	2800      	cmp	r0, #0
   1f9b2:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
   1f9b6:	dcfa      	bgt.n	1f9ae <__ieee754_fmod+0x72>
   1f9b8:	e00d      	b.n	1f9d6 <__ieee754_fmod+0x9a>
   1f9ba:	f7fe fefd 	bl	1e7b8 <__aeabi_dmul>
   1f9be:	4602      	mov	r2, r0
   1f9c0:	460b      	mov	r3, r1
   1f9c2:	f7ff f823 	bl	1ea0c <__aeabi_ddiv>
   1f9c6:	ec41 0b10 	vmov	d0, r0, r1
   1f9ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1f9ce:	ea4f 5129 	mov.w	r1, r9, asr #20
   1f9d2:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   1f9d6:	4873      	ldr	r0, [pc, #460]	; (1fba4 <__ieee754_fmod+0x268>)
   1f9d8:	ea0c 0000 	and.w	r0, ip, r0
   1f9dc:	b968      	cbnz	r0, 1f9fa <__ieee754_fmod+0xbe>
   1f9de:	f1be 0f00 	cmp.w	lr, #0
   1f9e2:	f040 80a2 	bne.w	1fb2a <__ieee754_fmod+0x1ee>
   1f9e6:	2f00      	cmp	r7, #0
   1f9e8:	4e6f      	ldr	r6, [pc, #444]	; (1fba8 <__ieee754_fmod+0x26c>)
   1f9ea:	4638      	mov	r0, r7
   1f9ec:	dd09      	ble.n	1fa02 <__ieee754_fmod+0xc6>
   1f9ee:	0040      	lsls	r0, r0, #1
   1f9f0:	2800      	cmp	r0, #0
   1f9f2:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   1f9f6:	dcfa      	bgt.n	1f9ee <__ieee754_fmod+0xb2>
   1f9f8:	e003      	b.n	1fa02 <__ieee754_fmod+0xc6>
   1f9fa:	ea4f 562e 	mov.w	r6, lr, asr #20
   1f9fe:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
   1fa02:	486a      	ldr	r0, [pc, #424]	; (1fbac <__ieee754_fmod+0x270>)
   1fa04:	4281      	cmp	r1, r0
   1fa06:	db6f      	blt.n	1fae8 <__ieee754_fmod+0x1ac>
   1fa08:	f3c8 0313 	ubfx	r3, r8, #0, #20
   1fa0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1fa10:	4866      	ldr	r0, [pc, #408]	; (1fbac <__ieee754_fmod+0x270>)
   1fa12:	4286      	cmp	r6, r0
   1fa14:	db58      	blt.n	1fac8 <__ieee754_fmod+0x18c>
   1fa16:	f3cc 0c13 	ubfx	ip, ip, #0, #20
   1fa1a:	f44c 1c80 	orr.w	ip, ip, #1048576	; 0x100000
   1fa1e:	1bd0      	subs	r0, r2, r7
   1fa20:	1b89      	subs	r1, r1, r6
   1fa22:	d10b      	bne.n	1fa3c <__ieee754_fmod+0x100>
   1fa24:	e01d      	b.n	1fa62 <__ieee754_fmod+0x126>
   1fa26:	ea50 030e 	orrs.w	r3, r0, lr
   1fa2a:	d045      	beq.n	1fab8 <__ieee754_fmod+0x17c>
   1fa2c:	ea4f 73de 	mov.w	r3, lr, lsr #31
   1fa30:	3901      	subs	r1, #1
   1fa32:	eb03 0340 	add.w	r3, r3, r0, lsl #1
   1fa36:	ea4f 024e 	mov.w	r2, lr, lsl #1
   1fa3a:	d011      	beq.n	1fa60 <__ieee754_fmod+0x124>
   1fa3c:	eba3 000c 	sub.w	r0, r3, ip
   1fa40:	4295      	cmp	r5, r2
   1fa42:	bf88      	it	hi
   1fa44:	f100 30ff 	addhi.w	r0, r0, #4294967295	; 0xffffffff
   1fa48:	2800      	cmp	r0, #0
   1fa4a:	eba2 0e05 	sub.w	lr, r2, r5
   1fa4e:	ea4f 77d2 	mov.w	r7, r2, lsr #31
   1fa52:	dae8      	bge.n	1fa26 <__ieee754_fmod+0xea>
   1fa54:	3901      	subs	r1, #1
   1fa56:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   1fa5a:	ea4f 0242 	mov.w	r2, r2, lsl #1
   1fa5e:	d1ed      	bne.n	1fa3c <__ieee754_fmod+0x100>
   1fa60:	1b50      	subs	r0, r2, r5
   1fa62:	eba3 0c0c 	sub.w	ip, r3, ip
   1fa66:	4295      	cmp	r5, r2
   1fa68:	bf88      	it	hi
   1fa6a:	f10c 3cff 	addhi.w	ip, ip, #4294967295	; 0xffffffff
   1fa6e:	f1bc 0f00 	cmp.w	ip, #0
   1fa72:	bfa4      	itt	ge
   1fa74:	4602      	movge	r2, r0
   1fa76:	4663      	movge	r3, ip
   1fa78:	ea53 0102 	orrs.w	r1, r3, r2
   1fa7c:	d105      	bne.n	1fa8a <__ieee754_fmod+0x14e>
   1fa7e:	e01b      	b.n	1fab8 <__ieee754_fmod+0x17c>
   1fa80:	0fd1      	lsrs	r1, r2, #31
   1fa82:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   1fa86:	0052      	lsls	r2, r2, #1
   1fa88:	3e01      	subs	r6, #1
   1fa8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1fa8e:	dbf7      	blt.n	1fa80 <__ieee754_fmod+0x144>
   1fa90:	4946      	ldr	r1, [pc, #280]	; (1fbac <__ieee754_fmod+0x270>)
   1fa92:	428e      	cmp	r6, r1
   1fa94:	da61      	bge.n	1fb5a <__ieee754_fmod+0x21e>
   1fa96:	1b89      	subs	r1, r1, r6
   1fa98:	2914      	cmp	r1, #20
   1fa9a:	dc6f      	bgt.n	1fb7c <__ieee754_fmod+0x240>
   1fa9c:	f206 401e 	addw	r0, r6, #1054	; 0x41e
   1faa0:	40ca      	lsrs	r2, r1
   1faa2:	fa03 f000 	lsl.w	r0, r3, r0
   1faa6:	fa43 f101 	asr.w	r1, r3, r1
   1faaa:	4310      	orrs	r0, r2
   1faac:	430c      	orrs	r4, r1
   1faae:	4623      	mov	r3, r4
   1fab0:	4602      	mov	r2, r0
   1fab2:	ec43 2b10 	vmov	d0, r2, r3
   1fab6:	e788      	b.n	1f9ca <__ieee754_fmod+0x8e>
   1fab8:	4b3d      	ldr	r3, [pc, #244]	; (1fbb0 <__ieee754_fmod+0x274>)
   1faba:	0fe4      	lsrs	r4, r4, #31
   1fabc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   1fac0:	ed94 0b00 	vldr	d0, [r4]
   1fac4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1fac8:	1b80      	subs	r0, r0, r6
   1faca:	281f      	cmp	r0, #31
   1facc:	dd21      	ble.n	1fb12 <__ieee754_fmod+0x1d6>
   1face:	4839      	ldr	r0, [pc, #228]	; (1fbb4 <__ieee754_fmod+0x278>)
   1fad0:	1b89      	subs	r1, r1, r6
   1fad2:	eba0 0c06 	sub.w	ip, r0, r6
   1fad6:	fa07 fc0c 	lsl.w	ip, r7, ip
   1fada:	bf18      	it	ne
   1fadc:	2500      	movne	r5, #0
   1fade:	d1ad      	bne.n	1fa3c <__ieee754_fmod+0x100>
   1fae0:	eba3 0c0c 	sub.w	ip, r3, ip
   1fae4:	4610      	mov	r0, r2
   1fae6:	e7c2      	b.n	1fa6e <__ieee754_fmod+0x132>
   1fae8:	1a40      	subs	r0, r0, r1
   1faea:	281f      	cmp	r0, #31
   1faec:	dc0c      	bgt.n	1fb08 <__ieee754_fmod+0x1cc>
   1faee:	fa09 f900 	lsl.w	r9, r9, r0
   1faf2:	fa03 f200 	lsl.w	r2, r3, r0
   1faf6:	f201 401e 	addw	r0, r1, #1054	; 0x41e
   1fafa:	40c3      	lsrs	r3, r0
   1fafc:	ea43 0309 	orr.w	r3, r3, r9
   1fb00:	e786      	b.n	1fa10 <__ieee754_fmod+0xd4>
   1fb02:	ec41 0b10 	vmov	d0, r0, r1
   1fb06:	e760      	b.n	1f9ca <__ieee754_fmod+0x8e>
   1fb08:	4a2a      	ldr	r2, [pc, #168]	; (1fbb4 <__ieee754_fmod+0x278>)
   1fb0a:	1a52      	subs	r2, r2, r1
   1fb0c:	4093      	lsls	r3, r2
   1fb0e:	2200      	movs	r2, #0
   1fb10:	e77e      	b.n	1fa10 <__ieee754_fmod+0xd4>
   1fb12:	fa0e fe00 	lsl.w	lr, lr, r0
   1fb16:	fa07 f500 	lsl.w	r5, r7, r0
   1fb1a:	f206 401e 	addw	r0, r6, #1054	; 0x41e
   1fb1e:	fa27 f000 	lsr.w	r0, r7, r0
   1fb22:	ea40 0c0e 	orr.w	ip, r0, lr
   1fb26:	1b50      	subs	r0, r2, r5
   1fb28:	e77a      	b.n	1fa20 <__ieee754_fmod+0xe4>
   1fb2a:	ea4f 20ce 	mov.w	r0, lr, lsl #11
   1fb2e:	2800      	cmp	r0, #0
   1fb30:	4e1e      	ldr	r6, [pc, #120]	; (1fbac <__ieee754_fmod+0x270>)
   1fb32:	f77f af66 	ble.w	1fa02 <__ieee754_fmod+0xc6>
   1fb36:	0040      	lsls	r0, r0, #1
   1fb38:	2800      	cmp	r0, #0
   1fb3a:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   1fb3e:	dcfa      	bgt.n	1fb36 <__ieee754_fmod+0x1fa>
   1fb40:	e75f      	b.n	1fa02 <__ieee754_fmod+0xc6>
   1fb42:	ea4f 20c9 	mov.w	r0, r9, lsl #11
   1fb46:	2800      	cmp	r0, #0
   1fb48:	4918      	ldr	r1, [pc, #96]	; (1fbac <__ieee754_fmod+0x270>)
   1fb4a:	f77f af44 	ble.w	1f9d6 <__ieee754_fmod+0x9a>
   1fb4e:	0040      	lsls	r0, r0, #1
   1fb50:	2800      	cmp	r0, #0
   1fb52:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
   1fb56:	dcfa      	bgt.n	1fb4e <__ieee754_fmod+0x212>
   1fb58:	e73d      	b.n	1f9d6 <__ieee754_fmod+0x9a>
   1fb5a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   1fb5e:	431c      	orrs	r4, r3
   1fb60:	f206 36ff 	addw	r6, r6, #1023	; 0x3ff
   1fb64:	ea44 5106 	orr.w	r1, r4, r6, lsl #20
   1fb68:	4610      	mov	r0, r2
   1fb6a:	ec41 0b10 	vmov	d0, r0, r1
   1fb6e:	e72c      	b.n	1f9ca <__ieee754_fmod+0x8e>
   1fb70:	4b0f      	ldr	r3, [pc, #60]	; (1fbb0 <__ieee754_fmod+0x274>)
   1fb72:	eb03 7414 	add.w	r4, r3, r4, lsr #28
   1fb76:	ed94 0b00 	vldr	d0, [r4]
   1fb7a:	e726      	b.n	1f9ca <__ieee754_fmod+0x8e>
   1fb7c:	291f      	cmp	r1, #31
   1fb7e:	dc07      	bgt.n	1fb90 <__ieee754_fmod+0x254>
   1fb80:	f206 401e 	addw	r0, r6, #1054	; 0x41e
   1fb84:	fa22 f101 	lsr.w	r1, r2, r1
   1fb88:	4083      	lsls	r3, r0
   1fb8a:	ea43 0001 	orr.w	r0, r3, r1
   1fb8e:	e78e      	b.n	1faae <__ieee754_fmod+0x172>
   1fb90:	4908      	ldr	r1, [pc, #32]	; (1fbb4 <__ieee754_fmod+0x278>)
   1fb92:	1b89      	subs	r1, r1, r6
   1fb94:	fa43 f001 	asr.w	r0, r3, r1
   1fb98:	e789      	b.n	1faae <__ieee754_fmod+0x172>
   1fb9a:	4903      	ldr	r1, [pc, #12]	; (1fba8 <__ieee754_fmod+0x26c>)
   1fb9c:	e71b      	b.n	1f9d6 <__ieee754_fmod+0x9a>
   1fb9e:	bf00      	nop
   1fba0:	7fefffff 	.word	0x7fefffff
   1fba4:	7ff00000 	.word	0x7ff00000
   1fba8:	fffffbed 	.word	0xfffffbed
   1fbac:	fffffc02 	.word	0xfffffc02
   1fbb0:	000226c8 	.word	0x000226c8
   1fbb4:	fffffbe2 	.word	0xfffffbe2

0001fbb8 <__ieee754_sqrt>:
   1fbb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fbbc:	4a63      	ldr	r2, [pc, #396]	; (1fd4c <__ieee754_sqrt+0x194>)
   1fbbe:	ec55 4b10 	vmov	r4, r5, d0
   1fbc2:	43aa      	bics	r2, r5
   1fbc4:	f000 809f 	beq.w	1fd06 <__ieee754_sqrt+0x14e>
   1fbc8:	2d00      	cmp	r5, #0
   1fbca:	ee10 ca10 	vmov	ip, s0
   1fbce:	462b      	mov	r3, r5
   1fbd0:	dd54      	ble.n	1fc7c <__ieee754_sqrt+0xc4>
   1fbd2:	1529      	asrs	r1, r5, #20
   1fbd4:	d063      	beq.n	1fc9e <__ieee754_sqrt+0xe6>
   1fbd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1fbda:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   1fbde:	07c9      	lsls	r1, r1, #31
   1fbe0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1fbe4:	d404      	bmi.n	1fbf0 <__ieee754_sqrt+0x38>
   1fbe6:	005b      	lsls	r3, r3, #1
   1fbe8:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   1fbec:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   1fbf0:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   1fbf4:	2600      	movs	r6, #0
   1fbf6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   1fbfa:	107f      	asrs	r7, r7, #1
   1fbfc:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   1fc00:	f04f 0e16 	mov.w	lr, #22
   1fc04:	4634      	mov	r4, r6
   1fc06:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1fc0a:	18a1      	adds	r1, r4, r2
   1fc0c:	4299      	cmp	r1, r3
   1fc0e:	dc02      	bgt.n	1fc16 <__ieee754_sqrt+0x5e>
   1fc10:	1a5b      	subs	r3, r3, r1
   1fc12:	188c      	adds	r4, r1, r2
   1fc14:	4416      	add	r6, r2
   1fc16:	005b      	lsls	r3, r3, #1
   1fc18:	f1be 0e01 	subs.w	lr, lr, #1
   1fc1c:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   1fc20:	ea4f 0252 	mov.w	r2, r2, lsr #1
   1fc24:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   1fc28:	d1ef      	bne.n	1fc0a <__ieee754_sqrt+0x52>
   1fc2a:	4675      	mov	r5, lr
   1fc2c:	2020      	movs	r0, #32
   1fc2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1fc32:	e00a      	b.n	1fc4a <__ieee754_sqrt+0x92>
   1fc34:	d044      	beq.n	1fcc0 <__ieee754_sqrt+0x108>
   1fc36:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   1fc3a:	3801      	subs	r0, #1
   1fc3c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   1fc40:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   1fc44:	ea4f 0252 	mov.w	r2, r2, lsr #1
   1fc48:	d043      	beq.n	1fcd2 <__ieee754_sqrt+0x11a>
   1fc4a:	42a3      	cmp	r3, r4
   1fc4c:	eb02 010e 	add.w	r1, r2, lr
   1fc50:	ddf0      	ble.n	1fc34 <__ieee754_sqrt+0x7c>
   1fc52:	2900      	cmp	r1, #0
   1fc54:	eb01 0e02 	add.w	lr, r1, r2
   1fc58:	db0a      	blt.n	1fc70 <__ieee754_sqrt+0xb8>
   1fc5a:	46a0      	mov	r8, r4
   1fc5c:	1b1b      	subs	r3, r3, r4
   1fc5e:	4561      	cmp	r1, ip
   1fc60:	bf88      	it	hi
   1fc62:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   1fc66:	ebac 0c01 	sub.w	ip, ip, r1
   1fc6a:	4415      	add	r5, r2
   1fc6c:	4644      	mov	r4, r8
   1fc6e:	e7e2      	b.n	1fc36 <__ieee754_sqrt+0x7e>
   1fc70:	f1be 0f00 	cmp.w	lr, #0
   1fc74:	dbf1      	blt.n	1fc5a <__ieee754_sqrt+0xa2>
   1fc76:	f104 0801 	add.w	r8, r4, #1
   1fc7a:	e7ef      	b.n	1fc5c <__ieee754_sqrt+0xa4>
   1fc7c:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   1fc80:	4322      	orrs	r2, r4
   1fc82:	d038      	beq.n	1fcf6 <__ieee754_sqrt+0x13e>
   1fc84:	2d00      	cmp	r5, #0
   1fc86:	d14e      	bne.n	1fd26 <__ieee754_sqrt+0x16e>
   1fc88:	4629      	mov	r1, r5
   1fc8a:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   1fc8e:	3915      	subs	r1, #21
   1fc90:	4613      	mov	r3, r2
   1fc92:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   1fc96:	2a00      	cmp	r2, #0
   1fc98:	d0f7      	beq.n	1fc8a <__ieee754_sqrt+0xd2>
   1fc9a:	02d6      	lsls	r6, r2, #11
   1fc9c:	d450      	bmi.n	1fd40 <__ieee754_sqrt+0x188>
   1fc9e:	2000      	movs	r0, #0
   1fca0:	005b      	lsls	r3, r3, #1
   1fca2:	02dd      	lsls	r5, r3, #11
   1fca4:	4604      	mov	r4, r0
   1fca6:	f100 0001 	add.w	r0, r0, #1
   1fcaa:	d5f9      	bpl.n	1fca0 <__ieee754_sqrt+0xe8>
   1fcac:	461a      	mov	r2, r3
   1fcae:	4663      	mov	r3, ip
   1fcb0:	fa0c fc00 	lsl.w	ip, ip, r0
   1fcb4:	f1c0 0020 	rsb	r0, r0, #32
   1fcb8:	40c3      	lsrs	r3, r0
   1fcba:	1b09      	subs	r1, r1, r4
   1fcbc:	4313      	orrs	r3, r2
   1fcbe:	e78a      	b.n	1fbd6 <__ieee754_sqrt+0x1e>
   1fcc0:	4561      	cmp	r1, ip
   1fcc2:	d8b8      	bhi.n	1fc36 <__ieee754_sqrt+0x7e>
   1fcc4:	2900      	cmp	r1, #0
   1fcc6:	eb01 0e02 	add.w	lr, r1, r2
   1fcca:	dbd1      	blt.n	1fc70 <__ieee754_sqrt+0xb8>
   1fccc:	4698      	mov	r8, r3
   1fcce:	2300      	movs	r3, #0
   1fcd0:	e7c9      	b.n	1fc66 <__ieee754_sqrt+0xae>
   1fcd2:	ea53 030c 	orrs.w	r3, r3, ip
   1fcd6:	d110      	bne.n	1fcfa <__ieee754_sqrt+0x142>
   1fcd8:	0868      	lsrs	r0, r5, #1
   1fcda:	1071      	asrs	r1, r6, #1
   1fcdc:	07f3      	lsls	r3, r6, #31
   1fcde:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   1fce2:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   1fce6:	bf48      	it	mi
   1fce8:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   1fcec:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   1fcf0:	4602      	mov	r2, r0
   1fcf2:	ec43 2b10 	vmov	d0, r2, r3
   1fcf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1fcfa:	1c6a      	adds	r2, r5, #1
   1fcfc:	bf16      	itet	ne
   1fcfe:	1c68      	addne	r0, r5, #1
   1fd00:	3601      	addeq	r6, #1
   1fd02:	0840      	lsrne	r0, r0, #1
   1fd04:	e7e9      	b.n	1fcda <__ieee754_sqrt+0x122>
   1fd06:	ee10 2a10 	vmov	r2, s0
   1fd0a:	ee10 0a10 	vmov	r0, s0
   1fd0e:	462b      	mov	r3, r5
   1fd10:	4629      	mov	r1, r5
   1fd12:	f7fe fd51 	bl	1e7b8 <__aeabi_dmul>
   1fd16:	4622      	mov	r2, r4
   1fd18:	462b      	mov	r3, r5
   1fd1a:	f7fe fb97 	bl	1e44c <__adddf3>
   1fd1e:	ec41 0b10 	vmov	d0, r0, r1
   1fd22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1fd26:	ee10 2a10 	vmov	r2, s0
   1fd2a:	4620      	mov	r0, r4
   1fd2c:	4629      	mov	r1, r5
   1fd2e:	f7fe fb8b 	bl	1e448 <__aeabi_dsub>
   1fd32:	4602      	mov	r2, r0
   1fd34:	460b      	mov	r3, r1
   1fd36:	f7fe fe69 	bl	1ea0c <__aeabi_ddiv>
   1fd3a:	ec41 0b10 	vmov	d0, r0, r1
   1fd3e:	e7da      	b.n	1fcf6 <__ieee754_sqrt+0x13e>
   1fd40:	4663      	mov	r3, ip
   1fd42:	2020      	movs	r0, #32
   1fd44:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1fd48:	e7b6      	b.n	1fcb8 <__ieee754_sqrt+0x100>
   1fd4a:	bf00      	nop
   1fd4c:	7ff00000 	.word	0x7ff00000

0001fd50 <__ieee754_log10f>:
   1fd50:	b508      	push	{r3, lr}
   1fd52:	ee10 3a10 	vmov	r3, s0
   1fd56:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   1fd5a:	ed2d 8b02 	vpush	{d8}
   1fd5e:	d02b      	beq.n	1fdb8 <__ieee754_log10f+0x68>
   1fd60:	2b00      	cmp	r3, #0
   1fd62:	db32      	blt.n	1fdca <__ieee754_log10f+0x7a>
   1fd64:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   1fd68:	da41      	bge.n	1fdee <__ieee754_log10f+0x9e>
   1fd6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   1fd6e:	db35      	blt.n	1fddc <__ieee754_log10f+0x8c>
   1fd70:	2100      	movs	r1, #0
   1fd72:	15da      	asrs	r2, r3, #23
   1fd74:	3a7f      	subs	r2, #127	; 0x7f
   1fd76:	440a      	add	r2, r1
   1fd78:	0fd1      	lsrs	r1, r2, #31
   1fd7a:	f1c1 017f 	rsb	r1, r1, #127	; 0x7f
   1fd7e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   1fd82:	f3c3 0316 	ubfx	r3, r3, #0, #23
   1fd86:	ee07 2a90 	vmov	s15, r2
   1fd8a:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
   1fd8e:	ee00 3a10 	vmov	s0, r3
   1fd92:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
   1fd96:	f000 f849 	bl	1fe2c <__ieee754_logf>
   1fd9a:	eddf 7a17 	vldr	s15, [pc, #92]	; 1fdf8 <__ieee754_log10f+0xa8>
   1fd9e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 1fdfc <__ieee754_log10f+0xac>
   1fda2:	ee20 0a27 	vmul.f32	s0, s0, s15
   1fda6:	eddf 7a16 	vldr	s15, [pc, #88]	; 1fe00 <__ieee754_log10f+0xb0>
   1fdaa:	eea8 0a07 	vfma.f32	s0, s16, s14
   1fdae:	eea8 0a27 	vfma.f32	s0, s16, s15
   1fdb2:	ecbd 8b02 	vpop	{d8}
   1fdb6:	bd08      	pop	{r3, pc}
   1fdb8:	ecbd 8b02 	vpop	{d8}
   1fdbc:	ed9f 7a11 	vldr	s14, [pc, #68]	; 1fe04 <__ieee754_log10f+0xb4>
   1fdc0:	eddf 7a11 	vldr	s15, [pc, #68]	; 1fe08 <__ieee754_log10f+0xb8>
   1fdc4:	ee87 0a27 	vdiv.f32	s0, s14, s15
   1fdc8:	bd08      	pop	{r3, pc}
   1fdca:	ecbd 8b02 	vpop	{d8}
   1fdce:	ee70 7a40 	vsub.f32	s15, s0, s0
   1fdd2:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 1fe08 <__ieee754_log10f+0xb8>
   1fdd6:	ee87 0a87 	vdiv.f32	s0, s15, s14
   1fdda:	bd08      	pop	{r3, pc}
   1fddc:	eddf 7a0b 	vldr	s15, [pc, #44]	; 1fe0c <__ieee754_log10f+0xbc>
   1fde0:	ee60 7a27 	vmul.f32	s15, s0, s15
   1fde4:	f06f 0118 	mvn.w	r1, #24
   1fde8:	ee17 3a90 	vmov	r3, s15
   1fdec:	e7c1      	b.n	1fd72 <__ieee754_log10f+0x22>
   1fdee:	ecbd 8b02 	vpop	{d8}
   1fdf2:	ee30 0a00 	vadd.f32	s0, s0, s0
   1fdf6:	bd08      	pop	{r3, pc}
   1fdf8:	3ede5bd9 	.word	0x3ede5bd9
   1fdfc:	355427db 	.word	0x355427db
   1fe00:	3e9a2080 	.word	0x3e9a2080
   1fe04:	cc000000 	.word	0xcc000000
   1fe08:	00000000 	.word	0x00000000
   1fe0c:	4c000000 	.word	0x4c000000

0001fe10 <nan>:
   1fe10:	ed9f 0b01 	vldr	d0, [pc, #4]	; 1fe18 <nan+0x8>
   1fe14:	4770      	bx	lr
   1fe16:	bf00      	nop
   1fe18:	00000000 	.word	0x00000000
   1fe1c:	7ff80000 	.word	0x7ff80000

0001fe20 <nanf>:
   1fe20:	ed9f 0a01 	vldr	s0, [pc, #4]	; 1fe28 <nanf+0x8>
   1fe24:	4770      	bx	lr
   1fe26:	bf00      	nop
   1fe28:	7fc00000 	.word	0x7fc00000

0001fe2c <__ieee754_logf>:
   1fe2c:	ee10 3a10 	vmov	r3, s0
   1fe30:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   1fe34:	d02e      	beq.n	1fe94 <__ieee754_logf+0x68>
   1fe36:	2b00      	cmp	r3, #0
   1fe38:	db33      	blt.n	1fea2 <__ieee754_logf+0x76>
   1fe3a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   1fe3e:	da40      	bge.n	1fec2 <__ieee754_logf+0x96>
   1fe40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   1fe44:	db34      	blt.n	1feb0 <__ieee754_logf+0x84>
   1fe46:	f04f 0c00 	mov.w	ip, #0
   1fe4a:	4868      	ldr	r0, [pc, #416]	; (1ffec <__ieee754_logf+0x1c0>)
   1fe4c:	f3c3 0116 	ubfx	r1, r3, #0, #23
   1fe50:	4408      	add	r0, r1
   1fe52:	f400 0200 	and.w	r2, r0, #8388608	; 0x800000
   1fe56:	f082 527e 	eor.w	r2, r2, #1065353216	; 0x3f800000
   1fe5a:	430a      	orrs	r2, r1
   1fe5c:	15db      	asrs	r3, r3, #23
   1fe5e:	ee00 2a10 	vmov	s0, r2
   1fe62:	3b7f      	subs	r3, #127	; 0x7f
   1fe64:	4a62      	ldr	r2, [pc, #392]	; (1fff0 <__ieee754_logf+0x1c4>)
   1fe66:	4463      	add	r3, ip
   1fe68:	f101 0c0f 	add.w	ip, r1, #15
   1fe6c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1fe70:	ea0c 0202 	and.w	r2, ip, r2
   1fe74:	ee30 0a67 	vsub.f32	s0, s0, s15
   1fe78:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
   1fe7c:	bb22      	cbnz	r2, 1fec8 <__ieee754_logf+0x9c>
   1fe7e:	eeb5 0a40 	vcmp.f32	s0, #0.0
   1fe82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1fe86:	d160      	bne.n	1ff4a <__ieee754_logf+0x11e>
   1fe88:	2b00      	cmp	r3, #0
   1fe8a:	f040 8092 	bne.w	1ffb2 <__ieee754_logf+0x186>
   1fe8e:	ed9f 0a59 	vldr	s0, [pc, #356]	; 1fff4 <__ieee754_logf+0x1c8>
   1fe92:	4770      	bx	lr
   1fe94:	ed9f 7a58 	vldr	s14, [pc, #352]	; 1fff8 <__ieee754_logf+0x1cc>
   1fe98:	eddf 7a56 	vldr	s15, [pc, #344]	; 1fff4 <__ieee754_logf+0x1c8>
   1fe9c:	ee87 0a27 	vdiv.f32	s0, s14, s15
   1fea0:	4770      	bx	lr
   1fea2:	ee70 7a40 	vsub.f32	s15, s0, s0
   1fea6:	ed9f 7a53 	vldr	s14, [pc, #332]	; 1fff4 <__ieee754_logf+0x1c8>
   1feaa:	ee87 0a87 	vdiv.f32	s0, s15, s14
   1feae:	4770      	bx	lr
   1feb0:	eddf 7a52 	vldr	s15, [pc, #328]	; 1fffc <__ieee754_logf+0x1d0>
   1feb4:	ee60 7a27 	vmul.f32	s15, s0, s15
   1feb8:	f06f 0c18 	mvn.w	ip, #24
   1febc:	ee17 3a90 	vmov	r3, s15
   1fec0:	e7c3      	b.n	1fe4a <__ieee754_logf+0x1e>
   1fec2:	ee30 0a00 	vadd.f32	s0, s0, s0
   1fec6:	4770      	bx	lr
   1fec8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   1fecc:	ee70 7a27 	vadd.f32	s15, s0, s15
   1fed0:	ee07 3a10 	vmov	s14, r3
   1fed4:	ee80 4a27 	vdiv.f32	s8, s0, s15
   1fed8:	4849      	ldr	r0, [pc, #292]	; (20000 <__ieee754_logf+0x1d4>)
   1feda:	f5c1 1257 	rsb	r2, r1, #3522560	; 0x35c000
   1fede:	4408      	add	r0, r1
   1fee0:	f502 7222 	add.w	r2, r2, #648	; 0x288
   1fee4:	4302      	orrs	r2, r0
   1fee6:	2a00      	cmp	r2, #0
   1fee8:	ed9f 3a46 	vldr	s6, [pc, #280]	; 20004 <__ieee754_logf+0x1d8>
   1feec:	eddf 4a46 	vldr	s9, [pc, #280]	; 20008 <__ieee754_logf+0x1dc>
   1fef0:	eddf 5a46 	vldr	s11, [pc, #280]	; 2000c <__ieee754_logf+0x1e0>
   1fef4:	eddf 3a46 	vldr	s7, [pc, #280]	; 20010 <__ieee754_logf+0x1e4>
   1fef8:	ed9f 5a46 	vldr	s10, [pc, #280]	; 20014 <__ieee754_logf+0x1e8>
   1fefc:	eddf 7a46 	vldr	s15, [pc, #280]	; 20018 <__ieee754_logf+0x1ec>
   1ff00:	eddf 6a46 	vldr	s13, [pc, #280]	; 2001c <__ieee754_logf+0x1f0>
   1ff04:	ee24 6a04 	vmul.f32	s12, s8, s8
   1ff08:	eef8 2ac7 	vcvt.f32.s32	s5, s14
   1ff0c:	ee26 7a06 	vmul.f32	s14, s12, s12
   1ff10:	eee7 4a03 	vfma.f32	s9, s14, s6
   1ff14:	eea7 5a23 	vfma.f32	s10, s14, s7
   1ff18:	eee4 5a87 	vfma.f32	s11, s9, s14
   1ff1c:	eee5 6a07 	vfma.f32	s13, s10, s14
   1ff20:	eee5 7a87 	vfma.f32	s15, s11, s14
   1ff24:	ee67 7a86 	vmul.f32	s15, s15, s12
   1ff28:	eee6 7a87 	vfma.f32	s15, s13, s14
   1ff2c:	dd2a      	ble.n	1ff84 <__ieee754_logf+0x158>
   1ff2e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   1ff32:	ee20 7a07 	vmul.f32	s14, s0, s14
   1ff36:	ee27 7a00 	vmul.f32	s14, s14, s0
   1ff3a:	bb4b      	cbnz	r3, 1ff90 <__ieee754_logf+0x164>
   1ff3c:	ee77 7a87 	vadd.f32	s15, s15, s14
   1ff40:	eea7 7ac4 	vfms.f32	s14, s15, s8
   1ff44:	ee30 0a47 	vsub.f32	s0, s0, s14
   1ff48:	4770      	bx	lr
   1ff4a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   1ff4e:	eddf 6a34 	vldr	s13, [pc, #208]	; 20020 <__ieee754_logf+0x1f4>
   1ff52:	eef0 7a47 	vmov.f32	s15, s14
   1ff56:	eee0 7a66 	vfms.f32	s15, s0, s13
   1ff5a:	ee20 7a00 	vmul.f32	s14, s0, s0
   1ff5e:	ee27 7a27 	vmul.f32	s14, s14, s15
   1ff62:	2b00      	cmp	r3, #0
   1ff64:	d0ee      	beq.n	1ff44 <__ieee754_logf+0x118>
   1ff66:	ee07 3a90 	vmov	s15, r3
   1ff6a:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 20024 <__ieee754_logf+0x1f8>
   1ff6e:	eddf 6a2e 	vldr	s13, [pc, #184]	; 20028 <__ieee754_logf+0x1fc>
   1ff72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1ff76:	eea7 7ac6 	vfms.f32	s14, s15, s12
   1ff7a:	ee37 0a40 	vsub.f32	s0, s14, s0
   1ff7e:	ee97 0aa6 	vfnms.f32	s0, s15, s13
   1ff82:	4770      	bx	lr
   1ff84:	bb13      	cbnz	r3, 1ffcc <__ieee754_logf+0x1a0>
   1ff86:	ee70 7a67 	vsub.f32	s15, s0, s15
   1ff8a:	eea7 0ac4 	vfms.f32	s0, s15, s8
   1ff8e:	4770      	bx	lr
   1ff90:	eddf 6a24 	vldr	s13, [pc, #144]	; 20024 <__ieee754_logf+0x1f8>
   1ff94:	ed9f 6a24 	vldr	s12, [pc, #144]	; 20028 <__ieee754_logf+0x1fc>
   1ff98:	ee77 7a87 	vadd.f32	s15, s15, s14
   1ff9c:	ee62 6aa6 	vmul.f32	s13, s5, s13
   1ffa0:	eee7 6a84 	vfma.f32	s13, s15, s8
   1ffa4:	ee37 7a66 	vsub.f32	s14, s14, s13
   1ffa8:	ee37 0a40 	vsub.f32	s0, s14, s0
   1ffac:	ee92 0a86 	vfnms.f32	s0, s5, s12
   1ffb0:	4770      	bx	lr
   1ffb2:	ee07 3a90 	vmov	s15, r3
   1ffb6:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 20024 <__ieee754_logf+0x1f8>
   1ffba:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 20028 <__ieee754_logf+0x1fc>
   1ffbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1ffc2:	ee27 0a80 	vmul.f32	s0, s15, s0
   1ffc6:	eea7 0a87 	vfma.f32	s0, s15, s14
   1ffca:	4770      	bx	lr
   1ffcc:	ed9f 7a15 	vldr	s14, [pc, #84]	; 20024 <__ieee754_logf+0x1f8>
   1ffd0:	eddf 6a15 	vldr	s13, [pc, #84]	; 20028 <__ieee754_logf+0x1fc>
   1ffd4:	ee70 7a67 	vsub.f32	s15, s0, s15
   1ffd8:	ee27 7a62 	vnmul.f32	s14, s14, s5
   1ffdc:	eea7 7a84 	vfma.f32	s14, s15, s8
   1ffe0:	ee37 0a40 	vsub.f32	s0, s14, s0
   1ffe4:	ee92 0aa6 	vfnms.f32	s0, s5, s13
   1ffe8:	4770      	bx	lr
   1ffea:	bf00      	nop
   1ffec:	004afb20 	.word	0x004afb20
   1fff0:	007ffff0 	.word	0x007ffff0
   1fff4:	00000000 	.word	0x00000000
   1fff8:	cc000000 	.word	0xcc000000
   1fffc:	4c000000 	.word	0x4c000000
   20000:	ffcf5c30 	.word	0xffcf5c30
   20004:	3e178897 	.word	0x3e178897
   20008:	3e3a3325 	.word	0x3e3a3325
   2000c:	3e924925 	.word	0x3e924925
   20010:	3e1cd04f 	.word	0x3e1cd04f
   20014:	3e638e29 	.word	0x3e638e29
   20018:	3f2aaaab 	.word	0x3f2aaaab
   2001c:	3ecccccd 	.word	0x3ecccccd
   20020:	3eaaaaab 	.word	0x3eaaaaab
   20024:	3717f7d1 	.word	0x3717f7d1
   20028:	3f317180 	.word	0x3f317180

0002002c <__errno>:
   2002c:	4b01      	ldr	r3, [pc, #4]	; (20034 <__errno+0x8>)
   2002e:	6818      	ldr	r0, [r3, #0]
   20030:	4770      	bx	lr
   20032:	bf00      	nop
   20034:	20001700 	.word	0x20001700
   20038:	7475227b 	.word	0x7475227b
   2003c:	22656d69 	.word	0x22656d69
   20040:	6c25203a 	.word	0x6c25203a
   20044:	65222c75 	.word	0x65222c75
   20048:	726f7272 	.word	0x726f7272
   2004c:	22203a22 	.word	0x22203a22
   20050:	63726320 	.word	0x63726320
   20054:	73696d20 	.word	0x73696d20
   20058:	6374616d 	.word	0x6374616d
   2005c:	656c2068 	.word	0x656c2068
   20060:	64253d6e 	.word	0x64253d6e
   20064:	6973202c 	.word	0x6973202c
   20068:	666f657a 	.word	0x666f657a
   2006c:	73657428 	.word	0x73657428
   20070:	3d202974 	.word	0x3d202974
   20074:	22642520 	.word	0x22642520
   20078:	7b000a7d 	.word	0x7b000a7d
   2007c:	69747522 	.word	0x69747522
   20080:	3a22656d 	.word	0x3a22656d
   20084:	756c2520 	.word	0x756c2520
   20088:	6d202c20 	.word	0x6d202c20
   2008c:	61737365 	.word	0x61737365
   20090:	253a6567 	.word	0x253a6567
   20094:	0a7d2273 	.word	0x0a7d2273
   20098:	54227b00 	.word	0x54227b00
   2009c:	20736968 	.word	0x20736968
   200a0:	414d4454 	.word	0x414d4454
   200a4:	6f6c7320 	.word	0x6f6c7320
   200a8:	5f282074 	.word	0x5f282074
   200ac:	3036312f 	.word	0x3036312f
   200b0:	203a2229 	.word	0x203a2229
   200b4:	7d756c25 	.word	0x7d756c25
   200b8:	000a      	.short	0x000a
   200ba:	7061      	.short	0x7061
   200bc:	752f7370 	.word	0x752f7370
   200c0:	6172746c 	.word	0x6172746c
   200c4:	65646977 	.word	0x65646977
   200c8:	66667562 	.word	0x66667562
   200cc:	61645f73 	.word	0x61645f73
   200d0:	72746174 	.word	0x72746174
   200d4:	66736e61 	.word	0x66736e61
   200d8:	732f7265 	.word	0x732f7265
   200dc:	6d2f6372 	.word	0x6d2f6372
   200e0:	2e6e6961 	.word	0x2e6e6961
   200e4:	227b0063 	.word	0x227b0063
   200e8:	6d697475 	.word	0x6d697475
   200ec:	203a2265 	.word	0x203a2265
   200f0:	2c756c25 	.word	0x2c756c25
   200f4:	65786522 	.word	0x65786522
   200f8:	203a2263 	.word	0x203a2263
   200fc:	22732522 	.word	0x22732522
   20100:	7b000a7d 	.word	0x7b000a7d
   20104:	76656422 	.word	0x76656422
   20108:	5f656369 	.word	0x5f656369
   2010c:	3d226469 	.word	0x3d226469
   20110:	586c2522 	.word	0x586c2522
   20114:	222c0022 	.word	0x222c0022
   20118:	696e6170 	.word	0x696e6170
   2011c:	25223d64 	.word	0x25223d64
   20120:	2c002258 	.word	0x2c002258
   20124:	64646122 	.word	0x64646122
   20128:	223d2272 	.word	0x223d2272
   2012c:	00225825 	.word	0x00225825
   20130:	6170222c 	.word	0x6170222c
   20134:	695f7472 	.word	0x695f7472
   20138:	223d2264 	.word	0x223d2264
   2013c:	22586c25 	.word	0x22586c25
   20140:	6c222c00 	.word	0x6c222c00
   20144:	695f746f 	.word	0x695f746f
   20148:	223d2264 	.word	0x223d2264
   2014c:	22586c25 	.word	0x22586c25
   20150:	7b000a7d 	.word	0x7b000a7d
   20154:	69747522 	.word	0x69747522
   20158:	3a22656d 	.word	0x3a22656d
   2015c:	756c2520 	.word	0x756c2520
   20160:	736d222c 	.word	0x736d222c
   20164:	203a2267 	.word	0x203a2267
   20168:	61726622 	.word	0x61726622
   2016c:	645f656d 	.word	0x645f656d
   20170:	74617275 	.word	0x74617275
   20174:	206e6f69 	.word	0x206e6f69
   20178:	6425203d 	.word	0x6425203d
   2017c:	65737520 	.word	0x65737520
   20180:	0a7d2263 	.word	0x0a7d2263
   20184:	75227b00 	.word	0x75227b00
   20188:	656d6974 	.word	0x656d6974
   2018c:	25203a22 	.word	0x25203a22
   20190:	222c756c 	.word	0x222c756c
   20194:	2267736d 	.word	0x2267736d
   20198:	5322203a 	.word	0x5322203a
   2019c:	645f5248 	.word	0x645f5248
   201a0:	74617275 	.word	0x74617275
   201a4:	206e6f69 	.word	0x206e6f69
   201a8:	6425203d 	.word	0x6425203d
   201ac:	65737520 	.word	0x65737520
   201b0:	0a7d2263 	.word	0x0a7d2263
   201b4:	42575500 	.word	0x42575500
   201b8:	4152545f 	.word	0x4152545f
   201bc:	4f50534e 	.word	0x4f50534e
   201c0:	525f5452 	.word	0x525f5452
   201c4:	20454c4f 	.word	0x20454c4f
   201c8:	6425203d 	.word	0x6425203d
   201cc:	5755000a 	.word	0x5755000a
   201d0:	65542042 	.word	0x65542042
   201d4:	7473      	.short	0x7473
   201d6:	00          	.byte	0x00
   201d7:	64          	.byte	0x64
   201d8:	30303177 	.word	0x30303177
   201dc:	64255f30 	.word	0x64255f30
   201e0:	33776400 	.word	0x33776400
   201e4:	5f303030 	.word	0x5f303030
   201e8:	6425      	.short	0x6425
   201ea:	00          	.byte	0x00
   201eb:	75          	.byte	0x75
   201ec:	695f6277 	.word	0x695f6277
   201f0:	7172      	.short	0x7172
   201f2:	00          	.byte	0x00
   201f3:	25          	.byte	0x25
   201f4:	6f6e2073 	.word	0x6f6e2073
   201f8:	6d692074 	.word	0x6d692074
   201fc:	6d656c70 	.word	0x6d656c70
   20200:	65746e65 	.word	0x65746e65
   20204:	0a64      	.short	0x0a64
   20206:	00          	.byte	0x00
   20207:	7b          	.byte	0x7b
   20208:	69747522 	.word	0x69747522
   2020c:	3a22656d 	.word	0x3a22656d
   20210:	756c2520 	.word	0x756c2520
   20214:	736d222c 	.word	0x736d222c
   20218:	203a2267 	.word	0x203a2267
   2021c:	31776422 	.word	0x31776422
   20220:	5f303030 	.word	0x5f303030
   20224:	5f766564 	.word	0x5f766564
   20228:	74696e69 	.word	0x74696e69
   2022c:	000a7d22 	.word	0x000a7d22

00020230 <__func__.0>:
   20230:	5f627775 30317764 635f3030 5f636c61     uwb_dw1000_calc_
   20240:	616f6470 00000000                       pdoa....

00020248 <dw1000_uwb_funcs>:
   20248:	000093c1 000093bd 000093b9 00009809     ................
   20258:	00009885 00009b39 00009b81 00009af1     ....9...........
   20268:	000093b5 000093af 000093a9 000093a5     ................
   20278:	000093a1 0000939d 00009399 00009395     ................
   20288:	00009391 0000938d 00009389 000092ad     ................
   20298:	00009385 00009381 0000937d 00009379     ........}...y...
   202a8:	00009375 00009371 0000936d 00009369     u...q...m...i...
   202b8:	000092a3 00009365 00009361 00009359     ....e...a...Y...
   202c8:	00009351 00009349 00009345 00009341     Q...I...E...A...
   202d8:	0000933d 00009339 000096af 00009697     =...9...........
   202e8:	0000967f 000093c9 00009335 00009331     ........5...1...
   202f8:	0000932d 00009329 00009325 00009321     -...)...%...!...
   20308:	00009301 00000000 000092b1 000092ef     ................
   20318:	000092f3 000092f7 000092fb 0063616d     ............mac.
   20328:	625f7874 73657479 5f787200 65747962     tx_bytes.rx_byte
   20338:	46440073 6e635f52 54520074 6e635f4f     s.DFR_cnt.RTO_cn
   20348:	4f520074 72655f56 46540072 6e635f47     t.ROV_err.TFG_cn
   20358:	444c0074 72655f45 58520072 7272655f     t.LDE_err.RX_err
   20368:	42585400 655f4655 50007272 4c5f4c4c     .TXBUF_err.PLL_L
   20378:	72655f4c 00000072                       L_err...

00020380 <agc_config>:
   20380:	2502a907 889b8870                       ...%p...

00020388 <chan_idx>:
   20388:	02010000 05000403                       ........

00020390 <digital_bb_config>:
   20390:	311a002d 331a0052 351a009a 371a011d     -..1R..3...5...7
   203a0:	313b006b 333b00be 353b015e 373b0296     k.;1..;3^.;5..;7

000203b0 <dtune1>:
   203b0:	008d0087                                ....

000203b4 <dwnsSFDlen>:
   203b4:	00081040                                @...

000203b8 <fs_pll_cfg>:
   203b8:	09000407 08400508 08401009 08400508     ......@...@...@.
   203c8:	0800041d 0800041d                       ........

000203d0 <fs_pll_tune>:
   203d0:	2656261e                                 .&V&..

000203d6 <g_stats_map_mac_stat_section>:
   203d6:	03280014 00180002 00020331 033a001c     ..(.....1.....:.
   203e6:	00200002 00020342 034a0024 00280002     .. .B...$.J...(.
   203f6:	00020352 035a002c 00300002 00020362     R...,.Z...0.b...
   20406:	03690034 00380002 00020373              4.i...8.s...

00020412 <lde_replicaCoeff>:
   20412:	59980000 51ea5998 451e428e 80002e14     ...Y.Y.Q.B.E....
   20422:	28f451ea 3ae03332 3ae03d70 2b8435c2     .Q.(23.:p=.:.5.+
   20432:	333235c2 35c235c2 3ae047ae 30a23850     .523.5.5.G.:P8.0
   20442:	                                         P8

00020444 <rx_config>:
   20444:	                                         ..

00020446 <sftsh>:
   20446:	0016000a 00060001 00020001               ..............

00020454 <tx_config>:
   20454:	00005c40 00045ca0 00086cc0 00045c80     @\...\...l...\..
   20464:	001e3fe0 001e7de0 43534d50 5b44495f     .?...}..PMSC_ID[
   20474:	203a5d30 0a786c25 534d5000 44495f43     0]: %lx..PMSC_ID
   20484:	3a5d315b 786c2520 0000000a              [1]: %lx....

00020490 <nrf52_hal_spis>:
   20490:	20001bc0 00000000 00000000 00000000     ... ............
   204a0:	65737341 40207472 25783020 41000a78     Assert @ 0x%x..A
   204b0:	72657373 20402074 78257830 25202d20     ssert @ 0x%x - %
   204c0:	64253a73 6e55000a 646e6168 2064656c     s:%d..Unhandled 
   204d0:	65746e69 70757272 25282074 2c29646c     interrupt (%ld),
   204e0:	63786520 69747065 73206e6f 78302070      exception sp 0x
   204f0:	6c383025 20000a78 303a3072 38302578     %08lx.. r0:0x%08
   20500:	2020786c 303a3172 38302578 2020786c     lx  r1:0x%08lx  
   20510:	303a3272 38302578 2020786c 303a3372     r2:0x%08lx  r3:0
   20520:	38302578 000a786c 3a347220 30257830     x%08lx.. r4:0x%0
   20530:	20786c38 3a357220 30257830 20786c38     8lx  r5:0x%08lx 
   20540:	3a367220 30257830 20786c38 3a377220      r6:0x%08lx  r7:
   20550:	30257830 0a786c38 38722000 2578303a     0x%08lx.. r8:0x%
   20560:	786c3830 39722020 2578303a 786c3830     08lx  r9:0x%08lx
   20570:	30317220 2578303a 786c3830 31317220      r10:0x%08lx r11
   20580:	2578303a 786c3830 3172000a 78303a32     :0x%08lx..r12:0x
   20590:	6c383025 6c202078 78303a72 6c383025     %08lx  lr:0x%08l
   205a0:	70202078 78303a63 6c383025 73702078     x  pc:0x%08lx ps
   205b0:	78303a72 6c383025 49000a78 3a525343     r:0x%08lx..ICSR:
   205c0:	30257830 20786c38 52534648 2578303a     0x%08lx HFSR:0x%
   205d0:	786c3830 53464320 78303a52 6c383025     08lx CFSR:0x%08l
   205e0:	42000a78 3a524146 30257830 20786c38     x..BFAR:0x%08lx 
   205f0:	41464d4d 78303a52 6c383025 69000a78     MMFAR:0x%08lx..i
   20600:	00656c64 6e69616d 79736d00 00315f73     dle.main.msys_1.
   20610:	616d6474 75227b00 656d6974 25203a22     tdma.{"utime": %
   20620:	222c756c 2267736d 7422203a 5f616d64     lu,"msg": "tdma_
   20630:	5f676b70 74696e69 000a7d22 7475227b     pkg_init"}..{"ut
   20640:	22656d69 6c25203a 6d222c75 3a226773     ime": %lu,"msg":
   20650:	64742220 705f616d 645f676b 226e776f      "tdma_pkg_down"
   20660:	73000a7d 5f746f6c 656d6974 6e635f72     }..slot_timer_cn
   20670:	75730074 66726570 656d6172 746e635f     t.superframe_cnt
   20680:	70757300 72667265 5f656d61 7373696d     .superframe_miss
   20690:	6f726400 64657070 6f6c735f               .dropped_slots.

0002069f <g_stats_map_tdma_stat_section>:
   2069f:	06630014 00180002 00020672 0681001c     ..c.....r.......
   206af:	00200002 00020691 00706363 7475227b     .. .....ccp.{"ut
   206bf:	22656d69 6c25203a 6d222c75 3a226773     ime": %lu,"msg":
   206cf:	77752220 63635f62 6b705f70 6e695f67      "uwb_ccp_pkg_in
   206df:	7d227469 616d000a 72657473 746e635f     it"}..master_cnt
   206ef:	616c7300 635f6576 7300746e 00646e65     .slave_cnt.send.
   206ff:	635f7874 6c706d6f 00657465 635f7872     tx_complete.rx_c
   2070f:	6c706d6f 00657465 725f7872 79616c65     omplete.rx_relay
   2071f:	72006465 74735f78 5f747261 6f727265     ed.rx_start_erro
   2072f:	78720072 736e755f 63696c6f 64657469     r.rx_unsolicited
   2073f:	5f787200 6568746f 72665f72 00656d61     .rx_other_frame.
   2074f:	78727874 7272655f 7400726f 74735f78     txrx_error.tx_st
   2075f:	5f747261 6f727265 78740072 6c65725f     art_error.tx_rel
   2076f:	655f7961 726f7272 5f787400 616c6572     ay_error.tx_rela
   2077f:	6b6f5f79 71726900 74616c5f 79636e65     y_ok.irq_latency
   2078f:	5f736f00 5f74616c 69686562 6f00646e     .os_lat_behind.o
   2079f:	616c5f73 616d5f74 6e696772 5f787200     s_lat_margin.rx_
   207af:	656d6974 0074756f 5f6d6573 656d6974     timeout.sem_time
   207bf:	0074756f                                out.

000207c3 <g_stats_map_uwb_ccp_stat_section>:
   207c3:	06e50014 00180002 000206f0 06fa001c     ................
   207d3:	00200002 00021dfd 06ff0024 00280002     .. .....$.....(.
   207e3:	0002070b 0717002c 00300002 00020722     ....,.....0."...
   207f3:	07310034 00380002 00020740 074f003c     4.1...8.@...<.O.
   20803:	00400002 0002075a 07690044 00480002     ..@.Z...D.i...H.
   20813:	00020778 0784004c 00500002 00020790     x...L.....P.....
   20823:	079e0054 00580002 000207ac 07b7005c     T.....X.....\...
   20833:	00600002 000220b8 5f627775 6e617274     ..`.. ..uwb_tran
   20843:	726f7073 626d5f74 705f6675 006c6f6f     sport_mbuf_pool.
   20853:	74627775 00642570 5f627775 6e617274     uwbtp%d.uwb_tran
   20863:	726f7073 45203a74 524f5252 20642520     sport: ERROR %d 
   20873:	544d203e 7a252055 72640064 6570706f     > MTU %zd.droppe
   20883:	3a6e2064 72206425 0a64253a 62777500     d n:%d r:%d..uwb
   20893:	6172745f 6f70736e 203a7472 4f525245     _transport: ERRO
   208a3:	7a252052 203e2064 2055544d 00647a25     R %zd > MTU %zd.
   208b3:	6f706572 65642f73 61776163 752d6576     repos/decawave-u
   208c3:	632d6277 2f65726f 2f62696c 5f627775     wb-core/lib/uwb_
   208d3:	6e617274 726f7073 72732f74 77752f63     transport/src/uw
   208e3:	72745f62 70736e61 2e74726f 227b0063     b_transport.c.{"
   208f3:	6d697475 203a2265 2c756c25 72726522     utime": %lu,"err
   20903:	3a22726f 70642220 626d5f6c 655f6675     or": "dpl_mbuf_e
   20913:	6e657478 73252064 2264253a 000a7d22     xtend %s:%d""}..
   20923:	7475227b 22656d69 6c25203a 65222c75     {"utime": %lu,"e
   20933:	726f7272 22203a22 5f6c7064 6575716d     rror": "dpl_mque
   20943:	705f6575 25207475 64253a73 0a7d2222     ue_put %s:%d""}.
   20953:	75227b00 656d6974 25203a22 222c756c     .{"utime": %lu,"
   20963:	2267736d 7522203a 745f6277 736e6172     msg": "uwb_trans
   20973:	74726f70 676b705f 696e695f 0a7d2274     port_pkg_init"}.
   20983:	75227b00 656d6974 25203a22 222c756c     .{"utime": %lu,"
   20993:	2267736d 7522203a 775f6277 705f7363     msg": "uwb_wcs_p
   209a3:	695f676b 2274696e 00000a7d               kg_init"}....

000209b0 <MemFile_methods>:
   209b0:	000108b7 00000000                       ........

000209b8 <stdout>:
   209b8:	200013b4 6c25002f 6c250064 3c00646c     ... /.%ld.%lld.<
   209c8:	3e6c6564 20732500 7325203d 6146000a     del>.%s = %s..Fa
   209d8:	64656c69 206f7420 6d6d6f63 000a7469     iled to commit..
   209e8:	656e6f44 6f63000a 74696d6d 6d756400     Done..commit.dum
   209f8:	75720070 6e696e6e 61730067 43006576     p.running.save.C
   20a08:	6f6e6e61 69642074 616c7073 61762079     annot display va
   20a18:	0a65756c 69614600 2064656c 73206f74     lue..Failed to s
   20a28:	202c7465 3a727265 0a642520 766e4900     et, err: %d..Inv
   20a38:	64696c61 67726120 63000a73 69666e6f     alid args..confi
   20a48:	61760067 0000006c                       g.val...

00020a50 <conf_nmgr_handlers>:
   20a50:	00011621 0001157d 75255b1b 5b1b0044     !...}....[%uD..[
   20a60:	00437525 6c363025 68002075 0a706c65     %uC.%06lu .help.
   20a70:	332d2500 25007330 7330332d 000a7325     .%-30s.%-30s%s..
   20a80:	2500203e 00732573 656c6573 55007463     > .%s%s.select.U
   20a90:	6365726e 696e676f 2064657a 6d6d6f63     nrecognized comm
   20aa0:	0a646e61 726e5500 676f6365 657a696e     and..Unrecognize
   20ab0:	6f632064 6e616d6d 25203a64 49000a73     d command: %s..I
   20ac0:	67656c6c 6d206c61 6c75646f 73252065     llegal module %s
   20ad0:	7355000a 3a656761 6e28000a 6568206f     ..Usage:..(no he
   20ae0:	6120706c 6c696176 656c6261 53000a29     lp available)..S
   20af0:	616d6d75 0a3a7972 72615000 74656d61     ummary:..Paramet
   20b00:	3a737265 7641000a 616c6961 20656c62     ers:..Available 
   20b10:	75646f6d 3a73656c 6f54000a 6c657320     modules:..To sel
   20b20:	20746365 6f6d2061 656c7564 6e65202c     ect a module, en
   20b30:	20726574 6c657327 20746365 646f6d3c     ter 'select <mod
   20b40:	20656c75 656d616e 0a2e273e 6c6c4900     ule name>'...Ill
   20b50:	6c616765 72617020 74656d61 000a7265     egal parameter..
   20b60:	706c6568 73694d00 676e6973 72617020     help.Missing par
   20b70:	74656d61 000a7265 65707954 65682720     ameter..Type 'he
   20b80:	2027706c 20726f66 7473696c 20666f20     lp' for list of 
   20b90:	69617661 6c62616c 6f632065 6e616d6d     available comman
   20ba0:	000a7364 206f6f54 796e616d 72617020     ds..Too many par
   20bb0:	74656d61 20737265 78616d28 757a2520     ameters (max %zu
   20bc0:	4d000a29 6e207861 65626d75 666f2072     )..Max number of
   20bd0:	646f6d20 73656c75 61657220 64656863      modules reached
   20be0:	614d000a 756e2078 7265626d 20666f20     ..Max number of 
   20bf0:	706d6f63 63207461 616d6d6f 2073646e     compat commands 
   20c00:	63616572 0a646568 6d6f6300 00746170     reached..compat.
   20c10:	656c6c49 206c6167 75646f6d 2520656c     Illegal module %
   20c20:	64202c73 75616665 6920746c 6f6e2073     s, default is no
   20c30:	68632074 65676e61 73000a64 6c6c6568     t changed..shell
   20c40:	00000000                                ....

00020c44 <shell_cmd_help>:
   20c44:	00000001 0001293d 00020b60 00000000     ....=)..`.......

00020c54 <shell_cmd_select_module>:
   20c54:	00000001 00012299 00020a88 00000000     ....."..........
   20c64:	0009060a 20643425 20783325 000a7325     ....%4d %3x %s..
   20c74:	706d654d 736c6f6f 000a203a 736b6c62     Mempools: ..blks
   20c84:	3325007a 25207332 25207335 25207334     z.%32s %5s %4s %
   20c94:	25207334 000a7334 006e696d 73323325     4s %4s..min.%32s
   20ca4:	64352520 64342520 64342520 64342520      %5d %4d %4d %4d
   20cb4:	6f43000a 6e646c75 66207427 20646e69     ..Couldn't find 
   20cc4:	656d2061 79726f6d 6f6f7020 6977206c     a memory pool wi
   20cd4:	6e206874 20656d61 000a7325 00676c66     th name %s..flg.
   20ce4:	00666572 20733425 20733325 000a7325     ref.%4s %3s %s..
   20cf4:	6b736154 0a203a73 69727000 73617400     Tasks: ..pri.tas
   20d04:	3825006b 33252073 33252073 38252073     k.%8s %3s %3s %8
   20d14:	38252073 38252073 38252073 38252073     s %8s %8s %8s %8
   20d24:	38252073 33252073 6e000a73 63656863     s %8s %3s..nchec
   20d34:	636c006b 6b636568 6b747300 00657375     k.lcheck.stkuse.
   20d44:	736b7473 7363007a 75720077 6d69746e     stksz.csw.runtim
   20d54:	69740065 38250064 33252073 33252075     e.tid.%8s %3u %3
   20d64:	38252075 2520756c 20756c38 20753825     u %8lu %8lu %8u 
   20d74:	20753825 756c3825 6c382520 43000a75     %8u %8lu %8lu..C
   20d84:	646c756f 2074276e 646e6966 73617420     ouldn't find tas
   20d94:	6977206b 6e206874 20656d61 000a7325     k with name %s..
   20da4:	61766e49 2064696c 65746164 656d6974     Invalid datetime
   20db4:	736c000a 00766564 7473696c 20534f20     ..lsdev.list OS 
   20dc4:	69766564 00736563 65736572 79732074     devices.reset sy
   20dd4:	6d657473 6f687300 79732077 6d657473     stem.show system
   20de4:	74616420 61640065 69746574 7420656d      date.datetime t
   20df4:	6573206f 68730074 7320776f 65747379     o set.show syste
   20e04:	706d206d 006c6f6f 6f6f706d 616e206c     m mpool.mpool na
   20e14:	7300656d 20776f68 7420736f 736b7361     me.show os tasks
   20e24:	73617400 616e206b 0000656d              .task name..

00020e30 <date_help>:
   20e30:	00020dd9 00000000 00020e3c              ........<...

00020e3c <date_params>:
   20e3c:	00020c67 00020dea 00000000 00000000     g...............

00020e4c <ls_dev_help>:
   20e4c:	00020dbc 00000000 00000000              ............

00020e58 <mpool_help>:
   20e58:	00020dfa 00000000 00020e64              ........d...

00020e64 <mpool_params>:
   20e64:	00020c67 00020e0c 00000000 00000000     g...............

00020e74 <os_commands>:
   20e74:	00000001 00013061 00020e1f 00020ee8     ....a0..........
   20e84:	00000001 00012f61 00020e06 00020e58     ....a/......X...
   20e94:	00000001 00013155 00020de5 00020e30     ....U1......0...
   20ea4:	00000001 00013015 000220b8 00020ed4     .....0... ......
   20eb4:	00000001 00013029 00020db6 00020e4c     ....)0......L...
	...

00020ed4 <reset_help>:
   20ed4:	00020dcc 00000000 00020ee0              ............

00020ee0 <reset_params>:
	...

00020ee8 <tasks_help>:
   20ee8:	00020e17 00000000 00020ef4              ............

00020ef4 <tasks_params>:
   20ef4:	00020c67 00020e25 00000000 00000000     g...%...........
   20f04:	6e6f4320 656c6f73 63695420 6f20736b      Console Ticks o
   20f14:	6f000a6e 20006666 736e6f43 20656c6f     n..off. Console 
   20f24:	6b636954 666f2073 20000a66 67617355     Ticks off.. Usag
   20f34:	74203a65 736b6369 6e6f5b20 66666f7c     e: ticks [on|off
   20f44:	70000a5d 706d6f72 69740074 00736b63     ]..prompt.ticks.
   20f54:	6c656873 6974206c 20736b63 6d6d6f63     shell ticks comm
   20f64:	00646e61 67617375 74203a65 736b6369     and.usage: ticks
   20f74:	6e6f5b20 66666f7c 7574005d 6f206e72      [on|off].turn o
   20f84:	0000006e                                n...

00020f88 <prompt_commands>:
   20f88:	00000000 00013205 00020f4e 00020fa8     .....2..N.......
	...

00020fa8 <ticks_help>:
   20fa8:	00020f54 00020f68 00020fb4              T...h.......

00020fb4 <ticks_params>:
   20fb4:	00020f83 00020f7e 00020f17 00020f7e     ....~.......~...
	...
   20fcc:	00642573 74617473 6d756e00 6765725f     s%d.stat.num_reg
   20fdc:	65747369 00646572                       istered.

00020fe4 <g_stats_map_stats>:
   20fe4:	0fd50014 63720002 61747300 696c5f74     ......rc.stat_li
   20ff4:	67007473 70756f72 73797300 65696600     st.group.sys.fie
   21004:	0073646c 203a7325 000a7525 203a7325     lds.%s: %u..%s: 
   21014:	0a756c25 3a732500 6c6c2520 55000a75     %lu..%s: %llu..U
   21024:	6f6e6b6e 73206e77 20746174 657a6973     nknown stat size
   21034:	726f6620 20732520 000a7525 0a732509      for %s %u...%s.
   21044:	73754d00 70732074 66696365 20612079     .Must specify a 
   21054:	74617473 69747369 616e2063 7420656d     statistic name t
   21064:	7564206f 202c706d 73736f70 656c6269     o dump, possible
   21074:	6d616e20 61207365 0a3a6572 756f4300      names are:..Cou
   21084:	6e20646c 6620746f 20646e69 74617473     ld not find stat
   21094:	69747369 72672063 2070756f 000a7325     istic group %s..
   210a4:	252f7325 6d360073 35380038 31006b30     %s/%s.6m8.850k.1
   210b4:	006b3031 20766e69 61657270 6c5f626d     10k.inv preamb_l
   210c4:	000a6e65 63627775 75006766 70006277     en..uwbcfg.uwb.p
   210d4:	64006672 72617461 00657461 705f7872     rf.datarate.rx_p
   210e4:	656c6361 7872006e 6572705f 635f6d61     aclen.rx_pream_c
   210f4:	00786469 735f7872 79746466 72006570     idx.rx_sfdtype.r
   21104:	66735f78 6f745f64 5f787200 6d726870     x_sfd_to.rx_phrm
   21114:	0065646f 645f7872 5f676169 74006e65     ode.rx_diag_en.t
   21124:	72705f78 5f6d6165 78646963 5f787400     x_pream_cidx.tx_
   21134:	61657270 656c5f6d 7874006e 705f6672     pream_len.txrf_p
   21144:	7265776f 616f635f 00657372 66727874     ower_coarse.txrf
   21154:	776f705f 665f7265 00656e69 615f7872     _power_fine.rx_a
   21164:	6c64746e 78740079 746e615f 00796c64     ntdly.tx_antdly.
   21174:	615f7872 735f746e 72617065 6f697461     rx_ant_separatio
   21184:	7865006e 6c635f74 796c646b 6c6f7200     n.ext_clkdly.rol
   21194:	72660065 5f656d61 746c6966 78007265     e.frame_filter.x
   211a4:	5f6c6174 6d697274 766e6900 65727020     tal_trim.inv pre
   211b4:	63206d61 2065646f 69737528 2520676e     am code (using %
   211c4:	000a2964 20766e69 20667270 000a6425     d)..inv prf %d..
   211d4:	20766e69 000a6863 20766e69 61746164     inv ch..inv data
   211e4:	65746172 6e69000a 61702076 6e656c63     rate..inv paclen
   211f4:	6e69000a 66732076 70795464 69000a65     ..inv sfdType..i
   21204:	6320766e 7372616f 78742065 0a727770     nv coarse txpwr.
   21214:	34302500 30252d64 252d6432 54643230     .%04d-%02d-%02dT
   21224:	64323025 3230253a 30253a64 252e6432     %02d:%02d:%02d.%
   21234:	00643630 30256325 253a6432 00643230     06d.%c%02d:%02d.

00021244 <month_days>:
   21244:	0000001f 0000001c 0000001f 0000001e     ................
   21254:	0000001f 0000001e 0000001f 0000001f     ................
   21264:	0000001e 0000001f 0000001e 0000001f     ................

00021274 <crc16tab>:
   21274:	10210000 30632042 50a54084 70e760c6     ..!.B c0.@.P.`.p
   21284:	91298108 b16ba14a d1adc18c f1efe1ce     ..).J.k.........
   21294:	02101231 22523273 429452b5 62d672f7     1...s2R".R.B.r.b
   212a4:	83189339 a35ab37b c39cd3bd e3def3ff     9...{.Z.........
   212b4:	34432462 14010420 74c764e6 548544a4     b$C4 ....d.t.D.T
   212c4:	b54ba56a 95098528 f5cfe5ee d58dc5ac     j.K.(...........
   212d4:	26723653 06301611 66f676d7 46b45695     S6r&..0..v.f.V.F
   212e4:	a77ab75b 87389719 e7fef7df c7bcd79d     [.z...8.........
   212f4:	58e548c4 78a76886 18610840 38232802     .H.X.h.x@.a..(#8
   21304:	d9edc9cc f9afe98e 99698948 b92ba90a     ........H.i...+.
   21314:	4ad45af5 6a967ab7 0a501a71 2a123a33     .Z.J.z.jq.P.3:.*
   21324:	cbdcdbfd eb9efbbf 8b589b79 ab1abb3b     ........y.X.;...
   21334:	7c876ca6 5cc54ce4 3c032c22 1c410c60     .l.|.L.\",.<`.A.
   21344:	fd8fedae ddcdcdec bd0bad2a 9d498d68     ........*...h.I.
   21354:	6eb67e97 4ef45ed5 2e323e13 0e701e51     .~.n.^.N.>2.Q.p.
   21364:	efbeff9f cffcdfdd af3abf1b 8f789f59     ..........:.Y.x.
   21374:	81a99188 a1ebb1ca c12dd10c e16ff14e     ..........-.N.o.
   21384:	00a11080 20e330c2 40255004 60677046     .....0. .P%@Fpg`
   21394:	939883b9 b3daa3fb d31cc33d f35ee37f     ........=.....^.
   213a4:	129002b1 32d222f3 52144235 72566277     .....".25B.RwbVr
   213b4:	a5cbb5ea 858995a8 e54ff56e c50dd52c     ........n.O.,...
   213c4:	24c334e2 048114a0 64477466 44055424     .4.$....ftGd$T.D
   213d4:	b7faa7db 97b88799 f77ee75f d73cc71d     ........_.~...<.
   213e4:	36f226d3 16b00691 76766657 56344615     .&.6....Wfvv.F4V
   213f4:	c96dd94c e92ff90e 89e999c8 a9abb98a     L.m.../.........
   21404:	48655844 68277806 08e118c0 28a33882     DXeH.x'h.....8.(
   21414:	db5ccb7d fb1eeb3f 9bd88bf9 bb9aabbb     }.\.?...........
   21424:	5a544a75 7a166a37 1ad00af1 3a922ab3     uJTZ7j.z.....*.:
   21434:	ed0ffd2e cd4ddd6c ad8bbdaa 8dc99de8     ....l.M.........
   21444:	6c077c26 4c455c64 2c833ca2 0cc11ce0     &|.ld\EL.<.,....
   21454:	ff3eef1f df7ccf5d bfbaaf9b 9ff88fd9     ..>.].|.........
   21464:	7e366e17 5e744e55 3eb22e93 1ef00ed1     .n6~UNt^...>....

00021474 <crc8_small_table>:
   21474:	090e0700 15121b1c 31363f38 2d2a2324     ........8?61$#*-

00021484 <streamer_cfg_console>:
   21484:	000144b5 000144ad                       .D...D..

0002148c <sysdown_cbs>:
   2148c:	0001586d 0000f4f5 00010051 0000e4c5     mX......Q.......
   2149c:	0001947d 00019d75 00013b61 00000000     }...u...a;......
   214ac:	696c7073 74732f74 73757461 6c707300     split/status.spl
   214bc:	                                         it.

000214bf <base64_chars>:
   214bf:	44434241 48474645 4c4b4a49 504f4e4d     ABCDEFGHIJKLMNOP
   214cf:	54535251 58575655 62615a59 66656463     QRSTUVWXYZabcdef
   214df:	6a696867 6e6d6c6b 7271706f 76757473     ghijklmnopqrstuv
   214ef:	7a797877 33323130 37363534 2f2b3938     wxyz0123456789+/
   214ff:	31776400 5f303030 00000030               .dw1000_0....

0002150c <dw1000_0_cfg>:
   2150c:	20006b18 00001f40 000007d0 11131800     .k. @...........
   2151c:	40424042 00000000 6d726554 6c616e69     B@B@....Terminal
   2152c:	00000000 00545452 47474553 7b005245     ....RTT.SEGGER.{
   2153c:	69747522 3a22656d 756c2520 736d222c     "utime": %lu,"ms
   2154c:	203a2267 31776422 5f303030 5f676b70     g": "dw1000_pkg_
   2155c:	74696e69 000a7d22 7475227b 22656d69     init"}..{"utime"
   2156c:	6c25203a 6d222c75 3a226773 77642220     : %lu,"msg": "dw
   2157c:	30303031 676b705f 776f645f 0a7d226e     1000_pkg_down"}.
   2158c:	31776400 5f303030 77640031 30303031     .dw1000_1.dw1000
   2159c:	2000325f 3d442020 61746144 3d41202c     _2.   D=Data, A=
   215ac:	2c6b6341 4d3d4d20 000a6361 53202020     Ack, M=Mac..   S
   215bc:	3a726365 63655320 74697275 6e652079     ecr: Security en
   215cc:	656c6261 66202c64 3a646e50 61724620     abled, fPnd: Fra
   215dc:	7020656d 69646e65 202c676e 724b4341     me pending, ACKr
   215ec:	6341203a 6572206b 73657571 2c646574     : Ack requested,
   215fc:	4e415020 50203a63 44494e41 6d6f4320      PANc: PANID Com
   2160c:	73657270 20000a73 73442020 4e203a74     press..   Dst: N
   2161c:	6f6e3d6f 73656420 64612074 73657264     o=no dest addres
   2162c:	7352202c 7365523d 65767265 31202c64     , Rs=Reserved, 1
   2163c:	69622d36 64612074 73657264 36202c73     6-bit address, 6
   2164c:	69622d34 64612074 73657264 20000a73     4-bit address.. 
   2165c:	72462020 20656d61 73726576 3a6e6f69       Frame version:
   2166c:	492d4920 20454545 2e323038 342e3531      I-IEEE 802.15.4
   2167c:	3249202c 2d333030 45454549 32303820     , I2003-IEEE 802
   2168c:	2e35312e 30322d34 202c3330 2d764669     .15.4-2003, iFv-
   2169c:	61766e49 2064696c 6d617246 65562065     Invalid Frame Ve
   216ac:	6f697372 20000a6e 72532020 4e203a63     rsion..   Src: N
   216bc:	6f6e3d6f 63727320 64646120 2c736572     o=no src addres,
   216cc:	3d735220 65736552 64657672 3631202c      Rs=Reserved, 16
   216dc:	7469622d 64646120 73736572 3436202c     -bit address, 64
   216ec:	7469622d 64646120 73736572 7c44000a     -bit address..D|
   216fc:	007c4100 52007c4d 6553007c 007c7263     .A|.M|.R|.Secr|.
   2170c:	646e5066 4341007c 007c724b 634e4150     fPnd|.ACKr|.PANc
   2171c:	7344007c 7c6f4e74 74734400 007c7352     |.DstNo|.DstRs|.
   2172c:	31747344 44007c36 34367473 3249007c     Dst16|.Dst64|.I2
   2173c:	7c333030 007c4900 7c764669 63725300     003|.I|.iFv|.Src
   2174c:	53006f4e 73526372 63725300 53003631     No.SrcRs.Src16.S
   2175c:	34366372 50785400 70557277 72456d54     rc64.TxPwrUpTmEr
   2176c:	52007c72 65725078 52626d61 007c6a65     r|.RxPreambRej|.
   2177c:	65527852 6f536465 726f436c 49007c72     RxReedSolCorr|.I
   2178c:	42785243 74506675 7c313d72 736f4800     CRxBufPtr=1|.Hos
   2179c:	42785274 74506675 7c313d72 74754100     tRxBufPtr=1|.Aut
   217ac:	6d617246 6c694665 6a655274 7254007c     FrameFiltRej|.Tr
   217bc:	6d736e61 75427469 72656666 6f727245     ansmitBufferErro
   217cc:	48007c72 50666c61 6f697265 6c654464     r|.HalfPeriodDel
   217dc:	61577961 007c6e72 46535852 6d695444     ayWarn|.RXSFDTim
   217ec:	74756f65 6c43007c 506b636f 6f4c4c4c     eout|.ClockPLLLo
   217fc:	676e6973 6b636f4c 4652007c 4c4c4c50     singLock|.RFPLLL
   2180c:	6e69736f 636f4c67 53007c6b 5045454c     osingLock|.SLEEP
   2181c:	494e4932 47007c54 496f6970 007c746e     2INIT|.GpioInt|.
   2182c:	72507852 446d6165 69547465 756f656d     RxPreamDetTimeou
   2183c:	52007c74 45764f78 007c7272 74696228     t|.RxOvErr|.(bit
   2184c:	72203931 72657365 29646576 7852007c     19 reserved)|.Rx
   2185c:	6545444c 007c7272 69547852 756f656d     LDEerr|.RxTimeou
   2186c:	52007c74 65655278 6c6f5364 6e6f6d6f     t|.RxReedSolomon
   2187c:	6d617246 6e795365 736f4c63 52007c73     FrameSyncLoss|.R
   2188c:	53434678 7c727245 46785200 6f475343     xFCSErr|.RxFCSGo
   2189c:	007c646f 61447852 72466174 7964526d     od|.RxDataFrmRdy
   218ac:	7852007c 45594850 007c7272 48507852     |.RxPHYErr|.RxPH
   218bc:	74654459 7852007c 6445444c 7c656e6f     YDet|.RxLDEdone|
   218cc:	53785200 74654446 7852007c 61657250     .RxSFDet|.RxPrea
   218dc:	7465446d 7854007c 6d617246 6e655365     mDet|.TxFrameSen
   218ec:	54007c74 59485078 656e6f44 7854007c     t|.TxPHYDone|.Tx
   218fc:	61657250 6e6f446d 54007c65 61745378     PreamDone|.TxSta
   2190c:	007c7472 6f747541 7c6b6341 74784500     rt|.AutoAck|.Ext
   2191c:	636f6c43 6552206b 7c746573 6f6c4300     Clock Reset|.Clo
   2192c:	50206b63 4c204c4c 7c6b636f 53524900     ck PLL Lock|.IRS
   2193c:	72227b00 255b6765 5d583230 30223d22     .{"reg[%02X]"="0
   2194c:	38302578 22586c6c 7b000a7d 67657222     x%08llX"}..{"reg
   2195c:	3230255b 3d225d58 25783022 6c303130     [%02X]"="0x%010l
   2196c:	7d22586c 227b000a 5b676572 58323025     lX"}..{"reg[%02X
   2197c:	223d225d 30257830 6c6c3631 0a7d2258     ]"="0x%016llX"}.
   2198c:	69227b00 2d74736e 7172693e 6d65735f     .{"inst->irq_sem
   2199c:	64253d22 7b000a7d 736e6922 743e2d74     "=%d}..{"inst->t
   219ac:	65735f78 253d226d 000a7d64 6e72227b     x_sem"=%d}..{"rn
   219bc:	733e2d67 3d226d65 0a7d6425 63227b00     g->sem"=%d}..{"c
   219cc:	3e2d7063 226d6573 7d64253d 7544000a     cp->sem"=%d}..Du
   219dc:	7320706d 74726174 20676e69 25207461     mp starting at %
   219ec:	586c3630 25000a3a 3a583430 32302520     06lX:..%04X: %02
   219fc:	30252058 25205832 20583230 58323025     X %02X %02X %02X
   21a0c:	32302520 30252058 25205832 20583230      %02X %02X %02X 
   21a1c:	58323025 32302520 30252058 25205832     %02X %02X %02X %
   21a2c:	20583230 58323025 32302520 30252058     02X %02X %02X %0
   21a3c:	25205832 20583230 58323025 6261000a     2X %02X %02X..ab
   21a4c:	25200073 20733031 65737500 69640063     s. %10s .usec.di
   21a5c:	20006666 20733825 72756400 36252000     ff. %8s .dur. %6
   21a6c:	69002073 25200072 66007332 6c727463     s .ir. %2s.fctrl
   21a7c:	35252000 66280073 6c727463 74787432     . %5s.(fctrl2txt
   21a8c:	31322529 20002073 20732a25 20202000     )%21s . %*s .   
   21a9c:	74617473 74327375 000a7478 2520002d     status2txt..-. %
   21aac:	756c3031 25200020 20756c38 36252000     10lu . %8lu . %6
   21abc:	0020756c 73322520 25200020 20583230     lu . %2s . %02X 
   21acc:	58323025 73252820 732a2529 30252000     %02X (%s)%*s. %0
   21adc:	25205832 20583230 20202000 20202020     2X %02X .       
   21aec:	33252000 00207332 2a302520 20586c6c     . %32s . %0*llX 
   21afc:	73252000 2d2d2d00 66200a2d 6c727463     . %s.----. fctrl
   21b0c:	74787432 000a203a 206f6f54 20776566     2txt: ..Too few 
   21b1c:	73677261 6164000a 00776300 69766544     args..da.cw.Devi
   21b2c:	255b6563 6e205d64 6920776f 5743206e     ce[%d] now in CW
   21b3c:	646f6d20 6e6f2065 20686320 202e6425      mode on ch %d. 
   21b4c:	65736552 6f742074 6e6f6320 756e6974     Reset to continu
   21b5c:	77000a65 64720072 25783000 586c3630     e..wr.rd.0x%06lX
   21b6c:	2578302c 3a583430 25783020 0a586c6c     ,0x%04X: 0x%llX.
   21b7c:	74626900 61747300 32737574 00747874     .ibt.status2txt.
   21b8c:	30313025 3a586c6c 0a732520 74636600     %010llX: %s..fct
   21b9c:	74326c72 32007478 74796220 6e207365     rl2txt.2 bytes n
   21bac:	65646565 25000a64 20583230 58323025     eeded..%02X %02X
   21bbc:	7325203a 2d2d000a 200a2d2d 6764656c     : %s..----. ledg
   21bcc:	3a646e65 55000a20 6f6e6b6e 63206e77     end: ..Unknown c
   21bdc:	000a646d 30317764 64003030 30303177     md..dw1000.dw100
   21bec:	62642030 77640067 30303031 62656420     0 dbg.dw1000 deb
   21bfc:	5b006775 74736e69 7564205d 6120706d     ug.[inst] dump a
   21c0c:	72206c6c 73696765 73726574 6e693c00     ll registers.<in
   21c1c:	203e7473 43207874 6e6f2057 72756320     st> tx CW on cur
   21c2c:	746e6572 61686320 6c656e6e 6e693c00     rent channel.<in
   21c3c:	203e7473 6464613c 5b203e72 676e656c     st> <addr> [leng
   21c4c:	2c5d6874 6d756420 72612070 3c006165     th], dump area.<
   21c5c:	74736e69 613c203e 3e726464 75733c20     inst> <addr> <su
   21c6c:	64646162 3c203e72 676e656c 2c3e6874     baddr> <length>,
   21c7c:	61657220 65722064 74736967 3c007265      read register.<
   21c8c:	74736e69 613c203e 3e726464 75733c20     inst> <addr> <su
   21c9c:	64646162 3c203e72 756c6176 3c203e65     baddr> <value> <
   21cac:	676e656c 2c3e6874 69727720 76206574     length>, write v
   21cbc:	65756c61 206f7420 69676572 72657473     alue to register
   21ccc:	6e695b00 6e617473 5b206563 62726576     .[instance [verb
   21cdc:	2d65736f 5d6d756e 6e69205d 72726574     ose-num]] interr
   21cec:	20747075 6b636162 63617274 733c0065     upt backtrace.<s
   21cfc:	735f7379 75746174 74203e73 6574206f     ys_status> to te
   21d0c:	3c007478 72746366 74203e6c 6574206f     xt.<fctrl> to te
   21d1c:	00007478                                xt..

00021d20 <cmd_dw1000_help>:
   21d20:	00021be7 00021bf2 00021d2c              ........,...

00021d2c <cmd_dw1000_param>:
   21d2c:	000209f5 00021bff 00021b25 00021c19     ........%.......
   21d3c:	00021b22 00021c39 00021b62 00021c5b     "...9...b...[...
   21d4c:	00021b5f 00021c8b 00021b7d 00021ccd     _.......}.......
   21d5c:	00021b81 00021cfa 00021b99 00021d0f     ................
	...

00021d74 <nrf52k_flash_dev>:
   21d74:	00021d8c 00000000 00080000 00000080     ................
   21d84:	00000001 000000ff                       ........

00021d8c <nrf52k_flash_funcs>:
   21d8c:	00016695 000165d5 00016585 000166a3     .f...e...e...f..
   21d9c:	00000000 000165d1 00000000              .....e......

00021da8 <nrf52_hal_timers>:
   21da8:	20006bd4 00000000 00000000 00000000     .k. ............
	...

00021dc0 <os_bsp_spi0m_cfg>:
   21dc0:	00121410 7475227b 22656d69 6c25203a     ....{"utime": %l
   21dd0:	6d222c75 3a226773 726e2220 705f676e     u,"msg": "nrng_p
   21de0:	695f676b 2274696e 6e000a7d 5f676e72     kg_init"}..nrng_
   21df0:	75716572 00747365 676e726e 73696c5f     request.nrng_lis
   21e00:	006e6574 72617473 78725f74 7272655f     ten.start_rx_err
   21e10:	7300726f 74726174 5f78745f 6f727265     or.start_tx_erro
   21e20:	                                         r.

00021e22 <g_stats_map_nrng_stat_section>:
   21e22:	1deb0014 00180002 00021df8 070b001c     ................
   21e32:	00280002 00021e0a 07ac0020 00240002     ..(..... .....$.
   21e42:	0002070e 1e04002c 00300002 00020731     ....,.....0.1...
   21e52:	1e190034 00380002 00021e13 20b8003c     4.....8.....<.. 
   21e62:	                                         ..

00021e64 <__func__.7324>:
   21e64:	656d6974 6c616373 6e695f65               timescale_init.

00021e73 <__func__.7336>:
   21e73:	656d6974 6c616373 72665f65 69006565     timescale_free.i
   21e83:	2d74736e 656b653e 736e6900 682f0074     nst->eke.inst./h
   21e93:	2f656d6f 6c6b696e 642f7361 742f7665     ome/niklas/dev/t
   21ea3:	73656d69 656c6163 726f632d 696c2f65     imescale-core/li
   21eb3:	69742f62 6373656d 2e656c61               b/timescale.c.

00021ec1 <__func__.7283>:
   21ec1:	666b7273 6c62645f 69616d5f               srkf_dbl_main.

00021ecf <__func__.7299>:
   21ecf:	666b7273 6c62645f 696e695f               srkf_dbl_init.

00021edd <__func__.7311>:
   21edd:	666b7273 6c62645f 6572665f 6e690065     srkf_dbl_free.in
   21eed:	21207473 4c554e3d 6e69004c 3e2d7473     st !=NULL.inst->
   21efd:	3d3d206e 69006e20 2d74736e 6900783e     n == n.inst->x.i
   21f0d:	2d74736e 6900793e 2d74736e 69007a3e     nst->y.inst->z.i
   21f1d:	2d74736e 6900653e 2d74736e 6900483e     nst->e.inst->H.i
   21f2d:	2d74736e 6900503e 2d74736e 0050553e     nst->P.inst->UP.
   21f3d:	74736e69 50443e2d 736e6900 513e2d74     inst->DP.inst->Q
   21f4d:	736e6900 553e2d74 6e690051 3e2d7473     .inst->UQ.inst->
   21f5d:	69005144 2d74736e 6900523e 2d74736e     DQ.inst->R.inst-
   21f6d:	0052553e 74736e69 52443e2d 736e6900     >UR.inst->DR.ins
   21f7d:	533e2d74 736e6900 5f3e2d74 6e690053     t->S.inst->_S.in
   21f8d:	3e2d7473 6e690041 3e2d7473 6e69004b     st->A.inst->K.in
   21f9d:	21207473 554e203d 2f004c4c 656d6f68     st != NULL./home
   21fad:	6b696e2f 2f73616c 2f766564 656d6974     /niklas/dev/time
   21fbd:	6c616373 6f632d65 6c2f6572 732f6269     scale-core/lib/s
   21fcd:	5f666b72 2e6c6264 6e690063 3e2d7473     rkf_dbl.c.inst->
   21fdd:	78666f41 203d2120 4c4c554e 736e6900     Aofx != NULL.ins
   21fed:	483e2d74 2078666f 4e203d21 004c4c55     t->Hofx != NULL.
   21ffd:	7475227b 22656d69 6c25203a 6d222c75     {"utime": %lu,"m
   2200d:	3a226773 73732220 6e726e5f 6b705f67     sg": "ss_nrng_pk
   2201d:	6e695f67 7d227469 7774000a 73735f72     g_init"}..twr_ss
   2202d:	6e726e5f                                 _nrng.

00022033 <g_stats_map_twr_ss_nrng_stat_section>:
   22033:	1e0a0014 00180002 000207ac 070b001c     ................
   22043:	00200002 00020731 20b80024 227b0002     .. .1...$.. ..{"
   22053:	6d697475 203a2265 2c756c25 67736d22     utime": %lu,"msg
   22063:	22203a22 65707573 61726672 725f656d     ": "superframe_r
   22073:	74657365 000a7d22 7475227b 22656d69     eset"}..{"utime"
   22083:	6c25203a 6d222c75 3a226773 6e722220     : %lu,"msg": "rn
   22093:	6b705f67 6e695f67 7d227469 6f63000a     g_pkg_init"}..co
   220a3:	656c706d 635f6574 75730062 66726570     mplete_cb.superf
   220b3:	656d6172 7365725f                        rame_reset.

000220be <g_stats_map_rng_stat_section>:
   220be:	1dec0014 00180002 00021df9 06ff001c     ................
   220ce:	00200002 0002070b 07310024 00280002     .. .....$.1...(.
   220de:	00020740 1e0a002c 00300002 00021e19     @...,.....0.....
   220ee:	07ac0034 00380002 000220a1 20b8003c     4.....8.. ..<.. 
   220fe:	00400002 000220ad 7272652c 203a726f     ..@.. ..,error: 
   2210e:	6b6e5522 6e776f6e 61724620 4320656d     "Unknown Frame C
   2211e:	2265646f 7825202c 7475000a 00656d69     ode", %x..utime.
   2212e:	00716573 6469756f 61726200 7372007a     seq.ouid.braz.rs
   2213e:	6c006973 7000736f 73006d70 00007374     si.los.ppm.sts..
   2214e:	75227b00 656d6974 25203a22 222c756c     .{"utime": %lu,"
   2215e:	2267736d 7722203a 745f7363 73656d69     msg": "wcs_times
   2216e:	656c6163 676b705f 696e695f 0a7d2274     cale_pkg_init"}.
   2217e:	e0b50000 e374a4f8 01223e20 05876e5b     ......t. >".[n..
   2218e:	674e3deb 9e05f1e2 e0b53db5 e374a4f8     .=Ng.....=....t.
   2219e:	03353e30 adf4b732 61644654 73006174     0>5.2...TFdata.s
   221ae:	75006168 61726770 00006564               ha.upgrade....

000221bc <imgr_nmgr_handlers>:
   221bc:	0001a845 0001a9e9 00000000 0001a335     E...........5...
	...
   221e8:	0001a2c3 00000000 0001a28d 67616d69     ............imag
   221f8:	73007365 00746f6c 73726576 006e6f69     es.slot.version.
   22208:	68736168 6f6f6200 6c626174 65700065     hash.bootable.pe
   22218:	6e69646e 6f630067 7269666e 0064656d     nding.confirmed.
   22228:	69746361 70006576 616d7265 746e656e     active.permanent
   22238:	6c707300 74537469 73757461 6e6f6300     .splitStatus.con
   22248:	6d726966 2e752500 252e7525 6c252e75     firm.%u.%u.%u.%l
   22258:	75250075 2e75252e 64007525 74657461     u.%u.%u.%u.datet
   22268:	00656d69 6f6f706d 6200736c 69736b6c     ime.mpools.blksi
   22278:	626e007a 00736b6c 6572666e 72700065     z.nblks.nfree.pr
   22288:	73006f69 65746174 6b747300 007a6973     io.state.stksiz.
   22298:	63777363 6c00746e 5f747361 63656863     cswcnt.last_chec
   222a8:	006e696b 7478656e 6568635f 6e696b63     kin.next_checkin
   222b8:	68636500 0000006f                       .echo...

000222c0 <nmgr_def_group_handlers>:
   222c0:	0001af71 0001af71 0001b299 0001b299     q...q...........
   222d0:	0001b0f5 00000000 0001afe9 00000000     ................
   222e0:	0001aef9 0001ae81 00000000 0001ae2d     ............-...
   222f0:	41464544 00544c55 4e00534f 4d545745     DEFAULT.OS.NEWTM
   22300:	4e005247 4c424d49 54435f45 4e00524c     GR.NIMBLE_CTLR.N
   22310:	4c424d49 4f485f45 4e005453 00534646     IMBLE_HOST.NFFS.
   22320:	4f424552 4900544f 5649544f 00595449     REBOOT.IOTIVITY.
   22330:	54534554 00000000                       TEST....

00022338 <CSWTCH.19>:
   22338:	000222f0 000222f8 000222fb 00022303     ."..."..."...#..
   22348:	0002230f 0002231b 00022320 00022327     .#...#.. #..'#..
   22358:	00022330 3d73745b 756c6c25 202c7375     0#..[ts=%lluus, 
   22368:	3d646f6d 6c207525 6c657665 5d75253d     mod=%u level=%u]
   22378:	6f630020 6c6f736e 00000065               .console...

00022384 <log_console_handler>:
   22384:	00000000 0001bd0b 00000000 0001bd55     ............U...
   22394:	0001bd19 00000000 00000000 0001bd0f     ................
   223a4:	0001bd13 00000000 5f676f6c 75646f6d     ........log_modu
   223b4:	6c00656c 6c657665 676f6c00 73696c5f     le.level.log_lis
   223c4:	4e490074 45004f46 524f5252 4b4e5500     t.INFO.ERROR.UNK
   223d4:	4e574f4e 52415700 5243004e 43495449     NOWN.WARN.CRITIC
   223e4:	44004c41 47554245 76656c00 6d5f6c65     AL.DEBUG.level_m
   223f4:	6d007061 6c75646f 616d5f65 6f6c0070     ap.module_map.lo
   22404:	616e5f67 6e00656d 5f747865 65646e69     g_name.next_inde
   22414:	6f6c0078 65007367 6972746e 6d007365     x.logs.entries.m
   22424:	65006773 726f7272 6e65203a 20797274     sg.error: entry 
   22434:	206f6f74 6772616c 25282065 79622064     too large (%d by
   22444:	29736574 646f6d00 5f676f6c 7070616d     tes).modlog_mapp
   22454:	5f676e69 6c6f6f70 69616600 2064656c     ing_pool.failed 
   22464:	72206f74 20646165 73524d4d 6372203a     to read MMRs: rc
   22474:	0064253d 574f5242 54554f4e 4f445700     =%d.BROWNOUT.WDO
   22484:	45520047 53455551 00444554 54535953     G.REQUESTED.SYST
   22494:	4f5f4d45 495f4646 4800544e 00445241     EM_OFF_INT.HARD.
   224a4:	45534552 49505f54 4f53004e 72005446     RESET_PIN.SOFT.r
   224b4:	253a6e73 63202c73 253a746e 69202c75     sn:%s, cnt:%u, i
   224c4:	253a676d 75252e75 2e75252e 202c7525     mg:%u.%u.%u.%u, 
   224d4:	68736168 3025003a 2c007832 65696420     hash:.%02x., die
   224e4:	3a73253a 2c006425 3a637020 6c257830     :%s:%d., pc:0x%l
   224f4:	65720078 746f6f62 6265722f 5f746f6f     x.reboot/reboot_
   22504:	00746e63 6f626572 772f746f 74746972     cnt.reboot/writt
   22514:	72006e65 6f6f6265 00000074              en.reboot...

00022520 <sysflash_map_dflt>:
	...
   22528:	00004000 00000001 00008000 0003a000     .@..............
   22538:	00000002 00042000 0003a000 00000003     ..... ..........
   22548:	0007c000 00001000 00000010 00004000     .............@..
   22558:	00004000 00000011 0007d000 00003000     .@...........0..

00022568 <boot_img_magic>:
   22568:	f395c277 7fefd260 0f505235 8079b62c     w...`...5RP.,.y.

00022578 <boot_swap_tables>:
   22578:	03040104 01040204 03040104 04030301     ................
   22588:	00000401                                ....

0002258c <K>:
   2258c:	428a2f98 71374491 b5c0fbcf e9b5dba5     ./.B.D7q........
   2259c:	3956c25b 59f111f1 923f82a4 ab1c5ed5     [.V9...Y..?..^..
   225ac:	d807aa98 12835b01 243185be 550c7dc3     .....[....1$.}.U
   225bc:	72be5d74 80deb1fe 9bdc06a7 c19bf174     t].r........t...
   225cc:	e49b69c1 efbe4786 0fc19dc6 240ca1cc     .i...G.........$
   225dc:	2de92c6f 4a7484aa 5cb0a9dc 76f988da     o,.-..tJ...\...v
   225ec:	983e5152 a831c66d b00327c8 bf597fc7     RQ>.m.1..'....Y.
   225fc:	c6e00bf3 d5a79147 06ca6351 14292967     ....G...Qc..g)).
   2260c:	27b70a85 2e1b2138 4d2c6dfc 53380d13     ...'8!...m,M..8S
   2261c:	650a7354 766a0abb 81c2c92e 92722c85     Ts.e..jv.....,r.
   2262c:	a2bfe8a1 a81a664b c24b8b70 c76c51a3     ....Kf..p.K..Ql.
   2263c:	d192e819 d6990624 f40e3585 106aa070     ....$....5..p.j.
   2264c:	19a4c116 1e376c08 2748774c 34b0bcb5     .....l7.LwH'...4
   2265c:	391c0cb3 4ed8aa4a 5b9cca4f 682e6ff3     ...9J..NO..[.o.h
   2266c:	748f82ee 78a5636f 84c87814 8cc70208     ...toc.x.x......
   2267c:	90befffa a4506ceb bef9a3f7 c67178f2     .....lP......xq.
   2268c:	007b002c 00203a22 65757274 6c616600     ,.{.": .true.fal
   2269c:	25006573 00756c6c 696c6c25 6c756e00     se.%llu.%lli.nul
   226ac:	6625006c 5c005c00 725c0074 006e5c00     l.%f.\.\t.\r.\n.
   226bc:	5c00665c 005b0062 0000007d              \f.\b.[.}...

000226c8 <Zero>:
	...
   226d4:	80000000                                ....

/home/joel/Capstone/uwb-apps/bin/targets/ultrawidebuffs_datatransfer/app/apps/ultrawidebuffs_datatransfer/ultrawidebuffs_datatransfer.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
 108240	   5632	  24136	 138008	  21b18	/home/joel/Capstone/uwb-apps/bin/targets/ultrawidebuffs_datatransfer/app/apps/ultrawidebuffs_datatransfer/ultrawidebuffs_datatransfer.elf
