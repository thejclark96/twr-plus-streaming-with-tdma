
/home/joel/Capstone/uwb-apps/bin/targets/dwm1001_boot/app/boot/mynewt/mynewt.elf:     file format elf32-littlearm
/home/joel/Capstone/uwb-apps/bin/targets/dwm1001_boot/app/boot/mynewt/mynewt.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000000d9

Program Header:
0x70000001 off    0x000124cc vaddr 0x000024cc paddr 0x000024cc align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00010000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x000024e4 memsz 0x000024e4 flags r-x
    LOAD off    0x000200d8 vaddr 0x200000d8 paddr 0x000024e4 align 2**16
         filesz 0x0000001c memsz 0x00001850 flags rw-
    LOAD off    0x00000000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x000000d8 flags rw-
private flags = 0x5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .text              000024cc  00000000  00000000  00010000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.extab         00000000  000024cc  000024cc  000200f4  2**0  CONTENTS
  2 .ARM.exidx         00000018  000024cc  000024cc  000124cc  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .vector_relocation 000000d8  20000000  20000000  00030000  2**0  ALLOC
  4 .rtt               00000000  200000d8  200000d8  000200f4  2**0  CONTENTS
  5 .data              0000001c  200000d8  000024e4  000200d8  2**2  CONTENTS, ALLOC, LOAD, DATA
  6 .bssnz             00000000  200000f4  200000f4  000200f4  2**0  CONTENTS
  7 .bss               00001834  200000f4  00002500  000200f4  2**2  ALLOC
  8 .stack_dummy       000001b0  20001928  20001928  000200f8  2**3  CONTENTS, READONLY
  9 .ARM.attributes    0000002a  00000000  00000000  000202a8  2**0  CONTENTS, READONLY
 10 .comment           00000033  00000000  00000000  000202d2  2**0  CONTENTS, READONLY
 11 .svc_table         00000004  00000000  00000000  00020305  2**0  CONTENTS, READONLY
 12 .debug_line        00007f64  00000000  00000000  00020309  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info        0000fc48  00000000  00000000  0002826d  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev      00004000  00000000  00000000  00037eb5  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges     000008c8  00000000  00000000  0003beb8  2**3  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str         00003687  00000000  00000000  0003c780  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loc         00007d3f  00000000  00000000  0003fe07  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges      00000d80  00000000  00000000  00047b46  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame       000013d4  00000000  00000000  000488c8  2**2  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
000024cc l    d  .ARM.extab	00000000 .ARM.extab
000024cc l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
200000d8 l    d  .rtt	00000000 .rtt
200000d8 l    d  .data	00000000 .data
200000f4 l    d  .bssnz	00000000 .bssnz
200000f4 l    d  .bss	00000000 .bss
20001928 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 gcc_startup_nrf52.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
000000e0 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 sbrk.c
200000d8 l     O .data	00000004 sbrkBase
200000dc l     O .data	00000004 sbrkLimit
200000e0 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 system_nrf52.c
000001dc l     F .text	0000002a errata_16
000001dc l     F .text	0000002a errata_57
000001dc l     F .text	0000002a errata_37
000001dc l     F .text	0000002a errata_32
00000206 l     F .text	00000036 errata_31
00000206 l     F .text	00000036 errata_108
00000206 l     F .text	00000036 errata_36
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 hal_bsp.c
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 hal_common.c
00000000 l    df *ABS*	00000000 hal_flash.c
000004b0 l     F .text	00000024 nrf52k_flash_wait_ready
000004d4 l     F .text	0000004c nrf52k_flash_erase_sector
00000520 l     F .text	00000004 nrf52k_flash_init
00000524 l     F .text	000000c0 nrf52k_flash_write
000005e4 l     F .text	0000000e nrf52k_flash_read
000005f2 l     F .text	00000020 nrf52k_flash_sector_info
00002318 l     O .text	0000001c nrf52k_flash_funcs
00000000 l    df *ABS*	00000000 hal_system_start.c
00000000 l    df *ABS*	00000000 hal_watchdog.c
0000061c l     F .text	00000024 nrf52_wdt_irq_handler
00000000 l    df *ABS*	00000000 nrf52_periph.c
00000000 l    df *ABS*	00000000 hal_timer.c
000006d8 l     F .text	00000020 __NVIC_SetPendingIRQ
000006f8 l     F .text	00000038 hal_timer_read_bsptimer
00000730 l     F .text	0000007e nrf_timer_set_ocmp
00002334 l     O .text	00000018 nrf52_hal_timers
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_arch_arm.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 HAL_CM4.o
00000a2c l       .text	00000000 SVC_User
00000a4a l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 memcmp.c
00000ad0 l       .text	00000000 test1
00000ac4 l       .text	00000000 loop1
00000ad6 l       .text	00000000 res1
00000af2 l       .text	00000000 test2
00000afa l       .text	00000000 done
00000ae6 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
00000b06 l       .text	00000000 test1
00000b02 l       .text	00000000 loop1
00000b14 l       .text	00000000 test2
00000b10 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 flash_map.c
20000124 l     O .bss	00000078 mfg_areas.0
00000000 l    df *ABS*	00000000 mfg.c
00000d44 l     F .text	000000a4 mfg_read_next_mmr
00000de8 l     F .text	00000060 mfg_read_tlv_body
2000019c l     O .bss	00000001 mfg_initialized
200001a0 l     O .bss	00000018 mfg_mmrs
200001b8 l     O .bss	00000004 mfg_num_mmrs
00000000 l    df *ABS*	00000000 sysinit.c
00000f38 l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 loader.c
00000f3e l     F .text	00000050 boot_read_image_size
00000f90 l     F .text	0000005c boot_copy_sector
00000fec l     F .text	0000004c boot_read_image_headers
00001038 l     F .text	00000058 boot_status_init
00001090 l     F .text	00000098 boot_validate_slot.constprop.0.isra.0
00001128 l     F .text	00000068 boot_read_sectors
00001190 l     F .text	0000006c boot_erase_trailer_sectors
0000128c l     F .text	00000316 boot_swap_image
200001bc l     O .bss	00000068 boot_data
20000224 l     O .bss	00000400 buf.1
20000624 l     O .bss	00000600 primary_slot_sectors.5
20000c24 l     O .bss	00000600 scratch_sectors.3
20001224 l     O .bss	00000600 secondary_slot_sectors.4
20001824 l     O .bss	00000100 tmpbuf.2
00002394 l     O .text	00000010 boot_status_tables
00000000 l    df *ABS*	00000000 bootutil_misc.c
000018f4 l     F .text	00000048 boot_write_trailer_byte
00001a5c l     F .text	0000001e boot_read_swap_state_by_id.part.0
000023b8 l     O .text	00000012 boot_swap_tables
00000000 l    df *ABS*	00000000 image_validate.c
00000000 l    df *ABS*	00000000 sha256.c
000023cc l     O .text	00000100 K
00000000 l    df *ABS*	00000000 hal_flash.c
000020b8 l     F .text	0000001c hal_flash_check_addr
20001924 l     O .bss	00000001 protected_flash
00000000 l    df *ABS*	00000000 dwm1001_boot-sysflash.c
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
00000c8a g     F .text	0000001c flash_area_id_from_image_slot
20001928 g       .bss	00000000 __HeapBase
00000000 g       .svc_table	00000000 SVC_Count
00000144  w    F .text	00000002 TIMER2_IRQHandler
00000144  w    F .text	00000002 RTC0_IRQHandler
000019ac g     F .text	000000b0 boot_read_swap_state
000015a4 g     F .text	00000350 boot_go
200000d8 g       .data	00000000 __data_start__
00002300 g     O .text	00000018 nrf52k_flash_dev
00000144  w    F .text	00000002 SWI0_EGU0_IRQHandler
00001df8 g     F .text	00000140 mbedtls_internal_sha256_process
00000136  w    F .text	00000002 HardFault_Handler
00000858 g     F .text	00000058 hal_timer_init
00000ebc g     F .text	00000016 mfg_seek_next_with_type
00000612 g     F .text	0000000a hal_system_start
000020f8 g     F .text	00000010 hal_flash_align
00000144  w    F .text	00000002 SWI2_EGU2_IRQHandler
0000193c g     F .text	0000001c boot_magic_compatible_check
00000a7a g     F .text	0000000c SysTick_Handler
00000144  w    F .text	00000002 GPIOTE_IRQHandler
000007b0 g     F .text	000000a8 nrf52_timer0_irq_handler
00000144  w    F .text	00000002 PWM1_IRQHandler
2000011c g     O .bss	00000004 flash_map
0000227c g     F .text	0000002e hal_flash_is_erased
00000a50 g     F .text	0000002a PendSV_Handler
000023a4 g     O .text	00000004 BOOT_MAX_ALIGN
00000134  w    F .text	00000002 NMI_Handler
000024e4 g       .ARM.exidx	00000000 __exidx_end
00001d4c g     F .text	00000008 mbedtls_sha256_init
00000000 g       .text	00000000 __isr_vector_start
00000164 g     F .text	0000002c hal_system_reset
200000f0 g       .data	00000000 __aeabi_unwind_cpp_pr0
00000144  w    F .text	00000002 POWER_CLOCK_IRQHandler
000024e4 g       .ARM.exidx	00000000 __etext
00000144  w    F .text	00000002 RADIO_IRQHandler
00000c24 g     F .text	00000024 flash_area_write
200000f4 g       .bssnz	00000000 __bssnz_start__
00001b9c g     F .text	00000094 boot_swap_type
00000144  w    F .text	00000002 PDM_IRQHandler
00000ed2 g     F .text	00000006 mfg_read_tlv_flash_area
00000144  w    F .text	00000002 TEMP_IRQHandler
00000144  w    F .text	00000002 QDEC_IRQHandler
00000144  w    F .text	00000002 TIMER3_IRQHandler
000009cc g     F .text	00000006 timer_handler
00000b00 g     F .text	0000001a memcpy
00000640 g     F .text	00000070 hal_watchdog_init
000009c4 g     F .text	00000008 os_cputime_init
000022aa g     F .text	00000054 hal_flash_isempty
00000000 g       *ABS*	00000000 _imghdr_size
200000e4 g     O .data	00000004 SystemCoreClock
00000158 g     F .text	0000000c hal_system_init
00000144  w    F .text	00000002 SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
00000c00 g     F .text	00000024 flash_area_read
00000988 g     F .text	00000024 __assert_func
0000013c  w    F .text	00000002 UsageFault_Handler
00000144  w    F .text	00000002 UARTE0_UART0_IRQHandler
2000fe50 g       *ABS*	00000000 __HeapLimit
200000f4 g       .bss	00000000 __bss_start__
00000190 g     F .text	00000010 hal_debugger_connected
00002160 g     F .text	00000064 hal_flash_write
00000144  w    F .text	00000002 TIMER4_IRQHandler
00001962 g     F .text	0000001c boot_status_entries
20000114 g     O .bss	00000004 g_current_task
000009d2 g     F .text	0000000c os_arch_save_sr
00001b10 g     F .text	0000001c boot_write_magic
000024cc g       .text	00000000 __exidx_start
00000ed8 g     F .text	00000006 mfg_read_tlv_mmr_ref
000009f0 g     F .text	00000014 os_set_env
00000460 g     F .text	00000010 hal_bsp_flash_dev
000006b0 g     F .text	00000028 nrf52_periph_create
00000c6c g     F .text	00000006 flash_area_align
00000144  w    F .text	00000002 I2S_IRQHandler
00000426 g     F .text	00000002 _init
000019a4 g     F .text	00000006 boot_swap_type_off
000021c4 g     F .text	000000b8 hal_flash_erase
00001b4a g     F .text	00000050 boot_write_swap_size
00000144  w    F .text	00000002 SWI4_EGU4_IRQHandler
000011fc g     F .text	00000090 boot_write_status
00000144  w    F .text	00000002 TIMER0_IRQHandler
000000d8 g     F .text	0000005c Reset_Handler
00001a88 g     F .text	00000088 boot_read_swap_size
00000a86 g     F .text	0000001e os_default_irq_asm
00000ee0 g     F .text	00000048 mfg_init
00000148 g     F .text	00000010 _sbrkInit
200000f4 g       .bssnz	00000000 __bssnz_end__
00000ca8 g     F .text	0000009c flash_map_init
00000144  w    F .text	00000002 TIMER1_IRQHandler
20000000 g       .bss	00000000 _ram_start
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
00000144  w    F .text	00000002 PWM2_IRQHandler
200000f4 g       .data	00000000 __data_end__
00001fb2 g     F .text	00000106 mbedtls_sha256_finish_ret
00000144  w    F .text	00000002 ECB_IRQHandler
20000118 g     O .bss	00000004 g_os_time
20001928 g       .bss	00000000 __bss_end__
00000144  w    F .text	00000002 SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
00000144 g     F .text	00000002 Default_Handler
00000418 g     F .text	0000000e _start
00001b2c g     F .text	0000000a boot_write_copy_done
00000a04 g     F .text	00000006 os_arch_init_task_stack
000023a8 g     O .text	00000010 boot_img_magic
200000f0 g     O .data	00000004 sysinit_panic_cb
000009ac g     F .text	00000018 os_default_irq
00000c72 g     F .text	0000000a flash_area_erased_val
00000ab8 g     F .text	00000048 memcmp
000008b0 g     F .text	000000d8 hal_timer_config
00000b50 g     F .text	0000003c flash_area_open
00000144  w    F .text	00000002 SAADC_IRQHandler
00001a7a g     F .text	0000000e boot_read_swap_state_by_id
00000b1a g     F .text	00000036 memset
00000000 g       .text	000000d8 __isr_vector
00000428 g     F .text	00000036 main
00000144  w    F .text	00000002 CCM_AAR_IRQHandler
00000144  w    F .text	00000002 WDT_IRQHandler
00000a0a g     F .text	00000046 SVC_Handler
00002118 g     F .text	00000046 hal_flash_read
00000c48 g     F .text	00000024 flash_area_erase
00000144  w    F .text	00000002 SWI5_EGU5_IRQHandler
20000120 g     O .bss	00000004 flash_map_entries
00000000 g       .text	00000000 __text
00000e48 g     F .text	00000074 mfg_seek_next
00000c7c g     F .text	0000000e flash_area_read_is_empty
0000197e g     F .text	00000026 boot_status_off
0000023c g     F .text	000001dc SystemInit
00000144  w    F .text	00000002 RNG_IRQHandler
00002108 g     F .text	00000010 hal_flash_erased_val
00001c30 g     F .text	0000011c bootutil_img_validate
00000000 g       .svc_table	00000000 SVC_Table
00000144  w    F .text	00000002 RTC2_IRQHandler
20010000 g       .bss	00000000 __StackTop
00000144  w    F .text	00000002 PWM0_IRQHandler
00000144  w    F .text	00000002 SWI3_EGU3_IRQHandler
00000b8c g     F .text	00000074 flash_area_to_sectors
0000234c g     O .text	00000048 sysflash_map_dflt
200000f4 g     O .bss	0000001c nrf52_hal_timer0
000000d8 g       .text	00000000 __isr_vector_end
00000144  w    F .text	00000002 RTC1_IRQHandler
00000144  w    F .text	00000002 SWI1_EGU1_IRQHandler
00000f28 g     F .text	00000010 mfg_open
200000e8 g     O .data	00000008 g_os_run_list
00000480 g     F .text	00000028 NVIC_Relocate
20000110 g     O .bss	00000004 os_flags
00001b40 g     F .text	0000000a boot_write_swap_type
2000fe50 g       *ABS*	000001b0 __StackLimit
00001f38 g     F .text	0000007a mbedtls_sha256_update_ret
00000144  w    F .text	00000002 SPIM2_SPIS2_SPI2_IRQHandler
00000144  w    F .text	00000002 NFCT_IRQHandler
000004a8 g     F .text	00000006 _exit
000001a0 g     F .text	0000003c hal_system_clock_start
0000013a  w    F .text	00000002 BusFault_Handler
000009e0 g     F .text	00000010 os_time_advance
000020d4 g     F .text	00000024 hal_flash_init
00000144  w    F .text	00000002 MWU_IRQHandler
00000138  w    F .text	00000002 MemoryManagement_Handler
00000144  w    F .text	00000002 COMP_LPCOMP_IRQHandler
00000470 g     F .text	0000000e hal_bsp_init
00001958 g     F .text	0000000a boot_trailer_sz
00001b36 g     F .text	0000000a boot_write_image_ok
00001d54 g     F .text	000000a4 mbedtls_sha256_starts_ret



Disassembly of section .text:

00000000 <__isr_vector>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
       0:	20010000 	.word	0x20010000
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
       4:	000000d9 	.word	0x000000d9
{
       8:	00000135 	.word	0x00000135
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
       c:	00000137 	.word	0x00000137
	...
    t->t_state = OS_TASK_SLEEP;
    t->t_next_wakeup = os_time_get() + nticks;
    if (nticks == OS_TIMEOUT_NEVER) {
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
      2c:	00000a0b 	.word	0x00000a0b
	...
            }
        }
        if (entry) {
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
        } else {
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
      38:	00000a51 	.word	0x00000a51
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
      3c:	00000a7b 	.word	0x00000a7b
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
      40:	00000145 	.word	0x00000145
      44:	00000145 	.word	0x00000145
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
      48:	00000145 	.word	0x00000145
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
      4c:	00000145 	.word	0x00000145
      50:	00000145 	.word	0x00000145
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
      54:	00000145 	.word	0x00000145
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
      58:	00000145 	.word	0x00000145
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
      5c:	00000145 	.word	0x00000145
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
      60:	00000145 	.word	0x00000145
      64:	00000145 	.word	0x00000145
      68:	00000145 	.word	0x00000145
    return (0);
      6c:	00000145 	.word	0x00000145
      70:	00000145 	.word	0x00000145
      74:	00000145 	.word	0x00000145
      78:	00000145 	.word	0x00000145
      7c:	00000145 	.word	0x00000145
      80:	00000145 	.word	0x00000145
      84:	00000145 	.word	0x00000145
      88:	00000145 	.word	0x00000145
      8c:	00000145 	.word	0x00000145
      90:	00000145 	.word	0x00000145
      94:	00000145 	.word	0x00000145
      98:	00000145 	.word	0x00000145
      9c:	00000145 	.word	0x00000145
      a0:	00000145 	.word	0x00000145
      a4:	00000145 	.word	0x00000145
      a8:	00000145 	.word	0x00000145
      ac:	00000145 	.word	0x00000145
      b0:	00000145 	.word	0x00000145
      b4:	00000145 	.word	0x00000145
	...
      c0:	00000145 	.word	0x00000145
      c4:	00000145 	.word	0x00000145
      c8:	00000145 	.word	0x00000145
      cc:	00000145 	.word	0x00000145
      d0:	00000145 	.word	0x00000145
      d4:	00000145 	.word	0x00000145

000000d8 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
      d8:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
      dc:	4a0c      	ldr	r2, [pc, #48]	; (110 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
      de:	4b0d      	ldr	r3, [pc, #52]	; (114 <.bss_zero_loop+0x34>)

000000e0 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
      e0:	429a      	cmp	r2, r3
    itt     lt
      e2:	bfbc      	itt	lt
    strlt   r0, [r2], #4
      e4:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
      e8:	e7fa      	blt.n	e0 <.bss_zero_loop>
 *      of copy from/to are specified by following symbols evaluated in
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */
    ldr    r1, =__etext
      ea:	490b      	ldr	r1, [pc, #44]	; (118 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
      ec:	4a0b      	ldr	r2, [pc, #44]	; (11c <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
      ee:	4b0c      	ldr	r3, [pc, #48]	; (120 <.bss_zero_loop+0x40>)

    subs    r3, r2
      f0:	1a9b      	subs	r3, r3, r2
    ble     .LC0
      f2:	dd03      	ble.n	fc <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
      f4:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
      f6:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
      f8:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
      fa:	dcfb      	bgt.n	f4 <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
      fc:	4809      	ldr	r0, [pc, #36]	; (124 <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
      fe:	490a      	ldr	r1, [pc, #40]	; (128 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
     100:	f000 f822 	bl	148 <_sbrkInit>

    LDR     R0, =SystemInit
     104:	4809      	ldr	r0, [pc, #36]	; (12c <.bss_zero_loop+0x4c>)
    BLX     R0
     106:	4780      	blx	r0

    BL      hal_system_init
     108:	f000 f826 	bl	158 <hal_system_init>

    LDR     R0, =_start
     10c:	4808      	ldr	r0, [pc, #32]	; (130 <.bss_zero_loop+0x50>)
    BX      R0
     10e:	4700      	bx	r0
    ldr     r2, =__bss_start__
     110:	200000f4 	.word	0x200000f4
    ldr     r3, =__bss_end__
     114:	20001928 	.word	0x20001928
    ldr    r1, =__etext
     118:	000024e4 	.word	0x000024e4
    ldr    r2, =__data_start__
     11c:	200000d8 	.word	0x200000d8
    ldr    r3, =__data_end__
     120:	200000f4 	.word	0x200000f4
    LDR     R0, =__HeapBase
     124:	20001928 	.word	0x20001928
    LDR     R1, =__HeapLimit
     128:	2000fe50 	.word	0x2000fe50
    LDR     R0, =SystemInit
     12c:	0000023d 	.word	0x0000023d
    LDR     R0, =_start
     130:	00000419 	.word	0x00000419

00000134 <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
     134:	e7fe      	b.n	134 <NMI_Handler>

00000136 <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
     136:	e7fe      	b.n	136 <HardFault_Handler>

00000138 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
     138:	e7fe      	b.n	138 <MemoryManagement_Handler>

0000013a <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
     13a:	e7fe      	b.n	13a <BusFault_Handler>

0000013c <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
     13c:	e7fe      	b.n	13c <UsageFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
     13e:	e7fe      	b.n	13e <UsageFault_Handler+0x2>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
     140:	e7fe      	b.n	140 <UsageFault_Handler+0x4>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
     142:	e7fe      	b.n	142 <UsageFault_Handler+0x6>

00000144 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
     144:	e7fe      	b.n	144 <Default_Handler>
     146:	bf00      	nop

00000148 <_sbrkInit>:
static char *sbrkLimit __attribute__ ((section (".data")));
static char *brk __attribute__ ((section (".data")));

void
_sbrkInit(char *base, char *limit) {
    sbrkBase = base;
     148:	4b02      	ldr	r3, [pc, #8]	; (154 <_sbrkInit+0xc>)
    sbrkLimit = limit;
     14a:	e9c3 0100 	strd	r0, r1, [r3]
    brk = base;
     14e:	6098      	str	r0, [r3, #8]
}
     150:	4770      	bx	lr
     152:	bf00      	nop
     154:	200000d8 	.word	0x200000d8

00000158 <hal_system_init>:
 */
void
hal_system_init(void)
{
#if MYNEWT_VAL(MCU_DCDC_ENABLED)
    NRF_POWER->DCDCEN = 1;
     158:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     15c:	2201      	movs	r2, #1
     15e:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
#endif
}
     162:	4770      	bx	lr

00000164 <hal_system_reset>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
     164:	4b08      	ldr	r3, [pc, #32]	; (188 <hal_system_reset+0x24>)
     166:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
        if (hal_debugger_connected()) {
     16a:	07d2      	lsls	r2, r2, #31
     16c:	d500      	bpl.n	170 <hal_system_reset+0xc>
            asm("bkpt");
     16e:	be00      	bkpt	0x0000
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     170:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     174:	68d9      	ldr	r1, [r3, #12]
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     176:	4a05      	ldr	r2, [pc, #20]	; (18c <hal_system_reset+0x28>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     178:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     17c:	430a      	orrs	r2, r1
     17e:	60da      	str	r2, [r3, #12]
     180:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     184:	bf00      	nop
  for(;;)                                                           /* wait until reset */
     186:	e7fd      	b.n	184 <hal_system_reset+0x20>
     188:	e000ed00 	.word	0xe000ed00
     18c:	05fa0004 	.word	0x05fa0004

00000190 <hal_debugger_connected>:
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
     190:	4b02      	ldr	r3, [pc, #8]	; (19c <hal_debugger_connected+0xc>)
     192:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
}
     196:	f000 0001 	and.w	r0, r0, #1
     19a:	4770      	bx	lr
     19c:	e000ed00 	.word	0xe000ed00

000001a0 <hal_system_clock_start>:
        }
    }
#endif

    /* Check if this clock source is already running */
    if ((NRF_CLOCK->LFCLKSTAT & regmsk) != regval) {
     1a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     1a4:	490c      	ldr	r1, [pc, #48]	; (1d8 <Stack_Size+0x28>)
     1a6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
     1aa:	400a      	ands	r2, r1
     1ac:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
     1b0:	d011      	beq.n	1d6 <Stack_Size+0x26>
        NRF_CLOCK->TASKS_LFCLKSTOP = 1;
     1b2:	2201      	movs	r2, #1
        NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
     1b4:	2000      	movs	r0, #0
        NRF_CLOCK->TASKS_LFCLKSTOP = 1;
     1b6:	60da      	str	r2, [r3, #12]
        NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
     1b8:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
        NRF_CLOCK->LFCLKSRC = clksrc;
     1bc:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
        NRF_CLOCK->TASKS_LFCLKSTART = 1;
     1c0:	609a      	str	r2, [r3, #8]

        /* Wait here till started! */
        while (1) {
            if (NRF_CLOCK->EVENTS_LFCLKSTARTED) {
     1c2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
     1c6:	2a00      	cmp	r2, #0
     1c8:	d0fb      	beq.n	1c2 <Stack_Size+0x12>
                if ((NRF_CLOCK->LFCLKSTAT & regmsk) == regval) {
     1ca:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
     1ce:	400a      	ands	r2, r1
     1d0:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
     1d4:	d1f5      	bne.n	1c2 <Stack_Size+0x12>
                }
            }
        }
    }
#endif
}
     1d6:	4770      	bx	lr
     1d8:	00010003 	.word	0x00010003

000001dc <errata_16>:
}

#ifdef NRF52
static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     1dc:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
     1e0:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
     1e4:	2a06      	cmp	r2, #6
     1e6:	d10c      	bne.n	202 <errata_16+0x26>
     1e8:	f8d3 2fe4 	ldr.w	r2, [r3, #4068]	; 0xfe4
     1ec:	0712      	lsls	r2, r2, #28
     1ee:	d108      	bne.n	202 <errata_16+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     1f0:	f8d3 0fe8 	ldr.w	r0, [r3, #4072]	; 0xfe8
     1f4:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
     1f8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
     1fc:	4258      	negs	r0, r3
     1fe:	4158      	adcs	r0, r3
     200:	4770      	bx	lr
            return true;
        }
    }

    return false;
     202:	2000      	movs	r0, #0
}
     204:	4770      	bx	lr

00000206 <errata_108>:

static bool errata_31(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     206:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
     20a:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
     20e:	2a06      	cmp	r2, #6
     210:	d110      	bne.n	234 <errata_108+0x2e>
     212:	f8d3 2fe4 	ldr.w	r2, [r3, #4068]	; 0xfe4
     216:	0712      	lsls	r2, r2, #28
     218:	d10c      	bne.n	234 <errata_108+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     21a:	f8d3 0fe8 	ldr.w	r0, [r3, #4072]	; 0xfe8
     21e:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
     222:	2b30      	cmp	r3, #48	; 0x30
     224:	d008      	beq.n	238 <errata_108+0x32>
            return true;
        }
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
     226:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
     22a:	f1a0 0340 	sub.w	r3, r0, #64	; 0x40
     22e:	4258      	negs	r0, r3
     230:	4158      	adcs	r0, r3
     232:	4770      	bx	lr
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
     234:	2000      	movs	r0, #0
     236:	4770      	bx	lr
            return true;
     238:	2001      	movs	r0, #1
}
     23a:	4770      	bx	lr

0000023c <SystemInit>:
{
     23c:	b508      	push	{r3, lr}
    if (errata_16()){
     23e:	f7ff ffcd 	bl	1dc <errata_16>
     242:	b110      	cbz	r0, 24a <SystemInit+0xe>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
     244:	4b6b      	ldr	r3, [pc, #428]	; (3f4 <SystemInit+0x1b8>)
     246:	4a6c      	ldr	r2, [pc, #432]	; (3f8 <SystemInit+0x1bc>)
     248:	675a      	str	r2, [r3, #116]	; 0x74
    if (errata_31()){
     24a:	f7ff ffdc 	bl	206 <errata_108>
     24e:	b148      	cbz	r0, 264 <SystemInit+0x28>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
     250:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     254:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     258:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
     25c:	f3c3 3342 	ubfx	r3, r3, #13, #3
     260:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    if (errata_32()){
     264:	f7ff ffba 	bl	1dc <errata_16>
     268:	b130      	cbz	r0, 278 <SystemInit+0x3c>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
     26a:	4a64      	ldr	r2, [pc, #400]	; (3fc <SystemInit+0x1c0>)
     26c:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
     270:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
     274:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    if (errata_36()){
     278:	f7ff ffc5 	bl	206 <errata_108>
     27c:	b140      	cbz	r0, 290 <SystemInit+0x54>
        NRF_CLOCK->EVENTS_DONE = 0;
     27e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     282:	2200      	movs	r2, #0
     284:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
     288:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
     28c:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
     290:	f7ff ffa4 	bl	1dc <errata_16>
     294:	b120      	cbz	r0, 2a0 <SystemInit+0x64>
        *(volatile uint32_t *)0x400005A0 = 0x3;
     296:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     29a:	2203      	movs	r2, #3
     29c:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    if (errata_57()){
     2a0:	f7ff ff9c 	bl	1dc <errata_16>
     2a4:	b160      	cbz	r0, 2c0 <SystemInit+0x84>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
     2a6:	4b56      	ldr	r3, [pc, #344]	; (400 <SystemInit+0x1c4>)
     2a8:	2205      	movs	r2, #5
     2aa:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
        *(volatile uint32_t *)0x40005688 = 0x00000001;
     2ae:	2201      	movs	r2, #1
     2b0:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
        *(volatile uint32_t *)0x40005618 = 0x00000000;
     2b4:	2200      	movs	r2, #0
     2b6:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
     2ba:	223f      	movs	r2, #63	; 0x3f
     2bc:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
    return false;
}

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     2c0:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
     2c4:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
     2c8:	2a06      	cmp	r2, #6
     2ca:	d150      	bne.n	36e <SystemInit+0x132>
     2cc:	f8d3 2fe4 	ldr.w	r2, [r3, #4068]	; 0xfe4
     2d0:	0712      	lsls	r2, r2, #28
     2d2:	d14c      	bne.n	36e <SystemInit+0x132>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
     2d4:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
     2d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     2dc:	2b50      	cmp	r3, #80	; 0x50
     2de:	d146      	bne.n	36e <SystemInit+0x132>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
     2e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     2e4:	4b47      	ldr	r3, [pc, #284]	; (404 <SystemInit+0x1c8>)
     2e6:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
     2ea:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
     2ee:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
     2f2:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
     2f6:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
     2fa:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
     2fe:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
     302:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
     306:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
     30a:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
     30e:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
     312:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
     316:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
     31a:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
     31e:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
     322:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
     326:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
     32a:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
     32e:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
     332:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
     336:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
     33a:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
     33e:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
     342:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
     346:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
     34a:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
     34e:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
     352:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
     356:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
     35a:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
     35e:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
     362:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
     366:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
     36a:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
     36e:	f7ff ff4a 	bl	206 <errata_108>
     372:	b148      	cbz	r0, 388 <SystemInit+0x14c>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
     374:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     378:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     37c:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
     380:	f003 034f 	and.w	r3, r3, #79	; 0x4f
     384:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
     388:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     38c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
     390:	07db      	lsls	r3, r3, #31
     392:	d528      	bpl.n	3e6 <SystemInit+0x1aa>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     394:	4b1c      	ldr	r3, [pc, #112]	; (408 <SystemInit+0x1cc>)
     396:	2201      	movs	r2, #1
     398:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     39c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     3a0:	2a00      	cmp	r2, #0
     3a2:	d0fb      	beq.n	39c <SystemInit+0x160>
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
     3a4:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     3a8:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
     3ac:	f023 0301 	bic.w	r3, r3, #1
     3b0:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     3b4:	4b14      	ldr	r3, [pc, #80]	; (408 <SystemInit+0x1cc>)
     3b6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     3ba:	2a00      	cmp	r2, #0
     3bc:	d0fb      	beq.n	3b6 <SystemInit+0x17a>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     3be:	2200      	movs	r2, #0
     3c0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     3c4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     3c8:	2a00      	cmp	r2, #0
     3ca:	d0fb      	beq.n	3c4 <SystemInit+0x188>
     3cc:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     3d0:	490a      	ldr	r1, [pc, #40]	; (3fc <SystemInit+0x1c0>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     3d2:	4b0e      	ldr	r3, [pc, #56]	; (40c <SystemInit+0x1d0>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     3d4:	68ca      	ldr	r2, [r1, #12]
     3d6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     3da:	4313      	orrs	r3, r2
     3dc:	60cb      	str	r3, [r1, #12]
     3de:	f3bf 8f4f 	dsb	sy
    __NOP();
     3e2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
     3e4:	e7fd      	b.n	3e2 <SystemInit+0x1a6>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
     3e6:	4b0a      	ldr	r3, [pc, #40]	; (410 <SystemInit+0x1d4>)
     3e8:	4a0a      	ldr	r2, [pc, #40]	; (414 <SystemInit+0x1d8>)
     3ea:	601a      	str	r2, [r3, #0]
}
     3ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    NVIC_Relocate();
     3f0:	f000 b846 	b.w	480 <NVIC_Relocate>
     3f4:	4007c000 	.word	0x4007c000
     3f8:	baadf00d 	.word	0xbaadf00d
     3fc:	e000ed00 	.word	0xe000ed00
     400:	40005000 	.word	0x40005000
     404:	4000c000 	.word	0x4000c000
     408:	4001e000 	.word	0x4001e000
     40c:	05fa0004 	.word	0x05fa0004
     410:	200000e4 	.word	0x200000e4
     414:	03d09000 	.word	0x03d09000

00000418 <_start>:
void _start(void)
{
#if !MYNEWT_VAL(OS_SCHEDULING)
    int rc;

    rc = main(0, NULL);
     418:	2100      	movs	r1, #0
{
     41a:	b508      	push	{r3, lr}
    rc = main(0, NULL);
     41c:	4608      	mov	r0, r1
     41e:	f000 f803 	bl	428 <main>
#define EXIT_SUCCESS	0
#define EXIT_FAILURE	1
__extern void _exit(int s);
__extern_inline void exit(int err)
{
	_exit(err);
     422:	f000 f841 	bl	4a8 <_exit>

00000426 <_init>:
}

void
_init(void)
{
}
     426:	4770      	bx	lr

00000428 <main>:
    return 0;
}

int
main(void)
{
     428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    struct boot_rsp rsp;
    uintptr_t flash_base;
    int rc;

    hal_bsp_init();
     42a:	f000 f821 	bl	470 <hal_bsp_init>

#if !MYNEWT_VAL(OS_SCHEDULING) && MYNEWT_VAL(WATCHDOG_INTERVAL)
    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
     42e:	f247 5030 	movw	r0, #30000	; 0x7530
     432:	f000 f905 	bl	640 <hal_watchdog_init>
    assert(rc == 0);
     436:	b128      	cbz	r0, 444 <main+0x1c>
     438:	2300      	movs	r3, #0
     43a:	461a      	mov	r2, r3
     43c:	4619      	mov	r1, r3
     43e:	4618      	mov	r0, r3
     440:	f000 faa2 	bl	988 <__assert_func>
#if defined(MCUBOOT_SERIAL)
    serial_boot_detect();
    hal_timer_deinit(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
#endif
#else
    flash_map_init();
     444:	f000 fc30 	bl	ca8 <flash_map_init>
#endif

    rc = boot_go(&rsp);
     448:	a801      	add	r0, sp, #4
     44a:	f001 f8ab 	bl	15a4 <boot_go>
    assert(rc == 0);
     44e:	2800      	cmp	r0, #0
     450:	d1f2      	bne.n	438 <main+0x10>

    rc = flash_device_base(rsp.br_flash_dev_id, &flash_base);
    assert(rc == 0);

    hal_system_start((void *)(flash_base + rsp.br_image_off +
                              rsp.br_hdr->ih_hdr_size));
     452:	9b01      	ldr	r3, [sp, #4]
     454:	8918      	ldrh	r0, [r3, #8]
    hal_system_start((void *)(flash_base + rsp.br_image_off +
     456:	9b03      	ldr	r3, [sp, #12]
     458:	4418      	add	r0, r3
     45a:	f000 f8da 	bl	612 <hal_system_start>
	...

00000460 <hal_bsp_flash_dev>:
    case 0:
        /* MCU internal flash. */
        return &nrf52k_flash_dev;
    default:
        /* External flash.  Assume not present in this BSP. */
        return NULL;
     460:	2800      	cmp	r0, #0
    }
}
     462:	4802      	ldr	r0, [pc, #8]	; (46c <hal_bsp_flash_dev+0xc>)
     464:	bf18      	it	ne
     466:	2000      	movne	r0, #0
     468:	4770      	bx	lr
     46a:	bf00      	nop
     46c:	00002300 	.word	0x00002300

00000470 <hal_bsp_init>:
}


void
hal_bsp_init(void)
{
     470:	b508      	push	{r3, lr}
    int rc;

    (void)rc;

    /* Make sure system clocks have started */
    hal_system_clock_start();
     472:	f7ff fe95 	bl	1a0 <hal_system_clock_start>
    dw1000_0 = hal_dw1000_inst(0);
    rc = os_dev_create((struct os_dev *) dw1000_0, "dw1000_0",
      OS_DEV_INIT_PRIMARY, 0, dw1000_dev_init, (void *)&dw1000_0_cfg);
    assert(rc == 0);
#endif
}
     476:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf52_periph_create();
     47a:	f000 b919 	b.w	6b0 <nrf52_periph_create>
	...

00000480 <NVIC_Relocate>:
extern char __isr_vector[];
extern char __vector_tbl_reloc__[];

void
NVIC_Relocate(void)
{
     480:	b508      	push	{r3, lr}
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
     482:	4906      	ldr	r1, [pc, #24]	; (49c <NVIC_Relocate+0x1c>)
     484:	4b06      	ldr	r3, [pc, #24]	; (4a0 <NVIC_Relocate+0x20>)
     486:	428b      	cmp	r3, r1
     488:	d004      	beq.n	494 <NVIC_Relocate+0x14>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
            new_location[i] = current_location[i];
     48a:	4618      	mov	r0, r3
     48c:	22d8      	movs	r2, #216	; 0xd8
     48e:	f000 fb37 	bl	b00 <memcpy>
     492:	4603      	mov	r3, r0
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
     494:	4a03      	ldr	r2, [pc, #12]	; (4a4 <NVIC_Relocate+0x24>)
     496:	6093      	str	r3, [r2, #8]
#endif
}
     498:	bd08      	pop	{r3, pc}
     49a:	bf00      	nop
     49c:	00000000 	.word	0x00000000
     4a0:	20000000 	.word	0x20000000
     4a4:	e000ed00 	.word	0xe000ed00

000004a8 <_exit>:

void _exit(int status);

void
_exit(int status)
{
     4a8:	b508      	push	{r3, lr}
    hal_system_reset();
     4aa:	f7ff fe5b 	bl	164 <hal_system_reset>
	...

000004b0 <nrf52k_flash_wait_ready>:

#define NRF52K_FLASH_READY() (NRF_NVMC->READY == NVMC_READY_READY_Ready)

static int
nrf52k_flash_wait_ready(void)
{
     4b0:	4b06      	ldr	r3, [pc, #24]	; (4cc <nrf52k_flash_wait_ready+0x1c>)
    int i;

    for (i = 0; i < 100000; i++) {
        if (NRF_NVMC->READY == NVMC_READY_READY_Ready) {
     4b2:	4a07      	ldr	r2, [pc, #28]	; (4d0 <nrf52k_flash_wait_ready+0x20>)
     4b4:	f8d2 1400 	ldr.w	r1, [r2, #1024]	; 0x400
     4b8:	2901      	cmp	r1, #1
     4ba:	d004      	beq.n	4c6 <nrf52k_flash_wait_ready+0x16>
    for (i = 0; i < 100000; i++) {
     4bc:	3b01      	subs	r3, #1
     4be:	d1f9      	bne.n	4b4 <nrf52k_flash_wait_ready+0x4>
            return 0;
        }
    }
    return -1;
     4c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     4c4:	4770      	bx	lr
            return 0;
     4c6:	2000      	movs	r0, #0
}
     4c8:	4770      	bx	lr
     4ca:	bf00      	nop
     4cc:	000186a0 	.word	0x000186a0
     4d0:	4001e000 	.word	0x4001e000

000004d4 <nrf52k_flash_erase_sector>:
    return rc;
}

static int
nrf52k_flash_erase_sector(const struct hal_flash *dev, uint32_t sector_address)
{
     4d4:	b570      	push	{r4, r5, r6, lr}
     4d6:	460d      	mov	r5, r1
    int sr;
    int rc = -1;

    if (nrf52k_flash_wait_ready()) {
     4d8:	f7ff ffea 	bl	4b0 <nrf52k_flash_wait_ready>
     4dc:	b9d0      	cbnz	r0, 514 <nrf52k_flash_erase_sector+0x40>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     4de:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
     4e2:	b672      	cpsid	i
        return -1;
    }
    __HAL_DISABLE_INTERRUPTS(sr);
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Een; /* Enable erase OP */
     4e4:	4c0d      	ldr	r4, [pc, #52]	; (51c <nrf52k_flash_erase_sector+0x48>)
     4e6:	2302      	movs	r3, #2
     4e8:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    if (nrf52k_flash_wait_ready()) {
     4ec:	f7ff ffe0 	bl	4b0 <nrf52k_flash_wait_ready>
     4f0:	b968      	cbnz	r0, 50e <nrf52k_flash_erase_sector+0x3a>
        goto out;
    }

    NRF_NVMC->ERASEPAGE = sector_address;
     4f2:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    if (nrf52k_flash_wait_ready()) {
     4f6:	f7ff ffdb 	bl	4b0 <nrf52k_flash_wait_ready>
     4fa:	3800      	subs	r0, #0
     4fc:	bf18      	it	ne
     4fe:	2001      	movne	r0, #1
     500:	4240      	negs	r0, r0
        goto out;
    }
    rc = 0;
out:
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren; /* Disable erase OP */
     502:	2300      	movs	r3, #0
     504:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
     508:	b906      	cbnz	r6, 50c <nrf52k_flash_erase_sector+0x38>
  __ASM volatile ("cpsie i" : : : "memory");
     50a:	b662      	cpsie	i
    return rc;
}
     50c:	bd70      	pop	{r4, r5, r6, pc}
    int rc = -1;
     50e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     512:	e7f6      	b.n	502 <nrf52k_flash_erase_sector+0x2e>
        return -1;
     514:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     518:	e7f8      	b.n	50c <nrf52k_flash_erase_sector+0x38>
     51a:	bf00      	nop
     51c:	4001e000 	.word	0x4001e000

00000520 <nrf52k_flash_init>:

static int
nrf52k_flash_init(const struct hal_flash *dev)
{
    return 0;
}
     520:	2000      	movs	r0, #0
     522:	4770      	bx	lr

00000524 <nrf52k_flash_write>:
{
     524:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
     528:	460c      	mov	r4, r1
     52a:	4616      	mov	r6, r2
     52c:	461d      	mov	r5, r3
    if (nrf52k_flash_wait_ready()) {
     52e:	f7ff ffbf 	bl	4b0 <nrf52k_flash_wait_ready>
     532:	2800      	cmp	r0, #0
     534:	d151      	bne.n	5da <nrf52k_flash_write+0xb6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     536:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
     53a:	b672      	cpsid	i
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen; /* Enable erase OP */
     53c:	4b28      	ldr	r3, [pc, #160]	; (5e0 <nrf52k_flash_write+0xbc>)
     53e:	2201      	movs	r2, #1
    if (tmp) {
     540:	f014 0a03 	ands.w	sl, r4, #3
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen; /* Enable erase OP */
     544:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (tmp) {
     548:	d026      	beq.n	598 <nrf52k_flash_write+0x74>
        if (nrf52k_flash_wait_ready()) {
     54a:	f7ff ffb1 	bl	4b0 <nrf52k_flash_wait_ready>
     54e:	b160      	cbz	r0, 56a <nrf52k_flash_write+0x46>
    int rc = -1;
     550:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren;
     554:	4b22      	ldr	r3, [pc, #136]	; (5e0 <nrf52k_flash_write+0xbc>)
     556:	2200      	movs	r2, #0
     558:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
     55c:	f1b8 0f00 	cmp.w	r8, #0
     560:	d100      	bne.n	564 <nrf52k_flash_write+0x40>
  __ASM volatile ("cpsie i" : : : "memory");
     562:	b662      	cpsie	i
}
     564:	b002      	add	sp, #8
     566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        val = *(uint32_t *)(address & ~0x3);
     56a:	f024 0903 	bic.w	r9, r4, #3
        cnt = 4 - tmp;
     56e:	f1ca 0704 	rsb	r7, sl, #4
        val = *(uint32_t *)(address & ~0x3);
     572:	f8d9 3000 	ldr.w	r3, [r9]
     576:	9301      	str	r3, [sp, #4]
        if (cnt > num_bytes) {
     578:	42af      	cmp	r7, r5
     57a:	bf28      	it	cs
     57c:	462f      	movcs	r7, r5
        memcpy((uint8_t *)&val + tmp, src, cnt);
     57e:	ab01      	add	r3, sp, #4
     580:	4631      	mov	r1, r6
     582:	eb03 000a 	add.w	r0, r3, sl
     586:	463a      	mov	r2, r7
     588:	f000 faba 	bl	b00 <memcpy>
        *(uint32_t *)(address & ~0x3) = val;
     58c:	9b01      	ldr	r3, [sp, #4]
     58e:	f8c9 3000 	str.w	r3, [r9]
        address += cnt;
     592:	443c      	add	r4, r7
        num_bytes -= cnt;
     594:	1bed      	subs	r5, r5, r7
        src += cnt;
     596:	443e      	add	r6, r7
    while (num_bytes >= sizeof(uint32_t)) {
     598:	2d03      	cmp	r5, #3
     59a:	d814      	bhi.n	5c6 <nrf52k_flash_write+0xa2>
    if (num_bytes) {
     59c:	b165      	cbz	r5, 5b8 <nrf52k_flash_write+0x94>
        val = *(uint32_t *)address;
     59e:	6823      	ldr	r3, [r4, #0]
     5a0:	9301      	str	r3, [sp, #4]
        memcpy(&val, src, num_bytes);
     5a2:	462a      	mov	r2, r5
     5a4:	4631      	mov	r1, r6
     5a6:	a801      	add	r0, sp, #4
     5a8:	f000 faaa 	bl	b00 <memcpy>
        if (nrf52k_flash_wait_ready()) {
     5ac:	f7ff ff80 	bl	4b0 <nrf52k_flash_wait_ready>
     5b0:	2800      	cmp	r0, #0
     5b2:	d1cd      	bne.n	550 <nrf52k_flash_write+0x2c>
        *(uint32_t *)address = val;
     5b4:	9b01      	ldr	r3, [sp, #4]
     5b6:	6023      	str	r3, [r4, #0]
    if (nrf52k_flash_wait_ready()) {
     5b8:	f7ff ff7a 	bl	4b0 <nrf52k_flash_wait_ready>
     5bc:	3800      	subs	r0, #0
     5be:	bf18      	it	ne
     5c0:	2001      	movne	r0, #1
     5c2:	4240      	negs	r0, r0
out:
     5c4:	e7c6      	b.n	554 <nrf52k_flash_write+0x30>
        if (nrf52k_flash_wait_ready()) {
     5c6:	f7ff ff73 	bl	4b0 <nrf52k_flash_wait_ready>
     5ca:	2800      	cmp	r0, #0
     5cc:	d1c0      	bne.n	550 <nrf52k_flash_write+0x2c>
        *(uint32_t *)address = *(uint32_t *)src;
     5ce:	f856 3b04 	ldr.w	r3, [r6], #4
     5d2:	f844 3b04 	str.w	r3, [r4], #4
        num_bytes -= sizeof(uint32_t);
     5d6:	3d04      	subs	r5, #4
     5d8:	e7de      	b.n	598 <nrf52k_flash_write+0x74>
        return -1;
     5da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     5de:	e7c1      	b.n	564 <nrf52k_flash_write+0x40>
     5e0:	4001e000 	.word	0x4001e000

000005e4 <nrf52k_flash_read>:
{
     5e4:	b508      	push	{r3, lr}
     5e6:	4610      	mov	r0, r2
    memcpy(dst, (void *)address, num_bytes);
     5e8:	461a      	mov	r2, r3
     5ea:	f000 fa89 	bl	b00 <memcpy>
}
     5ee:	2000      	movs	r0, #0
     5f0:	bd08      	pop	{r3, pc}

000005f2 <nrf52k_flash_sector_info>:
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
     5f2:	297f      	cmp	r1, #127	; 0x7f
{
     5f4:	b508      	push	{r3, lr}
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
     5f6:	dd05      	ble.n	604 <nrf52k_flash_sector_info+0x12>
     5f8:	2300      	movs	r3, #0
     5fa:	461a      	mov	r2, r3
     5fc:	4619      	mov	r1, r3
     5fe:	4618      	mov	r0, r3
     600:	f000 f9c2 	bl	988 <__assert_func>
    *address = idx * NRF52K_FLASH_SECTOR_SZ;
     604:	0309      	lsls	r1, r1, #12
     606:	6011      	str	r1, [r2, #0]
    *sz = NRF52K_FLASH_SECTOR_SZ;
     608:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     60c:	601a      	str	r2, [r3, #0]
}
     60e:	2000      	movs	r0, #0
     610:	bd08      	pop	{r3, pc}

00000612 <hal_system_start>:
void __attribute__((naked))
hal_system_start(void *img_start)
{
    uint32_t *img_data = img_start;

    asm volatile (".syntax unified        \n"
     612:	e9d0 3200 	ldrd	r3, r2, [r0]
     616:	f383 8808 	msr	MSP, r3
     61a:	4710      	bx	r2

0000061c <nrf52_wdt_irq_handler>:
/**@brief WDT interrupt handler. */
static void
nrf52_wdt_irq_handler(void)
{
    os_trace_isr_enter();
    if (NRF_WDT->INTENSET & WDT_INTENSET_TIMEOUT_Msk) {
     61c:	4a07      	ldr	r2, [pc, #28]	; (63c <nrf52_wdt_irq_handler+0x20>)
{
     61e:	b508      	push	{r3, lr}
    if (NRF_WDT->INTENSET & WDT_INTENSET_TIMEOUT_Msk) {
     620:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
     624:	07db      	lsls	r3, r3, #31
     626:	d507      	bpl.n	638 <nrf52_wdt_irq_handler+0x1c>
        NRF_WDT->EVENTS_TIMEOUT = 0;
     628:	2300      	movs	r3, #0
     62a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    assert(0);
     62e:	4619      	mov	r1, r3
     630:	461a      	mov	r2, r3
     632:	4618      	mov	r0, r3
     634:	f000 f9a8 	bl	988 <__assert_func>
        nrf52_hal_wdt_default_handler();
    }
    os_trace_isr_exit();
}
     638:	bd08      	pop	{r3, pc}
     63a:	bf00      	nop
     63c:	40010000 	.word	0x40010000

00000640 <hal_watchdog_init>:

int
hal_watchdog_init(uint32_t expire_msecs)
{
    NRF_WDT->CONFIG = WDT_CONFIG_SLEEP_Msk;
     640:	4a16      	ldr	r2, [pc, #88]	; (69c <hal_watchdog_init+0x5c>)
{
     642:	b508      	push	{r3, lr}
    NRF_WDT->CONFIG = WDT_CONFIG_SLEEP_Msk;
     644:	2301      	movs	r3, #1
     646:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c

    if (expire_msecs >= 44739243) {
     64a:	4b15      	ldr	r3, [pc, #84]	; (6a0 <hal_watchdog_init+0x60>)
     64c:	4298      	cmp	r0, r3
     64e:	d905      	bls.n	65c <hal_watchdog_init+0x1c>
        /* maximum allowed time is near 12.5 hours! */
        assert(0);
     650:	2300      	movs	r3, #0
     652:	461a      	mov	r2, r3
     654:	4619      	mov	r1, r3
     656:	4618      	mov	r0, r3
     658:	f000 f996 	bl	988 <__assert_func>
    } else {
        NRF_WDT->CRV = (expire_msecs * 32) + ((expire_msecs * 96) / 125);
     65c:	2360      	movs	r3, #96	; 0x60
     65e:	4343      	muls	r3, r0
     660:	217d      	movs	r1, #125	; 0x7d
     662:	fbb3 f3f1 	udiv	r3, r3, r1
     666:	eb03 1040 	add.w	r0, r3, r0, lsl #5
  uint32_t vectors = (uint32_t )SCB->VTOR;
     66a:	4b0e      	ldr	r3, [pc, #56]	; (6a4 <hal_watchdog_init+0x64>)
     66c:	f8c2 0504 	str.w	r0, [r2, #1284]	; 0x504
     670:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
     672:	490d      	ldr	r1, [pc, #52]	; (6a8 <hal_watchdog_init+0x68>)
     674:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     678:	4b0c      	ldr	r3, [pc, #48]	; (6ac <hal_watchdog_init+0x6c>)
     67a:	21e0      	movs	r1, #224	; 0xe0
     67c:	f883 1310 	strb.w	r1, [r3, #784]	; 0x310
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     680:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     684:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     688:	6019      	str	r1, [r3, #0]

    NVIC_SetVector(WDT_IRQn, (uint32_t) nrf52_wdt_irq_handler);
    NVIC_SetPriority(WDT_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_ClearPendingIRQ(WDT_IRQn);
    NVIC_EnableIRQ(WDT_IRQn);
    NRF_WDT->RREN |= 0x1;
     68a:	f8d2 3508 	ldr.w	r3, [r2, #1288]	; 0x508
     68e:	f043 0301 	orr.w	r3, r3, #1
     692:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508

    return (0);
}
     696:	2000      	movs	r0, #0
     698:	bd08      	pop	{r3, pc}
     69a:	bf00      	nop
     69c:	40010000 	.word	0x40010000
     6a0:	02aaaaaa 	.word	0x02aaaaaa
     6a4:	e000ed00 	.word	0xe000ed00
     6a8:	0000061d 	.word	0x0000061d
     6ac:	e000e100 	.word	0xe000e100

000006b0 <nrf52_periph_create>:
    int rc;

    (void)rc;

#if MYNEWT_VAL(TIMER_0)
    rc = hal_timer_init(0, NULL);
     6b0:	2100      	movs	r1, #0
#endif
}

void
nrf52_periph_create(void)
{
     6b2:	b508      	push	{r3, lr}
    rc = hal_timer_init(0, NULL);
     6b4:	4608      	mov	r0, r1
     6b6:	f000 f8cf 	bl	858 <hal_timer_init>
    assert(rc == 0);
     6ba:	b128      	cbz	r0, 6c8 <nrf52_periph_create+0x18>
     6bc:	2300      	movs	r3, #0
     6be:	461a      	mov	r2, r3
     6c0:	4619      	mov	r1, r3
     6c2:	4618      	mov	r0, r3
     6c4:	f000 f960 	bl	988 <__assert_func>
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
     6c8:	4802      	ldr	r0, [pc, #8]	; (6d4 <nrf52_periph_create+0x24>)
     6ca:	f000 f97b 	bl	9c4 <os_cputime_init>
    assert(rc == 0);
     6ce:	2800      	cmp	r0, #0
     6d0:	d1f4      	bne.n	6bc <nrf52_periph_create+0xc>
    nrf52_periph_create_trng();
    nrf52_periph_create_crypto();
    nrf52_periph_create_uart();
    nrf52_periph_create_i2c();
    nrf52_periph_create_spi();
}
     6d2:	bd08      	pop	{r3, pc}
     6d4:	000f4240 	.word	0x000f4240

000006d8 <__NVIC_SetPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
     6d8:	2800      	cmp	r0, #0
     6da:	db09      	blt.n	6f0 <__NVIC_SetPendingIRQ+0x18>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     6dc:	0943      	lsrs	r3, r0, #5
     6de:	2201      	movs	r2, #1
     6e0:	f000 001f 	and.w	r0, r0, #31
     6e4:	fa02 f000 	lsl.w	r0, r2, r0
     6e8:	3340      	adds	r3, #64	; 0x40
     6ea:	4a02      	ldr	r2, [pc, #8]	; (6f4 <__NVIC_SetPendingIRQ+0x1c>)
     6ec:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
     6f0:	4770      	bx	lr
     6f2:	bf00      	nop
     6f4:	e000e100 	.word	0xe000e100

000006f8 <hal_timer_read_bsptimer>:
    rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
}

static uint32_t
hal_timer_read_bsptimer(struct nrf52_hal_timer *bsptimer)
{
     6f8:	b538      	push	{r3, r4, r5, lr}
    uint32_t low32;
    uint32_t ctx;
    uint32_t tcntr;
    NRF_RTC_Type *rtctimer;

    rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
     6fa:	6903      	ldr	r3, [r0, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     6fc:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
     700:	b672      	cpsid	i
    __HAL_DISABLE_INTERRUPTS(ctx);
    tcntr = bsptimer->tmr_cntr;
    low32 = rtctimer->COUNTER;
     702:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    if (rtctimer->EVENTS_OVRFLW) {
     706:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    tcntr = bsptimer->tmr_cntr;
     70a:	6844      	ldr	r4, [r0, #4]
    if (rtctimer->EVENTS_OVRFLW) {
     70c:	b15a      	cbz	r2, 726 <hal_timer_read_bsptimer+0x2e>
        tcntr += (1UL << 24);
     70e:	f104 7480 	add.w	r4, r4, #16777216	; 0x1000000
        bsptimer->tmr_cntr = tcntr;
        low32 = rtctimer->COUNTER;
        rtctimer->EVENTS_OVRFLW = 0;
     712:	2200      	movs	r2, #0
        bsptimer->tmr_cntr = tcntr;
     714:	6044      	str	r4, [r0, #4]
        low32 = rtctimer->COUNTER;
     716:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
        rtctimer->EVENTS_OVRFLW = 0;
     71a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
     71e:	f990 0001 	ldrsb.w	r0, [r0, #1]
     722:	f7ff ffd9 	bl	6d8 <__NVIC_SetPendingIRQ>
    }
    tcntr |= low32;
     726:	ea41 0004 	orr.w	r0, r1, r4
    __HAL_ENABLE_INTERRUPTS(ctx);
     72a:	b905      	cbnz	r5, 72e <hal_timer_read_bsptimer+0x36>
  __ASM volatile ("cpsie i" : : : "memory");
     72c:	b662      	cpsie	i

    return tcntr;
}
     72e:	bd38      	pop	{r3, r4, r5, pc}

00000730 <nrf_timer_set_ocmp>:
{
     730:	b430      	push	{r4, r5}
    if (bsptimer->tmr_rtc) {
     732:	7884      	ldrb	r4, [r0, #2]
        rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
     734:	6903      	ldr	r3, [r0, #16]
    if (bsptimer->tmr_rtc) {
     736:	b344      	cbz	r4, 78a <nrf_timer_set_ocmp+0x5a>
        rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
     738:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     73c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        cntr = rtctimer->COUNTER;
     740:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
        if (rtctimer->EVENTS_OVRFLW) {
     744:	f8d3 5104 	ldr.w	r5, [r3, #260]	; 0x104
        temp = bsptimer->tmr_cntr;
     748:	6842      	ldr	r2, [r0, #4]
        if (rtctimer->EVENTS_OVRFLW) {
     74a:	b11d      	cbz	r5, 754 <nrf_timer_set_ocmp+0x24>
            cntr = rtctimer->COUNTER;
     74c:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
            temp += (1UL << 24);
     750:	f102 7280 	add.w	r2, r2, #16777216	; 0x1000000
        temp |= cntr;
     754:	4322      	orrs	r2, r4
        delta_t = (int32_t)(expiry - temp);
     756:	1a8a      	subs	r2, r1, r2
        if (delta_t < 3) {
     758:	2a02      	cmp	r2, #2
     75a:	dc04      	bgt.n	766 <nrf_timer_set_ocmp+0x36>
}
     75c:	bc30      	pop	{r4, r5}
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
     75e:	f990 0001 	ldrsb.w	r0, [r0, #1]
     762:	f7ff bfb9 	b.w	6d8 <__NVIC_SetPendingIRQ>
            if (delta_t < (1UL << 24)) {
     766:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = expiry & 0x00ffffff;
     76a:	bf34      	ite	cc
     76c:	f021 417f 	biccc.w	r1, r1, #4278190080	; 0xff000000
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
     770:	f504 0400 	addcs.w	r4, r4, #8388608	; 0x800000
            rtctimer->INTENSET = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
     774:	f44f 2280 	mov.w	r2, #262144	; 0x40000
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = expiry & 0x00ffffff;
     778:	bf34      	ite	cc
     77a:	f8c3 1548 	strcc.w	r1, [r3, #1352]	; 0x548
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
     77e:	f8c3 4548 	strcs.w	r4, [r3, #1352]	; 0x548
            rtctimer->INTENSET = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
     782:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
     786:	bc30      	pop	{r4, r5}
     788:	4770      	bx	lr
        hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
     78a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
     78e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        hwtimer->CC[NRF_TIMER_CC_INT] = expiry;
     792:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
     796:	f8c3 414c 	str.w	r4, [r3, #332]	; 0x14c
        hwtimer->INTENSET = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
     79a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
     79e:	2201      	movs	r2, #1
     7a0:	649a      	str	r2, [r3, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
     7a2:	f8d3 3548 	ldr.w	r3, [r3, #1352]	; 0x548
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
     7a6:	1a59      	subs	r1, r3, r1
     7a8:	2900      	cmp	r1, #0
     7aa:	dbec      	blt.n	786 <nrf_timer_set_ocmp+0x56>
     7ac:	e7d6      	b.n	75c <nrf_timer_set_ocmp+0x2c>
	...

000007b0 <nrf52_timer0_irq_handler>:
#endif

#if MYNEWT_VAL(TIMER_0)
void
nrf52_timer0_irq_handler(void)
{
     7b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    hwtimer = bsptimer->tmr_reg;
     7b4:	4c27      	ldr	r4, [pc, #156]	; (854 <nrf52_timer0_irq_handler+0xa4>)
     7b6:	6926      	ldr	r6, [r4, #16]
    compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
     7b8:	f8d6 314c 	ldr.w	r3, [r6, #332]	; 0x14c
    if (compare) {
     7bc:	b113      	cbz	r3, 7c4 <nrf52_timer0_irq_handler+0x14>
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
     7be:	2300      	movs	r3, #0
     7c0:	f8c6 314c 	str.w	r3, [r6, #332]	; 0x14c
    ++bsptimer->timer_isrs;
     7c4:	68a3      	ldr	r3, [r4, #8]
     7c6:	3301      	adds	r3, #1
     7c8:	60a3      	str	r3, [r4, #8]
    if (hwtimer->INTENCLR & NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT)) {
     7ca:	f8d6 3308 	ldr.w	r3, [r6, #776]	; 0x308
     7ce:	031b      	lsls	r3, r3, #12
     7d0:	d53b      	bpl.n	84a <nrf52_timer0_irq_handler+0x9a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     7d2:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
     7d6:	b672      	cpsid	i
            tcntr = hal_timer_read_bsptimer(bsptimer);
     7d8:	f8df a078 	ldr.w	sl, [pc, #120]	; 854 <nrf52_timer0_irq_handler+0xa4>
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
     7dc:	f04f 0801 	mov.w	r8, #1
            delta = 0;
     7e0:	f04f 0900 	mov.w	r9, #0
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
     7e4:	6965      	ldr	r5, [r4, #20]
     7e6:	b155      	cbz	r5, 7fe <nrf52_timer0_irq_handler+0x4e>
        if (bsptimer->tmr_rtc) {
     7e8:	78a2      	ldrb	r2, [r4, #2]
     7ea:	b192      	cbz	r2, 812 <nrf52_timer0_irq_handler+0x62>
            tcntr = hal_timer_read_bsptimer(bsptimer);
     7ec:	4650      	mov	r0, sl
     7ee:	f7ff ff83 	bl	6f8 <hal_timer_read_bsptimer>
            delta = -3;
     7f2:	f06f 0202 	mvn.w	r2, #2
        if ((int32_t)(tcntr - timer->expiry) >= delta) {
     7f6:	68eb      	ldr	r3, [r5, #12]
     7f8:	1ac0      	subs	r0, r0, r3
     7fa:	4290      	cmp	r0, r2
     7fc:	da0f      	bge.n	81e <nrf52_timer0_irq_handler+0x6e>
    timer = TAILQ_FIRST(&bsptimer->hal_timer_q);
     7fe:	6963      	ldr	r3, [r4, #20]
    if (timer) {
     800:	b9db      	cbnz	r3, 83a <nrf52_timer0_irq_handler+0x8a>
        if (bsptimer->tmr_rtc) {
     802:	78a2      	ldrb	r2, [r4, #2]
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
     804:	6923      	ldr	r3, [r4, #16]
        if (bsptimer->tmr_rtc) {
     806:	b312      	cbz	r2, 84e <nrf52_timer0_irq_handler+0x9e>
    rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
     808:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
     80c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
     810:	e017      	b.n	842 <nrf52_timer0_irq_handler+0x92>
            tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
     812:	6923      	ldr	r3, [r4, #16]
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
     814:	f8c3 8048 	str.w	r8, [r3, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
     818:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
            delta = 0;
     81c:	e7eb      	b.n	7f6 <nrf52_timer0_irq_handler+0x46>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
     81e:	e9d5 3204 	ldrd	r3, r2, [r5, #16]
     822:	b143      	cbz	r3, 836 <nrf52_timer0_irq_handler+0x86>
     824:	615a      	str	r2, [r3, #20]
     826:	696a      	ldr	r2, [r5, #20]
     828:	6013      	str	r3, [r2, #0]
            timer->cb_func(timer->cb_arg);
     82a:	e9d5 3001 	ldrd	r3, r0, [r5, #4]
            timer->link.tqe_prev = NULL;
     82e:	f8c5 9014 	str.w	r9, [r5, #20]
            timer->cb_func(timer->cb_arg);
     832:	4798      	blx	r3
     834:	e7d6      	b.n	7e4 <nrf52_timer0_irq_handler+0x34>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
     836:	61a2      	str	r2, [r4, #24]
     838:	e7f5      	b.n	826 <nrf52_timer0_irq_handler+0x76>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
     83a:	68d9      	ldr	r1, [r3, #12]
     83c:	4805      	ldr	r0, [pc, #20]	; (854 <nrf52_timer0_irq_handler+0xa4>)
     83e:	f7ff ff77 	bl	730 <nrf_timer_set_ocmp>
    __HAL_ENABLE_INTERRUPTS(ctx);
     842:	b907      	cbnz	r7, 846 <nrf52_timer0_irq_handler+0x96>
  __ASM volatile ("cpsie i" : : : "memory");
     844:	b662      	cpsie	i
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
     846:	f8d6 314c 	ldr.w	r3, [r6, #332]	; 0x14c
    hal_timer_irq_handler(&nrf52_hal_timer0);
}
     84a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
     84e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
     852:	e7db      	b.n	80c <nrf52_timer0_irq_handler+0x5c>
     854:	200000f4 	.word	0x200000f4

00000858 <hal_timer_init>:
    uint8_t irq_num;
    struct nrf52_hal_timer *bsptimer;
    void *hwtimer;
    hal_timer_irq_handler_t irq_isr;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
     858:	2805      	cmp	r0, #5
     85a:	dc1d      	bgt.n	898 <hal_timer_init+0x40>
     85c:	4b0f      	ldr	r3, [pc, #60]	; (89c <hal_timer_init+0x44>)
     85e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
     862:	b1cb      	cbz	r3, 898 <hal_timer_init+0x40>

    /* If timer is enabled do not allow init */
    if (bsptimer->tmr_enabled) {
     864:	781b      	ldrb	r3, [r3, #0]
     866:	b9bb      	cbnz	r3, 898 <hal_timer_init+0x40>
        rc = EINVAL;
        goto err;
    }

    switch (timer_num) {
     868:	b9b0      	cbnz	r0, 898 <hal_timer_init+0x40>
    if (hwtimer == NULL) {
        rc = EINVAL;
        goto err;
    }

    bsptimer->tmr_reg = hwtimer;
     86a:	4b0d      	ldr	r3, [pc, #52]	; (8a0 <hal_timer_init+0x48>)
     86c:	4a0d      	ldr	r2, [pc, #52]	; (8a4 <hal_timer_init+0x4c>)
     86e:	611a      	str	r2, [r3, #16]
    bsptimer->tmr_irq_num = irq_num;
     870:	2208      	movs	r2, #8
     872:	705a      	strb	r2, [r3, #1]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     874:	4b0c      	ldr	r3, [pc, #48]	; (8a8 <hal_timer_init+0x50>)
     876:	f44f 7280 	mov.w	r2, #256	; 0x100
     87a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
     87e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     882:	f3bf 8f6f 	isb	sy
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     886:	22e0      	movs	r2, #224	; 0xe0
     888:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
  uint32_t vectors = (uint32_t )SCB->VTOR;
     88c:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
     890:	4a06      	ldr	r2, [pc, #24]	; (8ac <hal_timer_init+0x54>)
  uint32_t vectors = (uint32_t )SCB->VTOR;
     892:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
     894:	661a      	str	r2, [r3, #96]	; 0x60
}
     896:	4770      	bx	lr
    NVIC_SetVector(irq_num, (uint32_t)irq_isr);

    return 0;

err:
    return rc;
     898:	2016      	movs	r0, #22
}
     89a:	4770      	bx	lr
     89c:	00002334 	.word	0x00002334
     8a0:	200000f4 	.word	0x200000f4
     8a4:	40008000 	.word	0x40008000
     8a8:	e000e100 	.word	0xe000e100
     8ac:	000007b1 	.word	0x000007b1

000008b0 <hal_timer_config>:
    NRF_TIMER_Type *hwtimer;
#if MYNEWT_VAL(TIMER_5)
    NRF_RTC_Type *rtctimer;
#endif

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
     8b0:	2805      	cmp	r0, #5
{
     8b2:	b530      	push	{r4, r5, lr}
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
     8b4:	dc5e      	bgt.n	974 <hal_timer_config+0xc4>
     8b6:	4b31      	ldr	r3, [pc, #196]	; (97c <hal_timer_config+0xcc>)
     8b8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
     8bc:	2c00      	cmp	r4, #0
     8be:	d059      	beq.n	974 <hal_timer_config+0xc4>
    /*
     * Largest prescaler is 2^9 and must make sure frequency not too high.
     * If hwtimer is NULL it means that the timer was not initialized prior
     * to call.
     */
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
     8c0:	7822      	ldrb	r2, [r4, #0]
     8c2:	2a00      	cmp	r2, #0
     8c4:	d156      	bne.n	974 <hal_timer_config+0xc4>
     8c6:	4b2e      	ldr	r3, [pc, #184]	; (980 <hal_timer_config+0xd0>)
     8c8:	4299      	cmp	r1, r3
     8ca:	d853      	bhi.n	974 <hal_timer_config+0xc4>
    div = NRF52_MAX_TIMER_FREQ / freq_hz;
     8cc:	fbb3 f1f1 	udiv	r1, r3, r1
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
     8d0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
     8d4:	d84e      	bhi.n	974 <hal_timer_config+0xc4>
     8d6:	6923      	ldr	r3, [r4, #16]
     8d8:	2b00      	cmp	r3, #0
     8da:	d04b      	beq.n	974 <hal_timer_config+0xc4>
        (bsptimer->tmr_reg == NULL)) {
        rc = EINVAL;
        goto err;
    }

    if (div == 1) {
     8dc:	2901      	cmp	r1, #1
     8de:	d00f      	beq.n	900 <hal_timer_config+0x50>
     8e0:	2301      	movs	r3, #1
        prescaler = 0;
    } else {
        /* Find closest prescaler */
        for (prescaler = 1; prescaler < 10; ++prescaler) {
            if (div <= (1 << prescaler)) {
     8e2:	4618      	mov	r0, r3
     8e4:	fa00 f503 	lsl.w	r5, r0, r3
     8e8:	428d      	cmp	r5, r1
     8ea:	b2da      	uxtb	r2, r3
     8ec:	d33d      	bcc.n	96a <hal_timer_config+0xba>
                min_delta = div - (1 << (prescaler - 1));
     8ee:	3b01      	subs	r3, #1
     8f0:	fa00 f303 	lsl.w	r3, r0, r3
     8f4:	1acb      	subs	r3, r1, r3
                max_delta = (1 << prescaler) - div;
     8f6:	1a69      	subs	r1, r5, r1
                if (min_delta < max_delta) {
     8f8:	428b      	cmp	r3, r1
     8fa:	d201      	bcs.n	900 <hal_timer_config+0x50>
                    prescaler -= 1;
     8fc:	3a01      	subs	r2, #1
     8fe:	b2d2      	uxtb	r2, r2
            }
        }
    }

    /* Now set the actual frequency */
    bsptimer->tmr_freq = NRF52_MAX_TIMER_FREQ / (1 << prescaler);
     900:	4b1f      	ldr	r3, [pc, #124]	; (980 <hal_timer_config+0xd0>)
    bsptimer->tmr_enabled = 1;
     902:	2501      	movs	r5, #1
    bsptimer->tmr_freq = NRF52_MAX_TIMER_FREQ / (1 << prescaler);
     904:	4113      	asrs	r3, r2
     906:	60e3      	str	r3, [r4, #12]
    bsptimer->tmr_enabled = 1;
     908:	7025      	strb	r5, [r4, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     90a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
     90e:	b672      	cpsid	i

    /* disable interrupts */
    __HAL_DISABLE_INTERRUPTS(ctx);

    /* Make sure HFXO is started */
    if ((NRF_CLOCK->HFCLKSTAT &
     910:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     914:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
     918:	f001 1101 	and.w	r1, r1, #65537	; 0x10001
     91c:	f1b1 1f01 	cmp.w	r1, #65537	; 0x10001
     920:	d007      	beq.n	932 <hal_timer_config+0x82>
         (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) !=
        (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) {
        NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
     922:	2100      	movs	r1, #0
     924:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
        NRF_CLOCK->TASKS_HFCLKSTART = 1;
     928:	601d      	str	r5, [r3, #0]
        while (1) {
            if ((NRF_CLOCK->EVENTS_HFCLKSTARTED) != 0) {
     92a:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
     92e:	2900      	cmp	r1, #0
     930:	d0fb      	beq.n	92a <hal_timer_config+0x7a>
                break;
            }
        }
    }
    hwtimer = bsptimer->tmr_reg;
     932:	6921      	ldr	r1, [r4, #16]

    /* Stop the timer first */
    hwtimer->TASKS_STOP = 1;
     934:	2301      	movs	r3, #1
    hwtimer->TASKS_CLEAR = 1;

    /* Put the timer in timer mode using 32 bits. */
    hwtimer->MODE = TIMER_MODE_MODE_Timer;
     936:	2500      	movs	r5, #0
    hwtimer->TASKS_STOP = 1;
     938:	604b      	str	r3, [r1, #4]
    hwtimer->TASKS_CLEAR = 1;
     93a:	60cb      	str	r3, [r1, #12]
    hwtimer->MODE = TIMER_MODE_MODE_Timer;
     93c:	f8c1 5504 	str.w	r5, [r1, #1284]	; 0x504
    hwtimer->BITMODE = TIMER_BITMODE_BITMODE_32Bit;
     940:	2503      	movs	r5, #3
     942:	f8c1 5508 	str.w	r5, [r1, #1288]	; 0x508

    /* Set the pre-scalar */
    hwtimer->PRESCALER = prescaler;
     946:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510

    /* Start the timer */
    hwtimer->TASKS_START = 1;
     94a:	600b      	str	r3, [r1, #0]

    NVIC_EnableIRQ(bsptimer->tmr_irq_num);
     94c:	f994 2001 	ldrsb.w	r2, [r4, #1]
     950:	7861      	ldrb	r1, [r4, #1]
  if ((int32_t)(IRQn) >= 0)
     952:	2a00      	cmp	r2, #0
     954:	db06      	blt.n	964 <hal_timer_config+0xb4>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     956:	f001 011f 	and.w	r1, r1, #31
     95a:	408b      	lsls	r3, r1
     95c:	0952      	lsrs	r2, r2, #5
     95e:	4909      	ldr	r1, [pc, #36]	; (984 <hal_timer_config+0xd4>)
     960:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

    __HAL_ENABLE_INTERRUPTS(ctx);
     964:	b940      	cbnz	r0, 978 <hal_timer_config+0xc8>
  __ASM volatile ("cpsie i" : : : "memory");
     966:	b662      	cpsie	i

    return 0;

err:
    return rc;
}
     968:	bd30      	pop	{r4, r5, pc}
        for (prescaler = 1; prescaler < 10; ++prescaler) {
     96a:	3301      	adds	r3, #1
     96c:	2b0a      	cmp	r3, #10
     96e:	d1b9      	bne.n	8e4 <hal_timer_config+0x34>
     970:	461a      	mov	r2, r3
     972:	e7c5      	b.n	900 <hal_timer_config+0x50>
    return rc;
     974:	2016      	movs	r0, #22
     976:	e7f7      	b.n	968 <hal_timer_config+0xb8>
    return 0;
     978:	2000      	movs	r0, #0
     97a:	e7f5      	b.n	968 <hal_timer_config+0xb8>
     97c:	00002334 	.word	0x00002334
     980:	00f42400 	.word	0x00f42400
     984:	e000e100 	.word	0xe000e100

00000988 <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
     988:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
     98a:	f000 f822 	bl	9d2 <os_arch_save_sr>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    if (hal_debugger_connected()) {
     98e:	f7ff fbff 	bl	190 <hal_debugger_connected>
     992:	b100      	cbz	r0, 996 <__assert_func+0xe>
       /*
        * If debugger is attached, breakpoint before the trap.
        */
#if !MYNEWT_VAL(MCU_DEBUG_IGNORE_BKPT)
       asm("bkpt");
     994:	be00      	bkpt	0x0000
#endif
    }
    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
     996:	4b04      	ldr	r3, [pc, #16]	; (9a8 <__assert_func+0x20>)
     998:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
     99c:	605a      	str	r2, [r3, #4]
    asm("isb");
     99e:	f3bf 8f6f 	isb	sy
    hal_system_reset();
     9a2:	f7ff fbdf 	bl	164 <hal_system_reset>
     9a6:	bf00      	nop
     9a8:	e000ed00 	.word	0xe000ed00

000009ac <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
     9ac:	b508      	push	{r3, lr}
    uint32_t orig_sp;
#endif

    console_blocking_mode();
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
     9ae:	4b04      	ldr	r3, [pc, #16]	; (9c0 <os_default_irq+0x14>)
     9b0:	685a      	ldr	r2, [r3, #4]
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
     9b2:	685a      	ldr	r2, [r3, #4]
     9b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     9b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
     9b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
     9ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            : "r0"
        );
    }
#endif

    hal_system_reset();
     9bc:	f7ff fbd2 	bl	164 <hal_system_reset>
     9c0:	e000ed00 	.word	0xe000ed00

000009c4 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
     9c4:	4601      	mov	r1, r0

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
     9c6:	2000      	movs	r0, #0
     9c8:	f7ff bf72 	b.w	8b0 <hal_timer_config>

000009cc <timer_handler>:
uint32_t os_flags = OS_RUN_PRIV;

void
timer_handler(void)
{
    os_time_advance(1);
     9cc:	2001      	movs	r0, #1
     9ce:	f000 b807 	b.w	9e0 <os_time_advance>

000009d2 <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     9d2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
     9d6:	b672      	cpsid	i
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    __disable_irq();
    return (isr_ctx & 1);
}
     9d8:	f000 0001 	and.w	r0, r0, #1
     9dc:	4770      	bx	lr
	...

000009e0 <os_time_advance>:
#else

void
os_time_advance(int ticks)
{
    g_os_time += ticks;
     9e0:	4a02      	ldr	r2, [pc, #8]	; (9ec <os_time_advance+0xc>)
     9e2:	6813      	ldr	r3, [r2, #0]
     9e4:	4403      	add	r3, r0
     9e6:	6013      	str	r3, [r2, #0]
}
     9e8:	4770      	bx	lr
     9ea:	bf00      	nop
     9ec:	20000118 	.word	0x20000118

000009f0 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
     9f0:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
     9f4:	482b      	ldr	r0, [pc, #172]	; (aa4 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
     9f6:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
     9f8:	3002      	adds	r0, #2
        MSR     CONTROL,R0
     9fa:	f380 8814 	msr	CONTROL, r0
        ISB
     9fe:	f3bf 8f6f 	isb	sy
        BX      LR
     a02:	4770      	bx	lr

00000a04 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
     a04:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
     a08:	4770      	bx	lr

00000a0a <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
     a0a:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
     a0e:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
     a10:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
     a14:	b951      	cbnz	r1, a2c <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
     a16:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
     a1a:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
     a1c:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
     a1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
     a22:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
     a26:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
     a2a:	4770      	bx	lr

00000a2c <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
     a2c:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
     a2e:	4a1e      	ldr	r2, [pc, #120]	; (aa8 <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
     a30:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
     a32:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
     a34:	d809      	bhi.n	a4a <SVC_Done>

        LDR     R4,=SVC_Table-4
     a36:	4c1d      	ldr	r4, [pc, #116]	; (aac <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
     a38:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
     a3c:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
     a40:	47a0      	blx	r4

        MRS     R12,PSP
     a42:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
     a46:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

00000a4a <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
     a4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
     a4e:	4770      	bx	lr

00000a50 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
     a50:	4b17      	ldr	r3, [pc, #92]	; (ab0 <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
     a52:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
     a54:	4b17      	ldr	r3, [pc, #92]	; (ab4 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
     a56:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
     a58:	4291      	cmp	r1, r2
        IT      EQ
     a5a:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
     a5c:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
     a5e:	f3ef 8c09 	mrs	ip, PSP
        TST     LR,#0x10                /* is it extended frame? */
        IT      EQ
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
     a62:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
     a66:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
     a6a:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
     a6c:	f8d2 c000 	ldr.w	ip, [r2]
        ITTE    EQ
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
     a70:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        MSR     PSP,R12                 /* Write PSP */
     a74:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
     a78:	4770      	bx	lr

00000a7a <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
     a7a:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
     a7c:	f7ff ffa6 	bl	9cc <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
     a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
     a84:	4770      	bx	lr

00000a86 <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
     a86:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
     a8a:	bf0c      	ite	eq
        MRSEQ   R3,MSP
     a8c:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
     a90:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
     a94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
     a98:	4668      	mov	r0, sp
        BL      os_default_irq
     a9a:	f7ff ff87 	bl	9ac <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
     a9e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
     aa2:	4770      	bx	lr
        LDR     R0,=os_flags
     aa4:	20000110 	.word	0x20000110
        LDR     R2,=SVC_Count
     aa8:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
     aac:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
     ab0:	200000e8 	.word	0x200000e8
        LDR     R3,=g_current_task      /* Get current task */
     ab4:	20000114 	.word	0x20000114

00000ab8 <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7)
    asm (".syntax unified                   \n"
     ab8:	b470      	push	{r4, r5, r6}
     aba:	f04f 0500 	mov.w	r5, #0
     abe:	f022 0603 	bic.w	r6, r2, #3
     ac2:	e005      	b.n	ad0 <test1>

00000ac4 <loop1>:
     ac4:	5943      	ldr	r3, [r0, r5]
     ac6:	594c      	ldr	r4, [r1, r5]
     ac8:	42a3      	cmp	r3, r4
     aca:	d104      	bne.n	ad6 <res1>
     acc:	f105 0504 	add.w	r5, r5, #4

00000ad0 <test1>:
     ad0:	42b5      	cmp	r5, r6
     ad2:	d1f7      	bne.n	ac4 <loop1>
     ad4:	e00d      	b.n	af2 <test2>

00000ad6 <res1>:
     ad6:	ba1b      	rev	r3, r3
     ad8:	ba24      	rev	r4, r4
     ada:	1b1b      	subs	r3, r3, r4
     adc:	bf8c      	ite	hi
     ade:	2301      	movhi	r3, #1
     ae0:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
     ae4:	e009      	b.n	afa <done>

00000ae6 <loop2>:
     ae6:	5d43      	ldrb	r3, [r0, r5]
     ae8:	5d4c      	ldrb	r4, [r1, r5]
     aea:	1b1b      	subs	r3, r3, r4
     aec:	d105      	bne.n	afa <done>
     aee:	f105 0501 	add.w	r5, r5, #1

00000af2 <test2>:
     af2:	4295      	cmp	r5, r2
     af4:	d1f7      	bne.n	ae6 <loop2>
     af6:	f04f 0300 	mov.w	r3, #0

00000afa <done>:
     afa:	4618      	mov	r0, r3
     afc:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
     afe:	4770      	bx	lr

00000b00 <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
     b00:	e001      	b.n	b06 <test1>

00000b02 <loop1>:
     b02:	588b      	ldr	r3, [r1, r2]
     b04:	5083      	str	r3, [r0, r2]

00000b06 <test1>:
     b06:	3a04      	subs	r2, #4
     b08:	d5fb      	bpl.n	b02 <loop1>
     b0a:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
     b0e:	e001      	b.n	b14 <test2>

00000b10 <loop2>:
     b10:	5c8b      	ldrb	r3, [r1, r2]
     b12:	5483      	strb	r3, [r0, r2]

00000b14 <test2>:
     b14:	3a01      	subs	r2, #1
     b16:	d5fb      	bpl.n	b10 <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
     b18:	4770      	bx	lr

00000b1a <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
     b1a:	b530      	push	{r4, r5, lr}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
     b1c:	4605      	mov	r5, r0
     b1e:	b2c9      	uxtb	r1, r1
     b20:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
     b24:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
     b28:	18ab      	adds	r3, r5, r2
     b2a:	2403      	movs	r4, #3
     b2c:	4023      	ands	r3, r4
     b2e:	1ad3      	subs	r3, r2, r3
     b30:	d40b      	bmi.n	b4a <memset+0x30>
     b32:	e001      	b.n	b38 <memset+0x1e>
     b34:	3a01      	subs	r2, #1
     b36:	54a9      	strb	r1, [r5, r2]
     b38:	429a      	cmp	r2, r3
     b3a:	d1fb      	bne.n	b34 <memset+0x1a>
     b3c:	e000      	b.n	b40 <memset+0x26>
     b3e:	50a9      	str	r1, [r5, r2]
     b40:	3a04      	subs	r2, #4
     b42:	d5fc      	bpl.n	b3e <memset+0x24>
     b44:	3204      	adds	r2, #4
     b46:	e000      	b.n	b4a <memset+0x30>
     b48:	54a9      	strb	r1, [r5, r2]
     b4a:	3a01      	subs	r2, #1
     b4c:	d5fc      	bpl.n	b48 <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
     b4e:	bd30      	pop	{r4, r5, pc}

00000b50 <flash_area_open>:
flash_area_open(uint8_t id, const struct flash_area **fap)
{
    const struct flash_area *area;
    int i;

    if (flash_map == NULL) {
     b50:	4b0c      	ldr	r3, [pc, #48]	; (b84 <flash_area_open+0x34>)
     b52:	681b      	ldr	r3, [r3, #0]
{
     b54:	b570      	push	{r4, r5, r6, lr}
    if (flash_map == NULL) {
     b56:	b18b      	cbz	r3, b7c <flash_area_open+0x2c>
        return SYS_EACCES;
    }

    for (i = 0; i < flash_map_entries; i++) {
     b58:	4a0b      	ldr	r2, [pc, #44]	; (b88 <flash_area_open+0x38>)
     b5a:	6814      	ldr	r4, [r2, #0]
     b5c:	2200      	movs	r2, #0
     b5e:	4294      	cmp	r4, r2
     b60:	dc02      	bgt.n	b68 <flash_area_open+0x18>
            *fap = area;
            return 0;
        }
    }

    return SYS_ENOENT;
     b62:	f06f 0003 	mvn.w	r0, #3
     b66:	e006      	b.n	b76 <flash_area_open+0x26>
        area = flash_map + i;
     b68:	461d      	mov	r5, r3
        if (area->fa_id == id) {
     b6a:	f813 6b0c 	ldrb.w	r6, [r3], #12
     b6e:	4286      	cmp	r6, r0
     b70:	d102      	bne.n	b78 <flash_area_open+0x28>
            *fap = area;
     b72:	600d      	str	r5, [r1, #0]
            return 0;
     b74:	2000      	movs	r0, #0
}
     b76:	bd70      	pop	{r4, r5, r6, pc}
    for (i = 0; i < flash_map_entries; i++) {
     b78:	3201      	adds	r2, #1
     b7a:	e7f0      	b.n	b5e <flash_area_open+0xe>
        return SYS_EACCES;
     b7c:	f06f 0006 	mvn.w	r0, #6
     b80:	e7f9      	b.n	b76 <flash_area_open+0x26>
     b82:	bf00      	nop
     b84:	2000011c 	.word	0x2000011c
     b88:	20000120 	.word	0x20000120

00000b8c <flash_area_to_sectors>:

int
flash_area_to_sectors(int id, int *cnt, struct flash_area *ret)
{
     b8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    uint32_t start;
    uint32_t size;
    int rc;
    int i;

    rc = flash_area_open(id, &fa);
     b90:	fa5f f980 	uxtb.w	r9, r0
{
     b94:	460f      	mov	r7, r1
    rc = flash_area_open(id, &fa);
     b96:	4648      	mov	r0, r9
     b98:	a901      	add	r1, sp, #4
{
     b9a:	4614      	mov	r4, r2
    rc = flash_area_open(id, &fa);
     b9c:	f7ff ffd8 	bl	b50 <flash_area_open>
    if (rc != 0) {
     ba0:	4605      	mov	r5, r0
     ba2:	b948      	cbnz	r0, bb8 <flash_area_to_sectors+0x2c>
        return rc;
    }

    *cnt = 0;

    hf = hal_bsp_flash_dev(fa->fa_device_id);
     ba4:	9b01      	ldr	r3, [sp, #4]
    *cnt = 0;
     ba6:	6038      	str	r0, [r7, #0]
    hf = hal_bsp_flash_dev(fa->fa_device_id);
     ba8:	7858      	ldrb	r0, [r3, #1]
     baa:	f7ff fc59 	bl	460 <hal_bsp_flash_dev>
    for (i = 0; i < hf->hf_sector_cnt; i++) {
     bae:	46a8      	mov	r8, r5
    hf = hal_bsp_flash_dev(fa->fa_device_id);
     bb0:	4606      	mov	r6, r0
    for (i = 0; i < hf->hf_sector_cnt; i++) {
     bb2:	68f3      	ldr	r3, [r6, #12]
     bb4:	4543      	cmp	r3, r8
     bb6:	dc03      	bgt.n	bc0 <flash_area_to_sectors+0x34>
            (*cnt)++;
        }
    }
    flash_area_close(fa);
    return 0;
}
     bb8:	4628      	mov	r0, r5
     bba:	b004      	add	sp, #16
     bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hf->hf_itf->hff_sector_info(hf, i, &start, &size);
     bc0:	6833      	ldr	r3, [r6, #0]
     bc2:	aa02      	add	r2, sp, #8
     bc4:	f8d3 a00c 	ldr.w	sl, [r3, #12]
     bc8:	4641      	mov	r1, r8
     bca:	ab03      	add	r3, sp, #12
     bcc:	4630      	mov	r0, r6
     bce:	47d0      	blx	sl
        if (start >= fa->fa_off && start < fa->fa_off + fa->fa_size) {
     bd0:	9801      	ldr	r0, [sp, #4]
     bd2:	9a02      	ldr	r2, [sp, #8]
     bd4:	6843      	ldr	r3, [r0, #4]
     bd6:	4293      	cmp	r3, r2
     bd8:	d80f      	bhi.n	bfa <flash_area_to_sectors+0x6e>
     bda:	6881      	ldr	r1, [r0, #8]
     bdc:	440b      	add	r3, r1
     bde:	429a      	cmp	r2, r3
     be0:	d20b      	bcs.n	bfa <flash_area_to_sectors+0x6e>
            if (ret) {
     be2:	b13c      	cbz	r4, bf4 <flash_area_to_sectors+0x68>
                ret->fa_id = id;
     be4:	f884 9000 	strb.w	r9, [r4]
                ret->fa_device_id = fa->fa_device_id;
     be8:	7843      	ldrb	r3, [r0, #1]
     bea:	7063      	strb	r3, [r4, #1]
                ret->fa_size = size;
     bec:	9b03      	ldr	r3, [sp, #12]
                ret->fa_off = start;
     bee:	6062      	str	r2, [r4, #4]
                ret->fa_size = size;
     bf0:	60a3      	str	r3, [r4, #8]
                ret++;
     bf2:	340c      	adds	r4, #12
            (*cnt)++;
     bf4:	683b      	ldr	r3, [r7, #0]
     bf6:	3301      	adds	r3, #1
     bf8:	603b      	str	r3, [r7, #0]
    for (i = 0; i < hf->hf_sector_cnt; i++) {
     bfa:	f108 0801 	add.w	r8, r8, #1
     bfe:	e7d8      	b.n	bb2 <flash_area_to_sectors+0x26>

00000c00 <flash_area_read>:
}

int
flash_area_read(const struct flash_area *fa, uint32_t off, void *dst,
    uint32_t len)
{
     c00:	b430      	push	{r4, r5}
    if (off > fa->fa_size || off + len > fa->fa_size) {
     c02:	6885      	ldr	r5, [r0, #8]
     c04:	428d      	cmp	r5, r1
{
     c06:	461c      	mov	r4, r3
    if (off > fa->fa_size || off + len > fa->fa_size) {
     c08:	d308      	bcc.n	c1c <flash_area_read+0x1c>
     c0a:	440c      	add	r4, r1
     c0c:	42a5      	cmp	r5, r4
     c0e:	d305      	bcc.n	c1c <flash_area_read+0x1c>
        return -1;
    }
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
     c10:	6844      	ldr	r4, [r0, #4]
     c12:	7840      	ldrb	r0, [r0, #1]
     c14:	4421      	add	r1, r4
}
     c16:	bc30      	pop	{r4, r5}
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
     c18:	f001 ba7e 	b.w	2118 <hal_flash_read>
}
     c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     c20:	bc30      	pop	{r4, r5}
     c22:	4770      	bx	lr

00000c24 <flash_area_write>:

int
flash_area_write(const struct flash_area *fa, uint32_t off, const void *src,
    uint32_t len)
{
     c24:	b430      	push	{r4, r5}
    if (off > fa->fa_size || off + len > fa->fa_size) {
     c26:	6885      	ldr	r5, [r0, #8]
     c28:	428d      	cmp	r5, r1
{
     c2a:	461c      	mov	r4, r3
    if (off > fa->fa_size || off + len > fa->fa_size) {
     c2c:	d308      	bcc.n	c40 <flash_area_write+0x1c>
     c2e:	440c      	add	r4, r1
     c30:	42a5      	cmp	r5, r4
     c32:	d305      	bcc.n	c40 <flash_area_write+0x1c>
        return -1;
    }
    return hal_flash_write(fa->fa_device_id, fa->fa_off + off,
     c34:	6844      	ldr	r4, [r0, #4]
     c36:	7840      	ldrb	r0, [r0, #1]
     c38:	4421      	add	r1, r4
                           (void *)src, len);
}
     c3a:	bc30      	pop	{r4, r5}
    return hal_flash_write(fa->fa_device_id, fa->fa_off + off,
     c3c:	f001 ba90 	b.w	2160 <hal_flash_write>
}
     c40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     c44:	bc30      	pop	{r4, r5}
     c46:	4770      	bx	lr

00000c48 <flash_area_erase>:

int
flash_area_erase(const struct flash_area *fa, uint32_t off, uint32_t len)
{
     c48:	b410      	push	{r4}
    if (off > fa->fa_size || off + len > fa->fa_size) {
     c4a:	6884      	ldr	r4, [r0, #8]
     c4c:	428c      	cmp	r4, r1
{
     c4e:	4613      	mov	r3, r2
    if (off > fa->fa_size || off + len > fa->fa_size) {
     c50:	d308      	bcc.n	c64 <flash_area_erase+0x1c>
     c52:	440b      	add	r3, r1
     c54:	429c      	cmp	r4, r3
     c56:	d305      	bcc.n	c64 <flash_area_erase+0x1c>
        return -1;
    }
    return hal_flash_erase(fa->fa_device_id, fa->fa_off + off, len);
     c58:	6843      	ldr	r3, [r0, #4]
}
     c5a:	bc10      	pop	{r4}
    return hal_flash_erase(fa->fa_device_id, fa->fa_off + off, len);
     c5c:	7840      	ldrb	r0, [r0, #1]
     c5e:	4419      	add	r1, r3
     c60:	f001 bab0 	b.w	21c4 <hal_flash_erase>
}
     c64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     c68:	bc10      	pop	{r4}
     c6a:	4770      	bx	lr

00000c6c <flash_area_align>:

uint8_t
flash_area_align(const struct flash_area *fa)
{
    return hal_flash_align(fa->fa_device_id);
     c6c:	7840      	ldrb	r0, [r0, #1]
     c6e:	f001 ba43 	b.w	20f8 <hal_flash_align>

00000c72 <flash_area_erased_val>:
}

uint32_t
flash_area_erased_val(const struct flash_area *fa)
{
     c72:	b508      	push	{r3, lr}
    return hal_flash_erased_val(fa->fa_device_id);
     c74:	7840      	ldrb	r0, [r0, #1]
     c76:	f001 fa47 	bl	2108 <hal_flash_erased_val>
}
     c7a:	bd08      	pop	{r3, pc}

00000c7c <flash_area_read_is_empty>:
}

int
flash_area_read_is_empty(const struct flash_area *fa, uint32_t off, void *dst,
                         uint32_t len)
{
     c7c:	b410      	push	{r4}
    return hal_flash_isempty(fa->fa_device_id, fa->fa_off + off, dst, len);
     c7e:	6844      	ldr	r4, [r0, #4]
     c80:	7840      	ldrb	r0, [r0, #1]
     c82:	4421      	add	r1, r4
}
     c84:	bc10      	pop	{r4}
    return hal_flash_isempty(fa->fa_device_id, fa->fa_off + off, dst, len);
     c86:	f001 bb10 	b.w	22aa <hal_flash_isempty>

00000c8a <flash_area_id_from_image_slot>:
 * specified value is not a valid image slot index (0 or 1), a crash is
 * triggered.
 */
int
flash_area_id_from_image_slot(int slot)
{
     c8a:	b508      	push	{r3, lr}
    switch (slot) {
     c8c:	b138      	cbz	r0, c9e <flash_area_id_from_image_slot+0x14>
     c8e:	2801      	cmp	r0, #1
     c90:	d007      	beq.n	ca2 <flash_area_id_from_image_slot+0x18>
    case 0:
        return FLASH_AREA_IMAGE_0;
    case 1:
        return FLASH_AREA_IMAGE_1;
    default:
        assert(0);
     c92:	2300      	movs	r3, #0
     c94:	461a      	mov	r2, r3
     c96:	4619      	mov	r1, r3
     c98:	4618      	mov	r0, r3
     c9a:	f7ff fe75 	bl	988 <__assert_func>
        return FLASH_AREA_IMAGE_0;
     c9e:	2001      	movs	r0, #1
        return FLASH_AREA_IMAGE_0;
    }
}
     ca0:	bd08      	pop	{r3, pc}
    switch (slot) {
     ca2:	2002      	movs	r0, #2
     ca4:	e7fc      	b.n	ca0 <flash_area_id_from_image_slot+0x16>
	...

00000ca8 <flash_map_init>:
    }
}

void
flash_map_init(void)
{
     ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     cac:	b088      	sub	sp, #32
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();

    rc = hal_flash_init();
     cae:	f001 fa11 	bl	20d4 <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
     cb2:	b138      	cbz	r0, cc4 <flash_map_init+0x1c>
     cb4:	2300      	movs	r3, #0
     cb6:	4a1e      	ldr	r2, [pc, #120]	; (d30 <flash_map_init+0x88>)
     cb8:	9300      	str	r3, [sp, #0]
     cba:	6814      	ldr	r4, [r2, #0]
     cbc:	4619      	mov	r1, r3
     cbe:	461a      	mov	r2, r3
     cc0:	4618      	mov	r0, r3
     cc2:	47a0      	blx	r4
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
     cc4:	4f1b      	ldr	r7, [pc, #108]	; (d34 <flash_map_init+0x8c>)
     cc6:	4b1c      	ldr	r3, [pc, #112]	; (d38 <flash_map_init+0x90>)
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
     cc8:	4e1c      	ldr	r6, [pc, #112]	; (d3c <flash_map_init+0x94>)
    flash_map = sysflash_map_dflt;
     cca:	603b      	str	r3, [r7, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
     ccc:	2306      	movs	r3, #6
     cce:	6033      	str	r3, [r6, #0]
    mfg_init();
     cd0:	f000 f906 	bl	ee0 <mfg_init>
    mfg_open(&reader);
     cd4:	a803      	add	r0, sp, #12
     cd6:	4c1a      	ldr	r4, [pc, #104]	; (d40 <flash_map_init+0x98>)
     cd8:	f000 f926 	bl	f28 <mfg_open>
    *out_num_areas = 0;
     cdc:	2500      	movs	r5, #0
     cde:	46a0      	mov	r8, r4
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_FLASH_AREA);
     ce0:	2102      	movs	r1, #2
     ce2:	a803      	add	r0, sp, #12
     ce4:	f000 f8ea 	bl	ebc <mfg_seek_next_with_type>
        switch (rc) {
     ce8:	f110 0f0f 	cmn.w	r0, #15
     cec:	d019      	beq.n	d22 <flash_map_init+0x7a>
     cee:	b9a8      	cbnz	r0, d1c <flash_map_init+0x74>
        rc = mfg_read_tlv_flash_area(&reader, &meta_flash_area);
     cf0:	a905      	add	r1, sp, #20
     cf2:	a803      	add	r0, sp, #12
     cf4:	f000 f8ed 	bl	ed2 <mfg_read_tlv_flash_area>
        if (rc != 0) {
     cf8:	b980      	cbnz	r0, d1c <flash_map_init+0x74>
        fap->fa_id = meta_flash_area.area_id;
     cfa:	f89d 3014 	ldrb.w	r3, [sp, #20]
     cfe:	7023      	strb	r3, [r4, #0]
        fap->fa_device_id = meta_flash_area.device_id;
     d00:	f89d 3015 	ldrb.w	r3, [sp, #21]
     d04:	7063      	strb	r3, [r4, #1]
        fap->fa_off = meta_flash_area.offset;
     d06:	f8dd 3016 	ldr.w	r3, [sp, #22]
     d0a:	6063      	str	r3, [r4, #4]
        (*out_num_areas)++;
     d0c:	3501      	adds	r5, #1
        fap->fa_size = meta_flash_area.size;
     d0e:	f8dd 301a 	ldr.w	r3, [sp, #26]
     d12:	60a3      	str	r3, [r4, #8]
        if (*out_num_areas >= max_areas) {
     d14:	2d0a      	cmp	r5, #10
     d16:	f104 040c 	add.w	r4, r4, #12
     d1a:	d1e1      	bne.n	ce0 <flash_map_init+0x38>
                            mfg_areas, &num_areas);
    if (rc == 0 && num_areas > 0) {
        flash_map = mfg_areas;
        flash_map_entries = num_areas;
    }
}
     d1c:	b008      	add	sp, #32
     d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (rc == 0 && num_areas > 0) {
     d22:	2d00      	cmp	r5, #0
     d24:	d0fa      	beq.n	d1c <flash_map_init+0x74>
        flash_map = mfg_areas;
     d26:	f8c7 8000 	str.w	r8, [r7]
        flash_map_entries = num_areas;
     d2a:	6035      	str	r5, [r6, #0]
}
     d2c:	e7f6      	b.n	d1c <flash_map_init+0x74>
     d2e:	bf00      	nop
     d30:	200000f0 	.word	0x200000f0
     d34:	2000011c 	.word	0x2000011c
     d38:	0000234c 	.word	0x0000234c
     d3c:	20000120 	.word	0x20000120
     d40:	20000124 	.word	0x20000124

00000d44 <mfg_read_next_mmr>:
 * Reads an MMR from the end of the specified flash area.  On success, the
 * global MMR list is populated with the result for subsequent reading.
 */
static int
mfg_read_next_mmr(uint8_t area_id)
{
     d44:	b5f0      	push	{r4, r5, r6, r7, lr}
    int rc;
    int i;

    /* Detect if this MMR has already been read. */
    for (i = 0; i < mfg_num_mmrs; i++) {
     d46:	4e25      	ldr	r6, [pc, #148]	; (ddc <mfg_read_next_mmr+0x98>)
        if (mfg_mmrs[i].area_id == area_id) {
     d48:	4a25      	ldr	r2, [pc, #148]	; (de0 <mfg_read_next_mmr+0x9c>)
    for (i = 0; i < mfg_num_mmrs; i++) {
     d4a:	6834      	ldr	r4, [r6, #0]
{
     d4c:	b085      	sub	sp, #20
     d4e:	4605      	mov	r5, r0
    for (i = 0; i < mfg_num_mmrs; i++) {
     d50:	2300      	movs	r3, #0
        if (mfg_mmrs[i].area_id == area_id) {
     d52:	210c      	movs	r1, #12
    for (i = 0; i < mfg_num_mmrs; i++) {
     d54:	429c      	cmp	r4, r3
     d56:	dc0a      	bgt.n	d6e <mfg_read_next_mmr+0x2a>
            return SYS_EALREADY;
        }
    }

    if (mfg_num_mmrs >= MYNEWT_VAL(MFG_MAX_MMRS)) {
     d58:	2c02      	cmp	r4, #2
     d5a:	d03c      	beq.n	dd6 <mfg_read_next_mmr+0x92>
    rc = flash_area_open(area_id, &fap);
     d5c:	a901      	add	r1, sp, #4
     d5e:	4628      	mov	r0, r5
     d60:	f7ff fef6 	bl	b50 <flash_area_open>
    if (rc != 0) {
     d64:	b150      	cbz	r0, d7c <mfg_read_next_mmr+0x38>
        return SYS_EIO;
     d66:	f06f 0004 	mvn.w	r0, #4
        return rc;
    }

    mfg_num_mmrs++;
    return 0;
}
     d6a:	b005      	add	sp, #20
     d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (mfg_mmrs[i].area_id == area_id) {
     d6e:	fb01 f003 	mul.w	r0, r1, r3
     d72:	5c80      	ldrb	r0, [r0, r2]
     d74:	42a8      	cmp	r0, r5
     d76:	d02b      	beq.n	dd0 <mfg_read_next_mmr+0x8c>
    for (i = 0; i < mfg_num_mmrs; i++) {
     d78:	3301      	adds	r3, #1
     d7a:	e7eb      	b.n	d54 <mfg_read_next_mmr+0x10>
    rc = flash_area_read(fap, fap->fa_size - sizeof ftr, &ftr, sizeof ftr);
     d7c:	9801      	ldr	r0, [sp, #4]
     d7e:	6881      	ldr	r1, [r0, #8]
     d80:	2308      	movs	r3, #8
     d82:	eb0d 0203 	add.w	r2, sp, r3
     d86:	3908      	subs	r1, #8
     d88:	f7ff ff3a 	bl	c00 <flash_area_read>
    if (rc != 0) {
     d8c:	2800      	cmp	r0, #0
     d8e:	d1ea      	bne.n	d66 <mfg_read_next_mmr+0x22>
    if (ftr.magic != MFG_META_MAGIC) {
     d90:	4b14      	ldr	r3, [pc, #80]	; (de4 <mfg_read_next_mmr+0xa0>)
     d92:	9a03      	ldr	r2, [sp, #12]
     d94:	429a      	cmp	r2, r3
     d96:	d115      	bne.n	dc4 <mfg_read_next_mmr+0x80>
    if (ftr.version != MFG_META_VERSION) {
     d98:	f89d 300a 	ldrb.w	r3, [sp, #10]
     d9c:	2b02      	cmp	r3, #2
     d9e:	d114      	bne.n	dca <mfg_read_next_mmr+0x86>
    if (ftr.size > fap->fa_size) {
     da0:	9b01      	ldr	r3, [sp, #4]
     da2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
     da6:	689b      	ldr	r3, [r3, #8]
     da8:	429a      	cmp	r2, r3
     daa:	d80b      	bhi.n	dc4 <mfg_read_next_mmr+0x80>
    *out_mmr = (struct mfg_mmr) {
     dac:	4f0c      	ldr	r7, [pc, #48]	; (de0 <mfg_read_next_mmr+0x9c>)
     dae:	210c      	movs	r1, #12
     db0:	434c      	muls	r4, r1
        .offset = fap->fa_size - ftr.size,
     db2:	1a9b      	subs	r3, r3, r2
    *out_mmr = (struct mfg_mmr) {
     db4:	1939      	adds	r1, r7, r4
     db6:	e9c1 3201 	strd	r3, r2, [r1, #4]
    mfg_num_mmrs++;
     dba:	6833      	ldr	r3, [r6, #0]
    *out_mmr = (struct mfg_mmr) {
     dbc:	553d      	strb	r5, [r7, r4]
    mfg_num_mmrs++;
     dbe:	3301      	adds	r3, #1
     dc0:	6033      	str	r3, [r6, #0]
    return 0;
     dc2:	e7d2      	b.n	d6a <mfg_read_next_mmr+0x26>
        return SYS_ENODEV;
     dc4:	f06f 0008 	mvn.w	r0, #8
     dc8:	e7cf      	b.n	d6a <mfg_read_next_mmr+0x26>
        return SYS_ENOTSUP;
     dca:	f06f 000b 	mvn.w	r0, #11
     dce:	e7cc      	b.n	d6a <mfg_read_next_mmr+0x26>
            return SYS_EALREADY;
     dd0:	f06f 000a 	mvn.w	r0, #10
     dd4:	e7c9      	b.n	d6a <mfg_read_next_mmr+0x26>
        return SYS_ENOMEM;
     dd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     dda:	e7c6      	b.n	d6a <mfg_read_next_mmr+0x26>
     ddc:	200001b8 	.word	0x200001b8
     de0:	200001a0 	.word	0x200001a0
     de4:	3bb2a269 	.word	0x3bb2a269

00000de8 <mfg_read_tlv_body>:
{
     de8:	b573      	push	{r0, r1, r4, r5, r6, lr}
     dea:	4616      	mov	r6, r2
    assert(reader->mmr_idx < mfg_num_mmrs);
     dec:	4a14      	ldr	r2, [pc, #80]	; (e40 <mfg_read_tlv_body+0x58>)
     dee:	7883      	ldrb	r3, [r0, #2]
     df0:	6812      	ldr	r2, [r2, #0]
     df2:	4293      	cmp	r3, r2
{
     df4:	4604      	mov	r4, r0
     df6:	460d      	mov	r5, r1
    assert(reader->mmr_idx < mfg_num_mmrs);
     df8:	db05      	blt.n	e06 <mfg_read_tlv_body+0x1e>
     dfa:	2300      	movs	r3, #0
     dfc:	461a      	mov	r2, r3
     dfe:	4619      	mov	r1, r3
     e00:	4618      	mov	r0, r3
     e02:	f7ff fdc1 	bl	988 <__assert_func>
    rc = flash_area_open(mmr->area_id, fap);
     e06:	220c      	movs	r2, #12
     e08:	4353      	muls	r3, r2
     e0a:	4a0e      	ldr	r2, [pc, #56]	; (e44 <mfg_read_tlv_body+0x5c>)
     e0c:	a901      	add	r1, sp, #4
     e0e:	5cd0      	ldrb	r0, [r2, r3]
     e10:	f7ff fe9e 	bl	b50 <flash_area_open>
    if (rc != 0) {
     e14:	4601      	mov	r1, r0
     e16:	b970      	cbnz	r0, e36 <mfg_read_tlv_body+0x4e>
    memset(dst, 0, max_size);
     e18:	4632      	mov	r2, r6
     e1a:	4628      	mov	r0, r5
     e1c:	f7ff fe7d 	bl	b1a <memset>
    read_sz = min(max_size, reader->cur_tlv.size);
     e20:	7863      	ldrb	r3, [r4, #1]
    rc = flash_area_read(fap, reader->offset + MFG_META_TLV_SZ, dst, read_sz);
     e22:	6861      	ldr	r1, [r4, #4]
     e24:	9801      	ldr	r0, [sp, #4]
     e26:	42b3      	cmp	r3, r6
     e28:	bfa8      	it	ge
     e2a:	4633      	movge	r3, r6
     e2c:	462a      	mov	r2, r5
     e2e:	3102      	adds	r1, #2
     e30:	f7ff fee6 	bl	c00 <flash_area_read>
    if (rc != 0) {
     e34:	b108      	cbz	r0, e3a <mfg_read_tlv_body+0x52>
        return SYS_EIO;
     e36:	f06f 0004 	mvn.w	r0, #4
}
     e3a:	b002      	add	sp, #8
     e3c:	bd70      	pop	{r4, r5, r6, pc}
     e3e:	bf00      	nop
     e40:	200001b8 	.word	0x200001b8
     e44:	200001a0 	.word	0x200001a0

00000e48 <mfg_seek_next>:
{
     e48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if (reader->mmr_idx >= mfg_num_mmrs) {
     e4a:	4d1a      	ldr	r5, [pc, #104]	; (eb4 <mfg_seek_next+0x6c>)
    rc = flash_area_open(mmr->area_id, &fap);
     e4c:	4e1a      	ldr	r6, [pc, #104]	; (eb8 <mfg_seek_next+0x70>)
{
     e4e:	4604      	mov	r4, r0
    if (reader->mmr_idx >= mfg_num_mmrs) {
     e50:	78a3      	ldrb	r3, [r4, #2]
     e52:	682a      	ldr	r2, [r5, #0]
     e54:	4293      	cmp	r3, r2
     e56:	db03      	blt.n	e60 <mfg_seek_next+0x18>
        return SYS_EINVAL;
     e58:	f06f 0001 	mvn.w	r0, #1
}
     e5c:	b003      	add	sp, #12
     e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rc = flash_area_open(mmr->area_id, &fap);
     e60:	220c      	movs	r2, #12
     e62:	4353      	muls	r3, r2
     e64:	a901      	add	r1, sp, #4
     e66:	5cf0      	ldrb	r0, [r6, r3]
     e68:	18f7      	adds	r7, r6, r3
     e6a:	f7ff fe71 	bl	b50 <flash_area_open>
    if (rc != 0) {
     e6e:	b9f0      	cbnz	r0, eae <mfg_seek_next+0x66>
    if (reader->offset == 0) {
     e70:	6863      	ldr	r3, [r4, #4]
     e72:	b973      	cbnz	r3, e92 <mfg_seek_next+0x4a>
        reader->offset = mmr->offset;
     e74:	6879      	ldr	r1, [r7, #4]
    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
     e76:	9801      	ldr	r0, [sp, #4]
     e78:	6061      	str	r1, [r4, #4]
     e7a:	6883      	ldr	r3, [r0, #8]
     e7c:	3b08      	subs	r3, #8
     e7e:	428b      	cmp	r3, r1
     e80:	d80f      	bhi.n	ea2 <mfg_seek_next+0x5a>
        if (reader->mmr_idx + 1 >= mfg_num_mmrs) {
     e82:	78a3      	ldrb	r3, [r4, #2]
     e84:	682a      	ldr	r2, [r5, #0]
     e86:	3301      	adds	r3, #1
     e88:	4293      	cmp	r3, r2
     e8a:	db06      	blt.n	e9a <mfg_seek_next+0x52>
            rc = SYS_EDONE;
     e8c:	f06f 000e 	mvn.w	r0, #14
     e90:	e7e4      	b.n	e5c <mfg_seek_next+0x14>
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
     e92:	7861      	ldrb	r1, [r4, #1]
     e94:	3302      	adds	r3, #2
     e96:	4419      	add	r1, r3
     e98:	e7ed      	b.n	e76 <mfg_seek_next+0x2e>
            reader->offset = 0;
     e9a:	2200      	movs	r2, #0
     e9c:	6062      	str	r2, [r4, #4]
            reader->mmr_idx++;
     e9e:	70a3      	strb	r3, [r4, #2]
    } while (rc == SYS_EAGAIN);
     ea0:	e7d6      	b.n	e50 <mfg_seek_next+0x8>
    rc = flash_area_read(fap, reader->offset, &reader->cur_tlv,
     ea2:	2302      	movs	r3, #2
     ea4:	4622      	mov	r2, r4
     ea6:	f7ff feab 	bl	c00 <flash_area_read>
    if (rc != 0) {
     eaa:	2800      	cmp	r0, #0
     eac:	d0d6      	beq.n	e5c <mfg_seek_next+0x14>
        rc = SYS_EIO;
     eae:	f06f 0004 	mvn.w	r0, #4
     eb2:	e7d3      	b.n	e5c <mfg_seek_next+0x14>
     eb4:	200001b8 	.word	0x200001b8
     eb8:	200001a0 	.word	0x200001a0

00000ebc <mfg_seek_next_with_type>:
{
     ebc:	b538      	push	{r3, r4, r5, lr}
     ebe:	4604      	mov	r4, r0
     ec0:	460d      	mov	r5, r1
        rc = mfg_seek_next(reader);
     ec2:	4620      	mov	r0, r4
     ec4:	f7ff ffc0 	bl	e48 <mfg_seek_next>
        if (rc != 0) {
     ec8:	b910      	cbnz	r0, ed0 <mfg_seek_next_with_type+0x14>
        if (reader->cur_tlv.type == type) {
     eca:	7823      	ldrb	r3, [r4, #0]
     ecc:	42ab      	cmp	r3, r5
     ece:	d1f8      	bne.n	ec2 <mfg_seek_next_with_type+0x6>
}
     ed0:	bd38      	pop	{r3, r4, r5, pc}

00000ed2 <mfg_read_tlv_flash_area>:
    return mfg_read_tlv_body(reader, out_mfa, sizeof *out_mfa);
     ed2:	220a      	movs	r2, #10
     ed4:	f7ff bf88 	b.w	de8 <mfg_read_tlv_body>

00000ed8 <mfg_read_tlv_mmr_ref>:
    return mfg_read_tlv_body(reader, out_mr, sizeof *out_mr);
     ed8:	2201      	movs	r2, #1
     eda:	f7ff bf85 	b.w	de8 <mfg_read_tlv_body>
	...

00000ee0 <mfg_init>:
 * called before any TLVs can be read.  No-op if this function has already
 * executed successfully.
 */
void
mfg_init(void)
{
     ee0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int rc;

    if (mfg_initialized) {
     ee2:	4b10      	ldr	r3, [pc, #64]	; (f24 <mfg_init+0x44>)
     ee4:	7818      	ldrb	r0, [r3, #0]
     ee6:	b9c8      	cbnz	r0, f1c <mfg_init+0x3c>
        return;
    }
    mfg_initialized = true;
     ee8:	2201      	movs	r2, #1
     eea:	701a      	strb	r2, [r3, #0]

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();

    /* Read the first MMR from the boot loader area. */
    rc = mfg_read_next_mmr(FLASH_AREA_BOOTLOADER);
     eec:	f7ff ff2a 	bl	d44 <mfg_read_next_mmr>
    if (rc != 0) {
     ef0:	b9a0      	cbnz	r0, f1c <mfg_init+0x3c>
    mfg_open(&reader);
     ef2:	a802      	add	r0, sp, #8
     ef4:	f000 f818 	bl	f28 <mfg_open>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_MMR_REF);
     ef8:	2104      	movs	r1, #4
     efa:	a802      	add	r0, sp, #8
     efc:	f7ff ffde 	bl	ebc <mfg_seek_next_with_type>
        switch (rc) {
     f00:	b960      	cbnz	r0, f1c <mfg_init+0x3c>
        rc = mfg_read_tlv_mmr_ref(&reader, &mmr_ref);
     f02:	a901      	add	r1, sp, #4
     f04:	a802      	add	r0, sp, #8
     f06:	f7ff ffe7 	bl	ed8 <mfg_read_tlv_mmr_ref>
        if (rc != 0) {
     f0a:	b938      	cbnz	r0, f1c <mfg_init+0x3c>
        rc = mfg_read_next_mmr(mmr_ref.area_id);
     f0c:	f89d 0004 	ldrb.w	r0, [sp, #4]
     f10:	f7ff ff18 	bl	d44 <mfg_read_next_mmr>
        if (rc != 0 && rc != SYS_EALREADY) {
     f14:	2800      	cmp	r0, #0
     f16:	d0ef      	beq.n	ef8 <mfg_init+0x18>
     f18:	300b      	adds	r0, #11
     f1a:	d0ed      	beq.n	ef8 <mfg_init+0x18>

    return;

err:
    MFG_LOG(ERROR, "failed to read MMRs: rc=%d", rc);
}
     f1c:	b005      	add	sp, #20
     f1e:	f85d fb04 	ldr.w	pc, [sp], #4
     f22:	bf00      	nop
     f24:	2000019c 	.word	0x2000019c

00000f28 <mfg_open>:
{
     f28:	b510      	push	{r4, lr}
     f2a:	4604      	mov	r4, r0
    mfg_init();
     f2c:	f7ff ffd8 	bl	ee0 <mfg_init>
    *out_reader = (struct mfg_reader) { 0 };
     f30:	2300      	movs	r3, #0
     f32:	e9c4 3300 	strd	r3, r3, [r4]
}
     f36:	bd10      	pop	{r4, pc}

00000f38 <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
     f38:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
     f3a:	f7ff fd25 	bl	988 <__assert_func>

00000f3e <boot_read_image_size>:
 * the TLVs.
 */
#if !defined(MCUBOOT_OVERWRITE_ONLY) || defined(MCUBOOT_OVERWRITE_ONLY_FAST)
static int
boot_read_image_size(int slot, struct image_header *hdr, uint32_t *size)
{
     f3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
     f40:	460c      	mov	r4, r1
     f42:	4615      	mov	r5, r2
    const struct flash_area *fap;
    struct image_tlv_info info;
    int area_id;
    int rc;

    area_id = flash_area_id_from_image_slot(slot);
     f44:	f7ff fea1 	bl	c8a <flash_area_id_from_image_slot>
    rc = flash_area_open(area_id, &fap);
     f48:	4669      	mov	r1, sp
     f4a:	b2c0      	uxtb	r0, r0
     f4c:	f7ff fe00 	bl	b50 <flash_area_open>
    if (rc != 0) {
     f50:	b110      	cbz	r0, f58 <boot_read_image_size+0x1a>
        rc = BOOT_EFLASH;
     f52:	2001      	movs	r0, #1
    rc = 0;

done:
    flash_area_close(fap);
    return rc;
}
     f54:	b003      	add	sp, #12
     f56:	bd30      	pop	{r4, r5, pc}
    rc = flash_area_read(fap, hdr->ih_hdr_size + hdr->ih_img_size,
     f58:	8920      	ldrh	r0, [r4, #8]
     f5a:	68e1      	ldr	r1, [r4, #12]
     f5c:	2304      	movs	r3, #4
     f5e:	4401      	add	r1, r0
     f60:	eb0d 0203 	add.w	r2, sp, r3
     f64:	9800      	ldr	r0, [sp, #0]
     f66:	f7ff fe4b 	bl	c00 <flash_area_read>
    if (rc != 0) {
     f6a:	2800      	cmp	r0, #0
     f6c:	d1f1      	bne.n	f52 <boot_read_image_size+0x14>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
     f6e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
     f72:	f646 1307 	movw	r3, #26887	; 0x6907
     f76:	429a      	cmp	r2, r3
    *size = hdr->ih_hdr_size + hdr->ih_img_size + info.it_tlv_tot;
     f78:	bf01      	itttt	eq
     f7a:	68e2      	ldreq	r2, [r4, #12]
     f7c:	f8bd 3006 	ldrheq.w	r3, [sp, #6]
     f80:	189b      	addeq	r3, r3, r2
     f82:	8922      	ldrheq	r2, [r4, #8]
     f84:	bf06      	itte	eq
     f86:	189b      	addeq	r3, r3, r2
     f88:	602b      	streq	r3, [r5, #0]
        rc = BOOT_EBADIMAGE;
     f8a:	2003      	movne	r0, #3
    return rc;
     f8c:	e7e2      	b.n	f54 <boot_read_image_size+0x16>
	...

00000f90 <boot_copy_sector>:
 */
static int
boot_copy_sector(const struct flash_area *fap_src,
                 const struct flash_area *fap_dst,
                 uint32_t off_src, uint32_t off_dst, uint32_t sz)
{
     f90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f94:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
            chunk_sz = sizeof buf;
        } else {
            chunk_sz = sz - bytes_copied;
        }

        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     f98:	f8df b04c 	ldr.w	fp, [pc, #76]	; fe8 <boot_copy_sector+0x58>
{
     f9c:	4606      	mov	r6, r0
     f9e:	460f      	mov	r7, r1
     fa0:	4690      	mov	r8, r2
     fa2:	4699      	mov	r9, r3
    bytes_copied = 0;
     fa4:	2400      	movs	r4, #0
    while (bytes_copied < sz) {
     fa6:	4554      	cmp	r4, sl
     fa8:	d301      	bcc.n	fae <boot_copy_sector+0x1e>
        }

        bytes_copied += chunk_sz;
    }

    return 0;
     faa:	2000      	movs	r0, #0
     fac:	e00f      	b.n	fce <boot_copy_sector+0x3e>
        if (sz - bytes_copied > sizeof buf) {
     fae:	ebaa 0504 	sub.w	r5, sl, r4
     fb2:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
     fb6:	bf28      	it	cs
     fb8:	f44f 6580 	movcs.w	r5, #1024	; 0x400
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     fbc:	4a0a      	ldr	r2, [pc, #40]	; (fe8 <boot_copy_sector+0x58>)
     fbe:	462b      	mov	r3, r5
     fc0:	eb04 0108 	add.w	r1, r4, r8
     fc4:	4630      	mov	r0, r6
     fc6:	f7ff fe1b 	bl	c00 <flash_area_read>
        if (rc != 0) {
     fca:	b110      	cbz	r0, fd2 <boot_copy_sector+0x42>
            return BOOT_EFLASH;
     fcc:	2001      	movs	r0, #1
}
     fce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = flash_area_write(fap_dst, off_dst + bytes_copied, buf, chunk_sz);
     fd2:	462b      	mov	r3, r5
     fd4:	465a      	mov	r2, fp
     fd6:	eb04 0109 	add.w	r1, r4, r9
     fda:	4638      	mov	r0, r7
     fdc:	f7ff fe22 	bl	c24 <flash_area_write>
        if (rc != 0) {
     fe0:	2800      	cmp	r0, #0
     fe2:	d1f3      	bne.n	fcc <boot_copy_sector+0x3c>
        bytes_copied += chunk_sz;
     fe4:	442c      	add	r4, r5
     fe6:	e7de      	b.n	fa6 <boot_copy_sector+0x16>
     fe8:	20000224 	.word	0x20000224

00000fec <boot_read_image_headers>:
{
     fec:	b573      	push	{r0, r1, r4, r5, r6, lr}
     fee:	4e11      	ldr	r6, [pc, #68]	; (1034 <boot_read_image_headers+0x48>)
     ff0:	4605      	mov	r5, r0
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
     ff2:	2400      	movs	r4, #0
    area_id = flash_area_id_from_image_slot(slot);
     ff4:	4620      	mov	r0, r4
     ff6:	f7ff fe48 	bl	c8a <flash_area_id_from_image_slot>
    rc = flash_area_open(area_id, &fap);
     ffa:	a901      	add	r1, sp, #4
     ffc:	b2c0      	uxtb	r0, r0
     ffe:	f7ff fda7 	bl	b50 <flash_area_open>
    if (rc != 0) {
    1002:	4601      	mov	r1, r0
    1004:	b130      	cbz	r0, 1014 <boot_read_image_headers+0x28>
            if (i > 0 && !require_all) {
    1006:	b98c      	cbnz	r4, 102c <boot_read_image_headers+0x40>
    1008:	2401      	movs	r4, #1
}
    100a:	4620      	mov	r0, r4
    100c:	b002      	add	sp, #8
    100e:	bd70      	pop	{r4, r5, r6, pc}
    1010:	2401      	movs	r4, #1
    1012:	e7ef      	b.n	ff4 <boot_read_image_headers+0x8>
    rc = flash_area_read(fap, 0, out_hdr, sizeof *out_hdr);
    1014:	9801      	ldr	r0, [sp, #4]
    1016:	2320      	movs	r3, #32
    1018:	4632      	mov	r2, r6
    101a:	f7ff fdf1 	bl	c00 <flash_area_read>
    if (rc != 0) {
    101e:	2800      	cmp	r0, #0
    1020:	d1f1      	bne.n	1006 <boot_read_image_headers+0x1a>
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
    1022:	362c      	adds	r6, #44	; 0x2c
    1024:	2c00      	cmp	r4, #0
    1026:	d0f3      	beq.n	1010 <boot_read_image_headers+0x24>
    return 0;
    1028:	2400      	movs	r4, #0
    102a:	e7ee      	b.n	100a <boot_read_image_headers+0x1e>
            if (i > 0 && !require_all) {
    102c:	2d00      	cmp	r5, #0
    102e:	d0fb      	beq.n	1028 <boot_read_image_headers+0x3c>
    1030:	e7eb      	b.n	100a <boot_read_image_headers+0x1e>
    1032:	bf00      	nop
    1034:	200001bc 	.word	0x200001bc

00001038 <boot_status_init>:

#ifndef MCUBOOT_OVERWRITE_ONLY
static inline int
boot_status_init(const struct flash_area *fap, const struct boot_status *bs)
{
    1038:	b537      	push	{r0, r1, r2, r4, r5, lr}
    103a:	4604      	mov	r4, r0
    103c:	460d      	mov	r5, r1
    struct boot_swap_state swap_state;
    int rc;

    BOOT_LOG_DBG("initializing status; fa_id=%d", fap->fa_id);

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY, &swap_state);
    103e:	2002      	movs	r0, #2
    1040:	a901      	add	r1, sp, #4
    1042:	f000 fd1a 	bl	1a7a <boot_read_swap_state_by_id>
    assert(rc == 0);
    1046:	b128      	cbz	r0, 1054 <boot_status_init+0x1c>
    1048:	2300      	movs	r3, #0
    104a:	461a      	mov	r2, r3
    104c:	4619      	mov	r1, r3
    104e:	4618      	mov	r0, r3
    1050:	f7ff fc9a 	bl	988 <__assert_func>

    if (bs->swap_type != BOOT_SWAP_TYPE_NONE) {
    1054:	79a9      	ldrb	r1, [r5, #6]
    1056:	2901      	cmp	r1, #1
    1058:	d004      	beq.n	1064 <boot_status_init+0x2c>
        rc = boot_write_swap_type(fap, bs->swap_type);
    105a:	4620      	mov	r0, r4
    105c:	f000 fd70 	bl	1b40 <boot_write_swap_type>
        assert(rc == 0);
    1060:	2800      	cmp	r0, #0
    1062:	d1f1      	bne.n	1048 <boot_status_init+0x10>
    }

    if (swap_state.image_ok == BOOT_FLAG_SET) {
    1064:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1068:	2b01      	cmp	r3, #1
    106a:	d104      	bne.n	1076 <boot_status_init+0x3e>
        rc = boot_write_image_ok(fap);
    106c:	4620      	mov	r0, r4
    106e:	f000 fd62 	bl	1b36 <boot_write_image_ok>
        assert(rc == 0);
    1072:	2800      	cmp	r0, #0
    1074:	d1e8      	bne.n	1048 <boot_status_init+0x10>
    }

    rc = boot_write_swap_size(fap, bs->swap_size);
    1076:	68a9      	ldr	r1, [r5, #8]
    1078:	4620      	mov	r0, r4
    107a:	f000 fd66 	bl	1b4a <boot_write_swap_size>
    assert(rc == 0);
    107e:	2800      	cmp	r0, #0
    1080:	d1e2      	bne.n	1048 <boot_status_init+0x10>

    rc = boot_write_enc_key(fap, 1, bs->enckey[1]);
    assert(rc == 0);
#endif

    rc = boot_write_magic(fap);
    1082:	4620      	mov	r0, r4
    1084:	f000 fd44 	bl	1b10 <boot_write_magic>
    assert(rc == 0);
    1088:	2800      	cmp	r0, #0
    108a:	d1dd      	bne.n	1048 <boot_status_init+0x10>

    return 0;
}
    108c:	b003      	add	sp, #12
    108e:	bd30      	pop	{r4, r5, pc}

00001090 <boot_validate_slot.constprop.0.isra.0>:
boot_validate_slot(int slot, struct boot_status *bs)
    1090:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    rc = flash_area_open(flash_area_id_from_image_slot(slot), &fap);
    1092:	2001      	movs	r0, #1
    1094:	f7ff fdf9 	bl	c8a <flash_area_id_from_image_slot>
    1098:	a904      	add	r1, sp, #16
    109a:	b2c0      	uxtb	r0, r0
    109c:	f7ff fd58 	bl	b50 <flash_area_open>
    if (rc != 0) {
    10a0:	2800      	cmp	r0, #0
    10a2:	d137      	bne.n	1114 <boot_validate_slot.constprop.0.isra.0+0x84>
    rc = flash_area_open(flash_area_id_from_image_slot(slot), &fap);
    10a4:	2001      	movs	r0, #1
    10a6:	f7ff fdf0 	bl	c8a <flash_area_id_from_image_slot>
    10aa:	a905      	add	r1, sp, #20
    10ac:	b2c0      	uxtb	r0, r0
    10ae:	f7ff fd4f 	bl	b50 <flash_area_open>
    if (rc != 0) {
    10b2:	b138      	cbz	r0, 10c4 <boot_validate_slot.constprop.0.isra.0+0x34>
    if (boot_check_header_erased(slot) == 0 || (hdr->ih_flags & IMAGE_F_NON_BOOTABLE)) {
    10b4:	4818      	ldr	r0, [pc, #96]	; (1118 <boot_validate_slot.constprop.0.isra.0+0x88>)
    10b6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    10b8:	f013 0310 	ands.w	r3, r3, #16
    10bc:	d011      	beq.n	10e2 <boot_validate_slot.constprop.0.isra.0+0x52>
        rc = -1;
    10be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    10c2:	e024      	b.n	110e <boot_validate_slot.constprop.0.isra.0+0x7e>
    erased_val = flash_area_erased_val(fap);
    10c4:	9805      	ldr	r0, [sp, #20]
    10c6:	f7ff fdd4 	bl	c72 <flash_area_erased_val>
    10ca:	4a14      	ldr	r2, [pc, #80]	; (111c <boot_validate_slot.constprop.0.isra.0+0x8c>)
    10cc:	b2c0      	uxtb	r0, r0
    10ce:	2305      	movs	r3, #5
    for (i = 0; i < len; i++) {
    10d0:	3b01      	subs	r3, #1
    10d2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    10d6:	d0f2      	beq.n	10be <boot_validate_slot.constprop.0.isra.0+0x2e>
        if (val != p[i]) {
    10d8:	f812 1b01 	ldrb.w	r1, [r2], #1
    10dc:	4288      	cmp	r0, r1
    10de:	d0f7      	beq.n	10d0 <boot_validate_slot.constprop.0.isra.0+0x40>
    10e0:	e7e8      	b.n	10b4 <boot_validate_slot.constprop.0.isra.0+0x24>
    if ((hdr->ih_magic != IMAGE_MAGIC || boot_image_check(hdr, fap, bs) != 0)) {
    10e2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    10e4:	4a0e      	ldr	r2, [pc, #56]	; (1120 <boot_validate_slot.constprop.0.isra.0+0x90>)
    10e6:	4291      	cmp	r1, r2
    10e8:	d005      	beq.n	10f6 <boot_validate_slot.constprop.0.isra.0+0x66>
            flash_area_erase(fap, 0, fap->fa_size);
    10ea:	9804      	ldr	r0, [sp, #16]
    10ec:	2100      	movs	r1, #0
    10ee:	6882      	ldr	r2, [r0, #8]
    10f0:	f7ff fdaa 	bl	c48 <flash_area_erase>
        goto out;
    10f4:	e7e3      	b.n	10be <boot_validate_slot.constprop.0.isra.0+0x2e>
    if (bootutil_img_validate(hdr, fap, tmpbuf, BOOT_TMPBUF_SZ,
    10f6:	e9cd 3301 	strd	r3, r3, [sp, #4]
    10fa:	9300      	str	r3, [sp, #0]
    10fc:	4a09      	ldr	r2, [pc, #36]	; (1124 <boot_validate_slot.constprop.0.isra.0+0x94>)
    10fe:	9904      	ldr	r1, [sp, #16]
    1100:	f44f 7380 	mov.w	r3, #256	; 0x100
    1104:	302c      	adds	r0, #44	; 0x2c
    1106:	f000 fd93 	bl	1c30 <bootutil_img_validate>
    110a:	2800      	cmp	r0, #0
    110c:	d1ed      	bne.n	10ea <boot_validate_slot.constprop.0.isra.0+0x5a>
}
    110e:	b007      	add	sp, #28
    1110:	f85d fb04 	ldr.w	pc, [sp], #4
        return BOOT_EFLASH;
    1114:	2001      	movs	r0, #1
    1116:	e7fa      	b.n	110e <boot_validate_slot.constprop.0.isra.0+0x7e>
    1118:	200001bc 	.word	0x200001bc
    111c:	200001e8 	.word	0x200001e8
    1120:	96f3b83d 	.word	0x96f3b83d
    1124:	20001824 	.word	0x20001824

00001128 <boot_read_sectors>:
{
    1128:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int rc;

    switch (flash_area) {
    case FLASH_AREA_IMAGE_PRIMARY:
        rc = flash_area_to_sectors(flash_area, &num_sectors,
                                   state->imgs[BOOT_PRIMARY_SLOT].sectors);
    112a:	4c18      	ldr	r4, [pc, #96]	; (118c <boot_read_sectors+0x64>)
    int num_sectors = BOOT_MAX_IMG_SECTORS;
    112c:	2580      	movs	r5, #128	; 0x80
        rc = flash_area_to_sectors(flash_area, &num_sectors,
    112e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    int num_sectors = BOOT_MAX_IMG_SECTORS;
    1130:	9501      	str	r5, [sp, #4]
        rc = flash_area_to_sectors(flash_area, &num_sectors,
    1132:	a901      	add	r1, sp, #4
    1134:	2001      	movs	r0, #1
    1136:	f7ff fd29 	bl	b8c <flash_area_to_sectors>
        state->imgs[BOOT_PRIMARY_SLOT].num_sectors = (size_t)num_sectors;
    113a:	9b01      	ldr	r3, [sp, #4]
    113c:	62a3      	str	r3, [r4, #40]	; 0x28
    if (rc != 0) {
    113e:	b118      	cbz	r0, 1148 <boot_read_sectors+0x20>
        return BOOT_EFLASH;
    1140:	2501      	movs	r5, #1
}
    1142:	4628      	mov	r0, r5
    1144:	b002      	add	sp, #8
    1146:	bd70      	pop	{r4, r5, r6, pc}
        break;
    case FLASH_AREA_IMAGE_SECONDARY:
        rc = flash_area_to_sectors(flash_area, &num_sectors,
    1148:	6d22      	ldr	r2, [r4, #80]	; 0x50
    int num_sectors = BOOT_MAX_IMG_SECTORS;
    114a:	9501      	str	r5, [sp, #4]
        rc = flash_area_to_sectors(flash_area, &num_sectors,
    114c:	a901      	add	r1, sp, #4
    114e:	2002      	movs	r0, #2
    1150:	f7ff fd1c 	bl	b8c <flash_area_to_sectors>
                                   state->imgs[BOOT_SECONDARY_SLOT].sectors);
        state->imgs[BOOT_SECONDARY_SLOT].num_sectors = (size_t)num_sectors;
    1154:	9b01      	ldr	r3, [sp, #4]
    1156:	6563      	str	r3, [r4, #84]	; 0x54
    if (rc != 0) {
    1158:	2800      	cmp	r0, #0
    115a:	d1f1      	bne.n	1140 <boot_read_sectors+0x18>
        break;
    case FLASH_AREA_IMAGE_SCRATCH:
        rc = flash_area_to_sectors(flash_area, &num_sectors,
    115c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    int num_sectors = BOOT_MAX_IMG_SECTORS;
    115e:	9501      	str	r5, [sp, #4]
        rc = flash_area_to_sectors(flash_area, &num_sectors,
    1160:	a901      	add	r1, sp, #4
    1162:	2003      	movs	r0, #3
    1164:	f7ff fd12 	bl	b8c <flash_area_to_sectors>
                                   state->scratch.sectors);
        state->scratch.num_sectors = (size_t)num_sectors;
    1168:	9b01      	ldr	r3, [sp, #4]
    116a:	6623      	str	r3, [r4, #96]	; 0x60
    if (rc != 0) {
    116c:	4605      	mov	r5, r0
    116e:	2800      	cmp	r0, #0
    1170:	d1e6      	bne.n	1140 <boot_read_sectors+0x18>
    elem_sz = flash_area_align(boot_data.imgs[BOOT_PRIMARY_SLOT].area);
    1172:	6a20      	ldr	r0, [r4, #32]
    1174:	f7ff fd7a 	bl	c6c <flash_area_align>
    1178:	4606      	mov	r6, r0
    align = flash_area_align(boot_data.scratch.area);
    117a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    117c:	f7ff fd76 	bl	c6c <flash_area_align>
    BOOT_WRITE_SZ(&boot_data) = boot_write_sz();
    1180:	4286      	cmp	r6, r0
    1182:	bf38      	it	cc
    1184:	4606      	movcc	r6, r0
    1186:	f884 6064 	strb.w	r6, [r4, #100]	; 0x64
    return 0;
    118a:	e7da      	b.n	1142 <boot_read_sectors+0x1a>
    118c:	200001bc 	.word	0x200001bc

00001190 <boot_erase_trailer_sectors>:
#endif

#ifndef MCUBOOT_OVERWRITE_ONLY
static int
boot_erase_trailer_sectors(const struct flash_area *fap)
{
    1190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint32_t sz;
    int rc;

    BOOT_LOG_DBG("erasing trailer; fa_id=%d", fap->fa_id);

    switch (fap->fa_id) {
    1194:	7803      	ldrb	r3, [r0, #0]
    1196:	2b01      	cmp	r3, #1
{
    1198:	4606      	mov	r6, r0
    switch (fap->fa_id) {
    119a:	d022      	beq.n	11e2 <boot_erase_trailer_sectors+0x52>
    119c:	2b02      	cmp	r3, #2
    119e:	d129      	bne.n	11f4 <boot_erase_trailer_sectors+0x64>
    11a0:	2501      	movs	r5, #1
    return state->imgs[slot].num_sectors;
    11a2:	4b15      	ldr	r3, [pc, #84]	; (11f8 <boot_erase_trailer_sectors+0x68>)
    11a4:	222c      	movs	r2, #44	; 0x2c
    11a6:	fb02 3505 	mla	r5, r2, r5, r3
        return BOOT_EFLASH;
    }

    /* delete starting from last sector and moving to beginning */
    sector = boot_img_num_sectors(&boot_data, slot) - 1;
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(&boot_data));
    11aa:	f893 0064 	ldrb.w	r0, [r3, #100]	; 0x64
    sector = boot_img_num_sectors(&boot_data, slot) - 1;
    11ae:	6aac      	ldr	r4, [r5, #40]	; 0x28
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(&boot_data));
    11b0:	f000 fbd2 	bl	1958 <boot_trailer_sz>
    sector = boot_img_num_sectors(&boot_data, slot) - 1;
    11b4:	3c01      	subs	r4, #1
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(&boot_data));
    11b6:	4680      	mov	r8, r0
    total_sz = 0;
    11b8:	2700      	movs	r7, #0
    return state->imgs[slot].sectors[sector].fa_size;
    11ba:	f04f 0a0c 	mov.w	sl, #12
    11be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    11c0:	fb0a 3204 	mla	r2, sl, r4, r3
    return state->imgs[slot].sectors[sector].fa_off -
    11c4:	e9d2 1901 	ldrd	r1, r9, [r2, #4]
    11c8:	685b      	ldr	r3, [r3, #4]
    return flash_area_erase(fap, off, sz);
    11ca:	464a      	mov	r2, r9
    11cc:	1ac9      	subs	r1, r1, r3
    11ce:	4630      	mov	r0, r6
    11d0:	f7ff fd3a 	bl	c48 <flash_area_erase>
    do {
        sz = boot_img_sector_size(&boot_data, slot, sector);
        off = boot_img_sector_off(&boot_data, slot, sector);
        rc = boot_erase_sector(fap, off, sz);
        assert(rc == 0);
    11d4:	b138      	cbz	r0, 11e6 <boot_erase_trailer_sectors+0x56>
    11d6:	2300      	movs	r3, #0
    11d8:	461a      	mov	r2, r3
    11da:	4619      	mov	r1, r3
    11dc:	4618      	mov	r0, r3
    11de:	f7ff fbd3 	bl	988 <__assert_func>
        slot = BOOT_PRIMARY_SLOT;
    11e2:	2500      	movs	r5, #0
    11e4:	e7dd      	b.n	11a2 <boot_erase_trailer_sectors+0x12>

        sector--;
        total_sz += sz;
    11e6:	444f      	add	r7, r9
    } while (total_sz < trailer_sz);
    11e8:	45b8      	cmp	r8, r7
        sector--;
    11ea:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
    } while (total_sz < trailer_sz);
    11ee:	d8e6      	bhi.n	11be <boot_erase_trailer_sectors+0x2e>

    return rc;
}
    11f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    switch (fap->fa_id) {
    11f4:	2001      	movs	r0, #1
    11f6:	e7fb      	b.n	11f0 <boot_erase_trailer_sectors+0x60>
    11f8:	200001bc 	.word	0x200001bc

000011fc <boot_write_status>:
{
    11fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t buf[BOOT_MAX_ALIGN];
    1200:	4b20      	ldr	r3, [pc, #128]	; (1284 <boot_write_status+0x88>)
{
    1202:	b082      	sub	sp, #8
    uint8_t buf[BOOT_MAX_ALIGN];
    1204:	681d      	ldr	r5, [r3, #0]
    1206:	1deb      	adds	r3, r5, #7
    1208:	f023 0307 	bic.w	r3, r3, #7
{
    120c:	af00      	add	r7, sp, #0
    uint8_t buf[BOOT_MAX_ALIGN];
    120e:	ebad 0d03 	sub.w	sp, sp, r3
    if (bs->use_scratch) {
    1212:	7943      	ldrb	r3, [r0, #5]
        area_id = FLASH_AREA_IMAGE_PRIMARY;
    1214:	2b00      	cmp	r3, #0
{
    1216:	4606      	mov	r6, r0
    rc = flash_area_open(area_id, &fap);
    1218:	f107 0104 	add.w	r1, r7, #4
    121c:	bf14      	ite	ne
    121e:	2003      	movne	r0, #3
    1220:	2001      	moveq	r0, #1
    1222:	f7ff fc95 	bl	b50 <flash_area_open>
    if (rc != 0) {
    1226:	bb58      	cbnz	r0, 1280 <boot_write_status+0x84>
    off = boot_status_off(fap) +
    1228:	6878      	ldr	r0, [r7, #4]
    122a:	f000 fba8 	bl	197e <boot_status_off>
                                   BOOT_WRITE_SZ(&boot_data));
    122e:	4b16      	ldr	r3, [pc, #88]	; (1288 <boot_write_status+0x8c>)
          boot_status_internal_off(bs->idx, bs->state,
    1230:	7934      	ldrb	r4, [r6, #4]
    1232:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
    return (idx - BOOT_STATUS_IDX_0) * idx_sz +
    1236:	6833      	ldr	r3, [r6, #0]
    1238:	3b01      	subs	r3, #1
    123a:	4353      	muls	r3, r2
    123c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
           (state - BOOT_STATUS_STATE_0) * elem_sz;
    1240:	3c01      	subs	r4, #1
    return (idx - BOOT_STATUS_IDX_0) * idx_sz +
    1242:	fb02 3404 	mla	r4, r2, r4, r3
    off = boot_status_off(fap) +
    1246:	4404      	add	r4, r0
    align = flash_area_align(fap);
    1248:	6878      	ldr	r0, [r7, #4]
    124a:	f7ff fd0f 	bl	c6c <flash_area_align>
    124e:	4680      	mov	r8, r0
    erased_val = flash_area_erased_val(fap);
    1250:	6878      	ldr	r0, [r7, #4]
    1252:	f7ff fd0e 	bl	c72 <flash_area_erased_val>
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    1256:	462a      	mov	r2, r5
    1258:	b2c1      	uxtb	r1, r0
    125a:	4668      	mov	r0, sp
    125c:	f7ff fc5d 	bl	b1a <memset>
    buf[0] = bs->state;
    1260:	7933      	ldrb	r3, [r6, #4]
    1262:	f88d 3000 	strb.w	r3, [sp]
    rc = flash_area_write(fap, off, buf, align);
    1266:	6878      	ldr	r0, [r7, #4]
    1268:	4643      	mov	r3, r8
    126a:	466a      	mov	r2, sp
    126c:	4621      	mov	r1, r4
    126e:	f7ff fcd9 	bl	c24 <flash_area_write>
    if (rc != 0) {
    1272:	3800      	subs	r0, #0
    1274:	bf18      	it	ne
    1276:	2001      	movne	r0, #1
}
    1278:	3708      	adds	r7, #8
    127a:	46bd      	mov	sp, r7
    127c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = BOOT_EFLASH;
    1280:	2001      	movs	r0, #1
    return rc;
    1282:	e7f9      	b.n	1278 <boot_write_status+0x7c>
    1284:	000023a4 	.word	0x000023a4
    1288:	200001bc 	.word	0x200001bc

0000128c <boot_swap_image>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
boot_swap_image(struct boot_status *bs)
{
    128c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1290:	4604      	mov	r4, r0
    1292:	b08b      	sub	sp, #44	; 0x2c

    /* FIXME: just do this if asked by user? */

    size = copy_size = 0;

    if (bs->idx == BOOT_STATUS_IDX_0 && bs->state == BOOT_STATUS_STATE_0) {
    1294:	6823      	ldr	r3, [r4, #0]
    1296:	4d29      	ldr	r5, [pc, #164]	; (133c <boot_swap_image+0xb0>)
    size = copy_size = 0;
    1298:	2000      	movs	r0, #0
    if (bs->idx == BOOT_STATUS_IDX_0 && bs->state == BOOT_STATUS_STATE_0) {
    129a:	2b01      	cmp	r3, #1
    size = copy_size = 0;
    129c:	e9cd 0004 	strd	r0, r0, [sp, #16]
    if (bs->idx == BOOT_STATUS_IDX_0 && bs->state == BOOT_STATUS_STATE_0) {
    12a0:	d142      	bne.n	1328 <boot_swap_image+0x9c>
    12a2:	7923      	ldrb	r3, [r4, #4]
    12a4:	2b01      	cmp	r3, #1
    12a6:	d13f      	bne.n	1328 <boot_swap_image+0x9c>
        /*
         * No swap ever happened, so need to find the largest image which
         * will be used to determine the amount of sectors to swap.
         */
        hdr = boot_img_hdr(&boot_data, BOOT_PRIMARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
    12a8:	4e25      	ldr	r6, [pc, #148]	; (1340 <boot_swap_image+0xb4>)
    12aa:	682b      	ldr	r3, [r5, #0]
    12ac:	42b3      	cmp	r3, r6
    12ae:	d10a      	bne.n	12c6 <boot_swap_image+0x3a>
            rc = boot_read_image_size(BOOT_PRIMARY_SLOT, hdr, &copy_size);
    12b0:	aa05      	add	r2, sp, #20
    12b2:	4629      	mov	r1, r5
    12b4:	f7ff fe43 	bl	f3e <boot_read_image_size>
            assert(rc == 0);
    12b8:	b128      	cbz	r0, 12c6 <boot_swap_image+0x3a>
    12ba:	2300      	movs	r3, #0
    12bc:	461a      	mov	r2, r3
    12be:	4619      	mov	r1, r3
    12c0:	4618      	mov	r0, r3
    12c2:	f7ff fb61 	bl	988 <__assert_func>
            memset(bs->enckey[0], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        hdr = boot_img_hdr(&boot_data, BOOT_SECONDARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
    12c6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    12c8:	42b3      	cmp	r3, r6
    12ca:	d106      	bne.n	12da <boot_swap_image+0x4e>
            rc = boot_read_image_size(BOOT_SECONDARY_SLOT, hdr, &size);
    12cc:	491d      	ldr	r1, [pc, #116]	; (1344 <boot_swap_image+0xb8>)
    12ce:	aa04      	add	r2, sp, #16
    12d0:	2001      	movs	r0, #1
    12d2:	f7ff fe34 	bl	f3e <boot_read_image_size>
            assert(rc == 0);
    12d6:	2800      	cmp	r0, #0
    12d8:	d1ef      	bne.n	12ba <boot_swap_image+0x2e>
        } else {
            memset(bs->enckey[1], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        if (size > copy_size) {
    12da:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
    12de:	4293      	cmp	r3, r2
            copy_size = size;
    12e0:	bf88      	it	hi
    12e2:	9305      	strhi	r3, [sp, #20]
        }

        bs->swap_size = copy_size;
    12e4:	9b05      	ldr	r3, [sp, #20]
    12e6:	60a3      	str	r3, [r4, #8]
    return state->imgs[slot].sectors[sector].fa_size;
    12e8:	2300      	movs	r3, #0
     * find what is the last sector in the primary slot that needs swapping.
     * Since we already know that both slots are compatible, the secondary
     * slot's last sector is not really required after this check is finished.
     */
    while (1) {
        if ((primary_slot_size < copy_size) ||
    12ea:	9905      	ldr	r1, [sp, #20]
    12ec:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    12ee:	6d2e      	ldr	r6, [r5, #80]	; 0x50
    12f0:	2008      	movs	r0, #8
    12f2:	461a      	mov	r2, r3
    12f4:	4699      	mov	r9, r3
    12f6:	4291      	cmp	r1, r2
    12f8:	d801      	bhi.n	12fe <boot_swap_image+0x72>
    12fa:	429a      	cmp	r2, r3
    12fc:	d202      	bcs.n	1304 <boot_swap_image+0x78>
            (primary_slot_size < secondary_slot_size)) {
           primary_slot_size += boot_img_sector_size(&boot_data,
    12fe:	f857 c000 	ldr.w	ip, [r7, r0]
    1302:	4462      	add	r2, ip
                                                     BOOT_PRIMARY_SLOT,
                                                     last_sector_idx);
        }
        if ((secondary_slot_size < copy_size) ||
    1304:	4299      	cmp	r1, r3
    1306:	d802      	bhi.n	130e <boot_swap_image+0x82>
    1308:	429a      	cmp	r2, r3
    130a:	f240 8148 	bls.w	159e <boot_swap_image+0x312>
            (secondary_slot_size < primary_slot_size)) {
           secondary_slot_size += boot_img_sector_size(&boot_data,
    130e:	f856 c000 	ldr.w	ip, [r6, r0]
                                                       BOOT_SECONDARY_SLOT,
                                                       last_idx_secondary_slot);
        }
        if (primary_slot_size >= copy_size &&
    1312:	4291      	cmp	r1, r2
           secondary_slot_size += boot_img_sector_size(&boot_data,
    1314:	4463      	add	r3, ip
        if (primary_slot_size >= copy_size &&
    1316:	d803      	bhi.n	1320 <boot_swap_image+0x94>
    1318:	4299      	cmp	r1, r3
    131a:	d801      	bhi.n	1320 <boot_swap_image+0x94>
                secondary_slot_size >= copy_size &&
    131c:	429a      	cmp	r2, r3
    131e:	d013      	beq.n	1348 <boot_swap_image+0xbc>
                primary_slot_size == secondary_slot_size) {
            break;
        }
        last_sector_idx++;
    1320:	f109 0901 	add.w	r9, r9, #1
    while (1) {
    1324:	300c      	adds	r0, #12
        if ((primary_slot_size < copy_size) ||
    1326:	e7e6      	b.n	12f6 <boot_swap_image+0x6a>
        rc = boot_read_swap_size(&bs->swap_size);
    1328:	f104 0008 	add.w	r0, r4, #8
    132c:	f000 fbac 	bl	1a88 <boot_read_swap_size>
        assert(rc == 0);
    1330:	2800      	cmp	r0, #0
    1332:	d1c2      	bne.n	12ba <boot_swap_image+0x2e>
        copy_size = bs->swap_size;
    1334:	68a3      	ldr	r3, [r4, #8]
    1336:	9305      	str	r3, [sp, #20]
    1338:	e7d6      	b.n	12e8 <boot_swap_image+0x5c>
    133a:	bf00      	nop
    133c:	200001bc 	.word	0x200001bc
    1340:	96f3b83d 	.word	0x96f3b83d
    1344:	200001e8 	.word	0x200001e8
        last_idx_secondary_slot++;
    }

    swap_idx = 0;
    1348:	f04f 0b00 	mov.w	fp, #0
    134c:	f04f 0a0c 	mov.w	sl, #12
    return BOOT_SCRATCH_AREA(state)->fa_size;
    1350:	6dab      	ldr	r3, [r5, #88]	; 0x58
    return state->imgs[slot].sectors[sector].fa_size;
    1352:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    return BOOT_SCRATCH_AREA(state)->fa_size;
    1354:	6899      	ldr	r1, [r3, #8]
    return state->imgs[slot].sectors[sector].fa_size;
    1356:	f102 0008 	add.w	r0, r2, #8
    sz = 0;
    135a:	2300      	movs	r3, #0
    135c:	4698      	mov	r8, r3
    135e:	fb0a f309 	mul.w	r3, sl, r9
        new_sz = sz + boot_img_sector_size(&boot_data, BOOT_PRIMARY_SLOT, i);
    1362:	58c3      	ldr	r3, [r0, r3]
    1364:	4443      	add	r3, r8
        if (new_sz > scratch_sz) {
    1366:	4299      	cmp	r1, r3
    1368:	d303      	bcc.n	1372 <boot_swap_image+0xe6>
    for (i = last_sector_idx; i >= 0; i--) {
    136a:	f1b9 0901 	subs.w	r9, r9, #1
    136e:	d2f5      	bcs.n	135c <boot_swap_image+0xd0>
    1370:	4698      	mov	r8, r3
    while (last_sector_idx >= 0) {
        sz = boot_copy_sz(last_sector_idx, &first_sector_idx);
        if (swap_idx >= (bs->idx - BOOT_STATUS_IDX_0)) {
    1372:	6823      	ldr	r3, [r4, #0]
    1374:	3b01      	subs	r3, #1
    1376:	455b      	cmp	r3, fp
    1378:	f200 8105 	bhi.w	1586 <boot_swap_image+0x2fa>
    return state->imgs[slot].sectors[sector].fa_off -
    137c:	fb09 a30a 	mla	r3, r9, sl, sl
    1380:	4413      	add	r3, r2
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(&boot_data));
    1382:	f895 0064 	ldrb.w	r0, [r5, #100]	; 0x64
    1386:	685e      	ldr	r6, [r3, #4]
    1388:	6853      	ldr	r3, [r2, #4]
    138a:	1af6      	subs	r6, r6, r3
    138c:	f000 fae4 	bl	1958 <boot_trailer_sz>
    1390:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1392:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1394:	3b01      	subs	r3, #1
    1396:	fb0a 1303 	mla	r3, sl, r3, r1
    139a:	6849      	ldr	r1, [r1, #4]
    139c:	685b      	ldr	r3, [r3, #4]
    if (img_off + sz > boot_img_sector_off(&boot_data, BOOT_PRIMARY_SLOT,
    139e:	eb08 0206 	add.w	r2, r8, r6
    13a2:	1a5b      	subs	r3, r3, r1
    13a4:	429a      	cmp	r2, r3
    bs->use_scratch = (bs->idx == BOOT_STATUS_IDX_0 && copy_sz != sz);
    13a6:	6823      	ldr	r3, [r4, #0]
        copy_sz -= trailer_sz;
    13a8:	bf8c      	ite	hi
    13aa:	eba8 0700 	subhi.w	r7, r8, r0
    13ae:	4647      	movls	r7, r8
    bs->use_scratch = (bs->idx == BOOT_STATUS_IDX_0 && copy_sz != sz);
    13b0:	2b01      	cmp	r3, #1
    13b2:	f040 80f2 	bne.w	159a <boot_swap_image+0x30e>
    13b6:	ebb8 0307 	subs.w	r3, r8, r7
    13ba:	bf18      	it	ne
    13bc:	2301      	movne	r3, #1
    13be:	7163      	strb	r3, [r4, #5]
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY, &fap_primary_slot);
    13c0:	a906      	add	r1, sp, #24
    13c2:	2001      	movs	r0, #1
    13c4:	f7ff fbc4 	bl	b50 <flash_area_open>
    assert (rc == 0);
    13c8:	2800      	cmp	r0, #0
    13ca:	f47f af76 	bne.w	12ba <boot_swap_image+0x2e>
    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY, &fap_secondary_slot);
    13ce:	a907      	add	r1, sp, #28
    13d0:	2002      	movs	r0, #2
    13d2:	f7ff fbbd 	bl	b50 <flash_area_open>
    assert (rc == 0);
    13d6:	2800      	cmp	r0, #0
    13d8:	f47f af6f 	bne.w	12ba <boot_swap_image+0x2e>
    rc = flash_area_open(FLASH_AREA_IMAGE_SCRATCH, &fap_scratch);
    13dc:	a908      	add	r1, sp, #32
    13de:	2003      	movs	r0, #3
    13e0:	f7ff fbb6 	bl	b50 <flash_area_open>
    assert (rc == 0);
    13e4:	4601      	mov	r1, r0
    13e6:	2800      	cmp	r0, #0
    13e8:	f47f af67 	bne.w	12ba <boot_swap_image+0x2e>
    if (bs->state == BOOT_STATUS_STATE_0) {
    13ec:	7923      	ldrb	r3, [r4, #4]
    13ee:	2b01      	cmp	r3, #1
    13f0:	d139      	bne.n	1466 <boot_swap_image+0x1da>
        rc = boot_erase_sector(fap_scratch, 0, fap_scratch->fa_size);
    13f2:	9808      	ldr	r0, [sp, #32]
    return flash_area_erase(fap, off, sz);
    13f4:	6882      	ldr	r2, [r0, #8]
    13f6:	f7ff fc27 	bl	c48 <flash_area_erase>
        assert(rc == 0);
    13fa:	2800      	cmp	r0, #0
    13fc:	f47f af5d 	bne.w	12ba <boot_swap_image+0x2e>
        if (bs->idx == BOOT_STATUS_IDX_0) {
    1400:	6823      	ldr	r3, [r4, #0]
    1402:	2b01      	cmp	r3, #1
    1404:	d11d      	bne.n	1442 <boot_swap_image+0x1b6>
            rc = boot_status_init(fap_scratch, bs);
    1406:	9808      	ldr	r0, [sp, #32]
    1408:	4621      	mov	r1, r4
    140a:	f7ff fe15 	bl	1038 <boot_status_init>
            assert(rc == 0);
    140e:	2800      	cmp	r0, #0
    1410:	f47f af53 	bne.w	12ba <boot_swap_image+0x2e>
            if (!bs->use_scratch) {
    1414:	7963      	ldrb	r3, [r4, #5]
    1416:	b9a3      	cbnz	r3, 1442 <boot_swap_image+0x1b6>
                rc = boot_erase_trailer_sectors(fap_primary_slot);
    1418:	9806      	ldr	r0, [sp, #24]
    141a:	f7ff feb9 	bl	1190 <boot_erase_trailer_sectors>
                assert(rc == 0);
    141e:	2800      	cmp	r0, #0
    1420:	f47f af4b 	bne.w	12ba <boot_swap_image+0x2e>
                rc = boot_status_init(fap_primary_slot, bs);
    1424:	9806      	ldr	r0, [sp, #24]
    1426:	4621      	mov	r1, r4
    1428:	f7ff fe06 	bl	1038 <boot_status_init>
                assert(rc == 0);
    142c:	2800      	cmp	r0, #0
    142e:	f47f af44 	bne.w	12ba <boot_swap_image+0x2e>
                rc = boot_erase_sector(fap_scratch, 0, fap_scratch->fa_size);
    1432:	9808      	ldr	r0, [sp, #32]
    return flash_area_erase(fap, off, sz);
    1434:	2100      	movs	r1, #0
    1436:	6882      	ldr	r2, [r0, #8]
    1438:	f7ff fc06 	bl	c48 <flash_area_erase>
                assert(rc == 0);
    143c:	2800      	cmp	r0, #0
    143e:	f47f af3c 	bne.w	12ba <boot_swap_image+0x2e>
        rc = boot_copy_sector(fap_secondary_slot, fap_scratch,
    1442:	e9dd 0107 	ldrd	r0, r1, [sp, #28]
    1446:	9700      	str	r7, [sp, #0]
    1448:	2300      	movs	r3, #0
    144a:	4632      	mov	r2, r6
    144c:	f7ff fda0 	bl	f90 <boot_copy_sector>
        assert(rc == 0);
    1450:	2800      	cmp	r0, #0
    1452:	f47f af32 	bne.w	12ba <boot_swap_image+0x2e>
        bs->state = BOOT_STATUS_STATE_1;
    1456:	2302      	movs	r3, #2
    1458:	7123      	strb	r3, [r4, #4]
        rc = boot_write_status(bs);
    145a:	4620      	mov	r0, r4
    145c:	f7ff fece 	bl	11fc <boot_write_status>
        BOOT_STATUS_ASSERT(rc == 0);
    1460:	2800      	cmp	r0, #0
    1462:	f47f af2a 	bne.w	12ba <boot_swap_image+0x2e>
    if (bs->state == BOOT_STATUS_STATE_1) {
    1466:	7923      	ldrb	r3, [r4, #4]
    1468:	2b02      	cmp	r3, #2
    146a:	d124      	bne.n	14b6 <boot_swap_image+0x22a>
    return flash_area_erase(fap, off, sz);
    146c:	9807      	ldr	r0, [sp, #28]
    146e:	4642      	mov	r2, r8
    1470:	4631      	mov	r1, r6
    1472:	f7ff fbe9 	bl	c48 <flash_area_erase>
        assert(rc == 0);
    1476:	2800      	cmp	r0, #0
    1478:	f47f af1f 	bne.w	12ba <boot_swap_image+0x2e>
        rc = boot_copy_sector(fap_primary_slot, fap_secondary_slot,
    147c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    1480:	9700      	str	r7, [sp, #0]
    1482:	4633      	mov	r3, r6
    1484:	4632      	mov	r2, r6
    1486:	f7ff fd83 	bl	f90 <boot_copy_sector>
        assert(rc == 0);
    148a:	2800      	cmp	r0, #0
    148c:	f47f af15 	bne.w	12ba <boot_swap_image+0x2e>
        if (bs->idx == BOOT_STATUS_IDX_0 && !bs->use_scratch) {
    1490:	6823      	ldr	r3, [r4, #0]
    1492:	2b01      	cmp	r3, #1
    1494:	d107      	bne.n	14a6 <boot_swap_image+0x21a>
    1496:	7963      	ldrb	r3, [r4, #5]
    1498:	b92b      	cbnz	r3, 14a6 <boot_swap_image+0x21a>
            rc = boot_erase_trailer_sectors(fap_secondary_slot);
    149a:	9807      	ldr	r0, [sp, #28]
    149c:	f7ff fe78 	bl	1190 <boot_erase_trailer_sectors>
            assert(rc == 0);
    14a0:	2800      	cmp	r0, #0
    14a2:	f47f af0a 	bne.w	12ba <boot_swap_image+0x2e>
        bs->state = BOOT_STATUS_STATE_2;
    14a6:	2303      	movs	r3, #3
    14a8:	7123      	strb	r3, [r4, #4]
        rc = boot_write_status(bs);
    14aa:	4620      	mov	r0, r4
    14ac:	f7ff fea6 	bl	11fc <boot_write_status>
        BOOT_STATUS_ASSERT(rc == 0);
    14b0:	2800      	cmp	r0, #0
    14b2:	f47f af02 	bne.w	12ba <boot_swap_image+0x2e>
    if (bs->state == BOOT_STATUS_STATE_2) {
    14b6:	7923      	ldrb	r3, [r4, #4]
    14b8:	9303      	str	r3, [sp, #12]
    14ba:	2b03      	cmp	r3, #3
    14bc:	d163      	bne.n	1586 <boot_swap_image+0x2fa>
    return flash_area_erase(fap, off, sz);
    14be:	4642      	mov	r2, r8
    14c0:	9806      	ldr	r0, [sp, #24]
    14c2:	4631      	mov	r1, r6
    14c4:	f7ff fbc0 	bl	c48 <flash_area_erase>
        assert(rc == 0);
    14c8:	4602      	mov	r2, r0
    14ca:	2800      	cmp	r0, #0
    14cc:	f47f aef5 	bne.w	12ba <boot_swap_image+0x2e>
        rc = boot_copy_sector(fap_scratch, fap_primary_slot,
    14d0:	9906      	ldr	r1, [sp, #24]
    14d2:	9808      	ldr	r0, [sp, #32]
    14d4:	9700      	str	r7, [sp, #0]
    14d6:	4633      	mov	r3, r6
    14d8:	f7ff fd5a 	bl	f90 <boot_copy_sector>
        assert(rc == 0);
    14dc:	2800      	cmp	r0, #0
    14de:	f47f aeec 	bne.w	12ba <boot_swap_image+0x2e>
        if (bs->use_scratch) {
    14e2:	7963      	ldrb	r3, [r4, #5]
    14e4:	2b00      	cmp	r3, #0
    14e6:	d038      	beq.n	155a <boot_swap_image+0x2ce>
            scratch_trailer_off = boot_status_off(fap_scratch);
    14e8:	9808      	ldr	r0, [sp, #32]
    14ea:	f000 fa48 	bl	197e <boot_status_off>
                        BOOT_STATUS_STATE_COUNT * BOOT_WRITE_SZ(&boot_data));
    14ee:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
            rc = boot_copy_sector(fap_scratch, fap_primary_slot,
    14f2:	9906      	ldr	r1, [sp, #24]
                        BOOT_STATUS_STATE_COUNT * BOOT_WRITE_SZ(&boot_data));
    14f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
            scratch_trailer_off = boot_status_off(fap_scratch);
    14f8:	4602      	mov	r2, r0
            rc = boot_copy_sector(fap_scratch, fap_primary_slot,
    14fa:	9300      	str	r3, [sp, #0]
    14fc:	9808      	ldr	r0, [sp, #32]
    14fe:	19bb      	adds	r3, r7, r6
    1500:	f7ff fd46 	bl	f90 <boot_copy_sector>
            BOOT_STATUS_ASSERT(rc == 0);
    1504:	2800      	cmp	r0, #0
    1506:	f47f aed8 	bne.w	12ba <boot_swap_image+0x2e>
            rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SCRATCH,
    150a:	9803      	ldr	r0, [sp, #12]
    150c:	a909      	add	r1, sp, #36	; 0x24
    150e:	f000 fab4 	bl	1a7a <boot_read_swap_state_by_id>
            assert(rc == 0);
    1512:	2800      	cmp	r0, #0
    1514:	f47f aed1 	bne.w	12ba <boot_swap_image+0x2e>
            if (swap_state.image_ok == BOOT_FLAG_SET) {
    1518:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    151c:	2b01      	cmp	r3, #1
    151e:	d105      	bne.n	152c <boot_swap_image+0x2a0>
                rc = boot_write_image_ok(fap_primary_slot);
    1520:	9806      	ldr	r0, [sp, #24]
    1522:	f000 fb08 	bl	1b36 <boot_write_image_ok>
                assert(rc == 0);
    1526:	2800      	cmp	r0, #0
    1528:	f47f aec7 	bne.w	12ba <boot_swap_image+0x2e>
            if (swap_state.swap_type != BOOT_SWAP_TYPE_NONE) {
    152c:	f89d 1025 	ldrb.w	r1, [sp, #37]	; 0x25
    1530:	2901      	cmp	r1, #1
    1532:	d005      	beq.n	1540 <boot_swap_image+0x2b4>
                rc = boot_write_swap_type(fap_primary_slot,
    1534:	9806      	ldr	r0, [sp, #24]
    1536:	f000 fb03 	bl	1b40 <boot_write_swap_type>
                assert(rc == 0);
    153a:	2800      	cmp	r0, #0
    153c:	f47f aebd 	bne.w	12ba <boot_swap_image+0x2e>
            rc = boot_write_swap_size(fap_primary_slot, bs->swap_size);
    1540:	68a1      	ldr	r1, [r4, #8]
    1542:	9806      	ldr	r0, [sp, #24]
    1544:	f000 fb01 	bl	1b4a <boot_write_swap_size>
            assert(rc == 0);
    1548:	2800      	cmp	r0, #0
    154a:	f47f aeb6 	bne.w	12ba <boot_swap_image+0x2e>
            rc = boot_write_magic(fap_primary_slot);
    154e:	9806      	ldr	r0, [sp, #24]
    1550:	f000 fade 	bl	1b10 <boot_write_magic>
            assert(rc == 0);
    1554:	2800      	cmp	r0, #0
    1556:	f47f aeb0 	bne.w	12ba <boot_swap_image+0x2e>
        bs->idx++;
    155a:	6823      	ldr	r3, [r4, #0]
        erase_scratch = bs->use_scratch;
    155c:	7966      	ldrb	r6, [r4, #5]
        bs->idx++;
    155e:	3301      	adds	r3, #1
    1560:	6023      	str	r3, [r4, #0]
        bs->state = BOOT_STATUS_STATE_0;
    1562:	f04f 0301 	mov.w	r3, #1
    1566:	80a3      	strh	r3, [r4, #4]
        rc = boot_write_status(bs);
    1568:	4620      	mov	r0, r4
    156a:	f7ff fe47 	bl	11fc <boot_write_status>
        BOOT_STATUS_ASSERT(rc == 0);
    156e:	4601      	mov	r1, r0
    1570:	2800      	cmp	r0, #0
    1572:	f47f aea2 	bne.w	12ba <boot_swap_image+0x2e>
        if (erase_scratch) {
    1576:	b136      	cbz	r6, 1586 <boot_swap_image+0x2fa>
    return flash_area_erase(fap, off, sz);
    1578:	9808      	ldr	r0, [sp, #32]
    157a:	4642      	mov	r2, r8
    157c:	f7ff fb64 	bl	c48 <flash_area_erase>
            assert(rc == 0);
    1580:	2800      	cmp	r0, #0
    1582:	f47f ae9a 	bne.w	12ba <boot_swap_image+0x2e>
    while (last_sector_idx >= 0) {
    1586:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
            boot_swap_sectors(first_sector_idx, sz, bs);
        }

        last_sector_idx = first_sector_idx - 1;
        swap_idx++;
    158a:	f10b 0b01 	add.w	fp, fp, #1
    while (last_sector_idx >= 0) {
    158e:	f47f aedf 	bne.w	1350 <boot_swap_image+0xc4>
                     boot_status_fails);
    }
#endif

    return 0;
}
    1592:	2000      	movs	r0, #0
    1594:	b00b      	add	sp, #44	; 0x2c
    1596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bs->use_scratch = (bs->idx == BOOT_STATUS_IDX_0 && copy_sz != sz);
    159a:	2300      	movs	r3, #0
    159c:	e70f      	b.n	13be <boot_swap_image+0x132>
        if (primary_slot_size >= copy_size &&
    159e:	4291      	cmp	r1, r2
    15a0:	e6bb      	b.n	131a <boot_swap_image+0x8e>
    15a2:	bf00      	nop

000015a4 <boot_go>:
 *
 * @return                      0 on success; nonzero on failure.
 */
int
boot_go(struct boot_rsp *rsp)
{
    15a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     * any effect in older gcc versions (e.g., 4.8.4).
     */
    static boot_sector_t primary_slot_sectors[BOOT_MAX_IMG_SECTORS];
    static boot_sector_t secondary_slot_sectors[BOOT_MAX_IMG_SECTORS];
    static boot_sector_t scratch_sectors[BOOT_MAX_IMG_SECTORS];
    boot_data.imgs[BOOT_PRIMARY_SLOT].sectors = primary_slot_sectors;
    15a8:	4ea1      	ldr	r6, [pc, #644]	; (1830 <boot_go+0x28c>)
    15aa:	4ba2      	ldr	r3, [pc, #648]	; (1834 <boot_go+0x290>)
    15ac:	6273      	str	r3, [r6, #36]	; 0x24
{
    15ae:	b08d      	sub	sp, #52	; 0x34
    boot_data.imgs[BOOT_SECONDARY_SLOT].sectors = secondary_slot_sectors;
    15b0:	4ba1      	ldr	r3, [pc, #644]	; (1838 <boot_go+0x294>)
{
    15b2:	9001      	str	r0, [sp, #4]
    boot_data.imgs[BOOT_SECONDARY_SLOT].sectors = secondary_slot_sectors;
    15b4:	6533      	str	r3, [r6, #80]	; 0x50
    boot_enc_zeroize();
#endif

    /* Open boot_data image areas for the duration of this call. */
    for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
        fa_id = flash_area_id_from_image_slot(slot);
    15b6:	2000      	movs	r0, #0
    boot_data.scratch.sectors = scratch_sectors;
    15b8:	4ba0      	ldr	r3, [pc, #640]	; (183c <boot_go+0x298>)
    15ba:	65f3      	str	r3, [r6, #92]	; 0x5c
        fa_id = flash_area_id_from_image_slot(slot);
    15bc:	f7ff fb65 	bl	c8a <flash_area_id_from_image_slot>
        rc = flash_area_open(fa_id, &BOOT_IMG_AREA(&boot_data, slot));
    15c0:	f106 0120 	add.w	r1, r6, #32
    15c4:	b2c0      	uxtb	r0, r0
    15c6:	f7ff fac3 	bl	b50 <flash_area_open>
        assert(rc == 0);
    15ca:	b970      	cbnz	r0, 15ea <boot_go+0x46>
        fa_id = flash_area_id_from_image_slot(slot);
    15cc:	2001      	movs	r0, #1
    15ce:	f7ff fb5c 	bl	c8a <flash_area_id_from_image_slot>
        rc = flash_area_open(fa_id, &BOOT_IMG_AREA(&boot_data, slot));
    15d2:	f106 014c 	add.w	r1, r6, #76	; 0x4c
    15d6:	b2c0      	uxtb	r0, r0
    15d8:	f7ff faba 	bl	b50 <flash_area_open>
        assert(rc == 0);
    15dc:	b928      	cbnz	r0, 15ea <boot_go+0x46>
    }
    rc = flash_area_open(FLASH_AREA_IMAGE_SCRATCH,
    15de:	f106 0158 	add.w	r1, r6, #88	; 0x58
    15e2:	2003      	movs	r0, #3
    15e4:	f7ff fab4 	bl	b50 <flash_area_open>
                         &BOOT_SCRATCH_AREA(&boot_data));
    assert(rc == 0);
    15e8:	b128      	cbz	r0, 15f6 <boot_go+0x52>
        assert(0);
    15ea:	2300      	movs	r3, #0
    15ec:	461a      	mov	r2, r3
    15ee:	4619      	mov	r1, r3
    15f0:	4618      	mov	r0, r3
    15f2:	f7ff f9c9 	bl	988 <__assert_func>

    /* Determine the sector layout of the image slots and scratch area. */
    rc = boot_read_sectors();
    15f6:	f7ff fd97 	bl	1128 <boot_read_sectors>
    if (rc != 0) {
    15fa:	4604      	mov	r4, r0
    15fc:	2800      	cmp	r0, #0
    15fe:	f040 816e 	bne.w	18de <boot_go+0x33a>
                BOOT_MAX_IMG_SECTORS);
        goto out;
    }

    /* Attempt to read an image header from each slot. */
    rc = boot_read_image_headers(false);
    1602:	f7ff fcf3 	bl	fec <boot_read_image_headers>
    if (rc != 0) {
    1606:	4604      	mov	r4, r0
    1608:	2800      	cmp	r0, #0
    160a:	f040 8168 	bne.w	18de <boot_go+0x33a>
    return state->imgs[slot].num_sectors;
    160e:	f8d6 9028 	ldr.w	r9, [r6, #40]	; 0x28
    if ((num_sectors_primary > BOOT_MAX_IMG_SECTORS) ||
    1612:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
    1616:	f200 8156 	bhi.w	18c6 <boot_go+0x322>
    161a:	f8d6 8054 	ldr.w	r8, [r6, #84]	; 0x54
    161e:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
    1622:	f200 8150 	bhi.w	18c6 <boot_go+0x322>
    return BOOT_SCRATCH_AREA(state)->fa_size;
    1626:	6db3      	ldr	r3, [r6, #88]	; 0x58
    return state->imgs[slot].sectors[sector].fa_size;
    1628:	f8d6 b050 	ldr.w	fp, [r6, #80]	; 0x50
    return BOOT_SCRATCH_AREA(state)->fa_size;
    162c:	689b      	ldr	r3, [r3, #8]
    162e:	9303      	str	r3, [sp, #12]
    return state->imgs[slot].sectors[sector].fa_size;
    1630:	6a73      	ldr	r3, [r6, #36]	; 0x24
    1632:	9302      	str	r3, [sp, #8]
    smaller = 0;
    1634:	4605      	mov	r5, r0
    j = sz1 = secondary_slot_sz = 0;
    1636:	4602      	mov	r2, r0
    i = sz0 = primary_slot_sz = 0;
    1638:	4601      	mov	r1, r0
    j = sz1 = secondary_slot_sz = 0;
    163a:	4684      	mov	ip, r0
    i = sz0 = primary_slot_sz = 0;
    163c:	4686      	mov	lr, r0
    163e:	4603      	mov	r3, r0
    1640:	270c      	movs	r7, #12
    while (i < num_sectors_primary || j < num_sectors_secondary) {
    1642:	4589      	cmp	r9, r1
    1644:	d872      	bhi.n	172c <boot_go+0x188>
    1646:	4590      	cmp	r8, r2
    1648:	d870      	bhi.n	172c <boot_go+0x188>
    if ((i != num_sectors_primary) ||
    164a:	4589      	cmp	r9, r1
    164c:	f040 813b 	bne.w	18c6 <boot_go+0x322>
    1650:	4590      	cmp	r8, r2
    1652:	f040 8138 	bne.w	18c6 <boot_go+0x322>
        (j != num_sectors_secondary) ||
    1656:	45e6      	cmp	lr, ip
    1658:	f040 8135 	bne.w	18c6 <boot_go+0x322>
    bs->idx = BOOT_STATUS_IDX_0;
    165c:	2001      	movs	r0, #1
    memset(bs, 0, sizeof *bs);
    165e:	2300      	movs	r3, #0
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY,
    1660:	a908      	add	r1, sp, #32
    memset(bs, 0, sizeof *bs);
    1662:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
    bs->idx = BOOT_STATUS_IDX_0;
    1666:	9009      	str	r0, [sp, #36]	; 0x24
    bs->state = BOOT_STATUS_STATE_0;
    1668:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
    bs->swap_type = BOOT_SWAP_TYPE_NONE;
    166c:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY,
    1670:	f000 fa03 	bl	1a7a <boot_read_swap_state_by_id>
    assert(rc == 0);
    1674:	2800      	cmp	r0, #0
    1676:	d1b8      	bne.n	15ea <boot_go+0x46>
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SCRATCH, &state_scratch);
    1678:	a907      	add	r1, sp, #28
    167a:	2003      	movs	r0, #3
    167c:	f000 f9fd 	bl	1a7a <boot_read_swap_state_by_id>
    assert(rc == 0);
    1680:	4605      	mov	r5, r0
    1682:	2800      	cmp	r0, #0
    1684:	d1b1      	bne.n	15ea <boot_go+0x46>
    1686:	4f6e      	ldr	r7, [pc, #440]	; (1840 <boot_go+0x29c>)
    1688:	46b8      	mov	r8, r7
        if (boot_magic_compatible_check(table->bst_magic_primary_slot,
    168a:	f89d 1020 	ldrb.w	r1, [sp, #32]
    168e:	7838      	ldrb	r0, [r7, #0]
    1690:	f000 f954 	bl	193c <boot_magic_compatible_check>
    1694:	2800      	cmp	r0, #0
    1696:	d07f      	beq.n	1798 <boot_go+0x1f4>
            boot_magic_compatible_check(table->bst_magic_scratch,
    1698:	f89d 101c 	ldrb.w	r1, [sp, #28]
    169c:	7878      	ldrb	r0, [r7, #1]
    169e:	f000 f94d 	bl	193c <boot_magic_compatible_check>
                          state_primary_slot.magic) &&
    16a2:	2800      	cmp	r0, #0
    16a4:	d078      	beq.n	1798 <boot_go+0x1f4>
            (table->bst_copy_done_primary_slot == BOOT_FLAG_ANY ||
    16a6:	78bb      	ldrb	r3, [r7, #2]
                          state_scratch.magic) &&
    16a8:	2b04      	cmp	r3, #4
    16aa:	d003      	beq.n	16b4 <boot_go+0x110>
            (table->bst_copy_done_primary_slot == BOOT_FLAG_ANY ||
    16ac:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    16b0:	429a      	cmp	r2, r3
    16b2:	d171      	bne.n	1798 <boot_go+0x1f4>
            source = table->bst_status_source;
    16b4:	eb08 0585 	add.w	r5, r8, r5, lsl #2
    16b8:	78eb      	ldrb	r3, [r5, #3]
    switch (status_loc) {
    16ba:	2b02      	cmp	r3, #2
    16bc:	d07f      	beq.n	17be <boot_go+0x21a>
    16be:	d894      	bhi.n	15ea <boot_go+0x46>
    16c0:	2b00      	cmp	r3, #0
    16c2:	d06f      	beq.n	17a4 <boot_go+0x200>
        area_id = FLASH_AREA_IMAGE_SCRATCH;
    16c4:	2003      	movs	r0, #3
    rc = flash_area_open(area_id, &fap);
    16c6:	a906      	add	r1, sp, #24
    16c8:	f7ff fa42 	bl	b50 <flash_area_open>
    if (rc != 0) {
    16cc:	4607      	mov	r7, r0
    16ce:	2800      	cmp	r0, #0
    16d0:	d18b      	bne.n	15ea <boot_go+0x46>
    rc = boot_read_status_bytes(fap, bs);
    16d2:	f8dd a018 	ldr.w	sl, [sp, #24]
    off = boot_status_off(fap);
    16d6:	4650      	mov	r0, sl
    16d8:	f000 f951 	bl	197e <boot_status_off>
    16dc:	4683      	mov	fp, r0
    max_entries = boot_status_entries(fap);
    16de:	4650      	mov	r0, sl
    16e0:	f000 f93f 	bl	1962 <boot_status_entries>
    for (i = 0; i < max_entries; i++) {
    16e4:	46b8      	mov	r8, r7
    max_entries = boot_status_entries(fap);
    16e6:	4681      	mov	r9, r0
    found_idx = 0;
    16e8:	463d      	mov	r5, r7
    for (i = 0; i < max_entries; i++) {
    16ea:	45c1      	cmp	r9, r8
    16ec:	dc69      	bgt.n	17c2 <boot_go+0x21e>
    if (found) {
    16ee:	b177      	cbz	r7, 170e <boot_go+0x16a>
        if (!found_idx) {
    16f0:	2d00      	cmp	r5, #0
    16f2:	bf08      	it	eq
    16f4:	4645      	moveq	r5, r8
        found_idx--;
    16f6:	3d01      	subs	r5, #1
        bs->idx = (found_idx / BOOT_STATUS_STATE_COUNT) + 1;
    16f8:	2303      	movs	r3, #3
    16fa:	fb95 f3f3 	sdiv	r3, r5, r3
    16fe:	1c5a      	adds	r2, r3, #1
        bs->state = (found_idx % BOOT_STATUS_STATE_COUNT) + 1;
    1700:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1704:	1aed      	subs	r5, r5, r3
    1706:	3501      	adds	r5, #1
        bs->idx = (found_idx / BOOT_STATUS_STATE_COUNT) + 1;
    1708:	9209      	str	r2, [sp, #36]	; 0x24
        bs->state = (found_idx % BOOT_STATUS_STATE_COUNT) + 1;
    170a:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
        off = boot_swap_type_off(fap);
    170e:	9806      	ldr	r0, [sp, #24]
    1710:	f000 f948 	bl	19a4 <boot_swap_type_off>
        rc = flash_area_read_is_empty(fap, off, &bs->swap_type,
    1714:	2301      	movs	r3, #1
        off = boot_swap_type_off(fap);
    1716:	4601      	mov	r1, r0
        rc = flash_area_read_is_empty(fap, off, &bs->swap_type,
    1718:	f10d 022a 	add.w	r2, sp, #42	; 0x2a
    171c:	9806      	ldr	r0, [sp, #24]
    171e:	f7ff faad 	bl	c7c <flash_area_read_is_empty>
        if (rc == 1) {
    1722:	2801      	cmp	r0, #1
    1724:	d169      	bne.n	17fa <boot_go+0x256>
            bs->swap_type = BOOT_SWAP_TYPE_NONE;
    1726:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
    assert(rc == 0);
    172a:	e03b      	b.n	17a4 <boot_go+0x200>
        if (sz0 == sz1) {
    172c:	4283      	cmp	r3, r0
    172e:	d11a      	bne.n	1766 <boot_go+0x1c2>
    1730:	f8dd a008 	ldr.w	sl, [sp, #8]
    1734:	fb07 aa01 	mla	sl, r7, r1, sl
            i++;
    1738:	3101      	adds	r1, #1
            sz0 += boot_img_sector_size(&boot_data, BOOT_PRIMARY_SLOT, i);
    173a:	f8da a008 	ldr.w	sl, [sl, #8]
    173e:	4453      	add	r3, sl
    1740:	fb07 ba02 	mla	sl, r7, r2, fp
            j++;
    1744:	3201      	adds	r2, #1
            sz1 += boot_img_sector_size(&boot_data, BOOT_SECONDARY_SLOT, j);
    1746:	f8da a008 	ldr.w	sl, [sl, #8]
    174a:	4450      	add	r0, sl
        if (sz0 == sz1) {
    174c:	4283      	cmp	r3, r0
    174e:	f47f af78 	bne.w	1642 <boot_go+0x9e>
            if (sz0 > scratch_sz || sz1 > scratch_sz) {
    1752:	9803      	ldr	r0, [sp, #12]
    1754:	4298      	cmp	r0, r3
            primary_slot_sz += sz0;
    1756:	449e      	add	lr, r3
            secondary_slot_sz += sz1;
    1758:	449c      	add	ip, r3
            if (sz0 > scratch_sz || sz1 > scratch_sz) {
    175a:	f0c0 80b4 	bcc.w	18c6 <boot_go+0x322>
            smaller = sz0 = sz1 = 0;
    175e:	2500      	movs	r5, #0
    1760:	4628      	mov	r0, r5
    1762:	462b      	mov	r3, r5
    1764:	e76d      	b.n	1642 <boot_go+0x9e>
        } else if (sz0 < sz1) {
    1766:	d20c      	bcs.n	1782 <boot_go+0x1de>
    1768:	f8dd a008 	ldr.w	sl, [sp, #8]
    176c:	fb07 aa01 	mla	sl, r7, r1, sl
            if (smaller == 2) {
    1770:	2d02      	cmp	r5, #2
            sz0 += boot_img_sector_size(&boot_data, BOOT_PRIMARY_SLOT, i);
    1772:	f8da a008 	ldr.w	sl, [sl, #8]
    1776:	4453      	add	r3, sl
            if (smaller == 2) {
    1778:	f000 80a5 	beq.w	18c6 <boot_go+0x322>
            i++;
    177c:	3101      	adds	r1, #1
            smaller = 1;
    177e:	2501      	movs	r5, #1
    1780:	e7e4      	b.n	174c <boot_go+0x1a8>
    1782:	fb07 ba02 	mla	sl, r7, r2, fp
            if (smaller == 1) {
    1786:	2d01      	cmp	r5, #1
            sz1 += boot_img_sector_size(&boot_data, BOOT_SECONDARY_SLOT, j);
    1788:	f8da a008 	ldr.w	sl, [sl, #8]
    178c:	4450      	add	r0, sl
            if (smaller == 1) {
    178e:	f000 809a 	beq.w	18c6 <boot_go+0x322>
            j++;
    1792:	3201      	adds	r2, #1
            smaller = 2;
    1794:	2502      	movs	r5, #2
    1796:	e7d9      	b.n	174c <boot_go+0x1a8>
    for (i = 0; i < BOOT_STATUS_TABLES_COUNT; i++) {
    1798:	3501      	adds	r5, #1
    179a:	2d04      	cmp	r5, #4
    179c:	f107 0704 	add.w	r7, r7, #4
    17a0:	f47f af73 	bne.w	168a <boot_go+0xe6>
    if (bs.idx != BOOT_STATUS_IDX_0 || bs.state != BOOT_STATUS_STATE_0) {
    17a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    17a6:	2b01      	cmp	r3, #1
    17a8:	d103      	bne.n	17b2 <boot_go+0x20e>
    17aa:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    17ae:	2b01      	cmp	r3, #1
    17b0:	d026      	beq.n	1800 <boot_go+0x25c>
            rc = boot_swap_image(&bs);
    17b2:	a809      	add	r0, sp, #36	; 0x24
    17b4:	f7ff fd6a 	bl	128c <boot_swap_image>
            assert(rc == 0);
    17b8:	2800      	cmp	r0, #0
    17ba:	d04a      	beq.n	1852 <boot_go+0x2ae>
    17bc:	e715      	b.n	15ea <boot_go+0x46>
    switch (status_loc) {
    17be:	2001      	movs	r0, #1
    17c0:	e781      	b.n	16c6 <boot_go+0x122>
        rc = flash_area_read_is_empty(fap, off + i * BOOT_WRITE_SZ(&boot_data),
    17c2:	f896 1064 	ldrb.w	r1, [r6, #100]	; 0x64
    17c6:	2301      	movs	r3, #1
    17c8:	f10d 0217 	add.w	r2, sp, #23
    17cc:	fb08 b101 	mla	r1, r8, r1, fp
    17d0:	4650      	mov	r0, sl
    17d2:	f7ff fa53 	bl	c7c <flash_area_read_is_empty>
        if (rc < 0) {
    17d6:	2800      	cmp	r0, #0
    17d8:	f6ff af07 	blt.w	15ea <boot_go+0x46>
        if (rc == 1) {
    17dc:	2801      	cmp	r0, #1
    17de:	d106      	bne.n	17ee <boot_go+0x24a>
            if (found && !found_idx) {
    17e0:	b117      	cbz	r7, 17e8 <boot_go+0x244>
    17e2:	2d00      	cmp	r5, #0
    17e4:	bf08      	it	eq
    17e6:	4645      	moveq	r5, r8
    for (i = 0; i < max_entries; i++) {
    17e8:	f108 0801 	add.w	r8, r8, #1
    17ec:	e77d      	b.n	16ea <boot_go+0x146>
        } else if (!found) {
    17ee:	b117      	cbz	r7, 17f6 <boot_go+0x252>
        } else if (found_idx) {
    17f0:	2d00      	cmp	r5, #0
    17f2:	d0f9      	beq.n	17e8 <boot_go+0x244>
    17f4:	e6f9      	b.n	15ea <boot_go+0x46>
            found = 1;
    17f6:	2701      	movs	r7, #1
    17f8:	e7f6      	b.n	17e8 <boot_go+0x244>
    assert(rc == 0);
    17fa:	2800      	cmp	r0, #0
    17fc:	d0d2      	beq.n	17a4 <boot_go+0x200>
    17fe:	e6f4      	b.n	15ea <boot_go+0x46>
        if (bs.swap_type == BOOT_SWAP_TYPE_NONE) {
    1800:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
    1804:	2b01      	cmp	r3, #1
    1806:	d11d      	bne.n	1844 <boot_go+0x2a0>
    swap_type = boot_swap_type();
    1808:	f000 f9c8 	bl	1b9c <boot_swap_type>
    switch (swap_type) {
    180c:	1e83      	subs	r3, r0, #2
    180e:	2b02      	cmp	r3, #2
    swap_type = boot_swap_type();
    1810:	4605      	mov	r5, r0
    switch (swap_type) {
    1812:	d804      	bhi.n	181e <boot_go+0x27a>
        if (boot_validate_slot(BOOT_SECONDARY_SLOT, bs) != 0) {
    1814:	f7ff fc3c 	bl	1090 <boot_validate_slot.constprop.0.isra.0>
            swap_type = BOOT_SWAP_TYPE_FAIL;
    1818:	2800      	cmp	r0, #0
    181a:	bf18      	it	ne
    181c:	2505      	movne	r5, #5
            bs.swap_type = boot_validated_swap_type(&bs);
    181e:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
        switch (bs.swap_type) {
    1822:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
    1826:	3b02      	subs	r3, #2
    1828:	2b02      	cmp	r3, #2
    182a:	d812      	bhi.n	1852 <boot_go+0x2ae>
    182c:	e7c1      	b.n	17b2 <boot_go+0x20e>
    182e:	bf00      	nop
    1830:	200001bc 	.word	0x200001bc
    1834:	20000624 	.word	0x20000624
    1838:	20001224 	.word	0x20001224
    183c:	20000c24 	.word	0x20000c24
    1840:	00002394 	.word	0x00002394
        } else if (boot_validate_slot(BOOT_SECONDARY_SLOT, &bs) != 0) {
    1844:	f7ff fc24 	bl	1090 <boot_validate_slot.constprop.0.isra.0>
    1848:	2800      	cmp	r0, #0
    184a:	d0ea      	beq.n	1822 <boot_go+0x27e>
            bs.swap_type = BOOT_SWAP_TYPE_FAIL;
    184c:	2305      	movs	r3, #5
    184e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    *out_swap_type = bs.swap_type;
    1852:	f89d 502a 	ldrb.w	r5, [sp, #42]	; 0x2a
        /*
         * The following states need image_ok be explicitly set after the
         * swap was finished to avoid a new revert.
         */
        if (swap_type == BOOT_SWAP_TYPE_REVERT ||
            swap_type == BOOT_SWAP_TYPE_FAIL ||
    1856:	1eeb      	subs	r3, r5, #3
        if (swap_type == BOOT_SWAP_TYPE_REVERT ||
    1858:	2b02      	cmp	r3, #2
    185a:	d817      	bhi.n	188c <boot_go+0x2e8>
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY, &fap);
    185c:	a908      	add	r1, sp, #32
    185e:	2001      	movs	r0, #1
    1860:	f7ff f976 	bl	b50 <flash_area_open>
    if (rc != 0) {
    1864:	2800      	cmp	r0, #0
    1866:	f47f aec0 	bne.w	15ea <boot_go+0x46>
    rc = boot_read_swap_state(fap, &state);
    186a:	9808      	ldr	r0, [sp, #32]
    186c:	a909      	add	r1, sp, #36	; 0x24
    186e:	f000 f89d 	bl	19ac <boot_read_swap_state>
    if (rc != 0) {
    1872:	2800      	cmp	r0, #0
    1874:	f47f aeb9 	bne.w	15ea <boot_go+0x46>
    if (state.image_ok == BOOT_FLAG_UNSET) {
    1878:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    187c:	2b03      	cmp	r3, #3
    187e:	d105      	bne.n	188c <boot_go+0x2e8>
        rc = boot_write_image_ok(fap);
    1880:	9808      	ldr	r0, [sp, #32]
    1882:	f000 f958 	bl	1b36 <boot_write_image_ok>
            swap_type == BOOT_SWAP_TYPE_PERM) {
#ifndef MCUBOOT_OVERWRITE_ONLY
            rc = boot_set_image_ok();
            if (rc != 0) {
    1886:	2800      	cmp	r0, #0
    1888:	f47f aeaf 	bne.w	15ea <boot_go+0x46>
        }
    } else {
        swap_type = BOOT_SWAP_TYPE_NONE;
    }

    switch (swap_type) {
    188c:	2d05      	cmp	r5, #5
    188e:	d014      	beq.n	18ba <boot_go+0x316>
    1890:	f63f aeab 	bhi.w	15ea <boot_go+0x46>
    1894:	2d01      	cmp	r5, #1
    1896:	d016      	beq.n	18c6 <boot_go+0x322>
    1898:	3d02      	subs	r5, #2
    189a:	2d02      	cmp	r5, #2
    189c:	f63f aea5 	bhi.w	15ea <boot_go+0x46>
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY, &fap);
    18a0:	a909      	add	r1, sp, #36	; 0x24
    18a2:	2001      	movs	r0, #1
    18a4:	f7ff f954 	bl	b50 <flash_area_open>
    if (rc != 0) {
    18a8:	2800      	cmp	r0, #0
    18aa:	f47f ae9e 	bne.w	15ea <boot_go+0x46>
    rc = boot_write_copy_done(fap);
    18ae:	9809      	ldr	r0, [sp, #36]	; 0x24
    18b0:	f000 f93c 	bl	1b2c <boot_write_copy_done>
    case BOOT_SWAP_TYPE_REVERT:
        slot = BOOT_SECONDARY_SLOT;
        reload_headers = true;
#ifndef MCUBOOT_OVERWRITE_ONLY
        rc = boot_set_copy_done();
        if (rc != 0) {
    18b4:	2800      	cmp	r0, #0
    18b6:	f47f ae98 	bne.w	15ea <boot_go+0x46>
        /* Loop forever... */
        while (1) {}
    }

    if (reload_headers) {
        rc = boot_read_image_headers(false);
    18ba:	2000      	movs	r0, #0
    18bc:	f7ff fb96 	bl	fec <boot_read_image_headers>
        if (rc != 0) {
    18c0:	b108      	cbz	r0, 18c6 <boot_go+0x322>
 out:
    flash_area_close(BOOT_SCRATCH_AREA(&boot_data));
    for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
        flash_area_close(BOOT_IMG_AREA(&boot_data, BOOT_NUM_SLOTS - 1 - slot));
    }
    return rc;
    18c2:	4604      	mov	r4, r0
    18c4:	e00b      	b.n	18de <boot_go+0x33a>
    if (boot_data.imgs[BOOT_PRIMARY_SLOT].hdr.ih_magic != IMAGE_MAGIC) {
    18c6:	4b09      	ldr	r3, [pc, #36]	; (18ec <boot_go+0x348>)
    18c8:	4a09      	ldr	r2, [pc, #36]	; (18f0 <boot_go+0x34c>)
    18ca:	6819      	ldr	r1, [r3, #0]
    18cc:	4291      	cmp	r1, r2
    18ce:	d10a      	bne.n	18e6 <boot_go+0x342>
    rsp->br_flash_dev_id = boot_data.imgs[BOOT_PRIMARY_SLOT].area->fa_device_id;
    18d0:	6a1a      	ldr	r2, [r3, #32]
    18d2:	9801      	ldr	r0, [sp, #4]
    18d4:	7851      	ldrb	r1, [r2, #1]
    18d6:	7101      	strb	r1, [r0, #4]
    rsp->br_image_off = boot_img_slot_off(&boot_data, BOOT_PRIMARY_SLOT);
    18d8:	6852      	ldr	r2, [r2, #4]
    18da:	6082      	str	r2, [r0, #8]
    rsp->br_hdr = boot_img_hdr(&boot_data, slot);
    18dc:	6003      	str	r3, [r0, #0]
}
    18de:	4620      	mov	r0, r4
    18e0:	b00d      	add	sp, #52	; 0x34
    18e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = BOOT_EBADIMAGE;
    18e6:	2403      	movs	r4, #3
    18e8:	e7f9      	b.n	18de <boot_go+0x33a>
    18ea:	bf00      	nop
    18ec:	200001bc 	.word	0x200001bc
    18f0:	96f3b83d 	.word	0x96f3b83d

000018f4 <boot_write_trailer_byte>:
}

static int
boot_write_trailer_byte(const struct flash_area *fap, uint32_t off,
                        uint8_t val)
{
    18f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    18f6:	4604      	mov	r4, r0
    18f8:	460e      	mov	r6, r1
    18fa:	4617      	mov	r7, r2
    uint8_t buf[BOOT_MAX_ALIGN];
    uint8_t align;
    uint8_t erased_val;
    int rc;

    align = flash_area_align(fap);
    18fc:	f7ff f9b6 	bl	c6c <flash_area_align>
    assert(align <= BOOT_MAX_ALIGN);
    1900:	2808      	cmp	r0, #8
    align = flash_area_align(fap);
    1902:	4605      	mov	r5, r0
    assert(align <= BOOT_MAX_ALIGN);
    1904:	d905      	bls.n	1912 <boot_write_trailer_byte+0x1e>
    1906:	2300      	movs	r3, #0
    1908:	461a      	mov	r2, r3
    190a:	4619      	mov	r1, r3
    190c:	4618      	mov	r0, r3
    190e:	f7ff f83b 	bl	988 <__assert_func>
    erased_val = flash_area_erased_val(fap);
    1912:	4620      	mov	r0, r4
    1914:	f7ff f9ad 	bl	c72 <flash_area_erased_val>
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    1918:	2208      	movs	r2, #8
    191a:	b2c1      	uxtb	r1, r0
    191c:	4668      	mov	r0, sp
    191e:	f7ff f8fc 	bl	b1a <memset>
    buf[0] = val;

    rc = flash_area_write(fap, off, buf, align);
    1922:	462b      	mov	r3, r5
    1924:	466a      	mov	r2, sp
    1926:	4631      	mov	r1, r6
    1928:	4620      	mov	r0, r4
    buf[0] = val;
    192a:	f88d 7000 	strb.w	r7, [sp]
    rc = flash_area_write(fap, off, buf, align);
    192e:	f7ff f979 	bl	c24 <flash_area_write>
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
    1932:	3800      	subs	r0, #0
    1934:	bf18      	it	ne
    1936:	2001      	movne	r0, #1
    1938:	b003      	add	sp, #12
    193a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000193c <boot_magic_compatible_check>:
    switch (tbl_val) {
    193c:	2804      	cmp	r0, #4
    193e:	d009      	beq.n	1954 <boot_magic_compatible_check+0x18>
    1940:	2805      	cmp	r0, #5
    1942:	d103      	bne.n	194c <boot_magic_compatible_check+0x10>
        return val != BOOT_MAGIC_GOOD;
    1944:	1e48      	subs	r0, r1, #1
    1946:	bf18      	it	ne
    1948:	2001      	movne	r0, #1
    194a:	4770      	bx	lr
        return tbl_val == val;
    194c:	1a43      	subs	r3, r0, r1
    194e:	4258      	negs	r0, r3
    1950:	4158      	adcs	r0, r3
    1952:	4770      	bx	lr
    switch (tbl_val) {
    1954:	2001      	movs	r0, #1
}
    1956:	4770      	bx	lr

00001958 <boot_trailer_sz>:
           BOOT_STATUS_MAX_ENTRIES * BOOT_STATUS_STATE_COUNT * min_write_sz +
    1958:	f44f 73c0 	mov.w	r3, #384	; 0x180
    195c:	4358      	muls	r0, r3
}
    195e:	3030      	adds	r0, #48	; 0x30
    1960:	4770      	bx	lr

00001962 <boot_status_entries>:
    switch (fap->fa_id) {
    1962:	7803      	ldrb	r3, [r0, #0]
    1964:	2b02      	cmp	r3, #2
    1966:	d805      	bhi.n	1974 <boot_status_entries+0x12>
        return BOOT_STATUS_STATE_COUNT * BOOT_STATUS_MAX_ENTRIES;
    1968:	2b00      	cmp	r3, #0
    196a:	bf0c      	ite	eq
    196c:	2007      	moveq	r0, #7
    196e:	f44f 70c0 	movne.w	r0, #384	; 0x180
    1972:	4770      	bx	lr
    switch (fap->fa_id) {
    1974:	2b03      	cmp	r3, #3
    1976:	bf14      	ite	ne
    1978:	2007      	movne	r0, #7
    197a:	2003      	moveq	r0, #3
}
    197c:	4770      	bx	lr

0000197e <boot_status_off>:
{
    197e:	b510      	push	{r4, lr}
    1980:	4604      	mov	r4, r0
    elem_sz = flash_area_align(fap);
    1982:	f7ff f973 	bl	c6c <flash_area_align>
           BOOT_STATUS_MAX_ENTRIES * BOOT_STATUS_STATE_COUNT * min_write_sz +
    1986:	f44f 73c0 	mov.w	r3, #384	; 0x180
    198a:	4343      	muls	r3, r0
    assert(off_from_end <= fap->fa_size);
    198c:	68a0      	ldr	r0, [r4, #8]
           BOOT_MAX_ALIGN * 4                     +
    198e:	3330      	adds	r3, #48	; 0x30
    assert(off_from_end <= fap->fa_size);
    1990:	4298      	cmp	r0, r3
    1992:	d205      	bcs.n	19a0 <boot_status_off+0x22>
    1994:	2300      	movs	r3, #0
    1996:	461a      	mov	r2, r3
    1998:	4619      	mov	r1, r3
    199a:	4618      	mov	r0, r3
    199c:	f7fe fff4 	bl	988 <__assert_func>
}
    19a0:	1ac0      	subs	r0, r0, r3
    19a2:	bd10      	pop	{r4, pc}

000019a4 <boot_swap_type_off>:
    return fap->fa_size - BOOT_MAGIC_SZ - BOOT_MAX_ALIGN * 3;
    19a4:	6880      	ldr	r0, [r0, #8]
}
    19a6:	3828      	subs	r0, #40	; 0x28
    19a8:	4770      	bx	lr
	...

000019ac <boot_read_swap_state>:
{
    19ac:	b530      	push	{r4, r5, lr}
    19ae:	460c      	mov	r4, r1
    return fap->fa_size - BOOT_MAGIC_SZ;
    19b0:	6881      	ldr	r1, [r0, #8]
{
    19b2:	b085      	sub	sp, #20
    rc = flash_area_read_is_empty(fap, off, magic, BOOT_MAGIC_SZ);
    19b4:	2310      	movs	r3, #16
    19b6:	466a      	mov	r2, sp
    19b8:	3910      	subs	r1, #16
{
    19ba:	4605      	mov	r5, r0
    rc = flash_area_read_is_empty(fap, off, magic, BOOT_MAGIC_SZ);
    19bc:	f7ff f95e 	bl	c7c <flash_area_read_is_empty>
    if (rc < 0) {
    19c0:	2800      	cmp	r0, #0
    19c2:	da02      	bge.n	19ca <boot_read_swap_state+0x1e>
        return BOOT_EFLASH;
    19c4:	2001      	movs	r0, #1
}
    19c6:	b005      	add	sp, #20
    19c8:	bd30      	pop	{r4, r5, pc}
    if (rc == 1) {
    19ca:	2801      	cmp	r0, #1
    19cc:	d12d      	bne.n	1a2a <boot_read_swap_state+0x7e>
        state->magic = BOOT_MAGIC_UNSET;
    19ce:	2303      	movs	r3, #3
        state->magic = boot_magic_decode(magic);
    19d0:	7023      	strb	r3, [r4, #0]
    return fap->fa_size - BOOT_MAGIC_SZ - BOOT_MAX_ALIGN * 3;
    19d2:	68a9      	ldr	r1, [r5, #8]
    rc = flash_area_read_is_empty(fap, off, &state->swap_type,
    19d4:	2301      	movs	r3, #1
    19d6:	18e2      	adds	r2, r4, r3
    19d8:	3928      	subs	r1, #40	; 0x28
    19da:	4628      	mov	r0, r5
    19dc:	f7ff f94e 	bl	c7c <flash_area_read_is_empty>
    if (rc < 0) {
    19e0:	2800      	cmp	r0, #0
    19e2:	dbef      	blt.n	19c4 <boot_read_swap_state+0x18>
    if (rc == 1 || state->swap_type > BOOT_SWAP_TYPE_REVERT) {
    19e4:	2801      	cmp	r0, #1
    19e6:	d002      	beq.n	19ee <boot_read_swap_state+0x42>
    19e8:	7863      	ldrb	r3, [r4, #1]
    19ea:	2b04      	cmp	r3, #4
    19ec:	d901      	bls.n	19f2 <boot_read_swap_state+0x46>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
    19ee:	2301      	movs	r3, #1
    19f0:	7063      	strb	r3, [r4, #1]
    return fap->fa_size - BOOT_MAGIC_SZ - BOOT_MAX_ALIGN * 2;
    19f2:	68a9      	ldr	r1, [r5, #8]
    rc = flash_area_read_is_empty(fap, off, &state->copy_done,
    19f4:	2301      	movs	r3, #1
    19f6:	1ca2      	adds	r2, r4, #2
    19f8:	3920      	subs	r1, #32
    19fa:	4628      	mov	r0, r5
    19fc:	f7ff f93e 	bl	c7c <flash_area_read_is_empty>
    if (rc < 0) {
    1a00:	2800      	cmp	r0, #0
    1a02:	dbdf      	blt.n	19c4 <boot_read_swap_state+0x18>
    if (rc == 1) {
    1a04:	2801      	cmp	r0, #1
    1a06:	d11a      	bne.n	1a3e <boot_read_swap_state+0x92>
        state->copy_done = BOOT_FLAG_UNSET;
    1a08:	2303      	movs	r3, #3
        state->copy_done = boot_flag_decode(state->copy_done);
    1a0a:	70a3      	strb	r3, [r4, #2]
    return fap->fa_size - BOOT_MAGIC_SZ - BOOT_MAX_ALIGN;
    1a0c:	68a9      	ldr	r1, [r5, #8]
    rc = flash_area_read_is_empty(fap, off, &state->image_ok,
    1a0e:	2301      	movs	r3, #1
    1a10:	1ce2      	adds	r2, r4, #3
    1a12:	3918      	subs	r1, #24
    1a14:	4628      	mov	r0, r5
    1a16:	f7ff f931 	bl	c7c <flash_area_read_is_empty>
    if (rc < 0) {
    1a1a:	2800      	cmp	r0, #0
    1a1c:	dbd2      	blt.n	19c4 <boot_read_swap_state+0x18>
    if (rc == 1) {
    1a1e:	2801      	cmp	r0, #1
    1a20:	d113      	bne.n	1a4a <boot_read_swap_state+0x9e>
        state->image_ok = BOOT_FLAG_UNSET;
    1a22:	2303      	movs	r3, #3
        state->image_ok = boot_flag_decode(state->image_ok);
    1a24:	70e3      	strb	r3, [r4, #3]
    return 0;
    1a26:	2000      	movs	r0, #0
    1a28:	e7cd      	b.n	19c6 <boot_read_swap_state+0x1a>
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
    1a2a:	490b      	ldr	r1, [pc, #44]	; (1a58 <boot_read_swap_state+0xac>)
    1a2c:	2210      	movs	r2, #16
    1a2e:	4668      	mov	r0, sp
    1a30:	f7ff f842 	bl	ab8 <memcmp>
        return BOOT_MAGIC_GOOD;
    1a34:	2800      	cmp	r0, #0
    1a36:	bf14      	ite	ne
    1a38:	2302      	movne	r3, #2
    1a3a:	2301      	moveq	r3, #1
    1a3c:	e7c8      	b.n	19d0 <boot_read_swap_state+0x24>
    if (flag != BOOT_FLAG_SET) {
    1a3e:	78a3      	ldrb	r3, [r4, #2]
        return BOOT_FLAG_BAD;
    1a40:	2b01      	cmp	r3, #1
    1a42:	bf0c      	ite	eq
    1a44:	2301      	moveq	r3, #1
    1a46:	2302      	movne	r3, #2
    1a48:	e7df      	b.n	1a0a <boot_read_swap_state+0x5e>
    if (flag != BOOT_FLAG_SET) {
    1a4a:	78e3      	ldrb	r3, [r4, #3]
        return BOOT_FLAG_BAD;
    1a4c:	2b01      	cmp	r3, #1
    1a4e:	bf0c      	ite	eq
    1a50:	2301      	moveq	r3, #1
    1a52:	2302      	movne	r3, #2
    1a54:	e7e6      	b.n	1a24 <boot_read_swap_state+0x78>
    1a56:	bf00      	nop
    1a58:	000023a8 	.word	0x000023a8

00001a5c <boot_read_swap_state_by_id.part.0>:
boot_read_swap_state_by_id(int flash_area_id, struct boot_swap_state *state)
    1a5c:	b513      	push	{r0, r1, r4, lr}
    1a5e:	460c      	mov	r4, r1
        rc = flash_area_open(flash_area_id, &fap);
    1a60:	b2c0      	uxtb	r0, r0
    1a62:	a901      	add	r1, sp, #4
    1a64:	f7ff f874 	bl	b50 <flash_area_open>
        if (rc != 0) {
    1a68:	b928      	cbnz	r0, 1a76 <boot_read_swap_state_by_id.part.0+0x1a>
    rc = boot_read_swap_state(fap, state);
    1a6a:	9801      	ldr	r0, [sp, #4]
    1a6c:	4621      	mov	r1, r4
    1a6e:	f7ff ff9d 	bl	19ac <boot_read_swap_state>
}
    1a72:	b002      	add	sp, #8
    1a74:	bd10      	pop	{r4, pc}
            return BOOT_EFLASH;
    1a76:	2001      	movs	r0, #1
    1a78:	e7fb      	b.n	1a72 <boot_read_swap_state_by_id.part.0+0x16>

00001a7a <boot_read_swap_state_by_id>:
    switch (flash_area_id) {
    1a7a:	1e43      	subs	r3, r0, #1
    1a7c:	2b02      	cmp	r3, #2
    1a7e:	d801      	bhi.n	1a84 <boot_read_swap_state_by_id+0xa>
    1a80:	f7ff bfec 	b.w	1a5c <boot_read_swap_state_by_id.part.0>
}
    1a84:	2007      	movs	r0, #7
    1a86:	4770      	bx	lr

00001a88 <boot_read_swap_size>:
{
    1a88:	b530      	push	{r4, r5, lr}
    1a8a:	b087      	sub	sp, #28
    1a8c:	4605      	mov	r5, r0
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY, &fap);
    1a8e:	a901      	add	r1, sp, #4
    1a90:	2001      	movs	r0, #1
    1a92:	f7ff f85d 	bl	b50 <flash_area_open>
    if (rc != 0) {
    1a96:	b110      	cbz	r0, 1a9e <boot_read_swap_size+0x16>
        return BOOT_EFLASH;
    1a98:	2001      	movs	r0, #1
}
    1a9a:	b007      	add	sp, #28
    1a9c:	bd30      	pop	{r4, r5, pc}
    off = boot_magic_off(fap);
    1a9e:	9801      	ldr	r0, [sp, #4]
    return fap->fa_size - BOOT_MAGIC_SZ;
    1aa0:	6881      	ldr	r1, [r0, #8]
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    1aa2:	2310      	movs	r3, #16
    1aa4:	aa02      	add	r2, sp, #8
    1aa6:	3910      	subs	r1, #16
    1aa8:	f7ff f8aa 	bl	c00 <flash_area_read>
    if (rc != 0) {
    1aac:	2800      	cmp	r0, #0
    1aae:	d1f3      	bne.n	1a98 <boot_read_swap_size+0x10>
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) != 0) {
    1ab0:	4916      	ldr	r1, [pc, #88]	; (1b0c <boot_read_swap_size+0x84>)
    1ab2:	2210      	movs	r2, #16
    1ab4:	a802      	add	r0, sp, #8
    1ab6:	f7fe ffff 	bl	ab8 <memcmp>
    1aba:	b1d8      	cbz	r0, 1af4 <boot_read_swap_size+0x6c>
        rc = flash_area_open(FLASH_AREA_IMAGE_SCRATCH, &fap);
    1abc:	a901      	add	r1, sp, #4
    1abe:	2003      	movs	r0, #3
    1ac0:	f7ff f846 	bl	b50 <flash_area_open>
        if (rc != 0) {
    1ac4:	2800      	cmp	r0, #0
    1ac6:	d1e7      	bne.n	1a98 <boot_read_swap_size+0x10>
        off = boot_magic_off(fap);
    1ac8:	9801      	ldr	r0, [sp, #4]
    return fap->fa_size - BOOT_MAGIC_SZ;
    1aca:	6881      	ldr	r1, [r0, #8]
        rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    1acc:	2310      	movs	r3, #16
    1ace:	aa02      	add	r2, sp, #8
    1ad0:	3910      	subs	r1, #16
    1ad2:	f7ff f895 	bl	c00 <flash_area_read>
        if (rc != 0) {
    1ad6:	4604      	mov	r4, r0
    1ad8:	2800      	cmp	r0, #0
    1ada:	d1dd      	bne.n	1a98 <boot_read_swap_size+0x10>
        assert(memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0);
    1adc:	490b      	ldr	r1, [pc, #44]	; (1b0c <boot_read_swap_size+0x84>)
    1ade:	2210      	movs	r2, #16
    1ae0:	a802      	add	r0, sp, #8
    1ae2:	f7fe ffe9 	bl	ab8 <memcmp>
    1ae6:	b128      	cbz	r0, 1af4 <boot_read_swap_size+0x6c>
    1ae8:	4623      	mov	r3, r4
    1aea:	4622      	mov	r2, r4
    1aec:	4621      	mov	r1, r4
    1aee:	4620      	mov	r0, r4
    1af0:	f7fe ff4a 	bl	988 <__assert_func>
    off = boot_swap_size_off(fap);
    1af4:	9801      	ldr	r0, [sp, #4]
    return fap->fa_size - BOOT_MAGIC_SZ - BOOT_MAX_ALIGN * 4;
    1af6:	6881      	ldr	r1, [r0, #8]
    rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
    1af8:	2304      	movs	r3, #4
    1afa:	462a      	mov	r2, r5
    1afc:	3930      	subs	r1, #48	; 0x30
    1afe:	f7ff f87f 	bl	c00 <flash_area_read>
    if (rc != 0) {
    1b02:	3800      	subs	r0, #0
    1b04:	bf18      	it	ne
    1b06:	2001      	movne	r0, #1
    1b08:	e7c7      	b.n	1a9a <boot_read_swap_size+0x12>
    1b0a:	bf00      	nop
    1b0c:	000023a8 	.word	0x000023a8

00001b10 <boot_write_magic>:
    return fap->fa_size - BOOT_MAGIC_SZ;
    1b10:	6881      	ldr	r1, [r0, #8]
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
    1b12:	4a05      	ldr	r2, [pc, #20]	; (1b28 <boot_write_magic+0x18>)
{
    1b14:	b508      	push	{r3, lr}
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
    1b16:	3910      	subs	r1, #16
    1b18:	2310      	movs	r3, #16
    1b1a:	f7ff f883 	bl	c24 <flash_area_write>
}
    1b1e:	3800      	subs	r0, #0
    1b20:	bf18      	it	ne
    1b22:	2001      	movne	r0, #1
    1b24:	bd08      	pop	{r3, pc}
    1b26:	bf00      	nop
    1b28:	000023a8 	.word	0x000023a8

00001b2c <boot_write_copy_done>:
    return fap->fa_size - BOOT_MAGIC_SZ - BOOT_MAX_ALIGN * 2;
    1b2c:	6881      	ldr	r1, [r0, #8]
    uint32_t off;

    off = boot_copy_done_off(fap);
    BOOT_LOG_DBG("writing copy_done; fa_id=%d off=0x%x (0x%x)",
                 fap->fa_id, off, fap->fa_off + off);
    return boot_write_trailer_byte(fap, off, BOOT_FLAG_SET);
    1b2e:	2201      	movs	r2, #1
    1b30:	3920      	subs	r1, #32
    1b32:	f7ff bedf 	b.w	18f4 <boot_write_trailer_byte>

00001b36 <boot_write_image_ok>:
    return fap->fa_size - BOOT_MAGIC_SZ - BOOT_MAX_ALIGN;
    1b36:	6881      	ldr	r1, [r0, #8]
    uint32_t off;

    off = boot_image_ok_off(fap);
    BOOT_LOG_DBG("writing image_ok; fa_id=%d off=0x%x (0x%x)",
                 fap->fa_id, off, fap->fa_off + off);
    return boot_write_trailer_byte(fap, off, BOOT_FLAG_SET);
    1b38:	2201      	movs	r2, #1
    1b3a:	3918      	subs	r1, #24
    1b3c:	f7ff beda 	b.w	18f4 <boot_write_trailer_byte>

00001b40 <boot_write_swap_type>:
 * This value is persisted so that the boot loader knows what swap operation to
 * resume in case of an unexpected reset.
 */
int
boot_write_swap_type(const struct flash_area *fap, uint8_t swap_type)
{
    1b40:	460a      	mov	r2, r1
    return fap->fa_size - BOOT_MAGIC_SZ - BOOT_MAX_ALIGN * 3;
    1b42:	6881      	ldr	r1, [r0, #8]
    uint32_t off;

    off = boot_swap_type_off(fap);
    BOOT_LOG_DBG("writing swap_type; fa_id=%d off=0x%x (0x%x), swap_type=0x%x",
                 fap->fa_id, off, fap->fa_off + off, swap_type);
    return boot_write_trailer_byte(fap, off, swap_type);
    1b44:	3928      	subs	r1, #40	; 0x28
    1b46:	f7ff bed5 	b.w	18f4 <boot_write_trailer_byte>

00001b4a <boot_write_swap_size>:
}

int
boot_write_swap_size(const struct flash_area *fap, uint32_t swap_size)
{
    1b4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    return fap->fa_size - BOOT_MAGIC_SZ - BOOT_MAX_ALIGN * 4;
    1b4c:	6886      	ldr	r6, [r0, #8]
{
    1b4e:	4605      	mov	r5, r0
    1b50:	460f      	mov	r7, r1
    uint8_t buf[BOOT_MAX_ALIGN];
    uint8_t align;
    uint8_t erased_val;

    off = boot_swap_size_off(fap);
    align = flash_area_align(fap);
    1b52:	f7ff f88b 	bl	c6c <flash_area_align>
    assert(align <= BOOT_MAX_ALIGN);
    1b56:	2808      	cmp	r0, #8
    return fap->fa_size - BOOT_MAGIC_SZ - BOOT_MAX_ALIGN * 4;
    1b58:	f1a6 0630 	sub.w	r6, r6, #48	; 0x30
    align = flash_area_align(fap);
    1b5c:	4604      	mov	r4, r0
    assert(align <= BOOT_MAX_ALIGN);
    1b5e:	d905      	bls.n	1b6c <boot_write_swap_size+0x22>
    1b60:	2300      	movs	r3, #0
    1b62:	461a      	mov	r2, r3
    1b64:	4619      	mov	r1, r3
    1b66:	4618      	mov	r0, r3
    1b68:	f7fe ff0e 	bl	988 <__assert_func>
    if (align < sizeof swap_size) {
        align = sizeof swap_size;
    }
    erased_val = flash_area_erased_val(fap);
    1b6c:	4628      	mov	r0, r5
    1b6e:	f7ff f880 	bl	c72 <flash_area_erased_val>
    memcpy(buf, (uint8_t *)&swap_size, sizeof swap_size);

    BOOT_LOG_DBG("writing swap_size; fa_id=%d off=0x%x (0x%x)",
                 fap->fa_id, off, fap->fa_off + off);

    rc = flash_area_write(fap, off, buf, align);
    1b72:	2c04      	cmp	r4, #4
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    1b74:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
    1b78:	b2c0      	uxtb	r0, r0
    rc = flash_area_write(fap, off, buf, align);
    1b7a:	bf38      	it	cc
    1b7c:	2404      	movcc	r4, #4
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    1b7e:	4358      	muls	r0, r3
    memcpy(buf, (uint8_t *)&swap_size, sizeof swap_size);
    1b80:	e9cd 7000 	strd	r7, r0, [sp]
    rc = flash_area_write(fap, off, buf, align);
    1b84:	b2e3      	uxtb	r3, r4
    1b86:	466a      	mov	r2, sp
    1b88:	4631      	mov	r1, r6
    1b8a:	4628      	mov	r0, r5
    1b8c:	f7ff f84a 	bl	c24 <flash_area_write>
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
    1b90:	3800      	subs	r0, #0
    1b92:	bf18      	it	ne
    1b94:	2001      	movne	r0, #1
    1b96:	b003      	add	sp, #12
    1b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00001b9c <boot_swap_type>:
}
#endif

int
boot_swap_type(void)
{
    1b9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    switch (flash_area_id) {
    1ba0:	2001      	movs	r0, #1
    1ba2:	4669      	mov	r1, sp
    1ba4:	f7ff ff5a 	bl	1a5c <boot_read_swap_state_by_id.part.0>
    struct boot_swap_state secondary_slot;
    int rc;
    size_t i;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY, &primary_slot);
    if (rc) {
    1ba8:	2800      	cmp	r0, #0
    1baa:	d13c      	bne.n	1c26 <boot_swap_type+0x8a>
    switch (flash_area_id) {
    1bac:	a901      	add	r1, sp, #4
    1bae:	2002      	movs	r0, #2
    1bb0:	f7ff ff54 	bl	1a5c <boot_read_swap_state_by_id.part.0>
        return BOOT_SWAP_TYPE_PANIC;
    }

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY,
                                    &secondary_slot);
    if (rc) {
    1bb4:	4602      	mov	r2, r0
    1bb6:	bbb0      	cbnz	r0, 1c26 <boot_swap_type+0x8a>
    }

    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
        table = boot_swap_tables + i;

        if (boot_magic_compatible_check(table->magic_primary_slot,
    1bb8:	f89d 5000 	ldrb.w	r5, [sp]
                                        primary_slot.magic) &&
            boot_magic_compatible_check(table->magic_secondary_slot,
    1bbc:	f89d 6004 	ldrb.w	r6, [sp, #4]
                                        secondary_slot.magic) &&
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    1bc0:	f89d 7003 	ldrb.w	r7, [sp, #3]
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    1bc4:	f89d 8007 	ldrb.w	r8, [sp, #7]
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
                table->copy_done_primary_slot == primary_slot.copy_done)) {
    1bc8:	f89d 9002 	ldrb.w	r9, [sp, #2]
    1bcc:	4c17      	ldr	r4, [pc, #92]	; (1c2c <boot_swap_type+0x90>)
        if (boot_magic_compatible_check(table->magic_primary_slot,
    1bce:	7820      	ldrb	r0, [r4, #0]
    1bd0:	4629      	mov	r1, r5
    1bd2:	f7ff feb3 	bl	193c <boot_magic_compatible_check>
    1bd6:	b1e8      	cbz	r0, 1c14 <boot_swap_type+0x78>
            boot_magic_compatible_check(table->magic_secondary_slot,
    1bd8:	7860      	ldrb	r0, [r4, #1]
    1bda:	4631      	mov	r1, r6
    1bdc:	f7ff feae 	bl	193c <boot_magic_compatible_check>
                                        primary_slot.magic) &&
    1be0:	b1c0      	cbz	r0, 1c14 <boot_swap_type+0x78>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    1be2:	78a3      	ldrb	r3, [r4, #2]
                                        secondary_slot.magic) &&
    1be4:	2b04      	cmp	r3, #4
    1be6:	d001      	beq.n	1bec <boot_swap_type+0x50>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    1be8:	42bb      	cmp	r3, r7
    1bea:	d113      	bne.n	1c14 <boot_swap_type+0x78>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    1bec:	78e3      	ldrb	r3, [r4, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    1bee:	2b04      	cmp	r3, #4
    1bf0:	d001      	beq.n	1bf6 <boot_swap_type+0x5a>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    1bf2:	4543      	cmp	r3, r8
    1bf4:	d10e      	bne.n	1c14 <boot_swap_type+0x78>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    1bf6:	7923      	ldrb	r3, [r4, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    1bf8:	2b04      	cmp	r3, #4
    1bfa:	d109      	bne.n	1c10 <boot_swap_type+0x74>
            BOOT_LOG_INF("Swap type: %s",
    1bfc:	7960      	ldrb	r0, [r4, #5]
                         table->swap_type == BOOT_SWAP_TYPE_TEST   ? "test"   :
                         table->swap_type == BOOT_SWAP_TYPE_PERM   ? "perm"   :
                         table->swap_type == BOOT_SWAP_TYPE_REVERT ? "revert" :
                         "BUG; can't happen");
            assert(table->swap_type == BOOT_SWAP_TYPE_TEST ||
    1bfe:	1e83      	subs	r3, r0, #2
    1c00:	2b02      	cmp	r3, #2
    1c02:	d90d      	bls.n	1c20 <boot_swap_type+0x84>
    1c04:	2300      	movs	r3, #0
    1c06:	461a      	mov	r2, r3
    1c08:	4619      	mov	r1, r3
    1c0a:	4618      	mov	r0, r3
    1c0c:	f7fe febc 	bl	988 <__assert_func>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    1c10:	454b      	cmp	r3, r9
    1c12:	d0f3      	beq.n	1bfc <boot_swap_type+0x60>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    1c14:	3201      	adds	r2, #1
    1c16:	2a03      	cmp	r2, #3
    1c18:	f104 0406 	add.w	r4, r4, #6
    1c1c:	d1d7      	bne.n	1bce <boot_swap_type+0x32>
            return table->swap_type;
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
    1c1e:	2001      	movs	r0, #1
}
    1c20:	b003      	add	sp, #12
    1c22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return BOOT_SWAP_TYPE_PANIC;
    1c26:	20ff      	movs	r0, #255	; 0xff
    1c28:	e7fa      	b.n	1c20 <boot_swap_type+0x84>
    1c2a:	bf00      	nop
    1c2c:	000023b8 	.word	0x000023b8

00001c30 <bootutil_img_validate>:
 */
int
bootutil_img_validate(struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz,
                      uint8_t *seed, int seed_len, uint8_t *out_hash)
{
    1c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c34:	b0a7      	sub	sp, #156	; 0x9c
    1c36:	e9dd 5930 	ldrd	r5, r9, [sp, #192]	; 0xc0
#ifdef MCUBOOT_USE_MBED_TLS
typedef mbedtls_sha256_context bootutil_sha256_context;

static inline void bootutil_sha256_init(bootutil_sha256_context *ctx)
{
    mbedtls_sha256_init(ctx);
    1c3a:	ac0b      	add	r4, sp, #44	; 0x2c
    1c3c:	4607      	mov	r7, r0
    1c3e:	4620      	mov	r0, r4
    1c40:	460e      	mov	r6, r1
    1c42:	4692      	mov	sl, r2
    1c44:	469b      	mov	fp, r3
    1c46:	f000 f881 	bl	1d4c <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
    1c4a:	2100      	movs	r1, #0
    1c4c:	4620      	mov	r0, r4
    1c4e:	f000 f881 	bl	1d54 <mbedtls_sha256_starts_ret>
    if (seed && (seed_len > 0)) {
    1c52:	b13d      	cbz	r5, 1c64 <bootutil_img_validate+0x34>
    1c54:	f1b9 0f00 	cmp.w	r9, #0
    1c58:	dd04      	ble.n	1c64 <bootutil_img_validate+0x34>

static inline void bootutil_sha256_update(bootutil_sha256_context *ctx,
                                          const void *data,
                                          uint32_t data_len)
{
    (void)mbedtls_sha256_update_ret(ctx, data, data_len);
    1c5a:	464a      	mov	r2, r9
    1c5c:	4629      	mov	r1, r5
    1c5e:	4620      	mov	r0, r4
    1c60:	f000 f96a 	bl	1f38 <mbedtls_sha256_update_ret>
    size = hdr->ih_img_size + hdr_size;
    1c64:	f8b7 9008 	ldrh.w	r9, [r7, #8]
    1c68:	68fb      	ldr	r3, [r7, #12]
    for (off = 0; off < size; off += blk_sz) {
    1c6a:	f04f 0800 	mov.w	r8, #0
    size = hdr->ih_img_size + hdr_size;
    1c6e:	4499      	add	r9, r3
    for (off = 0; off < size; off += blk_sz) {
    1c70:	45c1      	cmp	r9, r8
    1c72:	d826      	bhi.n	1cc2 <bootutil_img_validate+0x92>
}

static inline void bootutil_sha256_finish(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    (void)mbedtls_sha256_finish_ret(ctx, output);
    1c74:	a903      	add	r1, sp, #12
    1c76:	4620      	mov	r0, r4
    1c78:	f000 f99b 	bl	1fb2 <mbedtls_sha256_finish_ret>
    rc = bootutil_img_hash(hdr, fap, tmp_buf, tmp_buf_sz, hash, seed, seed_len);
    if (rc) {
        return rc;
    }

    if (out_hash) {
    1c7c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    1c7e:	b153      	cbz	r3, 1c96 <bootutil_img_validate+0x66>
        memcpy(out_hash, hash, 32);
    1c80:	aa03      	add	r2, sp, #12
    1c82:	461d      	mov	r5, r3
    1c84:	4613      	mov	r3, r2
    1c86:	cb03      	ldmia	r3!, {r0, r1}
    1c88:	42a3      	cmp	r3, r4
    1c8a:	6028      	str	r0, [r5, #0]
    1c8c:	6069      	str	r1, [r5, #4]
    1c8e:	461a      	mov	r2, r3
    1c90:	f105 0508 	add.w	r5, r5, #8
    1c94:	d1f6      	bne.n	1c84 <bootutil_img_validate+0x54>
    }

    /* The TLVs come after the image. */
    /* After image there are TLVs. */
    off = hdr->ih_img_size + hdr->ih_hdr_size;
    1c96:	68f9      	ldr	r1, [r7, #12]
    1c98:	893d      	ldrh	r5, [r7, #8]

    rc = flash_area_read(fap, off, &info, sizeof(info));
    1c9a:	2304      	movs	r3, #4
    off = hdr->ih_img_size + hdr->ih_hdr_size;
    1c9c:	440d      	add	r5, r1
    rc = flash_area_read(fap, off, &info, sizeof(info));
    1c9e:	eb0d 0203 	add.w	r2, sp, r3
    1ca2:	4629      	mov	r1, r5
    1ca4:	4630      	mov	r0, r6
    1ca6:	f7fe ffab 	bl	c00 <flash_area_read>
    if (rc) {
    1caa:	b938      	cbnz	r0, 1cbc <bootutil_img_validate+0x8c>
        return rc;
    }
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    1cac:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    1cb0:	f646 1307 	movw	r3, #26887	; 0x6907
    1cb4:	429a      	cmp	r2, r3
    1cb6:	d018      	beq.n	1cea <bootutil_img_validate+0xba>
        return -1;
    1cb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return -1;
    }
#endif

    return 0;
}
    1cbc:	b027      	add	sp, #156	; 0x9c
    1cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        blk_sz = size - off;
    1cc2:	eba9 0308 	sub.w	r3, r9, r8
        if (blk_sz > tmp_buf_sz) {
    1cc6:	455b      	cmp	r3, fp
    1cc8:	bf28      	it	cs
    1cca:	465b      	movcs	r3, fp
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
    1ccc:	4652      	mov	r2, sl
    1cce:	4641      	mov	r1, r8
    1cd0:	4630      	mov	r0, r6
    1cd2:	461d      	mov	r5, r3
    1cd4:	f7fe ff94 	bl	c00 <flash_area_read>
        if (rc) {
    1cd8:	2800      	cmp	r0, #0
    1cda:	d1ef      	bne.n	1cbc <bootutil_img_validate+0x8c>
    (void)mbedtls_sha256_update_ret(ctx, data, data_len);
    1cdc:	462a      	mov	r2, r5
    1cde:	4651      	mov	r1, sl
    1ce0:	4620      	mov	r0, r4
    1ce2:	f000 f929 	bl	1f38 <mbedtls_sha256_update_ret>
    for (off = 0; off < size; off += blk_sz) {
    1ce6:	44a8      	add	r8, r5
    1ce8:	e7c2      	b.n	1c70 <bootutil_img_validate+0x40>
    end = off + info.it_tlv_tot;
    1cea:	f8bd 7006 	ldrh.w	r7, [sp, #6]
    int sha256_valid = 0;
    1cee:	4680      	mov	r8, r0
    end = off + info.it_tlv_tot;
    1cf0:	442f      	add	r7, r5
    off += sizeof(info);
    1cf2:	3504      	adds	r5, #4
    for (; off < end; off += sizeof(tlv) + tlv.it_len) {
    1cf4:	42bd      	cmp	r5, r7
    1cf6:	d302      	bcc.n	1cfe <bootutil_img_validate+0xce>
    if (!sha256_valid) {
    1cf8:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
    1cfc:	e7de      	b.n	1cbc <bootutil_img_validate+0x8c>
        rc = flash_area_read(fap, off, &tlv, sizeof tlv);
    1cfe:	2304      	movs	r3, #4
    1d00:	aa02      	add	r2, sp, #8
    1d02:	4629      	mov	r1, r5
    1d04:	4630      	mov	r0, r6
    1d06:	f7fe ff7b 	bl	c00 <flash_area_read>
        if (rc) {
    1d0a:	2800      	cmp	r0, #0
    1d0c:	d1d6      	bne.n	1cbc <bootutil_img_validate+0x8c>
        if (tlv.it_type == IMAGE_TLV_SHA256) {
    1d0e:	f89d 3008 	ldrb.w	r3, [sp, #8]
    1d12:	2b10      	cmp	r3, #16
    1d14:	d115      	bne.n	1d42 <bootutil_img_validate+0x112>
            if (tlv.it_len != sizeof(hash)) {
    1d16:	f8bd 800a 	ldrh.w	r8, [sp, #10]
    1d1a:	f1b8 0f20 	cmp.w	r8, #32
    1d1e:	d1cb      	bne.n	1cb8 <bootutil_img_validate+0x88>
            rc = flash_area_read(fap, off + sizeof(tlv), buf, sizeof hash);
    1d20:	4643      	mov	r3, r8
    1d22:	4622      	mov	r2, r4
    1d24:	1d29      	adds	r1, r5, #4
    1d26:	4630      	mov	r0, r6
    1d28:	f7fe ff6a 	bl	c00 <flash_area_read>
            if (rc) {
    1d2c:	2800      	cmp	r0, #0
    1d2e:	d1c5      	bne.n	1cbc <bootutil_img_validate+0x8c>
            if (memcmp(hash, buf, sizeof(hash))) {
    1d30:	4642      	mov	r2, r8
    1d32:	4621      	mov	r1, r4
    1d34:	a803      	add	r0, sp, #12
    1d36:	f7fe febf 	bl	ab8 <memcmp>
    1d3a:	2800      	cmp	r0, #0
    1d3c:	d1bc      	bne.n	1cb8 <bootutil_img_validate+0x88>
            sha256_valid = 1;
    1d3e:	f04f 0801 	mov.w	r8, #1
    for (; off < end; off += sizeof(tlv) + tlv.it_len) {
    1d42:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    1d46:	3304      	adds	r3, #4
    1d48:	441d      	add	r5, r3
    1d4a:	e7d3      	b.n	1cf4 <bootutil_img_validate+0xc4>

00001d4c <mbedtls_sha256_init>:
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
    1d4c:	226c      	movs	r2, #108	; 0x6c
    1d4e:	2100      	movs	r1, #0
    1d50:	f7fe bee3 	b.w	b1a <memset>

00001d54 <mbedtls_sha256_starts_ret>:
/*
 * SHA-256 context setup
 */
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    ctx->total[0] = 0;
    1d54:	2300      	movs	r3, #0
    ctx->total[1] = 0;
    1d56:	e9c0 3300 	strd	r3, r3, [r0]

    if( is224 == 0 )
    1d5a:	b9c1      	cbnz	r1, 1d8e <mbedtls_sha256_starts_ret+0x3a>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
        ctx->state[1] = 0xBB67AE85;
    1d5c:	4a19      	ldr	r2, [pc, #100]	; (1dc4 <mbedtls_sha256_starts_ret+0x70>)
    1d5e:	4b1a      	ldr	r3, [pc, #104]	; (1dc8 <mbedtls_sha256_starts_ret+0x74>)
        ctx->state[2] = 0x3C6EF372;
        ctx->state[3] = 0xA54FF53A;
    1d60:	f8df c068 	ldr.w	ip, [pc, #104]	; 1dcc <mbedtls_sha256_starts_ret+0x78>
        ctx->state[1] = 0xBB67AE85;
    1d64:	e9c0 2302 	strd	r2, r3, [r0, #8]
        ctx->state[3] = 0xA54FF53A;
    1d68:	4b19      	ldr	r3, [pc, #100]	; (1dd0 <mbedtls_sha256_starts_ret+0x7c>)
        ctx->state[4] = 0x510E527F;
        ctx->state[5] = 0x9B05688C;
    1d6a:	4a1a      	ldr	r2, [pc, #104]	; (1dd4 <mbedtls_sha256_starts_ret+0x80>)
        ctx->state[3] = 0xA54FF53A;
    1d6c:	e9c0 c304 	strd	ip, r3, [r0, #16]
        ctx->state[5] = 0x9B05688C;
    1d70:	4b19      	ldr	r3, [pc, #100]	; (1dd8 <mbedtls_sha256_starts_ret+0x84>)
    1d72:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[6] = 0x1F83D9AB;
    1d76:	4b19      	ldr	r3, [pc, #100]	; (1ddc <mbedtls_sha256_starts_ret+0x88>)
    1d78:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
    1d7a:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
    1d7e:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    1d82:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
        ctx->state[2] = 0x3070DD17;
        ctx->state[3] = 0xF70E5939;
        ctx->state[4] = 0xFFC00B31;
        ctx->state[5] = 0x68581511;
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
    1d86:	6243      	str	r3, [r0, #36]	; 0x24
    }

    ctx->is224 = is224;
    1d88:	6681      	str	r1, [r0, #104]	; 0x68

    return( 0 );
}
    1d8a:	2000      	movs	r0, #0
    1d8c:	4770      	bx	lr
        ctx->state[1] = 0x367CD507;
    1d8e:	4b14      	ldr	r3, [pc, #80]	; (1de0 <mbedtls_sha256_starts_ret+0x8c>)
    1d90:	4a14      	ldr	r2, [pc, #80]	; (1de4 <mbedtls_sha256_starts_ret+0x90>)
        ctx->state[4] = 0xFFC00B31;
    1d92:	f8df c054 	ldr.w	ip, [pc, #84]	; 1de8 <mbedtls_sha256_starts_ret+0x94>
        ctx->state[1] = 0x367CD507;
    1d96:	e9c0 2302 	strd	r2, r3, [r0, #8]
        ctx->state[2] = 0x3070DD17;
    1d9a:	f103 4379 	add.w	r3, r3, #4177526784	; 0xf9000000
    1d9e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
    1da2:	f503 6301 	add.w	r3, r3, #2064	; 0x810
    1da6:	6103      	str	r3, [r0, #16]
        ctx->state[4] = 0xFFC00B31;
    1da8:	4b10      	ldr	r3, [pc, #64]	; (1dec <mbedtls_sha256_starts_ret+0x98>)
    1daa:	e9c0 c305 	strd	ip, r3, [r0, #20]
        ctx->state[5] = 0x68581511;
    1dae:	f103 43d1 	add.w	r3, r3, #1753219072	; 0x68800000
    1db2:	f503 13c0 	add.w	r3, r3, #1572864	; 0x180000
    1db6:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
    1dba:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
    1dbc:	4b0c      	ldr	r3, [pc, #48]	; (1df0 <mbedtls_sha256_starts_ret+0x9c>)
    1dbe:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
    1dc0:	4b0c      	ldr	r3, [pc, #48]	; (1df4 <mbedtls_sha256_starts_ret+0xa0>)
    1dc2:	e7e0      	b.n	1d86 <mbedtls_sha256_starts_ret+0x32>
    1dc4:	6a09e667 	.word	0x6a09e667
    1dc8:	bb67ae85 	.word	0xbb67ae85
    1dcc:	3c6ef372 	.word	0x3c6ef372
    1dd0:	a54ff53a 	.word	0xa54ff53a
    1dd4:	510e527f 	.word	0x510e527f
    1dd8:	9b05688c 	.word	0x9b05688c
    1ddc:	1f83d9ab 	.word	0x1f83d9ab
    1de0:	367cd507 	.word	0x367cd507
    1de4:	c1059ed8 	.word	0xc1059ed8
    1de8:	f70e5939 	.word	0xf70e5939
    1dec:	ffc00b31 	.word	0xffc00b31
    1df0:	64f98fa7 	.word	0x64f98fa7
    1df4:	befa4fa4 	.word	0xbefa4fa4

00001df8 <mbedtls_internal_sha256_process>:
    d += temp1; h = temp1 + temp2;              \
}

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
    1df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1dfc:	4602      	mov	r2, r0
    1dfe:	b0cd      	sub	sp, #308	; 0x134
    1e00:	3208      	adds	r2, #8
    1e02:	9000      	str	r0, [sp, #0]
    1e04:	460b      	mov	r3, r1
    1e06:	9203      	str	r2, [sp, #12]
    uint32_t temp1, temp2, W[64];
    uint32_t A[8];
    unsigned int i;

    for( i = 0; i < 8; i++ )
        A[i] = ctx->state[i];
    1e08:	ad04      	add	r5, sp, #16
    1e0a:	f100 0628 	add.w	r6, r0, #40	; 0x28
    1e0e:	6810      	ldr	r0, [r2, #0]
    1e10:	6851      	ldr	r1, [r2, #4]
    1e12:	462c      	mov	r4, r5
    1e14:	c403      	stmia	r4!, {r0, r1}
    1e16:	3208      	adds	r2, #8
    1e18:	42b2      	cmp	r2, r6
    1e1a:	4625      	mov	r5, r4
    1e1c:	d1f7      	bne.n	1e0e <mbedtls_internal_sha256_process+0x16>
    1e1e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    1e20:	9201      	str	r2, [sp, #4]
    1e22:	e9dd 8709 	ldrd	r8, r7, [sp, #36]	; 0x24
    1e26:	e9dd 0604 	ldrd	r0, r6, [sp, #16]
    1e2a:	e9dd eb06 	ldrd	lr, fp, [sp, #24]
    1e2e:	4a41      	ldr	r2, [pc, #260]	; (1f34 <mbedtls_internal_sha256_process+0x13c>)
    1e30:	9c08      	ldr	r4, [sp, #32]
    1e32:	9202      	str	r2, [sp, #8]
    1e34:	ad0c      	add	r5, sp, #48	; 0x30
    1e36:	4619      	mov	r1, r3

#if defined(MBEDTLS_SHA256_SMALLER)
    for( i = 0; i < 64; i++ )
    1e38:	f04f 0900 	mov.w	r9, #0
    {
        if( i < 16 )
    1e3c:	f1b9 0f0f 	cmp.w	r9, #15
    1e40:	d85f      	bhi.n	1f02 <mbedtls_internal_sha256_process+0x10a>
            GET_UINT32_BE( W[i], data, 4 * i );
    1e42:	784b      	ldrb	r3, [r1, #1]
    1e44:	f891 a000 	ldrb.w	sl, [r1]
    1e48:	f891 c002 	ldrb.w	ip, [r1, #2]
    1e4c:	041b      	lsls	r3, r3, #16
    1e4e:	ea43 630a 	orr.w	r3, r3, sl, lsl #24
    1e52:	f891 a003 	ldrb.w	sl, [r1, #3]
    1e56:	ea43 030a 	orr.w	r3, r3, sl
    1e5a:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
        else
            R( i );

        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i], K[i] );
    1e5e:	ea4f 22f4 	mov.w	r2, r4, ror #11
    1e62:	ea82 12b4 	eor.w	r2, r2, r4, ror #6
    1e66:	ea82 6c74 	eor.w	ip, r2, r4, ror #25
    1e6a:	ea87 0208 	eor.w	r2, r7, r8
    1e6e:	f8dd a008 	ldr.w	sl, [sp, #8]
    1e72:	f845 3b04 	str.w	r3, [r5], #4
    1e76:	4022      	ands	r2, r4
    1e78:	407a      	eors	r2, r7
    1e7a:	4462      	add	r2, ip
    1e7c:	f85a cb04 	ldr.w	ip, [sl], #4
    1e80:	f8cd a008 	str.w	sl, [sp, #8]
    1e84:	4494      	add	ip, r2
    1e86:	9a01      	ldr	r2, [sp, #4]
    1e88:	9701      	str	r7, [sp, #4]
    1e8a:	4463      	add	r3, ip
    1e8c:	4413      	add	r3, r2
    1e8e:	ea40 0c06 	orr.w	ip, r0, r6
    1e92:	ea4f 3270 	mov.w	r2, r0, ror #13
    1e96:	eb0b 0a03 	add.w	sl, fp, r3
    1e9a:	ea82 02b0 	eor.w	r2, r2, r0, ror #2
    1e9e:	ea0c 0c0e 	and.w	ip, ip, lr
    1ea2:	ea00 0b06 	and.w	fp, r0, r6
    1ea6:	ea82 52b0 	eor.w	r2, r2, r0, ror #22
    1eaa:	ea4c 0b0b 	orr.w	fp, ip, fp
    for( i = 0; i < 64; i++ )
    1eae:	f109 0901 	add.w	r9, r9, #1
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i], K[i] );
    1eb2:	4493      	add	fp, r2
    for( i = 0; i < 64; i++ )
    1eb4:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i], K[i] );
    1eb8:	445b      	add	r3, fp
    for( i = 0; i < 64; i++ )
    1eba:	f101 0104 	add.w	r1, r1, #4
    1ebe:	46f3      	mov	fp, lr
    1ec0:	d118      	bne.n	1ef4 <mbedtls_internal_sha256_process+0xfc>
    1ec2:	e9cd 3004 	strd	r3, r0, [sp, #16]
    1ec6:	e9cd 4809 	strd	r4, r8, [sp, #36]	; 0x24
    1eca:	9800      	ldr	r0, [sp, #0]
    1ecc:	9a03      	ldr	r2, [sp, #12]
    1ece:	970b      	str	r7, [sp, #44]	; 0x2c
    1ed0:	e9cd 6e06 	strd	r6, lr, [sp, #24]
    1ed4:	f8cd a020 	str.w	sl, [sp, #32]
    1ed8:	ab04      	add	r3, sp, #16
    1eda:	3028      	adds	r0, #40	; 0x28
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += A[i];
    1edc:	6811      	ldr	r1, [r2, #0]
    1ede:	f853 4b04 	ldr.w	r4, [r3], #4
    1ee2:	4421      	add	r1, r4
    1ee4:	f842 1b04 	str.w	r1, [r2], #4
    for( i = 0; i < 8; i++ )
    1ee8:	4282      	cmp	r2, r0
    1eea:	d1f7      	bne.n	1edc <mbedtls_internal_sha256_process+0xe4>

    return( 0 );
}
    1eec:	2000      	movs	r0, #0
    1eee:	b04d      	add	sp, #308	; 0x134
    1ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ef4:	46b6      	mov	lr, r6
    1ef6:	4647      	mov	r7, r8
    1ef8:	4606      	mov	r6, r0
    1efa:	46a0      	mov	r8, r4
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i], K[i] );
    1efc:	4618      	mov	r0, r3
    1efe:	4654      	mov	r4, sl
    1f00:	e79c      	b.n	1e3c <mbedtls_internal_sha256_process+0x44>
            R( i );
    1f02:	f855 3c08 	ldr.w	r3, [r5, #-8]
    1f06:	f855 ac3c 	ldr.w	sl, [r5, #-60]
    1f0a:	f855 2c40 	ldr.w	r2, [r5, #-64]
    1f0e:	ea4f 4cf3 	mov.w	ip, r3, ror #19
    1f12:	ea8c 4c73 	eor.w	ip, ip, r3, ror #17
    1f16:	ea8c 2c93 	eor.w	ip, ip, r3, lsr #10
    1f1a:	f855 3c1c 	ldr.w	r3, [r5, #-28]
    1f1e:	4413      	add	r3, r2
    1f20:	ea4f 42ba 	mov.w	r2, sl, ror #18
    1f24:	ea82 12fa 	eor.w	r2, r2, sl, ror #7
    1f28:	449c      	add	ip, r3
    1f2a:	ea82 03da 	eor.w	r3, r2, sl, lsr #3
    1f2e:	4463      	add	r3, ip
    1f30:	e795      	b.n	1e5e <mbedtls_internal_sha256_process+0x66>
    1f32:	bf00      	nop
    1f34:	000023cc 	.word	0x000023cc

00001f38 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
    1f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1f3c:	4605      	mov	r5, r0
    1f3e:	460e      	mov	r6, r1
    int ret;
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
    1f40:	4614      	mov	r4, r2
    1f42:	b912      	cbnz	r2, 1f4a <mbedtls_sha256_update_ret+0x12>
    }

    if( ilen > 0 )
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
    1f44:	2000      	movs	r0, #0
}
    1f46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    left = ctx->total[0] & 0x3F;
    1f4a:	6803      	ldr	r3, [r0, #0]
    1f4c:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    ctx->total[0] += (uint32_t) ilen;
    1f50:	18d3      	adds	r3, r2, r3
    1f52:	6003      	str	r3, [r0, #0]
        ctx->total[1]++;
    1f54:	bf22      	ittt	cs
    1f56:	6843      	ldrcs	r3, [r0, #4]
    1f58:	3301      	addcs	r3, #1
    1f5a:	6043      	strcs	r3, [r0, #4]
    if( left && ilen >= fill )
    1f5c:	b1a7      	cbz	r7, 1f88 <mbedtls_sha256_update_ret+0x50>
    fill = 64 - left;
    1f5e:	f1c7 0940 	rsb	r9, r7, #64	; 0x40
    if( left && ilen >= fill )
    1f62:	454a      	cmp	r2, r9
    1f64:	d310      	bcc.n	1f88 <mbedtls_sha256_update_ret+0x50>
        memcpy( (void *) (ctx->buffer + left), input, fill );
    1f66:	f100 0828 	add.w	r8, r0, #40	; 0x28
    1f6a:	464a      	mov	r2, r9
    1f6c:	eb08 0007 	add.w	r0, r8, r7
    1f70:	f7fe fdc6 	bl	b00 <memcpy>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    1f74:	4641      	mov	r1, r8
    1f76:	4628      	mov	r0, r5
    1f78:	f7ff ff3e 	bl	1df8 <mbedtls_internal_sha256_process>
    1f7c:	2800      	cmp	r0, #0
    1f7e:	d1e2      	bne.n	1f46 <mbedtls_sha256_update_ret+0xe>
        ilen  -= fill;
    1f80:	443c      	add	r4, r7
        input += fill;
    1f82:	444e      	add	r6, r9
        ilen  -= fill;
    1f84:	3c40      	subs	r4, #64	; 0x40
        left = 0;
    1f86:	4607      	mov	r7, r0
    1f88:	4426      	add	r6, r4
    1f8a:	e005      	b.n	1f98 <mbedtls_sha256_update_ret+0x60>
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
    1f8c:	4628      	mov	r0, r5
    1f8e:	f7ff ff33 	bl	1df8 <mbedtls_internal_sha256_process>
    1f92:	2800      	cmp	r0, #0
    1f94:	d1d7      	bne.n	1f46 <mbedtls_sha256_update_ret+0xe>
        ilen  -= 64;
    1f96:	3c40      	subs	r4, #64	; 0x40
    while( ilen >= 64 )
    1f98:	2c3f      	cmp	r4, #63	; 0x3f
    1f9a:	eba6 0104 	sub.w	r1, r6, r4
    1f9e:	d8f5      	bhi.n	1f8c <mbedtls_sha256_update_ret+0x54>
    if( ilen > 0 )
    1fa0:	2c00      	cmp	r4, #0
    1fa2:	d0cf      	beq.n	1f44 <mbedtls_sha256_update_ret+0xc>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
    1fa4:	f105 0028 	add.w	r0, r5, #40	; 0x28
    1fa8:	4622      	mov	r2, r4
    1faa:	4438      	add	r0, r7
    1fac:	f7fe fda8 	bl	b00 <memcpy>
    1fb0:	e7c8      	b.n	1f44 <mbedtls_sha256_update_ret+0xc>

00001fb2 <mbedtls_sha256_finish_ret>:
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
    1fb2:	6803      	ldr	r3, [r0, #0]
    1fb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
    1fb8:	1c5a      	adds	r2, r3, #1
    1fba:	4403      	add	r3, r0
{
    1fbc:	b570      	push	{r4, r5, r6, lr}

    if( used <= 56 )
    1fbe:	2a38      	cmp	r2, #56	; 0x38
{
    1fc0:	460d      	mov	r5, r1
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
    1fc2:	f100 0628 	add.w	r6, r0, #40	; 0x28
    ctx->buffer[used++] = 0x80;
    1fc6:	f04f 0180 	mov.w	r1, #128	; 0x80
{
    1fca:	4604      	mov	r4, r0
    ctx->buffer[used++] = 0x80;
    1fcc:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
        memset( ctx->buffer + used, 0, 56 - used );
    1fd0:	eb06 0002 	add.w	r0, r6, r2
    if( used <= 56 )
    1fd4:	d861      	bhi.n	209a <mbedtls_sha256_finish_ret+0xe8>
        memset( ctx->buffer + used, 0, 56 - used );
    1fd6:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
    1fda:	2100      	movs	r1, #0
        memset( ctx->buffer + used, 0, 64 - used );

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
            return( ret );

        memset( ctx->buffer, 0, 56 );
    1fdc:	f7fe fd9d 	bl	b1a <memset>

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    1fe0:	e9d4 3100 	ldrd	r3, r1, [r4]
    high = ( ctx->total[0] >> 29 )
    1fe4:	0f5a      	lsrs	r2, r3, #29
    1fe6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );
    1fea:	00db      	lsls	r3, r3, #3
    1fec:	ba12      	rev	r2, r2
    1fee:	ba1b      	rev	r3, r3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
    1ff0:	6622      	str	r2, [r4, #96]	; 0x60
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
    1ff2:	6663      	str	r3, [r4, #100]	; 0x64

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    1ff4:	4631      	mov	r1, r6
    1ff6:	4620      	mov	r0, r4
    1ff8:	f7ff fefe 	bl	1df8 <mbedtls_internal_sha256_process>
    1ffc:	2800      	cmp	r0, #0
    1ffe:	d14b      	bne.n	2098 <mbedtls_sha256_finish_ret+0xe6>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
    2000:	7ae3      	ldrb	r3, [r4, #11]
    2002:	702b      	strb	r3, [r5, #0]
    2004:	8963      	ldrh	r3, [r4, #10]
    2006:	706b      	strb	r3, [r5, #1]
    2008:	68a3      	ldr	r3, [r4, #8]
    200a:	0a1b      	lsrs	r3, r3, #8
    200c:	70ab      	strb	r3, [r5, #2]
    200e:	68a3      	ldr	r3, [r4, #8]
    2010:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
    2012:	7be3      	ldrb	r3, [r4, #15]
    2014:	712b      	strb	r3, [r5, #4]
    2016:	89e3      	ldrh	r3, [r4, #14]
    2018:	716b      	strb	r3, [r5, #5]
    201a:	68e3      	ldr	r3, [r4, #12]
    201c:	0a1b      	lsrs	r3, r3, #8
    201e:	71ab      	strb	r3, [r5, #6]
    2020:	68e3      	ldr	r3, [r4, #12]
    2022:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
    2024:	7ce3      	ldrb	r3, [r4, #19]
    2026:	722b      	strb	r3, [r5, #8]
    2028:	8a63      	ldrh	r3, [r4, #18]
    202a:	726b      	strb	r3, [r5, #9]
    202c:	6923      	ldr	r3, [r4, #16]
    202e:	0a1b      	lsrs	r3, r3, #8
    2030:	72ab      	strb	r3, [r5, #10]
    2032:	6923      	ldr	r3, [r4, #16]
    2034:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
    2036:	7de3      	ldrb	r3, [r4, #23]
    2038:	732b      	strb	r3, [r5, #12]
    203a:	8ae3      	ldrh	r3, [r4, #22]
    203c:	736b      	strb	r3, [r5, #13]
    203e:	6963      	ldr	r3, [r4, #20]
    2040:	0a1b      	lsrs	r3, r3, #8
    2042:	73ab      	strb	r3, [r5, #14]
    2044:	6963      	ldr	r3, [r4, #20]
    2046:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
    2048:	7ee3      	ldrb	r3, [r4, #27]
    204a:	742b      	strb	r3, [r5, #16]
    204c:	8b63      	ldrh	r3, [r4, #26]
    204e:	746b      	strb	r3, [r5, #17]
    2050:	69a3      	ldr	r3, [r4, #24]
    2052:	0a1b      	lsrs	r3, r3, #8
    2054:	74ab      	strb	r3, [r5, #18]
    2056:	69a3      	ldr	r3, [r4, #24]
    2058:	74eb      	strb	r3, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
    205a:	7fe3      	ldrb	r3, [r4, #31]
    205c:	752b      	strb	r3, [r5, #20]
    205e:	8be3      	ldrh	r3, [r4, #30]
    2060:	756b      	strb	r3, [r5, #21]
    2062:	69e3      	ldr	r3, [r4, #28]
    2064:	0a1b      	lsrs	r3, r3, #8
    2066:	75ab      	strb	r3, [r5, #22]
    2068:	69e3      	ldr	r3, [r4, #28]
    206a:	75eb      	strb	r3, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
    206c:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    2070:	762b      	strb	r3, [r5, #24]
    2072:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    2074:	766b      	strb	r3, [r5, #25]
    2076:	6a23      	ldr	r3, [r4, #32]
    2078:	0a1b      	lsrs	r3, r3, #8
    207a:	76ab      	strb	r3, [r5, #26]
    207c:	6a23      	ldr	r3, [r4, #32]
    207e:	76eb      	strb	r3, [r5, #27]

    if( ctx->is224 == 0 )
    2080:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    2082:	b94b      	cbnz	r3, 2098 <mbedtls_sha256_finish_ret+0xe6>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
    2084:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    2088:	772b      	strb	r3, [r5, #28]
    208a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    208c:	776b      	strb	r3, [r5, #29]
    208e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2090:	0a1b      	lsrs	r3, r3, #8
    2092:	77ab      	strb	r3, [r5, #30]
    2094:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2096:	77eb      	strb	r3, [r5, #31]

    return( 0 );
}
    2098:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer + used, 0, 64 - used );
    209a:	2100      	movs	r1, #0
    209c:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
    20a0:	f7fe fd3b 	bl	b1a <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    20a4:	4631      	mov	r1, r6
    20a6:	4620      	mov	r0, r4
    20a8:	f7ff fea6 	bl	1df8 <mbedtls_internal_sha256_process>
    20ac:	2800      	cmp	r0, #0
    20ae:	d1f3      	bne.n	2098 <mbedtls_sha256_finish_ret+0xe6>
        memset( ctx->buffer, 0, 56 );
    20b0:	4601      	mov	r1, r0
    20b2:	2238      	movs	r2, #56	; 0x38
    20b4:	4630      	mov	r0, r6
    20b6:	e791      	b.n	1fdc <mbedtls_sha256_finish_ret+0x2a>

000020b8 <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
    20b8:	6843      	ldr	r3, [r0, #4]
    20ba:	428b      	cmp	r3, r1
    20bc:	d807      	bhi.n	20ce <hal_flash_check_addr+0x16>
    20be:	6882      	ldr	r2, [r0, #8]
    20c0:	4413      	add	r3, r2
        return SYS_EINVAL;
    }
    return 0;
    20c2:	428b      	cmp	r3, r1
    20c4:	bf34      	ite	cc
    20c6:	f06f 0001 	mvncc.w	r0, #1
    20ca:	2000      	movcs	r0, #0
    20cc:	4770      	bx	lr
        return SYS_EINVAL;
    20ce:	f06f 0001 	mvn.w	r0, #1
}
    20d2:	4770      	bx	lr

000020d4 <hal_flash_init>:
{
    20d4:	b538      	push	{r3, r4, r5, lr}
    20d6:	2400      	movs	r4, #0
    int rc = 0;
    20d8:	4625      	mov	r5, r4
        hf = hal_bsp_flash_dev(i);
    20da:	b2e0      	uxtb	r0, r4
    20dc:	f7fe f9c0 	bl	460 <hal_bsp_flash_dev>
        if (!hf) {
    20e0:	b140      	cbz	r0, 20f4 <hal_flash_init+0x20>
        if (hf->hf_itf->hff_init(hf)) {
    20e2:	6803      	ldr	r3, [r0, #0]
    20e4:	695b      	ldr	r3, [r3, #20]
    20e6:	4798      	blx	r3
            rc = SYS_EIO;
    20e8:	2800      	cmp	r0, #0
    20ea:	bf18      	it	ne
    20ec:	f06f 0504 	mvnne.w	r5, #4
    for (i = 0; ; i++) {
    20f0:	3401      	adds	r4, #1
        hf = hal_bsp_flash_dev(i);
    20f2:	e7f2      	b.n	20da <hal_flash_init+0x6>
}
    20f4:	4628      	mov	r0, r5
    20f6:	bd38      	pop	{r3, r4, r5, pc}

000020f8 <hal_flash_align>:
{
    20f8:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
    20fa:	f7fe f9b1 	bl	460 <hal_bsp_flash_dev>
    if (!hf) {
    20fe:	b108      	cbz	r0, 2104 <hal_flash_align+0xc>
    return hf->hf_align;
    2100:	7c00      	ldrb	r0, [r0, #16]
}
    2102:	bd08      	pop	{r3, pc}
        return 1;
    2104:	2001      	movs	r0, #1
    2106:	e7fc      	b.n	2102 <hal_flash_align+0xa>

00002108 <hal_flash_erased_val>:
{
    2108:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
    210a:	f7fe f9a9 	bl	460 <hal_bsp_flash_dev>
    if (!hf) {
    210e:	b108      	cbz	r0, 2114 <hal_flash_erased_val+0xc>
    return hf->hf_erased_val;
    2110:	7d00      	ldrb	r0, [r0, #20]
}
    2112:	bd08      	pop	{r3, pc}
        return 1;
    2114:	2001      	movs	r0, #1
    2116:	e7fc      	b.n	2112 <hal_flash_erased_val+0xa>

00002118 <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
    2118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    211c:	460d      	mov	r5, r1
    211e:	4617      	mov	r7, r2
    2120:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
    2122:	f7fe f99d 	bl	460 <hal_bsp_flash_dev>
    if (!hf) {
    2126:	4604      	mov	r4, r0
    2128:	b1b0      	cbz	r0, 2158 <hal_flash_read+0x40>
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
    212a:	4629      	mov	r1, r5
    212c:	f7ff ffc4 	bl	20b8 <hal_flash_check_addr>
    2130:	b990      	cbnz	r0, 2158 <hal_flash_read+0x40>
      hal_flash_check_addr(hf, address + num_bytes)) {
    2132:	19a9      	adds	r1, r5, r6
    2134:	4620      	mov	r0, r4
    2136:	f7ff ffbf 	bl	20b8 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    213a:	b968      	cbnz	r0, 2158 <hal_flash_read+0x40>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
    213c:	6823      	ldr	r3, [r4, #0]
    213e:	463a      	mov	r2, r7
    2140:	f8d3 8000 	ldr.w	r8, [r3]
    2144:	4629      	mov	r1, r5
    2146:	4633      	mov	r3, r6
    2148:	4620      	mov	r0, r4
    214a:	47c0      	blx	r8
    if (rc != 0) {
        return SYS_EIO;
    214c:	2800      	cmp	r0, #0
    214e:	bf18      	it	ne
    2150:	f06f 0004 	mvnne.w	r0, #4
    }

    return 0;
}
    2154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
    2158:	f06f 0001 	mvn.w	r0, #1
    215c:	e7fa      	b.n	2154 <hal_flash_read+0x3c>
	...

00002160 <hal_flash_write>:
#endif

int
hal_flash_write(uint8_t id, uint32_t address, const void *src,
  uint32_t num_bytes)
{
    2160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2164:	4605      	mov	r5, r0
    2166:	460e      	mov	r6, r1
    2168:	4690      	mov	r8, r2
    216a:	461f      	mov	r7, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
    216c:	f7fe f978 	bl	460 <hal_bsp_flash_dev>
    if (!hf) {
    2170:	4604      	mov	r4, r0
    2172:	b1f0      	cbz	r0, 21b2 <hal_flash_write+0x52>
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
    2174:	4631      	mov	r1, r6
    2176:	f7ff ff9f 	bl	20b8 <hal_flash_check_addr>
    217a:	b9d0      	cbnz	r0, 21b2 <hal_flash_write+0x52>
      hal_flash_check_addr(hf, address + num_bytes)) {
    217c:	19f1      	adds	r1, r6, r7
    217e:	4620      	mov	r0, r4
    2180:	f7ff ff9a 	bl	20b8 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    2184:	b9a8      	cbnz	r0, 21b2 <hal_flash_write+0x52>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
    2186:	08eb      	lsrs	r3, r5, #3
    2188:	4a0d      	ldr	r2, [pc, #52]	; (21c0 <hal_flash_write+0x60>)
    218a:	5cd0      	ldrb	r0, [r2, r3]
    218c:	f005 0507 	and.w	r5, r5, #7
    2190:	fa40 f505 	asr.w	r5, r0, r5
    2194:	07eb      	lsls	r3, r5, #31
    2196:	d40f      	bmi.n	21b8 <hal_flash_write+0x58>
        return SYS_EACCES;
    }

    rc = hf->hf_itf->hff_write(hf, address, src, num_bytes);
    2198:	6823      	ldr	r3, [r4, #0]
    219a:	4642      	mov	r2, r8
    219c:	685d      	ldr	r5, [r3, #4]
    219e:	4631      	mov	r1, r6
    21a0:	463b      	mov	r3, r7
    21a2:	4620      	mov	r0, r4
    21a4:	47a8      	blx	r5
    if (rc != 0) {
        return SYS_EIO;
    21a6:	2800      	cmp	r0, #0
    21a8:	bf18      	it	ne
    21aa:	f06f 0004 	mvnne.w	r0, #4
#if MYNEWT_VAL(HAL_FLASH_VERIFY_WRITES)
    assert(hal_flash_cmp(hf, address, src, num_bytes) == 0);
#endif

    return 0;
}
    21ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
    21b2:	f06f 0001 	mvn.w	r0, #1
    21b6:	e7fa      	b.n	21ae <hal_flash_write+0x4e>
        return SYS_EACCES;
    21b8:	f06f 0006 	mvn.w	r0, #6
    21bc:	e7f7      	b.n	21ae <hal_flash_write+0x4e>
    21be:	bf00      	nop
    21c0:	20001924 	.word	0x20001924

000021c4 <hal_flash_erase>:
    return 0;
}

int
hal_flash_erase(uint8_t id, uint32_t address, uint32_t num_bytes)
{
    21c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    21c8:	4605      	mov	r5, r0
    21ca:	460f      	mov	r7, r1
    21cc:	4690      	mov	r8, r2
    uint32_t end;
    uint32_t end_area;
    int i;
    int rc;

    hf = hal_bsp_flash_dev(id);
    21ce:	f7fe f947 	bl	460 <hal_bsp_flash_dev>
    if (!hf) {
    21d2:	4606      	mov	r6, r0
    21d4:	2800      	cmp	r0, #0
    21d6:	d04b      	beq.n	2270 <hal_flash_erase+0xac>
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
    21d8:	4639      	mov	r1, r7
    21da:	f7ff ff6d 	bl	20b8 <hal_flash_check_addr>
    21de:	2800      	cmp	r0, #0
    21e0:	d146      	bne.n	2270 <hal_flash_erase+0xac>
      hal_flash_check_addr(hf, address + num_bytes)) {
    21e2:	eb07 0908 	add.w	r9, r7, r8
    21e6:	4649      	mov	r1, r9
    21e8:	4630      	mov	r0, r6
    21ea:	f7ff ff65 	bl	20b8 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    21ee:	2800      	cmp	r0, #0
    21f0:	d13e      	bne.n	2270 <hal_flash_erase+0xac>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
    21f2:	08eb      	lsrs	r3, r5, #3
    21f4:	4a20      	ldr	r2, [pc, #128]	; (2278 <hal_flash_erase+0xb4>)
    21f6:	5cd4      	ldrb	r4, [r2, r3]
    21f8:	f005 0507 	and.w	r5, r5, #7
    21fc:	412c      	asrs	r4, r5
    21fe:	f014 0401 	ands.w	r4, r4, #1
    2202:	d132      	bne.n	226a <hal_flash_erase+0xa6>
        return SYS_EACCES;
    }

    end = address + num_bytes;
    if (end <= address) {
    2204:	45b9      	cmp	r9, r7
    2206:	d933      	bls.n	2270 <hal_flash_erase+0xac>
         * Check for wrap-around.
         */
        return SYS_EINVAL;
    }

    if (hf->hf_itf->hff_erase) {
    2208:	6833      	ldr	r3, [r6, #0]
    220a:	699b      	ldr	r3, [r3, #24]
    220c:	b35b      	cbz	r3, 2266 <hal_flash_erase+0xa2>
        hf->hf_itf->hff_erase(hf, address, num_bytes);
    220e:	4642      	mov	r2, r8
    2210:	4639      	mov	r1, r7
    2212:	4630      	mov	r0, r6
    2214:	4798      	blx	r3
#endif
            }
        }
    }
    return 0;
}
    2216:	4620      	mov	r0, r4
    2218:	b003      	add	sp, #12
    221a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            end_area = start + size;
    221e:	e9dd 1300 	ldrd	r1, r3, [sp]
    2222:	440b      	add	r3, r1
            if (address < end_area && end > start) {
    2224:	429f      	cmp	r7, r3
    2226:	d313      	bcc.n	2250 <hal_flash_erase+0x8c>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
    2228:	3501      	adds	r5, #1
    222a:	68f3      	ldr	r3, [r6, #12]
    222c:	42ab      	cmp	r3, r5
    222e:	ddf2      	ble.n	2216 <hal_flash_erase+0x52>
            rc = hf->hf_itf->hff_sector_info(hf, i, &start, &size);
    2230:	6833      	ldr	r3, [r6, #0]
    2232:	466a      	mov	r2, sp
    2234:	f8d3 800c 	ldr.w	r8, [r3, #12]
    2238:	4629      	mov	r1, r5
    223a:	ab01      	add	r3, sp, #4
    223c:	4630      	mov	r0, r6
    223e:	47c0      	blx	r8
            assert(rc == 0);
    2240:	2800      	cmp	r0, #0
    2242:	d0ec      	beq.n	221e <hal_flash_erase+0x5a>
    2244:	2300      	movs	r3, #0
    2246:	461a      	mov	r2, r3
    2248:	4619      	mov	r1, r3
    224a:	4618      	mov	r0, r3
    224c:	f7fe fb9c 	bl	988 <__assert_func>
            if (address < end_area && end > start) {
    2250:	4589      	cmp	r9, r1
    2252:	d9e9      	bls.n	2228 <hal_flash_erase+0x64>
                if (hf->hf_itf->hff_erase_sector(hf, start)) {
    2254:	6833      	ldr	r3, [r6, #0]
    2256:	4630      	mov	r0, r6
    2258:	689b      	ldr	r3, [r3, #8]
    225a:	4798      	blx	r3
    225c:	2800      	cmp	r0, #0
    225e:	d0e3      	beq.n	2228 <hal_flash_erase+0x64>
                    return SYS_EIO;
    2260:	f06f 0404 	mvn.w	r4, #4
    2264:	e7d7      	b.n	2216 <hal_flash_erase+0x52>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
    2266:	4625      	mov	r5, r4
    2268:	e7df      	b.n	222a <hal_flash_erase+0x66>
        return SYS_EACCES;
    226a:	f06f 0406 	mvn.w	r4, #6
    226e:	e7d2      	b.n	2216 <hal_flash_erase+0x52>
        return SYS_EINVAL;
    2270:	f06f 0401 	mvn.w	r4, #1
    2274:	e7cf      	b.n	2216 <hal_flash_erase+0x52>
    2276:	bf00      	nop
    2278:	20001924 	.word	0x20001924

0000227c <hal_flash_is_erased>:

int
hal_flash_is_erased(const struct hal_flash *hf, uint32_t address, void *dst,
        uint32_t num_bytes)
{
    227c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t *buf;
    int rc;

    buf = dst;

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
    227e:	6807      	ldr	r7, [r0, #0]
    2280:	683f      	ldr	r7, [r7, #0]
{
    2282:	4606      	mov	r6, r0
    2284:	4614      	mov	r4, r2
    2286:	461d      	mov	r5, r3
    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
    2288:	47b8      	blx	r7
    if (rc != 0) {
    228a:	b958      	cbnz	r0, 22a4 <hal_flash_is_erased+0x28>
    228c:	4622      	mov	r2, r4
    228e:	4425      	add	r5, r4
        return SYS_EIO;
    }

    for (i = 0; i < num_bytes; i++) {
    2290:	4295      	cmp	r5, r2
    2292:	d101      	bne.n	2298 <hal_flash_is_erased+0x1c>
        if (buf[i] != hf->hf_erased_val) {
            return 0;
        }
    }
    return 1;
    2294:	2001      	movs	r0, #1
    2296:	e004      	b.n	22a2 <hal_flash_is_erased+0x26>
        if (buf[i] != hf->hf_erased_val) {
    2298:	f812 3b01 	ldrb.w	r3, [r2], #1
    229c:	7d31      	ldrb	r1, [r6, #20]
    229e:	4299      	cmp	r1, r3
    22a0:	d0f6      	beq.n	2290 <hal_flash_is_erased+0x14>
}
    22a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return SYS_EIO;
    22a4:	f06f 0004 	mvn.w	r0, #4
    22a8:	e7fb      	b.n	22a2 <hal_flash_is_erased+0x26>

000022aa <hal_flash_isempty>:

int
hal_flash_isempty(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
    22aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    22ae:	460d      	mov	r5, r1
    22b0:	4617      	mov	r7, r2
    22b2:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
    22b4:	f7fe f8d4 	bl	460 <hal_bsp_flash_dev>
    if (!hf) {
    22b8:	4604      	mov	r4, r0
    22ba:	b1e8      	cbz	r0, 22f8 <hal_flash_isempty+0x4e>
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
    22bc:	4629      	mov	r1, r5
    22be:	f7ff fefb 	bl	20b8 <hal_flash_check_addr>
    22c2:	b9c8      	cbnz	r0, 22f8 <hal_flash_isempty+0x4e>
      hal_flash_check_addr(hf, address + num_bytes)) {
    22c4:	19a9      	adds	r1, r5, r6
    22c6:	4620      	mov	r0, r4
    22c8:	f7ff fef6 	bl	20b8 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    22cc:	b9a0      	cbnz	r0, 22f8 <hal_flash_isempty+0x4e>
        return SYS_EINVAL;
    }
    if (hf->hf_itf->hff_is_empty) {
    22ce:	6823      	ldr	r3, [r4, #0]
    22d0:	f8d3 8010 	ldr.w	r8, [r3, #16]
        rc = hf->hf_itf->hff_is_empty(hf, address, dst, num_bytes);
    22d4:	463a      	mov	r2, r7
    22d6:	4633      	mov	r3, r6
    22d8:	4629      	mov	r1, r5
    22da:	4620      	mov	r0, r4
    if (hf->hf_itf->hff_is_empty) {
    22dc:	f1b8 0f00 	cmp.w	r8, #0
    22e0:	d006      	beq.n	22f0 <hal_flash_isempty+0x46>
        rc = hf->hf_itf->hff_is_empty(hf, address, dst, num_bytes);
    22e2:	47c0      	blx	r8
        if (rc < 0) {
            return SYS_EIO;
    22e4:	2800      	cmp	r0, #0
    22e6:	bfb8      	it	lt
    22e8:	f06f 0004 	mvnlt.w	r0, #4
            return rc;
        }
    } else {
        return hal_flash_is_erased(hf, address, dst, num_bytes);
    }
}
    22ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    22f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return hal_flash_is_erased(hf, address, dst, num_bytes);
    22f4:	f7ff bfc2 	b.w	227c <hal_flash_is_erased>
        return SYS_EINVAL;
    22f8:	f06f 0001 	mvn.w	r0, #1
    22fc:	e7f6      	b.n	22ec <hal_flash_isempty+0x42>
	...

00002300 <nrf52k_flash_dev>:
    2300:	2318 0000 0000 0000 0000 0008 0080 0000     .#..............
    2310:	0001 0000 00ff 0000                         ........

00002318 <nrf52k_flash_funcs>:
    2318:	05e5 0000 0525 0000 04d5 0000 05f3 0000     ....%...........
    2328:	0000 0000 0521 0000 0000 0000               ....!.......

00002334 <nrf52_hal_timers>:
    2334:	00f4 2000 0000 0000 0000 0000 0000 0000     ... ............
	...

0000234c <sysflash_map_dflt>:
	...
    2354:	4000 0000 0001 0000 8000 0000 a000 0003     .@..............
    2364:	0002 0000 2000 0004 a000 0003 0003 0000     ..... ..........
    2374:	c000 0007 1000 0000 0010 0000 4000 0000     .............@..
    2384:	4000 0000 0011 0000 d000 0007 3000 0000     .@...........0..

00002394 <boot_status_tables>:
    2394:	0501 0001 0501 0203 0104 0104 0403 0203     ................

000023a4 <BOOT_MAX_ALIGN>:
    23a4:	0008 0000                                   ....

000023a8 <boot_img_magic>:
    23a8:	c277 f395 d260 7fef 5235 0f50 b62c 8079     w...`...5RP.,.y.

000023b8 <boot_swap_tables>:
    23b8:	0104 0304 0204 0104 0104 0304 0301 0403     ................
    23c8:	0401 0000                                   ....

000023cc <K>:
    23cc:	2f98 428a 4491 7137 fbcf b5c0 dba5 e9b5     ./.B.D7q........
    23dc:	c25b 3956 11f1 59f1 82a4 923f 5ed5 ab1c     [.V9...Y..?..^..
    23ec:	aa98 d807 5b01 1283 85be 2431 7dc3 550c     .....[....1$.}.U
    23fc:	5d74 72be b1fe 80de 06a7 9bdc f174 c19b     t].r........t...
    240c:	69c1 e49b 4786 efbe 9dc6 0fc1 a1cc 240c     .i...G.........$
    241c:	2c6f 2de9 84aa 4a74 a9dc 5cb0 88da 76f9     o,.-..tJ...\...v
    242c:	5152 983e c66d a831 27c8 b003 7fc7 bf59     RQ>.m.1..'....Y.
    243c:	0bf3 c6e0 9147 d5a7 6351 06ca 2967 1429     ....G...Qc..g)).
    244c:	0a85 27b7 2138 2e1b 6dfc 4d2c 0d13 5338     ...'8!...m,M..8S
    245c:	7354 650a 0abb 766a c92e 81c2 2c85 9272     Ts.e..jv.....,r.
    246c:	e8a1 a2bf 664b a81a 8b70 c24b 51a3 c76c     ....Kf..p.K..Ql.
    247c:	e819 d192 0624 d699 3585 f40e a070 106a     ....$....5..p.j.
    248c:	c116 19a4 6c08 1e37 774c 2748 bcb5 34b0     .....l7.LwH'...4
    249c:	0cb3 391c aa4a 4ed8 ca4f 5b9c 6ff3 682e     ...9J..NO..[.o.h
    24ac:	82ee 748f 636f 78a5 7814 84c8 0208 8cc7     ...toc.x.x......
    24bc:	fffa 90be 6ceb a450 a3f7 bef9 78f2 c671     .....lP......xq.

/home/joel/Capstone/uwb-apps/bin/targets/dwm1001_boot/app/boot/mynewt/mynewt.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
   9444	     28	   6412	  15884	   3e0c	/home/joel/Capstone/uwb-apps/bin/targets/dwm1001_boot/app/boot/mynewt/mynewt.elf
