
/home/joel/Capstone/uwb-apps/bin/targets/twr_node_tdma/app/apps/twr_node_tdma/twr_node_tdma.elf:     file format elf32-littlearm
/home/joel/Capstone/uwb-apps/bin/targets/twr_node_tdma/app/apps/twr_node_tdma/twr_node_tdma.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000080f9

Program Header:
0x70000001 off    0x00024e80 vaddr 0x00024e80 paddr 0x00024e80 align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x00024e98 memsz 0x00024e98 flags rwx
    LOAD off    0x00030530 vaddr 0x20000530 paddr 0x00024e98 align 2**16
         filesz 0x00000f18 memsz 0x00004584 flags rw-
    LOAD off    0x00000000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x00000530 flags rw-
private flags = 0x5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  00008000  00008000  00008000  2**0  ALLOC
  1 .text              0001ce60  00008020  00008020  00008020  2**3  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab         00000000  00024e80  00024e80  00031448  2**0  CONTENTS
  3 .ARM.exidx         00000018  00024e80  00024e80  00024e80  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .vector_relocation 000000d8  20000000  20000000  00040000  2**0  ALLOC
  5 .rtt               00000458  200000d8  200000d8  00040000  2**2  ALLOC
  6 .data              00000f18  20000530  00024e98  00030530  2**3  CONTENTS, ALLOC, LOAD, DATA
  7 .bssnz             00000000  20001448  20001448  00031448  2**0  CONTENTS
  8 .bss               0000366c  20001448  00025db0  00031448  2**3  ALLOC
  9 .stack_dummy       000001b0  20004ab8  20004ab8  00031448  2**3  CONTENTS, READONLY
 10 .ARM.attributes    00000030  00000000  00000000  000315f8  2**0  CONTENTS, READONLY
 11 .comment           000000b2  00000000  00000000  00031628  2**0  CONTENTS, READONLY
 12 .svc_table         00000004  00000000  00000000  000316da  2**0  CONTENTS, READONLY
 13 .debug_line        00040f0e  00000000  00000000  000316de  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info        000b2db3  00000000  00000000  000725ec  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev      0001a4de  00000000  00000000  0012539f  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges     00003cc0  00000000  00000000  0013f880  2**3  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str         00019e75  00000000  00000000  00143540  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc         00048de9  00000000  00000000  0015d3b5  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges      00004c68  00000000  00000000  001a619e  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame       0000a5c4  00000000  00000000  001aae08  2**2  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro       0000279b  00000000  00000000  001b53cc  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00008000 l    d  .imghdr	00000000 .imghdr
00008020 l    d  .text	00000000 .text
00024e80 l    d  .ARM.extab	00000000 .ARM.extab
00024e80 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
200000d8 l    d  .rtt	00000000 .rtt
20000530 l    d  .data	00000000 .data
20001448 l    d  .bssnz	00000000 .bssnz
20001448 l    d  .bss	00000000 .bss
20004ab8 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    df *ABS*	00000000 gcc_startup_nrf52.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
00008100 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 sbrk.c
20000530 l     O .data	00000004 sbrkBase
20000534 l     O .data	00000004 sbrkLimit
20000538 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 system_nrf52.c
00008248 l     F .text	0000003a errata_16
00008282 l     F .text	0000004a errata_31
000082cc l     F .text	0000003a errata_32
00008306 l     F .text	0000004a errata_36
00008350 l     F .text	0000003a errata_37
0000838a l     F .text	0000003a errata_57
000083c4 l     F .text	0000003a errata_66
000083fe l     F .text	0000004a errata_108
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 main.c
00008646 l     F .text	00000020 cir_complete_cb
000086e8 l     F .text	0000012c slot_cb
00008814 l     F .text	00000018 slot_complete_cb
0000882c l     F .text	00000084 complete_cb
20001448 l     O .bss	0000000c g_angle
20001454 l     O .bss	00000010 slot_event
20001464 l     O .bss	00000002 timeout.0
20001466 l     O .bss	00000001 uwb_config_updated
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 uwb.c
00008ae8 l     F .text	0000000e uwb_interrupt_task
00000000 l    df *ABS*	00000000 hal_gpio.c
00008db0 l     F .text	00000050 hal_gpio_irq_handler
00008e00 l     F .text	0000002c hal_gpio_irq_setup
00008e2c l     F .text	0000001c hal_gpio_find_empty_slot
00008e48 l     F .text	00000038 hal_gpio_find_pin
20001468 l     O .bss	00000040 hal_gpio_irqs
200014a8 l     O .bss	00000001 irq_setup.0
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os.c
000091a8 l     F .text	00000016 os_main
20001608 l     O .bss	00001000 g_os_main_stack
20001500 l     O .bss	00000100 g_idle_task_stack
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_dev.c
00009530 l     F .text	0000005c os_dev_add
0000958c l     F .text	00000022 os_dev_initialize
000095ae l     F .text	00000030 os_dev_init
20002664 l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
2000266c l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mempool.c
00009818 l     F .text	00000078 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
00009964 l     F .text	00000010 os_msys_find_biggest_pool
00009974 l     F .text	0000002c os_msys_find_pool
000099ec l     F .text	00000044 os_msys_init_once
20002684 l     O .bss	00000db0 os_msys_1_data
20003434 l     O .bss	0000000c os_msys_1_mbuf_pool
20003440 l     O .bss	0000001c os_msys_1_mempool
20000540 l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_sanity.c
00009a98 l     F .text	00000020 os_sanity_check_list_lock
00009ab8 l     F .text	0000001c os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00009fa4 l     F .text	00000018 _clear_stack
00000000 l    df *ABS*	00000000 os_time.c
0000a160 l     F .text	00000054 os_deltatime
0000a1b4 l     F .text	00000020 os_time_change_notify
0000a1d4 l     F .text	0000005c os_time_tick
0000a2f8 l     F .text	00000048 os_time_populate_info
20003480 l     O .bss	00000030 basetod
20000558 l     O .data	00000008 os_time_change_listeners
00000000 l    df *ABS*	00000000 os_arch_arm.c
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 HAL_CM4.o
0000ac4c l       .text	00000000 SVC_User
0000ac6a l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 tdma.c
0000acf8 l     F .text	000000e8 tdma_superframe_slot_cb
0000ade0 l     F .text	00000034 slot_timer_cb
0000ae14 l     F .text	0000002c superframe_cb
0000ae40 l     F .text	00000034 tdma_task
0000ae74 l     F .text	0000004c tdma_tasks_init
00000000 l    df *ABS*	00000000 uwb_ccp.c
0000b220 l     F .text	00000068 adjust_for_epoch_to_rm
0000b288 l     F .text	0000002e reset_cb
0000b2b6 l     F .text	00000054 error_cb
0000b30a l     F .text	0000004a rx_timeout_cb
0000b354 l     F .text	0000001e ccp_timer_irq
0000b378 l     F .text	000001b4 tx_complete_cb
0000b52c l     F .text	0000000e ccp_task
0000b53c l     F .text	0000004c ccp_tasks_init
0000b588 l     F .text	0000007c ccp_timer_init
0000bb78 l     F .text	000000b8 ccp_master_timer_ev_cb
0000b740 l     F .text	000001b8 ccp_slave_timer_ev_cb
0000b608 l     F .text	00000138 ccp_listen
0000b8f8 l     F .text	00000280 ccp_send
0000c008 l     F .text	00000498 rx_complete_cb
00000000 l    df *ABS*	00000000 uwb_rng.c
0000c50c l     F .text	00000044 reset_cb
0000c550 l     F .text	0000004a rx_timeout_cb
0000c59c l     F .text	00000054 superframe_reset_cb
0000c5f0 l     F .text	00000026 complete_ev_cb
0000c618 l     F .text	00000130 complete_cb
0000c9a8 l     F .text	000000ea rx_complete_cb
0000cc68 l     F .text	00000138 tx_final_cb
0000cdc0 l     F .text	00000062 tx_complete_cb
200034b8 l     O .bss	000003c0 g_twr_frames
20000560 l     O .data	0000003c g_cbs
2000059c l     O .data	00000010 g_config
00000000 l    df *ABS*	00000000 rng_encode.c
00000000 l    df *ABS*	00000000 rng_json.c
0000d0a8 l     F .text	00000042 rng_write_line
00000000 l    df *ABS*	00000000 uwb_wcs.c
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 inline.c
00000000 l    df *ABS*	00000000 malloc.c
0000d804 l     F .text	00000004 malloc_lock_nop
0000d808 l     F .text	00000002 malloc_unlock_nop
0000d80a l     F .text	00000048 __malloc_from_block
0000d854 l     F .text	00000064 __free_block
200005ac l     O .data	00000018 __malloc_head
200005c4 l     O .data	00000004 malloc_lock
200005c8 l     O .data	00000004 malloc_unlock
00000000 l    df *ABS*	00000000 memcmp.c
0000d9b8 l       .text	00000000 test1
0000d9ac l       .text	00000000 loop1
0000d9be l       .text	00000000 res1
0000d9da l       .text	00000000 test2
0000d9e2 l       .text	00000000 done
0000d9ce l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
0000d9ee l       .text	00000000 test1
0000d9ea l       .text	00000000 loop1
0000d9fc l       .text	00000000 test2
0000d9f8 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mynewt.c
0000da44 l     F .text	00000004 stdin_read
0000da48 l     F .text	00000010 stdout_write
200005cc l     O .data	00000004 _stdin
200005d0 l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 tinyprintf.c
0000da9e l     F .text	000000ce ui2a
0000db6c l     F .text	0000001c i2a
0000db88 l     F .text	00000030 a2d
0000dbb8 l     F .text	0000003c a2i
0000dbf4 l     F .text	00000024 putf
0000dc18 l     F .text	00000124 putchw
0000dd3c l     F .text	00000068 intarg
00000000 l    df *ABS*	00000000 memfile.c
00000000 l    df *ABS*	00000000 dpl_cputime.c
00000000 l    df *ABS*	00000000 dpl_mem.c
00000000 l    df *ABS*	00000000 dpl_mempool.c
00000000 l    df *ABS*	00000000 dpl_mbuf.c
00000000 l    df *ABS*	00000000 config_store.c
0000e7b0 l     F .text	0000003c conf_dup_check_cb
0000e7ec l     F .text	0000001c conf_load_cb
0000e910 l     F .text	00000008 conf_store_one
2000387c l     O .bss	00000001 conf_loaded
2000387d l     O .bss	00000001 conf_loading
00000000 l    df *ABS*	00000000 config.c
0000e984 l     F .text	00000008 conf_ev_fn_load
20003888 l     O .bss	0000000c conf_mtx
200005e0 l     O .data	00000010 conf_ev_load
00000000 l    df *ABS*	00000000 config_cli.c
0000eca0 l     F .text	0000001c conf_running_one
0000ecbc l     F .text	0000002c conf_dump_running
0000ece8 l     F .text	000000d4 shell_conf_command
200005f0 l     O .data	00000010 shell_conf_cmd
00000000 l    df *ABS*	00000000 config_nmgr.c
0000edcc l     F .text	000000b8 conf_nmgr_write
0000ee84 l     F .text	00000080 conf_nmgr_read
20000600 l     O .data	0000000c conf_nmgr_group
000232e0 l     O .text	00000008 conf_nmgr_handlers
00000000 l    df *ABS*	00000000 console.c
0000ef14 l     F .text	0000000e ring_buf_next
0000ef22 l     F .text	0000000e ring_buf_prev
0000ef30 l     F .text	0000001c console_hist_is_full
0000ef4c l     F .text	00000054 handle_nlip
0000efa0 l     F .text	0000006a trim_whitespace
0000f00c l     F .text	00000080 console_hist_move_to_head
0000f08c l     F .text	00000080 console_hist_add
0000f10c l     F .text	00000040 console_hist_init
0000f1e0 l     F .text	00000044 console_append_char
0000f224 l     F .text	0000003c console_clear_line
0000f260 l     F .text	00000080 insert_char
0000f2e0 l     F .text	0000006c console_hist_move
0000f34c l     F .text	0000005e del_char
0000f3ac l     F .text	00000198 handle_ansi
20003894 l     O .bss	00000004 ansi_val
20003898 l     O .bss	00000004 ansi_val_2
2000389c l     O .bss	00000010 avail_queue
200038ac l     O .bss	00000004 completion
200038b0 l     O .bss	00000004 console_compat_rx_cb
200038b4 l     O .bss	00000028 console_hist
200038dc l     O .bss	00000800 console_hist_lines
200040e0 l     O .bss	0000000c console_write_lock
200040ec l     O .bss	00000002 cur
200040ee l     O .bss	00000002 end
200040f0 l     O .bss	00000004 esc_state
200040f4 l     O .bss	00000004 ev.2
200040fc l     O .bss	00000004 input.1
20004100 l     O .bss	00000004 lines_queue
20004104 l     O .bss	00000004 nlip_state
20004108 l     O .bss	00000001 prev_endl.0
20004109 l     O .bss	00000001 rx_stalled
2000060c l     O .data	00000004 echo
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 rtt_console.c
0000f9b0 l     F .text	0000001c rtt_console_wait_for_retry
0000f9cc l     F .text	0000004c rtt_console_write_ch
0000fa18 l     F .text	00000070 rtt_console_poll_func
2000410c l     O .bss	00000018 rtt_timer
20000610 l     O .data	00000004 itvl_ms.0
20000614 l     O .data	00000004 key.1
20000618 l     O .data	00000004 rtt_console_retries_left.2
00000000 l    df *ABS*	00000000 ticks.c
2000061c l     O .data	00000001 do_ticks
00000000 l    df *ABS*	00000000 shell.c
0000fb24 l     F .text	00000038 get_prompt
0000fb5c l     F .text	0000006c print_module_commands
0000fbc8 l     F .text	00000030 print_modules
0000fbf8 l     F .text	00000044 print_command_params
0000fc3c l     F .text	0000004c get_destination_module
0000fc88 l     F .text	0000001c set_default_module
0000fca4 l     F .text	00000020 select_module
0000fcc4 l     F .text	00000078 get_command_and_module
0000fd3c l     F .text	000000c4 shell_find_cmd
0000fe00 l     F .text	000000e0 show_cmd_help
0000fee0 l     F .text	00000088 show_help
0000ff68 l     F .text	0000001c print_prompt
0000ff84 l     F .text	00000014 print_prompt_if_console
0000ff98 l     F .text	00000110 complete_module
000100a8 l     F .text	00000108 complete_command
000101b0 l     F .text	00000048 get_command_from_module
000101f8 l     F .text	000000f0 complete_param
000102e8 l     F .text	0000003c get_token
00010324 l     F .text	00000074 complete_select
00010398 l     F .text	0000006c line2argv
00010404 l     F .text	0000001e get_last_token
00010424 l     F .text	00000170 completion
00010594 l     F .text	00000030 shell_avail_queue_init
00010704 l     F .text	0000002a shell
0001068c l     F .text	00000026 shell_process_command
000106b2 l     F .text	00000052 shell_process_nlip_line
20004124 l     O .bss	00000010 app_cmd
20004134 l     O .bss	00000004 app_prompt_handler
20004138 l     O .bss	00000200 buf
20004338 l     O .bss	00000150 compat_commands
20004488 l     O .bss	00000004 module_registered
2000448c l     O .bss	00000004 num_compat_commands
20004490 l     O .bss	00000004 num_of_shell_entities
20004494 l     O .bss	00000004 prompt
20004498 l     O .bss	00000020 shell_console_ev
200044b8 l     O .bss	00000004 shell_evq
200044bc l     O .bss	00000018 shell_modules
20000620 l     O .data	00000004 default_module
000234fc l     O .text	00000010 shell_cmd_help
0002350c l     O .text	00000010 shell_cmd_select_module
00000000 l    df *ABS*	00000000 shell_nlip.c
00010840 l     F .text	0000013c shell_nlip_mtx
0001097c l     F .text	00000020 shell_event_data_in
200044d4 l     O .bss	00000002 g_nlip_expected_len
200044d8 l     O .bss	00000004 g_nlip_mbuf
200044dc l     O .bss	00000004 g_shell_nlip_in_arg
200044e0 l     O .bss	00000004 g_shell_nlip_in_func
200044e4 l     O .bss	00000018 g_shell_nlip_mq
00000000 l    df *ABS*	00000000 shell_os.c
00010ae4 l     F .text	00000024 shell_os_ls_dev
00010c88 l     F .text	000000f0 shell_os_tasks_display_cmd
0002371c l     O .text	0000000c date_help
00023728 l     O .text	00000010 date_params
00023738 l     O .text	0000000c ls_dev_help
00023744 l     O .text	0000000c mpool_help
00023750 l     O .text	00000010 mpool_params
00023760 l     O .text	00000060 os_commands
000237d4 l     O .text	0000000c tasks_help
000237c0 l     O .text	0000000c reset_help
000237cc l     O .text	00000008 reset_params
000237e0 l     O .text	00000010 tasks_params
00000000 l    df *ABS*	00000000 shell_prompt.c
0002387c l     O .text	00000020 prompt_commands
0002389c l     O .text	0000000c ticks_help
000238a8 l     O .text	00000018 ticks_params
00000000 l    df *ABS*	00000000 stats.c
00010e18 l     F .text	00000010 stats_offset
00010e28 l     F .text	0000004c stats_register_internal
00010f44 l     F .text	00000058 stats_module_init_internal
00000000 l    df *ABS*	00000000 stats_nmgr.c
00011054 l     F .text	00000018 stats_nmgr_encode_name
0001106c l     F .text	00000068 stats_nmgr_list
000110d4 l     F .text	00000060 stats_nmgr_walk_func
00011134 l     F .text	000000ec stats_nmgr_read
20004514 l     O .bss	0000000c shell_nmgr_group
2000062c l     O .data	00000010 shell_nmgr_group_handlers
00000000 l    df *ABS*	00000000 stats_shell.c
0001123c l     F .text	0000006c stats_shell_display_entry
000112a8 l     F .text	00000018 stats_shell_display_group
000112c0 l     F .text	00000050 shell_stats_display
2000063c l     O .data	00000010 shell_stats_cmd
00000000 l    df *ABS*	00000000 sysdown.c
00011334 l     F .text	0000000e sysdown_timer_exp
00011344 l     F .text	00000014 sysdown_complete
20004524 l     O .bss	00000004 sysdown_num_in_progress
20004528 l     O .bss	00000020 sysdown_timer
00000000 l    df *ABS*	00000000 sysinit.c
000113f8 l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 uwbcfg.c
00011418 l     F .text	00000048 uwbcfg_set
00011460 l     F .text	00000038 uwbcfg_get
00011498 l     F .text	00000048 uwbcfg_export
20004564 l     O .bss	00000004 uwbcfg_callbacks
20000740 l     O .data	00000018 uwbcfg_handler
00000000 l    df *ABS*	00000000 uwbcfg_dw1000.c
000117c0 l     F .text	000000a8 check_preamble_code
00000000 l    df *ABS*	00000000 uwbcfg_strtod.c
00000000 l    df *ABS*	00000000 datetime.c
00011c6c l     F .text	00000044 leapyear
00011cb0 l     F .text	00000048 parse_number
00023b84 l     O .text	00000030 month_days
00000000 l    df *ABS*	00000000 crc16.c
00023bb4 l     O .text	00000200 crc16tab
00000000 l    df *ABS*	00000000 streamer.c
00000000 l    df *ABS*	00000000 streamer_console.c
00012336 l     F .text	0000000c streamer_console_vprintf
00012342 l     F .text	0000000e streamer_console_write
20000758 l     O .data	00000004 streamer_console
00023db4 l     O .text	00000008 streamer_cfg_console
00000000 l    df *ABS*	00000000 twr_node_tdma-sysinit-app.c
00000000 l    df *ABS*	00000000 split.c
20004568 l     O .bss	00000001 split_app_active
20004569 l     O .bss	00000001 split_mode_cur
00000000 l    df *ABS*	00000000 split_config.c
00012464 l     F .text	00000004 split_conf_commit
00012468 l     F .text	0000002c split_conf_export
00012494 l     F .text	00000040 split_conf_get
000124d4 l     F .text	00000044 split_conf_set
2000075c l     O .data	00000018 split_conf_handler
00000000 l    df *ABS*	00000000 base64.c
00012564 l     F .text	00000020 pos
00012584 l     F .text	0000004c token_decode
00023e14 l     O .text	00000041 base64_chars
00000000 l    df *ABS*	00000000 cborattr.c
000126e8 l     F .text	00000080 valid_attr_type
00012768 l     F .text	0000005e cbor_target_address
000129e0 l     F .text	00000362 cbor_internal_read_object
00000000 l    df *ABS*	00000000 cbor_mbuf_reader.c
00012d50 l     F .text	0000001c cbor_mbuf_reader_cpy
00012d6c l     F .text	0000001c cbor_mbuf_reader_get8
00012d88 l     F .text	00000018 cbor_mbuf_reader_cmp
00012da0 l     F .text	0000001e cbor_mbuf_reader_get64
00012dbe l     F .text	0000001a cbor_mbuf_reader_get32
00012dd8 l     F .text	00000020 cbor_mbuf_reader_get16
00000000 l    df *ABS*	00000000 cbor_mbuf_writer.c
00000000 l    df *ABS*	00000000 cborencoder.c
00012e78 l     F .text	000000a0 create_container
00012f18 l     F .text	0000007a encode_string
00000000 l    df *ABS*	00000000 cborparser.c
00013172 l     F .text	00000024 is_fixed_type
00013196 l     F .text	00000004 iterate_noop
0001319a l     F .text	00000134 preparse_value
000132ce l     F .text	0000004a preparse_next_value
00013318 l     F .text	000000a0 extract_length
000133b8 l     F .text	0000016c iterate_string_chunks
00013524 l     F .text	000000ca advance_internal
0001382c l     F .text	00000082 advance_recursive
00000000 l    df *ABS*	00000000 hal_bsp.c
2000456c l     O .bss	00000004 dw1000_0
00023e64 l     O .text	00000018 dw1000_0_cfg
00000000 l    df *ABS*	00000000 SEGGER_RTT.c
20000120 l     O .rtt	00000400 _acUpBuffer
20000520 l     O .rtt	00000010 _acDownBuffer
00000000 l    df *ABS*	00000000 dw1000_dev.c
00013c80 l     F .text	0000000a uwb_dw1000_read_sts_rxtime
00013c8a l     F .text	00000008 uwb_dw1000_hal_noblock_wait
00013cf8 l     F .text	00000020 uwb_dw1000_calc_pdoa
00013d18 l     F .text	00000008 uwb_dw1000_estimate_los
00013d20 l     F .text	00000008 uwb_dw1000_calc_fppl
00013d28 l     F .text	00000008 uwb_dw1000_calc_seq_rssi
00013d30 l     F .text	00000008 uwb_dw1000_calc_rssi
00013d38 l     F .text	00000008 uwb_dw1000_get_fppl
00013d40 l     F .text	00000008 uwb_dw1000_get_rssi
00013d48 l     F .text	00000028 uwb_dw1000_calc_clock_offset_ratio
00013d70 l     F .text	00000008 uwb_dw1000_set_on_error_continue
00013d78 l     F .text	00000008 uwb_dw1000_phy_repeated_frames
00013d80 l     F .text	00000008 uwb_dw1000_phy_rx_reset
00013d88 l     F .text	00000008 uwb_dw1000_phy_forcetrxoff
00013d90 l     F .text	0000000c uwb_dw1000_phy_data_duration
00013d9c l     F .text	0000000c uwb_dw1000_phy_SHR_duration
00013da8 l     F .text	0000000c uwb_dw1000_phy_frame_duration
00013db4 l     F .text	00000008 uwb_dw1000_read_txtime_lo32
00013dbc l     F .text	00000008 uwb_dw1000_read_txtime
00013dc4 l     F .text	00000008 uwb_dw1000_read_rxtime_lo32
00013dcc l     F .text	00000008 uwb_dw1000_read_rxtime
00013dd4 l     F .text	00000008 uwb_dw1000_read_systime_lo32
00013ddc l     F .text	00000008 uwb_dw1000_read_systime
00013de4 l     F .text	00000008 uwb_dw1000_set_rxauto_disable
00013dec l     F .text	00000008 uwb_dw1000_set_wait4resp_delay
00013df4 l     F .text	00000008 uwb_dw1000_set_wait4resp
00013dfc l     F .text	00000008 uwb_dw1000_tx_wait
00013e04 l     F .text	00000008 uwb_dw1000_write_tx_fctrl
00013e0c l     F .text	00000008 uwb_dw1000_write_tx
00013e14 l     F .text	00000008 uwb_dw1000_stop_rx
00013e1c l     F .text	00000008 uwb_dw1000_start_rx
00013e24 l     F .text	00000008 uwb_dw1000_start_tx
00013e2c l     F .text	00000008 uwb_dw1000_set_delay_start
00013e34 l     F .text	00000008 uwb_dw1000_set_abs_timeout
00013e3c l     F .text	00000016 uwb_dw1000_set_rx_window
00013e52 l     F .text	0000000a uwb_dw1000_adj_rx_timeout
00013e5c l     F .text	0000000a uwb_dw1000_set_rx_timeout
00013e66 l     F .text	00000008 uwb_dw1000_set_dblrxbuf
00013e6e l     F .text	00000008 uwb_dw1000_txrf_power_value
00013e76 l     F .text	00000008 uwb_dw1000_txrf_config
00013e7e l     F .text	00000008 uwb_dw1000_mac_config
000141ec l     F .text	0000001a uwb_dw1000_set_euid
00014206 l     F .text	0000001a uwb_dw1000_set_uid
00014220 l     F .text	0000001a uwb_dw1000_set_panid
0001438a l     F .text	00000008 uwb_dw1000_sleep_config
00014408 l     F .text	00000008 uwb_dw1000_enter_sleep
000146b8 l     F .text	00000008 uwb_dw1000_wakeup
00014708 l     F .text	00000008 uwb_dw1000_enter_sleep_after_tx
0001475a l     F .text	00000008 uwb_dw1000_enter_sleep_after_rx
00023ed4 l     O .text	00000015 __func__.0
00023eec l     O .text	000000dc dw1000_uwb_funcs
00000000 l    df *ABS*	00000000 dw1000_hal.c
20000778 l     O .data	000005f0 hal_dw1000_instances
00000000 l    df *ABS*	00000000 dw1000_mac.c
00014ffe l     F .text	00000028 calc_rx_window_timeout
00015026 l     F .text	00000012 dw1000_checkoverrun
00015038 l     F .text	00000024 dw1000_irq
00015648 l     F .text	00000022 update_rx_window_timeout
000160d0 l     F .text	000009a8 dw1000_interrupt_ev_cb
0002402c l     O .text	00000008 agc_config
00024034 l     O .text	00000008 chan_idx
0002403c l     O .text	00000020 digital_bb_config
0002405c l     O .text	00000004 dtune1
00024060 l     O .text	00000003 dwnsSFDlen
00024064 l     O .text	00000018 fs_pll_cfg
0002407c l     O .text	00000006 fs_pll_tune
000240c0 l     O .text	00000032 lde_replicaCoeff
000240f4 l     O .text	00000002 rx_config
000240f8 l     O .text	0000000c sftsh
00024104 l     O .text	00000018 tx_config
00000000 l    df *ABS*	00000000 dw1000_phy.c
00000000 l    df *ABS*	00000000 dw1000_pkg.c
00000000 l    df *ABS*	00000000 dw1000_cli.c
000176c8 l     F .text	00000010 dw1000_cli_too_few_args
00017928 l     F .text	0000020c dw1000_cli_cmd
20000d68 l     O .data	00000010 shell_dw1000_cmd
00000000 l    df *ABS*	00000000 dw1000_gpio.c
00000000 l    df *ABS*	00000000 dw1000_otp.c
00000000 l    df *ABS*	00000000 hal_flash.c
00017c74 l     F .text	00000028 nrf52k_flash_wait_ready
00017c9c l     F .text	00000050 nrf52k_flash_erase_sector
00017cec l     F .text	00000004 nrf52k_flash_init
00017cf0 l     F .text	00000020 nrf52k_flash_sector_info
00017d10 l     F .text	000000c8 nrf52k_flash_write
00017dd8 l     F .text	0000000e nrf52k_flash_read
000244a0 l     O .text	0000001c nrf52k_flash_funcs
00000000 l    df *ABS*	00000000 hal_os_tick.c
00017de8 l     F .text	000000d4 nrf52_timer_handler
00000000 l    df *ABS*	00000000 hal_spi.c
00017ff4 l     F .text	0000006e nrf52_irqm_handler
0001807c l     F .text	00000014 hal_spi_stop_transfer
00018090 l     F .text	0000004a hal_spi_config_slave
000180dc l     F .text	000000bc hal_spi_init_master
00018198 l     F .text	000000ea hal_spi_config_master
000244bc l     O .text	00000010 nrf52_hal_spis
00000000 l    df *ABS*	00000000 hal_timer.c
000185a0 l     F .text	0000000a nrf_read_timer_cntr
000185ac l     F .text	000000b8 nrf_timer_set_ocmp
00018664 l     F .text	0000000a nrf_timer_disable_ocmp
0001866e l     F .text	0000000a nrf_rtc_disable_ocmp
00018678 l     F .text	00000054 hal_timer_read_bsptimer
000186cc l     F .text	00000076 hal_timer_chk_queue
00018742 l     F .text	0000002c hal_timer_irq_handler
000244cc l     O .text	00000018 nrf52_hal_timers
00000000 l    df *ABS*	00000000 hal_watchdog.c
00018a28 l     F .text	0000000e nrf52_hal_wdt_default_handler
00018a38 l     F .text	00000020 nrf52_wdt_irq_handler
00000000 l    df *ABS*	00000000 nrf52_periph.c
00018af4 l     F .text	00000034 nrf52_periph_create_timers
00018b28 l     F .text	00000020 nrf52_periph_create_spi
000244e4 l     O .text	00000004 os_bsp_spi0m_cfg
00000000 l    df *ABS*	00000000 cir.c
00000000 l    df *ABS*	00000000 json_encode.c
00018c54 l     F .text	000002e4 json_encode_value
00000000 l    df *ABS*	00000000 json_util.c
00000000 l    df *ABS*	00000000 rng_math.c
00000000 l    df *ABS*	00000000 timescale.c
00019140 l     F .text	00000174 timescale_QUpdate
000192b4 l     F .text	00000084 timescale_JofAx
00019338 l     F .text	00000074 timescale_Aofx
000193b0 l     F .text	000000f8 timescale_innovation
000194a8 l     F .text	00000044 timescale_constraints
000194f0 l     F .text	0000006c timescale_Hofx
00024542 l     O .text	0000000f __func__.7324
00024551 l     O .text	0000000f __func__.7336
00000000 l    df *ABS*	00000000 srkf_dbl.c
00019750 l     F .text	00000080 Hofx
000197d0 l     F .text	000000a0 Aofx
0002459f l     O .text	0000000e __func__.7283
000245ad l     O .text	0000000e __func__.7299
000245bb l     O .text	0000000e __func__.7311
00000000 l    df *ABS*	00000000 trisolve_dbl.c
00000000 l    df *ABS*	00000000 ud_dbl.c
00000000 l    df *ABS*	00000000 thornton_dbl.c
00000000 l    df *ABS*	00000000 bierman_dbl.c
00000000 l    df *ABS*	00000000 twr_ds.c
0001a9a8 l     F .text	00000450 rx_complete_cb
20000d78 l     O .data	0000003c g_cbs
20000db4 l     O .data	00000010 g_config
20000dc4 l     O .data	00000010 g_rng_cfgs
00000000 l    df *ABS*	00000000 twr_ds_ext.c
0001aee0 l     F .text	00000464 rx_complete_cb
200045e4 l     O .bss	0000001c g_twr_ds_ext_stat
20000dd4 l     O .data	0000003c g_cbs
20000e10 l     O .data	00000010 g_config
20000e20 l     O .data	00000010 g_rng_cfgs
00000000 l    df *ABS*	00000000 twr_ss.c
0001b430 l     F .text	000002a8 rx_complete_cb
20000e30 l     O .data	0000003c g_cbs
20000e6c l     O .data	00000010 g_config
20000e7c l     O .data	00000010 g_rng_cfgs
00000000 l    df *ABS*	00000000 twr_ss_ack.c
0001b7c8 l     F .text	00000290 rx_complete_cb
0001ba58 l     F .text	0000015c tx_complete_cb
20000e8c l     O .data	0000003c g_cbs
20000ec8 l     O .data	00000010 g_config
20000ed8 l     O .data	00000010 g_rng_cfgs
00000000 l    df *ABS*	00000000 twr_ss_ext.c
0001bc80 l     F .text	00000298 rx_complete_cb
20004644 l     O .bss	0000001c g_twr_ss_ext_stat
20000ee8 l     O .data	0000003c g_cbs
20000f24 l     O .data	00000010 g_config
20000f34 l     O .data	00000010 g_rng_cfgs
00000000 l    df *ABS*	00000000 wcs_timescale.c
0001bff8 l     F .text	00000094 wcs_timescale_cb
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strrchr.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll.c
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 strntoumax.c
00000000 l    df *ABS*	00000000 strsep.c
00000000 l    df *ABS*	00000000 strpbrk.c
00000000 l    df *ABS*	00000000 imgmgr.c
0001c5f2 l     F .text	00000040 imgr_vercmp
0001c632 l     F .text	0000003e imgr_img_tlvs
0001c670 l     F .text	00000050 imgr_upload_good_rsp
0001c7bc l     F .text	00000036 imgr_upload_log
0001c890 l     F .text	0000006c imgr_erase_state
0001c8fc l     F .text	0000006c imgr_erase
0001c968 l     F .text	00000190 imgr_upload_inspect
0001cb34 l     F .text	000001fc imgr_upload
20004664 l     O .bss	00000030 imgr_state
20004694 l     O .bss	00000004 imgr_upload_arg
20004698 l     O .bss	00000004 imgr_upload_cb
20000f44 l     O .data	0000000c imgr_nmgr_group
000248f8 l     O .text	00000038 imgr_nmgr_handlers
00000000 l    df *ABS*	00000000 imgmgr_log.c
0001cd80 l     F .text	00000004 imgmgr_log_gen
00000000 l    df *ABS*	00000000 imgmgr_state.c
0001ce8a l     F .text	00000026 imgmgr_state_any_pending
00000000 l    df *ABS*	00000000 imgmgr_util.c
00000000 l    df *ABS*	00000000 mgmt.c
0001d25c l     F .text	0000001c mgmt_group_list_lock
0001d290 l     F .text	00000030 mgmt_find_group
2000469c l     O .bss	0000000c mgmt_group_lock
20000f50 l     O .data	00000008 mgmt_group_list
00000000 l    df *ABS*	00000000 newtmgr.c
0001d32c l     F .text	00000024 nmgr_rsp_frag_alloc
0001d350 l     F .text	00000064 nmgr_init_rsp
0001d3b4 l     F .text	00000034 nmgr_rsp_tx
0001d3e8 l     F .text	0000006c nmgr_send_err_rsp
0001d454 l     F .text	00000188 nmgr_handle_req
0001d5dc l     F .text	0000001a nmgr_process
0001d5f6 l     F .text	0000000a nmgr_event_data_in
0001d600 l     F .text	0000000e nmgr_cbuf_init
200046ac l     O .bss	00000060 nmgr_task_cbuf
00000000 l    df *ABS*	00000000 newtmgr_os.c
0001d6a8 l     F .text	00000050 nmgr_reset
0001d6f8 l     F .text	0000000a nmgr_reset_tmo
0001d704 l     F .text	00000060 nmgr_datetime_set
0001d764 l     F .text	0000005c nmgr_def_console_echo
0001d7c0 l     F .text	00000078 nmgr_def_echo
0001d838 l     F .text	00000080 nmgr_datetime_get
0001d8b8 l     F .text	00000108 nmgr_def_mpstat_read
0001d9c0 l     F .text	000001a0 nmgr_def_taskstat_read
2000470c l     O .bss	00000020 nmgr_reset_callout
20000f58 l     O .data	0000000c nmgr_def_group
00024a48 l     O .text	00000030 nmgr_def_group_handlers
00000000 l    df *ABS*	00000000 nmgr_shell.c
0001db70 l     F .text	00000006 nmgr_shell_get_mtu
0001db78 l     F .text	00000010 nmgr_shell_in
0001db88 l     F .text	0000001a nmgr_shell_out
2000472c l     O .bss	00000020 nmgr_shell_transport
00000000 l    df *ABS*	00000000 config_init.c
0001dbfc l     F .text	000000bc config_init_fcb
2000474c l     O .bss	0000006c conf_fcb_area
20000f64 l     O .data	00000038 config_init_conf_fcb
00000000 l    df *ABS*	00000000 config_fcb.c
0001dcdc l     F .text	00000024 conf_fcb_load
0001dd00 l     F .text	00000044 conf_fcb_load_cb
0001dd44 l     F .text	0000002c conf_fcb_var_read
0001dd70 l     F .text	000000d8 conf_fcb_compress_internal
0001de48 l     F .text	00000064 conf_fcb_append
0001df4a l     F .text	0000000a conf_fcb_save
20000f9c l     O .data	00000010 conf_fcb_itf
00000000 l    df *ABS*	00000000 config_line.c
00000000 l    df *ABS*	00000000 flash_map.c
0001e072 l     F .text	00000070 flash_map_read_mfg
200047c0 l     O .bss	00000078 mfg_areas.0
00000000 l    df *ABS*	00000000 log.c
0001e2f0 l     F .text	0000001c log_registered
0001e30c l     F .text	00000004 log_chk_type
0001e310 l     F .text	00000014 log_chk_max_entry_len
0001e324 l     F .text	00000016 log_call_append_cb
0001e33c l     F .text	0000010c log_append_prepare
0001e5d8 l     F .text	00000044 log_read_last_hdr
0001e6e8 l     F .text	00000024 log_read_hdr_walk
0001e72c l     F .text	00000044 log_walk_body_fn
20004840 l     O .bss	00000004 g_log_module_list
20004844 l     O .bss	00000001 log_written
20000fac l     O .data	00000008 g_log_list
00000000 l    df *ABS*	00000000 log_console.c
0001e790 l     F .text	00000004 log_console_read
0001e794 l     F .text	00000004 log_console_walk
0001e798 l     F .text	00000004 log_console_flush
0001e79c l     F .text	00000020 log_console_print_hdr
0001e7bc l     F .text	0000002c log_console_append_body
0001e7e8 l     F .text	00000030 log_console_append
20004848 l     O .bss	00000018 log_console
00000000 l    df *ABS*	00000000 log_level.c
20004860 l     O .bss	00000080 log_level_map
00000000 l    df *ABS*	00000000 log_nmgr.c
0001e8c0 l     F .text	0000000a cbor_cnt_writer
0001e8ca l     F .text	00000032 log_nmgr_clear
0001e8fc l     F .text	00000084 log_nmgr_logs_list
0001e980 l     F .text	00000090 log_nmgr_module_list
0001ea10 l     F .text	000000d4 log_nmgr_level_list
0001eae4 l     F .text	00000074 log_nmgr_modlevel_set
0001eb58 l     F .text	00000074 log_nmgr_modlevel_get
0001ebcc l     F .text	000000b8 log_encode_entries
0001ee48 l     F .text	00000238 log_nmgr_encode_entry
0001ec84 l     F .text	0000008c log_encode
0001ed10 l     F .text	00000138 log_nmgr_read
200048e0 l     O .bss	0000000c log_nmgr_group
20000fb4 l     O .data	00000048 log_nmgr_group_handlers
00000000 l    df *ABS*	00000000 modlog.c
0001f0a0 l     F .text	0000002c modlog_find_by_module
0001f0cc l     F .text	0000003c modlog_insert
0001f108 l     F .text	0000001c modlog_alloc
0001f124 l     F .text	00000048 modlog_infer_handle
0001f16c l     F .text	00000046 modlog_register_no_lock
0001f1b2 l     F .text	0000002c modlog_append_one
0001f1e0 l     F .text	00000088 modlog_append_no_lock
200048ec l     O .bss	00000004 modlog_first_dflt
200048f0 l     O .bss	000000c0 modlog_mapping_buf
200049cc l     O .bss	00000004 modlog_mappings
200049d0 l     O .bss	00000024 modlog_rwl
00000000 l    df *ABS*	00000000 mfg.c
0001f3b8 l     F .text	00000090 mfg_seek_next_aux
0001f448 l     F .text	0000006c mfg_read_mmr
0001f4b4 l     F .text	00000054 mfg_read_next_mmr
0001f508 l     F .text	00000038 mfg_open_flash_area
0001f540 l     F .text	0000003e mfg_read_tlv_body
0001f61c l     F .text	00000042 mfg_read_mmr_refs
200049f4 l     O .bss	00000001 mfg_initialized
200049f8 l     O .bss	00000018 mfg_mmrs
20004a10 l     O .bss	00000004 mfg_num_mmrs
00000000 l    df *ABS*	00000000 log_reboot.c
0001f660 l     F .text	0000002c reboot_conf_export
0001f68c l     F .text	00000054 reboot_conf_set
0001f6e0 l     F .text	00000058 reboot_conf_get
0001f738 l     F .text	0000012c log_reboot_write
0001f864 l     F .text	00000014 log_reboot_init_console
20004a14 l     O .bss	00000001 log_reboot_written
20004a18 l     O .bss	0000000c log_reboot_written_str
20004a28 l     O .bss	0000000c reboot_cnt_str
00000000 l    df *ABS*	00000000 rwlock.c
0001f904 l     F .text	0000000c rwlock_complete_handoff
0001f910 l     F .text	0000001a rwlock_read_must_block
0001f92a l     F .text	00000016 rwlock_write_must_block
0001f940 l     F .text	0000003a rwlock_unblock
00000000 l    df *ABS*	00000000 bootutil_misc.c
0001fa9c l     F .text	0000000a boot_flag_decode
0001faa6 l     F .text	00000006 boot_magic_off
0001faac l     F .text	00000006 boot_copy_done_off
0001fab2 l     F .text	00000006 boot_image_ok_off
0001fab8 l     F .text	00000018 boot_magic_decode
0001fad0 l     F .text	0000004a boot_write_trailer_byte
00024d48 l     O .text	00000012 boot_swap_tables
00000000 l    df *ABS*	00000000 loader.c
0001fde8 l     F .text	00000020 boot_write_sz
0001fe08 l     F .text	0000002e boot_read_image_header
0001fe38 l     F .text	00000034 boot_read_image_headers
0001fe6c l     F .text	00000074 split_image_check
0001fee0 l     F .text	00000064 boot_read_sectors
20004a38 l     O .bss	00000068 boot_data
20004aa0 l     O .bss	00000004 tmpbuf.0
00000000 l    df *ABS*	00000000 image_validate.c
0002001c l     F .text	00000078 bootutil_img_hash
00000000 l    df *ABS*	00000000 sha256.c
00024d5c l     O .text	00000100 K
00000000 l    df *ABS*	00000000 fcb.c
00000000 l    df *ABS*	00000000 fcb_append.c
00020728 l     F .text	00000032 fcb_new_area
00000000 l    df *ABS*	00000000 fcb_elem_info.c
00000000 l    df *ABS*	00000000 fcb_getnext.c
00000000 l    df *ABS*	00000000 fcb_rotate.c
00000000 l    df *ABS*	00000000 fcb_walk.c
00000000 l    df *ABS*	00000000 hal_flash.c
00020be8 l     F .text	0000001e hal_flash_check_addr
20004aa4 l     O .bss	00000001 protected_flash
00000000 l    df *ABS*	00000000 os_heap.c
00020ea4 l     F .text	0000002c os_malloc_lock
00020ed0 l     F .text	00000028 os_malloc_unlock
20004aa8 l     O .bss	0000000c os_malloc_mutex
00000000 l    df *ABS*	00000000 crc8.c
00024e5c l     O .text	00000010 crc8_small_table
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _arm_fixunsdfsi.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _aeabi_ldivmod.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 sf_ceil.c
00000000 l    df *ABS*	00000000 w_asin.c
00000000 l    df *ABS*	00000000 w_fmod.c
00000000 l    df *ABS*	00000000 wf_log10.c
00000000 l    df *ABS*	00000000 e_asin.c
00000000 l    df *ABS*	00000000 e_fmod.c
00024e70 l     O .text	00000010 Zero
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 ef_log10.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 ef_log.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 twr_node_tdma-sysdown-app.c
00000000 l    df *ABS*	00000000 twr_node_tdma-sysflash.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 impure.c
20001020 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
000135ee g     F .text	00000078 _cbor_value_decode_int64_internal
00013960 g     F .text	000001ac SEGGER_RTT_WriteNoLock
00012e68 g     F .text	00000010 cbor_mbuf_writer_init
00021810 g     F .text	0000002c .hidden __aeabi_dcmpun
0000a590 g     F .text	00000030 os_arch_start
0001e264 g     F .text	0000001c flash_area_id_from_image_slot
0000e352 g     F .text	00000008 dpl_cputime_delay_usecs
0001df04 g     F .text	00000014 conf_fcb_dst
20004ab8 g       .bss	00000000 __HeapBase
20003474 g     O .bss	00000008 g_os_task_list
00009130 g     F .text	00000078 os_idle_task
000217d4 g     F .text	00000012 .hidden __aeabi_dcmple
00015540 g     F .text	000000a8 dw1000_stop_rx
0001c404 g     F .text	00000016 strcpy
00016ea6 g     F .text	0000005a dw1000_phy_config_lde
000175b6 g     F .text	00000046 dw1000_phy_event_cnt_ctrl
0001c2f0 g     F .text	0000001a wcs_timescale_free
00016dca g     F .text	0000002e dw1000_phy_sysclk_PLL
00000000 g       .svc_table	00000000 SVC_Count
0001562a g     F .text	0000001e dw1000_adj_rx_timeout
00008164  w    F .text	00000002 TIMER2_IRQHandler
0000e2dc g     F .text	00000018 fmemopen_w
00021710 g     F .text	0000007a .hidden __cmpdf2
0001c344 g     F .text	0000002a wcs_timescale_pkg_down
0000e3ac g     F .text	00000048 mem_split_frag
00021dbc g     F .text	00000012 fabs
0000a7fe g     F .text	0000005a os_mbuf_copydata
2000267c g     O .bss	00000008 g_os_mempool_list
00009368 g     F .text	0000001a os_callout_init
00009384 g     F .text	0000003c os_callout_stop
00008164  w    F .text	00000002 RTC0_IRQHandler
00013cd6 g     F .text	00000008 uwb_dw1000_set_autoack
0001fb3e g     F .text	000000ba boot_read_swap_state
0001a358 g     F .text	00000446 thornton_dbl
0000d8b8 g     F .text	00000050 add_malloc_block
00021710 g     F .text	0000007a .hidden __eqdf2
00015716 g     F .text	00000042 dw1000_set_rx_window
000096b4 g     F .text	00000068 os_eventq_put
000105c4 g     F .text	00000010 shell_evq_set
00014944 g     F .text	00000054 hal_dw1000_reset
0001a0e4 g     F .text	000000cc trisolve_dbl
20000530 g       .data	00000000 __data_start__
0000aa08 g     F .text	0000005c os_mbuf_extend
0000be86 g     F .text	000000f4 uwb_ccp_start
0001c456 g     F .text	00000020 strtok_r
00024488 g     O .text	00000018 nrf52k_flash_dev
00021280 g     F .text	0000005a .hidden __floatdidf
00020886 g     F .text	00000040 fcb_append_finish
0000cb70 g     F .text	00000036 uwb_rng_listen_delay_start
00024774 g     O .text	0000000c g_stats_map_twr_ds_ext_stat_section
0000e228 g     F .text	00000024 printf
0001cf7e g     F .text	0000004a imgmgr_state_confirm
00014d58 g     F .text	000001e4 hal_dw1000_write_noblock
00023224 g     O .text	00000004 stdout
00010db0 g     F .text	00000054 shell_ticks_cmd
00008164  w    F .text	00000002 SWI0_EGU0_IRQHandler
00008ee4 g     F .text	00000022 hal_gpio_write
00020224 g     F .text	00000130 mbedtls_internal_sha256_process
0002051a g     F .text	00000024 fcb_free_sector_cnt
00010ab4 g     F .text	00000018 shell_nlip_output
0001e786 g     F .text	0000000a log_flush
0000a4f0 g     F .text	0000009c os_arch_os_init
0001f878 g     F .text	00000038 log_reboot
00008156  w    F .text	00000002 HardFault_Handler
0001220c g     F .text	000000d0 datetime_format
00018780 g     F .text	00000060 hal_timer_init
0001f590 g     F .text	0000001a mfg_seek_next_with_type
0001301c g     F .text	0000008c cbor_encode_int
0000a5c0 g     F .text	00000064 os_arch_os_start
200040f8 g     O .bss	00000001 g_console_ignore_non_nlip
200040fa g     O .bss	00000001 g_console_silence_non_nlip
00020c2e g     F .text	00000010 hal_flash_align
0001e6d4 g     F .text	00000014 log_read
00010fe0 g     F .text	00000028 stats_group_walk
0000ce24 g     F .text	000000b8 uwb_rng_pkg_init
00008164  w    F .text	00000002 SWI2_EGU2_IRQHandler
0001fb1a g     F .text	0000001e boot_magic_compatible_check
0000fb00 g     F .text	0000000c console_no_ticks
00008cf0 g     F .text	000000c0 uwb_calc_aoa
0000acb6 g     F .text	0000000c SysTick_Handler
00008164  w    F .text	00000002 GPIOTE_IRQHandler
0000a094 g     F .text	0000004a os_task_remove
00018770 g     F .text	00000010 nrf52_timer0_irq_handler
00012d44 g     F .text	0000000c cbor_read_object
00017b34 g     F .text	00000010 dw1000_cli_register
00012e48 g     F .text	0000001e cbor_mbuf_writer
000098f4 g     F .text	0000002a os_memblock_put
0001a1b0 g     F .text	000001a4 ud_dbl
00008164  w    F .text	00000002 PWM1_IRQHandler
0000e830 g     F .text	0000000c conf_dst_register
00009a40 g     F .text	00000024 os_msys_get_pkthdr
200047b8 g     O .bss	00000004 flash_map
000118a8 g     F .text	00000244 uwbcfg_commit_to_inst_dw1000
00020ddc g     F .text	00000032 hal_flash_is_erased
0000ac70 g     F .text	00000046 PendSV_Handler
0000e286 g     F .text	0000001c snprintf
00008154  w    F .text	00000002 NMI_Handler
00024e98 g       .ARM.exidx	00000000 __exidx_end
00020174 g     F .text	0000000c mbedtls_sha256_init
00008020 g       .text	00000000 __isr_vector_start
000158dc g     F .text	00000028 dw1000_set_autoack_delay
0001e448 g     F .text	00000064 log_init
0000e2a2 g     F .text	0000003a memfile_write
0000a468 g     F .text	00000014 os_arch_ctx_sw
000130a8 g     F .text	0000005c cbor_encode_simple_value
0000fad4 g     F .text	00000004 rtt_console_is_init
00009326 g     F .text	0000000a os_system_reset
0001492c g     F .text	00000018 hal_dw1000_inst
000081d0 g     F .text	0000002c hal_system_reset
00014392 g     F .text	00000076 dw1000_dev_enter_sleep
000091cc g     F .text	00000070 os_init_idle_task
20000560 g       .data	00000000 __aeabi_unwind_cpp_pr0
00021700 g     F .text	0000008a .hidden __gtdf2
00009c10 g     F .text	0000000c os_sched_set_current_task
00008164  w    F .text	00000002 POWER_CLOCK_IRQHandler
00022b4c g     F .text	0000000c __errno
00024e98 g       .ARM.exidx	00000000 __etext
0000a3f0 g     F .text	00000052 os_get_uptime_usec
0000d5f4 g     F .text	00000074 uwb_wcs_prediction
0000f958 g     F .text	0000003c console_vprintf
0001f080 g     F .text	00000020 log_nmgr_register_group
00008164  w    F .text	00000002 RADIO_IRQHandler
0001e1cc g     F .text	00000028 flash_area_write
0001bfc0 g     F .text	00000038 twr_ss_ext_pkg_down
00021a3c g     F .text	0000002e .hidden __aeabi_d2lz
0000aa78 g     F .text	000000b8 os_mutex_release
00010e74 g     F .text	0000000a stats_size
0001102c g     F .text	00000028 stats_register
0002245c g     F .text	0000027c __ieee754_fmod
200046a8 g     O .bss	00000004 nmgr_evq
00009ae4 g     F .text	00000020 os_sanity_check_register
20001448 g       .bssnz	00000000 __bssnz_start__
20003878 g     O .bss	00000004 conf_load_srcs
00020564 g     F .text	00000020 fcb_get_len
00016f34 g     F .text	000001d2 dw1000_phy_init
0000a280 g     F .text	00000026 os_time_delay
0001fc70 g     F .text	000000a4 boot_swap_type
20000650 g     O .data	000000a0 g_uwb_config
0000a980 g     F .text	00000088 os_mbuf_copyinto
00008164  w    F .text	00000002 PDM_IRQHandler
0002179c g     F .text	00000010 .hidden __aeabi_cdcmple
00017106 g     F .text	00000066 dw1000_phy_rx_reset
0001f5aa g     F .text	0000000a mfg_read_tlv_flash_area
0000fb18 g     F .text	0000000c console_get_ticks
00015618 g     F .text	00000012 dw1000_set_rxauto_disable
0001ceb0 g     F .text	0000001e imgmgr_state_slot_in_use
000122dc g     F .text	00000034 crc16_ccitt
0001c090 g     F .text	000001d4 wcs_timescale_ev
00013666 g     F .text	00000024 cbor_parser_init
00016b30 g     F .text	00000060 dw1000_calc_rssi
0000fac4 g     F .text	00000010 console_rx_restart
00009954 g     F .text	00000010 os_mempool_module_init
0001d61c g     F .text	0000000c mgmt_evq_set
00008164  w    F .text	00000002 TEMP_IRQHandler
0000a48e g     F .text	0000000a os_arch_in_critical
00024084 g     O .text	0000003c g_stats_map_mac_stat_section
00008164  w    F .text	00000002 QDEC_IRQHandler
0001747c g     F .text	00000054 dw1000_phy_data_duration
200006f0 g     O .data	00000050 g_uwbcfg_str
00013b0c g     F .text	00000110 SEGGER_RTT_GetKey
00008164  w    F .text	00000002 TIMER3_IRQHandler
0000c980 g     F .text	00000028 uwb_rng_clear_twr_data
0000a45c g     F .text	0000000a timer_handler
00009644 g     F .text	00000024 os_dev_lookup
00009c1c g     F .text	00000090 os_sched_sleep
0001401c g     F .text	000000e0 dw1000_read_reg
00013e88 g     F .text	000000c8 dw1000_read
0000f8fc g     F .text	0000000c console_set_completion_cb
0000d9e8 g     F .text	0000001a memcpy
0002178c g     F .text	00000020 .hidden __aeabi_cdrcmple
000109c0 g     F .text	000000e0 shell_nlip_process
00012518 g     F .text	00000010 split_conf_init
0000ea50 g     F .text	00000034 conf_parse_name
00008c14 g     F .text	00000074 uwb_task_init
00018a58 g     F .text	00000078 hal_watchdog_init
0000d6e8 g     F .text	00000020 uwb_wcs_read_systime_master64
00021208 g     F .text	00000022 .hidden __floatsidf
0000e83c g     F .text	00000054 conf_load
00018f80 g     F .text	00000038 json_encode_array_value
0000d668 g     F .text	00000068 uwb_wcs_local_to_master64
00021708 g     F .text	00000082 .hidden __ltdf2
00019002 g     F .text	00000026 json_readn
000094c8 g     F .text	0000000c os_cputime_init
20003884 g     O .bss	00000004 conf_handlers
00018fb8 g     F .text	0000001c json_encode_array_finish
0001890c g     F .text	0000002c hal_timer_set_cb
00021a0c g     F .text	00000000 .hidden __aeabi_uldivmod
00020e0e g     F .text	00000062 hal_flash_isempty
000123d0 g     F .text	0000002c split_app_init
0000d7d0 g     F .text	00000034 puts
0000cda0 g     F .text	00000020 rng_issue_complete
00000020 g       *ABS*	00000000 _imghdr_size
00009bd4 g     F .text	00000030 os_sched_ctx_sw_hook
0002294c g     F .text	00000200 __ieee754_logf
0002098e g     F .text	00000052 fcb_elem_info
200040dc g     O .bss	00000004 console_is_midline
000105d4 g     F .text	000000b8 shell_exec
0000a6fe g     F .text	00000014 os_mbuf_free
2000053c g     O .data	00000004 SystemCoreClock
0000e35a g     F .text	00000022 dpl_cputime_timer_relative
000155e8 g     F .text	0000001e dw1000_set_wait4resp
000081b4 g     F .text	0000000c hal_system_init
00013104 g     F .text	0000000e cbor_encode_byte_string
00017170 g     F .text	00000120 dw1000_phy_forcetrxoff
00008164  w    F .text	00000002 SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
0000a498 g     F .text	00000040 os_arch_task_stack_init
00015f62 g     F .text	00000036 dw1000_calc_clock_offset_ratio_ttco
000140fc g     F .text	000000f0 dw1000_write_reg
0000d908 g     F .text	0000006c malloc
0001e1a4 g     F .text	00000028 flash_area_read
00016e82 g     F .text	00000024 dw1000_phy_disable_sequencing
0000904c g     F .text	0000004c __assert_func
0001c7f4 g     F .text	00000018 imgr_my_version
00018064 g     F .text	00000018 nrf52_spi0_irq_handler
0001cdd4 g     F .text	000000b6 imgmgr_state_flags
00009de0 g     F .text	00000040 os_sched_wakeup_ticks
00011310 g     F .text	00000024 stats_shell_register
0000f908 g     F .text	00000050 console_pkg_init
0001cd44 g     F .text	0000003c imgmgr_module_init
0000815c  w    F .text	00000002 UsageFault_Handler
00015328 g     F .text	0000006a dw1000_set_delay_start
0001c482 g     F .text	0000000c strtoll
0000e24c g     F .text	0000003a vsnprintf
2000454c g     O .bss	00000018 _uwbcfg_log
0002188c g     F .text	00000040 .hidden __fixunsdfsi
2000265c g     O .bss	00000008 g_callout_list
00020ef8 g     F .text	00000018 os_malloc
0000be14 g     F .text	00000072 uwb_ccp_free
00008164  w    F .text	00000002 UARTE0_UART0_IRQHandler
0000dda4 g     F .text	0000047c tfp_format
2000fe50 g       *ABS*	00000000 __HeapLimit
20001448 g       .bss	00000000 __bss_start__
0000b0a4 g     F .text	0000003e tdma_release_slot
000081c0 g     F .text	00000010 hal_debugger_connected
000211e8 g     F .text	0000001e .hidden __aeabi_ui2d
00020ca0 g     F .text	00000070 hal_flash_write
0000e656 g     F .text	00000058 dpl_mbuf_appendfrom
0001cd84 g     F .text	00000014 imgmgr_log_upload_start
00008164  w    F .text	00000002 TIMER4_IRQHandler
000148d8 g     F .text	00000052 hal_dw1000_spi_txrx_cb
00021ae8 g     F .text	000002d0 .hidden __udivmoddi4
00020f64 g     F .text	00000000 .hidden __aeabi_drsub
0000e32a g     F .text	00000008 dpl_cputime_timer_stop
0000b114 g     F .text	0000003e tdma_free
0001d660 g     F .text	00000048 nmgr_pkg_init
0001bfa8 g     F .text	00000018 twr_ss_ext_free
000137f4 g     F .text	00000038 _cbor_value_copy_string
00017b48 g     F .text	000000d2 dw1000_gpio_config_leds
00008c88 g     F .text	00000018 uwb_task_deinit
2000346c g     O .bss	00000004 g_current_task
00009b04 g     F .text	0000006c os_sanity_run
00013146 g     F .text	0000002c cbor_encoder_close_container
0000a47c g     F .text	0000000c os_arch_save_sr
20004521 g     O .bss	00000001 sysdown_active
000217c0 g     F .text	00000012 .hidden __aeabi_dcmplt
0001fc24 g     F .text	00000020 boot_write_magic
00009890 g     F .text	00000014 os_mempool_init
0001dcb8 g     F .text	00000020 config_pkg_init
0000a2a8 g     F .text	00000038 os_gettimeofday
2000347c g     O .bss	00000001 g_task_id
0000ea84 g     F .text	00000016 conf_parse_and_lookup
00011ecc g     F .text	00000140 timeval_to_clocktime
00011758 g     F .text	00000010 uwbcfg_register
20000624 g     O .data	00000008 g_stats_registry
0002122c g     F .text	00000042 .hidden __extendsfdf2
0000ea2c g     F .text	00000024 conf_handler_lookup
00016b90 g     F .text	00000020 dw1000_get_rssi
00021530 g     F .text	000001d0 .hidden __aeabi_ddiv
00020f70 g     F .text	00000276 .hidden __adddf3
00008af8 g     F .text	00000060 uwb_dev_idx_lookup
00024e80 g       .text	00000000 __exidx_start
0001ae90 g     F .text	00000018 twr_ds_free
0001c4a4 g     F .text	00000100 strntoumax
000212dc g     F .text	00000254 .hidden __aeabi_dmul
00023030 g     O .text	00000078 g_stats_map_uwb_ccp_stat_section
00009b70 g     F .text	00000010 os_sanity_init
20001014 g     O .data	00000001 __fdlib_version
20004660 g     O .bss	00000004 imgmgr_dfu_callbacks_fn
00019028 g     F .text	00000048 uwb_rng_tof_to_meters
0001cfc8 g     F .text	000001bc imgmgr_state_read
0000a732 g     F .text	000000a8 os_mbuf_append
0001f5b4 g     F .text	0000000a mfg_read_tlv_mmr_ref
0000fad8 g     F .text	00000028 rtt_console_init
0000ac10 g     F .text	00000014 os_set_env
0000e4be g     F .text	00000036 dpl_memblock_put_from_cb
000146c0 g     F .text	00000048 dw1000_dev_enter_sleep_after_tx
00016c10 g     F .text	0000000e dw1000_read_systime_lo
00016bb0 g     F .text	00000050 dw1000_estimate_los
000138e8 g     F .text	00000010 hal_bsp_flash_dev
0001598e g     F .text	000000c4 dw1000_set_dblrxbuff
00018b48 g     F .text	0000000c nrf52_periph_create
0001955c g     F .text	000000f4 timescale_init
00016df8 g     F .text	0000002e dw1000_phy_txclk_PLL
000160ac g     F .text	0000001e dw1000_ic_and_host_ptrs_equal
00023228 g     O .text	00000008 MemFile_methods
00017290 g     F .text	00000068 dw1000_phy_interrupt_mask
20003460 g     O .bss	0000000c g_os_sanity_check_mu
0001e21c g     F .text	0000000a flash_area_align
000211e8 g     F .text	0000001e .hidden __floatunsidf
0001cdc0 g     F .text	00000014 imgmgr_log_confirm
0000f8c8 g     F .text	0000000c console_line_queue_set
00020f10 g     F .text	00000014 os_free
00008178 g     F .text	0000003c _sbrk
00012664 g     F .text	0000002a base64_pad
000138d2 g     F .text	00000014 cbor_value_calculate_string_length
00015e3c g     F .text	00000024 dw1000_read_carrier_integrator
0002472c g     O .text	0000000c g_stats_map_twr_ds_stat_section
00017ebc g     F .text	00000098 os_tick_idle
0000f994 g     F .text	0000001c console_printf
0001d628 g     F .text	00000014 nmgr_transport_init
0001cd30 g     F .text	00000014 imgmgr_dfu_confirmed
00010c3c g     F .text	00000012 shell_os_reset_cmd
00013f50 g     F .text	000000cc dw1000_write
00016a78 g     F .text	00000098 dw1000_calc_fppl
0000f5c8 g     F .text	00000002 console_blocking_mode
0000e890 g     F .text	00000018 conf_ensure_loaded
00015904 g     F .text	0000008a dw1000_set_wait4resp_delay
0001368a g     F .text	0000012a cbor_value_enter_container
00008164  w    F .text	00000002 I2S_IRQHandler
00008644 g     F .text	00000002 _init
0001fb38 g     F .text	00000006 boot_swap_type_off
00020d10 g     F .text	000000cc hal_flash_erase
00012434 g     F .text	0000000c split_mode_get
0001c476 g     F .text	0000000c strtol
00010bb8 g     F .text	00000084 shell_os_date_cmd
0000b1b0 g     F .text	00000030 tdma_pkg_init
00022870 g     F .text	000000c0 __ieee754_log10f
000209e0 g     F .text	00000048 fcb_getnext_in_area
00008164  w    F .text	00000002 SWI4_EGU4_IRQHandler
000218cc g     F .text	0000009e .hidden __aeabi_d2f
20004600 g     O .bss	0000001c g_twr_ss_stat
00017f54 g     F .text	000000a0 os_tick_init
00021aac g     F .text	0000003c .hidden __aeabi_d2ulz
000172f8 g     F .text	0000015c dw1000_phy_repeated_frames
00015758 g     F .text	00000022 dw1000_set_abs_timeout
200005d8 g     O .data	00000008 g_dpl_mempool_list
000208c6 g     F .text	000000c8 fcb_elem_crc8
0001e818 g     F .text	00000008 log_console_get
0000c900 g     F .text	00000080 uwb_rng_calc_rel_tx
00008164  w    F .text	00000002 TIMER0_IRQHandler
0000923c g     F .text	000000c8 os_init
0001cd98 g     F .text	00000014 imgmgr_log_upload_done
0001bc50 g     F .text	00000018 twr_ss_ack_free
0001aea8 g     F .text	00000038 twr_ds_pkg_down
000080f8 g     F .text	0000005c Reset_Handler
0001a044 g     F .text	000000a0 srkf_dbl_free
0001c43c g     F .text	0000001a strrchr
0002053e g     F .text	00000026 fcb_put_len
000123fc g     F .text	00000038 split_check_status
000176d8 g     F .text	00000180 dw1000_cli_dump_registers
0001f29c g     F .text	00000040 modlog_append
0000f14c g     F .text	0000000c console_echo
0002183c g     F .text	0000004e .hidden __fixdfsi
0000d77e g     F .text	00000030 calloc
00009920 g     F .text	00000034 os_mempool_info_get_next
20004548 g     O .bss	00000001 sysinit_active
00013c1c g     F .text	00000064 SEGGER_RTT_Init
200040f9 g     O .bss	00000001 g_console_silence
00012440 g     F .text	0000000c split_app_active_get
00013120 g     F .text	0000000a cbor_encoder_create_array
00008f3a g     F .text	0000001a hal_gpio_toggle
0000acc2 g     F .text	0000001e os_default_irq_asm
0002444c g     O .text	0000000c cmd_dw1000_help
00009e20 g     F .text	0000000c os_sched_next_task
00009b80 g     F .text	00000054 os_sched_insert
000093c0 g     F .text	00000078 os_callout_reset
0001f5c0 g     F .text	0000004c mfg_init
00009668 g     F .text	00000010 os_dev_reset
00018b56 g     F .text	00000004 cir_pkg_down
000107f8 g     F .text	00000048 shell_init
00020f70 g     F .text	00000276 .hidden __aeabi_dadd
00021708 g     F .text	00000082 .hidden __ledf2
0001d278 g     F .text	00000018 mgmt_group_list_unlock
0000aa64 g     F .text	00000014 os_mutex_init
00008168 g     F .text	00000010 _sbrkInit
00021a6c g     F .text	00000040 .hidden __aeabi_f2ulz
0000971c g     F .text	0000001a os_eventq_get_no_wait
00021270 g     F .text	0000006a .hidden __aeabi_ul2d
0000d748 g     F .text	00000036 uwb_wcs_pkg_down
20001448 g       .bssnz	00000000 __bssnz_end__
0001e280 g     F .text	00000070 flash_map_init
0001c490 g     F .text	00000014 vprintf
000091c0 g     F .text	0000000c os_started
00008164  w    F .text	00000002 TIMER1_IRQHandler
20000000 g       .bss	00000000 _ram_start
20000ffc g     O .data	00000018 reboot_conf_handler
0000ea00 g     F .text	00000010 conf_unlock
00009da4 g     F .text	0000003c os_sched_os_timer_exp
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
000174d0 g     F .text	0000001a dw1000_phy_frame_duration
00011008 g     F .text	00000024 stats_group_find
00024af0 g     O .text	00000028 log_console_handler
0001fa4e g     F .text	0000001e rwlock_release_write
0001d63c g     F .text	00000024 nmgr_rx_req
00008e80 g     F .text	0000002c hal_gpio_init_in
0000d5bc g     F .text	00000038 uwb_wcs_dtu_time_adjust
00017b44 g     F .text	00000004 dw1000_cli_down
00010acc g     F .text	00000018 shell_nlip_init
000138ae g     F .text	00000024 cbor_value_advance
00022ef0 g     O .text	00000018 g_stats_map_tdma_stat_section
0001e4ac g     F .text	00000010 log_list_get_next
00008164  w    F .text	00000002 PWM2_IRQHandler
00018fd4 g     F .text	0000001c json_read_next
0000c890 g     F .text	00000032 uwb_rng_append_config
00021f4c g     F .text	0000006c log10f
0001d220 g     F .text	0000003c imgr_ver_str
2000461c g     O .bss	00000028 g_twr_ss_ack_stat
20001448 g       .data	00000000 __data_end__
0001e61c g     F .text	00000094 log_register
000203da g     F .text	00000140 mbedtls_sha256_finish_ret
00008c02 g     F .text	00000010 uwb_mac_find_cb_inst_ptr
000117bc g     F .text	00000004 uwbcfg_pkg_down
00020a28 g     F .text	00000018 fcb_getnext_area
0001cdac g     F .text	00000014 imgmgr_log_pending
0001f9d4 g     F .text	00000026 rwlock_release_read
00016b10 g     F .text	00000020 dw1000_get_fppl
0000ef04 g     F .text	00000010 conf_nmgr_register
00008164  w    F .text	00000002 ECB_IRQHandler
00010e04 g     F .text	00000014 shell_prompt_register
00021fb8 g     F .text	000004a4 __ieee754_asin
0000e556 g     F .text	00000014 dpl_mbuf_free
0000fb0c g     F .text	0000000c console_yes_ticks
000217fc g     F .text	00000012 .hidden __aeabi_dcmpgt
00021ed4 g     F .text	00000078 fmod
0001b6d8 g     F .text	0000009c twr_ss_pkg_init
0000e75c g     F .text	00000054 dpl_mbuf_trim_front
200034b0 g     O .bss	00000004 g_os_time
0001d610 g     F .text	0000000c mgmt_evq_get
00018370 g     F .text	00000060 hal_spi_init
00018ae0 g     F .text	00000014 hal_watchdog_tickle
20004ab4 g       .bss	00000000 __bss_end__
00009678 g     F .text	00000020 os_dev_walk
00014710 g     F .text	0000004a dw1000_dev_enter_sleep_after_rx
0000a69e g     F .text	0000002e os_mbuf_get
00008164  w    F .text	00000002 SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
0001dba4 g     F .text	00000058 nmgr_shell_pkg_init
0000ca98 g     F .text	000000d8 uwb_rng_listen
000217e8 g     F .text	00000012 .hidden __aeabi_dcmpge
0000c7a4 g     F .text	000000ec uwb_rng_init
00017654 g     F .text	00000024 dw1000_pkg_init
00020584 g     F .text	00000034 fcb_sector_hdr_init
0001c6c0 g     F .text	000000fc imgr_read_info
00011868 g     F .text	0000003e remap_framefilter
0000bc30 g     F .text	000001e4 uwb_ccp_init
00020f6c g     F .text	0000027a .hidden __aeabi_dsub
00009a30 g     F .text	00000010 os_msys_reset
00008164 g     F .text	00000002 Default_Handler
00008630 g     F .text	00000014 _start
00014f3c g     F .text	0000003c hal_dw1000_rw_noblock_wait
00019070 g     F .text	0000005c calc_tof_ss
00010c50 g     F .text	00000038 shell_os_ls_dev_cmd
00021270 g     F .text	0000006a .hidden __floatundidf
00008ca0 g     F .text	0000004a uwb_dev_init
0000d5a0 g     F .text	0000001c uwb_wcs_set_postprocess
20004520 g     O .bss	00000001 stats_shell_registered
200044fc g     O .bss	00000018 g_stats_stats
000125d0 g     F .text	00000094 base64_encode
0000a2e0 g     F .text	00000018 os_time_is_set
0000ac24 g     F .text	00000006 os_arch_init_task_stack
000097b4 g     F .text	00000018 os_eventq_run
0000e9ec g     F .text	00000014 conf_lock
0000a0e0 g     F .text	00000080 os_task_info_get_next
00024d38 g     O .text	00000010 boot_img_magic
00012528 g     F .text	0000003c split_write_split
0000f158 g     F .text	00000034 console_lock
0001c41a g     F .text	00000022 strncmp
00010e80 g     F .text	00000098 stats_walk
20003880 g     O .bss	00000004 conf_save_dst
0001b3dc g     F .text	00000018 twr_ds_ext_free
00017454 g     F .text	00000028 dw1000_phy_SHR_duration
00009010 g     F .text	0000003c hal_gpio_irq_release
0002487c g     O .text	0000000c g_stats_map_twr_ss_ext_stat_section
200014ac g     O .bss	00000050 g_idle_task
00008eac g     F .text	00000038 hal_gpio_init_out
00008f06 g     F .text	00000034 hal_gpio_read
2000064c g     O .data	00000004 sysinit_panic_cb
00018938 g     F .text	0000008c hal_timer_start_at
00014514 g     F .text	000001a4 dw1000_dev_config
0001caf8 g     F .text	00000014 imgmgr_dfu_stopped
000190d0 g     F .text	00000070 calc_tof_ds
2000345c g     O .bss	00000004 g_os_sanity_check_list
00015844 g     F .text	00000098 dw1000_set_autoack
00018ff0 g     F .text	00000012 json_read_prev
0000da80 g     F .text	0000001e strncpy
00015f98 g     F .text	0000003c dw1000_read_rxdiag
00016c2e g     F .text	0000000e dw1000_read_rxtime_lo
000098a4 g     F .text	00000032 os_memblock_get
00009d30 g     F .text	00000074 os_sched_wakeup
0000a63e g     F .text	00000022 os_mqueue_get
00009e7c g     F .text	00000010 os_sem_init
00010b08 g     F .text	000000b0 shell_os_mpool_display_cmd
000174ea g     F .text	000000cc dw1000_phy_txrf_power_value
00014f78 g     F .text	00000086 hal_dw1000_wakeup
0001c36e g     F .text	00000060 realloc
00010d78 g     F .text	00000038 shell_os_register
0000e37c g     F .text	00000030 mem_init_mbuf_pool
00019650 g     F .text	00000038 timescale_free
00009098 g     F .text	00000098 os_default_irq
0001e226 g     F .text	0000000a flash_area_erased_val
00014410 g     F .text	00000104 dw1000_dev_wakeup
00021208 g     F .text	00000022 .hidden __aeabi_i2d
0000e56a g     F .text	00000020 dpl_mbuf_free_chain
20003470 g     O .bss	00000004 g_os_last_ctx_sw_time
00009e8c g     F .text	00000064 os_sem_release
0000d9a0 g     F .text	00000048 memcmp
0000a4d8 g     F .text	00000018 os_arch_init
00014764 g     F .text	00000124 dw1000_dev_init
000205b8 g     F .text	0000004e fcb_sector_hdr_read
0001df54 g     F .text	000000c4 conf_line_parse
00021db8  w    F .text	00000002 .hidden __aeabi_ldiv0
0000e51e g     F .text	0000000a dpl_mbuf_pool_init
0000cee0 g     F .text	00000038 uwb_rng_pkg_down
00020f28 g     F .text	0000003c crc8_calc
0000ec4c g     F .text	00000054 conf_commit
0000bf7a g     F .text	00000054 uwb_ccp_stop
00011400 g     F .text	0000000c sysinit_start
00021530 g     F .text	000001d0 .hidden __divdf3
000187e0 g     F .text	000000fc hal_timer_config
00015310 g     F .text	00000018 dw1000_tx_wait
0000d528 g     F .text	00000044 uwb_wcs_init
0000b1e0 g     F .text	0000003c tdma_pkg_down
0001244c g     F .text	00000018 split_mode_set
00020606 g     F .text	00000122 fcb_init
0000b00c g     F .text	00000098 tdma_assign_slot
000212dc g     F .text	00000254 .hidden __muldf3
0000f8c0 g     F .text	00000008 console_is_init
0001bbb4 g     F .text	0000009c twr_ss_ack_pkg_init
0000e918 g     F .text	00000058 conf_save
0000cba8 g     F .text	000000c0 uwb_rng_twr_to_tof
0000aec0 g     F .text	0000014c tdma_init
00009ef0 g     F .text	000000b4 os_sem_pend
0001db60 g     F .text	00000010 nmgr_os_groups_register
00018ad0 g     F .text	00000010 hal_watchdog_enable
0001fa6c g     F .text	00000030 rwlock_init
0000d708 g     F .text	00000040 uwb_wcs_pkg_init
0001f97a g     F .text	0000005a rwlock_acquire_read
0000950c g     F .text	00000022 os_cputime_timer_relative
00015158 g     F .text	00000082 dw1000_write_tx_fctrl
0000a660 g     F .text	0000003e os_mqueue_put
000099a0 g     F .text	0000004c os_msys_register
20001600 g     O .bss	00000004 g_os_idle_ctr
0001e0e4 g     F .text	00000044 flash_area_open
0001566a g     F .text	000000ac dw1000_set_rx_timeout
0000a906 g     F .text	0000007a os_mbuf_cmpf
0001e6b0 g     F .text	00000024 log_walk_body
00008164  w    F .text	00000002 SAADC_IRQHandler
0001fbf8 g     F .text	0000002a boot_read_swap_state_by_id
00019b44 g     F .text	00000500 srkf_dbl_init
00008be0 g     F .text	00000022 uwb_mac_get_interface
0000da02 g     F .text	00000042 memset
00008020 g       .text	000000d8 __isr_vector
000088b0 g     F .text	00000204 main
000183d0 g     F .text	0000002c hal_spi_set_txrx_cb
0001e770 g     F .text	00000016 log_read_body
00020ac8 g     F .text	00000034 fcb_getnext
20004570 g     O .bss	00000008 g_spi0_sem
0000fa88 g     F .text	0000003c console_out_nolock
00012f9c g     F .text	00000080 cbor_encode_uint
0000e474 g     F .text	0000004a dpl_memblock_get
00018f60 g     F .text	00000020 json_encode_array_start
00008164  w    F .text	00000002 CCM_AAR_IRQHandler
00008164  w    F .text	00000002 WDT_IRQHandler
0001f268 g     F .text	00000034 modlog_register
00020afc g     F .text	00000078 fcb_rotate
0001140c g     F .text	0000000c sysinit_end
0001f318 g     F .text	000000a0 modlog_init
0000ac2a g     F .text	00000046 SVC_Handler
200045c8 g     O .bss	0000001c g_twr_ds_stat
000096aa g     F .text	0000000a os_eventq_inited
000218cc g     F .text	0000009e .hidden __truncdfsf2
00023dbc g     O .text	00000038 sysdown_cbs
00011cf8 g     F .text	000001d4 clocktime_to_timeval
0001d2c0 g     F .text	00000024 mgmt_group_register
0001231a g     F .text	0000001c streamer_printf
0000c8c2 g     F .text	0000003e uwb_rng_remove_config
0000cf18 g     F .text	00000190 rng_encode
0000e3f4 g     F .text	00000080 dpl_mempool_init
00021280 g     F .text	0000005a .hidden __aeabi_l2d
00020c4e g     F .text	00000052 hal_flash_read
0000f18c g     F .text	00000034 console_unlock
00009810 g     F .text	00000008 os_eventq_dflt_get
000188dc g     F .text	00000030 hal_timer_read
0000c776 g     F .text	0000002e uwb_rng_config
00009736 g     F .text	0000007e os_eventq_get
0001e1f4 g     F .text	00000028 flash_area_erase
0001b774 g     F .text	00000018 twr_ss_free
0001b344 g     F .text	00000098 twr_ds_ext_pkg_init
20004584 g     O .bss	00000028 nrf52_hal_spi0
0001bf18 g     F .text	00000090 twr_ss_ext_pkg_init
00016c5c g     F .text	00000140 dw1000_configcwmode
00013ce6 g     F .text	00000008 uwb_dw1000_event_cnt_ctrl
0000a442 g     F .text	0000001a os_time_ms_to_ticks
0001e5cc g     F .text	0000000a log_walk
00009494 g     F .text	00000034 os_callout_wakeup_ticks
00021a6c g     F .text	00000040 .hidden __fixunssfdi
00008164  w    F .text	00000002 SWI5_EGU5_IRQHandler
00015f40 g     F .text	00000022 dw1000_read_time_tracking_offset
000151da g     F .text	00000136 dw1000_start_tx
00012310 g     F .text	0000000a streamer_vprintf
200047bc g     O .bss	00000004 flash_map_entries
0000a858 g     F .text	000000ae os_mbuf_adj
20004a24 g     O .bss	00000002 reboot_cnt
0000ea10 g     F .text	0000001c conf_register
0000931e g     F .text	00000008 os_reboot
00008020 g       .imghdr	00000000 __text
00020f24 g     F .text	00000004 crc8_init
0001df18 g     F .text	00000032 conf_fcb_kv_save
0000c4a0 g     F .text	00000030 uwb_ccp_pkg_init
0001f57e g     F .text	00000012 mfg_seek_next
0000da58 g     F .text	00000018 strcmp
0001e256 g     F .text	0000000e flash_area_read_is_empty
00009c04 g     F .text	0000000c os_sched_get_current_task
0001312a g     F .text	0000001c cbor_encoder_create_map
0000f544 g     F .text	00000084 console_write
0000b152 g     F .text	0000005c tdma_rx_slot_start
00008668 g     F .text	0000007c uwb_config_updated_func
00008458 g     F .text	000001d8 SystemInit
00009502 g     F .text	0000000a os_cputime_get32
0001deac g     F .text	00000058 conf_fcb_src
00008164  w    F .text	00000002 RNG_IRQHandler
000157c4 g     F .text	00000080 dw1000_mac_framefilter
0001e70c g     F .text	00000020 log_read_hdr
00021aac g     F .text	0000003c .hidden __fixunsdfdi
00021710 g     F .text	0000007a .hidden __nedf2
00011220 g     F .text	0000001c stats_nmgr_register_group
00018f58 g     F .text	00000008 json_encode_array_name
000097cc g     F .text	00000042 os_eventq_remove
00014cbc g     F .text	0000009a hal_dw1000_write
000150be g     F .text	0000009a dw1000_write_tx
0000e8a8 g     F .text	00000068 conf_save_one
0000ea9a g     F .text	000000ca conf_value_from_str
0001e4bc g     F .text	00000078 log_module_get_name
00013cde g     F .text	00000008 uwb_dw1000_set_autoack_delay
0001c3ce g     F .text	00000020 sprintf
00021a3c g     F .text	0000002e .hidden __fixdfdi
00009e2c g     F .text	00000022 os_sched
00020c3e g     F .text	00000010 hal_flash_erased_val
00020094 g     F .text	000000e0 bootutil_img_validate
00017c1a g     F .text	00000058 _dw1000_otp_read
0000ab30 g     F .text	000000e0 os_mutex_pend
00013c92 g     F .text	00000044 uwb_dw1000_mac_framefilter
00000000 g       .svc_table	00000000 SVC_Table
00021e5c g     F .text	00000078 asin
0001cece g     F .text	000000b0 imgmgr_state_set_pending
00008164  w    F .text	00000002 RTC2_IRQHandler
00023150 g     O .text	00000048 g_stats_map_rng_stat_section
00016c3c g     F .text	00000010 dw1000_read_txtime
00018b5c g     F .text	0000003c json_encode_object_start
20010000 g       .bss	00000000 __StackTop
00013112 g     F .text	0000000e cbor_encode_text_string
00022940 g     F .text	0000000c nanf
000127c8 g     F .text	00000218 cbor_read_array
20001018 g     O .data	00000004 _impure_ptr
0001dcd8 g     F .text	00000002 config_pkg_init_stage2
0000a628 g     F .text	00000016 os_mqueue_init
0000a340 g     F .text	00000074 os_settimeofday
0001e88c g     F .text	00000034 log_level_set
00017858 g     F .text	000000d0 dw1000_cli_dump_address
00008164  w    F .text	00000002 PWM0_IRQHandler
00008164  w    F .text	00000002 SWI3_EGU3_IRQHandler
0001c5a4 g     F .text	0000001e strsep
00018284 g     F .text	00000038 hal_spi_config
0001e018 g     F .text	0000005a conf_line_make
0001bc68 g     F .text	00000018 twr_ss_ack_pkg_down
0001e128 g     F .text	0000007c flash_area_to_sectors
00012690 g     F .text	00000058 base64_decode
00016c4c g     F .text	0000000e dw1000_read_txtime_lo
0001a7a0 g     F .text	00000204 bierman_dbl
0000d0ec g     F .text	0000043c rng_json_write
00008ba2 g     F .text	0000003e uwb_mac_remove_interface
00019870 g     F .text	000002d4 srkf_dbl_main
00009438 g     F .text	0000005c os_callout_tick
00024cf0 g     O .text	00000048 sysflash_map_dflt
200045ac g     O .bss	0000001c nrf52_hal_timer0
000080f8 g       .text	00000000 __isr_vector_end
000184a8 g     F .text	000000f8 hal_spi_txrx_noblock
00009304 g     F .text	0000001a os_start
00016f00 g     F .text	00000034 dw1000_phy_config_txrf
00008164  w    F .text	00000002 RTC1_IRQHandler
0001fd14 g     F .text	00000086 boot_set_pending
00014888 g     F .text	00000050 dw1000_dev_deinit
000182bc g     F .text	0000004c hal_spi_enable
0001d184 g     F .text	0000009c imgmgr_state_write
0002188c g     F .text	00000040 .hidden __aeabi_d2uiz
0000e2f4 g     F .text	0000002e dpl_cputime_timer_init
00022930 g     F .text	00000010 nan
000094d4 g     F .text	0000002e os_cputime_timer_init
00008b58 g     F .text	0000004a uwb_mac_append_interface
0001b3f4 g     F .text	00000038 twr_ds_ext_pkg_down
000226d8 g     F .text	00000198 __ieee754_sqrt
0000e970 g     F .text	00000014 conf_store_init
000175fc g     F .text	00000056 dw1000_phy_event_cnt_read
0000e322 g     F .text	00000008 dpl_cputime_timer_start
00021dd0 g     F .text	0000008c ceilf
00008164  w    F .text	00000002 SWI1_EGU1_IRQHandler
0000f5cc g     F .text	000002f4 console_handle_char
00016e26 g     F .text	00000032 dw1000_phy_sysclk_LDE
000217ac g     F .text	00000012 .hidden __aeabi_dcmpeq
00010730 g     F .text	00000044 shell_register
0000d7ae g     F .text	00000020 fwrite
0001f60c g     F .text	00000010 mfg_open
20000548 g     O .data	00000008 g_os_run_list
00016054 g     F .text	00000058 dw1000_mac_init
00016c1e g     F .text	00000010 dw1000_read_rxtime
0001adf8 g     F .text	00000098 twr_ds_pkg_init
0000cedc g     F .text	00000002 uwb_rng_pkg_init2
00015a58 g     F .text	000003e4 dw1000_mac_config
00008ab4 g     F .text	00000034 NVIC_Relocate
0000e808 g     F .text	00000028 conf_src_register
00012f92 g     F .text	0000000a cbor_encoder_init
00012358 g     F .text	00000078 sysinit_app
200034b4 g     O .bss	00000004 os_flags
00018b98 g     F .text	00000054 json_encode_object_key
0000b0e2 g     F .text	00000032 tdma_stop
0001fc58 g     F .text	00000016 boot_write_swap_type
0000a488 g     F .text	00000006 os_arch_restore_sr
20004578 g     O .bss	0000000c g_hal_os_tick
0000e528 g     F .text	0000002e dpl_mbuf_get
00015392 g     F .text	000001ac dw1000_start_rx
0000bfd0 g     F .text	00000038 uwb_ccp_skew_compensation_ui64
00018bec g     F .text	00000068 json_encode_object_entry
0001f8b0 g     F .text	00000054 log_reboot_pkg_init
2000fe50 g       *ABS*	000001b0 __StackLimit
0001cb0c g     F .text	00000014 imgmgr_dfu_started
0001e230 g     F .text	00000026 flash_area_is_empty
20002658 g     O .bss	00000004 g_os_started
00020354 g     F .text	00000086 mbedtls_sha256_update_ret
0001c30c g     F .text	00000038 wcs_timescale_pkg_init
0001ff44 g     F .text	000000d8 split_go
00008164  w    F .text	00000002 SPIM2_SPIS2_SPI2_IRQHandler
00008164  w    F .text	00000002 NFCT_IRQHandler
000114e0 g     F .text	00000250 uwbcfg_commit_to_inst
0001c80c g     F .text	0000003c imgr_find_by_hash
0000e33c g     F .text	00000016 dpl_cputime_delay_ticks
000137b4 g     F .text	0000003e cbor_value_leave_container
0002075a g     F .text	00000032 fcb_append_to_scratch
0001d304 g     F .text	00000028 mgmt_cbuf_setoerr
00008448 g     F .text	00000010 SystemCoreClockUpdate
00018f38 g     F .text	00000020 json_encode_object_finish
0000a712 g     F .text	00000020 os_mbuf_free_chain
0002183c g     F .text	0000004e .hidden __aeabi_d2iz
0000a3b4 g     F .text	0000003c os_get_uptime
00009a64 g     F .text	00000034 os_msys_init
00020a40 g     F .text	00000088 fcb_getnext_nolock
0000a7da g     F .text	00000024 os_mbuf_off
200040fb g     O .bss	00000001 g_is_output_nlip
00010774 g     F .text	00000084 shell_cmd_register
00008fcc g     F .text	00000028 hal_gpio_irq_enable
0000a230 g     F .text	0000000c os_time_get
200049b0 g     O .bss	0000001c modlog_mapping_pool
000183fc g     F .text	000000ac hal_spi_txrx
00019688 g     F .text	000000c8 timescale_main
000189c4 g     F .text	00000064 hal_timer_stop
0001505c g     F .text	00000062 dw1000_read_rx
0001577a g     F .text	00000048 dw1000_sync_rxbufptrs
0000ec10 g     F .text	0000003c conf_get_value
0001e534 g     F .text	00000058 log_append_body
0000c748 g     F .text	0000002e uwb_rng_free
0000a6cc g     F .text	00000032 os_mbuf_get_pkthdr
20004838 g     O .bss	00000008 g_log_info
0000eb64 g     F .text	00000078 conf_str_from_value
00021db8  w    F .text	00000002 .hidden __aeabi_idiv0
00012df8 g     F .text	00000050 cbor_mbuf_reader_init
00021810 g     F .text	0000002c .hidden __unorddf2
0001200c g     F .text	00000200 datetime_parse
0002078c g     F .text	000000fa fcb_append
200000d8 g     O .rtt	00000048 _SEGGER_RTT
0000ebdc g     F .text	00000034 conf_set_value
00024458 g     O .text	00000030 cmd_dw1000_param
0000e332 g     F .text	0000000a dpl_cputime_get32
0001e58c g     F .text	00000040 log_printf
000238dc g     O .text	00000006 g_stats_map_stats
00009fbc g     F .text	000000d8 os_task_init
0000e6ae g     F .text	000000ae dpl_mbuf_adj
000081fc g     F .text	0000004c hal_system_clock_start
0000815a  w    F .text	00000002 BusFault_Handler
0001e820 g     F .text	00000050 log_console_init
00011358 g     F .text	000000a0 sysdown
00013cee g     F .text	00000008 uwb_dw1000_event_cnt_read
0000d6d0 g     F .text	00000018 uwb_wcs_local_to_master
0000f8d4 g     F .text	00000028 console_line_event_put
0000da70 g     F .text	00000010 strlen
000095e0 g     F .text	00000038 os_dev_create
000098d6 g     F .text	0000001e os_memblock_put_from_cb
0001f9fa g     F .text	00000054 rwlock_acquire_write
000142d8 g     F .text	000000b2 dw1000_dev_configure_sleep
00009698 g     F .text	00000012 os_eventq_init
0000a23c g     F .text	00000044 os_time_advance
00014a50 g     F .text	0000026c hal_dw1000_read_noblock
0002179c g     F .text	00000010 .hidden __aeabi_cdcmpeq
0000edbc g     F .text	00000010 conf_cli_register
00021700 g     F .text	0000008a .hidden __gedf2
00009e50 g     F .text	0000002c os_sched_resort
20004a34 g     O .bss	00000004 boot_current_slot
0001c268 g     F .text	00000088 wcs_timescale_init
00017678 g     F .text	00000050 dw1000_pkg_down
000247b4 g     O .text	0000000c g_stats_map_twr_ss_stat_section
0000e4f4 g     F .text	0000002a dpl_memblock_put
00020c06 g     F .text	00000028 hal_flash_init
0000d56c g     F .text	00000034 uwb_wcs_free
0001b78c g     F .text	00000038 twr_ss_pkg_down
0001c3ee g     F .text	00000016 strchr
00008164  w    F .text	00000002 MWU_IRQHandler
00010f9c g     F .text	00000044 stats_module_init
0001d2e4 g     F .text	00000020 mgmt_find_handler
0002122c g     F .text	00000042 .hidden __aeabi_f2d
00008158  w    F .text	00000002 MemoryManagement_Handler
0001423a g     F .text	0000009e dw1000_softreset
00014998 g     F .text	000000b6 hal_dw1000_read
0001cb20 g     F .text	00000014 imgmgr_dfu_pending
00024820 g     O .text	0000001e g_stats_map_twr_ss_ack_stat_section
0000e58a g     F .text	000000a8 dpl_mbuf_append
0001e870 g     F .text	0000001c log_level_get
0001fd9a g     F .text	0000004c boot_set_confirmed
00010aa0 g     F .text	00000014 shell_nlip_input_register
00008164  w    F .text	00000002 COMP_LPCOMP_IRQHandler
00020e70 g     F .text	00000032 hal_flash_isempty_no_buf
00011730 g     F .text	00000028 uwbcfg_commit
00009618 g     F .text	0000002c os_dev_initialize_all
00020f6c g     F .text	0000027a .hidden __subdf3
0001099c g     F .text	00000024 shell_nlip_clear_pkt
0001f2dc g     F .text	0000003a modlog_printf
00015606 g     F .text	00000012 dw1000_set_on_error_continue
00009cac g     F .text	00000084 os_sched_remove
0001c848 g     F .text	00000048 imgmgr_find_best_area_id
20000550 g     O .data	00000008 g_os_sleep_list
0002196c g     F .text	00000000 .hidden __aeabi_ldivmod
00012350 g     F .text	00000008 streamer_console_get
000138f8 g     F .text	00000068 hal_bsp_init
00009330 g     F .text	00000038 os_pkg_init
00015fd8 g     F .text	0000007c dw1000_tasks_init
00018308 g     F .text	00000068 hal_spi_disable
00011aec g     F .text	00000180 strtod_soft
0000e98c g     F .text	00000060 conf_init
00009ad4 g     F .text	00000010 os_sanity_check_init
00020b74 g     F .text	00000074 fcb_walk
0000e632 g     F .text	00000024 dpl_mbuf_off
00016c00 g     F .text	00000010 dw1000_read_systime
00010f18 g     F .text	0000002c stats_init
0000e220 g     F .text	00000008 vfprintf
0001c5c2 g     F .text	00000030 strpbrk
00015e60 g     F .text	000000e0 dw1000_calc_clock_offset_ratio
00008f54 g     F .text	00000078 hal_gpio_irq_init
00016d9c g     F .text	0000002e dw1000_phy_sysclk_XTAL
20002608 g     O .bss	00000050 g_os_main_task
00008ff4 g     F .text	0000001c hal_gpio_irq_disable
0000d974 g     F .text	0000002c free
0000c4d0 g     F .text	0000003c uwb_ccp_pkg_down
0001fc44 g     F .text	00000014 boot_write_image_ok
00018b54 g     F .text	00000002 cir_pkg_init
00020180 g     F .text	000000a4 mbedtls_sha256_starts_ret
00011768 g     F .text	00000054 uwbcfg_pkg_init
00016e58 g     F .text	0000002a dw1000_phy_sysclk_SEQ
0000f1c0 g     F .text	0000001e console_out



Disassembly of section .text:

00008020 <__isr_vector>:
    8020:	20010000 	.word	0x20010000
    8024:	000080f9 	.word	0x000080f9
    8028:	00008155 	.word	0x00008155
    802c:	00008157 	.word	0x00008157
	...
    804c:	0000ac2b 	.word	0x0000ac2b
	...
    8058:	0000ac71 	.word	0x0000ac71
    805c:	0000acb7 	.word	0x0000acb7
    8060:	00008165 	.word	0x00008165
    8064:	00008165 	.word	0x00008165
    8068:	00008165 	.word	0x00008165
    806c:	00008165 	.word	0x00008165
    8070:	00008165 	.word	0x00008165
    8074:	00008165 	.word	0x00008165
    8078:	00008165 	.word	0x00008165
    807c:	00008165 	.word	0x00008165
    8080:	00008165 	.word	0x00008165
    8084:	00008165 	.word	0x00008165
    8088:	00008165 	.word	0x00008165
    808c:	00008165 	.word	0x00008165
    8090:	00008165 	.word	0x00008165
    8094:	00008165 	.word	0x00008165
    8098:	00008165 	.word	0x00008165
    809c:	00008165 	.word	0x00008165
    80a0:	00008165 	.word	0x00008165
    80a4:	00008165 	.word	0x00008165
    80a8:	00008165 	.word	0x00008165
    80ac:	00008165 	.word	0x00008165
    80b0:	00008165 	.word	0x00008165
    80b4:	00008165 	.word	0x00008165
    80b8:	00008165 	.word	0x00008165
    80bc:	00008165 	.word	0x00008165
    80c0:	00008165 	.word	0x00008165
    80c4:	00008165 	.word	0x00008165
    80c8:	00008165 	.word	0x00008165
    80cc:	00008165 	.word	0x00008165
    80d0:	00008165 	.word	0x00008165
    80d4:	00008165 	.word	0x00008165
	...
    80e0:	00008165 	.word	0x00008165
    80e4:	00008165 	.word	0x00008165
    80e8:	00008165 	.word	0x00008165
    80ec:	00008165 	.word	0x00008165
    80f0:	00008165 	.word	0x00008165
    80f4:	00008165 	.word	0x00008165

000080f8 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
    80f8:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
    80fc:	4a0c      	ldr	r2, [pc, #48]	; (8130 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
    80fe:	4b0d      	ldr	r3, [pc, #52]	; (8134 <.bss_zero_loop+0x34>)

00008100 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
    8100:	429a      	cmp	r2, r3
    itt     lt
    8102:	bfbc      	itt	lt
    strlt   r0, [r2], #4
    8104:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
    8108:	e7fa      	blt.n	8100 <.bss_zero_loop>
 *      of copy from/to are specified by following symbols evaluated in
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */
    ldr    r1, =__etext
    810a:	490b      	ldr	r1, [pc, #44]	; (8138 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
    810c:	4a0b      	ldr	r2, [pc, #44]	; (813c <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
    810e:	4b0c      	ldr	r3, [pc, #48]	; (8140 <.bss_zero_loop+0x40>)

    subs    r3, r2
    8110:	1a9b      	subs	r3, r3, r2
    ble     .LC0
    8112:	dd03      	ble.n	811c <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
    8114:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
    8116:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
    8118:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
    811a:	dcfb      	bgt.n	8114 <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
    811c:	4809      	ldr	r0, [pc, #36]	; (8144 <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
    811e:	490a      	ldr	r1, [pc, #40]	; (8148 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
    8120:	f000 f822 	bl	8168 <_sbrkInit>

    LDR     R0, =SystemInit
    8124:	4809      	ldr	r0, [pc, #36]	; (814c <.bss_zero_loop+0x4c>)
    BLX     R0
    8126:	4780      	blx	r0

    BL      hal_system_init
    8128:	f000 f844 	bl	81b4 <hal_system_init>

    LDR     R0, =_start
    812c:	4808      	ldr	r0, [pc, #32]	; (8150 <.bss_zero_loop+0x50>)
    BX      R0
    812e:	4700      	bx	r0
    ldr     r2, =__bss_start__
    8130:	20001448 	.word	0x20001448
    ldr     r3, =__bss_end__
    8134:	20004ab4 	.word	0x20004ab4
    ldr    r1, =__etext
    8138:	00024e98 	.word	0x00024e98
    ldr    r2, =__data_start__
    813c:	20000530 	.word	0x20000530
    ldr    r3, =__data_end__
    8140:	20001448 	.word	0x20001448
    LDR     R0, =__HeapBase
    8144:	20004ab8 	.word	0x20004ab8
    LDR     R1, =__HeapLimit
    8148:	2000fe50 	.word	0x2000fe50
    LDR     R0, =SystemInit
    814c:	00008459 	.word	0x00008459
    LDR     R0, =_start
    8150:	00008631 	.word	0x00008631

00008154 <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
    8154:	e7fe      	b.n	8154 <NMI_Handler>

00008156 <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
    8156:	e7fe      	b.n	8156 <HardFault_Handler>

00008158 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
    8158:	e7fe      	b.n	8158 <MemoryManagement_Handler>

0000815a <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
    815a:	e7fe      	b.n	815a <BusFault_Handler>

0000815c <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
    815c:	e7fe      	b.n	815c <UsageFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
    815e:	e7fe      	b.n	815e <UsageFault_Handler+0x2>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
    8160:	e7fe      	b.n	8160 <UsageFault_Handler+0x4>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
    8162:	e7fe      	b.n	8162 <UsageFault_Handler+0x6>

00008164 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
    8164:	e7fe      	b.n	8164 <Default_Handler>
    8166:	bf00      	nop

00008168 <_sbrkInit>:
static char *sbrkLimit __attribute__ ((section (".data")));
static char *brk __attribute__ ((section (".data")));

void
_sbrkInit(char *base, char *limit) {
    sbrkBase = base;
    8168:	4b02      	ldr	r3, [pc, #8]	; (8174 <_sbrkInit+0xc>)
    816a:	6018      	str	r0, [r3, #0]
    sbrkLimit = limit;
    816c:	6059      	str	r1, [r3, #4]
    brk = base;
    816e:	6098      	str	r0, [r3, #8]
}
    8170:	4770      	bx	lr
    8172:	bf00      	nop
    8174:	20000530 	.word	0x20000530

00008178 <_sbrk>:
void *
_sbrk(int incr)
{
    void *prev_brk;

    if (incr < 0) {
    8178:	1e03      	subs	r3, r0, #0
    817a:	db09      	blt.n	8190 <_sbrk+0x18>
            prev_brk = brk;
            brk -= incr;
        }
    } else {
        /* Allocating memory from the heap. */
        if (sbrkLimit - brk >= incr) {
    817c:	4a0c      	ldr	r2, [pc, #48]	; (81b0 <_sbrk+0x38>)
    817e:	6890      	ldr	r0, [r2, #8]
    8180:	6852      	ldr	r2, [r2, #4]
    8182:	1a12      	subs	r2, r2, r0
    8184:	429a      	cmp	r2, r3
    8186:	db0f      	blt.n	81a8 <_sbrk+0x30>
            prev_brk = brk;
            brk += incr;
    8188:	4403      	add	r3, r0
    818a:	4a09      	ldr	r2, [pc, #36]	; (81b0 <_sbrk+0x38>)
    818c:	6093      	str	r3, [r2, #8]
    818e:	4770      	bx	lr
        if (brk - incr < sbrkBase) {
    8190:	4a07      	ldr	r2, [pc, #28]	; (81b0 <_sbrk+0x38>)
    8192:	6890      	ldr	r0, [r2, #8]
    8194:	4403      	add	r3, r0
    8196:	6812      	ldr	r2, [r2, #0]
    8198:	4293      	cmp	r3, r2
    819a:	d302      	bcc.n	81a2 <_sbrk+0x2a>
            brk -= incr;
    819c:	4a04      	ldr	r2, [pc, #16]	; (81b0 <_sbrk+0x38>)
    819e:	6093      	str	r3, [r2, #8]
    81a0:	4770      	bx	lr
            prev_brk = (void *)-1;
    81a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    81a6:	4770      	bx	lr
        } else {
            prev_brk = (void *)-1;
    81a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        }
    }

    return prev_brk;
}
    81ac:	4770      	bx	lr
    81ae:	bf00      	nop
    81b0:	20000530 	.word	0x20000530

000081b4 <hal_system_init>:
 */
void
hal_system_init(void)
{
#if MYNEWT_VAL(MCU_DCDC_ENABLED)
    NRF_POWER->DCDCEN = 1;
    81b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81b8:	2201      	movs	r2, #1
    81ba:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
#endif
}
    81be:	4770      	bx	lr

000081c0 <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
    81c0:	4b02      	ldr	r3, [pc, #8]	; (81cc <hal_debugger_connected+0xc>)
    81c2:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
}
    81c6:	f000 0001 	and.w	r0, r0, #1
    81ca:	4770      	bx	lr
    81cc:	e000ed00 	.word	0xe000ed00

000081d0 <hal_system_reset>:
{
    81d0:	b508      	push	{r3, lr}
        if (hal_debugger_connected()) {
    81d2:	f7ff fff5 	bl	81c0 <hal_debugger_connected>
    81d6:	b100      	cbz	r0, 81da <hal_system_reset+0xa>
            asm("bkpt");
    81d8:	be00      	bkpt	0x0000
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    81da:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    81de:	4905      	ldr	r1, [pc, #20]	; (81f4 <hal_system_reset+0x24>)
    81e0:	68ca      	ldr	r2, [r1, #12]
    81e2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    81e6:	4b04      	ldr	r3, [pc, #16]	; (81f8 <hal_system_reset+0x28>)
    81e8:	4313      	orrs	r3, r2
    81ea:	60cb      	str	r3, [r1, #12]
    81ec:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    81f0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    81f2:	e7fd      	b.n	81f0 <hal_system_reset+0x20>
    81f4:	e000ed00 	.word	0xe000ed00
    81f8:	05fa0004 	.word	0x05fa0004

000081fc <hal_system_clock_start>:
        }
    }
#endif

    /* Check if this clock source is already running */
    if ((NRF_CLOCK->LFCLKSTAT & regmsk) != regval) {
    81fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8200:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    8204:	4b0f      	ldr	r3, [pc, #60]	; (8244 <hal_system_clock_start+0x48>)
    8206:	4013      	ands	r3, r2
    8208:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    820c:	d018      	beq.n	8240 <hal_system_clock_start+0x44>
        NRF_CLOCK->TASKS_LFCLKSTOP = 1;
    820e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8212:	2201      	movs	r2, #1
    8214:	60da      	str	r2, [r3, #12]
        NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    8216:	2100      	movs	r1, #0
    8218:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
        NRF_CLOCK->LFCLKSRC = clksrc;
    821c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
        NRF_CLOCK->TASKS_LFCLKSTART = 1;
    8220:	609a      	str	r2, [r3, #8]

        /* Wait here till started! */
        while (1) {
            if (NRF_CLOCK->EVENTS_LFCLKSTARTED) {
    8222:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8226:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    822a:	2b00      	cmp	r3, #0
    822c:	d0f9      	beq.n	8222 <hal_system_clock_start+0x26>
                if ((NRF_CLOCK->LFCLKSTAT & regmsk) == regval) {
    822e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8232:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    8236:	4b03      	ldr	r3, [pc, #12]	; (8244 <hal_system_clock_start+0x48>)
    8238:	4013      	ands	r3, r2
    823a:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    823e:	d1f0      	bne.n	8222 <hal_system_clock_start+0x26>
                }
            }
        }
    }
#endif
}
    8240:	4770      	bx	lr
    8242:	bf00      	nop
    8244:	00010003 	.word	0x00010003

00008248 <errata_16>:
}

#ifdef NRF52
static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8248:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    824c:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
    8250:	2b06      	cmp	r3, #6
    8252:	d001      	beq.n	8258 <errata_16+0x10>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8254:	2000      	movs	r0, #0
    8256:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8258:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    825c:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
    8260:	f013 0f0f 	tst.w	r3, #15
    8264:	d109      	bne.n	827a <errata_16+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8266:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    826a:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    826e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8272:	2b30      	cmp	r3, #48	; 0x30
    8274:	d003      	beq.n	827e <errata_16+0x36>
    return false;
    8276:	2000      	movs	r0, #0
    8278:	4770      	bx	lr
    827a:	2000      	movs	r0, #0
    827c:	4770      	bx	lr
            return true;
    827e:	2001      	movs	r0, #1
}
    8280:	4770      	bx	lr

00008282 <errata_31>:

static bool errata_31(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8282:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8286:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
    828a:	2b06      	cmp	r3, #6
    828c:	d001      	beq.n	8292 <errata_31+0x10>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    828e:	2000      	movs	r0, #0
    8290:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8292:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8296:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
    829a:	f013 0f0f 	tst.w	r3, #15
    829e:	d10d      	bne.n	82bc <errata_31+0x3a>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82a0:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    82a4:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    82a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82ac:	2b30      	cmp	r3, #48	; 0x30
    82ae:	d007      	beq.n	82c0 <errata_31+0x3e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    82b0:	2b40      	cmp	r3, #64	; 0x40
    82b2:	d007      	beq.n	82c4 <errata_31+0x42>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    82b4:	2b50      	cmp	r3, #80	; 0x50
    82b6:	d007      	beq.n	82c8 <errata_31+0x46>
    return false;
    82b8:	2000      	movs	r0, #0
    82ba:	4770      	bx	lr
    82bc:	2000      	movs	r0, #0
    82be:	4770      	bx	lr
            return true;
    82c0:	2001      	movs	r0, #1
    82c2:	4770      	bx	lr
            return true;
    82c4:	2001      	movs	r0, #1
    82c6:	4770      	bx	lr
            return true;
    82c8:	2001      	movs	r0, #1
}
    82ca:	4770      	bx	lr

000082cc <errata_32>:

static bool errata_32(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82cc:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    82d0:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
    82d4:	2b06      	cmp	r3, #6
    82d6:	d001      	beq.n	82dc <errata_32+0x10>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    82d8:	2000      	movs	r0, #0
    82da:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82dc:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    82e0:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
    82e4:	f013 0f0f 	tst.w	r3, #15
    82e8:	d109      	bne.n	82fe <errata_32+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82ea:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    82ee:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    82f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82f6:	2b30      	cmp	r3, #48	; 0x30
    82f8:	d003      	beq.n	8302 <errata_32+0x36>
    return false;
    82fa:	2000      	movs	r0, #0
    82fc:	4770      	bx	lr
    82fe:	2000      	movs	r0, #0
    8300:	4770      	bx	lr
            return true;
    8302:	2001      	movs	r0, #1
}
    8304:	4770      	bx	lr

00008306 <errata_36>:

static bool errata_36(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8306:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    830a:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
    830e:	2b06      	cmp	r3, #6
    8310:	d001      	beq.n	8316 <errata_36+0x10>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    8312:	2000      	movs	r0, #0
    8314:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8316:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    831a:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
    831e:	f013 0f0f 	tst.w	r3, #15
    8322:	d10d      	bne.n	8340 <errata_36+0x3a>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8324:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8328:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    832c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8330:	2b30      	cmp	r3, #48	; 0x30
    8332:	d007      	beq.n	8344 <errata_36+0x3e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    8334:	2b40      	cmp	r3, #64	; 0x40
    8336:	d007      	beq.n	8348 <errata_36+0x42>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    8338:	2b50      	cmp	r3, #80	; 0x50
    833a:	d007      	beq.n	834c <errata_36+0x46>
    return false;
    833c:	2000      	movs	r0, #0
    833e:	4770      	bx	lr
    8340:	2000      	movs	r0, #0
    8342:	4770      	bx	lr
            return true;
    8344:	2001      	movs	r0, #1
    8346:	4770      	bx	lr
            return true;
    8348:	2001      	movs	r0, #1
    834a:	4770      	bx	lr
            return true;
    834c:	2001      	movs	r0, #1
}
    834e:	4770      	bx	lr

00008350 <errata_37>:

static bool errata_37(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8350:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8354:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
    8358:	2b06      	cmp	r3, #6
    835a:	d001      	beq.n	8360 <errata_37+0x10>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    835c:	2000      	movs	r0, #0
    835e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8360:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8364:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
    8368:	f013 0f0f 	tst.w	r3, #15
    836c:	d109      	bne.n	8382 <errata_37+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    836e:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8372:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    8376:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    837a:	2b30      	cmp	r3, #48	; 0x30
    837c:	d003      	beq.n	8386 <errata_37+0x36>
    return false;
    837e:	2000      	movs	r0, #0
    8380:	4770      	bx	lr
    8382:	2000      	movs	r0, #0
    8384:	4770      	bx	lr
            return true;
    8386:	2001      	movs	r0, #1
}
    8388:	4770      	bx	lr

0000838a <errata_57>:

static bool errata_57(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    838a:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    838e:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
    8392:	2b06      	cmp	r3, #6
    8394:	d001      	beq.n	839a <errata_57+0x10>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8396:	2000      	movs	r0, #0
    8398:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    839a:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    839e:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
    83a2:	f013 0f0f 	tst.w	r3, #15
    83a6:	d109      	bne.n	83bc <errata_57+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    83a8:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    83ac:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    83b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83b4:	2b30      	cmp	r3, #48	; 0x30
    83b6:	d003      	beq.n	83c0 <errata_57+0x36>
    return false;
    83b8:	2000      	movs	r0, #0
    83ba:	4770      	bx	lr
    83bc:	2000      	movs	r0, #0
    83be:	4770      	bx	lr
            return true;
    83c0:	2001      	movs	r0, #1
}
    83c2:	4770      	bx	lr

000083c4 <errata_66>:

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83c4:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    83c8:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
    83cc:	2b06      	cmp	r3, #6
    83ce:	d001      	beq.n	83d4 <errata_66+0x10>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    83d0:	2000      	movs	r0, #0
    83d2:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83d4:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    83d8:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
    83dc:	f013 0f0f 	tst.w	r3, #15
    83e0:	d109      	bne.n	83f6 <errata_66+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    83e2:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    83e6:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    83ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83ee:	2b50      	cmp	r3, #80	; 0x50
    83f0:	d003      	beq.n	83fa <errata_66+0x36>
    return false;
    83f2:	2000      	movs	r0, #0
    83f4:	4770      	bx	lr
    83f6:	2000      	movs	r0, #0
    83f8:	4770      	bx	lr
            return true;
    83fa:	2001      	movs	r0, #1
}
    83fc:	4770      	bx	lr

000083fe <errata_108>:


static bool errata_108(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83fe:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8402:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
    8406:	2b06      	cmp	r3, #6
    8408:	d001      	beq.n	840e <errata_108+0x10>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    840a:	2000      	movs	r0, #0
    840c:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    840e:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8412:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
    8416:	f013 0f0f 	tst.w	r3, #15
    841a:	d10d      	bne.n	8438 <errata_108+0x3a>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    841c:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8420:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    8424:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8428:	2b30      	cmp	r3, #48	; 0x30
    842a:	d007      	beq.n	843c <errata_108+0x3e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    842c:	2b40      	cmp	r3, #64	; 0x40
    842e:	d007      	beq.n	8440 <errata_108+0x42>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    8430:	2b50      	cmp	r3, #80	; 0x50
    8432:	d007      	beq.n	8444 <errata_108+0x46>
    return false;
    8434:	2000      	movs	r0, #0
    8436:	4770      	bx	lr
    8438:	2000      	movs	r0, #0
    843a:	4770      	bx	lr
            return true;
    843c:	2001      	movs	r0, #1
    843e:	4770      	bx	lr
            return true;
    8440:	2001      	movs	r0, #1
    8442:	4770      	bx	lr
            return true;
    8444:	2001      	movs	r0, #1
}
    8446:	4770      	bx	lr

00008448 <SystemCoreClockUpdate>:
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    8448:	4b01      	ldr	r3, [pc, #4]	; (8450 <SystemCoreClockUpdate+0x8>)
    844a:	4a02      	ldr	r2, [pc, #8]	; (8454 <SystemCoreClockUpdate+0xc>)
    844c:	601a      	str	r2, [r3, #0]
}
    844e:	4770      	bx	lr
    8450:	2000053c 	.word	0x2000053c
    8454:	03d09000 	.word	0x03d09000

00008458 <SystemInit>:
{
    8458:	b508      	push	{r3, lr}
    if (errata_16()){
    845a:	f7ff fef5 	bl	8248 <errata_16>
    845e:	b110      	cbz	r0, 8466 <SystemInit+0xe>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    8460:	4b6c      	ldr	r3, [pc, #432]	; (8614 <SystemInit+0x1bc>)
    8462:	4a6d      	ldr	r2, [pc, #436]	; (8618 <SystemInit+0x1c0>)
    8464:	675a      	str	r2, [r3, #116]	; 0x74
    if (errata_31()){
    8466:	f7ff ff0c 	bl	8282 <errata_31>
    846a:	b148      	cbz	r0, 8480 <SystemInit+0x28>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    846c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    8470:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
    8474:	f3c3 3342 	ubfx	r3, r3, #13, #3
    8478:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    847c:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    if (errata_32()){
    8480:	f7ff ff24 	bl	82cc <errata_32>
    8484:	b130      	cbz	r0, 8494 <SystemInit+0x3c>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    8486:	4a65      	ldr	r2, [pc, #404]	; (861c <SystemInit+0x1c4>)
    8488:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    848c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    8490:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    if (errata_36()){
    8494:	f7ff ff37 	bl	8306 <errata_36>
    8498:	b140      	cbz	r0, 84ac <SystemInit+0x54>
        NRF_CLOCK->EVENTS_DONE = 0;
    849a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    849e:	2200      	movs	r2, #0
    84a0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    84a4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    84a8:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
    84ac:	f7ff ff50 	bl	8350 <errata_37>
    84b0:	b120      	cbz	r0, 84bc <SystemInit+0x64>
        *(volatile uint32_t *)0x400005A0 = 0x3;
    84b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    84b6:	2203      	movs	r2, #3
    84b8:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    if (errata_57()){
    84bc:	f7ff ff65 	bl	838a <errata_57>
    84c0:	b160      	cbz	r0, 84dc <SystemInit+0x84>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
    84c2:	4b57      	ldr	r3, [pc, #348]	; (8620 <SystemInit+0x1c8>)
    84c4:	2205      	movs	r2, #5
    84c6:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
        *(volatile uint32_t *)0x40005688 = 0x00000001;
    84ca:	2201      	movs	r2, #1
    84cc:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
        *(volatile uint32_t *)0x40005618 = 0x00000000;
    84d0:	2200      	movs	r2, #0
    84d2:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
    84d6:	223f      	movs	r2, #63	; 0x3f
    84d8:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
    if (errata_66()){
    84dc:	f7ff ff72 	bl	83c4 <errata_66>
    84e0:	2800      	cmp	r0, #0
    84e2:	d046      	beq.n	8572 <SystemInit+0x11a>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    84e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    84e8:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    84ec:	4b4d      	ldr	r3, [pc, #308]	; (8624 <SystemInit+0x1cc>)
    84ee:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    84f2:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    84f6:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    84fa:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    84fe:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    8502:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    8506:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    850a:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    850e:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    8512:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    8516:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    851a:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    851e:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    8522:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    8526:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    852a:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    852e:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    8532:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    8536:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    853a:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    853e:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    8542:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    8546:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    854a:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    854e:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    8552:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    8556:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    855a:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    855e:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    8562:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    8566:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    856a:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    856e:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
    8572:	f7ff ff44 	bl	83fe <errata_108>
    8576:	b148      	cbz	r0, 858c <SystemInit+0x134>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
    8578:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    857c:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    8580:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    8584:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    8588:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
    858c:	4a23      	ldr	r2, [pc, #140]	; (861c <SystemInit+0x1c4>)
    858e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    8592:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    8596:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    859a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    859e:	f3bf 8f6f 	isb	sy
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
    85a2:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    85a6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
    85aa:	f013 0f01 	tst.w	r3, #1
    85ae:	d104      	bne.n	85ba <SystemInit+0x162>
    SystemCoreClockUpdate();
    85b0:	f7ff ff4a 	bl	8448 <SystemCoreClockUpdate>
    NVIC_Relocate();
    85b4:	f000 fa7e 	bl	8ab4 <NVIC_Relocate>
}
    85b8:	bd08      	pop	{r3, pc}
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    85ba:	4b1b      	ldr	r3, [pc, #108]	; (8628 <SystemInit+0x1d0>)
    85bc:	2201      	movs	r2, #1
    85be:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    85c2:	4b19      	ldr	r3, [pc, #100]	; (8628 <SystemInit+0x1d0>)
    85c4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    85c8:	2b00      	cmp	r3, #0
    85ca:	d0fa      	beq.n	85c2 <SystemInit+0x16a>
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
    85cc:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    85d0:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
    85d4:	f023 0301 	bic.w	r3, r3, #1
    85d8:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    85dc:	4b12      	ldr	r3, [pc, #72]	; (8628 <SystemInit+0x1d0>)
    85de:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    85e2:	2b00      	cmp	r3, #0
    85e4:	d0fa      	beq.n	85dc <SystemInit+0x184>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    85e6:	4b10      	ldr	r3, [pc, #64]	; (8628 <SystemInit+0x1d0>)
    85e8:	2200      	movs	r2, #0
    85ea:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    85ee:	4b0e      	ldr	r3, [pc, #56]	; (8628 <SystemInit+0x1d0>)
    85f0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    85f4:	2b00      	cmp	r3, #0
    85f6:	d0fa      	beq.n	85ee <SystemInit+0x196>
  __ASM volatile ("dsb 0xF":::"memory");
    85f8:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    85fc:	4907      	ldr	r1, [pc, #28]	; (861c <SystemInit+0x1c4>)
    85fe:	68ca      	ldr	r2, [r1, #12]
    8600:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    8604:	4b09      	ldr	r3, [pc, #36]	; (862c <SystemInit+0x1d4>)
    8606:	4313      	orrs	r3, r2
    8608:	60cb      	str	r3, [r1, #12]
    860a:	f3bf 8f4f 	dsb	sy
    __NOP();
    860e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    8610:	e7fd      	b.n	860e <SystemInit+0x1b6>
    8612:	bf00      	nop
    8614:	4007c000 	.word	0x4007c000
    8618:	baadf00d 	.word	0xbaadf00d
    861c:	e000ed00 	.word	0xe000ed00
    8620:	40005000 	.word	0x40005000
    8624:	4000c000 	.word	0x4000c000
    8628:	4001e000 	.word	0x4001e000
    862c:	05fa0004 	.word	0x05fa0004

00008630 <_start>:

/*
 * Rudimentary startup function.
 */
void _start(void)
{
    8630:	b508      	push	{r3, lr}
    int rc;

    rc = main(0, NULL);
    exit(rc);
#else
    os_init(main);
    8632:	4803      	ldr	r0, [pc, #12]	; (8640 <_start+0x10>)
    8634:	f000 fe02 	bl	923c <os_init>
    os_start();
    8638:	f000 fe64 	bl	9304 <os_start>
#endif
}
    863c:	bd08      	pop	{r3, pc}
    863e:	bf00      	nop
    8640:	000088b1 	.word	0x000088b1

00008644 <_init>:

void
_init(void)
{
}
    8644:	4770      	bx	lr

00008646 <cir_complete_cb>:

static triadf_t g_angle = {0};
static bool
cir_complete_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
    if (inst->fctrl != FCNTL_IEEE_RANGE_16 &&
    8646:	f8b0 34e0 	ldrh.w	r3, [r0, #1248]	; 0x4e0
    864a:	f648 0241 	movw	r2, #34881	; 0x8841
    864e:	4293      	cmp	r3, r2
    8650:	d005      	beq.n	865e <cir_complete_cb+0x18>
    8652:	f648 0261 	movw	r2, #34913	; 0x8861
    8656:	4293      	cmp	r3, r2
    8658:	d103      	bne.n	8662 <cir_complete_cb+0x1c>
#endif
        frame->local.spherical.azimuth = uwb_calc_aoa(pd, inst->config.channel, ANTENNA_SEPERATION);
   }
#endif

    return true;
    865a:	2001      	movs	r0, #1
    865c:	4770      	bx	lr
    865e:	2001      	movs	r0, #1
    8660:	4770      	bx	lr
        return false;
    8662:	2000      	movs	r0, #0
}
    8664:	4770      	bx	lr
	...

00008668 <uwb_config_updated_func>:
 * Called from the main event queue as a result of the uwbcfg packet
 * having received a commit/load of new uwb configuration.
 */
int
uwb_config_updated_func()
{
    8668:	b510      	push	{r4, lr}
    /* Workaround in case we're stuck waiting for ccp with the
     * wrong radio settings */
    struct uwb_dev * udev = uwb_dev_idx_lookup(0);
    866a:	2000      	movs	r0, #0
    866c:	f000 fa44 	bl	8af8 <uwb_dev_idx_lookup>
    8670:	4604      	mov	r4, r0
    struct uwb_ccp_instance *ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_CCP);
    8672:	2101      	movs	r1, #1
    8674:	f000 fac5 	bl	8c02 <uwb_mac_find_cb_inst_ptr>
/**
 * Get current semaphore's count
 */
static inline uint16_t os_sem_get_count(struct os_sem *sem)
{
    return sem->sem_tokens;
    8678:	f8b0 30b6 	ldrh.w	r3, [r0, #182]	; 0xb6
    if (dpl_sem_get_count(&ccp->sem) == 0) {
    867c:	b123      	cbz	r3, 8688 <uwb_config_updated_func+0x20>
        }
        uwb_start_rx(udev);
        return 0;
    }

    uwb_config_updated = true;
    867e:	4b18      	ldr	r3, [pc, #96]	; (86e0 <uwb_config_updated_func+0x78>)
    8680:	2201      	movs	r2, #1
    8682:	701a      	strb	r2, [r3, #0]
    return 0;
}
    8684:	2000      	movs	r0, #0
    8686:	bd10      	pop	{r4, pc}
 * @return void
 */
UWB_API_IMPL_PREFIX void
uwb_phy_forcetrxoff(struct uwb_dev* dev)
{
    return (dev->uw_funcs->uf_phy_forcetrxoff(dev));
    8688:	6a63      	ldr	r3, [r4, #36]	; 0x24
    868a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    868e:	4620      	mov	r0, r4
    8690:	4798      	blx	r3
    return (dev->uw_funcs->uf_mac_config(dev, config));
    8692:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8694:	681b      	ldr	r3, [r3, #0]
    8696:	2100      	movs	r1, #0
    8698:	4620      	mov	r0, r4
    869a:	4798      	blx	r3
    return (dev->uw_funcs->uf_txrf_config(dev, config));
    869c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    869e:	685b      	ldr	r3, [r3, #4]
    86a0:	f204 5124 	addw	r1, r4, #1316	; 0x524
    86a4:	4620      	mov	r0, r4
    86a6:	4798      	blx	r3
        if (udev->config.rx.frameFilter) {
    86a8:	f8b4 351c 	ldrh.w	r3, [r4, #1308]	; 0x51c
    86ac:	b183      	cbz	r3, 86d0 <uwb_config_updated_func+0x68>
 * @return struct uwb_dev_status
 */
UWB_API_IMPL_PREFIX struct uwb_dev_status
uwb_set_autoack(struct uwb_dev * dev, bool enable)
{
    return (dev->uw_funcs->uf_set_autoack(dev, enable));
    86ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
    86b0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    86b4:	2101      	movs	r1, #1
    86b6:	4620      	mov	r0, r4
    86b8:	4798      	blx	r3
 * @return struct uwb_dev_status
 */
UWB_API_IMPL_PREFIX struct uwb_dev_status
uwb_set_autoack_delay(struct uwb_dev * dev, uint8_t delay)
{
    return (dev->uw_funcs->uf_set_autoack_delay(dev, delay));
    86ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
    86bc:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    86c0:	2100      	movs	r1, #0
    86c2:	4620      	mov	r0, r4
    86c4:	4798      	blx	r3
    return (dev->uw_funcs->uf_start_rx(dev));
    86c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    86c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    86ca:	4620      	mov	r0, r4
    86cc:	4798      	blx	r3
        return 0;
    86ce:	e7d9      	b.n	8684 <uwb_config_updated_func+0x1c>
    return (dev->uw_funcs->uf_set_autoack(dev, enable));
    86d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    86d2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    86d6:	2100      	movs	r1, #0
    86d8:	4620      	mov	r0, r4
    86da:	4798      	blx	r3
    86dc:	e7f3      	b.n	86c6 <uwb_config_updated_func+0x5e>
    86de:	bf00      	nop
    86e0:	20001466 	.word	0x20001466
    86e4:	00000000 	.word	0x00000000

000086e8 <slot_cb>:
 * returns none
 */

static void
slot_cb(struct dpl_event * ev)
{
    86e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    86ec:	b083      	sub	sp, #12
    static uint16_t timeout = 0;
    assert(ev);
    86ee:	2800      	cmp	r0, #0
    86f0:	d051      	beq.n	8796 <slot_cb+0xae>
}

static inline void *
dpl_event_get_arg(struct dpl_event *ev)
{
    return ev->ev.ev_arg;
    86f2:	6883      	ldr	r3, [r0, #8]

    tdma_slot_t * slot = (tdma_slot_t *) dpl_event_get_arg(ev);
    tdma_instance_t * tdma = slot->parent;
    86f4:	689d      	ldr	r5, [r3, #8]
    struct uwb_ccp_instance *ccp = tdma->ccp;
    86f6:	6869      	ldr	r1, [r5, #4]
    struct uwb_dev *inst = tdma->dev_inst;
    86f8:	682c      	ldr	r4, [r5, #0]
    uint16_t idx = slot->idx;
    86fa:	881e      	ldrh	r6, [r3, #0]
    struct uwb_rng_instance * rng = (struct uwb_rng_instance*)slot->arg;
    86fc:	6b5f      	ldr	r7, [r3, #52]	; 0x34
    g_angle.azimuth = g_angle.zenith = NAN;
    86fe:	4b40      	ldr	r3, [pc, #256]	; (8800 <slot_cb+0x118>)
    8700:	4a40      	ldr	r2, [pc, #256]	; (8804 <slot_cb+0x11c>)
    8702:	609a      	str	r2, [r3, #8]
    8704:	605a      	str	r2, [r3, #4]
    8706:	f8b1 30b6 	ldrh.w	r3, [r1, #182]	; 0xb6
    //printf("idx%d\n", idx);

    /* Avoid colliding with the ccp in case we've got out of sync */
    if (dpl_sem_get_count(&ccp->sem) == 0) {
    870a:	2b00      	cmp	r3, #0
    870c:	d040      	beq.n	8790 <slot_cb+0xa8>
        return;
    }

    if (uwb_config_updated) {
    870e:	4b3e      	ldr	r3, [pc, #248]	; (8808 <slot_cb+0x120>)
    8710:	781b      	ldrb	r3, [r3, #0]
    8712:	2b00      	cmp	r3, #0
    8714:	d145      	bne.n	87a2 <slot_cb+0xba>
        timeout = 0;
        return;
    }

    /* Only recalculate timeout if needed */
    if (!timeout) {
    8716:	4b3d      	ldr	r3, [pc, #244]	; (880c <slot_cb+0x124>)
    8718:	881b      	ldrh	r3, [r3, #0]
    871a:	bb43      	cbnz	r3, 876e <slot_cb+0x86>
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
    871c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    871e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    8720:	210b      	movs	r1, #11
    8722:	4620      	mov	r0, r4
    8724:	4798      	blx	r3
        timeout = uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst, sizeof(ieee_rng_request_frame_t)))
    8726:	f018 fd6f 	bl	21208 <__aeabi_i2d>
    872a:	a333      	add	r3, pc, #204	; (adr r3, 87f8 <slot_cb+0x110>)
    872c:	e9d3 2300 	ldrd	r2, r3, [r3]
    8730:	f018 fefe 	bl	21530 <__aeabi_ddiv>
    8734:	4680      	mov	r8, r0
    8736:	4689      	mov	r9, r1
            + rng->config.rx_timeout_delay;
    8738:	f8b7 006c 	ldrh.w	r0, [r7, #108]	; 0x6c
    873c:	f018 fd64 	bl	21208 <__aeabi_i2d>
    8740:	4642      	mov	r2, r8
    8742:	464b      	mov	r3, r9
    8744:	f018 fc14 	bl	20f70 <__adddf3>
        timeout = uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst, sizeof(ieee_rng_request_frame_t)))
    8748:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 880c <slot_cb+0x124>
    874c:	f019 f89e 	bl	2188c <__aeabi_d2uiz>
    8750:	f8a8 0000 	strh.w	r0, [r8]
    8754:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8756:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    8758:	210b      	movs	r1, #11
    875a:	4620      	mov	r0, r4
    875c:	4798      	blx	r3
    875e:	4601      	mov	r1, r0
        printf("# timeout set to: %d %d = %d\n",
    8760:	f8b8 3000 	ldrh.w	r3, [r8]
    8764:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
    8768:	4829      	ldr	r0, [pc, #164]	; (8810 <slot_cb+0x128>)
    876a:	f005 fd5d 	bl	e228 <printf>
    struct uwb_rng_instance * rng = (struct uwb_rng_instance*)uwb_mac_find_cb_inst_ptr(inst, UWBEXT_RNG);
    cir_enable(uwb_dev_idx_lookup(1)->cir, true);
    uwb_rng_listen_delay_start(rng, tdma_rx_slot_start(tdma, idx), timeout, UWB_BLOCKING);
}
#else
    uwb_rng_listen_delay_start(rng, tdma_rx_slot_start(tdma, idx), timeout, UWB_BLOCKING);
    876e:	ee07 6a90 	vmov	s15, r6
    8772:	eeb8 0a67 	vcvt.f32.u32	s0, s15
    8776:	4628      	mov	r0, r5
    8778:	f002 fceb 	bl	b152 <tdma_rx_slot_start>
    877c:	4602      	mov	r2, r0
    877e:	460b      	mov	r3, r1
    8780:	2100      	movs	r1, #0
    8782:	9101      	str	r1, [sp, #4]
    8784:	4921      	ldr	r1, [pc, #132]	; (880c <slot_cb+0x124>)
    8786:	8809      	ldrh	r1, [r1, #0]
    8788:	9100      	str	r1, [sp, #0]
    878a:	4638      	mov	r0, r7
    878c:	f004 f9f0 	bl	cb70 <uwb_rng_listen_delay_start>
#endif

}
    8790:	b003      	add	sp, #12
    8792:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    assert(ev);
    8796:	2300      	movs	r3, #0
    8798:	461a      	mov	r2, r3
    879a:	4619      	mov	r1, r3
    879c:	4618      	mov	r0, r3
    879e:	f000 fc55 	bl	904c <__assert_func>
    return (dev->uw_funcs->uf_mac_config(dev, config));
    87a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    87a4:	681b      	ldr	r3, [r3, #0]
    87a6:	2100      	movs	r1, #0
    87a8:	4620      	mov	r0, r4
    87aa:	4798      	blx	r3
    return (dev->uw_funcs->uf_txrf_config(dev, config));
    87ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
    87ae:	685b      	ldr	r3, [r3, #4]
    87b0:	f204 5124 	addw	r1, r4, #1316	; 0x524
    87b4:	4620      	mov	r0, r4
    87b6:	4798      	blx	r3
        uwb_config_updated = false;
    87b8:	4b13      	ldr	r3, [pc, #76]	; (8808 <slot_cb+0x120>)
    87ba:	2200      	movs	r2, #0
    87bc:	701a      	strb	r2, [r3, #0]
        if (inst->config.rx.frameFilter) {
    87be:	f8b4 351c 	ldrh.w	r3, [r4, #1308]	; 0x51c
    87c2:	b17b      	cbz	r3, 87e4 <slot_cb+0xfc>
    return (dev->uw_funcs->uf_set_autoack(dev, enable));
    87c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    87c6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    87ca:	2101      	movs	r1, #1
    87cc:	4620      	mov	r0, r4
    87ce:	4798      	blx	r3
    return (dev->uw_funcs->uf_set_autoack_delay(dev, delay));
    87d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    87d2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    87d6:	2100      	movs	r1, #0
    87d8:	4620      	mov	r0, r4
    87da:	4798      	blx	r3
        timeout = 0;
    87dc:	4b0b      	ldr	r3, [pc, #44]	; (880c <slot_cb+0x124>)
    87de:	2200      	movs	r2, #0
    87e0:	801a      	strh	r2, [r3, #0]
        return;
    87e2:	e7d5      	b.n	8790 <slot_cb+0xa8>
    return (dev->uw_funcs->uf_set_autoack(dev, enable));
    87e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    87e6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    87ea:	2100      	movs	r1, #0
    87ec:	4620      	mov	r0, r4
    87ee:	4798      	blx	r3
    87f0:	e7f4      	b.n	87dc <slot_cb+0xf4>
    87f2:	bf00      	nop
    87f4:	f3af 8000 	nop.w
    87f8:	90690691 	.word	0x90690691
    87fc:	3ff06906 	.word	0x3ff06906
    8800:	20001448 	.word	0x20001448
    8804:	7fc00000 	.word	0x7fc00000
    8808:	20001466 	.word	0x20001466
    880c:	20001464 	.word	0x20001464
    8810:	00022b58 	.word	0x00022b58

00008814 <slot_complete_cb>:
{
    8814:	b508      	push	{r3, lr}
    assert(ev != NULL);
    8816:	b118      	cbz	r0, 8820 <slot_complete_cb+0xc>
    hal_gpio_toggle(LED_BLINK_PIN);
    8818:	201f      	movs	r0, #31
    881a:	f000 fb8e 	bl	8f3a <hal_gpio_toggle>
}
    881e:	bd08      	pop	{r3, pc}
    assert(ev != NULL);
    8820:	2300      	movs	r3, #0
    8822:	461a      	mov	r2, r3
    8824:	4619      	mov	r1, r3
    8826:	4618      	mov	r0, r3
    8828:	f000 fc10 	bl	904c <__assert_func>

0000882c <complete_cb>:
{
    882c:	b538      	push	{r3, r4, r5, lr}
    882e:	4604      	mov	r4, r0
    if (inst->fctrl != FCNTL_IEEE_RANGE_16 &&
    8830:	f8b0 34e0 	ldrh.w	r3, [r0, #1248]	; 0x4e0
    8834:	f648 0241 	movw	r2, #34881	; 0x8841
    8838:	4293      	cmp	r3, r2
    883a:	d003      	beq.n	8844 <complete_cb+0x18>
    883c:	f648 0261 	movw	r2, #34913	; 0x8861
    8840:	4293      	cmp	r3, r2
    8842:	d12d      	bne.n	88a0 <complete_cb+0x74>
    struct uwb_rng_instance * rng = (struct uwb_rng_instance*)cbs->inst_ptr;
    8844:	684b      	ldr	r3, [r1, #4]
    twr_frame_t * frame = rng->frames[rng->idx_current];
    8846:	f8b3 2078 	ldrh.w	r2, [r3, #120]	; 0x78
    884a:	3226      	adds	r2, #38	; 0x26
    884c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    8850:	685d      	ldr	r5, [r3, #4]
    if (inst->capabilities.single_receiver_pdoa) {
    8852:	f894 34b2 	ldrb.w	r3, [r4, #1202]	; 0x4b2
    8856:	f013 0f02 	tst.w	r3, #2
    885a:	d00f      	beq.n	887c <complete_cb+0x50>
    return (dev->uw_funcs->uf_calc_pdoa(dev, diag));
    885c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    885e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    8862:	f8d4 14f8 	ldr.w	r1, [r4, #1272]	; 0x4f8
    8866:	4620      	mov	r0, r4
    8868:	4798      	blx	r3
        g_angle.azimuth = uwb_calc_aoa(
    886a:	eddf 0a0e 	vldr	s1, [pc, #56]	; 88a4 <complete_cb+0x78>
    886e:	f894 050c 	ldrb.w	r0, [r4, #1292]	; 0x50c
    8872:	f000 fa3d 	bl	8cf0 <uwb_calc_aoa>
    8876:	4b0c      	ldr	r3, [pc, #48]	; (88a8 <complete_cb+0x7c>)
    8878:	ed83 0a01 	vstr	s0, [r3, #4]
    frame->local.spherical.azimuth = g_angle.azimuth;
    887c:	4c0a      	ldr	r4, [pc, #40]	; (88a8 <complete_cb+0x7c>)
    887e:	6860      	ldr	r0, [r4, #4]
    8880:	f018 fcd4 	bl	2122c <__aeabi_f2d>
    8884:	e9c5 0124 	strd	r0, r1, [r5, #144]	; 0x90
    frame->local.spherical.zenith = g_angle.zenith;
    8888:	68a0      	ldr	r0, [r4, #8]
    888a:	f018 fccf 	bl	2122c <__aeabi_f2d>
    888e:	e9c5 0126 	strd	r0, r1, [r5, #152]	; 0x98
    return (struct dpl_eventq *) os_eventq_dflt_get();
    8892:	f000 ffbd 	bl	9810 <os_eventq_dflt_get>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    8896:	4905      	ldr	r1, [pc, #20]	; (88ac <complete_cb+0x80>)
    8898:	f000 ff0c 	bl	96b4 <os_eventq_put>
    return true;
    889c:	2001      	movs	r0, #1
}
    889e:	bd38      	pop	{r3, r4, r5, pc}
        return false;
    88a0:	2000      	movs	r0, #0
    88a2:	e7fc      	b.n	889e <complete_cb+0x72>
    88a4:	3ca7ef9e 	.word	0x3ca7ef9e
    88a8:	20001448 	.word	0x20001448
    88ac:	20001454 	.word	0x20001454

000088b0 <main>:



int main(int argc, char **argv){
    88b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    88b2:	b093      	sub	sp, #76	; 0x4c
    int rc;

    sysinit();
    88b4:	f008 fda4 	bl	11400 <sysinit_start>
    88b8:	f009 fd4e 	bl	12358 <sysinit_app>
    88bc:	f008 fda6 	bl	1140c <sysinit_end>
    /* Register callback for UWB configuration changes */
    struct uwbcfg_cbs uwb_cb = {
    88c0:	2400      	movs	r4, #0
    88c2:	9410      	str	r4, [sp, #64]	; 0x40
    88c4:	9411      	str	r4, [sp, #68]	; 0x44
    88c6:	4b6a      	ldr	r3, [pc, #424]	; (8a70 <main+0x1c0>)
    88c8:	9311      	str	r3, [sp, #68]	; 0x44
        .uc_update = uwb_config_updated_func
    };
    uwbcfg_register(&uwb_cb);
    88ca:	a810      	add	r0, sp, #64	; 0x40
    88cc:	f008 ff44 	bl	11758 <uwbcfg_register>
    /* Load config from flash */
    conf_load();
    88d0:	f005 ffb4 	bl	e83c <conf_load>

    hal_gpio_init_out(LED_BLINK_PIN, 1);
    88d4:	2101      	movs	r1, #1
    88d6:	201f      	movs	r0, #31
    88d8:	f000 fae8 	bl	8eac <hal_gpio_init_out>
    hal_gpio_init_out(LED_1, 1);
    88dc:	2101      	movs	r1, #1
    88de:	201e      	movs	r0, #30
    88e0:	f000 fae4 	bl	8eac <hal_gpio_init_out>
    hal_gpio_init_out(LED_3, 1);
    88e4:	2101      	movs	r1, #1
    88e6:	2016      	movs	r0, #22
    88e8:	f000 fae0 	bl	8eac <hal_gpio_init_out>
    dw1000_dev_instance_t * inst = hal_dw1000_inst(1);
    dw1000_set_dblrxbuff(inst, false);
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_RNG);
    assert(rng);
#elif  MYNEWT_VAL(UWB_DEVICE_0) && !MYNEWT_VAL(UWB_DEVICE_1)
    struct uwb_dev * udev = uwb_dev_idx_lookup(0);
    88ec:	4620      	mov	r0, r4
    88ee:	f000 f903 	bl	8af8 <uwb_dev_idx_lookup>
    88f2:	4607      	mov	r7, r0
    return (dev->uw_funcs->uf_set_dblrxbuf(dev, enable));
    88f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
    88f6:	6a1b      	ldr	r3, [r3, #32]
    88f8:	4621      	mov	r1, r4
    88fa:	4798      	blx	r3
    uwb_set_dblrxbuff(udev, false);
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_RNG);
    88fc:	2104      	movs	r1, #4
    88fe:	4638      	mov	r0, r7
    8900:	f000 f97f 	bl	8c02 <uwb_mac_find_cb_inst_ptr>
    assert(rng);
    8904:	2800      	cmp	r0, #0
    8906:	f000 8083 	beq.w	8a10 <main+0x160>
    890a:	4605      	mov	r5, r0
#endif


    struct uwb_mac_interface cbs = (struct uwb_mac_interface){
    890c:	223c      	movs	r2, #60	; 0x3c
    890e:	2100      	movs	r1, #0
    8910:	a801      	add	r0, sp, #4
    8912:	f005 f876 	bl	da02 <memset>
    8916:	f44f 6380 	mov.w	r3, #1024	; 0x400
    891a:	f8ad 3006 	strh.w	r3, [sp, #6]
    891e:	9502      	str	r5, [sp, #8]
    8920:	4b54      	ldr	r3, [pc, #336]	; (8a74 <main+0x1c4>)
    8922:	9306      	str	r3, [sp, #24]
    8924:	4b54      	ldr	r3, [pc, #336]	; (8a78 <main+0x1c8>)
    8926:	930c      	str	r3, [sp, #48]	; 0x30
        .id =  UWBEXT_APP0,
        .inst_ptr = rng,
        .complete_cb = complete_cb,
        .cir_complete_cb = cir_complete_cb
    };
    uwb_mac_append_interface(udev, &cbs);
    8928:	a901      	add	r1, sp, #4
    892a:	4638      	mov	r0, r7
    892c:	f000 f914 	bl	8b58 <uwb_mac_append_interface>

    struct uwb_ccp_instance *ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_CCP);
    8930:	2101      	movs	r1, #1
    8932:	4638      	mov	r0, r7
    8934:	f000 f965 	bl	8c02 <uwb_mac_find_cb_inst_ptr>
    assert(ccp);
    8938:	2800      	cmp	r0, #0
    893a:	d06f      	beq.n	8a1c <main+0x16c>

    if (udev->role & UWB_ROLE_CCP_MASTER) {
    893c:	f8b7 24b4 	ldrh.w	r2, [r7, #1204]	; 0x4b4
    8940:	f012 0f01 	tst.w	r2, #1
    8944:	d070      	beq.n	8a28 <main+0x178>
        /* Start as clock-master */
        uwb_ccp_start(ccp, CCP_ROLE_MASTER);
    8946:	2100      	movs	r1, #0
    8948:	f003 fa9d 	bl	be86 <uwb_ccp_start>
    if (uwb_sync_to_ext_clock(udev).ext_sync == 1) {
        printf("{\"ext_sync\"=\"%d\"}\n", udev->status.ext_sync);
    }
#endif

    uint32_t utime = os_cputime_ticks_to_usecs(os_cputime_get32());
    894c:	f000 fdd9 	bl	9502 <os_cputime_get32>
    8950:	4604      	mov	r4, r0
    printf("{\"utime\": %lu,\"exec\": \"%s\"}\n",utime,__FILE__);
    8952:	4a4a      	ldr	r2, [pc, #296]	; (8a7c <main+0x1cc>)
    8954:	4601      	mov	r1, r0
    8956:	484a      	ldr	r0, [pc, #296]	; (8a80 <main+0x1d0>)
    8958:	f005 fc66 	bl	e228 <printf>
    printf("{\"device_id\"=\"%lX\"",udev->device_id);
    895c:	f8d7 14c8 	ldr.w	r1, [r7, #1224]	; 0x4c8
    8960:	4848      	ldr	r0, [pc, #288]	; (8a84 <main+0x1d4>)
    8962:	f005 fc61 	bl	e228 <printf>
    printf(",\"role=\"%X\"",udev->role);
    8966:	f8b7 14b4 	ldrh.w	r1, [r7, #1204]	; 0x4b4
    896a:	4847      	ldr	r0, [pc, #284]	; (8a88 <main+0x1d8>)
    896c:	f005 fc5c 	bl	e228 <printf>
    printf(",\"panid=\"%X\"",udev->pan_id);
    8970:	f8b7 14c0 	ldrh.w	r1, [r7, #1216]	; 0x4c0
    8974:	4845      	ldr	r0, [pc, #276]	; (8a8c <main+0x1dc>)
    8976:	f005 fc57 	bl	e228 <printf>
    printf(",\"addr\"=\"%X\"",udev->uid);
    897a:	f8b7 14b6 	ldrh.w	r1, [r7, #1206]	; 0x4b6
    897e:	4844      	ldr	r0, [pc, #272]	; (8a90 <main+0x1e0>)
    8980:	f005 fc52 	bl	e228 <printf>
    printf(",\"part_id\"=\"%lX\"",(uint32_t)(udev->euid&0xffffffff));
    8984:	f8d7 14b8 	ldr.w	r1, [r7, #1208]	; 0x4b8
    8988:	4842      	ldr	r0, [pc, #264]	; (8a94 <main+0x1e4>)
    898a:	f005 fc4d 	bl	e228 <printf>
    printf(",\"lot_id\"=\"%lX\"}\n",(uint32_t)(udev->euid>>32));
    898e:	f8d7 14bc 	ldr.w	r1, [r7, #1212]	; 0x4bc
    8992:	4841      	ldr	r0, [pc, #260]	; (8a98 <main+0x1e8>)
    8994:	f005 fc48 	bl	e228 <printf>
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
    8998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    899a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    899c:	211f      	movs	r1, #31
    899e:	4638      	mov	r0, r7
    89a0:	4798      	blx	r3
    89a2:	4602      	mov	r2, r0
    printf("{\"utime\": %lu,\"msg\": \"frame_duration = %d usec\"}\n",utime,uwb_phy_frame_duration(udev, sizeof(twr_frame_final_t)));
    89a4:	4621      	mov	r1, r4
    89a6:	483d      	ldr	r0, [pc, #244]	; (8a9c <main+0x1ec>)
    89a8:	f005 fc3e 	bl	e228 <printf>
    return (dev->uw_funcs->uf_phy_SHR_duration(dev));
    89ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    89ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    89b2:	4638      	mov	r0, r7
    89b4:	4798      	blx	r3
    89b6:	4602      	mov	r2, r0
    printf("{\"utime\": %lu,\"msg\": \"SHR_duration = %d usec\"}\n",utime,uwb_phy_SHR_duration(udev));
    89b8:	4621      	mov	r1, r4
    89ba:	4839      	ldr	r0, [pc, #228]	; (8aa0 <main+0x1f0>)
    89bc:	f005 fc34 	bl	e228 <printf>
    printf("{\"utime\": %lu,\"msg\": \"holdoff = %d usec\"}\n",utime,(uint16_t)ceilf(uwb_dwt_usecs_to_usecs(rng->config.tx_holdoff_delay)));
    89c0:	6e68      	ldr	r0, [r5, #100]	; 0x64
    89c2:	f018 fc11 	bl	211e8 <__aeabi_ui2d>
    89c6:	a328      	add	r3, pc, #160	; (adr r3, 8a68 <main+0x1b8>)
    89c8:	e9d3 2300 	ldrd	r2, r3, [r3]
    89cc:	f018 fc86 	bl	212dc <__aeabi_dmul>
    89d0:	f018 ff7c 	bl	218cc <__aeabi_d2f>
    89d4:	ee00 0a10 	vmov	s0, r0
    89d8:	f019 f9fa 	bl	21dd0 <ceilf>
    89dc:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    89e0:	ee17 3a90 	vmov	r3, s15
    89e4:	b29a      	uxth	r2, r3
    89e6:	4621      	mov	r1, r4
    89e8:	482e      	ldr	r0, [pc, #184]	; (8aa4 <main+0x1f4>)
    89ea:	f005 fc1d 	bl	e228 <printf>

    tdma_instance_t * tdma = (tdma_instance_t*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_TDMA);
    89ee:	2103      	movs	r1, #3
    89f0:	4638      	mov	r0, r7
    89f2:	f000 f906 	bl	8c02 <uwb_mac_find_cb_inst_ptr>
    assert(tdma);
    89f6:	4606      	mov	r6, r0
    89f8:	b1d0      	cbz	r0, 8a30 <main+0x180>
    memset(ev, 0, sizeof(*ev));
    89fa:	4b2b      	ldr	r3, [pc, #172]	; (8aa8 <main+0x1f8>)
    89fc:	2200      	movs	r2, #0
    89fe:	601a      	str	r2, [r3, #0]
    8a00:	605a      	str	r2, [r3, #4]
    8a02:	609a      	str	r2, [r3, #8]
    8a04:	60da      	str	r2, [r3, #12]
    ev->ev.ev_cb = (os_event_fn *)fn;
    8a06:	4a29      	ldr	r2, [pc, #164]	; (8aac <main+0x1fc>)
    8a08:	605a      	str	r2, [r3, #4]
    ev->ev.ev_arg = arg;
    8a0a:	609d      	str	r5, [r3, #8]
    ble_init(udev->euid);
#endif
    dpl_event_init(&slot_event, slot_complete_cb, rng);

    /* Slot 0:ccp, 1+ twr */
    for (uint16_t i = 1; i < MYNEWT_VAL(TDMA_NSLOTS); i++)
    8a0c:	2401      	movs	r4, #1
    8a0e:	e01d      	b.n	8a4c <main+0x19c>
    assert(rng);
    8a10:	4623      	mov	r3, r4
    8a12:	4622      	mov	r2, r4
    8a14:	4621      	mov	r1, r4
    8a16:	4620      	mov	r0, r4
    8a18:	f000 fb18 	bl	904c <__assert_func>
    assert(ccp);
    8a1c:	2300      	movs	r3, #0
    8a1e:	461a      	mov	r2, r3
    8a20:	4619      	mov	r1, r3
    8a22:	4618      	mov	r0, r3
    8a24:	f000 fb12 	bl	904c <__assert_func>
        uwb_ccp_start(ccp, CCP_ROLE_SLAVE);
    8a28:	2101      	movs	r1, #1
    8a2a:	f003 fa2c 	bl	be86 <uwb_ccp_start>
    8a2e:	e78d      	b.n	894c <main+0x9c>
    assert(tdma);
    8a30:	2300      	movs	r3, #0
    8a32:	461a      	mov	r2, r3
    8a34:	4619      	mov	r1, r3
    8a36:	4618      	mov	r0, r3
    8a38:	f000 fb08 	bl	904c <__assert_func>
        tdma_assign_slot(tdma, slot_cb,  i, (void*)rng);
    8a3c:	462b      	mov	r3, r5
    8a3e:	4622      	mov	r2, r4
    8a40:	491b      	ldr	r1, [pc, #108]	; (8ab0 <main+0x200>)
    8a42:	4630      	mov	r0, r6
    8a44:	f002 fae2 	bl	b00c <tdma_assign_slot>
    for (uint16_t i = 1; i < MYNEWT_VAL(TDMA_NSLOTS); i++)
    8a48:	3401      	adds	r4, #1
    8a4a:	b2a4      	uxth	r4, r4
    8a4c:	2c9f      	cmp	r4, #159	; 0x9f
    8a4e:	d9f5      	bls.n	8a3c <main+0x18c>

#if MYNEWT_VAL(RNG_VERBOSE) > 1
    udev->config.rxdiag_enable = 1;
    8a50:	f897 352c 	ldrb.w	r3, [r7, #1324]	; 0x52c
    8a54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8a58:	f887 352c 	strb.w	r3, [r7, #1324]	; 0x52c
    return (struct dpl_eventq *) os_eventq_dflt_get();
    8a5c:	f000 fed8 	bl	9810 <os_eventq_dflt_get>
    os_eventq_run((struct os_eventq * )evq);
    8a60:	f000 fea8 	bl	97b4 <os_eventq_run>
    8a64:	e7fa      	b.n	8a5c <main+0x1ac>
    8a66:	bf00      	nop
    8a68:	90690691 	.word	0x90690691
    8a6c:	3ff06906 	.word	0x3ff06906
    8a70:	00008669 	.word	0x00008669
    8a74:	00008647 	.word	0x00008647
    8a78:	0000882d 	.word	0x0000882d
    8a7c:	00022b78 	.word	0x00022b78
    8a80:	00022b98 	.word	0x00022b98
    8a84:	00022bb8 	.word	0x00022bb8
    8a88:	00022bcc 	.word	0x00022bcc
    8a8c:	00022bd8 	.word	0x00022bd8
    8a90:	00022be8 	.word	0x00022be8
    8a94:	00022bf8 	.word	0x00022bf8
    8a98:	00022c0c 	.word	0x00022c0c
    8a9c:	00022c20 	.word	0x00022c20
    8aa0:	00022c54 	.word	0x00022c54
    8aa4:	00022c84 	.word	0x00022c84
    8aa8:	20001454 	.word	0x20001454
    8aac:	00008815 	.word	0x00008815
    8ab0:	000086e9 	.word	0x000086e9

00008ab4 <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
    8ab4:	4a09      	ldr	r2, [pc, #36]	; (8adc <NVIC_Relocate+0x28>)
    8ab6:	4b0a      	ldr	r3, [pc, #40]	; (8ae0 <NVIC_Relocate+0x2c>)
    8ab8:	429a      	cmp	r2, r3
    8aba:	d00a      	beq.n	8ad2 <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
    8abc:	2300      	movs	r3, #0
    8abe:	e006      	b.n	8ace <NVIC_Relocate+0x1a>
            new_location[i] = current_location[i];
    8ac0:	4a07      	ldr	r2, [pc, #28]	; (8ae0 <NVIC_Relocate+0x2c>)
    8ac2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    8ac6:	4a05      	ldr	r2, [pc, #20]	; (8adc <NVIC_Relocate+0x28>)
    8ac8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
    8acc:	3301      	adds	r3, #1
    8ace:	2b35      	cmp	r3, #53	; 0x35
    8ad0:	ddf6      	ble.n	8ac0 <NVIC_Relocate+0xc>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
    8ad2:	4a02      	ldr	r2, [pc, #8]	; (8adc <NVIC_Relocate+0x28>)
    8ad4:	4b03      	ldr	r3, [pc, #12]	; (8ae4 <NVIC_Relocate+0x30>)
    8ad6:	609a      	str	r2, [r3, #8]
#endif
}
    8ad8:	4770      	bx	lr
    8ada:	bf00      	nop
    8adc:	20000000 	.word	0x20000000
    8ae0:	00008020 	.word	0x00008020
    8ae4:	e000ed00 	.word	0xe000ed00

00008ae8 <uwb_interrupt_task>:
 * @param arg  Pointer to the queue of interrupts.
 * @return void
 */
static void *
uwb_interrupt_task(void *arg)
{
    8ae8:	b510      	push	{r4, lr}
    8aea:	4604      	mov	r4, r0
    8aec:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    8af0:	f000 fe60 	bl	97b4 <os_eventq_run>
    8af4:	e7fa      	b.n	8aec <uwb_interrupt_task+0x4>
	...

00008af8 <uwb_dev_idx_lookup>:
{
    8af8:	b510      	push	{r4, lr}
    8afa:	b08a      	sub	sp, #40	; 0x28
    8afc:	4604      	mov	r4, r0
    const char base1k[] = "dw1000_%d";
    8afe:	4b14      	ldr	r3, [pc, #80]	; (8b50 <uwb_dev_idx_lookup+0x58>)
    8b00:	f10d 0c1c 	add.w	ip, sp, #28
    8b04:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    8b08:	e8ac 0003 	stmia.w	ip!, {r0, r1}
    8b0c:	f8ac 2000 	strh.w	r2, [ip]
    const char base3k[] = "dw3000_%d";
    8b10:	4b10      	ldr	r3, [pc, #64]	; (8b54 <uwb_dev_idx_lookup+0x5c>)
    8b12:	f10d 0c10 	add.w	ip, sp, #16
    8b16:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    8b1a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
    8b1e:	f8ac 2000 	strh.w	r2, [ip]
    snprintf(buf, sizeof buf, base1k, idx);
    8b22:	4623      	mov	r3, r4
    8b24:	aa07      	add	r2, sp, #28
    8b26:	210c      	movs	r1, #12
    8b28:	a801      	add	r0, sp, #4
    8b2a:	f005 fbac 	bl	e286 <snprintf>
    odev = os_dev_lookup(buf);
    8b2e:	a801      	add	r0, sp, #4
    8b30:	f000 fd88 	bl	9644 <os_dev_lookup>
    if (!odev) {
    8b34:	b108      	cbz	r0, 8b3a <uwb_dev_idx_lookup+0x42>
}
    8b36:	b00a      	add	sp, #40	; 0x28
    8b38:	bd10      	pop	{r4, pc}
        snprintf(buf, sizeof buf, base3k, idx);
    8b3a:	4623      	mov	r3, r4
    8b3c:	aa04      	add	r2, sp, #16
    8b3e:	210c      	movs	r1, #12
    8b40:	a801      	add	r0, sp, #4
    8b42:	f005 fba0 	bl	e286 <snprintf>
        odev = os_dev_lookup(buf);
    8b46:	a801      	add	r0, sp, #4
    8b48:	f000 fd7c 	bl	9644 <os_dev_lookup>
    return (struct uwb_dev*)odev;
    8b4c:	e7f3      	b.n	8b36 <uwb_dev_idx_lookup+0x3e>
    8b4e:	bf00      	nop
    8b50:	00022cb0 	.word	0x00022cb0
    8b54:	00022cbc 	.word	0x00022cbc

00008b58 <uwb_mac_append_interface>:
{
    8b58:	b508      	push	{r3, lr}
    assert(dev);
    8b5a:	b148      	cbz	r0, 8b70 <uwb_mac_append_interface+0x18>
    assert(cbs);
    8b5c:	b171      	cbz	r1, 8b7c <uwb_mac_append_interface+0x24>
    cbs->status.initialized = true;
    8b5e:	780b      	ldrb	r3, [r1, #0]
    8b60:	f043 0301 	orr.w	r3, r3, #1
    8b64:	700b      	strb	r3, [r1, #0]
    if(!(SLIST_EMPTY(&dev->interface_cbs))) {
    8b66:	f8d0 3530 	ldr.w	r3, [r0, #1328]	; 0x530
    8b6a:	b1b3      	cbz	r3, 8b9a <uwb_mac_append_interface+0x42>
        struct uwb_mac_interface * prev_cbs = NULL;
    8b6c:	2200      	movs	r2, #0
    8b6e:	e00d      	b.n	8b8c <uwb_mac_append_interface+0x34>
    assert(dev);
    8b70:	2300      	movs	r3, #0
    8b72:	461a      	mov	r2, r3
    8b74:	4619      	mov	r1, r3
    8b76:	4618      	mov	r0, r3
    8b78:	f000 fa68 	bl	904c <__assert_func>
    assert(cbs);
    8b7c:	2300      	movs	r3, #0
    8b7e:	461a      	mov	r2, r3
    8b80:	4619      	mov	r1, r3
    8b82:	4618      	mov	r0, r3
    8b84:	f000 fa62 	bl	904c <__assert_func>
            prev_cbs = cur_cbs;
    8b88:	461a      	mov	r2, r3
        SLIST_FOREACH(cur_cbs, &dev->interface_cbs, next){
    8b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    8b8c:	2b00      	cmp	r3, #0
    8b8e:	d1fb      	bne.n	8b88 <uwb_mac_append_interface+0x30>
        SLIST_INSERT_AFTER(prev_cbs, cbs, next);
    8b90:	6b93      	ldr	r3, [r2, #56]	; 0x38
    8b92:	638b      	str	r3, [r1, #56]	; 0x38
    8b94:	6391      	str	r1, [r2, #56]	; 0x38
}
    8b96:	4608      	mov	r0, r1
    8b98:	bd08      	pop	{r3, pc}
        SLIST_INSERT_HEAD(&dev->interface_cbs, cbs, next);
    8b9a:	638b      	str	r3, [r1, #56]	; 0x38
    8b9c:	f8c0 1530 	str.w	r1, [r0, #1328]	; 0x530
    8ba0:	e7f9      	b.n	8b96 <uwb_mac_append_interface+0x3e>

00008ba2 <uwb_mac_remove_interface>:
{
    8ba2:	b508      	push	{r3, lr}
    assert(dev);
    8ba4:	b148      	cbz	r0, 8bba <uwb_mac_remove_interface+0x18>
    8ba6:	4684      	mov	ip, r0
    SLIST_FOREACH(cbs, &dev->interface_cbs, next){
    8ba8:	f8d0 0530 	ldr.w	r0, [r0, #1328]	; 0x530
    8bac:	4603      	mov	r3, r0
    8bae:	b193      	cbz	r3, 8bd6 <uwb_mac_remove_interface+0x34>
        if(cbs->id == id){
    8bb0:	885a      	ldrh	r2, [r3, #2]
    8bb2:	428a      	cmp	r2, r1
    8bb4:	d007      	beq.n	8bc6 <uwb_mac_remove_interface+0x24>
    SLIST_FOREACH(cbs, &dev->interface_cbs, next){
    8bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    8bb8:	e7f9      	b.n	8bae <uwb_mac_remove_interface+0xc>
    assert(dev);
    8bba:	2300      	movs	r3, #0
    8bbc:	461a      	mov	r2, r3
    8bbe:	4619      	mov	r1, r3
    8bc0:	4618      	mov	r0, r3
    8bc2:	f000 fa43 	bl	904c <__assert_func>
            SLIST_REMOVE(&dev->interface_cbs, cbs, uwb_mac_interface, next);
    8bc6:	4283      	cmp	r3, r0
    8bc8:	d006      	beq.n	8bd8 <uwb_mac_remove_interface+0x36>
    8bca:	4602      	mov	r2, r0
    8bcc:	6b80      	ldr	r0, [r0, #56]	; 0x38
    8bce:	4298      	cmp	r0, r3
    8bd0:	d1fb      	bne.n	8bca <uwb_mac_remove_interface+0x28>
    8bd2:	6b83      	ldr	r3, [r0, #56]	; 0x38
    8bd4:	6393      	str	r3, [r2, #56]	; 0x38
}
    8bd6:	bd08      	pop	{r3, pc}
            SLIST_REMOVE(&dev->interface_cbs, cbs, uwb_mac_interface, next);
    8bd8:	6b83      	ldr	r3, [r0, #56]	; 0x38
    8bda:	f8cc 3530 	str.w	r3, [ip, #1328]	; 0x530
    8bde:	e7fa      	b.n	8bd6 <uwb_mac_remove_interface+0x34>

00008be0 <uwb_mac_get_interface>:
{
    8be0:	b508      	push	{r3, lr}
    assert(dev);
    8be2:	b138      	cbz	r0, 8bf4 <uwb_mac_get_interface+0x14>
    SLIST_FOREACH(cbs, &dev->interface_cbs, next){
    8be4:	f8d0 0530 	ldr.w	r0, [r0, #1328]	; 0x530
    8be8:	b150      	cbz	r0, 8c00 <uwb_mac_get_interface+0x20>
        if(cbs->id == id){
    8bea:	8843      	ldrh	r3, [r0, #2]
    8bec:	428b      	cmp	r3, r1
    8bee:	d007      	beq.n	8c00 <uwb_mac_get_interface+0x20>
    SLIST_FOREACH(cbs, &dev->interface_cbs, next){
    8bf0:	6b80      	ldr	r0, [r0, #56]	; 0x38
    8bf2:	e7f9      	b.n	8be8 <uwb_mac_get_interface+0x8>
    assert(dev);
    8bf4:	2300      	movs	r3, #0
    8bf6:	461a      	mov	r2, r3
    8bf8:	4619      	mov	r1, r3
    8bfa:	4618      	mov	r0, r3
    8bfc:	f000 fa26 	bl	904c <__assert_func>
}
    8c00:	bd08      	pop	{r3, pc}

00008c02 <uwb_mac_find_cb_inst_ptr>:
{
    8c02:	b508      	push	{r3, lr}
    struct uwb_mac_interface * cbs = uwb_mac_get_interface(dev, id);
    8c04:	f7ff ffec 	bl	8be0 <uwb_mac_get_interface>
    if (cbs) {
    8c08:	4603      	mov	r3, r0
    8c0a:	b100      	cbz	r0, 8c0e <uwb_mac_find_cb_inst_ptr+0xc>
        return cbs->inst_ptr;
    8c0c:	6843      	ldr	r3, [r0, #4]
}
    8c0e:	4618      	mov	r0, r3
    8c10:	bd08      	pop	{r3, pc}
	...

00008c14 <uwb_task_init>:
 *
 * @return void
 */
void
uwb_task_init(struct uwb_dev * inst, void (*irq_ev_cb)(struct dpl_event*))
{
    8c14:	b570      	push	{r4, r5, r6, lr}
    8c16:	b084      	sub	sp, #16
    8c18:	4604      	mov	r4, r0
    8c1a:	460d      	mov	r5, r1
    int rc;
    /* Check if the task is already initiated */
    if (!dpl_eventq_inited(&inst->eventq))
    8c1c:	f100 063c 	add.w	r6, r0, #60	; 0x3c
    return os_eventq_inited((struct os_eventq *) evq);
    8c20:	4630      	mov	r0, r6
    8c22:	f000 fd42 	bl	96aa <os_eventq_inited>
    8c26:	b108      	cbz	r0, 8c2c <uwb_task_init+0x18>
                      inst->task_prio, DPL_WAIT_FOREVER,
                      inst->task_stack,
                      MYNEWT_VAL(UWB_DEV_TASK_STACK_SZ));
#endif
    }
}
    8c28:	b004      	add	sp, #16
    8c2a:	bd70      	pop	{r4, r5, r6, pc}
    os_eventq_init((struct os_eventq *) evq);
    8c2c:	4630      	mov	r0, r6
    8c2e:	f000 fd33 	bl	9698 <os_eventq_init>
    memset(ev, 0, sizeof(*ev));
    8c32:	2300      	movs	r3, #0
    8c34:	64e3      	str	r3, [r4, #76]	; 0x4c
    8c36:	6523      	str	r3, [r4, #80]	; 0x50
    8c38:	6563      	str	r3, [r4, #84]	; 0x54
    8c3a:	65a3      	str	r3, [r4, #88]	; 0x58
    ev->ev.ev_cb = (os_event_fn *)fn;
    8c3c:	6525      	str	r5, [r4, #80]	; 0x50
    ev->ev.ev_arg = arg;
    8c3e:	6564      	str	r4, [r4, #84]	; 0x54
}

static inline dpl_error_t
dpl_sem_init(struct dpl_sem *sem, uint16_t tokens)
{
    return (dpl_error_t)os_sem_init(&sem->sem, tokens);
    8c40:	2101      	movs	r1, #1
    8c42:	f104 0034 	add.w	r0, r4, #52	; 0x34
    8c46:	f001 f919 	bl	9e7c <os_sem_init>
        assert(rc == DPL_OK);
    8c4a:	b998      	cbnz	r0, 8c74 <uwb_task_init+0x60>
        dpl_task_init(&inst->task_str, "uwb_irq",
    8c4c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
                      inst->task_stack,
    8c50:	f104 02b0 	add.w	r2, r4, #176	; 0xb0
static inline int dpl_task_init(struct dpl_task *t, const char *name, dpl_task_func_t func,
		 void *arg, uint8_t prio, dpl_time_t sanity_itvl,
		 os_stack_t * stack_bottom, uint16_t stack_size)
{

    return os_task_init((struct os_task *) t, name, (os_task_func_t) func,
    8c54:	f44f 7180 	mov.w	r1, #256	; 0x100
    8c58:	9103      	str	r1, [sp, #12]
    8c5a:	9202      	str	r2, [sp, #8]
    8c5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8c60:	9201      	str	r2, [sp, #4]
    8c62:	9300      	str	r3, [sp, #0]
    8c64:	4623      	mov	r3, r4
    8c66:	4a06      	ldr	r2, [pc, #24]	; (8c80 <uwb_task_init+0x6c>)
    8c68:	4906      	ldr	r1, [pc, #24]	; (8c84 <uwb_task_init+0x70>)
    8c6a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    8c6e:	f001 f9a5 	bl	9fbc <os_task_init>
}
    8c72:	e7d9      	b.n	8c28 <uwb_task_init+0x14>
        assert(rc == DPL_OK);
    8c74:	2300      	movs	r3, #0
    8c76:	461a      	mov	r2, r3
    8c78:	4619      	mov	r1, r3
    8c7a:	4618      	mov	r0, r3
    8c7c:	f000 f9e6 	bl	904c <__assert_func>
    8c80:	00008ae9 	.word	0x00008ae9
    8c84:	00022cc8 	.word	0x00022cc8

00008c88 <uwb_task_deinit>:

void
uwb_task_deinit(struct uwb_dev * inst)
{
    8c88:	b510      	push	{r4, lr}
    8c8a:	4604      	mov	r4, r0
    return os_eventq_inited((struct os_eventq *) evq);
    8c8c:	303c      	adds	r0, #60	; 0x3c
    8c8e:	f000 fd0c 	bl	96aa <os_eventq_inited>
    if (dpl_eventq_inited(&inst->eventq))
    8c92:	b900      	cbnz	r0, 8c96 <uwb_task_deinit+0xe>
    {
        dpl_task_remove(&inst->task_str);
        dpl_eventq_deinit(&inst->eventq);
    }
}
    8c94:	bd10      	pop	{r4, pc}
        (os_stack_t *) stack_bottom, stack_size) ;
}

static inline int dpl_task_remove(struct dpl_task * t)
{
    return os_task_remove((struct os_task * ) t);
    8c96:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    8c9a:	f001 f9fb 	bl	a094 <os_task_remove>
    8c9e:	e7f9      	b.n	8c94 <uwb_task_deinit+0xc>

00008ca0 <uwb_dev_init>:

void
uwb_dev_init(struct uwb_dev * inst)
{
    8ca0:	b510      	push	{r4, lr}
    8ca2:	4604      	mov	r4, r0
    if (!inst->txbuf) {
    8ca4:	f8d0 3500 	ldr.w	r3, [r0, #1280]	; 0x500
    8ca8:	b11b      	cbz	r3, 8cb2 <uwb_dev_init+0x12>
#else
        inst->txbuf = malloc(inst->txbuf_size);
        assert(inst->txbuf);
#endif
    }
    if (!inst->rxbuf) {
    8caa:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
    8cae:	b173      	cbz	r3, 8cce <uwb_dev_init+0x2e>
#else
        inst->rxbuf = malloc(inst->rxbuf_size);
        assert(inst->rxbuf);
#endif
    }
}
    8cb0:	bd10      	pop	{r4, pc}
        inst->txbuf = malloc(inst->txbuf_size);
    8cb2:	f8b0 0506 	ldrh.w	r0, [r0, #1286]	; 0x506
    8cb6:	f004 fe27 	bl	d908 <malloc>
    8cba:	f8c4 0500 	str.w	r0, [r4, #1280]	; 0x500
        assert(inst->txbuf);
    8cbe:	2800      	cmp	r0, #0
    8cc0:	d1f3      	bne.n	8caa <uwb_dev_init+0xa>
    8cc2:	2300      	movs	r3, #0
    8cc4:	461a      	mov	r2, r3
    8cc6:	4619      	mov	r1, r3
    8cc8:	4618      	mov	r0, r3
    8cca:	f000 f9bf 	bl	904c <__assert_func>
        inst->rxbuf = malloc(inst->rxbuf_size);
    8cce:	f8b4 0504 	ldrh.w	r0, [r4, #1284]	; 0x504
    8cd2:	f004 fe19 	bl	d908 <malloc>
    8cd6:	f8c4 04fc 	str.w	r0, [r4, #1276]	; 0x4fc
        assert(inst->rxbuf);
    8cda:	2800      	cmp	r0, #0
    8cdc:	d1e8      	bne.n	8cb0 <uwb_dev_init+0x10>
    8cde:	2300      	movs	r3, #0
    8ce0:	461a      	mov	r2, r3
    8ce2:	4619      	mov	r1, r3
    8ce4:	4618      	mov	r0, r3
    8ce6:	f000 f9b1 	bl	904c <__assert_func>
    8cea:	0000      	movs	r0, r0
    8cec:	0000      	movs	r0, r0
	...

00008cf0 <uwb_calc_aoa>:
 *
 * returns angle of arrival - float, in radians
 */
dpl_float32_t
uwb_calc_aoa(dpl_float32_t pdoa, int channel, dpl_float32_t antenna_separation)
{
    8cf0:	b508      	push	{r3, lr}
    8cf2:	ed2d 8b02 	vpush	{d8}
    8cf6:	ee10 3a10 	vmov	r3, s0
    8cfa:	eeb0 8a60 	vmov.f32	s16, s1
    dpl_float32_t pd_dist, wavelength;
    dpl_float32_t frequency = DPL_FLOAT32_INIT(0);
    switch(channel) {
    8cfe:	3801      	subs	r0, #1
    8d00:	2808      	cmp	r0, #8
    8d02:	d839      	bhi.n	8d78 <uwb_calc_aoa+0x88>
    8d04:	e8df f000 	tbb	[pc, r0]
    8d08:	2c05413e 	.word	0x2c05413e
    8d0c:	3832382f 	.word	0x3832382f
    8d10:	35          	.byte	0x35
    8d11:	00          	.byte	0x00
    case (1): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_1);break;
    case (2): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_2);break;
    case (3): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_3);break;
    8d12:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8d98 <uwb_calc_aoa+0xa8>
    case (5): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_5);break;
    case (7): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_7);break;
    case (9): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_9);break;
    default: assert(0); break;
    }
    wavelength = DPL_FLOAT32_DIV(DPL_FLOAT32_INIT(SPEED_OF_LIGHT), frequency);
    8d16:	eddf 7a21 	vldr	s15, [pc, #132]	; 8d9c <uwb_calc_aoa+0xac>
    8d1a:	eec7 8a87 	vdiv.f32	s17, s15, s14
    pd_dist = DPL_FLOAT32_DIV(pdoa, DPL_FLOAT32_INIT(2.0f*M_PI));
    8d1e:	4618      	mov	r0, r3
    8d20:	f018 fa84 	bl	2122c <__aeabi_f2d>
    8d24:	a31a      	add	r3, pc, #104	; (adr r3, 8d90 <uwb_calc_aoa+0xa0>)
    8d26:	e9d3 2300 	ldrd	r2, r3, [r3]
    8d2a:	f018 fc01 	bl	21530 <__aeabi_ddiv>
    8d2e:	f018 fdcd 	bl	218cc <__aeabi_d2f>
    8d32:	ee07 0a90 	vmov	s15, r0
    pd_dist = DPL_FLOAT32_MUL(pd_dist, wavelength);
    8d36:	ee68 8aa7 	vmul.f32	s17, s17, s15
    return DPL_FLOAT32_FROM_F64(
    8d3a:	eec8 7a88 	vdiv.f32	s15, s17, s16
    8d3e:	ee17 0a90 	vmov	r0, s15
    8d42:	f018 fa73 	bl	2122c <__aeabi_f2d>
    8d46:	ec41 0b10 	vmov	d0, r0, r1
    8d4a:	f019 f887 	bl	21e5c <asin>
    8d4e:	ec51 0b10 	vmov	r0, r1, d0
    8d52:	f018 fdbb 	bl	218cc <__aeabi_d2f>
        DPL_FLOAT64_ASIN(DPL_FLOAT64_FROM_F32(
                         DPL_FLOAT32_DIV(pd_dist, antenna_separation)
                         )
            )
        );
}
    8d56:	ee00 0a10 	vmov	s0, r0
    8d5a:	ecbd 8b02 	vpop	{d8}
    8d5e:	bd08      	pop	{r3, pc}
    case (4): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_4);break;
    8d60:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8d98 <uwb_calc_aoa+0xa8>
    8d64:	e7d7      	b.n	8d16 <uwb_calc_aoa+0x26>
    case (5): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_5);break;
    8d66:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8da0 <uwb_calc_aoa+0xb0>
    8d6a:	e7d4      	b.n	8d16 <uwb_calc_aoa+0x26>
    case (7): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_7);break;
    8d6c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8da0 <uwb_calc_aoa+0xb0>
    8d70:	e7d1      	b.n	8d16 <uwb_calc_aoa+0x26>
    case (9): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_9);break;
    8d72:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8da4 <uwb_calc_aoa+0xb4>
    8d76:	e7ce      	b.n	8d16 <uwb_calc_aoa+0x26>
    default: assert(0); break;
    8d78:	2300      	movs	r3, #0
    8d7a:	461a      	mov	r2, r3
    8d7c:	4619      	mov	r1, r3
    8d7e:	4618      	mov	r0, r3
    8d80:	f000 f964 	bl	904c <__assert_func>
    switch(channel) {
    8d84:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8da8 <uwb_calc_aoa+0xb8>
    8d88:	e7c5      	b.n	8d16 <uwb_calc_aoa+0x26>
    case (2): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_2);break;
    8d8a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8dac <uwb_calc_aoa+0xbc>
    8d8e:	e7c2      	b.n	8d16 <uwb_calc_aoa+0x26>
    8d90:	54442d18 	.word	0x54442d18
    8d94:	401921fb 	.word	0x401921fb
    8d98:	4f85e558 	.word	0x4f85e558
    8d9c:	4d8ef3c2 	.word	0x4d8ef3c2
    8da0:	4fc167b8 	.word	0x4fc167b8
    8da4:	4fee0980 	.word	0x4fee0980
    8da8:	4f504850 	.word	0x4f504850
    8dac:	4f6e0980 	.word	0x4f6e0980

00008db0 <hal_gpio_irq_handler>:
 *
 * @param index
 */
static void
hal_gpio_irq_handler(void)
{
    8db0:	b510      	push	{r4, lr}
#if NRF52840_XXAA
    gpio_state |= (uint64_t)NRF_P1->IN << 32;
#endif
#endif

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
    8db2:	2400      	movs	r4, #0
    8db4:	e000      	b.n	8db8 <hal_gpio_irq_handler+0x8>
    8db6:	3401      	adds	r4, #1
    8db8:	2c07      	cmp	r4, #7
    8dba:	dc1c      	bgt.n	8df6 <hal_gpio_irq_handler+0x46>
        if ((hal_gpio_irqs[i].sense_trig == HAL_GPIO_SENSE_TRIG_BOTH) ||
            (hal_gpio_irqs[i].sense_trig == sense_trig)) {
            hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
        }
#else
        if (NRF_GPIOTE->EVENTS_IN[i] && (NRF_GPIOTE->INTENSET & (1 << i))) {
    8dbc:	f104 0340 	add.w	r3, r4, #64	; 0x40
    8dc0:	4a0d      	ldr	r2, [pc, #52]	; (8df8 <hal_gpio_irq_handler+0x48>)
    8dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8dc6:	2b00      	cmp	r3, #0
    8dc8:	d0f5      	beq.n	8db6 <hal_gpio_irq_handler+0x6>
    8dca:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    8dce:	2301      	movs	r3, #1
    8dd0:	40a3      	lsls	r3, r4
    8dd2:	421a      	tst	r2, r3
    8dd4:	d0ef      	beq.n	8db6 <hal_gpio_irq_handler+0x6>
            NRF_GPIOTE->EVENTS_IN[i] = 0;
    8dd6:	f104 0340 	add.w	r3, r4, #64	; 0x40
    8dda:	4a07      	ldr	r2, [pc, #28]	; (8df8 <hal_gpio_irq_handler+0x48>)
    8ddc:	2100      	movs	r1, #0
    8dde:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            if (hal_gpio_irqs[i].func) {
    8de2:	4b06      	ldr	r3, [pc, #24]	; (8dfc <hal_gpio_irq_handler+0x4c>)
    8de4:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
    8de8:	2a00      	cmp	r2, #0
    8dea:	d0e4      	beq.n	8db6 <hal_gpio_irq_handler+0x6>
                hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
    8dec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    8df0:	6858      	ldr	r0, [r3, #4]
    8df2:	4790      	blx	r2
    8df4:	e7df      	b.n	8db6 <hal_gpio_irq_handler+0x6>
        }
#endif
    }

    os_trace_isr_exit();
}
    8df6:	bd10      	pop	{r4, pc}
    8df8:	40006000 	.word	0x40006000
    8dfc:	20001468 	.word	0x20001468

00008e00 <hal_gpio_irq_setup>:
static void
hal_gpio_irq_setup(void)
{
    static uint8_t irq_setup = 0;

    if (!irq_setup) {
    8e00:	4b06      	ldr	r3, [pc, #24]	; (8e1c <hal_gpio_irq_setup+0x1c>)
    8e02:	781b      	ldrb	r3, [r3, #0]
    8e04:	b94b      	cbnz	r3, 8e1a <hal_gpio_irq_setup+0x1a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
    8e06:	4b06      	ldr	r3, [pc, #24]	; (8e20 <hal_gpio_irq_setup+0x20>)
    8e08:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    8e0a:	4a06      	ldr	r2, [pc, #24]	; (8e24 <hal_gpio_irq_setup+0x24>)
    8e0c:	659a      	str	r2, [r3, #88]	; 0x58
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8e0e:	4b06      	ldr	r3, [pc, #24]	; (8e28 <hal_gpio_irq_setup+0x28>)
    8e10:	2240      	movs	r2, #64	; 0x40
    8e12:	601a      	str	r2, [r3, #0]
        NVIC_SetVector(GPIOTE_IRQn, (uint32_t)hal_gpio_irq_handler);
        NVIC_EnableIRQ(GPIOTE_IRQn);
        irq_setup = 1;
    8e14:	4b01      	ldr	r3, [pc, #4]	; (8e1c <hal_gpio_irq_setup+0x1c>)
    8e16:	2201      	movs	r2, #1
    8e18:	701a      	strb	r2, [r3, #0]
#if MYNEWT_VAL(MCU_GPIO_USE_PORT_EVENT)
        NRF_GPIOTE->INTENCLR = GPIOTE_INTENCLR_PORT_Msk;
        NRF_GPIOTE->EVENTS_PORT = 0;
#endif
    }
}
    8e1a:	4770      	bx	lr
    8e1c:	200014a8 	.word	0x200014a8
    8e20:	e000ed00 	.word	0xe000ed00
    8e24:	00008db1 	.word	0x00008db1
    8e28:	e000e100 	.word	0xe000e100

00008e2c <hal_gpio_find_empty_slot>:
static int
hal_gpio_find_empty_slot(void)
{
    int i;

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
    8e2c:	2000      	movs	r0, #0
    8e2e:	2807      	cmp	r0, #7
    8e30:	dc05      	bgt.n	8e3e <hal_gpio_find_empty_slot+0x12>
        if (hal_gpio_irqs[i].func == NULL) {
    8e32:	4b04      	ldr	r3, [pc, #16]	; (8e44 <hal_gpio_find_empty_slot+0x18>)
    8e34:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    8e38:	b11b      	cbz	r3, 8e42 <hal_gpio_find_empty_slot+0x16>
    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
    8e3a:	3001      	adds	r0, #1
    8e3c:	e7f7      	b.n	8e2e <hal_gpio_find_empty_slot+0x2>
            return i;
        }
    }
    return -1;
    8e3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    8e42:	4770      	bx	lr
    8e44:	20001468 	.word	0x20001468

00008e48 <hal_gpio_find_pin>:
        if (hal_gpio_irqs[i].func && hal_gpio_irqs[i].pin == pin) {
            return i;
        }
    }
#else
    pin = pin << GPIOTE_CONFIG_PSEL_Pos;
    8e48:	0201      	lsls	r1, r0, #8

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
    8e4a:	2000      	movs	r0, #0
    8e4c:	e000      	b.n	8e50 <hal_gpio_find_pin+0x8>
    8e4e:	3001      	adds	r0, #1
    8e50:	2807      	cmp	r0, #7
    8e52:	dc0e      	bgt.n	8e72 <hal_gpio_find_pin+0x2a>
        if (hal_gpio_irqs[i].func &&
    8e54:	4b08      	ldr	r3, [pc, #32]	; (8e78 <hal_gpio_find_pin+0x30>)
    8e56:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    8e5a:	2b00      	cmp	r3, #0
    8e5c:	d0f7      	beq.n	8e4e <hal_gpio_find_pin+0x6>
           (NRF_GPIOTE->CONFIG[i] & HAL_GPIOTE_PIN_MASK) == pin) {
    8e5e:	f500 73a2 	add.w	r3, r0, #324	; 0x144
    8e62:	4a06      	ldr	r2, [pc, #24]	; (8e7c <hal_gpio_find_pin+0x34>)
    8e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e68:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
        if (hal_gpio_irqs[i].func &&
    8e6c:	428b      	cmp	r3, r1
    8e6e:	d1ee      	bne.n	8e4e <hal_gpio_find_pin+0x6>
    8e70:	e001      	b.n	8e76 <hal_gpio_find_pin+0x2e>
            return i;
        }
    }
#endif

    return -1;
    8e72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    8e76:	4770      	bx	lr
    8e78:	20001468 	.word	0x20001468
    8e7c:	40006000 	.word	0x40006000

00008e80 <hal_gpio_init_in>:
    switch (pull) {
    8e80:	2901      	cmp	r1, #1
    8e82:	d00f      	beq.n	8ea4 <hal_gpio_init_in+0x24>
    8e84:	2902      	cmp	r1, #2
    8e86:	d10f      	bne.n	8ea8 <hal_gpio_init_in+0x28>
        conf = GPIO_PIN_CNF_PULL_Pulldown << GPIO_PIN_CNF_PULL_Pos;
    8e88:	2304      	movs	r3, #4
    port->PIN_CNF[pin_index] = conf;
    8e8a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    8e8e:	f500 71e0 	add.w	r1, r0, #448	; 0x1c0
    8e92:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    port->DIRCLR = HAL_GPIO_MASK(pin);
    8e96:	2301      	movs	r3, #1
    8e98:	fa03 f000 	lsl.w	r0, r3, r0
    8e9c:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
}
    8ea0:	2000      	movs	r0, #0
    8ea2:	4770      	bx	lr
    switch (pull) {
    8ea4:	230c      	movs	r3, #12
    8ea6:	e7f0      	b.n	8e8a <hal_gpio_init_in+0xa>
        conf = 0;
    8ea8:	2300      	movs	r3, #0
    8eaa:	e7ee      	b.n	8e8a <hal_gpio_init_in+0xa>

00008eac <hal_gpio_init_out>:
    if (val) {
    8eac:	b199      	cbz	r1, 8ed6 <hal_gpio_init_out+0x2a>
        port->OUTSET = HAL_GPIO_MASK(pin);
    8eae:	2301      	movs	r3, #1
    8eb0:	4083      	lsls	r3, r0
    8eb2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    8eb6:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    port->PIN_CNF[pin_index] = GPIO_PIN_CNF_DIR_Output |
    8eba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    8ebe:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
    8ec2:	2103      	movs	r1, #3
    8ec4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    port->DIRSET = HAL_GPIO_MASK(pin);
    8ec8:	2301      	movs	r3, #1
    8eca:	fa03 f000 	lsl.w	r0, r3, r0
    8ece:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518
}
    8ed2:	2000      	movs	r0, #0
    8ed4:	4770      	bx	lr
        port->OUTCLR = HAL_GPIO_MASK(pin);
    8ed6:	2301      	movs	r3, #1
    8ed8:	4083      	lsls	r3, r0
    8eda:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    8ede:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    8ee2:	e7ea      	b.n	8eba <hal_gpio_init_out+0xe>

00008ee4 <hal_gpio_write>:
    if (val) {
    8ee4:	b139      	cbz	r1, 8ef6 <hal_gpio_write+0x12>
        port->OUTSET = HAL_GPIO_MASK(pin);
    8ee6:	2301      	movs	r3, #1
    8ee8:	fa03 f000 	lsl.w	r0, r3, r0
    8eec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    8ef0:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    8ef4:	4770      	bx	lr
        port->OUTCLR = HAL_GPIO_MASK(pin);
    8ef6:	2301      	movs	r3, #1
    8ef8:	fa03 f000 	lsl.w	r0, r3, r0
    8efc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    8f00:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
    8f04:	4770      	bx	lr

00008f06 <hal_gpio_read>:
    return (port->DIR & HAL_GPIO_MASK(pin)) ?
    8f06:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    8f0a:	f8d3 2514 	ldr.w	r2, [r3, #1300]	; 0x514
    8f0e:	2301      	movs	r3, #1
    8f10:	4083      	lsls	r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
    8f12:	421a      	tst	r2, r3
    8f14:	d008      	beq.n	8f28 <hal_gpio_read+0x22>
    8f16:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    8f1a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    8f1e:	fa23 f000 	lsr.w	r0, r3, r0
    8f22:	f000 0001 	and.w	r0, r0, #1
    8f26:	4770      	bx	lr
        (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
    8f28:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    8f2c:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    8f30:	fa23 f000 	lsr.w	r0, r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
    8f34:	f000 0001 	and.w	r0, r0, #1
}
    8f38:	4770      	bx	lr

00008f3a <hal_gpio_toggle>:
{
    8f3a:	b538      	push	{r3, r4, r5, lr}
    8f3c:	4605      	mov	r5, r0
    int pin_state = (hal_gpio_read(pin) == 0);
    8f3e:	f7ff ffe2 	bl	8f06 <hal_gpio_read>
    8f42:	fab0 f480 	clz	r4, r0
    8f46:	0964      	lsrs	r4, r4, #5
    hal_gpio_write(pin, pin_state);
    8f48:	4621      	mov	r1, r4
    8f4a:	4628      	mov	r0, r5
    8f4c:	f7ff ffca 	bl	8ee4 <hal_gpio_write>
}
    8f50:	4620      	mov	r0, r4
    8f52:	bd38      	pop	{r3, r4, r5, pc}

00008f54 <hal_gpio_irq_init>:
 * @return int
 */
int
hal_gpio_irq_init(int pin, hal_gpio_irq_handler_t handler, void *arg,
                  hal_gpio_irq_trig_t trig, hal_gpio_pull_t pull)
{
    8f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8f58:	4606      	mov	r6, r0
    8f5a:	4688      	mov	r8, r1
    8f5c:	4617      	mov	r7, r2
    8f5e:	461d      	mov	r5, r3
    uint32_t conf;
    int i;

    hal_gpio_irq_setup();
    8f60:	f7ff ff4e 	bl	8e00 <hal_gpio_irq_setup>
    i = hal_gpio_find_empty_slot();
    8f64:	f7ff ff62 	bl	8e2c <hal_gpio_find_empty_slot>
    if (i < 0) {
    8f68:	1e04      	subs	r4, r0, #0
    8f6a:	db27      	blt.n	8fbc <hal_gpio_irq_init+0x68>
        return -1;
    }
    hal_gpio_init_in(pin, pull);
    8f6c:	f89d 1018 	ldrb.w	r1, [sp, #24]
    8f70:	4630      	mov	r0, r6
    8f72:	f7ff ff85 	bl	8e80 <hal_gpio_init_in>
    default:
        hal_gpio_irqs[i].sense_trig = HAL_GPIO_SENSE_TRIG_NONE;
        return -1;
    }
#else
    switch (trig) {
    8f76:	2d02      	cmp	r5, #2
    8f78:	d01a      	beq.n	8fb0 <hal_gpio_irq_init+0x5c>
    8f7a:	2d03      	cmp	r5, #3
    8f7c:	d01b      	beq.n	8fb6 <hal_gpio_irq_init+0x62>
    8f7e:	2d01      	cmp	r5, #1
    8f80:	d002      	beq.n	8f88 <hal_gpio_irq_init+0x34>
    8f82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8f86:	e011      	b.n	8fac <hal_gpio_irq_init+0x58>
    8f88:	f44f 3080 	mov.w	r0, #65536	; 0x10000
        break;
    default:
        return -1;
    }

    conf |= pin << GPIOTE_CONFIG_PSEL_Pos;
    8f8c:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
    conf |= GPIOTE_CONFIG_MODE_Event << GPIOTE_CONFIG_MODE_Pos;
    8f90:	f040 0001 	orr.w	r0, r0, #1

    NRF_GPIOTE->CONFIG[i] = conf;
    8f94:	f504 72a2 	add.w	r2, r4, #324	; 0x144
    8f98:	4b0a      	ldr	r3, [pc, #40]	; (8fc4 <hal_gpio_irq_init+0x70>)
    8f9a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
#endif

    hal_gpio_irqs[i].func = handler;
    8f9e:	480a      	ldr	r0, [pc, #40]	; (8fc8 <hal_gpio_irq_init+0x74>)
    8fa0:	f840 8034 	str.w	r8, [r0, r4, lsl #3]
    hal_gpio_irqs[i].arg = arg;
    8fa4:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
    8fa8:	6047      	str	r7, [r0, #4]

    return 0;
    8faa:	2000      	movs	r0, #0
}
    8fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        conf = GPIOTE_CONFIG_POLARITY_HiToLo << GPIOTE_CONFIG_POLARITY_Pos;
    8fb0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    8fb4:	e7ea      	b.n	8f8c <hal_gpio_irq_init+0x38>
        conf = GPIOTE_CONFIG_POLARITY_Toggle << GPIOTE_CONFIG_POLARITY_Pos;
    8fb6:	f44f 3040 	mov.w	r0, #196608	; 0x30000
    8fba:	e7e7      	b.n	8f8c <hal_gpio_irq_init+0x38>
        return -1;
    8fbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8fc0:	e7f4      	b.n	8fac <hal_gpio_irq_init+0x58>
    8fc2:	bf00      	nop
    8fc4:	40006000 	.word	0x40006000
    8fc8:	20001468 	.word	0x20001468

00008fcc <hal_gpio_irq_enable>:
 *
 * @param pin
 */
void
hal_gpio_irq_enable(int pin)
{
    8fcc:	b508      	push	{r3, lr}
    NRF_GPIO_Type *nrf_gpio;
    int pin_index;
#endif
    int i;

    i = hal_gpio_find_pin(pin);
    8fce:	f7ff ff3b 	bl	8e48 <hal_gpio_find_pin>
    if (i < 0) {
    8fd2:	2800      	cmp	r0, #0
    8fd4:	db0a      	blt.n	8fec <hal_gpio_irq_enable+0x20>
        nrf_gpio->PIN_CNF[pin_index] |= GPIO_PIN_CNF_SENSE_High << GPIO_PIN_CNF_SENSE_Pos;
    }

    NRF_GPIOTE->INTENSET = GPIOTE_INTENSET_PORT_Msk;
#else
    NRF_GPIOTE->EVENTS_IN[i] = 0;
    8fd6:	4a06      	ldr	r2, [pc, #24]	; (8ff0 <hal_gpio_irq_enable+0x24>)
    8fd8:	f100 0340 	add.w	r3, r0, #64	; 0x40
    8fdc:	2100      	movs	r1, #0
    8fde:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    NRF_GPIOTE->INTENSET = 1 << i;
    8fe2:	2301      	movs	r3, #1
    8fe4:	fa03 f000 	lsl.w	r0, r3, r0
    8fe8:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
#endif
}
    8fec:	bd08      	pop	{r3, pc}
    8fee:	bf00      	nop
    8ff0:	40006000 	.word	0x40006000

00008ff4 <hal_gpio_irq_disable>:
 *
 * @param pin
 */
void
hal_gpio_irq_disable(int pin)
{
    8ff4:	b508      	push	{r3, lr}
    int pin_index;
    bool sense_enabled = false;
#endif
    int i;

    i = hal_gpio_find_pin(pin);
    8ff6:	f7ff ff27 	bl	8e48 <hal_gpio_find_pin>
    if (i < 0) {
    8ffa:	2800      	cmp	r0, #0
    8ffc:	db05      	blt.n	900a <hal_gpio_irq_disable+0x16>

    if (!sense_enabled) {
        NRF_GPIOTE->INTENCLR = GPIOTE_INTENCLR_PORT_Msk;
    }
#else
    NRF_GPIOTE->INTENCLR = 1 << i;
    8ffe:	2301      	movs	r3, #1
    9000:	fa03 f000 	lsl.w	r0, r3, r0
    9004:	4b01      	ldr	r3, [pc, #4]	; (900c <hal_gpio_irq_disable+0x18>)
    9006:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
#endif
}
    900a:	bd08      	pop	{r3, pc}
    900c:	40006000 	.word	0x40006000

00009010 <hal_gpio_irq_release>:
{
    9010:	b538      	push	{r3, r4, r5, lr}
    9012:	4605      	mov	r5, r0
    i = hal_gpio_find_pin(pin);
    9014:	f7ff ff18 	bl	8e48 <hal_gpio_find_pin>
    if (i < 0) {
    9018:	1e04      	subs	r4, r0, #0
    901a:	db12      	blt.n	9042 <hal_gpio_irq_release+0x32>
    hal_gpio_irq_disable(pin);
    901c:	4628      	mov	r0, r5
    901e:	f7ff ffe9 	bl	8ff4 <hal_gpio_irq_disable>
    NRF_GPIOTE->CONFIG[i] = 0;
    9022:	4a08      	ldr	r2, [pc, #32]	; (9044 <hal_gpio_irq_release+0x34>)
    9024:	f504 71a2 	add.w	r1, r4, #324	; 0x144
    9028:	2300      	movs	r3, #0
    902a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    NRF_GPIOTE->EVENTS_IN[i] = 0;
    902e:	f104 0140 	add.w	r1, r4, #64	; 0x40
    9032:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    hal_gpio_irqs[i].arg = NULL;
    9036:	4a04      	ldr	r2, [pc, #16]	; (9048 <hal_gpio_irq_release+0x38>)
    9038:	eb02 01c4 	add.w	r1, r2, r4, lsl #3
    903c:	604b      	str	r3, [r1, #4]
    hal_gpio_irqs[i].func = NULL;
    903e:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
}
    9042:	bd38      	pop	{r3, r4, r5, pc}
    9044:	40006000 	.word	0x40006000
    9048:	20001468 	.word	0x20001468

0000904c <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
    904c:	b508      	push	{r3, lr}
    904e:	4675      	mov	r5, lr
    9050:	4604      	mov	r4, r0
    9052:	460e      	mov	r6, r1
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
    9054:	f001 fa12 	bl	a47c <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
    9058:	f006 fab6 	bl	f5c8 <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
    905c:	b18c      	cbz	r4, 9082 <__assert_func+0x36>
    905e:	4633      	mov	r3, r6
    9060:	4622      	mov	r2, r4
    9062:	4629      	mov	r1, r5
    9064:	4809      	ldr	r0, [pc, #36]	; (908c <__assert_func+0x40>)
    9066:	f006 fc95 	bl	f994 <console_printf>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    if (hal_debugger_connected()) {
    906a:	f7ff f8a9 	bl	81c0 <hal_debugger_connected>
    906e:	b100      	cbz	r0, 9072 <__assert_func+0x26>
       /*
        * If debugger is attached, breakpoint before the trap.
        */
#if !MYNEWT_VAL(MCU_DEBUG_IGNORE_BKPT)
       asm("bkpt");
    9070:	be00      	bkpt	0x0000
#endif
    }
    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
    9072:	4b07      	ldr	r3, [pc, #28]	; (9090 <__assert_func+0x44>)
    9074:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    9078:	605a      	str	r2, [r3, #4]
    asm("isb");
    907a:	f3bf 8f6f 	isb	sy
    hal_system_reset();
    907e:	f7ff f8a7 	bl	81d0 <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
    9082:	4629      	mov	r1, r5
    9084:	4803      	ldr	r0, [pc, #12]	; (9094 <__assert_func+0x48>)
    9086:	f006 fc85 	bl	f994 <console_printf>
    908a:	e7ee      	b.n	906a <__assert_func+0x1e>
    908c:	00022ce0 	.word	0x00022ce0
    9090:	e000ed00 	.word	0xe000ed00
    9094:	00022cd0 	.word	0x00022cd0

00009098 <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
    9098:	b500      	push	{lr}
    909a:	b083      	sub	sp, #12
    909c:	4604      	mov	r4, r0
#endif
#if MYNEWT_VAL(OS_CRASH_RESTORE_REGS)
    uint32_t orig_sp;
#endif

    console_blocking_mode();
    909e:	f006 fa93 	bl	f5c8 <console_blocking_mode>
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
    90a2:	4d1b      	ldr	r5, [pc, #108]	; (9110 <os_default_irq+0x78>)
    90a4:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
    90a6:	6822      	ldr	r2, [r4, #0]
    90a8:	f3c1 0108 	ubfx	r1, r1, #0, #9
    90ac:	4819      	ldr	r0, [pc, #100]	; (9114 <os_default_irq+0x7c>)
    90ae:	f006 fc71 	bl	f994 <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
    90b2:	6820      	ldr	r0, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
    90b4:	6883      	ldr	r3, [r0, #8]
    90b6:	6842      	ldr	r2, [r0, #4]
    90b8:	6801      	ldr	r1, [r0, #0]
    90ba:	68c0      	ldr	r0, [r0, #12]
    90bc:	9000      	str	r0, [sp, #0]
    90be:	4816      	ldr	r0, [pc, #88]	; (9118 <os_default_irq+0x80>)
    90c0:	f006 fc68 	bl	f994 <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
    90c4:	6923      	ldr	r3, [r4, #16]
    90c6:	9300      	str	r3, [sp, #0]
    90c8:	68e3      	ldr	r3, [r4, #12]
    90ca:	68a2      	ldr	r2, [r4, #8]
    90cc:	6861      	ldr	r1, [r4, #4]
    90ce:	4813      	ldr	r0, [pc, #76]	; (911c <os_default_irq+0x84>)
    90d0:	f006 fc60 	bl	f994 <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
    90d4:	6a23      	ldr	r3, [r4, #32]
    90d6:	9300      	str	r3, [sp, #0]
    90d8:	69e3      	ldr	r3, [r4, #28]
    90da:	69a2      	ldr	r2, [r4, #24]
    90dc:	6961      	ldr	r1, [r4, #20]
    90de:	4810      	ldr	r0, [pc, #64]	; (9120 <os_default_irq+0x88>)
    90e0:	f006 fc58 	bl	f994 <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
    90e4:	6820      	ldr	r0, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
    90e6:	6983      	ldr	r3, [r0, #24]
    90e8:	6942      	ldr	r2, [r0, #20]
    90ea:	6901      	ldr	r1, [r0, #16]
    90ec:	69c0      	ldr	r0, [r0, #28]
    90ee:	9000      	str	r0, [sp, #0]
    90f0:	480c      	ldr	r0, [pc, #48]	; (9124 <os_default_irq+0x8c>)
    90f2:	f006 fc4f 	bl	f994 <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
    90f6:	6869      	ldr	r1, [r5, #4]
    90f8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    90fa:	6aab      	ldr	r3, [r5, #40]	; 0x28
    90fc:	480a      	ldr	r0, [pc, #40]	; (9128 <os_default_irq+0x90>)
    90fe:	f006 fc49 	bl	f994 <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
    9102:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    9104:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    9106:	4809      	ldr	r0, [pc, #36]	; (912c <os_default_irq+0x94>)
    9108:	f006 fc44 	bl	f994 <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
    910c:	f7ff f860 	bl	81d0 <hal_system_reset>
    9110:	e000ed00 	.word	0xe000ed00
    9114:	00022cf8 	.word	0x00022cf8
    9118:	00022d2c 	.word	0x00022d2c
    911c:	00022d60 	.word	0x00022d60
    9120:	00022d94 	.word	0x00022d94
    9124:	00022dc8 	.word	0x00022dc8
    9128:	00022dfc 	.word	0x00022dfc
    912c:	00022e24 	.word	0x00022e24

00009130 <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
    9130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_time_t sanity_itvl_ticks;

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

    hal_watchdog_tickle();
    9132:	f00f fcd5 	bl	18ae0 <hal_watchdog_tickle>
    sanity_last = 0;
    9136:	2600      	movs	r6, #0
    9138:	e00b      	b.n	9152 <os_idle_task+0x22>
    while (1) {
        ++g_os_idle_ctr;

        now = os_time_get();
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
            os_sanity_run();
    913a:	f000 fce3 	bl	9b04 <os_sanity_run>
            /* Tickle the watchdog after successfully running sanity */
            hal_watchdog_tickle();
    913e:	f00f fccf 	bl	18ae0 <hal_watchdog_tickle>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
            os_cputime_timer_stop(&os_wdog_monitor);
            os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
            sanity_last = now;
    9142:	4626      	mov	r6, r4
    9144:	e011      	b.n	916a <os_idle_task+0x3a>
         * as the idle task does not schedule itself.
         */
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));

        if (iticks < MIN_IDLE_TICKS) {
            iticks = 0;
    9146:	2000      	movs	r0, #0
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
    9148:	f00e feb8 	bl	17ebc <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
    914c:	4628      	mov	r0, r5
    914e:	f001 f99b 	bl	a488 <os_arch_restore_sr>
        ++g_os_idle_ctr;
    9152:	4a14      	ldr	r2, [pc, #80]	; (91a4 <os_idle_task+0x74>)
    9154:	6813      	ldr	r3, [r2, #0]
    9156:	3301      	adds	r3, #1
    9158:	6013      	str	r3, [r2, #0]
        now = os_time_get();
    915a:	f001 f869 	bl	a230 <os_time_get>
    915e:	4604      	mov	r4, r0
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
    9160:	f506 63f0 	add.w	r3, r6, #1920	; 0x780
    9164:	1ac3      	subs	r3, r0, r3
    9166:	2b00      	cmp	r3, #0
    9168:	dce7      	bgt.n	913a <os_idle_task+0xa>
        OS_ENTER_CRITICAL(sr);
    916a:	f001 f987 	bl	a47c <os_arch_save_sr>
    916e:	4605      	mov	r5, r0
        now = os_time_get();
    9170:	f001 f85e 	bl	a230 <os_time_get>
    9174:	4607      	mov	r7, r0
        sticks = os_sched_wakeup_ticks(now);
    9176:	f000 fe33 	bl	9de0 <os_sched_wakeup_ticks>
    917a:	4604      	mov	r4, r0
        cticks = os_callout_wakeup_ticks(now);
    917c:	4638      	mov	r0, r7
    917e:	f000 f989 	bl	9494 <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
    9182:	4284      	cmp	r4, r0
    9184:	bf28      	it	cs
    9186:	4604      	movcs	r4, r0
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));
    9188:	f506 63f0 	add.w	r3, r6, #1920	; 0x780
    918c:	1bd8      	subs	r0, r3, r7
    918e:	42a0      	cmp	r0, r4
    9190:	bf28      	it	cs
    9192:	4620      	movcs	r0, r4
        if (iticks < MIN_IDLE_TICKS) {
    9194:	280b      	cmp	r0, #11
    9196:	d9d6      	bls.n	9146 <os_idle_task+0x16>
        } else if (iticks > MAX_IDLE_TICKS) {
    9198:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
    919c:	d9d4      	bls.n	9148 <os_idle_task+0x18>
            iticks = MAX_IDLE_TICKS;
    919e:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
    91a2:	e7d1      	b.n	9148 <os_idle_task+0x18>
    91a4:	20001600 	.word	0x20001600

000091a8 <os_main>:
    return (g_os_started);
}

static void
os_main(void *arg)
{
    91a8:	b508      	push	{r3, lr}
    91aa:	4603      	mov	r3, r0
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
    91ac:	2100      	movs	r1, #0
    91ae:	4608      	mov	r0, r1
    91b0:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
    91b2:	2300      	movs	r3, #0
    91b4:	461a      	mov	r2, r3
    91b6:	4619      	mov	r1, r3
    91b8:	4618      	mov	r0, r3
    91ba:	f7ff ff47 	bl	904c <__assert_func>
	...

000091c0 <os_started>:
}
    91c0:	4b01      	ldr	r3, [pc, #4]	; (91c8 <os_started+0x8>)
    91c2:	6818      	ldr	r0, [r3, #0]
    91c4:	4770      	bx	lr
    91c6:	bf00      	nop
    91c8:	20002658 	.word	0x20002658

000091cc <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
    91cc:	b500      	push	{lr}
    91ce:	b085      	sub	sp, #20
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
    91d0:	2340      	movs	r3, #64	; 0x40
    91d2:	9303      	str	r3, [sp, #12]
    91d4:	4b15      	ldr	r3, [pc, #84]	; (922c <os_init_idle_task+0x60>)
    91d6:	9302      	str	r3, [sp, #8]
    91d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    91dc:	9301      	str	r3, [sp, #4]
    91de:	23ff      	movs	r3, #255	; 0xff
    91e0:	9300      	str	r3, [sp, #0]
    91e2:	2300      	movs	r3, #0
    91e4:	4a12      	ldr	r2, [pc, #72]	; (9230 <os_init_idle_task+0x64>)
    91e6:	4913      	ldr	r1, [pc, #76]	; (9234 <os_init_idle_task+0x68>)
    91e8:	4813      	ldr	r0, [pc, #76]	; (9238 <os_init_idle_task+0x6c>)
    91ea:	f000 fee7 	bl	9fbc <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
    91ee:	b950      	cbnz	r0, 9206 <os_init_idle_task+0x3a>

    /* Initialize sanity */
    rc = os_sanity_init();
    91f0:	f000 fcbe 	bl	9b70 <os_sanity_init>
    assert(rc == 0);
    91f4:	b968      	cbnz	r0, 9212 <os_init_idle_task+0x46>

    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
    91f6:	f247 5030 	movw	r0, #30000	; 0x7530
    91fa:	f00f fc2d 	bl	18a58 <hal_watchdog_init>
    assert(rc == 0);
    91fe:	b970      	cbnz	r0, 921e <os_init_idle_task+0x52>

#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
}
    9200:	b005      	add	sp, #20
    9202:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
    9206:	2300      	movs	r3, #0
    9208:	461a      	mov	r2, r3
    920a:	4619      	mov	r1, r3
    920c:	4618      	mov	r0, r3
    920e:	f7ff ff1d 	bl	904c <__assert_func>
    assert(rc == 0);
    9212:	2300      	movs	r3, #0
    9214:	461a      	mov	r2, r3
    9216:	4619      	mov	r1, r3
    9218:	4618      	mov	r0, r3
    921a:	f7ff ff17 	bl	904c <__assert_func>
    assert(rc == 0);
    921e:	2300      	movs	r3, #0
    9220:	461a      	mov	r2, r3
    9222:	4619      	mov	r1, r3
    9224:	4618      	mov	r0, r3
    9226:	f7ff ff11 	bl	904c <__assert_func>
    922a:	bf00      	nop
    922c:	20001500 	.word	0x20001500
    9230:	00009131 	.word	0x00009131
    9234:	00022e40 	.word	0x00022e40
    9238:	200014ac 	.word	0x200014ac

0000923c <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
    923c:	b510      	push	{r4, lr}
    923e:	b084      	sub	sp, #16
    9240:	4604      	mov	r4, r0
    os_error_t err;

#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    9242:	2248      	movs	r2, #72	; 0x48
    9244:	2100      	movs	r1, #0
    9246:	4828      	ldr	r0, [pc, #160]	; (92e8 <os_init+0xac>)
    9248:	f004 fbdb 	bl	da02 <memset>
    SEGGER_RTT_Init();
    924c:	f00a fce6 	bl	13c1c <SEGGER_RTT_Init>
#endif

    TAILQ_INIT(&g_callout_list);
    9250:	4b26      	ldr	r3, [pc, #152]	; (92ec <os_init+0xb0>)
    9252:	2200      	movs	r2, #0
    9254:	601a      	str	r2, [r3, #0]
    9256:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&g_os_task_list);
    9258:	4b25      	ldr	r3, [pc, #148]	; (92f0 <os_init+0xb4>)
    925a:	601a      	str	r2, [r3, #0]
    925c:	605b      	str	r3, [r3, #4]
    os_eventq_init(os_eventq_dflt_get());
    925e:	f000 fad7 	bl	9810 <os_eventq_dflt_get>
    9262:	f000 fa19 	bl	9698 <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
    9266:	f000 f9ff 	bl	9668 <os_dev_reset>

    err = os_arch_os_init();
    926a:	f001 f941 	bl	a4f0 <os_arch_os_init>
    assert(err == OS_OK);
    926e:	bb18      	cbnz	r0, 92b8 <os_init+0x7c>

    if (main_fn) {
    9270:	b194      	cbz	r4, 9298 <os_init+0x5c>
        err = os_task_init(&g_os_main_task, "main", os_main, main_fn,
    9272:	f44f 6380 	mov.w	r3, #1024	; 0x400
    9276:	9303      	str	r3, [sp, #12]
    9278:	4b1e      	ldr	r3, [pc, #120]	; (92f4 <os_init+0xb8>)
    927a:	9302      	str	r3, [sp, #8]
    927c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9280:	9301      	str	r3, [sp, #4]
    9282:	237f      	movs	r3, #127	; 0x7f
    9284:	9300      	str	r3, [sp, #0]
    9286:	4623      	mov	r3, r4
    9288:	4a1b      	ldr	r2, [pc, #108]	; (92f8 <os_init+0xbc>)
    928a:	491c      	ldr	r1, [pc, #112]	; (92fc <os_init+0xc0>)
    928c:	481c      	ldr	r0, [pc, #112]	; (9300 <os_init+0xc4>)
    928e:	f000 fe95 	bl	9fbc <os_task_init>
                   OS_MAIN_TASK_PRIO,
                   (OS_MAIN_TASK_TIMER_TICKS == 0) ? OS_WAIT_FOREVER : OS_MAIN_TASK_TIMER_TICKS,
                   g_os_main_stack, OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
    9292:	f010 0fff 	tst.w	r0, #255	; 0xff
    9296:	d115      	bne.n	92c4 <os_init+0x88>
    }

    /* Call bsp related OS initializations */
    hal_bsp_init();
    9298:	f00a fb2e 	bl	138f8 <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
    929c:	2001      	movs	r0, #1
    929e:	f000 f9bb 	bl	9618 <os_dev_initialize_all>
    assert(err == OS_OK);
    92a2:	f010 0fff 	tst.w	r0, #255	; 0xff
    92a6:	d113      	bne.n	92d0 <os_init+0x94>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
    92a8:	2002      	movs	r0, #2
    92aa:	f000 f9b5 	bl	9618 <os_dev_initialize_all>
    assert(err == OS_OK);
    92ae:	f010 0fff 	tst.w	r0, #255	; 0xff
    92b2:	d113      	bne.n	92dc <os_init+0xa0>
}
    92b4:	b004      	add	sp, #16
    92b6:	bd10      	pop	{r4, pc}
    assert(err == OS_OK);
    92b8:	2300      	movs	r3, #0
    92ba:	461a      	mov	r2, r3
    92bc:	4619      	mov	r1, r3
    92be:	4618      	mov	r0, r3
    92c0:	f7ff fec4 	bl	904c <__assert_func>
        assert(err == 0);
    92c4:	2300      	movs	r3, #0
    92c6:	461a      	mov	r2, r3
    92c8:	4619      	mov	r1, r3
    92ca:	4618      	mov	r0, r3
    92cc:	f7ff febe 	bl	904c <__assert_func>
    assert(err == OS_OK);
    92d0:	2300      	movs	r3, #0
    92d2:	461a      	mov	r2, r3
    92d4:	4619      	mov	r1, r3
    92d6:	4618      	mov	r0, r3
    92d8:	f7ff feb8 	bl	904c <__assert_func>
    assert(err == OS_OK);
    92dc:	2300      	movs	r3, #0
    92de:	461a      	mov	r2, r3
    92e0:	4619      	mov	r1, r3
    92e2:	4618      	mov	r0, r3
    92e4:	f7ff feb2 	bl	904c <__assert_func>
    92e8:	200000d8 	.word	0x200000d8
    92ec:	2000265c 	.word	0x2000265c
    92f0:	20003474 	.word	0x20003474
    92f4:	20001608 	.word	0x20001608
    92f8:	000091a9 	.word	0x000091a9
    92fc:	00022e48 	.word	0x00022e48
    9300:	20002608 	.word	0x20002608

00009304 <os_start>:

void
os_start(void)
{
    9304:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
    9306:	f00f fbe3 	bl	18ad0 <hal_watchdog_enable>

    err = os_arch_os_start();
    930a:	f001 f959 	bl	a5c0 <os_arch_os_start>
    assert(err == OS_OK);
    930e:	b900      	cbnz	r0, 9312 <os_start+0xe>
#else
    assert(0);
#endif
}
    9310:	bd08      	pop	{r3, pc}
    assert(err == OS_OK);
    9312:	2300      	movs	r3, #0
    9314:	461a      	mov	r2, r3
    9316:	4619      	mov	r1, r3
    9318:	4618      	mov	r0, r3
    931a:	f7ff fe97 	bl	904c <__assert_func>

0000931e <os_reboot>:

void
os_reboot(int reason)
{
    931e:	b508      	push	{r3, lr}
    sysdown(reason);
    9320:	f008 f81a 	bl	11358 <sysdown>
}
    9324:	bd08      	pop	{r3, pc}

00009326 <os_system_reset>:

void
os_system_reset(void)
{
    9326:	b508      	push	{r3, lr}
    /* Tickle watchdog just before re-entering bootloader.  Depending on what
     * the system has been doing lately, the watchdog timer might be close to
     * firing.
     */
    hal_watchdog_tickle();
    9328:	f00f fbda 	bl	18ae0 <hal_watchdog_tickle>
    hal_system_reset();
    932c:	f7fe ff50 	bl	81d0 <hal_system_reset>

00009330 <os_pkg_init>:
}

void
os_pkg_init(void)
{
    9330:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
    9332:	4b0c      	ldr	r3, [pc, #48]	; (9364 <os_pkg_init+0x34>)
    9334:	781b      	ldrb	r3, [r3, #0]
    9336:	b153      	cbz	r3, 934e <os_pkg_init+0x1e>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
    9338:	2003      	movs	r0, #3
    933a:	f000 f96d 	bl	9618 <os_dev_initialize_all>
    assert(err == OS_OK);
    933e:	f010 0fff 	tst.w	r0, #255	; 0xff
    9342:	d109      	bne.n	9358 <os_pkg_init+0x28>

    os_mempool_module_init();
    9344:	f000 fb06 	bl	9954 <os_mempool_module_init>
    os_msys_init();
    9348:	f000 fb8c 	bl	9a64 <os_msys_init>
}
    934c:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
    934e:	461a      	mov	r2, r3
    9350:	4619      	mov	r1, r3
    9352:	4618      	mov	r0, r3
    9354:	f7ff fe7a 	bl	904c <__assert_func>
    assert(err == OS_OK);
    9358:	2300      	movs	r3, #0
    935a:	461a      	mov	r2, r3
    935c:	4619      	mov	r1, r3
    935e:	4618      	mov	r0, r3
    9360:	f7ff fe74 	bl	904c <__assert_func>
    9364:	20004548 	.word	0x20004548

00009368 <os_callout_init>:

struct os_callout_list g_callout_list;

void os_callout_init(struct os_callout *c, struct os_eventq *evq,
                     os_event_fn *ev_cb, void *ev_arg)
{
    9368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    936a:	4604      	mov	r4, r0
    936c:	460d      	mov	r5, r1
    936e:	4617      	mov	r7, r2
    9370:	461e      	mov	r6, r3
    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_INIT, (uint32_t)c, (uint32_t)evq);

    memset(c, 0, sizeof(*c));
    9372:	2220      	movs	r2, #32
    9374:	2100      	movs	r1, #0
    9376:	f004 fb44 	bl	da02 <memset>
    c->c_ev.ev_cb = ev_cb;
    937a:	6067      	str	r7, [r4, #4]
    c->c_ev.ev_arg = ev_arg;
    937c:	60a6      	str	r6, [r4, #8]
    c->c_evq = evq;
    937e:	6125      	str	r5, [r4, #16]

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_INIT);
}
    9380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00009384 <os_callout_stop>:

void
os_callout_stop(struct os_callout *c)
{
    9384:	b538      	push	{r3, r4, r5, lr}
    9386:	4604      	mov	r4, r0
    os_sr_t sr;

    os_trace_api_u32(OS_TRACE_ID_CALLOUT_STOP, (uint32_t)c);

    OS_ENTER_CRITICAL(sr);
    9388:	f001 f878 	bl	a47c <os_arch_save_sr>
    938c:	4605      	mov	r5, r0
 * @return 1 if queued, 0 if not queued.
 */
static inline int
os_callout_queued(struct os_callout *c)
{
    return c->c_next.tqe_prev != NULL;
    938e:	69e3      	ldr	r3, [r4, #28]

    if (os_callout_queued(c)) {
    9390:	b13b      	cbz	r3, 93a2 <os_callout_stop+0x1e>
        TAILQ_REMOVE(&g_callout_list, c, c_next);
    9392:	69a2      	ldr	r2, [r4, #24]
    9394:	b172      	cbz	r2, 93b4 <os_callout_stop+0x30>
    9396:	61d3      	str	r3, [r2, #28]
    9398:	69e3      	ldr	r3, [r4, #28]
    939a:	69a2      	ldr	r2, [r4, #24]
    939c:	601a      	str	r2, [r3, #0]
        c->c_next.tqe_prev = NULL;
    939e:	2300      	movs	r3, #0
    93a0:	61e3      	str	r3, [r4, #28]
    }

    if (c->c_evq) {
    93a2:	6920      	ldr	r0, [r4, #16]
    93a4:	b110      	cbz	r0, 93ac <os_callout_stop+0x28>
        os_eventq_remove(c->c_evq, &c->c_ev);
    93a6:	4621      	mov	r1, r4
    93a8:	f000 fa10 	bl	97cc <os_eventq_remove>
    }

    OS_EXIT_CRITICAL(sr);
    93ac:	4628      	mov	r0, r5
    93ae:	f001 f86b 	bl	a488 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_STOP);
}
    93b2:	bd38      	pop	{r3, r4, r5, pc}
        TAILQ_REMOVE(&g_callout_list, c, c_next);
    93b4:	4a01      	ldr	r2, [pc, #4]	; (93bc <os_callout_stop+0x38>)
    93b6:	6053      	str	r3, [r2, #4]
    93b8:	e7ee      	b.n	9398 <os_callout_stop+0x14>
    93ba:	bf00      	nop
    93bc:	2000265c 	.word	0x2000265c

000093c0 <os_callout_reset>:

int
os_callout_reset(struct os_callout *c, os_time_t ticks)
{
    93c0:	b570      	push	{r4, r5, r6, lr}
    struct os_callout *entry;
    os_sr_t sr;
    int ret;

    /* Ensure this callout has been initialized. */
    assert(c->c_evq != NULL);
    93c2:	6903      	ldr	r3, [r0, #16]
    93c4:	b193      	cbz	r3, 93ec <os_callout_reset+0x2c>
    93c6:	4604      	mov	r4, r0
    93c8:	460e      	mov	r6, r1

    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)c, (uint32_t)ticks);

    if (ticks > INT32_MAX) {
    93ca:	2900      	cmp	r1, #0
    93cc:	db2f      	blt.n	942e <os_callout_reset+0x6e>
        ret = OS_EINVAL;
        goto err;
    }

    OS_ENTER_CRITICAL(sr);
    93ce:	f001 f855 	bl	a47c <os_arch_save_sr>
    93d2:	4605      	mov	r5, r0

    os_callout_stop(c);
    93d4:	4620      	mov	r0, r4
    93d6:	f7ff ffd5 	bl	9384 <os_callout_stop>

    if (ticks == 0) {
    93da:	b906      	cbnz	r6, 93de <os_callout_reset+0x1e>
        ticks = 1;
    93dc:	2601      	movs	r6, #1
    }

    c->c_ticks = os_time_get() + ticks;
    93de:	f000 ff27 	bl	a230 <os_time_get>
    93e2:	4430      	add	r0, r6
    93e4:	6160      	str	r0, [r4, #20]

    entry = NULL;
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
    93e6:	4b13      	ldr	r3, [pc, #76]	; (9434 <os_callout_reset+0x74>)
    93e8:	681b      	ldr	r3, [r3, #0]
    93ea:	e005      	b.n	93f8 <os_callout_reset+0x38>
    assert(c->c_evq != NULL);
    93ec:	461a      	mov	r2, r3
    93ee:	4619      	mov	r1, r3
    93f0:	4618      	mov	r0, r3
    93f2:	f7ff fe2b 	bl	904c <__assert_func>
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
    93f6:	699b      	ldr	r3, [r3, #24]
    93f8:	b11b      	cbz	r3, 9402 <os_callout_reset+0x42>
        if (OS_TIME_TICK_LT(c->c_ticks, entry->c_ticks)) {
    93fa:	695a      	ldr	r2, [r3, #20]
    93fc:	1a82      	subs	r2, r0, r2
    93fe:	2a00      	cmp	r2, #0
    9400:	daf9      	bge.n	93f6 <os_callout_reset+0x36>
            break;
        }
    }

    if (entry) {
    9402:	b15b      	cbz	r3, 941c <os_callout_reset+0x5c>
        TAILQ_INSERT_BEFORE(entry, c, c_next);
    9404:	69da      	ldr	r2, [r3, #28]
    9406:	61e2      	str	r2, [r4, #28]
    9408:	61a3      	str	r3, [r4, #24]
    940a:	69da      	ldr	r2, [r3, #28]
    940c:	6014      	str	r4, [r2, #0]
    940e:	3418      	adds	r4, #24
    9410:	61dc      	str	r4, [r3, #28]
    } else {
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
    }

    OS_EXIT_CRITICAL(sr);
    9412:	4628      	mov	r0, r5
    9414:	f001 f838 	bl	a488 <os_arch_restore_sr>

    ret = OS_OK;
    9418:	2000      	movs	r0, #0

err:
    os_trace_api_ret_u32(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)ret);
    return ret;
}
    941a:	bd70      	pop	{r4, r5, r6, pc}
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
    941c:	2300      	movs	r3, #0
    941e:	61a3      	str	r3, [r4, #24]
    9420:	4b04      	ldr	r3, [pc, #16]	; (9434 <os_callout_reset+0x74>)
    9422:	685a      	ldr	r2, [r3, #4]
    9424:	61e2      	str	r2, [r4, #28]
    9426:	6014      	str	r4, [r2, #0]
    9428:	3418      	adds	r4, #24
    942a:	605c      	str	r4, [r3, #4]
    942c:	e7f1      	b.n	9412 <os_callout_reset+0x52>
        ret = OS_EINVAL;
    942e:	2002      	movs	r0, #2
    return ret;
    9430:	e7f3      	b.n	941a <os_callout_reset+0x5a>
    9432:	bf00      	nop
    9434:	2000265c 	.word	0x2000265c

00009438 <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
    9438:	b538      	push	{r3, r4, r5, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
    943a:	f000 fef9 	bl	a230 <os_time_get>
    943e:	4605      	mov	r5, r0
    9440:	e00f      	b.n	9462 <os_callout_tick+0x2a>
    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
        if (c) {
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
                TAILQ_REMOVE(&g_callout_list, c, c_next);
    9442:	69e2      	ldr	r2, [r4, #28]
    9444:	4b12      	ldr	r3, [pc, #72]	; (9490 <os_callout_tick+0x58>)
    9446:	605a      	str	r2, [r3, #4]
    9448:	69e3      	ldr	r3, [r4, #28]
    944a:	69a2      	ldr	r2, [r4, #24]
    944c:	601a      	str	r2, [r3, #0]
                c->c_next.tqe_prev = NULL;
    944e:	2300      	movs	r3, #0
    9450:	61e3      	str	r3, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
    9452:	f001 f819 	bl	a488 <os_arch_restore_sr>

        if (c) {
    9456:	b1d4      	cbz	r4, 948e <os_callout_tick+0x56>
            if (c->c_evq) {
    9458:	6920      	ldr	r0, [r4, #16]
    945a:	b1a0      	cbz	r0, 9486 <os_callout_tick+0x4e>
                os_eventq_put(c->c_evq, &c->c_ev);
    945c:	4621      	mov	r1, r4
    945e:	f000 f929 	bl	96b4 <os_eventq_put>
        OS_ENTER_CRITICAL(sr);
    9462:	f001 f80b 	bl	a47c <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
    9466:	4b0a      	ldr	r3, [pc, #40]	; (9490 <os_callout_tick+0x58>)
    9468:	681c      	ldr	r4, [r3, #0]
        if (c) {
    946a:	2c00      	cmp	r4, #0
    946c:	d0f1      	beq.n	9452 <os_callout_tick+0x1a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
    946e:	6963      	ldr	r3, [r4, #20]
    9470:	1aeb      	subs	r3, r5, r3
    9472:	2b00      	cmp	r3, #0
    9474:	db05      	blt.n	9482 <os_callout_tick+0x4a>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
    9476:	69a3      	ldr	r3, [r4, #24]
    9478:	2b00      	cmp	r3, #0
    947a:	d0e2      	beq.n	9442 <os_callout_tick+0xa>
    947c:	69e2      	ldr	r2, [r4, #28]
    947e:	61da      	str	r2, [r3, #28]
    9480:	e7e2      	b.n	9448 <os_callout_tick+0x10>
                c = NULL;
    9482:	2400      	movs	r4, #0
    9484:	e7e5      	b.n	9452 <os_callout_tick+0x1a>
            } else {
                c->c_ev.ev_cb(&c->c_ev);
    9486:	6863      	ldr	r3, [r4, #4]
    9488:	4620      	mov	r0, r4
    948a:	4798      	blx	r3
    948c:	e7e9      	b.n	9462 <os_callout_tick+0x2a>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
    948e:	bd38      	pop	{r3, r4, r5, pc}
    9490:	2000265c 	.word	0x2000265c

00009494 <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
    9494:	b510      	push	{r4, lr}
    9496:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
    9498:	f000 fff9 	bl	a48e <os_arch_in_critical>
    949c:	b130      	cbz	r0, 94ac <os_callout_wakeup_ticks+0x18>

    c = TAILQ_FIRST(&g_callout_list);
    949e:	4b09      	ldr	r3, [pc, #36]	; (94c4 <os_callout_wakeup_ticks+0x30>)
    94a0:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
    94a2:	b15b      	cbz	r3, 94bc <os_callout_wakeup_ticks+0x28>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
    94a4:	6958      	ldr	r0, [r3, #20]
    94a6:	1b00      	subs	r0, r0, r4
    94a8:	d406      	bmi.n	94b8 <os_callout_wakeup_ticks+0x24>
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
    94aa:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
    94ac:	2300      	movs	r3, #0
    94ae:	461a      	mov	r2, r3
    94b0:	4619      	mov	r1, r3
    94b2:	4618      	mov	r0, r3
    94b4:	f7ff fdca 	bl	904c <__assert_func>
            rt = 0;     /* callout time is in the past */
    94b8:	2000      	movs	r0, #0
    94ba:	e7f6      	b.n	94aa <os_callout_wakeup_ticks+0x16>
        rt = OS_TIMEOUT_NEVER;
    94bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
    94c0:	e7f3      	b.n	94aa <os_callout_wakeup_ticks+0x16>
    94c2:	bf00      	nop
    94c4:	2000265c 	.word	0x2000265c

000094c8 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
    94c8:	b508      	push	{r3, lr}
    94ca:	4601      	mov	r1, r0

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
    94cc:	2000      	movs	r0, #0
    94ce:	f00f f987 	bl	187e0 <hal_timer_config>
    return rc;
}
    94d2:	bd08      	pop	{r3, pc}

000094d4 <os_cputime_timer_init>:
    os_cputime_delay_ticks(ticks);
}

void
os_cputime_timer_init(struct hal_timer *timer, hal_timer_cb fp, void *arg)
{
    94d4:	b510      	push	{r4, lr}
    assert(timer != NULL);
    94d6:	b140      	cbz	r0, 94ea <os_cputime_timer_init+0x16>
    94d8:	460c      	mov	r4, r1
    94da:	4613      	mov	r3, r2
    94dc:	4601      	mov	r1, r0
    assert(fp != NULL);
    94de:	b154      	cbz	r4, 94f6 <os_cputime_timer_init+0x22>

    hal_timer_set_cb(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), timer, fp, arg);
    94e0:	4622      	mov	r2, r4
    94e2:	2000      	movs	r0, #0
    94e4:	f00f fa12 	bl	1890c <hal_timer_set_cb>
}
    94e8:	bd10      	pop	{r4, pc}
    assert(timer != NULL);
    94ea:	2300      	movs	r3, #0
    94ec:	461a      	mov	r2, r3
    94ee:	4619      	mov	r1, r3
    94f0:	4618      	mov	r0, r3
    94f2:	f7ff fdab 	bl	904c <__assert_func>
    assert(fp != NULL);
    94f6:	2300      	movs	r3, #0
    94f8:	461a      	mov	r2, r3
    94fa:	4619      	mov	r1, r3
    94fc:	4618      	mov	r0, r3
    94fe:	f7ff fda5 	bl	904c <__assert_func>

00009502 <os_cputime_get32>:
    hal_timer_stop(timer);
}

uint32_t
os_cputime_get32(void)
{
    9502:	b508      	push	{r3, lr}
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
    9504:	2000      	movs	r0, #0
    9506:	f00f f9e9 	bl	188dc <hal_timer_read>
    return cpu_time;
}
    950a:	bd08      	pop	{r3, pc}

0000950c <os_cputime_timer_relative>:
{
    950c:	b538      	push	{r3, r4, r5, lr}
    assert(timer != NULL);
    950e:	b140      	cbz	r0, 9522 <os_cputime_timer_relative+0x16>
    9510:	460c      	mov	r4, r1
    9512:	4605      	mov	r5, r0
    cputime = os_cputime_get32() + os_cputime_usecs_to_ticks(usecs);
    9514:	f7ff fff5 	bl	9502 <os_cputime_get32>
    rc = hal_timer_start_at(timer, cputime);
    9518:	1901      	adds	r1, r0, r4
    951a:	4628      	mov	r0, r5
    951c:	f00f fa0c 	bl	18938 <hal_timer_start_at>
}
    9520:	bd38      	pop	{r3, r4, r5, pc}
    assert(timer != NULL);
    9522:	2300      	movs	r3, #0
    9524:	461a      	mov	r2, r3
    9526:	4619      	mov	r1, r3
    9528:	4618      	mov	r0, r3
    952a:	f7ff fd8f 	bl	904c <__assert_func>
	...

00009530 <os_dev_add>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_add(struct os_dev *dev)
{
    9530:	b430      	push	{r4, r5}
    struct os_dev *cur_dev;
    struct os_dev *prev_dev;

    /* If no devices present, insert into head */
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
    9532:	4b15      	ldr	r3, [pc, #84]	; (9588 <os_dev_add+0x58>)
    9534:	681d      	ldr	r5, [r3, #0]
    9536:	b115      	cbz	r5, 953e <os_dev_add+0xe>
    /* Add devices to the list, sorted first by stage, then by
     * priority.  Keep sorted in this order for initialization
     * stage.
     */
    prev_dev = NULL;
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
    9538:	462b      	mov	r3, r5
    prev_dev = NULL;
    953a:	2400      	movs	r4, #0
    953c:	e008      	b.n	9550 <os_dev_add+0x20>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    953e:	4603      	mov	r3, r0
    9540:	f843 5f20 	str.w	r5, [r3, #32]!
    9544:	4a10      	ldr	r2, [pc, #64]	; (9588 <os_dev_add+0x58>)
    9546:	6053      	str	r3, [r2, #4]
    9548:	6010      	str	r0, [r2, #0]
        return (0);
    954a:	e010      	b.n	956e <os_dev_add+0x3e>
        if (dev->od_stage < cur_dev->od_stage ||
            ((dev->od_stage == cur_dev->od_stage) &&
             (dev->od_priority < cur_dev->od_priority))) {
            break;
        }
        prev_dev = cur_dev;
    954c:	461c      	mov	r4, r3
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
    954e:	6a1b      	ldr	r3, [r3, #32]
    9550:	b143      	cbz	r3, 9564 <os_dev_add+0x34>
        if (dev->od_stage < cur_dev->od_stage ||
    9552:	7e01      	ldrb	r1, [r0, #24]
    9554:	7e1a      	ldrb	r2, [r3, #24]
    9556:	4291      	cmp	r1, r2
    9558:	d304      	bcc.n	9564 <os_dev_add+0x34>
    955a:	d1f7      	bne.n	954c <os_dev_add+0x1c>
             (dev->od_priority < cur_dev->od_priority))) {
    955c:	7e41      	ldrb	r1, [r0, #25]
    955e:	7e5a      	ldrb	r2, [r3, #25]
            ((dev->od_stage == cur_dev->od_stage) &&
    9560:	4291      	cmp	r1, r2
    9562:	d2f3      	bcs.n	954c <os_dev_add+0x1c>
    }

    if (prev_dev) {
    9564:	b15c      	cbz	r4, 957e <os_dev_add+0x4e>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
    9566:	6a23      	ldr	r3, [r4, #32]
    9568:	6203      	str	r3, [r0, #32]
    956a:	b11b      	cbz	r3, 9574 <os_dev_add+0x44>
    956c:	6220      	str	r0, [r4, #32]
    } else {
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    }

    return (0);
}
    956e:	2000      	movs	r0, #0
    9570:	bc30      	pop	{r4, r5}
    9572:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
    9574:	f100 0320 	add.w	r3, r0, #32
    9578:	4a03      	ldr	r2, [pc, #12]	; (9588 <os_dev_add+0x58>)
    957a:	6053      	str	r3, [r2, #4]
    957c:	e7f6      	b.n	956c <os_dev_add+0x3c>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    957e:	6205      	str	r5, [r0, #32]
    9580:	4b01      	ldr	r3, [pc, #4]	; (9588 <os_dev_add+0x58>)
    9582:	6018      	str	r0, [r3, #0]
    9584:	e7f3      	b.n	956e <os_dev_add+0x3e>
    9586:	bf00      	nop
    9588:	20002664 	.word	0x20002664

0000958c <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
    958c:	b510      	push	{r4, lr}
    958e:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
    9590:	6903      	ldr	r3, [r0, #16]
    9592:	6941      	ldr	r1, [r0, #20]
    9594:	4798      	blx	r3
    if (rc != 0) {
    9596:	b128      	cbz	r0, 95a4 <os_dev_initialize+0x18>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
    9598:	7ee3      	ldrb	r3, [r4, #27]
    959a:	f013 0f08 	tst.w	r3, #8
    959e:	d105      	bne.n	95ac <os_dev_initialize+0x20>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
    95a0:	2000      	movs	r0, #0
    95a2:	e003      	b.n	95ac <os_dev_initialize+0x20>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    95a4:	7ee3      	ldrb	r3, [r4, #27]
    95a6:	f043 0301 	orr.w	r3, r3, #1
    95aa:	76e3      	strb	r3, [r4, #27]
err:
    return rc;
}
    95ac:	bd10      	pop	{r4, pc}

000095ae <os_dev_init>:
{
    95ae:	4684      	mov	ip, r0
    dev->od_name = name;
    95b0:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
    95b2:	7602      	strb	r2, [r0, #24]
    dev->od_priority = priority;
    95b4:	7643      	strb	r3, [r0, #25]
    dev->od_flags = 0;
    95b6:	2000      	movs	r0, #0
    95b8:	f88c 001b 	strb.w	r0, [ip, #27]
    dev->od_open_ref = 0;
    95bc:	f88c 001a 	strb.w	r0, [ip, #26]
    dev->od_init = od_init;
    95c0:	9b00      	ldr	r3, [sp, #0]
    95c2:	f8cc 3010 	str.w	r3, [ip, #16]
    dev->od_init_arg = arg;
    95c6:	9b01      	ldr	r3, [sp, #4]
    95c8:	f8cc 3014 	str.w	r3, [ip, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
    95cc:	f8cc 0000 	str.w	r0, [ip]
    95d0:	f8cc 0004 	str.w	r0, [ip, #4]
    95d4:	f8cc 0008 	str.w	r0, [ip, #8]
    95d8:	f8cc 000c 	str.w	r0, [ip, #12]
}
    95dc:	4770      	bx	lr
	...

000095e0 <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
    95e0:	b530      	push	{r4, r5, lr}
    95e2:	b083      	sub	sp, #12
    95e4:	4604      	mov	r4, r0
    int rc;

    rc = os_dev_init(dev, name, stage, priority, od_init, arg);
    95e6:	9d07      	ldr	r5, [sp, #28]
    95e8:	9501      	str	r5, [sp, #4]
    95ea:	9d06      	ldr	r5, [sp, #24]
    95ec:	9500      	str	r5, [sp, #0]
    95ee:	f7ff ffde 	bl	95ae <os_dev_init>
    if (rc != 0) {
    95f2:	b108      	cbz	r0, 95f8 <os_dev_create+0x18>
    if (g_os_started) {
        rc = os_dev_initialize(dev);
    }
err:
    return (rc);
}
    95f4:	b003      	add	sp, #12
    95f6:	bd30      	pop	{r4, r5, pc}
    rc = os_dev_add(dev);
    95f8:	4620      	mov	r0, r4
    95fa:	f7ff ff99 	bl	9530 <os_dev_add>
    if (rc != 0) {
    95fe:	2800      	cmp	r0, #0
    9600:	d1f8      	bne.n	95f4 <os_dev_create+0x14>
    if (g_os_started) {
    9602:	4b04      	ldr	r3, [pc, #16]	; (9614 <os_dev_create+0x34>)
    9604:	681b      	ldr	r3, [r3, #0]
    9606:	2b00      	cmp	r3, #0
    9608:	d0f4      	beq.n	95f4 <os_dev_create+0x14>
        rc = os_dev_initialize(dev);
    960a:	4620      	mov	r0, r4
    960c:	f7ff ffbe 	bl	958c <os_dev_initialize>
    return (rc);
    9610:	e7f0      	b.n	95f4 <os_dev_create+0x14>
    9612:	bf00      	nop
    9614:	20002658 	.word	0x20002658

00009618 <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
    9618:	b538      	push	{r3, r4, r5, lr}
    961a:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    961c:	4b08      	ldr	r3, [pc, #32]	; (9640 <os_dev_initialize_all+0x28>)
    961e:	681c      	ldr	r4, [r3, #0]
    int rc = 0;
    9620:	2200      	movs	r2, #0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    9622:	e000      	b.n	9626 <os_dev_initialize_all+0xe>
    9624:	6a24      	ldr	r4, [r4, #32]
    9626:	b144      	cbz	r4, 963a <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
    9628:	7e23      	ldrb	r3, [r4, #24]
    962a:	42ab      	cmp	r3, r5
    962c:	d1fa      	bne.n	9624 <os_dev_initialize_all+0xc>
            rc = os_dev_initialize(dev);
    962e:	4620      	mov	r0, r4
    9630:	f7ff ffac 	bl	958c <os_dev_initialize>
            if (rc) {
    9634:	4602      	mov	r2, r0
    9636:	2800      	cmp	r0, #0
    9638:	d0f4      	beq.n	9624 <os_dev_initialize_all+0xc>
            }
        }
    }

    return (rc);
}
    963a:	4610      	mov	r0, r2
    963c:	bd38      	pop	{r3, r4, r5, pc}
    963e:	bf00      	nop
    9640:	20002664 	.word	0x20002664

00009644 <os_dev_lookup>:
    return (rc);
}

struct os_dev *
os_dev_lookup(const char *name)
{
    9644:	b538      	push	{r3, r4, r5, lr}
    9646:	4605      	mov	r5, r0
    struct os_dev *dev;

    dev = NULL;
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    9648:	4b06      	ldr	r3, [pc, #24]	; (9664 <os_dev_lookup+0x20>)
    964a:	681c      	ldr	r4, [r3, #0]
    964c:	e000      	b.n	9650 <os_dev_lookup+0xc>
    964e:	6a24      	ldr	r4, [r4, #32]
    9650:	b12c      	cbz	r4, 965e <os_dev_lookup+0x1a>
        if (!strcmp(dev->od_name, name)) {
    9652:	4629      	mov	r1, r5
    9654:	69e0      	ldr	r0, [r4, #28]
    9656:	f004 f9ff 	bl	da58 <strcmp>
    965a:	2800      	cmp	r0, #0
    965c:	d1f7      	bne.n	964e <os_dev_lookup+0xa>
            break;
        }
    }
    return (dev);
}
    965e:	4620      	mov	r0, r4
    9660:	bd38      	pop	{r3, r4, r5, pc}
    9662:	bf00      	nop
    9664:	20002664 	.word	0x20002664

00009668 <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
    9668:	4b02      	ldr	r3, [pc, #8]	; (9674 <os_dev_reset+0xc>)
    966a:	2200      	movs	r2, #0
    966c:	601a      	str	r2, [r3, #0]
    966e:	605b      	str	r3, [r3, #4]
}
    9670:	4770      	bx	lr
    9672:	bf00      	nop
    9674:	20002664 	.word	0x20002664

00009678 <os_dev_walk>:

void
os_dev_walk(int (*walk_func)(struct os_dev *, void *), void *arg)
{
    9678:	b570      	push	{r4, r5, r6, lr}
    967a:	4606      	mov	r6, r0
    967c:	460d      	mov	r5, r1
    struct os_dev *dev;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    967e:	4b05      	ldr	r3, [pc, #20]	; (9694 <os_dev_walk+0x1c>)
    9680:	681c      	ldr	r4, [r3, #0]
    9682:	e000      	b.n	9686 <os_dev_walk+0xe>
    9684:	6a24      	ldr	r4, [r4, #32]
    9686:	b124      	cbz	r4, 9692 <os_dev_walk+0x1a>
        if (walk_func(dev, arg)) {
    9688:	4629      	mov	r1, r5
    968a:	4620      	mov	r0, r4
    968c:	47b0      	blx	r6
    968e:	2800      	cmp	r0, #0
    9690:	d0f8      	beq.n	9684 <os_dev_walk+0xc>
            break;
        }
    }
}
    9692:	bd70      	pop	{r4, r5, r6, pc}
    9694:	20002664 	.word	0x20002664

00009698 <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
    9698:	2300      	movs	r3, #0
    969a:	6003      	str	r3, [r0, #0]
    969c:	6043      	str	r3, [r0, #4]
    969e:	6083      	str	r3, [r0, #8]
    96a0:	60c3      	str	r3, [r0, #12]
    STAILQ_INIT(&evq->evq_list);
    96a2:	f100 0308 	add.w	r3, r0, #8
    96a6:	60c3      	str	r3, [r0, #12]
}
    96a8:	4770      	bx	lr

000096aa <os_eventq_inited>:

int
os_eventq_inited(const struct os_eventq *evq)
{
    return evq->evq_list.stqh_last != NULL;
    96aa:	68c0      	ldr	r0, [r0, #12]
}
    96ac:	3800      	subs	r0, #0
    96ae:	bf18      	it	ne
    96b0:	2001      	movne	r0, #1
    96b2:	4770      	bx	lr

000096b4 <os_eventq_put>:

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
    96b4:	b570      	push	{r4, r5, r6, lr}
    int resched;
    os_sr_t sr;

    assert(evq != NULL && os_eventq_inited(evq));
    96b6:	b1f0      	cbz	r0, 96f6 <os_eventq_put+0x42>
    96b8:	460c      	mov	r4, r1
    96ba:	4606      	mov	r6, r0
    96bc:	f7ff fff5 	bl	96aa <os_eventq_inited>
    96c0:	b1c8      	cbz	r0, 96f6 <os_eventq_put+0x42>

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
    96c2:	f000 fedb 	bl	a47c <os_arch_save_sr>
    96c6:	4605      	mov	r5, r0

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
    96c8:	7823      	ldrb	r3, [r4, #0]
    96ca:	b9d3      	cbnz	r3, 9702 <os_eventq_put+0x4e>
        os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
        return;
    }

    /* Queue the event */
    ev->ev_queued = 1;
    96cc:	2301      	movs	r3, #1
    96ce:	7023      	strb	r3, [r4, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
    96d0:	2300      	movs	r3, #0
    96d2:	60e3      	str	r3, [r4, #12]
    96d4:	68f3      	ldr	r3, [r6, #12]
    96d6:	601c      	str	r4, [r3, #0]
    96d8:	340c      	adds	r4, #12
    96da:	60f4      	str	r4, [r6, #12]

    resched = 0;
    if (evq->evq_task) {
    96dc:	6870      	ldr	r0, [r6, #4]
    96de:	b1b8      	cbz	r0, 9710 <os_eventq_put+0x5c>
        /* If task waiting on event, wake it up.
         * Check if task is sleeping, because another event
         * queue may have woken this task up beforehand.
         */
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
    96e0:	7b03      	ldrb	r3, [r0, #12]
    96e2:	2b02      	cmp	r3, #2
    96e4:	d010      	beq.n	9708 <os_eventq_put+0x54>
    resched = 0;
    96e6:	2400      	movs	r4, #0
            resched = 1;
        }
        /* Either way, NULL out the task, because the task will
         * be awake upon exit of this function.
         */
        evq->evq_task = NULL;
    96e8:	2300      	movs	r3, #0
    96ea:	6073      	str	r3, [r6, #4]
    }

    OS_EXIT_CRITICAL(sr);
    96ec:	4628      	mov	r0, r5
    96ee:	f000 fecb 	bl	a488 <os_arch_restore_sr>

    if (resched) {
    96f2:	b97c      	cbnz	r4, 9714 <os_eventq_put+0x60>
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
    96f4:	bd70      	pop	{r4, r5, r6, pc}
    assert(evq != NULL && os_eventq_inited(evq));
    96f6:	2300      	movs	r3, #0
    96f8:	461a      	mov	r2, r3
    96fa:	4619      	mov	r1, r3
    96fc:	4618      	mov	r0, r3
    96fe:	f7ff fca5 	bl	904c <__assert_func>
        OS_EXIT_CRITICAL(sr);
    9702:	f000 fec1 	bl	a488 <os_arch_restore_sr>
        return;
    9706:	e7f5      	b.n	96f4 <os_eventq_put+0x40>
            os_sched_wakeup(evq->evq_task);
    9708:	f000 fb12 	bl	9d30 <os_sched_wakeup>
            resched = 1;
    970c:	2401      	movs	r4, #1
    970e:	e7eb      	b.n	96e8 <os_eventq_put+0x34>
    resched = 0;
    9710:	2400      	movs	r4, #0
    9712:	e7eb      	b.n	96ec <os_eventq_put+0x38>
        os_sched(NULL);
    9714:	2000      	movs	r0, #0
    9716:	f000 fb89 	bl	9e2c <os_sched>
    971a:	e7eb      	b.n	96f4 <os_eventq_put+0x40>

0000971c <os_eventq_get_no_wait>:

struct os_event *
os_eventq_get_no_wait(struct os_eventq *evq)
{
    971c:	4603      	mov	r3, r0
    struct os_event *ev;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET_NO_WAIT, (uint32_t)evq);

    ev = STAILQ_FIRST(&evq->evq_list);
    971e:	6880      	ldr	r0, [r0, #8]
    if (ev) {
    9720:	b120      	cbz	r0, 972c <os_eventq_get_no_wait+0x10>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    9722:	68c2      	ldr	r2, [r0, #12]
    9724:	609a      	str	r2, [r3, #8]
    9726:	b112      	cbz	r2, 972e <os_eventq_get_no_wait+0x12>
        ev->ev_queued = 0;
    9728:	2300      	movs	r3, #0
    972a:	7003      	strb	r3, [r0, #0]
    }

    os_trace_api_ret_u32(OS_TRACE_ID_EVENTQ_GET_NO_WAIT, (uint32_t)ev);

    return ev;
}
    972c:	4770      	bx	lr
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    972e:	f103 0208 	add.w	r2, r3, #8
    9732:	60da      	str	r2, [r3, #12]
    9734:	e7f8      	b.n	9728 <os_eventq_get_no_wait+0xc>

00009736 <os_eventq_get>:

struct os_event *
os_eventq_get(struct os_eventq *evq)
{
    9736:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9738:	4606      	mov	r6, r0
    os_sr_t sr;
    struct os_task *t;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET, (uint32_t)evq);

    t = os_sched_get_current_task();
    973a:	f000 fa63 	bl	9c04 <os_sched_get_current_task>
    973e:	4604      	mov	r4, r0
    if (evq->evq_owner != t) {
    9740:	6833      	ldr	r3, [r6, #0]
    9742:	4283      	cmp	r3, r0
    9744:	d001      	beq.n	974a <os_eventq_get+0x14>
        if (evq->evq_owner == NULL) {
    9746:	b923      	cbnz	r3, 9752 <os_eventq_get+0x1c>
            evq->evq_owner = t;
    9748:	6030      	str	r0, [r6, #0]
             * by another.
             */
            assert(0);
        }
    }
    OS_ENTER_CRITICAL(sr);
    974a:	f000 fe97 	bl	a47c <os_arch_save_sr>
    974e:	4605      	mov	r5, r0
    9750:	e01e      	b.n	9790 <os_eventq_get+0x5a>
            assert(0);
    9752:	2300      	movs	r3, #0
    9754:	461a      	mov	r2, r3
    9756:	4619      	mov	r1, r3
    9758:	4618      	mov	r0, r3
    975a:	f7ff fc77 	bl	904c <__assert_func>
pull_one:
    ev = STAILQ_FIRST(&evq->evq_list);
    if (ev) {
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    975e:	f106 0308 	add.w	r3, r6, #8
    9762:	60f3      	str	r3, [r6, #12]
    9764:	e01b      	b.n	979e <os_eventq_get+0x68>
        ev->ev_queued = 0;
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    } else {
        evq->evq_task = t;
    9766:	6074      	str	r4, [r6, #4]
        os_sched_sleep(evq->evq_task, OS_TIMEOUT_NEVER);
    9768:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    976c:	4620      	mov	r0, r4
    976e:	f000 fa55 	bl	9c1c <os_sched_sleep>
        t->t_flags |= OS_TASK_FLAG_EVQ_WAIT;
    9772:	7b63      	ldrb	r3, [r4, #13]
    9774:	f043 0308 	orr.w	r3, r3, #8
    9778:	7363      	strb	r3, [r4, #13]
        OS_EXIT_CRITICAL(sr);
    977a:	4628      	mov	r0, r5
    977c:	f000 fe84 	bl	a488 <os_arch_restore_sr>

        os_sched(NULL);
    9780:	2000      	movs	r0, #0
    9782:	f000 fb53 	bl	9e2c <os_sched>

        OS_ENTER_CRITICAL(sr);
    9786:	f000 fe79 	bl	a47c <os_arch_save_sr>
    978a:	4605      	mov	r5, r0
        evq->evq_task = NULL;
    978c:	2300      	movs	r3, #0
    978e:	6073      	str	r3, [r6, #4]
    ev = STAILQ_FIRST(&evq->evq_list);
    9790:	68b7      	ldr	r7, [r6, #8]
    if (ev) {
    9792:	2f00      	cmp	r7, #0
    9794:	d0e7      	beq.n	9766 <os_eventq_get+0x30>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    9796:	68fb      	ldr	r3, [r7, #12]
    9798:	60b3      	str	r3, [r6, #8]
    979a:	2b00      	cmp	r3, #0
    979c:	d0df      	beq.n	975e <os_eventq_get+0x28>
        ev->ev_queued = 0;
    979e:	2300      	movs	r3, #0
    97a0:	703b      	strb	r3, [r7, #0]
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    97a2:	7b63      	ldrb	r3, [r4, #13]
    97a4:	f023 0308 	bic.w	r3, r3, #8
    97a8:	7363      	strb	r3, [r4, #13]
        goto pull_one;
    }
    OS_EXIT_CRITICAL(sr);
    97aa:	4628      	mov	r0, r5
    97ac:	f000 fe6c 	bl	a488 <os_arch_restore_sr>
#if MYNEWT_VAL(OS_EVENTQ_DEBUG)
    evq->evq_prev = ev;
#endif

    return (ev);
}
    97b0:	4638      	mov	r0, r7
    97b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000097b4 <os_eventq_run>:
}
#endif

void
os_eventq_run(struct os_eventq *evq)
{
    97b4:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    struct os_eventq_mon *mon;
    uint32_t ticks;
#endif

    ev = os_eventq_get(evq);
    97b6:	f7ff ffbe 	bl	9736 <os_eventq_get>
    assert(ev->ev_cb != NULL);
    97ba:	6843      	ldr	r3, [r0, #4]
    97bc:	b10b      	cbz	r3, 97c2 <os_eventq_run+0xe>
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    ticks = os_cputime_get32();
#endif
    ev->ev_cb(ev);
    97be:	4798      	blx	r3
        if (ticks > mon->em_max) {
            mon->em_max = ticks;
        }
    }
#endif
}
    97c0:	bd08      	pop	{r3, pc}
    assert(ev->ev_cb != NULL);
    97c2:	461a      	mov	r2, r3
    97c4:	4619      	mov	r1, r3
    97c6:	4618      	mov	r0, r3
    97c8:	f7ff fc40 	bl	904c <__assert_func>

000097cc <os_eventq_remove>:
    return (ev);
}

void
os_eventq_remove(struct os_eventq *evq, struct os_event *ev)
{
    97cc:	b538      	push	{r3, r4, r5, lr}
    97ce:	4605      	mov	r5, r0
    97d0:	460c      	mov	r4, r1
    os_sr_t sr;

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_REMOVE, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
    97d2:	f000 fe53 	bl	a47c <os_arch_save_sr>
    if (OS_EVENT_QUEUED(ev)) {
    97d6:	7823      	ldrb	r3, [r4, #0]
    97d8:	b14b      	cbz	r3, 97ee <os_eventq_remove+0x22>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    97da:	68ab      	ldr	r3, [r5, #8]
    97dc:	42a3      	cmp	r3, r4
    97de:	d00b      	beq.n	97f8 <os_eventq_remove+0x2c>
    97e0:	461a      	mov	r2, r3
    97e2:	68db      	ldr	r3, [r3, #12]
    97e4:	42a3      	cmp	r3, r4
    97e6:	d1fb      	bne.n	97e0 <os_eventq_remove+0x14>
    97e8:	68db      	ldr	r3, [r3, #12]
    97ea:	60d3      	str	r3, [r2, #12]
    97ec:	b163      	cbz	r3, 9808 <os_eventq_remove+0x3c>
    }
    ev->ev_queued = 0;
    97ee:	2300      	movs	r3, #0
    97f0:	7023      	strb	r3, [r4, #0]
    OS_EXIT_CRITICAL(sr);
    97f2:	f000 fe49 	bl	a488 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_REMOVE);
}
    97f6:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    97f8:	68db      	ldr	r3, [r3, #12]
    97fa:	60ab      	str	r3, [r5, #8]
    97fc:	2b00      	cmp	r3, #0
    97fe:	d1f6      	bne.n	97ee <os_eventq_remove+0x22>
    9800:	f105 0308 	add.w	r3, r5, #8
    9804:	60eb      	str	r3, [r5, #12]
    9806:	e7f2      	b.n	97ee <os_eventq_remove+0x22>
    9808:	320c      	adds	r2, #12
    980a:	60ea      	str	r2, [r5, #12]
    980c:	e7ef      	b.n	97ee <os_eventq_remove+0x22>
	...

00009810 <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
    9810:	4800      	ldr	r0, [pc, #0]	; (9814 <os_eventq_dflt_get+0x4>)
    9812:	4770      	bx	lr
    9814:	2000266c 	.word	0x2000266c

00009818 <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
    9818:	2800      	cmp	r0, #0
    981a:	d031      	beq.n	9880 <os_mempool_init_internal+0x68>
{
    981c:	b430      	push	{r4, r5}
    981e:	4604      	mov	r4, r0
    if (!mp || (block_size == 0)) {
    9820:	2a00      	cmp	r2, #0
    9822:	d02f      	beq.n	9884 <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
    9824:	b1bb      	cbz	r3, 9856 <os_mempool_init_internal+0x3e>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
    9826:	b113      	cbz	r3, 982e <os_mempool_init_internal+0x16>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
    9828:	f013 0f03 	tst.w	r3, #3
    982c:	d12c      	bne.n	9888 <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
    982e:	6022      	str	r2, [r4, #0]
    mp->mp_num_free = blocks;
    9830:	80e1      	strh	r1, [r4, #6]
    mp->mp_min_free = blocks;
    9832:	8121      	strh	r1, [r4, #8]
    mp->mp_flags = flags;
    9834:	f89d 000c 	ldrb.w	r0, [sp, #12]
    9838:	72a0      	strb	r0, [r4, #10]
    mp->mp_num_blocks = blocks;
    983a:	80a1      	strh	r1, [r4, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
    983c:	60e3      	str	r3, [r4, #12]
    mp->name = name;
    983e:	9802      	ldr	r0, [sp, #8]
    9840:	61a0      	str	r0, [r4, #24]
    SLIST_FIRST(mp) = membuf;
    9842:	6163      	str	r3, [r4, #20]

    if (blocks > 0) {
    9844:	b199      	cbz	r1, 986e <os_mempool_init_internal+0x56>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
    9846:	f012 0f03 	tst.w	r2, #3
    984a:	d002      	beq.n	9852 <os_mempool_init_internal+0x3a>
    984c:	f022 0203 	bic.w	r2, r2, #3
    9850:	3204      	adds	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
    9852:	2001      	movs	r0, #1
    9854:	e007      	b.n	9866 <os_mempool_init_internal+0x4e>
    if ((!membuf) && (blocks != 0)) {
    9856:	2900      	cmp	r1, #0
    9858:	d0e5      	beq.n	9826 <os_mempool_init_internal+0xe>
        return OS_INVALID_PARM;
    985a:	2003      	movs	r0, #3
    985c:	e00e      	b.n	987c <os_mempool_init_internal+0x64>
            block_addr += true_block_size;
    985e:	189d      	adds	r5, r3, r2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
    9860:	601d      	str	r5, [r3, #0]
        for (i = 1; i < blocks; i++) {
    9862:	3001      	adds	r0, #1
            block_addr += true_block_size;
    9864:	462b      	mov	r3, r5
        for (i = 1; i < blocks; i++) {
    9866:	4281      	cmp	r1, r0
    9868:	dcf9      	bgt.n	985e <os_mempool_init_internal+0x46>
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
    986a:	2200      	movs	r2, #0
    986c:	601a      	str	r2, [r3, #0]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
    986e:	2000      	movs	r0, #0
    9870:	6120      	str	r0, [r4, #16]
    9872:	4b06      	ldr	r3, [pc, #24]	; (988c <os_mempool_init_internal+0x74>)
    9874:	685a      	ldr	r2, [r3, #4]
    9876:	6014      	str	r4, [r2, #0]
    9878:	3410      	adds	r4, #16
    987a:	605c      	str	r4, [r3, #4]

    return OS_OK;
}
    987c:	bc30      	pop	{r4, r5}
    987e:	4770      	bx	lr
        return OS_INVALID_PARM;
    9880:	2003      	movs	r0, #3
}
    9882:	4770      	bx	lr
        return OS_INVALID_PARM;
    9884:	2003      	movs	r0, #3
    9886:	e7f9      	b.n	987c <os_mempool_init_internal+0x64>
            return OS_MEM_NOT_ALIGNED;
    9888:	2004      	movs	r0, #4
    988a:	e7f7      	b.n	987c <os_mempool_init_internal+0x64>
    988c:	2000267c 	.word	0x2000267c

00009890 <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
    9890:	b510      	push	{r4, lr}
    9892:	b082      	sub	sp, #8
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
    9894:	2400      	movs	r4, #0
    9896:	9401      	str	r4, [sp, #4]
    9898:	9c04      	ldr	r4, [sp, #16]
    989a:	9400      	str	r4, [sp, #0]
    989c:	f7ff ffbc 	bl	9818 <os_mempool_init_internal>
}
    98a0:	b002      	add	sp, #8
    98a2:	bd10      	pop	{r4, pc}

000098a4 <os_memblock_get>:
    return 1;
}

void *
os_memblock_get(struct os_mempool *mp)
{
    98a4:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)mp);

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
    98a6:	4604      	mov	r4, r0
    98a8:	b198      	cbz	r0, 98d2 <os_memblock_get+0x2e>
        OS_ENTER_CRITICAL(sr);
    98aa:	f000 fde7 	bl	a47c <os_arch_save_sr>
        /* Check for any free */
        if (mp->mp_num_free) {
    98ae:	88e3      	ldrh	r3, [r4, #6]
    98b0:	b153      	cbz	r3, 98c8 <os_memblock_get+0x24>
            /* Get a free block */
            block = SLIST_FIRST(mp);
    98b2:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
    98b4:	682a      	ldr	r2, [r5, #0]
    98b6:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
    98b8:	3b01      	subs	r3, #1
    98ba:	b29b      	uxth	r3, r3
    98bc:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
    98be:	8922      	ldrh	r2, [r4, #8]
    98c0:	4293      	cmp	r3, r2
    98c2:	d202      	bcs.n	98ca <os_memblock_get+0x26>
                mp->mp_min_free = mp->mp_num_free;
    98c4:	8123      	strh	r3, [r4, #8]
    98c6:	e000      	b.n	98ca <os_memblock_get+0x26>
    block = NULL;
    98c8:	2500      	movs	r5, #0
            }
        }
        OS_EXIT_CRITICAL(sr);
    98ca:	f000 fddd 	bl	a488 <os_arch_restore_sr>
    }

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)block);

    return (void *)block;
}
    98ce:	4628      	mov	r0, r5
    98d0:	bd38      	pop	{r3, r4, r5, pc}
    block = NULL;
    98d2:	4605      	mov	r5, r0
    return (void *)block;
    98d4:	e7fb      	b.n	98ce <os_memblock_get+0x2a>

000098d6 <os_memblock_put_from_cb>:

os_error_t
os_memblock_put_from_cb(struct os_mempool *mp, void *block_addr)
{
    98d6:	b538      	push	{r3, r4, r5, lr}
    98d8:	4604      	mov	r4, r0
    98da:	460d      	mov	r5, r1

    os_mempool_guard_check(mp, block_addr);
    os_mempool_poison(mp, block_addr);

    block = (struct os_memblock *)block_addr;
    OS_ENTER_CRITICAL(sr);
    98dc:	f000 fdce 	bl	a47c <os_arch_save_sr>

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
    98e0:	6963      	ldr	r3, [r4, #20]
    98e2:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;
    98e4:	6165      	str	r5, [r4, #20]

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
    98e6:	88e3      	ldrh	r3, [r4, #6]
    98e8:	3301      	adds	r3, #1
    98ea:	80e3      	strh	r3, [r4, #6]

    OS_EXIT_CRITICAL(sr);
    98ec:	f000 fdcc 	bl	a488 <os_arch_restore_sr>

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT_FROM_CB, (uint32_t)OS_OK);

    return OS_OK;
}
    98f0:	2000      	movs	r0, #0
    98f2:	bd38      	pop	{r3, r4, r5, pc}

000098f4 <os_memblock_put>:

    os_trace_api_u32x2(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)mp,
                       (uint32_t)block_addr);

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
    98f4:	b178      	cbz	r0, 9916 <os_memblock_put+0x22>
    98f6:	4603      	mov	r3, r0
    98f8:	b179      	cbz	r1, 991a <os_memblock_put+0x26>
{
    98fa:	b510      	push	{r4, lr}
    }
#endif
    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & OS_MEMPOOL_F_EXT) {
    98fc:	7a82      	ldrb	r2, [r0, #10]
    98fe:	f012 0f01 	tst.w	r2, #1
    9902:	d004      	beq.n	990e <os_memblock_put+0x1a>
        mpe = (struct os_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
    9904:	69c4      	ldr	r4, [r0, #28]
    9906:	b114      	cbz	r4, 990e <os_memblock_put+0x1a>
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
    9908:	6a02      	ldr	r2, [r0, #32]
    990a:	47a0      	blx	r4
            goto done;
    990c:	e002      	b.n	9914 <os_memblock_put+0x20>
        }
    }

    /* No callback; free the block. */
    ret = os_memblock_put_from_cb(mp, block_addr);
    990e:	4618      	mov	r0, r3
    9910:	f7ff ffe1 	bl	98d6 <os_memblock_put_from_cb>

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)ret);
    return ret;
}
    9914:	bd10      	pop	{r4, pc}
        ret = OS_INVALID_PARM;
    9916:	2003      	movs	r0, #3
    9918:	4770      	bx	lr
    991a:	2003      	movs	r0, #3
}
    991c:	4770      	bx	lr
	...

00009920 <os_mempool_info_get_next>:

struct os_mempool *
os_mempool_info_get_next(struct os_mempool *mp, struct os_mempool_info *omi)
{
    9920:	b510      	push	{r4, lr}
    9922:	460b      	mov	r3, r1
    struct os_mempool *cur;

    if (mp == NULL) {
    9924:	b188      	cbz	r0, 994a <os_mempool_info_get_next+0x2a>
        cur = STAILQ_FIRST(&g_os_mempool_list);
    } else {
        cur = STAILQ_NEXT(mp, mp_list);
    9926:	6904      	ldr	r4, [r0, #16]
    }

    if (cur == NULL) {
    9928:	b16c      	cbz	r4, 9946 <os_mempool_info_get_next+0x26>
        return (NULL);
    }

    omi->omi_block_size = cur->mp_block_size;
    992a:	6822      	ldr	r2, [r4, #0]
    992c:	601a      	str	r2, [r3, #0]
    omi->omi_num_blocks = cur->mp_num_blocks;
    992e:	88a2      	ldrh	r2, [r4, #4]
    9930:	605a      	str	r2, [r3, #4]
    omi->omi_num_free = cur->mp_num_free;
    9932:	88e2      	ldrh	r2, [r4, #6]
    9934:	609a      	str	r2, [r3, #8]
    omi->omi_min_free = cur->mp_min_free;
    9936:	8922      	ldrh	r2, [r4, #8]
    9938:	60da      	str	r2, [r3, #12]
    strncpy(omi->omi_name, cur->name, sizeof(omi->omi_name));
    993a:	2220      	movs	r2, #32
    993c:	69a1      	ldr	r1, [r4, #24]
    993e:	f103 0010 	add.w	r0, r3, #16
    9942:	f004 f89d 	bl	da80 <strncpy>

    return (cur);
}
    9946:	4620      	mov	r0, r4
    9948:	bd10      	pop	{r4, pc}
        cur = STAILQ_FIRST(&g_os_mempool_list);
    994a:	4a01      	ldr	r2, [pc, #4]	; (9950 <os_mempool_info_get_next+0x30>)
    994c:	6814      	ldr	r4, [r2, #0]
    994e:	e7eb      	b.n	9928 <os_mempool_info_get_next+0x8>
    9950:	2000267c 	.word	0x2000267c

00009954 <os_mempool_module_init>:

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
    9954:	4b02      	ldr	r3, [pc, #8]	; (9960 <os_mempool_module_init+0xc>)
    9956:	2200      	movs	r2, #0
    9958:	601a      	str	r2, [r3, #0]
    995a:	605b      	str	r3, [r3, #4]
}
    995c:	4770      	bx	lr
    995e:	bf00      	nop
    9960:	2000267c 	.word	0x2000267c

00009964 <os_msys_find_biggest_pool>:

static struct os_mbuf_pool *
os_msys_find_biggest_pool(void)
{
    /* Mempools are sorted by the blocksize, so just return last one */
    return STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    9964:	4b02      	ldr	r3, [pc, #8]	; (9970 <os_msys_find_biggest_pool+0xc>)
    9966:	6818      	ldr	r0, [r3, #0]
    9968:	b108      	cbz	r0, 996e <os_msys_find_biggest_pool+0xa>
    996a:	6858      	ldr	r0, [r3, #4]
    996c:	3808      	subs	r0, #8
}
    996e:	4770      	bx	lr
    9970:	20000540 	.word	0x20000540

00009974 <os_msys_find_pool>:

static struct os_mbuf_pool *
os_msys_find_pool(uint16_t dsize)
{
    9974:	4602      	mov	r2, r0
    struct os_mbuf_pool *pool;

    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    9976:	4b09      	ldr	r3, [pc, #36]	; (999c <os_msys_find_pool+0x28>)
    9978:	6819      	ldr	r1, [r3, #0]
    997a:	4608      	mov	r0, r1
    997c:	e000      	b.n	9980 <os_msys_find_pool+0xc>
    997e:	6880      	ldr	r0, [r0, #8]
    9980:	b110      	cbz	r0, 9988 <os_msys_find_pool+0x14>
        if (dsize <= pool->omp_databuf_len) {
    9982:	8803      	ldrh	r3, [r0, #0]
    9984:	4293      	cmp	r3, r2
    9986:	d3fa      	bcc.n	997e <os_msys_find_pool+0xa>
            break;
        }
    }

    if (!pool) {
    9988:	b100      	cbz	r0, 998c <os_msys_find_pool+0x18>
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    }

    return (pool);
}
    998a:	4770      	bx	lr
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    998c:	b119      	cbz	r1, 9996 <os_msys_find_pool+0x22>
    998e:	4b03      	ldr	r3, [pc, #12]	; (999c <os_msys_find_pool+0x28>)
    9990:	6858      	ldr	r0, [r3, #4]
    9992:	3808      	subs	r0, #8
    9994:	4770      	bx	lr
    9996:	4608      	mov	r0, r1
    return (pool);
    9998:	e7f7      	b.n	998a <os_msys_find_pool+0x16>
    999a:	bf00      	nop
    999c:	20000540 	.word	0x20000540

000099a0 <os_msys_register>:
{
    99a0:	b430      	push	{r4, r5}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    99a2:	4b11      	ldr	r3, [pc, #68]	; (99e8 <os_msys_register+0x48>)
    99a4:	681d      	ldr	r5, [r3, #0]
    99a6:	462b      	mov	r3, r5
    prev = NULL;
    99a8:	2400      	movs	r4, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    99aa:	e001      	b.n	99b0 <os_msys_register+0x10>
        prev = pool;
    99ac:	461c      	mov	r4, r3
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    99ae:	689b      	ldr	r3, [r3, #8]
    99b0:	b11b      	cbz	r3, 99ba <os_msys_register+0x1a>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
    99b2:	8801      	ldrh	r1, [r0, #0]
    99b4:	881a      	ldrh	r2, [r3, #0]
    99b6:	4291      	cmp	r1, r2
    99b8:	d2f8      	bcs.n	99ac <os_msys_register+0xc>
    if (prev) {
    99ba:	b15c      	cbz	r4, 99d4 <os_msys_register+0x34>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
    99bc:	68a3      	ldr	r3, [r4, #8]
    99be:	6083      	str	r3, [r0, #8]
    99c0:	b11b      	cbz	r3, 99ca <os_msys_register+0x2a>
    99c2:	60a0      	str	r0, [r4, #8]
}
    99c4:	2000      	movs	r0, #0
    99c6:	bc30      	pop	{r4, r5}
    99c8:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
    99ca:	f100 0308 	add.w	r3, r0, #8
    99ce:	4a06      	ldr	r2, [pc, #24]	; (99e8 <os_msys_register+0x48>)
    99d0:	6053      	str	r3, [r2, #4]
    99d2:	e7f6      	b.n	99c2 <os_msys_register+0x22>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
    99d4:	6085      	str	r5, [r0, #8]
    99d6:	b115      	cbz	r5, 99de <os_msys_register+0x3e>
    99d8:	4b03      	ldr	r3, [pc, #12]	; (99e8 <os_msys_register+0x48>)
    99da:	6018      	str	r0, [r3, #0]
    99dc:	e7f2      	b.n	99c4 <os_msys_register+0x24>
    99de:	f100 0308 	add.w	r3, r0, #8
    99e2:	4a01      	ldr	r2, [pc, #4]	; (99e8 <os_msys_register+0x48>)
    99e4:	6053      	str	r3, [r2, #4]
    99e6:	e7f7      	b.n	99d8 <os_msys_register+0x38>
    99e8:	20000540 	.word	0x20000540

000099ec <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
    99ec:	b530      	push	{r4, r5, lr}
    99ee:	b083      	sub	sp, #12
    99f0:	4614      	mov	r4, r2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
    99f2:	9d07      	ldr	r5, [sp, #28]
    99f4:	9501      	str	r5, [sp, #4]
    99f6:	9d06      	ldr	r5, [sp, #24]
    99f8:	9500      	str	r5, [sp, #0]
    99fa:	f004 fcbf 	bl	e37c <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
    99fe:	b138      	cbz	r0, 9a10 <os_msys_init_once+0x24>
    9a00:	2000      	movs	r0, #0
    9a02:	9000      	str	r0, [sp, #0]
    9a04:	4b09      	ldr	r3, [pc, #36]	; (9a2c <os_msys_init_once+0x40>)
    9a06:	681d      	ldr	r5, [r3, #0]
    9a08:	4603      	mov	r3, r0
    9a0a:	4602      	mov	r2, r0
    9a0c:	4601      	mov	r1, r0
    9a0e:	47a8      	blx	r5

    rc = os_msys_register(mbuf_pool);
    9a10:	4620      	mov	r0, r4
    9a12:	f7ff ffc5 	bl	99a0 <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
    9a16:	b138      	cbz	r0, 9a28 <os_msys_init_once+0x3c>
    9a18:	2000      	movs	r0, #0
    9a1a:	9000      	str	r0, [sp, #0]
    9a1c:	4b03      	ldr	r3, [pc, #12]	; (9a2c <os_msys_init_once+0x40>)
    9a1e:	681c      	ldr	r4, [r3, #0]
    9a20:	4603      	mov	r3, r0
    9a22:	4602      	mov	r2, r0
    9a24:	4601      	mov	r1, r0
    9a26:	47a0      	blx	r4
}
    9a28:	b003      	add	sp, #12
    9a2a:	bd30      	pop	{r4, r5, pc}
    9a2c:	2000064c 	.word	0x2000064c

00009a30 <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
    9a30:	4b02      	ldr	r3, [pc, #8]	; (9a3c <os_msys_reset+0xc>)
    9a32:	2200      	movs	r2, #0
    9a34:	601a      	str	r2, [r3, #0]
    9a36:	605b      	str	r3, [r3, #4]
}
    9a38:	4770      	bx	lr
    9a3a:	bf00      	nop
    9a3c:	20000540 	.word	0x20000540

00009a40 <os_msys_get_pkthdr>:
{
    9a40:	b510      	push	{r4, lr}
    9a42:	460c      	mov	r4, r1
    if (dsize == 0) {
    9a44:	b930      	cbnz	r0, 9a54 <os_msys_get_pkthdr+0x14>
        pool = os_msys_find_biggest_pool();
    9a46:	f7ff ff8d 	bl	9964 <os_msys_find_biggest_pool>
    if (!pool) {
    9a4a:	b110      	cbz	r0, 9a52 <os_msys_get_pkthdr+0x12>
    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
    9a4c:	b2e1      	uxtb	r1, r4
    9a4e:	f000 fe3d 	bl	a6cc <os_mbuf_get_pkthdr>
}
    9a52:	bd10      	pop	{r4, pc}
    9a54:	f101 0308 	add.w	r3, r1, #8
    9a58:	b29b      	uxth	r3, r3
        pool = os_msys_find_pool(dsize + total_pkthdr_len);
    9a5a:	4403      	add	r3, r0
    9a5c:	b298      	uxth	r0, r3
    9a5e:	f7ff ff89 	bl	9974 <os_msys_find_pool>
    9a62:	e7f2      	b.n	9a4a <os_msys_get_pkthdr+0xa>

00009a64 <os_msys_init>:

void
os_msys_init(void)
{
    9a64:	b500      	push	{lr}
    9a66:	b083      	sub	sp, #12
    int rc;

    os_msys_reset();
    9a68:	f7ff ffe2 	bl	9a30 <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
    9a6c:	4b06      	ldr	r3, [pc, #24]	; (9a88 <os_msys_init+0x24>)
    9a6e:	9301      	str	r3, [sp, #4]
    9a70:	f44f 7392 	mov.w	r3, #292	; 0x124
    9a74:	9300      	str	r3, [sp, #0]
    9a76:	230c      	movs	r3, #12
    9a78:	4a04      	ldr	r2, [pc, #16]	; (9a8c <os_msys_init+0x28>)
    9a7a:	4905      	ldr	r1, [pc, #20]	; (9a90 <os_msys_init+0x2c>)
    9a7c:	4805      	ldr	r0, [pc, #20]	; (9a94 <os_msys_init+0x30>)
    9a7e:	f7ff ffb5 	bl	99ec <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
    9a82:	b003      	add	sp, #12
    9a84:	f85d fb04 	ldr.w	pc, [sp], #4
    9a88:	00022e50 	.word	0x00022e50
    9a8c:	20003434 	.word	0x20003434
    9a90:	20003440 	.word	0x20003440
    9a94:	20002684 	.word	0x20002684

00009a98 <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
    9a98:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
    9a9a:	4b05      	ldr	r3, [pc, #20]	; (9ab0 <os_sanity_check_list_lock+0x18>)
    9a9c:	6818      	ldr	r0, [r3, #0]
    9a9e:	b900      	cbnz	r0, 9aa2 <os_sanity_check_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
    9aa0:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
    9aa2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9aa6:	4803      	ldr	r0, [pc, #12]	; (9ab4 <os_sanity_check_list_lock+0x1c>)
    9aa8:	f001 f842 	bl	ab30 <os_mutex_pend>
    if (rc != OS_OK) {
    9aac:	e7f8      	b.n	9aa0 <os_sanity_check_list_lock+0x8>
    9aae:	bf00      	nop
    9ab0:	20002658 	.word	0x20002658
    9ab4:	20003460 	.word	0x20003460

00009ab8 <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
    9ab8:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
    9aba:	4b04      	ldr	r3, [pc, #16]	; (9acc <os_sanity_check_list_unlock+0x14>)
    9abc:	6818      	ldr	r0, [r3, #0]
    9abe:	b900      	cbnz	r0, 9ac2 <os_sanity_check_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
    9ac0:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&g_os_sanity_check_mu);
    9ac2:	4803      	ldr	r0, [pc, #12]	; (9ad0 <os_sanity_check_list_unlock+0x18>)
    9ac4:	f000 ffd8 	bl	aa78 <os_mutex_release>
    if (rc != 0) {
    9ac8:	e7fa      	b.n	9ac0 <os_sanity_check_list_unlock+0x8>
    9aca:	bf00      	nop
    9acc:	20002658 	.word	0x20002658
    9ad0:	20003460 	.word	0x20003460

00009ad4 <os_sanity_check_init>:
{
    9ad4:	4603      	mov	r3, r0
    memset(sc, 0, sizeof(*sc));
    9ad6:	2000      	movs	r0, #0
    9ad8:	6018      	str	r0, [r3, #0]
    9ada:	6058      	str	r0, [r3, #4]
    9adc:	6098      	str	r0, [r3, #8]
    9ade:	60d8      	str	r0, [r3, #12]
    9ae0:	6118      	str	r0, [r3, #16]
}
    9ae2:	4770      	bx	lr

00009ae4 <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
    9ae4:	b510      	push	{r4, lr}
    9ae6:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
    9ae8:	f7ff ffd6 	bl	9a98 <os_sanity_check_list_lock>
    if (rc != OS_OK) {
    9aec:	b100      	cbz	r0, 9af0 <os_sanity_check_register+0xc>
    }

    return (0);
err:
    return (rc);
}
    9aee:	bd10      	pop	{r4, pc}
    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
    9af0:	4b03      	ldr	r3, [pc, #12]	; (9b00 <os_sanity_check_register+0x1c>)
    9af2:	681a      	ldr	r2, [r3, #0]
    9af4:	6122      	str	r2, [r4, #16]
    9af6:	601c      	str	r4, [r3, #0]
    rc = os_sanity_check_list_unlock();
    9af8:	f7ff ffde 	bl	9ab8 <os_sanity_check_list_unlock>
    if (rc != OS_OK) {
    9afc:	e7f7      	b.n	9aee <os_sanity_check_register+0xa>
    9afe:	bf00      	nop
    9b00:	2000345c 	.word	0x2000345c

00009b04 <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
    9b04:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
    9b06:	f7ff ffc7 	bl	9a98 <os_sanity_check_list_lock>
    if (rc != 0) {
    9b0a:	b910      	cbnz	r0, 9b12 <os_sanity_run+0xe>
        assert(0);
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
    9b0c:	4b17      	ldr	r3, [pc, #92]	; (9b6c <os_sanity_run+0x68>)
    9b0e:	681c      	ldr	r4, [r3, #0]
    9b10:	e00e      	b.n	9b30 <os_sanity_run+0x2c>
        assert(0);
    9b12:	2300      	movs	r3, #0
    9b14:	461a      	mov	r2, r3
    9b16:	4619      	mov	r1, r3
    9b18:	4618      	mov	r0, r3
    9b1a:	f7ff fa97 	bl	904c <__assert_func>
                sc->sc_checkin_last = os_time_get();
                continue;
            }
        }

        if (OS_TIME_TICK_GT(os_time_get(),
    9b1e:	f000 fb87 	bl	a230 <os_time_get>
    9b22:	6823      	ldr	r3, [r4, #0]
    9b24:	6862      	ldr	r2, [r4, #4]
    9b26:	4413      	add	r3, r2
    9b28:	1ac0      	subs	r0, r0, r3
    9b2a:	2800      	cmp	r0, #0
    9b2c:	dc0d      	bgt.n	9b4a <os_sanity_run+0x46>
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
    9b2e:	6924      	ldr	r4, [r4, #16]
    9b30:	b18c      	cbz	r4, 9b56 <os_sanity_run+0x52>
        if (sc->sc_func) {
    9b32:	68a3      	ldr	r3, [r4, #8]
    9b34:	2b00      	cmp	r3, #0
    9b36:	d0f2      	beq.n	9b1e <os_sanity_run+0x1a>
            rc = sc->sc_func(sc, sc->sc_arg);
    9b38:	68e1      	ldr	r1, [r4, #12]
    9b3a:	4620      	mov	r0, r4
    9b3c:	4798      	blx	r3
            if (rc == OS_OK) {
    9b3e:	2800      	cmp	r0, #0
    9b40:	d1ed      	bne.n	9b1e <os_sanity_run+0x1a>
                sc->sc_checkin_last = os_time_get();
    9b42:	f000 fb75 	bl	a230 <os_time_get>
    9b46:	6020      	str	r0, [r4, #0]
                continue;
    9b48:	e7f1      	b.n	9b2e <os_sanity_run+0x2a>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
    9b4a:	2300      	movs	r3, #0
    9b4c:	461a      	mov	r2, r3
    9b4e:	4619      	mov	r1, r3
    9b50:	4618      	mov	r0, r3
    9b52:	f7ff fa7b 	bl	904c <__assert_func>
        }
    }

    rc = os_sanity_check_list_unlock();
    9b56:	f7ff ffaf 	bl	9ab8 <os_sanity_check_list_unlock>
    if (rc != 0) {
    9b5a:	b900      	cbnz	r0, 9b5e <os_sanity_run+0x5a>
        assert(0);
    }
}
    9b5c:	bd10      	pop	{r4, pc}
        assert(0);
    9b5e:	2300      	movs	r3, #0
    9b60:	461a      	mov	r2, r3
    9b62:	4619      	mov	r1, r3
    9b64:	4618      	mov	r0, r3
    9b66:	f7ff fa71 	bl	904c <__assert_func>
    9b6a:	bf00      	nop
    9b6c:	2000345c 	.word	0x2000345c

00009b70 <os_sanity_init>:

int
os_sanity_init(void)
{
    9b70:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
    9b72:	4802      	ldr	r0, [pc, #8]	; (9b7c <os_sanity_init+0xc>)
    9b74:	f000 ff76 	bl	aa64 <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
    9b78:	bd08      	pop	{r3, pc}
    9b7a:	bf00      	nop
    9b7c:	20003460 	.word	0x20003460

00009b80 <os_sched_insert>:
{
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
    9b80:	7b03      	ldrb	r3, [r0, #12]
    9b82:	2b01      	cmp	r3, #1
    9b84:	d001      	beq.n	9b8a <os_sched_insert+0xa>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
    9b86:	2002      	movs	r0, #2
}
    9b88:	4770      	bx	lr
{
    9b8a:	b510      	push	{r4, lr}
    9b8c:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
    9b8e:	f000 fc75 	bl	a47c <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
    9b92:	4b0f      	ldr	r3, [pc, #60]	; (9bd0 <os_sched_insert+0x50>)
    9b94:	681b      	ldr	r3, [r3, #0]
    9b96:	b12b      	cbz	r3, 9ba4 <os_sched_insert+0x24>
        if (t->t_prio < entry->t_prio) {
    9b98:	7ae1      	ldrb	r1, [r4, #11]
    9b9a:	7ada      	ldrb	r2, [r3, #11]
    9b9c:	4291      	cmp	r1, r2
    9b9e:	d301      	bcc.n	9ba4 <os_sched_insert+0x24>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
    9ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    9ba2:	e7f8      	b.n	9b96 <os_sched_insert+0x16>
    if (entry) {
    9ba4:	b153      	cbz	r3, 9bbc <os_sched_insert+0x3c>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
    9ba6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    9ba8:	64a2      	str	r2, [r4, #72]	; 0x48
    9baa:	6463      	str	r3, [r4, #68]	; 0x44
    9bac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    9bae:	6014      	str	r4, [r2, #0]
    9bb0:	3444      	adds	r4, #68	; 0x44
    9bb2:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
    9bb4:	f000 fc68 	bl	a488 <os_arch_restore_sr>
    return (0);
    9bb8:	2000      	movs	r0, #0
}
    9bba:	bd10      	pop	{r4, pc}
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
    9bbc:	2300      	movs	r3, #0
    9bbe:	6463      	str	r3, [r4, #68]	; 0x44
    9bc0:	4b03      	ldr	r3, [pc, #12]	; (9bd0 <os_sched_insert+0x50>)
    9bc2:	685a      	ldr	r2, [r3, #4]
    9bc4:	64a2      	str	r2, [r4, #72]	; 0x48
    9bc6:	6014      	str	r4, [r2, #0]
    9bc8:	3444      	adds	r4, #68	; 0x44
    9bca:	605c      	str	r4, [r3, #4]
    9bcc:	e7f2      	b.n	9bb4 <os_sched_insert+0x34>
    9bce:	bf00      	nop
    9bd0:	20000548 	.word	0x20000548

00009bd4 <os_sched_ctx_sw_hook>:

void
os_sched_ctx_sw_hook(struct os_task *next_t)
{
    9bd4:	b410      	push	{r4}
    top = g_current_task->t_stacktop - g_current_task->t_stacksize;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(top[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
    9bd6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    9bd8:	3301      	adds	r3, #1
    9bda:	63c3      	str	r3, [r0, #60]	; 0x3c
    g_current_task->t_run_time += g_os_time - g_os_last_ctx_sw_time;
    9bdc:	4b06      	ldr	r3, [pc, #24]	; (9bf8 <os_sched_ctx_sw_hook+0x24>)
    9bde:	681c      	ldr	r4, [r3, #0]
    9be0:	4b06      	ldr	r3, [pc, #24]	; (9bfc <os_sched_ctx_sw_hook+0x28>)
    9be2:	6818      	ldr	r0, [r3, #0]
    9be4:	4906      	ldr	r1, [pc, #24]	; (9c00 <os_sched_ctx_sw_hook+0x2c>)
    9be6:	680b      	ldr	r3, [r1, #0]
    9be8:	1ac2      	subs	r2, r0, r3
    9bea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    9bec:	4413      	add	r3, r2
    9bee:	63a3      	str	r3, [r4, #56]	; 0x38
    g_os_last_ctx_sw_time = g_os_time;
    9bf0:	6008      	str	r0, [r1, #0]
}
    9bf2:	f85d 4b04 	ldr.w	r4, [sp], #4
    9bf6:	4770      	bx	lr
    9bf8:	2000346c 	.word	0x2000346c
    9bfc:	200034b0 	.word	0x200034b0
    9c00:	20003470 	.word	0x20003470

00009c04 <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
    9c04:	4b01      	ldr	r3, [pc, #4]	; (9c0c <os_sched_get_current_task+0x8>)
    9c06:	6818      	ldr	r0, [r3, #0]
    9c08:	4770      	bx	lr
    9c0a:	bf00      	nop
    9c0c:	2000346c 	.word	0x2000346c

00009c10 <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
    9c10:	4b01      	ldr	r3, [pc, #4]	; (9c18 <os_sched_set_current_task+0x8>)
    9c12:	6018      	str	r0, [r3, #0]
}
    9c14:	4770      	bx	lr
    9c16:	bf00      	nop
    9c18:	2000346c 	.word	0x2000346c

00009c1c <os_sched_sleep>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
    9c1c:	b538      	push	{r3, r4, r5, lr}
    9c1e:	4604      	mov	r4, r0
    9c20:	460d      	mov	r5, r1
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    9c22:	6c43      	ldr	r3, [r0, #68]	; 0x44
    9c24:	b183      	cbz	r3, 9c48 <os_sched_sleep+0x2c>
    9c26:	6c82      	ldr	r2, [r0, #72]	; 0x48
    9c28:	649a      	str	r2, [r3, #72]	; 0x48
    9c2a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    9c2c:	6c62      	ldr	r2, [r4, #68]	; 0x44
    9c2e:	601a      	str	r2, [r3, #0]
    t->t_state = OS_TASK_SLEEP;
    9c30:	2302      	movs	r3, #2
    9c32:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
    9c34:	f000 fafc 	bl	a230 <os_time_get>
    9c38:	4428      	add	r0, r5
    9c3a:	6360      	str	r0, [r4, #52]	; 0x34
    if (nticks == OS_TIMEOUT_NEVER) {
    9c3c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    9c40:	d006      	beq.n	9c50 <os_sched_sleep+0x34>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
    9c42:	4b18      	ldr	r3, [pc, #96]	; (9ca4 <os_sched_sleep+0x88>)
    9c44:	681b      	ldr	r3, [r3, #0]
    9c46:	e011      	b.n	9c6c <os_sched_sleep+0x50>
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    9c48:	6c82      	ldr	r2, [r0, #72]	; 0x48
    9c4a:	4b17      	ldr	r3, [pc, #92]	; (9ca8 <os_sched_sleep+0x8c>)
    9c4c:	605a      	str	r2, [r3, #4]
    9c4e:	e7ec      	b.n	9c2a <os_sched_sleep+0xe>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
    9c50:	7b63      	ldrb	r3, [r4, #13]
    9c52:	f043 0301 	orr.w	r3, r3, #1
    9c56:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    9c58:	2300      	movs	r3, #0
    9c5a:	6463      	str	r3, [r4, #68]	; 0x44
    9c5c:	4b11      	ldr	r3, [pc, #68]	; (9ca4 <os_sched_sleep+0x88>)
    9c5e:	685a      	ldr	r2, [r3, #4]
    9c60:	64a2      	str	r2, [r4, #72]	; 0x48
    9c62:	6014      	str	r4, [r2, #0]
    9c64:	3444      	adds	r4, #68	; 0x44
    9c66:	605c      	str	r4, [r3, #4]
    9c68:	e011      	b.n	9c8e <os_sched_sleep+0x72>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
    9c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    9c6c:	b13b      	cbz	r3, 9c7e <os_sched_sleep+0x62>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
    9c6e:	7b5a      	ldrb	r2, [r3, #13]
    9c70:	f012 0f01 	tst.w	r2, #1
    9c74:	d103      	bne.n	9c7e <os_sched_sleep+0x62>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
    9c76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    9c78:	1a12      	subs	r2, r2, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
    9c7a:	2a00      	cmp	r2, #0
    9c7c:	ddf5      	ble.n	9c6a <os_sched_sleep+0x4e>
                break;
            }
        }
        if (entry) {
    9c7e:	b143      	cbz	r3, 9c92 <os_sched_sleep+0x76>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
    9c80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    9c82:	64a2      	str	r2, [r4, #72]	; 0x48
    9c84:	6463      	str	r3, [r4, #68]	; 0x44
    9c86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    9c88:	6014      	str	r4, [r2, #0]
    9c8a:	3444      	adds	r4, #68	; 0x44
    9c8c:	649c      	str	r4, [r3, #72]	; 0x48
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
    9c8e:	2000      	movs	r0, #0
    9c90:	bd38      	pop	{r3, r4, r5, pc}
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    9c92:	2300      	movs	r3, #0
    9c94:	6463      	str	r3, [r4, #68]	; 0x44
    9c96:	4b03      	ldr	r3, [pc, #12]	; (9ca4 <os_sched_sleep+0x88>)
    9c98:	685a      	ldr	r2, [r3, #4]
    9c9a:	64a2      	str	r2, [r4, #72]	; 0x48
    9c9c:	6014      	str	r4, [r2, #0]
    9c9e:	3444      	adds	r4, #68	; 0x44
    9ca0:	605c      	str	r4, [r3, #4]
    9ca2:	e7f4      	b.n	9c8e <os_sched_sleep+0x72>
    9ca4:	20000550 	.word	0x20000550
    9ca8:	20000548 	.word	0x20000548

00009cac <os_sched_remove>:
 */
int
os_sched_remove(struct os_task *t)
{

    if (t->t_state == OS_TASK_SLEEP) {
    9cac:	7b03      	ldrb	r3, [r0, #12]
    9cae:	2b02      	cmp	r3, #2
    9cb0:	d014      	beq.n	9cdc <os_sched_remove+0x30>
        TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
    } else if (t->t_state == OS_TASK_READY) {
    9cb2:	2b01      	cmp	r3, #1
    9cb4:	d01e      	beq.n	9cf4 <os_sched_remove+0x48>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    }
    t->t_next_wakeup = 0;
    9cb6:	2300      	movs	r3, #0
    9cb8:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
    9cba:	7b43      	ldrb	r3, [r0, #13]
    9cbc:	f043 0301 	orr.w	r3, r3, #1
    9cc0:	7343      	strb	r3, [r0, #13]

    STAILQ_REMOVE(&g_os_task_list, t, os_task, t_os_task_list);
    9cc2:	4b18      	ldr	r3, [pc, #96]	; (9d24 <os_sched_remove+0x78>)
    9cc4:	681b      	ldr	r3, [r3, #0]
    9cc6:	4283      	cmp	r3, r0
    9cc8:	d020      	beq.n	9d0c <os_sched_remove+0x60>
    9cca:	461a      	mov	r2, r3
    9ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9cce:	4283      	cmp	r3, r0
    9cd0:	d1fb      	bne.n	9cca <os_sched_remove+0x1e>
    9cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9cd4:	6413      	str	r3, [r2, #64]	; 0x40
    9cd6:	b303      	cbz	r3, 9d1a <os_sched_remove+0x6e>

    os_trace_task_stop_exec();
    return OS_OK;
}
    9cd8:	2000      	movs	r0, #0
    9cda:	4770      	bx	lr
        TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
    9cdc:	6c43      	ldr	r3, [r0, #68]	; 0x44
    9cde:	b12b      	cbz	r3, 9cec <os_sched_remove+0x40>
    9ce0:	6c82      	ldr	r2, [r0, #72]	; 0x48
    9ce2:	649a      	str	r2, [r3, #72]	; 0x48
    9ce4:	6c83      	ldr	r3, [r0, #72]	; 0x48
    9ce6:	6c42      	ldr	r2, [r0, #68]	; 0x44
    9ce8:	601a      	str	r2, [r3, #0]
    9cea:	e7e4      	b.n	9cb6 <os_sched_remove+0xa>
    9cec:	6c82      	ldr	r2, [r0, #72]	; 0x48
    9cee:	4b0e      	ldr	r3, [pc, #56]	; (9d28 <os_sched_remove+0x7c>)
    9cf0:	605a      	str	r2, [r3, #4]
    9cf2:	e7f7      	b.n	9ce4 <os_sched_remove+0x38>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    9cf4:	6c43      	ldr	r3, [r0, #68]	; 0x44
    9cf6:	b12b      	cbz	r3, 9d04 <os_sched_remove+0x58>
    9cf8:	6c82      	ldr	r2, [r0, #72]	; 0x48
    9cfa:	649a      	str	r2, [r3, #72]	; 0x48
    9cfc:	6c83      	ldr	r3, [r0, #72]	; 0x48
    9cfe:	6c42      	ldr	r2, [r0, #68]	; 0x44
    9d00:	601a      	str	r2, [r3, #0]
    9d02:	e7d8      	b.n	9cb6 <os_sched_remove+0xa>
    9d04:	6c82      	ldr	r2, [r0, #72]	; 0x48
    9d06:	4b09      	ldr	r3, [pc, #36]	; (9d2c <os_sched_remove+0x80>)
    9d08:	605a      	str	r2, [r3, #4]
    9d0a:	e7f7      	b.n	9cfc <os_sched_remove+0x50>
    STAILQ_REMOVE(&g_os_task_list, t, os_task, t_os_task_list);
    9d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9d0e:	4a05      	ldr	r2, [pc, #20]	; (9d24 <os_sched_remove+0x78>)
    9d10:	6013      	str	r3, [r2, #0]
    9d12:	2b00      	cmp	r3, #0
    9d14:	d1e0      	bne.n	9cd8 <os_sched_remove+0x2c>
    9d16:	6052      	str	r2, [r2, #4]
    9d18:	e7de      	b.n	9cd8 <os_sched_remove+0x2c>
    9d1a:	3240      	adds	r2, #64	; 0x40
    9d1c:	4b01      	ldr	r3, [pc, #4]	; (9d24 <os_sched_remove+0x78>)
    9d1e:	605a      	str	r2, [r3, #4]
    9d20:	e7da      	b.n	9cd8 <os_sched_remove+0x2c>
    9d22:	bf00      	nop
    9d24:	20003474 	.word	0x20003474
    9d28:	20000550 	.word	0x20000550
    9d2c:	20000548 	.word	0x20000548

00009d30 <os_sched_wakeup>:
 *
 * NOTE: This function must be called with interrupts disabled.
 */
int
os_sched_wakeup(struct os_task *t)
{
    9d30:	b508      	push	{r3, lr}
    struct os_task_obj *os_obj;

    assert(t->t_state == OS_TASK_SLEEP);
    9d32:	7b03      	ldrb	r3, [r0, #12]
    9d34:	2b02      	cmp	r3, #2
    9d36:	d121      	bne.n	9d7c <os_sched_wakeup+0x4c>

    /* Remove self from object list if waiting on one */
    if (t->t_obj) {
    9d38:	69c2      	ldr	r2, [r0, #28]
    9d3a:	b162      	cbz	r2, 9d56 <os_sched_wakeup+0x26>
        os_obj = (struct os_task_obj *)t->t_obj;
        assert(!SLIST_EMPTY(&os_obj->obj_head));
    9d3c:	6813      	ldr	r3, [r2, #0]
    9d3e:	b31b      	cbz	r3, 9d88 <os_sched_wakeup+0x58>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
    9d40:	4283      	cmp	r3, r0
    9d42:	d026      	beq.n	9d92 <os_sched_wakeup+0x62>
    9d44:	461a      	mov	r2, r3
    9d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    9d48:	4283      	cmp	r3, r0
    9d4a:	d1fb      	bne.n	9d44 <os_sched_wakeup+0x14>
    9d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    9d4e:	64d3      	str	r3, [r2, #76]	; 0x4c
        SLIST_NEXT(t, t_obj_list) = NULL;
    9d50:	2300      	movs	r3, #0
    9d52:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
    9d54:	61c3      	str	r3, [r0, #28]
    }

    /* Remove task from sleep list */
    t->t_state = OS_TASK_READY;
    9d56:	2301      	movs	r3, #1
    9d58:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
    9d5a:	2300      	movs	r3, #0
    9d5c:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
    9d5e:	7b43      	ldrb	r3, [r0, #13]
    9d60:	f023 0301 	bic.w	r3, r3, #1
    9d64:	7343      	strb	r3, [r0, #13]
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
    9d66:	6c43      	ldr	r3, [r0, #68]	; 0x44
    9d68:	b1b3      	cbz	r3, 9d98 <os_sched_wakeup+0x68>
    9d6a:	6c82      	ldr	r2, [r0, #72]	; 0x48
    9d6c:	649a      	str	r2, [r3, #72]	; 0x48
    9d6e:	6c83      	ldr	r3, [r0, #72]	; 0x48
    9d70:	6c42      	ldr	r2, [r0, #68]	; 0x44
    9d72:	601a      	str	r2, [r3, #0]
    os_sched_insert(t);
    9d74:	f7ff ff04 	bl	9b80 <os_sched_insert>

    os_trace_task_start_ready(t);

    return (0);
}
    9d78:	2000      	movs	r0, #0
    9d7a:	bd08      	pop	{r3, pc}
    assert(t->t_state == OS_TASK_SLEEP);
    9d7c:	2300      	movs	r3, #0
    9d7e:	461a      	mov	r2, r3
    9d80:	4619      	mov	r1, r3
    9d82:	4618      	mov	r0, r3
    9d84:	f7ff f962 	bl	904c <__assert_func>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
    9d88:	461a      	mov	r2, r3
    9d8a:	4619      	mov	r1, r3
    9d8c:	4618      	mov	r0, r3
    9d8e:	f7ff f95d 	bl	904c <__assert_func>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
    9d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    9d94:	6013      	str	r3, [r2, #0]
    9d96:	e7db      	b.n	9d50 <os_sched_wakeup+0x20>
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
    9d98:	6c82      	ldr	r2, [r0, #72]	; 0x48
    9d9a:	4b01      	ldr	r3, [pc, #4]	; (9da0 <os_sched_wakeup+0x70>)
    9d9c:	605a      	str	r2, [r3, #4]
    9d9e:	e7e6      	b.n	9d6e <os_sched_wakeup+0x3e>
    9da0:	20000550 	.word	0x20000550

00009da4 <os_sched_os_timer_exp>:
 * removed from the sleep list and added to the run list.
 *
 */
void
os_sched_os_timer_exp(void)
{
    9da4:	b570      	push	{r4, r5, r6, lr}
    struct os_task *t;
    struct os_task *next;
    os_time_t now;
    os_sr_t sr;

    now = os_time_get();
    9da6:	f000 fa43 	bl	a230 <os_time_get>
    9daa:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
    9dac:	f000 fb66 	bl	a47c <os_arch_save_sr>
    9db0:	4606      	mov	r6, r0

    /*
     * Wakeup any tasks that have their sleep timer expired
     */
    t = TAILQ_FIRST(&g_os_sleep_list);
    9db2:	4b0a      	ldr	r3, [pc, #40]	; (9ddc <os_sched_os_timer_exp+0x38>)
    9db4:	6818      	ldr	r0, [r3, #0]
    while (t) {
    9db6:	e002      	b.n	9dbe <os_sched_os_timer_exp+0x1a>
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
            break;
        }
        next = TAILQ_NEXT(t, t_os_list);
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
            os_sched_wakeup(t);
    9db8:	f7ff ffba 	bl	9d30 <os_sched_wakeup>
        } else {
            break;
        }
        t = next;
    9dbc:	4620      	mov	r0, r4
    while (t) {
    9dbe:	b140      	cbz	r0, 9dd2 <os_sched_os_timer_exp+0x2e>
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
    9dc0:	7b43      	ldrb	r3, [r0, #13]
    9dc2:	f013 0f01 	tst.w	r3, #1
    9dc6:	d104      	bne.n	9dd2 <os_sched_os_timer_exp+0x2e>
        next = TAILQ_NEXT(t, t_os_list);
    9dc8:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
    9dca:	6b43      	ldr	r3, [r0, #52]	; 0x34
    9dcc:	1aeb      	subs	r3, r5, r3
    9dce:	2b00      	cmp	r3, #0
    9dd0:	daf2      	bge.n	9db8 <os_sched_os_timer_exp+0x14>
    }

    OS_EXIT_CRITICAL(sr);
    9dd2:	4630      	mov	r0, r6
    9dd4:	f000 fb58 	bl	a488 <os_arch_restore_sr>
}
    9dd8:	bd70      	pop	{r4, r5, r6, pc}
    9dda:	bf00      	nop
    9ddc:	20000550 	.word	0x20000550

00009de0 <os_sched_wakeup_ticks>:
 * Return the number of ticks until the first sleep timer expires.If there are
 * no such tasks then return OS_TIMEOUT_NEVER instead.
 */
os_time_t
os_sched_wakeup_ticks(os_time_t now)
{
    9de0:	b510      	push	{r4, lr}
    9de2:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_task *t;

    OS_ASSERT_CRITICAL();
    9de4:	f000 fb53 	bl	a48e <os_arch_in_critical>
    9de8:	b150      	cbz	r0, 9e00 <os_sched_wakeup_ticks+0x20>

    t = TAILQ_FIRST(&g_os_sleep_list);
    9dea:	4b0c      	ldr	r3, [pc, #48]	; (9e1c <os_sched_wakeup_ticks+0x3c>)
    9dec:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
    9dee:	b17b      	cbz	r3, 9e10 <os_sched_wakeup_ticks+0x30>
    9df0:	7b5a      	ldrb	r2, [r3, #13]
    9df2:	f012 0f01 	tst.w	r2, #1
    9df6:	d10e      	bne.n	9e16 <os_sched_wakeup_ticks+0x36>
        rt = OS_TIMEOUT_NEVER;
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
    9df8:	6b58      	ldr	r0, [r3, #52]	; 0x34
    9dfa:	1b00      	subs	r0, r0, r4
    9dfc:	d406      	bmi.n	9e0c <os_sched_wakeup_ticks+0x2c>
        rt = t->t_next_wakeup - now;
    } else {
        rt = 0;     /* wakeup time was in the past */
    }
    return (rt);
}
    9dfe:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
    9e00:	2300      	movs	r3, #0
    9e02:	461a      	mov	r2, r3
    9e04:	4619      	mov	r1, r3
    9e06:	4618      	mov	r0, r3
    9e08:	f7ff f920 	bl	904c <__assert_func>
        rt = 0;     /* wakeup time was in the past */
    9e0c:	2000      	movs	r0, #0
    9e0e:	e7f6      	b.n	9dfe <os_sched_wakeup_ticks+0x1e>
        rt = OS_TIMEOUT_NEVER;
    9e10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9e14:	e7f3      	b.n	9dfe <os_sched_wakeup_ticks+0x1e>
    9e16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
    9e1a:	e7f0      	b.n	9dfe <os_sched_wakeup_ticks+0x1e>
    9e1c:	20000550 	.word	0x20000550

00009e20 <os_sched_next_task>:
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
}
    9e20:	4b01      	ldr	r3, [pc, #4]	; (9e28 <os_sched_next_task+0x8>)
    9e22:	6818      	ldr	r0, [r3, #0]
    9e24:	4770      	bx	lr
    9e26:	bf00      	nop
    9e28:	20000548 	.word	0x20000548

00009e2c <os_sched>:
{
    9e2c:	b538      	push	{r3, r4, r5, lr}
    9e2e:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
    9e30:	f000 fb24 	bl	a47c <os_arch_save_sr>
    9e34:	4605      	mov	r5, r0
    if (!next_t) {
    9e36:	b134      	cbz	r4, 9e46 <os_sched+0x1a>
    os_arch_ctx_sw(next_t);
    9e38:	4620      	mov	r0, r4
    9e3a:	f000 fb15 	bl	a468 <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
    9e3e:	4628      	mov	r0, r5
    9e40:	f000 fb22 	bl	a488 <os_arch_restore_sr>
}
    9e44:	bd38      	pop	{r3, r4, r5, pc}
        next_t = os_sched_next_task();
    9e46:	f7ff ffeb 	bl	9e20 <os_sched_next_task>
    9e4a:	4604      	mov	r4, r0
    9e4c:	e7f4      	b.n	9e38 <os_sched+0xc>
	...

00009e50 <os_sched_resort>:
 * NOTE: this function expects interrupts to be disabled so they
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
    9e50:	b508      	push	{r3, lr}
    if (t->t_state == OS_TASK_READY) {
    9e52:	7b03      	ldrb	r3, [r0, #12]
    9e54:	2b01      	cmp	r3, #1
    9e56:	d000      	beq.n	9e5a <os_sched_resort+0xa>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
        os_sched_insert(t);
    }
}
    9e58:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    9e5a:	6c43      	ldr	r3, [r0, #68]	; 0x44
    9e5c:	b13b      	cbz	r3, 9e6e <os_sched_resort+0x1e>
    9e5e:	6c82      	ldr	r2, [r0, #72]	; 0x48
    9e60:	649a      	str	r2, [r3, #72]	; 0x48
    9e62:	6c83      	ldr	r3, [r0, #72]	; 0x48
    9e64:	6c42      	ldr	r2, [r0, #68]	; 0x44
    9e66:	601a      	str	r2, [r3, #0]
        os_sched_insert(t);
    9e68:	f7ff fe8a 	bl	9b80 <os_sched_insert>
}
    9e6c:	e7f4      	b.n	9e58 <os_sched_resort+0x8>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    9e6e:	6c82      	ldr	r2, [r0, #72]	; 0x48
    9e70:	4b01      	ldr	r3, [pc, #4]	; (9e78 <os_sched_resort+0x28>)
    9e72:	605a      	str	r2, [r3, #4]
    9e74:	e7f5      	b.n	9e62 <os_sched_resort+0x12>
    9e76:	bf00      	nop
    9e78:	20000548 	.word	0x20000548

00009e7c <os_sem_init>:
{
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_INIT, (uint32_t)sem, (uint32_t)tokens);

    if (!sem) {
    9e7c:	4603      	mov	r3, r0
    9e7e:	b118      	cbz	r0, 9e88 <os_sem_init+0xc>
        ret = OS_INVALID_PARM;
        goto done;
    }

    sem->sem_tokens = tokens;
    9e80:	80c1      	strh	r1, [r0, #6]
    SLIST_FIRST(&sem->sem_head) = NULL;
    9e82:	2000      	movs	r0, #0
    9e84:	6018      	str	r0, [r3, #0]

    ret = OS_OK;
    9e86:	4770      	bx	lr
        ret = OS_INVALID_PARM;
    9e88:	2003      	movs	r0, #3

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_INIT, (uint32_t)ret);
    return ret;
}
    9e8a:	4770      	bx	lr

00009e8c <os_sem_release>:

os_error_t
os_sem_release(struct os_sem *sem)
{
    9e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)sem);

    /* OS must be started to release semaphores */
    if (!g_os_started) {
    9e8e:	4b17      	ldr	r3, [pc, #92]	; (9eec <os_sem_release+0x60>)
    9e90:	681b      	ldr	r3, [r3, #0]
    9e92:	b33b      	cbz	r3, 9ee4 <os_sem_release+0x58>
    9e94:	4604      	mov	r4, r0
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
    9e96:	b338      	cbz	r0, 9ee8 <os_sem_release+0x5c>
        goto done;
    }

    /* Get current task */
    resched = 0;
    current = os_sched_get_current_task();
    9e98:	f7ff feb4 	bl	9c04 <os_sched_get_current_task>
    9e9c:	4607      	mov	r7, r0

    OS_ENTER_CRITICAL(sr);
    9e9e:	f000 faed 	bl	a47c <os_arch_save_sr>
    9ea2:	4606      	mov	r6, r0

    /* Check if tasks are waiting for the semaphore */
    rdy = SLIST_FIRST(&sem->sem_head);
    9ea4:	6825      	ldr	r5, [r4, #0]
    if (rdy) {
    9ea6:	b165      	cbz	r5, 9ec2 <os_sem_release+0x36>
        /* Clear flag that we are waiting on the semaphore; wake up task */
        rdy->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
    9ea8:	7b6b      	ldrb	r3, [r5, #13]
    9eaa:	f023 0302 	bic.w	r3, r3, #2
    9eae:	736b      	strb	r3, [r5, #13]
        os_sched_wakeup(rdy);
    9eb0:	4628      	mov	r0, r5
    9eb2:	f7ff ff3d 	bl	9d30 <os_sched_wakeup>

        /* Schedule if waiting task higher priority */
        if (current->t_prio > rdy->t_prio) {
    9eb6:	7afa      	ldrb	r2, [r7, #11]
    9eb8:	7aeb      	ldrb	r3, [r5, #11]
    9eba:	429a      	cmp	r2, r3
    9ebc:	d80b      	bhi.n	9ed6 <os_sem_release+0x4a>
    resched = 0;
    9ebe:	2400      	movs	r4, #0
    9ec0:	e003      	b.n	9eca <os_sem_release+0x3e>
            resched = 1;
        }
    } else {
        /* Add to the number of tokens */
        sem->sem_tokens++;
    9ec2:	88e3      	ldrh	r3, [r4, #6]
    9ec4:	3301      	adds	r3, #1
    9ec6:	80e3      	strh	r3, [r4, #6]
    resched = 0;
    9ec8:	2400      	movs	r4, #0
    }

    OS_EXIT_CRITICAL(sr);
    9eca:	4630      	mov	r0, r6
    9ecc:	f000 fadc 	bl	a488 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
    9ed0:	b91c      	cbnz	r4, 9eda <os_sem_release+0x4e>
        os_sched(rdy);
    }

    ret = OS_OK;
    9ed2:	2000      	movs	r0, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)ret);
    return ret;
}
    9ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            resched = 1;
    9ed6:	2401      	movs	r4, #1
    9ed8:	e7f7      	b.n	9eca <os_sem_release+0x3e>
        os_sched(rdy);
    9eda:	4628      	mov	r0, r5
    9edc:	f7ff ffa6 	bl	9e2c <os_sched>
    ret = OS_OK;
    9ee0:	2000      	movs	r0, #0
    9ee2:	e7f7      	b.n	9ed4 <os_sem_release+0x48>
        ret = OS_NOT_STARTED;
    9ee4:	2009      	movs	r0, #9
    9ee6:	e7f5      	b.n	9ed4 <os_sem_release+0x48>
        ret = OS_INVALID_PARM;
    9ee8:	2003      	movs	r0, #3
    9eea:	e7f3      	b.n	9ed4 <os_sem_release+0x48>
    9eec:	20002658 	.word	0x20002658

00009ef0 <os_sem_pend>:

os_error_t
os_sem_pend(struct os_sem *sem, os_time_t timeout)
{
    9ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_PEND, (uint32_t)sem, (uint32_t)timeout);

    /* Check if OS is started */
    if (!g_os_started) {
    9ef2:	4b2b      	ldr	r3, [pc, #172]	; (9fa0 <os_sem_pend+0xb0>)
    9ef4:	681b      	ldr	r3, [r3, #0]
    9ef6:	2b00      	cmp	r3, #0
    9ef8:	d04d      	beq.n	9f96 <os_sem_pend+0xa6>
    9efa:	4604      	mov	r4, r0
    9efc:	460f      	mov	r7, r1
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
    9efe:	2800      	cmp	r0, #0
    9f00:	d04b      	beq.n	9f9a <os_sem_pend+0xaa>
        goto done;
    }

    /* Assume we dont have to put task to sleep; get current task */
    sched = 0;
    current = os_sched_get_current_task();
    9f02:	f7ff fe7f 	bl	9c04 <os_sched_get_current_task>
    9f06:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
    9f08:	f000 fab8 	bl	a47c <os_arch_save_sr>
    9f0c:	4606      	mov	r6, r0

    /*
     * If there is a token available, take it. If no token, either return
     * with error if timeout was 0 or put this task to sleep.
     */
    if (sem->sem_tokens != 0) {
    9f0e:	88e3      	ldrh	r3, [r4, #6]
    9f10:	b14b      	cbz	r3, 9f26 <os_sem_pend+0x36>
        sem->sem_tokens--;
    9f12:	3b01      	subs	r3, #1
    9f14:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
    9f16:	2400      	movs	r4, #0
    sched = 0;
    9f18:	4627      	mov	r7, r4
        /* We will put this task to sleep */
        sched = 1;
        os_sched_sleep(current, timeout);
    }

    OS_EXIT_CRITICAL(sr);
    9f1a:	4630      	mov	r0, r6
    9f1c:	f000 fab4 	bl	a488 <os_arch_restore_sr>

    if (sched) {
    9f20:	bb47      	cbnz	r7, 9f74 <os_sem_pend+0x84>
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_PEND, (uint32_t)ret);
    return ret;
}
    9f22:	4620      	mov	r0, r4
    9f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (timeout == 0) {
    9f26:	b317      	cbz	r7, 9f6e <os_sem_pend+0x7e>
        current->t_obj = sem;
    9f28:	61ec      	str	r4, [r5, #28]
        current->t_flags |= OS_TASK_FLAG_SEM_WAIT;
    9f2a:	7b6b      	ldrb	r3, [r5, #13]
    9f2c:	f043 0302 	orr.w	r3, r3, #2
    9f30:	736b      	strb	r3, [r5, #13]
        if (!SLIST_EMPTY(&sem->sem_head)) {
    9f32:	f8d4 c000 	ldr.w	ip, [r4]
    9f36:	f1bc 0f00 	cmp.w	ip, #0
    9f3a:	d00e      	beq.n	9f5a <os_sem_pend+0x6a>
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
    9f3c:	4663      	mov	r3, ip
        last = NULL;
    9f3e:	2000      	movs	r0, #0
    9f40:	e001      	b.n	9f46 <os_sem_pend+0x56>
                last = entry;
    9f42:	4618      	mov	r0, r3
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
    9f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    9f46:	b11b      	cbz	r3, 9f50 <os_sem_pend+0x60>
                if (current->t_prio < entry->t_prio) {
    9f48:	7ae9      	ldrb	r1, [r5, #11]
    9f4a:	7ada      	ldrb	r2, [r3, #11]
    9f4c:	4291      	cmp	r1, r2
    9f4e:	d2f8      	bcs.n	9f42 <os_sem_pend+0x52>
        if (last) {
    9f50:	b118      	cbz	r0, 9f5a <os_sem_pend+0x6a>
            SLIST_INSERT_AFTER(last, current, t_obj_list);
    9f52:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    9f54:	64eb      	str	r3, [r5, #76]	; 0x4c
    9f56:	64c5      	str	r5, [r0, #76]	; 0x4c
    9f58:	e002      	b.n	9f60 <os_sem_pend+0x70>
            SLIST_INSERT_HEAD(&sem->sem_head, current, t_obj_list);
    9f5a:	f8c5 c04c 	str.w	ip, [r5, #76]	; 0x4c
    9f5e:	6025      	str	r5, [r4, #0]
        os_sched_sleep(current, timeout);
    9f60:	4639      	mov	r1, r7
    9f62:	4628      	mov	r0, r5
    9f64:	f7ff fe5a 	bl	9c1c <os_sched_sleep>
        ret = OS_OK;
    9f68:	2400      	movs	r4, #0
        sched = 1;
    9f6a:	2701      	movs	r7, #1
    9f6c:	e7d5      	b.n	9f1a <os_sem_pend+0x2a>
        ret = OS_TIMEOUT;
    9f6e:	2406      	movs	r4, #6
    sched = 0;
    9f70:	2700      	movs	r7, #0
    9f72:	e7d2      	b.n	9f1a <os_sem_pend+0x2a>
        os_sched(NULL);
    9f74:	2000      	movs	r0, #0
    9f76:	f7ff ff59 	bl	9e2c <os_sched>
        if (current->t_flags & OS_TASK_FLAG_SEM_WAIT) {
    9f7a:	7b6c      	ldrb	r4, [r5, #13]
    9f7c:	f014 0402 	ands.w	r4, r4, #2
    9f80:	d0cf      	beq.n	9f22 <os_sem_pend+0x32>
            OS_ENTER_CRITICAL(sr);
    9f82:	f000 fa7b 	bl	a47c <os_arch_save_sr>
            current->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
    9f86:	7b6b      	ldrb	r3, [r5, #13]
    9f88:	f023 0302 	bic.w	r3, r3, #2
    9f8c:	736b      	strb	r3, [r5, #13]
            OS_EXIT_CRITICAL(sr);
    9f8e:	f000 fa7b 	bl	a488 <os_arch_restore_sr>
            ret = OS_TIMEOUT;
    9f92:	2406      	movs	r4, #6
    9f94:	e7c5      	b.n	9f22 <os_sem_pend+0x32>
        ret = OS_NOT_STARTED;
    9f96:	2409      	movs	r4, #9
    9f98:	e7c3      	b.n	9f22 <os_sem_pend+0x32>
        ret = OS_INVALID_PARM;
    9f9a:	2403      	movs	r4, #3
    9f9c:	e7c1      	b.n	9f22 <os_sem_pend+0x32>
    9f9e:	bf00      	nop
    9fa0:	20002658 	.word	0x20002658

00009fa4 <_clear_stack>:
static void
_clear_stack(os_stack_t *stack_bottom, int size)
{
    int i;

    for (i = 0; i < size; i++) {
    9fa4:	2300      	movs	r3, #0
    9fa6:	e003      	b.n	9fb0 <_clear_stack+0xc>
        stack_bottom[i] = OS_STACK_PATTERN;
    9fa8:	4a03      	ldr	r2, [pc, #12]	; (9fb8 <_clear_stack+0x14>)
    9faa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < size; i++) {
    9fae:	3301      	adds	r3, #1
    9fb0:	428b      	cmp	r3, r1
    9fb2:	dbf9      	blt.n	9fa8 <_clear_stack+0x4>
    }
}
    9fb4:	4770      	bx	lr
    9fb6:	bf00      	nop
    9fb8:	deadbeef 	.word	0xdeadbeef

00009fbc <os_task_init>:

int
os_task_init(struct os_task *t, const char *name, os_task_func_t func,
        void *arg, uint8_t prio, os_time_t sanity_itvl,
        os_stack_t *stack_bottom, uint16_t stack_size)
{
    9fbc:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
    9fc0:	4604      	mov	r4, r0
    9fc2:	460d      	mov	r5, r1
    9fc4:	4617      	mov	r7, r2
    9fc6:	461e      	mov	r6, r3
    9fc8:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
    struct os_sanity_check *sc;
    int rc;
    struct os_task *task;

    memset(t, 0, sizeof(*t));
    9fcc:	2250      	movs	r2, #80	; 0x50
    9fce:	2100      	movs	r1, #0
    9fd0:	f003 fd17 	bl	da02 <memset>

    t->t_func = func;
    9fd4:	6167      	str	r7, [r4, #20]
    t->t_arg = arg;
    9fd6:	61a6      	str	r6, [r4, #24]
    OS_ENTER_CRITICAL(sr);
    9fd8:	f000 fa50 	bl	a47c <os_arch_save_sr>
    rc = g_task_id;
    9fdc:	4b2b      	ldr	r3, [pc, #172]	; (a08c <os_task_init+0xd0>)
    9fde:	781e      	ldrb	r6, [r3, #0]
    g_task_id++;
    9fe0:	1c72      	adds	r2, r6, #1
    9fe2:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
    9fe4:	f000 fa50 	bl	a488 <os_arch_restore_sr>

    t->t_taskid = os_task_next_id();
    9fe8:	72a6      	strb	r6, [r4, #10]
    t->t_prio = prio;
    9fea:	f89d 3018 	ldrb.w	r3, [sp, #24]
    9fee:	72e3      	strb	r3, [r4, #11]

    t->t_state = OS_TASK_READY;
    9ff0:	2301      	movs	r3, #1
    9ff2:	7323      	strb	r3, [r4, #12]
    t->t_name = name;
    9ff4:	6125      	str	r5, [r4, #16]
    t->t_next_wakeup = 0;
    9ff6:	2300      	movs	r3, #0
    9ff8:	6363      	str	r3, [r4, #52]	; 0x34

    rc = os_sanity_check_init(&t->t_sanity_check);
    9ffa:	f104 0620 	add.w	r6, r4, #32
    9ffe:	4630      	mov	r0, r6
    a000:	f7ff fd68 	bl	9ad4 <os_sanity_check_init>
    if (rc != OS_OK) {
    a004:	4605      	mov	r5, r0
    a006:	2800      	cmp	r0, #0
    a008:	d133      	bne.n	a072 <os_task_init+0xb6>
        goto err;
    }

    if (sanity_itvl != OS_WAIT_FOREVER) {
    a00a:	9b07      	ldr	r3, [sp, #28]
    a00c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    a010:	d005      	beq.n	a01e <os_task_init+0x62>
        sc = (struct os_sanity_check *) &t->t_sanity_check;
        sc->sc_checkin_itvl = sanity_itvl;
    a012:	6263      	str	r3, [r4, #36]	; 0x24

        rc = os_sanity_check_register(sc);
    a014:	4630      	mov	r0, r6
    a016:	f7ff fd65 	bl	9ae4 <os_sanity_check_register>
        if (rc != OS_OK) {
    a01a:	4605      	mov	r5, r0
    a01c:	bb48      	cbnz	r0, a072 <os_task_init+0xb6>
            goto err;
        }
    }

    _clear_stack(stack_bottom, stack_size);
    a01e:	4649      	mov	r1, r9
    a020:	9808      	ldr	r0, [sp, #32]
    a022:	f7ff ffbf 	bl	9fa4 <_clear_stack>
    t->t_stacktop = &stack_bottom[stack_size];
    a026:	9b08      	ldr	r3, [sp, #32]
    a028:	eb03 0189 	add.w	r1, r3, r9, lsl #2
    a02c:	6061      	str	r1, [r4, #4]
    t->t_stacksize = stack_size;
    a02e:	f8a4 9008 	strh.w	r9, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, t->t_stacktop,
    a032:	464a      	mov	r2, r9
    a034:	4620      	mov	r0, r4
    a036:	f000 fa2f 	bl	a498 <os_arch_task_stack_init>
    a03a:	6020      	str	r0, [r4, #0]
            t->t_stacksize);

    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
    a03c:	4b14      	ldr	r3, [pc, #80]	; (a090 <os_task_init+0xd4>)
    a03e:	681b      	ldr	r3, [r3, #0]
    a040:	b15b      	cbz	r3, a05a <os_task_init+0x9e>
        assert(t->t_prio != task->t_prio);
    a042:	7ae1      	ldrb	r1, [r4, #11]
    a044:	7ada      	ldrb	r2, [r3, #11]
    a046:	4291      	cmp	r1, r2
    a048:	d001      	beq.n	a04e <os_task_init+0x92>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
    a04a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    a04c:	e7f8      	b.n	a040 <os_task_init+0x84>
        assert(t->t_prio != task->t_prio);
    a04e:	2300      	movs	r3, #0
    a050:	461a      	mov	r2, r3
    a052:	4619      	mov	r1, r3
    a054:	4618      	mov	r0, r3
    a056:	f7fe fff9 	bl	904c <__assert_func>
    }

    /* insert this task into the task list */
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
    a05a:	6423      	str	r3, [r4, #64]	; 0x40
    a05c:	4b0c      	ldr	r3, [pc, #48]	; (a090 <os_task_init+0xd4>)
    a05e:	685a      	ldr	r2, [r3, #4]
    a060:	6014      	str	r4, [r2, #0]
    a062:	f104 0240 	add.w	r2, r4, #64	; 0x40
    a066:	605a      	str	r2, [r3, #4]

    /* insert this task into the scheduler list */
    rc = os_sched_insert(t);
    a068:	4620      	mov	r0, r4
    a06a:	f7ff fd89 	bl	9b80 <os_sched_insert>
    a06e:	4605      	mov	r5, r0
    if (rc != OS_OK) {
    a070:	b110      	cbz	r0, a078 <os_task_init+0xbc>
    }

    return (0);
err:
    return (rc);
}
    a072:	4628      	mov	r0, r5
    a074:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
    if (os_started()) {
    a078:	f7ff f8a2 	bl	91c0 <os_started>
    a07c:	b908      	cbnz	r0, a082 <os_task_init+0xc6>
    return (0);
    a07e:	4605      	mov	r5, r0
    a080:	e7f7      	b.n	a072 <os_task_init+0xb6>
        os_sched(NULL);
    a082:	2000      	movs	r0, #0
    a084:	f7ff fed2 	bl	9e2c <os_sched>
    a088:	e7f3      	b.n	a072 <os_task_init+0xb6>
    a08a:	bf00      	nop
    a08c:	2000347c 	.word	0x2000347c
    a090:	20003474 	.word	0x20003474

0000a094 <os_task_remove>:

int
os_task_remove(struct os_task *t)
{
    a094:	b538      	push	{r3, r4, r5, lr}
    a096:	4604      	mov	r4, r0
    os_sr_t sr;

    /*
     * Can't suspend yourself
     */
    if (t == os_sched_get_current_task()) {
    a098:	f7ff fdb4 	bl	9c04 <os_sched_get_current_task>
    a09c:	4284      	cmp	r4, r0
    a09e:	d016      	beq.n	a0ce <os_task_remove+0x3a>
    }

    /*
     * If state is not READY or SLEEP, assume task has not been initialized
     */
    if (t->t_state != OS_TASK_READY && t->t_state != OS_TASK_SLEEP)
    a0a0:	7b23      	ldrb	r3, [r4, #12]
    a0a2:	3b01      	subs	r3, #1
    a0a4:	b2db      	uxtb	r3, r3
    a0a6:	2b01      	cmp	r3, #1
    a0a8:	d813      	bhi.n	a0d2 <os_task_remove+0x3e>
    }

    /*
     * Disallow suspending tasks which are waiting on a lock
     */
    if (t->t_flags & (OS_TASK_FLAG_SEM_WAIT | OS_TASK_FLAG_MUTEX_WAIT |
    a0aa:	7b63      	ldrb	r3, [r4, #13]
    a0ac:	f013 0f0e 	tst.w	r3, #14
    a0b0:	d111      	bne.n	a0d6 <os_task_remove+0x42>
    }

    /*
     * Disallowing suspending tasks which are holding a mutex
     */
    if (t->t_lockcnt) {
    a0b2:	7ba3      	ldrb	r3, [r4, #14]
    a0b4:	b98b      	cbnz	r3, a0da <os_task_remove+0x46>
        return OS_EBUSY;
    }

    OS_ENTER_CRITICAL(sr);
    a0b6:	f000 f9e1 	bl	a47c <os_arch_save_sr>
    a0ba:	4605      	mov	r5, r0
    rc = os_sched_remove(t);
    a0bc:	4620      	mov	r0, r4
    a0be:	f7ff fdf5 	bl	9cac <os_sched_remove>
    a0c2:	4604      	mov	r4, r0
    OS_EXIT_CRITICAL(sr);
    a0c4:	4628      	mov	r0, r5
    a0c6:	f000 f9df 	bl	a488 <os_arch_restore_sr>
    return rc;
}
    a0ca:	4620      	mov	r0, r4
    a0cc:	bd38      	pop	{r3, r4, r5, pc}
        return OS_INVALID_PARM;
    a0ce:	2403      	movs	r4, #3
    a0d0:	e7fb      	b.n	a0ca <os_task_remove+0x36>
        return OS_NOT_STARTED;
    a0d2:	2409      	movs	r4, #9
    a0d4:	e7f9      	b.n	a0ca <os_task_remove+0x36>
        return OS_EBUSY;
    a0d6:	240b      	movs	r4, #11
    a0d8:	e7f7      	b.n	a0ca <os_task_remove+0x36>
        return OS_EBUSY;
    a0da:	240b      	movs	r4, #11
    a0dc:	e7f5      	b.n	a0ca <os_task_remove+0x36>
	...

0000a0e0 <os_task_info_get_next>:


struct os_task *
os_task_info_get_next(const struct os_task *prev, struct os_task_info *oti)
{
    a0e0:	b538      	push	{r3, r4, r5, lr}
    a0e2:	468c      	mov	ip, r1
    struct os_task *next;
    os_stack_t *top;
    os_stack_t *bottom;

    if (prev != NULL) {
    a0e4:	b1b8      	cbz	r0, a116 <os_task_info_get_next+0x36>
        next = STAILQ_NEXT(prev, t_os_task_list);
    a0e6:	6c05      	ldr	r5, [r0, #64]	; 0x40
    } else {
        next = STAILQ_FIRST(&g_os_task_list);
    }

    if (next == NULL) {
    a0e8:	2d00      	cmp	r5, #0
    a0ea:	d032      	beq.n	a152 <os_task_info_get_next+0x72>
    }

    /* Otherwise, copy OS task information into the OTI structure, and
     * return 1, which means continue
     */
    oti->oti_prio = next->t_prio;
    a0ec:	7aeb      	ldrb	r3, [r5, #11]
    a0ee:	f88c 3000 	strb.w	r3, [ip]
    oti->oti_taskid = next->t_taskid;
    a0f2:	7aab      	ldrb	r3, [r5, #10]
    a0f4:	f88c 3001 	strb.w	r3, [ip, #1]
    oti->oti_state = next->t_state;
    a0f8:	7b2b      	ldrb	r3, [r5, #12]
    a0fa:	f88c 3002 	strb.w	r3, [ip, #2]

    top = next->t_stacktop;
    a0fe:	686c      	ldr	r4, [r5, #4]
    bottom = next->t_stacktop - next->t_stacksize;
    a100:	892b      	ldrh	r3, [r5, #8]
    a102:	eba4 0383 	sub.w	r3, r4, r3, lsl #2
    while (bottom < top) {
    a106:	42a3      	cmp	r3, r4
    a108:	d208      	bcs.n	a11c <os_task_info_get_next+0x3c>
        if (*bottom != OS_STACK_PATTERN) {
    a10a:	4a13      	ldr	r2, [pc, #76]	; (a158 <os_task_info_get_next+0x78>)
    a10c:	6819      	ldr	r1, [r3, #0]
    a10e:	4291      	cmp	r1, r2
    a110:	d104      	bne.n	a11c <os_task_info_get_next+0x3c>
            break;
        }
        ++bottom;
    a112:	3304      	adds	r3, #4
    a114:	e7f7      	b.n	a106 <os_task_info_get_next+0x26>
        next = STAILQ_FIRST(&g_os_task_list);
    a116:	4b11      	ldr	r3, [pc, #68]	; (a15c <os_task_info_get_next+0x7c>)
    a118:	681d      	ldr	r5, [r3, #0]
    a11a:	e7e5      	b.n	a0e8 <os_task_info_get_next+0x8>
    }

    oti->oti_stkusage = (uint16_t) (next->t_stacktop - bottom);
    a11c:	1ae3      	subs	r3, r4, r3
    a11e:	f3c3 038f 	ubfx	r3, r3, #2, #16
    a122:	f8ac 3004 	strh.w	r3, [ip, #4]
    oti->oti_stksize = next->t_stacksize;
    a126:	892b      	ldrh	r3, [r5, #8]
    a128:	f8ac 3006 	strh.w	r3, [ip, #6]
    oti->oti_cswcnt = next->t_ctx_sw_cnt;
    a12c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    a12e:	f8cc 3008 	str.w	r3, [ip, #8]
    oti->oti_runtime = next->t_run_time;
    a132:	6bab      	ldr	r3, [r5, #56]	; 0x38
    a134:	f8cc 300c 	str.w	r3, [ip, #12]
    oti->oti_last_checkin = next->t_sanity_check.sc_checkin_last;
    a138:	6a2b      	ldr	r3, [r5, #32]
    a13a:	f8cc 3010 	str.w	r3, [ip, #16]
    oti->oti_next_checkin = next->t_sanity_check.sc_checkin_last +
        next->t_sanity_check.sc_checkin_itvl;
    a13e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    oti->oti_next_checkin = next->t_sanity_check.sc_checkin_last +
    a140:	4413      	add	r3, r2
    a142:	f8cc 3014 	str.w	r3, [ip, #20]
    strncpy(oti->oti_name, next->t_name, sizeof(oti->oti_name));
    a146:	2220      	movs	r2, #32
    a148:	6929      	ldr	r1, [r5, #16]
    a14a:	f10c 0018 	add.w	r0, ip, #24
    a14e:	f003 fc97 	bl	da80 <strncpy>

    return (next);
}
    a152:	4628      	mov	r0, r5
    a154:	bd38      	pop	{r3, r4, r5, pc}
    a156:	bf00      	nop
    a158:	deadbeef 	.word	0xdeadbeef
    a15c:	20003474 	.word	0x20003474

0000a160 <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
    a160:	b430      	push	{r4, r5}
    a162:	b084      	sub	sp, #16
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
    a164:	09c4      	lsrs	r4, r0, #7
    a166:	9400      	str	r4, [sp, #0]
    a168:	2300      	movs	r3, #0
    a16a:	9301      	str	r3, [sp, #4]
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
    a16c:	f000 037f 	and.w	r3, r0, #127	; 0x7f
    a170:	f641 6084 	movw	r0, #7812	; 0x1e84
    a174:	fb00 f303 	mul.w	r3, r0, r3
    a178:	9302      	str	r3, [sp, #8]
    os_timeradd(base, &tvdelta, result);
    a17a:	6848      	ldr	r0, [r1, #4]
    a17c:	680d      	ldr	r5, [r1, #0]
    a17e:	1964      	adds	r4, r4, r5
    a180:	f140 0000 	adc.w	r0, r0, #0
    a184:	6014      	str	r4, [r2, #0]
    a186:	6050      	str	r0, [r2, #4]
    a188:	6889      	ldr	r1, [r1, #8]
    a18a:	440b      	add	r3, r1
    a18c:	6093      	str	r3, [r2, #8]
    a18e:	4908      	ldr	r1, [pc, #32]	; (a1b0 <os_deltatime+0x50>)
    a190:	428b      	cmp	r3, r1
    a192:	dd09      	ble.n	a1a8 <os_deltatime+0x48>
    a194:	3401      	adds	r4, #1
    a196:	f140 0000 	adc.w	r0, r0, #0
    a19a:	6014      	str	r4, [r2, #0]
    a19c:	6050      	str	r0, [r2, #4]
    a19e:	f5a3 2374 	sub.w	r3, r3, #999424	; 0xf4000
    a1a2:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
    a1a6:	6093      	str	r3, [r2, #8]
}
    a1a8:	b004      	add	sp, #16
    a1aa:	bc30      	pop	{r4, r5}
    a1ac:	4770      	bx	lr
    a1ae:	bf00      	nop
    a1b0:	000f423f 	.word	0x000f423f

0000a1b4 <os_time_change_notify>:
    return 0;
}

static void
os_time_change_notify(const struct os_time_change_info *info)
{
    a1b4:	b538      	push	{r3, r4, r5, lr}
    a1b6:	4605      	mov	r5, r0
    struct os_time_change_listener *listener;

    STAILQ_FOREACH(listener, &os_time_change_listeners, tcl_next) {
    a1b8:	4b05      	ldr	r3, [pc, #20]	; (a1d0 <os_time_change_notify+0x1c>)
    a1ba:	681c      	ldr	r4, [r3, #0]
    a1bc:	e004      	b.n	a1c8 <os_time_change_notify+0x14>
        listener->tcl_fn(info, listener->tcl_arg);
    a1be:	6823      	ldr	r3, [r4, #0]
    a1c0:	6861      	ldr	r1, [r4, #4]
    a1c2:	4628      	mov	r0, r5
    a1c4:	4798      	blx	r3
    STAILQ_FOREACH(listener, &os_time_change_listeners, tcl_next) {
    a1c6:	68a4      	ldr	r4, [r4, #8]
    a1c8:	2c00      	cmp	r4, #0
    a1ca:	d1f8      	bne.n	a1be <os_time_change_notify+0xa>
    }
}
    a1cc:	bd38      	pop	{r3, r4, r5, pc}
    a1ce:	bf00      	nop
    a1d0:	20000558 	.word	0x20000558

0000a1d4 <os_time_tick>:
{
    a1d4:	b570      	push	{r4, r5, r6, lr}
    assert(ticks >= 0);
    a1d6:	1e04      	subs	r4, r0, #0
    a1d8:	db0d      	blt.n	a1f6 <os_time_tick+0x22>
    OS_ENTER_CRITICAL(sr);
    a1da:	f000 f94f 	bl	a47c <os_arch_save_sr>
    a1de:	4605      	mov	r5, r0
    prev_os_time = g_os_time;
    a1e0:	4911      	ldr	r1, [pc, #68]	; (a228 <os_time_tick+0x54>)
    a1e2:	680a      	ldr	r2, [r1, #0]
    g_os_time += ticks;
    a1e4:	18a3      	adds	r3, r4, r2
    a1e6:	600b      	str	r3, [r1, #0]
    if ((prev_os_time ^ g_os_time) >> 31) {
    a1e8:	ea93 0f02 	teq	r3, r2
    a1ec:	d409      	bmi.n	a202 <os_time_tick+0x2e>
    OS_EXIT_CRITICAL(sr);
    a1ee:	4628      	mov	r0, r5
    a1f0:	f000 f94a 	bl	a488 <os_arch_restore_sr>
}
    a1f4:	bd70      	pop	{r4, r5, r6, pc}
    assert(ticks >= 0);
    a1f6:	2300      	movs	r3, #0
    a1f8:	461a      	mov	r2, r3
    a1fa:	4619      	mov	r1, r3
    a1fc:	4618      	mov	r0, r3
    a1fe:	f7fe ff25 	bl	904c <__assert_func>
        delta = g_os_time - basetod.ostime;
    a202:	4e0a      	ldr	r6, [pc, #40]	; (a22c <os_time_tick+0x58>)
    a204:	4631      	mov	r1, r6
    a206:	f851 4b08 	ldr.w	r4, [r1], #8
    a20a:	1b1c      	subs	r4, r3, r4
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
    a20c:	460a      	mov	r2, r1
    a20e:	4620      	mov	r0, r4
    a210:	f7ff ffa6 	bl	a160 <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
    a214:	f106 0118 	add.w	r1, r6, #24
    a218:	460a      	mov	r2, r1
    a21a:	4620      	mov	r0, r4
    a21c:	f7ff ffa0 	bl	a160 <os_deltatime>
        basetod.ostime = g_os_time;
    a220:	4b01      	ldr	r3, [pc, #4]	; (a228 <os_time_tick+0x54>)
    a222:	681b      	ldr	r3, [r3, #0]
    a224:	6033      	str	r3, [r6, #0]
    a226:	e7e2      	b.n	a1ee <os_time_tick+0x1a>
    a228:	200034b0 	.word	0x200034b0
    a22c:	20003480 	.word	0x20003480

0000a230 <os_time_get>:
}
    a230:	4b01      	ldr	r3, [pc, #4]	; (a238 <os_time_get+0x8>)
    a232:	6818      	ldr	r0, [r3, #0]
    a234:	4770      	bx	lr
    a236:	bf00      	nop
    a238:	200034b0 	.word	0x200034b0

0000a23c <os_time_advance>:
{
    a23c:	b510      	push	{r4, lr}
    assert(ticks >= 0);
    a23e:	1e04      	subs	r4, r0, #0
    a240:	db02      	blt.n	a248 <os_time_advance+0xc>
    if (ticks > 0) {
    a242:	2c00      	cmp	r4, #0
    a244:	dc06      	bgt.n	a254 <os_time_advance+0x18>
}
    a246:	bd10      	pop	{r4, pc}
    assert(ticks >= 0);
    a248:	2300      	movs	r3, #0
    a24a:	461a      	mov	r2, r3
    a24c:	4619      	mov	r1, r3
    a24e:	4618      	mov	r0, r3
    a250:	f7fe fefc 	bl	904c <__assert_func>
        if (!os_started()) {
    a254:	f7fe ffb4 	bl	91c0 <os_started>
    a258:	b920      	cbnz	r0, a264 <os_time_advance+0x28>
            g_os_time += ticks;
    a25a:	4b08      	ldr	r3, [pc, #32]	; (a27c <os_time_advance+0x40>)
    a25c:	6818      	ldr	r0, [r3, #0]
    a25e:	4420      	add	r0, r4
    a260:	6018      	str	r0, [r3, #0]
    a262:	e7f0      	b.n	a246 <os_time_advance+0xa>
            os_time_tick(ticks);
    a264:	4620      	mov	r0, r4
    a266:	f7ff ffb5 	bl	a1d4 <os_time_tick>
            os_callout_tick();
    a26a:	f7ff f8e5 	bl	9438 <os_callout_tick>
            os_sched_os_timer_exp();
    a26e:	f7ff fd99 	bl	9da4 <os_sched_os_timer_exp>
            os_sched(NULL);
    a272:	2000      	movs	r0, #0
    a274:	f7ff fdda 	bl	9e2c <os_sched>
}
    a278:	e7e5      	b.n	a246 <os_time_advance+0xa>
    a27a:	bf00      	nop
    a27c:	200034b0 	.word	0x200034b0

0000a280 <os_time_delay>:
    if (osticks > 0) {
    a280:	b900      	cbnz	r0, a284 <os_time_delay+0x4>
    a282:	4770      	bx	lr
{
    a284:	b538      	push	{r3, r4, r5, lr}
    a286:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
    a288:	f000 f8f8 	bl	a47c <os_arch_save_sr>
    a28c:	4605      	mov	r5, r0
        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);
    a28e:	f7ff fcb9 	bl	9c04 <os_sched_get_current_task>
    a292:	4621      	mov	r1, r4
    a294:	f7ff fcc2 	bl	9c1c <os_sched_sleep>
        OS_EXIT_CRITICAL(sr);
    a298:	4628      	mov	r0, r5
    a29a:	f000 f8f5 	bl	a488 <os_arch_restore_sr>
        os_sched(NULL);
    a29e:	2000      	movs	r0, #0
    a2a0:	f7ff fdc4 	bl	9e2c <os_sched>
}
    a2a4:	bd38      	pop	{r3, r4, r5, pc}
	...

0000a2a8 <os_gettimeofday>:
    return (0);
}

int
os_gettimeofday(struct os_timeval *tv, struct os_timezone *tz)
{
    a2a8:	b570      	push	{r4, r5, r6, lr}
    a2aa:	4605      	mov	r5, r0
    a2ac:	460c      	mov	r4, r1
    os_sr_t sr;
    os_time_t delta;

    OS_ENTER_CRITICAL(sr);
    a2ae:	f000 f8e5 	bl	a47c <os_arch_save_sr>
    a2b2:	4606      	mov	r6, r0
    if (tv != NULL) {
    a2b4:	b145      	cbz	r5, a2c8 <os_gettimeofday+0x20>
        delta = os_time_get() - basetod.ostime;
    a2b6:	f7ff ffbb 	bl	a230 <os_time_get>
    a2ba:	4908      	ldr	r1, [pc, #32]	; (a2dc <os_gettimeofday+0x34>)
    a2bc:	f851 3b18 	ldr.w	r3, [r1], #24
        os_deltatime(delta, &basetod.utctime, tv);
    a2c0:	462a      	mov	r2, r5
    a2c2:	1ac0      	subs	r0, r0, r3
    a2c4:	f7ff ff4c 	bl	a160 <os_deltatime>
    }

    if (tz != NULL) {
    a2c8:	b114      	cbz	r4, a2d0 <os_gettimeofday+0x28>
        *tz = basetod.timezone;
    a2ca:	4b04      	ldr	r3, [pc, #16]	; (a2dc <os_gettimeofday+0x34>)
    a2cc:	6a98      	ldr	r0, [r3, #40]	; 0x28
    a2ce:	6020      	str	r0, [r4, #0]
    }
    OS_EXIT_CRITICAL(sr);
    a2d0:	4630      	mov	r0, r6
    a2d2:	f000 f8d9 	bl	a488 <os_arch_restore_sr>

    return (0);
}
    a2d6:	2000      	movs	r0, #0
    a2d8:	bd70      	pop	{r4, r5, r6, pc}
    a2da:	bf00      	nop
    a2dc:	20003480 	.word	0x20003480

0000a2e0 <os_time_is_set>:

bool
os_time_is_set(void)
{
    return basetod.utctime.tv_sec > 0;
    a2e0:	4b04      	ldr	r3, [pc, #16]	; (a2f4 <os_time_is_set+0x14>)
    a2e2:	699a      	ldr	r2, [r3, #24]
    a2e4:	69db      	ldr	r3, [r3, #28]
    a2e6:	2a01      	cmp	r2, #1
    a2e8:	f173 0300 	sbcs.w	r3, r3, #0
}
    a2ec:	bfac      	ite	ge
    a2ee:	2001      	movge	r0, #1
    a2f0:	2000      	movlt	r0, #0
    a2f2:	4770      	bx	lr
    a2f4:	20003480 	.word	0x20003480

0000a2f8 <os_time_populate_info>:
{
    a2f8:	b510      	push	{r4, lr}
    a2fa:	4604      	mov	r4, r0
    if (new_tv == NULL && new_tz == NULL) {
    a2fc:	4608      	mov	r0, r1
    a2fe:	b181      	cbz	r1, a322 <os_time_populate_info+0x2a>
    if (new_tv == NULL) {
    a300:	b1a0      	cbz	r0, a32c <os_time_populate_info+0x34>
    if (new_tz == NULL) {
    a302:	b1aa      	cbz	r2, a330 <os_time_populate_info+0x38>
    info->tci_prev_tv = &basetod.utctime;
    a304:	4b0b      	ldr	r3, [pc, #44]	; (a334 <os_time_populate_info+0x3c>)
    a306:	f103 0118 	add.w	r1, r3, #24
    a30a:	6021      	str	r1, [r4, #0]
    info->tci_cur_tv = new_tv;
    a30c:	60a0      	str	r0, [r4, #8]
    info->tci_prev_tz = &basetod.timezone;
    a30e:	3328      	adds	r3, #40	; 0x28
    a310:	6063      	str	r3, [r4, #4]
    info->tci_cur_tz = new_tz;
    a312:	60e2      	str	r2, [r4, #12]
    info->tci_newly_synced = !os_time_is_set();
    a314:	f7ff ffe4 	bl	a2e0 <os_time_is_set>
    a318:	f080 0001 	eor.w	r0, r0, #1
    a31c:	7420      	strb	r0, [r4, #16]
    return 0;
    a31e:	2000      	movs	r0, #0
}
    a320:	bd10      	pop	{r4, pc}
    if (new_tv == NULL && new_tz == NULL) {
    a322:	2a00      	cmp	r2, #0
    a324:	d1ec      	bne.n	a300 <os_time_populate_info+0x8>
        return SYS_EINVAL;
    a326:	f06f 0001 	mvn.w	r0, #1
    a32a:	e7f9      	b.n	a320 <os_time_populate_info+0x28>
        new_tv = &basetod.utctime;
    a32c:	4802      	ldr	r0, [pc, #8]	; (a338 <os_time_populate_info+0x40>)
    a32e:	e7e8      	b.n	a302 <os_time_populate_info+0xa>
        new_tz = &basetod.timezone;
    a330:	4a02      	ldr	r2, [pc, #8]	; (a33c <os_time_populate_info+0x44>)
    a332:	e7e7      	b.n	a304 <os_time_populate_info+0xc>
    a334:	20003480 	.word	0x20003480
    a338:	20003498 	.word	0x20003498
    a33c:	200034a8 	.word	0x200034a8

0000a340 <os_settimeofday>:
{
    a340:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a344:	b087      	sub	sp, #28
    a346:	4604      	mov	r4, r0
    a348:	460d      	mov	r5, r1
    OS_ENTER_CRITICAL(sr);
    a34a:	f000 f897 	bl	a47c <os_arch_save_sr>
    a34e:	4607      	mov	r7, r0
    rc = os_time_populate_info(&info, utctime, tz);
    a350:	462a      	mov	r2, r5
    a352:	4621      	mov	r1, r4
    a354:	a801      	add	r0, sp, #4
    a356:	f7ff ffcf 	bl	a2f8 <os_time_populate_info>
    a35a:	4606      	mov	r6, r0
    if (utctime != NULL) {
    a35c:	b1bc      	cbz	r4, a38e <os_settimeofday+0x4e>
        delta = os_time_get() - basetod.ostime;
    a35e:	f7ff ff67 	bl	a230 <os_time_get>
    a362:	f8df 804c 	ldr.w	r8, [pc, #76]	; a3b0 <os_settimeofday+0x70>
    a366:	4641      	mov	r1, r8
    a368:	f851 3b08 	ldr.w	r3, [r1], #8
    a36c:	eba0 0903 	sub.w	r9, r0, r3
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
    a370:	460a      	mov	r2, r1
    a372:	4648      	mov	r0, r9
    a374:	f7ff fef4 	bl	a160 <os_deltatime>
        basetod.utctime = *utctime;
    a378:	f108 0c18 	add.w	ip, r8, #24
    a37c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    a380:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
        basetod.ostime += delta;
    a384:	f8d8 0000 	ldr.w	r0, [r8]
    a388:	4448      	add	r0, r9
    a38a:	f8c8 0000 	str.w	r0, [r8]
    if (tz != NULL) {
    a38e:	b115      	cbz	r5, a396 <os_settimeofday+0x56>
        basetod.timezone = *tz;
    a390:	6828      	ldr	r0, [r5, #0]
    a392:	4b07      	ldr	r3, [pc, #28]	; (a3b0 <os_settimeofday+0x70>)
    a394:	6298      	str	r0, [r3, #40]	; 0x28
    OS_EXIT_CRITICAL(sr);
    a396:	4638      	mov	r0, r7
    a398:	f000 f876 	bl	a488 <os_arch_restore_sr>
    if (notify) {
    a39c:	b11e      	cbz	r6, a3a6 <os_settimeofday+0x66>
}
    a39e:	2000      	movs	r0, #0
    a3a0:	b007      	add	sp, #28
    a3a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        os_time_change_notify(&info);
    a3a6:	a801      	add	r0, sp, #4
    a3a8:	f7ff ff04 	bl	a1b4 <os_time_change_notify>
    a3ac:	e7f7      	b.n	a39e <os_settimeofday+0x5e>
    a3ae:	bf00      	nop
    a3b0:	20003480 	.word	0x20003480

0000a3b4 <os_get_uptime>:

void
os_get_uptime(struct os_timeval *tvp)
{
    a3b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    a3b6:	b085      	sub	sp, #20
    a3b8:	4606      	mov	r6, r0
  struct os_timeval tv;
  os_time_t delta;
  os_sr_t sr;
  os_time_t ostime;

  OS_ENTER_CRITICAL(sr);
    a3ba:	f000 f85f 	bl	a47c <os_arch_save_sr>
    a3be:	4607      	mov	r7, r0
  tv = basetod.uptime;
    a3c0:	4d0a      	ldr	r5, [pc, #40]	; (a3ec <os_get_uptime+0x38>)
    a3c2:	466c      	mov	r4, sp
    a3c4:	f105 0308 	add.w	r3, r5, #8
    a3c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    a3ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ostime = basetod.ostime;
    a3ce:	682d      	ldr	r5, [r5, #0]
  delta = os_time_get() - ostime;
    a3d0:	f7ff ff2e 	bl	a230 <os_time_get>
    a3d4:	1b45      	subs	r5, r0, r5
  OS_EXIT_CRITICAL(sr);
    a3d6:	4638      	mov	r0, r7
    a3d8:	f000 f856 	bl	a488 <os_arch_restore_sr>

  os_deltatime(delta, &tv, tvp);
    a3dc:	4632      	mov	r2, r6
    a3de:	4621      	mov	r1, r4
    a3e0:	4628      	mov	r0, r5
    a3e2:	f7ff febd 	bl	a160 <os_deltatime>
}
    a3e6:	b005      	add	sp, #20
    a3e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a3ea:	bf00      	nop
    a3ec:	20003480 	.word	0x20003480

0000a3f0 <os_get_uptime_usec>:

int64_t
os_get_uptime_usec(void)
{
    a3f0:	b510      	push	{r4, lr}
    a3f2:	b084      	sub	sp, #16
  struct os_timeval tv;

  os_get_uptime(&tv);
    a3f4:	4668      	mov	r0, sp
    a3f6:	f7ff ffdd 	bl	a3b4 <os_get_uptime>

  return (tv.tv_sec * 1000000 + tv.tv_usec);
    a3fa:	9a00      	ldr	r2, [sp, #0]
    a3fc:	9c01      	ldr	r4, [sp, #4]
    a3fe:	0163      	lsls	r3, r4, #5
    a400:	ea43 63d2 	orr.w	r3, r3, r2, lsr #27
    a404:	ea4f 1c42 	mov.w	ip, r2, lsl #5
    a408:	ebbc 0c02 	subs.w	ip, ip, r2
    a40c:	eb63 0304 	sbc.w	r3, r3, r4
    a410:	0259      	lsls	r1, r3, #9
    a412:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
    a416:	ea4f 204c 	mov.w	r0, ip, lsl #9
    a41a:	1883      	adds	r3, r0, r2
    a41c:	eb44 0101 	adc.w	r1, r4, r1
    a420:	ea4f 1c81 	mov.w	ip, r1, lsl #6
    a424:	ea4c 6c93 	orr.w	ip, ip, r3, lsr #26
    a428:	0198      	lsls	r0, r3, #6
    a42a:	1ac0      	subs	r0, r0, r3
    a42c:	eb6c 0101 	sbc.w	r1, ip, r1
    a430:	1880      	adds	r0, r0, r2
    a432:	eb44 0401 	adc.w	r4, r4, r1
    a436:	9902      	ldr	r1, [sp, #8]
    a438:	1840      	adds	r0, r0, r1
}
    a43a:	eb44 71e1 	adc.w	r1, r4, r1, asr #31
    a43e:	b004      	add	sp, #16
    a440:	bd10      	pop	{r4, pc}

0000a442 <os_time_ms_to_ticks>:

int
os_time_ms_to_ticks(uint32_t ms, os_time_t *out_ticks)
{
    a442:	b538      	push	{r3, r4, r5, lr}
    a444:	460d      	mov	r5, r1
#endif

    static_assert(OS_TICKS_PER_SEC <= UINT32_MAX,
                  "OS_TICKS_PER_SEC must be <= UINT32_MAX");

    ticks = ((uint64_t)ms * OS_TICKS_PER_SEC) / 1000;
    a446:	0e41      	lsrs	r1, r0, #25
    a448:	01c4      	lsls	r4, r0, #7
    a44a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a44e:	2300      	movs	r3, #0
    a450:	4620      	mov	r0, r4
    a452:	f017 fadb 	bl	21a0c <__aeabi_uldivmod>
    if (ticks > UINT32_MAX) {
        return OS_EINVAL;
    }

    *out_ticks = ticks;
    a456:	6028      	str	r0, [r5, #0]
    return 0;
}
    a458:	2000      	movs	r0, #0
    a45a:	bd38      	pop	{r3, r4, r5, pc}

0000a45c <timer_handler>:
/* XXX: determine how we will deal with running un-privileged */
uint32_t os_flags = OS_RUN_PRIV;

void
timer_handler(void)
{
    a45c:	b508      	push	{r3, lr}
    os_time_advance(1);
    a45e:	2001      	movs	r0, #1
    a460:	f7ff feec 	bl	a23c <os_time_advance>
}
    a464:	bd08      	pop	{r3, pc}
	...

0000a468 <os_arch_ctx_sw>:

void
os_arch_ctx_sw(struct os_task *t)
{
    a468:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
    a46a:	f7ff fbb3 	bl	9bd4 <os_sched_ctx_sw_hook>

    /* Set PendSV interrupt pending bit to force context switch */
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
    a46e:	4b02      	ldr	r3, [pc, #8]	; (a478 <os_arch_ctx_sw+0x10>)
    a470:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    a474:	605a      	str	r2, [r3, #4]
}
    a476:	bd08      	pop	{r3, pc}
    a478:	e000ed00 	.word	0xe000ed00

0000a47c <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    a47c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    a480:	b672      	cpsid	i
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    __disable_irq();
    return (isr_ctx & 1);
}
    a482:	f000 0001 	and.w	r0, r0, #1
    a486:	4770      	bx	lr

0000a488 <os_arch_restore_sr>:

void
os_arch_restore_sr(os_sr_t isr_ctx)
{
    if (!isr_ctx) {
    a488:	b900      	cbnz	r0, a48c <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
    a48a:	b662      	cpsie	i
        __enable_irq();
    }
}
    a48c:	4770      	bx	lr

0000a48e <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    a48e:	f3ef 8010 	mrs	r0, PRIMASK
{
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    return (isr_ctx & 1);
}
    a492:	f000 0001 	and.w	r0, r0, #1
    a496:	4770      	bx	lr

0000a498 <os_arch_task_stack_init>:

os_stack_t *
os_arch_task_stack_init(struct os_task *t, os_stack_t *stack_top, int size)
{
    a498:	b570      	push	{r4, r5, r6, lr}
    a49a:	4606      	mov	r6, r0
    a49c:	460d      	mov	r5, r1
    int i;
    os_stack_t *s;
    struct stack_frame *sf;

    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
    a49e:	f1a1 0444 	sub.w	r4, r1, #68	; 0x44

    /* Zero out R1-R3, R12, LR */
    for (i = 9; i < 14; ++i) {
    a4a2:	2309      	movs	r3, #9
    a4a4:	e003      	b.n	a4ae <os_arch_task_stack_init+0x16>
        s[i] = 0;
    a4a6:	2200      	movs	r2, #0
    a4a8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for (i = 9; i < 14; ++i) {
    a4ac:	3301      	adds	r3, #1
    a4ae:	2b0d      	cmp	r3, #13
    a4b0:	ddf9      	ble.n	a4a6 <os_arch_task_stack_init+0xe>
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
    a4b2:	4620      	mov	r0, r4
    a4b4:	f000 fbb6 	bl	ac24 <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
    a4b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    a4bc:	f845 3c04 	str.w	r3, [r5, #-4]
    sf->pc = (uint32_t)t->t_func;
    a4c0:	6973      	ldr	r3, [r6, #20]
    a4c2:	f845 3c08 	str.w	r3, [r5, #-8]
    sf->r0 = (uint32_t)t->t_arg;
    a4c6:	69b3      	ldr	r3, [r6, #24]
    a4c8:	f845 3c20 	str.w	r3, [r5, #-32]
#if MYNEWT_VAL(HARDFLOAT)
    sf->exc_lr = INITIAL_LR;
    a4cc:	f06f 0302 	mvn.w	r3, #2
    a4d0:	f845 3c24 	str.w	r3, [r5, #-36]
#endif

    return (s);
}
    a4d4:	4620      	mov	r0, r4
    a4d6:	bd70      	pop	{r4, r5, r6, pc}

0000a4d8 <os_arch_init>:

void
os_arch_init(void)
{
    a4d8:	b508      	push	{r3, lr}
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    a4da:	4a04      	ldr	r2, [pc, #16]	; (a4ec <os_arch_init+0x14>)
    a4dc:	6953      	ldr	r3, [r2, #20]
    a4de:	f043 0310 	orr.w	r3, r3, #16
    a4e2:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
    a4e4:	f7fe fe72 	bl	91cc <os_init_idle_task>
}
    a4e8:	bd08      	pop	{r3, pc}
    a4ea:	bf00      	nop
    a4ec:	e000ed00 	.word	0xe000ed00

0000a4f0 <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
    a4f0:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    a4f2:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
    a4f6:	b914      	cbnz	r4, a4fe <os_arch_os_init+0xe>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
    a4f8:	f04f 0c00 	mov.w	ip, #0
    a4fc:	e00a      	b.n	a514 <os_arch_os_init+0x24>
    err = OS_ERR_IN_ISR;
    a4fe:	2007      	movs	r0, #7
    a500:	e034      	b.n	a56c <os_arch_os_init+0x7c>
            NVIC->IP[i] = -1;
    a502:	f10c 4e60 	add.w	lr, ip, #3758096384	; 0xe0000000
    a506:	f50e 4e61 	add.w	lr, lr, #57600	; 0xe100
    a50a:	24ff      	movs	r4, #255	; 0xff
    a50c:	f88e 4300 	strb.w	r4, [lr, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
    a510:	f10c 0c01 	add.w	ip, ip, #1
    a514:	f1bc 0fef 	cmp.w	ip, #239	; 0xef
    a518:	d9f3      	bls.n	a502 <os_arch_os_init+0x12>
         * Install default interrupt handler for all interrupts except Reset,
         * which'll print out system state at the time of the interrupt, and
         * few other regs which should help in trying to figure out what went
         * wrong.
         */
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
    a51a:	f06f 0c0d 	mvn.w	ip, #13
    a51e:	e00a      	b.n	a536 <os_arch_os_init+0x46>
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
            NVIC_SetVector(i, (uint32_t)os_default_irq_asm);
    a520:	fa4f fe8c 	sxtb.w	lr, ip
  uint32_t vectors = (uint32_t )SCB->VTOR;
    a524:	4c14      	ldr	r4, [pc, #80]	; (a578 <os_arch_os_init+0x88>)
    a526:	68a4      	ldr	r4, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    a528:	f10e 0e10 	add.w	lr, lr, #16
    a52c:	4d13      	ldr	r5, [pc, #76]	; (a57c <os_arch_os_init+0x8c>)
    a52e:	f844 502e 	str.w	r5, [r4, lr, lsl #2]
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
    a532:	f10c 0c01 	add.w	ip, ip, #1
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
    a536:	f1bc 0f25 	cmp.w	ip, #37	; 0x25
    a53a:	ddf1      	ble.n	a520 <os_arch_os_init+0x30>
  uint32_t vectors = (uint32_t )SCB->VTOR;
    a53c:	4c0e      	ldr	r4, [pc, #56]	; (a578 <os_arch_os_init+0x88>)
    a53e:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    a540:	4e0f      	ldr	r6, [pc, #60]	; (a580 <os_arch_os_init+0x90>)
    a542:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
    a544:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    a546:	4e0f      	ldr	r6, [pc, #60]	; (a584 <os_arch_os_init+0x94>)
    a548:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
    a54a:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    a54c:	4e0e      	ldr	r6, [pc, #56]	; (a588 <os_arch_os_init+0x98>)
    a54e:	63ee      	str	r6, [r5, #60]	; 0x3c
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a550:	25e0      	movs	r5, #224	; 0xe0
    a552:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
    a556:	2520      	movs	r5, #32
    a558:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    a55a:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVCall_IRQn, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
    a55e:	f014 0f01 	tst.w	r4, #1
    a562:	d004      	beq.n	a56e <os_arch_os_init+0x7e>
    SVC_Call(os_arch_init);
    a564:	f8df c024 	ldr.w	ip, [pc, #36]	; a58c <os_arch_os_init+0x9c>
    a568:	df00      	svc	0
        err = OS_OK;
    a56a:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
    a56c:	bd70      	pop	{r4, r5, r6, pc}
            os_arch_init();
    a56e:	f7ff ffb3 	bl	a4d8 <os_arch_init>
        err = OS_OK;
    a572:	2000      	movs	r0, #0
    a574:	e7fa      	b.n	a56c <os_arch_os_init+0x7c>
    a576:	bf00      	nop
    a578:	e000ed00 	.word	0xe000ed00
    a57c:	0000acc3 	.word	0x0000acc3
    a580:	0000ac2b 	.word	0x0000ac2b
    a584:	0000ac71 	.word	0x0000ac71
    a588:	0000acb7 	.word	0x0000acb7
    a58c:	0000a4d9 	.word	0x0000a4d9

0000a590 <os_arch_start>:

uint32_t
os_arch_start(void)
{
    a590:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
    a592:	f7ff fc45 	bl	9e20 <os_sched_next_task>
    a596:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
    a598:	f7ff fb3a 	bl	9c10 <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
    a59c:	6823      	ldr	r3, [r4, #0]
    a59e:	3324      	adds	r3, #36	; 0x24
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    a5a0:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
    a5a4:	2106      	movs	r1, #6
    a5a6:	2080      	movs	r0, #128	; 0x80
    a5a8:	f00d fcd4 	bl	17f54 <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
    a5ac:	4b03      	ldr	r3, [pc, #12]	; (a5bc <os_arch_start+0x2c>)
    a5ae:	2201      	movs	r2, #1
    a5b0:	601a      	str	r2, [r3, #0]

    /* Perform context switch */
    os_arch_ctx_sw(t);
    a5b2:	4620      	mov	r0, r4
    a5b4:	f7ff ff58 	bl	a468 <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
    a5b8:	69a0      	ldr	r0, [r4, #24]
    a5ba:	bd10      	pop	{r4, pc}
    a5bc:	20002658 	.word	0x20002658

0000a5c0 <os_arch_os_start>:
 *
 * @return os_error_t
 */
os_error_t
os_arch_os_start(void)
{
    a5c0:	b510      	push	{r4, lr}
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
    a5c2:	4816      	ldr	r0, [pc, #88]	; (a61c <os_arch_os_start+0x5c>)
    a5c4:	6800      	ldr	r0, [r0, #0]
    a5c6:	3804      	subs	r0, #4
    a5c8:	f000 fb22 	bl	ac10 <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    a5cc:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
    a5d0:	bb04      	cbnz	r4, a614 <os_arch_os_start+0x54>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    a5d2:	f3ef 8c14 	mrs	ip, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
    a5d6:	f00c 0c03 	and.w	ip, ip, #3
    a5da:	f1bc 0f02 	cmp.w	ip, #2
    a5de:	d00f      	beq.n	a600 <os_arch_os_start+0x40>
    a5e0:	d804      	bhi.n	a5ec <os_arch_os_start+0x2c>
    a5e2:	f1bc 0f01 	cmp.w	ip, #1
    a5e6:	d810      	bhi.n	a60a <os_arch_os_start+0x4a>
    a5e8:	2008      	movs	r0, #8
            svc_os_arch_start();
        }
    }

    return err;
}
    a5ea:	bd10      	pop	{r4, pc}
        switch (__get_CONTROL() & 0x03) {
    a5ec:	f1bc 0f03 	cmp.w	ip, #3
    a5f0:	d10b      	bne.n	a60a <os_arch_os_start+0x4a>
            if  ((os_flags & 1) == OS_RUN_PRIV) {
    a5f2:	4c0b      	ldr	r4, [pc, #44]	; (a620 <os_arch_os_start+0x60>)
    a5f4:	6824      	ldr	r4, [r4, #0]
    a5f6:	f014 0f01 	tst.w	r4, #1
    a5fa:	d106      	bne.n	a60a <os_arch_os_start+0x4a>
                err = OS_ERR_PRIV;
    a5fc:	2008      	movs	r0, #8
    a5fe:	e7f4      	b.n	a5ea <os_arch_os_start+0x2a>
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
    a600:	4c07      	ldr	r4, [pc, #28]	; (a620 <os_arch_os_start+0x60>)
    a602:	6824      	ldr	r4, [r4, #0]
    a604:	f014 0f01 	tst.w	r4, #1
    a608:	d106      	bne.n	a618 <os_arch_os_start+0x58>
    SVC_Call(os_arch_start);
    a60a:	f8df c018 	ldr.w	ip, [pc, #24]	; a624 <os_arch_os_start+0x64>
    a60e:	df00      	svc	0
}
    a610:	2000      	movs	r0, #0
    a612:	e7ea      	b.n	a5ea <os_arch_os_start+0x2a>
    err = OS_ERR_IN_ISR;
    a614:	2007      	movs	r0, #7
    a616:	e7e8      	b.n	a5ea <os_arch_os_start+0x2a>
                err = OS_ERR_PRIV;
    a618:	2008      	movs	r0, #8
    a61a:	e7e6      	b.n	a5ea <os_arch_os_start+0x2a>
    a61c:	200014ac 	.word	0x200014ac
    a620:	200034b4 	.word	0x200034b4
    a624:	0000a591 	.word	0x0000a591

0000a628 <os_mqueue_init>:
#endif
#include "os/mynewt.h"

int
os_mqueue_init(struct os_mqueue *mq, os_event_fn *ev_cb, void *arg)
{
    a628:	4603      	mov	r3, r0
    struct os_event *ev;

    STAILQ_INIT(&mq->mq_head);
    a62a:	2000      	movs	r0, #0
    a62c:	6018      	str	r0, [r3, #0]
    a62e:	605b      	str	r3, [r3, #4]

    ev = &mq->mq_ev;
    memset(ev, 0, sizeof(*ev));
    a630:	6098      	str	r0, [r3, #8]
    a632:	60d8      	str	r0, [r3, #12]
    a634:	6118      	str	r0, [r3, #16]
    a636:	6158      	str	r0, [r3, #20]
    ev->ev_cb = ev_cb;
    a638:	60d9      	str	r1, [r3, #12]
    ev->ev_arg = arg;
    a63a:	611a      	str	r2, [r3, #16]

    return (0);
}
    a63c:	4770      	bx	lr

0000a63e <os_mqueue_get>:

struct os_mbuf *
os_mqueue_get(struct os_mqueue *mq)
{
    a63e:	b538      	push	{r3, r4, r5, lr}
    a640:	4605      	mov	r5, r0
    struct os_mbuf_pkthdr *mp;
    struct os_mbuf *m;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
    a642:	f7ff ff1b 	bl	a47c <os_arch_save_sr>
    mp = STAILQ_FIRST(&mq->mq_head);
    a646:	682c      	ldr	r4, [r5, #0]
    if (mp) {
    a648:	b114      	cbz	r4, a650 <os_mqueue_get+0x12>
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
    a64a:	6863      	ldr	r3, [r4, #4]
    a64c:	602b      	str	r3, [r5, #0]
    a64e:	b12b      	cbz	r3, a65c <os_mqueue_get+0x1e>
    }
    OS_EXIT_CRITICAL(sr);
    a650:	f7ff ff1a 	bl	a488 <os_arch_restore_sr>

    if (mp) {
    a654:	b104      	cbz	r4, a658 <os_mqueue_get+0x1a>
        m = OS_MBUF_PKTHDR_TO_MBUF(mp);
    a656:	3c10      	subs	r4, #16
    } else {
        m = NULL;
    }

    return (m);
}
    a658:	4620      	mov	r0, r4
    a65a:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
    a65c:	606d      	str	r5, [r5, #4]
    a65e:	e7f7      	b.n	a650 <os_mqueue_get+0x12>

0000a660 <os_mqueue_put>:

int
os_mqueue_put(struct os_mqueue *mq, struct os_eventq *evq, struct os_mbuf *m)
{
    a660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf_pkthdr *mp;
    os_sr_t sr;
    int rc;

    /* Can only place the head of a chained mbuf on the queue. */
    if (!OS_MBUF_IS_PKTHDR(m)) {
    a662:	7953      	ldrb	r3, [r2, #5]
    a664:	2b07      	cmp	r3, #7
    a666:	d916      	bls.n	a696 <os_mqueue_put+0x36>
    a668:	4605      	mov	r5, r0
    a66a:	460e      	mov	r6, r1
    a66c:	4614      	mov	r4, r2
        rc = OS_EINVAL;
        goto err;
    }

    mp = OS_MBUF_PKTHDR(m);
    a66e:	f102 0710 	add.w	r7, r2, #16

    OS_ENTER_CRITICAL(sr);
    a672:	f7ff ff03 	bl	a47c <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&mq->mq_head, mp, omp_next);
    a676:	2300      	movs	r3, #0
    a678:	f844 3f14 	str.w	r3, [r4, #20]!
    a67c:	686b      	ldr	r3, [r5, #4]
    a67e:	601f      	str	r7, [r3, #0]
    a680:	606c      	str	r4, [r5, #4]
    OS_EXIT_CRITICAL(sr);
    a682:	f7ff ff01 	bl	a488 <os_arch_restore_sr>

    /* Only post an event to the queue if its specified */
    if (evq) {
    a686:	b146      	cbz	r6, a69a <os_mqueue_put+0x3a>
        os_eventq_put(evq, &mq->mq_ev);
    a688:	f105 0108 	add.w	r1, r5, #8
    a68c:	4630      	mov	r0, r6
    a68e:	f7ff f811 	bl	96b4 <os_eventq_put>
    }

    return (0);
    a692:	2000      	movs	r0, #0
    a694:	e000      	b.n	a698 <os_mqueue_put+0x38>
err:
    return (rc);
    a696:	2002      	movs	r0, #2
}
    a698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (0);
    a69a:	2000      	movs	r0, #0
    a69c:	e7fc      	b.n	a698 <os_mqueue_put+0x38>

0000a69e <os_mbuf_get>:
    return (0);
}

struct os_mbuf *
os_mbuf_get(struct os_mbuf_pool *omp, uint16_t leadingspace)
{
    a69e:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET, (uint32_t)omp,
                       (uint32_t)leadingspace);

    if (leadingspace > omp->omp_databuf_len) {
    a6a0:	8803      	ldrh	r3, [r0, #0]
    a6a2:	428b      	cmp	r3, r1
    a6a4:	d310      	bcc.n	a6c8 <os_mbuf_get+0x2a>
    a6a6:	4604      	mov	r4, r0
    a6a8:	460d      	mov	r5, r1
        om = NULL;
        goto done;
    }

    om = os_memblock_get(omp->omp_pool);
    a6aa:	6840      	ldr	r0, [r0, #4]
    a6ac:	f7ff f8fa 	bl	98a4 <os_memblock_get>
    if (!om) {
    a6b0:	b148      	cbz	r0, a6c6 <os_mbuf_get+0x28>
        goto done;
    }

    SLIST_NEXT(om, om_next) = NULL;
    a6b2:	2300      	movs	r3, #0
    a6b4:	60c3      	str	r3, [r0, #12]
    om->om_flags = 0;
    a6b6:	7103      	strb	r3, [r0, #4]
    om->om_pkthdr_len = 0;
    a6b8:	7143      	strb	r3, [r0, #5]
    om->om_len = 0;
    a6ba:	80c3      	strh	r3, [r0, #6]
    om->om_data = (&om->om_databuf[0] + leadingspace);
    a6bc:	f100 0110 	add.w	r1, r0, #16
    a6c0:	440d      	add	r5, r1
    a6c2:	6005      	str	r5, [r0, #0]
    om->om_omp = omp;
    a6c4:	6084      	str	r4, [r0, #8]

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET, (uint32_t)om);
    return om;
}
    a6c6:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
    a6c8:	2000      	movs	r0, #0
    return om;
    a6ca:	e7fc      	b.n	a6c6 <os_mbuf_get+0x28>

0000a6cc <os_mbuf_get_pkthdr>:

struct os_mbuf *
os_mbuf_get_pkthdr(struct os_mbuf_pool *omp, uint8_t user_pkthdr_len)
{
    a6cc:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)omp,
                       (uint32_t)user_pkthdr_len);

    /* User packet header must fit inside mbuf */
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
    a6ce:	f101 0508 	add.w	r5, r1, #8
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
    a6d2:	8803      	ldrh	r3, [r0, #0]
    a6d4:	42ab      	cmp	r3, r5
    a6d6:	d30e      	bcc.n	a6f6 <os_mbuf_get_pkthdr+0x2a>
    a6d8:	2dff      	cmp	r5, #255	; 0xff
    a6da:	d80e      	bhi.n	a6fa <os_mbuf_get_pkthdr+0x2e>
        om = NULL;
        goto done;
    }

    om = os_mbuf_get(omp, 0);
    a6dc:	2100      	movs	r1, #0
    a6de:	f7ff ffde 	bl	a69e <os_mbuf_get>
    if (om) {
    a6e2:	b138      	cbz	r0, a6f4 <os_mbuf_get_pkthdr+0x28>
        om->om_pkthdr_len = pkthdr_len;
    a6e4:	7145      	strb	r5, [r0, #5]
        om->om_data += pkthdr_len;
    a6e6:	6803      	ldr	r3, [r0, #0]
    a6e8:	442b      	add	r3, r5
    a6ea:	6003      	str	r3, [r0, #0]

        pkthdr = OS_MBUF_PKTHDR(om);
        pkthdr->omp_len = 0;
    a6ec:	2300      	movs	r3, #0
    a6ee:	8203      	strh	r3, [r0, #16]
        pkthdr->omp_flags = 0;
    a6f0:	8243      	strh	r3, [r0, #18]
        STAILQ_NEXT(pkthdr, omp_next) = NULL;
    a6f2:	6143      	str	r3, [r0, #20]
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)om);
    return om;
}
    a6f4:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
    a6f6:	2000      	movs	r0, #0
    a6f8:	e7fc      	b.n	a6f4 <os_mbuf_get_pkthdr+0x28>
    a6fa:	2000      	movs	r0, #0
    return om;
    a6fc:	e7fa      	b.n	a6f4 <os_mbuf_get_pkthdr+0x28>

0000a6fe <os_mbuf_free>:

int
os_mbuf_free(struct os_mbuf *om)
{
    a6fe:	b508      	push	{r3, lr}
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)om);

    if (om->om_omp != NULL) {
    a700:	6883      	ldr	r3, [r0, #8]
    a702:	b123      	cbz	r3, a70e <os_mbuf_free+0x10>
    a704:	4601      	mov	r1, r0
        rc = os_memblock_put(om->om_omp->omp_pool, om);
    a706:	6858      	ldr	r0, [r3, #4]
    a708:	f7ff f8f4 	bl	98f4 <os_memblock_put>
    rc = 0;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)rc);
    return (rc);
}
    a70c:	bd08      	pop	{r3, pc}
    rc = 0;
    a70e:	2000      	movs	r0, #0
    return (rc);
    a710:	e7fc      	b.n	a70c <os_mbuf_free+0xe>

0000a712 <os_mbuf_free_chain>:
    struct os_mbuf *next;
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)om);

    while (om != NULL) {
    a712:	b158      	cbz	r0, a72c <os_mbuf_free_chain+0x1a>
{
    a714:	b510      	push	{r4, lr}
        next = SLIST_NEXT(om, om_next);
    a716:	68c4      	ldr	r4, [r0, #12]

        rc = os_mbuf_free(om);
    a718:	f7ff fff1 	bl	a6fe <os_mbuf_free>
        if (rc != 0) {
    a71c:	4603      	mov	r3, r0
    a71e:	b918      	cbnz	r0, a728 <os_mbuf_free_chain+0x16>
            goto done;
        }

        om = next;
    a720:	4620      	mov	r0, r4
    while (om != NULL) {
    a722:	2c00      	cmp	r4, #0
    a724:	d1f7      	bne.n	a716 <os_mbuf_free_chain+0x4>
    }

    rc = 0;
    a726:	2300      	movs	r3, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)rc);
    return (rc);
}
    a728:	4618      	mov	r0, r3
    a72a:	bd10      	pop	{r4, pc}
    rc = 0;
    a72c:	2300      	movs	r3, #0
}
    a72e:	4618      	mov	r0, r3
    a730:	4770      	bx	lr

0000a732 <os_mbuf_append>:
    return len;
}

int
os_mbuf_append(struct os_mbuf *om, const void *data,  uint16_t len)
{
    a732:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    struct os_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
    a736:	2800      	cmp	r0, #0
    a738:	d04b      	beq.n	a7d2 <os_mbuf_append+0xa0>
    a73a:	460f      	mov	r7, r1
    a73c:	4691      	mov	r9, r2
    a73e:	4682      	mov	sl, r0
        rc = OS_EINVAL;
        goto err;
    }

    omp = om->om_omp;
    a740:	f8d0 8008 	ldr.w	r8, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
    a744:	4603      	mov	r3, r0
    while (SLIST_NEXT(last, om_next) != NULL) {
    a746:	461e      	mov	r6, r3
    a748:	68db      	ldr	r3, [r3, #12]
    a74a:	2b00      	cmp	r3, #0
    a74c:	d1fb      	bne.n	a746 <os_mbuf_append+0x14>
        last = SLIST_NEXT(last, om_next);
    }

    remainder = len;
    a74e:	464d      	mov	r5, r9
static inline uint16_t
_os_mbuf_trailingspace(struct os_mbuf *om)
{
    struct os_mbuf_pool *omp;

    omp = om->om_omp;
    a750:	68b3      	ldr	r3, [r6, #8]

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    a752:	f106 0410 	add.w	r4, r6, #16
    a756:	881b      	ldrh	r3, [r3, #0]
    a758:	441c      	add	r4, r3
      (om->om_data + om->om_len);
    a75a:	6830      	ldr	r0, [r6, #0]
    a75c:	88f3      	ldrh	r3, [r6, #6]
    a75e:	4418      	add	r0, r3
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    a760:	1a24      	subs	r4, r4, r0
    a762:	b2a4      	uxth	r4, r4
    space = OS_MBUF_TRAILINGSPACE(last);

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
    a764:	b164      	cbz	r4, a780 <os_mbuf_append+0x4e>
        if (space > remainder) {
    a766:	454c      	cmp	r4, r9
    a768:	dd00      	ble.n	a76c <os_mbuf_append+0x3a>
            space = remainder;
    a76a:	464c      	mov	r4, r9
        }

        memcpy(OS_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
    a76c:	4622      	mov	r2, r4
    a76e:	4639      	mov	r1, r7
    a770:	f003 f93a 	bl	d9e8 <memcpy>

        last->om_len += space;
    a774:	88f3      	ldrh	r3, [r6, #6]
    a776:	4423      	add	r3, r4
    a778:	80f3      	strh	r3, [r6, #6]
        data += space;
    a77a:	4427      	add	r7, r4
        remainder -= space;
    a77c:	eba9 0504 	sub.w	r5, r9, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
    a780:	2d00      	cmp	r5, #0
    a782:	dd16      	ble.n	a7b2 <os_mbuf_append+0x80>
        new = os_mbuf_get(omp, 0);
    a784:	2100      	movs	r1, #0
    a786:	4640      	mov	r0, r8
    a788:	f7ff ff89 	bl	a69e <os_mbuf_get>
        if (!new) {
    a78c:	4604      	mov	r4, r0
    a78e:	b180      	cbz	r0, a7b2 <os_mbuf_append+0x80>
            break;
        }

        new->om_len = min(omp->omp_databuf_len, remainder);
    a790:	f8b8 2000 	ldrh.w	r2, [r8]
    a794:	42aa      	cmp	r2, r5
    a796:	bfa8      	it	ge
    a798:	462a      	movge	r2, r5
    a79a:	b292      	uxth	r2, r2
    a79c:	80c2      	strh	r2, [r0, #6]
        memcpy(OS_MBUF_DATA(new, void *), data, new->om_len);
    a79e:	4639      	mov	r1, r7
    a7a0:	6800      	ldr	r0, [r0, #0]
    a7a2:	f003 f921 	bl	d9e8 <memcpy>
        data += new->om_len;
    a7a6:	88e3      	ldrh	r3, [r4, #6]
    a7a8:	441f      	add	r7, r3
        remainder -= new->om_len;
    a7aa:	1aed      	subs	r5, r5, r3
        SLIST_NEXT(last, om_next) = new;
    a7ac:	60f4      	str	r4, [r6, #12]
        last = new;
    a7ae:	4626      	mov	r6, r4
    a7b0:	e7e6      	b.n	a780 <os_mbuf_append+0x4e>
    }

    /* Adjust the packet header length in the buffer */
    if (OS_MBUF_IS_PKTHDR(om)) {
    a7b2:	f89a 3005 	ldrb.w	r3, [sl, #5]
    a7b6:	2b07      	cmp	r3, #7
    a7b8:	d907      	bls.n	a7ca <os_mbuf_append+0x98>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
    a7ba:	eba9 0905 	sub.w	r9, r9, r5
    a7be:	f8ba 3010 	ldrh.w	r3, [sl, #16]
    a7c2:	fa13 f989 	uxtah	r9, r3, r9
    a7c6:	f8aa 9010 	strh.w	r9, [sl, #16]
    }

    if (remainder != 0) {
    a7ca:	b925      	cbnz	r5, a7d6 <os_mbuf_append+0xa4>


    return (0);
err:
    return (rc);
}
    a7cc:	4628      	mov	r0, r5
    a7ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = OS_EINVAL;
    a7d2:	2502      	movs	r5, #2
    a7d4:	e7fa      	b.n	a7cc <os_mbuf_append+0x9a>
        rc = OS_ENOMEM;
    a7d6:	2501      	movs	r5, #1
    a7d8:	e7f8      	b.n	a7cc <os_mbuf_append+0x9a>

0000a7da <os_mbuf_off>:

    /* Cast away const. */
    cur = (struct os_mbuf *)om;

    while (1) {
        if (cur == NULL) {
    a7da:	b178      	cbz	r0, a7fc <os_mbuf_off+0x22>
{
    a7dc:	b410      	push	{r4}
    a7de:	e002      	b.n	a7e6 <os_mbuf_off+0xc>

            *out_off = off;
            return cur;
        }

        off -= cur->om_len;
    a7e0:	1ac9      	subs	r1, r1, r3
        cur = next;
    a7e2:	4620      	mov	r0, r4
        if (cur == NULL) {
    a7e4:	b13c      	cbz	r4, a7f6 <os_mbuf_off+0x1c>
        next = SLIST_NEXT(cur, om_next);
    a7e6:	68c4      	ldr	r4, [r0, #12]
        if (cur->om_len > off ||
    a7e8:	88c3      	ldrh	r3, [r0, #6]
    a7ea:	428b      	cmp	r3, r1
    a7ec:	dc02      	bgt.n	a7f4 <os_mbuf_off+0x1a>
    a7ee:	d1f7      	bne.n	a7e0 <os_mbuf_off+0x6>
            (cur->om_len == off && next == NULL)) {
    a7f0:	2c00      	cmp	r4, #0
    a7f2:	d1f5      	bne.n	a7e0 <os_mbuf_off+0x6>
            *out_off = off;
    a7f4:	8011      	strh	r1, [r2, #0]
    }
}
    a7f6:	f85d 4b04 	ldr.w	r4, [sp], #4
    a7fa:	4770      	bx	lr
    a7fc:	4770      	bx	lr

0000a7fe <os_mbuf_copydata>:

int
os_mbuf_copydata(const struct os_mbuf *m, int off, int len, void *dst)
{
    a7fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a800:	4604      	mov	r4, r0
    a802:	461f      	mov	r7, r3
    unsigned int count;
    uint8_t *udst;

    if (!len) {
    a804:	4616      	mov	r6, r2
    a806:	b91a      	cbnz	r2, a810 <os_mbuf_copydata+0x12>
        return 0;
    a808:	4610      	mov	r0, r2
    a80a:	e01e      	b.n	a84a <os_mbuf_copydata+0x4c>
            return (-1);
        }

        if (off < m->om_len)
            break;
        off -= m->om_len;
    a80c:	1a89      	subs	r1, r1, r2
        m = SLIST_NEXT(m, om_next);
    a80e:	68e4      	ldr	r4, [r4, #12]
    while (off > 0) {
    a810:	2900      	cmp	r1, #0
    a812:	dd13      	ble.n	a83c <os_mbuf_copydata+0x3e>
        if (!m) {
    a814:	b1ec      	cbz	r4, a852 <os_mbuf_copydata+0x54>
        if (off < m->om_len)
    a816:	88e2      	ldrh	r2, [r4, #6]
    a818:	428a      	cmp	r2, r1
    a81a:	ddf7      	ble.n	a80c <os_mbuf_copydata+0xe>
    a81c:	e00e      	b.n	a83c <os_mbuf_copydata+0x3e>
    }
    while (len > 0 && m != NULL) {
        count = min(m->om_len - off, len);
    a81e:	88e5      	ldrh	r5, [r4, #6]
    a820:	1a6d      	subs	r5, r5, r1
    a822:	42b5      	cmp	r5, r6
    a824:	bfa8      	it	ge
    a826:	4635      	movge	r5, r6
        memcpy(udst, m->om_data + off, count);
    a828:	6823      	ldr	r3, [r4, #0]
    a82a:	462a      	mov	r2, r5
    a82c:	4419      	add	r1, r3
    a82e:	4638      	mov	r0, r7
    a830:	f003 f8da 	bl	d9e8 <memcpy>
        len -= count;
    a834:	1b76      	subs	r6, r6, r5
        udst += count;
    a836:	442f      	add	r7, r5
        off = 0;
        m = SLIST_NEXT(m, om_next);
    a838:	68e4      	ldr	r4, [r4, #12]
        off = 0;
    a83a:	2100      	movs	r1, #0
    while (len > 0 && m != NULL) {
    a83c:	2e00      	cmp	r6, #0
    a83e:	dd01      	ble.n	a844 <os_mbuf_copydata+0x46>
    a840:	2c00      	cmp	r4, #0
    a842:	d1ec      	bne.n	a81e <os_mbuf_copydata+0x20>
    }

    return (len > 0 ? -1 : 0);
    a844:	2e00      	cmp	r6, #0
    a846:	dc01      	bgt.n	a84c <os_mbuf_copydata+0x4e>
    a848:	2000      	movs	r0, #0
}
    a84a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (len > 0 ? -1 : 0);
    a84c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a850:	e7fb      	b.n	a84a <os_mbuf_copydata+0x4c>
            return (-1);
    a852:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a856:	e7f8      	b.n	a84a <os_mbuf_copydata+0x4c>

0000a858 <os_mbuf_adj>:
{
    int len = req_len;
    struct os_mbuf *m;
    int count;

    if ((m = mp) == NULL)
    a858:	2800      	cmp	r0, #0
    a85a:	d053      	beq.n	a904 <os_mbuf_adj+0xac>
{
    a85c:	b510      	push	{r4, lr}
    a85e:	4604      	mov	r4, r0
        return;
    if (len >= 0) {
    a860:	2900      	cmp	r1, #0
    a862:	db1b      	blt.n	a89c <os_mbuf_adj+0x44>
    if ((m = mp) == NULL)
    a864:	4603      	mov	r3, r0
    int len = req_len;
    a866:	460a      	mov	r2, r1
    a868:	e005      	b.n	a876 <os_mbuf_adj+0x1e>
            if (m->om_len <= len) {
                len -= m->om_len;
                m->om_len = 0;
                m = SLIST_NEXT(m, om_next);
            } else {
                m->om_len -= len;
    a86a:	1a80      	subs	r0, r0, r2
    a86c:	80d8      	strh	r0, [r3, #6]
                m->om_data += len;
    a86e:	6818      	ldr	r0, [r3, #0]
    a870:	4402      	add	r2, r0
    a872:	601a      	str	r2, [r3, #0]
                len = 0;
    a874:	2200      	movs	r2, #0
        while (m != NULL && len > 0) {
    a876:	b14b      	cbz	r3, a88c <os_mbuf_adj+0x34>
    a878:	2a00      	cmp	r2, #0
    a87a:	dd07      	ble.n	a88c <os_mbuf_adj+0x34>
            if (m->om_len <= len) {
    a87c:	88d8      	ldrh	r0, [r3, #6]
    a87e:	4290      	cmp	r0, r2
    a880:	dcf3      	bgt.n	a86a <os_mbuf_adj+0x12>
                len -= m->om_len;
    a882:	1a12      	subs	r2, r2, r0
                m->om_len = 0;
    a884:	2000      	movs	r0, #0
    a886:	80d8      	strh	r0, [r3, #6]
                m = SLIST_NEXT(m, om_next);
    a888:	68db      	ldr	r3, [r3, #12]
    a88a:	e7f4      	b.n	a876 <os_mbuf_adj+0x1e>
            }
        }
        if (OS_MBUF_IS_PKTHDR(mp))
    a88c:	7963      	ldrb	r3, [r4, #5]
    a88e:	2b07      	cmp	r3, #7
    a890:	d903      	bls.n	a89a <os_mbuf_adj+0x42>
            OS_MBUF_PKTHDR(mp)->omp_len -= (req_len - len);
    a892:	1a52      	subs	r2, r2, r1
    a894:	8a23      	ldrh	r3, [r4, #16]
    a896:	441a      	add	r2, r3
    a898:	8222      	strh	r2, [r4, #16]
                break;
            }
            count -= m->om_len;
        }
    }
}
    a89a:	bd10      	pop	{r4, pc}
        len = -len;
    a89c:	f1c1 0e00 	rsb	lr, r1, #0
    if ((m = mp) == NULL)
    a8a0:	4603      	mov	r3, r0
        count = 0;
    a8a2:	2200      	movs	r2, #0
            count += m->om_len;
    a8a4:	88d8      	ldrh	r0, [r3, #6]
    a8a6:	4402      	add	r2, r0
            if (SLIST_NEXT(m, om_next) == (struct os_mbuf *)0)
    a8a8:	469c      	mov	ip, r3
    a8aa:	68db      	ldr	r3, [r3, #12]
    a8ac:	2b00      	cmp	r3, #0
    a8ae:	d1f9      	bne.n	a8a4 <os_mbuf_adj+0x4c>
        if (m->om_len >= len) {
    a8b0:	4570      	cmp	r0, lr
    a8b2:	da0d      	bge.n	a8d0 <os_mbuf_adj+0x78>
        if (count < 0)
    a8b4:	188a      	adds	r2, r1, r2
    a8b6:	d41a      	bmi.n	a8ee <os_mbuf_adj+0x96>
        if (OS_MBUF_IS_PKTHDR(m))
    a8b8:	7963      	ldrb	r3, [r4, #5]
    a8ba:	2b07      	cmp	r3, #7
    a8bc:	d900      	bls.n	a8c0 <os_mbuf_adj+0x68>
            OS_MBUF_PKTHDR(m)->omp_len = count;
    a8be:	8222      	strh	r2, [r4, #16]
        for (; m; m = SLIST_NEXT(m, om_next)) {
    a8c0:	2c00      	cmp	r4, #0
    a8c2:	d0ea      	beq.n	a89a <os_mbuf_adj+0x42>
            if (m->om_len >= count) {
    a8c4:	88e3      	ldrh	r3, [r4, #6]
    a8c6:	4293      	cmp	r3, r2
    a8c8:	da13      	bge.n	a8f2 <os_mbuf_adj+0x9a>
            count -= m->om_len;
    a8ca:	1ad2      	subs	r2, r2, r3
        for (; m; m = SLIST_NEXT(m, om_next)) {
    a8cc:	68e4      	ldr	r4, [r4, #12]
    a8ce:	e7f7      	b.n	a8c0 <os_mbuf_adj+0x68>
            m->om_len -= len;
    a8d0:	fa1f fe8e 	uxth.w	lr, lr
    a8d4:	eba0 000e 	sub.w	r0, r0, lr
    a8d8:	f8ac 0006 	strh.w	r0, [ip, #6]
            if (OS_MBUF_IS_PKTHDR(mp))
    a8dc:	7963      	ldrb	r3, [r4, #5]
    a8de:	2b07      	cmp	r3, #7
    a8e0:	d9db      	bls.n	a89a <os_mbuf_adj+0x42>
                OS_MBUF_PKTHDR(mp)->omp_len -= len;
    a8e2:	8a23      	ldrh	r3, [r4, #16]
    a8e4:	eba3 0e0e 	sub.w	lr, r3, lr
    a8e8:	f8a4 e010 	strh.w	lr, [r4, #16]
            return;
    a8ec:	e7d5      	b.n	a89a <os_mbuf_adj+0x42>
            count = 0;
    a8ee:	2200      	movs	r2, #0
    a8f0:	e7e2      	b.n	a8b8 <os_mbuf_adj+0x60>
                m->om_len = count;
    a8f2:	80e2      	strh	r2, [r4, #6]
                if (SLIST_NEXT(m, om_next) != NULL) {
    a8f4:	68e0      	ldr	r0, [r4, #12]
    a8f6:	2800      	cmp	r0, #0
    a8f8:	d0cf      	beq.n	a89a <os_mbuf_adj+0x42>
                    os_mbuf_free_chain(SLIST_NEXT(m, om_next));
    a8fa:	f7ff ff0a 	bl	a712 <os_mbuf_free_chain>
                    SLIST_NEXT(m, om_next) = NULL;
    a8fe:	2300      	movs	r3, #0
    a900:	60e3      	str	r3, [r4, #12]
    a902:	e7ca      	b.n	a89a <os_mbuf_adj+0x42>
    a904:	4770      	bx	lr

0000a906 <os_mbuf_cmpf>:

int
os_mbuf_cmpf(const struct os_mbuf *om, int off, const void *data, int len)
{
    a906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a90a:	b082      	sub	sp, #8
    uint16_t chunk_sz;
    uint16_t data_off;
    uint16_t om_off;
    int rc;

    if (len <= 0) {
    a90c:	1e1e      	subs	r6, r3, #0
    a90e:	dd2d      	ble.n	a96c <os_mbuf_cmpf+0x66>
    a910:	4617      	mov	r7, r2
        return 0;
    }

    data_off = 0;
    om = os_mbuf_off(om, off, &om_off);
    a912:	f10d 0206 	add.w	r2, sp, #6
    a916:	f7ff ff60 	bl	a7da <os_mbuf_off>
    a91a:	4604      	mov	r4, r0
    data_off = 0;
    a91c:	f04f 0800 	mov.w	r8, #0
    a920:	e009      	b.n	a936 <os_mbuf_cmpf+0x30>
            if (rc != 0) {
                return rc;
            }
        }

        data_off += chunk_sz;
    a922:	4445      	add	r5, r8
    a924:	fa1f f885 	uxth.w	r8, r5
        if (data_off == len) {
    a928:	45b0      	cmp	r8, r6
    a92a:	d027      	beq.n	a97c <os_mbuf_cmpf+0x76>
            return 0;
        }

        om = SLIST_NEXT(om, om_next);
    a92c:	68e4      	ldr	r4, [r4, #12]
        om_off = 0;
    a92e:	2300      	movs	r3, #0
    a930:	f8ad 3006 	strh.w	r3, [sp, #6]

        if (om == NULL) {
    a934:	b1bc      	cbz	r4, a966 <os_mbuf_cmpf+0x60>
        if (om == NULL) {
    a936:	b1f4      	cbz	r4, a976 <os_mbuf_cmpf+0x70>
        chunk_sz = min(om->om_len - om_off, len - data_off);
    a938:	eba6 0208 	sub.w	r2, r6, r8
    a93c:	88e3      	ldrh	r3, [r4, #6]
    a93e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    a942:	1a1b      	subs	r3, r3, r0
    a944:	429a      	cmp	r2, r3
    a946:	bfa8      	it	ge
    a948:	461a      	movge	r2, r3
    a94a:	b295      	uxth	r5, r2
        if (chunk_sz > 0) {
    a94c:	2d00      	cmp	r5, #0
    a94e:	d0e8      	beq.n	a922 <os_mbuf_cmpf+0x1c>
            rc = memcmp(om->om_data + om_off, data + data_off, chunk_sz);
    a950:	6823      	ldr	r3, [r4, #0]
    a952:	462a      	mov	r2, r5
    a954:	eb07 0108 	add.w	r1, r7, r8
    a958:	4418      	add	r0, r3
    a95a:	f003 f821 	bl	d9a0 <memcmp>
            if (rc != 0) {
    a95e:	4603      	mov	r3, r0
    a960:	2800      	cmp	r0, #0
    a962:	d0de      	beq.n	a922 <os_mbuf_cmpf+0x1c>
    a964:	e003      	b.n	a96e <os_mbuf_cmpf+0x68>
            return INT_MAX;
    a966:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    a96a:	e000      	b.n	a96e <os_mbuf_cmpf+0x68>
        return 0;
    a96c:	2300      	movs	r3, #0
        }
    }
}
    a96e:	4618      	mov	r0, r3
    a970:	b002      	add	sp, #8
    a972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return INT_MAX;
    a976:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    a97a:	e7f8      	b.n	a96e <os_mbuf_cmpf+0x68>
            return 0;
    a97c:	2300      	movs	r3, #0
    a97e:	e7f6      	b.n	a96e <os_mbuf_cmpf+0x68>

0000a980 <os_mbuf_copyinto>:
    return om;
}

int
os_mbuf_copyinto(struct os_mbuf *om, int off, const void *src, int len)
{
    a980:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a984:	b083      	sub	sp, #12
    a986:	4681      	mov	r9, r0
    a988:	4688      	mov	r8, r1
    a98a:	4617      	mov	r7, r2
    a98c:	461e      	mov	r6, r3
    uint16_t cur_off;
    int copylen;
    int rc;

    /* Find the mbuf,offset pair for the start of the destination. */
    cur = os_mbuf_off(om, off, &cur_off);
    a98e:	f10d 0206 	add.w	r2, sp, #6
    a992:	f7ff ff22 	bl	a7da <os_mbuf_off>
    if (cur == NULL) {
    a996:	4605      	mov	r5, r0
    a998:	b948      	cbnz	r0, a9ae <os_mbuf_copyinto+0x2e>
        return -1;
    a99a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    a99e:	e02d      	b.n	a9fc <os_mbuf_copyinto+0x7c>
            len -= copylen;

            copylen = 0;
        }

        if (len == 0) {
    a9a0:	b366      	cbz	r6, a9fc <os_mbuf_copyinto+0x7c>
            /* All the source data fit in the existing mbuf chain. */
            return 0;
        }

        next = SLIST_NEXT(cur, om_next);
    a9a2:	68eb      	ldr	r3, [r5, #12]
        if (next == NULL) {
    a9a4:	b1ab      	cbz	r3, a9d2 <os_mbuf_copyinto+0x52>
            break;
        }

        cur = next;
        cur_off = 0;
    a9a6:	2200      	movs	r2, #0
    a9a8:	f8ad 2006 	strh.w	r2, [sp, #6]
        cur = next;
    a9ac:	461d      	mov	r5, r3
        copylen = min(cur->om_len - cur_off, len);
    a9ae:	88ec      	ldrh	r4, [r5, #6]
    a9b0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a9b4:	1ae4      	subs	r4, r4, r3
    a9b6:	42b4      	cmp	r4, r6
    a9b8:	bfa8      	it	ge
    a9ba:	4634      	movge	r4, r6
        if (copylen > 0) {
    a9bc:	2c00      	cmp	r4, #0
    a9be:	ddef      	ble.n	a9a0 <os_mbuf_copyinto+0x20>
            memcpy(cur->om_data + cur_off, sptr, copylen);
    a9c0:	6828      	ldr	r0, [r5, #0]
    a9c2:	4622      	mov	r2, r4
    a9c4:	4639      	mov	r1, r7
    a9c6:	4418      	add	r0, r3
    a9c8:	f003 f80e 	bl	d9e8 <memcpy>
            sptr += copylen;
    a9cc:	4427      	add	r7, r4
            len -= copylen;
    a9ce:	1b36      	subs	r6, r6, r4
            copylen = 0;
    a9d0:	e7e6      	b.n	a9a0 <os_mbuf_copyinto+0x20>
    }

    /* Append the remaining data to the end of the chain. */
    rc = os_mbuf_append(cur, sptr, len);
    a9d2:	b2b2      	uxth	r2, r6
    a9d4:	4639      	mov	r1, r7
    a9d6:	4628      	mov	r0, r5
    a9d8:	f7ff feab 	bl	a732 <os_mbuf_append>
    if (rc != 0) {
    a9dc:	b968      	cbnz	r0, a9fa <os_mbuf_copyinto+0x7a>
        return rc;
    }

    /* Fix up the packet header, if one is present. */
    if (OS_MBUF_IS_PKTHDR(om)) {
    a9de:	f899 2005 	ldrb.w	r2, [r9, #5]
    a9e2:	2a07      	cmp	r2, #7
    a9e4:	d90e      	bls.n	aa04 <os_mbuf_copyinto+0x84>
        OS_MBUF_PKTHDR(om)->omp_len =
            max(OS_MBUF_PKTHDR(om)->omp_len, off + len);
    a9e6:	4446      	add	r6, r8
    a9e8:	f8b9 8010 	ldrh.w	r8, [r9, #16]
    a9ec:	4546      	cmp	r6, r8
    a9ee:	bfb8      	it	lt
    a9f0:	4646      	movlt	r6, r8
        OS_MBUF_PKTHDR(om)->omp_len =
    a9f2:	f8a9 6010 	strh.w	r6, [r9, #16]
    }

    return 0;
    a9f6:	4606      	mov	r6, r0
    a9f8:	e000      	b.n	a9fc <os_mbuf_copyinto+0x7c>
        return rc;
    a9fa:	4606      	mov	r6, r0
}
    a9fc:	4630      	mov	r0, r6
    a9fe:	b003      	add	sp, #12
    aa00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
    aa04:	4606      	mov	r6, r0
    aa06:	e7f9      	b.n	a9fc <os_mbuf_copyinto+0x7c>

0000aa08 <os_mbuf_extend>:
    second->om_pkthdr_len = 0;
}

void *
os_mbuf_extend(struct os_mbuf *om, uint16_t len)
{
    aa08:	b570      	push	{r4, r5, r6, lr}
    aa0a:	4606      	mov	r6, r0
    struct os_mbuf *newm;
    struct os_mbuf *last;
    void *data;

    if (len > om->om_omp->omp_databuf_len) {
    aa0c:	6880      	ldr	r0, [r0, #8]
    aa0e:	8803      	ldrh	r3, [r0, #0]
    aa10:	428b      	cmp	r3, r1
    aa12:	d325      	bcc.n	aa60 <os_mbuf_extend+0x58>
    aa14:	460d      	mov	r5, r1
        return NULL;
    }

    /* Scroll to last mbuf in the chain */
    last = om;
    aa16:	4633      	mov	r3, r6
    while (SLIST_NEXT(last, om_next) != NULL) {
    aa18:	461c      	mov	r4, r3
    aa1a:	68db      	ldr	r3, [r3, #12]
    aa1c:	2b00      	cmp	r3, #0
    aa1e:	d1fb      	bne.n	aa18 <os_mbuf_extend+0x10>
    omp = om->om_omp;
    aa20:	68a2      	ldr	r2, [r4, #8]
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    aa22:	f104 0310 	add.w	r3, r4, #16
    aa26:	8812      	ldrh	r2, [r2, #0]
    aa28:	4413      	add	r3, r2
      (om->om_data + om->om_len);
    aa2a:	6822      	ldr	r2, [r4, #0]
    aa2c:	88e1      	ldrh	r1, [r4, #6]
    aa2e:	440a      	add	r2, r1
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    aa30:	1a9b      	subs	r3, r3, r2
    aa32:	b29b      	uxth	r3, r3
        last = SLIST_NEXT(last, om_next);
    }

    if (OS_MBUF_TRAILINGSPACE(last) < len) {
    aa34:	429d      	cmp	r5, r3
    aa36:	d80b      	bhi.n	aa50 <os_mbuf_extend+0x48>

        SLIST_NEXT(last, om_next) = newm;
        last = newm;
    }

    data = last->om_data + last->om_len;
    aa38:	6820      	ldr	r0, [r4, #0]
    aa3a:	88e3      	ldrh	r3, [r4, #6]
    aa3c:	4418      	add	r0, r3
    last->om_len += len;
    aa3e:	442b      	add	r3, r5
    aa40:	80e3      	strh	r3, [r4, #6]

    if (OS_MBUF_IS_PKTHDR(om)) {
    aa42:	7973      	ldrb	r3, [r6, #5]
    aa44:	2b07      	cmp	r3, #7
    aa46:	d902      	bls.n	aa4e <os_mbuf_extend+0x46>
        OS_MBUF_PKTHDR(om)->omp_len += len;
    aa48:	8a33      	ldrh	r3, [r6, #16]
    aa4a:	441d      	add	r5, r3
    aa4c:	8235      	strh	r5, [r6, #16]
    }

    return data;
}
    aa4e:	bd70      	pop	{r4, r5, r6, pc}
        newm = os_mbuf_get(om->om_omp, 0);
    aa50:	2100      	movs	r1, #0
    aa52:	f7ff fe24 	bl	a69e <os_mbuf_get>
        if (newm == NULL) {
    aa56:	2800      	cmp	r0, #0
    aa58:	d0f9      	beq.n	aa4e <os_mbuf_extend+0x46>
        SLIST_NEXT(last, om_next) = newm;
    aa5a:	60e0      	str	r0, [r4, #12]
        last = newm;
    aa5c:	4604      	mov	r4, r0
    aa5e:	e7eb      	b.n	aa38 <os_mbuf_extend+0x30>
        return NULL;
    aa60:	2000      	movs	r0, #0
    aa62:	e7f4      	b.n	aa4e <os_mbuf_extend+0x46>

0000aa64 <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
    aa64:	4603      	mov	r3, r0
    aa66:	b128      	cbz	r0, aa74 <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
    aa68:	2000      	movs	r0, #0
    aa6a:	7158      	strb	r0, [r3, #5]
    mu->mu_level = 0;
    aa6c:	80d8      	strh	r0, [r3, #6]
    mu->mu_owner = NULL;
    aa6e:	6098      	str	r0, [r3, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
    aa70:	6018      	str	r0, [r3, #0]

    ret = OS_OK;
    aa72:	4770      	bx	lr
        ret = OS_INVALID_PARM;
    aa74:	2003      	movs	r0, #3

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
    aa76:	4770      	bx	lr

0000aa78 <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
    aa78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
    aa7a:	4b2c      	ldr	r3, [pc, #176]	; (ab2c <os_mutex_release+0xb4>)
    aa7c:	681b      	ldr	r3, [r3, #0]
    aa7e:	2b00      	cmp	r3, #0
    aa80:	d04b      	beq.n	ab1a <os_mutex_release+0xa2>
    aa82:	4604      	mov	r4, r0
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
    aa84:	2800      	cmp	r0, #0
    aa86:	d04a      	beq.n	ab1e <os_mutex_release+0xa6>
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
    aa88:	f7ff f8bc 	bl	9c04 <os_sched_get_current_task>
    aa8c:	4605      	mov	r5, r0
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
    aa8e:	88e3      	ldrh	r3, [r4, #6]
    aa90:	2b00      	cmp	r3, #0
    aa92:	d046      	beq.n	ab22 <os_mutex_release+0xaa>
    aa94:	68a2      	ldr	r2, [r4, #8]
    aa96:	4282      	cmp	r2, r0
    aa98:	d145      	bne.n	ab26 <os_mutex_release+0xae>
        ret = OS_BAD_MUTEX;
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
    aa9a:	2b01      	cmp	r3, #1
    aa9c:	d003      	beq.n	aaa6 <os_mutex_release+0x2e>
        --mu->mu_level;
    aa9e:	3b01      	subs	r3, #1
    aaa0:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
    aaa2:	2000      	movs	r0, #0
        goto done;
    aaa4:	e03a      	b.n	ab1c <os_mutex_release+0xa4>
    }

    OS_ENTER_CRITICAL(sr);
    aaa6:	f7ff fce9 	bl	a47c <os_arch_save_sr>
    aaaa:	4607      	mov	r7, r0

    /* Decrement nesting level (this effectively sets nesting level to 0) */
    --mu->mu_level;
    aaac:	88e3      	ldrh	r3, [r4, #6]
    aaae:	3b01      	subs	r3, #1
    aab0:	80e3      	strh	r3, [r4, #6]

    /* Restore owner task's priority; resort list if different  */
    if (current->t_prio != mu->mu_prio) {
    aab2:	7aea      	ldrb	r2, [r5, #11]
    aab4:	7963      	ldrb	r3, [r4, #5]
    aab6:	429a      	cmp	r2, r3
    aab8:	d11e      	bne.n	aaf8 <os_mutex_release+0x80>
        current->t_prio = mu->mu_prio;
        os_sched_resort(current);
    }

    /* Check if tasks are waiting for the mutex */
    rdy = SLIST_FIRST(&mu->mu_head);
    aaba:	6826      	ldr	r6, [r4, #0]
    if (rdy) {
    aabc:	b146      	cbz	r6, aad0 <os_mutex_release+0x58>
        /* There is one waiting. Wake it up */
        assert(rdy->t_obj);
    aabe:	69f3      	ldr	r3, [r6, #28]
    aac0:	b1fb      	cbz	r3, ab02 <os_mutex_release+0x8a>
        os_sched_wakeup(rdy);
    aac2:	4630      	mov	r0, r6
    aac4:	f7ff f934 	bl	9d30 <os_sched_wakeup>

        /* Set mutex internals */
        mu->mu_level = 1;
    aac8:	2301      	movs	r3, #1
    aaca:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
    aacc:	7af3      	ldrb	r3, [r6, #11]
    aace:	7163      	strb	r3, [r4, #5]
    }

    /* Set new owner of mutex (or NULL if not owned) */
    mu->mu_owner = rdy;
    aad0:	60a6      	str	r6, [r4, #8]
    if (rdy) {
    aad2:	b116      	cbz	r6, aada <os_mutex_release+0x62>
        rdy->t_lockcnt++;
    aad4:	7bb3      	ldrb	r3, [r6, #14]
    aad6:	3301      	adds	r3, #1
    aad8:	73b3      	strb	r3, [r6, #14]
    }
    --current->t_lockcnt;
    aada:	7bab      	ldrb	r3, [r5, #14]
    aadc:	3b01      	subs	r3, #1
    aade:	73ab      	strb	r3, [r5, #14]

    /* Do we need to re-schedule? */
    resched = 0;
    rdy = os_sched_next_task();
    aae0:	f7ff f99e 	bl	9e20 <os_sched_next_task>
    aae4:	4604      	mov	r4, r0
    if (rdy != current) {
    aae6:	4285      	cmp	r5, r0
    aae8:	d010      	beq.n	ab0c <os_mutex_release+0x94>
        resched = 1;
    aaea:	2501      	movs	r5, #1
    }
    OS_EXIT_CRITICAL(sr);
    aaec:	4638      	mov	r0, r7
    aaee:	f7ff fccb 	bl	a488 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
    aaf2:	b96d      	cbnz	r5, ab10 <os_mutex_release+0x98>
        os_sched(rdy);
    }

    ret = OS_OK;
    aaf4:	2000      	movs	r0, #0
    aaf6:	e011      	b.n	ab1c <os_mutex_release+0xa4>
        current->t_prio = mu->mu_prio;
    aaf8:	72eb      	strb	r3, [r5, #11]
        os_sched_resort(current);
    aafa:	4628      	mov	r0, r5
    aafc:	f7ff f9a8 	bl	9e50 <os_sched_resort>
    ab00:	e7db      	b.n	aaba <os_mutex_release+0x42>
        assert(rdy->t_obj);
    ab02:	461a      	mov	r2, r3
    ab04:	4619      	mov	r1, r3
    ab06:	4618      	mov	r0, r3
    ab08:	f7fe faa0 	bl	904c <__assert_func>
    resched = 0;
    ab0c:	2500      	movs	r5, #0
    ab0e:	e7ed      	b.n	aaec <os_mutex_release+0x74>
        os_sched(rdy);
    ab10:	4620      	mov	r0, r4
    ab12:	f7ff f98b 	bl	9e2c <os_sched>
    ret = OS_OK;
    ab16:	2000      	movs	r0, #0
    ab18:	e000      	b.n	ab1c <os_mutex_release+0xa4>
        ret = OS_NOT_STARTED;
    ab1a:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
    ab1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
    ab1e:	2003      	movs	r0, #3
    ab20:	e7fc      	b.n	ab1c <os_mutex_release+0xa4>
        ret = OS_BAD_MUTEX;
    ab22:	2005      	movs	r0, #5
    ab24:	e7fa      	b.n	ab1c <os_mutex_release+0xa4>
    ab26:	2005      	movs	r0, #5
    ab28:	e7f8      	b.n	ab1c <os_mutex_release+0xa4>
    ab2a:	bf00      	nop
    ab2c:	20002658 	.word	0x20002658

0000ab30 <os_mutex_pend>:

os_error_t
os_mutex_pend(struct os_mutex *mu, os_time_t timeout)
{
    ab30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
    ab32:	4b36      	ldr	r3, [pc, #216]	; (ac0c <os_mutex_pend+0xdc>)
    ab34:	681b      	ldr	r3, [r3, #0]
    ab36:	2b00      	cmp	r3, #0
    ab38:	d063      	beq.n	ac02 <os_mutex_pend+0xd2>
    ab3a:	4605      	mov	r5, r0
    ab3c:	460e      	mov	r6, r1
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
    ab3e:	2800      	cmp	r0, #0
    ab40:	d061      	beq.n	ac06 <os_mutex_pend+0xd6>
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
    ab42:	f7ff fc9b 	bl	a47c <os_arch_save_sr>
    ab46:	4607      	mov	r7, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
    ab48:	f7ff f85c 	bl	9c04 <os_sched_get_current_task>
    ab4c:	4604      	mov	r4, r0
    if (mu->mu_level == 0) {
    ab4e:	88ea      	ldrh	r2, [r5, #6]
    ab50:	b1a2      	cbz	r2, ab7c <os_mutex_pend+0x4c>
        ret = OS_OK;
        goto done;
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
    ab52:	68ab      	ldr	r3, [r5, #8]
    ab54:	4283      	cmp	r3, r0
    ab56:	d01e      	beq.n	ab96 <os_mutex_pend+0x66>
        ret = OS_OK;
        goto done;
    }

    /* Mutex is not owned by us. If timeout is 0, return immediately */
    if (timeout == 0) {
    ab58:	b326      	cbz	r6, aba4 <os_mutex_pend+0x74>
        ret = OS_TIMEOUT;
        goto done;
    }

    /* Change priority of owner if needed */
    if (mu->mu_owner->t_prio > current->t_prio) {
    ab5a:	7ad9      	ldrb	r1, [r3, #11]
    ab5c:	7ac2      	ldrb	r2, [r0, #11]
    ab5e:	4291      	cmp	r1, r2
    ab60:	d825      	bhi.n	abae <os_mutex_pend+0x7e>
        os_sched_resort(mu->mu_owner);
    }

    /* Link current task to tasks waiting for mutex */
    last = NULL;
    if (!SLIST_EMPTY(&mu->mu_head)) {
    ab62:	6828      	ldr	r0, [r5, #0]
    ab64:	b368      	cbz	r0, abc2 <os_mutex_pend+0x92>
        /* Insert in priority order */
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
    ab66:	4603      	mov	r3, r0
    last = NULL;
    ab68:	2100      	movs	r1, #0
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
    ab6a:	b32b      	cbz	r3, abb8 <os_mutex_pend+0x88>
            if (current->t_prio < entry->t_prio) {
    ab6c:	f894 c00b 	ldrb.w	ip, [r4, #11]
    ab70:	7ada      	ldrb	r2, [r3, #11]
    ab72:	4594      	cmp	ip, r2
    ab74:	d320      	bcc.n	abb8 <os_mutex_pend+0x88>
                break;
            }
            last = entry;
    ab76:	4619      	mov	r1, r3
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
    ab78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    ab7a:	e7f6      	b.n	ab6a <os_mutex_pend+0x3a>
        mu->mu_owner = current;
    ab7c:	60a8      	str	r0, [r5, #8]
        mu->mu_prio  = current->t_prio;
    ab7e:	7ac3      	ldrb	r3, [r0, #11]
    ab80:	716b      	strb	r3, [r5, #5]
        current->t_lockcnt++;
    ab82:	7b83      	ldrb	r3, [r0, #14]
    ab84:	3301      	adds	r3, #1
    ab86:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
    ab88:	2301      	movs	r3, #1
    ab8a:	80eb      	strh	r3, [r5, #6]
        OS_EXIT_CRITICAL(sr);
    ab8c:	4638      	mov	r0, r7
    ab8e:	f7ff fc7b 	bl	a488 <os_arch_restore_sr>
        ret = OS_OK;
    ab92:	2000      	movs	r0, #0
        goto done;
    ab94:	e032      	b.n	abfc <os_mutex_pend+0xcc>
        ++mu->mu_level;
    ab96:	3201      	adds	r2, #1
    ab98:	80ea      	strh	r2, [r5, #6]
        OS_EXIT_CRITICAL(sr);
    ab9a:	4638      	mov	r0, r7
    ab9c:	f7ff fc74 	bl	a488 <os_arch_restore_sr>
        ret = OS_OK;
    aba0:	2000      	movs	r0, #0
        goto done;
    aba2:	e02b      	b.n	abfc <os_mutex_pend+0xcc>
        OS_EXIT_CRITICAL(sr);
    aba4:	4638      	mov	r0, r7
    aba6:	f7ff fc6f 	bl	a488 <os_arch_restore_sr>
        ret = OS_TIMEOUT;
    abaa:	2006      	movs	r0, #6
        goto done;
    abac:	e026      	b.n	abfc <os_mutex_pend+0xcc>
        mu->mu_owner->t_prio = current->t_prio;
    abae:	72da      	strb	r2, [r3, #11]
        os_sched_resort(mu->mu_owner);
    abb0:	68a8      	ldr	r0, [r5, #8]
    abb2:	f7ff f94d 	bl	9e50 <os_sched_resort>
    abb6:	e7d4      	b.n	ab62 <os_mutex_pend+0x32>
        }
    }

    if (last) {
    abb8:	b119      	cbz	r1, abc2 <os_mutex_pend+0x92>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
    abba:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
    abbc:	64e3      	str	r3, [r4, #76]	; 0x4c
    abbe:	64cc      	str	r4, [r1, #76]	; 0x4c
    abc0:	e001      	b.n	abc6 <os_mutex_pend+0x96>
    } else {
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
    abc2:	64e0      	str	r0, [r4, #76]	; 0x4c
    abc4:	602c      	str	r4, [r5, #0]
    }

    /* Set mutex pointer in task */
    current->t_obj = mu;
    abc6:	61e5      	str	r5, [r4, #28]
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
    abc8:	7b63      	ldrb	r3, [r4, #13]
    abca:	f043 0304 	orr.w	r3, r3, #4
    abce:	7363      	strb	r3, [r4, #13]
    os_sched_sleep(current, timeout);
    abd0:	4631      	mov	r1, r6
    abd2:	4620      	mov	r0, r4
    abd4:	f7ff f822 	bl	9c1c <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
    abd8:	4638      	mov	r0, r7
    abda:	f7ff fc55 	bl	a488 <os_arch_restore_sr>

    os_sched(NULL);
    abde:	2000      	movs	r0, #0
    abe0:	f7ff f924 	bl	9e2c <os_sched>

    OS_ENTER_CRITICAL(sr);
    abe4:	f7ff fc4a 	bl	a47c <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
    abe8:	7b63      	ldrb	r3, [r4, #13]
    abea:	f023 0304 	bic.w	r3, r3, #4
    abee:	7363      	strb	r3, [r4, #13]
    OS_EXIT_CRITICAL(sr);
    abf0:	f7ff fc4a 	bl	a488 <os_arch_restore_sr>

    /* If we are owner we did not time out. */
    if (mu->mu_owner == current) {
    abf4:	68ab      	ldr	r3, [r5, #8]
    abf6:	42a3      	cmp	r3, r4
    abf8:	d001      	beq.n	abfe <os_mutex_pend+0xce>
        ret = OS_OK;
    } else {
        ret = OS_TIMEOUT;
    abfa:	2006      	movs	r0, #6
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
    abfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_OK;
    abfe:	2000      	movs	r0, #0
    ac00:	e7fc      	b.n	abfc <os_mutex_pend+0xcc>
        ret = OS_NOT_STARTED;
    ac02:	2009      	movs	r0, #9
    ac04:	e7fa      	b.n	abfc <os_mutex_pend+0xcc>
        ret = OS_INVALID_PARM;
    ac06:	2003      	movs	r0, #3
    ac08:	e7f8      	b.n	abfc <os_mutex_pend+0xcc>
    ac0a:	bf00      	nop
    ac0c:	20002658 	.word	0x20002658

0000ac10 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
    ac10:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
    ac14:	4832      	ldr	r0, [pc, #200]	; (ace0 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
    ac16:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
    ac18:	3002      	adds	r0, #2
        MSR     CONTROL,R0
    ac1a:	f380 8814 	msr	CONTROL, r0
        ISB
    ac1e:	f3bf 8f6f 	isb	sy
        BX      LR
    ac22:	4770      	bx	lr

0000ac24 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
    ac24:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
    ac28:	4770      	bx	lr

0000ac2a <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
    ac2a:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
    ac2e:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
    ac30:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
    ac34:	b951      	cbnz	r1, ac4c <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
    ac36:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    ac3a:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
    ac3c:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    ac3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
    ac42:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
    ac46:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
    ac4a:	4770      	bx	lr

0000ac4c <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    ac4c:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
    ac4e:	4a25      	ldr	r2, [pc, #148]	; (ace4 <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
    ac50:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
    ac52:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
    ac54:	d809      	bhi.n	ac6a <SVC_Done>

        LDR     R4,=SVC_Table-4
    ac56:	4c24      	ldr	r4, [pc, #144]	; (ace8 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
    ac58:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
    ac5c:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
    ac60:	47a0      	blx	r4

        MRS     R12,PSP
    ac62:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
    ac66:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

0000ac6a <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    ac6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
    ac6e:	4770      	bx	lr

0000ac70 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
    ac70:	4b1e      	ldr	r3, [pc, #120]	; (acec <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
    ac72:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
    ac74:	4b1e      	ldr	r3, [pc, #120]	; (acf0 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
    ac76:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
    ac78:	4291      	cmp	r1, r2
        IT      EQ
    ac7a:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
    ac7c:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
    ac7e:	f3ef 8c09 	mrs	ip, PSP
#if MYNEWT_VAL(HARDFLOAT)
        TST     LR,#0x10                /* is it extended frame? */
    ac82:	f01e 0f10 	tst.w	lr, #16
        IT      EQ
    ac86:	bf08      	it	eq
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
    ac88:	ed2c 8a10 	vstmdbeq	ip!, {s16-s31}
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
    ac8c:	e92c 4ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
    ac90:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
    ac94:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
    ac96:	f8d2 c000 	ldr.w	ip, [r2]
#if MYNEWT_VAL(HARDFLOAT)
        LDMIA   R12!,{R4-R11,LR}        /* Restore New Context */
    ac9a:	e8bc 4ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        TST     LR,#0x10                /* is it extended frame? */
    ac9e:	f01e 0f10 	tst.w	lr, #16
        ITTE    EQ
    aca2:	bf06      	itte	eq
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
    aca4:	ecbc 8a10 	vldmiaeq	ip!, {s16-s31}
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
    aca8:	f06f 0e12 	mvneq.w	lr, #18
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
    acac:	f06f 0e02 	mvnne.w	lr, #2
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
#endif
        MSR     PSP,R12                 /* Write PSP */
    acb0:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
    acb4:	4770      	bx	lr

0000acb6 <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    acb6:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
    acb8:	f7ff fbd0 	bl	a45c <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    acbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
    acc0:	4770      	bx	lr

0000acc2 <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
    acc2:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
    acc6:	bf0c      	ite	eq
        MRSEQ   R3,MSP
    acc8:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
    accc:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
    acd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
    acd4:	4668      	mov	r0, sp
        BL      os_default_irq
    acd6:	f7fe f9df 	bl	9098 <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
    acda:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
    acde:	4770      	bx	lr
        LDR     R0,=os_flags
    ace0:	200034b4 	.word	0x200034b4
        LDR     R2,=SVC_Count
    ace4:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
    ace8:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
    acec:	20000548 	.word	0x20000548
        LDR     R3,=g_current_task      /* Get current task */
    acf0:	2000346c 	.word	0x2000346c
    acf4:	00000000 	.word	0x00000000

0000acf8 <tdma_superframe_slot_cb>:
 *
 * @return void
 */
static void
tdma_superframe_slot_cb(struct dpl_event * ev)
{
    acf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint16_t i;
    uint32_t slot_period_us;
    struct _tdma_slot_t *slot;
    tdma_instance_t * tdma;
    struct uwb_ccp_instance * ccp;
    assert(ev != NULL);
    acfc:	b170      	cbz	r0, ad1c <tdma_superframe_slot_cb+0x24>
    return ev->ev.ev_arg;
    acfe:	6886      	ldr	r6, [r0, #8]
    assert(dpl_event_get_arg(ev) != NULL);
    ad00:	b196      	cbz	r6, ad28 <tdma_superframe_slot_cb+0x30>

    DIAGMSG("{\"utime\": %"PRIu32",\"msg\": \"tdma_superframe_slot_cb\"}\n",
            dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
    slot = (struct _tdma_slot_t *) dpl_event_get_arg(ev);
    tdma = slot->parent;
    ad02:	68b5      	ldr	r5, [r6, #8]
    ccp = tdma->ccp;
    ad04:	f8d5 8004 	ldr.w	r8, [r5, #4]

    TDMA_STATS_INC(superframe_cnt);
    ad08:	6a2b      	ldr	r3, [r5, #32]
    ad0a:	3301      	adds	r3, #1
    ad0c:	622b      	str	r3, [r5, #32]

    /* Make sure all timers are stopped */
    dpl_cputime_timer_stop(&slot->timer);
    ad0e:	f106 070c 	add.w	r7, r6, #12
    ad12:	4638      	mov	r0, r7
    ad14:	f003 fb09 	bl	e32a <dpl_cputime_timer_stop>
    for (i = 0; i < tdma->nslots; i++) {
    ad18:	2400      	movs	r4, #0
    ad1a:	e00d      	b.n	ad38 <tdma_superframe_slot_cb+0x40>
    assert(ev != NULL);
    ad1c:	2300      	movs	r3, #0
    ad1e:	461a      	mov	r2, r3
    ad20:	4619      	mov	r1, r3
    ad22:	4618      	mov	r0, r3
    ad24:	f7fe f992 	bl	904c <__assert_func>
    assert(dpl_event_get_arg(ev) != NULL);
    ad28:	2300      	movs	r3, #0
    ad2a:	461a      	mov	r2, r3
    ad2c:	4619      	mov	r1, r3
    ad2e:	4618      	mov	r0, r3
    ad30:	f7fe f98c 	bl	904c <__assert_func>
    for (i = 0; i < tdma->nslots; i++) {
    ad34:	3401      	adds	r4, #1
    ad36:	b2a4      	uxth	r4, r4
    ad38:	f8b5 307a 	ldrh.w	r3, [r5, #122]	; 0x7a
    ad3c:	42a3      	cmp	r3, r4
    ad3e:	d909      	bls.n	ad54 <tdma_superframe_slot_cb+0x5c>
        if (tdma->slot[i]){
    ad40:	f504 73a4 	add.w	r3, r4, #328	; 0x148
    ad44:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
    ad48:	2800      	cmp	r0, #0
    ad4a:	d0f3      	beq.n	ad34 <tdma_superframe_slot_cb+0x3c>
            dpl_cputime_timer_stop(&tdma->slot[i]->timer);
    ad4c:	300c      	adds	r0, #12
    ad4e:	f003 faec 	bl	e32a <dpl_cputime_timer_stop>
    ad52:	e7ef      	b.n	ad34 <tdma_superframe_slot_cb+0x3c>
        }
    }
#if __KERNEL__
    slot_period_us = uwb_dwt_usecs_to_usecs(div64_s64(ccp->period, tdma->nslots));
#else
    slot_period_us = uwb_dwt_usecs_to_usecs(ccp->period / tdma->nslots);
    ad54:	f8d8 00e8 	ldr.w	r0, [r8, #232]	; 0xe8
    ad58:	fbb0 f0f3 	udiv	r0, r0, r3
    ad5c:	f016 fa44 	bl	211e8 <__aeabi_ui2d>
    ad60:	a31d      	add	r3, pc, #116	; (adr r3, add8 <tdma_superframe_slot_cb+0xe0>)
    ad62:	e9d3 2300 	ldrd	r2, r3, [r3]
    ad66:	f016 fab9 	bl	212dc <__aeabi_dmul>
    ad6a:	f016 fd8f 	bl	2188c <__aeabi_d2uiz>
    ad6e:	4681      	mov	r9, r0
#endif
    for (i = 0; i < tdma->nslots; i++) {
    ad70:	2400      	movs	r4, #0
    ad72:	e001      	b.n	ad78 <tdma_superframe_slot_cb+0x80>
    ad74:	3401      	adds	r4, #1
    ad76:	b2a4      	uxth	r4, r4
    ad78:	f8b5 307a 	ldrh.w	r3, [r5, #122]	; 0x7a
    ad7c:	42a3      	cmp	r3, r4
    ad7e:	d914      	bls.n	adaa <tdma_superframe_slot_cb+0xb2>
        if (tdma->slot[i]){
    ad80:	f504 73a4 	add.w	r3, r4, #328	; 0x148
    ad84:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
    ad88:	2a00      	cmp	r2, #0
    ad8a:	d0f3      	beq.n	ad74 <tdma_superframe_slot_cb+0x7c>
            tdma->slot[i]->cputime_slot_start = tdma->os_epoch
    ad8c:	6feb      	ldr	r3, [r5, #124]	; 0x7c
                + dpl_cputime_usecs_to_ticks((uint32_t) (i * slot_period_us) - MYNEWT_VAL(OS_LATENCY));
    ad8e:	fb09 3304 	mla	r3, r9, r4, r3
    ad92:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
            tdma->slot[i]->cputime_slot_start = tdma->os_epoch
    ad96:	6053      	str	r3, [r2, #4]
            hal_timer_start_at(&tdma->slot[i]->timer, tdma->slot[i]->cputime_slot_start);
    ad98:	f504 73a4 	add.w	r3, r4, #328	; 0x148
    ad9c:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
    ada0:	6841      	ldr	r1, [r0, #4]
    ada2:	300c      	adds	r0, #12
    ada4:	f00d fdc8 	bl	18938 <hal_timer_start_at>
    ada8:	e7e4      	b.n	ad74 <tdma_superframe_slot_cb+0x7c>
        }
    }

    /* Next superframe slot estimate */
    slot->cputime_slot_start = tdma->os_epoch
    adaa:	6fec      	ldr	r4, [r5, #124]	; 0x7c
        + dpl_cputime_usecs_to_ticks(
    adac:	f8d8 00e8 	ldr.w	r0, [r8, #232]	; 0xe8
    adb0:	f016 fa1a 	bl	211e8 <__aeabi_ui2d>
    adb4:	a308      	add	r3, pc, #32	; (adr r3, add8 <tdma_superframe_slot_cb+0xe0>)
    adb6:	e9d3 2300 	ldrd	r2, r3, [r3]
    adba:	f016 fa8f 	bl	212dc <__aeabi_dmul>
    adbe:	f016 fd65 	bl	2188c <__aeabi_d2uiz>
    adc2:	eb00 0109 	add.w	r1, r0, r9
    adc6:	4421      	add	r1, r4
    slot->cputime_slot_start = tdma->os_epoch
    adc8:	6071      	str	r1, [r6, #4]
            (uint32_t)uwb_dwt_usecs_to_usecs(ccp->period) + slot_period_us);
    hal_timer_start_at(&slot->timer, slot->cputime_slot_start);
    adca:	4638      	mov	r0, r7
    adcc:	f00d fdb4 	bl	18938 <hal_timer_start_at>
}
    add0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    add4:	f3af 8000 	nop.w
    add8:	90690691 	.word	0x90690691
    addc:	3ff06906 	.word	0x3ff06906

0000ade0 <slot_timer_cb>:
 *
 * @return void
 */
static void
slot_timer_cb(void * arg)
{
    ade0:	b508      	push	{r3, lr}
    assert(arg);
    ade2:	b168      	cbz	r0, ae00 <slot_timer_cb+0x20>
    ade4:	4601      	mov	r1, r0
    tdma_slot_t * slot = (tdma_slot_t *) arg;
    /* No point in continuing if this slot is NULL */
    if (slot == NULL) {
        return;
    }
    tdma_instance_t * tdma = slot->parent;
    ade6:	6880      	ldr	r0, [r0, #8]

    DIAGMSG("{\"utime\": %"PRIu32",\"msg\": \"slot_timer_cb\"}\n",
            dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));

    TDMA_STATS_INC(slot_timer_cnt);
    ade8:	69c3      	ldr	r3, [r0, #28]
    adea:	3301      	adds	r3, #1
    adec:	61c3      	str	r3, [r0, #28]

    if (slot == &tdma->superframe_slot) {
    adee:	f100 0380 	add.w	r3, r0, #128	; 0x80
    adf2:	428b      	cmp	r3, r1
    adf4:	d00a      	beq.n	ae0c <slot_timer_cb+0x2c>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    adf6:	3124      	adds	r1, #36	; 0x24
    adf8:	30b8      	adds	r0, #184	; 0xb8
    adfa:	f7fe fc5b 	bl	96b4 <os_eventq_put>
#ifdef TDMA_TASKS_ENABLE
    dpl_eventq_put(&tdma->eventq, &slot->event);
#else
    dpl_eventq_put(&tdma->dev_inst->eventq, &slot->event);
#endif
}
    adfe:	bd08      	pop	{r3, pc}
    assert(arg);
    ae00:	2300      	movs	r3, #0
    ae02:	461a      	mov	r2, r3
    ae04:	4619      	mov	r1, r3
    ae06:	4618      	mov	r0, r3
    ae08:	f7fe f920 	bl	904c <__assert_func>
        TDMA_STATS_INC(superframe_miss);
    ae0c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    ae0e:	3301      	adds	r3, #1
    ae10:	6243      	str	r3, [r0, #36]	; 0x24
        return;
    ae12:	e7f4      	b.n	adfe <slot_timer_cb+0x1e>

0000ae14 <superframe_cb>:
    tdma_instance_t * tdma = (tdma_instance_t*)cbs->inst_ptr;
    ae14:	6848      	ldr	r0, [r1, #4]
    struct uwb_ccp_instance *ccp = tdma->ccp;
    ae16:	6842      	ldr	r2, [r0, #4]
    if (!tdma) {
    ae18:	b180      	cbz	r0, ae3c <superframe_cb+0x28>
{
    ae1a:	b508      	push	{r3, lr}
    if (tdma->status.initialized) {
    ae1c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    ae20:	f013 0f02 	tst.w	r3, #2
    ae24:	d101      	bne.n	ae2a <superframe_cb+0x16>
}
    ae26:	2000      	movs	r0, #0
    ae28:	bd08      	pop	{r3, pc}
        tdma->os_epoch = ccp->os_epoch;
    ae2a:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
    ae2e:	67c3      	str	r3, [r0, #124]	; 0x7c
    ae30:	f100 01a4 	add.w	r1, r0, #164	; 0xa4
    ae34:	30b8      	adds	r0, #184	; 0xb8
    ae36:	f7fe fc3d 	bl	96b4 <os_eventq_put>
}
    ae3a:	e7f4      	b.n	ae26 <superframe_cb+0x12>
}
    ae3c:	2000      	movs	r0, #0
    ae3e:	4770      	bx	lr

0000ae40 <tdma_task>:
{
    ae40:	b570      	push	{r4, r5, r6, lr}
    ae42:	4606      	mov	r6, r0
    tdma_instance_t * tdma = arg;
    ae44:	e002      	b.n	ae4c <tdma_task+0xc>
    return ((struct os_event*)ev)->ev_cb((struct os_event*)ev);
    ae46:	6863      	ldr	r3, [r4, #4]
    ae48:	4620      	mov	r0, r4
    ae4a:	4798      	blx	r3
    return (struct dpl_event *) os_eventq_get((struct os_eventq *) evq);
    ae4c:	f106 00b8 	add.w	r0, r6, #184	; 0xb8
    ae50:	f7fe fc71 	bl	9736 <os_eventq_get>
    ae54:	4604      	mov	r4, r0
    return ev->ev.ev_arg;
    ae56:	6885      	ldr	r5, [r0, #8]
        ticks = dpl_cputime_get32();
    ae58:	f003 fa6b 	bl	e332 <dpl_cputime_get32>
        delay = dpl_cputime_ticks_to_usecs(ticks - slot->cputime_slot_start);
    ae5c:	686b      	ldr	r3, [r5, #4]
    ae5e:	1ac0      	subs	r0, r0, r3
        if (slot->idx!=0 && delay > MYNEWT_VAL(TDMA_MAX_SLOT_DELAY_US)) {
    ae60:	882b      	ldrh	r3, [r5, #0]
    ae62:	2b00      	cmp	r3, #0
    ae64:	d0ef      	beq.n	ae46 <tdma_task+0x6>
    ae66:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    ae6a:	d9ec      	bls.n	ae46 <tdma_task+0x6>
            TDMA_STATS_INC(dropped_slots);
    ae6c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    ae6e:	3301      	adds	r3, #1
    ae70:	62b3      	str	r3, [r6, #40]	; 0x28
    ae72:	e7eb      	b.n	ae4c <tdma_task+0xc>

0000ae74 <tdma_tasks_init>:
{
    ae74:	b530      	push	{r4, r5, lr}
    ae76:	b085      	sub	sp, #20
    ae78:	4604      	mov	r4, r0
    if (!dpl_eventq_inited(&inst->eventq))
    ae7a:	f100 05b8 	add.w	r5, r0, #184	; 0xb8
    return os_eventq_inited((struct os_eventq *) evq);
    ae7e:	4628      	mov	r0, r5
    ae80:	f7fe fc13 	bl	96aa <os_eventq_inited>
    ae84:	b108      	cbz	r0, ae8a <tdma_tasks_init+0x16>
}
    ae86:	b005      	add	sp, #20
    ae88:	bd30      	pop	{r4, r5, pc}
    os_eventq_init((struct os_eventq *) evq);
    ae8a:	4628      	mov	r0, r5
    ae8c:	f7fe fc04 	bl	9698 <os_eventq_init>
        dpl_task_init(&inst->task_str, "tdma",
    ae90:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
                      inst->task_stack,
    ae94:	f504 7290 	add.w	r2, r4, #288	; 0x120
    return os_task_init((struct os_task *) t, name, (os_task_func_t) func,
    ae98:	f44f 7180 	mov.w	r1, #256	; 0x100
    ae9c:	9103      	str	r1, [sp, #12]
    ae9e:	9202      	str	r2, [sp, #8]
    aea0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    aea4:	9201      	str	r2, [sp, #4]
    aea6:	9300      	str	r3, [sp, #0]
    aea8:	4623      	mov	r3, r4
    aeaa:	4a03      	ldr	r2, [pc, #12]	; (aeb8 <tdma_tasks_init+0x44>)
    aeac:	4903      	ldr	r1, [pc, #12]	; (aebc <tdma_tasks_init+0x48>)
    aeae:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    aeb2:	f7ff f883 	bl	9fbc <os_task_init>
}
    aeb6:	e7e6      	b.n	ae86 <tdma_tasks_init+0x12>
    aeb8:	0000ae41 	.word	0x0000ae41
    aebc:	00022e58 	.word	0x00022e58

0000aec0 <tdma_init>:
{
    aec0:	b570      	push	{r4, r5, r6, lr}
    aec2:	b082      	sub	sp, #8
    assert(dev);
    aec4:	2800      	cmp	r0, #0
    aec6:	d057      	beq.n	af78 <tdma_init+0xb8>
    aec8:	460d      	mov	r5, r1
    aeca:	4606      	mov	r6, r0
    tdma_instance_t * tdma = (tdma_instance_t*)uwb_mac_find_cb_inst_ptr(dev, UWBEXT_TDMA);
    aecc:	2103      	movs	r1, #3
    aece:	f7fd fe98 	bl	8c02 <uwb_mac_find_cb_inst_ptr>
    if (tdma == NULL) {
    aed2:	4604      	mov	r4, r0
    aed4:	2800      	cmp	r0, #0
    aed6:	d055      	beq.n	af84 <tdma_init+0xc4>
    tdma->cbs = (struct uwb_mac_interface){
    aed8:	f104 0530 	add.w	r5, r4, #48	; 0x30
    aedc:	223c      	movs	r2, #60	; 0x3c
    aede:	2100      	movs	r1, #0
    aee0:	4628      	mov	r0, r5
    aee2:	f002 fd8e 	bl	da02 <memset>
    aee6:	2303      	movs	r3, #3
    aee8:	8663      	strh	r3, [r4, #50]	; 0x32
    aeea:	6364      	str	r4, [r4, #52]	; 0x34
    aeec:	4b42      	ldr	r3, [pc, #264]	; (aff8 <tdma_init+0x138>)
    aeee:	6663      	str	r3, [r4, #100]	; 0x64
    uwb_mac_append_interface(dev, &tdma->cbs);
    aef0:	4629      	mov	r1, r5
    aef2:	4630      	mov	r0, r6
    aef4:	f7fd fe30 	bl	8b58 <uwb_mac_append_interface>
    tdma->ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(dev, UWBEXT_CCP);
    aef8:	2101      	movs	r1, #1
    aefa:	4630      	mov	r0, r6
    aefc:	f7fd fe81 	bl	8c02 <uwb_mac_find_cb_inst_ptr>
    af00:	6060      	str	r0, [r4, #4]
    assert(tdma->ccp);
    af02:	2800      	cmp	r0, #0
    af04:	d065      	beq.n	afd2 <tdma_init+0x112>
    int rc = stats_init(
    af06:	f104 0508 	add.w	r5, r4, #8
    af0a:	2104      	movs	r1, #4
    af0c:	9100      	str	r1, [sp, #0]
    af0e:	4b3b      	ldr	r3, [pc, #236]	; (affc <tdma_init+0x13c>)
    af10:	460a      	mov	r2, r1
    af12:	4628      	mov	r0, r5
    af14:	f006 f800 	bl	10f18 <stats_init>
    assert(rc == 0);
    af18:	2800      	cmp	r0, #0
    af1a:	d160      	bne.n	afde <tdma_init+0x11e>
    rc = stats_register("tdma", STATS_HDR(tdma->stat));
    af1c:	4629      	mov	r1, r5
    af1e:	4838      	ldr	r0, [pc, #224]	; (b000 <tdma_init+0x140>)
    af20:	f006 f884 	bl	1102c <stats_register>
    assert(rc == 0);
    af24:	2800      	cmp	r0, #0
    af26:	d160      	bne.n	afea <tdma_init+0x12a>
    tdma->superframe_slot.parent = tdma;
    af28:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
    tdma->superframe_slot.idx = 0;
    af2c:	2500      	movs	r5, #0
    af2e:	4626      	mov	r6, r4
    af30:	f826 5f80 	strh.w	r5, [r6, #128]!
    dpl_cputime_timer_init(&tdma->superframe_slot.timer, slot_timer_cb, (void *) &tdma->superframe_slot);
    af34:	4632      	mov	r2, r6
    af36:	4933      	ldr	r1, [pc, #204]	; (b004 <tdma_init+0x144>)
    af38:	f104 008c 	add.w	r0, r4, #140	; 0x8c
    af3c:	f003 f9da 	bl	e2f4 <dpl_cputime_timer_init>
    memset(ev, 0, sizeof(*ev));
    af40:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
    af44:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
    af48:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
    af4c:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
    ev->ev.ev_cb = (os_event_fn *)fn;
    af50:	4b2d      	ldr	r3, [pc, #180]	; (b008 <tdma_init+0x148>)
    af52:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
    ev->ev.ev_arg = arg;
    af56:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
    tdma->status.initialized = true;
    af5a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    af5e:	f043 0302 	orr.w	r3, r3, #2
    af62:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    tdma->os_epoch = dpl_cputime_get32();
    af66:	f003 f9e4 	bl	e332 <dpl_cputime_get32>
    af6a:	67e0      	str	r0, [r4, #124]	; 0x7c
    tdma_tasks_init(tdma);
    af6c:	4620      	mov	r0, r4
    af6e:	f7ff ff81 	bl	ae74 <tdma_tasks_init>
}
    af72:	4620      	mov	r0, r4
    af74:	b002      	add	sp, #8
    af76:	bd70      	pop	{r4, r5, r6, pc}
    assert(dev);
    af78:	2300      	movs	r3, #0
    af7a:	461a      	mov	r2, r3
    af7c:	4619      	mov	r1, r3
    af7e:	4618      	mov	r0, r3
    af80:	f7fe f864 	bl	904c <__assert_func>
        tdma = (tdma_instance_t *) calloc(1, sizeof(struct _tdma_instance_t) + nslots * sizeof(struct _tdma_slot_t *));
    af84:	f505 71a4 	add.w	r1, r5, #328	; 0x148
    af88:	0089      	lsls	r1, r1, #2
    af8a:	2001      	movs	r0, #1
    af8c:	f002 fbf7 	bl	d77e <calloc>
        assert(tdma);
    af90:	4604      	mov	r4, r0
    af92:	b190      	cbz	r0, afba <tdma_init+0xfa>
        tdma->status.selfmalloc = 1;
    af94:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    af98:	f043 0301 	orr.w	r3, r3, #1
    af9c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
    return (dpl_error_t)os_mutex_init(&mu->mu);
    afa0:	306c      	adds	r0, #108	; 0x6c
    afa2:	f7ff fd5f 	bl	aa64 <os_mutex_init>
        assert(err == DPL_OK);
    afa6:	b970      	cbnz	r0, afc6 <tdma_init+0x106>
        tdma->nslots = nslots;
    afa8:	f8a4 507a 	strh.w	r5, [r4, #122]	; 0x7a
        tdma->dev_inst = dev;
    afac:	6026      	str	r6, [r4, #0]
        tdma->task_prio = dev->task_prio + 0x6;
    afae:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
    afb2:	3306      	adds	r3, #6
    afb4:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
    afb8:	e78e      	b.n	aed8 <tdma_init+0x18>
        assert(tdma);
    afba:	2300      	movs	r3, #0
    afbc:	461a      	mov	r2, r3
    afbe:	4619      	mov	r1, r3
    afc0:	4618      	mov	r0, r3
    afc2:	f7fe f843 	bl	904c <__assert_func>
        assert(err == DPL_OK);
    afc6:	2300      	movs	r3, #0
    afc8:	461a      	mov	r2, r3
    afca:	4619      	mov	r1, r3
    afcc:	4618      	mov	r0, r3
    afce:	f7fe f83d 	bl	904c <__assert_func>
    assert(tdma->ccp);
    afd2:	2300      	movs	r3, #0
    afd4:	461a      	mov	r2, r3
    afd6:	4619      	mov	r1, r3
    afd8:	4618      	mov	r0, r3
    afda:	f7fe f837 	bl	904c <__assert_func>
    assert(rc == 0);
    afde:	2300      	movs	r3, #0
    afe0:	461a      	mov	r2, r3
    afe2:	4619      	mov	r1, r3
    afe4:	4618      	mov	r0, r3
    afe6:	f7fe f831 	bl	904c <__assert_func>
    assert(rc == 0);
    afea:	2300      	movs	r3, #0
    afec:	461a      	mov	r2, r3
    afee:	4619      	mov	r1, r3
    aff0:	4618      	mov	r0, r3
    aff2:	f7fe f82b 	bl	904c <__assert_func>
    aff6:	bf00      	nop
    aff8:	0000ae15 	.word	0x0000ae15
    affc:	00022ef0 	.word	0x00022ef0
    b000:	00022e58 	.word	0x00022e58
    b004:	0000ade1 	.word	0x0000ade1
    b008:	0000acf9 	.word	0x0000acf9

0000b00c <tdma_assign_slot>:
{
    b00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b00e:	4615      	mov	r5, r2
    assert(idx < inst->nslots);
    b010:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
    b014:	42aa      	cmp	r2, r5
    b016:	d92c      	bls.n	b072 <tdma_assign_slot+0x66>
    b018:	4604      	mov	r4, r0
    b01a:	460e      	mov	r6, r1
    b01c:	461f      	mov	r7, r3
    if (inst->status.initialized == false)
    b01e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    b022:	f013 0f02 	tst.w	r3, #2
    b026:	d023      	beq.n	b070 <tdma_assign_slot+0x64>
    if (inst->slot[idx] == NULL){
    b028:	f505 73a4 	add.w	r3, r5, #328	; 0x148
    b02c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    b030:	b328      	cbz	r0, b07e <tdma_assign_slot+0x72>
        memset(inst->slot[idx], 0, sizeof(struct _tdma_slot_t));
    b032:	2238      	movs	r2, #56	; 0x38
    b034:	2100      	movs	r1, #0
    b036:	f002 fce4 	bl	da02 <memset>
    inst->slot[idx]->idx = idx;
    b03a:	f505 72a4 	add.w	r2, r5, #328	; 0x148
    b03e:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
    b042:	801d      	strh	r5, [r3, #0]
    inst->slot[idx]->parent = inst;
    b044:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
    b048:	609c      	str	r4, [r3, #8]
    inst->slot[idx]->arg = arg;
    b04a:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
    b04e:	635f      	str	r7, [r3, #52]	; 0x34
    dpl_event_init(&inst->slot[idx]->event, call_back, (void *) inst->slot[idx]);
    b050:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
    memset(ev, 0, sizeof(*ev));
    b054:	2100      	movs	r1, #0
    b056:	6259      	str	r1, [r3, #36]	; 0x24
    b058:	6299      	str	r1, [r3, #40]	; 0x28
    b05a:	62d9      	str	r1, [r3, #44]	; 0x2c
    b05c:	6319      	str	r1, [r3, #48]	; 0x30
    ev->ev.ev_cb = (os_event_fn *)fn;
    b05e:	629e      	str	r6, [r3, #40]	; 0x28
    ev->ev.ev_arg = arg;
    b060:	62db      	str	r3, [r3, #44]	; 0x2c
    dpl_cputime_timer_init(&inst->slot[idx]->timer, slot_timer_cb, (void *) inst->slot[idx]);
    b062:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    b066:	490e      	ldr	r1, [pc, #56]	; (b0a0 <tdma_assign_slot+0x94>)
    b068:	f102 000c 	add.w	r0, r2, #12
    b06c:	f003 f942 	bl	e2f4 <dpl_cputime_timer_init>
}
    b070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert(idx < inst->nslots);
    b072:	2300      	movs	r3, #0
    b074:	461a      	mov	r2, r3
    b076:	4619      	mov	r1, r3
    b078:	4618      	mov	r0, r3
    b07a:	f7fd ffe7 	bl	904c <__assert_func>
        inst->slot[idx] = (tdma_slot_t  *) calloc(1, sizeof(struct _tdma_slot_t));
    b07e:	2138      	movs	r1, #56	; 0x38
    b080:	2001      	movs	r0, #1
    b082:	f002 fb7c 	bl	d77e <calloc>
    b086:	f505 73a4 	add.w	r3, r5, #328	; 0x148
    b08a:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
        assert(inst->slot[idx]);
    b08e:	2800      	cmp	r0, #0
    b090:	d1d3      	bne.n	b03a <tdma_assign_slot+0x2e>
    b092:	2300      	movs	r3, #0
    b094:	461a      	mov	r2, r3
    b096:	4619      	mov	r1, r3
    b098:	4618      	mov	r0, r3
    b09a:	f7fd ffd7 	bl	904c <__assert_func>
    b09e:	bf00      	nop
    b0a0:	0000ade1 	.word	0x0000ade1

0000b0a4 <tdma_release_slot>:
{
    b0a4:	b538      	push	{r3, r4, r5, lr}
    assert(idx < inst->nslots);
    b0a6:	f8b0 307a 	ldrh.w	r3, [r0, #122]	; 0x7a
    b0aa:	428b      	cmp	r3, r1
    b0ac:	d913      	bls.n	b0d6 <tdma_release_slot+0x32>
    b0ae:	4605      	mov	r5, r0
    b0b0:	460c      	mov	r4, r1
    if (inst->slot[idx]) {
    b0b2:	f501 73a4 	add.w	r3, r1, #328	; 0x148
    b0b6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    b0ba:	b158      	cbz	r0, b0d4 <tdma_release_slot+0x30>
        dpl_cputime_timer_stop(&inst->slot[idx]->timer);
    b0bc:	300c      	adds	r0, #12
    b0be:	f003 f934 	bl	e32a <dpl_cputime_timer_stop>
        free(inst->slot[idx]);
    b0c2:	f504 74a4 	add.w	r4, r4, #328	; 0x148
    b0c6:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    b0ca:	f002 fc53 	bl	d974 <free>
        inst->slot[idx] =  NULL;
    b0ce:	2300      	movs	r3, #0
    b0d0:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
}
    b0d4:	bd38      	pop	{r3, r4, r5, pc}
    assert(idx < inst->nslots);
    b0d6:	2300      	movs	r3, #0
    b0d8:	461a      	mov	r2, r3
    b0da:	4619      	mov	r1, r3
    b0dc:	4618      	mov	r0, r3
    b0de:	f7fd ffb5 	bl	904c <__assert_func>

0000b0e2 <tdma_stop>:
 *
 * @return void
 */
void
tdma_stop(struct _tdma_instance_t * tdma)
{
    b0e2:	b538      	push	{r3, r4, r5, lr}
    b0e4:	4605      	mov	r5, r0
    uint16_t i;
    for (i = 0; i < tdma->nslots; i++) {
    b0e6:	2400      	movs	r4, #0
    b0e8:	e001      	b.n	b0ee <tdma_stop+0xc>
    b0ea:	3401      	adds	r4, #1
    b0ec:	b2a4      	uxth	r4, r4
    b0ee:	f8b5 307a 	ldrh.w	r3, [r5, #122]	; 0x7a
    b0f2:	42a3      	cmp	r3, r4
    b0f4:	d90d      	bls.n	b112 <tdma_stop+0x30>
        if (tdma->slot[i]){
    b0f6:	f504 73a4 	add.w	r3, r4, #328	; 0x148
    b0fa:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
    b0fe:	2800      	cmp	r0, #0
    b100:	d0f3      	beq.n	b0ea <tdma_stop+0x8>
            dpl_cputime_timer_stop(&tdma->slot[i]->timer);
    b102:	300c      	adds	r0, #12
    b104:	f003 f911 	bl	e32a <dpl_cputime_timer_stop>
            tdma_release_slot(tdma, i);
    b108:	4621      	mov	r1, r4
    b10a:	4628      	mov	r0, r5
    b10c:	f7ff ffca 	bl	b0a4 <tdma_release_slot>
    b110:	e7eb      	b.n	b0ea <tdma_stop+0x8>
        }
    }
}
    b112:	bd38      	pop	{r3, r4, r5, pc}

0000b114 <tdma_free>:
{
    b114:	b510      	push	{r4, lr}
    assert(inst);
    b116:	b190      	cbz	r0, b13e <tdma_free+0x2a>
    b118:	4604      	mov	r4, r0
    tdma_stop(inst);
    b11a:	f7ff ffe2 	bl	b0e2 <tdma_stop>
    uwb_mac_remove_interface(inst->dev_inst, inst->cbs.id);
    b11e:	8e61      	ldrh	r1, [r4, #50]	; 0x32
    b120:	6820      	ldr	r0, [r4, #0]
    b122:	f7fd fd3e 	bl	8ba2 <uwb_mac_remove_interface>
    if (inst->status.selfmalloc)
    b126:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    b12a:	f013 0f01 	tst.w	r3, #1
    b12e:	d10c      	bne.n	b14a <tdma_free+0x36>
        inst->status.initialized = 0;
    b130:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    b134:	f36f 0341 	bfc	r3, #1, #1
    b138:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
    b13c:	bd10      	pop	{r4, pc}
    assert(inst);
    b13e:	2300      	movs	r3, #0
    b140:	461a      	mov	r2, r3
    b142:	4619      	mov	r1, r3
    b144:	4618      	mov	r0, r3
    b146:	f7fd ff81 	bl	904c <__assert_func>
        free(inst);
    b14a:	4620      	mov	r0, r4
    b14c:	f002 fc12 	bl	d974 <free>
    b150:	e7f4      	b.n	b13c <tdma_free+0x28>

0000b152 <tdma_rx_slot_start>:
 *
 * @return dx_time   The time for a rx operation to start
 */
uint64_t
tdma_rx_slot_start(struct _tdma_instance_t * tdma, dpl_float32_t idx)
{
    b152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b156:	ee10 8a10 	vmov	r8, s0
    uint64_t dx_time, slot_offset;
    dpl_float64_t slot_period;
    struct uwb_ccp_instance * ccp = tdma->ccp;
    b15a:	6845      	ldr	r5, [r0, #4]
    uint64_t rx_stable = tdma->dev_inst->config.rx.timeToRxStable;
    b15c:	6803      	ldr	r3, [r0, #0]
    b15e:	f893 451b 	ldrb.w	r4, [r3, #1307]	; 0x51b
#if __KERNEL__
    slot_period = DPL_FLOAT64_U64_TO_F64(div64_s64(((uint64_t)ccp->period << 16), tdma->nslots));
#else
    slot_period = DPL_FLOAT64_U64_TO_F64((((uint64_t)ccp->period << 16) / tdma->nslots));
    b162:	f8d5 10e8 	ldr.w	r1, [r5, #232]	; 0xe8
    b166:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
    b16a:	2300      	movs	r3, #0
    b16c:	0408      	lsls	r0, r1, #16
    b16e:	0c09      	lsrs	r1, r1, #16
    b170:	f016 fc4c 	bl	21a0c <__aeabi_uldivmod>
    b174:	f016 f87c 	bl	21270 <__aeabi_ul2d>
    b178:	4606      	mov	r6, r0
    b17a:	460f      	mov	r7, r1
#endif
    slot_offset = DPL_FLOAT64_INT(DPL_FLOAT64_MUL(DPL_FLOAT64_FROM_F32(idx), slot_period));
    b17c:	4640      	mov	r0, r8
    b17e:	f016 f855 	bl	2122c <__aeabi_f2d>
    b182:	4632      	mov	r2, r6
    b184:	463b      	mov	r3, r7
    b186:	f016 f8a9 	bl	212dc <__aeabi_dmul>
    b18a:	f016 fc57 	bl	21a3c <__aeabi_d2lz>
    /* Compensate for the time it takes to turn on the receiver */
    slot_offset -= (rx_stable << 16);
    b18e:	0422      	lsls	r2, r4, #16
    b190:	1a82      	subs	r2, r0, r2

#if MYNEWT_VAL(UWB_WCS_ENABLED)
    {
        struct uwb_wcs_instance * wcs = ccp->wcs;
        dx_time = ccp->local_epoch + (uint64_t) uwb_wcs_dtu_time_adjust(wcs, slot_offset);
    b192:	f8d5 40d8 	ldr.w	r4, [r5, #216]	; 0xd8
    b196:	f8d5 60dc 	ldr.w	r6, [r5, #220]	; 0xdc
    b19a:	f161 0300 	sbc.w	r3, r1, #0
    b19e:	6ea8      	ldr	r0, [r5, #104]	; 0x68
    b1a0:	f002 fa0c 	bl	d5bc <uwb_wcs_dtu_time_adjust>
    b1a4:	1820      	adds	r0, r4, r0
    }
#else
    dx_time = ccp->local_epoch + slot_offset;
#endif
    return dx_time;
}
    b1a6:	eb46 0101 	adc.w	r1, r6, r1
    b1aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0000b1b0 <tdma_pkg_init>:
 *
 * @return void
 */
void
tdma_pkg_init(void)
{
    b1b0:	b510      	push	{r4, lr}
    int i;
    struct uwb_dev *udev;
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    printf("{\"utime\": %"PRIu32",\"msg\": \"tdma_pkg_init\"}\n",
    b1b2:	f003 f8be 	bl	e332 <dpl_cputime_get32>
    b1b6:	4601      	mov	r1, r0
    b1b8:	4808      	ldr	r0, [pc, #32]	; (b1dc <tdma_pkg_init+0x2c>)
    b1ba:	f003 f835 	bl	e228 <printf>
           dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
#endif

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
    b1be:	2400      	movs	r4, #0
    b1c0:	e000      	b.n	b1c4 <tdma_pkg_init+0x14>
    b1c2:	3401      	adds	r4, #1
    b1c4:	2c02      	cmp	r4, #2
    b1c6:	dc08      	bgt.n	b1da <tdma_pkg_init+0x2a>
        udev = uwb_dev_idx_lookup(i);
    b1c8:	4620      	mov	r0, r4
    b1ca:	f7fd fc95 	bl	8af8 <uwb_dev_idx_lookup>
        if (!udev) {
    b1ce:	2800      	cmp	r0, #0
    b1d0:	d0f7      	beq.n	b1c2 <tdma_pkg_init+0x12>
            continue;
        }
        tdma_init(udev, MYNEWT_VAL(TDMA_NSLOTS));
    b1d2:	21a0      	movs	r1, #160	; 0xa0
    b1d4:	f7ff fe74 	bl	aec0 <tdma_init>
    b1d8:	e7f3      	b.n	b1c2 <tdma_pkg_init+0x12>
    }
}
    b1da:	bd10      	pop	{r4, pc}
    b1dc:	00022e60 	.word	0x00022e60

0000b1e0 <tdma_pkg_down>:
 *
 * @return void
 */
int
tdma_pkg_down(int reason)
{
    b1e0:	b510      	push	{r4, lr}
    int i;
    struct uwb_dev *udev;
    struct _tdma_instance_t * tdma;
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    printf("{\"utime\": %"PRIu32",\"msg\": \"tdma_pkg_down\"}\n",
    b1e2:	f003 f8a6 	bl	e332 <dpl_cputime_get32>
    b1e6:	4601      	mov	r1, r0
    b1e8:	480b      	ldr	r0, [pc, #44]	; (b218 <tdma_pkg_down+0x38>)
    b1ea:	f003 f81d 	bl	e228 <printf>
           dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
#endif

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
    b1ee:	2400      	movs	r4, #0
    b1f0:	e000      	b.n	b1f4 <tdma_pkg_down+0x14>
    b1f2:	3401      	adds	r4, #1
    b1f4:	2c02      	cmp	r4, #2
    b1f6:	dc0c      	bgt.n	b212 <tdma_pkg_down+0x32>
        udev = uwb_dev_idx_lookup(i);
    b1f8:	4620      	mov	r0, r4
    b1fa:	f7fd fc7d 	bl	8af8 <uwb_dev_idx_lookup>
        if (!udev) {
    b1fe:	2800      	cmp	r0, #0
    b200:	d0f7      	beq.n	b1f2 <tdma_pkg_down+0x12>
            continue;
        }
        tdma = (struct _tdma_instance_t*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_TDMA);
    b202:	2103      	movs	r1, #3
    b204:	f7fd fcfd 	bl	8c02 <uwb_mac_find_cb_inst_ptr>
        if (!tdma) {
    b208:	2800      	cmp	r0, #0
    b20a:	d0f2      	beq.n	b1f2 <tdma_pkg_down+0x12>
            continue;
        }
        tdma_free(tdma);
    b20c:	f7ff ff82 	bl	b114 <tdma_free>
    b210:	e7ef      	b.n	b1f2 <tdma_pkg_down+0x12>
    }
    return 0;
}
    b212:	2000      	movs	r0, #0
    b214:	bd10      	pop	{r4, pc}
    b216:	bf00      	nop
    b218:	00022e88 	.word	0x00022e88
    b21c:	00000000 	.word	0x00000000

0000b220 <adjust_for_epoch_to_rm>:
}
#endif

static void
adjust_for_epoch_to_rm(struct uwb_ccp_instance * ccp, uint16_t epoch_to_rm_us)
{
    b220:	b5d0      	push	{r4, r6, r7, lr}
    b222:	4604      	mov	r4, r0
    b224:	4608      	mov	r0, r1
    ccp->master_epoch.timestamp -= ((uint64_t)epoch_to_rm_us << 16);
    b226:	040a      	lsls	r2, r1, #16
    b228:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    b22c:	f8d4 10d4 	ldr.w	r1, [r4, #212]	; 0xd4
    b230:	1a9b      	subs	r3, r3, r2
    b232:	f161 0100 	sbc.w	r1, r1, #0
    b236:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
    b23a:	f8c4 10d4 	str.w	r1, [r4, #212]	; 0xd4
    ccp->local_epoch -= ((uint64_t)epoch_to_rm_us << 16);
    b23e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    b242:	f8d4 10dc 	ldr.w	r1, [r4, #220]	; 0xdc
    b246:	1a9b      	subs	r3, r3, r2
    b248:	f161 0100 	sbc.w	r1, r1, #0
    b24c:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
    b250:	f8c4 10dc 	str.w	r1, [r4, #220]	; 0xdc
    ccp->os_epoch -= dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(epoch_to_rm_us));
    b254:	f015 ffd8 	bl	21208 <__aeabi_i2d>
    b258:	a309      	add	r3, pc, #36	; (adr r3, b280 <adjust_for_epoch_to_rm+0x60>)
    b25a:	e9d3 2300 	ldrd	r2, r3, [r3]
    b25e:	f016 f83d 	bl	212dc <__aeabi_dmul>
    b262:	4606      	mov	r6, r0
    b264:	460f      	mov	r7, r1
    b266:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
    b26a:	f015 ffbd 	bl	211e8 <__aeabi_ui2d>
    b26e:	4632      	mov	r2, r6
    b270:	463b      	mov	r3, r7
    b272:	f015 fe7b 	bl	20f6c <__aeabi_dsub>
    b276:	f016 fb09 	bl	2188c <__aeabi_d2uiz>
    b27a:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
}
    b27e:	bdd0      	pop	{r4, r6, r7, pc}
    b280:	90690691 	.word	0x90690691
    b284:	3ff06906 	.word	0x3ff06906

0000b288 <reset_cb>:
 *
 * @return void
 */
static bool
reset_cb(struct uwb_dev *inst, struct uwb_mac_interface * cbs)
{
    b288:	b510      	push	{r4, lr}
    struct uwb_ccp_instance * ccp = (struct uwb_ccp_instance *)cbs->inst_ptr;
    b28a:	684c      	ldr	r4, [r1, #4]
    b28c:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
    if(dpl_sem_get_count(&ccp->sem) == 0){
    b290:	b10b      	cbz	r3, b296 <reset_cb+0xe>
        dpl_error_t err = dpl_sem_release(&ccp->sem);
        assert(err == DPL_OK);
        CCP_STATS_INC(reset);
        return true;
    }
    return false;   // CCP is an observer and should not return true
    b292:	2000      	movs	r0, #0
}
    b294:	bd10      	pop	{r4, pc}
    return (dpl_error_t)os_sem_release(&sem->sem);
    b296:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    b29a:	f7fe fdf7 	bl	9e8c <os_sem_release>
        assert(err == DPL_OK);
    b29e:	b920      	cbnz	r0, b2aa <reset_cb+0x22>
        CCP_STATS_INC(reset);
    b2a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
    b2a2:	3301      	adds	r3, #1
    b2a4:	6663      	str	r3, [r4, #100]	; 0x64
        return true;
    b2a6:	2001      	movs	r0, #1
    b2a8:	e7f4      	b.n	b294 <reset_cb+0xc>
        assert(err == DPL_OK);
    b2aa:	2300      	movs	r3, #0
    b2ac:	461a      	mov	r2, r3
    b2ae:	4619      	mov	r1, r3
    b2b0:	4618      	mov	r0, r3
    b2b2:	f7fd fecb 	bl	904c <__assert_func>

0000b2b6 <error_cb>:
    struct uwb_ccp_instance * ccp = (struct uwb_ccp_instance *)cbs->inst_ptr;
    b2b6:	6848      	ldr	r0, [r1, #4]
    b2b8:	f8b0 20b6 	ldrh.w	r2, [r0, #182]	; 0xb6
    if(dpl_sem_get_count(&ccp->sem) == 1)
    b2bc:	2a01      	cmp	r2, #1
    b2be:	d020      	beq.n	b302 <error_cb+0x4c>
{
    b2c0:	b508      	push	{r3, lr}
    CCP_STATS_INC(txrx_error);
    b2c2:	6c03      	ldr	r3, [r0, #64]	; 0x40
    b2c4:	3301      	adds	r3, #1
    b2c6:	6403      	str	r3, [r0, #64]	; 0x40
    if(dpl_sem_get_count(&ccp->sem) == 0) {
    b2c8:	b9ea      	cbnz	r2, b306 <error_cb+0x50>
        if (ccp->config.role != CCP_ROLE_MASTER) {
    b2ca:	f890 30ca 	ldrb.w	r3, [r0, #202]	; 0xca
    b2ce:	f013 0f1e 	tst.w	r3, #30
    b2d2:	d00a      	beq.n	b2ea <error_cb+0x34>
            ccp->status.rx_error = 1;
    b2d4:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
    b2d8:	f043 0301 	orr.w	r3, r3, #1
    b2dc:	f880 30c9 	strb.w	r3, [r0, #201]	; 0xc9
            ccp->missed_frames++;
    b2e0:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
    b2e4:	3301      	adds	r3, #1
    b2e6:	f880 30f1 	strb.w	r3, [r0, #241]	; 0xf1
    b2ea:	30b0      	adds	r0, #176	; 0xb0
    b2ec:	f7fe fdce 	bl	9e8c <os_sem_release>
        assert(err == DPL_OK);
    b2f0:	b908      	cbnz	r0, b2f6 <error_cb+0x40>
    return true;
    b2f2:	2001      	movs	r0, #1
    b2f4:	e008      	b.n	b308 <error_cb+0x52>
        assert(err == DPL_OK);
    b2f6:	2300      	movs	r3, #0
    b2f8:	461a      	mov	r2, r3
    b2fa:	4619      	mov	r1, r3
    b2fc:	4618      	mov	r0, r3
    b2fe:	f7fd fea5 	bl	904c <__assert_func>
        return false;
    b302:	2000      	movs	r0, #0
}
    b304:	4770      	bx	lr
    return true;
    b306:	2001      	movs	r0, #1
}
    b308:	bd08      	pop	{r3, pc}

0000b30a <rx_timeout_cb>:
{
    b30a:	b508      	push	{r3, lr}
    struct uwb_ccp_instance * ccp = (struct uwb_ccp_instance *)cbs->inst_ptr;
    b30c:	6848      	ldr	r0, [r1, #4]
    b30e:	f8b0 30b6 	ldrh.w	r3, [r0, #182]	; 0xb6
    if(dpl_sem_get_count(&ccp->sem) == 1)
    b312:	2b01      	cmp	r3, #1
    b314:	d01c      	beq.n	b350 <rx_timeout_cb+0x46>
    if (dpl_sem_get_count(&ccp->sem) == 0){
    b316:	b10b      	cbz	r3, b31c <rx_timeout_cb+0x12>
    return true;
    b318:	2001      	movs	r0, #1
}
    b31a:	bd08      	pop	{r3, pc}
        ccp->status.rx_timeout_error = 1;
    b31c:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
    b320:	f043 0302 	orr.w	r3, r3, #2
    b324:	f880 30c9 	strb.w	r3, [r0, #201]	; 0xc9
        ccp->missed_frames++;
    b328:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
    b32c:	3301      	adds	r3, #1
    b32e:	f880 30f1 	strb.w	r3, [r0, #241]	; 0xf1
        CCP_STATS_INC(rx_timeout);
    b332:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    b334:	3301      	adds	r3, #1
    b336:	65c3      	str	r3, [r0, #92]	; 0x5c
    b338:	30b0      	adds	r0, #176	; 0xb0
    b33a:	f7fe fda7 	bl	9e8c <os_sem_release>
        assert(err == DPL_OK);
    b33e:	b908      	cbnz	r0, b344 <rx_timeout_cb+0x3a>
    return true;
    b340:	2001      	movs	r0, #1
    b342:	e7ea      	b.n	b31a <rx_timeout_cb+0x10>
        assert(err == DPL_OK);
    b344:	2300      	movs	r3, #0
    b346:	461a      	mov	r2, r3
    b348:	4619      	mov	r1, r3
    b34a:	4618      	mov	r0, r3
    b34c:	f7fd fe7e 	bl	904c <__assert_func>
        return false;
    b350:	2000      	movs	r0, #0
    b352:	e7e2      	b.n	b31a <rx_timeout_cb+0x10>

0000b354 <ccp_timer_irq>:
ccp_timer_irq(void * arg){
    b354:	b508      	push	{r3, lr}
    assert(arg);
    b356:	b130      	cbz	r0, b366 <ccp_timer_irq+0x12>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    b358:	f500 718e 	add.w	r1, r0, #284	; 0x11c
    b35c:	f500 7086 	add.w	r0, r0, #268	; 0x10c
    b360:	f7fe f9a8 	bl	96b4 <os_eventq_put>
}
    b364:	bd08      	pop	{r3, pc}
    assert(arg);
    b366:	2300      	movs	r3, #0
    b368:	461a      	mov	r2, r3
    b36a:	4619      	mov	r1, r3
    b36c:	4618      	mov	r0, r3
    b36e:	f7fd fe6d 	bl	904c <__assert_func>
    b372:	0000      	movs	r0, r0
    b374:	0000      	movs	r0, r0
	...

0000b378 <tx_complete_cb>:
{
    b378:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    struct uwb_ccp_instance * ccp = (struct uwb_ccp_instance *)cbs->inst_ptr;
    b37c:	684c      	ldr	r4, [r1, #4]
    b37e:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
    if(dpl_sem_get_count(&ccp->sem) == 1)
    b382:	2b01      	cmp	r3, #1
    b384:	f000 8083 	beq.w	b48e <tx_complete_cb+0x116>
    b388:	4606      	mov	r6, r0
    CCP_STATS_INC(tx_complete);
    b38a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    b38c:	3301      	adds	r3, #1
    b38e:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ccp->config.role != CCP_ROLE_MASTER)
    b390:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
    b394:	f013 0f1e 	tst.w	r3, #30
    b398:	d179      	bne.n	b48e <tx_complete_cb+0x116>
    uwb_ccp_frame_t * frame = ccp->frames[(++ccp->idx)%ccp->nframes];
    b39a:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
    b39e:	3301      	adds	r3, #1
    b3a0:	b29b      	uxth	r3, r3
    b3a2:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
    b3a6:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
    b3aa:	fbb3 f1f2 	udiv	r1, r3, r2
    b3ae:	fb02 3311 	mls	r3, r2, r1, r3
    b3b2:	b29b      	uxth	r3, r3
    b3b4:	33e0      	adds	r3, #224	; 0xe0
    b3b6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
    return (dev->uw_funcs->uf_read_systime_lo32(dev));
    b3ba:	6a43      	ldr	r3, [r0, #36]	; 0x24
    b3bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    b3be:	4798      	blx	r3
    uint32_t delta_0 = 0xffffffffU&(uwb_read_systime_lo32(inst) - frame->transmission_timestamp.lo);
    b3c0:	696b      	ldr	r3, [r5, #20]
    b3c2:	eba0 0803 	sub.w	r8, r0, r3
    ccp->os_epoch = dpl_cputime_get32();
    b3c6:	f002 ffb4 	bl	e332 <dpl_cputime_get32>
    b3ca:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    b3ce:	6a73      	ldr	r3, [r6, #36]	; 0x24
    b3d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    b3d2:	4630      	mov	r0, r6
    b3d4:	4798      	blx	r3
    uint32_t delta_1 = 0xffffffffU&(uwb_read_systime_lo32(inst) - frame->transmission_timestamp.lo);
    b3d6:	696b      	ldr	r3, [r5, #20]
    b3d8:	1ac0      	subs	r0, r0, r3
    uint32_t delta = (delta_0>>1) + (delta_1>>1);
    b3da:	0840      	lsrs	r0, r0, #1
    b3dc:	eb00 0058 	add.w	r0, r0, r8, lsr #1
    ccp->os_epoch -= dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(delta>>16));
    b3e0:	0c00      	lsrs	r0, r0, #16
    b3e2:	f015 ff01 	bl	211e8 <__aeabi_ui2d>
    b3e6:	a34e      	add	r3, pc, #312	; (adr r3, b520 <tx_complete_cb+0x1a8>)
    b3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
    b3ec:	f015 ff76 	bl	212dc <__aeabi_dmul>
    b3f0:	4680      	mov	r8, r0
    b3f2:	4689      	mov	r9, r1
    b3f4:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
    b3f8:	f015 fef6 	bl	211e8 <__aeabi_ui2d>
    b3fc:	4642      	mov	r2, r8
    b3fe:	464b      	mov	r3, r9
    b400:	f015 fdb4 	bl	20f6c <__aeabi_dsub>
    b404:	f016 fa42 	bl	2188c <__aeabi_d2uiz>
    b408:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    CCP_STATS_SET(irq_latency, uwb_dwt_usecs_to_usecs(delta>>16));
    b40c:	2300      	movs	r3, #0
    b40e:	6523      	str	r3, [r4, #80]	; 0x50
    b410:	2200      	movs	r2, #0
    b412:	2300      	movs	r3, #0
    b414:	4640      	mov	r0, r8
    b416:	4649      	mov	r1, r9
    b418:	f015 fdaa 	bl	20f70 <__adddf3>
    b41c:	f016 fa36 	bl	2188c <__aeabi_d2uiz>
    b420:	6520      	str	r0, [r4, #80]	; 0x50
    ccp->local_epoch = frame->transmission_timestamp.lo;
    b422:	696a      	ldr	r2, [r5, #20]
    b424:	7e2b      	ldrb	r3, [r5, #24]
    b426:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
    b42a:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    ccp->master_epoch = frame->transmission_timestamp;
    b42e:	696a      	ldr	r2, [r5, #20]
    b430:	69ab      	ldr	r3, [r5, #24]
    b432:	f8c4 20d0 	str.w	r2, [r4, #208]	; 0xd0
    b436:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
    ccp->period = (frame->transmission_interval >> 16);
    b43a:	68eb      	ldr	r3, [r5, #12]
    b43c:	7c2a      	ldrb	r2, [r5, #16]
    b43e:	0c1b      	lsrs	r3, r3, #16
    b440:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    b444:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    adjust_for_epoch_to_rm(ccp, frame->epoch_to_rm_us);
    b448:	8be9      	ldrh	r1, [r5, #30]
    b44a:	4620      	mov	r0, r4
    b44c:	f7ff fee8 	bl	b220 <adjust_for_epoch_to_rm>
    if (ccp->status.timer_enabled){
    b450:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    b454:	f013 0f04 	tst.w	r3, #4
    b458:	d11c      	bne.n	b494 <tx_complete_cb+0x11c>
    ccp->status.valid |= ccp->idx > 1;
    b45a:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    b45e:	f3c3 0280 	ubfx	r2, r3, #2, #1
    b462:	f8b4 10ee 	ldrh.w	r1, [r4, #238]	; 0xee
    b466:	2901      	cmp	r1, #1
    b468:	bf88      	it	hi
    b46a:	f042 0201 	orrhi.w	r2, r2, #1
    b46e:	f362 0382 	bfi	r3, r2, #2, #1
    b472:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
    if(!(SLIST_EMPTY(&inst->interface_cbs))) {
    b476:	f8d6 5530 	ldr.w	r5, [r6, #1328]	; 0x530
    b47a:	bb95      	cbnz	r5, b4e2 <tx_complete_cb+0x16a>
    if (ccp->config.postprocess && ccp->status.valid)
    b47c:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
    b480:	4b29      	ldr	r3, [pc, #164]	; (b528 <tx_complete_cb+0x1b0>)
    b482:	4393      	bics	r3, r2
    b484:	d036      	beq.n	b4f4 <tx_complete_cb+0x17c>
    b486:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
    if(dpl_sem_get_count(&ccp->sem) == 0){
    b48a:	2b00      	cmp	r3, #0
    b48c:	d039      	beq.n	b502 <tx_complete_cb+0x18a>
}
    b48e:	2000      	movs	r0, #0
    b490:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
        rc = dpl_cputime_timer_start(&ccp->timer, ccp->os_epoch
    b494:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
            - dpl_cputime_usecs_to_ticks(MYNEWT_VAL(OS_LATENCY))
    b498:	f5a5 7548 	sub.w	r5, r5, #800	; 0x320
            + dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(ccp->period))
    b49c:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
    b4a0:	f015 fea2 	bl	211e8 <__aeabi_ui2d>
    b4a4:	a31e      	add	r3, pc, #120	; (adr r3, b520 <tx_complete_cb+0x1a8>)
    b4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
    b4aa:	f015 ff17 	bl	212dc <__aeabi_dmul>
    b4ae:	4680      	mov	r8, r0
    b4b0:	4689      	mov	r9, r1
    b4b2:	4628      	mov	r0, r5
    b4b4:	f015 fe98 	bl	211e8 <__aeabi_ui2d>
    b4b8:	4642      	mov	r2, r8
    b4ba:	464b      	mov	r3, r9
    b4bc:	f015 fd58 	bl	20f70 <__adddf3>
        rc = dpl_cputime_timer_start(&ccp->timer, ccp->os_epoch
    b4c0:	f016 f9e4 	bl	2188c <__aeabi_d2uiz>
    b4c4:	4601      	mov	r1, r0
    b4c6:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
    b4ca:	f002 ff2a 	bl	e322 <dpl_cputime_timer_start>
        if (rc == 0) ccp->status.timer_restarted = 1;
    b4ce:	2800      	cmp	r0, #0
    b4d0:	d1c3      	bne.n	b45a <tx_complete_cb+0xe2>
    b4d2:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    b4d6:	f043 0308 	orr.w	r3, r3, #8
    b4da:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
    b4de:	e7bc      	b.n	b45a <tx_complete_cb+0xe2>
        SLIST_FOREACH(lcbs, &inst->interface_cbs, next) {
    b4e0:	6bad      	ldr	r5, [r5, #56]	; 0x38
    b4e2:	2d00      	cmp	r5, #0
    b4e4:	d0ca      	beq.n	b47c <tx_complete_cb+0x104>
            if (lcbs != NULL && lcbs->superframe_cb) {
    b4e6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    b4e8:	2b00      	cmp	r3, #0
    b4ea:	d0f9      	beq.n	b4e0 <tx_complete_cb+0x168>
                if(lcbs->superframe_cb((struct uwb_dev*)inst, lcbs)) continue;
    b4ec:	4629      	mov	r1, r5
    b4ee:	4630      	mov	r0, r6
    b4f0:	4798      	blx	r3
    b4f2:	e7f5      	b.n	b4e0 <tx_complete_cb+0x168>
    return (struct dpl_eventq *) os_eventq_dflt_get();
    b4f4:	f7fe f98c 	bl	9810 <os_eventq_dflt_get>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    b4f8:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
    b4fc:	f7fe f8da 	bl	96b4 <os_eventq_put>
}
    b500:	e7c1      	b.n	b486 <tx_complete_cb+0x10e>
    return (dpl_error_t)os_sem_release(&sem->sem);
    b502:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    b506:	f7fe fcc1 	bl	9e8c <os_sem_release>
        assert(err == DPL_OK);
    b50a:	2800      	cmp	r0, #0
    b50c:	d0bf      	beq.n	b48e <tx_complete_cb+0x116>
    b50e:	2300      	movs	r3, #0
    b510:	461a      	mov	r2, r3
    b512:	4619      	mov	r1, r3
    b514:	4618      	mov	r0, r3
    b516:	f7fd fd99 	bl	904c <__assert_func>
    b51a:	bf00      	nop
    b51c:	f3af 8000 	nop.w
    b520:	90690691 	.word	0x90690691
    b524:	3ff06906 	.word	0x3ff06906
    b528:	00010004 	.word	0x00010004

0000b52c <ccp_task>:
{
    b52c:	b510      	push	{r4, lr}
    b52e:	4604      	mov	r4, r0
    os_eventq_run((struct os_eventq * )evq);
    b530:	f504 7086 	add.w	r0, r4, #268	; 0x10c
    b534:	f7fe f93e 	bl	97b4 <os_eventq_run>
    b538:	e7fa      	b.n	b530 <ccp_task+0x4>
	...

0000b53c <ccp_tasks_init>:
{
    b53c:	b530      	push	{r4, r5, lr}
    b53e:	b085      	sub	sp, #20
    b540:	4604      	mov	r4, r0
    if (!dpl_eventq_inited(&inst->eventq))
    b542:	f500 7586 	add.w	r5, r0, #268	; 0x10c
    return os_eventq_inited((struct os_eventq *) evq);
    b546:	4628      	mov	r0, r5
    b548:	f7fe f8af 	bl	96aa <os_eventq_inited>
    b54c:	b108      	cbz	r0, b552 <ccp_tasks_init+0x16>
}
    b54e:	b005      	add	sp, #20
    b550:	bd30      	pop	{r4, r5, pc}
    os_eventq_init((struct os_eventq *) evq);
    b552:	4628      	mov	r0, r5
    b554:	f7fe f8a0 	bl	9698 <os_eventq_init>
        dpl_task_init(&inst->task_str, "ccp",
    b558:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
                      inst->task_stack,
    b55c:	f504 72c0 	add.w	r2, r4, #384	; 0x180
    return os_task_init((struct os_task *) t, name, (os_task_func_t) func,
    b560:	2180      	movs	r1, #128	; 0x80
    b562:	9103      	str	r1, [sp, #12]
    b564:	9202      	str	r2, [sp, #8]
    b566:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b56a:	9201      	str	r2, [sp, #4]
    b56c:	9300      	str	r3, [sp, #0]
    b56e:	4623      	mov	r3, r4
    b570:	4a03      	ldr	r2, [pc, #12]	; (b580 <ccp_tasks_init+0x44>)
    b572:	4904      	ldr	r1, [pc, #16]	; (b584 <ccp_tasks_init+0x48>)
    b574:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    b578:	f7fe fd20 	bl	9fbc <os_task_init>
}
    b57c:	e7e7      	b.n	b54e <ccp_tasks_init+0x12>
    b57e:	bf00      	nop
    b580:	0000b52d 	.word	0x0000b52d
    b584:	00022f08 	.word	0x00022f08

0000b588 <ccp_timer_init>:
{
    b588:	b570      	push	{r4, r5, r6, lr}
    b58a:	4604      	mov	r4, r0
    b58c:	460d      	mov	r5, r1
    ccp->status.timer_enabled = true;
    b58e:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
    b592:	f043 0304 	orr.w	r3, r3, #4
    b596:	f880 30c9 	strb.w	r3, [r0, #201]	; 0xc9
    dpl_cputime_timer_init(&ccp->timer, ccp_timer_irq, (void *) ccp);
    b59a:	f100 06f4 	add.w	r6, r0, #244	; 0xf4
    b59e:	4602      	mov	r2, r0
    b5a0:	4915      	ldr	r1, [pc, #84]	; (b5f8 <ccp_timer_init+0x70>)
    b5a2:	4630      	mov	r0, r6
    b5a4:	f002 fea6 	bl	e2f4 <dpl_cputime_timer_init>
    return ev->ev.ev_arg;
    b5a8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    if (dpl_event_get_arg(&ccp->timer_event) != (void *) ccp) {
    b5ac:	429c      	cmp	r4, r3
    b5ae:	d00e      	beq.n	b5ce <ccp_timer_init+0x46>
        if (role == CCP_ROLE_MASTER){
    b5b0:	b995      	cbnz	r5, b5d8 <ccp_timer_init+0x50>
    memset(ev, 0, sizeof(*ev));
    b5b2:	2300      	movs	r3, #0
    b5b4:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    b5b8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    b5bc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    b5c0:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    ev->ev.ev_cb = (os_event_fn *)fn;
    b5c4:	4b0d      	ldr	r3, [pc, #52]	; (b5fc <ccp_timer_init+0x74>)
    b5c6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    ev->ev.ev_arg = arg;
    b5ca:	f8c4 4124 	str.w	r4, [r4, #292]	; 0x124
    dpl_cputime_timer_relative(&ccp->timer, 0);
    b5ce:	2100      	movs	r1, #0
    b5d0:	4630      	mov	r0, r6
    b5d2:	f002 fec2 	bl	e35a <dpl_cputime_timer_relative>
}
    b5d6:	bd70      	pop	{r4, r5, r6, pc}
    memset(ev, 0, sizeof(*ev));
    b5d8:	2300      	movs	r3, #0
    b5da:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    b5de:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    b5e2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    b5e6:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    ev->ev.ev_cb = (os_event_fn *)fn;
    b5ea:	4b05      	ldr	r3, [pc, #20]	; (b600 <ccp_timer_init+0x78>)
    b5ec:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    ev->ev.ev_arg = arg;
    b5f0:	f8c4 4124 	str.w	r4, [r4, #292]	; 0x124
}
    b5f4:	e7eb      	b.n	b5ce <ccp_timer_init+0x46>
    b5f6:	bf00      	nop
    b5f8:	0000b355 	.word	0x0000b355
    b5fc:	0000bb79 	.word	0x0000bb79
    b600:	0000b741 	.word	0x0000b741
    b604:	00000000 	.word	0x00000000

0000b608 <ccp_listen>:
 *
 * returns struct uwb_ccp_status_t
 */
static struct uwb_ccp_status
ccp_listen(struct uwb_ccp_instance *ccp, uint64_t dx_time, uwb_dev_modes_t mode)
{
    b608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b60c:	4604      	mov	r4, r0
    b60e:	4616      	mov	r6, r2
    b610:	4698      	mov	r8, r3
    b612:	f89d 9020 	ldrb.w	r9, [sp, #32]
    struct uwb_dev * inst = ccp->dev_inst;
    b616:	4607      	mov	r7, r0
    b618:	f857 5bb0 	ldr.w	r5, [r7], #176
    return (dev->uw_funcs->uf_phy_forcetrxoff(dev));
    b61c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b61e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    b622:	4628      	mov	r0, r5
    b624:	4798      	blx	r3
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    b626:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b62a:	4638      	mov	r0, r7
    b62c:	f7fe fc60 	bl	9ef0 <os_sem_pend>
    DIAGMSG("{\"utime\": %"PRIu32",\"msg\": \"uwb_ccp_listen\"}\n",
            dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
    uwb_phy_forcetrxoff(inst);
    dpl_error_t err = dpl_sem_pend(&ccp->sem,  DPL_TIMEOUT_NEVER);
    assert(err == DPL_OK);
    b630:	2800      	cmp	r0, #0
    b632:	d14f      	bne.n	b6d4 <ccp_listen+0xcc>

    CCP_STATS_INC(listen);
    b634:	6a63      	ldr	r3, [r4, #36]	; 0x24
    b636:	3301      	adds	r3, #1
    b638:	6263      	str	r3, [r4, #36]	; 0x24

    if (dx_time) {
    b63a:	ea56 0308 	orrs.w	r3, r6, r8
    b63e:	d005      	beq.n	b64c <ccp_listen+0x44>
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
    b640:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b642:	6b59      	ldr	r1, [r3, #52]	; 0x34
    b644:	4632      	mov	r2, r6
    b646:	4643      	mov	r3, r8
    b648:	4628      	mov	r0, r5
    b64a:	4788      	blx	r1
        uwb_set_delay_start(inst, dx_time);
    }

    ccp->status.rx_timeout_error = 0;
    b64c:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    b650:	f36f 0341 	bfc	r3, #1, #1
    b654:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
    return (dev->uw_funcs->uf_start_rx(dev));
    b658:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b65a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    b65c:	4628      	mov	r0, r5
    b65e:	4798      	blx	r3
    ccp->status.start_rx_error = uwb_start_rx(inst).start_rx_error;
    b660:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    b664:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    b668:	f360 13c7 	bfi	r3, r0, #7, #1
    b66c:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
    if (ccp->status.start_rx_error) {
    b670:	b25b      	sxtb	r3, r3
    b672:	2b00      	cmp	r3, #0
    b674:	db34      	blt.n	b6e0 <ccp_listen+0xd8>
#endif
        /*  */
        CCP_STATS_INC(rx_start_error);
        err = dpl_sem_release(&ccp->sem);
        assert(err == DPL_OK);
    }else if(mode == UWB_BLOCKING){
    b676:	f1b9 0f00 	cmp.w	r9, #0
    b67a:	d14e      	bne.n	b71a <ccp_listen+0x112>
#if MYNEWT_VAL(UWB_CCP_STATS)
        if (dx_time) {
    b67c:	ea56 0308 	orrs.w	r3, r6, r8
    b680:	d015      	beq.n	b6ae <ccp_listen+0xa6>
    return (dev->uw_funcs->uf_read_systime_lo32(dev));
    b682:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b684:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    b686:	4628      	mov	r0, r5
    b688:	4798      	blx	r3
            uint32_t margin = 0xffffffffU&(dx_time - uwb_read_systime_lo32(inst));
    b68a:	1a30      	subs	r0, r6, r0
            CCP_STATS_SET(os_lat_margin, uwb_dwt_usecs_to_usecs(margin>>16));
    b68c:	2300      	movs	r3, #0
    b68e:	65a3      	str	r3, [r4, #88]	; 0x58
    b690:	0c00      	lsrs	r0, r0, #16
    b692:	f015 fda9 	bl	211e8 <__aeabi_ui2d>
    b696:	a328      	add	r3, pc, #160	; (adr r3, b738 <ccp_listen+0x130>)
    b698:	e9d3 2300 	ldrd	r2, r3, [r3]
    b69c:	f015 fe1e 	bl	212dc <__aeabi_dmul>
    b6a0:	2200      	movs	r2, #0
    b6a2:	2300      	movs	r3, #0
    b6a4:	f015 fc64 	bl	20f70 <__adddf3>
    b6a8:	f016 f8f0 	bl	2188c <__aeabi_d2uiz>
    b6ac:	65a0      	str	r0, [r4, #88]	; 0x58
    b6ae:	2121      	movs	r1, #33	; 0x21
    b6b0:	4638      	mov	r0, r7
    b6b2:	f7fe fc1d 	bl	9ef0 <os_sem_pend>
        }
#endif
        /* Wait for completion of transactions */
        err = dpl_sem_pend(&ccp->sem, dpl_time_ms_to_ticks32(4*MYNEWT_VAL(UWB_CCP_LONG_RX_TO)/1000));
        if (err==DPL_TIMEOUT) {
    b6b6:	2806      	cmp	r0, #6
    b6b8:	d039      	beq.n	b72e <ccp_listen+0x126>
    b6ba:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
            CCP_STATS_INC(sem_timeout);
        }
        if(dpl_sem_get_count(&ccp->sem) == 0){
    b6be:	bb63      	cbnz	r3, b71a <ccp_listen+0x112>
    return (dpl_error_t)os_sem_release(&sem->sem);
    b6c0:	4638      	mov	r0, r7
    b6c2:	f7fe fbe3 	bl	9e8c <os_sem_release>
            err = dpl_sem_release(&ccp->sem);
            assert(err == DPL_OK);
    b6c6:	b340      	cbz	r0, b71a <ccp_listen+0x112>
    b6c8:	2300      	movs	r3, #0
    b6ca:	461a      	mov	r2, r3
    b6cc:	4619      	mov	r1, r3
    b6ce:	4618      	mov	r0, r3
    b6d0:	f7fd fcbc 	bl	904c <__assert_func>
    assert(err == DPL_OK);
    b6d4:	2300      	movs	r3, #0
    b6d6:	461a      	mov	r2, r3
    b6d8:	4619      	mov	r1, r3
    b6da:	4618      	mov	r0, r3
    b6dc:	f7fd fcb6 	bl	904c <__assert_func>
    b6e0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b6e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    b6e4:	4628      	mov	r0, r5
    b6e6:	4798      	blx	r3
        uint32_t behind = 0xffffffffU&(uwb_read_systime_lo32(inst) - dx_time);
    b6e8:	1b80      	subs	r0, r0, r6
        CCP_STATS_SET(os_lat_behind, uwb_dwt_usecs_to_usecs(behind>>16));
    b6ea:	2300      	movs	r3, #0
    b6ec:	6563      	str	r3, [r4, #84]	; 0x54
    b6ee:	0c00      	lsrs	r0, r0, #16
    b6f0:	f015 fd7a 	bl	211e8 <__aeabi_ui2d>
    b6f4:	a310      	add	r3, pc, #64	; (adr r3, b738 <ccp_listen+0x130>)
    b6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
    b6fa:	f015 fdef 	bl	212dc <__aeabi_dmul>
    b6fe:	2200      	movs	r2, #0
    b700:	2300      	movs	r3, #0
    b702:	f015 fc35 	bl	20f70 <__adddf3>
    b706:	f016 f8c1 	bl	2188c <__aeabi_d2uiz>
    b70a:	6560      	str	r0, [r4, #84]	; 0x54
        CCP_STATS_INC(rx_start_error);
    b70c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    b70e:	3301      	adds	r3, #1
    b710:	6363      	str	r3, [r4, #52]	; 0x34
    b712:	4638      	mov	r0, r7
    b714:	f7fe fbba 	bl	9e8c <os_sem_release>
        assert(err == DPL_OK);
    b718:	b918      	cbnz	r0, b722 <ccp_listen+0x11a>
        }
    }
    return ccp->status;
}
    b71a:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
    b71e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        assert(err == DPL_OK);
    b722:	2300      	movs	r3, #0
    b724:	461a      	mov	r2, r3
    b726:	4619      	mov	r1, r3
    b728:	4618      	mov	r0, r3
    b72a:	f7fd fc8f 	bl	904c <__assert_func>
            CCP_STATS_INC(sem_timeout);
    b72e:	6e23      	ldr	r3, [r4, #96]	; 0x60
    b730:	3301      	adds	r3, #1
    b732:	6623      	str	r3, [r4, #96]	; 0x60
    b734:	e7c1      	b.n	b6ba <ccp_listen+0xb2>
    b736:	bf00      	nop
    b738:	90690691 	.word	0x90690691
    b73c:	3ff06906 	.word	0x3ff06906

0000b740 <ccp_slave_timer_ev_cb>:
{
    b740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b744:	b082      	sub	sp, #8
    assert(ev != NULL);
    b746:	2800      	cmp	r0, #0
    b748:	d06f      	beq.n	b82a <ccp_slave_timer_ev_cb+0xea>
    return ev->ev.ev_arg;
    b74a:	6884      	ldr	r4, [r0, #8]
    assert(dpl_event_get_arg(ev));
    b74c:	2c00      	cmp	r4, #0
    b74e:	d072      	beq.n	b836 <ccp_slave_timer_ev_cb+0xf6>
    struct uwb_dev * inst = ccp->dev_inst;
    b750:	6825      	ldr	r5, [r4, #0]
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
    b752:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b754:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    b756:	2120      	movs	r1, #32
    b758:	4628      	mov	r0, r5
    b75a:	4798      	blx	r3
    ccp->blink_frame_duration = uwb_phy_frame_duration(inst, sizeof(uwb_ccp_blink_frame_t));
    b75c:	f8a4 017e 	strh.w	r0, [r4, #382]	; 0x17e
    if (!ccp->status.enabled) {
    b760:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    b764:	f013 0f10 	tst.w	r3, #16
    b768:	d05c      	beq.n	b824 <ccp_slave_timer_ev_cb+0xe4>
    if (ccp->status.rx_timeout_error) {
    b76a:	f013 0f02 	tst.w	r3, #2
    b76e:	d168      	bne.n	b842 <ccp_slave_timer_ev_cb+0x102>
    CCP_STATS_INC(slave_cnt);
    b770:	69e3      	ldr	r3, [r4, #28]
    b772:	3301      	adds	r3, #1
    b774:	61e3      	str	r3, [r4, #28]
    dx_time = ccp->local_epoch;
    b776:	f8d4 70d8 	ldr.w	r7, [r4, #216]	; 0xd8
    b77a:	f8d4 60dc 	ldr.w	r6, [r4, #220]	; 0xdc
    if (ccp->wcs) {
    b77e:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
    b782:	f1b8 0f00 	cmp.w	r8, #0
    b786:	d00e      	beq.n	b7a6 <ccp_slave_timer_ev_cb+0x66>
        dx_time += DPL_FLOAT64_F64_TO_U64(DPL_FLOAT64_MUL(DPL_FLOAT64_U64_TO_F64((uint64_t)ccp->period << 16),
    b788:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
    b78c:	0408      	lsls	r0, r1, #16
    b78e:	0c09      	lsrs	r1, r1, #16
    b790:	f015 fd6e 	bl	21270 <__aeabi_ul2d>
    b794:	e9d8 2310 	ldrd	r2, r3, [r8, #64]	; 0x40
    b798:	f015 fda0 	bl	212dc <__aeabi_dmul>
    b79c:	f016 f986 	bl	21aac <__aeabi_d2ulz>
    b7a0:	19c7      	adds	r7, r0, r7
    b7a2:	eb46 0601 	adc.w	r6, r6, r1
    return (dev->uw_funcs->uf_phy_SHR_duration(dev));
    b7a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b7a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    b7ac:	4628      	mov	r0, r5
    b7ae:	4798      	blx	r3
    dx_time -= ((uint64_t)ceilf(uwb_usecs_to_dwt_usecs(uwb_phy_SHR_duration(inst) +
    b7b0:	f895 351b 	ldrb.w	r3, [r5, #1307]	; 0x51b
    b7b4:	4418      	add	r0, r3
    b7b6:	f015 fd27 	bl	21208 <__aeabi_i2d>
    b7ba:	a34d      	add	r3, pc, #308	; (adr r3, b8f0 <ccp_slave_timer_ev_cb+0x1b0>)
    b7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
    b7c0:	f015 feb6 	bl	21530 <__aeabi_ddiv>
    b7c4:	f016 f882 	bl	218cc <__aeabi_d2f>
    b7c8:	ee00 0a10 	vmov	s0, r0
    b7cc:	f016 fb00 	bl	21dd0 <ceilf>
    b7d0:	ee10 0a10 	vmov	r0, s0
    b7d4:	f016 f94a 	bl	21a6c <__aeabi_f2ulz>
                                                       inst->config.rx.timeToRxStable)) << 16);
    b7d8:	0409      	lsls	r1, r1, #16
    b7da:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
    b7de:	0400      	lsls	r0, r0, #16
    dx_time -= ((uint64_t)ceilf(uwb_usecs_to_dwt_usecs(uwb_phy_SHR_duration(inst) +
    b7e0:	1a3f      	subs	r7, r7, r0
    b7e2:	eb66 0601 	sbc.w	r6, r6, r1
    timeout = ccp->blink_frame_duration + MYNEWT_VAL(XTALT_GUARD);
    b7e6:	f8b4 117e 	ldrh.w	r1, [r4, #382]	; 0x17e
    b7ea:	f501 7380 	add.w	r3, r1, #256	; 0x100
    timeout += (ccp->config.tx_holdoff_dly + ccp->blink_frame_duration) * MYNEWT_VAL(UWB_CCP_MAX_CASCADE_RPTS);
    b7ee:	f8b4 20cc 	ldrh.w	r2, [r4, #204]	; 0xcc
    b7f2:	4411      	add	r1, r2
    b7f4:	0089      	lsls	r1, r1, #2
    b7f6:	fa11 f183 	uxtah	r1, r1, r3
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
    b7fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b7fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b7fe:	b289      	uxth	r1, r1
    b800:	4628      	mov	r0, r5
    b802:	4798      	blx	r3
    ccp_listen(ccp, dx_time, UWB_BLOCKING);
    b804:	2300      	movs	r3, #0
    b806:	9300      	str	r3, [sp, #0]
    b808:	463a      	mov	r2, r7
    b80a:	4633      	mov	r3, r6
    b80c:	4620      	mov	r0, r4
    b80e:	f7ff fefb 	bl	b608 <ccp_listen>
    if(ccp->status.start_rx_error){
    b812:	f994 30c8 	ldrsb.w	r3, [r4, #200]	; 0xc8
    b816:	2b00      	cmp	r3, #0
    b818:	db21      	blt.n	b85e <ccp_slave_timer_ev_cb+0x11e>
    if (!ccp->status.enabled) {
    b81a:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    b81e:	f013 0f10 	tst.w	r3, #16
    b822:	d12a      	bne.n	b87a <ccp_slave_timer_ev_cb+0x13a>
}
    b824:	b002      	add	sp, #8
    b826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert(ev != NULL);
    b82a:	2300      	movs	r3, #0
    b82c:	461a      	mov	r2, r3
    b82e:	4619      	mov	r1, r3
    b830:	4618      	mov	r0, r3
    b832:	f7fd fc0b 	bl	904c <__assert_func>
    assert(dpl_event_get_arg(ev));
    b836:	2300      	movs	r3, #0
    b838:	461a      	mov	r2, r3
    b83a:	4619      	mov	r1, r3
    b83c:	4618      	mov	r0, r3
    b83e:	f7fd fc05 	bl	904c <__assert_func>
    b842:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b846:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b84a:	4628      	mov	r0, r5
    b84c:	4798      	blx	r3
        ccp_listen(ccp, 0, UWB_BLOCKING);
    b84e:	2300      	movs	r3, #0
    b850:	9300      	str	r3, [sp, #0]
    b852:	2200      	movs	r2, #0
    b854:	2300      	movs	r3, #0
    b856:	4620      	mov	r0, r4
    b858:	f7ff fed6 	bl	b608 <ccp_listen>
        goto reset_timer;
    b85c:	e7dd      	b.n	b81a <ccp_slave_timer_ev_cb+0xda>
    b85e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b862:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b866:	4628      	mov	r0, r5
    b868:	4798      	blx	r3
        ccp_listen(ccp, 0, UWB_BLOCKING);
    b86a:	2300      	movs	r3, #0
    b86c:	9300      	str	r3, [sp, #0]
    b86e:	2200      	movs	r2, #0
    b870:	2300      	movs	r3, #0
    b872:	4620      	mov	r0, r4
    b874:	f7ff fec8 	bl	b608 <ccp_listen>
    b878:	e7cf      	b.n	b81a <ccp_slave_timer_ev_cb+0xda>
    dpl_cputime_timer_stop(&ccp->timer);
    b87a:	f104 07f4 	add.w	r7, r4, #244	; 0xf4
    b87e:	4638      	mov	r0, r7
    b880:	f002 fd53 	bl	e32a <dpl_cputime_timer_stop>
    if (ccp->status.rx_timeout_error &&
    b884:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    b888:	f013 0f02 	tst.w	r3, #2
    b88c:	d002      	beq.n	b894 <ccp_slave_timer_ev_cb+0x154>
        ccp->missed_frames > MYNEWT_VAL(UWB_CCP_TOLERATE_MISSED_FRAMES)) {
    b88e:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
    if (ccp->status.rx_timeout_error &&
    b892:	bb3b      	cbnz	r3, b8e4 <ccp_slave_timer_ev_cb+0x1a4>
        ccp->status.rx_timeout_error = 0;
    b894:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    b898:	f36f 0341 	bfc	r3, #1, #1
    b89c:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
        timer_expiry = ccp->os_epoch + dpl_cputime_usecs_to_ticks(
    b8a0:	f8d4 60e0 	ldr.w	r6, [r4, #224]	; 0xe0
    b8a4:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
    b8a8:	f015 fc9e 	bl	211e8 <__aeabi_ui2d>
    b8ac:	a310      	add	r3, pc, #64	; (adr r3, b8f0 <ccp_slave_timer_ev_cb+0x1b0>)
    b8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
    b8b2:	f015 fd13 	bl	212dc <__aeabi_dmul>
    b8b6:	f015 ffe9 	bl	2188c <__aeabi_d2uiz>
    b8ba:	f8b4 117e 	ldrh.w	r1, [r4, #382]	; 0x17e
    b8be:	1a41      	subs	r1, r0, r1
    b8c0:	f895 051b 	ldrb.w	r0, [r5, #1307]	; 0x51b
    b8c4:	1a09      	subs	r1, r1, r0
    b8c6:	4431      	add	r1, r6
        rc = dpl_cputime_timer_start(&ccp->timer, timer_expiry);
    b8c8:	f5a1 7148 	sub.w	r1, r1, #800	; 0x320
    b8cc:	4638      	mov	r0, r7
    b8ce:	f002 fd28 	bl	e322 <dpl_cputime_timer_start>
    if (rc == 0) ccp->status.timer_restarted = 1;
    b8d2:	2800      	cmp	r0, #0
    b8d4:	d1a6      	bne.n	b824 <ccp_slave_timer_ev_cb+0xe4>
    b8d6:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    b8da:	f043 0308 	orr.w	r3, r3, #8
    b8de:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
    b8e2:	e79f      	b.n	b824 <ccp_slave_timer_ev_cb+0xe4>
        rc = dpl_cputime_timer_relative(&ccp->timer, 0);
    b8e4:	2100      	movs	r1, #0
    b8e6:	4638      	mov	r0, r7
    b8e8:	f002 fd37 	bl	e35a <dpl_cputime_timer_relative>
    b8ec:	e7f1      	b.n	b8d2 <ccp_slave_timer_ev_cb+0x192>
    b8ee:	bf00      	nop
    b8f0:	90690691 	.word	0x90690691
    b8f4:	3ff06906 	.word	0x3ff06906

0000b8f8 <ccp_send>:
{
    b8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b8fc:	b083      	sub	sp, #12
    b8fe:	9101      	str	r1, [sp, #4]
    assert(ccp);
    b900:	2800      	cmp	r0, #0
    b902:	f000 80f2 	beq.w	baea <ccp_send+0x1f2>
    b906:	4604      	mov	r4, r0
    struct uwb_dev * inst = ccp->dev_inst;
    b908:	6805      	ldr	r5, [r0, #0]
    CCP_STATS_INC(send);
    b90a:	6a03      	ldr	r3, [r0, #32]
    b90c:	3301      	adds	r3, #1
    b90e:	6203      	str	r3, [r0, #32]
    return (dev->uw_funcs->uf_phy_forcetrxoff(dev));
    b910:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    b916:	4628      	mov	r0, r5
    b918:	4798      	blx	r3
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    b91a:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
    b91e:	9300      	str	r3, [sp, #0]
    b920:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b924:	4618      	mov	r0, r3
    b926:	f7fe fae3 	bl	9ef0 <os_sem_pend>
    assert(err == DPL_OK);
    b92a:	2800      	cmp	r0, #0
    b92c:	f040 80e3 	bne.w	baf6 <ccp_send+0x1fe>
    uwb_ccp_frame_t * previous_frame = ccp->frames[(uint16_t)(ccp->idx)%ccp->nframes];
    b930:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
    b934:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	; 0xec
    b938:	fbb3 f2f1 	udiv	r2, r3, r1
    b93c:	fb01 3212 	mls	r2, r1, r2, r3
    b940:	b292      	uxth	r2, r2
    b942:	32e0      	adds	r2, #224	; 0xe0
    b944:	f854 a022 	ldr.w	sl, [r4, r2, lsl #2]
    uwb_ccp_frame_t * frame = ccp->frames[(ccp->idx+1)%ccp->nframes];
    b948:	3301      	adds	r3, #1
    b94a:	fb93 f2f1 	sdiv	r2, r3, r1
    b94e:	fb01 3312 	mls	r3, r1, r2, r3
    b952:	33e0      	adds	r3, #224	; 0xe0
    b954:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
    frame->rpt_count = 0;
    b958:	f04f 0900 	mov.w	r9, #0
    b95c:	f886 901c 	strb.w	r9, [r6, #28]
    frame->rpt_max = MYNEWT_VAL(UWB_CCP_MAX_CASCADE_RPTS);
    b960:	2304      	movs	r3, #4
    b962:	7773      	strb	r3, [r6, #29]
    return (dev->uw_funcs->uf_phy_SHR_duration(dev));
    b964:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b966:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    b96a:	4628      	mov	r0, r5
    b96c:	4798      	blx	r3
    frame->epoch_to_rm_us = uwb_phy_SHR_duration(inst);
    b96e:	83f0      	strh	r0, [r6, #30]
    uint64_t timestamp = previous_frame->transmission_timestamp.timestamp
    b970:	f8da 8014 	ldr.w	r8, [sl, #20]
    b974:	f8da 7018 	ldr.w	r7, [sl, #24]
                        + ((uint64_t)ccp->period << 16);
    b978:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    b97c:	041a      	lsls	r2, r3, #16
    uint64_t timestamp = previous_frame->transmission_timestamp.timestamp
    b97e:	eb18 0802 	adds.w	r8, r8, r2
    b982:	eb47 4713 	adc.w	r7, r7, r3, lsr #16
    timestamp = timestamp & 0xFFFFFFFFFFFFFE00ULL; /* Mask off the last 9 bits */
    b986:	f428 78ff 	bic.w	r8, r8, #510	; 0x1fe
    b98a:	f028 0801 	bic.w	r8, r8, #1
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
    b98e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b990:	6b59      	ldr	r1, [r3, #52]	; 0x34
    b992:	4642      	mov	r2, r8
    b994:	463b      	mov	r3, r7
    b996:	4628      	mov	r0, r5
    b998:	4788      	blx	r1
    timestamp += inst->tx_antenna_delay;
    b99a:	f8b5 34ce 	ldrh.w	r3, [r5, #1230]	; 0x4ce
    b99e:	eb13 0808 	adds.w	r8, r3, r8
    b9a2:	f147 0700 	adc.w	r7, r7, #0
    frame->transmission_timestamp.timestamp = timestamp;
    b9a6:	f8c6 8014 	str.w	r8, [r6, #20]
    b9aa:	61b7      	str	r7, [r6, #24]
    frame->seq_num = ++ccp->seq_num;
    b9ac:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
    b9b0:	3301      	adds	r3, #1
    b9b2:	b2db      	uxtb	r3, r3
    b9b4:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
    b9b8:	7073      	strb	r3, [r6, #1]
    frame->euid = inst->euid;
    b9ba:	f8d5 24b8 	ldr.w	r2, [r5, #1208]	; 0x4b8
    b9be:	f8d5 34bc 	ldr.w	r3, [r5, #1212]	; 0x4bc
    b9c2:	f8c6 2002 	str.w	r2, [r6, #2]
    b9c6:	f8c6 3006 	str.w	r3, [r6, #6]
    frame->short_address = inst->my_short_address;
    b9ca:	f8b5 34b6 	ldrh.w	r3, [r5, #1206]	; 0x4b6
    b9ce:	8173      	strh	r3, [r6, #10]
    frame->transmission_interval = ((uint64_t)ccp->period << 16);
    b9d0:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    b9d4:	041a      	lsls	r2, r3, #16
    b9d6:	f3c3 4307 	ubfx	r3, r3, #16, #8
    b9da:	60f2      	str	r2, [r6, #12]
    b9dc:	7433      	strb	r3, [r6, #16]
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
    b9de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b9e0:	f8d3 b044 	ldr.w	fp, [r3, #68]	; 0x44
    b9e4:	2320      	movs	r3, #32
    b9e6:	464a      	mov	r2, r9
    b9e8:	4631      	mov	r1, r6
    b9ea:	4628      	mov	r0, r5
    b9ec:	47d8      	blx	fp
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
    b9ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b9f0:	f8d3 b048 	ldr.w	fp, [r3, #72]	; 0x48
    b9f4:	464b      	mov	r3, r9
    b9f6:	464a      	mov	r2, r9
    b9f8:	2120      	movs	r1, #32
    b9fa:	4628      	mov	r0, r5
    b9fc:	47d8      	blx	fp
    return (dev->uw_funcs->uf_set_wait4resp(dev, enable));
    b9fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    ba00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    ba02:	4649      	mov	r1, r9
    ba04:	4628      	mov	r0, r5
    ba06:	4798      	blx	r3
    return (dev->uw_funcs->uf_start_tx(dev));
    ba08:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    ba0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    ba0c:	4628      	mov	r0, r5
    ba0e:	4798      	blx	r3
    ccp->status.start_tx_error = uwb_start_tx(inst).start_tx_error;
    ba10:	f3c0 0080 	ubfx	r0, r0, #2, #1
    ba14:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    ba18:	f360 1386 	bfi	r3, r0, #6, #1
    ba1c:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
    if (ccp->status.start_tx_error) {
    ba20:	b2db      	uxtb	r3, r3
    ba22:	f013 0f40 	tst.w	r3, #64	; 0x40
    ba26:	d072      	beq.n	bb0e <ccp_send+0x216>
    return (dev->uw_funcs->uf_read_systime(dev));
    ba28:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    ba2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    ba2c:	4628      	mov	r0, r5
    ba2e:	4798      	blx	r3
        uint64_t late_us = ((systime - timestamp)&UWB_DTU_40BMASK) >> 16;
    ba30:	ebb0 0808 	subs.w	r8, r0, r8
    ba34:	eb61 0107 	sbc.w	r1, r1, r7
    ba38:	ea4f 4818 	mov.w	r8, r8, lsr #16
    ba3c:	ea48 4801 	orr.w	r8, r8, r1, lsl #16
    ba40:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
        CCP_STATS_INC(tx_start_error);
    ba44:	6c63      	ldr	r3, [r4, #68]	; 0x44
    ba46:	3301      	adds	r3, #1
    ba48:	6463      	str	r3, [r4, #68]	; 0x44
        previous_frame->transmission_timestamp.timestamp = (frame->transmission_timestamp.timestamp
    ba4a:	6973      	ldr	r3, [r6, #20]
    ba4c:	69b2      	ldr	r2, [r6, #24]
                        + ((uint64_t)ccp->period << 16));
    ba4e:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
    ba52:	0408      	lsls	r0, r1, #16
    ba54:	181b      	adds	r3, r3, r0
    ba56:	eb42 4211 	adc.w	r2, r2, r1, lsr #16
        previous_frame->transmission_timestamp.timestamp = (frame->transmission_timestamp.timestamp
    ba5a:	f8ca 3014 	str.w	r3, [sl, #20]
    ba5e:	f8ca 2018 	str.w	r2, [sl, #24]
        ccp->idx++;
    ba62:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
    ba66:	3301      	adds	r3, #1
    ba68:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
        ccp->os_epoch += dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(ccp->period - late_us));
    ba6c:	f8d4 50e8 	ldr.w	r5, [r4, #232]	; 0xe8
    ba70:	ebb5 0008 	subs.w	r0, r5, r8
    ba74:	eb61 0101 	sbc.w	r1, r1, r1
    ba78:	f015 fbfa 	bl	21270 <__aeabi_ul2d>
    ba7c:	a33c      	add	r3, pc, #240	; (adr r3, bb70 <ccp_send+0x278>)
    ba7e:	e9d3 2300 	ldrd	r2, r3, [r3]
    ba82:	f015 fc2b 	bl	212dc <__aeabi_dmul>
    ba86:	4606      	mov	r6, r0
    ba88:	460f      	mov	r7, r1
    ba8a:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
    ba8e:	f015 fbab 	bl	211e8 <__aeabi_ui2d>
    ba92:	4632      	mov	r2, r6
    ba94:	463b      	mov	r3, r7
    ba96:	f015 fa6b 	bl	20f70 <__adddf3>
    ba9a:	f015 fef7 	bl	2188c <__aeabi_d2uiz>
    ba9e:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
        ccp->os_epoch -= dpl_cputime_usecs_to_ticks(MYNEWT_VAL(OS_LATENCY));
    baa2:	f5a0 7048 	sub.w	r0, r0, #800	; 0x320
    baa6:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
        ccp->master_epoch.timestamp += ((uint64_t)ccp->period)<<16;
    baaa:	0429      	lsls	r1, r5, #16
    baac:	f8d4 20d0 	ldr.w	r2, [r4, #208]	; 0xd0
    bab0:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
    bab4:	1852      	adds	r2, r2, r1
    bab6:	eb43 4315 	adc.w	r3, r3, r5, lsr #16
    baba:	f8c4 20d0 	str.w	r2, [r4, #208]	; 0xd0
    babe:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
        ccp->local_epoch += ((uint64_t)ccp->period)<<16;
    bac2:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    bac6:	f8d4 20dc 	ldr.w	r2, [r4, #220]	; 0xdc
    baca:	185b      	adds	r3, r3, r1
    bacc:	eb42 4215 	adc.w	r2, r2, r5, lsr #16
    bad0:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
    bad4:	f8c4 20dc 	str.w	r2, [r4, #220]	; 0xdc
    return (dpl_error_t)os_sem_release(&sem->sem);
    bad8:	9800      	ldr	r0, [sp, #0]
    bada:	f7fe f9d7 	bl	9e8c <os_sem_release>
        assert(err == DPL_OK);
    bade:	b980      	cbnz	r0, bb02 <ccp_send+0x20a>
}
    bae0:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
    bae4:	b003      	add	sp, #12
    bae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(ccp);
    baea:	2300      	movs	r3, #0
    baec:	461a      	mov	r2, r3
    baee:	4619      	mov	r1, r3
    baf0:	4618      	mov	r0, r3
    baf2:	f7fd faab 	bl	904c <__assert_func>
    assert(err == DPL_OK);
    baf6:	2300      	movs	r3, #0
    baf8:	461a      	mov	r2, r3
    bafa:	4619      	mov	r1, r3
    bafc:	4618      	mov	r0, r3
    bafe:	f7fd faa5 	bl	904c <__assert_func>
        assert(err == DPL_OK);
    bb02:	464b      	mov	r3, r9
    bb04:	464a      	mov	r2, r9
    bb06:	4649      	mov	r1, r9
    bb08:	4648      	mov	r0, r9
    bb0a:	f7fd fa9f 	bl	904c <__assert_func>
    }else if(mode == UWB_BLOCKING){
    bb0e:	9b01      	ldr	r3, [sp, #4]
    bb10:	2b00      	cmp	r3, #0
    bb12:	d1e5      	bne.n	bae0 <ccp_send+0x1e8>
        uint32_t margin = 0xffffffffU&(frame->transmission_timestamp.lo - uwb_read_systime_lo32(inst));
    bb14:	6976      	ldr	r6, [r6, #20]
    return (dev->uw_funcs->uf_read_systime_lo32(dev));
    bb16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    bb18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    bb1a:	4628      	mov	r0, r5
    bb1c:	4798      	blx	r3
    bb1e:	1a30      	subs	r0, r6, r0
        CCP_STATS_SET(os_lat_margin, uwb_dwt_usecs_to_usecs(margin>>16));
    bb20:	2300      	movs	r3, #0
    bb22:	65a3      	str	r3, [r4, #88]	; 0x58
    bb24:	0c00      	lsrs	r0, r0, #16
    bb26:	f015 fb5f 	bl	211e8 <__aeabi_ui2d>
    bb2a:	a311      	add	r3, pc, #68	; (adr r3, bb70 <ccp_send+0x278>)
    bb2c:	e9d3 2300 	ldrd	r2, r3, [r3]
    bb30:	f015 fbd4 	bl	212dc <__aeabi_dmul>
    bb34:	2200      	movs	r2, #0
    bb36:	2300      	movs	r3, #0
    bb38:	f015 fa1a 	bl	20f70 <__adddf3>
    bb3c:	f015 fea6 	bl	2188c <__aeabi_d2uiz>
    bb40:	65a0      	str	r0, [r4, #88]	; 0x58
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    bb42:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    bb46:	9800      	ldr	r0, [sp, #0]
    bb48:	f7fe f9d2 	bl	9ef0 <os_sem_pend>
        assert(err == DPL_OK);
    bb4c:	b950      	cbnz	r0, bb64 <ccp_send+0x26c>
    return (dpl_error_t)os_sem_release(&sem->sem);
    bb4e:	9800      	ldr	r0, [sp, #0]
    bb50:	f7fe f99c 	bl	9e8c <os_sem_release>
        assert(err == DPL_OK);
    bb54:	2800      	cmp	r0, #0
    bb56:	d0c3      	beq.n	bae0 <ccp_send+0x1e8>
    bb58:	2300      	movs	r3, #0
    bb5a:	461a      	mov	r2, r3
    bb5c:	4619      	mov	r1, r3
    bb5e:	4618      	mov	r0, r3
    bb60:	f7fd fa74 	bl	904c <__assert_func>
        assert(err == DPL_OK);
    bb64:	2300      	movs	r3, #0
    bb66:	461a      	mov	r2, r3
    bb68:	4619      	mov	r1, r3
    bb6a:	4618      	mov	r0, r3
    bb6c:	f7fd fa6e 	bl	904c <__assert_func>
    bb70:	90690691 	.word	0x90690691
    bb74:	3ff06906 	.word	0x3ff06906

0000bb78 <ccp_master_timer_ev_cb>:
{
    bb78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    assert(ev != NULL);
    bb7a:	b138      	cbz	r0, bb8c <ccp_master_timer_ev_cb+0x14>
    return ev->ev.ev_arg;
    bb7c:	6884      	ldr	r4, [r0, #8]
    assert(dpl_event_get_arg(ev));
    bb7e:	b15c      	cbz	r4, bb98 <ccp_master_timer_ev_cb+0x20>
    if (!ccp->status.enabled) {
    bb80:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    bb84:	f013 0f10 	tst.w	r3, #16
    bb88:	d10c      	bne.n	bba4 <ccp_master_timer_ev_cb+0x2c>
}
    bb8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert(ev != NULL);
    bb8c:	2300      	movs	r3, #0
    bb8e:	461a      	mov	r2, r3
    bb90:	4619      	mov	r1, r3
    bb92:	4618      	mov	r0, r3
    bb94:	f7fd fa5a 	bl	904c <__assert_func>
    assert(dpl_event_get_arg(ev));
    bb98:	2300      	movs	r3, #0
    bb9a:	461a      	mov	r2, r3
    bb9c:	4619      	mov	r1, r3
    bb9e:	4618      	mov	r0, r3
    bba0:	f7fd fa54 	bl	904c <__assert_func>
    CCP_STATS_INC(master_cnt);
    bba4:	69a3      	ldr	r3, [r4, #24]
    bba6:	3301      	adds	r3, #1
    bba8:	61a3      	str	r3, [r4, #24]
    ccp->status.timer_restarted = 0;
    bbaa:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    bbae:	f36f 03c3 	bfc	r3, #3, #1
    bbb2:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
    if (ccp_send(ccp, UWB_BLOCKING).start_tx_error) {
    bbb6:	2100      	movs	r1, #0
    bbb8:	4620      	mov	r0, r4
    bbba:	f7ff fe9d 	bl	b8f8 <ccp_send>
    bbbe:	f010 0f40 	tst.w	r0, #64	; 0x40
    bbc2:	d004      	beq.n	bbce <ccp_master_timer_ev_cb+0x56>
        if (!ccp->status.enabled) {
    bbc4:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    bbc8:	f013 0f10 	tst.w	r3, #16
    bbcc:	d0dd      	beq.n	bb8a <ccp_master_timer_ev_cb+0x12>
    if (!ccp->status.timer_restarted && ccp->status.enabled) {
    bbce:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    bbd2:	f003 0318 	and.w	r3, r3, #24
    bbd6:	2b10      	cmp	r3, #16
    bbd8:	d1d7      	bne.n	bb8a <ccp_master_timer_ev_cb+0x12>
        rc = dpl_cputime_timer_start(&ccp->timer, ccp->os_epoch
    bbda:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
            - dpl_cputime_usecs_to_ticks(MYNEWT_VAL(OS_LATENCY))
    bbde:	f5a5 7548 	sub.w	r5, r5, #800	; 0x320
            + dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(ccp->period))
    bbe2:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
    bbe6:	f015 faff 	bl	211e8 <__aeabi_ui2d>
    bbea:	a30f      	add	r3, pc, #60	; (adr r3, bc28 <ccp_master_timer_ev_cb+0xb0>)
    bbec:	e9d3 2300 	ldrd	r2, r3, [r3]
    bbf0:	f015 fb74 	bl	212dc <__aeabi_dmul>
    bbf4:	4606      	mov	r6, r0
    bbf6:	460f      	mov	r7, r1
    bbf8:	4628      	mov	r0, r5
    bbfa:	f015 faf5 	bl	211e8 <__aeabi_ui2d>
    bbfe:	4632      	mov	r2, r6
    bc00:	463b      	mov	r3, r7
    bc02:	f015 f9b5 	bl	20f70 <__adddf3>
        rc = dpl_cputime_timer_start(&ccp->timer, ccp->os_epoch
    bc06:	f015 fe41 	bl	2188c <__aeabi_d2uiz>
    bc0a:	4601      	mov	r1, r0
    bc0c:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
    bc10:	f002 fb87 	bl	e322 <dpl_cputime_timer_start>
        if (rc == 0) ccp->status.timer_restarted = 1;
    bc14:	2800      	cmp	r0, #0
    bc16:	d1b8      	bne.n	bb8a <ccp_master_timer_ev_cb+0x12>
    bc18:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    bc1c:	f043 0308 	orr.w	r3, r3, #8
    bc20:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
    bc24:	e7b1      	b.n	bb8a <ccp_master_timer_ev_cb+0x12>
    bc26:	bf00      	nop
    bc28:	90690691 	.word	0x90690691
    bc2c:	3ff06906 	.word	0x3ff06906

0000bc30 <uwb_ccp_init>:
{
    bc30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bc34:	b08e      	sub	sp, #56	; 0x38
    assert(dev);
    bc36:	2800      	cmp	r0, #0
    bc38:	d05c      	beq.n	bcf4 <uwb_ccp_init+0xc4>
    bc3a:	460d      	mov	r5, r1
    bc3c:	4607      	mov	r7, r0
    assert(nframes > 1);
    bc3e:	2901      	cmp	r1, #1
    bc40:	d95e      	bls.n	bd00 <uwb_ccp_init+0xd0>
    struct uwb_ccp_instance *ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(dev, UWBEXT_CCP);
    bc42:	2101      	movs	r1, #1
    bc44:	f7fc ffdd 	bl	8c02 <uwb_mac_find_cb_inst_ptr>
    if (ccp == NULL) {
    bc48:	4604      	mov	r4, r0
    bc4a:	2800      	cmp	r0, #0
    bc4c:	d05e      	beq.n	bd0c <uwb_ccp_init+0xdc>
        assert(ccp->nframes == nframes);
    bc4e:	f8b0 30ec 	ldrh.w	r3, [r0, #236]	; 0xec
    bc52:	42ab      	cmp	r3, r5
    bc54:	f040 80b7 	bne.w	bdc6 <uwb_ccp_init+0x196>
    ccp->period = MYNEWT_VAL(UWB_CCP_PERIOD);
    bc58:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    bc5c:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    ccp->config = (struct uwb_ccp_config){
    bc60:	2300      	movs	r3, #0
    bc62:	f8c4 30ca 	str.w	r3, [r4, #202]	; 0xca
    bc66:	f44f 7360 	mov.w	r3, #896	; 0x380
    bc6a:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
    return (dpl_error_t)os_sem_init(&sem->sem, tokens);
    bc6e:	2101      	movs	r1, #1
    bc70:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    bc74:	f7fe f902 	bl	9e7c <os_sem_init>
    assert(err == DPL_OK);
    bc78:	2800      	cmp	r0, #0
    bc7a:	f040 80aa 	bne.w	bdd2 <uwb_ccp_init+0x1a2>
    ccp->cbs = (struct uwb_mac_interface){
    bc7e:	f104 056c 	add.w	r5, r4, #108	; 0x6c
    bc82:	223c      	movs	r2, #60	; 0x3c
    bc84:	2100      	movs	r1, #0
    bc86:	4628      	mov	r0, r5
    bc88:	f001 febb 	bl	da02 <memset>
    bc8c:	2301      	movs	r3, #1
    bc8e:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
    bc92:	6724      	str	r4, [r4, #112]	; 0x70
    bc94:	4b58      	ldr	r3, [pc, #352]	; (bdf8 <uwb_ccp_init+0x1c8>)
    bc96:	67a3      	str	r3, [r4, #120]	; 0x78
    bc98:	4b58      	ldr	r3, [pc, #352]	; (bdfc <uwb_ccp_init+0x1cc>)
    bc9a:	67e3      	str	r3, [r4, #124]	; 0x7c
    bc9c:	4b58      	ldr	r3, [pc, #352]	; (be00 <uwb_ccp_init+0x1d0>)
    bc9e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    bca2:	4b58      	ldr	r3, [pc, #352]	; (be04 <uwb_ccp_init+0x1d4>)
    bca4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    bca8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    bcac:	4b56      	ldr	r3, [pc, #344]	; (be08 <uwb_ccp_init+0x1d8>)
    bcae:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    uwb_mac_append_interface(dev, &ccp->cbs);
    bcb2:	4629      	mov	r1, r5
    bcb4:	4638      	mov	r0, r7
    bcb6:	f7fc ff4f 	bl	8b58 <uwb_mac_append_interface>
    ccp_tasks_init(ccp);
    bcba:	4620      	mov	r0, r4
    bcbc:	f7ff fc3e 	bl	b53c <ccp_tasks_init>
    ccp->status.initialized = 1;
    bcc0:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    bcc4:	f043 0302 	orr.w	r3, r3, #2
    bcc8:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
    int rc = stats_init(
    bccc:	1d25      	adds	r5, r4, #4
    bcce:	2214      	movs	r2, #20
    bcd0:	9200      	str	r2, [sp, #0]
    bcd2:	4b4e      	ldr	r3, [pc, #312]	; (be0c <uwb_ccp_init+0x1dc>)
    bcd4:	2104      	movs	r1, #4
    bcd6:	4628      	mov	r0, r5
    bcd8:	f005 f91e 	bl	10f18 <stats_init>
    assert(rc == 0);
    bcdc:	2800      	cmp	r0, #0
    bcde:	d17e      	bne.n	bdde <uwb_ccp_init+0x1ae>
    rc = stats_register("ccp", STATS_HDR(ccp->stat));
    bce0:	4629      	mov	r1, r5
    bce2:	484b      	ldr	r0, [pc, #300]	; (be10 <uwb_ccp_init+0x1e0>)
    bce4:	f005 f9a2 	bl	1102c <stats_register>
    assert(rc == 0);
    bce8:	2800      	cmp	r0, #0
    bcea:	d17e      	bne.n	bdea <uwb_ccp_init+0x1ba>
}
    bcec:	4620      	mov	r0, r4
    bcee:	b00e      	add	sp, #56	; 0x38
    bcf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert(dev);
    bcf4:	2300      	movs	r3, #0
    bcf6:	461a      	mov	r2, r3
    bcf8:	4619      	mov	r1, r3
    bcfa:	4618      	mov	r0, r3
    bcfc:	f7fd f9a6 	bl	904c <__assert_func>
    assert(nframes > 1);
    bd00:	2300      	movs	r3, #0
    bd02:	461a      	mov	r2, r3
    bd04:	4619      	mov	r1, r3
    bd06:	4618      	mov	r0, r3
    bd08:	f7fd f9a0 	bl	904c <__assert_func>
        ccp = (struct uwb_ccp_instance *) calloc(1, sizeof(struct uwb_ccp_instance) + nframes * sizeof(uwb_ccp_frame_t *));
    bd0c:	f105 01e0 	add.w	r1, r5, #224	; 0xe0
    bd10:	0089      	lsls	r1, r1, #2
    bd12:	2001      	movs	r0, #1
    bd14:	f001 fd33 	bl	d77e <calloc>
        assert(ccp);
    bd18:	4604      	mov	r4, r0
    bd1a:	b1b8      	cbz	r0, bd4c <uwb_ccp_init+0x11c>
        ccp->status.selfmalloc = 1;
    bd1c:	f890 30c8 	ldrb.w	r3, [r0, #200]	; 0xc8
    bd20:	f043 0301 	orr.w	r3, r3, #1
    bd24:	f880 30c8 	strb.w	r3, [r0, #200]	; 0xc8
        ccp->nframes = nframes;
    bd28:	f8a0 50ec 	strh.w	r5, [r0, #236]	; 0xec
        uwb_ccp_frame_t ccp_default = {
    bd2c:	2230      	movs	r2, #48	; 0x30
    bd2e:	2100      	movs	r1, #0
    bd30:	a802      	add	r0, sp, #8
    bd32:	f001 fe66 	bl	da02 <memset>
    bd36:	23c5      	movs	r3, #197	; 0xc5
    bd38:	f88d 3008 	strb.w	r3, [sp, #8]
    bd3c:	23ff      	movs	r3, #255	; 0xff
    bd3e:	f88d 3009 	strb.w	r3, [sp, #9]
    bd42:	2304      	movs	r3, #4
    bd44:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
        for (i = 0; i < ccp->nframes; i++){
    bd48:	2600      	movs	r6, #0
    bd4a:	e022      	b.n	bd92 <uwb_ccp_init+0x162>
        assert(ccp);
    bd4c:	2300      	movs	r3, #0
    bd4e:	461a      	mov	r2, r3
    bd50:	4619      	mov	r1, r3
    bd52:	4618      	mov	r0, r3
    bd54:	f7fd f97a 	bl	904c <__assert_func>
            assert(ccp->frames[i]);
    bd58:	2300      	movs	r3, #0
    bd5a:	461a      	mov	r2, r3
    bd5c:	4619      	mov	r1, r3
    bd5e:	4618      	mov	r0, r3
    bd60:	f7fd f974 	bl	904c <__assert_func>
            memcpy(ccp->frames[i], &ccp_default, sizeof(uwb_ccp_frame_t));
    bd64:	46ae      	mov	lr, r5
    bd66:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    bd6a:	f8cc 0000 	str.w	r0, [ip]
    bd6e:	f8cc 1004 	str.w	r1, [ip, #4]
    bd72:	f8cc 2008 	str.w	r2, [ip, #8]
    bd76:	f8cc 300c 	str.w	r3, [ip, #12]
    bd7a:	4675      	mov	r5, lr
    bd7c:	f10c 0c10 	add.w	ip, ip, #16
    bd80:	45c6      	cmp	lr, r8
    bd82:	d1ef      	bne.n	bd64 <uwb_ccp_init+0x134>
            ccp->frames[i]->seq_num = 0;
    bd84:	f106 03e0 	add.w	r3, r6, #224	; 0xe0
    bd88:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    bd8c:	2200      	movs	r2, #0
    bd8e:	705a      	strb	r2, [r3, #1]
        for (i = 0; i < ccp->nframes; i++){
    bd90:	3601      	adds	r6, #1
    bd92:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
    bd96:	42b3      	cmp	r3, r6
    bd98:	dd0e      	ble.n	bdb8 <uwb_ccp_init+0x188>
            ccp->frames[i] = (uwb_ccp_frame_t *) calloc(1, sizeof(uwb_ccp_frame_t));
    bd9a:	2130      	movs	r1, #48	; 0x30
    bd9c:	2001      	movs	r0, #1
    bd9e:	f001 fcee 	bl	d77e <calloc>
    bda2:	f106 03e0 	add.w	r3, r6, #224	; 0xe0
    bda6:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
            assert(ccp->frames[i]);
    bdaa:	2800      	cmp	r0, #0
    bdac:	d0d4      	beq.n	bd58 <uwb_ccp_init+0x128>
            memcpy(ccp->frames[i], &ccp_default, sizeof(uwb_ccp_frame_t));
    bdae:	ad02      	add	r5, sp, #8
    bdb0:	4684      	mov	ip, r0
    bdb2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    bdb6:	e7d5      	b.n	bd64 <uwb_ccp_init+0x134>
        ccp->dev_inst = dev;
    bdb8:	6027      	str	r7, [r4, #0]
        ccp->task_prio = dev->task_prio - 0x4;
    bdba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    bdbe:	3b04      	subs	r3, #4
    bdc0:	f884 317c 	strb.w	r3, [r4, #380]	; 0x17c
    bdc4:	e748      	b.n	bc58 <uwb_ccp_init+0x28>
        assert(ccp->nframes == nframes);
    bdc6:	2300      	movs	r3, #0
    bdc8:	461a      	mov	r2, r3
    bdca:	4619      	mov	r1, r3
    bdcc:	4618      	mov	r0, r3
    bdce:	f7fd f93d 	bl	904c <__assert_func>
    assert(err == DPL_OK);
    bdd2:	2300      	movs	r3, #0
    bdd4:	461a      	mov	r2, r3
    bdd6:	4619      	mov	r1, r3
    bdd8:	4618      	mov	r0, r3
    bdda:	f7fd f937 	bl	904c <__assert_func>
    assert(rc == 0);
    bdde:	2300      	movs	r3, #0
    bde0:	461a      	mov	r2, r3
    bde2:	4619      	mov	r1, r3
    bde4:	4618      	mov	r0, r3
    bde6:	f7fd f931 	bl	904c <__assert_func>
    assert(rc == 0);
    bdea:	2300      	movs	r3, #0
    bdec:	461a      	mov	r2, r3
    bdee:	4619      	mov	r1, r3
    bdf0:	4618      	mov	r0, r3
    bdf2:	f7fd f92b 	bl	904c <__assert_func>
    bdf6:	bf00      	nop
    bdf8:	0000b379 	.word	0x0000b379
    bdfc:	0000c009 	.word	0x0000c009
    be00:	0000b30b 	.word	0x0000b30b
    be04:	0000b2b7 	.word	0x0000b2b7
    be08:	0000b289 	.word	0x0000b289
    be0c:	00023030 	.word	0x00023030
    be10:	00022f08 	.word	0x00022f08

0000be14 <uwb_ccp_free>:
{
    be14:	b538      	push	{r3, r4, r5, lr}
    assert(inst);
    be16:	b1f8      	cbz	r0, be58 <uwb_ccp_free+0x44>
    be18:	4605      	mov	r5, r0
    inst->status.enabled = 0;
    be1a:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
    be1e:	f36f 1304 	bfc	r3, #4, #1
    be22:	f880 30c9 	strb.w	r3, [r0, #201]	; 0xc9
    return (dpl_error_t)os_sem_release(&sem->sem);
    be26:	30b0      	adds	r0, #176	; 0xb0
    be28:	f7fe f830 	bl	9e8c <os_sem_release>
    uwb_mac_remove_interface(inst->dev_inst, inst->cbs.id);
    be2c:	462c      	mov	r4, r5
    be2e:	f8b5 106e 	ldrh.w	r1, [r5, #110]	; 0x6e
    be32:	f854 0bf4 	ldr.w	r0, [r4], #244
    be36:	f7fc feb4 	bl	8ba2 <uwb_mac_remove_interface>
    dpl_cputime_timer_stop(&inst->timer);
    be3a:	4620      	mov	r0, r4
    be3c:	f002 fa75 	bl	e32a <dpl_cputime_timer_stop>
    if (inst->status.selfmalloc) {
    be40:	f895 30c8 	ldrb.w	r3, [r5, #200]	; 0xc8
    be44:	f013 0f01 	tst.w	r3, #1
    be48:	d11b      	bne.n	be82 <uwb_ccp_free+0x6e>
        inst->status.initialized = 0;
    be4a:	f895 30c8 	ldrb.w	r3, [r5, #200]	; 0xc8
    be4e:	f36f 0341 	bfc	r3, #1, #1
    be52:	f885 30c8 	strb.w	r3, [r5, #200]	; 0xc8
}
    be56:	e013      	b.n	be80 <uwb_ccp_free+0x6c>
    assert(inst);
    be58:	2300      	movs	r3, #0
    be5a:	461a      	mov	r2, r3
    be5c:	4619      	mov	r1, r3
    be5e:	4618      	mov	r0, r3
    be60:	f7fd f8f4 	bl	904c <__assert_func>
            free(inst->frames[i]);
    be64:	f104 03e0 	add.w	r3, r4, #224	; 0xe0
    be68:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
    be6c:	f001 fd82 	bl	d974 <free>
        for (i = 0; i < inst->nframes; i++) {
    be70:	3401      	adds	r4, #1
    be72:	f8b5 30ec 	ldrh.w	r3, [r5, #236]	; 0xec
    be76:	42a3      	cmp	r3, r4
    be78:	dcf4      	bgt.n	be64 <uwb_ccp_free+0x50>
        free(inst);
    be7a:	4628      	mov	r0, r5
    be7c:	f001 fd7a 	bl	d974 <free>
}
    be80:	bd38      	pop	{r3, r4, r5, pc}
        for (i = 0; i < inst->nframes; i++) {
    be82:	2400      	movs	r4, #0
    be84:	e7f5      	b.n	be72 <uwb_ccp_free+0x5e>

0000be86 <uwb_ccp_start>:
 *
 * @return void
 */
void
uwb_ccp_start(struct uwb_ccp_instance *ccp, uwb_ccp_role_t role)
{
    be86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    be8a:	4604      	mov	r4, r0
    be8c:	460e      	mov	r6, r1
    struct uwb_dev * inst = ccp->dev_inst;
    be8e:	f8d0 8000 	ldr.w	r8, [r0]
    return (dev->uw_funcs->uf_phy_SHR_duration(dev));
    be92:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    be96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    be9a:	4640      	mov	r0, r8
    be9c:	4798      	blx	r3
    uint16_t epoch_to_rm = uwb_phy_SHR_duration(inst);

    // Initialise frame timestamp to current time
    DIAGMSG("{\"utime\": %"PRIu32",\"msg\": \"uwb_ccp_start\"}\n",
            dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
    assert(ccp);
    be9e:	2c00      	cmp	r4, #0
    bea0:	d05e      	beq.n	bf60 <uwb_ccp_start+0xda>
    bea2:	4605      	mov	r5, r0
    ccp->idx = 0x0;
    bea4:	2200      	movs	r2, #0
    bea6:	f8a4 20ee 	strh.w	r2, [r4, #238]	; 0xee
    ccp->status.valid = false;
    beaa:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    beae:	f362 0382 	bfi	r3, r2, #2, #1
    beb2:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
    ccp->master_euid = 0x0;
    beb6:	2200      	movs	r2, #0
    beb8:	2300      	movs	r3, #0
    beba:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
    uwb_ccp_frame_t * frame = ccp->frames[(ccp->idx)%ccp->nframes];
    bebe:	f8d4 7380 	ldr.w	r7, [r4, #896]	; 0x380
    ccp->config.role = role;
    bec2:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
    bec6:	f366 0344 	bfi	r3, r6, #1, #4
    beca:	f884 30ca 	strb.w	r3, [r4, #202]	; 0xca
    ccp->status.enabled = 1;
    bece:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    bed2:	f043 0310 	orr.w	r3, r3, #16
    bed6:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9

    /* Setup CCP to send/listen for the first packet ASAP */
    ccp->os_epoch = dpl_cputime_get32() - epoch_to_rm;
    beda:	f002 fa2a 	bl	e332 <dpl_cputime_get32>
    bede:	1b40      	subs	r0, r0, r5
    bee0:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    return (dev->uw_funcs->uf_read_systime(dev));
    bee4:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    bee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    beea:	4640      	mov	r0, r8
    beec:	4798      	blx	r3
    uint64_t ts = (uwb_read_systime(inst) - (((uint64_t)ccp->period)<<16))&UWB_DTU_40BMASK;
    beee:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    bef2:	041a      	lsls	r2, r3, #16
    bef4:	1a80      	subs	r0, r0, r2
    bef6:	eb61 4313 	sbc.w	r3, r1, r3, lsr #16
    befa:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    ts += ((uint64_t)ccp->config.tx_holdoff_dly + 2 * MYNEWT_VAL(OS_LATENCY))<<16;
    befe:	f8b4 10cc 	ldrh.w	r1, [r4, #204]	; 0xcc
    bf02:	f501 61c8 	add.w	r1, r1, #1600	; 0x640
    bf06:	040a      	lsls	r2, r1, #16
    bf08:	1812      	adds	r2, r2, r0
    bf0a:	eb43 4311 	adc.w	r3, r3, r1, lsr #16

    if (ccp->config.role == CCP_ROLE_MASTER){
    bf0e:	f894 10ca 	ldrb.w	r1, [r4, #202]	; 0xca
    bf12:	f011 0f1e 	tst.w	r1, #30
    bf16:	d129      	bne.n	bf6c <uwb_ccp_start+0xe6>
        ccp->local_epoch = frame->transmission_timestamp.lo = ts;
    bf18:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    bf1c:	617a      	str	r2, [r7, #20]
    bf1e:	763b      	strb	r3, [r7, #24]
    bf20:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
    bf24:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
        frame->transmission_timestamp.hi = 0;
    bf28:	2300      	movs	r3, #0
    bf2a:	767b      	strb	r3, [r7, #25]
    bf2c:	76bb      	strb	r3, [r7, #26]
    bf2e:	7efb      	ldrb	r3, [r7, #27]
    bf30:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    bf34:	76fb      	strb	r3, [r7, #27]
    } else {
        ccp->local_epoch = frame->reception_timestamp = ts;
    }
    ccp->local_epoch -= epoch_to_rm;
    bf36:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
    bf3a:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
    bf3e:	1b40      	subs	r0, r0, r5
    bf40:	f163 0300 	sbc.w	r3, r3, #0
    bf44:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    bf48:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    ccp->local_epoch &= UWB_DTU_40BMASK;
    bf4c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    bf50:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc

    ccp_timer_init(ccp, role);
    bf54:	4631      	mov	r1, r6
    bf56:	4620      	mov	r0, r4
    bf58:	f7ff fb16 	bl	b588 <ccp_timer_init>
}
    bf5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert(ccp);
    bf60:	2300      	movs	r3, #0
    bf62:	461a      	mov	r2, r3
    bf64:	4619      	mov	r1, r3
    bf66:	4618      	mov	r0, r3
    bf68:	f7fd f870 	bl	904c <__assert_func>
        ccp->local_epoch = frame->reception_timestamp = ts;
    bf6c:	623a      	str	r2, [r7, #32]
    bf6e:	627b      	str	r3, [r7, #36]	; 0x24
    bf70:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
    bf74:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    bf78:	e7dd      	b.n	bf36 <uwb_ccp_start+0xb0>

0000bf7a <uwb_ccp_stop>:
 * @param inst   Pointer to struct uwb_ccp_instance.
 * @return void
 */
void
uwb_ccp_stop(struct uwb_ccp_instance *ccp)
{
    bf7a:	b510      	push	{r4, lr}
    assert(ccp);
    bf7c:	b1a8      	cbz	r0, bfaa <uwb_ccp_stop+0x30>
    bf7e:	4604      	mov	r4, r0
    DIAGMSG("{\"utime\": %"PRIu32",\"msg\": \"uwb_ccp_stop\"}\n",
            dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
    ccp->status.enabled = 0;
    bf80:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
    bf84:	f36f 1304 	bfc	r3, #4, #1
    bf88:	f880 30c9 	strb.w	r3, [r0, #201]	; 0xc9
    dpl_cputime_timer_stop(&ccp->timer);
    bf8c:	30f4      	adds	r0, #244	; 0xf4
    bf8e:	f002 f9cc 	bl	e32a <dpl_cputime_timer_stop>
    bf92:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
    if(dpl_sem_get_count(&ccp->sem) == 0){
    bf96:	b93b      	cbnz	r3, bfa8 <uwb_ccp_stop+0x2e>
        uwb_phy_forcetrxoff(ccp->dev_inst);
    bf98:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_phy_forcetrxoff(dev));
    bf9a:	6a43      	ldr	r3, [r0, #36]	; 0x24
    bf9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    bfa0:	4798      	blx	r3
    bfa2:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
        if(dpl_sem_get_count(&ccp->sem) == 0){
    bfa6:	b133      	cbz	r3, bfb6 <uwb_ccp_stop+0x3c>
            dpl_error_t err = dpl_sem_release(&ccp->sem);
            assert(err == DPL_OK);
        }
    }
}
    bfa8:	bd10      	pop	{r4, pc}
    assert(ccp);
    bfaa:	2300      	movs	r3, #0
    bfac:	461a      	mov	r2, r3
    bfae:	4619      	mov	r1, r3
    bfb0:	4618      	mov	r0, r3
    bfb2:	f7fd f84b 	bl	904c <__assert_func>
    bfb6:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    bfba:	f7fd ff67 	bl	9e8c <os_sem_release>
            assert(err == DPL_OK);
    bfbe:	2800      	cmp	r0, #0
    bfc0:	d0f2      	beq.n	bfa8 <uwb_ccp_stop+0x2e>
    bfc2:	2300      	movs	r3, #0
    bfc4:	461a      	mov	r2, r3
    bfc6:	4619      	mov	r1, r3
    bfc8:	4618      	mov	r0, r3
    bfca:	f7fd f83f 	bl	904c <__assert_func>
	...

0000bfd0 <uwb_ccp_skew_compensation_ui64>:
EXPORT_SYMBOL(uwb_ccp_stop);

uint64_t uwb_ccp_skew_compensation_ui64(struct uwb_ccp_instance *ccp, uint64_t value)
{
    bfd0:	b570      	push	{r4, r5, r6, lr}
    bfd2:	4619      	mov	r1, r3
#if MYNEWT_VAL(UWB_WCS_ENABLED)
    struct uwb_wcs_instance * wcs = ccp->wcs;
    bfd4:	6e86      	ldr	r6, [r0, #104]	; 0x68
    if (!wcs) return value;
    bfd6:	b19e      	cbz	r6, c000 <uwb_ccp_skew_compensation_ui64+0x30>
    // value *= (1.0l - fractional_skew);
    value = DPL_FLOAT64_F64_TO_U64(DPL_FLOAT64_MUL( DPL_FLOAT64_U64_TO_F64(value), DPL_FLOAT64_SUB( DPL_FLOAT64_INIT(1.0l),wcs->fractional_skew)));
    bfd8:	4610      	mov	r0, r2
    bfda:	f015 f949 	bl	21270 <__aeabi_ul2d>
    bfde:	4604      	mov	r4, r0
    bfe0:	460d      	mov	r5, r1
    bfe2:	e9d6 2312 	ldrd	r2, r3, [r6, #72]	; 0x48
    bfe6:	2000      	movs	r0, #0
    bfe8:	4906      	ldr	r1, [pc, #24]	; (c004 <uwb_ccp_skew_compensation_ui64+0x34>)
    bfea:	f014 ffbf 	bl	20f6c <__aeabi_dsub>
    bfee:	4602      	mov	r2, r0
    bff0:	460b      	mov	r3, r1
    bff2:	4620      	mov	r0, r4
    bff4:	4629      	mov	r1, r5
    bff6:	f015 f971 	bl	212dc <__aeabi_dmul>
    bffa:	f015 fd57 	bl	21aac <__aeabi_d2ulz>
#endif
    return value;
}
    bffe:	bd70      	pop	{r4, r5, r6, pc}
    if (!wcs) return value;
    c000:	4610      	mov	r0, r2
    c002:	e7fc      	b.n	bffe <uwb_ccp_skew_compensation_ui64+0x2e>
    c004:	3ff00000 	.word	0x3ff00000

0000c008 <rx_complete_cb>:
{
    c008:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c00c:	b08f      	sub	sp, #60	; 0x3c
    struct uwb_ccp_instance * ccp = (struct uwb_ccp_instance *)cbs->inst_ptr;
    c00e:	684c      	ldr	r4, [r1, #4]
    if (ccp->config.role == CCP_ROLE_MASTER) {
    c010:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
    c014:	f013 0f1e 	tst.w	r3, #30
    c018:	f000 8230 	beq.w	c47c <rx_complete_cb+0x474>
    c01c:	4605      	mov	r5, r0
    if (inst->fctrl_array[0] != FCNTL_IEEE_BLINK_CCP_64){
    c01e:	f890 34e0 	ldrb.w	r3, [r0, #1248]	; 0x4e0
    c022:	2bc5      	cmp	r3, #197	; 0xc5
    c024:	d00e      	beq.n	c044 <rx_complete_cb+0x3c>
    c026:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
        if(dpl_sem_get_count(&ccp->sem) == 0){
    c02a:	2b00      	cmp	r3, #0
    c02c:	f040 822a 	bne.w	c484 <rx_complete_cb+0x47c>
    return (dev->uw_funcs->uf_adj_rx_timeout(dev, to));
    c030:	6a43      	ldr	r3, [r0, #36]	; 0x24
    c032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c034:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c038:	4798      	blx	r3
            CCP_STATS_INC(rx_other_frame);
    c03a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    c03c:	3301      	adds	r3, #1
    c03e:	63e3      	str	r3, [r4, #60]	; 0x3c
            return true;
    c040:	2001      	movs	r0, #1
    c042:	e21c      	b.n	c47e <rx_complete_cb+0x476>
    c044:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
    if(dpl_sem_get_count(&ccp->sem) != 0){
    c048:	b99b      	cbnz	r3, c072 <rx_complete_cb+0x6a>
    uwb_ccp_frame_t * frame = ccp->frames[(ccp->idx+1)%ccp->nframes];  // speculative frame advance
    c04a:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
    c04e:	3301      	adds	r3, #1
    c050:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
    c054:	fb93 f1f2 	sdiv	r1, r3, r2
    c058:	fb02 3311 	mls	r3, r2, r1, r3
    c05c:	33e0      	adds	r3, #224	; 0xe0
    c05e:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
    if (inst->frame_len >= sizeof(uwb_ccp_blink_frame_t) && inst->frame_len <= sizeof(frame->array))
    c062:	f8b0 34e2 	ldrh.w	r3, [r0, #1250]	; 0x4e2
    c066:	3b20      	subs	r3, #32
    c068:	b29b      	uxth	r3, r3
    c06a:	2b10      	cmp	r3, #16
    c06c:	d906      	bls.n	c07c <rx_complete_cb+0x74>
        return true;
    c06e:	2001      	movs	r0, #1
    c070:	e205      	b.n	c47e <rx_complete_cb+0x476>
        CCP_STATS_INC(rx_unsolicited);
    c072:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    c074:	3301      	adds	r3, #1
    c076:	63a3      	str	r3, [r4, #56]	; 0x38
        return false;
    c078:	2000      	movs	r0, #0
    c07a:	e200      	b.n	c47e <rx_complete_cb+0x476>
        memcpy(frame->array, inst->rxbuf, sizeof(uwb_ccp_blink_frame_t));
    c07c:	f8d0 34fc 	ldr.w	r3, [r0, #1276]	; 0x4fc
    c080:	681f      	ldr	r7, [r3, #0]
    c082:	6858      	ldr	r0, [r3, #4]
    c084:	6899      	ldr	r1, [r3, #8]
    c086:	68da      	ldr	r2, [r3, #12]
    c088:	6037      	str	r7, [r6, #0]
    c08a:	6070      	str	r0, [r6, #4]
    c08c:	60b1      	str	r1, [r6, #8]
    c08e:	60f2      	str	r2, [r6, #12]
    c090:	691f      	ldr	r7, [r3, #16]
    c092:	6958      	ldr	r0, [r3, #20]
    c094:	6999      	ldr	r1, [r3, #24]
    c096:	69da      	ldr	r2, [r3, #28]
    c098:	6137      	str	r7, [r6, #16]
    c09a:	6170      	str	r0, [r6, #20]
    c09c:	61b1      	str	r1, [r6, #24]
    c09e:	61f2      	str	r2, [r6, #28]
    if (inst->status.lde_error)
    c0a0:	f895 3509 	ldrb.w	r3, [r5, #1289]	; 0x509
    c0a4:	f013 0f04 	tst.w	r3, #4
    c0a8:	f040 81ee 	bne.w	c488 <rx_complete_cb+0x480>
    return (dev->uw_funcs->uf_stop_rx(dev));
    c0ac:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    c0ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    c0b0:	4628      	mov	r0, r5
    c0b2:	4798      	blx	r3
    ccp->idx++; // confirmed frame advance
    c0b4:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
    c0b8:	3301      	adds	r3, #1
    c0ba:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
    ccp->seq_num = frame->seq_num;
    c0be:	7873      	ldrb	r3, [r6, #1]
    c0c0:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
    ccp->missed_frames = 0;
    c0c4:	2700      	movs	r7, #0
    c0c6:	f884 70f1 	strb.w	r7, [r4, #241]	; 0xf1
    return (dev->uw_funcs->uf_read_systime_lo32(dev));
    c0ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    c0cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    c0ce:	4628      	mov	r0, r5
    c0d0:	4798      	blx	r3
    uint32_t delta_0 = 0xffffffffU&(uwb_read_systime_lo32(inst) - (uint32_t)(inst->rxtimestamp&0xFFFFFFFFUL));
    c0d2:	f8d5 34e8 	ldr.w	r3, [r5, #1256]	; 0x4e8
    c0d6:	eba0 0803 	sub.w	r8, r0, r3
    ccp->os_epoch = dpl_cputime_get32();
    c0da:	f002 f92a 	bl	e332 <dpl_cputime_get32>
    c0de:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    c0e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    c0e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    c0e6:	4628      	mov	r0, r5
    c0e8:	4798      	blx	r3
    uint32_t delta_1 = 0xffffffffU&(uwb_read_systime_lo32(inst) - (uint32_t)(inst->rxtimestamp&0xFFFFFFFFUL));
    c0ea:	f8d5 34e8 	ldr.w	r3, [r5, #1256]	; 0x4e8
    c0ee:	1ac0      	subs	r0, r0, r3
    uint32_t delta = (delta_0>>1) + (delta_1>>1);
    c0f0:	0840      	lsrs	r0, r0, #1
    c0f2:	eb00 0058 	add.w	r0, r0, r8, lsr #1
    ccp->os_epoch -= dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(delta>>16));
    c0f6:	0c00      	lsrs	r0, r0, #16
    c0f8:	f015 f876 	bl	211e8 <__aeabi_ui2d>
    c0fc:	a3e6      	add	r3, pc, #920	; (adr r3, c498 <rx_complete_cb+0x490>)
    c0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
    c102:	f015 f8eb 	bl	212dc <__aeabi_dmul>
    c106:	4680      	mov	r8, r0
    c108:	4689      	mov	r9, r1
    c10a:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
    c10e:	f015 f86b 	bl	211e8 <__aeabi_ui2d>
    c112:	4642      	mov	r2, r8
    c114:	464b      	mov	r3, r9
    c116:	f014 ff29 	bl	20f6c <__aeabi_dsub>
    c11a:	f015 fbb7 	bl	2188c <__aeabi_d2uiz>
    c11e:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    CCP_STATS_SET(irq_latency, uwb_dwt_usecs_to_usecs(delta>>16));
    c122:	6527      	str	r7, [r4, #80]	; 0x50
    c124:	2200      	movs	r2, #0
    c126:	2300      	movs	r3, #0
    c128:	4640      	mov	r0, r8
    c12a:	4649      	mov	r1, r9
    c12c:	f014 ff20 	bl	20f70 <__adddf3>
    c130:	f015 fbac 	bl	2188c <__aeabi_d2uiz>
    c134:	6520      	str	r0, [r4, #80]	; 0x50
    CCP_STATS_INC(rx_complete);
    c136:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    c138:	3301      	adds	r3, #1
    c13a:	62e3      	str	r3, [r4, #44]	; 0x2c
    ccp->status.rx_timeout_error = 0;
    c13c:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    c140:	f367 0341 	bfi	r3, r7, #1, #1
    c144:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
    if (frame->transmission_timestamp.timestamp < ccp->master_epoch.timestamp ||
    c148:	6970      	ldr	r0, [r6, #20]
    c14a:	69b2      	ldr	r2, [r6, #24]
    c14c:	f8d4 10d0 	ldr.w	r1, [r4, #208]	; 0xd0
    c150:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
    c154:	4288      	cmp	r0, r1
    c156:	eb72 0303 	sbcs.w	r3, r2, r3
    c15a:	d30c      	bcc.n	c176 <rx_complete_cb+0x16e>
        frame->euid != ccp->master_euid) {
    c15c:	f8d6 0002 	ldr.w	r0, [r6, #2]
    c160:	f8d6 2006 	ldr.w	r2, [r6, #6]
    c164:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    c168:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    if (frame->transmission_timestamp.timestamp < ccp->master_epoch.timestamp ||
    c16c:	429a      	cmp	r2, r3
    c16e:	bf08      	it	eq
    c170:	4288      	cmpeq	r0, r1
    c172:	f000 80ce 	beq.w	c312 <rx_complete_cb+0x30a>
        ccp->master_euid = frame->euid;
    c176:	f8d6 2002 	ldr.w	r2, [r6, #2]
    c17a:	f8d6 3006 	ldr.w	r3, [r6, #6]
    c17e:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
    c182:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        ccp->status.valid = (MYNEWT_VAL(UWB_CCP_VALID_THRESHOLD)==0);
    c186:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    c18a:	f36f 0382 	bfc	r3, #2, #1
    c18e:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
        ccp->status.valid_count = 0;
    c192:	b2db      	uxtb	r3, r3
    c194:	f36f 03c5 	bfc	r3, #3, #3
    c198:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
    ccp->master_epoch.timestamp = frame->transmission_timestamp.timestamp;
    c19c:	6972      	ldr	r2, [r6, #20]
    c19e:	69b3      	ldr	r3, [r6, #24]
    c1a0:	f8c4 20d0 	str.w	r2, [r4, #208]	; 0xd0
    c1a4:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
    ccp->local_epoch = frame->reception_timestamp = inst->rxtimestamp;
    c1a8:	f8d5 24e8 	ldr.w	r2, [r5, #1256]	; 0x4e8
    c1ac:	f8d5 34ec 	ldr.w	r3, [r5, #1260]	; 0x4ec
    c1b0:	6232      	str	r2, [r6, #32]
    c1b2:	6273      	str	r3, [r6, #36]	; 0x24
    c1b4:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
    c1b8:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    ccp->period = (frame->transmission_interval >> 16);
    c1bc:	68f3      	ldr	r3, [r6, #12]
    c1be:	7c32      	ldrb	r2, [r6, #16]
    c1c0:	0c1b      	lsrs	r3, r3, #16
    c1c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    c1c6:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    adjust_for_epoch_to_rm(ccp, frame->epoch_to_rm_us);
    c1ca:	8bf1      	ldrh	r1, [r6, #30]
    c1cc:	4620      	mov	r0, r4
    c1ce:	f7ff f827 	bl	b220 <adjust_for_epoch_to_rm>
    frame->carrier_integrator = inst->carrier_integrator;
    c1d2:	f8d5 34f0 	ldr.w	r3, [r5, #1264]	; 0x4f0
    c1d6:	62b3      	str	r3, [r6, #40]	; 0x28
    if (inst->config.rxttcko_enable) {
    c1d8:	f995 352c 	ldrsb.w	r3, [r5, #1324]	; 0x52c
    c1dc:	2b00      	cmp	r3, #0
    c1de:	f2c0 80b3 	blt.w	c348 <rx_complete_cb+0x340>
        frame->rxttcko = 0;
    c1e2:	2300      	movs	r3, #0
    c1e4:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
    c1e8:	f886 302d 	strb.w	r3, [r6, #45]	; 0x2d
    c1ec:	f886 302e 	strb.w	r3, [r6, #46]	; 0x2e
    c1f0:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
    if (ccp->tof_comp_cb) {
    c1f4:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    c1f8:	b19b      	cbz	r3, c222 <rx_complete_cb+0x21a>
        uint32_t tof_comp = ccp->tof_comp_cb(frame->short_address);
    c1fa:	8970      	ldrh	r0, [r6, #10]
    c1fc:	4798      	blx	r3
    c1fe:	4602      	mov	r2, r0
        tof_comp = uwb_ccp_skew_compensation_ui64(ccp, (uint64_t)tof_comp);
    c200:	2300      	movs	r3, #0
    c202:	4620      	mov	r0, r4
    c204:	f7ff fee4 	bl	bfd0 <uwb_ccp_skew_compensation_ui64>
        ccp->local_epoch -= tof_comp;
    c208:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    c20c:	f8d4 20dc 	ldr.w	r2, [r4, #220]	; 0xdc
    c210:	1a1b      	subs	r3, r3, r0
    c212:	f162 0200 	sbc.w	r2, r2, #0
    c216:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
    c21a:	f8c4 20dc 	str.w	r2, [r4, #220]	; 0xdc
        frame->reception_timestamp = ccp->local_epoch;
    c21e:	6233      	str	r3, [r6, #32]
    c220:	6272      	str	r2, [r6, #36]	; 0x24
    if (frame->rpt_count != 0) {
    c222:	7f33      	ldrb	r3, [r6, #28]
    c224:	2b00      	cmp	r3, #0
    c226:	d05c      	beq.n	c2e2 <rx_complete_cb+0x2da>
        CCP_STATS_INC(rx_relayed);
    c228:	6b23      	ldr	r3, [r4, #48]	; 0x30
    c22a:	3301      	adds	r3, #1
    c22c:	6323      	str	r3, [r4, #48]	; 0x30
        uint64_t master_interval = ((frame->transmission_interval/0x100000000UL+1)*0x100000000UL);
    c22e:	f896 c010 	ldrb.w	ip, [r6, #16]
    c232:	f11c 0c01 	adds.w	ip, ip, #1
    c236:	2700      	movs	r7, #0
        ccp->period = master_interval>>16;
    c238:	ea4f 430c 	mov.w	r3, ip, lsl #16
    c23c:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
        uint64_t repeat_dly = master_interval - frame->transmission_interval;
    c240:	68f1      	ldr	r1, [r6, #12]
    c242:	f896 e010 	ldrb.w	lr, [r6, #16]
    c246:	1a7a      	subs	r2, r7, r1
    c248:	eb6c 030e 	sbc.w	r3, ip, lr
        ccp->master_epoch.timestamp = (ccp->master_epoch.timestamp - repeat_dly);
    c24c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
    c250:	9001      	str	r0, [sp, #4]
    c252:	1bc9      	subs	r1, r1, r7
    c254:	ebae 0c0c 	sub.w	ip, lr, ip
    c258:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
    c25c:	1809      	adds	r1, r1, r0
    c25e:	9801      	ldr	r0, [sp, #4]
    c260:	eb40 000c 	adc.w	r0, r0, ip
    c264:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
    c268:	f8c4 00d4 	str.w	r0, [r4, #212]	; 0xd4
        repeat_dly = uwb_ccp_skew_compensation_ui64(ccp, repeat_dly);
    c26c:	4620      	mov	r0, r4
    c26e:	f7ff feaf 	bl	bfd0 <uwb_ccp_skew_compensation_ui64>
        ccp->local_epoch = (ccp->local_epoch - repeat_dly) & 0x0FFFFFFFFFFUL;
    c272:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
    c276:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
    c27a:	1a12      	subs	r2, r2, r0
    c27c:	eb63 0301 	sbc.w	r3, r3, r1
    c280:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    c284:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
    c288:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
        frame->reception_timestamp = ccp->local_epoch;
    c28c:	6232      	str	r2, [r6, #32]
    c28e:	6273      	str	r3, [r6, #36]	; 0x24
        ccp->os_epoch -= dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs((repeat_dly >> 16)));
    c290:	0c00      	lsrs	r0, r0, #16
    c292:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
    c296:	0c09      	lsrs	r1, r1, #16
    c298:	f014 ffea 	bl	21270 <__aeabi_ul2d>
    c29c:	a37e      	add	r3, pc, #504	; (adr r3, c498 <rx_complete_cb+0x490>)
    c29e:	e9d3 2300 	ldrd	r2, r3, [r3]
    c2a2:	f015 f81b 	bl	212dc <__aeabi_dmul>
    c2a6:	4680      	mov	r8, r0
    c2a8:	4689      	mov	r9, r1
    c2aa:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
    c2ae:	f014 ff9b 	bl	211e8 <__aeabi_ui2d>
    c2b2:	4642      	mov	r2, r8
    c2b4:	464b      	mov	r3, r9
    c2b6:	f014 fe59 	bl	20f6c <__aeabi_dsub>
    c2ba:	f015 fae7 	bl	2188c <__aeabi_d2uiz>
    c2be:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
        frame->carrier_integrator = 0;
    c2c2:	f886 7028 	strb.w	r7, [r6, #40]	; 0x28
    c2c6:	f886 7029 	strb.w	r7, [r6, #41]	; 0x29
    c2ca:	f886 702a 	strb.w	r7, [r6, #42]	; 0x2a
    c2ce:	f886 702b 	strb.w	r7, [r6, #43]	; 0x2b
        frame->rxttcko = 0;
    c2d2:	f886 702c 	strb.w	r7, [r6, #44]	; 0x2c
    c2d6:	f886 702d 	strb.w	r7, [r6, #45]	; 0x2d
    c2da:	f886 702e 	strb.w	r7, [r6, #46]	; 0x2e
    c2de:	f886 702f 	strb.w	r7, [r6, #47]	; 0x2f
    if (ccp->config.role == CCP_ROLE_RELAY && ccp->status.valid && frame->rpt_count < frame->rpt_max) {
    c2e2:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
    c2e6:	4b6a      	ldr	r3, [pc, #424]	; (c490 <rx_complete_cb+0x488>)
    c2e8:	4013      	ands	r3, r2
    c2ea:	f1b3 1f04 	cmp.w	r3, #262148	; 0x40004
    c2ee:	d02f      	beq.n	c350 <rx_complete_cb+0x348>
    if(!(SLIST_EMPTY(&inst->interface_cbs))) {
    c2f0:	f8d5 6530 	ldr.w	r6, [r5, #1328]	; 0x530
    c2f4:	2e00      	cmp	r6, #0
    c2f6:	f040 80b0 	bne.w	c45a <rx_complete_cb+0x452>
    if (ccp->config.postprocess && ccp->status.valid) {
    c2fa:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
    c2fe:	4b65      	ldr	r3, [pc, #404]	; (c494 <rx_complete_cb+0x48c>)
    c300:	4393      	bics	r3, r2
    c302:	f000 80b4 	beq.w	c46e <rx_complete_cb+0x466>
    c306:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    c30a:	f7fd fdbf 	bl	9e8c <os_sem_release>
    return false;
    c30e:	2000      	movs	r0, #0
    c310:	e0b5      	b.n	c47e <rx_complete_cb+0x476>
        if(ccp->status.valid_count < MYNEWT_VAL(UWB_CCP_VALID_THRESHOLD)-1){
    c312:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    c316:	f013 0f38 	tst.w	r3, #56	; 0x38
    c31a:	d106      	bne.n	c32a <rx_complete_cb+0x322>
            ccp->status.valid_count++;
    c31c:	f3c3 02c2 	ubfx	r2, r3, #3, #3
    c320:	3201      	adds	r2, #1
    c322:	f362 03c5 	bfi	r3, r2, #3, #3
    c326:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
        ccp->status.valid |= (ccp->status.valid_count == MYNEWT_VAL(UWB_CCP_VALID_THRESHOLD)-1);
    c32a:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    c32e:	f3c3 0280 	ubfx	r2, r3, #2, #1
    c332:	f003 0138 	and.w	r1, r3, #56	; 0x38
    c336:	2908      	cmp	r1, #8
    c338:	bf08      	it	eq
    c33a:	f042 0201 	orreq.w	r2, r2, #1
    c33e:	f362 0382 	bfi	r3, r2, #2, #1
    c342:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
    c346:	e729      	b.n	c19c <rx_complete_cb+0x194>
        frame->rxttcko = inst->rxttcko;
    c348:	f8d5 34f4 	ldr.w	r3, [r5, #1268]	; 0x4f4
    c34c:	62f3      	str	r3, [r6, #44]	; 0x2c
    c34e:	e751      	b.n	c1f4 <rx_complete_cb+0x1ec>
    if (ccp->config.role == CCP_ROLE_RELAY && ccp->status.valid && frame->rpt_count < frame->rpt_max) {
    c350:	f896 e01c 	ldrb.w	lr, [r6, #28]
    c354:	7f73      	ldrb	r3, [r6, #29]
    c356:	459e      	cmp	lr, r3
    c358:	d2ca      	bcs.n	c2f0 <rx_complete_cb+0x2e8>
        memcpy(tx_frame.array, frame->array, sizeof(uwb_ccp_frame_t));
    c35a:	4637      	mov	r7, r6
    c35c:	f10d 0808 	add.w	r8, sp, #8
    c360:	f106 0930 	add.w	r9, r6, #48	; 0x30
    c364:	46c4      	mov	ip, r8
    c366:	6838      	ldr	r0, [r7, #0]
    c368:	6879      	ldr	r1, [r7, #4]
    c36a:	68ba      	ldr	r2, [r7, #8]
    c36c:	68fb      	ldr	r3, [r7, #12]
    c36e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    c372:	3710      	adds	r7, #16
    c374:	46e0      	mov	r8, ip
    c376:	454f      	cmp	r7, r9
    c378:	d1f4      	bne.n	c364 <rx_complete_cb+0x35c>
        tx_frame.short_address = inst->my_short_address;
    c37a:	f8b5 34b6 	ldrh.w	r3, [r5, #1206]	; 0x4b6
    c37e:	f8ad 3012 	strh.w	r3, [sp, #18]
        tx_frame.rpt_count++;
    c382:	f10e 0301 	add.w	r3, lr, #1
    c386:	b2db      	uxtb	r3, r3
    c388:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        uint64_t tx_timestamp = frame->reception_timestamp;
    c38c:	6a31      	ldr	r1, [r6, #32]
    c38e:	6a70      	ldr	r0, [r6, #36]	; 0x24
        tx_timestamp += tx_frame.rpt_count*((uint64_t)ccp->config.tx_holdoff_dly<<16);
    c390:	f04f 0800 	mov.w	r8, #0
    c394:	f8b4 20cc 	ldrh.w	r2, [r4, #204]	; 0xcc
    c398:	0412      	lsls	r2, r2, #16
    c39a:	fba3 3202 	umull	r3, r2, r3, r2
    c39e:	185b      	adds	r3, r3, r1
    c3a0:	eb42 0000 	adc.w	r0, r2, r0
        tx_timestamp += (inst->slot_id%4)*(((uint64_t)ccp->blink_frame_duration)<<16);
    c3a4:	f8b5 24c2 	ldrh.w	r2, [r5, #1218]	; 0x4c2
    c3a8:	f002 0203 	and.w	r2, r2, #3
    c3ac:	f8b4 117e 	ldrh.w	r1, [r4, #382]	; 0x17e
    c3b0:	0409      	lsls	r1, r1, #16
    c3b2:	fba2 2901 	umull	r2, r9, r2, r1
    c3b6:	18d3      	adds	r3, r2, r3
    c3b8:	eb49 0900 	adc.w	r9, r9, r0
        tx_timestamp &= 0x0FFFFFFFE00UL;
    c3bc:	f423 77ff 	bic.w	r7, r3, #510	; 0x1fe
    c3c0:	f027 0701 	bic.w	r7, r7, #1
    c3c4:	f009 09ff 	and.w	r9, r9, #255	; 0xff
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
    c3c8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    c3ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
    c3cc:	463a      	mov	r2, r7
    c3ce:	464b      	mov	r3, r9
    c3d0:	4628      	mov	r0, r5
    c3d2:	4788      	blx	r1
        tx_timestamp += inst->tx_antenna_delay;
    c3d4:	f8b5 34ce 	ldrh.w	r3, [r5, #1230]	; 0x4ce
    c3d8:	19df      	adds	r7, r3, r7
    c3da:	f149 0900 	adc.w	r9, r9, #0
        uint64_t tx_delay = (tx_timestamp - frame->reception_timestamp);
    c3de:	6a32      	ldr	r2, [r6, #32]
    c3e0:	6a73      	ldr	r3, [r6, #36]	; 0x24
    c3e2:	1aba      	subs	r2, r7, r2
        tx_delay = uwb_ccp_skew_compensation_ui64(ccp, tx_delay);
    c3e4:	eb69 0303 	sbc.w	r3, r9, r3
    c3e8:	4620      	mov	r0, r4
    c3ea:	f7ff fdf1 	bl	bfd0 <uwb_ccp_skew_compensation_ui64>
        tx_frame.transmission_timestamp.timestamp += tx_delay;
    c3ee:	9b07      	ldr	r3, [sp, #28]
    c3f0:	181b      	adds	r3, r3, r0
    c3f2:	9a08      	ldr	r2, [sp, #32]
    c3f4:	eb41 0202 	adc.w	r2, r1, r2
    c3f8:	9307      	str	r3, [sp, #28]
    c3fa:	9208      	str	r2, [sp, #32]
        tx_frame.transmission_interval = frame->transmission_interval - tx_delay;
    c3fc:	68f3      	ldr	r3, [r6, #12]
    c3fe:	7c32      	ldrb	r2, [r6, #16]
    c400:	1a1b      	subs	r3, r3, r0
    c402:	eb62 0101 	sbc.w	r1, r2, r1
    c406:	9305      	str	r3, [sp, #20]
    c408:	f88d 1018 	strb.w	r1, [sp, #24]
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
    c40c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    c40e:	6c5e      	ldr	r6, [r3, #68]	; 0x44
    c410:	2320      	movs	r3, #32
    c412:	4642      	mov	r2, r8
    c414:	a902      	add	r1, sp, #8
    c416:	4628      	mov	r0, r5
    c418:	47b0      	blx	r6
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
    c41a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    c41c:	6c9e      	ldr	r6, [r3, #72]	; 0x48
    c41e:	4643      	mov	r3, r8
    c420:	4642      	mov	r2, r8
    c422:	2120      	movs	r1, #32
    c424:	4628      	mov	r0, r5
    c426:	47b0      	blx	r6
    return (dev->uw_funcs->uf_start_tx(dev));
    c428:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    c42a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    c42c:	4628      	mov	r0, r5
    c42e:	4798      	blx	r3
        ccp->status.start_tx_error = uwb_start_tx(inst).start_tx_error;
    c430:	f3c0 0380 	ubfx	r3, r0, #2, #1
    c434:	f894 20c8 	ldrb.w	r2, [r4, #200]	; 0xc8
    c438:	f363 1286 	bfi	r2, r3, #6, #1
    c43c:	f884 20c8 	strb.w	r2, [r4, #200]	; 0xc8
        if (ccp->status.start_tx_error){
    c440:	b2d3      	uxtb	r3, r2
    c442:	f013 0f40 	tst.w	r3, #64	; 0x40
    c446:	d003      	beq.n	c450 <rx_complete_cb+0x448>
            CCP_STATS_INC(tx_relay_error);
    c448:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    c44a:	3301      	adds	r3, #1
    c44c:	64a3      	str	r3, [r4, #72]	; 0x48
    c44e:	e74f      	b.n	c2f0 <rx_complete_cb+0x2e8>
            CCP_STATS_INC(tx_relay_ok);
    c450:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    c452:	3301      	adds	r3, #1
    c454:	64e3      	str	r3, [r4, #76]	; 0x4c
    c456:	e74b      	b.n	c2f0 <rx_complete_cb+0x2e8>
        SLIST_FOREACH(lcbs, &inst->interface_cbs, next) {
    c458:	6bb6      	ldr	r6, [r6, #56]	; 0x38
    c45a:	2e00      	cmp	r6, #0
    c45c:	f43f af4d 	beq.w	c2fa <rx_complete_cb+0x2f2>
            if (lcbs != NULL && lcbs->superframe_cb) {
    c460:	6b73      	ldr	r3, [r6, #52]	; 0x34
    c462:	2b00      	cmp	r3, #0
    c464:	d0f8      	beq.n	c458 <rx_complete_cb+0x450>
                if(lcbs->superframe_cb((struct uwb_dev*)inst, lcbs)) continue;
    c466:	4631      	mov	r1, r6
    c468:	4628      	mov	r0, r5
    c46a:	4798      	blx	r3
    c46c:	e7f4      	b.n	c458 <rx_complete_cb+0x450>
    return (struct dpl_eventq *) os_eventq_dflt_get();
    c46e:	f7fd f9cf 	bl	9810 <os_eventq_dflt_get>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    c472:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
    c476:	f7fd f91d 	bl	96b4 <os_eventq_put>
}
    c47a:	e744      	b.n	c306 <rx_complete_cb+0x2fe>
        return true;
    c47c:	2001      	movs	r0, #1
}
    c47e:	b00f      	add	sp, #60	; 0x3c
    c480:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return false;
    c484:	2000      	movs	r0, #0
    c486:	e7fa      	b.n	c47e <rx_complete_cb+0x476>
        return true;
    c488:	2001      	movs	r0, #1
    c48a:	e7f8      	b.n	c47e <rx_complete_cb+0x476>
    c48c:	f3af 8000 	nop.w
    c490:	001e0004 	.word	0x001e0004
    c494:	00010004 	.word	0x00010004
    c498:	90690691 	.word	0x90690691
    c49c:	3ff06906 	.word	0x3ff06906

0000c4a0 <uwb_ccp_pkg_init>:
 *
 * @return void
 */
void
uwb_ccp_pkg_init(void)
{
    c4a0:	b510      	push	{r4, lr}
    int i;
    struct uwb_dev *udev;
    struct uwb_ccp_instance * ccp __attribute__((unused));
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    printf("{\"utime\": %"PRIu32",\"msg\": \"uwb_ccp_pkg_init\"}\n",
    c4a2:	f001 ff46 	bl	e332 <dpl_cputime_get32>
    c4a6:	4601      	mov	r1, r0
    c4a8:	4808      	ldr	r0, [pc, #32]	; (c4cc <uwb_ccp_pkg_init+0x2c>)
    c4aa:	f001 febd 	bl	e228 <printf>
           dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
#endif

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
    c4ae:	2400      	movs	r4, #0
    c4b0:	e000      	b.n	c4b4 <uwb_ccp_pkg_init+0x14>
    c4b2:	3401      	adds	r4, #1
    c4b4:	2c02      	cmp	r4, #2
    c4b6:	dc08      	bgt.n	c4ca <uwb_ccp_pkg_init+0x2a>
        udev = uwb_dev_idx_lookup(i);
    c4b8:	4620      	mov	r0, r4
    c4ba:	f7fc fb1d 	bl	8af8 <uwb_dev_idx_lookup>
        if (!udev) {
    c4be:	2800      	cmp	r0, #0
    c4c0:	d0f7      	beq.n	c4b2 <uwb_ccp_pkg_init+0x12>
            continue;
        }
        ccp = uwb_ccp_init(udev, 2);
    c4c2:	2102      	movs	r1, #2
    c4c4:	f7ff fbb4 	bl	bc30 <uwb_ccp_init>
    c4c8:	e7f3      	b.n	c4b2 <uwb_ccp_pkg_init+0x12>
        pr_info("uwbccp: To start service: echo 1 > /sys/kernel/uwbcore/uwbccp%d/role; echo 1 > /sys/kernel/uwbcore/uwbccp%d/enable; cat /dev/uwbccp%d\n",
                udev->idx, udev->idx, udev->idx);
#endif  /* __KERNEL__ */
    }

}
    c4ca:	bd10      	pop	{r4, pc}
    c4cc:	00022f0c 	.word	0x00022f0c

0000c4d0 <uwb_ccp_pkg_down>:
 *
 * @return void
 */
int
uwb_ccp_pkg_down(int reason)
{
    c4d0:	b538      	push	{r3, r4, r5, lr}
    int i;
    struct uwb_dev *udev;
    struct uwb_ccp_instance * ccp;

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
    c4d2:	2400      	movs	r4, #0
    c4d4:	e003      	b.n	c4de <uwb_ccp_pkg_down+0xe>
        }
#if __KERNEL__
        ccp_chrdev_destroy(udev->idx);
        ccp_sysfs_deinit(udev->idx);
#endif
        uwb_ccp_free(ccp);
    c4d6:	4628      	mov	r0, r5
    c4d8:	f7ff fc9c 	bl	be14 <uwb_ccp_free>
    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
    c4dc:	3401      	adds	r4, #1
    c4de:	2c02      	cmp	r4, #2
    c4e0:	dc12      	bgt.n	c508 <uwb_ccp_pkg_down+0x38>
        udev = uwb_dev_idx_lookup(i);
    c4e2:	4620      	mov	r0, r4
    c4e4:	f7fc fb08 	bl	8af8 <uwb_dev_idx_lookup>
        if (!udev) {
    c4e8:	2800      	cmp	r0, #0
    c4ea:	d0f7      	beq.n	c4dc <uwb_ccp_pkg_down+0xc>
        ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_CCP);
    c4ec:	2101      	movs	r1, #1
    c4ee:	f7fc fb88 	bl	8c02 <uwb_mac_find_cb_inst_ptr>
        if (!ccp) {
    c4f2:	4605      	mov	r5, r0
    c4f4:	2800      	cmp	r0, #0
    c4f6:	d0f1      	beq.n	c4dc <uwb_ccp_pkg_down+0xc>
        if (ccp->status.enabled) {
    c4f8:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
    c4fc:	f013 0f10 	tst.w	r3, #16
    c500:	d0e9      	beq.n	c4d6 <uwb_ccp_pkg_down+0x6>
            uwb_ccp_stop(ccp);
    c502:	f7ff fd3a 	bl	bf7a <uwb_ccp_stop>
    c506:	e7e6      	b.n	c4d6 <uwb_ccp_pkg_down+0x6>
    }

    return 0;
}
    c508:	2000      	movs	r0, #0
    c50a:	bd38      	pop	{r3, r4, r5, pc}

0000c50c <reset_cb>:
 *
 * @return true on sucess
 */
static bool
reset_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
    c50c:	b510      	push	{r4, lr}
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
    c50e:	684c      	ldr	r4, [r1, #4]
    c510:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
    if(dpl_sem_get_count(&rng->sem) == 0){
    c514:	b10b      	cbz	r3, c51a <reset_cb+0xe>
        rng->status.rx_ack_expected = 0;
        rng->status.tx_ack_expected = 0;
        return true;
    }
    else
        return false;
    c516:	2000      	movs	r0, #0
}
    c518:	bd10      	pop	{r4, pc}
    return (dpl_error_t)os_sem_release(&sem->sem);
    c51a:	f104 0050 	add.w	r0, r4, #80	; 0x50
    c51e:	f7fd fcb5 	bl	9e8c <os_sem_release>
        assert(err == DPL_OK);
    c522:	b978      	cbnz	r0, c544 <reset_cb+0x38>
        RNG_STATS_INC(reset);
    c524:	6c63      	ldr	r3, [r4, #68]	; 0x44
    c526:	3301      	adds	r3, #1
    c528:	6463      	str	r3, [r4, #68]	; 0x44
        rng->status.rx_ack_expected = 0;
    c52a:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
    c52e:	f36f 1345 	bfc	r3, #5, #1
    c532:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        rng->status.tx_ack_expected = 0;
    c536:	b2db      	uxtb	r3, r3
    c538:	f36f 1304 	bfc	r3, #4, #1
    c53c:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        return true;
    c540:	2001      	movs	r0, #1
    c542:	e7e9      	b.n	c518 <reset_cb+0xc>
        assert(err == DPL_OK);
    c544:	2300      	movs	r3, #0
    c546:	461a      	mov	r2, r3
    c548:	4619      	mov	r1, r3
    c54a:	4618      	mov	r0, r3
    c54c:	f7fc fd7e 	bl	904c <__assert_func>

0000c550 <rx_timeout_cb>:
{
    c550:	b510      	push	{r4, lr}
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
    c552:	684c      	ldr	r4, [r1, #4]
    c554:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
    if(dpl_sem_get_count(&rng->sem) == 1)
    c558:	2b01      	cmp	r3, #1
    c55a:	d01a      	beq.n	c592 <rx_timeout_cb+0x42>
    if(dpl_sem_get_count(&rng->sem) == 0){
    c55c:	b10b      	cbz	r3, c562 <rx_timeout_cb+0x12>
    return false;
    c55e:	2000      	movs	r0, #0
}
    c560:	bd10      	pop	{r4, pc}
    c562:	f104 0050 	add.w	r0, r4, #80	; 0x50
    c566:	f7fd fc91 	bl	9e8c <os_sem_release>
        assert(err == DPL_OK);
    c56a:	b960      	cbnz	r0, c586 <rx_timeout_cb+0x36>
        RNG_STATS_INC(rx_timeout);
    c56c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    c56e:	3301      	adds	r3, #1
    c570:	63e3      	str	r3, [r4, #60]	; 0x3c
        switch(rng->code){
    c572:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
    c576:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
    c57a:	2a18      	cmp	r2, #24
    c57c:	d80b      	bhi.n	c596 <rx_timeout_cb+0x46>
                    RNG_STATS_INC(rx_timeout);
    c57e:	3301      	adds	r3, #1
    c580:	63e3      	str	r3, [r4, #60]	; 0x3c
                    return true;
    c582:	2001      	movs	r0, #1
    c584:	e7ec      	b.n	c560 <rx_timeout_cb+0x10>
        assert(err == DPL_OK);
    c586:	2300      	movs	r3, #0
    c588:	461a      	mov	r2, r3
    c58a:	4619      	mov	r1, r3
    c58c:	4618      	mov	r0, r3
    c58e:	f7fc fd5d 	bl	904c <__assert_func>
        return false;
    c592:	2000      	movs	r0, #0
    c594:	e7e4      	b.n	c560 <rx_timeout_cb+0x10>
                return false;
    c596:	2000      	movs	r0, #0
    c598:	e7e2      	b.n	c560 <rx_timeout_cb+0x10>
	...

0000c59c <superframe_reset_cb>:
 *
 * @return true on sucess
 */
static bool
superframe_reset_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
    c59c:	b510      	push	{r4, lr}
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
    c59e:	684c      	ldr	r4, [r1, #4]
    c5a0:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
    if(dpl_sem_get_count(&rng->sem) == 0){
    c5a4:	b10b      	cbz	r3, c5aa <superframe_reset_cb+0xe>
               dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
        rng->status.rx_ack_expected = 0;
        rng->status.tx_ack_expected = 0;
    }
    return false;
}
    c5a6:	2000      	movs	r0, #0
    c5a8:	bd10      	pop	{r4, pc}
    c5aa:	f104 0050 	add.w	r0, r4, #80	; 0x50
    c5ae:	f7fd fc6d 	bl	9e8c <os_sem_release>
        assert(err == DPL_OK);
    c5b2:	b9a0      	cbnz	r0, c5de <superframe_reset_cb+0x42>
        RNG_STATS_INC(superframe_reset);
    c5b4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    c5b6:	3301      	adds	r3, #1
    c5b8:	64a3      	str	r3, [r4, #72]	; 0x48
        printf("{\"utime\": %"PRIu32",\"msg\": \"superframe_reset\"}\n",
    c5ba:	f001 feba 	bl	e332 <dpl_cputime_get32>
    c5be:	4601      	mov	r1, r0
    c5c0:	480a      	ldr	r0, [pc, #40]	; (c5ec <superframe_reset_cb+0x50>)
    c5c2:	f001 fe31 	bl	e228 <printf>
        rng->status.rx_ack_expected = 0;
    c5c6:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
    c5ca:	f36f 1345 	bfc	r3, #5, #1
    c5ce:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        rng->status.tx_ack_expected = 0;
    c5d2:	b2db      	uxtb	r3, r3
    c5d4:	f36f 1304 	bfc	r3, #4, #1
    c5d8:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
    c5dc:	e7e3      	b.n	c5a6 <superframe_reset_cb+0xa>
        assert(err == DPL_OK);
    c5de:	2300      	movs	r3, #0
    c5e0:	461a      	mov	r2, r3
    c5e2:	4619      	mov	r1, r3
    c5e4:	4618      	mov	r0, r3
    c5e6:	f7fc fd31 	bl	904c <__assert_func>
    c5ea:	bf00      	nop
    c5ec:	000230a8 	.word	0x000230a8

0000c5f0 <complete_ev_cb>:
 *
 * @return true on sucess
 */
static void
complete_ev_cb(struct dpl_event *ev)
{
    c5f0:	b508      	push	{r3, lr}
    c5f2:	4603      	mov	r3, r0
    return ev->ev.ev_arg;
    c5f4:	6880      	ldr	r0, [r0, #8]
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)dpl_event_get_arg(ev);
    assert(ev != NULL);
    c5f6:	b11b      	cbz	r3, c600 <complete_ev_cb+0x10>
    assert(rng);
    c5f8:	b138      	cbz	r0, c60a <complete_ev_cb+0x1a>
    rng_encode(rng);
    c5fa:	f000 fc8d 	bl	cf18 <rng_encode>
}
    c5fe:	bd08      	pop	{r3, pc}
    assert(ev != NULL);
    c600:	461a      	mov	r2, r3
    c602:	4619      	mov	r1, r3
    c604:	4618      	mov	r0, r3
    c606:	f7fc fd21 	bl	904c <__assert_func>
    assert(rng);
    c60a:	2300      	movs	r3, #0
    c60c:	461a      	mov	r2, r3
    c60e:	4619      	mov	r1, r3
    c610:	4618      	mov	r0, r3
    c612:	f7fc fd1b 	bl	904c <__assert_func>
	...

0000c618 <complete_cb>:
 *
 * @return true on sucess
 */
static bool
complete_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
    c618:	b570      	push	{r4, r5, r6, lr}
    c61a:	4604      	mov	r4, r0
    twr_frame_t * frame;
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
    c61c:	684d      	ldr	r5, [r1, #4]
    RNG_STATS_INC(complete_cb);
    c61e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    c620:	3301      	adds	r3, #1
    c622:	642b      	str	r3, [r5, #64]	; 0x40
    if (inst->fctrl != FCNTL_IEEE_RANGE_16 &&
    c624:	f8b0 34e0 	ldrh.w	r3, [r0, #1248]	; 0x4e0
    c628:	f648 0241 	movw	r2, #34881	; 0x8841
    c62c:	4293      	cmp	r3, r2
    c62e:	d004      	beq.n	c63a <complete_cb+0x22>
    c630:	f648 0261 	movw	r2, #34913	; 0x8861
    c634:	4293      	cmp	r3, r2
    c636:	f040 8082 	bne.w	c73e <complete_cb+0x126>
        inst->fctrl != (FCNTL_IEEE_RANGE_16|UWB_FCTRL_ACK_REQUESTED))
        return false;

    /* Calculate Local results and diagnostics.
     * XXX TODO: Generalise antenna distance */
    rng->idx_current = (rng->idx)%rng->nframes;
    c63a:	f8b5 3076 	ldrh.w	r3, [r5, #118]	; 0x76
    c63e:	f8b5 207a 	ldrh.w	r2, [r5, #122]	; 0x7a
    c642:	fbb3 f1f2 	udiv	r1, r3, r2
    c646:	fb02 3311 	mls	r3, r2, r1, r3
    c64a:	b29b      	uxth	r3, r3
    c64c:	f8a5 3078 	strh.w	r3, [r5, #120]	; 0x78
    frame = rng->frames[rng->idx_current];
    c650:	3326      	adds	r3, #38	; 0x26
    c652:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    c656:	685e      	ldr	r6, [r3, #4]
    if (inst->capabilities.single_receiver_pdoa) {
    c658:	f894 34b2 	ldrb.w	r3, [r4, #1202]	; 0x4b2
    c65c:	f013 0f02 	tst.w	r3, #2
    c660:	d01b      	beq.n	c69a <complete_cb+0x82>
    return (dev->uw_funcs->uf_calc_pdoa(dev, diag));
    c662:	6a63      	ldr	r3, [r4, #36]	; 0x24
    c664:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    c668:	f8d4 14f8 	ldr.w	r1, [r4, #1272]	; 0x4f8
    c66c:	4620      	mov	r0, r4
    c66e:	4798      	blx	r3
        dpl_float32_t tmp_pdoa = uwb_calc_pdoa(inst, inst->rxdiag);
        if (!DPL_FLOAT32_ISNAN(tmp_pdoa)) {
    c670:	eeb4 0a40 	vcmp.f32	s0, s0
    c674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c678:	d60f      	bvs.n	c69a <complete_cb+0x82>
            frame->local.pdoa = tmp_pdoa;
    c67a:	ed86 0a36 	vstr	s0, [r6, #216]	; 0xd8
            frame->local.spherical.azimuth = DPL_FLOAT64_FROM_F32(
    c67e:	f504 639a 	add.w	r3, r4, #1232	; 0x4d0
    c682:	edd3 0a00 	vldr	s1, [r3]
    c686:	f894 050c 	ldrb.w	r0, [r4, #1292]	; 0x50c
    c68a:	f7fc fb31 	bl	8cf0 <uwb_calc_aoa>
    c68e:	ee10 0a10 	vmov	r0, s0
    c692:	f014 fdcb 	bl	2122c <__aeabi_f2d>
    c696:	e9c6 0124 	strd	r0, r1, [r6, #144]	; 0x90
                uwb_calc_aoa(frame->local.pdoa, inst->config.channel, inst->rx_ant_separation)
                );
        }
    }

    frame->local.vrssi[0] = DPL_FLOAT32_NAN();
    c69a:	4b2a      	ldr	r3, [pc, #168]	; (c744 <complete_cb+0x12c>)
    c69c:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
    return (dev->uw_funcs->uf_calc_rssi(dev, diag));
    c6a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    c6a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    c6a6:	f8d4 14f8 	ldr.w	r1, [r4, #1272]	; 0x4f8
    c6aa:	4620      	mov	r0, r4
    c6ac:	4798      	blx	r3
    frame->local.rssi = uwb_calc_rssi(inst, inst->rxdiag);
    c6ae:	ed86 0a34 	vstr	s0, [r6, #208]	; 0xd0
    return (dev->uw_funcs->uf_calc_fppl(dev, diag));
    c6b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    c6b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
    c6b8:	f8d4 14f8 	ldr.w	r1, [r4, #1272]	; 0x4f8
    c6bc:	4620      	mov	r0, r4
    c6be:	4798      	blx	r3
    frame->local.fppl = uwb_calc_fppl(inst, inst->rxdiag);
    c6c0:	ed86 0a35 	vstr	s0, [r6, #212]	; 0xd4

    if (inst->capabilities.sts) {
    c6c4:	f894 34b2 	ldrb.w	r3, [r4, #1202]	; 0x4b2
    c6c8:	f013 0f01 	tst.w	r3, #1
    c6cc:	d031      	beq.n	c732 <complete_cb+0x11a>
        frame->local.flags.has_sts = inst->config.rx.stsMode != DWT_STS_MODE_OFF;
    c6ce:	f894 3518 	ldrb.w	r3, [r4, #1304]	; 0x518
    c6d2:	3b00      	subs	r3, #0
    c6d4:	bf18      	it	ne
    c6d6:	2301      	movne	r3, #1
    c6d8:	f896 20dc 	ldrb.w	r2, [r6, #220]	; 0xdc
    c6dc:	f363 0200 	bfi	r2, r3, #0, #1
    c6e0:	f886 20dc 	strb.w	r2, [r6, #220]	; 0xdc
        frame->local.flags.has_valid_sts = !(inst->status.sts_ts_error || inst->status.sts_pream_error);
    c6e4:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
    c6e8:	f013 0f30 	tst.w	r3, #48	; 0x30
    c6ec:	bf0c      	ite	eq
    c6ee:	2201      	moveq	r2, #1
    c6f0:	2200      	movne	r2, #0
    c6f2:	f896 30dc 	ldrb.w	r3, [r6, #220]	; 0xdc
    c6f6:	f362 0341 	bfi	r3, r2, #1, #1
    c6fa:	f886 30dc 	strb.w	r3, [r6, #220]	; 0xdc
        frame->local.vrssi[0] = frame->local.rssi;
    c6fe:	f8d6 30d0 	ldr.w	r3, [r6, #208]	; 0xd0
    c702:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
    return (dev->uw_funcs->uf_calc_seq_rssi(dev, diag, type));
    c706:	6a63      	ldr	r3, [r4, #36]	; 0x24
    c708:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
    c70c:	f44f 7200 	mov.w	r2, #512	; 0x200
    c710:	f8d4 14f8 	ldr.w	r1, [r4, #1272]	; 0x4f8
    c714:	4620      	mov	r0, r4
    c716:	4798      	blx	r3
        frame->local.vrssi[1] = uwb_calc_seq_rssi(inst, inst->rxdiag, UWB_RXDIAG_STS);
    c718:	ed86 0a39 	vstr	s0, [r6, #228]	; 0xe4
    c71c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    c71e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
    c722:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    c726:	f8d4 14f8 	ldr.w	r1, [r4, #1272]	; 0x4f8
    c72a:	4620      	mov	r0, r4
    c72c:	4798      	blx	r3
        frame->local.vrssi[2] = uwb_calc_seq_rssi(inst, inst->rxdiag, UWB_RXDIAG_STS2);
    c72e:	ed86 0a3a 	vstr	s0, [r6, #232]	; 0xe8
    return (struct dpl_eventq *) os_eventq_dflt_get();
    c732:	f7fd f86d 	bl	9810 <os_eventq_dflt_get>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    c736:	f105 0188 	add.w	r1, r5, #136	; 0x88
    c73a:	f7fc ffbb 	bl	96b4 <os_eventq_put>
    }

    /* Postprocess in thread context */
    dpl_eventq_put(dpl_eventq_dflt_get(), &rng->complete_event);
    return false;
}
    c73e:	2000      	movs	r0, #0
    c740:	bd70      	pop	{r4, r5, r6, pc}
    c742:	bf00      	nop
    c744:	7fc00000 	.word	0x7fc00000

0000c748 <uwb_rng_free>:
{
    c748:	b508      	push	{r3, lr}
    assert(rng);
    c74a:	b158      	cbz	r0, c764 <uwb_rng_free+0x1c>
    if (rng->status.selfmalloc)
    c74c:	f890 2072 	ldrb.w	r2, [r0, #114]	; 0x72
    c750:	f012 0f01 	tst.w	r2, #1
    c754:	d10c      	bne.n	c770 <uwb_rng_free+0x28>
        rng->status.initialized = 0;
    c756:	f890 2072 	ldrb.w	r2, [r0, #114]	; 0x72
    c75a:	f36f 0241 	bfc	r2, #1, #1
    c75e:	f880 2072 	strb.w	r2, [r0, #114]	; 0x72
}
    c762:	bd08      	pop	{r3, pc}
    assert(rng);
    c764:	2300      	movs	r3, #0
    c766:	461a      	mov	r2, r3
    c768:	4619      	mov	r1, r3
    c76a:	4618      	mov	r0, r3
    c76c:	f7fc fc6e 	bl	904c <__assert_func>
        free(rng);
    c770:	f001 f900 	bl	d974 <free>
    c774:	e7f5      	b.n	c762 <uwb_rng_free+0x1a>

0000c776 <uwb_rng_config>:
uwb_rng_config(struct uwb_rng_instance * rng, struct uwb_rng_config * config){
    c776:	b508      	push	{r3, lr}
    assert(config);
    c778:	b171      	cbz	r1, c798 <uwb_rng_config+0x22>
    c77a:	460b      	mov	r3, r1
    memcpy(&rng->config, config, sizeof(struct uwb_rng_config));
    c77c:	f8d1 c000 	ldr.w	ip, [r1]
    c780:	6849      	ldr	r1, [r1, #4]
    c782:	689a      	ldr	r2, [r3, #8]
    c784:	68db      	ldr	r3, [r3, #12]
    c786:	f8c0 c060 	str.w	ip, [r0, #96]	; 0x60
    c78a:	6641      	str	r1, [r0, #100]	; 0x64
    c78c:	6682      	str	r2, [r0, #104]	; 0x68
    c78e:	66c3      	str	r3, [r0, #108]	; 0x6c
    return rng->dev_inst->status;
    c790:	6803      	ldr	r3, [r0, #0]
}
    c792:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    c796:	bd08      	pop	{r3, pc}
    assert(config);
    c798:	2300      	movs	r3, #0
    c79a:	461a      	mov	r2, r3
    c79c:	4619      	mov	r1, r3
    c79e:	4618      	mov	r0, r3
    c7a0:	f7fc fc54 	bl	904c <__assert_func>

0000c7a4 <uwb_rng_init>:
{
    c7a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c7a6:	b083      	sub	sp, #12
    assert(dev);
    c7a8:	2800      	cmp	r0, #0
    c7aa:	d03d      	beq.n	c828 <uwb_rng_init+0x84>
    c7ac:	460d      	mov	r5, r1
    c7ae:	4617      	mov	r7, r2
    c7b0:	4606      	mov	r6, r0
    rng = (struct uwb_rng_instance*)uwb_mac_find_cb_inst_ptr(dev, UWBEXT_RNG);
    c7b2:	2104      	movs	r1, #4
    c7b4:	f7fc fa25 	bl	8c02 <uwb_mac_find_cb_inst_ptr>
    if (rng == NULL ) {
    c7b8:	4604      	mov	r4, r0
    c7ba:	2800      	cmp	r0, #0
    c7bc:	d03a      	beq.n	c834 <uwb_rng_init+0x90>
    rng->dev_inst = dev;
    c7be:	6026      	str	r6, [r4, #0]
    rng->ccp_inst = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(dev, UWBEXT_CCP);
    c7c0:	2101      	movs	r1, #1
    c7c2:	4630      	mov	r0, r6
    c7c4:	f7fc fa1d 	bl	8c02 <uwb_mac_find_cb_inst_ptr>
    c7c8:	6060      	str	r0, [r4, #4]
    assert(rng->ccp_inst);
    c7ca:	2800      	cmp	r0, #0
    c7cc:	d049      	beq.n	c862 <uwb_rng_init+0xbe>
    return (dpl_error_t)os_sem_init(&sem->sem, tokens);
    c7ce:	2101      	movs	r1, #1
    c7d0:	f104 0050 	add.w	r0, r4, #80	; 0x50
    c7d4:	f7fd fb52 	bl	9e7c <os_sem_init>
    assert(err == DPL_OK);
    c7d8:	2800      	cmp	r0, #0
    c7da:	d148      	bne.n	c86e <uwb_rng_init+0xca>
    if (config != NULL ) {
    c7dc:	b11d      	cbz	r5, c7e6 <uwb_rng_init+0x42>
        uwb_rng_config(rng, config);
    c7de:	4629      	mov	r1, r5
    c7e0:	4620      	mov	r0, r4
    c7e2:	f7ff ffc8 	bl	c776 <uwb_rng_config>
    rng->control = (uwb_rng_control_t){
    c7e6:	2300      	movs	r3, #0
    c7e8:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
    rng->idx = 0xFFFF;
    c7ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c7f0:	f8a4 3076 	strh.w	r3, [r4, #118]	; 0x76
    rng->status.initialized = 1;
    c7f4:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
    c7f8:	f043 0302 	orr.w	r3, r3, #2
    c7fc:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        int rc = stats_init(
    c800:	f104 0508 	add.w	r5, r4, #8
    c804:	220c      	movs	r2, #12
    c806:	9200      	str	r2, [sp, #0]
    c808:	4b1f      	ldr	r3, [pc, #124]	; (c888 <uwb_rng_init+0xe4>)
    c80a:	2104      	movs	r1, #4
    c80c:	4628      	mov	r0, r5
    c80e:	f004 fb83 	bl	10f18 <stats_init>
    c812:	4606      	mov	r6, r0
        rc |= stats_register("rng", STATS_HDR(rng->stat));
    c814:	4629      	mov	r1, r5
    c816:	481d      	ldr	r0, [pc, #116]	; (c88c <uwb_rng_init+0xe8>)
    c818:	f004 fc08 	bl	1102c <stats_register>
        assert(rc == 0);
    c81c:	ea56 0300 	orrs.w	r3, r6, r0
    c820:	d12b      	bne.n	c87a <uwb_rng_init+0xd6>
}
    c822:	4620      	mov	r0, r4
    c824:	b003      	add	sp, #12
    c826:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert(dev);
    c828:	2300      	movs	r3, #0
    c82a:	461a      	mov	r2, r3
    c82c:	4619      	mov	r1, r3
    c82e:	4618      	mov	r0, r3
    c830:	f7fc fc0c 	bl	904c <__assert_func>
        rng = (struct uwb_rng_instance *) calloc(1, sizeof(*rng) + nframes * sizeof(twr_frame_t *));
    c834:	f107 0128 	add.w	r1, r7, #40	; 0x28
    c838:	0089      	lsls	r1, r1, #2
    c83a:	2001      	movs	r0, #1
    c83c:	f000 ff9f 	bl	d77e <calloc>
        assert(rng);
    c840:	4604      	mov	r4, r0
    c842:	b140      	cbz	r0, c856 <uwb_rng_init+0xb2>
        rng->status.selfmalloc = 1;
    c844:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
    c848:	f043 0301 	orr.w	r3, r3, #1
    c84c:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
        rng->nframes = nframes;
    c850:	f8a0 707a 	strh.w	r7, [r0, #122]	; 0x7a
    c854:	e7b3      	b.n	c7be <uwb_rng_init+0x1a>
        assert(rng);
    c856:	2300      	movs	r3, #0
    c858:	461a      	mov	r2, r3
    c85a:	4619      	mov	r1, r3
    c85c:	4618      	mov	r0, r3
    c85e:	f7fc fbf5 	bl	904c <__assert_func>
    assert(rng->ccp_inst);
    c862:	2300      	movs	r3, #0
    c864:	461a      	mov	r2, r3
    c866:	4619      	mov	r1, r3
    c868:	4618      	mov	r0, r3
    c86a:	f7fc fbef 	bl	904c <__assert_func>
    assert(err == DPL_OK);
    c86e:	2300      	movs	r3, #0
    c870:	461a      	mov	r2, r3
    c872:	4619      	mov	r1, r3
    c874:	4618      	mov	r0, r3
    c876:	f7fc fbe9 	bl	904c <__assert_func>
        assert(rc == 0);
    c87a:	2300      	movs	r3, #0
    c87c:	461a      	mov	r2, r3
    c87e:	4619      	mov	r1, r3
    c880:	4618      	mov	r0, r3
    c882:	f7fc fbe3 	bl	904c <__assert_func>
    c886:	bf00      	nop
    c888:	00023150 	.word	0x00023150
    c88c:	000230d4 	.word	0x000230d4

0000c890 <uwb_rng_append_config>:
{
    c890:	b508      	push	{r3, lr}
    assert(rng);
    c892:	b120      	cbz	r0, c89e <uwb_rng_append_config+0xe>
    if(!(SLIST_EMPTY(&rng->rng_configs))) {
    c894:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    c898:	b17b      	cbz	r3, c8ba <uwb_rng_append_config+0x2a>
        struct rng_config_list * prev_cfgs = NULL;
    c89a:	2200      	movs	r2, #0
    c89c:	e007      	b.n	c8ae <uwb_rng_append_config+0x1e>
    assert(rng);
    c89e:	2300      	movs	r3, #0
    c8a0:	461a      	mov	r2, r3
    c8a2:	4619      	mov	r1, r3
    c8a4:	4618      	mov	r0, r3
    c8a6:	f7fc fbd1 	bl	904c <__assert_func>
            prev_cfgs = cur_cfgs;
    c8aa:	461a      	mov	r2, r3
        SLIST_FOREACH(cur_cfgs, &rng->rng_configs, next){
    c8ac:	68db      	ldr	r3, [r3, #12]
    c8ae:	2b00      	cmp	r3, #0
    c8b0:	d1fb      	bne.n	c8aa <uwb_rng_append_config+0x1a>
        SLIST_INSERT_AFTER(prev_cfgs, cfgs, next);
    c8b2:	68d3      	ldr	r3, [r2, #12]
    c8b4:	60cb      	str	r3, [r1, #12]
    c8b6:	60d1      	str	r1, [r2, #12]
}
    c8b8:	bd08      	pop	{r3, pc}
        SLIST_INSERT_HEAD(&rng->rng_configs, cfgs, next);
    c8ba:	60cb      	str	r3, [r1, #12]
    c8bc:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
}
    c8c0:	e7fa      	b.n	c8b8 <uwb_rng_append_config+0x28>

0000c8c2 <uwb_rng_remove_config>:
{
    c8c2:	b508      	push	{r3, lr}
    assert(rng);
    c8c4:	b148      	cbz	r0, c8da <uwb_rng_remove_config+0x18>
    c8c6:	4684      	mov	ip, r0
    SLIST_FOREACH(cfgs, &rng->rng_configs, next){
    c8c8:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
    c8cc:	4603      	mov	r3, r0
    c8ce:	b193      	cbz	r3, c8f6 <uwb_rng_remove_config+0x34>
        if(cfgs->rng_code == code){
    c8d0:	881a      	ldrh	r2, [r3, #0]
    c8d2:	428a      	cmp	r2, r1
    c8d4:	d007      	beq.n	c8e6 <uwb_rng_remove_config+0x24>
    SLIST_FOREACH(cfgs, &rng->rng_configs, next){
    c8d6:	68db      	ldr	r3, [r3, #12]
    c8d8:	e7f9      	b.n	c8ce <uwb_rng_remove_config+0xc>
    assert(rng);
    c8da:	2300      	movs	r3, #0
    c8dc:	461a      	mov	r2, r3
    c8de:	4619      	mov	r1, r3
    c8e0:	4618      	mov	r0, r3
    c8e2:	f7fc fbb3 	bl	904c <__assert_func>
            SLIST_REMOVE(&rng->rng_configs, cfgs, rng_config_list, next);
    c8e6:	4283      	cmp	r3, r0
    c8e8:	d006      	beq.n	c8f8 <uwb_rng_remove_config+0x36>
    c8ea:	4602      	mov	r2, r0
    c8ec:	68c0      	ldr	r0, [r0, #12]
    c8ee:	4298      	cmp	r0, r3
    c8f0:	d1fb      	bne.n	c8ea <uwb_rng_remove_config+0x28>
    c8f2:	68c3      	ldr	r3, [r0, #12]
    c8f4:	60d3      	str	r3, [r2, #12]
}
    c8f6:	bd08      	pop	{r3, pc}
            SLIST_REMOVE(&rng->rng_configs, cfgs, rng_config_list, next);
    c8f8:	68c3      	ldr	r3, [r0, #12]
    c8fa:	f8cc 3098 	str.w	r3, [ip, #152]	; 0x98
    c8fe:	e7fa      	b.n	c8f6 <uwb_rng_remove_config+0x34>

0000c900 <uwb_rng_calc_rel_tx>:
{
    c900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c904:	4605      	mov	r5, r0
    c906:	460c      	mov	r4, r1
    c908:	4690      	mov	r8, r2
    c90a:	9f06      	ldr	r7, [sp, #24]
    c90c:	9e07      	ldr	r6, [sp, #28]
    uint16_t data_duration = uwb_usecs_to_dwt_usecs(uwb_phy_data_duration(rng->dev_inst, rx_data_len));
    c90e:	6800      	ldr	r0, [r0, #0]
    return (dev->uw_funcs->uf_phy_data_duration(dev, nlen));
    c910:	6a43      	ldr	r3, [r0, #36]	; 0x24
    c912:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    c916:	f8bd 1020 	ldrh.w	r1, [sp, #32]
    c91a:	4798      	blx	r3
    c91c:	f014 fc74 	bl	21208 <__aeabi_i2d>
    c920:	a315      	add	r3, pc, #84	; (adr r3, c978 <uwb_rng_calc_rel_tx+0x78>)
    c922:	e9d3 2300 	ldrd	r2, r3, [r3]
    c926:	f014 fe03 	bl	21530 <__aeabi_ddiv>
    c92a:	f014 ffaf 	bl	2188c <__aeabi_d2uiz>
    c92e:	b283      	uxth	r3, r0
    ret->response_tx_delay = ts + (((uint64_t) cfg->tx_holdoff_delay + rng->frame_shr_duration + data_duration) << 16);
    c930:	f8d8 1004 	ldr.w	r1, [r8, #4]
    c934:	2200      	movs	r2, #0
    c936:	f8b5 0074 	ldrh.w	r0, [r5, #116]	; 0x74
    c93a:	1809      	adds	r1, r1, r0
    c93c:	4152      	adcs	r2, r2
    c93e:	185b      	adds	r3, r3, r1
    c940:	f142 0200 	adc.w	r2, r2, #0
    c944:	0412      	lsls	r2, r2, #16
    c946:	ea42 4213 	orr.w	r2, r2, r3, lsr #16
    c94a:	041b      	lsls	r3, r3, #16
    c94c:	19db      	adds	r3, r3, r7
    c94e:	eb42 0206 	adc.w	r2, r2, r6
    c952:	6023      	str	r3, [r4, #0]
    c954:	6062      	str	r2, [r4, #4]
    ret->response_timestamp = (ret->response_tx_delay & 0xFFFFFFFE00UL) + rng->dev_inst->tx_antenna_delay;
    c956:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    c95a:	f023 0301 	bic.w	r3, r3, #1
    c95e:	f002 02ff 	and.w	r2, r2, #255	; 0xff
    c962:	6829      	ldr	r1, [r5, #0]
    c964:	f8b1 14ce 	ldrh.w	r1, [r1, #1230]	; 0x4ce
    c968:	185b      	adds	r3, r3, r1
    c96a:	f142 0200 	adc.w	r2, r2, #0
    c96e:	60a3      	str	r3, [r4, #8]
    c970:	60e2      	str	r2, [r4, #12]
}
    c972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c976:	bf00      	nop
    c978:	90690691 	.word	0x90690691
    c97c:	3ff06906 	.word	0x3ff06906

0000c980 <uwb_rng_clear_twr_data>:
    s->spherical.array[0] = DPL_FLOAT64_NAN();
    c980:	2200      	movs	r2, #0
    c982:	4b07      	ldr	r3, [pc, #28]	; (c9a0 <uwb_rng_clear_twr_data+0x20>)
    c984:	e9c0 2300 	strd	r2, r3, [r0]
    s->spherical.array[1] = DPL_FLOAT64_NAN();
    c988:	e9c0 2302 	strd	r2, r3, [r0, #8]
    s->spherical.array[2] = DPL_FLOAT64_NAN();
    c98c:	e9c0 2304 	strd	r2, r3, [r0, #16]
    s->rssi = DPL_FLOAT32_NAN();
    c990:	4b04      	ldr	r3, [pc, #16]	; (c9a4 <uwb_rng_clear_twr_data+0x24>)
    c992:	6483      	str	r3, [r0, #72]	; 0x48
    s->fppl = DPL_FLOAT32_NAN();
    c994:	64c3      	str	r3, [r0, #76]	; 0x4c
    s->pdoa = DPL_FLOAT32_NAN();
    c996:	6503      	str	r3, [r0, #80]	; 0x50
    s->flags = (struct _rng_frame_flags){0};
    c998:	2300      	movs	r3, #0
    c99a:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
}
    c99e:	4770      	bx	lr
    c9a0:	7ff80000 	.word	0x7ff80000
    c9a4:	7fc00000 	.word	0x7fc00000

0000c9a8 <rx_complete_cb>:
{
    c9a8:	b570      	push	{r4, r5, r6, lr}
    c9aa:	4604      	mov	r4, r0
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
    c9ac:	684d      	ldr	r5, [r1, #4]
    if (inst->fctrl != FCNTL_IEEE_RANGE_16 &&
    c9ae:	f8b0 34e0 	ldrh.w	r3, [r0, #1248]	; 0x4e0
    c9b2:	f648 0241 	movw	r2, #34881	; 0x8841
    c9b6:	4293      	cmp	r3, r2
    c9b8:	d012      	beq.n	c9e0 <rx_complete_cb+0x38>
    c9ba:	f648 0261 	movw	r2, #34913	; 0x8861
    c9be:	4293      	cmp	r3, r2
    c9c0:	d00e      	beq.n	c9e0 <rx_complete_cb+0x38>
        inst->fctrl != (FCNTL_IEEE_RANGE_16|UWB_FCTRL_ACK_REQUESTED) &&
    c9c2:	2b02      	cmp	r3, #2
    c9c4:	d00c      	beq.n	c9e0 <rx_complete_cb+0x38>
    c9c6:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
        if(dpl_sem_get_count(&rng->sem) == 0) {
    c9ca:	b10b      	cbz	r3, c9d0 <rx_complete_cb+0x28>
        return false;
    c9cc:	2000      	movs	r0, #0
    c9ce:	e01b      	b.n	ca08 <rx_complete_cb+0x60>
            RNG_STATS_INC(rx_other_frame);
    c9d0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    c9d2:	3301      	adds	r3, #1
    c9d4:	632b      	str	r3, [r5, #48]	; 0x30
    return (dpl_error_t)os_sem_release(&sem->sem);
    c9d6:	f105 0050 	add.w	r0, r5, #80	; 0x50
    c9da:	f7fd fa57 	bl	9e8c <os_sem_release>
    c9de:	e7f5      	b.n	c9cc <rx_complete_cb+0x24>
    c9e0:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
    if(dpl_sem_get_count(&rng->sem) == 1){
    c9e4:	2b01      	cmp	r3, #1
    c9e6:	d010      	beq.n	ca0a <rx_complete_cb+0x62>
    if (inst->frame_len < sizeof(ieee_rng_request_frame_t))
    c9e8:	f8b4 34e2 	ldrh.w	r3, [r4, #1250]	; 0x4e2
    c9ec:	2b0a      	cmp	r3, #10
    c9ee:	d94e      	bls.n	ca8e <rx_complete_cb+0xe6>
    req_frame = (ieee_rng_request_frame_t * ) inst->rxbuf;
    c9f0:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
    rng->code = req_frame->code;
    c9f4:	f8b3 2009 	ldrh.w	r2, [r3, #9]
    c9f8:	b293      	uxth	r3, r2
    c9fa:	f8a5 204c 	strh.w	r2, [r5, #76]	; 0x4c
    switch(rng->code) {
    c9fe:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
    ca02:	2b19      	cmp	r3, #25
    ca04:	d906      	bls.n	ca14 <rx_complete_cb+0x6c>
            return false;
    ca06:	2000      	movs	r0, #0
}
    ca08:	bd70      	pop	{r4, r5, r6, pc}
        RNG_STATS_INC(rx_unsolicited);
    ca0a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    ca0c:	3301      	adds	r3, #1
    ca0e:	62eb      	str	r3, [r5, #44]	; 0x2c
        return false;
    ca10:	2000      	movs	r0, #0
    ca12:	e7f9      	b.n	ca08 <rx_complete_cb+0x60>
                twr_frame_t * frame = rng->frames[(rng->idx+1)%rng->nframes]; // speculative frame advance
    ca14:	f8b5 3076 	ldrh.w	r3, [r5, #118]	; 0x76
    ca18:	3301      	adds	r3, #1
    ca1a:	f8b5 207a 	ldrh.w	r2, [r5, #122]	; 0x7a
    ca1e:	fb93 f1f2 	sdiv	r1, r3, r2
    ca22:	fb02 3311 	mls	r3, r2, r1, r3
    ca26:	3326      	adds	r3, #38	; 0x26
    ca28:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    ca2c:	685e      	ldr	r6, [r3, #4]
                uwb_rng_clear_twr_data(&frame->remote);
    ca2e:	f106 0020 	add.w	r0, r6, #32
    ca32:	f7ff ffa5 	bl	c980 <uwb_rng_clear_twr_data>
                uwb_rng_clear_twr_data(&frame->local);
    ca36:	f106 0088 	add.w	r0, r6, #136	; 0x88
    ca3a:	f7ff ffa1 	bl	c980 <uwb_rng_clear_twr_data>
                if (inst->frame_len <= sizeof(frame->array))
    ca3e:	f8b4 24e2 	ldrh.w	r2, [r4, #1250]	; 0x4e2
    ca42:	2a88      	cmp	r2, #136	; 0x88
    ca44:	d901      	bls.n	ca4a <rx_complete_cb+0xa2>
    return false;
    ca46:	2000      	movs	r0, #0
    ca48:	e7de      	b.n	ca08 <rx_complete_cb+0x60>
                    memcpy(frame->array, inst->rxbuf, inst->frame_len);
    ca4a:	f8d4 14fc 	ldr.w	r1, [r4, #1276]	; 0x4fc
    ca4e:	4630      	mov	r0, r6
    ca50:	f000 ffca 	bl	d9e8 <memcpy>
                if (inst->config.rx.frameFilter == 0 && frame->dst_address != inst->my_short_address){
    ca54:	f8b4 351c 	ldrh.w	r3, [r4, #1308]	; 0x51c
    ca58:	b97b      	cbnz	r3, ca7a <rx_complete_cb+0xd2>
    ca5a:	f8b6 2005 	ldrh.w	r2, [r6, #5]
    ca5e:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
    ca62:	429a      	cmp	r2, r3
    ca64:	d009      	beq.n	ca7a <rx_complete_cb+0xd2>
    ca66:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
                    if(dpl_sem_get_count(&rng->sem) == 0){
    ca6a:	b10b      	cbz	r3, ca70 <rx_complete_cb+0xc8>
                    return true;
    ca6c:	2001      	movs	r0, #1
    ca6e:	e7cb      	b.n	ca08 <rx_complete_cb+0x60>
    ca70:	f105 0050 	add.w	r0, r5, #80	; 0x50
    ca74:	f7fd fa0a 	bl	9e8c <os_sem_release>
    ca78:	e7f8      	b.n	ca6c <rx_complete_cb+0xc4>
                    RNG_STATS_INC(rx_complete);
    ca7a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    ca7c:	3301      	adds	r3, #1
    ca7e:	62ab      	str	r3, [r5, #40]	; 0x28
                    rng->idx++;     // confirmed frame advance
    ca80:	f8b5 3076 	ldrh.w	r3, [r5, #118]	; 0x76
    ca84:	3301      	adds	r3, #1
    ca86:	f8a5 3076 	strh.w	r3, [r5, #118]	; 0x76
                    return false;   // Allow sub extensions to handle event
    ca8a:	2000      	movs	r0, #0
    ca8c:	e7bc      	b.n	ca08 <rx_complete_cb+0x60>
       return false;
    ca8e:	2000      	movs	r0, #0
    ca90:	e7ba      	b.n	ca08 <rx_complete_cb+0x60>
    ca92:	0000      	movs	r0, r0
    ca94:	0000      	movs	r0, r0
	...

0000ca98 <uwb_rng_listen>:
{
    ca98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ca9c:	4604      	mov	r4, r0
    ca9e:	460e      	mov	r6, r1
    caa0:	4690      	mov	r8, r2
    struct uwb_dev * inst = rng->dev_inst;
    caa2:	4605      	mov	r5, r0
    caa4:	f855 7b50 	ldr.w	r7, [r5], #80
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    caa8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    caac:	4628      	mov	r0, r5
    caae:	f7fd fa1f 	bl	9ef0 <os_sem_pend>
    if (err != DPL_OK) {
    cab2:	2800      	cmp	r0, #0
    cab4:	d133      	bne.n	cb1e <uwb_rng_listen+0x86>
    uwb_set_rxauto_disable(rng->dev_inst, true);
    cab6:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_set_rxauto_disable(dev, disable));
    cab8:	6a43      	ldr	r3, [r0, #36]	; 0x24
    caba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    cabc:	2101      	movs	r1, #1
    cabe:	4798      	blx	r3
    rng->frame_shr_duration = uwb_usecs_to_dwt_usecs(uwb_phy_SHR_duration(rng->dev_inst));
    cac0:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_phy_SHR_duration(dev));
    cac2:	6a43      	ldr	r3, [r0, #36]	; 0x24
    cac4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    cac8:	4798      	blx	r3
    caca:	f014 fb9d 	bl	21208 <__aeabi_i2d>
    cace:	a326      	add	r3, pc, #152	; (adr r3, cb68 <uwb_rng_listen+0xd0>)
    cad0:	e9d3 2300 	ldrd	r2, r3, [r3]
    cad4:	f014 fd2c 	bl	21530 <__aeabi_ddiv>
    cad8:	f014 fed8 	bl	2188c <__aeabi_d2uiz>
    cadc:	f8a4 0074 	strh.w	r0, [r4, #116]	; 0x74
    if (rng->control.delay_start_enabled)
    cae0:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
    cae4:	f013 0f01 	tst.w	r3, #1
    cae8:	d005      	beq.n	caf6 <uwb_rng_listen+0x5e>
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
    caea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    caec:	6b59      	ldr	r1, [r3, #52]	; 0x34
    caee:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
    caf2:	4638      	mov	r0, r7
    caf4:	4788      	blx	r1
    if (timeout > -1) {
    caf6:	2e00      	cmp	r6, #0
    caf8:	db04      	blt.n	cb04 <uwb_rng_listen+0x6c>
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
    cafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cafc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    cafe:	4631      	mov	r1, r6
    cb00:	4638      	mov	r0, r7
    cb02:	4798      	blx	r3
    RNG_STATS_INC(rng_listen);
    cb04:	6a23      	ldr	r3, [r4, #32]
    cb06:	3301      	adds	r3, #1
    cb08:	6223      	str	r3, [r4, #32]
    if(uwb_start_rx(rng->dev_inst).start_rx_error){
    cb0a:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_start_rx(dev));
    cb0c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    cb0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    cb10:	4798      	blx	r3
    cb12:	f010 0f08 	tst.w	r0, #8
    cb16:	d107      	bne.n	cb28 <uwb_rng_listen+0x90>
    if (mode == UWB_BLOCKING){
    cb18:	f1b8 0f00 	cmp.w	r8, #0
    cb1c:	d012      	beq.n	cb44 <uwb_rng_listen+0xac>
    return rng->dev_inst->status;
    cb1e:	6823      	ldr	r3, [r4, #0]
}
    cb20:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    cb24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (dpl_error_t)os_sem_release(&sem->sem);
    cb28:	4628      	mov	r0, r5
    cb2a:	f7fd f9af 	bl	9e8c <os_sem_release>
        assert(err == DPL_OK);
    cb2e:	b918      	cbnz	r0, cb38 <uwb_rng_listen+0xa0>
        RNG_STATS_INC(rx_error);
    cb30:	6b63      	ldr	r3, [r4, #52]	; 0x34
    cb32:	3301      	adds	r3, #1
    cb34:	6363      	str	r3, [r4, #52]	; 0x34
    cb36:	e7ef      	b.n	cb18 <uwb_rng_listen+0x80>
        assert(err == DPL_OK);
    cb38:	2300      	movs	r3, #0
    cb3a:	461a      	mov	r2, r3
    cb3c:	4619      	mov	r1, r3
    cb3e:	4618      	mov	r0, r3
    cb40:	f7fc fa84 	bl	904c <__assert_func>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    cb44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    cb48:	4628      	mov	r0, r5
    cb4a:	f7fd f9d1 	bl	9ef0 <os_sem_pend>
        if (err != DPL_OK) {
    cb4e:	2800      	cmp	r0, #0
    cb50:	d1e5      	bne.n	cb1e <uwb_rng_listen+0x86>
    return (dpl_error_t)os_sem_release(&sem->sem);
    cb52:	4628      	mov	r0, r5
    cb54:	f7fd f99a 	bl	9e8c <os_sem_release>
        assert(err == DPL_OK);
    cb58:	2800      	cmp	r0, #0
    cb5a:	d0e0      	beq.n	cb1e <uwb_rng_listen+0x86>
    cb5c:	2300      	movs	r3, #0
    cb5e:	461a      	mov	r2, r3
    cb60:	4619      	mov	r1, r3
    cb62:	4618      	mov	r0, r3
    cb64:	f7fc fa72 	bl	904c <__assert_func>
    cb68:	90690691 	.word	0x90690691
    cb6c:	3ff06906 	.word	0x3ff06906

0000cb70 <uwb_rng_listen_delay_start>:
{
    cb70:	b5d0      	push	{r4, r6, r7, lr}
    cb72:	4604      	mov	r4, r0
    cb74:	4616      	mov	r6, r2
    cb76:	461f      	mov	r7, r3
    rng->control.delay_start_enabled = 1;
    cb78:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
    cb7c:	f043 0301 	orr.w	r3, r3, #1
    cb80:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    rng->delay = dx_time;
    cb84:	e9c0 6716 	strd	r6, r7, [r0, #88]	; 0x58
    uwb_rng_listen(rng, timeout, mode);
    cb88:	f89d 2014 	ldrb.w	r2, [sp, #20]
    cb8c:	9904      	ldr	r1, [sp, #16]
    cb8e:	f7ff ff83 	bl	ca98 <uwb_rng_listen>
    rng->control.delay_start_enabled = 0;
    cb92:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
    cb96:	f36f 0300 	bfc	r3, #0, #1
    cb9a:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    return rng->dev_inst->status;
    cb9e:	6823      	ldr	r3, [r4, #0]
}
    cba0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    cba4:	bdd0      	pop	{r4, r6, r7, pc}
	...

0000cba8 <uwb_rng_twr_to_tof>:
{
    cba8:	b5f0      	push	{r4, r5, r6, r7, lr}
    cbaa:	b089      	sub	sp, #36	; 0x24
    twr_frame_t * first_frame = rng->frames[(uint16_t)(idx-1)%rng->nframes];
    cbac:	1e4b      	subs	r3, r1, #1
    cbae:	b29b      	uxth	r3, r3
    cbb0:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
    cbb4:	fbb3 f4f2 	udiv	r4, r3, r2
    cbb8:	fb02 3314 	mls	r3, r2, r4, r3
    cbbc:	b29b      	uxth	r3, r3
    cbbe:	3326      	adds	r3, #38	; 0x26
    cbc0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    cbc4:	685d      	ldr	r5, [r3, #4]
    twr_frame_t * frame = rng->frames[(idx)%rng->nframes];
    cbc6:	fbb1 f3f2 	udiv	r3, r1, r2
    cbca:	fb02 1113 	mls	r1, r2, r3, r1
    cbce:	b289      	uxth	r1, r1
    cbd0:	3126      	adds	r1, #38	; 0x26
    cbd2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    cbd6:	6844      	ldr	r4, [r0, #4]
    switch(frame->code) {
    cbd8:	f8b4 3009 	ldrh.w	r3, [r4, #9]
    cbdc:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
    cbe0:	d321      	bcc.n	cc26 <uwb_rng_twr_to_tof+0x7e>
    cbe2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
    cbe6:	b29b      	uxth	r3, r3
    cbe8:	2b09      	cmp	r3, #9
    cbea:	d833      	bhi.n	cc54 <uwb_rng_twr_to_tof+0xac>
                              first_frame->transmission_timestamp, first_frame->reception_timestamp,
    cbec:	f8d5 200f 	ldr.w	r2, [r5, #15]
    cbf0:	f8d5 600b 	ldr.w	r6, [r5, #11]
                              frame->transmission_timestamp, frame->reception_timestamp);
    cbf4:	f8d4 700f 	ldr.w	r7, [r4, #15]
    cbf8:	f8d4 c00b 	ldr.w	ip, [r4, #11]
            ToF = calc_tof_ds(first_frame->response_timestamp, first_frame->request_timestamp,
    cbfc:	2300      	movs	r3, #0
    cbfe:	f8d5 1013 	ldr.w	r1, [r5, #19]
    cc02:	f8d5 0017 	ldr.w	r0, [r5, #23]
    cc06:	f8cd c018 	str.w	ip, [sp, #24]
    cc0a:	9307      	str	r3, [sp, #28]
    cc0c:	9704      	str	r7, [sp, #16]
    cc0e:	9305      	str	r3, [sp, #20]
    cc10:	f8d4 5013 	ldr.w	r5, [r4, #19]
    cc14:	9503      	str	r5, [sp, #12]
    cc16:	f8d4 4017 	ldr.w	r4, [r4, #23]
    cc1a:	9402      	str	r4, [sp, #8]
    cc1c:	9600      	str	r6, [sp, #0]
    cc1e:	9301      	str	r3, [sp, #4]
    cc20:	f00c fa56 	bl	190d0 <calc_tof_ds>
            break;
    cc24:	e004      	b.n	cc30 <uwb_rng_twr_to_tof+0x88>
    switch(frame->code) {
    cc26:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
    cc2a:	d203      	bcs.n	cc34 <uwb_rng_twr_to_tof+0x8c>
    cc2c:	ed9f 0b0c 	vldr	d0, [pc, #48]	; cc60 <uwb_rng_twr_to_tof+0xb8>
}
    cc30:	b009      	add	sp, #36	; 0x24
    cc32:	bdf0      	pop	{r4, r5, r6, r7, pc}
                              frame->transmission_timestamp, frame->reception_timestamp, skew);
    cc34:	f8d4 200f 	ldr.w	r2, [r4, #15]
    cc38:	f8d4 500b 	ldr.w	r5, [r4, #11]
            ToF = calc_tof_ss(frame->response_timestamp, frame->request_timestamp,
    cc3c:	2300      	movs	r3, #0
    cc3e:	f8d4 1013 	ldr.w	r1, [r4, #19]
    cc42:	f8d4 0017 	ldr.w	r0, [r4, #23]
    cc46:	9500      	str	r5, [sp, #0]
    cc48:	9301      	str	r3, [sp, #4]
    cc4a:	ed9f 0b05 	vldr	d0, [pc, #20]	; cc60 <uwb_rng_twr_to_tof+0xb8>
    cc4e:	f00c fa0f 	bl	19070 <calc_tof_ss>
            break;
    cc52:	e7ed      	b.n	cc30 <uwb_rng_twr_to_tof+0x88>
    switch(frame->code) {
    cc54:	ed9f 0b02 	vldr	d0, [pc, #8]	; cc60 <uwb_rng_twr_to_tof+0xb8>
    return ToF;
    cc58:	e7ea      	b.n	cc30 <uwb_rng_twr_to_tof+0x88>
    cc5a:	bf00      	nop
    cc5c:	f3af 8000 	nop.w
	...

0000cc68 <tx_final_cb>:
 *
 * @return void
 */
static bool
tx_final_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
    cc68:	b570      	push	{r4, r5, r6, lr}
    cc6a:	4605      	mov	r5, r0
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
    cc6c:	684e      	ldr	r6, [r1, #4]
    twr_frame_t * frame = rng->frames[(rng->idx)%rng->nframes];
    cc6e:	f8b6 3076 	ldrh.w	r3, [r6, #118]	; 0x76
    cc72:	f8b6 207a 	ldrh.w	r2, [r6, #122]	; 0x7a
    cc76:	fbb3 f1f2 	udiv	r1, r3, r2
    cc7a:	fb02 3311 	mls	r3, r2, r1, r3
    cc7e:	b29b      	uxth	r3, r3
    cc80:	3326      	adds	r3, #38	; 0x26
    cc82:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    cc86:	685c      	ldr	r4, [r3, #4]

    frame->remote.cartesian.x = DPL_FLOAT64_INIT(MYNEWT_VAL(LOCAL_COORDINATE_X));
    cc88:	2200      	movs	r2, #0
    cc8a:	2300      	movs	r3, #0
    cc8c:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
    frame->remote.cartesian.y = DPL_FLOAT64_INIT(MYNEWT_VAL(LOCAL_COORDINATE_Y));
    cc90:	e9c4 2316 	strd	r2, r3, [r4, #88]	; 0x58
    frame->remote.cartesian.z = DPL_FLOAT64_INIT(MYNEWT_VAL(LOCAL_COORDINATE_Z));
    cc94:	e9c4 2318 	strd	r2, r3, [r4, #96]	; 0x60

    if (inst->capabilities.single_receiver_pdoa) {
    cc98:	f890 34b2 	ldrb.w	r3, [r0, #1202]	; 0x4b2
    cc9c:	f013 0f02 	tst.w	r3, #2
    cca0:	d007      	beq.n	ccb2 <tx_final_cb+0x4a>
    return (dev->uw_funcs->uf_calc_pdoa(dev, diag));
    cca2:	6a43      	ldr	r3, [r0, #36]	; 0x24
    cca4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    cca8:	f8d0 14f8 	ldr.w	r1, [r0, #1272]	; 0x4f8
    ccac:	4798      	blx	r3
        frame->remote.pdoa = uwb_calc_pdoa(inst, inst->rxdiag);
    ccae:	ed84 0a1c 	vstr	s0, [r4, #112]	; 0x70
    }
    if (inst->capabilities.sts) {
    ccb2:	f895 34b2 	ldrb.w	r3, [r5, #1202]	; 0x4b2
    ccb6:	f013 0f01 	tst.w	r3, #1
    ccba:	d017      	beq.n	ccec <tx_final_cb+0x84>
        frame->remote.flags.has_sts = inst->config.rx.stsMode != DWT_STS_MODE_OFF;
    ccbc:	f895 3518 	ldrb.w	r3, [r5, #1304]	; 0x518
    ccc0:	3b00      	subs	r3, #0
    ccc2:	bf18      	it	ne
    ccc4:	2301      	movne	r3, #1
    ccc6:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
    ccca:	f363 0200 	bfi	r2, r3, #0, #1
    ccce:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
        frame->local.flags.has_valid_sts = !(inst->status.sts_ts_error || inst->status.sts_pream_error);
    ccd2:	f895 350b 	ldrb.w	r3, [r5, #1291]	; 0x50b
    ccd6:	f013 0f30 	tst.w	r3, #48	; 0x30
    ccda:	bf0c      	ite	eq
    ccdc:	2201      	moveq	r2, #1
    ccde:	2200      	movne	r2, #0
    cce0:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
    cce4:	f362 0341 	bfi	r3, r2, #1, #1
    cce8:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
    return (dev->uw_funcs->uf_calc_rssi(dev, diag));
    ccec:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    ccee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    ccf2:	f8d5 14f8 	ldr.w	r1, [r5, #1272]	; 0x4f8
    ccf6:	4628      	mov	r0, r5
    ccf8:	4798      	blx	r3
    }
    frame->remote.rssi = uwb_calc_rssi(inst, inst->rxdiag);
    ccfa:	ed84 0a1a 	vstr	s0, [r4, #104]	; 0x68
    return (dev->uw_funcs->uf_calc_fppl(dev, diag));
    ccfe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    cd00:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
    cd04:	f8d5 14f8 	ldr.w	r1, [r5, #1272]	; 0x4f8
    cd08:	4628      	mov	r0, r5
    cd0a:	4798      	blx	r3
    frame->remote.fppl = uwb_calc_fppl(inst, inst->rxdiag);
    cd0c:	ed84 0a1b 	vstr	s0, [r4, #108]	; 0x6c

    if (frame->code != UWB_DATA_CODE_SS_TWR_EXT_T1) {
    cd10:	f8b4 2009 	ldrh.w	r2, [r4, #9]
    cd14:	f240 1315 	movw	r3, #277	; 0x115
    cd18:	429a      	cmp	r2, r3
    cd1a:	d125      	bne.n	cd68 <tx_final_cb+0x100>
#else
        frame->remote.spherical.range = uwb_rng_tof_to_meters(uwb_rng_twr_to_tof(rng,rng->idx));
#endif
        frame->remote.spherical_variance.range = DPL_FLOAT64_I32_TO_F64(MYNEWT_VAL(RANGE_VARIANCE));
    } else {
        frame->remote.spherical.range = DPL_FLOAT64_NAN();
    cd1c:	2200      	movs	r2, #0
    cd1e:	4b1e      	ldr	r3, [pc, #120]	; (cd98 <tx_final_cb+0x130>)
    cd20:	e9c4 2308 	strd	r2, r3, [r4, #32]
    }
    frame->remote.spherical_variance.azimuth = DPL_FLOAT64_INIT(-1.0);
    cd24:	2200      	movs	r2, #0
    cd26:	4b1d      	ldr	r3, [pc, #116]	; (cd9c <tx_final_cb+0x134>)
    cd28:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
    frame->remote.spherical_variance.zenith = DPL_FLOAT64_INIT(-1.0);
    cd2c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
    if (!DPL_FLOAT32_ISNAN(frame->remote.pdoa)) {
    cd30:	ed94 0a1c 	vldr	s0, [r4, #112]	; 0x70
    cd34:	eeb4 0a40 	vcmp.f32	s0, s0
    cd38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cd3c:	d612      	bvs.n	cd64 <tx_final_cb+0xfc>
        frame->remote.spherical.azimuth = DPL_FLOAT64_FROM_F32(uwb_calc_aoa(
    cd3e:	f505 639a 	add.w	r3, r5, #1232	; 0x4d0
    cd42:	edd3 0a00 	vldr	s1, [r3]
    cd46:	f895 050c 	ldrb.w	r0, [r5, #1292]	; 0x50c
    cd4a:	f7fb ffd1 	bl	8cf0 <uwb_calc_aoa>
    cd4e:	ee10 0a10 	vmov	r0, s0
    cd52:	f014 fa6b 	bl	2122c <__aeabi_f2d>
    cd56:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
            frame->remote.pdoa, inst->config.channel, inst->rx_ant_separation)
            );
        frame->remote.spherical_variance.azimuth = DPL_FLOAT64_INIT(MYNEWT_VAL(AZIMUTH_VARIANCE));
    cd5a:	a30b      	add	r3, pc, #44	; (adr r3, cd88 <tx_final_cb+0x120>)
    cd5c:	e9d3 2300 	ldrd	r2, r3, [r3]
    cd60:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
    }

    return true;
}
    cd64:	2001      	movs	r0, #1
    cd66:	bd70      	pop	{r4, r5, r6, pc}
        frame->remote.spherical.range = uwb_rng_tof_to_meters(uwb_rng_twr_to_tof(rng,rng->idx));
    cd68:	f8b6 1076 	ldrh.w	r1, [r6, #118]	; 0x76
    cd6c:	4630      	mov	r0, r6
    cd6e:	f7ff ff1b 	bl	cba8 <uwb_rng_twr_to_tof>
    cd72:	f00c f959 	bl	19028 <uwb_rng_tof_to_meters>
    cd76:	ed84 0b08 	vstr	d0, [r4, #32]
        frame->remote.spherical_variance.range = DPL_FLOAT64_I32_TO_F64(MYNEWT_VAL(RANGE_VARIANCE));
    cd7a:	a305      	add	r3, pc, #20	; (adr r3, cd90 <tx_final_cb+0x128>)
    cd7c:	e9d3 2300 	ldrd	r2, r3, [r3]
    cd80:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    cd84:	e7ce      	b.n	cd24 <tx_final_cb+0xbc>
    cd86:	bf00      	nop
    cd88:	00000000 	.word	0x00000000
    cd8c:	3f9dcc64 	.word	0x3f9dcc64
    cd90:	00000000 	.word	0x00000000
    cd94:	3f41d718 	.word	0x3f41d718
    cd98:	7ff80000 	.word	0x7ff80000
    cd9c:	bff00000 	.word	0xbff00000

0000cda0 <rng_issue_complete>:
{
    cda0:	b538      	push	{r3, r4, r5, lr}
    cda2:	4605      	mov	r5, r0
    if(!(SLIST_EMPTY(&inst->interface_cbs))) {
    cda4:	f8d0 4530 	ldr.w	r4, [r0, #1328]	; 0x530
    cda8:	b90c      	cbnz	r4, cdae <rng_issue_complete+0xe>
}
    cdaa:	bd38      	pop	{r3, r4, r5, pc}
        SLIST_FOREACH(cbs_i, &inst->interface_cbs, next) {
    cdac:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    cdae:	2c00      	cmp	r4, #0
    cdb0:	d0fb      	beq.n	cdaa <rng_issue_complete+0xa>
            if (cbs_i != NULL && cbs_i->complete_cb)
    cdb2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    cdb4:	2b00      	cmp	r3, #0
    cdb6:	d0f9      	beq.n	cdac <rng_issue_complete+0xc>
                if(cbs_i->complete_cb(inst, cbs_i)) continue;
    cdb8:	4621      	mov	r1, r4
    cdba:	4628      	mov	r0, r5
    cdbc:	4798      	blx	r3
    cdbe:	e7f5      	b.n	cdac <rng_issue_complete+0xc>

0000cdc0 <tx_complete_cb>:
{
    cdc0:	b538      	push	{r3, r4, r5, lr}
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
    cdc2:	684d      	ldr	r5, [r1, #4]
    if (inst->fctrl != FCNTL_IEEE_RANGE_16)
    cdc4:	f8b0 24e0 	ldrh.w	r2, [r0, #1248]	; 0x4e0
    cdc8:	f648 0341 	movw	r3, #34881	; 0x8841
    cdcc:	429a      	cmp	r2, r3
    cdce:	d122      	bne.n	ce16 <tx_complete_cb+0x56>
    cdd0:	4604      	mov	r4, r0
    cdd2:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
    if(dpl_sem_get_count(&rng->sem) == 1) {
    cdd6:	2b01      	cmp	r3, #1
    cdd8:	d01f      	beq.n	ce1a <tx_complete_cb+0x5a>
    switch(rng->code) {
    cdda:	f8b5 304c 	ldrh.w	r3, [r5, #76]	; 0x4c
    cdde:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
    cde2:	2b19      	cmp	r3, #25
    cde4:	d81b      	bhi.n	ce1e <tx_complete_cb+0x5e>
            RNG_STATS_INC(tx_complete);
    cde6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    cde8:	3301      	adds	r3, #1
    cdea:	626b      	str	r3, [r5, #36]	; 0x24
            if (rng->control.complete_after_tx) {
    cdec:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
    cdf0:	f013 0f02 	tst.w	r3, #2
    cdf4:	d107      	bne.n	ce06 <tx_complete_cb+0x46>
            rng->control.complete_after_tx = 0;
    cdf6:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
    cdfa:	f36f 0341 	bfc	r3, #1, #1
    cdfe:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
            return true;
    ce02:	2001      	movs	r0, #1
    ce04:	e008      	b.n	ce18 <tx_complete_cb+0x58>
    ce06:	f105 0050 	add.w	r0, r5, #80	; 0x50
    ce0a:	f7fd f83f 	bl	9e8c <os_sem_release>
                rng_issue_complete(inst);
    ce0e:	4620      	mov	r0, r4
    ce10:	f7ff ffc6 	bl	cda0 <rng_issue_complete>
    ce14:	e7ef      	b.n	cdf6 <tx_complete_cb+0x36>
        return false;
    ce16:	2000      	movs	r0, #0
}
    ce18:	bd38      	pop	{r3, r4, r5, pc}
        return false;
    ce1a:	2000      	movs	r0, #0
    ce1c:	e7fc      	b.n	ce18 <tx_complete_cb+0x58>
            return false;
    ce1e:	2000      	movs	r0, #0
    ce20:	e7fa      	b.n	ce18 <tx_complete_cb+0x58>
	...

0000ce24 <uwb_rng_pkg_init>:
 * @return void
 */

void
uwb_rng_pkg_init(void)
{
    ce24:	b570      	push	{r4, r5, r6, lr}
    int i;
    struct uwb_rng_instance *rng;
    struct uwb_dev *udev;
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    printf("{\"utime\": %"PRIu32",\"msg\": \"rng_pkg_init\"}\n",
    ce26:	f001 fa84 	bl	e332 <dpl_cputime_get32>
    ce2a:	4601      	mov	r1, r0
    ce2c:	4826      	ldr	r0, [pc, #152]	; (cec8 <uwb_rng_pkg_init+0xa4>)
    ce2e:	f001 f9fb 	bl	e228 <printf>
           dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
#endif

    for (i=0;i<ARRAY_SIZE(g_cbs);i++) {
    ce32:	2500      	movs	r5, #0
    ce34:	b105      	cbz	r5, ce38 <uwb_rng_pkg_init+0x14>
#if __KERNEL__
        rng_chrdev_create(udev->idx);
#endif
    }

}
    ce36:	bd70      	pop	{r4, r5, r6, pc}
        udev = uwb_dev_idx_lookup(i);
    ce38:	4628      	mov	r0, r5
    ce3a:	f7fb fe5d 	bl	8af8 <uwb_dev_idx_lookup>
        if (!udev) continue;
    ce3e:	4606      	mov	r6, r0
    ce40:	2800      	cmp	r0, #0
    ce42:	d03e      	beq.n	cec2 <uwb_rng_pkg_init+0x9e>
        g_cbs[i].inst_ptr = rng = uwb_rng_init(udev, &g_config, sizeof(g_twr_frames[i])/sizeof(g_twr_frames[i][0]));
    ce44:	2204      	movs	r2, #4
    ce46:	4921      	ldr	r1, [pc, #132]	; (cecc <uwb_rng_pkg_init+0xa8>)
    ce48:	f7ff fcac 	bl	c7a4 <uwb_rng_init>
    ce4c:	4604      	mov	r4, r0
    ce4e:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
    ce52:	4a1f      	ldr	r2, [pc, #124]	; (ced0 <uwb_rng_pkg_init+0xac>)
    ce54:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    ce58:	6058      	str	r0, [r3, #4]
        uwb_rng_set_frames(rng, g_twr_frames[i], sizeof(g_twr_frames[0])/sizeof(g_twr_frames[0][0]));
    ce5a:	ebc5 1005 	rsb	r0, r5, r5, lsl #4
    ce5e:	4b1d      	ldr	r3, [pc, #116]	; (ced4 <uwb_rng_pkg_init+0xb0>)
    ce60:	eb03 1080 	add.w	r0, r3, r0, lsl #6
    assert(nframes <= rng->nframes);
    ce64:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    ce68:	2b03      	cmp	r3, #3
    ce6a:	d901      	bls.n	ce70 <uwb_rng_pkg_init+0x4c>
    for (i = 0; i < nframes; i++)
    ce6c:	2300      	movs	r3, #0
    ce6e:	e010      	b.n	ce92 <uwb_rng_pkg_init+0x6e>
    assert(nframes <= rng->nframes);
    ce70:	2300      	movs	r3, #0
    ce72:	461a      	mov	r2, r3
    ce74:	4619      	mov	r1, r3
    ce76:	4618      	mov	r0, r3
    ce78:	f7fc f8e8 	bl	904c <__assert_func>
        rng->frames[i] = &twr[i];
    ce7c:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
    ce80:	eb00 1101 	add.w	r1, r0, r1, lsl #4
    ce84:	f103 0226 	add.w	r2, r3, #38	; 0x26
    ce88:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    ce8c:	6051      	str	r1, [r2, #4]
    for (i = 0; i < nframes; i++)
    ce8e:	3301      	adds	r3, #1
    ce90:	b29b      	uxth	r3, r3
    ce92:	2b03      	cmp	r3, #3
    ce94:	d9f2      	bls.n	ce7c <uwb_rng_pkg_init+0x58>
        uwb_mac_append_interface(udev, &g_cbs[i]);
    ce96:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
    ce9a:	490d      	ldr	r1, [pc, #52]	; (ced0 <uwb_rng_pkg_init+0xac>)
    ce9c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    cea0:	4630      	mov	r0, r6
    cea2:	f7fb fe59 	bl	8b58 <uwb_mac_append_interface>
    memset(ev, 0, sizeof(*ev));
    cea6:	2300      	movs	r3, #0
    cea8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    ceac:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    ceb0:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    ceb4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    ev->ev.ev_cb = (os_event_fn *)fn;
    ceb8:	4b07      	ldr	r3, [pc, #28]	; (ced8 <uwb_rng_pkg_init+0xb4>)
    ceba:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    ev->ev.ev_arg = arg;
    cebe:	f8c4 4090 	str.w	r4, [r4, #144]	; 0x90
    for (i=0;i<ARRAY_SIZE(g_cbs);i++) {
    cec2:	3501      	adds	r5, #1
    cec4:	e7b6      	b.n	ce34 <uwb_rng_pkg_init+0x10>
    cec6:	bf00      	nop
    cec8:	000230d8 	.word	0x000230d8
    cecc:	2000059c 	.word	0x2000059c
    ced0:	20000560 	.word	0x20000560
    ced4:	200034b8 	.word	0x200034b8
    ced8:	0000c5f1 	.word	0x0000c5f1

0000cedc <uwb_rng_pkg_init2>:
    for (i=0;i<ARRAY_SIZE(g_cbs);i++) {
        if (!g_cbs[i].inst_ptr) continue;
        uwbrng_sysfs_init((struct uwb_rng_instance *)g_cbs[i].inst_ptr);
    }
#endif
}
    cedc:	4770      	bx	lr
	...

0000cee0 <uwb_rng_pkg_down>:

int
uwb_rng_pkg_down(int reason)
{
    cee0:	b538      	push	{r3, r4, r5, lr}
    int i;
    struct uwb_rng_instance * rng;

    for (i=0;i<ARRAY_SIZE(g_cbs);i++) {
    cee2:	2400      	movs	r4, #0
    cee4:	b10c      	cbz	r4, ceea <uwb_rng_pkg_down+0xa>
        uwb_rng_free(g_cbs[i].inst_ptr);
        g_cbs[i].inst_ptr = 0;
    }

    return 0;
}
    cee6:	2000      	movs	r0, #0
    cee8:	bd38      	pop	{r3, r4, r5, pc}
        rng = (struct uwb_rng_instance *)g_cbs[i].inst_ptr;
    ceea:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
    ceee:	009a      	lsls	r2, r3, #2
    cef0:	4b08      	ldr	r3, [pc, #32]	; (cf14 <uwb_rng_pkg_down+0x34>)
    cef2:	4413      	add	r3, r2
    cef4:	685b      	ldr	r3, [r3, #4]
        if (!rng) continue;
    cef6:	b153      	cbz	r3, cf0e <uwb_rng_pkg_down+0x2e>
        uwb_mac_remove_interface(rng->dev_inst, g_cbs[i].id);
    cef8:	4d06      	ldr	r5, [pc, #24]	; (cf14 <uwb_rng_pkg_down+0x34>)
    cefa:	4415      	add	r5, r2
    cefc:	8869      	ldrh	r1, [r5, #2]
    cefe:	6818      	ldr	r0, [r3, #0]
    cf00:	f7fb fe4f 	bl	8ba2 <uwb_mac_remove_interface>
        uwb_rng_free(g_cbs[i].inst_ptr);
    cf04:	6868      	ldr	r0, [r5, #4]
    cf06:	f7ff fc1f 	bl	c748 <uwb_rng_free>
        g_cbs[i].inst_ptr = 0;
    cf0a:	2300      	movs	r3, #0
    cf0c:	606b      	str	r3, [r5, #4]
    for (i=0;i<ARRAY_SIZE(g_cbs);i++) {
    cf0e:	3401      	adds	r4, #1
    cf10:	e7e8      	b.n	cee4 <uwb_rng_pkg_down+0x4>
    cf12:	bf00      	nop
    cf14:	20000560 	.word	0x20000560

0000cf18 <rng_encode>:
 * output parameters
 * returns void
 */
void
rng_encode(struct uwb_rng_instance * rng)
{
    cf18:	b570      	push	{r4, r5, r6, lr}
    cf1a:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
    cf1e:	4605      	mov	r5, r0
    int rc;

    twr_frame_t * frame = rng->frames[rng->idx_current];
    cf20:	f8b0 1078 	ldrh.w	r1, [r0, #120]	; 0x78
    cf24:	f101 0326 	add.w	r3, r1, #38	; 0x26
    cf28:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    cf2c:	685c      	ldr	r4, [r3, #4]
    dpl_float64_t time_of_flight = uwb_rng_twr_to_tof(rng, rng->idx_current);
    cf2e:	f7ff fe3b 	bl	cba8 <uwb_rng_twr_to_tof>
    frame->local.spherical.range = uwb_rng_tof_to_meters(time_of_flight);
    cf32:	f00c f879 	bl	19028 <uwb_rng_tof_to_meters>
    cf36:	ed84 0b22 	vstr	d0, [r4, #136]	; 0x88

    rng_json_t json = {
    cf3a:	f44f 7206 	mov.w	r2, #536	; 0x218
    cf3e:	2100      	movs	r1, #0
    cf40:	4668      	mov	r0, sp
    cf42:	f000 fd5e 	bl	da02 <memset>
#if MYNEWT_VAL(UWB_WCS_ENABLED)
        .utime = uwb_wcs_read_systime_master64(rng->dev_inst),
    cf46:	6828      	ldr	r0, [r5, #0]
    cf48:	f000 fbce 	bl	d6e8 <uwb_wcs_read_systime_master64>
    rng_json_t json = {
    cf4c:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
#else
        .utime = dpl_cputime_ticks_to_usecs(dpl_cputime_get32()),
#endif
        .uid = frame->src_address,
    cf50:	f8b4 2007 	ldrh.w	r2, [r4, #7]
    cf54:	2300      	movs	r3, #0
    rng_json_t json = {
    cf56:	9220      	str	r2, [sp, #128]	; 0x80
    cf58:	9321      	str	r3, [sp, #132]	; 0x84
        .ouid = frame->dst_address,
    cf5a:	f8b4 2005 	ldrh.w	r2, [r4, #5]
    rng_json_t json = {
    cf5e:	9222      	str	r2, [sp, #136]	; 0x88
    cf60:	9323      	str	r3, [sp, #140]	; 0x8c
    cf62:	2000      	movs	r0, #0
    cf64:	494e      	ldr	r1, [pc, #312]	; (d0a0 <rng_encode+0x188>)
    cf66:	e9cd 0140 	strd	r0, r1, [sp, #256]	; 0x100
    cf6a:	e9cd 0142 	strd	r0, r1, [sp, #264]	; 0x108
        .ppm = DPL_FLOAT64_NAN(),
        .sts = DPL_FLOAT64_NAN(),
        .idx =0
    };

    for (uint8_t i = 0;i< sizeof(json.raz)/sizeof(json.raz.array[0]);i++)
    cf6e:	e015      	b.n	cf9c <rng_encode+0x84>
            json.raz.array[i] = json.braz.array[i] = json.los[i] = DPL_FLOAT64_NAN();
    cf70:	f103 021c 	add.w	r2, r3, #28
    cf74:	eb0d 02c2 	add.w	r2, sp, r2, lsl #3
    cf78:	2000      	movs	r0, #0
    cf7a:	4949      	ldr	r1, [pc, #292]	; (d0a0 <rng_encode+0x188>)
    cf7c:	e9c2 0100 	strd	r0, r1, [r2]
    cf80:	f103 0215 	add.w	r2, r3, #21
    cf84:	eb0d 02c2 	add.w	r2, sp, r2, lsl #3
    cf88:	e9c2 0100 	strd	r0, r1, [r2]
    cf8c:	f103 0212 	add.w	r2, r3, #18
    cf90:	eb0d 02c2 	add.w	r2, sp, r2, lsl #3
    cf94:	e9c2 0100 	strd	r0, r1, [r2]
    for (uint8_t i = 0;i< sizeof(json.raz)/sizeof(json.raz.array[0]);i++)
    cf98:	3301      	adds	r3, #1
    cf9a:	b2db      	uxtb	r3, r3
    cf9c:	2b02      	cmp	r3, #2
    cf9e:	d9e7      	bls.n	cf70 <rng_encode+0x58>

    switch(frame->code){
    cfa0:	f8b4 1009 	ldrh.w	r1, [r4, #9]
    cfa4:	f5a1 7389 	sub.w	r3, r1, #274	; 0x112
    cfa8:	2b16      	cmp	r3, #22
    cfaa:	d84b      	bhi.n	d044 <rng_encode+0x12c>
    cfac:	e8df f003 	tbb	[pc, r3]
    cfb0:	4a4a4a1b 	.word	0x4a4a4a1b
    cfb4:	4a4a4a1d 	.word	0x4a4a4a1d
    cfb8:	4a4a4a1b 	.word	0x4a4a4a1b
    cfbc:	4a4a4a4a 	.word	0x4a4a4a4a
    cfc0:	4a4a1b4a 	.word	0x4a4a1b4a
    cfc4:	4a4a      	.short	0x4a4a
    cfc6:	1d          	.byte	0x1d
    cfc7:	00          	.byte	0x00
        case UWB_DATA_CODE_SS_TWR_EXT_FINAL:
        case UWB_DATA_CODE_DS_TWR_EXT_FINAL:
        for (uint8_t i = 0; i < sizeof(json.braz)/sizeof(json.braz.array[0]);i++){
            json.braz.array[i] = frame->remote.spherical.array[i];
    cfc8:	1d1a      	adds	r2, r3, #4
    cfca:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    cfce:	e9d2 0100 	ldrd	r0, r1, [r2]
    cfd2:	f103 0215 	add.w	r2, r3, #21
    cfd6:	eb0d 02c2 	add.w	r2, sp, r2, lsl #3
    cfda:	e9c2 0100 	strd	r0, r1, [r2]
        for (uint8_t i = 0; i < sizeof(json.braz)/sizeof(json.braz.array[0]);i++){
    cfde:	3301      	adds	r3, #1
    cfe0:	b2db      	uxtb	r3, r3
    cfe2:	2b02      	cmp	r3, #2
    cfe4:	d9f0      	bls.n	cfc8 <rng_encode+0xb0>
    switch(frame->code){
    cfe6:	2300      	movs	r3, #0
    cfe8:	e00f      	b.n	d00a <rng_encode+0xf2>
    cfea:	2300      	movs	r3, #0
    cfec:	e7f9      	b.n	cfe2 <rng_encode+0xca>
        /* Intentionally fall through */
        case UWB_DATA_CODE_SS_TWR_FINAL:
        case UWB_DATA_CODE_SS_TWR_ACK_FINAL:
        case UWB_DATA_CODE_DS_TWR_FINAL:
        for (uint8_t i = 0; i < sizeof(json.raz)/sizeof(json.raz.array[0]);i++){
            json.raz.array[i] = frame->local.spherical.array[i];
    cfee:	f103 0211 	add.w	r2, r3, #17
    cff2:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    cff6:	e9d2 0100 	ldrd	r0, r1, [r2]
    cffa:	f103 0212 	add.w	r2, r3, #18
    cffe:	eb0d 02c2 	add.w	r2, sp, r2, lsl #3
    d002:	e9c2 0100 	strd	r0, r1, [r2]
        for (uint8_t i = 0; i < sizeof(json.raz)/sizeof(json.raz.array[0]);i++){
    d006:	3301      	adds	r3, #1
    d008:	b2db      	uxtb	r3, r3
    d00a:	2b02      	cmp	r3, #2
    d00c:	d9ef      	bls.n	cfee <rng_encode+0xd6>
        break;
        default: printf(",error: \"Unknown Frame Code\", %x\n", frame->code);
    }

#if MYNEWT_VAL(RNG_VERBOSE) > 1
    json.pd   = DPL_FLOAT64_FROM_F32(frame->local.pdoa);
    d00e:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
    d012:	f014 f90b 	bl	2122c <__aeabi_f2d>
    d016:	e9cd 013e 	strd	r0, r1, [sp, #248]	; 0xf8
    json.code = frame->code;
    d01a:	f8b4 3009 	ldrh.w	r3, [r4, #9]
    d01e:	931e      	str	r3, [sp, #120]	; 0x78
    d020:	2300      	movs	r3, #0
    d022:	931f      	str	r3, [sp, #124]	; 0x7c
    if(rng->dev_inst->config.rxdiag_enable){
    d024:	682b      	ldr	r3, [r5, #0]
    d026:	f893 352c 	ldrb.w	r3, [r3, #1324]	; 0x52c
    d02a:	f013 0f40 	tst.w	r3, #64	; 0x40
    d02e:	d10d      	bne.n	d04c <rng_encode+0x134>
            json.rssi[i] = DPL_FLOAT64_FROM_F32(frame->local.vrssi[i]);
        dpl_float32_t fppl = frame->local.fppl;
        json.los[0] = DPL_FLOAT64_FROM_F32(uwb_estimate_los(rng->dev_inst, frame->local.rssi, fppl));
    }

    rc = rng_json_write(&json);
    d030:	4668      	mov	r0, sp
    d032:	f000 f85b 	bl	d0ec <rng_json_write>
    assert(rc == 0);
    d036:	bb60      	cbnz	r0, d092 <rng_encode+0x17a>
    size_t n = strlen(json.iobuf);
    json.iobuf[n]='\n';
    json.iobuf[n+1]='\0';
    rng_encode_output(rng->dev_inst->idx, json.iobuf, strlen(json.iobuf));
#else
    printf("%s\n",json.iobuf);
    d038:	a844      	add	r0, sp, #272	; 0x110
    d03a:	f000 fbc9 	bl	d7d0 <puts>
#endif

}
    d03e:	f50d 7d06 	add.w	sp, sp, #536	; 0x218
    d042:	bd70      	pop	{r4, r5, r6, pc}
        default: printf(",error: \"Unknown Frame Code\", %x\n", frame->code);
    d044:	4817      	ldr	r0, [pc, #92]	; (d0a4 <rng_encode+0x18c>)
    d046:	f001 f8ef 	bl	e228 <printf>
    d04a:	e7e0      	b.n	d00e <rng_encode+0xf6>
        for (uint8_t i=0;i< sizeof(json.rssi)/sizeof(json.rssi[0]);i++)
    d04c:	2600      	movs	r6, #0
    d04e:	2e02      	cmp	r6, #2
    d050:	d80f      	bhi.n	d072 <rng_encode+0x15a>
            json.rssi[i] = DPL_FLOAT64_FROM_F32(frame->local.vrssi[i]);
    d052:	f106 0338 	add.w	r3, r6, #56	; 0x38
    d056:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    d05a:	6818      	ldr	r0, [r3, #0]
    d05c:	f014 f8e6 	bl	2122c <__aeabi_f2d>
    d060:	f106 0318 	add.w	r3, r6, #24
    d064:	eb0d 03c3 	add.w	r3, sp, r3, lsl #3
    d068:	e9c3 0100 	strd	r0, r1, [r3]
        for (uint8_t i=0;i< sizeof(json.rssi)/sizeof(json.rssi[0]);i++)
    d06c:	3601      	adds	r6, #1
    d06e:	b2f6      	uxtb	r6, r6
    d070:	e7ed      	b.n	d04e <rng_encode+0x136>
        json.los[0] = DPL_FLOAT64_FROM_F32(uwb_estimate_los(rng->dev_inst, frame->local.rssi, fppl));
    d072:	6828      	ldr	r0, [r5, #0]
    return (dev->uw_funcs->uf_estimate_los(dev, rssi, fppl));
    d074:	6a43      	ldr	r3, [r0, #36]	; 0x24
    d076:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
    d07a:	edd4 0a35 	vldr	s1, [r4, #212]	; 0xd4
    d07e:	ed94 0a34 	vldr	s0, [r4, #208]	; 0xd0
    d082:	4798      	blx	r3
    d084:	ee10 0a10 	vmov	r0, s0
    d088:	f014 f8d0 	bl	2122c <__aeabi_f2d>
    d08c:	e9cd 0138 	strd	r0, r1, [sp, #224]	; 0xe0
    d090:	e7ce      	b.n	d030 <rng_encode+0x118>
    assert(rc == 0);
    d092:	2300      	movs	r3, #0
    d094:	461a      	mov	r2, r3
    d096:	4619      	mov	r1, r3
    d098:	4618      	mov	r0, r3
    d09a:	f7fb ffd7 	bl	904c <__assert_func>
    d09e:	bf00      	nop
    d0a0:	7ff80000 	.word	0x7ff80000
    d0a4:	00023198 	.word	0x00023198

0000d0a8 <rng_write_line>:
        free(json);
}

static int
rng_write_line(void *buf, char* data, int len)
{
    d0a8:	b510      	push	{r4, lr}
    d0aa:	4686      	mov	lr, r0
    d0ac:	4610      	mov	r0, r2
    rng_json_t * json = buf;
    for (uint16_t i=0; i < len; i++){
    d0ae:	2300      	movs	r3, #0
    d0b0:	e001      	b.n	d0b6 <rng_write_line+0xe>
    d0b2:	3301      	adds	r3, #1
    d0b4:	b29b      	uxth	r3, r3
    d0b6:	4283      	cmp	r3, r0
    d0b8:	da0d      	bge.n	d0d6 <rng_write_line+0x2e>
        json->iobuf[(json->idx++)%MYNEWT_VAL(UWB_RNG_JSON_BUFSIZE)] = data[i];
    d0ba:	f8be c210 	ldrh.w	ip, [lr, #528]	; 0x210
    d0be:	f10c 0401 	add.w	r4, ip, #1
    d0c2:	f8ae 4210 	strh.w	r4, [lr, #528]	; 0x210
    d0c6:	5ccc      	ldrb	r4, [r1, r3]
    d0c8:	fa5e fc8c 	uxtab	ip, lr, ip
    d0cc:	f88c 4110 	strb.w	r4, [ip, #272]	; 0x110
        if (data[i]=='\0'){
    d0d0:	5ccc      	ldrb	r4, [r1, r3]
    d0d2:	2c00      	cmp	r4, #0
    d0d4:	d1ed      	bne.n	d0b2 <rng_write_line+0xa>
            break;
        }
    }
    if (json->iobuf[json->idx-1]=='\0')
    d0d6:	f8be 3210 	ldrh.w	r3, [lr, #528]	; 0x210
    d0da:	3b01      	subs	r3, #1
    d0dc:	4473      	add	r3, lr
    d0de:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
    d0e2:	b90b      	cbnz	r3, d0e8 <rng_write_line+0x40>
        json->idx = 0;
    d0e4:	f8ae 3210 	strh.w	r3, [lr, #528]	; 0x210
    return len;
}
    d0e8:	bd10      	pop	{r4, pc}
	...

0000d0ec <rng_json_write>:

int
rng_json_write(rng_json_t * json){
    d0ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d0f0:	b085      	sub	sp, #20
    d0f2:	4604      	mov	r4, r0

    struct json_value value;
    int rc;

    json->encoder.je_write = rng_write_line;
    d0f4:	4bbe      	ldr	r3, [pc, #760]	; (d3f0 <rng_json_write+0x304>)
    d0f6:	6183      	str	r3, [r0, #24]
    json->encoder.je_arg = (void *)json;
    d0f8:	61c0      	str	r0, [r0, #28]
    json->decoder.json_buf.jb_read_next = json_read_next;
    d0fa:	4bbe      	ldr	r3, [pc, #760]	; (d3f4 <rng_json_write+0x308>)
    d0fc:	6043      	str	r3, [r0, #4]
    json->decoder.json_buf.jb_read_prev = json_read_prev;
    d0fe:	4bbe      	ldr	r3, [pc, #760]	; (d3f8 <rng_json_write+0x30c>)
    d100:	6083      	str	r3, [r0, #8]
    json->decoder.json_buf.jb_readn = json_readn;
    d102:	4bbe      	ldr	r3, [pc, #760]	; (d3fc <rng_json_write+0x310>)
    d104:	6003      	str	r3, [r0, #0]
    json->encoder.je_wr_commas = 0;
    d106:	f890 3020 	ldrb.w	r3, [r0, #32]
    d10a:	f36f 0300 	bfc	r3, #0, #1
    d10e:	f880 3020 	strb.w	r3, [r0, #32]

    rc = json_encode_object_start(&json->encoder);
    d112:	f100 0518 	add.w	r5, r0, #24
    d116:	4628      	mov	r0, r5
    d118:	f00b fd20 	bl	18b5c <json_encode_object_start>
    d11c:	4606      	mov	r6, r0
    JSON_VALUE_UINT(&value, json->utime);
    d11e:	2301      	movs	r3, #1
    d120:	f88d 3001 	strb.w	r3, [sp, #1]
    d124:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
    d128:	e9cd 2302 	strd	r2, r3, [sp, #8]
    rc |= json_encode_object_entry(&json->encoder, "utime", &value);
    d12c:	466a      	mov	r2, sp
    d12e:	49b4      	ldr	r1, [pc, #720]	; (d400 <rng_json_write+0x314>)
    d130:	4628      	mov	r0, r5
    d132:	f00b fd5b 	bl	18bec <json_encode_object_entry>
    d136:	4306      	orrs	r6, r0

    if (json->seq){
    d138:	6f22      	ldr	r2, [r4, #112]	; 0x70
    d13a:	6f63      	ldr	r3, [r4, #116]	; 0x74
    d13c:	ea52 0103 	orrs.w	r1, r2, r3
    d140:	d126      	bne.n	d190 <rng_json_write+0xa4>
        JSON_VALUE_UINT(&value, json->seq);
        rc |= json_encode_object_entry(&json->encoder, "seq", &value);
    }
    if (json->code){
    d142:	6fa2      	ldr	r2, [r4, #120]	; 0x78
    d144:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    d146:	ea52 0103 	orrs.w	r1, r2, r3
    d14a:	d12d      	bne.n	d1a8 <rng_json_write+0xbc>
        JSON_VALUE_UINT(&value, json->code);
        rc |= json_encode_object_entry(&json->encoder, "c", &value);
    }
    if (json->uid){
    d14c:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    d150:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    d154:	ea52 0103 	orrs.w	r1, r2, r3
    d158:	d132      	bne.n	d1c0 <rng_json_write+0xd4>
        JSON_VALUE_UINT(&value, json->uid);
        rc |= json_encode_object_entry(&json->encoder, "uid", &value);
    }
    if (json->ouid){
    d15a:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
    d15e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    d162:	ea52 0103 	orrs.w	r1, r2, r3
    d166:	d137      	bne.n	d1d8 <rng_json_write+0xec>
        JSON_VALUE_UINT(&value, json->ouid);
        rc |= json_encode_object_entry(&json->encoder, "ouid", &value);
    }

    if(DPL_FLOAT64_ISNAN(json->raz.azimuth) && DPL_FLOAT64_ISNAN(json->raz.zenith)){
    d168:	e9d4 0126 	ldrd	r0, r1, [r4, #152]	; 0x98
    d16c:	4602      	mov	r2, r0
    d16e:	460b      	mov	r3, r1
    d170:	f014 fb4e 	bl	21810 <__aeabi_dcmpun>
    d174:	2800      	cmp	r0, #0
    d176:	d13b      	bne.n	d1f0 <rng_json_write+0x104>
        rc |= json_encode_array_start(&json->encoder);
        JSON_VALUE_FLOAT64(&value, json->raz.range);
        rc |= json_encode_array_value(&json->encoder, &value);
        rc |= json_encode_array_finish(&json->encoder);
    }else{
        rc |= json_encode_array_name(&json->encoder, "raz");
    d178:	49a2      	ldr	r1, [pc, #648]	; (d404 <rng_json_write+0x318>)
    d17a:	4628      	mov	r0, r5
    d17c:	f00b feec 	bl	18f58 <json_encode_array_name>
    d180:	4306      	orrs	r6, r0
        rc |= json_encode_array_start(&json->encoder);
    d182:	4628      	mov	r0, r5
    d184:	f00b feec 	bl	18f60 <json_encode_array_start>
    d188:	ea46 0700 	orr.w	r7, r6, r0
        for (uint8_t i = 0; i< sizeof(json->raz)/sizeof(dpl_float64_t); i++){
    d18c:	2600      	movs	r6, #0
    d18e:	e063      	b.n	d258 <rng_json_write+0x16c>
        JSON_VALUE_UINT(&value, json->seq);
    d190:	2101      	movs	r1, #1
    d192:	f88d 1001 	strb.w	r1, [sp, #1]
    d196:	9202      	str	r2, [sp, #8]
    d198:	9303      	str	r3, [sp, #12]
        rc |= json_encode_object_entry(&json->encoder, "seq", &value);
    d19a:	466a      	mov	r2, sp
    d19c:	499a      	ldr	r1, [pc, #616]	; (d408 <rng_json_write+0x31c>)
    d19e:	4628      	mov	r0, r5
    d1a0:	f00b fd24 	bl	18bec <json_encode_object_entry>
    d1a4:	4306      	orrs	r6, r0
    d1a6:	e7cc      	b.n	d142 <rng_json_write+0x56>
        JSON_VALUE_UINT(&value, json->code);
    d1a8:	2101      	movs	r1, #1
    d1aa:	f88d 1001 	strb.w	r1, [sp, #1]
    d1ae:	9202      	str	r2, [sp, #8]
    d1b0:	9303      	str	r3, [sp, #12]
        rc |= json_encode_object_entry(&json->encoder, "c", &value);
    d1b2:	466a      	mov	r2, sp
    d1b4:	4995      	ldr	r1, [pc, #596]	; (d40c <rng_json_write+0x320>)
    d1b6:	4628      	mov	r0, r5
    d1b8:	f00b fd18 	bl	18bec <json_encode_object_entry>
    d1bc:	4306      	orrs	r6, r0
    d1be:	e7c5      	b.n	d14c <rng_json_write+0x60>
        JSON_VALUE_UINT(&value, json->uid);
    d1c0:	2101      	movs	r1, #1
    d1c2:	f88d 1001 	strb.w	r1, [sp, #1]
    d1c6:	9202      	str	r2, [sp, #8]
    d1c8:	9303      	str	r3, [sp, #12]
        rc |= json_encode_object_entry(&json->encoder, "uid", &value);
    d1ca:	466a      	mov	r2, sp
    d1cc:	4990      	ldr	r1, [pc, #576]	; (d410 <rng_json_write+0x324>)
    d1ce:	4628      	mov	r0, r5
    d1d0:	f00b fd0c 	bl	18bec <json_encode_object_entry>
    d1d4:	4306      	orrs	r6, r0
    d1d6:	e7c0      	b.n	d15a <rng_json_write+0x6e>
        JSON_VALUE_UINT(&value, json->ouid);
    d1d8:	2101      	movs	r1, #1
    d1da:	f88d 1001 	strb.w	r1, [sp, #1]
    d1de:	9202      	str	r2, [sp, #8]
    d1e0:	9303      	str	r3, [sp, #12]
        rc |= json_encode_object_entry(&json->encoder, "ouid", &value);
    d1e2:	466a      	mov	r2, sp
    d1e4:	498b      	ldr	r1, [pc, #556]	; (d414 <rng_json_write+0x328>)
    d1e6:	4628      	mov	r0, r5
    d1e8:	f00b fd00 	bl	18bec <json_encode_object_entry>
    d1ec:	4306      	orrs	r6, r0
    d1ee:	e7bb      	b.n	d168 <rng_json_write+0x7c>
    if(DPL_FLOAT64_ISNAN(json->raz.azimuth) && DPL_FLOAT64_ISNAN(json->raz.zenith)){
    d1f0:	e9d4 0128 	ldrd	r0, r1, [r4, #160]	; 0xa0
    d1f4:	4602      	mov	r2, r0
    d1f6:	460b      	mov	r3, r1
    d1f8:	f014 fb0a 	bl	21810 <__aeabi_dcmpun>
    d1fc:	2800      	cmp	r0, #0
    d1fe:	d0bb      	beq.n	d178 <rng_json_write+0x8c>
        rc |= json_encode_array_name(&json->encoder, "raz");
    d200:	4980      	ldr	r1, [pc, #512]	; (d404 <rng_json_write+0x318>)
    d202:	4628      	mov	r0, r5
    d204:	f00b fea8 	bl	18f58 <json_encode_array_name>
    d208:	4306      	orrs	r6, r0
        rc |= json_encode_array_start(&json->encoder);
    d20a:	4628      	mov	r0, r5
    d20c:	f00b fea8 	bl	18f60 <json_encode_array_start>
    d210:	4306      	orrs	r6, r0
        JSON_VALUE_FLOAT64(&value, json->raz.range);
    d212:	2306      	movs	r3, #6
    d214:	f88d 3001 	strb.w	r3, [sp, #1]
    d218:	e9d4 2324 	ldrd	r2, r3, [r4, #144]	; 0x90
    d21c:	e9cd 2302 	strd	r2, r3, [sp, #8]
        rc |= json_encode_array_value(&json->encoder, &value);
    d220:	4669      	mov	r1, sp
    d222:	4628      	mov	r0, r5
    d224:	f00b feac 	bl	18f80 <json_encode_array_value>
    d228:	4306      	orrs	r6, r0
        rc |= json_encode_array_finish(&json->encoder);
    d22a:	4628      	mov	r0, r5
    d22c:	f00b fec4 	bl	18fb8 <json_encode_array_finish>
    d230:	4306      	orrs	r6, r0
    d232:	e018      	b.n	d266 <rng_json_write+0x17a>
            JSON_VALUE_FLOAT64(&value, json->raz.array[i]);
    d234:	2306      	movs	r3, #6
    d236:	f88d 3001 	strb.w	r3, [sp, #1]
    d23a:	f106 0312 	add.w	r3, r6, #18
    d23e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    d242:	e9d3 2300 	ldrd	r2, r3, [r3]
    d246:	e9cd 2302 	strd	r2, r3, [sp, #8]
            rc |= json_encode_array_value(&json->encoder, &value);
    d24a:	4669      	mov	r1, sp
    d24c:	4628      	mov	r0, r5
    d24e:	f00b fe97 	bl	18f80 <json_encode_array_value>
    d252:	4307      	orrs	r7, r0
        for (uint8_t i = 0; i< sizeof(json->raz)/sizeof(dpl_float64_t); i++){
    d254:	3601      	adds	r6, #1
    d256:	b2f6      	uxtb	r6, r6
    d258:	2e02      	cmp	r6, #2
    d25a:	d9eb      	bls.n	d234 <rng_json_write+0x148>
        }
        rc |= json_encode_array_finish(&json->encoder);
    d25c:	4628      	mov	r0, r5
    d25e:	f00b feab 	bl	18fb8 <json_encode_array_finish>
    d262:	ea47 0600 	orr.w	r6, r7, r0
    }

    if(!DPL_FLOAT64_ISNAN(json->braz.range)){
    d266:	e9d4 012a 	ldrd	r0, r1, [r4, #168]	; 0xa8
    d26a:	4602      	mov	r2, r0
    d26c:	460b      	mov	r3, r1
    d26e:	f014 facf 	bl	21810 <__aeabi_dcmpun>
    d272:	2800      	cmp	r0, #0
    d274:	d14b      	bne.n	d30e <rng_json_write+0x222>
        if(DPL_FLOAT64_ISNAN(json->braz.azimuth) && DPL_FLOAT64_ISNAN(json->braz.zenith)){
    d276:	e9d4 012c 	ldrd	r0, r1, [r4, #176]	; 0xb0
    d27a:	4602      	mov	r2, r0
    d27c:	460b      	mov	r3, r1
    d27e:	f014 fac7 	bl	21810 <__aeabi_dcmpun>
    d282:	b950      	cbnz	r0, d29a <rng_json_write+0x1ae>
            rc |= json_encode_array_start(&json->encoder);
            JSON_VALUE_FLOAT64(&value, json->braz.range);
            rc |= json_encode_array_value(&json->encoder, &value);
            rc |= json_encode_array_finish(&json->encoder);
        }else{
            rc |= json_encode_array_name(&json->encoder, "braz");
    d284:	4964      	ldr	r1, [pc, #400]	; (d418 <rng_json_write+0x32c>)
    d286:	4628      	mov	r0, r5
    d288:	f00b fe66 	bl	18f58 <json_encode_array_name>
    d28c:	4306      	orrs	r6, r0
            rc |= json_encode_array_start(&json->encoder);
    d28e:	4628      	mov	r0, r5
    d290:	f00b fe66 	bl	18f60 <json_encode_array_start>
    d294:	4306      	orrs	r6, r0
            for (uint8_t i = 0; i< sizeof(json->braz)/sizeof(dpl_float64_t); i++){
    d296:	2700      	movs	r7, #0
    d298:	e033      	b.n	d302 <rng_json_write+0x216>
        if(DPL_FLOAT64_ISNAN(json->braz.azimuth) && DPL_FLOAT64_ISNAN(json->braz.zenith)){
    d29a:	e9d4 012e 	ldrd	r0, r1, [r4, #184]	; 0xb8
    d29e:	4602      	mov	r2, r0
    d2a0:	460b      	mov	r3, r1
    d2a2:	f014 fab5 	bl	21810 <__aeabi_dcmpun>
    d2a6:	2800      	cmp	r0, #0
    d2a8:	d0ec      	beq.n	d284 <rng_json_write+0x198>
            rc |= json_encode_array_name(&json->encoder, "braz");
    d2aa:	495b      	ldr	r1, [pc, #364]	; (d418 <rng_json_write+0x32c>)
    d2ac:	4628      	mov	r0, r5
    d2ae:	f00b fe53 	bl	18f58 <json_encode_array_name>
    d2b2:	4306      	orrs	r6, r0
            rc |= json_encode_array_start(&json->encoder);
    d2b4:	4628      	mov	r0, r5
    d2b6:	f00b fe53 	bl	18f60 <json_encode_array_start>
    d2ba:	4306      	orrs	r6, r0
            JSON_VALUE_FLOAT64(&value, json->braz.range);
    d2bc:	2306      	movs	r3, #6
    d2be:	f88d 3001 	strb.w	r3, [sp, #1]
    d2c2:	e9d4 232a 	ldrd	r2, r3, [r4, #168]	; 0xa8
    d2c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
            rc |= json_encode_array_value(&json->encoder, &value);
    d2ca:	4669      	mov	r1, sp
    d2cc:	4628      	mov	r0, r5
    d2ce:	f00b fe57 	bl	18f80 <json_encode_array_value>
    d2d2:	4306      	orrs	r6, r0
            rc |= json_encode_array_finish(&json->encoder);
    d2d4:	4628      	mov	r0, r5
    d2d6:	f00b fe6f 	bl	18fb8 <json_encode_array_finish>
    d2da:	4306      	orrs	r6, r0
    d2dc:	e017      	b.n	d30e <rng_json_write+0x222>
                JSON_VALUE_FLOAT64(&value, json->braz.array[i]);
    d2de:	2306      	movs	r3, #6
    d2e0:	f88d 3001 	strb.w	r3, [sp, #1]
    d2e4:	f107 0315 	add.w	r3, r7, #21
    d2e8:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    d2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
    d2f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
                rc |= json_encode_array_value(&json->encoder, &value);
    d2f4:	4669      	mov	r1, sp
    d2f6:	4628      	mov	r0, r5
    d2f8:	f00b fe42 	bl	18f80 <json_encode_array_value>
    d2fc:	4306      	orrs	r6, r0
            for (uint8_t i = 0; i< sizeof(json->braz)/sizeof(dpl_float64_t); i++){
    d2fe:	3701      	adds	r7, #1
    d300:	b2ff      	uxtb	r7, r7
    d302:	2f02      	cmp	r7, #2
    d304:	d9eb      	bls.n	d2de <rng_json_write+0x1f2>
            }
            rc |= json_encode_array_finish(&json->encoder);
    d306:	4628      	mov	r0, r5
    d308:	f00b fe56 	bl	18fb8 <json_encode_array_finish>
    d30c:	4306      	orrs	r6, r0
        }
    }

    if(!DPL_FLOAT64_ISNAN(json->rssi[0])){
    d30e:	e9d4 8930 	ldrd	r8, r9, [r4, #192]	; 0xc0
    d312:	4642      	mov	r2, r8
    d314:	464b      	mov	r3, r9
    d316:	4640      	mov	r0, r8
    d318:	4649      	mov	r1, r9
    d31a:	f014 fa79 	bl	21810 <__aeabi_dcmpun>
    d31e:	2800      	cmp	r0, #0
    d320:	d149      	bne.n	d3b6 <rng_json_write+0x2ca>
        if(!DPL_FLOAT64_ISNAN(json->rssi[0]) && DPL_FLOAT64_ISNAN(json->rssi[1]) && DPL_FLOAT64_ISNAN(json->rssi[2])){
    d322:	e9d4 0132 	ldrd	r0, r1, [r4, #200]	; 0xc8
    d326:	4602      	mov	r2, r0
    d328:	460b      	mov	r3, r1
    d32a:	f014 fa71 	bl	21810 <__aeabi_dcmpun>
    d32e:	b950      	cbnz	r0, d346 <rng_json_write+0x25a>
                rc |= json_encode_array_name(&json->encoder, "rssi");
                rc |= json_encode_array_start(&json->encoder);
                rc |= json_encode_array_value(&json->encoder, &value);
                rc |= json_encode_array_finish(&json->encoder);
        }else{
                rc |= json_encode_array_name(&json->encoder, "rssi");
    d330:	493a      	ldr	r1, [pc, #232]	; (d41c <rng_json_write+0x330>)
    d332:	4628      	mov	r0, r5
    d334:	f00b fe10 	bl	18f58 <json_encode_array_name>
    d338:	4306      	orrs	r6, r0
                rc |= json_encode_array_start(&json->encoder);
    d33a:	4628      	mov	r0, r5
    d33c:	f00b fe10 	bl	18f60 <json_encode_array_start>
    d340:	4306      	orrs	r6, r0
                for (uint8_t i = 0; i< sizeof(json->rssi)/sizeof(dpl_float64_t); i++){
    d342:	2700      	movs	r7, #0
    d344:	e031      	b.n	d3aa <rng_json_write+0x2be>
        if(!DPL_FLOAT64_ISNAN(json->rssi[0]) && DPL_FLOAT64_ISNAN(json->rssi[1]) && DPL_FLOAT64_ISNAN(json->rssi[2])){
    d346:	e9d4 0134 	ldrd	r0, r1, [r4, #208]	; 0xd0
    d34a:	4602      	mov	r2, r0
    d34c:	460b      	mov	r3, r1
    d34e:	f014 fa5f 	bl	21810 <__aeabi_dcmpun>
    d352:	2800      	cmp	r0, #0
    d354:	d0ec      	beq.n	d330 <rng_json_write+0x244>
                JSON_VALUE_FLOAT64(&value, json->rssi[0]);
    d356:	2306      	movs	r3, #6
    d358:	f88d 3001 	strb.w	r3, [sp, #1]
    d35c:	e9cd 8902 	strd	r8, r9, [sp, #8]
                rc |= json_encode_array_name(&json->encoder, "rssi");
    d360:	492e      	ldr	r1, [pc, #184]	; (d41c <rng_json_write+0x330>)
    d362:	4628      	mov	r0, r5
    d364:	f00b fdf8 	bl	18f58 <json_encode_array_name>
    d368:	4306      	orrs	r6, r0
                rc |= json_encode_array_start(&json->encoder);
    d36a:	4628      	mov	r0, r5
    d36c:	f00b fdf8 	bl	18f60 <json_encode_array_start>
    d370:	4306      	orrs	r6, r0
                rc |= json_encode_array_value(&json->encoder, &value);
    d372:	4669      	mov	r1, sp
    d374:	4628      	mov	r0, r5
    d376:	f00b fe03 	bl	18f80 <json_encode_array_value>
    d37a:	4306      	orrs	r6, r0
                rc |= json_encode_array_finish(&json->encoder);
    d37c:	4628      	mov	r0, r5
    d37e:	f00b fe1b 	bl	18fb8 <json_encode_array_finish>
    d382:	4306      	orrs	r6, r0
    d384:	e017      	b.n	d3b6 <rng_json_write+0x2ca>
                    JSON_VALUE_FLOAT64(&value, json->rssi[i]);
    d386:	2306      	movs	r3, #6
    d388:	f88d 3001 	strb.w	r3, [sp, #1]
    d38c:	f107 0318 	add.w	r3, r7, #24
    d390:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    d394:	e9d3 2300 	ldrd	r2, r3, [r3]
    d398:	e9cd 2302 	strd	r2, r3, [sp, #8]
                    rc |= json_encode_array_value(&json->encoder, &value);
    d39c:	4669      	mov	r1, sp
    d39e:	4628      	mov	r0, r5
    d3a0:	f00b fdee 	bl	18f80 <json_encode_array_value>
    d3a4:	4306      	orrs	r6, r0
                for (uint8_t i = 0; i< sizeof(json->rssi)/sizeof(dpl_float64_t); i++){
    d3a6:	3701      	adds	r7, #1
    d3a8:	b2ff      	uxtb	r7, r7
    d3aa:	2f02      	cmp	r7, #2
    d3ac:	d9eb      	bls.n	d386 <rng_json_write+0x29a>
                }
                rc |= json_encode_array_finish(&json->encoder);
    d3ae:	4628      	mov	r0, r5
    d3b0:	f00b fe02 	bl	18fb8 <json_encode_array_finish>
    d3b4:	4306      	orrs	r6, r0
        }
    }

    if(!DPL_FLOAT64_ISNAN(json->los[0])){
    d3b6:	e9d4 8938 	ldrd	r8, r9, [r4, #224]	; 0xe0
    d3ba:	4642      	mov	r2, r8
    d3bc:	464b      	mov	r3, r9
    d3be:	4640      	mov	r0, r8
    d3c0:	4649      	mov	r1, r9
    d3c2:	f014 fa25 	bl	21810 <__aeabi_dcmpun>
    d3c6:	2800      	cmp	r0, #0
    d3c8:	d164      	bne.n	d494 <rng_json_write+0x3a8>
        if(!DPL_FLOAT64_ISNAN(json->los[0]) && DPL_FLOAT64_ISNAN(json->los[1]) && DPL_FLOAT64_ISNAN(json->los[2])){
    d3ca:	e9d4 013a 	ldrd	r0, r1, [r4, #232]	; 0xe8
    d3ce:	4602      	mov	r2, r0
    d3d0:	460b      	mov	r3, r1
    d3d2:	f014 fa1d 	bl	21810 <__aeabi_dcmpun>
    d3d6:	bb28      	cbnz	r0, d424 <rng_json_write+0x338>
                rc |= json_encode_array_name(&json->encoder, "los");
                rc |= json_encode_array_start(&json->encoder);
                rc |= json_encode_array_value(&json->encoder, &value);
                rc |= json_encode_array_finish(&json->encoder);
        }else{
                rc |= json_encode_array_name(&json->encoder, "los");
    d3d8:	4911      	ldr	r1, [pc, #68]	; (d420 <rng_json_write+0x334>)
    d3da:	4628      	mov	r0, r5
    d3dc:	f00b fdbc 	bl	18f58 <json_encode_array_name>
    d3e0:	4306      	orrs	r6, r0
                rc |= json_encode_array_start(&json->encoder);
    d3e2:	4628      	mov	r0, r5
    d3e4:	f00b fdbc 	bl	18f60 <json_encode_array_start>
    d3e8:	4306      	orrs	r6, r0
                for (uint8_t i = 0; i< sizeof(json->los)/sizeof(dpl_float64_t); i++){
    d3ea:	2700      	movs	r7, #0
    d3ec:	e04c      	b.n	d488 <rng_json_write+0x39c>
    d3ee:	bf00      	nop
    d3f0:	0000d0a9 	.word	0x0000d0a9
    d3f4:	00018fd5 	.word	0x00018fd5
    d3f8:	00018ff1 	.word	0x00018ff1
    d3fc:	00019003 	.word	0x00019003
    d400:	000231bc 	.word	0x000231bc
    d404:	000231d4 	.word	0x000231d4
    d408:	000231c4 	.word	0x000231c4
    d40c:	00022b94 	.word	0x00022b94
    d410:	000231c8 	.word	0x000231c8
    d414:	000231cc 	.word	0x000231cc
    d418:	000231d8 	.word	0x000231d8
    d41c:	000231e0 	.word	0x000231e0
    d420:	000231e8 	.word	0x000231e8
        if(!DPL_FLOAT64_ISNAN(json->los[0]) && DPL_FLOAT64_ISNAN(json->los[1]) && DPL_FLOAT64_ISNAN(json->los[2])){
    d424:	e9d4 013c 	ldrd	r0, r1, [r4, #240]	; 0xf0
    d428:	4602      	mov	r2, r0
    d42a:	460b      	mov	r3, r1
    d42c:	f014 f9f0 	bl	21810 <__aeabi_dcmpun>
    d430:	2800      	cmp	r0, #0
    d432:	d0d1      	beq.n	d3d8 <rng_json_write+0x2ec>
                JSON_VALUE_FLOAT64(&value, json->los[0]);
    d434:	2306      	movs	r3, #6
    d436:	f88d 3001 	strb.w	r3, [sp, #1]
    d43a:	e9cd 8902 	strd	r8, r9, [sp, #8]
                rc |= json_encode_array_name(&json->encoder, "los");
    d43e:	4936      	ldr	r1, [pc, #216]	; (d518 <rng_json_write+0x42c>)
    d440:	4628      	mov	r0, r5
    d442:	f00b fd89 	bl	18f58 <json_encode_array_name>
    d446:	4306      	orrs	r6, r0
                rc |= json_encode_array_start(&json->encoder);
    d448:	4628      	mov	r0, r5
    d44a:	f00b fd89 	bl	18f60 <json_encode_array_start>
    d44e:	4306      	orrs	r6, r0
                rc |= json_encode_array_value(&json->encoder, &value);
    d450:	4669      	mov	r1, sp
    d452:	4628      	mov	r0, r5
    d454:	f00b fd94 	bl	18f80 <json_encode_array_value>
    d458:	4306      	orrs	r6, r0
                rc |= json_encode_array_finish(&json->encoder);
    d45a:	4628      	mov	r0, r5
    d45c:	f00b fdac 	bl	18fb8 <json_encode_array_finish>
    d460:	4306      	orrs	r6, r0
    d462:	e017      	b.n	d494 <rng_json_write+0x3a8>
                    JSON_VALUE_FLOAT64(&value, json->los[i]);
    d464:	2306      	movs	r3, #6
    d466:	f88d 3001 	strb.w	r3, [sp, #1]
    d46a:	f107 031c 	add.w	r3, r7, #28
    d46e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    d472:	e9d3 2300 	ldrd	r2, r3, [r3]
    d476:	e9cd 2302 	strd	r2, r3, [sp, #8]
                    rc |= json_encode_array_value(&json->encoder, &value);
    d47a:	4669      	mov	r1, sp
    d47c:	4628      	mov	r0, r5
    d47e:	f00b fd7f 	bl	18f80 <json_encode_array_value>
    d482:	4306      	orrs	r6, r0
                for (uint8_t i = 0; i< sizeof(json->los)/sizeof(dpl_float64_t); i++){
    d484:	3701      	adds	r7, #1
    d486:	b2ff      	uxtb	r7, r7
    d488:	2f02      	cmp	r7, #2
    d48a:	d9eb      	bls.n	d464 <rng_json_write+0x378>
                }
                rc |= json_encode_array_finish(&json->encoder);
    d48c:	4628      	mov	r0, r5
    d48e:	f00b fd93 	bl	18fb8 <json_encode_array_finish>
    d492:	4306      	orrs	r6, r0
        }
    }

    if (!DPL_FLOAT64_ISNAN(json->ppm)){
    d494:	e9d4 8940 	ldrd	r8, r9, [r4, #256]	; 0x100
    d498:	4642      	mov	r2, r8
    d49a:	464b      	mov	r3, r9
    d49c:	4640      	mov	r0, r8
    d49e:	4649      	mov	r1, r9
    d4a0:	f014 f9b6 	bl	21810 <__aeabi_dcmpun>
    d4a4:	b950      	cbnz	r0, d4bc <rng_json_write+0x3d0>
        JSON_VALUE_FLOAT64(&value, json->ppm);
    d4a6:	2306      	movs	r3, #6
    d4a8:	f88d 3001 	strb.w	r3, [sp, #1]
    d4ac:	e9cd 8902 	strd	r8, r9, [sp, #8]
        rc |= json_encode_object_entry(&json->encoder, "ppm", &value);
    d4b0:	466a      	mov	r2, sp
    d4b2:	491a      	ldr	r1, [pc, #104]	; (d51c <rng_json_write+0x430>)
    d4b4:	4628      	mov	r0, r5
    d4b6:	f00b fb99 	bl	18bec <json_encode_object_entry>
    d4ba:	4306      	orrs	r6, r0
    }

    if (!DPL_FLOAT64_ISNAN(json->sts)){
    d4bc:	e9d4 8942 	ldrd	r8, r9, [r4, #264]	; 0x108
    d4c0:	4642      	mov	r2, r8
    d4c2:	464b      	mov	r3, r9
    d4c4:	4640      	mov	r0, r8
    d4c6:	4649      	mov	r1, r9
    d4c8:	f014 f9a2 	bl	21810 <__aeabi_dcmpun>
    d4cc:	b950      	cbnz	r0, d4e4 <rng_json_write+0x3f8>
        JSON_VALUE_FLOAT64(&value, json->sts);
    d4ce:	2306      	movs	r3, #6
    d4d0:	f88d 3001 	strb.w	r3, [sp, #1]
    d4d4:	e9cd 8902 	strd	r8, r9, [sp, #8]
        rc |= json_encode_object_entry(&json->encoder, "sts", &value);
    d4d8:	466a      	mov	r2, sp
    d4da:	4911      	ldr	r1, [pc, #68]	; (d520 <rng_json_write+0x434>)
    d4dc:	4628      	mov	r0, r5
    d4de:	f00b fb85 	bl	18bec <json_encode_object_entry>
    d4e2:	4306      	orrs	r6, r0
    }
    rc |= json_encode_object_finish(&json->encoder);
    d4e4:	4628      	mov	r0, r5
    d4e6:	f00b fd27 	bl	18f38 <json_encode_object_finish>
    json->encoder.je_wr_commas = 0;
    d4ea:	f894 3020 	ldrb.w	r3, [r4, #32]
    d4ee:	f36f 0300 	bfc	r3, #0, #1
    d4f2:	f884 3020 	strb.w	r3, [r4, #32]
    assert(rc == 0);
    d4f6:	4306      	orrs	r6, r0
    d4f8:	d108      	bne.n	d50c <rng_json_write+0x420>

    rng_write_line(json->encoder.je_arg, "\0", 1);
    d4fa:	2201      	movs	r2, #1
    d4fc:	4909      	ldr	r1, [pc, #36]	; (d524 <rng_json_write+0x438>)
    d4fe:	69e0      	ldr	r0, [r4, #28]
    d500:	f7ff fdd2 	bl	d0a8 <rng_write_line>

    return rc;
}
    d504:	4630      	mov	r0, r6
    d506:	b005      	add	sp, #20
    d508:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    assert(rc == 0);
    d50c:	2300      	movs	r3, #0
    d50e:	461a      	mov	r2, r3
    d510:	4619      	mov	r1, r3
    d512:	4618      	mov	r0, r3
    d514:	f7fb fd9a 	bl	904c <__assert_func>
    d518:	000231e8 	.word	0x000231e8
    d51c:	000231ec 	.word	0x000231ec
    d520:	000231f0 	.word	0x000231f0
    d524:	000231f4 	.word	0x000231f4

0000d528 <uwb_wcs_init>:
 * returns struct uwb_wcs_instance *
 */

struct uwb_wcs_instance *
uwb_wcs_init(struct uwb_wcs_instance * wcs, struct uwb_ccp_instance * ccp)
{
    d528:	b510      	push	{r4, lr}
    d52a:	460c      	mov	r4, r1
    if (wcs == NULL ) {
    d52c:	4603      	mov	r3, r0
    d52e:	b150      	cbz	r0, d546 <uwb_wcs_init+0x1e>
        wcs = (struct uwb_wcs_instance *) calloc(1, sizeof(struct uwb_wcs_instance));
        assert(wcs);
        wcs->status.selfmalloc = 1;
    }
    wcs->ccp = ccp;
    d530:	661c      	str	r4, [r3, #96]	; 0x60
    wcs->normalized_skew = DPL_FLOAT64_INIT(1.0l);
    d532:	2000      	movs	r0, #0
    d534:	490c      	ldr	r1, [pc, #48]	; (d568 <uwb_wcs_init+0x40>)
    d536:	e9c3 0110 	strd	r0, r1, [r3, #64]	; 0x40
    wcs->fractional_skew = DPL_FLOAT64_INIT(0.0l);
    d53a:	2000      	movs	r0, #0
    d53c:	2100      	movs	r1, #0
    d53e:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48

    return wcs;
}
    d542:	4618      	mov	r0, r3
    d544:	bd10      	pop	{r4, pc}
        wcs = (struct uwb_wcs_instance *) calloc(1, sizeof(struct uwb_wcs_instance));
    d546:	21a8      	movs	r1, #168	; 0xa8
    d548:	2001      	movs	r0, #1
    d54a:	f000 f918 	bl	d77e <calloc>
        assert(wcs);
    d54e:	4603      	mov	r3, r0
    d550:	b120      	cbz	r0, d55c <uwb_wcs_init+0x34>
        wcs->status.selfmalloc = 1;
    d552:	7802      	ldrb	r2, [r0, #0]
    d554:	f042 0201 	orr.w	r2, r2, #1
    d558:	7002      	strb	r2, [r0, #0]
    d55a:	e7e9      	b.n	d530 <uwb_wcs_init+0x8>
        assert(wcs);
    d55c:	2300      	movs	r3, #0
    d55e:	461a      	mov	r2, r3
    d560:	4619      	mov	r1, r3
    d562:	4618      	mov	r0, r3
    d564:	f7fb fd72 	bl	904c <__assert_func>
    d568:	3ff00000 	.word	0x3ff00000

0000d56c <uwb_wcs_free>:
 *
 * returns none
 */
void
uwb_wcs_free(struct uwb_wcs_instance * inst)
{
    d56c:	b510      	push	{r4, lr}
    assert(inst);
    d56e:	b168      	cbz	r0, d58c <uwb_wcs_free+0x20>
    d570:	4604      	mov	r4, r0
#ifndef __KERNEL__
#if MYNEWT_VAL(TIMESCALE_ENABLED)
    timescale_free(inst->timescale);
    d572:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
    d576:	f00c f86b 	bl	19650 <timescale_free>
#endif
#endif
    if (inst->status.selfmalloc)
    d57a:	7823      	ldrb	r3, [r4, #0]
    d57c:	f013 0f01 	tst.w	r3, #1
    d580:	d10a      	bne.n	d598 <uwb_wcs_free+0x2c>
        free(inst);
    else
        inst->status.initialized = 0;
    d582:	7823      	ldrb	r3, [r4, #0]
    d584:	f36f 0341 	bfc	r3, #1, #1
    d588:	7023      	strb	r3, [r4, #0]
}
    d58a:	bd10      	pop	{r4, pc}
    assert(inst);
    d58c:	2300      	movs	r3, #0
    d58e:	461a      	mov	r2, r3
    d590:	4619      	mov	r1, r3
    d592:	4618      	mov	r0, r3
    d594:	f7fb fd5a 	bl	904c <__assert_func>
        free(inst);
    d598:	4620      	mov	r0, r4
    d59a:	f000 f9eb 	bl	d974 <free>
    d59e:	e7f4      	b.n	d58a <uwb_wcs_free+0x1e>

0000d5a0 <uwb_wcs_set_postprocess>:
 * returns none
 */
void
uwb_wcs_set_postprocess(struct uwb_wcs_instance * wcs, dpl_event_fn * postprocess)
{
    if(!wcs) return;
    d5a0:	4603      	mov	r3, r0
    d5a2:	b150      	cbz	r0, d5ba <uwb_wcs_set_postprocess+0x1a>
    memset(ev, 0, sizeof(*ev));
    d5a4:	2200      	movs	r2, #0
    d5a6:	6502      	str	r2, [r0, #80]	; 0x50
    d5a8:	6542      	str	r2, [r0, #84]	; 0x54
    d5aa:	6582      	str	r2, [r0, #88]	; 0x58
    d5ac:	65c2      	str	r2, [r0, #92]	; 0x5c
    ev->ev.ev_cb = (os_event_fn *)fn;
    d5ae:	6541      	str	r1, [r0, #84]	; 0x54
    ev->ev.ev_arg = arg;
    d5b0:	6598      	str	r0, [r3, #88]	; 0x58
    dpl_event_init(&wcs->postprocess_ev, postprocess, (void *)wcs);
    wcs->config.postprocess = true;
    d5b2:	7902      	ldrb	r2, [r0, #4]
    d5b4:	f042 0201 	orr.w	r2, r2, #1
    d5b8:	7102      	strb	r2, [r0, #4]
}
    d5ba:	4770      	bx	lr

0000d5bc <uwb_wcs_dtu_time_adjust>:
 * @return dtu_time compensated.
 *
 */
uint64_t
uwb_wcs_dtu_time_adjust(struct uwb_wcs_instance * wcs, uint64_t dtu_time)
{
    d5bc:	4619      	mov	r1, r3
    if(!wcs) return dtu_time;
    d5be:	b1b8      	cbz	r0, d5f0 <uwb_wcs_dtu_time_adjust+0x34>
{
    d5c0:	b538      	push	{r3, r4, r5, lr}
    d5c2:	4603      	mov	r3, r0
    if (wcs->status.valid){
    d5c4:	7800      	ldrb	r0, [r0, #0]
    d5c6:	f010 0f04 	tst.w	r0, #4
    d5ca:	d00d      	beq.n	d5e8 <uwb_wcs_dtu_time_adjust+0x2c>
        dtu_time = (uint64_t) DPL_FLOAT64_INT(DPL_FLOAT64_MUL(wcs->normalized_skew,DPL_FLOAT64_I64_TO_F64(dtu_time)));
    d5cc:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
    d5d0:	4610      	mov	r0, r2
    d5d2:	f013 fe4d 	bl	21270 <__aeabi_ul2d>
    d5d6:	4602      	mov	r2, r0
    d5d8:	460b      	mov	r3, r1
    d5da:	4620      	mov	r0, r4
    d5dc:	4629      	mov	r1, r5
    d5de:	f013 fe7d 	bl	212dc <__aeabi_dmul>
    d5e2:	f014 fa2b 	bl	21a3c <__aeabi_d2lz>
    d5e6:	4602      	mov	r2, r0
    }

    return dtu_time & 0x00FFFFFFFFFFUL;
    d5e8:	4610      	mov	r0, r2
    d5ea:	f001 01ff 	and.w	r1, r1, #255	; 0xff
}
    d5ee:	bd38      	pop	{r3, r4, r5, pc}
    if(!wcs) return dtu_time;
    d5f0:	4610      	mov	r0, r2
}
    d5f2:	4770      	bx	lr

0000d5f4 <uwb_wcs_prediction>:
 * @param T interval over which to predict.
 * @return Clock master prediction for local epoch T
 */
dpl_float64_t
uwb_wcs_prediction(dpl_float64_t * x, dpl_float64_t T)
{
    d5f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    d5f6:	b087      	sub	sp, #28
    d5f8:	4605      	mov	r5, r0
    d5fa:	ec51 0b10 	vmov	r0, r1, d0
    // x = A * x;
    dpl_float64_t A[] = { DPL_FLOAT64_INIT(1.0l), T, DPL_FLOAT64_DIV(DPL_FLOAT64_MUL(T,T),DPL_FLOAT64_INIT(2.0l))};
    d5fe:	2200      	movs	r2, #0
    d600:	4b17      	ldr	r3, [pc, #92]	; (d660 <uwb_wcs_prediction+0x6c>)
    d602:	e9cd 2300 	strd	r2, r3, [sp]
    d606:	ed8d 0b02 	vstr	d0, [sp, #8]
    d60a:	ee10 2a10 	vmov	r2, s0
    d60e:	460b      	mov	r3, r1
    d610:	f013 fe64 	bl	212dc <__aeabi_dmul>
    d614:	2200      	movs	r2, #0
    d616:	4b13      	ldr	r3, [pc, #76]	; (d664 <uwb_wcs_prediction+0x70>)
    d618:	f013 fe60 	bl	212dc <__aeabi_dmul>
    d61c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    dpl_float64_t tmp = DPL_FLOAT64_INIT(0.0l);
    for (uint8_t i=0 ; i < sizeof(A)/sizeof(dpl_float64_t); i++ ){
    d620:	2400      	movs	r4, #0
    dpl_float64_t tmp = DPL_FLOAT64_INIT(0.0l);
    d622:	2600      	movs	r6, #0
    d624:	2700      	movs	r7, #0
    for (uint8_t i=0 ; i < sizeof(A)/sizeof(dpl_float64_t); i++ ){
    d626:	e014      	b.n	d652 <uwb_wcs_prediction+0x5e>
            tmp = DPL_FLOAT64_ADD(tmp,DPL_FLOAT64_MUL(A[i],x[i]));
    d628:	ab06      	add	r3, sp, #24
    d62a:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
    d62e:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
    d632:	e9d3 2300 	ldrd	r2, r3, [r3]
    d636:	e951 0106 	ldrd	r0, r1, [r1, #-24]
    d63a:	f013 fe4f 	bl	212dc <__aeabi_dmul>
    d63e:	4602      	mov	r2, r0
    d640:	460b      	mov	r3, r1
    d642:	4630      	mov	r0, r6
    d644:	4639      	mov	r1, r7
    d646:	f013 fc93 	bl	20f70 <__adddf3>
    d64a:	4606      	mov	r6, r0
    d64c:	460f      	mov	r7, r1
    for (uint8_t i=0 ; i < sizeof(A)/sizeof(dpl_float64_t); i++ ){
    d64e:	3401      	adds	r4, #1
    d650:	b2e4      	uxtb	r4, r4
    d652:	2c02      	cmp	r4, #2
    d654:	d9e8      	bls.n	d628 <uwb_wcs_prediction+0x34>
    }
    return tmp;
}
    d656:	ec47 6b10 	vmov	d0, r6, r7
    d65a:	b007      	add	sp, #28
    d65c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d65e:	bf00      	nop
    d660:	3ff00000 	.word	0x3ff00000
    d664:	3fe00000 	.word	0x3fe00000

0000d668 <uwb_wcs_local_to_master64>:
    if(!wcs) return 0xffffffffffffffffULL;
    d668:	b350      	cbz	r0, d6c0 <uwb_wcs_local_to_master64+0x58>
{
    d66a:	b510      	push	{r4, lr}
    d66c:	4604      	mov	r4, r0
    delta = ((dtu_time & 0x0FFFFFFFFFFUL) - wcs->local_epoch.lo) & 0x0FFFFFFFFFFUL;
    d66e:	6980      	ldr	r0, [r0, #24]
    d670:	7f21      	ldrb	r1, [r4, #28]
    d672:	1a10      	subs	r0, r2, r0
    d674:	eb63 0301 	sbc.w	r3, r3, r1
    d678:	4602      	mov	r2, r0
    d67a:	f003 01ff 	and.w	r1, r3, #255	; 0xff
    if (wcs->status.valid) {
    d67e:	7823      	ldrb	r3, [r4, #0]
    d680:	f013 0f04 	tst.w	r3, #4
    d684:	d016      	beq.n	d6b4 <uwb_wcs_local_to_master64+0x4c>
        interval = DPL_FLOAT64_DIV(DPL_FLOAT64_U64_TO_F64(delta), DPL_FLOAT64_INIT(MYNEWT_VAL(UWB_WCS_DTU)));
    d686:	f013 fdf3 	bl	21270 <__aeabi_ul2d>
    d68a:	a30f      	add	r3, pc, #60	; (adr r3, d6c8 <uwb_wcs_local_to_master64+0x60>)
    d68c:	e9d3 2300 	ldrd	r2, r3, [r3]
    d690:	f013 ff4e 	bl	21530 <__aeabi_ddiv>
        master_lo40 = (uint64_t) DPL_FLOAT64_INT(uwb_wcs_prediction(wcs->states.array, interval));
    d694:	ec41 0b10 	vmov	d0, r0, r1
    d698:	f104 0020 	add.w	r0, r4, #32
    d69c:	f7ff ffaa 	bl	d5f4 <uwb_wcs_prediction>
    d6a0:	ec51 0b10 	vmov	r0, r1, d0
    d6a4:	f014 f9ca 	bl	21a3c <__aeabi_d2lz>
    d6a8:	460b      	mov	r3, r1
    return (wcs->master_epoch.timestamp & 0xFFFFFF0000000000UL) + master_lo40;
    d6aa:	6961      	ldr	r1, [r4, #20]
    d6ac:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    d6b0:	4419      	add	r1, r3
}
    d6b2:	bd10      	pop	{r4, pc}
        master_lo40 = wcs->master_epoch.lo + delta;
    d6b4:	6920      	ldr	r0, [r4, #16]
    d6b6:	7d23      	ldrb	r3, [r4, #20]
    d6b8:	1880      	adds	r0, r0, r2
    d6ba:	eb43 0301 	adc.w	r3, r3, r1
    d6be:	e7f4      	b.n	d6aa <uwb_wcs_local_to_master64+0x42>
    if(!wcs) return 0xffffffffffffffffULL;
    d6c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d6c4:	4601      	mov	r1, r0
}
    d6c6:	4770      	bx	lr
    d6c8:	00000000 	.word	0x00000000
    d6cc:	422e8480 	.word	0x422e8480

0000d6d0 <uwb_wcs_local_to_master>:
{
    d6d0:	b508      	push	{r3, lr}
    assert(wcs);
    d6d2:	b118      	cbz	r0, d6dc <uwb_wcs_local_to_master+0xc>
    return uwb_wcs_local_to_master64(wcs, dtu_time) & 0x0FFFFFFFFFFUL;
    d6d4:	f7ff ffc8 	bl	d668 <uwb_wcs_local_to_master64>
}
    d6d8:	b2c9      	uxtb	r1, r1
    d6da:	bd08      	pop	{r3, pc}
    assert(wcs);
    d6dc:	2300      	movs	r3, #0
    d6de:	461a      	mov	r2, r3
    d6e0:	4619      	mov	r1, r3
    d6e2:	4618      	mov	r0, r3
    d6e4:	f7fb fcb2 	bl	904c <__assert_func>

0000d6e8 <uwb_wcs_read_systime_master64>:
{
    d6e8:	b538      	push	{r3, r4, r5, lr}
    d6ea:	4604      	mov	r4, r0
    struct uwb_ccp_instance *ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(inst, UWBEXT_CCP);
    d6ec:	2101      	movs	r1, #1
    d6ee:	f7fb fa88 	bl	8c02 <uwb_mac_find_cb_inst_ptr>
    struct uwb_wcs_instance *wcs = ccp->wcs;
    d6f2:	6e85      	ldr	r5, [r0, #104]	; 0x68
    return (dev->uw_funcs->uf_read_systime(dev));
    d6f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d6f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    d6f8:	4620      	mov	r0, r4
    d6fa:	4798      	blx	r3
    d6fc:	4602      	mov	r2, r0
    d6fe:	460b      	mov	r3, r1
    return uwb_wcs_local_to_master64(wcs, uwb_read_systime(inst));
    d700:	4628      	mov	r0, r5
    d702:	f7ff ffb1 	bl	d668 <uwb_wcs_local_to_master64>
}
    d706:	bd38      	pop	{r3, r4, r5, pc}

0000d708 <uwb_wcs_pkg_init>:
 *
 * @return void
 */
void
uwb_wcs_pkg_init(void)
{
    d708:	b538      	push	{r3, r4, r5, lr}
    int i;
    struct uwb_dev * udev;
    struct uwb_ccp_instance * ccp;
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    printf("{\"utime\": %"PRIu32",\"msg\": \"uwb_wcs_pkg_init\"}\n",
    d70a:	f000 fe12 	bl	e332 <dpl_cputime_get32>
    d70e:	4601      	mov	r1, r0
    d710:	480c      	ldr	r0, [pc, #48]	; (d744 <uwb_wcs_pkg_init+0x3c>)
    d712:	f000 fd89 	bl	e228 <printf>
           dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
#endif

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
    d716:	2400      	movs	r4, #0
    d718:	e000      	b.n	d71c <uwb_wcs_pkg_init+0x14>
    d71a:	3401      	adds	r4, #1
    d71c:	2c02      	cmp	r4, #2
    d71e:	dc10      	bgt.n	d742 <uwb_wcs_pkg_init+0x3a>
        udev = uwb_dev_idx_lookup(i);
    d720:	4620      	mov	r0, r4
    d722:	f7fb f9e9 	bl	8af8 <uwb_dev_idx_lookup>
        if (!udev) {
    d726:	2800      	cmp	r0, #0
    d728:	d0f7      	beq.n	d71a <uwb_wcs_pkg_init+0x12>
            continue;
        }
#if MYNEWT_VAL(UWB_CCP_ENABLED)
        ccp = (struct uwb_ccp_instance *)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_CCP);
    d72a:	2101      	movs	r1, #1
    d72c:	f7fb fa69 	bl	8c02 <uwb_mac_find_cb_inst_ptr>
        if (!ccp) {
    d730:	4605      	mov	r5, r0
    d732:	2800      	cmp	r0, #0
    d734:	d0f1      	beq.n	d71a <uwb_wcs_pkg_init+0x12>
            continue;
        }
        ccp->wcs = uwb_wcs_init(NULL, ccp);
    d736:	4601      	mov	r1, r0
    d738:	2000      	movs	r0, #0
    d73a:	f7ff fef5 	bl	d528 <uwb_wcs_init>
    d73e:	66a8      	str	r0, [r5, #104]	; 0x68
    d740:	e7eb      	b.n	d71a <uwb_wcs_pkg_init+0x12>
        wcs_chrdev_create(ccp->wcs);
#endif /* __KERNEL__ */
#endif
    }

}
    d742:	bd38      	pop	{r3, r4, r5, pc}
    d744:	000231f8 	.word	0x000231f8

0000d748 <uwb_wcs_pkg_down>:
 *
 * @return void
 */
int
uwb_wcs_pkg_down(int reason)
{
    d748:	b538      	push	{r3, r4, r5, lr}
    int i;
    struct uwb_dev * udev;
    struct uwb_ccp_instance * ccp;

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
    d74a:	2400      	movs	r4, #0
    d74c:	e000      	b.n	d750 <uwb_wcs_pkg_down+0x8>
    d74e:	3401      	adds	r4, #1
    d750:	2c02      	cmp	r4, #2
    d752:	dc12      	bgt.n	d77a <uwb_wcs_pkg_down+0x32>
        udev = uwb_dev_idx_lookup(i);
    d754:	4620      	mov	r0, r4
    d756:	f7fb f9cf 	bl	8af8 <uwb_dev_idx_lookup>
        if (!udev) {
    d75a:	2800      	cmp	r0, #0
    d75c:	d0f7      	beq.n	d74e <uwb_wcs_pkg_down+0x6>
        }
#if MYNEWT_VAL(UWB_CCP_ENABLED)
#ifdef __KERNEL__
        wcs_chrdev_destroy(i);
#endif /* __KERNEL__ */
        ccp = (struct uwb_ccp_instance *)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_CCP);
    d75e:	2101      	movs	r1, #1
    d760:	f7fb fa4f 	bl	8c02 <uwb_mac_find_cb_inst_ptr>
        if (!ccp) {
    d764:	4605      	mov	r5, r0
    d766:	2800      	cmp	r0, #0
    d768:	d0f1      	beq.n	d74e <uwb_wcs_pkg_down+0x6>
            continue;
        }
        if (ccp->wcs) {
    d76a:	6e80      	ldr	r0, [r0, #104]	; 0x68
    d76c:	2800      	cmp	r0, #0
    d76e:	d0ee      	beq.n	d74e <uwb_wcs_pkg_down+0x6>
            uwb_wcs_free(ccp->wcs);
    d770:	f7ff fefc 	bl	d56c <uwb_wcs_free>
            ccp->wcs = 0;
    d774:	2300      	movs	r3, #0
    d776:	66ab      	str	r3, [r5, #104]	; 0x68
    d778:	e7e9      	b.n	d74e <uwb_wcs_pkg_down+0x6>
        }
#endif
    }

    return 0;
}
    d77a:	2000      	movs	r0, #0
    d77c:	bd38      	pop	{r3, r4, r5, pc}

0000d77e <calloc>:
#include <stdlib.h>
#include <string.h>
#include <stdint.h>

void *calloc(size_t nmemb, size_t size)
{
    d77e:	b538      	push	{r3, r4, r5, lr}
	void *ptr;
        int nb;

        nb = sizeof(size_t) * 4;
        if (size >= SIZE_MAX >> nb || nmemb >= SIZE_MAX >> nb) {
    d780:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    d784:	4299      	cmp	r1, r3
    d786:	d80e      	bhi.n	d7a6 <calloc+0x28>
    d788:	4298      	cmp	r0, r3
    d78a:	d80e      	bhi.n	d7aa <calloc+0x2c>
            return NULL;
        }
	size *= nmemb;
    d78c:	fb00 f401 	mul.w	r4, r0, r1
	ptr = malloc(size);
    d790:	4620      	mov	r0, r4
    d792:	f000 f8b9 	bl	d908 <malloc>
	if (ptr)
    d796:	4605      	mov	r5, r0
    d798:	b118      	cbz	r0, d7a2 <calloc+0x24>
		memset(ptr, 0, size);
    d79a:	4622      	mov	r2, r4
    d79c:	2100      	movs	r1, #0
    d79e:	f000 f930 	bl	da02 <memset>

	return ptr;
}
    d7a2:	4628      	mov	r0, r5
    d7a4:	bd38      	pop	{r3, r4, r5, pc}
            return NULL;
    d7a6:	2500      	movs	r5, #0
    d7a8:	e7fb      	b.n	d7a2 <calloc+0x24>
    d7aa:	2500      	movs	r5, #0
    d7ac:	e7f9      	b.n	d7a2 <calloc+0x24>

0000d7ae <fwrite>:
    if (stream->vmt->read == NULL) return 0;
    return stream->vmt->read(stream, (char*)buf, size*nmemb) / size;
}

__extern_inline size_t fwrite(const void *buf, size_t size, size_t nmemb, FILE *stream)
{
    d7ae:	4684      	mov	ip, r0
    d7b0:	4618      	mov	r0, r3
    if (stream->vmt->write == NULL) return 0;
    d7b2:	681b      	ldr	r3, [r3, #0]
    d7b4:	681b      	ldr	r3, [r3, #0]
    d7b6:	b143      	cbz	r3, d7ca <fwrite+0x1c>
{
    d7b8:	b510      	push	{r4, lr}
    d7ba:	460c      	mov	r4, r1
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
    d7bc:	fb01 f202 	mul.w	r2, r1, r2
    d7c0:	4661      	mov	r1, ip
    d7c2:	4798      	blx	r3
    d7c4:	fbb0 f0f4 	udiv	r0, r0, r4
}
    d7c8:	bd10      	pop	{r4, pc}
    if (stream->vmt->write == NULL) return 0;
    d7ca:	2000      	movs	r0, #0
}
    d7cc:	4770      	bx	lr
	...

0000d7d0 <puts>:
{
	return fwrite(s, 1, strlen(s), f);
}

__extern_inline int puts(const char *s)
{
    d7d0:	b538      	push	{r3, r4, r5, lr}
    d7d2:	4604      	mov	r4, r0
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
    d7d4:	f000 f94c 	bl	da70 <strlen>
    d7d8:	4602      	mov	r2, r0
    d7da:	4b08      	ldr	r3, [pc, #32]	; (d7fc <puts+0x2c>)
    d7dc:	681d      	ldr	r5, [r3, #0]
    d7de:	462b      	mov	r3, r5
    d7e0:	2101      	movs	r1, #1
    d7e2:	4620      	mov	r0, r4
    d7e4:	f7ff ffe3 	bl	d7ae <fwrite>
    d7e8:	4604      	mov	r4, r0
    d7ea:	462b      	mov	r3, r5
    d7ec:	2201      	movs	r2, #1
    d7ee:	4611      	mov	r1, r2
    d7f0:	4803      	ldr	r0, [pc, #12]	; (d800 <puts+0x30>)
    d7f2:	f7ff ffdc 	bl	d7ae <fwrite>
}
    d7f6:	4420      	add	r0, r4
    d7f8:	bd38      	pop	{r3, r4, r5, pc}
    d7fa:	bf00      	nop
    d7fc:	00023224 	.word	0x00023224
    d800:	000233bc 	.word	0x000233bc

0000d804 <malloc_lock_nop>:
    },
    &__malloc_head,
    &__malloc_head
};

static bool malloc_lock_nop() {return true;}
    d804:	2001      	movs	r0, #1
    d806:	4770      	bx	lr

0000d808 <malloc_unlock_nop>:
static void malloc_unlock_nop() {}
    d808:	4770      	bx	lr

0000d80a <__malloc_from_block>:
static void *__malloc_from_block(struct free_arena_header *fp, size_t size)
{
    size_t fsize;
    struct free_arena_header *nfp, *na, *fpn, *fpp;

    fsize = fp->a.size;
    d80a:	6842      	ldr	r2, [r0, #4]

    /* We need the 2* to account for the larger requirements of a
       free block */
    if (fsize >= size + 2 * sizeof(struct arena_header)) {
    d80c:	f101 0320 	add.w	r3, r1, #32
    d810:	4293      	cmp	r3, r2
    d812:	d816      	bhi.n	d842 <__malloc_from_block+0x38>
{
    d814:	b430      	push	{r4, r5}
        /* Bigger block than required -- split block */
        nfp = (struct free_arena_header *)((char *)fp + size);
    d816:	1843      	adds	r3, r0, r1
        na = fp->a.next;
    d818:	6884      	ldr	r4, [r0, #8]

        nfp->a.type = ARENA_TYPE_FREE;
    d81a:	2501      	movs	r5, #1
    d81c:	5045      	str	r5, [r0, r1]
        nfp->a.size = fsize - size;
    d81e:	1a52      	subs	r2, r2, r1
    d820:	605a      	str	r2, [r3, #4]
        fp->a.type = ARENA_TYPE_USED;
    d822:	2200      	movs	r2, #0
    d824:	6002      	str	r2, [r0, #0]
        fp->a.size = size;
    d826:	6041      	str	r1, [r0, #4]

        /* Insert into all-block chain */
        nfp->a.prev = fp;
    d828:	60d8      	str	r0, [r3, #12]
        nfp->a.next = na;
    d82a:	609c      	str	r4, [r3, #8]
        na->a.prev = nfp;
    d82c:	60e3      	str	r3, [r4, #12]
        fp->a.next = nfp;
    d82e:	6083      	str	r3, [r0, #8]

        /* Replace current block on free chain */
        nfp->next_free = fpn = fp->next_free;
    d830:	6901      	ldr	r1, [r0, #16]
    d832:	6119      	str	r1, [r3, #16]
        nfp->prev_free = fpp = fp->prev_free;
    d834:	6942      	ldr	r2, [r0, #20]
    d836:	615a      	str	r2, [r3, #20]
        fpn->prev_free = nfp;
    d838:	614b      	str	r3, [r1, #20]
        fpp->next_free = nfp;
    d83a:	6113      	str	r3, [r2, #16]
        fp->a.type = ARENA_TYPE_USED; /* Allocate the whole block */
        remove_from_free_chain(fp);
    }

    return (void *)(&fp->a + 1);
}
    d83c:	3010      	adds	r0, #16
    d83e:	bc30      	pop	{r4, r5}
    d840:	4770      	bx	lr
        fp->a.type = ARENA_TYPE_USED; /* Allocate the whole block */
    d842:	2300      	movs	r3, #0
    d844:	6003      	str	r3, [r0, #0]
    ap = ah->prev_free;
    d846:	6942      	ldr	r2, [r0, #20]
    an = ah->next_free;
    d848:	6903      	ldr	r3, [r0, #16]
    ap->next_free = an;
    d84a:	6113      	str	r3, [r2, #16]
    an->prev_free = ap;
    d84c:	615a      	str	r2, [r3, #20]
}
    d84e:	3010      	adds	r0, #16
    d850:	4770      	bx	lr
	...

0000d854 <__free_block>:

static struct free_arena_header *__free_block(struct free_arena_header *ah)
{
    d854:	4603      	mov	r3, r0
    struct free_arena_header *pah, *nah;

    pah = ah->a.prev;
    d856:	68c0      	ldr	r0, [r0, #12]
    nah = ah->a.next;
    d858:	6899      	ldr	r1, [r3, #8]
    if (pah->a.type == ARENA_TYPE_FREE &&
    d85a:	6802      	ldr	r2, [r0, #0]
    d85c:	2a01      	cmp	r2, #1
    d85e:	d00d      	beq.n	d87c <__free_block+0x28>

        ah = pah;
        pah = ah->a.prev;
    } else {
        /* Need to add this block to the free chain */
        ah->a.type = ARENA_TYPE_FREE;
    d860:	2201      	movs	r2, #1
    d862:	601a      	str	r2, [r3, #0]

        ah->next_free = __malloc_head.next_free;
    d864:	4a13      	ldr	r2, [pc, #76]	; (d8b4 <__free_block+0x60>)
    d866:	6910      	ldr	r0, [r2, #16]
    d868:	6118      	str	r0, [r3, #16]
        ah->prev_free = &__malloc_head;
    d86a:	615a      	str	r2, [r3, #20]
        __malloc_head.next_free = ah;
    d86c:	6113      	str	r3, [r2, #16]
        ah->next_free->prev_free = ah;
    d86e:	691a      	ldr	r2, [r3, #16]
    d870:	6153      	str	r3, [r2, #20]
    d872:	4618      	mov	r0, r3
    }

    /* In either of the previous cases, we might be able to merge
       with the subsequent block... */
    if (nah->a.type == ARENA_TYPE_FREE &&
    d874:	680b      	ldr	r3, [r1, #0]
    d876:	2b01      	cmp	r3, #1
    d878:	d00b      	beq.n	d892 <__free_block+0x3e>
        remove_from_chains(nah);
    }

    /* Return the block that contains the called block */
    return ah;
}
    d87a:	4770      	bx	lr
        (char *)pah + pah->a.size == (char *)ah) {
    d87c:	6842      	ldr	r2, [r0, #4]
    d87e:	eb00 0c02 	add.w	ip, r0, r2
    if (pah->a.type == ARENA_TYPE_FREE &&
    d882:	459c      	cmp	ip, r3
    d884:	d1ec      	bne.n	d860 <__free_block+0xc>
        pah->a.size += ah->a.size;
    d886:	685b      	ldr	r3, [r3, #4]
    d888:	441a      	add	r2, r3
    d88a:	6042      	str	r2, [r0, #4]
        pah->a.next = nah;
    d88c:	6081      	str	r1, [r0, #8]
        nah->a.prev = pah;
    d88e:	60c8      	str	r0, [r1, #12]
        pah = ah->a.prev;
    d890:	e7f0      	b.n	d874 <__free_block+0x20>
        (char *)ah + ah->a.size == (char *)nah) {
    d892:	6843      	ldr	r3, [r0, #4]
    d894:	18c2      	adds	r2, r0, r3
    if (nah->a.type == ARENA_TYPE_FREE &&
    d896:	428a      	cmp	r2, r1
    d898:	d1ef      	bne.n	d87a <__free_block+0x26>
        ah->a.size += nah->a.size;
    d89a:	684a      	ldr	r2, [r1, #4]
    d89c:	4413      	add	r3, r2
    d89e:	6043      	str	r3, [r0, #4]
    ap = ah->prev_free;
    d8a0:	694a      	ldr	r2, [r1, #20]
    an = ah->next_free;
    d8a2:	690b      	ldr	r3, [r1, #16]
    ap->next_free = an;
    d8a4:	6113      	str	r3, [r2, #16]
    an->prev_free = ap;
    d8a6:	615a      	str	r2, [r3, #20]
    ap = ah->a.prev;
    d8a8:	68ca      	ldr	r2, [r1, #12]
    an = ah->a.next;
    d8aa:	688b      	ldr	r3, [r1, #8]
    ap->a.next = an;
    d8ac:	6093      	str	r3, [r2, #8]
    an->a.prev = ap;
    d8ae:	60da      	str	r2, [r3, #12]
    return ah;
    d8b0:	e7e3      	b.n	d87a <__free_block+0x26>
    d8b2:	bf00      	nop
    d8b4:	200005ac 	.word	0x200005ac

0000d8b8 <add_malloc_block>:
void add_malloc_block(void *buf, size_t size)
{
    struct free_arena_header *fp = buf;
    struct free_arena_header *pah;

    if (size < sizeof(struct free_arena_header))
    d8b8:	2917      	cmp	r1, #23
    d8ba:	d91e      	bls.n	d8fa <add_malloc_block+0x42>
{
    d8bc:	b510      	push	{r4, lr}
    d8be:	4604      	mov	r4, r0
        return; // Too small.

    /* Insert the block into the management chains.  We need to set
       up the size and the main block list pointer, the rest of
       the work is logically identical to free(). */
    fp->a.type = ARENA_TYPE_FREE;
    d8c0:	2301      	movs	r3, #1
    d8c2:	6003      	str	r3, [r0, #0]
    fp->a.size = size;
    d8c4:	6041      	str	r1, [r0, #4]

    if (!malloc_lock())
    d8c6:	4b0d      	ldr	r3, [pc, #52]	; (d8fc <add_malloc_block+0x44>)
    d8c8:	681b      	ldr	r3, [r3, #0]
    d8ca:	4798      	blx	r3
    d8cc:	b1a0      	cbz	r0, d8f8 <add_malloc_block+0x40>

    /* We need to insert this into the main block list in the proper
       place -- this list is required to be sorted.  Since we most likely
       get memory assignments in ascending order, search backwards for
       the proper place. */
    for (pah = __malloc_head.a.prev; pah->a.type != ARENA_TYPE_HEAD;
    d8ce:	4b0c      	ldr	r3, [pc, #48]	; (d900 <add_malloc_block+0x48>)
    d8d0:	68db      	ldr	r3, [r3, #12]
    d8d2:	e000      	b.n	d8d6 <add_malloc_block+0x1e>
         pah = pah->a.prev) {
    d8d4:	68db      	ldr	r3, [r3, #12]
    for (pah = __malloc_head.a.prev; pah->a.type != ARENA_TYPE_HEAD;
    d8d6:	681a      	ldr	r2, [r3, #0]
    d8d8:	2a02      	cmp	r2, #2
    d8da:	d001      	beq.n	d8e0 <add_malloc_block+0x28>
        if (pah < fp)
    d8dc:	42a3      	cmp	r3, r4
    d8de:	d2f9      	bcs.n	d8d4 <add_malloc_block+0x1c>
            break;
    }

    /* Now pah points to the node that should be the predecessor of
       the new node */
    fp->a.next = pah->a.next;
    d8e0:	689a      	ldr	r2, [r3, #8]
    d8e2:	60a2      	str	r2, [r4, #8]
    fp->a.prev = pah;
    d8e4:	60e3      	str	r3, [r4, #12]
    pah->a.next = fp;
    d8e6:	609c      	str	r4, [r3, #8]
    fp->a.next->a.prev = fp;
    d8e8:	68a3      	ldr	r3, [r4, #8]
    d8ea:	60dc      	str	r4, [r3, #12]

    /* Insert into the free chain and coalesce with adjacent blocks */
    fp = __free_block(fp);
    d8ec:	4620      	mov	r0, r4
    d8ee:	f7ff ffb1 	bl	d854 <__free_block>

    malloc_unlock();
    d8f2:	4b04      	ldr	r3, [pc, #16]	; (d904 <add_malloc_block+0x4c>)
    d8f4:	681b      	ldr	r3, [r3, #0]
    d8f6:	4798      	blx	r3
}
    d8f8:	bd10      	pop	{r4, pc}
    d8fa:	4770      	bx	lr
    d8fc:	200005c4 	.word	0x200005c4
    d900:	200005ac 	.word	0x200005ac
    d904:	200005c8 	.word	0x200005c8

0000d908 <malloc>:
{
    d908:	b538      	push	{r3, r4, r5, lr}
    if (size == 0 || size > (SIZE_MAX - sizeof(struct arena_header))) {
    d90a:	1e43      	subs	r3, r0, #1
    d90c:	f113 0f12 	cmn.w	r3, #18
    d910:	d825      	bhi.n	d95e <malloc+0x56>
    size = (size + 2 * sizeof(struct arena_header) - 1) & ARENA_SIZE_MASK;
    d912:	301f      	adds	r0, #31
    d914:	f020 040f 	bic.w	r4, r0, #15
    if (!malloc_lock())
    d918:	4b13      	ldr	r3, [pc, #76]	; (d968 <malloc+0x60>)
    d91a:	681b      	ldr	r3, [r3, #0]
    d91c:	4798      	blx	r3
    d91e:	b300      	cbz	r0, d962 <malloc+0x5a>
    void *result = NULL;
    d920:	2500      	movs	r5, #0
    d922:	e00d      	b.n	d940 <malloc+0x38>
            result = __malloc_from_block(fp, size);
    d924:	4621      	mov	r1, r4
    d926:	f7ff ff70 	bl	d80a <__malloc_from_block>
    d92a:	4605      	mov	r5, r0
    if (result == NULL) {
    d92c:	b995      	cbnz	r5, d954 <malloc+0x4c>
        more_mem = _sbrk(size);
    d92e:	4620      	mov	r0, r4
    d930:	f7fa fc22 	bl	8178 <_sbrk>
        if (more_mem != (void *)-1) {
    d934:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    d938:	d00c      	beq.n	d954 <malloc+0x4c>
            add_malloc_block(more_mem, size);
    d93a:	4621      	mov	r1, r4
    d93c:	f7ff ffbc 	bl	d8b8 <add_malloc_block>
    for (fp = __malloc_head.next_free; fp->a.type != ARENA_TYPE_HEAD;
    d940:	4b0a      	ldr	r3, [pc, #40]	; (d96c <malloc+0x64>)
    d942:	6918      	ldr	r0, [r3, #16]
    d944:	6803      	ldr	r3, [r0, #0]
    d946:	2b02      	cmp	r3, #2
    d948:	d0f0      	beq.n	d92c <malloc+0x24>
        if (fp->a.size >= size) {
    d94a:	6843      	ldr	r3, [r0, #4]
    d94c:	42a3      	cmp	r3, r4
    d94e:	d2e9      	bcs.n	d924 <malloc+0x1c>
         fp = fp->next_free) {
    d950:	6900      	ldr	r0, [r0, #16]
    d952:	e7f7      	b.n	d944 <malloc+0x3c>
    malloc_unlock();
    d954:	4b06      	ldr	r3, [pc, #24]	; (d970 <malloc+0x68>)
    d956:	681b      	ldr	r3, [r3, #0]
    d958:	4798      	blx	r3
}
    d95a:	4628      	mov	r0, r5
    d95c:	bd38      	pop	{r3, r4, r5, pc}
        return NULL;
    d95e:	2500      	movs	r5, #0
    d960:	e7fb      	b.n	d95a <malloc+0x52>
        return NULL;
    d962:	2500      	movs	r5, #0
    d964:	e7f9      	b.n	d95a <malloc+0x52>
    d966:	bf00      	nop
    d968:	200005c4 	.word	0x200005c4
    d96c:	200005ac 	.word	0x200005ac
    d970:	200005c8 	.word	0x200005c8

0000d974 <free>:

void free(void *ptr)
{
    struct free_arena_header *ah;

    if (!ptr)
    d974:	b170      	cbz	r0, d994 <free+0x20>
{
    d976:	b510      	push	{r4, lr}
        return;

    ah = (struct free_arena_header *)
    d978:	f1a0 0410 	sub.w	r4, r0, #16

#ifdef DEBUG_MALLOC
    assert(ah->a.type == ARENA_TYPE_USED);
#endif

    if (!malloc_lock())
    d97c:	4b06      	ldr	r3, [pc, #24]	; (d998 <free+0x24>)
    d97e:	681b      	ldr	r3, [r3, #0]
    d980:	4798      	blx	r3
    d982:	b900      	cbnz	r0, d986 <free+0x12>
        return;

    /* Merge into adjacent free blocks */
    ah = __free_block(ah);
    malloc_unlock();
}
    d984:	bd10      	pop	{r4, pc}
    ah = __free_block(ah);
    d986:	4620      	mov	r0, r4
    d988:	f7ff ff64 	bl	d854 <__free_block>
    malloc_unlock();
    d98c:	4b03      	ldr	r3, [pc, #12]	; (d99c <free+0x28>)
    d98e:	681b      	ldr	r3, [r3, #0]
    d990:	4798      	blx	r3
    d992:	e7f7      	b.n	d984 <free+0x10>
    d994:	4770      	bx	lr
    d996:	bf00      	nop
    d998:	200005c4 	.word	0x200005c4
    d99c:	200005c8 	.word	0x200005c8

0000d9a0 <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7)
    asm (".syntax unified                   \n"
    d9a0:	b470      	push	{r4, r5, r6}
    d9a2:	f04f 0500 	mov.w	r5, #0
    d9a6:	f022 0603 	bic.w	r6, r2, #3
    d9aa:	e005      	b.n	d9b8 <test1>

0000d9ac <loop1>:
    d9ac:	5943      	ldr	r3, [r0, r5]
    d9ae:	594c      	ldr	r4, [r1, r5]
    d9b0:	42a3      	cmp	r3, r4
    d9b2:	d104      	bne.n	d9be <res1>
    d9b4:	f105 0504 	add.w	r5, r5, #4

0000d9b8 <test1>:
    d9b8:	42b5      	cmp	r5, r6
    d9ba:	d1f7      	bne.n	d9ac <loop1>
    d9bc:	e00d      	b.n	d9da <test2>

0000d9be <res1>:
    d9be:	ba1b      	rev	r3, r3
    d9c0:	ba24      	rev	r4, r4
    d9c2:	1b1b      	subs	r3, r3, r4
    d9c4:	bf8c      	ite	hi
    d9c6:	2301      	movhi	r3, #1
    d9c8:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
    d9cc:	e009      	b.n	d9e2 <done>

0000d9ce <loop2>:
    d9ce:	5d43      	ldrb	r3, [r0, r5]
    d9d0:	5d4c      	ldrb	r4, [r1, r5]
    d9d2:	1b1b      	subs	r3, r3, r4
    d9d4:	d105      	bne.n	d9e2 <done>
    d9d6:	f105 0501 	add.w	r5, r5, #1

0000d9da <test2>:
    d9da:	4295      	cmp	r5, r2
    d9dc:	d1f7      	bne.n	d9ce <loop2>
    d9de:	f04f 0300 	mov.w	r3, #0

0000d9e2 <done>:
    d9e2:	4618      	mov	r0, r3
    d9e4:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
    d9e6:	4770      	bx	lr

0000d9e8 <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
    d9e8:	e001      	b.n	d9ee <test1>

0000d9ea <loop1>:
    d9ea:	588b      	ldr	r3, [r1, r2]
    d9ec:	5083      	str	r3, [r0, r2]

0000d9ee <test1>:
    d9ee:	3a04      	subs	r2, #4
    d9f0:	d5fb      	bpl.n	d9ea <loop1>
    d9f2:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
    d9f6:	e001      	b.n	d9fc <test2>

0000d9f8 <loop2>:
    d9f8:	5c8b      	ldrb	r3, [r1, r2]
    d9fa:	5483      	strb	r3, [r0, r2]

0000d9fc <test2>:
    d9fc:	3a01      	subs	r2, #1
    d9fe:	d5fb      	bpl.n	d9f8 <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
    da00:	4770      	bx	lr

0000da02 <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
    da02:	b410      	push	{r4}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
    da04:	4684      	mov	ip, r0
    da06:	b2c9      	uxtb	r1, r1
    da08:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    da0c:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    da10:	eb1c 0302 	adds.w	r3, ip, r2
    da14:	2403      	movs	r4, #3
    da16:	4023      	ands	r3, r4
    da18:	1ad3      	subs	r3, r2, r3
    da1a:	d40e      	bmi.n	da3a <memset+0x38>
    da1c:	e002      	b.n	da24 <memset+0x22>
    da1e:	3a01      	subs	r2, #1
    da20:	f80c 1002 	strb.w	r1, [ip, r2]
    da24:	429a      	cmp	r2, r3
    da26:	d1fa      	bne.n	da1e <memset+0x1c>
    da28:	e001      	b.n	da2e <memset+0x2c>
    da2a:	f84c 1002 	str.w	r1, [ip, r2]
    da2e:	3a04      	subs	r2, #4
    da30:	d5fb      	bpl.n	da2a <memset+0x28>
    da32:	3204      	adds	r2, #4
    da34:	e001      	b.n	da3a <memset+0x38>
    da36:	f80c 1002 	strb.w	r1, [ip, r2]
    da3a:	3a01      	subs	r2, #1
    da3c:	d5fb      	bpl.n	da36 <memset+0x34>
		*q++ = c;
	}
#endif

	return dst;
}
    da3e:	f85d 4b04 	ldr.w	r4, [sp], #4
    da42:	4770      	bx	lr

0000da44 <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
    da44:	2000      	movs	r0, #0
    da46:	4770      	bx	lr

0000da48 <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
    da48:	b510      	push	{r4, lr}
    da4a:	4608      	mov	r0, r1
    da4c:	4614      	mov	r4, r2
    console_write(bp, n);
    da4e:	4611      	mov	r1, r2
    da50:	f001 fd78 	bl	f544 <console_write>
    return n;
}
    da54:	4620      	mov	r0, r4
    da56:	bd10      	pop	{r4, pc}

0000da58 <strcmp>:
 */

#include <string.h>

int strcmp(const char *s1, const char *s2)
{
    da58:	4684      	mov	ip, r0
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;

	while (1) {
		d = (int)(ch = *c1++) - (int)*c2++;
    da5a:	f89c 2000 	ldrb.w	r2, [ip]
    da5e:	f10c 0c01 	add.w	ip, ip, #1
    da62:	7808      	ldrb	r0, [r1, #0]
    da64:	3101      	adds	r1, #1
		if (d || !ch)
    da66:	1a10      	subs	r0, r2, r0
    da68:	d101      	bne.n	da6e <strcmp+0x16>
    da6a:	2a00      	cmp	r2, #0
    da6c:	d1f5      	bne.n	da5a <strcmp+0x2>
			break;
	}

	return d;
}
    da6e:	4770      	bx	lr

0000da70 <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
    da70:	4603      	mov	r3, r0
	while (*ss)
    da72:	e000      	b.n	da76 <strlen+0x6>
		ss++;
    da74:	3301      	adds	r3, #1
	while (*ss)
    da76:	781a      	ldrb	r2, [r3, #0]
    da78:	2a00      	cmp	r2, #0
    da7a:	d1fb      	bne.n	da74 <strlen+0x4>
	return ss - s;
}
    da7c:	1a18      	subs	r0, r3, r0
    da7e:	4770      	bx	lr

0000da80 <strncpy>:
 */

#include <string.h>

char *strncpy(char *dst, const char *src, size_t n)
{
    da80:	b510      	push	{r4, lr}
    da82:	4604      	mov	r4, r0
	char *q = dst;
	const char *p = src;
	char ch;

	while (n) {
    da84:	b132      	cbz	r2, da94 <strncpy+0x14>
		n--;
    da86:	3a01      	subs	r2, #1
		*q++ = ch = *p++;
    da88:	f811 3b01 	ldrb.w	r3, [r1], #1
    da8c:	f800 3b01 	strb.w	r3, [r0], #1
		if (!ch)
    da90:	2b00      	cmp	r3, #0
    da92:	d1f7      	bne.n	da84 <strncpy+0x4>
			break;
	}

	/* The specs say strncpy() fills the entire buffer with NUL.  Sigh. */
	memset(q, 0, n);
    da94:	2100      	movs	r1, #0
    da96:	f7ff ffb4 	bl	da02 <memset>

	return dst;
}
    da9a:	4620      	mov	r0, r4
    da9c:	bd10      	pop	{r4, pc}

0000da9e <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
    da9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    daa2:	b085      	sub	sp, #20
    daa4:	4606      	mov	r6, r0
    daa6:	460f      	mov	r7, r1
    daa8:	4691      	mov	r9, r2
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
    daaa:	6853      	ldr	r3, [r2, #4]
    daac:	9302      	str	r3, [sp, #8]
    unsigned long long int d = 1;
    daae:	2501      	movs	r5, #1
    dab0:	2400      	movs	r4, #0
    while (num / d >= p->base)
    dab2:	e004      	b.n	dabe <ui2a+0x20>
        d *= p->base;
    dab4:	fb04 f303 	mul.w	r3, r4, r3
    dab8:	fba5 5402 	umull	r5, r4, r5, r2
    dabc:	441c      	add	r4, r3
    while (num / d >= p->base)
    dabe:	462a      	mov	r2, r5
    dac0:	4623      	mov	r3, r4
    dac2:	4630      	mov	r0, r6
    dac4:	4639      	mov	r1, r7
    dac6:	f013 ffa1 	bl	21a0c <__aeabi_uldivmod>
    daca:	f899 3003 	ldrb.w	r3, [r9, #3]
    dace:	461a      	mov	r2, r3
    dad0:	4298      	cmp	r0, r3
    dad2:	f171 0100 	sbcs.w	r1, r1, #0
    dad6:	d2ed      	bcs.n	dab4 <ui2a+0x16>
    int n = 0;
    dad8:	f04f 0a00 	mov.w	sl, #0
    dadc:	e00b      	b.n	daf6 <ui2a+0x58>
    while (d != 0) {
        unsigned long long  dgt = num / d;
        num %= d;
        d /= p->base;
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    dade:	2230      	movs	r2, #48	; 0x30
    dae0:	9b02      	ldr	r3, [sp, #8]
    dae2:	4490      	add	r8, r2
    dae4:	f803 8b01 	strb.w	r8, [r3], #1
            ++n;
    dae8:	f10a 0a01 	add.w	sl, sl, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    daec:	9302      	str	r3, [sp, #8]
    daee:	4605      	mov	r5, r0
    daf0:	460c      	mov	r4, r1
    daf2:	9e00      	ldr	r6, [sp, #0]
    daf4:	9f01      	ldr	r7, [sp, #4]
    while (d != 0) {
    daf6:	ea55 0304 	orrs.w	r3, r5, r4
    dafa:	d031      	beq.n	db60 <ui2a+0xc2>
        unsigned long long  dgt = num / d;
    dafc:	462a      	mov	r2, r5
    dafe:	4623      	mov	r3, r4
    db00:	4630      	mov	r0, r6
    db02:	4639      	mov	r1, r7
    db04:	f013 ff82 	bl	21a0c <__aeabi_uldivmod>
    db08:	4680      	mov	r8, r0
    db0a:	9103      	str	r1, [sp, #12]
        num %= d;
    db0c:	462a      	mov	r2, r5
    db0e:	4623      	mov	r3, r4
    db10:	4630      	mov	r0, r6
    db12:	4639      	mov	r1, r7
    db14:	f013 ff7a 	bl	21a0c <__aeabi_uldivmod>
    db18:	9200      	str	r2, [sp, #0]
    db1a:	9301      	str	r3, [sp, #4]
        d /= p->base;
    db1c:	f899 b003 	ldrb.w	fp, [r9, #3]
    db20:	465a      	mov	r2, fp
    db22:	2300      	movs	r3, #0
    db24:	4628      	mov	r0, r5
    db26:	4621      	mov	r1, r4
    db28:	f013 ff70 	bl	21a0c <__aeabi_uldivmod>
        if (n || dgt > 0 || d == 0) {
    db2c:	f1ba 0f00 	cmp.w	sl, #0
    db30:	d107      	bne.n	db42 <ui2a+0xa4>
    db32:	42ae      	cmp	r6, r5
    db34:	eb77 0304 	sbcs.w	r3, r7, r4
    db38:	d203      	bcs.n	db42 <ui2a+0xa4>
    db3a:	455d      	cmp	r5, fp
    db3c:	f174 0300 	sbcs.w	r3, r4, #0
    db40:	d2d5      	bcs.n	daee <ui2a+0x50>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    db42:	f1b8 0f0a 	cmp.w	r8, #10
    db46:	9b03      	ldr	r3, [sp, #12]
    db48:	f173 0300 	sbcs.w	r3, r3, #0
    db4c:	d3c7      	bcc.n	dade <ui2a+0x40>
    db4e:	f899 3002 	ldrb.w	r3, [r9, #2]
    db52:	f013 0f04 	tst.w	r3, #4
    db56:	d001      	beq.n	db5c <ui2a+0xbe>
    db58:	2237      	movs	r2, #55	; 0x37
    db5a:	e7c1      	b.n	dae0 <ui2a+0x42>
    db5c:	2257      	movs	r2, #87	; 0x57
    db5e:	e7bf      	b.n	dae0 <ui2a+0x42>
        }
    }
    *bf = 0;
    db60:	2300      	movs	r3, #0
    db62:	9a02      	ldr	r2, [sp, #8]
    db64:	7013      	strb	r3, [r2, #0]
}
    db66:	b005      	add	sp, #20
    db68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000db6c <i2a>:

static void i2a(long long int num, struct param *p)
{
    db6c:	b508      	push	{r3, lr}
    if (num < 0) {
    db6e:	2900      	cmp	r1, #0
    db70:	db02      	blt.n	db78 <i2a+0xc>
        num = -num;
        p->sign = 1;
    }
    ui2a(num, p);
    db72:	f7ff ff94 	bl	da9e <ui2a>
}
    db76:	bd08      	pop	{r3, pc}
        num = -num;
    db78:	4240      	negs	r0, r0
    db7a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
    db7e:	7893      	ldrb	r3, [r2, #2]
    db80:	f043 0301 	orr.w	r3, r3, #1
    db84:	7093      	strb	r3, [r2, #2]
    db86:	e7f4      	b.n	db72 <i2a+0x6>

0000db88 <a2d>:

static int a2d(char ch)
{
    if (ch >= '0' && ch <= '9')
    db88:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    db8c:	b2db      	uxtb	r3, r3
    db8e:	2b09      	cmp	r3, #9
    db90:	d90b      	bls.n	dbaa <a2d+0x22>
        return ch - '0';
    else if (ch >= 'a' && ch <= 'f')
    db92:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
    db96:	b2db      	uxtb	r3, r3
    db98:	2b05      	cmp	r3, #5
    db9a:	d908      	bls.n	dbae <a2d+0x26>
        return ch - 'a' + 10;
    else if (ch >= 'A' && ch <= 'F')
    db9c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
    dba0:	b2db      	uxtb	r3, r3
    dba2:	2b05      	cmp	r3, #5
    dba4:	d805      	bhi.n	dbb2 <a2d+0x2a>
        return ch - 'A' + 10;
    dba6:	3837      	subs	r0, #55	; 0x37
    dba8:	4770      	bx	lr
        return ch - '0';
    dbaa:	3830      	subs	r0, #48	; 0x30
    dbac:	4770      	bx	lr
        return ch - 'a' + 10;
    dbae:	3857      	subs	r0, #87	; 0x57
    dbb0:	4770      	bx	lr
    else
        return -1;
    dbb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    dbb6:	4770      	bx	lr

0000dbb8 <a2i>:

static char a2i(char ch, const char **src, int base, unsigned char *nump)
{
    dbb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dbbc:	4604      	mov	r4, r0
    dbbe:	460f      	mov	r7, r1
    dbc0:	4615      	mov	r5, r2
    dbc2:	4698      	mov	r8, r3
    const char *p = *src;
    dbc4:	f8d1 9000 	ldr.w	r9, [r1]
    int num = 0;
    dbc8:	2600      	movs	r6, #0
    int digit;
    while ((digit = a2d(ch)) >= 0) {
    dbca:	e005      	b.n	dbd8 <a2i+0x20>
        if (digit > base)
            break;
        num = num * base + digit;
    dbcc:	fb05 0606 	mla	r6, r5, r6, r0
        ch = *p++;
    dbd0:	46cc      	mov	ip, r9
    dbd2:	f81c 4b01 	ldrb.w	r4, [ip], #1
    dbd6:	46e1      	mov	r9, ip
    while ((digit = a2d(ch)) >= 0) {
    dbd8:	4620      	mov	r0, r4
    dbda:	f7ff ffd5 	bl	db88 <a2d>
    dbde:	2800      	cmp	r0, #0
    dbe0:	db01      	blt.n	dbe6 <a2i+0x2e>
        if (digit > base)
    dbe2:	42a8      	cmp	r0, r5
    dbe4:	ddf2      	ble.n	dbcc <a2i+0x14>
    }
    *src = p;
    dbe6:	f8c7 9000 	str.w	r9, [r7]
    *nump = num;
    dbea:	f888 6000 	strb.w	r6, [r8]
    return ch;
}
    dbee:	4620      	mov	r0, r4
    dbf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000dbf4 <putf>:

static int putf(FILE *putp, char c)
{
    dbf4:	b500      	push	{lr}
    dbf6:	b083      	sub	sp, #12

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
    dbf8:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
    dbfc:	6803      	ldr	r3, [r0, #0]
    dbfe:	681b      	ldr	r3, [r3, #0]
    dc00:	b143      	cbz	r3, dc14 <putf+0x20>
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
    dc02:	2201      	movs	r2, #1
    dc04:	f10d 0107 	add.w	r1, sp, #7
    dc08:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
    dc0a:	2801      	cmp	r0, #1
    dc0c:	d102      	bne.n	dc14 <putf+0x20>
    if (fputc(c, putp) == EOF)
        return 0;
    else
        return 1;
}
    dc0e:	b003      	add	sp, #12
    dc10:	f85d fb04 	ldr.w	pc, [sp], #4
        return 0;
    dc14:	2000      	movs	r0, #0
    dc16:	e7fa      	b.n	dc0e <putf+0x1a>

0000dc18 <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
    dc18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dc1c:	4607      	mov	r7, r0
    dc1e:	4688      	mov	r8, r1
    unsigned written = 0;
    char ch;
    int n = p->width;
    dc20:	780c      	ldrb	r4, [r1, #0]
    char *bf = p->bf;
    dc22:	684b      	ldr	r3, [r1, #4]

    /* Number of filling characters */
    while (*bf++ && n > 0)
    dc24:	e000      	b.n	dc28 <putchw+0x10>
        n--;
    dc26:	3c01      	subs	r4, #1
    while (*bf++ && n > 0)
    dc28:	f813 2b01 	ldrb.w	r2, [r3], #1
    dc2c:	b10a      	cbz	r2, dc32 <putchw+0x1a>
    dc2e:	2c00      	cmp	r4, #0
    dc30:	dcf9      	bgt.n	dc26 <putchw+0xe>
    if (p->sign)
    dc32:	f898 3002 	ldrb.w	r3, [r8, #2]
    dc36:	f013 0f01 	tst.w	r3, #1
    dc3a:	d000      	beq.n	dc3e <putchw+0x26>
        n--;
    dc3c:	3c01      	subs	r4, #1
    if (p->alt && p->base == 16)
    dc3e:	f8b8 3002 	ldrh.w	r3, [r8, #2]
    dc42:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
    dc46:	b29b      	uxth	r3, r3
    dc48:	f241 0202 	movw	r2, #4098	; 0x1002
    dc4c:	4293      	cmp	r3, r2
    dc4e:	d021      	beq.n	dc94 <putchw+0x7c>
        n -= 2;
    else if (p->alt && p->base == 8)
    dc50:	f640 0202 	movw	r2, #2050	; 0x802
    dc54:	4293      	cmp	r3, r2
    dc56:	d01f      	beq.n	dc98 <putchw+0x80>
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
    dc58:	f8d8 3000 	ldr.w	r3, [r8]
    dc5c:	4e36      	ldr	r6, [pc, #216]	; (dd38 <putchw+0x120>)
    dc5e:	401e      	ands	r6, r3
    dc60:	b316      	cbz	r6, dca8 <putchw+0x90>
    unsigned written = 0;
    dc62:	2600      	movs	r6, #0
        while (n-- > 0)
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
    dc64:	f898 3002 	ldrb.w	r3, [r8, #2]
    dc68:	f013 0f01 	tst.w	r3, #1
    dc6c:	d121      	bne.n	dcb2 <putchw+0x9a>
        written += putf(putp, '-');

    /* Alternate */
    if (p->alt && p->base == 16) {
    dc6e:	f8b8 3002 	ldrh.w	r3, [r8, #2]
    dc72:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
    dc76:	b29b      	uxth	r3, r3
    dc78:	f241 0202 	movw	r2, #4098	; 0x1002
    dc7c:	4293      	cmp	r3, r2
    dc7e:	d01e      	beq.n	dcbe <putchw+0xa6>
        written += putf(putp, '0');
        written += putf(putp, (p->uc ? 'X' : 'x'));
    } else if (p->alt && p->base == 8) {
    dc80:	f640 0202 	movw	r2, #2050	; 0x802
    dc84:	4293      	cmp	r3, r2
    dc86:	d02c      	beq.n	dce2 <putchw+0xca>
        written += putf(putp, '0');
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
    dc88:	f898 3001 	ldrb.w	r3, [r8, #1]
    dc8c:	bbab      	cbnz	r3, dcfa <putchw+0xe2>
        while (n-- > 0)
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
    dc8e:	f8d8 5004 	ldr.w	r5, [r8, #4]
    while ((ch = *bf++))
    dc92:	e03b      	b.n	dd0c <putchw+0xf4>
        n -= 2;
    dc94:	3c02      	subs	r4, #2
    dc96:	e7df      	b.n	dc58 <putchw+0x40>
        n--;
    dc98:	3c01      	subs	r4, #1
    dc9a:	e7dd      	b.n	dc58 <putchw+0x40>
            written += putf(putp, ' ');
    dc9c:	2120      	movs	r1, #32
    dc9e:	4638      	mov	r0, r7
    dca0:	f7ff ffa8 	bl	dbf4 <putf>
    dca4:	4406      	add	r6, r0
        while (n-- > 0)
    dca6:	462c      	mov	r4, r5
    dca8:	1e65      	subs	r5, r4, #1
    dcaa:	2c00      	cmp	r4, #0
    dcac:	dcf6      	bgt.n	dc9c <putchw+0x84>
    dcae:	462c      	mov	r4, r5
    dcb0:	e7d8      	b.n	dc64 <putchw+0x4c>
        written += putf(putp, '-');
    dcb2:	212d      	movs	r1, #45	; 0x2d
    dcb4:	4638      	mov	r0, r7
    dcb6:	f7ff ff9d 	bl	dbf4 <putf>
    dcba:	4406      	add	r6, r0
    dcbc:	e7d7      	b.n	dc6e <putchw+0x56>
        written += putf(putp, '0');
    dcbe:	2130      	movs	r1, #48	; 0x30
    dcc0:	4638      	mov	r0, r7
    dcc2:	f7ff ff97 	bl	dbf4 <putf>
    dcc6:	4406      	add	r6, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
    dcc8:	f898 3002 	ldrb.w	r3, [r8, #2]
    dccc:	f013 0f04 	tst.w	r3, #4
    dcd0:	d005      	beq.n	dcde <putchw+0xc6>
    dcd2:	2158      	movs	r1, #88	; 0x58
    dcd4:	4638      	mov	r0, r7
    dcd6:	f7ff ff8d 	bl	dbf4 <putf>
    dcda:	4406      	add	r6, r0
    dcdc:	e7d4      	b.n	dc88 <putchw+0x70>
    dcde:	2178      	movs	r1, #120	; 0x78
    dce0:	e7f8      	b.n	dcd4 <putchw+0xbc>
        written += putf(putp, '0');
    dce2:	2130      	movs	r1, #48	; 0x30
    dce4:	4638      	mov	r0, r7
    dce6:	f7ff ff85 	bl	dbf4 <putf>
    dcea:	4406      	add	r6, r0
    dcec:	e7cc      	b.n	dc88 <putchw+0x70>
            written += putf(putp, '0');
    dcee:	2130      	movs	r1, #48	; 0x30
    dcf0:	4638      	mov	r0, r7
    dcf2:	f7ff ff7f 	bl	dbf4 <putf>
    dcf6:	4406      	add	r6, r0
        while (n-- > 0)
    dcf8:	462c      	mov	r4, r5
    dcfa:	1e65      	subs	r5, r4, #1
    dcfc:	2c00      	cmp	r4, #0
    dcfe:	dcf6      	bgt.n	dcee <putchw+0xd6>
    dd00:	462c      	mov	r4, r5
    dd02:	e7c4      	b.n	dc8e <putchw+0x76>
        written += putf(putp, ch);
    dd04:	4638      	mov	r0, r7
    dd06:	f7ff ff75 	bl	dbf4 <putf>
    dd0a:	4406      	add	r6, r0
    while ((ch = *bf++))
    dd0c:	f815 1b01 	ldrb.w	r1, [r5], #1
    dd10:	2900      	cmp	r1, #0
    dd12:	d1f7      	bne.n	dd04 <putchw+0xec>

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
    dd14:	f898 3002 	ldrb.w	r3, [r8, #2]
    dd18:	f013 0f08 	tst.w	r3, #8
    dd1c:	d108      	bne.n	dd30 <putchw+0x118>
        while (n-- > 0)
            written += putf(putp, ' ');
    }
    
    return written;
}
    dd1e:	4630      	mov	r0, r6
    dd20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            written += putf(putp, ' ');
    dd24:	2120      	movs	r1, #32
    dd26:	4638      	mov	r0, r7
    dd28:	f7ff ff64 	bl	dbf4 <putf>
    dd2c:	4406      	add	r6, r0
        while (n-- > 0)
    dd2e:	462c      	mov	r4, r5
    dd30:	1e65      	subs	r5, r4, #1
    dd32:	2c00      	cmp	r4, #0
    dd34:	dcf6      	bgt.n	dd24 <putchw+0x10c>
    dd36:	e7f2      	b.n	dd1e <putchw+0x106>
    dd38:	0008ff00 	.word	0x0008ff00

0000dd3c <intarg>:
static unsigned long long
intarg(int lng, int sign, va_list *va)
{
    unsigned long long val;

    switch (lng) {
    dd3c:	b160      	cbz	r0, dd58 <intarg+0x1c>
    dd3e:	2801      	cmp	r0, #1
    dd40:	d018      	beq.n	dd74 <intarg+0x38>
        }
        break;

    case 2:
    default:
        if (sign) {
    dd42:	b329      	cbz	r1, dd90 <intarg+0x54>
            val = va_arg(*va, long long);
    dd44:	6813      	ldr	r3, [r2, #0]
    dd46:	3307      	adds	r3, #7
    dd48:	f023 0307 	bic.w	r3, r3, #7
    dd4c:	f103 0108 	add.w	r1, r3, #8
    dd50:	6011      	str	r1, [r2, #0]
    dd52:	6818      	ldr	r0, [r3, #0]
    dd54:	6859      	ldr	r1, [r3, #4]
    dd56:	4770      	bx	lr
        if (sign) {
    dd58:	b131      	cbz	r1, dd68 <intarg+0x2c>
            val = va_arg(*va, int);
    dd5a:	6813      	ldr	r3, [r2, #0]
    dd5c:	1d19      	adds	r1, r3, #4
    dd5e:	6011      	str	r1, [r2, #0]
    dd60:	6819      	ldr	r1, [r3, #0]
    dd62:	4608      	mov	r0, r1
    dd64:	17c9      	asrs	r1, r1, #31
    dd66:	4770      	bx	lr
            val = va_arg(*va, unsigned int);
    dd68:	6813      	ldr	r3, [r2, #0]
    dd6a:	1d19      	adds	r1, r3, #4
    dd6c:	6011      	str	r1, [r2, #0]
    dd6e:	6818      	ldr	r0, [r3, #0]
    dd70:	2100      	movs	r1, #0
    dd72:	4770      	bx	lr
        if (sign) {
    dd74:	b131      	cbz	r1, dd84 <intarg+0x48>
            val = va_arg(*va, long);
    dd76:	6813      	ldr	r3, [r2, #0]
    dd78:	1d19      	adds	r1, r3, #4
    dd7a:	6011      	str	r1, [r2, #0]
    dd7c:	6819      	ldr	r1, [r3, #0]
    dd7e:	4608      	mov	r0, r1
    dd80:	17c9      	asrs	r1, r1, #31
    dd82:	4770      	bx	lr
            val = va_arg(*va, unsigned long);
    dd84:	6813      	ldr	r3, [r2, #0]
    dd86:	1d19      	adds	r1, r3, #4
    dd88:	6011      	str	r1, [r2, #0]
    dd8a:	6818      	ldr	r0, [r3, #0]
    dd8c:	2100      	movs	r1, #0
    dd8e:	4770      	bx	lr
        } else {
            val = va_arg(*va, unsigned long long);
    dd90:	6813      	ldr	r3, [r2, #0]
    dd92:	3307      	adds	r3, #7
    dd94:	f023 0307 	bic.w	r3, r3, #7
    dd98:	f103 0108 	add.w	r1, r3, #8
    dd9c:	6011      	str	r1, [r2, #0]
    dd9e:	6818      	ldr	r0, [r3, #0]
    dda0:	6859      	ldr	r1, [r3, #4]
        }
        break;
    }

    return val;
}
    dda2:	4770      	bx	lr

0000dda4 <tfp_format>:

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
    dda4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    dda8:	b08a      	sub	sp, #40	; 0x28
    ddaa:	4606      	mov	r6, r0
    ddac:	9101      	str	r1, [sp, #4]
    ddae:	9200      	str	r2, [sp, #0]
    double d;
    int n;
#endif
    int i;

    p.bf = bf;
    ddb0:	ab02      	add	r3, sp, #8
    ddb2:	9309      	str	r3, [sp, #36]	; 0x24
    size_t written = 0;
    ddb4:	2500      	movs	r5, #0

    while ((ch = *(fmt++))) {
    ddb6:	9b01      	ldr	r3, [sp, #4]
    ddb8:	1c5a      	adds	r2, r3, #1
    ddba:	9201      	str	r2, [sp, #4]
    ddbc:	7819      	ldrb	r1, [r3, #0]
    ddbe:	2900      	cmp	r1, #0
    ddc0:	f000 8227 	beq.w	e212 <tfp_format+0x46e>
        if (ch != '%') {
    ddc4:	2925      	cmp	r1, #37	; 0x25
    ddc6:	d004      	beq.n	ddd2 <tfp_format+0x2e>
            written += putf(putp, ch);
    ddc8:	4630      	mov	r0, r6
    ddca:	f7ff ff13 	bl	dbf4 <putf>
    ddce:	4405      	add	r5, r0
    ddd0:	e7f1      	b.n	ddb6 <tfp_format+0x12>
        } else {
            /* Init parameter struct */
            p.lz = 0;
    ddd2:	2300      	movs	r3, #0
    ddd4:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
            p.alt = 0;
    ddd8:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    dddc:	f363 0241 	bfi	r2, r3, #1, #1
    dde0:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
            p.width = 0;
    dde4:	f88d 3020 	strb.w	r3, [sp, #32]
            p.sign = 0;
    dde8:	b2d2      	uxtb	r2, r2
    ddea:	f363 0200 	bfi	r2, r3, #0, #1
    ddee:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
            p.left = 0;
    ddf2:	b2d2      	uxtb	r2, r2
    ddf4:	f363 02c3 	bfi	r2, r3, #3, #1
    ddf8:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
            p.uc = 0;
    ddfc:	b2d2      	uxtb	r2, r2
    ddfe:	f363 0282 	bfi	r2, r3, #2, #1
    de02:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
            lng = 0;

            /* Flags */
            while ((ch = *(fmt++))) {
    de06:	9b01      	ldr	r3, [sp, #4]
    de08:	1c5a      	adds	r2, r3, #1
    de0a:	9201      	str	r2, [sp, #4]
    de0c:	781c      	ldrb	r4, [r3, #0]
    de0e:	b144      	cbz	r4, de22 <tfp_format+0x7e>
                switch (ch) {
    de10:	2c2d      	cmp	r4, #45	; 0x2d
    de12:	f000 80de 	beq.w	dfd2 <tfp_format+0x22e>
    de16:	2c30      	cmp	r4, #48	; 0x30
    de18:	f000 80ca 	beq.w	dfb0 <tfp_format+0x20c>
    de1c:	2c23      	cmp	r4, #35	; 0x23
    de1e:	f000 80d1 	beq.w	dfc4 <tfp_format+0x220>
                }
                break;
            }

            /* Width */
            if (ch == '*') {
    de22:	2c2a      	cmp	r4, #42	; 0x2a
    de24:	f000 80df 	beq.w	dfe6 <tfp_format+0x242>
                    p.width = UCHAR_MAX;
                } else if (i > 0) {
                    p.width = i;
                }
                ch = *(fmt++);
            } else if (ch >= '0' && ch <= '9') {
    de28:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    de2c:	b2db      	uxtb	r3, r3
    de2e:	2b09      	cmp	r3, #9
    de30:	f240 80ed 	bls.w	e00e <tfp_format+0x26a>
                ch = a2i(ch, &fmt, 10, &(p.width));
            }
            if (ch == 'l') {
    de34:	2c6c      	cmp	r4, #108	; 0x6c
    de36:	f000 80f2 	beq.w	e01e <tfp_format+0x27a>
            lng = 0;
    de3a:	2000      	movs	r0, #0
                    ch = *(fmt++);
                    lng = 2;
                }
            }

            if (ch == 'z') {
    de3c:	2c7a      	cmp	r4, #122	; 0x7a
    de3e:	f000 80fb 	beq.w	e038 <tfp_format+0x294>
                ch = *(fmt++);
            }

            switch (ch) {
    de42:	2c00      	cmp	r4, #0
    de44:	f000 81e5 	beq.w	e212 <tfp_format+0x46e>
    de48:	2c78      	cmp	r4, #120	; 0x78
    de4a:	d8b4      	bhi.n	ddb6 <tfp_format+0x12>
    de4c:	2c25      	cmp	r4, #37	; 0x25
    de4e:	d3b2      	bcc.n	ddb6 <tfp_format+0x12>
    de50:	f1a4 0325 	sub.w	r3, r4, #37	; 0x25
    de54:	2b53      	cmp	r3, #83	; 0x53
    de56:	d8ae      	bhi.n	ddb6 <tfp_format+0x12>
    de58:	a201      	add	r2, pc, #4	; (adr r2, de60 <tfp_format+0xbc>)
    de5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    de5e:	bf00      	nop
    de60:	0000e207 	.word	0x0000e207
    de64:	0000ddb7 	.word	0x0000ddb7
    de68:	0000ddb7 	.word	0x0000ddb7
    de6c:	0000ddb7 	.word	0x0000ddb7
    de70:	0000ddb7 	.word	0x0000ddb7
    de74:	0000ddb7 	.word	0x0000ddb7
    de78:	0000ddb7 	.word	0x0000ddb7
    de7c:	0000ddb7 	.word	0x0000ddb7
    de80:	0000ddb7 	.word	0x0000ddb7
    de84:	0000ddb7 	.word	0x0000ddb7
    de88:	0000ddb7 	.word	0x0000ddb7
    de8c:	0000ddb7 	.word	0x0000ddb7
    de90:	0000ddb7 	.word	0x0000ddb7
    de94:	0000ddb7 	.word	0x0000ddb7
    de98:	0000ddb7 	.word	0x0000ddb7
    de9c:	0000ddb7 	.word	0x0000ddb7
    dea0:	0000ddb7 	.word	0x0000ddb7
    dea4:	0000ddb7 	.word	0x0000ddb7
    dea8:	0000ddb7 	.word	0x0000ddb7
    deac:	0000ddb7 	.word	0x0000ddb7
    deb0:	0000ddb7 	.word	0x0000ddb7
    deb4:	0000ddb7 	.word	0x0000ddb7
    deb8:	0000ddb7 	.word	0x0000ddb7
    debc:	0000ddb7 	.word	0x0000ddb7
    dec0:	0000ddb7 	.word	0x0000ddb7
    dec4:	0000ddb7 	.word	0x0000ddb7
    dec8:	0000ddb7 	.word	0x0000ddb7
    decc:	0000ddb7 	.word	0x0000ddb7
    ded0:	0000ddb7 	.word	0x0000ddb7
    ded4:	0000ddb7 	.word	0x0000ddb7
    ded8:	0000ddb7 	.word	0x0000ddb7
    dedc:	0000ddb7 	.word	0x0000ddb7
    dee0:	0000ddb7 	.word	0x0000ddb7
    dee4:	0000ddb7 	.word	0x0000ddb7
    dee8:	0000ddb7 	.word	0x0000ddb7
    deec:	0000ddb7 	.word	0x0000ddb7
    def0:	0000ddb7 	.word	0x0000ddb7
    def4:	0000ddb7 	.word	0x0000ddb7
    def8:	0000ddb7 	.word	0x0000ddb7
    defc:	0000ddb7 	.word	0x0000ddb7
    df00:	0000ddb7 	.word	0x0000ddb7
    df04:	0000ddb7 	.word	0x0000ddb7
    df08:	0000ddb7 	.word	0x0000ddb7
    df0c:	0000ddb7 	.word	0x0000ddb7
    df10:	0000ddb7 	.word	0x0000ddb7
    df14:	0000ddb7 	.word	0x0000ddb7
    df18:	0000ddb7 	.word	0x0000ddb7
    df1c:	0000ddb7 	.word	0x0000ddb7
    df20:	0000ddb7 	.word	0x0000ddb7
    df24:	0000ddb7 	.word	0x0000ddb7
    df28:	0000ddb7 	.word	0x0000ddb7
    df2c:	0000e083 	.word	0x0000e083
    df30:	0000ddb7 	.word	0x0000ddb7
    df34:	0000ddb7 	.word	0x0000ddb7
    df38:	0000ddb7 	.word	0x0000ddb7
    df3c:	0000ddb7 	.word	0x0000ddb7
    df40:	0000ddb7 	.word	0x0000ddb7
    df44:	0000ddb7 	.word	0x0000ddb7
    df48:	0000ddb7 	.word	0x0000ddb7
    df4c:	0000ddb7 	.word	0x0000ddb7
    df50:	0000ddb7 	.word	0x0000ddb7
    df54:	0000ddb7 	.word	0x0000ddb7
    df58:	0000e119 	.word	0x0000e119
    df5c:	0000e063 	.word	0x0000e063
    df60:	0000ddb7 	.word	0x0000ddb7
    df64:	0000e145 	.word	0x0000e145
    df68:	0000ddb7 	.word	0x0000ddb7
    df6c:	0000ddb7 	.word	0x0000ddb7
    df70:	0000e063 	.word	0x0000e063
    df74:	0000ddb7 	.word	0x0000ddb7
    df78:	0000ddb7 	.word	0x0000ddb7
    df7c:	0000ddb7 	.word	0x0000ddb7
    df80:	0000ddb7 	.word	0x0000ddb7
    df84:	0000ddb7 	.word	0x0000ddb7
    df88:	0000e0b7 	.word	0x0000e0b7
    df8c:	0000e0d7 	.word	0x0000e0d7
    df90:	0000ddb7 	.word	0x0000ddb7
    df94:	0000ddb7 	.word	0x0000ddb7
    df98:	0000e12b 	.word	0x0000e12b
    df9c:	0000ddb7 	.word	0x0000ddb7
    dfa0:	0000e043 	.word	0x0000e043
    dfa4:	0000ddb7 	.word	0x0000ddb7
    dfa8:	0000ddb7 	.word	0x0000ddb7
    dfac:	0000e083 	.word	0x0000e083
                    if (!p.left) {
    dfb0:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    dfb4:	f013 0f08 	tst.w	r3, #8
    dfb8:	f47f af25 	bne.w	de06 <tfp_format+0x62>
                        p.lz = 1;
    dfbc:	2301      	movs	r3, #1
    dfbe:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
    dfc2:	e720      	b.n	de06 <tfp_format+0x62>
                    p.alt = 1;
    dfc4:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    dfc8:	f043 0302 	orr.w	r3, r3, #2
    dfcc:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    continue;
    dfd0:	e719      	b.n	de06 <tfp_format+0x62>
                    p.left = 1;
    dfd2:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    dfd6:	f043 0308 	orr.w	r3, r3, #8
    dfda:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    p.lz = 0;
    dfde:	2300      	movs	r3, #0
    dfe0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
    dfe4:	e70f      	b.n	de06 <tfp_format+0x62>
                i = intarg(0, 1, &va);
    dfe6:	466a      	mov	r2, sp
    dfe8:	2101      	movs	r1, #1
    dfea:	2000      	movs	r0, #0
    dfec:	f7ff fea6 	bl	dd3c <intarg>
                if (i > UCHAR_MAX) {
    dff0:	28ff      	cmp	r0, #255	; 0xff
    dff2:	dd07      	ble.n	e004 <tfp_format+0x260>
                    p.width = UCHAR_MAX;
    dff4:	23ff      	movs	r3, #255	; 0xff
    dff6:	f88d 3020 	strb.w	r3, [sp, #32]
                ch = *(fmt++);
    dffa:	9b01      	ldr	r3, [sp, #4]
    dffc:	1c5a      	adds	r2, r3, #1
    dffe:	9201      	str	r2, [sp, #4]
    e000:	781c      	ldrb	r4, [r3, #0]
    e002:	e717      	b.n	de34 <tfp_format+0x90>
                } else if (i > 0) {
    e004:	2800      	cmp	r0, #0
    e006:	ddf8      	ble.n	dffa <tfp_format+0x256>
                    p.width = i;
    e008:	f88d 0020 	strb.w	r0, [sp, #32]
    e00c:	e7f5      	b.n	dffa <tfp_format+0x256>
                ch = a2i(ch, &fmt, 10, &(p.width));
    e00e:	ab08      	add	r3, sp, #32
    e010:	220a      	movs	r2, #10
    e012:	a901      	add	r1, sp, #4
    e014:	4620      	mov	r0, r4
    e016:	f7ff fdcf 	bl	dbb8 <a2i>
    e01a:	4604      	mov	r4, r0
    e01c:	e70a      	b.n	de34 <tfp_format+0x90>
                ch = *(fmt++);
    e01e:	9b01      	ldr	r3, [sp, #4]
    e020:	1c5a      	adds	r2, r3, #1
    e022:	9201      	str	r2, [sp, #4]
    e024:	781c      	ldrb	r4, [r3, #0]
                if (ch == 'l') {
    e026:	2c6c      	cmp	r4, #108	; 0x6c
    e028:	d001      	beq.n	e02e <tfp_format+0x28a>
                lng = 1;
    e02a:	2001      	movs	r0, #1
    e02c:	e706      	b.n	de3c <tfp_format+0x98>
                    ch = *(fmt++);
    e02e:	1c9a      	adds	r2, r3, #2
    e030:	9201      	str	r2, [sp, #4]
    e032:	785c      	ldrb	r4, [r3, #1]
                    lng = 2;
    e034:	2002      	movs	r0, #2
    e036:	e701      	b.n	de3c <tfp_format+0x98>
                ch = *(fmt++);
    e038:	9b01      	ldr	r3, [sp, #4]
    e03a:	1c5a      	adds	r2, r3, #1
    e03c:	9201      	str	r2, [sp, #4]
    e03e:	781c      	ldrb	r4, [r3, #0]
    e040:	e6ff      	b.n	de42 <tfp_format+0x9e>
            case 0:
                goto abort;
            case 'u':
                p.base = 10;
    e042:	230a      	movs	r3, #10
    e044:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
    e048:	466a      	mov	r2, sp
    e04a:	2100      	movs	r1, #0
    e04c:	f7ff fe76 	bl	dd3c <intarg>
    e050:	aa08      	add	r2, sp, #32
    e052:	f7ff fd24 	bl	da9e <ui2a>
                written += putchw(putp, &p);
    e056:	a908      	add	r1, sp, #32
    e058:	4630      	mov	r0, r6
    e05a:	f7ff fddd 	bl	dc18 <putchw>
    e05e:	4405      	add	r5, r0
                break;
    e060:	e6a9      	b.n	ddb6 <tfp_format+0x12>
            case 'd':
            case 'i':
                p.base = 10;
    e062:	230a      	movs	r3, #10
    e064:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                i2a(intarg(lng, 1, &va), &p);
    e068:	466a      	mov	r2, sp
    e06a:	2101      	movs	r1, #1
    e06c:	f7ff fe66 	bl	dd3c <intarg>
    e070:	aa08      	add	r2, sp, #32
    e072:	f7ff fd7b 	bl	db6c <i2a>
                written += putchw(putp, &p);
    e076:	a908      	add	r1, sp, #32
    e078:	4630      	mov	r0, r6
    e07a:	f7ff fdcd 	bl	dc18 <putchw>
    e07e:	4405      	add	r5, r0
                break;
    e080:	e699      	b.n	ddb6 <tfp_format+0x12>
            case 'x':
            case 'X':
                p.base = 16;
    e082:	2310      	movs	r3, #16
    e084:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                p.uc = (ch == 'X');
    e088:	2c58      	cmp	r4, #88	; 0x58
    e08a:	bf14      	ite	ne
    e08c:	2400      	movne	r4, #0
    e08e:	2401      	moveq	r4, #1
    e090:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    e094:	f364 0382 	bfi	r3, r4, #2, #1
    e098:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                ui2a(intarg(lng, 0, &va), &p);
    e09c:	466a      	mov	r2, sp
    e09e:	2100      	movs	r1, #0
    e0a0:	f7ff fe4c 	bl	dd3c <intarg>
    e0a4:	aa08      	add	r2, sp, #32
    e0a6:	f7ff fcfa 	bl	da9e <ui2a>
                written += putchw(putp, &p);
    e0aa:	a908      	add	r1, sp, #32
    e0ac:	4630      	mov	r0, r6
    e0ae:	f7ff fdb3 	bl	dc18 <putchw>
    e0b2:	4405      	add	r5, r0
                break;
    e0b4:	e67f      	b.n	ddb6 <tfp_format+0x12>
            case 'o':
                p.base = 8;
    e0b6:	2308      	movs	r3, #8
    e0b8:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
    e0bc:	466a      	mov	r2, sp
    e0be:	2100      	movs	r1, #0
    e0c0:	f7ff fe3c 	bl	dd3c <intarg>
    e0c4:	aa08      	add	r2, sp, #32
    e0c6:	f7ff fcea 	bl	da9e <ui2a>
                written += putchw(putp, &p);
    e0ca:	a908      	add	r1, sp, #32
    e0cc:	4630      	mov	r0, r6
    e0ce:	f7ff fda3 	bl	dc18 <putchw>
    e0d2:	4405      	add	r5, r0
                break;
    e0d4:	e66f      	b.n	ddb6 <tfp_format+0x12>
            case 'p':
                v = va_arg(va, void *);
    e0d6:	9b00      	ldr	r3, [sp, #0]
    e0d8:	1d1a      	adds	r2, r3, #4
    e0da:	9200      	str	r2, [sp, #0]
    e0dc:	6818      	ldr	r0, [r3, #0]
                p.base = 16;
    e0de:	2310      	movs	r3, #16
    e0e0:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a((uintptr_t)v, &p);
    e0e4:	aa08      	add	r2, sp, #32
    e0e6:	2100      	movs	r1, #0
    e0e8:	f7ff fcd9 	bl	da9e <ui2a>
                p.width = 2 * sizeof(void*);
    e0ec:	2308      	movs	r3, #8
    e0ee:	f88d 3020 	strb.w	r3, [sp, #32]
                p.lz = 1;
    e0f2:	2301      	movs	r3, #1
    e0f4:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                written += putf(putp, '0');
    e0f8:	2130      	movs	r1, #48	; 0x30
    e0fa:	4630      	mov	r0, r6
    e0fc:	f7ff fd7a 	bl	dbf4 <putf>
    e100:	4405      	add	r5, r0
                written += putf(putp, 'x');
    e102:	2178      	movs	r1, #120	; 0x78
    e104:	4630      	mov	r0, r6
    e106:	f7ff fd75 	bl	dbf4 <putf>
    e10a:	4405      	add	r5, r0
                written += putchw(putp, &p);
    e10c:	a908      	add	r1, sp, #32
    e10e:	4630      	mov	r0, r6
    e110:	f7ff fd82 	bl	dc18 <putchw>
    e114:	4405      	add	r5, r0
                break;
    e116:	e64e      	b.n	ddb6 <tfp_format+0x12>
            case 'c':
                written += putf(putp, (char)(va_arg(va, int)));
    e118:	9b00      	ldr	r3, [sp, #0]
    e11a:	1d1a      	adds	r2, r3, #4
    e11c:	9200      	str	r2, [sp, #0]
    e11e:	7819      	ldrb	r1, [r3, #0]
    e120:	4630      	mov	r0, r6
    e122:	f7ff fd67 	bl	dbf4 <putf>
    e126:	4405      	add	r5, r0
                break;
    e128:	e645      	b.n	ddb6 <tfp_format+0x12>
            case 's':
                p.bf = va_arg(va, char *);
    e12a:	9b00      	ldr	r3, [sp, #0]
    e12c:	1d1a      	adds	r2, r3, #4
    e12e:	9200      	str	r2, [sp, #0]
    e130:	681b      	ldr	r3, [r3, #0]
    e132:	9309      	str	r3, [sp, #36]	; 0x24
                written += putchw(putp, &p);
    e134:	a908      	add	r1, sp, #32
    e136:	4630      	mov	r0, r6
    e138:	f7ff fd6e 	bl	dc18 <putchw>
    e13c:	4405      	add	r5, r0
                p.bf = bf;
    e13e:	ab02      	add	r3, sp, #8
    e140:	9309      	str	r3, [sp, #36]	; 0x24
                break;
    e142:	e638      	b.n	ddb6 <tfp_format+0x12>
#if MYNEWT_VAL(FLOAT_USER)
            case 'f':
                p.base = 10;
    e144:	230a      	movs	r3, #10
    e146:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                d = va_arg(va, double);
    e14a:	9b00      	ldr	r3, [sp, #0]
    e14c:	3307      	adds	r3, #7
    e14e:	f023 0307 	bic.w	r3, r3, #7
    e152:	f103 0208 	add.w	r2, r3, #8
    e156:	9200      	str	r2, [sp, #0]
    e158:	e9d3 8900 	ldrd	r8, r9, [r3]
                /* Convert to an int to get the integer part of the number. */
                n = d;
    e15c:	4640      	mov	r0, r8
    e15e:	4649      	mov	r1, r9
    e160:	f013 fb6c 	bl	2183c <__aeabi_d2iz>
    e164:	4604      	mov	r4, r0
                /* Convert to ascii */
                i2a(n, &p);
    e166:	aa08      	add	r2, sp, #32
    e168:	17c1      	asrs	r1, r0, #31
    e16a:	f7ff fcff 	bl	db6c <i2a>
                /* When the double was converted to an int it was truncated
                 * towards 0.  If the number is in the range (-1, 0), the
                 * negative sign was lost.  Preserve the sign in this case.
                 */
                if (d < 0.0) {
    e16e:	2200      	movs	r2, #0
    e170:	2300      	movs	r3, #0
    e172:	4640      	mov	r0, r8
    e174:	4649      	mov	r1, r9
    e176:	f013 fb23 	bl	217c0 <__aeabi_dcmplt>
    e17a:	bbc8      	cbnz	r0, e1f0 <tfp_format+0x44c>
                    p.sign = 1;
                }
                /* Ignore left align for integer part */
                p.left = 0;
    e17c:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    e180:	f36f 03c3 	bfc	r3, #3, #1
    e184:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                /* Subtract width for decimal part and decimal point */
                if (p.width >= 4) {
    e188:	f89d 3020 	ldrb.w	r3, [sp, #32]
    e18c:	2b03      	cmp	r3, #3
    e18e:	d936      	bls.n	e1fe <tfp_format+0x45a>
                    p.width -= 4;
    e190:	3b04      	subs	r3, #4
    e192:	f88d 3020 	strb.w	r3, [sp, #32]
                } else {
                    p.width = 0;
                }
                /* Write integer part to console */
                written += putchw(putp, &p);
    e196:	a908      	add	r1, sp, #32
    e198:	4630      	mov	r0, r6
    e19a:	f7ff fd3d 	bl	dc18 <putchw>
    e19e:	4405      	add	r5, r0
                /* Take the decimal part and multiply by 1000 */
                n = (d-n)*1000;
    e1a0:	4620      	mov	r0, r4
    e1a2:	f013 f831 	bl	21208 <__aeabi_i2d>
    e1a6:	4602      	mov	r2, r0
    e1a8:	460b      	mov	r3, r1
    e1aa:	4640      	mov	r0, r8
    e1ac:	4649      	mov	r1, r9
    e1ae:	f012 fedd 	bl	20f6c <__aeabi_dsub>
    e1b2:	2200      	movs	r2, #0
    e1b4:	4b19      	ldr	r3, [pc, #100]	; (e21c <tfp_format+0x478>)
    e1b6:	f013 f891 	bl	212dc <__aeabi_dmul>
    e1ba:	f013 fb3f 	bl	2183c <__aeabi_d2iz>
                /* Convert to ascii */
                i2a(n, &p);
    e1be:	aa08      	add	r2, sp, #32
    e1c0:	17c1      	asrs	r1, r0, #31
    e1c2:	f7ff fcd3 	bl	db6c <i2a>
                /* Set the leading zeros for the next integer output to 3 */
                p.lz = 3;
    e1c6:	2303      	movs	r3, #3
    e1c8:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                /* Always use the same decimal width */
                p.width = 3;
    e1cc:	f88d 3020 	strb.w	r3, [sp, #32]
                /* Ignore sign for decimal part*/
                p.sign = 0;
    e1d0:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    e1d4:	f36f 0300 	bfc	r3, #0, #1
    e1d8:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                /* Output a decimal point */
                putf(putp, '.');
    e1dc:	212e      	movs	r1, #46	; 0x2e
    e1de:	4630      	mov	r0, r6
    e1e0:	f7ff fd08 	bl	dbf4 <putf>
                /* Output the decimal part. */
                written += putchw(putp, &p);
    e1e4:	a908      	add	r1, sp, #32
    e1e6:	4630      	mov	r0, r6
    e1e8:	f7ff fd16 	bl	dc18 <putchw>
    e1ec:	4405      	add	r5, r0
                break;
    e1ee:	e5e2      	b.n	ddb6 <tfp_format+0x12>
                    p.sign = 1;
    e1f0:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    e1f4:	f043 0301 	orr.w	r3, r3, #1
    e1f8:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    e1fc:	e7be      	b.n	e17c <tfp_format+0x3d8>
                    p.width = 0;
    e1fe:	2300      	movs	r3, #0
    e200:	f88d 3020 	strb.w	r3, [sp, #32]
    e204:	e7c7      	b.n	e196 <tfp_format+0x3f2>
#endif
            case '%':
                written += putf(putp, ch);
    e206:	4621      	mov	r1, r4
    e208:	4630      	mov	r0, r6
    e20a:	f7ff fcf3 	bl	dbf4 <putf>
    e20e:	4405      	add	r5, r0
                break;
    e210:	e5d1      	b.n	ddb6 <tfp_format+0x12>
        }
    }
 abort:;
 
 return written;
}
    e212:	4628      	mov	r0, r5
    e214:	b00a      	add	sp, #40	; 0x28
    e216:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    e21a:	bf00      	nop
    e21c:	408f4000 	.word	0x408f4000

0000e220 <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
    e220:	b508      	push	{r3, lr}
    return tfp_format(f, fmt, va);
    e222:	f7ff fdbf 	bl	dda4 <tfp_format>
}
    e226:	bd08      	pop	{r3, pc}

0000e228 <printf>:
    va_end(va);
    return rv;
}

int printf(const char *fmt, ...)
{
    e228:	b40f      	push	{r0, r1, r2, r3}
    e22a:	b500      	push	{lr}
    e22c:	b083      	sub	sp, #12
    e22e:	aa04      	add	r2, sp, #16
    e230:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
    e234:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(stdout, fmt, va);
    e236:	4b04      	ldr	r3, [pc, #16]	; (e248 <printf+0x20>)
    e238:	6818      	ldr	r0, [r3, #0]
    e23a:	f7ff fff1 	bl	e220 <vfprintf>
    va_end(va);
    return rv;
}
    e23e:	b003      	add	sp, #12
    e240:	f85d eb04 	ldr.w	lr, [sp], #4
    e244:	b004      	add	sp, #16
    e246:	4770      	bx	lr
    e248:	00023224 	.word	0x00023224

0000e24c <vsnprintf>:

int vsnprintf(char *str, size_t size, const char *fmt, va_list va)
{
    e24c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e24e:	b085      	sub	sp, #20
    e250:	4605      	mov	r5, r0
    e252:	460c      	mov	r4, r1
    e254:	4616      	mov	r6, r2
    e256:	461f      	mov	r7, r3
    struct MemFile state;
    FILE *f = fmemopen_w(&state, str, size);
    e258:	460a      	mov	r2, r1
    e25a:	4601      	mov	r1, r0
    e25c:	4668      	mov	r0, sp
    e25e:	f000 f83d 	bl	e2dc <fmemopen_w>
    tfp_format(f, fmt, va);
    e262:	463a      	mov	r2, r7
    e264:	4631      	mov	r1, r6
    e266:	f7ff fd9d 	bl	dda4 <tfp_format>
    if (size > 0) {
    e26a:	b12c      	cbz	r4, e278 <vsnprintf+0x2c>
        if (state.bytes_written < size) {
    e26c:	9b02      	ldr	r3, [sp, #8]
    e26e:	42a3      	cmp	r3, r4
    e270:	d205      	bcs.n	e27e <vsnprintf+0x32>
            *(state.buffer) = '\0';
    e272:	9b01      	ldr	r3, [sp, #4]
    e274:	2200      	movs	r2, #0
    e276:	701a      	strb	r2, [r3, #0]
        } else {
            str[size - 1] = '\0';
        }
    }
    return state.bytes_written;
}
    e278:	9802      	ldr	r0, [sp, #8]
    e27a:	b005      	add	sp, #20
    e27c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            str[size - 1] = '\0';
    e27e:	3c01      	subs	r4, #1
    e280:	2300      	movs	r3, #0
    e282:	552b      	strb	r3, [r5, r4]
    e284:	e7f8      	b.n	e278 <vsnprintf+0x2c>

0000e286 <snprintf>:

int snprintf(char *str, size_t size, const char *fmt, ...)
{
    e286:	b40c      	push	{r2, r3}
    e288:	b500      	push	{lr}
    e28a:	b083      	sub	sp, #12
    e28c:	ab04      	add	r3, sp, #16
    e28e:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list va;
    va_start(va, fmt);
    e292:	9301      	str	r3, [sp, #4]
    int rv = vsnprintf(str, size, fmt, va);
    e294:	f7ff ffda 	bl	e24c <vsnprintf>
    va_end(va);
    return rv;
}
    e298:	b003      	add	sp, #12
    e29a:	f85d eb04 	ldr.w	lr, [sp], #4
    e29e:	b002      	add	sp, #8
    e2a0:	4770      	bx	lr

0000e2a2 <memfile_write>:
#include <stdio.h>

size_t memfile_write(FILE *instance, const char *bp, size_t n)
{
    e2a2:	b500      	push	{lr}
    e2a4:	4684      	mov	ip, r0
    struct MemFile *f = (struct MemFile*)instance;
    size_t i = 0;
    e2a6:	2000      	movs	r0, #0
    
    while (n--)
    e2a8:	e000      	b.n	e2ac <memfile_write+0xa>
    {
        f->bytes_written++;
        if (f->bytes_written <= f->size)
        {
            *f->buffer++ = *bp++;
    e2aa:	4672      	mov	r2, lr
    while (n--)
    e2ac:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
    e2b0:	b192      	cbz	r2, e2d8 <memfile_write+0x36>
        f->bytes_written++;
    e2b2:	f8dc 3008 	ldr.w	r3, [ip, #8]
    e2b6:	3301      	adds	r3, #1
    e2b8:	f8cc 3008 	str.w	r3, [ip, #8]
        if (f->bytes_written <= f->size)
    e2bc:	f8dc 200c 	ldr.w	r2, [ip, #12]
    e2c0:	4293      	cmp	r3, r2
    e2c2:	d8f2      	bhi.n	e2aa <memfile_write+0x8>
            *f->buffer++ = *bp++;
    e2c4:	f8dc 3004 	ldr.w	r3, [ip, #4]
    e2c8:	1c5a      	adds	r2, r3, #1
    e2ca:	f8cc 2004 	str.w	r2, [ip, #4]
    e2ce:	f811 2b01 	ldrb.w	r2, [r1], #1
    e2d2:	701a      	strb	r2, [r3, #0]
            i++;
    e2d4:	3001      	adds	r0, #1
    e2d6:	e7e8      	b.n	e2aa <memfile_write+0x8>
        }
    }
    
    return i;
}
    e2d8:	f85d fb04 	ldr.w	pc, [sp], #4

0000e2dc <fmemopen_w>:
    &memfile_write,
    NULL
};

FILE *fmemopen_w(struct MemFile* storage, char *buffer, size_t size)
{
    e2dc:	b410      	push	{r4}
    storage->file.vmt = &MemFile_methods;
    e2de:	4c04      	ldr	r4, [pc, #16]	; (e2f0 <fmemopen_w+0x14>)
    e2e0:	6004      	str	r4, [r0, #0]
    storage->buffer = buffer;
    e2e2:	6041      	str	r1, [r0, #4]
    storage->bytes_written = 0;
    e2e4:	2100      	movs	r1, #0
    e2e6:	6081      	str	r1, [r0, #8]
    storage->size = size;
    e2e8:	60c2      	str	r2, [r0, #12]
    return (FILE*)storage;
}
    e2ea:	f85d 4b04 	ldr.w	r4, [sp], #4
    e2ee:	4770      	bx	lr
    e2f0:	00023228 	.word	0x00023228

0000e2f4 <dpl_cputime_timer_init>:
    dpl_cputime_delay_ticks(ticks);
}

void
dpl_cputime_timer_init(struct hal_timer *timer, hal_timer_cb fp, void *arg)
{
    e2f4:	b510      	push	{r4, lr}
    assert(timer != NULL);
    e2f6:	b140      	cbz	r0, e30a <dpl_cputime_timer_init+0x16>
    e2f8:	460c      	mov	r4, r1
    e2fa:	4613      	mov	r3, r2
    e2fc:	4601      	mov	r1, r0
    assert(fp != NULL);
    e2fe:	b154      	cbz	r4, e316 <dpl_cputime_timer_init+0x22>
    hal_timer_set_cb(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), timer, fp, arg);
    e300:	4622      	mov	r2, r4
    e302:	2000      	movs	r0, #0
    e304:	f00a fb02 	bl	1890c <hal_timer_set_cb>
}
    e308:	bd10      	pop	{r4, pc}
    assert(timer != NULL);
    e30a:	2300      	movs	r3, #0
    e30c:	461a      	mov	r2, r3
    e30e:	4619      	mov	r1, r3
    e310:	4618      	mov	r0, r3
    e312:	f7fa fe9b 	bl	904c <__assert_func>
    assert(fp != NULL);
    e316:	2300      	movs	r3, #0
    e318:	461a      	mov	r2, r3
    e31a:	4619      	mov	r1, r3
    e31c:	4618      	mov	r0, r3
    e31e:	f7fa fe95 	bl	904c <__assert_func>

0000e322 <dpl_cputime_timer_start>:

int
dpl_cputime_timer_start(struct hal_timer *timer, uint32_t cputime)
{
    e322:	b508      	push	{r3, lr}
    int rc;

    rc = hal_timer_start_at(timer, cputime);
    e324:	f00a fb08 	bl	18938 <hal_timer_start_at>
    return rc;
}
    e328:	bd08      	pop	{r3, pc}

0000e32a <dpl_cputime_timer_stop>:
    return rc;
}

void
dpl_cputime_timer_stop(struct hal_timer *timer)
{
    e32a:	b508      	push	{r3, lr}
    hal_timer_stop(timer);
    e32c:	f00a fb4a 	bl	189c4 <hal_timer_stop>
}
    e330:	bd08      	pop	{r3, pc}

0000e332 <dpl_cputime_get32>:

uint32_t
dpl_cputime_get32(void)
{
    e332:	b508      	push	{r3, lr}
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
    e334:	2000      	movs	r0, #0
    e336:	f00a fad1 	bl	188dc <hal_timer_read>
return cpu_time;
}
    e33a:	bd08      	pop	{r3, pc}

0000e33c <dpl_cputime_delay_ticks>:
{
    e33c:	b510      	push	{r4, lr}
    e33e:	4604      	mov	r4, r0
    until = dpl_cputime_get32() + ticks;
    e340:	f7ff fff7 	bl	e332 <dpl_cputime_get32>
    e344:	4404      	add	r4, r0
    while ((int32_t)(dpl_cputime_get32() - until) < 0) {
    e346:	f7ff fff4 	bl	e332 <dpl_cputime_get32>
    e34a:	1b00      	subs	r0, r0, r4
    e34c:	2800      	cmp	r0, #0
    e34e:	dbfa      	blt.n	e346 <dpl_cputime_delay_ticks+0xa>
}
    e350:	bd10      	pop	{r4, pc}

0000e352 <dpl_cputime_delay_usecs>:
{
    e352:	b508      	push	{r3, lr}
    dpl_cputime_delay_ticks(ticks);
    e354:	f7ff fff2 	bl	e33c <dpl_cputime_delay_ticks>
}
    e358:	bd08      	pop	{r3, pc}

0000e35a <dpl_cputime_timer_relative>:
{
    e35a:	b538      	push	{r3, r4, r5, lr}
    assert(timer != NULL);
    e35c:	b140      	cbz	r0, e370 <dpl_cputime_timer_relative+0x16>
    e35e:	460c      	mov	r4, r1
    e360:	4605      	mov	r5, r0
    cputime = dpl_cputime_get32() + dpl_cputime_usecs_to_ticks(usecs);
    e362:	f7ff ffe6 	bl	e332 <dpl_cputime_get32>
    rc = hal_timer_start_at(timer, cputime);
    e366:	1901      	adds	r1, r0, r4
    e368:	4628      	mov	r0, r5
    e36a:	f00a fae5 	bl	18938 <hal_timer_start_at>
}
    e36e:	bd38      	pop	{r3, r4, r5, pc}
    assert(timer != NULL);
    e370:	2300      	movs	r3, #0
    e372:	461a      	mov	r2, r3
    e374:	4619      	mov	r1, r3
    e376:	4618      	mov	r0, r3
    e378:	f7fa fe68 	bl	904c <__assert_func>

0000e37c <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct dpl_mempool *mempool,
                   struct dpl_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
    e37c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e37e:	b083      	sub	sp, #12
    e380:	460d      	mov	r5, r1
    e382:	4617      	mov	r7, r2
    int rc;

    rc = dpl_mempool_init(mempool, num_blocks, block_size, mem, name);
    e384:	b29e      	uxth	r6, r3
    e386:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e388:	9300      	str	r3, [sp, #0]
    e38a:	4603      	mov	r3, r0
    e38c:	9a08      	ldr	r2, [sp, #32]
    e38e:	4631      	mov	r1, r6
    e390:	4628      	mov	r0, r5
    e392:	f000 f82f 	bl	e3f4 <dpl_mempool_init>
    if (rc != 0) {
    e396:	b108      	cbz	r0, e39c <mem_init_mbuf_pool+0x20>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
    e398:	b003      	add	sp, #12
    e39a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rc = dpl_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
    e39c:	4633      	mov	r3, r6
    e39e:	9a08      	ldr	r2, [sp, #32]
    e3a0:	b292      	uxth	r2, r2
    e3a2:	4629      	mov	r1, r5
    e3a4:	4638      	mov	r0, r7
    e3a6:	f000 f8ba 	bl	e51e <dpl_mbuf_pool_init>
    if (rc != 0) {
    e3aa:	e7f5      	b.n	e398 <mem_init_mbuf_pool+0x1c>

0000e3ac <mem_split_frag>:
 *                              NULL on failure.
 */
struct dpl_mbuf *
mem_split_frag(struct dpl_mbuf **om, uint16_t max_frag_sz,
               mem_frag_alloc_fn *alloc_cb, void *cb_arg)
{
    e3ac:	b570      	push	{r4, r5, r6, lr}
    e3ae:	4604      	mov	r4, r0
    e3b0:	460d      	mov	r5, r1
    e3b2:	4619      	mov	r1, r3
    struct dpl_mbuf *frag;
    int rc;

    if (DPL_MBUF_PKTLEN(*om) <= max_frag_sz) {
    e3b4:	6806      	ldr	r6, [r0, #0]
    e3b6:	8a33      	ldrh	r3, [r6, #16]
    e3b8:	42ab      	cmp	r3, r5
    e3ba:	d913      	bls.n	e3e4 <mem_split_frag+0x38>
        *om = NULL;
        return frag;
    }

    /* Packet needs to be split.  Allocate a new buffer for the fragment. */
    frag = alloc_cb(max_frag_sz, cb_arg);
    e3bc:	4628      	mov	r0, r5
    e3be:	4790      	blx	r2
    if (frag == NULL) {
    e3c0:	4606      	mov	r6, r0
    e3c2:	b190      	cbz	r0, e3ea <mem_split_frag+0x3e>
        goto err;
    }

    /* Move data from the front of the packet into the fragment mbuf. */
    rc = dpl_mbuf_appendfrom(frag, *om, 0, max_frag_sz);
    e3c4:	462b      	mov	r3, r5
    e3c6:	2200      	movs	r2, #0
    e3c8:	6821      	ldr	r1, [r4, #0]
    e3ca:	f000 f944 	bl	e656 <dpl_mbuf_appendfrom>
    if (rc != 0) {
    e3ce:	b960      	cbnz	r0, e3ea <mem_split_frag+0x3e>
        goto err;
    }
    dpl_mbuf_adj(*om, max_frag_sz);
    e3d0:	4629      	mov	r1, r5
    e3d2:	6820      	ldr	r0, [r4, #0]
    e3d4:	f000 f96b 	bl	e6ae <dpl_mbuf_adj>

    /* Free unused portion of of source mbuf chain, if possible. */
    *om = dpl_mbuf_trim_front(*om);
    e3d8:	6820      	ldr	r0, [r4, #0]
    e3da:	f000 f9bf 	bl	e75c <dpl_mbuf_trim_front>
    e3de:	6020      	str	r0, [r4, #0]
    return frag;

err:
    dpl_mbuf_free_chain(frag);
    return NULL;
}
    e3e0:	4630      	mov	r0, r6
    e3e2:	bd70      	pop	{r4, r5, r6, pc}
        *om = NULL;
    e3e4:	2300      	movs	r3, #0
    e3e6:	6003      	str	r3, [r0, #0]
        return frag;
    e3e8:	e7fa      	b.n	e3e0 <mem_split_frag+0x34>
    dpl_mbuf_free_chain(frag);
    e3ea:	4630      	mov	r0, r6
    e3ec:	f000 f8bd 	bl	e56a <dpl_mbuf_free_chain>
    return NULL;
    e3f0:	2600      	movs	r6, #0
    e3f2:	e7f5      	b.n	e3e0 <mem_split_frag+0x34>

0000e3f4 <dpl_mempool_init>:
    int true_block_size;
    uint8_t *block_addr;
    struct dpl_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
    e3f4:	2800      	cmp	r0, #0
    e3f6:	d035      	beq.n	e464 <dpl_mempool_init+0x70>
{
    e3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e3fa:	460c      	mov	r4, r1
    e3fc:	461d      	mov	r5, r3
    e3fe:	4606      	mov	r6, r0
    if (!mp || (block_size == 0)) {
    e400:	2a00      	cmp	r2, #0
    e402:	d031      	beq.n	e468 <dpl_mempool_init+0x74>
        return DPL_INVALID_PARAM;
    }

    if ((!membuf) && (blocks != 0)) {
    e404:	b1c3      	cbz	r3, e438 <dpl_mempool_init+0x44>
        return DPL_INVALID_PARAM;
    }

    if (membuf != NULL) {
    e406:	b115      	cbz	r5, e40e <dpl_mempool_init+0x1a>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uintptr_t)membuf & (DPL_ALIGNMENT - 1)) != 0) {
    e408:	f015 0f03 	tst.w	r5, #3
    e40c:	d12e      	bne.n	e46c <dpl_mempool_init+0x78>
            return DPL_MEM_NOT_ALIGNED;
        }
    }
    true_block_size = DPL_MEM_TRUE_BLOCK_SIZE(block_size);
    e40e:	f012 0f03 	tst.w	r2, #3
    e412:	d015      	beq.n	e440 <dpl_mempool_init+0x4c>
    e414:	f022 0703 	bic.w	r7, r2, #3
    e418:	3704      	adds	r7, #4

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
    e41a:	6032      	str	r2, [r6, #0]
    mp->mp_num_free = blocks;
    e41c:	80f4      	strh	r4, [r6, #6]
    mp->mp_min_free = blocks;
    e41e:	8134      	strh	r4, [r6, #8]
    mp->mp_flags = 0;
    e420:	2300      	movs	r3, #0
    e422:	72b3      	strb	r3, [r6, #10]
    mp->mp_num_blocks = blocks;
    e424:	80b4      	strh	r4, [r6, #4]
    mp->mp_membuf_addr = (uintptr_t)membuf;
    e426:	60f5      	str	r5, [r6, #12]
    mp->name = name;
    e428:	9b06      	ldr	r3, [sp, #24]
    e42a:	61b3      	str	r3, [r6, #24]
    dpl_mempool_poison(membuf, true_block_size);
    SLIST_FIRST(mp) = membuf;
    e42c:	6175      	str	r5, [r6, #20]
    return (dpl_error_t)os_mutex_init(&mu->mu);
    e42e:	f106 001c 	add.w	r0, r6, #28
    e432:	f7fc fb17 	bl	aa64 <os_mutex_init>
    dpl_mutex_init(&mp->mutex);

    /* Chain the memory blocks to the free list */
    block_addr = (uint8_t *)membuf;
    block_ptr = (struct dpl_memblock *)block_addr;
    while (blocks > 1) {
    e436:	e00a      	b.n	e44e <dpl_mempool_init+0x5a>
    if ((!membuf) && (blocks != 0)) {
    e438:	2900      	cmp	r1, #0
    e43a:	d0e4      	beq.n	e406 <dpl_mempool_init+0x12>
        return DPL_INVALID_PARAM;
    e43c:	2003      	movs	r0, #3
    e43e:	e010      	b.n	e462 <dpl_mempool_init+0x6e>
    true_block_size = DPL_MEM_TRUE_BLOCK_SIZE(block_size);
    e440:	4617      	mov	r7, r2
    e442:	e7ea      	b.n	e41a <dpl_mempool_init+0x26>
        block_addr += true_block_size;
    e444:	19eb      	adds	r3, r5, r7
        dpl_mempool_poison(block_addr, true_block_size);
        SLIST_NEXT(block_ptr, mb_next) = (struct dpl_memblock *)block_addr;
    e446:	602b      	str	r3, [r5, #0]
        block_ptr = (struct dpl_memblock *)block_addr;
        --blocks;
    e448:	3c01      	subs	r4, #1
    e44a:	b2a4      	uxth	r4, r4
        block_addr += true_block_size;
    e44c:	461d      	mov	r5, r3
    while (blocks > 1) {
    e44e:	2c01      	cmp	r4, #1
    e450:	d8f8      	bhi.n	e444 <dpl_mempool_init+0x50>
    }

    /* Last one in the list should be NULL */
    SLIST_NEXT(block_ptr, mb_next) = NULL;
    e452:	2000      	movs	r0, #0
    e454:	6028      	str	r0, [r5, #0]

    STAILQ_INSERT_TAIL(&g_dpl_mempool_list, mp, mp_list);
    e456:	6130      	str	r0, [r6, #16]
    e458:	4b05      	ldr	r3, [pc, #20]	; (e470 <dpl_mempool_init+0x7c>)
    e45a:	685a      	ldr	r2, [r3, #4]
    e45c:	6016      	str	r6, [r2, #0]
    e45e:	3610      	adds	r6, #16
    e460:	605e      	str	r6, [r3, #4]

    return DPL_OK;
}
    e462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return DPL_INVALID_PARAM;
    e464:	2003      	movs	r0, #3
}
    e466:	4770      	bx	lr
        return DPL_INVALID_PARAM;
    e468:	2003      	movs	r0, #3
    e46a:	e7fa      	b.n	e462 <dpl_mempool_init+0x6e>
            return DPL_MEM_NOT_ALIGNED;
    e46c:	2004      	movs	r0, #4
    e46e:	e7f8      	b.n	e462 <dpl_mempool_init+0x6e>
    e470:	200005d8 	.word	0x200005d8

0000e474 <dpl_memblock_get>:
    return 1;
}

void *
dpl_memblock_get(struct dpl_mempool *mp)
{
    e474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dpl_sr_t sr;
    struct dpl_memblock *block;

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
    e476:	4604      	mov	r4, r0
    e478:	b1f8      	cbz	r0, e4ba <dpl_memblock_get+0x46>
    return os_arch_save_sr();
    e47a:	f7fb ffff 	bl	a47c <os_arch_save_sr>
    e47e:	4605      	mov	r5, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
    e480:	f104 071c 	add.w	r7, r4, #28
    e484:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e488:	4638      	mov	r0, r7
    e48a:	f7fc fb51 	bl	ab30 <os_mutex_pend>
        DPL_ENTER_CRITICAL(sr);
        dpl_mutex_pend(&mp->mutex, DPL_WAIT_FOREVER);
        /* Check for any free */
        if (mp->mp_num_free) {
    e48e:	88e3      	ldrh	r3, [r4, #6]
    e490:	b153      	cbz	r3, e4a8 <dpl_memblock_get+0x34>
            /* Get a free block */
            block = SLIST_FIRST(mp);
    e492:	6966      	ldr	r6, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
    e494:	6832      	ldr	r2, [r6, #0]
    e496:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
    e498:	3b01      	subs	r3, #1
    e49a:	b29b      	uxth	r3, r3
    e49c:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
    e49e:	8922      	ldrh	r2, [r4, #8]
    e4a0:	4293      	cmp	r3, r2
    e4a2:	d202      	bcs.n	e4aa <dpl_memblock_get+0x36>
                mp->mp_min_free = mp->mp_num_free;
    e4a4:	8123      	strh	r3, [r4, #8]
    e4a6:	e000      	b.n	e4aa <dpl_memblock_get+0x36>
    block = NULL;
    e4a8:	2600      	movs	r6, #0
    return (dpl_error_t)os_mutex_release(&mu->mu);
    e4aa:	4638      	mov	r0, r7
    e4ac:	f7fc fae4 	bl	aa78 <os_mutex_release>
    os_arch_restore_sr(ctx);
    e4b0:	4628      	mov	r0, r5
    e4b2:	f7fb ffe9 	bl	a488 <os_arch_restore_sr>
            dpl_mempool_poison_check(block, DPL_MEMPOOL_TRUE_BLOCK_SIZE(mp));
        }
    }

    return (void *)block;
}
    e4b6:	4630      	mov	r0, r6
    e4b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    block = NULL;
    e4ba:	4606      	mov	r6, r0
    return (void *)block;
    e4bc:	e7fb      	b.n	e4b6 <dpl_memblock_get+0x42>

0000e4be <dpl_memblock_put_from_cb>:

dpl_error_t
dpl_memblock_put_from_cb(struct dpl_mempool *mp, void *block_addr)
{
    e4be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e4c0:	4604      	mov	r4, r0
    e4c2:	460d      	mov	r5, r1
    return os_arch_save_sr();
    e4c4:	f7fb ffda 	bl	a47c <os_arch_save_sr>
    e4c8:	4606      	mov	r6, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
    e4ca:	f104 071c 	add.w	r7, r4, #28
    e4ce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e4d2:	4638      	mov	r0, r7
    e4d4:	f7fc fb2c 	bl	ab30 <os_mutex_pend>
    block = (struct dpl_memblock *)block_addr;
    DPL_ENTER_CRITICAL(sr);
    dpl_mutex_pend(&mp->mutex, DPL_WAIT_FOREVER);

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
    e4d8:	6963      	ldr	r3, [r4, #20]
    e4da:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;
    e4dc:	6165      	str	r5, [r4, #20]

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
    e4de:	88e3      	ldrh	r3, [r4, #6]
    e4e0:	3301      	adds	r3, #1
    e4e2:	80e3      	strh	r3, [r4, #6]
    return (dpl_error_t)os_mutex_release(&mu->mu);
    e4e4:	4638      	mov	r0, r7
    e4e6:	f7fc fac7 	bl	aa78 <os_mutex_release>
    os_arch_restore_sr(ctx);
    e4ea:	4630      	mov	r0, r6
    e4ec:	f7fb ffcc 	bl	a488 <os_arch_restore_sr>

    dpl_mutex_release(&mp->mutex);
    DPL_EXIT_CRITICAL(sr);

    return DPL_OK;
}
    e4f0:	2000      	movs	r0, #0
    e4f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000e4f4 <dpl_memblock_put>:
#if MYNEWT_VAL(DPL_MEMPOOL_CHECK)
    struct dpl_memblock *block;
#endif

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
    e4f4:	b178      	cbz	r0, e516 <dpl_memblock_put+0x22>
    e4f6:	4603      	mov	r3, r0
    e4f8:	b179      	cbz	r1, e51a <dpl_memblock_put+0x26>
{
    e4fa:	b510      	push	{r4, lr}
#endif

    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & DPL_MEMPOOL_F_EXT) {
    e4fc:	7a82      	ldrb	r2, [r0, #10]
    e4fe:	f012 0f01 	tst.w	r2, #1
    e502:	d004      	beq.n	e50e <dpl_memblock_put+0x1a>
        mpe = (struct dpl_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
    e504:	6a84      	ldr	r4, [r0, #40]	; 0x28
    e506:	b114      	cbz	r4, e50e <dpl_memblock_put+0x1a>
            rc = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
    e508:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    e50a:	47a0      	blx	r4
            return rc;
    e50c:	e002      	b.n	e514 <dpl_memblock_put+0x20>
        }
    }

    /* No callback; free the block. */
    return dpl_memblock_put_from_cb(mp, block_addr);
    e50e:	4618      	mov	r0, r3
    e510:	f7ff ffd5 	bl	e4be <dpl_memblock_put_from_cb>
}
    e514:	bd10      	pop	{r4, pc}
        return DPL_INVALID_PARAM;
    e516:	2003      	movs	r0, #3
    e518:	4770      	bx	lr
    e51a:	2003      	movs	r0, #3
}
    e51c:	4770      	bx	lr

0000e51e <dpl_mbuf_pool_init>:

int
dpl_mbuf_pool_init(struct dpl_mbuf_pool *omp, struct dpl_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct dpl_mbuf);
    e51e:	3a10      	subs	r2, #16
    e520:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
    e522:	6041      	str	r1, [r0, #4]

    return (0);
}
    e524:	2000      	movs	r0, #0
    e526:	4770      	bx	lr

0000e528 <dpl_mbuf_get>:

struct dpl_mbuf *
dpl_mbuf_get(struct dpl_mbuf_pool *omp, uint16_t leadingspace)
{
    e528:	b538      	push	{r3, r4, r5, lr}
    struct dpl_mbuf *om;

    if (leadingspace > omp->omp_databuf_len) {
    e52a:	8803      	ldrh	r3, [r0, #0]
    e52c:	428b      	cmp	r3, r1
    e52e:	d310      	bcc.n	e552 <dpl_mbuf_get+0x2a>
    e530:	4604      	mov	r4, r0
    e532:	460d      	mov	r5, r1
        goto err;
    }

    om = dpl_memblock_get(omp->omp_pool);
    e534:	6840      	ldr	r0, [r0, #4]
    e536:	f7ff ff9d 	bl	e474 <dpl_memblock_get>
    if (!om) {
    e53a:	b148      	cbz	r0, e550 <dpl_mbuf_get+0x28>
        goto err;
    }

    SLIST_NEXT(om, om_next) = NULL;
    e53c:	2300      	movs	r3, #0
    e53e:	60c3      	str	r3, [r0, #12]
    om->om_flags = 0;
    e540:	7103      	strb	r3, [r0, #4]
    om->om_pkthdr_len = 0;
    e542:	7143      	strb	r3, [r0, #5]
    om->om_len = 0;
    e544:	80c3      	strh	r3, [r0, #6]
    om->om_data = (&om->om_databuf[0] + leadingspace);
    e546:	f100 0110 	add.w	r1, r0, #16
    e54a:	440d      	add	r5, r1
    e54c:	6005      	str	r5, [r0, #0]
    om->om_omp = omp;
    e54e:	6084      	str	r4, [r0, #8]

    return (om);
err:
    return (NULL);
}
    e550:	bd38      	pop	{r3, r4, r5, pc}
    return (NULL);
    e552:	2000      	movs	r0, #0
    e554:	e7fc      	b.n	e550 <dpl_mbuf_get+0x28>

0000e556 <dpl_mbuf_free>:
    return om;
}

int
dpl_mbuf_free(struct dpl_mbuf *om)
{
    e556:	b508      	push	{r3, lr}
    int rc;

    if (om->om_omp != NULL) {
    e558:	6883      	ldr	r3, [r0, #8]
    e55a:	b123      	cbz	r3, e566 <dpl_mbuf_free+0x10>
    e55c:	4601      	mov	r1, r0
        rc = dpl_memblock_put(om->om_omp->omp_pool, om);
    e55e:	6858      	ldr	r0, [r3, #4]
    e560:	f7ff ffc8 	bl	e4f4 <dpl_memblock_put>
    }

    return (0);
err:
    return (rc);
}
    e564:	bd08      	pop	{r3, pc}
    return (0);
    e566:	2000      	movs	r0, #0
    e568:	e7fc      	b.n	e564 <dpl_mbuf_free+0xe>

0000e56a <dpl_mbuf_free_chain>:
dpl_mbuf_free_chain(struct dpl_mbuf *om)
{
    struct dpl_mbuf *next;
    int rc;

    while (om != NULL) {
    e56a:	b158      	cbz	r0, e584 <dpl_mbuf_free_chain+0x1a>
{
    e56c:	b510      	push	{r4, lr}
        next = SLIST_NEXT(om, om_next);
    e56e:	68c4      	ldr	r4, [r0, #12]

        rc = dpl_mbuf_free(om);
    e570:	f7ff fff1 	bl	e556 <dpl_mbuf_free>
        if (rc != 0) {
    e574:	4603      	mov	r3, r0
    e576:	b918      	cbnz	r0, e580 <dpl_mbuf_free_chain+0x16>
            goto err;
        }

        om = next;
    e578:	4620      	mov	r0, r4
    while (om != NULL) {
    e57a:	2c00      	cmp	r4, #0
    e57c:	d1f7      	bne.n	e56e <dpl_mbuf_free_chain+0x4>
    }

    return (0);
    e57e:	2300      	movs	r3, #0
err:
    return (rc);
}
    e580:	4618      	mov	r0, r3
    e582:	bd10      	pop	{r4, pc}
    return (0);
    e584:	2300      	movs	r3, #0
}
    e586:	4618      	mov	r0, r3
    e588:	4770      	bx	lr

0000e58a <dpl_mbuf_append>:
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
}

int
dpl_mbuf_append(struct dpl_mbuf *om, const void *data,  uint16_t len)
{
    e58a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    struct dpl_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
    e58e:	2800      	cmp	r0, #0
    e590:	d04b      	beq.n	e62a <dpl_mbuf_append+0xa0>
    e592:	460f      	mov	r7, r1
    e594:	4691      	mov	r9, r2
    e596:	4682      	mov	sl, r0
        rc = DPL_EINVAL;
        goto err;
    }

    omp = om->om_omp;
    e598:	f8d0 8008 	ldr.w	r8, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
    e59c:	4603      	mov	r3, r0
    while (SLIST_NEXT(last, om_next) != NULL) {
    e59e:	461e      	mov	r6, r3
    e5a0:	68db      	ldr	r3, [r3, #12]
    e5a2:	2b00      	cmp	r3, #0
    e5a4:	d1fb      	bne.n	e59e <dpl_mbuf_append+0x14>
        last = SLIST_NEXT(last, om_next);
    }

    remainder = len;
    e5a6:	464d      	mov	r5, r9
static inline uint16_t
_dpl_mbuf_trailingspace(struct dpl_mbuf *om)
{
    struct dpl_mbuf_pool *omp;

    omp = om->om_omp;
    e5a8:	68b3      	ldr	r3, [r6, #8]

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    e5aa:	f106 0410 	add.w	r4, r6, #16
    e5ae:	881b      	ldrh	r3, [r3, #0]
    e5b0:	441c      	add	r4, r3
      (om->om_data + om->om_len);
    e5b2:	6830      	ldr	r0, [r6, #0]
    e5b4:	88f3      	ldrh	r3, [r6, #6]
    e5b6:	4418      	add	r0, r3
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    e5b8:	1a24      	subs	r4, r4, r0
    e5ba:	b2a4      	uxth	r4, r4
    space = DPL_MBUF_TRAILINGSPACE(last);

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
    e5bc:	b164      	cbz	r4, e5d8 <dpl_mbuf_append+0x4e>
        if (space > remainder) {
    e5be:	454c      	cmp	r4, r9
    e5c0:	dd00      	ble.n	e5c4 <dpl_mbuf_append+0x3a>
            space = remainder;
    e5c2:	464c      	mov	r4, r9
        }

        memcpy(DPL_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
    e5c4:	4622      	mov	r2, r4
    e5c6:	4639      	mov	r1, r7
    e5c8:	f7ff fa0e 	bl	d9e8 <memcpy>

        last->om_len += space;
    e5cc:	88f3      	ldrh	r3, [r6, #6]
    e5ce:	4423      	add	r3, r4
    e5d0:	80f3      	strh	r3, [r6, #6]
        data += space;
    e5d2:	4427      	add	r7, r4
        remainder -= space;
    e5d4:	eba9 0504 	sub.w	r5, r9, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
    e5d8:	2d00      	cmp	r5, #0
    e5da:	dd16      	ble.n	e60a <dpl_mbuf_append+0x80>
        new = dpl_mbuf_get(omp, 0);
    e5dc:	2100      	movs	r1, #0
    e5de:	4640      	mov	r0, r8
    e5e0:	f7ff ffa2 	bl	e528 <dpl_mbuf_get>
        if (!new) {
    e5e4:	4604      	mov	r4, r0
    e5e6:	b180      	cbz	r0, e60a <dpl_mbuf_append+0x80>
            break;
        }

        new->om_len = mynewt_min(omp->omp_databuf_len, remainder);
    e5e8:	f8b8 2000 	ldrh.w	r2, [r8]
    e5ec:	42aa      	cmp	r2, r5
    e5ee:	bfa8      	it	ge
    e5f0:	462a      	movge	r2, r5
    e5f2:	b292      	uxth	r2, r2
    e5f4:	80c2      	strh	r2, [r0, #6]
        memcpy(DPL_MBUF_DATA(new, void *), data, new->om_len);
    e5f6:	4639      	mov	r1, r7
    e5f8:	6800      	ldr	r0, [r0, #0]
    e5fa:	f7ff f9f5 	bl	d9e8 <memcpy>
        data += new->om_len;
    e5fe:	88e3      	ldrh	r3, [r4, #6]
    e600:	441f      	add	r7, r3
        remainder -= new->om_len;
    e602:	1aed      	subs	r5, r5, r3
        SLIST_NEXT(last, om_next) = new;
    e604:	60f4      	str	r4, [r6, #12]
        last = new;
    e606:	4626      	mov	r6, r4
    e608:	e7e6      	b.n	e5d8 <dpl_mbuf_append+0x4e>
    }

    /* Adjust the packet header length in the buffer */
    if (DPL_MBUF_IS_PKTHDR(om)) {
    e60a:	f89a 3005 	ldrb.w	r3, [sl, #5]
    e60e:	2b07      	cmp	r3, #7
    e610:	d907      	bls.n	e622 <dpl_mbuf_append+0x98>
        DPL_MBUF_PKTHDR(om)->omp_len += len - remainder;
    e612:	eba9 0905 	sub.w	r9, r9, r5
    e616:	f8ba 3010 	ldrh.w	r3, [sl, #16]
    e61a:	fa13 f989 	uxtah	r9, r3, r9
    e61e:	f8aa 9010 	strh.w	r9, [sl, #16]
    }

    if (remainder != 0) {
    e622:	b925      	cbnz	r5, e62e <dpl_mbuf_append+0xa4>


    return (0);
err:
    return (rc);
}
    e624:	4628      	mov	r0, r5
    e626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = DPL_EINVAL;
    e62a:	2502      	movs	r5, #2
    e62c:	e7fa      	b.n	e624 <dpl_mbuf_append+0x9a>
        rc = DPL_ENOMEM;
    e62e:	2501      	movs	r5, #1
    e630:	e7f8      	b.n	e624 <dpl_mbuf_append+0x9a>

0000e632 <dpl_mbuf_off>:

    /* Cast away const. */
    cur = (struct dpl_mbuf *)om;

    while (1) {
        if (cur == NULL) {
    e632:	b178      	cbz	r0, e654 <dpl_mbuf_off+0x22>
{
    e634:	b410      	push	{r4}
    e636:	e002      	b.n	e63e <dpl_mbuf_off+0xc>

            *out_off = off;
            return cur;
        }

        off -= cur->om_len;
    e638:	1ac9      	subs	r1, r1, r3
        cur = next;
    e63a:	4620      	mov	r0, r4
        if (cur == NULL) {
    e63c:	b13c      	cbz	r4, e64e <dpl_mbuf_off+0x1c>
        next = SLIST_NEXT(cur, om_next);
    e63e:	68c4      	ldr	r4, [r0, #12]
        if (cur->om_len > off ||
    e640:	88c3      	ldrh	r3, [r0, #6]
    e642:	428b      	cmp	r3, r1
    e644:	dc02      	bgt.n	e64c <dpl_mbuf_off+0x1a>
    e646:	d1f7      	bne.n	e638 <dpl_mbuf_off+0x6>
            (cur->om_len == off && next == NULL)) {
    e648:	2c00      	cmp	r4, #0
    e64a:	d1f5      	bne.n	e638 <dpl_mbuf_off+0x6>
            *out_off = off;
    e64c:	8011      	strh	r1, [r2, #0]
    }
}
    e64e:	f85d 4b04 	ldr.w	r4, [sp], #4
    e652:	4770      	bx	lr
    e654:	4770      	bx	lr

0000e656 <dpl_mbuf_appendfrom>:
{
    e656:	b5f0      	push	{r4, r5, r6, r7, lr}
    e658:	b083      	sub	sp, #12
    e65a:	4607      	mov	r7, r0
    e65c:	4608      	mov	r0, r1
    e65e:	4611      	mov	r1, r2
    e660:	461e      	mov	r6, r3
    src_cur_om = dpl_mbuf_off(src, src_off, &src_cur_off);
    e662:	f10d 0206 	add.w	r2, sp, #6
    e666:	f7ff ffe4 	bl	e632 <dpl_mbuf_off>
    e66a:	4605      	mov	r5, r0
    while (len > 0) {
    e66c:	e005      	b.n	e67a <dpl_mbuf_appendfrom+0x24>
        len -= chunk_sz;
    e66e:	1b34      	subs	r4, r6, r4
    e670:	b2a6      	uxth	r6, r4
        src_cur_om = SLIST_NEXT(src_cur_om, om_next);
    e672:	68ed      	ldr	r5, [r5, #12]
        src_cur_off = 0;
    e674:	2300      	movs	r3, #0
    e676:	f8ad 3006 	strh.w	r3, [sp, #6]
    while (len > 0) {
    e67a:	b196      	cbz	r6, e6a2 <dpl_mbuf_appendfrom+0x4c>
        if (src_cur_om == NULL) {
    e67c:	b1ad      	cbz	r5, e6aa <dpl_mbuf_appendfrom+0x54>
        chunk_sz = mynewt_min(len, src_cur_om->om_len - src_cur_off);
    e67e:	88ec      	ldrh	r4, [r5, #6]
    e680:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    e684:	1ae4      	subs	r4, r4, r3
    e686:	42b4      	cmp	r4, r6
    e688:	bfa8      	it	ge
    e68a:	4634      	movge	r4, r6
    e68c:	b2a4      	uxth	r4, r4
        rc = dpl_mbuf_append(dst, src_cur_om->om_data + src_cur_off, chunk_sz);
    e68e:	6829      	ldr	r1, [r5, #0]
    e690:	4622      	mov	r2, r4
    e692:	4419      	add	r1, r3
    e694:	4638      	mov	r0, r7
    e696:	f7ff ff78 	bl	e58a <dpl_mbuf_append>
        if (rc != 0) {
    e69a:	4603      	mov	r3, r0
    e69c:	2800      	cmp	r0, #0
    e69e:	d0e6      	beq.n	e66e <dpl_mbuf_appendfrom+0x18>
    e6a0:	e000      	b.n	e6a4 <dpl_mbuf_appendfrom+0x4e>
    return 0;
    e6a2:	2300      	movs	r3, #0
}
    e6a4:	4618      	mov	r0, r3
    e6a6:	b003      	add	sp, #12
    e6a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return DPL_EINVAL;
    e6aa:	2302      	movs	r3, #2
    e6ac:	e7fa      	b.n	e6a4 <dpl_mbuf_appendfrom+0x4e>

0000e6ae <dpl_mbuf_adj>:
{
    int len = req_len;
    struct dpl_mbuf *m;
    int count;

    if ((m = mp) == NULL)
    e6ae:	2800      	cmp	r0, #0
    e6b0:	d053      	beq.n	e75a <dpl_mbuf_adj+0xac>
{
    e6b2:	b510      	push	{r4, lr}
    e6b4:	4604      	mov	r4, r0
        return;
    if (len >= 0) {
    e6b6:	2900      	cmp	r1, #0
    e6b8:	db1b      	blt.n	e6f2 <dpl_mbuf_adj+0x44>
    if ((m = mp) == NULL)
    e6ba:	4603      	mov	r3, r0
    int len = req_len;
    e6bc:	460a      	mov	r2, r1
    e6be:	e005      	b.n	e6cc <dpl_mbuf_adj+0x1e>
            if (m->om_len <= len) {
                len -= m->om_len;
                m->om_len = 0;
                m = SLIST_NEXT(m, om_next);
            } else {
                m->om_len -= len;
    e6c0:	1a80      	subs	r0, r0, r2
    e6c2:	80d8      	strh	r0, [r3, #6]
                m->om_data += len;
    e6c4:	6818      	ldr	r0, [r3, #0]
    e6c6:	4402      	add	r2, r0
    e6c8:	601a      	str	r2, [r3, #0]
                len = 0;
    e6ca:	2200      	movs	r2, #0
        while (m != NULL && len > 0) {
    e6cc:	b14b      	cbz	r3, e6e2 <dpl_mbuf_adj+0x34>
    e6ce:	2a00      	cmp	r2, #0
    e6d0:	dd07      	ble.n	e6e2 <dpl_mbuf_adj+0x34>
            if (m->om_len <= len) {
    e6d2:	88d8      	ldrh	r0, [r3, #6]
    e6d4:	4290      	cmp	r0, r2
    e6d6:	dcf3      	bgt.n	e6c0 <dpl_mbuf_adj+0x12>
                len -= m->om_len;
    e6d8:	1a12      	subs	r2, r2, r0
                m->om_len = 0;
    e6da:	2000      	movs	r0, #0
    e6dc:	80d8      	strh	r0, [r3, #6]
                m = SLIST_NEXT(m, om_next);
    e6de:	68db      	ldr	r3, [r3, #12]
    e6e0:	e7f4      	b.n	e6cc <dpl_mbuf_adj+0x1e>
            }
        }
        if (DPL_MBUF_IS_PKTHDR(mp))
    e6e2:	7963      	ldrb	r3, [r4, #5]
    e6e4:	2b07      	cmp	r3, #7
    e6e6:	d903      	bls.n	e6f0 <dpl_mbuf_adj+0x42>
            DPL_MBUF_PKTHDR(mp)->omp_len -= (req_len - len);
    e6e8:	1a52      	subs	r2, r2, r1
    e6ea:	8a23      	ldrh	r3, [r4, #16]
    e6ec:	441a      	add	r2, r3
    e6ee:	8222      	strh	r2, [r4, #16]
                break;
            }
            count -= m->om_len;
        }
    }
}
    e6f0:	bd10      	pop	{r4, pc}
        len = -len;
    e6f2:	f1c1 0e00 	rsb	lr, r1, #0
    if ((m = mp) == NULL)
    e6f6:	4603      	mov	r3, r0
        count = 0;
    e6f8:	2200      	movs	r2, #0
            count += m->om_len;
    e6fa:	88d8      	ldrh	r0, [r3, #6]
    e6fc:	4402      	add	r2, r0
            if (SLIST_NEXT(m, om_next) == (struct dpl_mbuf *)0)
    e6fe:	469c      	mov	ip, r3
    e700:	68db      	ldr	r3, [r3, #12]
    e702:	2b00      	cmp	r3, #0
    e704:	d1f9      	bne.n	e6fa <dpl_mbuf_adj+0x4c>
        if (m->om_len >= len) {
    e706:	4570      	cmp	r0, lr
    e708:	da0d      	bge.n	e726 <dpl_mbuf_adj+0x78>
        if (count < 0)
    e70a:	188a      	adds	r2, r1, r2
    e70c:	d41a      	bmi.n	e744 <dpl_mbuf_adj+0x96>
        if (DPL_MBUF_IS_PKTHDR(m))
    e70e:	7963      	ldrb	r3, [r4, #5]
    e710:	2b07      	cmp	r3, #7
    e712:	d900      	bls.n	e716 <dpl_mbuf_adj+0x68>
            DPL_MBUF_PKTHDR(m)->omp_len = count;
    e714:	8222      	strh	r2, [r4, #16]
        for (; m; m = SLIST_NEXT(m, om_next)) {
    e716:	2c00      	cmp	r4, #0
    e718:	d0ea      	beq.n	e6f0 <dpl_mbuf_adj+0x42>
            if (m->om_len >= count) {
    e71a:	88e3      	ldrh	r3, [r4, #6]
    e71c:	4293      	cmp	r3, r2
    e71e:	da13      	bge.n	e748 <dpl_mbuf_adj+0x9a>
            count -= m->om_len;
    e720:	1ad2      	subs	r2, r2, r3
        for (; m; m = SLIST_NEXT(m, om_next)) {
    e722:	68e4      	ldr	r4, [r4, #12]
    e724:	e7f7      	b.n	e716 <dpl_mbuf_adj+0x68>
            m->om_len -= len;
    e726:	fa1f fe8e 	uxth.w	lr, lr
    e72a:	eba0 000e 	sub.w	r0, r0, lr
    e72e:	f8ac 0006 	strh.w	r0, [ip, #6]
            if (DPL_MBUF_IS_PKTHDR(mp))
    e732:	7963      	ldrb	r3, [r4, #5]
    e734:	2b07      	cmp	r3, #7
    e736:	d9db      	bls.n	e6f0 <dpl_mbuf_adj+0x42>
                DPL_MBUF_PKTHDR(mp)->omp_len -= len;
    e738:	8a23      	ldrh	r3, [r4, #16]
    e73a:	eba3 0e0e 	sub.w	lr, r3, lr
    e73e:	f8a4 e010 	strh.w	lr, [r4, #16]
            return;
    e742:	e7d5      	b.n	e6f0 <dpl_mbuf_adj+0x42>
            count = 0;
    e744:	2200      	movs	r2, #0
    e746:	e7e2      	b.n	e70e <dpl_mbuf_adj+0x60>
                m->om_len = count;
    e748:	80e2      	strh	r2, [r4, #6]
                if (SLIST_NEXT(m, om_next) != NULL) {
    e74a:	68e0      	ldr	r0, [r4, #12]
    e74c:	2800      	cmp	r0, #0
    e74e:	d0cf      	beq.n	e6f0 <dpl_mbuf_adj+0x42>
                    dpl_mbuf_free_chain(SLIST_NEXT(m, om_next));
    e750:	f7ff ff0b 	bl	e56a <dpl_mbuf_free_chain>
                    SLIST_NEXT(m, om_next) = NULL;
    e754:	2300      	movs	r3, #0
    e756:	60e3      	str	r3, [r4, #12]
    e758:	e7ca      	b.n	e6f0 <dpl_mbuf_adj+0x42>
    e75a:	4770      	bx	lr

0000e75c <dpl_mbuf_trim_front>:
    return (NULL);
}

struct dpl_mbuf *
dpl_mbuf_trim_front(struct dpl_mbuf *om)
{
    e75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e75e:	4606      	mov	r6, r0
    struct dpl_mbuf *next;
    struct dpl_mbuf *cur;

    /* Abort early if there is nothing to trim. */
    if (om->om_len != 0) {
    e760:	88c7      	ldrh	r7, [r0, #6]
    e762:	b9cf      	cbnz	r7, e798 <dpl_mbuf_trim_front+0x3c>
    }

    /* Starting with the second mbuf in the chain, continue removing and
     * freeing mbufs until an non-empty one is encountered.
     */
    cur = SLIST_NEXT(om, om_next);
    e764:	68c4      	ldr	r4, [r0, #12]
    while (cur != NULL && cur->om_len == 0) {
    e766:	b144      	cbz	r4, e77a <dpl_mbuf_trim_front+0x1e>
    e768:	88e3      	ldrh	r3, [r4, #6]
    e76a:	b933      	cbnz	r3, e77a <dpl_mbuf_trim_front+0x1e>
        next = SLIST_NEXT(cur, om_next);
    e76c:	68e5      	ldr	r5, [r4, #12]

        SLIST_NEXT(om, om_next) = next;
    e76e:	60f5      	str	r5, [r6, #12]
        dpl_mbuf_free(cur);
    e770:	4620      	mov	r0, r4
    e772:	f7ff fef0 	bl	e556 <dpl_mbuf_free>

        cur = next;
    e776:	462c      	mov	r4, r5
    e778:	e7f5      	b.n	e766 <dpl_mbuf_trim_front+0xa>
    }

    if (cur == NULL) {
    e77a:	b16c      	cbz	r4, e798 <dpl_mbuf_trim_front+0x3c>
    if (DPL_MBUF_IS_PKTHDR(om)) {
    e77c:	7963      	ldrb	r3, [r4, #5]
    e77e:	2b07      	cmp	r3, #7
    e780:	d900      	bls.n	e784 <dpl_mbuf_trim_front+0x28>
        startoff = om->om_pkthdr_len;
    e782:	b29f      	uxth	r7, r3
    leadingspace = (uint16_t) (DPL_MBUF_DATA(om, uint8_t *) -
    e784:	4620      	mov	r0, r4
    e786:	f850 3b10 	ldr.w	r3, [r0], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
    e78a:	4407      	add	r7, r0
    leadingspace = (uint16_t) (DPL_MBUF_DATA(om, uint8_t *) -
    e78c:	1bdf      	subs	r7, r3, r7
    e78e:	b2bf      	uxth	r7, r7
    }

    /* Try to remove the first mbuf in the chain.  If this buffer contains a
     * packet header, make sure the second buffer can accommodate it.
     */
    if (DPL_MBUF_LEADINGSPACE(cur) >= om->om_pkthdr_len) {
    e790:	7972      	ldrb	r2, [r6, #5]
    e792:	b293      	uxth	r3, r2
    e794:	42bb      	cmp	r3, r7
    e796:	d901      	bls.n	e79c <dpl_mbuf_trim_front+0x40>
        dpl_mbuf_free(om);
        om = cur;
    }

    return om;
}
    e798:	4630      	mov	r0, r6
    e79a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        cur->om_pkthdr_len = om->om_pkthdr_len;
    e79c:	7162      	strb	r2, [r4, #5]
        memcpy(DPL_MBUF_PKTHDR(cur), DPL_MBUF_PKTHDR(om), om->om_pkthdr_len);
    e79e:	f106 0110 	add.w	r1, r6, #16
    e7a2:	f7ff f921 	bl	d9e8 <memcpy>
        dpl_mbuf_free(om);
    e7a6:	4630      	mov	r0, r6
    e7a8:	f7ff fed5 	bl	e556 <dpl_mbuf_free>
        om = cur;
    e7ac:	4626      	mov	r6, r4
    e7ae:	e7f3      	b.n	e798 <dpl_mbuf_trim_front+0x3c>

0000e7b0 <conf_dup_check_cb>:
    return 0;
}

static void
conf_dup_check_cb(char *name, char *val, void *cb_arg)
{
    e7b0:	b538      	push	{r3, r4, r5, lr}
    e7b2:	460d      	mov	r5, r1
    e7b4:	4614      	mov	r4, r2
    struct conf_dup_check_arg *cdca = (struct conf_dup_check_arg *)cb_arg;

    if (strcmp(name, cdca->name)) {
    e7b6:	6811      	ldr	r1, [r2, #0]
    e7b8:	f7ff f94e 	bl	da58 <strcmp>
    e7bc:	b9a8      	cbnz	r0, e7ea <conf_dup_check_cb+0x3a>
        return;
    }
    if (!val) {
    e7be:	b145      	cbz	r5, e7d2 <conf_dup_check_cb+0x22>
            cdca->is_dup = 1;
        } else {
            cdca->is_dup = 0;
        }
    } else {
        if (cdca->val && !strcmp(val, cdca->val)) {
    e7c0:	6861      	ldr	r1, [r4, #4]
    e7c2:	b181      	cbz	r1, e7e6 <conf_dup_check_cb+0x36>
    e7c4:	4628      	mov	r0, r5
    e7c6:	f7ff f947 	bl	da58 <strcmp>
    e7ca:	b960      	cbnz	r0, e7e6 <conf_dup_check_cb+0x36>
            cdca->is_dup = 1;
    e7cc:	2301      	movs	r3, #1
    e7ce:	60a3      	str	r3, [r4, #8]
    e7d0:	e00b      	b.n	e7ea <conf_dup_check_cb+0x3a>
        if (!cdca->val || cdca->val[0] == '\0') {
    e7d2:	6863      	ldr	r3, [r4, #4]
    e7d4:	b10b      	cbz	r3, e7da <conf_dup_check_cb+0x2a>
    e7d6:	781b      	ldrb	r3, [r3, #0]
    e7d8:	b913      	cbnz	r3, e7e0 <conf_dup_check_cb+0x30>
            cdca->is_dup = 1;
    e7da:	2301      	movs	r3, #1
    e7dc:	60a3      	str	r3, [r4, #8]
    e7de:	e004      	b.n	e7ea <conf_dup_check_cb+0x3a>
            cdca->is_dup = 0;
    e7e0:	2300      	movs	r3, #0
    e7e2:	60a3      	str	r3, [r4, #8]
    e7e4:	e001      	b.n	e7ea <conf_dup_check_cb+0x3a>
        } else {
            cdca->is_dup = 0;
    e7e6:	2300      	movs	r3, #0
    e7e8:	60a3      	str	r3, [r4, #8]
        }
    }
}
    e7ea:	bd38      	pop	{r3, r4, r5, pc}

0000e7ec <conf_load_cb>:
{
    e7ec:	b538      	push	{r3, r4, r5, lr}
    e7ee:	4604      	mov	r4, r0
    e7f0:	460d      	mov	r5, r1
    if (!cb_arg || !strcmp((char*)cb_arg, name)) {
    e7f2:	b122      	cbz	r2, e7fe <conf_load_cb+0x12>
    e7f4:	4610      	mov	r0, r2
    e7f6:	4621      	mov	r1, r4
    e7f8:	f7ff f92e 	bl	da58 <strcmp>
    e7fc:	b918      	cbnz	r0, e806 <conf_load_cb+0x1a>
        conf_set_value(name, val);
    e7fe:	4629      	mov	r1, r5
    e800:	4620      	mov	r0, r4
    e802:	f000 f9eb 	bl	ebdc <conf_set_value>
}
    e806:	bd38      	pop	{r3, r4, r5, pc}

0000e808 <conf_src_register>:
    SLIST_FOREACH(cur, &conf_load_srcs, cs_next) {
    e808:	4b08      	ldr	r3, [pc, #32]	; (e82c <conf_src_register+0x24>)
    e80a:	6819      	ldr	r1, [r3, #0]
    e80c:	460b      	mov	r3, r1
    prev = NULL;
    e80e:	2200      	movs	r2, #0
    SLIST_FOREACH(cur, &conf_load_srcs, cs_next) {
    e810:	e001      	b.n	e816 <conf_src_register+0xe>
        prev = cur;
    e812:	461a      	mov	r2, r3
    SLIST_FOREACH(cur, &conf_load_srcs, cs_next) {
    e814:	681b      	ldr	r3, [r3, #0]
    e816:	2b00      	cmp	r3, #0
    e818:	d1fb      	bne.n	e812 <conf_src_register+0xa>
    if (!prev) {
    e81a:	b11a      	cbz	r2, e824 <conf_src_register+0x1c>
        SLIST_INSERT_AFTER(prev, cs, cs_next);
    e81c:	6813      	ldr	r3, [r2, #0]
    e81e:	6003      	str	r3, [r0, #0]
    e820:	6010      	str	r0, [r2, #0]
}
    e822:	4770      	bx	lr
        SLIST_INSERT_HEAD(&conf_load_srcs, cs, cs_next);
    e824:	6001      	str	r1, [r0, #0]
    e826:	4b01      	ldr	r3, [pc, #4]	; (e82c <conf_src_register+0x24>)
    e828:	6018      	str	r0, [r3, #0]
    e82a:	4770      	bx	lr
    e82c:	20003878 	.word	0x20003878

0000e830 <conf_dst_register>:
    conf_save_dst = cs;
    e830:	4b01      	ldr	r3, [pc, #4]	; (e838 <conf_dst_register+0x8>)
    e832:	6018      	str	r0, [r3, #0]
}
    e834:	4770      	bx	lr
    e836:	bf00      	nop
    e838:	20003880 	.word	0x20003880

0000e83c <conf_load>:
{
    e83c:	b510      	push	{r4, lr}
    conf_lock();
    e83e:	f000 f8d5 	bl	e9ec <conf_lock>
    conf_loaded = true;
    e842:	2301      	movs	r3, #1
    e844:	4a0e      	ldr	r2, [pc, #56]	; (e880 <conf_load+0x44>)
    e846:	7013      	strb	r3, [r2, #0]
    conf_loading = true;
    e848:	4a0e      	ldr	r2, [pc, #56]	; (e884 <conf_load+0x48>)
    e84a:	7013      	strb	r3, [r2, #0]
    SLIST_FOREACH(cs, &conf_load_srcs, cs_next) {
    e84c:	4b0e      	ldr	r3, [pc, #56]	; (e888 <conf_load+0x4c>)
    e84e:	681c      	ldr	r4, [r3, #0]
    e850:	e000      	b.n	e854 <conf_load+0x18>
    e852:	6824      	ldr	r4, [r4, #0]
    e854:	b164      	cbz	r4, e870 <conf_load+0x34>
        cs->cs_itf->csi_load(cs, conf_load_cb, NULL);
    e856:	6863      	ldr	r3, [r4, #4]
    e858:	681b      	ldr	r3, [r3, #0]
    e85a:	2200      	movs	r2, #0
    e85c:	490b      	ldr	r1, [pc, #44]	; (e88c <conf_load+0x50>)
    e85e:	4620      	mov	r0, r4
    e860:	4798      	blx	r3
        if (SLIST_NEXT(cs, cs_next)) {
    e862:	6823      	ldr	r3, [r4, #0]
    e864:	2b00      	cmp	r3, #0
    e866:	d0f4      	beq.n	e852 <conf_load+0x16>
            conf_commit(NULL);
    e868:	2000      	movs	r0, #0
    e86a:	f000 f9ef 	bl	ec4c <conf_commit>
    e86e:	e7f0      	b.n	e852 <conf_load+0x16>
    conf_loading = false;
    e870:	4b04      	ldr	r3, [pc, #16]	; (e884 <conf_load+0x48>)
    e872:	701c      	strb	r4, [r3, #0]
    conf_unlock();
    e874:	f000 f8c4 	bl	ea00 <conf_unlock>
    return conf_commit(NULL);
    e878:	4620      	mov	r0, r4
    e87a:	f000 f9e7 	bl	ec4c <conf_commit>
}
    e87e:	bd10      	pop	{r4, pc}
    e880:	2000387c 	.word	0x2000387c
    e884:	2000387d 	.word	0x2000387d
    e888:	20003878 	.word	0x20003878
    e88c:	0000e7ed 	.word	0x0000e7ed

0000e890 <conf_ensure_loaded>:
{
    e890:	b508      	push	{r3, lr}
    if (conf_loaded) {
    e892:	4b04      	ldr	r3, [pc, #16]	; (e8a4 <conf_ensure_loaded+0x14>)
    e894:	781b      	ldrb	r3, [r3, #0]
    e896:	b10b      	cbz	r3, e89c <conf_ensure_loaded+0xc>
        return 0;
    e898:	2000      	movs	r0, #0
}
    e89a:	bd08      	pop	{r3, pc}
    return conf_load();
    e89c:	f7ff ffce 	bl	e83c <conf_load>
    e8a0:	e7fb      	b.n	e89a <conf_ensure_loaded+0xa>
    e8a2:	bf00      	nop
    e8a4:	2000387c 	.word	0x2000387c

0000e8a8 <conf_save_one>:
/*
 * Append a single value to persisted config. Don't store duplicate value.
 */
int
conf_save_one(const char *name, char *value)
{
    e8a8:	b570      	push	{r4, r5, r6, lr}
    e8aa:	b084      	sub	sp, #16
    e8ac:	4605      	mov	r5, r0
    e8ae:	460e      	mov	r6, r1
    struct conf_store *cs;
    struct conf_dup_check_arg cdca;
    int rc;

    conf_lock();
    e8b0:	f000 f89c 	bl	e9ec <conf_lock>
    if (!conf_save_dst) {
    e8b4:	4b13      	ldr	r3, [pc, #76]	; (e904 <conf_save_one+0x5c>)
    e8b6:	681b      	ldr	r3, [r3, #0]
    e8b8:	b1fb      	cbz	r3, e8fa <conf_save_one+0x52>
    }

    /*
     * Check if we're writing the same value again.
     */
    cdca.name = name;
    e8ba:	9501      	str	r5, [sp, #4]
    cdca.val = value;
    e8bc:	9602      	str	r6, [sp, #8]
    cdca.is_dup = 0;
    e8be:	2300      	movs	r3, #0
    e8c0:	9303      	str	r3, [sp, #12]
    SLIST_FOREACH(cs, &conf_load_srcs, cs_next) {
    e8c2:	4b11      	ldr	r3, [pc, #68]	; (e908 <conf_save_one+0x60>)
    e8c4:	681c      	ldr	r4, [r3, #0]
    e8c6:	e006      	b.n	e8d6 <conf_save_one+0x2e>
        cs->cs_itf->csi_load(cs, conf_dup_check_cb, &cdca);
    e8c8:	6863      	ldr	r3, [r4, #4]
    e8ca:	681b      	ldr	r3, [r3, #0]
    e8cc:	aa01      	add	r2, sp, #4
    e8ce:	490f      	ldr	r1, [pc, #60]	; (e90c <conf_save_one+0x64>)
    e8d0:	4620      	mov	r0, r4
    e8d2:	4798      	blx	r3
    SLIST_FOREACH(cs, &conf_load_srcs, cs_next) {
    e8d4:	6824      	ldr	r4, [r4, #0]
    e8d6:	2c00      	cmp	r4, #0
    e8d8:	d1f6      	bne.n	e8c8 <conf_save_one+0x20>
    }
    if (cdca.is_dup == 1) {
    e8da:	9b03      	ldr	r3, [sp, #12]
    e8dc:	2b01      	cmp	r3, #1
    e8de:	d00e      	beq.n	e8fe <conf_save_one+0x56>
        rc = 0;
        goto out;
    }
    cs = conf_save_dst;
    e8e0:	4b08      	ldr	r3, [pc, #32]	; (e904 <conf_save_one+0x5c>)
    e8e2:	6818      	ldr	r0, [r3, #0]
    rc = cs->cs_itf->csi_save(cs, name, value);
    e8e4:	6843      	ldr	r3, [r0, #4]
    e8e6:	689b      	ldr	r3, [r3, #8]
    e8e8:	4632      	mov	r2, r6
    e8ea:	4629      	mov	r1, r5
    e8ec:	4798      	blx	r3
    e8ee:	4604      	mov	r4, r0
out:
    conf_unlock();
    e8f0:	f000 f886 	bl	ea00 <conf_unlock>
    return rc;
}
    e8f4:	4620      	mov	r0, r4
    e8f6:	b004      	add	sp, #16
    e8f8:	bd70      	pop	{r4, r5, r6, pc}
        rc = OS_ENOENT;
    e8fa:	240a      	movs	r4, #10
    e8fc:	e7f8      	b.n	e8f0 <conf_save_one+0x48>
        rc = 0;
    e8fe:	2400      	movs	r4, #0
    e900:	e7f6      	b.n	e8f0 <conf_save_one+0x48>
    e902:	bf00      	nop
    e904:	20003880 	.word	0x20003880
    e908:	20003878 	.word	0x20003878
    e90c:	0000e7b1 	.word	0x0000e7b1

0000e910 <conf_store_one>:

static void
conf_store_one(char *name, char *value)
{
    e910:	b508      	push	{r3, lr}
    conf_save_one(name, value);
    e912:	f7ff ffc9 	bl	e8a8 <conf_save_one>
}
    e916:	bd08      	pop	{r3, pc}

0000e918 <conf_save>:
 * Walk through all registered subsystems, and ask them to export their
 * config variables. Persist these settings.
 */
int
conf_save(void)
{
    e918:	b570      	push	{r4, r5, r6, lr}
    struct conf_store *cs;
    struct conf_handler *ch;
    int rc;
    int rc2;

    conf_lock();
    e91a:	f000 f867 	bl	e9ec <conf_lock>
    cs = conf_save_dst;
    e91e:	4b11      	ldr	r3, [pc, #68]	; (e964 <conf_save+0x4c>)
    e920:	681e      	ldr	r6, [r3, #0]
    if (!cs) {
    e922:	b1ee      	cbz	r6, e960 <conf_save+0x48>
        rc = OS_ENOENT;
        goto out;
    }

    if (cs->cs_itf->csi_save_start) {
    e924:	6873      	ldr	r3, [r6, #4]
    e926:	685b      	ldr	r3, [r3, #4]
    e928:	b10b      	cbz	r3, e92e <conf_save+0x16>
        cs->cs_itf->csi_save_start(cs);
    e92a:	4630      	mov	r0, r6
    e92c:	4798      	blx	r3
    }
    rc = 0;
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
    e92e:	4b0e      	ldr	r3, [pc, #56]	; (e968 <conf_save+0x50>)
    e930:	681c      	ldr	r4, [r3, #0]
    rc = 0;
    e932:	2500      	movs	r5, #0
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
    e934:	e000      	b.n	e938 <conf_save+0x20>
    e936:	6824      	ldr	r4, [r4, #0]
    e938:	b14c      	cbz	r4, e94e <conf_save+0x36>
        if (ch->ch_export) {
    e93a:	6963      	ldr	r3, [r4, #20]
    e93c:	2b00      	cmp	r3, #0
    e93e:	d0fa      	beq.n	e936 <conf_save+0x1e>
            rc2 = ch->ch_export(conf_store_one, CONF_EXPORT_PERSIST);
    e940:	2100      	movs	r1, #0
    e942:	480a      	ldr	r0, [pc, #40]	; (e96c <conf_save+0x54>)
    e944:	4798      	blx	r3
            if (!rc) {
    e946:	2d00      	cmp	r5, #0
    e948:	d1f5      	bne.n	e936 <conf_save+0x1e>
                rc = rc2;
    e94a:	4605      	mov	r5, r0
    e94c:	e7f3      	b.n	e936 <conf_save+0x1e>
            }
        }
    }
    if (cs->cs_itf->csi_save_end) {
    e94e:	6873      	ldr	r3, [r6, #4]
    e950:	68db      	ldr	r3, [r3, #12]
    e952:	b10b      	cbz	r3, e958 <conf_save+0x40>
        cs->cs_itf->csi_save_end(cs);
    e954:	4630      	mov	r0, r6
    e956:	4798      	blx	r3
    }
out:
    conf_unlock();
    e958:	f000 f852 	bl	ea00 <conf_unlock>
    return rc;
}
    e95c:	4628      	mov	r0, r5
    e95e:	bd70      	pop	{r4, r5, r6, pc}
        rc = OS_ENOENT;
    e960:	250a      	movs	r5, #10
    e962:	e7f9      	b.n	e958 <conf_save+0x40>
    e964:	20003880 	.word	0x20003880
    e968:	20003884 	.word	0x20003884
    e96c:	0000e911 	.word	0x0000e911

0000e970 <conf_store_init>:

void
conf_store_init(void)
{
    conf_loaded = false;
    e970:	2300      	movs	r3, #0
    e972:	4a02      	ldr	r2, [pc, #8]	; (e97c <conf_store_init+0xc>)
    e974:	7013      	strb	r3, [r2, #0]
    SLIST_INIT(&conf_load_srcs);
    e976:	4a02      	ldr	r2, [pc, #8]	; (e980 <conf_store_init+0x10>)
    e978:	6013      	str	r3, [r2, #0]
}
    e97a:	4770      	bx	lr
    e97c:	2000387c 	.word	0x2000387c
    e980:	20003878 	.word	0x20003878

0000e984 <conf_ev_fn_load>:
}

#if MYNEWT_VAL(OS_SCHEDULING)
static void
conf_ev_fn_load(struct os_event *ev)
{
    e984:	b508      	push	{r3, lr}
    conf_ensure_loaded();
    e986:	f7ff ff83 	bl	e890 <conf_ensure_loaded>
}
    e98a:	bd08      	pop	{r3, pc}

0000e98c <conf_init>:
{
    e98c:	b510      	push	{r4, lr}
    e98e:	b082      	sub	sp, #8
    os_mutex_init(&conf_mtx);
    e990:	4812      	ldr	r0, [pc, #72]	; (e9dc <conf_init+0x50>)
    e992:	f7fc f867 	bl	aa64 <os_mutex_init>
    SLIST_INIT(&conf_handlers);
    e996:	4b12      	ldr	r3, [pc, #72]	; (e9e0 <conf_init+0x54>)
    e998:	2200      	movs	r2, #0
    e99a:	601a      	str	r2, [r3, #0]
    conf_store_init();
    e99c:	f7ff ffe8 	bl	e970 <conf_store_init>
    rc = conf_cli_register();
    e9a0:	f000 fa0c 	bl	edbc <conf_cli_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
    e9a4:	b138      	cbz	r0, e9b6 <conf_init+0x2a>
    e9a6:	2000      	movs	r0, #0
    e9a8:	9000      	str	r0, [sp, #0]
    e9aa:	4b0e      	ldr	r3, [pc, #56]	; (e9e4 <conf_init+0x58>)
    e9ac:	681c      	ldr	r4, [r3, #0]
    e9ae:	4603      	mov	r3, r0
    e9b0:	4602      	mov	r2, r0
    e9b2:	4601      	mov	r1, r0
    e9b4:	47a0      	blx	r4
    rc = conf_nmgr_register();
    e9b6:	f000 faa5 	bl	ef04 <conf_nmgr_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
    e9ba:	b138      	cbz	r0, e9cc <conf_init+0x40>
    e9bc:	2000      	movs	r0, #0
    e9be:	9000      	str	r0, [sp, #0]
    e9c0:	4b08      	ldr	r3, [pc, #32]	; (e9e4 <conf_init+0x58>)
    e9c2:	681c      	ldr	r4, [r3, #0]
    e9c4:	4603      	mov	r3, r0
    e9c6:	4602      	mov	r2, r0
    e9c8:	4601      	mov	r1, r0
    e9ca:	47a0      	blx	r4
    os_eventq_put(os_eventq_dflt_get(), &conf_ev_load);
    e9cc:	f7fa ff20 	bl	9810 <os_eventq_dflt_get>
    e9d0:	4905      	ldr	r1, [pc, #20]	; (e9e8 <conf_init+0x5c>)
    e9d2:	f7fa fe6f 	bl	96b4 <os_eventq_put>
}
    e9d6:	b002      	add	sp, #8
    e9d8:	bd10      	pop	{r4, pc}
    e9da:	bf00      	nop
    e9dc:	20003888 	.word	0x20003888
    e9e0:	20003884 	.word	0x20003884
    e9e4:	2000064c 	.word	0x2000064c
    e9e8:	200005e0 	.word	0x200005e0

0000e9ec <conf_lock>:
{
    e9ec:	b508      	push	{r3, lr}
    os_mutex_pend(&conf_mtx, 0xFFFFFFFF);
    e9ee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e9f2:	4802      	ldr	r0, [pc, #8]	; (e9fc <conf_lock+0x10>)
    e9f4:	f7fc f89c 	bl	ab30 <os_mutex_pend>
}
    e9f8:	bd08      	pop	{r3, pc}
    e9fa:	bf00      	nop
    e9fc:	20003888 	.word	0x20003888

0000ea00 <conf_unlock>:
{
    ea00:	b508      	push	{r3, lr}
    os_mutex_release(&conf_mtx);
    ea02:	4802      	ldr	r0, [pc, #8]	; (ea0c <conf_unlock+0xc>)
    ea04:	f7fc f838 	bl	aa78 <os_mutex_release>
}
    ea08:	bd08      	pop	{r3, pc}
    ea0a:	bf00      	nop
    ea0c:	20003888 	.word	0x20003888

0000ea10 <conf_register>:
{
    ea10:	b510      	push	{r4, lr}
    ea12:	4604      	mov	r4, r0
    conf_lock();
    ea14:	f7ff ffea 	bl	e9ec <conf_lock>
    SLIST_INSERT_HEAD(&conf_handlers, handler, ch_list);
    ea18:	4b03      	ldr	r3, [pc, #12]	; (ea28 <conf_register+0x18>)
    ea1a:	681a      	ldr	r2, [r3, #0]
    ea1c:	6022      	str	r2, [r4, #0]
    ea1e:	601c      	str	r4, [r3, #0]
    conf_unlock();
    ea20:	f7ff ffee 	bl	ea00 <conf_unlock>
}
    ea24:	2000      	movs	r0, #0
    ea26:	bd10      	pop	{r4, pc}
    ea28:	20003884 	.word	0x20003884

0000ea2c <conf_handler_lookup>:
/*
 * Find conf_handler based on name.
 */
struct conf_handler *
conf_handler_lookup(char *name)
{
    ea2c:	b538      	push	{r3, r4, r5, lr}
    ea2e:	4605      	mov	r5, r0
    struct conf_handler *ch;

    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
    ea30:	4b06      	ldr	r3, [pc, #24]	; (ea4c <conf_handler_lookup+0x20>)
    ea32:	681c      	ldr	r4, [r3, #0]
    ea34:	e000      	b.n	ea38 <conf_handler_lookup+0xc>
    ea36:	6824      	ldr	r4, [r4, #0]
    ea38:	b12c      	cbz	r4, ea46 <conf_handler_lookup+0x1a>
        if (!strcmp(name, ch->ch_name)) {
    ea3a:	6861      	ldr	r1, [r4, #4]
    ea3c:	4628      	mov	r0, r5
    ea3e:	f7ff f80b 	bl	da58 <strcmp>
    ea42:	2800      	cmp	r0, #0
    ea44:	d1f7      	bne.n	ea36 <conf_handler_lookup+0xa>
            return ch;
        }
    }
    return NULL;
}
    ea46:	4620      	mov	r0, r4
    ea48:	bd38      	pop	{r3, r4, r5, pc}
    ea4a:	bf00      	nop
    ea4c:	20003884 	.word	0x20003884

0000ea50 <conf_parse_name>:
/*
 * Separate string into argv array.
 */
int
conf_parse_name(char *name, int *name_argc, char *name_argv[])
{
    ea50:	b570      	push	{r4, r5, r6, lr}
    ea52:	b082      	sub	sp, #8
    ea54:	460e      	mov	r6, r1
    ea56:	4615      	mov	r5, r2
    char *tok;
    char *tok_ptr;
    char *sep = CONF_NAME_SEPARATOR;
    int i;

    tok = strtok_r(name, sep, &tok_ptr);
    ea58:	aa01      	add	r2, sp, #4
    ea5a:	4909      	ldr	r1, [pc, #36]	; (ea80 <conf_parse_name+0x30>)
    ea5c:	f00d fcfb 	bl	1c456 <strtok_r>

    i = 0;
    ea60:	2300      	movs	r3, #0
    while (tok) {
    ea62:	e008      	b.n	ea76 <conf_parse_name+0x26>
        name_argv[i++] = tok;
    ea64:	1c5c      	adds	r4, r3, #1
    ea66:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
        tok = strtok_r(NULL, sep, &tok_ptr);
    ea6a:	aa01      	add	r2, sp, #4
    ea6c:	4904      	ldr	r1, [pc, #16]	; (ea80 <conf_parse_name+0x30>)
    ea6e:	2000      	movs	r0, #0
    ea70:	f00d fcf1 	bl	1c456 <strtok_r>
        name_argv[i++] = tok;
    ea74:	4623      	mov	r3, r4
    while (tok) {
    ea76:	2800      	cmp	r0, #0
    ea78:	d1f4      	bne.n	ea64 <conf_parse_name+0x14>
    }
    *name_argc = i;
    ea7a:	6033      	str	r3, [r6, #0]

    return 0;
}
    ea7c:	b002      	add	sp, #8
    ea7e:	bd70      	pop	{r4, r5, r6, pc}
    ea80:	00023230 	.word	0x00023230

0000ea84 <conf_parse_and_lookup>:

struct conf_handler *
conf_parse_and_lookup(char *name, int *name_argc, char *name_argv[])
{
    ea84:	b510      	push	{r4, lr}
    ea86:	4614      	mov	r4, r2
    int rc;

    rc = conf_parse_name(name, name_argc, name_argv);
    ea88:	f7ff ffe2 	bl	ea50 <conf_parse_name>
    if (rc) {
    ea8c:	b918      	cbnz	r0, ea96 <conf_parse_and_lookup+0x12>
        return NULL;
    }
    return conf_handler_lookup(name_argv[0]);
    ea8e:	6820      	ldr	r0, [r4, #0]
    ea90:	f7ff ffcc 	bl	ea2c <conf_handler_lookup>
}
    ea94:	bd10      	pop	{r4, pc}
        return NULL;
    ea96:	2000      	movs	r0, #0
    ea98:	e7fc      	b.n	ea94 <conf_parse_and_lookup+0x10>

0000ea9a <conf_value_from_str>:
{
    int32_t val;
    int64_t val64;
    char *eptr;

    if (!val_str) {
    ea9a:	2800      	cmp	r0, #0
    ea9c:	d051      	beq.n	eb42 <conf_value_from_str+0xa8>
{
    ea9e:	b5f0      	push	{r4, r5, r6, r7, lr}
    eaa0:	b083      	sub	sp, #12
    eaa2:	460c      	mov	r4, r1
    eaa4:	4616      	mov	r6, r2
    eaa6:	461d      	mov	r5, r3
    eaa8:	4607      	mov	r7, r0
        goto err;
    }
    switch (type) {
    eaaa:	1e8b      	subs	r3, r1, #2
    eaac:	2b08      	cmp	r3, #8
    eaae:	d84a      	bhi.n	eb46 <conf_value_from_str+0xac>
    eab0:	e8df f003 	tbb	[pc, r3]
    eab4:	32050505 	.word	0x32050505
    eab8:	4949493d 	.word	0x4949493d
    eabc:	05          	.byte	0x05
    eabd:	00          	.byte	0x00
    case CONF_INT8:
    case CONF_INT16:
    case CONF_INT32:
    case CONF_BOOL:
        val = strtol(val_str, &eptr, 0);
    eabe:	2200      	movs	r2, #0
    eac0:	a901      	add	r1, sp, #4
    eac2:	f00d fcd8 	bl	1c476 <strtol>
        if (*eptr != '\0') {
    eac6:	9b01      	ldr	r3, [sp, #4]
    eac8:	781b      	ldrb	r3, [r3, #0]
    eaca:	2b00      	cmp	r3, #0
    eacc:	d13e      	bne.n	eb4c <conf_value_from_str+0xb2>
            goto err;
        }
        if (type == CONF_BOOL) {
    eace:	2c0a      	cmp	r4, #10
    ead0:	d007      	beq.n	eae2 <conf_value_from_str+0x48>
            if (val < 0 || val > 1) {
                goto err;
            }
            *(bool *)vp = val;
        } else if (type == CONF_INT8) {
    ead2:	2c02      	cmp	r4, #2
    ead4:	d00d      	beq.n	eaf2 <conf_value_from_str+0x58>
            if (val < INT8_MIN || val > UINT8_MAX) {
                goto err;
            }
            *(int8_t *)vp = val;
        } else if (type == CONF_INT16) {
    ead6:	2c03      	cmp	r4, #3
    ead8:	d013      	beq.n	eb02 <conf_value_from_str+0x68>
            if (val < INT16_MIN || val > UINT16_MAX) {
                goto err;
            }
            *(int16_t *)vp = val;
        } else if (type == CONF_INT32) {
    eada:	2c04      	cmp	r4, #4
    eadc:	d019      	beq.n	eb12 <conf_value_from_str+0x78>
        strcpy(vp, val_str);
        break;
    default:
        goto err;
    }
    return 0;
    eade:	2000      	movs	r0, #0
    eae0:	e032      	b.n	eb48 <conf_value_from_str+0xae>
            if (val < 0 || val > 1) {
    eae2:	2801      	cmp	r0, #1
    eae4:	d834      	bhi.n	eb50 <conf_value_from_str+0xb6>
            *(bool *)vp = val;
    eae6:	3800      	subs	r0, #0
    eae8:	bf18      	it	ne
    eaea:	2001      	movne	r0, #1
    eaec:	7030      	strb	r0, [r6, #0]
    return 0;
    eaee:	2000      	movs	r0, #0
    eaf0:	e02a      	b.n	eb48 <conf_value_from_str+0xae>
            if (val < INT8_MIN || val > UINT8_MAX) {
    eaf2:	f100 0380 	add.w	r3, r0, #128	; 0x80
    eaf6:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
    eafa:	d22b      	bcs.n	eb54 <conf_value_from_str+0xba>
            *(int8_t *)vp = val;
    eafc:	7030      	strb	r0, [r6, #0]
    return 0;
    eafe:	2000      	movs	r0, #0
    eb00:	e022      	b.n	eb48 <conf_value_from_str+0xae>
            if (val < INT16_MIN || val > UINT16_MAX) {
    eb02:	f500 4300 	add.w	r3, r0, #32768	; 0x8000
    eb06:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
    eb0a:	d225      	bcs.n	eb58 <conf_value_from_str+0xbe>
            *(int16_t *)vp = val;
    eb0c:	8030      	strh	r0, [r6, #0]
    return 0;
    eb0e:	2000      	movs	r0, #0
    eb10:	e01a      	b.n	eb48 <conf_value_from_str+0xae>
            *(int32_t *)vp = val;
    eb12:	6030      	str	r0, [r6, #0]
    return 0;
    eb14:	2000      	movs	r0, #0
    eb16:	e017      	b.n	eb48 <conf_value_from_str+0xae>
        val64 = strtoll(val_str, &eptr, 0);
    eb18:	2200      	movs	r2, #0
    eb1a:	a901      	add	r1, sp, #4
    eb1c:	f00d fcb1 	bl	1c482 <strtoll>
        if (*eptr != '\0') {
    eb20:	9b01      	ldr	r3, [sp, #4]
    eb22:	781b      	ldrb	r3, [r3, #0]
    eb24:	b9d3      	cbnz	r3, eb5c <conf_value_from_str+0xc2>
        *(int64_t *)vp = val64;
    eb26:	6030      	str	r0, [r6, #0]
    eb28:	6071      	str	r1, [r6, #4]
    return 0;
    eb2a:	2000      	movs	r0, #0
        break;
    eb2c:	e00c      	b.n	eb48 <conf_value_from_str+0xae>
        val = strlen(val_str);
    eb2e:	f7fe ff9f 	bl	da70 <strlen>
        if (val + 1 > maxlen) {
    eb32:	42a8      	cmp	r0, r5
    eb34:	da14      	bge.n	eb60 <conf_value_from_str+0xc6>
        strcpy(vp, val_str);
    eb36:	4639      	mov	r1, r7
    eb38:	4630      	mov	r0, r6
    eb3a:	f00d fc63 	bl	1c404 <strcpy>
    return 0;
    eb3e:	2000      	movs	r0, #0
        break;
    eb40:	e002      	b.n	eb48 <conf_value_from_str+0xae>
err:
    return OS_INVALID_PARM;
    eb42:	2003      	movs	r0, #3
}
    eb44:	4770      	bx	lr
    switch (type) {
    eb46:	2003      	movs	r0, #3
}
    eb48:	b003      	add	sp, #12
    eb4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return OS_INVALID_PARM;
    eb4c:	2003      	movs	r0, #3
    eb4e:	e7fb      	b.n	eb48 <conf_value_from_str+0xae>
    eb50:	2003      	movs	r0, #3
    eb52:	e7f9      	b.n	eb48 <conf_value_from_str+0xae>
    eb54:	2003      	movs	r0, #3
    eb56:	e7f7      	b.n	eb48 <conf_value_from_str+0xae>
    eb58:	2003      	movs	r0, #3
    eb5a:	e7f5      	b.n	eb48 <conf_value_from_str+0xae>
    eb5c:	2003      	movs	r0, #3
    eb5e:	e7f3      	b.n	eb48 <conf_value_from_str+0xae>
    eb60:	2003      	movs	r0, #3
    eb62:	e7f1      	b.n	eb48 <conf_value_from_str+0xae>

0000eb64 <conf_str_from_value>:
    return 0;
}

char *
conf_str_from_value(enum conf_type type, void *vp, char *buf, int buf_len)
{
    eb64:	468c      	mov	ip, r1
    int32_t val;

    if (type == CONF_STRING) {
    eb66:	2806      	cmp	r0, #6
    eb68:	d02f      	beq.n	ebca <conf_str_from_value+0x66>
{
    eb6a:	b510      	push	{r4, lr}
    eb6c:	b082      	sub	sp, #8
    eb6e:	4614      	mov	r4, r2
    eb70:	4619      	mov	r1, r3
        return vp;
    }
    switch (type) {
    eb72:	2805      	cmp	r0, #5
    eb74:	d01f      	beq.n	ebb6 <conf_str_from_value+0x52>
    eb76:	d903      	bls.n	eb80 <conf_str_from_value+0x1c>
    eb78:	280a      	cmp	r0, #10
    eb7a:	d005      	beq.n	eb88 <conf_str_from_value+0x24>
    eb7c:	2000      	movs	r0, #0
    eb7e:	e027      	b.n	ebd0 <conf_str_from_value+0x6c>
    eb80:	1e83      	subs	r3, r0, #2
    eb82:	b2db      	uxtb	r3, r3
    eb84:	2b02      	cmp	r3, #2
    eb86:	d822      	bhi.n	ebce <conf_str_from_value+0x6a>
    case CONF_INT8:
    case CONF_INT16:
    case CONF_INT32:
    case CONF_BOOL:
        if (type == CONF_BOOL) {
    eb88:	280a      	cmp	r0, #10
    eb8a:	d006      	beq.n	eb9a <conf_str_from_value+0x36>
            val = *(bool *)vp;
        } else if (type == CONF_INT8) {
    eb8c:	2802      	cmp	r0, #2
    eb8e:	d00c      	beq.n	ebaa <conf_str_from_value+0x46>
            val = *(int8_t *)vp;
        } else if (type == CONF_INT16) {
    eb90:	2803      	cmp	r0, #3
    eb92:	d00d      	beq.n	ebb0 <conf_str_from_value+0x4c>
            val = *(int16_t *)vp;
        } else {
            val = *(int32_t *)vp;
    eb94:	f8dc 3000 	ldr.w	r3, [ip]
    eb98:	e001      	b.n	eb9e <conf_str_from_value+0x3a>
            val = *(bool *)vp;
    eb9a:	f89c 3000 	ldrb.w	r3, [ip]
        }
        snprintf(buf, buf_len, "%ld", (long)val);
    eb9e:	4a0d      	ldr	r2, [pc, #52]	; (ebd4 <conf_str_from_value+0x70>)
    eba0:	4620      	mov	r0, r4
    eba2:	f7ff fb70 	bl	e286 <snprintf>
        return buf;
    eba6:	4620      	mov	r0, r4
    eba8:	e012      	b.n	ebd0 <conf_str_from_value+0x6c>
            val = *(int8_t *)vp;
    ebaa:	f99c 3000 	ldrsb.w	r3, [ip]
    ebae:	e7f6      	b.n	eb9e <conf_str_from_value+0x3a>
            val = *(int16_t *)vp;
    ebb0:	f9bc 3000 	ldrsh.w	r3, [ip]
    ebb4:	e7f3      	b.n	eb9e <conf_str_from_value+0x3a>
    case CONF_INT64:
        snprintf(buf, buf_len, "%lld", *(long long *)vp);
    ebb6:	e9dc 2300 	ldrd	r2, r3, [ip]
    ebba:	e9cd 2300 	strd	r2, r3, [sp]
    ebbe:	4a06      	ldr	r2, [pc, #24]	; (ebd8 <conf_str_from_value+0x74>)
    ebc0:	4620      	mov	r0, r4
    ebc2:	f7ff fb60 	bl	e286 <snprintf>
        return buf;
    ebc6:	4620      	mov	r0, r4
    ebc8:	e002      	b.n	ebd0 <conf_str_from_value+0x6c>
        return vp;
    ebca:	4608      	mov	r0, r1
    default:
        return NULL;
    }
}
    ebcc:	4770      	bx	lr
    switch (type) {
    ebce:	2000      	movs	r0, #0
}
    ebd0:	b002      	add	sp, #8
    ebd2:	bd10      	pop	{r4, pc}
    ebd4:	00023234 	.word	0x00023234
    ebd8:	00023238 	.word	0x00023238

0000ebdc <conf_set_value>:
    return buf;
}

int
conf_set_value(char *name, char *val_str)
{
    ebdc:	b530      	push	{r4, r5, lr}
    ebde:	b08b      	sub	sp, #44	; 0x2c
    ebe0:	4604      	mov	r4, r0
    ebe2:	460d      	mov	r5, r1
    int name_argc;
    char *name_argv[CONF_MAX_DIR_DEPTH];
    struct conf_handler *ch;
    int rc;

    conf_lock();
    ebe4:	f7ff ff02 	bl	e9ec <conf_lock>
    ch = conf_parse_and_lookup(name, &name_argc, name_argv);
    ebe8:	aa01      	add	r2, sp, #4
    ebea:	a909      	add	r1, sp, #36	; 0x24
    ebec:	4620      	mov	r0, r4
    ebee:	f7ff ff49 	bl	ea84 <conf_parse_and_lookup>
    if (!ch) {
    ebf2:	b158      	cbz	r0, ec0c <conf_set_value+0x30>
        rc = OS_INVALID_PARM;
        goto out;
    }
    rc = ch->ch_set(name_argc - 1, &name_argv[1], val_str);
    ebf4:	68c3      	ldr	r3, [r0, #12]
    ebf6:	462a      	mov	r2, r5
    ebf8:	a902      	add	r1, sp, #8
    ebfa:	9809      	ldr	r0, [sp, #36]	; 0x24
    ebfc:	3801      	subs	r0, #1
    ebfe:	4798      	blx	r3
    ec00:	4604      	mov	r4, r0
out:
    conf_unlock();
    ec02:	f7ff fefd 	bl	ea00 <conf_unlock>
    return rc;
}
    ec06:	4620      	mov	r0, r4
    ec08:	b00b      	add	sp, #44	; 0x2c
    ec0a:	bd30      	pop	{r4, r5, pc}
        rc = OS_INVALID_PARM;
    ec0c:	2403      	movs	r4, #3
    ec0e:	e7f8      	b.n	ec02 <conf_set_value+0x26>

0000ec10 <conf_get_value>:
 * Return value will be pointer to beginning of that buffer,
 * except for string it will pointer to beginning of string.
 */
char *
conf_get_value(char *name, char *buf, int buf_len)
{
    ec10:	b570      	push	{r4, r5, r6, lr}
    ec12:	b08a      	sub	sp, #40	; 0x28
    ec14:	4604      	mov	r4, r0
    ec16:	460d      	mov	r5, r1
    ec18:	4616      	mov	r6, r2
    int name_argc;
    char *name_argv[CONF_MAX_DIR_DEPTH];
    struct conf_handler *ch;
    char *rval = NULL;

    conf_lock();
    ec1a:	f7ff fee7 	bl	e9ec <conf_lock>
    ch = conf_parse_and_lookup(name, &name_argc, name_argv);
    ec1e:	aa01      	add	r2, sp, #4
    ec20:	a909      	add	r1, sp, #36	; 0x24
    ec22:	4620      	mov	r0, r4
    ec24:	f7ff ff2e 	bl	ea84 <conf_parse_and_lookup>
    if (!ch) {
    ec28:	4604      	mov	r4, r0
    ec2a:	b140      	cbz	r0, ec3e <conf_get_value+0x2e>
        goto out;
    }

    if (!ch->ch_get) {
    ec2c:	6884      	ldr	r4, [r0, #8]
    ec2e:	b15c      	cbz	r4, ec48 <conf_get_value+0x38>
        goto out;
    }
    rval = ch->ch_get(name_argc - 1, &name_argv[1], buf, buf_len);
    ec30:	4633      	mov	r3, r6
    ec32:	462a      	mov	r2, r5
    ec34:	a902      	add	r1, sp, #8
    ec36:	9809      	ldr	r0, [sp, #36]	; 0x24
    ec38:	3801      	subs	r0, #1
    ec3a:	47a0      	blx	r4
    ec3c:	4604      	mov	r4, r0
out:
    conf_unlock();
    ec3e:	f7ff fedf 	bl	ea00 <conf_unlock>
    return rval;
}
    ec42:	4620      	mov	r0, r4
    ec44:	b00a      	add	sp, #40	; 0x28
    ec46:	bd70      	pop	{r4, r5, r6, pc}
    char *rval = NULL;
    ec48:	2400      	movs	r4, #0
    ec4a:	e7f8      	b.n	ec3e <conf_get_value+0x2e>

0000ec4c <conf_commit>:

int
conf_commit(char *name)
{
    ec4c:	b530      	push	{r4, r5, lr}
    ec4e:	b08b      	sub	sp, #44	; 0x2c
    ec50:	4604      	mov	r4, r0
    char *name_argv[CONF_MAX_DIR_DEPTH];
    struct conf_handler *ch;
    int rc;
    int rc2;

    conf_lock();
    ec52:	f7ff fecb 	bl	e9ec <conf_lock>
    if (name) {
    ec56:	b174      	cbz	r4, ec76 <conf_commit+0x2a>
        ch = conf_parse_and_lookup(name, &name_argc, name_argv);
    ec58:	aa01      	add	r2, sp, #4
    ec5a:	a909      	add	r1, sp, #36	; 0x24
    ec5c:	4620      	mov	r0, r4
    ec5e:	f7ff ff11 	bl	ea84 <conf_parse_and_lookup>
        if (!ch) {
    ec62:	b1b8      	cbz	r0, ec94 <conf_commit+0x48>
            rc = OS_INVALID_PARM;
            goto out;
        }
        if (ch->ch_commit) {
    ec64:	6903      	ldr	r3, [r0, #16]
    ec66:	b1bb      	cbz	r3, ec98 <conf_commit+0x4c>
            rc = ch->ch_commit();
    ec68:	4798      	blx	r3
    ec6a:	4605      	mov	r5, r0
                }
            }
        }
    }
out:
    conf_unlock();
    ec6c:	f7ff fec8 	bl	ea00 <conf_unlock>
    return rc;
}
    ec70:	4628      	mov	r0, r5
    ec72:	b00b      	add	sp, #44	; 0x2c
    ec74:	bd30      	pop	{r4, r5, pc}
        SLIST_FOREACH(ch, &conf_handlers, ch_list) {
    ec76:	4b09      	ldr	r3, [pc, #36]	; (ec9c <conf_commit+0x50>)
    ec78:	681c      	ldr	r4, [r3, #0]
        rc = 0;
    ec7a:	2500      	movs	r5, #0
        SLIST_FOREACH(ch, &conf_handlers, ch_list) {
    ec7c:	e000      	b.n	ec80 <conf_commit+0x34>
    ec7e:	6824      	ldr	r4, [r4, #0]
    ec80:	2c00      	cmp	r4, #0
    ec82:	d0f3      	beq.n	ec6c <conf_commit+0x20>
            if (ch->ch_commit) {
    ec84:	6923      	ldr	r3, [r4, #16]
    ec86:	2b00      	cmp	r3, #0
    ec88:	d0f9      	beq.n	ec7e <conf_commit+0x32>
                rc2 = ch->ch_commit();
    ec8a:	4798      	blx	r3
                if (!rc) {
    ec8c:	2d00      	cmp	r5, #0
    ec8e:	d1f6      	bne.n	ec7e <conf_commit+0x32>
                    rc = rc2;
    ec90:	4605      	mov	r5, r0
    ec92:	e7f4      	b.n	ec7e <conf_commit+0x32>
            rc = OS_INVALID_PARM;
    ec94:	2503      	movs	r5, #3
    ec96:	e7e9      	b.n	ec6c <conf_commit+0x20>
            rc = 0;
    ec98:	2500      	movs	r5, #0
    ec9a:	e7e7      	b.n	ec6c <conf_commit+0x20>
    ec9c:	20003884 	.word	0x20003884

0000eca0 <conf_running_one>:
};

#if (MYNEWT_VAL(CONFIG_CLI_RW) & 1) == 1
static void
conf_running_one(char *name, char *val)
{
    eca0:	b508      	push	{r3, lr}
    console_printf("%s = %s\n", name, val ? val : "<del>");
    eca2:	460a      	mov	r2, r1
    eca4:	b121      	cbz	r1, ecb0 <conf_running_one+0x10>
    eca6:	4601      	mov	r1, r0
    eca8:	4802      	ldr	r0, [pc, #8]	; (ecb4 <conf_running_one+0x14>)
    ecaa:	f000 fe73 	bl	f994 <console_printf>
}
    ecae:	bd08      	pop	{r3, pc}
    console_printf("%s = %s\n", name, val ? val : "<del>");
    ecb0:	4a01      	ldr	r2, [pc, #4]	; (ecb8 <conf_running_one+0x18>)
    ecb2:	e7f8      	b.n	eca6 <conf_running_one+0x6>
    ecb4:	00023248 	.word	0x00023248
    ecb8:	00023240 	.word	0x00023240

0000ecbc <conf_dump_running>:

static void
conf_dump_running(void)
{
    ecbc:	b510      	push	{r4, lr}
    struct conf_handler *ch;

    conf_lock();
    ecbe:	f7ff fe95 	bl	e9ec <conf_lock>
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
    ecc2:	4b07      	ldr	r3, [pc, #28]	; (ece0 <conf_dump_running+0x24>)
    ecc4:	681c      	ldr	r4, [r3, #0]
    ecc6:	e003      	b.n	ecd0 <conf_dump_running+0x14>
        if (ch->ch_export) {
            ch->ch_export(conf_running_one, CONF_EXPORT_SHOW);
    ecc8:	2101      	movs	r1, #1
    ecca:	4806      	ldr	r0, [pc, #24]	; (ece4 <conf_dump_running+0x28>)
    eccc:	4798      	blx	r3
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
    ecce:	6824      	ldr	r4, [r4, #0]
    ecd0:	b11c      	cbz	r4, ecda <conf_dump_running+0x1e>
        if (ch->ch_export) {
    ecd2:	6963      	ldr	r3, [r4, #20]
    ecd4:	2b00      	cmp	r3, #0
    ecd6:	d1f7      	bne.n	ecc8 <conf_dump_running+0xc>
    ecd8:	e7f9      	b.n	ecce <conf_dump_running+0x12>
        }
    }
    conf_unlock();
    ecda:	f7ff fe91 	bl	ea00 <conf_unlock>
}
    ecde:	bd10      	pop	{r4, pc}
    ece0:	20003884 	.word	0x20003884
    ece4:	0000eca1 	.word	0x0000eca1

0000ece8 <shell_conf_command>:
}
#endif

static int
shell_conf_command(int argc, char **argv)
{
    ece8:	b530      	push	{r4, r5, lr}
    ecea:	b0c3      	sub	sp, #268	; 0x10c
    char *val = NULL;
    char tmp_buf[CONF_MAX_VAL_LEN + 1];
    int rc;

    (void)rc;
    switch (argc) {
    ecec:	2802      	cmp	r0, #2
    ecee:	d007      	beq.n	ed00 <shell_conf_command+0x18>
    ecf0:	2803      	cmp	r0, #3
    ecf2:	d022      	beq.n	ed3a <shell_conf_command+0x52>
        }
    }
    return 0;
err:
#endif
    console_printf("Invalid args\n");
    ecf4:	4826      	ldr	r0, [pc, #152]	; (ed90 <shell_conf_command+0xa8>)
    ecf6:	f000 fe4d 	bl	f994 <console_printf>
    return 0;
}
    ecfa:	2000      	movs	r0, #0
    ecfc:	b043      	add	sp, #268	; 0x10c
    ecfe:	bd30      	pop	{r4, r5, pc}
        name = argv[1];
    ed00:	684c      	ldr	r4, [r1, #4]
    char *val = NULL;
    ed02:	2500      	movs	r5, #0
    if (!strcmp(name, "commit")) {
    ed04:	4923      	ldr	r1, [pc, #140]	; (ed94 <shell_conf_command+0xac>)
    ed06:	4620      	mov	r0, r4
    ed08:	f7fe fea6 	bl	da58 <strcmp>
    ed0c:	b1c0      	cbz	r0, ed40 <shell_conf_command+0x58>
        if (!strcmp(name, "dump")) {
    ed0e:	4922      	ldr	r1, [pc, #136]	; (ed98 <shell_conf_command+0xb0>)
    ed10:	4620      	mov	r0, r4
    ed12:	f7fe fea1 	bl	da58 <strcmp>
    ed16:	b1f0      	cbz	r0, ed56 <shell_conf_command+0x6e>
            if (!strcmp(name, "save")) {
    ed18:	4920      	ldr	r1, [pc, #128]	; (ed9c <shell_conf_command+0xb4>)
    ed1a:	4620      	mov	r0, r4
    ed1c:	f7fe fe9c 	bl	da58 <strcmp>
    ed20:	b318      	cbz	r0, ed6a <shell_conf_command+0x82>
    if (!val) {
    ed22:	b32d      	cbz	r5, ed70 <shell_conf_command+0x88>
        rc = conf_set_value(name, val);
    ed24:	4629      	mov	r1, r5
    ed26:	4620      	mov	r0, r4
    ed28:	f7ff ff58 	bl	ebdc <conf_set_value>
        if (rc) {
    ed2c:	4601      	mov	r1, r0
    ed2e:	2800      	cmp	r0, #0
    ed30:	d0e3      	beq.n	ecfa <shell_conf_command+0x12>
            console_printf("Failed to set, err: %d\n", rc);
    ed32:	481b      	ldr	r0, [pc, #108]	; (eda0 <shell_conf_command+0xb8>)
    ed34:	f000 fe2e 	bl	f994 <console_printf>
            goto err;
    ed38:	e7dc      	b.n	ecf4 <shell_conf_command+0xc>
        name = argv[1];
    ed3a:	684c      	ldr	r4, [r1, #4]
        val = argv[2];
    ed3c:	688d      	ldr	r5, [r1, #8]
        break;
    ed3e:	e7e1      	b.n	ed04 <shell_conf_command+0x1c>
        rc = conf_commit(val);
    ed40:	4628      	mov	r0, r5
    ed42:	f7ff ff83 	bl	ec4c <conf_commit>
        if (rc) {
    ed46:	b120      	cbz	r0, ed52 <shell_conf_command+0x6a>
            val = "Failed to commit\n";
    ed48:	4916      	ldr	r1, [pc, #88]	; (eda4 <shell_conf_command+0xbc>)
        console_printf("%s", val);
    ed4a:	4817      	ldr	r0, [pc, #92]	; (eda8 <shell_conf_command+0xc0>)
    ed4c:	f000 fe22 	bl	f994 <console_printf>
        return 0;
    ed50:	e7d3      	b.n	ecfa <shell_conf_command+0x12>
            val = "Done\n";
    ed52:	4916      	ldr	r1, [pc, #88]	; (edac <shell_conf_command+0xc4>)
    ed54:	e7f9      	b.n	ed4a <shell_conf_command+0x62>
            if (!val || !strcmp(val, "running")) {
    ed56:	b12d      	cbz	r5, ed64 <shell_conf_command+0x7c>
    ed58:	4915      	ldr	r1, [pc, #84]	; (edb0 <shell_conf_command+0xc8>)
    ed5a:	4628      	mov	r0, r5
    ed5c:	f7fe fe7c 	bl	da58 <strcmp>
    ed60:	2800      	cmp	r0, #0
    ed62:	d1ca      	bne.n	ecfa <shell_conf_command+0x12>
                conf_dump_running();
    ed64:	f7ff ffaa 	bl	ecbc <conf_dump_running>
            return 0;
    ed68:	e7c7      	b.n	ecfa <shell_conf_command+0x12>
                conf_save();
    ed6a:	f7ff fdd5 	bl	e918 <conf_save>
                return 0;
    ed6e:	e7c4      	b.n	ecfa <shell_conf_command+0x12>
        val = conf_get_value(name, tmp_buf, sizeof(tmp_buf));
    ed70:	f240 1201 	movw	r2, #257	; 0x101
    ed74:	a901      	add	r1, sp, #4
    ed76:	4620      	mov	r0, r4
    ed78:	f7ff ff4a 	bl	ec10 <conf_get_value>
        if (!val) {
    ed7c:	4601      	mov	r1, r0
    ed7e:	b118      	cbz	r0, ed88 <shell_conf_command+0xa0>
        console_printf("%s\n", val);
    ed80:	480c      	ldr	r0, [pc, #48]	; (edb4 <shell_conf_command+0xcc>)
    ed82:	f000 fe07 	bl	f994 <console_printf>
    ed86:	e7b8      	b.n	ecfa <shell_conf_command+0x12>
            console_printf("Cannot display value\n");
    ed88:	480b      	ldr	r0, [pc, #44]	; (edb8 <shell_conf_command+0xd0>)
    ed8a:	f000 fe03 	bl	f994 <console_printf>
            goto err;
    ed8e:	e7b1      	b.n	ecf4 <shell_conf_command+0xc>
    ed90:	000232c4 	.word	0x000232c4
    ed94:	00023270 	.word	0x00023270
    ed98:	0002327c 	.word	0x0002327c
    ed9c:	0002328c 	.word	0x0002328c
    eda0:	000232ac 	.word	0x000232ac
    eda4:	0002325c 	.word	0x0002325c
    eda8:	00023278 	.word	0x00023278
    edac:	00023254 	.word	0x00023254
    edb0:	00023284 	.word	0x00023284
    edb4:	000235cc 	.word	0x000235cc
    edb8:	00023294 	.word	0x00023294

0000edbc <conf_cli_register>:

int
conf_cli_register(void)
{
    edbc:	b508      	push	{r3, lr}
    return shell_cmd_register(&shell_conf_cmd);
    edbe:	4802      	ldr	r0, [pc, #8]	; (edc8 <conf_cli_register+0xc>)
    edc0:	f001 fcd8 	bl	10774 <shell_cmd_register>
}
    edc4:	bd08      	pop	{r3, pc}
    edc6:	bf00      	nop
    edc8:	200005f0 	.word	0x200005f0

0000edcc <conf_nmgr_write>:
    return 0;
}

static int
conf_nmgr_write(struct mgmt_cbuf *cb)
{
    edcc:	b570      	push	{r4, r5, r6, lr}
    edce:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
    edd2:	4605      	mov	r5, r0
    int rc;
    char name_str[CONF_MAX_NAME_LEN];
    char val_str[CONF_MAX_VAL_LEN];
    bool do_save = false;
    edd4:	f10d 06c7 	add.w	r6, sp, #199	; 0xc7
    edd8:	2400      	movs	r4, #0
    edda:	f88d 40c7 	strb.w	r4, [sp, #199]	; 0xc7
    const struct cbor_attr_t val_attr[] = {
    edde:	22c0      	movs	r2, #192	; 0xc0
    ede0:	4621      	mov	r1, r4
    ede2:	4668      	mov	r0, sp
    ede4:	f7fe fe0d 	bl	da02 <memset>
    ede8:	4b23      	ldr	r3, [pc, #140]	; (ee78 <conf_nmgr_write+0xac>)
    edea:	9300      	str	r3, [sp, #0]
    edec:	2304      	movs	r3, #4
    edee:	f88d 3004 	strb.w	r3, [sp, #4]
    edf2:	aa72      	add	r2, sp, #456	; 0x1c8
    edf4:	9202      	str	r2, [sp, #8]
    edf6:	2240      	movs	r2, #64	; 0x40
    edf8:	920a      	str	r2, [sp, #40]	; 0x28
    edfa:	4a20      	ldr	r2, [pc, #128]	; (ee7c <conf_nmgr_write+0xb0>)
    edfc:	920c      	str	r2, [sp, #48]	; 0x30
    edfe:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    ee02:	ab32      	add	r3, sp, #200	; 0xc8
    ee04:	930e      	str	r3, [sp, #56]	; 0x38
    ee06:	f44f 7280 	mov.w	r2, #256	; 0x100
    ee0a:	9216      	str	r2, [sp, #88]	; 0x58
    ee0c:	4a1c      	ldr	r2, [pc, #112]	; (ee80 <conf_nmgr_write+0xb4>)
    ee0e:	9218      	str	r2, [sp, #96]	; 0x60
    ee10:	2205      	movs	r2, #5
    ee12:	f88d 2064 	strb.w	r2, [sp, #100]	; 0x64
    ee16:	961a      	str	r6, [sp, #104]	; 0x68
        [3] = {
            .attribute = NULL
        }
    };

    name_str[0] = '\0';
    ee18:	f88d 41c8 	strb.w	r4, [sp, #456]	; 0x1c8
    val_str[0] = '\0';
    ee1c:	f88d 40c8 	strb.w	r4, [sp, #200]	; 0xc8

    rc = cbor_read_object(&cb->it, val_attr);
    ee20:	4669      	mov	r1, sp
    ee22:	f105 001c 	add.w	r0, r5, #28
    ee26:	f003 ff8d 	bl	12d44 <cbor_read_object>
    if (rc) {
    ee2a:	b9f8      	cbnz	r0, ee6c <conf_nmgr_write+0xa0>
        return MGMT_ERR_EINVAL;
    }

    if (name_str[0] != '\0') {
    ee2c:	f89d 31c8 	ldrb.w	r3, [sp, #456]	; 0x1c8
    ee30:	b13b      	cbz	r3, ee42 <conf_nmgr_write+0x76>
        if (val_str[0] != '\0') {
    ee32:	f89d 30c8 	ldrb.w	r3, [sp, #200]	; 0xc8
    ee36:	b173      	cbz	r3, ee56 <conf_nmgr_write+0x8a>
            rc = conf_set_value(name_str, val_str);
    ee38:	a932      	add	r1, sp, #200	; 0xc8
    ee3a:	a872      	add	r0, sp, #456	; 0x1c8
    ee3c:	f7ff fece 	bl	ebdc <conf_set_value>
        } else {
            rc = conf_set_value(name_str, NULL);
        }
        if (rc) {
    ee40:	b9b0      	cbnz	r0, ee70 <conf_nmgr_write+0xa4>
            return MGMT_ERR_EINVAL;
        }
    }
    rc = conf_commit(NULL);
    ee42:	2000      	movs	r0, #0
    ee44:	f7ff ff02 	bl	ec4c <conf_commit>
    if (rc) {
    ee48:	b9a0      	cbnz	r0, ee74 <conf_nmgr_write+0xa8>
        return MGMT_ERR_EINVAL;
    }
    if (do_save) {
    ee4a:	f89d 30c7 	ldrb.w	r3, [sp, #199]	; 0xc7
    ee4e:	b93b      	cbnz	r3, ee60 <conf_nmgr_write+0x94>
        if (rc) {
            return MGMT_ERR_EINVAL;
        }
    }
    return 0;
}
    ee50:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
    ee54:	bd70      	pop	{r4, r5, r6, pc}
            rc = conf_set_value(name_str, NULL);
    ee56:	2100      	movs	r1, #0
    ee58:	a872      	add	r0, sp, #456	; 0x1c8
    ee5a:	f7ff febf 	bl	ebdc <conf_set_value>
    ee5e:	e7ef      	b.n	ee40 <conf_nmgr_write+0x74>
        rc = conf_save();
    ee60:	f7ff fd5a 	bl	e918 <conf_save>
        if (rc) {
    ee64:	2800      	cmp	r0, #0
    ee66:	d0f3      	beq.n	ee50 <conf_nmgr_write+0x84>
            return MGMT_ERR_EINVAL;
    ee68:	2003      	movs	r0, #3
    ee6a:	e7f1      	b.n	ee50 <conf_nmgr_write+0x84>
        return MGMT_ERR_EINVAL;
    ee6c:	2003      	movs	r0, #3
    ee6e:	e7ef      	b.n	ee50 <conf_nmgr_write+0x84>
            return MGMT_ERR_EINVAL;
    ee70:	2003      	movs	r0, #3
    ee72:	e7ed      	b.n	ee50 <conf_nmgr_write+0x84>
        return MGMT_ERR_EINVAL;
    ee74:	2003      	movs	r0, #3
    ee76:	e7eb      	b.n	ee50 <conf_nmgr_write+0x84>
    ee78:	00024b98 	.word	0x00024b98
    ee7c:	000232dc 	.word	0x000232dc
    ee80:	0002328c 	.word	0x0002328c

0000ee84 <conf_nmgr_read>:
{
    ee84:	b5f0      	push	{r4, r5, r6, r7, lr}
    ee86:	b0e9      	sub	sp, #420	; 0x1a4
    ee88:	4604      	mov	r4, r0
    const struct cbor_attr_t attr[2] = {
    ee8a:	2260      	movs	r2, #96	; 0x60
    ee8c:	2100      	movs	r1, #0
    ee8e:	4668      	mov	r0, sp
    ee90:	f7fe fdb7 	bl	da02 <memset>
    ee94:	4b19      	ldr	r3, [pc, #100]	; (eefc <conf_nmgr_read+0x78>)
    ee96:	9300      	str	r3, [sp, #0]
    ee98:	2304      	movs	r3, #4
    ee9a:	f88d 3004 	strb.w	r3, [sp, #4]
    ee9e:	ab58      	add	r3, sp, #352	; 0x160
    eea0:	9302      	str	r3, [sp, #8]
    eea2:	2340      	movs	r3, #64	; 0x40
    eea4:	930a      	str	r3, [sp, #40]	; 0x28
    rc = cbor_read_object(&cb->it, attr);
    eea6:	4669      	mov	r1, sp
    eea8:	f104 001c 	add.w	r0, r4, #28
    eeac:	f003 ff4a 	bl	12d44 <cbor_read_object>
    if (rc) {
    eeb0:	b9e8      	cbnz	r0, eeee <conf_nmgr_read+0x6a>
    eeb2:	4605      	mov	r5, r0
    val = conf_get_value(name_str, val_str, sizeof(val_str));
    eeb4:	f44f 7280 	mov.w	r2, #256	; 0x100
    eeb8:	a918      	add	r1, sp, #96	; 0x60
    eeba:	a858      	add	r0, sp, #352	; 0x160
    eebc:	f7ff fea8 	bl	ec10 <conf_get_value>
    if (!val) {
    eec0:	4607      	mov	r7, r0
    eec2:	b1b0      	cbz	r0, eef2 <conf_nmgr_read+0x6e>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "val");
    eec4:	340c      	adds	r4, #12
CBOR_API CborError cbor_encode_negative_int(CborEncoder *encoder, uint64_t absolute_value);
CBOR_API CborError cbor_encode_simple_value(CborEncoder *encoder, uint8_t value);
CBOR_API CborError cbor_encode_tag(CborEncoder *encoder, CborTag tag);
CBOR_API CborError cbor_encode_text_string(CborEncoder *encoder, const char *string, size_t length);
CBOR_INLINE_API CborError cbor_encode_text_stringz(CborEncoder *encoder, const char *string)
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
    eec6:	2203      	movs	r2, #3
    eec8:	490d      	ldr	r1, [pc, #52]	; (ef00 <conf_nmgr_read+0x7c>)
    eeca:	4620      	mov	r0, r4
    eecc:	f004 f921 	bl	13112 <cbor_encode_text_string>
    eed0:	4606      	mov	r6, r0
    eed2:	4638      	mov	r0, r7
    eed4:	f7fe fdcc 	bl	da70 <strlen>
    eed8:	4602      	mov	r2, r0
    eeda:	4639      	mov	r1, r7
    eedc:	4620      	mov	r0, r4
    eede:	f004 f918 	bl	13112 <cbor_encode_text_string>
    if (g_err) {
    eee2:	ea50 0306 	orrs.w	r3, r0, r6
    eee6:	d106      	bne.n	eef6 <conf_nmgr_read+0x72>
}
    eee8:	4628      	mov	r0, r5
    eeea:	b069      	add	sp, #420	; 0x1a4
    eeec:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return MGMT_ERR_EINVAL;
    eeee:	2503      	movs	r5, #3
    eef0:	e7fa      	b.n	eee8 <conf_nmgr_read+0x64>
        return MGMT_ERR_EINVAL;
    eef2:	2503      	movs	r5, #3
    eef4:	e7f8      	b.n	eee8 <conf_nmgr_read+0x64>
        return MGMT_ERR_ENOMEM;
    eef6:	2502      	movs	r5, #2
    eef8:	e7f6      	b.n	eee8 <conf_nmgr_read+0x64>
    eefa:	bf00      	nop
    eefc:	00024b98 	.word	0x00024b98
    ef00:	000232dc 	.word	0x000232dc

0000ef04 <conf_nmgr_register>:

int
conf_nmgr_register(void)
{
    ef04:	b508      	push	{r3, lr}
    return mgmt_group_register(&conf_nmgr_group);
    ef06:	4802      	ldr	r0, [pc, #8]	; (ef10 <conf_nmgr_register+0xc>)
    ef08:	f00e f9da 	bl	1d2c0 <mgmt_group_register>
}
    ef0c:	bd08      	pop	{r3, pc}
    ef0e:	bf00      	nop
    ef10:	20000600 	.word	0x20000600

0000ef14 <ring_buf_next>:
}

static uint8_t
ring_buf_next(uint8_t i, uint8_t size)
{
    return (uint8_t) ((i + 1) % size);
    ef14:	3001      	adds	r0, #1
    ef16:	fb90 f3f1 	sdiv	r3, r0, r1
    ef1a:	fb01 0013 	mls	r0, r1, r3, r0
}
    ef1e:	b2c0      	uxtb	r0, r0
    ef20:	4770      	bx	lr

0000ef22 <ring_buf_prev>:

static uint8_t
ring_buf_prev(uint8_t i, uint8_t size)
{
    return i == 0 ? i = size - 1 : --i;
    ef22:	b910      	cbnz	r0, ef2a <ring_buf_prev+0x8>
    ef24:	3901      	subs	r1, #1
    ef26:	b2c8      	uxtb	r0, r1
    ef28:	4770      	bx	lr
    ef2a:	3801      	subs	r0, #1
    ef2c:	b2c0      	uxtb	r0, r0
}
    ef2e:	4770      	bx	lr

0000ef30 <console_hist_is_full>:

static bool
console_hist_is_full(void)
{
    ef30:	b510      	push	{r4, lr}
    struct console_hist *sh = &console_hist;

    return ring_buf_next(sh->head, sh->size) == sh->tail;
    ef32:	4c05      	ldr	r4, [pc, #20]	; (ef48 <console_hist_is_full+0x18>)
    ef34:	78a1      	ldrb	r1, [r4, #2]
    ef36:	7820      	ldrb	r0, [r4, #0]
    ef38:	f7ff ffec 	bl	ef14 <ring_buf_next>
    ef3c:	7863      	ldrb	r3, [r4, #1]
}
    ef3e:	4298      	cmp	r0, r3
    ef40:	bf14      	ite	ne
    ef42:	2000      	movne	r0, #0
    ef44:	2001      	moveq	r0, #1
    ef46:	bd10      	pop	{r4, pc}
    ef48:	200038b4 	.word	0x200038b4

0000ef4c <handle_nlip>:
}

static int
handle_nlip(uint8_t byte)
{
    if (((nlip_state & NLIP_PKT_START1) &&
    ef4c:	4b13      	ldr	r3, [pc, #76]	; (ef9c <handle_nlip+0x50>)
    ef4e:	681b      	ldr	r3, [r3, #0]
    ef50:	f003 0203 	and.w	r2, r3, #3
    ef54:	2a03      	cmp	r2, #3
    ef56:	d01d      	beq.n	ef94 <handle_nlip+0x48>
         (nlip_state & NLIP_PKT_START2)) ||
        ((nlip_state & NLIP_DATA_START1) &&
    ef58:	f003 020c 	and.w	r2, r3, #12
         (nlip_state & NLIP_PKT_START2)) ||
    ef5c:	2a0c      	cmp	r2, #12
    ef5e:	d01b      	beq.n	ef98 <handle_nlip+0x4c>
         (nlip_state & NLIP_DATA_START2)))
    {
        return 1;
    }

    if ((nlip_state & NLIP_PKT_START1) &&
    ef60:	f013 0f01 	tst.w	r3, #1
    ef64:	d001      	beq.n	ef6a <handle_nlip+0x1e>
    ef66:	2809      	cmp	r0, #9
    ef68:	d008      	beq.n	ef7c <handle_nlip+0x30>
        (byte == CONSOLE_NLIP_PKT_START2)) {
        nlip_state |= NLIP_PKT_START2;
        return 1;
    } else if ((nlip_state & NLIP_DATA_START1) &&
    ef6a:	f013 0f04 	tst.w	r3, #4
    ef6e:	d001      	beq.n	ef74 <handle_nlip+0x28>
    ef70:	2814      	cmp	r0, #20
    ef72:	d009      	beq.n	ef88 <handle_nlip+0x3c>
               (byte == CONSOLE_NLIP_DATA_START2)) {
        nlip_state |= NLIP_DATA_START2;
        return 1;
    } else {
        nlip_state = 0;
    ef74:	2000      	movs	r0, #0
    ef76:	4b09      	ldr	r3, [pc, #36]	; (ef9c <handle_nlip+0x50>)
    ef78:	6018      	str	r0, [r3, #0]
        return 0;
    ef7a:	4770      	bx	lr
        nlip_state |= NLIP_PKT_START2;
    ef7c:	f043 0302 	orr.w	r3, r3, #2
    ef80:	4a06      	ldr	r2, [pc, #24]	; (ef9c <handle_nlip+0x50>)
    ef82:	6013      	str	r3, [r2, #0]
        return 1;
    ef84:	2001      	movs	r0, #1
    ef86:	4770      	bx	lr
        nlip_state |= NLIP_DATA_START2;
    ef88:	f043 0308 	orr.w	r3, r3, #8
    ef8c:	4a03      	ldr	r2, [pc, #12]	; (ef9c <handle_nlip+0x50>)
    ef8e:	6013      	str	r3, [r2, #0]
        return 1;
    ef90:	2001      	movs	r0, #1
    ef92:	4770      	bx	lr
        return 1;
    ef94:	2001      	movs	r0, #1
    ef96:	4770      	bx	lr
    ef98:	2001      	movs	r0, #1
    }
}
    ef9a:	4770      	bx	lr
    ef9c:	20004104 	.word	0x20004104

0000efa0 <trim_whitespace>:
{
    efa0:	b570      	push	{r4, r5, r6, lr}
    efa2:	4604      	mov	r4, r0
    efa4:	4615      	mov	r5, r2
    if (len == 0) {
    efa6:	460e      	mov	r6, r1
    efa8:	b909      	cbnz	r1, efae <trim_whitespace+0xe>
    efaa:	e02c      	b.n	f006 <trim_whitespace+0x66>
        str++;
    efac:	3401      	adds	r4, #1
    while (isspace((unsigned char)*str)) {
    efae:	7823      	ldrb	r3, [r4, #0]
	return __c < 0x20;
}

__extern_inline int isspace(int __c)
{
	return __c == ' ' || __c == '\n' || __c == '\t' || __c == '\r';
    efb0:	2b20      	cmp	r3, #32
    efb2:	d0fb      	beq.n	efac <trim_whitespace+0xc>
    efb4:	2b0a      	cmp	r3, #10
    efb6:	d0f9      	beq.n	efac <trim_whitespace+0xc>
    efb8:	2b09      	cmp	r3, #9
    efba:	d0f7      	beq.n	efac <trim_whitespace+0xc>
    efbc:	2b0d      	cmp	r3, #13
    efbe:	d0f5      	beq.n	efac <trim_whitespace+0xc>
    if (*str == 0) { /* All spaces? */
    efc0:	b12b      	cbz	r3, efce <trim_whitespace+0x2e>
    end = str + strlen(str) - 1;
    efc2:	4620      	mov	r0, r4
    efc4:	f7fe fd54 	bl	da70 <strlen>
    efc8:	1e43      	subs	r3, r0, #1
    efca:	4423      	add	r3, r4
    while (end > str && isspace((unsigned char)*end)) {
    efcc:	e003      	b.n	efd6 <trim_whitespace+0x36>
        *out = 0;
    efce:	702b      	strb	r3, [r5, #0]
        return 0;
    efd0:	461e      	mov	r6, r3
    efd2:	e018      	b.n	f006 <trim_whitespace+0x66>
        end--;
    efd4:	3b01      	subs	r3, #1
    while (end > str && isspace((unsigned char)*end)) {
    efd6:	429c      	cmp	r4, r3
    efd8:	d208      	bcs.n	efec <trim_whitespace+0x4c>
    efda:	781a      	ldrb	r2, [r3, #0]
    efdc:	2a20      	cmp	r2, #32
    efde:	d0f9      	beq.n	efd4 <trim_whitespace+0x34>
    efe0:	2a0a      	cmp	r2, #10
    efe2:	d0f7      	beq.n	efd4 <trim_whitespace+0x34>
    efe4:	2a09      	cmp	r2, #9
    efe6:	d0f5      	beq.n	efd4 <trim_whitespace+0x34>
    efe8:	2a0d      	cmp	r2, #13
    efea:	d0f3      	beq.n	efd4 <trim_whitespace+0x34>
    end++;
    efec:	3301      	adds	r3, #1
    out_size = min(end - str, len - 1);
    efee:	3e01      	subs	r6, #1
    eff0:	1b1b      	subs	r3, r3, r4
    eff2:	429e      	cmp	r6, r3
    eff4:	bf28      	it	cs
    eff6:	461e      	movcs	r6, r3
    memcpy(out, str, out_size);
    eff8:	4632      	mov	r2, r6
    effa:	4621      	mov	r1, r4
    effc:	4628      	mov	r0, r5
    effe:	f7fe fcf3 	bl	d9e8 <memcpy>
    out[out_size] = 0;
    f002:	2300      	movs	r3, #0
    f004:	55ab      	strb	r3, [r5, r6]
}
    f006:	4630      	mov	r0, r6
    f008:	bd70      	pop	{r4, r5, r6, pc}
	...

0000f00c <console_hist_move_to_head>:
{
    f00c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f010:	4605      	mov	r5, r0
    curr = sh->tail;
    f012:	4b1d      	ldr	r3, [pc, #116]	; (f088 <console_hist_move_to_head+0x7c>)
    f014:	785c      	ldrb	r4, [r3, #1]
    while (curr != sh->head) {
    f016:	e005      	b.n	f024 <console_hist_move_to_head+0x18>
        curr = ring_buf_next(curr, sh->size);
    f018:	4b1b      	ldr	r3, [pc, #108]	; (f088 <console_hist_move_to_head+0x7c>)
    f01a:	7899      	ldrb	r1, [r3, #2]
    f01c:	4620      	mov	r0, r4
    f01e:	f7ff ff79 	bl	ef14 <ring_buf_next>
    f022:	4604      	mov	r4, r0
    while (curr != sh->head) {
    f024:	4b18      	ldr	r3, [pc, #96]	; (f088 <console_hist_move_to_head+0x7c>)
    f026:	781e      	ldrb	r6, [r3, #0]
    f028:	42a6      	cmp	r6, r4
    f02a:	d00a      	beq.n	f042 <console_hist_move_to_head+0x36>
        if (strcmp(sh->lines[curr], line) == 0) {
    f02c:	4b16      	ldr	r3, [pc, #88]	; (f088 <console_hist_move_to_head+0x7c>)
    f02e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    f032:	685f      	ldr	r7, [r3, #4]
    f034:	4629      	mov	r1, r5
    f036:	4638      	mov	r0, r7
    f038:	f7fe fd0e 	bl	da58 <strcmp>
    f03c:	2800      	cmp	r0, #0
    f03e:	d1eb      	bne.n	f018 <console_hist_move_to_head+0xc>
    f040:	e000      	b.n	f044 <console_hist_move_to_head+0x38>
    char *match = NULL;
    f042:	2700      	movs	r7, #0
    if (!match) {
    f044:	b1f7      	cbz	r7, f084 <console_hist_move_to_head+0x78>
    curr = ring_buf_next(curr, sh->size);
    f046:	4b10      	ldr	r3, [pc, #64]	; (f088 <console_hist_move_to_head+0x7c>)
    f048:	f893 8002 	ldrb.w	r8, [r3, #2]
    f04c:	4641      	mov	r1, r8
    f04e:	4620      	mov	r0, r4
    f050:	f7ff ff60 	bl	ef14 <ring_buf_next>
    f054:	4605      	mov	r5, r0
    while (curr != sh->head) {
    f056:	e00c      	b.n	f072 <console_hist_move_to_head+0x66>
        sh->lines[prev] = sh->lines[curr];
    f058:	480b      	ldr	r0, [pc, #44]	; (f088 <console_hist_move_to_head+0x7c>)
    f05a:	eb00 0385 	add.w	r3, r0, r5, lsl #2
    f05e:	685b      	ldr	r3, [r3, #4]
    f060:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    f064:	6043      	str	r3, [r0, #4]
        curr = ring_buf_next(curr, sh->size);
    f066:	4641      	mov	r1, r8
    f068:	4628      	mov	r0, r5
    f06a:	f7ff ff53 	bl	ef14 <ring_buf_next>
        prev = curr;
    f06e:	462c      	mov	r4, r5
        curr = ring_buf_next(curr, sh->size);
    f070:	4605      	mov	r5, r0
    while (curr != sh->head) {
    f072:	42ae      	cmp	r6, r5
    f074:	d1f0      	bne.n	f058 <console_hist_move_to_head+0x4c>
    sh->lines[prev] = match;
    f076:	4804      	ldr	r0, [pc, #16]	; (f088 <console_hist_move_to_head+0x7c>)
    f078:	eb00 0484 	add.w	r4, r0, r4, lsl #2
    f07c:	6067      	str	r7, [r4, #4]
    return true;
    f07e:	2001      	movs	r0, #1
}
    f080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return false;
    f084:	2000      	movs	r0, #0
    f086:	e7fb      	b.n	f080 <console_hist_move_to_head+0x74>
    f088:	200038b4 	.word	0x200038b4

0000f08c <console_hist_add>:
{
    f08c:	b510      	push	{r4, lr}
    f08e:	b0c0      	sub	sp, #256	; 0x100
    sh->curr = sh->head;
    f090:	4b1d      	ldr	r3, [pc, #116]	; (f108 <console_hist_add+0x7c>)
    f092:	781a      	ldrb	r2, [r3, #0]
    f094:	70da      	strb	r2, [r3, #3]
    len = trim_whitespace(line, sizeof(buf), buf);
    f096:	466a      	mov	r2, sp
    f098:	f44f 7180 	mov.w	r1, #256	; 0x100
    f09c:	f7ff ff80 	bl	efa0 <trim_whitespace>
    if (!len) {
    f0a0:	b908      	cbnz	r0, f0a6 <console_hist_add+0x1a>
}
    f0a2:	b040      	add	sp, #256	; 0x100
    f0a4:	bd10      	pop	{r4, pc}
    if (console_hist_move_to_head(buf)) {
    f0a6:	4668      	mov	r0, sp
    f0a8:	f7ff ffb0 	bl	f00c <console_hist_move_to_head>
    f0ac:	2800      	cmp	r0, #0
    f0ae:	d1f8      	bne.n	f0a2 <console_hist_add+0x16>
    if (console_hist_is_full()) {
    f0b0:	f7ff ff3e 	bl	ef30 <console_hist_is_full>
    f0b4:	b198      	cbz	r0, f0de <console_hist_add+0x52>
        assert(sh->lines[sh->head] == NULL);
    f0b6:	4a14      	ldr	r2, [pc, #80]	; (f108 <console_hist_add+0x7c>)
    f0b8:	7813      	ldrb	r3, [r2, #0]
    f0ba:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    f0be:	6852      	ldr	r2, [r2, #4]
    f0c0:	b9e2      	cbnz	r2, f0fc <console_hist_add+0x70>
        sh->lines[sh->head] = sh->lines[sh->tail];
    f0c2:	4c11      	ldr	r4, [pc, #68]	; (f108 <console_hist_add+0x7c>)
    f0c4:	7860      	ldrb	r0, [r4, #1]
    f0c6:	eb04 0280 	add.w	r2, r4, r0, lsl #2
    f0ca:	6851      	ldr	r1, [r2, #4]
    f0cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    f0d0:	6059      	str	r1, [r3, #4]
        sh->lines[sh->tail] = NULL;
    f0d2:	2300      	movs	r3, #0
    f0d4:	6053      	str	r3, [r2, #4]
        sh->tail = ring_buf_next(sh->tail, sh->size);
    f0d6:	78a1      	ldrb	r1, [r4, #2]
    f0d8:	f7ff ff1c 	bl	ef14 <ring_buf_next>
    f0dc:	7060      	strb	r0, [r4, #1]
    strcpy(sh->lines[sh->head], buf);
    f0de:	4c0a      	ldr	r4, [pc, #40]	; (f108 <console_hist_add+0x7c>)
    f0e0:	7823      	ldrb	r3, [r4, #0]
    f0e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    f0e6:	4669      	mov	r1, sp
    f0e8:	6858      	ldr	r0, [r3, #4]
    f0ea:	f00d f98b 	bl	1c404 <strcpy>
    sh->head = ring_buf_next(sh->head, sh->size);
    f0ee:	78a1      	ldrb	r1, [r4, #2]
    f0f0:	7820      	ldrb	r0, [r4, #0]
    f0f2:	f7ff ff0f 	bl	ef14 <ring_buf_next>
    f0f6:	7020      	strb	r0, [r4, #0]
    sh->curr = sh->head;
    f0f8:	70e0      	strb	r0, [r4, #3]
    f0fa:	e7d2      	b.n	f0a2 <console_hist_add+0x16>
        assert(sh->lines[sh->head] == NULL);
    f0fc:	2300      	movs	r3, #0
    f0fe:	461a      	mov	r2, r3
    f100:	4619      	mov	r1, r3
    f102:	4618      	mov	r0, r3
    f104:	f7f9 ffa2 	bl	904c <__assert_func>
    f108:	200038b4 	.word	0x200038b4

0000f10c <console_hist_init>:
{
    f10c:	b510      	push	{r4, lr}
    memset(console_hist_lines, 0, sizeof(console_hist_lines));
    f10e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    f112:	2100      	movs	r1, #0
    f114:	480b      	ldr	r0, [pc, #44]	; (f144 <console_hist_init+0x38>)
    f116:	f7fe fc74 	bl	da02 <memset>
    memset(&console_hist, 0, sizeof(console_hist));
    f11a:	4c0b      	ldr	r4, [pc, #44]	; (f148 <console_hist_init+0x3c>)
    f11c:	2228      	movs	r2, #40	; 0x28
    f11e:	2100      	movs	r1, #0
    f120:	4620      	mov	r0, r4
    f122:	f7fe fc6e 	bl	da02 <memset>
    sh->size = MYNEWT_VAL(CONSOLE_HISTORY_SIZE) + 1;
    f126:	2309      	movs	r3, #9
    f128:	70a3      	strb	r3, [r4, #2]
    for (i = 0; i < sh->size - 1; i++) {
    f12a:	2300      	movs	r3, #0
    f12c:	e007      	b.n	f13e <console_hist_init+0x32>
        sh->lines[i] = console_hist_lines[i];
    f12e:	4905      	ldr	r1, [pc, #20]	; (f144 <console_hist_init+0x38>)
    f130:	eb01 2103 	add.w	r1, r1, r3, lsl #8
    f134:	4a04      	ldr	r2, [pc, #16]	; (f148 <console_hist_init+0x3c>)
    f136:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    f13a:	6051      	str	r1, [r2, #4]
    for (i = 0; i < sh->size - 1; i++) {
    f13c:	3301      	adds	r3, #1
    f13e:	2b07      	cmp	r3, #7
    f140:	ddf5      	ble.n	f12e <console_hist_init+0x22>
}
    f142:	bd10      	pop	{r4, pc}
    f144:	200038dc 	.word	0x200038dc
    f148:	200038b4 	.word	0x200038b4

0000f14c <console_echo>:
    echo = on;
    f14c:	4b01      	ldr	r3, [pc, #4]	; (f154 <console_echo+0x8>)
    f14e:	6018      	str	r0, [r3, #0]
}
    f150:	4770      	bx	lr
    f152:	bf00      	nop
    f154:	2000060c 	.word	0x2000060c

0000f158 <console_lock>:
{
    f158:	b508      	push	{r3, lr}
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
    f15a:	4b0a      	ldr	r3, [pc, #40]	; (f184 <console_lock+0x2c>)
    f15c:	685b      	ldr	r3, [r3, #4]
    f15e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) {
    f162:	b133      	cbz	r3, f172 <console_lock+0x1a>
 *
 * @return number of times lock was called from current task
 */
static inline uint16_t os_mutex_get_level(struct os_mutex *mu)
{
    return mu->mu_level;
    f164:	4b08      	ldr	r3, [pc, #32]	; (f188 <console_lock+0x30>)
    f166:	88db      	ldrh	r3, [r3, #6]
        if (os_mutex_get_level(&console_write_lock)) {
    f168:	b90b      	cbnz	r3, f16e <console_lock+0x16>
    int rc = OS_OK;
    f16a:	2000      	movs	r0, #0
    f16c:	e007      	b.n	f17e <console_lock+0x26>
            rc = OS_EBUSY;
    f16e:	200b      	movs	r0, #11
        goto end;
    f170:	e005      	b.n	f17e <console_lock+0x26>
    rc = os_mutex_pend(&console_write_lock, timeout);
    f172:	4601      	mov	r1, r0
    f174:	4804      	ldr	r0, [pc, #16]	; (f188 <console_lock+0x30>)
    f176:	f7fb fcdb 	bl	ab30 <os_mutex_pend>
    if (rc == OS_NOT_STARTED) {
    f17a:	2809      	cmp	r0, #9
    f17c:	d000      	beq.n	f180 <console_lock+0x28>
}
    f17e:	bd08      	pop	{r3, pc}
        rc = OS_OK;
    f180:	2000      	movs	r0, #0
    return rc;
    f182:	e7fc      	b.n	f17e <console_lock+0x26>
    f184:	e000ed00 	.word	0xe000ed00
    f188:	200040e0 	.word	0x200040e0

0000f18c <console_unlock>:
{
    f18c:	b508      	push	{r3, lr}
    f18e:	4b0a      	ldr	r3, [pc, #40]	; (f1b8 <console_unlock+0x2c>)
    f190:	685b      	ldr	r3, [r3, #4]
    f192:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) {
    f196:	b10b      	cbz	r3, f19c <console_unlock+0x10>
    int rc = OS_OK;
    f198:	2000      	movs	r0, #0
}
    f19a:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&console_write_lock);
    f19c:	4807      	ldr	r0, [pc, #28]	; (f1bc <console_unlock+0x30>)
    f19e:	f7fb fc6b 	bl	aa78 <os_mutex_release>
    assert(rc == OS_OK || rc == OS_NOT_STARTED);
    f1a2:	2800      	cmp	r0, #0
    f1a4:	d0f9      	beq.n	f19a <console_unlock+0xe>
    f1a6:	2809      	cmp	r0, #9
    f1a8:	d0f7      	beq.n	f19a <console_unlock+0xe>
    f1aa:	2300      	movs	r3, #0
    f1ac:	461a      	mov	r2, r3
    f1ae:	4619      	mov	r1, r3
    f1b0:	4618      	mov	r0, r3
    f1b2:	f7f9 ff4b 	bl	904c <__assert_func>
    f1b6:	bf00      	nop
    f1b8:	e000ed00 	.word	0xe000ed00
    f1bc:	200040e0 	.word	0x200040e0

0000f1c0 <console_out>:
{
    f1c0:	b510      	push	{r4, lr}
    f1c2:	4604      	mov	r4, r0
    if (console_lock(timeout) != OS_OK) {
    f1c4:	2080      	movs	r0, #128	; 0x80
    f1c6:	f7ff ffc7 	bl	f158 <console_lock>
    f1ca:	b108      	cbz	r0, f1d0 <console_out+0x10>
}
    f1cc:	4620      	mov	r0, r4
    f1ce:	bd10      	pop	{r4, pc}
    rc = console_out_nolock(c);
    f1d0:	4620      	mov	r0, r4
    f1d2:	f000 fc59 	bl	fa88 <console_out_nolock>
    f1d6:	4604      	mov	r4, r0
    (void)console_unlock();
    f1d8:	f7ff ffd8 	bl	f18c <console_unlock>
    return rc;
    f1dc:	e7f6      	b.n	f1cc <console_out+0xc>
	...

0000f1e0 <console_append_char>:

static int
console_append_char(char *line, uint8_t byte)
{
    f1e0:	b508      	push	{r3, lr}
    if (cur + end >= MYNEWT_VAL(CONSOLE_MAX_INPUT_LEN) - 1) {
    f1e2:	4b0d      	ldr	r3, [pc, #52]	; (f218 <console_append_char+0x38>)
    f1e4:	881b      	ldrh	r3, [r3, #0]
    f1e6:	4a0d      	ldr	r2, [pc, #52]	; (f21c <console_append_char+0x3c>)
    f1e8:	8812      	ldrh	r2, [r2, #0]
    f1ea:	4413      	add	r3, r2
    f1ec:	2bfe      	cmp	r3, #254	; 0xfe
    f1ee:	dc0e      	bgt.n	f20e <console_append_char+0x2e>
        return 0;
    }

    line[cur + end] = byte;
    f1f0:	54c1      	strb	r1, [r0, r3]

    if (byte == '\0') {
    f1f2:	b171      	cbz	r1, f212 <console_append_char+0x32>
        return 1;
    }

    if (echo) {
    f1f4:	4b0a      	ldr	r3, [pc, #40]	; (f220 <console_append_char+0x40>)
    f1f6:	681b      	ldr	r3, [r3, #0]
    f1f8:	b92b      	cbnz	r3, f206 <console_append_char+0x26>
        /* Echo back to console */
        console_out(byte);
    }
    ++cur;
    f1fa:	4a07      	ldr	r2, [pc, #28]	; (f218 <console_append_char+0x38>)
    f1fc:	8813      	ldrh	r3, [r2, #0]
    f1fe:	3301      	adds	r3, #1
    f200:	8013      	strh	r3, [r2, #0]
    return 1;
    f202:	2001      	movs	r0, #1
}
    f204:	bd08      	pop	{r3, pc}
        console_out(byte);
    f206:	4608      	mov	r0, r1
    f208:	f7ff ffda 	bl	f1c0 <console_out>
    f20c:	e7f5      	b.n	f1fa <console_append_char+0x1a>
        return 0;
    f20e:	2000      	movs	r0, #0
    f210:	e7f8      	b.n	f204 <console_append_char+0x24>
        return 1;
    f212:	2001      	movs	r0, #1
    f214:	e7f6      	b.n	f204 <console_append_char+0x24>
    f216:	bf00      	nop
    f218:	200040ec 	.word	0x200040ec
    f21c:	200040ee 	.word	0x200040ee
    f220:	2000060c 	.word	0x2000060c

0000f224 <console_clear_line>:
{
    f224:	b508      	push	{r3, lr}
    if (cur) {
    f226:	4b0b      	ldr	r3, [pc, #44]	; (f254 <console_clear_line+0x30>)
    f228:	8819      	ldrh	r1, [r3, #0]
    f22a:	b971      	cbnz	r1, f24a <console_clear_line+0x26>
    cur = 0;
    f22c:	2300      	movs	r3, #0
    f22e:	4a09      	ldr	r2, [pc, #36]	; (f254 <console_clear_line+0x30>)
    f230:	8013      	strh	r3, [r2, #0]
    end = 0;
    f232:	4a09      	ldr	r2, [pc, #36]	; (f258 <console_clear_line+0x34>)
    f234:	8013      	strh	r3, [r2, #0]
    console_out(ESC);
    f236:	201b      	movs	r0, #27
    f238:	f7ff ffc2 	bl	f1c0 <console_out>
    console_out('[');
    f23c:	205b      	movs	r0, #91	; 0x5b
    f23e:	f7ff ffbf 	bl	f1c0 <console_out>
    console_out('K');
    f242:	204b      	movs	r0, #75	; 0x4b
    f244:	f7ff ffbc 	bl	f1c0 <console_out>
}
    f248:	bd08      	pop	{r3, pc}
    console_printf("\x1b[%uD", count);
    f24a:	4804      	ldr	r0, [pc, #16]	; (f25c <console_clear_line+0x38>)
    f24c:	f000 fba2 	bl	f994 <console_printf>
}
    f250:	e7ec      	b.n	f22c <console_clear_line+0x8>
    f252:	bf00      	nop
    f254:	200040ec 	.word	0x200040ec
    f258:	200040ee 	.word	0x200040ee
    f25c:	000232e8 	.word	0x000232e8

0000f260 <insert_char>:
{
    f260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (cur + end >= MYNEWT_VAL(CONSOLE_MAX_INPUT_LEN) - 1) {
    f262:	4b1d      	ldr	r3, [pc, #116]	; (f2d8 <insert_char+0x78>)
    f264:	881b      	ldrh	r3, [r3, #0]
    f266:	4413      	add	r3, r2
    f268:	2bfe      	cmp	r3, #254	; 0xfe
    f26a:	dc0b      	bgt.n	f284 <insert_char+0x24>
    f26c:	4604      	mov	r4, r0
    f26e:	460e      	mov	r6, r1
    f270:	4615      	mov	r5, r2
    if (echo) {
    f272:	4b1a      	ldr	r3, [pc, #104]	; (f2dc <insert_char+0x7c>)
    f274:	681b      	ldr	r3, [r3, #0]
    f276:	b933      	cbnz	r3, f286 <insert_char+0x26>
    ++cur;
    f278:	4a17      	ldr	r2, [pc, #92]	; (f2d8 <insert_char+0x78>)
    f27a:	8813      	ldrh	r3, [r2, #0]
    f27c:	3301      	adds	r3, #1
    f27e:	8013      	strh	r3, [r2, #0]
    if (end == 0) {
    f280:	b92d      	cbnz	r5, f28e <insert_char+0x2e>
        *pos = c;
    f282:	7026      	strb	r6, [r4, #0]
}
    f284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        console_out(c);
    f286:	4608      	mov	r0, r1
    f288:	f7ff ff9a 	bl	f1c0 <console_out>
    f28c:	e7f4      	b.n	f278 <insert_char+0x18>
    tmp = *pos;
    f28e:	7827      	ldrb	r7, [r4, #0]
    *(pos++) = c;
    f290:	f804 6b01 	strb.w	r6, [r4], #1
    console_out(ESC);
    f294:	201b      	movs	r0, #27
    f296:	f7ff ff93 	bl	f1c0 <console_out>
    console_out('[');
    f29a:	205b      	movs	r0, #91	; 0x5b
    f29c:	f7ff ff90 	bl	f1c0 <console_out>
    console_out('s');
    f2a0:	2073      	movs	r0, #115	; 0x73
    f2a2:	f7ff ff8d 	bl	f1c0 <console_out>
}
    f2a6:	e009      	b.n	f2bc <insert_char+0x5c>
        console_out(tmp);
    f2a8:	4638      	mov	r0, r7
    f2aa:	f7ff ff89 	bl	f1c0 <console_out>
        c = *pos;
    f2ae:	7823      	ldrb	r3, [r4, #0]
        *(pos++) = tmp;
    f2b0:	4620      	mov	r0, r4
    f2b2:	f800 7b01 	strb.w	r7, [r0], #1
        tmp = c;
    f2b6:	461f      	mov	r7, r3
    while (end-- > 0) {
    f2b8:	4635      	mov	r5, r6
        *(pos++) = tmp;
    f2ba:	4604      	mov	r4, r0
    while (end-- > 0) {
    f2bc:	1e6b      	subs	r3, r5, #1
    f2be:	b29e      	uxth	r6, r3
    f2c0:	2d00      	cmp	r5, #0
    f2c2:	d1f1      	bne.n	f2a8 <insert_char+0x48>
    console_out(ESC);
    f2c4:	201b      	movs	r0, #27
    f2c6:	f7ff ff7b 	bl	f1c0 <console_out>
    console_out('[');
    f2ca:	205b      	movs	r0, #91	; 0x5b
    f2cc:	f7ff ff78 	bl	f1c0 <console_out>
    console_out('u');
    f2d0:	2075      	movs	r0, #117	; 0x75
    f2d2:	f7ff ff75 	bl	f1c0 <console_out>
}
    f2d6:	e7d5      	b.n	f284 <insert_char+0x24>
    f2d8:	200040ec 	.word	0x200040ec
    f2dc:	2000060c 	.word	0x2000060c

0000f2e0 <console_hist_move>:
{
    f2e0:	b538      	push	{r3, r4, r5, lr}
    f2e2:	4605      	mov	r5, r0
    uint8_t limit = direction ==  ANSI_UP ? sh->tail : sh->head;
    f2e4:	2941      	cmp	r1, #65	; 0x41
    f2e6:	d014      	beq.n	f312 <console_hist_move+0x32>
    f2e8:	4b15      	ldr	r3, [pc, #84]	; (f340 <console_hist_move+0x60>)
    f2ea:	781b      	ldrb	r3, [r3, #0]
    if (sh->curr == limit) {
    f2ec:	4a14      	ldr	r2, [pc, #80]	; (f340 <console_hist_move+0x60>)
    f2ee:	78d0      	ldrb	r0, [r2, #3]
    f2f0:	4298      	cmp	r0, r3
    f2f2:	d023      	beq.n	f33c <console_hist_move+0x5c>
    if (direction == ANSI_UP) {
    f2f4:	2941      	cmp	r1, #65	; 0x41
    f2f6:	d00f      	beq.n	f318 <console_hist_move+0x38>
        sh->curr = ring_buf_next(sh->curr, sh->size);
    f2f8:	4c11      	ldr	r4, [pc, #68]	; (f340 <console_hist_move+0x60>)
    f2fa:	78a1      	ldrb	r1, [r4, #2]
    f2fc:	f7ff fe0a 	bl	ef14 <ring_buf_next>
    f300:	70e0      	strb	r0, [r4, #3]
    console_clear_line();
    f302:	f7ff ff8f 	bl	f224 <console_clear_line>
    str = sh->lines[sh->curr];
    f306:	4b0e      	ldr	r3, [pc, #56]	; (f340 <console_hist_move+0x60>)
    f308:	78da      	ldrb	r2, [r3, #3]
    f30a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    f30e:	685c      	ldr	r4, [r3, #4]
    while (str && *str != '\0') {
    f310:	e010      	b.n	f334 <console_hist_move+0x54>
    uint8_t limit = direction ==  ANSI_UP ? sh->tail : sh->head;
    f312:	4b0b      	ldr	r3, [pc, #44]	; (f340 <console_hist_move+0x60>)
    f314:	785b      	ldrb	r3, [r3, #1]
    f316:	e7e9      	b.n	f2ec <console_hist_move+0xc>
        sh->curr = ring_buf_prev(sh->curr, sh->size);
    f318:	4614      	mov	r4, r2
    f31a:	7891      	ldrb	r1, [r2, #2]
    f31c:	f7ff fe01 	bl	ef22 <ring_buf_prev>
    f320:	70e0      	strb	r0, [r4, #3]
    f322:	e7ee      	b.n	f302 <console_hist_move+0x22>
        insert_char(&line[cur], *str, end);
    f324:	4b07      	ldr	r3, [pc, #28]	; (f344 <console_hist_move+0x64>)
    f326:	8818      	ldrh	r0, [r3, #0]
    f328:	4b07      	ldr	r3, [pc, #28]	; (f348 <console_hist_move+0x68>)
    f32a:	881a      	ldrh	r2, [r3, #0]
    f32c:	4428      	add	r0, r5
    f32e:	f7ff ff97 	bl	f260 <insert_char>
        ++str;
    f332:	3401      	adds	r4, #1
    while (str && *str != '\0') {
    f334:	b114      	cbz	r4, f33c <console_hist_move+0x5c>
    f336:	7821      	ldrb	r1, [r4, #0]
    f338:	2900      	cmp	r1, #0
    f33a:	d1f3      	bne.n	f324 <console_hist_move+0x44>
}
    f33c:	bd38      	pop	{r3, r4, r5, pc}
    f33e:	bf00      	nop
    f340:	200038b4 	.word	0x200038b4
    f344:	200040ec 	.word	0x200040ec
    f348:	200040ee 	.word	0x200040ee

0000f34c <del_char>:
{
    f34c:	b570      	push	{r4, r5, r6, lr}
    f34e:	4606      	mov	r6, r0
    f350:	460d      	mov	r5, r1
    console_out('\b');
    f352:	2008      	movs	r0, #8
    f354:	f7ff ff34 	bl	f1c0 <console_out>
    if (end == 0) {
    f358:	b14d      	cbz	r5, f36e <del_char+0x22>
    console_out(ESC);
    f35a:	201b      	movs	r0, #27
    f35c:	f7ff ff30 	bl	f1c0 <console_out>
    console_out('[');
    f360:	205b      	movs	r0, #91	; 0x5b
    f362:	f7ff ff2d 	bl	f1c0 <console_out>
    console_out('s');
    f366:	2073      	movs	r0, #115	; 0x73
    f368:	f7ff ff2a 	bl	f1c0 <console_out>
}
    f36c:	e00c      	b.n	f388 <del_char+0x3c>
        console_out(' ');
    f36e:	2020      	movs	r0, #32
    f370:	f7ff ff26 	bl	f1c0 <console_out>
        console_out('\b');
    f374:	2008      	movs	r0, #8
    f376:	f7ff ff23 	bl	f1c0 <console_out>
        return;
    f37a:	e015      	b.n	f3a8 <del_char+0x5c>
        *pos = *(pos + 1);
    f37c:	7870      	ldrb	r0, [r6, #1]
    f37e:	f806 0b01 	strb.w	r0, [r6], #1
        console_out(*(pos++));
    f382:	f7ff ff1d 	bl	f1c0 <console_out>
    while (end-- > 0) {
    f386:	4625      	mov	r5, r4
    f388:	1e6b      	subs	r3, r5, #1
    f38a:	b29c      	uxth	r4, r3
    f38c:	2d00      	cmp	r5, #0
    f38e:	d1f5      	bne.n	f37c <del_char+0x30>
    console_out(' ');
    f390:	2020      	movs	r0, #32
    f392:	f7ff ff15 	bl	f1c0 <console_out>
    console_out(ESC);
    f396:	201b      	movs	r0, #27
    f398:	f7ff ff12 	bl	f1c0 <console_out>
    console_out('[');
    f39c:	205b      	movs	r0, #91	; 0x5b
    f39e:	f7ff ff0f 	bl	f1c0 <console_out>
    console_out('u');
    f3a2:	2075      	movs	r0, #117	; 0x75
    f3a4:	f7ff ff0c 	bl	f1c0 <console_out>
}
    f3a8:	bd70      	pop	{r4, r5, r6, pc}
	...

0000f3ac <handle_ansi>:
{
    f3ac:	b510      	push	{r4, lr}
    f3ae:	460c      	mov	r4, r1
    if (esc_state & ESC_ANSI_FIRST) {
    f3b0:	4b5d      	ldr	r3, [pc, #372]	; (f528 <handle_ansi+0x17c>)
    f3b2:	681b      	ldr	r3, [r3, #0]
    f3b4:	f013 0f04 	tst.w	r3, #4
    f3b8:	d023      	beq.n	f402 <handle_ansi+0x56>
        esc_state &= ~ESC_ANSI_FIRST;
    f3ba:	f023 0304 	bic.w	r3, r3, #4
    f3be:	4a5a      	ldr	r2, [pc, #360]	; (f528 <handle_ansi+0x17c>)
    f3c0:	6013      	str	r3, [r2, #0]
        if (!isdigit(byte)) {
    f3c2:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    f3c6:	2a09      	cmp	r2, #9
    f3c8:	d910      	bls.n	f3ec <handle_ansi+0x40>
            ansi_val = 1;
    f3ca:	4b58      	ldr	r3, [pc, #352]	; (f52c <handle_ansi+0x180>)
    f3cc:	2201      	movs	r2, #1
    f3ce:	601a      	str	r2, [r3, #0]
    switch (byte) {
    f3d0:	2848      	cmp	r0, #72	; 0x48
    f3d2:	d846      	bhi.n	f462 <handle_ansi+0xb6>
    f3d4:	2841      	cmp	r0, #65	; 0x41
    f3d6:	d35c      	bcc.n	f492 <handle_ansi+0xe6>
    f3d8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
    f3dc:	2b07      	cmp	r3, #7
    f3de:	d858      	bhi.n	f492 <handle_ansi+0xe6>
    f3e0:	e8df f003 	tbb	[pc, r3]
    f3e4:	5d6f5353 	.word	0x5d6f5353
    f3e8:	81579157 	.word	0x81579157
        esc_state |= ESC_ANSI_VAL;
    f3ec:	f043 0308 	orr.w	r3, r3, #8
    f3f0:	4a4d      	ldr	r2, [pc, #308]	; (f528 <handle_ansi+0x17c>)
    f3f2:	6013      	str	r3, [r2, #0]
        ansi_val = byte - '0';
    f3f4:	3830      	subs	r0, #48	; 0x30
    f3f6:	4b4d      	ldr	r3, [pc, #308]	; (f52c <handle_ansi+0x180>)
    f3f8:	6018      	str	r0, [r3, #0]
        ansi_val_2 = 0;
    f3fa:	4b4d      	ldr	r3, [pc, #308]	; (f530 <handle_ansi+0x184>)
    f3fc:	2200      	movs	r2, #0
    f3fe:	601a      	str	r2, [r3, #0]
        return;
    f400:	e04c      	b.n	f49c <handle_ansi+0xf0>
    if (esc_state & ESC_ANSI_VAL) {
    f402:	f013 0f08 	tst.w	r3, #8
    f406:	d0e3      	beq.n	f3d0 <handle_ansi+0x24>
        if (isdigit(byte)) {
    f408:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    f40c:	2a09      	cmp	r2, #9
    f40e:	d909      	bls.n	f424 <handle_ansi+0x78>
        if (byte == ';' && !(esc_state & ESC_ANSI_VAL_2)) {
    f410:	283b      	cmp	r0, #59	; 0x3b
    f412:	d01e      	beq.n	f452 <handle_ansi+0xa6>
        esc_state &= ~ESC_ANSI_VAL;
    f414:	f023 0108 	bic.w	r1, r3, #8
    f418:	4a43      	ldr	r2, [pc, #268]	; (f528 <handle_ansi+0x17c>)
    f41a:	6011      	str	r1, [r2, #0]
        esc_state &= ~ESC_ANSI_VAL_2;
    f41c:	f023 0318 	bic.w	r3, r3, #24
    f420:	6013      	str	r3, [r2, #0]
    f422:	e7d5      	b.n	f3d0 <handle_ansi+0x24>
            if (esc_state & ESC_ANSI_VAL_2) {
    f424:	f013 0f10 	tst.w	r3, #16
    f428:	d009      	beq.n	f43e <handle_ansi+0x92>
                ansi_val_2 *= 10;
    f42a:	4a41      	ldr	r2, [pc, #260]	; (f530 <handle_ansi+0x184>)
    f42c:	6813      	ldr	r3, [r2, #0]
    f42e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    f432:	005b      	lsls	r3, r3, #1
    f434:	6013      	str	r3, [r2, #0]
                ansi_val_2 += byte - '0';
    f436:	4403      	add	r3, r0
    f438:	3b30      	subs	r3, #48	; 0x30
    f43a:	6013      	str	r3, [r2, #0]
    f43c:	e02e      	b.n	f49c <handle_ansi+0xf0>
                ansi_val *= 10;
    f43e:	4a3b      	ldr	r2, [pc, #236]	; (f52c <handle_ansi+0x180>)
    f440:	6813      	ldr	r3, [r2, #0]
    f442:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    f446:	005b      	lsls	r3, r3, #1
    f448:	6013      	str	r3, [r2, #0]
                ansi_val += byte - '0';
    f44a:	4403      	add	r3, r0
    f44c:	3b30      	subs	r3, #48	; 0x30
    f44e:	6013      	str	r3, [r2, #0]
            return;
    f450:	e024      	b.n	f49c <handle_ansi+0xf0>
        if (byte == ';' && !(esc_state & ESC_ANSI_VAL_2)) {
    f452:	f013 0f10 	tst.w	r3, #16
    f456:	d1dd      	bne.n	f414 <handle_ansi+0x68>
            esc_state |= ESC_ANSI_VAL_2;
    f458:	f043 0310 	orr.w	r3, r3, #16
    f45c:	4a32      	ldr	r2, [pc, #200]	; (f528 <handle_ansi+0x17c>)
    f45e:	6013      	str	r3, [r2, #0]
            return;
    f460:	e01c      	b.n	f49c <handle_ansi+0xf0>
    switch (byte) {
    f462:	287e      	cmp	r0, #126	; 0x7e
    f464:	d115      	bne.n	f492 <handle_ansi+0xe6>
        if (!end) {
    f466:	4b33      	ldr	r3, [pc, #204]	; (f534 <handle_ansi+0x188>)
    f468:	881b      	ldrh	r3, [r3, #0]
    f46a:	b193      	cbz	r3, f492 <handle_ansi+0xe6>
    console_printf("\x1b[%uC", count);
    f46c:	2101      	movs	r1, #1
    f46e:	4832      	ldr	r0, [pc, #200]	; (f538 <handle_ansi+0x18c>)
    f470:	f000 fa90 	bl	f994 <console_printf>
        del_char(&line[cur], --end);
    f474:	4b31      	ldr	r3, [pc, #196]	; (f53c <handle_ansi+0x190>)
    f476:	8818      	ldrh	r0, [r3, #0]
    f478:	4b2e      	ldr	r3, [pc, #184]	; (f534 <handle_ansi+0x188>)
    f47a:	8819      	ldrh	r1, [r3, #0]
    f47c:	3901      	subs	r1, #1
    f47e:	b289      	uxth	r1, r1
    f480:	8019      	strh	r1, [r3, #0]
    f482:	4420      	add	r0, r4
    f484:	f7ff ff62 	bl	f34c <del_char>
        break;
    f488:	e003      	b.n	f492 <handle_ansi+0xe6>
        console_hist_move(line, byte);
    f48a:	4601      	mov	r1, r0
    f48c:	4620      	mov	r0, r4
    f48e:	f7ff ff27 	bl	f2e0 <console_hist_move>
    esc_state &= ~ESC_ANSI;
    f492:	4a25      	ldr	r2, [pc, #148]	; (f528 <handle_ansi+0x17c>)
    f494:	6813      	ldr	r3, [r2, #0]
    f496:	f023 0302 	bic.w	r3, r3, #2
    f49a:	6013      	str	r3, [r2, #0]
}
    f49c:	bd10      	pop	{r4, pc}
        if (ansi_val > cur) {
    f49e:	4b27      	ldr	r3, [pc, #156]	; (f53c <handle_ansi+0x190>)
    f4a0:	881b      	ldrh	r3, [r3, #0]
    f4a2:	4a22      	ldr	r2, [pc, #136]	; (f52c <handle_ansi+0x180>)
    f4a4:	6811      	ldr	r1, [r2, #0]
    f4a6:	428b      	cmp	r3, r1
    f4a8:	d3f3      	bcc.n	f492 <handle_ansi+0xe6>
        end += ansi_val;
    f4aa:	b288      	uxth	r0, r1
    f4ac:	4c21      	ldr	r4, [pc, #132]	; (f534 <handle_ansi+0x188>)
    f4ae:	8822      	ldrh	r2, [r4, #0]
    f4b0:	4402      	add	r2, r0
    f4b2:	8022      	strh	r2, [r4, #0]
        cur -= ansi_val;
    f4b4:	1a1b      	subs	r3, r3, r0
    f4b6:	4a21      	ldr	r2, [pc, #132]	; (f53c <handle_ansi+0x190>)
    f4b8:	8013      	strh	r3, [r2, #0]
    console_printf("\x1b[%uD", count);
    f4ba:	4821      	ldr	r0, [pc, #132]	; (f540 <handle_ansi+0x194>)
    f4bc:	f000 fa6a 	bl	f994 <console_printf>
}
    f4c0:	e7e7      	b.n	f492 <handle_ansi+0xe6>
        if (ansi_val > end) {
    f4c2:	4b1c      	ldr	r3, [pc, #112]	; (f534 <handle_ansi+0x188>)
    f4c4:	881b      	ldrh	r3, [r3, #0]
    f4c6:	4a19      	ldr	r2, [pc, #100]	; (f52c <handle_ansi+0x180>)
    f4c8:	6811      	ldr	r1, [r2, #0]
    f4ca:	428b      	cmp	r3, r1
    f4cc:	d3e1      	bcc.n	f492 <handle_ansi+0xe6>
        end -= ansi_val;
    f4ce:	b28a      	uxth	r2, r1
    f4d0:	1a9b      	subs	r3, r3, r2
    f4d2:	4818      	ldr	r0, [pc, #96]	; (f534 <handle_ansi+0x188>)
    f4d4:	8003      	strh	r3, [r0, #0]
        cur += ansi_val;
    f4d6:	4b19      	ldr	r3, [pc, #100]	; (f53c <handle_ansi+0x190>)
    f4d8:	8818      	ldrh	r0, [r3, #0]
    f4da:	4402      	add	r2, r0
    f4dc:	801a      	strh	r2, [r3, #0]
    console_printf("\x1b[%uC", count);
    f4de:	4816      	ldr	r0, [pc, #88]	; (f538 <handle_ansi+0x18c>)
    f4e0:	f000 fa58 	bl	f994 <console_printf>
}
    f4e4:	e7d5      	b.n	f492 <handle_ansi+0xe6>
        if (!cur) {
    f4e6:	4b15      	ldr	r3, [pc, #84]	; (f53c <handle_ansi+0x190>)
    f4e8:	8819      	ldrh	r1, [r3, #0]
    f4ea:	2900      	cmp	r1, #0
    f4ec:	d0d1      	beq.n	f492 <handle_ansi+0xe6>
    console_printf("\x1b[%uD", count);
    f4ee:	4814      	ldr	r0, [pc, #80]	; (f540 <handle_ansi+0x194>)
    f4f0:	f000 fa50 	bl	f994 <console_printf>
        end += cur;
    f4f4:	490f      	ldr	r1, [pc, #60]	; (f534 <handle_ansi+0x188>)
    f4f6:	4a11      	ldr	r2, [pc, #68]	; (f53c <handle_ansi+0x190>)
    f4f8:	880b      	ldrh	r3, [r1, #0]
    f4fa:	8810      	ldrh	r0, [r2, #0]
    f4fc:	4403      	add	r3, r0
    f4fe:	800b      	strh	r3, [r1, #0]
        cur = 0;
    f500:	2300      	movs	r3, #0
    f502:	8013      	strh	r3, [r2, #0]
        break;
    f504:	e7c5      	b.n	f492 <handle_ansi+0xe6>
        if (!end) {
    f506:	4b0b      	ldr	r3, [pc, #44]	; (f534 <handle_ansi+0x188>)
    f508:	8819      	ldrh	r1, [r3, #0]
    f50a:	2900      	cmp	r1, #0
    f50c:	d0c1      	beq.n	f492 <handle_ansi+0xe6>
    console_printf("\x1b[%uC", count);
    f50e:	480a      	ldr	r0, [pc, #40]	; (f538 <handle_ansi+0x18c>)
    f510:	f000 fa40 	bl	f994 <console_printf>
        cur += end;
    f514:	4909      	ldr	r1, [pc, #36]	; (f53c <handle_ansi+0x190>)
    f516:	4a07      	ldr	r2, [pc, #28]	; (f534 <handle_ansi+0x188>)
    f518:	880b      	ldrh	r3, [r1, #0]
    f51a:	8810      	ldrh	r0, [r2, #0]
    f51c:	4403      	add	r3, r0
    f51e:	800b      	strh	r3, [r1, #0]
        end = 0;
    f520:	2300      	movs	r3, #0
    f522:	8013      	strh	r3, [r2, #0]
        break;
    f524:	e7b5      	b.n	f492 <handle_ansi+0xe6>
    f526:	bf00      	nop
    f528:	200040f0 	.word	0x200040f0
    f52c:	20003894 	.word	0x20003894
    f530:	20003898 	.word	0x20003898
    f534:	200040ee 	.word	0x200040ee
    f538:	000232f0 	.word	0x000232f0
    f53c:	200040ec 	.word	0x200040ec
    f540:	000232e8 	.word	0x000232e8

0000f544 <console_write>:
{
    f544:	b570      	push	{r4, r5, r6, lr}
    f546:	4606      	mov	r6, r0
    f548:	460d      	mov	r5, r1
    if (console_lock(timeout) != OS_OK) {
    f54a:	2080      	movs	r0, #128	; 0x80
    f54c:	f7ff fe04 	bl	f158 <console_lock>
    f550:	bb88      	cbnz	r0, f5b6 <console_write+0x72>
    f552:	4604      	mov	r4, r0
    if (cnt >= 2 && str[0] == CONSOLE_NLIP_DATA_START1 &&
    f554:	2d01      	cmp	r5, #1
    f556:	dd02      	ble.n	f55e <console_write+0x1a>
    f558:	7833      	ldrb	r3, [r6, #0]
    f55a:	2b04      	cmp	r3, #4
    f55c:	d014      	beq.n	f588 <console_write+0x44>
    if (cnt >= 3 && str[1] == CONSOLE_NLIP_PKT_START1 &&
    f55e:	2d02      	cmp	r5, #2
    f560:	dd02      	ble.n	f568 <console_write+0x24>
    f562:	7873      	ldrb	r3, [r6, #1]
    f564:	2b06      	cmp	r3, #6
    f566:	d016      	beq.n	f596 <console_write+0x52>
    if (!g_is_output_nlip && g_console_silence_non_nlip) {
    f568:	4b15      	ldr	r3, [pc, #84]	; (f5c0 <console_write+0x7c>)
    f56a:	781b      	ldrb	r3, [r3, #0]
    f56c:	b913      	cbnz	r3, f574 <console_write+0x30>
    f56e:	4b15      	ldr	r3, [pc, #84]	; (f5c4 <console_write+0x80>)
    f570:	781b      	ldrb	r3, [r3, #0]
    f572:	b9bb      	cbnz	r3, f5a4 <console_write+0x60>
    for (i = 0; i < cnt; i++) {
    f574:	42ac      	cmp	r4, r5
    f576:	da15      	bge.n	f5a4 <console_write+0x60>
        if (console_out_nolock((int)str[i]) == EOF) {
    f578:	5d30      	ldrb	r0, [r6, r4]
    f57a:	f000 fa85 	bl	fa88 <console_out_nolock>
    f57e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    f582:	d00f      	beq.n	f5a4 <console_write+0x60>
    for (i = 0; i < cnt; i++) {
    f584:	3401      	adds	r4, #1
    f586:	e7f5      	b.n	f574 <console_write+0x30>
        str[1] == CONSOLE_NLIP_DATA_START2) {
    f588:	7873      	ldrb	r3, [r6, #1]
    if (cnt >= 2 && str[0] == CONSOLE_NLIP_DATA_START1 &&
    f58a:	2b14      	cmp	r3, #20
    f58c:	d1e7      	bne.n	f55e <console_write+0x1a>
        g_is_output_nlip = 1;
    f58e:	4b0c      	ldr	r3, [pc, #48]	; (f5c0 <console_write+0x7c>)
    f590:	2201      	movs	r2, #1
    f592:	701a      	strb	r2, [r3, #0]
    f594:	e7e3      	b.n	f55e <console_write+0x1a>
        str[2] == CONSOLE_NLIP_PKT_START2) {
    f596:	78b3      	ldrb	r3, [r6, #2]
    if (cnt >= 3 && str[1] == CONSOLE_NLIP_PKT_START1 &&
    f598:	2b09      	cmp	r3, #9
    f59a:	d1e5      	bne.n	f568 <console_write+0x24>
        g_is_output_nlip = 1;
    f59c:	4b08      	ldr	r3, [pc, #32]	; (f5c0 <console_write+0x7c>)
    f59e:	2201      	movs	r2, #1
    f5a0:	701a      	strb	r2, [r3, #0]
    f5a2:	e7e1      	b.n	f568 <console_write+0x24>
    if (cnt > 0 && str[cnt - 1] == '\n') {
    f5a4:	2d00      	cmp	r5, #0
    f5a6:	dd04      	ble.n	f5b2 <console_write+0x6e>
    f5a8:	4435      	add	r5, r6
    f5aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    f5ae:	2b0a      	cmp	r3, #10
    f5b0:	d002      	beq.n	f5b8 <console_write+0x74>
    (void)console_unlock();
    f5b2:	f7ff fdeb 	bl	f18c <console_unlock>
}
    f5b6:	bd70      	pop	{r4, r5, r6, pc}
        g_is_output_nlip = 0;
    f5b8:	4b01      	ldr	r3, [pc, #4]	; (f5c0 <console_write+0x7c>)
    f5ba:	2200      	movs	r2, #0
    f5bc:	701a      	strb	r2, [r3, #0]
    f5be:	e7f8      	b.n	f5b2 <console_write+0x6e>
    f5c0:	200040fb 	.word	0x200040fb
    f5c4:	200040fa 	.word	0x200040fa

0000f5c8 <console_blocking_mode>:
}
    f5c8:	4770      	bx	lr
	...

0000f5cc <console_handle_char>:


int
console_handle_char(uint8_t byte)
{
    f5cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#endif
    static struct os_event *ev;
    static struct console_input *input;
    static char prev_endl = '\0';

    if (!lines_queue) {
    f5d0:	4b8a      	ldr	r3, [pc, #552]	; (f7fc <console_handle_char+0x230>)
    f5d2:	681b      	ldr	r3, [r3, #0]
    f5d4:	2b00      	cmp	r3, #0
    f5d6:	f000 8161 	beq.w	f89c <console_handle_char+0x2d0>
    f5da:	4604      	mov	r4, r0
        return 0;
    }

    if (!ev) {
    f5dc:	4b88      	ldr	r3, [pc, #544]	; (f800 <console_handle_char+0x234>)
    f5de:	681b      	ldr	r3, [r3, #0]
    f5e0:	b1cb      	cbz	r3, f616 <console_handle_char+0x4a>
            return -1;
        }
        input = ev->ev_arg;
    }

    if (handle_nlip(byte))  {
    f5e2:	4620      	mov	r0, r4
    f5e4:	f7ff fcb2 	bl	ef4c <handle_nlip>
    f5e8:	4605      	mov	r5, r0
    f5ea:	2800      	cmp	r0, #0
    f5ec:	d064      	beq.n	f6b8 <console_handle_char+0xec>
        if (byte == '\n') {
    f5ee:	2c0a      	cmp	r4, #10
    f5f0:	d021      	beq.n	f636 <console_handle_char+0x6a>
            input = NULL;
            ev = NULL;
            console_echo(1);
            return 0;
        /* Ignore characters if there's no more buffer space */
        } else if (byte == CONSOLE_NLIP_PKT_START2) {
    f5f2:	2c09      	cmp	r4, #9
    f5f4:	d044      	beq.n	f680 <console_handle_char+0xb4>
            /* Disable echo to not flood the UART */
            console_echo(0);
            insert_char(&input->line[cur], CONSOLE_NLIP_PKT_START1, end);
        } else if (byte == CONSOLE_NLIP_DATA_START2) {
    f5f6:	2c14      	cmp	r4, #20
    f5f8:	d050      	beq.n	f69c <console_handle_char+0xd0>
            /* Disable echo to not flood the UART */
            console_echo(0);
            insert_char(&input->line[cur], CONSOLE_NLIP_DATA_START1, end);
        }

        insert_char(&input->line[cur], byte, end);
    f5fa:	4b82      	ldr	r3, [pc, #520]	; (f804 <console_handle_char+0x238>)
    f5fc:	6818      	ldr	r0, [r3, #0]
    f5fe:	4b82      	ldr	r3, [pc, #520]	; (f808 <console_handle_char+0x23c>)
    f600:	881b      	ldrh	r3, [r3, #0]
    f602:	4a82      	ldr	r2, [pc, #520]	; (f80c <console_handle_char+0x240>)
    f604:	8812      	ldrh	r2, [r2, #0]
    f606:	4621      	mov	r1, r4
    f608:	4418      	add	r0, r3
    f60a:	f7ff fe29 	bl	f260 <insert_char>

        return 0;
    f60e:	2500      	movs	r5, #0

    if (!g_console_ignore_non_nlip) {
        insert_char(&input->line[cur], byte, end);
    }
    return 0;
}
    f610:	4628      	mov	r0, r5
    f612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ev = os_eventq_get_no_wait(&avail_queue);
    f616:	487e      	ldr	r0, [pc, #504]	; (f810 <console_handle_char+0x244>)
    f618:	f7fa f880 	bl	971c <os_eventq_get_no_wait>
    f61c:	4b78      	ldr	r3, [pc, #480]	; (f800 <console_handle_char+0x234>)
    f61e:	6018      	str	r0, [r3, #0]
        if (!ev) {
    f620:	b118      	cbz	r0, f62a <console_handle_char+0x5e>
        input = ev->ev_arg;
    f622:	6882      	ldr	r2, [r0, #8]
    f624:	4b77      	ldr	r3, [pc, #476]	; (f804 <console_handle_char+0x238>)
    f626:	601a      	str	r2, [r3, #0]
    f628:	e7db      	b.n	f5e2 <console_handle_char+0x16>
            rx_stalled = true;
    f62a:	4b7a      	ldr	r3, [pc, #488]	; (f814 <console_handle_char+0x248>)
    f62c:	2201      	movs	r2, #1
    f62e:	701a      	strb	r2, [r3, #0]
            return -1;
    f630:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    f634:	e7ec      	b.n	f610 <console_handle_char+0x44>
            insert_char(&input->line[cur], byte, end);
    f636:	4f73      	ldr	r7, [pc, #460]	; (f804 <console_handle_char+0x238>)
    f638:	6838      	ldr	r0, [r7, #0]
    f63a:	4d73      	ldr	r5, [pc, #460]	; (f808 <console_handle_char+0x23c>)
    f63c:	882b      	ldrh	r3, [r5, #0]
    f63e:	4e73      	ldr	r6, [pc, #460]	; (f80c <console_handle_char+0x240>)
    f640:	8832      	ldrh	r2, [r6, #0]
    f642:	4621      	mov	r1, r4
    f644:	4418      	add	r0, r3
    f646:	f7ff fe0b 	bl	f260 <insert_char>
            input->line[cur] = '\0';
    f64a:	683a      	ldr	r2, [r7, #0]
    f64c:	882b      	ldrh	r3, [r5, #0]
    f64e:	2400      	movs	r4, #0
    f650:	54d4      	strb	r4, [r2, r3]
            cur = 0;
    f652:	802c      	strh	r4, [r5, #0]
            end = 0;
    f654:	8034      	strh	r4, [r6, #0]
            os_eventq_put(lines_queue, ev);
    f656:	4b6a      	ldr	r3, [pc, #424]	; (f800 <console_handle_char+0x234>)
    f658:	6819      	ldr	r1, [r3, #0]
    f65a:	4b68      	ldr	r3, [pc, #416]	; (f7fc <console_handle_char+0x230>)
    f65c:	6818      	ldr	r0, [r3, #0]
    f65e:	f7fa f829 	bl	96b4 <os_eventq_put>
            nlip_state = 0;
    f662:	4b6d      	ldr	r3, [pc, #436]	; (f818 <console_handle_char+0x24c>)
    f664:	601c      	str	r4, [r3, #0]
            if (console_compat_rx_cb) {
    f666:	4b6d      	ldr	r3, [pc, #436]	; (f81c <console_handle_char+0x250>)
    f668:	681b      	ldr	r3, [r3, #0]
    f66a:	b103      	cbz	r3, f66e <console_handle_char+0xa2>
                console_compat_rx_cb();
    f66c:	4798      	blx	r3
            input = NULL;
    f66e:	2500      	movs	r5, #0
    f670:	4b64      	ldr	r3, [pc, #400]	; (f804 <console_handle_char+0x238>)
    f672:	601d      	str	r5, [r3, #0]
            ev = NULL;
    f674:	4b62      	ldr	r3, [pc, #392]	; (f800 <console_handle_char+0x234>)
    f676:	601d      	str	r5, [r3, #0]
            console_echo(1);
    f678:	2001      	movs	r0, #1
    f67a:	f7ff fd67 	bl	f14c <console_echo>
            return 0;
    f67e:	e7c7      	b.n	f610 <console_handle_char+0x44>
            console_echo(0);
    f680:	2000      	movs	r0, #0
    f682:	f7ff fd63 	bl	f14c <console_echo>
            insert_char(&input->line[cur], CONSOLE_NLIP_PKT_START1, end);
    f686:	4b5f      	ldr	r3, [pc, #380]	; (f804 <console_handle_char+0x238>)
    f688:	6818      	ldr	r0, [r3, #0]
    f68a:	4b5f      	ldr	r3, [pc, #380]	; (f808 <console_handle_char+0x23c>)
    f68c:	881b      	ldrh	r3, [r3, #0]
    f68e:	4a5f      	ldr	r2, [pc, #380]	; (f80c <console_handle_char+0x240>)
    f690:	8812      	ldrh	r2, [r2, #0]
    f692:	2106      	movs	r1, #6
    f694:	4418      	add	r0, r3
    f696:	f7ff fde3 	bl	f260 <insert_char>
    f69a:	e7ae      	b.n	f5fa <console_handle_char+0x2e>
            console_echo(0);
    f69c:	2000      	movs	r0, #0
    f69e:	f7ff fd55 	bl	f14c <console_echo>
            insert_char(&input->line[cur], CONSOLE_NLIP_DATA_START1, end);
    f6a2:	4b58      	ldr	r3, [pc, #352]	; (f804 <console_handle_char+0x238>)
    f6a4:	6818      	ldr	r0, [r3, #0]
    f6a6:	4b58      	ldr	r3, [pc, #352]	; (f808 <console_handle_char+0x23c>)
    f6a8:	881b      	ldrh	r3, [r3, #0]
    f6aa:	4a58      	ldr	r2, [pc, #352]	; (f80c <console_handle_char+0x240>)
    f6ac:	8812      	ldrh	r2, [r2, #0]
    f6ae:	2104      	movs	r1, #4
    f6b0:	4418      	add	r0, r3
    f6b2:	f7ff fdd5 	bl	f260 <insert_char>
    f6b6:	e7a0      	b.n	f5fa <console_handle_char+0x2e>
    if (esc_state & ESC_ANSI) {
    f6b8:	4b59      	ldr	r3, [pc, #356]	; (f820 <console_handle_char+0x254>)
    f6ba:	681b      	ldr	r3, [r3, #0]
    f6bc:	f013 0602 	ands.w	r6, r3, #2
    f6c0:	d009      	beq.n	f6d6 <console_handle_char+0x10a>
        if (g_console_ignore_non_nlip) {
    f6c2:	4b58      	ldr	r3, [pc, #352]	; (f824 <console_handle_char+0x258>)
    f6c4:	781b      	ldrb	r3, [r3, #0]
    f6c6:	2b00      	cmp	r3, #0
    f6c8:	d1a2      	bne.n	f610 <console_handle_char+0x44>
        handle_ansi(byte, input->line);
    f6ca:	4b4e      	ldr	r3, [pc, #312]	; (f804 <console_handle_char+0x238>)
    f6cc:	6819      	ldr	r1, [r3, #0]
    f6ce:	4620      	mov	r0, r4
    f6d0:	f7ff fe6c 	bl	f3ac <handle_ansi>
        return 0;
    f6d4:	e79c      	b.n	f610 <console_handle_char+0x44>
    if (esc_state & ESC_ESC) {
    f6d6:	f013 0501 	ands.w	r5, r3, #1
    f6da:	d01a      	beq.n	f712 <console_handle_char+0x146>
        if (g_console_ignore_non_nlip) {
    f6dc:	4a51      	ldr	r2, [pc, #324]	; (f824 <console_handle_char+0x258>)
    f6de:	7812      	ldrb	r2, [r2, #0]
    f6e0:	b10a      	cbz	r2, f6e6 <console_handle_char+0x11a>
            return 0;
    f6e2:	4635      	mov	r5, r6
    f6e4:	e794      	b.n	f610 <console_handle_char+0x44>
        esc_state &= ~ESC_ESC;
    f6e6:	f023 0301 	bic.w	r3, r3, #1
    f6ea:	4a4d      	ldr	r2, [pc, #308]	; (f820 <console_handle_char+0x254>)
    f6ec:	6013      	str	r3, [r2, #0]
        handle_ansi(byte, input->line);
    f6ee:	4b45      	ldr	r3, [pc, #276]	; (f804 <console_handle_char+0x238>)
    f6f0:	6819      	ldr	r1, [r3, #0]
    f6f2:	4620      	mov	r0, r4
    f6f4:	f7ff fe5a 	bl	f3ac <handle_ansi>
        switch (byte) {
    f6f8:	2c5b      	cmp	r4, #91	; 0x5b
    f6fa:	d001      	beq.n	f700 <console_handle_char+0x134>
        return 0;
    f6fc:	4635      	mov	r5, r6
    f6fe:	e787      	b.n	f610 <console_handle_char+0x44>
            esc_state |= ESC_ANSI;
    f700:	4a47      	ldr	r2, [pc, #284]	; (f820 <console_handle_char+0x254>)
    f702:	6813      	ldr	r3, [r2, #0]
    f704:	f043 0102 	orr.w	r1, r3, #2
    f708:	6011      	str	r1, [r2, #0]
            esc_state |= ESC_ANSI_FIRST;
    f70a:	f043 0306 	orr.w	r3, r3, #6
    f70e:	6013      	str	r3, [r2, #0]
            break;
    f710:	e7f4      	b.n	f6fc <console_handle_char+0x130>
	    (__c >= '{' && __c <= '~');
}

__extern_inline int isprint(int __c)
{
	return (__c >= 0x20 && __c <= 0x7e);
    f712:	f1a4 0320 	sub.w	r3, r4, #32
    if (!isprint(byte)) {
    f716:	2b5e      	cmp	r3, #94	; 0x5e
    f718:	d80f      	bhi.n	f73a <console_handle_char+0x16e>
    if (!g_console_ignore_non_nlip) {
    f71a:	4b42      	ldr	r3, [pc, #264]	; (f824 <console_handle_char+0x258>)
    f71c:	781b      	ldrb	r3, [r3, #0]
    f71e:	2b00      	cmp	r3, #0
    f720:	f47f af76 	bne.w	f610 <console_handle_char+0x44>
        insert_char(&input->line[cur], byte, end);
    f724:	4b37      	ldr	r3, [pc, #220]	; (f804 <console_handle_char+0x238>)
    f726:	6818      	ldr	r0, [r3, #0]
    f728:	4b37      	ldr	r3, [pc, #220]	; (f808 <console_handle_char+0x23c>)
    f72a:	881b      	ldrh	r3, [r3, #0]
    f72c:	4a37      	ldr	r2, [pc, #220]	; (f80c <console_handle_char+0x240>)
    f72e:	8812      	ldrh	r2, [r2, #0]
    f730:	4621      	mov	r1, r4
    f732:	4418      	add	r0, r3
    f734:	f7ff fd94 	bl	f260 <insert_char>
    f738:	e76a      	b.n	f610 <console_handle_char+0x44>
        handle_ansi(byte, input->line);
    f73a:	4b32      	ldr	r3, [pc, #200]	; (f804 <console_handle_char+0x238>)
    f73c:	6819      	ldr	r1, [r3, #0]
    f73e:	4620      	mov	r0, r4
    f740:	f7ff fe34 	bl	f3ac <handle_ansi>
        switch (byte) {
    f744:	2c1b      	cmp	r4, #27
    f746:	d812      	bhi.n	f76e <console_handle_char+0x1a2>
    f748:	2c04      	cmp	r4, #4
    f74a:	d312      	bcc.n	f772 <console_handle_char+0x1a6>
    f74c:	1f23      	subs	r3, r4, #4
    f74e:	2b17      	cmp	r3, #23
    f750:	d80f      	bhi.n	f772 <console_handle_char+0x1a6>
    f752:	e8df f003 	tbb	[pc, r3]
    f756:	0e4d      	.short	0x0e4d
    f758:	8f6b0e47 	.word	0x8f6b0e47
    f75c:	180e0e18 	.word	0x180e0e18
    f760:	0e0e0e0e 	.word	0x0e0e0e0e
    f764:	0e0e0e0e 	.word	0x0e0e0e0e
    f768:	0e0e0e0e 	.word	0x0e0e0e0e
    f76c:	810e      	.short	0x810e
    f76e:	2c7f      	cmp	r4, #127	; 0x7f
    f770:	d05c      	beq.n	f82c <console_handle_char+0x260>
            insert_char(&input->line[cur], byte, end);
    f772:	4b24      	ldr	r3, [pc, #144]	; (f804 <console_handle_char+0x238>)
    f774:	6818      	ldr	r0, [r3, #0]
    f776:	4b24      	ldr	r3, [pc, #144]	; (f808 <console_handle_char+0x23c>)
    f778:	881b      	ldrh	r3, [r3, #0]
    f77a:	4a24      	ldr	r2, [pc, #144]	; (f80c <console_handle_char+0x240>)
    f77c:	8812      	ldrh	r2, [r2, #0]
    f77e:	4621      	mov	r1, r4
    f780:	4418      	add	r0, r3
    f782:	f7ff fd6d 	bl	f260 <insert_char>
            if (byte == '\n' && prev_endl == '\r') {
    f786:	2c0a      	cmp	r4, #10
    f788:	d103      	bne.n	f792 <console_handle_char+0x1c6>
    f78a:	4b27      	ldr	r3, [pc, #156]	; (f828 <console_handle_char+0x25c>)
    f78c:	781b      	ldrb	r3, [r3, #0]
    f78e:	2b0d      	cmp	r3, #13
    f790:	d06d      	beq.n	f86e <console_handle_char+0x2a2>
            prev_endl = byte;
    f792:	4b25      	ldr	r3, [pc, #148]	; (f828 <console_handle_char+0x25c>)
    f794:	701c      	strb	r4, [r3, #0]
            input->line[cur + end] = '\0';
    f796:	4e1b      	ldr	r6, [pc, #108]	; (f804 <console_handle_char+0x238>)
    f798:	6832      	ldr	r2, [r6, #0]
    f79a:	f8df 806c 	ldr.w	r8, [pc, #108]	; f808 <console_handle_char+0x23c>
    f79e:	f8b8 3000 	ldrh.w	r3, [r8]
    f7a2:	4f1a      	ldr	r7, [pc, #104]	; (f80c <console_handle_char+0x240>)
    f7a4:	8839      	ldrh	r1, [r7, #0]
    f7a6:	440b      	add	r3, r1
    f7a8:	2400      	movs	r4, #0
    f7aa:	54d4      	strb	r4, [r2, r3]
            console_out('\r');
    f7ac:	200d      	movs	r0, #13
    f7ae:	f7ff fd07 	bl	f1c0 <console_out>
            console_out('\n');
    f7b2:	200a      	movs	r0, #10
    f7b4:	f7ff fd04 	bl	f1c0 <console_out>
            cur = 0;
    f7b8:	f8a8 4000 	strh.w	r4, [r8]
            end = 0;
    f7bc:	803c      	strh	r4, [r7, #0]
            os_eventq_put(lines_queue, ev);
    f7be:	4b10      	ldr	r3, [pc, #64]	; (f800 <console_handle_char+0x234>)
    f7c0:	6819      	ldr	r1, [r3, #0]
    f7c2:	4b0e      	ldr	r3, [pc, #56]	; (f7fc <console_handle_char+0x230>)
    f7c4:	6818      	ldr	r0, [r3, #0]
    f7c6:	f7f9 ff75 	bl	96b4 <os_eventq_put>
            console_hist_add(input->line);
    f7ca:	6830      	ldr	r0, [r6, #0]
    f7cc:	f7ff fc5e 	bl	f08c <console_hist_add>
            if (console_compat_rx_cb) {
    f7d0:	4b12      	ldr	r3, [pc, #72]	; (f81c <console_handle_char+0x250>)
    f7d2:	681b      	ldr	r3, [r3, #0]
    f7d4:	b103      	cbz	r3, f7d8 <console_handle_char+0x20c>
                console_compat_rx_cb();
    f7d6:	4798      	blx	r3
            input = NULL;
    f7d8:	2300      	movs	r3, #0
    f7da:	4a0a      	ldr	r2, [pc, #40]	; (f804 <console_handle_char+0x238>)
    f7dc:	6013      	str	r3, [r2, #0]
            ev = NULL;
    f7de:	4a08      	ldr	r2, [pc, #32]	; (f800 <console_handle_char+0x234>)
    f7e0:	6013      	str	r3, [r2, #0]
            break;
    f7e2:	e715      	b.n	f610 <console_handle_char+0x44>
            nlip_state |= NLIP_PKT_START1;
    f7e4:	4a0c      	ldr	r2, [pc, #48]	; (f818 <console_handle_char+0x24c>)
    f7e6:	6813      	ldr	r3, [r2, #0]
    f7e8:	f043 0301 	orr.w	r3, r3, #1
    f7ec:	6013      	str	r3, [r2, #0]
            break;
    f7ee:	e70f      	b.n	f610 <console_handle_char+0x44>
            nlip_state |= NLIP_DATA_START1;
    f7f0:	4a09      	ldr	r2, [pc, #36]	; (f818 <console_handle_char+0x24c>)
    f7f2:	6813      	ldr	r3, [r2, #0]
    f7f4:	f043 0304 	orr.w	r3, r3, #4
    f7f8:	6013      	str	r3, [r2, #0]
            break;
    f7fa:	e709      	b.n	f610 <console_handle_char+0x44>
    f7fc:	20004100 	.word	0x20004100
    f800:	200040f4 	.word	0x200040f4
    f804:	200040fc 	.word	0x200040fc
    f808:	200040ec 	.word	0x200040ec
    f80c:	200040ee 	.word	0x200040ee
    f810:	2000389c 	.word	0x2000389c
    f814:	20004109 	.word	0x20004109
    f818:	20004104 	.word	0x20004104
    f81c:	200038b0 	.word	0x200038b0
    f820:	200040f0 	.word	0x200040f0
    f824:	200040f8 	.word	0x200040f8
    f828:	20004108 	.word	0x20004108
            if (g_console_ignore_non_nlip) {
    f82c:	4b1c      	ldr	r3, [pc, #112]	; (f8a0 <console_handle_char+0x2d4>)
    f82e:	781b      	ldrb	r3, [r3, #0]
    f830:	2b00      	cmp	r3, #0
    f832:	f47f aeed 	bne.w	f610 <console_handle_char+0x44>
            if (cur > 0) {
    f836:	4b1b      	ldr	r3, [pc, #108]	; (f8a4 <console_handle_char+0x2d8>)
    f838:	881b      	ldrh	r3, [r3, #0]
    f83a:	2b00      	cmp	r3, #0
    f83c:	f43f aee8 	beq.w	f610 <console_handle_char+0x44>
                del_char(&input->line[--cur], end);
    f840:	4a19      	ldr	r2, [pc, #100]	; (f8a8 <console_handle_char+0x2dc>)
    f842:	6810      	ldr	r0, [r2, #0]
    f844:	3b01      	subs	r3, #1
    f846:	b29b      	uxth	r3, r3
    f848:	4a16      	ldr	r2, [pc, #88]	; (f8a4 <console_handle_char+0x2d8>)
    f84a:	8013      	strh	r3, [r2, #0]
    f84c:	4a17      	ldr	r2, [pc, #92]	; (f8ac <console_handle_char+0x2e0>)
    f84e:	8811      	ldrh	r1, [r2, #0]
    f850:	4418      	add	r0, r3
    f852:	f7ff fd7b 	bl	f34c <del_char>
    f856:	e6db      	b.n	f610 <console_handle_char+0x44>
            if (g_console_ignore_non_nlip) {
    f858:	4b11      	ldr	r3, [pc, #68]	; (f8a0 <console_handle_char+0x2d4>)
    f85a:	781b      	ldrb	r3, [r3, #0]
    f85c:	2b00      	cmp	r3, #0
    f85e:	f47f aed7 	bne.w	f610 <console_handle_char+0x44>
            esc_state |= ESC_ESC;
    f862:	4a13      	ldr	r2, [pc, #76]	; (f8b0 <console_handle_char+0x2e4>)
    f864:	6813      	ldr	r3, [r2, #0]
    f866:	f043 0301 	orr.w	r3, r3, #1
    f86a:	6013      	str	r3, [r2, #0]
            break;
    f86c:	e6d0      	b.n	f610 <console_handle_char+0x44>
                prev_endl = byte;
    f86e:	4b11      	ldr	r3, [pc, #68]	; (f8b4 <console_handle_char+0x2e8>)
    f870:	701c      	strb	r4, [r3, #0]
                break;
    f872:	e6cd      	b.n	f610 <console_handle_char+0x44>
            if (g_console_ignore_non_nlip) {
    f874:	4b0a      	ldr	r3, [pc, #40]	; (f8a0 <console_handle_char+0x2d4>)
    f876:	781b      	ldrb	r3, [r3, #0]
    f878:	2b00      	cmp	r3, #0
    f87a:	f47f aec9 	bne.w	f610 <console_handle_char+0x44>
            if (completion && !end) {
    f87e:	4b0e      	ldr	r3, [pc, #56]	; (f8b8 <console_handle_char+0x2ec>)
    f880:	681b      	ldr	r3, [r3, #0]
    f882:	2b00      	cmp	r3, #0
    f884:	f43f aec4 	beq.w	f610 <console_handle_char+0x44>
    f888:	4a08      	ldr	r2, [pc, #32]	; (f8ac <console_handle_char+0x2e0>)
    f88a:	8812      	ldrh	r2, [r2, #0]
    f88c:	2a00      	cmp	r2, #0
    f88e:	f47f aebf 	bne.w	f610 <console_handle_char+0x44>
                completion(input->line, console_append_char);
    f892:	490a      	ldr	r1, [pc, #40]	; (f8bc <console_handle_char+0x2f0>)
    f894:	4a04      	ldr	r2, [pc, #16]	; (f8a8 <console_handle_char+0x2dc>)
    f896:	6810      	ldr	r0, [r2, #0]
    f898:	4798      	blx	r3
        return 0;
    f89a:	e6b9      	b.n	f610 <console_handle_char+0x44>
        return 0;
    f89c:	2500      	movs	r5, #0
    f89e:	e6b7      	b.n	f610 <console_handle_char+0x44>
    f8a0:	200040f8 	.word	0x200040f8
    f8a4:	200040ec 	.word	0x200040ec
    f8a8:	200040fc 	.word	0x200040fc
    f8ac:	200040ee 	.word	0x200040ee
    f8b0:	200040f0 	.word	0x200040f0
    f8b4:	20004108 	.word	0x20004108
    f8b8:	200038ac 	.word	0x200038ac
    f8bc:	0000f1e1 	.word	0x0000f1e1

0000f8c0 <console_is_init>:

int
console_is_init(void)
{
    f8c0:	b508      	push	{r3, lr}
#if MYNEWT_VAL(CONSOLE_UART)
    return uart_console_is_init();
#endif
#if MYNEWT_VAL(CONSOLE_RTT)
    return rtt_console_is_init();
    f8c2:	f000 f907 	bl	fad4 <rtt_console_is_init>
#endif
#if MYNEWT_VAL(CONSOLE_BLE_MONITOR)
    return ble_monitor_console_is_init();
#endif
    return 0;
}
    f8c6:	bd08      	pop	{r3, pc}

0000f8c8 <console_line_queue_set>:

void
console_line_queue_set(struct os_eventq *evq)
{
    lines_queue = evq;
    f8c8:	4b01      	ldr	r3, [pc, #4]	; (f8d0 <console_line_queue_set+0x8>)
    f8ca:	6018      	str	r0, [r3, #0]
}
    f8cc:	4770      	bx	lr
    f8ce:	bf00      	nop
    f8d0:	20004100 	.word	0x20004100

0000f8d4 <console_line_event_put>:

void
console_line_event_put(struct os_event *ev)
{
    f8d4:	b508      	push	{r3, lr}
    f8d6:	4601      	mov	r1, r0
    os_eventq_put(&avail_queue, ev);
    f8d8:	4806      	ldr	r0, [pc, #24]	; (f8f4 <console_line_event_put+0x20>)
    f8da:	f7f9 feeb 	bl	96b4 <os_eventq_put>

    if (rx_stalled) {
    f8de:	4b06      	ldr	r3, [pc, #24]	; (f8f8 <console_line_event_put+0x24>)
    f8e0:	781b      	ldrb	r3, [r3, #0]
    f8e2:	b903      	cbnz	r3, f8e6 <console_line_event_put+0x12>
        rx_stalled = false;
        console_rx_restart();
    }
}
    f8e4:	bd08      	pop	{r3, pc}
        rx_stalled = false;
    f8e6:	4b04      	ldr	r3, [pc, #16]	; (f8f8 <console_line_event_put+0x24>)
    f8e8:	2200      	movs	r2, #0
    f8ea:	701a      	strb	r2, [r3, #0]
        console_rx_restart();
    f8ec:	f000 f8ea 	bl	fac4 <console_rx_restart>
}
    f8f0:	e7f8      	b.n	f8e4 <console_line_event_put+0x10>
    f8f2:	bf00      	nop
    f8f4:	2000389c 	.word	0x2000389c
    f8f8:	20004109 	.word	0x20004109

0000f8fc <console_set_completion_cb>:

void
console_set_completion_cb(completion_cb cb)
{
    completion = cb;
    f8fc:	4b01      	ldr	r3, [pc, #4]	; (f904 <console_set_completion_cb+0x8>)
    f8fe:	6018      	str	r0, [r3, #0]
}
    f900:	4770      	bx	lr
    f902:	bf00      	nop
    f904:	200038ac 	.word	0x200038ac

0000f908 <console_pkg_init>:
}
#endif

void
console_pkg_init(void)
{
    f908:	b510      	push	{r4, lr}
    f90a:	b082      	sub	sp, #8
    int rc = 0;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
    f90c:	4b0e      	ldr	r3, [pc, #56]	; (f948 <console_pkg_init+0x40>)
    f90e:	781b      	ldrb	r3, [r3, #0]
    f910:	b1a3      	cbz	r3, f93c <console_pkg_init+0x34>

    os_eventq_init(&avail_queue);
    f912:	480e      	ldr	r0, [pc, #56]	; (f94c <console_pkg_init+0x44>)
    f914:	f7f9 fec0 	bl	9698 <os_eventq_init>
    os_mutex_init(&console_write_lock);
    f918:	480d      	ldr	r0, [pc, #52]	; (f950 <console_pkg_init+0x48>)
    f91a:	f7fb f8a3 	bl	aa64 <os_mutex_init>

#if MYNEWT_VAL(CONSOLE_HISTORY_SIZE) > 0
    console_hist_init();
    f91e:	f7ff fbf5 	bl	f10c <console_hist_init>

#if MYNEWT_VAL(CONSOLE_UART)
    rc = uart_console_init();
#endif
#if MYNEWT_VAL(CONSOLE_RTT)
    rc = rtt_console_init();
    f922:	f000 f8d9 	bl	fad8 <rtt_console_init>
#endif
    SYSINIT_PANIC_ASSERT(rc == 0);
    f926:	b138      	cbz	r0, f938 <console_pkg_init+0x30>
    f928:	2000      	movs	r0, #0
    f92a:	9000      	str	r0, [sp, #0]
    f92c:	4b09      	ldr	r3, [pc, #36]	; (f954 <console_pkg_init+0x4c>)
    f92e:	681c      	ldr	r4, [r3, #0]
    f930:	4603      	mov	r3, r0
    f932:	4602      	mov	r2, r0
    f934:	4601      	mov	r1, r0
    f936:	47a0      	blx	r4
}
    f938:	b002      	add	sp, #8
    f93a:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
    f93c:	461a      	mov	r2, r3
    f93e:	4619      	mov	r1, r3
    f940:	4618      	mov	r0, r3
    f942:	f7f9 fb83 	bl	904c <__assert_func>
    f946:	bf00      	nop
    f948:	20004548 	.word	0x20004548
    f94c:	2000389c 	.word	0x2000389c
    f950:	200040e0 	.word	0x200040e0
    f954:	2000064c 	.word	0x2000064c

0000f958 <console_vprintf>:

#if MYNEWT_VAL(BASELIBC_PRESENT)

int
console_vprintf(const char *fmt, va_list ap)
{
    f958:	b570      	push	{r4, r5, r6, lr}
    f95a:	4604      	mov	r4, r0
    f95c:	460d      	mov	r5, r1
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
    f95e:	f000 f8db 	bl	fb18 <console_get_ticks>
    f962:	b160      	cbz	r0, f97e <console_vprintf+0x26>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
    f964:	4b09      	ldr	r3, [pc, #36]	; (f98c <console_vprintf+0x34>)
    f966:	681b      	ldr	r3, [r3, #0]
    f968:	b10b      	cbz	r3, f96e <console_vprintf+0x16>
    num_chars = 0;
    f96a:	2600      	movs	r6, #0
    f96c:	e008      	b.n	f980 <console_vprintf+0x28>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
    f96e:	f7fa fc5f 	bl	a230 <os_time_get>
    f972:	4601      	mov	r1, r0
    f974:	4806      	ldr	r0, [pc, #24]	; (f990 <console_vprintf+0x38>)
    f976:	f7fe fc57 	bl	e228 <printf>
    f97a:	4606      	mov	r6, r0
    f97c:	e000      	b.n	f980 <console_vprintf+0x28>
    num_chars = 0;
    f97e:	2600      	movs	r6, #0
        }
    }

    num_chars += vprintf(fmt, ap);
    f980:	4629      	mov	r1, r5
    f982:	4620      	mov	r0, r4
    f984:	f00c fd84 	bl	1c490 <vprintf>

    return num_chars;
}
    f988:	4430      	add	r0, r6
    f98a:	bd70      	pop	{r4, r5, r6, pc}
    f98c:	200040dc 	.word	0x200040dc
    f990:	000232f8 	.word	0x000232f8

0000f994 <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
    f994:	b40f      	push	{r0, r1, r2, r3}
    f996:	b500      	push	{lr}
    f998:	b083      	sub	sp, #12
    f99a:	a904      	add	r1, sp, #16
    f99c:	f851 0b04 	ldr.w	r0, [r1], #4
    va_list args;
    int num_chars;

    va_start(args, fmt);
    f9a0:	9101      	str	r1, [sp, #4]
    num_chars = console_vprintf(fmt, args);
    f9a2:	f7ff ffd9 	bl	f958 <console_vprintf>
    va_end(args);

    return num_chars;
}
    f9a6:	b003      	add	sp, #12
    f9a8:	f85d eb04 	ldr.w	lr, [sp], #4
    f9ac:	b004      	add	sp, #16
    f9ae:	4770      	bx	lr

0000f9b0 <rtt_console_wait_for_retry>:

#if MYNEWT_VAL(CONSOLE_RTT_RETRY_COUNT) > 0

static void
rtt_console_wait_for_retry(void)
{
    f9b0:	b508      	push	{r3, lr}
    f9b2:	4b05      	ldr	r3, [pc, #20]	; (f9c8 <rtt_console_wait_for_retry+0x18>)
    f9b4:	685b      	ldr	r3, [r3, #4]
    f9b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    uint32_t ticks;

    if (os_arch_in_isr()) {
    f9ba:	b103      	cbz	r3, f9be <rtt_console_wait_for_retry+0xe>
#endif
    } else {
        ticks = max(1, os_time_ms_to_ticks32(MYNEWT_VAL(CONSOLE_RTT_RETRY_DELAY_MS)));
        os_time_delay(ticks);
    }
}
    f9bc:	bd08      	pop	{r3, pc}
        os_time_delay(ticks);
    f9be:	2001      	movs	r0, #1
    f9c0:	f7fa fc5e 	bl	a280 <os_time_delay>
}
    f9c4:	e7fa      	b.n	f9bc <rtt_console_wait_for_retry+0xc>
    f9c6:	bf00      	nop
    f9c8:	e000ed00 	.word	0xe000ed00

0000f9cc <rtt_console_write_ch>:

static void
rtt_console_write_ch(char c)
{
    f9cc:	b530      	push	{r4, r5, lr}
    f9ce:	b083      	sub	sp, #12
    f9d0:	f88d 0007 	strb.w	r0, [sp, #7]
    f9d4:	e00a      	b.n	f9ec <rtt_console_write_ch+0x20>
         * read data), we stop retrying until successful write (which means that
         * host is reading data).
         */

        if (ret) {
            rtt_console_retries_left = MYNEWT_VAL(CONSOLE_RTT_RETRY_COUNT);
    f9d6:	4b0f      	ldr	r3, [pc, #60]	; (fa14 <rtt_console_write_ch+0x48>)
    f9d8:	2202      	movs	r2, #2
    f9da:	601a      	str	r2, [r3, #0]
        }

        rtt_console_wait_for_retry();
        rtt_console_retries_left--;
    }
}
    f9dc:	b003      	add	sp, #12
    f9de:	bd30      	pop	{r4, r5, pc}
        rtt_console_wait_for_retry();
    f9e0:	f7ff ffe6 	bl	f9b0 <rtt_console_wait_for_retry>
        rtt_console_retries_left--;
    f9e4:	4a0b      	ldr	r2, [pc, #44]	; (fa14 <rtt_console_write_ch+0x48>)
    f9e6:	6813      	ldr	r3, [r2, #0]
    f9e8:	3b01      	subs	r3, #1
    f9ea:	6013      	str	r3, [r2, #0]
        OS_ENTER_CRITICAL(sr);
    f9ec:	f7fa fd46 	bl	a47c <os_arch_save_sr>
    f9f0:	4605      	mov	r5, r0
        ret = SEGGER_RTT_WriteNoLock(0, &c, 1);
    f9f2:	2201      	movs	r2, #1
    f9f4:	f10d 0107 	add.w	r1, sp, #7
    f9f8:	2000      	movs	r0, #0
    f9fa:	f003 ffb1 	bl	13960 <SEGGER_RTT_WriteNoLock>
    f9fe:	4604      	mov	r4, r0
        OS_EXIT_CRITICAL(sr);
    fa00:	4628      	mov	r0, r5
    fa02:	f7fa fd41 	bl	a488 <os_arch_restore_sr>
        if (ret) {
    fa06:	2c00      	cmp	r4, #0
    fa08:	d1e5      	bne.n	f9d6 <rtt_console_write_ch+0xa>
        if (rtt_console_retries_left <= 0) {
    fa0a:	4b02      	ldr	r3, [pc, #8]	; (fa14 <rtt_console_write_ch+0x48>)
    fa0c:	681b      	ldr	r3, [r3, #0]
    fa0e:	2b00      	cmp	r3, #0
    fa10:	dce6      	bgt.n	f9e0 <rtt_console_write_ch+0x14>
    fa12:	e7e3      	b.n	f9dc <rtt_console_write_ch+0x10>
    fa14:	20000618 	.word	0x20000618

0000fa18 <rtt_console_poll_func>:
#define RTT_INPUT_POLL_INTERVAL_STEP    10 /* ms */
#define RTT_INPUT_POLL_INTERVAL_MAX     MYNEWT_VAL(CONSOLE_RTT_INPUT_POLL_INTERVAL_MAX)

static void
rtt_console_poll_func(void *arg)
{
    fa18:	b508      	push	{r3, lr}
    static uint32_t itvl_ms = RTT_INPUT_POLL_INTERVAL_MIN;
    static int key = -1;
    int ret;

    if (key < 0) {
    fa1a:	4b18      	ldr	r3, [pc, #96]	; (fa7c <rtt_console_poll_func+0x64>)
    fa1c:	681b      	ldr	r3, [r3, #0]
    fa1e:	2b00      	cmp	r3, #0
    fa20:	db11      	blt.n	fa46 <rtt_console_poll_func+0x2e>
        key = SEGGER_RTT_GetKey();
    }

    if (key < 0) {
    fa22:	4b16      	ldr	r3, [pc, #88]	; (fa7c <rtt_console_poll_func+0x64>)
    fa24:	681b      	ldr	r3, [r3, #0]
    fa26:	2b00      	cmp	r3, #0
    fa28:	db12      	blt.n	fa50 <rtt_console_poll_func+0x38>
        itvl_ms += RTT_INPUT_POLL_INTERVAL_STEP;
        itvl_ms = min(itvl_ms, RTT_INPUT_POLL_INTERVAL_MAX);
    } else {
        while (key >= 0) {
    fa2a:	4b14      	ldr	r3, [pc, #80]	; (fa7c <rtt_console_poll_func+0x64>)
    fa2c:	6818      	ldr	r0, [r3, #0]
    fa2e:	2800      	cmp	r0, #0
    fa30:	db20      	blt.n	fa74 <rtt_console_poll_func+0x5c>
            ret = console_handle_char((char)key);
    fa32:	b2c0      	uxtb	r0, r0
    fa34:	f7ff fdca 	bl	f5cc <console_handle_char>
            if (ret < 0) {
    fa38:	2800      	cmp	r0, #0
    fa3a:	db1a      	blt.n	fa72 <rtt_console_poll_func+0x5a>
                return;
            }
            key = SEGGER_RTT_GetKey();
    fa3c:	f004 f866 	bl	13b0c <SEGGER_RTT_GetKey>
    fa40:	4b0e      	ldr	r3, [pc, #56]	; (fa7c <rtt_console_poll_func+0x64>)
    fa42:	6018      	str	r0, [r3, #0]
    fa44:	e7f1      	b.n	fa2a <rtt_console_poll_func+0x12>
        key = SEGGER_RTT_GetKey();
    fa46:	f004 f861 	bl	13b0c <SEGGER_RTT_GetKey>
    fa4a:	4b0c      	ldr	r3, [pc, #48]	; (fa7c <rtt_console_poll_func+0x64>)
    fa4c:	6018      	str	r0, [r3, #0]
    fa4e:	e7e8      	b.n	fa22 <rtt_console_poll_func+0xa>
        itvl_ms += RTT_INPUT_POLL_INTERVAL_STEP;
    fa50:	4a0b      	ldr	r2, [pc, #44]	; (fa80 <rtt_console_poll_func+0x68>)
    fa52:	6813      	ldr	r3, [r2, #0]
    fa54:	330a      	adds	r3, #10
    fa56:	6013      	str	r3, [r2, #0]
        itvl_ms = min(itvl_ms, RTT_INPUT_POLL_INTERVAL_MAX);
    fa58:	2bfa      	cmp	r3, #250	; 0xfa
    fa5a:	bf28      	it	cs
    fa5c:	23fa      	movcs	r3, #250	; 0xfa
    fa5e:	6013      	str	r3, [r2, #0]
        }
        itvl_ms = RTT_INPUT_POLL_INTERVAL_MIN;
    }

    os_cputime_timer_relative(&rtt_timer, itvl_ms * 1000);
    fa60:	4b07      	ldr	r3, [pc, #28]	; (fa80 <rtt_console_poll_func+0x68>)
    fa62:	681b      	ldr	r3, [r3, #0]
    fa64:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    fa68:	fb03 f101 	mul.w	r1, r3, r1
    fa6c:	4805      	ldr	r0, [pc, #20]	; (fa84 <rtt_console_poll_func+0x6c>)
    fa6e:	f7f9 fd4d 	bl	950c <os_cputime_timer_relative>
}
    fa72:	bd08      	pop	{r3, pc}
        itvl_ms = RTT_INPUT_POLL_INTERVAL_MIN;
    fa74:	4b02      	ldr	r3, [pc, #8]	; (fa80 <rtt_console_poll_func+0x68>)
    fa76:	220a      	movs	r2, #10
    fa78:	601a      	str	r2, [r3, #0]
    fa7a:	e7f1      	b.n	fa60 <rtt_console_poll_func+0x48>
    fa7c:	20000614 	.word	0x20000614
    fa80:	20000610 	.word	0x20000610
    fa84:	2000410c 	.word	0x2000410c

0000fa88 <console_out_nolock>:
{
    fa88:	b538      	push	{r3, r4, r5, lr}
    char c = (char)character;
    fa8a:	b2c5      	uxtb	r5, r0
    if (g_console_silence) {
    fa8c:	4b0b      	ldr	r3, [pc, #44]	; (fabc <console_out_nolock+0x34>)
    fa8e:	781b      	ldrb	r3, [r3, #0]
    fa90:	b953      	cbnz	r3, faa8 <console_out_nolock+0x20>
    fa92:	4604      	mov	r4, r0
    if ('\n' == c) {
    fa94:	2d0a      	cmp	r5, #10
    fa96:	d009      	beq.n	faac <console_out_nolock+0x24>
        console_is_midline = 1;
    fa98:	4b09      	ldr	r3, [pc, #36]	; (fac0 <console_out_nolock+0x38>)
    fa9a:	2201      	movs	r2, #1
    fa9c:	601a      	str	r2, [r3, #0]
    rtt_console_write_ch(c);
    fa9e:	4628      	mov	r0, r5
    faa0:	f7ff ff94 	bl	f9cc <rtt_console_write_ch>
    return character;
    faa4:	4620      	mov	r0, r4
}
    faa6:	bd38      	pop	{r3, r4, r5, pc}
        return c;
    faa8:	4628      	mov	r0, r5
    faaa:	e7fc      	b.n	faa6 <console_out_nolock+0x1e>
        rtt_console_write_ch('\r');
    faac:	200d      	movs	r0, #13
    faae:	f7ff ff8d 	bl	f9cc <rtt_console_write_ch>
        console_is_midline = 0;
    fab2:	4b03      	ldr	r3, [pc, #12]	; (fac0 <console_out_nolock+0x38>)
    fab4:	2200      	movs	r2, #0
    fab6:	601a      	str	r2, [r3, #0]
    fab8:	e7f1      	b.n	fa9e <console_out_nolock+0x16>
    faba:	bf00      	nop
    fabc:	200040f9 	.word	0x200040f9
    fac0:	200040dc 	.word	0x200040dc

0000fac4 <console_rx_restart>:
{
    fac4:	b508      	push	{r3, lr}
    os_cputime_timer_relative(&rtt_timer, 0);
    fac6:	2100      	movs	r1, #0
    fac8:	4801      	ldr	r0, [pc, #4]	; (fad0 <console_rx_restart+0xc>)
    faca:	f7f9 fd1f 	bl	950c <os_cputime_timer_relative>
}
    face:	bd08      	pop	{r3, pc}
    fad0:	2000410c 	.word	0x2000410c

0000fad4 <rtt_console_is_init>:

int
rtt_console_is_init(void)
{
    return 1;
}
    fad4:	2001      	movs	r0, #1
    fad6:	4770      	bx	lr

0000fad8 <rtt_console_init>:

int
rtt_console_init(void)
{
    fad8:	b510      	push	{r4, lr}
#if MYNEWT_VAL(CONSOLE_INPUT)
    os_cputime_timer_init(&rtt_timer, rtt_console_poll_func, NULL);
    fada:	4c06      	ldr	r4, [pc, #24]	; (faf4 <rtt_console_init+0x1c>)
    fadc:	2200      	movs	r2, #0
    fade:	4906      	ldr	r1, [pc, #24]	; (faf8 <rtt_console_init+0x20>)
    fae0:	4620      	mov	r0, r4
    fae2:	f7f9 fcf7 	bl	94d4 <os_cputime_timer_init>
    /* start after a second */
    os_cputime_timer_relative(&rtt_timer, 1000000);
    fae6:	4905      	ldr	r1, [pc, #20]	; (fafc <rtt_console_init+0x24>)
    fae8:	4620      	mov	r0, r4
    faea:	f7f9 fd0f 	bl	950c <os_cputime_timer_relative>
#endif
    return 0;
}
    faee:	2000      	movs	r0, #0
    faf0:	bd10      	pop	{r4, pc}
    faf2:	bf00      	nop
    faf4:	2000410c 	.word	0x2000410c
    faf8:	0000fa19 	.word	0x0000fa19
    fafc:	000f4240 	.word	0x000f4240

0000fb00 <console_no_ticks>:

/* Turn OS Ticks off */
void
console_no_ticks(void)
{
    do_ticks = 0;
    fb00:	4b01      	ldr	r3, [pc, #4]	; (fb08 <console_no_ticks+0x8>)
    fb02:	2200      	movs	r2, #0
    fb04:	701a      	strb	r2, [r3, #0]
}
    fb06:	4770      	bx	lr
    fb08:	2000061c 	.word	0x2000061c

0000fb0c <console_yes_ticks>:

/* Turn OS Ticks on */
void
console_yes_ticks(void)
{
    do_ticks = 1;
    fb0c:	4b01      	ldr	r3, [pc, #4]	; (fb14 <console_yes_ticks+0x8>)
    fb0e:	2201      	movs	r2, #1
    fb10:	701a      	strb	r2, [r3, #0]
}
    fb12:	4770      	bx	lr
    fb14:	2000061c 	.word	0x2000061c

0000fb18 <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
    fb18:	4b01      	ldr	r3, [pc, #4]	; (fb20 <console_get_ticks+0x8>)
    fb1a:	7818      	ldrb	r0, [r3, #0]
    fb1c:	4770      	bx	lr
    fb1e:	bf00      	nop
    fb20:	2000061c 	.word	0x2000061c

0000fb24 <get_prompt>:
    console_line_queue_set(shell_evq);
}

static const char *
get_prompt(void)
{
    fb24:	b508      	push	{r3, lr}
    const char *str;

    if (app_prompt_handler) {
    fb26:	4b09      	ldr	r3, [pc, #36]	; (fb4c <get_prompt+0x28>)
    fb28:	681b      	ldr	r3, [r3, #0]
    fb2a:	b113      	cbz	r3, fb32 <get_prompt+0xe>

        str = app_prompt_handler();
    fb2c:	4798      	blx	r3
        if (str) {
    fb2e:	b100      	cbz	r0, fb32 <get_prompt+0xe>
    if (default_module != -1) {
        return shell_modules[default_module].name;
    }

    return prompt;
}
    fb30:	bd08      	pop	{r3, pc}
    if (default_module != -1) {
    fb32:	4b07      	ldr	r3, [pc, #28]	; (fb50 <get_prompt+0x2c>)
    fb34:	681b      	ldr	r3, [r3, #0]
    fb36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    fb3a:	d003      	beq.n	fb44 <get_prompt+0x20>
        return shell_modules[default_module].name;
    fb3c:	4a05      	ldr	r2, [pc, #20]	; (fb54 <get_prompt+0x30>)
    fb3e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
    fb42:	e7f5      	b.n	fb30 <get_prompt+0xc>
    return prompt;
    fb44:	4b04      	ldr	r3, [pc, #16]	; (fb58 <get_prompt+0x34>)
    fb46:	6818      	ldr	r0, [r3, #0]
    fb48:	e7f2      	b.n	fb30 <get_prompt+0xc>
    fb4a:	bf00      	nop
    fb4c:	20004134 	.word	0x20004134
    fb50:	20000620 	.word	0x20000620
    fb54:	200044bc 	.word	0x200044bc
    fb58:	20004494 	.word	0x20004494

0000fb5c <print_module_commands>:
    }
}

static void
print_module_commands(const int module, struct streamer *streamer)
{
    fb5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fb5e:	4606      	mov	r6, r0
    fb60:	460d      	mov	r5, r1
    const struct shell_module *shell_module = &shell_modules[module];
    int i;

    streamer_printf(streamer, "help\n");
    fb62:	4914      	ldr	r1, [pc, #80]	; (fbb4 <print_module_commands+0x58>)
    fb64:	4628      	mov	r0, r5
    fb66:	f002 fbd8 	bl	1231a <streamer_printf>

    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
    fb6a:	2400      	movs	r4, #0
    fb6c:	e004      	b.n	fb78 <print_module_commands+0x1c>
            shell_module->commands[i].help->summary) {
        
            streamer_printf(streamer, "%s",
                            shell_module->commands[i].help->summary);
        }
        streamer_printf(streamer, "\n");
    fb6e:	4912      	ldr	r1, [pc, #72]	; (fbb8 <print_module_commands+0x5c>)
    fb70:	4628      	mov	r0, r5
    fb72:	f002 fbd2 	bl	1231a <streamer_printf>
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
    fb76:	3401      	adds	r4, #1
    fb78:	4b10      	ldr	r3, [pc, #64]	; (fbbc <print_module_commands+0x60>)
    fb7a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    fb7e:	685b      	ldr	r3, [r3, #4]
    fb80:	0127      	lsls	r7, r4, #4
    fb82:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    fb86:	689a      	ldr	r2, [r3, #8]
    fb88:	b19a      	cbz	r2, fbb2 <print_module_commands+0x56>
        streamer_printf(streamer, "%-30s", shell_module->commands[i].sc_cmd);
    fb8a:	490d      	ldr	r1, [pc, #52]	; (fbc0 <print_module_commands+0x64>)
    fb8c:	4628      	mov	r0, r5
    fb8e:	f002 fbc4 	bl	1231a <streamer_printf>
        if (shell_module->commands[i].help &&
    fb92:	4b0a      	ldr	r3, [pc, #40]	; (fbbc <print_module_commands+0x60>)
    fb94:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    fb98:	685b      	ldr	r3, [r3, #4]
    fb9a:	443b      	add	r3, r7
    fb9c:	68db      	ldr	r3, [r3, #12]
    fb9e:	2b00      	cmp	r3, #0
    fba0:	d0e5      	beq.n	fb6e <print_module_commands+0x12>
            shell_module->commands[i].help->summary) {
    fba2:	681a      	ldr	r2, [r3, #0]
        if (shell_module->commands[i].help &&
    fba4:	2a00      	cmp	r2, #0
    fba6:	d0e2      	beq.n	fb6e <print_module_commands+0x12>
            streamer_printf(streamer, "%s",
    fba8:	4906      	ldr	r1, [pc, #24]	; (fbc4 <print_module_commands+0x68>)
    fbaa:	4628      	mov	r0, r5
    fbac:	f002 fbb5 	bl	1231a <streamer_printf>
    fbb0:	e7dd      	b.n	fb6e <print_module_commands+0x12>
    }
}
    fbb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fbb4:	00023300 	.word	0x00023300
    fbb8:	000233bc 	.word	0x000233bc
    fbbc:	200044bc 	.word	0x200044bc
    fbc0:	00023308 	.word	0x00023308
    fbc4:	00023278 	.word	0x00023278

0000fbc8 <print_modules>:
{
    fbc8:	b538      	push	{r3, r4, r5, lr}
    fbca:	4605      	mov	r5, r0
    for (module = 0; module < num_of_shell_entities; module++) {
    fbcc:	2400      	movs	r4, #0
    fbce:	e007      	b.n	fbe0 <print_modules+0x18>
        streamer_printf(streamer, "%s\n", shell_modules[module].name);
    fbd0:	4b06      	ldr	r3, [pc, #24]	; (fbec <print_modules+0x24>)
    fbd2:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
    fbd6:	4906      	ldr	r1, [pc, #24]	; (fbf0 <print_modules+0x28>)
    fbd8:	4628      	mov	r0, r5
    fbda:	f002 fb9e 	bl	1231a <streamer_printf>
    for (module = 0; module < num_of_shell_entities; module++) {
    fbde:	3401      	adds	r4, #1
    fbe0:	4b04      	ldr	r3, [pc, #16]	; (fbf4 <print_modules+0x2c>)
    fbe2:	681b      	ldr	r3, [r3, #0]
    fbe4:	429c      	cmp	r4, r3
    fbe6:	d3f3      	bcc.n	fbd0 <print_modules+0x8>
}
    fbe8:	bd38      	pop	{r3, r4, r5, pc}
    fbea:	bf00      	nop
    fbec:	200044bc 	.word	0x200044bc
    fbf0:	000235cc 	.word	0x000235cc
    fbf4:	20004490 	.word	0x20004490

0000fbf8 <print_command_params>:
{
    fbf8:	b570      	push	{r4, r5, r6, lr}
	const struct shell_cmd *shell_cmd = &shell_module->commands[command];
    fbfa:	4b0e      	ldr	r3, [pc, #56]	; (fc34 <print_command_params+0x3c>)
    fbfc:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    fc00:	685d      	ldr	r5, [r3, #4]
    fc02:	eb05 1501 	add.w	r5, r5, r1, lsl #4
	if (!(shell_cmd->help && shell_cmd->help->params)) {
    fc06:	68eb      	ldr	r3, [r5, #12]
    fc08:	b19b      	cbz	r3, fc32 <print_command_params+0x3a>
    fc0a:	4616      	mov	r6, r2
    fc0c:	689b      	ldr	r3, [r3, #8]
    fc0e:	b183      	cbz	r3, fc32 <print_command_params+0x3a>
	for (i = 0; shell_cmd->help->params[i].param_name; i++) {
    fc10:	2400      	movs	r4, #0
    fc12:	e006      	b.n	fc22 <print_command_params+0x2a>
		streamer_printf(streamer, "%-30s%s\n",
    fc14:	f8dc 3004 	ldr.w	r3, [ip, #4]
    fc18:	4907      	ldr	r1, [pc, #28]	; (fc38 <print_command_params+0x40>)
    fc1a:	4630      	mov	r0, r6
    fc1c:	f002 fb7d 	bl	1231a <streamer_printf>
	for (i = 0; shell_cmd->help->params[i].param_name; i++) {
    fc20:	3401      	adds	r4, #1
    fc22:	68eb      	ldr	r3, [r5, #12]
    fc24:	689b      	ldr	r3, [r3, #8]
    fc26:	eb03 0cc4 	add.w	ip, r3, r4, lsl #3
    fc2a:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
    fc2e:	2a00      	cmp	r2, #0
    fc30:	d1f0      	bne.n	fc14 <print_command_params+0x1c>
}
    fc32:	bd70      	pop	{r4, r5, r6, pc}
    fc34:	200044bc 	.word	0x200044bc
    fc38:	00023310 	.word	0x00023310

0000fc3c <get_destination_module>:
{
    fc3c:	b570      	push	{r4, r5, r6, lr}
    fc3e:	4606      	mov	r6, r0
    fc40:	460d      	mov	r5, r1
    for (i = 0; i < num_of_shell_entities; i++) {
    fc42:	2400      	movs	r4, #0
    fc44:	e007      	b.n	fc56 <get_destination_module+0x1a>
            if (!strcmp(module_str, shell_modules[i].name)) {
    fc46:	4b0e      	ldr	r3, [pc, #56]	; (fc80 <get_destination_module+0x44>)
    fc48:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
    fc4c:	4630      	mov	r0, r6
    fc4e:	f7fd ff03 	bl	da58 <strcmp>
    fc52:	b190      	cbz	r0, fc7a <get_destination_module+0x3e>
    for (i = 0; i < num_of_shell_entities; i++) {
    fc54:	3401      	adds	r4, #1
    fc56:	4b0b      	ldr	r3, [pc, #44]	; (fc84 <get_destination_module+0x48>)
    fc58:	681b      	ldr	r3, [r3, #0]
    fc5a:	429c      	cmp	r4, r3
    fc5c:	d20b      	bcs.n	fc76 <get_destination_module+0x3a>
        if (len < 0) {
    fc5e:	2d00      	cmp	r5, #0
    fc60:	dbf1      	blt.n	fc46 <get_destination_module+0xa>
            if (!strncmp(module_str, shell_modules[i].name, len)) {
    fc62:	462a      	mov	r2, r5
    fc64:	4b06      	ldr	r3, [pc, #24]	; (fc80 <get_destination_module+0x44>)
    fc66:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
    fc6a:	4630      	mov	r0, r6
    fc6c:	f00c fbd5 	bl	1c41a <strncmp>
    fc70:	2800      	cmp	r0, #0
    fc72:	d1ef      	bne.n	fc54 <get_destination_module+0x18>
    fc74:	e001      	b.n	fc7a <get_destination_module+0x3e>
    return -1;
    fc76:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
    fc7a:	4620      	mov	r0, r4
    fc7c:	bd70      	pop	{r4, r5, r6, pc}
    fc7e:	bf00      	nop
    fc80:	200044bc 	.word	0x200044bc
    fc84:	20004490 	.word	0x20004490

0000fc88 <set_default_module>:
static const struct shell_cmd shell_cmd_help =
    SHELL_CMD_EXT("help", show_help, NULL);

static int
set_default_module(const char *name)
{
    fc88:	b508      	push	{r3, lr}
    int module;

    module = get_destination_module(name, -1);
    fc8a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    fc8e:	f7ff ffd5 	bl	fc3c <get_destination_module>

    if (module == -1) {
    fc92:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    fc96:	d002      	beq.n	fc9e <set_default_module+0x16>
        return -1;
    }

    default_module = module;
    fc98:	4b01      	ldr	r3, [pc, #4]	; (fca0 <set_default_module+0x18>)
    fc9a:	6018      	str	r0, [r3, #0]

    return 0;
    fc9c:	2000      	movs	r0, #0
}
    fc9e:	bd08      	pop	{r3, pc}
    fca0:	20000620 	.word	0x20000620

0000fca4 <select_module>:

static int
select_module(const struct shell_cmd *cmd, int argc, char *argv[],
              struct streamer *streamer)
{
    fca4:	b508      	push	{r3, lr}
    if (argc == 1) {
    fca6:	2901      	cmp	r1, #1
    fca8:	d105      	bne.n	fcb6 <select_module+0x12>
        default_module = -1;
    fcaa:	4b05      	ldr	r3, [pc, #20]	; (fcc0 <select_module+0x1c>)
    fcac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    fcb0:	601a      	str	r2, [r3, #0]
    } else {
        set_default_module(argv[1]);
    }

    return 0;
}
    fcb2:	2000      	movs	r0, #0
    fcb4:	bd08      	pop	{r3, pc}
        set_default_module(argv[1]);
    fcb6:	6850      	ldr	r0, [r2, #4]
    fcb8:	f7ff ffe6 	bl	fc88 <set_default_module>
    fcbc:	e7f9      	b.n	fcb2 <select_module+0xe>
    fcbe:	bf00      	nop
    fcc0:	20000620 	.word	0x20000620

0000fcc4 <get_command_and_module>:
{
    fcc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fcc6:	4617      	mov	r7, r2
    *module = -1;
    fcc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fccc:	600b      	str	r3, [r1, #0]
    if (!argv[0]) {
    fcce:	6806      	ldr	r6, [r0, #0]
    fcd0:	b156      	cbz	r6, fce8 <get_command_and_module+0x24>
    fcd2:	4604      	mov	r4, r0
    fcd4:	460d      	mov	r5, r1
    if (default_module == -1) {
    fcd6:	4b15      	ldr	r3, [pc, #84]	; (fd2c <get_command_and_module+0x68>)
    fcd8:	681b      	ldr	r3, [r3, #0]
    fcda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    fcde:	d008      	beq.n	fcf2 <get_command_and_module+0x2e>
    *module = default_module;
    fce0:	600b      	str	r3, [r1, #0]
    return argv[0];
    fce2:	6806      	ldr	r6, [r0, #0]
}
    fce4:	4630      	mov	r0, r6
    fce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        streamer_printf(streamer, "Unrecognized command\n");
    fce8:	4911      	ldr	r1, [pc, #68]	; (fd30 <get_command_and_module+0x6c>)
    fcea:	4610      	mov	r0, r2
    fcec:	f002 fb15 	bl	1231a <streamer_printf>
        return NULL;
    fcf0:	e7f8      	b.n	fce4 <get_command_and_module+0x20>
        if (!argv[1] || argv[1][0] == '\0') {
    fcf2:	6843      	ldr	r3, [r0, #4]
    fcf4:	b163      	cbz	r3, fd10 <get_command_and_module+0x4c>
    fcf6:	781b      	ldrb	r3, [r3, #0]
    fcf8:	b153      	cbz	r3, fd10 <get_command_and_module+0x4c>
        *module = get_destination_module(argv[0], -1);
    fcfa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    fcfe:	4630      	mov	r0, r6
    fd00:	f7ff ff9c 	bl	fc3c <get_destination_module>
    fd04:	6028      	str	r0, [r5, #0]
        if (*module == -1) {
    fd06:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    fd0a:	d008      	beq.n	fd1e <get_command_and_module+0x5a>
        return argv[1];
    fd0c:	6866      	ldr	r6, [r4, #4]
    fd0e:	e7e9      	b.n	fce4 <get_command_and_module+0x20>
            streamer_printf(streamer, "Unrecognized command: %s\n", argv[0]);
    fd10:	4632      	mov	r2, r6
    fd12:	4908      	ldr	r1, [pc, #32]	; (fd34 <get_command_and_module+0x70>)
    fd14:	4638      	mov	r0, r7
    fd16:	f002 fb00 	bl	1231a <streamer_printf>
            return NULL;
    fd1a:	2600      	movs	r6, #0
    fd1c:	e7e2      	b.n	fce4 <get_command_and_module+0x20>
            streamer_printf(streamer, "Illegal module %s\n", argv[0]);
    fd1e:	6822      	ldr	r2, [r4, #0]
    fd20:	4905      	ldr	r1, [pc, #20]	; (fd38 <get_command_and_module+0x74>)
    fd22:	4638      	mov	r0, r7
    fd24:	f002 faf9 	bl	1231a <streamer_printf>
            return NULL;
    fd28:	2600      	movs	r6, #0
    fd2a:	e7db      	b.n	fce4 <get_command_and_module+0x20>
    fd2c:	20000620 	.word	0x20000620
    fd30:	0002331c 	.word	0x0002331c
    fd34:	00023334 	.word	0x00023334
    fd38:	00023350 	.word	0x00023350

0000fd3c <shell_find_cmd>:
static const struct shell_cmd shell_cmd_select_module =
    SHELL_CMD_EXT("select", select_module, NULL);

static const struct shell_cmd *
shell_find_cmd(int argc, char *argv[], struct streamer *streamer)
{
    fd3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    fd3e:	b083      	sub	sp, #12
    fd40:	4616      	mov	r6, r2
    const char *first_string = argv[0];
    fd42:	680d      	ldr	r5, [r1, #0]
    int module = -1;
    fd44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fd48:	9301      	str	r3, [sp, #4]
    const struct shell_module *shell_module;
    const char *command;
    int i;

    if (!first_string || first_string[0] == '\0') {
    fd4a:	b31d      	cbz	r5, fd94 <shell_find_cmd+0x58>
    fd4c:	4607      	mov	r7, r0
    fd4e:	460c      	mov	r4, r1
    fd50:	782b      	ldrb	r3, [r5, #0]
    fd52:	b1fb      	cbz	r3, fd94 <shell_find_cmd+0x58>
        streamer_printf(streamer, "Illegal parameter\n");
        return NULL;
    }

    if (!strcmp(first_string, "help")) {
    fd54:	4922      	ldr	r1, [pc, #136]	; (fde0 <shell_find_cmd+0xa4>)
    fd56:	4628      	mov	r0, r5
    fd58:	f7fd fe7e 	bl	da58 <strcmp>
    fd5c:	2800      	cmp	r0, #0
    fd5e:	d035      	beq.n	fdcc <shell_find_cmd+0x90>
        return &shell_cmd_help;
    }

    if (!strcmp(first_string, "select")) {
    fd60:	4920      	ldr	r1, [pc, #128]	; (fde4 <shell_find_cmd+0xa8>)
    fd62:	4628      	mov	r0, r5
    fd64:	f7fd fe78 	bl	da58 <strcmp>
    fd68:	2800      	cmp	r0, #0
    fd6a:	d033      	beq.n	fdd4 <shell_find_cmd+0x98>
        return &shell_cmd_select_module;
    }

    if ((argc == 1) && (default_module == -1)) {
    fd6c:	2f01      	cmp	r7, #1
    fd6e:	d104      	bne.n	fd7a <shell_find_cmd+0x3e>
    fd70:	4b1d      	ldr	r3, [pc, #116]	; (fde8 <shell_find_cmd+0xac>)
    fd72:	681b      	ldr	r3, [r3, #0]
    fd74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    fd78:	d012      	beq.n	fda0 <shell_find_cmd+0x64>
        streamer_printf(streamer, "Missing parameter\n");
        return NULL;
    }

    command = get_command_and_module(argv, &module, streamer);
    fd7a:	4632      	mov	r2, r6
    fd7c:	a901      	add	r1, sp, #4
    fd7e:	4620      	mov	r0, r4
    fd80:	f7ff ffa0 	bl	fcc4 <get_command_and_module>
    fd84:	4606      	mov	r6, r0
    if ((module == -1) || (command == NULL)) {
    fd86:	9f01      	ldr	r7, [sp, #4]
    fd88:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
    fd8c:	d024      	beq.n	fdd8 <shell_find_cmd+0x9c>
    fd8e:	b328      	cbz	r0, fddc <shell_find_cmd+0xa0>
        return NULL;
    }

    shell_module = &shell_modules[module];
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
    fd90:	2500      	movs	r5, #0
    fd92:	e00c      	b.n	fdae <shell_find_cmd+0x72>
        streamer_printf(streamer, "Illegal parameter\n");
    fd94:	4915      	ldr	r1, [pc, #84]	; (fdec <shell_find_cmd+0xb0>)
    fd96:	4630      	mov	r0, r6
    fd98:	f002 fabf 	bl	1231a <streamer_printf>
        return NULL;
    fd9c:	2100      	movs	r1, #0
    fd9e:	e016      	b.n	fdce <shell_find_cmd+0x92>
        streamer_printf(streamer, "Missing parameter\n");
    fda0:	4913      	ldr	r1, [pc, #76]	; (fdf0 <shell_find_cmd+0xb4>)
    fda2:	4630      	mov	r0, r6
    fda4:	f002 fab9 	bl	1231a <streamer_printf>
        return NULL;
    fda8:	2100      	movs	r1, #0
    fdaa:	e010      	b.n	fdce <shell_find_cmd+0x92>
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
    fdac:	3501      	adds	r5, #1
    fdae:	4b11      	ldr	r3, [pc, #68]	; (fdf4 <shell_find_cmd+0xb8>)
    fdb0:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    fdb4:	685c      	ldr	r4, [r3, #4]
    fdb6:	eb04 1405 	add.w	r4, r4, r5, lsl #4
    fdba:	68a1      	ldr	r1, [r4, #8]
    fdbc:	b139      	cbz	r1, fdce <shell_find_cmd+0x92>
        if (!strcmp(command, shell_module->commands[i].sc_cmd)) {
    fdbe:	4630      	mov	r0, r6
    fdc0:	f7fd fe4a 	bl	da58 <strcmp>
    fdc4:	2800      	cmp	r0, #0
    fdc6:	d1f1      	bne.n	fdac <shell_find_cmd+0x70>
            return &shell_module->commands[i];
    fdc8:	4621      	mov	r1, r4
    fdca:	e000      	b.n	fdce <shell_find_cmd+0x92>
        return &shell_cmd_help;
    fdcc:	490a      	ldr	r1, [pc, #40]	; (fdf8 <shell_find_cmd+0xbc>)
        }
    }

    return NULL;
}
    fdce:	4608      	mov	r0, r1
    fdd0:	b003      	add	sp, #12
    fdd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return &shell_cmd_select_module;
    fdd4:	4909      	ldr	r1, [pc, #36]	; (fdfc <shell_find_cmd+0xc0>)
    fdd6:	e7fa      	b.n	fdce <shell_find_cmd+0x92>
        return NULL;
    fdd8:	2100      	movs	r1, #0
    fdda:	e7f8      	b.n	fdce <shell_find_cmd+0x92>
    fddc:	4601      	mov	r1, r0
    fdde:	e7f6      	b.n	fdce <shell_find_cmd+0x92>
    fde0:	00023378 	.word	0x00023378
    fde4:	00023380 	.word	0x00023380
    fde8:	20000620 	.word	0x20000620
    fdec:	00023364 	.word	0x00023364
    fdf0:	00023388 	.word	0x00023388
    fdf4:	200044bc 	.word	0x200044bc
    fdf8:	000234fc 	.word	0x000234fc
    fdfc:	0002350c 	.word	0x0002350c

0000fe00 <show_cmd_help>:
{
    fe00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fe04:	b083      	sub	sp, #12
    fe06:	4681      	mov	r9, r0
    fe08:	4688      	mov	r8, r1
    int module = -1;
    fe0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fe0e:	9301      	str	r3, [sp, #4]
    command = get_command_and_module(argv, &module, streamer);
    fe10:	460a      	mov	r2, r1
    fe12:	a901      	add	r1, sp, #4
    fe14:	f7ff ff56 	bl	fcc4 <get_command_and_module>
    if ((module == -1) || (command == NULL)) {
    fe18:	9f01      	ldr	r7, [sp, #4]
    fe1a:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
    fe1e:	d04d      	beq.n	febc <show_cmd_help+0xbc>
    fe20:	4606      	mov	r6, r0
    fe22:	2800      	cmp	r0, #0
    fe24:	d04a      	beq.n	febc <show_cmd_help+0xbc>
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
    fe26:	2500      	movs	r5, #0
    fe28:	e009      	b.n	fe3e <show_cmd_help+0x3e>
                               !cmd->help->usage &&
    fe2a:	6859      	ldr	r1, [r3, #4]
            if (!cmd->help || (!cmd->help->summary &&
    fe2c:	b9d9      	cbnz	r1, fe66 <show_cmd_help+0x66>
                               !cmd->help->params)) {
    fe2e:	689b      	ldr	r3, [r3, #8]
                               !cmd->help->usage &&
    fe30:	b9cb      	cbnz	r3, fe66 <show_cmd_help+0x66>
                streamer_printf(streamer, "(no help available)\n");
    fe32:	4924      	ldr	r1, [pc, #144]	; (fec4 <show_cmd_help+0xc4>)
    fe34:	4640      	mov	r0, r8
    fe36:	f002 fa70 	bl	1231a <streamer_printf>
                return 0;
    fe3a:	e03f      	b.n	febc <show_cmd_help+0xbc>
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
    fe3c:	3501      	adds	r5, #1
    fe3e:	4b22      	ldr	r3, [pc, #136]	; (fec8 <show_cmd_help+0xc8>)
    fe40:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    fe44:	685c      	ldr	r4, [r3, #4]
    fe46:	eb04 1405 	add.w	r4, r4, r5, lsl #4
    fe4a:	68a1      	ldr	r1, [r4, #8]
    fe4c:	2900      	cmp	r1, #0
    fe4e:	d02f      	beq.n	feb0 <show_cmd_help+0xb0>
        if (!strcmp(command, cmd->sc_cmd)) {
    fe50:	4630      	mov	r0, r6
    fe52:	f7fd fe01 	bl	da58 <strcmp>
    fe56:	2800      	cmp	r0, #0
    fe58:	d1f0      	bne.n	fe3c <show_cmd_help+0x3c>
            if (!cmd->help || (!cmd->help->summary &&
    fe5a:	68e3      	ldr	r3, [r4, #12]
    fe5c:	2b00      	cmp	r3, #0
    fe5e:	d0e8      	beq.n	fe32 <show_cmd_help+0x32>
    fe60:	681a      	ldr	r2, [r3, #0]
    fe62:	2a00      	cmp	r2, #0
    fe64:	d0e1      	beq.n	fe2a <show_cmd_help+0x2a>
            if (cmd->help->summary) {
    fe66:	b14a      	cbz	r2, fe7c <show_cmd_help+0x7c>
                streamer_printf(streamer, "Summary:\n");
    fe68:	4918      	ldr	r1, [pc, #96]	; (fecc <show_cmd_help+0xcc>)
    fe6a:	4640      	mov	r0, r8
    fe6c:	f002 fa55 	bl	1231a <streamer_printf>
                streamer_printf(streamer, "%s\n", cmd->help->summary);
    fe70:	68e3      	ldr	r3, [r4, #12]
    fe72:	681a      	ldr	r2, [r3, #0]
    fe74:	4916      	ldr	r1, [pc, #88]	; (fed0 <show_cmd_help+0xd0>)
    fe76:	4640      	mov	r0, r8
    fe78:	f002 fa4f 	bl	1231a <streamer_printf>
            if (cmd->help->usage) {
    fe7c:	68e3      	ldr	r3, [r4, #12]
    fe7e:	685b      	ldr	r3, [r3, #4]
    fe80:	b14b      	cbz	r3, fe96 <show_cmd_help+0x96>
                streamer_printf(streamer, "Usage:\n");
    fe82:	4914      	ldr	r1, [pc, #80]	; (fed4 <show_cmd_help+0xd4>)
    fe84:	4640      	mov	r0, r8
    fe86:	f002 fa48 	bl	1231a <streamer_printf>
                streamer_printf(streamer, "%s\n", cmd->help->usage);
    fe8a:	68e3      	ldr	r3, [r4, #12]
    fe8c:	685a      	ldr	r2, [r3, #4]
    fe8e:	4910      	ldr	r1, [pc, #64]	; (fed0 <show_cmd_help+0xd0>)
    fe90:	4640      	mov	r0, r8
    fe92:	f002 fa42 	bl	1231a <streamer_printf>
            if (cmd->help->params) {
    fe96:	68e3      	ldr	r3, [r4, #12]
    fe98:	689b      	ldr	r3, [r3, #8]
    fe9a:	b17b      	cbz	r3, febc <show_cmd_help+0xbc>
                streamer_printf(streamer, "Parameters:\n");
    fe9c:	490e      	ldr	r1, [pc, #56]	; (fed8 <show_cmd_help+0xd8>)
    fe9e:	4640      	mov	r0, r8
    fea0:	f002 fa3b 	bl	1231a <streamer_printf>
                print_command_params(module, i, streamer);
    fea4:	4642      	mov	r2, r8
    fea6:	4629      	mov	r1, r5
    fea8:	9801      	ldr	r0, [sp, #4]
    feaa:	f7ff fea5 	bl	fbf8 <print_command_params>
            return 0;
    feae:	e005      	b.n	febc <show_cmd_help+0xbc>
    streamer_printf(streamer, "Unrecognized command: %s\n", argv[0]);
    feb0:	f8d9 2000 	ldr.w	r2, [r9]
    feb4:	4909      	ldr	r1, [pc, #36]	; (fedc <show_cmd_help+0xdc>)
    feb6:	4640      	mov	r0, r8
    feb8:	f002 fa2f 	bl	1231a <streamer_printf>
}
    febc:	2000      	movs	r0, #0
    febe:	b003      	add	sp, #12
    fec0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    fec4:	0002339c 	.word	0x0002339c
    fec8:	200044bc 	.word	0x200044bc
    fecc:	000233b4 	.word	0x000233b4
    fed0:	000235cc 	.word	0x000235cc
    fed4:	000233c0 	.word	0x000233c0
    fed8:	000233c8 	.word	0x000233c8
    fedc:	00023334 	.word	0x00023334

0000fee0 <show_help>:
{
    fee0:	b538      	push	{r3, r4, r5, lr}
    fee2:	461c      	mov	r4, r3
    if ((argc > 2) || ((default_module != -1) && (argc == 2))) {
    fee4:	2902      	cmp	r1, #2
    fee6:	dc1a      	bgt.n	ff1e <show_help+0x3e>
    fee8:	4b1b      	ldr	r3, [pc, #108]	; (ff58 <show_help+0x78>)
    feea:	6818      	ldr	r0, [r3, #0]
    feec:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    fef0:	d001      	beq.n	fef6 <show_help+0x16>
    fef2:	2902      	cmp	r1, #2
    fef4:	d013      	beq.n	ff1e <show_help+0x3e>
    if ((argc == 2) || ((default_module != -1) && (argc == 1))) {
    fef6:	2902      	cmp	r1, #2
    fef8:	d016      	beq.n	ff28 <show_help+0x48>
    fefa:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    fefe:	d001      	beq.n	ff04 <show_help+0x24>
    ff00:	2901      	cmp	r1, #1
    ff02:	d011      	beq.n	ff28 <show_help+0x48>
        streamer_printf(streamer, "Available modules:\n");
    ff04:	4915      	ldr	r1, [pc, #84]	; (ff5c <show_help+0x7c>)
    ff06:	4620      	mov	r0, r4
    ff08:	f002 fa07 	bl	1231a <streamer_printf>
        print_modules(streamer);
    ff0c:	4620      	mov	r0, r4
    ff0e:	f7ff fe5b 	bl	fbc8 <print_modules>
        streamer_printf(streamer,
    ff12:	4913      	ldr	r1, [pc, #76]	; (ff60 <show_help+0x80>)
    ff14:	4620      	mov	r0, r4
    ff16:	f002 fa00 	bl	1231a <streamer_printf>
    return 0;
    ff1a:	2000      	movs	r0, #0
    ff1c:	e014      	b.n	ff48 <show_help+0x68>
        return show_cmd_help(&argv[1], streamer);
    ff1e:	4621      	mov	r1, r4
    ff20:	1d10      	adds	r0, r2, #4
    ff22:	f7ff ff6d 	bl	fe00 <show_cmd_help>
    ff26:	e00f      	b.n	ff48 <show_help+0x68>
        if (default_module == -1) {
    ff28:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    ff2c:	d108      	bne.n	ff40 <show_help+0x60>
            module = get_destination_module(argv[1], -1);
    ff2e:	6855      	ldr	r5, [r2, #4]
    ff30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ff34:	4628      	mov	r0, r5
    ff36:	f7ff fe81 	bl	fc3c <get_destination_module>
            if (module == -1) {
    ff3a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    ff3e:	d004      	beq.n	ff4a <show_help+0x6a>
        print_module_commands(module, streamer);
    ff40:	4621      	mov	r1, r4
    ff42:	f7ff fe0b 	bl	fb5c <print_module_commands>
    return 0;
    ff46:	2000      	movs	r0, #0
}
    ff48:	bd38      	pop	{r3, r4, r5, pc}
                streamer_printf(streamer, "Illegal module %s\n", argv[1]);
    ff4a:	462a      	mov	r2, r5
    ff4c:	4905      	ldr	r1, [pc, #20]	; (ff64 <show_help+0x84>)
    ff4e:	4620      	mov	r0, r4
    ff50:	f002 f9e3 	bl	1231a <streamer_printf>
                return 0;
    ff54:	2000      	movs	r0, #0
    ff56:	e7f7      	b.n	ff48 <show_help+0x68>
    ff58:	20000620 	.word	0x20000620
    ff5c:	000233d8 	.word	0x000233d8
    ff60:	000233ec 	.word	0x000233ec
    ff64:	00023350 	.word	0x00023350

0000ff68 <print_prompt>:
{
    ff68:	b508      	push	{r3, lr}
    console_printf("%s%s", get_prompt(), MYNEWT_VAL(SHELL_PROMPT_SUFFIX));
    ff6a:	f7ff fddb 	bl	fb24 <get_prompt>
    ff6e:	4601      	mov	r1, r0
    ff70:	4a02      	ldr	r2, [pc, #8]	; (ff7c <print_prompt+0x14>)
    ff72:	4803      	ldr	r0, [pc, #12]	; (ff80 <print_prompt+0x18>)
    ff74:	f7ff fd0e 	bl	f994 <console_printf>
}
    ff78:	bd08      	pop	{r3, pc}
    ff7a:	bf00      	nop
    ff7c:	00023420 	.word	0x00023420
    ff80:	00023424 	.word	0x00023424

0000ff84 <print_prompt_if_console>:
{
    ff84:	b510      	push	{r4, lr}
    ff86:	4604      	mov	r4, r0
    if (streamer == streamer_console_get()) {
    ff88:	f002 f9e2 	bl	12350 <streamer_console_get>
    ff8c:	4284      	cmp	r4, r0
    ff8e:	d000      	beq.n	ff92 <print_prompt_if_console+0xe>
}
    ff90:	bd10      	pop	{r4, pc}
        print_prompt();
    ff92:	f7ff ffe9 	bl	ff68 <print_prompt>
}
    ff96:	e7fb      	b.n	ff90 <print_prompt_if_console+0xc>

0000ff98 <complete_module>:
}

static void
complete_module(char *line, char *module_prefix,
                int module_len, console_append_char_cb append_char)
{
    ff98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ff9c:	b083      	sub	sp, #12
    ff9e:	4681      	mov	r9, r0
    ffa0:	9101      	str	r1, [sp, #4]
    int i, j;
    const char *first_match = NULL;
    int common_chars = -1, space = 0;

    if (!module_len) {
    ffa2:	4615      	mov	r5, r2
    ffa4:	b132      	cbz	r2, ffb4 <complete_module+0x1c>
    ffa6:	469a      	mov	sl, r3
    int common_chars = -1, space = 0;
    ffa8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    const char *first_match = NULL;
    ffac:	f04f 0800 	mov.w	r8, #0
        print_prompt();
        console_printf("%s", line);
        return;
    }

    for (i = 0; i < num_of_shell_entities; i++) {
    ffb0:	4646      	mov	r6, r8
    ffb2:	e02b      	b.n	1000c <complete_module+0x74>
        console_printf("\n");
    ffb4:	4837      	ldr	r0, [pc, #220]	; (10094 <complete_module+0xfc>)
    ffb6:	f7ff fced 	bl	f994 <console_printf>
        for (i = 0; i < num_of_shell_entities; i++) {
    ffba:	e006      	b.n	ffca <complete_module+0x32>
            console_printf("%s\n", shell_modules[i].name);
    ffbc:	4b36      	ldr	r3, [pc, #216]	; (10098 <complete_module+0x100>)
    ffbe:	f853 1035 	ldr.w	r1, [r3, r5, lsl #3]
    ffc2:	4836      	ldr	r0, [pc, #216]	; (1009c <complete_module+0x104>)
    ffc4:	f7ff fce6 	bl	f994 <console_printf>
        for (i = 0; i < num_of_shell_entities; i++) {
    ffc8:	3501      	adds	r5, #1
    ffca:	4b35      	ldr	r3, [pc, #212]	; (100a0 <complete_module+0x108>)
    ffcc:	681b      	ldr	r3, [r3, #0]
    ffce:	429d      	cmp	r5, r3
    ffd0:	d3f4      	bcc.n	ffbc <complete_module+0x24>
        print_prompt();
    ffd2:	f7ff ffc9 	bl	ff68 <print_prompt>
        console_printf("%s", line);
    ffd6:	4649      	mov	r1, r9
    ffd8:	4832      	ldr	r0, [pc, #200]	; (100a4 <complete_module+0x10c>)
    ffda:	f7ff fcdb 	bl	f994 <console_printf>

    /* for convenience add space after command */
    if (space) {
        append_char(line, ' ');
    }
}
    ffde:	b003      	add	sp, #12
    ffe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            console_printf("\n");
    ffe4:	482b      	ldr	r0, [pc, #172]	; (10094 <complete_module+0xfc>)
    ffe6:	f7ff fcd5 	bl	f994 <console_printf>
            console_printf("%s\n", first_match);
    ffea:	4641      	mov	r1, r8
    ffec:	482b      	ldr	r0, [pc, #172]	; (1009c <complete_module+0x104>)
    ffee:	f7ff fcd1 	bl	f994 <console_printf>
            common_chars = strlen(first_match);
    fff2:	4640      	mov	r0, r8
    fff4:	f7fd fd3c 	bl	da70 <strlen>
    fff8:	4607      	mov	r7, r0
        for (j = 0; j < common_chars; j++) {
    fffa:	e01b      	b.n	10034 <complete_module+0x9c>
        console_printf("%s\n", shell_modules[i].name);
    fffc:	4b26      	ldr	r3, [pc, #152]	; (10098 <complete_module+0x100>)
    fffe:	f853 1036 	ldr.w	r1, [r3, r6, lsl #3]
   10002:	4826      	ldr	r0, [pc, #152]	; (1009c <complete_module+0x104>)
   10004:	f7ff fcc6 	bl	f994 <console_printf>
        common_chars = j;
   10008:	4627      	mov	r7, r4
    for (i = 0; i < num_of_shell_entities; i++) {
   1000a:	3601      	adds	r6, #1
   1000c:	4b24      	ldr	r3, [pc, #144]	; (100a0 <complete_module+0x108>)
   1000e:	681b      	ldr	r3, [r3, #0]
   10010:	429e      	cmp	r6, r3
   10012:	d21d      	bcs.n	10050 <complete_module+0xb8>
        if (strncmp(module_prefix,
   10014:	4b20      	ldr	r3, [pc, #128]	; (10098 <complete_module+0x100>)
   10016:	f853 b036 	ldr.w	fp, [r3, r6, lsl #3]
   1001a:	462a      	mov	r2, r5
   1001c:	4659      	mov	r1, fp
   1001e:	9801      	ldr	r0, [sp, #4]
   10020:	f00c f9fb 	bl	1c41a <strncmp>
   10024:	4604      	mov	r4, r0
   10026:	2800      	cmp	r0, #0
   10028:	d1ef      	bne.n	1000a <complete_module+0x72>
        if (!first_match) {
   1002a:	f1b8 0f00 	cmp.w	r8, #0
   1002e:	d00d      	beq.n	1004c <complete_module+0xb4>
        if (first_match && (common_chars < 0)) {
   10030:	2f00      	cmp	r7, #0
   10032:	dbd7      	blt.n	ffe4 <complete_module+0x4c>
        for (j = 0; j < common_chars; j++) {
   10034:	42bc      	cmp	r4, r7
   10036:	dae1      	bge.n	fffc <complete_module+0x64>
            if (first_match[j] != shell_modules[i].name[j]) {
   10038:	f818 2004 	ldrb.w	r2, [r8, r4]
   1003c:	4b16      	ldr	r3, [pc, #88]	; (10098 <complete_module+0x100>)
   1003e:	f853 3036 	ldr.w	r3, [r3, r6, lsl #3]
   10042:	5d1b      	ldrb	r3, [r3, r4]
   10044:	429a      	cmp	r2, r3
   10046:	d1d9      	bne.n	fffc <complete_module+0x64>
        for (j = 0; j < common_chars; j++) {
   10048:	3401      	adds	r4, #1
   1004a:	e7f3      	b.n	10034 <complete_module+0x9c>
            first_match = shell_modules[i].name;
   1004c:	46d8      	mov	r8, fp
   1004e:	e7dc      	b.n	1000a <complete_module+0x72>
    if (!first_match) {
   10050:	f1b8 0f00 	cmp.w	r8, #0
   10054:	d0c3      	beq.n	ffde <complete_module+0x46>
    if (common_chars >= 0) {
   10056:	2f00      	cmp	r7, #0
   10058:	da0e      	bge.n	10078 <complete_module+0xe0>
        common_chars = strlen(first_match);
   1005a:	4640      	mov	r0, r8
   1005c:	f7fd fd08 	bl	da70 <strlen>
   10060:	4607      	mov	r7, r0
        space = 1;
   10062:	2401      	movs	r4, #1
    for (i = module_len; i < common_chars; i++) {
   10064:	42bd      	cmp	r5, r7
   10066:	da0f      	bge.n	10088 <complete_module+0xf0>
        if (!append_char(line, first_match[i])) {
   10068:	f818 1005 	ldrb.w	r1, [r8, r5]
   1006c:	4648      	mov	r0, r9
   1006e:	47d0      	blx	sl
   10070:	2800      	cmp	r0, #0
   10072:	d0b4      	beq.n	ffde <complete_module+0x46>
    for (i = module_len; i < common_chars; i++) {
   10074:	3501      	adds	r5, #1
   10076:	e7f5      	b.n	10064 <complete_module+0xcc>
        print_prompt();
   10078:	f7ff ff76 	bl	ff68 <print_prompt>
        console_printf("%s", line);
   1007c:	4649      	mov	r1, r9
   1007e:	4809      	ldr	r0, [pc, #36]	; (100a4 <complete_module+0x10c>)
   10080:	f7ff fc88 	bl	f994 <console_printf>
    int common_chars = -1, space = 0;
   10084:	2400      	movs	r4, #0
   10086:	e7ed      	b.n	10064 <complete_module+0xcc>
    if (space) {
   10088:	2c00      	cmp	r4, #0
   1008a:	d0a8      	beq.n	ffde <complete_module+0x46>
        append_char(line, ' ');
   1008c:	2120      	movs	r1, #32
   1008e:	4648      	mov	r0, r9
   10090:	47d0      	blx	sl
   10092:	e7a4      	b.n	ffde <complete_module+0x46>
   10094:	000233bc 	.word	0x000233bc
   10098:	200044bc 	.word	0x200044bc
   1009c:	000235cc 	.word	0x000235cc
   100a0:	20004490 	.word	0x20004490
   100a4:	00023278 	.word	0x00023278

000100a8 <complete_command>:
{
   100a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   100ac:	b083      	sub	sp, #12
   100ae:	9001      	str	r0, [sp, #4]
   100b0:	468b      	mov	fp, r1
   100b2:	4615      	mov	r5, r2
    commands = shell_modules[module_idx].commands;
   100b4:	4a3a      	ldr	r2, [pc, #232]	; (101a0 <complete_command+0xf8>)
   100b6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   100ba:	6857      	ldr	r7, [r2, #4]
    int i, j, common_chars = -1;
   100bc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    for (i = 0; commands[i].sc_cmd; i++) {
   100c0:	f04f 0900 	mov.w	r9, #0
    int match_count = 0;
   100c4:	46ca      	mov	sl, r9
    int first_match = -1;
   100c6:	46b0      	mov	r8, r6
    for (i = 0; commands[i].sc_cmd; i++) {
   100c8:	e006      	b.n	100d8 <complete_command+0x30>
            common_chars = strlen(commands[i].sc_cmd);
   100ca:	4620      	mov	r0, r4
   100cc:	f7fd fcd0 	bl	da70 <strlen>
   100d0:	4606      	mov	r6, r0
            first_match = i;
   100d2:	46c8      	mov	r8, r9
    for (i = 0; commands[i].sc_cmd; i++) {
   100d4:	f109 0901 	add.w	r9, r9, #1
   100d8:	eb07 1309 	add.w	r3, r7, r9, lsl #4
   100dc:	689c      	ldr	r4, [r3, #8]
   100de:	b1ec      	cbz	r4, 1011c <complete_command+0x74>
        if (0 != strncmp(command_prefix, commands[i].sc_cmd, command_len)) {
   100e0:	462a      	mov	r2, r5
   100e2:	4621      	mov	r1, r4
   100e4:	4658      	mov	r0, fp
   100e6:	f00c f998 	bl	1c41a <strncmp>
   100ea:	2800      	cmp	r0, #0
   100ec:	d1f2      	bne.n	100d4 <complete_command+0x2c>
        match_count++;
   100ee:	f10a 0a01 	add.w	sl, sl, #1
        if (match_count == 1) {
   100f2:	f1ba 0f01 	cmp.w	sl, #1
   100f6:	d0e8      	beq.n	100ca <complete_command+0x22>
        if (common_chars <= command_len) {
   100f8:	42ae      	cmp	r6, r5
   100fa:	ddeb      	ble.n	100d4 <complete_command+0x2c>
        for (j = command_len; j < common_chars; j++) {
   100fc:	462b      	mov	r3, r5
   100fe:	42b3      	cmp	r3, r6
   10100:	da08      	bge.n	10114 <complete_command+0x6c>
            if (commands[first_match].sc_cmd[j] != commands[i].sc_cmd[j]) {
   10102:	eb07 1208 	add.w	r2, r7, r8, lsl #4
   10106:	6892      	ldr	r2, [r2, #8]
   10108:	5cd1      	ldrb	r1, [r2, r3]
   1010a:	5ce2      	ldrb	r2, [r4, r3]
   1010c:	4291      	cmp	r1, r2
   1010e:	d103      	bne.n	10118 <complete_command+0x70>
        for (j = command_len; j < common_chars; j++) {
   10110:	3301      	adds	r3, #1
   10112:	e7f4      	b.n	100fe <complete_command+0x56>
        common_chars = j;
   10114:	461e      	mov	r6, r3
   10116:	e7dd      	b.n	100d4 <complete_command+0x2c>
   10118:	461e      	mov	r6, r3
   1011a:	e7db      	b.n	100d4 <complete_command+0x2c>
    if (match_count == 0) {
   1011c:	f1ba 0f00 	cmp.w	sl, #0
   10120:	d03b      	beq.n	1019a <complete_command+0xf2>
    if (common_chars > command_len) {
   10122:	42ae      	cmp	r6, r5
   10124:	dd15      	ble.n	10152 <complete_command+0xaa>
   10126:	9c01      	ldr	r4, [sp, #4]
   10128:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
        for (i = command_len; i < common_chars; i++) {
   1012c:	42b5      	cmp	r5, r6
   1012e:	da08      	bge.n	10142 <complete_command+0x9a>
            if (!append_char(line, (uint8_t)commands[first_match].sc_cmd[i])) {
   10130:	eb07 1308 	add.w	r3, r7, r8, lsl #4
   10134:	689b      	ldr	r3, [r3, #8]
   10136:	5d59      	ldrb	r1, [r3, r5]
   10138:	4620      	mov	r0, r4
   1013a:	47c8      	blx	r9
   1013c:	b368      	cbz	r0, 1019a <complete_command+0xf2>
        for (i = command_len; i < common_chars; i++) {
   1013e:	3501      	adds	r5, #1
   10140:	e7f4      	b.n	1012c <complete_command+0x84>
        if (match_count == 1) {
   10142:	f1ba 0f01 	cmp.w	sl, #1
   10146:	d128      	bne.n	1019a <complete_command+0xf2>
            append_char(line, ' ');
   10148:	2120      	movs	r1, #32
   1014a:	9801      	ldr	r0, [sp, #4]
   1014c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1014e:	4798      	blx	r3
        return;
   10150:	e023      	b.n	1019a <complete_command+0xf2>
    console_printf("\n");
   10152:	4814      	ldr	r0, [pc, #80]	; (101a4 <complete_command+0xfc>)
   10154:	f7ff fc1e 	bl	f994 <console_printf>
    console_printf("%s\n", commands[first_match].sc_cmd);
   10158:	eb07 1308 	add.w	r3, r7, r8, lsl #4
   1015c:	6899      	ldr	r1, [r3, #8]
   1015e:	4812      	ldr	r0, [pc, #72]	; (101a8 <complete_command+0x100>)
   10160:	f7ff fc18 	bl	f994 <console_printf>
    for (i = first_match + 1; commands[i].sc_cmd; i++) {
   10164:	f108 0801 	add.w	r8, r8, #1
   10168:	e001      	b.n	1016e <complete_command+0xc6>
   1016a:	f108 0801 	add.w	r8, r8, #1
   1016e:	eb07 1308 	add.w	r3, r7, r8, lsl #4
   10172:	689c      	ldr	r4, [r3, #8]
   10174:	b15c      	cbz	r4, 1018e <complete_command+0xe6>
        if (0 == strncmp(command_prefix, commands[i].sc_cmd, command_len)) {
   10176:	462a      	mov	r2, r5
   10178:	4621      	mov	r1, r4
   1017a:	4658      	mov	r0, fp
   1017c:	f00c f94d 	bl	1c41a <strncmp>
   10180:	2800      	cmp	r0, #0
   10182:	d1f2      	bne.n	1016a <complete_command+0xc2>
            console_printf("%s\n", commands[i].sc_cmd);
   10184:	4621      	mov	r1, r4
   10186:	4808      	ldr	r0, [pc, #32]	; (101a8 <complete_command+0x100>)
   10188:	f7ff fc04 	bl	f994 <console_printf>
   1018c:	e7ed      	b.n	1016a <complete_command+0xc2>
    print_prompt();
   1018e:	f7ff feeb 	bl	ff68 <print_prompt>
    console_printf("%s", line);
   10192:	9901      	ldr	r1, [sp, #4]
   10194:	4805      	ldr	r0, [pc, #20]	; (101ac <complete_command+0x104>)
   10196:	f7ff fbfd 	bl	f994 <console_printf>
}
   1019a:	b003      	add	sp, #12
   1019c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   101a0:	200044bc 	.word	0x200044bc
   101a4:	000233bc 	.word	0x000233bc
   101a8:	000235cc 	.word	0x000235cc
   101ac:	00023278 	.word	0x00023278

000101b0 <get_command_from_module>:
{
   101b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   101b4:	4680      	mov	r8, r0
   101b6:	460d      	mov	r5, r1
   101b8:	4616      	mov	r6, r2
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   101ba:	2400      	movs	r4, #0
   101bc:	e000      	b.n	101c0 <get_command_from_module+0x10>
   101be:	3401      	adds	r4, #1
   101c0:	4b0c      	ldr	r3, [pc, #48]	; (101f4 <get_command_from_module+0x44>)
   101c2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   101c6:	685b      	ldr	r3, [r3, #4]
   101c8:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   101cc:	689f      	ldr	r7, [r3, #8]
   101ce:	b167      	cbz	r7, 101ea <get_command_from_module+0x3a>
        if (strlen(shell_module->commands[i].sc_cmd) != len) {
   101d0:	4638      	mov	r0, r7
   101d2:	f7fd fc4d 	bl	da70 <strlen>
   101d6:	42a8      	cmp	r0, r5
   101d8:	d1f1      	bne.n	101be <get_command_from_module+0xe>
        if (!strncmp(command, shell_module->commands[i].sc_cmd, len)) {
   101da:	462a      	mov	r2, r5
   101dc:	4639      	mov	r1, r7
   101de:	4640      	mov	r0, r8
   101e0:	f00c f91b 	bl	1c41a <strncmp>
   101e4:	2800      	cmp	r0, #0
   101e6:	d1ea      	bne.n	101be <get_command_from_module+0xe>
   101e8:	e001      	b.n	101ee <get_command_from_module+0x3e>
    return -1;
   101ea:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   101ee:	4620      	mov	r0, r4
   101f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   101f4:	200044bc 	.word	0x200044bc

000101f8 <complete_param>:
{
   101f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   101fc:	b083      	sub	sp, #12
   101fe:	9001      	str	r0, [sp, #4]
   10200:	9100      	str	r1, [sp, #0]
   10202:	4691      	mov	r9, r2
    command = &shell_modules[module_idx].commands[command_idx];
   10204:	4a34      	ldr	r2, [pc, #208]	; (102d8 <complete_param+0xe0>)
   10206:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   1020a:	6857      	ldr	r7, [r2, #4]
   1020c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1020e:	eb07 1703 	add.w	r7, r7, r3, lsl #4
    if (!(command->help && command->help->params)) {
   10212:	68fb      	ldr	r3, [r7, #12]
   10214:	2b00      	cmp	r3, #0
   10216:	d05c      	beq.n	102d2 <complete_param+0xda>
   10218:	689b      	ldr	r3, [r3, #8]
   1021a:	2b00      	cmp	r3, #0
   1021c:	d059      	beq.n	102d2 <complete_param+0xda>
    int i, j, common_chars = -1;
   1021e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    for (i = 0; command->help->params[i].param_name; i++) {
   10222:	f04f 0a00 	mov.w	sl, #0
    const char *first_match = NULL;
   10226:	4656      	mov	r6, sl
   10228:	e015      	b.n	10256 <complete_param+0x5e>
            console_printf("\n");
   1022a:	482c      	ldr	r0, [pc, #176]	; (102dc <complete_param+0xe4>)
   1022c:	f7ff fbb2 	bl	f994 <console_printf>
            console_printf("%s\n", first_match);
   10230:	4631      	mov	r1, r6
   10232:	482b      	ldr	r0, [pc, #172]	; (102e0 <complete_param+0xe8>)
   10234:	f7ff fbae 	bl	f994 <console_printf>
            common_chars = strlen(first_match);
   10238:	4630      	mov	r0, r6
   1023a:	f7fd fc19 	bl	da70 <strlen>
   1023e:	4605      	mov	r5, r0
        for (j = 0; j < common_chars; j++) {
   10240:	e01d      	b.n	1027e <complete_param+0x86>
        console_printf("%s\n", command->help->params[i].param_name);
   10242:	68fb      	ldr	r3, [r7, #12]
   10244:	689b      	ldr	r3, [r3, #8]
   10246:	f853 1008 	ldr.w	r1, [r3, r8]
   1024a:	4825      	ldr	r0, [pc, #148]	; (102e0 <complete_param+0xe8>)
   1024c:	f7ff fba2 	bl	f994 <console_printf>
        common_chars = j;
   10250:	4625      	mov	r5, r4
    for (i = 0; command->help->params[i].param_name; i++) {
   10252:	f10a 0a01 	add.w	sl, sl, #1
   10256:	68fb      	ldr	r3, [r7, #12]
   10258:	689b      	ldr	r3, [r3, #8]
   1025a:	ea4f 08ca 	mov.w	r8, sl, lsl #3
   1025e:	f853 b03a 	ldr.w	fp, [r3, sl, lsl #3]
   10262:	f1bb 0f00 	cmp.w	fp, #0
   10266:	d018      	beq.n	1029a <complete_param+0xa2>
        if (strncmp(param_prefix,
   10268:	464a      	mov	r2, r9
   1026a:	4659      	mov	r1, fp
   1026c:	9800      	ldr	r0, [sp, #0]
   1026e:	f00c f8d4 	bl	1c41a <strncmp>
   10272:	4604      	mov	r4, r0
   10274:	2800      	cmp	r0, #0
   10276:	d1ec      	bne.n	10252 <complete_param+0x5a>
        if (!first_match) {
   10278:	b16e      	cbz	r6, 10296 <complete_param+0x9e>
        if (first_match && (common_chars < 0)) {
   1027a:	2d00      	cmp	r5, #0
   1027c:	dbd5      	blt.n	1022a <complete_param+0x32>
        for (j = 0; j < common_chars; j++) {
   1027e:	42ac      	cmp	r4, r5
   10280:	dadf      	bge.n	10242 <complete_param+0x4a>
            if (first_match[j] != command->help->params[i].param_name[j]) {
   10282:	5d32      	ldrb	r2, [r6, r4]
   10284:	68fb      	ldr	r3, [r7, #12]
   10286:	689b      	ldr	r3, [r3, #8]
   10288:	f853 3008 	ldr.w	r3, [r3, r8]
   1028c:	5d1b      	ldrb	r3, [r3, r4]
   1028e:	429a      	cmp	r2, r3
   10290:	d1d7      	bne.n	10242 <complete_param+0x4a>
        for (j = 0; j < common_chars; j++) {
   10292:	3401      	adds	r4, #1
   10294:	e7f3      	b.n	1027e <complete_param+0x86>
            first_match = command->help->params[i].param_name;
   10296:	465e      	mov	r6, fp
   10298:	e7db      	b.n	10252 <complete_param+0x5a>
    if (!first_match) {
   1029a:	b1d6      	cbz	r6, 102d2 <complete_param+0xda>
    if (common_chars >= 0) {
   1029c:	2d00      	cmp	r5, #0
   1029e:	da0f      	bge.n	102c0 <complete_param+0xc8>
        common_chars = strlen(first_match);
   102a0:	4630      	mov	r0, r6
   102a2:	f7fd fbe5 	bl	da70 <strlen>
   102a6:	4605      	mov	r5, r0
    for (i = param_len; i < common_chars; i++) {
   102a8:	9c01      	ldr	r4, [sp, #4]
   102aa:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   102ac:	45a9      	cmp	r9, r5
   102ae:	da10      	bge.n	102d2 <complete_param+0xda>
        if (!append_char(line, first_match[i])) {
   102b0:	f816 1009 	ldrb.w	r1, [r6, r9]
   102b4:	4620      	mov	r0, r4
   102b6:	47b8      	blx	r7
   102b8:	b158      	cbz	r0, 102d2 <complete_param+0xda>
    for (i = param_len; i < common_chars; i++) {
   102ba:	f109 0901 	add.w	r9, r9, #1
   102be:	e7f5      	b.n	102ac <complete_param+0xb4>
        print_prompt();
   102c0:	f7ff fe52 	bl	ff68 <print_prompt>
        console_printf("%s", line);
   102c4:	9c01      	ldr	r4, [sp, #4]
   102c6:	4621      	mov	r1, r4
   102c8:	4806      	ldr	r0, [pc, #24]	; (102e4 <complete_param+0xec>)
   102ca:	f7ff fb63 	bl	f994 <console_printf>
   102ce:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   102d0:	e7ec      	b.n	102ac <complete_param+0xb4>
}
   102d2:	b003      	add	sp, #12
   102d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   102d8:	200044bc 	.word	0x200044bc
   102dc:	000233bc 	.word	0x000233bc
   102e0:	000235cc 	.word	0x000235cc
   102e4:	00023278 	.word	0x00023278

000102e8 <get_token>:
{
   102e8:	b570      	push	{r4, r5, r6, lr}
   102ea:	4605      	mov	r5, r0
   102ec:	460e      	mov	r6, r1
    char *str = *cur;
   102ee:	6804      	ldr	r4, [r0, #0]
    *null_terminated = 0;
   102f0:	2300      	movs	r3, #0
   102f2:	600b      	str	r3, [r1, #0]
    while (*str && *str == ' ') {
   102f4:	e000      	b.n	102f8 <get_token+0x10>
        str++;
   102f6:	3401      	adds	r4, #1
    while (*str && *str == ' ') {
   102f8:	7823      	ldrb	r3, [r4, #0]
   102fa:	2b20      	cmp	r3, #32
   102fc:	d0fb      	beq.n	102f6 <get_token+0xe>
    if (*str == '\0') {
   102fe:	b13b      	cbz	r3, 10310 <get_token+0x28>
    *cur = str;
   10300:	602c      	str	r4, [r5, #0]
    str = strchr(str, ' ');
   10302:	2120      	movs	r1, #32
   10304:	4620      	mov	r0, r4
   10306:	f00c f872 	bl	1c3ee <strchr>
    if (str == NULL) {
   1030a:	b128      	cbz	r0, 10318 <get_token+0x30>
    return str - *cur;
   1030c:	1b00      	subs	r0, r0, r4
}
   1030e:	bd70      	pop	{r4, r5, r6, pc}
        *null_terminated = 1;
   10310:	2301      	movs	r3, #1
   10312:	6033      	str	r3, [r6, #0]
        return 0;
   10314:	2000      	movs	r0, #0
   10316:	e7fa      	b.n	1030e <get_token+0x26>
        *null_terminated = 1;
   10318:	2301      	movs	r3, #1
   1031a:	6033      	str	r3, [r6, #0]
        return strlen(*cur);
   1031c:	6828      	ldr	r0, [r5, #0]
   1031e:	f7fd fba7 	bl	da70 <strlen>
   10322:	e7f4      	b.n	1030e <get_token+0x26>

00010324 <complete_select>:

static void
complete_select(char *line, char *cur,
                int tok_len, console_append_char_cb append_char)
{
   10324:	b530      	push	{r4, r5, lr}
   10326:	b085      	sub	sp, #20
   10328:	4604      	mov	r4, r0
   1032a:	9101      	str	r1, [sp, #4]
   1032c:	461d      	mov	r5, r3
    int null_terminated = 0;
   1032e:	2000      	movs	r0, #0
   10330:	9003      	str	r0, [sp, #12]

    cur += tok_len + 1;
   10332:	3201      	adds	r2, #1
   10334:	4411      	add	r1, r2
   10336:	9101      	str	r1, [sp, #4]
    tok_len = get_token(&cur, &null_terminated);
   10338:	a903      	add	r1, sp, #12
   1033a:	a801      	add	r0, sp, #4
   1033c:	f7ff ffd4 	bl	102e8 <get_token>
    if (tok_len == 0) {
   10340:	b9a0      	cbnz	r0, 1036c <complete_select+0x48>
        if (default_module != -1) {
   10342:	4b12      	ldr	r3, [pc, #72]	; (1038c <complete_select+0x68>)
   10344:	681b      	ldr	r3, [r3, #0]
   10346:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1034a:	d001      	beq.n	10350 <complete_select+0x2c>
    if (null_terminated) {
        if (default_module == -1) {
            complete_module(line, cur, tok_len, append_char);
        }
    }
}
   1034c:	b005      	add	sp, #20
   1034e:	bd30      	pop	{r4, r5, pc}
        console_printf("\n");
   10350:	480f      	ldr	r0, [pc, #60]	; (10390 <complete_select+0x6c>)
   10352:	f7ff fb1f 	bl	f994 <console_printf>
        print_modules(streamer_console_get());
   10356:	f001 fffb 	bl	12350 <streamer_console_get>
   1035a:	f7ff fc35 	bl	fbc8 <print_modules>
        print_prompt();
   1035e:	f7ff fe03 	bl	ff68 <print_prompt>
        console_printf("%s", line);
   10362:	4621      	mov	r1, r4
   10364:	480b      	ldr	r0, [pc, #44]	; (10394 <complete_select+0x70>)
   10366:	f7ff fb15 	bl	f994 <console_printf>
        return;
   1036a:	e7ef      	b.n	1034c <complete_select+0x28>
   1036c:	4602      	mov	r2, r0
    if (null_terminated) {
   1036e:	9b03      	ldr	r3, [sp, #12]
   10370:	2b00      	cmp	r3, #0
   10372:	d0eb      	beq.n	1034c <complete_select+0x28>
        if (default_module == -1) {
   10374:	4b05      	ldr	r3, [pc, #20]	; (1038c <complete_select+0x68>)
   10376:	681b      	ldr	r3, [r3, #0]
   10378:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1037c:	d1e6      	bne.n	1034c <complete_select+0x28>
            complete_module(line, cur, tok_len, append_char);
   1037e:	462b      	mov	r3, r5
   10380:	9901      	ldr	r1, [sp, #4]
   10382:	4620      	mov	r0, r4
   10384:	f7ff fe08 	bl	ff98 <complete_module>
   10388:	e7e0      	b.n	1034c <complete_select+0x28>
   1038a:	bf00      	nop
   1038c:	20000620 	.word	0x20000620
   10390:	000233bc 	.word	0x000233bc
   10394:	00023278 	.word	0x00023278

00010398 <line2argv>:
{
   10398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1039a:	460d      	mov	r5, r1
   1039c:	4616      	mov	r6, r2
   1039e:	461f      	mov	r7, r3
    if (!strlen(str)) {
   103a0:	7803      	ldrb	r3, [r0, #0]
   103a2:	b91b      	cbnz	r3, 103ac <line2argv+0x14>
        return 0;
   103a4:	2400      	movs	r4, #0
}
   103a6:	4620      	mov	r0, r4
   103a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        str++;
   103aa:	3001      	adds	r0, #1
    while (*str && *str == ' ') {
   103ac:	7804      	ldrb	r4, [r0, #0]
   103ae:	2c20      	cmp	r4, #32
   103b0:	d0fb      	beq.n	103aa <line2argv+0x12>
    if (!*str) {
   103b2:	b314      	cbz	r4, 103fa <line2argv+0x62>
    argv[argc++] = str;
   103b4:	6028      	str	r0, [r5, #0]
   103b6:	2401      	movs	r4, #1
    while ((str = strchr(str, ' '))) {
   103b8:	e00a      	b.n	103d0 <line2argv+0x38>
            str++;
   103ba:	3001      	adds	r0, #1
        while (*str && *str == ' ') {
   103bc:	7803      	ldrb	r3, [r0, #0]
   103be:	2b20      	cmp	r3, #32
   103c0:	d0fb      	beq.n	103ba <line2argv+0x22>
        if (!*str) {
   103c2:	b1b3      	cbz	r3, 103f2 <line2argv+0x5a>
        argv[argc++] = str;
   103c4:	1c63      	adds	r3, r4, #1
   103c6:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
        if (argc == size) {
   103ca:	42b3      	cmp	r3, r6
   103cc:	d00a      	beq.n	103e4 <line2argv+0x4c>
        argv[argc++] = str;
   103ce:	461c      	mov	r4, r3
    while ((str = strchr(str, ' '))) {
   103d0:	2120      	movs	r1, #32
   103d2:	f00c f80c 	bl	1c3ee <strchr>
   103d6:	4603      	mov	r3, r0
   103d8:	b158      	cbz	r0, 103f2 <line2argv+0x5a>
        *str++ = '\0';
   103da:	4618      	mov	r0, r3
   103dc:	2300      	movs	r3, #0
   103de:	f800 3b01 	strb.w	r3, [r0], #1
        while (*str && *str == ' ') {
   103e2:	e7eb      	b.n	103bc <line2argv+0x24>
            streamer_printf(streamer, "Too many parameters (max %zu)\n",
   103e4:	1e72      	subs	r2, r6, #1
   103e6:	4906      	ldr	r1, [pc, #24]	; (10400 <line2argv+0x68>)
   103e8:	4638      	mov	r0, r7
   103ea:	f001 ff96 	bl	1231a <streamer_printf>
            return 0;
   103ee:	2400      	movs	r4, #0
   103f0:	e7d9      	b.n	103a6 <line2argv+0xe>
    argv[argc] = NULL;
   103f2:	2300      	movs	r3, #0
   103f4:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
    return argc;
   103f8:	e7d5      	b.n	103a6 <line2argv+0xe>
        return 0;
   103fa:	2400      	movs	r4, #0
   103fc:	e7d3      	b.n	103a6 <line2argv+0xe>
   103fe:	bf00      	nop
   10400:	0002342c 	.word	0x0002342c

00010404 <get_last_token>:
{
   10404:	b510      	push	{r4, lr}
   10406:	4604      	mov	r4, r0
    *cur = strrchr(*cur, ' ');
   10408:	2120      	movs	r1, #32
   1040a:	6800      	ldr	r0, [r0, #0]
   1040c:	f00c f816 	bl	1c43c <strrchr>
   10410:	6020      	str	r0, [r4, #0]
    if (*cur == NULL) {
   10412:	b120      	cbz	r0, 1041e <get_last_token+0x1a>
    (*cur)++;
   10414:	3001      	adds	r0, #1
   10416:	6020      	str	r0, [r4, #0]
    return strlen(*cur);
   10418:	f7fd fb2a 	bl	da70 <strlen>
}
   1041c:	bd10      	pop	{r4, pc}
        return 0;
   1041e:	2000      	movs	r0, #0
   10420:	e7fc      	b.n	1041c <get_last_token+0x18>
	...

00010424 <completion>:

static void
completion(char *line, console_append_char_cb append_char)
{
   10424:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10428:	b085      	sub	sp, #20
   1042a:	4605      	mov	r5, r0
   1042c:	460c      	mov	r4, r1
    char *cur;
    int tok_len;
    int module, command;
    int null_terminated = 0;
   1042e:	2100      	movs	r1, #0
   10430:	9102      	str	r1, [sp, #8]

    /*
     * line to completion is not ended by '\0' as the line that gets from
     * os_eventq_get function
     */
    if (!append_char(line, '\0')) {
   10432:	47a0      	blx	r4
   10434:	b910      	cbnz	r0, 1043c <completion+0x18>
        return;
    }
    complete_param(line, cur, tok_len,
                   module, command, append_char);
    return;
}
   10436:	b005      	add	sp, #20
   10438:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    cur = line;
   1043c:	9503      	str	r5, [sp, #12]
    tok_len = get_token(&cur, &null_terminated);
   1043e:	a902      	add	r1, sp, #8
   10440:	a803      	add	r0, sp, #12
   10442:	f7ff ff51 	bl	102e8 <get_token>
    if (tok_len == 0) {
   10446:	4606      	mov	r6, r0
   10448:	b168      	cbz	r0, 10466 <completion+0x42>
    if (null_terminated) {
   1044a:	9b02      	ldr	r3, [sp, #8]
   1044c:	b363      	cbz	r3, 104a8 <completion+0x84>
        if (default_module == -1) {
   1044e:	4b4d      	ldr	r3, [pc, #308]	; (10584 <completion+0x160>)
   10450:	681b      	ldr	r3, [r3, #0]
   10452:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   10456:	d020      	beq.n	1049a <completion+0x76>
        complete_command(line, cur, tok_len,
   10458:	9400      	str	r4, [sp, #0]
   1045a:	4602      	mov	r2, r0
   1045c:	9903      	ldr	r1, [sp, #12]
   1045e:	4628      	mov	r0, r5
   10460:	f7ff fe22 	bl	100a8 <complete_command>
        return;
   10464:	e7e7      	b.n	10436 <completion+0x12>
        console_printf("\n");
   10466:	4848      	ldr	r0, [pc, #288]	; (10588 <completion+0x164>)
   10468:	f7ff fa94 	bl	f994 <console_printf>
        if (default_module == -1) {
   1046c:	4b45      	ldr	r3, [pc, #276]	; (10584 <completion+0x160>)
   1046e:	681c      	ldr	r4, [r3, #0]
   10470:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   10474:	d00c      	beq.n	10490 <completion+0x6c>
            print_module_commands(default_module, streamer_console_get());
   10476:	f001 ff6b 	bl	12350 <streamer_console_get>
   1047a:	4601      	mov	r1, r0
   1047c:	4620      	mov	r0, r4
   1047e:	f7ff fb6d 	bl	fb5c <print_module_commands>
        print_prompt();
   10482:	f7ff fd71 	bl	ff68 <print_prompt>
        console_printf("%s", line);
   10486:	4629      	mov	r1, r5
   10488:	4840      	ldr	r0, [pc, #256]	; (1058c <completion+0x168>)
   1048a:	f7ff fa83 	bl	f994 <console_printf>
        return;
   1048e:	e7d2      	b.n	10436 <completion+0x12>
            print_modules(streamer_console_get());
   10490:	f001 ff5e 	bl	12350 <streamer_console_get>
   10494:	f7ff fb98 	bl	fbc8 <print_modules>
   10498:	e7f3      	b.n	10482 <completion+0x5e>
            complete_module(line, cur, tok_len, append_char);
   1049a:	4623      	mov	r3, r4
   1049c:	4602      	mov	r2, r0
   1049e:	9903      	ldr	r1, [sp, #12]
   104a0:	4628      	mov	r0, r5
   104a2:	f7ff fd79 	bl	ff98 <complete_module>
            return;
   104a6:	e7c6      	b.n	10436 <completion+0x12>
    if (strncmp("select", cur, tok_len) == 0) {
   104a8:	f8dd 800c 	ldr.w	r8, [sp, #12]
   104ac:	4602      	mov	r2, r0
   104ae:	4641      	mov	r1, r8
   104b0:	4837      	ldr	r0, [pc, #220]	; (10590 <completion+0x16c>)
   104b2:	f00b ffb2 	bl	1c41a <strncmp>
   104b6:	b300      	cbz	r0, 104fa <completion+0xd6>
    if (default_module != -1) {
   104b8:	4b32      	ldr	r3, [pc, #200]	; (10584 <completion+0x160>)
   104ba:	681f      	ldr	r7, [r3, #0]
   104bc:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   104c0:	d022      	beq.n	10508 <completion+0xe4>
    command = get_command_from_module(cur, tok_len, module);
   104c2:	f8dd 900c 	ldr.w	r9, [sp, #12]
   104c6:	463a      	mov	r2, r7
   104c8:	4631      	mov	r1, r6
   104ca:	4648      	mov	r0, r9
   104cc:	f7ff fe70 	bl	101b0 <get_command_from_module>
   104d0:	4680      	mov	r8, r0
    if (command == -1) {
   104d2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   104d6:	d0ae      	beq.n	10436 <completion+0x12>
    cur += tok_len;
   104d8:	444e      	add	r6, r9
   104da:	9603      	str	r6, [sp, #12]
    tok_len = get_last_token(&cur);
   104dc:	a803      	add	r0, sp, #12
   104de:	f7ff ff91 	bl	10404 <get_last_token>
    if (tok_len == 0) {
   104e2:	4602      	mov	r2, r0
   104e4:	2800      	cmp	r0, #0
   104e6:	d03b      	beq.n	10560 <completion+0x13c>
    complete_param(line, cur, tok_len,
   104e8:	9401      	str	r4, [sp, #4]
   104ea:	f8cd 8000 	str.w	r8, [sp]
   104ee:	463b      	mov	r3, r7
   104f0:	9903      	ldr	r1, [sp, #12]
   104f2:	4628      	mov	r0, r5
   104f4:	f7ff fe80 	bl	101f8 <complete_param>
    return;
   104f8:	e79d      	b.n	10436 <completion+0x12>
        complete_select(line, cur, tok_len, append_char);
   104fa:	4623      	mov	r3, r4
   104fc:	4632      	mov	r2, r6
   104fe:	4641      	mov	r1, r8
   10500:	4628      	mov	r0, r5
   10502:	f7ff ff0f 	bl	10324 <complete_select>
        return;
   10506:	e796      	b.n	10436 <completion+0x12>
        module = get_destination_module(cur, tok_len);
   10508:	4631      	mov	r1, r6
   1050a:	4640      	mov	r0, r8
   1050c:	f7ff fb96 	bl	fc3c <get_destination_module>
   10510:	4607      	mov	r7, r0
        if (module == -1) {
   10512:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   10516:	d08e      	beq.n	10436 <completion+0x12>
        cur += tok_len + 1;
   10518:	1c73      	adds	r3, r6, #1
   1051a:	4443      	add	r3, r8
   1051c:	9303      	str	r3, [sp, #12]
        tok_len = get_token(&cur, &null_terminated);
   1051e:	a902      	add	r1, sp, #8
   10520:	a803      	add	r0, sp, #12
   10522:	f7ff fee1 	bl	102e8 <get_token>
        if (tok_len == 0) {
   10526:	4606      	mov	r6, r0
   10528:	b150      	cbz	r0, 10540 <completion+0x11c>
        if (null_terminated) {
   1052a:	9b02      	ldr	r3, [sp, #8]
   1052c:	2b00      	cmp	r3, #0
   1052e:	d0c8      	beq.n	104c2 <completion+0x9e>
            complete_command(line, cur, tok_len,
   10530:	9400      	str	r4, [sp, #0]
   10532:	463b      	mov	r3, r7
   10534:	4602      	mov	r2, r0
   10536:	9903      	ldr	r1, [sp, #12]
   10538:	4628      	mov	r0, r5
   1053a:	f7ff fdb5 	bl	100a8 <complete_command>
            return;
   1053e:	e77a      	b.n	10436 <completion+0x12>
            console_printf("\n");
   10540:	4811      	ldr	r0, [pc, #68]	; (10588 <completion+0x164>)
   10542:	f7ff fa27 	bl	f994 <console_printf>
            print_module_commands(module, streamer_console_get());
   10546:	f001 ff03 	bl	12350 <streamer_console_get>
   1054a:	4601      	mov	r1, r0
   1054c:	4638      	mov	r0, r7
   1054e:	f7ff fb05 	bl	fb5c <print_module_commands>
            print_prompt();
   10552:	f7ff fd09 	bl	ff68 <print_prompt>
            console_printf("%s", line);
   10556:	4629      	mov	r1, r5
   10558:	480c      	ldr	r0, [pc, #48]	; (1058c <completion+0x168>)
   1055a:	f7ff fa1b 	bl	f994 <console_printf>
            return;
   1055e:	e76a      	b.n	10436 <completion+0x12>
        console_printf("\n");
   10560:	4809      	ldr	r0, [pc, #36]	; (10588 <completion+0x164>)
   10562:	f7ff fa17 	bl	f994 <console_printf>
        print_command_params(module, command, streamer_console_get());
   10566:	f001 fef3 	bl	12350 <streamer_console_get>
   1056a:	4602      	mov	r2, r0
   1056c:	4641      	mov	r1, r8
   1056e:	4638      	mov	r0, r7
   10570:	f7ff fb42 	bl	fbf8 <print_command_params>
        print_prompt();
   10574:	f7ff fcf8 	bl	ff68 <print_prompt>
        console_printf("%s", line);
   10578:	4629      	mov	r1, r5
   1057a:	4804      	ldr	r0, [pc, #16]	; (1058c <completion+0x168>)
   1057c:	f7ff fa0a 	bl	f994 <console_printf>
        return;
   10580:	e759      	b.n	10436 <completion+0x12>
   10582:	bf00      	nop
   10584:	20000620 	.word	0x20000620
   10588:	000233bc 	.word	0x000233bc
   1058c:	00023278 	.word	0x00023278
   10590:	00023380 	.word	0x00023380

00010594 <shell_avail_queue_init>:
    }
}

static void
shell_avail_queue_init(void)
{
   10594:	b510      	push	{r4, lr}
    int i;

    for (i = 0; i < MYNEWT_VAL(SHELL_MAX_CMD_QUEUED); i++) {
   10596:	2400      	movs	r4, #0
   10598:	e00b      	b.n	105b2 <shell_avail_queue_init+0x1e>
        shell_console_ev[i].ev_cb = shell;
   1059a:	4807      	ldr	r0, [pc, #28]	; (105b8 <shell_avail_queue_init+0x24>)
   1059c:	eb00 1004 	add.w	r0, r0, r4, lsl #4
   105a0:	4b06      	ldr	r3, [pc, #24]	; (105bc <shell_avail_queue_init+0x28>)
   105a2:	6043      	str	r3, [r0, #4]
        shell_console_ev[i].ev_arg = &buf[i];
   105a4:	4b06      	ldr	r3, [pc, #24]	; (105c0 <shell_avail_queue_init+0x2c>)
   105a6:	eb03 2304 	add.w	r3, r3, r4, lsl #8
   105aa:	6083      	str	r3, [r0, #8]
        console_line_event_put(&shell_console_ev[i]);
   105ac:	f7ff f992 	bl	f8d4 <console_line_event_put>
    for (i = 0; i < MYNEWT_VAL(SHELL_MAX_CMD_QUEUED); i++) {
   105b0:	3401      	adds	r4, #1
   105b2:	2c01      	cmp	r4, #1
   105b4:	ddf1      	ble.n	1059a <shell_avail_queue_init+0x6>
    }
}
   105b6:	bd10      	pop	{r4, pc}
   105b8:	20004498 	.word	0x20004498
   105bc:	00010705 	.word	0x00010705
   105c0:	20004138 	.word	0x20004138

000105c4 <shell_evq_set>:
{
   105c4:	b508      	push	{r3, lr}
    shell_evq = evq;
   105c6:	4b02      	ldr	r3, [pc, #8]	; (105d0 <shell_evq_set+0xc>)
   105c8:	6018      	str	r0, [r3, #0]
    console_line_queue_set(shell_evq);
   105ca:	f7ff f97d 	bl	f8c8 <console_line_queue_set>
}
   105ce:	bd08      	pop	{r3, pc}
   105d0:	200044b8 	.word	0x200044b8

000105d4 <shell_exec>:
{
   105d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   105d8:	4607      	mov	r7, r0
   105da:	460e      	mov	r6, r1
   105dc:	4615      	mov	r5, r2
    cmd = shell_find_cmd(argc, argv, streamer);
   105de:	f7ff fbad 	bl	fd3c <shell_find_cmd>
    if (!cmd) {
   105e2:	4604      	mov	r4, r0
   105e4:	b1b8      	cbz	r0, 10616 <shell_exec+0x42>
    if (default_module == -1 && cmd != &shell_cmd_select_module &&
   105e6:	4b23      	ldr	r3, [pc, #140]	; (10674 <shell_exec+0xa0>)
   105e8:	681b      	ldr	r3, [r3, #0]
   105ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   105ee:	d026      	beq.n	1063e <shell_exec+0x6a>
    size_t argc_offset = 0;
   105f0:	2000      	movs	r0, #0
    if (!cmd->sc_ext) {
   105f2:	7823      	ldrb	r3, [r4, #0]
   105f4:	f013 0f01 	tst.w	r3, #1
   105f8:	d12d      	bne.n	10656 <shell_exec+0x82>
        rc = cmd->sc_cmd_func(argc - argc_offset, &argv[argc_offset]);
   105fa:	6863      	ldr	r3, [r4, #4]
   105fc:	eb06 0180 	add.w	r1, r6, r0, lsl #2
   10600:	1a38      	subs	r0, r7, r0
   10602:	4798      	blx	r3
   10604:	4604      	mov	r4, r0
    if (rc < 0) {
   10606:	2c00      	cmp	r4, #0
   10608:	db2f      	blt.n	1066a <shell_exec+0x96>
    print_prompt_if_console(streamer);
   1060a:	4628      	mov	r0, r5
   1060c:	f7ff fcba 	bl	ff84 <print_prompt_if_console>
}
   10610:	4620      	mov	r0, r4
   10612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (app_cmd.sc_cmd_func != NULL) {
   10616:	4b18      	ldr	r3, [pc, #96]	; (10678 <shell_exec+0xa4>)
   10618:	685b      	ldr	r3, [r3, #4]
   1061a:	b10b      	cbz	r3, 10620 <shell_exec+0x4c>
            cmd = &app_cmd;
   1061c:	4c16      	ldr	r4, [pc, #88]	; (10678 <shell_exec+0xa4>)
   1061e:	e7e2      	b.n	105e6 <shell_exec+0x12>
            streamer_printf(streamer, "Unrecognized command: %s\n", argv[0]);
   10620:	6832      	ldr	r2, [r6, #0]
   10622:	4916      	ldr	r1, [pc, #88]	; (1067c <shell_exec+0xa8>)
   10624:	4628      	mov	r0, r5
   10626:	f001 fe78 	bl	1231a <streamer_printf>
            streamer_printf(streamer,
   1062a:	4915      	ldr	r1, [pc, #84]	; (10680 <shell_exec+0xac>)
   1062c:	4628      	mov	r0, r5
   1062e:	f001 fe74 	bl	1231a <streamer_printf>
            print_prompt_if_console(streamer);
   10632:	4628      	mov	r0, r5
   10634:	f7ff fca6 	bl	ff84 <print_prompt_if_console>
            return SYS_ENOENT;
   10638:	f06f 0403 	mvn.w	r4, #3
   1063c:	e7e8      	b.n	10610 <shell_exec+0x3c>
    if (default_module == -1 && cmd != &shell_cmd_select_module &&
   1063e:	4b11      	ldr	r3, [pc, #68]	; (10684 <shell_exec+0xb0>)
   10640:	429c      	cmp	r4, r3
   10642:	d006      	beq.n	10652 <shell_exec+0x7e>
   10644:	4b10      	ldr	r3, [pc, #64]	; (10688 <shell_exec+0xb4>)
   10646:	429c      	cmp	r4, r3
   10648:	d001      	beq.n	1064e <shell_exec+0x7a>
        argc_offset = 1;
   1064a:	2001      	movs	r0, #1
   1064c:	e7d1      	b.n	105f2 <shell_exec+0x1e>
    size_t argc_offset = 0;
   1064e:	2000      	movs	r0, #0
   10650:	e7cf      	b.n	105f2 <shell_exec+0x1e>
   10652:	2000      	movs	r0, #0
   10654:	e7cd      	b.n	105f2 <shell_exec+0x1e>
        rc = cmd->sc_cmd_ext_func(cmd, argc - argc_offset, &argv[argc_offset],
   10656:	f8d4 8004 	ldr.w	r8, [r4, #4]
   1065a:	462b      	mov	r3, r5
   1065c:	eb06 0280 	add.w	r2, r6, r0, lsl #2
   10660:	1a39      	subs	r1, r7, r0
   10662:	4620      	mov	r0, r4
   10664:	47c0      	blx	r8
   10666:	4604      	mov	r4, r0
   10668:	e7cd      	b.n	10606 <shell_exec+0x32>
        show_cmd_help(argv, streamer);
   1066a:	4629      	mov	r1, r5
   1066c:	4630      	mov	r0, r6
   1066e:	f7ff fbc7 	bl	fe00 <show_cmd_help>
   10672:	e7ca      	b.n	1060a <shell_exec+0x36>
   10674:	20000620 	.word	0x20000620
   10678:	20004124 	.word	0x20004124
   1067c:	00023334 	.word	0x00023334
   10680:	0002344c 	.word	0x0002344c
   10684:	0002350c 	.word	0x0002350c
   10688:	000234fc 	.word	0x000234fc

0001068c <shell_process_command>:
{
   1068c:	b510      	push	{r4, lr}
   1068e:	b08e      	sub	sp, #56	; 0x38
   10690:	460c      	mov	r4, r1
    argc = line2argv(line, argv, MYNEWT_VAL(SHELL_CMD_ARGC_MAX) + 1, streamer);
   10692:	460b      	mov	r3, r1
   10694:	220d      	movs	r2, #13
   10696:	a901      	add	r1, sp, #4
   10698:	f7ff fe7e 	bl	10398 <line2argv>
    if (!argc) {
   1069c:	b128      	cbz	r0, 106aa <shell_process_command+0x1e>
    shell_exec(argc, argv, streamer);
   1069e:	4622      	mov	r2, r4
   106a0:	a901      	add	r1, sp, #4
   106a2:	f7ff ff97 	bl	105d4 <shell_exec>
}
   106a6:	b00e      	add	sp, #56	; 0x38
   106a8:	bd10      	pop	{r4, pc}
        print_prompt_if_console(streamer);
   106aa:	4620      	mov	r0, r4
   106ac:	f7ff fc6a 	bl	ff84 <print_prompt_if_console>
        return;
   106b0:	e7f9      	b.n	106a6 <shell_process_command+0x1a>

000106b2 <shell_process_nlip_line>:
{
   106b2:	b570      	push	{r4, r5, r6, lr}
   106b4:	4604      	mov	r4, r0
   106b6:	460e      	mov	r6, r1
    shell_line_len = strlen(shell_line);
   106b8:	f7fd f9da 	bl	da70 <strlen>
    if (shell_line_len > 2) {
   106bc:	2802      	cmp	r0, #2
   106be:	d91c      	bls.n	106fa <shell_process_nlip_line+0x48>
   106c0:	4605      	mov	r5, r0
        if (shell_line[0] == SHELL_NLIP_PKT_START1 &&
   106c2:	7823      	ldrb	r3, [r4, #0]
   106c4:	2b06      	cmp	r3, #6
   106c6:	d009      	beq.n	106dc <shell_process_nlip_line+0x2a>
        } else if (shell_line[0] == SHELL_NLIP_DATA_START1 &&
   106c8:	2b04      	cmp	r3, #4
   106ca:	d102      	bne.n	106d2 <shell_process_nlip_line+0x20>
                shell_line[1] == SHELL_NLIP_DATA_START2) {
   106cc:	7863      	ldrb	r3, [r4, #1]
        } else if (shell_line[0] == SHELL_NLIP_DATA_START1 &&
   106ce:	2b14      	cmp	r3, #20
   106d0:	d00e      	beq.n	106f0 <shell_process_nlip_line+0x3e>
            shell_process_command(shell_line, streamer);
   106d2:	4631      	mov	r1, r6
   106d4:	4620      	mov	r0, r4
   106d6:	f7ff ffd9 	bl	1068c <shell_process_command>
}
   106da:	bd70      	pop	{r4, r5, r6, pc}
                shell_line[1] == SHELL_NLIP_PKT_START2) {
   106dc:	7862      	ldrb	r2, [r4, #1]
        if (shell_line[0] == SHELL_NLIP_PKT_START1 &&
   106de:	2a09      	cmp	r2, #9
   106e0:	d1f2      	bne.n	106c8 <shell_process_nlip_line+0x16>
            shell_nlip_clear_pkt();
   106e2:	f000 f95b 	bl	1099c <shell_nlip_clear_pkt>
            shell_nlip_process(&shell_line[2], shell_line_len - 2);
   106e6:	1ea9      	subs	r1, r5, #2
   106e8:	1ca0      	adds	r0, r4, #2
   106ea:	f000 f969 	bl	109c0 <shell_nlip_process>
   106ee:	e7f4      	b.n	106da <shell_process_nlip_line+0x28>
            shell_nlip_process(&shell_line[2], shell_line_len - 2);
   106f0:	1ea9      	subs	r1, r5, #2
   106f2:	1ca0      	adds	r0, r4, #2
   106f4:	f000 f964 	bl	109c0 <shell_nlip_process>
   106f8:	e7ef      	b.n	106da <shell_process_nlip_line+0x28>
        shell_process_command(shell_line, streamer);
   106fa:	4631      	mov	r1, r6
   106fc:	4620      	mov	r0, r4
   106fe:	f7ff ffc5 	bl	1068c <shell_process_command>
}
   10702:	e7ea      	b.n	106da <shell_process_nlip_line+0x28>

00010704 <shell>:
{
   10704:	b538      	push	{r3, r4, r5, lr}
    if (!ev) {
   10706:	b160      	cbz	r0, 10722 <shell+0x1e>
   10708:	4604      	mov	r4, r0
    cmd = ev->ev_arg;
   1070a:	6885      	ldr	r5, [r0, #8]
    if (!cmd) {
   1070c:	b165      	cbz	r5, 10728 <shell+0x24>
    streamer = streamer_console_get();
   1070e:	f001 fe1f 	bl	12350 <streamer_console_get>
   10712:	4601      	mov	r1, r0
    shell_process_nlip_line(cmd->line, streamer);
   10714:	4628      	mov	r0, r5
   10716:	f7ff ffcc 	bl	106b2 <shell_process_nlip_line>
    console_line_event_put(ev);
   1071a:	4620      	mov	r0, r4
   1071c:	f7ff f8da 	bl	f8d4 <console_line_event_put>
}
   10720:	bd38      	pop	{r3, r4, r5, pc}
        print_prompt();
   10722:	f7ff fc21 	bl	ff68 <print_prompt>
        return;
   10726:	e7fb      	b.n	10720 <shell+0x1c>
        print_prompt();
   10728:	f7ff fc1e 	bl	ff68 <print_prompt>
        return;
   1072c:	e7f8      	b.n	10720 <shell+0x1c>
	...

00010730 <shell_register>:

int
shell_register(const char *module_name, const struct shell_cmd *commands)
{
   10730:	b508      	push	{r3, lr}
    if (num_of_shell_entities >= MYNEWT_VAL(SHELL_MAX_MODULES)) {
   10732:	4b0d      	ldr	r3, [pc, #52]	; (10768 <shell_register+0x38>)
   10734:	681b      	ldr	r3, [r3, #0]
   10736:	2b02      	cmp	r3, #2
   10738:	d80a      	bhi.n	10750 <shell_register+0x20>
        MODLOG_ERROR(LOG_MODULE_DEFAULT, "Max number of modules reached\n");
        assert(0);
    }

    shell_modules[num_of_shell_entities].name = module_name;
   1073a:	4a0c      	ldr	r2, [pc, #48]	; (1076c <shell_register+0x3c>)
   1073c:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
    shell_modules[num_of_shell_entities].commands = commands;
   10740:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   10744:	6051      	str	r1, [r2, #4]
    ++num_of_shell_entities;
   10746:	3301      	adds	r3, #1
   10748:	4a07      	ldr	r2, [pc, #28]	; (10768 <shell_register+0x38>)
   1074a:	6013      	str	r3, [r2, #0]

    return 0;
}
   1074c:	2000      	movs	r0, #0
   1074e:	bd08      	pop	{r3, pc}
        MODLOG_ERROR(LOG_MODULE_DEFAULT, "Max number of modules reached\n");
   10750:	4a07      	ldr	r2, [pc, #28]	; (10770 <shell_register+0x40>)
   10752:	2103      	movs	r1, #3
   10754:	2000      	movs	r0, #0
   10756:	f00e fdc1 	bl	1f2dc <modlog_printf>
        assert(0);
   1075a:	2300      	movs	r3, #0
   1075c:	461a      	mov	r2, r3
   1075e:	4619      	mov	r1, r3
   10760:	4618      	mov	r0, r3
   10762:	f7f8 fc73 	bl	904c <__assert_func>
   10766:	bf00      	nop
   10768:	20004490 	.word	0x20004490
   1076c:	200044bc 	.word	0x200044bc
   10770:	00023478 	.word	0x00023478

00010774 <shell_cmd_register>:
static int num_compat_commands;
static int module_registered;

int
shell_cmd_register(const struct shell_cmd *sc)
{
   10774:	b570      	push	{r4, r5, r6, lr}
    int rc;

    if (num_compat_commands >= MYNEWT_VAL(SHELL_MAX_COMPAT_COMMANDS)) {
   10776:	4b1a      	ldr	r3, [pc, #104]	; (107e0 <shell_cmd_register+0x6c>)
   10778:	681b      	ldr	r3, [r3, #0]
   1077a:	2b13      	cmp	r3, #19
   1077c:	dc10      	bgt.n	107a0 <shell_cmd_register+0x2c>
   1077e:	4604      	mov	r4, r0
        MODLOG_ERROR(LOG_MODULE_DEFAULT,
                     "Max number of compat commands reached\n");
        assert(0);
    }

    if (!module_registered) {
   10780:	4b18      	ldr	r3, [pc, #96]	; (107e4 <shell_cmd_register+0x70>)
   10782:	681b      	ldr	r3, [r3, #0]
   10784:	b1bb      	cbz	r3, 107b6 <shell_cmd_register+0x42>
                         "Illegal module %s, default is not changed\n",
                         SHELL_COMPAT_MODULE_NAME);
        }
    }

    compat_commands[num_compat_commands] = *sc;
   10786:	4e16      	ldr	r6, [pc, #88]	; (107e0 <shell_cmd_register+0x6c>)
   10788:	6835      	ldr	r5, [r6, #0]
   1078a:	4b17      	ldr	r3, [pc, #92]	; (107e8 <shell_cmd_register+0x74>)
   1078c:	eb03 1c05 	add.w	ip, r3, r5, lsl #4
   10790:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   10794:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    ++num_compat_commands;
   10798:	3501      	adds	r5, #1
   1079a:	6035      	str	r5, [r6, #0]
    return 0;
}
   1079c:	2000      	movs	r0, #0
   1079e:	bd70      	pop	{r4, r5, r6, pc}
        MODLOG_ERROR(LOG_MODULE_DEFAULT,
   107a0:	4a12      	ldr	r2, [pc, #72]	; (107ec <shell_cmd_register+0x78>)
   107a2:	2103      	movs	r1, #3
   107a4:	2000      	movs	r0, #0
   107a6:	f00e fd99 	bl	1f2dc <modlog_printf>
        assert(0);
   107aa:	2300      	movs	r3, #0
   107ac:	461a      	mov	r2, r3
   107ae:	4619      	mov	r1, r3
   107b0:	4618      	mov	r0, r3
   107b2:	f7f8 fc4b 	bl	904c <__assert_func>
        shell_register(SHELL_COMPAT_MODULE_NAME, compat_commands);
   107b6:	4d0e      	ldr	r5, [pc, #56]	; (107f0 <shell_cmd_register+0x7c>)
   107b8:	490b      	ldr	r1, [pc, #44]	; (107e8 <shell_cmd_register+0x74>)
   107ba:	4628      	mov	r0, r5
   107bc:	f7ff ffb8 	bl	10730 <shell_register>
        module_registered = 1;
   107c0:	4b08      	ldr	r3, [pc, #32]	; (107e4 <shell_cmd_register+0x70>)
   107c2:	2201      	movs	r2, #1
   107c4:	601a      	str	r2, [r3, #0]
        rc = set_default_module(SHELL_COMPAT_MODULE_NAME);
   107c6:	4628      	mov	r0, r5
   107c8:	f7ff fa5e 	bl	fc88 <set_default_module>
        if (rc != 0) {
   107cc:	2800      	cmp	r0, #0
   107ce:	d0da      	beq.n	10786 <shell_cmd_register+0x12>
            MODLOG_ERROR(LOG_MODULE_DEFAULT,
   107d0:	462b      	mov	r3, r5
   107d2:	4a08      	ldr	r2, [pc, #32]	; (107f4 <shell_cmd_register+0x80>)
   107d4:	2103      	movs	r1, #3
   107d6:	2000      	movs	r0, #0
   107d8:	f00e fd80 	bl	1f2dc <modlog_printf>
   107dc:	e7d3      	b.n	10786 <shell_cmd_register+0x12>
   107de:	bf00      	nop
   107e0:	2000448c 	.word	0x2000448c
   107e4:	20004488 	.word	0x20004488
   107e8:	20004338 	.word	0x20004338
   107ec:	00023498 	.word	0x00023498
   107f0:	000234c0 	.word	0x000234c0
   107f4:	000234c8 	.word	0x000234c8

000107f8 <shell_init>:
#endif

void
shell_init(void)
{
   107f8:	b508      	push	{r3, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   107fa:	4b0d      	ldr	r3, [pc, #52]	; (10830 <shell_init+0x38>)
   107fc:	781b      	ldrb	r3, [r3, #0]
   107fe:	b193      	cbz	r3, 10826 <shell_init+0x2e>

#if !MYNEWT_VAL(SHELL_TASK)
    return;
#endif

    shell_avail_queue_init();
   10800:	f7ff fec8 	bl	10594 <shell_avail_queue_init>
    shell_evq_set(os_eventq_dflt_get());
   10804:	f7f9 f804 	bl	9810 <os_eventq_dflt_get>
   10808:	f7ff fedc 	bl	105c4 <shell_evq_set>

    prompt = SHELL_PROMPT;
   1080c:	4b09      	ldr	r3, [pc, #36]	; (10834 <shell_init+0x3c>)
   1080e:	4a0a      	ldr	r2, [pc, #40]	; (10838 <shell_init+0x40>)
   10810:	601a      	str	r2, [r3, #0]

#if MYNEWT_VAL(SHELL_NEWTMGR)
    shell_nlip_init();
   10812:	f000 f95b 	bl	10acc <shell_nlip_init>
#endif

#if MYNEWT_VAL(SHELL_COMPLETION)
    console_set_completion_cb(completion);
   10816:	4809      	ldr	r0, [pc, #36]	; (1083c <shell_init+0x44>)
   10818:	f7ff f870 	bl	f8fc <console_set_completion_cb>
#endif

#if MYNEWT_VAL(SHELL_OS_MODULE)
    shell_os_register();
   1081c:	f000 faac 	bl	10d78 <shell_os_register>
#endif
#if MYNEWT_VAL(SHELL_PROMPT_MODULE)
    shell_prompt_register();
   10820:	f000 faf0 	bl	10e04 <shell_prompt_register>
#endif
#if MYNEWT_VAL(SHELL_BRIDGE)
    shell_bridge_init();
#endif
}
   10824:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   10826:	461a      	mov	r2, r3
   10828:	4619      	mov	r1, r3
   1082a:	4618      	mov	r0, r3
   1082c:	f7f8 fc0e 	bl	904c <__assert_func>
   10830:	20004548 	.word	0x20004548
   10834:	20004494 	.word	0x20004494
   10838:	000234f4 	.word	0x000234f4
   1083c:	00010425 	.word	0x00010425

00010840 <shell_nlip_mtx>:
    return (rc);
}

static int
shell_nlip_mtx(struct os_mbuf *m)
{
   10840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10844:	b08b      	sub	sp, #44	; 0x2c
   10846:	4680      	mov	r8, r0
#define SHELL_NLIP_MTX_BUF_SIZE (12)
    uint8_t readbuf[SHELL_NLIP_MTX_BUF_SIZE];
    char encodebuf[BASE64_ENCODE_SIZE(SHELL_NLIP_MTX_BUF_SIZE)];
    char pkt_seq[3] = { '\n', SHELL_NLIP_PKT_START1, SHELL_NLIP_PKT_START2 };
   10848:	4b49      	ldr	r3, [pc, #292]	; (10970 <shell_nlip_mtx+0x130>)
   1084a:	681b      	ldr	r3, [r3, #0]
   1084c:	f8ad 3008 	strh.w	r3, [sp, #8]
   10850:	0c1b      	lsrs	r3, r3, #16
   10852:	f88d 300a 	strb.w	r3, [sp, #10]
    char esc_seq[2] = { SHELL_NLIP_DATA_START1, SHELL_NLIP_DATA_START2 };
   10856:	f241 4304 	movw	r3, #5124	; 0x1404
   1085a:	f8ad 3004 	strh.w	r3, [sp, #4]
     *
     * continuation packets are preceded by 04 20 until the entire
     * buffer has been sent.
     */
    crc = CRC16_INITIAL_CRC;
    for (tmp = m; tmp; tmp = SLIST_NEXT(tmp, om_next)) {
   1085e:	4604      	mov	r4, r0
    crc = CRC16_INITIAL_CRC;
   10860:	2000      	movs	r0, #0
    for (tmp = m; tmp; tmp = SLIST_NEXT(tmp, om_next)) {
   10862:	e004      	b.n	1086e <shell_nlip_mtx+0x2e>
        crc = crc16_ccitt(crc, tmp->om_data, tmp->om_len);
   10864:	88e2      	ldrh	r2, [r4, #6]
   10866:	6821      	ldr	r1, [r4, #0]
   10868:	f001 fd38 	bl	122dc <crc16_ccitt>
    for (tmp = m; tmp; tmp = SLIST_NEXT(tmp, om_next)) {
   1086c:	68e4      	ldr	r4, [r4, #12]
   1086e:	2c00      	cmp	r4, #0
   10870:	d1f8      	bne.n	10864 <shell_nlip_mtx+0x24>
    }
    crc = htons(crc);
   10872:	f3c0 230f 	ubfx	r3, r0, #8, #16
   10876:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   1087a:	b284      	uxth	r4, r0
    ptr = os_mbuf_extend(m, sizeof(crc));
   1087c:	2102      	movs	r1, #2
   1087e:	4640      	mov	r0, r8
   10880:	f7fa f8c2 	bl	aa08 <os_mbuf_extend>
    if (!ptr) {
   10884:	2800      	cmp	r0, #0
   10886:	d070      	beq.n	1096a <shell_nlip_mtx+0x12a>
        rc = -1;
        goto err;
    }
    memcpy(ptr, &crc, sizeof(crc));
   10888:	8004      	strh	r4, [r0, #0]

    totlen = OS_MBUF_PKTHDR(m)->omp_len;
   1088a:	f8b8 5010 	ldrh.w	r5, [r8, #16]
    off = 0;
    bodylen = 0;
    rb_off = 0;

    rc = console_lock(OS_TICKS_PER_SEC);
   1088e:	2080      	movs	r0, #128	; 0x80
   10890:	f7fe fc62 	bl	f158 <console_lock>
    if (rc != OS_OK) {
   10894:	4682      	mov	sl, r0
   10896:	b118      	cbz	r0, 108a0 <shell_nlip_mtx+0x60>
end:
    (void)console_unlock();

err:
    return (rc);
}
   10898:	4650      	mov	r0, sl
   1089a:	b00b      	add	sp, #44	; 0x2c
   1089c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    console_write(pkt_seq, sizeof(pkt_seq));
   108a0:	2103      	movs	r1, #3
   108a2:	a802      	add	r0, sp, #8
   108a4:	f7fe fe4e 	bl	f544 <console_write>
    dlen = htons(totlen);
   108a8:	022b      	lsls	r3, r5, #8
   108aa:	ea43 2315 	orr.w	r3, r3, r5, lsr #8
    memcpy(readbuf, &dlen, sizeof(dlen));
   108ae:	f8ad 301c 	strh.w	r3, [sp, #28]
    rc = console_lock(OS_TICKS_PER_SEC);
   108b2:	46d3      	mov	fp, sl
    bodylen = 0;
   108b4:	2600      	movs	r6, #0
    rb_off += 2;
   108b6:	2302      	movs	r3, #2
    off = 0;
   108b8:	46b1      	mov	r9, r6
    while (totlen > 0) {
   108ba:	e01c      	b.n	108f6 <shell_nlip_mtx+0xb6>
            rc = os_mbuf_copydata(m, off, dlen, readbuf + rb_off);
   108bc:	aa07      	add	r2, sp, #28
   108be:	4413      	add	r3, r2
   108c0:	4622      	mov	r2, r4
   108c2:	4649      	mov	r1, r9
   108c4:	4640      	mov	r0, r8
   108c6:	f7f9 ff9a 	bl	a7fe <os_mbuf_copydata>
            if (rc != 0) {
   108ca:	4683      	mov	fp, r0
   108cc:	2800      	cmp	r0, #0
   108ce:	d14a      	bne.n	10966 <shell_nlip_mtx+0x126>
            elen = base64_encode(readbuf, dlen + rb_off, encodebuf, 0);
   108d0:	2300      	movs	r3, #0
   108d2:	aa03      	add	r2, sp, #12
   108d4:	4639      	mov	r1, r7
   108d6:	a807      	add	r0, sp, #28
   108d8:	f001 fe7a 	bl	125d0 <base64_encode>
   108dc:	4607      	mov	r7, r0
            console_write(encodebuf, elen);
   108de:	4601      	mov	r1, r0
   108e0:	a803      	add	r0, sp, #12
   108e2:	f7fe fe2f 	bl	f544 <console_write>
            bodylen += elen;
   108e6:	443e      	add	r6, r7
   108e8:	b2b6      	uxth	r6, r6
            totlen -= dlen;
   108ea:	1b2d      	subs	r5, r5, r4
   108ec:	b2ad      	uxth	r5, r5
            off += dlen;
   108ee:	44a1      	add	r9, r4
   108f0:	fa1f f989 	uxth.w	r9, r9
            bodylen = 0;
   108f4:	4653      	mov	r3, sl
    while (totlen > 0) {
   108f6:	b335      	cbz	r5, 10946 <shell_nlip_mtx+0x106>
        dlen = min(SHELL_NLIP_MTX_BUF_SIZE - rb_off, totlen);
   108f8:	f1c3 040c 	rsb	r4, r3, #12
   108fc:	42ac      	cmp	r4, r5
   108fe:	bfa8      	it	ge
   10900:	462c      	movge	r4, r5
   10902:	b2a4      	uxth	r4, r4
        newbodylen = 2 + bodylen + BASE64_ENCODE_SIZE(dlen + rb_off) + 1;
   10904:	191f      	adds	r7, r3, r4
   10906:	1e79      	subs	r1, r7, #1
   10908:	4a1a      	ldr	r2, [pc, #104]	; (10974 <shell_nlip_mtx+0x134>)
   1090a:	fb82 0201 	smull	r0, r2, r2, r1
   1090e:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
   10912:	3201      	adds	r2, #1
   10914:	eb06 0282 	add.w	r2, r6, r2, lsl #2
   10918:	b292      	uxth	r2, r2
   1091a:	3203      	adds	r2, #3
   1091c:	b292      	uxth	r2, r2
        if (newbodylen > MGMT_NLIP_MAX_FRAME) {
   1091e:	2a7f      	cmp	r2, #127	; 0x7f
   10920:	d9cc      	bls.n	108bc <shell_nlip_mtx+0x7c>
            elen = base64_pad(encodebuf, bodylen);
   10922:	4631      	mov	r1, r6
   10924:	a803      	add	r0, sp, #12
   10926:	f001 fe9d 	bl	12664 <base64_pad>
   1092a:	4601      	mov	r1, r0
            console_write(encodebuf, elen);
   1092c:	a803      	add	r0, sp, #12
   1092e:	f7fe fe09 	bl	f544 <console_write>
            console_write("\n", 1);
   10932:	2101      	movs	r1, #1
   10934:	4810      	ldr	r0, [pc, #64]	; (10978 <shell_nlip_mtx+0x138>)
   10936:	f7fe fe05 	bl	f544 <console_write>
            console_write(esc_seq, sizeof(esc_seq));
   1093a:	2102      	movs	r1, #2
   1093c:	a801      	add	r0, sp, #4
   1093e:	f7fe fe01 	bl	f544 <console_write>
            bodylen = 0;
   10942:	2600      	movs	r6, #0
   10944:	e7d6      	b.n	108f4 <shell_nlip_mtx+0xb4>
    elen = base64_pad(encodebuf, bodylen);
   10946:	4631      	mov	r1, r6
   10948:	a803      	add	r0, sp, #12
   1094a:	f001 fe8b 	bl	12664 <base64_pad>
   1094e:	4601      	mov	r1, r0
    console_write(encodebuf, elen);
   10950:	a803      	add	r0, sp, #12
   10952:	f7fe fdf7 	bl	f544 <console_write>
    console_write("\n", 1);
   10956:	2101      	movs	r1, #1
   10958:	4807      	ldr	r0, [pc, #28]	; (10978 <shell_nlip_mtx+0x138>)
   1095a:	f7fe fdf3 	bl	f544 <console_write>
   1095e:	46da      	mov	sl, fp
    (void)console_unlock();
   10960:	f7fe fc14 	bl	f18c <console_unlock>
   10964:	e798      	b.n	10898 <shell_nlip_mtx+0x58>
            rc = os_mbuf_copydata(m, off, dlen, readbuf + rb_off);
   10966:	4682      	mov	sl, r0
   10968:	e7fa      	b.n	10960 <shell_nlip_mtx+0x120>
        rc = -1;
   1096a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    return (rc);
   1096e:	e793      	b.n	10898 <shell_nlip_mtx+0x58>
   10970:	0002351c 	.word	0x0002351c
   10974:	55555556 	.word	0x55555556
   10978:	000233bc 	.word	0x000233bc

0001097c <shell_event_data_in>:
    return os_mqueue_put(&g_shell_nlip_mq, os_eventq_dflt_get(), m);
}

static void
shell_event_data_in(struct os_event *ev)
{
   1097c:	b510      	push	{r4, lr}
   1097e:	e005      	b.n	1098c <shell_event_data_in+0x10>
   10980:	4604      	mov	r4, r0
        m = os_mqueue_get(&g_shell_nlip_mq);
        if (!m) {
            break;
        }

        (void) shell_nlip_mtx(m);
   10982:	f7ff ff5d 	bl	10840 <shell_nlip_mtx>

        os_mbuf_free_chain(m);
   10986:	4620      	mov	r0, r4
   10988:	f7f9 fec3 	bl	a712 <os_mbuf_free_chain>
        m = os_mqueue_get(&g_shell_nlip_mq);
   1098c:	4802      	ldr	r0, [pc, #8]	; (10998 <shell_event_data_in+0x1c>)
   1098e:	f7f9 fe56 	bl	a63e <os_mqueue_get>
        if (!m) {
   10992:	2800      	cmp	r0, #0
   10994:	d1f4      	bne.n	10980 <shell_event_data_in+0x4>
    }
}
   10996:	bd10      	pop	{r4, pc}
   10998:	200044e4 	.word	0x200044e4

0001099c <shell_nlip_clear_pkt>:
{
   1099c:	b508      	push	{r3, lr}
    if (g_nlip_mbuf) {
   1099e:	4b06      	ldr	r3, [pc, #24]	; (109b8 <shell_nlip_clear_pkt+0x1c>)
   109a0:	6818      	ldr	r0, [r3, #0]
   109a2:	b120      	cbz	r0, 109ae <shell_nlip_clear_pkt+0x12>
        os_mbuf_free_chain(g_nlip_mbuf);
   109a4:	f7f9 feb5 	bl	a712 <os_mbuf_free_chain>
        g_nlip_mbuf = NULL;
   109a8:	4b03      	ldr	r3, [pc, #12]	; (109b8 <shell_nlip_clear_pkt+0x1c>)
   109aa:	2200      	movs	r2, #0
   109ac:	601a      	str	r2, [r3, #0]
    g_nlip_expected_len = 0;
   109ae:	4b03      	ldr	r3, [pc, #12]	; (109bc <shell_nlip_clear_pkt+0x20>)
   109b0:	2200      	movs	r2, #0
   109b2:	801a      	strh	r2, [r3, #0]
}
   109b4:	bd08      	pop	{r3, pc}
   109b6:	bf00      	nop
   109b8:	200044d8 	.word	0x200044d8
   109bc:	200044d4 	.word	0x200044d4

000109c0 <shell_nlip_process>:
{
   109c0:	b538      	push	{r3, r4, r5, lr}
   109c2:	4605      	mov	r5, r0
    rc = base64_decode(data, data);
   109c4:	4601      	mov	r1, r0
   109c6:	f001 fe63 	bl	12690 <base64_decode>
    if (rc < 0) {
   109ca:	1e04      	subs	r4, r0, #0
   109cc:	db18      	blt.n	10a00 <shell_nlip_process+0x40>
    if (g_nlip_mbuf == NULL) {
   109ce:	4b30      	ldr	r3, [pc, #192]	; (10a90 <shell_nlip_process+0xd0>)
   109d0:	681b      	ldr	r3, [r3, #0]
   109d2:	b1bb      	cbz	r3, 10a04 <shell_nlip_process+0x44>
    copy_len = min(g_nlip_expected_len - OS_MBUF_PKTHDR(g_nlip_mbuf)->omp_len,
   109d4:	4b2e      	ldr	r3, [pc, #184]	; (10a90 <shell_nlip_process+0xd0>)
   109d6:	6818      	ldr	r0, [r3, #0]
   109d8:	8a01      	ldrh	r1, [r0, #16]
   109da:	4b2e      	ldr	r3, [pc, #184]	; (10a94 <shell_nlip_process+0xd4>)
   109dc:	881b      	ldrh	r3, [r3, #0]
   109de:	1a5b      	subs	r3, r3, r1
   109e0:	42a3      	cmp	r3, r4
   109e2:	bfa8      	it	ge
   109e4:	4623      	movge	r3, r4
    rc = os_mbuf_copyinto(g_nlip_mbuf, OS_MBUF_PKTHDR(g_nlip_mbuf)->omp_len,
   109e6:	b29b      	uxth	r3, r3
   109e8:	462a      	mov	r2, r5
   109ea:	f7f9 ffc9 	bl	a980 <os_mbuf_copyinto>
    if (rc != 0) {
   109ee:	4604      	mov	r4, r0
   109f0:	b930      	cbnz	r0, 10a00 <shell_nlip_process+0x40>
    if (OS_MBUF_PKTHDR(g_nlip_mbuf)->omp_len == g_nlip_expected_len) {
   109f2:	4b27      	ldr	r3, [pc, #156]	; (10a90 <shell_nlip_process+0xd0>)
   109f4:	681d      	ldr	r5, [r3, #0]
   109f6:	8a2a      	ldrh	r2, [r5, #16]
   109f8:	4b26      	ldr	r3, [pc, #152]	; (10a94 <shell_nlip_process+0xd4>)
   109fa:	881b      	ldrh	r3, [r3, #0]
   109fc:	429a      	cmp	r2, r3
   109fe:	d014      	beq.n	10a2a <shell_nlip_process+0x6a>
}
   10a00:	4620      	mov	r0, r4
   10a02:	bd38      	pop	{r3, r4, r5, pc}
        if (len < 2) {
   10a04:	2c01      	cmp	r4, #1
   10a06:	dd3c      	ble.n	10a82 <shell_nlip_process+0xc2>
        g_nlip_expected_len = ntohs(*(uint16_t *) data);
   10a08:	882b      	ldrh	r3, [r5, #0]
   10a0a:	0218      	lsls	r0, r3, #8
   10a0c:	ea40 2013 	orr.w	r0, r0, r3, lsr #8
   10a10:	b280      	uxth	r0, r0
   10a12:	4b20      	ldr	r3, [pc, #128]	; (10a94 <shell_nlip_process+0xd4>)
   10a14:	8018      	strh	r0, [r3, #0]
        g_nlip_mbuf = os_msys_get_pkthdr(g_nlip_expected_len, 0);
   10a16:	2100      	movs	r1, #0
   10a18:	f7f9 f812 	bl	9a40 <os_msys_get_pkthdr>
   10a1c:	4b1c      	ldr	r3, [pc, #112]	; (10a90 <shell_nlip_process+0xd0>)
   10a1e:	6018      	str	r0, [r3, #0]
        if (!g_nlip_mbuf) {
   10a20:	2800      	cmp	r0, #0
   10a22:	d031      	beq.n	10a88 <shell_nlip_process+0xc8>
        data += sizeof(uint16_t);
   10a24:	3502      	adds	r5, #2
        len -= sizeof(uint16_t);
   10a26:	3c02      	subs	r4, #2
   10a28:	e7d4      	b.n	109d4 <shell_nlip_process+0x14>
        if (g_shell_nlip_in_func) {
   10a2a:	4b1b      	ldr	r3, [pc, #108]	; (10a98 <shell_nlip_process+0xd8>)
   10a2c:	681b      	ldr	r3, [r3, #0]
   10a2e:	b323      	cbz	r3, 10a7a <shell_nlip_process+0xba>
            crc = CRC16_INITIAL_CRC;
   10a30:	2000      	movs	r0, #0
   10a32:	e004      	b.n	10a3e <shell_nlip_process+0x7e>
                crc = crc16_ccitt(crc, m->om_data, m->om_len);
   10a34:	88ea      	ldrh	r2, [r5, #6]
   10a36:	6829      	ldr	r1, [r5, #0]
   10a38:	f001 fc50 	bl	122dc <crc16_ccitt>
            for (m = g_nlip_mbuf; m; m = SLIST_NEXT(m, om_next)) {
   10a3c:	68ed      	ldr	r5, [r5, #12]
   10a3e:	2d00      	cmp	r5, #0
   10a40:	d1f8      	bne.n	10a34 <shell_nlip_process+0x74>
            if (crc == 0 && g_nlip_expected_len >= sizeof(crc)) {
   10a42:	b918      	cbnz	r0, 10a4c <shell_nlip_process+0x8c>
   10a44:	4b13      	ldr	r3, [pc, #76]	; (10a94 <shell_nlip_process+0xd4>)
   10a46:	881b      	ldrh	r3, [r3, #0]
   10a48:	2b01      	cmp	r3, #1
   10a4a:	d809      	bhi.n	10a60 <shell_nlip_process+0xa0>
                os_mbuf_free_chain(g_nlip_mbuf);
   10a4c:	4b10      	ldr	r3, [pc, #64]	; (10a90 <shell_nlip_process+0xd0>)
   10a4e:	6818      	ldr	r0, [r3, #0]
   10a50:	f7f9 fe5f 	bl	a712 <os_mbuf_free_chain>
        g_nlip_mbuf = NULL;
   10a54:	2300      	movs	r3, #0
   10a56:	4a0e      	ldr	r2, [pc, #56]	; (10a90 <shell_nlip_process+0xd0>)
   10a58:	6013      	str	r3, [r2, #0]
        g_nlip_expected_len = 0;
   10a5a:	4a0e      	ldr	r2, [pc, #56]	; (10a94 <shell_nlip_process+0xd4>)
   10a5c:	8013      	strh	r3, [r2, #0]
   10a5e:	e7cf      	b.n	10a00 <shell_nlip_process+0x40>
                os_mbuf_adj(g_nlip_mbuf, -sizeof(crc));
   10a60:	4d0b      	ldr	r5, [pc, #44]	; (10a90 <shell_nlip_process+0xd0>)
   10a62:	f06f 0101 	mvn.w	r1, #1
   10a66:	6828      	ldr	r0, [r5, #0]
   10a68:	f7f9 fef6 	bl	a858 <os_mbuf_adj>
                g_shell_nlip_in_func(g_nlip_mbuf, g_shell_nlip_in_arg);
   10a6c:	4b0a      	ldr	r3, [pc, #40]	; (10a98 <shell_nlip_process+0xd8>)
   10a6e:	681b      	ldr	r3, [r3, #0]
   10a70:	4a0a      	ldr	r2, [pc, #40]	; (10a9c <shell_nlip_process+0xdc>)
   10a72:	6811      	ldr	r1, [r2, #0]
   10a74:	6828      	ldr	r0, [r5, #0]
   10a76:	4798      	blx	r3
   10a78:	e7ec      	b.n	10a54 <shell_nlip_process+0x94>
            os_mbuf_free_chain(g_nlip_mbuf);
   10a7a:	4628      	mov	r0, r5
   10a7c:	f7f9 fe49 	bl	a712 <os_mbuf_free_chain>
   10a80:	e7e8      	b.n	10a54 <shell_nlip_process+0x94>
            rc = -1;
   10a82:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   10a86:	e7bb      	b.n	10a00 <shell_nlip_process+0x40>
            rc = -1;
   10a88:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   10a8c:	e7b8      	b.n	10a00 <shell_nlip_process+0x40>
   10a8e:	bf00      	nop
   10a90:	200044d8 	.word	0x200044d8
   10a94:	200044d4 	.word	0x200044d4
   10a98:	200044e0 	.word	0x200044e0
   10a9c:	200044dc 	.word	0x200044dc

00010aa0 <shell_nlip_input_register>:
    g_shell_nlip_in_func = nf;
   10aa0:	4b02      	ldr	r3, [pc, #8]	; (10aac <shell_nlip_input_register+0xc>)
   10aa2:	6018      	str	r0, [r3, #0]
    g_shell_nlip_in_arg = arg;
   10aa4:	4b02      	ldr	r3, [pc, #8]	; (10ab0 <shell_nlip_input_register+0x10>)
   10aa6:	6019      	str	r1, [r3, #0]
}
   10aa8:	2000      	movs	r0, #0
   10aaa:	4770      	bx	lr
   10aac:	200044e0 	.word	0x200044e0
   10ab0:	200044dc 	.word	0x200044dc

00010ab4 <shell_nlip_output>:
{
   10ab4:	b510      	push	{r4, lr}
   10ab6:	4604      	mov	r4, r0
    return os_mqueue_put(&g_shell_nlip_mq, os_eventq_dflt_get(), m);
   10ab8:	f7f8 feaa 	bl	9810 <os_eventq_dflt_get>
   10abc:	4601      	mov	r1, r0
   10abe:	4622      	mov	r2, r4
   10ac0:	4801      	ldr	r0, [pc, #4]	; (10ac8 <shell_nlip_output+0x14>)
   10ac2:	f7f9 fdcd 	bl	a660 <os_mqueue_put>
}
   10ac6:	bd10      	pop	{r4, pc}
   10ac8:	200044e4 	.word	0x200044e4

00010acc <shell_nlip_init>:

void
shell_nlip_init(void)
{
   10acc:	b508      	push	{r3, lr}
    os_mqueue_init(&g_shell_nlip_mq, shell_event_data_in, NULL);
   10ace:	2200      	movs	r2, #0
   10ad0:	4902      	ldr	r1, [pc, #8]	; (10adc <shell_nlip_init+0x10>)
   10ad2:	4803      	ldr	r0, [pc, #12]	; (10ae0 <shell_nlip_init+0x14>)
   10ad4:	f7f9 fda8 	bl	a628 <os_mqueue_init>
}
   10ad8:	bd08      	pop	{r3, pc}
   10ada:	bf00      	nop
   10adc:	0001097d 	.word	0x0001097d
   10ae0:	200044e4 	.word	0x200044e4

00010ae4 <shell_os_ls_dev>:
    return 0;
}

static int
shell_os_ls_dev(struct os_dev *dev, void *arg)
{
   10ae4:	b500      	push	{lr}
   10ae6:	b083      	sub	sp, #12
   10ae8:	4602      	mov	r2, r0
   10aea:	4608      	mov	r0, r1
    struct streamer *streamer;

    streamer = arg;
    streamer_printf(streamer, "%4d %3x %s\n",
   10aec:	69d3      	ldr	r3, [r2, #28]
   10aee:	9300      	str	r3, [sp, #0]
   10af0:	7ed3      	ldrb	r3, [r2, #27]
   10af2:	7e92      	ldrb	r2, [r2, #26]
   10af4:	4903      	ldr	r1, [pc, #12]	; (10b04 <shell_os_ls_dev+0x20>)
   10af6:	f001 fc10 	bl	1231a <streamer_printf>
                    dev->od_open_ref, dev->od_flags, dev->od_name);
    return 0;
}
   10afa:	2000      	movs	r0, #0
   10afc:	b003      	add	sp, #12
   10afe:	f85d fb04 	ldr.w	pc, [sp], #4
   10b02:	bf00      	nop
   10b04:	00023520 	.word	0x00023520

00010b08 <shell_os_mpool_display_cmd>:
{
   10b08:	b5f0      	push	{r4, r5, r6, r7, lr}
   10b0a:	b091      	sub	sp, #68	; 0x44
   10b0c:	461e      	mov	r6, r3
    if (argc > 1 && strcmp(argv[1], "")) {
   10b0e:	2901      	cmp	r1, #1
   10b10:	dd04      	ble.n	10b1c <shell_os_mpool_display_cmd+0x14>
   10b12:	6855      	ldr	r5, [r2, #4]
   10b14:	782b      	ldrb	r3, [r5, #0]
   10b16:	b913      	cbnz	r3, 10b1e <shell_os_mpool_display_cmd+0x16>
    name = NULL;
   10b18:	2500      	movs	r5, #0
   10b1a:	e000      	b.n	10b1e <shell_os_mpool_display_cmd+0x16>
   10b1c:	2500      	movs	r5, #0
    streamer_printf(streamer, "Mempools: \n");
   10b1e:	491d      	ldr	r1, [pc, #116]	; (10b94 <shell_os_mpool_display_cmd+0x8c>)
   10b20:	4630      	mov	r0, r6
   10b22:	f001 fbfa 	bl	1231a <streamer_printf>
    streamer_printf(streamer, "%32s %5s %4s %4s %4s\n",
   10b26:	4b1c      	ldr	r3, [pc, #112]	; (10b98 <shell_os_mpool_display_cmd+0x90>)
   10b28:	9302      	str	r3, [sp, #8]
   10b2a:	4b1c      	ldr	r3, [pc, #112]	; (10b9c <shell_os_mpool_display_cmd+0x94>)
   10b2c:	9301      	str	r3, [sp, #4]
   10b2e:	4b1c      	ldr	r3, [pc, #112]	; (10ba0 <shell_os_mpool_display_cmd+0x98>)
   10b30:	9300      	str	r3, [sp, #0]
   10b32:	4b1c      	ldr	r3, [pc, #112]	; (10ba4 <shell_os_mpool_display_cmd+0x9c>)
   10b34:	4a1c      	ldr	r2, [pc, #112]	; (10ba8 <shell_os_mpool_display_cmd+0xa0>)
   10b36:	491d      	ldr	r1, [pc, #116]	; (10bac <shell_os_mpool_display_cmd+0xa4>)
   10b38:	4630      	mov	r0, r6
   10b3a:	f001 fbee 	bl	1231a <streamer_printf>
    found = 0;
   10b3e:	2700      	movs	r7, #0
    mp = NULL;
   10b40:	463c      	mov	r4, r7
   10b42:	e00b      	b.n	10b5c <shell_os_mpool_display_cmd+0x54>
        streamer_printf(streamer, "%32s %5d %4d %4d %4d\n", omi.omi_name,
   10b44:	9b07      	ldr	r3, [sp, #28]
   10b46:	9302      	str	r3, [sp, #8]
   10b48:	9a06      	ldr	r2, [sp, #24]
   10b4a:	9201      	str	r2, [sp, #4]
   10b4c:	9a05      	ldr	r2, [sp, #20]
   10b4e:	9200      	str	r2, [sp, #0]
   10b50:	9b04      	ldr	r3, [sp, #16]
   10b52:	aa08      	add	r2, sp, #32
   10b54:	4916      	ldr	r1, [pc, #88]	; (10bb0 <shell_os_mpool_display_cmd+0xa8>)
   10b56:	4630      	mov	r0, r6
   10b58:	f001 fbdf 	bl	1231a <streamer_printf>
        mp = os_mempool_info_get_next(mp, &omi);
   10b5c:	a904      	add	r1, sp, #16
   10b5e:	4620      	mov	r0, r4
   10b60:	f7f8 fede 	bl	9920 <os_mempool_info_get_next>
        if (mp == NULL) {
   10b64:	4604      	mov	r4, r0
   10b66:	b148      	cbz	r0, 10b7c <shell_os_mpool_display_cmd+0x74>
        if (name) {
   10b68:	2d00      	cmp	r5, #0
   10b6a:	d0eb      	beq.n	10b44 <shell_os_mpool_display_cmd+0x3c>
            if (strcmp(name, omi.omi_name)) {
   10b6c:	a908      	add	r1, sp, #32
   10b6e:	4628      	mov	r0, r5
   10b70:	f7fc ff72 	bl	da58 <strcmp>
   10b74:	2800      	cmp	r0, #0
   10b76:	d1f1      	bne.n	10b5c <shell_os_mpool_display_cmd+0x54>
                found = 1;
   10b78:	2701      	movs	r7, #1
   10b7a:	e7e3      	b.n	10b44 <shell_os_mpool_display_cmd+0x3c>
    if (name && !found) {
   10b7c:	b105      	cbz	r5, 10b80 <shell_os_mpool_display_cmd+0x78>
   10b7e:	b117      	cbz	r7, 10b86 <shell_os_mpool_display_cmd+0x7e>
}
   10b80:	2000      	movs	r0, #0
   10b82:	b011      	add	sp, #68	; 0x44
   10b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
        streamer_printf(streamer, "Couldn't find a memory pool with name %s\n",
   10b86:	462a      	mov	r2, r5
   10b88:	490a      	ldr	r1, [pc, #40]	; (10bb4 <shell_os_mpool_display_cmd+0xac>)
   10b8a:	4630      	mov	r0, r6
   10b8c:	f001 fbc5 	bl	1231a <streamer_printf>
   10b90:	e7f6      	b.n	10b80 <shell_os_mpool_display_cmd+0x78>
   10b92:	bf00      	nop
   10b94:	0002352c 	.word	0x0002352c
   10b98:	00023558 	.word	0x00023558
   10b9c:	0002355c 	.word	0x0002355c
   10ba0:	00024000 	.word	0x00024000
   10ba4:	00023538 	.word	0x00023538
   10ba8:	00024b98 	.word	0x00024b98
   10bac:	00023540 	.word	0x00023540
   10bb0:	00023564 	.word	0x00023564
   10bb4:	0002357c 	.word	0x0002357c

00010bb8 <shell_os_date_cmd>:
{
   10bb8:	b530      	push	{r4, r5, lr}
   10bba:	b08f      	sub	sp, #60	; 0x3c
   10bbc:	461c      	mov	r4, r3
    if (argc == 0) {
   10bbe:	3901      	subs	r1, #1
   10bc0:	d00f      	beq.n	10be2 <shell_os_date_cmd+0x2a>
   10bc2:	4610      	mov	r0, r2
    } else if (argc == 1) {
   10bc4:	2901      	cmp	r1, #1
   10bc6:	d132      	bne.n	10c2e <shell_os_date_cmd+0x76>
        rc = datetime_parse(*argv, &tv, &tz);
   10bc8:	aa09      	add	r2, sp, #36	; 0x24
   10bca:	a90a      	add	r1, sp, #40	; 0x28
   10bcc:	6840      	ldr	r0, [r0, #4]
   10bce:	f001 fa1d 	bl	1200c <datetime_parse>
        if (rc == 0) {
   10bd2:	4605      	mov	r5, r0
   10bd4:	bb30      	cbnz	r0, 10c24 <shell_os_date_cmd+0x6c>
            rc = os_settimeofday(&tv, &tz);
   10bd6:	a909      	add	r1, sp, #36	; 0x24
   10bd8:	a80a      	add	r0, sp, #40	; 0x28
   10bda:	f7f9 fbb1 	bl	a340 <os_settimeofday>
   10bde:	4605      	mov	r5, r0
   10be0:	e011      	b.n	10c06 <shell_os_date_cmd+0x4e>
        rc = os_gettimeofday(&tv, &tz);
   10be2:	a909      	add	r1, sp, #36	; 0x24
   10be4:	a80a      	add	r0, sp, #40	; 0x28
   10be6:	f7f9 fb5f 	bl	a2a8 <os_gettimeofday>
        assert(rc == 0);
   10bea:	b978      	cbnz	r0, 10c0c <shell_os_date_cmd+0x54>
        rc = datetime_format(&tv, &tz, buf, sizeof(buf));
   10bec:	2321      	movs	r3, #33	; 0x21
   10bee:	466a      	mov	r2, sp
   10bf0:	a909      	add	r1, sp, #36	; 0x24
   10bf2:	a80a      	add	r0, sp, #40	; 0x28
   10bf4:	f001 fb0a 	bl	1220c <datetime_format>
        assert(rc == 0);
   10bf8:	4605      	mov	r5, r0
   10bfa:	b968      	cbnz	r0, 10c18 <shell_os_date_cmd+0x60>
        streamer_printf(streamer, "%s\n", buf);
   10bfc:	466a      	mov	r2, sp
   10bfe:	490d      	ldr	r1, [pc, #52]	; (10c34 <shell_os_date_cmd+0x7c>)
   10c00:	4620      	mov	r0, r4
   10c02:	f001 fb8a 	bl	1231a <streamer_printf>
}
   10c06:	4628      	mov	r0, r5
   10c08:	b00f      	add	sp, #60	; 0x3c
   10c0a:	bd30      	pop	{r4, r5, pc}
        assert(rc == 0);
   10c0c:	2300      	movs	r3, #0
   10c0e:	461a      	mov	r2, r3
   10c10:	4619      	mov	r1, r3
   10c12:	4618      	mov	r0, r3
   10c14:	f7f8 fa1a 	bl	904c <__assert_func>
        assert(rc == 0);
   10c18:	2300      	movs	r3, #0
   10c1a:	461a      	mov	r2, r3
   10c1c:	4619      	mov	r1, r3
   10c1e:	4618      	mov	r0, r3
   10c20:	f7f8 fa14 	bl	904c <__assert_func>
            streamer_printf(streamer, "Invalid datetime\n");
   10c24:	4904      	ldr	r1, [pc, #16]	; (10c38 <shell_os_date_cmd+0x80>)
   10c26:	4620      	mov	r0, r4
   10c28:	f001 fb77 	bl	1231a <streamer_printf>
   10c2c:	e7eb      	b.n	10c06 <shell_os_date_cmd+0x4e>
        rc = -1;
   10c2e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    return rc;
   10c32:	e7e8      	b.n	10c06 <shell_os_date_cmd+0x4e>
   10c34:	000235cc 	.word	0x000235cc
   10c38:	000235a8 	.word	0x000235a8

00010c3c <shell_os_reset_cmd>:
{
   10c3c:	b508      	push	{r3, lr}
    os_time_delay(OS_TICKS_PER_SEC / 10);
   10c3e:	200c      	movs	r0, #12
   10c40:	f7f9 fb1e 	bl	a280 <os_time_delay>
    os_reboot(HAL_RESET_REQUESTED);
   10c44:	2006      	movs	r0, #6
   10c46:	f7f8 fb6a 	bl	931e <os_reboot>
}
   10c4a:	2000      	movs	r0, #0
   10c4c:	bd08      	pop	{r3, pc}
	...

00010c50 <shell_os_ls_dev_cmd>:

int
shell_os_ls_dev_cmd(const struct shell_cmd *cmd, int argc, char **argv,
                    struct streamer *streamer)
{
   10c50:	b510      	push	{r4, lr}
   10c52:	b082      	sub	sp, #8
   10c54:	461c      	mov	r4, r3
    streamer_printf(streamer, "%4s %3s %s\n", "ref", "flg", "name");
   10c56:	4b07      	ldr	r3, [pc, #28]	; (10c74 <shell_os_ls_dev_cmd+0x24>)
   10c58:	9300      	str	r3, [sp, #0]
   10c5a:	4b07      	ldr	r3, [pc, #28]	; (10c78 <shell_os_ls_dev_cmd+0x28>)
   10c5c:	4a07      	ldr	r2, [pc, #28]	; (10c7c <shell_os_ls_dev_cmd+0x2c>)
   10c5e:	4908      	ldr	r1, [pc, #32]	; (10c80 <shell_os_ls_dev_cmd+0x30>)
   10c60:	4620      	mov	r0, r4
   10c62:	f001 fb5a 	bl	1231a <streamer_printf>
    os_dev_walk(shell_os_ls_dev, streamer);
   10c66:	4621      	mov	r1, r4
   10c68:	4806      	ldr	r0, [pc, #24]	; (10c84 <shell_os_ls_dev_cmd+0x34>)
   10c6a:	f7f8 fd05 	bl	9678 <os_dev_walk>
    return 0;
}
   10c6e:	2000      	movs	r0, #0
   10c70:	b002      	add	sp, #8
   10c72:	bd10      	pop	{r4, pc}
   10c74:	00024b98 	.word	0x00024b98
   10c78:	000235bc 	.word	0x000235bc
   10c7c:	000235c0 	.word	0x000235c0
   10c80:	000235c4 	.word	0x000235c4
   10c84:	00010ae5 	.word	0x00010ae5

00010c88 <shell_os_tasks_display_cmd>:
{
   10c88:	b5f0      	push	{r4, r5, r6, r7, lr}
   10c8a:	b097      	sub	sp, #92	; 0x5c
   10c8c:	461e      	mov	r6, r3
    if (argc > 1 && strcmp(argv[1], "")) {
   10c8e:	2901      	cmp	r1, #1
   10c90:	dd04      	ble.n	10c9c <shell_os_tasks_display_cmd+0x14>
   10c92:	6855      	ldr	r5, [r2, #4]
   10c94:	782b      	ldrb	r3, [r5, #0]
   10c96:	b913      	cbnz	r3, 10c9e <shell_os_tasks_display_cmd+0x16>
    name = NULL;
   10c98:	2500      	movs	r5, #0
   10c9a:	e000      	b.n	10c9e <shell_os_tasks_display_cmd+0x16>
   10c9c:	2500      	movs	r5, #0
    streamer_printf(streamer, "Tasks: \n");
   10c9e:	4928      	ldr	r1, [pc, #160]	; (10d40 <shell_os_tasks_display_cmd+0xb8>)
   10ca0:	4630      	mov	r0, r6
   10ca2:	f001 fb3a 	bl	1231a <streamer_printf>
    streamer_printf(streamer, "%8s %3s %3s %8s %8s %8s %8s %8s %8s %3s\n",
   10ca6:	4b27      	ldr	r3, [pc, #156]	; (10d44 <shell_os_tasks_display_cmd+0xbc>)
   10ca8:	9307      	str	r3, [sp, #28]
   10caa:	4b27      	ldr	r3, [pc, #156]	; (10d48 <shell_os_tasks_display_cmd+0xc0>)
   10cac:	9306      	str	r3, [sp, #24]
   10cae:	4b27      	ldr	r3, [pc, #156]	; (10d4c <shell_os_tasks_display_cmd+0xc4>)
   10cb0:	9305      	str	r3, [sp, #20]
   10cb2:	4b27      	ldr	r3, [pc, #156]	; (10d50 <shell_os_tasks_display_cmd+0xc8>)
   10cb4:	9304      	str	r3, [sp, #16]
   10cb6:	4b27      	ldr	r3, [pc, #156]	; (10d54 <shell_os_tasks_display_cmd+0xcc>)
   10cb8:	9303      	str	r3, [sp, #12]
   10cba:	4b27      	ldr	r3, [pc, #156]	; (10d58 <shell_os_tasks_display_cmd+0xd0>)
   10cbc:	9302      	str	r3, [sp, #8]
   10cbe:	4b27      	ldr	r3, [pc, #156]	; (10d5c <shell_os_tasks_display_cmd+0xd4>)
   10cc0:	9301      	str	r3, [sp, #4]
   10cc2:	4b27      	ldr	r3, [pc, #156]	; (10d60 <shell_os_tasks_display_cmd+0xd8>)
   10cc4:	9300      	str	r3, [sp, #0]
   10cc6:	4b27      	ldr	r3, [pc, #156]	; (10d64 <shell_os_tasks_display_cmd+0xdc>)
   10cc8:	4a27      	ldr	r2, [pc, #156]	; (10d68 <shell_os_tasks_display_cmd+0xe0>)
   10cca:	4928      	ldr	r1, [pc, #160]	; (10d6c <shell_os_tasks_display_cmd+0xe4>)
   10ccc:	4630      	mov	r0, r6
   10cce:	f001 fb24 	bl	1231a <streamer_printf>
    found = 0;
   10cd2:	2700      	movs	r7, #0
    prev_task = NULL;
   10cd4:	463c      	mov	r4, r7
   10cd6:	e017      	b.n	10d08 <shell_os_tasks_display_cmd+0x80>
                oti.oti_name, oti.oti_prio, oti.oti_taskid,
   10cd8:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
                oti.oti_stksize, oti.oti_stkusage,
   10cdc:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   10ce0:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
        streamer_printf(streamer, "%8s %3u %3u %8lu %8lu %8u %8u %8lu %8lu\n",
   10ce4:	980d      	ldr	r0, [sp, #52]	; 0x34
   10ce6:	9006      	str	r0, [sp, #24]
   10ce8:	980c      	ldr	r0, [sp, #48]	; 0x30
   10cea:	9005      	str	r0, [sp, #20]
   10cec:	9104      	str	r1, [sp, #16]
   10cee:	9303      	str	r3, [sp, #12]
   10cf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10cf2:	9302      	str	r3, [sp, #8]
   10cf4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10cf6:	9101      	str	r1, [sp, #4]
   10cf8:	9200      	str	r2, [sp, #0]
   10cfa:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10cfe:	aa0e      	add	r2, sp, #56	; 0x38
   10d00:	491b      	ldr	r1, [pc, #108]	; (10d70 <shell_os_tasks_display_cmd+0xe8>)
   10d02:	4630      	mov	r0, r6
   10d04:	f001 fb09 	bl	1231a <streamer_printf>
        prev_task = os_task_info_get_next(prev_task, &oti);
   10d08:	a908      	add	r1, sp, #32
   10d0a:	4620      	mov	r0, r4
   10d0c:	f7f9 f9e8 	bl	a0e0 <os_task_info_get_next>
        if (prev_task == NULL) {
   10d10:	4604      	mov	r4, r0
   10d12:	b148      	cbz	r0, 10d28 <shell_os_tasks_display_cmd+0xa0>
        if (name) {
   10d14:	2d00      	cmp	r5, #0
   10d16:	d0df      	beq.n	10cd8 <shell_os_tasks_display_cmd+0x50>
            if (strcmp(name, oti.oti_name)) {
   10d18:	a90e      	add	r1, sp, #56	; 0x38
   10d1a:	4628      	mov	r0, r5
   10d1c:	f7fc fe9c 	bl	da58 <strcmp>
   10d20:	2800      	cmp	r0, #0
   10d22:	d1f1      	bne.n	10d08 <shell_os_tasks_display_cmd+0x80>
                found = 1;
   10d24:	2701      	movs	r7, #1
   10d26:	e7d7      	b.n	10cd8 <shell_os_tasks_display_cmd+0x50>
    if (name && !found) {
   10d28:	b105      	cbz	r5, 10d2c <shell_os_tasks_display_cmd+0xa4>
   10d2a:	b117      	cbz	r7, 10d32 <shell_os_tasks_display_cmd+0xaa>
}
   10d2c:	2000      	movs	r0, #0
   10d2e:	b017      	add	sp, #92	; 0x5c
   10d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
        streamer_printf(streamer, "Couldn't find task with name %s\n", name);
   10d32:	462a      	mov	r2, r5
   10d34:	490f      	ldr	r1, [pc, #60]	; (10d74 <shell_os_tasks_display_cmd+0xec>)
   10d36:	4630      	mov	r0, r6
   10d38:	f001 faef 	bl	1231a <streamer_printf>
   10d3c:	e7f6      	b.n	10d2c <shell_os_tasks_display_cmd+0xa4>
   10d3e:	bf00      	nop
   10d40:	000235d0 	.word	0x000235d0
   10d44:	000235bc 	.word	0x000235bc
   10d48:	00023614 	.word	0x00023614
   10d4c:	0002361c 	.word	0x0002361c
   10d50:	00023624 	.word	0x00023624
   10d54:	0002362c 	.word	0x0002362c
   10d58:	00023634 	.word	0x00023634
   10d5c:	00023638 	.word	0x00023638
   10d60:	00023640 	.word	0x00023640
   10d64:	000235dc 	.word	0x000235dc
   10d68:	000235e0 	.word	0x000235e0
   10d6c:	000235e8 	.word	0x000235e8
   10d70:	00023644 	.word	0x00023644
   10d74:	00023670 	.word	0x00023670

00010d78 <shell_os_register>:
    { 0 },
};

void
shell_os_register(void)
{
   10d78:	b530      	push	{r4, r5, lr}
   10d7a:	b083      	sub	sp, #12
    const struct shell_cmd *cmd;
    int rc;

    for (cmd = os_commands; cmd->sc_cmd != NULL; cmd++) {
   10d7c:	4c0a      	ldr	r4, [pc, #40]	; (10da8 <shell_os_register+0x30>)
   10d7e:	e000      	b.n	10d82 <shell_os_register+0xa>
   10d80:	3410      	adds	r4, #16
   10d82:	68a3      	ldr	r3, [r4, #8]
   10d84:	b16b      	cbz	r3, 10da2 <shell_os_register+0x2a>
        rc = shell_cmd_register(cmd);
   10d86:	4620      	mov	r0, r4
   10d88:	f7ff fcf4 	bl	10774 <shell_cmd_register>
        SYSINIT_PANIC_ASSERT_MSG(
   10d8c:	2800      	cmp	r0, #0
   10d8e:	d0f7      	beq.n	10d80 <shell_os_register+0x8>
   10d90:	2000      	movs	r0, #0
   10d92:	9000      	str	r0, [sp, #0]
   10d94:	4b05      	ldr	r3, [pc, #20]	; (10dac <shell_os_register+0x34>)
   10d96:	681d      	ldr	r5, [r3, #0]
   10d98:	4603      	mov	r3, r0
   10d9a:	4602      	mov	r2, r0
   10d9c:	4601      	mov	r1, r0
   10d9e:	47a8      	blx	r5
   10da0:	e7ee      	b.n	10d80 <shell_os_register+0x8>
            rc == 0, "Failed to register OS shell commands");
    }
}
   10da2:	b003      	add	sp, #12
   10da4:	bd30      	pop	{r4, r5, pc}
   10da6:	bf00      	nop
   10da8:	00023760 	.word	0x00023760
   10dac:	2000064c 	.word	0x2000064c

00010db0 <shell_ticks_cmd>:
/**
 * Handles the 'ticks' command
 */
int
shell_ticks_cmd(int argc, char **argv)
{
   10db0:	b510      	push	{r4, lr}
    if (argc > 1) {
   10db2:	2801      	cmp	r0, #1
   10db4:	dd16      	ble.n	10de4 <shell_ticks_cmd+0x34>
        if (!strcmp(argv[1], "on")) {
   10db6:	684c      	ldr	r4, [r1, #4]
   10db8:	490d      	ldr	r1, [pc, #52]	; (10df0 <shell_ticks_cmd+0x40>)
   10dba:	4620      	mov	r0, r4
   10dbc:	f7fc fe4c 	bl	da58 <strcmp>
   10dc0:	b150      	cbz	r0, 10dd8 <shell_ticks_cmd+0x28>
            console_yes_ticks();
            console_printf(" Console Ticks on\n");
        }
        else if (!strcmp(argv[1],"off")) {
   10dc2:	490c      	ldr	r1, [pc, #48]	; (10df4 <shell_ticks_cmd+0x44>)
   10dc4:	4620      	mov	r0, r4
   10dc6:	f7fc fe47 	bl	da58 <strcmp>
   10dca:	b970      	cbnz	r0, 10dea <shell_ticks_cmd+0x3a>
            console_printf(" Console Ticks off\n");
   10dcc:	480a      	ldr	r0, [pc, #40]	; (10df8 <shell_ticks_cmd+0x48>)
   10dce:	f7fe fde1 	bl	f994 <console_printf>
            console_no_ticks();
   10dd2:	f7fe fe95 	bl	fb00 <console_no_ticks>
        }
        return 0;
   10dd6:	e008      	b.n	10dea <shell_ticks_cmd+0x3a>
            console_yes_ticks();
   10dd8:	f7fe fe98 	bl	fb0c <console_yes_ticks>
            console_printf(" Console Ticks on\n");
   10ddc:	4807      	ldr	r0, [pc, #28]	; (10dfc <shell_ticks_cmd+0x4c>)
   10dde:	f7fe fdd9 	bl	f994 <console_printf>
   10de2:	e002      	b.n	10dea <shell_ticks_cmd+0x3a>
    }
    console_printf(" Usage: ticks [on|off]\n");
   10de4:	4806      	ldr	r0, [pc, #24]	; (10e00 <shell_ticks_cmd+0x50>)
   10de6:	f7fe fdd5 	bl	f994 <console_printf>
    return 0;
}
   10dea:	2000      	movs	r0, #0
   10dec:	bd10      	pop	{r4, pc}
   10dee:	bf00      	nop
   10df0:	000237f0 	.word	0x000237f0
   10df4:	00023808 	.word	0x00023808
   10df8:	0002380c 	.word	0x0002380c
   10dfc:	000237f4 	.word	0x000237f4
   10e00:	00023820 	.word	0x00023820

00010e04 <shell_prompt_register>:
};


void
shell_prompt_register(void)
{
   10e04:	b508      	push	{r3, lr}
    shell_register(SHELL_PROMPT, prompt_commands);
   10e06:	4902      	ldr	r1, [pc, #8]	; (10e10 <shell_prompt_register+0xc>)
   10e08:	4802      	ldr	r0, [pc, #8]	; (10e14 <shell_prompt_register+0x10>)
   10e0a:	f7ff fc91 	bl	10730 <shell_register>
}
   10e0e:	bd08      	pop	{r3, pc}
   10e10:	0002387c 	.word	0x0002387c
   10e14:	00023838 	.word	0x00023838

00010e18 <stats_offset>:
    STAILQ_HEAD_INITIALIZER(g_stats_registry);

static size_t
stats_offset(const struct stats_hdr *hdr)
{
    if (hdr->s_flags & STATS_HDR_F_PERSIST) {
   10e18:	88c3      	ldrh	r3, [r0, #6]
   10e1a:	f013 0f01 	tst.w	r3, #1
   10e1e:	d001      	beq.n	10e24 <stats_offset+0xc>
        return sizeof (struct stats_persisted_hdr);
   10e20:	2038      	movs	r0, #56	; 0x38
   10e22:	4770      	bx	lr
    } else {
        return sizeof (struct stats_hdr);
   10e24:	2014      	movs	r0, #20
    }
}
   10e26:	4770      	bx	lr

00010e28 <stats_register_internal>:
    return (uint8_t *)hdr + offset;
}

static int
stats_register_internal(const char *name, struct stats_hdr *shdr)
{
   10e28:	b570      	push	{r4, r5, r6, lr}
   10e2a:	4606      	mov	r6, r0
   10e2c:	460d      	mov	r5, r1
    int rc;

    /* Don't allow duplicate entries, return an error if this stat
     * is already registered.
     */
    STAILQ_FOREACH(cur, &g_stats_registry, s_next) {
   10e2e:	4b0f      	ldr	r3, [pc, #60]	; (10e6c <stats_register_internal+0x44>)
   10e30:	681c      	ldr	r4, [r3, #0]
   10e32:	e000      	b.n	10e36 <stats_register_internal+0xe>
   10e34:	6924      	ldr	r4, [r4, #16]
   10e36:	b14c      	cbz	r4, 10e4c <stats_register_internal+0x24>
        if (!strcmp(cur->s_name, name) || cur == shdr) {
   10e38:	4631      	mov	r1, r6
   10e3a:	6820      	ldr	r0, [r4, #0]
   10e3c:	f7fc fe0c 	bl	da58 <strcmp>
   10e40:	b188      	cbz	r0, 10e66 <stats_register_internal+0x3e>
   10e42:	42ac      	cmp	r4, r5
   10e44:	d1f6      	bne.n	10e34 <stats_register_internal+0xc>

    STATS_INC(g_stats_stats, num_registered);

    return (0);
err:
    return (rc);
   10e46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10e4a:	e00b      	b.n	10e64 <stats_register_internal+0x3c>
    shdr->s_name = name;
   10e4c:	602e      	str	r6, [r5, #0]
    STAILQ_INSERT_TAIL(&g_stats_registry, shdr, s_next);
   10e4e:	2000      	movs	r0, #0
   10e50:	6128      	str	r0, [r5, #16]
   10e52:	4b06      	ldr	r3, [pc, #24]	; (10e6c <stats_register_internal+0x44>)
   10e54:	685a      	ldr	r2, [r3, #4]
   10e56:	6015      	str	r5, [r2, #0]
   10e58:	3510      	adds	r5, #16
   10e5a:	605d      	str	r5, [r3, #4]
    STATS_INC(g_stats_stats, num_registered);
   10e5c:	4a04      	ldr	r2, [pc, #16]	; (10e70 <stats_register_internal+0x48>)
   10e5e:	6953      	ldr	r3, [r2, #20]
   10e60:	3301      	adds	r3, #1
   10e62:	6153      	str	r3, [r2, #20]
}
   10e64:	bd70      	pop	{r4, r5, r6, pc}
    return (rc);
   10e66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10e6a:	e7fb      	b.n	10e64 <stats_register_internal+0x3c>
   10e6c:	20000624 	.word	0x20000624
   10e70:	200044fc 	.word	0x200044fc

00010e74 <stats_size>:
    return hdr->s_cnt * hdr->s_size;
   10e74:	7943      	ldrb	r3, [r0, #5]
   10e76:	7900      	ldrb	r0, [r0, #4]
}
   10e78:	fb03 f000 	mul.w	r0, r3, r0
   10e7c:	4770      	bx	lr
	...

00010e80 <stats_walk>:
 * @return 0 on success, the return code of the walk_func on abort.
 *
 */
int
stats_walk(struct stats_hdr *hdr, stats_walk_func_t walk_func, void *arg)
{
   10e80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10e84:	b085      	sub	sp, #20
   10e86:	4604      	mov	r4, r0
   10e88:	4688      	mov	r8, r1
   10e8a:	4617      	mov	r7, r2
    int rc;
#if MYNEWT_VAL(STATS_NAMES)
    int i;
#endif

    start = stats_offset(hdr);
   10e8c:	f7ff ffc4 	bl	10e18 <stats_offset>
   10e90:	4681      	mov	r9, r0
   10e92:	b285      	uxth	r5, r0
    cur = start;
    end = start + stats_size(hdr);
   10e94:	4620      	mov	r0, r4
   10e96:	f7ff ffed 	bl	10e74 <stats_size>
   10e9a:	fa15 f680 	uxtah	r6, r5, r0
   10e9e:	b2b6      	uxth	r6, r6

    while (cur < end) {
   10ea0:	e00d      	b.n	10ebe <stats_walk+0x3e>
         * offset.  This annotation allows for naming only certain statistics,
         * and doesn't enforce ordering restrictions on the stats name map.
         */
        for (i = 0; i < hdr->s_map_cnt; ++i) {
            if (hdr->s_map[i].snm_off == cur) {
                name = hdr->s_map[i].snm_name;
   10ea2:	f8d0 2002 	ldr.w	r2, [r0, #2]
                break;
   10ea6:	e000      	b.n	10eaa <stats_walk+0x2a>
        name = NULL;
   10ea8:	2200      	movs	r2, #0
#endif
        /* Do this check irrespective of whether MYNEWT_VALUE(STATS_NAMES)
         * is set.  Users may only partially name elements in the statistics
         * structure.
         */
        if (name == NULL) {
   10eaa:	b1ca      	cbz	r2, 10ee0 <stats_walk+0x60>
            len = snprintf(name_buf, sizeof(name_buf), "s%d", ent_n);
            name_buf[len] = '\0';
            name = name_buf;
        }

        rc = walk_func(hdr, arg, name, cur);
   10eac:	462b      	mov	r3, r5
   10eae:	4639      	mov	r1, r7
   10eb0:	4620      	mov	r0, r4
   10eb2:	47c0      	blx	r8
        if (rc != 0) {
   10eb4:	4603      	mov	r3, r0
   10eb6:	bb40      	cbnz	r0, 10f0a <stats_walk+0x8a>
        }

        /* Statistics are variable sized, move forward either 16, 32 or 64
         * bits in the structure.
         */
        cur += hdr->s_size;
   10eb8:	7923      	ldrb	r3, [r4, #4]
   10eba:	441d      	add	r5, r3
   10ebc:	b2ad      	uxth	r5, r5
    while (cur < end) {
   10ebe:	42b5      	cmp	r5, r6
   10ec0:	d222      	bcs.n	10f08 <stats_walk+0x88>
        for (i = 0; i < hdr->s_map_cnt; ++i) {
   10ec2:	2300      	movs	r3, #0
   10ec4:	68e2      	ldr	r2, [r4, #12]
   10ec6:	429a      	cmp	r2, r3
   10ec8:	ddee      	ble.n	10ea8 <stats_walk+0x28>
            if (hdr->s_map[i].snm_off == cur) {
   10eca:	68a2      	ldr	r2, [r4, #8]
   10ecc:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   10ed0:	eb02 0041 	add.w	r0, r2, r1, lsl #1
   10ed4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
   10ed8:	42aa      	cmp	r2, r5
   10eda:	d0e2      	beq.n	10ea2 <stats_walk+0x22>
        for (i = 0; i < hdr->s_map_cnt; ++i) {
   10edc:	3301      	adds	r3, #1
   10ede:	e7f1      	b.n	10ec4 <stats_walk+0x44>
            ent_n = (cur - start) / hdr->s_size;
   10ee0:	fa1f f389 	uxth.w	r3, r9
   10ee4:	1aeb      	subs	r3, r5, r3
   10ee6:	7922      	ldrb	r2, [r4, #4]
            len = snprintf(name_buf, sizeof(name_buf), "s%d", ent_n);
   10ee8:	fb93 f3f2 	sdiv	r3, r3, r2
   10eec:	4a09      	ldr	r2, [pc, #36]	; (10f14 <stats_walk+0x94>)
   10eee:	210c      	movs	r1, #12
   10ef0:	a801      	add	r0, sp, #4
   10ef2:	f7fd f9c8 	bl	e286 <snprintf>
            name_buf[len] = '\0';
   10ef6:	f100 0310 	add.w	r3, r0, #16
   10efa:	eb0d 0003 	add.w	r0, sp, r3
   10efe:	2300      	movs	r3, #0
   10f00:	f800 3c0c 	strb.w	r3, [r0, #-12]
            name = name_buf;
   10f04:	aa01      	add	r2, sp, #4
   10f06:	e7d1      	b.n	10eac <stats_walk+0x2c>
    }

    return (0);
   10f08:	2300      	movs	r3, #0
err:
    return (rc);
}
   10f0a:	4618      	mov	r0, r3
   10f0c:	b005      	add	sp, #20
   10f0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   10f12:	bf00      	nop
   10f14:	000238c0 	.word	0x000238c0

00010f18 <stats_init>:
 * @return 0 on success, non-zero error code on failure.
 */
int
stats_init(struct stats_hdr *shdr, uint8_t size, uint8_t cnt,
        const struct stats_name_map *map, uint8_t map_cnt)
{
   10f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10f1a:	4604      	mov	r4, r0
   10f1c:	460e      	mov	r6, r1
   10f1e:	4615      	mov	r5, r2
   10f20:	461f      	mov	r7, r3
    size_t offset;

    offset = stats_offset(shdr);
   10f22:	f7ff ff79 	bl	10e18 <stats_offset>
    memset((uint8_t *)shdr + offset, 0, size * cnt);
   10f26:	fb05 f206 	mul.w	r2, r5, r6
   10f2a:	2100      	movs	r1, #0
   10f2c:	4420      	add	r0, r4
   10f2e:	f7fc fd68 	bl	da02 <memset>

    shdr->s_size = size;
   10f32:	7126      	strb	r6, [r4, #4]
    shdr->s_cnt = cnt;
   10f34:	7165      	strb	r5, [r4, #5]
    shdr->s_flags = 0;
   10f36:	2000      	movs	r0, #0
   10f38:	80e0      	strh	r0, [r4, #6]
#if MYNEWT_VAL(STATS_NAMES)
    shdr->s_map = map;
   10f3a:	60a7      	str	r7, [r4, #8]
    shdr->s_map_cnt = map_cnt;
   10f3c:	f89d 3018 	ldrb.w	r3, [sp, #24]
   10f40:	60e3      	str	r3, [r4, #12]
#endif

    return (0);
}
   10f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00010f44 <stats_module_init_internal>:
{
   10f44:	b500      	push	{lr}
   10f46:	b083      	sub	sp, #12
    STAILQ_INIT(&g_stats_registry);
   10f48:	4b10      	ldr	r3, [pc, #64]	; (10f8c <stats_module_init_internal+0x48>)
   10f4a:	2200      	movs	r2, #0
   10f4c:	601a      	str	r2, [r3, #0]
   10f4e:	605b      	str	r3, [r3, #4]
    rc = stats_init(STATS_HDR(g_stats_stats),
   10f50:	2201      	movs	r2, #1
   10f52:	9200      	str	r2, [sp, #0]
   10f54:	4b0e      	ldr	r3, [pc, #56]	; (10f90 <stats_module_init_internal+0x4c>)
   10f56:	2104      	movs	r1, #4
   10f58:	480e      	ldr	r0, [pc, #56]	; (10f94 <stats_module_init_internal+0x50>)
   10f5a:	f7ff ffdd 	bl	10f18 <stats_init>
    if (rc) {
   10f5e:	4603      	mov	r3, r0
   10f60:	b118      	cbz	r0, 10f6a <stats_module_init_internal+0x26>
}
   10f62:	4618      	mov	r0, r3
   10f64:	b003      	add	sp, #12
   10f66:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = stats_register_internal("stat", STATS_HDR(g_stats_stats));
   10f6a:	490a      	ldr	r1, [pc, #40]	; (10f94 <stats_module_init_internal+0x50>)
   10f6c:	480a      	ldr	r0, [pc, #40]	; (10f98 <stats_module_init_internal+0x54>)
   10f6e:	f7ff ff5b 	bl	10e28 <stats_register_internal>
    if (rc) {
   10f72:	4603      	mov	r3, r0
   10f74:	2800      	cmp	r0, #0
   10f76:	d1f4      	bne.n	10f62 <stats_module_init_internal+0x1e>
    rc = stats_nmgr_register_group();
   10f78:	f000 f952 	bl	11220 <stats_nmgr_register_group>
    if (rc) {
   10f7c:	4603      	mov	r3, r0
   10f7e:	2800      	cmp	r0, #0
   10f80:	d1ef      	bne.n	10f62 <stats_module_init_internal+0x1e>
    rc = stats_shell_register();
   10f82:	f000 f9c5 	bl	11310 <stats_shell_register>
   10f86:	4603      	mov	r3, r0
    if (rc) {
   10f88:	e7eb      	b.n	10f62 <stats_module_init_internal+0x1e>
   10f8a:	bf00      	nop
   10f8c:	20000624 	.word	0x20000624
   10f90:	000238dc 	.word	0x000238dc
   10f94:	200044fc 	.word	0x200044fc
   10f98:	000238c4 	.word	0x000238c4

00010f9c <stats_module_init>:
{
   10f9c:	b510      	push	{r4, lr}
   10f9e:	b082      	sub	sp, #8
    SYSINIT_ASSERT_ACTIVE();
   10fa0:	4b0c      	ldr	r3, [pc, #48]	; (10fd4 <stats_module_init+0x38>)
   10fa2:	781b      	ldrb	r3, [r3, #0]
   10fa4:	b123      	cbz	r3, 10fb0 <stats_module_init+0x14>
    if (g_stats_stats.snum_registered) {
   10fa6:	4b0c      	ldr	r3, [pc, #48]	; (10fd8 <stats_module_init+0x3c>)
   10fa8:	695b      	ldr	r3, [r3, #20]
   10faa:	b133      	cbz	r3, 10fba <stats_module_init+0x1e>
}
   10fac:	b002      	add	sp, #8
   10fae:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   10fb0:	461a      	mov	r2, r3
   10fb2:	4619      	mov	r1, r3
   10fb4:	4618      	mov	r0, r3
   10fb6:	f7f8 f849 	bl	904c <__assert_func>
    rc = stats_module_init_internal();
   10fba:	f7ff ffc3 	bl	10f44 <stats_module_init_internal>
    SYSINIT_PANIC_ASSERT(rc == 0);
   10fbe:	2800      	cmp	r0, #0
   10fc0:	d0f4      	beq.n	10fac <stats_module_init+0x10>
   10fc2:	2000      	movs	r0, #0
   10fc4:	9000      	str	r0, [sp, #0]
   10fc6:	4b05      	ldr	r3, [pc, #20]	; (10fdc <stats_module_init+0x40>)
   10fc8:	681c      	ldr	r4, [r3, #0]
   10fca:	4603      	mov	r3, r0
   10fcc:	4602      	mov	r2, r0
   10fce:	4601      	mov	r1, r0
   10fd0:	47a0      	blx	r4
   10fd2:	e7eb      	b.n	10fac <stats_module_init+0x10>
   10fd4:	20004548 	.word	0x20004548
   10fd8:	200044fc 	.word	0x200044fc
   10fdc:	2000064c 	.word	0x2000064c

00010fe0 <stats_group_walk>:
 *
 * @return 0 on success, non-zero error code on failure
 */
int
stats_group_walk(stats_group_walk_func_t walk_func, void *arg)
{
   10fe0:	b570      	push	{r4, r5, r6, lr}
   10fe2:	4606      	mov	r6, r0
   10fe4:	460d      	mov	r5, r1
    struct stats_hdr *hdr;
    int rc;

    STAILQ_FOREACH(hdr, &g_stats_registry, s_next) {
   10fe6:	4b07      	ldr	r3, [pc, #28]	; (11004 <stats_group_walk+0x24>)
   10fe8:	681c      	ldr	r4, [r3, #0]
   10fea:	e000      	b.n	10fee <stats_group_walk+0xe>
   10fec:	6924      	ldr	r4, [r4, #16]
   10fee:	b134      	cbz	r4, 10ffe <stats_group_walk+0x1e>
        rc = walk_func(hdr, arg);
   10ff0:	4629      	mov	r1, r5
   10ff2:	4620      	mov	r0, r4
   10ff4:	47b0      	blx	r6
        if (rc != 0) {
   10ff6:	4603      	mov	r3, r0
   10ff8:	2800      	cmp	r0, #0
   10ffa:	d0f7      	beq.n	10fec <stats_group_walk+0xc>
   10ffc:	e000      	b.n	11000 <stats_group_walk+0x20>
            goto err;
        }
    }
    return (0);
   10ffe:	2300      	movs	r3, #0
err:
    return (rc);
}
   11000:	4618      	mov	r0, r3
   11002:	bd70      	pop	{r4, r5, r6, pc}
   11004:	20000624 	.word	0x20000624

00011008 <stats_group_find>:
 *
 * @return statistic structure if found, NULL if not found.
 */
struct stats_hdr *
stats_group_find(const char *name)
{
   11008:	b538      	push	{r3, r4, r5, lr}
   1100a:	4605      	mov	r5, r0
    struct stats_hdr *cur;

    cur = NULL;
    STAILQ_FOREACH(cur, &g_stats_registry, s_next) {
   1100c:	4b06      	ldr	r3, [pc, #24]	; (11028 <stats_group_find+0x20>)
   1100e:	681c      	ldr	r4, [r3, #0]
   11010:	e000      	b.n	11014 <stats_group_find+0xc>
   11012:	6924      	ldr	r4, [r4, #16]
   11014:	b12c      	cbz	r4, 11022 <stats_group_find+0x1a>
        if (!strcmp(cur->s_name, name)) {
   11016:	4629      	mov	r1, r5
   11018:	6820      	ldr	r0, [r4, #0]
   1101a:	f7fc fd1d 	bl	da58 <strcmp>
   1101e:	2800      	cmp	r0, #0
   11020:	d1f7      	bne.n	11012 <stats_group_find+0xa>
            break;
        }
    }

    return (cur);
}
   11022:	4620      	mov	r0, r4
   11024:	bd38      	pop	{r3, r4, r5, pc}
   11026:	bf00      	nop
   11028:	20000624 	.word	0x20000624

0001102c <stats_register>:
 *
 * @return 0 on success, non-zero error code on failure.
 */
int
stats_register(const char *name, struct stats_hdr *shdr)
{
   1102c:	b538      	push	{r3, r4, r5, lr}
   1102e:	4604      	mov	r4, r0
   11030:	460d      	mov	r5, r1
    /*
     * We should always have at least "stat" registered so if there are no stats
     * registered, try to initialize module first. This allows to register stat
     * before sysinit is called (e.g. from BSP).
     */
    if (g_stats_stats.snum_registered == 0) {
   11032:	4b07      	ldr	r3, [pc, #28]	; (11050 <stats_register+0x24>)
   11034:	695b      	ldr	r3, [r3, #20]
   11036:	b913      	cbnz	r3, 1103e <stats_register+0x12>
        if (stats_module_init_internal()) {
   11038:	f7ff ff84 	bl	10f44 <stats_module_init_internal>
   1103c:	b920      	cbnz	r0, 11048 <stats_register+0x1c>
            return -1;
        }
    }

    return stats_register_internal(name, shdr);
   1103e:	4629      	mov	r1, r5
   11040:	4620      	mov	r0, r4
   11042:	f7ff fef1 	bl	10e28 <stats_register_internal>
}
   11046:	bd38      	pop	{r3, r4, r5, pc}
            return -1;
   11048:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1104c:	e7fb      	b.n	11046 <stats_register+0x1a>
   1104e:	bf00      	nop
   11050:	200044fc 	.word	0x200044fc

00011054 <stats_nmgr_encode_name>:
    return (g_err);
}

static int
stats_nmgr_encode_name(struct stats_hdr *hdr, void *arg)
{
   11054:	b538      	push	{r3, r4, r5, lr}
   11056:	460c      	mov	r4, r1
    CborEncoder *penc = (CborEncoder *) arg;

    return cbor_encode_text_stringz(penc, hdr->s_name);
   11058:	6805      	ldr	r5, [r0, #0]
   1105a:	4628      	mov	r0, r5
   1105c:	f7fc fd08 	bl	da70 <strlen>
   11060:	4602      	mov	r2, r0
   11062:	4629      	mov	r1, r5
   11064:	4620      	mov	r0, r4
   11066:	f002 f854 	bl	13112 <cbor_encode_text_string>
}
   1106a:	bd38      	pop	{r3, r4, r5, pc}

0001106c <stats_nmgr_list>:
    return (0);
}

static int
stats_nmgr_list(struct mgmt_cbuf *cb)
{
   1106c:	b530      	push	{r4, r5, lr}
   1106e:	b085      	sub	sp, #20
    CborError g_err = CborNoError;
    CborEncoder stats;

    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   11070:	f100 050c 	add.w	r5, r0, #12
   11074:	2202      	movs	r2, #2
   11076:	4914      	ldr	r1, [pc, #80]	; (110c8 <stats_nmgr_list+0x5c>)
   11078:	4628      	mov	r0, r5
   1107a:	f002 f84a 	bl	13112 <cbor_encode_text_string>
   1107e:	4604      	mov	r4, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   11080:	2200      	movs	r2, #0
   11082:	2300      	movs	r3, #0
   11084:	4628      	mov	r0, r5
   11086:	f001 ffc9 	bl	1301c <cbor_encode_int>
   1108a:	4304      	orrs	r4, r0
   1108c:	2209      	movs	r2, #9
   1108e:	490f      	ldr	r1, [pc, #60]	; (110cc <stats_nmgr_list+0x60>)
   11090:	4628      	mov	r0, r5
   11092:	f002 f83e 	bl	13112 <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "stat_list");
   11096:	4304      	orrs	r4, r0
    g_err |= cbor_encoder_create_array(&cb->encoder, &stats,
   11098:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1109c:	4669      	mov	r1, sp
   1109e:	4628      	mov	r0, r5
   110a0:	f002 f83e 	bl	13120 <cbor_encoder_create_array>
   110a4:	4304      	orrs	r4, r0
                                       CborIndefiniteLength);
    stats_group_walk(stats_nmgr_encode_name, &stats);
   110a6:	4669      	mov	r1, sp
   110a8:	4809      	ldr	r0, [pc, #36]	; (110d0 <stats_nmgr_list+0x64>)
   110aa:	f7ff ff99 	bl	10fe0 <stats_group_walk>
    g_err |= cbor_encoder_close_container(&cb->encoder, &stats);
   110ae:	4669      	mov	r1, sp
   110b0:	4628      	mov	r0, r5
   110b2:	f002 f848 	bl	13146 <cbor_encoder_close_container>

    if (g_err) {
   110b6:	ea54 0300 	orrs.w	r3, r4, r0
   110ba:	d102      	bne.n	110c2 <stats_nmgr_list+0x56>
        return MGMT_ERR_ENOMEM;
    }
    return (0);
   110bc:	2000      	movs	r0, #0
}
   110be:	b005      	add	sp, #20
   110c0:	bd30      	pop	{r4, r5, pc}
        return MGMT_ERR_ENOMEM;
   110c2:	2002      	movs	r0, #2
   110c4:	e7fb      	b.n	110be <stats_nmgr_list+0x52>
   110c6:	bf00      	nop
   110c8:	000238e4 	.word	0x000238e4
   110cc:	000238e8 	.word	0x000238e8
   110d0:	00011055 	.word	0x00011055

000110d4 <stats_nmgr_walk_func>:
{
   110d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   110d8:	4605      	mov	r5, r0
   110da:	460e      	mov	r6, r1
   110dc:	4614      	mov	r4, r2
   110de:	461f      	mov	r7, r3
    stat_val = (uint8_t *)hdr + stat_off;
   110e0:	eb00 0803 	add.w	r8, r0, r3
   110e4:	4610      	mov	r0, r2
   110e6:	f7fc fcc3 	bl	da70 <strlen>
   110ea:	4602      	mov	r2, r0
   110ec:	4621      	mov	r1, r4
   110ee:	4630      	mov	r0, r6
   110f0:	f002 f80f 	bl	13112 <cbor_encode_text_string>
   110f4:	4604      	mov	r4, r0
    switch (hdr->s_size) {
   110f6:	792a      	ldrb	r2, [r5, #4]
   110f8:	2a04      	cmp	r2, #4
   110fa:	d00d      	beq.n	11118 <stats_nmgr_walk_func+0x44>
   110fc:	2a08      	cmp	r2, #8
   110fe:	d012      	beq.n	11126 <stats_nmgr_walk_func+0x52>
   11100:	2a02      	cmp	r2, #2
   11102:	d002      	beq.n	1110a <stats_nmgr_walk_func+0x36>
}
   11104:	4620      	mov	r0, r4
   11106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            g_err |= cbor_encode_uint(penc, *(uint16_t *) stat_val);
   1110a:	5bea      	ldrh	r2, [r5, r7]
   1110c:	2300      	movs	r3, #0
   1110e:	4630      	mov	r0, r6
   11110:	f001 ff44 	bl	12f9c <cbor_encode_uint>
   11114:	4304      	orrs	r4, r0
            break;
   11116:	e7f5      	b.n	11104 <stats_nmgr_walk_func+0x30>
            g_err |= cbor_encode_uint(penc, *(uint32_t *) stat_val);
   11118:	59ea      	ldr	r2, [r5, r7]
   1111a:	2300      	movs	r3, #0
   1111c:	4630      	mov	r0, r6
   1111e:	f001 ff3d 	bl	12f9c <cbor_encode_uint>
   11122:	4304      	orrs	r4, r0
            break;
   11124:	e7ee      	b.n	11104 <stats_nmgr_walk_func+0x30>
            g_err |= cbor_encode_uint(penc, *(uint64_t *) stat_val);
   11126:	e9d8 2300 	ldrd	r2, r3, [r8]
   1112a:	4630      	mov	r0, r6
   1112c:	f001 ff36 	bl	12f9c <cbor_encode_uint>
   11130:	4304      	orrs	r4, r0
            break;
   11132:	e7e7      	b.n	11104 <stats_nmgr_walk_func+0x30>

00011134 <stats_nmgr_read>:
{
   11134:	b570      	push	{r4, r5, r6, lr}
   11136:	b0a4      	sub	sp, #144	; 0x90
   11138:	4605      	mov	r5, r0
    struct cbor_attr_t attrs[] = {
   1113a:	2260      	movs	r2, #96	; 0x60
   1113c:	2100      	movs	r1, #0
   1113e:	a804      	add	r0, sp, #16
   11140:	f7fc fc5f 	bl	da02 <memset>
   11144:	4b30      	ldr	r3, [pc, #192]	; (11208 <stats_nmgr_read+0xd4>)
   11146:	9304      	str	r3, [sp, #16]
   11148:	2304      	movs	r3, #4
   1114a:	f88d 3014 	strb.w	r3, [sp, #20]
   1114e:	ab1c      	add	r3, sp, #112	; 0x70
   11150:	9306      	str	r3, [sp, #24]
   11152:	2320      	movs	r3, #32
   11154:	930e      	str	r3, [sp, #56]	; 0x38
    g_err = cbor_read_object(&cb->it, attrs);
   11156:	a904      	add	r1, sp, #16
   11158:	f105 001c 	add.w	r0, r5, #28
   1115c:	f001 fdf2 	bl	12d44 <cbor_read_object>
    if (g_err != 0) {
   11160:	2800      	cmp	r0, #0
   11162:	d14a      	bne.n	111fa <stats_nmgr_read+0xc6>
   11164:	4604      	mov	r4, r0
    hdr = stats_group_find(stats_name);
   11166:	a81c      	add	r0, sp, #112	; 0x70
   11168:	f7ff ff4e 	bl	11008 <stats_group_find>
    if (!hdr) {
   1116c:	4606      	mov	r6, r0
   1116e:	2800      	cmp	r0, #0
   11170:	d045      	beq.n	111fe <stats_nmgr_read+0xca>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   11172:	350c      	adds	r5, #12
   11174:	2202      	movs	r2, #2
   11176:	4925      	ldr	r1, [pc, #148]	; (1120c <stats_nmgr_read+0xd8>)
   11178:	4628      	mov	r0, r5
   1117a:	f001 ffca 	bl	13112 <cbor_encode_text_string>
   1117e:	4304      	orrs	r4, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   11180:	2200      	movs	r2, #0
   11182:	2300      	movs	r3, #0
   11184:	4628      	mov	r0, r5
   11186:	f001 ff49 	bl	1301c <cbor_encode_int>
   1118a:	4304      	orrs	r4, r0
   1118c:	2204      	movs	r2, #4
   1118e:	491e      	ldr	r1, [pc, #120]	; (11208 <stats_nmgr_read+0xd4>)
   11190:	4628      	mov	r0, r5
   11192:	f001 ffbe 	bl	13112 <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "name");
   11196:	4304      	orrs	r4, r0
   11198:	a81c      	add	r0, sp, #112	; 0x70
   1119a:	f7fc fc69 	bl	da70 <strlen>
   1119e:	4602      	mov	r2, r0
   111a0:	a91c      	add	r1, sp, #112	; 0x70
   111a2:	4628      	mov	r0, r5
   111a4:	f001 ffb5 	bl	13112 <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, stats_name);
   111a8:	4304      	orrs	r4, r0
   111aa:	2205      	movs	r2, #5
   111ac:	4918      	ldr	r1, [pc, #96]	; (11210 <stats_nmgr_read+0xdc>)
   111ae:	4628      	mov	r0, r5
   111b0:	f001 ffaf 	bl	13112 <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "group");
   111b4:	4304      	orrs	r4, r0
    g_err |= cbor_encode_text_string(&cb->encoder, "sys", sizeof("sys")-1);
   111b6:	2203      	movs	r2, #3
   111b8:	4916      	ldr	r1, [pc, #88]	; (11214 <stats_nmgr_read+0xe0>)
   111ba:	4628      	mov	r0, r5
   111bc:	f001 ffa9 	bl	13112 <cbor_encode_text_string>
   111c0:	4304      	orrs	r4, r0
   111c2:	2206      	movs	r2, #6
   111c4:	4914      	ldr	r1, [pc, #80]	; (11218 <stats_nmgr_read+0xe4>)
   111c6:	4628      	mov	r0, r5
   111c8:	f001 ffa3 	bl	13112 <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "fields");
   111cc:	4304      	orrs	r4, r0
    g_err |= cbor_encoder_create_map(&cb->encoder, &stats,
   111ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   111d2:	4669      	mov	r1, sp
   111d4:	4628      	mov	r0, r5
   111d6:	f001 ffa8 	bl	1312a <cbor_encoder_create_map>
   111da:	4304      	orrs	r4, r0
    stats_walk(hdr, stats_nmgr_walk_func, &stats);
   111dc:	466a      	mov	r2, sp
   111de:	490f      	ldr	r1, [pc, #60]	; (1121c <stats_nmgr_read+0xe8>)
   111e0:	4630      	mov	r0, r6
   111e2:	f7ff fe4d 	bl	10e80 <stats_walk>
    g_err |= cbor_encoder_close_container(&cb->encoder, &stats);
   111e6:	4669      	mov	r1, sp
   111e8:	4628      	mov	r0, r5
   111ea:	f001 ffac 	bl	13146 <cbor_encoder_close_container>
    if (g_err) {
   111ee:	ea54 0300 	orrs.w	r3, r4, r0
   111f2:	d106      	bne.n	11202 <stats_nmgr_read+0xce>
    return (0);
   111f4:	2000      	movs	r0, #0
}
   111f6:	b024      	add	sp, #144	; 0x90
   111f8:	bd70      	pop	{r4, r5, r6, pc}
        return MGMT_ERR_EINVAL;
   111fa:	2003      	movs	r0, #3
   111fc:	e7fb      	b.n	111f6 <stats_nmgr_read+0xc2>
        return MGMT_ERR_EINVAL;
   111fe:	2003      	movs	r0, #3
   11200:	e7f9      	b.n	111f6 <stats_nmgr_read+0xc2>
        return MGMT_ERR_ENOMEM;
   11202:	2002      	movs	r0, #2
   11204:	e7f7      	b.n	111f6 <stats_nmgr_read+0xc2>
   11206:	bf00      	nop
   11208:	00024b98 	.word	0x00024b98
   1120c:	000238e4 	.word	0x000238e4
   11210:	000238f4 	.word	0x000238f4
   11214:	000238fc 	.word	0x000238fc
   11218:	00023900 	.word	0x00023900
   1121c:	000110d5 	.word	0x000110d5

00011220 <stats_nmgr_register_group>:
/**
 * Register nmgr group handlers
 */
int
stats_nmgr_register_group(void)
{
   11220:	b508      	push	{r3, lr}
    int rc;

    MGMT_GROUP_SET_HANDLERS(&shell_nmgr_group, shell_nmgr_group_handlers);
   11222:	4804      	ldr	r0, [pc, #16]	; (11234 <stats_nmgr_register_group+0x14>)
   11224:	4b04      	ldr	r3, [pc, #16]	; (11238 <stats_nmgr_register_group+0x18>)
   11226:	6003      	str	r3, [r0, #0]
   11228:	2302      	movs	r3, #2
   1122a:	8083      	strh	r3, [r0, #4]
    shell_nmgr_group.mg_group_id = MGMT_GROUP_ID_STATS;
   1122c:	80c3      	strh	r3, [r0, #6]

    rc = mgmt_group_register(&shell_nmgr_group);
   1122e:	f00c f847 	bl	1d2c0 <mgmt_group_register>
    }

    return (0);
err:
    return (rc);
}
   11232:	bd08      	pop	{r3, pc}
   11234:	20004514 	.word	0x20004514
   11238:	2000062c 	.word	0x2000062c

0001123c <stats_shell_display_entry>:
uint8_t stats_shell_registered;

static int 
stats_shell_display_entry(struct stats_hdr *hdr, void *arg, char *name,
        uint16_t stat_off)
{
   1123c:	b500      	push	{lr}
   1123e:	b083      	sub	sp, #12
   11240:	4684      	mov	ip, r0
   11242:	4608      	mov	r0, r1
    struct streamer *streamer;
    void *stat_val;

    streamer = arg;

    stat_val = (uint8_t *)hdr + stat_off;
   11244:	eb0c 0103 	add.w	r1, ip, r3
    switch (hdr->s_size) {
   11248:	f89c e004 	ldrb.w	lr, [ip, #4]
   1124c:	f1be 0f04 	cmp.w	lr, #4
   11250:	d013      	beq.n	1127a <stats_shell_display_entry+0x3e>
   11252:	f1be 0f08 	cmp.w	lr, #8
   11256:	d016      	beq.n	11286 <stats_shell_display_entry+0x4a>
   11258:	f1be 0f02 	cmp.w	lr, #2
   1125c:	d004      	beq.n	11268 <stats_shell_display_entry+0x2c>
        case sizeof(uint64_t):
            streamer_printf(streamer, "%s: %llu\n", name,
                    *(uint64_t *) stat_val);
            break;
        default:
            streamer_printf(streamer, "Unknown stat size for %s %u\n", name, 
   1125e:	4673      	mov	r3, lr
   11260:	490d      	ldr	r1, [pc, #52]	; (11298 <stats_shell_display_entry+0x5c>)
   11262:	f001 f85a 	bl	1231a <streamer_printf>
                    hdr->s_size);
            break;
   11266:	e004      	b.n	11272 <stats_shell_display_entry+0x36>
            streamer_printf(streamer, "%s: %u\n", name,
   11268:	f83c 3003 	ldrh.w	r3, [ip, r3]
   1126c:	490b      	ldr	r1, [pc, #44]	; (1129c <stats_shell_display_entry+0x60>)
   1126e:	f001 f854 	bl	1231a <streamer_printf>
    }

    return (0);
}
   11272:	2000      	movs	r0, #0
   11274:	b003      	add	sp, #12
   11276:	f85d fb04 	ldr.w	pc, [sp], #4
            streamer_printf(streamer, "%s: %lu\n", name,
   1127a:	f85c 3003 	ldr.w	r3, [ip, r3]
   1127e:	4908      	ldr	r1, [pc, #32]	; (112a0 <stats_shell_display_entry+0x64>)
   11280:	f001 f84b 	bl	1231a <streamer_printf>
            break;
   11284:	e7f5      	b.n	11272 <stats_shell_display_entry+0x36>
            streamer_printf(streamer, "%s: %llu\n", name,
   11286:	ed91 7b00 	vldr	d7, [r1]
   1128a:	ed8d 7b00 	vstr	d7, [sp]
   1128e:	4905      	ldr	r1, [pc, #20]	; (112a4 <stats_shell_display_entry+0x68>)
   11290:	f001 f843 	bl	1231a <streamer_printf>
            break;
   11294:	e7ed      	b.n	11272 <stats_shell_display_entry+0x36>
   11296:	bf00      	nop
   11298:	00023928 	.word	0x00023928
   1129c:	00023908 	.word	0x00023908
   112a0:	00023910 	.word	0x00023910
   112a4:	0002391c 	.word	0x0002391c

000112a8 <stats_shell_display_group>:

static int 
stats_shell_display_group(struct stats_hdr *hdr, void *arg)
{
   112a8:	b508      	push	{r3, lr}
   112aa:	460b      	mov	r3, r1
    struct streamer *streamer;

    streamer = arg;
    streamer_printf(streamer, "\t%s\n", hdr->s_name);
   112ac:	6802      	ldr	r2, [r0, #0]
   112ae:	4903      	ldr	r1, [pc, #12]	; (112bc <stats_shell_display_group+0x14>)
   112b0:	4618      	mov	r0, r3
   112b2:	f001 f832 	bl	1231a <streamer_printf>
    return (0);
}
   112b6:	2000      	movs	r0, #0
   112b8:	bd08      	pop	{r3, pc}
   112ba:	bf00      	nop
   112bc:	00023948 	.word	0x00023948

000112c0 <shell_stats_display>:

static int
shell_stats_display(const struct shell_cmd *cmd, int argc, char **argv,
                    struct streamer *streamer)
{
   112c0:	b538      	push	{r3, r4, r5, lr}
   112c2:	461c      	mov	r4, r3
    struct stats_hdr *hdr;
    char *name;
    int rc;

    name = argv[1];
   112c4:	6855      	ldr	r5, [r2, #4]
    if (name == NULL || !strcmp(name, "")) {
   112c6:	b155      	cbz	r5, 112de <shell_stats_display+0x1e>
   112c8:	782b      	ldrb	r3, [r5, #0]
   112ca:	b143      	cbz	r3, 112de <shell_stats_display+0x1e>
        stats_group_walk(stats_shell_display_group, streamer);
        rc = OS_EINVAL;
        goto err;
    }

    hdr = stats_group_find(name);
   112cc:	4628      	mov	r0, r5
   112ce:	f7ff fe9b 	bl	11008 <stats_group_find>
    if (!hdr) {
   112d2:	b170      	cbz	r0, 112f2 <shell_stats_display+0x32>
        streamer_printf(streamer, "Could not find statistic group %s\n", name);
        rc = OS_EINVAL;
        goto err;
    }

    rc = stats_walk(hdr, stats_shell_display_entry, streamer);
   112d4:	4622      	mov	r2, r4
   112d6:	490a      	ldr	r1, [pc, #40]	; (11300 <shell_stats_display+0x40>)
   112d8:	f7ff fdd2 	bl	10e80 <stats_walk>
    }

    return (0);
err:
    return (rc);
}
   112dc:	bd38      	pop	{r3, r4, r5, pc}
        streamer_printf(streamer, "Must specify a statistic name to dump, "
   112de:	4909      	ldr	r1, [pc, #36]	; (11304 <shell_stats_display+0x44>)
   112e0:	4620      	mov	r0, r4
   112e2:	f001 f81a 	bl	1231a <streamer_printf>
        stats_group_walk(stats_shell_display_group, streamer);
   112e6:	4621      	mov	r1, r4
   112e8:	4807      	ldr	r0, [pc, #28]	; (11308 <shell_stats_display+0x48>)
   112ea:	f7ff fe79 	bl	10fe0 <stats_group_walk>
        rc = OS_EINVAL;
   112ee:	2002      	movs	r0, #2
        goto err;
   112f0:	e7f4      	b.n	112dc <shell_stats_display+0x1c>
        streamer_printf(streamer, "Could not find statistic group %s\n", name);
   112f2:	462a      	mov	r2, r5
   112f4:	4905      	ldr	r1, [pc, #20]	; (1130c <shell_stats_display+0x4c>)
   112f6:	4620      	mov	r0, r4
   112f8:	f001 f80f 	bl	1231a <streamer_printf>
        rc = OS_EINVAL;
   112fc:	2002      	movs	r0, #2
        goto err;
   112fe:	e7ed      	b.n	112dc <shell_stats_display+0x1c>
   11300:	0001123d 	.word	0x0001123d
   11304:	00023950 	.word	0x00023950
   11308:	000112a9 	.word	0x000112a9
   1130c:	0002398c 	.word	0x0002398c

00011310 <stats_shell_register>:


int 
stats_shell_register(void)
{
   11310:	b508      	push	{r3, lr}
    if (!stats_shell_registered) {
   11312:	4b06      	ldr	r3, [pc, #24]	; (1132c <stats_shell_register+0x1c>)
   11314:	781b      	ldrb	r3, [r3, #0]
   11316:	b10b      	cbz	r3, 1131c <stats_shell_register+0xc>
        stats_shell_registered = 1;
        shell_cmd_register(&shell_stats_cmd);
    }

    return (0);
}
   11318:	2000      	movs	r0, #0
   1131a:	bd08      	pop	{r3, pc}
        stats_shell_registered = 1;
   1131c:	4b03      	ldr	r3, [pc, #12]	; (1132c <stats_shell_register+0x1c>)
   1131e:	2201      	movs	r2, #1
   11320:	701a      	strb	r2, [r3, #0]
        shell_cmd_register(&shell_stats_cmd);
   11322:	4803      	ldr	r0, [pc, #12]	; (11330 <stats_shell_register+0x20>)
   11324:	f7ff fa26 	bl	10774 <shell_cmd_register>
   11328:	e7f6      	b.n	11318 <stats_shell_register+0x8>
   1132a:	bf00      	nop
   1132c:	20004520 	.word	0x20004520
   11330:	2000063c 	.word	0x2000063c

00011334 <sysdown_timer_exp>:
    }
}

static void
sysdown_timer_exp(struct os_event *unused)
{
   11334:	b508      	push	{r3, lr}
    assert(0);
   11336:	2300      	movs	r3, #0
   11338:	461a      	mov	r2, r3
   1133a:	4619      	mov	r1, r3
   1133c:	4618      	mov	r0, r3
   1133e:	f7f7 fe85 	bl	904c <__assert_func>
	...

00011344 <sysdown_complete>:
{
   11344:	b508      	push	{r3, lr}
    os_callout_stop(&sysdown_timer);
   11346:	4803      	ldr	r0, [pc, #12]	; (11354 <sysdown_complete+0x10>)
   11348:	f7f8 f81c 	bl	9384 <os_callout_stop>
    os_system_reset();
   1134c:	f7f7 ffeb 	bl	9326 <os_system_reset>
}
   11350:	bd08      	pop	{r3, pc}
   11352:	bf00      	nop
   11354:	20004528 	.word	0x20004528

00011358 <sysdown>:
}

int
sysdown(int reason)
{
   11358:	b570      	push	{r4, r5, r6, lr}
   1135a:	4605      	mov	r5, r0
    os_sr_t sr;
    int rc;
    int i;

    /* Only allow one shutdown operation. */
    OS_ENTER_CRITICAL(sr);
   1135c:	f7f9 f88e 	bl	a47c <os_arch_save_sr>
    if (sysdown_active) {
   11360:	4b20      	ldr	r3, [pc, #128]	; (113e4 <sysdown+0x8c>)
   11362:	781b      	ldrb	r3, [r3, #0]
   11364:	b943      	cbnz	r3, 11378 <sysdown+0x20>
        rc = SYS_EALREADY;
    } else {
        sysdown_active = true;
   11366:	4b1f      	ldr	r3, [pc, #124]	; (113e4 <sysdown+0x8c>)
   11368:	2201      	movs	r2, #1
   1136a:	701a      	strb	r2, [r3, #0]
        rc = 0;
   1136c:	2600      	movs	r6, #0
    }
    OS_EXIT_CRITICAL(sr);
   1136e:	f7f9 f88b 	bl	a488 <os_arch_restore_sr>

    if (rc != 0) {
   11372:	b126      	cbz	r6, 1137e <sysdown+0x26>
    if (sysdown_num_in_progress == 0) {
        sysdown_complete();
    }

    return 0;
}
   11374:	4630      	mov	r0, r6
   11376:	bd70      	pop	{r4, r5, r6, pc}
        rc = SYS_EALREADY;
   11378:	f06f 060a 	mvn.w	r6, #10
   1137c:	e7f7      	b.n	1136e <sysdown+0x16>
    os_callout_init(&sysdown_timer, os_eventq_dflt_get(), sysdown_timer_exp,
   1137e:	f7f8 fa47 	bl	9810 <os_eventq_dflt_get>
   11382:	4601      	mov	r1, r0
   11384:	4c18      	ldr	r4, [pc, #96]	; (113e8 <sysdown+0x90>)
   11386:	2300      	movs	r3, #0
   11388:	4a18      	ldr	r2, [pc, #96]	; (113ec <sysdown+0x94>)
   1138a:	4620      	mov	r0, r4
   1138c:	f7f7 ffec 	bl	9368 <os_callout_init>
    rc = os_callout_reset(&sysdown_timer, SYSDOWN_TIMEOUT_TICKS);
   11390:	f44f 61a0 	mov.w	r1, #1280	; 0x500
   11394:	4620      	mov	r0, r4
   11396:	f7f8 f813 	bl	93c0 <os_callout_reset>
    assert(rc == 0);
   1139a:	4606      	mov	r6, r0
   1139c:	b908      	cbnz	r0, 113a2 <sysdown+0x4a>
    for (i = 0; sysdown_cbs[i] != NULL; i++) {
   1139e:	4604      	mov	r4, r0
   113a0:	e006      	b.n	113b0 <sysdown+0x58>
    assert(rc == 0);
   113a2:	2300      	movs	r3, #0
   113a4:	461a      	mov	r2, r3
   113a6:	4619      	mov	r1, r3
   113a8:	4618      	mov	r0, r3
   113aa:	f7f7 fe4f 	bl	904c <__assert_func>
    for (i = 0; sysdown_cbs[i] != NULL; i++) {
   113ae:	3401      	adds	r4, #1
   113b0:	4b0f      	ldr	r3, [pc, #60]	; (113f0 <sysdown+0x98>)
   113b2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   113b6:	b163      	cbz	r3, 113d2 <sysdown+0x7a>
        rc = sysdown_cbs[i](reason);
   113b8:	4628      	mov	r0, r5
   113ba:	4798      	blx	r3
        switch (rc) {
   113bc:	2801      	cmp	r0, #1
   113be:	d1f6      	bne.n	113ae <sysdown+0x56>
            OS_ENTER_CRITICAL(sr);
   113c0:	f7f9 f85c 	bl	a47c <os_arch_save_sr>
            sysdown_num_in_progress++;
   113c4:	4a0b      	ldr	r2, [pc, #44]	; (113f4 <sysdown+0x9c>)
   113c6:	6813      	ldr	r3, [r2, #0]
   113c8:	3301      	adds	r3, #1
   113ca:	6013      	str	r3, [r2, #0]
            OS_EXIT_CRITICAL(sr);
   113cc:	f7f9 f85c 	bl	a488 <os_arch_restore_sr>
            break;
   113d0:	e7ed      	b.n	113ae <sysdown+0x56>
    if (sysdown_num_in_progress == 0) {
   113d2:	4b08      	ldr	r3, [pc, #32]	; (113f4 <sysdown+0x9c>)
   113d4:	681c      	ldr	r4, [r3, #0]
   113d6:	2c00      	cmp	r4, #0
   113d8:	d1cc      	bne.n	11374 <sysdown+0x1c>
        sysdown_complete();
   113da:	f7ff ffb3 	bl	11344 <sysdown_complete>
    return 0;
   113de:	4626      	mov	r6, r4
   113e0:	e7c8      	b.n	11374 <sysdown+0x1c>
   113e2:	bf00      	nop
   113e4:	20004521 	.word	0x20004521
   113e8:	20004528 	.word	0x20004528
   113ec:	00011335 	.word	0x00011335
   113f0:	00023dbc 	.word	0x00023dbc
   113f4:	20004524 	.word	0x20004524

000113f8 <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
   113f8:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
   113fa:	f7f7 fe27 	bl	904c <__assert_func>
	...

00011400 <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
   11400:	4b01      	ldr	r3, [pc, #4]	; (11408 <sysinit_start+0x8>)
   11402:	2201      	movs	r2, #1
   11404:	701a      	strb	r2, [r3, #0]
}
   11406:	4770      	bx	lr
   11408:	20004548 	.word	0x20004548

0001140c <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
   1140c:	4b01      	ldr	r3, [pc, #4]	; (11414 <sysinit_end+0x8>)
   1140e:	2200      	movs	r2, #0
   11410:	701a      	strb	r2, [r3, #0]
}
   11412:	4770      	bx	lr
   11414:	20004548 	.word	0x20004548

00011418 <uwbcfg_set>:

static int
uwbcfg_set(int argc, char **argv, char *val)
{
    int i;
    if (argc == 1) {
   11418:	2801      	cmp	r0, #1
   1141a:	d00a      	beq.n	11432 <uwbcfg_set+0x1a>
        for (i=0;i<CFGSTR_MAX;i++) {
            if (!strcmp(argv[0], g_uwbcfg_str[i]))
                return CONF_VALUE_SET(val, CONF_STRING, g_uwb_config[i]);
        }
    }
    return DPL_ENOENT;
   1141c:	200a      	movs	r0, #10
}
   1141e:	4770      	bx	lr
                return CONF_VALUE_SET(val, CONF_STRING, g_uwb_config[i]);
   11420:	2308      	movs	r3, #8
   11422:	4a0d      	ldr	r2, [pc, #52]	; (11458 <uwbcfg_set+0x40>)
   11424:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
   11428:	2106      	movs	r1, #6
   1142a:	4630      	mov	r0, r6
   1142c:	f7fd fb35 	bl	ea9a <conf_value_from_str>
}
   11430:	bd70      	pop	{r4, r5, r6, pc}
{
   11432:	b570      	push	{r4, r5, r6, lr}
   11434:	460d      	mov	r5, r1
   11436:	4616      	mov	r6, r2
        for (i=0;i<CFGSTR_MAX;i++) {
   11438:	2400      	movs	r4, #0
   1143a:	2c13      	cmp	r4, #19
   1143c:	dc09      	bgt.n	11452 <uwbcfg_set+0x3a>
            if (!strcmp(argv[0], g_uwbcfg_str[i]))
   1143e:	4b07      	ldr	r3, [pc, #28]	; (1145c <uwbcfg_set+0x44>)
   11440:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   11444:	6828      	ldr	r0, [r5, #0]
   11446:	f7fc fb07 	bl	da58 <strcmp>
   1144a:	2800      	cmp	r0, #0
   1144c:	d0e8      	beq.n	11420 <uwbcfg_set+0x8>
        for (i=0;i<CFGSTR_MAX;i++) {
   1144e:	3401      	adds	r4, #1
   11450:	e7f3      	b.n	1143a <uwbcfg_set+0x22>
    return DPL_ENOENT;
   11452:	200a      	movs	r0, #10
   11454:	e7ec      	b.n	11430 <uwbcfg_set+0x18>
   11456:	bf00      	nop
   11458:	20000650 	.word	0x20000650
   1145c:	200006f0 	.word	0x200006f0

00011460 <uwbcfg_get>:
    if (argc == 1) {
   11460:	2801      	cmp	r0, #1
   11462:	d10d      	bne.n	11480 <uwbcfg_get+0x20>
{
   11464:	b538      	push	{r3, r4, r5, lr}
   11466:	460d      	mov	r5, r1
        for (i=0;i<CFGSTR_MAX;i++) {
   11468:	2400      	movs	r4, #0
   1146a:	2c13      	cmp	r4, #19
   1146c:	dc0e      	bgt.n	1148c <uwbcfg_get+0x2c>
            if (!strcmp(argv[0], g_uwbcfg_str[i])) return g_uwb_config[i];
   1146e:	4b08      	ldr	r3, [pc, #32]	; (11490 <uwbcfg_get+0x30>)
   11470:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   11474:	6828      	ldr	r0, [r5, #0]
   11476:	f7fc faef 	bl	da58 <strcmp>
   1147a:	b118      	cbz	r0, 11484 <uwbcfg_get+0x24>
        for (i=0;i<CFGSTR_MAX;i++) {
   1147c:	3401      	adds	r4, #1
   1147e:	e7f4      	b.n	1146a <uwbcfg_get+0xa>
    return NULL;
   11480:	2000      	movs	r0, #0
}
   11482:	4770      	bx	lr
            if (!strcmp(argv[0], g_uwbcfg_str[i])) return g_uwb_config[i];
   11484:	4803      	ldr	r0, [pc, #12]	; (11494 <uwbcfg_get+0x34>)
   11486:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
}
   1148a:	bd38      	pop	{r3, r4, r5, pc}
    return NULL;
   1148c:	2000      	movs	r0, #0
   1148e:	e7fc      	b.n	1148a <uwbcfg_get+0x2a>
   11490:	200006f0 	.word	0x200006f0
   11494:	20000650 	.word	0x20000650

00011498 <uwbcfg_export>:
}

static int
uwbcfg_export(void (*export_func)(char *name, char *val),
  enum conf_export_tgt tgt)
{
   11498:	b530      	push	{r4, r5, lr}
   1149a:	b08b      	sub	sp, #44	; 0x2c
   1149c:	4605      	mov	r5, r0
    int i;
    char b[32];
    for (i=0;i<CFGSTR_MAX;i++) {
   1149e:	2400      	movs	r4, #0
   114a0:	e010      	b.n	114c4 <uwbcfg_export+0x2c>
        snprintf(b, sizeof(b), "%s/%s", uwbcfg_handler.ch_name, g_uwbcfg_str[i]);
   114a2:	4b0b      	ldr	r3, [pc, #44]	; (114d0 <uwbcfg_export+0x38>)
   114a4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   114a8:	9300      	str	r3, [sp, #0]
   114aa:	4b0a      	ldr	r3, [pc, #40]	; (114d4 <uwbcfg_export+0x3c>)
   114ac:	685b      	ldr	r3, [r3, #4]
   114ae:	4a0a      	ldr	r2, [pc, #40]	; (114d8 <uwbcfg_export+0x40>)
   114b0:	2120      	movs	r1, #32
   114b2:	a802      	add	r0, sp, #8
   114b4:	f7fc fee7 	bl	e286 <snprintf>
        export_func(b, g_uwb_config[i]);
   114b8:	4908      	ldr	r1, [pc, #32]	; (114dc <uwbcfg_export+0x44>)
   114ba:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
   114be:	a802      	add	r0, sp, #8
   114c0:	47a8      	blx	r5
    for (i=0;i<CFGSTR_MAX;i++) {
   114c2:	3401      	adds	r4, #1
   114c4:	2c13      	cmp	r4, #19
   114c6:	ddec      	ble.n	114a2 <uwbcfg_export+0xa>
    }
    return 0;
}
   114c8:	2000      	movs	r0, #0
   114ca:	b00b      	add	sp, #44	; 0x2c
   114cc:	bd30      	pop	{r4, r5, pc}
   114ce:	bf00      	nop
   114d0:	200006f0 	.word	0x200006f0
   114d4:	20000740 	.word	0x20000740
   114d8:	000239b0 	.word	0x000239b0
   114dc:	20000650 	.word	0x20000650

000114e0 <uwbcfg_commit_to_inst>:
{
   114e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   114e2:	b083      	sub	sp, #12
   114e4:	4604      	mov	r4, r0
   114e6:	460d      	mov	r5, r1
    conf_value_from_str(cfg[CFGSTR_CH], CONF_INT8, (void*)&(inst->config.channel), 0);
   114e8:	2300      	movs	r3, #0
   114ea:	f200 520c 	addw	r2, r0, #1292	; 0x50c
   114ee:	2102      	movs	r1, #2
   114f0:	4628      	mov	r0, r5
   114f2:	f7fd fad2 	bl	ea9a <conf_value_from_str>
    if (!strcmp(cfg[CFGSTR_DATARATE], "6m8")) {
   114f6:	f105 0610 	add.w	r6, r5, #16
   114fa:	4984      	ldr	r1, [pc, #528]	; (1170c <uwbcfg_commit_to_inst+0x22c>)
   114fc:	4630      	mov	r0, r6
   114fe:	f7fc faab 	bl	da58 <strcmp>
   11502:	2800      	cmp	r0, #0
   11504:	f040 80c0 	bne.w	11688 <uwbcfg_commit_to_inst+0x1a8>
        inst->attrib.Tdsym = DPL_FLOAT32_INIT(0.12821f);
   11508:	f204 533c 	addw	r3, r4, #1340	; 0x53c
   1150c:	4a80      	ldr	r2, [pc, #512]	; (11710 <uwbcfg_commit_to_inst+0x230>)
   1150e:	601a      	str	r2, [r3, #0]
        sfd_len = 8;
   11510:	2708      	movs	r7, #8
    conf_value_from_str(cfg[CFGSTR_RX_PACLEN], CONF_INT8, (void*)&paclen, 0);
   11512:	2300      	movs	r3, #0
   11514:	f10d 0207 	add.w	r2, sp, #7
   11518:	2102      	movs	r1, #2
   1151a:	f105 0018 	add.w	r0, r5, #24
   1151e:	f7fd fabc 	bl	ea9a <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_RX_SFDTYPE], CONF_INT8,
   11522:	2300      	movs	r3, #0
   11524:	f204 5212 	addw	r2, r4, #1298	; 0x512
   11528:	2102      	movs	r1, #2
   1152a:	f105 0028 	add.w	r0, r5, #40	; 0x28
   1152e:	f7fd fab4 	bl	ea9a <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_RX_SFD_TO], CONF_INT16, (void*)&sfd_timeout, 0);
   11532:	2300      	movs	r3, #0
   11534:	f10d 0202 	add.w	r2, sp, #2
   11538:	2103      	movs	r1, #3
   1153a:	f105 0030 	add.w	r0, r5, #48	; 0x30
   1153e:	f7fd faac 	bl	ea9a <conf_value_from_str>
    inst->config.rx.phrMode = (cfg[CFGSTR_RX_PHRMODE][0] == 's')? DWT_PHRMODE_STD : DWT_PHRMODE_EXT;
   11542:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   11546:	2b73      	cmp	r3, #115	; 0x73
   11548:	f000 80b6 	beq.w	116b8 <uwbcfg_commit_to_inst+0x1d8>
   1154c:	2303      	movs	r3, #3
   1154e:	f884 3513 	strb.w	r3, [r4, #1299]	; 0x513
    if (inst->rxdiag) {
   11552:	f8d4 24f8 	ldr.w	r2, [r4, #1272]	; 0x4f8
   11556:	b192      	cbz	r2, 1157e <uwbcfg_commit_to_inst+0x9e>
        conf_value_from_str(cfg[CFGSTR_RX_DIAG_EN], CONF_INT16,
   11558:	2300      	movs	r3, #0
   1155a:	3202      	adds	r2, #2
   1155c:	2103      	movs	r1, #3
   1155e:	f105 0040 	add.w	r0, r5, #64	; 0x40
   11562:	f7fd fa9a 	bl	ea9a <conf_value_from_str>
        inst->config.rxdiag_enable = (inst->rxdiag->enabled != 0);
   11566:	f8d4 34f8 	ldr.w	r3, [r4, #1272]	; 0x4f8
   1156a:	885b      	ldrh	r3, [r3, #2]
   1156c:	3b00      	subs	r3, #0
   1156e:	bf18      	it	ne
   11570:	2301      	movne	r3, #1
   11572:	f894 252c 	ldrb.w	r2, [r4, #1324]	; 0x52c
   11576:	f363 1286 	bfi	r2, r3, #6, #1
   1157a:	f884 252c 	strb.w	r2, [r4, #1324]	; 0x52c
    conf_value_from_str(cfg[CFGSTR_RX_PREAM_CIDX], CONF_INT8,
   1157e:	2300      	movs	r3, #0
   11580:	f204 5211 	addw	r2, r4, #1297	; 0x511
   11584:	2102      	movs	r1, #2
   11586:	f105 0020 	add.w	r0, r5, #32
   1158a:	f7fd fa86 	bl	ea9a <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_TX_PREAM_CIDX], CONF_INT8,
   1158e:	2300      	movs	r3, #0
   11590:	f504 62a4 	add.w	r2, r4, #1312	; 0x520
   11594:	2102      	movs	r1, #2
   11596:	f105 0048 	add.w	r0, r5, #72	; 0x48
   1159a:	f7fd fa7e 	bl	ea9a <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_RX_ANTDLY], CONF_INT16, (void*)&inst->rx_antenna_delay, 0);
   1159e:	2300      	movs	r3, #0
   115a0:	f204 42cc 	addw	r2, r4, #1228	; 0x4cc
   115a4:	2103      	movs	r1, #3
   115a6:	f105 0068 	add.w	r0, r5, #104	; 0x68
   115aa:	f7fd fa76 	bl	ea9a <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_TX_ANTDLY], CONF_INT16, (void*)&inst->tx_antenna_delay, 0);
   115ae:	2300      	movs	r3, #0
   115b0:	f204 42ce 	addw	r2, r4, #1230	; 0x4ce
   115b4:	2103      	movs	r1, #3
   115b6:	f105 0070 	add.w	r0, r5, #112	; 0x70
   115ba:	f7fd fa6e 	bl	ea9a <conf_value_from_str>
    inst->rx_ant_separation = DPL_FLOAT32_FROM_F64(strtod_soft(cfg[CFGSTR_RX_ANTSEP], 0));
   115be:	2100      	movs	r1, #0
   115c0:	f105 0078 	add.w	r0, r5, #120	; 0x78
   115c4:	f000 fa92 	bl	11aec <strtod_soft>
   115c8:	ec51 0b10 	vmov	r0, r1, d0
   115cc:	f010 f97e 	bl	218cc <__aeabi_d2f>
   115d0:	f504 639a 	add.w	r3, r4, #1232	; 0x4d0
   115d4:	6018      	str	r0, [r3, #0]
    conf_value_from_str(cfg[CFGSTR_EXT_CLKDLY], CONF_INT32, (void*)&inst->ext_clock_delay, 0);
   115d6:	2300      	movs	r3, #0
   115d8:	f204 42d4 	addw	r2, r4, #1236	; 0x4d4
   115dc:	2104      	movs	r1, #4
   115de:	f105 0080 	add.w	r0, r5, #128	; 0x80
   115e2:	f7fd fa5a 	bl	ea9a <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_ROLE], CONF_INT16, (void*)&inst->role, 0);
   115e6:	2300      	movs	r3, #0
   115e8:	f204 42b4 	addw	r2, r4, #1204	; 0x4b4
   115ec:	2103      	movs	r1, #3
   115ee:	f105 0088 	add.w	r0, r5, #136	; 0x88
   115f2:	f7fd fa52 	bl	ea9a <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_FRAME_FILTER], CONF_INT16,
   115f6:	2300      	movs	r3, #0
   115f8:	f204 521c 	addw	r2, r4, #1308	; 0x51c
   115fc:	2103      	movs	r1, #3
   115fe:	f105 0090 	add.w	r0, r5, #144	; 0x90
   11602:	f7fd fa4a 	bl	ea9a <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_XTAL_TRIM], CONF_INT8,
   11606:	2300      	movs	r3, #0
   11608:	f204 521e 	addw	r2, r4, #1310	; 0x51e
   1160c:	2102      	movs	r1, #2
   1160e:	f105 0098 	add.w	r0, r5, #152	; 0x98
   11612:	f7fd fa42 	bl	ea9a <conf_value_from_str>
    txP = inst->config.tx.preambleLength;
   11616:	f894 6521 	ldrb.w	r6, [r4, #1313]	; 0x521
    sfd_timeout = inst->config.rx.sfdTimeout;
   1161a:	f8b4 3516 	ldrh.w	r3, [r4, #1302]	; 0x516
   1161e:	f8ad 3002 	strh.w	r3, [sp, #2]
    conf_value_from_str(cfg[CFGSTR_TX_PREAM_LEN], CONF_INT16,
   11622:	2300      	movs	r3, #0
   11624:	aa01      	add	r2, sp, #4
   11626:	2103      	movs	r1, #3
   11628:	f105 0050 	add.w	r0, r5, #80	; 0x50
   1162c:	f7fd fa35 	bl	ea9a <conf_value_from_str>
    switch (preamble_len)
   11630:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   11634:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   11638:	d058      	beq.n	116ec <uwbcfg_commit_to_inst+0x20c>
   1163a:	d843      	bhi.n	116c4 <uwbcfg_commit_to_inst+0x1e4>
   1163c:	2b80      	cmp	r3, #128	; 0x80
   1163e:	d057      	beq.n	116f0 <uwbcfg_commit_to_inst+0x210>
   11640:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   11644:	d13a      	bne.n	116bc <uwbcfg_commit_to_inst+0x1dc>
    case (256):  txP = DWT_PLEN_256 ;break;
   11646:	2624      	movs	r6, #36	; 0x24
    if (sfd_timeout < 1) {
   11648:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1164c:	b94b      	cbnz	r3, 11662 <uwbcfg_commit_to_inst+0x182>
        sfd_timeout = (preamble_len + 1 + sfd_len - paclen);
   1164e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   11652:	443b      	add	r3, r7
   11654:	b29b      	uxth	r3, r3
   11656:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1165a:	1a9b      	subs	r3, r3, r2
   1165c:	3301      	adds	r3, #1
   1165e:	f8ad 3002 	strh.w	r3, [sp, #2]
    inst->config.tx.preambleLength = txP;
   11662:	f884 6521 	strb.w	r6, [r4, #1313]	; 0x521
    inst->config.rx.sfdTimeout = sfd_timeout;
   11666:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1166a:	f8a4 3516 	strh.w	r3, [r4, #1302]	; 0x516
    inst->attrib.nsfd = sfd_len;
   1166e:	f884 7540 	strb.w	r7, [r4, #1344]	; 0x540
    inst->attrib.nsync = preamble_len;
   11672:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   11676:	f8a4 3542 	strh.w	r3, [r4, #1346]	; 0x542
    uwbcfg_commit_to_inst_dw1000(inst, cfg);
   1167a:	4629      	mov	r1, r5
   1167c:	4620      	mov	r0, r4
   1167e:	f000 f913 	bl	118a8 <uwbcfg_commit_to_inst_dw1000>
    SLIST_FOREACH(cb, &uwbcfg_callbacks, uc_list) {
   11682:	4b24      	ldr	r3, [pc, #144]	; (11714 <uwbcfg_commit_to_inst+0x234>)
   11684:	681c      	ldr	r4, [r3, #0]
   11686:	e039      	b.n	116fc <uwbcfg_commit_to_inst+0x21c>
    } else if (!strcmp(cfg[CFGSTR_DATARATE], "850k")) {
   11688:	4923      	ldr	r1, [pc, #140]	; (11718 <uwbcfg_commit_to_inst+0x238>)
   1168a:	4630      	mov	r0, r6
   1168c:	f7fc f9e4 	bl	da58 <strcmp>
   11690:	b928      	cbnz	r0, 1169e <uwbcfg_commit_to_inst+0x1be>
        inst->attrib.Tdsym = DPL_FLOAT32_INIT(1.02564f);
   11692:	f204 533c 	addw	r3, r4, #1340	; 0x53c
   11696:	4a21      	ldr	r2, [pc, #132]	; (1171c <uwbcfg_commit_to_inst+0x23c>)
   11698:	601a      	str	r2, [r3, #0]
        sfd_len = 8;
   1169a:	2708      	movs	r7, #8
   1169c:	e739      	b.n	11512 <uwbcfg_commit_to_inst+0x32>
    } else if (!strcmp(cfg[CFGSTR_DATARATE], "110k")) {
   1169e:	4920      	ldr	r1, [pc, #128]	; (11720 <uwbcfg_commit_to_inst+0x240>)
   116a0:	4630      	mov	r0, r6
   116a2:	f7fc f9d9 	bl	da58 <strcmp>
   116a6:	b928      	cbnz	r0, 116b4 <uwbcfg_commit_to_inst+0x1d4>
        inst->attrib.Tdsym = DPL_FLOAT32_INIT(8.20513f);
   116a8:	f204 533c 	addw	r3, r4, #1340	; 0x53c
   116ac:	4a1d      	ldr	r2, [pc, #116]	; (11724 <uwbcfg_commit_to_inst+0x244>)
   116ae:	601a      	str	r2, [r3, #0]
        sfd_len = 64;
   116b0:	2740      	movs	r7, #64	; 0x40
   116b2:	e72e      	b.n	11512 <uwbcfg_commit_to_inst+0x32>
    int sfd_len=0;
   116b4:	2700      	movs	r7, #0
   116b6:	e72c      	b.n	11512 <uwbcfg_commit_to_inst+0x32>
    inst->config.rx.phrMode = (cfg[CFGSTR_RX_PHRMODE][0] == 's')? DWT_PHRMODE_STD : DWT_PHRMODE_EXT;
   116b8:	2300      	movs	r3, #0
   116ba:	e748      	b.n	1154e <uwbcfg_commit_to_inst+0x6e>
    switch (preamble_len)
   116bc:	2b40      	cmp	r3, #64	; 0x40
   116be:	d10e      	bne.n	116de <uwbcfg_commit_to_inst+0x1fe>
   116c0:	2604      	movs	r6, #4
   116c2:	e7c1      	b.n	11648 <uwbcfg_commit_to_inst+0x168>
   116c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   116c8:	d014      	beq.n	116f4 <uwbcfg_commit_to_inst+0x214>
   116ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   116ce:	d101      	bne.n	116d4 <uwbcfg_commit_to_inst+0x1f4>
    case (4096): txP = DWT_PLEN_4096;break;
   116d0:	260c      	movs	r6, #12
   116d2:	e7b9      	b.n	11648 <uwbcfg_commit_to_inst+0x168>
    switch (preamble_len)
   116d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   116d8:	d101      	bne.n	116de <uwbcfg_commit_to_inst+0x1fe>
    case (1024): txP = DWT_PLEN_1024;break;
   116da:	2608      	movs	r6, #8
   116dc:	e7b4      	b.n	11648 <uwbcfg_commit_to_inst+0x168>
        UC_WARN("inv preamb_len\n");
   116de:	4b12      	ldr	r3, [pc, #72]	; (11728 <uwbcfg_commit_to_inst+0x248>)
   116e0:	2202      	movs	r2, #2
   116e2:	215c      	movs	r1, #92	; 0x5c
   116e4:	4811      	ldr	r0, [pc, #68]	; (1172c <uwbcfg_commit_to_inst+0x24c>)
   116e6:	f00c ff51 	bl	1e58c <log_printf>
        break;
   116ea:	e7ad      	b.n	11648 <uwbcfg_commit_to_inst+0x168>
    case (512):  txP = DWT_PLEN_512 ;break;
   116ec:	2634      	movs	r6, #52	; 0x34
   116ee:	e7ab      	b.n	11648 <uwbcfg_commit_to_inst+0x168>
    case (128):  txP = DWT_PLEN_128 ;break;
   116f0:	2614      	movs	r6, #20
   116f2:	e7a9      	b.n	11648 <uwbcfg_commit_to_inst+0x168>
    case (2048): txP = DWT_PLEN_2048;break;
   116f4:	2628      	movs	r6, #40	; 0x28
   116f6:	e7a7      	b.n	11648 <uwbcfg_commit_to_inst+0x168>
            cb->uc_update();
   116f8:	4798      	blx	r3
    SLIST_FOREACH(cb, &uwbcfg_callbacks, uc_list) {
   116fa:	6824      	ldr	r4, [r4, #0]
   116fc:	b11c      	cbz	r4, 11706 <uwbcfg_commit_to_inst+0x226>
        if (cb->uc_update) {
   116fe:	6863      	ldr	r3, [r4, #4]
   11700:	2b00      	cmp	r3, #0
   11702:	d1f9      	bne.n	116f8 <uwbcfg_commit_to_inst+0x218>
   11704:	e7f9      	b.n	116fa <uwbcfg_commit_to_inst+0x21a>
}
   11706:	2000      	movs	r0, #0
   11708:	b003      	add	sp, #12
   1170a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1170c:	000239b8 	.word	0x000239b8
   11710:	3e03497b 	.word	0x3e03497b
   11714:	20004564 	.word	0x20004564
   11718:	000239bc 	.word	0x000239bc
   1171c:	3f83482c 	.word	0x3f83482c
   11720:	000239c4 	.word	0x000239c4
   11724:	41034836 	.word	0x41034836
   11728:	000239cc 	.word	0x000239cc
   1172c:	2000454c 	.word	0x2000454c

00011730 <uwbcfg_commit>:
{
   11730:	b510      	push	{r4, lr}
    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
   11732:	2400      	movs	r4, #0
   11734:	e000      	b.n	11738 <uwbcfg_commit+0x8>
   11736:	3401      	adds	r4, #1
   11738:	2c02      	cmp	r4, #2
   1173a:	dc08      	bgt.n	1174e <uwbcfg_commit+0x1e>
        udev = uwb_dev_idx_lookup(i);
   1173c:	4620      	mov	r0, r4
   1173e:	f7f7 f9db 	bl	8af8 <uwb_dev_idx_lookup>
        if (!udev) {
   11742:	2800      	cmp	r0, #0
   11744:	d0f7      	beq.n	11736 <uwbcfg_commit+0x6>
        uwbcfg_commit_to_inst(udev, g_uwb_config);
   11746:	4903      	ldr	r1, [pc, #12]	; (11754 <uwbcfg_commit+0x24>)
   11748:	f7ff feca 	bl	114e0 <uwbcfg_commit_to_inst>
   1174c:	e7f3      	b.n	11736 <uwbcfg_commit+0x6>
}
   1174e:	2000      	movs	r0, #0
   11750:	bd10      	pop	{r4, pc}
   11752:	bf00      	nop
   11754:	20000650 	.word	0x20000650

00011758 <uwbcfg_register>:

int
uwbcfg_register(struct uwbcfg_cbs *handler)
{
    SLIST_INSERT_HEAD(&uwbcfg_callbacks, handler, uc_list);
   11758:	4b02      	ldr	r3, [pc, #8]	; (11764 <uwbcfg_register+0xc>)
   1175a:	681a      	ldr	r2, [r3, #0]
   1175c:	6002      	str	r2, [r0, #0]
   1175e:	6018      	str	r0, [r3, #0]
    return 0;
}
   11760:	2000      	movs	r0, #0
   11762:	4770      	bx	lr
   11764:	20004564 	.word	0x20004564

00011768 <uwbcfg_pkg_init>:
    return uwbcfg_commit();
}

int
uwbcfg_pkg_init(void)
{
   11768:	b510      	push	{r4, lr}
   1176a:	b082      	sub	sp, #8
#ifndef __KERNEL__
    int rc;
    rc = conf_register(&uwbcfg_handler);
   1176c:	480d      	ldr	r0, [pc, #52]	; (117a4 <uwbcfg_pkg_init+0x3c>)
   1176e:	f7fd f94f 	bl	ea10 <conf_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   11772:	b138      	cbz	r0, 11784 <uwbcfg_pkg_init+0x1c>
   11774:	2000      	movs	r0, #0
   11776:	9000      	str	r0, [sp, #0]
   11778:	4b0b      	ldr	r3, [pc, #44]	; (117a8 <uwbcfg_pkg_init+0x40>)
   1177a:	681c      	ldr	r4, [r3, #0]
   1177c:	4603      	mov	r3, r0
   1177e:	4602      	mov	r2, r0
   11780:	4601      	mov	r1, r0
   11782:	47a0      	blx	r4
#endif

    /* Init log and Config */
    log_register("uwbcfg", &_uwbcfg_log, &log_console_handler,
   11784:	2301      	movs	r3, #1
   11786:	9300      	str	r3, [sp, #0]
   11788:	2300      	movs	r3, #0
   1178a:	4a08      	ldr	r2, [pc, #32]	; (117ac <uwbcfg_pkg_init+0x44>)
   1178c:	4908      	ldr	r1, [pc, #32]	; (117b0 <uwbcfg_pkg_init+0x48>)
   1178e:	4809      	ldr	r0, [pc, #36]	; (117b4 <uwbcfg_pkg_init+0x4c>)
   11790:	f00c ff44 	bl	1e61c <log_register>
                 NULL, LOG_SYSLEVEL);

    SLIST_INIT(&uwbcfg_callbacks);
   11794:	2400      	movs	r4, #0
   11796:	4b08      	ldr	r3, [pc, #32]	; (117b8 <uwbcfg_pkg_init+0x50>)
   11798:	601c      	str	r4, [r3, #0]
#if MYNEWT_VAL(UWBCFG_CLI)
    uwbcfg_cli_register();
#endif

#if MYNEWT_VAL(UWBCFG_APPLY_AT_INIT)
    uwbcfg_commit();
   1179a:	f7ff ffc9 	bl	11730 <uwbcfg_commit>
#endif
#ifdef __KERNEL__
    uwbcfg_sysfs_init();
#endif
    return 0;
}
   1179e:	4620      	mov	r0, r4
   117a0:	b002      	add	sp, #8
   117a2:	bd10      	pop	{r4, pc}
   117a4:	20000740 	.word	0x20000740
   117a8:	2000064c 	.word	0x2000064c
   117ac:	00024af0 	.word	0x00024af0
   117b0:	2000454c 	.word	0x2000454c
   117b4:	000239dc 	.word	0x000239dc
   117b8:	20004564 	.word	0x20004564

000117bc <uwbcfg_pkg_down>:
{
#ifdef __KERNEL__
    uwbcfg_sysfs_deinit();
#endif
    return 0;
}
   117bc:	2000      	movs	r0, #0
   117be:	4770      	bx	lr

000117c0 <check_preamble_code>:
#define power_value(COARSE,FINE) ((COARSE<<5) + FINE)

#if MYNEWT_VAL(DW1000_DEVICE_0)
static void
check_preamble_code(struct uwb_dev * inst, uint8_t *arg_code)
{
   117c0:	b530      	push	{r4, r5, lr}
   117c2:	b083      	sub	sp, #12
   117c4:	460c      	mov	r4, r1
    int new_code = 0;
    int ch = inst->config.channel;
   117c6:	f890 250c 	ldrb.w	r2, [r0, #1292]	; 0x50c
    int prf = inst->config.prf;
   117ca:	f890 150e 	ldrb.w	r1, [r0, #1294]	; 0x50e
    uint8_t code = *arg_code;
   117ce:	7823      	ldrb	r3, [r4, #0]
    if (prf == DWT_PRF_16M) {
   117d0:	2901      	cmp	r1, #1
   117d2:	d00a      	beq.n	117ea <check_preamble_code+0x2a>
        if (ch == 1 && code != 1 && code != 2)              new_code = 1;
        if ((ch == 2 || ch==5) && code != 3 && code != 4)   new_code = 3;
        if (ch == 3 && code != 5 && code != 6)              new_code = 5;
        if ((ch == 4 || ch == 7) && code != 7 && code != 8) new_code = 7;
    } else {
        if (ch == 1 || ch==2 || ch==3 || ch==5) {
   117d4:	1e51      	subs	r1, r2, #1
   117d6:	2902      	cmp	r1, #2
   117d8:	d932      	bls.n	11840 <check_preamble_code+0x80>
   117da:	2a05      	cmp	r2, #5
   117dc:	d030      	beq.n	11840 <check_preamble_code+0x80>
            if (code < 9 || code > 12)  new_code = 9;
        } else { /* channels 4 and 7 */
            if (code < 17 || code > 20) new_code = 17;
   117de:	3b11      	subs	r3, #17
   117e0:	b2db      	uxtb	r3, r3
   117e2:	2b03      	cmp	r3, #3
   117e4:	d939      	bls.n	1185a <check_preamble_code+0x9a>
   117e6:	2511      	movs	r5, #17
   117e8:	e02f      	b.n	1184a <check_preamble_code+0x8a>
        if (ch == 1 && code != 1 && code != 2)              new_code = 1;
   117ea:	2a01      	cmp	r2, #1
   117ec:	d00c      	beq.n	11808 <check_preamble_code+0x48>
    int new_code = 0;
   117ee:	2500      	movs	r5, #0
        if ((ch == 2 || ch==5) && code != 3 && code != 4)   new_code = 3;
   117f0:	2a02      	cmp	r2, #2
   117f2:	d013      	beq.n	1181c <check_preamble_code+0x5c>
   117f4:	2a05      	cmp	r2, #5
   117f6:	d011      	beq.n	1181c <check_preamble_code+0x5c>
        if (ch == 3 && code != 5 && code != 6)              new_code = 5;
   117f8:	2a03      	cmp	r2, #3
   117fa:	d015      	beq.n	11828 <check_preamble_code+0x68>
        if ((ch == 4 || ch == 7) && code != 7 && code != 8) new_code = 7;
   117fc:	2a04      	cmp	r2, #4
   117fe:	d019      	beq.n	11834 <check_preamble_code+0x74>
   11800:	2a07      	cmp	r2, #7
   11802:	d017      	beq.n	11834 <check_preamble_code+0x74>
        }
    }
    if (new_code) {
   11804:	b34d      	cbz	r5, 1185a <check_preamble_code+0x9a>
   11806:	e020      	b.n	1184a <check_preamble_code+0x8a>
        if (ch == 1 && code != 1 && code != 2)              new_code = 1;
   11808:	2b01      	cmp	r3, #1
   1180a:	d005      	beq.n	11818 <check_preamble_code+0x58>
   1180c:	2b02      	cmp	r3, #2
   1180e:	d001      	beq.n	11814 <check_preamble_code+0x54>
   11810:	4615      	mov	r5, r2
   11812:	e7ed      	b.n	117f0 <check_preamble_code+0x30>
    int new_code = 0;
   11814:	2500      	movs	r5, #0
   11816:	e7eb      	b.n	117f0 <check_preamble_code+0x30>
   11818:	2500      	movs	r5, #0
   1181a:	e7e9      	b.n	117f0 <check_preamble_code+0x30>
        if ((ch == 2 || ch==5) && code != 3 && code != 4)   new_code = 3;
   1181c:	2b03      	cmp	r3, #3
   1181e:	d0eb      	beq.n	117f8 <check_preamble_code+0x38>
   11820:	2b04      	cmp	r3, #4
   11822:	d0e9      	beq.n	117f8 <check_preamble_code+0x38>
   11824:	2503      	movs	r5, #3
   11826:	e7e7      	b.n	117f8 <check_preamble_code+0x38>
        if (ch == 3 && code != 5 && code != 6)              new_code = 5;
   11828:	2b05      	cmp	r3, #5
   1182a:	d0e7      	beq.n	117fc <check_preamble_code+0x3c>
   1182c:	2b06      	cmp	r3, #6
   1182e:	d0e5      	beq.n	117fc <check_preamble_code+0x3c>
   11830:	2505      	movs	r5, #5
   11832:	e7e3      	b.n	117fc <check_preamble_code+0x3c>
        if ((ch == 4 || ch == 7) && code != 7 && code != 8) new_code = 7;
   11834:	2b07      	cmp	r3, #7
   11836:	d0e5      	beq.n	11804 <check_preamble_code+0x44>
   11838:	2b08      	cmp	r3, #8
   1183a:	d0e3      	beq.n	11804 <check_preamble_code+0x44>
   1183c:	2507      	movs	r5, #7
   1183e:	e004      	b.n	1184a <check_preamble_code+0x8a>
            if (code < 9 || code > 12)  new_code = 9;
   11840:	3b09      	subs	r3, #9
   11842:	b2db      	uxtb	r3, r3
   11844:	2b03      	cmp	r3, #3
   11846:	d908      	bls.n	1185a <check_preamble_code+0x9a>
   11848:	2509      	movs	r5, #9
        UC_WARN("inv pream code (using %d)\n", new_code);
   1184a:	9500      	str	r5, [sp, #0]
   1184c:	4b04      	ldr	r3, [pc, #16]	; (11860 <check_preamble_code+0xa0>)
   1184e:	2202      	movs	r2, #2
   11850:	215c      	movs	r1, #92	; 0x5c
   11852:	4804      	ldr	r0, [pc, #16]	; (11864 <check_preamble_code+0xa4>)
   11854:	f00c fe9a 	bl	1e58c <log_printf>
        *arg_code = new_code;
   11858:	7025      	strb	r5, [r4, #0]
    }
}
   1185a:	b003      	add	sp, #12
   1185c:	bd30      	pop	{r4, r5, pc}
   1185e:	bf00      	nop
   11860:	00023ae4 	.word	0x00023ae4
   11864:	2000454c 	.word	0x2000454c

00011868 <remap_framefilter>:

uint16_t
remap_framefilter(uint16_t cfg_ff)
{
   11868:	4603      	mov	r3, r0
    uint16_t r=0;
    if (cfg_ff & UWB_FF_BEACON_EN) r|= DWT_FF_BEACON_EN;
   1186a:	f010 0001 	ands.w	r0, r0, #1
   1186e:	d000      	beq.n	11872 <remap_framefilter+0xa>
   11870:	2004      	movs	r0, #4
    if (cfg_ff & UWB_FF_DATA_EN)   r|= DWT_FF_DATA_EN;
   11872:	f013 0f02 	tst.w	r3, #2
   11876:	d001      	beq.n	1187c <remap_framefilter+0x14>
   11878:	f040 0008 	orr.w	r0, r0, #8
    if (cfg_ff & UWB_FF_ACK_EN)    r|= DWT_FF_ACK_EN;
   1187c:	f013 0f04 	tst.w	r3, #4
   11880:	d001      	beq.n	11886 <remap_framefilter+0x1e>
   11882:	f040 0010 	orr.w	r0, r0, #16
    if (cfg_ff & UWB_FF_MAC_EN)    r|= DWT_FF_MAC_EN;
   11886:	f013 0f08 	tst.w	r3, #8
   1188a:	d001      	beq.n	11890 <remap_framefilter+0x28>
   1188c:	f040 0020 	orr.w	r0, r0, #32
    if (cfg_ff & UWB_FF_RSVD_EN)   r|= DWT_FF_RSVD_EN;
   11890:	f013 0f10 	tst.w	r3, #16
   11894:	d001      	beq.n	1189a <remap_framefilter+0x32>
   11896:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    if (cfg_ff & UWB_FF_COORD_EN)  r|= DWT_FF_COORD_EN;
   1189a:	f413 7f80 	tst.w	r3, #256	; 0x100
   1189e:	d001      	beq.n	118a4 <remap_framefilter+0x3c>
   118a0:	f040 0002 	orr.w	r0, r0, #2
    return r;
}
   118a4:	4770      	bx	lr
	...

000118a8 <uwbcfg_commit_to_inst_dw1000>:
{
#if MYNEWT_VAL(DW1000_DEVICE_0)
    uint8_t prf, coarse, fine, txpwr, paclen;

    /* Only proceed if this device is a dw1000 */
    if(inst->device_id != DWT_DEVICE_ID) {
   118a8:	f8d0 24c8 	ldr.w	r2, [r0, #1224]	; 0x4c8
   118ac:	4b84      	ldr	r3, [pc, #528]	; (11ac0 <uwbcfg_commit_to_inst_dw1000+0x218>)
   118ae:	429a      	cmp	r2, r3
   118b0:	d001      	beq.n	118b6 <uwbcfg_commit_to_inst_dw1000+0xe>
     * dw1000 understands */
    inst->config.rx.frameFilter = remap_framefilter(
        inst->config.rx.frameFilter);
#endif
    return 0;
}
   118b2:	2000      	movs	r0, #0
   118b4:	4770      	bx	lr
{
   118b6:	b570      	push	{r4, r5, r6, lr}
   118b8:	b084      	sub	sp, #16
   118ba:	4604      	mov	r4, r0
   118bc:	460d      	mov	r5, r1
    conf_value_from_str(cfg[CFGSTR_PRF], CONF_INT8, (void*)&prf, 0);
   118be:	2300      	movs	r3, #0
   118c0:	f10d 020f 	add.w	r2, sp, #15
   118c4:	2102      	movs	r1, #2
   118c6:	f105 0008 	add.w	r0, r5, #8
   118ca:	f7fd f8e6 	bl	ea9a <conf_value_from_str>
    if (prf == 16) {
   118ce:	f89d 300f 	ldrb.w	r3, [sp, #15]
   118d2:	2b10      	cmp	r3, #16
   118d4:	d005      	beq.n	118e2 <uwbcfg_commit_to_inst_dw1000+0x3a>
    } else if (prf == 64) {
   118d6:	2b40      	cmp	r3, #64	; 0x40
   118d8:	d11b      	bne.n	11912 <uwbcfg_commit_to_inst_dw1000+0x6a>
        inst->config.prf = DWT_PRF_64M;
   118da:	2302      	movs	r3, #2
   118dc:	f884 350e 	strb.w	r3, [r4, #1294]	; 0x50e
   118e0:	e002      	b.n	118e8 <uwbcfg_commit_to_inst_dw1000+0x40>
        inst->config.prf = DWT_PRF_16M;
   118e2:	2301      	movs	r3, #1
   118e4:	f884 350e 	strb.w	r3, [r4, #1294]	; 0x50e
    check_preamble_code(inst, &inst->config.rx.preambleCodeIndex);
   118e8:	f204 5111 	addw	r1, r4, #1297	; 0x511
   118ec:	4620      	mov	r0, r4
   118ee:	f7ff ff67 	bl	117c0 <check_preamble_code>
    check_preamble_code(inst, &inst->config.tx.preambleCodeIndex);
   118f2:	f504 61a4 	add.w	r1, r4, #1312	; 0x520
   118f6:	4620      	mov	r0, r4
   118f8:	f7ff ff62 	bl	117c0 <check_preamble_code>
    switch (inst->config.channel) {
   118fc:	f894 350c 	ldrb.w	r3, [r4, #1292]	; 0x50c
   11900:	3b01      	subs	r3, #1
   11902:	2b06      	cmp	r3, #6
   11904:	d842      	bhi.n	1198c <uwbcfg_commit_to_inst_dw1000+0xe4>
   11906:	e8df f003 	tbb	[pc, r3]
   1190a:	2d0c      	.short	0x2d0c
   1190c:	413d3531 	.word	0x413d3531
   11910:	39          	.byte	0x39
   11911:	00          	.byte	0x00
        UC_WARN("inv prf %d\n", prf);
   11912:	9300      	str	r3, [sp, #0]
   11914:	4b6b      	ldr	r3, [pc, #428]	; (11ac4 <uwbcfg_commit_to_inst_dw1000+0x21c>)
   11916:	2202      	movs	r2, #2
   11918:	215c      	movs	r1, #92	; 0x5c
   1191a:	486b      	ldr	r0, [pc, #428]	; (11ac8 <uwbcfg_commit_to_inst_dw1000+0x220>)
   1191c:	f00c fe36 	bl	1e58c <log_printf>
   11920:	e7e2      	b.n	118e8 <uwbcfg_commit_to_inst_dw1000+0x40>
    case (1): inst->config.txrf.PGdly = TC_PGDELAY_CH1;break;
   11922:	23c9      	movs	r3, #201	; 0xc9
   11924:	f884 3524 	strb.w	r3, [r4, #1316]	; 0x524
    if (!strcmp(cfg[CFGSTR_DATARATE], "6m8")) {
   11928:	f105 0610 	add.w	r6, r5, #16
   1192c:	4967      	ldr	r1, [pc, #412]	; (11acc <uwbcfg_commit_to_inst_dw1000+0x224>)
   1192e:	4630      	mov	r0, r6
   11930:	f7fc f892 	bl	da58 <strcmp>
   11934:	bb88      	cbnz	r0, 1199a <uwbcfg_commit_to_inst_dw1000+0xf2>
        inst->config.dataRate = DWT_BR_6M8;
   11936:	2302      	movs	r3, #2
   11938:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
    conf_value_from_str(cfg[CFGSTR_RX_PACLEN], CONF_INT8, (void*)&paclen, 0);
   1193c:	2300      	movs	r3, #0
   1193e:	aa03      	add	r2, sp, #12
   11940:	2102      	movs	r1, #2
   11942:	f105 0018 	add.w	r0, r5, #24
   11946:	f7fd f8a8 	bl	ea9a <conf_value_from_str>
    switch (paclen) {
   1194a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1194e:	2b20      	cmp	r3, #32
   11950:	d06b      	beq.n	11a2a <uwbcfg_commit_to_inst_dw1000+0x182>
   11952:	d83b      	bhi.n	119cc <uwbcfg_commit_to_inst_dw1000+0x124>
   11954:	2b08      	cmp	r3, #8
   11956:	d03f      	beq.n	119d8 <uwbcfg_commit_to_inst_dw1000+0x130>
   11958:	2b10      	cmp	r3, #16
   1195a:	d16a      	bne.n	11a32 <uwbcfg_commit_to_inst_dw1000+0x18a>
    case (16): inst->config.rx.pacLength = DWT_PAC16;break;
   1195c:	2301      	movs	r3, #1
   1195e:	f884 3510 	strb.w	r3, [r4, #1296]	; 0x510
   11962:	e03c      	b.n	119de <uwbcfg_commit_to_inst_dw1000+0x136>
    case (2): inst->config.txrf.PGdly = TC_PGDELAY_CH2;break;
   11964:	23c2      	movs	r3, #194	; 0xc2
   11966:	f884 3524 	strb.w	r3, [r4, #1316]	; 0x524
   1196a:	e7dd      	b.n	11928 <uwbcfg_commit_to_inst_dw1000+0x80>
    case (3): inst->config.txrf.PGdly = TC_PGDELAY_CH3;break;
   1196c:	23c5      	movs	r3, #197	; 0xc5
   1196e:	f884 3524 	strb.w	r3, [r4, #1316]	; 0x524
   11972:	e7d9      	b.n	11928 <uwbcfg_commit_to_inst_dw1000+0x80>
    case (4): inst->config.txrf.PGdly = TC_PGDELAY_CH4;break;
   11974:	2395      	movs	r3, #149	; 0x95
   11976:	f884 3524 	strb.w	r3, [r4, #1316]	; 0x524
   1197a:	e7d5      	b.n	11928 <uwbcfg_commit_to_inst_dw1000+0x80>
    case (7): inst->config.txrf.PGdly = TC_PGDELAY_CH7;break;
   1197c:	2393      	movs	r3, #147	; 0x93
   1197e:	f884 3524 	strb.w	r3, [r4, #1316]	; 0x524
   11982:	e7d1      	b.n	11928 <uwbcfg_commit_to_inst_dw1000+0x80>
    case (5): inst->config.txrf.PGdly = TC_PGDELAY_CH5;break;
   11984:	23c0      	movs	r3, #192	; 0xc0
   11986:	f884 3524 	strb.w	r3, [r4, #1316]	; 0x524
   1198a:	e7cd      	b.n	11928 <uwbcfg_commit_to_inst_dw1000+0x80>
        UC_WARN("inv ch\n");
   1198c:	4b50      	ldr	r3, [pc, #320]	; (11ad0 <uwbcfg_commit_to_inst_dw1000+0x228>)
   1198e:	2202      	movs	r2, #2
   11990:	215c      	movs	r1, #92	; 0x5c
   11992:	484d      	ldr	r0, [pc, #308]	; (11ac8 <uwbcfg_commit_to_inst_dw1000+0x220>)
   11994:	f00c fdfa 	bl	1e58c <log_printf>
        break;
   11998:	e7c6      	b.n	11928 <uwbcfg_commit_to_inst_dw1000+0x80>
    } else if (!strcmp(cfg[CFGSTR_DATARATE], "850k")) {
   1199a:	494e      	ldr	r1, [pc, #312]	; (11ad4 <uwbcfg_commit_to_inst_dw1000+0x22c>)
   1199c:	4630      	mov	r0, r6
   1199e:	f7fc f85b 	bl	da58 <strcmp>
   119a2:	b918      	cbnz	r0, 119ac <uwbcfg_commit_to_inst_dw1000+0x104>
        inst->config.dataRate = DWT_BR_850K;
   119a4:	2301      	movs	r3, #1
   119a6:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
   119aa:	e7c7      	b.n	1193c <uwbcfg_commit_to_inst_dw1000+0x94>
    } else if (!strcmp(cfg[CFGSTR_DATARATE], "110k")) {
   119ac:	494a      	ldr	r1, [pc, #296]	; (11ad8 <uwbcfg_commit_to_inst_dw1000+0x230>)
   119ae:	4630      	mov	r0, r6
   119b0:	f7fc f852 	bl	da58 <strcmp>
   119b4:	b918      	cbnz	r0, 119be <uwbcfg_commit_to_inst_dw1000+0x116>
        inst->config.dataRate = DWT_BR_110K;
   119b6:	2300      	movs	r3, #0
   119b8:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
   119bc:	e7be      	b.n	1193c <uwbcfg_commit_to_inst_dw1000+0x94>
        UC_WARN("inv datarate\n");
   119be:	4b47      	ldr	r3, [pc, #284]	; (11adc <uwbcfg_commit_to_inst_dw1000+0x234>)
   119c0:	2202      	movs	r2, #2
   119c2:	215c      	movs	r1, #92	; 0x5c
   119c4:	4840      	ldr	r0, [pc, #256]	; (11ac8 <uwbcfg_commit_to_inst_dw1000+0x220>)
   119c6:	f00c fde1 	bl	1e58c <log_printf>
   119ca:	e7b7      	b.n	1193c <uwbcfg_commit_to_inst_dw1000+0x94>
    switch (paclen) {
   119cc:	2b40      	cmp	r3, #64	; 0x40
   119ce:	d130      	bne.n	11a32 <uwbcfg_commit_to_inst_dw1000+0x18a>
    case (64): inst->config.rx.pacLength = DWT_PAC64;break;
   119d0:	2303      	movs	r3, #3
   119d2:	f884 3510 	strb.w	r3, [r4, #1296]	; 0x510
   119d6:	e002      	b.n	119de <uwbcfg_commit_to_inst_dw1000+0x136>
    case (8):  inst->config.rx.pacLength = DWT_PAC8;break;
   119d8:	2300      	movs	r3, #0
   119da:	f884 3510 	strb.w	r3, [r4, #1296]	; 0x510
    if (inst->config.rx.sfdType>1) {
   119de:	f894 3512 	ldrb.w	r3, [r4, #1298]	; 0x512
   119e2:	2b01      	cmp	r3, #1
   119e4:	d82c      	bhi.n	11a40 <uwbcfg_commit_to_inst_dw1000+0x198>
    conf_value_from_str(cfg[CFGSTR_TXRF_PWR_COARSE], CONF_INT8, (void*)&coarse, 0);
   119e6:	2300      	movs	r3, #0
   119e8:	f10d 020e 	add.w	r2, sp, #14
   119ec:	2102      	movs	r1, #2
   119ee:	f105 0058 	add.w	r0, r5, #88	; 0x58
   119f2:	f7fd f852 	bl	ea9a <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_TXRF_PWR_FINE], CONF_INT8, (void*)&fine, 0);
   119f6:	2300      	movs	r3, #0
   119f8:	f10d 020d 	add.w	r2, sp, #13
   119fc:	2102      	movs	r1, #2
   119fe:	f105 0060 	add.w	r0, r5, #96	; 0x60
   11a02:	f7fd f84a 	bl	ea9a <conf_value_from_str>
    txpwr = inst->config.txrf.BOOSTNORM;
   11a06:	f894 5528 	ldrb.w	r5, [r4, #1320]	; 0x528
    switch (coarse) {
   11a0a:	f89d 300e 	ldrb.w	r3, [sp, #14]
   11a0e:	2b12      	cmp	r3, #18
   11a10:	d84e      	bhi.n	11ab0 <uwbcfg_commit_to_inst_dw1000+0x208>
   11a12:	e8df f003 	tbb	[pc, r3]
   11a16:	4d48      	.short	0x4d48
   11a18:	4d4d434d 	.word	0x4d4d434d
   11a1c:	394d4d3e 	.word	0x394d4d3e
   11a20:	4d344d4d 	.word	0x4d344d4d
   11a24:	4d4d2f4d 	.word	0x4d4d2f4d
   11a28:	1c          	.byte	0x1c
   11a29:	00          	.byte	0x00
    case (32): inst->config.rx.pacLength = DWT_PAC32;break;
   11a2a:	2302      	movs	r3, #2
   11a2c:	f884 3510 	strb.w	r3, [r4, #1296]	; 0x510
   11a30:	e7d5      	b.n	119de <uwbcfg_commit_to_inst_dw1000+0x136>
        UC_WARN("inv paclen\n");
   11a32:	4b2b      	ldr	r3, [pc, #172]	; (11ae0 <uwbcfg_commit_to_inst_dw1000+0x238>)
   11a34:	2202      	movs	r2, #2
   11a36:	215c      	movs	r1, #92	; 0x5c
   11a38:	4823      	ldr	r0, [pc, #140]	; (11ac8 <uwbcfg_commit_to_inst_dw1000+0x220>)
   11a3a:	f00c fda7 	bl	1e58c <log_printf>
   11a3e:	e7ce      	b.n	119de <uwbcfg_commit_to_inst_dw1000+0x136>
        UC_WARN("inv sfdType\n");
   11a40:	4b28      	ldr	r3, [pc, #160]	; (11ae4 <uwbcfg_commit_to_inst_dw1000+0x23c>)
   11a42:	2202      	movs	r2, #2
   11a44:	215c      	movs	r1, #92	; 0x5c
   11a46:	4820      	ldr	r0, [pc, #128]	; (11ac8 <uwbcfg_commit_to_inst_dw1000+0x220>)
   11a48:	f00c fda0 	bl	1e58c <log_printf>
   11a4c:	e7cb      	b.n	119e6 <uwbcfg_commit_to_inst_dw1000+0x13e>
    case(18): txpwr = power_value(DW1000_txrf_config_18db, fine);break;
   11a4e:	f89d 500d 	ldrb.w	r5, [sp, #13]
    inst->config.txrf.BOOSTNORM = txpwr;
   11a52:	f884 5528 	strb.w	r5, [r4, #1320]	; 0x528
    inst->config.txrf.BOOSTP500 = txpwr;
   11a56:	f884 5529 	strb.w	r5, [r4, #1321]	; 0x529
    inst->config.txrf.BOOSTP250 = txpwr;
   11a5a:	f884 552a 	strb.w	r5, [r4, #1322]	; 0x52a
    inst->config.txrf.BOOSTP125 = txpwr;
   11a5e:	f884 552b 	strb.w	r5, [r4, #1323]	; 0x52b
    inst->config.rx.frameFilter = remap_framefilter(
   11a62:	f8b4 051c 	ldrh.w	r0, [r4, #1308]	; 0x51c
   11a66:	f7ff feff 	bl	11868 <remap_framefilter>
   11a6a:	f8a4 051c 	strh.w	r0, [r4, #1308]	; 0x51c
}
   11a6e:	2000      	movs	r0, #0
   11a70:	b004      	add	sp, #16
   11a72:	bd70      	pop	{r4, r5, r6, pc}
    case(15): txpwr = power_value(DW1000_txrf_config_15db, fine);break;
   11a74:	f89d 500d 	ldrb.w	r5, [sp, #13]
   11a78:	3520      	adds	r5, #32
   11a7a:	b2ed      	uxtb	r5, r5
   11a7c:	e7e9      	b.n	11a52 <uwbcfg_commit_to_inst_dw1000+0x1aa>
    case(12): txpwr = power_value(DW1000_txrf_config_12db, fine);break;
   11a7e:	f89d 500d 	ldrb.w	r5, [sp, #13]
   11a82:	3540      	adds	r5, #64	; 0x40
   11a84:	b2ed      	uxtb	r5, r5
   11a86:	e7e4      	b.n	11a52 <uwbcfg_commit_to_inst_dw1000+0x1aa>
    case(9):  txpwr = power_value(DW1000_txrf_config_9db, fine);break;
   11a88:	f89d 500d 	ldrb.w	r5, [sp, #13]
   11a8c:	3560      	adds	r5, #96	; 0x60
   11a8e:	b2ed      	uxtb	r5, r5
   11a90:	e7df      	b.n	11a52 <uwbcfg_commit_to_inst_dw1000+0x1aa>
    case(6):  txpwr = power_value(DW1000_txrf_config_6db, fine);break;
   11a92:	f89d 500d 	ldrb.w	r5, [sp, #13]
   11a96:	f085 0580 	eor.w	r5, r5, #128	; 0x80
   11a9a:	e7da      	b.n	11a52 <uwbcfg_commit_to_inst_dw1000+0x1aa>
        txpwr = power_value(DW1000_txrf_config_3db, fine);
   11a9c:	f89d 500d 	ldrb.w	r5, [sp, #13]
   11aa0:	3d60      	subs	r5, #96	; 0x60
   11aa2:	b2ed      	uxtb	r5, r5
        break;
   11aa4:	e7d5      	b.n	11a52 <uwbcfg_commit_to_inst_dw1000+0x1aa>
        txpwr = power_value(DW1000_txrf_config_0db, fine);
   11aa6:	f89d 500d 	ldrb.w	r5, [sp, #13]
   11aaa:	3d40      	subs	r5, #64	; 0x40
   11aac:	b2ed      	uxtb	r5, r5
        break;
   11aae:	e7d0      	b.n	11a52 <uwbcfg_commit_to_inst_dw1000+0x1aa>
        UC_WARN("inv coarse txpwr\n");
   11ab0:	4b0d      	ldr	r3, [pc, #52]	; (11ae8 <uwbcfg_commit_to_inst_dw1000+0x240>)
   11ab2:	2202      	movs	r2, #2
   11ab4:	215c      	movs	r1, #92	; 0x5c
   11ab6:	4804      	ldr	r0, [pc, #16]	; (11ac8 <uwbcfg_commit_to_inst_dw1000+0x220>)
   11ab8:	f00c fd68 	bl	1e58c <log_printf>
   11abc:	e7c9      	b.n	11a52 <uwbcfg_commit_to_inst_dw1000+0x1aa>
   11abe:	bf00      	nop
   11ac0:	deca0130 	.word	0xdeca0130
   11ac4:	00023b00 	.word	0x00023b00
   11ac8:	2000454c 	.word	0x2000454c
   11acc:	000239b8 	.word	0x000239b8
   11ad0:	00023b0c 	.word	0x00023b0c
   11ad4:	000239bc 	.word	0x000239bc
   11ad8:	000239c4 	.word	0x000239c4
   11adc:	00023b14 	.word	0x00023b14
   11ae0:	00023b24 	.word	0x00023b24
   11ae4:	00023b30 	.word	0x00023b30
   11ae8:	00023b40 	.word	0x00023b40

00011aec <strtod_soft>:
#include <inttypes.h>

#ifndef __KERNEL__

double strtod_soft( const char *nptr, char **endptr )
{
   11aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11af0:	ed2d 8b02 	vpush	{d8}
   11af4:	b085      	sub	sp, #20
   11af6:	4604      	mov	r4, r0
   11af8:	460f      	mov	r7, r1
    int i, n;
    char *period_at;
    char *dash_at;
    char *exponent_at;
    char *ep = 0;
   11afa:	2300      	movs	r3, #0
   11afc:	9303      	str	r3, [sp, #12]
    int64_t ival, frac, div, exp;
    double f, f_frac;

    period_at = strchr(nptr, '.');
   11afe:	212e      	movs	r1, #46	; 0x2e
   11b00:	f00a fc75 	bl	1c3ee <strchr>
   11b04:	4606      	mov	r6, r0
    dash_at = strchr(nptr, '-');
   11b06:	212d      	movs	r1, #45	; 0x2d
   11b08:	4620      	mov	r0, r4
   11b0a:	f00a fc70 	bl	1c3ee <strchr>
   11b0e:	9001      	str	r0, [sp, #4]
    exponent_at = strchr(nptr, 'e');
   11b10:	2165      	movs	r1, #101	; 0x65
   11b12:	4620      	mov	r0, r4
   11b14:	f00a fc6b 	bl	1c3ee <strchr>
   11b18:	4682      	mov	sl, r0
    ival = strtoll(nptr, &ep, 10);
   11b1a:	220a      	movs	r2, #10
   11b1c:	a903      	add	r1, sp, #12
   11b1e:	4620      	mov	r0, r4
   11b20:	f00a fcaf 	bl	1c482 <strtoll>
   11b24:	468b      	mov	fp, r1
    f = (double)(ival);
   11b26:	f00f fbab 	bl	21280 <__aeabi_l2d>
   11b2a:	ec41 0b18 	vmov	d8, r0, r1

    if (period_at == 0 || *(period_at+1) == 0) {
   11b2e:	b10e      	cbz	r6, 11b34 <strtod_soft+0x48>
   11b30:	7873      	ldrb	r3, [r6, #1]
   11b32:	b95b      	cbnz	r3, 11b4c <strtod_soft+0x60>
        /* No period, or period at the very end, treat as integer */
        if (endptr) *endptr = ep;
   11b34:	b10f      	cbz	r7, 11b3a <strtod_soft+0x4e>
   11b36:	9b03      	ldr	r3, [sp, #12]
   11b38:	603b      	str	r3, [r7, #0]
        exp = 1;
        for (i = 0; i < n; i++) exp *= 10;
        f *= (double)exp;
    }
    return f;
}
   11b3a:	eeb0 0a48 	vmov.f32	s0, s16
   11b3e:	eef0 0a68 	vmov.f32	s1, s17
   11b42:	b005      	add	sp, #20
   11b44:	ecbd 8b02 	vpop	{d8}
   11b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    frac = strtoll(period_at+1, &ep, 10);
   11b4c:	1c74      	adds	r4, r6, #1
   11b4e:	220a      	movs	r2, #10
   11b50:	a903      	add	r1, sp, #12
   11b52:	4620      	mov	r0, r4
   11b54:	f00a fc95 	bl	1c482 <strtoll>
   11b58:	4680      	mov	r8, r0
   11b5a:	4689      	mov	r9, r1
    if (endptr == 0) n = strlen(period_at + 1);
   11b5c:	b137      	cbz	r7, 11b6c <strtod_soft+0x80>
    else n = *endptr - period_at + 1;
   11b5e:	6838      	ldr	r0, [r7, #0]
   11b60:	1b80      	subs	r0, r0, r6
   11b62:	3001      	adds	r0, #1
    div = 1;
   11b64:	2401      	movs	r4, #1
   11b66:	2500      	movs	r5, #0
    for (i = 0; i < n; i++) div *= 10;
   11b68:	4629      	mov	r1, r5
   11b6a:	e00d      	b.n	11b88 <strtod_soft+0x9c>
    if (endptr == 0) n = strlen(period_at + 1);
   11b6c:	4620      	mov	r0, r4
   11b6e:	f7fb ff7f 	bl	da70 <strlen>
   11b72:	e7f7      	b.n	11b64 <strtod_soft+0x78>
    for (i = 0; i < n; i++) div *= 10;
   11b74:	00aa      	lsls	r2, r5, #2
   11b76:	ea42 7294 	orr.w	r2, r2, r4, lsr #30
   11b7a:	00a3      	lsls	r3, r4, #2
   11b7c:	191c      	adds	r4, r3, r4
   11b7e:	eb45 0502 	adc.w	r5, r5, r2
   11b82:	1924      	adds	r4, r4, r4
   11b84:	416d      	adcs	r5, r5
   11b86:	3101      	adds	r1, #1
   11b88:	4281      	cmp	r1, r0
   11b8a:	dbf3      	blt.n	11b74 <strtod_soft+0x88>
    f_frac = (double)frac / (double)div;
   11b8c:	4640      	mov	r0, r8
   11b8e:	4649      	mov	r1, r9
   11b90:	f00f fb76 	bl	21280 <__aeabi_l2d>
   11b94:	4680      	mov	r8, r0
   11b96:	4689      	mov	r9, r1
   11b98:	4620      	mov	r0, r4
   11b9a:	4629      	mov	r1, r5
   11b9c:	f00f fb70 	bl	21280 <__aeabi_l2d>
   11ba0:	4602      	mov	r2, r0
   11ba2:	460b      	mov	r3, r1
   11ba4:	4640      	mov	r0, r8
   11ba6:	4649      	mov	r1, r9
   11ba8:	f00f fcc2 	bl	21530 <__aeabi_ddiv>
   11bac:	4602      	mov	r2, r0
   11bae:	460b      	mov	r3, r1
    if (ival < 0 || (dash_at != 0 && dash_at < period_at)) {
   11bb0:	f1bb 0f00 	cmp.w	fp, #0
   11bb4:	db03      	blt.n	11bbe <strtod_soft+0xd2>
   11bb6:	9901      	ldr	r1, [sp, #4]
   11bb8:	b311      	cbz	r1, 11c00 <strtod_soft+0x114>
   11bba:	428e      	cmp	r6, r1
   11bbc:	d920      	bls.n	11c00 <strtod_soft+0x114>
        f -= f_frac;
   11bbe:	ec51 0b18 	vmov	r0, r1, d8
   11bc2:	f00f f9d3 	bl	20f6c <__aeabi_dsub>
   11bc6:	ec41 0b18 	vmov	d8, r0, r1
    if (endptr) *endptr = ep;
   11bca:	b10f      	cbz	r7, 11bd0 <strtod_soft+0xe4>
   11bcc:	9b03      	ldr	r3, [sp, #12]
   11bce:	603b      	str	r3, [r7, #0]
    if (exponent_at == 0 || *(exponent_at+1) == 0|| ep == 0 || exponent_at != ep) {
   11bd0:	f1ba 0f00 	cmp.w	sl, #0
   11bd4:	d0b1      	beq.n	11b3a <strtod_soft+0x4e>
   11bd6:	f89a 3001 	ldrb.w	r3, [sl, #1]
   11bda:	2b00      	cmp	r3, #0
   11bdc:	d0ad      	beq.n	11b3a <strtod_soft+0x4e>
   11bde:	9b03      	ldr	r3, [sp, #12]
   11be0:	2b00      	cmp	r3, #0
   11be2:	d0aa      	beq.n	11b3a <strtod_soft+0x4e>
   11be4:	4553      	cmp	r3, sl
   11be6:	d1a8      	bne.n	11b3a <strtod_soft+0x4e>
    n = strtoll(exponent_at+1, &ep, 10);
   11be8:	220a      	movs	r2, #10
   11bea:	a903      	add	r1, sp, #12
   11bec:	f10a 0001 	add.w	r0, sl, #1
   11bf0:	f00a fc47 	bl	1c482 <strtoll>
    if (n < 0) {
   11bf4:	1e05      	subs	r5, r0, #0
   11bf6:	db12      	blt.n	11c1e <strtod_soft+0x132>
        exp = 1;
   11bf8:	2001      	movs	r0, #1
   11bfa:	2100      	movs	r1, #0
        for (i = 0; i < n; i++) exp *= 10;
   11bfc:	460c      	mov	r4, r1
   11bfe:	e028      	b.n	11c52 <strtod_soft+0x166>
        f += f_frac;
   11c00:	ec51 0b18 	vmov	r0, r1, d8
   11c04:	f00f f9b4 	bl	20f70 <__adddf3>
   11c08:	ec41 0b18 	vmov	d8, r0, r1
   11c0c:	e7dd      	b.n	11bca <strtod_soft+0xde>
        for (i = 0; i < n; i++) div *= 10;
   11c0e:	220a      	movs	r2, #10
   11c10:	fb02 f401 	mul.w	r4, r2, r1
   11c14:	fba0 0102 	umull	r0, r1, r0, r2
   11c18:	4421      	add	r1, r4
   11c1a:	3301      	adds	r3, #1
   11c1c:	e002      	b.n	11c24 <strtod_soft+0x138>
        div = 1;
   11c1e:	2001      	movs	r0, #1
   11c20:	2100      	movs	r1, #0
        for (i = 0; i < n; i++) div *= 10;
   11c22:	460b      	mov	r3, r1
   11c24:	42ab      	cmp	r3, r5
   11c26:	dbf2      	blt.n	11c0e <strtod_soft+0x122>
        f /= (double)div;
   11c28:	f00f fb2a 	bl	21280 <__aeabi_l2d>
   11c2c:	4602      	mov	r2, r0
   11c2e:	460b      	mov	r3, r1
   11c30:	ec51 0b18 	vmov	r0, r1, d8
   11c34:	f00f fc7c 	bl	21530 <__aeabi_ddiv>
   11c38:	ec41 0b18 	vmov	d8, r0, r1
   11c3c:	e77d      	b.n	11b3a <strtod_soft+0x4e>
        for (i = 0; i < n; i++) exp *= 10;
   11c3e:	008b      	lsls	r3, r1, #2
   11c40:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
   11c44:	0082      	lsls	r2, r0, #2
   11c46:	1810      	adds	r0, r2, r0
   11c48:	eb41 0103 	adc.w	r1, r1, r3
   11c4c:	1800      	adds	r0, r0, r0
   11c4e:	4149      	adcs	r1, r1
   11c50:	3401      	adds	r4, #1
   11c52:	42ac      	cmp	r4, r5
   11c54:	dbf3      	blt.n	11c3e <strtod_soft+0x152>
        f *= (double)exp;
   11c56:	f00f fb13 	bl	21280 <__aeabi_l2d>
   11c5a:	4602      	mov	r2, r0
   11c5c:	460b      	mov	r3, r1
   11c5e:	ec51 0b18 	vmov	r0, r1, d8
   11c62:	f00f fb3b 	bl	212dc <__aeabi_dmul>
   11c66:	ec41 0b18 	vmov	d8, r0, r1
   11c6a:	e766      	b.n	11b3a <strtod_soft+0x4e>

00011c6c <leapyear>:
 *     ((year % 400) == 0) )
 * It is otherwise equivalent.
 */
static int
leapyear(int year)
{
   11c6c:	4603      	mov	r3, r0
    int rv = 0;

    if ((year & 3) == 0) {
   11c6e:	f010 0f03 	tst.w	r0, #3
   11c72:	d115      	bne.n	11ca0 <leapyear+0x34>
        rv = 1;
        if ((year % 100) == 0) {
   11c74:	4a0d      	ldr	r2, [pc, #52]	; (11cac <leapyear+0x40>)
   11c76:	fb82 1200 	smull	r1, r2, r2, r0
   11c7a:	17c0      	asrs	r0, r0, #31
   11c7c:	ebc0 1062 	rsb	r0, r0, r2, asr #5
   11c80:	2264      	movs	r2, #100	; 0x64
   11c82:	fb02 3010 	mls	r0, r2, r0, r3
   11c86:	b968      	cbnz	r0, 11ca4 <leapyear+0x38>
            rv = 0;
            if ((year % 400) == 0)
   11c88:	4908      	ldr	r1, [pc, #32]	; (11cac <leapyear+0x40>)
   11c8a:	fb81 2103 	smull	r2, r1, r1, r3
   11c8e:	17da      	asrs	r2, r3, #31
   11c90:	ebc2 12e1 	rsb	r2, r2, r1, asr #7
   11c94:	f44f 71c8 	mov.w	r1, #400	; 0x190
   11c98:	fb01 3212 	mls	r2, r1, r2, r3
   11c9c:	b122      	cbz	r2, 11ca8 <leapyear+0x3c>
   11c9e:	4770      	bx	lr
    int rv = 0;
   11ca0:	2000      	movs	r0, #0
   11ca2:	4770      	bx	lr
        rv = 1;
   11ca4:	2001      	movs	r0, #1
   11ca6:	4770      	bx	lr
                rv = 1;
   11ca8:	2001      	movs	r0, #1
        }
    }
    return (rv);
}
   11caa:	4770      	bx	lr
   11cac:	51eb851f 	.word	0x51eb851f

00011cb0 <parse_number>:
    return (0);
}

static const char *
parse_number(const char *str, int digits, int *val)
{
   11cb0:	4684      	mov	ip, r0
    const char *cp;
    const char *end;

    *val = 0;
   11cb2:	2300      	movs	r3, #0
   11cb4:	6013      	str	r3, [r2, #0]
    cp = str;
    end = str + digits;
   11cb6:	4408      	add	r0, r1
    while (cp < end) {
   11cb8:	4584      	cmp	ip, r0
   11cba:	d21a      	bcs.n	11cf2 <parse_number+0x42>
        if (!isdigit((int) *cp)) {
   11cbc:	f89c 3000 	ldrb.w	r3, [ip]
   11cc0:	3b30      	subs	r3, #48	; 0x30
   11cc2:	2b09      	cmp	r3, #9
   11cc4:	d816      	bhi.n	11cf4 <parse_number+0x44>
{
   11cc6:	b500      	push	{lr}
            return (NULL);
        }
        *val *= 10;
   11cc8:	6813      	ldr	r3, [r2, #0]
   11cca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   11cce:	005b      	lsls	r3, r3, #1
   11cd0:	6013      	str	r3, [r2, #0]
        *val += (*cp - '0');
   11cd2:	f81c eb01 	ldrb.w	lr, [ip], #1
   11cd6:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   11cda:	4473      	add	r3, lr
   11cdc:	6013      	str	r3, [r2, #0]
    while (cp < end) {
   11cde:	4584      	cmp	ip, r0
   11ce0:	d205      	bcs.n	11cee <parse_number+0x3e>
        if (!isdigit((int) *cp)) {
   11ce2:	f89c 3000 	ldrb.w	r3, [ip]
   11ce6:	3b30      	subs	r3, #48	; 0x30
   11ce8:	2b09      	cmp	r3, #9
   11cea:	d9ed      	bls.n	11cc8 <parse_number+0x18>
            return (NULL);
   11cec:	2000      	movs	r0, #0
        cp++;
    }
    return (end);
}
   11cee:	f85d fb04 	ldr.w	pc, [sp], #4
   11cf2:	4770      	bx	lr
            return (NULL);
   11cf4:	2000      	movs	r0, #0
}
   11cf6:	4770      	bx	lr

00011cf8 <clocktime_to_timeval>:
{
   11cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11cfc:	b085      	sub	sp, #20
   11cfe:	9101      	str	r1, [sp, #4]
   11d00:	9200      	str	r2, [sp, #0]
    year = ct->year;
   11d02:	6806      	ldr	r6, [r0, #0]
    if (year < POSIX_BASE_YEAR ||
   11d04:	f240 73b1 	movw	r3, #1969	; 0x7b1
   11d08:	429e      	cmp	r6, r3
   11d0a:	f340 80bc 	ble.w	11e86 <clocktime_to_timeval+0x18e>
   11d0e:	4604      	mov	r4, r0
        ct->mon < 1 || ct->mon > 12 ||
   11d10:	6845      	ldr	r5, [r0, #4]
    if (year < POSIX_BASE_YEAR ||
   11d12:	2d00      	cmp	r5, #0
   11d14:	f340 80bb 	ble.w	11e8e <clocktime_to_timeval+0x196>
        ct->mon < 1 || ct->mon > 12 ||
   11d18:	2d0c      	cmp	r5, #12
   11d1a:	f300 80ba 	bgt.w	11e92 <clocktime_to_timeval+0x19a>
        ct->day < 1 || ct->day > days_in_month(year, ct->mon) ||
   11d1e:	f8d0 8008 	ldr.w	r8, [r0, #8]
        ct->mon < 1 || ct->mon > 12 ||
   11d22:	f1b8 0f00 	cmp.w	r8, #0
   11d26:	f340 80b6 	ble.w	11e96 <clocktime_to_timeval+0x19e>
        ct->day < 1 || ct->day > days_in_month(year, ct->mon) ||
   11d2a:	1e6b      	subs	r3, r5, #1
   11d2c:	4a65      	ldr	r2, [pc, #404]	; (11ec4 <clocktime_to_timeval+0x1cc>)
   11d2e:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
   11d32:	2d02      	cmp	r5, #2
   11d34:	d02b      	beq.n	11d8e <clocktime_to_timeval+0x96>
   11d36:	2000      	movs	r0, #0
   11d38:	4407      	add	r7, r0
   11d3a:	45b8      	cmp	r8, r7
   11d3c:	f300 80ad 	bgt.w	11e9a <clocktime_to_timeval+0x1a2>
        ct->hour < 0 || ct->hour > 23 ||
   11d40:	f8d4 b00c 	ldr.w	fp, [r4, #12]
        ct->day < 1 || ct->day > days_in_month(year, ct->mon) ||
   11d44:	f1bb 0f00 	cmp.w	fp, #0
   11d48:	f2c0 80a9 	blt.w	11e9e <clocktime_to_timeval+0x1a6>
        ct->hour < 0 || ct->hour > 23 ||
   11d4c:	f1bb 0f17 	cmp.w	fp, #23
   11d50:	f300 80a7 	bgt.w	11ea2 <clocktime_to_timeval+0x1aa>
        ct->min < 0 || ct->min > 59 ||
   11d54:	6923      	ldr	r3, [r4, #16]
   11d56:	9302      	str	r3, [sp, #8]
        ct->hour < 0 || ct->hour > 23 ||
   11d58:	2b00      	cmp	r3, #0
   11d5a:	f2c0 80a4 	blt.w	11ea6 <clocktime_to_timeval+0x1ae>
        ct->min < 0 || ct->min > 59 ||
   11d5e:	2b3b      	cmp	r3, #59	; 0x3b
   11d60:	f300 80a3 	bgt.w	11eaa <clocktime_to_timeval+0x1b2>
        ct->sec < 0 || ct->sec > 59 ||
   11d64:	6963      	ldr	r3, [r4, #20]
   11d66:	9303      	str	r3, [sp, #12]
        ct->min < 0 || ct->min > 59 ||
   11d68:	2b00      	cmp	r3, #0
   11d6a:	f2c0 80a0 	blt.w	11eae <clocktime_to_timeval+0x1b6>
        ct->sec < 0 || ct->sec > 59 ||
   11d6e:	2b3b      	cmp	r3, #59	; 0x3b
   11d70:	f300 809f 	bgt.w	11eb2 <clocktime_to_timeval+0x1ba>
        ct->usec < 0 || ct->usec > 999999) {
   11d74:	69e3      	ldr	r3, [r4, #28]
        ct->sec < 0 || ct->sec > 59 ||
   11d76:	2b00      	cmp	r3, #0
   11d78:	f2c0 809d 	blt.w	11eb6 <clocktime_to_timeval+0x1be>
        ct->usec < 0 || ct->usec > 999999) {
   11d7c:	4a52      	ldr	r2, [pc, #328]	; (11ec8 <clocktime_to_timeval+0x1d0>)
   11d7e:	4293      	cmp	r3, r2
   11d80:	f300 809b 	bgt.w	11eba <clocktime_to_timeval+0x1c2>
    days = 0;
   11d84:	f04f 0900 	mov.w	r9, #0
    for (i = POSIX_BASE_YEAR; i < year; i++)
   11d88:	f240 77b2 	movw	r7, #1970	; 0x7b2
   11d8c:	e007      	b.n	11d9e <clocktime_to_timeval+0xa6>
        ct->day < 1 || ct->day > days_in_month(year, ct->mon) ||
   11d8e:	4630      	mov	r0, r6
   11d90:	f7ff ff6c 	bl	11c6c <leapyear>
   11d94:	e7d0      	b.n	11d38 <clocktime_to_timeval+0x40>
        days += days_in_year(i);
   11d96:	f240 136d 	movw	r3, #365	; 0x16d
   11d9a:	4499      	add	r9, r3
    for (i = POSIX_BASE_YEAR; i < year; i++)
   11d9c:	3701      	adds	r7, #1
   11d9e:	42b7      	cmp	r7, r6
   11da0:	da07      	bge.n	11db2 <clocktime_to_timeval+0xba>
        days += days_in_year(i);
   11da2:	4638      	mov	r0, r7
   11da4:	f7ff ff62 	bl	11c6c <leapyear>
   11da8:	2800      	cmp	r0, #0
   11daa:	d0f4      	beq.n	11d96 <clocktime_to_timeval+0x9e>
   11dac:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   11db0:	e7f3      	b.n	11d9a <clocktime_to_timeval+0xa2>
    for (i = 1; i < ct->mon; i++)
   11db2:	2701      	movs	r7, #1
   11db4:	46aa      	mov	sl, r5
   11db6:	e005      	b.n	11dc4 <clocktime_to_timeval+0xcc>
          days += days_in_month(year, i);
   11db8:	4630      	mov	r0, r6
   11dba:	f7ff ff57 	bl	11c6c <leapyear>
   11dbe:	4405      	add	r5, r0
   11dc0:	44a9      	add	r9, r5
    for (i = 1; i < ct->mon; i++)
   11dc2:	3701      	adds	r7, #1
   11dc4:	45ba      	cmp	sl, r7
   11dc6:	dd07      	ble.n	11dd8 <clocktime_to_timeval+0xe0>
          days += days_in_month(year, i);
   11dc8:	1e7b      	subs	r3, r7, #1
   11dca:	4a3e      	ldr	r2, [pc, #248]	; (11ec4 <clocktime_to_timeval+0x1cc>)
   11dcc:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   11dd0:	2f02      	cmp	r7, #2
   11dd2:	d0f1      	beq.n	11db8 <clocktime_to_timeval+0xc0>
   11dd4:	2000      	movs	r0, #0
   11dd6:	e7f2      	b.n	11dbe <clocktime_to_timeval+0xc6>
    days += (ct->day - 1);
   11dd8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   11ddc:	44c1      	add	r9, r8
    tv->tv_sec = (((int64_t)days * 24 + ct->hour) * 60 + ct->min) * 60 +
   11dde:	ea4f 72e9 	mov.w	r2, r9, asr #31
   11de2:	eb19 0309 	adds.w	r3, r9, r9
   11de6:	eb42 0102 	adc.w	r1, r2, r2
   11dea:	eb13 0309 	adds.w	r3, r3, r9
   11dee:	eb42 0201 	adc.w	r2, r2, r1
   11df2:	00d2      	lsls	r2, r2, #3
   11df4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   11df8:	00db      	lsls	r3, r3, #3
   11dfa:	eb13 030b 	adds.w	r3, r3, fp
   11dfe:	eb42 7beb 	adc.w	fp, r2, fp, asr #31
   11e02:	ea4f 120b 	mov.w	r2, fp, lsl #4
   11e06:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
   11e0a:	0119      	lsls	r1, r3, #4
   11e0c:	1acb      	subs	r3, r1, r3
   11e0e:	eb62 020b 	sbc.w	r2, r2, fp
   11e12:	0092      	lsls	r2, r2, #2
   11e14:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
   11e18:	009b      	lsls	r3, r3, #2
   11e1a:	9802      	ldr	r0, [sp, #8]
   11e1c:	1819      	adds	r1, r3, r0
   11e1e:	eb42 70e0 	adc.w	r0, r2, r0, asr #31
   11e22:	0102      	lsls	r2, r0, #4
   11e24:	ea42 7211 	orr.w	r2, r2, r1, lsr #28
   11e28:	010b      	lsls	r3, r1, #4
   11e2a:	1a5b      	subs	r3, r3, r1
   11e2c:	eb62 0200 	sbc.w	r2, r2, r0
   11e30:	0092      	lsls	r2, r2, #2
   11e32:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
   11e36:	009b      	lsls	r3, r3, #2
   11e38:	9903      	ldr	r1, [sp, #12]
   11e3a:	185b      	adds	r3, r3, r1
   11e3c:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
   11e40:	9800      	ldr	r0, [sp, #0]
   11e42:	6003      	str	r3, [r0, #0]
   11e44:	6042      	str	r2, [r0, #4]
    tv->tv_usec = ct->usec;
   11e46:	69e1      	ldr	r1, [r4, #28]
   11e48:	4604      	mov	r4, r0
   11e4a:	6081      	str	r1, [r0, #8]
    if (tz != NULL) {
   11e4c:	9d01      	ldr	r5, [sp, #4]
   11e4e:	b3b5      	cbz	r5, 11ebe <clocktime_to_timeval+0x1c6>
	tv->tv_sec += tz->tz_minuteswest * 60;
   11e50:	f9b5 1000 	ldrsh.w	r1, [r5]
   11e54:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
   11e58:	0088      	lsls	r0, r1, #2
   11e5a:	181b      	adds	r3, r3, r0
   11e5c:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
   11e60:	6023      	str	r3, [r4, #0]
   11e62:	6062      	str	r2, [r4, #4]
	tv->tv_sec -= tz->tz_dsttime ? 3600 : 0;
   11e64:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
   11e68:	b151      	cbz	r1, 11e80 <clocktime_to_timeval+0x188>
   11e6a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   11e6e:	2000      	movs	r0, #0
   11e70:	1a5b      	subs	r3, r3, r1
   11e72:	eb62 0200 	sbc.w	r2, r2, r0
   11e76:	9900      	ldr	r1, [sp, #0]
   11e78:	600b      	str	r3, [r1, #0]
   11e7a:	604a      	str	r2, [r1, #4]
    return (0);
   11e7c:	2000      	movs	r0, #0
   11e7e:	e003      	b.n	11e88 <clocktime_to_timeval+0x190>
	tv->tv_sec -= tz->tz_dsttime ? 3600 : 0;
   11e80:	2100      	movs	r1, #0
   11e82:	4608      	mov	r0, r1
   11e84:	e7f4      	b.n	11e70 <clocktime_to_timeval+0x178>
        return (OS_EINVAL);
   11e86:	2002      	movs	r0, #2
}
   11e88:	b005      	add	sp, #20
   11e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return (OS_EINVAL);
   11e8e:	2002      	movs	r0, #2
   11e90:	e7fa      	b.n	11e88 <clocktime_to_timeval+0x190>
   11e92:	2002      	movs	r0, #2
   11e94:	e7f8      	b.n	11e88 <clocktime_to_timeval+0x190>
   11e96:	2002      	movs	r0, #2
   11e98:	e7f6      	b.n	11e88 <clocktime_to_timeval+0x190>
   11e9a:	2002      	movs	r0, #2
   11e9c:	e7f4      	b.n	11e88 <clocktime_to_timeval+0x190>
   11e9e:	2002      	movs	r0, #2
   11ea0:	e7f2      	b.n	11e88 <clocktime_to_timeval+0x190>
   11ea2:	2002      	movs	r0, #2
   11ea4:	e7f0      	b.n	11e88 <clocktime_to_timeval+0x190>
   11ea6:	2002      	movs	r0, #2
   11ea8:	e7ee      	b.n	11e88 <clocktime_to_timeval+0x190>
   11eaa:	2002      	movs	r0, #2
   11eac:	e7ec      	b.n	11e88 <clocktime_to_timeval+0x190>
   11eae:	2002      	movs	r0, #2
   11eb0:	e7ea      	b.n	11e88 <clocktime_to_timeval+0x190>
   11eb2:	2002      	movs	r0, #2
   11eb4:	e7e8      	b.n	11e88 <clocktime_to_timeval+0x190>
   11eb6:	2002      	movs	r0, #2
   11eb8:	e7e6      	b.n	11e88 <clocktime_to_timeval+0x190>
   11eba:	2002      	movs	r0, #2
   11ebc:	e7e4      	b.n	11e88 <clocktime_to_timeval+0x190>
    return (0);
   11ebe:	2000      	movs	r0, #0
   11ec0:	e7e2      	b.n	11e88 <clocktime_to_timeval+0x190>
   11ec2:	bf00      	nop
   11ec4:	00023b84 	.word	0x00023b84
   11ec8:	000f423f 	.word	0x000f423f

00011ecc <timeval_to_clocktime>:
{
   11ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11ed0:	4606      	mov	r6, r0
   11ed2:	4615      	mov	r5, r2
    secs = tv->tv_sec;
   11ed4:	6807      	ldr	r7, [r0, #0]
   11ed6:	f8d0 8004 	ldr.w	r8, [r0, #4]
    if (tz != NULL) {
   11eda:	b189      	cbz	r1, 11f00 <timeval_to_clocktime+0x34>
        secs -= tz->tz_minuteswest * 60;
   11edc:	f9b1 3000 	ldrsh.w	r3, [r1]
   11ee0:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   11ee4:	009a      	lsls	r2, r3, #2
   11ee6:	1abf      	subs	r7, r7, r2
   11ee8:	eb68 73e3 	sbc.w	r3, r8, r3, asr #31
        secs += tz->tz_dsttime ? 3600 : 0;
   11eec:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
   11ef0:	b37a      	cbz	r2, 11f52 <timeval_to_clocktime+0x86>
   11ef2:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   11ef6:	f04f 0800 	mov.w	r8, #0
   11efa:	19d7      	adds	r7, r2, r7
   11efc:	eb48 0803 	adc.w	r8, r8, r3
    if (secs < 0 || tv->tv_usec < 0 || tv->tv_usec > 999999) {
   11f00:	f1b8 0f00 	cmp.w	r8, #0
   11f04:	db73      	blt.n	11fee <timeval_to_clocktime+0x122>
   11f06:	68b3      	ldr	r3, [r6, #8]
   11f08:	2b00      	cmp	r3, #0
   11f0a:	db72      	blt.n	11ff2 <timeval_to_clocktime+0x126>
   11f0c:	4a3b      	ldr	r2, [pc, #236]	; (11ffc <timeval_to_clocktime+0x130>)
   11f0e:	4293      	cmp	r3, r2
   11f10:	dc71      	bgt.n	11ff6 <timeval_to_clocktime+0x12a>
    days = secs / SECDAY;
   11f12:	4a3b      	ldr	r2, [pc, #236]	; (12000 <timeval_to_clocktime+0x134>)
   11f14:	2300      	movs	r3, #0
   11f16:	4638      	mov	r0, r7
   11f18:	4641      	mov	r1, r8
   11f1a:	f00f fd27 	bl	2196c <__aeabi_ldivmod>
   11f1e:	4681      	mov	r9, r0
   11f20:	4604      	mov	r4, r0
    rsec = secs % SECDAY;
   11f22:	4a37      	ldr	r2, [pc, #220]	; (12000 <timeval_to_clocktime+0x134>)
   11f24:	2300      	movs	r3, #0
   11f26:	4638      	mov	r0, r7
   11f28:	4641      	mov	r1, r8
   11f2a:	f00f fd1f 	bl	2196c <__aeabi_ldivmod>
   11f2e:	4690      	mov	r8, r2
   11f30:	461f      	mov	r7, r3
    ct->dow = day_of_week(days);
   11f32:	f109 0004 	add.w	r0, r9, #4
   11f36:	4b33      	ldr	r3, [pc, #204]	; (12004 <timeval_to_clocktime+0x138>)
   11f38:	fb83 2300 	smull	r2, r3, r3, r0
   11f3c:	181a      	adds	r2, r3, r0
   11f3e:	17c3      	asrs	r3, r0, #31
   11f40:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
   11f44:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   11f48:	1ac3      	subs	r3, r0, r3
   11f4a:	61ab      	str	r3, [r5, #24]
    for (year = POSIX_BASE_YEAR; days >= days_in_year(year); year++)
   11f4c:	f240 79b2 	movw	r9, #1970	; 0x7b2
   11f50:	e009      	b.n	11f66 <timeval_to_clocktime+0x9a>
        secs += tz->tz_dsttime ? 3600 : 0;
   11f52:	2200      	movs	r2, #0
   11f54:	4690      	mov	r8, r2
   11f56:	e7d0      	b.n	11efa <timeval_to_clocktime+0x2e>
    for (year = POSIX_BASE_YEAR; days >= days_in_year(year); year++)
   11f58:	f240 136d 	movw	r3, #365	; 0x16d
   11f5c:	429c      	cmp	r4, r3
   11f5e:	db0b      	blt.n	11f78 <timeval_to_clocktime+0xac>
        days -= days_in_year(year);
   11f60:	1ae4      	subs	r4, r4, r3
    for (year = POSIX_BASE_YEAR; days >= days_in_year(year); year++)
   11f62:	f109 0901 	add.w	r9, r9, #1
   11f66:	4648      	mov	r0, r9
   11f68:	f7ff fe80 	bl	11c6c <leapyear>
   11f6c:	4686      	mov	lr, r0
   11f6e:	2800      	cmp	r0, #0
   11f70:	d0f2      	beq.n	11f58 <timeval_to_clocktime+0x8c>
   11f72:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   11f76:	e7f1      	b.n	11f5c <timeval_to_clocktime+0x90>
    ct->year = year;
   11f78:	f8c5 9000 	str.w	r9, [r5]
    for (i = 1; days >= days_in_month(year, i); i++)
   11f7c:	2301      	movs	r3, #1
   11f7e:	e006      	b.n	11f8e <timeval_to_clocktime+0xc2>
   11f80:	46f4      	mov	ip, lr
   11f82:	448c      	add	ip, r1
   11f84:	45a4      	cmp	ip, r4
   11f86:	dc0b      	bgt.n	11fa0 <timeval_to_clocktime+0xd4>
        days -= days_in_month(year, i);
   11f88:	eba4 040c 	sub.w	r4, r4, ip
    for (i = 1; days >= days_in_month(year, i); i++)
   11f8c:	3301      	adds	r3, #1
   11f8e:	1e5a      	subs	r2, r3, #1
   11f90:	491d      	ldr	r1, [pc, #116]	; (12008 <timeval_to_clocktime+0x13c>)
   11f92:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   11f96:	2b02      	cmp	r3, #2
   11f98:	d0f2      	beq.n	11f80 <timeval_to_clocktime+0xb4>
   11f9a:	f04f 0c00 	mov.w	ip, #0
   11f9e:	e7f0      	b.n	11f82 <timeval_to_clocktime+0xb6>
    ct->mon = i;
   11fa0:	606b      	str	r3, [r5, #4]
    ct->day = days + 1;
   11fa2:	3401      	adds	r4, #1
   11fa4:	60ac      	str	r4, [r5, #8]
    ct->hour = rsec / 3600;
   11fa6:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   11faa:	2300      	movs	r3, #0
   11fac:	4640      	mov	r0, r8
   11fae:	4639      	mov	r1, r7
   11fb0:	f00f fcdc 	bl	2196c <__aeabi_ldivmod>
   11fb4:	60e8      	str	r0, [r5, #12]
    rsec = rsec % 3600;
   11fb6:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   11fba:	2300      	movs	r3, #0
   11fbc:	4640      	mov	r0, r8
   11fbe:	4639      	mov	r1, r7
   11fc0:	f00f fcd4 	bl	2196c <__aeabi_ldivmod>
   11fc4:	4617      	mov	r7, r2
   11fc6:	461c      	mov	r4, r3
    ct->min  = rsec / 60;
   11fc8:	223c      	movs	r2, #60	; 0x3c
   11fca:	2300      	movs	r3, #0
   11fcc:	4638      	mov	r0, r7
   11fce:	4621      	mov	r1, r4
   11fd0:	f00f fccc 	bl	2196c <__aeabi_ldivmod>
   11fd4:	6128      	str	r0, [r5, #16]
    rsec = rsec % 60;
   11fd6:	223c      	movs	r2, #60	; 0x3c
   11fd8:	2300      	movs	r3, #0
   11fda:	4638      	mov	r0, r7
   11fdc:	4621      	mov	r1, r4
   11fde:	f00f fcc5 	bl	2196c <__aeabi_ldivmod>
    ct->sec  = rsec;
   11fe2:	616a      	str	r2, [r5, #20]
    ct->usec = tv->tv_usec;
   11fe4:	68b3      	ldr	r3, [r6, #8]
   11fe6:	61eb      	str	r3, [r5, #28]
    return (0);
   11fe8:	2000      	movs	r0, #0
}
   11fea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return (OS_EINVAL);
   11fee:	2002      	movs	r0, #2
   11ff0:	e7fb      	b.n	11fea <timeval_to_clocktime+0x11e>
   11ff2:	2002      	movs	r0, #2
   11ff4:	e7f9      	b.n	11fea <timeval_to_clocktime+0x11e>
   11ff6:	2002      	movs	r0, #2
   11ff8:	e7f7      	b.n	11fea <timeval_to_clocktime+0x11e>
   11ffa:	bf00      	nop
   11ffc:	000f423f 	.word	0x000f423f
   12000:	00015180 	.word	0x00015180
   12004:	92492493 	.word	0x92492493
   12008:	00023b84 	.word	0x00023b84

0001200c <datetime_parse>:
 * 2016-03-02T22:44:00.1                fractional seconds
 * 2016-03-02T22:44:00.101+05:30        fractional seconds with timezone
 */
int
datetime_parse(const char *input, struct os_timeval *tv, struct os_timezone *tz)
{
   1200c:	b570      	push	{r4, r5, r6, lr}
   1200e:	b08a      	sub	sp, #40	; 0x28
   12010:	4604      	mov	r4, r0
   12012:	460d      	mov	r5, r1
   12014:	4616      	mov	r6, r2
    int off_hour, off_min;
    const char *cp;
    const char *ep;
    struct clocktime ct;

    bzero(&ct, sizeof(struct clocktime));
   12016:	2220      	movs	r2, #32
   12018:	2100      	movs	r1, #0
   1201a:	4668      	mov	r0, sp
   1201c:	f7fb fcf1 	bl	da02 <memset>
    bzero(tv, sizeof(struct os_timeval));
   12020:	2300      	movs	r3, #0
   12022:	602b      	str	r3, [r5, #0]
   12024:	606b      	str	r3, [r5, #4]
   12026:	60ab      	str	r3, [r5, #8]
   12028:	60eb      	str	r3, [r5, #12]
    bzero(tz, sizeof(struct os_timezone));      /* default to UTC time */
   1202a:	6033      	str	r3, [r6, #0]

    cp = input;
    cp = parse_number(cp, 4, &ct.year);
   1202c:	466a      	mov	r2, sp
   1202e:	2104      	movs	r1, #4
   12030:	4620      	mov	r0, r4
   12032:	f7ff fe3d 	bl	11cb0 <parse_number>
    if (cp == NULL || *cp != '-') {
   12036:	2800      	cmp	r0, #0
   12038:	f000 80a6 	beq.w	12188 <datetime_parse+0x17c>
   1203c:	7802      	ldrb	r2, [r0, #0]
   1203e:	2a2d      	cmp	r2, #45	; 0x2d
   12040:	f040 80a5 	bne.w	1218e <datetime_parse+0x182>
        goto err;
    }

    cp = parse_number(cp + 1, 2, &ct.mon);
   12044:	aa01      	add	r2, sp, #4
   12046:	2102      	movs	r1, #2
   12048:	3001      	adds	r0, #1
   1204a:	f7ff fe31 	bl	11cb0 <parse_number>
    if (cp == NULL || *cp != '-') {
   1204e:	2800      	cmp	r0, #0
   12050:	f000 80a0 	beq.w	12194 <datetime_parse+0x188>
   12054:	7802      	ldrb	r2, [r0, #0]
   12056:	2a2d      	cmp	r2, #45	; 0x2d
   12058:	f040 809f 	bne.w	1219a <datetime_parse+0x18e>
        goto err;
    }

    cp = parse_number(cp + 1, 2, &ct.day);
   1205c:	aa02      	add	r2, sp, #8
   1205e:	2102      	movs	r1, #2
   12060:	3001      	adds	r0, #1
   12062:	f7ff fe25 	bl	11cb0 <parse_number>
    if (cp == NULL || *cp != 'T') {
   12066:	2800      	cmp	r0, #0
   12068:	f000 809a 	beq.w	121a0 <datetime_parse+0x194>
   1206c:	7802      	ldrb	r2, [r0, #0]
   1206e:	2a54      	cmp	r2, #84	; 0x54
   12070:	f040 8099 	bne.w	121a6 <datetime_parse+0x19a>
        goto err;
    }

    cp = parse_number(cp + 1, 2, &ct.hour);
   12074:	aa03      	add	r2, sp, #12
   12076:	2102      	movs	r1, #2
   12078:	3001      	adds	r0, #1
   1207a:	f7ff fe19 	bl	11cb0 <parse_number>
    if (cp == NULL || *cp != ':') {
   1207e:	2800      	cmp	r0, #0
   12080:	f000 8094 	beq.w	121ac <datetime_parse+0x1a0>
   12084:	7802      	ldrb	r2, [r0, #0]
   12086:	2a3a      	cmp	r2, #58	; 0x3a
   12088:	f040 8093 	bne.w	121b2 <datetime_parse+0x1a6>
        goto err;
    }

    cp = parse_number(cp + 1, 2, &ct.min);
   1208c:	aa04      	add	r2, sp, #16
   1208e:	2102      	movs	r1, #2
   12090:	3001      	adds	r0, #1
   12092:	f7ff fe0d 	bl	11cb0 <parse_number>
    if (cp == NULL || *cp != ':') {
   12096:	2800      	cmp	r0, #0
   12098:	f000 808e 	beq.w	121b8 <datetime_parse+0x1ac>
   1209c:	7802      	ldrb	r2, [r0, #0]
   1209e:	2a3a      	cmp	r2, #58	; 0x3a
   120a0:	f040 808d 	bne.w	121be <datetime_parse+0x1b2>
        goto err;
    }

    cp = parse_number(cp + 1, 2, &ct.sec);
   120a4:	aa05      	add	r2, sp, #20
   120a6:	2102      	movs	r1, #2
   120a8:	3001      	adds	r0, #1
   120aa:	f7ff fe01 	bl	11cb0 <parse_number>
    if (cp == NULL) {
   120ae:	4684      	mov	ip, r0
   120b0:	2800      	cmp	r0, #0
   120b2:	f000 8087 	beq.w	121c4 <datetime_parse+0x1b8>
        goto err;
    }

    /* parse fractional seconds if specified */
    if (*cp == '.') {
   120b6:	7803      	ldrb	r3, [r0, #0]
   120b8:	2b2e      	cmp	r3, #46	; 0x2e
   120ba:	d037      	beq.n	1212c <datetime_parse+0x120>
        while (digits++ < 6) {
            ct.usec *= 10;
        }
    }

    if (*cp == 'Z' || *cp == 'z') {
   120bc:	f89c 3000 	ldrb.w	r3, [ip]
   120c0:	2b5a      	cmp	r3, #90	; 0x5a
   120c2:	d050      	beq.n	12166 <datetime_parse+0x15a>
   120c4:	2b7a      	cmp	r3, #122	; 0x7a
   120c6:	d04e      	beq.n	12166 <datetime_parse+0x15a>
        cp++;
    } else if (*cp == '+' || *cp == '-') {
   120c8:	2b2b      	cmp	r3, #43	; 0x2b
   120ca:	d001      	beq.n	120d0 <datetime_parse+0xc4>
   120cc:	2b2d      	cmp	r3, #45	; 0x2d
   120ce:	d14c      	bne.n	1216a <datetime_parse+0x15e>
        sign = (*cp == '+') ? +1 : -1;
   120d0:	2b2b      	cmp	r3, #43	; 0x2b
   120d2:	d057      	beq.n	12184 <datetime_parse+0x178>
   120d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
        cp = parse_number(cp + 1, 2, &off_hour);
   120d8:	aa09      	add	r2, sp, #36	; 0x24
   120da:	2102      	movs	r1, #2
   120dc:	f10c 0001 	add.w	r0, ip, #1
   120e0:	f7ff fde6 	bl	11cb0 <parse_number>
        if (cp == NULL || *cp != ':') {
   120e4:	2800      	cmp	r0, #0
   120e6:	d076      	beq.n	121d6 <datetime_parse+0x1ca>
   120e8:	7802      	ldrb	r2, [r0, #0]
   120ea:	2a3a      	cmp	r2, #58	; 0x3a
   120ec:	d176      	bne.n	121dc <datetime_parse+0x1d0>
            goto err;
        }

        cp = parse_number(cp + 1, 2, &off_min);
   120ee:	aa08      	add	r2, sp, #32
   120f0:	2102      	movs	r1, #2
   120f2:	3001      	adds	r0, #1
   120f4:	f7ff fddc 	bl	11cb0 <parse_number>
        if (cp == NULL) {
   120f8:	4684      	mov	ip, r0
   120fa:	2800      	cmp	r0, #0
   120fc:	d071      	beq.n	121e2 <datetime_parse+0x1d6>
            goto err;
        }

        if (off_hour < 0 || off_hour > 23 || off_min < 0 || off_min > 59) {
   120fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12100:	2a17      	cmp	r2, #23
   12102:	d871      	bhi.n	121e8 <datetime_parse+0x1dc>
   12104:	9b08      	ldr	r3, [sp, #32]
   12106:	2b00      	cmp	r3, #0
   12108:	db71      	blt.n	121ee <datetime_parse+0x1e2>
   1210a:	2b3b      	cmp	r3, #59	; 0x3b
   1210c:	dc72      	bgt.n	121f4 <datetime_parse+0x1e8>

        /*
         * Allow time zone offsets of up to 18 hours from the GMT.
         * https://docs.oracle.com/javase/8/docs/api/java/time/ZoneOffset.html
         */
        tz->tz_minuteswest = off_hour * 60 + off_min;
   1210e:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
   12112:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   12116:	b29a      	uxth	r2, r3
   12118:	b21b      	sxth	r3, r3
   1211a:	8033      	strh	r3, [r6, #0]
        if (tz->tz_minuteswest > 18 * 60) {
   1211c:	f5b3 6f87 	cmp.w	r3, #1080	; 0x438
   12120:	dc6b      	bgt.n	121fa <datetime_parse+0x1ee>

        /*
         * Positive GMT offsets (i.e. timezones to the east of GMT) are
         * represented with a negative 'tz_minuteswest' value.
         */
        if (sign > 0) {
   12122:	2c00      	cmp	r4, #0
   12124:	dd21      	ble.n	1216a <datetime_parse+0x15e>
            tz->tz_minuteswest = -tz->tz_minuteswest;
   12126:	4252      	negs	r2, r2
   12128:	8032      	strh	r2, [r6, #0]
   1212a:	e01e      	b.n	1216a <datetime_parse+0x15e>
        ep = ++cp;
   1212c:	3001      	adds	r0, #1
   1212e:	4604      	mov	r4, r0
        while (isdigit((int) *ep)) {
   12130:	e000      	b.n	12134 <datetime_parse+0x128>
            ep++;
   12132:	3401      	adds	r4, #1
        while (isdigit((int) *ep)) {
   12134:	7823      	ldrb	r3, [r4, #0]
   12136:	3b30      	subs	r3, #48	; 0x30
   12138:	2b09      	cmp	r3, #9
   1213a:	d9fa      	bls.n	12132 <datetime_parse+0x126>
        digits = ep - cp;
   1213c:	1a24      	subs	r4, r4, r0
        if (digits <= 0 || digits > 6) {
   1213e:	1e63      	subs	r3, r4, #1
   12140:	2b05      	cmp	r3, #5
   12142:	d842      	bhi.n	121ca <datetime_parse+0x1be>
        cp = parse_number(cp, digits, &ct.usec);
   12144:	aa07      	add	r2, sp, #28
   12146:	4621      	mov	r1, r4
   12148:	f7ff fdb2 	bl	11cb0 <parse_number>
        if (cp == NULL) {
   1214c:	4684      	mov	ip, r0
   1214e:	2800      	cmp	r0, #0
   12150:	d03e      	beq.n	121d0 <datetime_parse+0x1c4>
        while (digits++ < 6) {
   12152:	1c62      	adds	r2, r4, #1
   12154:	2c05      	cmp	r4, #5
   12156:	dcb1      	bgt.n	120bc <datetime_parse+0xb0>
            ct.usec *= 10;
   12158:	9b07      	ldr	r3, [sp, #28]
   1215a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1215e:	005b      	lsls	r3, r3, #1
   12160:	9307      	str	r3, [sp, #28]
        while (digits++ < 6) {
   12162:	4614      	mov	r4, r2
   12164:	e7f5      	b.n	12152 <datetime_parse+0x146>
        cp++;
   12166:	f10c 0c01 	add.w	ip, ip, #1
        /*
         * 'time offset' is not specified so date/time defaults to UTC.
         */
    }

    if (*cp != '\0') {
   1216a:	f89c 3000 	ldrb.w	r3, [ip]
   1216e:	2b00      	cmp	r3, #0
   12170:	d146      	bne.n	12200 <datetime_parse+0x1f4>
        goto err;
    }

    if (clocktime_to_timeval(&ct, tz, tv) != 0) {
   12172:	462a      	mov	r2, r5
   12174:	4631      	mov	r1, r6
   12176:	4668      	mov	r0, sp
   12178:	f7ff fdbe 	bl	11cf8 <clocktime_to_timeval>
   1217c:	2800      	cmp	r0, #0
   1217e:	d142      	bne.n	12206 <datetime_parse+0x1fa>
    }

    return (0);
err:
    return (-1);
}
   12180:	b00a      	add	sp, #40	; 0x28
   12182:	bd70      	pop	{r4, r5, r6, pc}
        sign = (*cp == '+') ? +1 : -1;
   12184:	2401      	movs	r4, #1
   12186:	e7a7      	b.n	120d8 <datetime_parse+0xcc>
    return (-1);
   12188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1218c:	e7f8      	b.n	12180 <datetime_parse+0x174>
   1218e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12192:	e7f5      	b.n	12180 <datetime_parse+0x174>
   12194:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12198:	e7f2      	b.n	12180 <datetime_parse+0x174>
   1219a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1219e:	e7ef      	b.n	12180 <datetime_parse+0x174>
   121a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   121a4:	e7ec      	b.n	12180 <datetime_parse+0x174>
   121a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   121aa:	e7e9      	b.n	12180 <datetime_parse+0x174>
   121ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   121b0:	e7e6      	b.n	12180 <datetime_parse+0x174>
   121b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   121b6:	e7e3      	b.n	12180 <datetime_parse+0x174>
   121b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   121bc:	e7e0      	b.n	12180 <datetime_parse+0x174>
   121be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   121c2:	e7dd      	b.n	12180 <datetime_parse+0x174>
   121c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   121c8:	e7da      	b.n	12180 <datetime_parse+0x174>
   121ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   121ce:	e7d7      	b.n	12180 <datetime_parse+0x174>
   121d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   121d4:	e7d4      	b.n	12180 <datetime_parse+0x174>
   121d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   121da:	e7d1      	b.n	12180 <datetime_parse+0x174>
   121dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   121e0:	e7ce      	b.n	12180 <datetime_parse+0x174>
   121e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   121e6:	e7cb      	b.n	12180 <datetime_parse+0x174>
   121e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   121ec:	e7c8      	b.n	12180 <datetime_parse+0x174>
   121ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   121f2:	e7c5      	b.n	12180 <datetime_parse+0x174>
   121f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   121f8:	e7c2      	b.n	12180 <datetime_parse+0x174>
   121fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   121fe:	e7bf      	b.n	12180 <datetime_parse+0x174>
   12200:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12204:	e7bc      	b.n	12180 <datetime_parse+0x174>
   12206:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1220a:	e7b9      	b.n	12180 <datetime_parse+0x174>

0001220c <datetime_format>:

int
datetime_format(const struct os_timeval *tv, const struct os_timezone *tz,
    char *ostr, int olen)
{
   1220c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1220e:	b08f      	sub	sp, #60	; 0x3c
   12210:	460e      	mov	r6, r1
   12212:	4617      	mov	r7, r2
   12214:	461c      	mov	r4, r3
    char *cp;
    int rc, rlen, minswest;
    int off_hour, off_min, sign;
    struct clocktime ct;

    rc = timeval_to_clocktime(tv, tz, &ct);
   12216:	aa06      	add	r2, sp, #24
   12218:	f7ff fe58 	bl	11ecc <timeval_to_clocktime>
    if (rc != 0) {
   1221c:	2800      	cmp	r0, #0
   1221e:	d147      	bne.n	122b0 <datetime_format+0xa4>
   12220:	4605      	mov	r5, r0
    }

    cp = ostr;
    rlen = olen;

    rc = snprintf(cp, rlen, "%04d-%02d-%02dT%02d:%02d:%02d.%06d",
   12222:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12224:	9305      	str	r3, [sp, #20]
   12226:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12228:	9304      	str	r3, [sp, #16]
   1222a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1222c:	9303      	str	r3, [sp, #12]
   1222e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12230:	9302      	str	r3, [sp, #8]
   12232:	9b08      	ldr	r3, [sp, #32]
   12234:	9301      	str	r3, [sp, #4]
   12236:	9b07      	ldr	r3, [sp, #28]
   12238:	9300      	str	r3, [sp, #0]
   1223a:	9b06      	ldr	r3, [sp, #24]
   1223c:	4a24      	ldr	r2, [pc, #144]	; (122d0 <datetime_format+0xc4>)
   1223e:	4621      	mov	r1, r4
   12240:	4638      	mov	r0, r7
   12242:	f7fc f820 	bl	e286 <snprintf>
   12246:	4684      	mov	ip, r0
        ct.year, ct.mon, ct.day, ct.hour, ct.min, ct.sec, ct.usec);
    cp += rc;
   12248:	1838      	adds	r0, r7, r0
    rlen -= rc;
   1224a:	eba4 040c 	sub.w	r4, r4, ip
    if (rc < 0 || rlen <= 0) {
   1224e:	f1bc 0f00 	cmp.w	ip, #0
   12252:	db30      	blt.n	122b6 <datetime_format+0xaa>
   12254:	2c00      	cmp	r4, #0
   12256:	dd31      	ble.n	122bc <datetime_format+0xb0>
        goto err;
    }

    if (tz != NULL) {
   12258:	b15e      	cbz	r6, 12272 <datetime_format+0x66>
        minswest = tz->tz_minuteswest;
   1225a:	f9b6 c000 	ldrsh.w	ip, [r6]
        if (tz->tz_dsttime) {
   1225e:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
   12262:	b10b      	cbz	r3, 12268 <datetime_format+0x5c>
            minswest -= 60;
   12264:	f1ac 0c3c 	sub.w	ip, ip, #60	; 0x3c
        }
    } else {
        minswest = 0;
    }

    if (minswest <= 0) {
   12268:	f1bc 0f00 	cmp.w	ip, #0
   1226c:	dd02      	ble.n	12274 <datetime_format+0x68>
        sign = '+';
        minswest = -minswest;
    } else {
        sign = '-';
   1226e:	232d      	movs	r3, #45	; 0x2d
   12270:	e003      	b.n	1227a <datetime_format+0x6e>
        minswest = 0;
   12272:	46ac      	mov	ip, r5
        minswest = -minswest;
   12274:	f1cc 0c00 	rsb	ip, ip, #0
        sign = '+';
   12278:	232b      	movs	r3, #43	; 0x2b
    }

    off_hour = minswest / 60;
   1227a:	4a16      	ldr	r2, [pc, #88]	; (122d4 <datetime_format+0xc8>)
   1227c:	fb82 120c 	smull	r1, r2, r2, ip
   12280:	eb02 010c 	add.w	r1, r2, ip
   12284:	ea4f 72ec 	mov.w	r2, ip, asr #31
   12288:	ebc2 1261 	rsb	r2, r2, r1, asr #5
    off_min = minswest % 60;
   1228c:	ebc2 1102 	rsb	r1, r2, r2, lsl #4
   12290:	ebac 0181 	sub.w	r1, ip, r1, lsl #2

    rc = snprintf(cp, rlen, "%c%02d:%02d", sign, off_hour, off_min);
   12294:	9101      	str	r1, [sp, #4]
   12296:	9200      	str	r2, [sp, #0]
   12298:	4a0f      	ldr	r2, [pc, #60]	; (122d8 <datetime_format+0xcc>)
   1229a:	4621      	mov	r1, r4
   1229c:	f7fb fff3 	bl	e286 <snprintf>
    cp += rc;
    rlen -= rc;
   122a0:	1a24      	subs	r4, r4, r0
    if (rc < 0 || rlen <= 0) {
   122a2:	2800      	cmp	r0, #0
   122a4:	db0d      	blt.n	122c2 <datetime_format+0xb6>
   122a6:	2c00      	cmp	r4, #0
   122a8:	dd0e      	ble.n	122c8 <datetime_format+0xbc>

    return (0);

err:
    return (-1);
}
   122aa:	4628      	mov	r0, r5
   122ac:	b00f      	add	sp, #60	; 0x3c
   122ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (-1);
   122b0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   122b4:	e7f9      	b.n	122aa <datetime_format+0x9e>
   122b6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   122ba:	e7f6      	b.n	122aa <datetime_format+0x9e>
   122bc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   122c0:	e7f3      	b.n	122aa <datetime_format+0x9e>
   122c2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   122c6:	e7f0      	b.n	122aa <datetime_format+0x9e>
   122c8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   122cc:	e7ed      	b.n	122aa <datetime_format+0x9e>
   122ce:	bf00      	nop
   122d0:	00023b54 	.word	0x00023b54
   122d4:	88888889 	.word	0x88888889
   122d8:	00023b78 	.word	0x00023b78

000122dc <crc16_ccitt>:
    int counter;

    crc = initial_crc;
    ptr = buf;

    for (counter = 0; counter < len; counter++) {
   122dc:	f04f 0c00 	mov.w	ip, #0
   122e0:	4594      	cmp	ip, r2
   122e2:	da11      	bge.n	12308 <crc16_ccitt+0x2c>
{
   122e4:	b410      	push	{r4}
        crc = (crc<<8) ^ crc16tab[((crc>>8) ^ *ptr++)&0x00FF];
   122e6:	f811 3b01 	ldrb.w	r3, [r1], #1
   122ea:	ea83 2310 	eor.w	r3, r3, r0, lsr #8
   122ee:	4c07      	ldr	r4, [pc, #28]	; (1230c <crc16_ccitt+0x30>)
   122f0:	f934 3013 	ldrsh.w	r3, [r4, r3, lsl #1]
   122f4:	ea83 2000 	eor.w	r0, r3, r0, lsl #8
   122f8:	b280      	uxth	r0, r0
    for (counter = 0; counter < len; counter++) {
   122fa:	f10c 0c01 	add.w	ip, ip, #1
   122fe:	4594      	cmp	ip, r2
   12300:	dbf1      	blt.n	122e6 <crc16_ccitt+0xa>
    }

    return crc;
}
   12302:	f85d 4b04 	ldr.w	r4, [sp], #4
   12306:	4770      	bx	lr
   12308:	4770      	bx	lr
   1230a:	bf00      	nop
   1230c:	00023bb4 	.word	0x00023bb4

00012310 <streamer_vprintf>:
    return streamer->cfg->write_cb(streamer, src, len);
}

int
streamer_vprintf(struct streamer *streamer, const char *fmt, va_list ap)
{
   12310:	b508      	push	{r3, lr}
    return streamer->cfg->vprintf_cb(streamer, fmt, ap);
   12312:	6803      	ldr	r3, [r0, #0]
   12314:	685b      	ldr	r3, [r3, #4]
   12316:	4798      	blx	r3
}
   12318:	bd08      	pop	{r3, pc}

0001231a <streamer_printf>:

int
streamer_printf(struct streamer *streamer, const char *fmt, ...)
{
   1231a:	b40e      	push	{r1, r2, r3}
   1231c:	b500      	push	{lr}
   1231e:	b082      	sub	sp, #8
   12320:	aa03      	add	r2, sp, #12
   12322:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list ap;
    int rc;

    va_start(ap, fmt);
   12326:	9201      	str	r2, [sp, #4]
    rc = streamer_vprintf(streamer, fmt, ap);
   12328:	f7ff fff2 	bl	12310 <streamer_vprintf>
    va_end(ap);

    return rc;
}
   1232c:	b002      	add	sp, #8
   1232e:	f85d eb04 	ldr.w	lr, [sp], #4
   12332:	b003      	add	sp, #12
   12334:	4770      	bx	lr

00012336 <streamer_console_vprintf>:
}

static int
streamer_console_vprintf(struct streamer *streamer,
                         const char *fmt, va_list ap)
{
   12336:	b508      	push	{r3, lr}
   12338:	4608      	mov	r0, r1
    return console_vprintf(fmt, ap);
   1233a:	4611      	mov	r1, r2
   1233c:	f7fd fb0c 	bl	f958 <console_vprintf>
}
   12340:	bd08      	pop	{r3, pc}

00012342 <streamer_console_write>:
{
   12342:	b508      	push	{r3, lr}
   12344:	4608      	mov	r0, r1
    console_write(src, len);
   12346:	4611      	mov	r1, r2
   12348:	f7fd f8fc 	bl	f544 <console_write>
}
   1234c:	2000      	movs	r0, #0
   1234e:	bd08      	pop	{r3, pc}

00012350 <streamer_console_get>:

struct streamer *
streamer_console_get(void)
{
    return &streamer_console;
}
   12350:	4800      	ldr	r0, [pc, #0]	; (12354 <streamer_console_get+0x4>)
   12352:	4770      	bx	lr
   12354:	20000758 	.word	0x20000758

00012358 <sysinit_app>:
void nmgr_shell_pkg_init(void);
void uwb_rng_pkg_init2(void);

void
sysinit_app(void)
{
   12358:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
   1235a:	f7f6 ffe9 	bl	9330 <os_pkg_init>

    /*** Stage 2 */
    /* 2.0: flash_map_init (sys/flash_map) */
    flash_map_init();
   1235e:	f00b ff8f 	bl	1e280 <flash_map_init>

    /*** Stage 10 */
    /* 10.0: stats_module_init (sys/stats/full) */
    stats_module_init();
   12362:	f7fe fe1b 	bl	10f9c <stats_module_init>

    /*** Stage 20 */
    /* 20.0: console_pkg_init (sys/console/full) */
    console_pkg_init();
   12366:	f7fd facf 	bl	f908 <console_pkg_init>

    /*** Stage 50 */
    /* 50.0: config_pkg_init (sys/config) */
    config_pkg_init();
   1236a:	f00b fca5 	bl	1dcb8 <config_pkg_init>

    /*** Stage 100 */
    /* 100.0: log_init (sys/log/full) */
    log_init();
   1236e:	f00c f86b 	bl	1e448 <log_init>
    /* 100.1: mfg_init (sys/mfg) */
    mfg_init();
   12372:	f00d f925 	bl	1f5c0 <mfg_init>
    /* 100.2: modlog_init (sys/log/modlog) */
    modlog_init();
   12376:	f00c ffcf 	bl	1f318 <modlog_init>

    /*** Stage 200 */
    /* 200.0: log_reboot_pkg_init (sys/reboot) */
    log_reboot_pkg_init();
   1237a:	f00d fa99 	bl	1f8b0 <log_reboot_pkg_init>

    /*** Stage 220 */
    /* 220.0: config_pkg_init_stage2 (sys/config) */
    config_pkg_init_stage2();
   1237e:	f00b fcab 	bl	1dcd8 <config_pkg_init_stage2>

    /*** Stage 401 */
    /* 401.0: dw1000_pkg_init (hw/drivers/uwb/uwb_dw1000) */
    dw1000_pkg_init();
   12382:	f005 f967 	bl	17654 <dw1000_pkg_init>

    /*** Stage 402 */
    /* 402.0: cir_pkg_init (lib/cir) */
    cir_pkg_init();
   12386:	f006 fbe5 	bl	18b54 <cir_pkg_init>
    /* 402.1: uwb_ccp_pkg_init (lib/uwb_ccp) */
    uwb_ccp_pkg_init();
   1238a:	f7fa f889 	bl	c4a0 <uwb_ccp_pkg_init>

    /*** Stage 403 */
    /* 403.0: uwb_wcs_pkg_init (lib/uwb_wcs) */
    uwb_wcs_pkg_init();
   1238e:	f7fb f9bb 	bl	d708 <uwb_wcs_pkg_init>

    /*** Stage 404 */
    /* 404.0: tdma_pkg_init (lib/tdma) */
    tdma_pkg_init();
   12392:	f7f8 ff0d 	bl	b1b0 <tdma_pkg_init>
    /* 404.1: uwb_rng_pkg_init (lib/uwb_rng) */
    uwb_rng_pkg_init();
   12396:	f7fa fd45 	bl	ce24 <uwb_rng_pkg_init>
    /* 404.2: wcs_timescale_pkg_init (lib/uwb_wcs) */
    wcs_timescale_pkg_init();
   1239a:	f009 ffb7 	bl	1c30c <wcs_timescale_pkg_init>

    /*** Stage 406 */
    /* 406.0: twr_ss_ack_pkg_init (lib/twr_ss_ack) */
    twr_ss_ack_pkg_init();
   1239e:	f009 fc09 	bl	1bbb4 <twr_ss_ack_pkg_init>
    /* 406.1: twr_ss_ext_pkg_init (lib/twr_ss_ext) */
    twr_ss_ext_pkg_init();
   123a2:	f009 fdb9 	bl	1bf18 <twr_ss_ext_pkg_init>
    /* 406.2: twr_ss_pkg_init (lib/twr_ss) */
    twr_ss_pkg_init();
   123a6:	f009 f997 	bl	1b6d8 <twr_ss_pkg_init>

    /*** Stage 408 */
    /* 408.0: twr_ds_pkg_init (lib/twr_ds) */
    twr_ds_pkg_init();
   123aa:	f008 fd25 	bl	1adf8 <twr_ds_pkg_init>

    /*** Stage 410 */
    /* 410.0: twr_ds_ext_pkg_init (lib/twr_ds_ext) */
    twr_ds_ext_pkg_init();
   123ae:	f008 ffc9 	bl	1b344 <twr_ds_ext_pkg_init>

    /*** Stage 500 */
    /* 500.0: imgmgr_module_init (mgmt/imgmgr) */
    imgmgr_module_init();
   123b2:	f00a fcc7 	bl	1cd44 <imgmgr_module_init>
    /* 500.1: nmgr_pkg_init (mgmt/newtmgr) */
    nmgr_pkg_init();
   123b6:	f00b f953 	bl	1d660 <nmgr_pkg_init>
    /* 500.2: shell_init (sys/shell) */
    shell_init();
   123ba:	f7fe fa1d 	bl	107f8 <shell_init>
    /* 500.3: split_app_init (boot/split) */
    split_app_init();
   123be:	f000 f807 	bl	123d0 <split_app_init>
    /* 500.4: uwbcfg_pkg_init (sys/uwbcfg) */
    uwbcfg_pkg_init();
   123c2:	f7ff f9d1 	bl	11768 <uwbcfg_pkg_init>

    /*** Stage 501 */
    /* 501.0: nmgr_shell_pkg_init (mgmt/newtmgr/transport/nmgr_shell) */
    nmgr_shell_pkg_init();
   123c6:	f00b fbed 	bl	1dba4 <nmgr_shell_pkg_init>

    /*** Stage 999 */
    /* 999.0: uwb_rng_pkg_init2 (lib/uwb_rng) */
    uwb_rng_pkg_init2();
   123ca:	f7fa fd87 	bl	cedc <uwb_rng_pkg_init2>
}
   123ce:	bd08      	pop	{r3, pc}

000123d0 <split_app_init>:
static int8_t split_mode_cur;
static int8_t split_app_active;

void
split_app_init(void)
{
   123d0:	b508      	push	{r3, lr}
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   123d2:	4b09      	ldr	r3, [pc, #36]	; (123f8 <split_app_init+0x28>)
   123d4:	781b      	ldrb	r3, [r3, #0]
   123d6:	b11b      	cbz	r3, 123e0 <split_app_init+0x10>

    rc = split_conf_init();
   123d8:	f000 f89e 	bl	12518 <split_conf_init>
    assert(rc == 0);
   123dc:	b928      	cbnz	r0, 123ea <split_app_init+0x1a>
}
   123de:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   123e0:	461a      	mov	r2, r3
   123e2:	4619      	mov	r1, r3
   123e4:	4618      	mov	r0, r3
   123e6:	f7f6 fe31 	bl	904c <__assert_func>
    assert(rc == 0);
   123ea:	2300      	movs	r3, #0
   123ec:	461a      	mov	r2, r3
   123ee:	4619      	mov	r1, r3
   123f0:	4618      	mov	r0, r3
   123f2:	f7f6 fe2b 	bl	904c <__assert_func>
   123f6:	bf00      	nop
   123f8:	20004548 	.word	0x20004548

000123fc <split_check_status>:

split_status_t
split_check_status(void)
{
   123fc:	b500      	push	{lr}
   123fe:	b083      	sub	sp, #12
    void *entry;
    int rc;

    rc = split_go(LOADER_IMAGE_SLOT, SPLIT_IMAGE_SLOT, &entry);
   12400:	aa01      	add	r2, sp, #4
   12402:	2101      	movs	r1, #1
   12404:	2000      	movs	r0, #0
   12406:	f00d fd9d 	bl	1ff44 <split_go>
    switch (rc) {
   1240a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1240e:	d009      	beq.n	12424 <split_check_status+0x28>
   12410:	b150      	cbz	r0, 12428 <split_check_status+0x2c>
   12412:	f110 0f02 	cmn.w	r0, #2
   12416:	d00b      	beq.n	12430 <split_check_status+0x34>

    case SPLIT_GO_OK:
        return SPLIT_STATUS_MATCHING;

    default:
        assert(0);
   12418:	2300      	movs	r3, #0
   1241a:	461a      	mov	r2, r3
   1241c:	4619      	mov	r1, r3
   1241e:	4618      	mov	r0, r3
   12420:	f7f6 fe14 	bl	904c <__assert_func>
        return SPLIT_STATUS_NOT_MATCHING;
   12424:	2001      	movs	r0, #1
   12426:	e000      	b.n	1242a <split_check_status+0x2e>
        return SPLIT_STATUS_MATCHING;
   12428:	2002      	movs	r0, #2
        return SPLIT_STATUS_INVALID;
    }
}
   1242a:	b003      	add	sp, #12
   1242c:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (rc) {
   12430:	2000      	movs	r0, #0
   12432:	e7fa      	b.n	1242a <split_check_status+0x2e>

00012434 <split_mode_get>:

split_mode_t
split_mode_get(void)
{
    return split_mode_cur;
}
   12434:	4b01      	ldr	r3, [pc, #4]	; (1243c <split_mode_get+0x8>)
   12436:	7818      	ldrb	r0, [r3, #0]
   12438:	4770      	bx	lr
   1243a:	bf00      	nop
   1243c:	20004569 	.word	0x20004569

00012440 <split_app_active_get>:

int
split_app_active_get(void)
{
    return split_app_active;
}
   12440:	4b01      	ldr	r3, [pc, #4]	; (12448 <split_app_active_get+0x8>)
   12442:	f993 0000 	ldrsb.w	r0, [r3]
   12446:	4770      	bx	lr
   12448:	20004568 	.word	0x20004568

0001244c <split_mode_set>:
    /* XXX: For now, cast this as an integer.  This value should either be
     * treated as an enumeration generally (i.e. not read directly and assigned
     * from values in flash), or switched to a native type of integer.  However,
     * this is not a high priority change, so just cast it for now.
     */
    if ((int) split_mode < 0 || (int) split_mode >= SPLIT_MODE_CNT) {
   1244c:	2803      	cmp	r0, #3
   1244e:	d803      	bhi.n	12458 <split_mode_set+0xc>
        return SYS_EINVAL;
    }

    split_mode_cur = split_mode;
   12450:	4b03      	ldr	r3, [pc, #12]	; (12460 <split_mode_set+0x14>)
   12452:	7018      	strb	r0, [r3, #0]
    return 0;
   12454:	2000      	movs	r0, #0
   12456:	4770      	bx	lr
        return SYS_EINVAL;
   12458:	f06f 0001 	mvn.w	r0, #1
}
   1245c:	4770      	bx	lr
   1245e:	bf00      	nop
   12460:	20004569 	.word	0x20004569

00012464 <split_conf_commit>:

static int
split_conf_commit(void)
{
    return 0;
}
   12464:	2000      	movs	r0, #0
   12466:	4770      	bx	lr

00012468 <split_conf_export>:

static int
split_conf_export(void (*func)(char *name, char *val), enum conf_export_tgt tgt)
{
   12468:	b510      	push	{r4, lr}
   1246a:	b082      	sub	sp, #8
   1246c:	4604      	mov	r4, r0
    split_mode_t split_mode;
    char buf[4];

    split_mode = split_mode_get();
   1246e:	f7ff ffe1 	bl	12434 <split_mode_get>
   12472:	f88d 0007 	strb.w	r0, [sp, #7]
    conf_str_from_value(CONF_INT8, &split_mode, buf, sizeof(buf));
   12476:	2304      	movs	r3, #4
   12478:	466a      	mov	r2, sp
   1247a:	f10d 0107 	add.w	r1, sp, #7
   1247e:	2002      	movs	r0, #2
   12480:	f7fc fb70 	bl	eb64 <conf_str_from_value>
    func("split/status", buf);
   12484:	4669      	mov	r1, sp
   12486:	4802      	ldr	r0, [pc, #8]	; (12490 <split_conf_export+0x28>)
   12488:	47a0      	blx	r4
    return 0;
}
   1248a:	2000      	movs	r0, #0
   1248c:	b002      	add	sp, #8
   1248e:	bd10      	pop	{r4, pc}
   12490:	00023df4 	.word	0x00023df4

00012494 <split_conf_get>:
    if (argc == 1) {
   12494:	2801      	cmp	r0, #1
   12496:	d119      	bne.n	124cc <split_conf_get+0x38>
{
   12498:	b530      	push	{r4, r5, lr}
   1249a:	b083      	sub	sp, #12
   1249c:	468c      	mov	ip, r1
   1249e:	4614      	mov	r4, r2
   124a0:	461d      	mov	r5, r3
        if (!strcmp(argv[0], "status")) {
   124a2:	490b      	ldr	r1, [pc, #44]	; (124d0 <split_conf_get+0x3c>)
   124a4:	f8dc 0000 	ldr.w	r0, [ip]
   124a8:	f7fb fad6 	bl	da58 <strcmp>
   124ac:	b110      	cbz	r0, 124b4 <split_conf_get+0x20>
    return NULL;
   124ae:	2000      	movs	r0, #0
}
   124b0:	b003      	add	sp, #12
   124b2:	bd30      	pop	{r4, r5, pc}
            split_mode = split_mode_get();
   124b4:	f7ff ffbe 	bl	12434 <split_mode_get>
   124b8:	f88d 0007 	strb.w	r0, [sp, #7]
            return conf_str_from_value(CONF_INT8, &split_mode, buf, max_len);
   124bc:	462b      	mov	r3, r5
   124be:	4622      	mov	r2, r4
   124c0:	f10d 0107 	add.w	r1, sp, #7
   124c4:	2002      	movs	r0, #2
   124c6:	f7fc fb4d 	bl	eb64 <conf_str_from_value>
   124ca:	e7f1      	b.n	124b0 <split_conf_get+0x1c>
    return NULL;
   124cc:	2000      	movs	r0, #0
}
   124ce:	4770      	bx	lr
   124d0:	00023e04 	.word	0x00023e04

000124d4 <split_conf_set>:
    if (argc == 1) {
   124d4:	2801      	cmp	r0, #1
   124d6:	d117      	bne.n	12508 <split_conf_set+0x34>
{
   124d8:	b510      	push	{r4, lr}
   124da:	b082      	sub	sp, #8
   124dc:	460b      	mov	r3, r1
   124de:	4614      	mov	r4, r2
        if (!strcmp(argv[0], "status")) {
   124e0:	490c      	ldr	r1, [pc, #48]	; (12514 <split_conf_set+0x40>)
   124e2:	6818      	ldr	r0, [r3, #0]
   124e4:	f7fb fab8 	bl	da58 <strcmp>
   124e8:	b988      	cbnz	r0, 1250e <split_conf_set+0x3a>
            rc = CONF_VALUE_SET(val, CONF_INT8, split_mode);
   124ea:	2301      	movs	r3, #1
   124ec:	f10d 0207 	add.w	r2, sp, #7
   124f0:	2102      	movs	r1, #2
   124f2:	4620      	mov	r0, r4
   124f4:	f7fc fad1 	bl	ea9a <conf_value_from_str>
            if (rc != 0) {
   124f8:	b108      	cbz	r0, 124fe <split_conf_set+0x2a>
}
   124fa:	b002      	add	sp, #8
   124fc:	bd10      	pop	{r4, pc}
            rc = split_mode_set(split_mode);
   124fe:	f89d 0007 	ldrb.w	r0, [sp, #7]
   12502:	f7ff ffa3 	bl	1244c <split_mode_set>
            if (rc != 0) {
   12506:	e7f8      	b.n	124fa <split_conf_set+0x26>
    return -1;
   12508:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1250c:	4770      	bx	lr
    return -1;
   1250e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12512:	e7f2      	b.n	124fa <split_conf_set+0x26>
   12514:	00023e04 	.word	0x00023e04

00012518 <split_conf_init>:
{
   12518:	b508      	push	{r3, lr}
    rc = conf_register(&split_conf_handler);
   1251a:	4802      	ldr	r0, [pc, #8]	; (12524 <split_conf_init+0xc>)
   1251c:	f7fc fa78 	bl	ea10 <conf_register>
}
   12520:	bd08      	pop	{r3, pc}
   12522:	bf00      	nop
   12524:	2000075c 	.word	0x2000075c

00012528 <split_write_split>:

int
split_write_split(split_mode_t split_mode)
{
   12528:	b500      	push	{lr}
   1252a:	b085      	sub	sp, #20
   1252c:	f88d 0007 	strb.w	r0, [sp, #7]
    char str[CONF_STR_FROM_BYTES_LEN(sizeof(split_mode_t))];
    int rc;

    rc = split_mode_set(split_mode);
   12530:	b2c0      	uxtb	r0, r0
   12532:	f7ff ff8b 	bl	1244c <split_mode_set>
    if (rc != 0) {
   12536:	b110      	cbz	r0, 1253e <split_write_split+0x16>

    if (!conf_str_from_value(CONF_INT8, &split_mode, str, sizeof(str))) {
        return -1;
    }
    return conf_save_one("split/status", str);
}
   12538:	b005      	add	sp, #20
   1253a:	f85d fb04 	ldr.w	pc, [sp], #4
    if (!conf_str_from_value(CONF_INT8, &split_mode, str, sizeof(str))) {
   1253e:	2305      	movs	r3, #5
   12540:	aa02      	add	r2, sp, #8
   12542:	f10d 0107 	add.w	r1, sp, #7
   12546:	2002      	movs	r0, #2
   12548:	f7fc fb0c 	bl	eb64 <conf_str_from_value>
   1254c:	b120      	cbz	r0, 12558 <split_write_split+0x30>
    return conf_save_one("split/status", str);
   1254e:	a902      	add	r1, sp, #8
   12550:	4803      	ldr	r0, [pc, #12]	; (12560 <split_write_split+0x38>)
   12552:	f7fc f9a9 	bl	e8a8 <conf_save_one>
   12556:	e7ef      	b.n	12538 <split_write_split+0x10>
        return -1;
   12558:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1255c:	e7ec      	b.n	12538 <split_write_split+0x10>
   1255e:	bf00      	nop
   12560:	00023df4 	.word	0x00023df4

00012564 <pos>:

static int
pos(char c)
{
    const char *p;
    for (p = base64_chars; *p; p++)
   12564:	4b06      	ldr	r3, [pc, #24]	; (12580 <pos+0x1c>)
   12566:	e000      	b.n	1256a <pos+0x6>
   12568:	3301      	adds	r3, #1
   1256a:	781a      	ldrb	r2, [r3, #0]
   1256c:	b122      	cbz	r2, 12578 <pos+0x14>
        if (*p == c)
   1256e:	4282      	cmp	r2, r0
   12570:	d1fa      	bne.n	12568 <pos+0x4>
            return p - base64_chars;
   12572:	4803      	ldr	r0, [pc, #12]	; (12580 <pos+0x1c>)
   12574:	1a18      	subs	r0, r3, r0
   12576:	4770      	bx	lr
    return -1;
   12578:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1257c:	4770      	bx	lr
   1257e:	bf00      	nop
   12580:	00023e14 	.word	0x00023e14

00012584 <token_decode>:

#define DECODE_ERROR -1

static unsigned int
token_decode(const char *token)
{
   12584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12586:	4607      	mov	r7, r0
    int i;
    unsigned int val = 0;
    int marker = 0;
    if (strlen(token) < 4)
   12588:	f7fb fa72 	bl	da70 <strlen>
   1258c:	2803      	cmp	r0, #3
   1258e:	d916      	bls.n	125be <token_decode+0x3a>
    int marker = 0;
   12590:	2600      	movs	r6, #0
    unsigned int val = 0;
   12592:	4635      	mov	r5, r6
        return DECODE_ERROR;
    for (i = 0; i < 4; i++) {
   12594:	4634      	mov	r4, r6
   12596:	e001      	b.n	1259c <token_decode+0x18>
        val *= 64;
        if (token[i] == '=')
            marker++;
   12598:	3601      	adds	r6, #1
    for (i = 0; i < 4; i++) {
   1259a:	3401      	adds	r4, #1
   1259c:	2c03      	cmp	r4, #3
   1259e:	dc09      	bgt.n	125b4 <token_decode+0x30>
        val *= 64;
   125a0:	01ad      	lsls	r5, r5, #6
        if (token[i] == '=')
   125a2:	5d38      	ldrb	r0, [r7, r4]
   125a4:	283d      	cmp	r0, #61	; 0x3d
   125a6:	d0f7      	beq.n	12598 <token_decode+0x14>
        else if (marker > 0)
   125a8:	2e00      	cmp	r6, #0
   125aa:	dc0b      	bgt.n	125c4 <token_decode+0x40>
            return DECODE_ERROR;
        else
            val += pos(token[i]);
   125ac:	f7ff ffda 	bl	12564 <pos>
   125b0:	4405      	add	r5, r0
   125b2:	e7f2      	b.n	1259a <token_decode+0x16>
    }
    if (marker > 2)
   125b4:	2e02      	cmp	r6, #2
   125b6:	dc08      	bgt.n	125ca <token_decode+0x46>
        return DECODE_ERROR;
    return (marker << 24) | val;
   125b8:	ea45 6006 	orr.w	r0, r5, r6, lsl #24
}
   125bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return DECODE_ERROR;
   125be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   125c2:	e7fb      	b.n	125bc <token_decode+0x38>
            return DECODE_ERROR;
   125c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   125c8:	e7f8      	b.n	125bc <token_decode+0x38>
        return DECODE_ERROR;
   125ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   125ce:	e7f5      	b.n	125bc <token_decode+0x38>

000125d0 <base64_encode>:
{
   125d0:	b570      	push	{r4, r5, r6, lr}
   125d2:	4615      	mov	r5, r2
    p = s;
   125d4:	4614      	mov	r4, r2
    last = NULL;
   125d6:	2600      	movs	r6, #0
    i = 0;
   125d8:	4632      	mov	r2, r6
    while (i < size) {
   125da:	e021      	b.n	12620 <base64_encode+0x50>
        i++;
   125dc:	1c96      	adds	r6, r2, #2
        c *= 256;
   125de:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
        if (i < size)
   125e2:	42b1      	cmp	r1, r6
   125e4:	dd01      	ble.n	125ea <base64_encode+0x1a>
            c += q[i];
   125e6:	5d86      	ldrb	r6, [r0, r6]
   125e8:	44b4      	add	ip, r6
        i++;
   125ea:	3203      	adds	r2, #3
        p[0] = base64_chars[(c & 0x00fc0000) >> 18];
   125ec:	f3cc 4e85 	ubfx	lr, ip, #18, #6
   125f0:	4e1b      	ldr	r6, [pc, #108]	; (12660 <base64_encode+0x90>)
   125f2:	f816 e00e 	ldrb.w	lr, [r6, lr]
   125f6:	f884 e000 	strb.w	lr, [r4]
        p[1] = base64_chars[(c & 0x0003f000) >> 12];
   125fa:	f3cc 3e05 	ubfx	lr, ip, #12, #6
   125fe:	f816 e00e 	ldrb.w	lr, [r6, lr]
   12602:	f884 e001 	strb.w	lr, [r4, #1]
        p[2] = base64_chars[(c & 0x00000fc0) >> 6];
   12606:	f3cc 1e85 	ubfx	lr, ip, #6, #6
   1260a:	f816 e00e 	ldrb.w	lr, [r6, lr]
   1260e:	f884 e002 	strb.w	lr, [r4, #2]
        p[3] = base64_chars[(c & 0x0000003f) >> 0];
   12612:	f00c 0c3f 	and.w	ip, ip, #63	; 0x3f
   12616:	f816 600c 	ldrb.w	r6, [r6, ip]
   1261a:	70e6      	strb	r6, [r4, #3]
        last = p;
   1261c:	4626      	mov	r6, r4
        p += 4;
   1261e:	3404      	adds	r4, #4
    while (i < size) {
   12620:	428a      	cmp	r2, r1
   12622:	da09      	bge.n	12638 <base64_encode+0x68>
        c = q[i++];
   12624:	1c56      	adds	r6, r2, #1
   12626:	f810 c002 	ldrb.w	ip, [r0, r2]
        c *= 256;
   1262a:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
        if (i < size)
   1262e:	42b1      	cmp	r1, r6
   12630:	ddd4      	ble.n	125dc <base64_encode+0xc>
            c += q[i];
   12632:	5d86      	ldrb	r6, [r0, r6]
   12634:	44b4      	add	ip, r6
   12636:	e7d1      	b.n	125dc <base64_encode+0xc>
    if (last) {
   12638:	b136      	cbz	r6, 12648 <base64_encode+0x78>
        diff = i - size;
   1263a:	1a52      	subs	r2, r2, r1
        if (diff > 0) {
   1263c:	2a00      	cmp	r2, #0
   1263e:	dd03      	ble.n	12648 <base64_encode+0x78>
            if (should_pad) {
   12640:	b933      	cbnz	r3, 12650 <base64_encode+0x80>
                p = last + (4 - diff);
   12642:	f1c2 0304 	rsb	r3, r2, #4
   12646:	18f4      	adds	r4, r6, r3
    *p = 0;
   12648:	2300      	movs	r3, #0
   1264a:	7023      	strb	r3, [r4, #0]
}
   1264c:	1b60      	subs	r0, r4, r5
   1264e:	bd70      	pop	{r4, r5, r6, pc}
                memset(last + (4 - diff), '=', diff);
   12650:	f1c2 0004 	rsb	r0, r2, #4
   12654:	213d      	movs	r1, #61	; 0x3d
   12656:	4430      	add	r0, r6
   12658:	f7fb f9d3 	bl	da02 <memset>
   1265c:	e7f4      	b.n	12648 <base64_encode+0x78>
   1265e:	bf00      	nop
   12660:	00023e14 	.word	0x00023e14

00012664 <base64_pad>:
{
   12664:	b510      	push	{r4, lr}
    remainder = len % 4;
   12666:	424b      	negs	r3, r1
   12668:	f001 0203 	and.w	r2, r1, #3
   1266c:	f003 0303 	and.w	r3, r3, #3
   12670:	bf58      	it	pl
   12672:	425a      	negpl	r2, r3
    if (remainder == 0) {
   12674:	f011 0f03 	tst.w	r1, #3
   12678:	d102      	bne.n	12680 <base64_pad+0x1c>
        return (0);
   1267a:	2400      	movs	r4, #0
}
   1267c:	4620      	mov	r0, r4
   1267e:	bd10      	pop	{r4, pc}
    memset(buf, '=', 4 - remainder);
   12680:	f1c2 0404 	rsb	r4, r2, #4
   12684:	4622      	mov	r2, r4
   12686:	213d      	movs	r1, #61	; 0x3d
   12688:	f7fb f9bb 	bl	da02 <memset>
    return (4 - remainder);
   1268c:	e7f6      	b.n	1267c <base64_pad+0x18>
	...

00012690 <base64_decode>:

int
base64_decode(const char *str, void *data)
{
   12690:	b570      	push	{r4, r5, r6, lr}
   12692:	4604      	mov	r4, r0
   12694:	460d      	mov	r5, r1
    const char *p;
    unsigned char *q;

    q = data;
   12696:	460e      	mov	r6, r1
    for (p = str; *p && (*p == '=' || strchr(base64_chars, *p)); p += 4) {
   12698:	e005      	b.n	126a6 <base64_decode+0x16>
        unsigned int marker = (val >> 24) & 0xff;
        if (val == DECODE_ERROR)
            return -1;
        *q++ = (val >> 16) & 0xff;
        if (marker < 2)
            *q++ = (val >> 8) & 0xff;
   1269a:	0a02      	lsrs	r2, r0, #8
   1269c:	1cb3      	adds	r3, r6, #2
   1269e:	7072      	strb	r2, [r6, #1]
   126a0:	e016      	b.n	126d0 <base64_decode+0x40>
    for (p = str; *p && (*p == '=' || strchr(base64_chars, *p)); p += 4) {
   126a2:	3404      	adds	r4, #4
   126a4:	461e      	mov	r6, r3
   126a6:	7821      	ldrb	r1, [r4, #0]
   126a8:	b1b9      	cbz	r1, 126da <base64_decode+0x4a>
   126aa:	293d      	cmp	r1, #61	; 0x3d
   126ac:	d003      	beq.n	126b6 <base64_decode+0x26>
   126ae:	480d      	ldr	r0, [pc, #52]	; (126e4 <base64_decode+0x54>)
   126b0:	f009 fe9d 	bl	1c3ee <strchr>
   126b4:	b188      	cbz	r0, 126da <base64_decode+0x4a>
        unsigned int val = token_decode(p);
   126b6:	4620      	mov	r0, r4
   126b8:	f7ff ff64 	bl	12584 <token_decode>
        unsigned int marker = (val >> 24) & 0xff;
   126bc:	0e01      	lsrs	r1, r0, #24
        if (val == DECODE_ERROR)
   126be:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   126c2:	d00c      	beq.n	126de <base64_decode+0x4e>
        *q++ = (val >> 16) & 0xff;
   126c4:	0c02      	lsrs	r2, r0, #16
   126c6:	4633      	mov	r3, r6
   126c8:	f803 2b01 	strb.w	r2, [r3], #1
        if (marker < 2)
   126cc:	2901      	cmp	r1, #1
   126ce:	d9e4      	bls.n	1269a <base64_decode+0xa>
        if (marker < 1)
   126d0:	2900      	cmp	r1, #0
   126d2:	d1e6      	bne.n	126a2 <base64_decode+0x12>
            *q++ = val & 0xff;
   126d4:	f803 0b01 	strb.w	r0, [r3], #1
   126d8:	e7e3      	b.n	126a2 <base64_decode+0x12>
    }
    return q - (unsigned char *) data;
   126da:	1b70      	subs	r0, r6, r5
}
   126dc:	bd70      	pop	{r4, r5, r6, pc}
            return -1;
   126de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   126e2:	e7fb      	b.n	126dc <base64_decode+0x4c>
   126e4:	00023e14 	.word	0x00023e14

000126e8 <valid_attr_type>:
 * one-to-one because of signedness of integers
 * and therefore we need a function to do this trickery */
static int
valid_attr_type(CborType ct, CborAttrType at)
{
    switch (at) {
   126e8:	3901      	subs	r1, #1
   126ea:	290a      	cmp	r1, #10
   126ec:	d828      	bhi.n	12740 <valid_attr_type+0x58>
   126ee:	e8df f001 	tbb	[pc, r1]
   126f2:	0606      	.short	0x0606
   126f4:	13110d09 	.word	0x13110d09
   126f8:	271f1b17 	.word	0x271f1b17
   126fc:	23          	.byte	0x23
   126fd:	00          	.byte	0x00
    case CborAttrIntegerType:
    case CborAttrUnsignedIntegerType:
        if (ct == CborIntegerType) {
   126fe:	b308      	cbz	r0, 12744 <valid_attr_type+0x5c>
        }
        break;
    default:
        break;
    }
    return 0;
   12700:	2000      	movs	r0, #0
   12702:	4770      	bx	lr
        if (ct == CborByteStringType) {
   12704:	2840      	cmp	r0, #64	; 0x40
   12706:	d01f      	beq.n	12748 <valid_attr_type+0x60>
    return 0;
   12708:	2000      	movs	r0, #0
   1270a:	4770      	bx	lr
        if (ct == CborTextStringType) {
   1270c:	2860      	cmp	r0, #96	; 0x60
   1270e:	d01d      	beq.n	1274c <valid_attr_type+0x64>
    return 0;
   12710:	2000      	movs	r0, #0
   12712:	4770      	bx	lr
        if (ct == CborBooleanType) {
   12714:	28f5      	cmp	r0, #245	; 0xf5
   12716:	d01b      	beq.n	12750 <valid_attr_type+0x68>
        if (ct == CborFloatType) {
   12718:	28fa      	cmp	r0, #250	; 0xfa
   1271a:	d01b      	beq.n	12754 <valid_attr_type+0x6c>
    return 0;
   1271c:	2000      	movs	r0, #0
   1271e:	4770      	bx	lr
        if (ct == CborDoubleType) {
   12720:	28fb      	cmp	r0, #251	; 0xfb
   12722:	d019      	beq.n	12758 <valid_attr_type+0x70>
    return 0;
   12724:	2000      	movs	r0, #0
   12726:	4770      	bx	lr
        if (ct == CborArrayType) {
   12728:	2880      	cmp	r0, #128	; 0x80
   1272a:	d017      	beq.n	1275c <valid_attr_type+0x74>
    return 0;
   1272c:	2000      	movs	r0, #0
   1272e:	4770      	bx	lr
        if (ct == CborMapType) {
   12730:	28a0      	cmp	r0, #160	; 0xa0
   12732:	d015      	beq.n	12760 <valid_attr_type+0x78>
    return 0;
   12734:	2000      	movs	r0, #0
   12736:	4770      	bx	lr
        if (ct == CborNullType) {
   12738:	28f6      	cmp	r0, #246	; 0xf6
   1273a:	d013      	beq.n	12764 <valid_attr_type+0x7c>
    return 0;
   1273c:	2000      	movs	r0, #0
   1273e:	4770      	bx	lr
    switch (at) {
   12740:	2000      	movs	r0, #0
   12742:	4770      	bx	lr
            return 1;
   12744:	2001      	movs	r0, #1
   12746:	4770      	bx	lr
            return 1;
   12748:	2001      	movs	r0, #1
   1274a:	4770      	bx	lr
            return 1;
   1274c:	2001      	movs	r0, #1
   1274e:	4770      	bx	lr
            return 1;
   12750:	2001      	movs	r0, #1
   12752:	4770      	bx	lr
            return 1;
   12754:	2001      	movs	r0, #1
   12756:	4770      	bx	lr
            return 1;
   12758:	2001      	movs	r0, #1
   1275a:	4770      	bx	lr
            return 1;
   1275c:	2001      	movs	r0, #1
   1275e:	4770      	bx	lr
            return 1;
   12760:	2001      	movs	r0, #1
   12762:	4770      	bx	lr
            return 1;
   12764:	2001      	movs	r0, #1
}
   12766:	4770      	bx	lr

00012768 <cbor_target_address>:
cbor_target_address(const struct cbor_attr_t *cursor,
                    const struct cbor_array_t *parent, int offset)
{
    char *targetaddr = NULL;

    if (parent == NULL || parent->element_type != CborAttrStructObjectType) {
   12768:	460b      	mov	r3, r1
   1276a:	b111      	cbz	r1, 12772 <cbor_target_address+0xa>
   1276c:	7809      	ldrb	r1, [r1, #0]
   1276e:	290a      	cmp	r1, #10
   12770:	d020      	beq.n	127b4 <cbor_target_address+0x4c>
        /* ordinary case - use the address in the cursor structure */
        switch (cursor->type) {
   12772:	7903      	ldrb	r3, [r0, #4]
   12774:	3b01      	subs	r3, #1
   12776:	2b06      	cmp	r3, #6
   12778:	d823      	bhi.n	127c2 <cbor_target_address+0x5a>
   1277a:	e8df f003 	tbb	[pc, r3]
   1277e:	0804      	.short	0x0804
   12780:	0c181614 	.word	0x0c181614
   12784:	10          	.byte	0x10
   12785:	00          	.byte	0x00
        case CborAttrNullType:
            targetaddr = NULL;
            break;
        case CborAttrIntegerType:
            targetaddr = (char *)&cursor->addr.integer[offset];
   12786:	6880      	ldr	r0, [r0, #8]
   12788:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
            break;
   1278c:	4770      	bx	lr
        case CborAttrUnsignedIntegerType:
            targetaddr = (char *)&cursor->addr.uinteger[offset];
   1278e:	6880      	ldr	r0, [r0, #8]
   12790:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
            break;
   12794:	4770      	bx	lr
#if FLOAT_SUPPORT
        case CborAttrFloatType:
            targetaddr = (char *)&cursor->addr.fval[offset];
   12796:	6880      	ldr	r0, [r0, #8]
   12798:	eb00 0082 	add.w	r0, r0, r2, lsl #2
            break;
   1279c:	4770      	bx	lr
        case CborAttrDoubleType:
            targetaddr = (char *)&cursor->addr.real[offset];
   1279e:	6880      	ldr	r0, [r0, #8]
   127a0:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
            break;
   127a4:	4770      	bx	lr
#endif
        case CborAttrByteStringType:
            targetaddr = (char *) cursor->addr.bytestring.data;
   127a6:	6880      	ldr	r0, [r0, #8]
            break;
   127a8:	4770      	bx	lr
        case CborAttrTextStringType:
            targetaddr = cursor->addr.string;
   127aa:	6880      	ldr	r0, [r0, #8]
            break;
   127ac:	4770      	bx	lr
        case CborAttrBooleanType:
            targetaddr = (char *)&cursor->addr.boolean[offset];
   127ae:	6880      	ldr	r0, [r0, #8]
   127b0:	4410      	add	r0, r2
            break;
   127b2:	4770      	bx	lr
            break;
        }
    } else {
        /* tricky case - hacking a member in an array of structures */
        targetaddr =
            parent->arr.objects.base + (offset * parent->arr.objects.stride) +
   127b4:	6899      	ldr	r1, [r3, #8]
   127b6:	68db      	ldr	r3, [r3, #12]
            cursor->addr.offset;
   127b8:	6880      	ldr	r0, [r0, #8]
            parent->arr.objects.base + (offset * parent->arr.objects.stride) +
   127ba:	fb03 0002 	mla	r0, r3, r2, r0
        targetaddr =
   127be:	4408      	add	r0, r1
   127c0:	4770      	bx	lr
        switch (cursor->type) {
   127c2:	2000      	movs	r0, #0
    }
    return targetaddr;
}
   127c4:	4770      	bx	lr
	...

000127c8 <cbor_read_array>:
    return err;
}

int
cbor_read_array(struct CborValue *value, const struct cbor_array_t *arr)
{
   127c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127cc:	b08b      	sub	sp, #44	; 0x2c
   127ce:	9001      	str	r0, [sp, #4]
   127d0:	460c      	mov	r4, r1
    int off, arrcount;
    size_t len;
    void *lptr;
    char *tp;

    err = cbor_value_enter_container(value, &elem);
   127d2:	a906      	add	r1, sp, #24
   127d4:	f000 ff59 	bl	1368a <cbor_value_enter_container>
    if (err) {
   127d8:	4605      	mov	r5, r0
   127da:	2800      	cmp	r0, #0
   127dc:	f040 80fd 	bne.w	129da <cbor_read_array+0x212>
        return err;
    }
    arrcount = 0;
    tp = arr->arr.strings.store;
   127e0:	f8d4 8008 	ldr.w	r8, [r4, #8]
    arrcount = 0;
   127e4:	2700      	movs	r7, #0
    for (off = 0; off < arr->maxlen; off++) {
   127e6:	463e      	mov	r6, r7
   127e8:	e0be      	b.n	12968 <cbor_read_array+0x1a0>
        switch (arr->element_type) {
        case CborAttrBooleanType:
            lptr = &arr->arr.booleans.store[off];
   127ea:	6862      	ldr	r2, [r4, #4]
CBOR_INLINE_API bool cbor_value_is_undefined(const CborValue *value)
{ return value->type == CborUndefinedType; }

/* Booleans */
CBOR_INLINE_API bool cbor_value_is_boolean(const CborValue *value)
{ return value->type == CborBooleanType; }
   127ec:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
CBOR_INLINE_API CborError cbor_value_get_boolean(const CborValue *value, bool *result)
{
    assert(cbor_value_is_boolean(value));
   127f0:	2bf5      	cmp	r3, #245	; 0xf5
   127f2:	d106      	bne.n	12802 <cbor_read_array+0x3a>
    *result = !!value->extra;
   127f4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   127f8:	3b00      	subs	r3, #0
   127fa:	bf18      	it	ne
   127fc:	2301      	movne	r3, #1
   127fe:	5593      	strb	r3, [r2, r6]
            err |= cbor_value_get_boolean(&elem, lptr);
            break;
   12800:	e0a7      	b.n	12952 <cbor_read_array+0x18a>
    assert(cbor_value_is_boolean(value));
   12802:	2300      	movs	r3, #0
   12804:	461a      	mov	r2, r3
   12806:	4619      	mov	r1, r3
   12808:	4618      	mov	r0, r3
   1280a:	f7f6 fc1f 	bl	904c <__assert_func>
        case CborAttrIntegerType:
            lptr = &arr->arr.integers.store[off];
   1280e:	f8d4 9004 	ldr.w	r9, [r4, #4]
   12812:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
   12816:	eb09 0ac6 	add.w	sl, r9, r6, lsl #3
    return CborNoError;
}

/* Integers */
CBOR_INLINE_API bool cbor_value_is_integer(const CborValue *value)
{ return value->type == CborIntegerType; }
   1281a:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    return CborNoError;
}

CBOR_INLINE_API CborError cbor_value_get_int64(const CborValue *value, int64_t *result)
{
    assert(cbor_value_is_integer(value));
   1281e:	b9c3      	cbnz	r3, 12852 <cbor_read_array+0x8a>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   12820:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
                _cbor_value_decode_int64_internal(value) : value->extra;
   12824:	f013 0f01 	tst.w	r3, #1
   12828:	d119      	bne.n	1285e <cbor_read_array+0x96>
   1282a:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
   1282e:	2100      	movs	r1, #0
    *result = (int64_t) _cbor_value_extract_int64_helper(value);
   12830:	f849 000b 	str.w	r0, [r9, fp]
   12834:	f8ca 1004 	str.w	r1, [sl, #4]
    if (value->flags & CborIteratorFlag_NegativeInteger)
   12838:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   1283c:	f013 0f02 	tst.w	r3, #2
   12840:	f000 8087 	beq.w	12952 <cbor_read_array+0x18a>
        *result = -*result - 1;
   12844:	43c0      	mvns	r0, r0
   12846:	43c9      	mvns	r1, r1
   12848:	f849 000b 	str.w	r0, [r9, fp]
   1284c:	f8ca 1004 	str.w	r1, [sl, #4]
            err |= cbor_value_get_int64(&elem, lptr);
            break;
   12850:	e07f      	b.n	12952 <cbor_read_array+0x18a>
    assert(cbor_value_is_integer(value));
   12852:	2300      	movs	r3, #0
   12854:	461a      	mov	r2, r3
   12856:	4619      	mov	r1, r3
   12858:	4618      	mov	r0, r3
   1285a:	f7f6 fbf7 	bl	904c <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   1285e:	a806      	add	r0, sp, #24
   12860:	f000 fec5 	bl	135ee <_cbor_value_decode_int64_internal>
   12864:	e7e4      	b.n	12830 <cbor_read_array+0x68>
        case CborAttrUnsignedIntegerType:
            lptr = &arr->arr.uintegers.store[off];
   12866:	f8d4 9004 	ldr.w	r9, [r4, #4]
   1286a:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
   1286e:	eb09 0ac6 	add.w	sl, r9, r6, lsl #3
{ return value->type == CborIntegerType; }
   12872:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   12876:	b933      	cbnz	r3, 12886 <cbor_read_array+0xbe>
   12878:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   1287c:	f013 0f02 	tst.w	r3, #2
   12880:	d010      	beq.n	128a4 <cbor_read_array+0xdc>
   12882:	2300      	movs	r3, #0
   12884:	e000      	b.n	12888 <cbor_read_array+0xc0>
   12886:	2300      	movs	r3, #0
    assert(cbor_value_is_unsigned_integer(value));
   12888:	b173      	cbz	r3, 128a8 <cbor_read_array+0xe0>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   1288a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
                _cbor_value_decode_int64_internal(value) : value->extra;
   1288e:	f013 0f01 	tst.w	r3, #1
   12892:	d10e      	bne.n	128b2 <cbor_read_array+0xea>
   12894:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
   12898:	2100      	movs	r1, #0
    *result = _cbor_value_extract_int64_helper(value);
   1289a:	f849 000b 	str.w	r0, [r9, fp]
   1289e:	f8ca 1004 	str.w	r1, [sl, #4]
            err |= cbor_value_get_uint64(&elem, lptr);
            break;
   128a2:	e056      	b.n	12952 <cbor_read_array+0x18a>
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   128a4:	2301      	movs	r3, #1
   128a6:	e7ef      	b.n	12888 <cbor_read_array+0xc0>
    assert(cbor_value_is_unsigned_integer(value));
   128a8:	461a      	mov	r2, r3
   128aa:	4619      	mov	r1, r3
   128ac:	4618      	mov	r0, r3
   128ae:	f7f6 fbcd 	bl	904c <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   128b2:	a806      	add	r0, sp, #24
   128b4:	f000 fe9b 	bl	135ee <_cbor_value_decode_int64_internal>
   128b8:	e7ef      	b.n	1289a <cbor_read_array+0xd2>
#if FLOAT_SUPPORT
        case CborAttrFloatType:
        case CborAttrDoubleType:
            lptr = &arr->arr.reals.store[off];
   128ba:	f8d4 9004 	ldr.w	r9, [r4, #4]
   128be:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
   128c2:	eb09 0ac6 	add.w	sl, r9, r6, lsl #3
    memcpy(result, &data, sizeof(*result));
    return CborNoError;
}

CBOR_INLINE_API bool cbor_value_is_double(const CborValue *value)
{ return value->type == CborDoubleType; }
   128c6:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
CBOR_INLINE_API CborError cbor_value_get_double(const CborValue *value, double *result)
{
    assert(cbor_value_is_double(value));
   128ca:	2bfb      	cmp	r3, #251	; 0xfb
   128cc:	d110      	bne.n	128f0 <cbor_read_array+0x128>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
   128ce:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   128d2:	f013 0f01 	tst.w	r3, #1
   128d6:	d011      	beq.n	128fc <cbor_read_array+0x134>
    uint64_t data = _cbor_value_decode_int64_internal(value);
   128d8:	a806      	add	r0, sp, #24
   128da:	f000 fe88 	bl	135ee <_cbor_value_decode_int64_internal>
   128de:	e9cd 0102 	strd	r0, r1, [sp, #8]
    memcpy(result, &data, sizeof(*result));
   128e2:	ab02      	add	r3, sp, #8
   128e4:	cb03      	ldmia	r3!, {r0, r1}
   128e6:	f849 000b 	str.w	r0, [r9, fp]
   128ea:	f8ca 1004 	str.w	r1, [sl, #4]
            err |= cbor_value_get_double(&elem, lptr);
            break;
   128ee:	e030      	b.n	12952 <cbor_read_array+0x18a>
    assert(cbor_value_is_double(value));
   128f0:	2300      	movs	r3, #0
   128f2:	461a      	mov	r2, r3
   128f4:	4619      	mov	r1, r3
   128f6:	4618      	mov	r0, r3
   128f8:	f7f6 fba8 	bl	904c <__assert_func>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
   128fc:	2300      	movs	r3, #0
   128fe:	461a      	mov	r2, r3
   12900:	4619      	mov	r1, r3
   12902:	4618      	mov	r0, r3
   12904:	f7f6 fba2 	bl	904c <__assert_func>
#endif
        case CborAttrTextStringType:
            len = arr->arr.strings.storelen - (tp - arr->arr.strings.store);
   12908:	68e3      	ldr	r3, [r4, #12]
   1290a:	68a2      	ldr	r2, [r4, #8]
   1290c:	eba8 0202 	sub.w	r2, r8, r2
   12910:	1a9b      	subs	r3, r3, r2
   12912:	9305      	str	r3, [sp, #20]
{ return value->type == CborTextStringType; }
   12914:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    assert(cbor_value_is_text_string(value));
   12918:	2b60      	cmp	r3, #96	; 0x60
   1291a:	d10d      	bne.n	12938 <cbor_read_array+0x170>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   1291c:	2300      	movs	r3, #0
   1291e:	aa05      	add	r2, sp, #20
   12920:	4641      	mov	r1, r8
   12922:	a806      	add	r0, sp, #24
   12924:	f000 ff66 	bl	137f4 <_cbor_value_copy_string>
            err |= cbor_value_copy_text_string(&elem, tp, &len, NULL);
   12928:	4305      	orrs	r5, r0
            arr->arr.strings.ptrs[off] = tp;
   1292a:	6863      	ldr	r3, [r4, #4]
   1292c:	f843 8026 	str.w	r8, [r3, r6, lsl #2]
            tp += len + 1;
   12930:	9b05      	ldr	r3, [sp, #20]
   12932:	3301      	adds	r3, #1
   12934:	4498      	add	r8, r3
            break;
   12936:	e00c      	b.n	12952 <cbor_read_array+0x18a>
    assert(cbor_value_is_text_string(value));
   12938:	2300      	movs	r3, #0
   1293a:	461a      	mov	r2, r3
   1293c:	4619      	mov	r1, r3
   1293e:	4618      	mov	r0, r3
   12940:	f7f6 fb84 	bl	904c <__assert_func>
        case CborAttrStructObjectType:
            err |= cbor_internal_read_object(&elem, arr->arr.objects.subtype,
   12944:	4633      	mov	r3, r6
   12946:	4622      	mov	r2, r4
   12948:	6861      	ldr	r1, [r4, #4]
   1294a:	a806      	add	r0, sp, #24
   1294c:	f000 f848 	bl	129e0 <cbor_internal_read_object>
   12950:	4305      	orrs	r5, r0
            break;
        default:
            err |= CborErrorIllegalType;
            break;
        }
        arrcount++;
   12952:	3701      	adds	r7, #1
        if (arr->element_type != CborAttrStructObjectType) {
   12954:	7823      	ldrb	r3, [r4, #0]
   12956:	2b0a      	cmp	r3, #10
   12958:	d127      	bne.n	129aa <cbor_read_array+0x1e2>
{ return value && value->type != CborInvalidType; }
   1295a:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   1295e:	2bff      	cmp	r3, #255	; 0xff
   12960:	d028      	beq.n	129b4 <cbor_read_array+0x1ec>
   12962:	2301      	movs	r3, #1
            err |= cbor_value_advance(&elem);
        }
        if (!cbor_value_is_valid(&elem)) {
   12964:	b343      	cbz	r3, 129b8 <cbor_read_array+0x1f0>
    for (off = 0; off < arr->maxlen; off++) {
   12966:	3601      	adds	r6, #1
   12968:	6963      	ldr	r3, [r4, #20]
   1296a:	42b3      	cmp	r3, r6
   1296c:	dd24      	ble.n	129b8 <cbor_read_array+0x1f0>
        switch (arr->element_type) {
   1296e:	7823      	ldrb	r3, [r4, #0]
   12970:	3b01      	subs	r3, #1
   12972:	2b09      	cmp	r3, #9
   12974:	d816      	bhi.n	129a4 <cbor_read_array+0x1dc>
   12976:	a201      	add	r2, pc, #4	; (adr r2, 1297c <cbor_read_array+0x1b4>)
   12978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1297c:	0001280f 	.word	0x0001280f
   12980:	00012867 	.word	0x00012867
   12984:	000129a5 	.word	0x000129a5
   12988:	00012909 	.word	0x00012909
   1298c:	000127eb 	.word	0x000127eb
   12990:	000128bb 	.word	0x000128bb
   12994:	000128bb 	.word	0x000128bb
   12998:	000129a5 	.word	0x000129a5
   1299c:	000129a5 	.word	0x000129a5
   129a0:	00012945 	.word	0x00012945
            err |= CborErrorIllegalType;
   129a4:	f445 7582 	orr.w	r5, r5, #260	; 0x104
            break;
   129a8:	e7d3      	b.n	12952 <cbor_read_array+0x18a>
            err |= cbor_value_advance(&elem);
   129aa:	a806      	add	r0, sp, #24
   129ac:	f000 ff7f 	bl	138ae <cbor_value_advance>
   129b0:	4305      	orrs	r5, r0
   129b2:	e7d2      	b.n	1295a <cbor_read_array+0x192>
   129b4:	2300      	movs	r3, #0
   129b6:	e7d5      	b.n	12964 <cbor_read_array+0x19c>
            break;
        }
    }
    if (arr->count) {
   129b8:	6923      	ldr	r3, [r4, #16]
   129ba:	b133      	cbz	r3, 129ca <cbor_read_array+0x202>
        *arr->count = arrcount;
   129bc:	601f      	str	r7, [r3, #0]
   129be:	e004      	b.n	129ca <cbor_read_array+0x202>
    }
    while (!cbor_value_at_end(&elem)) {
        err |= CborErrorDataTooLarge;
   129c0:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
        cbor_value_advance(&elem);
   129c4:	a806      	add	r0, sp, #24
   129c6:	f000 ff72 	bl	138ae <cbor_value_advance>
{ return it->remaining == 0; }
   129ca:	9b08      	ldr	r3, [sp, #32]
    while (!cbor_value_at_end(&elem)) {
   129cc:	2b00      	cmp	r3, #0
   129ce:	d1f7      	bne.n	129c0 <cbor_read_array+0x1f8>
    }
    err |= cbor_value_leave_container(value, &elem);
   129d0:	a906      	add	r1, sp, #24
   129d2:	9801      	ldr	r0, [sp, #4]
   129d4:	f000 feee 	bl	137b4 <cbor_value_leave_container>
   129d8:	4328      	orrs	r0, r5
    return err;
}
   129da:	b00b      	add	sp, #44	; 0x2c
   129dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000129e0 <cbor_internal_read_object>:
{
   129e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129e4:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
   129e8:	9001      	str	r0, [sp, #4]
   129ea:	9100      	str	r1, [sp, #0]
   129ec:	4691      	mov	r9, r2
   129ee:	469a      	mov	sl, r3
    for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   129f0:	460c      	mov	r4, r1
   129f2:	e004      	b.n	129fe <cbor_internal_read_object+0x1e>
                    memcpy(lptr, &cursor->dflt.integer, sizeof(long long int));
   129f4:	6a21      	ldr	r1, [r4, #32]
   129f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   129f8:	6001      	str	r1, [r0, #0]
   129fa:	6043      	str	r3, [r0, #4]
    for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   129fc:	3430      	adds	r4, #48	; 0x30
   129fe:	6827      	ldr	r7, [r4, #0]
   12a00:	b38f      	cbz	r7, 12a66 <cbor_internal_read_object+0x86>
        if (!cursor->nodefault) {
   12a02:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   12a06:	2b00      	cmp	r3, #0
   12a08:	d1f8      	bne.n	129fc <cbor_internal_read_object+0x1c>
            lptr = cbor_target_address(cursor, parent, offset);
   12a0a:	4652      	mov	r2, sl
   12a0c:	4649      	mov	r1, r9
   12a0e:	4620      	mov	r0, r4
   12a10:	f7ff feaa 	bl	12768 <cbor_target_address>
            if (lptr != NULL) {
   12a14:	2800      	cmp	r0, #0
   12a16:	d0f1      	beq.n	129fc <cbor_internal_read_object+0x1c>
                switch (cursor->type) {
   12a18:	7923      	ldrb	r3, [r4, #4]
   12a1a:	3b01      	subs	r3, #1
   12a1c:	2b06      	cmp	r3, #6
   12a1e:	d8ed      	bhi.n	129fc <cbor_internal_read_object+0x1c>
   12a20:	a101      	add	r1, pc, #4	; (adr r1, 12a28 <cbor_internal_read_object+0x48>)
   12a22:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   12a26:	bf00      	nop
   12a28:	000129f5 	.word	0x000129f5
   12a2c:	00012a45 	.word	0x00012a45
   12a30:	000129fd 	.word	0x000129fd
   12a34:	000129fd 	.word	0x000129fd
   12a38:	00012a4f 	.word	0x00012a4f
   12a3c:	00012a57 	.word	0x00012a57
   12a40:	00012a5d 	.word	0x00012a5d
                    memcpy(lptr, &cursor->dflt.integer,
   12a44:	6a21      	ldr	r1, [r4, #32]
   12a46:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12a48:	6001      	str	r1, [r0, #0]
   12a4a:	6043      	str	r3, [r0, #4]
                    break;
   12a4c:	e7d6      	b.n	129fc <cbor_internal_read_object+0x1c>
                    memcpy(lptr, &cursor->dflt.boolean, sizeof(bool));
   12a4e:	f894 3020 	ldrb.w	r3, [r4, #32]
   12a52:	7003      	strb	r3, [r0, #0]
                    break;
   12a54:	e7d2      	b.n	129fc <cbor_internal_read_object+0x1c>
                    memcpy(lptr, &cursor->dflt.fval, sizeof(float));
   12a56:	6a23      	ldr	r3, [r4, #32]
   12a58:	6003      	str	r3, [r0, #0]
                    break;
   12a5a:	e7cf      	b.n	129fc <cbor_internal_read_object+0x1c>
                    memcpy(lptr, &cursor->dflt.real, sizeof(double));
   12a5c:	6a21      	ldr	r1, [r4, #32]
   12a5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12a60:	6001      	str	r1, [r0, #0]
   12a62:	6043      	str	r3, [r0, #4]
                    break;
   12a64:	e7ca      	b.n	129fc <cbor_internal_read_object+0x1c>
{ return value->type == CborMapType; }
   12a66:	9801      	ldr	r0, [sp, #4]
   12a68:	7b83      	ldrb	r3, [r0, #14]
    if (cbor_value_is_map(root_value)) {
   12a6a:	2ba0      	cmp	r3, #160	; 0xa0
   12a6c:	d005      	beq.n	12a7a <cbor_internal_read_object+0x9a>
        return err;
   12a6e:	f44f 7082 	mov.w	r0, #260	; 0x104
}
   12a72:	f50d 7d0b 	add.w	sp, sp, #556	; 0x22c
   12a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        err |= cbor_value_enter_container(root_value, &cur_value);
   12a7a:	a905      	add	r1, sp, #20
   12a7c:	f000 fe05 	bl	1368a <cbor_value_enter_container>
   12a80:	4680      	mov	r8, r0
    while (cbor_value_is_valid(&cur_value) && !err) {
   12a82:	e140      	b.n	12d06 <cbor_internal_read_object+0x326>
            if (cbor_value_calculate_string_length(&cur_value, &len) == 0) {
   12a84:	a904      	add	r1, sp, #16
   12a86:	a805      	add	r0, sp, #20
   12a88:	f000 ff23 	bl	138d2 <cbor_value_calculate_string_length>
   12a8c:	b978      	cbnz	r0, 12aae <cbor_internal_read_object+0xce>
                if (len > MYNEWT_VAL(CBORATTR_MAX_SIZE)) {
   12a8e:	9b04      	ldr	r3, [sp, #16]
   12a90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   12a94:	d820      	bhi.n	12ad8 <cbor_internal_read_object+0xf8>
{ return value->type == CborTextStringType; }
   12a96:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_text_string(value));
   12a9a:	2b60      	cmp	r3, #96	; 0x60
   12a9c:	d11f      	bne.n	12ade <cbor_internal_read_object+0xfe>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   12a9e:	2300      	movs	r3, #0
   12aa0:	aa04      	add	r2, sp, #16
   12aa2:	a909      	add	r1, sp, #36	; 0x24
   12aa4:	a805      	add	r0, sp, #20
   12aa6:	f000 fea5 	bl	137f4 <_cbor_value_copy_string>
                err |= cbor_value_copy_text_string(&cur_value, attrbuf, &len,
   12aaa:	ea48 0800 	orr.w	r8, r8, r0
            err |= cbor_value_advance(&cur_value);
   12aae:	a805      	add	r0, sp, #20
   12ab0:	f000 fefd 	bl	138ae <cbor_value_advance>
   12ab4:	ea48 0800 	orr.w	r8, r8, r0
{ return value && value->type != CborInvalidType; }
   12ab8:	f89d 6022 	ldrb.w	r6, [sp, #34]	; 0x22
   12abc:	2eff      	cmp	r6, #255	; 0xff
   12abe:	d014      	beq.n	12aea <cbor_internal_read_object+0x10a>
   12ac0:	2301      	movs	r3, #1
            if (cbor_value_is_valid(&cur_value)) {
   12ac2:	2b00      	cmp	r3, #0
   12ac4:	f040 8131 	bne.w	12d2a <cbor_internal_read_object+0x34a>
                err |= CborErrorIllegalType;
   12ac8:	f448 7882 	orr.w	r8, r8, #260	; 0x104
    if (!err) {
   12acc:	f1b8 0f00 	cmp.w	r8, #0
   12ad0:	f000 8130 	beq.w	12d34 <cbor_internal_read_object+0x354>
    return err;
   12ad4:	4640      	mov	r0, r8
   12ad6:	e7cc      	b.n	12a72 <cbor_internal_read_object+0x92>
                    err |= CborErrorDataTooLarge;
   12ad8:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
                    break;
   12adc:	e7f6      	b.n	12acc <cbor_internal_read_object+0xec>
    assert(cbor_value_is_text_string(value));
   12ade:	2300      	movs	r3, #0
   12ae0:	461a      	mov	r2, r3
   12ae2:	4619      	mov	r1, r3
   12ae4:	4618      	mov	r0, r3
   12ae6:	f7f6 fab1 	bl	904c <__assert_func>
{ return value && value->type != CborInvalidType; }
   12aea:	2300      	movs	r3, #0
   12aec:	e7e9      	b.n	12ac2 <cbor_internal_read_object+0xe2>
                    attrbuf[0] == '\0') {
   12aee:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
                if (cursor->attribute == CBORATTR_ATTR_UNNAMED &&
   12af2:	b963      	cbnz	r3, 12b0e <cbor_internal_read_object+0x12e>
                    best_match = cursor;
   12af4:	46a3      	mov	fp, r4
        for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   12af6:	3430      	adds	r4, #48	; 0x30
   12af8:	6825      	ldr	r5, [r4, #0]
   12afa:	b1a5      	cbz	r5, 12b26 <cbor_internal_read_object+0x146>
            if (valid_attr_type(type, cursor->type)) {
   12afc:	7921      	ldrb	r1, [r4, #4]
   12afe:	4630      	mov	r0, r6
   12b00:	f7ff fdf2 	bl	126e8 <valid_attr_type>
   12b04:	2800      	cmp	r0, #0
   12b06:	d0f6      	beq.n	12af6 <cbor_internal_read_object+0x116>
                if (cursor->attribute == CBORATTR_ATTR_UNNAMED &&
   12b08:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   12b0c:	d0ef      	beq.n	12aee <cbor_internal_read_object+0x10e>
                } else if (strlen(cursor->attribute) == len &&
   12b0e:	4628      	mov	r0, r5
   12b10:	f7fa ffae 	bl	da70 <strlen>
   12b14:	9a04      	ldr	r2, [sp, #16]
   12b16:	4290      	cmp	r0, r2
   12b18:	d1ed      	bne.n	12af6 <cbor_internal_read_object+0x116>
                    !memcmp(cursor->attribute, attrbuf, len)) {
   12b1a:	a909      	add	r1, sp, #36	; 0x24
   12b1c:	4628      	mov	r0, r5
   12b1e:	f7fa ff3f 	bl	d9a0 <memcmp>
                } else if (strlen(cursor->attribute) == len &&
   12b22:	2800      	cmp	r0, #0
   12b24:	d1e7      	bne.n	12af6 <cbor_internal_read_object+0x116>
        if (!cursor->attribute && best_match) {
   12b26:	b1b5      	cbz	r5, 12b56 <cbor_internal_read_object+0x176>
        if (cursor->attribute != NULL) {
   12b28:	6823      	ldr	r3, [r4, #0]
   12b2a:	2b00      	cmp	r3, #0
   12b2c:	f000 80e8 	beq.w	12d00 <cbor_internal_read_object+0x320>
            lptr = cbor_target_address(cursor, parent, offset);
   12b30:	4652      	mov	r2, sl
   12b32:	4649      	mov	r1, r9
   12b34:	4620      	mov	r0, r4
   12b36:	f7ff fe17 	bl	12768 <cbor_target_address>
   12b3a:	4605      	mov	r5, r0
            switch (cursor->type) {
   12b3c:	7923      	ldrb	r3, [r4, #4]
   12b3e:	3b01      	subs	r3, #1
   12b40:	2b0a      	cmp	r3, #10
   12b42:	f200 80db 	bhi.w	12cfc <cbor_internal_read_object+0x31c>
   12b46:	e8df f003 	tbb	[pc, r3]
   12b4a:	401c      	.short	0x401c
   12b4c:	620bb39b 	.word	0x620bb39b
   12b50:	d9d0c87c 	.word	0xd9d0c87c
   12b54:	db          	.byte	0xdb
   12b55:	00          	.byte	0x00
        if (!cursor->attribute && best_match) {
   12b56:	f1bb 0f00 	cmp.w	fp, #0
   12b5a:	d0e5      	beq.n	12b28 <cbor_internal_read_object+0x148>
            cursor = best_match;
   12b5c:	465c      	mov	r4, fp
   12b5e:	e7e3      	b.n	12b28 <cbor_internal_read_object+0x148>
{ return value->type == CborBooleanType; }
   12b60:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_boolean(value));
   12b64:	2bf5      	cmp	r3, #245	; 0xf5
   12b66:	d106      	bne.n	12b76 <cbor_internal_read_object+0x196>
    *result = !!value->extra;
   12b68:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   12b6c:	3b00      	subs	r3, #0
   12b6e:	bf18      	it	ne
   12b70:	2301      	movne	r3, #1
   12b72:	7003      	strb	r3, [r0, #0]
                break;
   12b74:	e0c4      	b.n	12d00 <cbor_internal_read_object+0x320>
    assert(cbor_value_is_boolean(value));
   12b76:	2300      	movs	r3, #0
   12b78:	461a      	mov	r2, r3
   12b7a:	4619      	mov	r1, r3
   12b7c:	4618      	mov	r0, r3
   12b7e:	f7f6 fa65 	bl	904c <__assert_func>
{ return value->type == CborIntegerType; }
   12b82:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_integer(value));
   12b86:	b9a3      	cbnz	r3, 12bb2 <cbor_internal_read_object+0x1d2>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   12b88:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
                _cbor_value_decode_int64_internal(value) : value->extra;
   12b8c:	f013 0f01 	tst.w	r3, #1
   12b90:	d115      	bne.n	12bbe <cbor_internal_read_object+0x1de>
   12b92:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   12b96:	2300      	movs	r3, #0
    *result = (int64_t) _cbor_value_extract_int64_helper(value);
   12b98:	602a      	str	r2, [r5, #0]
   12b9a:	606b      	str	r3, [r5, #4]
    if (value->flags & CborIteratorFlag_NegativeInteger)
   12b9c:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
   12ba0:	f011 0f02 	tst.w	r1, #2
   12ba4:	f000 80ac 	beq.w	12d00 <cbor_internal_read_object+0x320>
        *result = -*result - 1;
   12ba8:	43d2      	mvns	r2, r2
   12baa:	43db      	mvns	r3, r3
   12bac:	602a      	str	r2, [r5, #0]
   12bae:	606b      	str	r3, [r5, #4]
                break;
   12bb0:	e0a6      	b.n	12d00 <cbor_internal_read_object+0x320>
    assert(cbor_value_is_integer(value));
   12bb2:	2300      	movs	r3, #0
   12bb4:	461a      	mov	r2, r3
   12bb6:	4619      	mov	r1, r3
   12bb8:	4618      	mov	r0, r3
   12bba:	f7f6 fa47 	bl	904c <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   12bbe:	a805      	add	r0, sp, #20
   12bc0:	f000 fd15 	bl	135ee <_cbor_value_decode_int64_internal>
   12bc4:	4602      	mov	r2, r0
   12bc6:	460b      	mov	r3, r1
   12bc8:	e7e6      	b.n	12b98 <cbor_internal_read_object+0x1b8>
{ return value->type == CborIntegerType; }
   12bca:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   12bce:	b933      	cbnz	r3, 12bde <cbor_internal_read_object+0x1fe>
   12bd0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   12bd4:	f013 0f02 	tst.w	r3, #2
   12bd8:	d00e      	beq.n	12bf8 <cbor_internal_read_object+0x218>
   12bda:	2300      	movs	r3, #0
   12bdc:	e000      	b.n	12be0 <cbor_internal_read_object+0x200>
   12bde:	2300      	movs	r3, #0
    assert(cbor_value_is_unsigned_integer(value));
   12be0:	b163      	cbz	r3, 12bfc <cbor_internal_read_object+0x21c>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   12be2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
                _cbor_value_decode_int64_internal(value) : value->extra;
   12be6:	f013 0f01 	tst.w	r3, #1
   12bea:	d10c      	bne.n	12c06 <cbor_internal_read_object+0x226>
   12bec:	f8bd 0020 	ldrh.w	r0, [sp, #32]
   12bf0:	2100      	movs	r1, #0
    *result = _cbor_value_extract_int64_helper(value);
   12bf2:	6028      	str	r0, [r5, #0]
   12bf4:	6069      	str	r1, [r5, #4]
                break;
   12bf6:	e083      	b.n	12d00 <cbor_internal_read_object+0x320>
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   12bf8:	2301      	movs	r3, #1
   12bfa:	e7f1      	b.n	12be0 <cbor_internal_read_object+0x200>
    assert(cbor_value_is_unsigned_integer(value));
   12bfc:	461a      	mov	r2, r3
   12bfe:	4619      	mov	r1, r3
   12c00:	4618      	mov	r0, r3
   12c02:	f7f6 fa23 	bl	904c <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   12c06:	a805      	add	r0, sp, #20
   12c08:	f000 fcf1 	bl	135ee <_cbor_value_decode_int64_internal>
   12c0c:	e7f1      	b.n	12bf2 <cbor_internal_read_object+0x212>
{ return value->type == CborFloatType; }
   12c0e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_float(value));
   12c12:	2bfa      	cmp	r3, #250	; 0xfa
   12c14:	d109      	bne.n	12c2a <cbor_internal_read_object+0x24a>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
   12c16:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   12c1a:	f013 0f01 	tst.w	r3, #1
   12c1e:	d00a      	beq.n	12c36 <cbor_internal_read_object+0x256>
    uint32_t data = (uint32_t)_cbor_value_decode_int64_internal(value);
   12c20:	a805      	add	r0, sp, #20
   12c22:	f000 fce4 	bl	135ee <_cbor_value_decode_int64_internal>
    memcpy(result, &data, sizeof(*result));
   12c26:	6028      	str	r0, [r5, #0]
                break;
   12c28:	e06a      	b.n	12d00 <cbor_internal_read_object+0x320>
    assert(cbor_value_is_float(value));
   12c2a:	2300      	movs	r3, #0
   12c2c:	461a      	mov	r2, r3
   12c2e:	4619      	mov	r1, r3
   12c30:	4618      	mov	r0, r3
   12c32:	f7f6 fa0b 	bl	904c <__assert_func>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
   12c36:	2300      	movs	r3, #0
   12c38:	461a      	mov	r2, r3
   12c3a:	4619      	mov	r1, r3
   12c3c:	4618      	mov	r0, r3
   12c3e:	f7f6 fa05 	bl	904c <__assert_func>
{ return value->type == CborDoubleType; }
   12c42:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_double(value));
   12c46:	2bfb      	cmp	r3, #251	; 0xfb
   12c48:	d10e      	bne.n	12c68 <cbor_internal_read_object+0x288>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
   12c4a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   12c4e:	f013 0f01 	tst.w	r3, #1
   12c52:	d00f      	beq.n	12c74 <cbor_internal_read_object+0x294>
    uint64_t data = _cbor_value_decode_int64_internal(value);
   12c54:	a805      	add	r0, sp, #20
   12c56:	f000 fcca 	bl	135ee <_cbor_value_decode_int64_internal>
   12c5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    memcpy(result, &data, sizeof(*result));
   12c5e:	ab02      	add	r3, sp, #8
   12c60:	cb03      	ldmia	r3!, {r0, r1}
   12c62:	6028      	str	r0, [r5, #0]
   12c64:	6069      	str	r1, [r5, #4]
                break;
   12c66:	e04b      	b.n	12d00 <cbor_internal_read_object+0x320>
    assert(cbor_value_is_double(value));
   12c68:	2300      	movs	r3, #0
   12c6a:	461a      	mov	r2, r3
   12c6c:	4619      	mov	r1, r3
   12c6e:	4618      	mov	r0, r3
   12c70:	f7f6 f9ec 	bl	904c <__assert_func>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
   12c74:	2300      	movs	r3, #0
   12c76:	461a      	mov	r2, r3
   12c78:	4619      	mov	r1, r3
   12c7a:	4618      	mov	r0, r3
   12c7c:	f7f6 f9e6 	bl	904c <__assert_func>
                size_t len = cursor->len;
   12c80:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12c82:	9302      	str	r3, [sp, #8]
{ return value->type == CborByteStringType; }
   12c84:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_byte_string(value));
   12c88:	2b40      	cmp	r3, #64	; 0x40
   12c8a:	d10b      	bne.n	12ca4 <cbor_internal_read_object+0x2c4>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   12c8c:	2300      	movs	r3, #0
   12c8e:	aa02      	add	r2, sp, #8
   12c90:	4601      	mov	r1, r0
   12c92:	a805      	add	r0, sp, #20
   12c94:	f000 fdae 	bl	137f4 <_cbor_value_copy_string>
                err |= cbor_value_copy_byte_string(&cur_value, lptr,
   12c98:	ea48 0800 	orr.w	r8, r8, r0
                *cursor->addr.bytestring.len = len;
   12c9c:	68e3      	ldr	r3, [r4, #12]
   12c9e:	9a02      	ldr	r2, [sp, #8]
   12ca0:	601a      	str	r2, [r3, #0]
                break;
   12ca2:	e02d      	b.n	12d00 <cbor_internal_read_object+0x320>
    assert(cbor_value_is_byte_string(value));
   12ca4:	2300      	movs	r3, #0
   12ca6:	461a      	mov	r2, r3
   12ca8:	4619      	mov	r1, r3
   12caa:	4618      	mov	r0, r3
   12cac:	f7f6 f9ce 	bl	904c <__assert_func>
                size_t len = cursor->len;
   12cb0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12cb2:	9302      	str	r3, [sp, #8]
{ return value->type == CborTextStringType; }
   12cb4:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_text_string(value));
   12cb8:	2b60      	cmp	r3, #96	; 0x60
   12cba:	d108      	bne.n	12cce <cbor_internal_read_object+0x2ee>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   12cbc:	2300      	movs	r3, #0
   12cbe:	aa02      	add	r2, sp, #8
   12cc0:	4601      	mov	r1, r0
   12cc2:	a805      	add	r0, sp, #20
   12cc4:	f000 fd96 	bl	137f4 <_cbor_value_copy_string>
                err |= cbor_value_copy_text_string(&cur_value, lptr,
   12cc8:	ea48 0800 	orr.w	r8, r8, r0
                break;
   12ccc:	e018      	b.n	12d00 <cbor_internal_read_object+0x320>
    assert(cbor_value_is_text_string(value));
   12cce:	2300      	movs	r3, #0
   12cd0:	461a      	mov	r2, r3
   12cd2:	4619      	mov	r1, r3
   12cd4:	4618      	mov	r0, r3
   12cd6:	f7f6 f9b9 	bl	904c <__assert_func>
                err |= cbor_read_array(&cur_value, &cursor->addr.array);
   12cda:	f104 0108 	add.w	r1, r4, #8
   12cde:	a805      	add	r0, sp, #20
   12ce0:	f7ff fd72 	bl	127c8 <cbor_read_array>
   12ce4:	ea48 0800 	orr.w	r8, r8, r0
                continue;
   12ce8:	e00d      	b.n	12d06 <cbor_internal_read_object+0x326>
                err |= cbor_internal_read_object(&cur_value, cursor->addr.obj,
   12cea:	2300      	movs	r3, #0
   12cec:	461a      	mov	r2, r3
   12cee:	68a1      	ldr	r1, [r4, #8]
   12cf0:	a805      	add	r0, sp, #20
   12cf2:	f7ff fe75 	bl	129e0 <cbor_internal_read_object>
   12cf6:	ea48 0800 	orr.w	r8, r8, r0
                continue;
   12cfa:	e004      	b.n	12d06 <cbor_internal_read_object+0x326>
                err |= CborErrorIllegalType;
   12cfc:	f448 7882 	orr.w	r8, r8, #260	; 0x104
        cbor_value_advance(&cur_value);
   12d00:	a805      	add	r0, sp, #20
   12d02:	f000 fdd4 	bl	138ae <cbor_value_advance>
{ return value && value->type != CborInvalidType; }
   12d06:	f89d 6022 	ldrb.w	r6, [sp, #34]	; 0x22
   12d0a:	2eff      	cmp	r6, #255	; 0xff
   12d0c:	d010      	beq.n	12d30 <cbor_internal_read_object+0x350>
   12d0e:	2301      	movs	r3, #1
    while (cbor_value_is_valid(&cur_value) && !err) {
   12d10:	2b00      	cmp	r3, #0
   12d12:	f43f aedb 	beq.w	12acc <cbor_internal_read_object+0xec>
   12d16:	f1b8 0f00 	cmp.w	r8, #0
   12d1a:	f47f aed7 	bne.w	12acc <cbor_internal_read_object+0xec>
        if (cbor_value_is_text_string(&cur_value)) {
   12d1e:	2e60      	cmp	r6, #96	; 0x60
   12d20:	f43f aeb0 	beq.w	12a84 <cbor_internal_read_object+0xa4>
            attrbuf[0] = '\0';
   12d24:	2300      	movs	r3, #0
   12d26:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        best_match = NULL;
   12d2a:	46bb      	mov	fp, r7
        for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   12d2c:	9c00      	ldr	r4, [sp, #0]
   12d2e:	e6e3      	b.n	12af8 <cbor_internal_read_object+0x118>
   12d30:	2300      	movs	r3, #0
   12d32:	e7ed      	b.n	12d10 <cbor_internal_read_object+0x330>
        err |= cbor_value_leave_container(root_value, &cur_value);
   12d34:	a905      	add	r1, sp, #20
   12d36:	9801      	ldr	r0, [sp, #4]
   12d38:	f000 fd3c 	bl	137b4 <cbor_value_leave_container>
   12d3c:	ea48 0800 	orr.w	r8, r8, r0
   12d40:	e6c8      	b.n	12ad4 <cbor_internal_read_object+0xf4>
   12d42:	bf00      	nop

00012d44 <cbor_read_object>:

int
cbor_read_object(struct CborValue *value, const struct cbor_attr_t *attrs)
{
   12d44:	b508      	push	{r3, lr}
    int st;

    st = cbor_internal_read_object(value, attrs, NULL, 0);
   12d46:	2300      	movs	r3, #0
   12d48:	461a      	mov	r2, r3
   12d4a:	f7ff fe49 	bl	129e0 <cbor_internal_read_object>
    return st;
}
   12d4e:	bd08      	pop	{r3, pc}

00012d50 <cbor_mbuf_reader_cpy>:
}

static uintptr_t
cbor_mbuf_reader_cpy(struct cbor_decoder_reader *d, char *dst, int offset,
                     size_t len)
{
   12d50:	b508      	push	{r3, lr}
   12d52:	4694      	mov	ip, r2
   12d54:	461a      	mov	r2, r3
    int rc;
    struct cbor_mbuf_reader *cb = (struct cbor_mbuf_reader *) d;

    rc = os_mbuf_copydata(cb->m, offset + cb->init_off, len, dst);
   12d56:	460b      	mov	r3, r1
   12d58:	69c1      	ldr	r1, [r0, #28]
   12d5a:	4461      	add	r1, ip
   12d5c:	6a00      	ldr	r0, [r0, #32]
   12d5e:	f7f7 fd4e 	bl	a7fe <os_mbuf_copydata>
    if (rc == 0) {
   12d62:	b108      	cbz	r0, 12d68 <cbor_mbuf_reader_cpy+0x18>
        return true;
    }
    return false;
   12d64:	2000      	movs	r0, #0
}
   12d66:	bd08      	pop	{r3, pc}
        return true;
   12d68:	2001      	movs	r0, #1
   12d6a:	e7fc      	b.n	12d66 <cbor_mbuf_reader_cpy+0x16>

00012d6c <cbor_mbuf_reader_get8>:
{
   12d6c:	b510      	push	{r4, lr}
   12d6e:	b082      	sub	sp, #8
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   12d70:	f10d 0307 	add.w	r3, sp, #7
   12d74:	2201      	movs	r2, #1
   12d76:	69c4      	ldr	r4, [r0, #28]
   12d78:	4421      	add	r1, r4
   12d7a:	6a00      	ldr	r0, [r0, #32]
   12d7c:	f7f7 fd3f 	bl	a7fe <os_mbuf_copydata>
}
   12d80:	f89d 0007 	ldrb.w	r0, [sp, #7]
   12d84:	b002      	add	sp, #8
   12d86:	bd10      	pop	{r4, pc}

00012d88 <cbor_mbuf_reader_cmp>:
{
   12d88:	b508      	push	{r3, lr}
   12d8a:	4694      	mov	ip, r2
    return os_mbuf_cmpf(cb->m, offset + cb->init_off, buf, len) == 0;
   12d8c:	460a      	mov	r2, r1
   12d8e:	69c1      	ldr	r1, [r0, #28]
   12d90:	4461      	add	r1, ip
   12d92:	6a00      	ldr	r0, [r0, #32]
   12d94:	f7f7 fdb7 	bl	a906 <os_mbuf_cmpf>
}
   12d98:	fab0 f080 	clz	r0, r0
   12d9c:	0940      	lsrs	r0, r0, #5
   12d9e:	bd08      	pop	{r3, pc}

00012da0 <cbor_mbuf_reader_get64>:
{
   12da0:	b510      	push	{r4, lr}
   12da2:	b082      	sub	sp, #8
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   12da4:	466b      	mov	r3, sp
   12da6:	2208      	movs	r2, #8
   12da8:	69c4      	ldr	r4, [r0, #28]
   12daa:	4421      	add	r1, r4
   12dac:	6a00      	ldr	r0, [r0, #32]
   12dae:	f7f7 fd26 	bl	a7fe <os_mbuf_copydata>
}
   12db2:	9801      	ldr	r0, [sp, #4]
   12db4:	ba00      	rev	r0, r0
   12db6:	9900      	ldr	r1, [sp, #0]
   12db8:	ba09      	rev	r1, r1
   12dba:	b002      	add	sp, #8
   12dbc:	bd10      	pop	{r4, pc}

00012dbe <cbor_mbuf_reader_get32>:
{
   12dbe:	b510      	push	{r4, lr}
   12dc0:	b082      	sub	sp, #8
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   12dc2:	ab01      	add	r3, sp, #4
   12dc4:	2204      	movs	r2, #4
   12dc6:	69c4      	ldr	r4, [r0, #28]
   12dc8:	4421      	add	r1, r4
   12dca:	6a00      	ldr	r0, [r0, #32]
   12dcc:	f7f7 fd17 	bl	a7fe <os_mbuf_copydata>
}
   12dd0:	9801      	ldr	r0, [sp, #4]
   12dd2:	ba00      	rev	r0, r0
   12dd4:	b002      	add	sp, #8
   12dd6:	bd10      	pop	{r4, pc}

00012dd8 <cbor_mbuf_reader_get16>:
{
   12dd8:	b510      	push	{r4, lr}
   12dda:	b082      	sub	sp, #8
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   12ddc:	f10d 0306 	add.w	r3, sp, #6
   12de0:	2202      	movs	r2, #2
   12de2:	69c4      	ldr	r4, [r0, #28]
   12de4:	4421      	add	r1, r4
   12de6:	6a00      	ldr	r0, [r0, #32]
   12de8:	f7f7 fd09 	bl	a7fe <os_mbuf_copydata>
    return cbor_ntohs(val);
   12dec:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   12df0:	ba40      	rev16	r0, r0
}
   12df2:	b280      	uxth	r0, r0
   12df4:	b002      	add	sp, #8
   12df6:	bd10      	pop	{r4, pc}

00012df8 <cbor_mbuf_reader_init>:

void
cbor_mbuf_reader_init(struct cbor_mbuf_reader *cb, struct os_mbuf *m,
                      int initial_offset)
{
   12df8:	b508      	push	{r3, lr}
    struct os_mbuf_pkthdr *hdr;

    cb->r.get8 = &cbor_mbuf_reader_get8;
   12dfa:	4b0d      	ldr	r3, [pc, #52]	; (12e30 <cbor_mbuf_reader_init+0x38>)
   12dfc:	6003      	str	r3, [r0, #0]
    cb->r.get16 = &cbor_mbuf_reader_get16;
   12dfe:	4b0d      	ldr	r3, [pc, #52]	; (12e34 <cbor_mbuf_reader_init+0x3c>)
   12e00:	6043      	str	r3, [r0, #4]
    cb->r.get32 = &cbor_mbuf_reader_get32;
   12e02:	4b0d      	ldr	r3, [pc, #52]	; (12e38 <cbor_mbuf_reader_init+0x40>)
   12e04:	6083      	str	r3, [r0, #8]
    cb->r.get64 = &cbor_mbuf_reader_get64;
   12e06:	4b0d      	ldr	r3, [pc, #52]	; (12e3c <cbor_mbuf_reader_init+0x44>)
   12e08:	60c3      	str	r3, [r0, #12]
    cb->r.cmp = &cbor_mbuf_reader_cmp;
   12e0a:	4b0d      	ldr	r3, [pc, #52]	; (12e40 <cbor_mbuf_reader_init+0x48>)
   12e0c:	6103      	str	r3, [r0, #16]
    cb->r.cpy = &cbor_mbuf_reader_cpy;
   12e0e:	4b0d      	ldr	r3, [pc, #52]	; (12e44 <cbor_mbuf_reader_init+0x4c>)
   12e10:	6143      	str	r3, [r0, #20]

    assert(OS_MBUF_IS_PKTHDR(m));
   12e12:	794b      	ldrb	r3, [r1, #5]
   12e14:	2b07      	cmp	r3, #7
   12e16:	d905      	bls.n	12e24 <cbor_mbuf_reader_init+0x2c>
    hdr = OS_MBUF_PKTHDR(m);
    cb->m = m;
   12e18:	6201      	str	r1, [r0, #32]
    cb->init_off = initial_offset;
   12e1a:	61c2      	str	r2, [r0, #28]
    cb->r.message_size = hdr->omp_len - initial_offset;
   12e1c:	8a0b      	ldrh	r3, [r1, #16]
   12e1e:	1a9a      	subs	r2, r3, r2
   12e20:	6182      	str	r2, [r0, #24]
}
   12e22:	bd08      	pop	{r3, pc}
    assert(OS_MBUF_IS_PKTHDR(m));
   12e24:	2300      	movs	r3, #0
   12e26:	461a      	mov	r2, r3
   12e28:	4619      	mov	r1, r3
   12e2a:	4618      	mov	r0, r3
   12e2c:	f7f6 f90e 	bl	904c <__assert_func>
   12e30:	00012d6d 	.word	0x00012d6d
   12e34:	00012dd9 	.word	0x00012dd9
   12e38:	00012dbf 	.word	0x00012dbf
   12e3c:	00012da1 	.word	0x00012da1
   12e40:	00012d89 	.word	0x00012d89
   12e44:	00012d51 	.word	0x00012d51

00012e48 <cbor_mbuf_writer>:
#include <tinycbor/cbor.h>
#include <tinycbor/cbor_mbuf_writer.h>

int
cbor_mbuf_writer(struct cbor_encoder_writer *arg, const char *data, int len)
{
   12e48:	b538      	push	{r3, r4, r5, lr}
   12e4a:	4604      	mov	r4, r0
   12e4c:	4615      	mov	r5, r2
    int rc;
    struct cbor_mbuf_writer *cb = (struct cbor_mbuf_writer *) arg;

    rc = os_mbuf_append(cb->m, data, len);
   12e4e:	b292      	uxth	r2, r2
   12e50:	6880      	ldr	r0, [r0, #8]
   12e52:	f7f7 fc6e 	bl	a732 <os_mbuf_append>
    if (rc) {
   12e56:	b918      	cbnz	r0, 12e60 <cbor_mbuf_writer+0x18>
        return CborErrorOutOfMemory;
    }
    cb->enc.bytes_written += len;
   12e58:	6862      	ldr	r2, [r4, #4]
   12e5a:	442a      	add	r2, r5
   12e5c:	6062      	str	r2, [r4, #4]
    return CborNoError;
}
   12e5e:	bd38      	pop	{r3, r4, r5, pc}
        return CborErrorOutOfMemory;
   12e60:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   12e64:	e7fb      	b.n	12e5e <cbor_mbuf_writer+0x16>
	...

00012e68 <cbor_mbuf_writer_init>:


void
cbor_mbuf_writer_init(struct cbor_mbuf_writer *cb, struct os_mbuf *m)
{
    cb->m = m;
   12e68:	6081      	str	r1, [r0, #8]
    cb->enc.bytes_written = 0;
   12e6a:	2300      	movs	r3, #0
   12e6c:	6043      	str	r3, [r0, #4]
    cb->enc.write = &cbor_mbuf_writer;
   12e6e:	4b01      	ldr	r3, [pc, #4]	; (12e74 <cbor_mbuf_writer_init+0xc>)
   12e70:	6003      	str	r3, [r0, #0]
}
   12e72:	4770      	bx	lr
   12e74:	00012e49 	.word	0x00012e49

00012e78 <create_container>:

#ifdef __GNUC__
__attribute__((noinline))
#endif
static CborError create_container(CborEncoder *encoder, CborEncoder *container, size_t length, uint8_t shiftedMajorType)
{
   12e78:	b510      	push	{r4, lr}
   12e7a:	b084      	sub	sp, #16
   12e7c:	468c      	mov	ip, r1
    CborError err;
    container->writer = encoder->writer;
   12e7e:	6801      	ldr	r1, [r0, #0]
   12e80:	f8cc 1000 	str.w	r1, [ip]
    ++encoder->added;
   12e84:	6881      	ldr	r1, [r0, #8]
   12e86:	3101      	adds	r1, #1
   12e88:	6081      	str	r1, [r0, #8]
    container->added = 0;
   12e8a:	2100      	movs	r1, #0
   12e8c:	f8cc 1008 	str.w	r1, [ip, #8]

    cbor_static_assert(((MapType << MajorTypeShift) & CborIteratorFlag_ContainerIsMap) == CborIteratorFlag_ContainerIsMap);
    cbor_static_assert(((ArrayType << MajorTypeShift) & CborIteratorFlag_ContainerIsMap) == 0);
    container->flags = shiftedMajorType & CborIteratorFlag_ContainerIsMap;
   12e90:	f003 0120 	and.w	r1, r3, #32
   12e94:	f8cc 100c 	str.w	r1, [ip, #12]

    if (length == CborIndefiniteLength) {
   12e98:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   12e9c:	d10f      	bne.n	12ebe <create_container+0x46>
        container->flags |= CborIteratorFlag_UnknownLength;
   12e9e:	f041 0104 	orr.w	r1, r1, #4
   12ea2:	f8cc 100c 	str.w	r1, [ip, #12]
        err = append_byte_to_buffer(container, shiftedMajorType + IndefiniteLength);
   12ea6:	331f      	adds	r3, #31
   12ea8:	f88d 3000 	strb.w	r3, [sp]
    return encoder->writer->write(encoder->writer, data, len);
   12eac:	f8dc 0000 	ldr.w	r0, [ip]
   12eb0:	6803      	ldr	r3, [r0, #0]
   12eb2:	2201      	movs	r2, #1
   12eb4:	4669      	mov	r1, sp
   12eb6:	4798      	blx	r3
    }
    if (err && !isOomError(err))
        return err;

    return CborNoError;
}
   12eb8:	2000      	movs	r0, #0
   12eba:	b004      	add	sp, #16
   12ebc:	bd10      	pop	{r4, pc}
        err = encode_number_no_update(container, length, shiftedMajorType);
   12ebe:	2100      	movs	r1, #0
    v = cbor_htonll(v);
   12ec0:	ba10      	rev	r0, r2
    memcpy(where, &v, sizeof(v));
   12ec2:	9102      	str	r1, [sp, #8]
   12ec4:	9003      	str	r0, [sp, #12]
    if (ui < Value8Bit) {
   12ec6:	2a18      	cmp	r2, #24
   12ec8:	f171 0400 	sbcs.w	r4, r1, #0
   12ecc:	d20c      	bcs.n	12ee8 <create_container+0x70>
        *bufstart += shiftedMajorType;
   12ece:	eb03 6310 	add.w	r3, r3, r0, lsr #24
   12ed2:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8_t *bufstart = bufend - 1;
   12ed6:	f10d 010f 	add.w	r1, sp, #15
    return encoder->writer->write(encoder->writer, data, len);
   12eda:	f8dc 0000 	ldr.w	r0, [ip]
   12ede:	6803      	ldr	r3, [r0, #0]
   12ee0:	aa04      	add	r2, sp, #16
   12ee2:	1a52      	subs	r2, r2, r1
   12ee4:	4798      	blx	r3
    return append_to_buffer(encoder, bufstart, bufend - bufstart);
   12ee6:	e7e7      	b.n	12eb8 <create_container+0x40>
        if (ui > 0xffU)
   12ee8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   12eec:	f171 0000 	sbcs.w	r0, r1, #0
   12ef0:	d210      	bcs.n	12f14 <create_container+0x9c>
        unsigned more = 0;
   12ef2:	2000      	movs	r0, #0
        if (ui > 0xffffU)
   12ef4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   12ef8:	f171 0200 	sbcs.w	r2, r1, #0
   12efc:	d300      	bcc.n	12f00 <create_container+0x88>
            ++more;
   12efe:	3001      	adds	r0, #1
        bufstart -= (size_t)1 << more;
   12f00:	2101      	movs	r1, #1
   12f02:	fa01 f200 	lsl.w	r2, r1, r0
   12f06:	f10d 010f 	add.w	r1, sp, #15
   12f0a:	1a89      	subs	r1, r1, r2
        *bufstart = shiftedMajorType + Value8Bit + more;
   12f0c:	4403      	add	r3, r0
   12f0e:	3318      	adds	r3, #24
   12f10:	700b      	strb	r3, [r1, #0]
   12f12:	e7e2      	b.n	12eda <create_container+0x62>
            ++more;
   12f14:	2001      	movs	r0, #1
   12f16:	e7ed      	b.n	12ef4 <create_container+0x7c>

00012f18 <encode_string>:
{
   12f18:	b570      	push	{r4, r5, r6, lr}
   12f1a:	b084      	sub	sp, #16
   12f1c:	4605      	mov	r5, r0
   12f1e:	460c      	mov	r4, r1
   12f20:	461e      	mov	r6, r3
    CborError err = encode_number(encoder, length, shiftedMajorType);
   12f22:	2300      	movs	r3, #0
    ++encoder->added;
   12f24:	6881      	ldr	r1, [r0, #8]
   12f26:	3101      	adds	r1, #1
   12f28:	6081      	str	r1, [r0, #8]
    v = cbor_htonll(v);
   12f2a:	ba21      	rev	r1, r4
    memcpy(where, &v, sizeof(v));
   12f2c:	9302      	str	r3, [sp, #8]
   12f2e:	9103      	str	r1, [sp, #12]
    if (ui < Value8Bit) {
   12f30:	2c18      	cmp	r4, #24
   12f32:	f173 0000 	sbcs.w	r0, r3, #0
   12f36:	d211      	bcs.n	12f5c <encode_string+0x44>
        *bufstart += shiftedMajorType;
   12f38:	eb02 6211 	add.w	r2, r2, r1, lsr #24
   12f3c:	f88d 200f 	strb.w	r2, [sp, #15]
    uint8_t *bufstart = bufend - 1;
   12f40:	f10d 010f 	add.w	r1, sp, #15
    return encoder->writer->write(encoder->writer, data, len);
   12f44:	6828      	ldr	r0, [r5, #0]
   12f46:	6803      	ldr	r3, [r0, #0]
   12f48:	aa04      	add	r2, sp, #16
   12f4a:	1a52      	subs	r2, r2, r1
   12f4c:	4798      	blx	r3
   12f4e:	6828      	ldr	r0, [r5, #0]
   12f50:	6803      	ldr	r3, [r0, #0]
   12f52:	4622      	mov	r2, r4
   12f54:	4631      	mov	r1, r6
   12f56:	4798      	blx	r3
}
   12f58:	b004      	add	sp, #16
   12f5a:	bd70      	pop	{r4, r5, r6, pc}
        if (ui > 0xffU)
   12f5c:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   12f60:	f173 0100 	sbcs.w	r1, r3, #0
   12f64:	d212      	bcs.n	12f8c <encode_string+0x74>
        unsigned more = 0;
   12f66:	f04f 0c00 	mov.w	ip, #0
        if (ui > 0xffffU)
   12f6a:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   12f6e:	f173 0300 	sbcs.w	r3, r3, #0
   12f72:	d301      	bcc.n	12f78 <encode_string+0x60>
            ++more;
   12f74:	f10c 0c01 	add.w	ip, ip, #1
        bufstart -= (size_t)1 << more;
   12f78:	2101      	movs	r1, #1
   12f7a:	fa01 f10c 	lsl.w	r1, r1, ip
   12f7e:	f10d 000f 	add.w	r0, sp, #15
   12f82:	1a41      	subs	r1, r0, r1
        *bufstart = shiftedMajorType + Value8Bit + more;
   12f84:	4462      	add	r2, ip
   12f86:	3218      	adds	r2, #24
   12f88:	700a      	strb	r2, [r1, #0]
   12f8a:	e7db      	b.n	12f44 <encode_string+0x2c>
            ++more;
   12f8c:	f04f 0c01 	mov.w	ip, #1
   12f90:	e7eb      	b.n	12f6a <encode_string+0x52>

00012f92 <cbor_encoder_init>:
    encoder->writer = writer;
   12f92:	6001      	str	r1, [r0, #0]
    encoder->added = 0;
   12f94:	2300      	movs	r3, #0
   12f96:	6083      	str	r3, [r0, #8]
    encoder->flags = flags;
   12f98:	60c2      	str	r2, [r0, #12]
}
   12f9a:	4770      	bx	lr

00012f9c <cbor_encode_uint>:
{
   12f9c:	b510      	push	{r4, lr}
   12f9e:	b084      	sub	sp, #16
    ++encoder->added;
   12fa0:	6881      	ldr	r1, [r0, #8]
   12fa2:	3101      	adds	r1, #1
   12fa4:	6081      	str	r1, [r0, #8]
    v = cbor_htonll(v);
   12fa6:	ba11      	rev	r1, r2
   12fa8:	ba1c      	rev	r4, r3
    memcpy(where, &v, sizeof(v));
   12faa:	9402      	str	r4, [sp, #8]
   12fac:	9103      	str	r1, [sp, #12]
    if (ui < Value8Bit) {
   12fae:	2a18      	cmp	r2, #24
   12fb0:	f173 0400 	sbcs.w	r4, r3, #0
   12fb4:	d20c      	bcs.n	12fd0 <cbor_encode_uint+0x34>
        *bufstart += shiftedMajorType;
   12fb6:	f3c1 6107 	ubfx	r1, r1, #24, #8
   12fba:	f88d 100f 	strb.w	r1, [sp, #15]
    uint8_t *bufstart = bufend - 1;
   12fbe:	f10d 010f 	add.w	r1, sp, #15
    return encoder->writer->write(encoder->writer, data, len);
   12fc2:	6800      	ldr	r0, [r0, #0]
   12fc4:	6803      	ldr	r3, [r0, #0]
   12fc6:	aa04      	add	r2, sp, #16
   12fc8:	1a52      	subs	r2, r2, r1
   12fca:	4798      	blx	r3
}
   12fcc:	b004      	add	sp, #16
   12fce:	bd10      	pop	{r4, pc}
        if (ui > 0xffU)
   12fd0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   12fd4:	f173 0100 	sbcs.w	r1, r3, #0
   12fd8:	d21d      	bcs.n	13016 <cbor_encode_uint+0x7a>
        unsigned more = 0;
   12fda:	f04f 0c00 	mov.w	ip, #0
        if (ui > 0xffffU)
   12fde:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   12fe2:	f173 0100 	sbcs.w	r1, r3, #0
   12fe6:	d301      	bcc.n	12fec <cbor_encode_uint+0x50>
            ++more;
   12fe8:	f10c 0c01 	add.w	ip, ip, #1
        if (ui > 0xffffffffU)
   12fec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12ff0:	4291      	cmp	r1, r2
   12ff2:	f04f 0200 	mov.w	r2, #0
   12ff6:	eb72 0303 	sbcs.w	r3, r2, r3
   12ffa:	d201      	bcs.n	13000 <cbor_encode_uint+0x64>
            ++more;
   12ffc:	f10c 0c01 	add.w	ip, ip, #1
        bufstart -= (size_t)1 << more;
   13000:	2101      	movs	r1, #1
   13002:	fa01 f30c 	lsl.w	r3, r1, ip
   13006:	f10d 010f 	add.w	r1, sp, #15
   1300a:	1ac9      	subs	r1, r1, r3
        *bufstart = shiftedMajorType + Value8Bit + more;
   1300c:	f10c 0c18 	add.w	ip, ip, #24
   13010:	f881 c000 	strb.w	ip, [r1]
   13014:	e7d5      	b.n	12fc2 <cbor_encode_uint+0x26>
            ++more;
   13016:	f04f 0c01 	mov.w	ip, #1
   1301a:	e7e0      	b.n	12fde <cbor_encode_uint+0x42>

0001301c <cbor_encode_int>:
{
   1301c:	b510      	push	{r4, lr}
   1301e:	b084      	sub	sp, #16
    uint64_t ui = value >> 63;              /* extend sign to whole length */
   13020:	17d9      	asrs	r1, r3, #31
    uint8_t majorType = ui & 0x20;          /* extract major type */
   13022:	f001 0c20 	and.w	ip, r1, #32
    ui ^= value;                            /* complement negatives */
   13026:	404a      	eors	r2, r1
   13028:	404b      	eors	r3, r1
    ++encoder->added;
   1302a:	6881      	ldr	r1, [r0, #8]
   1302c:	3101      	adds	r1, #1
   1302e:	6081      	str	r1, [r0, #8]
    v = cbor_htonll(v);
   13030:	ba11      	rev	r1, r2
   13032:	ba1c      	rev	r4, r3
    memcpy(where, &v, sizeof(v));
   13034:	9402      	str	r4, [sp, #8]
   13036:	9103      	str	r1, [sp, #12]
    if (ui < Value8Bit) {
   13038:	2a18      	cmp	r2, #24
   1303a:	f173 0400 	sbcs.w	r4, r3, #0
   1303e:	d20c      	bcs.n	1305a <cbor_encode_int+0x3e>
        *bufstart += shiftedMajorType;
   13040:	eb0c 6111 	add.w	r1, ip, r1, lsr #24
   13044:	f88d 100f 	strb.w	r1, [sp, #15]
    uint8_t *bufstart = bufend - 1;
   13048:	f10d 010f 	add.w	r1, sp, #15
    return encoder->writer->write(encoder->writer, data, len);
   1304c:	6800      	ldr	r0, [r0, #0]
   1304e:	6803      	ldr	r3, [r0, #0]
   13050:	aa04      	add	r2, sp, #16
   13052:	1a52      	subs	r2, r2, r1
   13054:	4798      	blx	r3
}
   13056:	b004      	add	sp, #16
   13058:	bd10      	pop	{r4, pc}
        if (ui > 0xffU)
   1305a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   1305e:	f173 0100 	sbcs.w	r1, r3, #0
   13062:	d21e      	bcs.n	130a2 <cbor_encode_int+0x86>
        unsigned more = 0;
   13064:	f04f 0e00 	mov.w	lr, #0
        if (ui > 0xffffU)
   13068:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   1306c:	f173 0100 	sbcs.w	r1, r3, #0
   13070:	d301      	bcc.n	13076 <cbor_encode_int+0x5a>
            ++more;
   13072:	f10e 0e01 	add.w	lr, lr, #1
        if (ui > 0xffffffffU)
   13076:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1307a:	4291      	cmp	r1, r2
   1307c:	f04f 0200 	mov.w	r2, #0
   13080:	eb72 0303 	sbcs.w	r3, r2, r3
   13084:	d201      	bcs.n	1308a <cbor_encode_int+0x6e>
            ++more;
   13086:	f10e 0e01 	add.w	lr, lr, #1
        bufstart -= (size_t)1 << more;
   1308a:	2101      	movs	r1, #1
   1308c:	fa01 f30e 	lsl.w	r3, r1, lr
   13090:	f10d 010f 	add.w	r1, sp, #15
   13094:	1ac9      	subs	r1, r1, r3
        *bufstart = shiftedMajorType + Value8Bit + more;
   13096:	44f4      	add	ip, lr
   13098:	f10c 0c18 	add.w	ip, ip, #24
   1309c:	f881 c000 	strb.w	ip, [r1]
   130a0:	e7d4      	b.n	1304c <cbor_encode_int+0x30>
            ++more;
   130a2:	f04f 0e01 	mov.w	lr, #1
   130a6:	e7df      	b.n	13068 <cbor_encode_int+0x4c>

000130a8 <cbor_encode_simple_value>:
    if (value >= HalfPrecisionFloat && value <= Break)
   130a8:	f1a1 0319 	sub.w	r3, r1, #25
   130ac:	b2db      	uxtb	r3, r3
   130ae:	2b06      	cmp	r3, #6
   130b0:	d925      	bls.n	130fe <cbor_encode_simple_value+0x56>
{
   130b2:	b500      	push	{lr}
   130b4:	b085      	sub	sp, #20
    return encode_number(encoder, value, SimpleTypesType << MajorTypeShift);
   130b6:	2200      	movs	r2, #0
    ++encoder->added;
   130b8:	6883      	ldr	r3, [r0, #8]
   130ba:	3301      	adds	r3, #1
   130bc:	6083      	str	r3, [r0, #8]
    v = cbor_htonll(v);
   130be:	ba0b      	rev	r3, r1
    memcpy(where, &v, sizeof(v));
   130c0:	9202      	str	r2, [sp, #8]
   130c2:	9303      	str	r3, [sp, #12]
    if (ui < Value8Bit) {
   130c4:	2918      	cmp	r1, #24
   130c6:	f172 0200 	sbcs.w	r2, r2, #0
   130ca:	d20e      	bcs.n	130ea <cbor_encode_simple_value+0x42>
        *bufstart += shiftedMajorType;
   130cc:	f3c3 6307 	ubfx	r3, r3, #24, #8
   130d0:	3b20      	subs	r3, #32
   130d2:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8_t *bufstart = bufend - 1;
   130d6:	f10d 010f 	add.w	r1, sp, #15
    return encoder->writer->write(encoder->writer, data, len);
   130da:	6800      	ldr	r0, [r0, #0]
   130dc:	6803      	ldr	r3, [r0, #0]
   130de:	aa04      	add	r2, sp, #16
   130e0:	1a52      	subs	r2, r2, r1
   130e2:	4798      	blx	r3
}
   130e4:	b005      	add	sp, #20
   130e6:	f85d fb04 	ldr.w	pc, [sp], #4
        unsigned more = 0;
   130ea:	2300      	movs	r3, #0
        bufstart -= (size_t)1 << more;
   130ec:	2101      	movs	r1, #1
   130ee:	fa01 f203 	lsl.w	r2, r1, r3
   130f2:	f10d 010f 	add.w	r1, sp, #15
   130f6:	1a89      	subs	r1, r1, r2
        *bufstart = shiftedMajorType + Value8Bit + more;
   130f8:	3b08      	subs	r3, #8
   130fa:	700b      	strb	r3, [r1, #0]
   130fc:	e7ed      	b.n	130da <cbor_encode_simple_value+0x32>
        return CborErrorIllegalSimpleType;
   130fe:	f44f 7083 	mov.w	r0, #262	; 0x106
}
   13102:	4770      	bx	lr

00013104 <cbor_encode_byte_string>:
{
   13104:	b508      	push	{r3, lr}
   13106:	460b      	mov	r3, r1
   13108:	4611      	mov	r1, r2
    return encode_string(encoder, length, ByteStringType << MajorTypeShift, string);
   1310a:	2240      	movs	r2, #64	; 0x40
   1310c:	f7ff ff04 	bl	12f18 <encode_string>
}
   13110:	bd08      	pop	{r3, pc}

00013112 <cbor_encode_text_string>:
{
   13112:	b508      	push	{r3, lr}
   13114:	460b      	mov	r3, r1
   13116:	4611      	mov	r1, r2
    return encode_string(encoder, length, TextStringType << MajorTypeShift, string);
   13118:	2260      	movs	r2, #96	; 0x60
   1311a:	f7ff fefd 	bl	12f18 <encode_string>
}
   1311e:	bd08      	pop	{r3, pc}

00013120 <cbor_encoder_create_array>:
 * length instead.
 *
 * \sa cbor_encoder_create_map
 */
CborError cbor_encoder_create_array(CborEncoder *encoder, CborEncoder *arrayEncoder, size_t length)
{
   13120:	b508      	push	{r3, lr}
    return create_container(encoder, arrayEncoder, length, ArrayType << MajorTypeShift);
   13122:	2380      	movs	r3, #128	; 0x80
   13124:	f7ff fea8 	bl	12e78 <create_container>
}
   13128:	bd08      	pop	{r3, pc}

0001312a <cbor_encoder_create_map>:
 * value, this function returns error CborErrorDataTooLarge.
 *
 * \sa cbor_encoder_create_array
 */
CborError cbor_encoder_create_map(CborEncoder *encoder, CborEncoder *mapEncoder, size_t length)
{
   1312a:	b508      	push	{r3, lr}
    if (length != CborIndefiniteLength && length > SIZE_MAX / 2)
   1312c:	f102 4c00 	add.w	ip, r2, #2147483648	; 0x80000000
   13130:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   13134:	459c      	cmp	ip, r3
   13136:	d303      	bcc.n	13140 <cbor_encoder_create_map+0x16>
        return CborErrorDataTooLarge;
    return create_container(encoder, mapEncoder, length, MapType << MajorTypeShift);
   13138:	23a0      	movs	r3, #160	; 0xa0
   1313a:	f7ff fe9d 	bl	12e78 <create_container>
}
   1313e:	bd08      	pop	{r3, pc}
        return CborErrorDataTooLarge;
   13140:	f44f 6080 	mov.w	r0, #1024	; 0x400
   13144:	e7fb      	b.n	1313e <cbor_encoder_create_map+0x14>

00013146 <cbor_encoder_close_container>:
 *
 * \sa cbor_encoder_create_array(), cbor_encoder_create_map()
 */
CborError cbor_encoder_close_container(CborEncoder *encoder, const CborEncoder *containerEncoder)
{
    encoder->writer = containerEncoder->writer;
   13146:	680b      	ldr	r3, [r1, #0]
   13148:	6003      	str	r3, [r0, #0]

    if (containerEncoder->flags & CborIteratorFlag_UnknownLength)
   1314a:	68cb      	ldr	r3, [r1, #12]
   1314c:	f013 0f04 	tst.w	r3, #4
   13150:	d101      	bne.n	13156 <cbor_encoder_close_container+0x10>
        return append_byte_to_buffer(encoder, BreakByte);
    return CborNoError;
   13152:	2000      	movs	r0, #0
}
   13154:	4770      	bx	lr
{
   13156:	b500      	push	{lr}
   13158:	b083      	sub	sp, #12
        return append_byte_to_buffer(encoder, BreakByte);
   1315a:	23ff      	movs	r3, #255	; 0xff
   1315c:	f88d 3007 	strb.w	r3, [sp, #7]
    return encoder->writer->write(encoder->writer, data, len);
   13160:	6800      	ldr	r0, [r0, #0]
   13162:	6803      	ldr	r3, [r0, #0]
   13164:	2201      	movs	r2, #1
   13166:	f10d 0107 	add.w	r1, sp, #7
   1316a:	4798      	blx	r3
}
   1316c:	b003      	add	sp, #12
   1316e:	f85d fb04 	ldr.w	pc, [sp], #4

00013172 <is_fixed_type>:
    return CborNoError;
}

static bool is_fixed_type(uint8_t type)
{
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
   13172:	2860      	cmp	r0, #96	; 0x60
   13174:	d009      	beq.n	1318a <is_fixed_type+0x18>
   13176:	2840      	cmp	r0, #64	; 0x40
   13178:	d009      	beq.n	1318e <is_fixed_type+0x1c>
   1317a:	2880      	cmp	r0, #128	; 0x80
   1317c:	d009      	beq.n	13192 <is_fixed_type+0x20>
   1317e:	28a0      	cmp	r0, #160	; 0xa0
   13180:	d001      	beq.n	13186 <is_fixed_type+0x14>
   13182:	2001      	movs	r0, #1
           type != CborMapType;
}
   13184:	4770      	bx	lr
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
   13186:	2000      	movs	r0, #0
   13188:	4770      	bx	lr
   1318a:	2000      	movs	r0, #0
   1318c:	4770      	bx	lr
   1318e:	2000      	movs	r0, #0
   13190:	4770      	bx	lr
   13192:	2000      	movs	r0, #0
   13194:	4770      	bx	lr

00013196 <iterate_noop>:
    (void)d;
    (void)dst;
    (void)src_offset;
    (void)len;
    return true;
}
   13196:	2001      	movs	r0, #1
   13198:	4770      	bx	lr

0001319a <preparse_value>:
{
   1319a:	b570      	push	{r4, r5, r6, lr}
    const CborParser *parser = it->parser;
   1319c:	6805      	ldr	r5, [r0, #0]
    it->type = CborInvalidType;
   1319e:	23ff      	movs	r3, #255	; 0xff
   131a0:	7383      	strb	r3, [r0, #14]
    if (it->offset == parser->end)
   131a2:	6841      	ldr	r1, [r0, #4]
   131a4:	686b      	ldr	r3, [r5, #4]
   131a6:	4299      	cmp	r1, r3
   131a8:	f000 8089 	beq.w	132be <preparse_value+0x124>
   131ac:	4604      	mov	r4, r0
    uint8_t descriptor = parser->d->get8(parser->d, it->offset);
   131ae:	6828      	ldr	r0, [r5, #0]
   131b0:	6803      	ldr	r3, [r0, #0]
   131b2:	4798      	blx	r3
    uint8_t type = descriptor & MajorTypeMask;
   131b4:	f000 06e0 	and.w	r6, r0, #224	; 0xe0
    it->type = type;
   131b8:	73a6      	strb	r6, [r4, #14]
    it->flags = 0;
   131ba:	2300      	movs	r3, #0
   131bc:	73e3      	strb	r3, [r4, #15]
    it->extra = (descriptor &= SmallValueMask);
   131be:	f000 031f 	and.w	r3, r0, #31
   131c2:	81a3      	strh	r3, [r4, #12]
    if (descriptor > Value64Bit) {
   131c4:	2b1b      	cmp	r3, #27
   131c6:	d91d      	bls.n	13204 <preparse_value+0x6a>
        if (unlikely(descriptor != IndefiniteLength))
   131c8:	2b1f      	cmp	r3, #31
   131ca:	d10b      	bne.n	131e4 <preparse_value+0x4a>
        if (likely(!is_fixed_type(type))) {
   131cc:	4630      	mov	r0, r6
   131ce:	f7ff ffd0 	bl	13172 <is_fixed_type>
   131d2:	f080 0001 	eor.w	r0, r0, #1
   131d6:	f010 0fff 	tst.w	r0, #255	; 0xff
   131da:	d00b      	beq.n	131f4 <preparse_value+0x5a>
            it->flags |= CborIteratorFlag_UnknownLength;
   131dc:	2304      	movs	r3, #4
   131de:	73e3      	strb	r3, [r4, #15]
            return CborNoError;
   131e0:	2000      	movs	r0, #0
}
   131e2:	bd70      	pop	{r4, r5, r6, pc}
            return type == CborSimpleType ? CborErrorUnknownType : CborErrorIllegalNumber;
   131e4:	2ee0      	cmp	r6, #224	; 0xe0
   131e6:	d002      	beq.n	131ee <preparse_value+0x54>
   131e8:	f240 1005 	movw	r0, #261	; 0x105
   131ec:	e7f9      	b.n	131e2 <preparse_value+0x48>
   131ee:	f240 1003 	movw	r0, #259	; 0x103
   131f2:	e7f6      	b.n	131e2 <preparse_value+0x48>
        return type == CborSimpleType ? CborErrorUnexpectedBreak : CborErrorIllegalNumber;
   131f4:	2ee0      	cmp	r6, #224	; 0xe0
   131f6:	d002      	beq.n	131fe <preparse_value+0x64>
   131f8:	f240 1005 	movw	r0, #261	; 0x105
   131fc:	e7f1      	b.n	131e2 <preparse_value+0x48>
   131fe:	f44f 7081 	mov.w	r0, #258	; 0x102
   13202:	e7ee      	b.n	131e2 <preparse_value+0x48>
    size_t bytesNeeded = descriptor < Value8Bit ? 0 : (1 << (descriptor - Value8Bit));
   13204:	2b17      	cmp	r3, #23
   13206:	d91a      	bls.n	1323e <preparse_value+0xa4>
   13208:	f1a3 0118 	sub.w	r1, r3, #24
   1320c:	2201      	movs	r2, #1
   1320e:	408a      	lsls	r2, r1
    if (bytesNeeded + 1 > (size_t)(parser->end - it->offset))
   13210:	3201      	adds	r2, #1
   13212:	6868      	ldr	r0, [r5, #4]
   13214:	6861      	ldr	r1, [r4, #4]
   13216:	1a40      	subs	r0, r0, r1
   13218:	4282      	cmp	r2, r0
   1321a:	d853      	bhi.n	132c4 <preparse_value+0x12a>
    uint8_t majortype = type >> MajorTypeShift;
   1321c:	0972      	lsrs	r2, r6, #5
    if (majortype == NegativeIntegerType) {
   1321e:	2e20      	cmp	r6, #32
   13220:	d00f      	beq.n	13242 <preparse_value+0xa8>
    } else if (majortype == SimpleTypesType) {
   13222:	2a07      	cmp	r2, #7
   13224:	d012      	beq.n	1324c <preparse_value+0xb2>
    if (descriptor < Value8Bit)
   13226:	2b17      	cmp	r3, #23
   13228:	d94f      	bls.n	132ca <preparse_value+0x130>
    if (descriptor == Value8Bit)
   1322a:	2b18      	cmp	r3, #24
   1322c:	d039      	beq.n	132a2 <preparse_value+0x108>
    else if (descriptor == Value16Bit)
   1322e:	2b19      	cmp	r3, #25
   13230:	d03e      	beq.n	132b0 <preparse_value+0x116>
        it->flags |= CborIteratorFlag_IntegerValueTooLarge;     /* Value32Bit or Value64Bit */
   13232:	7be3      	ldrb	r3, [r4, #15]
   13234:	f043 0301 	orr.w	r3, r3, #1
   13238:	73e3      	strb	r3, [r4, #15]
    return CborNoError;
   1323a:	2000      	movs	r0, #0
   1323c:	e7d1      	b.n	131e2 <preparse_value+0x48>
    size_t bytesNeeded = descriptor < Value8Bit ? 0 : (1 << (descriptor - Value8Bit));
   1323e:	2200      	movs	r2, #0
   13240:	e7e6      	b.n	13210 <preparse_value+0x76>
        it->flags |= CborIteratorFlag_NegativeInteger;
   13242:	2202      	movs	r2, #2
   13244:	73e2      	strb	r2, [r4, #15]
        it->type = CborIntegerType;
   13246:	2200      	movs	r2, #0
   13248:	73a2      	strb	r2, [r4, #14]
   1324a:	e7ec      	b.n	13226 <preparse_value+0x8c>
        switch (descriptor) {
   1324c:	3b14      	subs	r3, #20
   1324e:	2b0b      	cmp	r3, #11
   13250:	d812      	bhi.n	13278 <preparse_value+0xde>
   13252:	e8df f003 	tbb	[pc, r3]
   13256:	0d06      	.short	0x0d06
   13258:	0d130d0d 	.word	0x0d130d0d
   1325c:	20200b0b 	.word	0x20200b0b
   13260:	2020      	.short	0x2020
            it->extra = false;
   13262:	2300      	movs	r3, #0
   13264:	81a3      	strh	r3, [r4, #12]
            it->type = CborBooleanType;
   13266:	23f5      	movs	r3, #245	; 0xf5
   13268:	73a3      	strb	r3, [r4, #14]
            break;
   1326a:	e005      	b.n	13278 <preparse_value+0xde>
            it->flags |= CborIteratorFlag_IntegerValueTooLarge;
   1326c:	2301      	movs	r3, #1
   1326e:	73e3      	strb	r3, [r4, #15]
            it->type = parser->d->get8(parser->d, it->offset);
   13270:	6828      	ldr	r0, [r5, #0]
   13272:	6803      	ldr	r3, [r0, #0]
   13274:	4798      	blx	r3
   13276:	73a0      	strb	r0, [r4, #14]
        return CborNoError;
   13278:	2000      	movs	r0, #0
   1327a:	e7b2      	b.n	131e2 <preparse_value+0x48>
            it->extra = parser->d->get8(parser->d, it->offset + 1);
   1327c:	6828      	ldr	r0, [r5, #0]
   1327e:	6803      	ldr	r3, [r0, #0]
   13280:	3101      	adds	r1, #1
   13282:	4798      	blx	r3
   13284:	b283      	uxth	r3, r0
   13286:	81a3      	strh	r3, [r4, #12]
            if (unlikely(it->extra < 32)) {
   13288:	2b1f      	cmp	r3, #31
   1328a:	d8f5      	bhi.n	13278 <preparse_value+0xde>
                it->type = CborInvalidType;
   1328c:	23ff      	movs	r3, #255	; 0xff
   1328e:	73a3      	strb	r3, [r4, #14]
                return CborErrorIllegalSimpleType;
   13290:	f44f 7083 	mov.w	r0, #262	; 0x106
   13294:	e7a5      	b.n	131e2 <preparse_value+0x48>
            assert(false);  /* these conditions can't be reached */
   13296:	2300      	movs	r3, #0
   13298:	461a      	mov	r2, r3
   1329a:	4619      	mov	r1, r3
   1329c:	4618      	mov	r0, r3
   1329e:	f7f5 fed5 	bl	904c <__assert_func>
        it->extra = parser->d->get8(parser->d, it->offset + 1);
   132a2:	6828      	ldr	r0, [r5, #0]
   132a4:	6803      	ldr	r3, [r0, #0]
   132a6:	3101      	adds	r1, #1
   132a8:	4798      	blx	r3
   132aa:	81a0      	strh	r0, [r4, #12]
    return CborNoError;
   132ac:	2000      	movs	r0, #0
   132ae:	e798      	b.n	131e2 <preparse_value+0x48>
        it->extra = parser->d->get16(parser->d, it->offset + 1);
   132b0:	6828      	ldr	r0, [r5, #0]
   132b2:	6843      	ldr	r3, [r0, #4]
   132b4:	3101      	adds	r1, #1
   132b6:	4798      	blx	r3
   132b8:	81a0      	strh	r0, [r4, #12]
    return CborNoError;
   132ba:	2000      	movs	r0, #0
   132bc:	e791      	b.n	131e2 <preparse_value+0x48>
        return CborErrorUnexpectedEOF;
   132be:	f240 1001 	movw	r0, #257	; 0x101
   132c2:	e78e      	b.n	131e2 <preparse_value+0x48>
        return CborErrorUnexpectedEOF;
   132c4:	f240 1001 	movw	r0, #257	; 0x101
   132c8:	e78b      	b.n	131e2 <preparse_value+0x48>
        return CborNoError;
   132ca:	2000      	movs	r0, #0
   132cc:	e789      	b.n	131e2 <preparse_value+0x48>

000132ce <preparse_next_value>:
{
   132ce:	b510      	push	{r4, lr}
   132d0:	4604      	mov	r4, r0
    if (it->remaining != UINT32_MAX) {
   132d2:	6880      	ldr	r0, [r0, #8]
   132d4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   132d8:	d00c      	beq.n	132f4 <preparse_next_value+0x26>
        if (it->type != CborTagType && !--it->remaining) {
   132da:	7ba2      	ldrb	r2, [r4, #14]
   132dc:	2ac0      	cmp	r2, #192	; 0xc0
   132de:	d002      	beq.n	132e6 <preparse_next_value+0x18>
   132e0:	3801      	subs	r0, #1
   132e2:	60a0      	str	r0, [r4, #8]
   132e4:	b118      	cbz	r0, 132ee <preparse_next_value+0x20>
    return preparse_value(it);
   132e6:	4620      	mov	r0, r4
   132e8:	f7ff ff57 	bl	1319a <preparse_value>
}
   132ec:	bd10      	pop	{r4, pc}
            it->type = CborInvalidType;
   132ee:	23ff      	movs	r3, #255	; 0xff
   132f0:	73a3      	strb	r3, [r4, #14]
            return CborNoError;
   132f2:	e7fb      	b.n	132ec <preparse_next_value+0x1e>
    } else if (it->remaining == UINT32_MAX && it->offset != it->parser->end &&
   132f4:	6861      	ldr	r1, [r4, #4]
   132f6:	6823      	ldr	r3, [r4, #0]
   132f8:	685a      	ldr	r2, [r3, #4]
   132fa:	4291      	cmp	r1, r2
   132fc:	d0f3      	beq.n	132e6 <preparse_next_value+0x18>
        it->parser->d->get8(it->parser->d, it->offset) == (uint8_t)BreakByte) {
   132fe:	6818      	ldr	r0, [r3, #0]
   13300:	6803      	ldr	r3, [r0, #0]
   13302:	4798      	blx	r3
    } else if (it->remaining == UINT32_MAX && it->offset != it->parser->end &&
   13304:	28ff      	cmp	r0, #255	; 0xff
   13306:	d1ee      	bne.n	132e6 <preparse_next_value+0x18>
        ++it->offset;
   13308:	6863      	ldr	r3, [r4, #4]
   1330a:	3301      	adds	r3, #1
   1330c:	6063      	str	r3, [r4, #4]
        it->type = CborInvalidType;
   1330e:	23ff      	movs	r3, #255	; 0xff
   13310:	73a3      	strb	r3, [r4, #14]
        it->remaining = 0;
   13312:	2000      	movs	r0, #0
   13314:	60a0      	str	r0, [r4, #8]
        return CborNoError;
   13316:	e7e9      	b.n	132ec <preparse_next_value+0x1e>

00013318 <extract_length>:
{
   13318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1331a:	4607      	mov	r7, r0
   1331c:	460c      	mov	r4, r1
   1331e:	4615      	mov	r5, r2
    return cbor_ntohll(result);
}

static inline CborError extract_number(const CborParser *p, int *offset, uint64_t *len)
{
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   13320:	6800      	ldr	r0, [r0, #0]
   13322:	6803      	ldr	r3, [r0, #0]
   13324:	6809      	ldr	r1, [r1, #0]
   13326:	4798      	blx	r3
   13328:	f000 031f 	and.w	r3, r0, #31
    ++*offset;
   1332c:	6822      	ldr	r2, [r4, #0]
   1332e:	3201      	adds	r2, #1
   13330:	6022      	str	r2, [r4, #0]
    *len = 1;
    if (additional_information < Value8Bit) {
   13332:	2b17      	cmp	r3, #23
   13334:	d914      	bls.n	13360 <extract_length+0x48>
        *len = additional_information;
        return CborNoError;
    }
    if (unlikely(additional_information > Value64Bit))
   13336:	2b1b      	cmp	r3, #27
   13338:	d82e      	bhi.n	13398 <extract_length+0x80>
        return CborErrorIllegalNumber;

    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   1333a:	3b18      	subs	r3, #24
   1333c:	2601      	movs	r6, #1
   1333e:	409e      	lsls	r6, r3
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   13340:	687b      	ldr	r3, [r7, #4]
   13342:	6821      	ldr	r1, [r4, #0]
   13344:	1a5b      	subs	r3, r3, r1
   13346:	429e      	cmp	r6, r3
   13348:	d82b      	bhi.n	133a2 <extract_length+0x8a>
        return CborErrorUnexpectedEOF;
    } else if (bytesNeeded == 1) {
   1334a:	2e01      	cmp	r6, #1
   1334c:	d00b      	beq.n	13366 <extract_length+0x4e>
        *len = p->d->get8(p->d, *offset);
    } else if (bytesNeeded == 2) {
   1334e:	2e02      	cmp	r6, #2
   13350:	d016      	beq.n	13380 <extract_length+0x68>
        *len =  p->d->get16(p->d, *offset);
    } else if (bytesNeeded == 4) {
   13352:	2e04      	cmp	r6, #4
   13354:	d01a      	beq.n	1338c <extract_length+0x74>
        *len =  p->d->get32(p->d, *offset);
    } else {
        *len =  p->d->get64(p->d, *offset);
   13356:	6838      	ldr	r0, [r7, #0]
   13358:	68c3      	ldr	r3, [r0, #12]
   1335a:	4798      	blx	r3
   1335c:	4603      	mov	r3, r0
   1335e:	e007      	b.n	13370 <extract_length+0x58>
        *len = additional_information;
   13360:	2000      	movs	r0, #0
   13362:	4601      	mov	r1, r0
        return CborNoError;
   13364:	e008      	b.n	13378 <extract_length+0x60>
        *len = p->d->get8(p->d, *offset);
   13366:	6838      	ldr	r0, [r7, #0]
   13368:	6803      	ldr	r3, [r0, #0]
   1336a:	4798      	blx	r3
   1336c:	4603      	mov	r3, r0
   1336e:	2100      	movs	r1, #0
    }
    *offset += bytesNeeded;
   13370:	6822      	ldr	r2, [r4, #0]
   13372:	4432      	add	r2, r6
   13374:	6022      	str	r2, [r4, #0]
    return CborNoError;
   13376:	2000      	movs	r0, #0
    if (err) {
   13378:	b9c0      	cbnz	r0, 133ac <extract_length+0x94>
    *len = v;
   1337a:	602b      	str	r3, [r5, #0]
    if (v != *len)
   1337c:	b9c9      	cbnz	r1, 133b2 <extract_length+0x9a>
}
   1337e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        *len =  p->d->get16(p->d, *offset);
   13380:	6838      	ldr	r0, [r7, #0]
   13382:	6843      	ldr	r3, [r0, #4]
   13384:	4798      	blx	r3
   13386:	4603      	mov	r3, r0
   13388:	2100      	movs	r1, #0
   1338a:	e7f1      	b.n	13370 <extract_length+0x58>
        *len =  p->d->get32(p->d, *offset);
   1338c:	6838      	ldr	r0, [r7, #0]
   1338e:	6883      	ldr	r3, [r0, #8]
   13390:	4798      	blx	r3
   13392:	4603      	mov	r3, r0
   13394:	2100      	movs	r1, #0
   13396:	e7eb      	b.n	13370 <extract_length+0x58>
    *len = 1;
   13398:	2301      	movs	r3, #1
   1339a:	2100      	movs	r1, #0
        return CborErrorIllegalNumber;
   1339c:	f240 1005 	movw	r0, #261	; 0x105
   133a0:	e7ea      	b.n	13378 <extract_length+0x60>
    *len = 1;
   133a2:	2301      	movs	r3, #1
   133a4:	2100      	movs	r1, #0
        return CborErrorUnexpectedEOF;
   133a6:	f240 1001 	movw	r0, #257	; 0x101
   133aa:	e7e5      	b.n	13378 <extract_length+0x60>
        *len = 0;
   133ac:	2300      	movs	r3, #0
   133ae:	602b      	str	r3, [r5, #0]
        return err;
   133b0:	e7e5      	b.n	1337e <extract_length+0x66>
        return CborErrorDataTooLarge;
   133b2:	f44f 6080 	mov.w	r0, #1024	; 0x400
   133b6:	e7e2      	b.n	1337e <extract_length+0x66>

000133b8 <iterate_string_chunks>:

static CborError iterate_string_chunks(const CborValue *value, char *buffer, size_t *buflen,
                                       bool *result, CborValue *next, IterateFunction func)
{
   133b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   133bc:	b085      	sub	sp, #20
   133be:	4604      	mov	r4, r0
   133c0:	4689      	mov	r9, r1
   133c2:	4616      	mov	r6, r2
   133c4:	461d      	mov	r5, r3
{ return value->type == CborByteStringType; }
   133c6:	7b83      	ldrb	r3, [r0, #14]
    assert(cbor_value_is_byte_string(value) || cbor_value_is_text_string(value));
   133c8:	2b40      	cmp	r3, #64	; 0x40
   133ca:	d001      	beq.n	133d0 <iterate_string_chunks+0x18>
   133cc:	2b60      	cmp	r3, #96	; 0x60
   133ce:	d10c      	bne.n	133ea <iterate_string_chunks+0x32>

    size_t total;
    CborError err;
    int offset = value->offset;
   133d0:	6863      	ldr	r3, [r4, #4]
   133d2:	9302      	str	r3, [sp, #8]
{ return (value->flags & CborIteratorFlag_UnknownLength) == 0; }
   133d4:	7be2      	ldrb	r2, [r4, #15]
    if (cbor_value_is_length_known(value)) {
   133d6:	f012 0f04 	tst.w	r2, #4
   133da:	d00c      	beq.n	133f6 <iterate_string_chunks+0x3e>
        else
            *result = false;
        offset += total;
    } else {
        /* chunked */
        ++offset;
   133dc:	3301      	adds	r3, #1
   133de:	9302      	str	r3, [sp, #8]
        total = 0;
   133e0:	2300      	movs	r3, #0
   133e2:	9303      	str	r3, [sp, #12]
        *result = true;
   133e4:	2301      	movs	r3, #1
   133e6:	702b      	strb	r3, [r5, #0]
   133e8:	e048      	b.n	1347c <iterate_string_chunks+0xc4>
    assert(cbor_value_is_byte_string(value) || cbor_value_is_text_string(value));
   133ea:	2300      	movs	r3, #0
   133ec:	461a      	mov	r2, r3
   133ee:	4619      	mov	r1, r3
   133f0:	4618      	mov	r0, r3
   133f2:	f7f5 fe2b 	bl	904c <__assert_func>
        err = extract_length(value->parser, &offset, &total);
   133f6:	aa03      	add	r2, sp, #12
   133f8:	a902      	add	r1, sp, #8
   133fa:	6820      	ldr	r0, [r4, #0]
   133fc:	f7ff ff8c 	bl	13318 <extract_length>
        if (err)
   13400:	4603      	mov	r3, r0
   13402:	2800      	cmp	r0, #0
   13404:	d178      	bne.n	134f8 <iterate_string_chunks+0x140>
        if (total > (size_t)(value->parser->end - offset))
   13406:	6820      	ldr	r0, [r4, #0]
   13408:	6843      	ldr	r3, [r0, #4]
   1340a:	9a02      	ldr	r2, [sp, #8]
   1340c:	1a99      	subs	r1, r3, r2
   1340e:	9b03      	ldr	r3, [sp, #12]
   13410:	4299      	cmp	r1, r3
   13412:	f0c0 8084 	bcc.w	1351e <iterate_string_chunks+0x166>
        if (total <= *buflen)
   13416:	6831      	ldr	r1, [r6, #0]
   13418:	428b      	cmp	r3, r1
   1341a:	d81e      	bhi.n	1345a <iterate_string_chunks+0xa2>
            *result = !!func(value->parser->d, buffer, offset, total);
   1341c:	4649      	mov	r1, r9
   1341e:	6800      	ldr	r0, [r0, #0]
   13420:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   13422:	47b8      	blx	r7
   13424:	3800      	subs	r0, #0
   13426:	bf18      	it	ne
   13428:	2001      	movne	r0, #1
   1342a:	7028      	strb	r0, [r5, #0]
        offset += total;
   1342c:	9b02      	ldr	r3, [sp, #8]
   1342e:	9a03      	ldr	r2, [sp, #12]
   13430:	4413      	add	r3, r2
   13432:	9302      	str	r3, [sp, #8]
            total = newTotal;
        }
    }

    /* is there enough room for the ending NUL byte? */
    if (*result && *buflen > total) {
   13434:	782b      	ldrb	r3, [r5, #0]
   13436:	b14b      	cbz	r3, 1344c <iterate_string_chunks+0x94>
   13438:	6832      	ldr	r2, [r6, #0]
   1343a:	9b03      	ldr	r3, [sp, #12]
   1343c:	429a      	cmp	r2, r3
   1343e:	d905      	bls.n	1344c <iterate_string_chunks+0x94>
        /* we are just trying to write a NULL byte here,, but this is hard
         * because this is called by function pointer with an abstract
         * reader.  Since this is the output buffer, we can assume that if
         * we have a valid buffer its ok to write a NULL here  */
        if(buffer) {
   13440:	f1b9 0f00 	cmp.w	r9, #0
   13444:	d002      	beq.n	1344c <iterate_string_chunks+0x94>
            *(buffer + total) = '\0';
   13446:	2200      	movs	r2, #0
   13448:	f809 2003 	strb.w	r2, [r9, r3]
        }
    }
    *buflen = total;
   1344c:	9b03      	ldr	r3, [sp, #12]
   1344e:	6033      	str	r3, [r6, #0]

    if (next) {
   13450:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13452:	2b00      	cmp	r3, #0
   13454:	d157      	bne.n	13506 <iterate_string_chunks+0x14e>
        *next = *value;
        next->offset = offset;
        return preparse_next_value(next);
    }
    return CborNoError;
   13456:	2300      	movs	r3, #0
   13458:	e04e      	b.n	134f8 <iterate_string_chunks+0x140>
            *result = false;
   1345a:	2300      	movs	r3, #0
   1345c:	702b      	strb	r3, [r5, #0]
   1345e:	e7e5      	b.n	1342c <iterate_string_chunks+0x74>
                ++offset;
   13460:	9b02      	ldr	r3, [sp, #8]
   13462:	3301      	adds	r3, #1
   13464:	9302      	str	r3, [sp, #8]
                break;
   13466:	e7e5      	b.n	13434 <iterate_string_chunks+0x7c>
#endif

static inline bool add_check_overflow(size_t v1, size_t v2, size_t *r)
{
#if ((defined(__GNUC__) && (__GNUC__ >= 5)) && !defined(__INTEL_COMPILER)) || __has_builtin(__builtin_add_overflow)
    return __builtin_add_overflow(v1, v2, r);
   13468:	2201      	movs	r2, #1
   1346a:	e023      	b.n	134b4 <iterate_string_chunks+0xfc>
                *result = false;
   1346c:	2300      	movs	r3, #0
   1346e:	702b      	strb	r3, [r5, #0]
            offset += chunkLen;
   13470:	9b02      	ldr	r3, [sp, #8]
   13472:	9a01      	ldr	r2, [sp, #4]
   13474:	4413      	add	r3, r2
   13476:	9302      	str	r3, [sp, #8]
            total = newTotal;
   13478:	f8cd 800c 	str.w	r8, [sp, #12]
            if (offset == value->parser->end)
   1347c:	6823      	ldr	r3, [r4, #0]
   1347e:	685a      	ldr	r2, [r3, #4]
   13480:	9902      	ldr	r1, [sp, #8]
   13482:	428a      	cmp	r2, r1
   13484:	d030      	beq.n	134e8 <iterate_string_chunks+0x130>
            val = value->parser->d->get8(value->parser->d, offset);
   13486:	6818      	ldr	r0, [r3, #0]
   13488:	6803      	ldr	r3, [r0, #0]
   1348a:	4798      	blx	r3
            if (val == (uint8_t)BreakByte) {
   1348c:	28ff      	cmp	r0, #255	; 0xff
   1348e:	d0e7      	beq.n	13460 <iterate_string_chunks+0xa8>
            if ((val & MajorTypeMask) != value->type)
   13490:	f020 001f 	bic.w	r0, r0, #31
   13494:	7ba3      	ldrb	r3, [r4, #14]
   13496:	4298      	cmp	r0, r3
   13498:	d129      	bne.n	134ee <iterate_string_chunks+0x136>
            err = extract_length(value->parser, &offset, &chunkLen);
   1349a:	aa01      	add	r2, sp, #4
   1349c:	a902      	add	r1, sp, #8
   1349e:	6820      	ldr	r0, [r4, #0]
   134a0:	f7ff ff3a 	bl	13318 <extract_length>
            if (err)
   134a4:	4603      	mov	r3, r0
   134a6:	bb38      	cbnz	r0, 134f8 <iterate_string_chunks+0x140>
            if (unlikely(add_check_overflow(total, chunkLen, &newTotal)))
   134a8:	9803      	ldr	r0, [sp, #12]
   134aa:	9b01      	ldr	r3, [sp, #4]
   134ac:	2200      	movs	r2, #0
   134ae:	eb10 0803 	adds.w	r8, r0, r3
   134b2:	d2d9      	bcs.n	13468 <iterate_string_chunks+0xb0>
   134b4:	b9f2      	cbnz	r2, 134f4 <iterate_string_chunks+0x13c>
            if (chunkLen > (size_t)(value->parser->end - offset))
   134b6:	f8d4 c000 	ldr.w	ip, [r4]
   134ba:	f8dc 1004 	ldr.w	r1, [ip, #4]
   134be:	9a02      	ldr	r2, [sp, #8]
   134c0:	1a89      	subs	r1, r1, r2
   134c2:	428b      	cmp	r3, r1
   134c4:	d81c      	bhi.n	13500 <iterate_string_chunks+0x148>
            if (*result && *buflen >= newTotal)
   134c6:	7829      	ldrb	r1, [r5, #0]
   134c8:	2900      	cmp	r1, #0
   134ca:	d0cf      	beq.n	1346c <iterate_string_chunks+0xb4>
   134cc:	6831      	ldr	r1, [r6, #0]
   134ce:	4541      	cmp	r1, r8
   134d0:	d3cc      	bcc.n	1346c <iterate_string_chunks+0xb4>
                *result = !!func(value->parser->d, buffer + total, offset, chunkLen);
   134d2:	eb09 0100 	add.w	r1, r9, r0
   134d6:	f8dc 0000 	ldr.w	r0, [ip]
   134da:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   134dc:	47b8      	blx	r7
   134de:	3800      	subs	r0, #0
   134e0:	bf18      	it	ne
   134e2:	2001      	movne	r0, #1
   134e4:	7028      	strb	r0, [r5, #0]
   134e6:	e7c3      	b.n	13470 <iterate_string_chunks+0xb8>
                return CborErrorUnexpectedEOF;
   134e8:	f240 1301 	movw	r3, #257	; 0x101
   134ec:	e004      	b.n	134f8 <iterate_string_chunks+0x140>
                return CborErrorIllegalType;
   134ee:	f44f 7382 	mov.w	r3, #260	; 0x104
   134f2:	e001      	b.n	134f8 <iterate_string_chunks+0x140>
                return CborErrorDataTooLarge;
   134f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
}
   134f8:	4618      	mov	r0, r3
   134fa:	b005      	add	sp, #20
   134fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                return CborErrorUnexpectedEOF;
   13500:	f240 1301 	movw	r3, #257	; 0x101
   13504:	e7f8      	b.n	134f8 <iterate_string_chunks+0x140>
        *next = *value;
   13506:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1350a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1350c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        next->offset = offset;
   13510:	9b02      	ldr	r3, [sp, #8]
   13512:	6063      	str	r3, [r4, #4]
        return preparse_next_value(next);
   13514:	4620      	mov	r0, r4
   13516:	f7ff feda 	bl	132ce <preparse_next_value>
   1351a:	4603      	mov	r3, r0
   1351c:	e7ec      	b.n	134f8 <iterate_string_chunks+0x140>
            return CborErrorUnexpectedEOF;
   1351e:	f240 1301 	movw	r3, #257	; 0x101
   13522:	e7e9      	b.n	134f8 <iterate_string_chunks+0x140>

00013524 <advance_internal>:
{
   13524:	b570      	push	{r4, r5, r6, lr}
   13526:	4604      	mov	r4, r0
    CborError err = extract_number(it->parser, &it->offset,  &length);
   13528:	6806      	ldr	r6, [r0, #0]
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   1352a:	6830      	ldr	r0, [r6, #0]
   1352c:	6803      	ldr	r3, [r0, #0]
   1352e:	6861      	ldr	r1, [r4, #4]
   13530:	4798      	blx	r3
   13532:	f000 001f 	and.w	r0, r0, #31
    ++*offset;
   13536:	6863      	ldr	r3, [r4, #4]
   13538:	3301      	adds	r3, #1
   1353a:	6063      	str	r3, [r4, #4]
    if (additional_information < Value8Bit) {
   1353c:	2817      	cmp	r0, #23
   1353e:	d913      	bls.n	13568 <advance_internal+0x44>
    if (unlikely(additional_information > Value64Bit))
   13540:	281b      	cmp	r0, #27
   13542:	d838      	bhi.n	135b6 <advance_internal+0x92>
    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   13544:	3818      	subs	r0, #24
   13546:	2501      	movs	r5, #1
   13548:	4085      	lsls	r5, r0
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   1354a:	6873      	ldr	r3, [r6, #4]
   1354c:	6861      	ldr	r1, [r4, #4]
   1354e:	1a5b      	subs	r3, r3, r1
   13550:	429d      	cmp	r5, r3
   13552:	d835      	bhi.n	135c0 <advance_internal+0x9c>
    } else if (bytesNeeded == 1) {
   13554:	2d01      	cmp	r5, #1
   13556:	d00a      	beq.n	1356e <advance_internal+0x4a>
    } else if (bytesNeeded == 2) {
   13558:	2d02      	cmp	r5, #2
   1355a:	d022      	beq.n	135a2 <advance_internal+0x7e>
    } else if (bytesNeeded == 4) {
   1355c:	2d04      	cmp	r5, #4
   1355e:	d025      	beq.n	135ac <advance_internal+0x88>
        *len =  p->d->get64(p->d, *offset);
   13560:	6830      	ldr	r0, [r6, #0]
   13562:	68c3      	ldr	r3, [r0, #12]
   13564:	4798      	blx	r3
   13566:	e006      	b.n	13576 <advance_internal+0x52>
        *len = additional_information;
   13568:	2300      	movs	r3, #0
   1356a:	4619      	mov	r1, r3
        return CborNoError;
   1356c:	e007      	b.n	1357e <advance_internal+0x5a>
        *len = p->d->get8(p->d, *offset);
   1356e:	6830      	ldr	r0, [r6, #0]
   13570:	6803      	ldr	r3, [r0, #0]
   13572:	4798      	blx	r3
   13574:	2100      	movs	r1, #0
    *offset += bytesNeeded;
   13576:	6863      	ldr	r3, [r4, #4]
   13578:	442b      	add	r3, r5
   1357a:	6063      	str	r3, [r4, #4]
    return CborNoError;
   1357c:	2300      	movs	r3, #0
    assert(err == CborNoError);
   1357e:	bb23      	cbnz	r3, 135ca <advance_internal+0xa6>
    if (it->type == CborByteStringType || it->type == CborTextStringType) {
   13580:	7ba3      	ldrb	r3, [r4, #14]
   13582:	2b40      	cmp	r3, #64	; 0x40
   13584:	d001      	beq.n	1358a <advance_internal+0x66>
   13586:	2b60      	cmp	r3, #96	; 0x60
   13588:	d107      	bne.n	1359a <advance_internal+0x76>
        assert(length == (size_t)length);
   1358a:	bb21      	cbnz	r1, 135d6 <advance_internal+0xb2>
        assert((it->flags & CborIteratorFlag_UnknownLength) == 0);
   1358c:	7be3      	ldrb	r3, [r4, #15]
   1358e:	f013 0f04 	tst.w	r3, #4
   13592:	d126      	bne.n	135e2 <advance_internal+0xbe>
        it->offset += length;
   13594:	6863      	ldr	r3, [r4, #4]
   13596:	4418      	add	r0, r3
   13598:	6060      	str	r0, [r4, #4]
    return preparse_next_value(it);
   1359a:	4620      	mov	r0, r4
   1359c:	f7ff fe97 	bl	132ce <preparse_next_value>
}
   135a0:	bd70      	pop	{r4, r5, r6, pc}
        *len =  p->d->get16(p->d, *offset);
   135a2:	6830      	ldr	r0, [r6, #0]
   135a4:	6843      	ldr	r3, [r0, #4]
   135a6:	4798      	blx	r3
   135a8:	2100      	movs	r1, #0
   135aa:	e7e4      	b.n	13576 <advance_internal+0x52>
        *len =  p->d->get32(p->d, *offset);
   135ac:	6830      	ldr	r0, [r6, #0]
   135ae:	6883      	ldr	r3, [r0, #8]
   135b0:	4798      	blx	r3
   135b2:	2100      	movs	r1, #0
   135b4:	e7df      	b.n	13576 <advance_internal+0x52>
    *len = 1;
   135b6:	2001      	movs	r0, #1
   135b8:	2100      	movs	r1, #0
        return CborErrorIllegalNumber;
   135ba:	f240 1305 	movw	r3, #261	; 0x105
   135be:	e7de      	b.n	1357e <advance_internal+0x5a>
    *len = 1;
   135c0:	2001      	movs	r0, #1
   135c2:	2100      	movs	r1, #0
        return CborErrorUnexpectedEOF;
   135c4:	f240 1301 	movw	r3, #257	; 0x101
   135c8:	e7d9      	b.n	1357e <advance_internal+0x5a>
    assert(err == CborNoError);
   135ca:	2300      	movs	r3, #0
   135cc:	461a      	mov	r2, r3
   135ce:	4619      	mov	r1, r3
   135d0:	4618      	mov	r0, r3
   135d2:	f7f5 fd3b 	bl	904c <__assert_func>
        assert(length == (size_t)length);
   135d6:	2300      	movs	r3, #0
   135d8:	461a      	mov	r2, r3
   135da:	4619      	mov	r1, r3
   135dc:	4618      	mov	r0, r3
   135de:	f7f5 fd35 	bl	904c <__assert_func>
        assert((it->flags & CborIteratorFlag_UnknownLength) == 0);
   135e2:	2300      	movs	r3, #0
   135e4:	461a      	mov	r2, r3
   135e6:	4619      	mov	r1, r3
   135e8:	4618      	mov	r0, r3
   135ea:	f7f5 fd2f 	bl	904c <__assert_func>

000135ee <_cbor_value_decode_int64_internal>:
{
   135ee:	b510      	push	{r4, lr}
   135f0:	4604      	mov	r4, r0
    uint8_t val = value->parser->d->get8(value->parser->d, value->offset);
   135f2:	6803      	ldr	r3, [r0, #0]
   135f4:	6818      	ldr	r0, [r3, #0]
   135f6:	6803      	ldr	r3, [r0, #0]
   135f8:	6861      	ldr	r1, [r4, #4]
   135fa:	4798      	blx	r3
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge ||
   135fc:	7be3      	ldrb	r3, [r4, #15]
   135fe:	f013 0f01 	tst.w	r3, #1
   13602:	d104      	bne.n	1360e <_cbor_value_decode_int64_internal+0x20>
   13604:	7ba3      	ldrb	r3, [r4, #14]
   13606:	2bfa      	cmp	r3, #250	; 0xfa
   13608:	d001      	beq.n	1360e <_cbor_value_decode_int64_internal+0x20>
   1360a:	2bfb      	cmp	r3, #251	; 0xfb
   1360c:	d111      	bne.n	13632 <_cbor_value_decode_int64_internal+0x44>
    assert((val & SmallValueMask) == Value32Bit || (val & SmallValueMask) == Value64Bit);
   1360e:	f000 031e 	and.w	r3, r0, #30
   13612:	2b1a      	cmp	r3, #26
   13614:	d113      	bne.n	1363e <_cbor_value_decode_int64_internal+0x50>
    if ((val & 1) == (Value32Bit & 1))
   13616:	f010 0f01 	tst.w	r0, #1
   1361a:	d016      	beq.n	1364a <_cbor_value_decode_int64_internal+0x5c>
    assert((val & SmallValueMask) == Value64Bit);
   1361c:	f000 001f 	and.w	r0, r0, #31
   13620:	281b      	cmp	r0, #27
   13622:	d11a      	bne.n	1365a <_cbor_value_decode_int64_internal+0x6c>
        return value->parser->d->get64(value->parser->d, value->offset + 1);
   13624:	6823      	ldr	r3, [r4, #0]
   13626:	6818      	ldr	r0, [r3, #0]
   13628:	68c3      	ldr	r3, [r0, #12]
   1362a:	6861      	ldr	r1, [r4, #4]
   1362c:	3101      	adds	r1, #1
   1362e:	4798      	blx	r3
}
   13630:	bd10      	pop	{r4, pc}
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge ||
   13632:	2300      	movs	r3, #0
   13634:	461a      	mov	r2, r3
   13636:	4619      	mov	r1, r3
   13638:	4618      	mov	r0, r3
   1363a:	f7f5 fd07 	bl	904c <__assert_func>
    assert((val & SmallValueMask) == Value32Bit || (val & SmallValueMask) == Value64Bit);
   1363e:	2300      	movs	r3, #0
   13640:	461a      	mov	r2, r3
   13642:	4619      	mov	r1, r3
   13644:	4618      	mov	r0, r3
   13646:	f7f5 fd01 	bl	904c <__assert_func>
        return value->parser->d->get32(value->parser->d, value->offset + 1);
   1364a:	6823      	ldr	r3, [r4, #0]
   1364c:	6818      	ldr	r0, [r3, #0]
   1364e:	6883      	ldr	r3, [r0, #8]
   13650:	6861      	ldr	r1, [r4, #4]
   13652:	3101      	adds	r1, #1
   13654:	4798      	blx	r3
   13656:	2100      	movs	r1, #0
   13658:	e7ea      	b.n	13630 <_cbor_value_decode_int64_internal+0x42>
    assert((val & SmallValueMask) == Value64Bit);
   1365a:	2300      	movs	r3, #0
   1365c:	461a      	mov	r2, r3
   1365e:	4619      	mov	r1, r3
   13660:	4618      	mov	r0, r3
   13662:	f7f5 fcf3 	bl	904c <__assert_func>

00013666 <cbor_parser_init>:
{
   13666:	b510      	push	{r4, lr}
   13668:	4604      	mov	r4, r0
   1366a:	4618      	mov	r0, r3
    memset(parser, 0, sizeof(*parser));
   1366c:	2300      	movs	r3, #0
   1366e:	6013      	str	r3, [r2, #0]
   13670:	6053      	str	r3, [r2, #4]
   13672:	6093      	str	r3, [r2, #8]
    parser->d = d;
   13674:	6014      	str	r4, [r2, #0]
    parser->end = d->message_size;
   13676:	69a4      	ldr	r4, [r4, #24]
   13678:	6054      	str	r4, [r2, #4]
    parser->flags = flags;
   1367a:	6091      	str	r1, [r2, #8]
    it->parser = parser;
   1367c:	6002      	str	r2, [r0, #0]
    it->offset = 0;
   1367e:	6043      	str	r3, [r0, #4]
    it->remaining = 1;/* there's one type altogether, usually an array or map */
   13680:	2301      	movs	r3, #1
   13682:	6083      	str	r3, [r0, #8]
    return preparse_value(it);
   13684:	f7ff fd89 	bl	1319a <preparse_value>
}
   13688:	bd10      	pop	{r4, pc}

0001368a <cbor_value_enter_container>:
{
   1368a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1368c:	4605      	mov	r5, r0
   1368e:	460c      	mov	r4, r1
{ return it->type == CborArrayType || it->type == CborMapType; }
   13690:	7b83      	ldrb	r3, [r0, #14]
   13692:	2b80      	cmp	r3, #128	; 0x80
   13694:	d021      	beq.n	136da <cbor_value_enter_container+0x50>
   13696:	2ba0      	cmp	r3, #160	; 0xa0
   13698:	d01d      	beq.n	136d6 <cbor_value_enter_container+0x4c>
   1369a:	2300      	movs	r3, #0
    assert(cbor_value_is_container(it));
   1369c:	b1fb      	cbz	r3, 136de <cbor_value_enter_container+0x54>
    *recursed = *it;
   1369e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   136a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (it->flags & CborIteratorFlag_UnknownLength) {
   136a6:	7beb      	ldrb	r3, [r5, #15]
   136a8:	f013 0f04 	tst.w	r3, #4
   136ac:	d01c      	beq.n	136e8 <cbor_value_enter_container+0x5e>
        recursed->remaining = UINT32_MAX;
   136ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   136b2:	60a3      	str	r3, [r4, #8]
        ++recursed->offset;
   136b4:	460b      	mov	r3, r1
   136b6:	3301      	adds	r3, #1
   136b8:	6063      	str	r3, [r4, #4]
        err = preparse_value(recursed);
   136ba:	4620      	mov	r0, r4
   136bc:	f7ff fd6d 	bl	1319a <preparse_value>
        if (err != CborErrorUnexpectedBreak)
   136c0:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   136c4:	d106      	bne.n	136d4 <cbor_value_enter_container+0x4a>
        ++recursed->offset;
   136c6:	6863      	ldr	r3, [r4, #4]
   136c8:	3301      	adds	r3, #1
   136ca:	6063      	str	r3, [r4, #4]
    recursed->type = CborInvalidType;
   136cc:	23ff      	movs	r3, #255	; 0xff
   136ce:	73a3      	strb	r3, [r4, #14]
    recursed->remaining = 0;
   136d0:	2000      	movs	r0, #0
   136d2:	60a0      	str	r0, [r4, #8]
}
   136d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   136d6:	2301      	movs	r3, #1
   136d8:	e7e0      	b.n	1369c <cbor_value_enter_container+0x12>
   136da:	2301      	movs	r3, #1
   136dc:	e7de      	b.n	1369c <cbor_value_enter_container+0x12>
    assert(cbor_value_is_container(it));
   136de:	461a      	mov	r2, r3
   136e0:	4619      	mov	r1, r3
   136e2:	4618      	mov	r0, r3
   136e4:	f7f5 fcb2 	bl	904c <__assert_func>
        err = extract_number(recursed->parser, &recursed->offset, &len);
   136e8:	6827      	ldr	r7, [r4, #0]
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   136ea:	6838      	ldr	r0, [r7, #0]
   136ec:	6803      	ldr	r3, [r0, #0]
   136ee:	6861      	ldr	r1, [r4, #4]
   136f0:	4798      	blx	r3
   136f2:	f000 001f 	and.w	r0, r0, #31
    ++*offset;
   136f6:	6863      	ldr	r3, [r4, #4]
   136f8:	3301      	adds	r3, #1
   136fa:	6063      	str	r3, [r4, #4]
    if (additional_information < Value8Bit) {
   136fc:	2817      	cmp	r0, #23
   136fe:	d913      	bls.n	13728 <cbor_value_enter_container+0x9e>
    if (unlikely(additional_information > Value64Bit))
   13700:	281b      	cmp	r0, #27
   13702:	d838      	bhi.n	13776 <cbor_value_enter_container+0xec>
    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   13704:	3818      	subs	r0, #24
   13706:	2601      	movs	r6, #1
   13708:	4086      	lsls	r6, r0
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   1370a:	687b      	ldr	r3, [r7, #4]
   1370c:	6861      	ldr	r1, [r4, #4]
   1370e:	1a5b      	subs	r3, r3, r1
   13710:	429e      	cmp	r6, r3
   13712:	d835      	bhi.n	13780 <cbor_value_enter_container+0xf6>
    } else if (bytesNeeded == 1) {
   13714:	2e01      	cmp	r6, #1
   13716:	d00a      	beq.n	1372e <cbor_value_enter_container+0xa4>
    } else if (bytesNeeded == 2) {
   13718:	2e02      	cmp	r6, #2
   1371a:	d022      	beq.n	13762 <cbor_value_enter_container+0xd8>
    } else if (bytesNeeded == 4) {
   1371c:	2e04      	cmp	r6, #4
   1371e:	d025      	beq.n	1376c <cbor_value_enter_container+0xe2>
        *len =  p->d->get64(p->d, *offset);
   13720:	6838      	ldr	r0, [r7, #0]
   13722:	68c3      	ldr	r3, [r0, #12]
   13724:	4798      	blx	r3
   13726:	e006      	b.n	13736 <cbor_value_enter_container+0xac>
        *len = additional_information;
   13728:	2300      	movs	r3, #0
   1372a:	4619      	mov	r1, r3
        return CborNoError;
   1372c:	e007      	b.n	1373e <cbor_value_enter_container+0xb4>
        *len = p->d->get8(p->d, *offset);
   1372e:	6838      	ldr	r0, [r7, #0]
   13730:	6803      	ldr	r3, [r0, #0]
   13732:	4798      	blx	r3
   13734:	2100      	movs	r1, #0
    *offset += bytesNeeded;
   13736:	6863      	ldr	r3, [r4, #4]
   13738:	4433      	add	r3, r6
   1373a:	6063      	str	r3, [r4, #4]
    return CborNoError;
   1373c:	2300      	movs	r3, #0
        assert(err == CborNoError);
   1373e:	bb23      	cbnz	r3, 1378a <cbor_value_enter_container+0x100>
        recursed->remaining = (uint32_t)len;
   13740:	60a0      	str	r0, [r4, #8]
        if (recursed->remaining != len || len == UINT32_MAX) {
   13742:	bb41      	cbnz	r1, 13796 <cbor_value_enter_container+0x10c>
   13744:	2900      	cmp	r1, #0
   13746:	bf08      	it	eq
   13748:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   1374c:	d023      	beq.n	13796 <cbor_value_enter_container+0x10c>
        if (recursed->type == CborMapType) {
   1374e:	7ba2      	ldrb	r2, [r4, #14]
   13750:	2aa0      	cmp	r2, #160	; 0xa0
   13752:	d025      	beq.n	137a0 <cbor_value_enter_container+0x116>
        if (len != 0)
   13754:	ea50 0301 	orrs.w	r3, r0, r1
   13758:	d0b8      	beq.n	136cc <cbor_value_enter_container+0x42>
            return preparse_value(recursed);
   1375a:	4620      	mov	r0, r4
   1375c:	f7ff fd1d 	bl	1319a <preparse_value>
   13760:	e7b8      	b.n	136d4 <cbor_value_enter_container+0x4a>
        *len =  p->d->get16(p->d, *offset);
   13762:	6838      	ldr	r0, [r7, #0]
   13764:	6843      	ldr	r3, [r0, #4]
   13766:	4798      	blx	r3
   13768:	2100      	movs	r1, #0
   1376a:	e7e4      	b.n	13736 <cbor_value_enter_container+0xac>
        *len =  p->d->get32(p->d, *offset);
   1376c:	6838      	ldr	r0, [r7, #0]
   1376e:	6883      	ldr	r3, [r0, #8]
   13770:	4798      	blx	r3
   13772:	2100      	movs	r1, #0
   13774:	e7df      	b.n	13736 <cbor_value_enter_container+0xac>
    *len = 1;
   13776:	2001      	movs	r0, #1
   13778:	2100      	movs	r1, #0
        return CborErrorIllegalNumber;
   1377a:	f240 1305 	movw	r3, #261	; 0x105
   1377e:	e7de      	b.n	1373e <cbor_value_enter_container+0xb4>
    *len = 1;
   13780:	2001      	movs	r0, #1
   13782:	2100      	movs	r1, #0
        return CborErrorUnexpectedEOF;
   13784:	f240 1301 	movw	r3, #257	; 0x101
   13788:	e7d9      	b.n	1373e <cbor_value_enter_container+0xb4>
        assert(err == CborNoError);
   1378a:	2300      	movs	r3, #0
   1378c:	461a      	mov	r2, r3
   1378e:	4619      	mov	r1, r3
   13790:	4618      	mov	r0, r3
   13792:	f7f5 fc5b 	bl	904c <__assert_func>
            recursed->offset = it->offset;
   13796:	686b      	ldr	r3, [r5, #4]
   13798:	6063      	str	r3, [r4, #4]
            return CborErrorDataTooLarge;
   1379a:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1379e:	e799      	b.n	136d4 <cbor_value_enter_container+0x4a>
            if (recursed->remaining > UINT32_MAX / 2) {
   137a0:	2800      	cmp	r0, #0
   137a2:	db02      	blt.n	137aa <cbor_value_enter_container+0x120>
            recursed->remaining *= 2;
   137a4:	0043      	lsls	r3, r0, #1
   137a6:	60a3      	str	r3, [r4, #8]
   137a8:	e7d4      	b.n	13754 <cbor_value_enter_container+0xca>
                recursed->offset = it->offset;
   137aa:	686b      	ldr	r3, [r5, #4]
   137ac:	6063      	str	r3, [r4, #4]
                return CborErrorDataTooLarge;
   137ae:	f44f 6080 	mov.w	r0, #1024	; 0x400
   137b2:	e78f      	b.n	136d4 <cbor_value_enter_container+0x4a>

000137b4 <cbor_value_leave_container>:
{
   137b4:	b508      	push	{r3, lr}
   137b6:	7b83      	ldrb	r3, [r0, #14]
   137b8:	2b80      	cmp	r3, #128	; 0x80
   137ba:	d00d      	beq.n	137d8 <cbor_value_leave_container+0x24>
   137bc:	2ba0      	cmp	r3, #160	; 0xa0
   137be:	d009      	beq.n	137d4 <cbor_value_leave_container+0x20>
   137c0:	2300      	movs	r3, #0
    assert(cbor_value_is_container(it));
   137c2:	b15b      	cbz	r3, 137dc <cbor_value_leave_container+0x28>
    assert(recursed->type == CborInvalidType);
   137c4:	7b8b      	ldrb	r3, [r1, #14]
   137c6:	2bff      	cmp	r3, #255	; 0xff
   137c8:	d10d      	bne.n	137e6 <cbor_value_leave_container+0x32>
    it->offset = recursed->offset;
   137ca:	684b      	ldr	r3, [r1, #4]
   137cc:	6043      	str	r3, [r0, #4]
    return preparse_next_value(it);
   137ce:	f7ff fd7e 	bl	132ce <preparse_next_value>
}
   137d2:	bd08      	pop	{r3, pc}
   137d4:	2301      	movs	r3, #1
   137d6:	e7f4      	b.n	137c2 <cbor_value_leave_container+0xe>
   137d8:	2301      	movs	r3, #1
   137da:	e7f2      	b.n	137c2 <cbor_value_leave_container+0xe>
    assert(cbor_value_is_container(it));
   137dc:	461a      	mov	r2, r3
   137de:	4619      	mov	r1, r3
   137e0:	4618      	mov	r0, r3
   137e2:	f7f5 fc33 	bl	904c <__assert_func>
    assert(recursed->type == CborInvalidType);
   137e6:	2300      	movs	r3, #0
   137e8:	461a      	mov	r2, r3
   137ea:	4619      	mov	r1, r3
   137ec:	4618      	mov	r0, r3
   137ee:	f7f5 fc2d 	bl	904c <__assert_func>
	...

000137f4 <_cbor_value_copy_string>:
 * \sa cbor_value_dup_text_string(), cbor_value_copy_text_string(), cbor_value_get_string_length(), cbor_value_calculate_string_length()
 */

CborError _cbor_value_copy_string(const CborValue *value, void *buffer,
                                 size_t *buflen, CborValue *next)
{
   137f4:	b500      	push	{lr}
   137f6:	b085      	sub	sp, #20
    bool copied_all;
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   137f8:	468c      	mov	ip, r1
   137fa:	b181      	cbz	r1, 1381e <_cbor_value_copy_string+0x2a>
                                          buffer ? (IterateFunction) value->parser->d->cpy : iterate_noop);
   137fc:	6801      	ldr	r1, [r0, #0]
   137fe:	6809      	ldr	r1, [r1, #0]
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   13800:	6949      	ldr	r1, [r1, #20]
   13802:	9101      	str	r1, [sp, #4]
   13804:	9300      	str	r3, [sp, #0]
   13806:	f10d 030f 	add.w	r3, sp, #15
   1380a:	4661      	mov	r1, ip
   1380c:	f7ff fdd4 	bl	133b8 <iterate_string_chunks>
    return err ? err :
   13810:	b910      	cbnz	r0, 13818 <_cbor_value_copy_string+0x24>
                 copied_all ? CborNoError : CborErrorOutOfMemory;
   13812:	f89d 300f 	ldrb.w	r3, [sp, #15]
    return err ? err :
   13816:	b123      	cbz	r3, 13822 <_cbor_value_copy_string+0x2e>
}
   13818:	b005      	add	sp, #20
   1381a:	f85d fb04 	ldr.w	pc, [sp], #4
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   1381e:	4902      	ldr	r1, [pc, #8]	; (13828 <_cbor_value_copy_string+0x34>)
   13820:	e7ef      	b.n	13802 <_cbor_value_copy_string+0xe>
    return err ? err :
   13822:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   13826:	e7f7      	b.n	13818 <_cbor_value_copy_string+0x24>
   13828:	00013197 	.word	0x00013197

0001382c <advance_recursive>:
{
   1382c:	b570      	push	{r4, r5, r6, lr}
   1382e:	b086      	sub	sp, #24
   13830:	4604      	mov	r4, r0
   13832:	460d      	mov	r5, r1
    if (is_fixed_type(it->type))
   13834:	7b86      	ldrb	r6, [r0, #14]
   13836:	4630      	mov	r0, r6
   13838:	f7ff fc9b 	bl	13172 <is_fixed_type>
   1383c:	b9c0      	cbnz	r0, 13870 <advance_recursive+0x44>
   1383e:	2e80      	cmp	r6, #128	; 0x80
   13840:	d01f      	beq.n	13882 <advance_recursive+0x56>
   13842:	2ea0      	cmp	r6, #160	; 0xa0
   13844:	d01b      	beq.n	1387e <advance_recursive+0x52>
   13846:	2300      	movs	r3, #0
    if (!cbor_value_is_container(it)) {
   13848:	b1eb      	cbz	r3, 13886 <advance_recursive+0x5a>
    if (nestingLevel == CBOR_PARSER_MAX_RECURSIONS)
   1384a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   1384e:	d02b      	beq.n	138a8 <advance_recursive+0x7c>
    err = cbor_value_enter_container(it, &recursed);
   13850:	a902      	add	r1, sp, #8
   13852:	4620      	mov	r0, r4
   13854:	f7ff ff19 	bl	1368a <cbor_value_enter_container>
    if (err)
   13858:	4603      	mov	r3, r0
   1385a:	b968      	cbnz	r0, 13878 <advance_recursive+0x4c>
{ return it->remaining == 0; }
   1385c:	9b04      	ldr	r3, [sp, #16]
    while (!cbor_value_at_end(&recursed)) {
   1385e:	b1eb      	cbz	r3, 1389c <advance_recursive+0x70>
        err = advance_recursive(&recursed, nestingLevel + 1);
   13860:	1c69      	adds	r1, r5, #1
   13862:	a802      	add	r0, sp, #8
   13864:	f7ff ffe2 	bl	1382c <advance_recursive>
        if (err)
   13868:	4603      	mov	r3, r0
   1386a:	2800      	cmp	r0, #0
   1386c:	d0f6      	beq.n	1385c <advance_recursive+0x30>
   1386e:	e003      	b.n	13878 <advance_recursive+0x4c>
        return advance_internal(it);
   13870:	4620      	mov	r0, r4
   13872:	f7ff fe57 	bl	13524 <advance_internal>
   13876:	4603      	mov	r3, r0
}
   13878:	4618      	mov	r0, r3
   1387a:	b006      	add	sp, #24
   1387c:	bd70      	pop	{r4, r5, r6, pc}
{ return it->type == CborArrayType || it->type == CborMapType; }
   1387e:	2301      	movs	r3, #1
   13880:	e7e2      	b.n	13848 <advance_recursive+0x1c>
   13882:	2301      	movs	r3, #1
   13884:	e7e0      	b.n	13848 <advance_recursive+0x1c>
        size_t len = SIZE_MAX;
   13886:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1388a:	9301      	str	r3, [sp, #4]
        return _cbor_value_copy_string(it, NULL, &len, it);
   1388c:	4623      	mov	r3, r4
   1388e:	aa01      	add	r2, sp, #4
   13890:	2100      	movs	r1, #0
   13892:	4620      	mov	r0, r4
   13894:	f7ff ffae 	bl	137f4 <_cbor_value_copy_string>
   13898:	4603      	mov	r3, r0
   1389a:	e7ed      	b.n	13878 <advance_recursive+0x4c>
    return cbor_value_leave_container(it, &recursed);
   1389c:	a902      	add	r1, sp, #8
   1389e:	4620      	mov	r0, r4
   138a0:	f7ff ff88 	bl	137b4 <cbor_value_leave_container>
   138a4:	4603      	mov	r3, r0
   138a6:	e7e7      	b.n	13878 <advance_recursive+0x4c>
        return CborErrorNestingTooDeep;
   138a8:	f240 4301 	movw	r3, #1025	; 0x401
   138ac:	e7e4      	b.n	13878 <advance_recursive+0x4c>

000138ae <cbor_value_advance>:
{
   138ae:	b508      	push	{r3, lr}
    assert(it->type != CborInvalidType);
   138b0:	7b83      	ldrb	r3, [r0, #14]
   138b2:	2bff      	cmp	r3, #255	; 0xff
   138b4:	d005      	beq.n	138c2 <cbor_value_advance+0x14>
    if (!it->remaining)
   138b6:	6883      	ldr	r3, [r0, #8]
   138b8:	b14b      	cbz	r3, 138ce <cbor_value_advance+0x20>
    return advance_recursive(it, 0);
   138ba:	2100      	movs	r1, #0
   138bc:	f7ff ffb6 	bl	1382c <advance_recursive>
}
   138c0:	bd08      	pop	{r3, pc}
    assert(it->type != CborInvalidType);
   138c2:	2300      	movs	r3, #0
   138c4:	461a      	mov	r2, r3
   138c6:	4619      	mov	r1, r3
   138c8:	4618      	mov	r0, r3
   138ca:	f7f5 fbbf 	bl	904c <__assert_func>
        return CborErrorAdvancePastEOF;
   138ce:	2003      	movs	r0, #3
   138d0:	e7f6      	b.n	138c0 <cbor_value_advance+0x12>

000138d2 <cbor_value_calculate_string_length>:
{
   138d2:	b508      	push	{r3, lr}
   138d4:	460a      	mov	r2, r1
    *len = SIZE_MAX;
   138d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   138da:	600b      	str	r3, [r1, #0]
    return _cbor_value_copy_string(value, NULL, len, NULL);
   138dc:	2300      	movs	r3, #0
   138de:	4619      	mov	r1, r3
   138e0:	f7ff ff88 	bl	137f4 <_cbor_value_copy_string>
}
   138e4:	bd08      	pop	{r3, pc}
	...

000138e8 <hal_bsp_flash_dev>:


const struct hal_flash *
hal_bsp_flash_dev(uint8_t id)
{
    switch (id) {
   138e8:	b908      	cbnz	r0, 138ee <hal_bsp_flash_dev+0x6>
    case 0:
        /* MCU internal flash. */
        return &nrf52k_flash_dev;
   138ea:	4802      	ldr	r0, [pc, #8]	; (138f4 <hal_bsp_flash_dev+0xc>)
   138ec:	4770      	bx	lr
    default:
        /* External flash.  Assume not present in this BSP. */
        return NULL;
   138ee:	2000      	movs	r0, #0
    }
}
   138f0:	4770      	bx	lr
   138f2:	bf00      	nop
   138f4:	00024488 	.word	0x00024488

000138f8 <hal_bsp_init>:
}


void
hal_bsp_init(void)
{
   138f8:	b500      	push	{lr}
   138fa:	b083      	sub	sp, #12
    int rc;

    (void)rc;

    /* Make sure system clocks have started */
    hal_system_clock_start();
   138fc:	f7f4 fc7e 	bl	81fc <hal_system_clock_start>

    /* Create all available nRF52832 peripherals */
    nrf52_periph_create();
   13900:	f005 f922 	bl	18b48 <nrf52_periph_create>
    return (dpl_error_t)os_sem_init(&sem->sem, tokens);
   13904:	2101      	movs	r1, #1
   13906:	4811      	ldr	r0, [pc, #68]	; (1394c <hal_bsp_init+0x54>)
   13908:	f7f6 fab8 	bl	9e7c <os_sem_init>

#if MYNEWT_VAL(SPI_0_MASTER)
    rc = dpl_sem_init(&g_spi0_sem, 0x1);
    assert(rc == 0);
   1390c:	b988      	cbnz	r0, 13932 <hal_bsp_init+0x3a>
#endif

#if MYNEWT_VAL(DW1000_DEVICE_0)
    dw1000_0 = hal_dw1000_inst(0);
   1390e:	2000      	movs	r0, #0
   13910:	f001 f80c 	bl	1492c <hal_dw1000_inst>
   13914:	4b0e      	ldr	r3, [pc, #56]	; (13950 <hal_bsp_init+0x58>)
   13916:	6018      	str	r0, [r3, #0]
    rc = os_dev_create((struct os_dev *) dw1000_0, "dw1000_0",
   13918:	4b0e      	ldr	r3, [pc, #56]	; (13954 <hal_bsp_init+0x5c>)
   1391a:	9301      	str	r3, [sp, #4]
   1391c:	4b0e      	ldr	r3, [pc, #56]	; (13958 <hal_bsp_init+0x60>)
   1391e:	9300      	str	r3, [sp, #0]
   13920:	2300      	movs	r3, #0
   13922:	2201      	movs	r2, #1
   13924:	490d      	ldr	r1, [pc, #52]	; (1395c <hal_bsp_init+0x64>)
   13926:	f7f5 fe5b 	bl	95e0 <os_dev_create>
      OS_DEV_INIT_PRIMARY, 0, dw1000_dev_init, (void *)&dw1000_0_cfg);
    assert(rc == 0);
   1392a:	b940      	cbnz	r0, 1393e <hal_bsp_init+0x46>
#endif
}
   1392c:	b003      	add	sp, #12
   1392e:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   13932:	2300      	movs	r3, #0
   13934:	461a      	mov	r2, r3
   13936:	4619      	mov	r1, r3
   13938:	4618      	mov	r0, r3
   1393a:	f7f5 fb87 	bl	904c <__assert_func>
    assert(rc == 0);
   1393e:	2300      	movs	r3, #0
   13940:	461a      	mov	r2, r3
   13942:	4619      	mov	r1, r3
   13944:	4618      	mov	r0, r3
   13946:	f7f5 fb81 	bl	904c <__assert_func>
   1394a:	bf00      	nop
   1394c:	20004570 	.word	0x20004570
   13950:	2000456c 	.word	0x2000456c
   13954:	00023e64 	.word	0x00023e64
   13958:	00014765 	.word	0x00014765
   1395c:	00023e58 	.word	0x00023e58

00013960 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   13960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
   13964:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 13b08 <SEGGER_RTT_WriteNoLock+0x1a8>
   13968:	eb00 0640 	add.w	r6, r0, r0, lsl #1
   1396c:	eb09 06c6 	add.w	r6, r9, r6, lsl #3
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   13970:	b083      	sub	sp, #12
  switch (pRing->Flags) {
   13972:	6af7      	ldr	r7, [r6, #44]	; 0x2c
   13974:	2f01      	cmp	r7, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   13976:	4680      	mov	r8, r0
   13978:	468b      	mov	fp, r1
   1397a:	4692      	mov	sl, r2
  switch (pRing->Flags) {
   1397c:	ea4f 0440 	mov.w	r4, r0, lsl #1
   13980:	d007      	beq.n	13992 <SEGGER_RTT_WriteNoLock+0x32>
   13982:	2f02      	cmp	r7, #2
   13984:	d049      	beq.n	13a1a <SEGGER_RTT_WriteNoLock+0xba>
   13986:	b33f      	cbz	r7, 139d8 <SEGGER_RTT_WriteNoLock+0x78>
   13988:	2700      	movs	r7, #0
  }
  //
  // Finish up.
  //
  return Status;
}
   1398a:	4638      	mov	r0, r7
   1398c:	b003      	add	sp, #12
   1398e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  RdOff = pRing->RdOff;
   13992:	6ab7      	ldr	r7, [r6, #40]	; 0x28
  WrOff = pRing->WrOff;
   13994:	6a75      	ldr	r5, [r6, #36]	; 0x24
  if (RdOff <= WrOff) {
   13996:	42af      	cmp	r7, r5
   13998:	d97a      	bls.n	13a90 <SEGGER_RTT_WriteNoLock+0x130>
    r = RdOff - WrOff - 1u;
   1399a:	3f01      	subs	r7, #1
   1399c:	1b7f      	subs	r7, r7, r5
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   1399e:	6a36      	ldr	r6, [r6, #32]
    Status = Avail < NumBytes ? Avail : NumBytes;
   139a0:	4557      	cmp	r7, sl
   139a2:	bf28      	it	cs
   139a4:	4657      	movcs	r7, sl
  Rem = pRing->SizeOfBuffer - WrOff;
   139a6:	1b72      	subs	r2, r6, r5
  if (Rem > NumBytes) {
   139a8:	4297      	cmp	r7, r2
   139aa:	d27b      	bcs.n	13aa4 <SEGGER_RTT_WriteNoLock+0x144>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   139ac:	f108 0301 	add.w	r3, r8, #1
   139b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   139b4:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
   139b8:	4659      	mov	r1, fp
   139ba:	6858      	ldr	r0, [r3, #4]
   139bc:	463a      	mov	r2, r7
   139be:	4428      	add	r0, r5
   139c0:	f7fa f812 	bl	d9e8 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
   139c4:	4444      	add	r4, r8
   139c6:	eb09 09c4 	add.w	r9, r9, r4, lsl #3
   139ca:	443d      	add	r5, r7
}
   139cc:	4638      	mov	r0, r7
    pRing->WrOff = WrOff + NumBytes;
   139ce:	f8c9 5024 	str.w	r5, [r9, #36]	; 0x24
}
   139d2:	b003      	add	sp, #12
   139d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  RdOff = pRing->RdOff;
   139d8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  WrOff = pRing->WrOff;
   139da:	6a75      	ldr	r5, [r6, #36]	; 0x24
  if (RdOff <= WrOff) {
   139dc:	42ab      	cmp	r3, r5
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   139de:	bf9c      	itt	ls
   139e0:	6a32      	ldrls	r2, [r6, #32]
   139e2:	189b      	addls	r3, r3, r2
    r = RdOff - WrOff - 1u;
   139e4:	3b01      	subs	r3, #1
   139e6:	1b5b      	subs	r3, r3, r5
    if (Avail < NumBytes) {
   139e8:	459a      	cmp	sl, r3
   139ea:	d8ce      	bhi.n	1398a <SEGGER_RTT_WriteNoLock+0x2a>
  Rem = pRing->SizeOfBuffer - WrOff;
   139ec:	4404      	add	r4, r0
   139ee:	eb09 04c4 	add.w	r4, r9, r4, lsl #3
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   139f2:	f100 0801 	add.w	r8, r0, #1
  Rem = pRing->SizeOfBuffer - WrOff;
   139f6:	6a26      	ldr	r6, [r4, #32]
   139f8:	1b77      	subs	r7, r6, r5
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   139fa:	eb08 0848 	add.w	r8, r8, r8, lsl #1
  if (Rem > NumBytes) {
   139fe:	45ba      	cmp	sl, r7
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   13a00:	eb09 09c8 	add.w	r9, r9, r8, lsl #3
  if (Rem > NumBytes) {
   13a04:	d26e      	bcs.n	13ae4 <SEGGER_RTT_WriteNoLock+0x184>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   13a06:	f8d9 0004 	ldr.w	r0, [r9, #4]
   13a0a:	4652      	mov	r2, sl
   13a0c:	4428      	add	r0, r5
    pRing->WrOff = WrOff + NumBytes;
   13a0e:	4455      	add	r5, sl
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   13a10:	f7f9 ffea 	bl	d9e8 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
   13a14:	4657      	mov	r7, sl
   13a16:	6265      	str	r5, [r4, #36]	; 0x24
   13a18:	e7b7      	b.n	1398a <SEGGER_RTT_WriteNoLock+0x2a>
  WrOff = pRing->WrOff;
   13a1a:	f100 0801 	add.w	r8, r0, #1
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   13a1e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
  WrOff = pRing->WrOff;
   13a22:	6a75      	ldr	r5, [r6, #36]	; 0x24
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   13a24:	ea4f 08c8 	mov.w	r8, r8, lsl #3
  NumBytesWritten = 0u;
   13a28:	2700      	movs	r7, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   13a2a:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    if (RdOff > WrOff) {
   13a2c:	42aa      	cmp	r2, r5
      NumBytesToWrite = RdOff - WrOff - 1u;
   13a2e:	f102 34ff 	add.w	r4, r2, #4294967295	; 0xffffffff
    if (RdOff > WrOff) {
   13a32:	d922      	bls.n	13a7a <SEGGER_RTT_WriteNoLock+0x11a>
      NumBytesToWrite = RdOff - WrOff - 1u;
   13a34:	1b62      	subs	r2, r4, r5
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   13a36:	6a34      	ldr	r4, [r6, #32]
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   13a38:	4552      	cmp	r2, sl
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   13a3a:	eb09 0108 	add.w	r1, r9, r8
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   13a3e:	eba4 0405 	sub.w	r4, r4, r5
   13a42:	bf28      	it	cs
   13a44:	4652      	movcs	r2, sl
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   13a46:	4294      	cmp	r4, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   13a48:	6848      	ldr	r0, [r1, #4]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   13a4a:	bf28      	it	cs
   13a4c:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   13a4e:	4428      	add	r0, r5
   13a50:	4659      	mov	r1, fp
   13a52:	4622      	mov	r2, r4
   13a54:	f7f9 ffc8 	bl	d9e8 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   13a58:	6a33      	ldr	r3, [r6, #32]
    WrOff           += NumBytesToWrite;
   13a5a:	4425      	add	r5, r4
    if (WrOff == pRing->SizeOfBuffer) {
   13a5c:	429d      	cmp	r5, r3
    NumBytes        -= NumBytesToWrite;
   13a5e:	ebaa 0a04 	sub.w	sl, sl, r4
    NumBytesWritten += NumBytesToWrite;
   13a62:	4427      	add	r7, r4
    pBuffer         += NumBytesToWrite;
   13a64:	44a3      	add	fp, r4
    if (WrOff == pRing->SizeOfBuffer) {
   13a66:	d00d      	beq.n	13a84 <SEGGER_RTT_WriteNoLock+0x124>
    pRing->WrOff = WrOff;
   13a68:	6275      	str	r5, [r6, #36]	; 0x24
  } while (NumBytes);
   13a6a:	f1ba 0f00 	cmp.w	sl, #0
   13a6e:	d08c      	beq.n	1398a <SEGGER_RTT_WriteNoLock+0x2a>
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   13a70:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    if (RdOff > WrOff) {
   13a72:	42aa      	cmp	r2, r5
      NumBytesToWrite = RdOff - WrOff - 1u;
   13a74:	f102 34ff 	add.w	r4, r2, #4294967295	; 0xffffffff
    if (RdOff > WrOff) {
   13a78:	d8dc      	bhi.n	13a34 <SEGGER_RTT_WriteNoLock+0xd4>
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   13a7a:	6a34      	ldr	r4, [r6, #32]
   13a7c:	4422      	add	r2, r4
   13a7e:	3a01      	subs	r2, #1
   13a80:	1b52      	subs	r2, r2, r5
   13a82:	e7d9      	b.n	13a38 <SEGGER_RTT_WriteNoLock+0xd8>
    pRing->WrOff = WrOff;
   13a84:	2500      	movs	r5, #0
   13a86:	6275      	str	r5, [r6, #36]	; 0x24
  } while (NumBytes);
   13a88:	f1ba 0f00 	cmp.w	sl, #0
   13a8c:	d1cd      	bne.n	13a2a <SEGGER_RTT_WriteNoLock+0xca>
   13a8e:	e77c      	b.n	1398a <SEGGER_RTT_WriteNoLock+0x2a>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   13a90:	6a36      	ldr	r6, [r6, #32]
   13a92:	4437      	add	r7, r6
   13a94:	3f01      	subs	r7, #1
   13a96:	1b7f      	subs	r7, r7, r5
    Status = Avail < NumBytes ? Avail : NumBytes;
   13a98:	4557      	cmp	r7, sl
   13a9a:	bf28      	it	cs
   13a9c:	4657      	movcs	r7, sl
  Rem = pRing->SizeOfBuffer - WrOff;
   13a9e:	1b72      	subs	r2, r6, r5
  if (Rem > NumBytes) {
   13aa0:	4297      	cmp	r7, r2
   13aa2:	d383      	bcc.n	139ac <SEGGER_RTT_WriteNoLock+0x4c>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   13aa4:	f108 0a01 	add.w	sl, r8, #1
   13aa8:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
   13aac:	eb09 0aca 	add.w	sl, r9, sl, lsl #3
   13ab0:	4659      	mov	r1, fp
   13ab2:	f8da 0004 	ldr.w	r0, [sl, #4]
   13ab6:	9201      	str	r2, [sp, #4]
   13ab8:	4428      	add	r0, r5
   13aba:	f7f9 ff95 	bl	d9e8 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
   13abe:	1bbe      	subs	r6, r7, r6
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   13ac0:	9a01      	ldr	r2, [sp, #4]
   13ac2:	f8da 0004 	ldr.w	r0, [sl, #4]
    NumBytesAtOnce = NumBytes - Rem;
   13ac6:	4435      	add	r5, r6
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   13ac8:	eb0b 0102 	add.w	r1, fp, r2
   13acc:	462a      	mov	r2, r5
   13ace:	f7f9 ff8b 	bl	d9e8 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   13ad2:	4444      	add	r4, r8
   13ad4:	eb09 09c4 	add.w	r9, r9, r4, lsl #3
}
   13ad8:	4638      	mov	r0, r7
    pRing->WrOff = NumBytesAtOnce;
   13ada:	f8c9 5024 	str.w	r5, [r9, #36]	; 0x24
}
   13ade:	b003      	add	sp, #12
   13ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   13ae4:	f8d9 0004 	ldr.w	r0, [r9, #4]
   13ae8:	4428      	add	r0, r5
    NumBytesAtOnce = NumBytes - Rem;
   13aea:	4455      	add	r5, sl
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   13aec:	463a      	mov	r2, r7
    NumBytesAtOnce = NumBytes - Rem;
   13aee:	1bad      	subs	r5, r5, r6
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   13af0:	f7f9 ff7a 	bl	d9e8 <memcpy>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   13af4:	eb0b 0107 	add.w	r1, fp, r7
   13af8:	f8d9 0004 	ldr.w	r0, [r9, #4]
   13afc:	462a      	mov	r2, r5
   13afe:	f7f9 ff73 	bl	d9e8 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   13b02:	4657      	mov	r7, sl
   13b04:	6265      	str	r5, [r4, #36]	; 0x24
   13b06:	e740      	b.n	1398a <SEGGER_RTT_WriteNoLock+0x2a>
   13b08:	200000d8 	.word	0x200000d8

00013b0c <SEGGER_RTT_GetKey>:
*    >= 0 -   Character which has been read. (Possible values: 0 - 255)
*
*  Notes
*    (1) This function is only specified for accesses to RTT buffer 0.
*/
int SEGGER_RTT_GetKey(void) {
   13b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  INIT();
   13b10:	4c3e      	ldr	r4, [pc, #248]	; (13c0c <SEGGER_RTT_GetKey+0x100>)
int SEGGER_RTT_GetKey(void) {
   13b12:	b082      	sub	sp, #8
  SEGGER_RTT_LOCK();
   13b14:	f7f6 fcb2 	bl	a47c <os_arch_save_sr>
  INIT();
   13b18:	7825      	ldrb	r5, [r4, #0]
  SEGGER_RTT_LOCK();
   13b1a:	4606      	mov	r6, r0
  INIT();
   13b1c:	2d00      	cmp	r5, #0
   13b1e:	d04d      	beq.n	13bbc <SEGGER_RTT_GetKey+0xb0>
  WrOff = pRing->WrOff;
   13b20:	f8d4 a03c 	ldr.w	sl, [r4, #60]	; 0x3c
  RdOff = pRing->RdOff;
   13b24:	6c25      	ldr	r5, [r4, #64]	; 0x40
  if (RdOff > WrOff) {
   13b26:	4555      	cmp	r5, sl
   13b28:	d809      	bhi.n	13b3e <SEGGER_RTT_GetKey+0x32>
  if (NumBytesRem > 0u) {
   13b2a:	4555      	cmp	r5, sl
   13b2c:	d128      	bne.n	13b80 <SEGGER_RTT_GetKey+0x74>
  SEGGER_RTT_UNLOCK();
   13b2e:	4630      	mov	r0, r6
   13b30:	f7f6 fcaa 	bl	a488 <os_arch_restore_sr>

  r = (int)SEGGER_RTT_Read(0u, &c, 1u);
  if (r == 1) {
    r = (int)(unsigned char)c;
  } else {
    r = -1;
   13b34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  }
  return r;
}
   13b38:	b002      	add	sp, #8
   13b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
   13b3e:	e9d4 980d 	ldrd	r9, r8, [r4, #52]	; 0x34
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
   13b42:	eba8 0705 	sub.w	r7, r8, r5
    NumBytesRem = MIN(NumBytesRem, BufferSize);
   13b46:	2f01      	cmp	r7, #1
   13b48:	bf28      	it	cs
   13b4a:	2701      	movcs	r7, #1
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
   13b4c:	463a      	mov	r2, r7
   13b4e:	eb09 0105 	add.w	r1, r9, r5
   13b52:	f10d 0007 	add.w	r0, sp, #7
   13b56:	f7f9 ff47 	bl	d9e8 <memcpy>
    RdOff        += NumBytesRem;
   13b5a:	19eb      	adds	r3, r5, r7
    if (RdOff == pRing->SizeOfBuffer) {
   13b5c:	4598      	cmp	r8, r3
    BufferSize   -= NumBytesRem;
   13b5e:	f1c7 0201 	rsb	r2, r7, #1
  NumBytesRem = WrOff - RdOff;
   13b62:	bf14      	ite	ne
   13b64:	ebaa 0a03 	subne.w	sl, sl, r3
      RdOff = 0u;
   13b68:	2300      	moveq	r3, #0
  NumBytesRem = MIN(NumBytesRem, BufferSize);
   13b6a:	4552      	cmp	r2, sl
   13b6c:	bf28      	it	cs
   13b6e:	4652      	movcs	r2, sl
  if (NumBytesRem > 0u) {
   13b70:	b9a2      	cbnz	r2, 13b9c <SEGGER_RTT_GetKey+0x90>
  if (NumBytesRead) {
   13b72:	4545      	cmp	r5, r8
   13b74:	d0db      	beq.n	13b2e <SEGGER_RTT_GetKey+0x22>
  SEGGER_RTT_UNLOCK();
   13b76:	4630      	mov	r0, r6
    pRing->RdOff = RdOff;
   13b78:	6423      	str	r3, [r4, #64]	; 0x40
  SEGGER_RTT_UNLOCK();
   13b7a:	f7f6 fc85 	bl	a488 <os_arch_restore_sr>
  if (r == 1) {
   13b7e:	e008      	b.n	13b92 <SEGGER_RTT_GetKey+0x86>
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
   13b80:	6b62      	ldr	r2, [r4, #52]	; 0x34
    RdOff        += NumBytesRem;
   13b82:	1c6b      	adds	r3, r5, #1
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
   13b84:	5d52      	ldrb	r2, [r2, r5]
   13b86:	f88d 2007 	strb.w	r2, [sp, #7]
  SEGGER_RTT_UNLOCK();
   13b8a:	4630      	mov	r0, r6
    pRing->RdOff = RdOff;
   13b8c:	6423      	str	r3, [r4, #64]	; 0x40
  SEGGER_RTT_UNLOCK();
   13b8e:	f7f6 fc7b 	bl	a488 <os_arch_restore_sr>
    r = (int)(unsigned char)c;
   13b92:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
   13b96:	b002      	add	sp, #8
   13b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
   13b9c:	f107 0208 	add.w	r2, r7, #8
   13ba0:	eb0d 0702 	add.w	r7, sp, r2
   13ba4:	f819 2003 	ldrb.w	r2, [r9, r3]
   13ba8:	f807 2c01 	strb.w	r2, [r7, #-1]
    RdOff        += NumBytesRem;
   13bac:	3301      	adds	r3, #1
  SEGGER_RTT_UNLOCK();
   13bae:	4630      	mov	r0, r6
    pRing->RdOff = RdOff;
   13bb0:	6423      	str	r3, [r4, #64]	; 0x40
  SEGGER_RTT_UNLOCK();
   13bb2:	f7f6 fc69 	bl	a488 <os_arch_restore_sr>
  if (r == 1) {
   13bb6:	4545      	cmp	r5, r8
   13bb8:	d0eb      	beq.n	13b92 <SEGGER_RTT_GetKey+0x86>
   13bba:	e7bb      	b.n	13b34 <SEGGER_RTT_GetKey+0x28>
  p->aUp[0].sName         = "Terminal";
   13bbc:	4a14      	ldr	r2, [pc, #80]	; (13c10 <SEGGER_RTT_GetKey+0x104>)
  p->aUp[0].RdOff         = 0u;
   13bbe:	62a5      	str	r5, [r4, #40]	; 0x28
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   13bc0:	2301      	movs	r3, #1
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   13bc2:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
   13bc6:	f104 0348 	add.w	r3, r4, #72	; 0x48
   13bca:	e9c4 2306 	strd	r2, r3, [r4, #24]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   13bce:	f44f 6380 	mov.w	r3, #1024	; 0x400
   13bd2:	6223      	str	r3, [r4, #32]
  strcpy(&p->acID[7], "RTT");
   13bd4:	4b0f      	ldr	r3, [pc, #60]	; (13c14 <SEGGER_RTT_GetKey+0x108>)
  p->aDown[0].WrOff         = 0u;
   13bd6:	63e5      	str	r5, [r4, #60]	; 0x3c
  strcpy(&p->acID[7], "RTT");
   13bd8:	6818      	ldr	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
   13bda:	4b0f      	ldr	r3, [pc, #60]	; (13c18 <SEGGER_RTT_GetKey+0x10c>)
  WrOff = pRing->WrOff;
   13bdc:	f8d4 a03c 	ldr.w	sl, [r4, #60]	; 0x3c
  strcpy(&p->acID[7], "RTT");
   13be0:	f8c4 0007 	str.w	r0, [r4, #7]
  p->aDown[0].pBuffer       = _acDownBuffer;
   13be4:	f504 6189 	add.w	r1, r4, #1096	; 0x448
   13be8:	6361      	str	r1, [r4, #52]	; 0x34
  strcpy(&p->acID[0], "SEGGER");
   13bea:	e893 0003 	ldmia.w	r3, {r0, r1}
  p->acID[6] = ' ';
   13bee:	2320      	movs	r3, #32
   13bf0:	71a3      	strb	r3, [r4, #6]
  if (NumBytesRem > 0u) {
   13bf2:	4555      	cmp	r5, sl
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   13bf4:	f04f 0310 	mov.w	r3, #16
  p->aDown[0].sName         = "Terminal";
   13bf8:	e9c4 520b 	strd	r5, r2, [r4, #44]	; 0x2c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   13bfc:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
  p->aUp[0].WrOff         = 0u;
   13c00:	6265      	str	r5, [r4, #36]	; 0x24
  strcpy(&p->acID[0], "SEGGER");
   13c02:	6020      	str	r0, [r4, #0]
   13c04:	80a1      	strh	r1, [r4, #4]
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   13c06:	63a3      	str	r3, [r4, #56]	; 0x38
  if (NumBytesRem > 0u) {
   13c08:	d091      	beq.n	13b2e <SEGGER_RTT_GetKey+0x22>
   13c0a:	e7b9      	b.n	13b80 <SEGGER_RTT_GetKey+0x74>
   13c0c:	200000d8 	.word	0x200000d8
   13c10:	00023e7c 	.word	0x00023e7c
   13c14:	00023e88 	.word	0x00023e88
   13c18:	00023e8c 	.word	0x00023e8c

00013c1c <SEGGER_RTT_Init>:
  strcpy(&p->acID[7], "RTT");
   13c1c:	4814      	ldr	r0, [pc, #80]	; (13c70 <SEGGER_RTT_Init+0x54>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   13c1e:	4b15      	ldr	r3, [pc, #84]	; (13c74 <SEGGER_RTT_Init+0x58>)
  strcpy(&p->acID[0], "SEGGER");
   13c20:	4915      	ldr	r1, [pc, #84]	; (13c78 <SEGGER_RTT_Init+0x5c>)
  strcpy(&p->acID[7], "RTT");
   13c22:	6800      	ldr	r0, [r0, #0]
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
   13c24:	b410      	push	{r4}
  strcpy(&p->acID[7], "RTT");
   13c26:	f8c3 0007 	str.w	r0, [r3, #7]
  strcpy(&p->acID[0], "SEGGER");
   13c2a:	c903      	ldmia	r1, {r0, r1}
  p->aUp[0].sName         = "Terminal";
   13c2c:	4c13      	ldr	r4, [pc, #76]	; (13c7c <SEGGER_RTT_Init+0x60>)
  strcpy(&p->acID[0], "SEGGER");
   13c2e:	6018      	str	r0, [r3, #0]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   13c30:	2001      	movs	r0, #1
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   13c32:	e9c3 0004 	strd	r0, r0, [r3, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
   13c36:	f103 0048 	add.w	r0, r3, #72	; 0x48
   13c3a:	e9c3 4006 	strd	r4, r0, [r3, #24]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   13c3e:	f44f 6080 	mov.w	r0, #1024	; 0x400
  p->acID[6] = ' ';
   13c42:	f04f 0c20 	mov.w	ip, #32
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   13c46:	6218      	str	r0, [r3, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
   13c48:	f503 6089 	add.w	r0, r3, #1096	; 0x448
  p->aUp[0].RdOff         = 0u;
   13c4c:	2200      	movs	r2, #0
  p->acID[6] = ' ';
   13c4e:	f883 c006 	strb.w	ip, [r3, #6]
  p->aDown[0].pBuffer       = _acDownBuffer;
   13c52:	6358      	str	r0, [r3, #52]	; 0x34
  strcpy(&p->acID[0], "SEGGER");
   13c54:	8099      	strh	r1, [r3, #4]
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   13c56:	2010      	movs	r0, #16
  p->aDown[0].sName         = "Terminal";
   13c58:	e9c3 240b 	strd	r2, r4, [r3, #44]	; 0x2c
  p->aUp[0].RdOff         = 0u;
   13c5c:	629a      	str	r2, [r3, #40]	; 0x28
  _DoInit();
}
   13c5e:	f85d 4b04 	ldr.w	r4, [sp], #4
  p->aUp[0].WrOff         = 0u;
   13c62:	625a      	str	r2, [r3, #36]	; 0x24
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   13c64:	6398      	str	r0, [r3, #56]	; 0x38
  p->aDown[0].RdOff         = 0u;
   13c66:	641a      	str	r2, [r3, #64]	; 0x40
  p->aDown[0].WrOff         = 0u;
   13c68:	63da      	str	r2, [r3, #60]	; 0x3c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   13c6a:	645a      	str	r2, [r3, #68]	; 0x44
}
   13c6c:	4770      	bx	lr
   13c6e:	bf00      	nop
   13c70:	00023e88 	.word	0x00023e88
   13c74:	200000d8 	.word	0x200000d8
   13c78:	00023e8c 	.word	0x00023e8c
   13c7c:	00023e7c 	.word	0x00023e7c

00013c80 <uwb_dw1000_read_sts_rxtime>:
inline static uint64_t
uwb_dw1000_read_sts_rxtime(struct uwb_dev* __attribute((unused)) dev)
{
    /* No such functionality */
    return 0xffffffffffffffffULL;
}
   13c80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13c84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   13c88:	4770      	bx	lr

00013c8a <uwb_dw1000_hal_noblock_wait>:
{
   13c8a:	b508      	push	{r3, lr}
    return hal_dw1000_rw_noblock_wait((dw1000_dev_instance_t *)dev, timeout);
   13c8c:	f001 f956 	bl	14f3c <hal_dw1000_rw_noblock_wait>
}
   13c90:	bd08      	pop	{r3, pc}

00013c92 <uwb_dw1000_mac_framefilter>:
    assert(0);
}

struct uwb_dev_status
uwb_dw1000_mac_framefilter(struct uwb_dev * dev, uint16_t enable)
{
   13c92:	b508      	push	{r3, lr}
   13c94:	460b      	mov	r3, r1
    uint16_t dw1k_en = 0;

    /* Translate uwb-level frame filtering flags to dw1000 reg */
    if (enable & UWB_FF_BEACON_EN) dw1k_en |= DWT_FF_BEACON_EN;
   13c96:	f011 0101 	ands.w	r1, r1, #1
   13c9a:	d000      	beq.n	13c9e <uwb_dw1000_mac_framefilter+0xc>
   13c9c:	2104      	movs	r1, #4
    if (enable & UWB_FF_DATA_EN)   dw1k_en |= DWT_FF_DATA_EN;
   13c9e:	f013 0f02 	tst.w	r3, #2
   13ca2:	d001      	beq.n	13ca8 <uwb_dw1000_mac_framefilter+0x16>
   13ca4:	f041 0108 	orr.w	r1, r1, #8
    if (enable & UWB_FF_ACK_EN)    dw1k_en |= DWT_FF_ACK_EN;
   13ca8:	f013 0f04 	tst.w	r3, #4
   13cac:	d001      	beq.n	13cb2 <uwb_dw1000_mac_framefilter+0x20>
   13cae:	f041 0110 	orr.w	r1, r1, #16
    if (enable & UWB_FF_MAC_EN)    dw1k_en |= DWT_FF_MAC_EN;
   13cb2:	f013 0f08 	tst.w	r3, #8
   13cb6:	d001      	beq.n	13cbc <uwb_dw1000_mac_framefilter+0x2a>
   13cb8:	f041 0120 	orr.w	r1, r1, #32
    if (enable & UWB_FF_RSVD_EN)   dw1k_en |= DWT_FF_RSVD_EN;
   13cbc:	f013 0f10 	tst.w	r3, #16
   13cc0:	d001      	beq.n	13cc6 <uwb_dw1000_mac_framefilter+0x34>
   13cc2:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    if (enable & UWB_FF_COORD_EN)  dw1k_en |= DWT_FF_COORD_EN;
   13cc6:	f413 7f80 	tst.w	r3, #256	; 0x100
   13cca:	d001      	beq.n	13cd0 <uwb_dw1000_mac_framefilter+0x3e>
   13ccc:	f041 0102 	orr.w	r1, r1, #2

    return dw1000_mac_framefilter((dw1000_dev_instance_t *)dev, dw1k_en);
   13cd0:	f001 fd78 	bl	157c4 <dw1000_mac_framefilter>
}
   13cd4:	bd08      	pop	{r3, pc}

00013cd6 <uwb_dw1000_set_autoack>:

struct uwb_dev_status
uwb_dw1000_set_autoack(struct uwb_dev * dev, bool enable)
{
   13cd6:	b508      	push	{r3, lr}
    return dw1000_set_autoack((dw1000_dev_instance_t *)dev, enable);
   13cd8:	f001 fdb4 	bl	15844 <dw1000_set_autoack>
}
   13cdc:	bd08      	pop	{r3, pc}

00013cde <uwb_dw1000_set_autoack_delay>:

struct uwb_dev_status
uwb_dw1000_set_autoack_delay(struct uwb_dev * dev, uint8_t delay)
{
   13cde:	b508      	push	{r3, lr}
    return dw1000_set_autoack_delay((dw1000_dev_instance_t *)dev, delay);
   13ce0:	f001 fdfc 	bl	158dc <dw1000_set_autoack_delay>
}
   13ce4:	bd08      	pop	{r3, pc}

00013ce6 <uwb_dw1000_event_cnt_ctrl>:

struct uwb_dev_status
uwb_dw1000_event_cnt_ctrl(struct uwb_dev * dev, bool enable, bool reset)
{
   13ce6:	b508      	push	{r3, lr}
    return dw1000_phy_event_cnt_ctrl((dw1000_dev_instance_t *)dev, enable, reset);
   13ce8:	f003 fc65 	bl	175b6 <dw1000_phy_event_cnt_ctrl>
}
   13cec:	bd08      	pop	{r3, pc}

00013cee <uwb_dw1000_event_cnt_read>:

struct uwb_dev_status
uwb_dw1000_event_cnt_read(struct uwb_dev * dev, struct uwb_dev_evcnt *res)
{
   13cee:	b508      	push	{r3, lr}
    return dw1000_phy_event_cnt_read((dw1000_dev_instance_t *)dev, res);
   13cf0:	f003 fc84 	bl	175fc <dw1000_phy_event_cnt_read>
}
   13cf4:	bd08      	pop	{r3, pc}
	...

00013cf8 <uwb_dw1000_calc_pdoa>:
{
   13cf8:	b508      	push	{r3, lr}
    printf("%s not implemented\n", __func__);
   13cfa:	4905      	ldr	r1, [pc, #20]	; (13d10 <uwb_dw1000_calc_pdoa+0x18>)
   13cfc:	4805      	ldr	r0, [pc, #20]	; (13d14 <uwb_dw1000_calc_pdoa+0x1c>)
   13cfe:	f7fa fa93 	bl	e228 <printf>
    assert(0);
   13d02:	2300      	movs	r3, #0
   13d04:	461a      	mov	r2, r3
   13d06:	4619      	mov	r1, r3
   13d08:	4618      	mov	r0, r3
   13d0a:	f7f5 f99f 	bl	904c <__assert_func>
   13d0e:	bf00      	nop
   13d10:	00023ed4 	.word	0x00023ed4
   13d14:	00023e94 	.word	0x00023e94

00013d18 <uwb_dw1000_estimate_los>:
{
   13d18:	b508      	push	{r3, lr}
    return dw1000_estimate_los(rssi, fppl);
   13d1a:	f002 ff49 	bl	16bb0 <dw1000_estimate_los>
}
   13d1e:	bd08      	pop	{r3, pc}

00013d20 <uwb_dw1000_calc_fppl>:
{
   13d20:	b508      	push	{r3, lr}
    return dw1000_calc_fppl((dw1000_dev_instance_t *)dev, (struct _dw1000_dev_rxdiag_t*)diag);
   13d22:	f002 fea9 	bl	16a78 <dw1000_calc_fppl>
}
   13d26:	bd08      	pop	{r3, pc}

00013d28 <uwb_dw1000_calc_seq_rssi>:
{
   13d28:	b508      	push	{r3, lr}
    return dw1000_calc_rssi((dw1000_dev_instance_t *)dev, (struct _dw1000_dev_rxdiag_t*)diag);
   13d2a:	f002 ff01 	bl	16b30 <dw1000_calc_rssi>
}
   13d2e:	bd08      	pop	{r3, pc}

00013d30 <uwb_dw1000_calc_rssi>:
{
   13d30:	b508      	push	{r3, lr}
    return dw1000_calc_rssi((dw1000_dev_instance_t *)dev, (struct _dw1000_dev_rxdiag_t*)diag);
   13d32:	f002 fefd 	bl	16b30 <dw1000_calc_rssi>
}
   13d36:	bd08      	pop	{r3, pc}

00013d38 <uwb_dw1000_get_fppl>:
{
   13d38:	b508      	push	{r3, lr}
    return dw1000_get_fppl((dw1000_dev_instance_t *)dev);
   13d3a:	f002 fee9 	bl	16b10 <dw1000_get_fppl>
}
   13d3e:	bd08      	pop	{r3, pc}

00013d40 <uwb_dw1000_get_rssi>:
{
   13d40:	b508      	push	{r3, lr}
    return dw1000_get_rssi((dw1000_dev_instance_t *)dev);
   13d42:	f002 ff25 	bl	16b90 <dw1000_get_rssi>
}
   13d46:	bd08      	pop	{r3, pc}

00013d48 <uwb_dw1000_calc_clock_offset_ratio>:
{
   13d48:	b508      	push	{r3, lr}
    if (type == UWB_CR_CARRIER_INTEGRATOR) {
   13d4a:	b122      	cbz	r2, 13d56 <uwb_dw1000_calc_clock_offset_ratio+0xe>
    } else if (type == UWB_CR_RXTTCKO) {
   13d4c:	2a01      	cmp	r2, #1
   13d4e:	d005      	beq.n	13d5c <uwb_dw1000_calc_clock_offset_ratio+0x14>
    return DPL_FLOAT64_INIT(0.0f);
   13d50:	ed9f 0b05 	vldr	d0, [pc, #20]	; 13d68 <uwb_dw1000_calc_clock_offset_ratio+0x20>
}
   13d54:	bd08      	pop	{r3, pc}
        return dw1000_calc_clock_offset_ratio((dw1000_dev_instance_t *)dev, val);
   13d56:	f002 f883 	bl	15e60 <dw1000_calc_clock_offset_ratio>
   13d5a:	e7fb      	b.n	13d54 <uwb_dw1000_calc_clock_offset_ratio+0xc>
        return dw1000_calc_clock_offset_ratio_ttco((dw1000_dev_instance_t *)dev, val);
   13d5c:	f002 f901 	bl	15f62 <dw1000_calc_clock_offset_ratio_ttco>
   13d60:	e7f8      	b.n	13d54 <uwb_dw1000_calc_clock_offset_ratio+0xc>
   13d62:	bf00      	nop
   13d64:	f3af 8000 	nop.w
	...

00013d70 <uwb_dw1000_set_on_error_continue>:
{
   13d70:	b508      	push	{r3, lr}
    return dw1000_set_on_error_continue((dw1000_dev_instance_t *)dev, enable);
   13d72:	f001 fc48 	bl	15606 <dw1000_set_on_error_continue>
}
   13d76:	bd08      	pop	{r3, pc}

00013d78 <uwb_dw1000_phy_repeated_frames>:
{
   13d78:	b508      	push	{r3, lr}
    return dw1000_phy_repeated_frames((dw1000_dev_instance_t *)dev, rate);
   13d7a:	f003 fabd 	bl	172f8 <dw1000_phy_repeated_frames>
}
   13d7e:	bd08      	pop	{r3, pc}

00013d80 <uwb_dw1000_phy_rx_reset>:
{
   13d80:	b508      	push	{r3, lr}
    return dw1000_phy_rx_reset((dw1000_dev_instance_t *)dev);
   13d82:	f003 f9c0 	bl	17106 <dw1000_phy_rx_reset>
}
   13d86:	bd08      	pop	{r3, pc}

00013d88 <uwb_dw1000_phy_forcetrxoff>:
{
   13d88:	b508      	push	{r3, lr}
    return dw1000_phy_forcetrxoff((dw1000_dev_instance_t *)dev);
   13d8a:	f003 f9f1 	bl	17170 <dw1000_phy_forcetrxoff>
}
   13d8e:	bd08      	pop	{r3, pc}

00013d90 <uwb_dw1000_phy_data_duration>:
{
   13d90:	b508      	push	{r3, lr}
    return dw1000_phy_data_duration(&dev->attrib, nlen);
   13d92:	f200 5034 	addw	r0, r0, #1332	; 0x534
   13d96:	f003 fb71 	bl	1747c <dw1000_phy_data_duration>
}
   13d9a:	bd08      	pop	{r3, pc}

00013d9c <uwb_dw1000_phy_SHR_duration>:
{
   13d9c:	b508      	push	{r3, lr}
    return dw1000_phy_SHR_duration(&dev->attrib);
   13d9e:	f200 5034 	addw	r0, r0, #1332	; 0x534
   13da2:	f003 fb57 	bl	17454 <dw1000_phy_SHR_duration>
}
   13da6:	bd08      	pop	{r3, pc}

00013da8 <uwb_dw1000_phy_frame_duration>:
{
   13da8:	b508      	push	{r3, lr}
    return dw1000_phy_frame_duration(&dev->attrib, nlen);
   13daa:	f200 5034 	addw	r0, r0, #1332	; 0x534
   13dae:	f003 fb8f 	bl	174d0 <dw1000_phy_frame_duration>
}
   13db2:	bd08      	pop	{r3, pc}

00013db4 <uwb_dw1000_read_txtime_lo32>:
{
   13db4:	b508      	push	{r3, lr}
    return dw1000_read_txtime_lo((dw1000_dev_instance_t *)dev);
   13db6:	f002 ff49 	bl	16c4c <dw1000_read_txtime_lo>
}
   13dba:	bd08      	pop	{r3, pc}

00013dbc <uwb_dw1000_read_txtime>:
{
   13dbc:	b508      	push	{r3, lr}
    return dw1000_read_txtime((dw1000_dev_instance_t *)dev);
   13dbe:	f002 ff3d 	bl	16c3c <dw1000_read_txtime>
}
   13dc2:	bd08      	pop	{r3, pc}

00013dc4 <uwb_dw1000_read_rxtime_lo32>:
{
   13dc4:	b508      	push	{r3, lr}
    return dw1000_read_rxtime_lo((dw1000_dev_instance_t *)dev);
   13dc6:	f002 ff32 	bl	16c2e <dw1000_read_rxtime_lo>
}
   13dca:	bd08      	pop	{r3, pc}

00013dcc <uwb_dw1000_read_rxtime>:
{
   13dcc:	b508      	push	{r3, lr}
    return dw1000_read_rxtime((dw1000_dev_instance_t *)dev);
   13dce:	f002 ff26 	bl	16c1e <dw1000_read_rxtime>
}
   13dd2:	bd08      	pop	{r3, pc}

00013dd4 <uwb_dw1000_read_systime_lo32>:
{
   13dd4:	b508      	push	{r3, lr}
    return dw1000_read_systime_lo((dw1000_dev_instance_t *)dev);
   13dd6:	f002 ff1b 	bl	16c10 <dw1000_read_systime_lo>
}
   13dda:	bd08      	pop	{r3, pc}

00013ddc <uwb_dw1000_read_systime>:
{
   13ddc:	b508      	push	{r3, lr}
    return dw1000_read_systime((dw1000_dev_instance_t *)dev);
   13dde:	f002 ff0f 	bl	16c00 <dw1000_read_systime>
}
   13de2:	bd08      	pop	{r3, pc}

00013de4 <uwb_dw1000_set_rxauto_disable>:
{
   13de4:	b508      	push	{r3, lr}
    return dw1000_set_rxauto_disable((dw1000_dev_instance_t *)dev, disable);
   13de6:	f001 fc17 	bl	15618 <dw1000_set_rxauto_disable>
}
   13dea:	bd08      	pop	{r3, pc}

00013dec <uwb_dw1000_set_wait4resp_delay>:
{
   13dec:	b508      	push	{r3, lr}
    return dw1000_set_wait4resp_delay((dw1000_dev_instance_t *)dev, delay);
   13dee:	f001 fd89 	bl	15904 <dw1000_set_wait4resp_delay>
}
   13df2:	bd08      	pop	{r3, pc}

00013df4 <uwb_dw1000_set_wait4resp>:
{
   13df4:	b508      	push	{r3, lr}
    return dw1000_set_wait4resp((dw1000_dev_instance_t *)dev, enable);
   13df6:	f001 fbf7 	bl	155e8 <dw1000_set_wait4resp>
}
   13dfa:	bd08      	pop	{r3, pc}

00013dfc <uwb_dw1000_tx_wait>:
{
   13dfc:	b508      	push	{r3, lr}
    return dw1000_tx_wait((dw1000_dev_instance_t *)dev, timeout);
   13dfe:	f001 fa87 	bl	15310 <dw1000_tx_wait>
}
   13e02:	bd08      	pop	{r3, pc}

00013e04 <uwb_dw1000_write_tx_fctrl>:
{
   13e04:	b508      	push	{r3, lr}
    dw1000_write_tx_fctrl((dw1000_dev_instance_t *)dev, tx_frame_length,
   13e06:	f001 f9a7 	bl	15158 <dw1000_write_tx_fctrl>
}
   13e0a:	bd08      	pop	{r3, pc}

00013e0c <uwb_dw1000_write_tx>:
{
   13e0c:	b508      	push	{r3, lr}
    return dw1000_write_tx((dw1000_dev_instance_t *)dev, tx_frame_bytes,
   13e0e:	f001 f956 	bl	150be <dw1000_write_tx>
}
   13e12:	bd08      	pop	{r3, pc}

00013e14 <uwb_dw1000_stop_rx>:
{
   13e14:	b508      	push	{r3, lr}
    return dw1000_stop_rx((dw1000_dev_instance_t *)dev);
   13e16:	f001 fb93 	bl	15540 <dw1000_stop_rx>
}
   13e1a:	bd08      	pop	{r3, pc}

00013e1c <uwb_dw1000_start_rx>:
{
   13e1c:	b508      	push	{r3, lr}
    return dw1000_start_rx((dw1000_dev_instance_t *)dev);
   13e1e:	f001 fab8 	bl	15392 <dw1000_start_rx>
}
   13e22:	bd08      	pop	{r3, pc}

00013e24 <uwb_dw1000_start_tx>:
{
   13e24:	b508      	push	{r3, lr}
    return dw1000_start_tx((dw1000_dev_instance_t *)dev);
   13e26:	f001 f9d8 	bl	151da <dw1000_start_tx>
}
   13e2a:	bd08      	pop	{r3, pc}

00013e2c <uwb_dw1000_set_delay_start>:
{
   13e2c:	b508      	push	{r3, lr}
    return dw1000_set_delay_start((dw1000_dev_instance_t *)dev, dx_time);
   13e2e:	f001 fa7b 	bl	15328 <dw1000_set_delay_start>
}
   13e32:	bd08      	pop	{r3, pc}

00013e34 <uwb_dw1000_set_abs_timeout>:
{
   13e34:	b508      	push	{r3, lr}
    return dw1000_set_abs_timeout((dw1000_dev_instance_t *)dev, rx_end);
   13e36:	f001 fc8f 	bl	15758 <dw1000_set_abs_timeout>
}
   13e3a:	bd08      	pop	{r3, pc}

00013e3c <uwb_dw1000_set_rx_window>:
{
   13e3c:	b500      	push	{lr}
   13e3e:	b083      	sub	sp, #12
    return dw1000_set_rx_window((dw1000_dev_instance_t *)dev, rx_start, rx_end);
   13e40:	ed9d 7b04 	vldr	d7, [sp, #16]
   13e44:	ed8d 7b00 	vstr	d7, [sp]
   13e48:	f001 fc65 	bl	15716 <dw1000_set_rx_window>
}
   13e4c:	b003      	add	sp, #12
   13e4e:	f85d fb04 	ldr.w	pc, [sp], #4

00013e52 <uwb_dw1000_adj_rx_timeout>:
{
   13e52:	b508      	push	{r3, lr}
    return dw1000_adj_rx_timeout((dw1000_dev_instance_t *)dev, timeout);
   13e54:	b289      	uxth	r1, r1
   13e56:	f001 fbe8 	bl	1562a <dw1000_adj_rx_timeout>
}
   13e5a:	bd08      	pop	{r3, pc}

00013e5c <uwb_dw1000_set_rx_timeout>:
{
   13e5c:	b508      	push	{r3, lr}
    return dw1000_set_rx_timeout((dw1000_dev_instance_t *)dev, timeout);
   13e5e:	b289      	uxth	r1, r1
   13e60:	f001 fc03 	bl	1566a <dw1000_set_rx_timeout>
}
   13e64:	bd08      	pop	{r3, pc}

00013e66 <uwb_dw1000_set_dblrxbuf>:
{
   13e66:	b508      	push	{r3, lr}
    return dw1000_set_dblrxbuff((dw1000_dev_instance_t *)dev, enable);
   13e68:	f001 fd91 	bl	1598e <dw1000_set_dblrxbuff>
}
   13e6c:	bd08      	pop	{r3, pc}

00013e6e <uwb_dw1000_txrf_power_value>:
{
   13e6e:	b508      	push	{r3, lr}
    return dw1000_phy_txrf_power_value((dw1000_dev_instance_t *)dev, reg, coarse, fine);
   13e70:	f003 fb3b 	bl	174ea <dw1000_phy_txrf_power_value>
}
   13e74:	bd08      	pop	{r3, pc}

00013e76 <uwb_dw1000_txrf_config>:
{
   13e76:	b508      	push	{r3, lr}
    dw1000_phy_config_txrf((dw1000_dev_instance_t *)dev, config);
   13e78:	f003 f842 	bl	16f00 <dw1000_phy_config_txrf>
}
   13e7c:	bd08      	pop	{r3, pc}

00013e7e <uwb_dw1000_mac_config>:
{
   13e7e:	b508      	push	{r3, lr}
    return dw1000_mac_config((dw1000_dev_instance_t *)dev, config);
   13e80:	f001 fdea 	bl	15a58 <dw1000_mac_config>
}
   13e84:	bd08      	pop	{r3, pc}
	...

00013e88 <dw1000_read>:
{
   13e88:	b570      	push	{r4, r5, r6, lr}
   13e8a:	b084      	sub	sp, #16
   13e8c:	4604      	mov	r4, r0
   13e8e:	f8bd 5020 	ldrh.w	r5, [sp, #32]
    dw1000_cmd_t cmd = {
   13e92:	f001 003f 	and.w	r0, r1, #63	; 0x3f
   13e96:	f04f 0e00 	mov.w	lr, #0
   13e9a:	f360 0e05 	bfi	lr, r0, #0, #6
        .subindex = subaddress != 0,
   13e9e:	4694      	mov	ip, r2
   13ea0:	3a00      	subs	r2, #0
   13ea2:	bf18      	it	ne
   13ea4:	2201      	movne	r2, #1
    dw1000_cmd_t cmd = {
   13ea6:	f362 1e86 	bfi	lr, r2, #6, #1
   13eaa:	f36f 1ec7 	bfc	lr, #7, #1
        .extended = subaddress > 0x7F,
   13eae:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
   13eb2:	bf94      	ite	ls
   13eb4:	2600      	movls	r6, #0
   13eb6:	2601      	movhi	r6, #1
    dw1000_cmd_t cmd = {
   13eb8:	f366 2e08 	bfi	lr, r6, #8, #1
   13ebc:	f36c 2e57 	bfi	lr, ip, #9, #15
        [0] = cmd.operation << 7 | cmd.subindex << 6 | cmd.reg,
   13ec0:	ea40 1282 	orr.w	r2, r0, r2, lsl #6
    uint8_t header[] = {
   13ec4:	f88d 200c 	strb.w	r2, [sp, #12]
        [1] = cmd.extended << 7 | (uint8_t) (subaddress),
   13ec8:	fa4f f28c 	sxtb.w	r2, ip
   13ecc:	ea42 12c6 	orr.w	r2, r2, r6, lsl #7
    uint8_t header[] = {
   13ed0:	f88d 200d 	strb.w	r2, [sp, #13]
        [2] = (uint8_t) (subaddress >> 7)
   13ed4:	f3cc 12c7 	ubfx	r2, ip, #7, #8
    uint8_t header[] = {
   13ed8:	f88d 200e 	strb.w	r2, [sp, #14]
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   13edc:	4a1b      	ldr	r2, [pc, #108]	; (13f4c <dw1000_read+0xc4>)
   13ede:	ea0e 0202 	and.w	r2, lr, r2
   13ee2:	b122      	cbz	r2, 13eee <dw1000_read+0x66>
   13ee4:	f41e 7f80 	tst.w	lr, #256	; 0x100
   13ee8:	d01b      	beq.n	13f22 <dw1000_read+0x9a>
   13eea:	2203      	movs	r2, #3
   13eec:	e000      	b.n	13ef0 <dw1000_read+0x68>
   13eee:	2201      	movs	r2, #1
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
   13ef0:	293f      	cmp	r1, #63	; 0x3f
   13ef2:	d818      	bhi.n	13f26 <dw1000_read+0x9e>
    assert((subaddress <= 0x7FFF) && ((subaddress + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
   13ef4:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
   13ef8:	d11b      	bne.n	13f32 <dw1000_read+0xaa>
   13efa:	44ac      	add	ip, r5
   13efc:	f5bc 4f00 	cmp.w	ip, #32768	; 0x8000
   13f00:	da17      	bge.n	13f32 <dw1000_read+0xaa>
    if (length < MYNEWT_VAL(DW1000_DEVICE_SPI_RD_MAX_NOBLOCK) ||
   13f02:	2d08      	cmp	r5, #8
   13f04:	d904      	bls.n	13f10 <dw1000_read+0x88>
   13f06:	f894 152e 	ldrb.w	r1, [r4, #1326]	; 0x52e
   13f0a:	f011 0f01 	tst.w	r1, #1
   13f0e:	d016      	beq.n	13f3e <dw1000_read+0xb6>
        hal_dw1000_read(inst, header, len, buffer, length);
   13f10:	9500      	str	r5, [sp, #0]
   13f12:	a903      	add	r1, sp, #12
   13f14:	4620      	mov	r0, r4
   13f16:	f000 fd3f 	bl	14998 <hal_dw1000_read>
}
   13f1a:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   13f1e:	b004      	add	sp, #16
   13f20:	bd70      	pop	{r4, r5, r6, pc}
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   13f22:	2202      	movs	r2, #2
   13f24:	e7e4      	b.n	13ef0 <dw1000_read+0x68>
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
   13f26:	2300      	movs	r3, #0
   13f28:	461a      	mov	r2, r3
   13f2a:	4619      	mov	r1, r3
   13f2c:	4618      	mov	r0, r3
   13f2e:	f7f5 f88d 	bl	904c <__assert_func>
    assert((subaddress <= 0x7FFF) && ((subaddress + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
   13f32:	2300      	movs	r3, #0
   13f34:	461a      	mov	r2, r3
   13f36:	4619      	mov	r1, r3
   13f38:	4618      	mov	r0, r3
   13f3a:	f7f5 f887 	bl	904c <__assert_func>
        hal_dw1000_read_noblock(inst, header, len, buffer, length);
   13f3e:	9500      	str	r5, [sp, #0]
   13f40:	a903      	add	r1, sp, #12
   13f42:	4620      	mov	r0, r4
   13f44:	f000 fd84 	bl	14a50 <hal_dw1000_read_noblock>
   13f48:	e7e7      	b.n	13f1a <dw1000_read+0x92>
   13f4a:	bf00      	nop
   13f4c:	00fffe00 	.word	0x00fffe00

00013f50 <dw1000_write>:
{
   13f50:	b570      	push	{r4, r5, r6, lr}
   13f52:	b084      	sub	sp, #16
   13f54:	4604      	mov	r4, r0
   13f56:	f8bd 5020 	ldrh.w	r5, [sp, #32]
    dw1000_cmd_t cmd = {
   13f5a:	f001 003f 	and.w	r0, r1, #63	; 0x3f
   13f5e:	f04f 0e00 	mov.w	lr, #0
   13f62:	f360 0e05 	bfi	lr, r0, #0, #6
        .subindex = subaddress != 0,
   13f66:	4694      	mov	ip, r2
   13f68:	3a00      	subs	r2, #0
   13f6a:	bf18      	it	ne
   13f6c:	2201      	movne	r2, #1
    dw1000_cmd_t cmd = {
   13f6e:	f362 1e86 	bfi	lr, r2, #6, #1
   13f72:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
        .extended = subaddress > 0x7F,
   13f76:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
   13f7a:	bf94      	ite	ls
   13f7c:	2600      	movls	r6, #0
   13f7e:	2601      	movhi	r6, #1
    dw1000_cmd_t cmd = {
   13f80:	f366 2e08 	bfi	lr, r6, #8, #1
   13f84:	f36c 2e57 	bfi	lr, ip, #9, #15
        [0] = cmd.operation << 7 | cmd.subindex << 6 | cmd.reg,
   13f88:	0192      	lsls	r2, r2, #6
   13f8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   13f8e:	4302      	orrs	r2, r0
    uint8_t header[] = {
   13f90:	f88d 200c 	strb.w	r2, [sp, #12]
        [1] = cmd.extended << 7 | (uint8_t) (subaddress),
   13f94:	fa4f f28c 	sxtb.w	r2, ip
   13f98:	ea42 12c6 	orr.w	r2, r2, r6, lsl #7
    uint8_t header[] = {
   13f9c:	f88d 200d 	strb.w	r2, [sp, #13]
        [2] = (uint8_t) (subaddress >> 7)
   13fa0:	f3cc 12c7 	ubfx	r2, ip, #7, #8
    uint8_t header[] = {
   13fa4:	f88d 200e 	strb.w	r2, [sp, #14]
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   13fa8:	4a1b      	ldr	r2, [pc, #108]	; (14018 <dw1000_write+0xc8>)
   13faa:	ea0e 0202 	and.w	r2, lr, r2
   13fae:	b122      	cbz	r2, 13fba <dw1000_write+0x6a>
   13fb0:	f41e 7f80 	tst.w	lr, #256	; 0x100
   13fb4:	d01c      	beq.n	13ff0 <dw1000_write+0xa0>
   13fb6:	2203      	movs	r2, #3
   13fb8:	e000      	b.n	13fbc <dw1000_write+0x6c>
   13fba:	2201      	movs	r2, #1
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
   13fbc:	293f      	cmp	r1, #63	; 0x3f
   13fbe:	d819      	bhi.n	13ff4 <dw1000_write+0xa4>
    assert((subaddress <= 0x7FFF) && ((subaddress + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
   13fc0:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
   13fc4:	d11c      	bne.n	14000 <dw1000_write+0xb0>
   13fc6:	44ac      	add	ip, r5
   13fc8:	f5bc 4f00 	cmp.w	ip, #32768	; 0x8000
   13fcc:	da18      	bge.n	14000 <dw1000_write+0xb0>
    if (len+length < MYNEWT_VAL(DW1000_DEVICE_SPI_RD_MAX_NOBLOCK) ||
   13fce:	1951      	adds	r1, r2, r5
   13fd0:	2908      	cmp	r1, #8
   13fd2:	dd04      	ble.n	13fde <dw1000_write+0x8e>
   13fd4:	f894 152e 	ldrb.w	r1, [r4, #1326]	; 0x52e
   13fd8:	f011 0f01 	tst.w	r1, #1
   13fdc:	d016      	beq.n	1400c <dw1000_write+0xbc>
        hal_dw1000_write(inst, header, len, buffer, length);
   13fde:	9500      	str	r5, [sp, #0]
   13fe0:	a903      	add	r1, sp, #12
   13fe2:	4620      	mov	r0, r4
   13fe4:	f000 fe6a 	bl	14cbc <hal_dw1000_write>
}
   13fe8:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   13fec:	b004      	add	sp, #16
   13fee:	bd70      	pop	{r4, r5, r6, pc}
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   13ff0:	2202      	movs	r2, #2
   13ff2:	e7e3      	b.n	13fbc <dw1000_write+0x6c>
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
   13ff4:	2300      	movs	r3, #0
   13ff6:	461a      	mov	r2, r3
   13ff8:	4619      	mov	r1, r3
   13ffa:	4618      	mov	r0, r3
   13ffc:	f7f5 f826 	bl	904c <__assert_func>
    assert((subaddress <= 0x7FFF) && ((subaddress + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
   14000:	2300      	movs	r3, #0
   14002:	461a      	mov	r2, r3
   14004:	4619      	mov	r1, r3
   14006:	4618      	mov	r0, r3
   14008:	f7f5 f820 	bl	904c <__assert_func>
        hal_dw1000_write_noblock(inst, header, len, buffer, length);
   1400c:	9500      	str	r5, [sp, #0]
   1400e:	a903      	add	r1, sp, #12
   14010:	4620      	mov	r0, r4
   14012:	f000 fea1 	bl	14d58 <hal_dw1000_write_noblock>
   14016:	e7e7      	b.n	13fe8 <dw1000_write+0x98>
   14018:	00fffe00 	.word	0x00fffe00

0001401c <dw1000_read_reg>:
{
   1401c:	b530      	push	{r4, r5, lr}
   1401e:	b087      	sub	sp, #28
    } __attribute__((__packed__, aligned (8))) buffer = {0};
   14020:	2400      	movs	r4, #0
   14022:	2500      	movs	r5, #0
   14024:	e9cd 4504 	strd	r4, r5, [sp, #16]
    dw1000_cmd_t cmd = {
   14028:	f001 043f 	and.w	r4, r1, #63	; 0x3f
   1402c:	f04f 0e00 	mov.w	lr, #0
   14030:	f364 0e05 	bfi	lr, r4, #0, #6
        .subindex = subaddress != 0,
   14034:	4694      	mov	ip, r2
   14036:	3a00      	subs	r2, #0
   14038:	bf18      	it	ne
   1403a:	2201      	movne	r2, #1
    dw1000_cmd_t cmd = {
   1403c:	f362 1e86 	bfi	lr, r2, #6, #1
   14040:	f36f 1ec7 	bfc	lr, #7, #1
        .extended = subaddress > 0x7F,
   14044:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
   14048:	bf94      	ite	ls
   1404a:	2500      	movls	r5, #0
   1404c:	2501      	movhi	r5, #1
    dw1000_cmd_t cmd = {
   1404e:	f365 2e08 	bfi	lr, r5, #8, #1
   14052:	f36c 2e57 	bfi	lr, ip, #9, #15
        [0] = cmd.operation << 7 | cmd.subindex << 6 | cmd.reg,
   14056:	ea44 1282 	orr.w	r2, r4, r2, lsl #6
    uint8_t header[] = {
   1405a:	f88d 200c 	strb.w	r2, [sp, #12]
        [1] = cmd.extended << 7 | (uint8_t) (subaddress),
   1405e:	fa4f f28c 	sxtb.w	r2, ip
   14062:	ea42 12c5 	orr.w	r2, r2, r5, lsl #7
    uint8_t header[] = {
   14066:	f88d 200d 	strb.w	r2, [sp, #13]
        [2] = (uint8_t) (subaddress >> 7)
   1406a:	f3cc 12c7 	ubfx	r2, ip, #7, #8
    uint8_t header[] = {
   1406e:	f88d 200e 	strb.w	r2, [sp, #14]
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   14072:	4a21      	ldr	r2, [pc, #132]	; (140f8 <dw1000_read_reg+0xdc>)
   14074:	ea0e 0202 	and.w	r2, lr, r2
   14078:	b122      	cbz	r2, 14084 <dw1000_read_reg+0x68>
   1407a:	f41e 7f80 	tst.w	lr, #256	; 0x100
   1407e:	d01f      	beq.n	140c0 <dw1000_read_reg+0xa4>
   14080:	2203      	movs	r2, #3
   14082:	e000      	b.n	14086 <dw1000_read_reg+0x6a>
   14084:	2201      	movs	r2, #1
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
   14086:	293f      	cmp	r1, #63	; 0x3f
   14088:	d81c      	bhi.n	140c4 <dw1000_read_reg+0xa8>
    assert((subaddress <= 0x7FFF) && ((subaddress + nbytes) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
   1408a:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
   1408e:	d11f      	bne.n	140d0 <dw1000_read_reg+0xb4>
   14090:	449c      	add	ip, r3
   14092:	f5bc 4f00 	cmp.w	ip, #32768	; 0x8000
   14096:	d21b      	bcs.n	140d0 <dw1000_read_reg+0xb4>
    assert(nbytes <= sizeof(uint64_t));
   14098:	2b08      	cmp	r3, #8
   1409a:	d81f      	bhi.n	140dc <dw1000_read_reg+0xc0>
    if (len+nbytes < MYNEWT_VAL(DW1000_DEVICE_SPI_RD_MAX_NOBLOCK) ||
   1409c:	18d1      	adds	r1, r2, r3
   1409e:	2908      	cmp	r1, #8
   140a0:	d904      	bls.n	140ac <dw1000_read_reg+0x90>
   140a2:	f890 152e 	ldrb.w	r1, [r0, #1326]	; 0x52e
   140a6:	f011 0f01 	tst.w	r1, #1
   140aa:	d01d      	beq.n	140e8 <dw1000_read_reg+0xcc>
        hal_dw1000_read(inst, header, len, buffer.array, nbytes);
   140ac:	b29b      	uxth	r3, r3
   140ae:	9300      	str	r3, [sp, #0]
   140b0:	ab04      	add	r3, sp, #16
   140b2:	a903      	add	r1, sp, #12
   140b4:	f000 fc70 	bl	14998 <hal_dw1000_read>
}
   140b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   140bc:	b007      	add	sp, #28
   140be:	bd30      	pop	{r4, r5, pc}
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   140c0:	2202      	movs	r2, #2
   140c2:	e7e0      	b.n	14086 <dw1000_read_reg+0x6a>
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
   140c4:	2300      	movs	r3, #0
   140c6:	461a      	mov	r2, r3
   140c8:	4619      	mov	r1, r3
   140ca:	4618      	mov	r0, r3
   140cc:	f7f4 ffbe 	bl	904c <__assert_func>
    assert((subaddress <= 0x7FFF) && ((subaddress + nbytes) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
   140d0:	2300      	movs	r3, #0
   140d2:	461a      	mov	r2, r3
   140d4:	4619      	mov	r1, r3
   140d6:	4618      	mov	r0, r3
   140d8:	f7f4 ffb8 	bl	904c <__assert_func>
    assert(nbytes <= sizeof(uint64_t));
   140dc:	2300      	movs	r3, #0
   140de:	461a      	mov	r2, r3
   140e0:	4619      	mov	r1, r3
   140e2:	4618      	mov	r0, r3
   140e4:	f7f4 ffb2 	bl	904c <__assert_func>
        hal_dw1000_read_noblock(inst, header, len, buffer.array, nbytes);
   140e8:	b29b      	uxth	r3, r3
   140ea:	9300      	str	r3, [sp, #0]
   140ec:	ab04      	add	r3, sp, #16
   140ee:	a903      	add	r1, sp, #12
   140f0:	f000 fcae 	bl	14a50 <hal_dw1000_read_noblock>
   140f4:	e7e0      	b.n	140b8 <dw1000_read_reg+0x9c>
   140f6:	bf00      	nop
   140f8:	00fffe00 	.word	0x00fffe00

000140fc <dw1000_write_reg>:
{
   140fc:	b530      	push	{r4, r5, lr}
   140fe:	b087      	sub	sp, #28
   14100:	4604      	mov	r4, r0
   14102:	980c      	ldr	r0, [sp, #48]	; 0x30
    dw1000_cmd_t cmd = {
   14104:	f001 0e3f 	and.w	lr, r1, #63	; 0x3f
   14108:	f04f 0c00 	mov.w	ip, #0
   1410c:	f36e 0c05 	bfi	ip, lr, #0, #6
        .subindex = subaddress != 0,
   14110:	4613      	mov	r3, r2
   14112:	3a00      	subs	r2, #0
   14114:	bf18      	it	ne
   14116:	2201      	movne	r2, #1
    dw1000_cmd_t cmd = {
   14118:	f362 1c86 	bfi	ip, r2, #6, #1
   1411c:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
        .extended = subaddress > 0x7F,
   14120:	2b7f      	cmp	r3, #127	; 0x7f
   14122:	bf94      	ite	ls
   14124:	2500      	movls	r5, #0
   14126:	2501      	movhi	r5, #1
    dw1000_cmd_t cmd = {
   14128:	f365 2c08 	bfi	ip, r5, #8, #1
   1412c:	f363 2c57 	bfi	ip, r3, #9, #15
        [0] = cmd.operation << 7 | cmd.subindex << 6 | cmd.reg,
   14130:	0192      	lsls	r2, r2, #6
   14132:	f062 027f 	orn	r2, r2, #127	; 0x7f
   14136:	ea4e 0202 	orr.w	r2, lr, r2
    uint8_t header[] = {
   1413a:	f88d 200c 	strb.w	r2, [sp, #12]
        [1] = cmd.extended << 7 | (uint8_t) (subaddress),
   1413e:	b25a      	sxtb	r2, r3
   14140:	ea42 12c5 	orr.w	r2, r2, r5, lsl #7
    uint8_t header[] = {
   14144:	f88d 200d 	strb.w	r2, [sp, #13]
        [2] = (uint8_t) (subaddress >> 7)
   14148:	f3c3 12c7 	ubfx	r2, r3, #7, #8
    uint8_t header[] = {
   1414c:	f88d 200e 	strb.w	r2, [sp, #14]
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   14150:	4a25      	ldr	r2, [pc, #148]	; (141e8 <dw1000_write_reg+0xec>)
   14152:	ea0c 0202 	and.w	r2, ip, r2
   14156:	b122      	cbz	r2, 14162 <dw1000_write_reg+0x66>
   14158:	f41c 7f80 	tst.w	ip, #256	; 0x100
   1415c:	d022      	beq.n	141a4 <dw1000_write_reg+0xa8>
   1415e:	2203      	movs	r2, #3
   14160:	e000      	b.n	14164 <dw1000_write_reg+0x68>
   14162:	2201      	movs	r2, #1
    buffer.value = val;
   14164:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
   14168:	ed8d 7b04 	vstr	d7, [sp, #16]
    assert(nbytes <= sizeof(uint64_t));
   1416c:	2808      	cmp	r0, #8
   1416e:	d81b      	bhi.n	141a8 <dw1000_write_reg+0xac>
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
   14170:	293f      	cmp	r1, #63	; 0x3f
   14172:	d81f      	bhi.n	141b4 <dw1000_write_reg+0xb8>
    assert((subaddress <= 0x7FFF) && ((subaddress + nbytes) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
   14174:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   14178:	d122      	bne.n	141c0 <dw1000_write_reg+0xc4>
   1417a:	4403      	add	r3, r0
   1417c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   14180:	d21e      	bcs.n	141c0 <dw1000_write_reg+0xc4>
    if (len+nbytes < MYNEWT_VAL(DW1000_DEVICE_SPI_RD_MAX_NOBLOCK) ||
   14182:	1813      	adds	r3, r2, r0
   14184:	2b08      	cmp	r3, #8
   14186:	d904      	bls.n	14192 <dw1000_write_reg+0x96>
   14188:	f894 352e 	ldrb.w	r3, [r4, #1326]	; 0x52e
   1418c:	f013 0f01 	tst.w	r3, #1
   14190:	d01c      	beq.n	141cc <dw1000_write_reg+0xd0>
        hal_dw1000_write(inst, header, len, buffer.array, nbytes);
   14192:	b280      	uxth	r0, r0
   14194:	9000      	str	r0, [sp, #0]
   14196:	ab04      	add	r3, sp, #16
   14198:	a903      	add	r1, sp, #12
   1419a:	4620      	mov	r0, r4
   1419c:	f000 fd8e 	bl	14cbc <hal_dw1000_write>
}
   141a0:	b007      	add	sp, #28
   141a2:	bd30      	pop	{r4, r5, pc}
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   141a4:	2202      	movs	r2, #2
   141a6:	e7dd      	b.n	14164 <dw1000_write_reg+0x68>
    assert(nbytes <= sizeof(uint64_t));
   141a8:	2300      	movs	r3, #0
   141aa:	461a      	mov	r2, r3
   141ac:	4619      	mov	r1, r3
   141ae:	4618      	mov	r0, r3
   141b0:	f7f4 ff4c 	bl	904c <__assert_func>
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
   141b4:	2300      	movs	r3, #0
   141b6:	461a      	mov	r2, r3
   141b8:	4619      	mov	r1, r3
   141ba:	4618      	mov	r0, r3
   141bc:	f7f4 ff46 	bl	904c <__assert_func>
    assert((subaddress <= 0x7FFF) && ((subaddress + nbytes) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
   141c0:	2300      	movs	r3, #0
   141c2:	461a      	mov	r2, r3
   141c4:	4619      	mov	r1, r3
   141c6:	4618      	mov	r0, r3
   141c8:	f7f4 ff40 	bl	904c <__assert_func>
        hal_dw1000_write_noblock(inst, header, len, buffer.array, nbytes);
   141cc:	b280      	uxth	r0, r0
   141ce:	9000      	str	r0, [sp, #0]
   141d0:	ab04      	add	r3, sp, #16
   141d2:	a903      	add	r1, sp, #12
   141d4:	4620      	mov	r0, r4
   141d6:	f000 fdbf 	bl	14d58 <hal_dw1000_write_noblock>
        hal_dw1000_rw_noblock_wait(inst, DPL_TIMEOUT_NEVER);
   141da:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   141de:	4620      	mov	r0, r4
   141e0:	f000 feac 	bl	14f3c <hal_dw1000_rw_noblock_wait>
}
   141e4:	e7dc      	b.n	141a0 <dw1000_write_reg+0xa4>
   141e6:	bf00      	nop
   141e8:	00fffe00 	.word	0x00fffe00

000141ec <uwb_dw1000_set_euid>:
{
   141ec:	b500      	push	{lr}
   141ee:	b085      	sub	sp, #20
    return dw1000_set_eui((dw1000_dev_instance_t *)dev, euid);
   141f0:	2108      	movs	r1, #8
   141f2:	9102      	str	r1, [sp, #8]
   141f4:	e9cd 2300 	strd	r2, r3, [sp]
   141f8:	2200      	movs	r2, #0
   141fa:	2101      	movs	r1, #1
   141fc:	f7ff ff7e 	bl	140fc <dw1000_write_reg>
}
   14200:	b005      	add	sp, #20
   14202:	f85d fb04 	ldr.w	pc, [sp], #4

00014206 <uwb_dw1000_set_uid>:
{
   14206:	b500      	push	{lr}
   14208:	b085      	sub	sp, #20
    return dw1000_set_address16((dw1000_dev_instance_t *)dev, uid);
   1420a:	2302      	movs	r3, #2
   1420c:	9302      	str	r3, [sp, #8]
   1420e:	2200      	movs	r2, #0
   14210:	9100      	str	r1, [sp, #0]
   14212:	9201      	str	r2, [sp, #4]
   14214:	2103      	movs	r1, #3
   14216:	f7ff ff71 	bl	140fc <dw1000_write_reg>
}
   1421a:	b005      	add	sp, #20
   1421c:	f85d fb04 	ldr.w	pc, [sp], #4

00014220 <uwb_dw1000_set_panid>:
{
   14220:	b500      	push	{lr}
   14222:	b085      	sub	sp, #20
    return dw1000_set_panid((dw1000_dev_instance_t *)dev, pan_id);
   14224:	2202      	movs	r2, #2
   14226:	9202      	str	r2, [sp, #8]
   14228:	9100      	str	r1, [sp, #0]
   1422a:	2300      	movs	r3, #0
   1422c:	9301      	str	r3, [sp, #4]
   1422e:	2103      	movs	r1, #3
   14230:	f7ff ff64 	bl	140fc <dw1000_write_reg>
}
   14234:	b005      	add	sp, #20
   14236:	f85d fb04 	ldr.w	pc, [sp], #4

0001423a <dw1000_softreset>:
{
   1423a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1423e:	b084      	sub	sp, #16
   14240:	4604      	mov	r4, r0
    dw1000_phy_sysclk_XTAL(inst);
   14242:	f002 fdab 	bl	16d9c <dw1000_phy_sysclk_XTAL>
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE, sizeof(uint16_t)); // Disable PMSC ctrl of RF and RX clk blocks
   14246:	f04f 0802 	mov.w	r8, #2
   1424a:	f8cd 8008 	str.w	r8, [sp, #8]
   1424e:	2600      	movs	r6, #0
   14250:	2700      	movs	r7, #0
   14252:	e9cd 6700 	strd	r6, r7, [sp]
   14256:	2204      	movs	r2, #4
   14258:	2136      	movs	r1, #54	; 0x36
   1425a:	4620      	mov	r0, r4
   1425c:	f7ff ff4e 	bl	140fc <dw1000_write_reg>
    dw1000_write_reg(inst, AON_ID, AON_WCFG_OFFSET, 0x0, sizeof(uint16_t)); // Clear any AON auto download bits (as reset will trigger AON download)
   14260:	f8cd 8008 	str.w	r8, [sp, #8]
   14264:	e9cd 6700 	strd	r6, r7, [sp]
   14268:	2200      	movs	r2, #0
   1426a:	212c      	movs	r1, #44	; 0x2c
   1426c:	4620      	mov	r0, r4
   1426e:	f7ff ff45 	bl	140fc <dw1000_write_reg>
    dw1000_write_reg(inst, AON_ID, AON_CFG0_OFFSET, 0x0, sizeof(uint8_t));  // Clear the wake-up configuration
   14272:	2501      	movs	r5, #1
   14274:	9502      	str	r5, [sp, #8]
   14276:	e9cd 6700 	strd	r6, r7, [sp]
   1427a:	2206      	movs	r2, #6
   1427c:	212c      	movs	r1, #44	; 0x2c
   1427e:	4620      	mov	r0, r4
   14280:	f7ff ff3c 	bl	140fc <dw1000_write_reg>
    dw1000_write_reg(inst, AON_ID, AON_CTRL_OFFSET, 0x0, sizeof(uint8_t)); // Clear the register
   14284:	9502      	str	r5, [sp, #8]
   14286:	e9cd 6700 	strd	r6, r7, [sp]
   1428a:	4642      	mov	r2, r8
   1428c:	212c      	movs	r1, #44	; 0x2c
   1428e:	4620      	mov	r0, r4
   14290:	f7ff ff34 	bl	140fc <dw1000_write_reg>
    dw1000_write_reg(inst, AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE, sizeof(uint8_t));
   14294:	9502      	str	r5, [sp, #8]
   14296:	2202      	movs	r2, #2
   14298:	2300      	movs	r3, #0
   1429a:	e9cd 2300 	strd	r2, r3, [sp]
   1429e:	4642      	mov	r2, r8
   142a0:	212c      	movs	r1, #44	; 0x2c
   142a2:	4620      	mov	r0, r4
   142a4:	f7ff ff2a 	bl	140fc <dw1000_write_reg>
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL, sizeof(uint8_t));// Reset HIF, TX, RX and PMSC
   142a8:	9502      	str	r5, [sp, #8]
   142aa:	e9cd 6700 	strd	r6, r7, [sp]
   142ae:	2203      	movs	r2, #3
   142b0:	2136      	movs	r1, #54	; 0x36
   142b2:	4620      	mov	r0, r4
   142b4:	f7ff ff22 	bl	140fc <dw1000_write_reg>
    dpl_cputime_delay_usecs(10);
   142b8:	200a      	movs	r0, #10
   142ba:	f7fa f84a 	bl	e352 <dpl_cputime_delay_usecs>
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR, sizeof(uint8_t)); // Clear reset
   142be:	9502      	str	r5, [sp, #8]
   142c0:	22f0      	movs	r2, #240	; 0xf0
   142c2:	2300      	movs	r3, #0
   142c4:	e9cd 2300 	strd	r2, r3, [sp]
   142c8:	2203      	movs	r2, #3
   142ca:	2136      	movs	r1, #54	; 0x36
   142cc:	4620      	mov	r0, r4
   142ce:	f7ff ff15 	bl	140fc <dw1000_write_reg>
}
   142d2:	b004      	add	sp, #16
   142d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000142d8 <dw1000_dev_configure_sleep>:
{
   142d8:	b530      	push	{r4, r5, lr}
   142da:	b085      	sub	sp, #20
   142dc:	4604      	mov	r4, r0
    uint16_t reg = dw1000_read_reg(inst, AON_ID, AON_WCFG_OFFSET, sizeof(uint16_t));
   142de:	2302      	movs	r3, #2
   142e0:	2200      	movs	r2, #0
   142e2:	212c      	movs	r1, #44	; 0x2c
   142e4:	f7ff fe9a 	bl	1401c <dw1000_read_reg>
   142e8:	b283      	uxth	r3, r0
    if (inst->uwb_dev.status.LDE_enabled)
   142ea:	f894 2509 	ldrb.w	r2, [r4, #1289]	; 0x509
   142ee:	f012 0f10 	tst.w	r2, #16
   142f2:	d03a      	beq.n	1436a <dw1000_dev_configure_sleep+0x92>
        reg |= AON_WCFG_ONW_LLDE;
   142f4:	f443 630c 	orr.w	r3, r3, #2240	; 0x8c0
    if (inst->uwb_dev.status.LDO_enabled)
   142f8:	f012 0f20 	tst.w	r2, #32
   142fc:	d03a      	beq.n	14374 <dw1000_dev_configure_sleep+0x9c>
        reg |= AON_WCFG_ONW_LLDO;
   142fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    if (inst->uwb_dev.config.wakeup_rx_enable)
   14302:	f894 252d 	ldrb.w	r2, [r4, #1325]	; 0x52d
   14306:	f012 0f10 	tst.w	r2, #16
   1430a:	d037      	beq.n	1437c <dw1000_dev_configure_sleep+0xa4>
        reg |= AON_WCFG_ONW_RX;
   1430c:	f043 0302 	orr.w	r3, r3, #2
    dw1000_write_reg(inst, AON_ID, AON_WCFG_OFFSET, reg, sizeof(uint16_t));
   14310:	2502      	movs	r5, #2
   14312:	9502      	str	r5, [sp, #8]
   14314:	2200      	movs	r2, #0
   14316:	9300      	str	r3, [sp, #0]
   14318:	9201      	str	r2, [sp, #4]
   1431a:	212c      	movs	r1, #44	; 0x2c
   1431c:	4620      	mov	r0, r4
   1431e:	f7ff feed 	bl	140fc <dw1000_write_reg>
    reg = dw1000_read_reg(inst, AON_ID, AON_CFG0_OFFSET, sizeof(uint16_t));
   14322:	462b      	mov	r3, r5
   14324:	2206      	movs	r2, #6
   14326:	212c      	movs	r1, #44	; 0x2c
   14328:	4620      	mov	r0, r4
   1432a:	f7ff fe77 	bl	1401c <dw1000_read_reg>
   1432e:	b280      	uxth	r0, r0
    inst->uwb_dev.status.sleep_enabled = inst->uwb_dev.config.sleep_enable;
   14330:	f894 352d 	ldrb.w	r3, [r4, #1325]	; 0x52d
   14334:	f3c3 1340 	ubfx	r3, r3, #5, #1
   14338:	f894 2509 	ldrb.w	r2, [r4, #1289]	; 0x509
   1433c:	f363 12c7 	bfi	r2, r3, #7, #1
   14340:	f884 2509 	strb.w	r2, [r4, #1289]	; 0x509
    if (inst->uwb_dev.status.sleep_enabled)
   14344:	b253      	sxtb	r3, r2
   14346:	2b00      	cmp	r3, #0
   14348:	db1c      	blt.n	14384 <dw1000_dev_configure_sleep+0xac>
        reg &= ~(AON_CFG0_WAKE_CNT | AON_CFG0_SLEEP_EN);
   1434a:	f020 0009 	bic.w	r0, r0, #9
   1434e:	f040 0006 	orr.w	r0, r0, #6
    dw1000_write_reg(inst, AON_ID, AON_CFG0_OFFSET, reg, sizeof(uint16_t));
   14352:	2302      	movs	r3, #2
   14354:	9302      	str	r3, [sp, #8]
   14356:	9000      	str	r0, [sp, #0]
   14358:	2300      	movs	r3, #0
   1435a:	9301      	str	r3, [sp, #4]
   1435c:	2206      	movs	r2, #6
   1435e:	212c      	movs	r1, #44	; 0x2c
   14360:	4620      	mov	r0, r4
   14362:	f7ff fecb 	bl	140fc <dw1000_write_reg>
}
   14366:	b005      	add	sp, #20
   14368:	bd30      	pop	{r4, r5, pc}
        reg &= ~AON_WCFG_ONW_LLDE;
   1436a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   1436e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
   14372:	e7c1      	b.n	142f8 <dw1000_dev_configure_sleep+0x20>
        reg &= ~AON_WCFG_ONW_LLDO;
   14374:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   14378:	b29b      	uxth	r3, r3
   1437a:	e7c2      	b.n	14302 <dw1000_dev_configure_sleep+0x2a>
        reg &= ~AON_WCFG_ONW_RX;
   1437c:	f023 0302 	bic.w	r3, r3, #2
   14380:	b29b      	uxth	r3, r3
   14382:	e7c5      	b.n	14310 <dw1000_dev_configure_sleep+0x38>
        reg |= AON_CFG0_WAKE_CNT | AON_CFG0_SLEEP_EN;
   14384:	f040 000f 	orr.w	r0, r0, #15
   14388:	e7e3      	b.n	14352 <dw1000_dev_configure_sleep+0x7a>

0001438a <uwb_dw1000_sleep_config>:
{
   1438a:	b508      	push	{r3, lr}
    dw1000_dev_configure_sleep((dw1000_dev_instance_t *)dev);
   1438c:	f7ff ffa4 	bl	142d8 <dw1000_dev_configure_sleep>
}
   14390:	bd08      	pop	{r3, pc}

00014392 <dw1000_dev_enter_sleep>:
{
   14392:	b570      	push	{r4, r5, r6, lr}
   14394:	b084      	sub	sp, #16
   14396:	4604      	mov	r4, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   14398:	f500 65ad 	add.w	r5, r0, #1384	; 0x568
   1439c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   143a0:	4628      	mov	r0, r5
   143a2:	f7f6 fbc5 	bl	ab30 <os_mutex_pend>
    if (err != DPL_OK) {
   143a6:	b148      	cbz	r0, 143bc <dw1000_dev_enter_sleep+0x2a>
        inst->uwb_dev.status.mtx_error = 1;
   143a8:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   143ac:	f043 0308 	orr.w	r3, r3, #8
   143b0:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   143b4:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   143b8:	b004      	add	sp, #16
   143ba:	bd70      	pop	{r4, r5, r6, pc}
    dw1000_write_reg(inst, AON_ID, AON_CTRL_OFFSET, 0x0, sizeof(uint16_t));
   143bc:	2602      	movs	r6, #2
   143be:	9602      	str	r6, [sp, #8]
   143c0:	2200      	movs	r2, #0
   143c2:	2300      	movs	r3, #0
   143c4:	e9cd 2300 	strd	r2, r3, [sp]
   143c8:	4632      	mov	r2, r6
   143ca:	212c      	movs	r1, #44	; 0x2c
   143cc:	4620      	mov	r0, r4
   143ce:	f7ff fe95 	bl	140fc <dw1000_write_reg>
    dw1000_write_reg(inst, AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE, sizeof(uint16_t));
   143d2:	9602      	str	r6, [sp, #8]
   143d4:	2202      	movs	r2, #2
   143d6:	2300      	movs	r3, #0
   143d8:	e9cd 2300 	strd	r2, r3, [sp]
   143dc:	4632      	mov	r2, r6
   143de:	212c      	movs	r1, #44	; 0x2c
   143e0:	4620      	mov	r0, r4
   143e2:	f7ff fe8b 	bl	140fc <dw1000_write_reg>
    inst->uwb_dev.status.sleeping = 1;
   143e6:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   143ea:	f043 0301 	orr.w	r3, r3, #1
   143ee:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
    return (dpl_error_t)os_mutex_release(&mu->mu);
   143f2:	4628      	mov	r0, r5
   143f4:	f7f6 fb40 	bl	aa78 <os_mutex_release>
    assert(err == DPL_OK);
   143f8:	2800      	cmp	r0, #0
   143fa:	d0db      	beq.n	143b4 <dw1000_dev_enter_sleep+0x22>
   143fc:	2300      	movs	r3, #0
   143fe:	461a      	mov	r2, r3
   14400:	4619      	mov	r1, r3
   14402:	4618      	mov	r0, r3
   14404:	f7f4 fe22 	bl	904c <__assert_func>

00014408 <uwb_dw1000_enter_sleep>:
{
   14408:	b508      	push	{r3, lr}
    return dw1000_dev_enter_sleep((dw1000_dev_instance_t *)dev);
   1440a:	f7ff ffc2 	bl	14392 <dw1000_dev_enter_sleep>
}
   1440e:	bd08      	pop	{r3, pc}

00014410 <dw1000_dev_wakeup>:
{
   14410:	b5f0      	push	{r4, r5, r6, r7, lr}
   14412:	b085      	sub	sp, #20
   14414:	4604      	mov	r4, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   14416:	f500 66ad 	add.w	r6, r0, #1384	; 0x568
   1441a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1441e:	4630      	mov	r0, r6
   14420:	f7f6 fb86 	bl	ab30 <os_mutex_pend>
    if (err != DPL_OK) {
   14424:	b148      	cbz	r0, 1443a <dw1000_dev_wakeup+0x2a>
        inst->uwb_dev.status.mtx_error = 1;
   14426:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1442a:	f043 0308 	orr.w	r3, r3, #8
   1442e:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   14432:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   14436:	b005      	add	sp, #20
   14438:	bdf0      	pop	{r4, r5, r6, r7, pc}
    inst->uwb_dev.status.sleeping = 0;
   1443a:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   1443e:	f36f 0300 	bfc	r3, #0, #1
   14442:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
    devid = dw1000_read_reg(inst, DEV_ID_ID, 0, sizeof(uint32_t));
   14446:	2304      	movs	r3, #4
   14448:	2200      	movs	r2, #0
   1444a:	4611      	mov	r1, r2
   1444c:	4620      	mov	r0, r4
   1444e:	f7ff fde5 	bl	1401c <dw1000_read_reg>
    int timeout=5;
   14452:	2505      	movs	r5, #5
    while (devid != 0xDECA0130 && --timeout)
   14454:	e008      	b.n	14468 <dw1000_dev_wakeup+0x58>
        hal_dw1000_wakeup(inst);
   14456:	4620      	mov	r0, r4
   14458:	f000 fd8e 	bl	14f78 <hal_dw1000_wakeup>
        devid = dw1000_read_reg(inst, DEV_ID_ID, 0, sizeof(uint32_t));
   1445c:	2304      	movs	r3, #4
   1445e:	2200      	movs	r2, #0
   14460:	4611      	mov	r1, r2
   14462:	4620      	mov	r0, r4
   14464:	f7ff fdda 	bl	1401c <dw1000_read_reg>
    while (devid != 0xDECA0130 && --timeout)
   14468:	4b29      	ldr	r3, [pc, #164]	; (14510 <dw1000_dev_wakeup+0x100>)
   1446a:	4298      	cmp	r0, r3
   1446c:	d001      	beq.n	14472 <dw1000_dev_wakeup+0x62>
   1446e:	3d01      	subs	r5, #1
   14470:	d1f1      	bne.n	14456 <dw1000_dev_wakeup+0x46>
    inst->uwb_dev.status.sleeping = (devid != DWT_DEVICE_ID);
   14472:	4b27      	ldr	r3, [pc, #156]	; (14510 <dw1000_dev_wakeup+0x100>)
   14474:	1ac0      	subs	r0, r0, r3
   14476:	bf18      	it	ne
   14478:	2001      	movne	r0, #1
   1447a:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   1447e:	f360 0300 	bfi	r3, r0, #0, #1
   14482:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
    dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_SLP2INIT, sizeof(uint32_t));
   14486:	2504      	movs	r5, #4
   14488:	9502      	str	r5, [sp, #8]
   1448a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1448e:	2300      	movs	r3, #0
   14490:	e9cd 2300 	strd	r2, r3, [sp]
   14494:	2200      	movs	r2, #0
   14496:	210f      	movs	r1, #15
   14498:	4620      	mov	r0, r4
   1449a:	f7ff fe2f 	bl	140fc <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_ALL_RX_ERR, sizeof(uint32_t));
   1449e:	9502      	str	r5, [sp, #8]
   144a0:	a319      	add	r3, pc, #100	; (adr r3, 14508 <dw1000_dev_wakeup+0xf8>)
   144a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   144a6:	e9cd 2300 	strd	r2, r3, [sp]
   144aa:	2200      	movs	r2, #0
   144ac:	210f      	movs	r1, #15
   144ae:	4620      	mov	r0, r4
   144b0:	f7ff fe24 	bl	140fc <dw1000_write_reg>
    dw1000_phy_set_rx_antennadelay(inst, inst->uwb_dev.rx_antenna_delay);
   144b4:	f8b4 34cc 	ldrh.w	r3, [r4, #1228]	; 0x4cc
   144b8:	2702      	movs	r7, #2
   144ba:	9702      	str	r7, [sp, #8]
   144bc:	2500      	movs	r5, #0
   144be:	9300      	str	r3, [sp, #0]
   144c0:	9501      	str	r5, [sp, #4]
   144c2:	f641 0204 	movw	r2, #6148	; 0x1804
   144c6:	212e      	movs	r1, #46	; 0x2e
   144c8:	4620      	mov	r0, r4
   144ca:	f7ff fe17 	bl	140fc <dw1000_write_reg>
    dw1000_phy_set_tx_antennadelay(inst, inst->uwb_dev.tx_antenna_delay);
   144ce:	f8b4 34ce 	ldrh.w	r3, [r4, #1230]	; 0x4ce
   144d2:	9702      	str	r7, [sp, #8]
   144d4:	9300      	str	r3, [sp, #0]
   144d6:	9501      	str	r5, [sp, #4]
   144d8:	462a      	mov	r2, r5
   144da:	2118      	movs	r1, #24
   144dc:	4620      	mov	r0, r4
   144de:	f7ff fe0d 	bl	140fc <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   144e2:	4630      	mov	r0, r6
   144e4:	f7f6 fac8 	bl	aa78 <os_mutex_release>
    assert(err == DPL_OK);
   144e8:	b940      	cbnz	r0, 144fc <dw1000_dev_wakeup+0xec>
   144ea:	f8b4 3566 	ldrh.w	r3, [r4, #1382]	; 0x566
    if(dpl_sem_get_count(&inst->tx_sem) == 0) {
   144ee:	2b00      	cmp	r3, #0
   144f0:	d19f      	bne.n	14432 <dw1000_dev_wakeup+0x22>
    return (dpl_error_t)os_sem_release(&sem->sem);
   144f2:	f504 60ac 	add.w	r0, r4, #1376	; 0x560
   144f6:	f7f5 fcc9 	bl	9e8c <os_sem_release>
   144fa:	e79a      	b.n	14432 <dw1000_dev_wakeup+0x22>
    assert(err == DPL_OK);
   144fc:	462b      	mov	r3, r5
   144fe:	462a      	mov	r2, r5
   14500:	4629      	mov	r1, r5
   14502:	4628      	mov	r0, r5
   14504:	f7f4 fda2 	bl	904c <__assert_func>
   14508:	24119000 	.word	0x24119000
   1450c:	00000000 	.word	0x00000000
   14510:	deca0130 	.word	0xdeca0130

00014514 <dw1000_dev_config>:
{
   14514:	b5f0      	push	{r4, r5, r6, r7, lr}
   14516:	b085      	sub	sp, #20
   14518:	4604      	mov	r4, r0
    int timeout = 3;
   1451a:	2503      	movs	r5, #3
    inst->spi_settings.baudrate = inst->spi_baudrate_low;
   1451c:	f8d4 3558 	ldr.w	r3, [r4, #1368]	; 0x558
   14520:	f8c4 3598 	str.w	r3, [r4, #1432]	; 0x598
    hal_dw1000_reset(inst);
   14524:	4620      	mov	r0, r4
   14526:	f000 fa0d 	bl	14944 <hal_dw1000_reset>
    rc = hal_spi_disable(inst->spi_num);
   1452a:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   1452e:	f003 feeb 	bl	18308 <hal_spi_disable>
    assert(rc == 0);
   14532:	bb48      	cbnz	r0, 14588 <dw1000_dev_config+0x74>
    rc = hal_spi_config(inst->spi_num, &inst->spi_settings);
   14534:	f204 5694 	addw	r6, r4, #1428	; 0x594
   14538:	4631      	mov	r1, r6
   1453a:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   1453e:	f003 fea1 	bl	18284 <hal_spi_config>
    assert(rc == 0);
   14542:	bb38      	cbnz	r0, 14594 <dw1000_dev_config+0x80>
    rc = hal_spi_enable(inst->spi_num);
   14544:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   14548:	f003 feb8 	bl	182bc <hal_spi_enable>
    assert(rc == 0);
   1454c:	bb40      	cbnz	r0, 145a0 <dw1000_dev_config+0x8c>
    inst->uwb_dev.device_id = dw1000_read_reg(inst, DEV_ID_ID, 0, sizeof(uint32_t));
   1454e:	2304      	movs	r3, #4
   14550:	2200      	movs	r2, #0
   14552:	4611      	mov	r1, r2
   14554:	4620      	mov	r0, r4
   14556:	f7ff fd61 	bl	1401c <dw1000_read_reg>
   1455a:	f8c4 04c8 	str.w	r0, [r4, #1224]	; 0x4c8
    inst->uwb_dev.status.initialized = (inst->uwb_dev.device_id == DWT_DEVICE_ID);
   1455e:	4b55      	ldr	r3, [pc, #340]	; (146b4 <dw1000_dev_config+0x1a0>)
   14560:	4298      	cmp	r0, r3
   14562:	bf14      	ite	ne
   14564:	2000      	movne	r0, #0
   14566:	2001      	moveq	r0, #1
   14568:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   1456c:	f360 0341 	bfi	r3, r0, #1, #1
   14570:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
    if (!inst->uwb_dev.status.initialized && --timeout)
   14574:	b2db      	uxtb	r3, r3
   14576:	f013 0302 	ands.w	r3, r3, #2
   1457a:	d117      	bne.n	145ac <dw1000_dev_config+0x98>
   1457c:	3d01      	subs	r5, #1
   1457e:	d015      	beq.n	145ac <dw1000_dev_config+0x98>
        dw1000_dev_wakeup(inst);
   14580:	4620      	mov	r0, r4
   14582:	f7ff ff45 	bl	14410 <dw1000_dev_wakeup>
        goto retry;
   14586:	e7c9      	b.n	1451c <dw1000_dev_config+0x8>
    assert(rc == 0);
   14588:	2300      	movs	r3, #0
   1458a:	461a      	mov	r2, r3
   1458c:	4619      	mov	r1, r3
   1458e:	4618      	mov	r0, r3
   14590:	f7f4 fd5c 	bl	904c <__assert_func>
    assert(rc == 0);
   14594:	2300      	movs	r3, #0
   14596:	461a      	mov	r2, r3
   14598:	4619      	mov	r1, r3
   1459a:	4618      	mov	r0, r3
   1459c:	f7f4 fd56 	bl	904c <__assert_func>
    assert(rc == 0);
   145a0:	2300      	movs	r3, #0
   145a2:	461a      	mov	r2, r3
   145a4:	4619      	mov	r1, r3
   145a6:	4618      	mov	r0, r3
   145a8:	f7f4 fd50 	bl	904c <__assert_func>
    if(!inst->uwb_dev.status.initialized)
   145ac:	2b00      	cmp	r3, #0
   145ae:	d07f      	beq.n	146b0 <dw1000_dev_config+0x19c>
    dw1000_phy_init(inst, NULL);
   145b0:	2100      	movs	r1, #0
   145b2:	4620      	mov	r0, r4
   145b4:	f002 fcbe 	bl	16f34 <dw1000_phy_init>
    inst->spi_settings.baudrate = inst->spi_baudrate;
   145b8:	f8d4 3554 	ldr.w	r3, [r4, #1364]	; 0x554
   145bc:	f8c4 3598 	str.w	r3, [r4, #1432]	; 0x598
    rc = hal_spi_disable(inst->spi_num);
   145c0:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   145c4:	f003 fea0 	bl	18308 <hal_spi_disable>
    assert(rc == 0);
   145c8:	2800      	cmp	r0, #0
   145ca:	d15f      	bne.n	1468c <dw1000_dev_config+0x178>
    rc = hal_spi_config(inst->spi_num, &inst->spi_settings);
   145cc:	4631      	mov	r1, r6
   145ce:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   145d2:	f003 fe57 	bl	18284 <hal_spi_config>
    assert(rc == 0);
   145d6:	2800      	cmp	r0, #0
   145d8:	d15e      	bne.n	14698 <dw1000_dev_config+0x184>
    rc = hal_spi_enable(inst->spi_num);
   145da:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   145de:	f003 fe6d 	bl	182bc <hal_spi_enable>
    assert(rc == 0);
   145e2:	4607      	mov	r7, r0
   145e4:	2800      	cmp	r0, #0
   145e6:	d15d      	bne.n	146a4 <dw1000_dev_config+0x190>
    inst->uwb_dev.pan_id = MYNEWT_VAL(PANID);
   145e8:	f64d 63ca 	movw	r3, #57034	; 0xdeca
   145ec:	f8a4 34c0 	strh.w	r3, [r4, #1216]	; 0x4c0
    inst->uwb_dev.uid = inst->part_id & 0xffff;
   145f0:	f8d4 3574 	ldr.w	r3, [r4, #1396]	; 0x574
   145f4:	f8a4 34b6 	strh.w	r3, [r4, #1206]	; 0x4b6
    if (inst == hal_dw1000_inst(0)) {
   145f8:	2000      	movs	r0, #0
   145fa:	f000 f997 	bl	1492c <hal_dw1000_inst>
   145fe:	4284      	cmp	r4, r0
   14600:	d007      	beq.n	14612 <dw1000_dev_config+0xfe>
    } else if (inst == hal_dw1000_inst(1)){
   14602:	2001      	movs	r0, #1
   14604:	f000 f992 	bl	1492c <hal_dw1000_inst>
   14608:	4284      	cmp	r4, r0
   1460a:	d002      	beq.n	14612 <dw1000_dev_config+0xfe>
    } else if (inst == hal_dw1000_inst(2)){
   1460c:	2002      	movs	r0, #2
   1460e:	f000 f98d 	bl	1492c <hal_dw1000_inst>
    inst->uwb_dev.euid = (((uint64_t)inst->lot_id) << 32) + inst->part_id;
   14612:	f8d4 2578 	ldr.w	r2, [r4, #1400]	; 0x578
   14616:	f8d4 1574 	ldr.w	r1, [r4, #1396]	; 0x574
   1461a:	f8c4 14b8 	str.w	r1, [r4, #1208]	; 0x4b8
   1461e:	f8c4 24bc 	str.w	r2, [r4, #1212]	; 0x4bc
    dw1000_mac_init(inst, NULL);
   14622:	2100      	movs	r1, #0
   14624:	4620      	mov	r0, r4
   14626:	f001 fd15 	bl	16054 <dw1000_mac_init>
    if (!inst->uwb_dev.uid || inst->uwb_dev.uid == 0xFFFF) {
   1462a:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
   1462e:	3b01      	subs	r3, #1
   14630:	b29b      	uxth	r3, r3
   14632:	f64f 72fd 	movw	r2, #65533	; 0xfffd
   14636:	4293      	cmp	r3, r2
   14638:	d902      	bls.n	14640 <dw1000_dev_config+0x12c>
        inst->uwb_dev.uid = 0x1;
   1463a:	2301      	movs	r3, #1
   1463c:	f8a4 34b6 	strh.w	r3, [r4, #1206]	; 0x4b6
    dw1000_set_panid(inst,inst->uwb_dev.pan_id);
   14640:	f8b4 34c0 	ldrh.w	r3, [r4, #1216]	; 0x4c0
   14644:	2602      	movs	r6, #2
   14646:	9602      	str	r6, [sp, #8]
   14648:	2500      	movs	r5, #0
   1464a:	9300      	str	r3, [sp, #0]
   1464c:	9501      	str	r5, [sp, #4]
   1464e:	4632      	mov	r2, r6
   14650:	2103      	movs	r1, #3
   14652:	4620      	mov	r0, r4
   14654:	f7ff fd52 	bl	140fc <dw1000_write_reg>
    dw1000_set_eui(inst,inst->uwb_dev.euid);
   14658:	2308      	movs	r3, #8
   1465a:	9302      	str	r3, [sp, #8]
   1465c:	f504 6398 	add.w	r3, r4, #1216	; 0x4c0
   14660:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   14664:	e9cd 2300 	strd	r2, r3, [sp]
   14668:	462a      	mov	r2, r5
   1466a:	2101      	movs	r1, #1
   1466c:	4620      	mov	r0, r4
   1466e:	f7ff fd45 	bl	140fc <dw1000_write_reg>
    dw1000_set_address16(inst,inst->uwb_dev.uid);
   14672:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
   14676:	9602      	str	r6, [sp, #8]
   14678:	9300      	str	r3, [sp, #0]
   1467a:	9501      	str	r5, [sp, #4]
   1467c:	462a      	mov	r2, r5
   1467e:	2103      	movs	r1, #3
   14680:	4620      	mov	r0, r4
   14682:	f7ff fd3b 	bl	140fc <dw1000_write_reg>
}
   14686:	4638      	mov	r0, r7
   14688:	b005      	add	sp, #20
   1468a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert(rc == 0);
   1468c:	2300      	movs	r3, #0
   1468e:	461a      	mov	r2, r3
   14690:	4619      	mov	r1, r3
   14692:	4618      	mov	r0, r3
   14694:	f7f4 fcda 	bl	904c <__assert_func>
    assert(rc == 0);
   14698:	2300      	movs	r3, #0
   1469a:	461a      	mov	r2, r3
   1469c:	4619      	mov	r1, r3
   1469e:	4618      	mov	r0, r3
   146a0:	f7f4 fcd4 	bl	904c <__assert_func>
    assert(rc == 0);
   146a4:	2300      	movs	r3, #0
   146a6:	461a      	mov	r2, r3
   146a8:	4619      	mov	r1, r3
   146aa:	4618      	mov	r0, r3
   146ac:	f7f4 fcce 	bl	904c <__assert_func>
        return DPL_TIMEOUT;
   146b0:	2706      	movs	r7, #6
   146b2:	e7e8      	b.n	14686 <dw1000_dev_config+0x172>
   146b4:	deca0130 	.word	0xdeca0130

000146b8 <uwb_dw1000_wakeup>:
{
   146b8:	b508      	push	{r3, lr}
    return dw1000_dev_wakeup((dw1000_dev_instance_t *)dev);
   146ba:	f7ff fea9 	bl	14410 <dw1000_dev_wakeup>
}
   146be:	bd08      	pop	{r3, pc}

000146c0 <dw1000_dev_enter_sleep_after_tx>:
{
   146c0:	b530      	push	{r4, r5, lr}
   146c2:	b085      	sub	sp, #20
   146c4:	4604      	mov	r4, r0
   146c6:	460d      	mov	r5, r1
    uint32_t reg = dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, sizeof(uint32_t));
   146c8:	2304      	movs	r3, #4
   146ca:	461a      	mov	r2, r3
   146cc:	2136      	movs	r1, #54	; 0x36
   146ce:	f7ff fca5 	bl	1401c <dw1000_read_reg>
    inst->control.sleep_after_tx = enable;
   146d2:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
   146d6:	f365 13c7 	bfi	r3, r5, #7, #1
   146da:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    if(inst->control.sleep_after_tx)
   146de:	b25b      	sxtb	r3, r3
   146e0:	2b00      	cmp	r3, #0
   146e2:	db0e      	blt.n	14702 <dw1000_dev_enter_sleep_after_tx+0x42>
        reg &= ~(PMSC_CTRL1_ATXSLP);
   146e4:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, reg, sizeof(uint32_t));
   146e8:	2204      	movs	r2, #4
   146ea:	9202      	str	r2, [sp, #8]
   146ec:	9000      	str	r0, [sp, #0]
   146ee:	2300      	movs	r3, #0
   146f0:	9301      	str	r3, [sp, #4]
   146f2:	2136      	movs	r1, #54	; 0x36
   146f4:	4620      	mov	r0, r4
   146f6:	f7ff fd01 	bl	140fc <dw1000_write_reg>
}
   146fa:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   146fe:	b005      	add	sp, #20
   14700:	bd30      	pop	{r4, r5, pc}
        reg |= PMSC_CTRL1_ATXSLP;
   14702:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
   14706:	e7ef      	b.n	146e8 <dw1000_dev_enter_sleep_after_tx+0x28>

00014708 <uwb_dw1000_enter_sleep_after_tx>:
{
   14708:	b508      	push	{r3, lr}
    return dw1000_dev_enter_sleep_after_tx((dw1000_dev_instance_t *)dev, enable);
   1470a:	f7ff ffd9 	bl	146c0 <dw1000_dev_enter_sleep_after_tx>
}
   1470e:	bd08      	pop	{r3, pc}

00014710 <dw1000_dev_enter_sleep_after_rx>:
{
   14710:	b530      	push	{r4, r5, lr}
   14712:	b085      	sub	sp, #20
   14714:	4604      	mov	r4, r0
   14716:	460d      	mov	r5, r1
    uint32_t reg = dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, sizeof(uint32_t));
   14718:	2304      	movs	r3, #4
   1471a:	461a      	mov	r2, r3
   1471c:	2136      	movs	r1, #54	; 0x36
   1471e:	f7ff fc7d 	bl	1401c <dw1000_read_reg>
    inst->control.sleep_after_rx = enable;
   14722:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   14726:	f365 0300 	bfi	r3, r5, #0, #1
   1472a:	f884 35b1 	strb.w	r3, [r4, #1457]	; 0x5b1
    if(inst->control.sleep_after_rx)
   1472e:	b2db      	uxtb	r3, r3
   14730:	f013 0f01 	tst.w	r3, #1
   14734:	d00e      	beq.n	14754 <dw1000_dev_enter_sleep_after_rx+0x44>
        reg |= PMSC_CTRL1_ARXSLP;
   14736:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, reg, sizeof(uint32_t));
   1473a:	2204      	movs	r2, #4
   1473c:	9202      	str	r2, [sp, #8]
   1473e:	9000      	str	r0, [sp, #0]
   14740:	2300      	movs	r3, #0
   14742:	9301      	str	r3, [sp, #4]
   14744:	2136      	movs	r1, #54	; 0x36
   14746:	4620      	mov	r0, r4
   14748:	f7ff fcd8 	bl	140fc <dw1000_write_reg>
}
   1474c:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   14750:	b005      	add	sp, #20
   14752:	bd30      	pop	{r4, r5, pc}
        reg &= ~(PMSC_CTRL1_ARXSLP);
   14754:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
   14758:	e7ef      	b.n	1473a <dw1000_dev_enter_sleep_after_rx+0x2a>

0001475a <uwb_dw1000_enter_sleep_after_rx>:
{
   1475a:	b508      	push	{r3, lr}
    return dw1000_dev_enter_sleep_after_rx((dw1000_dev_instance_t *)dev, enable);
   1475c:	f7ff ffd8 	bl	14710 <dw1000_dev_enter_sleep_after_rx>
}
   14760:	bd08      	pop	{r3, pc}
	...

00014764 <dw1000_dev_init>:
 * @param arg   Argument to set as pointer to struct dw1000_dev_cfg.
 * @return DPL_OK on success
 */
int
dw1000_dev_init(struct os_dev *odev, void *arg)
{
   14764:	b538      	push	{r3, r4, r5, lr}
   14766:	4604      	mov	r4, r0
   14768:	460d      	mov	r5, r1
    dpl_error_t err;
    struct dw1000_dev_cfg *cfg = (struct dw1000_dev_cfg*)arg;
    struct uwb_dev *udev = (struct uwb_dev*)odev;
    dw1000_dev_instance_t *inst = (dw1000_dev_instance_t *)odev;
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    DIAGMSG("{\"utime\": %"PRIu32",\"msg\": \"dw1000_dev_init\"}\n", dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
   1476a:	f7f9 fde2 	bl	e332 <dpl_cputime_get32>
   1476e:	4601      	mov	r1, r0
   14770:	4840      	ldr	r0, [pc, #256]	; (14874 <dw1000_dev_init+0x110>)
   14772:	f7f9 fd59 	bl	e228 <printf>
#endif
    /* TODO, replace with open anch close function pointers below */
    OS_DEV_SETHANDLERS(odev, 0, 0);
   14776:	2300      	movs	r3, #0
   14778:	6023      	str	r3, [r4, #0]
   1477a:	60e3      	str	r3, [r4, #12]

    if (inst == NULL) {
   1477c:	2c00      	cmp	r4, #0
   1477e:	d052      	beq.n	14826 <dw1000_dev_init+0xc2>
        assert(inst);
        inst->uwb_dev.status.selfmalloc = 1;
        udev = (struct uwb_dev*)inst;
    }

    udev->rxbuf_size = MYNEWT_VAL(UWB_RX_BUFFER_SIZE);
   14780:	f44f 6380 	mov.w	r3, #1024	; 0x400
   14784:	f8a4 3504 	strh.w	r3, [r4, #1284]	; 0x504
    udev->txbuf_size = MYNEWT_VAL(DW1000_HAL_SPI_BUFFER_SIZE);
   14788:	f44f 7380 	mov.w	r3, #256	; 0x100
   1478c:	f8a4 3506 	strh.w	r3, [r4, #1286]	; 0x506
    uwb_dev_init(udev);
   14790:	4620      	mov	r0, r4
   14792:	f7f4 fa85 	bl	8ca0 <uwb_dev_init>

    /* Setup common uwb interface */
    udev->uw_funcs = &dw1000_uwb_funcs;
   14796:	4b38      	ldr	r3, [pc, #224]	; (14878 <dw1000_dev_init+0x114>)
   14798:	6263      	str	r3, [r4, #36]	; 0x24
    udev->rxdiag = (struct uwb_dev_rxdiag*)&inst->rxdiag;
   1479a:	f204 539c 	addw	r3, r4, #1436	; 0x59c
   1479e:	f8c4 34f8 	str.w	r3, [r4, #1272]	; 0x4f8
    udev->rxdiag->rxd_len = sizeof(inst->rxdiag);
   147a2:	2314      	movs	r3, #20
   147a4:	f8a4 359c 	strh.w	r3, [r4, #1436]	; 0x59c

    /* Check size requirements */
    assert(sizeof(inst->rxdiag) <= MYNEWT_VAL(UWB_DEV_RXDIAG_MAXLEN));

    /* Capture dev_cfg parameters */
    inst->spi_sem = cfg->spi_sem;
   147a8:	682b      	ldr	r3, [r5, #0]
   147aa:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    inst->spi_num = cfg->spi_num;
   147ae:	7b2b      	ldrb	r3, [r5, #12]
   147b0:	f884 355c 	strb.w	r3, [r4, #1372]	; 0x55c
    inst->spi_baudrate = cfg->spi_baudrate;
   147b4:	686b      	ldr	r3, [r5, #4]
   147b6:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
    inst->spi_baudrate_low = cfg->spi_baudrate_low;
   147ba:	68ab      	ldr	r3, [r5, #8]
   147bc:	f8c4 3558 	str.w	r3, [r4, #1368]	; 0x558
    inst->irq_pin = cfg->irq_pin;
   147c0:	7bab      	ldrb	r3, [r5, #14]
   147c2:	f884 355d 	strb.w	r3, [r4, #1373]	; 0x55d
    inst->rst_pin = cfg->rst_pin;
   147c6:	7b6b      	ldrb	r3, [r5, #13]
   147c8:	f884 355f 	strb.w	r3, [r4, #1375]	; 0x55f
    inst->ss_pin  = cfg->ss_pin;
   147cc:	7beb      	ldrb	r3, [r5, #15]
   147ce:	f884 355e 	strb.w	r3, [r4, #1374]	; 0x55e

    udev->rx_antenna_delay = cfg->rx_antenna_delay;
   147d2:	8a2b      	ldrh	r3, [r5, #16]
   147d4:	f8a4 34cc 	strh.w	r3, [r4, #1228]	; 0x4cc
    udev->tx_antenna_delay = cfg->tx_antenna_delay;
   147d8:	8a6b      	ldrh	r3, [r5, #18]
   147da:	f8a4 34ce 	strh.w	r3, [r4, #1230]	; 0x4ce
    udev->ext_clock_delay = cfg->ext_clock_delay;
   147de:	696b      	ldr	r3, [r5, #20]
   147e0:	f8c4 34d4 	str.w	r3, [r4, #1236]	; 0x4d4
    return (dpl_error_t)os_mutex_init(&mu->mu);
   147e4:	f504 60ad 	add.w	r0, r4, #1384	; 0x568
   147e8:	f7f6 f93c 	bl	aa64 <os_mutex_init>

    err = dpl_mutex_init(&inst->mutex);
    assert(err == DPL_OK);
   147ec:	bb78      	cbnz	r0, 1484e <dw1000_dev_init+0xea>
    return (dpl_error_t)os_sem_init(&sem->sem, tokens);
   147ee:	2101      	movs	r1, #1
   147f0:	f504 60ac 	add.w	r0, r4, #1376	; 0x560
   147f4:	f7f5 fb42 	bl	9e7c <os_sem_init>
    err = dpl_sem_init(&inst->tx_sem, 0x1);
    assert(err == DPL_OK);
   147f8:	bb78      	cbnz	r0, 1485a <dw1000_dev_init+0xf6>
   147fa:	2101      	movs	r1, #1
   147fc:	f204 504c 	addw	r0, r4, #1356	; 0x54c
   14800:	f7f5 fb3c 	bl	9e7c <os_sem_init>
    err = dpl_sem_init(&inst->spi_nb_sem, 0x1);
    assert(err == DPL_OK);
   14804:	bb78      	cbnz	r0, 14866 <dw1000_dev_init+0x102>

    /* phy attritubes per the IEEE802.15.4-2011 standard, Table 99 and Table 101 */
    udev->attrib.Tpsym = DPL_FLOAT32_INIT(1.0176282f); //!< Preamble symbols duration (usec) for MPRF of 62.89Mhz
   14806:	f204 5334 	addw	r3, r4, #1332	; 0x534
   1480a:	4a1c      	ldr	r2, [pc, #112]	; (1487c <dw1000_dev_init+0x118>)
   1480c:	601a      	str	r2, [r3, #0]
    udev->attrib.Tbsym = DPL_FLOAT32_INIT(1.0256410f); //!< Baserate symbols duration (usec) 850khz
   1480e:	f504 63a7 	add.w	r3, r4, #1336	; 0x538
   14812:	4a1b      	ldr	r2, [pc, #108]	; (14880 <dw1000_dev_init+0x11c>)
   14814:	601a      	str	r2, [r3, #0]
    udev->attrib.Tdsym = DPL_FLOAT32_INIT(0.1282051f); //!< Datarate symbols duration (usec) 6.81Mhz
   14816:	f204 533c 	addw	r3, r4, #1340	; 0x53c
   1481a:	4a1a      	ldr	r2, [pc, #104]	; (14884 <dw1000_dev_init+0x120>)
   1481c:	601a      	str	r2, [r3, #0]

    SLIST_INIT(&inst->uwb_dev.interface_cbs);
   1481e:	2000      	movs	r0, #0
   14820:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530

#if MYNEWT_VAL(DW1000_SPI_BACKTRACE_LEN) || MYNEWT_VAL(DW1000_SYS_STATUS_BACKTRACE_LEN)
    inst->bt_ticks2usec = 1000000/MYNEWT_VAL(OS_CPUTIME_FREQ);
#endif
    return DPL_OK;
}
   14824:	bd38      	pop	{r3, r4, r5, pc}
        inst = (dw1000_dev_instance_t *) calloc(1, sizeof(dw1000_dev_instance_t));
   14826:	f44f 61be 	mov.w	r1, #1520	; 0x5f0
   1482a:	2001      	movs	r0, #1
   1482c:	f7f8 ffa7 	bl	d77e <calloc>
        assert(inst);
   14830:	4604      	mov	r4, r0
   14832:	b130      	cbz	r0, 14842 <dw1000_dev_init+0xde>
        inst->uwb_dev.status.selfmalloc = 1;
   14834:	f890 3508 	ldrb.w	r3, [r0, #1288]	; 0x508
   14838:	f043 0301 	orr.w	r3, r3, #1
   1483c:	f880 3508 	strb.w	r3, [r0, #1288]	; 0x508
        udev = (struct uwb_dev*)inst;
   14840:	e79e      	b.n	14780 <dw1000_dev_init+0x1c>
        assert(inst);
   14842:	2300      	movs	r3, #0
   14844:	461a      	mov	r2, r3
   14846:	4619      	mov	r1, r3
   14848:	4618      	mov	r0, r3
   1484a:	f7f4 fbff 	bl	904c <__assert_func>
    assert(err == DPL_OK);
   1484e:	2300      	movs	r3, #0
   14850:	461a      	mov	r2, r3
   14852:	4619      	mov	r1, r3
   14854:	4618      	mov	r0, r3
   14856:	f7f4 fbf9 	bl	904c <__assert_func>
    assert(err == DPL_OK);
   1485a:	2300      	movs	r3, #0
   1485c:	461a      	mov	r2, r3
   1485e:	4619      	mov	r1, r3
   14860:	4618      	mov	r0, r3
   14862:	f7f4 fbf3 	bl	904c <__assert_func>
    assert(err == DPL_OK);
   14866:	2300      	movs	r3, #0
   14868:	461a      	mov	r2, r3
   1486a:	4619      	mov	r1, r3
   1486c:	4618      	mov	r0, r3
   1486e:	f7f4 fbed 	bl	904c <__assert_func>
   14872:	bf00      	nop
   14874:	00023ea8 	.word	0x00023ea8
   14878:	00023eec 	.word	0x00023eec
   1487c:	3f8241a4 	.word	0x3f8241a4
   14880:	3f834834 	.word	0x3f834834
   14884:	3e034833 	.word	0x3e034833

00014888 <dw1000_dev_deinit>:
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void
dw1000_dev_deinit(dw1000_dev_instance_t * inst)
{
   14888:	b510      	push	{r4, lr}
    assert(inst);
   1488a:	b1d8      	cbz	r0, 148c4 <dw1000_dev_deinit+0x3c>
   1488c:	4604      	mov	r4, r0
    hal_spi_disable(inst->spi_num);
   1488e:	f890 055c 	ldrb.w	r0, [r0, #1372]	; 0x55c
   14892:	f003 fd39 	bl	18308 <hal_spi_disable>

    /* De-Initialise task structures in uwb_dev */
    uwb_task_deinit(&inst->uwb_dev);
   14896:	4620      	mov	r0, r4
   14898:	f7f4 f9f6 	bl	8c88 <uwb_task_deinit>
    hal_gpio_irq_disable(inst->irq_pin);
   1489c:	f894 055d 	ldrb.w	r0, [r4, #1373]	; 0x55d
   148a0:	f7f4 fba8 	bl	8ff4 <hal_gpio_irq_disable>
    hal_gpio_irq_release(inst->irq_pin);
   148a4:	f894 055d 	ldrb.w	r0, [r4, #1373]	; 0x55d
   148a8:	f7f4 fbb2 	bl	9010 <hal_gpio_irq_release>

    if (inst->uwb_dev.status.selfmalloc) {
   148ac:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   148b0:	f013 0f01 	tst.w	r3, #1
   148b4:	d10c      	bne.n	148d0 <dw1000_dev_deinit+0x48>
        free(inst);
    } else {
        inst->uwb_dev.status.initialized = 0;
   148b6:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   148ba:	f36f 0341 	bfc	r3, #1, #1
   148be:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
    }
}
   148c2:	bd10      	pop	{r4, pc}
    assert(inst);
   148c4:	2300      	movs	r3, #0
   148c6:	461a      	mov	r2, r3
   148c8:	4619      	mov	r1, r3
   148ca:	4618      	mov	r0, r3
   148cc:	f7f4 fbbe 	bl	904c <__assert_func>
        free(inst);
   148d0:	4620      	mov	r0, r4
   148d2:	f7f9 f84f 	bl	d974 <free>
   148d6:	e7f4      	b.n	148c2 <dw1000_dev_deinit+0x3a>

000148d8 <hal_dw1000_spi_txrx_cb>:
 * @param ev    pointer to os_event
 * @return void
 */
void
hal_dw1000_spi_txrx_cb(void *arg, int len)
{
   148d8:	b510      	push	{r4, lr}
    dpl_error_t err;
    struct _dw1000_dev_instance_t * inst = arg;
    assert(inst!=0);
   148da:	b148      	cbz	r0, 148f0 <hal_dw1000_spi_txrx_cb+0x18>
   148dc:	4604      	mov	r4, r0
   148de:	f8b0 3552 	ldrh.w	r3, [r0, #1362]	; 0x552

    /* Check for longer nonblocking read/write op */
    if (dpl_sem_get_count(&inst->spi_nb_sem) == 0) {
   148e2:	b98b      	cbnz	r3, 14908 <hal_dw1000_spi_txrx_cb+0x30>
    return (dpl_error_t)os_sem_release(&sem->sem);
   148e4:	f200 504c 	addw	r0, r0, #1356	; 0x54c
   148e8:	f7f5 fad0 	bl	9e8c <os_sem_release>
        err = dpl_sem_release(&inst->spi_nb_sem);
        assert(err == DPL_OK);
   148ec:	b930      	cbnz	r0, 148fc <hal_dw1000_spi_txrx_cb+0x24>
        hal_gpio_write(inst->ss_pin, 1);
        DW1000_SPI_BT_ADD_END(inst);
        err = dpl_sem_release(inst->spi_sem);
        assert(err == DPL_OK);
    }
}
   148ee:	bd10      	pop	{r4, pc}
    assert(inst!=0);
   148f0:	2300      	movs	r3, #0
   148f2:	461a      	mov	r2, r3
   148f4:	4619      	mov	r1, r3
   148f6:	4618      	mov	r0, r3
   148f8:	f7f4 fba8 	bl	904c <__assert_func>
        assert(err == DPL_OK);
   148fc:	2300      	movs	r3, #0
   148fe:	461a      	mov	r2, r3
   14900:	4619      	mov	r1, r3
   14902:	4618      	mov	r0, r3
   14904:	f7f4 fba2 	bl	904c <__assert_func>
        hal_gpio_write(inst->ss_pin, 1);
   14908:	2101      	movs	r1, #1
   1490a:	f890 055e 	ldrb.w	r0, [r0, #1374]	; 0x55e
   1490e:	f7f4 fae9 	bl	8ee4 <hal_gpio_write>
   14912:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
   14916:	f7f5 fab9 	bl	9e8c <os_sem_release>
        assert(err == DPL_OK);
   1491a:	2800      	cmp	r0, #0
   1491c:	d0e7      	beq.n	148ee <hal_dw1000_spi_txrx_cb+0x16>
   1491e:	2300      	movs	r3, #0
   14920:	461a      	mov	r2, r3
   14922:	4619      	mov	r1, r3
   14924:	4618      	mov	r0, r3
   14926:	f7f4 fb91 	bl	904c <__assert_func>
	...

0001492c <hal_dw1000_inst>:
    if (idx < ARRAY_SIZE(hal_dw1000_instances)) {
   1492c:	4603      	mov	r3, r0
   1492e:	b928      	cbnz	r0, 1493c <hal_dw1000_inst+0x10>
        return &hal_dw1000_instances[idx];
   14930:	4803      	ldr	r0, [pc, #12]	; (14940 <hal_dw1000_inst+0x14>)
   14932:	f44f 62be 	mov.w	r2, #1520	; 0x5f0
   14936:	fb02 0003 	mla	r0, r2, r3, r0
   1493a:	4770      	bx	lr
    return 0;
   1493c:	2000      	movs	r0, #0
}
   1493e:	4770      	bx	lr
   14940:	20000778 	.word	0x20000778

00014944 <hal_dw1000_reset>:
{
   14944:	b510      	push	{r4, lr}
    assert(inst);
   14946:	b308      	cbz	r0, 1498c <hal_dw1000_reset+0x48>
   14948:	4604      	mov	r4, r0
    hal_gpio_init_out(inst->ss_pin, 1);
   1494a:	2101      	movs	r1, #1
   1494c:	f890 055e 	ldrb.w	r0, [r0, #1374]	; 0x55e
   14950:	f7f4 faac 	bl	8eac <hal_gpio_init_out>
    hal_gpio_init_out(inst->rst_pin, 0);
   14954:	2100      	movs	r1, #0
   14956:	f894 055f 	ldrb.w	r0, [r4, #1375]	; 0x55f
   1495a:	f7f4 faa7 	bl	8eac <hal_gpio_init_out>
    hal_gpio_write(inst->rst_pin, 0);
   1495e:	2100      	movs	r1, #0
   14960:	f894 055f 	ldrb.w	r0, [r4, #1375]	; 0x55f
   14964:	f7f4 fabe 	bl	8ee4 <hal_gpio_write>
    dpl_cputime_delay_usecs(1);
   14968:	2001      	movs	r0, #1
   1496a:	f7f9 fcf2 	bl	e352 <dpl_cputime_delay_usecs>
    hal_gpio_write(inst->rst_pin, 1);
   1496e:	2101      	movs	r1, #1
   14970:	f894 055f 	ldrb.w	r0, [r4, #1375]	; 0x55f
   14974:	f7f4 fab6 	bl	8ee4 <hal_gpio_write>
    hal_gpio_init_in(inst->rst_pin, HAL_GPIO_PULL_NONE);
   14978:	2100      	movs	r1, #0
   1497a:	f894 055f 	ldrb.w	r0, [r4, #1375]	; 0x55f
   1497e:	f7f4 fa7f 	bl	8e80 <hal_gpio_init_in>
    dpl_cputime_delay_usecs(5000);
   14982:	f241 3088 	movw	r0, #5000	; 0x1388
   14986:	f7f9 fce4 	bl	e352 <dpl_cputime_delay_usecs>
}
   1498a:	bd10      	pop	{r4, pc}
    assert(inst);
   1498c:	2300      	movs	r3, #0
   1498e:	461a      	mov	r2, r3
   14990:	4619      	mov	r1, r3
   14992:	4618      	mov	r0, r3
   14994:	f7f4 fb5a 	bl	904c <__assert_func>

00014998 <hal_dw1000_read>:
{
   14998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1499c:	4605      	mov	r5, r0
   1499e:	f8bd 9020 	ldrh.w	r9, [sp, #32]
    assert(inst->spi_sem);
   149a2:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548
   149a6:	b178      	cbz	r0, 149c8 <hal_dw1000_read+0x30>
   149a8:	460e      	mov	r6, r1
   149aa:	4617      	mov	r7, r2
   149ac:	4698      	mov	r8, r3
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   149ae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   149b2:	f7f5 fa9d 	bl	9ef0 <os_sem_pend>
    if (rc != DPL_OK) {
   149b6:	b168      	cbz	r0, 149d4 <hal_dw1000_read+0x3c>
        inst->uwb_dev.status.sem_error = 1;
   149b8:	f895 350b 	ldrb.w	r3, [r5, #1291]	; 0x50b
   149bc:	f043 0304 	orr.w	r3, r3, #4
   149c0:	f885 350b 	strb.w	r3, [r5, #1291]	; 0x50b
}
   149c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    assert(inst->spi_sem);
   149c8:	2300      	movs	r3, #0
   149ca:	461a      	mov	r2, r3
   149cc:	4619      	mov	r1, r3
   149ce:	4618      	mov	r0, r3
   149d0:	f7f4 fb3c 	bl	904c <__assert_func>
    hal_gpio_write(inst->ss_pin, 0);
   149d4:	2100      	movs	r1, #0
   149d6:	f895 055e 	ldrb.w	r0, [r5, #1374]	; 0x55e
   149da:	f7f4 fa83 	bl	8ee4 <hal_gpio_write>
    rc = hal_spi_txrx(inst->spi_num, (void*)cmd, 0, cmd_size);
   149de:	463b      	mov	r3, r7
   149e0:	2200      	movs	r2, #0
   149e2:	4631      	mov	r1, r6
   149e4:	f895 055c 	ldrb.w	r0, [r5, #1372]	; 0x55c
   149e8:	f003 fd08 	bl	183fc <hal_spi_txrx>
    assert(rc == DPL_OK);
   149ec:	b9c0      	cbnz	r0, 14a20 <hal_dw1000_read+0x88>
    int step = (inst->uwb_dev.txbuf_size > MYNEWT_VAL(DW1000_HAL_SPI_MAX_CNT)) ?
   149ee:	f8b5 7506 	ldrh.w	r7, [r5, #1286]	; 0x506
        MYNEWT_VAL(DW1000_HAL_SPI_MAX_CNT) : inst->uwb_dev.txbuf_size;
   149f2:	2fff      	cmp	r7, #255	; 0xff
   149f4:	bf28      	it	cs
   149f6:	27ff      	movcs	r7, #255	; 0xff
    for (int offset = 0;offset<length && rc == DPL_OK;offset+=step) {
   149f8:	4604      	mov	r4, r0
    int bytes_left = length;
   149fa:	464e      	mov	r6, r9
    for (int offset = 0;offset<length && rc == DPL_OK;offset+=step) {
   149fc:	454c      	cmp	r4, r9
   149fe:	da15      	bge.n	14a2c <hal_dw1000_read+0x94>
   14a00:	b9a0      	cbnz	r0, 14a2c <hal_dw1000_read+0x94>
        int bytes_to_read = (bytes_left > step) ? step : bytes_left;
   14a02:	4633      	mov	r3, r6
   14a04:	42be      	cmp	r6, r7
   14a06:	bfa8      	it	ge
   14a08:	463b      	movge	r3, r7
        bytes_left-=bytes_to_read;
   14a0a:	1af6      	subs	r6, r6, r3
        rc = hal_spi_txrx(inst->spi_num, inst->uwb_dev.txbuf, buffer+offset, bytes_to_read);
   14a0c:	eb08 0204 	add.w	r2, r8, r4
   14a10:	f8d5 1500 	ldr.w	r1, [r5, #1280]	; 0x500
   14a14:	f895 055c 	ldrb.w	r0, [r5, #1372]	; 0x55c
   14a18:	f003 fcf0 	bl	183fc <hal_spi_txrx>
    for (int offset = 0;offset<length && rc == DPL_OK;offset+=step) {
   14a1c:	443c      	add	r4, r7
   14a1e:	e7ed      	b.n	149fc <hal_dw1000_read+0x64>
    assert(rc == DPL_OK);
   14a20:	2300      	movs	r3, #0
   14a22:	461a      	mov	r2, r3
   14a24:	4619      	mov	r1, r3
   14a26:	4618      	mov	r0, r3
   14a28:	f7f4 fb10 	bl	904c <__assert_func>
    hal_gpio_write(inst->ss_pin, 1);
   14a2c:	2101      	movs	r1, #1
   14a2e:	f895 055e 	ldrb.w	r0, [r5, #1374]	; 0x55e
   14a32:	f7f4 fa57 	bl	8ee4 <hal_gpio_write>
    return (dpl_error_t)os_sem_release(&sem->sem);
   14a36:	f8d5 0548 	ldr.w	r0, [r5, #1352]	; 0x548
   14a3a:	f7f5 fa27 	bl	9e8c <os_sem_release>
    assert(rc == DPL_OK);
   14a3e:	2800      	cmp	r0, #0
   14a40:	d0c0      	beq.n	149c4 <hal_dw1000_read+0x2c>
   14a42:	2300      	movs	r3, #0
   14a44:	461a      	mov	r2, r3
   14a46:	4619      	mov	r1, r3
   14a48:	4618      	mov	r0, r3
   14a4a:	f7f4 faff 	bl	904c <__assert_func>
	...

00014a50 <hal_dw1000_read_noblock>:
 * @param length    Represents buffer length.
 * @return int      DPL_OK if read is ok, error otherwise
 */
int
hal_dw1000_read_noblock(struct _dw1000_dev_instance_t * inst, const uint8_t * cmd, uint8_t cmd_size, uint8_t * buffer, uint16_t length)
{
   14a50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a54:	4604      	mov	r4, r0
   14a56:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
    int rc = DPL_OK;
    assert(inst->spi_sem);
   14a5a:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548
   14a5e:	b178      	cbz	r0, 14a80 <hal_dw1000_read_noblock+0x30>
   14a60:	4688      	mov	r8, r1
   14a62:	4617      	mov	r7, r2
   14a64:	461e      	mov	r6, r3
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   14a66:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14a6a:	f7f5 fa41 	bl	9ef0 <os_sem_pend>

    rc = dpl_sem_pend(inst->spi_sem, DPL_TIMEOUT_NEVER);
    if (rc != DPL_OK) {
   14a6e:	b168      	cbz	r0, 14a8c <hal_dw1000_read_noblock+0x3c>
        inst->uwb_dev.status.sem_error = 1;
   14a70:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   14a74:	f043 0304 	orr.w	r3, r3, #4
   14a78:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
    rc = dpl_sem_release(inst->spi_sem);
    assert(rc == DPL_OK);

early_exit:
    return rc;
}
   14a7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(inst->spi_sem);
   14a80:	2300      	movs	r3, #0
   14a82:	461a      	mov	r2, r3
   14a84:	4619      	mov	r1, r3
   14a86:	4618      	mov	r0, r3
   14a88:	f7f4 fae0 	bl	904c <__assert_func>
    rc = hal_spi_disable(inst->spi_num);
   14a8c:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   14a90:	f003 fc3a 	bl	18308 <hal_spi_disable>
   14a94:	4605      	mov	r5, r0
    rc |= hal_spi_set_txrx_cb(inst->spi_num, hal_dw1000_spi_txrx_cb, (void*)inst);
   14a96:	4622      	mov	r2, r4
   14a98:	4987      	ldr	r1, [pc, #540]	; (14cb8 <hal_dw1000_read_noblock+0x268>)
   14a9a:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   14a9e:	f003 fc97 	bl	183d0 <hal_spi_set_txrx_cb>
   14aa2:	4305      	orrs	r5, r0
    rc |= hal_spi_enable(inst->spi_num);
   14aa4:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   14aa8:	f003 fc08 	bl	182bc <hal_spi_enable>
    if (rc != DPL_OK) {
   14aac:	ea55 0300 	orrs.w	r3, r5, r0
   14ab0:	d00b      	beq.n	14aca <hal_dw1000_read_noblock+0x7a>
    return (dpl_error_t)os_sem_release(&sem->sem);
   14ab2:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
   14ab6:	f7f5 f9e9 	bl	9e8c <os_sem_release>
    assert(rc == DPL_OK);
   14aba:	2800      	cmp	r0, #0
   14abc:	d0de      	beq.n	14a7c <hal_dw1000_read_noblock+0x2c>
   14abe:	2300      	movs	r3, #0
   14ac0:	461a      	mov	r2, r3
   14ac2:	4619      	mov	r1, r3
   14ac4:	4618      	mov	r0, r3
   14ac6:	f7f4 fac1 	bl	904c <__assert_func>
    hal_gpio_write(inst->ss_pin, 0);
   14aca:	2100      	movs	r1, #0
   14acc:	f894 055e 	ldrb.w	r0, [r4, #1374]	; 0x55e
   14ad0:	f7f4 fa08 	bl	8ee4 <hal_gpio_write>
    if (cmd_size + length < inst->uwb_dev.txbuf_size &&
   14ad4:	eb07 0509 	add.w	r5, r7, r9
   14ad8:	f8b4 3506 	ldrh.w	r3, [r4, #1286]	; 0x506
   14adc:	429d      	cmp	r5, r3
   14ade:	da01      	bge.n	14ae4 <hal_dw1000_read_noblock+0x94>
   14ae0:	2dfe      	cmp	r5, #254	; 0xfe
   14ae2:	dd0f      	ble.n	14b04 <hal_dw1000_read_noblock+0xb4>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   14ae4:	f204 5a4c 	addw	sl, r4, #1356	; 0x54c
   14ae8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14aec:	4650      	mov	r0, sl
   14aee:	f7f5 f9ff 	bl	9ef0 <os_sem_pend>
    if (rc != DPL_OK) {
   14af2:	2800      	cmp	r0, #0
   14af4:	d059      	beq.n	14baa <hal_dw1000_read_noblock+0x15a>
        inst->uwb_dev.status.sem_error = 1;
   14af6:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   14afa:	f043 0304 	orr.w	r3, r3, #4
   14afe:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
        goto err_return;
   14b02:	e7d6      	b.n	14ab2 <hal_dw1000_read_noblock+0x62>
        memset(inst->uwb_dev.txbuf, 0, cmd_size + length);
   14b04:	462a      	mov	r2, r5
   14b06:	2100      	movs	r1, #0
   14b08:	f8d4 0500 	ldr.w	r0, [r4, #1280]	; 0x500
   14b0c:	f7f8 ff79 	bl	da02 <memset>
        memcpy(inst->uwb_dev.txbuf, cmd, cmd_size);
   14b10:	463a      	mov	r2, r7
   14b12:	4641      	mov	r1, r8
   14b14:	f8d4 0500 	ldr.w	r0, [r4, #1280]	; 0x500
   14b18:	f7f8 ff66 	bl	d9e8 <memcpy>
   14b1c:	f204 584c 	addw	r8, r4, #1356	; 0x54c
   14b20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14b24:	4640      	mov	r0, r8
   14b26:	f7f5 f9e3 	bl	9ef0 <os_sem_pend>
        if (rc != DPL_OK) {
   14b2a:	b130      	cbz	r0, 14b3a <hal_dw1000_read_noblock+0xea>
            inst->uwb_dev.status.sem_error = 1;
   14b2c:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   14b30:	f043 0304 	orr.w	r3, r3, #4
   14b34:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
            goto err_return;
   14b38:	e7bb      	b.n	14ab2 <hal_dw1000_read_noblock+0x62>
        rc = hal_spi_txrx_noblock(inst->spi_num, inst->uwb_dev.txbuf,
   14b3a:	f8d4 1500 	ldr.w	r1, [r4, #1280]	; 0x500
   14b3e:	462b      	mov	r3, r5
   14b40:	460a      	mov	r2, r1
   14b42:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   14b46:	f003 fcaf 	bl	184a8 <hal_spi_txrx_noblock>
   14b4a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14b4e:	4640      	mov	r0, r8
   14b50:	f7f5 f9ce 	bl	9ef0 <os_sem_pend>
        if (rc != DPL_OK) {
   14b54:	b130      	cbz	r0, 14b64 <hal_dw1000_read_noblock+0x114>
            inst->uwb_dev.status.sem_error = 1;
   14b56:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   14b5a:	f043 0304 	orr.w	r3, r3, #4
   14b5e:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
            goto err_return;
   14b62:	e7a6      	b.n	14ab2 <hal_dw1000_read_noblock+0x62>
    return (dpl_error_t)os_sem_release(&sem->sem);
   14b64:	4640      	mov	r0, r8
   14b66:	f7f5 f991 	bl	9e8c <os_sem_release>
        assert(rc == DPL_OK);
   14b6a:	b9c0      	cbnz	r0, 14b9e <hal_dw1000_read_noblock+0x14e>
        hal_gpio_write(inst->ss_pin, 1);
   14b6c:	2101      	movs	r1, #1
   14b6e:	f894 055e 	ldrb.w	r0, [r4, #1374]	; 0x55e
   14b72:	f7f4 f9b7 	bl	8ee4 <hal_gpio_write>
        memcpy(buffer, inst->uwb_dev.txbuf + cmd_size, length);
   14b76:	f8d4 1500 	ldr.w	r1, [r4, #1280]	; 0x500
   14b7a:	464a      	mov	r2, r9
   14b7c:	4439      	add	r1, r7
   14b7e:	4630      	mov	r0, r6
   14b80:	f7f8 ff32 	bl	d9e8 <memcpy>
   14b84:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
   14b88:	f7f5 f980 	bl	9e8c <os_sem_release>
        assert(rc == DPL_OK);
   14b8c:	2800      	cmp	r0, #0
   14b8e:	f43f af75 	beq.w	14a7c <hal_dw1000_read_noblock+0x2c>
   14b92:	2300      	movs	r3, #0
   14b94:	461a      	mov	r2, r3
   14b96:	4619      	mov	r1, r3
   14b98:	4618      	mov	r0, r3
   14b9a:	f7f4 fa57 	bl	904c <__assert_func>
        assert(rc == DPL_OK);
   14b9e:	2300      	movs	r3, #0
   14ba0:	461a      	mov	r2, r3
   14ba2:	4619      	mov	r1, r3
   14ba4:	4618      	mov	r0, r3
   14ba6:	f7f4 fa51 	bl	904c <__assert_func>
    rc = hal_spi_txrx_noblock(inst->spi_num, (void*)cmd, inst->uwb_dev.txbuf, cmd_size);
   14baa:	463b      	mov	r3, r7
   14bac:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
   14bb0:	4641      	mov	r1, r8
   14bb2:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   14bb6:	f003 fc77 	bl	184a8 <hal_spi_txrx_noblock>
    if (rc != DPL_OK) {
   14bba:	4680      	mov	r8, r0
   14bbc:	2800      	cmp	r0, #0
   14bbe:	f47f af78 	bne.w	14ab2 <hal_dw1000_read_noblock+0x62>
    memset(inst->uwb_dev.txbuf, 0, (length < inst->uwb_dev.txbuf_size)? length : inst->uwb_dev.txbuf_size);
   14bc2:	f8b4 2506 	ldrh.w	r2, [r4, #1286]	; 0x506
   14bc6:	454a      	cmp	r2, r9
   14bc8:	bf28      	it	cs
   14bca:	464a      	movcs	r2, r9
   14bcc:	2100      	movs	r1, #0
   14bce:	f8d4 0500 	ldr.w	r0, [r4, #1280]	; 0x500
   14bd2:	f7f8 ff16 	bl	da02 <memset>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   14bd6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14bda:	4650      	mov	r0, sl
   14bdc:	f7f5 f988 	bl	9ef0 <os_sem_pend>
    if (rc != DPL_OK) {
   14be0:	b130      	cbz	r0, 14bf0 <hal_dw1000_read_noblock+0x1a0>
        inst->uwb_dev.status.sem_error = 1;
   14be2:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   14be6:	f043 0304 	orr.w	r3, r3, #4
   14bea:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
        goto err_return;
   14bee:	e760      	b.n	14ab2 <hal_dw1000_read_noblock+0x62>
    return (dpl_error_t)os_sem_release(&sem->sem);
   14bf0:	4650      	mov	r0, sl
   14bf2:	f7f5 f94b 	bl	9e8c <os_sem_release>
    assert(rc == DPL_OK);
   14bf6:	b940      	cbnz	r0, 14c0a <hal_dw1000_read_noblock+0x1ba>
    int step = (inst->uwb_dev.txbuf_size > MYNEWT_VAL(DW1000_HAL_SPI_MAX_CNT))?
   14bf8:	f8b4 b506 	ldrh.w	fp, [r4, #1286]	; 0x506
        MYNEWT_VAL(DW1000_HAL_SPI_MAX_CNT) : inst->uwb_dev.txbuf_size;
   14bfc:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   14c00:	bf28      	it	cs
   14c02:	f04f 0bff 	movcs.w	fp, #255	; 0xff
    int bytes_left = length;
   14c06:	464d      	mov	r5, r9
    while (offset<length) {
   14c08:	e011      	b.n	14c2e <hal_dw1000_read_noblock+0x1de>
    assert(rc == DPL_OK);
   14c0a:	2300      	movs	r3, #0
   14c0c:	461a      	mov	r2, r3
   14c0e:	4619      	mov	r1, r3
   14c10:	4618      	mov	r0, r3
   14c12:	f7f4 fa1b 	bl	904c <__assert_func>
        rc = hal_spi_txrx_noblock(inst->spi_num, (void*)inst->uwb_dev.txbuf,
   14c16:	463b      	mov	r3, r7
   14c18:	eb06 0208 	add.w	r2, r6, r8
   14c1c:	f8d4 1500 	ldr.w	r1, [r4, #1280]	; 0x500
   14c20:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   14c24:	f003 fc40 	bl	184a8 <hal_spi_txrx_noblock>
        assert(rc==DPL_OK);
   14c28:	b9b8      	cbnz	r0, 14c5a <hal_dw1000_read_noblock+0x20a>
        if (bytes_left) {
   14c2a:	b9e5      	cbnz	r5, 14c66 <hal_dw1000_read_noblock+0x216>
        offset+=bytes_to_read;
   14c2c:	44b8      	add	r8, r7
    while (offset<length) {
   14c2e:	45c1      	cmp	r9, r8
   14c30:	dd31      	ble.n	14c96 <hal_dw1000_read_noblock+0x246>
        int bytes_to_read = (bytes_left > step) ? step : bytes_left;
   14c32:	462f      	mov	r7, r5
   14c34:	455d      	cmp	r5, fp
   14c36:	bfa8      	it	ge
   14c38:	465f      	movge	r7, fp
        if (bytes_left) {
   14c3a:	1bed      	subs	r5, r5, r7
   14c3c:	d0eb      	beq.n	14c16 <hal_dw1000_read_noblock+0x1c6>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   14c3e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14c42:	4650      	mov	r0, sl
   14c44:	f7f5 f954 	bl	9ef0 <os_sem_pend>
            if (rc != DPL_OK) {
   14c48:	2800      	cmp	r0, #0
   14c4a:	d0e4      	beq.n	14c16 <hal_dw1000_read_noblock+0x1c6>
                inst->uwb_dev.status.sem_error = 1;
   14c4c:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   14c50:	f043 0304 	orr.w	r3, r3, #4
   14c54:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
                goto err_return;
   14c58:	e72b      	b.n	14ab2 <hal_dw1000_read_noblock+0x62>
        assert(rc==DPL_OK);
   14c5a:	2300      	movs	r3, #0
   14c5c:	461a      	mov	r2, r3
   14c5e:	4619      	mov	r1, r3
   14c60:	4618      	mov	r0, r3
   14c62:	f7f4 f9f3 	bl	904c <__assert_func>
   14c66:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14c6a:	4650      	mov	r0, sl
   14c6c:	f7f5 f940 	bl	9ef0 <os_sem_pend>
            if (rc != DPL_OK) {
   14c70:	b950      	cbnz	r0, 14c88 <hal_dw1000_read_noblock+0x238>
    return (dpl_error_t)os_sem_release(&sem->sem);
   14c72:	4650      	mov	r0, sl
   14c74:	f7f5 f90a 	bl	9e8c <os_sem_release>
            assert(rc == DPL_OK);
   14c78:	2800      	cmp	r0, #0
   14c7a:	d0d7      	beq.n	14c2c <hal_dw1000_read_noblock+0x1dc>
   14c7c:	2300      	movs	r3, #0
   14c7e:	461a      	mov	r2, r3
   14c80:	4619      	mov	r1, r3
   14c82:	4618      	mov	r0, r3
   14c84:	f7f4 f9e2 	bl	904c <__assert_func>
                inst->uwb_dev.status.sem_error = 1;
   14c88:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   14c8c:	f043 0304 	orr.w	r3, r3, #4
   14c90:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
                goto err_return;
   14c94:	e70d      	b.n	14ab2 <hal_dw1000_read_noblock+0x62>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   14c96:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14c9a:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
   14c9e:	f7f5 f927 	bl	9ef0 <os_sem_pend>
    if (rc != DPL_OK) {
   14ca2:	2800      	cmp	r0, #0
   14ca4:	f43f af05 	beq.w	14ab2 <hal_dw1000_read_noblock+0x62>
        inst->uwb_dev.status.sem_error = 1;
   14ca8:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   14cac:	f043 0304 	orr.w	r3, r3, #4
   14cb0:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
        goto err_return;
   14cb4:	e6fd      	b.n	14ab2 <hal_dw1000_read_noblock+0x62>
   14cb6:	bf00      	nop
   14cb8:	000148d9 	.word	0x000148d9

00014cbc <hal_dw1000_write>:
 * @param length    Represents buffer length.
 * @return int      DPL_OK if read is ok, error otherwise
 */
int
hal_dw1000_write(struct _dw1000_dev_instance_t * inst, const uint8_t * cmd, uint8_t cmd_size, uint8_t * buffer, uint16_t length)
{
   14cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14cc0:	4604      	mov	r4, r0
   14cc2:	f8bd 9020 	ldrh.w	r9, [sp, #32]
    int rc = DPL_OK;
    assert(inst->spi_sem);
   14cc6:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548
   14cca:	b178      	cbz	r0, 14cec <hal_dw1000_write+0x30>
   14ccc:	460e      	mov	r6, r1
   14cce:	4617      	mov	r7, r2
   14cd0:	4698      	mov	r8, r3
   14cd2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14cd6:	f7f5 f90b 	bl	9ef0 <os_sem_pend>
    rc = dpl_sem_pend(inst->spi_sem, DPL_TIMEOUT_NEVER);
    if (rc != DPL_OK) {
   14cda:	b168      	cbz	r0, 14cf8 <hal_dw1000_write+0x3c>
        inst->uwb_dev.status.sem_error = 1;
   14cdc:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   14ce0:	f043 0304 	orr.w	r3, r3, #4
   14ce4:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
    DW1000_SPI_BT_ADD_END(inst);
    rc = dpl_sem_release(inst->spi_sem);
    assert(rc == DPL_OK);
early_exit:
    return rc;
}
   14ce8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    assert(inst->spi_sem);
   14cec:	2300      	movs	r3, #0
   14cee:	461a      	mov	r2, r3
   14cf0:	4619      	mov	r1, r3
   14cf2:	4618      	mov	r0, r3
   14cf4:	f7f4 f9aa 	bl	904c <__assert_func>
    hal_gpio_write(inst->ss_pin, 0);
   14cf8:	2100      	movs	r1, #0
   14cfa:	f894 055e 	ldrb.w	r0, [r4, #1374]	; 0x55e
   14cfe:	f7f4 f8f1 	bl	8ee4 <hal_gpio_write>
    rc = hal_spi_txrx(inst->spi_num, (void*)cmd, 0, cmd_size);
   14d02:	463b      	mov	r3, r7
   14d04:	2200      	movs	r2, #0
   14d06:	4631      	mov	r1, r6
   14d08:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   14d0c:	f003 fb76 	bl	183fc <hal_spi_txrx>
    assert(rc == DPL_OK);
   14d10:	b998      	cbnz	r0, 14d3a <hal_dw1000_write+0x7e>
    if (length) {
   14d12:	f1b9 0f00 	cmp.w	r9, #0
   14d16:	d116      	bne.n	14d46 <hal_dw1000_write+0x8a>
    hal_gpio_write(inst->ss_pin, 1);
   14d18:	2101      	movs	r1, #1
   14d1a:	f894 055e 	ldrb.w	r0, [r4, #1374]	; 0x55e
   14d1e:	f7f4 f8e1 	bl	8ee4 <hal_gpio_write>
    return (dpl_error_t)os_sem_release(&sem->sem);
   14d22:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
   14d26:	f7f5 f8b1 	bl	9e8c <os_sem_release>
    assert(rc == DPL_OK);
   14d2a:	2800      	cmp	r0, #0
   14d2c:	d0dc      	beq.n	14ce8 <hal_dw1000_write+0x2c>
   14d2e:	2300      	movs	r3, #0
   14d30:	461a      	mov	r2, r3
   14d32:	4619      	mov	r1, r3
   14d34:	4618      	mov	r0, r3
   14d36:	f7f4 f989 	bl	904c <__assert_func>
    assert(rc == DPL_OK);
   14d3a:	2300      	movs	r3, #0
   14d3c:	461a      	mov	r2, r3
   14d3e:	4619      	mov	r1, r3
   14d40:	4618      	mov	r0, r3
   14d42:	f7f4 f983 	bl	904c <__assert_func>
        hal_spi_txrx(inst->spi_num, (void*)buffer, 0, length);
   14d46:	464b      	mov	r3, r9
   14d48:	2200      	movs	r2, #0
   14d4a:	4641      	mov	r1, r8
   14d4c:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   14d50:	f003 fb54 	bl	183fc <hal_spi_txrx>
   14d54:	e7e0      	b.n	14d18 <hal_dw1000_write+0x5c>
	...

00014d58 <hal_dw1000_write_noblock>:
 * @param length    Represents buffer length.
 * @return int      DPL_OK if read is ok, error otherwise
 */
int
hal_dw1000_write_noblock(struct _dw1000_dev_instance_t * inst, const uint8_t * cmd, uint8_t cmd_size, uint8_t * buffer, uint16_t length)
{
   14d58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d5c:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
    int rc = DPL_OK;
    assert(length);
   14d60:	f1b9 0f00 	cmp.w	r9, #0
   14d64:	d015      	beq.n	14d92 <hal_dw1000_write_noblock+0x3a>
   14d66:	4604      	mov	r4, r0
   14d68:	460f      	mov	r7, r1
   14d6a:	4616      	mov	r6, r2
   14d6c:	4698      	mov	r8, r3
    assert(inst->spi_sem);
   14d6e:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548
   14d72:	b1a0      	cbz	r0, 14d9e <hal_dw1000_write_noblock+0x46>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   14d74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14d78:	f7f5 f8ba 	bl	9ef0 <os_sem_pend>
    rc = dpl_sem_pend(inst->spi_sem, DPL_TIMEOUT_NEVER);
   14d7c:	4603      	mov	r3, r0
    if (rc != DPL_OK) {
   14d7e:	b1a0      	cbz	r0, 14daa <hal_dw1000_write_noblock+0x52>
        inst->uwb_dev.status.sem_error = 1;
   14d80:	f894 250b 	ldrb.w	r2, [r4, #1291]	; 0x50b
   14d84:	f042 0204 	orr.w	r2, r2, #4
   14d88:	f884 250b 	strb.w	r2, [r4, #1291]	; 0x50b

err_return:
    rc = dpl_sem_release(inst->spi_sem);
    assert(rc == DPL_OK);
    return rc;
}
   14d8c:	4618      	mov	r0, r3
   14d8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(length);
   14d92:	2300      	movs	r3, #0
   14d94:	461a      	mov	r2, r3
   14d96:	4619      	mov	r1, r3
   14d98:	4618      	mov	r0, r3
   14d9a:	f7f4 f957 	bl	904c <__assert_func>
    assert(inst->spi_sem);
   14d9e:	2300      	movs	r3, #0
   14da0:	461a      	mov	r2, r3
   14da2:	4619      	mov	r1, r3
   14da4:	4618      	mov	r0, r3
   14da6:	f7f4 f951 	bl	904c <__assert_func>
    rc = hal_spi_disable(inst->spi_num);
   14daa:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   14dae:	f003 faab 	bl	18308 <hal_spi_disable>
   14db2:	4605      	mov	r5, r0
    rc |= hal_spi_set_txrx_cb(inst->spi_num, hal_dw1000_spi_txrx_cb, (void*)inst);
   14db4:	4622      	mov	r2, r4
   14db6:	4960      	ldr	r1, [pc, #384]	; (14f38 <hal_dw1000_write_noblock+0x1e0>)
   14db8:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   14dbc:	f003 fb08 	bl	183d0 <hal_spi_set_txrx_cb>
   14dc0:	4305      	orrs	r5, r0
    rc |= hal_spi_enable(inst->spi_num);
   14dc2:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   14dc6:	f003 fa79 	bl	182bc <hal_spi_enable>
    if (rc != DPL_OK) {
   14dca:	ea55 0300 	orrs.w	r3, r5, r0
   14dce:	d00c      	beq.n	14dea <hal_dw1000_write_noblock+0x92>
    return (dpl_error_t)os_sem_release(&sem->sem);
   14dd0:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
   14dd4:	f7f5 f85a 	bl	9e8c <os_sem_release>
    rc = dpl_sem_release(inst->spi_sem);
   14dd8:	4603      	mov	r3, r0
    assert(rc == DPL_OK);
   14dda:	2800      	cmp	r0, #0
   14ddc:	d0d6      	beq.n	14d8c <hal_dw1000_write_noblock+0x34>
   14dde:	2300      	movs	r3, #0
   14de0:	461a      	mov	r2, r3
   14de2:	4619      	mov	r1, r3
   14de4:	4618      	mov	r0, r3
   14de6:	f7f4 f931 	bl	904c <__assert_func>
    hal_gpio_write(inst->ss_pin, 0);
   14dea:	2100      	movs	r1, #0
   14dec:	f894 055e 	ldrb.w	r0, [r4, #1374]	; 0x55e
   14df0:	f7f4 f878 	bl	8ee4 <hal_gpio_write>
    if (cmd_size + length < inst->uwb_dev.txbuf_size &&
   14df4:	eb06 0509 	add.w	r5, r6, r9
   14df8:	f8b4 3506 	ldrh.w	r3, [r4, #1286]	; 0x506
   14dfc:	429d      	cmp	r5, r3
   14dfe:	da01      	bge.n	14e04 <hal_dw1000_write_noblock+0xac>
   14e00:	2dfe      	cmp	r5, #254	; 0xfe
   14e02:	dd0e      	ble.n	14e22 <hal_dw1000_write_noblock+0xca>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   14e04:	f204 5a4c 	addw	sl, r4, #1356	; 0x54c
   14e08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14e0c:	4650      	mov	r0, sl
   14e0e:	f7f5 f86f 	bl	9ef0 <os_sem_pend>
    if (rc != DPL_OK) {
   14e12:	b1e8      	cbz	r0, 14e50 <hal_dw1000_write_noblock+0xf8>
        inst->uwb_dev.status.sem_error = 1;
   14e14:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   14e18:	f043 0304 	orr.w	r3, r3, #4
   14e1c:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
        goto err_return;
   14e20:	e7d6      	b.n	14dd0 <hal_dw1000_write_noblock+0x78>
        memcpy(inst->uwb_dev.txbuf, cmd, cmd_size);
   14e22:	4632      	mov	r2, r6
   14e24:	4639      	mov	r1, r7
   14e26:	f8d4 0500 	ldr.w	r0, [r4, #1280]	; 0x500
   14e2a:	f7f8 fddd 	bl	d9e8 <memcpy>
        memcpy(inst->uwb_dev.txbuf+cmd_size, buffer, length);
   14e2e:	f8d4 0500 	ldr.w	r0, [r4, #1280]	; 0x500
   14e32:	464a      	mov	r2, r9
   14e34:	4641      	mov	r1, r8
   14e36:	4430      	add	r0, r6
   14e38:	f7f8 fdd6 	bl	d9e8 <memcpy>
        rc = hal_spi_txrx_noblock(inst->spi_num, (void*)inst->uwb_dev.txbuf,
   14e3c:	f8d4 1500 	ldr.w	r1, [r4, #1280]	; 0x500
   14e40:	462b      	mov	r3, r5
   14e42:	460a      	mov	r2, r1
   14e44:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   14e48:	f003 fb2e 	bl	184a8 <hal_spi_txrx_noblock>
   14e4c:	4603      	mov	r3, r0
        return rc;
   14e4e:	e79d      	b.n	14d8c <hal_dw1000_write_noblock+0x34>
    rc = hal_spi_txrx_noblock(inst->spi_num, (void*)cmd, inst->uwb_dev.txbuf, cmd_size);
   14e50:	4633      	mov	r3, r6
   14e52:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
   14e56:	4639      	mov	r1, r7
   14e58:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   14e5c:	f003 fb24 	bl	184a8 <hal_spi_txrx_noblock>
    assert(rc==DPL_OK);
   14e60:	b960      	cbnz	r0, 14e7c <hal_dw1000_write_noblock+0x124>
   14e62:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14e66:	4650      	mov	r0, sl
   14e68:	f7f5 f842 	bl	9ef0 <os_sem_pend>
    if (rc != DPL_OK) {
   14e6c:	b160      	cbz	r0, 14e88 <hal_dw1000_write_noblock+0x130>
        inst->uwb_dev.status.sem_error = 1;
   14e6e:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   14e72:	f043 0304 	orr.w	r3, r3, #4
   14e76:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
        goto err_return;
   14e7a:	e7a9      	b.n	14dd0 <hal_dw1000_write_noblock+0x78>
    assert(rc==DPL_OK);
   14e7c:	2300      	movs	r3, #0
   14e7e:	461a      	mov	r2, r3
   14e80:	4619      	mov	r1, r3
   14e82:	4618      	mov	r0, r3
   14e84:	f7f4 f8e2 	bl	904c <__assert_func>
    return (dpl_error_t)os_sem_release(&sem->sem);
   14e88:	4650      	mov	r0, sl
   14e8a:	f7f4 ffff 	bl	9e8c <os_sem_release>
   14e8e:	4607      	mov	r7, r0
    rc = dpl_sem_release(&inst->spi_nb_sem);
   14e90:	4603      	mov	r3, r0
    assert(rc == DPL_OK);
   14e92:	b940      	cbnz	r0, 14ea6 <hal_dw1000_write_noblock+0x14e>
    int step = (inst->uwb_dev.txbuf_size > MYNEWT_VAL(DW1000_HAL_SPI_MAX_CNT)) ?
   14e94:	f8b4 b506 	ldrh.w	fp, [r4, #1286]	; 0x506
        MYNEWT_VAL(DW1000_HAL_SPI_MAX_CNT) : inst->uwb_dev.txbuf_size;
   14e98:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   14e9c:	bf28      	it	cs
   14e9e:	f04f 0bff 	movcs.w	fp, #255	; 0xff
    int bytes_left = length;
   14ea2:	464d      	mov	r5, r9
    while (offset<length) {
   14ea4:	e012      	b.n	14ecc <hal_dw1000_write_noblock+0x174>
    assert(rc == DPL_OK);
   14ea6:	2300      	movs	r3, #0
   14ea8:	461a      	mov	r2, r3
   14eaa:	4619      	mov	r1, r3
   14eac:	4618      	mov	r0, r3
   14eae:	f7f4 f8cd 	bl	904c <__assert_func>
        rc = hal_spi_txrx_noblock(inst->spi_num, (void*)buffer+offset,
   14eb2:	4633      	mov	r3, r6
   14eb4:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
   14eb8:	eb08 0107 	add.w	r1, r8, r7
   14ebc:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   14ec0:	f003 faf2 	bl	184a8 <hal_spi_txrx_noblock>
        assert(rc==DPL_OK);
   14ec4:	4603      	mov	r3, r0
   14ec6:	b9c0      	cbnz	r0, 14efa <hal_dw1000_write_noblock+0x1a2>
        if (bytes_left) {
   14ec8:	b9ed      	cbnz	r5, 14f06 <hal_dw1000_write_noblock+0x1ae>
        offset+=bytes_to_write;
   14eca:	4437      	add	r7, r6
    while (offset<length) {
   14ecc:	45b9      	cmp	r9, r7
   14ece:	f77f af5d 	ble.w	14d8c <hal_dw1000_write_noblock+0x34>
        int bytes_to_write = (bytes_left > step) ? step : bytes_left;
   14ed2:	462e      	mov	r6, r5
   14ed4:	455d      	cmp	r5, fp
   14ed6:	bfa8      	it	ge
   14ed8:	465e      	movge	r6, fp
        if (bytes_left) {
   14eda:	1bad      	subs	r5, r5, r6
   14edc:	d0e9      	beq.n	14eb2 <hal_dw1000_write_noblock+0x15a>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   14ede:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14ee2:	4650      	mov	r0, sl
   14ee4:	f7f5 f804 	bl	9ef0 <os_sem_pend>
            if (rc != DPL_OK) {
   14ee8:	2800      	cmp	r0, #0
   14eea:	d0e2      	beq.n	14eb2 <hal_dw1000_write_noblock+0x15a>
                inst->uwb_dev.status.sem_error = 1;
   14eec:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   14ef0:	f043 0304 	orr.w	r3, r3, #4
   14ef4:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
                goto err_return;
   14ef8:	e76a      	b.n	14dd0 <hal_dw1000_write_noblock+0x78>
        assert(rc==DPL_OK);
   14efa:	2300      	movs	r3, #0
   14efc:	461a      	mov	r2, r3
   14efe:	4619      	mov	r1, r3
   14f00:	4618      	mov	r0, r3
   14f02:	f7f4 f8a3 	bl	904c <__assert_func>
   14f06:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14f0a:	4650      	mov	r0, sl
   14f0c:	f7f4 fff0 	bl	9ef0 <os_sem_pend>
            if (rc != DPL_OK) {
   14f10:	b958      	cbnz	r0, 14f2a <hal_dw1000_write_noblock+0x1d2>
    return (dpl_error_t)os_sem_release(&sem->sem);
   14f12:	4650      	mov	r0, sl
   14f14:	f7f4 ffba 	bl	9e8c <os_sem_release>
            rc = dpl_sem_release(&inst->spi_nb_sem);
   14f18:	4603      	mov	r3, r0
            assert(rc == DPL_OK);
   14f1a:	2800      	cmp	r0, #0
   14f1c:	d0d5      	beq.n	14eca <hal_dw1000_write_noblock+0x172>
   14f1e:	2300      	movs	r3, #0
   14f20:	461a      	mov	r2, r3
   14f22:	4619      	mov	r1, r3
   14f24:	4618      	mov	r0, r3
   14f26:	f7f4 f891 	bl	904c <__assert_func>
                inst->uwb_dev.status.sem_error = 1;
   14f2a:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   14f2e:	f043 0304 	orr.w	r3, r3, #4
   14f32:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
                goto err_return;
   14f36:	e74b      	b.n	14dd0 <hal_dw1000_write_noblock+0x78>
   14f38:	000148d9 	.word	0x000148d9

00014f3c <hal_dw1000_rw_noblock_wait>:
 * @param timeout  Time in ms to wait, use DPL_TIMEOUT_NEVER (UINT32_MAX) to wait indefinitely
 * @return int  Returns 0 on success, error code otherwise
 */
int
hal_dw1000_rw_noblock_wait(struct _dw1000_dev_instance_t * inst, uint32_t timeout_ms)
{
   14f3c:	b530      	push	{r4, r5, lr}
   14f3e:	b083      	sub	sp, #12
   14f40:	4604      	mov	r4, r0
    int err;
    dpl_time_t ticks;
    if (timeout_ms != DPL_TIMEOUT_NEVER) {
   14f42:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   14f46:	d10f      	bne.n	14f68 <hal_dw1000_rw_noblock_wait+0x2c>
        dpl_time_ms_to_ticks(timeout_ms, &ticks);
    } else {
        ticks = DPL_TIMEOUT_NEVER;
   14f48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14f4c:	9301      	str	r3, [sp, #4]
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   14f4e:	9901      	ldr	r1, [sp, #4]
   14f50:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
   14f54:	f7f4 ffcc 	bl	9ef0 <os_sem_pend>
   14f58:	4605      	mov	r5, r0
    }
    err = dpl_sem_pend(inst->spi_sem, ticks);
    if (dpl_sem_get_count(inst->spi_sem) == 0) {
   14f5a:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
   14f5e:	88c3      	ldrh	r3, [r0, #6]
   14f60:	b13b      	cbz	r3, 14f72 <hal_dw1000_rw_noblock_wait+0x36>
        dpl_sem_release(inst->spi_sem);
    }
    return err;
}
   14f62:	4628      	mov	r0, r5
   14f64:	b003      	add	sp, #12
   14f66:	bd30      	pop	{r4, r5, pc}
   14f68:	4608      	mov	r0, r1
    return (dpl_error_t)os_time_ms_to_ticks(ms, out_ticks);
   14f6a:	a901      	add	r1, sp, #4
   14f6c:	f7f5 fa69 	bl	a442 <os_time_ms_to_ticks>
   14f70:	e7ed      	b.n	14f4e <hal_dw1000_rw_noblock_wait+0x12>
    return (dpl_error_t)os_sem_release(&sem->sem);
   14f72:	f7f4 ff8b 	bl	9e8c <os_sem_release>
    return err;
   14f76:	e7f4      	b.n	14f62 <hal_dw1000_rw_noblock_wait+0x26>

00014f78 <hal_dw1000_wakeup>:
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return int  DPL_OK if read is ok, error otherwise
 */
int
hal_dw1000_wakeup(struct _dw1000_dev_instance_t * inst)
{
   14f78:	b538      	push	{r3, r4, r5, lr}
   14f7a:	4604      	mov	r4, r0
    int rc = DPL_OK;
    os_sr_t sr;
    assert(inst->spi_sem);
   14f7c:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548
   14f80:	b158      	cbz	r0, 14f9a <hal_dw1000_wakeup+0x22>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   14f82:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14f86:	f7f4 ffb3 	bl	9ef0 <os_sem_pend>
    rc = dpl_sem_pend(inst->spi_sem, DPL_TIMEOUT_NEVER);
    if (rc != DPL_OK) {
   14f8a:	b160      	cbz	r0, 14fa6 <hal_dw1000_wakeup+0x2e>
        inst->uwb_dev.status.sem_error = 1;
   14f8c:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   14f90:	f043 0304 	orr.w	r3, r3, #4
   14f94:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b

    rc = dpl_sem_release(inst->spi_sem);
    assert(rc == DPL_OK);
early_exit:
    return rc;
}
   14f98:	bd38      	pop	{r3, r4, r5, pc}
    assert(inst->spi_sem);
   14f9a:	2300      	movs	r3, #0
   14f9c:	461a      	mov	r2, r3
   14f9e:	4619      	mov	r1, r3
   14fa0:	4618      	mov	r0, r3
   14fa2:	f7f4 f853 	bl	904c <__assert_func>
    return os_arch_save_sr();
   14fa6:	f7f5 fa69 	bl	a47c <os_arch_save_sr>
   14faa:	4605      	mov	r5, r0
    hal_spi_disable(inst->spi_num);
   14fac:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   14fb0:	f003 f9aa 	bl	18308 <hal_spi_disable>
    hal_gpio_write(inst->ss_pin, 0);
   14fb4:	2100      	movs	r1, #0
   14fb6:	f894 055e 	ldrb.w	r0, [r4, #1374]	; 0x55e
   14fba:	f7f3 ff93 	bl	8ee4 <hal_gpio_write>
    dpl_cputime_delay_usecs(2000);
   14fbe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   14fc2:	f7f9 f9c6 	bl	e352 <dpl_cputime_delay_usecs>
    hal_gpio_write(inst->ss_pin, 1);
   14fc6:	2101      	movs	r1, #1
   14fc8:	f894 055e 	ldrb.w	r0, [r4, #1374]	; 0x55e
   14fcc:	f7f3 ff8a 	bl	8ee4 <hal_gpio_write>
    hal_spi_enable(inst->spi_num);
   14fd0:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   14fd4:	f003 f972 	bl	182bc <hal_spi_enable>
    dpl_cputime_delay_usecs(5000);
   14fd8:	f241 3088 	movw	r0, #5000	; 0x1388
   14fdc:	f7f9 f9b9 	bl	e352 <dpl_cputime_delay_usecs>
    os_arch_restore_sr(ctx);
   14fe0:	4628      	mov	r0, r5
   14fe2:	f7f5 fa51 	bl	a488 <os_arch_restore_sr>
    return (dpl_error_t)os_sem_release(&sem->sem);
   14fe6:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
   14fea:	f7f4 ff4f 	bl	9e8c <os_sem_release>
    assert(rc == DPL_OK);
   14fee:	2800      	cmp	r0, #0
   14ff0:	d0d2      	beq.n	14f98 <hal_dw1000_wakeup+0x20>
   14ff2:	2300      	movs	r3, #0
   14ff4:	461a      	mov	r2, r3
   14ff6:	4619      	mov	r1, r3
   14ff8:	4618      	mov	r0, r3
   14ffa:	f7f4 f827 	bl	904c <__assert_func>

00014ffe <calc_rx_window_timeout>:
}

static uint16_t
calc_rx_window_timeout(uint64_t rx_start, uint64_t rx_end)
{
    uint32_t timeout = ((rx_end - rx_start) & UWB_DTU_40BMASK) >> 16;
   14ffe:	1a12      	subs	r2, r2, r0
   15000:	eb63 0301 	sbc.w	r3, r3, r1
   15004:	0c12      	lsrs	r2, r2, #16
   15006:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   1500a:	f022 407f 	bic.w	r0, r2, #4278190080	; 0xff000000
    /* If more than 8.4s away (more than 1/2 period)- the end has likely
     * already passed so set a short timeout as to trigger a timeout */
    if (timeout > 0x7fffff) {
   1500e:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   15012:	d105      	bne.n	15020 <calc_rx_window_timeout+0x22>
        timeout = 1;
    }
    /* DW1000 can't have a rx-timeout greater than 0xffff */
    if (timeout > 0xffff) {
   15014:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   15018:	d303      	bcc.n	15022 <calc_rx_window_timeout+0x24>
        timeout = 0xffff;
   1501a:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1501e:	e000      	b.n	15022 <calc_rx_window_timeout+0x24>
        timeout = 1;
   15020:	2001      	movs	r0, #1
    }
    return timeout;
}
   15022:	b280      	uxth	r0, r0
   15024:	4770      	bx	lr

00015026 <dw1000_checkoverrun>:
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return uint8_t 1 = overrun error has occured, 0 otherwise
 */
static uint8_t
dw1000_checkoverrun(dw1000_dev_instance_t * inst)
{
   15026:	b508      	push	{r3, lr}
    uint8_t ov = dw1000_read_reg(inst, SYS_STATUS_ID, 2, sizeof(uint8_t)) & (SYS_STATUS_RXOVRR >> 16);
   15028:	2301      	movs	r3, #1
   1502a:	2202      	movs	r2, #2
   1502c:	210f      	movs	r1, #15
   1502e:	f7fe fff5 	bl	1401c <dw1000_read_reg>
    return (ov!=0);
}
   15032:	f3c0 1000 	ubfx	r0, r0, #4, #1
   15036:	bd08      	pop	{r3, pc}

00015038 <dw1000_irq>:
{
   15038:	b510      	push	{r4, lr}
   1503a:	4604      	mov	r4, r0
    inst->uwb_dev.irq_at_ticks = dpl_cputime_get32();
   1503c:	f7f9 f979 	bl	e332 <dpl_cputime_get32>
   15040:	6320      	str	r0, [r4, #48]	; 0x30
    if (!inst->uwb_dev.status.sleeping) {
   15042:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   15046:	f013 0f01 	tst.w	r3, #1
   1504a:	d000      	beq.n	1504e <dw1000_irq+0x16>
}
   1504c:	bd10      	pop	{r4, pc}
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
   1504e:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   15052:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   15056:	f7f4 fb2d 	bl	96b4 <os_eventq_put>
   1505a:	e7f7      	b.n	1504c <dw1000_irq+0x14>

0001505c <dw1000_read_rx>:
{
   1505c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15060:	b082      	sub	sp, #8
   15062:	4604      	mov	r4, r0
   15064:	460f      	mov	r7, r1
   15066:	4616      	mov	r6, r2
   15068:	461d      	mov	r5, r3
    MAC_STATS_INCN(rx_bytes, rxFrameLength);
   1506a:	f8d0 05cc 	ldr.w	r0, [r0, #1484]	; 0x5cc
   1506e:	4418      	add	r0, r3
   15070:	f8c4 05cc 	str.w	r0, [r4, #1484]	; 0x5cc
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   15074:	f504 68ad 	add.w	r8, r4, #1384	; 0x568
   15078:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1507c:	4640      	mov	r0, r8
   1507e:	f7f5 fd57 	bl	ab30 <os_mutex_pend>
    if (err != DPL_OK) {
   15082:	b150      	cbz	r0, 1509a <dw1000_read_rx+0x3e>
        inst->uwb_dev.status.mtx_error = 1;
   15084:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   15088:	f043 0308 	orr.w	r3, r3, #8
   1508c:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   15090:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   15094:	b002      	add	sp, #8
   15096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dw1000_read(inst, RX_BUFFER_ID, rxBufferOffset, rxFrameBytes, rxFrameLength);
   1509a:	9500      	str	r5, [sp, #0]
   1509c:	463b      	mov	r3, r7
   1509e:	4632      	mov	r2, r6
   150a0:	2111      	movs	r1, #17
   150a2:	4620      	mov	r0, r4
   150a4:	f7fe fef0 	bl	13e88 <dw1000_read>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   150a8:	4640      	mov	r0, r8
   150aa:	f7f5 fce5 	bl	aa78 <os_mutex_release>
    assert(err == DPL_OK);
   150ae:	2800      	cmp	r0, #0
   150b0:	d0ee      	beq.n	15090 <dw1000_read_rx+0x34>
   150b2:	2300      	movs	r3, #0
   150b4:	461a      	mov	r2, r3
   150b6:	4619      	mov	r1, r3
   150b8:	4618      	mov	r0, r3
   150ba:	f7f3 ffc7 	bl	904c <__assert_func>

000150be <dw1000_write_tx>:
{
   150be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   150c2:	b082      	sub	sp, #8
   150c4:	4604      	mov	r4, r0
   150c6:	460f      	mov	r7, r1
   150c8:	4616      	mov	r6, r2
   150ca:	461d      	mov	r5, r3
    MAC_STATS_INCN(tx_bytes, txFrameLength);
   150cc:	f8d0 25c8 	ldr.w	r2, [r0, #1480]	; 0x5c8
   150d0:	441a      	add	r2, r3
   150d2:	f8c0 25c8 	str.w	r2, [r0, #1480]	; 0x5c8
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   150d6:	f500 68ad 	add.w	r8, r0, #1384	; 0x568
   150da:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   150de:	4640      	mov	r0, r8
   150e0:	f7f5 fd26 	bl	ab30 <os_mutex_pend>
    if (err != DPL_OK) {
   150e4:	b990      	cbnz	r0, 1510c <dw1000_write_tx+0x4e>
    if ((txBufferOffset + txFrameLength) <= 1024){
   150e6:	1973      	adds	r3, r6, r5
   150e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   150ec:	dd15      	ble.n	1511a <dw1000_write_tx+0x5c>
        inst->uwb_dev.status.tx_frame_error = 1;
   150ee:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   150f2:	f043 0310 	orr.w	r3, r3, #16
   150f6:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
    return (dpl_error_t)os_mutex_release(&mu->mu);
   150fa:	4640      	mov	r0, r8
   150fc:	f7f5 fcbc 	bl	aa78 <os_mutex_release>
    assert(err == DPL_OK);
   15100:	bb20      	cbnz	r0, 1514c <dw1000_write_tx+0x8e>
}
   15102:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   15106:	b002      	add	sp, #8
   15108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        inst->uwb_dev.status.mtx_error = 1;
   1510c:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   15110:	f043 0308 	orr.w	r3, r3, #8
   15114:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
        goto mtx_error;
   15118:	e7f3      	b.n	15102 <dw1000_write_tx+0x44>
        dw1000_write(inst, TX_BUFFER_ID, txBufferOffset,  txFrameBytes, txFrameLength);
   1511a:	9500      	str	r5, [sp, #0]
   1511c:	463b      	mov	r3, r7
   1511e:	4632      	mov	r2, r6
   15120:	2109      	movs	r1, #9
   15122:	4620      	mov	r0, r4
   15124:	f7fe ff14 	bl	13f50 <dw1000_write>
        if (txBufferOffset == 0) {
   15128:	b176      	cbz	r6, 15148 <dw1000_write_tx+0x8a>
        inst->uwb_dev.status.tx_frame_error = 0;
   1512a:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   1512e:	f36f 1304 	bfc	r3, #4, #1
   15132:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
   15136:	e7e0      	b.n	150fa <dw1000_write_tx+0x3c>
                inst->uwb_dev.fctrl_array[i] =  txFrameBytes[i];
   15138:	5cf9      	ldrb	r1, [r7, r3]
   1513a:	18e2      	adds	r2, r4, r3
   1513c:	f882 14e0 	strb.w	r1, [r2, #1248]	; 0x4e0
            for (i = 0; i< sizeof(inst->uwb_dev.fctrl); i++)
   15140:	3301      	adds	r3, #1
   15142:	2b01      	cmp	r3, #1
   15144:	d9f8      	bls.n	15138 <dw1000_write_tx+0x7a>
   15146:	e7f0      	b.n	1512a <dw1000_write_tx+0x6c>
   15148:	2300      	movs	r3, #0
   1514a:	e7fa      	b.n	15142 <dw1000_write_tx+0x84>
    assert(err == DPL_OK);
   1514c:	2300      	movs	r3, #0
   1514e:	461a      	mov	r2, r3
   15150:	4619      	mov	r1, r3
   15152:	4618      	mov	r0, r3
   15154:	f7f3 ff7a 	bl	904c <__assert_func>

00015158 <dw1000_write_tx_fctrl>:
{
   15158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1515c:	b084      	sub	sp, #16
   1515e:	4605      	mov	r5, r0
   15160:	460c      	mov	r4, r1
   15162:	4690      	mov	r8, r2
   15164:	461e      	mov	r6, r3
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   15166:	f500 67ad 	add.w	r7, r0, #1384	; 0x568
   1516a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1516e:	4638      	mov	r0, r7
   15170:	f7f5 fcde 	bl	ab30 <os_mutex_pend>
    if (err != DPL_OK) {
   15174:	bb08      	cbnz	r0, 151ba <dw1000_write_tx_fctrl+0x62>
    if (ext) {
   15176:	b33e      	cbz	r6, 151c8 <dw1000_write_tx_fctrl+0x70>
        tx_fctrl_reg = (((uint32_t)(ext->preambleLength | config->prf)) << TX_FCTRL_TXPRF_SHFT) |
   15178:	7873      	ldrb	r3, [r6, #1]
   1517a:	f895 250e 	ldrb.w	r2, [r5, #1294]	; 0x50e
   1517e:	431a      	orrs	r2, r3
            (((uint32_t)ext->dataRate) << TX_FCTRL_TXBR_SHFT) |
   15180:	7833      	ldrb	r3, [r6, #0]
   15182:	035b      	lsls	r3, r3, #13
        tx_fctrl_reg = (((uint32_t)(ext->preambleLength | config->prf)) << TX_FCTRL_TXPRF_SHFT) |
   15184:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            (((uint32_t)ext->ranging_en_bit) << TX_FCTRL_TR_SHFT);
   15188:	78b2      	ldrb	r2, [r6, #2]
        tx_fctrl_reg = (((uint32_t)(ext->preambleLength | config->prf)) << TX_FCTRL_TXPRF_SHFT) |
   1518a:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
    tx_fctrl_reg |= ((txFrameLength + 2) & TX_FCTRL_FLE_MASK)  |
   1518e:	3402      	adds	r4, #2
   15190:	f3c4 0409 	ubfx	r4, r4, #0, #10
   15194:	ea44 5488 	orr.w	r4, r4, r8, lsl #22
   15198:	431c      	orrs	r4, r3
    dw1000_write_reg(inst, TX_FCTRL_ID, 0, tx_fctrl_reg, sizeof(uint32_t));
   1519a:	2304      	movs	r3, #4
   1519c:	9302      	str	r3, [sp, #8]
   1519e:	2200      	movs	r2, #0
   151a0:	9400      	str	r4, [sp, #0]
   151a2:	9201      	str	r2, [sp, #4]
   151a4:	2108      	movs	r1, #8
   151a6:	4628      	mov	r0, r5
   151a8:	f7fe ffa8 	bl	140fc <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   151ac:	4638      	mov	r0, r7
   151ae:	f7f5 fc63 	bl	aa78 <os_mutex_release>
    assert(err == DPL_OK);
   151b2:	b960      	cbnz	r0, 151ce <dw1000_write_tx_fctrl+0x76>
}
   151b4:	b004      	add	sp, #16
   151b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        inst->uwb_dev.status.mtx_error = 1;
   151ba:	f895 350b 	ldrb.w	r3, [r5, #1291]	; 0x50b
   151be:	f043 0308 	orr.w	r3, r3, #8
   151c2:	f885 350b 	strb.w	r3, [r5, #1291]	; 0x50b
        goto mtx_error;
   151c6:	e7f5      	b.n	151b4 <dw1000_write_tx_fctrl+0x5c>
        tx_fctrl_reg = inst->tx_fctrl;
   151c8:	f8d5 3588 	ldr.w	r3, [r5, #1416]	; 0x588
   151cc:	e7df      	b.n	1518e <dw1000_write_tx_fctrl+0x36>
    assert(err == DPL_OK);
   151ce:	2300      	movs	r3, #0
   151d0:	461a      	mov	r2, r3
   151d2:	4619      	mov	r1, r3
   151d4:	4618      	mov	r0, r3
   151d6:	f7f3 ff39 	bl	904c <__assert_func>

000151da <dw1000_start_tx>:
{
   151da:	b570      	push	{r4, r5, r6, lr}
   151dc:	b084      	sub	sp, #16
   151de:	4604      	mov	r4, r0
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   151e0:	f500 66ac 	add.w	r6, r0, #1376	; 0x560
   151e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   151e8:	4630      	mov	r0, r6
   151ea:	f7f4 fe81 	bl	9ef0 <os_sem_pend>
    if (err != DPL_OK) {
   151ee:	2800      	cmp	r0, #0
   151f0:	d144      	bne.n	1527c <dw1000_start_tx+0xa2>
    control = inst->control;
   151f2:	f8d4 55b0 	ldr.w	r5, [r4, #1456]	; 0x5b0
    if (config->trxoff_enable){ // force return to idle state
   151f6:	f894 352c 	ldrb.w	r3, [r4, #1324]	; 0x52c
   151fa:	f013 0f20 	tst.w	r3, #32
   151fe:	d144      	bne.n	1528a <dw1000_start_tx+0xb0>
    if (control.wait4resp_enabled){
   15200:	b2eb      	uxtb	r3, r5
   15202:	f015 0f01 	tst.w	r5, #1
   15206:	d14c      	bne.n	152a2 <dw1000_start_tx+0xc8>
    sys_ctrl_reg = SYS_CTRL_TXSTRT;
   15208:	2202      	movs	r2, #2
    if (control.delay_start_enabled)
   1520a:	f013 0504 	ands.w	r5, r3, #4
   1520e:	d001      	beq.n	15214 <dw1000_start_tx+0x3a>
        sys_ctrl_reg |= SYS_CTRL_TXDLYS;
   15210:	f042 0204 	orr.w	r2, r2, #4
    dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) sys_ctrl_reg, sizeof(uint8_t));
   15214:	b2d3      	uxtb	r3, r2
   15216:	2201      	movs	r2, #1
   15218:	9202      	str	r2, [sp, #8]
   1521a:	2200      	movs	r2, #0
   1521c:	9300      	str	r3, [sp, #0]
   1521e:	9201      	str	r2, [sp, #4]
   15220:	210d      	movs	r1, #13
   15222:	4620      	mov	r0, r4
   15224:	f7fe ff6a 	bl	140fc <dw1000_write_reg>
    if (control.delay_start_enabled){
   15228:	2d00      	cmp	r5, #0
   1522a:	d13c      	bne.n	152a6 <dw1000_start_tx+0xcc>
        inst->uwb_dev.status.start_tx_error = 0;
   1522c:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   15230:	f36f 0382 	bfc	r3, #2, #1
   15234:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
    if(inst->control.sleep_after_tx) {
   15238:	f994 35b0 	ldrsb.w	r3, [r4, #1456]	; 0x5b0
   1523c:	2b00      	cmp	r3, #0
   1523e:	db5d      	blt.n	152fc <dw1000_start_tx+0x122>
    inst->control.wait4resp_enabled = false;
   15240:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
   15244:	f36f 0300 	bfc	r3, #0, #1
   15248:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    inst->control.wait4resp_delay_enabled = false;
   1524c:	b2db      	uxtb	r3, r3
   1524e:	f36f 0341 	bfc	r3, #1, #1
   15252:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    inst->control.delay_start_enabled = false;
   15256:	b2db      	uxtb	r3, r3
   15258:	f36f 0382 	bfc	r3, #2, #1
   1525c:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    inst->control.autoack_delay_enabled = false;
   15260:	b2db      	uxtb	r3, r3
   15262:	f36f 03c3 	bfc	r3, #3, #1
   15266:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    inst->control.on_error_continue_enabled = false;
   1526a:	b2db      	uxtb	r3, r3
   1526c:	f36f 1386 	bfc	r3, #6, #1
   15270:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
}
   15274:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   15278:	b004      	add	sp, #16
   1527a:	bd70      	pop	{r4, r5, r6, pc}
        inst->uwb_dev.status.sem_error = 1;
   1527c:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   15280:	f043 0304 	orr.w	r3, r3, #4
   15284:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
        goto sem_error;
   15288:	e7f4      	b.n	15274 <dw1000_start_tx+0x9a>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) SYS_CTRL_TRXOFF, sizeof(uint8_t));
   1528a:	2301      	movs	r3, #1
   1528c:	9302      	str	r3, [sp, #8]
   1528e:	2240      	movs	r2, #64	; 0x40
   15290:	2300      	movs	r3, #0
   15292:	e9cd 2300 	strd	r2, r3, [sp]
   15296:	2200      	movs	r2, #0
   15298:	210d      	movs	r1, #13
   1529a:	4620      	mov	r0, r4
   1529c:	f7fe ff2e 	bl	140fc <dw1000_write_reg>
   152a0:	e7ae      	b.n	15200 <dw1000_start_tx+0x26>
        sys_ctrl_reg |= SYS_CTRL_WAIT4RESP;
   152a2:	2282      	movs	r2, #130	; 0x82
   152a4:	e7b1      	b.n	1520a <dw1000_start_tx+0x30>
        sys_status_reg = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint16_t)); // Read at offset 3 to get the upper 2 bytes out of 5
   152a6:	2302      	movs	r3, #2
   152a8:	2203      	movs	r2, #3
   152aa:	210f      	movs	r1, #15
   152ac:	4620      	mov	r0, r4
   152ae:	f7fe feb5 	bl	1401c <dw1000_read_reg>
        inst->uwb_dev.status.start_tx_error = (sys_status_reg & ((SYS_STATUS_HPDWARN | SYS_STATUS_TXPUTE) >> 24)) != 0;
   152b2:	f410 6f81 	tst.w	r0, #1032	; 0x408
   152b6:	bf14      	ite	ne
   152b8:	2201      	movne	r2, #1
   152ba:	2200      	moveq	r2, #0
   152bc:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   152c0:	f362 0382 	bfi	r3, r2, #2, #1
   152c4:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
        if (inst->uwb_dev.status.start_tx_error){
   152c8:	b2db      	uxtb	r3, r3
   152ca:	f013 0f04 	tst.w	r3, #4
   152ce:	d0b3      	beq.n	15238 <dw1000_start_tx+0x5e>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) SYS_CTRL_TRXOFF, sizeof(uint8_t));
   152d0:	2301      	movs	r3, #1
   152d2:	9302      	str	r3, [sp, #8]
   152d4:	2240      	movs	r2, #64	; 0x40
   152d6:	2300      	movs	r3, #0
   152d8:	e9cd 2300 	strd	r2, r3, [sp]
   152dc:	2200      	movs	r2, #0
   152de:	210d      	movs	r1, #13
   152e0:	4620      	mov	r0, r4
   152e2:	f7fe ff0b 	bl	140fc <dw1000_write_reg>
    return (dpl_error_t)os_sem_release(&sem->sem);
   152e6:	4630      	mov	r0, r6
   152e8:	f7f4 fdd0 	bl	9e8c <os_sem_release>
            assert(err == DPL_OK);
   152ec:	2800      	cmp	r0, #0
   152ee:	d0a3      	beq.n	15238 <dw1000_start_tx+0x5e>
   152f0:	2300      	movs	r3, #0
   152f2:	461a      	mov	r2, r3
   152f4:	4619      	mov	r1, r3
   152f6:	4618      	mov	r0, r3
   152f8:	f7f3 fea8 	bl	904c <__assert_func>
        inst->uwb_dev.status.sleeping = 1;
   152fc:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   15300:	f043 0301 	orr.w	r3, r3, #1
   15304:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
   15308:	4630      	mov	r0, r6
   1530a:	f7f4 fdbf 	bl	9e8c <os_sem_release>
   1530e:	e797      	b.n	15240 <dw1000_start_tx+0x66>

00015310 <dw1000_tx_wait>:
{
   15310:	b510      	push	{r4, lr}
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   15312:	f500 64ac 	add.w	r4, r0, #1376	; 0x560
   15316:	4620      	mov	r0, r4
   15318:	f7f4 fdea 	bl	9ef0 <os_sem_pend>
    if (rc == DPL_OK) {
   1531c:	b100      	cbz	r0, 15320 <dw1000_tx_wait+0x10>
}
   1531e:	bd10      	pop	{r4, pc}
    return (dpl_error_t)os_sem_release(&sem->sem);
   15320:	4620      	mov	r0, r4
   15322:	f7f4 fdb3 	bl	9e8c <os_sem_release>
    return rc;
   15326:	e7fa      	b.n	1531e <dw1000_tx_wait+0xe>

00015328 <dw1000_set_delay_start>:
{
   15328:	b5f0      	push	{r4, r5, r6, r7, lr}
   1532a:	b085      	sub	sp, #20
   1532c:	4604      	mov	r4, r0
   1532e:	4616      	mov	r6, r2
   15330:	461d      	mov	r5, r3
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   15332:	f500 67ad 	add.w	r7, r0, #1384	; 0x568
   15336:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1533a:	4638      	mov	r0, r7
   1533c:	f7f5 fbf8 	bl	ab30 <os_mutex_pend>
    if (err != DPL_OK) {
   15340:	b148      	cbz	r0, 15356 <dw1000_set_delay_start+0x2e>
        inst->uwb_dev.status.mtx_error = 1;
   15342:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   15346:	f043 0308 	orr.w	r3, r3, #8
   1534a:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   1534e:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   15352:	b005      	add	sp, #20
   15354:	bdf0      	pop	{r4, r5, r6, r7, pc}
    inst->control.delay_start_enabled = true;
   15356:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
   1535a:	f043 0304 	orr.w	r3, r3, #4
   1535e:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    dw1000_write_reg(inst, DX_TIME_ID, 1, dx_time >> 8, DX_TIME_LEN-1);
   15362:	2304      	movs	r3, #4
   15364:	9302      	str	r3, [sp, #8]
   15366:	0a36      	lsrs	r6, r6, #8
   15368:	ea46 6605 	orr.w	r6, r6, r5, lsl #24
   1536c:	0a2d      	lsrs	r5, r5, #8
   1536e:	9600      	str	r6, [sp, #0]
   15370:	9501      	str	r5, [sp, #4]
   15372:	2201      	movs	r2, #1
   15374:	210a      	movs	r1, #10
   15376:	4620      	mov	r0, r4
   15378:	f7fe fec0 	bl	140fc <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   1537c:	4638      	mov	r0, r7
   1537e:	f7f5 fb7b 	bl	aa78 <os_mutex_release>
    assert(err == DPL_OK);
   15382:	2800      	cmp	r0, #0
   15384:	d0e3      	beq.n	1534e <dw1000_set_delay_start+0x26>
   15386:	2300      	movs	r3, #0
   15388:	461a      	mov	r2, r3
   1538a:	4619      	mov	r1, r3
   1538c:	4618      	mov	r0, r3
   1538e:	f7f3 fe5d 	bl	904c <__assert_func>

00015392 <dw1000_start_rx>:
{
   15392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15396:	b084      	sub	sp, #16
   15398:	4604      	mov	r4, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   1539a:	f500 67ad 	add.w	r7, r0, #1384	; 0x568
   1539e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   153a2:	4638      	mov	r0, r7
   153a4:	f7f5 fbc4 	bl	ab30 <os_mutex_pend>
    if (err != DPL_OK) {
   153a8:	2800      	cmp	r0, #0
   153aa:	d157      	bne.n	1545c <dw1000_start_rx+0xca>
    control = inst->control;
   153ac:	f8d4 55b0 	ldr.w	r5, [r4, #1456]	; 0x5b0
    inst->uwb_dev.status.rx_restarted = 0;
   153b0:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   153b4:	f36f 03c3 	bfc	r3, #3, #1
   153b8:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
    if (config->trxoff_enable){ // force return to idle state, if in RX state
   153bc:	f894 352c 	ldrb.w	r3, [r4, #1324]	; 0x52c
   153c0:	f013 0f20 	tst.w	r3, #32
   153c4:	d151      	bne.n	1546a <dw1000_start_rx+0xd8>
    if (config->dblbuffon_enabled) {
   153c6:	f894 352c 	ldrb.w	r3, [r4, #1324]	; 0x52c
   153ca:	f013 0f10 	tst.w	r3, #16
   153ce:	d161      	bne.n	15494 <dw1000_start_rx+0x102>
    if (control.delay_start_enabled)
   153d0:	fa5f f885 	uxtb.w	r8, r5
   153d4:	f015 0504 	ands.w	r5, r5, #4
   153d8:	d17a      	bne.n	154d0 <dw1000_start_rx+0x13e>
    sys_ctrl = SYS_CTRL_RXENAB;
   153da:	f44f 7680 	mov.w	r6, #256	; 0x100
    if (control.wait4resp_enabled) {
   153de:	f018 0f01 	tst.w	r8, #1
   153e2:	d001      	beq.n	153e8 <dw1000_start_rx+0x56>
        sys_ctrl |= SYS_CTRL_WAIT4RESP;
   153e4:	f046 0680 	orr.w	r6, r6, #128	; 0x80
    dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, sys_ctrl, sizeof(uint16_t));
   153e8:	2302      	movs	r3, #2
   153ea:	9302      	str	r3, [sp, #8]
   153ec:	2200      	movs	r2, #0
   153ee:	9600      	str	r6, [sp, #0]
   153f0:	9201      	str	r2, [sp, #4]
   153f2:	210d      	movs	r1, #13
   153f4:	4620      	mov	r0, r4
   153f6:	f7fe fe81 	bl	140fc <dw1000_write_reg>
    if (control.delay_start_enabled){   // check for errors
   153fa:	2d00      	cmp	r5, #0
   153fc:	d16b      	bne.n	154d6 <dw1000_start_rx+0x144>
        inst->uwb_dev.status.start_rx_error = 0;
   153fe:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   15402:	f36f 03c3 	bfc	r3, #3, #1
   15406:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
    inst->control.wait4resp_enabled = false;
   1540a:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
   1540e:	f36f 0300 	bfc	r3, #0, #1
   15412:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    inst->control.wait4resp_delay_enabled = false;
   15416:	b2db      	uxtb	r3, r3
   15418:	f36f 0341 	bfc	r3, #1, #1
   1541c:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    inst->control.delay_start_enabled = false;
   15420:	b2db      	uxtb	r3, r3
   15422:	f36f 0382 	bfc	r3, #2, #1
   15426:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    inst->control.autoack_delay_enabled = false;
   1542a:	b2db      	uxtb	r3, r3
   1542c:	f36f 03c3 	bfc	r3, #3, #1
   15430:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    inst->control.start_rx_syncbuf_enabled = false;
   15434:	b2db      	uxtb	r3, r3
   15436:	f36f 1304 	bfc	r3, #4, #1
   1543a:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    inst->control.on_error_continue_enabled = false;
   1543e:	b2db      	uxtb	r3, r3
   15440:	f36f 1386 	bfc	r3, #6, #1
   15444:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    return (dpl_error_t)os_mutex_release(&mu->mu);
   15448:	4638      	mov	r0, r7
   1544a:	f7f5 fb15 	bl	aa78 <os_mutex_release>
    assert(err == DPL_OK);
   1544e:	2800      	cmp	r0, #0
   15450:	d16f      	bne.n	15532 <dw1000_start_rx+0x1a0>
}
   15452:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   15456:	b004      	add	sp, #16
   15458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        inst->uwb_dev.status.mtx_error = 1;
   1545c:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   15460:	f043 0308 	orr.w	r3, r3, #8
   15464:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
        goto mtx_error;
   15468:	e7f3      	b.n	15452 <dw1000_start_rx+0xc0>
        uint8_t state = (uint8_t) dw1000_read_reg(inst, SYS_STATE_ID, PMSC_STATE_OFFSET, sizeof(uint8_t));
   1546a:	2301      	movs	r3, #1
   1546c:	2202      	movs	r2, #2
   1546e:	2119      	movs	r1, #25
   15470:	4620      	mov	r0, r4
   15472:	f7fe fdd3 	bl	1401c <dw1000_read_reg>
   15476:	b2c0      	uxtb	r0, r0
        if(state != PMSC_STATE_IDLE){
   15478:	2801      	cmp	r0, #1
   1547a:	d0a4      	beq.n	153c6 <dw1000_start_rx+0x34>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) SYS_CTRL_TRXOFF, sizeof(uint8_t));
   1547c:	2301      	movs	r3, #1
   1547e:	9302      	str	r3, [sp, #8]
   15480:	2240      	movs	r2, #64	; 0x40
   15482:	2300      	movs	r3, #0
   15484:	e9cd 2300 	strd	r2, r3, [sp]
   15488:	2200      	movs	r2, #0
   1548a:	210d      	movs	r1, #13
   1548c:	4620      	mov	r0, r4
   1548e:	f7fe fe35 	bl	140fc <dw1000_write_reg>
   15492:	e798      	b.n	153c6 <dw1000_start_rx+0x34>
    inst->control.start_rx_syncbuf_enabled = 1;
   15494:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
   15498:	f043 0310 	orr.w	r3, r3, #16
   1549c:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    buff = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t)); // Read 1 byte at offset 3 to get the 4th byte out of 5
   154a0:	2301      	movs	r3, #1
   154a2:	2203      	movs	r2, #3
   154a4:	210f      	movs	r1, #15
   154a6:	4620      	mov	r0, r4
   154a8:	f7fe fdb8 	bl	1401c <dw1000_read_reg>
   154ac:	b2c0      	uxtb	r0, r0
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=         // IC side Receive Buffer Pointer
   154ae:	ea80 0040 	eor.w	r0, r0, r0, lsl #1
   154b2:	f010 0f80 	tst.w	r0, #128	; 0x80
   154b6:	d08b      	beq.n	153d0 <dw1000_start_rx+0x3e>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 0x01, sizeof(uint8_t)); // We need to swap RX buffer status reg (write one to toggle internally)
   154b8:	2301      	movs	r3, #1
   154ba:	9302      	str	r3, [sp, #8]
   154bc:	2201      	movs	r2, #1
   154be:	2300      	movs	r3, #0
   154c0:	e9cd 2300 	strd	r2, r3, [sp]
   154c4:	2203      	movs	r2, #3
   154c6:	210d      	movs	r1, #13
   154c8:	4620      	mov	r0, r4
   154ca:	f7fe fe17 	bl	140fc <dw1000_write_reg>
    return inst->uwb_dev.status;
   154ce:	e77f      	b.n	153d0 <dw1000_start_rx+0x3e>
        sys_ctrl |= SYS_CTRL_RXDLYE;
   154d0:	f44f 7640 	mov.w	r6, #768	; 0x300
   154d4:	e783      	b.n	153de <dw1000_start_rx+0x4c>
        sys_status = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t));  // Read 1 byte at offset 3 to get the 4th byte out of 5
   154d6:	2301      	movs	r3, #1
   154d8:	2203      	movs	r2, #3
   154da:	210f      	movs	r1, #15
   154dc:	4620      	mov	r0, r4
   154de:	f7fe fd9d 	bl	1401c <dw1000_read_reg>
        inst->uwb_dev.status.start_rx_error = (sys_status & (SYS_STATUS_HPDWARN >> 24)) != 0;
   154e2:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   154e6:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   154ea:	f360 03c3 	bfi	r3, r0, #3, #1
   154ee:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
        if (inst->uwb_dev.status.start_rx_error){   // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
   154f2:	b2db      	uxtb	r3, r3
   154f4:	f013 0f08 	tst.w	r3, #8
   154f8:	d087      	beq.n	1540a <dw1000_start_rx+0x78>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) SYS_CTRL_TRXOFF, sizeof(uint8_t)); // return to idle state
   154fa:	2301      	movs	r3, #1
   154fc:	9302      	str	r3, [sp, #8]
   154fe:	2240      	movs	r2, #64	; 0x40
   15500:	2300      	movs	r3, #0
   15502:	e9cd 2300 	strd	r2, r3, [sp]
   15506:	2200      	movs	r2, #0
   15508:	210d      	movs	r1, #13
   1550a:	4620      	mov	r0, r4
   1550c:	f7fe fdf6 	bl	140fc <dw1000_write_reg>
            if (control.on_error_continue_enabled){
   15510:	f018 0f40 	tst.w	r8, #64	; 0x40
   15514:	f43f af79 	beq.w	1540a <dw1000_start_rx+0x78>
                sys_ctrl &= ~SYS_CTRL_RXDLYE;
   15518:	f426 7600 	bic.w	r6, r6, #512	; 0x200
   1551c:	b2b6      	uxth	r6, r6
                dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, sys_ctrl, sizeof(uint16_t)); // turn on receiver
   1551e:	2302      	movs	r3, #2
   15520:	9302      	str	r3, [sp, #8]
   15522:	2200      	movs	r2, #0
   15524:	9600      	str	r6, [sp, #0]
   15526:	9201      	str	r2, [sp, #4]
   15528:	210d      	movs	r1, #13
   1552a:	4620      	mov	r0, r4
   1552c:	f7fe fde6 	bl	140fc <dw1000_write_reg>
   15530:	e76b      	b.n	1540a <dw1000_start_rx+0x78>
    assert(err == DPL_OK);
   15532:	2300      	movs	r3, #0
   15534:	461a      	mov	r2, r3
   15536:	4619      	mov	r1, r3
   15538:	4618      	mov	r0, r3
   1553a:	f7f3 fd87 	bl	904c <__assert_func>
	...

00015540 <dw1000_stop_rx>:
{
   15540:	b5f0      	push	{r4, r5, r6, r7, lr}
   15542:	b085      	sub	sp, #20
   15544:	4604      	mov	r4, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   15546:	f500 65ad 	add.w	r5, r0, #1384	; 0x568
   1554a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1554e:	4628      	mov	r0, r5
   15550:	f7f5 faee 	bl	ab30 <os_mutex_pend>
    if (err != DPL_OK) {
   15554:	b148      	cbz	r0, 1556a <dw1000_stop_rx+0x2a>
        inst->uwb_dev.status.mtx_error = 1;
   15556:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1555a:	f043 0308 	orr.w	r3, r3, #8
   1555e:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   15562:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   15566:	b005      	add	sp, #20
   15568:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mask = dw1000_read_reg(inst, SYS_MASK_ID, 0 , sizeof(uint32_t)) ; // Read set interrupt mask
   1556a:	2304      	movs	r3, #4
   1556c:	2200      	movs	r2, #0
   1556e:	210e      	movs	r1, #14
   15570:	4620      	mov	r0, r4
   15572:	f7fe fd53 	bl	1401c <dw1000_read_reg>
   15576:	4606      	mov	r6, r0
    dw1000_write_reg(inst, SYS_MASK_ID, 0, 0, sizeof(uint32_t)) ; // Clear interrupt mask - so we don't get any unwanted events
   15578:	2704      	movs	r7, #4
   1557a:	9702      	str	r7, [sp, #8]
   1557c:	2200      	movs	r2, #0
   1557e:	2300      	movs	r3, #0
   15580:	e9cd 2300 	strd	r2, r3, [sp]
   15584:	210e      	movs	r1, #14
   15586:	4620      	mov	r0, r4
   15588:	f7fe fdb8 	bl	140fc <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) SYS_CTRL_TRXOFF, sizeof(uint8_t)); // return to idle state
   1558c:	2301      	movs	r3, #1
   1558e:	9302      	str	r3, [sp, #8]
   15590:	2240      	movs	r2, #64	; 0x40
   15592:	2300      	movs	r3, #0
   15594:	e9cd 2300 	strd	r2, r3, [sp]
   15598:	2200      	movs	r2, #0
   1559a:	210d      	movs	r1, #13
   1559c:	4620      	mov	r0, r4
   1559e:	f7fe fdad 	bl	140fc <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_STATUS_ID, 0, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD), sizeof(uint32_t));
   155a2:	9702      	str	r7, [sp, #8]
   155a4:	a30e      	add	r3, pc, #56	; (adr r3, 155e0 <dw1000_stop_rx+0xa0>)
   155a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   155aa:	e9cd 2300 	strd	r2, r3, [sp]
   155ae:	2200      	movs	r2, #0
   155b0:	210f      	movs	r1, #15
   155b2:	4620      	mov	r0, r4
   155b4:	f7fe fda2 	bl	140fc <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_MASK_ID, 0, mask, sizeof(uint32_t)); // Restore mask to what it was
   155b8:	9702      	str	r7, [sp, #8]
   155ba:	2200      	movs	r2, #0
   155bc:	9600      	str	r6, [sp, #0]
   155be:	9201      	str	r2, [sp, #4]
   155c0:	210e      	movs	r1, #14
   155c2:	4620      	mov	r0, r4
   155c4:	f7fe fd9a 	bl	140fc <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   155c8:	4628      	mov	r0, r5
   155ca:	f7f5 fa55 	bl	aa78 <os_mutex_release>
    assert(err == DPL_OK);
   155ce:	2800      	cmp	r0, #0
   155d0:	d0c7      	beq.n	15562 <dw1000_stop_rx+0x22>
   155d2:	2300      	movs	r3, #0
   155d4:	461a      	mov	r2, r3
   155d6:	4619      	mov	r1, r3
   155d8:	4618      	mov	r0, r3
   155da:	f7f3 fd37 	bl	904c <__assert_func>
   155de:	bf00      	nop
   155e0:	2433fbf8 	.word	0x2433fbf8
   155e4:	00000000 	.word	0x00000000

000155e8 <dw1000_set_wait4resp>:
    inst->uwb_dev.status.rx_restarted = 0;
   155e8:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
   155ec:	f36f 03c3 	bfc	r3, #3, #1
   155f0:	f880 350a 	strb.w	r3, [r0, #1290]	; 0x50a
    inst->control.wait4resp_enabled = enable;
   155f4:	f890 35b0 	ldrb.w	r3, [r0, #1456]	; 0x5b0
   155f8:	f361 0300 	bfi	r3, r1, #0, #1
   155fc:	f880 35b0 	strb.w	r3, [r0, #1456]	; 0x5b0
}
   15600:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
   15604:	4770      	bx	lr

00015606 <dw1000_set_on_error_continue>:
    inst->control.on_error_continue_enabled = enable;
   15606:	f890 35b0 	ldrb.w	r3, [r0, #1456]	; 0x5b0
   1560a:	f361 1386 	bfi	r3, r1, #6, #1
   1560e:	f880 35b0 	strb.w	r3, [r0, #1456]	; 0x5b0
}
   15612:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
   15616:	4770      	bx	lr

00015618 <dw1000_set_rxauto_disable>:
    inst->control.rxauto_disable = disable;
   15618:	f890 35b1 	ldrb.w	r3, [r0, #1457]	; 0x5b1
   1561c:	f361 0382 	bfi	r3, r1, #2, #1
   15620:	f880 35b1 	strb.w	r3, [r0, #1457]	; 0x5b1
}
   15624:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
   15628:	4770      	bx	lr

0001562a <dw1000_adj_rx_timeout>:
{
   1562a:	b510      	push	{r4, lr}
   1562c:	b084      	sub	sp, #16
   1562e:	4604      	mov	r4, r0
    dw1000_write_reg(inst, RX_FWTO_ID, RX_FWTO_OFFSET, timeout, sizeof(uint16_t));
   15630:	2302      	movs	r3, #2
   15632:	9302      	str	r3, [sp, #8]
   15634:	2200      	movs	r2, #0
   15636:	9100      	str	r1, [sp, #0]
   15638:	9201      	str	r2, [sp, #4]
   1563a:	210c      	movs	r1, #12
   1563c:	f7fe fd5e 	bl	140fc <dw1000_write_reg>
}
   15640:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   15644:	b004      	add	sp, #16
   15646:	bd10      	pop	{r4, pc}

00015648 <update_rx_window_timeout>:
{
   15648:	b538      	push	{r3, r4, r5, lr}
   1564a:	4605      	mov	r5, r0
   1564c:	4610      	mov	r0, r2
   1564e:	4619      	mov	r1, r3
    uint32_t timeout = calc_rx_window_timeout(rel_start, inst->uwb_dev.abs_timeout);
   15650:	f505 639c 	add.w	r3, r5, #1248	; 0x4e0
   15654:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   15658:	f7ff fcd1 	bl	14ffe <calc_rx_window_timeout>
   1565c:	4604      	mov	r4, r0
    dw1000_adj_rx_timeout(inst, timeout);
   1565e:	4601      	mov	r1, r0
   15660:	4628      	mov	r0, r5
   15662:	f7ff ffe2 	bl	1562a <dw1000_adj_rx_timeout>
}
   15666:	4620      	mov	r0, r4
   15668:	bd38      	pop	{r3, r4, r5, pc}

0001566a <dw1000_set_rx_timeout>:
{
   1566a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1566c:	b085      	sub	sp, #20
   1566e:	4604      	mov	r4, r0
   15670:	460e      	mov	r6, r1
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   15672:	f500 67ad 	add.w	r7, r0, #1384	; 0x568
   15676:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1567a:	4638      	mov	r0, r7
   1567c:	f7f5 fa58 	bl	ab30 <os_mutex_pend>
    if (err != DPL_OK) {
   15680:	b148      	cbz	r0, 15696 <dw1000_set_rx_timeout+0x2c>
        inst->uwb_dev.status.mtx_error = 1;
   15682:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   15686:	f043 0308 	orr.w	r3, r3, #8
   1568a:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   1568e:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   15692:	b005      	add	sp, #20
   15694:	bdf0      	pop	{r4, r5, r6, r7, pc}
    inst->uwb_dev.status.rx_timeout_error = 0;
   15696:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   1569a:	f36f 13c7 	bfc	r3, #7, #1
   1569e:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
    sys_cfg_reg = dw1000_read_reg(inst, SYS_CFG_ID, 3, sizeof(uint8_t));
   156a2:	2301      	movs	r3, #1
   156a4:	2203      	movs	r2, #3
   156a6:	2104      	movs	r1, #4
   156a8:	4620      	mov	r0, r4
   156aa:	f7fe fcb7 	bl	1401c <dw1000_read_reg>
   156ae:	b2c5      	uxtb	r5, r0
    inst->control.rx_timeout_enabled = timeout > 0;
   156b0:	1e32      	subs	r2, r6, #0
   156b2:	bf18      	it	ne
   156b4:	2201      	movne	r2, #1
   156b6:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
   156ba:	f362 1345 	bfi	r3, r2, #5, #1
   156be:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    if(inst->control.rx_timeout_enabled) {
   156c2:	b2db      	uxtb	r3, r3
   156c4:	f013 0f20 	tst.w	r3, #32
   156c8:	d10e      	bne.n	156e8 <dw1000_set_rx_timeout+0x7e>
        new_reg_val = sys_cfg_reg & (~(SYS_CFG_RXWTOE>>24));
   156ca:	f005 03ef 	and.w	r3, r5, #239	; 0xef
    if (sys_cfg_reg != new_reg_val) {
   156ce:	42ab      	cmp	r3, r5
   156d0:	d116      	bne.n	15700 <dw1000_set_rx_timeout+0x96>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   156d2:	4638      	mov	r0, r7
   156d4:	f7f5 f9d0 	bl	aa78 <os_mutex_release>
    assert(err == DPL_OK);
   156d8:	2800      	cmp	r0, #0
   156da:	d0d8      	beq.n	1568e <dw1000_set_rx_timeout+0x24>
   156dc:	2300      	movs	r3, #0
   156de:	461a      	mov	r2, r3
   156e0:	4619      	mov	r1, r3
   156e2:	4618      	mov	r0, r3
   156e4:	f7f3 fcb2 	bl	904c <__assert_func>
        dw1000_write_reg(inst, RX_FWTO_ID, RX_FWTO_OFFSET, timeout, sizeof(uint16_t));
   156e8:	2302      	movs	r3, #2
   156ea:	9302      	str	r3, [sp, #8]
   156ec:	2200      	movs	r2, #0
   156ee:	9600      	str	r6, [sp, #0]
   156f0:	9201      	str	r2, [sp, #4]
   156f2:	210c      	movs	r1, #12
   156f4:	4620      	mov	r0, r4
   156f6:	f7fe fd01 	bl	140fc <dw1000_write_reg>
        new_reg_val = sys_cfg_reg | (SYS_CFG_RXWTOE>>24);
   156fa:	f045 0310 	orr.w	r3, r5, #16
   156fe:	e7e6      	b.n	156ce <dw1000_set_rx_timeout+0x64>
        dw1000_write_reg(inst, SYS_CFG_ID, 3, new_reg_val, sizeof(uint8_t));
   15700:	2201      	movs	r2, #1
   15702:	9202      	str	r2, [sp, #8]
   15704:	9300      	str	r3, [sp, #0]
   15706:	2300      	movs	r3, #0
   15708:	9301      	str	r3, [sp, #4]
   1570a:	2203      	movs	r2, #3
   1570c:	2104      	movs	r1, #4
   1570e:	4620      	mov	r0, r4
   15710:	f7fe fcf4 	bl	140fc <dw1000_write_reg>
   15714:	e7dd      	b.n	156d2 <dw1000_set_rx_timeout+0x68>

00015716 <dw1000_set_rx_window>:
{
   15716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1571a:	4604      	mov	r4, r0
   1571c:	4690      	mov	r8, r2
   1571e:	461d      	mov	r5, r3
   15720:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
    dw1000_set_delay_start(inst, rx_start);
   15724:	f7ff fe00 	bl	15328 <dw1000_set_delay_start>
    timeout = calc_rx_window_timeout(rx_start, rx_end);
   15728:	4632      	mov	r2, r6
   1572a:	463b      	mov	r3, r7
   1572c:	4640      	mov	r0, r8
   1572e:	4629      	mov	r1, r5
   15730:	f7ff fc65 	bl	14ffe <calc_rx_window_timeout>
   15734:	4601      	mov	r1, r0
    inst->control.abs_timeout = 1;
   15736:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   1573a:	f043 0308 	orr.w	r3, r3, #8
   1573e:	f884 35b1 	strb.w	r3, [r4, #1457]	; 0x5b1
    inst->uwb_dev.abs_timeout = rx_end;
   15742:	f504 639c 	add.w	r3, r4, #1248	; 0x4e0
   15746:	e943 6702 	strd	r6, r7, [r3, #-8]
    dw1000_set_rx_timeout(inst, timeout);
   1574a:	4620      	mov	r0, r4
   1574c:	f7ff ff8d 	bl	1566a <dw1000_set_rx_timeout>
}
   15750:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   15754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00015758 <dw1000_set_abs_timeout>:
{
   15758:	b430      	push	{r4, r5}
   1575a:	4614      	mov	r4, r2
   1575c:	461d      	mov	r5, r3
    inst->control.abs_timeout = 1;
   1575e:	f890 35b1 	ldrb.w	r3, [r0, #1457]	; 0x5b1
   15762:	f043 0308 	orr.w	r3, r3, #8
   15766:	f880 35b1 	strb.w	r3, [r0, #1457]	; 0x5b1
    inst->uwb_dev.abs_timeout = rx_end;
   1576a:	f500 639c 	add.w	r3, r0, #1248	; 0x4e0
   1576e:	e943 4502 	strd	r4, r5, [r3, #-8]
}
   15772:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
   15776:	bc30      	pop	{r4, r5}
   15778:	4770      	bx	lr

0001577a <dw1000_sync_rxbufptrs>:
{
   1577a:	b510      	push	{r4, lr}
   1577c:	b084      	sub	sp, #16
   1577e:	4604      	mov	r4, r0
    inst->control.start_rx_syncbuf_enabled = 1;
   15780:	f890 35b0 	ldrb.w	r3, [r0, #1456]	; 0x5b0
   15784:	f043 0310 	orr.w	r3, r3, #16
   15788:	f880 35b0 	strb.w	r3, [r0, #1456]	; 0x5b0
    buff = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t)); // Read 1 byte at offset 3 to get the 4th byte out of 5
   1578c:	2301      	movs	r3, #1
   1578e:	2203      	movs	r2, #3
   15790:	210f      	movs	r1, #15
   15792:	f7fe fc43 	bl	1401c <dw1000_read_reg>
   15796:	b2c3      	uxtb	r3, r0
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=         // IC side Receive Buffer Pointer
   15798:	ea83 0343 	eor.w	r3, r3, r3, lsl #1
   1579c:	f013 0f80 	tst.w	r3, #128	; 0x80
   157a0:	d103      	bne.n	157aa <dw1000_sync_rxbufptrs+0x30>
}
   157a2:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   157a6:	b004      	add	sp, #16
   157a8:	bd10      	pop	{r4, pc}
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 0x01, sizeof(uint8_t)); // We need to swap RX buffer status reg (write one to toggle internally)
   157aa:	2301      	movs	r3, #1
   157ac:	9302      	str	r3, [sp, #8]
   157ae:	2201      	movs	r2, #1
   157b0:	2300      	movs	r3, #0
   157b2:	e9cd 2300 	strd	r2, r3, [sp]
   157b6:	2203      	movs	r2, #3
   157b8:	210d      	movs	r1, #13
   157ba:	4620      	mov	r0, r4
   157bc:	f7fe fc9e 	bl	140fc <dw1000_write_reg>
   157c0:	e7ef      	b.n	157a2 <dw1000_sync_rxbufptrs+0x28>
	...

000157c4 <dw1000_mac_framefilter>:
{
   157c4:	b570      	push	{r4, r5, r6, lr}
   157c6:	b084      	sub	sp, #16
   157c8:	4604      	mov	r4, r0
   157ca:	460d      	mov	r5, r1
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   157cc:	f500 66ad 	add.w	r6, r0, #1384	; 0x568
   157d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   157d4:	4630      	mov	r0, r6
   157d6:	f7f5 f9ab 	bl	ab30 <os_mutex_pend>
    if (err != DPL_OK) {
   157da:	b148      	cbz	r0, 157f0 <dw1000_mac_framefilter+0x2c>
        inst->uwb_dev.status.mtx_error = 1;
   157dc:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   157e0:	f043 0308 	orr.w	r3, r3, #8
   157e4:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   157e8:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   157ec:	b004      	add	sp, #16
   157ee:	bd70      	pop	{r4, r5, r6, pc}
    sys_cfg_reg = SYS_CFG_MASK & dw1000_read_reg(inst, SYS_CFG_ID, 0, sizeof(uint32_t)) ; // Read sysconfig register
   157f0:	2304      	movs	r3, #4
   157f2:	2200      	movs	r2, #0
   157f4:	4619      	mov	r1, r3
   157f6:	4620      	mov	r0, r4
   157f8:	f7fe fc10 	bl	1401c <dw1000_read_reg>
    inst->uwb_dev.config.rx.frameFilter = enable;
   157fc:	f8a4 551c 	strh.w	r5, [r4, #1308]	; 0x51c
    if(enable > 0){   // Enable frame filtering and configure frame types
   15800:	b1cd      	cbz	r5, 15836 <dw1000_mac_framefilter+0x72>
        sys_cfg_reg &= ~(SYS_CFG_FF_ALL_EN);  // Clear all
   15802:	4b0e      	ldr	r3, [pc, #56]	; (1583c <dw1000_mac_framefilter+0x78>)
   15804:	4003      	ands	r3, r0
        sys_cfg_reg |= (enable & SYS_CFG_FF_ALL_EN) | SYS_CFG_FFE;
   15806:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
   1580a:	431d      	orrs	r5, r3
   1580c:	f045 0501 	orr.w	r5, r5, #1
    dw1000_write_reg(inst, SYS_CFG_ID,0, sys_cfg_reg, sizeof(uint32_t));
   15810:	2104      	movs	r1, #4
   15812:	9102      	str	r1, [sp, #8]
   15814:	2200      	movs	r2, #0
   15816:	9500      	str	r5, [sp, #0]
   15818:	9201      	str	r2, [sp, #4]
   1581a:	4620      	mov	r0, r4
   1581c:	f7fe fc6e 	bl	140fc <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   15820:	4630      	mov	r0, r6
   15822:	f7f5 f929 	bl	aa78 <os_mutex_release>
    assert(err == DPL_OK);
   15826:	2800      	cmp	r0, #0
   15828:	d0de      	beq.n	157e8 <dw1000_mac_framefilter+0x24>
   1582a:	2300      	movs	r3, #0
   1582c:	461a      	mov	r2, r3
   1582e:	4619      	mov	r1, r3
   15830:	4618      	mov	r0, r3
   15832:	f7f3 fc0b 	bl	904c <__assert_func>
        sys_cfg_reg &= ~(SYS_CFG_FFE);
   15836:	4d02      	ldr	r5, [pc, #8]	; (15840 <dw1000_mac_framefilter+0x7c>)
   15838:	4005      	ands	r5, r0
   1583a:	e7e9      	b.n	15810 <dw1000_mac_framefilter+0x4c>
   1583c:	f047fe01 	.word	0xf047fe01
   15840:	f047fffe 	.word	0xf047fffe

00015844 <dw1000_set_autoack>:
{
   15844:	b570      	push	{r4, r5, r6, lr}
   15846:	b084      	sub	sp, #16
   15848:	4604      	mov	r4, r0
   1584a:	460d      	mov	r5, r1
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   1584c:	f500 66ad 	add.w	r6, r0, #1384	; 0x568
   15850:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   15854:	4630      	mov	r0, r6
   15856:	f7f5 f96b 	bl	ab30 <os_mutex_pend>
    if (err != DPL_OK) {
   1585a:	b148      	cbz	r0, 15870 <dw1000_set_autoack+0x2c>
        inst->uwb_dev.status.mtx_error = 1;
   1585c:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   15860:	f043 0308 	orr.w	r3, r3, #8
   15864:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   15868:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1586c:	b004      	add	sp, #16
   1586e:	bd70      	pop	{r4, r5, r6, pc}
    sys_cfg_reg = SYS_CFG_MASK & dw1000_read_reg(inst, SYS_CFG_ID, 0, sizeof(uint32_t)); // Read sysconfig register
   15870:	2304      	movs	r3, #4
   15872:	2200      	movs	r2, #0
   15874:	4619      	mov	r1, r3
   15876:	4620      	mov	r0, r4
   15878:	f7fe fbd0 	bl	1401c <dw1000_read_reg>
   1587c:	f020 637b 	bic.w	r3, r0, #263192576	; 0xfb00000
   15880:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
    inst->uwb_dev.config.autoack_enabled = enable;
   15884:	f894 252c 	ldrb.w	r2, [r4, #1324]	; 0x52c
   15888:	f365 0282 	bfi	r2, r5, #2, #1
   1588c:	f884 252c 	strb.w	r2, [r4, #1324]	; 0x52c
    if(inst->uwb_dev.config.autoack_enabled){
   15890:	b2d2      	uxtb	r2, r2
   15892:	f012 0f04 	tst.w	r2, #4
   15896:	d014      	beq.n	158c2 <dw1000_set_autoack+0x7e>
        sys_cfg_reg |= SYS_CFG_AUTOACK;
   15898:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
        dw1000_write_reg(inst, SYS_CFG_ID,0, sys_cfg_reg, sizeof(uint32_t));
   1589c:	2104      	movs	r1, #4
   1589e:	9102      	str	r1, [sp, #8]
   158a0:	2200      	movs	r2, #0
   158a2:	9300      	str	r3, [sp, #0]
   158a4:	9201      	str	r2, [sp, #4]
   158a6:	4620      	mov	r0, r4
   158a8:	f7fe fc28 	bl	140fc <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   158ac:	4630      	mov	r0, r6
   158ae:	f7f5 f8e3 	bl	aa78 <os_mutex_release>
    assert(err == DPL_OK);
   158b2:	2800      	cmp	r0, #0
   158b4:	d0d8      	beq.n	15868 <dw1000_set_autoack+0x24>
   158b6:	2300      	movs	r3, #0
   158b8:	461a      	mov	r2, r3
   158ba:	4619      	mov	r1, r3
   158bc:	4618      	mov	r0, r3
   158be:	f7f3 fbc5 	bl	904c <__assert_func>
        sys_cfg_reg &= ~SYS_CFG_AUTOACK;
   158c2:	f020 409f 	bic.w	r0, r0, #1333788672	; 0x4f800000
   158c6:	f420 1060 	bic.w	r0, r0, #3670016	; 0x380000
        dw1000_write_reg(inst, SYS_CFG_ID,0, sys_cfg_reg, sizeof(uint32_t));
   158ca:	2104      	movs	r1, #4
   158cc:	9102      	str	r1, [sp, #8]
   158ce:	2200      	movs	r2, #0
   158d0:	9000      	str	r0, [sp, #0]
   158d2:	9201      	str	r2, [sp, #4]
   158d4:	4620      	mov	r0, r4
   158d6:	f7fe fc11 	bl	140fc <dw1000_write_reg>
   158da:	e7e7      	b.n	158ac <dw1000_set_autoack+0x68>

000158dc <dw1000_set_autoack_delay>:
{
   158dc:	b530      	push	{r4, r5, lr}
   158de:	b085      	sub	sp, #20
   158e0:	4604      	mov	r4, r0
    dw1000_write_reg(inst, ACK_RESP_T_ID, ACK_RESP_T_ACK_TIM_OFFSET, delay, sizeof(uint8_t));
   158e2:	2501      	movs	r5, #1
   158e4:	9502      	str	r5, [sp, #8]
   158e6:	9100      	str	r1, [sp, #0]
   158e8:	2300      	movs	r3, #0
   158ea:	9301      	str	r3, [sp, #4]
   158ec:	2203      	movs	r2, #3
   158ee:	211a      	movs	r1, #26
   158f0:	f7fe fc04 	bl	140fc <dw1000_write_reg>
    dw1000_set_autoack(inst, true);
   158f4:	4629      	mov	r1, r5
   158f6:	4620      	mov	r0, r4
   158f8:	f7ff ffa4 	bl	15844 <dw1000_set_autoack>
}
   158fc:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   15900:	b005      	add	sp, #20
   15902:	bd30      	pop	{r4, r5, pc}

00015904 <dw1000_set_wait4resp_delay>:
{
   15904:	b570      	push	{r4, r5, r6, lr}
   15906:	b084      	sub	sp, #16
   15908:	4604      	mov	r4, r0
   1590a:	460e      	mov	r6, r1
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   1590c:	f500 65ad 	add.w	r5, r0, #1384	; 0x568
   15910:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   15914:	4628      	mov	r0, r5
   15916:	f7f5 f90b 	bl	ab30 <os_mutex_pend>
    if (err != DPL_OK) {
   1591a:	b148      	cbz	r0, 15930 <dw1000_set_wait4resp_delay+0x2c>
        inst->uwb_dev.status.mtx_error = 1;
   1591c:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   15920:	f043 0308 	orr.w	r3, r3, #8
   15924:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   15928:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1592c:	b004      	add	sp, #16
   1592e:	bd70      	pop	{r4, r5, r6, pc}
    ack_resp_reg = dw1000_read_reg(inst, ACK_RESP_T_ID, 0, sizeof(uint32_t));
   15930:	2304      	movs	r3, #4
   15932:	2200      	movs	r2, #0
   15934:	211a      	movs	r1, #26
   15936:	4620      	mov	r0, r4
   15938:	f7fe fb70 	bl	1401c <dw1000_read_reg>
    inst->control.wait4resp_delay_enabled = delay > 0;
   1593c:	1e32      	subs	r2, r6, #0
   1593e:	bf18      	it	ne
   15940:	2201      	movne	r2, #1
   15942:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
   15946:	f362 0341 	bfi	r3, r2, #1, #1
   1594a:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    if (inst->control.wait4resp_delay_enabled || (ack_resp_reg&ACK_RESP_T_W4R_TIM_MASK)) {
   1594e:	b2db      	uxtb	r3, r3
   15950:	f013 0f02 	tst.w	r3, #2
   15954:	d102      	bne.n	1595c <dw1000_set_wait4resp_delay+0x58>
   15956:	f3c0 0313 	ubfx	r3, r0, #0, #20
   1595a:	b16b      	cbz	r3, 15978 <dw1000_set_wait4resp_delay+0x74>
        ack_resp_reg &= ~(ACK_RESP_T_W4R_TIM_MASK) ;        // Clear the timer (19:0)
   1595c:	0d00      	lsrs	r0, r0, #20
   1595e:	0500      	lsls	r0, r0, #20
        ack_resp_reg |= (delay & ACK_RESP_T_W4R_TIM_MASK) ; // In UWB microseconds (e.g. turn the receiver on 20uus after TX)
   15960:	f3c6 0113 	ubfx	r1, r6, #0, #20
   15964:	4308      	orrs	r0, r1
        dw1000_write_reg(inst, ACK_RESP_T_ID, 0, ack_resp_reg, sizeof(uint32_t));
   15966:	2304      	movs	r3, #4
   15968:	9302      	str	r3, [sp, #8]
   1596a:	2200      	movs	r2, #0
   1596c:	9000      	str	r0, [sp, #0]
   1596e:	9201      	str	r2, [sp, #4]
   15970:	211a      	movs	r1, #26
   15972:	4620      	mov	r0, r4
   15974:	f7fe fbc2 	bl	140fc <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   15978:	4628      	mov	r0, r5
   1597a:	f7f5 f87d 	bl	aa78 <os_mutex_release>
    assert(err == DPL_OK);
   1597e:	2800      	cmp	r0, #0
   15980:	d0d2      	beq.n	15928 <dw1000_set_wait4resp_delay+0x24>
   15982:	2300      	movs	r3, #0
   15984:	461a      	mov	r2, r3
   15986:	4619      	mov	r1, r3
   15988:	4618      	mov	r0, r3
   1598a:	f7f3 fb5f 	bl	904c <__assert_func>

0001598e <dw1000_set_dblrxbuff>:
{
   1598e:	b570      	push	{r4, r5, r6, lr}
   15990:	b084      	sub	sp, #16
   15992:	4604      	mov	r4, r0
   15994:	460d      	mov	r5, r1
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   15996:	f500 66ad 	add.w	r6, r0, #1384	; 0x568
   1599a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1599e:	4630      	mov	r0, r6
   159a0:	f7f5 f8c6 	bl	ab30 <os_mutex_pend>
    if (err != DPL_OK) {
   159a4:	b148      	cbz	r0, 159ba <dw1000_set_dblrxbuff+0x2c>
        inst->uwb_dev.status.mtx_error = 1;
   159a6:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   159aa:	f043 0308 	orr.w	r3, r3, #8
   159ae:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   159b2:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   159b6:	b004      	add	sp, #16
   159b8:	bd70      	pop	{r4, r5, r6, pc}
    sys_cfg_reg = SYS_CFG_MASK & dw1000_read_reg(inst, SYS_CFG_ID, 0, sizeof(uint32_t));
   159ba:	2304      	movs	r3, #4
   159bc:	2200      	movs	r2, #0
   159be:	4619      	mov	r1, r3
   159c0:	4620      	mov	r0, r4
   159c2:	f7fe fb2b 	bl	1401c <dw1000_read_reg>
   159c6:	f020 637b 	bic.w	r3, r0, #263192576	; 0xfb00000
   159ca:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
    inst->uwb_dev.config.dblbuffon_enabled = enable;
   159ce:	f894 252c 	ldrb.w	r2, [r4, #1324]	; 0x52c
   159d2:	f365 1204 	bfi	r2, r5, #4, #1
   159d6:	f884 252c 	strb.w	r2, [r4, #1324]	; 0x52c
    if(inst->uwb_dev.config.dblbuffon_enabled)
   159da:	b2d2      	uxtb	r2, r2
   159dc:	f012 0f10 	tst.w	r2, #16
   159e0:	d028      	beq.n	15a34 <dw1000_set_dblrxbuff+0xa6>
        sys_cfg_reg &= ~SYS_CFG_DIS_DRXB;
   159e2:	f020 637b 	bic.w	r3, r0, #263192576	; 0xfb00000
   159e6:	f423 2301 	bic.w	r3, r3, #528384	; 0x81000
    dw1000_write_reg(inst, SYS_CFG_ID, 0, sys_cfg_reg, sizeof(uint32_t));
   159ea:	2104      	movs	r1, #4
   159ec:	9102      	str	r1, [sp, #8]
   159ee:	2200      	movs	r2, #0
   159f0:	9300      	str	r3, [sp, #0]
   159f2:	9201      	str	r2, [sp, #4]
   159f4:	4620      	mov	r0, r4
   159f6:	f7fe fb81 	bl	140fc <dw1000_write_reg>
    inst->control.start_rx_syncbuf_enabled = 1;
   159fa:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
   159fe:	f043 0310 	orr.w	r3, r3, #16
   15a02:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    buff = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t)); // Read 1 byte at offset 3 to get the 4th byte out of 5
   15a06:	2301      	movs	r3, #1
   15a08:	2203      	movs	r2, #3
   15a0a:	210f      	movs	r1, #15
   15a0c:	4620      	mov	r0, r4
   15a0e:	f7fe fb05 	bl	1401c <dw1000_read_reg>
   15a12:	b2c0      	uxtb	r0, r0
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=         // IC side Receive Buffer Pointer
   15a14:	ea80 0040 	eor.w	r0, r0, r0, lsl #1
   15a18:	f010 0f80 	tst.w	r0, #128	; 0x80
   15a1c:	d10d      	bne.n	15a3a <dw1000_set_dblrxbuff+0xac>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   15a1e:	4630      	mov	r0, r6
   15a20:	f7f5 f82a 	bl	aa78 <os_mutex_release>
    assert(err == DPL_OK);
   15a24:	2800      	cmp	r0, #0
   15a26:	d0c4      	beq.n	159b2 <dw1000_set_dblrxbuff+0x24>
   15a28:	2300      	movs	r3, #0
   15a2a:	461a      	mov	r2, r3
   15a2c:	4619      	mov	r1, r3
   15a2e:	4618      	mov	r0, r3
   15a30:	f7f3 fb0c 	bl	904c <__assert_func>
        sys_cfg_reg |= SYS_CFG_DIS_DRXB;
   15a34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   15a38:	e7d7      	b.n	159ea <dw1000_set_dblrxbuff+0x5c>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 0x01, sizeof(uint8_t)); // We need to swap RX buffer status reg (write one to toggle internally)
   15a3a:	2301      	movs	r3, #1
   15a3c:	9302      	str	r3, [sp, #8]
   15a3e:	2201      	movs	r2, #1
   15a40:	2300      	movs	r3, #0
   15a42:	e9cd 2300 	strd	r2, r3, [sp]
   15a46:	2203      	movs	r2, #3
   15a48:	210d      	movs	r1, #13
   15a4a:	4620      	mov	r0, r4
   15a4c:	f7fe fb56 	bl	140fc <dw1000_write_reg>
   15a50:	e7e5      	b.n	15a1e <dw1000_set_dblrxbuff+0x90>
   15a52:	0000      	movs	r0, r0
   15a54:	0000      	movs	r0, r0
	...

00015a58 <dw1000_mac_config>:
{
   15a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a5c:	b087      	sub	sp, #28
   15a5e:	4604      	mov	r4, r0
    if (config == NULL) {
   15a60:	2900      	cmp	r1, #0
   15a62:	f000 817f 	beq.w	15d64 <dw1000_mac_config+0x30c>
   15a66:	460d      	mov	r5, r1
        memcpy(&inst->uwb_dev.config, config, sizeof(struct uwb_dev_config));
   15a68:	460b      	mov	r3, r1
   15a6a:	f200 520c 	addw	r2, r0, #1292	; 0x50c
   15a6e:	f101 0c20 	add.w	ip, r1, #32
   15a72:	681f      	ldr	r7, [r3, #0]
   15a74:	685e      	ldr	r6, [r3, #4]
   15a76:	6898      	ldr	r0, [r3, #8]
   15a78:	68d9      	ldr	r1, [r3, #12]
   15a7a:	6017      	str	r7, [r2, #0]
   15a7c:	6056      	str	r6, [r2, #4]
   15a7e:	6090      	str	r0, [r2, #8]
   15a80:	60d1      	str	r1, [r2, #12]
   15a82:	3310      	adds	r3, #16
   15a84:	3210      	adds	r2, #16
   15a86:	4563      	cmp	r3, ip
   15a88:	d1f3      	bne.n	15a72 <dw1000_mac_config+0x1a>
   15a8a:	681b      	ldr	r3, [r3, #0]
   15a8c:	6013      	str	r3, [r2, #0]
    chan = config->channel;
   15a8e:	782f      	ldrb	r7, [r5, #0]
    prfIndex = config->prf - DWT_PRF_16M;
   15a90:	f895 8002 	ldrb.w	r8, [r5, #2]
   15a94:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   15a98:	fa5f f888 	uxtb.w	r8, r8
    bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
   15a9c:	2f04      	cmp	r7, #4
   15a9e:	f000 8167 	beq.w	15d70 <dw1000_mac_config+0x318>
   15aa2:	2f07      	cmp	r7, #7
   15aa4:	f000 8161 	beq.w	15d6a <dw1000_mac_config+0x312>
   15aa8:	2300      	movs	r3, #0
   15aaa:	9305      	str	r3, [sp, #20]
    reg16 = lde_replicaCoeff[config->rx.preambleCodeIndex];
   15aac:	796a      	ldrb	r2, [r5, #5]
   15aae:	4bca      	ldr	r3, [pc, #808]	; (15dd8 <dw1000_mac_config+0x380>)
   15ab0:	f833 b012 	ldrh.w	fp, [r3, r2, lsl #1]
    inst->sys_cfg_reg = SYS_CFG_MASK & dw1000_read_reg(inst, SYS_CFG_ID, 0, sizeof(uint32_t));
   15ab4:	2304      	movs	r3, #4
   15ab6:	2200      	movs	r2, #0
   15ab8:	4619      	mov	r1, r3
   15aba:	4620      	mov	r0, r4
   15abc:	f7fe faae 	bl	1401c <dw1000_read_reg>
   15ac0:	f020 607b 	bic.w	r0, r0, #263192576	; 0xfb00000
   15ac4:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
   15ac8:	f8c4 0584 	str.w	r0, [r4, #1412]	; 0x584
    if(config->dataRate == DWT_BR_110K){
   15acc:	786b      	ldrb	r3, [r5, #1]
   15ace:	2b00      	cmp	r3, #0
   15ad0:	f040 8151 	bne.w	15d76 <dw1000_mac_config+0x31e>
        inst->sys_cfg_reg |= SYS_CFG_RXM110K;
   15ad4:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
   15ad8:	f8c4 0584 	str.w	r0, [r4, #1412]	; 0x584
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
   15adc:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
    inst->sys_cfg_reg &= ~SYS_CFG_PHR_MODE_11;
   15ae0:	f8d4 3584 	ldr.w	r3, [r4, #1412]	; 0x584
   15ae4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
   15ae8:	f8c4 3584 	str.w	r3, [r4, #1412]	; 0x584
    inst->sys_cfg_reg |= (SYS_CFG_PHR_MODE_11 & (((uint32_t)config->rx.phrMode) << SYS_CFG_PHR_MODE_SHFT));
   15aec:	79ea      	ldrb	r2, [r5, #7]
   15aee:	0412      	lsls	r2, r2, #16
   15af0:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
   15af4:	4313      	orrs	r3, r2
   15af6:	f8c4 3584 	str.w	r3, [r4, #1412]	; 0x584
    if (config->rxauto_enable)
   15afa:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   15afe:	f012 0f01 	tst.w	r2, #1
   15b02:	f000 813d 	beq.w	15d80 <dw1000_mac_config+0x328>
        inst->sys_cfg_reg |=SYS_CFG_RXAUTR;
   15b06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   15b0a:	f8c4 3584 	str.w	r3, [r4, #1412]	; 0x584
    inst->sys_cfg_reg |= SYS_CFG_DIS_DRXB;
   15b0e:	f8d4 3584 	ldr.w	r3, [r4, #1412]	; 0x584
   15b12:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   15b16:	f8c4 3584 	str.w	r3, [r4, #1412]	; 0x584
    dw1000_write_reg(inst, SYS_CFG_ID, 0, inst->sys_cfg_reg, sizeof(uint32_t));
   15b1a:	f04f 0904 	mov.w	r9, #4
   15b1e:	f8cd 9008 	str.w	r9, [sp, #8]
   15b22:	2600      	movs	r6, #0
   15b24:	9300      	str	r3, [sp, #0]
   15b26:	9601      	str	r6, [sp, #4]
   15b28:	4632      	mov	r2, r6
   15b2a:	4649      	mov	r1, r9
   15b2c:	4620      	mov	r0, r4
   15b2e:	f7fe fae5 	bl	140fc <dw1000_write_reg>
    dw1000_write_reg(inst, LDE_IF_ID, LDE_REPC_OFFSET, reg16, sizeof(uint16_t));
   15b32:	f04f 0a02 	mov.w	sl, #2
   15b36:	f8cd a008 	str.w	sl, [sp, #8]
   15b3a:	f8cd b000 	str.w	fp, [sp]
   15b3e:	9601      	str	r6, [sp, #4]
   15b40:	f642 0204 	movw	r2, #10244	; 0x2804
   15b44:	212e      	movs	r1, #46	; 0x2e
   15b46:	4620      	mov	r0, r4
   15b48:	f7fe fad8 	bl	140fc <dw1000_write_reg>
    dw1000_phy_config_lde(inst, prfIndex);
   15b4c:	4641      	mov	r1, r8
   15b4e:	4620      	mov	r0, r4
   15b50:	f001 f9a9 	bl	16ea6 <dw1000_phy_config_lde>
    dw1000_write_reg(inst, FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]], sizeof(uint32_t));
   15b54:	4ba1      	ldr	r3, [pc, #644]	; (15ddc <dw1000_mac_config+0x384>)
   15b56:	f813 b007 	ldrb.w	fp, [r3, r7]
   15b5a:	4ba1      	ldr	r3, [pc, #644]	; (15de0 <dw1000_mac_config+0x388>)
   15b5c:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
   15b60:	f8cd 9008 	str.w	r9, [sp, #8]
   15b64:	9300      	str	r3, [sp, #0]
   15b66:	9601      	str	r6, [sp, #4]
   15b68:	2207      	movs	r2, #7
   15b6a:	212b      	movs	r1, #43	; 0x2b
   15b6c:	4620      	mov	r0, r4
   15b6e:	f7fe fac5 	bl	140fc <dw1000_write_reg>
    dw1000_write_reg(inst, FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]], sizeof(uint8_t));
   15b72:	4b9c      	ldr	r3, [pc, #624]	; (15de4 <dw1000_mac_config+0x38c>)
   15b74:	f813 300b 	ldrb.w	r3, [r3, fp]
   15b78:	2201      	movs	r2, #1
   15b7a:	9202      	str	r2, [sp, #8]
   15b7c:	9300      	str	r3, [sp, #0]
   15b7e:	9601      	str	r6, [sp, #4]
   15b80:	220b      	movs	r2, #11
   15b82:	212b      	movs	r1, #43	; 0x2b
   15b84:	4620      	mov	r0, r4
   15b86:	f7fe fab9 	bl	140fc <dw1000_write_reg>
    dw1000_write_reg(inst, RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw], sizeof(uint8_t));
   15b8a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   15b8e:	4a96      	ldr	r2, [pc, #600]	; (15de8 <dw1000_mac_config+0x390>)
   15b90:	5cd3      	ldrb	r3, [r2, r3]
   15b92:	2201      	movs	r2, #1
   15b94:	9202      	str	r2, [sp, #8]
   15b96:	9300      	str	r3, [sp, #0]
   15b98:	9601      	str	r6, [sp, #4]
   15b9a:	220b      	movs	r2, #11
   15b9c:	2128      	movs	r1, #40	; 0x28
   15b9e:	4620      	mov	r0, r4
   15ba0:	f7fe faac 	bl	140fc <dw1000_write_reg>
    dw1000_write_reg(inst, RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]], sizeof(uint32_t));
   15ba4:	4b91      	ldr	r3, [pc, #580]	; (15dec <dw1000_mac_config+0x394>)
   15ba6:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
   15baa:	f8cd 9008 	str.w	r9, [sp, #8]
   15bae:	9300      	str	r3, [sp, #0]
   15bb0:	9601      	str	r6, [sp, #4]
   15bb2:	220c      	movs	r2, #12
   15bb4:	2128      	movs	r1, #40	; 0x28
   15bb6:	4620      	mov	r0, r4
   15bb8:	f7fe faa0 	bl	140fc <dw1000_write_reg>
    dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->rx.sfdType], sizeof(uint16_t));
   15bbc:	786a      	ldrb	r2, [r5, #1]
   15bbe:	79ab      	ldrb	r3, [r5, #6]
   15bc0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   15bc4:	4a8a      	ldr	r2, [pc, #552]	; (15df0 <dw1000_mac_config+0x398>)
   15bc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   15bca:	f8cd a008 	str.w	sl, [sp, #8]
   15bce:	9300      	str	r3, [sp, #0]
   15bd0:	9601      	str	r6, [sp, #4]
   15bd2:	4652      	mov	r2, sl
   15bd4:	2127      	movs	r1, #39	; 0x27
   15bd6:	4620      	mov	r0, r4
   15bd8:	f7fe fa90 	bl	140fc <dw1000_write_reg>
    dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex], sizeof(uint16_t));
   15bdc:	4b85      	ldr	r3, [pc, #532]	; (15df4 <dw1000_mac_config+0x39c>)
   15bde:	f833 3018 	ldrh.w	r3, [r3, r8, lsl #1]
   15be2:	f8cd a008 	str.w	sl, [sp, #8]
   15be6:	9300      	str	r3, [sp, #0]
   15be8:	9601      	str	r6, [sp, #4]
   15bea:	464a      	mov	r2, r9
   15bec:	2127      	movs	r1, #39	; 0x27
   15bee:	4620      	mov	r0, r4
   15bf0:	f7fe fa84 	bl	140fc <dw1000_write_reg>
    if(config->dataRate == DWT_BR_110K){
   15bf4:	786b      	ldrb	r3, [r5, #1]
   15bf6:	2b00      	cmp	r3, #0
   15bf8:	f000 80c7 	beq.w	15d8a <dw1000_mac_config+0x332>
        if(config->tx.preambleLength == DWT_PLEN_64){
   15bfc:	7d6b      	ldrb	r3, [r5, #21]
   15bfe:	2b04      	cmp	r3, #4
   15c00:	f000 80cf 	beq.w	15da2 <dw1000_mac_config+0x34a>
            dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8, sizeof(uint16_t));
   15c04:	2602      	movs	r6, #2
   15c06:	9602      	str	r6, [sp, #8]
   15c08:	2220      	movs	r2, #32
   15c0a:	2300      	movs	r3, #0
   15c0c:	e9cd 2300 	strd	r2, r3, [sp]
   15c10:	2206      	movs	r2, #6
   15c12:	2127      	movs	r1, #39	; 0x27
   15c14:	4620      	mov	r0, r4
   15c16:	f7fe fa71 	bl	140fc <dw1000_write_reg>
            dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS, sizeof(uint16_t));
   15c1a:	9602      	str	r6, [sp, #8]
   15c1c:	2228      	movs	r2, #40	; 0x28
   15c1e:	2300      	movs	r3, #0
   15c20:	e9cd 2300 	strd	r2, r3, [sp]
   15c24:	2226      	movs	r2, #38	; 0x26
   15c26:	2127      	movs	r1, #39	; 0x27
   15c28:	4620      	mov	r0, r4
   15c2a:	f7fe fa67 	bl	140fc <dw1000_write_reg>
                     digital_bb_config[prfIndex][config->rx.pacLength], sizeof(uint32_t));
   15c2e:	792b      	ldrb	r3, [r5, #4]
   15c30:	eb03 0388 	add.w	r3, r3, r8, lsl #2
   15c34:	4a70      	ldr	r2, [pc, #448]	; (15df8 <dw1000_mac_config+0x3a0>)
   15c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE2_OFFSET,
   15c3a:	2204      	movs	r2, #4
   15c3c:	9202      	str	r2, [sp, #8]
   15c3e:	9300      	str	r3, [sp, #0]
   15c40:	2300      	movs	r3, #0
   15c42:	9301      	str	r3, [sp, #4]
   15c44:	2208      	movs	r2, #8
   15c46:	2127      	movs	r1, #39	; 0x27
   15c48:	4620      	mov	r0, r4
   15c4a:	f7fe fa57 	bl	140fc <dw1000_write_reg>
    if(config->rx.sfdTimeout == 0)
   15c4e:	896b      	ldrh	r3, [r5, #10]
   15c50:	b90b      	cbnz	r3, 15c56 <dw1000_mac_config+0x1fe>
        config->rx.sfdTimeout= DWT_SFDTOC_DEF;
   15c52:	2381      	movs	r3, #129	; 0x81
   15c54:	816b      	strh	r3, [r5, #10]
    dw1000_write_reg(inst, DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->rx.sfdTimeout, sizeof(uint16_t));
   15c56:	896b      	ldrh	r3, [r5, #10]
   15c58:	f04f 0a02 	mov.w	sl, #2
   15c5c:	f8cd a008 	str.w	sl, [sp, #8]
   15c60:	f04f 0900 	mov.w	r9, #0
   15c64:	9300      	str	r3, [sp, #0]
   15c66:	f8cd 9004 	str.w	r9, [sp, #4]
   15c6a:	2220      	movs	r2, #32
   15c6c:	2127      	movs	r1, #39	; 0x27
   15c6e:	4620      	mov	r0, r4
   15c70:	f7fe fa44 	bl	140fc <dw1000_write_reg>
    dw1000_write_reg(inst, AGC_CTRL_ID, AGC_TUNE2_OFFSET, agc_config.lo32, sizeof(uint32_t));
   15c74:	2604      	movs	r6, #4
   15c76:	9602      	str	r6, [sp, #8]
   15c78:	a355      	add	r3, pc, #340	; (adr r3, 15dd0 <dw1000_mac_config+0x378>)
   15c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
   15c7e:	e9cd 2300 	strd	r2, r3, [sp]
   15c82:	220c      	movs	r2, #12
   15c84:	2123      	movs	r1, #35	; 0x23
   15c86:	4620      	mov	r0, r4
   15c88:	f7fe fa38 	bl	140fc <dw1000_write_reg>
    dw1000_write_reg(inst, AGC_CTRL_ID, AGC_TUNE1_OFFSET, agc_config.target[prfIndex], sizeof(uint16_t));
   15c8c:	4b5b      	ldr	r3, [pc, #364]	; (15dfc <dw1000_mac_config+0x3a4>)
   15c8e:	eb03 0848 	add.w	r8, r3, r8, lsl #1
   15c92:	f8b8 3004 	ldrh.w	r3, [r8, #4]
   15c96:	f8cd a008 	str.w	sl, [sp, #8]
   15c9a:	9300      	str	r3, [sp, #0]
   15c9c:	f8cd 9004 	str.w	r9, [sp, #4]
   15ca0:	4632      	mov	r2, r6
   15ca2:	2123      	movs	r1, #35	; 0x23
   15ca4:	4620      	mov	r0, r4
   15ca6:	f7fe fa29 	bl	140fc <dw1000_write_reg>
    if(config->rx.sfdType){
   15caa:	79aa      	ldrb	r2, [r5, #6]
   15cac:	2a00      	cmp	r2, #0
   15cae:	f040 80a7 	bne.w	15e00 <dw1000_mac_config+0x3a8>
    uint8_t useDWnsSFD = 0;
   15cb2:	4611      	mov	r1, r2
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (((uint32_t)chan) << CHAN_CTRL_TX_CHAN_SHIFT)) |                   // Transmit Channel
   15cb4:	f007 030f 	and.w	r3, r7, #15
        (CHAN_CTRL_RX_CHAN_MASK & (((uint32_t)chan) << CHAN_CTRL_RX_CHAN_SHIFT)) |                         // Receive Channel
   15cb8:	013f      	lsls	r7, r7, #4
   15cba:	b2ff      	uxtb	r7, r7
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (((uint32_t)chan) << CHAN_CTRL_TX_CHAN_SHIFT)) |                   // Transmit Channel
   15cbc:	433b      	orrs	r3, r7
        (CHAN_CTRL_RXFPRF_MASK & (((uint32_t)config->prf) << CHAN_CTRL_RXFPRF_SHIFT)) |                    // RX PRF
   15cbe:	78af      	ldrb	r7, [r5, #2]
   15cc0:	04bf      	lsls	r7, r7, #18
   15cc2:	f407 2740 	and.w	r7, r7, #786432	; 0xc0000
        (CHAN_CTRL_RX_CHAN_MASK & (((uint32_t)chan) << CHAN_CTRL_RX_CHAN_SHIFT)) |                         // Receive Channel
   15cc6:	433b      	orrs	r3, r7
        ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & (((uint32_t)nsSfd_result) << CHAN_CTRL_TNSSFD_SHIFT)) |     // nsSFD enable RX&TX
   15cc8:	0512      	lsls	r2, r2, #20
   15cca:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
        (CHAN_CTRL_RXFPRF_MASK & (((uint32_t)config->prf) << CHAN_CTRL_RXFPRF_SHIFT)) |                    // RX PRF
   15cce:	4313      	orrs	r3, r2
        (CHAN_CTRL_DWSFD & (((uint32_t)useDWnsSFD) << CHAN_CTRL_DWSFD_SHIFT)) |                            // Use DW nsSFD
   15cd0:	044a      	lsls	r2, r1, #17
   15cd2:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
        ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & (((uint32_t)nsSfd_result) << CHAN_CTRL_TNSSFD_SHIFT)) |     // nsSFD enable RX&TX
   15cd6:	4313      	orrs	r3, r2
        (CHAN_CTRL_TX_PCOD_MASK & (((uint32_t)config->tx.preambleCodeIndex) << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
   15cd8:	7d2a      	ldrb	r2, [r5, #20]
   15cda:	0592      	lsls	r2, r2, #22
   15cdc:	f002 62f8 	and.w	r2, r2, #130023424	; 0x7c00000
        (CHAN_CTRL_DWSFD & (((uint32_t)useDWnsSFD) << CHAN_CTRL_DWSFD_SHIFT)) |                            // Use DW nsSFD
   15ce0:	4313      	orrs	r3, r2
        (CHAN_CTRL_RX_PCOD_MASK & (((uint32_t)config->rx.preambleCodeIndex) << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
   15ce2:	796a      	ldrb	r2, [r5, #5]
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (((uint32_t)chan) << CHAN_CTRL_TX_CHAN_SHIFT)) |                   // Transmit Channel
   15ce4:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
    dw1000_write_reg(inst, CHAN_CTRL_ID, 0, regval, sizeof(uint32_t)) ;
   15ce8:	2704      	movs	r7, #4
   15cea:	9702      	str	r7, [sp, #8]
   15cec:	2600      	movs	r6, #0
   15cee:	9300      	str	r3, [sp, #0]
   15cf0:	9601      	str	r6, [sp, #4]
   15cf2:	4632      	mov	r2, r6
   15cf4:	211f      	movs	r1, #31
   15cf6:	4620      	mov	r0, r4
   15cf8:	f7fe fa00 	bl	140fc <dw1000_write_reg>
    inst->tx_fctrl = (((uint32_t)(config->tx.preambleLength | config->prf)) << TX_FCTRL_TXPRF_SHFT) |
   15cfc:	7d6b      	ldrb	r3, [r5, #21]
   15cfe:	78aa      	ldrb	r2, [r5, #2]
   15d00:	431a      	orrs	r2, r3
        (((uint32_t)config->dataRate) << TX_FCTRL_TXBR_SHFT);
   15d02:	786b      	ldrb	r3, [r5, #1]
   15d04:	035b      	lsls	r3, r3, #13
    inst->tx_fctrl = (((uint32_t)(config->tx.preambleLength | config->prf)) << TX_FCTRL_TXPRF_SHFT) |
   15d06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   15d0a:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    dw1000_write_reg(inst, TX_FCTRL_ID, 0, inst->tx_fctrl, sizeof(uint32_t));
   15d0e:	9702      	str	r7, [sp, #8]
   15d10:	9300      	str	r3, [sp, #0]
   15d12:	9601      	str	r6, [sp, #4]
   15d14:	4632      	mov	r2, r6
   15d16:	2108      	movs	r1, #8
   15d18:	4620      	mov	r0, r4
   15d1a:	f7fe f9ef 	bl	140fc <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF, sizeof(uint8_t));
   15d1e:	2301      	movs	r3, #1
   15d20:	9302      	str	r3, [sp, #8]
   15d22:	2242      	movs	r2, #66	; 0x42
   15d24:	2300      	movs	r3, #0
   15d26:	e9cd 2300 	strd	r2, r3, [sp]
   15d2a:	4632      	mov	r2, r6
   15d2c:	210d      	movs	r1, #13
   15d2e:	4620      	mov	r0, r4
   15d30:	f7fe f9e4 	bl	140fc <dw1000_write_reg>
    dw1000_mac_framefilter(inst, config->rx.frameFilter);
   15d34:	8a29      	ldrh	r1, [r5, #16]
   15d36:	4620      	mov	r0, r4
   15d38:	f7ff fd44 	bl	157c4 <dw1000_mac_framefilter>
    if (config->rxauto_enable)
   15d3c:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   15d40:	f013 0f01 	tst.w	r3, #1
   15d44:	d004      	beq.n	15d50 <dw1000_mac_config+0x2f8>
        assert(config->trxoff_enable);
   15d46:	f895 3020 	ldrb.w	r3, [r5, #32]
   15d4a:	f013 0f20 	tst.w	r3, #32
   15d4e:	d067      	beq.n	15e20 <dw1000_mac_config+0x3c8>
    if(config->dblbuffon_enabled)
   15d50:	f895 3020 	ldrb.w	r3, [r5, #32]
   15d54:	f013 0f10 	tst.w	r3, #16
   15d58:	d168      	bne.n	15e2c <dw1000_mac_config+0x3d4>
}
   15d5a:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   15d5e:	b007      	add	sp, #28
   15d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        config = &inst->uwb_dev.config;
   15d64:	f200 550c 	addw	r5, r0, #1292	; 0x50c
   15d68:	e691      	b.n	15a8e <dw1000_mac_config+0x36>
    bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
   15d6a:	2301      	movs	r3, #1
   15d6c:	9305      	str	r3, [sp, #20]
   15d6e:	e69d      	b.n	15aac <dw1000_mac_config+0x54>
   15d70:	2301      	movs	r3, #1
   15d72:	9305      	str	r3, [sp, #20]
   15d74:	e69a      	b.n	15aac <dw1000_mac_config+0x54>
        inst->sys_cfg_reg &= (~SYS_CFG_RXM110K);
   15d76:	f420 0080 	bic.w	r0, r0, #4194304	; 0x400000
   15d7a:	f8c4 0584 	str.w	r0, [r4, #1412]	; 0x584
   15d7e:	e6af      	b.n	15ae0 <dw1000_mac_config+0x88>
        inst->sys_cfg_reg &= (~SYS_CFG_RXAUTR);
   15d80:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   15d84:	f8c4 3584 	str.w	r3, [r4, #1412]	; 0x584
   15d88:	e6c1      	b.n	15b0e <dw1000_mac_config+0xb6>
        dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K, sizeof(uint16_t));
   15d8a:	f8cd a008 	str.w	sl, [sp, #8]
   15d8e:	2264      	movs	r2, #100	; 0x64
   15d90:	2300      	movs	r3, #0
   15d92:	e9cd 2300 	strd	r2, r3, [sp]
   15d96:	2206      	movs	r2, #6
   15d98:	2127      	movs	r1, #39	; 0x27
   15d9a:	4620      	mov	r0, r4
   15d9c:	f7fe f9ae 	bl	140fc <dw1000_write_reg>
   15da0:	e745      	b.n	15c2e <dw1000_mac_config+0x1d6>
            dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64, sizeof(uint16_t));
   15da2:	2602      	movs	r6, #2
   15da4:	9602      	str	r6, [sp, #8]
   15da6:	f04f 0a10 	mov.w	sl, #16
   15daa:	f04f 0b00 	mov.w	fp, #0
   15dae:	e9cd ab00 	strd	sl, fp, [sp]
   15db2:	2206      	movs	r2, #6
   15db4:	2127      	movs	r1, #39	; 0x27
   15db6:	4620      	mov	r0, r4
   15db8:	f7fe f9a0 	bl	140fc <dw1000_write_reg>
            dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64, sizeof(uint16_t));
   15dbc:	9602      	str	r6, [sp, #8]
   15dbe:	e9cd ab00 	strd	sl, fp, [sp]
   15dc2:	2226      	movs	r2, #38	; 0x26
   15dc4:	2127      	movs	r1, #39	; 0x27
   15dc6:	4620      	mov	r0, r4
   15dc8:	f7fe f998 	bl	140fc <dw1000_write_reg>
   15dcc:	e72f      	b.n	15c2e <dw1000_mac_config+0x1d6>
   15dce:	bf00      	nop
   15dd0:	2502a907 	.word	0x2502a907
   15dd4:	00000000 	.word	0x00000000
   15dd8:	000240c0 	.word	0x000240c0
   15ddc:	00024034 	.word	0x00024034
   15de0:	00024064 	.word	0x00024064
   15de4:	0002407c 	.word	0x0002407c
   15de8:	000240f4 	.word	0x000240f4
   15dec:	00024104 	.word	0x00024104
   15df0:	000240f8 	.word	0x000240f8
   15df4:	0002405c 	.word	0x0002405c
   15df8:	0002403c 	.word	0x0002403c
   15dfc:	0002402c 	.word	0x0002402c
        dw1000_write_reg(inst, USR_SFD_ID, 0x0, dwnsSFDlen[config->dataRate], sizeof(uint8_t));
   15e00:	786b      	ldrb	r3, [r5, #1]
   15e02:	4a0d      	ldr	r2, [pc, #52]	; (15e38 <dw1000_mac_config+0x3e0>)
   15e04:	5cd3      	ldrb	r3, [r2, r3]
   15e06:	2601      	movs	r6, #1
   15e08:	9602      	str	r6, [sp, #8]
   15e0a:	464a      	mov	r2, r9
   15e0c:	9300      	str	r3, [sp, #0]
   15e0e:	f8cd 9004 	str.w	r9, [sp, #4]
   15e12:	2121      	movs	r1, #33	; 0x21
   15e14:	4620      	mov	r0, r4
   15e16:	f7fe f971 	bl	140fc <dw1000_write_reg>
        useDWnsSFD = 1 ;
   15e1a:	4631      	mov	r1, r6
        nsSfd_result = 3 ;
   15e1c:	2203      	movs	r2, #3
   15e1e:	e749      	b.n	15cb4 <dw1000_mac_config+0x25c>
        assert(config->trxoff_enable);
   15e20:	4633      	mov	r3, r6
   15e22:	4632      	mov	r2, r6
   15e24:	4631      	mov	r1, r6
   15e26:	4630      	mov	r0, r6
   15e28:	f7f3 f910 	bl	904c <__assert_func>
        dw1000_set_dblrxbuff(inst, true);
   15e2c:	2101      	movs	r1, #1
   15e2e:	4620      	mov	r0, r4
   15e30:	f7ff fdad 	bl	1598e <dw1000_set_dblrxbuff>
   15e34:	e791      	b.n	15d5a <dw1000_mac_config+0x302>
   15e36:	bf00      	nop
   15e38:	00024060 	.word	0x00024060

00015e3c <dw1000_read_carrier_integrator>:
{
   15e3c:	b508      	push	{r3, lr}
    regval = dw1000_read_reg(inst, DRX_CONF_ID, DRX_CARRIER_INT_OFFSET, DRX_CARRIER_INT_LEN);
   15e3e:	2303      	movs	r3, #3
   15e40:	2228      	movs	r2, #40	; 0x28
   15e42:	2127      	movs	r1, #39	; 0x27
   15e44:	f7fe f8ea 	bl	1401c <dw1000_read_reg>
    if (regval & B20_SIGN_EXTEND_TEST) {
   15e48:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
   15e4c:	d005      	beq.n	15e5a <dw1000_read_carrier_integrator+0x1e>
        regval |= B20_SIGN_EXTEND_MASK;
   15e4e:	ea6f 3000 	mvn.w	r0, r0, lsl #12
   15e52:	ea6f 3010 	mvn.w	r0, r0, lsr #12
}
   15e56:	4240      	negs	r0, r0
   15e58:	bd08      	pop	{r3, pc}
        regval &= DRX_CARRIER_INT_MASK;
   15e5a:	f3c0 0014 	ubfx	r0, r0, #0, #21
   15e5e:	e7fa      	b.n	15e56 <dw1000_read_carrier_integrator+0x1a>

00015e60 <dw1000_calc_clock_offset_ratio>:
{
   15e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15e64:	4603      	mov	r3, r0
   15e66:	4608      	mov	r0, r1
    if (inst->uwb_dev.config.dataRate == DWT_BR_110K) {
   15e68:	f893 250d 	ldrb.w	r2, [r3, #1293]	; 0x50d
   15e6c:	b172      	cbz	r2, 15e8c <dw1000_calc_clock_offset_ratio+0x2c>
    dpl_float64_t fom = DPL_FLOAT64_INIT(DWT_FREQ_OFFSET_MULTIPLIER);
   15e6e:	f20f 0998 	addw	r9, pc, #152	; 0x98
   15e72:	e9d9 8900 	ldrd	r8, r9, [r9]
    switch ( inst->uwb_dev.config.channel ) {
   15e76:	f893 350c 	ldrb.w	r3, [r3, #1292]	; 0x50c
   15e7a:	3b01      	subs	r3, #1
   15e7c:	2b06      	cmp	r3, #6
   15e7e:	d832      	bhi.n	15ee6 <dw1000_calc_clock_offset_ratio+0x86>
   15e80:	e8df f003 	tbb	[pc, r3]
   15e84:	25093b37 	.word	0x25093b37
   15e88:	3129      	.short	0x3129
   15e8a:	2d          	.byte	0x2d
   15e8b:	00          	.byte	0x00
        fom = DPL_FLOAT64_INIT(DWT_FREQ_OFFSET_MULTIPLIER_110KB);
   15e8c:	f20f 0980 	addw	r9, pc, #128	; 0x80
   15e90:	e9d9 8900 	ldrd	r8, r9, [r9]
   15e94:	e7ef      	b.n	15e76 <dw1000_calc_clock_offset_ratio+0x16>
    case 3: hz_to_ppm = DPL_FLOAT64_INIT(DWT_HZ_TO_PPM_MULTIPLIER_CHAN_3);break;
   15e96:	a720      	add	r7, pc, #128	; (adr r7, 15f18 <dw1000_calc_clock_offset_ratio+0xb8>)
   15e98:	e9d7 6700 	ldrd	r6, r7, [r7]
    ccor = DPL_FLOAT64_MUL(DPL_FLOAT64_I32_TO_F64(integrator_val), DPL_FLOAT64_MUL(fom, hz_to_ppm));
   15e9c:	f00b f9b4 	bl	21208 <__aeabi_i2d>
   15ea0:	4604      	mov	r4, r0
   15ea2:	460d      	mov	r5, r1
   15ea4:	4632      	mov	r2, r6
   15ea6:	463b      	mov	r3, r7
   15ea8:	4640      	mov	r0, r8
   15eaa:	4649      	mov	r1, r9
   15eac:	f00b fa16 	bl	212dc <__aeabi_dmul>
   15eb0:	4602      	mov	r2, r0
   15eb2:	460b      	mov	r3, r1
   15eb4:	4620      	mov	r0, r4
   15eb6:	4629      	mov	r1, r5
   15eb8:	f00b fa10 	bl	212dc <__aeabi_dmul>
    ccor = DPL_FLOAT64_DIV(ccor, DPL_FLOAT64_INIT(1.0e6));
   15ebc:	a318      	add	r3, pc, #96	; (adr r3, 15f20 <dw1000_calc_clock_offset_ratio+0xc0>)
   15ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
   15ec2:	f00b fb35 	bl	21530 <__aeabi_ddiv>
}
   15ec6:	ec41 0b10 	vmov	d0, r0, r1
   15eca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    case 4: hz_to_ppm = DPL_FLOAT64_INIT(DWT_HZ_TO_PPM_MULTIPLIER_CHAN_4);break;
   15ece:	a712      	add	r7, pc, #72	; (adr r7, 15f18 <dw1000_calc_clock_offset_ratio+0xb8>)
   15ed0:	e9d7 6700 	ldrd	r6, r7, [r7]
   15ed4:	e7e2      	b.n	15e9c <dw1000_calc_clock_offset_ratio+0x3c>
    case 5: hz_to_ppm = DPL_FLOAT64_INIT(DWT_HZ_TO_PPM_MULTIPLIER_CHAN_5);break;
   15ed6:	a714      	add	r7, pc, #80	; (adr r7, 15f28 <dw1000_calc_clock_offset_ratio+0xc8>)
   15ed8:	e9d7 6700 	ldrd	r6, r7, [r7]
   15edc:	e7de      	b.n	15e9c <dw1000_calc_clock_offset_ratio+0x3c>
    case 7: hz_to_ppm = DPL_FLOAT64_INIT(DWT_HZ_TO_PPM_MULTIPLIER_CHAN_7);break;
   15ede:	a712      	add	r7, pc, #72	; (adr r7, 15f28 <dw1000_calc_clock_offset_ratio+0xc8>)
   15ee0:	e9d7 6700 	ldrd	r6, r7, [r7]
   15ee4:	e7da      	b.n	15e9c <dw1000_calc_clock_offset_ratio+0x3c>
    default: assert(0);
   15ee6:	2300      	movs	r3, #0
   15ee8:	461a      	mov	r2, r3
   15eea:	4619      	mov	r1, r3
   15eec:	4618      	mov	r0, r3
   15eee:	f7f3 f8ad 	bl	904c <__assert_func>
    switch ( inst->uwb_dev.config.channel ) {
   15ef2:	a70f      	add	r7, pc, #60	; (adr r7, 15f30 <dw1000_calc_clock_offset_ratio+0xd0>)
   15ef4:	e9d7 6700 	ldrd	r6, r7, [r7]
   15ef8:	e7d0      	b.n	15e9c <dw1000_calc_clock_offset_ratio+0x3c>
    case 2: hz_to_ppm = DPL_FLOAT64_INIT(DWT_HZ_TO_PPM_MULTIPLIER_CHAN_2);break;
   15efa:	a70f      	add	r7, pc, #60	; (adr r7, 15f38 <dw1000_calc_clock_offset_ratio+0xd8>)
   15efc:	e9d7 6700 	ldrd	r6, r7, [r7]
   15f00:	e7cc      	b.n	15e9c <dw1000_calc_clock_offset_ratio+0x3c>
   15f02:	bf00      	nop
   15f04:	f3af 8000 	nop.w
   15f08:	00000000 	.word	0x00000000
   15f0c:	400dc130 	.word	0x400dc130
   15f10:	00000000 	.word	0x00000000
   15f14:	3fddc130 	.word	0x3fddc130
   15f18:	7281d2c8 	.word	0x7281d2c8
   15f1c:	3f2d2c7d 	.word	0x3f2d2c7d
   15f20:	00000000 	.word	0x00000000
   15f24:	412e8480 	.word	0x412e8480
   15f28:	3b94f463 	.word	0x3b94f463
   15f2c:	3f24327e 	.word	0x3f24327e
   15f30:	12c12c13 	.word	0x12c12c13
   15f34:	3f32c12c 	.word	0x3f32c12c
   15f38:	90690690 	.word	0x90690690
   15f3c:	3f306906 	.word	0x3f306906

00015f40 <dw1000_read_time_tracking_offset>:
{
   15f40:	b508      	push	{r3, lr}
    regval = dw1000_read_reg(inst, RX_TTCKO_ID, 0, 3);
   15f42:	2303      	movs	r3, #3
   15f44:	2200      	movs	r2, #0
   15f46:	2114      	movs	r1, #20
   15f48:	f7fe f868 	bl	1401c <dw1000_read_reg>
    if (regval & B18_SIGN_EXTEND_TEST) {
   15f4c:	f410 2f80 	tst.w	r0, #262144	; 0x40000
   15f50:	d004      	beq.n	15f5c <dw1000_read_time_tracking_offset+0x1c>
        regval |= B18_SIGN_EXTEND_MASK;
   15f52:	ea6f 3080 	mvn.w	r0, r0, lsl #14
   15f56:	ea6f 3090 	mvn.w	r0, r0, lsr #14
}
   15f5a:	bd08      	pop	{r3, pc}
        regval &= RX_TTCKO_RXTOFS_MASK;
   15f5c:	f3c0 0012 	ubfx	r0, r0, #0, #19
   15f60:	e7fb      	b.n	15f5a <dw1000_read_time_tracking_offset+0x1a>

00015f62 <dw1000_calc_clock_offset_ratio_ttco>:
{
   15f62:	b570      	push	{r4, r5, r6, lr}
    if (inst->uwb_dev.config.prf != DWT_PRF_16M) {
   15f64:	f890 350e 	ldrb.w	r3, [r0, #1294]	; 0x50e
   15f68:	2b01      	cmp	r3, #1
   15f6a:	d012      	beq.n	15f92 <dw1000_calc_clock_offset_ratio_ttco+0x30>
        denom = 0x01FC0000;
   15f6c:	f04f 76fe 	mov.w	r6, #33292288	; 0x1fc0000
    return DPL_FLOAT64_DIV(DPL_FLOAT64_I32_TO_F64(-ttcko), DPL_FLOAT64_I32_TO_F64(denom));
   15f70:	4248      	negs	r0, r1
   15f72:	f00b f949 	bl	21208 <__aeabi_i2d>
   15f76:	4604      	mov	r4, r0
   15f78:	460d      	mov	r5, r1
   15f7a:	4630      	mov	r0, r6
   15f7c:	f00b f944 	bl	21208 <__aeabi_i2d>
   15f80:	4602      	mov	r2, r0
   15f82:	460b      	mov	r3, r1
   15f84:	4620      	mov	r0, r4
   15f86:	4629      	mov	r1, r5
   15f88:	f00b fad2 	bl	21530 <__aeabi_ddiv>
}
   15f8c:	ec41 0b10 	vmov	d0, r0, r1
   15f90:	bd70      	pop	{r4, r5, r6, pc}
    int32_t denom = 0x01F00000;
   15f92:	f04f 76f8 	mov.w	r6, #32505856	; 0x1f00000
   15f96:	e7eb      	b.n	15f70 <dw1000_calc_clock_offset_ratio_ttco+0xe>

00015f98 <dw1000_read_rxdiag>:
{
   15f98:	b570      	push	{r4, r5, r6, lr}
   15f9a:	b082      	sub	sp, #8
   15f9c:	4605      	mov	r5, r0
   15f9e:	460c      	mov	r4, r1
    dw1000_read(inst, RX_TIME_ID, RX_TIME_FP_INDEX_OFFSET, (uint8_t*)&diag->rx_time, sizeof(diag->rx_time));
   15fa0:	2604      	movs	r6, #4
   15fa2:	9600      	str	r6, [sp, #0]
   15fa4:	1d8b      	adds	r3, r1, #6
   15fa6:	2205      	movs	r2, #5
   15fa8:	2115      	movs	r1, #21
   15faa:	f7fd ff6d 	bl	13e88 <dw1000_read>
    dw1000_read(inst, RX_FQUAL_ID, 0, (uint8_t*)&diag->rx_fqual, sizeof(diag->rx_fqual));
   15fae:	2308      	movs	r3, #8
   15fb0:	9300      	str	r3, [sp, #0]
   15fb2:	f104 030a 	add.w	r3, r4, #10
   15fb6:	2200      	movs	r2, #0
   15fb8:	2112      	movs	r1, #18
   15fba:	4628      	mov	r0, r5
   15fbc:	f7fd ff64 	bl	13e88 <dw1000_read>
    diag->pacc_cnt =  (dw1000_read_reg(inst, RX_FINFO_ID, 0, sizeof(uint32_t)) & RX_FINFO_RXPACC_MASK) >> RX_FINFO_RXPACC_SHIFT;
   15fc0:	4633      	mov	r3, r6
   15fc2:	2200      	movs	r2, #0
   15fc4:	2110      	movs	r1, #16
   15fc6:	4628      	mov	r0, r5
   15fc8:	f7fe f828 	bl	1401c <dw1000_read_reg>
   15fcc:	0d00      	lsrs	r0, r0, #20
   15fce:	8260      	strh	r0, [r4, #18]
}
   15fd0:	b002      	add	sp, #8
   15fd2:	bd70      	pop	{r4, r5, r6, pc}
   15fd4:	0000      	movs	r0, r0
	...

00015fd8 <dw1000_tasks_init>:
{
   15fd8:	b530      	push	{r4, r5, lr}
   15fda:	b085      	sub	sp, #20
   15fdc:	4604      	mov	r4, r0
    return os_eventq_inited((struct os_eventq *) evq);
   15fde:	303c      	adds	r0, #60	; 0x3c
   15fe0:	f7f3 fb63 	bl	96aa <os_eventq_inited>
    if (!dpl_eventq_inited(&inst->uwb_dev.eventq))
   15fe4:	b1c0      	cbz	r0, 16018 <dw1000_tasks_init+0x40>
    dw1000_phy_interrupt_mask(inst,          SYS_MASK_MCPLOCK | SYS_MASK_MRXDFR | SYS_MASK_MLDEERR | SYS_MASK_MTXFRB | SYS_MASK_MTXFRS | SYS_MASK_ALL_RX_TO   | SYS_MASK_ALL_RX_ERR | SYS_MASK_MTXBERR, false);
   15fe6:	4d18      	ldr	r5, [pc, #96]	; (16048 <dw1000_tasks_init+0x70>)
   15fe8:	2200      	movs	r2, #0
   15fea:	4629      	mov	r1, r5
   15fec:	4620      	mov	r0, r4
   15fee:	f001 f94f 	bl	17290 <dw1000_phy_interrupt_mask>
    dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_SLP2INIT | SYS_STATUS_CPLOCK| SYS_STATUS_RXDFR | SYS_STATUS_LDEERR | SYS_STATUS_TXFRB | SYS_STATUS_TXFRS | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_TXBERR, sizeof(uint32_t));
   15ff2:	2304      	movs	r3, #4
   15ff4:	9302      	str	r3, [sp, #8]
   15ff6:	a312      	add	r3, pc, #72	; (adr r3, 16040 <dw1000_tasks_init+0x68>)
   15ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
   15ffc:	e9cd 2300 	strd	r2, r3, [sp]
   16000:	2200      	movs	r2, #0
   16002:	210f      	movs	r1, #15
   16004:	4620      	mov	r0, r4
   16006:	f7fe f879 	bl	140fc <dw1000_write_reg>
    dw1000_phy_interrupt_mask(inst,          SYS_MASK_MCPLOCK | SYS_MASK_MRXDFR | SYS_MASK_MLDEERR | SYS_MASK_MTXFRB | SYS_MASK_MTXFRS | SYS_MASK_ALL_RX_TO   | SYS_MASK_ALL_RX_ERR | SYS_MASK_MTXBERR, true);
   1600a:	2201      	movs	r2, #1
   1600c:	4629      	mov	r1, r5
   1600e:	4620      	mov	r0, r4
   16010:	f001 f93e 	bl	17290 <dw1000_phy_interrupt_mask>
}
   16014:	b005      	add	sp, #20
   16016:	bd30      	pop	{r4, r5, pc}
        uwb_task_init(&inst->uwb_dev, dw1000_interrupt_ev_cb);
   16018:	490c      	ldr	r1, [pc, #48]	; (1604c <dw1000_tasks_init+0x74>)
   1601a:	4620      	mov	r0, r4
   1601c:	f7f2 fdfa 	bl	8c14 <uwb_task_init>
        hal_gpio_irq_init(inst->irq_pin, dw1000_irq, inst, HAL_GPIO_TRIG_RISING, HAL_GPIO_PULL_DOWN);
   16020:	2302      	movs	r3, #2
   16022:	9300      	str	r3, [sp, #0]
   16024:	2301      	movs	r3, #1
   16026:	4622      	mov	r2, r4
   16028:	4909      	ldr	r1, [pc, #36]	; (16050 <dw1000_tasks_init+0x78>)
   1602a:	f894 055d 	ldrb.w	r0, [r4, #1373]	; 0x55d
   1602e:	f7f2 ff91 	bl	8f54 <hal_gpio_irq_init>
        hal_gpio_irq_enable(inst->irq_pin);
   16032:	f894 055d 	ldrb.w	r0, [r4, #1373]	; 0x55d
   16036:	f7f2 ffc9 	bl	8fcc <hal_gpio_irq_enable>
   1603a:	e7d4      	b.n	15fe6 <dw1000_tasks_init+0xe>
   1603c:	f3af 8000 	nop.w
   16040:	34b7b092 	.word	0x34b7b092
   16044:	00000000 	.word	0x00000000
   16048:	3437b092 	.word	0x3437b092
   1604c:	000160d1 	.word	0x000160d1
   16050:	00015039 	.word	0x00015039

00016054 <dw1000_mac_init>:
{
   16054:	b530      	push	{r4, r5, lr}
   16056:	b083      	sub	sp, #12
   16058:	4604      	mov	r4, r0
    dw1000_mac_config(inst, config);
   1605a:	f7ff fcfd 	bl	15a58 <dw1000_mac_config>
    dw1000_tasks_init(inst);
   1605e:	4620      	mov	r0, r4
   16060:	f7ff ffba 	bl	15fd8 <dw1000_tasks_init>
        int rc = stats_init(
   16064:	f204 55b4 	addw	r5, r4, #1460	; 0x5b4
   16068:	220a      	movs	r2, #10
   1606a:	9200      	str	r2, [sp, #0]
   1606c:	4b0d      	ldr	r3, [pc, #52]	; (160a4 <dw1000_mac_init+0x50>)
   1606e:	2104      	movs	r1, #4
   16070:	4628      	mov	r0, r5
   16072:	f7fa ff51 	bl	10f18 <stats_init>
        assert(rc == 0);
   16076:	b940      	cbnz	r0, 1608a <dw1000_mac_init+0x36>
        rc = stats_register("mac", STATS_HDR(inst->stat));
   16078:	4629      	mov	r1, r5
   1607a:	480b      	ldr	r0, [pc, #44]	; (160a8 <dw1000_mac_init+0x54>)
   1607c:	f7fa ffd6 	bl	1102c <stats_register>
        assert(rc == 0);
   16080:	b948      	cbnz	r0, 16096 <dw1000_mac_init+0x42>
}
   16082:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   16086:	b003      	add	sp, #12
   16088:	bd30      	pop	{r4, r5, pc}
        assert(rc == 0);
   1608a:	2300      	movs	r3, #0
   1608c:	461a      	mov	r2, r3
   1608e:	4619      	mov	r1, r3
   16090:	4618      	mov	r0, r3
   16092:	f7f2 ffdb 	bl	904c <__assert_func>
        assert(rc == 0);
   16096:	2300      	movs	r3, #0
   16098:	461a      	mov	r2, r3
   1609a:	4619      	mov	r1, r3
   1609c:	4618      	mov	r0, r3
   1609e:	f7f2 ffd5 	bl	904c <__assert_func>
   160a2:	bf00      	nop
   160a4:	00024084 	.word	0x00024084
   160a8:	00023fc8 	.word	0x00023fc8

000160ac <dw1000_ic_and_host_ptrs_equal>:
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return uint8_t 1 = host and ic pointers match, 0 otherwise
 */
uint8_t
dw1000_ic_and_host_ptrs_equal(dw1000_dev_instance_t * inst)
{
   160ac:	b508      	push	{r3, lr}
    uint8_t b = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t));
   160ae:	2301      	movs	r3, #1
   160b0:	2203      	movs	r2, #3
   160b2:	210f      	movs	r1, #15
   160b4:	f7fd ffb2 	bl	1401c <dw1000_read_reg>
   160b8:	b2c0      	uxtb	r0, r0
    /* Check where the receiver is at, and if it's in the same buffer as the host */
    return (uint8_t)((b & (SYS_STATUS_ICRBP >> 24)) == ((b & (SYS_STATUS_HSRBP >> 24)) << 1));
   160ba:	ea80 0040 	eor.w	r0, r0, r0, lsl #1
   160be:	09c0      	lsrs	r0, r0, #7
   160c0:	f080 0001 	eor.w	r0, r0, #1
}
   160c4:	f000 0001 	and.w	r0, r0, #1
   160c8:	bd08      	pop	{r3, pc}
   160ca:	0000      	movs	r0, r0
   160cc:	0000      	movs	r0, r0
	...

000160d0 <dw1000_interrupt_ev_cb>:
 * @return void
 *
 */
static void
dw1000_interrupt_ev_cb(struct dpl_event *ev)
{
   160d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   160d4:	b085      	sub	sp, #20
   160d6:	4606      	mov	r6, r0
    return ev->ev.ev_arg;
   160d8:	6884      	ldr	r4, [r0, #8]
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   160da:	f104 0734 	add.w	r7, r4, #52	; 0x34
   160de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   160e2:	4638      	mov	r0, r7
   160e4:	f7f3 ff04 	bl	9ef0 <os_sem_pend>
    uint16_t finfo;
    struct uwb_mac_interface * cbs = NULL;
    dw1000_dev_instance_t * inst = dpl_event_get_arg(ev);
    dpl_error_t err = dpl_sem_pend(&inst->uwb_dev.irq_sem,  DPL_TIMEOUT_NEVER);
    if (err != DPL_OK) {
   160e8:	b188      	cbz	r0, 1610e <dw1000_interrupt_ev_cb+0x3e>
        inst->uwb_dev.status.sem_error = 1;
   160ea:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   160ee:	f043 0304 	orr.w	r3, r3, #4
   160f2:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
    /* Check for possibly missed interrupts occuring whilst we were looking at this one
     * NOTE: Because the interrupt is edge based we will only register an event if the irq pin
     * goes low and then comes back up. If the pin is high now and no event is queued just after
     * swapping rx-buffers this means we didn't have time to finish reading the data
     * from the previous irq until a new one arrived -> queue another irq event for the task */
    if (hal_gpio_read(inst->irq_pin) && !dpl_event_is_queued(ev)) {
   160f6:	f894 055d 	ldrb.w	r0, [r4, #1373]	; 0x55d
   160fa:	f7f2 ff04 	bl	8f06 <hal_gpio_read>
   160fe:	b118      	cbz	r0, 16108 <dw1000_interrupt_ev_cb+0x38>
    return ev->ev.ev_queued;
   16100:	7833      	ldrb	r3, [r6, #0]
   16102:	2b00      	cmp	r3, #0
   16104:	f000 84a9 	beq.w	16a5a <dw1000_interrupt_ev_cb+0x98a>
#if MYNEWT_VAL(DW1000_SYS_STATUS_BACKTRACE_LEN)
    if(!inst->sys_status_bt_lock) {
        DW1000_SYS_STATUS_BT_PTR(inst).utime_end = dpl_cputime_get32();
    }
#endif
}
   16108:	b005      	add	sp, #20
   1610a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        inst->sys_status = dw1000_read_reg(inst, SYS_STATUS_ID, 0, sizeof(uint32_t));
   1610e:	2304      	movs	r3, #4
   16110:	2200      	movs	r2, #0
   16112:	210f      	movs	r1, #15
   16114:	4620      	mov	r0, r4
   16116:	f7fd ff81 	bl	1401c <dw1000_read_reg>
   1611a:	f8c4 058c 	str.w	r0, [r4, #1420]	; 0x58c
        if (!(inst->sys_status & (SYS_MASK_MCPLOCK | SYS_MASK_MRXDFR | SYS_MASK_MLDEERR | SYS_MASK_MTXFRB | SYS_MASK_MTXFRS | SYS_MASK_ALL_RX_TO | SYS_MASK_ALL_RX_ERR | SYS_MASK_MTXBERR))) {
   1611e:	4bd9      	ldr	r3, [pc, #868]	; (16484 <dw1000_interrupt_ev_cb+0x3b4>)
   16120:	4003      	ands	r3, r0
   16122:	2b00      	cmp	r3, #0
   16124:	f000 8148 	beq.w	163b8 <dw1000_interrupt_ev_cb+0x2e8>
    inst->uwb_dev.status.rx_error = (inst->sys_status & SYS_STATUS_ALL_RX_ERR) !=0;
   16128:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   1612c:	4ad6      	ldr	r2, [pc, #856]	; (16488 <dw1000_interrupt_ev_cb+0x3b8>)
   1612e:	401a      	ands	r2, r3
   16130:	3a00      	subs	r2, #0
   16132:	bf18      	it	ne
   16134:	2201      	movne	r2, #1
   16136:	f894 1508 	ldrb.w	r1, [r4, #1288]	; 0x508
   1613a:	f362 1186 	bfi	r1, r2, #6, #1
   1613e:	f884 1508 	strb.w	r1, [r4, #1288]	; 0x508
    inst->uwb_dev.status.rx_error |= (inst->sys_status_hi & (SYS_STATUS_RXRSCS>>32)) != 0;
   16142:	f894 1590 	ldrb.w	r1, [r4, #1424]	; 0x590
   16146:	f001 0001 	and.w	r0, r1, #1
   1614a:	4302      	orrs	r2, r0
   1614c:	f894 0508 	ldrb.w	r0, [r4, #1288]	; 0x508
   16150:	f362 1086 	bfi	r0, r2, #6, #1
   16154:	f884 0508 	strb.w	r0, [r4, #1288]	; 0x508
    inst->uwb_dev.status.rx_autoframefilt_rej = (inst->sys_status & SYS_STATUS_AFFREJ) !=0;
   16158:	f3c3 7040 	ubfx	r0, r3, #29, #1
   1615c:	f894 2509 	ldrb.w	r2, [r4, #1289]	; 0x509
   16160:	f360 0200 	bfi	r2, r0, #0, #1
   16164:	f884 2509 	strb.w	r2, [r4, #1289]	; 0x509
    inst->uwb_dev.status.rx_timeout_error = (inst->sys_status & SYS_STATUS_ALL_RX_TO) !=0;
   16168:	f413 1f08 	tst.w	r3, #2228224	; 0x220000
   1616c:	bf14      	ite	ne
   1616e:	2001      	movne	r0, #1
   16170:	2000      	moveq	r0, #0
   16172:	f894 2508 	ldrb.w	r2, [r4, #1288]	; 0x508
   16176:	f360 12c7 	bfi	r2, r0, #7, #1
   1617a:	f884 2508 	strb.w	r2, [r4, #1288]	; 0x508
    inst->uwb_dev.status.lde_error = (inst->sys_status & SYS_STATUS_LDEDONE) == 0;
   1617e:	f413 6f80 	tst.w	r3, #1024	; 0x400
   16182:	bf0c      	ite	eq
   16184:	2001      	moveq	r0, #1
   16186:	2000      	movne	r0, #0
   16188:	f894 2509 	ldrb.w	r2, [r4, #1289]	; 0x509
   1618c:	f360 0282 	bfi	r2, r0, #2, #1
   16190:	f884 2509 	strb.w	r2, [r4, #1289]	; 0x509
    inst->uwb_dev.status.overrun_error = (inst->sys_status & SYS_STATUS_RXOVRR) != 0;
   16194:	f3c3 5000 	ubfx	r0, r3, #20, #1
   16198:	f894 250a 	ldrb.w	r2, [r4, #1290]	; 0x50a
   1619c:	f360 0282 	bfi	r2, r0, #2, #1
   161a0:	f884 250a 	strb.w	r2, [r4, #1290]	; 0x50a
    inst->uwb_dev.status.txbuf_error = (inst->sys_status & SYS_STATUS_TXBERR) != 0;
   161a4:	f3c3 7000 	ubfx	r0, r3, #28, #1
   161a8:	f894 2508 	ldrb.w	r2, [r4, #1288]	; 0x508
   161ac:	f360 1245 	bfi	r2, r0, #5, #1
   161b0:	f884 2508 	strb.w	r2, [r4, #1288]	; 0x508
    inst->uwb_dev.status.autoack_triggered = (inst->sys_status & SYS_STATUS_AAT) != 0;
   161b4:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   161b8:	f894 2509 	ldrb.w	r2, [r4, #1289]	; 0x509
   161bc:	f360 1286 	bfi	r2, r0, #6, #1
   161c0:	f884 2509 	strb.w	r2, [r4, #1289]	; 0x509
    inst->uwb_dev.status.rx_prej = (inst->sys_status_hi & (SYS_STATUS_RXPREJ>>32)) != 0;
   161c4:	f3c1 0140 	ubfx	r1, r1, #1, #1
   161c8:	b2d2      	uxtb	r2, r2
   161ca:	f361 0241 	bfi	r2, r1, #1, #1
   161ce:	f884 2509 	strb.w	r2, [r4, #1289]	; 0x509
   161d2:	f8b4 2566 	ldrh.w	r2, [r4, #1382]	; 0x566
    if(dpl_sem_get_count(&inst->tx_sem) == 0 && !(
   161d6:	b922      	cbnz	r2, 161e2 <dw1000_interrupt_ev_cb+0x112>
   161d8:	f003 0390 	and.w	r3, r3, #144	; 0x90
   161dc:	2b10      	cmp	r3, #16
   161de:	f040 80f4 	bne.w	163ca <dw1000_interrupt_ev_cb+0x2fa>
    if((inst->sys_status & SYS_STATUS_RXFCG)){
   161e2:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   161e6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   161ea:	f000 80ac 	beq.w	16346 <dw1000_interrupt_ev_cb+0x276>
        MAC_STATS_INC(DFR_cnt);
   161ee:	f8d4 35d0 	ldr.w	r3, [r4, #1488]	; 0x5d0
   161f2:	3301      	adds	r3, #1
   161f4:	f8c4 35d0 	str.w	r3, [r4, #1488]	; 0x5d0
        if (inst->uwb_dev.status.overrun_error){
   161f8:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   161fc:	f013 0f04 	tst.w	r3, #4
   16200:	f040 80f0 	bne.w	163e4 <dw1000_interrupt_ev_cb+0x314>
        if (inst->uwb_dev.config.rxauto_enable == 0 && inst->uwb_dev.config.dblbuffon_enabled) {
   16204:	f8b4 352c 	ldrh.w	r3, [r4, #1324]	; 0x52c
   16208:	f403 7388 	and.w	r3, r3, #272	; 0x110
   1620c:	2b10      	cmp	r3, #16
   1620e:	f000 8128 	beq.w	16462 <dw1000_interrupt_ev_cb+0x392>
        finfo = dw1000_read_reg(inst, RX_FINFO_ID, RX_FINFO_OFFSET, sizeof(uint16_t));
   16212:	2302      	movs	r3, #2
   16214:	2200      	movs	r2, #0
   16216:	2110      	movs	r1, #16
   16218:	4620      	mov	r0, r4
   1621a:	f7fd feff 	bl	1401c <dw1000_read_reg>
        inst->uwb_dev.frame_len = (finfo & RX_FINFO_RXFL_MASK_1023);
   1621e:	f3c0 0009 	ubfx	r0, r0, #0, #10
   16222:	f8a4 04e2 	strh.w	r0, [r4, #1250]	; 0x4e2
        if (inst->uwb_dev.frame_len) inst->uwb_dev.frame_len -= 2;
   16226:	b110      	cbz	r0, 1622e <dw1000_interrupt_ev_cb+0x15e>
   16228:	3802      	subs	r0, #2
   1622a:	f8a4 04e2 	strh.w	r0, [r4, #1250]	; 0x4e2
                       (inst->uwb_dev.frame_len < inst->uwb_dev.rxbuf_size) ?
   1622e:	f8b4 2504 	ldrh.w	r2, [r4, #1284]	; 0x504
   16232:	f8b4 34e2 	ldrh.w	r3, [r4, #1250]	; 0x4e2
        dw1000_read_rx(inst, inst->uwb_dev.rxbuf, 0,
   16236:	4293      	cmp	r3, r2
   16238:	bf28      	it	cs
   1623a:	4613      	movcs	r3, r2
   1623c:	2200      	movs	r2, #0
   1623e:	f8d4 14fc 	ldr.w	r1, [r4, #1276]	; 0x4fc
   16242:	4620      	mov	r0, r4
   16244:	f7fe ff0a 	bl	1505c <dw1000_read_rx>
        inst->uwb_dev.fctrl = ((uint16_t)inst->uwb_dev.rxbuf[1]<<8) | inst->uwb_dev.rxbuf[0];
   16248:	f8d4 24fc 	ldr.w	r2, [r4, #1276]	; 0x4fc
   1624c:	7851      	ldrb	r1, [r2, #1]
   1624e:	7813      	ldrb	r3, [r2, #0]
   16250:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   16254:	f8a4 34e0 	strh.w	r3, [r4, #1248]	; 0x4e0
        if (inst->uwb_dev.status.lde_error) // retest lde_error condition
   16258:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   1625c:	f013 0f04 	tst.w	r3, #4
   16260:	f040 8127 	bne.w	164b2 <dw1000_interrupt_ev_cb+0x3e2>
        if (inst->uwb_dev.status.lde_error) // LDE error or LDE late
   16264:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   16268:	f013 0f04 	tst.w	r3, #4
   1626c:	d004      	beq.n	16278 <dw1000_interrupt_ev_cb+0x1a8>
            MAC_STATS_INC(LDE_err);
   1626e:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
   16272:	3301      	adds	r3, #1
   16274:	f8c4 35e0 	str.w	r3, [r4, #1504]	; 0x5e0
 *
 * @return time
 */

inline uint64_t dw1000_read_rxtime(struct _dw1000_dev_instance_t * inst){
    uint64_t time = (uint64_t)  dw1000_read_reg(inst, RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET, RX_TIME_RX_STAMP_LEN) & 0x0FFFFFFFFFFULL;
   16278:	2305      	movs	r3, #5
   1627a:	2200      	movs	r2, #0
   1627c:	2115      	movs	r1, #21
   1627e:	4620      	mov	r0, r4
   16280:	f7fd fecc 	bl	1401c <dw1000_read_reg>
   16284:	b2cb      	uxtb	r3, r1
        inst->uwb_dev.rxtimestamp = dw1000_read_rxtime(inst);
   16286:	f8c4 04e8 	str.w	r0, [r4, #1256]	; 0x4e8
   1628a:	f8c4 34ec 	str.w	r3, [r4, #1260]	; 0x4ec
        if (inst->control.abs_timeout) {
   1628e:	f894 15b1 	ldrb.w	r1, [r4, #1457]	; 0x5b1
   16292:	f011 0f08 	tst.w	r1, #8
   16296:	f040 811e 	bne.w	164d6 <dw1000_interrupt_ev_cb+0x406>
        if (inst->uwb_dev.status.autoack_triggered) {
   1629a:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   1629e:	f013 0f40 	tst.w	r3, #64	; 0x40
   162a2:	d01c      	beq.n	162de <dw1000_interrupt_ev_cb+0x20e>
            if ((inst->uwb_dev.fctrl & UWB_FCTRL_ACK_REQUESTED) == 0){
   162a4:	f8b4 34e0 	ldrh.w	r3, [r4, #1248]	; 0x4e0
   162a8:	f013 0f20 	tst.w	r3, #32
   162ac:	f040 8118 	bne.w	164e0 <dw1000_interrupt_ev_cb+0x410>
                dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_AAT, sizeof(uint8_t));
   162b0:	2301      	movs	r3, #1
   162b2:	9302      	str	r3, [sp, #8]
   162b4:	2208      	movs	r2, #8
   162b6:	2300      	movs	r3, #0
   162b8:	e9cd 2300 	strd	r2, r3, [sp]
   162bc:	2200      	movs	r2, #0
   162be:	210f      	movs	r1, #15
   162c0:	4620      	mov	r0, r4
   162c2:	f7fd ff1b 	bl	140fc <dw1000_write_reg>
                inst->sys_status &= ~SYS_STATUS_AAT;
   162c6:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   162ca:	f023 0308 	bic.w	r3, r3, #8
   162ce:	f8c4 358c 	str.w	r3, [r4, #1420]	; 0x58c
                inst->uwb_dev.status.autoack_triggered = 0;
   162d2:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   162d6:	f36f 1386 	bfc	r3, #6, #1
   162da:	f884 3509 	strb.w	r3, [r4, #1289]	; 0x509
        if(inst->uwb_dev.config.rxdiag_enable)
   162de:	f894 352c 	ldrb.w	r3, [r4, #1324]	; 0x52c
   162e2:	f013 0f40 	tst.w	r3, #64	; 0x40
   162e6:	f040 810a 	bne.w	164fe <dw1000_interrupt_ev_cb+0x42e>
        if (inst->uwb_dev.config.dblbuffon_enabled) {
   162ea:	f894 352c 	ldrb.w	r3, [r4, #1324]	; 0x52c
   162ee:	f013 0f10 	tst.w	r3, #16
   162f2:	f000 8191 	beq.w	16618 <dw1000_interrupt_ev_cb+0x548>
            if (inst->uwb_dev.config.rxttcko_enable) {
   162f6:	f013 0f80 	tst.w	r3, #128	; 0x80
   162fa:	f040 8106 	bne.w	1650a <dw1000_interrupt_ev_cb+0x43a>
            inst->uwb_dev.status.overrun_error = dw1000_checkoverrun(inst);
   162fe:	4620      	mov	r0, r4
   16300:	f7fe fe91 	bl	15026 <dw1000_checkoverrun>
   16304:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   16308:	f360 0382 	bfi	r3, r0, #2, #1
   1630c:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
            if (inst->uwb_dev.status.overrun_error == 0) {
   16310:	b2db      	uxtb	r3, r3
   16312:	f013 0f04 	tst.w	r3, #4
   16316:	f040 813f 	bne.w	16598 <dw1000_interrupt_ev_cb+0x4c8>
                if (inst->uwb_dev.config.rxauto_enable) {
   1631a:	f894 352d 	ldrb.w	r3, [r4, #1325]	; 0x52d
   1631e:	f013 0f01 	tst.w	r3, #1
   16322:	f040 80f8 	bne.w	16516 <dw1000_interrupt_ev_cb+0x446>
                dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0b1, sizeof(uint8_t));
   16326:	2301      	movs	r3, #1
   16328:	9302      	str	r3, [sp, #8]
   1632a:	2201      	movs	r2, #1
   1632c:	2300      	movs	r3, #0
   1632e:	e9cd 2300 	strd	r2, r3, [sp]
   16332:	2203      	movs	r2, #3
   16334:	210d      	movs	r1, #13
   16336:	4620      	mov	r0, r4
   16338:	f7fd fee0 	bl	140fc <dw1000_write_reg>
        if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
   1633c:	f8d4 5530 	ldr.w	r5, [r4, #1328]	; 0x530
   16340:	2d00      	cmp	r5, #0
   16342:	f040 819c 	bne.w	1667e <dw1000_interrupt_ev_cb+0x5ae>
    if(inst->sys_status & SYS_STATUS_TXFRB) {
   16346:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   1634a:	f013 0f10 	tst.w	r3, #16
   1634e:	f040 819d 	bne.w	1668c <dw1000_interrupt_ev_cb+0x5bc>
    if(inst->sys_status & SYS_STATUS_TXFRS) {
   16352:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   16356:	f013 0f80 	tst.w	r3, #128	; 0x80
   1635a:	f040 81b3 	bne.w	166c4 <dw1000_interrupt_ev_cb+0x5f4>
    if(inst->uwb_dev.status.txbuf_error){
   1635e:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   16362:	f013 0f20 	tst.w	r3, #32
   16366:	f040 81f8 	bne.w	1675a <dw1000_interrupt_ev_cb+0x68a>
    if(inst->sys_status & SYS_STATUS_LDEERR){
   1636a:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   1636e:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   16372:	f040 8215 	bne.w	167a0 <dw1000_interrupt_ev_cb+0x6d0>
    if(inst->uwb_dev.status.rx_timeout_error){
   16376:	f994 3508 	ldrsb.w	r3, [r4, #1288]	; 0x508
   1637a:	2b00      	cmp	r3, #0
   1637c:	f2c0 8222 	blt.w	167c4 <dw1000_interrupt_ev_cb+0x6f4>
    if(inst->uwb_dev.status.rx_error) {
   16380:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   16384:	f013 0f40 	tst.w	r3, #64	; 0x40
   16388:	f040 828b 	bne.w	168a2 <dw1000_interrupt_ev_cb+0x7d2>
    if(inst->sys_status & SYS_STATUS_SLP2INIT){
   1638c:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   16390:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   16394:	f040 8309 	bne.w	169aa <dw1000_interrupt_ev_cb+0x8da>
    if(inst->sys_status & SYS_STATUS_CLKPLL_LL){
   16398:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   1639c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   163a0:	f040 830f 	bne.w	169c2 <dw1000_interrupt_ev_cb+0x8f2>
    if(inst->sys_status & SYS_MASK_MCPLOCK){
   163a4:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   163a8:	f013 0f02 	tst.w	r3, #2
   163ac:	f040 831b 	bne.w	169e6 <dw1000_interrupt_ev_cb+0x916>
    return (dpl_error_t)os_sem_release(&sem->sem);
   163b0:	4638      	mov	r0, r7
   163b2:	f7f3 fd6b 	bl	9e8c <os_sem_release>
   163b6:	e69e      	b.n	160f6 <dw1000_interrupt_ev_cb+0x26>
            inst->sys_status_hi = dw1000_read_reg(inst, SYS_STATUS_ID, 4, sizeof(uint8_t));
   163b8:	2301      	movs	r3, #1
   163ba:	2204      	movs	r2, #4
   163bc:	210f      	movs	r1, #15
   163be:	4620      	mov	r0, r4
   163c0:	f7fd fe2c 	bl	1401c <dw1000_read_reg>
   163c4:	f884 0590 	strb.w	r0, [r4, #1424]	; 0x590
   163c8:	e6ae      	b.n	16128 <dw1000_interrupt_ev_cb+0x58>
   163ca:	f504 60ac 	add.w	r0, r4, #1376	; 0x560
   163ce:	f7f3 fd5d 	bl	9e8c <os_sem_release>
        assert(err == DPL_OK);
   163d2:	2800      	cmp	r0, #0
   163d4:	f43f af05 	beq.w	161e2 <dw1000_interrupt_ev_cb+0x112>
   163d8:	2300      	movs	r3, #0
   163da:	461a      	mov	r2, r3
   163dc:	4619      	mov	r1, r3
   163de:	4618      	mov	r0, r3
   163e0:	f7f2 fe34 	bl	904c <__assert_func>
            MAC_STATS_INC(ROV_err);
   163e4:	f8d4 35d8 	ldr.w	r3, [r4, #1496]	; 0x5d8
   163e8:	3301      	adds	r3, #1
   163ea:	f8c4 35d8 	str.w	r3, [r4, #1496]	; 0x5d8
            dw1000_write_reg(inst, SYS_STATUS_ID, 0, (SYS_STATUS_RXOVRR |SYS_STATUS_LDEDONE | SYS_STATUS_RXDFR | SYS_STATUS_RXFCG | SYS_STATUS_RXFCE | SYS_STATUS_RXDFR), sizeof(uint32_t));
   163ee:	2304      	movs	r3, #4
   163f0:	9302      	str	r3, [sp, #8]
   163f2:	4a26      	ldr	r2, [pc, #152]	; (1648c <dw1000_interrupt_ev_cb+0x3bc>)
   163f4:	2300      	movs	r3, #0
   163f6:	e9cd 2300 	strd	r2, r3, [sp]
   163fa:	2200      	movs	r2, #0
   163fc:	210f      	movs	r1, #15
   163fe:	4620      	mov	r0, r4
   16400:	f7fd fe7c 	bl	140fc <dw1000_write_reg>
            dw1000_phy_forcetrxoff(inst);
   16404:	4620      	mov	r0, r4
   16406:	f000 feb3 	bl	17170 <dw1000_phy_forcetrxoff>
            dw1000_phy_rx_reset(inst);
   1640a:	4620      	mov	r0, r4
   1640c:	f000 fe7b 	bl	17106 <dw1000_phy_rx_reset>
    inst->control.start_rx_syncbuf_enabled = 1;
   16410:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
   16414:	f043 0310 	orr.w	r3, r3, #16
   16418:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    buff = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t)); // Read 1 byte at offset 3 to get the 4th byte out of 5
   1641c:	2301      	movs	r3, #1
   1641e:	2203      	movs	r2, #3
   16420:	210f      	movs	r1, #15
   16422:	4620      	mov	r0, r4
   16424:	f7fd fdfa 	bl	1401c <dw1000_read_reg>
   16428:	b2c0      	uxtb	r0, r0
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=         // IC side Receive Buffer Pointer
   1642a:	ea80 0040 	eor.w	r0, r0, r0, lsl #1
   1642e:	f010 0f80 	tst.w	r0, #128	; 0x80
   16432:	d10a      	bne.n	1644a <dw1000_interrupt_ev_cb+0x37a>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
   16434:	2201      	movs	r2, #1
   16436:	9202      	str	r2, [sp, #8]
   16438:	2001      	movs	r0, #1
   1643a:	2100      	movs	r1, #0
   1643c:	e9cd 0100 	strd	r0, r1, [sp]
   16440:	210d      	movs	r1, #13
   16442:	4620      	mov	r0, r4
   16444:	f7fd fe5a 	bl	140fc <dw1000_write_reg>
            goto early_exit;
   16448:	e7b2      	b.n	163b0 <dw1000_interrupt_ev_cb+0x2e0>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 0x01, sizeof(uint8_t)); // We need to swap RX buffer status reg (write one to toggle internally)
   1644a:	2301      	movs	r3, #1
   1644c:	9302      	str	r3, [sp, #8]
   1644e:	2201      	movs	r2, #1
   16450:	2300      	movs	r3, #0
   16452:	e9cd 2300 	strd	r2, r3, [sp]
   16456:	2203      	movs	r2, #3
   16458:	210d      	movs	r1, #13
   1645a:	4620      	mov	r0, r4
   1645c:	f7fd fe4e 	bl	140fc <dw1000_write_reg>
   16460:	e7e8      	b.n	16434 <dw1000_interrupt_ev_cb+0x364>
            if (inst->control.rxauto_disable == false && !inst->uwb_dev.status.autoack_triggered) {
   16462:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   16466:	f013 0f04 	tst.w	r3, #4
   1646a:	d104      	bne.n	16476 <dw1000_interrupt_ev_cb+0x3a6>
   1646c:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   16470:	f013 0f40 	tst.w	r3, #64	; 0x40
   16474:	d00c      	beq.n	16490 <dw1000_interrupt_ev_cb+0x3c0>
            inst->control.rxauto_disable = false;
   16476:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   1647a:	f36f 0382 	bfc	r3, #2, #1
   1647e:	f884 35b1 	strb.w	r3, [r4, #1457]	; 0x5b1
   16482:	e6c6      	b.n	16212 <dw1000_interrupt_ev_cb+0x142>
   16484:	3437b092 	.word	0x3437b092
   16488:	24119000 	.word	0x24119000
   1648c:	0010e400 	.word	0x0010e400
                dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
   16490:	2201      	movs	r2, #1
   16492:	9202      	str	r2, [sp, #8]
   16494:	2001      	movs	r0, #1
   16496:	2100      	movs	r1, #0
   16498:	e9cd 0100 	strd	r0, r1, [sp]
   1649c:	210d      	movs	r1, #13
   1649e:	4620      	mov	r0, r4
   164a0:	f7fd fe2c 	bl	140fc <dw1000_write_reg>
                inst->uwb_dev.status.rx_restarted = 1;
   164a4:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   164a8:	f043 0308 	orr.w	r3, r3, #8
   164ac:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
   164b0:	e7e1      	b.n	16476 <dw1000_interrupt_ev_cb+0x3a6>
            inst->uwb_dev.status.lde_error = (dw1000_read_reg(inst, SYS_STATUS_ID, 1, sizeof(uint8_t))  & (SYS_STATUS_LDEDONE >> 8)) == 0;
   164b2:	2301      	movs	r3, #1
   164b4:	461a      	mov	r2, r3
   164b6:	210f      	movs	r1, #15
   164b8:	4620      	mov	r0, r4
   164ba:	f7fd fdaf 	bl	1401c <dw1000_read_reg>
   164be:	f010 0f04 	tst.w	r0, #4
   164c2:	bf0c      	ite	eq
   164c4:	2201      	moveq	r2, #1
   164c6:	2200      	movne	r2, #0
   164c8:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   164cc:	f362 0382 	bfi	r3, r2, #2, #1
   164d0:	f884 3509 	strb.w	r3, [r4, #1289]	; 0x509
   164d4:	e6c6      	b.n	16264 <dw1000_interrupt_ev_cb+0x194>
            update_rx_window_timeout(inst, inst->uwb_dev.rxtimestamp);
   164d6:	4602      	mov	r2, r0
   164d8:	4620      	mov	r0, r4
   164da:	f7ff f8b5 	bl	15648 <update_rx_window_timeout>
   164de:	e6dc      	b.n	1629a <dw1000_interrupt_ev_cb+0x1ca>
                dw1000_write_reg(inst, SYS_STATUS_ID, 1, (inst->sys_status&(SYS_STATUS_LDEDONE | SYS_STATUS_RXDFR | SYS_STATUS_RXFCG | SYS_STATUS_RXFCE | SYS_STATUS_RXDFR))>>8, sizeof(uint8_t));
   164e0:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   164e4:	0a1b      	lsrs	r3, r3, #8
   164e6:	2201      	movs	r2, #1
   164e8:	9202      	str	r2, [sp, #8]
   164ea:	f003 03e4 	and.w	r3, r3, #228	; 0xe4
   164ee:	9300      	str	r3, [sp, #0]
   164f0:	2300      	movs	r3, #0
   164f2:	9301      	str	r3, [sp, #4]
   164f4:	210f      	movs	r1, #15
   164f6:	4620      	mov	r0, r4
   164f8:	f7fd fe00 	bl	140fc <dw1000_write_reg>
   164fc:	e6ef      	b.n	162de <dw1000_interrupt_ev_cb+0x20e>
            dw1000_read_rxdiag(inst, &inst->rxdiag);
   164fe:	f204 519c 	addw	r1, r4, #1436	; 0x59c
   16502:	4620      	mov	r0, r4
   16504:	f7ff fd48 	bl	15f98 <dw1000_read_rxdiag>
   16508:	e6ef      	b.n	162ea <dw1000_interrupt_ev_cb+0x21a>
                inst->uwb_dev.rxttcko = dw1000_read_time_tracking_offset(inst);
   1650a:	4620      	mov	r0, r4
   1650c:	f7ff fd18 	bl	15f40 <dw1000_read_time_tracking_offset>
   16510:	f8c4 04f4 	str.w	r0, [r4, #1268]	; 0x4f4
   16514:	e6f3      	b.n	162fe <dw1000_interrupt_ev_cb+0x22e>
                    if (dw1000_ic_and_host_ptrs_equal(inst)) {
   16516:	4620      	mov	r0, r4
   16518:	f7ff fdc8 	bl	160ac <dw1000_ic_and_host_ptrs_equal>
   1651c:	b368      	cbz	r0, 1657a <dw1000_interrupt_ev_cb+0x4aa>
                        uint8_t mask = dw1000_read_reg(inst, SYS_MASK_ID, 1 , sizeof(uint8_t));
   1651e:	2301      	movs	r3, #1
   16520:	461a      	mov	r2, r3
   16522:	210e      	movs	r1, #14
   16524:	4620      	mov	r0, r4
   16526:	f7fd fd79 	bl	1401c <dw1000_read_reg>
   1652a:	4680      	mov	r8, r0
                        dw1000_write_reg(inst, SYS_MASK_ID, 1, 0, sizeof(uint8_t));
   1652c:	2501      	movs	r5, #1
   1652e:	9502      	str	r5, [sp, #8]
   16530:	2200      	movs	r2, #0
   16532:	2300      	movs	r3, #0
   16534:	e9cd 2300 	strd	r2, r3, [sp]
   16538:	462a      	mov	r2, r5
   1653a:	210e      	movs	r1, #14
   1653c:	4620      	mov	r0, r4
   1653e:	f7fd fddd 	bl	140fc <dw1000_write_reg>
                        dw1000_write_reg(inst, SYS_STATUS_ID, 1, (inst->sys_status&(SYS_STATUS_LDEDONE | SYS_STATUS_RXDFR | SYS_STATUS_RXFCG | SYS_STATUS_RXFCE | SYS_STATUS_RXDFR))>>8, sizeof(uint8_t));
   16542:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   16546:	0a1b      	lsrs	r3, r3, #8
   16548:	9502      	str	r5, [sp, #8]
   1654a:	f003 03e4 	and.w	r3, r3, #228	; 0xe4
   1654e:	f04f 0900 	mov.w	r9, #0
   16552:	9300      	str	r3, [sp, #0]
   16554:	f8cd 9004 	str.w	r9, [sp, #4]
   16558:	462a      	mov	r2, r5
   1655a:	210f      	movs	r1, #15
   1655c:	4620      	mov	r0, r4
   1655e:	f7fd fdcd 	bl	140fc <dw1000_write_reg>
                        dw1000_write_reg(inst, SYS_MASK_ID, 1, mask, sizeof(uint8_t));
   16562:	9502      	str	r5, [sp, #8]
   16564:	f008 03ff 	and.w	r3, r8, #255	; 0xff
   16568:	9300      	str	r3, [sp, #0]
   1656a:	f8cd 9004 	str.w	r9, [sp, #4]
   1656e:	462a      	mov	r2, r5
   16570:	210e      	movs	r1, #14
   16572:	4620      	mov	r0, r4
   16574:	f7fd fdc2 	bl	140fc <dw1000_write_reg>
   16578:	e6d5      	b.n	16326 <dw1000_interrupt_ev_cb+0x256>
                        dw1000_write_reg(inst, SYS_STATUS_ID, 1, (inst->sys_status&(SYS_STATUS_LDEDONE | SYS_STATUS_RXDFR | SYS_STATUS_RXFCG | SYS_STATUS_RXFCE | SYS_STATUS_RXDFR))>>8, sizeof(uint8_t));
   1657a:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   1657e:	0a1b      	lsrs	r3, r3, #8
   16580:	2201      	movs	r2, #1
   16582:	9202      	str	r2, [sp, #8]
   16584:	f003 03e4 	and.w	r3, r3, #228	; 0xe4
   16588:	9300      	str	r3, [sp, #0]
   1658a:	2300      	movs	r3, #0
   1658c:	9301      	str	r3, [sp, #4]
   1658e:	210f      	movs	r1, #15
   16590:	4620      	mov	r0, r4
   16592:	f7fd fdb3 	bl	140fc <dw1000_write_reg>
   16596:	e6c6      	b.n	16326 <dw1000_interrupt_ev_cb+0x256>
                MAC_STATS_INC(ROV_err);
   16598:	f8d4 35d8 	ldr.w	r3, [r4, #1496]	; 0x5d8
   1659c:	3301      	adds	r3, #1
   1659e:	f8c4 35d8 	str.w	r3, [r4, #1496]	; 0x5d8
                dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_RXOVRR, sizeof(uint32_t));
   165a2:	2304      	movs	r3, #4
   165a4:	9302      	str	r3, [sp, #8]
   165a6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   165aa:	2300      	movs	r3, #0
   165ac:	e9cd 2300 	strd	r2, r3, [sp]
   165b0:	2200      	movs	r2, #0
   165b2:	210f      	movs	r1, #15
   165b4:	4620      	mov	r0, r4
   165b6:	f7fd fda1 	bl	140fc <dw1000_write_reg>
                dw1000_phy_forcetrxoff(inst);
   165ba:	4620      	mov	r0, r4
   165bc:	f000 fdd8 	bl	17170 <dw1000_phy_forcetrxoff>
                dw1000_phy_rx_reset(inst);
   165c0:	4620      	mov	r0, r4
   165c2:	f000 fda0 	bl	17106 <dw1000_phy_rx_reset>
    inst->control.start_rx_syncbuf_enabled = 1;
   165c6:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
   165ca:	f043 0310 	orr.w	r3, r3, #16
   165ce:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    buff = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t)); // Read 1 byte at offset 3 to get the 4th byte out of 5
   165d2:	2301      	movs	r3, #1
   165d4:	2203      	movs	r2, #3
   165d6:	210f      	movs	r1, #15
   165d8:	4620      	mov	r0, r4
   165da:	f7fd fd1f 	bl	1401c <dw1000_read_reg>
   165de:	b2c0      	uxtb	r0, r0
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=         // IC side Receive Buffer Pointer
   165e0:	ea80 0040 	eor.w	r0, r0, r0, lsl #1
   165e4:	f010 0f80 	tst.w	r0, #128	; 0x80
   165e8:	d10a      	bne.n	16600 <dw1000_interrupt_ev_cb+0x530>
                dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
   165ea:	2201      	movs	r2, #1
   165ec:	9202      	str	r2, [sp, #8]
   165ee:	2001      	movs	r0, #1
   165f0:	2100      	movs	r1, #0
   165f2:	e9cd 0100 	strd	r0, r1, [sp]
   165f6:	210d      	movs	r1, #13
   165f8:	4620      	mov	r0, r4
   165fa:	f7fd fd7f 	bl	140fc <dw1000_write_reg>
   165fe:	e69d      	b.n	1633c <dw1000_interrupt_ev_cb+0x26c>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 0x01, sizeof(uint8_t)); // We need to swap RX buffer status reg (write one to toggle internally)
   16600:	2301      	movs	r3, #1
   16602:	9302      	str	r3, [sp, #8]
   16604:	2201      	movs	r2, #1
   16606:	2300      	movs	r3, #0
   16608:	e9cd 2300 	strd	r2, r3, [sp]
   1660c:	2203      	movs	r2, #3
   1660e:	210d      	movs	r1, #13
   16610:	4620      	mov	r0, r4
   16612:	f7fd fd73 	bl	140fc <dw1000_write_reg>
   16616:	e7e8      	b.n	165ea <dw1000_interrupt_ev_cb+0x51a>
            inst->uwb_dev.carrier_integrator = dw1000_read_carrier_integrator(inst);
   16618:	4620      	mov	r0, r4
   1661a:	f7ff fc0f 	bl	15e3c <dw1000_read_carrier_integrator>
   1661e:	f8c4 04f0 	str.w	r0, [r4, #1264]	; 0x4f0
                             inst->sys_status & (SYS_STATUS_LDEDONE | SYS_STATUS_RXPHD | SYS_STATUS_RXDFR |
   16622:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
            dw1000_write_reg(inst, SYS_STATUS_ID, 0,
   16626:	2202      	movs	r2, #2
   16628:	9202      	str	r2, [sp, #8]
   1662a:	f403 436c 	and.w	r3, r3, #60416	; 0xec00
   1662e:	2200      	movs	r2, #0
   16630:	9300      	str	r3, [sp, #0]
   16632:	9201      	str	r2, [sp, #4]
   16634:	210f      	movs	r1, #15
   16636:	4620      	mov	r0, r4
   16638:	f7fd fd60 	bl	140fc <dw1000_write_reg>
            if (inst->control.rxauto_disable == false){
   1663c:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   16640:	f013 0f04 	tst.w	r3, #4
   16644:	d006      	beq.n	16654 <dw1000_interrupt_ev_cb+0x584>
            inst->control.rxauto_disable = false;
   16646:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   1664a:	f36f 0382 	bfc	r3, #2, #1
   1664e:	f884 35b1 	strb.w	r3, [r4, #1457]	; 0x5b1
   16652:	e673      	b.n	1633c <dw1000_interrupt_ev_cb+0x26c>
                dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
   16654:	2201      	movs	r2, #1
   16656:	9202      	str	r2, [sp, #8]
   16658:	2001      	movs	r0, #1
   1665a:	2100      	movs	r1, #0
   1665c:	e9cd 0100 	strd	r0, r1, [sp]
   16660:	210d      	movs	r1, #13
   16662:	4620      	mov	r0, r4
   16664:	f7fd fd4a 	bl	140fc <dw1000_write_reg>
                inst->uwb_dev.status.rx_restarted = 1;
   16668:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   1666c:	f043 0308 	orr.w	r3, r3, #8
   16670:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
   16674:	e7e7      	b.n	16646 <dw1000_interrupt_ev_cb+0x576>
                if(cbs->rx_complete_cb((struct uwb_dev*)inst,cbs)) continue;
   16676:	4629      	mov	r1, r5
   16678:	4620      	mov	r0, r4
   1667a:	4798      	blx	r3
            SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
   1667c:	6bad      	ldr	r5, [r5, #56]	; 0x38
   1667e:	2d00      	cmp	r5, #0
   16680:	f43f ae61 	beq.w	16346 <dw1000_interrupt_ev_cb+0x276>
            if (cbs != NULL && cbs->rx_complete_cb)
   16684:	692b      	ldr	r3, [r5, #16]
   16686:	2b00      	cmp	r3, #0
   16688:	d1f5      	bne.n	16676 <dw1000_interrupt_ev_cb+0x5a6>
   1668a:	e7f7      	b.n	1667c <dw1000_interrupt_ev_cb+0x5ac>
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_TXFRB, sizeof(uint8_t)); // Clear TX Frame Begins
   1668c:	2301      	movs	r3, #1
   1668e:	9302      	str	r3, [sp, #8]
   16690:	2210      	movs	r2, #16
   16692:	2300      	movs	r3, #0
   16694:	e9cd 2300 	strd	r2, r3, [sp]
   16698:	2200      	movs	r2, #0
   1669a:	210f      	movs	r1, #15
   1669c:	4620      	mov	r0, r4
   1669e:	f7fd fd2d 	bl	140fc <dw1000_write_reg>
        if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
   166a2:	f8d4 5530 	ldr.w	r5, [r4, #1328]	; 0x530
   166a6:	b90d      	cbnz	r5, 166ac <dw1000_interrupt_ev_cb+0x5dc>
   166a8:	e653      	b.n	16352 <dw1000_interrupt_ev_cb+0x282>
            SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
   166aa:	6bad      	ldr	r5, [r5, #56]	; 0x38
   166ac:	2d00      	cmp	r5, #0
   166ae:	f43f ae50 	beq.w	16352 <dw1000_interrupt_ev_cb+0x282>
            if (cbs!=NULL && cbs->tx_begins_cb)
   166b2:	68ab      	ldr	r3, [r5, #8]
   166b4:	2b00      	cmp	r3, #0
   166b6:	d0f8      	beq.n	166aa <dw1000_interrupt_ev_cb+0x5da>
                if(cbs->tx_begins_cb((struct uwb_dev*)inst,cbs)) break;
   166b8:	4629      	mov	r1, r5
   166ba:	4620      	mov	r0, r4
   166bc:	4798      	blx	r3
   166be:	2800      	cmp	r0, #0
   166c0:	d0f3      	beq.n	166aa <dw1000_interrupt_ev_cb+0x5da>
   166c2:	e646      	b.n	16352 <dw1000_interrupt_ev_cb+0x282>
        MAC_STATS_INC(TFG_cnt);
   166c4:	f8d4 35dc 	ldr.w	r3, [r4, #1500]	; 0x5dc
   166c8:	3301      	adds	r3, #1
   166ca:	f8c4 35dc 	str.w	r3, [r4, #1500]	; 0x5dc
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_ALL_TX, sizeof(uint8_t)); // Clear TX event bits
   166ce:	2301      	movs	r3, #1
   166d0:	9302      	str	r3, [sp, #8]
   166d2:	22f8      	movs	r2, #248	; 0xf8
   166d4:	2300      	movs	r3, #0
   166d6:	e9cd 2300 	strd	r2, r3, [sp]
   166da:	2200      	movs	r2, #0
   166dc:	210f      	movs	r1, #15
   166de:	4620      	mov	r0, r4
   166e0:	f7fd fd0c 	bl	140fc <dw1000_write_reg>
        if (inst->control.abs_timeout) {
   166e4:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   166e8:	f013 0f08 	tst.w	r3, #8
   166ec:	d106      	bne.n	166fc <dw1000_interrupt_ev_cb+0x62c>
   166ee:	f8b4 3566 	ldrh.w	r3, [r4, #1382]	; 0x566
        if(dpl_sem_get_count(&inst->tx_sem) == 0){
   166f2:	b1cb      	cbz	r3, 16728 <dw1000_interrupt_ev_cb+0x658>
        if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
   166f4:	f8d4 5530 	ldr.w	r5, [r4, #1328]	; 0x530
   166f8:	bb1d      	cbnz	r5, 16742 <dw1000_interrupt_ev_cb+0x672>
   166fa:	e630      	b.n	1635e <dw1000_interrupt_ev_cb+0x28e>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
   166fc:	2201      	movs	r2, #1
   166fe:	9202      	str	r2, [sp, #8]
   16700:	2001      	movs	r0, #1
   16702:	2100      	movs	r1, #0
   16704:	e9cd 0100 	strd	r0, r1, [sp]
   16708:	210d      	movs	r1, #13
   1670a:	4620      	mov	r0, r4
   1670c:	f7fd fcf6 	bl	140fc <dw1000_write_reg>
 *
 * @return time
 *
 */
inline uint64_t dw1000_read_txtime(struct _dw1000_dev_instance_t * inst){
    uint64_t time = (uint64_t) dw1000_read_reg(inst, TX_TIME_ID, TX_TIME_TX_STAMP_OFFSET, TX_TIME_TX_STAMP_LEN) & 0x0FFFFFFFFFFULL;
   16710:	2305      	movs	r3, #5
   16712:	2200      	movs	r2, #0
   16714:	2117      	movs	r1, #23
   16716:	4620      	mov	r0, r4
   16718:	f7fd fc80 	bl	1401c <dw1000_read_reg>
   1671c:	4602      	mov	r2, r0
            update_rx_window_timeout(inst, dw1000_read_txtime(inst));
   1671e:	b2cb      	uxtb	r3, r1
   16720:	4620      	mov	r0, r4
   16722:	f7fe ff91 	bl	15648 <update_rx_window_timeout>
   16726:	e7e2      	b.n	166ee <dw1000_interrupt_ev_cb+0x61e>
   16728:	f504 60ac 	add.w	r0, r4, #1376	; 0x560
   1672c:	f7f3 fbae 	bl	9e8c <os_sem_release>
            assert(err == DPL_OK);
   16730:	2800      	cmp	r0, #0
   16732:	d0df      	beq.n	166f4 <dw1000_interrupt_ev_cb+0x624>
   16734:	2300      	movs	r3, #0
   16736:	461a      	mov	r2, r3
   16738:	4619      	mov	r1, r3
   1673a:	4618      	mov	r0, r3
   1673c:	f7f2 fc86 	bl	904c <__assert_func>
            SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
   16740:	6bad      	ldr	r5, [r5, #56]	; 0x38
   16742:	2d00      	cmp	r5, #0
   16744:	f43f ae0b 	beq.w	1635e <dw1000_interrupt_ev_cb+0x28e>
            if (cbs!=NULL && cbs->tx_complete_cb)
   16748:	68eb      	ldr	r3, [r5, #12]
   1674a:	2b00      	cmp	r3, #0
   1674c:	d0f8      	beq.n	16740 <dw1000_interrupt_ev_cb+0x670>
                if(cbs->tx_complete_cb((struct uwb_dev*)inst,cbs)) break;
   1674e:	4629      	mov	r1, r5
   16750:	4620      	mov	r0, r4
   16752:	4798      	blx	r3
   16754:	2800      	cmp	r0, #0
   16756:	d0f3      	beq.n	16740 <dw1000_interrupt_ev_cb+0x670>
   16758:	e601      	b.n	1635e <dw1000_interrupt_ev_cb+0x28e>
        MAC_STATS_INC(TXBUF_err);
   1675a:	f8d4 35e8 	ldr.w	r3, [r4, #1512]	; 0x5e8
   1675e:	3301      	adds	r3, #1
   16760:	f8c4 35e8 	str.w	r3, [r4, #1512]	; 0x5e8
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_TXBERR, sizeof(uint32_t));
   16764:	2304      	movs	r3, #4
   16766:	9302      	str	r3, [sp, #8]
   16768:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1676c:	2300      	movs	r3, #0
   1676e:	e9cd 2300 	strd	r2, r3, [sp]
   16772:	2200      	movs	r2, #0
   16774:	210f      	movs	r1, #15
   16776:	4620      	mov	r0, r4
   16778:	f7fd fcc0 	bl	140fc <dw1000_write_reg>
   1677c:	f8b4 3566 	ldrh.w	r3, [r4, #1382]	; 0x566
        if(dpl_sem_get_count(&inst->tx_sem) == 0){
   16780:	2b00      	cmp	r3, #0
   16782:	f47f adf2 	bne.w	1636a <dw1000_interrupt_ev_cb+0x29a>
   16786:	f504 60ac 	add.w	r0, r4, #1376	; 0x560
   1678a:	f7f3 fb7f 	bl	9e8c <os_sem_release>
            assert(err == DPL_OK);
   1678e:	2800      	cmp	r0, #0
   16790:	f43f adeb 	beq.w	1636a <dw1000_interrupt_ev_cb+0x29a>
   16794:	2300      	movs	r3, #0
   16796:	461a      	mov	r2, r3
   16798:	4619      	mov	r1, r3
   1679a:	4618      	mov	r0, r3
   1679c:	f7f2 fc56 	bl	904c <__assert_func>
        MAC_STATS_INC(LDE_err);
   167a0:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
   167a4:	3301      	adds	r3, #1
   167a6:	f8c4 35e0 	str.w	r3, [r4, #1504]	; 0x5e0
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_LDEERR, sizeof(uint32_t));
   167aa:	2304      	movs	r3, #4
   167ac:	9302      	str	r3, [sp, #8]
   167ae:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   167b2:	2300      	movs	r3, #0
   167b4:	e9cd 2300 	strd	r2, r3, [sp]
   167b8:	2200      	movs	r2, #0
   167ba:	210f      	movs	r1, #15
   167bc:	4620      	mov	r0, r4
   167be:	f7fd fc9d 	bl	140fc <dw1000_write_reg>
   167c2:	e5d8      	b.n	16376 <dw1000_interrupt_ev_cb+0x2a6>
        MAC_STATS_INC(RTO_cnt);
   167c4:	f8d4 35d4 	ldr.w	r3, [r4, #1492]	; 0x5d4
   167c8:	3301      	adds	r3, #1
   167ca:	f8c4 35d4 	str.w	r3, [r4, #1492]	; 0x5d4
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_ALL_RX_TO, sizeof(uint32_t)); // Clear RX timeout event bits
   167ce:	2304      	movs	r3, #4
   167d0:	9302      	str	r3, [sp, #8]
   167d2:	f44f 1208 	mov.w	r2, #2228224	; 0x220000
   167d6:	2300      	movs	r3, #0
   167d8:	e9cd 2300 	strd	r2, r3, [sp]
   167dc:	2200      	movs	r2, #0
   167de:	210f      	movs	r1, #15
   167e0:	4620      	mov	r0, r4
   167e2:	f7fd fc8b 	bl	140fc <dw1000_write_reg>
        if (inst->control.abs_timeout) {
   167e6:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   167ea:	f013 0f08 	tst.w	r3, #8
   167ee:	d127      	bne.n	16840 <dw1000_interrupt_ev_cb+0x770>
        if (!inst->control.abs_timeout) {
   167f0:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   167f4:	f013 0f08 	tst.w	r3, #8
   167f8:	f47f adc2 	bne.w	16380 <dw1000_interrupt_ev_cb+0x2b0>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint16_t)SYS_CTRL_TRXOFF, sizeof(uint16_t)) ; // Disable the radio
   167fc:	2302      	movs	r3, #2
   167fe:	9302      	str	r3, [sp, #8]
   16800:	2240      	movs	r2, #64	; 0x40
   16802:	2300      	movs	r3, #0
   16804:	e9cd 2300 	strd	r2, r3, [sp]
   16808:	2200      	movs	r2, #0
   1680a:	210d      	movs	r1, #13
   1680c:	4620      	mov	r0, r4
   1680e:	f7fd fc75 	bl	140fc <dw1000_write_reg>
            dw1000_phy_rx_reset(inst);
   16812:	4620      	mov	r0, r4
   16814:	f000 fc77 	bl	17106 <dw1000_phy_rx_reset>
            inst->control.cir_enable = false;
   16818:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   1681c:	f36f 0341 	bfc	r3, #1, #1
   16820:	f884 35b1 	strb.w	r3, [r4, #1457]	; 0x5b1
            inst->control.rxauto_disable = false;
   16824:	b2db      	uxtb	r3, r3
   16826:	f36f 0382 	bfc	r3, #2, #1
   1682a:	f884 35b1 	strb.w	r3, [r4, #1457]	; 0x5b1
            inst->control.abs_timeout = false;
   1682e:	b2db      	uxtb	r3, r3
   16830:	f36f 03c3 	bfc	r3, #3, #1
   16834:	f884 35b1 	strb.w	r3, [r4, #1457]	; 0x5b1
            if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
   16838:	f8d4 5530 	ldr.w	r5, [r4, #1328]	; 0x530
   1683c:	bb3d      	cbnz	r5, 1688e <dw1000_interrupt_ev_cb+0x7be>
   1683e:	e59f      	b.n	16380 <dw1000_interrupt_ev_cb+0x2b0>
    uint64_t time = ((uint64_t) dw1000_read_reg(inst, SYS_TIME_ID, SYS_TIME_OFFSET, SYS_TIME_LEN)) & 0x0FFFFFFFFFFULL;
   16840:	2305      	movs	r3, #5
   16842:	2200      	movs	r2, #0
   16844:	2106      	movs	r1, #6
   16846:	4620      	mov	r0, r4
   16848:	f7fd fbe8 	bl	1401c <dw1000_read_reg>
            uint32_t new_timeout = calc_rx_window_timeout(systime, inst->uwb_dev.abs_timeout);
   1684c:	f504 639c 	add.w	r3, r4, #1248	; 0x4e0
   16850:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   16854:	b2c9      	uxtb	r1, r1
   16856:	f7fe fbd2 	bl	14ffe <calc_rx_window_timeout>
   1685a:	4605      	mov	r5, r0
            if (new_timeout > 1) {
   1685c:	2801      	cmp	r0, #1
   1685e:	d806      	bhi.n	1686e <dw1000_interrupt_ev_cb+0x79e>
                inst->control.abs_timeout = false;
   16860:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   16864:	f36f 03c3 	bfc	r3, #3, #1
   16868:	f884 35b1 	strb.w	r3, [r4, #1457]	; 0x5b1
   1686c:	e7c0      	b.n	167f0 <dw1000_interrupt_ev_cb+0x720>
                dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
   1686e:	2201      	movs	r2, #1
   16870:	9202      	str	r2, [sp, #8]
   16872:	2001      	movs	r0, #1
   16874:	2100      	movs	r1, #0
   16876:	e9cd 0100 	strd	r0, r1, [sp]
   1687a:	210d      	movs	r1, #13
   1687c:	4620      	mov	r0, r4
   1687e:	f7fd fc3d 	bl	140fc <dw1000_write_reg>
                dw1000_adj_rx_timeout(inst, new_timeout);
   16882:	4629      	mov	r1, r5
   16884:	4620      	mov	r0, r4
   16886:	f7fe fed0 	bl	1562a <dw1000_adj_rx_timeout>
   1688a:	e7b1      	b.n	167f0 <dw1000_interrupt_ev_cb+0x720>
                SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
   1688c:	6bad      	ldr	r5, [r5, #56]	; 0x38
   1688e:	2d00      	cmp	r5, #0
   16890:	f43f ad76 	beq.w	16380 <dw1000_interrupt_ev_cb+0x2b0>
                    if (cbs!=NULL && cbs->rx_timeout_cb)
   16894:	69ab      	ldr	r3, [r5, #24]
   16896:	2b00      	cmp	r3, #0
   16898:	d0f8      	beq.n	1688c <dw1000_interrupt_ev_cb+0x7bc>
                        if(cbs->rx_timeout_cb((struct uwb_dev*)inst,cbs)) continue;
   1689a:	4629      	mov	r1, r5
   1689c:	4620      	mov	r0, r4
   1689e:	4798      	blx	r3
   168a0:	e7f4      	b.n	1688c <dw1000_interrupt_ev_cb+0x7bc>
        MAC_STATS_INC(RX_err);
   168a2:	f8d4 35e4 	ldr.w	r3, [r4, #1508]	; 0x5e4
   168a6:	3301      	adds	r3, #1
   168a8:	f8c4 35e4 	str.w	r3, [r4, #1508]	; 0x5e4
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, (SYS_STATUS_ALL_RX_ERR), sizeof(uint32_t)); // Clear RX error event bits
   168ac:	2304      	movs	r3, #4
   168ae:	9302      	str	r3, [sp, #8]
   168b0:	a36f      	add	r3, pc, #444	; (adr r3, 16a70 <dw1000_interrupt_ev_cb+0x9a0>)
   168b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   168b6:	e9cd 2300 	strd	r2, r3, [sp]
   168ba:	2200      	movs	r2, #0
   168bc:	210f      	movs	r1, #15
   168be:	4620      	mov	r0, r4
   168c0:	f7fd fc1c 	bl	140fc <dw1000_write_reg>
        if (inst->uwb_dev.config.dblbuffon_enabled && inst->uwb_dev.status.overrun_error) {
   168c4:	f894 352c 	ldrb.w	r3, [r4, #1324]	; 0x52c
   168c8:	f013 0f10 	tst.w	r3, #16
   168cc:	d004      	beq.n	168d8 <dw1000_interrupt_ev_cb+0x808>
   168ce:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   168d2:	f013 0f04 	tst.w	r3, #4
   168d6:	d121      	bne.n	1691c <dw1000_interrupt_ev_cb+0x84c>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) SYS_CTRL_TRXOFF, sizeof(uint8_t));
   168d8:	2301      	movs	r3, #1
   168da:	9302      	str	r3, [sp, #8]
   168dc:	2240      	movs	r2, #64	; 0x40
   168de:	2300      	movs	r3, #0
   168e0:	e9cd 2300 	strd	r2, r3, [sp]
   168e4:	2200      	movs	r2, #0
   168e6:	210d      	movs	r1, #13
   168e8:	4620      	mov	r0, r4
   168ea:	f7fd fc07 	bl	140fc <dw1000_write_reg>
            dw1000_phy_rx_reset(inst);
   168ee:	4620      	mov	r0, r4
   168f0:	f000 fc09 	bl	17106 <dw1000_phy_rx_reset>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
   168f4:	2201      	movs	r2, #1
   168f6:	9202      	str	r2, [sp, #8]
   168f8:	2001      	movs	r0, #1
   168fa:	2100      	movs	r1, #0
   168fc:	e9cd 0100 	strd	r0, r1, [sp]
   16900:	210d      	movs	r1, #13
   16902:	4620      	mov	r0, r4
   16904:	f7fd fbfa 	bl	140fc <dw1000_write_reg>
        if (inst->control.abs_timeout) {
   16908:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   1690c:	f013 0f08 	tst.w	r3, #8
   16910:	d134      	bne.n	1697c <dw1000_interrupt_ev_cb+0x8ac>
        if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
   16912:	f8d4 5530 	ldr.w	r5, [r4, #1328]	; 0x530
   16916:	2d00      	cmp	r5, #0
   16918:	d13d      	bne.n	16996 <dw1000_interrupt_ev_cb+0x8c6>
   1691a:	e537      	b.n	1638c <dw1000_interrupt_ev_cb+0x2bc>
            MAC_STATS_INC(ROV_err);
   1691c:	f8d4 35d8 	ldr.w	r3, [r4, #1496]	; 0x5d8
   16920:	3301      	adds	r3, #1
   16922:	f8c4 35d8 	str.w	r3, [r4, #1496]	; 0x5d8
            dw1000_phy_rx_reset(inst);
   16926:	4620      	mov	r0, r4
   16928:	f000 fbed 	bl	17106 <dw1000_phy_rx_reset>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 0b1, sizeof(uint8_t));
   1692c:	2501      	movs	r5, #1
   1692e:	9502      	str	r5, [sp, #8]
   16930:	2201      	movs	r2, #1
   16932:	2300      	movs	r3, #0
   16934:	e9cd 2300 	strd	r2, r3, [sp]
   16938:	2203      	movs	r2, #3
   1693a:	210d      	movs	r1, #13
   1693c:	4620      	mov	r0, r4
   1693e:	f7fd fbdd 	bl	140fc <dw1000_write_reg>
    inst->control.start_rx_syncbuf_enabled = 1;
   16942:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
   16946:	f043 0310 	orr.w	r3, r3, #16
   1694a:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    buff = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t)); // Read 1 byte at offset 3 to get the 4th byte out of 5
   1694e:	462b      	mov	r3, r5
   16950:	2203      	movs	r2, #3
   16952:	210f      	movs	r1, #15
   16954:	4620      	mov	r0, r4
   16956:	f7fd fb61 	bl	1401c <dw1000_read_reg>
   1695a:	b2c0      	uxtb	r0, r0
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=         // IC side Receive Buffer Pointer
   1695c:	ea80 0040 	eor.w	r0, r0, r0, lsl #1
   16960:	f010 0f80 	tst.w	r0, #128	; 0x80
   16964:	d0c6      	beq.n	168f4 <dw1000_interrupt_ev_cb+0x824>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 0x01, sizeof(uint8_t)); // We need to swap RX buffer status reg (write one to toggle internally)
   16966:	9502      	str	r5, [sp, #8]
   16968:	2201      	movs	r2, #1
   1696a:	2300      	movs	r3, #0
   1696c:	e9cd 2300 	strd	r2, r3, [sp]
   16970:	2203      	movs	r2, #3
   16972:	210d      	movs	r1, #13
   16974:	4620      	mov	r0, r4
   16976:	f7fd fbc1 	bl	140fc <dw1000_write_reg>
            dw1000_sync_rxbufptrs(inst);
   1697a:	e7bb      	b.n	168f4 <dw1000_interrupt_ev_cb+0x824>
    uint64_t time = ((uint64_t) dw1000_read_reg(inst, SYS_TIME_ID, SYS_TIME_OFFSET, SYS_TIME_LEN)) & 0x0FFFFFFFFFFULL;
   1697c:	2305      	movs	r3, #5
   1697e:	2200      	movs	r2, #0
   16980:	2106      	movs	r1, #6
   16982:	4620      	mov	r0, r4
   16984:	f7fd fb4a 	bl	1401c <dw1000_read_reg>
   16988:	4602      	mov	r2, r0
            update_rx_window_timeout(inst, dw1000_read_systime(inst));
   1698a:	b2cb      	uxtb	r3, r1
   1698c:	4620      	mov	r0, r4
   1698e:	f7fe fe5b 	bl	15648 <update_rx_window_timeout>
   16992:	e7be      	b.n	16912 <dw1000_interrupt_ev_cb+0x842>
            SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
   16994:	6bad      	ldr	r5, [r5, #56]	; 0x38
   16996:	2d00      	cmp	r5, #0
   16998:	f43f acf8 	beq.w	1638c <dw1000_interrupt_ev_cb+0x2bc>
            if (cbs!=NULL && cbs->rx_error_cb)
   1699c:	69eb      	ldr	r3, [r5, #28]
   1699e:	2b00      	cmp	r3, #0
   169a0:	d0f8      	beq.n	16994 <dw1000_interrupt_ev_cb+0x8c4>
                if(cbs->rx_error_cb((struct uwb_dev*)inst,cbs)) continue;
   169a2:	4629      	mov	r1, r5
   169a4:	4620      	mov	r0, r4
   169a6:	4798      	blx	r3
   169a8:	e7f4      	b.n	16994 <dw1000_interrupt_ev_cb+0x8c4>
        dw1000_write_reg(inst, SYS_STATUS_ID, 2, SYS_STATUS_SLP2INIT>>16, 1);
   169aa:	2301      	movs	r3, #1
   169ac:	9302      	str	r3, [sp, #8]
   169ae:	2280      	movs	r2, #128	; 0x80
   169b0:	2300      	movs	r3, #0
   169b2:	e9cd 2300 	strd	r2, r3, [sp]
   169b6:	2202      	movs	r2, #2
   169b8:	210f      	movs	r1, #15
   169ba:	4620      	mov	r0, r4
   169bc:	f7fd fb9e 	bl	140fc <dw1000_write_reg>
   169c0:	e4ea      	b.n	16398 <dw1000_interrupt_ev_cb+0x2c8>
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_CLKPLL_LL, sizeof(uint32_t));
   169c2:	2304      	movs	r3, #4
   169c4:	9302      	str	r3, [sp, #8]
   169c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   169ca:	2300      	movs	r3, #0
   169cc:	e9cd 2300 	strd	r2, r3, [sp]
   169d0:	2200      	movs	r2, #0
   169d2:	210f      	movs	r1, #15
   169d4:	4620      	mov	r0, r4
   169d6:	f7fd fb91 	bl	140fc <dw1000_write_reg>
        MAC_STATS_INC(PLL_LL_err);
   169da:	f8d4 35ec 	ldr.w	r3, [r4, #1516]	; 0x5ec
   169de:	3301      	adds	r3, #1
   169e0:	f8c4 35ec 	str.w	r3, [r4, #1516]	; 0x5ec
   169e4:	e4de      	b.n	163a4 <dw1000_interrupt_ev_cb+0x2d4>
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_MASK_MCPLOCK, sizeof(uint32_t));
   169e6:	2304      	movs	r3, #4
   169e8:	9302      	str	r3, [sp, #8]
   169ea:	2202      	movs	r2, #2
   169ec:	2300      	movs	r3, #0
   169ee:	e9cd 2300 	strd	r2, r3, [sp]
   169f2:	2200      	movs	r2, #0
   169f4:	210f      	movs	r1, #15
   169f6:	4620      	mov	r0, r4
   169f8:	f7fd fb80 	bl	140fc <dw1000_write_reg>
        dw1000_phy_set_rx_antennadelay(inst, inst->uwb_dev.rx_antenna_delay);
   169fc:	f8b4 34cc 	ldrh.w	r3, [r4, #1228]	; 0x4cc
   16a00:	f04f 0802 	mov.w	r8, #2
   16a04:	f8cd 8008 	str.w	r8, [sp, #8]
   16a08:	2500      	movs	r5, #0
   16a0a:	9300      	str	r3, [sp, #0]
   16a0c:	9501      	str	r5, [sp, #4]
   16a0e:	f641 0204 	movw	r2, #6148	; 0x1804
   16a12:	212e      	movs	r1, #46	; 0x2e
   16a14:	4620      	mov	r0, r4
   16a16:	f7fd fb71 	bl	140fc <dw1000_write_reg>
        dw1000_phy_set_tx_antennadelay(inst, inst->uwb_dev.tx_antenna_delay);
   16a1a:	f8b4 34ce 	ldrh.w	r3, [r4, #1230]	; 0x4ce
   16a1e:	f8cd 8008 	str.w	r8, [sp, #8]
   16a22:	9300      	str	r3, [sp, #0]
   16a24:	9501      	str	r5, [sp, #4]
   16a26:	462a      	mov	r2, r5
   16a28:	2118      	movs	r1, #24
   16a2a:	4620      	mov	r0, r4
   16a2c:	f7fd fb66 	bl	140fc <dw1000_write_reg>
        inst->uwb_dev.status.sleeping = 0;
   16a30:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   16a34:	f365 0300 	bfi	r3, r5, #0, #1
   16a38:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
        if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
   16a3c:	f8d4 5530 	ldr.w	r5, [r4, #1328]	; 0x530
   16a40:	b90d      	cbnz	r5, 16a46 <dw1000_interrupt_ev_cb+0x976>
   16a42:	e4b5      	b.n	163b0 <dw1000_interrupt_ev_cb+0x2e0>
            SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
   16a44:	6bad      	ldr	r5, [r5, #56]	; 0x38
   16a46:	2d00      	cmp	r5, #0
   16a48:	f43f acb2 	beq.w	163b0 <dw1000_interrupt_ev_cb+0x2e0>
            if (cbs!=NULL && cbs->sleep_cb)
   16a4c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   16a4e:	2b00      	cmp	r3, #0
   16a50:	d0f8      	beq.n	16a44 <dw1000_interrupt_ev_cb+0x974>
                if (cbs->sleep_cb((struct uwb_dev*)inst,cbs)) continue;
   16a52:	4629      	mov	r1, r5
   16a54:	4620      	mov	r0, r4
   16a56:	4798      	blx	r3
   16a58:	e7f4      	b.n	16a44 <dw1000_interrupt_ev_cb+0x974>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
   16a5a:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   16a5e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   16a62:	f7f2 fe27 	bl	96b4 <os_eventq_put>
}
   16a66:	f7ff bb4f 	b.w	16108 <dw1000_interrupt_ev_cb+0x38>
   16a6a:	bf00      	nop
   16a6c:	f3af 8000 	nop.w
   16a70:	24119000 	.word	0x24119000
   16a74:	00000000 	.word	0x00000000

00016a78 <dw1000_calc_fppl>:
    if (diag->pacc_cnt == 0 ||
   16a78:	8a4a      	ldrh	r2, [r1, #18]
   16a7a:	b3e2      	cbz	r2, 16af6 <dw1000_calc_fppl+0x7e>
{
   16a7c:	b510      	push	{r4, lr}
   16a7e:	ed2d 8b02 	vpush	{d8}
        (!diag->fp_amp && !diag->fp_amp2 && !diag->fp_amp3)) {
   16a82:	890b      	ldrh	r3, [r1, #8]
    if (diag->pacc_cnt == 0 ||
   16a84:	b91b      	cbnz	r3, 16a8e <dw1000_calc_fppl+0x16>
        (!diag->fp_amp && !diag->fp_amp2 && !diag->fp_amp3)) {
   16a86:	898c      	ldrh	r4, [r1, #12]
   16a88:	b90c      	cbnz	r4, 16a8e <dw1000_calc_fppl+0x16>
   16a8a:	89cc      	ldrh	r4, [r1, #14]
   16a8c:	b3b4      	cbz	r4, 16afc <dw1000_calc_fppl+0x84>
    A = (inst->uwb_dev.config.prf == DWT_PRF_16M) ? DPL_FLOAT32_INIT(113.77f) : DPL_FLOAT32_INIT(121.74f);
   16a8e:	f890 050e 	ldrb.w	r0, [r0, #1294]	; 0x50e
   16a92:	2801      	cmp	r0, #1
   16a94:	d02c      	beq.n	16af0 <dw1000_calc_fppl+0x78>
   16a96:	ed9f 8a1b 	vldr	s16, [pc, #108]	; 16b04 <dw1000_calc_fppl+0x8c>
    N = (float)(diag->pacc_cnt);
   16a9a:	ee07 2a90 	vmov	s15, r2
   16a9e:	eeb8 0a67 	vcvt.f32.u32	s0, s15
    v = (float)(diag->fp_amp*diag->fp_amp) +
   16aa2:	fb03 f303 	mul.w	r3, r3, r3
   16aa6:	ee07 3a90 	vmov	s15, r3
   16aaa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
        (float)(diag->fp_amp2*diag->fp_amp2) +
   16aae:	898b      	ldrh	r3, [r1, #12]
   16ab0:	fb03 f303 	mul.w	r3, r3, r3
   16ab4:	ee07 3a90 	vmov	s15, r3
   16ab8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    v = (float)(diag->fp_amp*diag->fp_amp) +
   16abc:	ee36 7aa7 	vadd.f32	s14, s13, s15
        (float)(diag->fp_amp3*diag->fp_amp3);
   16ac0:	89cb      	ldrh	r3, [r1, #14]
   16ac2:	fb03 f303 	mul.w	r3, r3, r3
   16ac6:	ee07 3a90 	vmov	s15, r3
   16aca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    v = (float)(diag->fp_amp*diag->fp_amp) +
   16ace:	ee77 7a27 	vadd.f32	s15, s14, s15
    v /= N * N;
   16ad2:	ee20 0a00 	vmul.f32	s0, s0, s0
    fppl = 10.0f * log10f(v) - A;
   16ad6:	ee87 0a80 	vdiv.f32	s0, s15, s0
   16ada:	f00b fa37 	bl	21f4c <log10f>
   16ade:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
   16ae2:	ee20 0a27 	vmul.f32	s0, s0, s15
   16ae6:	ee30 0a48 	vsub.f32	s0, s0, s16
}
   16aea:	ecbd 8b02 	vpop	{d8}
   16aee:	bd10      	pop	{r4, pc}
    A = (inst->uwb_dev.config.prf == DWT_PRF_16M) ? DPL_FLOAT32_INIT(113.77f) : DPL_FLOAT32_INIT(121.74f);
   16af0:	ed9f 8a05 	vldr	s16, [pc, #20]	; 16b08 <dw1000_calc_fppl+0x90>
   16af4:	e7d1      	b.n	16a9a <dw1000_calc_fppl+0x22>
        return DPL_FLOAT32_NAN();
   16af6:	ed9f 0a05 	vldr	s0, [pc, #20]	; 16b0c <dw1000_calc_fppl+0x94>
}
   16afa:	4770      	bx	lr
        return DPL_FLOAT32_NAN();
   16afc:	ed9f 0a03 	vldr	s0, [pc, #12]	; 16b0c <dw1000_calc_fppl+0x94>
   16b00:	e7f3      	b.n	16aea <dw1000_calc_fppl+0x72>
   16b02:	bf00      	nop
   16b04:	42f37ae1 	.word	0x42f37ae1
   16b08:	42e38a3d 	.word	0x42e38a3d
   16b0c:	7fc00000 	.word	0x7fc00000

00016b10 <dw1000_get_fppl>:
{
   16b10:	b508      	push	{r3, lr}
    if (!inst->uwb_dev.config.rxdiag_enable) {
   16b12:	f890 352c 	ldrb.w	r3, [r0, #1324]	; 0x52c
   16b16:	f013 0f40 	tst.w	r3, #64	; 0x40
   16b1a:	d102      	bne.n	16b22 <dw1000_get_fppl+0x12>
        return DPL_FLOAT32_NAN();
   16b1c:	ed9f 0a03 	vldr	s0, [pc, #12]	; 16b2c <dw1000_get_fppl+0x1c>
}
   16b20:	bd08      	pop	{r3, pc}
    return dw1000_calc_fppl(inst, &inst->rxdiag);
   16b22:	f200 519c 	addw	r1, r0, #1436	; 0x59c
   16b26:	f7ff ffa7 	bl	16a78 <dw1000_calc_fppl>
   16b2a:	e7f9      	b.n	16b20 <dw1000_get_fppl+0x10>
   16b2c:	7fc00000 	.word	0x7fc00000

00016b30 <dw1000_calc_rssi>:
{
   16b30:	b508      	push	{r3, lr}
   16b32:	ed2d 8b02 	vpush	{d8}
    uint32_t pacc_cnt = diag->pacc_cnt;
   16b36:	8a4a      	ldrh	r2, [r1, #18]
    uint32_t cir_pwr = diag->cir_pwr;
   16b38:	8a0b      	ldrh	r3, [r1, #16]
    if (cir_pwr == 0 || pacc_cnt == 0) {
   16b3a:	b1eb      	cbz	r3, 16b78 <dw1000_calc_rssi+0x48>
   16b3c:	b1fa      	cbz	r2, 16b7e <dw1000_calc_rssi+0x4e>
    B = (inst->uwb_dev.config.prf == DWT_PRF_16M) ? DPL_FLOAT32_INIT(113.77f) : DPL_FLOAT32_INIT(121.74f);
   16b3e:	f890 150e 	ldrb.w	r1, [r0, #1294]	; 0x50e
   16b42:	2901      	cmp	r1, #1
   16b44:	d015      	beq.n	16b72 <dw1000_calc_rssi+0x42>
   16b46:	ed9f 8a0f 	vldr	s16, [pc, #60]	; 16b84 <dw1000_calc_rssi+0x54>
    A = cir_pwr * 0x20000/(pacc_cnt * pacc_cnt);
   16b4a:	045b      	lsls	r3, r3, #17
   16b4c:	fb02 f202 	mul.w	r2, r2, r2
   16b50:	fbb3 f3f2 	udiv	r3, r3, r2
   16b54:	ee00 3a10 	vmov	s0, r3
    rssi = 10.0f * log10f(A) - B;
   16b58:	eeb8 0a40 	vcvt.f32.u32	s0, s0
   16b5c:	f00b f9f6 	bl	21f4c <log10f>
   16b60:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
   16b64:	ee20 0a27 	vmul.f32	s0, s0, s15
   16b68:	ee30 0a48 	vsub.f32	s0, s0, s16
}
   16b6c:	ecbd 8b02 	vpop	{d8}
   16b70:	bd08      	pop	{r3, pc}
    B = (inst->uwb_dev.config.prf == DWT_PRF_16M) ? DPL_FLOAT32_INIT(113.77f) : DPL_FLOAT32_INIT(121.74f);
   16b72:	ed9f 8a05 	vldr	s16, [pc, #20]	; 16b88 <dw1000_calc_rssi+0x58>
   16b76:	e7e8      	b.n	16b4a <dw1000_calc_rssi+0x1a>
        return DPL_FLOAT32_NAN();
   16b78:	ed9f 0a04 	vldr	s0, [pc, #16]	; 16b8c <dw1000_calc_rssi+0x5c>
   16b7c:	e7f6      	b.n	16b6c <dw1000_calc_rssi+0x3c>
   16b7e:	ed9f 0a03 	vldr	s0, [pc, #12]	; 16b8c <dw1000_calc_rssi+0x5c>
   16b82:	e7f3      	b.n	16b6c <dw1000_calc_rssi+0x3c>
   16b84:	42f37ae1 	.word	0x42f37ae1
   16b88:	42e38a3d 	.word	0x42e38a3d
   16b8c:	7fc00000 	.word	0x7fc00000

00016b90 <dw1000_get_rssi>:
{
   16b90:	b508      	push	{r3, lr}
    if (!inst->uwb_dev.config.rxdiag_enable) {
   16b92:	f890 352c 	ldrb.w	r3, [r0, #1324]	; 0x52c
   16b96:	f013 0f40 	tst.w	r3, #64	; 0x40
   16b9a:	d102      	bne.n	16ba2 <dw1000_get_rssi+0x12>
        return DPL_FLOAT32_NAN();
   16b9c:	ed9f 0a03 	vldr	s0, [pc, #12]	; 16bac <dw1000_get_rssi+0x1c>
}
   16ba0:	bd08      	pop	{r3, pc}
    return dw1000_calc_rssi(inst, &inst->rxdiag);
   16ba2:	f200 519c 	addw	r1, r0, #1436	; 0x59c
   16ba6:	f7ff ffc3 	bl	16b30 <dw1000_calc_rssi>
   16baa:	e7f9      	b.n	16ba0 <dw1000_get_rssi+0x10>
   16bac:	7fc00000 	.word	0x7fc00000

00016bb0 <dw1000_estimate_los>:
    d = DPL_FLOAT32_FABS(DPL_FLOAT32_SUB(rssi, fppl));
   16bb0:	ee30 0a60 	vsub.f32	s0, s0, s1
   16bb4:	eeb0 0ac0 	vabs.f32	s0, s0
    if (d < DPL_FLOAT32_INIT(6.0f))  return DPL_FLOAT32_INIT(1.0f);
   16bb8:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
   16bbc:	eeb4 0ae7 	vcmpe.f32	s0, s15
   16bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16bc4:	d413      	bmi.n	16bee <dw1000_estimate_los+0x3e>
    if (d > DPL_FLOAT32_INIT(10.0f)) return DPL_FLOAT32_INIT(0.0f);
   16bc6:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
   16bca:	eeb4 0ae7 	vcmpe.f32	s0, s15
   16bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16bd2:	dc0f      	bgt.n	16bf4 <dw1000_estimate_los+0x44>
    los = DPL_FLOAT32_SUB(DPL_FLOAT32_INIT(1.0f),
   16bd4:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
   16bd8:	ee30 0a60 	vsub.f32	s0, s0, s1
   16bdc:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
   16be0:	ee20 0a27 	vmul.f32	s0, s0, s15
   16be4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   16be8:	ee37 0ac0 	vsub.f32	s0, s15, s0
    return los;
   16bec:	4770      	bx	lr
    if (d < DPL_FLOAT32_INIT(6.0f))  return DPL_FLOAT32_INIT(1.0f);
   16bee:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   16bf2:	4770      	bx	lr
    if (d > DPL_FLOAT32_INIT(10.0f)) return DPL_FLOAT32_INIT(0.0f);
   16bf4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 16bfc <dw1000_estimate_los+0x4c>
}
   16bf8:	4770      	bx	lr
   16bfa:	bf00      	nop
   16bfc:	00000000 	.word	0x00000000

00016c00 <dw1000_read_systime>:
inline uint64_t dw1000_read_systime(struct _dw1000_dev_instance_t * inst){
   16c00:	b508      	push	{r3, lr}
    uint64_t time = ((uint64_t) dw1000_read_reg(inst, SYS_TIME_ID, SYS_TIME_OFFSET, SYS_TIME_LEN)) & 0x0FFFFFFFFFFULL;
   16c02:	2305      	movs	r3, #5
   16c04:	2200      	movs	r2, #0
   16c06:	2106      	movs	r1, #6
   16c08:	f7fd fa08 	bl	1401c <dw1000_read_reg>
}
   16c0c:	b2c9      	uxtb	r1, r1
   16c0e:	bd08      	pop	{r3, pc}

00016c10 <dw1000_read_systime_lo>:
inline uint32_t dw1000_read_systime_lo(struct _dw1000_dev_instance_t * inst){
   16c10:	b508      	push	{r3, lr}
    uint32_t time = (uint32_t) dw1000_read_reg(inst, SYS_TIME_ID, SYS_TIME_OFFSET, sizeof(uint32_t));
   16c12:	2304      	movs	r3, #4
   16c14:	2200      	movs	r2, #0
   16c16:	2106      	movs	r1, #6
   16c18:	f7fd fa00 	bl	1401c <dw1000_read_reg>
}
   16c1c:	bd08      	pop	{r3, pc}

00016c1e <dw1000_read_rxtime>:
inline uint64_t dw1000_read_rxtime(struct _dw1000_dev_instance_t * inst){
   16c1e:	b508      	push	{r3, lr}
    uint64_t time = (uint64_t)  dw1000_read_reg(inst, RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET, RX_TIME_RX_STAMP_LEN) & 0x0FFFFFFFFFFULL;
   16c20:	2305      	movs	r3, #5
   16c22:	2200      	movs	r2, #0
   16c24:	2115      	movs	r1, #21
   16c26:	f7fd f9f9 	bl	1401c <dw1000_read_reg>
}
   16c2a:	b2c9      	uxtb	r1, r1
   16c2c:	bd08      	pop	{r3, pc}

00016c2e <dw1000_read_rxtime_lo>:
inline uint32_t dw1000_read_rxtime_lo(struct _dw1000_dev_instance_t * inst){
   16c2e:	b508      	push	{r3, lr}
    uint64_t time = (uint32_t) dw1000_read_reg(inst, RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET, sizeof(uint32_t));
   16c30:	2304      	movs	r3, #4
   16c32:	2200      	movs	r2, #0
   16c34:	2115      	movs	r1, #21
   16c36:	f7fd f9f1 	bl	1401c <dw1000_read_reg>
}
   16c3a:	bd08      	pop	{r3, pc}

00016c3c <dw1000_read_txtime>:
inline uint64_t dw1000_read_txtime(struct _dw1000_dev_instance_t * inst){
   16c3c:	b508      	push	{r3, lr}
    uint64_t time = (uint64_t) dw1000_read_reg(inst, TX_TIME_ID, TX_TIME_TX_STAMP_OFFSET, TX_TIME_TX_STAMP_LEN) & 0x0FFFFFFFFFFULL;
   16c3e:	2305      	movs	r3, #5
   16c40:	2200      	movs	r2, #0
   16c42:	2117      	movs	r1, #23
   16c44:	f7fd f9ea 	bl	1401c <dw1000_read_reg>
    return time;
}
   16c48:	b2c9      	uxtb	r1, r1
   16c4a:	bd08      	pop	{r3, pc}

00016c4c <dw1000_read_txtime_lo>:
 *
 * @param inst  Pointer to _dw1000_dev_instance_t.
 *
 * @return time
 */
inline uint32_t dw1000_read_txtime_lo(struct _dw1000_dev_instance_t * inst){
   16c4c:	b508      	push	{r3, lr}
    uint32_t time = (uint32_t) dw1000_read_reg(inst, TX_TIME_ID, TX_TIME_TX_STAMP_OFFSET, sizeof(uint32_t));
   16c4e:	2304      	movs	r3, #4
   16c50:	2200      	movs	r2, #0
   16c52:	2117      	movs	r1, #23
   16c54:	f7fd f9e2 	bl	1401c <dw1000_read_reg>
    return time;
}
   16c58:	bd08      	pop	{r3, pc}
	...

00016c5c <dw1000_configcwmode>:
 * @param chan - specifies the operating channel (e.g. 1, 2, 3, 4, 5, 6 or 7)
 *
 */
void
dw1000_configcwmode(struct _dw1000_dev_instance_t * inst, uint8_t chan)
{
   16c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   16c5e:	b085      	sub	sp, #20
    int rc;
    if ((chan < 1) || (chan > 7) || (6 == chan)) {
   16c60:	1e4b      	subs	r3, r1, #1
   16c62:	b2db      	uxtb	r3, r3
   16c64:	2b06      	cmp	r3, #6
   16c66:	d879      	bhi.n	16d5c <dw1000_configcwmode+0x100>
   16c68:	4604      	mov	r4, r0
   16c6a:	460d      	mov	r5, r1
   16c6c:	2906      	cmp	r1, #6
   16c6e:	d075      	beq.n	16d5c <dw1000_configcwmode+0x100>
    }

    /* Lower the speed of the SPI bus before activating CW mode.
     * This is needed because we disable the hiher sysclk and thus
     * dw1000 only support < 2Mbit spi */
    inst->spi_settings.baudrate = inst->spi_baudrate_low;
   16c70:	f8d0 3558 	ldr.w	r3, [r0, #1368]	; 0x558
   16c74:	f8c0 3598 	str.w	r3, [r0, #1432]	; 0x598
    rc = hal_spi_disable(inst->spi_num);
   16c78:	f890 055c 	ldrb.w	r0, [r0, #1372]	; 0x55c
   16c7c:	f001 fb44 	bl	18308 <hal_spi_disable>
    assert(rc == 0);
   16c80:	2800      	cmp	r0, #0
   16c82:	d171      	bne.n	16d68 <dw1000_configcwmode+0x10c>
    rc = hal_spi_config(inst->spi_num, &inst->spi_settings);
   16c84:	f204 5194 	addw	r1, r4, #1428	; 0x594
   16c88:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   16c8c:	f001 fafa 	bl	18284 <hal_spi_config>
    assert(rc == 0);
   16c90:	2800      	cmp	r0, #0
   16c92:	d16f      	bne.n	16d74 <dw1000_configcwmode+0x118>
    rc = hal_spi_enable(inst->spi_num);
   16c94:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   16c98:	f001 fb10 	bl	182bc <hal_spi_enable>
    assert(rc == 0);
   16c9c:	2800      	cmp	r0, #0
   16c9e:	d16f      	bne.n	16d80 <dw1000_configcwmode+0x124>

    /* disable TX/RX RF block sequencing (needed for cw frame mode) */
    dw1000_phy_disable_sequencing(inst);
   16ca0:	4620      	mov	r0, r4
   16ca2:	f000 f8ee 	bl	16e82 <dw1000_phy_disable_sequencing>

    /* config RF pll (for a given channel) */
    /* configure PLL2/RF PLL block CFG */
    dw1000_write_reg(inst, FS_CTRL_ID, FS_PLLCFG_OFFSET,
                     fs_pll_cfg[chan_idx[chan]], sizeof(uint32_t));
   16ca6:	4b39      	ldr	r3, [pc, #228]	; (16d8c <dw1000_configcwmode+0x130>)
   16ca8:	5d5d      	ldrb	r5, [r3, r5]
   16caa:	4b39      	ldr	r3, [pc, #228]	; (16d90 <dw1000_configcwmode+0x134>)
   16cac:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    dw1000_write_reg(inst, FS_CTRL_ID, FS_PLLCFG_OFFSET,
   16cb0:	2704      	movs	r7, #4
   16cb2:	9702      	str	r7, [sp, #8]
   16cb4:	2600      	movs	r6, #0
   16cb6:	9300      	str	r3, [sp, #0]
   16cb8:	9601      	str	r6, [sp, #4]
   16cba:	2207      	movs	r2, #7
   16cbc:	212b      	movs	r1, #43	; 0x2b
   16cbe:	4620      	mov	r0, r4
   16cc0:	f7fd fa1c 	bl	140fc <dw1000_write_reg>

    /* Configure RF TX blocks (for specified channel and prf) */
    /* Config RF TX control */
    dw1000_write_reg(inst, RF_CONF_ID, RF_TXCTRL_OFFSET,
                     tx_config[chan_idx[chan]], sizeof(uint32_t));
   16cc4:	4b33      	ldr	r3, [pc, #204]	; (16d94 <dw1000_configcwmode+0x138>)
   16cc6:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    dw1000_write_reg(inst, RF_CONF_ID, RF_TXCTRL_OFFSET,
   16cca:	9702      	str	r7, [sp, #8]
   16ccc:	9300      	str	r3, [sp, #0]
   16cce:	9601      	str	r6, [sp, #4]
   16cd0:	220c      	movs	r2, #12
   16cd2:	2128      	movs	r1, #40	; 0x28
   16cd4:	4620      	mov	r0, r4
   16cd6:	f7fd fa11 	bl	140fc <dw1000_write_reg>

    /* enable RF PLL */
    dw1000_write_reg(inst, RF_CONF_ID, 0, RF_CONF_TXPLLPOWEN_MASK, sizeof(uint32_t));
   16cda:	9702      	str	r7, [sp, #8]
   16cdc:	f44f 12ff 	mov.w	r2, #2088960	; 0x1fe000
   16ce0:	2300      	movs	r3, #0
   16ce2:	e9cd 2300 	strd	r2, r3, [sp]
   16ce6:	4632      	mov	r2, r6
   16ce8:	2128      	movs	r1, #40	; 0x28
   16cea:	4620      	mov	r0, r4
   16cec:	f7fd fa06 	bl	140fc <dw1000_write_reg>
    dw1000_write_reg(inst, RF_CONF_ID, 0, RF_CONF_TXALLEN_MASK, sizeof(uint32_t));
   16cf0:	9702      	str	r7, [sp, #8]
   16cf2:	4a29      	ldr	r2, [pc, #164]	; (16d98 <dw1000_configcwmode+0x13c>)
   16cf4:	2300      	movs	r3, #0
   16cf6:	e9cd 2300 	strd	r2, r3, [sp]
   16cfa:	4632      	mov	r2, r6
   16cfc:	2128      	movs	r1, #40	; 0x28
   16cfe:	4620      	mov	r0, r4
   16d00:	f7fd f9fc 	bl	140fc <dw1000_write_reg>

    /* configure TX clocks */
    dw1000_write_reg(inst, PMSC_ID,PMSC_CTRL0_OFFSET, 0x22, 1);
   16d04:	2501      	movs	r5, #1
   16d06:	9502      	str	r5, [sp, #8]
   16d08:	2222      	movs	r2, #34	; 0x22
   16d0a:	2300      	movs	r3, #0
   16d0c:	e9cd 2300 	strd	r2, r3, [sp]
   16d10:	4632      	mov	r2, r6
   16d12:	2136      	movs	r1, #54	; 0x36
   16d14:	4620      	mov	r0, r4
   16d16:	f7fd f9f1 	bl	140fc <dw1000_write_reg>
    dw1000_write_reg(inst, PMSC_ID, 0x1, 0x07, 1);
   16d1a:	9502      	str	r5, [sp, #8]
   16d1c:	2207      	movs	r2, #7
   16d1e:	2300      	movs	r3, #0
   16d20:	e9cd 2300 	strd	r2, r3, [sp]
   16d24:	462a      	mov	r2, r5
   16d26:	2136      	movs	r1, #54	; 0x36
   16d28:	4620      	mov	r0, r4
   16d2a:	f7fd f9e7 	bl	140fc <dw1000_write_reg>

    /* disable fine grain TX seq */
    dw1000_write_reg(inst, PMSC_ID, PMSC_TXFINESEQ_OFFSET,
   16d2e:	2302      	movs	r3, #2
   16d30:	9302      	str	r3, [sp, #8]
   16d32:	2200      	movs	r2, #0
   16d34:	2300      	movs	r3, #0
   16d36:	e9cd 2300 	strd	r2, r3, [sp]
   16d3a:	2226      	movs	r2, #38	; 0x26
   16d3c:	2136      	movs	r1, #54	; 0x36
   16d3e:	4620      	mov	r0, r4
   16d40:	f7fd f9dc 	bl	140fc <dw1000_write_reg>
                     PMSC_TXFINESEQ_DISABLE, sizeof(uint16_t));

    /* configure CW mode */
    dw1000_write_reg(inst, TX_CAL_ID, TC_PGTEST_OFFSET,
   16d44:	9502      	str	r5, [sp, #8]
   16d46:	2213      	movs	r2, #19
   16d48:	2300      	movs	r3, #0
   16d4a:	e9cd 2300 	strd	r2, r3, [sp]
   16d4e:	220c      	movs	r2, #12
   16d50:	212a      	movs	r1, #42	; 0x2a
   16d52:	4620      	mov	r0, r4
   16d54:	f7fd f9d2 	bl	140fc <dw1000_write_reg>
                     TC_PGTEST_CW, TC_PGTEST_LEN);
}
   16d58:	b005      	add	sp, #20
   16d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        assert(0);
   16d5c:	2300      	movs	r3, #0
   16d5e:	461a      	mov	r2, r3
   16d60:	4619      	mov	r1, r3
   16d62:	4618      	mov	r0, r3
   16d64:	f7f2 f972 	bl	904c <__assert_func>
    assert(rc == 0);
   16d68:	2300      	movs	r3, #0
   16d6a:	461a      	mov	r2, r3
   16d6c:	4619      	mov	r1, r3
   16d6e:	4618      	mov	r0, r3
   16d70:	f7f2 f96c 	bl	904c <__assert_func>
    assert(rc == 0);
   16d74:	2300      	movs	r3, #0
   16d76:	461a      	mov	r2, r3
   16d78:	4619      	mov	r1, r3
   16d7a:	4618      	mov	r0, r3
   16d7c:	f7f2 f966 	bl	904c <__assert_func>
    assert(rc == 0);
   16d80:	2300      	movs	r3, #0
   16d82:	461a      	mov	r2, r3
   16d84:	4619      	mov	r1, r3
   16d86:	4618      	mov	r0, r3
   16d88:	f7f2 f960 	bl	904c <__assert_func>
   16d8c:	00024034 	.word	0x00024034
   16d90:	00024064 	.word	0x00024064
   16d94:	00024104 	.word	0x00024104
   16d98:	005fff00 	.word	0x005fff00

00016d9c <dw1000_phy_sysclk_XTAL>:
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_sysclk_XTAL(struct _dw1000_dev_instance_t * inst)
{
   16d9c:	b510      	push	{r4, lr}
   16d9e:	b084      	sub	sp, #16
   16da0:	4604      	mov	r4, r0
    uint8_t reg = (uint8_t) dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint8_t));
   16da2:	2301      	movs	r3, #1
   16da4:	2200      	movs	r2, #0
   16da6:	2136      	movs	r1, #54	; 0x36
   16da8:	f7fd f938 	bl	1401c <dw1000_read_reg>
    reg &= (uint8_t)~PMSC_CTRL0_SYSCLKS_19M & (uint8_t)~PMSC_CTRL0_SYSCLKS_125M;
   16dac:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
    reg |= (uint8_t) PMSC_CTRL0_SYSCLKS_19M;
   16db0:	f043 0301 	orr.w	r3, r3, #1
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, reg, sizeof(uint8_t));
   16db4:	2201      	movs	r2, #1
   16db6:	9202      	str	r2, [sp, #8]
   16db8:	2200      	movs	r2, #0
   16dba:	9300      	str	r3, [sp, #0]
   16dbc:	9201      	str	r2, [sp, #4]
   16dbe:	2136      	movs	r1, #54	; 0x36
   16dc0:	4620      	mov	r0, r4
   16dc2:	f7fd f99b 	bl	140fc <dw1000_write_reg>
}
   16dc6:	b004      	add	sp, #16
   16dc8:	bd10      	pop	{r4, pc}

00016dca <dw1000_phy_sysclk_PLL>:
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_sysclk_PLL(struct _dw1000_dev_instance_t * inst)
{
   16dca:	b510      	push	{r4, lr}
   16dcc:	b084      	sub	sp, #16
   16dce:	4604      	mov	r4, r0
    uint8_t reg = (uint8_t) dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint8_t));
   16dd0:	2301      	movs	r3, #1
   16dd2:	2200      	movs	r2, #0
   16dd4:	2136      	movs	r1, #54	; 0x36
   16dd6:	f7fd f921 	bl	1401c <dw1000_read_reg>
    reg &= (uint8_t)~PMSC_CTRL0_SYSCLKS_19M & (uint8_t)~PMSC_CTRL0_SYSCLKS_125M;
   16dda:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
    reg |= (uint8_t) PMSC_CTRL0_SYSCLKS_125M;
   16dde:	f043 0302 	orr.w	r3, r3, #2
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, reg, sizeof(uint8_t));
   16de2:	2201      	movs	r2, #1
   16de4:	9202      	str	r2, [sp, #8]
   16de6:	2200      	movs	r2, #0
   16de8:	9300      	str	r3, [sp, #0]
   16dea:	9201      	str	r2, [sp, #4]
   16dec:	2136      	movs	r1, #54	; 0x36
   16dee:	4620      	mov	r0, r4
   16df0:	f7fd f984 	bl	140fc <dw1000_write_reg>
}
   16df4:	b004      	add	sp, #16
   16df6:	bd10      	pop	{r4, pc}

00016df8 <dw1000_phy_txclk_PLL>:
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_txclk_PLL(struct _dw1000_dev_instance_t * inst)
{
   16df8:	b510      	push	{r4, lr}
   16dfa:	b084      	sub	sp, #16
   16dfc:	4604      	mov	r4, r0
    uint8_t reg = (uint8_t) dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint8_t));
   16dfe:	2301      	movs	r3, #1
   16e00:	2200      	movs	r2, #0
   16e02:	2136      	movs	r1, #54	; 0x36
   16e04:	f7fd f90a 	bl	1401c <dw1000_read_reg>
    reg &= (uint8_t)~PMSC_CTRL0_TXCLKS_19M & (uint8_t)~PMSC_CTRL0_TXCLKS_125M;
   16e08:	f000 03cf 	and.w	r3, r0, #207	; 0xcf
    reg |= (uint8_t) PMSC_CTRL0_TXCLKS_125M;
   16e0c:	f043 0320 	orr.w	r3, r3, #32
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, reg, sizeof(uint8_t));
   16e10:	2201      	movs	r2, #1
   16e12:	9202      	str	r2, [sp, #8]
   16e14:	2200      	movs	r2, #0
   16e16:	9300      	str	r3, [sp, #0]
   16e18:	9201      	str	r2, [sp, #4]
   16e1a:	2136      	movs	r1, #54	; 0x36
   16e1c:	4620      	mov	r0, r4
   16e1e:	f7fd f96d 	bl	140fc <dw1000_write_reg>
}
   16e22:	b004      	add	sp, #16
   16e24:	bd10      	pop	{r4, pc}

00016e26 <dw1000_phy_sysclk_LDE>:
 * API to enable running of the LDE algorithm.
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_sysclk_LDE(struct _dw1000_dev_instance_t * inst){
   16e26:	b530      	push	{r4, r5, lr}
   16e28:	b085      	sub	sp, #20
   16e2a:	4604      	mov	r4, r0
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, 0x01, sizeof(uint8_t));
   16e2c:	2501      	movs	r5, #1
   16e2e:	9502      	str	r5, [sp, #8]
   16e30:	2201      	movs	r2, #1
   16e32:	2300      	movs	r3, #0
   16e34:	e9cd 2300 	strd	r2, r3, [sp]
   16e38:	2200      	movs	r2, #0
   16e3a:	2136      	movs	r1, #54	; 0x36
   16e3c:	f7fd f95e 	bl	140fc <dw1000_write_reg>
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET + 1 , 0x03, sizeof(uint8_t));
   16e40:	9502      	str	r5, [sp, #8]
   16e42:	2203      	movs	r2, #3
   16e44:	2300      	movs	r3, #0
   16e46:	e9cd 2300 	strd	r2, r3, [sp]
   16e4a:	462a      	mov	r2, r5
   16e4c:	2136      	movs	r1, #54	; 0x36
   16e4e:	4620      	mov	r0, r4
   16e50:	f7fd f954 	bl	140fc <dw1000_write_reg>
}
   16e54:	b005      	add	sp, #20
   16e56:	bd30      	pop	{r4, r5, pc}

00016e58 <dw1000_phy_sysclk_SEQ>:
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_sysclk_SEQ(struct _dw1000_dev_instance_t * inst)
{
   16e58:	b510      	push	{r4, lr}
   16e5a:	b084      	sub	sp, #16
   16e5c:	4604      	mov	r4, r0
    uint8_t reg = (uint8_t) dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint8_t));
   16e5e:	2301      	movs	r3, #1
   16e60:	2200      	movs	r2, #0
   16e62:	2136      	movs	r1, #54	; 0x36
   16e64:	f7fd f8da 	bl	1401c <dw1000_read_reg>
    reg &= (uint8_t)~PMSC_CTRL0_SYSCLKS_19M & (uint8_t)~PMSC_CTRL0_SYSCLKS_125M;
   16e68:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, reg, sizeof(uint8_t));
   16e6c:	2301      	movs	r3, #1
   16e6e:	9302      	str	r3, [sp, #8]
   16e70:	2200      	movs	r2, #0
   16e72:	9000      	str	r0, [sp, #0]
   16e74:	9201      	str	r2, [sp, #4]
   16e76:	2136      	movs	r1, #54	; 0x36
   16e78:	4620      	mov	r0, r4
   16e7a:	f7fd f93f 	bl	140fc <dw1000_write_reg>
}
   16e7e:	b004      	add	sp, #16
   16e80:	bd10      	pop	{r4, pc}

00016e82 <dw1000_phy_disable_sequencing>:
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_disable_sequencing(struct _dw1000_dev_instance_t * inst)
{
   16e82:	b510      	push	{r4, lr}
   16e84:	b084      	sub	sp, #16
   16e86:	4604      	mov	r4, r0
    dw1000_phy_sysclk_XTAL(inst);
   16e88:	f7ff ff88 	bl	16d9c <dw1000_phy_sysclk_XTAL>
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE, sizeof(uint16_t)); // Disable PMSC ctrl of RF and RX clk blocks
   16e8c:	2302      	movs	r3, #2
   16e8e:	9302      	str	r3, [sp, #8]
   16e90:	2200      	movs	r2, #0
   16e92:	2300      	movs	r3, #0
   16e94:	e9cd 2300 	strd	r2, r3, [sp]
   16e98:	2204      	movs	r2, #4
   16e9a:	2136      	movs	r1, #54	; 0x36
   16e9c:	4620      	mov	r0, r4
   16e9e:	f7fd f92d 	bl	140fc <dw1000_write_reg>
}
   16ea2:	b004      	add	sp, #16
   16ea4:	bd10      	pop	{r4, pc}

00016ea6 <dw1000_phy_config_lde>:
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @param prf   This is the PRF index (0 or 1) 0 corresponds to 16 and 1 to 64 PRF.
 * @return void
 */
void dw1000_phy_config_lde(struct _dw1000_dev_instance_t * inst, int prfIndex)
{
   16ea6:	b530      	push	{r4, r5, lr}
   16ea8:	b085      	sub	sp, #20
   16eaa:	4604      	mov	r4, r0
   16eac:	460d      	mov	r5, r1
    dw1000_write_reg(inst, LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1, sizeof(uint8_t)); // 8-bit configuration register
   16eae:	2301      	movs	r3, #1
   16eb0:	9302      	str	r3, [sp, #8]
   16eb2:	226d      	movs	r2, #109	; 0x6d
   16eb4:	2300      	movs	r3, #0
   16eb6:	e9cd 2300 	strd	r2, r3, [sp]
   16eba:	f640 0206 	movw	r2, #2054	; 0x806
   16ebe:	212e      	movs	r1, #46	; 0x2e
   16ec0:	f7fd f91c 	bl	140fc <dw1000_write_reg>

    if(prfIndex)
   16ec4:	b175      	cbz	r5, 16ee4 <dw1000_phy_config_lde+0x3e>
        dw1000_write_reg(inst, LDE_IF_ID, LDE_CFG2_OFFSET, LDE_PARAM3_64, sizeof(uint16_t)); // 16-bit LDE configuration tuning register
   16ec6:	2302      	movs	r3, #2
   16ec8:	9302      	str	r3, [sp, #8]
   16eca:	f240 6207 	movw	r2, #1543	; 0x607
   16ece:	2300      	movs	r3, #0
   16ed0:	e9cd 2300 	strd	r2, r3, [sp]
   16ed4:	f641 0206 	movw	r2, #6150	; 0x1806
   16ed8:	212e      	movs	r1, #46	; 0x2e
   16eda:	4620      	mov	r0, r4
   16edc:	f7fd f90e 	bl	140fc <dw1000_write_reg>
    else
        dw1000_write_reg(inst, LDE_IF_ID, LDE_CFG2_OFFSET, LDE_PARAM3_16, sizeof(uint16_t));
}
   16ee0:	b005      	add	sp, #20
   16ee2:	bd30      	pop	{r4, r5, pc}
        dw1000_write_reg(inst, LDE_IF_ID, LDE_CFG2_OFFSET, LDE_PARAM3_16, sizeof(uint16_t));
   16ee4:	2302      	movs	r3, #2
   16ee6:	9302      	str	r3, [sp, #8]
   16ee8:	f241 6207 	movw	r2, #5639	; 0x1607
   16eec:	2300      	movs	r3, #0
   16eee:	e9cd 2300 	strd	r2, r3, [sp]
   16ef2:	f641 0206 	movw	r2, #6150	; 0x1806
   16ef6:	212e      	movs	r1, #46	; 0x2e
   16ef8:	4620      	mov	r0, r4
   16efa:	f7fd f8ff 	bl	140fc <dw1000_write_reg>
}
   16efe:	e7ef      	b.n	16ee0 <dw1000_phy_config_lde+0x3a>

00016f00 <dw1000_phy_config_txrf>:
 * @param inst      Pointer to dw1000_dev_instance_t.
 * @param config    Pointer to dw1000_dev_txrf_config_t.
 * @return void
 */
void dw1000_phy_config_txrf(struct _dw1000_dev_instance_t * inst, struct uwb_dev_txrf_config *config)
{
   16f00:	b570      	push	{r4, r5, r6, lr}
   16f02:	b084      	sub	sp, #16
   16f04:	4605      	mov	r5, r0
   16f06:	460c      	mov	r4, r1
    // Configure RF TX PG_DELAY
    dw1000_write_reg(inst, TX_CAL_ID, TC_PGDELAY_OFFSET, config->PGdly, sizeof(uint8_t));
   16f08:	780b      	ldrb	r3, [r1, #0]
   16f0a:	2201      	movs	r2, #1
   16f0c:	9202      	str	r2, [sp, #8]
   16f0e:	2600      	movs	r6, #0
   16f10:	9300      	str	r3, [sp, #0]
   16f12:	9601      	str	r6, [sp, #4]
   16f14:	220b      	movs	r2, #11
   16f16:	212a      	movs	r1, #42	; 0x2a
   16f18:	f7fd f8f0 	bl	140fc <dw1000_write_reg>
    // Configure TX power
    dw1000_write_reg(inst, TX_POWER_ID, 0, config->power, sizeof(uint32_t));
   16f1c:	6863      	ldr	r3, [r4, #4]
   16f1e:	2204      	movs	r2, #4
   16f20:	9202      	str	r2, [sp, #8]
   16f22:	9300      	str	r3, [sp, #0]
   16f24:	9601      	str	r6, [sp, #4]
   16f26:	4632      	mov	r2, r6
   16f28:	211e      	movs	r1, #30
   16f2a:	4628      	mov	r0, r5
   16f2c:	f7fd f8e6 	bl	140fc <dw1000_write_reg>
}
   16f30:	b004      	add	sp, #16
   16f32:	bd70      	pop	{r4, r5, r6, pc}

00016f34 <dw1000_phy_init>:
{
   16f34:	b5f0      	push	{r4, r5, r6, r7, lr}
   16f36:	b085      	sub	sp, #20
   16f38:	4604      	mov	r4, r0
    if (txrf_config == NULL)
   16f3a:	2900      	cmp	r1, #0
   16f3c:	f000 80af 	beq.w	1709e <dw1000_phy_init+0x16a>
   16f40:	460e      	mov	r6, r1
        memcpy(&inst->uwb_dev.config.txrf, txrf_config, sizeof(struct uwb_dev_txrf_config));
   16f42:	680a      	ldr	r2, [r1, #0]
   16f44:	684b      	ldr	r3, [r1, #4]
   16f46:	f8c0 2524 	str.w	r2, [r0, #1316]	; 0x524
   16f4a:	f8c0 3528 	str.w	r3, [r0, #1320]	; 0x528
    dw1000_softreset(inst);
   16f4e:	4620      	mov	r0, r4
   16f50:	f7fd f973 	bl	1423a <dw1000_softreset>
    dw1000_phy_sysclk_XTAL(inst);
   16f54:	4620      	mov	r0, r4
   16f56:	f7ff ff21 	bl	16d9c <dw1000_phy_sysclk_XTAL>
    dw1000_gpio_config_leds(inst, DWT_LEDS_ENABLE | DWT_LEDS_INIT_BLINK);
   16f5a:	2106      	movs	r1, #6
   16f5c:	4620      	mov	r0, r4
   16f5e:	f000 fdf3 	bl	17b48 <dw1000_gpio_config_leds>
    reg = dw1000_read_reg(inst, EXT_SYNC_ID, EC_CTRL_OFFSET, sizeof(uint8_t));
   16f62:	2301      	movs	r3, #1
   16f64:	2200      	movs	r2, #0
   16f66:	2124      	movs	r1, #36	; 0x24
   16f68:	4620      	mov	r0, r4
   16f6a:	f7fd f857 	bl	1401c <dw1000_read_reg>
   16f6e:	b2c0      	uxtb	r0, r0
    reg |= EC_CTRL_PLLLCK;
   16f70:	f040 0004 	orr.w	r0, r0, #4
    dw1000_write_reg(inst, EXT_SYNC_ID, EC_CTRL_OFFSET, reg, sizeof(uint8_t));
   16f74:	2301      	movs	r3, #1
   16f76:	9302      	str	r3, [sp, #8]
   16f78:	2200      	movs	r2, #0
   16f7a:	9000      	str	r0, [sp, #0]
   16f7c:	9201      	str	r2, [sp, #4]
   16f7e:	2124      	movs	r1, #36	; 0x24
   16f80:	4620      	mov	r0, r4
   16f82:	f7fd f8bb 	bl	140fc <dw1000_write_reg>
    otp_addr = (uint32_t) _dw1000_otp_read(inst, OTP_XTRIM_ADDRESS) & 0xffff;    // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
   16f86:	211e      	movs	r1, #30
   16f88:	4620      	mov	r0, r4
   16f8a:	f000 fe46 	bl	17c1a <_dw1000_otp_read>
   16f8e:	b285      	uxth	r5, r0
    inst->otp_rev = (otp_addr >> 8) & 0xff;                                               // OTP revision is next byte
   16f90:	f3c0 2007 	ubfx	r0, r0, #8, #8
   16f94:	f8a4 057c 	strh.w	r0, [r4, #1404]	; 0x57c
    ldo_tune = _dw1000_otp_read(inst, OTP_LDOTUNE_ADDRESS);
   16f98:	2104      	movs	r1, #4
   16f9a:	4620      	mov	r0, r4
   16f9c:	f000 fe3d 	bl	17c1a <_dw1000_otp_read>
    if((ldo_tune & 0xFF) != 0){
   16fa0:	f010 0fff 	tst.w	r0, #255	; 0xff
   16fa4:	d17e      	bne.n	170a4 <dw1000_phy_init+0x170>
    inst->part_id = _dw1000_otp_read(inst, OTP_PARTID_ADDRESS);
   16fa6:	2106      	movs	r1, #6
   16fa8:	4620      	mov	r0, r4
   16faa:	f000 fe36 	bl	17c1a <_dw1000_otp_read>
   16fae:	f8c4 0574 	str.w	r0, [r4, #1396]	; 0x574
    inst->lot_id = _dw1000_otp_read(inst, OTP_LOTID_ADDRESS);
   16fb2:	2107      	movs	r1, #7
   16fb4:	4620      	mov	r0, r4
   16fb6:	f000 fe30 	bl	17c1a <_dw1000_otp_read>
   16fba:	f8c4 0578 	str.w	r0, [r4, #1400]	; 0x578
    inst->otp_vbat = _dw1000_otp_read(inst, OTP_VBAT_ADDRESS);
   16fbe:	2108      	movs	r1, #8
   16fc0:	4620      	mov	r0, r4
   16fc2:	f000 fe2a 	bl	17c1a <_dw1000_otp_read>
   16fc6:	f884 057e 	strb.w	r0, [r4, #1406]	; 0x57e
    inst->otp_temp = _dw1000_otp_read(inst, OTP_VTEMP_ADDRESS);
   16fca:	2109      	movs	r1, #9
   16fcc:	4620      	mov	r0, r4
   16fce:	f000 fe24 	bl	17c1a <_dw1000_otp_read>
   16fd2:	f884 057f 	strb.w	r0, [r4, #1407]	; 0x57f
    inst->otp_xtal_trim = otp_addr & 0x1F;
   16fd6:	f005 051f 	and.w	r5, r5, #31
   16fda:	f884 5580 	strb.w	r5, [r4, #1408]	; 0x580
    if (inst->otp_xtal_trim && (inst->uwb_dev.config.rx.xtalTrim == 0xff)) {
   16fde:	b11d      	cbz	r5, 16fe8 <dw1000_phy_init+0xb4>
   16fe0:	f894 251e 	ldrb.w	r2, [r4, #1310]	; 0x51e
   16fe4:	2aff      	cmp	r2, #255	; 0xff
   16fe6:	d06f      	beq.n	170c8 <dw1000_phy_init+0x194>
    reg = (3 << 5) | (inst->uwb_dev.config.rx.xtalTrim & FS_XTALT_MASK);
   16fe8:	f994 351e 	ldrsb.w	r3, [r4, #1310]	; 0x51e
   16fec:	f003 031f 	and.w	r3, r3, #31
   16ff0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    dw1000_write_reg(inst, FS_CTRL_ID, FS_XTALT_OFFSET, reg, sizeof(uint8_t));
   16ff4:	2201      	movs	r2, #1
   16ff6:	9202      	str	r2, [sp, #8]
   16ff8:	9300      	str	r3, [sp, #0]
   16ffa:	2300      	movs	r3, #0
   16ffc:	9301      	str	r3, [sp, #4]
   16ffe:	220e      	movs	r2, #14
   17000:	212b      	movs	r1, #43	; 0x2b
   17002:	4620      	mov	r0, r4
   17004:	f7fd f87a 	bl	140fc <dw1000_write_reg>
    if(inst->uwb_dev.config.LDE_enable)
   17008:	f894 352d 	ldrb.w	r3, [r4, #1325]	; 0x52d
   1700c:	f013 0f04 	tst.w	r3, #4
   17010:	d15d      	bne.n	170ce <dw1000_phy_init+0x19a>
    dw1000_phy_sysclk_SEQ(inst);    // Enable clocks for sequencing
   17012:	4620      	mov	r0, r4
   17014:	f7ff ff20 	bl	16e58 <dw1000_phy_sysclk_SEQ>
    reg = dw1000_read_reg(inst, AON_ID, AON_CFG1_OFFSET, sizeof(uint8_t));
   17018:	2301      	movs	r3, #1
   1701a:	220a      	movs	r2, #10
   1701c:	212c      	movs	r1, #44	; 0x2c
   1701e:	4620      	mov	r0, r4
   17020:	f7fc fffc 	bl	1401c <dw1000_read_reg>
    reg |= ~AON_CFG1_SMXX;
   17024:	f060 0002 	orn	r0, r0, #2
   17028:	b2c0      	uxtb	r0, r0
    dw1000_write_reg(inst, AON_ID, AON_CFG1_OFFSET, reg, sizeof(uint8_t));
   1702a:	2301      	movs	r3, #1
   1702c:	9302      	str	r3, [sp, #8]
   1702e:	2500      	movs	r5, #0
   17030:	9000      	str	r0, [sp, #0]
   17032:	9501      	str	r5, [sp, #4]
   17034:	220a      	movs	r2, #10
   17036:	212c      	movs	r1, #44	; 0x2c
   17038:	4620      	mov	r0, r4
   1703a:	f7fd f85f 	bl	140fc <dw1000_write_reg>
    dw1000_write_reg(inst, AON_ID, AON_WCFG_OFFSET , AON_WCFG_ONW_RADC, sizeof(uint16_t));
   1703e:	2702      	movs	r7, #2
   17040:	9702      	str	r7, [sp, #8]
   17042:	2201      	movs	r2, #1
   17044:	2300      	movs	r3, #0
   17046:	e9cd 2300 	strd	r2, r3, [sp]
   1704a:	462a      	mov	r2, r5
   1704c:	212c      	movs	r1, #44	; 0x2c
   1704e:	4620      	mov	r0, r4
   17050:	f7fd f854 	bl	140fc <dw1000_write_reg>
    dw1000_phy_set_rx_antennadelay(inst, inst->uwb_dev.rx_antenna_delay);
   17054:	f8b4 34cc 	ldrh.w	r3, [r4, #1228]	; 0x4cc
   17058:	9702      	str	r7, [sp, #8]
   1705a:	9300      	str	r3, [sp, #0]
   1705c:	9501      	str	r5, [sp, #4]
   1705e:	f641 0204 	movw	r2, #6148	; 0x1804
   17062:	212e      	movs	r1, #46	; 0x2e
   17064:	4620      	mov	r0, r4
   17066:	f7fd f849 	bl	140fc <dw1000_write_reg>
    dw1000_phy_set_tx_antennadelay(inst, inst->uwb_dev.tx_antenna_delay);
   1706a:	f8b4 34ce 	ldrh.w	r3, [r4, #1230]	; 0x4ce
   1706e:	9702      	str	r7, [sp, #8]
   17070:	9300      	str	r3, [sp, #0]
   17072:	9501      	str	r5, [sp, #4]
   17074:	462a      	mov	r2, r5
   17076:	2118      	movs	r1, #24
   17078:	4620      	mov	r0, r4
   1707a:	f7fd f83f 	bl	140fc <dw1000_write_reg>
    dw1000_phy_config_txrf(inst, txrf_config);
   1707e:	4631      	mov	r1, r6
   17080:	4620      	mov	r0, r4
   17082:	f7ff ff3d 	bl	16f00 <dw1000_phy_config_txrf>
    inst->sys_cfg_reg = dw1000_read_reg(inst, SYS_CFG_ID, 0, sizeof(uint32_t)) ; // Read sysconfig register
   17086:	2304      	movs	r3, #4
   17088:	462a      	mov	r2, r5
   1708a:	4619      	mov	r1, r3
   1708c:	4620      	mov	r0, r4
   1708e:	f7fc ffc5 	bl	1401c <dw1000_read_reg>
   17092:	f8c4 0584 	str.w	r0, [r4, #1412]	; 0x584
}
   17096:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1709a:	b005      	add	sp, #20
   1709c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        txrf_config = &inst->uwb_dev.config.txrf;
   1709e:	f200 5624 	addw	r6, r0, #1316	; 0x524
   170a2:	e754      	b.n	16f4e <dw1000_phy_init+0x1a>
        dw1000_write_reg(inst, OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK, sizeof(uint8_t)); // Set load LDE kick bit
   170a4:	2301      	movs	r3, #1
   170a6:	9302      	str	r3, [sp, #8]
   170a8:	2202      	movs	r2, #2
   170aa:	2300      	movs	r3, #0
   170ac:	e9cd 2300 	strd	r2, r3, [sp]
   170b0:	2212      	movs	r2, #18
   170b2:	212d      	movs	r1, #45	; 0x2d
   170b4:	4620      	mov	r0, r4
   170b6:	f7fd f821 	bl	140fc <dw1000_write_reg>
        inst->uwb_dev.status.LDO_enabled = 1; // LDO tune must be kicked at wake-up
   170ba:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   170be:	f043 0320 	orr.w	r3, r3, #32
   170c2:	f884 3509 	strb.w	r3, [r4, #1289]	; 0x509
   170c6:	e76e      	b.n	16fa6 <dw1000_phy_init+0x72>
        inst->uwb_dev.config.rx.xtalTrim = inst->otp_xtal_trim;
   170c8:	f884 551e 	strb.w	r5, [r4, #1310]	; 0x51e
   170cc:	e78c      	b.n	16fe8 <dw1000_phy_init+0xb4>
    dw1000_phy_sysclk_LDE(inst);
   170ce:	4620      	mov	r0, r4
   170d0:	f7ff fea9 	bl	16e26 <dw1000_phy_sysclk_LDE>
    dw1000_write_reg(inst, OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD, sizeof(uint16_t)); // Set load LDE kick bit
   170d4:	2302      	movs	r3, #2
   170d6:	9302      	str	r3, [sp, #8]
   170d8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   170dc:	2300      	movs	r3, #0
   170de:	e9cd 2300 	strd	r2, r3, [sp]
   170e2:	2206      	movs	r2, #6
   170e4:	212d      	movs	r1, #45	; 0x2d
   170e6:	4620      	mov	r0, r4
   170e8:	f7fd f808 	bl	140fc <dw1000_write_reg>
    dpl_cputime_delay_usecs(120); // Allow time for code to upload (should take up to 120 us)
   170ec:	2078      	movs	r0, #120	; 0x78
   170ee:	f7f7 f930 	bl	e352 <dpl_cputime_delay_usecs>
    dw1000_phy_sysclk_SEQ(inst); // Enable clocks for sequencing
   170f2:	4620      	mov	r0, r4
   170f4:	f7ff feb0 	bl	16e58 <dw1000_phy_sysclk_SEQ>
    inst->uwb_dev.status.LDE_enabled = 1;
   170f8:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   170fc:	f043 0310 	orr.w	r3, r3, #16
   17100:	f884 3509 	strb.w	r3, [r4, #1289]	; 0x509
}
   17104:	e785      	b.n	17012 <dw1000_phy_init+0xde>

00017106 <dw1000_phy_rx_reset>:
 *
 * @param inst   Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_rx_reset(struct _dw1000_dev_instance_t * inst)
{
   17106:	b570      	push	{r4, r5, r6, lr}
   17108:	b084      	sub	sp, #16
   1710a:	4604      	mov	r4, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   1710c:	f500 65ad 	add.w	r5, r0, #1384	; 0x568
   17110:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17114:	4628      	mov	r0, r5
   17116:	f7f3 fd0b 	bl	ab30 <os_mutex_pend>
    dpl_error_t err = dpl_mutex_pend(&inst->mutex, DPL_WAIT_FOREVER);
    if (err != DPL_OK) {
   1711a:	b138      	cbz	r0, 1712c <dw1000_phy_rx_reset+0x26>
        inst->uwb_dev.status.mtx_error = 1;
   1711c:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   17120:	f043 0308 	orr.w	r3, r3, #8
   17124:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
    // Clear RX reset
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR, sizeof(uint8_t));

    err = dpl_mutex_release(&inst->mutex);
    assert(err == DPL_OK);
}
   17128:	b004      	add	sp, #16
   1712a:	bd70      	pop	{r4, r5, r6, pc}
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_RX, sizeof(uint8_t));
   1712c:	2601      	movs	r6, #1
   1712e:	9602      	str	r6, [sp, #8]
   17130:	22e0      	movs	r2, #224	; 0xe0
   17132:	2300      	movs	r3, #0
   17134:	e9cd 2300 	strd	r2, r3, [sp]
   17138:	2203      	movs	r2, #3
   1713a:	2136      	movs	r1, #54	; 0x36
   1713c:	4620      	mov	r0, r4
   1713e:	f7fc ffdd 	bl	140fc <dw1000_write_reg>
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR, sizeof(uint8_t));
   17142:	9602      	str	r6, [sp, #8]
   17144:	22f0      	movs	r2, #240	; 0xf0
   17146:	2300      	movs	r3, #0
   17148:	e9cd 2300 	strd	r2, r3, [sp]
   1714c:	2203      	movs	r2, #3
   1714e:	2136      	movs	r1, #54	; 0x36
   17150:	4620      	mov	r0, r4
   17152:	f7fc ffd3 	bl	140fc <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   17156:	4628      	mov	r0, r5
   17158:	f7f3 fc8e 	bl	aa78 <os_mutex_release>
    assert(err == DPL_OK);
   1715c:	2800      	cmp	r0, #0
   1715e:	d0e3      	beq.n	17128 <dw1000_phy_rx_reset+0x22>
   17160:	2300      	movs	r3, #0
   17162:	461a      	mov	r2, r3
   17164:	4619      	mov	r1, r3
   17166:	4618      	mov	r0, r3
   17168:	f7f1 ff70 	bl	904c <__assert_func>
   1716c:	0000      	movs	r0, r0
	...

00017170 <dw1000_phy_forcetrxoff>:
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_forcetrxoff(struct _dw1000_dev_instance_t * inst)
{
   17170:	b5f0      	push	{r4, r5, r6, r7, lr}
   17172:	b085      	sub	sp, #20
   17174:	4605      	mov	r5, r0
    dpl_error_t err;
    struct uwb_mac_interface * cbs = NULL;
    uint32_t mask = dw1000_read_reg(inst, SYS_MASK_ID, 0 , sizeof(uint32_t)) ; // Read set interrupt mask
   17176:	2304      	movs	r3, #4
   17178:	2200      	movs	r2, #0
   1717a:	210e      	movs	r1, #14
   1717c:	f7fc ff4e 	bl	1401c <dw1000_read_reg>
   17180:	4604      	mov	r4, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   17182:	f505 66ad 	add.w	r6, r5, #1384	; 0x568
   17186:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1718a:	4630      	mov	r0, r6
   1718c:	f7f3 fcd0 	bl	ab30 <os_mutex_pend>
    // We can disable the radio, but before the status is cleared an interrupt can be set (e.g. the
    // event has just happened before the radio was disabled)
    // thus we need to disable interrupt during this operation

    err = dpl_mutex_pend(&inst->mutex, DPL_WAIT_FOREVER);
    if (err != DPL_OK) {
   17190:	b138      	cbz	r0, 171a2 <dw1000_phy_forcetrxoff+0x32>
        inst->uwb_dev.status.mtx_error = 1;
   17192:	f895 350b 	ldrb.w	r3, [r5, #1291]	; 0x50b
   17196:	f043 0308 	orr.w	r3, r3, #8
   1719a:	f885 350b 	strb.w	r3, [r5, #1291]	; 0x50b
    if (dpl_sem_get_count(&inst->tx_sem) == 0) {
        err = dpl_sem_release(&inst->tx_sem);
        assert(err == DPL_OK);
        inst->uwb_dev.status.sem_force_released = 1;
    }
}
   1719e:	b005      	add	sp, #20
   171a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dw1000_write_reg(inst, SYS_MASK_ID, 0, 0, sizeof(uint32_t)) ; // Clear interrupt mask - so we don't get any unwanted events
   171a2:	2704      	movs	r7, #4
   171a4:	9702      	str	r7, [sp, #8]
   171a6:	2200      	movs	r2, #0
   171a8:	2300      	movs	r3, #0
   171aa:	e9cd 2300 	strd	r2, r3, [sp]
   171ae:	210e      	movs	r1, #14
   171b0:	4628      	mov	r0, r5
   171b2:	f7fc ffa3 	bl	140fc <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TRXOFF, sizeof(uint8_t)) ; // Disable the radio
   171b6:	2301      	movs	r3, #1
   171b8:	9302      	str	r3, [sp, #8]
   171ba:	2240      	movs	r2, #64	; 0x40
   171bc:	2300      	movs	r3, #0
   171be:	e9cd 2300 	strd	r2, r3, [sp]
   171c2:	2200      	movs	r2, #0
   171c4:	210d      	movs	r1, #13
   171c6:	4628      	mov	r0, r5
   171c8:	f7fc ff98 	bl	140fc <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_STATUS_ID, 0, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD| SYS_STATUS_TXBERR), sizeof(uint32_t));
   171cc:	9702      	str	r7, [sp, #8]
   171ce:	a32e      	add	r3, pc, #184	; (adr r3, 17288 <dw1000_phy_forcetrxoff+0x118>)
   171d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   171d4:	e9cd 2300 	strd	r2, r3, [sp]
   171d8:	2200      	movs	r2, #0
   171da:	210f      	movs	r1, #15
   171dc:	4628      	mov	r0, r5
   171de:	f7fc ff8d 	bl	140fc <dw1000_write_reg>
    if (inst->uwb_dev.config.dblbuffon_enabled)
   171e2:	f895 352c 	ldrb.w	r3, [r5, #1324]	; 0x52c
   171e6:	f013 0f10 	tst.w	r3, #16
   171ea:	d130      	bne.n	1724e <dw1000_phy_forcetrxoff+0xde>
    dw1000_write_reg(inst, SYS_MASK_ID, 0, mask, sizeof(uint32_t)); // Restore mask to what it was
   171ec:	2304      	movs	r3, #4
   171ee:	9302      	str	r3, [sp, #8]
   171f0:	2200      	movs	r2, #0
   171f2:	9400      	str	r4, [sp, #0]
   171f4:	9201      	str	r2, [sp, #4]
   171f6:	210e      	movs	r1, #14
   171f8:	4628      	mov	r0, r5
   171fa:	f7fc ff7f 	bl	140fc <dw1000_write_reg>
    if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
   171fe:	f8d5 4530 	ldr.w	r4, [r5, #1328]	; 0x530
   17202:	bb64      	cbnz	r4, 1725e <dw1000_phy_forcetrxoff+0xee>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   17204:	4630      	mov	r0, r6
   17206:	f7f3 fc37 	bl	aa78 <os_mutex_release>
    assert(err == DPL_OK);
   1720a:	bb70      	cbnz	r0, 1726a <dw1000_phy_forcetrxoff+0xfa>
    inst->control.wait4resp_enabled = 0;
   1720c:	f895 35b0 	ldrb.w	r3, [r5, #1456]	; 0x5b0
   17210:	f36f 0300 	bfc	r3, #0, #1
   17214:	f885 35b0 	strb.w	r3, [r5, #1456]	; 0x5b0
    inst->control.rxauto_disable = false;
   17218:	f895 35b1 	ldrb.w	r3, [r5, #1457]	; 0x5b1
   1721c:	f36f 0382 	bfc	r3, #2, #1
   17220:	f885 35b1 	strb.w	r3, [r5, #1457]	; 0x5b1
    inst->control.abs_timeout = false;
   17224:	b2db      	uxtb	r3, r3
   17226:	f36f 03c3 	bfc	r3, #3, #1
   1722a:	f885 35b1 	strb.w	r3, [r5, #1457]	; 0x5b1
   1722e:	f8b5 3566 	ldrh.w	r3, [r5, #1382]	; 0x566
    if (dpl_sem_get_count(&inst->tx_sem) == 0) {
   17232:	2b00      	cmp	r3, #0
   17234:	d1b3      	bne.n	1719e <dw1000_phy_forcetrxoff+0x2e>
    return (dpl_error_t)os_sem_release(&sem->sem);
   17236:	f505 60ac 	add.w	r0, r5, #1376	; 0x560
   1723a:	f7f2 fe27 	bl	9e8c <os_sem_release>
        assert(err == DPL_OK);
   1723e:	b9d0      	cbnz	r0, 17276 <dw1000_phy_forcetrxoff+0x106>
        inst->uwb_dev.status.sem_force_released = 1;
   17240:	f895 350a 	ldrb.w	r3, [r5, #1290]	; 0x50a
   17244:	f043 0302 	orr.w	r3, r3, #2
   17248:	f885 350a 	strb.w	r3, [r5, #1290]	; 0x50a
   1724c:	e7a7      	b.n	1719e <dw1000_phy_forcetrxoff+0x2e>
        dw1000_sync_rxbufptrs(inst);
   1724e:	4628      	mov	r0, r5
   17250:	f7fe fa93 	bl	1577a <dw1000_sync_rxbufptrs>
   17254:	e7ca      	b.n	171ec <dw1000_phy_forcetrxoff+0x7c>
                if(cbs->reset_cb((struct uwb_dev*)inst, cbs)) continue;
   17256:	4621      	mov	r1, r4
   17258:	4628      	mov	r0, r5
   1725a:	4798      	blx	r3
        SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
   1725c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   1725e:	2c00      	cmp	r4, #0
   17260:	d0d0      	beq.n	17204 <dw1000_phy_forcetrxoff+0x94>
            if (cbs!=NULL && cbs->reset_cb)
   17262:	6a63      	ldr	r3, [r4, #36]	; 0x24
   17264:	2b00      	cmp	r3, #0
   17266:	d1f6      	bne.n	17256 <dw1000_phy_forcetrxoff+0xe6>
   17268:	e7f8      	b.n	1725c <dw1000_phy_forcetrxoff+0xec>
    assert(err == DPL_OK);
   1726a:	2300      	movs	r3, #0
   1726c:	461a      	mov	r2, r3
   1726e:	4619      	mov	r1, r3
   17270:	4618      	mov	r0, r3
   17272:	f7f1 feeb 	bl	904c <__assert_func>
        assert(err == DPL_OK);
   17276:	2300      	movs	r3, #0
   17278:	461a      	mov	r2, r3
   1727a:	4619      	mov	r1, r3
   1727c:	4618      	mov	r0, r3
   1727e:	f7f1 fee5 	bl	904c <__assert_func>
   17282:	bf00      	nop
   17284:	f3af 8000 	nop.w
   17288:	3433fbf8 	.word	0x3433fbf8
   1728c:	00000000 	.word	0x00000000

00017290 <dw1000_phy_interrupt_mask>:
 * @param bitmask   Sets the events which generates interrupt.
 * @param enable    If set, the interrupts are enabled else they are cleared.
 * @return void
 */
void dw1000_phy_interrupt_mask(struct _dw1000_dev_instance_t * inst, uint32_t bitmask, uint8_t enable)
{
   17290:	b5f0      	push	{r4, r5, r6, r7, lr}
   17292:	b085      	sub	sp, #20
   17294:	4604      	mov	r4, r0
   17296:	460d      	mov	r5, r1
   17298:	4616      	mov	r6, r2
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   1729a:	f500 67ad 	add.w	r7, r0, #1384	; 0x568
   1729e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   172a2:	4638      	mov	r0, r7
   172a4:	f7f3 fc44 	bl	ab30 <os_mutex_pend>
    // Critical region, atomic lock with mutex
    uint32_t mask;
    dpl_error_t err = dpl_mutex_pend(&inst->mutex, DPL_WAIT_FOREVER);
    if (err != DPL_OK) {
   172a8:	b138      	cbz	r0, 172ba <dw1000_phy_interrupt_mask+0x2a>
        inst->uwb_dev.status.mtx_error = 1;
   172aa:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   172ae:	f043 0308 	orr.w	r3, r3, #8
   172b2:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
    // Critical region, unlock mutex
    err = dpl_mutex_release(&inst->mutex);
    assert(err == DPL_OK);
mtx_error:
    return;
}
   172b6:	b005      	add	sp, #20
   172b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mask = dw1000_read_reg(inst, SYS_MASK_ID, 0, sizeof(uint32_t)) ; // Read register
   172ba:	2304      	movs	r3, #4
   172bc:	2200      	movs	r2, #0
   172be:	210e      	movs	r1, #14
   172c0:	4620      	mov	r0, r4
   172c2:	f7fc feab 	bl	1401c <dw1000_read_reg>
    if(enable)
   172c6:	b1a6      	cbz	r6, 172f2 <dw1000_phy_interrupt_mask+0x62>
        mask |= bitmask ;
   172c8:	4328      	orrs	r0, r5
    dw1000_write_reg(inst, SYS_MASK_ID, 0, mask, sizeof(uint32_t));
   172ca:	2304      	movs	r3, #4
   172cc:	9302      	str	r3, [sp, #8]
   172ce:	2200      	movs	r2, #0
   172d0:	9000      	str	r0, [sp, #0]
   172d2:	9201      	str	r2, [sp, #4]
   172d4:	210e      	movs	r1, #14
   172d6:	4620      	mov	r0, r4
   172d8:	f7fc ff10 	bl	140fc <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   172dc:	4638      	mov	r0, r7
   172de:	f7f3 fbcb 	bl	aa78 <os_mutex_release>
    assert(err == DPL_OK);
   172e2:	2800      	cmp	r0, #0
   172e4:	d0e7      	beq.n	172b6 <dw1000_phy_interrupt_mask+0x26>
   172e6:	2300      	movs	r3, #0
   172e8:	461a      	mov	r2, r3
   172ea:	4619      	mov	r1, r3
   172ec:	4618      	mov	r0, r3
   172ee:	f7f1 fead 	bl	904c <__assert_func>
        mask &= ~bitmask ; // Clear the bit
   172f2:	ea20 0005 	bic.w	r0, r0, r5
   172f6:	e7e8      	b.n	172ca <dw1000_phy_interrupt_mask+0x3a>

000172f8 <dw1000_phy_repeated_frames>:
 * @param rate     Rate at which frames with be repeated in dtu, set to 0 to disable
 * @return void
 */
void
dw1000_phy_repeated_frames(struct _dw1000_dev_instance_t * inst, uint64_t rate)
{
   172f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   172fa:	b085      	sub	sp, #20
   172fc:	4604      	mov	r4, r0
   172fe:	461d      	mov	r5, r3
    int rc;

    if (!rate) {
   17300:	ea52 0305 	orrs.w	r3, r2, r5
   17304:	d114      	bne.n	17330 <dw1000_phy_repeated_frames+0x38>
        /* Stop sending packets */
        dw1000_write_reg(inst, RF_CONF_ID, 0, 0, sizeof(uint32_t));
   17306:	2304      	movs	r3, #4
   17308:	9302      	str	r3, [sp, #8]
   1730a:	2600      	movs	r6, #0
   1730c:	2700      	movs	r7, #0
   1730e:	e9cd 6700 	strd	r6, r7, [sp]
   17312:	2200      	movs	r2, #0
   17314:	2128      	movs	r1, #40	; 0x28
   17316:	f7fc fef1 	bl	140fc <dw1000_write_reg>
        dw1000_write_reg(inst, DIG_DIAG_ID, DIAG_TMC_OFFSET, 0, sizeof(uint8_t));
   1731a:	2301      	movs	r3, #1
   1731c:	9302      	str	r3, [sp, #8]
   1731e:	e9cd 6700 	strd	r6, r7, [sp]
   17322:	2224      	movs	r2, #36	; 0x24
   17324:	212f      	movs	r1, #47	; 0x2f
   17326:	4620      	mov	r0, r4
   17328:	f7fc fee8 	bl	140fc <dw1000_write_reg>
                         (uint8_t)(DIAG_TMC_TX_PSTM), sizeof(uint8_t));

        /* Trigger first frame - Needed?? */
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT, sizeof(uint8_t));
    }
}
   1732c:	b005      	add	sp, #20
   1732e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17330:	4616      	mov	r6, r2
        inst->spi_settings.baudrate = inst->spi_baudrate_low;
   17332:	f8d0 3558 	ldr.w	r3, [r0, #1368]	; 0x558
   17336:	f8c0 3598 	str.w	r3, [r0, #1432]	; 0x598
        rc = hal_spi_disable(inst->spi_num);
   1733a:	f890 055c 	ldrb.w	r0, [r0, #1372]	; 0x55c
   1733e:	f000 ffe3 	bl	18308 <hal_spi_disable>
        assert(rc == 0);
   17342:	2800      	cmp	r0, #0
   17344:	d16e      	bne.n	17424 <dw1000_phy_repeated_frames+0x12c>
        rc = hal_spi_config(inst->spi_num, &inst->spi_settings);
   17346:	f204 5194 	addw	r1, r4, #1428	; 0x594
   1734a:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   1734e:	f000 ff99 	bl	18284 <hal_spi_config>
        assert(rc == 0);
   17352:	2800      	cmp	r0, #0
   17354:	d16c      	bne.n	17430 <dw1000_phy_repeated_frames+0x138>
        rc = hal_spi_enable(inst->spi_num);
   17356:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   1735a:	f000 ffaf 	bl	182bc <hal_spi_enable>
        assert(rc == 0);
   1735e:	2800      	cmp	r0, #0
   17360:	d16c      	bne.n	1743c <dw1000_phy_repeated_frames+0x144>
        printf("PMSC_ID[0]: %"PRIx32"\n", (uint32_t)dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint32_t)));
   17362:	2304      	movs	r3, #4
   17364:	2200      	movs	r2, #0
   17366:	2136      	movs	r1, #54	; 0x36
   17368:	4620      	mov	r0, r4
   1736a:	f7fc fe57 	bl	1401c <dw1000_read_reg>
   1736e:	4601      	mov	r1, r0
   17370:	4835      	ldr	r0, [pc, #212]	; (17448 <dw1000_phy_repeated_frames+0x150>)
   17372:	f7f6 ff59 	bl	e228 <printf>
        printf("PMSC_ID[1]: %"PRIx32"\n", (uint32_t)dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, sizeof(uint32_t)));
   17376:	2304      	movs	r3, #4
   17378:	461a      	mov	r2, r3
   1737a:	2136      	movs	r1, #54	; 0x36
   1737c:	4620      	mov	r0, r4
   1737e:	f7fc fe4d 	bl	1401c <dw1000_read_reg>
   17382:	4601      	mov	r1, r0
   17384:	4831      	ldr	r0, [pc, #196]	; (1744c <dw1000_phy_repeated_frames+0x154>)
   17386:	f7f6 ff4f 	bl	e228 <printf>
        dw1000_phy_disable_sequencing(inst);
   1738a:	4620      	mov	r0, r4
   1738c:	f7ff fd79 	bl	16e82 <dw1000_phy_disable_sequencing>
        dw1000_write_reg(inst, RF_CONF_ID, 0, RF_CONF_TXPLLPOWEN_MASK, sizeof(uint32_t));
   17390:	2704      	movs	r7, #4
   17392:	9702      	str	r7, [sp, #8]
   17394:	f44f 12ff 	mov.w	r2, #2088960	; 0x1fe000
   17398:	2300      	movs	r3, #0
   1739a:	e9cd 2300 	strd	r2, r3, [sp]
   1739e:	2200      	movs	r2, #0
   173a0:	2128      	movs	r1, #40	; 0x28
   173a2:	4620      	mov	r0, r4
   173a4:	f7fc feaa 	bl	140fc <dw1000_write_reg>
        dw1000_write_reg(inst, RF_CONF_ID, 0, RF_CONF_TXALLEN_MASK, sizeof(uint32_t));
   173a8:	9702      	str	r7, [sp, #8]
   173aa:	4a29      	ldr	r2, [pc, #164]	; (17450 <dw1000_phy_repeated_frames+0x158>)
   173ac:	2300      	movs	r3, #0
   173ae:	e9cd 2300 	strd	r2, r3, [sp]
   173b2:	2200      	movs	r2, #0
   173b4:	2128      	movs	r1, #40	; 0x28
   173b6:	4620      	mov	r0, r4
   173b8:	f7fc fea0 	bl	140fc <dw1000_write_reg>
        dw1000_phy_sysclk_PLL(inst);
   173bc:	4620      	mov	r0, r4
   173be:	f7ff fd04 	bl	16dca <dw1000_phy_sysclk_PLL>
        dw1000_phy_txclk_PLL(inst);
   173c2:	4620      	mov	r0, r4
   173c4:	f7ff fd18 	bl	16df8 <dw1000_phy_txclk_PLL>
        if ((rate>>8) < 4) {
   173c8:	0a32      	lsrs	r2, r6, #8
   173ca:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   173ce:	0a2b      	lsrs	r3, r5, #8
   173d0:	42ba      	cmp	r2, r7
   173d2:	f173 0300 	sbcs.w	r3, r3, #0
   173d6:	d202      	bcs.n	173de <dw1000_phy_repeated_frames+0xe6>
            rate = ((uint64_t)4<<8);
   173d8:	f44f 6680 	mov.w	r6, #1024	; 0x400
   173dc:	2500      	movs	r5, #0
        dw1000_write_reg(inst, DX_TIME_ID, 0, rate>>8, sizeof(uint32_t));
   173de:	2304      	movs	r3, #4
   173e0:	9302      	str	r3, [sp, #8]
   173e2:	0a36      	lsrs	r6, r6, #8
   173e4:	ea46 6605 	orr.w	r6, r6, r5, lsl #24
   173e8:	0a2d      	lsrs	r5, r5, #8
   173ea:	9600      	str	r6, [sp, #0]
   173ec:	9501      	str	r5, [sp, #4]
   173ee:	2200      	movs	r2, #0
   173f0:	210a      	movs	r1, #10
   173f2:	4620      	mov	r0, r4
   173f4:	f7fc fe82 	bl	140fc <dw1000_write_reg>
        dw1000_write_reg(inst, DIG_DIAG_ID, DIAG_TMC_OFFSET,
   173f8:	2501      	movs	r5, #1
   173fa:	9502      	str	r5, [sp, #8]
   173fc:	2210      	movs	r2, #16
   173fe:	2300      	movs	r3, #0
   17400:	e9cd 2300 	strd	r2, r3, [sp]
   17404:	2224      	movs	r2, #36	; 0x24
   17406:	212f      	movs	r1, #47	; 0x2f
   17408:	4620      	mov	r0, r4
   1740a:	f7fc fe77 	bl	140fc <dw1000_write_reg>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT, sizeof(uint8_t));
   1740e:	9502      	str	r5, [sp, #8]
   17410:	2202      	movs	r2, #2
   17412:	2300      	movs	r3, #0
   17414:	e9cd 2300 	strd	r2, r3, [sp]
   17418:	2200      	movs	r2, #0
   1741a:	210d      	movs	r1, #13
   1741c:	4620      	mov	r0, r4
   1741e:	f7fc fe6d 	bl	140fc <dw1000_write_reg>
}
   17422:	e783      	b.n	1732c <dw1000_phy_repeated_frames+0x34>
        assert(rc == 0);
   17424:	2300      	movs	r3, #0
   17426:	461a      	mov	r2, r3
   17428:	4619      	mov	r1, r3
   1742a:	4618      	mov	r0, r3
   1742c:	f7f1 fe0e 	bl	904c <__assert_func>
        assert(rc == 0);
   17430:	2300      	movs	r3, #0
   17432:	461a      	mov	r2, r3
   17434:	4619      	mov	r1, r3
   17436:	4618      	mov	r0, r3
   17438:	f7f1 fe08 	bl	904c <__assert_func>
        assert(rc == 0);
   1743c:	2300      	movs	r3, #0
   1743e:	461a      	mov	r2, r3
   17440:	4619      	mov	r1, r3
   17442:	4618      	mov	r0, r3
   17444:	f7f1 fe02 	bl	904c <__assert_func>
   17448:	0002411c 	.word	0x0002411c
   1744c:	00024130 	.word	0x00024130
   17450:	005fff00 	.word	0x005fff00

00017454 <dw1000_phy_SHR_duration>:
 * @param nlen      The length of the frame to be transmitted/received excluding crc
 * @return uint16_t duration in usec
 */
uint16_t
dw1000_phy_SHR_duration(struct uwb_phy_attributes * attrib)
{
   17454:	b508      	push	{r3, lr}
    /* TXsym is represented as a float32_t */
#ifdef __KERNEL__
    duration = f32_to_i32(
        f32_mul(attrib->Tpsym, ui32_to_f32(attrib->nsync + attrib->nsfd)), 3, false);
#else
    duration = ceilf(attrib->Tpsym * (attrib->nsync + attrib->nsfd));
   17456:	ed90 0a00 	vldr	s0, [r0]
   1745a:	89c3      	ldrh	r3, [r0, #14]
   1745c:	7b02      	ldrb	r2, [r0, #12]
   1745e:	4413      	add	r3, r2
   17460:	ee07 3a90 	vmov	s15, r3
   17464:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   17468:	ee27 0a80 	vmul.f32	s0, s15, s0
   1746c:	f00a fcb0 	bl	21dd0 <ceilf>
   17470:	eebc 0ac0 	vcvt.u32.f32	s0, s0
#endif
    return duration;
}
   17474:	ee10 3a10 	vmov	r3, s0
   17478:	b298      	uxth	r0, r3
   1747a:	bd08      	pop	{r3, pc}

0001747c <dw1000_phy_data_duration>:
 *                  when using Cipher Mode 3 (no payload)
 * @return uint16_t duration in usec
 */
uint16_t
dw1000_phy_data_duration(struct uwb_phy_attributes * attrib, uint16_t nlen)
{
   1747c:	b508      	push	{r3, lr}
    int32_t total_payload_bits;
    uint16_t duration;
    /* We need to add 48 parity bits for every 330 bits in the data payload (including crc)
     * I.e. for < 330 bits we need 48 parity bits, for > 330 bits we need 48+48 parity bits,
     * for > 660 bits we need 3*48 parity bits, etc. */
    parity_data_bits += ((8*(nlen+2))/330) * 48;
   1747e:	3102      	adds	r1, #2
   17480:	00c9      	lsls	r1, r1, #3
   17482:	4b12      	ldr	r3, [pc, #72]	; (174cc <dw1000_phy_data_duration+0x50>)
   17484:	fb83 2301 	smull	r2, r3, r3, r1
   17488:	11db      	asrs	r3, r3, #7
   1748a:	3301      	adds	r3, #1
   1748c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    total_payload_bits = 8*(nlen+2) + parity_data_bits;
   17490:	eb01 1303 	add.w	r3, r1, r3, lsl #4
   17494:	ee07 3a90 	vmov	s15, r3
        tmp = DPL_FLOAT32_MUL(attrib->Tbsym, DPL_FLOAT32_I32_TO_F32(attrib->nphr));
        tmp = DPL_FLOAT32_ADD(tmp, DPL_FLOAT32_MUL(attrib->Tdsym, DPL_FLOAT32_I32_TO_F32(total_payload_bits)));
        duration = f32_to_i32(DPL_FLOAT32_CEIL(tmp), softfloat_round_max, false);
    }
#else
    duration = (int)ceilf(attrib->Tbsym * attrib->nphr +
   17498:	ed90 7a01 	vldr	s14, [r0, #4]
   1749c:	7c83      	ldrb	r3, [r0, #18]
   1749e:	ee00 3a10 	vmov	s0, r3
   174a2:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   174a6:	ee20 0a07 	vmul.f32	s0, s0, s14
                          attrib->Tdsym * total_payload_bits);
   174aa:	ed90 7a02 	vldr	s14, [r0, #8]
   174ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   174b2:	ee67 7a87 	vmul.f32	s15, s15, s14
    duration = (int)ceilf(attrib->Tbsym * attrib->nphr +
   174b6:	ee30 0a27 	vadd.f32	s0, s0, s15
   174ba:	f00a fc89 	bl	21dd0 <ceilf>
   174be:	eebd 0ac0 	vcvt.s32.f32	s0, s0
#endif
    return duration;
}
   174c2:	ee10 3a10 	vmov	r3, s0
   174c6:	b298      	uxth	r0, r3
   174c8:	bd08      	pop	{r3, pc}
   174ca:	bf00      	nop
   174cc:	634c0635 	.word	0x634c0635

000174d0 <dw1000_phy_frame_duration>:
 * @param nlen      The length of the frame to be transmitted/received excluding crc
 * @return uint16_t duration in usec
 */
inline uint16_t
dw1000_phy_frame_duration(struct uwb_phy_attributes * attrib, uint16_t nlen)
{
   174d0:	b570      	push	{r4, r5, r6, lr}
   174d2:	4605      	mov	r5, r0
   174d4:	460e      	mov	r6, r1
    return dw1000_phy_SHR_duration(attrib) + dw1000_phy_data_duration(attrib, nlen);
   174d6:	f7ff ffbd 	bl	17454 <dw1000_phy_SHR_duration>
   174da:	4604      	mov	r4, r0
   174dc:	4631      	mov	r1, r6
   174de:	4628      	mov	r0, r5
   174e0:	f7ff ffcc 	bl	1747c <dw1000_phy_data_duration>
   174e4:	4420      	add	r0, r4
}
   174e6:	b280      	uxth	r0, r0
   174e8:	bd70      	pop	{r4, r5, r6, pc}

000174ea <dw1000_phy_txrf_power_value>:
 */
bool
dw1000_phy_txrf_power_value(struct _dw1000_dev_instance_t * inst, uint8_t *reg,
                            dpl_float32_t coarse, dpl_float32_t fine)
{
    int c = DPL_FLOAT32_INT(coarse);
   174ea:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    if (!reg) {
   174ee:	460a      	mov	r2, r1
   174f0:	2900      	cmp	r1, #0
   174f2:	d05a      	beq.n	175aa <dw1000_phy_txrf_power_value+0xc0>
        return false;
    }
    if (DPL_FLOAT32_INT(fine) < 0 || DPL_FLOAT32_INT(fine) > 32) {
   174f4:	eefd 7ae0 	vcvt.s32.f32	s15, s1
   174f8:	ee17 3a90 	vmov	r3, s15
   174fc:	2b20      	cmp	r3, #32
   174fe:	d856      	bhi.n	175ae <dw1000_phy_txrf_power_value+0xc4>
        return false;
    }

    switch (c) {
   17500:	ee10 3a10 	vmov	r3, s0
   17504:	2b12      	cmp	r3, #18
   17506:	d854      	bhi.n	175b2 <dw1000_phy_txrf_power_value+0xc8>
   17508:	e8df f003 	tbb	[pc, r3]
   1750c:	3b535345 	.word	0x3b535345
   17510:	53315353 	.word	0x53315353
   17514:	53532753 	.word	0x53532753
   17518:	1353531d 	.word	0x1353531d
   1751c:	5353      	.short	0x5353
   1751e:	0a          	.byte	0x0a
   1751f:	00          	.byte	0x00
    case(18): *reg = dw1000_power_valuef(DW1000_txrf_config_18db, fine);break;
   17520:	ee70 0aa0 	vadd.f32	s1, s1, s1
   17524:	eefd 7ae0 	vcvt.s32.f32	s15, s1
   17528:	ee17 3a90 	vmov	r3, s15
   1752c:	7013      	strb	r3, [r2, #0]
    case(3):  *reg = dw1000_power_valuef(DW1000_txrf_config_3db, fine);break;
    case(0):  *reg = dw1000_power_valuef(DW1000_txrf_config_0db, fine);break;
    default:
        return false;
    }
    return true;
   1752e:	2001      	movs	r0, #1
    case(18): *reg = dw1000_power_valuef(DW1000_txrf_config_18db, fine);break;
   17530:	4770      	bx	lr
    case(15): *reg = dw1000_power_valuef(DW1000_txrf_config_15db, fine);break;
   17532:	ee70 0aa0 	vadd.f32	s1, s1, s1
   17536:	eefd 0ae0 	vcvt.s32.f32	s1, s1
   1753a:	ee10 3a90 	vmov	r3, s1
   1753e:	3320      	adds	r3, #32
   17540:	7013      	strb	r3, [r2, #0]
    return true;
   17542:	2001      	movs	r0, #1
    case(15): *reg = dw1000_power_valuef(DW1000_txrf_config_15db, fine);break;
   17544:	4770      	bx	lr
    case(12): *reg = dw1000_power_valuef(DW1000_txrf_config_12db, fine);break;
   17546:	ee70 0aa0 	vadd.f32	s1, s1, s1
   1754a:	eefd 0ae0 	vcvt.s32.f32	s1, s1
   1754e:	ee10 3a90 	vmov	r3, s1
   17552:	3340      	adds	r3, #64	; 0x40
   17554:	7013      	strb	r3, [r2, #0]
    return true;
   17556:	2001      	movs	r0, #1
    case(12): *reg = dw1000_power_valuef(DW1000_txrf_config_12db, fine);break;
   17558:	4770      	bx	lr
    case(9):  *reg = dw1000_power_valuef(DW1000_txrf_config_9db, fine);break;
   1755a:	ee70 0aa0 	vadd.f32	s1, s1, s1
   1755e:	eefd 0ae0 	vcvt.s32.f32	s1, s1
   17562:	ee10 3a90 	vmov	r3, s1
   17566:	3360      	adds	r3, #96	; 0x60
   17568:	7013      	strb	r3, [r2, #0]
    return true;
   1756a:	2001      	movs	r0, #1
    case(9):  *reg = dw1000_power_valuef(DW1000_txrf_config_9db, fine);break;
   1756c:	4770      	bx	lr
    case(6):  *reg = dw1000_power_valuef(DW1000_txrf_config_6db, fine);break;
   1756e:	ee70 0aa0 	vadd.f32	s1, s1, s1
   17572:	eefd 0ae0 	vcvt.s32.f32	s1, s1
   17576:	ee10 3a90 	vmov	r3, s1
   1757a:	3b80      	subs	r3, #128	; 0x80
   1757c:	7013      	strb	r3, [r2, #0]
    return true;
   1757e:	2001      	movs	r0, #1
    case(6):  *reg = dw1000_power_valuef(DW1000_txrf_config_6db, fine);break;
   17580:	4770      	bx	lr
    case(3):  *reg = dw1000_power_valuef(DW1000_txrf_config_3db, fine);break;
   17582:	ee70 0aa0 	vadd.f32	s1, s1, s1
   17586:	eefd 0ae0 	vcvt.s32.f32	s1, s1
   1758a:	ee10 3a90 	vmov	r3, s1
   1758e:	3b60      	subs	r3, #96	; 0x60
   17590:	7013      	strb	r3, [r2, #0]
    return true;
   17592:	2001      	movs	r0, #1
    case(3):  *reg = dw1000_power_valuef(DW1000_txrf_config_3db, fine);break;
   17594:	4770      	bx	lr
    case(0):  *reg = dw1000_power_valuef(DW1000_txrf_config_0db, fine);break;
   17596:	ee70 0aa0 	vadd.f32	s1, s1, s1
   1759a:	eefd 0ae0 	vcvt.s32.f32	s1, s1
   1759e:	ee10 3a90 	vmov	r3, s1
   175a2:	3b40      	subs	r3, #64	; 0x40
   175a4:	7013      	strb	r3, [r2, #0]
    return true;
   175a6:	2001      	movs	r0, #1
    case(0):  *reg = dw1000_power_valuef(DW1000_txrf_config_0db, fine);break;
   175a8:	4770      	bx	lr
        return false;
   175aa:	2000      	movs	r0, #0
   175ac:	4770      	bx	lr
        return false;
   175ae:	2000      	movs	r0, #0
   175b0:	4770      	bx	lr
    switch (c) {
   175b2:	2000      	movs	r0, #0
}
   175b4:	4770      	bx	lr

000175b6 <dw1000_phy_event_cnt_ctrl>:
 * @param reset   If true, reset counters
 * @return struct uwb_dev_status
 */
struct uwb_dev_status
dw1000_phy_event_cnt_ctrl(struct _dw1000_dev_instance_t *inst, bool enable, bool reset)
{
   175b6:	b530      	push	{r4, r5, lr}
   175b8:	b085      	sub	sp, #20
   175ba:	4604      	mov	r4, r0
   175bc:	460d      	mov	r5, r1
    if (reset) {
   175be:	b97a      	cbnz	r2, 175e0 <dw1000_phy_event_cnt_ctrl+0x2a>
        dw1000_write_reg(inst, DIG_DIAG_ID, EVC_CTRL_OFFSET, EVC_CLR, sizeof(uint32_t));
    }

    /* Intentionally writing 32 bits here and above as the register requires at least 16 bits
     * written to take effect. */
    dw1000_write_reg(inst, DIG_DIAG_ID, EVC_CTRL_OFFSET, (enable) ? EVC_EN : 0, sizeof(uint32_t));
   175c0:	b1cd      	cbz	r5, 175f6 <dw1000_phy_event_cnt_ctrl+0x40>
   175c2:	2201      	movs	r2, #1
   175c4:	2300      	movs	r3, #0
   175c6:	2104      	movs	r1, #4
   175c8:	9102      	str	r1, [sp, #8]
   175ca:	e9cd 2300 	strd	r2, r3, [sp]
   175ce:	2200      	movs	r2, #0
   175d0:	212f      	movs	r1, #47	; 0x2f
   175d2:	4620      	mov	r0, r4
   175d4:	f7fc fd92 	bl	140fc <dw1000_write_reg>
    return inst->uwb_dev.status;
}
   175d8:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   175dc:	b005      	add	sp, #20
   175de:	bd30      	pop	{r4, r5, pc}
        dw1000_write_reg(inst, DIG_DIAG_ID, EVC_CTRL_OFFSET, EVC_CLR, sizeof(uint32_t));
   175e0:	2304      	movs	r3, #4
   175e2:	9302      	str	r3, [sp, #8]
   175e4:	2202      	movs	r2, #2
   175e6:	2300      	movs	r3, #0
   175e8:	e9cd 2300 	strd	r2, r3, [sp]
   175ec:	2200      	movs	r2, #0
   175ee:	212f      	movs	r1, #47	; 0x2f
   175f0:	f7fc fd84 	bl	140fc <dw1000_write_reg>
   175f4:	e7e4      	b.n	175c0 <dw1000_phy_event_cnt_ctrl+0xa>
    dw1000_write_reg(inst, DIG_DIAG_ID, EVC_CTRL_OFFSET, (enable) ? EVC_EN : 0, sizeof(uint32_t));
   175f6:	2200      	movs	r2, #0
   175f8:	2300      	movs	r3, #0
   175fa:	e7e4      	b.n	175c6 <dw1000_phy_event_cnt_ctrl+0x10>

000175fc <dw1000_phy_event_cnt_read>:
 * @param res     Pointer to struct uwb_dev_evcnt
 * @return struct uwb_dev_status
 */
struct uwb_dev_status
dw1000_phy_event_cnt_read(struct _dw1000_dev_instance_t *inst, struct uwb_dev_evcnt *res)
{
   175fc:	b530      	push	{r4, r5, lr}
   175fe:	b083      	sub	sp, #12
   17600:	4605      	mov	r5, r0
    if (!res) {
   17602:	b319      	cbz	r1, 1764c <dw1000_phy_event_cnt_read+0x50>
   17604:	460c      	mov	r4, r1
        return inst->uwb_dev.status;
    }
    /* Read first 6 counter registers in one go */
    dw1000_read(inst, DIG_DIAG_ID, EVC_PHE_OFFSET, (uint8_t*)res,
   17606:	2318      	movs	r3, #24
   17608:	9300      	str	r3, [sp, #0]
   1760a:	460b      	mov	r3, r1
   1760c:	2204      	movs	r2, #4
   1760e:	212f      	movs	r1, #47	; 0x2f
   17610:	f7fc fc3a 	bl	13e88 <dw1000_read>
                offsetof(struct uwb_dev_evcnt, event_count6));
    /* Apply masks */
    res->event_count0 &= ((EVC_RSE_MASK << 16) | EVC_PHE_MASK);
   17614:	6823      	ldr	r3, [r4, #0]
   17616:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
   1761a:	6023      	str	r3, [r4, #0]
    res->event_count1 &= ((EVC_FCE_MASK << 16) | EVC_FCG_MASK);
   1761c:	6863      	ldr	r3, [r4, #4]
   1761e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
   17622:	6063      	str	r3, [r4, #4]
    res->event_count2 &= ((EVC_OVR_MASK << 16) | EVC_FFR_MASK);
   17624:	68a3      	ldr	r3, [r4, #8]
   17626:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
   1762a:	60a3      	str	r3, [r4, #8]
    res->event_count3 &= ((EVC_PTO_MASK << 16) | EVC_STO_MASK);
   1762c:	68e3      	ldr	r3, [r4, #12]
   1762e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
   17632:	60e3      	str	r3, [r4, #12]
    res->event_count4 &= ((EVC_TXFS_MASK << 16) | EVC_FWTO_MASK);
   17634:	6923      	ldr	r3, [r4, #16]
   17636:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
   1763a:	6123      	str	r3, [r4, #16]
    res->event_count5 &= ((EVC_TPW_MASK << 16) | EVC_HPW_MASK);
   1763c:	6963      	ldr	r3, [r4, #20]
   1763e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
   17642:	6163      	str	r3, [r4, #20]
    return inst->uwb_dev.status;
   17644:	f8d5 0508 	ldr.w	r0, [r5, #1288]	; 0x508
}
   17648:	b003      	add	sp, #12
   1764a:	bd30      	pop	{r4, r5, pc}
        return inst->uwb_dev.status;
   1764c:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
   17650:	e7fa      	b.n	17648 <dw1000_phy_event_cnt_read+0x4c>
	...

00017654 <dw1000_pkg_init>:
 *
 * @param void
 * @return void
 */
void dw1000_pkg_init(void)
{
   17654:	b508      	push	{r3, lr}
#if defined(MYNEWT)

#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    DIAGMSG("{\"utime\": %lu,\"msg\": \"dw1000_pkg_init\"}\n", dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
   17656:	f7f6 fe6c 	bl	e332 <dpl_cputime_get32>
   1765a:	4601      	mov	r1, r0
   1765c:	4805      	ldr	r0, [pc, #20]	; (17674 <dw1000_pkg_init+0x20>)
   1765e:	f7f6 fde3 	bl	e228 <printf>
#endif

#if MYNEWT_VAL(DW1000_DEVICE_0)
    dw1000_dev_config(hal_dw1000_inst(0));
   17662:	2000      	movs	r0, #0
   17664:	f7fd f962 	bl	1492c <hal_dw1000_inst>
   17668:	f7fc ff54 	bl	14514 <dw1000_dev_config>
        dw1000_dev_config((struct _dw1000_dev_instance_t*)dev);
    }
#endif

#if MYNEWT_VAL(DW1000_CLI)
    dw1000_cli_register();
   1766c:	f000 fa62 	bl	17b34 <dw1000_cli_register>
#endif
}
   17670:	bd08      	pop	{r3, pc}
   17672:	bf00      	nop
   17674:	00024144 	.word	0x00024144

00017678 <dw1000_pkg_down>:

int dw1000_pkg_down(int reason)
{
   17678:	b510      	push	{r4, lr}
   1767a:	4604      	mov	r4, r0
    struct os_dev *dev;
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    DIAGMSG("{\"utime\": %"PRIu32",\"msg\": \"dw1000_pkg_down\"}\n", dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
   1767c:	f7f6 fe59 	bl	e332 <dpl_cputime_get32>
   17680:	4601      	mov	r1, r0
   17682:	480d      	ldr	r0, [pc, #52]	; (176b8 <dw1000_pkg_down+0x40>)
   17684:	f7f6 fdd0 	bl	e228 <printf>
#endif

    dev = os_dev_lookup("dw1000_0");
   17688:	480c      	ldr	r0, [pc, #48]	; (176bc <dw1000_pkg_down+0x44>)
   1768a:	f7f1 ffdb 	bl	9644 <os_dev_lookup>
    if (dev) {
   1768e:	b108      	cbz	r0, 17694 <dw1000_pkg_down+0x1c>
        dw1000_dev_deinit((struct _dw1000_dev_instance_t *)dev);
   17690:	f7fd f8fa 	bl	14888 <dw1000_dev_deinit>
    }
    dev = os_dev_lookup("dw1000_1");
   17694:	480a      	ldr	r0, [pc, #40]	; (176c0 <dw1000_pkg_down+0x48>)
   17696:	f7f1 ffd5 	bl	9644 <os_dev_lookup>
    if (dev) {
   1769a:	b108      	cbz	r0, 176a0 <dw1000_pkg_down+0x28>
        dw1000_dev_deinit((struct _dw1000_dev_instance_t *)dev);
   1769c:	f7fd f8f4 	bl	14888 <dw1000_dev_deinit>
    }
    dev = os_dev_lookup("dw1000_2");
   176a0:	4808      	ldr	r0, [pc, #32]	; (176c4 <dw1000_pkg_down+0x4c>)
   176a2:	f7f1 ffcf 	bl	9644 <os_dev_lookup>
    if (dev) {
   176a6:	b108      	cbz	r0, 176ac <dw1000_pkg_down+0x34>
        dw1000_dev_deinit((struct _dw1000_dev_instance_t *)dev);
   176a8:	f7fd f8ee 	bl	14888 <dw1000_dev_deinit>
    }
#if MYNEWT_VAL(DW1000_CLI)
    dw1000_cli_down(reason);
   176ac:	4620      	mov	r0, r4
   176ae:	f000 fa49 	bl	17b44 <dw1000_cli_down>
#endif
    return 0;
}
   176b2:	2000      	movs	r0, #0
   176b4:	bd10      	pop	{r4, pc}
   176b6:	bf00      	nop
   176b8:	00024170 	.word	0x00024170
   176bc:	00023e58 	.word	0x00023e58
   176c0:	0002419c 	.word	0x0002419c
   176c4:	000241a8 	.word	0x000241a8

000176c8 <dw1000_cli_too_few_args>:
#endif

#ifndef __KERNEL__
static void
dw1000_cli_too_few_args(struct streamer *streamer)
{
   176c8:	b508      	push	{r3, lr}
    streamer_printf(streamer, "Too few args\n");
   176ca:	4902      	ldr	r1, [pc, #8]	; (176d4 <dw1000_cli_too_few_args+0xc>)
   176cc:	f7fa fe25 	bl	1231a <streamer_printf>
}
   176d0:	bd08      	pop	{r3, pc}
   176d2:	bf00      	nop
   176d4:	000241b4 	.word	0x000241b4

000176d8 <dw1000_cli_dump_registers>:
{
   176d8:	b570      	push	{r4, r5, r6, lr}
   176da:	b082      	sub	sp, #8
   176dc:	4605      	mov	r5, r0
   176de:	460e      	mov	r6, r1
    for(i=0; i<0x37; i++)
   176e0:	2400      	movs	r4, #0
   176e2:	e00e      	b.n	17702 <dw1000_cli_dump_registers+0x2a>
            reg = dw1000_read_reg(inst, i, 0, 4);
   176e4:	2304      	movs	r3, #4
   176e6:	2200      	movs	r2, #0
   176e8:	b2a1      	uxth	r1, r4
   176ea:	4628      	mov	r0, r5
   176ec:	f7fc fc96 	bl	1401c <dw1000_read_reg>
            streamer_printf(streamer, "{\"reg[%02X]\"=\"0x%08llX\"}\n",i,reg&0xffffffff);
   176f0:	9000      	str	r0, [sp, #0]
   176f2:	2300      	movs	r3, #0
   176f4:	9301      	str	r3, [sp, #4]
   176f6:	4622      	mov	r2, r4
   176f8:	4950      	ldr	r1, [pc, #320]	; (1783c <dw1000_cli_dump_registers+0x164>)
   176fa:	4630      	mov	r0, r6
   176fc:	f7fa fe0d 	bl	1231a <streamer_printf>
    for(i=0; i<0x37; i++)
   17700:	3401      	adds	r4, #1
   17702:	2c36      	cmp	r4, #54	; 0x36
   17704:	dc77      	bgt.n	177f6 <dw1000_cli_dump_registers+0x11e>
        if (i==0x05 || i==0x07 || i==0x0B ||
   17706:	2c05      	cmp	r4, #5
   17708:	d0fa      	beq.n	17700 <dw1000_cli_dump_registers+0x28>
   1770a:	2c07      	cmp	r4, #7
   1770c:	d0f8      	beq.n	17700 <dw1000_cli_dump_registers+0x28>
   1770e:	2c0b      	cmp	r4, #11
   17710:	d0f6      	beq.n	17700 <dw1000_cli_dump_registers+0x28>
   17712:	2c16      	cmp	r4, #22
   17714:	d0f4      	beq.n	17700 <dw1000_cli_dump_registers+0x28>
            i==0x16 || i==0x1B || i==0x1C ||
   17716:	2c1b      	cmp	r4, #27
   17718:	d0f2      	beq.n	17700 <dw1000_cli_dump_registers+0x28>
   1771a:	2c1c      	cmp	r4, #28
   1771c:	d0f0      	beq.n	17700 <dw1000_cli_dump_registers+0x28>
   1771e:	2c20      	cmp	r4, #32
   17720:	d0ee      	beq.n	17700 <dw1000_cli_dump_registers+0x28>
            i==0x20 || i==0x22 || i==0x29 ||
   17722:	2c22      	cmp	r4, #34	; 0x22
   17724:	d0ec      	beq.n	17700 <dw1000_cli_dump_registers+0x28>
   17726:	2c29      	cmp	r4, #41	; 0x29
   17728:	d0ea      	beq.n	17700 <dw1000_cli_dump_registers+0x28>
            (i>0x29 && i<0x36)) {
   1772a:	f1a4 032a 	sub.w	r3, r4, #42	; 0x2a
            i==0x20 || i==0x22 || i==0x29 ||
   1772e:	2b0b      	cmp	r3, #11
   17730:	d9e6      	bls.n	17700 <dw1000_cli_dump_registers+0x28>
        switch (i) {
   17732:	2c1f      	cmp	r4, #31
   17734:	d851      	bhi.n	177da <dw1000_cli_dump_registers+0x102>
   17736:	a301      	add	r3, pc, #4	; (adr r3, 1773c <dw1000_cli_dump_registers+0x64>)
   17738:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
   1773c:	000176e5 	.word	0x000176e5
   17740:	000177db 	.word	0x000177db
   17744:	000177db 	.word	0x000177db
   17748:	000176e5 	.word	0x000176e5
   1774c:	000176e5 	.word	0x000176e5
   17750:	000177db 	.word	0x000177db
   17754:	000177bd 	.word	0x000177bd
   17758:	000177db 	.word	0x000177db
   1775c:	000177bd 	.word	0x000177bd
   17760:	000177db 	.word	0x000177db
   17764:	000177bd 	.word	0x000177bd
   17768:	000177db 	.word	0x000177db
   1776c:	000176e5 	.word	0x000176e5
   17770:	000176e5 	.word	0x000176e5
   17774:	000177bd 	.word	0x000177bd
   17778:	000177bd 	.word	0x000177bd
   1777c:	000176e5 	.word	0x000176e5
   17780:	000177db 	.word	0x000177db
   17784:	000177db 	.word	0x000177db
   17788:	000176e5 	.word	0x000176e5
   1778c:	000177bd 	.word	0x000177bd
   17790:	000177bd 	.word	0x000177bd
   17794:	000177db 	.word	0x000177db
   17798:	000177bd 	.word	0x000177bd
   1779c:	000176e5 	.word	0x000176e5
   177a0:	000177bd 	.word	0x000177bd
   177a4:	000176e5 	.word	0x000176e5
   177a8:	000177db 	.word	0x000177db
   177ac:	000177db 	.word	0x000177db
   177b0:	000176e5 	.word	0x000176e5
   177b4:	000176e5 	.word	0x000176e5
   177b8:	000176e5 	.word	0x000176e5
            reg = dw1000_read_reg(inst, i, 0, 5);
   177bc:	2305      	movs	r3, #5
   177be:	2200      	movs	r2, #0
   177c0:	b2a1      	uxth	r1, r4
   177c2:	4628      	mov	r0, r5
   177c4:	f7fc fc2a 	bl	1401c <dw1000_read_reg>
            streamer_printf(streamer, "{\"reg[%02X]\"=\"0x%010llX\"}\n",i,reg&0xffffffffffll);
   177c8:	b2c9      	uxtb	r1, r1
   177ca:	9000      	str	r0, [sp, #0]
   177cc:	9101      	str	r1, [sp, #4]
   177ce:	4622      	mov	r2, r4
   177d0:	491b      	ldr	r1, [pc, #108]	; (17840 <dw1000_cli_dump_registers+0x168>)
   177d2:	4630      	mov	r0, r6
   177d4:	f7fa fda1 	bl	1231a <streamer_printf>
            break;
   177d8:	e792      	b.n	17700 <dw1000_cli_dump_registers+0x28>
            reg = dw1000_read_reg(inst, i, 0, l);
   177da:	2308      	movs	r3, #8
   177dc:	2200      	movs	r2, #0
   177de:	b2a1      	uxth	r1, r4
   177e0:	4628      	mov	r0, r5
   177e2:	f7fc fc1b 	bl	1401c <dw1000_read_reg>
            streamer_printf(streamer, "{\"reg[%02X]\"=\"0x%016llX\"}\n",i,
   177e6:	e9cd 0100 	strd	r0, r1, [sp]
   177ea:	4622      	mov	r2, r4
   177ec:	4915      	ldr	r1, [pc, #84]	; (17844 <dw1000_cli_dump_registers+0x16c>)
   177ee:	4630      	mov	r0, r6
   177f0:	f7fa fd93 	bl	1231a <streamer_printf>
   177f4:	e784      	b.n	17700 <dw1000_cli_dump_registers+0x28>
    streamer_printf(streamer, "{\"inst->irq_sem\"=%d}\n", dpl_sem_get_count(&inst->uwb_dev.irq_sem));
   177f6:	8f6a      	ldrh	r2, [r5, #58]	; 0x3a
   177f8:	4913      	ldr	r1, [pc, #76]	; (17848 <dw1000_cli_dump_registers+0x170>)
   177fa:	4630      	mov	r0, r6
   177fc:	f7fa fd8d 	bl	1231a <streamer_printf>
    streamer_printf(streamer, "{\"inst->tx_sem\"=%d}\n", dpl_sem_get_count(&inst->tx_sem));
   17800:	f8b5 2566 	ldrh.w	r2, [r5, #1382]	; 0x566
   17804:	4911      	ldr	r1, [pc, #68]	; (1784c <dw1000_cli_dump_registers+0x174>)
   17806:	4630      	mov	r0, r6
   17808:	f7fa fd87 	bl	1231a <streamer_printf>
    struct uwb_rng_instance *rng = (struct uwb_rng_instance*)uwb_mac_find_cb_inst_ptr(&inst->uwb_dev, UWBEXT_RNG);
   1780c:	2104      	movs	r1, #4
   1780e:	4628      	mov	r0, r5
   17810:	f7f1 f9f7 	bl	8c02 <uwb_mac_find_cb_inst_ptr>
    if (rng)
   17814:	b128      	cbz	r0, 17822 <dw1000_cli_dump_registers+0x14a>
        streamer_printf(streamer, "{\"rng->sem\"=%d}\n", dpl_sem_get_count(&rng->sem));
   17816:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
   1781a:	490d      	ldr	r1, [pc, #52]	; (17850 <dw1000_cli_dump_registers+0x178>)
   1781c:	4630      	mov	r0, r6
   1781e:	f7fa fd7c 	bl	1231a <streamer_printf>
    struct uwb_ccp_instance *ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(&inst->uwb_dev, UWBEXT_CCP);
   17822:	2101      	movs	r1, #1
   17824:	4628      	mov	r0, r5
   17826:	f7f1 f9ec 	bl	8c02 <uwb_mac_find_cb_inst_ptr>
    if (ccp)
   1782a:	b128      	cbz	r0, 17838 <dw1000_cli_dump_registers+0x160>
        streamer_printf(streamer, "{\"ccp->sem\"=%d}\n", dpl_sem_get_count(&ccp->sem));
   1782c:	f8b0 20b6 	ldrh.w	r2, [r0, #182]	; 0xb6
   17830:	4908      	ldr	r1, [pc, #32]	; (17854 <dw1000_cli_dump_registers+0x17c>)
   17832:	4630      	mov	r0, r6
   17834:	f7fa fd71 	bl	1231a <streamer_printf>
}
   17838:	b002      	add	sp, #8
   1783a:	bd70      	pop	{r4, r5, r6, pc}
   1783c:	000241c4 	.word	0x000241c4
   17840:	000241e0 	.word	0x000241e0
   17844:	000241fc 	.word	0x000241fc
   17848:	00024218 	.word	0x00024218
   1784c:	00024230 	.word	0x00024230
   17850:	00024248 	.word	0x00024248
   17854:	0002425c 	.word	0x0002425c

00017858 <dw1000_cli_dump_address>:
{
   17858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1785c:	b09b      	sub	sp, #108	; 0x6c
   1785e:	9013      	str	r0, [sp, #76]	; 0x4c
   17860:	9114      	str	r1, [sp, #80]	; 0x50
   17862:	9212      	str	r2, [sp, #72]	; 0x48
   17864:	9315      	str	r3, [sp, #84]	; 0x54
    streamer_printf(streamer, "Dump starting at %06"PRIX32":\n", addr);
   17866:	460a      	mov	r2, r1
   17868:	492d      	ldr	r1, [pc, #180]	; (17920 <dw1000_cli_dump_address+0xc8>)
   1786a:	4618      	mov	r0, r3
   1786c:	f7fa fd55 	bl	1231a <streamer_printf>
    for (i=0;i<length;i+=step) {
   17870:	f04f 0800 	mov.w	r8, #0
   17874:	e04d      	b.n	17912 <dw1000_cli_dump_address+0xba>
        memset(b,0,sizeof(b));
   17876:	2300      	movs	r3, #0
   17878:	9316      	str	r3, [sp, #88]	; 0x58
   1787a:	9317      	str	r3, [sp, #92]	; 0x5c
   1787c:	9318      	str	r3, [sp, #96]	; 0x60
   1787e:	9319      	str	r3, [sp, #100]	; 0x64
        dw1000_read(inst, addr, i, b, step);
   17880:	2310      	movs	r3, #16
   17882:	9300      	str	r3, [sp, #0]
   17884:	ab16      	add	r3, sp, #88	; 0x58
   17886:	fa1f f288 	uxth.w	r2, r8
   1788a:	f8bd 1050 	ldrh.w	r1, [sp, #80]	; 0x50
   1788e:	9813      	ldr	r0, [sp, #76]	; 0x4c
   17890:	f7fc fafa 	bl	13e88 <dw1000_read>
               i, b[0], b[1], b[2], b[3], b[4], b[5], b[6], b[7],
   17894:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
   17898:	9310      	str	r3, [sp, #64]	; 0x40
   1789a:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
   1789e:	f89d 205b 	ldrb.w	r2, [sp, #91]	; 0x5b
   178a2:	9211      	str	r2, [sp, #68]	; 0x44
   178a4:	f89d 105c 	ldrb.w	r1, [sp, #92]	; 0x5c
   178a8:	f89d 005d 	ldrb.w	r0, [sp, #93]	; 0x5d
   178ac:	f89d 405e 	ldrb.w	r4, [sp, #94]	; 0x5e
   178b0:	f89d 505f 	ldrb.w	r5, [sp, #95]	; 0x5f
               b[8], b[9], b[10], b[11], b[12], b[13], b[14], b[15]);
   178b4:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
   178b8:	f89d 7061 	ldrb.w	r7, [sp, #97]	; 0x61
   178bc:	f89d c062 	ldrb.w	ip, [sp, #98]	; 0x62
   178c0:	f89d e063 	ldrb.w	lr, [sp, #99]	; 0x63
   178c4:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
   178c8:	f89d 9065 	ldrb.w	r9, [sp, #101]	; 0x65
   178cc:	f89d a066 	ldrb.w	sl, [sp, #102]	; 0x66
   178d0:	f89d b067 	ldrb.w	fp, [sp, #103]	; 0x67
        streamer_printf(streamer, "%04X: %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n",
   178d4:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
   178d8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   178dc:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
   178e0:	920b      	str	r2, [sp, #44]	; 0x2c
   178e2:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
   178e6:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   178ea:	9708      	str	r7, [sp, #32]
   178ec:	9607      	str	r6, [sp, #28]
   178ee:	9506      	str	r5, [sp, #24]
   178f0:	9405      	str	r4, [sp, #20]
   178f2:	9004      	str	r0, [sp, #16]
   178f4:	9103      	str	r1, [sp, #12]
   178f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   178f8:	9202      	str	r2, [sp, #8]
   178fa:	9301      	str	r3, [sp, #4]
   178fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   178fe:	9300      	str	r3, [sp, #0]
   17900:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   17904:	4642      	mov	r2, r8
   17906:	4907      	ldr	r1, [pc, #28]	; (17924 <dw1000_cli_dump_address+0xcc>)
   17908:	9815      	ldr	r0, [sp, #84]	; 0x54
   1790a:	f7fa fd06 	bl	1231a <streamer_printf>
    for (i=0;i<length;i+=step) {
   1790e:	f108 0810 	add.w	r8, r8, #16
   17912:	9b12      	ldr	r3, [sp, #72]	; 0x48
   17914:	4543      	cmp	r3, r8
   17916:	dcae      	bgt.n	17876 <dw1000_cli_dump_address+0x1e>
}
   17918:	b01b      	add	sp, #108	; 0x6c
   1791a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1791e:	bf00      	nop
   17920:	00024270 	.word	0x00024270
   17924:	0002428c 	.word	0x0002428c

00017928 <dw1000_cli_cmd>:
#endif

static int
dw1000_cli_cmd(const struct shell_cmd *cmd, int argc, char **argv, struct streamer *streamer)
{
   17928:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1792c:	b085      	sub	sp, #20
   1792e:	461f      	mov	r7, r3
#ifndef __KERNEL__
    struct _dw1000_dev_instance_t * inst = 0;
    uint16_t inst_n;

    if (argc < 2) {
   17930:	2901      	cmp	r1, #1
   17932:	dd1a      	ble.n	1796a <dw1000_cli_cmd+0x42>
   17934:	460c      	mov	r4, r1
   17936:	4615      	mov	r5, r2
        dw1000_cli_too_few_args(streamer);
        return 0;
    }

    if (!strcmp(argv[1], "dump")) {
   17938:	6856      	ldr	r6, [r2, #4]
   1793a:	4976      	ldr	r1, [pc, #472]	; (17b14 <dw1000_cli_cmd+0x1ec>)
   1793c:	4630      	mov	r0, r6
   1793e:	f7f6 f88b 	bl	da58 <strcmp>
   17942:	b9e8      	cbnz	r0, 17980 <dw1000_cli_cmd+0x58>
        if (argc < 3) {
   17944:	2c02      	cmp	r4, #2
   17946:	dc14      	bgt.n	17972 <dw1000_cli_cmd+0x4a>
            inst_n=0;
   17948:	2000      	movs	r0, #0
        } else {
            inst_n = strtol(argv[2], NULL, 0);
        }
        inst = hal_dw1000_inst(inst_n);
   1794a:	b2c0      	uxtb	r0, r0
   1794c:	f7fc ffee 	bl	1492c <hal_dw1000_inst>
   17950:	4604      	mov	r4, r0
        console_no_ticks();
   17952:	f7f8 f8d5 	bl	fb00 <console_no_ticks>
        dw1000_cli_dump_registers(inst, streamer);
   17956:	4639      	mov	r1, r7
   17958:	4620      	mov	r0, r4
   1795a:	f7ff febd 	bl	176d8 <dw1000_cli_dump_registers>
        console_yes_ticks();
   1795e:	f7f8 f8d5 	bl	fb0c <console_yes_ticks>
        streamer_printf(streamer, "Unknown cmd\n");
    }
#endif  /* ifndef __KERNEL__ */

    return 0;
}
   17962:	2000      	movs	r0, #0
   17964:	b005      	add	sp, #20
   17966:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        dw1000_cli_too_few_args(streamer);
   1796a:	4618      	mov	r0, r3
   1796c:	f7ff feac 	bl	176c8 <dw1000_cli_too_few_args>
        return 0;
   17970:	e7f7      	b.n	17962 <dw1000_cli_cmd+0x3a>
            inst_n = strtol(argv[2], NULL, 0);
   17972:	2200      	movs	r2, #0
   17974:	4611      	mov	r1, r2
   17976:	68a8      	ldr	r0, [r5, #8]
   17978:	f004 fd7d 	bl	1c476 <strtol>
   1797c:	b280      	uxth	r0, r0
   1797e:	e7e4      	b.n	1794a <dw1000_cli_cmd+0x22>
    } else if (!strcmp(argv[1], "da")) {
   17980:	4965      	ldr	r1, [pc, #404]	; (17b18 <dw1000_cli_cmd+0x1f0>)
   17982:	4630      	mov	r0, r6
   17984:	f7f6 f868 	bl	da58 <strcmp>
   17988:	bb08      	cbnz	r0, 179ce <dw1000_cli_cmd+0xa6>
        if (argc<3) {
   1798a:	2c02      	cmp	r4, #2
   1798c:	dde9      	ble.n	17962 <dw1000_cli_cmd+0x3a>
        inst_n = strtol(argv[2], NULL, 0);
   1798e:	2200      	movs	r2, #0
   17990:	4611      	mov	r1, r2
   17992:	68a8      	ldr	r0, [r5, #8]
   17994:	f004 fd6f 	bl	1c476 <strtol>
   17998:	4680      	mov	r8, r0
        uint32_t addr = strtol(argv[3], NULL, 0);
   1799a:	2200      	movs	r2, #0
   1799c:	4611      	mov	r1, r2
   1799e:	68e8      	ldr	r0, [r5, #12]
   179a0:	f004 fd69 	bl	1c476 <strtol>
   179a4:	4606      	mov	r6, r0
        if (argc>4) {
   179a6:	2c04      	cmp	r4, #4
   179a8:	dc0a      	bgt.n	179c0 <dw1000_cli_cmd+0x98>
        int length = 128;
   179aa:	2480      	movs	r4, #128	; 0x80
        inst = hal_dw1000_inst(inst_n);
   179ac:	fa5f f088 	uxtb.w	r0, r8
   179b0:	f7fc ffbc 	bl	1492c <hal_dw1000_inst>
        dw1000_cli_dump_address(inst, addr, length, streamer);
   179b4:	463b      	mov	r3, r7
   179b6:	b2a2      	uxth	r2, r4
   179b8:	4631      	mov	r1, r6
   179ba:	f7ff ff4d 	bl	17858 <dw1000_cli_dump_address>
   179be:	e7d0      	b.n	17962 <dw1000_cli_cmd+0x3a>
            length = strtol(argv[4], NULL, 0);
   179c0:	2200      	movs	r2, #0
   179c2:	4611      	mov	r1, r2
   179c4:	6928      	ldr	r0, [r5, #16]
   179c6:	f004 fd56 	bl	1c476 <strtol>
   179ca:	4604      	mov	r4, r0
   179cc:	e7ee      	b.n	179ac <dw1000_cli_cmd+0x84>
    } else if (!strcmp(argv[1], "cw")) {
   179ce:	4953      	ldr	r1, [pc, #332]	; (17b1c <dw1000_cli_cmd+0x1f4>)
   179d0:	4630      	mov	r0, r6
   179d2:	f7f6 f841 	bl	da58 <strcmp>
   179d6:	2800      	cmp	r0, #0
   179d8:	d034      	beq.n	17a44 <dw1000_cli_cmd+0x11c>
    } else if (!strcmp(argv[1], "wr")) {
   179da:	4951      	ldr	r1, [pc, #324]	; (17b20 <dw1000_cli_cmd+0x1f8>)
   179dc:	4630      	mov	r0, r6
   179de:	f7f6 f83b 	bl	da58 <strcmp>
   179e2:	2800      	cmp	r0, #0
   179e4:	d15e      	bne.n	17aa4 <dw1000_cli_cmd+0x17c>
        if (argc < 7) {
   179e6:	2c06      	cmp	r4, #6
   179e8:	ddbb      	ble.n	17962 <dw1000_cli_cmd+0x3a>
        inst_n = strtol(argv[2], NULL, 0);
   179ea:	2200      	movs	r2, #0
   179ec:	4611      	mov	r1, r2
   179ee:	68a8      	ldr	r0, [r5, #8]
   179f0:	f004 fd41 	bl	1c476 <strtol>
   179f4:	4680      	mov	r8, r0
        uint32_t addr = strtol(argv[3], NULL, 0);
   179f6:	2200      	movs	r2, #0
   179f8:	4611      	mov	r1, r2
   179fa:	68e8      	ldr	r0, [r5, #12]
   179fc:	f004 fd3b 	bl	1c476 <strtol>
   17a00:	4606      	mov	r6, r0
        uint32_t sub  = strtol(argv[4], NULL, 0);
   17a02:	2200      	movs	r2, #0
   17a04:	4611      	mov	r1, r2
   17a06:	6928      	ldr	r0, [r5, #16]
   17a08:	f004 fd35 	bl	1c476 <strtol>
   17a0c:	4607      	mov	r7, r0
        uint64_t val  = strtol(argv[5], NULL, 0);
   17a0e:	2200      	movs	r2, #0
   17a10:	4611      	mov	r1, r2
   17a12:	6968      	ldr	r0, [r5, #20]
   17a14:	f004 fd2f 	bl	1c476 <strtol>
   17a18:	4604      	mov	r4, r0
   17a1a:	ea4f 79e0 	mov.w	r9, r0, asr #31
        int length = strtol(argv[6], NULL, 0);
   17a1e:	2200      	movs	r2, #0
   17a20:	4611      	mov	r1, r2
   17a22:	69a8      	ldr	r0, [r5, #24]
   17a24:	f004 fd27 	bl	1c476 <strtol>
   17a28:	4605      	mov	r5, r0
        dw1000_write_reg(hal_dw1000_inst(inst_n), addr, sub, val, length);
   17a2a:	fa5f f088 	uxtb.w	r0, r8
   17a2e:	f7fc ff7d 	bl	1492c <hal_dw1000_inst>
   17a32:	9502      	str	r5, [sp, #8]
   17a34:	9400      	str	r4, [sp, #0]
   17a36:	f8cd 9004 	str.w	r9, [sp, #4]
   17a3a:	b2ba      	uxth	r2, r7
   17a3c:	b2b1      	uxth	r1, r6
   17a3e:	f7fc fb5d 	bl	140fc <dw1000_write_reg>
   17a42:	e78e      	b.n	17962 <dw1000_cli_cmd+0x3a>
        inst_n = strtol(argv[2], NULL, 0);
   17a44:	2200      	movs	r2, #0
   17a46:	4611      	mov	r1, r2
   17a48:	68a8      	ldr	r0, [r5, #8]
   17a4a:	f004 fd14 	bl	1c476 <strtol>
   17a4e:	4605      	mov	r5, r0
        inst = hal_dw1000_inst(inst_n);
   17a50:	b2c0      	uxtb	r0, r0
   17a52:	f7fc ff6b 	bl	1492c <hal_dw1000_inst>
   17a56:	4604      	mov	r4, r0
        hal_gpio_irq_disable(inst->irq_pin);
   17a58:	f890 055d 	ldrb.w	r0, [r0, #1373]	; 0x55d
   17a5c:	f7f1 faca 	bl	8ff4 <hal_gpio_irq_disable>
        dw1000_write_reg(inst, SYS_MASK_ID, 0, 0, sizeof(uint32_t));
   17a60:	2304      	movs	r3, #4
   17a62:	9302      	str	r3, [sp, #8]
   17a64:	2200      	movs	r2, #0
   17a66:	2300      	movs	r3, #0
   17a68:	e9cd 2300 	strd	r2, r3, [sp]
   17a6c:	210e      	movs	r1, #14
   17a6e:	4620      	mov	r0, r4
   17a70:	f7fc fb44 	bl	140fc <dw1000_write_reg>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TRXOFF, sizeof(uint8_t));
   17a74:	2301      	movs	r3, #1
   17a76:	9302      	str	r3, [sp, #8]
   17a78:	2240      	movs	r2, #64	; 0x40
   17a7a:	2300      	movs	r3, #0
   17a7c:	e9cd 2300 	strd	r2, r3, [sp]
   17a80:	2200      	movs	r2, #0
   17a82:	210d      	movs	r1, #13
   17a84:	4620      	mov	r0, r4
   17a86:	f7fc fb39 	bl	140fc <dw1000_write_reg>
        dw1000_configcwmode(inst, inst->uwb_dev.config.channel);
   17a8a:	f894 150c 	ldrb.w	r1, [r4, #1292]	; 0x50c
   17a8e:	4620      	mov	r0, r4
   17a90:	f7ff f8e4 	bl	16c5c <dw1000_configcwmode>
        streamer_printf(streamer, "Device[%d] now in CW mode on ch %d. Reset to continue\n",
   17a94:	f894 350c 	ldrb.w	r3, [r4, #1292]	; 0x50c
   17a98:	b2aa      	uxth	r2, r5
   17a9a:	4922      	ldr	r1, [pc, #136]	; (17b24 <dw1000_cli_cmd+0x1fc>)
   17a9c:	4638      	mov	r0, r7
   17a9e:	f7fa fc3c 	bl	1231a <streamer_printf>
   17aa2:	e75e      	b.n	17962 <dw1000_cli_cmd+0x3a>
    } else if (!strcmp(argv[1], "rd")) {
   17aa4:	4920      	ldr	r1, [pc, #128]	; (17b28 <dw1000_cli_cmd+0x200>)
   17aa6:	4630      	mov	r0, r6
   17aa8:	f7f5 ffd6 	bl	da58 <strcmp>
   17aac:	bb60      	cbnz	r0, 17b08 <dw1000_cli_cmd+0x1e0>
        if (argc < 6) {
   17aae:	2c05      	cmp	r4, #5
   17ab0:	f77f af57 	ble.w	17962 <dw1000_cli_cmd+0x3a>
        inst_n = strtol(argv[2], NULL, 0);
   17ab4:	2200      	movs	r2, #0
   17ab6:	4611      	mov	r1, r2
   17ab8:	68a8      	ldr	r0, [r5, #8]
   17aba:	f004 fcdc 	bl	1c476 <strtol>
   17abe:	4680      	mov	r8, r0
        uint32_t addr = strtol(argv[3], NULL, 0);
   17ac0:	2200      	movs	r2, #0
   17ac2:	4611      	mov	r1, r2
   17ac4:	68e8      	ldr	r0, [r5, #12]
   17ac6:	f004 fcd6 	bl	1c476 <strtol>
   17aca:	4604      	mov	r4, r0
        uint16_t sub  = strtol(argv[4], NULL, 0);
   17acc:	2200      	movs	r2, #0
   17ace:	4611      	mov	r1, r2
   17ad0:	6928      	ldr	r0, [r5, #16]
   17ad2:	f004 fcd0 	bl	1c476 <strtol>
   17ad6:	b286      	uxth	r6, r0
        int length = strtol(argv[5], NULL, 0);
   17ad8:	2200      	movs	r2, #0
   17ada:	4611      	mov	r1, r2
   17adc:	6968      	ldr	r0, [r5, #20]
   17ade:	f004 fcca 	bl	1c476 <strtol>
   17ae2:	4605      	mov	r5, r0
        uint64_t reg = dw1000_read_reg(hal_dw1000_inst(inst_n), addr, sub, length);
   17ae4:	fa5f f088 	uxtb.w	r0, r8
   17ae8:	f7fc ff20 	bl	1492c <hal_dw1000_inst>
   17aec:	462b      	mov	r3, r5
   17aee:	4632      	mov	r2, r6
   17af0:	b2a1      	uxth	r1, r4
   17af2:	f7fc fa93 	bl	1401c <dw1000_read_reg>
        streamer_printf(streamer, "0x%06"PRIX32",0x%04X: 0x%"PRIX64"\n", addr, sub, reg);
   17af6:	e9cd 0100 	strd	r0, r1, [sp]
   17afa:	4633      	mov	r3, r6
   17afc:	4622      	mov	r2, r4
   17afe:	490b      	ldr	r1, [pc, #44]	; (17b2c <dw1000_cli_cmd+0x204>)
   17b00:	4638      	mov	r0, r7
   17b02:	f7fa fc0a 	bl	1231a <streamer_printf>
   17b06:	e72c      	b.n	17962 <dw1000_cli_cmd+0x3a>
        streamer_printf(streamer, "Unknown cmd\n");
   17b08:	4909      	ldr	r1, [pc, #36]	; (17b30 <dw1000_cli_cmd+0x208>)
   17b0a:	4638      	mov	r0, r7
   17b0c:	f7fa fc05 	bl	1231a <streamer_printf>
   17b10:	e727      	b.n	17962 <dw1000_cli_cmd+0x3a>
   17b12:	bf00      	nop
   17b14:	0002327c 	.word	0x0002327c
   17b18:	000242e4 	.word	0x000242e4
   17b1c:	000242e8 	.word	0x000242e8
   17b20:	00024324 	.word	0x00024324
   17b24:	000242ec 	.word	0x000242ec
   17b28:	00024328 	.word	0x00024328
   17b2c:	0002432c 	.word	0x0002432c
   17b30:	00024344 	.word	0x00024344

00017b34 <dw1000_cli_register>:
#endif


int
dw1000_cli_register(void)
{
   17b34:	b508      	push	{r3, lr}
#if MYNEWT_VAL(DW1000_CLI)
    int rc;
    rc = shell_cmd_register(&shell_dw1000_cmd);
   17b36:	4802      	ldr	r0, [pc, #8]	; (17b40 <dw1000_cli_register+0xc>)
   17b38:	f7f8 fe1c 	bl	10774 <shell_cmd_register>
#endif
    return rc;
#else
    return 0;
#endif
}
   17b3c:	bd08      	pop	{r3, pc}
   17b3e:	bf00      	nop
   17b40:	20000d68 	.word	0x20000d68

00017b44 <dw1000_cli_down>:
        dw1000_sysfs_deinit(i);
    }
    dw1000_debugfs_deinit();
#endif
    return 0;
}
   17b44:	2000      	movs	r0, #0
   17b46:	4770      	bx	lr

00017b48 <dw1000_gpio_config_leds>:
 *          - bit 2 to 7: reserved
 *
 * @return void
 */
void dw1000_gpio_config_leds(struct _dw1000_dev_instance_t * inst, dw1000_led_modes_t mode)
{
   17b48:	b5f0      	push	{r4, r5, r6, r7, lr}
   17b4a:	b085      	sub	sp, #20
   17b4c:	4604      	mov	r4, r0
    uint32_t reg;

    if (mode & DWT_LEDS_ENABLE){
   17b4e:	f011 0f02 	tst.w	r1, #2
   17b52:	d050      	beq.n	17bf6 <dw1000_gpio_config_leds+0xae>
   17b54:	460d      	mov	r5, r1
        // Set up MFIO for LED output.
        reg = (uint32_t) dw1000_read_reg(inst, GPIO_CTRL_ID, GPIO_MODE_OFFSET, sizeof(uint32_t));
   17b56:	2304      	movs	r3, #4
   17b58:	2200      	movs	r2, #0
   17b5a:	2126      	movs	r1, #38	; 0x26
   17b5c:	f7fc fa5e 	bl	1401c <dw1000_read_reg>
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
   17b60:	f420 5070 	bic.w	r0, r0, #15360	; 0x3c00
        reg |= (GPIO_PIN2_RXLED | GPIO_PIN3_TXLED);
   17b64:	f440 50a0 	orr.w	r0, r0, #5120	; 0x1400
        dw1000_write_reg(inst, GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg, sizeof(uint32_t));
   17b68:	2704      	movs	r7, #4
   17b6a:	9702      	str	r7, [sp, #8]
   17b6c:	2600      	movs	r6, #0
   17b6e:	9000      	str	r0, [sp, #0]
   17b70:	9601      	str	r6, [sp, #4]
   17b72:	4632      	mov	r2, r6
   17b74:	2126      	movs	r1, #38	; 0x26
   17b76:	4620      	mov	r0, r4
   17b78:	f7fc fac0 	bl	140fc <dw1000_write_reg>

        // Enable LP Oscillator to run from counter and turn on de-bounce clock.
        reg = (uint32_t) dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint32_t));
   17b7c:	463b      	mov	r3, r7
   17b7e:	4632      	mov	r2, r6
   17b80:	2136      	movs	r1, #54	; 0x36
   17b82:	4620      	mov	r0, r4
   17b84:	f7fc fa4a 	bl	1401c <dw1000_read_reg>
        reg |= (PMSC_CTRL0_GPDCE | PMSC_CTRL0_KHZCLEN);
   17b88:	f440 0004 	orr.w	r0, r0, #8650752	; 0x840000
        dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, reg, sizeof(uint32_t));
   17b8c:	9702      	str	r7, [sp, #8]
   17b8e:	9000      	str	r0, [sp, #0]
   17b90:	9601      	str	r6, [sp, #4]
   17b92:	4632      	mov	r2, r6
   17b94:	2136      	movs	r1, #54	; 0x36
   17b96:	4620      	mov	r0, r4
   17b98:	f7fc fab0 	bl	140fc <dw1000_write_reg>
        dw1000_write_reg(inst, PMSC_ID, PMSC_LEDC_OFFSET, PMSC_LEDC_BLNKEN | PMSC_LEDC_BLINK_TIME_DEF, sizeof(uint32_t));
   17b9c:	9702      	str	r7, [sp, #8]
   17b9e:	f44f 7288 	mov.w	r2, #272	; 0x110
   17ba2:	2300      	movs	r3, #0
   17ba4:	e9cd 2300 	strd	r2, r3, [sp]
   17ba8:	2228      	movs	r2, #40	; 0x28
   17baa:	2136      	movs	r1, #54	; 0x36
   17bac:	4620      	mov	r0, r4
   17bae:	f7fc faa5 	bl	140fc <dw1000_write_reg>

        if (mode & DWT_LEDS_INIT_BLINK){
   17bb2:	f015 0f04 	tst.w	r5, #4
   17bb6:	d02e      	beq.n	17c16 <dw1000_gpio_config_leds+0xce>
            // Single blink sign-of-life.
            reg = (uint32_t) dw1000_read_reg(inst, PMSC_ID, PMSC_LEDC_OFFSET, sizeof(uint32_t));
   17bb8:	463b      	mov	r3, r7
   17bba:	2228      	movs	r2, #40	; 0x28
   17bbc:	2136      	movs	r1, #54	; 0x36
   17bbe:	4620      	mov	r0, r4
   17bc0:	f7fc fa2c 	bl	1401c <dw1000_read_reg>
   17bc4:	4605      	mov	r5, r0
            reg |= PMSC_LEDC_BLINK_NOW_ALL;
   17bc6:	f440 2370 	orr.w	r3, r0, #983040	; 0xf0000

            dw1000_write_reg(inst, PMSC_ID, PMSC_LEDC_OFFSET, reg, sizeof(uint32_t));
   17bca:	9702      	str	r7, [sp, #8]
   17bcc:	9300      	str	r3, [sp, #0]
   17bce:	9601      	str	r6, [sp, #4]
   17bd0:	2228      	movs	r2, #40	; 0x28
   17bd2:	2136      	movs	r1, #54	; 0x36
   17bd4:	4620      	mov	r0, r4
   17bd6:	f7fc fa91 	bl	140fc <dw1000_write_reg>
            reg &= ~PMSC_LEDC_BLINK_NOW_ALL;
            dpl_cputime_delay_usecs(10);
   17bda:	200a      	movs	r0, #10
   17bdc:	f7f6 fbb9 	bl	e352 <dpl_cputime_delay_usecs>
            dw1000_write_reg(inst, PMSC_ID, PMSC_LEDC_OFFSET, reg, sizeof(uint32_t));
   17be0:	9702      	str	r7, [sp, #8]
   17be2:	f425 2570 	bic.w	r5, r5, #983040	; 0xf0000
   17be6:	9500      	str	r5, [sp, #0]
   17be8:	9601      	str	r6, [sp, #4]
   17bea:	2228      	movs	r2, #40	; 0x28
   17bec:	2136      	movs	r1, #54	; 0x36
   17bee:	4620      	mov	r0, r4
   17bf0:	f7fc fa84 	bl	140fc <dw1000_write_reg>
   17bf4:	e00f      	b.n	17c16 <dw1000_gpio_config_leds+0xce>
        }
    }else{
        // Clear the GPIO bits that are used for LED control.
        reg = dw1000_read_reg(inst,GPIO_CTRL_ID, GPIO_MODE_OFFSET,sizeof(uint32_t));
   17bf6:	2304      	movs	r3, #4
   17bf8:	2200      	movs	r2, #0
   17bfa:	2126      	movs	r1, #38	; 0x26
   17bfc:	f7fc fa0e 	bl	1401c <dw1000_read_reg>
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
   17c00:	f420 5070 	bic.w	r0, r0, #15360	; 0x3c00
        dw1000_write_reg(inst, GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg, sizeof(uint32_t));
   17c04:	2304      	movs	r3, #4
   17c06:	9302      	str	r3, [sp, #8]
   17c08:	2200      	movs	r2, #0
   17c0a:	9000      	str	r0, [sp, #0]
   17c0c:	9201      	str	r2, [sp, #4]
   17c0e:	2126      	movs	r1, #38	; 0x26
   17c10:	4620      	mov	r0, r4
   17c12:	f7fc fa73 	bl	140fc <dw1000_write_reg>
    }
}
   17c16:	b005      	add	sp, #20
   17c18:	bdf0      	pop	{r4, r5, r6, r7, pc}

00017c1a <_dw1000_otp_read>:
 * @param address  From where it starts reading
 * @return data value read from an OTP location.
 */

uint32_t _dw1000_otp_read(struct _dw1000_dev_instance_t * inst, uint16_t address)
{
   17c1a:	b530      	push	{r4, r5, lr}
   17c1c:	b085      	sub	sp, #20
   17c1e:	4604      	mov	r4, r0
    // Write the address
    dw1000_write_reg(inst, OTP_IF_ID, OTP_ADDR, address, sizeof(uint16_t));
   17c20:	2302      	movs	r3, #2
   17c22:	9302      	str	r3, [sp, #8]
   17c24:	9100      	str	r1, [sp, #0]
   17c26:	2300      	movs	r3, #0
   17c28:	9301      	str	r3, [sp, #4]
   17c2a:	2204      	movs	r2, #4
   17c2c:	212d      	movs	r1, #45	; 0x2d
   17c2e:	f7fc fa65 	bl	140fc <dw1000_write_reg>

    // Perform OTP Read - Manual read mode has to be set
    dw1000_write_reg(inst, OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN, sizeof(uint8_t));
   17c32:	2501      	movs	r5, #1
   17c34:	9502      	str	r5, [sp, #8]
   17c36:	2203      	movs	r2, #3
   17c38:	2300      	movs	r3, #0
   17c3a:	e9cd 2300 	strd	r2, r3, [sp]
   17c3e:	2206      	movs	r2, #6
   17c40:	212d      	movs	r1, #45	; 0x2d
   17c42:	4620      	mov	r0, r4
   17c44:	f7fc fa5a 	bl	140fc <dw1000_write_reg>
    dw1000_write_reg(inst, OTP_IF_ID, OTP_CTRL, 0x0, sizeof(uint8_t)); // OTPREAD is self clearing but OTPRDEN is not
   17c48:	9502      	str	r5, [sp, #8]
   17c4a:	2200      	movs	r2, #0
   17c4c:	2300      	movs	r3, #0
   17c4e:	e9cd 2300 	strd	r2, r3, [sp]
   17c52:	2206      	movs	r2, #6
   17c54:	212d      	movs	r1, #45	; 0x2d
   17c56:	4620      	mov	r0, r4
   17c58:	f7fc fa50 	bl	140fc <dw1000_write_reg>

    // Read data, available 40ns after rising edge of OTP_READ
    dpl_cputime_delay_usecs(1);
   17c5c:	4628      	mov	r0, r5
   17c5e:	f7f6 fb78 	bl	e352 <dpl_cputime_delay_usecs>
    return  (uint32_t) dw1000_read_reg(inst, OTP_IF_ID, OTP_RDAT, sizeof(uint32_t));
   17c62:	2304      	movs	r3, #4
   17c64:	220a      	movs	r2, #10
   17c66:	212d      	movs	r1, #45	; 0x2d
   17c68:	4620      	mov	r0, r4
   17c6a:	f7fc f9d7 	bl	1401c <dw1000_read_reg>
}
   17c6e:	b005      	add	sp, #20
   17c70:	bd30      	pop	{r4, r5, pc}
	...

00017c74 <nrf52k_flash_wait_ready>:
static int
nrf52k_flash_wait_ready(void)
{
    int i;

    for (i = 0; i < 100000; i++) {
   17c74:	2300      	movs	r3, #0
   17c76:	4a07      	ldr	r2, [pc, #28]	; (17c94 <nrf52k_flash_wait_ready+0x20>)
   17c78:	4293      	cmp	r3, r2
   17c7a:	dc06      	bgt.n	17c8a <nrf52k_flash_wait_ready+0x16>
        if (NRF_NVMC->READY == NVMC_READY_READY_Ready) {
   17c7c:	4a06      	ldr	r2, [pc, #24]	; (17c98 <nrf52k_flash_wait_ready+0x24>)
   17c7e:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
   17c82:	2a01      	cmp	r2, #1
   17c84:	d004      	beq.n	17c90 <nrf52k_flash_wait_ready+0x1c>
    for (i = 0; i < 100000; i++) {
   17c86:	3301      	adds	r3, #1
   17c88:	e7f5      	b.n	17c76 <nrf52k_flash_wait_ready+0x2>
            return 0;
        }
    }
    return -1;
   17c8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17c8e:	4770      	bx	lr
            return 0;
   17c90:	2000      	movs	r0, #0
}
   17c92:	4770      	bx	lr
   17c94:	0001869f 	.word	0x0001869f
   17c98:	4001e000 	.word	0x4001e000

00017c9c <nrf52k_flash_erase_sector>:
    return rc;
}

static int
nrf52k_flash_erase_sector(const struct hal_flash *dev, uint32_t sector_address)
{
   17c9c:	b538      	push	{r3, r4, r5, lr}
   17c9e:	460c      	mov	r4, r1
    int sr;
    int rc = -1;

    if (nrf52k_flash_wait_ready()) {
   17ca0:	f7ff ffe8 	bl	17c74 <nrf52k_flash_wait_ready>
   17ca4:	b9e0      	cbnz	r0, 17ce0 <nrf52k_flash_erase_sector+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   17ca6:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   17caa:	b672      	cpsid	i
        return -1;
    }
    __HAL_DISABLE_INTERRUPTS(sr);
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Een; /* Enable erase OP */
   17cac:	4b0e      	ldr	r3, [pc, #56]	; (17ce8 <nrf52k_flash_erase_sector+0x4c>)
   17cae:	2202      	movs	r2, #2
   17cb0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (nrf52k_flash_wait_ready()) {
   17cb4:	f7ff ffde 	bl	17c74 <nrf52k_flash_wait_ready>
   17cb8:	b140      	cbz	r0, 17ccc <nrf52k_flash_erase_sector+0x30>
    int rc = -1;
   17cba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    if (nrf52k_flash_wait_ready()) {
        goto out;
    }
    rc = 0;
out:
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren; /* Disable erase OP */
   17cbe:	4b0a      	ldr	r3, [pc, #40]	; (17ce8 <nrf52k_flash_erase_sector+0x4c>)
   17cc0:	2200      	movs	r2, #0
   17cc2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   17cc6:	b905      	cbnz	r5, 17cca <nrf52k_flash_erase_sector+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
   17cc8:	b662      	cpsie	i
    return rc;
}
   17cca:	bd38      	pop	{r3, r4, r5, pc}
    NRF_NVMC->ERASEPAGE = sector_address;
   17ccc:	4b06      	ldr	r3, [pc, #24]	; (17ce8 <nrf52k_flash_erase_sector+0x4c>)
   17cce:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    if (nrf52k_flash_wait_ready()) {
   17cd2:	f7ff ffcf 	bl	17c74 <nrf52k_flash_wait_ready>
   17cd6:	2800      	cmp	r0, #0
   17cd8:	d0f1      	beq.n	17cbe <nrf52k_flash_erase_sector+0x22>
    int rc = -1;
   17cda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17cde:	e7ee      	b.n	17cbe <nrf52k_flash_erase_sector+0x22>
        return -1;
   17ce0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17ce4:	e7f1      	b.n	17cca <nrf52k_flash_erase_sector+0x2e>
   17ce6:	bf00      	nop
   17ce8:	4001e000 	.word	0x4001e000

00017cec <nrf52k_flash_init>:

static int
nrf52k_flash_init(const struct hal_flash *dev)
{
    return 0;
}
   17cec:	2000      	movs	r0, #0
   17cee:	4770      	bx	lr

00017cf0 <nrf52k_flash_sector_info>:
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   17cf0:	297f      	cmp	r1, #127	; 0x7f
   17cf2:	dc06      	bgt.n	17d02 <nrf52k_flash_sector_info+0x12>
    *address = idx * NRF52K_FLASH_SECTOR_SZ;
   17cf4:	0309      	lsls	r1, r1, #12
   17cf6:	6011      	str	r1, [r2, #0]
    *sz = NRF52K_FLASH_SECTOR_SZ;
   17cf8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   17cfc:	601a      	str	r2, [r3, #0]
}
   17cfe:	2000      	movs	r0, #0
   17d00:	4770      	bx	lr
{
   17d02:	b508      	push	{r3, lr}
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   17d04:	2300      	movs	r3, #0
   17d06:	461a      	mov	r2, r3
   17d08:	4619      	mov	r1, r3
   17d0a:	4618      	mov	r0, r3
   17d0c:	f7f1 f99e 	bl	904c <__assert_func>

00017d10 <nrf52k_flash_write>:
{
   17d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17d14:	b082      	sub	sp, #8
   17d16:	460d      	mov	r5, r1
   17d18:	4616      	mov	r6, r2
   17d1a:	461c      	mov	r4, r3
    if (nrf52k_flash_wait_ready()) {
   17d1c:	f7ff ffaa 	bl	17c74 <nrf52k_flash_wait_ready>
   17d20:	2800      	cmp	r0, #0
   17d22:	d154      	bne.n	17dce <nrf52k_flash_write+0xbe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   17d24:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   17d28:	b672      	cpsid	i
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen; /* Enable erase OP */
   17d2a:	4b2a      	ldr	r3, [pc, #168]	; (17dd4 <nrf52k_flash_write+0xc4>)
   17d2c:	2201      	movs	r2, #1
   17d2e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (tmp) {
   17d32:	f015 0803 	ands.w	r8, r5, #3
   17d36:	d10a      	bne.n	17d4e <nrf52k_flash_write+0x3e>
    while (num_bytes >= sizeof(uint32_t)) {
   17d38:	2c03      	cmp	r4, #3
   17d3a:	d924      	bls.n	17d86 <nrf52k_flash_write+0x76>
        if (nrf52k_flash_wait_ready()) {
   17d3c:	f7ff ff9a 	bl	17c74 <nrf52k_flash_wait_ready>
   17d40:	bbb8      	cbnz	r0, 17db2 <nrf52k_flash_write+0xa2>
        *(uint32_t *)address = *(uint32_t *)src;
   17d42:	f856 3b04 	ldr.w	r3, [r6], #4
   17d46:	f845 3b04 	str.w	r3, [r5], #4
        num_bytes -= sizeof(uint32_t);
   17d4a:	3c04      	subs	r4, #4
   17d4c:	e7f4      	b.n	17d38 <nrf52k_flash_write+0x28>
        if (nrf52k_flash_wait_ready()) {
   17d4e:	f7ff ff91 	bl	17c74 <nrf52k_flash_wait_ready>
   17d52:	bb58      	cbnz	r0, 17dac <nrf52k_flash_write+0x9c>
        val = *(uint32_t *)(address & ~0x3);
   17d54:	f025 0a03 	bic.w	sl, r5, #3
   17d58:	f8da 3000 	ldr.w	r3, [sl]
   17d5c:	9301      	str	r3, [sp, #4]
        cnt = 4 - tmp;
   17d5e:	f1c8 0904 	rsb	r9, r8, #4
        if (cnt > num_bytes) {
   17d62:	45a1      	cmp	r9, r4
   17d64:	d900      	bls.n	17d68 <nrf52k_flash_write+0x58>
            cnt = num_bytes;
   17d66:	46a1      	mov	r9, r4
        memcpy((uint8_t *)&val + tmp, src, cnt);
   17d68:	464a      	mov	r2, r9
   17d6a:	4631      	mov	r1, r6
   17d6c:	ab01      	add	r3, sp, #4
   17d6e:	eb03 0008 	add.w	r0, r3, r8
   17d72:	f7f5 fe39 	bl	d9e8 <memcpy>
        *(uint32_t *)(address & ~0x3) = val;
   17d76:	9b01      	ldr	r3, [sp, #4]
   17d78:	f8ca 3000 	str.w	r3, [sl]
        address += cnt;
   17d7c:	444d      	add	r5, r9
        num_bytes -= cnt;
   17d7e:	eba4 0409 	sub.w	r4, r4, r9
        src += cnt;
   17d82:	444e      	add	r6, r9
   17d84:	e7d8      	b.n	17d38 <nrf52k_flash_write+0x28>
    if (num_bytes) {
   17d86:	b15c      	cbz	r4, 17da0 <nrf52k_flash_write+0x90>
        val = *(uint32_t *)address;
   17d88:	682b      	ldr	r3, [r5, #0]
   17d8a:	9301      	str	r3, [sp, #4]
        memcpy(&val, src, num_bytes);
   17d8c:	4622      	mov	r2, r4
   17d8e:	4631      	mov	r1, r6
   17d90:	a801      	add	r0, sp, #4
   17d92:	f7f5 fe29 	bl	d9e8 <memcpy>
        if (nrf52k_flash_wait_ready()) {
   17d96:	f7ff ff6d 	bl	17c74 <nrf52k_flash_wait_ready>
   17d9a:	b9a8      	cbnz	r0, 17dc8 <nrf52k_flash_write+0xb8>
        *(uint32_t *)address = val;
   17d9c:	9b01      	ldr	r3, [sp, #4]
   17d9e:	602b      	str	r3, [r5, #0]
    if (nrf52k_flash_wait_ready()) {
   17da0:	f7ff ff68 	bl	17c74 <nrf52k_flash_wait_ready>
   17da4:	b138      	cbz	r0, 17db6 <nrf52k_flash_write+0xa6>
        rc = -1;
   17da6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17daa:	e004      	b.n	17db6 <nrf52k_flash_write+0xa6>
    int rc = -1;
   17dac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17db0:	e001      	b.n	17db6 <nrf52k_flash_write+0xa6>
   17db2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren;
   17db6:	4b07      	ldr	r3, [pc, #28]	; (17dd4 <nrf52k_flash_write+0xc4>)
   17db8:	2200      	movs	r2, #0
   17dba:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   17dbe:	b907      	cbnz	r7, 17dc2 <nrf52k_flash_write+0xb2>
  __ASM volatile ("cpsie i" : : : "memory");
   17dc0:	b662      	cpsie	i
}
   17dc2:	b002      	add	sp, #8
   17dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int rc = -1;
   17dc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17dcc:	e7f3      	b.n	17db6 <nrf52k_flash_write+0xa6>
        return -1;
   17dce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17dd2:	e7f6      	b.n	17dc2 <nrf52k_flash_write+0xb2>
   17dd4:	4001e000 	.word	0x4001e000

00017dd8 <nrf52k_flash_read>:
{
   17dd8:	b508      	push	{r3, lr}
   17dda:	4610      	mov	r0, r2
    memcpy(dst, (void *)address, num_bytes);
   17ddc:	461a      	mov	r2, r3
   17dde:	f7f5 fe03 	bl	d9e8 <memcpy>
}
   17de2:	2000      	movs	r0, #0
   17de4:	bd08      	pop	{r3, pc}
	...

00017de8 <nrf52_timer_handler>:
    }
}

static void
nrf52_timer_handler(void)
{
   17de8:	b570      	push	{r4, r5, r6, lr}
    int ticks;
    os_sr_t sr;
    uint32_t counter;

    os_trace_isr_enter();
    OS_ENTER_CRITICAL(sr);
   17dea:	f7f2 fb47 	bl	a47c <os_arch_save_sr>
    return OS_TICK_TIMER->COUNTER;
   17dee:	4b31      	ldr	r3, [pc, #196]	; (17eb4 <nrf52_timer_handler+0xcc>)
   17df0:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

    /* Calculate elapsed ticks and advance OS time. */

    counter = nrf52_os_tick_counter();
    delta = sub24(counter, g_hal_os_tick.lastocmp);
   17df4:	4b30      	ldr	r3, [pc, #192]	; (17eb8 <nrf52_timer_handler+0xd0>)
   17df6:	689c      	ldr	r4, [r3, #8]
    assert(x <= 0xffffff);
   17df8:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   17dfc:	d227      	bcs.n	17e4e <nrf52_timer_handler+0x66>
   17dfe:	4605      	mov	r5, r0
    assert(y <= 0xffffff);
   17e00:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
   17e04:	d229      	bcs.n	17e5a <nrf52_timer_handler+0x72>
    result = x - y;
   17e06:	1b12      	subs	r2, r2, r4
    if (result & 0x800000) {
   17e08:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   17e0c:	d02b      	beq.n	17e66 <nrf52_timer_handler+0x7e>
        return (result | 0xff800000);
   17e0e:	ea6f 2242 	mvn.w	r2, r2, lsl #9
   17e12:	ea6f 2252 	mvn.w	r2, r2, lsr #9
    ticks = delta / g_hal_os_tick.ticks_per_ostick;
   17e16:	4e28      	ldr	r6, [pc, #160]	; (17eb8 <nrf52_timer_handler+0xd0>)
   17e18:	6834      	ldr	r4, [r6, #0]
   17e1a:	fb92 f4f4 	sdiv	r4, r2, r4
    os_time_advance(ticks);
   17e1e:	4620      	mov	r0, r4
   17e20:	f7f2 fa0c 	bl	a23c <os_time_advance>

    /* Clear timer interrupt */
    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   17e24:	4b23      	ldr	r3, [pc, #140]	; (17eb4 <nrf52_timer_handler+0xcc>)
   17e26:	2200      	movs	r2, #0
   17e28:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

    /* Update the time associated with the most recent tick */
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   17e2c:	68b3      	ldr	r3, [r6, #8]
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   17e2e:	6831      	ldr	r1, [r6, #0]
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   17e30:	fb04 3201 	mla	r2, r4, r1, r3
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   17e34:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   17e38:	60b2      	str	r2, [r6, #8]

    /* Update the output compare to interrupt at the next tick */
    nrf52_os_tick_set_ocmp(g_hal_os_tick.lastocmp + g_hal_os_tick.ticks_per_ostick);
   17e3a:	1854      	adds	r4, r2, r1
    OS_ASSERT_CRITICAL();
   17e3c:	f7f2 fb27 	bl	a48e <os_arch_in_critical>
   17e40:	bb08      	cbnz	r0, 17e86 <nrf52_timer_handler+0x9e>
   17e42:	2300      	movs	r3, #0
   17e44:	461a      	mov	r2, r3
   17e46:	4619      	mov	r1, r3
   17e48:	4618      	mov	r0, r3
   17e4a:	f7f1 f8ff 	bl	904c <__assert_func>
    assert(x <= 0xffffff);
   17e4e:	2300      	movs	r3, #0
   17e50:	461a      	mov	r2, r3
   17e52:	4619      	mov	r1, r3
   17e54:	4618      	mov	r0, r3
   17e56:	f7f1 f8f9 	bl	904c <__assert_func>
    assert(y <= 0xffffff);
   17e5a:	2300      	movs	r3, #0
   17e5c:	461a      	mov	r2, r3
   17e5e:	4619      	mov	r1, r3
   17e60:	4618      	mov	r0, r3
   17e62:	f7f1 f8f3 	bl	904c <__assert_func>
        return (result & 0x007fffff);
   17e66:	f3c2 0216 	ubfx	r2, r2, #0, #23
   17e6a:	e7d4      	b.n	17e16 <nrf52_timer_handler+0x2e>
    assert(y <= 0xffffff);
   17e6c:	2300      	movs	r3, #0
   17e6e:	461a      	mov	r2, r3
   17e70:	4619      	mov	r1, r3
   17e72:	4618      	mov	r0, r3
   17e74:	f7f1 f8ea 	bl	904c <__assert_func>
        return (result & 0x007fffff);
   17e78:	f3c3 0316 	ubfx	r3, r3, #0, #23
        if (delta > 2) {
   17e7c:	2b02      	cmp	r3, #2
   17e7e:	dc15      	bgt.n	17eac <nrf52_timer_handler+0xc4>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   17e80:	4b0d      	ldr	r3, [pc, #52]	; (17eb8 <nrf52_timer_handler+0xd0>)
   17e82:	681c      	ldr	r4, [r3, #0]
   17e84:	4414      	add	r4, r2
        ocmp &= 0xffffff;
   17e86:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   17e8a:	4b0a      	ldr	r3, [pc, #40]	; (17eb4 <nrf52_timer_handler+0xcc>)
   17e8c:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   17e90:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    assert(y <= 0xffffff);
   17e94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   17e98:	d2e8      	bcs.n	17e6c <nrf52_timer_handler+0x84>
    result = x - y;
   17e9a:	1ad3      	subs	r3, r2, r3
    if (result & 0x800000) {
   17e9c:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   17ea0:	d0ea      	beq.n	17e78 <nrf52_timer_handler+0x90>
        return (result | 0xff800000);
   17ea2:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   17ea6:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   17eaa:	e7e7      	b.n	17e7c <nrf52_timer_handler+0x94>

    OS_EXIT_CRITICAL(sr);
   17eac:	4628      	mov	r0, r5
   17eae:	f7f2 faeb 	bl	a488 <os_arch_restore_sr>
    os_trace_isr_exit();
}
   17eb2:	bd70      	pop	{r4, r5, r6, pc}
   17eb4:	40011000 	.word	0x40011000
   17eb8:	20004578 	.word	0x20004578

00017ebc <os_tick_idle>:

void
os_tick_idle(os_time_t ticks)
{
   17ebc:	b538      	push	{r3, r4, r5, lr}
   17ebe:	4605      	mov	r5, r0
    uint32_t ocmp;

    OS_ASSERT_CRITICAL();
   17ec0:	f7f2 fae5 	bl	a48e <os_arch_in_critical>
   17ec4:	b1a0      	cbz	r0, 17ef0 <os_tick_idle+0x34>

    if (ticks > 0) {
   17ec6:	2d00      	cmp	r5, #0
   17ec8:	d038      	beq.n	17f3c <os_tick_idle+0x80>
        /*
         * Enter tickless regime during long idle durations.
         */
        if (ticks > g_hal_os_tick.max_idle_ticks) {
   17eca:	4b20      	ldr	r3, [pc, #128]	; (17f4c <os_tick_idle+0x90>)
   17ecc:	685b      	ldr	r3, [r3, #4]
   17ece:	42ab      	cmp	r3, r5
   17ed0:	d200      	bcs.n	17ed4 <os_tick_idle+0x18>
            ticks = g_hal_os_tick.max_idle_ticks;
   17ed2:	461d      	mov	r5, r3
        }
        ocmp = g_hal_os_tick.lastocmp + (ticks*g_hal_os_tick.ticks_per_ostick);
   17ed4:	4b1d      	ldr	r3, [pc, #116]	; (17f4c <os_tick_idle+0x90>)
   17ed6:	689a      	ldr	r2, [r3, #8]
   17ed8:	681c      	ldr	r4, [r3, #0]
   17eda:	fb05 2404 	mla	r4, r5, r4, r2
    OS_ASSERT_CRITICAL();
   17ede:	f7f2 fad6 	bl	a48e <os_arch_in_critical>
   17ee2:	b9c0      	cbnz	r0, 17f16 <os_tick_idle+0x5a>
   17ee4:	2300      	movs	r3, #0
   17ee6:	461a      	mov	r2, r3
   17ee8:	4619      	mov	r1, r3
   17eea:	4618      	mov	r0, r3
   17eec:	f7f1 f8ae 	bl	904c <__assert_func>
    OS_ASSERT_CRITICAL();
   17ef0:	2300      	movs	r3, #0
   17ef2:	461a      	mov	r2, r3
   17ef4:	4619      	mov	r1, r3
   17ef6:	4618      	mov	r0, r3
   17ef8:	f7f1 f8a8 	bl	904c <__assert_func>
    assert(y <= 0xffffff);
   17efc:	2300      	movs	r3, #0
   17efe:	461a      	mov	r2, r3
   17f00:	4619      	mov	r1, r3
   17f02:	4618      	mov	r0, r3
   17f04:	f7f1 f8a2 	bl	904c <__assert_func>
        return (result & 0x007fffff);
   17f08:	f3c3 0316 	ubfx	r3, r3, #0, #23
        if (delta > 2) {
   17f0c:	2b02      	cmp	r3, #2
   17f0e:	dc15      	bgt.n	17f3c <os_tick_idle+0x80>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   17f10:	4b0e      	ldr	r3, [pc, #56]	; (17f4c <os_tick_idle+0x90>)
   17f12:	681c      	ldr	r4, [r3, #0]
   17f14:	4414      	add	r4, r2
        ocmp &= 0xffffff;
   17f16:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   17f1a:	4b0d      	ldr	r3, [pc, #52]	; (17f50 <os_tick_idle+0x94>)
   17f1c:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   17f20:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    assert(y <= 0xffffff);
   17f24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   17f28:	d2e8      	bcs.n	17efc <os_tick_idle+0x40>
    result = x - y;
   17f2a:	1ad3      	subs	r3, r2, r3
    if (result & 0x800000) {
   17f2c:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   17f30:	d0ea      	beq.n	17f08 <os_tick_idle+0x4c>
        return (result | 0xff800000);
   17f32:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   17f36:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   17f3a:	e7e7      	b.n	17f0c <os_tick_idle+0x50>
  __ASM volatile ("dsb 0xF":::"memory");
   17f3c:	f3bf 8f4f 	dsb	sy
        nrf52_os_tick_set_ocmp(ocmp);
    }

    __DSB();
    __WFI();
   17f40:	bf30      	wfi

    if (ticks > 0) {
   17f42:	b905      	cbnz	r5, 17f46 <os_tick_idle+0x8a>
         * Update OS time before anything else when coming out of
         * the tickless regime.
         */
        nrf52_timer_handler();
    }
}
   17f44:	bd38      	pop	{r3, r4, r5, pc}
        nrf52_timer_handler();
   17f46:	f7ff ff4f 	bl	17de8 <nrf52_timer_handler>
}
   17f4a:	e7fb      	b.n	17f44 <os_tick_idle+0x88>
   17f4c:	20004578 	.word	0x20004578
   17f50:	40011000 	.word	0x40011000

00017f54 <os_tick_init>:

void
os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
   17f54:	b570      	push	{r4, r5, r6, lr}
    uint32_t sr;

    assert(RTC_FREQ % os_ticks_per_sec == 0);
   17f56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   17f5a:	fbb3 f3f0 	udiv	r3, r3, r0
   17f5e:	fb00 f303 	mul.w	r3, r0, r3
   17f62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   17f66:	d136      	bne.n	17fd6 <os_tick_init+0x82>
   17f68:	460c      	mov	r4, r1

    g_hal_os_tick.lastocmp = 0;
   17f6a:	4d1e      	ldr	r5, [pc, #120]	; (17fe4 <os_tick_init+0x90>)
   17f6c:	2600      	movs	r6, #0
   17f6e:	60ae      	str	r6, [r5, #8]
    g_hal_os_tick.ticks_per_ostick = RTC_FREQ / os_ticks_per_sec;
   17f70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   17f74:	fbb3 f0f0 	udiv	r0, r3, r0
   17f78:	6028      	str	r0, [r5, #0]
    /*
     * The maximum number of OS ticks allowed to elapse during idle is
     * limited to 1/4th the number of timer ticks before the 24-bit counter
     * rolls over.
     */
    g_hal_os_tick.max_idle_ticks = (1UL << 22) / g_hal_os_tick.ticks_per_ostick;
   17f7a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   17f7e:	fbb3 f0f0 	udiv	r0, r3, r0
   17f82:	6068      	str	r0, [r5, #4]

    /* disable interrupts */
    OS_ENTER_CRITICAL(sr);
   17f84:	f7f2 fa7a 	bl	a47c <os_arch_save_sr>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   17f88:	0164      	lsls	r4, r4, #5
   17f8a:	b2e4      	uxtb	r4, r4
   17f8c:	4b16      	ldr	r3, [pc, #88]	; (17fe8 <os_tick_init+0x94>)
   17f8e:	f883 4311 	strb.w	r4, [r3, #785]	; 0x311
  uint32_t vectors = (uint32_t )SCB->VTOR;
   17f92:	4a16      	ldr	r2, [pc, #88]	; (17fec <os_tick_init+0x98>)
   17f94:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   17f96:	4916      	ldr	r1, [pc, #88]	; (17ff0 <os_tick_init+0x9c>)
   17f98:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   17f9c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   17fa0:	601a      	str	r2, [r3, #0]

    /*
     * Program the OS_TICK_TIMER to operate at 32KHz and trigger an output
     * compare interrupt at a rate of 'os_ticks_per_sec'.
     */
    OS_TICK_TIMER->TASKS_STOP = 1;
   17fa2:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
   17fa6:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
   17faa:	2201      	movs	r2, #1
   17fac:	605a      	str	r2, [r3, #4]
    OS_TICK_TIMER->TASKS_CLEAR = 1;
   17fae:	609a      	str	r2, [r3, #8]

    OS_TICK_TIMER->EVTENCLR = 0xffffffff;
   17fb0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17fb4:	f8c3 1348 	str.w	r1, [r3, #840]	; 0x348
    OS_TICK_TIMER->INTENCLR = 0xffffffff;
   17fb8:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    OS_TICK_TIMER->INTENSET = RTC_COMPARE_INT_MASK(OS_TICK_CMPREG);
   17fbc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   17fc0:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   17fc4:	f8c3 614c 	str.w	r6, [r3, #332]	; 0x14c
    OS_TICK_TIMER->CC[OS_TICK_CMPREG] = g_hal_os_tick.ticks_per_ostick;
   17fc8:	6829      	ldr	r1, [r5, #0]
   17fca:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c

    OS_TICK_TIMER->TASKS_START = 1;
   17fce:	601a      	str	r2, [r3, #0]

    OS_EXIT_CRITICAL(sr);
   17fd0:	f7f2 fa5a 	bl	a488 <os_arch_restore_sr>
}
   17fd4:	bd70      	pop	{r4, r5, r6, pc}
    assert(RTC_FREQ % os_ticks_per_sec == 0);
   17fd6:	2300      	movs	r3, #0
   17fd8:	461a      	mov	r2, r3
   17fda:	4619      	mov	r1, r3
   17fdc:	4618      	mov	r0, r3
   17fde:	f7f1 f835 	bl	904c <__assert_func>
   17fe2:	bf00      	nop
   17fe4:	20004578 	.word	0x20004578
   17fe8:	e000e100 	.word	0xe000e100
   17fec:	e000ed00 	.word	0xe000ed00
   17ff0:	00017de9 	.word	0x00017de9

00017ff4 <nrf52_irqm_handler>:
    }

#if (MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_1_MASTER) || MYNEWT_VAL(SPI_2_MASTER) || MYNEWT_VAL(SPI_3_MASTER))
static void
nrf52_irqm_handler(struct nrf52_hal_spi *spi)
{
   17ff4:	b538      	push	{r3, r4, r5, lr}
    NRF_SPIM_Type *spim;
    uint16_t xfr_bytes;
    uint16_t len;

    spim = spi->nhs_spi.spim;
   17ff6:	6905      	ldr	r5, [r0, #16]
    if (spim->EVENTS_END) {
   17ff8:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   17ffc:	b333      	cbz	r3, 1804c <nrf52_irqm_handler+0x58>
   17ffe:	4604      	mov	r4, r0
        spim->EVENTS_END = 0;
   18000:	2300      	movs	r3, #0
   18002:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118

        /* Should not occur but if no transfer just leave  */
        if (spi->spi_xfr_flag == 0) {
   18006:	7843      	ldrb	r3, [r0, #1]
   18008:	b303      	cbz	r3, 1804c <nrf52_irqm_handler+0x58>
            return;
        }

        /* Are there more bytes to send? */
        xfr_bytes = spim->TXD.AMOUNT;
   1800a:	f8d5 254c 	ldr.w	r2, [r5, #1356]	; 0x54c
        spi->nhs_bytes_txd += xfr_bytes;
   1800e:	88c3      	ldrh	r3, [r0, #6]
   18010:	fa13 f382 	uxtah	r3, r3, r2
   18014:	b29b      	uxth	r3, r3
   18016:	80c3      	strh	r3, [r0, #6]
        if (spi->nhs_bytes_txd < spi->nhs_buflen) {
   18018:	8881      	ldrh	r1, [r0, #4]
   1801a:	428b      	cmp	r3, r1
   1801c:	d217      	bcs.n	1804e <nrf52_irqm_handler+0x5a>
            spi->nhs_txbuf += xfr_bytes;
   1801e:	b292      	uxth	r2, r2
   18020:	6980      	ldr	r0, [r0, #24]
   18022:	4410      	add	r0, r2
   18024:	61a0      	str	r0, [r4, #24]
            len = spi->nhs_buflen - spi->nhs_bytes_txd;
   18026:	1ac9      	subs	r1, r1, r3
   18028:	b289      	uxth	r1, r1
            len = min(SPIM_TXD_MAXCNT_MAX, len);
   1802a:	29ff      	cmp	r1, #255	; 0xff
   1802c:	bf28      	it	cs
   1802e:	21ff      	movcs	r1, #255	; 0xff
            spim->TXD.PTR = (uint32_t)spi->nhs_txbuf;
   18030:	f8c5 0544 	str.w	r0, [r5, #1348]	; 0x544
            spim->TXD.MAXCNT = len;
   18034:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548

            /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
            if (spi->nhs_rxbuf) {
   18038:	69e3      	ldr	r3, [r4, #28]
   1803a:	b12b      	cbz	r3, 18048 <nrf52_irqm_handler+0x54>
                spi->nhs_rxbuf += xfr_bytes;
   1803c:	441a      	add	r2, r3
   1803e:	61e2      	str	r2, [r4, #28]
                spim->RXD.PTR    = (uint32_t)spi->nhs_rxbuf;
   18040:	f8c5 2534 	str.w	r2, [r5, #1332]	; 0x534
                spim->RXD.MAXCNT = len;
   18044:	f8c5 1538 	str.w	r1, [r5, #1336]	; 0x538
            }
            spim->TASKS_START = 1;
   18048:	2301      	movs	r3, #1
   1804a:	612b      	str	r3, [r5, #16]
            }
            spi->spi_xfr_flag = 0;
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
        }
    }
}
   1804c:	bd38      	pop	{r3, r4, r5, pc}
            if (spi->txrx_cb_func) {
   1804e:	6a03      	ldr	r3, [r0, #32]
   18050:	b10b      	cbz	r3, 18056 <nrf52_irqm_handler+0x62>
                spi->txrx_cb_func(spi->txrx_cb_arg, spi->nhs_buflen);
   18052:	6a40      	ldr	r0, [r0, #36]	; 0x24
   18054:	4798      	blx	r3
            spi->spi_xfr_flag = 0;
   18056:	2300      	movs	r3, #0
   18058:	7063      	strb	r3, [r4, #1]
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
   1805a:	2340      	movs	r3, #64	; 0x40
   1805c:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   18060:	e7f4      	b.n	1804c <nrf52_irqm_handler+0x58>
	...

00018064 <nrf52_spi0_irq_handler>:

/* Interrupt handlers for SPI ports */
#if MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_0_SLAVE)
void
nrf52_spi0_irq_handler(void)
{
   18064:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (nrf52_hal_spi0.spi_type == HAL_SPI_TYPE_MASTER) {
   18066:	4b04      	ldr	r3, [pc, #16]	; (18078 <nrf52_spi0_irq_handler+0x14>)
   18068:	781b      	ldrb	r3, [r3, #0]
   1806a:	b103      	cbz	r3, 1806e <nrf52_spi0_irq_handler+0xa>
#if MYNEWT_VAL(SPI_0_SLAVE)
        nrf52_irqs_handler(&nrf52_hal_spi0);
#endif
    }
    os_trace_isr_exit();
}
   1806c:	bd08      	pop	{r3, pc}
        nrf52_irqm_handler(&nrf52_hal_spi0);
   1806e:	4802      	ldr	r0, [pc, #8]	; (18078 <nrf52_spi0_irq_handler+0x14>)
   18070:	f7ff ffc0 	bl	17ff4 <nrf52_irqm_handler>
}
   18074:	e7fa      	b.n	1806c <nrf52_spi0_irq_handler+0x8>
   18076:	bf00      	nop
   18078:	20004584 	.word	0x20004584

0001807c <hal_spi_stop_transfer>:
#endif

static void
hal_spi_stop_transfer(NRF_SPIM_Type *spim)
{
    spim->TASKS_STOP = 1;
   1807c:	2301      	movs	r3, #1
   1807e:	6143      	str	r3, [r0, #20]
    while (!spim->EVENTS_STOPPED) {}
   18080:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
   18084:	2b00      	cmp	r3, #0
   18086:	d0fb      	beq.n	18080 <hal_spi_stop_transfer+0x4>
    spim->EVENTS_STOPPED = 0;
   18088:	2300      	movs	r3, #0
   1808a:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
}
   1808e:	4770      	bx	lr

00018090 <hal_spi_config_slave>:
{
    int rc;
    uint32_t nrf_config;
    NRF_SPIS_Type *spis;

    spis = spi->nhs_spi.spis;
   18090:	6902      	ldr	r2, [r0, #16]

    rc = 0;
    switch (settings->data_mode) {
   18092:	780b      	ldrb	r3, [r1, #0]
   18094:	2b03      	cmp	r3, #3
   18096:	d815      	bhi.n	180c4 <hal_spi_config_slave+0x34>
   18098:	e8df f003 	tbb	[pc, r3]
   1809c:	110e1702 	.word	0x110e1702
   180a0:	2300      	movs	r3, #0
   180a2:	4618      	mov	r0, r3
            nrf_config = 0;
            rc = EINVAL;
            break;
    }

    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   180a4:	f891 c001 	ldrb.w	ip, [r1, #1]
   180a8:	f1bc 0f01 	cmp.w	ip, #1
   180ac:	d010      	beq.n	180d0 <hal_spi_config_slave+0x40>
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
    }
    spis->CONFIG = nrf_config;
   180ae:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554

    /* Only 8-bit word sizes supported. */
    switch (settings->word_size) {
   180b2:	788b      	ldrb	r3, [r1, #2]
   180b4:	b97b      	cbnz	r3, 180d6 <hal_spi_config_slave+0x46>
            rc = EINVAL;
            break;
    }

    return rc;
}
   180b6:	4770      	bx	lr
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
   180b8:	2304      	movs	r3, #4
    rc = 0;
   180ba:	2000      	movs	r0, #0
            break;
   180bc:	e7f2      	b.n	180a4 <hal_spi_config_slave+0x14>
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
   180be:	2306      	movs	r3, #6
    rc = 0;
   180c0:	2000      	movs	r0, #0
            break;
   180c2:	e7ef      	b.n	180a4 <hal_spi_config_slave+0x14>
            nrf_config = 0;
   180c4:	2300      	movs	r3, #0
            rc = EINVAL;
   180c6:	2016      	movs	r0, #22
            break;
   180c8:	e7ec      	b.n	180a4 <hal_spi_config_slave+0x14>
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
   180ca:	2302      	movs	r3, #2
    rc = 0;
   180cc:	2000      	movs	r0, #0
   180ce:	e7e9      	b.n	180a4 <hal_spi_config_slave+0x14>
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
   180d0:	f043 0301 	orr.w	r3, r3, #1
   180d4:	e7eb      	b.n	180ae <hal_spi_config_slave+0x1e>
            rc = EINVAL;
   180d6:	2016      	movs	r0, #22
    return rc;
   180d8:	e7ed      	b.n	180b6 <hal_spi_config_slave+0x26>
	...

000180dc <hal_spi_init_master>:

static int
hal_spi_init_master(struct nrf52_hal_spi *spi,
                    struct nrf52_hal_spi_cfg *cfg,
                    nrf52_spi_irq_handler_t handler)
{
   180dc:	b410      	push	{r4}
    NRF_GPIO_Type *port;
    uint32_t pin;

    /*  Configure MOSI */
    port = HAL_GPIO_PORT(cfg->mosi_pin);
    pin = HAL_GPIO_INDEX(cfg->mosi_pin);
   180de:	784b      	ldrb	r3, [r1, #1]
    port->OUTCLR = (1UL << pin);
   180e0:	2401      	movs	r4, #1
   180e2:	409c      	lsls	r4, r3
   180e4:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
   180e8:	f8cc 450c 	str.w	r4, [ip, #1292]	; 0x50c
    port->PIN_CNF[pin] =
   180ec:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   180f0:	2403      	movs	r4, #3
   180f2:	f84c 4023 	str.w	r4, [ip, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Disconnect << GPIO_PIN_CNF_INPUT_Pos);

    /* Configure MISO */
    port = HAL_GPIO_PORT(cfg->miso_pin);
    pin = HAL_GPIO_INDEX(cfg->miso_pin);
   180f6:	788b      	ldrb	r3, [r1, #2]
    port->PIN_CNF[pin] =
   180f8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   180fc:	2400      	movs	r4, #0
   180fe:	f84c 4023 	str.w	r4, [ip, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Input << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos);

    spim = (NRF_SPIM_Type *)spi->nhs_spi.spim;
   18102:	6903      	ldr	r3, [r0, #16]
    spim->PSEL.SCK = cfg->sck_pin;
   18104:	780c      	ldrb	r4, [r1, #0]
   18106:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    spim->PSEL.MOSI = cfg->mosi_pin;
   1810a:	784c      	ldrb	r4, [r1, #1]
   1810c:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
    spim->PSEL.MISO = cfg->miso_pin;
   18110:	7889      	ldrb	r1, [r1, #2]
   18112:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510

    spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   18116:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1811a:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    NVIC_SetVector(spi->irq_num, (uint32_t)handler);
   1811e:	f990 3014 	ldrsb.w	r3, [r0, #20]
  uint32_t vectors = (uint32_t )SCB->VTOR;
   18122:	491a      	ldr	r1, [pc, #104]	; (1818c <hal_spi_init_master+0xb0>)
   18124:	6889      	ldr	r1, [r1, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   18126:	3310      	adds	r3, #16
   18128:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_SetPriority(spi->irq_num, (1 << __NVIC_PRIO_BITS) - 1);
   1812c:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   18130:	2b00      	cmp	r3, #0
   18132:	db23      	blt.n	1817c <hal_spi_init_master+0xa0>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   18134:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   18138:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   1813c:	22e0      	movs	r2, #224	; 0xe0
   1813e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    NVIC_ClearPendingIRQ(spi->irq_num);
   18142:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   18146:	2b00      	cmp	r3, #0
   18148:	db08      	blt.n	1815c <hal_spi_init_master+0x80>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1814a:	f003 011f 	and.w	r1, r3, #31
   1814e:	095b      	lsrs	r3, r3, #5
   18150:	2201      	movs	r2, #1
   18152:	408a      	lsls	r2, r1
   18154:	3360      	adds	r3, #96	; 0x60
   18156:	490e      	ldr	r1, [pc, #56]	; (18190 <hal_spi_init_master+0xb4>)
   18158:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_EnableIRQ(spi->irq_num);
   1815c:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   18160:	2b00      	cmp	r3, #0
   18162:	db07      	blt.n	18174 <hal_spi_init_master+0x98>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18164:	f003 011f 	and.w	r1, r3, #31
   18168:	095b      	lsrs	r3, r3, #5
   1816a:	2201      	movs	r2, #1
   1816c:	408a      	lsls	r2, r1
   1816e:	4908      	ldr	r1, [pc, #32]	; (18190 <hal_spi_init_master+0xb4>)
   18170:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return 0;
}
   18174:	2000      	movs	r0, #0
   18176:	f85d 4b04 	ldr.w	r4, [sp], #4
   1817a:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1817c:	f003 030f 	and.w	r3, r3, #15
   18180:	4a04      	ldr	r2, [pc, #16]	; (18194 <hal_spi_init_master+0xb8>)
   18182:	441a      	add	r2, r3
   18184:	23e0      	movs	r3, #224	; 0xe0
   18186:	7613      	strb	r3, [r2, #24]
   18188:	e7db      	b.n	18142 <hal_spi_init_master+0x66>
   1818a:	bf00      	nop
   1818c:	e000ed00 	.word	0xe000ed00
   18190:	e000e100 	.word	0xe000e100
   18194:	e000ecfc 	.word	0xe000ecfc

00018198 <hal_spi_config_master>:
{
   18198:	b410      	push	{r4}
    spim = spi->nhs_spi.spim;
   1819a:	6902      	ldr	r2, [r0, #16]
    memcpy(&spi->spi_cfg, settings, sizeof(*settings));
   1819c:	680c      	ldr	r4, [r1, #0]
   1819e:	684b      	ldr	r3, [r1, #4]
   181a0:	6084      	str	r4, [r0, #8]
   181a2:	60c3      	str	r3, [r0, #12]
    pin = spim->PSEL.SCK & SPIM_PSEL_SCK_PIN_Msk;
   181a4:	f8d2 3508 	ldr.w	r3, [r2, #1288]	; 0x508
   181a8:	f003 031f 	and.w	r3, r3, #31
    if (settings->data_mode <= HAL_SPI_MODE1) {
   181ac:	7808      	ldrb	r0, [r1, #0]
   181ae:	2801      	cmp	r0, #1
   181b0:	d916      	bls.n	181e0 <hal_spi_config_master+0x48>
        port->OUTSET = (1UL << pin);
   181b2:	2001      	movs	r0, #1
   181b4:	4098      	lsls	r0, r3
   181b6:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   181ba:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    port->PIN_CNF[pin] =
   181be:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   181c2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   181c6:	2403      	movs	r4, #3
   181c8:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
    switch (settings->word_size) {
   181cc:	788b      	ldrb	r3, [r1, #2]
   181ce:	b973      	cbnz	r3, 181ee <hal_spi_config_master+0x56>
    rc = 0;
   181d0:	2000      	movs	r0, #0
    switch (settings->data_mode) {
   181d2:	780b      	ldrb	r3, [r1, #0]
   181d4:	2b03      	cmp	r3, #3
   181d6:	d825      	bhi.n	18224 <hal_spi_config_master+0x8c>
   181d8:	e8df f003 	tbb	[pc, r3]
   181dc:	2220270b 	.word	0x2220270b
        port->OUTCLR = (1UL << pin);
   181e0:	2001      	movs	r0, #1
   181e2:	4098      	lsls	r0, r3
   181e4:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   181e8:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
   181ec:	e7e7      	b.n	181be <hal_spi_config_master+0x26>
            rc = EINVAL;
   181ee:	2016      	movs	r0, #22
   181f0:	e7ef      	b.n	181d2 <hal_spi_config_master+0x3a>
    switch (settings->data_mode) {
   181f2:	2300      	movs	r3, #0
    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   181f4:	f891 c001 	ldrb.w	ip, [r1, #1]
   181f8:	f1bc 0f01 	cmp.w	ip, #1
   181fc:	d017      	beq.n	1822e <hal_spi_config_master+0x96>
    spim->CONFIG = nrf_config;
   181fe:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554
    switch (settings->baudrate) {
   18202:	684b      	ldr	r3, [r1, #4]
   18204:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   18208:	d02c      	beq.n	18264 <hal_spi_config_master+0xcc>
   1820a:	d81c      	bhi.n	18246 <hal_spi_config_master+0xae>
   1820c:	2bfa      	cmp	r3, #250	; 0xfa
   1820e:	d02c      	beq.n	1826a <hal_spi_config_master+0xd2>
   18210:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   18214:	d10e      	bne.n	18234 <hal_spi_config_master+0x9c>
            frequency = SPIM_FREQUENCY_FREQUENCY_K500;
   18216:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   1821a:	e00f      	b.n	1823c <hal_spi_config_master+0xa4>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   1821c:	2304      	movs	r3, #4
            break;
   1821e:	e7e9      	b.n	181f4 <hal_spi_config_master+0x5c>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   18220:	2306      	movs	r3, #6
            break;
   18222:	e7e7      	b.n	181f4 <hal_spi_config_master+0x5c>
            nrf_config = 0;
   18224:	2300      	movs	r3, #0
            rc = EINVAL;
   18226:	2016      	movs	r0, #22
            break;
   18228:	e7e4      	b.n	181f4 <hal_spi_config_master+0x5c>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   1822a:	2302      	movs	r3, #2
   1822c:	e7e2      	b.n	181f4 <hal_spi_config_master+0x5c>
        nrf_config |= SPIM_CONFIG_ORDER_LsbFirst;
   1822e:	f043 0301 	orr.w	r3, r3, #1
   18232:	e7e4      	b.n	181fe <hal_spi_config_master+0x66>
    switch (settings->baudrate) {
   18234:	2b7d      	cmp	r3, #125	; 0x7d
   18236:	d11b      	bne.n	18270 <hal_spi_config_master+0xd8>
   18238:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    spim->FREQUENCY = frequency;
   1823c:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
}
   18240:	f85d 4b04 	ldr.w	r4, [sp], #4
   18244:	4770      	bx	lr
    switch (settings->baudrate) {
   18246:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
   1824a:	d014      	beq.n	18276 <hal_spi_config_master+0xde>
   1824c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
   18250:	d102      	bne.n	18258 <hal_spi_config_master+0xc0>
            frequency = SPIM_FREQUENCY_FREQUENCY_M8;
   18252:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   18256:	e7f1      	b.n	1823c <hal_spi_config_master+0xa4>
    switch (settings->baudrate) {
   18258:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   1825c:	d10e      	bne.n	1827c <hal_spi_config_master+0xe4>
            frequency = SPIM_FREQUENCY_FREQUENCY_M2;
   1825e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   18262:	e7eb      	b.n	1823c <hal_spi_config_master+0xa4>
            frequency = SPIM_FREQUENCY_FREQUENCY_M1;
   18264:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18268:	e7e8      	b.n	1823c <hal_spi_config_master+0xa4>
            frequency = SPIM_FREQUENCY_FREQUENCY_K250;
   1826a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1826e:	e7e5      	b.n	1823c <hal_spi_config_master+0xa4>
            frequency = 0;
   18270:	2300      	movs	r3, #0
            rc = EINVAL;
   18272:	2016      	movs	r0, #22
   18274:	e7e2      	b.n	1823c <hal_spi_config_master+0xa4>
            frequency = SPIM_FREQUENCY_FREQUENCY_M4;
   18276:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1827a:	e7df      	b.n	1823c <hal_spi_config_master+0xa4>
            frequency = 0;
   1827c:	2300      	movs	r3, #0
            rc = EINVAL;
   1827e:	2016      	movs	r0, #22
   18280:	e7dc      	b.n	1823c <hal_spi_config_master+0xa4>
	...

00018284 <hal_spi_config>:
{
    int rc;
    struct nrf52_hal_spi *spi;
    NRF_SPIM_Type *spim;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   18284:	2803      	cmp	r0, #3
   18286:	dc10      	bgt.n	182aa <hal_spi_config+0x26>
{
   18288:	b508      	push	{r3, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1828a:	4b0b      	ldr	r3, [pc, #44]	; (182b8 <hal_spi_config+0x34>)
   1828c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   18290:	b168      	cbz	r0, 182ae <hal_spi_config+0x2a>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   18292:	6903      	ldr	r3, [r0, #16]
    if (spim->ENABLE != 0) {
   18294:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
   18298:	b95b      	cbnz	r3, 182b2 <hal_spi_config+0x2e>
        return -1;
    }

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1829a:	7803      	ldrb	r3, [r0, #0]
   1829c:	b913      	cbnz	r3, 182a4 <hal_spi_config+0x20>
        rc = hal_spi_config_master(spi, settings);
   1829e:	f7ff ff7b 	bl	18198 <hal_spi_config_master>
        rc = hal_spi_config_slave(spi, settings);
    }

err:
    return (rc);
}
   182a2:	bd08      	pop	{r3, pc}
        rc = hal_spi_config_slave(spi, settings);
   182a4:	f7ff fef4 	bl	18090 <hal_spi_config_slave>
   182a8:	e7fb      	b.n	182a2 <hal_spi_config+0x1e>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   182aa:	2016      	movs	r0, #22
}
   182ac:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   182ae:	2016      	movs	r0, #22
   182b0:	e7f7      	b.n	182a2 <hal_spi_config+0x1e>
        return -1;
   182b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   182b6:	e7f4      	b.n	182a2 <hal_spi_config+0x1e>
   182b8:	000244bc 	.word	0x000244bc

000182bc <hal_spi_enable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPI_Type *nrf_spi;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   182bc:	2803      	cmp	r0, #3
   182be:	dc1b      	bgt.n	182f8 <hal_spi_enable+0x3c>
   182c0:	4b10      	ldr	r3, [pc, #64]	; (18304 <hal_spi_enable+0x48>)
   182c2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   182c6:	b1cb      	cbz	r3, 182fc <hal_spi_enable+0x40>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   182c8:	781a      	ldrb	r2, [r3, #0]
   182ca:	b92a      	cbnz	r2, 182d8 <hal_spi_enable+0x1c>
        /* For now, enable this in normal SPI mode (not spim) */
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
   182cc:	691b      	ldr	r3, [r3, #16]
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   182ce:	2201      	movs	r2, #1
   182d0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
        spis->EVENTS_END = 0;
        spis->EVENTS_ACQUIRED = 0;
        spis->INTENSET = SPIS_INTENSET_END_Msk | SPIS_INTENSET_ACQUIRED_Msk;
        spis->ENABLE = (SPIS_ENABLE_ENABLE_Enabled << SPIS_ENABLE_ENABLE_Pos);
    }
    rc = 0;
   182d4:	2000      	movs	r0, #0
   182d6:	4770      	bx	lr
        if (spi->txrx_cb_func == NULL) {
   182d8:	6a1a      	ldr	r2, [r3, #32]
   182da:	b18a      	cbz	r2, 18300 <hal_spi_enable+0x44>
        spis = spi->nhs_spi.spis;
   182dc:	691b      	ldr	r3, [r3, #16]
        spis->EVENTS_END = 0;
   182de:	2000      	movs	r0, #0
   182e0:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   182e4:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
        spis->INTENSET = SPIS_INTENSET_END_Msk | SPIS_INTENSET_ACQUIRED_Msk;
   182e8:	f240 4202 	movw	r2, #1026	; 0x402
   182ec:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
        spis->ENABLE = (SPIS_ENABLE_ENABLE_Enabled << SPIS_ENABLE_ENABLE_Pos);
   182f0:	2202      	movs	r2, #2
   182f2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   182f6:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   182f8:	2016      	movs	r0, #22
   182fa:	4770      	bx	lr
   182fc:	2016      	movs	r0, #22
   182fe:	4770      	bx	lr
            rc = EINVAL;
   18300:	2016      	movs	r0, #22

err:
    return rc;
}
   18302:	4770      	bx	lr
   18304:	000244bc 	.word	0x000244bc

00018308 <hal_spi_disable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   18308:	2803      	cmp	r0, #3
   1830a:	dc2a      	bgt.n	18362 <hal_spi_disable+0x5a>
{
   1830c:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1830e:	4b17      	ldr	r3, [pc, #92]	; (1836c <hal_spi_disable+0x64>)
   18310:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   18314:	b33c      	cbz	r4, 18366 <hal_spi_disable+0x5e>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   18316:	7823      	ldrb	r3, [r4, #0]
   18318:	b9ab      	cbnz	r3, 18346 <hal_spi_disable+0x3e>
        spim = spi->nhs_spi.spim;
   1831a:	6925      	ldr	r5, [r4, #16]
        spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   1831c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18320:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308

        if (spi->spi_xfr_flag) {
   18324:	7863      	ldrb	r3, [r4, #1]
   18326:	b943      	cbnz	r3, 1833a <hal_spi_disable+0x32>
            hal_spi_stop_transfer(spim);
            spi->spi_xfr_flag = 0;
        }
        spim->ENABLE = 0;
   18328:	2300      	movs	r3, #0
   1832a:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        spis->EVENTS_ACQUIRED = 0;
        spis->ENABLE = 0;
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
    }

    spi->nhs_txbuf = NULL;
   1832e:	2000      	movs	r0, #0
   18330:	61a0      	str	r0, [r4, #24]
    spi->nhs_rxbuf = NULL;
   18332:	61e0      	str	r0, [r4, #28]
    spi->nhs_buflen = 0;
   18334:	80a0      	strh	r0, [r4, #4]
    spi->nhs_bytes_txd = 0;
   18336:	80e0      	strh	r0, [r4, #6]

    rc = 0;

err:
    return rc;
}
   18338:	bd38      	pop	{r3, r4, r5, pc}
            hal_spi_stop_transfer(spim);
   1833a:	4628      	mov	r0, r5
   1833c:	f7ff fe9e 	bl	1807c <hal_spi_stop_transfer>
            spi->spi_xfr_flag = 0;
   18340:	2300      	movs	r3, #0
   18342:	7063      	strb	r3, [r4, #1]
   18344:	e7f0      	b.n	18328 <hal_spi_disable+0x20>
        spis = spi->nhs_spi.spis;
   18346:	6922      	ldr	r2, [r4, #16]
        spis->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   18348:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1834c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        spis->EVENTS_END = 0;
   18350:	2300      	movs	r3, #0
   18352:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   18356:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
        spis->ENABLE = 0;
   1835a:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
   1835e:	70e3      	strb	r3, [r4, #3]
   18360:	e7e5      	b.n	1832e <hal_spi_disable+0x26>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   18362:	2016      	movs	r0, #22
}
   18364:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   18366:	2016      	movs	r0, #22
    return rc;
   18368:	e7e6      	b.n	18338 <hal_spi_disable+0x30>
   1836a:	bf00      	nop
   1836c:	000244bc 	.word	0x000244bc

00018370 <hal_spi_init>:
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   18370:	2803      	cmp	r0, #3
   18372:	dc1d      	bgt.n	183b0 <hal_spi_init+0x40>
{
   18374:	b538      	push	{r3, r4, r5, lr}
   18376:	460c      	mov	r4, r1
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   18378:	4b12      	ldr	r3, [pc, #72]	; (183c4 <hal_spi_init+0x54>)
   1837a:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   1837e:	b1cd      	cbz	r5, 183b4 <hal_spi_init+0x44>
    if (cfg == NULL) {
   18380:	b1d1      	cbz	r1, 183b8 <hal_spi_init+0x48>
    if ((spi_type != HAL_SPI_TYPE_MASTER) && (spi_type != HAL_SPI_TYPE_SLAVE)) {
   18382:	2a01      	cmp	r2, #1
   18384:	d81a      	bhi.n	183bc <hal_spi_init+0x4c>
    spi->spi_type  = spi_type;
   18386:	702a      	strb	r2, [r5, #0]
    if (spi_num == 0) {
   18388:	b9d0      	cbnz	r0, 183c0 <hal_spi_init+0x50>
        spi->irq_num = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQn;
   1838a:	2303      	movs	r3, #3
   1838c:	752b      	strb	r3, [r5, #20]
        if (spi_type == HAL_SPI_TYPE_MASTER) {
   1838e:	b94a      	cbnz	r2, 183a4 <hal_spi_init+0x34>
            spi->nhs_spi.spim = NRF_SPIM0;
   18390:	4b0d      	ldr	r3, [pc, #52]	; (183c8 <hal_spi_init+0x58>)
   18392:	612b      	str	r3, [r5, #16]
    hal_spi_disable(spi_num);
   18394:	f7ff ffb8 	bl	18308 <hal_spi_disable>
        rc = hal_spi_init_master(spi, (struct nrf52_hal_spi_cfg *)cfg,
   18398:	4a0c      	ldr	r2, [pc, #48]	; (183cc <hal_spi_init+0x5c>)
   1839a:	4621      	mov	r1, r4
   1839c:	4628      	mov	r0, r5
   1839e:	f7ff fe9d 	bl	180dc <hal_spi_init_master>
   183a2:	e00e      	b.n	183c2 <hal_spi_init+0x52>
            assert(0);
   183a4:	2300      	movs	r3, #0
   183a6:	461a      	mov	r2, r3
   183a8:	4619      	mov	r1, r3
   183aa:	4618      	mov	r0, r3
   183ac:	f7f0 fe4e 	bl	904c <__assert_func>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   183b0:	2016      	movs	r0, #22
}
   183b2:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   183b4:	2016      	movs	r0, #22
   183b6:	e004      	b.n	183c2 <hal_spi_init+0x52>
    rc = EINVAL;
   183b8:	2016      	movs	r0, #22
   183ba:	e002      	b.n	183c2 <hal_spi_init+0x52>
   183bc:	2016      	movs	r0, #22
   183be:	e000      	b.n	183c2 <hal_spi_init+0x52>
   183c0:	2016      	movs	r0, #22
}
   183c2:	bd38      	pop	{r3, r4, r5, pc}
   183c4:	000244bc 	.word	0x000244bc
   183c8:	40003000 	.word	0x40003000
   183cc:	00018065 	.word	0x00018065

000183d0 <hal_spi_set_txrx_cb>:
{
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   183d0:	2803      	cmp	r0, #3
   183d2:	dc0a      	bgt.n	183ea <hal_spi_set_txrx_cb+0x1a>
   183d4:	4b08      	ldr	r3, [pc, #32]	; (183f8 <hal_spi_set_txrx_cb+0x28>)
   183d6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   183da:	b143      	cbz	r3, 183ee <hal_spi_set_txrx_cb+0x1e>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   183dc:	6918      	ldr	r0, [r3, #16]
    if (spim->ENABLE != 0) {
   183de:	f8d0 0500 	ldr.w	r0, [r0, #1280]	; 0x500
   183e2:	b930      	cbnz	r0, 183f2 <hal_spi_set_txrx_cb+0x22>
        rc = -1;
    } else {
        spi->txrx_cb_func = txrx_cb;
   183e4:	6219      	str	r1, [r3, #32]
        spi->txrx_cb_arg = arg;
   183e6:	625a      	str	r2, [r3, #36]	; 0x24
        rc = 0;
   183e8:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   183ea:	2016      	movs	r0, #22
   183ec:	4770      	bx	lr
   183ee:	2016      	movs	r0, #22
   183f0:	4770      	bx	lr
        rc = -1;
   183f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }

err:
    return rc;
}
   183f6:	4770      	bx	lr
   183f8:	000244bc 	.word	0x000244bc

000183fc <hal_spi_txrx>:
    NRF_SPI_Type *spi;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *hal_spi;

    rc = EINVAL;
    if (!len) {
   183fc:	2b00      	cmp	r3, #0
   183fe:	d046      	beq.n	1848e <hal_spi_txrx+0x92>
{
   18400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18402:	460d      	mov	r5, r1
   18404:	4616      	mov	r6, r2
   18406:	461f      	mov	r7, r3
        goto err;
    }

    NRF52_HAL_SPI_RESOLVE(spi_num, hal_spi);
   18408:	2803      	cmp	r0, #3
   1840a:	dc42      	bgt.n	18492 <hal_spi_txrx+0x96>
   1840c:	4b25      	ldr	r3, [pc, #148]	; (184a4 <hal_spi_txrx+0xa8>)
   1840e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   18412:	2b00      	cmp	r3, #0
   18414:	d03f      	beq.n	18496 <hal_spi_txrx+0x9a>

    if (hal_spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   18416:	781a      	ldrb	r2, [r3, #0]
   18418:	2a00      	cmp	r2, #0
   1841a:	d13e      	bne.n	1849a <hal_spi_txrx+0x9e>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
   1841c:	2900      	cmp	r1, #0
   1841e:	d03e      	beq.n	1849e <hal_spi_txrx+0xa2>

        /*
         * If SPIM is enabled, we want to stop, disable, then enable
         * the legacy SPI interface.
         */
        spim = hal_spi->nhs_spi.spim;
   18420:	691c      	ldr	r4, [r3, #16]
        enabled = spim->ENABLE;
   18422:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        if (enabled == SPIM_ENABLE_ENABLE_Enabled) {
   18426:	2b07      	cmp	r3, #7
   18428:	d004      	beq.n	18434 <hal_spi_txrx+0x38>
            hal_spi_disable(spi_num);
            enabled = 0;
        }

        spi = (NRF_SPI_Type *)spim;
        if (enabled == 0) {
   1842a:	b95b      	cbnz	r3, 18444 <hal_spi_txrx+0x48>
            spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   1842c:	2301      	movs	r3, #1
   1842e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   18432:	e007      	b.n	18444 <hal_spi_txrx+0x48>
            hal_spi_disable(spi_num);
   18434:	f7ff ff68 	bl	18308 <hal_spi_disable>
        if (enabled == 0) {
   18438:	e7f8      	b.n	1842c <hal_spi_txrx+0x30>
        }

        while (spi->EVENTS_READY) {
            rxval = (uint8_t)spi->RXD;
   1843a:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
            spi->EVENTS_READY = 0;
   1843e:	2300      	movs	r3, #0
   18440:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
        while (spi->EVENTS_READY) {
   18444:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18448:	2b00      	cmp	r3, #0
   1844a:	d1f6      	bne.n	1843a <hal_spi_txrx+0x3e>
        }
        txd = (uint8_t *)txbuf;
        spi->TXD = *txd;
   1844c:	782b      	ldrb	r3, [r5, #0]
   1844e:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c

        txcnt = len - 1;
   18452:	1e7a      	subs	r2, r7, #1
        rxd = (uint8_t *)rxbuf;
   18454:	4631      	mov	r1, r6
        for (i = 0; i < len; ++i) {
   18456:	2000      	movs	r0, #0
   18458:	e00d      	b.n	18476 <hal_spi_txrx+0x7a>
            if (txcnt) {
                ++txd;
                spi->TXD = *txd;
                --txcnt;
            }
            while (!spi->EVENTS_READY) {}
   1845a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1845e:	2b00      	cmp	r3, #0
   18460:	d0fb      	beq.n	1845a <hal_spi_txrx+0x5e>
            spi->EVENTS_READY = 0;
   18462:	2300      	movs	r3, #0
   18464:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
            rxval = (uint8_t)spi->RXD;
   18468:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
   1846c:	b2db      	uxtb	r3, r3
            if (rxbuf) {
   1846e:	b10e      	cbz	r6, 18474 <hal_spi_txrx+0x78>
                *rxd = rxval;
   18470:	f801 3b01 	strb.w	r3, [r1], #1
        for (i = 0; i < len; ++i) {
   18474:	3001      	adds	r0, #1
   18476:	42b8      	cmp	r0, r7
   18478:	da07      	bge.n	1848a <hal_spi_txrx+0x8e>
            if (txcnt) {
   1847a:	2a00      	cmp	r2, #0
   1847c:	d0ed      	beq.n	1845a <hal_spi_txrx+0x5e>
                spi->TXD = *txd;
   1847e:	786b      	ldrb	r3, [r5, #1]
   18480:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
                --txcnt;
   18484:	3a01      	subs	r2, #1
                ++txd;
   18486:	3501      	adds	r5, #1
   18488:	e7e7      	b.n	1845a <hal_spi_txrx+0x5e>
                ++rxd;
            }
        }
        return 0;
   1848a:	2000      	movs	r0, #0
    }

err:
    return rc;
}
   1848c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return rc;
   1848e:	2016      	movs	r0, #22
}
   18490:	4770      	bx	lr
    return rc;
   18492:	2016      	movs	r0, #22
   18494:	e7fa      	b.n	1848c <hal_spi_txrx+0x90>
   18496:	2016      	movs	r0, #22
   18498:	e7f8      	b.n	1848c <hal_spi_txrx+0x90>
   1849a:	2016      	movs	r0, #22
   1849c:	e7f6      	b.n	1848c <hal_spi_txrx+0x90>
   1849e:	2016      	movs	r0, #22
   184a0:	e7f4      	b.n	1848c <hal_spi_txrx+0x90>
   184a2:	bf00      	nop
   184a4:	000244bc 	.word	0x000244bc

000184a8 <hal_spi_txrx_noblock>:
 *
 * @return int 0 on success, non-zero error code on failure.
 */
int
hal_spi_txrx_noblock(int spi_num, void *txbuf, void *rxbuf, int len)
{
   184a8:	b570      	push	{r4, r5, r6, lr}
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    rc = EINVAL;
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   184aa:	2803      	cmp	r0, #3
   184ac:	dc63      	bgt.n	18576 <hal_spi_txrx_noblock+0xce>
   184ae:	461c      	mov	r4, r3
   184b0:	4b3a      	ldr	r3, [pc, #232]	; (1859c <hal_spi_txrx_noblock+0xf4>)
   184b2:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   184b6:	2d00      	cmp	r5, #0
   184b8:	d060      	beq.n	1857c <hal_spi_txrx_noblock+0xd4>

    if ((spi->txrx_cb_func == NULL) || (len == 0)) {
   184ba:	6a2b      	ldr	r3, [r5, #32]
   184bc:	2b00      	cmp	r3, #0
   184be:	d05f      	beq.n	18580 <hal_spi_txrx_noblock+0xd8>
   184c0:	2c00      	cmp	r4, #0
   184c2:	d05f      	beq.n	18584 <hal_spi_txrx_noblock+0xdc>
#if MYNEWT_VAL_CHOICE(MCU_TARGET,nRF52832)
    /* There is a known issue in nRF52832 with sending 1 byte in SPIM mode that
     * it clocks out additional byte. For this reason, let us use SPI mode
     * for such a write
     */
    if (len == 1) {
   184c4:	2c01      	cmp	r4, #1
   184c6:	d033      	beq.n	18530 <hal_spi_txrx_noblock+0x88>
        }
        return rc;
    }
#endif

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   184c8:	782b      	ldrb	r3, [r5, #0]
   184ca:	2b00      	cmp	r3, #0
   184cc:	d141      	bne.n	18552 <hal_spi_txrx_noblock+0xaa>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
   184ce:	2900      	cmp	r1, #0
   184d0:	d05a      	beq.n	18588 <hal_spi_txrx_noblock+0xe0>
            goto err;
        }

        /* Not allowed if transfer in progress */
        if (spi->spi_xfr_flag) {
   184d2:	786b      	ldrb	r3, [r5, #1]
   184d4:	2b00      	cmp	r3, #0
   184d6:	d159      	bne.n	1858c <hal_spi_txrx_noblock+0xe4>
            rc = -1;
            goto err;
        }
        spim = spi->nhs_spi.spim;
   184d8:	6928      	ldr	r0, [r5, #16]
#if MYNEWT_VAL(SPI_3_MASTER)
        if (spim == NRF_SPIM3) {
            anomaly_198_enable(txbuf, len);
        }
#endif
        spim->INTENCLR = SPIM_INTENCLR_END_Msk;
   184da:	2340      	movs	r3, #64	; 0x40
   184dc:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
        spi->spi_xfr_flag = 1;
   184e0:	2301      	movs	r3, #1
   184e2:	706b      	strb	r3, [r5, #1]

        /* Must be enabled for SPIM as opposed to SPI */
        if (spim->ENABLE != SPIM_ENABLE_ENABLE_Enabled) {
   184e4:	f8d0 3500 	ldr.w	r3, [r0, #1280]	; 0x500
   184e8:	2b07      	cmp	r3, #7
   184ea:	d005      	beq.n	184f8 <hal_spi_txrx_noblock+0x50>
            spim->ENABLE = 0;
   184ec:	2300      	movs	r3, #0
   184ee:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
            spim->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   184f2:	2307      	movs	r3, #7
   184f4:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
        }

        /* Set internal data structure information */
        spi->nhs_bytes_txd = 0;
   184f8:	2300      	movs	r3, #0
   184fa:	80eb      	strh	r3, [r5, #6]
        spi->nhs_buflen = len;
   184fc:	80ac      	strh	r4, [r5, #4]
        spi->nhs_txbuf = txbuf;
   184fe:	61a9      	str	r1, [r5, #24]

        len = min(SPIM_TXD_MAXCNT_MAX, len);
   18500:	2cff      	cmp	r4, #255	; 0xff
   18502:	bfa8      	it	ge
   18504:	24ff      	movge	r4, #255	; 0xff

        /* Set chip registers */
        spim->TXD.PTR = (uint32_t)txbuf;
   18506:	f8c0 1544 	str.w	r1, [r0, #1348]	; 0x544
        spim->TXD.MAXCNT = len;
   1850a:	f8c0 4548 	str.w	r4, [r0, #1352]	; 0x548

        /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
        spi->nhs_rxbuf = rxbuf;
   1850e:	61ea      	str	r2, [r5, #28]
        if (rxbuf == NULL) {
   18510:	b1c2      	cbz	r2, 18544 <hal_spi_txrx_noblock+0x9c>
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
            spim->RXD.MAXCNT = 1;
        } else {
            spim->RXD.PTR = (uint32_t)rxbuf;
   18512:	f8c0 2534 	str.w	r2, [r0, #1332]	; 0x534
            spim->RXD.MAXCNT = len;
   18516:	f8c0 4538 	str.w	r4, [r0, #1336]	; 0x538
        }

        spim->EVENTS_END = 0;
   1851a:	2600      	movs	r6, #0
   1851c:	f8c0 6118 	str.w	r6, [r0, #280]	; 0x118
        spim->EVENTS_STOPPED = 0;
   18520:	f8c0 6104 	str.w	r6, [r0, #260]	; 0x104
        spim->TASKS_START = 1;
   18524:	2301      	movs	r3, #1
   18526:	6103      	str	r3, [r0, #16]
        spim->INTENSET = SPIM_INTENSET_END_Msk;
   18528:	2340      	movs	r3, #64	; 0x40
   1852a:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
   1852e:	e023      	b.n	18578 <hal_spi_txrx_noblock+0xd0>
        rc = hal_spi_txrx(spi_num, txbuf, rxbuf, len);
   18530:	4623      	mov	r3, r4
   18532:	f7ff ff63 	bl	183fc <hal_spi_txrx>
        if (rc == 0) {
   18536:	4606      	mov	r6, r0
   18538:	b9f0      	cbnz	r0, 18578 <hal_spi_txrx_noblock+0xd0>
            spi->txrx_cb_func(spi->txrx_cb_arg, len);
   1853a:	6a2b      	ldr	r3, [r5, #32]
   1853c:	4621      	mov	r1, r4
   1853e:	6a68      	ldr	r0, [r5, #36]	; 0x24
   18540:	4798      	blx	r3
        return rc;
   18542:	e019      	b.n	18578 <hal_spi_txrx_noblock+0xd0>
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
   18544:	3502      	adds	r5, #2
   18546:	f8c0 5534 	str.w	r5, [r0, #1332]	; 0x534
            spim->RXD.MAXCNT = 1;
   1854a:	2301      	movs	r3, #1
   1854c:	f8c0 3538 	str.w	r3, [r0, #1336]	; 0x538
   18550:	e7e3      	b.n	1851a <hal_spi_txrx_noblock+0x72>
    } else {
        /* Must have txbuf or rxbuf */
        if ((txbuf == NULL) && (rxbuf == NULL)) {
   18552:	b161      	cbz	r1, 1856e <hal_spi_txrx_noblock+0xc6>
            goto err;
        }

        /* XXX: what to do here? */
        if (len > 255) {
   18554:	2cff      	cmp	r4, #255	; 0xff
   18556:	dc1c      	bgt.n	18592 <hal_spi_txrx_noblock+0xea>
        /*
         * Ready the slave for a transfer. Do not allow this to be called
         * if the slave has already been readied or is requesting the
         * semaphore
         */
        if (spi->slave_state != HAL_SPI_SLAVE_STATE_IDLE) {
   18558:	78eb      	ldrb	r3, [r5, #3]
   1855a:	b9e3      	cbnz	r3, 18596 <hal_spi_txrx_noblock+0xee>
            rc = -1;
            goto err;
        }

        spi->nhs_rxbuf = rxbuf;
   1855c:	61ea      	str	r2, [r5, #28]
        spi->nhs_txbuf = txbuf;
   1855e:	61a9      	str	r1, [r5, #24]
        spi->nhs_buflen = len;
   18560:	80ac      	strh	r4, [r5, #4]
        spi->slave_state = HAL_SPI_SLAVE_STATE_ACQ_SEM;
   18562:	2301      	movs	r3, #1
   18564:	70eb      	strb	r3, [r5, #3]
        spi->nhs_spi.spis->TASKS_ACQUIRE = 1;
   18566:	692a      	ldr	r2, [r5, #16]
   18568:	6253      	str	r3, [r2, #36]	; 0x24
    }
    return 0;
   1856a:	2600      	movs	r6, #0
   1856c:	e004      	b.n	18578 <hal_spi_txrx_noblock+0xd0>
        if ((txbuf == NULL) && (rxbuf == NULL)) {
   1856e:	2a00      	cmp	r2, #0
   18570:	d1f0      	bne.n	18554 <hal_spi_txrx_noblock+0xac>
    rc = EINVAL;
   18572:	2616      	movs	r6, #22
   18574:	e000      	b.n	18578 <hal_spi_txrx_noblock+0xd0>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   18576:	2616      	movs	r6, #22

err:
    return rc;
}
   18578:	4630      	mov	r0, r6
   1857a:	bd70      	pop	{r4, r5, r6, pc}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1857c:	2616      	movs	r6, #22
   1857e:	e7fb      	b.n	18578 <hal_spi_txrx_noblock+0xd0>
    rc = EINVAL;
   18580:	2616      	movs	r6, #22
   18582:	e7f9      	b.n	18578 <hal_spi_txrx_noblock+0xd0>
   18584:	2616      	movs	r6, #22
   18586:	e7f7      	b.n	18578 <hal_spi_txrx_noblock+0xd0>
   18588:	2616      	movs	r6, #22
   1858a:	e7f5      	b.n	18578 <hal_spi_txrx_noblock+0xd0>
            rc = -1;
   1858c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   18590:	e7f2      	b.n	18578 <hal_spi_txrx_noblock+0xd0>
    rc = EINVAL;
   18592:	2616      	movs	r6, #22
   18594:	e7f0      	b.n	18578 <hal_spi_txrx_noblock+0xd0>
            rc = -1;
   18596:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1859a:	e7ed      	b.n	18578 <hal_spi_txrx_noblock+0xd0>
   1859c:	000244bc 	.word	0x000244bc

000185a0 <nrf_read_timer_cntr>:
nrf_read_timer_cntr(NRF_TIMER_Type *hwtimer)
{
    uint32_t tcntr;

    /* Force a capture of the timer into 'cntr' capture channel; read it */
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
   185a0:	2301      	movs	r3, #1
   185a2:	6483      	str	r3, [r0, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
   185a4:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548

    return tcntr;
}
   185a8:	4770      	bx	lr
	...

000185ac <nrf_timer_set_ocmp>:
 *
 * @param timer Pointer to timer.
 */
static void
nrf_timer_set_ocmp(struct nrf52_hal_timer *bsptimer, uint32_t expiry)
{
   185ac:	b538      	push	{r3, r4, r5, lr}
   185ae:	4604      	mov	r4, r0
   185b0:	460d      	mov	r5, r1
    uint32_t temp;
    uint32_t cntr;
    NRF_TIMER_Type *hwtimer;
    NRF_RTC_Type *rtctimer;

    if (bsptimer->tmr_rtc) {
   185b2:	7883      	ldrb	r3, [r0, #2]
   185b4:	b39b      	cbz	r3, 1861e <nrf_timer_set_ocmp+0x72>
        rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   185b6:	6902      	ldr	r2, [r0, #16]
        rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   185b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   185bc:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        temp = bsptimer->tmr_cntr;
   185c0:	6843      	ldr	r3, [r0, #4]
        cntr = rtctimer->COUNTER;
   185c2:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
        if (rtctimer->EVENTS_OVRFLW) {
   185c6:	f8d2 0104 	ldr.w	r0, [r2, #260]	; 0x104
   185ca:	b118      	cbz	r0, 185d4 <nrf_timer_set_ocmp+0x28>
            temp += (1UL << 24);
   185cc:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
            cntr = rtctimer->COUNTER;
   185d0:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
        }
        temp |= cntr;
   185d4:	430b      	orrs	r3, r1
        delta_t = (int32_t)(expiry - temp);
   185d6:	1aeb      	subs	r3, r5, r3
         * The nrf documentation states that you must set the output
         * compare to 2 greater than the counter to guarantee an interrupt.
         * Since the counter can tick once while we check, we make sure
         * it is greater than 2.
         */
        if (delta_t < 3) {
   185d8:	2b02      	cmp	r3, #2
   185da:	dc0f      	bgt.n	185fc <nrf_timer_set_ocmp+0x50>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   185dc:	7862      	ldrb	r2, [r4, #1]
   185de:	f994 3001 	ldrsb.w	r3, [r4, #1]
  if ((int32_t)(IRQn) >= 0)
   185e2:	2b00      	cmp	r3, #0
   185e4:	db15      	blt.n	18612 <nrf_timer_set_ocmp+0x66>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   185e6:	f002 021f 	and.w	r2, r2, #31
   185ea:	095b      	lsrs	r3, r3, #5
   185ec:	2101      	movs	r1, #1
   185ee:	fa01 f202 	lsl.w	r2, r1, r2
   185f2:	3340      	adds	r3, #64	; 0x40
   185f4:	491a      	ldr	r1, [pc, #104]	; (18660 <nrf_timer_set_ocmp+0xb4>)
   185f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   185fa:	e00a      	b.n	18612 <nrf_timer_set_ocmp+0x66>
        } else  {
            if (delta_t < (1UL << 24)) {
   185fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   18600:	d208      	bcs.n	18614 <nrf_timer_set_ocmp+0x68>
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = expiry & 0x00ffffff;
   18602:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
   18606:	f8c2 5548 	str.w	r5, [r2, #1352]	; 0x548
            } else {
                /* CC too far ahead. Just make sure we set compare far ahead */
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
            }
            rtctimer->INTENSET = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1860a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1860e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
        /* Force interrupt to occur as we may have missed it */
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
        }
    }
}
   18612:	bd38      	pop	{r3, r4, r5, pc}
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
   18614:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
   18618:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
   1861c:	e7f5      	b.n	1860a <nrf_timer_set_ocmp+0x5e>
        hwtimer = bsptimer->tmr_reg;
   1861e:	6900      	ldr	r0, [r0, #16]
        hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   18620:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   18624:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
        hwtimer->CC[NRF_TIMER_CC_INT] = expiry;
   18628:	f8c0 154c 	str.w	r1, [r0, #1356]	; 0x54c
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   1862c:	2200      	movs	r2, #0
   1862e:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
        hwtimer->INTENSET = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   18632:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
   18636:	f7ff ffb3 	bl	185a0 <nrf_read_timer_cntr>
   1863a:	1b45      	subs	r5, r0, r5
   1863c:	2d00      	cmp	r5, #0
   1863e:	dbe8      	blt.n	18612 <nrf_timer_set_ocmp+0x66>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   18640:	7862      	ldrb	r2, [r4, #1]
   18642:	f994 3001 	ldrsb.w	r3, [r4, #1]
  if ((int32_t)(IRQn) >= 0)
   18646:	2b00      	cmp	r3, #0
   18648:	dbe3      	blt.n	18612 <nrf_timer_set_ocmp+0x66>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1864a:	f002 021f 	and.w	r2, r2, #31
   1864e:	095b      	lsrs	r3, r3, #5
   18650:	2101      	movs	r1, #1
   18652:	fa01 f202 	lsl.w	r2, r1, r2
   18656:	3340      	adds	r3, #64	; 0x40
   18658:	4901      	ldr	r1, [pc, #4]	; (18660 <nrf_timer_set_ocmp+0xb4>)
   1865a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1865e:	e7d8      	b.n	18612 <nrf_timer_set_ocmp+0x66>
   18660:	e000e100 	.word	0xe000e100

00018664 <nrf_timer_disable_ocmp>:

/* Disable output compare used for timer */
static void
nrf_timer_disable_ocmp(NRF_TIMER_Type *hwtimer)
{
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   18664:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   18668:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1866c:	4770      	bx	lr

0001866e <nrf_rtc_disable_ocmp>:

static void
nrf_rtc_disable_ocmp(NRF_RTC_Type *rtctimer)
{
    rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1866e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   18672:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   18676:	4770      	bx	lr

00018678 <hal_timer_read_bsptimer>:

static uint32_t
hal_timer_read_bsptimer(struct nrf52_hal_timer *bsptimer)
{
   18678:	b430      	push	{r4, r5}
    uint32_t low32;
    uint32_t ctx;
    uint32_t tcntr;
    NRF_RTC_Type *rtctimer;

    rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1867a:	6902      	ldr	r2, [r0, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1867c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   18680:	b672      	cpsid	i
    __HAL_DISABLE_INTERRUPTS(ctx);
    tcntr = bsptimer->tmr_cntr;
   18682:	6841      	ldr	r1, [r0, #4]
    low32 = rtctimer->COUNTER;
   18684:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
    if (rtctimer->EVENTS_OVRFLW) {
   18688:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   1868c:	b1b5      	cbz	r5, 186bc <hal_timer_read_bsptimer+0x44>
        tcntr += (1UL << 24);
   1868e:	f101 7180 	add.w	r1, r1, #16777216	; 0x1000000
        bsptimer->tmr_cntr = tcntr;
   18692:	6041      	str	r1, [r0, #4]
        low32 = rtctimer->COUNTER;
   18694:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
        rtctimer->EVENTS_OVRFLW = 0;
   18698:	2500      	movs	r5, #0
   1869a:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
        NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1869e:	7845      	ldrb	r5, [r0, #1]
   186a0:	f990 2001 	ldrsb.w	r2, [r0, #1]
  if ((int32_t)(IRQn) >= 0)
   186a4:	2a00      	cmp	r2, #0
   186a6:	db09      	blt.n	186bc <hal_timer_read_bsptimer+0x44>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   186a8:	f005 051f 	and.w	r5, r5, #31
   186ac:	0952      	lsrs	r2, r2, #5
   186ae:	2001      	movs	r0, #1
   186b0:	fa00 f505 	lsl.w	r5, r0, r5
   186b4:	3240      	adds	r2, #64	; 0x40
   186b6:	4804      	ldr	r0, [pc, #16]	; (186c8 <hal_timer_read_bsptimer+0x50>)
   186b8:	f840 5022 	str.w	r5, [r0, r2, lsl #2]
    }
    tcntr |= low32;
   186bc:	ea43 0001 	orr.w	r0, r3, r1
    __HAL_ENABLE_INTERRUPTS(ctx);
   186c0:	b904      	cbnz	r4, 186c4 <hal_timer_read_bsptimer+0x4c>
  __ASM volatile ("cpsie i" : : : "memory");
   186c2:	b662      	cpsie	i

    return tcntr;
}
   186c4:	bc30      	pop	{r4, r5}
   186c6:	4770      	bx	lr
   186c8:	e000e100 	.word	0xe000e100

000186cc <hal_timer_chk_queue>:
 *
 * @param bsptimer
 */
static void
hal_timer_chk_queue(struct nrf52_hal_timer *bsptimer)
{
   186cc:	b570      	push	{r4, r5, r6, lr}
   186ce:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   186d0:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   186d4:	b672      	cpsid	i
}
   186d6:	e013      	b.n	18700 <hal_timer_chk_queue+0x34>
             * If we are within 3 ticks of RTC, we wont be able to set compare.
             * Thus, we have to service this timer early.
             */
            delta = -3;
        } else {
            tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   186d8:	6928      	ldr	r0, [r5, #16]
   186da:	f7ff ff61 	bl	185a0 <nrf_read_timer_cntr>
            delta = 0;
   186de:	2200      	movs	r2, #0
        }
        if ((int32_t)(tcntr - timer->expiry) >= delta) {
   186e0:	68e3      	ldr	r3, [r4, #12]
   186e2:	1ac3      	subs	r3, r0, r3
   186e4:	4293      	cmp	r3, r2
   186e6:	db19      	blt.n	1871c <hal_timer_chk_queue+0x50>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   186e8:	6923      	ldr	r3, [r4, #16]
   186ea:	b1a3      	cbz	r3, 18716 <hal_timer_chk_queue+0x4a>
   186ec:	6962      	ldr	r2, [r4, #20]
   186ee:	615a      	str	r2, [r3, #20]
   186f0:	6963      	ldr	r3, [r4, #20]
   186f2:	6922      	ldr	r2, [r4, #16]
   186f4:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
   186f6:	2300      	movs	r3, #0
   186f8:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
   186fa:	6863      	ldr	r3, [r4, #4]
   186fc:	68a0      	ldr	r0, [r4, #8]
   186fe:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
   18700:	696c      	ldr	r4, [r5, #20]
   18702:	b15c      	cbz	r4, 1871c <hal_timer_chk_queue+0x50>
        if (bsptimer->tmr_rtc) {
   18704:	78ab      	ldrb	r3, [r5, #2]
   18706:	2b00      	cmp	r3, #0
   18708:	d0e6      	beq.n	186d8 <hal_timer_chk_queue+0xc>
            tcntr = hal_timer_read_bsptimer(bsptimer);
   1870a:	4628      	mov	r0, r5
   1870c:	f7ff ffb4 	bl	18678 <hal_timer_read_bsptimer>
            delta = -3;
   18710:	f06f 0202 	mvn.w	r2, #2
   18714:	e7e4      	b.n	186e0 <hal_timer_chk_queue+0x14>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   18716:	6963      	ldr	r3, [r4, #20]
   18718:	61ab      	str	r3, [r5, #24]
   1871a:	e7e9      	b.n	186f0 <hal_timer_chk_queue+0x24>
            break;
        }
    }

    /* Any timers left on queue? If so, we need to set OCMP */
    timer = TAILQ_FIRST(&bsptimer->hal_timer_q);
   1871c:	696b      	ldr	r3, [r5, #20]
    if (timer) {
   1871e:	b133      	cbz	r3, 1872e <hal_timer_chk_queue+0x62>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
   18720:	68d9      	ldr	r1, [r3, #12]
   18722:	4628      	mov	r0, r5
   18724:	f7ff ff42 	bl	185ac <nrf_timer_set_ocmp>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
        } else {
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
        }
    }
    __HAL_ENABLE_INTERRUPTS(ctx);
   18728:	b906      	cbnz	r6, 1872c <hal_timer_chk_queue+0x60>
  __ASM volatile ("cpsie i" : : : "memory");
   1872a:	b662      	cpsie	i
}
   1872c:	bd70      	pop	{r4, r5, r6, pc}
        if (bsptimer->tmr_rtc) {
   1872e:	78ab      	ldrb	r3, [r5, #2]
   18730:	b11b      	cbz	r3, 1873a <hal_timer_chk_queue+0x6e>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
   18732:	6928      	ldr	r0, [r5, #16]
   18734:	f7ff ff9b 	bl	1866e <nrf_rtc_disable_ocmp>
   18738:	e7f6      	b.n	18728 <hal_timer_chk_queue+0x5c>
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
   1873a:	6928      	ldr	r0, [r5, #16]
   1873c:	f7ff ff92 	bl	18664 <nrf_timer_disable_ocmp>
   18740:	e7f2      	b.n	18728 <hal_timer_chk_queue+0x5c>

00018742 <hal_timer_irq_handler>:
#if (MYNEWT_VAL(TIMER_0) || MYNEWT_VAL(TIMER_1) || MYNEWT_VAL(TIMER_2) || \
     MYNEWT_VAL(TIMER_3) || MYNEWT_VAL(TIMER_4))

static void
hal_timer_irq_handler(struct nrf52_hal_timer *bsptimer)
{
   18742:	b510      	push	{r4, lr}
    NRF_TIMER_Type *hwtimer;

    os_trace_isr_enter();

    /* Check interrupt source. If set, clear them */
    hwtimer = bsptimer->tmr_reg;
   18744:	6904      	ldr	r4, [r0, #16]
    compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   18746:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    if (compare) {
   1874a:	b113      	cbz	r3, 18752 <hal_timer_irq_handler+0x10>
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   1874c:	2300      	movs	r3, #0
   1874e:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    }

    /* XXX: make these stats? */
    /* Count # of timer isrs */
    ++bsptimer->timer_isrs;
   18752:	6883      	ldr	r3, [r0, #8]
   18754:	3301      	adds	r3, #1
   18756:	6083      	str	r3, [r0, #8]
     * counter is already passed the output compare value), we use the NVIC
     * to set a pending interrupt. This means that there will be no compare
     * flag set, so all we do is check to see if the compare interrupt is
     * enabled.
     */
    if (hwtimer->INTENCLR & NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT)) {
   18758:	f8d4 3308 	ldr.w	r3, [r4, #776]	; 0x308
   1875c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   18760:	d100      	bne.n	18764 <hal_timer_irq_handler+0x22>
        /* XXX: Recommended by nordic to make sure interrupts are cleared */
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
    }

    os_trace_isr_exit();
}
   18762:	bd10      	pop	{r4, pc}
        hal_timer_chk_queue(bsptimer);
   18764:	f7ff ffb2 	bl	186cc <hal_timer_chk_queue>
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   18768:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
}
   1876c:	e7f9      	b.n	18762 <hal_timer_irq_handler+0x20>
	...

00018770 <nrf52_timer0_irq_handler>:
#endif

#if MYNEWT_VAL(TIMER_0)
void
nrf52_timer0_irq_handler(void)
{
   18770:	b508      	push	{r3, lr}
    hal_timer_irq_handler(&nrf52_hal_timer0);
   18772:	4802      	ldr	r0, [pc, #8]	; (1877c <nrf52_timer0_irq_handler+0xc>)
   18774:	f7ff ffe5 	bl	18742 <hal_timer_irq_handler>
}
   18778:	bd08      	pop	{r3, pc}
   1877a:	bf00      	nop
   1877c:	200045ac 	.word	0x200045ac

00018780 <hal_timer_init>:
    uint8_t irq_num;
    struct nrf52_hal_timer *bsptimer;
    void *hwtimer;
    hal_timer_irq_handler_t irq_isr;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   18780:	2805      	cmp	r0, #5
   18782:	dc1c      	bgt.n	187be <hal_timer_init+0x3e>
   18784:	4b12      	ldr	r3, [pc, #72]	; (187d0 <hal_timer_init+0x50>)
   18786:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1878a:	b1d3      	cbz	r3, 187c2 <hal_timer_init+0x42>

    /* If timer is enabled do not allow init */
    if (bsptimer->tmr_enabled) {
   1878c:	781a      	ldrb	r2, [r3, #0]
   1878e:	b9d2      	cbnz	r2, 187c6 <hal_timer_init+0x46>
        rc = EINVAL;
        goto err;
    }

    switch (timer_num) {
   18790:	b9d8      	cbnz	r0, 187ca <hal_timer_init+0x4a>
    if (hwtimer == NULL) {
        rc = EINVAL;
        goto err;
    }

    bsptimer->tmr_reg = hwtimer;
   18792:	4a10      	ldr	r2, [pc, #64]	; (187d4 <hal_timer_init+0x54>)
   18794:	611a      	str	r2, [r3, #16]
    bsptimer->tmr_irq_num = irq_num;
   18796:	2208      	movs	r2, #8
   18798:	705a      	strb	r2, [r3, #1]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1879a:	4b0f      	ldr	r3, [pc, #60]	; (187d8 <hal_timer_init+0x58>)
   1879c:	f44f 7280 	mov.w	r2, #256	; 0x100
   187a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   187a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   187a8:	f3bf 8f6f 	isb	sy
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   187ac:	22e0      	movs	r2, #224	; 0xe0
   187ae:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
  uint32_t vectors = (uint32_t )SCB->VTOR;
   187b2:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
   187b6:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   187b8:	4a08      	ldr	r2, [pc, #32]	; (187dc <hal_timer_init+0x5c>)
   187ba:	661a      	str	r2, [r3, #96]	; 0x60
    /* Disable IRQ, set priority and set vector in table */
    NVIC_DisableIRQ(irq_num);
    NVIC_SetPriority(irq_num, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_SetVector(irq_num, (uint32_t)irq_isr);

    return 0;
   187bc:	4770      	bx	lr

err:
    return rc;
   187be:	2016      	movs	r0, #22
   187c0:	4770      	bx	lr
   187c2:	2016      	movs	r0, #22
   187c4:	4770      	bx	lr
   187c6:	2016      	movs	r0, #22
   187c8:	4770      	bx	lr
   187ca:	2016      	movs	r0, #22
}
   187cc:	4770      	bx	lr
   187ce:	bf00      	nop
   187d0:	000244cc 	.word	0x000244cc
   187d4:	40008000 	.word	0x40008000
   187d8:	e000e100 	.word	0xe000e100
   187dc:	00018771 	.word	0x00018771

000187e0 <hal_timer_config>:
    NRF_TIMER_Type *hwtimer;
#if MYNEWT_VAL(TIMER_5)
    NRF_RTC_Type *rtctimer;
#endif

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   187e0:	2805      	cmp	r0, #5
   187e2:	dc65      	bgt.n	188b0 <hal_timer_config+0xd0>
{
   187e4:	b430      	push	{r4, r5}
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   187e6:	4b3a      	ldr	r3, [pc, #232]	; (188d0 <hal_timer_config+0xf0>)
   187e8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   187ec:	2c00      	cmp	r4, #0
   187ee:	d061      	beq.n	188b4 <hal_timer_config+0xd4>
        return 0;
    }
#endif

    /* Set timer to desired frequency */
    div = NRF52_MAX_TIMER_FREQ / freq_hz;
   187f0:	4838      	ldr	r0, [pc, #224]	; (188d4 <hal_timer_config+0xf4>)
   187f2:	fbb0 f0f1 	udiv	r0, r0, r1
    /*
     * Largest prescaler is 2^9 and must make sure frequency not too high.
     * If hwtimer is NULL it means that the timer was not initialized prior
     * to call.
     */
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   187f6:	7823      	ldrb	r3, [r4, #0]
   187f8:	2b00      	cmp	r3, #0
   187fa:	d15d      	bne.n	188b8 <hal_timer_config+0xd8>
   187fc:	4a35      	ldr	r2, [pc, #212]	; (188d4 <hal_timer_config+0xf4>)
   187fe:	4291      	cmp	r1, r2
   18800:	d85d      	bhi.n	188be <hal_timer_config+0xde>
   18802:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   18806:	d85c      	bhi.n	188c2 <hal_timer_config+0xe2>
        (bsptimer->tmr_reg == NULL)) {
   18808:	6922      	ldr	r2, [r4, #16]
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   1880a:	2a00      	cmp	r2, #0
   1880c:	d05b      	beq.n	188c6 <hal_timer_config+0xe6>
        rc = EINVAL;
        goto err;
    }

    if (div == 1) {
   1880e:	2801      	cmp	r0, #1
   18810:	d013      	beq.n	1883a <hal_timer_config+0x5a>
        prescaler = 0;
    } else {
        /* Find closest prescaler */
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   18812:	2301      	movs	r3, #1
   18814:	2b09      	cmp	r3, #9
   18816:	d810      	bhi.n	1883a <hal_timer_config+0x5a>
            if (div <= (1 << prescaler)) {
   18818:	2201      	movs	r2, #1
   1881a:	409a      	lsls	r2, r3
   1881c:	4282      	cmp	r2, r0
   1881e:	d202      	bcs.n	18826 <hal_timer_config+0x46>
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   18820:	3301      	adds	r3, #1
   18822:	b2db      	uxtb	r3, r3
   18824:	e7f6      	b.n	18814 <hal_timer_config+0x34>
                min_delta = div - (1 << (prescaler - 1));
   18826:	1e59      	subs	r1, r3, #1
   18828:	2501      	movs	r5, #1
   1882a:	fa05 f101 	lsl.w	r1, r5, r1
   1882e:	1a41      	subs	r1, r0, r1
                max_delta = (1 << prescaler) - div;
   18830:	1a12      	subs	r2, r2, r0
                if (min_delta < max_delta) {
   18832:	4291      	cmp	r1, r2
   18834:	d201      	bcs.n	1883a <hal_timer_config+0x5a>
                    prescaler -= 1;
   18836:	3b01      	subs	r3, #1
   18838:	b2db      	uxtb	r3, r3
            }
        }
    }

    /* Now set the actual frequency */
    bsptimer->tmr_freq = NRF52_MAX_TIMER_FREQ / (1 << prescaler);
   1883a:	4a26      	ldr	r2, [pc, #152]	; (188d4 <hal_timer_config+0xf4>)
   1883c:	411a      	asrs	r2, r3
   1883e:	60e2      	str	r2, [r4, #12]
    bsptimer->tmr_enabled = 1;
   18840:	2201      	movs	r2, #1
   18842:	7022      	strb	r2, [r4, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   18844:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   18848:	b672      	cpsid	i

    /* disable interrupts */
    __HAL_DISABLE_INTERRUPTS(ctx);

    /* Make sure HFXO is started */
    if ((NRF_CLOCK->HFCLKSTAT &
   1884a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1884e:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
   18852:	f002 1201 	and.w	r2, r2, #65537	; 0x10001
   18856:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
   1885a:	d00c      	beq.n	18876 <hal_timer_config+0x96>
         (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) !=
        (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) {
        NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
   1885c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   18860:	2100      	movs	r1, #0
   18862:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
        NRF_CLOCK->TASKS_HFCLKSTART = 1;
   18866:	2101      	movs	r1, #1
   18868:	6011      	str	r1, [r2, #0]
        while (1) {
            if ((NRF_CLOCK->EVENTS_HFCLKSTARTED) != 0) {
   1886a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1886e:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
   18872:	2a00      	cmp	r2, #0
   18874:	d0f9      	beq.n	1886a <hal_timer_config+0x8a>
                break;
            }
        }
    }
    hwtimer = bsptimer->tmr_reg;
   18876:	6922      	ldr	r2, [r4, #16]

    /* Stop the timer first */
    hwtimer->TASKS_STOP = 1;
   18878:	2101      	movs	r1, #1
   1887a:	6051      	str	r1, [r2, #4]
    hwtimer->TASKS_CLEAR = 1;
   1887c:	60d1      	str	r1, [r2, #12]

    /* Put the timer in timer mode using 32 bits. */
    hwtimer->MODE = TIMER_MODE_MODE_Timer;
   1887e:	2500      	movs	r5, #0
   18880:	f8c2 5504 	str.w	r5, [r2, #1284]	; 0x504
    hwtimer->BITMODE = TIMER_BITMODE_BITMODE_32Bit;
   18884:	2503      	movs	r5, #3
   18886:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508

    /* Set the pre-scalar */
    hwtimer->PRESCALER = prescaler;
   1888a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

    /* Start the timer */
    hwtimer->TASKS_START = 1;
   1888e:	6011      	str	r1, [r2, #0]

    NVIC_EnableIRQ(bsptimer->tmr_irq_num);
   18890:	7862      	ldrb	r2, [r4, #1]
   18892:	f994 3001 	ldrsb.w	r3, [r4, #1]
  if ((int32_t)(IRQn) >= 0)
   18896:	2b00      	cmp	r3, #0
   18898:	db07      	blt.n	188aa <hal_timer_config+0xca>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1889a:	f002 021f 	and.w	r2, r2, #31
   1889e:	095b      	lsrs	r3, r3, #5
   188a0:	fa01 f202 	lsl.w	r2, r1, r2
   188a4:	490c      	ldr	r1, [pc, #48]	; (188d8 <hal_timer_config+0xf8>)
   188a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    __HAL_ENABLE_INTERRUPTS(ctx);
   188aa:	b970      	cbnz	r0, 188ca <hal_timer_config+0xea>
  __ASM volatile ("cpsie i" : : : "memory");
   188ac:	b662      	cpsie	i
}
   188ae:	e004      	b.n	188ba <hal_timer_config+0xda>

    return 0;

err:
    return rc;
   188b0:	2016      	movs	r0, #22
}
   188b2:	4770      	bx	lr
    return rc;
   188b4:	2016      	movs	r0, #22
   188b6:	e000      	b.n	188ba <hal_timer_config+0xda>
   188b8:	2016      	movs	r0, #22
}
   188ba:	bc30      	pop	{r4, r5}
   188bc:	4770      	bx	lr
    return rc;
   188be:	2016      	movs	r0, #22
   188c0:	e7fb      	b.n	188ba <hal_timer_config+0xda>
   188c2:	2016      	movs	r0, #22
   188c4:	e7f9      	b.n	188ba <hal_timer_config+0xda>
   188c6:	2016      	movs	r0, #22
   188c8:	e7f7      	b.n	188ba <hal_timer_config+0xda>
    return 0;
   188ca:	2000      	movs	r0, #0
   188cc:	e7f5      	b.n	188ba <hal_timer_config+0xda>
   188ce:	bf00      	nop
   188d0:	000244cc 	.word	0x000244cc
   188d4:	00f42400 	.word	0x00f42400
   188d8:	e000e100 	.word	0xe000e100

000188dc <hal_timer_read>:
 *
 * @return uint32_t The timer counter register.
 */
uint32_t
hal_timer_read(int timer_num)
{
   188dc:	b508      	push	{r3, lr}
    int rc;
    uint32_t tcntr;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   188de:	2805      	cmp	r0, #5
   188e0:	dc0c      	bgt.n	188fc <hal_timer_read+0x20>
   188e2:	4b09      	ldr	r3, [pc, #36]	; (18908 <hal_timer_read+0x2c>)
   188e4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   188e8:	b140      	cbz	r0, 188fc <hal_timer_read+0x20>
    if (bsptimer->tmr_rtc) {
   188ea:	7883      	ldrb	r3, [r0, #2]
   188ec:	b113      	cbz	r3, 188f4 <hal_timer_read+0x18>
        tcntr = hal_timer_read_bsptimer(bsptimer);
   188ee:	f7ff fec3 	bl	18678 <hal_timer_read_bsptimer>
    /* Assert here since there is no invalid return code */
err:
    assert(0);
    rc = 0;
    return rc;
}
   188f2:	bd08      	pop	{r3, pc}
        tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   188f4:	6900      	ldr	r0, [r0, #16]
   188f6:	f7ff fe53 	bl	185a0 <nrf_read_timer_cntr>
    return tcntr;
   188fa:	e7fa      	b.n	188f2 <hal_timer_read+0x16>
    assert(0);
   188fc:	2300      	movs	r3, #0
   188fe:	461a      	mov	r2, r3
   18900:	4619      	mov	r1, r3
   18902:	4618      	mov	r0, r3
   18904:	f7f0 fba2 	bl	904c <__assert_func>
   18908:	000244cc 	.word	0x000244cc

0001890c <hal_timer_set_cb>:
                 void *arg)
{
    int rc;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1890c:	2805      	cmp	r0, #5
   1890e:	dc0c      	bgt.n	1892a <hal_timer_set_cb+0x1e>
{
   18910:	b410      	push	{r4}
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   18912:	4c08      	ldr	r4, [pc, #32]	; (18934 <hal_timer_set_cb+0x28>)
   18914:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
   18918:	b14c      	cbz	r4, 1892e <hal_timer_set_cb+0x22>

    timer->cb_func = cb_func;
   1891a:	604a      	str	r2, [r1, #4]
    timer->cb_arg = arg;
   1891c:	608b      	str	r3, [r1, #8]
    timer->link.tqe_prev = NULL;
   1891e:	2000      	movs	r0, #0
   18920:	6148      	str	r0, [r1, #20]
    timer->bsp_timer = bsptimer;
   18922:	600c      	str	r4, [r1, #0]

    rc = 0;

err:
    return rc;
}
   18924:	f85d 4b04 	ldr.w	r4, [sp], #4
   18928:	4770      	bx	lr
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1892a:	2016      	movs	r0, #22
}
   1892c:	4770      	bx	lr
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1892e:	2016      	movs	r0, #22
    return rc;
   18930:	e7f8      	b.n	18924 <hal_timer_set_cb+0x18>
   18932:	bf00      	nop
   18934:	000244cc 	.word	0x000244cc

00018938 <hal_timer_start_at>:
{
    uint32_t ctx;
    struct hal_timer *entry;
    struct nrf52_hal_timer *bsptimer;

    if ((timer == NULL) || (timer->link.tqe_prev != NULL) ||
   18938:	2800      	cmp	r0, #0
   1893a:	d03b      	beq.n	189b4 <hal_timer_start_at+0x7c>
{
   1893c:	b538      	push	{r3, r4, r5, lr}
   1893e:	4604      	mov	r4, r0
    if ((timer == NULL) || (timer->link.tqe_prev != NULL) ||
   18940:	6943      	ldr	r3, [r0, #20]
   18942:	2b00      	cmp	r3, #0
   18944:	d138      	bne.n	189b8 <hal_timer_start_at+0x80>
        (timer->cb_func == NULL)) {
   18946:	6843      	ldr	r3, [r0, #4]
    if ((timer == NULL) || (timer->link.tqe_prev != NULL) ||
   18948:	2b00      	cmp	r3, #0
   1894a:	d037      	beq.n	189bc <hal_timer_start_at+0x84>
        return EINVAL;
    }
    bsptimer = (struct nrf52_hal_timer *)timer->bsp_timer;
   1894c:	6800      	ldr	r0, [r0, #0]
    timer->expiry = tick;
   1894e:	60e1      	str	r1, [r4, #12]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   18950:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   18954:	b672      	cpsid	i

    __HAL_DISABLE_INTERRUPTS(ctx);

    if (TAILQ_EMPTY(&bsptimer->hal_timer_q)) {
   18956:	6943      	ldr	r3, [r0, #20]
   18958:	b13b      	cbz	r3, 1896a <hal_timer_start_at+0x32>
        TAILQ_INSERT_HEAD(&bsptimer->hal_timer_q, timer, link);
    } else {
        TAILQ_FOREACH(entry, &bsptimer->hal_timer_q, link) {
   1895a:	b1bb      	cbz	r3, 1898c <hal_timer_start_at+0x54>
            if ((int32_t)(timer->expiry - entry->expiry) < 0) {
   1895c:	68e2      	ldr	r2, [r4, #12]
   1895e:	68d9      	ldr	r1, [r3, #12]
   18960:	1a52      	subs	r2, r2, r1
   18962:	2a00      	cmp	r2, #0
   18964:	db0a      	blt.n	1897c <hal_timer_start_at+0x44>
        TAILQ_FOREACH(entry, &bsptimer->hal_timer_q, link) {
   18966:	691b      	ldr	r3, [r3, #16]
   18968:	e7f7      	b.n	1895a <hal_timer_start_at+0x22>
        TAILQ_INSERT_HEAD(&bsptimer->hal_timer_q, timer, link);
   1896a:	4622      	mov	r2, r4
   1896c:	f842 3f10 	str.w	r3, [r2, #16]!
   18970:	6182      	str	r2, [r0, #24]
   18972:	4603      	mov	r3, r0
   18974:	f843 4f14 	str.w	r4, [r3, #20]!
   18978:	6163      	str	r3, [r4, #20]
   1897a:	e008      	b.n	1898e <hal_timer_start_at+0x56>
                TAILQ_INSERT_BEFORE(entry, timer, link);
   1897c:	695a      	ldr	r2, [r3, #20]
   1897e:	6162      	str	r2, [r4, #20]
   18980:	6123      	str	r3, [r4, #16]
   18982:	695a      	ldr	r2, [r3, #20]
   18984:	6014      	str	r4, [r2, #0]
   18986:	f104 0210 	add.w	r2, r4, #16
   1898a:	615a      	str	r2, [r3, #20]
                break;
            }
        }
        if (!entry) {
   1898c:	b133      	cbz	r3, 1899c <hal_timer_start_at+0x64>
            TAILQ_INSERT_TAIL(&bsptimer->hal_timer_q, timer, link);
        }
    }

    /* If this is the head, we need to set new OCMP */
    if (timer == TAILQ_FIRST(&bsptimer->hal_timer_q)) {
   1898e:	6943      	ldr	r3, [r0, #20]
   18990:	42a3      	cmp	r3, r4
   18992:	d00b      	beq.n	189ac <hal_timer_start_at+0x74>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
    }

    __HAL_ENABLE_INTERRUPTS(ctx);
   18994:	b9a5      	cbnz	r5, 189c0 <hal_timer_start_at+0x88>
  __ASM volatile ("cpsie i" : : : "memory");
   18996:	b662      	cpsie	i

    return 0;
   18998:	2000      	movs	r0, #0
}
   1899a:	e00e      	b.n	189ba <hal_timer_start_at+0x82>
            TAILQ_INSERT_TAIL(&bsptimer->hal_timer_q, timer, link);
   1899c:	6123      	str	r3, [r4, #16]
   1899e:	6983      	ldr	r3, [r0, #24]
   189a0:	6163      	str	r3, [r4, #20]
   189a2:	601c      	str	r4, [r3, #0]
   189a4:	f104 0310 	add.w	r3, r4, #16
   189a8:	6183      	str	r3, [r0, #24]
   189aa:	e7f0      	b.n	1898e <hal_timer_start_at+0x56>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
   189ac:	68e1      	ldr	r1, [r4, #12]
   189ae:	f7ff fdfd 	bl	185ac <nrf_timer_set_ocmp>
   189b2:	e7ef      	b.n	18994 <hal_timer_start_at+0x5c>
        return EINVAL;
   189b4:	2016      	movs	r0, #22
}
   189b6:	4770      	bx	lr
        return EINVAL;
   189b8:	2016      	movs	r0, #22
}
   189ba:	bd38      	pop	{r3, r4, r5, pc}
        return EINVAL;
   189bc:	2016      	movs	r0, #22
   189be:	e7fc      	b.n	189ba <hal_timer_start_at+0x82>
    return 0;
   189c0:	2000      	movs	r0, #0
   189c2:	e7fa      	b.n	189ba <hal_timer_start_at+0x82>

000189c4 <hal_timer_stop>:
    uint32_t ctx;
    int reset_ocmp;
    struct hal_timer *entry;
    struct nrf52_hal_timer *bsptimer;

    if (timer == NULL) {
   189c4:	b360      	cbz	r0, 18a20 <hal_timer_stop+0x5c>
{
   189c6:	b570      	push	{r4, r5, r6, lr}
   189c8:	4603      	mov	r3, r0
        return EINVAL;
    }

   bsptimer = (struct nrf52_hal_timer *)timer->bsp_timer;
   189ca:	6801      	ldr	r1, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   189cc:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   189d0:	b672      	cpsid	i

    __HAL_DISABLE_INTERRUPTS(ctx);

    if (timer->link.tqe_prev != NULL) {
   189d2:	6942      	ldr	r2, [r0, #20]
   189d4:	b18a      	cbz	r2, 189fa <hal_timer_stop+0x36>
        reset_ocmp = 0;
        if (timer == TAILQ_FIRST(&bsptimer->hal_timer_q)) {
   189d6:	6948      	ldr	r0, [r1, #20]
   189d8:	4298      	cmp	r0, r3
   189da:	d012      	beq.n	18a02 <hal_timer_stop+0x3e>
        reset_ocmp = 0;
   189dc:	2500      	movs	r5, #0
            /* If first on queue, we will need to reset OCMP */
            entry = TAILQ_NEXT(timer, link);
            reset_ocmp = 1;
        }
        TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   189de:	6918      	ldr	r0, [r3, #16]
   189e0:	b190      	cbz	r0, 18a08 <hal_timer_stop+0x44>
   189e2:	6142      	str	r2, [r0, #20]
   189e4:	695a      	ldr	r2, [r3, #20]
   189e6:	6918      	ldr	r0, [r3, #16]
   189e8:	6010      	str	r0, [r2, #0]
        timer->link.tqe_prev = NULL;
   189ea:	2200      	movs	r2, #0
   189ec:	615a      	str	r2, [r3, #20]
        if (reset_ocmp) {
   189ee:	b125      	cbz	r5, 189fa <hal_timer_stop+0x36>
            if (entry) {
   189f0:	b166      	cbz	r6, 18a0c <hal_timer_stop+0x48>
                nrf_timer_set_ocmp((struct nrf52_hal_timer *)entry->bsp_timer,
   189f2:	68f1      	ldr	r1, [r6, #12]
   189f4:	6830      	ldr	r0, [r6, #0]
   189f6:	f7ff fdd9 	bl	185ac <nrf_timer_set_ocmp>
                }
            }
        }
    }

    __HAL_ENABLE_INTERRUPTS(ctx);
   189fa:	b99c      	cbnz	r4, 18a24 <hal_timer_stop+0x60>
  __ASM volatile ("cpsie i" : : : "memory");
   189fc:	b662      	cpsie	i

    return 0;
   189fe:	2000      	movs	r0, #0
}
   18a00:	e011      	b.n	18a26 <hal_timer_stop+0x62>
            entry = TAILQ_NEXT(timer, link);
   18a02:	691e      	ldr	r6, [r3, #16]
            reset_ocmp = 1;
   18a04:	2501      	movs	r5, #1
   18a06:	e7ea      	b.n	189de <hal_timer_stop+0x1a>
        TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   18a08:	618a      	str	r2, [r1, #24]
   18a0a:	e7eb      	b.n	189e4 <hal_timer_stop+0x20>
                if (bsptimer->tmr_rtc) {
   18a0c:	788b      	ldrb	r3, [r1, #2]
   18a0e:	b11b      	cbz	r3, 18a18 <hal_timer_stop+0x54>
                    nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
   18a10:	6908      	ldr	r0, [r1, #16]
   18a12:	f7ff fe2c 	bl	1866e <nrf_rtc_disable_ocmp>
   18a16:	e7f0      	b.n	189fa <hal_timer_stop+0x36>
                    nrf_timer_disable_ocmp(bsptimer->tmr_reg);
   18a18:	6908      	ldr	r0, [r1, #16]
   18a1a:	f7ff fe23 	bl	18664 <nrf_timer_disable_ocmp>
   18a1e:	e7ec      	b.n	189fa <hal_timer_stop+0x36>
        return EINVAL;
   18a20:	2016      	movs	r0, #22
}
   18a22:	4770      	bx	lr
    return 0;
   18a24:	2000      	movs	r0, #0
}
   18a26:	bd70      	pop	{r4, r5, r6, pc}

00018a28 <nrf52_hal_wdt_default_handler>:
#include "mcu/cmsis_nvic.h"
#include "nrf.h"

static void
nrf52_hal_wdt_default_handler(void)
{
   18a28:	b508      	push	{r3, lr}
    assert(0);
   18a2a:	2300      	movs	r3, #0
   18a2c:	461a      	mov	r2, r3
   18a2e:	4619      	mov	r1, r3
   18a30:	4618      	mov	r0, r3
   18a32:	f7f0 fb0b 	bl	904c <__assert_func>
	...

00018a38 <nrf52_wdt_irq_handler>:
}

/**@brief WDT interrupt handler. */
static void
nrf52_wdt_irq_handler(void)
{
   18a38:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (NRF_WDT->INTENSET & WDT_INTENSET_TIMEOUT_Msk) {
   18a3a:	4b06      	ldr	r3, [pc, #24]	; (18a54 <nrf52_wdt_irq_handler+0x1c>)
   18a3c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
   18a40:	f013 0f01 	tst.w	r3, #1
   18a44:	d100      	bne.n	18a48 <nrf52_wdt_irq_handler+0x10>
        NRF_WDT->EVENTS_TIMEOUT = 0;
        nrf52_hal_wdt_default_handler();
    }
    os_trace_isr_exit();
}
   18a46:	bd08      	pop	{r3, pc}
        NRF_WDT->EVENTS_TIMEOUT = 0;
   18a48:	4b02      	ldr	r3, [pc, #8]	; (18a54 <nrf52_wdt_irq_handler+0x1c>)
   18a4a:	2200      	movs	r2, #0
   18a4c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        nrf52_hal_wdt_default_handler();
   18a50:	f7ff ffea 	bl	18a28 <nrf52_hal_wdt_default_handler>
   18a54:	40010000 	.word	0x40010000

00018a58 <hal_watchdog_init>:

int
hal_watchdog_init(uint32_t expire_msecs)
{
   18a58:	b508      	push	{r3, lr}
    NRF_WDT->CONFIG = WDT_CONFIG_SLEEP_Msk;
   18a5a:	4b17      	ldr	r3, [pc, #92]	; (18ab8 <hal_watchdog_init+0x60>)
   18a5c:	2201      	movs	r2, #1
   18a5e:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

    if (expire_msecs >= 44739243) {
   18a62:	4b16      	ldr	r3, [pc, #88]	; (18abc <hal_watchdog_init+0x64>)
   18a64:	4298      	cmp	r0, r3
   18a66:	d821      	bhi.n	18aac <hal_watchdog_init+0x54>
        /* maximum allowed time is near 12.5 hours! */
        assert(0);
    } else {
        NRF_WDT->CRV = (expire_msecs * 32) + ((expire_msecs * 96) / 125);
   18a68:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   18a6c:	015b      	lsls	r3, r3, #5
   18a6e:	4a14      	ldr	r2, [pc, #80]	; (18ac0 <hal_watchdog_init+0x68>)
   18a70:	fba2 2303 	umull	r2, r3, r2, r3
   18a74:	08db      	lsrs	r3, r3, #3
   18a76:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   18a7a:	4b0f      	ldr	r3, [pc, #60]	; (18ab8 <hal_watchdog_init+0x60>)
   18a7c:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
  uint32_t vectors = (uint32_t )SCB->VTOR;
   18a80:	4a10      	ldr	r2, [pc, #64]	; (18ac4 <hal_watchdog_init+0x6c>)
   18a82:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   18a84:	4910      	ldr	r1, [pc, #64]	; (18ac8 <hal_watchdog_init+0x70>)
   18a86:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   18a8a:	4a10      	ldr	r2, [pc, #64]	; (18acc <hal_watchdog_init+0x74>)
   18a8c:	21e0      	movs	r1, #224	; 0xe0
   18a8e:	f882 1310 	strb.w	r1, [r2, #784]	; 0x310
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18a92:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   18a96:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18a9a:	6011      	str	r1, [r2, #0]

    NVIC_SetVector(WDT_IRQn, (uint32_t) nrf52_wdt_irq_handler);
    NVIC_SetPriority(WDT_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_ClearPendingIRQ(WDT_IRQn);
    NVIC_EnableIRQ(WDT_IRQn);
    NRF_WDT->RREN |= 0x1;
   18a9c:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
   18aa0:	f042 0201 	orr.w	r2, r2, #1
   18aa4:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

    return (0);
}
   18aa8:	2000      	movs	r0, #0
   18aaa:	bd08      	pop	{r3, pc}
        assert(0);
   18aac:	2300      	movs	r3, #0
   18aae:	461a      	mov	r2, r3
   18ab0:	4619      	mov	r1, r3
   18ab2:	4618      	mov	r0, r3
   18ab4:	f7f0 faca 	bl	904c <__assert_func>
   18ab8:	40010000 	.word	0x40010000
   18abc:	02aaaaaa 	.word	0x02aaaaaa
   18ac0:	10624dd3 	.word	0x10624dd3
   18ac4:	e000ed00 	.word	0xe000ed00
   18ac8:	00018a39 	.word	0x00018a39
   18acc:	e000e100 	.word	0xe000e100

00018ad0 <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
    NRF_WDT->INTENSET = WDT_INTENSET_TIMEOUT_Msk;
   18ad0:	4b02      	ldr	r3, [pc, #8]	; (18adc <hal_watchdog_enable+0xc>)
   18ad2:	2201      	movs	r2, #1
   18ad4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NRF_WDT->TASKS_START = 1;
   18ad8:	601a      	str	r2, [r3, #0]
}
   18ada:	4770      	bx	lr
   18adc:	40010000 	.word	0x40010000

00018ae0 <hal_watchdog_tickle>:

void
hal_watchdog_tickle(void)
{
    NRF_WDT->RR[0] = WDT_RR_RR_Reload;
   18ae0:	4b02      	ldr	r3, [pc, #8]	; (18aec <hal_watchdog_tickle+0xc>)
   18ae2:	4a03      	ldr	r2, [pc, #12]	; (18af0 <hal_watchdog_tickle+0x10>)
   18ae4:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
}
   18ae8:	4770      	bx	lr
   18aea:	bf00      	nop
   18aec:	40010000 	.word	0x40010000
   18af0:	6e524635 	.word	0x6e524635

00018af4 <nrf52_periph_create_timers>:
#endif
#endif

static void
nrf52_periph_create_timers(void)
{
   18af4:	b508      	push	{r3, lr}
    int rc;

    (void)rc;

#if MYNEWT_VAL(TIMER_0)
    rc = hal_timer_init(0, NULL);
   18af6:	2100      	movs	r1, #0
   18af8:	4608      	mov	r0, r1
   18afa:	f7ff fe41 	bl	18780 <hal_timer_init>
    assert(rc == 0);
   18afe:	b920      	cbnz	r0, 18b0a <nrf52_periph_create_timers+0x16>
    rc = hal_timer_init(5, NULL);
    assert(rc == 0);
#endif

#if MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
   18b00:	4808      	ldr	r0, [pc, #32]	; (18b24 <nrf52_periph_create_timers+0x30>)
   18b02:	f7f0 fce1 	bl	94c8 <os_cputime_init>
    assert(rc == 0);
   18b06:	b930      	cbnz	r0, 18b16 <nrf52_periph_create_timers+0x22>
#endif
}
   18b08:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   18b0a:	2300      	movs	r3, #0
   18b0c:	461a      	mov	r2, r3
   18b0e:	4619      	mov	r1, r3
   18b10:	4618      	mov	r0, r3
   18b12:	f7f0 fa9b 	bl	904c <__assert_func>
    assert(rc == 0);
   18b16:	2300      	movs	r3, #0
   18b18:	461a      	mov	r2, r3
   18b1a:	4619      	mov	r1, r3
   18b1c:	4618      	mov	r0, r3
   18b1e:	f7f0 fa95 	bl	904c <__assert_func>
   18b22:	bf00      	nop
   18b24:	000f4240 	.word	0x000f4240

00018b28 <nrf52_periph_create_spi>:
#endif
}

static void
nrf52_periph_create_spi(void)
{
   18b28:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BUS_DRIVER_PRESENT)
    rc = bus_spi_hal_dev_create("spi0",
                                &spi0_bus, (struct bus_spi_dev_cfg *)&spi0_cfg);
    assert(rc == 0);
#else
    rc = hal_spi_init(0, (void *)&os_bsp_spi0m_cfg, HAL_SPI_TYPE_MASTER);
   18b2a:	2200      	movs	r2, #0
   18b2c:	4905      	ldr	r1, [pc, #20]	; (18b44 <nrf52_periph_create_spi+0x1c>)
   18b2e:	4610      	mov	r0, r2
   18b30:	f7ff fc1e 	bl	18370 <hal_spi_init>
    assert(rc == 0);
   18b34:	b900      	cbnz	r0, 18b38 <nrf52_periph_create_spi+0x10>
#else
    rc = hal_spi_init(3, (void *)&os_bsp_spi3m_cfg, HAL_SPI_TYPE_MASTER);
    assert(rc == 0);
#endif
#endif
}
   18b36:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   18b38:	2300      	movs	r3, #0
   18b3a:	461a      	mov	r2, r3
   18b3c:	4619      	mov	r1, r3
   18b3e:	4618      	mov	r0, r3
   18b40:	f7f0 fa84 	bl	904c <__assert_func>
   18b44:	000244e4 	.word	0x000244e4

00018b48 <nrf52_periph_create>:

void
nrf52_periph_create(void)
{
   18b48:	b508      	push	{r3, lr}
    nrf52_periph_create_timers();
   18b4a:	f7ff ffd3 	bl	18af4 <nrf52_periph_create_timers>
    nrf52_periph_create_pwm();
    nrf52_periph_create_trng();
    nrf52_periph_create_crypto();
    nrf52_periph_create_uart();
    nrf52_periph_create_i2c();
    nrf52_periph_create_spi();
   18b4e:	f7ff ffeb 	bl	18b28 <nrf52_periph_create_spi>
}
   18b52:	bd08      	pop	{r3, pc}

00018b54 <cir_pkg_init>:
{
#ifdef __KERNEL__
    cir_chrdev_pkg_init();
    pr_info("uwbcir: cat /dev/uwbcir\n");
#endif  /* __KERNEL__ */
}
   18b54:	4770      	bx	lr

00018b56 <cir_pkg_down>:
{
#if __KERNEL__
    cir_chrdev_pkg_down(reason);
#endif
    return 0;
}
   18b56:	2000      	movs	r0, #0
   18b58:	4770      	bx	lr
	...

00018b5c <json_encode_object_start>:
    (__e)->je_write((__e)->je_arg, "]", sizeof("]")-1);


int
json_encode_object_start(struct json_encoder *encoder)
{
   18b5c:	b510      	push	{r4, lr}
   18b5e:	4604      	mov	r4, r0
    if (encoder->je_wr_commas) {
   18b60:	7a03      	ldrb	r3, [r0, #8]
   18b62:	f013 0f01 	tst.w	r3, #1
   18b66:	d008      	beq.n	18b7a <json_encode_object_start+0x1e>
        encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
   18b68:	6803      	ldr	r3, [r0, #0]
   18b6a:	2201      	movs	r2, #1
   18b6c:	4908      	ldr	r1, [pc, #32]	; (18b90 <json_encode_object_start+0x34>)
   18b6e:	6840      	ldr	r0, [r0, #4]
   18b70:	4798      	blx	r3
        encoder->je_wr_commas = 0;
   18b72:	7a23      	ldrb	r3, [r4, #8]
   18b74:	f36f 0300 	bfc	r3, #0, #1
   18b78:	7223      	strb	r3, [r4, #8]
    }
    JSON_ENCODE_OBJECT_START(encoder);
   18b7a:	6823      	ldr	r3, [r4, #0]
   18b7c:	2201      	movs	r2, #1
   18b7e:	4905      	ldr	r1, [pc, #20]	; (18b94 <json_encode_object_start+0x38>)
   18b80:	6860      	ldr	r0, [r4, #4]
   18b82:	4798      	blx	r3
    encoder->je_wr_commas = 0;
   18b84:	7a23      	ldrb	r3, [r4, #8]
   18b86:	f36f 0300 	bfc	r3, #0, #1
   18b8a:	7223      	strb	r3, [r4, #8]

    return (0);
}
   18b8c:	2000      	movs	r0, #0
   18b8e:	bd10      	pop	{r4, pc}
   18b90:	000244e8 	.word	0x000244e8
   18b94:	000244ec 	.word	0x000244ec

00018b98 <json_encode_object_key>:
}
EXPORT_SYMBOL(json_encode_value);

int
json_encode_object_key(struct json_encoder *encoder, char *key)
{
   18b98:	b570      	push	{r4, r5, r6, lr}
   18b9a:	4604      	mov	r4, r0
   18b9c:	460d      	mov	r5, r1
    if (encoder->je_wr_commas) {
   18b9e:	7a03      	ldrb	r3, [r0, #8]
   18ba0:	f013 0f01 	tst.w	r3, #1
   18ba4:	d008      	beq.n	18bb8 <json_encode_object_key+0x20>
        encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
   18ba6:	6803      	ldr	r3, [r0, #0]
   18ba8:	2201      	movs	r2, #1
   18baa:	490d      	ldr	r1, [pc, #52]	; (18be0 <json_encode_object_key+0x48>)
   18bac:	6840      	ldr	r0, [r0, #4]
   18bae:	4798      	blx	r3
        encoder->je_wr_commas = 0;
   18bb0:	7a23      	ldrb	r3, [r4, #8]
   18bb2:	f36f 0300 	bfc	r3, #0, #1
   18bb6:	7223      	strb	r3, [r4, #8]
    }

    /* Write the key entry */
    encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
   18bb8:	6823      	ldr	r3, [r4, #0]
   18bba:	2201      	movs	r2, #1
   18bbc:	4909      	ldr	r1, [pc, #36]	; (18be4 <json_encode_object_key+0x4c>)
   18bbe:	6860      	ldr	r0, [r4, #4]
   18bc0:	4798      	blx	r3
    encoder->je_write(encoder->je_arg, key, strlen(key));
   18bc2:	6826      	ldr	r6, [r4, #0]
   18bc4:	4628      	mov	r0, r5
   18bc6:	f7f4 ff53 	bl	da70 <strlen>
   18bca:	4602      	mov	r2, r0
   18bcc:	4629      	mov	r1, r5
   18bce:	6860      	ldr	r0, [r4, #4]
   18bd0:	47b0      	blx	r6
    encoder->je_write(encoder->je_arg, "\": ", sizeof("\": ")-1);
   18bd2:	6823      	ldr	r3, [r4, #0]
   18bd4:	2203      	movs	r2, #3
   18bd6:	4904      	ldr	r1, [pc, #16]	; (18be8 <json_encode_object_key+0x50>)
   18bd8:	6860      	ldr	r0, [r4, #4]
   18bda:	4798      	blx	r3

    return (0);
}
   18bdc:	2000      	movs	r0, #0
   18bde:	bd70      	pop	{r4, r5, r6, pc}
   18be0:	000244e8 	.word	0x000244e8
   18be4:	000244f0 	.word	0x000244f0
   18be8:	000244f4 	.word	0x000244f4

00018bec <json_encode_object_entry>:
EXPORT_SYMBOL(json_encode_object_key);

int
json_encode_object_entry(struct json_encoder *encoder, char *key,
        struct json_value *val)
{
   18bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18bee:	4604      	mov	r4, r0
   18bf0:	460d      	mov	r5, r1
   18bf2:	4616      	mov	r6, r2
    int rc;

    if (encoder->je_wr_commas) {
   18bf4:	7a03      	ldrb	r3, [r0, #8]
   18bf6:	f013 0f01 	tst.w	r3, #1
   18bfa:	d008      	beq.n	18c0e <json_encode_object_entry+0x22>
        encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
   18bfc:	6803      	ldr	r3, [r0, #0]
   18bfe:	2201      	movs	r2, #1
   18c00:	4911      	ldr	r1, [pc, #68]	; (18c48 <json_encode_object_entry+0x5c>)
   18c02:	6840      	ldr	r0, [r0, #4]
   18c04:	4798      	blx	r3
        encoder->je_wr_commas = 0;
   18c06:	7a23      	ldrb	r3, [r4, #8]
   18c08:	f36f 0300 	bfc	r3, #0, #1
   18c0c:	7223      	strb	r3, [r4, #8]
    }
    /* Write the key entry */
    encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
   18c0e:	6823      	ldr	r3, [r4, #0]
   18c10:	2201      	movs	r2, #1
   18c12:	490e      	ldr	r1, [pc, #56]	; (18c4c <json_encode_object_entry+0x60>)
   18c14:	6860      	ldr	r0, [r4, #4]
   18c16:	4798      	blx	r3
    encoder->je_write(encoder->je_arg, key, strlen(key));
   18c18:	6827      	ldr	r7, [r4, #0]
   18c1a:	4628      	mov	r0, r5
   18c1c:	f7f4 ff28 	bl	da70 <strlen>
   18c20:	4602      	mov	r2, r0
   18c22:	4629      	mov	r1, r5
   18c24:	6860      	ldr	r0, [r4, #4]
   18c26:	47b8      	blx	r7
    encoder->je_write(encoder->je_arg, "\": ", sizeof("\": ")-1);
   18c28:	6823      	ldr	r3, [r4, #0]
   18c2a:	2203      	movs	r2, #3
   18c2c:	4908      	ldr	r1, [pc, #32]	; (18c50 <json_encode_object_entry+0x64>)
   18c2e:	6860      	ldr	r0, [r4, #4]
   18c30:	4798      	blx	r3

    rc = json_encode_value(encoder, val);
   18c32:	4631      	mov	r1, r6
   18c34:	4620      	mov	r0, r4
   18c36:	f000 f80d 	bl	18c54 <json_encode_value>
    if (rc != 0) {
   18c3a:	b918      	cbnz	r0, 18c44 <json_encode_object_entry+0x58>
        goto err;
    }
    encoder->je_wr_commas = 1;
   18c3c:	7a23      	ldrb	r3, [r4, #8]
   18c3e:	f043 0301 	orr.w	r3, r3, #1
   18c42:	7223      	strb	r3, [r4, #8]

    return (0);
err:
    return (rc);
}
   18c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18c46:	bf00      	nop
   18c48:	000244e8 	.word	0x000244e8
   18c4c:	000244f0 	.word	0x000244f0
   18c50:	000244f4 	.word	0x000244f4

00018c54 <json_encode_value>:
{
   18c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18c56:	4605      	mov	r5, r0
   18c58:	460c      	mov	r4, r1
    switch (jv->jv_type) {
   18c5a:	784b      	ldrb	r3, [r1, #1]
   18c5c:	2b06      	cmp	r3, #6
   18c5e:	f200 8141 	bhi.w	18ee4 <json_encode_value+0x290>
   18c62:	e8df f013 	tbh	[pc, r3, lsl #1]
   18c66:	0007      	.short	0x0007
   18c68:	002b001c 	.word	0x002b001c
   18c6c:	00fa005a 	.word	0x00fa005a
   18c70:	003a0120 	.word	0x003a0120
            len = sprintf(encoder->je_encode_buf, "%s",
   18c74:	f100 0609 	add.w	r6, r0, #9
                    jv->jv_val.u > 0 ? "true" : "false");
   18c78:	688a      	ldr	r2, [r1, #8]
   18c7a:	68cb      	ldr	r3, [r1, #12]
            len = sprintf(encoder->je_encode_buf, "%s",
   18c7c:	4313      	orrs	r3, r2
   18c7e:	d00c      	beq.n	18c9a <json_encode_value+0x46>
   18c80:	4a9a      	ldr	r2, [pc, #616]	; (18eec <json_encode_value+0x298>)
   18c82:	499b      	ldr	r1, [pc, #620]	; (18ef0 <json_encode_value+0x29c>)
   18c84:	4630      	mov	r0, r6
   18c86:	f003 fba2 	bl	1c3ce <sprintf>
   18c8a:	4602      	mov	r2, r0
            encoder->je_write(encoder->je_arg, encoder->je_encode_buf, len);
   18c8c:	682b      	ldr	r3, [r5, #0]
   18c8e:	4631      	mov	r1, r6
   18c90:	6868      	ldr	r0, [r5, #4]
   18c92:	4798      	blx	r3
    return (0);
   18c94:	2300      	movs	r3, #0
}
   18c96:	4618      	mov	r0, r3
   18c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            len = sprintf(encoder->je_encode_buf, "%s",
   18c9a:	4a96      	ldr	r2, [pc, #600]	; (18ef4 <json_encode_value+0x2a0>)
   18c9c:	e7f1      	b.n	18c82 <json_encode_value+0x2e>
            len = sprintf(encoder->je_encode_buf, "%" PRIu64,
   18c9e:	f100 0609 	add.w	r6, r0, #9
   18ca2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   18ca6:	4994      	ldr	r1, [pc, #592]	; (18ef8 <json_encode_value+0x2a4>)
   18ca8:	4630      	mov	r0, r6
   18caa:	f003 fb90 	bl	1c3ce <sprintf>
   18cae:	4602      	mov	r2, r0
            encoder->je_write(encoder->je_arg, encoder->je_encode_buf, len);
   18cb0:	682b      	ldr	r3, [r5, #0]
   18cb2:	4631      	mov	r1, r6
   18cb4:	6868      	ldr	r0, [r5, #4]
   18cb6:	4798      	blx	r3
    return (0);
   18cb8:	2300      	movs	r3, #0
            break;
   18cba:	e7ec      	b.n	18c96 <json_encode_value+0x42>
            len = sprintf(encoder->je_encode_buf, "%" PRIi64,
   18cbc:	f100 0609 	add.w	r6, r0, #9
   18cc0:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   18cc4:	498d      	ldr	r1, [pc, #564]	; (18efc <json_encode_value+0x2a8>)
   18cc6:	4630      	mov	r0, r6
   18cc8:	f003 fb81 	bl	1c3ce <sprintf>
   18ccc:	4602      	mov	r2, r0
            encoder->je_write(encoder->je_arg, encoder->je_encode_buf, len);
   18cce:	682b      	ldr	r3, [r5, #0]
   18cd0:	4631      	mov	r1, r6
   18cd2:	6868      	ldr	r0, [r5, #4]
   18cd4:	4798      	blx	r3
    return (0);
   18cd6:	2300      	movs	r3, #0
            break;
   18cd8:	e7dd      	b.n	18c96 <json_encode_value+0x42>
        if  (DPL_FLOAT64_ISNAN(jv->jv_val.fl)){
   18cda:	e9d1 6702 	ldrd	r6, r7, [r1, #8]
   18cde:	4632      	mov	r2, r6
   18ce0:	463b      	mov	r3, r7
   18ce2:	4630      	mov	r0, r6
   18ce4:	4639      	mov	r1, r7
   18ce6:	f008 fd93 	bl	21810 <__aeabi_dcmpun>
   18cea:	b970      	cbnz	r0, 18d0a <json_encode_value+0xb6>
            len = sprintf(encoder->je_encode_buf,
   18cec:	4632      	mov	r2, r6
   18cee:	463b      	mov	r3, r7
   18cf0:	4983      	ldr	r1, [pc, #524]	; (18f00 <json_encode_value+0x2ac>)
   18cf2:	f105 0009 	add.w	r0, r5, #9
   18cf6:	f003 fb6a 	bl	1c3ce <sprintf>
   18cfa:	4602      	mov	r2, r0
        encoder->je_write(encoder->je_arg, encoder->je_encode_buf, len);
   18cfc:	4629      	mov	r1, r5
   18cfe:	f851 3b09 	ldr.w	r3, [r1], #9
   18d02:	6868      	ldr	r0, [r5, #4]
   18d04:	4798      	blx	r3
    return (0);
   18d06:	2300      	movs	r3, #0
        break;
   18d08:	e7c5      	b.n	18c96 <json_encode_value+0x42>
            len = sprintf(encoder->je_encode_buf, "null");
   18d0a:	4b7e      	ldr	r3, [pc, #504]	; (18f04 <json_encode_value+0x2b0>)
   18d0c:	6818      	ldr	r0, [r3, #0]
   18d0e:	f8c5 0009 	str.w	r0, [r5, #9]
   18d12:	791b      	ldrb	r3, [r3, #4]
   18d14:	736b      	strb	r3, [r5, #13]
   18d16:	2204      	movs	r2, #4
   18d18:	e7f0      	b.n	18cfc <json_encode_value+0xa8>
            encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
   18d1a:	6803      	ldr	r3, [r0, #0]
   18d1c:	2201      	movs	r2, #1
   18d1e:	497a      	ldr	r1, [pc, #488]	; (18f08 <json_encode_value+0x2b4>)
   18d20:	6840      	ldr	r0, [r0, #4]
   18d22:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
   18d24:	2600      	movs	r6, #0
   18d26:	e012      	b.n	18d4e <json_encode_value+0xfa>
   18d28:	2b5c      	cmp	r3, #92	; 0x5c
   18d2a:	d004      	beq.n	18d36 <json_encode_value+0xe2>
                        encoder->je_write(encoder->je_arg,
   18d2c:	682b      	ldr	r3, [r5, #0]
   18d2e:	2201      	movs	r2, #1
   18d30:	6868      	ldr	r0, [r5, #4]
   18d32:	4798      	blx	r3
                        break;
   18d34:	e00a      	b.n	18d4c <json_encode_value+0xf8>
                        encoder->je_write(encoder->je_arg, "\\",
   18d36:	682b      	ldr	r3, [r5, #0]
   18d38:	2201      	movs	r2, #1
   18d3a:	4974      	ldr	r1, [pc, #464]	; (18f0c <json_encode_value+0x2b8>)
   18d3c:	6868      	ldr	r0, [r5, #4]
   18d3e:	4798      	blx	r3
                        encoder->je_write(encoder->je_arg,
   18d40:	682b      	ldr	r3, [r5, #0]
                                (char *) &jv->jv_val.str[i], 1);
   18d42:	68a1      	ldr	r1, [r4, #8]
                        encoder->je_write(encoder->je_arg,
   18d44:	2201      	movs	r2, #1
   18d46:	4439      	add	r1, r7
   18d48:	6868      	ldr	r0, [r5, #4]
   18d4a:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
   18d4c:	3601      	adds	r6, #1
   18d4e:	8863      	ldrh	r3, [r4, #2]
   18d50:	42b3      	cmp	r3, r6
   18d52:	dd7b      	ble.n	18e4c <json_encode_value+0x1f8>
                switch (jv->jv_val.str[i]) {
   18d54:	68a3      	ldr	r3, [r4, #8]
   18d56:	4637      	mov	r7, r6
   18d58:	1999      	adds	r1, r3, r6
   18d5a:	5d9b      	ldrb	r3, [r3, r6]
   18d5c:	2b2f      	cmp	r3, #47	; 0x2f
   18d5e:	d8e3      	bhi.n	18d28 <json_encode_value+0xd4>
   18d60:	2b08      	cmp	r3, #8
   18d62:	d3e3      	bcc.n	18d2c <json_encode_value+0xd8>
   18d64:	3b08      	subs	r3, #8
   18d66:	2b27      	cmp	r3, #39	; 0x27
   18d68:	d8e0      	bhi.n	18d2c <json_encode_value+0xd8>
   18d6a:	a201      	add	r2, pc, #4	; (adr r2, 18d70 <json_encode_value+0x11c>)
   18d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   18d70:	00018e41 	.word	0x00018e41
   18d74:	00018e11 	.word	0x00018e11
   18d78:	00018e29 	.word	0x00018e29
   18d7c:	00018d2d 	.word	0x00018d2d
   18d80:	00018e35 	.word	0x00018e35
   18d84:	00018e1d 	.word	0x00018e1d
   18d88:	00018d2d 	.word	0x00018d2d
   18d8c:	00018d2d 	.word	0x00018d2d
   18d90:	00018d2d 	.word	0x00018d2d
   18d94:	00018d2d 	.word	0x00018d2d
   18d98:	00018d2d 	.word	0x00018d2d
   18d9c:	00018d2d 	.word	0x00018d2d
   18da0:	00018d2d 	.word	0x00018d2d
   18da4:	00018d2d 	.word	0x00018d2d
   18da8:	00018d2d 	.word	0x00018d2d
   18dac:	00018d2d 	.word	0x00018d2d
   18db0:	00018d2d 	.word	0x00018d2d
   18db4:	00018d2d 	.word	0x00018d2d
   18db8:	00018d2d 	.word	0x00018d2d
   18dbc:	00018d2d 	.word	0x00018d2d
   18dc0:	00018d2d 	.word	0x00018d2d
   18dc4:	00018d2d 	.word	0x00018d2d
   18dc8:	00018d2d 	.word	0x00018d2d
   18dcc:	00018d2d 	.word	0x00018d2d
   18dd0:	00018d2d 	.word	0x00018d2d
   18dd4:	00018d2d 	.word	0x00018d2d
   18dd8:	00018d37 	.word	0x00018d37
   18ddc:	00018d2d 	.word	0x00018d2d
   18de0:	00018d2d 	.word	0x00018d2d
   18de4:	00018d2d 	.word	0x00018d2d
   18de8:	00018d2d 	.word	0x00018d2d
   18dec:	00018d2d 	.word	0x00018d2d
   18df0:	00018d2d 	.word	0x00018d2d
   18df4:	00018d2d 	.word	0x00018d2d
   18df8:	00018d2d 	.word	0x00018d2d
   18dfc:	00018d2d 	.word	0x00018d2d
   18e00:	00018d2d 	.word	0x00018d2d
   18e04:	00018d2d 	.word	0x00018d2d
   18e08:	00018d2d 	.word	0x00018d2d
   18e0c:	00018d37 	.word	0x00018d37
                        encoder->je_write(encoder->je_arg, "\\t",
   18e10:	682b      	ldr	r3, [r5, #0]
   18e12:	2202      	movs	r2, #2
   18e14:	493e      	ldr	r1, [pc, #248]	; (18f10 <json_encode_value+0x2bc>)
   18e16:	6868      	ldr	r0, [r5, #4]
   18e18:	4798      	blx	r3
                        break;
   18e1a:	e797      	b.n	18d4c <json_encode_value+0xf8>
                        encoder->je_write(encoder->je_arg, "\\r",
   18e1c:	682b      	ldr	r3, [r5, #0]
   18e1e:	2202      	movs	r2, #2
   18e20:	493c      	ldr	r1, [pc, #240]	; (18f14 <json_encode_value+0x2c0>)
   18e22:	6868      	ldr	r0, [r5, #4]
   18e24:	4798      	blx	r3
                        break;
   18e26:	e791      	b.n	18d4c <json_encode_value+0xf8>
                        encoder->je_write(encoder->je_arg, "\\n",
   18e28:	682b      	ldr	r3, [r5, #0]
   18e2a:	2202      	movs	r2, #2
   18e2c:	493a      	ldr	r1, [pc, #232]	; (18f18 <json_encode_value+0x2c4>)
   18e2e:	6868      	ldr	r0, [r5, #4]
   18e30:	4798      	blx	r3
                        break;
   18e32:	e78b      	b.n	18d4c <json_encode_value+0xf8>
                        encoder->je_write(encoder->je_arg, "\\f",
   18e34:	682b      	ldr	r3, [r5, #0]
   18e36:	2202      	movs	r2, #2
   18e38:	4938      	ldr	r1, [pc, #224]	; (18f1c <json_encode_value+0x2c8>)
   18e3a:	6868      	ldr	r0, [r5, #4]
   18e3c:	4798      	blx	r3
                        break;
   18e3e:	e785      	b.n	18d4c <json_encode_value+0xf8>
                        encoder->je_write(encoder->je_arg, "\\b",
   18e40:	682b      	ldr	r3, [r5, #0]
   18e42:	2202      	movs	r2, #2
   18e44:	4936      	ldr	r1, [pc, #216]	; (18f20 <json_encode_value+0x2cc>)
   18e46:	6868      	ldr	r0, [r5, #4]
   18e48:	4798      	blx	r3
                        break;
   18e4a:	e77f      	b.n	18d4c <json_encode_value+0xf8>
            encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
   18e4c:	682b      	ldr	r3, [r5, #0]
   18e4e:	2201      	movs	r2, #1
   18e50:	492d      	ldr	r1, [pc, #180]	; (18f08 <json_encode_value+0x2b4>)
   18e52:	6868      	ldr	r0, [r5, #4]
   18e54:	4798      	blx	r3
    return (0);
   18e56:	2300      	movs	r3, #0
            break;
   18e58:	e71d      	b.n	18c96 <json_encode_value+0x42>
            JSON_ENCODE_ARRAY_START(encoder);
   18e5a:	6803      	ldr	r3, [r0, #0]
   18e5c:	2201      	movs	r2, #1
   18e5e:	4931      	ldr	r1, [pc, #196]	; (18f24 <json_encode_value+0x2d0>)
   18e60:	6840      	ldr	r0, [r0, #4]
   18e62:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
   18e64:	2600      	movs	r6, #0
   18e66:	e000      	b.n	18e6a <json_encode_value+0x216>
   18e68:	3601      	adds	r6, #1
   18e6a:	8863      	ldrh	r3, [r4, #2]
   18e6c:	42b3      	cmp	r3, r6
   18e6e:	dd13      	ble.n	18e98 <json_encode_value+0x244>
                rc = json_encode_value(encoder, jv->jv_val.composite.values[i]);
   18e70:	68e3      	ldr	r3, [r4, #12]
   18e72:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
   18e76:	4628      	mov	r0, r5
   18e78:	f7ff feec 	bl	18c54 <json_encode_value>
                if (rc != 0) {
   18e7c:	4603      	mov	r3, r0
   18e7e:	2800      	cmp	r0, #0
   18e80:	f47f af09 	bne.w	18c96 <json_encode_value+0x42>
                if (i != jv->jv_len - 1) {
   18e84:	8863      	ldrh	r3, [r4, #2]
   18e86:	3b01      	subs	r3, #1
   18e88:	42b3      	cmp	r3, r6
   18e8a:	d0ed      	beq.n	18e68 <json_encode_value+0x214>
                    encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
   18e8c:	682b      	ldr	r3, [r5, #0]
   18e8e:	2201      	movs	r2, #1
   18e90:	4925      	ldr	r1, [pc, #148]	; (18f28 <json_encode_value+0x2d4>)
   18e92:	6868      	ldr	r0, [r5, #4]
   18e94:	4798      	blx	r3
   18e96:	e7e7      	b.n	18e68 <json_encode_value+0x214>
            JSON_ENCODE_ARRAY_END(encoder);
   18e98:	682b      	ldr	r3, [r5, #0]
   18e9a:	2201      	movs	r2, #1
   18e9c:	4923      	ldr	r1, [pc, #140]	; (18f2c <json_encode_value+0x2d8>)
   18e9e:	6868      	ldr	r0, [r5, #4]
   18ea0:	4798      	blx	r3
    return (0);
   18ea2:	2300      	movs	r3, #0
            break;
   18ea4:	e6f7      	b.n	18c96 <json_encode_value+0x42>
            JSON_ENCODE_OBJECT_START(encoder);
   18ea6:	6803      	ldr	r3, [r0, #0]
   18ea8:	2201      	movs	r2, #1
   18eaa:	4921      	ldr	r1, [pc, #132]	; (18f30 <json_encode_value+0x2dc>)
   18eac:	6840      	ldr	r0, [r0, #4]
   18eae:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
   18eb0:	2600      	movs	r6, #0
   18eb2:	e000      	b.n	18eb6 <json_encode_value+0x262>
   18eb4:	3601      	adds	r6, #1
   18eb6:	8863      	ldrh	r3, [r4, #2]
   18eb8:	42b3      	cmp	r3, r6
   18eba:	dd0c      	ble.n	18ed6 <json_encode_value+0x282>
                        jv->jv_val.composite.keys[i],
   18ebc:	68a3      	ldr	r3, [r4, #8]
                        jv->jv_val.composite.values[i]);
   18ebe:	68e2      	ldr	r2, [r4, #12]
                rc = json_encode_object_entry(encoder,
   18ec0:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
   18ec4:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
   18ec8:	4628      	mov	r0, r5
   18eca:	f7ff fe8f 	bl	18bec <json_encode_object_entry>
                if (rc != 0) {
   18ece:	4603      	mov	r3, r0
   18ed0:	2800      	cmp	r0, #0
   18ed2:	d0ef      	beq.n	18eb4 <json_encode_value+0x260>
   18ed4:	e6df      	b.n	18c96 <json_encode_value+0x42>
            JSON_ENCODE_OBJECT_END(encoder);
   18ed6:	682b      	ldr	r3, [r5, #0]
   18ed8:	2201      	movs	r2, #1
   18eda:	4916      	ldr	r1, [pc, #88]	; (18f34 <json_encode_value+0x2e0>)
   18edc:	6868      	ldr	r0, [r5, #4]
   18ede:	4798      	blx	r3
    return (0);
   18ee0:	2300      	movs	r3, #0
            break;
   18ee2:	e6d8      	b.n	18c96 <json_encode_value+0x42>
    switch (jv->jv_type) {
   18ee4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18ee8:	e6d5      	b.n	18c96 <json_encode_value+0x42>
   18eea:	bf00      	nop
   18eec:	00024500 	.word	0x00024500
   18ef0:	00023278 	.word	0x00023278
   18ef4:	000244f8 	.word	0x000244f8
   18ef8:	00024508 	.word	0x00024508
   18efc:	00024510 	.word	0x00024510
   18f00:	00024520 	.word	0x00024520
   18f04:	00024518 	.word	0x00024518
   18f08:	000244f0 	.word	0x000244f0
   18f0c:	00024524 	.word	0x00024524
   18f10:	00024528 	.word	0x00024528
   18f14:	0002452c 	.word	0x0002452c
   18f18:	00024530 	.word	0x00024530
   18f1c:	00024534 	.word	0x00024534
   18f20:	00024538 	.word	0x00024538
   18f24:	0002453c 	.word	0x0002453c
   18f28:	000244e8 	.word	0x000244e8
   18f2c:	00023870 	.word	0x00023870
   18f30:	000244ec 	.word	0x000244ec
   18f34:	00024540 	.word	0x00024540

00018f38 <json_encode_object_finish>:
EXPORT_SYMBOL(json_encode_object_entry);

int
json_encode_object_finish(struct json_encoder *encoder)
{
   18f38:	b510      	push	{r4, lr}
   18f3a:	4604      	mov	r4, r0
    JSON_ENCODE_OBJECT_END(encoder);
   18f3c:	6803      	ldr	r3, [r0, #0]
   18f3e:	2201      	movs	r2, #1
   18f40:	4904      	ldr	r1, [pc, #16]	; (18f54 <json_encode_object_finish+0x1c>)
   18f42:	6840      	ldr	r0, [r0, #4]
   18f44:	4798      	blx	r3
    /* Useful in case of nested objects. */
    encoder->je_wr_commas = 1;
   18f46:	7a23      	ldrb	r3, [r4, #8]
   18f48:	f043 0301 	orr.w	r3, r3, #1
   18f4c:	7223      	strb	r3, [r4, #8]

    return (0);
}
   18f4e:	2000      	movs	r0, #0
   18f50:	bd10      	pop	{r4, pc}
   18f52:	bf00      	nop
   18f54:	00024540 	.word	0x00024540

00018f58 <json_encode_array_name>:
EXPORT_SYMBOL(json_encode_object_finish);

int
json_encode_array_name(struct json_encoder *encoder, char *name)
{
   18f58:	b508      	push	{r3, lr}
    return json_encode_object_key(encoder, name);
   18f5a:	f7ff fe1d 	bl	18b98 <json_encode_object_key>
}
   18f5e:	bd08      	pop	{r3, pc}

00018f60 <json_encode_array_start>:
EXPORT_SYMBOL(json_encode_array_name);

int
json_encode_array_start(struct json_encoder *encoder)
{
   18f60:	b510      	push	{r4, lr}
   18f62:	4604      	mov	r4, r0
    JSON_ENCODE_ARRAY_START(encoder);
   18f64:	6803      	ldr	r3, [r0, #0]
   18f66:	2201      	movs	r2, #1
   18f68:	4904      	ldr	r1, [pc, #16]	; (18f7c <json_encode_array_start+0x1c>)
   18f6a:	6840      	ldr	r0, [r0, #4]
   18f6c:	4798      	blx	r3
    encoder->je_wr_commas = 0;
   18f6e:	7a23      	ldrb	r3, [r4, #8]
   18f70:	f36f 0300 	bfc	r3, #0, #1
   18f74:	7223      	strb	r3, [r4, #8]

    return (0);
}
   18f76:	2000      	movs	r0, #0
   18f78:	bd10      	pop	{r4, pc}
   18f7a:	bf00      	nop
   18f7c:	0002453c 	.word	0x0002453c

00018f80 <json_encode_array_value>:
EXPORT_SYMBOL(json_encode_array_start);

int
json_encode_array_value(struct json_encoder *encoder, struct json_value *jv)
{
   18f80:	b538      	push	{r3, r4, r5, lr}
   18f82:	4604      	mov	r4, r0
   18f84:	460d      	mov	r5, r1
    int rc;

    if (encoder->je_wr_commas) {
   18f86:	7a03      	ldrb	r3, [r0, #8]
   18f88:	f013 0f01 	tst.w	r3, #1
   18f8c:	d008      	beq.n	18fa0 <json_encode_array_value+0x20>
        encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
   18f8e:	6803      	ldr	r3, [r0, #0]
   18f90:	2201      	movs	r2, #1
   18f92:	4908      	ldr	r1, [pc, #32]	; (18fb4 <json_encode_array_value+0x34>)
   18f94:	6840      	ldr	r0, [r0, #4]
   18f96:	4798      	blx	r3
        encoder->je_wr_commas = 0;
   18f98:	7a23      	ldrb	r3, [r4, #8]
   18f9a:	f36f 0300 	bfc	r3, #0, #1
   18f9e:	7223      	strb	r3, [r4, #8]
    }

    rc = json_encode_value(encoder, jv);
   18fa0:	4629      	mov	r1, r5
   18fa2:	4620      	mov	r0, r4
   18fa4:	f7ff fe56 	bl	18c54 <json_encode_value>
    if (rc != 0) {
   18fa8:	b918      	cbnz	r0, 18fb2 <json_encode_array_value+0x32>
        goto err;
    }
    encoder->je_wr_commas = 1;
   18faa:	7a23      	ldrb	r3, [r4, #8]
   18fac:	f043 0301 	orr.w	r3, r3, #1
   18fb0:	7223      	strb	r3, [r4, #8]

    return (0);
err:
    return (rc);
}
   18fb2:	bd38      	pop	{r3, r4, r5, pc}
   18fb4:	000244e8 	.word	0x000244e8

00018fb8 <json_encode_array_finish>:
EXPORT_SYMBOL(json_encode_array_value);

int
json_encode_array_finish(struct json_encoder *encoder)
{
   18fb8:	b508      	push	{r3, lr}
    encoder->je_wr_commas = 1;
   18fba:	7a03      	ldrb	r3, [r0, #8]
   18fbc:	f043 0301 	orr.w	r3, r3, #1
   18fc0:	7203      	strb	r3, [r0, #8]
    JSON_ENCODE_ARRAY_END(encoder);
   18fc2:	6803      	ldr	r3, [r0, #0]
   18fc4:	2201      	movs	r2, #1
   18fc6:	4902      	ldr	r1, [pc, #8]	; (18fd0 <json_encode_array_finish+0x18>)
   18fc8:	6840      	ldr	r0, [r0, #4]
   18fca:	4798      	blx	r3

    return (0);
}
   18fcc:	2000      	movs	r0, #0
   18fce:	bd08      	pop	{r3, pc}
   18fd0:	00023870 	.word	0x00023870

00018fd4 <json_read_next>:
    return len;
}

char
json_read_next(struct json_buffer * jb)
{
   18fd4:	4603      	mov	r3, r0
    json_decoder_t * decoder = (json_decoder_t *) jb;
    char c;

    if ((decoder->start_buf + decoder->current_position) <= decoder->end_buf) {
   18fd6:	68c1      	ldr	r1, [r0, #12]
   18fd8:	6942      	ldr	r2, [r0, #20]
   18fda:	eb01 0c02 	add.w	ip, r1, r2
   18fde:	6900      	ldr	r0, [r0, #16]
   18fe0:	4584      	cmp	ip, r0
   18fe2:	d901      	bls.n	18fe8 <json_read_next+0x14>
        c = *(decoder->start_buf + decoder->current_position);
        decoder->current_position++;
        return c;
    }
   return '\0';
   18fe4:	2000      	movs	r0, #0
}
   18fe6:	4770      	bx	lr
        c = *(decoder->start_buf + decoder->current_position);
   18fe8:	5c88      	ldrb	r0, [r1, r2]
        decoder->current_position++;
   18fea:	3201      	adds	r2, #1
   18fec:	615a      	str	r2, [r3, #20]
        return c;
   18fee:	4770      	bx	lr

00018ff0 <json_read_prev>:
json_read_prev(struct json_buffer * jb)
{
    json_decoder_t * decoder = (json_decoder_t *) jb;

    char c;
    if (decoder->current_position) {
   18ff0:	6943      	ldr	r3, [r0, #20]
   18ff2:	b90b      	cbnz	r3, 18ff8 <json_read_prev+0x8>
       decoder->current_position--;
       c = *(decoder->start_buf + decoder->current_position);
       return c;
    }
    /* can't rewind */
    return '\0';
   18ff4:	2000      	movs	r0, #0
}
   18ff6:	4770      	bx	lr
       decoder->current_position--;
   18ff8:	3b01      	subs	r3, #1
   18ffa:	6143      	str	r3, [r0, #20]
       c = *(decoder->start_buf + decoder->current_position);
   18ffc:	68c2      	ldr	r2, [r0, #12]
   18ffe:	5cd0      	ldrb	r0, [r2, r3]
       return c;
   19000:	4770      	bx	lr

00019002 <json_readn>:
EXPORT_SYMBOL(json_read_prev);

int
json_readn(struct json_buffer * jb, char *buf, int size)
{
   19002:	b538      	push	{r3, r4, r5, lr}
   19004:	4604      	mov	r4, r0
   19006:	4608      	mov	r0, r1
    json_decoder_t * decoder = (json_decoder_t *) jb;
    int remlen;

    remlen = (int)(decoder->end_buf - (decoder->start_buf + decoder->current_position));
   19008:	6925      	ldr	r5, [r4, #16]
   1900a:	68e3      	ldr	r3, [r4, #12]
   1900c:	6961      	ldr	r1, [r4, #20]
   1900e:	4419      	add	r1, r3
   19010:	1a6d      	subs	r5, r5, r1
    if (size > remlen) {
   19012:	4295      	cmp	r5, r2
   19014:	db00      	blt.n	19018 <json_readn+0x16>
   19016:	4615      	mov	r5, r2
        size = remlen;
    }

    memcpy(buf, decoder->start_buf + decoder->current_position, size);
   19018:	462a      	mov	r2, r5
   1901a:	f7f4 fce5 	bl	d9e8 <memcpy>
    decoder->current_position += size;
   1901e:	6963      	ldr	r3, [r4, #20]
   19020:	442b      	add	r3, r5
   19022:	6163      	str	r3, [r4, #20]
    return size;
}
   19024:	4628      	mov	r0, r5
   19026:	bd38      	pop	{r3, r4, r5, pc}

00019028 <uwb_rng_tof_to_meters>:
 *
 * @return range in meters
 */
dpl_float64_t
uwb_rng_tof_to_meters(dpl_float64_t ToF)
{
   19028:	b538      	push	{r3, r4, r5, lr}
   1902a:	ec55 4b10 	vmov	r4, r5, d0
    if (DPL_FLOAT64_ISNAN(ToF)) {
   1902e:	ee10 2a10 	vmov	r2, s0
   19032:	462b      	mov	r3, r5
   19034:	ee10 0a10 	vmov	r0, s0
   19038:	4629      	mov	r1, r5
   1903a:	f008 fbe9 	bl	21810 <__aeabi_dcmpun>
   1903e:	b948      	cbnz	r0, 19054 <uwb_rng_tof_to_meters+0x2c>
        return DPL_FLOAT64_NAN();
    }
    /* ToF * (299792458.0l/1.000293l) * (1.0/499.2e6/128.0) */
    dpl_float64_t tmp = DPL_FLOAT64_INIT((299792458.0l/1.000293l) * (1.0/499.2e6/128.0));
    return DPL_FLOAT64_MUL(ToF, tmp);
   19040:	a309      	add	r3, pc, #36	; (adr r3, 19068 <uwb_rng_tof_to_meters+0x40>)
   19042:	e9d3 2300 	ldrd	r2, r3, [r3]
   19046:	4620      	mov	r0, r4
   19048:	4629      	mov	r1, r5
   1904a:	f008 f947 	bl	212dc <__aeabi_dmul>
   1904e:	ec41 0b10 	vmov	d0, r0, r1
}
   19052:	bd38      	pop	{r3, r4, r5, pc}
        return DPL_FLOAT64_NAN();
   19054:	ed9f 0b02 	vldr	d0, [pc, #8]	; 19060 <uwb_rng_tof_to_meters+0x38>
   19058:	e7fb      	b.n	19052 <uwb_rng_tof_to_meters+0x2a>
   1905a:	bf00      	nop
   1905c:	f3af 8000 	nop.w
   19060:	00000000 	.word	0x00000000
   19064:	7ff80000 	.word	0x7ff80000
   19068:	e57d514d 	.word	0xe57d514d
   1906c:	3f73363a 	.word	0x3f73363a

00019070 <calc_tof_ss>:

dpl_float64_t
calc_tof_ss(uint32_t response_timestamp, uint32_t request_timestamp,
            uint64_t transmission_timestamp,
            uint64_t reception_timestamp,  dpl_float64_t skew)
{
   19070:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   19074:	ec59 8b10 	vmov	r8, r9, d0
    dpl_float64_t ToF = DPL_FLOAT64_I32_TO_F64(0), tmpf;
    uint64_t T1R, T1r;

    T1R = (response_timestamp - request_timestamp);
   19078:	1a46      	subs	r6, r0, r1
    T1r = (transmission_timestamp - reception_timestamp) & MASK32;
    tmpf = DPL_FLOAT64_MUL(DPL_FLOAT64_U64_TO_F64(T1r),
   1907a:	9806      	ldr	r0, [sp, #24]
   1907c:	1a10      	subs	r0, r2, r0
   1907e:	2100      	movs	r1, #0
   19080:	f008 f8f6 	bl	21270 <__aeabi_ul2d>
   19084:	4604      	mov	r4, r0
   19086:	460d      	mov	r5, r1
   19088:	4642      	mov	r2, r8
   1908a:	464b      	mov	r3, r9
   1908c:	2000      	movs	r0, #0
   1908e:	490d      	ldr	r1, [pc, #52]	; (190c4 <calc_tof_ss+0x54>)
   19090:	f007 ff6c 	bl	20f6c <__aeabi_dsub>
   19094:	4602      	mov	r2, r0
   19096:	460b      	mov	r3, r1
   19098:	4620      	mov	r0, r4
   1909a:	4629      	mov	r1, r5
   1909c:	f008 f91e 	bl	212dc <__aeabi_dmul>
   190a0:	4604      	mov	r4, r0
   190a2:	460d      	mov	r5, r1
                                DPL_FLOAT64_SUB(DPL_FLOAT64_INIT(1.0), skew));
    ToF = DPL_FLOAT64_SUB(DPL_FLOAT64_U64_TO_F64(T1R), tmpf);
   190a4:	4630      	mov	r0, r6
   190a6:	f008 f89f 	bl	211e8 <__aeabi_ui2d>
   190aa:	4622      	mov	r2, r4
   190ac:	462b      	mov	r3, r5
   190ae:	f007 ff5d 	bl	20f6c <__aeabi_dsub>
    ToF = DPL_FLOAT64_DIV(ToF, DPL_FLOAT64_INIT(2.0));
   190b2:	2200      	movs	r2, #0
   190b4:	4b04      	ldr	r3, [pc, #16]	; (190c8 <calc_tof_ss+0x58>)
   190b6:	f008 f911 	bl	212dc <__aeabi_dmul>

    return ToF;
}
   190ba:	ec41 0b10 	vmov	d0, r0, r1
   190be:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   190c2:	bf00      	nop
   190c4:	3ff00000 	.word	0x3ff00000
   190c8:	3fe00000 	.word	0x3fe00000
   190cc:	00000000 	.word	0x00000000

000190d0 <calc_tof_ds>:
dpl_float64_t
calc_tof_ds(uint32_t first_response_timestamp, uint32_t first_request_timestamp,
            uint64_t first_transmission_timestamp, uint64_t first_reception_timestamp,
            uint32_t response_timestamp, uint32_t request_timestamp,
            uint64_t transmission_timestamp, uint64_t reception_timestamp)
{
   190d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   190d2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    dpl_float64_t ToF = DPL_FLOAT64_I32_TO_F64(0);
    uint64_t T1R, T1r, T2R, T2r;
    int64_t nom, denom;

    T1R = (first_response_timestamp - first_request_timestamp);
   190d4:	1a43      	subs	r3, r0, r1
   190d6:	f04f 0c00 	mov.w	ip, #0
    T1r = (first_transmission_timestamp  - first_reception_timestamp) & MASK32;
   190da:	9906      	ldr	r1, [sp, #24]
   190dc:	1a52      	subs	r2, r2, r1
    T2R = (response_timestamp - request_timestamp);
   190de:	9d08      	ldr	r5, [sp, #32]
   190e0:	9909      	ldr	r1, [sp, #36]	; 0x24
   190e2:	1a6d      	subs	r5, r5, r1
    T2r = (transmission_timestamp - reception_timestamp) & MASK32;
   190e4:	990a      	ldr	r1, [sp, #40]	; 0x28
   190e6:	1b0c      	subs	r4, r1, r4
    nom = T1R * T2R  - T1r * T2r;
   190e8:	fba3 e105 	umull	lr, r1, r3, r5
   190ec:	fba2 0604 	umull	r0, r6, r2, r4
   190f0:	ebbe 0000 	subs.w	r0, lr, r0
   190f4:	eb61 0106 	sbc.w	r1, r1, r6
    denom = T1R + T2R  + T1r + T2r;
   190f8:	195b      	adds	r3, r3, r5
   190fa:	eb4c 0c0c 	adc.w	ip, ip, ip
   190fe:	189b      	adds	r3, r3, r2
   19100:	f14c 0500 	adc.w	r5, ip, #0
   19104:	191c      	adds	r4, r3, r4
   19106:	f145 0500 	adc.w	r5, r5, #0

    if (denom == 0) {
   1910a:	ea54 0305 	orrs.w	r3, r4, r5
   1910e:	d010      	beq.n	19132 <calc_tof_ds+0x62>
        return DPL_FLOAT64_NAN();
    }

    ToF = DPL_FLOAT64_DIV(DPL_FLOAT64_I64_TO_F64(nom),
   19110:	f008 f8b6 	bl	21280 <__aeabi_l2d>
   19114:	4606      	mov	r6, r0
   19116:	460f      	mov	r7, r1
   19118:	4620      	mov	r0, r4
   1911a:	4629      	mov	r1, r5
   1911c:	f008 f8b0 	bl	21280 <__aeabi_l2d>
   19120:	4602      	mov	r2, r0
   19122:	460b      	mov	r3, r1
   19124:	4630      	mov	r0, r6
   19126:	4639      	mov	r1, r7
   19128:	f008 fa02 	bl	21530 <__aeabi_ddiv>
   1912c:	ec41 0b10 	vmov	d0, r0, r1
                                                DPL_FLOAT64_I64_TO_F64(denom));
    return ToF;
}
   19130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return DPL_FLOAT64_NAN();
   19132:	ed9f 0b01 	vldr	d0, [pc, #4]	; 19138 <calc_tof_ds+0x68>
   19136:	e7fb      	b.n	19130 <calc_tof_ds+0x60>
   19138:	00000000 	.word	0x00000000
   1913c:	7ff80000 	.word	0x7ff80000

00019140 <timescale_QUpdate>:
   19140:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19144:	4614      	mov	r4, r2
   19146:	461d      	mov	r5, r3
   19148:	460f      	mov	r7, r1
   1914a:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   1914c:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   19150:	4682      	mov	sl, r0
   19152:	4629      	mov	r1, r5
   19154:	4620      	mov	r0, r4
   19156:	f008 f8c1 	bl	212dc <__aeabi_dmul>
   1915a:	4622      	mov	r2, r4
   1915c:	462b      	mov	r3, r5
   1915e:	f008 f8bd 	bl	212dc <__aeabi_dmul>
   19162:	2200      	movs	r2, #0
   19164:	4b4f      	ldr	r3, [pc, #316]	; (192a4 <timescale_QUpdate+0x164>)
   19166:	f008 f9e3 	bl	21530 <__aeabi_ddiv>
   1916a:	e9d7 2300 	ldrd	r2, r3, [r7]
   1916e:	f007 feff 	bl	20f70 <__adddf3>
   19172:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   19176:	4680      	mov	r8, r0
   19178:	4689      	mov	r9, r1
   1917a:	4620      	mov	r0, r4
   1917c:	4629      	mov	r1, r5
   1917e:	f008 f8ad 	bl	212dc <__aeabi_dmul>
   19182:	4622      	mov	r2, r4
   19184:	462b      	mov	r3, r5
   19186:	f008 f8a9 	bl	212dc <__aeabi_dmul>
   1918a:	4622      	mov	r2, r4
   1918c:	462b      	mov	r3, r5
   1918e:	f008 f8a5 	bl	212dc <__aeabi_dmul>
   19192:	4622      	mov	r2, r4
   19194:	462b      	mov	r3, r5
   19196:	f008 f8a1 	bl	212dc <__aeabi_dmul>
   1919a:	2200      	movs	r2, #0
   1919c:	4b42      	ldr	r3, [pc, #264]	; (192a8 <timescale_QUpdate+0x168>)
   1919e:	f008 f9c7 	bl	21530 <__aeabi_ddiv>
   191a2:	4602      	mov	r2, r0
   191a4:	460b      	mov	r3, r1
   191a6:	4640      	mov	r0, r8
   191a8:	4649      	mov	r1, r9
   191aa:	f007 fee1 	bl	20f70 <__adddf3>
   191ae:	e9c6 0100 	strd	r0, r1, [r6]
   191b2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   191b6:	4620      	mov	r0, r4
   191b8:	4629      	mov	r1, r5
   191ba:	f008 f88f 	bl	212dc <__aeabi_dmul>
   191be:	4622      	mov	r2, r4
   191c0:	462b      	mov	r3, r5
   191c2:	f008 f88b 	bl	212dc <__aeabi_dmul>
   191c6:	4622      	mov	r2, r4
   191c8:	462b      	mov	r3, r5
   191ca:	f008 f887 	bl	212dc <__aeabi_dmul>
   191ce:	2200      	movs	r2, #0
   191d0:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   191d4:	f008 f882 	bl	212dc <__aeabi_dmul>
   191d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   191dc:	4680      	mov	r8, r0
   191de:	4689      	mov	r9, r1
   191e0:	4620      	mov	r0, r4
   191e2:	4629      	mov	r1, r5
   191e4:	f008 f87a 	bl	212dc <__aeabi_dmul>
   191e8:	2200      	movs	r2, #0
   191ea:	4b30      	ldr	r3, [pc, #192]	; (192ac <timescale_QUpdate+0x16c>)
   191ec:	f008 f876 	bl	212dc <__aeabi_dmul>
   191f0:	4602      	mov	r2, r0
   191f2:	460b      	mov	r3, r1
   191f4:	4640      	mov	r0, r8
   191f6:	4649      	mov	r1, r9
   191f8:	f007 feba 	bl	20f70 <__adddf3>
   191fc:	4680      	mov	r8, r0
   191fe:	4689      	mov	r9, r1
   19200:	e9c6 8902 	strd	r8, r9, [r6, #8]
   19204:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   19208:	4620      	mov	r0, r4
   1920a:	4629      	mov	r1, r5
   1920c:	f008 f866 	bl	212dc <__aeabi_dmul>
   19210:	4622      	mov	r2, r4
   19212:	462b      	mov	r3, r5
   19214:	f008 f862 	bl	212dc <__aeabi_dmul>
   19218:	2200      	movs	r2, #0
   1921a:	4b25      	ldr	r3, [pc, #148]	; (192b0 <timescale_QUpdate+0x170>)
   1921c:	f008 f988 	bl	21530 <__aeabi_ddiv>
   19220:	f8ba 3000 	ldrh.w	r3, [sl]
   19224:	9301      	str	r3, [sp, #4]
   19226:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
   1922a:	eb06 0a0b 	add.w	sl, r6, fp
   1922e:	e9c6 0104 	strd	r0, r1, [r6, #16]
   19232:	e9ca 8900 	strd	r8, r9, [sl]
   19236:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   1923a:	4620      	mov	r0, r4
   1923c:	4629      	mov	r1, r5
   1923e:	f008 f84d 	bl	212dc <__aeabi_dmul>
   19242:	4622      	mov	r2, r4
   19244:	462b      	mov	r3, r5
   19246:	f008 f849 	bl	212dc <__aeabi_dmul>
   1924a:	2200      	movs	r2, #0
   1924c:	4b15      	ldr	r3, [pc, #84]	; (192a4 <timescale_QUpdate+0x164>)
   1924e:	f008 f96f 	bl	21530 <__aeabi_ddiv>
   19252:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   19256:	f007 fe8b 	bl	20f70 <__adddf3>
   1925a:	e9ca 0102 	strd	r0, r1, [sl, #8]
   1925e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   19262:	4620      	mov	r0, r4
   19264:	4629      	mov	r1, r5
   19266:	f008 f839 	bl	212dc <__aeabi_dmul>
   1926a:	2200      	movs	r2, #0
   1926c:	4b0f      	ldr	r3, [pc, #60]	; (192ac <timescale_QUpdate+0x16c>)
   1926e:	f008 f835 	bl	212dc <__aeabi_dmul>
   19272:	f10b 0810 	add.w	r8, fp, #16
   19276:	44b0      	add	r8, r6
   19278:	e9c8 0100 	strd	r0, r1, [r8]
   1927c:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
   19280:	44da      	add	sl, fp
   19282:	e9ca 2300 	strd	r2, r3, [sl]
   19286:	9901      	ldr	r1, [sp, #4]
   19288:	e9d8 2300 	ldrd	r2, r3, [r8]
   1928c:	eb06 1601 	add.w	r6, r6, r1, lsl #4
   19290:	e9c6 2302 	strd	r2, r3, [r6, #8]
   19294:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   19298:	e9c6 2304 	strd	r2, r3, [r6, #16]
   1929c:	b003      	add	sp, #12
   1929e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   192a2:	bf00      	nop
   192a4:	40080000 	.word	0x40080000
   192a8:	40340000 	.word	0x40340000
   192ac:	3fe00000 	.word	0x3fe00000
   192b0:	40180000 	.word	0x40180000

000192b4 <timescale_JofAx>:
   192b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   192b8:	ec55 4b10 	vmov	r4, r5, d0
   192bc:	4f1c      	ldr	r7, [pc, #112]	; (19330 <timescale_JofAx+0x7c>)
   192be:	b092      	sub	sp, #72	; 0x48
   192c0:	2600      	movs	r6, #0
   192c2:	ee10 2a10 	vmov	r2, s0
   192c6:	462b      	mov	r3, r5
   192c8:	4680      	mov	r8, r0
   192ca:	4629      	mov	r1, r5
   192cc:	ee10 0a10 	vmov	r0, s0
   192d0:	ed8d 0b02 	vstr	d0, [sp, #8]
   192d4:	e9cd 6700 	strd	r6, r7, [sp]
   192d8:	f008 f800 	bl	212dc <__aeabi_dmul>
   192dc:	2200      	movs	r2, #0
   192de:	4b15      	ldr	r3, [pc, #84]	; (19334 <timescale_JofAx+0x80>)
   192e0:	f007 fffc 	bl	212dc <__aeabi_dmul>
   192e4:	e9cd 6708 	strd	r6, r7, [sp, #32]
   192e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
   192ec:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   192f0:	f8d8 104c 	ldr.w	r1, [r8, #76]	; 0x4c
   192f4:	2300      	movs	r3, #0
   192f6:	2200      	movs	r2, #0
   192f8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   192fc:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
   19300:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   19304:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   19308:	f101 0518 	add.w	r5, r1, #24
   1930c:	2300      	movs	r3, #0
   1930e:	eb0d 0003 	add.w	r0, sp, r3
   19312:	185a      	adds	r2, r3, r1
   19314:	18ec      	adds	r4, r5, r3
   19316:	e8f0 6702 	ldrd	r6, r7, [r0], #8
   1931a:	e8e2 6702 	strd	r6, r7, [r2], #8
   1931e:	42a2      	cmp	r2, r4
   19320:	d1f9      	bne.n	19316 <timescale_JofAx+0x62>
   19322:	3318      	adds	r3, #24
   19324:	2b48      	cmp	r3, #72	; 0x48
   19326:	d1f2      	bne.n	1930e <timescale_JofAx+0x5a>
   19328:	b012      	add	sp, #72	; 0x48
   1932a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1932e:	bf00      	nop
   19330:	3ff00000 	.word	0x3ff00000
   19334:	3fe00000 	.word	0x3fe00000

00019338 <timescale_Aofx>:
   19338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1933c:	4606      	mov	r6, r0
   1933e:	b089      	sub	sp, #36	; 0x24
   19340:	2218      	movs	r2, #24
   19342:	2100      	movs	r1, #0
   19344:	a802      	add	r0, sp, #8
   19346:	f7f4 fb5c 	bl	da02 <memset>
   1934a:	68b5      	ldr	r5, [r6, #8]
   1934c:	6cf6      	ldr	r6, [r6, #76]	; 0x4c
   1934e:	f106 0348 	add.w	r3, r6, #72	; 0x48
   19352:	ac02      	add	r4, sp, #8
   19354:	9301      	str	r3, [sp, #4]
   19356:	f105 0918 	add.w	r9, r5, #24
   1935a:	e8f4 ab02 	ldrd	sl, fp, [r4], #8
   1935e:	462f      	mov	r7, r5
   19360:	46b0      	mov	r8, r6
   19362:	e8f7 2302 	ldrd	r2, r3, [r7], #8
   19366:	e8f8 0102 	ldrd	r0, r1, [r8], #8
   1936a:	f007 ffb7 	bl	212dc <__aeabi_dmul>
   1936e:	4602      	mov	r2, r0
   19370:	460b      	mov	r3, r1
   19372:	4650      	mov	r0, sl
   19374:	4659      	mov	r1, fp
   19376:	f007 fdfb 	bl	20f70 <__adddf3>
   1937a:	454f      	cmp	r7, r9
   1937c:	4682      	mov	sl, r0
   1937e:	468b      	mov	fp, r1
   19380:	d1ef      	bne.n	19362 <timescale_Aofx+0x2a>
   19382:	9b01      	ldr	r3, [sp, #4]
   19384:	3618      	adds	r6, #24
   19386:	429e      	cmp	r6, r3
   19388:	e944 ab02 	strd	sl, fp, [r4, #-8]
   1938c:	d1e5      	bne.n	1935a <timescale_Aofx+0x22>
   1938e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   19392:	e9c5 2300 	strd	r2, r3, [r5]
   19396:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1939a:	e9c5 2302 	strd	r2, r3, [r5, #8]
   1939e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   193a2:	e9c5 2304 	strd	r2, r3, [r5, #16]
   193a6:	b009      	add	sp, #36	; 0x24
   193a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   193ac:	0000      	movs	r0, r0
	...

000193b0 <timescale_innovation>:
   193b0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   193b4:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
   193b6:	88aa      	ldrh	r2, [r5, #4]
   193b8:	f3c2 1280 	ubfx	r2, r2, #6, #1
   193bc:	4604      	mov	r4, r0
   193be:	b37a      	cbz	r2, 19420 <timescale_innovation+0x70>
   193c0:	6946      	ldr	r6, [r0, #20]
   193c2:	4b37      	ldr	r3, [pc, #220]	; (194a0 <timescale_innovation+0xf0>)
   193c4:	ed96 0b00 	vldr	d0, [r6]
   193c8:	2200      	movs	r2, #0
   193ca:	ec51 0b10 	vmov	r0, r1, d0
   193ce:	ed8d 0b00 	vstr	d0, [sp]
   193d2:	f008 f9f5 	bl	217c0 <__aeabi_dcmplt>
   193d6:	f04f 0701 	mov.w	r7, #1
   193da:	ed9d 0b00 	vldr	d0, [sp]
   193de:	b900      	cbnz	r0, 193e2 <timescale_innovation+0x32>
   193e0:	4607      	mov	r7, r0
   193e2:	792b      	ldrb	r3, [r5, #4]
   193e4:	f367 1345 	bfi	r3, r7, #5, #1
   193e8:	712b      	strb	r3, [r5, #4]
   193ea:	88ab      	ldrh	r3, [r5, #4]
   193ec:	069b      	lsls	r3, r3, #26
   193ee:	d509      	bpl.n	19404 <timescale_innovation+0x54>
   193f0:	ed9f 1b29 	vldr	d1, [pc, #164]	; 19498 <timescale_innovation+0xe8>
   193f4:	f008 fd6e 	bl	21ed4 <fmod>
   193f8:	792b      	ldrb	r3, [r5, #4]
   193fa:	ed86 0b00 	vstr	d0, [r6]
   193fe:	f36f 1386 	bfc	r3, #6, #1
   19402:	712b      	strb	r3, [r5, #4]
   19404:	f8df 909c 	ldr.w	r9, [pc, #156]	; 194a4 <timescale_innovation+0xf4>
   19408:	f04f 0a00 	mov.w	sl, #0
   1940c:	f04f 0800 	mov.w	r8, #0
   19410:	8862      	ldrh	r2, [r4, #2]
   19412:	fa1f f38a 	uxth.w	r3, sl
   19416:	429a      	cmp	r2, r3
   19418:	d806      	bhi.n	19428 <timescale_innovation+0x78>
   1941a:	b002      	add	sp, #8
   1941c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19420:	792b      	ldrb	r3, [r5, #4]
   19422:	f362 1345 	bfi	r3, r2, #5, #1
   19426:	e7ec      	b.n	19402 <timescale_innovation+0x52>
   19428:	6963      	ldr	r3, [r4, #20]
   1942a:	fa1f f58a 	uxth.w	r5, sl
   1942e:	00ed      	lsls	r5, r5, #3
   19430:	1959      	adds	r1, r3, r5
   19432:	6923      	ldr	r3, [r4, #16]
   19434:	442b      	add	r3, r5
   19436:	e9d3 2300 	ldrd	r2, r3, [r3]
   1943a:	e9d1 0100 	ldrd	r0, r1, [r1]
   1943e:	f007 fd95 	bl	20f6c <__aeabi_dsub>
   19442:	69a3      	ldr	r3, [r4, #24]
   19444:	442b      	add	r3, r5
   19446:	e9c3 0100 	strd	r0, r1, [r3]
   1944a:	ec41 0b10 	vmov	d0, r0, r1
   1944e:	f008 fcb5 	bl	21dbc <fabs>
   19452:	2200      	movs	r2, #0
   19454:	4b12      	ldr	r3, [pc, #72]	; (194a0 <timescale_innovation+0xf0>)
   19456:	ec51 0b10 	vmov	r0, r1, d0
   1945a:	f008 f9cf 	bl	217fc <__aeabi_dcmpgt>
   1945e:	b190      	cbz	r0, 19486 <timescale_innovation+0xd6>
   19460:	69a3      	ldr	r3, [r4, #24]
   19462:	441d      	add	r5, r3
   19464:	e9d5 6700 	ldrd	r6, r7, [r5]
   19468:	2200      	movs	r2, #0
   1946a:	2300      	movs	r3, #0
   1946c:	4630      	mov	r0, r6
   1946e:	4639      	mov	r1, r7
   19470:	f008 f9a6 	bl	217c0 <__aeabi_dcmplt>
   19474:	4642      	mov	r2, r8
   19476:	464b      	mov	r3, r9
   19478:	b140      	cbz	r0, 1948c <timescale_innovation+0xdc>
   1947a:	4630      	mov	r0, r6
   1947c:	4639      	mov	r1, r7
   1947e:	f007 fd77 	bl	20f70 <__adddf3>
   19482:	e9c5 0100 	strd	r0, r1, [r5]
   19486:	f10a 0a01 	add.w	sl, sl, #1
   1948a:	e7c1      	b.n	19410 <timescale_innovation+0x60>
   1948c:	4630      	mov	r0, r6
   1948e:	4639      	mov	r1, r7
   19490:	f007 fd6c 	bl	20f6c <__aeabi_dsub>
   19494:	e7f5      	b.n	19482 <timescale_innovation+0xd2>
   19496:	bf00      	nop
   19498:	00000000 	.word	0x00000000
   1949c:	42700000 	.word	0x42700000
   194a0:	42600000 	.word	0x42600000
   194a4:	42700000 	.word	0x42700000

000194a8 <timescale_constraints>:
   194a8:	b513      	push	{r0, r1, r4, lr}
   194aa:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   194ac:	889b      	ldrh	r3, [r3, #4]
   194ae:	065b      	lsls	r3, r3, #25
   194b0:	d513      	bpl.n	194da <timescale_constraints+0x32>
   194b2:	6884      	ldr	r4, [r0, #8]
   194b4:	4b0c      	ldr	r3, [pc, #48]	; (194e8 <timescale_constraints+0x40>)
   194b6:	ed94 0b00 	vldr	d0, [r4]
   194ba:	2200      	movs	r2, #0
   194bc:	ec51 0b10 	vmov	r0, r1, d0
   194c0:	ed8d 0b00 	vstr	d0, [sp]
   194c4:	f008 f99a 	bl	217fc <__aeabi_dcmpgt>
   194c8:	ed9d 0b00 	vldr	d0, [sp]
   194cc:	b128      	cbz	r0, 194da <timescale_constraints+0x32>
   194ce:	ed9f 1b04 	vldr	d1, [pc, #16]	; 194e0 <timescale_constraints+0x38>
   194d2:	f008 fcff 	bl	21ed4 <fmod>
   194d6:	ed84 0b00 	vstr	d0, [r4]
   194da:	b002      	add	sp, #8
   194dc:	bd10      	pop	{r4, pc}
   194de:	bf00      	nop
   194e0:	00000000 	.word	0x00000000
   194e4:	42700000 	.word	0x42700000
   194e8:	42700000 	.word	0x42700000
   194ec:	00000000 	.word	0x00000000

000194f0 <timescale_Hofx>:
   194f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   194f4:	6904      	ldr	r4, [r0, #16]
   194f6:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
   194f8:	69c5      	ldr	r5, [r0, #28]
   194fa:	6886      	ldr	r6, [r0, #8]
   194fc:	2200      	movs	r2, #0
   194fe:	2300      	movs	r3, #0
   19500:	e9c4 2300 	strd	r2, r3, [r4]
   19504:	f105 0818 	add.w	r8, r5, #24
   19508:	e8f6 2302 	ldrd	r2, r3, [r6], #8
   1950c:	e8f5 0102 	ldrd	r0, r1, [r5], #8
   19510:	f007 fee4 	bl	212dc <__aeabi_dmul>
   19514:	e9d4 2300 	ldrd	r2, r3, [r4]
   19518:	f007 fd2a 	bl	20f70 <__adddf3>
   1951c:	4545      	cmp	r5, r8
   1951e:	e9c4 0100 	strd	r0, r1, [r4]
   19522:	d1f1      	bne.n	19508 <timescale_Hofx+0x18>
   19524:	e9cd 0100 	strd	r0, r1, [sp]
   19528:	88bb      	ldrh	r3, [r7, #4]
   1952a:	065b      	lsls	r3, r3, #25
   1952c:	d50c      	bpl.n	19548 <timescale_Hofx+0x58>
   1952e:	2200      	movs	r2, #0
   19530:	4b09      	ldr	r3, [pc, #36]	; (19558 <timescale_Hofx+0x68>)
   19532:	f008 f963 	bl	217fc <__aeabi_dcmpgt>
   19536:	ed9d 0b00 	vldr	d0, [sp]
   1953a:	b128      	cbz	r0, 19548 <timescale_Hofx+0x58>
   1953c:	ed9f 1b04 	vldr	d1, [pc, #16]	; 19550 <timescale_Hofx+0x60>
   19540:	f008 fcc8 	bl	21ed4 <fmod>
   19544:	ed84 0b00 	vstr	d0, [r4]
   19548:	b002      	add	sp, #8
   1954a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1954e:	bf00      	nop
   19550:	00000000 	.word	0x00000000
   19554:	42700000 	.word	0x42700000
   19558:	42700000 	.word	0x42700000

0001955c <timescale_init>:
   1955c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19560:	4688      	mov	r8, r1
   19562:	4614      	mov	r4, r2
   19564:	ec57 6b10 	vmov	r6, r7, d0
   19568:	4605      	mov	r5, r0
   1956a:	b990      	cbnz	r0, 19592 <timescale_init+0x36>
   1956c:	2008      	movs	r0, #8
   1956e:	f7f4 f9cb 	bl	d908 <malloc>
   19572:	4605      	mov	r5, r0
   19574:	b928      	cbnz	r0, 19582 <timescale_init+0x26>
   19576:	4b2c      	ldr	r3, [pc, #176]	; (19628 <timescale_init+0xcc>)
   19578:	4a2c      	ldr	r2, [pc, #176]	; (1962c <timescale_init+0xd0>)
   1957a:	482d      	ldr	r0, [pc, #180]	; (19630 <timescale_init+0xd4>)
   1957c:	21e0      	movs	r1, #224	; 0xe0
   1957e:	f7ef fd65 	bl	904c <__assert_func>
   19582:	2208      	movs	r2, #8
   19584:	2100      	movs	r1, #0
   19586:	f7f4 fa3c 	bl	da02 <memset>
   1958a:	792b      	ldrb	r3, [r5, #4]
   1958c:	f043 0301 	orr.w	r3, r3, #1
   19590:	712b      	strb	r3, [r5, #4]
   19592:	4641      	mov	r1, r8
   19594:	2301      	movs	r3, #1
   19596:	2203      	movs	r2, #3
   19598:	6828      	ldr	r0, [r5, #0]
   1959a:	f000 fad3 	bl	19b44 <srkf_dbl_init>
   1959e:	463b      	mov	r3, r7
   195a0:	4621      	mov	r1, r4
   195a2:	6028      	str	r0, [r5, #0]
   195a4:	4632      	mov	r2, r6
   195a6:	f7ff fdcb 	bl	19140 <timescale_QUpdate>
   195aa:	682c      	ldr	r4, [r5, #0]
   195ac:	2700      	movs	r7, #0
   195ae:	f8b4 a000 	ldrh.w	sl, [r4]
   195b2:	46b8      	mov	r8, r7
   195b4:	fa1f f388 	uxth.w	r3, r8
   195b8:	459a      	cmp	sl, r3
   195ba:	d91a      	bls.n	195f2 <timescale_init+0x96>
   195bc:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   195c0:	2600      	movs	r6, #0
   195c2:	e00f      	b.n	195e4 <timescale_init+0x88>
   195c4:	6a22      	ldr	r2, [r4, #32]
   195c6:	19f3      	adds	r3, r6, r7
   195c8:	00db      	lsls	r3, r3, #3
   195ca:	eb02 0903 	add.w	r9, r2, r3
   195ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   195d0:	18d1      	adds	r1, r2, r3
   195d2:	e9d1 0100 	ldrd	r0, r1, [r1]
   195d6:	2200      	movs	r2, #0
   195d8:	4b16      	ldr	r3, [pc, #88]	; (19634 <timescale_init+0xd8>)
   195da:	f007 fe7f 	bl	212dc <__aeabi_dmul>
   195de:	e9c9 0100 	strd	r0, r1, [r9]
   195e2:	3601      	adds	r6, #1
   195e4:	b2b3      	uxth	r3, r6
   195e6:	459b      	cmp	fp, r3
   195e8:	d8ec      	bhi.n	195c4 <timescale_init+0x68>
   195ea:	f108 0801 	add.w	r8, r8, #1
   195ee:	4457      	add	r7, sl
   195f0:	e7e0      	b.n	195b4 <timescale_init+0x58>
   195f2:	69e3      	ldr	r3, [r4, #28]
   195f4:	4910      	ldr	r1, [pc, #64]	; (19638 <timescale_init+0xdc>)
   195f6:	792a      	ldrb	r2, [r5, #4]
   195f8:	2000      	movs	r0, #0
   195fa:	e9c3 0100 	strd	r0, r1, [r3]
   195fe:	4b0f      	ldr	r3, [pc, #60]	; (1963c <timescale_init+0xe0>)
   19600:	65a3      	str	r3, [r4, #88]	; 0x58
   19602:	4b0f      	ldr	r3, [pc, #60]	; (19640 <timescale_init+0xe4>)
   19604:	6563      	str	r3, [r4, #84]	; 0x54
   19606:	4b0f      	ldr	r3, [pc, #60]	; (19644 <timescale_init+0xe8>)
   19608:	65e3      	str	r3, [r4, #92]	; 0x5c
   1960a:	4b0f      	ldr	r3, [pc, #60]	; (19648 <timescale_init+0xec>)
   1960c:	6663      	str	r3, [r4, #100]	; 0x64
   1960e:	4b0f      	ldr	r3, [pc, #60]	; (1964c <timescale_init+0xf0>)
   19610:	e9c4 351a 	strd	r3, r5, [r4, #104]	; 0x68
   19614:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   19618:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1961c:	f363 0241 	bfi	r2, r3, #1, #1
   19620:	712a      	strb	r2, [r5, #4]
   19622:	4628      	mov	r0, r5
   19624:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19628:	0002456a 	.word	0x0002456a
   1962c:	00024542 	.word	0x00024542
   19630:	0002456f 	.word	0x0002456f
   19634:	40590000 	.word	0x40590000
   19638:	3ff00000 	.word	0x3ff00000
   1963c:	000192b5 	.word	0x000192b5
   19640:	00019339 	.word	0x00019339
   19644:	000194f1 	.word	0x000194f1
   19648:	000194a9 	.word	0x000194a9
   1964c:	000193b1 	.word	0x000193b1

00019650 <timescale_free>:
   19650:	b510      	push	{r4, lr}
   19652:	4604      	mov	r4, r0
   19654:	6800      	ldr	r0, [r0, #0]
   19656:	b930      	cbnz	r0, 19666 <timescale_free+0x16>
   19658:	4b08      	ldr	r3, [pc, #32]	; (1967c <timescale_free+0x2c>)
   1965a:	4a09      	ldr	r2, [pc, #36]	; (19680 <timescale_free+0x30>)
   1965c:	4809      	ldr	r0, [pc, #36]	; (19684 <timescale_free+0x34>)
   1965e:	f44f 7181 	mov.w	r1, #258	; 0x102
   19662:	f7ef fcf3 	bl	904c <__assert_func>
   19666:	f000 fced 	bl	1a044 <srkf_dbl_free>
   1966a:	7923      	ldrb	r3, [r4, #4]
   1966c:	07db      	lsls	r3, r3, #31
   1966e:	d504      	bpl.n	1967a <timescale_free+0x2a>
   19670:	4620      	mov	r0, r4
   19672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19676:	f7f4 b97d 	b.w	d974 <free>
   1967a:	bd10      	pop	{r4, pc}
   1967c:	00024560 	.word	0x00024560
   19680:	00024551 	.word	0x00024551
   19684:	0002456f 	.word	0x0002456f

00019688 <timescale_main>:
   19688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1968c:	ed2d 8b02 	vpush	{d8}
   19690:	eeb0 8a40 	vmov.f32	s16, s0
   19694:	eef0 8a60 	vmov.f32	s17, s1
   19698:	b083      	sub	sp, #12
   1969a:	4604      	mov	r4, r0
   1969c:	468a      	mov	sl, r1
   1969e:	4617      	mov	r7, r2
   196a0:	461d      	mov	r5, r3
   196a2:	2200      	movs	r2, #0
   196a4:	4b29      	ldr	r3, [pc, #164]	; (1974c <timescale_main+0xc4>)
   196a6:	e9d1 0100 	ldrd	r0, r1, [r1]
   196aa:	f04f 0601 	mov.w	r6, #1
   196ae:	f008 f8a5 	bl	217fc <__aeabi_dcmpgt>
   196b2:	b900      	cbnz	r0, 196b6 <timescale_main+0x2e>
   196b4:	4606      	mov	r6, r0
   196b6:	7923      	ldrb	r3, [r4, #4]
   196b8:	6820      	ldr	r0, [r4, #0]
   196ba:	f3c3 1280 	ubfx	r2, r3, #6, #1
   196be:	4316      	orrs	r6, r2
   196c0:	f366 1386 	bfi	r3, r6, #6, #1
   196c4:	7123      	strb	r3, [r4, #4]
   196c6:	4639      	mov	r1, r7
   196c8:	ec53 2b18 	vmov	r2, r3, d8
   196cc:	f7ff fd38 	bl	19140 <timescale_QUpdate>
   196d0:	6827      	ldr	r7, [r4, #0]
   196d2:	887a      	ldrh	r2, [r7, #2]
   196d4:	f06f 0907 	mvn.w	r9, #7
   196d8:	1c53      	adds	r3, r2, #1
   196da:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
   196de:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
   196e2:	9201      	str	r2, [sp, #4]
   196e4:	fb09 f903 	mul.w	r9, r9, r3
   196e8:	f04f 0800 	mov.w	r8, #0
   196ec:	9b01      	ldr	r3, [sp, #4]
   196ee:	429d      	cmp	r5, r3
   196f0:	44d8      	add	r8, fp
   196f2:	d11e      	bne.n	19732 <timescale_main+0xaa>
   196f4:	eeb0 0a48 	vmov.f32	s0, s16
   196f8:	eef0 0a68 	vmov.f32	s1, s17
   196fc:	2300      	movs	r3, #0
   196fe:	461a      	mov	r2, r3
   19700:	4651      	mov	r1, sl
   19702:	4638      	mov	r0, r7
   19704:	f000 f8b4 	bl	19870 <srkf_dbl_main>
   19708:	7923      	ldrb	r3, [r4, #4]
   1970a:	f3c0 1000 	ubfx	r0, r0, #4, #1
   1970e:	f3c3 0280 	ubfx	r2, r3, #2, #1
   19712:	4302      	orrs	r2, r0
   19714:	f362 0382 	bfi	r3, r2, #2, #1
   19718:	7123      	strb	r3, [r4, #4]
   1971a:	b2db      	uxtb	r3, r3
   1971c:	075a      	lsls	r2, r3, #29
   1971e:	bf5c      	itt	pl
   19720:	f043 0308 	orrpl.w	r3, r3, #8
   19724:	7123      	strbpl	r3, [r4, #4]
   19726:	88a0      	ldrh	r0, [r4, #4]
   19728:	b003      	add	sp, #12
   1972a:	ecbd 8b02 	vpop	{d8}
   1972e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19732:	e8f5 2302 	ldrd	r2, r3, [r5], #8
   19736:	6bbe      	ldr	r6, [r7, #56]	; 0x38
   19738:	4610      	mov	r0, r2
   1973a:	4619      	mov	r1, r3
   1973c:	f007 fdce 	bl	212dc <__aeabi_dmul>
   19740:	4446      	add	r6, r8
   19742:	444e      	add	r6, r9
   19744:	e9c6 0100 	strd	r0, r1, [r6]
   19748:	e7d0      	b.n	196ec <timescale_main+0x64>
   1974a:	bf00      	nop
   1974c:	42600000 	.word	0x42600000

00019750 <Hofx>:
   19750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19754:	ed2d 8b02 	vpush	{d8}
   19758:	ed9f 8b1b 	vldr	d8, [pc, #108]	; 197c8 <Hofx+0x78>
   1975c:	f04f 0800 	mov.w	r8, #0
   19760:	f8b0 9000 	ldrh.w	r9, [r0]
   19764:	f8b0 a002 	ldrh.w	sl, [r0, #2]
   19768:	4604      	mov	r4, r0
   1976a:	4647      	mov	r7, r8
   1976c:	b2bb      	uxth	r3, r7
   1976e:	459a      	cmp	sl, r3
   19770:	d803      	bhi.n	1977a <Hofx+0x2a>
   19772:	ecbd 8b02 	vpop	{d8}
   19776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1977a:	6926      	ldr	r6, [r4, #16]
   1977c:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
   19780:	ed86 8b00 	vstr	d8, [r6]
   19784:	2500      	movs	r5, #0
   19786:	b2ab      	uxth	r3, r5
   19788:	4599      	cmp	r9, r3
   1978a:	d802      	bhi.n	19792 <Hofx+0x42>
   1978c:	3701      	adds	r7, #1
   1978e:	44c8      	add	r8, r9
   19790:	e7ec      	b.n	1976c <Hofx+0x1c>
   19792:	69e3      	ldr	r3, [r4, #28]
   19794:	eb05 0108 	add.w	r1, r5, r8
   19798:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   1979c:	68a3      	ldr	r3, [r4, #8]
   1979e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   197a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   197a6:	e9d1 0100 	ldrd	r0, r1, [r1]
   197aa:	f007 fd97 	bl	212dc <__aeabi_dmul>
   197ae:	4602      	mov	r2, r0
   197b0:	460b      	mov	r3, r1
   197b2:	e9d6 0100 	ldrd	r0, r1, [r6]
   197b6:	f007 fbdb 	bl	20f70 <__adddf3>
   197ba:	3501      	adds	r5, #1
   197bc:	e9c6 0100 	strd	r0, r1, [r6]
   197c0:	e7e1      	b.n	19786 <Hofx+0x36>
   197c2:	bf00      	nop
   197c4:	f3af 8000 	nop.w
	...

000197d0 <Aofx>:
   197d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   197d4:	f8b0 a000 	ldrh.w	sl, [r0]
   197d8:	ed2d 8b02 	vpush	{d8}
   197dc:	ea4f 09ca 	mov.w	r9, sl, lsl #3
   197e0:	f109 030e 	add.w	r3, r9, #14
   197e4:	466a      	mov	r2, sp
   197e6:	08db      	lsrs	r3, r3, #3
   197e8:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
   197ec:	af00      	add	r7, sp, #0
   197ee:	ed9f 8b1e 	vldr	d8, [pc, #120]	; 19868 <Aofx+0x98>
   197f2:	469d      	mov	sp, r3
   197f4:	46e8      	mov	r8, sp
   197f6:	4606      	mov	r6, r0
   197f8:	44c1      	add	r9, r8
   197fa:	4644      	mov	r4, r8
   197fc:	f04f 0b00 	mov.w	fp, #0
   19800:	454c      	cmp	r4, r9
   19802:	d107      	bne.n	19814 <Aofx+0x44>
   19804:	4643      	mov	r3, r8
   19806:	42a3      	cmp	r3, r4
   19808:	d124      	bne.n	19854 <Aofx+0x84>
   1980a:	46bd      	mov	sp, r7
   1980c:	ecbd 8b02 	vpop	{d8}
   19810:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19814:	eca4 8b02 	vstmia	r4!, {d8}
   19818:	2500      	movs	r5, #0
   1981a:	b2ab      	uxth	r3, r5
   1981c:	459a      	cmp	sl, r3
   1981e:	d801      	bhi.n	19824 <Aofx+0x54>
   19820:	44d3      	add	fp, sl
   19822:	e7ed      	b.n	19800 <Aofx+0x30>
   19824:	6cf1      	ldr	r1, [r6, #76]	; 0x4c
   19826:	eb05 030b 	add.w	r3, r5, fp
   1982a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1982e:	68b3      	ldr	r3, [r6, #8]
   19830:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   19834:	e9d3 2300 	ldrd	r2, r3, [r3]
   19838:	e9d1 0100 	ldrd	r0, r1, [r1]
   1983c:	f007 fd4e 	bl	212dc <__aeabi_dmul>
   19840:	4602      	mov	r2, r0
   19842:	460b      	mov	r3, r1
   19844:	e954 0102 	ldrd	r0, r1, [r4, #-8]
   19848:	f007 fb92 	bl	20f70 <__adddf3>
   1984c:	3501      	adds	r5, #1
   1984e:	e944 0102 	strd	r0, r1, [r4, #-8]
   19852:	e7e2      	b.n	1981a <Aofx+0x4a>
   19854:	68b2      	ldr	r2, [r6, #8]
   19856:	eba3 0108 	sub.w	r1, r3, r8
   1985a:	440a      	add	r2, r1
   1985c:	e8f3 0102 	ldrd	r0, r1, [r3], #8
   19860:	e9c2 0100 	strd	r0, r1, [r2]
   19864:	e7cf      	b.n	19806 <Aofx+0x36>
   19866:	bf00      	nop
	...

00019870 <srkf_dbl_main>:
   19870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19874:	ed2d 8b02 	vpush	{d8}
   19878:	eeb0 8a40 	vmov.f32	s16, s0
   1987c:	eef0 8a60 	vmov.f32	s17, s1
   19880:	b089      	sub	sp, #36	; 0x24
   19882:	460d      	mov	r5, r1
   19884:	af04      	add	r7, sp, #16
   19886:	4690      	mov	r8, r2
   19888:	461e      	mov	r6, r3
   1988a:	4604      	mov	r4, r0
   1988c:	b928      	cbnz	r0, 1989a <srkf_dbl_main+0x2a>
   1988e:	4ba8      	ldr	r3, [pc, #672]	; (19b30 <srkf_dbl_main+0x2c0>)
   19890:	4aa8      	ldr	r2, [pc, #672]	; (19b34 <srkf_dbl_main+0x2c4>)
   19892:	2185      	movs	r1, #133	; 0x85
   19894:	48a8      	ldr	r0, [pc, #672]	; (19b38 <srkf_dbl_main+0x2c8>)
   19896:	f7ef fbd9 	bl	904c <__assert_func>
   1989a:	6d43      	ldr	r3, [r0, #84]	; 0x54
   1989c:	b91b      	cbnz	r3, 198a6 <srkf_dbl_main+0x36>
   1989e:	4ba7      	ldr	r3, [pc, #668]	; (19b3c <srkf_dbl_main+0x2cc>)
   198a0:	4aa4      	ldr	r2, [pc, #656]	; (19b34 <srkf_dbl_main+0x2c4>)
   198a2:	2186      	movs	r1, #134	; 0x86
   198a4:	e7f6      	b.n	19894 <srkf_dbl_main+0x24>
   198a6:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   198a8:	b91b      	cbnz	r3, 198b2 <srkf_dbl_main+0x42>
   198aa:	4ba5      	ldr	r3, [pc, #660]	; (19b40 <srkf_dbl_main+0x2d0>)
   198ac:	4aa1      	ldr	r2, [pc, #644]	; (19b34 <srkf_dbl_main+0x2c4>)
   198ae:	2187      	movs	r1, #135	; 0x87
   198b0:	e7f0      	b.n	19894 <srkf_dbl_main+0x24>
   198b2:	6d83      	ldr	r3, [r0, #88]	; 0x58
   198b4:	b10b      	cbz	r3, 198ba <srkf_dbl_main+0x4a>
   198b6:	4611      	mov	r1, r2
   198b8:	4798      	blx	r3
   198ba:	eeb0 0a48 	vmov.f32	s0, s16
   198be:	eef0 0a68 	vmov.f32	s1, s17
   198c2:	6d63      	ldr	r3, [r4, #84]	; 0x54
   198c4:	4641      	mov	r1, r8
   198c6:	4620      	mov	r0, r4
   198c8:	4798      	blx	r3
   198ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
   198cc:	b12b      	cbz	r3, 198da <srkf_dbl_main+0x6a>
   198ce:	eeb0 0a48 	vmov.f32	s0, s16
   198d2:	eef0 0a68 	vmov.f32	s1, s17
   198d6:	4620      	mov	r0, r4
   198d8:	4798      	blx	r3
   198da:	8863      	ldrh	r3, [r4, #2]
   198dc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   198de:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
   198e2:	f000 fc65 	bl	1a1b0 <ud_dbl>
   198e6:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
   198ea:	8823      	ldrh	r3, [r4, #0]
   198ec:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   198ee:	f000 fc5f 	bl	1a1b0 <ud_dbl>
   198f2:	8823      	ldrh	r3, [r4, #0]
   198f4:	9302      	str	r3, [sp, #8]
   198f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
   198f8:	9301      	str	r3, [sp, #4]
   198fa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   198fc:	9300      	str	r3, [sp, #0]
   198fe:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
   19902:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   19906:	f000 fd27 	bl	1a358 <thornton_dbl>
   1990a:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   1990e:	f000 0001 	and.w	r0, r0, #1
   19912:	f3c3 1240 	ubfx	r2, r3, #5, #1
   19916:	4302      	orrs	r2, r0
   19918:	f362 1345 	bfi	r3, r2, #5, #1
   1991c:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
   19920:	2e00      	cmp	r6, #0
   19922:	d156      	bne.n	199d2 <srkf_dbl_main+0x162>
   19924:	6e23      	ldr	r3, [r4, #96]	; 0x60
   19926:	466e      	mov	r6, sp
   19928:	b12b      	cbz	r3, 19936 <srkf_dbl_main+0xc6>
   1992a:	eeb0 0a48 	vmov.f32	s0, s16
   1992e:	eef0 0a68 	vmov.f32	s1, s17
   19932:	4620      	mov	r0, r4
   19934:	4798      	blx	r3
   19936:	eeb0 0a48 	vmov.f32	s0, s16
   1993a:	eef0 0a68 	vmov.f32	s1, s17
   1993e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   19940:	4620      	mov	r0, r4
   19942:	4798      	blx	r3
   19944:	8863      	ldrh	r3, [r4, #2]
   19946:	8822      	ldrh	r2, [r4, #0]
   19948:	435a      	muls	r2, r3
   1994a:	00d2      	lsls	r2, r2, #3
   1994c:	3208      	adds	r2, #8
   1994e:	ebad 0d02 	sub.w	sp, sp, r2
   19952:	2201      	movs	r2, #1
   19954:	9200      	str	r2, [sp, #0]
   19956:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   19958:	6960      	ldr	r0, [r4, #20]
   1995a:	462a      	mov	r2, r5
   1995c:	f000 fbc2 	bl	1a0e4 <trisolve_dbl>
   19960:	8822      	ldrh	r2, [r4, #0]
   19962:	8863      	ldrh	r3, [r4, #2]
   19964:	9200      	str	r2, [sp, #0]
   19966:	f10d 0810 	add.w	r8, sp, #16
   1996a:	69e2      	ldr	r2, [r4, #28]
   1996c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   1996e:	4640      	mov	r0, r8
   19970:	f000 fbb8 	bl	1a0e4 <trisolve_dbl>
   19974:	6ea5      	ldr	r5, [r4, #104]	; 0x68
   19976:	b9b5      	cbnz	r5, 199a6 <srkf_dbl_main+0x136>
   19978:	f8b4 a002 	ldrh.w	sl, [r4, #2]
   1997c:	b2ab      	uxth	r3, r5
   1997e:	459a      	cmp	sl, r3
   19980:	d917      	bls.n	199b2 <srkf_dbl_main+0x142>
   19982:	69a3      	ldr	r3, [r4, #24]
   19984:	00ea      	lsls	r2, r5, #3
   19986:	eb03 0902 	add.w	r9, r3, r2
   1998a:	6963      	ldr	r3, [r4, #20]
   1998c:	1899      	adds	r1, r3, r2
   1998e:	6923      	ldr	r3, [r4, #16]
   19990:	4413      	add	r3, r2
   19992:	e9d3 2300 	ldrd	r2, r3, [r3]
   19996:	e9d1 0100 	ldrd	r0, r1, [r1]
   1999a:	f007 fae7 	bl	20f6c <__aeabi_dsub>
   1999e:	3501      	adds	r5, #1
   199a0:	e9c9 0100 	strd	r0, r1, [r9]
   199a4:	e7ea      	b.n	1997c <srkf_dbl_main+0x10c>
   199a6:	eeb0 0a48 	vmov.f32	s0, s16
   199aa:	eef0 0a68 	vmov.f32	s1, s17
   199ae:	4620      	mov	r0, r4
   199b0:	47a8      	blx	r5
   199b2:	2300      	movs	r3, #0
   199b4:	8862      	ldrh	r2, [r4, #2]
   199b6:	b299      	uxth	r1, r3
   199b8:	4291      	cmp	r1, r2
   199ba:	f103 0501 	add.w	r5, r3, #1
   199be:	d326      	bcc.n	19a0e <srkf_dbl_main+0x19e>
   199c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   199c2:	b12b      	cbz	r3, 199d0 <srkf_dbl_main+0x160>
   199c4:	eeb0 0a48 	vmov.f32	s0, s16
   199c8:	eef0 0a68 	vmov.f32	s1, s17
   199cc:	4620      	mov	r0, r4
   199ce:	4798      	blx	r3
   199d0:	46b5      	mov	sp, r6
   199d2:	f8b4 a000 	ldrh.w	sl, [r4]
   199d6:	ed9f 8b54 	vldr	d8, [pc, #336]	; 19b28 <srkf_dbl_main+0x2b8>
   199da:	ea4f 03ca 	mov.w	r3, sl, lsl #3
   199de:	2500      	movs	r5, #0
   199e0:	60fb      	str	r3, [r7, #12]
   199e2:	60bd      	str	r5, [r7, #8]
   199e4:	893b      	ldrh	r3, [r7, #8]
   199e6:	459a      	cmp	sl, r3
   199e8:	d85d      	bhi.n	19aa6 <srkf_dbl_main+0x236>
   199ea:	ed9f 8b4f 	vldr	d8, [pc, #316]	; 19b28 <srkf_dbl_main+0x2b8>
   199ee:	2500      	movs	r5, #0
   199f0:	68fb      	ldr	r3, [r7, #12]
   199f2:	603b      	str	r3, [r7, #0]
   199f4:	46ab      	mov	fp, r5
   199f6:	607d      	str	r5, [r7, #4]
   199f8:	88bb      	ldrh	r3, [r7, #4]
   199fa:	459a      	cmp	sl, r3
   199fc:	f240 808b 	bls.w	19b16 <srkf_dbl_main+0x2a6>
   19a00:	f06f 0307 	mvn.w	r3, #7
   19a04:	436b      	muls	r3, r5
   19a06:	60bb      	str	r3, [r7, #8]
   19a08:	f04f 0900 	mov.w	r9, #0
   19a0c:	e05e      	b.n	19acc <srkf_dbl_main+0x25c>
   19a0e:	b29b      	uxth	r3, r3
   19a10:	fb02 3c03 	mla	ip, r2, r3, r3
   19a14:	6c22      	ldr	r2, [r4, #64]	; 0x40
   19a16:	8821      	ldrh	r1, [r4, #0]
   19a18:	eb02 0ccc 	add.w	ip, r2, ip, lsl #3
   19a1c:	69a2      	ldr	r2, [r4, #24]
   19a1e:	9100      	str	r1, [sp, #0]
   19a20:	fb03 f001 	mul.w	r0, r3, r1
   19a24:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
   19a28:	68a1      	ldr	r1, [r4, #8]
   19a2a:	e9d4 2309 	ldrd	r2, r3, [r4, #36]	; 0x24
   19a2e:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
   19a32:	ed9c 1b00 	vldr	d1, [ip]
   19a36:	ed9e 0b00 	vldr	d0, [lr]
   19a3a:	f000 feb1 	bl	1a7a0 <bierman_dbl>
   19a3e:	462b      	mov	r3, r5
   19a40:	e7b8      	b.n	199b4 <srkf_dbl_main+0x144>
   19a42:	6c63      	ldr	r3, [r4, #68]	; 0x44
   19a44:	eb06 0805 	add.w	r8, r6, r5
   19a48:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
   19a4c:	ed88 8b00 	vstr	d8, [r8]
   19a50:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
   19a54:	f04f 0900 	mov.w	r9, #0
   19a58:	fa1f f389 	uxth.w	r3, r9
   19a5c:	459a      	cmp	sl, r3
   19a5e:	d808      	bhi.n	19a72 <srkf_dbl_main+0x202>
   19a60:	3601      	adds	r6, #1
   19a62:	b2b3      	uxth	r3, r6
   19a64:	459a      	cmp	sl, r3
   19a66:	d8ec      	bhi.n	19a42 <srkf_dbl_main+0x1d2>
   19a68:	68bb      	ldr	r3, [r7, #8]
   19a6a:	3301      	adds	r3, #1
   19a6c:	60bb      	str	r3, [r7, #8]
   19a6e:	4455      	add	r5, sl
   19a70:	e7b8      	b.n	199e4 <srkf_dbl_main+0x174>
   19a72:	6a61      	ldr	r1, [r4, #36]	; 0x24
   19a74:	eb09 0305 	add.w	r3, r9, r5
   19a78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   19a7c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   19a7e:	445b      	add	r3, fp
   19a80:	e9d3 2300 	ldrd	r2, r3, [r3]
   19a84:	e9d1 0100 	ldrd	r0, r1, [r1]
   19a88:	f007 fc28 	bl	212dc <__aeabi_dmul>
   19a8c:	460b      	mov	r3, r1
   19a8e:	4602      	mov	r2, r0
   19a90:	e9d8 0100 	ldrd	r0, r1, [r8]
   19a94:	f007 fa6c 	bl	20f70 <__adddf3>
   19a98:	68fb      	ldr	r3, [r7, #12]
   19a9a:	e9c8 0100 	strd	r0, r1, [r8]
   19a9e:	f109 0901 	add.w	r9, r9, #1
   19aa2:	449b      	add	fp, r3
   19aa4:	e7d8      	b.n	19a58 <srkf_dbl_main+0x1e8>
   19aa6:	2600      	movs	r6, #0
   19aa8:	e7db      	b.n	19a62 <srkf_dbl_main+0x1f2>
   19aaa:	6a23      	ldr	r3, [r4, #32]
   19aac:	eb09 0805 	add.w	r8, r9, r5
   19ab0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
   19ab4:	ed88 8b00 	vstr	d8, [r8]
   19ab8:	465e      	mov	r6, fp
   19aba:	683b      	ldr	r3, [r7, #0]
   19abc:	429e      	cmp	r6, r3
   19abe:	d114      	bne.n	19aea <srkf_dbl_main+0x27a>
   19ac0:	e9d7 3202 	ldrd	r3, r2, [r7, #8]
   19ac4:	4413      	add	r3, r2
   19ac6:	f109 0901 	add.w	r9, r9, #1
   19aca:	60bb      	str	r3, [r7, #8]
   19acc:	fa1f f389 	uxth.w	r3, r9
   19ad0:	459a      	cmp	sl, r3
   19ad2:	d8ea      	bhi.n	19aaa <srkf_dbl_main+0x23a>
   19ad4:	687b      	ldr	r3, [r7, #4]
   19ad6:	68fa      	ldr	r2, [r7, #12]
   19ad8:	3301      	adds	r3, #1
   19ada:	607b      	str	r3, [r7, #4]
   19adc:	68fb      	ldr	r3, [r7, #12]
   19ade:	449b      	add	fp, r3
   19ae0:	683b      	ldr	r3, [r7, #0]
   19ae2:	4413      	add	r3, r2
   19ae4:	603b      	str	r3, [r7, #0]
   19ae6:	4455      	add	r5, sl
   19ae8:	e786      	b.n	199f8 <srkf_dbl_main+0x188>
   19aea:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19aec:	68ba      	ldr	r2, [r7, #8]
   19aee:	4413      	add	r3, r2
   19af0:	1999      	adds	r1, r3, r6
   19af2:	6c63      	ldr	r3, [r4, #68]	; 0x44
   19af4:	4433      	add	r3, r6
   19af6:	e9d3 2300 	ldrd	r2, r3, [r3]
   19afa:	e9d1 0100 	ldrd	r0, r1, [r1]
   19afe:	f007 fbed 	bl	212dc <__aeabi_dmul>
   19b02:	4602      	mov	r2, r0
   19b04:	460b      	mov	r3, r1
   19b06:	e9d8 0100 	ldrd	r0, r1, [r8]
   19b0a:	f007 fa31 	bl	20f70 <__adddf3>
   19b0e:	3608      	adds	r6, #8
   19b10:	e9c8 0100 	strd	r0, r1, [r8]
   19b14:	e7d1      	b.n	19aba <srkf_dbl_main+0x24a>
   19b16:	f8b4 0070 	ldrh.w	r0, [r4, #112]	; 0x70
   19b1a:	3714      	adds	r7, #20
   19b1c:	46bd      	mov	sp, r7
   19b1e:	ecbd 8b02 	vpop	{d8}
   19b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19b26:	bf00      	nop
	...
   19b30:	00024679 	.word	0x00024679
   19b34:	0002459f 	.word	0x0002459f
   19b38:	00024686 	.word	0x00024686
   19b3c:	000246b5 	.word	0x000246b5
   19b40:	000246c8 	.word	0x000246c8

00019b44 <srkf_dbl_init>:
   19b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19b48:	4688      	mov	r8, r1
   19b4a:	4615      	mov	r5, r2
   19b4c:	461e      	mov	r6, r3
   19b4e:	4604      	mov	r4, r0
   19b50:	b9d8      	cbnz	r0, 19b8a <srkf_dbl_init+0x46>
   19b52:	2074      	movs	r0, #116	; 0x74
   19b54:	f7f3 fed8 	bl	d908 <malloc>
   19b58:	4604      	mov	r4, r0
   19b5a:	b928      	cbnz	r0, 19b68 <srkf_dbl_init+0x24>
   19b5c:	4baa      	ldr	r3, [pc, #680]	; (19e08 <srkf_dbl_init+0x2c4>)
   19b5e:	4aab      	ldr	r2, [pc, #684]	; (19e0c <srkf_dbl_init+0x2c8>)
   19b60:	21c5      	movs	r1, #197	; 0xc5
   19b62:	48ab      	ldr	r0, [pc, #684]	; (19e10 <srkf_dbl_init+0x2cc>)
   19b64:	f7ef fa72 	bl	904c <__assert_func>
   19b68:	2274      	movs	r2, #116	; 0x74
   19b6a:	2100      	movs	r1, #0
   19b6c:	f7f3 ff49 	bl	da02 <memset>
   19b70:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   19b74:	8025      	strh	r5, [r4, #0]
   19b76:	f043 0301 	orr.w	r3, r3, #1
   19b7a:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
   19b7e:	4ba5      	ldr	r3, [pc, #660]	; (19e14 <srkf_dbl_init+0x2d0>)
   19b80:	6563      	str	r3, [r4, #84]	; 0x54
   19b82:	4ba5      	ldr	r3, [pc, #660]	; (19e18 <srkf_dbl_init+0x2d4>)
   19b84:	80a6      	strh	r6, [r4, #4]
   19b86:	8066      	strh	r6, [r4, #2]
   19b88:	65e3      	str	r3, [r4, #92]	; 0x5c
   19b8a:	8823      	ldrh	r3, [r4, #0]
   19b8c:	42ab      	cmp	r3, r5
   19b8e:	d003      	beq.n	19b98 <srkf_dbl_init+0x54>
   19b90:	4ba2      	ldr	r3, [pc, #648]	; (19e1c <srkf_dbl_init+0x2d8>)
   19b92:	4a9e      	ldr	r2, [pc, #632]	; (19e0c <srkf_dbl_init+0x2c8>)
   19b94:	21ce      	movs	r1, #206	; 0xce
   19b96:	e7e4      	b.n	19b62 <srkf_dbl_init+0x1e>
   19b98:	88a3      	ldrh	r3, [r4, #4]
   19b9a:	42b3      	cmp	r3, r6
   19b9c:	d920      	bls.n	19be0 <srkf_dbl_init+0x9c>
   19b9e:	00f7      	lsls	r7, r6, #3
   19ba0:	8066      	strh	r6, [r4, #2]
   19ba2:	463a      	mov	r2, r7
   19ba4:	2100      	movs	r1, #0
   19ba6:	4375      	muls	r5, r6
   19ba8:	6920      	ldr	r0, [r4, #16]
   19baa:	f7f3 ff2a 	bl	da02 <memset>
   19bae:	00ed      	lsls	r5, r5, #3
   19bb0:	463a      	mov	r2, r7
   19bb2:	2100      	movs	r1, #0
   19bb4:	69a0      	ldr	r0, [r4, #24]
   19bb6:	f7f3 ff24 	bl	da02 <memset>
   19bba:	4376      	muls	r6, r6
   19bbc:	462a      	mov	r2, r5
   19bbe:	2100      	movs	r1, #0
   19bc0:	69e0      	ldr	r0, [r4, #28]
   19bc2:	f7f3 ff1e 	bl	da02 <memset>
   19bc6:	00f2      	lsls	r2, r6, #3
   19bc8:	2100      	movs	r1, #0
   19bca:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   19bcc:	f7f3 ff19 	bl	da02 <memset>
   19bd0:	462a      	mov	r2, r5
   19bd2:	2100      	movs	r1, #0
   19bd4:	6d20      	ldr	r0, [r4, #80]	; 0x50
   19bd6:	f7f3 ff14 	bl	da02 <memset>
   19bda:	4620      	mov	r0, r4
   19bdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19be0:	68a7      	ldr	r7, [r4, #8]
   19be2:	b177      	cbz	r7, 19c02 <srkf_dbl_init+0xbe>
   19be4:	f8d4 8010 	ldr.w	r8, [r4, #16]
   19be8:	00f7      	lsls	r7, r6, #3
   19bea:	f1b8 0f00 	cmp.w	r8, #0
   19bee:	d126      	bne.n	19c3e <srkf_dbl_init+0xfa>
   19bf0:	4638      	mov	r0, r7
   19bf2:	f7f3 fe89 	bl	d908 <malloc>
   19bf6:	6120      	str	r0, [r4, #16]
   19bf8:	bb58      	cbnz	r0, 19c52 <srkf_dbl_init+0x10e>
   19bfa:	4b89      	ldr	r3, [pc, #548]	; (19e20 <srkf_dbl_init+0x2dc>)
   19bfc:	4a83      	ldr	r2, [pc, #524]	; (19e0c <srkf_dbl_init+0x2c8>)
   19bfe:	21e6      	movs	r1, #230	; 0xe6
   19c00:	e7af      	b.n	19b62 <srkf_dbl_init+0x1e>
   19c02:	ea4f 09c5 	mov.w	r9, r5, lsl #3
   19c06:	4648      	mov	r0, r9
   19c08:	f7f3 fe7e 	bl	d908 <malloc>
   19c0c:	60a0      	str	r0, [r4, #8]
   19c0e:	b918      	cbnz	r0, 19c18 <srkf_dbl_init+0xd4>
   19c10:	4b84      	ldr	r3, [pc, #528]	; (19e24 <srkf_dbl_init+0x2e0>)
   19c12:	4a7e      	ldr	r2, [pc, #504]	; (19e0c <srkf_dbl_init+0x2c8>)
   19c14:	21dc      	movs	r1, #220	; 0xdc
   19c16:	e7a4      	b.n	19b62 <srkf_dbl_init+0x1e>
   19c18:	464a      	mov	r2, r9
   19c1a:	4639      	mov	r1, r7
   19c1c:	f7f3 fef1 	bl	da02 <memset>
   19c20:	f1b8 0f00 	cmp.w	r8, #0
   19c24:	d0de      	beq.n	19be4 <srkf_dbl_init+0xa0>
   19c26:	463b      	mov	r3, r7
   19c28:	429d      	cmp	r5, r3
   19c2a:	dddb      	ble.n	19be4 <srkf_dbl_init+0xa0>
   19c2c:	68a2      	ldr	r2, [r4, #8]
   19c2e:	e8f8 0102 	ldrd	r0, r1, [r8], #8
   19c32:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   19c36:	e9c2 0100 	strd	r0, r1, [r2]
   19c3a:	3301      	adds	r3, #1
   19c3c:	e7f4      	b.n	19c28 <srkf_dbl_init+0xe4>
   19c3e:	4639      	mov	r1, r7
   19c40:	4640      	mov	r0, r8
   19c42:	f002 fb94 	bl	1c36e <realloc>
   19c46:	6120      	str	r0, [r4, #16]
   19c48:	b918      	cbnz	r0, 19c52 <srkf_dbl_init+0x10e>
   19c4a:	4b75      	ldr	r3, [pc, #468]	; (19e20 <srkf_dbl_init+0x2dc>)
   19c4c:	4a6f      	ldr	r2, [pc, #444]	; (19e0c <srkf_dbl_init+0x2c8>)
   19c4e:	21ea      	movs	r1, #234	; 0xea
   19c50:	e787      	b.n	19b62 <srkf_dbl_init+0x1e>
   19c52:	463a      	mov	r2, r7
   19c54:	2100      	movs	r1, #0
   19c56:	f7f3 fed4 	bl	da02 <memset>
   19c5a:	f8d4 8014 	ldr.w	r8, [r4, #20]
   19c5e:	f1b8 0f00 	cmp.w	r8, #0
   19c62:	d108      	bne.n	19c76 <srkf_dbl_init+0x132>
   19c64:	4638      	mov	r0, r7
   19c66:	f7f3 fe4f 	bl	d908 <malloc>
   19c6a:	6160      	str	r0, [r4, #20]
   19c6c:	b968      	cbnz	r0, 19c8a <srkf_dbl_init+0x146>
   19c6e:	4b6e      	ldr	r3, [pc, #440]	; (19e28 <srkf_dbl_init+0x2e4>)
   19c70:	4a66      	ldr	r2, [pc, #408]	; (19e0c <srkf_dbl_init+0x2c8>)
   19c72:	21ef      	movs	r1, #239	; 0xef
   19c74:	e775      	b.n	19b62 <srkf_dbl_init+0x1e>
   19c76:	4639      	mov	r1, r7
   19c78:	4640      	mov	r0, r8
   19c7a:	f002 fb78 	bl	1c36e <realloc>
   19c7e:	6160      	str	r0, [r4, #20]
   19c80:	b918      	cbnz	r0, 19c8a <srkf_dbl_init+0x146>
   19c82:	4b69      	ldr	r3, [pc, #420]	; (19e28 <srkf_dbl_init+0x2e4>)
   19c84:	4a61      	ldr	r2, [pc, #388]	; (19e0c <srkf_dbl_init+0x2c8>)
   19c86:	21f3      	movs	r1, #243	; 0xf3
   19c88:	e76b      	b.n	19b62 <srkf_dbl_init+0x1e>
   19c8a:	463a      	mov	r2, r7
   19c8c:	2100      	movs	r1, #0
   19c8e:	f7f3 feb8 	bl	da02 <memset>
   19c92:	f8d4 8018 	ldr.w	r8, [r4, #24]
   19c96:	f1b8 0f00 	cmp.w	r8, #0
   19c9a:	d108      	bne.n	19cae <srkf_dbl_init+0x16a>
   19c9c:	4638      	mov	r0, r7
   19c9e:	f7f3 fe33 	bl	d908 <malloc>
   19ca2:	61a0      	str	r0, [r4, #24]
   19ca4:	b968      	cbnz	r0, 19cc2 <srkf_dbl_init+0x17e>
   19ca6:	4b61      	ldr	r3, [pc, #388]	; (19e2c <srkf_dbl_init+0x2e8>)
   19ca8:	4a58      	ldr	r2, [pc, #352]	; (19e0c <srkf_dbl_init+0x2c8>)
   19caa:	21f8      	movs	r1, #248	; 0xf8
   19cac:	e759      	b.n	19b62 <srkf_dbl_init+0x1e>
   19cae:	4639      	mov	r1, r7
   19cb0:	4640      	mov	r0, r8
   19cb2:	f002 fb5c 	bl	1c36e <realloc>
   19cb6:	61a0      	str	r0, [r4, #24]
   19cb8:	b918      	cbnz	r0, 19cc2 <srkf_dbl_init+0x17e>
   19cba:	4b5c      	ldr	r3, [pc, #368]	; (19e2c <srkf_dbl_init+0x2e8>)
   19cbc:	4a53      	ldr	r2, [pc, #332]	; (19e0c <srkf_dbl_init+0x2c8>)
   19cbe:	21fc      	movs	r1, #252	; 0xfc
   19cc0:	e74f      	b.n	19b62 <srkf_dbl_init+0x1e>
   19cc2:	463a      	mov	r2, r7
   19cc4:	2100      	movs	r1, #0
   19cc6:	f7f3 fe9c 	bl	da02 <memset>
   19cca:	69e7      	ldr	r7, [r4, #28]
   19ccc:	fb05 f806 	mul.w	r8, r5, r6
   19cd0:	ea4f 08c8 	mov.w	r8, r8, lsl #3
   19cd4:	b94f      	cbnz	r7, 19cea <srkf_dbl_init+0x1a6>
   19cd6:	4640      	mov	r0, r8
   19cd8:	f7f3 fe16 	bl	d908 <malloc>
   19cdc:	61e0      	str	r0, [r4, #28]
   19cde:	b978      	cbnz	r0, 19d00 <srkf_dbl_init+0x1bc>
   19ce0:	4b53      	ldr	r3, [pc, #332]	; (19e30 <srkf_dbl_init+0x2ec>)
   19ce2:	4a4a      	ldr	r2, [pc, #296]	; (19e0c <srkf_dbl_init+0x2c8>)
   19ce4:	f240 1101 	movw	r1, #257	; 0x101
   19ce8:	e73b      	b.n	19b62 <srkf_dbl_init+0x1e>
   19cea:	4641      	mov	r1, r8
   19cec:	4638      	mov	r0, r7
   19cee:	f002 fb3e 	bl	1c36e <realloc>
   19cf2:	61e0      	str	r0, [r4, #28]
   19cf4:	b920      	cbnz	r0, 19d00 <srkf_dbl_init+0x1bc>
   19cf6:	4b4e      	ldr	r3, [pc, #312]	; (19e30 <srkf_dbl_init+0x2ec>)
   19cf8:	4a44      	ldr	r2, [pc, #272]	; (19e0c <srkf_dbl_init+0x2c8>)
   19cfa:	f240 1105 	movw	r1, #261	; 0x105
   19cfe:	e730      	b.n	19b62 <srkf_dbl_init+0x1e>
   19d00:	4642      	mov	r2, r8
   19d02:	2100      	movs	r1, #0
   19d04:	f7f3 fe7d 	bl	da02 <memset>
   19d08:	f8d4 9020 	ldr.w	r9, [r4, #32]
   19d0c:	f1b9 0f00 	cmp.w	r9, #0
   19d10:	d110      	bne.n	19d34 <srkf_dbl_init+0x1f0>
   19d12:	fb05 f705 	mul.w	r7, r5, r5
   19d16:	00ff      	lsls	r7, r7, #3
   19d18:	4638      	mov	r0, r7
   19d1a:	f7f3 fdf5 	bl	d908 <malloc>
   19d1e:	6220      	str	r0, [r4, #32]
   19d20:	b920      	cbnz	r0, 19d2c <srkf_dbl_init+0x1e8>
   19d22:	4b44      	ldr	r3, [pc, #272]	; (19e34 <srkf_dbl_init+0x2f0>)
   19d24:	4a39      	ldr	r2, [pc, #228]	; (19e0c <srkf_dbl_init+0x2c8>)
   19d26:	f44f 7185 	mov.w	r1, #266	; 0x10a
   19d2a:	e71a      	b.n	19b62 <srkf_dbl_init+0x1e>
   19d2c:	463a      	mov	r2, r7
   19d2e:	4649      	mov	r1, r9
   19d30:	f7f3 fe67 	bl	da02 <memset>
   19d34:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
   19d38:	f1b9 0f00 	cmp.w	r9, #0
   19d3c:	d110      	bne.n	19d60 <srkf_dbl_init+0x21c>
   19d3e:	fb05 f705 	mul.w	r7, r5, r5
   19d42:	00ff      	lsls	r7, r7, #3
   19d44:	4638      	mov	r0, r7
   19d46:	f7f3 fddf 	bl	d908 <malloc>
   19d4a:	6260      	str	r0, [r4, #36]	; 0x24
   19d4c:	b920      	cbnz	r0, 19d58 <srkf_dbl_init+0x214>
   19d4e:	4b3a      	ldr	r3, [pc, #232]	; (19e38 <srkf_dbl_init+0x2f4>)
   19d50:	4a2e      	ldr	r2, [pc, #184]	; (19e0c <srkf_dbl_init+0x2c8>)
   19d52:	f240 110f 	movw	r1, #271	; 0x10f
   19d56:	e704      	b.n	19b62 <srkf_dbl_init+0x1e>
   19d58:	463a      	mov	r2, r7
   19d5a:	4649      	mov	r1, r9
   19d5c:	f7f3 fe51 	bl	da02 <memset>
   19d60:	f8d4 9028 	ldr.w	r9, [r4, #40]	; 0x28
   19d64:	f1b9 0f00 	cmp.w	r9, #0
   19d68:	d110      	bne.n	19d8c <srkf_dbl_init+0x248>
   19d6a:	fb05 f705 	mul.w	r7, r5, r5
   19d6e:	00ff      	lsls	r7, r7, #3
   19d70:	4638      	mov	r0, r7
   19d72:	f7f3 fdc9 	bl	d908 <malloc>
   19d76:	62a0      	str	r0, [r4, #40]	; 0x28
   19d78:	b920      	cbnz	r0, 19d84 <srkf_dbl_init+0x240>
   19d7a:	4b30      	ldr	r3, [pc, #192]	; (19e3c <srkf_dbl_init+0x2f8>)
   19d7c:	4a23      	ldr	r2, [pc, #140]	; (19e0c <srkf_dbl_init+0x2c8>)
   19d7e:	f44f 718a 	mov.w	r1, #276	; 0x114
   19d82:	e6ee      	b.n	19b62 <srkf_dbl_init+0x1e>
   19d84:	463a      	mov	r2, r7
   19d86:	4649      	mov	r1, r9
   19d88:	f7f3 fe3b 	bl	da02 <memset>
   19d8c:	f8d4 902c 	ldr.w	r9, [r4, #44]	; 0x2c
   19d90:	f1b9 0f00 	cmp.w	r9, #0
   19d94:	d110      	bne.n	19db8 <srkf_dbl_init+0x274>
   19d96:	fb05 f705 	mul.w	r7, r5, r5
   19d9a:	00ff      	lsls	r7, r7, #3
   19d9c:	4638      	mov	r0, r7
   19d9e:	f7f3 fdb3 	bl	d908 <malloc>
   19da2:	62e0      	str	r0, [r4, #44]	; 0x2c
   19da4:	b920      	cbnz	r0, 19db0 <srkf_dbl_init+0x26c>
   19da6:	4b26      	ldr	r3, [pc, #152]	; (19e40 <srkf_dbl_init+0x2fc>)
   19da8:	4a18      	ldr	r2, [pc, #96]	; (19e0c <srkf_dbl_init+0x2c8>)
   19daa:	f240 1119 	movw	r1, #281	; 0x119
   19dae:	e6d8      	b.n	19b62 <srkf_dbl_init+0x1e>
   19db0:	463a      	mov	r2, r7
   19db2:	4649      	mov	r1, r9
   19db4:	f7f3 fe25 	bl	da02 <memset>
   19db8:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
   19dbc:	f1b9 0f00 	cmp.w	r9, #0
   19dc0:	d110      	bne.n	19de4 <srkf_dbl_init+0x2a0>
   19dc2:	fb05 f705 	mul.w	r7, r5, r5
   19dc6:	00ff      	lsls	r7, r7, #3
   19dc8:	4638      	mov	r0, r7
   19dca:	f7f3 fd9d 	bl	d908 <malloc>
   19dce:	6320      	str	r0, [r4, #48]	; 0x30
   19dd0:	b920      	cbnz	r0, 19ddc <srkf_dbl_init+0x298>
   19dd2:	4b1c      	ldr	r3, [pc, #112]	; (19e44 <srkf_dbl_init+0x300>)
   19dd4:	4a0d      	ldr	r2, [pc, #52]	; (19e0c <srkf_dbl_init+0x2c8>)
   19dd6:	f44f 718f 	mov.w	r1, #286	; 0x11e
   19dda:	e6c2      	b.n	19b62 <srkf_dbl_init+0x1e>
   19ddc:	463a      	mov	r2, r7
   19dde:	4649      	mov	r1, r9
   19de0:	f7f3 fe0f 	bl	da02 <memset>
   19de4:	f8d4 9034 	ldr.w	r9, [r4, #52]	; 0x34
   19de8:	f1b9 0f00 	cmp.w	r9, #0
   19dec:	d132      	bne.n	19e54 <srkf_dbl_init+0x310>
   19dee:	fb05 f705 	mul.w	r7, r5, r5
   19df2:	00ff      	lsls	r7, r7, #3
   19df4:	4638      	mov	r0, r7
   19df6:	f7f3 fd87 	bl	d908 <malloc>
   19dfa:	6360      	str	r0, [r4, #52]	; 0x34
   19dfc:	bb30      	cbnz	r0, 19e4c <srkf_dbl_init+0x308>
   19dfe:	4b12      	ldr	r3, [pc, #72]	; (19e48 <srkf_dbl_init+0x304>)
   19e00:	4a02      	ldr	r2, [pc, #8]	; (19e0c <srkf_dbl_init+0x2c8>)
   19e02:	f240 1123 	movw	r1, #291	; 0x123
   19e06:	e6ac      	b.n	19b62 <srkf_dbl_init+0x1e>
   19e08:	0002456a 	.word	0x0002456a
   19e0c:	000245ad 	.word	0x000245ad
   19e10:	00024686 	.word	0x00024686
   19e14:	000197d1 	.word	0x000197d1
   19e18:	00019751 	.word	0x00019751
   19e1c:	000245d5 	.word	0x000245d5
   19e20:	000245ea 	.word	0x000245ea
   19e24:	000245e2 	.word	0x000245e2
   19e28:	000245f2 	.word	0x000245f2
   19e2c:	000245fa 	.word	0x000245fa
   19e30:	00024602 	.word	0x00024602
   19e34:	0002460a 	.word	0x0002460a
   19e38:	00024612 	.word	0x00024612
   19e3c:	0002461b 	.word	0x0002461b
   19e40:	00024624 	.word	0x00024624
   19e44:	0002462c 	.word	0x0002462c
   19e48:	00024635 	.word	0x00024635
   19e4c:	463a      	mov	r2, r7
   19e4e:	4649      	mov	r1, r9
   19e50:	f7f3 fdd7 	bl	da02 <memset>
   19e54:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
   19e58:	fb06 f706 	mul.w	r7, r6, r6
   19e5c:	00ff      	lsls	r7, r7, #3
   19e5e:	f1b9 0f00 	cmp.w	r9, #0
   19e62:	d109      	bne.n	19e78 <srkf_dbl_init+0x334>
   19e64:	4638      	mov	r0, r7
   19e66:	f7f3 fd4f 	bl	d908 <malloc>
   19e6a:	63a0      	str	r0, [r4, #56]	; 0x38
   19e6c:	b978      	cbnz	r0, 19e8e <srkf_dbl_init+0x34a>
   19e6e:	4b6d      	ldr	r3, [pc, #436]	; (1a024 <srkf_dbl_init+0x4e0>)
   19e70:	4a6d      	ldr	r2, [pc, #436]	; (1a028 <srkf_dbl_init+0x4e4>)
   19e72:	f44f 7194 	mov.w	r1, #296	; 0x128
   19e76:	e674      	b.n	19b62 <srkf_dbl_init+0x1e>
   19e78:	4639      	mov	r1, r7
   19e7a:	4648      	mov	r0, r9
   19e7c:	f002 fa77 	bl	1c36e <realloc>
   19e80:	63a0      	str	r0, [r4, #56]	; 0x38
   19e82:	b920      	cbnz	r0, 19e8e <srkf_dbl_init+0x34a>
   19e84:	4b67      	ldr	r3, [pc, #412]	; (1a024 <srkf_dbl_init+0x4e0>)
   19e86:	4a68      	ldr	r2, [pc, #416]	; (1a028 <srkf_dbl_init+0x4e4>)
   19e88:	f44f 7196 	mov.w	r1, #300	; 0x12c
   19e8c:	e669      	b.n	19b62 <srkf_dbl_init+0x1e>
   19e8e:	463a      	mov	r2, r7
   19e90:	2100      	movs	r1, #0
   19e92:	f7f3 fdb6 	bl	da02 <memset>
   19e96:	f8d4 903c 	ldr.w	r9, [r4, #60]	; 0x3c
   19e9a:	f1b9 0f00 	cmp.w	r9, #0
   19e9e:	d109      	bne.n	19eb4 <srkf_dbl_init+0x370>
   19ea0:	4638      	mov	r0, r7
   19ea2:	f7f3 fd31 	bl	d908 <malloc>
   19ea6:	63e0      	str	r0, [r4, #60]	; 0x3c
   19ea8:	b978      	cbnz	r0, 19eca <srkf_dbl_init+0x386>
   19eaa:	4b60      	ldr	r3, [pc, #384]	; (1a02c <srkf_dbl_init+0x4e8>)
   19eac:	4a5e      	ldr	r2, [pc, #376]	; (1a028 <srkf_dbl_init+0x4e4>)
   19eae:	f240 1131 	movw	r1, #305	; 0x131
   19eb2:	e656      	b.n	19b62 <srkf_dbl_init+0x1e>
   19eb4:	4639      	mov	r1, r7
   19eb6:	4648      	mov	r0, r9
   19eb8:	f002 fa59 	bl	1c36e <realloc>
   19ebc:	63e0      	str	r0, [r4, #60]	; 0x3c
   19ebe:	b920      	cbnz	r0, 19eca <srkf_dbl_init+0x386>
   19ec0:	4b5a      	ldr	r3, [pc, #360]	; (1a02c <srkf_dbl_init+0x4e8>)
   19ec2:	4a59      	ldr	r2, [pc, #356]	; (1a028 <srkf_dbl_init+0x4e4>)
   19ec4:	f240 1135 	movw	r1, #309	; 0x135
   19ec8:	e64b      	b.n	19b62 <srkf_dbl_init+0x1e>
   19eca:	463a      	mov	r2, r7
   19ecc:	2100      	movs	r1, #0
   19ece:	f7f3 fd98 	bl	da02 <memset>
   19ed2:	f8d4 9040 	ldr.w	r9, [r4, #64]	; 0x40
   19ed6:	f1b9 0f00 	cmp.w	r9, #0
   19eda:	d109      	bne.n	19ef0 <srkf_dbl_init+0x3ac>
   19edc:	4638      	mov	r0, r7
   19ede:	f7f3 fd13 	bl	d908 <malloc>
   19ee2:	6420      	str	r0, [r4, #64]	; 0x40
   19ee4:	b978      	cbnz	r0, 19f06 <srkf_dbl_init+0x3c2>
   19ee6:	4b52      	ldr	r3, [pc, #328]	; (1a030 <srkf_dbl_init+0x4ec>)
   19ee8:	4a4f      	ldr	r2, [pc, #316]	; (1a028 <srkf_dbl_init+0x4e4>)
   19eea:	f44f 719d 	mov.w	r1, #314	; 0x13a
   19eee:	e638      	b.n	19b62 <srkf_dbl_init+0x1e>
   19ef0:	4639      	mov	r1, r7
   19ef2:	4648      	mov	r0, r9
   19ef4:	f002 fa3b 	bl	1c36e <realloc>
   19ef8:	6420      	str	r0, [r4, #64]	; 0x40
   19efa:	b920      	cbnz	r0, 19f06 <srkf_dbl_init+0x3c2>
   19efc:	4b4c      	ldr	r3, [pc, #304]	; (1a030 <srkf_dbl_init+0x4ec>)
   19efe:	4a4a      	ldr	r2, [pc, #296]	; (1a028 <srkf_dbl_init+0x4e4>)
   19f00:	f44f 719f 	mov.w	r1, #318	; 0x13e
   19f04:	e62d      	b.n	19b62 <srkf_dbl_init+0x1e>
   19f06:	463a      	mov	r2, r7
   19f08:	2100      	movs	r1, #0
   19f0a:	f7f3 fd7a 	bl	da02 <memset>
   19f0e:	6c60      	ldr	r0, [r4, #68]	; 0x44
   19f10:	b988      	cbnz	r0, 19f36 <srkf_dbl_init+0x3f2>
   19f12:	42b5      	cmp	r5, r6
   19f14:	bf8c      	ite	hi
   19f16:	fb15 f705 	smulbbhi	r7, r5, r5
   19f1a:	fb16 f706 	smulbbls	r7, r6, r6
   19f1e:	b2bf      	uxth	r7, r7
   19f20:	00ff      	lsls	r7, r7, #3
   19f22:	4638      	mov	r0, r7
   19f24:	f7f3 fcf0 	bl	d908 <malloc>
   19f28:	6460      	str	r0, [r4, #68]	; 0x44
   19f2a:	b9b0      	cbnz	r0, 19f5a <srkf_dbl_init+0x416>
   19f2c:	4b41      	ldr	r3, [pc, #260]	; (1a034 <srkf_dbl_init+0x4f0>)
   19f2e:	4a3e      	ldr	r2, [pc, #248]	; (1a028 <srkf_dbl_init+0x4e4>)
   19f30:	f44f 71a2 	mov.w	r1, #324	; 0x144
   19f34:	e615      	b.n	19b62 <srkf_dbl_init+0x1e>
   19f36:	42b5      	cmp	r5, r6
   19f38:	bf8c      	ite	hi
   19f3a:	fb15 f705 	smulbbhi	r7, r5, r5
   19f3e:	fb16 f706 	smulbbls	r7, r6, r6
   19f42:	b2bf      	uxth	r7, r7
   19f44:	00ff      	lsls	r7, r7, #3
   19f46:	4639      	mov	r1, r7
   19f48:	f002 fa11 	bl	1c36e <realloc>
   19f4c:	6460      	str	r0, [r4, #68]	; 0x44
   19f4e:	b920      	cbnz	r0, 19f5a <srkf_dbl_init+0x416>
   19f50:	4b38      	ldr	r3, [pc, #224]	; (1a034 <srkf_dbl_init+0x4f0>)
   19f52:	4a35      	ldr	r2, [pc, #212]	; (1a028 <srkf_dbl_init+0x4e4>)
   19f54:	f240 1149 	movw	r1, #329	; 0x149
   19f58:	e603      	b.n	19b62 <srkf_dbl_init+0x1e>
   19f5a:	463a      	mov	r2, r7
   19f5c:	2100      	movs	r1, #0
   19f5e:	f7f3 fd50 	bl	da02 <memset>
   19f62:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   19f64:	b988      	cbnz	r0, 19f8a <srkf_dbl_init+0x446>
   19f66:	42b5      	cmp	r5, r6
   19f68:	bf8c      	ite	hi
   19f6a:	fb15 f705 	smulbbhi	r7, r5, r5
   19f6e:	fb16 f706 	smulbbls	r7, r6, r6
   19f72:	b2bf      	uxth	r7, r7
   19f74:	00ff      	lsls	r7, r7, #3
   19f76:	4638      	mov	r0, r7
   19f78:	f7f3 fcc6 	bl	d908 <malloc>
   19f7c:	64a0      	str	r0, [r4, #72]	; 0x48
   19f7e:	b9b0      	cbnz	r0, 19fae <srkf_dbl_init+0x46a>
   19f80:	4b2d      	ldr	r3, [pc, #180]	; (1a038 <srkf_dbl_init+0x4f4>)
   19f82:	4a29      	ldr	r2, [pc, #164]	; (1a028 <srkf_dbl_init+0x4e4>)
   19f84:	f240 114f 	movw	r1, #335	; 0x14f
   19f88:	e5eb      	b.n	19b62 <srkf_dbl_init+0x1e>
   19f8a:	42b5      	cmp	r5, r6
   19f8c:	bf8c      	ite	hi
   19f8e:	fb15 f705 	smulbbhi	r7, r5, r5
   19f92:	fb16 f706 	smulbbls	r7, r6, r6
   19f96:	b2bf      	uxth	r7, r7
   19f98:	00ff      	lsls	r7, r7, #3
   19f9a:	4639      	mov	r1, r7
   19f9c:	f002 f9e7 	bl	1c36e <realloc>
   19fa0:	64a0      	str	r0, [r4, #72]	; 0x48
   19fa2:	b920      	cbnz	r0, 19fae <srkf_dbl_init+0x46a>
   19fa4:	4b24      	ldr	r3, [pc, #144]	; (1a038 <srkf_dbl_init+0x4f4>)
   19fa6:	4a20      	ldr	r2, [pc, #128]	; (1a028 <srkf_dbl_init+0x4e4>)
   19fa8:	f44f 71aa 	mov.w	r1, #340	; 0x154
   19fac:	e5d9      	b.n	19b62 <srkf_dbl_init+0x1e>
   19fae:	463a      	mov	r2, r7
   19fb0:	2100      	movs	r1, #0
   19fb2:	f7f3 fd26 	bl	da02 <memset>
   19fb6:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
   19fb8:	b97f      	cbnz	r7, 19fda <srkf_dbl_init+0x496>
   19fba:	436d      	muls	r5, r5
   19fbc:	00ed      	lsls	r5, r5, #3
   19fbe:	4628      	mov	r0, r5
   19fc0:	f7f3 fca2 	bl	d908 <malloc>
   19fc4:	64e0      	str	r0, [r4, #76]	; 0x4c
   19fc6:	b920      	cbnz	r0, 19fd2 <srkf_dbl_init+0x48e>
   19fc8:	4b1c      	ldr	r3, [pc, #112]	; (1a03c <srkf_dbl_init+0x4f8>)
   19fca:	4a17      	ldr	r2, [pc, #92]	; (1a028 <srkf_dbl_init+0x4e4>)
   19fcc:	f240 1159 	movw	r1, #345	; 0x159
   19fd0:	e5c7      	b.n	19b62 <srkf_dbl_init+0x1e>
   19fd2:	462a      	mov	r2, r5
   19fd4:	4639      	mov	r1, r7
   19fd6:	f7f3 fd14 	bl	da02 <memset>
   19fda:	6d25      	ldr	r5, [r4, #80]	; 0x50
   19fdc:	b94d      	cbnz	r5, 19ff2 <srkf_dbl_init+0x4ae>
   19fde:	4640      	mov	r0, r8
   19fe0:	f7f3 fc92 	bl	d908 <malloc>
   19fe4:	6520      	str	r0, [r4, #80]	; 0x50
   19fe6:	b978      	cbnz	r0, 1a008 <srkf_dbl_init+0x4c4>
   19fe8:	4b15      	ldr	r3, [pc, #84]	; (1a040 <srkf_dbl_init+0x4fc>)
   19fea:	4a0f      	ldr	r2, [pc, #60]	; (1a028 <srkf_dbl_init+0x4e4>)
   19fec:	f44f 71af 	mov.w	r1, #350	; 0x15e
   19ff0:	e5b7      	b.n	19b62 <srkf_dbl_init+0x1e>
   19ff2:	4641      	mov	r1, r8
   19ff4:	4628      	mov	r0, r5
   19ff6:	f002 f9ba 	bl	1c36e <realloc>
   19ffa:	6520      	str	r0, [r4, #80]	; 0x50
   19ffc:	b920      	cbnz	r0, 1a008 <srkf_dbl_init+0x4c4>
   19ffe:	4b10      	ldr	r3, [pc, #64]	; (1a040 <srkf_dbl_init+0x4fc>)
   1a000:	4a09      	ldr	r2, [pc, #36]	; (1a028 <srkf_dbl_init+0x4e4>)
   1a002:	f44f 71b1 	mov.w	r1, #354	; 0x162
   1a006:	e5ac      	b.n	19b62 <srkf_dbl_init+0x1e>
   1a008:	4642      	mov	r2, r8
   1a00a:	2100      	movs	r1, #0
   1a00c:	f7f3 fcf9 	bl	da02 <memset>
   1a010:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   1a014:	80a6      	strh	r6, [r4, #4]
   1a016:	f043 0302 	orr.w	r3, r3, #2
   1a01a:	8066      	strh	r6, [r4, #2]
   1a01c:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
   1a020:	e5db      	b.n	19bda <srkf_dbl_init+0x96>
   1a022:	bf00      	nop
   1a024:	0002463e 	.word	0x0002463e
   1a028:	000245ad 	.word	0x000245ad
   1a02c:	00024646 	.word	0x00024646
   1a030:	0002464f 	.word	0x0002464f
   1a034:	00024658 	.word	0x00024658
   1a038:	00024660 	.word	0x00024660
   1a03c:	00024669 	.word	0x00024669
   1a040:	00024671 	.word	0x00024671

0001a044 <srkf_dbl_free>:
   1a044:	b510      	push	{r4, lr}
   1a046:	4604      	mov	r4, r0
   1a048:	b930      	cbnz	r0, 1a058 <srkf_dbl_free+0x14>
   1a04a:	4b23      	ldr	r3, [pc, #140]	; (1a0d8 <srkf_dbl_free+0x94>)
   1a04c:	4a23      	ldr	r2, [pc, #140]	; (1a0dc <srkf_dbl_free+0x98>)
   1a04e:	4824      	ldr	r0, [pc, #144]	; (1a0e0 <srkf_dbl_free+0x9c>)
   1a050:	f240 1173 	movw	r1, #371	; 0x173
   1a054:	f7ee fffa 	bl	904c <__assert_func>
   1a058:	6880      	ldr	r0, [r0, #8]
   1a05a:	f7f3 fc8b 	bl	d974 <free>
   1a05e:	6920      	ldr	r0, [r4, #16]
   1a060:	f7f3 fc88 	bl	d974 <free>
   1a064:	69a0      	ldr	r0, [r4, #24]
   1a066:	f7f3 fc85 	bl	d974 <free>
   1a06a:	69e0      	ldr	r0, [r4, #28]
   1a06c:	f7f3 fc82 	bl	d974 <free>
   1a070:	6a20      	ldr	r0, [r4, #32]
   1a072:	f7f3 fc7f 	bl	d974 <free>
   1a076:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1a078:	f7f3 fc7c 	bl	d974 <free>
   1a07c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   1a07e:	f7f3 fc79 	bl	d974 <free>
   1a082:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1a084:	f7f3 fc76 	bl	d974 <free>
   1a088:	6b20      	ldr	r0, [r4, #48]	; 0x30
   1a08a:	f7f3 fc73 	bl	d974 <free>
   1a08e:	6b60      	ldr	r0, [r4, #52]	; 0x34
   1a090:	f7f3 fc70 	bl	d974 <free>
   1a094:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1a096:	f7f3 fc6d 	bl	d974 <free>
   1a09a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1a09c:	f7f3 fc6a 	bl	d974 <free>
   1a0a0:	6c20      	ldr	r0, [r4, #64]	; 0x40
   1a0a2:	f7f3 fc67 	bl	d974 <free>
   1a0a6:	6c60      	ldr	r0, [r4, #68]	; 0x44
   1a0a8:	f7f3 fc64 	bl	d974 <free>
   1a0ac:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   1a0ae:	f7f3 fc61 	bl	d974 <free>
   1a0b2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   1a0b4:	f7f3 fc5e 	bl	d974 <free>
   1a0b8:	6d20      	ldr	r0, [r4, #80]	; 0x50
   1a0ba:	f7f3 fc5b 	bl	d974 <free>
   1a0be:	2300      	movs	r3, #0
   1a0c0:	6023      	str	r3, [r4, #0]
   1a0c2:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   1a0c6:	07db      	lsls	r3, r3, #31
   1a0c8:	d504      	bpl.n	1a0d4 <srkf_dbl_free+0x90>
   1a0ca:	4620      	mov	r0, r4
   1a0cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a0d0:	f7f3 bc50 	b.w	d974 <free>
   1a0d4:	bd10      	pop	{r4, pc}
   1a0d6:	bf00      	nop
   1a0d8:	000245c9 	.word	0x000245c9
   1a0dc:	000245bb 	.word	0x000245bb
   1a0e0:	00024686 	.word	0x00024686

0001a0e4 <trisolve_dbl>:
   1a0e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a0e8:	b08b      	sub	sp, #44	; 0x2c
   1a0ea:	4699      	mov	r9, r3
   1a0ec:	f8bd 8050 	ldrh.w	r8, [sp, #80]	; 0x50
   1a0f0:	9004      	str	r0, [sp, #16]
   1a0f2:	f06f 0307 	mvn.w	r3, #7
   1a0f6:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
   1a0fa:	fb03 f308 	mul.w	r3, r3, r8
   1a0fe:	b236      	sxth	r6, r6
   1a100:	9303      	str	r3, [sp, #12]
   1a102:	e9cd 1208 	strd	r1, r2, [sp, #32]
   1a106:	fb06 f308 	mul.w	r3, r6, r8
   1a10a:	9306      	str	r3, [sp, #24]
   1a10c:	fb09 f306 	mul.w	r3, r9, r6
   1a110:	9307      	str	r3, [sp, #28]
   1a112:	f04f 0b00 	mov.w	fp, #0
   1a116:	fa0f fa8b 	sxth.w	sl, fp
   1a11a:	45c2      	cmp	sl, r8
   1a11c:	db02      	blt.n	1a124 <trisolve_dbl+0x40>
   1a11e:	b00b      	add	sp, #44	; 0x2c
   1a120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a124:	9b06      	ldr	r3, [sp, #24]
   1a126:	4453      	add	r3, sl
   1a128:	00db      	lsls	r3, r3, #3
   1a12a:	9305      	str	r3, [sp, #20]
   1a12c:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   1a130:	189f      	adds	r7, r3, r2
   1a132:	9b07      	ldr	r3, [sp, #28]
   1a134:	9301      	str	r3, [sp, #4]
   1a136:	2300      	movs	r3, #0
   1a138:	4635      	mov	r5, r6
   1a13a:	9302      	str	r3, [sp, #8]
   1a13c:	2d00      	cmp	r5, #0
   1a13e:	da02      	bge.n	1a146 <trisolve_dbl+0x62>
   1a140:	f10b 0b01 	add.w	fp, fp, #1
   1a144:	e7e7      	b.n	1a116 <trisolve_dbl+0x32>
   1a146:	9a05      	ldr	r2, [sp, #20]
   1a148:	9b02      	ldr	r3, [sp, #8]
   1a14a:	4413      	add	r3, r2
   1a14c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1a14e:	4413      	add	r3, r2
   1a150:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a154:	e9c7 2300 	strd	r2, r3, [r7]
   1a158:	b2ad      	uxth	r5, r5
   1a15a:	1c6c      	adds	r4, r5, #1
   1a15c:	b224      	sxth	r4, r4
   1a15e:	454c      	cmp	r4, r9
   1a160:	db0c      	blt.n	1a17c <trisolve_dbl+0x98>
   1a162:	9b03      	ldr	r3, [sp, #12]
   1a164:	441f      	add	r7, r3
   1a166:	9b01      	ldr	r3, [sp, #4]
   1a168:	eba3 0309 	sub.w	r3, r3, r9
   1a16c:	9301      	str	r3, [sp, #4]
   1a16e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   1a172:	3d01      	subs	r5, #1
   1a174:	4413      	add	r3, r2
   1a176:	9302      	str	r3, [sp, #8]
   1a178:	b22d      	sxth	r5, r5
   1a17a:	e7df      	b.n	1a13c <trisolve_dbl+0x58>
   1a17c:	9b04      	ldr	r3, [sp, #16]
   1a17e:	9a08      	ldr	r2, [sp, #32]
   1a180:	fb08 a104 	mla	r1, r8, r4, sl
   1a184:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   1a188:	9b01      	ldr	r3, [sp, #4]
   1a18a:	4423      	add	r3, r4
   1a18c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1a190:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a194:	e9d1 0100 	ldrd	r0, r1, [r1]
   1a198:	f007 f8a0 	bl	212dc <__aeabi_dmul>
   1a19c:	4602      	mov	r2, r0
   1a19e:	460b      	mov	r3, r1
   1a1a0:	e9d7 0100 	ldrd	r0, r1, [r7]
   1a1a4:	f006 fee2 	bl	20f6c <__aeabi_dsub>
   1a1a8:	3401      	adds	r4, #1
   1a1aa:	e9c7 0100 	strd	r0, r1, [r7]
   1a1ae:	e7d5      	b.n	1a15c <trisolve_dbl+0x78>

0001a1b0 <ud_dbl>:
   1a1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a1b4:	ed2d 8b02 	vpush	{d8}
   1a1b8:	fb03 f503 	mul.w	r5, r3, r3
   1a1bc:	b091      	sub	sp, #68	; 0x44
   1a1be:	460f      	mov	r7, r1
   1a1c0:	00ed      	lsls	r5, r5, #3
   1a1c2:	4606      	mov	r6, r0
   1a1c4:	9209      	str	r2, [sp, #36]	; 0x24
   1a1c6:	2100      	movs	r1, #0
   1a1c8:	462a      	mov	r2, r5
   1a1ca:	4638      	mov	r0, r7
   1a1cc:	461c      	mov	r4, r3
   1a1ce:	f7f3 fc18 	bl	da02 <memset>
   1a1d2:	462a      	mov	r2, r5
   1a1d4:	2100      	movs	r1, #0
   1a1d6:	9809      	ldr	r0, [sp, #36]	; 0x24
   1a1d8:	f7f3 fc13 	bl	da02 <memset>
   1a1dc:	43e3      	mvns	r3, r4
   1a1de:	00db      	lsls	r3, r3, #3
   1a1e0:	1e65      	subs	r5, r4, #1
   1a1e2:	b22d      	sxth	r5, r5
   1a1e4:	9306      	str	r3, [sp, #24]
   1a1e6:	1c63      	adds	r3, r4, #1
   1a1e8:	930d      	str	r3, [sp, #52]	; 0x34
   1a1ea:	436b      	muls	r3, r5
   1a1ec:	00da      	lsls	r2, r3, #3
   1a1ee:	00d9      	lsls	r1, r3, #3
   1a1f0:	3301      	adds	r3, #1
   1a1f2:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
   1a1f6:	9308      	str	r3, [sp, #32]
   1a1f8:	f06f 0307 	mvn.w	r3, #7
   1a1fc:	4363      	muls	r3, r4
   1a1fe:	920b      	str	r2, [sp, #44]	; 0x2c
   1a200:	ed9f 8b51 	vldr	d8, [pc, #324]	; 1a348 <ud_dbl+0x198>
   1a204:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1a206:	930c      	str	r3, [sp, #48]	; 0x30
   1a208:	fb05 fa04 	mul.w	sl, r5, r4
   1a20c:	187b      	adds	r3, r7, r1
   1a20e:	f04f 0900 	mov.w	r9, #0
   1a212:	eb02 0b01 	add.w	fp, r2, r1
   1a216:	f8cd a01c 	str.w	sl, [sp, #28]
   1a21a:	930f      	str	r3, [sp, #60]	; 0x3c
   1a21c:	f8cd 9010 	str.w	r9, [sp, #16]
   1a220:	2d00      	cmp	r5, #0
   1a222:	da0d      	bge.n	1a240 <ud_dbl+0x90>
   1a224:	2000      	movs	r0, #0
   1a226:	f04f 0800 	mov.w	r8, #0
   1a22a:	f04f 0900 	mov.w	r9, #0
   1a22e:	b201      	sxth	r1, r0
   1a230:	428c      	cmp	r4, r1
   1a232:	dd7f      	ble.n	1a334 <ud_dbl+0x184>
   1a234:	fb04 f301 	mul.w	r3, r4, r1
   1a238:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
   1a23c:	2200      	movs	r2, #0
   1a23e:	e074      	b.n	1a32a <ud_dbl+0x17a>
   1a240:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1a242:	f8cd a014 	str.w	sl, [sp, #20]
   1a246:	444b      	add	r3, r9
   1a248:	9303      	str	r3, [sp, #12]
   1a24a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a24c:	444b      	add	r3, r9
   1a24e:	18fb      	adds	r3, r7, r3
   1a250:	930e      	str	r3, [sp, #56]	; 0x38
   1a252:	9b08      	ldr	r3, [sp, #32]
   1a254:	930a      	str	r3, [sp, #40]	; 0x28
   1a256:	46a8      	mov	r8, r5
   1a258:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a25a:	ed33 7b02 	vldmdb	r3!, {d7}
   1a25e:	ed8d 7b00 	vstr	d7, [sp]
   1a262:	930a      	str	r3, [sp, #40]	; 0x28
   1a264:	462e      	mov	r6, r5
   1a266:	42b4      	cmp	r4, r6
   1a268:	dc30      	bgt.n	1a2cc <ud_dbl+0x11c>
   1a26a:	4545      	cmp	r5, r8
   1a26c:	d150      	bne.n	1a310 <ud_dbl+0x160>
   1a26e:	4b38      	ldr	r3, [pc, #224]	; (1a350 <ud_dbl+0x1a0>)
   1a270:	2200      	movs	r2, #0
   1a272:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a276:	f007 faad 	bl	217d4 <__aeabi_dcmple>
   1a27a:	2800      	cmp	r0, #0
   1a27c:	9b04      	ldr	r3, [sp, #16]
   1a27e:	ed9d 7b00 	vldr	d7, [sp]
   1a282:	bf18      	it	ne
   1a284:	2301      	movne	r3, #1
   1a286:	9304      	str	r3, [sp, #16]
   1a288:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1a28a:	ed8b 7b00 	vstr	d7, [fp]
   1a28e:	ed83 8b00 	vstr	d8, [r3]
   1a292:	9b03      	ldr	r3, [sp, #12]
   1a294:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1a296:	4413      	add	r3, r2
   1a298:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   1a29c:	9303      	str	r3, [sp, #12]
   1a29e:	9b05      	ldr	r3, [sp, #20]
   1a2a0:	fa0f f888 	sxth.w	r8, r8
   1a2a4:	1b1b      	subs	r3, r3, r4
   1a2a6:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   1a2aa:	9305      	str	r3, [sp, #20]
   1a2ac:	d1d4      	bne.n	1a258 <ud_dbl+0xa8>
   1a2ae:	9b06      	ldr	r3, [sp, #24]
   1a2b0:	9a06      	ldr	r2, [sp, #24]
   1a2b2:	449b      	add	fp, r3
   1a2b4:	9b08      	ldr	r3, [sp, #32]
   1a2b6:	4413      	add	r3, r2
   1a2b8:	9308      	str	r3, [sp, #32]
   1a2ba:	9b07      	ldr	r3, [sp, #28]
   1a2bc:	3d01      	subs	r5, #1
   1a2be:	1b1b      	subs	r3, r3, r4
   1a2c0:	b22d      	sxth	r5, r5
   1a2c2:	ebaa 0a04 	sub.w	sl, sl, r4
   1a2c6:	9307      	str	r3, [sp, #28]
   1a2c8:	4491      	add	r9, r2
   1a2ca:	e7a9      	b.n	1a220 <ud_dbl+0x70>
   1a2cc:	9b05      	ldr	r3, [sp, #20]
   1a2ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1a2d0:	1999      	adds	r1, r3, r6
   1a2d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1a2d4:	4373      	muls	r3, r6
   1a2d6:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
   1a2da:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1a2de:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a2e2:	e9d1 0100 	ldrd	r0, r1, [r1]
   1a2e6:	f006 fff9 	bl	212dc <__aeabi_dmul>
   1a2ea:	9b07      	ldr	r3, [sp, #28]
   1a2ec:	4433      	add	r3, r6
   1a2ee:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
   1a2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a2f6:	f006 fff1 	bl	212dc <__aeabi_dmul>
   1a2fa:	4602      	mov	r2, r0
   1a2fc:	460b      	mov	r3, r1
   1a2fe:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a302:	f006 fe33 	bl	20f6c <__aeabi_dsub>
   1a306:	3601      	adds	r6, #1
   1a308:	e9cd 0100 	strd	r0, r1, [sp]
   1a30c:	b236      	sxth	r6, r6
   1a30e:	e7aa      	b.n	1a266 <ud_dbl+0xb6>
   1a310:	e9db 2300 	ldrd	r2, r3, [fp]
   1a314:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a318:	f007 f90a 	bl	21530 <__aeabi_ddiv>
   1a31c:	9b03      	ldr	r3, [sp, #12]
   1a31e:	e9c3 0100 	strd	r0, r1, [r3]
   1a322:	e7b6      	b.n	1a292 <ud_dbl+0xe2>
   1a324:	e8e3 8902 	strd	r8, r9, [r3], #8
   1a328:	3201      	adds	r2, #1
   1a32a:	b215      	sxth	r5, r2
   1a32c:	42a9      	cmp	r1, r5
   1a32e:	dcf9      	bgt.n	1a324 <ud_dbl+0x174>
   1a330:	3001      	adds	r0, #1
   1a332:	e77c      	b.n	1a22e <ud_dbl+0x7e>
   1a334:	9b04      	ldr	r3, [sp, #16]
   1a336:	f04f 0000 	mov.w	r0, #0
   1a33a:	f363 0000 	bfi	r0, r3, #0, #1
   1a33e:	b011      	add	sp, #68	; 0x44
   1a340:	ecbd 8b02 	vpop	{d8}
   1a344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a348:	00000000 	.word	0x00000000
   1a34c:	3ff00000 	.word	0x3ff00000
   1a350:	3cb00000 	.word	0x3cb00000
   1a354:	00000000 	.word	0x00000000

0001a358 <thornton_dbl>:
   1a358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a35c:	ed2d 8b02 	vpush	{d8}
   1a360:	b09d      	sub	sp, #116	; 0x74
   1a362:	af00      	add	r7, sp, #0
   1a364:	f8b7 b0a8 	ldrh.w	fp, [r7, #168]	; 0xa8
   1a368:	603b      	str	r3, [r7, #0]
   1a36a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
   1a36e:	6578      	str	r0, [r7, #84]	; 0x54
   1a370:	667b      	str	r3, [r7, #100]	; 0x64
   1a372:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
   1a376:	6279      	str	r1, [r7, #36]	; 0x24
   1a378:	2300      	movs	r3, #0
   1a37a:	637a      	str	r2, [r7, #52]	; 0x34
   1a37c:	4619      	mov	r1, r3
   1a37e:	b28a      	uxth	r2, r1
   1a380:	4593      	cmp	fp, r2
   1a382:	d856      	bhi.n	1a432 <thornton_dbl+0xda>
   1a384:	f10b 34ff 	add.w	r4, fp, #4294967295	; 0xffffffff
   1a388:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1a38a:	b224      	sxth	r4, r4
   1a38c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1a390:	64fb      	str	r3, [r7, #76]	; 0x4c
   1a392:	65fc      	str	r4, [r7, #92]	; 0x5c
   1a394:	2300      	movs	r3, #0
   1a396:	65bb      	str	r3, [r7, #88]	; 0x58
   1a398:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
   1a39c:	455b      	cmp	r3, fp
   1a39e:	db4e      	blt.n	1a43e <thornton_dbl+0xe6>
   1a3a0:	fb0b f304 	mul.w	r3, fp, r4
   1a3a4:	643b      	str	r3, [r7, #64]	; 0x40
   1a3a6:	ea6f 030b 	mvn.w	r3, fp
   1a3aa:	00db      	lsls	r3, r3, #3
   1a3ac:	60bb      	str	r3, [r7, #8]
   1a3ae:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   1a3b2:	f10b 0301 	add.w	r3, fp, #1
   1a3b6:	63bb      	str	r3, [r7, #56]	; 0x38
   1a3b8:	4363      	muls	r3, r4
   1a3ba:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1a3be:	63fb      	str	r3, [r7, #60]	; 0x3c
   1a3c0:	f06f 0307 	mvn.w	r3, #7
   1a3c4:	fb03 f30b 	mul.w	r3, r3, fp
   1a3c8:	607b      	str	r3, [r7, #4]
   1a3ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1a3cc:	4363      	muls	r3, r4
   1a3ce:	65bb      	str	r3, [r7, #88]	; 0x58
   1a3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1a3d2:	00db      	lsls	r3, r3, #3
   1a3d4:	62bb      	str	r3, [r7, #40]	; 0x28
   1a3d6:	2300      	movs	r3, #0
   1a3d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   1a3da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1a3dc:	330e      	adds	r3, #14
   1a3de:	08db      	lsrs	r3, r3, #3
   1a3e0:	ed9f 8bb1 	vldr	d8, [pc, #708]	; 1a6a8 <thornton_dbl+0x350>
   1a3e4:	00db      	lsls	r3, r3, #3
   1a3e6:	653b      	str	r3, [r7, #80]	; 0x50
   1a3e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1a3ea:	041b      	lsls	r3, r3, #16
   1a3ec:	d56b      	bpl.n	1a4c6 <thornton_dbl+0x16e>
   1a3ee:	ed9f 6bae 	vldr	d6, [pc, #696]	; 1a6a8 <thornton_dbl+0x350>
   1a3f2:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 1a6b4 <thornton_dbl+0x35c>
   1a3f6:	2100      	movs	r1, #0
   1a3f8:	f04f 0800 	mov.w	r8, #0
   1a3fc:	b20a      	sxth	r2, r1
   1a3fe:	455a      	cmp	r2, fp
   1a400:	f2c0 81a3 	blt.w	1a74a <thornton_dbl+0x3f2>
   1a404:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1a406:	f04f 0000 	mov.w	r0, #0
   1a40a:	f363 0000 	bfi	r0, r3, #0, #1
   1a40e:	3774      	adds	r7, #116	; 0x74
   1a410:	46bd      	mov	sp, r7
   1a412:	ecbd 8b02 	vpop	{d8}
   1a416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a41a:	e8f5 8902 	ldrd	r8, r9, [r5], #8
   1a41e:	e8e4 8902 	strd	r8, r9, [r4], #8
   1a422:	3201      	adds	r2, #1
   1a424:	b296      	uxth	r6, r2
   1a426:	45b3      	cmp	fp, r6
   1a428:	d8f7      	bhi.n	1a41a <thornton_dbl+0xc2>
   1a42a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   1a42c:	3101      	adds	r1, #1
   1a42e:	4413      	add	r3, r2
   1a430:	e7a5      	b.n	1a37e <thornton_dbl+0x26>
   1a432:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   1a436:	18c5      	adds	r5, r0, r3
   1a438:	18d4      	adds	r4, r2, r3
   1a43a:	2200      	movs	r2, #0
   1a43c:	e7f2      	b.n	1a424 <thornton_dbl+0xcc>
   1a43e:	fb0b f303 	mul.w	r3, fp, r3
   1a442:	191d      	adds	r5, r3, r4
   1a444:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   1a448:	3501      	adds	r5, #1
   1a44a:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
   1a44e:	663a      	str	r2, [r7, #96]	; 0x60
   1a450:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   1a454:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1a458:	653b      	str	r3, [r7, #80]	; 0x50
   1a45a:	4626      	mov	r6, r4
   1a45c:	f04f 0800 	mov.w	r8, #0
   1a460:	2e00      	cmp	r6, #0
   1a462:	da02      	bge.n	1a46a <thornton_dbl+0x112>
   1a464:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1a466:	3301      	adds	r3, #1
   1a468:	e795      	b.n	1a396 <thornton_dbl+0x3e>
   1a46a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1a46c:	ed13 7b02 	vldr	d7, [r3, #-8]
   1a470:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1a472:	ed87 7b1a 	vstr	d7, [r7, #104]	; 0x68
   1a476:	eb08 0a03 	add.w	sl, r8, r3
   1a47a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1a47c:	f04f 0900 	mov.w	r9, #0
   1a480:	461d      	mov	r5, r3
   1a482:	fa0f f389 	sxth.w	r3, r9
   1a486:	429e      	cmp	r6, r3
   1a488:	dc0a      	bgt.n	1a4a0 <thornton_dbl+0x148>
   1a48a:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
   1a48e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1a490:	ed23 7b02 	vstmdb	r3!, {d7}
   1a494:	3e01      	subs	r6, #1
   1a496:	663b      	str	r3, [r7, #96]	; 0x60
   1a498:	b236      	sxth	r6, r6
   1a49a:	f1a8 0808 	sub.w	r8, r8, #8
   1a49e:	e7df      	b.n	1a460 <thornton_dbl+0x108>
   1a4a0:	e9da 2300 	ldrd	r2, r3, [sl]
   1a4a4:	e8f5 0102 	ldrd	r0, r1, [r5], #8
   1a4a8:	f006 ff18 	bl	212dc <__aeabi_dmul>
   1a4ac:	460b      	mov	r3, r1
   1a4ae:	4602      	mov	r2, r0
   1a4b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
   1a4b4:	f006 fd5c 	bl	20f70 <__adddf3>
   1a4b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1a4ba:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
   1a4be:	f109 0901 	add.w	r9, r9, #1
   1a4c2:	449a      	add	sl, r3
   1a4c4:	e7dd      	b.n	1a482 <thornton_dbl+0x12a>
   1a4c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1a4c8:	f8c7 d020 	str.w	sp, [r7, #32]
   1a4cc:	ebad 0d03 	sub.w	sp, sp, r3
   1a4d0:	f8c7 d048 	str.w	sp, [r7, #72]	; 0x48
   1a4d4:	ebad 0d03 	sub.w	sp, sp, r3
   1a4d8:	f8c7 d044 	str.w	sp, [r7, #68]	; 0x44
   1a4dc:	ebad 0d03 	sub.w	sp, sp, r3
   1a4e0:	f8c7 d030 	str.w	sp, [r7, #48]	; 0x30
   1a4e4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   1a4e8:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   1a4ea:	6a7d      	ldr	r5, [r7, #36]	; 0x24
   1a4ec:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
   1a4f0:	ebad 0d03 	sub.w	sp, sp, r3
   1a4f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1a4f6:	f8c7 d02c 	str.w	sp, [r7, #44]	; 0x2c
   1a4fa:	4413      	add	r3, r2
   1a4fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   1a4fe:	663b      	str	r3, [r7, #96]	; 0x60
   1a500:	ed87 8b1a 	vstr	d8, [r7, #104]	; 0x68
   1a504:	4623      	mov	r3, r4
   1a506:	4413      	add	r3, r2
   1a508:	6e3e      	ldr	r6, [r7, #96]	; 0x60
   1a50a:	60fb      	str	r3, [r7, #12]
   1a50c:	68fb      	ldr	r3, [r7, #12]
   1a50e:	429c      	cmp	r4, r3
   1a510:	d137      	bne.n	1a582 <thornton_dbl+0x22a>
   1a512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a514:	6dba      	ldr	r2, [r7, #88]	; 0x58
   1a516:	6c7c      	ldr	r4, [r7, #68]	; 0x44
   1a518:	683d      	ldr	r5, [r7, #0]
   1a51a:	f8d7 a02c 	ldr.w	sl, [r7, #44]	; 0x2c
   1a51e:	189e      	adds	r6, r3, r2
   1a520:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   1a522:	4623      	mov	r3, r4
   1a524:	4413      	add	r3, r2
   1a526:	60fb      	str	r3, [r7, #12]
   1a528:	68fb      	ldr	r3, [r7, #12]
   1a52a:	429c      	cmp	r4, r3
   1a52c:	d146      	bne.n	1a5bc <thornton_dbl+0x264>
   1a52e:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
   1a532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1a534:	ec51 0b17 	vmov	r0, r1, d7
   1a538:	ed83 7b00 	vstr	d7, [r3]
   1a53c:	2200      	movs	r2, #0
   1a53e:	4b5c      	ldr	r3, [pc, #368]	; (1a6b0 <thornton_dbl+0x358>)
   1a540:	f007 f948 	bl	217d4 <__aeabi_dcmple>
   1a544:	2800      	cmp	r0, #0
   1a546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1a548:	495a      	ldr	r1, [pc, #360]	; (1a6b4 <thornton_dbl+0x35c>)
   1a54a:	bf18      	it	ne
   1a54c:	2301      	movne	r3, #1
   1a54e:	64fb      	str	r3, [r7, #76]	; 0x4c
   1a550:	2000      	movs	r0, #0
   1a552:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
   1a556:	f006 ffeb 	bl	21530 <__aeabi_ddiv>
   1a55a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1a55c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1a55e:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
   1a562:	fa12 fa83 	uxtah	sl, r2, r3
   1a566:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
   1a56a:	2600      	movs	r6, #0
   1a56c:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
   1a570:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1a572:	4553      	cmp	r3, sl
   1a574:	f000 80d7 	beq.w	1a726 <thornton_dbl+0x3ce>
   1a578:	f04f 0800 	mov.w	r8, #0
   1a57c:	ec55 4b18 	vmov	r4, r5, d8
   1a580:	e04f      	b.n	1a622 <thornton_dbl+0x2ca>
   1a582:	e8f6 8902 	ldrd	r8, r9, [r6], #8
   1a586:	e9d5 2300 	ldrd	r2, r3, [r5]
   1a58a:	e8e4 8902 	strd	r8, r9, [r4], #8
   1a58e:	4640      	mov	r0, r8
   1a590:	4649      	mov	r1, r9
   1a592:	f006 fea3 	bl	212dc <__aeabi_dmul>
   1a596:	4602      	mov	r2, r0
   1a598:	460b      	mov	r3, r1
   1a59a:	e8ea 2302 	strd	r2, r3, [sl], #8
   1a59e:	4640      	mov	r0, r8
   1a5a0:	4649      	mov	r1, r9
   1a5a2:	f006 fe9b 	bl	212dc <__aeabi_dmul>
   1a5a6:	460b      	mov	r3, r1
   1a5a8:	4602      	mov	r2, r0
   1a5aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
   1a5ae:	f006 fcdf 	bl	20f70 <__adddf3>
   1a5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a5b4:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
   1a5b8:	441d      	add	r5, r3
   1a5ba:	e7a7      	b.n	1a50c <thornton_dbl+0x1b4>
   1a5bc:	e8f6 8902 	ldrd	r8, r9, [r6], #8
   1a5c0:	e9d5 2300 	ldrd	r2, r3, [r5]
   1a5c4:	e8e4 8902 	strd	r8, r9, [r4], #8
   1a5c8:	4640      	mov	r0, r8
   1a5ca:	4649      	mov	r1, r9
   1a5cc:	f006 fe86 	bl	212dc <__aeabi_dmul>
   1a5d0:	4602      	mov	r2, r0
   1a5d2:	460b      	mov	r3, r1
   1a5d4:	e8ea 2302 	strd	r2, r3, [sl], #8
   1a5d8:	4640      	mov	r0, r8
   1a5da:	4649      	mov	r1, r9
   1a5dc:	f006 fe7e 	bl	212dc <__aeabi_dmul>
   1a5e0:	460b      	mov	r3, r1
   1a5e2:	4602      	mov	r2, r0
   1a5e4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
   1a5e8:	f006 fcc2 	bl	20f70 <__adddf3>
   1a5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a5ee:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
   1a5f2:	441d      	add	r5, r3
   1a5f4:	e798      	b.n	1a528 <thornton_dbl+0x1d0>
   1a5f6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   1a5fa:	18f1      	adds	r1, r6, r3
   1a5fc:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
   1a600:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a602:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1a606:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a60a:	e9d1 0100 	ldrd	r0, r1, [r1]
   1a60e:	f006 fe65 	bl	212dc <__aeabi_dmul>
   1a612:	4602      	mov	r2, r0
   1a614:	460b      	mov	r3, r1
   1a616:	4620      	mov	r0, r4
   1a618:	4629      	mov	r1, r5
   1a61a:	f006 fca9 	bl	20f70 <__adddf3>
   1a61e:	4604      	mov	r4, r0
   1a620:	460d      	mov	r5, r1
   1a622:	fa0f f388 	sxth.w	r3, r8
   1a626:	455b      	cmp	r3, fp
   1a628:	f108 0801 	add.w	r8, r8, #1
   1a62c:	dbe3      	blt.n	1a5f6 <thornton_dbl+0x29e>
   1a62e:	f04f 0800 	mov.w	r8, #0
   1a632:	fa0f f388 	sxth.w	r3, r8
   1a636:	455b      	cmp	r3, fp
   1a638:	f108 0801 	add.w	r8, r8, #1
   1a63c:	db1d      	blt.n	1a67a <thornton_dbl+0x322>
   1a63e:	4620      	mov	r0, r4
   1a640:	4629      	mov	r1, r5
   1a642:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
   1a646:	f006 fe49 	bl	212dc <__aeabi_dmul>
   1a64a:	f04f 0900 	mov.w	r9, #0
   1a64e:	4604      	mov	r4, r0
   1a650:	460d      	mov	r5, r1
   1a652:	fa0f f389 	sxth.w	r3, r9
   1a656:	455b      	cmp	r3, fp
   1a658:	f109 0901 	add.w	r9, r9, #1
   1a65c:	db2c      	blt.n	1a6b8 <thornton_dbl+0x360>
   1a65e:	f04f 0900 	mov.w	r9, #0
   1a662:	fa0f f389 	sxth.w	r3, r9
   1a666:	455b      	cmp	r3, fp
   1a668:	f109 0901 	add.w	r9, r9, #1
   1a66c:	db40      	blt.n	1a6f0 <thornton_dbl+0x398>
   1a66e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1a670:	e8e3 4502 	strd	r4, r5, [r3], #8
   1a674:	445e      	add	r6, fp
   1a676:	663b      	str	r3, [r7, #96]	; 0x60
   1a678:	e77a      	b.n	1a570 <thornton_dbl+0x218>
   1a67a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1a67c:	18f1      	adds	r1, r6, r3
   1a67e:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
   1a682:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1a684:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1a688:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a68c:	e9d1 0100 	ldrd	r0, r1, [r1]
   1a690:	f006 fe24 	bl	212dc <__aeabi_dmul>
   1a694:	4602      	mov	r2, r0
   1a696:	460b      	mov	r3, r1
   1a698:	4620      	mov	r0, r4
   1a69a:	4629      	mov	r1, r5
   1a69c:	f006 fc68 	bl	20f70 <__adddf3>
   1a6a0:	4604      	mov	r4, r0
   1a6a2:	460d      	mov	r5, r1
   1a6a4:	e7c5      	b.n	1a632 <thornton_dbl+0x2da>
   1a6a6:	bf00      	nop
	...
   1a6b0:	3cb00000 	.word	0x3cb00000
   1a6b4:	3ff00000 	.word	0x3ff00000
   1a6b8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   1a6bc:	61bc      	str	r4, [r7, #24]
   1a6be:	eb06 0803 	add.w	r8, r6, r3
   1a6c2:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
   1a6c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
   1a6c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1a6cc:	f105 4200 	add.w	r2, r5, #2147483648	; 0x80000000
   1a6d0:	61fa      	str	r2, [r7, #28]
   1a6d2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   1a6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a6da:	f006 fdff 	bl	212dc <__aeabi_dmul>
   1a6de:	4602      	mov	r2, r0
   1a6e0:	460b      	mov	r3, r1
   1a6e2:	e9d8 0100 	ldrd	r0, r1, [r8]
   1a6e6:	f006 fc43 	bl	20f70 <__adddf3>
   1a6ea:	e9c8 0100 	strd	r0, r1, [r8]
   1a6ee:	e7b0      	b.n	1a652 <thornton_dbl+0x2fa>
   1a6f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1a6f2:	613c      	str	r4, [r7, #16]
   1a6f4:	eb06 0803 	add.w	r8, r6, r3
   1a6f8:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
   1a6fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   1a6fe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1a702:	f105 4200 	add.w	r2, r5, #2147483648	; 0x80000000
   1a706:	617a      	str	r2, [r7, #20]
   1a708:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   1a70c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a710:	f006 fde4 	bl	212dc <__aeabi_dmul>
   1a714:	4602      	mov	r2, r0
   1a716:	460b      	mov	r3, r1
   1a718:	e9d8 0100 	ldrd	r0, r1, [r8]
   1a71c:	f006 fc28 	bl	20f70 <__adddf3>
   1a720:	e9c8 0100 	strd	r0, r1, [r8]
   1a724:	e79d      	b.n	1a662 <thornton_dbl+0x30a>
   1a726:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1a728:	68ba      	ldr	r2, [r7, #8]
   1a72a:	f8d7 d020 	ldr.w	sp, [r7, #32]
   1a72e:	3b01      	subs	r3, #1
   1a730:	65fb      	str	r3, [r7, #92]	; 0x5c
   1a732:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a734:	eba3 030b 	sub.w	r3, r3, fp
   1a738:	643b      	str	r3, [r7, #64]	; 0x40
   1a73a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1a73c:	4413      	add	r3, r2
   1a73e:	63fb      	str	r3, [r7, #60]	; 0x3c
   1a740:	687a      	ldr	r2, [r7, #4]
   1a742:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1a744:	4413      	add	r3, r2
   1a746:	65bb      	str	r3, [r7, #88]	; 0x58
   1a748:	e64e      	b.n	1a3e8 <thornton_dbl+0x90>
   1a74a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1a74c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
   1a750:	4353      	muls	r3, r2
   1a752:	00db      	lsls	r3, r3, #3
   1a754:	4418      	add	r0, r3
   1a756:	e9d0 4500 	ldrd	r4, r5, [r0]
   1a75a:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1a75c:	4418      	add	r0, r3
   1a75e:	e9c0 4500 	strd	r4, r5, [r0]
   1a762:	6d78      	ldr	r0, [r7, #84]	; 0x54
   1a764:	4403      	add	r3, r0
   1a766:	e9c3 8900 	strd	r8, r9, [r3]
   1a76a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
   1a76e:	fb0b f302 	mul.w	r3, fp, r2
   1a772:	00db      	lsls	r3, r3, #3
   1a774:	18c5      	adds	r5, r0, r3
   1a776:	6d78      	ldr	r0, [r7, #84]	; 0x54
   1a778:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
   1a77c:	4403      	add	r3, r0
   1a77e:	2000      	movs	r0, #0
   1a780:	b206      	sxth	r6, r0
   1a782:	42b2      	cmp	r2, r6
   1a784:	dc01      	bgt.n	1a78a <thornton_dbl+0x432>
   1a786:	3101      	adds	r1, #1
   1a788:	e638      	b.n	1a3fc <thornton_dbl+0xa4>
   1a78a:	ecb5 7b02 	vldmia	r5!, {d7}
   1a78e:	6e7e      	ldr	r6, [r7, #100]	; 0x64
   1a790:	ed84 7b00 	vstr	d7, [r4]
   1a794:	3001      	adds	r0, #1
   1a796:	eca3 6b02 	vstmia	r3!, {d6}
   1a79a:	4434      	add	r4, r6
   1a79c:	e7f0      	b.n	1a780 <thornton_dbl+0x428>
   1a79e:	bf00      	nop

0001a7a0 <bierman_dbl>:
   1a7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a7a4:	ed2d 8b04 	vpush	{d8-d9}
   1a7a8:	eeb0 8a40 	vmov.f32	s16, s0
   1a7ac:	eef0 8a60 	vmov.f32	s17, s1
   1a7b0:	b095      	sub	sp, #84	; 0x54
   1a7b2:	af00      	add	r7, sp, #0
   1a7b4:	4682      	mov	sl, r0
   1a7b6:	62bb      	str	r3, [r7, #40]	; 0x28
   1a7b8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
   1a7bc:	637b      	str	r3, [r7, #52]	; 0x34
   1a7be:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
   1a7c2:	f10b 030e 	add.w	r3, fp, #14
   1a7c6:	08db      	lsrs	r3, r3, #3
   1a7c8:	00db      	lsls	r3, r3, #3
   1a7ca:	ebad 0d03 	sub.w	sp, sp, r3
   1a7ce:	466c      	mov	r4, sp
   1a7d0:	6079      	str	r1, [r7, #4]
   1a7d2:	ebad 0d03 	sub.w	sp, sp, r3
   1a7d6:	61ba      	str	r2, [r7, #24]
   1a7d8:	2000      	movs	r0, #0
   1a7da:	ec53 2b11 	vmov	r2, r3, d1
   1a7de:	4970      	ldr	r1, [pc, #448]	; (1a9a0 <bierman_dbl+0x200>)
   1a7e0:	f8c7 d044 	str.w	sp, [r7, #68]	; 0x44
   1a7e4:	ed87 1b0e 	vstr	d1, [r7, #56]	; 0x38
   1a7e8:	f006 fea2 	bl	21530 <__aeabi_ddiv>
   1a7ec:	ed9f 9b6a 	vldr	d9, [pc, #424]	; 1a998 <bierman_dbl+0x1f8>
   1a7f0:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
   1a7f4:	eb0a 030b 	add.w	r3, sl, fp
   1a7f8:	627c      	str	r4, [r7, #36]	; 0x24
   1a7fa:	643b      	str	r3, [r7, #64]	; 0x40
   1a7fc:	4626      	mov	r6, r4
   1a7fe:	2500      	movs	r5, #0
   1a800:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1a802:	b2ab      	uxth	r3, r5
   1a804:	429a      	cmp	r2, r3
   1a806:	d820      	bhi.n	1a84a <bierman_dbl+0xaa>
   1a808:	f10b 0308 	add.w	r3, fp, #8
   1a80c:	61fb      	str	r3, [r7, #28]
   1a80e:	f8d7 a028 	ldr.w	sl, [r7, #40]	; 0x28
   1a812:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1a814:	633b      	str	r3, [r7, #48]	; 0x30
   1a816:	eb04 060b 	add.w	r6, r4, fp
   1a81a:	461d      	mov	r5, r3
   1a81c:	46d0      	mov	r8, sl
   1a81e:	42b4      	cmp	r4, r6
   1a820:	d12e      	bne.n	1a880 <bierman_dbl+0xe0>
   1a822:	2300      	movs	r3, #0
   1a824:	6c7c      	ldr	r4, [r7, #68]	; 0x44
   1a826:	643b      	str	r3, [r7, #64]	; 0x40
   1a828:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
   1a82c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1a82e:	429a      	cmp	r2, r3
   1a830:	d831      	bhi.n	1a896 <bierman_dbl+0xf6>
   1a832:	687e      	ldr	r6, [r7, #4]
   1a834:	eb06 0a0b 	add.w	sl, r6, fp
   1a838:	4556      	cmp	r6, sl
   1a83a:	f040 8095 	bne.w	1a968 <bierman_dbl+0x1c8>
   1a83e:	3754      	adds	r7, #84	; 0x54
   1a840:	46bd      	mov	sp, r7
   1a842:	ecbd 8b04 	vpop	{d8-d9}
   1a846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a84a:	69bb      	ldr	r3, [r7, #24]
   1a84c:	eca6 9b02 	vstmia	r6!, {d9}
   1a850:	eb03 09c5 	add.w	r9, r3, r5, lsl #3
   1a854:	46d0      	mov	r8, sl
   1a856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a858:	4598      	cmp	r8, r3
   1a85a:	d101      	bne.n	1a860 <bierman_dbl+0xc0>
   1a85c:	3501      	adds	r5, #1
   1a85e:	e7cf      	b.n	1a800 <bierman_dbl+0x60>
   1a860:	e9d9 2300 	ldrd	r2, r3, [r9]
   1a864:	e8f8 0102 	ldrd	r0, r1, [r8], #8
   1a868:	f006 fd38 	bl	212dc <__aeabi_dmul>
   1a86c:	4602      	mov	r2, r0
   1a86e:	460b      	mov	r3, r1
   1a870:	e956 0102 	ldrd	r0, r1, [r6, #-8]
   1a874:	f006 fb7c 	bl	20f70 <__adddf3>
   1a878:	44d9      	add	r9, fp
   1a87a:	e946 0102 	strd	r0, r1, [r6, #-8]
   1a87e:	e7ea      	b.n	1a856 <bierman_dbl+0xb6>
   1a880:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   1a884:	e9d8 0100 	ldrd	r0, r1, [r8]
   1a888:	f006 fd28 	bl	212dc <__aeabi_dmul>
   1a88c:	69fb      	ldr	r3, [r7, #28]
   1a88e:	e8e5 0102 	strd	r0, r1, [r5], #8
   1a892:	4498      	add	r8, r3
   1a894:	e7c3      	b.n	1a81e <bierman_dbl+0x7e>
   1a896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a898:	e8f3 8902 	ldrd	r8, r9, [r3], #8
   1a89c:	627b      	str	r3, [r7, #36]	; 0x24
   1a89e:	f104 0308 	add.w	r3, r4, #8
   1a8a2:	623b      	str	r3, [r7, #32]
   1a8a4:	4640      	mov	r0, r8
   1a8a6:	e9d4 2300 	ldrd	r2, r3, [r4]
   1a8aa:	4649      	mov	r1, r9
   1a8ac:	f006 fd16 	bl	212dc <__aeabi_dmul>
   1a8b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
   1a8b4:	f006 fb5c 	bl	20f70 <__adddf3>
   1a8b8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   1a8bc:	617b      	str	r3, [r7, #20]
   1a8be:	f8c7 8010 	str.w	r8, [r7, #16]
   1a8c2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
   1a8c6:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
   1a8ca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   1a8ce:	f006 fd05 	bl	212dc <__aeabi_dmul>
   1a8d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   1a8d6:	e9c7 0102 	strd	r0, r1, [r7, #8]
   1a8da:	2000      	movs	r0, #0
   1a8dc:	4930      	ldr	r1, [pc, #192]	; (1a9a0 <bierman_dbl+0x200>)
   1a8de:	f006 fe27 	bl	21530 <__aeabi_ddiv>
   1a8e2:	4602      	mov	r2, r0
   1a8e4:	460b      	mov	r3, r1
   1a8e6:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
   1a8ea:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
   1a8ee:	f006 fcf5 	bl	212dc <__aeabi_dmul>
   1a8f2:	4602      	mov	r2, r0
   1a8f4:	460b      	mov	r3, r1
   1a8f6:	e9da 0100 	ldrd	r0, r1, [sl]
   1a8fa:	f006 fcef 	bl	212dc <__aeabi_dmul>
   1a8fe:	69bb      	ldr	r3, [r7, #24]
   1a900:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1a902:	6c7d      	ldr	r5, [r7, #68]	; 0x44
   1a904:	e9ca 0100 	strd	r0, r1, [sl]
   1a908:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
   1a90c:	42a5      	cmp	r5, r4
   1a90e:	d10a      	bne.n	1a926 <bierman_dbl+0x186>
   1a910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a912:	6a3c      	ldr	r4, [r7, #32]
   1a914:	3301      	adds	r3, #1
   1a916:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
   1a91a:	643b      	str	r3, [r7, #64]	; 0x40
   1a91c:	69fb      	ldr	r3, [r7, #28]
   1a91e:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
   1a922:	449a      	add	sl, r3
   1a924:	e780      	b.n	1a828 <bierman_dbl+0x88>
   1a926:	e9d5 8900 	ldrd	r8, r9, [r5]
   1a92a:	ed96 7b00 	vldr	d7, [r6]
   1a92e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1a932:	4640      	mov	r0, r8
   1a934:	4649      	mov	r1, r9
   1a936:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
   1a93a:	f006 fccf 	bl	212dc <__aeabi_dmul>
   1a93e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
   1a942:	f006 fb15 	bl	20f70 <__adddf3>
   1a946:	6a3b      	ldr	r3, [r7, #32]
   1a948:	e9c6 0100 	strd	r0, r1, [r6]
   1a94c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   1a950:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
   1a954:	f006 fcc2 	bl	212dc <__aeabi_dmul>
   1a958:	4642      	mov	r2, r8
   1a95a:	464b      	mov	r3, r9
   1a95c:	f006 fb08 	bl	20f70 <__adddf3>
   1a960:	445e      	add	r6, fp
   1a962:	e8e5 0102 	strd	r0, r1, [r5], #8
   1a966:	e7d1      	b.n	1a90c <bierman_dbl+0x16c>
   1a968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a96a:	e8f3 8902 	ldrd	r8, r9, [r3], #8
   1a96e:	e9d6 4500 	ldrd	r4, r5, [r6]
   1a972:	633b      	str	r3, [r7, #48]	; 0x30
   1a974:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
   1a978:	ec53 2b18 	vmov	r2, r3, d8
   1a97c:	f006 fcae 	bl	212dc <__aeabi_dmul>
   1a980:	4642      	mov	r2, r8
   1a982:	464b      	mov	r3, r9
   1a984:	f006 fcaa 	bl	212dc <__aeabi_dmul>
   1a988:	4622      	mov	r2, r4
   1a98a:	462b      	mov	r3, r5
   1a98c:	f006 faf0 	bl	20f70 <__adddf3>
   1a990:	e8e6 0102 	strd	r0, r1, [r6], #8
   1a994:	e750      	b.n	1a838 <bierman_dbl+0x98>
   1a996:	bf00      	nop
	...
   1a9a0:	3ff00000 	.word	0x3ff00000
   1a9a4:	00000000 	.word	0x00000000

0001a9a8 <rx_complete_cb>:
 */
static bool
rx_complete_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
    struct uwb_rng_txd txd;
    if (inst->fctrl != FCNTL_IEEE_RANGE_16)
   1a9a8:	f8b0 24e0 	ldrh.w	r2, [r0, #1248]	; 0x4e0
   1a9ac:	f648 0341 	movw	r3, #34881	; 0x8841
   1a9b0:	429a      	cmp	r2, r3
   1a9b2:	f040 8210 	bne.w	1add6 <rx_complete_cb+0x42e>
{
   1a9b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a9ba:	b089      	sub	sp, #36	; 0x24
   1a9bc:	4604      	mov	r4, r0
        return false;

    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
   1a9be:	684d      	ldr	r5, [r1, #4]
    assert(rng);
   1a9c0:	b18d      	cbz	r5, 1a9e6 <rx_complete_cb+0x3e>
   1a9c2:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
    if(dpl_sem_get_count(&rng->sem) == 1) {
   1a9c6:	2b01      	cmp	r3, #1
   1a9c8:	f000 8207 	beq.w	1adda <rx_complete_cb+0x432>
        // unsolicited inbound
        return false;
    }

    switch(rng->code){
   1a9cc:	f8b5 304c 	ldrh.w	r3, [r5, #76]	; 0x4c
   1a9d0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
   1a9d4:	2b03      	cmp	r3, #3
   1a9d6:	f200 8204 	bhi.w	1ade2 <rx_complete_cb+0x43a>
   1a9da:	e8df f013 	tbh	[pc, r3, lsl #1]
   1a9de:	000a      	.short	0x000a
   1a9e0:	015b009f 	.word	0x015b009f
   1a9e4:	01ef      	.short	0x01ef
    assert(rng);
   1a9e6:	2300      	movs	r3, #0
   1a9e8:	461a      	mov	r2, r3
   1a9ea:	4619      	mov	r1, r3
   1a9ec:	4618      	mov	r0, r3
   1a9ee:	f7ee fb2d 	bl	904c <__assert_func>
       case UWB_DATA_CODE_DS_TWR:
            {
                // This code executes on the device that is responding to a original request
                twr_frame_t * frame = rng->frames[(rng->idx)%rng->nframes];  // Frame already read within loader layers.
   1a9f2:	f8b5 3076 	ldrh.w	r3, [r5, #118]	; 0x76
   1a9f6:	f8b5 207a 	ldrh.w	r2, [r5, #122]	; 0x7a
   1a9fa:	fbb3 f1f2 	udiv	r1, r3, r2
   1a9fe:	fb02 3311 	mls	r3, r2, r1, r3
   1aa02:	b29b      	uxth	r3, r3
   1aa04:	3326      	adds	r3, #38	; 0x26
   1aa06:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   1aa0a:	685e      	ldr	r6, [r3, #4]

                if (inst->frame_len != sizeof(ieee_rng_request_frame_t))
   1aa0c:	f8b0 34e2 	ldrh.w	r3, [r0, #1250]	; 0x4e2
   1aa10:	2b0b      	cmp	r3, #11
   1aa12:	d001      	beq.n	1aa18 <rx_complete_cb+0x70>
            }
        default:
                return false;
                break;
    }
    return true;
   1aa14:	2001      	movs	r0, #1
   1aa16:	e1e1      	b.n	1addc <rx_complete_cb+0x434>
                uint64_t request_timestamp = inst->rxtimestamp;
   1aa18:	f8d0 74e8 	ldr.w	r7, [r0, #1256]	; 0x4e8
   1aa1c:	f8d0 24ec 	ldr.w	r2, [r0, #1260]	; 0x4ec
                uwb_rng_calc_rel_tx(rng, &txd, &g_config, request_timestamp, inst->frame_len);
   1aa20:	9302      	str	r3, [sp, #8]
   1aa22:	9700      	str	r7, [sp, #0]
   1aa24:	9201      	str	r2, [sp, #4]
   1aa26:	4aa4      	ldr	r2, [pc, #656]	; (1acb8 <rx_complete_cb+0x310>)
   1aa28:	a904      	add	r1, sp, #16
   1aa2a:	4628      	mov	r0, r5
   1aa2c:	f7f1 ff68 	bl	c900 <uwb_rng_calc_rel_tx>
                frame->reception_timestamp =  (uint32_t) (request_timestamp & 0xFFFFFFFFUL);
   1aa30:	f8c6 700b 	str.w	r7, [r6, #11]
                frame->transmission_timestamp =  (uint32_t) (txd.response_timestamp & 0xFFFFFFFFUL);
   1aa34:	9b06      	ldr	r3, [sp, #24]
   1aa36:	f8c6 300f 	str.w	r3, [r6, #15]
                frame->dst_address = frame->src_address;
   1aa3a:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   1aa3e:	f8a6 3005 	strh.w	r3, [r6, #5]
                frame->src_address = inst->my_short_address;
   1aa42:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
   1aa46:	f8a6 3007 	strh.w	r3, [r6, #7]
                frame->carrier_integrator  = 0.0l;
   1aa4a:	2700      	movs	r7, #0
   1aa4c:	76f7      	strb	r7, [r6, #27]
   1aa4e:	7737      	strb	r7, [r6, #28]
   1aa50:	7777      	strb	r7, [r6, #29]
   1aa52:	77b7      	strb	r7, [r6, #30]
                frame->code = UWB_DATA_CODE_DS_TWR_T1;
   1aa54:	2321      	movs	r3, #33	; 0x21
   1aa56:	7273      	strb	r3, [r6, #9]
   1aa58:	2301      	movs	r3, #1
   1aa5a:	72b3      	strb	r3, [r6, #10]
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
   1aa5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1aa5e:	f8d3 8044 	ldr.w	r8, [r3, #68]	; 0x44
   1aa62:	2313      	movs	r3, #19
   1aa64:	463a      	mov	r2, r7
   1aa66:	4631      	mov	r1, r6
   1aa68:	4620      	mov	r0, r4
   1aa6a:	47c0      	blx	r8
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
   1aa6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1aa6e:	6c9e      	ldr	r6, [r3, #72]	; 0x48
   1aa70:	463b      	mov	r3, r7
   1aa72:	463a      	mov	r2, r7
   1aa74:	2113      	movs	r1, #19
   1aa76:	4620      	mov	r0, r4
   1aa78:	47b0      	blx	r6
    return (dev->uw_funcs->uf_set_wait4resp(dev, enable));
   1aa7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1aa7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1aa7e:	2101      	movs	r1, #1
   1aa80:	4620      	mov	r0, r4
   1aa82:	4798      	blx	r3
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
   1aa84:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1aa86:	6b59      	ldr	r1, [r3, #52]	; 0x34
   1aa88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1aa8c:	4620      	mov	r0, r4
   1aa8e:	4788      	blx	r1
    return (dev->uw_funcs->uf_set_rxauto_disable(dev, disable));
   1aa90:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1aa92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1aa94:	2101      	movs	r1, #1
   1aa96:	4620      	mov	r0, r4
   1aa98:	4798      	blx	r3
    return (dev->uw_funcs->uf_start_tx(dev));
   1aa9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1aa9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1aa9e:	4620      	mov	r0, r4
   1aaa0:	4798      	blx	r3
                if (uwb_start_tx(inst).start_tx_error){
   1aaa2:	f010 0f04 	tst.w	r0, #4
   1aaa6:	d130      	bne.n	1ab0a <rx_complete_cb+0x162>
                uwb_set_wait4resp_delay(inst, g_config.tx_holdoff_delay -
   1aaa8:	4d83      	ldr	r5, [pc, #524]	; (1acb8 <rx_complete_cb+0x310>)
   1aaaa:	6869      	ldr	r1, [r5, #4]
                                        inst->config.rx.timeToRxStable);
   1aaac:	f894 251b 	ldrb.w	r2, [r4, #1307]	; 0x51b
    return (dev->uw_funcs->uf_set_wait4resp_delay(dev, delay));
   1aab0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1aab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   1aab4:	1a89      	subs	r1, r1, r2
   1aab6:	4620      	mov	r0, r4
   1aab8:	4798      	blx	r3
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
   1aaba:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1aabc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1aabe:	2113      	movs	r1, #19
   1aac0:	4620      	mov	r0, r4
   1aac2:	4798      	blx	r3
                uwb_set_rx_timeout(inst, uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst, sizeof(ieee_rng_response_frame_t))) +
   1aac4:	f006 fba0 	bl	21208 <__aeabi_i2d>
   1aac8:	a379      	add	r3, pc, #484	; (adr r3, 1acb0 <rx_complete_cb+0x308>)
   1aaca:	e9d3 2300 	ldrd	r2, r3, [r3]
   1aace:	f006 fd2f 	bl	21530 <__aeabi_ddiv>
   1aad2:	4606      	mov	r6, r0
   1aad4:	460f      	mov	r7, r1
   1aad6:	89a8      	ldrh	r0, [r5, #12]
   1aad8:	f006 fb96 	bl	21208 <__aeabi_i2d>
   1aadc:	4632      	mov	r2, r6
   1aade:	463b      	mov	r3, r7
   1aae0:	f006 fa46 	bl	20f70 <__adddf3>
   1aae4:	4606      	mov	r6, r0
   1aae6:	460f      	mov	r7, r1
                                   g_config.rx_timeout_delay + inst->config.rx.timeToRxStable);
   1aae8:	f894 051b 	ldrb.w	r0, [r4, #1307]	; 0x51b
   1aaec:	f006 fb8c 	bl	21208 <__aeabi_i2d>
   1aaf0:	4632      	mov	r2, r6
   1aaf2:	463b      	mov	r3, r7
   1aaf4:	f006 fa3c 	bl	20f70 <__adddf3>
                uwb_set_rx_timeout(inst, uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst, sizeof(ieee_rng_response_frame_t))) +
   1aaf8:	f006 fec8 	bl	2188c <__aeabi_d2uiz>
   1aafc:	4601      	mov	r1, r0
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
   1aafe:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ab00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1ab02:	4620      	mov	r0, r4
   1ab04:	4798      	blx	r3
    return true;
   1ab06:	2001      	movs	r0, #1
                break;
   1ab08:	e168      	b.n	1addc <rx_complete_cb+0x434>
                    DS_STATS_INC(start_tx_error);
   1ab0a:	4a6c      	ldr	r2, [pc, #432]	; (1acbc <rx_complete_cb+0x314>)
   1ab0c:	6993      	ldr	r3, [r2, #24]
   1ab0e:	3301      	adds	r3, #1
   1ab10:	6193      	str	r3, [r2, #24]
    return (dpl_error_t)os_sem_release(&sem->sem);
   1ab12:	f105 0050 	add.w	r0, r5, #80	; 0x50
   1ab16:	f7ef f9b9 	bl	9e8c <os_sem_release>
   1ab1a:	e7c5      	b.n	1aaa8 <rx_complete_cb+0x100>
                if(inst->status.lde_error)
   1ab1c:	f890 3509 	ldrb.w	r3, [r0, #1289]	; 0x509
   1ab20:	f013 0f04 	tst.w	r3, #4
   1ab24:	f040 815f 	bne.w	1ade6 <rx_complete_cb+0x43e>
                if (inst->frame_len != sizeof(ieee_rng_response_frame_t))
   1ab28:	f8b0 34e2 	ldrh.w	r3, [r0, #1250]	; 0x4e2
   1ab2c:	2b13      	cmp	r3, #19
   1ab2e:	d001      	beq.n	1ab34 <rx_complete_cb+0x18c>
    return true;
   1ab30:	2001      	movs	r0, #1
   1ab32:	e153      	b.n	1addc <rx_complete_cb+0x434>
                twr_frame_t * frame = rng->frames[(rng->idx)%rng->nframes];
   1ab34:	f8b5 3076 	ldrh.w	r3, [r5, #118]	; 0x76
   1ab38:	f8b5 107a 	ldrh.w	r1, [r5, #122]	; 0x7a
   1ab3c:	fbb3 f2f1 	udiv	r2, r3, r1
   1ab40:	fb01 3212 	mls	r2, r1, r2, r3
   1ab44:	b292      	uxth	r2, r2
   1ab46:	3226      	adds	r2, #38	; 0x26
   1ab48:	eb05 0282 	add.w	r2, r5, r2, lsl #2
   1ab4c:	6856      	ldr	r6, [r2, #4]
                twr_frame_t * next_frame = rng->frames[(rng->idx+1)%rng->nframes];
   1ab4e:	3301      	adds	r3, #1
   1ab50:	fb93 f2f1 	sdiv	r2, r3, r1
   1ab54:	fb01 3312 	mls	r3, r1, r2, r3
   1ab58:	3326      	adds	r3, #38	; 0x26
   1ab5a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   1ab5e:	685f      	ldr	r7, [r3, #4]
                uint64_t request_timestamp = inst->rxtimestamp;
   1ab60:	f8d0 84e8 	ldr.w	r8, [r0, #1256]	; 0x4e8
   1ab64:	f8d0 94ec 	ldr.w	r9, [r0, #1260]	; 0x4ec
    return (dev->uw_funcs->uf_read_txtime_lo32(dev));
   1ab68:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1ab6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   1ab6c:	4798      	blx	r3
                frame->request_timestamp = next_frame->request_timestamp = uwb_read_txtime_lo32(inst); // This corresponds to when the original request was actually sent
   1ab6e:	f8c7 0013 	str.w	r0, [r7, #19]
   1ab72:	f8c6 0013 	str.w	r0, [r6, #19]
                frame->response_timestamp = next_frame->response_timestamp = (uint32_t)(request_timestamp & 0xFFFFFFFFUL); // This corresponds to the response just received
   1ab76:	f8c7 8017 	str.w	r8, [r7, #23]
   1ab7a:	f8c6 8017 	str.w	r8, [r6, #23]
                uint16_t src_address = frame->src_address;
   1ab7e:	f8b6 1007 	ldrh.w	r1, [r6, #7]
                uint8_t seq_num = frame->seq_num;
   1ab82:	78b2      	ldrb	r2, [r6, #2]
                frame->carrier_integrator  = 0.0l;
   1ab84:	2300      	movs	r3, #0
   1ab86:	76f3      	strb	r3, [r6, #27]
   1ab88:	7733      	strb	r3, [r6, #28]
   1ab8a:	7773      	strb	r3, [r6, #29]
   1ab8c:	77b3      	strb	r3, [r6, #30]
                frame->dst_address = src_address;
   1ab8e:	f8a7 1005 	strh.w	r1, [r7, #5]
                frame->src_address = inst->my_short_address;
   1ab92:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
   1ab96:	f8a7 3007 	strh.w	r3, [r7, #7]
                frame->seq_num = seq_num + 1;
   1ab9a:	1c53      	adds	r3, r2, #1
   1ab9c:	70bb      	strb	r3, [r7, #2]
                frame->code = UWB_DATA_CODE_DS_TWR_T2;
   1ab9e:	2322      	movs	r3, #34	; 0x22
   1aba0:	727b      	strb	r3, [r7, #9]
   1aba2:	2301      	movs	r3, #1
   1aba4:	72bb      	strb	r3, [r7, #10]
                if(inst->status.lde_error)
   1aba6:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   1abaa:	f013 0f04 	tst.w	r3, #4
   1abae:	d001      	beq.n	1abb4 <rx_complete_cb+0x20c>
    return true;
   1abb0:	2001      	movs	r0, #1
   1abb2:	e113      	b.n	1addc <rx_complete_cb+0x434>
                uwb_rng_calc_rel_tx(rng, &txd, &g_config, request_timestamp, inst->frame_len);
   1abb4:	f8b4 34e2 	ldrh.w	r3, [r4, #1250]	; 0x4e2
   1abb8:	9302      	str	r3, [sp, #8]
   1abba:	f8cd 8000 	str.w	r8, [sp]
   1abbe:	f8cd 9004 	str.w	r9, [sp, #4]
   1abc2:	4a3d      	ldr	r2, [pc, #244]	; (1acb8 <rx_complete_cb+0x310>)
   1abc4:	a904      	add	r1, sp, #16
   1abc6:	4628      	mov	r0, r5
   1abc8:	f7f1 fe9a 	bl	c900 <uwb_rng_calc_rel_tx>
                frame->reception_timestamp =  (uint32_t) (request_timestamp & 0xFFFFFFFFUL);
   1abcc:	f8c7 800b 	str.w	r8, [r7, #11]
                frame->transmission_timestamp =  (uint32_t) (txd.response_timestamp & 0xFFFFFFFFUL);
   1abd0:	9b06      	ldr	r3, [sp, #24]
   1abd2:	f8c7 300f 	str.w	r3, [r7, #15]
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
   1abd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1abd8:	6c5e      	ldr	r6, [r3, #68]	; 0x44
   1abda:	231f      	movs	r3, #31
   1abdc:	2200      	movs	r2, #0
   1abde:	4639      	mov	r1, r7
   1abe0:	4620      	mov	r0, r4
   1abe2:	47b0      	blx	r6
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
   1abe4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1abe6:	6c9e      	ldr	r6, [r3, #72]	; 0x48
   1abe8:	2300      	movs	r3, #0
   1abea:	461a      	mov	r2, r3
   1abec:	211f      	movs	r1, #31
   1abee:	4620      	mov	r0, r4
   1abf0:	47b0      	blx	r6
    return (dev->uw_funcs->uf_set_wait4resp(dev, enable));
   1abf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1abf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1abf6:	2101      	movs	r1, #1
   1abf8:	4620      	mov	r0, r4
   1abfa:	4798      	blx	r3
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
   1abfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1abfe:	6b59      	ldr	r1, [r3, #52]	; 0x34
   1ac00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1ac04:	4620      	mov	r0, r4
   1ac06:	4788      	blx	r1
    return (dev->uw_funcs->uf_set_rxauto_disable(dev, disable));
   1ac08:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ac0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1ac0c:	2101      	movs	r1, #1
   1ac0e:	4620      	mov	r0, r4
   1ac10:	4798      	blx	r3
    return (dev->uw_funcs->uf_start_tx(dev));
   1ac12:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ac14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1ac16:	4620      	mov	r0, r4
   1ac18:	4798      	blx	r3
                if (uwb_start_tx(inst).start_tx_error){
   1ac1a:	f010 0f04 	tst.w	r0, #4
   1ac1e:	d130      	bne.n	1ac82 <rx_complete_cb+0x2da>
                uwb_set_wait4resp_delay(inst, g_config.tx_holdoff_delay -
   1ac20:	4d25      	ldr	r5, [pc, #148]	; (1acb8 <rx_complete_cb+0x310>)
   1ac22:	6869      	ldr	r1, [r5, #4]
                                        inst->config.rx.timeToRxStable);
   1ac24:	f894 251b 	ldrb.w	r2, [r4, #1307]	; 0x51b
    return (dev->uw_funcs->uf_set_wait4resp_delay(dev, delay));
   1ac28:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ac2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   1ac2c:	1a89      	subs	r1, r1, r2
   1ac2e:	4620      	mov	r0, r4
   1ac30:	4798      	blx	r3
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
   1ac32:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ac34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1ac36:	211f      	movs	r1, #31
   1ac38:	4620      	mov	r0, r4
   1ac3a:	4798      	blx	r3
                uwb_set_rx_timeout(inst, uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst, sizeof(twr_frame_final_t))) +
   1ac3c:	f006 fae4 	bl	21208 <__aeabi_i2d>
   1ac40:	a31b      	add	r3, pc, #108	; (adr r3, 1acb0 <rx_complete_cb+0x308>)
   1ac42:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ac46:	f006 fc73 	bl	21530 <__aeabi_ddiv>
   1ac4a:	4606      	mov	r6, r0
   1ac4c:	460f      	mov	r7, r1
   1ac4e:	89a8      	ldrh	r0, [r5, #12]
   1ac50:	f006 fada 	bl	21208 <__aeabi_i2d>
   1ac54:	4632      	mov	r2, r6
   1ac56:	463b      	mov	r3, r7
   1ac58:	f006 f98a 	bl	20f70 <__adddf3>
   1ac5c:	4606      	mov	r6, r0
   1ac5e:	460f      	mov	r7, r1
                                   g_config.rx_timeout_delay + inst->config.rx.timeToRxStable);
   1ac60:	f894 051b 	ldrb.w	r0, [r4, #1307]	; 0x51b
   1ac64:	f006 fad0 	bl	21208 <__aeabi_i2d>
   1ac68:	4632      	mov	r2, r6
   1ac6a:	463b      	mov	r3, r7
   1ac6c:	f006 f980 	bl	20f70 <__adddf3>
                uwb_set_rx_timeout(inst, uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst, sizeof(twr_frame_final_t))) +
   1ac70:	f006 fe0c 	bl	2188c <__aeabi_d2uiz>
   1ac74:	4601      	mov	r1, r0
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
   1ac76:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ac78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1ac7a:	4620      	mov	r0, r4
   1ac7c:	4798      	blx	r3
    return true;
   1ac7e:	2001      	movs	r0, #1
                break;
   1ac80:	e0ac      	b.n	1addc <rx_complete_cb+0x434>
                    DS_STATS_INC(start_tx_error);
   1ac82:	4a0e      	ldr	r2, [pc, #56]	; (1acbc <rx_complete_cb+0x314>)
   1ac84:	6993      	ldr	r3, [r2, #24]
   1ac86:	3301      	adds	r3, #1
   1ac88:	6193      	str	r3, [r2, #24]
   1ac8a:	f105 0050 	add.w	r0, r5, #80	; 0x50
   1ac8e:	f7ef f8fd 	bl	9e8c <os_sem_release>
   1ac92:	e7c5      	b.n	1ac20 <rx_complete_cb+0x278>
                if(inst->status.lde_error)
   1ac94:	f890 3509 	ldrb.w	r3, [r0, #1289]	; 0x509
   1ac98:	f013 0f04 	tst.w	r3, #4
   1ac9c:	f040 80a5 	bne.w	1adea <rx_complete_cb+0x442>
                if (inst->frame_len != sizeof(twr_frame_final_t))
   1aca0:	f8b0 34e2 	ldrh.w	r3, [r0, #1250]	; 0x4e2
   1aca4:	2b1f      	cmp	r3, #31
   1aca6:	d00b      	beq.n	1acc0 <rx_complete_cb+0x318>
    return true;
   1aca8:	2001      	movs	r0, #1
   1acaa:	e097      	b.n	1addc <rx_complete_cb+0x434>
   1acac:	f3af 8000 	nop.w
   1acb0:	90690691 	.word	0x90690691
   1acb4:	3ff06906 	.word	0x3ff06906
   1acb8:	20000db4 	.word	0x20000db4
   1acbc:	200045c8 	.word	0x200045c8
                twr_frame_t * previous_frame = rng->frames[(uint16_t)(rng->idx-1)%rng->nframes];
   1acc0:	f8b5 2076 	ldrh.w	r2, [r5, #118]	; 0x76
   1acc4:	1e53      	subs	r3, r2, #1
   1acc6:	b29b      	uxth	r3, r3
   1acc8:	f8b5 107a 	ldrh.w	r1, [r5, #122]	; 0x7a
   1accc:	fbb3 f0f1 	udiv	r0, r3, r1
   1acd0:	fb01 3310 	mls	r3, r1, r0, r3
   1acd4:	b29b      	uxth	r3, r3
   1acd6:	3326      	adds	r3, #38	; 0x26
   1acd8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   1acdc:	6858      	ldr	r0, [r3, #4]
                twr_frame_t * frame = rng->frames[(rng->idx)%rng->nframes];
   1acde:	fbb2 f3f1 	udiv	r3, r2, r1
   1ace2:	fb01 2313 	mls	r3, r1, r3, r2
   1ace6:	b29b      	uxth	r3, r3
   1ace8:	3326      	adds	r3, #38	; 0x26
   1acea:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   1acee:	685e      	ldr	r6, [r3, #4]
                previous_frame->request_timestamp = frame->request_timestamp;
   1acf0:	f8d6 3013 	ldr.w	r3, [r6, #19]
   1acf4:	f8c0 3013 	str.w	r3, [r0, #19]
                previous_frame->response_timestamp = frame->response_timestamp;
   1acf8:	f8d6 3017 	ldr.w	r3, [r6, #23]
   1acfc:	f8c0 3017 	str.w	r3, [r0, #23]
                uint64_t request_timestamp = inst->rxtimestamp;
   1ad00:	f504 689e 	add.w	r8, r4, #1264	; 0x4f0
   1ad04:	f8d4 74e8 	ldr.w	r7, [r4, #1256]	; 0x4e8
    return (dev->uw_funcs->uf_read_txtime_lo32(dev));
   1ad08:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ad0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   1ad0c:	4620      	mov	r0, r4
   1ad0e:	4798      	blx	r3
                frame->request_timestamp = uwb_read_txtime_lo32(inst);   // This corresponds to when the original request was actually sent
   1ad10:	f8c6 0013 	str.w	r0, [r6, #19]
                frame->response_timestamp = (uint32_t) (request_timestamp & 0xFFFFFFFFUL);  // This corresponds to the response just received
   1ad14:	f8c6 7017 	str.w	r7, [r6, #23]
                frame->dst_address = frame->src_address;
   1ad18:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   1ad1c:	f8a6 3005 	strh.w	r3, [r6, #5]
                frame->src_address = inst->my_short_address;
   1ad20:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
   1ad24:	f8a6 3007 	strh.w	r3, [r6, #7]
                frame->carrier_integrator  = 0.0l;
   1ad28:	2700      	movs	r7, #0
   1ad2a:	76f7      	strb	r7, [r6, #27]
   1ad2c:	7737      	strb	r7, [r6, #28]
   1ad2e:	7777      	strb	r7, [r6, #29]
   1ad30:	77b7      	strb	r7, [r6, #30]
                frame->code = UWB_DATA_CODE_DS_TWR_FINAL;
   1ad32:	2323      	movs	r3, #35	; 0x23
   1ad34:	7273      	strb	r3, [r6, #9]
   1ad36:	2301      	movs	r3, #1
   1ad38:	72b3      	strb	r3, [r6, #10]
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
   1ad3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ad3c:	f8d3 9044 	ldr.w	r9, [r3, #68]	; 0x44
   1ad40:	231f      	movs	r3, #31
   1ad42:	463a      	mov	r2, r7
   1ad44:	4631      	mov	r1, r6
   1ad46:	4620      	mov	r0, r4
   1ad48:	47c8      	blx	r9
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
   1ad4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ad4c:	6c9e      	ldr	r6, [r3, #72]	; 0x48
   1ad4e:	463b      	mov	r3, r7
   1ad50:	463a      	mov	r2, r7
   1ad52:	211f      	movs	r1, #31
   1ad54:	4620      	mov	r0, r4
   1ad56:	47b0      	blx	r6
                uwb_rng_calc_rel_tx(rng, &txd, &g_config, inst->rxtimestamp, inst->frame_len);
   1ad58:	f8b4 34e2 	ldrh.w	r3, [r4, #1250]	; 0x4e2
   1ad5c:	9302      	str	r3, [sp, #8]
   1ad5e:	e958 2302 	ldrd	r2, r3, [r8, #-8]
   1ad62:	e9cd 2300 	strd	r2, r3, [sp]
   1ad66:	4a22      	ldr	r2, [pc, #136]	; (1adf0 <rx_complete_cb+0x448>)
   1ad68:	a904      	add	r1, sp, #16
   1ad6a:	4628      	mov	r0, r5
   1ad6c:	f7f1 fdc8 	bl	c900 <uwb_rng_calc_rel_tx>
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
   1ad70:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ad72:	6b59      	ldr	r1, [r3, #52]	; 0x34
   1ad74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1ad78:	4620      	mov	r0, r4
   1ad7a:	4788      	blx	r1
    return (dev->uw_funcs->uf_start_tx(dev));
   1ad7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ad7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1ad80:	4620      	mov	r0, r4
   1ad82:	4798      	blx	r3
                if (uwb_start_tx(inst).start_tx_error) {
   1ad84:	f010 0f04 	tst.w	r0, #4
   1ad88:	d10b      	bne.n	1ada2 <rx_complete_cb+0x3fa>
                    DS_STATS_INC(complete);
   1ad8a:	4a1a      	ldr	r2, [pc, #104]	; (1adf4 <rx_complete_cb+0x44c>)
   1ad8c:	6953      	ldr	r3, [r2, #20]
   1ad8e:	3301      	adds	r3, #1
   1ad90:	6153      	str	r3, [r2, #20]
                    rng->control.complete_after_tx = 1;
   1ad92:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
   1ad96:	f043 0302 	orr.w	r3, r3, #2
   1ad9a:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
    return true;
   1ad9e:	2001      	movs	r0, #1
   1ada0:	e01c      	b.n	1addc <rx_complete_cb+0x434>
                    DS_STATS_INC(start_tx_error);
   1ada2:	4a14      	ldr	r2, [pc, #80]	; (1adf4 <rx_complete_cb+0x44c>)
   1ada4:	6993      	ldr	r3, [r2, #24]
   1ada6:	3301      	adds	r3, #1
   1ada8:	6193      	str	r3, [r2, #24]
   1adaa:	f105 0050 	add.w	r0, r5, #80	; 0x50
   1adae:	f7ef f86d 	bl	9e8c <os_sem_release>
                    rng_issue_complete(inst);
   1adb2:	4620      	mov	r0, r4
   1adb4:	f7f1 fff4 	bl	cda0 <rng_issue_complete>
    return true;
   1adb8:	2001      	movs	r0, #1
   1adba:	e00f      	b.n	1addc <rx_complete_cb+0x434>
                DS_STATS_INC(complete);
   1adbc:	4a0d      	ldr	r2, [pc, #52]	; (1adf4 <rx_complete_cb+0x44c>)
   1adbe:	6953      	ldr	r3, [r2, #20]
   1adc0:	3301      	adds	r3, #1
   1adc2:	6153      	str	r3, [r2, #20]
   1adc4:	f105 0050 	add.w	r0, r5, #80	; 0x50
   1adc8:	f7ef f860 	bl	9e8c <os_sem_release>
                rng_issue_complete(inst);
   1adcc:	4620      	mov	r0, r4
   1adce:	f7f1 ffe7 	bl	cda0 <rng_issue_complete>
    return true;
   1add2:	2001      	movs	r0, #1
                break;
   1add4:	e002      	b.n	1addc <rx_complete_cb+0x434>
        return false;
   1add6:	2000      	movs	r0, #0
}
   1add8:	4770      	bx	lr
        return false;
   1adda:	2000      	movs	r0, #0
}
   1addc:	b009      	add	sp, #36	; 0x24
   1adde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch(rng->code){
   1ade2:	2000      	movs	r0, #0
   1ade4:	e7fa      	b.n	1addc <rx_complete_cb+0x434>
    return true;
   1ade6:	2001      	movs	r0, #1
   1ade8:	e7f8      	b.n	1addc <rx_complete_cb+0x434>
   1adea:	2001      	movs	r0, #1
   1adec:	e7f6      	b.n	1addc <rx_complete_cb+0x434>
   1adee:	bf00      	nop
   1adf0:	20000db4 	.word	0x20000db4
   1adf4:	200045c8 	.word	0x200045c8

0001adf8 <twr_ds_pkg_init>:
{
   1adf8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1adfa:	b083      	sub	sp, #12
    printf("{\"utime\": %"PRIu32",\"msg\": \"twr_ds_pkg_init\"}\n",
   1adfc:	f7f3 fa99 	bl	e332 <dpl_cputime_get32>
   1ae00:	4601      	mov	r1, r0
   1ae02:	481d      	ldr	r0, [pc, #116]	; (1ae78 <twr_ds_pkg_init+0x80>)
   1ae04:	f7f3 fa10 	bl	e228 <printf>
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   1ae08:	2400      	movs	r4, #0
   1ae0a:	b174      	cbz	r4, 1ae2a <twr_ds_pkg_init+0x32>
    rc = stats_init(
   1ae0c:	2202      	movs	r2, #2
   1ae0e:	9200      	str	r2, [sp, #0]
   1ae10:	4b1a      	ldr	r3, [pc, #104]	; (1ae7c <twr_ds_pkg_init+0x84>)
   1ae12:	2104      	movs	r1, #4
   1ae14:	481a      	ldr	r0, [pc, #104]	; (1ae80 <twr_ds_pkg_init+0x88>)
   1ae16:	f7f6 f87f 	bl	10f18 <stats_init>
    assert(rc == 0);
   1ae1a:	bb00      	cbnz	r0, 1ae5e <twr_ds_pkg_init+0x66>
    rc = stats_register("twr_ds", STATS_HDR(g_twr_ds_stat));
   1ae1c:	4918      	ldr	r1, [pc, #96]	; (1ae80 <twr_ds_pkg_init+0x88>)
   1ae1e:	4819      	ldr	r0, [pc, #100]	; (1ae84 <twr_ds_pkg_init+0x8c>)
   1ae20:	f7f6 f904 	bl	1102c <stats_register>
    assert(rc == 0);
   1ae24:	bb08      	cbnz	r0, 1ae6a <twr_ds_pkg_init+0x72>
}
   1ae26:	b003      	add	sp, #12
   1ae28:	bdf0      	pop	{r4, r5, r6, r7, pc}
        udev = uwb_dev_idx_lookup(i);
   1ae2a:	4620      	mov	r0, r4
   1ae2c:	f7ed fe64 	bl	8af8 <uwb_dev_idx_lookup>
        if (!udev) {
   1ae30:	4607      	mov	r7, r0
   1ae32:	b190      	cbz	r0, 1ae5a <twr_ds_pkg_init+0x62>
        g_cbs[i].inst_ptr = (struct uwb_rng_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_RNG);
   1ae34:	2104      	movs	r1, #4
   1ae36:	f7ed fee4 	bl	8c02 <uwb_mac_find_cb_inst_ptr>
   1ae3a:	0126      	lsls	r6, r4, #4
   1ae3c:	ebc4 1504 	rsb	r5, r4, r4, lsl #4
   1ae40:	4b11      	ldr	r3, [pc, #68]	; (1ae88 <twr_ds_pkg_init+0x90>)
   1ae42:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   1ae46:	6068      	str	r0, [r5, #4]
        uwb_mac_append_interface(udev, &g_cbs[i]);
   1ae48:	4629      	mov	r1, r5
   1ae4a:	4638      	mov	r0, r7
   1ae4c:	f7ed fe84 	bl	8b58 <uwb_mac_append_interface>
        uwb_rng_append_config(g_cbs[i].inst_ptr, &g_rng_cfgs[i]);
   1ae50:	490e      	ldr	r1, [pc, #56]	; (1ae8c <twr_ds_pkg_init+0x94>)
   1ae52:	4431      	add	r1, r6
   1ae54:	6868      	ldr	r0, [r5, #4]
   1ae56:	f7f1 fd1b 	bl	c890 <uwb_rng_append_config>
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   1ae5a:	3401      	adds	r4, #1
   1ae5c:	e7d5      	b.n	1ae0a <twr_ds_pkg_init+0x12>
    assert(rc == 0);
   1ae5e:	2300      	movs	r3, #0
   1ae60:	461a      	mov	r2, r3
   1ae62:	4619      	mov	r1, r3
   1ae64:	4618      	mov	r0, r3
   1ae66:	f7ee f8f1 	bl	904c <__assert_func>
    assert(rc == 0);
   1ae6a:	2300      	movs	r3, #0
   1ae6c:	461a      	mov	r2, r3
   1ae6e:	4619      	mov	r1, r3
   1ae70:	4618      	mov	r0, r3
   1ae72:	f7ee f8eb 	bl	904c <__assert_func>
   1ae76:	bf00      	nop
   1ae78:	000246dc 	.word	0x000246dc
   1ae7c:	0002472c 	.word	0x0002472c
   1ae80:	200045c8 	.word	0x200045c8
   1ae84:	00024708 	.word	0x00024708
   1ae88:	20000d78 	.word	0x20000d78
   1ae8c:	20000dc4 	.word	0x20000dc4

0001ae90 <twr_ds_free>:
twr_ds_free(struct uwb_dev * inst){
   1ae90:	b508      	push	{r3, lr}
    assert(inst);
   1ae92:	b118      	cbz	r0, 1ae9c <twr_ds_free+0xc>
    uwb_mac_remove_interface(inst, UWBEXT_RNG_DS);
   1ae94:	2108      	movs	r1, #8
   1ae96:	f7ed fe84 	bl	8ba2 <uwb_mac_remove_interface>
}
   1ae9a:	bd08      	pop	{r3, pc}
    assert(inst);
   1ae9c:	2300      	movs	r3, #0
   1ae9e:	461a      	mov	r2, r3
   1aea0:	4619      	mov	r1, r3
   1aea2:	4618      	mov	r0, r3
   1aea4:	f7ee f8d2 	bl	904c <__assert_func>

0001aea8 <twr_ds_pkg_down>:
{
   1aea8:	b538      	push	{r3, r4, r5, lr}
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   1aeaa:	2400      	movs	r4, #0
   1aeac:	b10c      	cbz	r4, 1aeb2 <twr_ds_pkg_down+0xa>
}
   1aeae:	2000      	movs	r0, #0
   1aeb0:	bd38      	pop	{r3, r4, r5, pc}
        rng = (struct uwb_rng_instance *)g_cbs[i].inst_ptr;
   1aeb2:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   1aeb6:	009a      	lsls	r2, r3, #2
   1aeb8:	4b07      	ldr	r3, [pc, #28]	; (1aed8 <twr_ds_pkg_down+0x30>)
   1aeba:	4413      	add	r3, r2
   1aebc:	685d      	ldr	r5, [r3, #4]
        if (!rng) continue;
   1aebe:	b145      	cbz	r5, 1aed2 <twr_ds_pkg_down+0x2a>
        uwb_rng_remove_config(g_cbs[i].inst_ptr, g_rng_cfgs[i].rng_code);
   1aec0:	0123      	lsls	r3, r4, #4
   1aec2:	4a06      	ldr	r2, [pc, #24]	; (1aedc <twr_ds_pkg_down+0x34>)
   1aec4:	5ad1      	ldrh	r1, [r2, r3]
   1aec6:	4628      	mov	r0, r5
   1aec8:	f7f1 fcfb 	bl	c8c2 <uwb_rng_remove_config>
        twr_ds_free(rng->dev_inst);
   1aecc:	6828      	ldr	r0, [r5, #0]
   1aece:	f7ff ffdf 	bl	1ae90 <twr_ds_free>
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   1aed2:	3401      	adds	r4, #1
   1aed4:	e7ea      	b.n	1aeac <twr_ds_pkg_down+0x4>
   1aed6:	bf00      	nop
   1aed8:	20000d78 	.word	0x20000d78
   1aedc:	20000dc4 	.word	0x20000dc4

0001aee0 <rx_complete_cb>:
static bool
rx_complete_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
    struct uwb_rng_txd txd;
    struct uwb_mac_interface * cbs_i;
    if (inst->fctrl != FCNTL_IEEE_RANGE_16)
   1aee0:	f8b0 24e0 	ldrh.w	r2, [r0, #1248]	; 0x4e0
   1aee4:	f648 0341 	movw	r3, #34881	; 0x8841
   1aee8:	429a      	cmp	r2, r3
   1aeea:	f040 821e 	bne.w	1b32a <rx_complete_cb+0x44a>
{
   1aeee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1aef2:	b089      	sub	sp, #36	; 0x24
   1aef4:	4604      	mov	r4, r0
        return false;

    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
   1aef6:	684e      	ldr	r6, [r1, #4]
   1aef8:	f8b6 3056 	ldrh.w	r3, [r6, #86]	; 0x56
    if(dpl_sem_get_count(&rng->sem) == 1){
   1aefc:	2b01      	cmp	r3, #1
   1aefe:	f000 8216 	beq.w	1b32e <rx_complete_cb+0x44e>
        // unsolicited inbound
        return false;
    }

    switch(rng->code){
   1af02:	f8b6 304c 	ldrh.w	r3, [r6, #76]	; 0x4c
   1af06:	f2a3 1325 	subw	r3, r3, #293	; 0x125
   1af0a:	2b03      	cmp	r3, #3
   1af0c:	f200 8213 	bhi.w	1b336 <rx_complete_cb+0x456>
   1af10:	e8df f013 	tbh	[pc, r3, lsl #1]
   1af14:	00950004 	.word	0x00950004
   1af18:	01fe0166 	.word	0x01fe0166
        case UWB_DATA_CODE_DS_TWR_EXT:
            {
                // This code executes on the device that is responding to a original request

                twr_frame_t * frame = rng->frames[(rng->idx)%rng->nframes];
   1af1c:	f8b6 3076 	ldrh.w	r3, [r6, #118]	; 0x76
   1af20:	f8b6 207a 	ldrh.w	r2, [r6, #122]	; 0x7a
   1af24:	fbb3 f1f2 	udiv	r1, r3, r2
   1af28:	fb02 3311 	mls	r3, r2, r1, r3
   1af2c:	b29b      	uxth	r3, r3
   1af2e:	3326      	adds	r3, #38	; 0x26
   1af30:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   1af34:	685d      	ldr	r5, [r3, #4]

                uint64_t request_timestamp = inst->rxtimestamp;
   1af36:	f8d0 74e8 	ldr.w	r7, [r0, #1256]	; 0x4e8
   1af3a:	f8d0 34ec 	ldr.w	r3, [r0, #1260]	; 0x4ec
                uwb_rng_calc_rel_tx(rng, &txd, &g_config, request_timestamp, inst->frame_len);
   1af3e:	f8b0 24e2 	ldrh.w	r2, [r0, #1250]	; 0x4e2
   1af42:	9202      	str	r2, [sp, #8]
   1af44:	9700      	str	r7, [sp, #0]
   1af46:	9301      	str	r3, [sp, #4]
   1af48:	4aa3      	ldr	r2, [pc, #652]	; (1b1d8 <rx_complete_cb+0x2f8>)
   1af4a:	a904      	add	r1, sp, #16
   1af4c:	4630      	mov	r0, r6
   1af4e:	f7f1 fcd7 	bl	c900 <uwb_rng_calc_rel_tx>

                frame->reception_timestamp =  (uint32_t) (request_timestamp & 0xFFFFFFFFUL);
   1af52:	f8c5 700b 	str.w	r7, [r5, #11]
                frame->transmission_timestamp =  (uint32_t) (txd.response_timestamp & 0xFFFFFFFFUL);
   1af56:	9b06      	ldr	r3, [sp, #24]
   1af58:	f8c5 300f 	str.w	r3, [r5, #15]

                frame->dst_address = frame->src_address;
   1af5c:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   1af60:	f8a5 3005 	strh.w	r3, [r5, #5]
                frame->src_address = inst->my_short_address;
   1af64:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
   1af68:	f8a5 3007 	strh.w	r3, [r5, #7]
#if MYNEWT_VAL(UWB_WCS_ENABLED)
                frame->carrier_integrator  = 0.0l;
   1af6c:	2700      	movs	r7, #0
   1af6e:	76ef      	strb	r7, [r5, #27]
   1af70:	772f      	strb	r7, [r5, #28]
   1af72:	776f      	strb	r7, [r5, #29]
   1af74:	77af      	strb	r7, [r5, #30]
#else
                frame->carrier_integrator  = - inst->carrier_integrator;
#endif
                frame->code = UWB_DATA_CODE_DS_TWR_EXT_T1;
   1af76:	2326      	movs	r3, #38	; 0x26
   1af78:	726b      	strb	r3, [r5, #9]
   1af7a:	2301      	movs	r3, #1
   1af7c:	72ab      	strb	r3, [r5, #10]
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
   1af7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1af80:	f8d3 8044 	ldr.w	r8, [r3, #68]	; 0x44
   1af84:	2313      	movs	r3, #19
   1af86:	463a      	mov	r2, r7
   1af88:	4629      	mov	r1, r5
   1af8a:	4620      	mov	r0, r4
   1af8c:	47c0      	blx	r8
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
   1af8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1af90:	6c9d      	ldr	r5, [r3, #72]	; 0x48
   1af92:	463b      	mov	r3, r7
   1af94:	463a      	mov	r2, r7
   1af96:	2113      	movs	r1, #19
   1af98:	4620      	mov	r0, r4
   1af9a:	47a8      	blx	r5
    return (dev->uw_funcs->uf_set_wait4resp(dev, enable));
   1af9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1af9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1afa0:	2101      	movs	r1, #1
   1afa2:	4620      	mov	r0, r4
   1afa4:	4798      	blx	r3
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
   1afa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1afa8:	6b59      	ldr	r1, [r3, #52]	; 0x34
   1afaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1afae:	4620      	mov	r0, r4
   1afb0:	4788      	blx	r1
    return (dev->uw_funcs->uf_set_rxauto_disable(dev, disable));
   1afb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1afb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1afb6:	2101      	movs	r1, #1
   1afb8:	4620      	mov	r0, r4
   1afba:	4798      	blx	r3
    return (dev->uw_funcs->uf_start_tx(dev));
   1afbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1afbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1afc0:	4620      	mov	r0, r4
   1afc2:	4798      	blx	r3

                uwb_set_delay_start(inst, txd.response_tx_delay);
                // Disable default behavor, do not RXENAB on RXFCG thereby avoiding rx timeout events
                uwb_set_rxauto_disable(inst, true);

                if (uwb_start_tx(inst).start_tx_error){
   1afc4:	f010 0f04 	tst.w	r0, #4
   1afc8:	d130      	bne.n	1b02c <rx_complete_cb+0x14c>
                    DS_STATS_INC(tx_error);
                    dpl_sem_release(&rng->sem);
                }

                /* Setup when to listen for response, relative the end of our transmitted frame */
                uwb_set_wait4resp_delay(inst, g_config.tx_holdoff_delay -
   1afca:	4d83      	ldr	r5, [pc, #524]	; (1b1d8 <rx_complete_cb+0x2f8>)
   1afcc:	6869      	ldr	r1, [r5, #4]
                                        inst->config.rx.timeToRxStable);
   1afce:	f894 251b 	ldrb.w	r2, [r4, #1307]	; 0x51b
    return (dev->uw_funcs->uf_set_wait4resp_delay(dev, delay));
   1afd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1afd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   1afd6:	1a89      	subs	r1, r1, r2
   1afd8:	4620      	mov	r0, r4
   1afda:	4798      	blx	r3
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
   1afdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1afde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1afe0:	2120      	movs	r1, #32
   1afe2:	4620      	mov	r0, r4
   1afe4:	4798      	blx	r3
                uwb_set_rx_timeout(inst, uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst, TWR_EXT_FRAME_SIZE)) +
   1afe6:	f006 f90f 	bl	21208 <__aeabi_i2d>
   1afea:	a379      	add	r3, pc, #484	; (adr r3, 1b1d0 <rx_complete_cb+0x2f0>)
   1afec:	e9d3 2300 	ldrd	r2, r3, [r3]
   1aff0:	f006 fa9e 	bl	21530 <__aeabi_ddiv>
   1aff4:	4606      	mov	r6, r0
   1aff6:	460f      	mov	r7, r1
   1aff8:	89a8      	ldrh	r0, [r5, #12]
   1affa:	f006 f905 	bl	21208 <__aeabi_i2d>
   1affe:	4632      	mov	r2, r6
   1b000:	463b      	mov	r3, r7
   1b002:	f005 ffb5 	bl	20f70 <__adddf3>
   1b006:	4606      	mov	r6, r0
   1b008:	460f      	mov	r7, r1
                                   g_config.rx_timeout_delay + inst->config.rx.timeToRxStable);
   1b00a:	f894 051b 	ldrb.w	r0, [r4, #1307]	; 0x51b
   1b00e:	f006 f8fb 	bl	21208 <__aeabi_i2d>
   1b012:	4632      	mov	r2, r6
   1b014:	463b      	mov	r3, r7
   1b016:	f005 ffab 	bl	20f70 <__adddf3>
                uwb_set_rx_timeout(inst, uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst, TWR_EXT_FRAME_SIZE)) +
   1b01a:	f006 fc37 	bl	2188c <__aeabi_d2uiz>
   1b01e:	4601      	mov	r1, r0
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
   1b020:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b024:	4620      	mov	r0, r4
   1b026:	4798      	blx	r3
            }
        default:
                return false;
                break;
    }
    return true;
   1b028:	2001      	movs	r0, #1
                break;
   1b02a:	e181      	b.n	1b330 <rx_complete_cb+0x450>
                    DS_STATS_INC(tx_error);
   1b02c:	4a6b      	ldr	r2, [pc, #428]	; (1b1dc <rx_complete_cb+0x2fc>)
   1b02e:	6993      	ldr	r3, [r2, #24]
   1b030:	3301      	adds	r3, #1
   1b032:	6193      	str	r3, [r2, #24]
   1b034:	f106 0050 	add.w	r0, r6, #80	; 0x50
   1b038:	f7ee ff28 	bl	9e8c <os_sem_release>
   1b03c:	e7c5      	b.n	1afca <rx_complete_cb+0xea>
                if (inst->frame_len != sizeof(ieee_rng_response_frame_t))
   1b03e:	f8b0 34e2 	ldrh.w	r3, [r0, #1250]	; 0x4e2
   1b042:	2b13      	cmp	r3, #19
   1b044:	d001      	beq.n	1b04a <rx_complete_cb+0x16a>
    return true;
   1b046:	2001      	movs	r0, #1
   1b048:	e172      	b.n	1b330 <rx_complete_cb+0x450>
                twr_frame_t * frame = rng->frames[(rng->idx)%rng->nframes];
   1b04a:	f8b6 3076 	ldrh.w	r3, [r6, #118]	; 0x76
   1b04e:	f8b6 107a 	ldrh.w	r1, [r6, #122]	; 0x7a
   1b052:	fbb3 f2f1 	udiv	r2, r3, r1
   1b056:	fb01 3212 	mls	r2, r1, r2, r3
   1b05a:	b292      	uxth	r2, r2
   1b05c:	3226      	adds	r2, #38	; 0x26
   1b05e:	eb06 0282 	add.w	r2, r6, r2, lsl #2
   1b062:	6855      	ldr	r5, [r2, #4]
                twr_frame_t * next_frame = rng->frames[(rng->idx+1)%rng->nframes];
   1b064:	3301      	adds	r3, #1
   1b066:	fb93 f2f1 	sdiv	r2, r3, r1
   1b06a:	fb01 3312 	mls	r3, r1, r2, r3
   1b06e:	3326      	adds	r3, #38	; 0x26
   1b070:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   1b074:	685f      	ldr	r7, [r3, #4]
                uint64_t request_timestamp = inst->rxtimestamp;
   1b076:	f8d0 84e8 	ldr.w	r8, [r0, #1256]	; 0x4e8
   1b07a:	f8d0 94ec 	ldr.w	r9, [r0, #1260]	; 0x4ec
    return (dev->uw_funcs->uf_read_txtime_lo32(dev));
   1b07e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1b080:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   1b082:	4798      	blx	r3
                frame->request_timestamp = next_frame->request_timestamp = uwb_read_txtime_lo32(inst); // This corresponds to when the original request was actually sent
   1b084:	f8c7 0013 	str.w	r0, [r7, #19]
   1b088:	f8c5 0013 	str.w	r0, [r5, #19]
                frame->response_timestamp = next_frame->response_timestamp = (uint32_t)(request_timestamp & 0xFFFFFFFFUL); // This corresponds to the response just received
   1b08c:	f8c7 8017 	str.w	r8, [r7, #23]
   1b090:	f8c5 8017 	str.w	r8, [r5, #23]
                uint16_t src_address = frame->src_address;
   1b094:	f8b5 1007 	ldrh.w	r1, [r5, #7]
                uint8_t seq_num = frame->seq_num;
   1b098:	78aa      	ldrb	r2, [r5, #2]
                frame->carrier_integrator  = 0.0l;
   1b09a:	2300      	movs	r3, #0
   1b09c:	76eb      	strb	r3, [r5, #27]
   1b09e:	772b      	strb	r3, [r5, #28]
   1b0a0:	776b      	strb	r3, [r5, #29]
   1b0a2:	77ab      	strb	r3, [r5, #30]
                frame->dst_address = src_address;
   1b0a4:	f8a7 1005 	strh.w	r1, [r7, #5]
                frame->src_address = inst->my_short_address;
   1b0a8:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
   1b0ac:	f8a7 3007 	strh.w	r3, [r7, #7]
                frame->seq_num = seq_num + 1;
   1b0b0:	1c53      	adds	r3, r2, #1
   1b0b2:	70bb      	strb	r3, [r7, #2]
                frame->code = UWB_DATA_CODE_DS_TWR_EXT_T2;
   1b0b4:	2327      	movs	r3, #39	; 0x27
   1b0b6:	727b      	strb	r3, [r7, #9]
   1b0b8:	2301      	movs	r3, #1
   1b0ba:	72bb      	strb	r3, [r7, #10]
                if(inst->status.lde_error)
   1b0bc:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   1b0c0:	f013 0f04 	tst.w	r3, #4
   1b0c4:	d001      	beq.n	1b0ca <rx_complete_cb+0x1ea>
    return true;
   1b0c6:	2001      	movs	r0, #1
   1b0c8:	e132      	b.n	1b330 <rx_complete_cb+0x450>
                uwb_rng_calc_rel_tx(rng, &txd, &g_config, request_timestamp, inst->frame_len);
   1b0ca:	f8b4 34e2 	ldrh.w	r3, [r4, #1250]	; 0x4e2
   1b0ce:	9302      	str	r3, [sp, #8]
   1b0d0:	f8cd 8000 	str.w	r8, [sp]
   1b0d4:	f8cd 9004 	str.w	r9, [sp, #4]
   1b0d8:	4a3f      	ldr	r2, [pc, #252]	; (1b1d8 <rx_complete_cb+0x2f8>)
   1b0da:	a904      	add	r1, sp, #16
   1b0dc:	4630      	mov	r0, r6
   1b0de:	f7f1 fc0f 	bl	c900 <uwb_rng_calc_rel_tx>
                frame->reception_timestamp =  (uint32_t) (request_timestamp & 0xFFFFFFFFUL);
   1b0e2:	f8c7 800b 	str.w	r8, [r7, #11]
                frame->transmission_timestamp =  (uint32_t) (txd.response_timestamp & 0xFFFFFFFFUL);
   1b0e6:	9b06      	ldr	r3, [sp, #24]
   1b0e8:	f8c7 300f 	str.w	r3, [r7, #15]
                if(!(SLIST_EMPTY(&inst->interface_cbs))) {
   1b0ec:	f8d4 5530 	ldr.w	r5, [r4, #1328]	; 0x530
   1b0f0:	2d00      	cmp	r5, #0
   1b0f2:	d156      	bne.n	1b1a2 <rx_complete_cb+0x2c2>
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
   1b0f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b0f6:	6c5d      	ldr	r5, [r3, #68]	; 0x44
   1b0f8:	2320      	movs	r3, #32
   1b0fa:	2200      	movs	r2, #0
   1b0fc:	4639      	mov	r1, r7
   1b0fe:	4620      	mov	r0, r4
   1b100:	47a8      	blx	r5
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
   1b102:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b104:	6c9d      	ldr	r5, [r3, #72]	; 0x48
   1b106:	2300      	movs	r3, #0
   1b108:	461a      	mov	r2, r3
   1b10a:	2120      	movs	r1, #32
   1b10c:	4620      	mov	r0, r4
   1b10e:	47a8      	blx	r5
    return (dev->uw_funcs->uf_set_wait4resp(dev, enable));
   1b110:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1b114:	2101      	movs	r1, #1
   1b116:	4620      	mov	r0, r4
   1b118:	4798      	blx	r3
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
   1b11a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b11c:	6b59      	ldr	r1, [r3, #52]	; 0x34
   1b11e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1b122:	4620      	mov	r0, r4
   1b124:	4788      	blx	r1
    return (dev->uw_funcs->uf_set_rxauto_disable(dev, disable));
   1b126:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1b12a:	2101      	movs	r1, #1
   1b12c:	4620      	mov	r0, r4
   1b12e:	4798      	blx	r3
    return (dev->uw_funcs->uf_start_tx(dev));
   1b130:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b134:	4620      	mov	r0, r4
   1b136:	4798      	blx	r3
                if (uwb_start_tx(inst).start_tx_error){
   1b138:	f010 0f04 	tst.w	r0, #4
   1b13c:	d13c      	bne.n	1b1b8 <rx_complete_cb+0x2d8>
                uwb_set_wait4resp_delay(inst, g_config.tx_holdoff_delay -
   1b13e:	4d26      	ldr	r5, [pc, #152]	; (1b1d8 <rx_complete_cb+0x2f8>)
   1b140:	6869      	ldr	r1, [r5, #4]
                                        inst->config.rx.timeToRxStable);
   1b142:	f894 251b 	ldrb.w	r2, [r4, #1307]	; 0x51b
    return (dev->uw_funcs->uf_set_wait4resp_delay(dev, delay));
   1b146:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   1b14a:	1a89      	subs	r1, r1, r2
   1b14c:	4620      	mov	r0, r4
   1b14e:	4798      	blx	r3
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
   1b150:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b152:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1b154:	2120      	movs	r1, #32
   1b156:	4620      	mov	r0, r4
   1b158:	4798      	blx	r3
                uwb_set_rx_timeout(inst, uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst, TWR_EXT_FRAME_SIZE)) +
   1b15a:	f006 f855 	bl	21208 <__aeabi_i2d>
   1b15e:	a31c      	add	r3, pc, #112	; (adr r3, 1b1d0 <rx_complete_cb+0x2f0>)
   1b160:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b164:	f006 f9e4 	bl	21530 <__aeabi_ddiv>
   1b168:	4606      	mov	r6, r0
   1b16a:	460f      	mov	r7, r1
   1b16c:	89a8      	ldrh	r0, [r5, #12]
   1b16e:	f006 f84b 	bl	21208 <__aeabi_i2d>
   1b172:	4632      	mov	r2, r6
   1b174:	463b      	mov	r3, r7
   1b176:	f005 fefb 	bl	20f70 <__adddf3>
   1b17a:	4606      	mov	r6, r0
   1b17c:	460f      	mov	r7, r1
                                   g_config.rx_timeout_delay + inst->config.rx.timeToRxStable);
   1b17e:	f894 051b 	ldrb.w	r0, [r4, #1307]	; 0x51b
   1b182:	f006 f841 	bl	21208 <__aeabi_i2d>
   1b186:	4632      	mov	r2, r6
   1b188:	463b      	mov	r3, r7
   1b18a:	f005 fef1 	bl	20f70 <__adddf3>
                uwb_set_rx_timeout(inst, uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst, TWR_EXT_FRAME_SIZE)) +
   1b18e:	f006 fb7d 	bl	2188c <__aeabi_d2uiz>
   1b192:	4601      	mov	r1, r0
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
   1b194:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b198:	4620      	mov	r0, r4
   1b19a:	4798      	blx	r3
    return true;
   1b19c:	2001      	movs	r0, #1
                break;
   1b19e:	e0c7      	b.n	1b330 <rx_complete_cb+0x450>
                    SLIST_FOREACH(cbs_i, &inst->interface_cbs, next) {
   1b1a0:	6bad      	ldr	r5, [r5, #56]	; 0x38
   1b1a2:	2d00      	cmp	r5, #0
   1b1a4:	d0a6      	beq.n	1b0f4 <rx_complete_cb+0x214>
                        if (cbs_i != NULL && cbs_i->final_cb)
   1b1a6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1b1a8:	2b00      	cmp	r3, #0
   1b1aa:	d0f9      	beq.n	1b1a0 <rx_complete_cb+0x2c0>
                            if(cbs_i->final_cb(inst, cbs_i)) break;
   1b1ac:	4629      	mov	r1, r5
   1b1ae:	4620      	mov	r0, r4
   1b1b0:	4798      	blx	r3
   1b1b2:	2800      	cmp	r0, #0
   1b1b4:	d0f4      	beq.n	1b1a0 <rx_complete_cb+0x2c0>
   1b1b6:	e79d      	b.n	1b0f4 <rx_complete_cb+0x214>
                    DS_STATS_INC(tx_error);
   1b1b8:	4a08      	ldr	r2, [pc, #32]	; (1b1dc <rx_complete_cb+0x2fc>)
   1b1ba:	6993      	ldr	r3, [r2, #24]
   1b1bc:	3301      	adds	r3, #1
   1b1be:	6193      	str	r3, [r2, #24]
   1b1c0:	f106 0050 	add.w	r0, r6, #80	; 0x50
   1b1c4:	f7ee fe62 	bl	9e8c <os_sem_release>
   1b1c8:	e7b9      	b.n	1b13e <rx_complete_cb+0x25e>
   1b1ca:	bf00      	nop
   1b1cc:	f3af 8000 	nop.w
   1b1d0:	90690691 	.word	0x90690691
   1b1d4:	3ff06906 	.word	0x3ff06906
   1b1d8:	20000e10 	.word	0x20000e10
   1b1dc:	200045e4 	.word	0x200045e4
                twr_frame_t * previous_frame = rng->frames[(uint16_t)(rng->idx-1)%rng->nframes];
   1b1e0:	f8b6 2076 	ldrh.w	r2, [r6, #118]	; 0x76
   1b1e4:	1e53      	subs	r3, r2, #1
   1b1e6:	b29b      	uxth	r3, r3
   1b1e8:	f8b6 107a 	ldrh.w	r1, [r6, #122]	; 0x7a
   1b1ec:	fbb3 f0f1 	udiv	r0, r3, r1
   1b1f0:	fb01 3310 	mls	r3, r1, r0, r3
   1b1f4:	b29b      	uxth	r3, r3
   1b1f6:	3326      	adds	r3, #38	; 0x26
   1b1f8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   1b1fc:	6858      	ldr	r0, [r3, #4]
                twr_frame_t * frame = rng->frames[(rng->idx)%rng->nframes];
   1b1fe:	fbb2 f3f1 	udiv	r3, r2, r1
   1b202:	fb01 2313 	mls	r3, r1, r3, r2
   1b206:	b29b      	uxth	r3, r3
   1b208:	3326      	adds	r3, #38	; 0x26
   1b20a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   1b20e:	685f      	ldr	r7, [r3, #4]
                previous_frame->request_timestamp = frame->request_timestamp;
   1b210:	f8d7 3013 	ldr.w	r3, [r7, #19]
   1b214:	f8c0 3013 	str.w	r3, [r0, #19]
                previous_frame->response_timestamp = frame->response_timestamp;
   1b218:	f8d7 3017 	ldr.w	r3, [r7, #23]
   1b21c:	f8c0 3017 	str.w	r3, [r0, #23]
                uint64_t request_timestamp = inst->rxtimestamp;
   1b220:	f8d4 54e8 	ldr.w	r5, [r4, #1256]	; 0x4e8
    return (dev->uw_funcs->uf_read_txtime_lo32(dev));
   1b224:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b226:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   1b228:	4620      	mov	r0, r4
   1b22a:	4798      	blx	r3
                frame->request_timestamp = uwb_read_txtime_lo32(inst);   // This corresponds to when the original request was actually sent
   1b22c:	f8c7 0013 	str.w	r0, [r7, #19]
                frame->response_timestamp = (uint32_t) (request_timestamp & 0xFFFFFFFFUL);  // This corresponds to the response just received
   1b230:	f8c7 5017 	str.w	r5, [r7, #23]
                frame->dst_address = frame->src_address;
   1b234:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   1b238:	f8a7 3005 	strh.w	r3, [r7, #5]
                frame->src_address = inst->my_short_address;
   1b23c:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
   1b240:	f8a7 3007 	strh.w	r3, [r7, #7]
                frame->carrier_integrator  = 0.0l;
   1b244:	2300      	movs	r3, #0
   1b246:	76fb      	strb	r3, [r7, #27]
   1b248:	773b      	strb	r3, [r7, #28]
   1b24a:	777b      	strb	r3, [r7, #29]
   1b24c:	77bb      	strb	r3, [r7, #30]
                frame->code = UWB_DATA_CODE_DS_TWR_EXT_FINAL;
   1b24e:	2328      	movs	r3, #40	; 0x28
   1b250:	727b      	strb	r3, [r7, #9]
   1b252:	2301      	movs	r3, #1
   1b254:	72bb      	strb	r3, [r7, #10]
                if(!(SLIST_EMPTY(&inst->interface_cbs))) {
   1b256:	f8d4 5530 	ldr.w	r5, [r4, #1328]	; 0x530
   1b25a:	2d00      	cmp	r5, #0
   1b25c:	d140      	bne.n	1b2e0 <rx_complete_cb+0x400>
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
   1b25e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b260:	6c5d      	ldr	r5, [r3, #68]	; 0x44
   1b262:	2320      	movs	r3, #32
   1b264:	2200      	movs	r2, #0
   1b266:	4639      	mov	r1, r7
   1b268:	4620      	mov	r0, r4
   1b26a:	47a8      	blx	r5
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
   1b26c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b26e:	6c9d      	ldr	r5, [r3, #72]	; 0x48
   1b270:	2300      	movs	r3, #0
   1b272:	461a      	mov	r2, r3
   1b274:	2120      	movs	r1, #32
   1b276:	4620      	mov	r0, r4
   1b278:	47a8      	blx	r5
                uwb_rng_calc_rel_tx(rng, &txd, &g_config, inst->rxtimestamp, inst->frame_len);
   1b27a:	f8b4 34e2 	ldrh.w	r3, [r4, #1250]	; 0x4e2
   1b27e:	9302      	str	r3, [sp, #8]
   1b280:	f504 639e 	add.w	r3, r4, #1264	; 0x4f0
   1b284:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   1b288:	e9cd 2300 	strd	r2, r3, [sp]
   1b28c:	4a2b      	ldr	r2, [pc, #172]	; (1b33c <rx_complete_cb+0x45c>)
   1b28e:	a904      	add	r1, sp, #16
   1b290:	4630      	mov	r0, r6
   1b292:	f7f1 fb35 	bl	c900 <uwb_rng_calc_rel_tx>
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
   1b296:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b298:	6b59      	ldr	r1, [r3, #52]	; 0x34
   1b29a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1b29e:	4620      	mov	r0, r4
   1b2a0:	4788      	blx	r1
                memcpy(&frame->local, &frame->remote, sizeof(frame->local));
   1b2a2:	f107 0520 	add.w	r5, r7, #32
   1b2a6:	2268      	movs	r2, #104	; 0x68
   1b2a8:	4629      	mov	r1, r5
   1b2aa:	f107 0088 	add.w	r0, r7, #136	; 0x88
   1b2ae:	f7f2 fb9b 	bl	d9e8 <memcpy>
                uwb_rng_clear_twr_data(&frame->remote);
   1b2b2:	4628      	mov	r0, r5
   1b2b4:	f7f1 fb64 	bl	c980 <uwb_rng_clear_twr_data>
    return (dev->uw_funcs->uf_start_tx(dev));
   1b2b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b2ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b2bc:	4620      	mov	r0, r4
   1b2be:	4798      	blx	r3
                if (uwb_start_tx(inst).start_tx_error) {
   1b2c0:	f010 0f04 	tst.w	r0, #4
   1b2c4:	d117      	bne.n	1b2f6 <rx_complete_cb+0x416>
                    DS_STATS_INC(complete);
   1b2c6:	4a1e      	ldr	r2, [pc, #120]	; (1b340 <rx_complete_cb+0x460>)
   1b2c8:	6953      	ldr	r3, [r2, #20]
   1b2ca:	3301      	adds	r3, #1
   1b2cc:	6153      	str	r3, [r2, #20]
                    rng->control.complete_after_tx = 1;
   1b2ce:	f896 3070 	ldrb.w	r3, [r6, #112]	; 0x70
   1b2d2:	f043 0302 	orr.w	r3, r3, #2
   1b2d6:	f886 3070 	strb.w	r3, [r6, #112]	; 0x70
    return true;
   1b2da:	2001      	movs	r0, #1
   1b2dc:	e028      	b.n	1b330 <rx_complete_cb+0x450>
                    SLIST_FOREACH(cbs_i, &inst->interface_cbs, next) {
   1b2de:	6bad      	ldr	r5, [r5, #56]	; 0x38
   1b2e0:	2d00      	cmp	r5, #0
   1b2e2:	d0bc      	beq.n	1b25e <rx_complete_cb+0x37e>
                        if (cbs_i != NULL && cbs_i->final_cb)
   1b2e4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1b2e6:	2b00      	cmp	r3, #0
   1b2e8:	d0f9      	beq.n	1b2de <rx_complete_cb+0x3fe>
                            if(cbs_i->final_cb(inst, cbs_i)) break;
   1b2ea:	4629      	mov	r1, r5
   1b2ec:	4620      	mov	r0, r4
   1b2ee:	4798      	blx	r3
   1b2f0:	2800      	cmp	r0, #0
   1b2f2:	d0f4      	beq.n	1b2de <rx_complete_cb+0x3fe>
   1b2f4:	e7b3      	b.n	1b25e <rx_complete_cb+0x37e>
                    DS_STATS_INC(tx_error);
   1b2f6:	4a12      	ldr	r2, [pc, #72]	; (1b340 <rx_complete_cb+0x460>)
   1b2f8:	6993      	ldr	r3, [r2, #24]
   1b2fa:	3301      	adds	r3, #1
   1b2fc:	6193      	str	r3, [r2, #24]
   1b2fe:	f106 0050 	add.w	r0, r6, #80	; 0x50
   1b302:	f7ee fdc3 	bl	9e8c <os_sem_release>
                    rng_issue_complete(inst);
   1b306:	4620      	mov	r0, r4
   1b308:	f7f1 fd4a 	bl	cda0 <rng_issue_complete>
    return true;
   1b30c:	2001      	movs	r0, #1
   1b30e:	e00f      	b.n	1b330 <rx_complete_cb+0x450>
                DS_STATS_INC(complete);
   1b310:	4a0b      	ldr	r2, [pc, #44]	; (1b340 <rx_complete_cb+0x460>)
   1b312:	6953      	ldr	r3, [r2, #20]
   1b314:	3301      	adds	r3, #1
   1b316:	6153      	str	r3, [r2, #20]
   1b318:	f106 0050 	add.w	r0, r6, #80	; 0x50
   1b31c:	f7ee fdb6 	bl	9e8c <os_sem_release>
                rng_issue_complete(inst);
   1b320:	4620      	mov	r0, r4
   1b322:	f7f1 fd3d 	bl	cda0 <rng_issue_complete>
    return true;
   1b326:	2001      	movs	r0, #1
                break;
   1b328:	e002      	b.n	1b330 <rx_complete_cb+0x450>
        return false;
   1b32a:	2000      	movs	r0, #0
}
   1b32c:	4770      	bx	lr
        return false;
   1b32e:	2000      	movs	r0, #0
}
   1b330:	b009      	add	sp, #36	; 0x24
   1b332:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch(rng->code){
   1b336:	2000      	movs	r0, #0
   1b338:	e7fa      	b.n	1b330 <rx_complete_cb+0x450>
   1b33a:	bf00      	nop
   1b33c:	20000e10 	.word	0x20000e10
   1b340:	200045e4 	.word	0x200045e4

0001b344 <twr_ds_ext_pkg_init>:
{
   1b344:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b346:	b083      	sub	sp, #12
    printf("{\"utime\": %"PRIu32",\"msg\": \"twr_ds_ext_pkg_init\"}\n",
   1b348:	f7f2 fff3 	bl	e332 <dpl_cputime_get32>
   1b34c:	4601      	mov	r1, r0
   1b34e:	481d      	ldr	r0, [pc, #116]	; (1b3c4 <twr_ds_ext_pkg_init+0x80>)
   1b350:	f7f2 ff6a 	bl	e228 <printf>
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   1b354:	2400      	movs	r4, #0
   1b356:	b174      	cbz	r4, 1b376 <twr_ds_ext_pkg_init+0x32>
    rc = stats_init(
   1b358:	2202      	movs	r2, #2
   1b35a:	9200      	str	r2, [sp, #0]
   1b35c:	4b1a      	ldr	r3, [pc, #104]	; (1b3c8 <twr_ds_ext_pkg_init+0x84>)
   1b35e:	2104      	movs	r1, #4
   1b360:	481a      	ldr	r0, [pc, #104]	; (1b3cc <twr_ds_ext_pkg_init+0x88>)
   1b362:	f7f5 fdd9 	bl	10f18 <stats_init>
    assert(rc == 0);
   1b366:	bb00      	cbnz	r0, 1b3aa <twr_ds_ext_pkg_init+0x66>
    rc = stats_register("twr_ds_ext", STATS_HDR(g_twr_ds_ext_stat));
   1b368:	4918      	ldr	r1, [pc, #96]	; (1b3cc <twr_ds_ext_pkg_init+0x88>)
   1b36a:	4819      	ldr	r0, [pc, #100]	; (1b3d0 <twr_ds_ext_pkg_init+0x8c>)
   1b36c:	f7f5 fe5e 	bl	1102c <stats_register>
    assert(rc == 0);
   1b370:	bb08      	cbnz	r0, 1b3b6 <twr_ds_ext_pkg_init+0x72>
}
   1b372:	b003      	add	sp, #12
   1b374:	bdf0      	pop	{r4, r5, r6, r7, pc}
        udev = uwb_dev_idx_lookup(i);
   1b376:	4620      	mov	r0, r4
   1b378:	f7ed fbbe 	bl	8af8 <uwb_dev_idx_lookup>
        if (!udev) {
   1b37c:	4607      	mov	r7, r0
   1b37e:	b190      	cbz	r0, 1b3a6 <twr_ds_ext_pkg_init+0x62>
        g_cbs[i].inst_ptr = (struct uwb_rng_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_RNG);
   1b380:	2104      	movs	r1, #4
   1b382:	f7ed fc3e 	bl	8c02 <uwb_mac_find_cb_inst_ptr>
   1b386:	0126      	lsls	r6, r4, #4
   1b388:	ebc4 1504 	rsb	r5, r4, r4, lsl #4
   1b38c:	4b11      	ldr	r3, [pc, #68]	; (1b3d4 <twr_ds_ext_pkg_init+0x90>)
   1b38e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   1b392:	6068      	str	r0, [r5, #4]
        uwb_mac_append_interface(udev, &g_cbs[i]);
   1b394:	4629      	mov	r1, r5
   1b396:	4638      	mov	r0, r7
   1b398:	f7ed fbde 	bl	8b58 <uwb_mac_append_interface>
        uwb_rng_append_config(g_cbs[i].inst_ptr, &g_rng_cfgs[i]);
   1b39c:	490e      	ldr	r1, [pc, #56]	; (1b3d8 <twr_ds_ext_pkg_init+0x94>)
   1b39e:	4431      	add	r1, r6
   1b3a0:	6868      	ldr	r0, [r5, #4]
   1b3a2:	f7f1 fa75 	bl	c890 <uwb_rng_append_config>
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   1b3a6:	3401      	adds	r4, #1
   1b3a8:	e7d5      	b.n	1b356 <twr_ds_ext_pkg_init+0x12>
    assert(rc == 0);
   1b3aa:	2300      	movs	r3, #0
   1b3ac:	461a      	mov	r2, r3
   1b3ae:	4619      	mov	r1, r3
   1b3b0:	4618      	mov	r0, r3
   1b3b2:	f7ed fe4b 	bl	904c <__assert_func>
    assert(rc == 0);
   1b3b6:	2300      	movs	r3, #0
   1b3b8:	461a      	mov	r2, r3
   1b3ba:	4619      	mov	r1, r3
   1b3bc:	4618      	mov	r0, r3
   1b3be:	f7ed fe45 	bl	904c <__assert_func>
   1b3c2:	bf00      	nop
   1b3c4:	00024738 	.word	0x00024738
   1b3c8:	00024774 	.word	0x00024774
   1b3cc:	200045e4 	.word	0x200045e4
   1b3d0:	00024768 	.word	0x00024768
   1b3d4:	20000dd4 	.word	0x20000dd4
   1b3d8:	20000e20 	.word	0x20000e20

0001b3dc <twr_ds_ext_free>:
twr_ds_ext_free(struct uwb_dev * inst){
   1b3dc:	b508      	push	{r3, lr}
    assert(inst);
   1b3de:	b118      	cbz	r0, 1b3e8 <twr_ds_ext_free+0xc>
    uwb_mac_remove_interface(inst, UWBEXT_RNG_DS_EXT);
   1b3e0:	2109      	movs	r1, #9
   1b3e2:	f7ed fbde 	bl	8ba2 <uwb_mac_remove_interface>
}
   1b3e6:	bd08      	pop	{r3, pc}
    assert(inst);
   1b3e8:	2300      	movs	r3, #0
   1b3ea:	461a      	mov	r2, r3
   1b3ec:	4619      	mov	r1, r3
   1b3ee:	4618      	mov	r0, r3
   1b3f0:	f7ed fe2c 	bl	904c <__assert_func>

0001b3f4 <twr_ds_ext_pkg_down>:
{
   1b3f4:	b538      	push	{r3, r4, r5, lr}
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   1b3f6:	2400      	movs	r4, #0
   1b3f8:	b10c      	cbz	r4, 1b3fe <twr_ds_ext_pkg_down+0xa>
}
   1b3fa:	2000      	movs	r0, #0
   1b3fc:	bd38      	pop	{r3, r4, r5, pc}
        rng = (struct uwb_rng_instance *)g_cbs[i].inst_ptr;
   1b3fe:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   1b402:	009a      	lsls	r2, r3, #2
   1b404:	4b07      	ldr	r3, [pc, #28]	; (1b424 <twr_ds_ext_pkg_down+0x30>)
   1b406:	4413      	add	r3, r2
   1b408:	685d      	ldr	r5, [r3, #4]
        if (!rng) continue;
   1b40a:	b145      	cbz	r5, 1b41e <twr_ds_ext_pkg_down+0x2a>
        uwb_rng_remove_config(g_cbs[i].inst_ptr, g_rng_cfgs[i].rng_code);
   1b40c:	0123      	lsls	r3, r4, #4
   1b40e:	4a06      	ldr	r2, [pc, #24]	; (1b428 <twr_ds_ext_pkg_down+0x34>)
   1b410:	5ad1      	ldrh	r1, [r2, r3]
   1b412:	4628      	mov	r0, r5
   1b414:	f7f1 fa55 	bl	c8c2 <uwb_rng_remove_config>
        twr_ds_ext_free(rng->dev_inst);
   1b418:	6828      	ldr	r0, [r5, #0]
   1b41a:	f7ff ffdf 	bl	1b3dc <twr_ds_ext_free>
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   1b41e:	3401      	adds	r4, #1
   1b420:	e7ea      	b.n	1b3f8 <twr_ds_ext_pkg_down+0x4>
   1b422:	bf00      	nop
   1b424:	20000dd4 	.word	0x20000dd4
   1b428:	20000e20 	.word	0x20000e20
   1b42c:	00000000 	.word	0x00000000

0001b430 <rx_complete_cb>:
 *
 * @return true on sucess
 */
static bool
rx_complete_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
   1b430:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b434:	b089      	sub	sp, #36	; 0x24
    twr_frame_t * frame;
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
   1b436:	684d      	ldr	r5, [r1, #4]
    if (inst->fctrl != FCNTL_IEEE_RANGE_16)
   1b438:	f8b0 24e0 	ldrh.w	r2, [r0, #1248]	; 0x4e0
   1b43c:	f648 0341 	movw	r3, #34881	; 0x8841
   1b440:	429a      	cmp	r2, r3
   1b442:	f040 813b 	bne.w	1b6bc <rx_complete_cb+0x28c>
   1b446:	4604      	mov	r4, r0
        return false;

    assert(rng);
   1b448:	b30d      	cbz	r5, 1b48e <rx_complete_cb+0x5e>
   1b44a:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
    if(dpl_sem_get_count(&rng->sem) == 1) // unsolicited inbound
   1b44e:	2b01      	cmp	r3, #1
   1b450:	f000 8138 	beq.w	1b6c4 <rx_complete_cb+0x294>
        return false;

    frame = rng->frames[(rng->idx)%rng->nframes]; // Frame already read within loader layers.
   1b454:	f8b5 3076 	ldrh.w	r3, [r5, #118]	; 0x76
   1b458:	f8b5 207a 	ldrh.w	r2, [r5, #122]	; 0x7a
   1b45c:	fbb3 f1f2 	udiv	r1, r3, r2
   1b460:	fb02 3311 	mls	r3, r2, r1, r3
   1b464:	b29b      	uxth	r3, r3
   1b466:	3326      	adds	r3, #38	; 0x26
   1b468:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   1b46c:	685e      	ldr	r6, [r3, #4]

    switch(rng->code){
   1b46e:	f8b5 304c 	ldrh.w	r3, [r5, #76]	; 0x4c
   1b472:	f240 1211 	movw	r2, #273	; 0x111
   1b476:	4293      	cmp	r3, r2
   1b478:	f000 809e 	beq.w	1b5b8 <rx_complete_cb+0x188>
   1b47c:	f5b3 7f89 	cmp.w	r3, #274	; 0x112
   1b480:	f000 8109 	beq.w	1b696 <rx_complete_cb+0x266>
   1b484:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
   1b488:	d007      	beq.n	1b49a <rx_complete_cb+0x6a>
   1b48a:	2000      	movs	r0, #0
   1b48c:	e117      	b.n	1b6be <rx_complete_cb+0x28e>
    assert(rng);
   1b48e:	2300      	movs	r3, #0
   1b490:	461a      	mov	r2, r3
   1b492:	4619      	mov	r1, r3
   1b494:	4618      	mov	r0, r3
   1b496:	f7ed fdd9 	bl	904c <__assert_func>
        case UWB_DATA_CODE_SS_TWR:
            {
                // This code executes on the device that is responding to a request
                uint64_t request_timestamp = inst->rxtimestamp;
   1b49a:	f500 639e 	add.w	r3, r0, #1264	; 0x4f0
   1b49e:	e953 8902 	ldrd	r8, r9, [r3, #-8]
                struct uwb_rng_txd txd;
                uwb_rng_calc_rel_tx(rng, &txd, &g_config, request_timestamp, inst->frame_len);
   1b4a2:	f8b0 34e2 	ldrh.w	r3, [r0, #1250]	; 0x4e2
   1b4a6:	9302      	str	r3, [sp, #8]
   1b4a8:	e9cd 8900 	strd	r8, r9, [sp]
   1b4ac:	4a88      	ldr	r2, [pc, #544]	; (1b6d0 <rx_complete_cb+0x2a0>)
   1b4ae:	a904      	add	r1, sp, #16
   1b4b0:	4628      	mov	r0, r5
   1b4b2:	f7f1 fa25 	bl	c900 <uwb_rng_calc_rel_tx>

#if MYNEWT_VAL(UWB_WCS_ENABLED)
                struct uwb_wcs_instance * wcs = rng->ccp_inst->wcs;
   1b4b6:	686b      	ldr	r3, [r5, #4]
   1b4b8:	6e9f      	ldr	r7, [r3, #104]	; 0x68
                frame->reception_timestamp = (uint32_t)(uwb_wcs_local_to_master(wcs, request_timestamp)) & 0xFFFFFFFFULL;
   1b4ba:	4642      	mov	r2, r8
   1b4bc:	464b      	mov	r3, r9
   1b4be:	4638      	mov	r0, r7
   1b4c0:	f7f2 f906 	bl	d6d0 <uwb_wcs_local_to_master>
   1b4c4:	f8c6 000b 	str.w	r0, [r6, #11]
                frame->transmission_timestamp = (uint32_t)(uwb_wcs_local_to_master(wcs, txd.response_timestamp)) & 0xFFFFFFFFULL;
   1b4c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1b4cc:	4638      	mov	r0, r7
   1b4ce:	f7f2 f8ff 	bl	d6d0 <uwb_wcs_local_to_master>
   1b4d2:	f8c6 000f 	str.w	r0, [r6, #15]
#else
                frame->reception_timestamp = request_timestamp & 0xFFFFFFFFULL;
                frame->transmission_timestamp = txd.response_timestamp & 0xFFFFFFFFULL;
#endif

                frame->dst_address = frame->src_address;
   1b4d6:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   1b4da:	f8a6 3005 	strh.w	r3, [r6, #5]
                frame->src_address = inst->my_short_address;
   1b4de:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
   1b4e2:	f8a6 3007 	strh.w	r3, [r6, #7]
                frame->code = UWB_DATA_CODE_SS_TWR_T1;
   1b4e6:	2700      	movs	r7, #0
   1b4e8:	2311      	movs	r3, #17
   1b4ea:	7273      	strb	r3, [r6, #9]
   1b4ec:	2301      	movs	r3, #1
   1b4ee:	72b3      	strb	r3, [r6, #10]

#if MYNEWT_VAL(UWB_WCS_ENABLED)
                frame->carrier_integrator  = 0l;
   1b4f0:	76f7      	strb	r7, [r6, #27]
   1b4f2:	7737      	strb	r7, [r6, #28]
   1b4f4:	7777      	strb	r7, [r6, #29]
   1b4f6:	77b7      	strb	r7, [r6, #30]
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
   1b4f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b4fa:	f8d3 8044 	ldr.w	r8, [r3, #68]	; 0x44
   1b4fe:	2313      	movs	r3, #19
   1b500:	463a      	mov	r2, r7
   1b502:	4631      	mov	r1, r6
   1b504:	4620      	mov	r0, r4
   1b506:	47c0      	blx	r8
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
   1b508:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b50a:	6c9e      	ldr	r6, [r3, #72]	; 0x48
   1b50c:	463b      	mov	r3, r7
   1b50e:	463a      	mov	r2, r7
   1b510:	2113      	movs	r1, #19
   1b512:	4620      	mov	r0, r4
   1b514:	47b0      	blx	r6
    return (dev->uw_funcs->uf_set_wait4resp(dev, enable));
   1b516:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1b51a:	2101      	movs	r1, #1
   1b51c:	4620      	mov	r0, r4
   1b51e:	4798      	blx	r3
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
   1b520:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b522:	6b59      	ldr	r1, [r3, #52]	; 0x34
   1b524:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1b528:	4620      	mov	r0, r4
   1b52a:	4788      	blx	r1
    return (dev->uw_funcs->uf_start_tx(dev));
   1b52c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b52e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b530:	4620      	mov	r0, r4
   1b532:	4798      	blx	r3
                uwb_write_tx_fctrl(inst, sizeof(ieee_rng_response_frame_t), 0);
                uwb_set_wait4resp(inst, true);
                uwb_set_delay_start(inst, txd.response_tx_delay);

                /* Start tx now, the remaining settings can be done whilst sending anyway */
                if (uwb_start_tx(inst).start_tx_error){
   1b534:	f010 0f04 	tst.w	r0, #4
   1b538:	d135      	bne.n	1b5a6 <rx_complete_cb+0x176>
                    SS_STATS_INC(tx_error);
                    dpl_sem_release(&rng->sem);
                }

                /* Setup when to listen for response, relative the end of our transmitted frame */
                uwb_set_wait4resp_delay(inst, g_config.tx_holdoff_delay -
   1b53a:	4d65      	ldr	r5, [pc, #404]	; (1b6d0 <rx_complete_cb+0x2a0>)
   1b53c:	6869      	ldr	r1, [r5, #4]
                                        inst->config.rx.timeToRxStable);
   1b53e:	f894 251b 	ldrb.w	r2, [r4, #1307]	; 0x51b
    return (dev->uw_funcs->uf_set_wait4resp_delay(dev, delay));
   1b542:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   1b546:	1a89      	subs	r1, r1, r2
   1b548:	4620      	mov	r0, r4
   1b54a:	4798      	blx	r3
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
   1b54c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b54e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1b550:	211f      	movs	r1, #31
   1b552:	4620      	mov	r0, r4
   1b554:	4798      	blx	r3
                uwb_set_rx_timeout(inst, uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst, sizeof(twr_frame_final_t))) +
   1b556:	f005 fe57 	bl	21208 <__aeabi_i2d>
   1b55a:	a35b      	add	r3, pc, #364	; (adr r3, 1b6c8 <rx_complete_cb+0x298>)
   1b55c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b560:	f005 ffe6 	bl	21530 <__aeabi_ddiv>
   1b564:	4606      	mov	r6, r0
   1b566:	460f      	mov	r7, r1
   1b568:	89a8      	ldrh	r0, [r5, #12]
   1b56a:	f005 fe4d 	bl	21208 <__aeabi_i2d>
   1b56e:	4632      	mov	r2, r6
   1b570:	463b      	mov	r3, r7
   1b572:	f005 fcfd 	bl	20f70 <__adddf3>
   1b576:	4606      	mov	r6, r0
   1b578:	460f      	mov	r7, r1
                                   g_config.rx_timeout_delay + inst->config.rx.timeToRxStable);
   1b57a:	f894 051b 	ldrb.w	r0, [r4, #1307]	; 0x51b
   1b57e:	f005 fe43 	bl	21208 <__aeabi_i2d>
   1b582:	4632      	mov	r2, r6
   1b584:	463b      	mov	r3, r7
   1b586:	f005 fcf3 	bl	20f70 <__adddf3>
                uwb_set_rx_timeout(inst, uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst, sizeof(twr_frame_final_t))) +
   1b58a:	f006 f97f 	bl	2188c <__aeabi_d2uiz>
   1b58e:	4601      	mov	r1, r0
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
   1b590:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b594:	4620      	mov	r0, r4
   1b596:	4798      	blx	r3
    return (dev->uw_funcs->uf_set_rxauto_disable(dev, disable));
   1b598:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b59a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1b59c:	2101      	movs	r1, #1
   1b59e:	4620      	mov	r0, r4
   1b5a0:	4798      	blx	r3
        default:
                return false;
                break;
    }

    return true;
   1b5a2:	2001      	movs	r0, #1
   1b5a4:	e08b      	b.n	1b6be <rx_complete_cb+0x28e>
                    SS_STATS_INC(tx_error);
   1b5a6:	4a4b      	ldr	r2, [pc, #300]	; (1b6d4 <rx_complete_cb+0x2a4>)
   1b5a8:	6993      	ldr	r3, [r2, #24]
   1b5aa:	3301      	adds	r3, #1
   1b5ac:	6193      	str	r3, [r2, #24]
   1b5ae:	f105 0050 	add.w	r0, r5, #80	; 0x50
   1b5b2:	f7ee fc6b 	bl	9e8c <os_sem_release>
   1b5b6:	e7c0      	b.n	1b53a <rx_complete_cb+0x10a>
                uint64_t response_timestamp = inst->rxtimestamp;
   1b5b8:	f500 639e 	add.w	r3, r0, #1264	; 0x4f0
   1b5bc:	e953 8902 	ldrd	r8, r9, [r3, #-8]
                if (inst->frame_len != sizeof(ieee_rng_response_frame_t))
   1b5c0:	f8b0 34e2 	ldrh.w	r3, [r0, #1250]	; 0x4e2
   1b5c4:	2b13      	cmp	r3, #19
   1b5c6:	d001      	beq.n	1b5cc <rx_complete_cb+0x19c>
    return true;
   1b5c8:	2001      	movs	r0, #1
   1b5ca:	e078      	b.n	1b6be <rx_complete_cb+0x28e>
                if(inst->status.lde_error)
   1b5cc:	f890 2509 	ldrb.w	r2, [r0, #1289]	; 0x509
   1b5d0:	f012 0f04 	tst.w	r2, #4
   1b5d4:	d1f8      	bne.n	1b5c8 <rx_complete_cb+0x198>
                uwb_rng_calc_rel_tx(rng, &txd, &g_config, response_timestamp, inst->frame_len);
   1b5d6:	9302      	str	r3, [sp, #8]
   1b5d8:	e9cd 8900 	strd	r8, r9, [sp]
   1b5dc:	4a3c      	ldr	r2, [pc, #240]	; (1b6d0 <rx_complete_cb+0x2a0>)
   1b5de:	a904      	add	r1, sp, #16
   1b5e0:	4628      	mov	r0, r5
   1b5e2:	f7f1 f98d 	bl	c900 <uwb_rng_calc_rel_tx>
                struct uwb_wcs_instance * wcs = rng->ccp_inst->wcs;
   1b5e6:	686b      	ldr	r3, [r5, #4]
   1b5e8:	6e9f      	ldr	r7, [r3, #104]	; 0x68
    return (dev->uw_funcs->uf_read_txtime(dev));
   1b5ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b5ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   1b5ee:	4620      	mov	r0, r4
   1b5f0:	4798      	blx	r3
   1b5f2:	4602      	mov	r2, r0
   1b5f4:	460b      	mov	r3, r1
                frame->request_timestamp = (uint32_t)(uwb_wcs_local_to_master(wcs, uwb_read_txtime(inst))) & 0xFFFFFFFFULL;
   1b5f6:	4638      	mov	r0, r7
   1b5f8:	f7f2 f86a 	bl	d6d0 <uwb_wcs_local_to_master>
   1b5fc:	f8c6 0013 	str.w	r0, [r6, #19]
                frame->response_timestamp = (uint32_t)(uwb_wcs_local_to_master(wcs, response_timestamp)) & 0xFFFFFFFFULL;
   1b600:	4642      	mov	r2, r8
   1b602:	464b      	mov	r3, r9
   1b604:	4638      	mov	r0, r7
   1b606:	f7f2 f863 	bl	d6d0 <uwb_wcs_local_to_master>
   1b60a:	f8c6 0017 	str.w	r0, [r6, #23]
                frame->dst_address = frame->src_address;
   1b60e:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   1b612:	f8a6 3005 	strh.w	r3, [r6, #5]
                frame->src_address = inst->my_short_address;
   1b616:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
   1b61a:	f8a6 3007 	strh.w	r3, [r6, #7]
                frame->code = UWB_DATA_CODE_SS_TWR_FINAL;
   1b61e:	2700      	movs	r7, #0
   1b620:	2312      	movs	r3, #18
   1b622:	7273      	strb	r3, [r6, #9]
   1b624:	2301      	movs	r3, #1
   1b626:	72b3      	strb	r3, [r6, #10]
                frame->carrier_integrator = inst->carrier_integrator;
   1b628:	f8d4 34f0 	ldr.w	r3, [r4, #1264]	; 0x4f0
   1b62c:	f8c6 301b 	str.w	r3, [r6, #27]
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
   1b630:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b632:	f8d3 8044 	ldr.w	r8, [r3, #68]	; 0x44
   1b636:	231f      	movs	r3, #31
   1b638:	463a      	mov	r2, r7
   1b63a:	4631      	mov	r1, r6
   1b63c:	4620      	mov	r0, r4
   1b63e:	47c0      	blx	r8
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
   1b640:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b642:	6c9e      	ldr	r6, [r3, #72]	; 0x48
   1b644:	463b      	mov	r3, r7
   1b646:	463a      	mov	r2, r7
   1b648:	211f      	movs	r1, #31
   1b64a:	4620      	mov	r0, r4
   1b64c:	47b0      	blx	r6
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
   1b64e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b650:	6b59      	ldr	r1, [r3, #52]	; 0x34
   1b652:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1b656:	4620      	mov	r0, r4
   1b658:	4788      	blx	r1
    return (dev->uw_funcs->uf_start_tx(dev));
   1b65a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b65c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b65e:	4620      	mov	r0, r4
   1b660:	4798      	blx	r3
                if (uwb_start_tx(inst).start_tx_error) {
   1b662:	f010 0f04 	tst.w	r0, #4
   1b666:	d10a      	bne.n	1b67e <rx_complete_cb+0x24e>
                    SS_STATS_INC(complete);
   1b668:	4a1a      	ldr	r2, [pc, #104]	; (1b6d4 <rx_complete_cb+0x2a4>)
   1b66a:	6953      	ldr	r3, [r2, #20]
   1b66c:	3301      	adds	r3, #1
   1b66e:	6153      	str	r3, [r2, #20]
                    rng->control.complete_after_tx = 1;
   1b670:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
   1b674:	f043 0302 	orr.w	r3, r3, #2
   1b678:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
   1b67c:	e7a4      	b.n	1b5c8 <rx_complete_cb+0x198>
                    SS_STATS_INC(tx_error);
   1b67e:	4a15      	ldr	r2, [pc, #84]	; (1b6d4 <rx_complete_cb+0x2a4>)
   1b680:	6993      	ldr	r3, [r2, #24]
   1b682:	3301      	adds	r3, #1
   1b684:	6193      	str	r3, [r2, #24]
   1b686:	f105 0050 	add.w	r0, r5, #80	; 0x50
   1b68a:	f7ee fbff 	bl	9e8c <os_sem_release>
                    rng_issue_complete(inst);
   1b68e:	4620      	mov	r0, r4
   1b690:	f7f1 fb86 	bl	cda0 <rng_issue_complete>
   1b694:	e798      	b.n	1b5c8 <rx_complete_cb+0x198>
                if (inst->frame_len != sizeof(twr_frame_final_t))
   1b696:	f8b0 34e2 	ldrh.w	r3, [r0, #1250]	; 0x4e2
   1b69a:	2b1f      	cmp	r3, #31
   1b69c:	d001      	beq.n	1b6a2 <rx_complete_cb+0x272>
    return true;
   1b69e:	2001      	movs	r0, #1
   1b6a0:	e00d      	b.n	1b6be <rx_complete_cb+0x28e>
                SS_STATS_INC(complete);
   1b6a2:	4a0c      	ldr	r2, [pc, #48]	; (1b6d4 <rx_complete_cb+0x2a4>)
   1b6a4:	6953      	ldr	r3, [r2, #20]
   1b6a6:	3301      	adds	r3, #1
   1b6a8:	6153      	str	r3, [r2, #20]
   1b6aa:	f105 0050 	add.w	r0, r5, #80	; 0x50
   1b6ae:	f7ee fbed 	bl	9e8c <os_sem_release>
                rng_issue_complete(inst);
   1b6b2:	4620      	mov	r0, r4
   1b6b4:	f7f1 fb74 	bl	cda0 <rng_issue_complete>
    return true;
   1b6b8:	2001      	movs	r0, #1
                break;
   1b6ba:	e000      	b.n	1b6be <rx_complete_cb+0x28e>
        return false;
   1b6bc:	2000      	movs	r0, #0
}
   1b6be:	b009      	add	sp, #36	; 0x24
   1b6c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return false;
   1b6c4:	2000      	movs	r0, #0
   1b6c6:	e7fa      	b.n	1b6be <rx_complete_cb+0x28e>
   1b6c8:	90690691 	.word	0x90690691
   1b6cc:	3ff06906 	.word	0x3ff06906
   1b6d0:	20000e6c 	.word	0x20000e6c
   1b6d4:	20004600 	.word	0x20004600

0001b6d8 <twr_ss_pkg_init>:
{
   1b6d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b6da:	b083      	sub	sp, #12
    printf("{\"utime\": %"PRIu32",\"msg\": \"twr_ss_pkg_init\"}\n",
   1b6dc:	f7f2 fe29 	bl	e332 <dpl_cputime_get32>
   1b6e0:	4601      	mov	r1, r0
   1b6e2:	481e      	ldr	r0, [pc, #120]	; (1b75c <twr_ss_pkg_init+0x84>)
   1b6e4:	f7f2 fda0 	bl	e228 <printf>
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   1b6e8:	2400      	movs	r4, #0
   1b6ea:	b18c      	cbz	r4, 1b710 <twr_ss_pkg_init+0x38>
    rc = stats_init(
   1b6ec:	2202      	movs	r2, #2
   1b6ee:	9200      	str	r2, [sp, #0]
   1b6f0:	4b1b      	ldr	r3, [pc, #108]	; (1b760 <twr_ss_pkg_init+0x88>)
   1b6f2:	2104      	movs	r1, #4
   1b6f4:	481b      	ldr	r0, [pc, #108]	; (1b764 <twr_ss_pkg_init+0x8c>)
   1b6f6:	f7f5 fc0f 	bl	10f18 <stats_init>
    assert(rc == 0);
   1b6fa:	4604      	mov	r4, r0
   1b6fc:	bb10      	cbnz	r0, 1b744 <twr_ss_pkg_init+0x6c>
    rc |= stats_register("twr_ss", STATS_HDR(g_twr_ss_stat));
   1b6fe:	4919      	ldr	r1, [pc, #100]	; (1b764 <twr_ss_pkg_init+0x8c>)
   1b700:	4819      	ldr	r0, [pc, #100]	; (1b768 <twr_ss_pkg_init+0x90>)
   1b702:	f7f5 fc93 	bl	1102c <stats_register>
    assert(rc == 0);
   1b706:	ea54 0300 	orrs.w	r3, r4, r0
   1b70a:	d121      	bne.n	1b750 <twr_ss_pkg_init+0x78>
}
   1b70c:	b003      	add	sp, #12
   1b70e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        udev = uwb_dev_idx_lookup(i);
   1b710:	4620      	mov	r0, r4
   1b712:	f7ed f9f1 	bl	8af8 <uwb_dev_idx_lookup>
        if (!udev) {
   1b716:	4607      	mov	r7, r0
   1b718:	b190      	cbz	r0, 1b740 <twr_ss_pkg_init+0x68>
        g_cbs[i].inst_ptr = (struct uwb_rng_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_RNG);
   1b71a:	2104      	movs	r1, #4
   1b71c:	f7ed fa71 	bl	8c02 <uwb_mac_find_cb_inst_ptr>
   1b720:	0126      	lsls	r6, r4, #4
   1b722:	ebc4 1504 	rsb	r5, r4, r4, lsl #4
   1b726:	4b11      	ldr	r3, [pc, #68]	; (1b76c <twr_ss_pkg_init+0x94>)
   1b728:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   1b72c:	6068      	str	r0, [r5, #4]
        uwb_mac_append_interface(udev, &g_cbs[i]);
   1b72e:	4629      	mov	r1, r5
   1b730:	4638      	mov	r0, r7
   1b732:	f7ed fa11 	bl	8b58 <uwb_mac_append_interface>
        uwb_rng_append_config(g_cbs[i].inst_ptr, &g_rng_cfgs[i]);
   1b736:	490e      	ldr	r1, [pc, #56]	; (1b770 <twr_ss_pkg_init+0x98>)
   1b738:	4431      	add	r1, r6
   1b73a:	6868      	ldr	r0, [r5, #4]
   1b73c:	f7f1 f8a8 	bl	c890 <uwb_rng_append_config>
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   1b740:	3401      	adds	r4, #1
   1b742:	e7d2      	b.n	1b6ea <twr_ss_pkg_init+0x12>
    assert(rc == 0);
   1b744:	2300      	movs	r3, #0
   1b746:	461a      	mov	r2, r3
   1b748:	4619      	mov	r1, r3
   1b74a:	4618      	mov	r0, r3
   1b74c:	f7ed fc7e 	bl	904c <__assert_func>
    assert(rc == 0);
   1b750:	2300      	movs	r3, #0
   1b752:	461a      	mov	r2, r3
   1b754:	4619      	mov	r1, r3
   1b756:	4618      	mov	r0, r3
   1b758:	f7ed fc78 	bl	904c <__assert_func>
   1b75c:	00024780 	.word	0x00024780
   1b760:	000247b4 	.word	0x000247b4
   1b764:	20004600 	.word	0x20004600
   1b768:	000247ac 	.word	0x000247ac
   1b76c:	20000e30 	.word	0x20000e30
   1b770:	20000e7c 	.word	0x20000e7c

0001b774 <twr_ss_free>:
{
   1b774:	b508      	push	{r3, lr}
    assert(dev);
   1b776:	b118      	cbz	r0, 1b780 <twr_ss_free+0xc>
    uwb_mac_remove_interface(dev, UWBEXT_RNG_SS);
   1b778:	2105      	movs	r1, #5
   1b77a:	f7ed fa12 	bl	8ba2 <uwb_mac_remove_interface>
}
   1b77e:	bd08      	pop	{r3, pc}
    assert(dev);
   1b780:	2300      	movs	r3, #0
   1b782:	461a      	mov	r2, r3
   1b784:	4619      	mov	r1, r3
   1b786:	4618      	mov	r0, r3
   1b788:	f7ed fc60 	bl	904c <__assert_func>

0001b78c <twr_ss_pkg_down>:
{
   1b78c:	b538      	push	{r3, r4, r5, lr}
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   1b78e:	2400      	movs	r4, #0
   1b790:	b10c      	cbz	r4, 1b796 <twr_ss_pkg_down+0xa>
}
   1b792:	2000      	movs	r0, #0
   1b794:	bd38      	pop	{r3, r4, r5, pc}
        rng = (struct uwb_rng_instance *)g_cbs[i].inst_ptr;
   1b796:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   1b79a:	009a      	lsls	r2, r3, #2
   1b79c:	4b07      	ldr	r3, [pc, #28]	; (1b7bc <twr_ss_pkg_down+0x30>)
   1b79e:	4413      	add	r3, r2
   1b7a0:	685d      	ldr	r5, [r3, #4]
        if (!rng) continue;
   1b7a2:	b145      	cbz	r5, 1b7b6 <twr_ss_pkg_down+0x2a>
        uwb_rng_remove_config(g_cbs[i].inst_ptr, g_rng_cfgs[i].rng_code);
   1b7a4:	0123      	lsls	r3, r4, #4
   1b7a6:	4a06      	ldr	r2, [pc, #24]	; (1b7c0 <twr_ss_pkg_down+0x34>)
   1b7a8:	5ad1      	ldrh	r1, [r2, r3]
   1b7aa:	4628      	mov	r0, r5
   1b7ac:	f7f1 f889 	bl	c8c2 <uwb_rng_remove_config>
        twr_ss_free(rng->dev_inst);
   1b7b0:	6828      	ldr	r0, [r5, #0]
   1b7b2:	f7ff ffdf 	bl	1b774 <twr_ss_free>
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   1b7b6:	3401      	adds	r4, #1
   1b7b8:	e7ea      	b.n	1b790 <twr_ss_pkg_down+0x4>
   1b7ba:	bf00      	nop
   1b7bc:	20000e30 	.word	0x20000e30
   1b7c0:	20000e7c 	.word	0x20000e7c
   1b7c4:	00000000 	.word	0x00000000

0001b7c8 <rx_complete_cb>:
 *
 * @return true on sucess
 */
static bool
rx_complete_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
   1b7c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b7cc:	4605      	mov	r5, r0
    twr_frame_t * frame;
    if (inst->fctrl != FCNTL_IEEE_RANGE_16 &&
   1b7ce:	f8b0 34e0 	ldrh.w	r3, [r0, #1248]	; 0x4e0
   1b7d2:	f648 0241 	movw	r2, #34881	; 0x8841
   1b7d6:	4293      	cmp	r3, r2
   1b7d8:	d006      	beq.n	1b7e8 <rx_complete_cb+0x20>
   1b7da:	f648 0261 	movw	r2, #34913	; 0x8861
   1b7de:	4293      	cmp	r3, r2
   1b7e0:	d002      	beq.n	1b7e8 <rx_complete_cb+0x20>
        inst->fctrl != (FCNTL_IEEE_RANGE_16|UWB_FCTRL_ACK_REQUESTED) &&
   1b7e2:	2b02      	cmp	r3, #2
   1b7e4:	f040 8128 	bne.w	1ba38 <rx_complete_cb+0x270>
        inst->fctrl != UWB_FCTRL_FRAME_TYPE_ACK) {
        return false;
    }

    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
   1b7e8:	684c      	ldr	r4, [r1, #4]
    assert(rng);
   1b7ea:	b394      	cbz	r4, 1b852 <rx_complete_cb+0x8a>
   1b7ec:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
    if(dpl_sem_get_count(&rng->sem) == 1) // unsolicited inbound
   1b7f0:	2a01      	cmp	r2, #1
   1b7f2:	f000 8123 	beq.w	1ba3c <rx_complete_cb+0x274>
        return false;

    if (inst->fctrl == UWB_FCTRL_FRAME_TYPE_ACK && !rng->status.rx_ack_expected) {
   1b7f6:	2b02      	cmp	r3, #2
   1b7f8:	d031      	beq.n	1b85e <rx_complete_cb+0x96>
        return false;
    }
    rng->status.rx_ack_expected = 0;
   1b7fa:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   1b7fe:	f36f 1345 	bfc	r3, #5, #1
   1b802:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
    rng->status.tx_ack_expected = 0;
   1b806:	b2db      	uxtb	r3, r3
   1b808:	f36f 1304 	bfc	r3, #4, #1
   1b80c:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
    frame = rng->frames[(rng->idx)%rng->nframes]; // Frame already read within loader layers.
   1b810:	f8b4 3076 	ldrh.w	r3, [r4, #118]	; 0x76
   1b814:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
   1b818:	fbb3 f1f2 	udiv	r1, r3, r2
   1b81c:	fb02 3311 	mls	r3, r2, r1, r3
   1b820:	b29b      	uxth	r3, r3
   1b822:	3326      	adds	r3, #38	; 0x26
   1b824:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   1b828:	685e      	ldr	r6, [r3, #4]

    /* Receive the ack response from the other side and store timestamp */
    if (inst->fctrl == UWB_FCTRL_FRAME_TYPE_ACK) {
   1b82a:	f8b5 34e0 	ldrh.w	r3, [r5, #1248]	; 0x4e0
   1b82e:	2b02      	cmp	r3, #2
   1b830:	d01c      	beq.n	1b86c <rx_complete_cb+0xa4>
        /* Need to set, not just adjust, timeout here */
        uwb_set_rx_timeout(inst, g_config.tx_holdoff_delay + frame_duration + g_config.rx_timeout_delay);
        return true;
    }

    switch(rng->code){
   1b832:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
   1b836:	f240 1219 	movw	r2, #281	; 0x119
   1b83a:	4293      	cmp	r3, r2
   1b83c:	d07c      	beq.n	1b938 <rx_complete_cb+0x170>
   1b83e:	f5b3 7f8d 	cmp.w	r3, #282	; 0x11a
   1b842:	f000 80e6 	beq.w	1ba12 <rx_complete_cb+0x24a>
   1b846:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
   1b84a:	d040      	beq.n	1b8ce <rx_complete_cb+0x106>
   1b84c:	2000      	movs	r0, #0
                return false;
                break;
    }

    return true;
}
   1b84e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    assert(rng);
   1b852:	2300      	movs	r3, #0
   1b854:	461a      	mov	r2, r3
   1b856:	4619      	mov	r1, r3
   1b858:	4618      	mov	r0, r3
   1b85a:	f7ed fbf7 	bl	904c <__assert_func>
    if (inst->fctrl == UWB_FCTRL_FRAME_TYPE_ACK && !rng->status.rx_ack_expected) {
   1b85e:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   1b862:	f013 0f20 	tst.w	r3, #32
   1b866:	d1c8      	bne.n	1b7fa <rx_complete_cb+0x32>
        return false;
   1b868:	2000      	movs	r0, #0
   1b86a:	e7f0      	b.n	1b84e <rx_complete_cb+0x86>
        if (inst->rxbuf[2] != (rng->seq_num&0xff)) {
   1b86c:	f8d5 34fc 	ldr.w	r3, [r5, #1276]	; 0x4fc
   1b870:	789a      	ldrb	r2, [r3, #2]
   1b872:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
   1b876:	429a      	cmp	r2, r3
   1b878:	d11f      	bne.n	1b8ba <rx_complete_cb+0xf2>
        rng->ack_rx_timestamp = inst->rxtimestamp;
   1b87a:	f505 639e 	add.w	r3, r5, #1264	; 0x4f0
   1b87e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   1b882:	e9c4 2320 	strd	r2, r3, [r4, #128]	; 0x80
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
   1b886:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1b888:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1b88a:	2113      	movs	r1, #19
   1b88c:	4628      	mov	r0, r5
   1b88e:	4798      	blx	r3
        uint16_t frame_duration = uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst,sizeof(ieee_rng_response_frame_t)));
   1b890:	f005 fcba 	bl	21208 <__aeabi_i2d>
   1b894:	a36e      	add	r3, pc, #440	; (adr r3, 1ba50 <rx_complete_cb+0x288>)
   1b896:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b89a:	f005 fe49 	bl	21530 <__aeabi_ddiv>
   1b89e:	f005 fff5 	bl	2188c <__aeabi_d2uiz>
        uwb_set_rx_timeout(inst, g_config.tx_holdoff_delay + frame_duration + g_config.rx_timeout_delay);
   1b8a2:	4b69      	ldr	r3, [pc, #420]	; (1ba48 <rx_complete_cb+0x280>)
   1b8a4:	6859      	ldr	r1, [r3, #4]
   1b8a6:	fa11 f080 	uxtah	r0, r1, r0
   1b8aa:	8999      	ldrh	r1, [r3, #12]
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
   1b8ac:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1b8ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b8b0:	4401      	add	r1, r0
   1b8b2:	4628      	mov	r0, r5
   1b8b4:	4798      	blx	r3
        return true;
   1b8b6:	2001      	movs	r0, #1
   1b8b8:	e7c9      	b.n	1b84e <rx_complete_cb+0x86>
            SS_STATS_INC(ack_seq_err);
   1b8ba:	4a64      	ldr	r2, [pc, #400]	; (1ba4c <rx_complete_cb+0x284>)
   1b8bc:	6a53      	ldr	r3, [r2, #36]	; 0x24
   1b8be:	3301      	adds	r3, #1
   1b8c0:	6253      	str	r3, [r2, #36]	; 0x24
   1b8c2:	f104 0050 	add.w	r0, r4, #80	; 0x50
   1b8c6:	f7ee fae1 	bl	9e8c <os_sem_release>
            return false;
   1b8ca:	2000      	movs	r0, #0
   1b8cc:	e7bf      	b.n	1b84e <rx_complete_cb+0x86>
                if (!inst->status.autoack_triggered) {
   1b8ce:	f895 3509 	ldrb.w	r3, [r5, #1289]	; 0x509
   1b8d2:	f013 0f40 	tst.w	r3, #64	; 0x40
   1b8d6:	d025      	beq.n	1b924 <rx_complete_cb+0x15c>
                uint64_t request_timestamp = inst->rxtimestamp;
   1b8d8:	f505 639e 	add.w	r3, r5, #1264	; 0x4f0
                struct uwb_wcs_instance * wcs = rng->ccp_inst->wcs;
   1b8dc:	6861      	ldr	r1, [r4, #4]
                frame->reception_timestamp = (uint32_t)(uwb_wcs_local_to_master(wcs, request_timestamp)) & 0xFFFFFFFFULL;
   1b8de:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   1b8e2:	6e88      	ldr	r0, [r1, #104]	; 0x68
   1b8e4:	f7f1 fef4 	bl	d6d0 <uwb_wcs_local_to_master>
   1b8e8:	f8c6 000b 	str.w	r0, [r6, #11]
                frame->fctrl = FCNTL_IEEE_RANGE_16;
   1b8ec:	f648 0341 	movw	r3, #34881	; 0x8841
   1b8f0:	8033      	strh	r3, [r6, #0]
                frame->dst_address = frame->src_address;
   1b8f2:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   1b8f6:	f8a6 3005 	strh.w	r3, [r6, #5]
                frame->src_address = inst->my_short_address;
   1b8fa:	f8b5 34b6 	ldrh.w	r3, [r5, #1206]	; 0x4b6
   1b8fe:	f8a6 3007 	strh.w	r3, [r6, #7]
                frame->code = UWB_DATA_CODE_SS_TWR_ACK_T1;
   1b902:	2300      	movs	r3, #0
   1b904:	2219      	movs	r2, #25
   1b906:	7272      	strb	r2, [r6, #9]
   1b908:	2201      	movs	r2, #1
   1b90a:	72b2      	strb	r2, [r6, #10]
                frame->carrier_integrator  = 0l;
   1b90c:	76f3      	strb	r3, [r6, #27]
   1b90e:	7733      	strb	r3, [r6, #28]
   1b910:	7773      	strb	r3, [r6, #29]
   1b912:	77b3      	strb	r3, [r6, #30]
                rng->status.tx_ack_expected = 1;
   1b914:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   1b918:	f043 0310 	orr.w	r3, r3, #16
   1b91c:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
    return true;
   1b920:	4610      	mov	r0, r2
                break;
   1b922:	e794      	b.n	1b84e <rx_complete_cb+0x86>
                    SS_STATS_INC(ack_tx_err);
   1b924:	4a49      	ldr	r2, [pc, #292]	; (1ba4c <rx_complete_cb+0x284>)
   1b926:	69d3      	ldr	r3, [r2, #28]
   1b928:	3301      	adds	r3, #1
   1b92a:	61d3      	str	r3, [r2, #28]
   1b92c:	f104 0050 	add.w	r0, r4, #80	; 0x50
   1b930:	f7ee faac 	bl	9e8c <os_sem_release>
                    return true;
   1b934:	2001      	movs	r0, #1
   1b936:	e78a      	b.n	1b84e <rx_complete_cb+0x86>
                if (inst->frame_len != sizeof(ieee_rng_response_frame_t))
   1b938:	f8b5 34e2 	ldrh.w	r3, [r5, #1250]	; 0x4e2
   1b93c:	2b13      	cmp	r3, #19
   1b93e:	d001      	beq.n	1b944 <rx_complete_cb+0x17c>
    return true;
   1b940:	2001      	movs	r0, #1
   1b942:	e784      	b.n	1b84e <rx_complete_cb+0x86>
                if(inst->status.lde_error)
   1b944:	f895 3509 	ldrb.w	r3, [r5, #1289]	; 0x509
   1b948:	f013 0f04 	tst.w	r3, #4
   1b94c:	d178      	bne.n	1ba40 <rx_complete_cb+0x278>
                uint64_t response_timestamp = rng->ack_rx_timestamp;
   1b94e:	e9d4 8920 	ldrd	r8, r9, [r4, #128]	; 0x80
                struct uwb_wcs_instance * wcs = rng->ccp_inst->wcs;
   1b952:	6863      	ldr	r3, [r4, #4]
   1b954:	6e9f      	ldr	r7, [r3, #104]	; 0x68
    return (dev->uw_funcs->uf_read_txtime(dev));
   1b956:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1b958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   1b95a:	4628      	mov	r0, r5
   1b95c:	4798      	blx	r3
   1b95e:	4602      	mov	r2, r0
   1b960:	460b      	mov	r3, r1
                frame->request_timestamp = (uint32_t)(uwb_wcs_local_to_master(wcs, uwb_read_txtime(inst))) & 0xFFFFFFFFULL;
   1b962:	4638      	mov	r0, r7
   1b964:	f7f1 feb4 	bl	d6d0 <uwb_wcs_local_to_master>
   1b968:	f8c6 0013 	str.w	r0, [r6, #19]
                frame->response_timestamp = (uint32_t)(uwb_wcs_local_to_master(wcs, response_timestamp)) & 0xFFFFFFFFULL;
   1b96c:	4642      	mov	r2, r8
   1b96e:	464b      	mov	r3, r9
   1b970:	4638      	mov	r0, r7
   1b972:	f7f1 fead 	bl	d6d0 <uwb_wcs_local_to_master>
   1b976:	f8c6 0017 	str.w	r0, [r6, #23]
                if (!rng->ack_rx_timestamp) {
   1b97a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
   1b97e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   1b982:	4313      	orrs	r3, r2
   1b984:	d105      	bne.n	1b992 <rx_complete_cb+0x1ca>
                    SS_STATS_INC(ack_rx_err);
   1b986:	4a31      	ldr	r2, [pc, #196]	; (1ba4c <rx_complete_cb+0x284>)
   1b988:	6a13      	ldr	r3, [r2, #32]
   1b98a:	3301      	adds	r3, #1
   1b98c:	6213      	str	r3, [r2, #32]
    return true;
   1b98e:	2001      	movs	r0, #1
                    break;
   1b990:	e75d      	b.n	1b84e <rx_complete_cb+0x86>
                frame->dst_address = frame->src_address;
   1b992:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   1b996:	f8a6 3005 	strh.w	r3, [r6, #5]
                frame->src_address = inst->my_short_address;
   1b99a:	f8b5 34b6 	ldrh.w	r3, [r5, #1206]	; 0x4b6
   1b99e:	f8a6 3007 	strh.w	r3, [r6, #7]
                frame->code = UWB_DATA_CODE_SS_TWR_ACK_FINAL;
   1b9a2:	2700      	movs	r7, #0
   1b9a4:	231a      	movs	r3, #26
   1b9a6:	7273      	strb	r3, [r6, #9]
   1b9a8:	2301      	movs	r3, #1
   1b9aa:	72b3      	strb	r3, [r6, #10]
                frame->carrier_integrator  = inst->carrier_integrator;
   1b9ac:	f8d5 34f0 	ldr.w	r3, [r5, #1264]	; 0x4f0
   1b9b0:	f8c6 301b 	str.w	r3, [r6, #27]
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
   1b9b4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1b9b6:	f8d3 8044 	ldr.w	r8, [r3, #68]	; 0x44
   1b9ba:	231f      	movs	r3, #31
   1b9bc:	463a      	mov	r2, r7
   1b9be:	4631      	mov	r1, r6
   1b9c0:	4628      	mov	r0, r5
   1b9c2:	47c0      	blx	r8
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
   1b9c4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1b9c6:	6c9e      	ldr	r6, [r3, #72]	; 0x48
   1b9c8:	463b      	mov	r3, r7
   1b9ca:	463a      	mov	r2, r7
   1b9cc:	211f      	movs	r1, #31
   1b9ce:	4628      	mov	r0, r5
   1b9d0:	47b0      	blx	r6
    return (dev->uw_funcs->uf_start_tx(dev));
   1b9d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1b9d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b9d6:	4628      	mov	r0, r5
   1b9d8:	4798      	blx	r3
                if (uwb_start_tx(inst).start_tx_error) {
   1b9da:	f010 0f04 	tst.w	r0, #4
   1b9de:	d10b      	bne.n	1b9f8 <rx_complete_cb+0x230>
                    SS_STATS_INC(complete);
   1b9e0:	4a1a      	ldr	r2, [pc, #104]	; (1ba4c <rx_complete_cb+0x284>)
   1b9e2:	6953      	ldr	r3, [r2, #20]
   1b9e4:	3301      	adds	r3, #1
   1b9e6:	6153      	str	r3, [r2, #20]
                    rng->control.complete_after_tx = 1;
   1b9e8:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   1b9ec:	f043 0302 	orr.w	r3, r3, #2
   1b9f0:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    return true;
   1b9f4:	2001      	movs	r0, #1
   1b9f6:	e72a      	b.n	1b84e <rx_complete_cb+0x86>
                    SS_STATS_INC(tx_error);
   1b9f8:	4a14      	ldr	r2, [pc, #80]	; (1ba4c <rx_complete_cb+0x284>)
   1b9fa:	6993      	ldr	r3, [r2, #24]
   1b9fc:	3301      	adds	r3, #1
   1b9fe:	6193      	str	r3, [r2, #24]
   1ba00:	f104 0050 	add.w	r0, r4, #80	; 0x50
   1ba04:	f7ee fa42 	bl	9e8c <os_sem_release>
                    rng_issue_complete(inst);
   1ba08:	4628      	mov	r0, r5
   1ba0a:	f7f1 f9c9 	bl	cda0 <rng_issue_complete>
    return true;
   1ba0e:	2001      	movs	r0, #1
   1ba10:	e71d      	b.n	1b84e <rx_complete_cb+0x86>
                if (inst->frame_len != sizeof(twr_frame_final_t))
   1ba12:	f8b5 34e2 	ldrh.w	r3, [r5, #1250]	; 0x4e2
   1ba16:	2b1f      	cmp	r3, #31
   1ba18:	d001      	beq.n	1ba1e <rx_complete_cb+0x256>
    return true;
   1ba1a:	2001      	movs	r0, #1
   1ba1c:	e717      	b.n	1b84e <rx_complete_cb+0x86>
                SS_STATS_INC(complete);
   1ba1e:	4a0b      	ldr	r2, [pc, #44]	; (1ba4c <rx_complete_cb+0x284>)
   1ba20:	6953      	ldr	r3, [r2, #20]
   1ba22:	3301      	adds	r3, #1
   1ba24:	6153      	str	r3, [r2, #20]
   1ba26:	f104 0050 	add.w	r0, r4, #80	; 0x50
   1ba2a:	f7ee fa2f 	bl	9e8c <os_sem_release>
                rng_issue_complete(inst);
   1ba2e:	4628      	mov	r0, r5
   1ba30:	f7f1 f9b6 	bl	cda0 <rng_issue_complete>
    return true;
   1ba34:	2001      	movs	r0, #1
                break;
   1ba36:	e70a      	b.n	1b84e <rx_complete_cb+0x86>
        return false;
   1ba38:	2000      	movs	r0, #0
   1ba3a:	e708      	b.n	1b84e <rx_complete_cb+0x86>
        return false;
   1ba3c:	2000      	movs	r0, #0
   1ba3e:	e706      	b.n	1b84e <rx_complete_cb+0x86>
    return true;
   1ba40:	2001      	movs	r0, #1
   1ba42:	e704      	b.n	1b84e <rx_complete_cb+0x86>
   1ba44:	f3af 8000 	nop.w
   1ba48:	20000ec8 	.word	0x20000ec8
   1ba4c:	2000461c 	.word	0x2000461c
   1ba50:	90690691 	.word	0x90690691
   1ba54:	3ff06906 	.word	0x3ff06906

0001ba58 <tx_complete_cb>:

static bool
tx_complete_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
   1ba58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
   1ba5c:	684c      	ldr	r4, [r1, #4]
    assert(rng);
   1ba5e:	b33c      	cbz	r4, 1bab0 <tx_complete_cb+0x58>
   1ba60:	4605      	mov	r5, r0
   1ba62:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
    if(dpl_sem_get_count(&rng->sem) == 1) // unsolicited inbound
   1ba66:	2b01      	cmp	r3, #1
   1ba68:	f000 8096 	beq.w	1bb98 <tx_complete_cb+0x140>
        return false;

    if (rng->status.tx_ack_expected != 1) {
   1ba6c:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   1ba70:	f013 0f10 	tst.w	r3, #16
   1ba74:	f000 8092 	beq.w	1bb9c <tx_complete_cb+0x144>
        return false;
    }
    rng->status.tx_ack_expected = 0;
   1ba78:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   1ba7c:	f36f 1304 	bfc	r3, #4, #1
   1ba80:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72

    twr_frame_t * frame = rng->frames[(rng->idx)%rng->nframes]; // Frame already read in rx_complete_cb
   1ba84:	f8b4 3076 	ldrh.w	r3, [r4, #118]	; 0x76
   1ba88:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
   1ba8c:	fbb3 f1f2 	udiv	r1, r3, r2
   1ba90:	fb02 3311 	mls	r3, r2, r1, r3
   1ba94:	b29b      	uxth	r3, r3
   1ba96:	3326      	adds	r3, #38	; 0x26
   1ba98:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   1ba9c:	f8d3 a004 	ldr.w	sl, [r3, #4]

    if (rng->code == UWB_DATA_CODE_SS_TWR_ACK) {
   1baa0:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
   1baa4:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
   1baa8:	d008      	beq.n	1babc <tx_complete_cb+0x64>
        if (uwb_start_tx(inst).start_tx_error){
            SS_STATS_INC(tx_error);
            dpl_sem_release(&rng->sem);
        }
    }
    return true;
   1baaa:	2001      	movs	r0, #1
}
   1baac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(rng);
   1bab0:	2300      	movs	r3, #0
   1bab2:	461a      	mov	r2, r3
   1bab4:	4619      	mov	r1, r3
   1bab6:	4618      	mov	r0, r3
   1bab8:	f7ed fac8 	bl	904c <__assert_func>
    return (dev->uw_funcs->uf_read_txtime(dev));
   1babc:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1babe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   1bac0:	4798      	blx	r3
   1bac2:	4606      	mov	r6, r0
   1bac4:	4688      	mov	r8, r1
    return (dev->uw_funcs->uf_read_systime(dev));
   1bac6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1bac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1baca:	4628      	mov	r0, r5
   1bacc:	4798      	blx	r3
   1bace:	4607      	mov	r7, r0
   1bad0:	4689      	mov	r9, r1
        struct uwb_wcs_instance * wcs = rng->ccp_inst->wcs;
   1bad2:	6861      	ldr	r1, [r4, #4]
        frame->transmission_timestamp = (uint32_t)(uwb_wcs_local_to_master(wcs, response_timestamp)) & 0xFFFFFFFFULL;
   1bad4:	4632      	mov	r2, r6
   1bad6:	4643      	mov	r3, r8
   1bad8:	6e88      	ldr	r0, [r1, #104]	; 0x68
   1bada:	f7f1 fdf9 	bl	d6d0 <uwb_wcs_local_to_master>
   1bade:	f8ca 000f 	str.w	r0, [sl, #15]
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
   1bae2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1bae4:	f8d3 b044 	ldr.w	fp, [r3, #68]	; 0x44
   1bae8:	2313      	movs	r3, #19
   1baea:	2200      	movs	r2, #0
   1baec:	4651      	mov	r1, sl
   1baee:	4628      	mov	r0, r5
   1baf0:	47d8      	blx	fp
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
   1baf2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1baf4:	f8d3 a048 	ldr.w	sl, [r3, #72]	; 0x48
   1baf8:	2300      	movs	r3, #0
   1bafa:	461a      	mov	r2, r3
   1bafc:	2113      	movs	r1, #19
   1bafe:	4628      	mov	r0, r5
   1bb00:	47d0      	blx	sl
    return (dev->uw_funcs->uf_set_wait4resp(dev, enable));
   1bb02:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1bb04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1bb06:	2101      	movs	r1, #1
   1bb08:	4628      	mov	r0, r5
   1bb0a:	4798      	blx	r3
    return (dev->uw_funcs->uf_set_wait4resp_delay(dev, delay));
   1bb0c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1bb0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   1bb10:	2100      	movs	r1, #0
   1bb12:	4628      	mov	r0, r5
   1bb14:	4798      	blx	r3
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
   1bb16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1bb18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1bb1a:	2113      	movs	r1, #19
   1bb1c:	4628      	mov	r0, r5
   1bb1e:	4798      	blx	r3
        uint16_t frame_duration = uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst,sizeof(ieee_rng_response_frame_t)));
   1bb20:	f005 fb72 	bl	21208 <__aeabi_i2d>
   1bb24:	a321      	add	r3, pc, #132	; (adr r3, 1bbac <tx_complete_cb+0x154>)
   1bb26:	e9d3 2300 	ldrd	r2, r3, [r3]
   1bb2a:	f005 fd01 	bl	21530 <__aeabi_ddiv>
   1bb2e:	f005 fead 	bl	2188c <__aeabi_d2uiz>
        uwb_set_rx_timeout(inst, g_config.tx_holdoff_delay + frame_duration + g_config.rx_timeout_delay);
   1bb32:	4b1b      	ldr	r3, [pc, #108]	; (1bba0 <tx_complete_cb+0x148>)
   1bb34:	6859      	ldr	r1, [r3, #4]
   1bb36:	fa11 f080 	uxtah	r0, r1, r0
   1bb3a:	8999      	ldrh	r1, [r3, #12]
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
   1bb3c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1bb3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1bb40:	4401      	add	r1, r0
   1bb42:	4628      	mov	r0, r5
   1bb44:	4798      	blx	r3
    return (dev->uw_funcs->uf_set_rxauto_disable(dev, disable));
   1bb46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1bb48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1bb4a:	2101      	movs	r1, #1
   1bb4c:	4628      	mov	r0, r5
   1bb4e:	4798      	blx	r3
        if (((0xffffffffffULL&(current_timestamp - response_timestamp))>>16) < MYNEWT_VAL(TWR_SS_ACK_TX_HOLDOFF)/4) {
   1bb50:	1bbe      	subs	r6, r7, r6
   1bb52:	eb69 0808 	sbc.w	r8, r9, r8
   1bb56:	0c36      	lsrs	r6, r6, #16
   1bb58:	ea46 4608 	orr.w	r6, r6, r8, lsl #16
   1bb5c:	4b11      	ldr	r3, [pc, #68]	; (1bba4 <tx_complete_cb+0x14c>)
   1bb5e:	4033      	ands	r3, r6
   1bb60:	b93b      	cbnz	r3, 1bb72 <tx_complete_cb+0x11a>
            uwb_set_delay_start(inst, current_timestamp + (MYNEWT_VAL(TWR_SS_ACK_TX_HOLDOFF)*3/4 << 16));
   1bb62:	f117 62c0 	adds.w	r2, r7, #100663296	; 0x6000000
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
   1bb66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1bb68:	6b59      	ldr	r1, [r3, #52]	; 0x34
   1bb6a:	f149 0300 	adc.w	r3, r9, #0
   1bb6e:	4628      	mov	r0, r5
   1bb70:	4788      	blx	r1
    return (dev->uw_funcs->uf_start_tx(dev));
   1bb72:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1bb74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1bb76:	4628      	mov	r0, r5
   1bb78:	4798      	blx	r3
        if (uwb_start_tx(inst).start_tx_error){
   1bb7a:	f010 0f04 	tst.w	r0, #4
   1bb7e:	d101      	bne.n	1bb84 <tx_complete_cb+0x12c>
    return true;
   1bb80:	2001      	movs	r0, #1
   1bb82:	e793      	b.n	1baac <tx_complete_cb+0x54>
            SS_STATS_INC(tx_error);
   1bb84:	4a08      	ldr	r2, [pc, #32]	; (1bba8 <tx_complete_cb+0x150>)
   1bb86:	6993      	ldr	r3, [r2, #24]
   1bb88:	3301      	adds	r3, #1
   1bb8a:	6193      	str	r3, [r2, #24]
   1bb8c:	f104 0050 	add.w	r0, r4, #80	; 0x50
   1bb90:	f7ee f97c 	bl	9e8c <os_sem_release>
    return true;
   1bb94:	2001      	movs	r0, #1
   1bb96:	e789      	b.n	1baac <tx_complete_cb+0x54>
        return false;
   1bb98:	2000      	movs	r0, #0
   1bb9a:	e787      	b.n	1baac <tx_complete_cb+0x54>
        return false;
   1bb9c:	2000      	movs	r0, #0
   1bb9e:	e785      	b.n	1baac <tx_complete_cb+0x54>
   1bba0:	20000ec8 	.word	0x20000ec8
   1bba4:	00fffe00 	.word	0x00fffe00
   1bba8:	2000461c 	.word	0x2000461c
   1bbac:	90690691 	.word	0x90690691
   1bbb0:	3ff06906 	.word	0x3ff06906

0001bbb4 <twr_ss_ack_pkg_init>:
{
   1bbb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bbb6:	b083      	sub	sp, #12
    printf("{\"utime\": %"PRIu32",\"msg\": \"twr_ss_ack_pkg_init\"}\n",
   1bbb8:	f7f2 fbbb 	bl	e332 <dpl_cputime_get32>
   1bbbc:	4601      	mov	r1, r0
   1bbbe:	481e      	ldr	r0, [pc, #120]	; (1bc38 <twr_ss_ack_pkg_init+0x84>)
   1bbc0:	f7f2 fb32 	bl	e228 <printf>
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   1bbc4:	2400      	movs	r4, #0
   1bbc6:	b18c      	cbz	r4, 1bbec <twr_ss_ack_pkg_init+0x38>
    rc = stats_init(
   1bbc8:	2205      	movs	r2, #5
   1bbca:	9200      	str	r2, [sp, #0]
   1bbcc:	4b1b      	ldr	r3, [pc, #108]	; (1bc3c <twr_ss_ack_pkg_init+0x88>)
   1bbce:	2104      	movs	r1, #4
   1bbd0:	481b      	ldr	r0, [pc, #108]	; (1bc40 <twr_ss_ack_pkg_init+0x8c>)
   1bbd2:	f7f5 f9a1 	bl	10f18 <stats_init>
    assert(rc == 0);
   1bbd6:	4604      	mov	r4, r0
   1bbd8:	bb10      	cbnz	r0, 1bc20 <twr_ss_ack_pkg_init+0x6c>
    rc |= stats_register("twr_ss_ack", STATS_HDR(g_twr_ss_ack_stat));
   1bbda:	4919      	ldr	r1, [pc, #100]	; (1bc40 <twr_ss_ack_pkg_init+0x8c>)
   1bbdc:	4819      	ldr	r0, [pc, #100]	; (1bc44 <twr_ss_ack_pkg_init+0x90>)
   1bbde:	f7f5 fa25 	bl	1102c <stats_register>
    assert(rc == 0);
   1bbe2:	ea54 0300 	orrs.w	r3, r4, r0
   1bbe6:	d121      	bne.n	1bc2c <twr_ss_ack_pkg_init+0x78>
}
   1bbe8:	b003      	add	sp, #12
   1bbea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        udev = uwb_dev_idx_lookup(i);
   1bbec:	4620      	mov	r0, r4
   1bbee:	f7ec ff83 	bl	8af8 <uwb_dev_idx_lookup>
        if (!udev) {
   1bbf2:	4607      	mov	r7, r0
   1bbf4:	b190      	cbz	r0, 1bc1c <twr_ss_ack_pkg_init+0x68>
        g_cbs[i].inst_ptr = (struct uwb_rng_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_RNG);
   1bbf6:	2104      	movs	r1, #4
   1bbf8:	f7ed f803 	bl	8c02 <uwb_mac_find_cb_inst_ptr>
   1bbfc:	0126      	lsls	r6, r4, #4
   1bbfe:	ebc4 1504 	rsb	r5, r4, r4, lsl #4
   1bc02:	4b11      	ldr	r3, [pc, #68]	; (1bc48 <twr_ss_ack_pkg_init+0x94>)
   1bc04:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   1bc08:	6068      	str	r0, [r5, #4]
        uwb_mac_append_interface(udev, &g_cbs[i]);
   1bc0a:	4629      	mov	r1, r5
   1bc0c:	4638      	mov	r0, r7
   1bc0e:	f7ec ffa3 	bl	8b58 <uwb_mac_append_interface>
        uwb_rng_append_config(g_cbs[i].inst_ptr, &g_rng_cfgs[i]);
   1bc12:	490e      	ldr	r1, [pc, #56]	; (1bc4c <twr_ss_ack_pkg_init+0x98>)
   1bc14:	4431      	add	r1, r6
   1bc16:	6868      	ldr	r0, [r5, #4]
   1bc18:	f7f0 fe3a 	bl	c890 <uwb_rng_append_config>
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   1bc1c:	3401      	adds	r4, #1
   1bc1e:	e7d2      	b.n	1bbc6 <twr_ss_ack_pkg_init+0x12>
    assert(rc == 0);
   1bc20:	2300      	movs	r3, #0
   1bc22:	461a      	mov	r2, r3
   1bc24:	4619      	mov	r1, r3
   1bc26:	4618      	mov	r0, r3
   1bc28:	f7ed fa10 	bl	904c <__assert_func>
    assert(rc == 0);
   1bc2c:	2300      	movs	r3, #0
   1bc2e:	461a      	mov	r2, r3
   1bc30:	4619      	mov	r1, r3
   1bc32:	4618      	mov	r0, r3
   1bc34:	f7ed fa0a 	bl	904c <__assert_func>
   1bc38:	000247c0 	.word	0x000247c0
   1bc3c:	00024820 	.word	0x00024820
   1bc40:	2000461c 	.word	0x2000461c
   1bc44:	000247f0 	.word	0x000247f0
   1bc48:	20000e8c 	.word	0x20000e8c
   1bc4c:	20000ed8 	.word	0x20000ed8

0001bc50 <twr_ss_ack_free>:
{
   1bc50:	b508      	push	{r3, lr}
    assert(dev);
   1bc52:	b118      	cbz	r0, 1bc5c <twr_ss_ack_free+0xc>
    uwb_mac_remove_interface(dev, UWBEXT_RNG_SS_ACK);
   1bc54:	2107      	movs	r1, #7
   1bc56:	f7ec ffa4 	bl	8ba2 <uwb_mac_remove_interface>
}
   1bc5a:	bd08      	pop	{r3, pc}
    assert(dev);
   1bc5c:	2300      	movs	r3, #0
   1bc5e:	461a      	mov	r2, r3
   1bc60:	4619      	mov	r1, r3
   1bc62:	4618      	mov	r0, r3
   1bc64:	f7ed f9f2 	bl	904c <__assert_func>

0001bc68 <twr_ss_ack_pkg_down>:
{
   1bc68:	b508      	push	{r3, lr}
    if (g_cbs[0].inst_ptr) {
   1bc6a:	4b04      	ldr	r3, [pc, #16]	; (1bc7c <twr_ss_ack_pkg_down+0x14>)
   1bc6c:	685b      	ldr	r3, [r3, #4]
   1bc6e:	b113      	cbz	r3, 1bc76 <twr_ss_ack_pkg_down+0xe>
        twr_ss_ack_free(rng->dev_inst);
   1bc70:	6818      	ldr	r0, [r3, #0]
   1bc72:	f7ff ffed 	bl	1bc50 <twr_ss_ack_free>
}
   1bc76:	2000      	movs	r0, #0
   1bc78:	bd08      	pop	{r3, pc}
   1bc7a:	bf00      	nop
   1bc7c:	20000e8c 	.word	0x20000e8c

0001bc80 <rx_complete_cb>:
static bool
rx_complete_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
    struct uwb_rng_txd txd;
    struct uwb_mac_interface * cbs_i = NULL;
    if (inst->fctrl != FCNTL_IEEE_RANGE_16)
   1bc80:	f8b0 24e0 	ldrh.w	r2, [r0, #1248]	; 0x4e0
   1bc84:	f648 0341 	movw	r3, #34881	; 0x8841
   1bc88:	429a      	cmp	r2, r3
   1bc8a:	f040 813c 	bne.w	1bf06 <rx_complete_cb+0x286>
{
   1bc8e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1bc92:	b089      	sub	sp, #36	; 0x24
   1bc94:	4604      	mov	r4, r0
        return false;

    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
   1bc96:	684e      	ldr	r6, [r1, #4]
    assert(rng);
   1bc98:	b31e      	cbz	r6, 1bce2 <rx_complete_cb+0x62>
   1bc9a:	f8b6 3056 	ldrh.w	r3, [r6, #86]	; 0x56
    if(dpl_sem_get_count(&rng->sem) == 1) // unsolicited inbound
   1bc9e:	2b01      	cmp	r3, #1
   1bca0:	f000 8133 	beq.w	1bf0a <rx_complete_cb+0x28a>
        return false;

    twr_frame_t * frame = rng->frames[(rng->idx)%rng->nframes]; // Frame already read within loader layers.
   1bca4:	f8b6 3076 	ldrh.w	r3, [r6, #118]	; 0x76
   1bca8:	f8b6 207a 	ldrh.w	r2, [r6, #122]	; 0x7a
   1bcac:	fbb3 f1f2 	udiv	r1, r3, r2
   1bcb0:	fb02 3311 	mls	r3, r2, r1, r3
   1bcb4:	b29b      	uxth	r3, r3
   1bcb6:	3326      	adds	r3, #38	; 0x26
   1bcb8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   1bcbc:	685f      	ldr	r7, [r3, #4]

    switch(rng->code){
   1bcbe:	f8b6 304c 	ldrh.w	r3, [r6, #76]	; 0x4c
   1bcc2:	f240 1215 	movw	r2, #277	; 0x115
   1bcc6:	4293      	cmp	r3, r2
   1bcc8:	f000 8097 	beq.w	1bdfa <rx_complete_cb+0x17a>
   1bccc:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
   1bcd0:	f000 8106 	beq.w	1bee0 <rx_complete_cb+0x260>
   1bcd4:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
   1bcd8:	d009      	beq.n	1bcee <rx_complete_cb+0x6e>
   1bcda:	2000      	movs	r0, #0
        default:
                return false;
                break;
    }
    return true;
}
   1bcdc:	b009      	add	sp, #36	; 0x24
   1bcde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    assert(rng);
   1bce2:	2300      	movs	r3, #0
   1bce4:	461a      	mov	r2, r3
   1bce6:	4619      	mov	r1, r3
   1bce8:	4618      	mov	r0, r3
   1bcea:	f7ed f9af 	bl	904c <__assert_func>
                uint64_t request_timestamp = inst->rxtimestamp;
   1bcee:	f500 639e 	add.w	r3, r0, #1264	; 0x4f0
   1bcf2:	e953 8902 	ldrd	r8, r9, [r3, #-8]
                uwb_rng_calc_rel_tx(rng, &txd, &g_config, request_timestamp, inst->frame_len);
   1bcf6:	f8b0 34e2 	ldrh.w	r3, [r0, #1250]	; 0x4e2
   1bcfa:	9302      	str	r3, [sp, #8]
   1bcfc:	e9cd 8900 	strd	r8, r9, [sp]
   1bd00:	4a83      	ldr	r2, [pc, #524]	; (1bf10 <rx_complete_cb+0x290>)
   1bd02:	a904      	add	r1, sp, #16
   1bd04:	4630      	mov	r0, r6
   1bd06:	f7f0 fdfb 	bl	c900 <uwb_rng_calc_rel_tx>
                struct uwb_wcs_instance * wcs = rng->ccp_inst->wcs;
   1bd0a:	6873      	ldr	r3, [r6, #4]
   1bd0c:	6e9d      	ldr	r5, [r3, #104]	; 0x68
                frame->reception_timestamp = (uint32_t)(uwb_wcs_local_to_master(wcs, request_timestamp)) & 0xFFFFFFFFULL;
   1bd0e:	4642      	mov	r2, r8
   1bd10:	464b      	mov	r3, r9
   1bd12:	4628      	mov	r0, r5
   1bd14:	f7f1 fcdc 	bl	d6d0 <uwb_wcs_local_to_master>
   1bd18:	f8c7 000b 	str.w	r0, [r7, #11]
                frame->transmission_timestamp = (uint32_t)(uwb_wcs_local_to_master(wcs, txd.response_timestamp)) & 0xFFFFFFFFULL;
   1bd1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1bd20:	4628      	mov	r0, r5
   1bd22:	f7f1 fcd5 	bl	d6d0 <uwb_wcs_local_to_master>
   1bd26:	f8c7 000f 	str.w	r0, [r7, #15]
                frame->dst_address = frame->src_address;
   1bd2a:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   1bd2e:	f8a7 3005 	strh.w	r3, [r7, #5]
                frame->src_address = inst->my_short_address;
   1bd32:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
   1bd36:	f8a7 3007 	strh.w	r3, [r7, #7]
                frame->code = UWB_DATA_CODE_SS_TWR_EXT_T1;
   1bd3a:	2300      	movs	r3, #0
   1bd3c:	2215      	movs	r2, #21
   1bd3e:	727a      	strb	r2, [r7, #9]
   1bd40:	2201      	movs	r2, #1
   1bd42:	72ba      	strb	r2, [r7, #10]
                frame->carrier_integrator  = 0l;
   1bd44:	76fb      	strb	r3, [r7, #27]
   1bd46:	773b      	strb	r3, [r7, #28]
   1bd48:	777b      	strb	r3, [r7, #29]
   1bd4a:	77bb      	strb	r3, [r7, #30]
                if(!(SLIST_EMPTY(&inst->interface_cbs))) {
   1bd4c:	f8d4 5530 	ldr.w	r5, [r4, #1328]	; 0x530
   1bd50:	2d00      	cmp	r5, #0
   1bd52:	d13e      	bne.n	1bdd2 <rx_complete_cb+0x152>
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
   1bd54:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1bd56:	6c5d      	ldr	r5, [r3, #68]	; 0x44
   1bd58:	2320      	movs	r3, #32
   1bd5a:	2200      	movs	r2, #0
   1bd5c:	4639      	mov	r1, r7
   1bd5e:	4620      	mov	r0, r4
   1bd60:	47a8      	blx	r5
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
   1bd62:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1bd64:	6c9d      	ldr	r5, [r3, #72]	; 0x48
   1bd66:	2300      	movs	r3, #0
   1bd68:	461a      	mov	r2, r3
   1bd6a:	2120      	movs	r1, #32
   1bd6c:	4620      	mov	r0, r4
   1bd6e:	47a8      	blx	r5
    return (dev->uw_funcs->uf_set_wait4resp(dev, enable));
   1bd70:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1bd72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1bd74:	2101      	movs	r1, #1
   1bd76:	4620      	mov	r0, r4
   1bd78:	4798      	blx	r3
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
   1bd7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1bd7c:	6b59      	ldr	r1, [r3, #52]	; 0x34
   1bd7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1bd82:	4620      	mov	r0, r4
   1bd84:	4788      	blx	r1
    return (dev->uw_funcs->uf_start_tx(dev));
   1bd86:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1bd88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1bd8a:	4620      	mov	r0, r4
   1bd8c:	4798      	blx	r3
                if (uwb_start_tx(inst).start_tx_error){
   1bd8e:	f010 0f04 	tst.w	r0, #4
   1bd92:	d129      	bne.n	1bde8 <rx_complete_cb+0x168>
                uwb_set_wait4resp_delay(inst, g_config.tx_holdoff_delay -
   1bd94:	4d5e      	ldr	r5, [pc, #376]	; (1bf10 <rx_complete_cb+0x290>)
   1bd96:	6869      	ldr	r1, [r5, #4]
                                        inst->config.rx.timeToRxStable);
   1bd98:	f894 251b 	ldrb.w	r2, [r4, #1307]	; 0x51b
    return (dev->uw_funcs->uf_set_wait4resp_delay(dev, delay));
   1bd9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1bd9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   1bda0:	1a89      	subs	r1, r1, r2
   1bda2:	4620      	mov	r0, r4
   1bda4:	4798      	blx	r3
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
   1bda6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1bda8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1bdaa:	211f      	movs	r1, #31
   1bdac:	4620      	mov	r0, r4
   1bdae:	4798      	blx	r3
                                   g_config.rx_timeout_delay + inst->config.rx.timeToRxStable);
   1bdb0:	89a9      	ldrh	r1, [r5, #12]
                uwb_set_rx_timeout(inst, uwb_phy_frame_duration(inst, sizeof(twr_frame_final_t)) +
   1bdb2:	4408      	add	r0, r1
                                   g_config.rx_timeout_delay + inst->config.rx.timeToRxStable);
   1bdb4:	f894 151b 	ldrb.w	r1, [r4, #1307]	; 0x51b
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
   1bdb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1bdba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1bdbc:	4401      	add	r1, r0
   1bdbe:	4620      	mov	r0, r4
   1bdc0:	4798      	blx	r3
    return (dev->uw_funcs->uf_set_rxauto_disable(dev, disable));
   1bdc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1bdc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1bdc6:	2101      	movs	r1, #1
   1bdc8:	4620      	mov	r0, r4
   1bdca:	4798      	blx	r3
    return true;
   1bdcc:	2001      	movs	r0, #1
                break;
   1bdce:	e785      	b.n	1bcdc <rx_complete_cb+0x5c>
                    SLIST_FOREACH(cbs_i, &inst->interface_cbs, next) {
   1bdd0:	6bad      	ldr	r5, [r5, #56]	; 0x38
   1bdd2:	2d00      	cmp	r5, #0
   1bdd4:	d0be      	beq.n	1bd54 <rx_complete_cb+0xd4>
                        if (cbs_i != NULL && cbs_i->final_cb)
   1bdd6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1bdd8:	2b00      	cmp	r3, #0
   1bdda:	d0f9      	beq.n	1bdd0 <rx_complete_cb+0x150>
                            if(cbs_i->final_cb(inst, cbs_i)) break;
   1bddc:	4629      	mov	r1, r5
   1bdde:	4620      	mov	r0, r4
   1bde0:	4798      	blx	r3
   1bde2:	2800      	cmp	r0, #0
   1bde4:	d0f4      	beq.n	1bdd0 <rx_complete_cb+0x150>
   1bde6:	e7b5      	b.n	1bd54 <rx_complete_cb+0xd4>
                    SS_STATS_INC(tx_error);
   1bde8:	4a4a      	ldr	r2, [pc, #296]	; (1bf14 <rx_complete_cb+0x294>)
   1bdea:	6993      	ldr	r3, [r2, #24]
   1bdec:	3301      	adds	r3, #1
   1bdee:	6193      	str	r3, [r2, #24]
   1bdf0:	f106 0050 	add.w	r0, r6, #80	; 0x50
   1bdf4:	f7ee f84a 	bl	9e8c <os_sem_release>
   1bdf8:	e7cc      	b.n	1bd94 <rx_complete_cb+0x114>
                if (inst->frame_len != TWR_EXT_FRAME_SIZE)
   1bdfa:	f8b0 34e2 	ldrh.w	r3, [r0, #1250]	; 0x4e2
   1bdfe:	2b20      	cmp	r3, #32
   1be00:	d001      	beq.n	1be06 <rx_complete_cb+0x186>
    return true;
   1be02:	2001      	movs	r0, #1
   1be04:	e76a      	b.n	1bcdc <rx_complete_cb+0x5c>
                if(inst->status.lde_error)
   1be06:	f890 2509 	ldrb.w	r2, [r0, #1289]	; 0x509
   1be0a:	f012 0f04 	tst.w	r2, #4
   1be0e:	d001      	beq.n	1be14 <rx_complete_cb+0x194>
    return true;
   1be10:	2001      	movs	r0, #1
   1be12:	e763      	b.n	1bcdc <rx_complete_cb+0x5c>
                uint64_t response_timestamp = inst->rxtimestamp;
   1be14:	f500 629e 	add.w	r2, r0, #1264	; 0x4f0
   1be18:	e952 8902 	ldrd	r8, r9, [r2, #-8]
                uwb_rng_calc_rel_tx(rng, &txd, &g_config, response_timestamp, inst->frame_len);
   1be1c:	9302      	str	r3, [sp, #8]
   1be1e:	e9cd 8900 	strd	r8, r9, [sp]
   1be22:	4a3b      	ldr	r2, [pc, #236]	; (1bf10 <rx_complete_cb+0x290>)
   1be24:	a904      	add	r1, sp, #16
   1be26:	4630      	mov	r0, r6
   1be28:	f7f0 fd6a 	bl	c900 <uwb_rng_calc_rel_tx>
                struct uwb_wcs_instance * wcs = rng->ccp_inst->wcs;
   1be2c:	6873      	ldr	r3, [r6, #4]
   1be2e:	6e9d      	ldr	r5, [r3, #104]	; 0x68
    return (dev->uw_funcs->uf_read_txtime(dev));
   1be30:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1be32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   1be34:	4620      	mov	r0, r4
   1be36:	4798      	blx	r3
   1be38:	4602      	mov	r2, r0
   1be3a:	460b      	mov	r3, r1
                frame->request_timestamp = (uint32_t)(uwb_wcs_local_to_master(wcs, uwb_read_txtime(inst))) & 0xFFFFFFFFULL;
   1be3c:	4628      	mov	r0, r5
   1be3e:	f7f1 fc47 	bl	d6d0 <uwb_wcs_local_to_master>
   1be42:	f8c7 0013 	str.w	r0, [r7, #19]
                frame->response_timestamp = (uint32_t)(uwb_wcs_local_to_master(wcs, response_timestamp)) & 0xFFFFFFFFULL;
   1be46:	4642      	mov	r2, r8
   1be48:	464b      	mov	r3, r9
   1be4a:	4628      	mov	r0, r5
   1be4c:	f7f1 fc40 	bl	d6d0 <uwb_wcs_local_to_master>
   1be50:	f8c7 0017 	str.w	r0, [r7, #23]
                frame->dst_address = frame->src_address;
   1be54:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   1be58:	f8a7 3005 	strh.w	r3, [r7, #5]
                frame->src_address = inst->my_short_address;
   1be5c:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
   1be60:	f8a7 3007 	strh.w	r3, [r7, #7]
                frame->code = UWB_DATA_CODE_SS_TWR_EXT_FINAL;
   1be64:	2500      	movs	r5, #0
   1be66:	2316      	movs	r3, #22
   1be68:	727b      	strb	r3, [r7, #9]
   1be6a:	2301      	movs	r3, #1
   1be6c:	72bb      	strb	r3, [r7, #10]
                frame->carrier_integrator  = inst->carrier_integrator;
   1be6e:	f8d4 34f0 	ldr.w	r3, [r4, #1264]	; 0x4f0
   1be72:	f8c7 301b 	str.w	r3, [r7, #27]
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
   1be76:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1be78:	f8d3 8044 	ldr.w	r8, [r3, #68]	; 0x44
   1be7c:	231f      	movs	r3, #31
   1be7e:	462a      	mov	r2, r5
   1be80:	4639      	mov	r1, r7
   1be82:	4620      	mov	r0, r4
   1be84:	47c0      	blx	r8
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
   1be86:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1be88:	6c9f      	ldr	r7, [r3, #72]	; 0x48
   1be8a:	462b      	mov	r3, r5
   1be8c:	462a      	mov	r2, r5
   1be8e:	211f      	movs	r1, #31
   1be90:	4620      	mov	r0, r4
   1be92:	47b8      	blx	r7
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
   1be94:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1be96:	6b59      	ldr	r1, [r3, #52]	; 0x34
   1be98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1be9c:	4620      	mov	r0, r4
   1be9e:	4788      	blx	r1
    return (dev->uw_funcs->uf_start_tx(dev));
   1bea0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1bea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1bea4:	4620      	mov	r0, r4
   1bea6:	4798      	blx	r3
                if (uwb_start_tx(inst).start_tx_error){
   1bea8:	f010 0f04 	tst.w	r0, #4
   1beac:	d10b      	bne.n	1bec6 <rx_complete_cb+0x246>
                    SS_STATS_INC(complete);
   1beae:	4a19      	ldr	r2, [pc, #100]	; (1bf14 <rx_complete_cb+0x294>)
   1beb0:	6953      	ldr	r3, [r2, #20]
   1beb2:	3301      	adds	r3, #1
   1beb4:	6153      	str	r3, [r2, #20]
                    rng->control.complete_after_tx = 1;
   1beb6:	f896 3070 	ldrb.w	r3, [r6, #112]	; 0x70
   1beba:	f043 0302 	orr.w	r3, r3, #2
   1bebe:	f886 3070 	strb.w	r3, [r6, #112]	; 0x70
    return true;
   1bec2:	2001      	movs	r0, #1
   1bec4:	e70a      	b.n	1bcdc <rx_complete_cb+0x5c>
                    SS_STATS_INC(tx_error);
   1bec6:	4a13      	ldr	r2, [pc, #76]	; (1bf14 <rx_complete_cb+0x294>)
   1bec8:	6993      	ldr	r3, [r2, #24]
   1beca:	3301      	adds	r3, #1
   1becc:	6193      	str	r3, [r2, #24]
   1bece:	f106 0050 	add.w	r0, r6, #80	; 0x50
   1bed2:	f7ed ffdb 	bl	9e8c <os_sem_release>
                    rng_issue_complete(inst);
   1bed6:	4620      	mov	r0, r4
   1bed8:	f7f0 ff62 	bl	cda0 <rng_issue_complete>
    return true;
   1bedc:	2001      	movs	r0, #1
   1bede:	e6fd      	b.n	1bcdc <rx_complete_cb+0x5c>
                if (inst->frame_len != sizeof(twr_frame_final_t))
   1bee0:	f8b0 34e2 	ldrh.w	r3, [r0, #1250]	; 0x4e2
   1bee4:	2b1f      	cmp	r3, #31
   1bee6:	d001      	beq.n	1beec <rx_complete_cb+0x26c>
    return true;
   1bee8:	2001      	movs	r0, #1
   1beea:	e6f7      	b.n	1bcdc <rx_complete_cb+0x5c>
                SS_STATS_INC(complete);
   1beec:	4a09      	ldr	r2, [pc, #36]	; (1bf14 <rx_complete_cb+0x294>)
   1beee:	6953      	ldr	r3, [r2, #20]
   1bef0:	3301      	adds	r3, #1
   1bef2:	6153      	str	r3, [r2, #20]
   1bef4:	f106 0050 	add.w	r0, r6, #80	; 0x50
   1bef8:	f7ed ffc8 	bl	9e8c <os_sem_release>
                rng_issue_complete(inst);
   1befc:	4620      	mov	r0, r4
   1befe:	f7f0 ff4f 	bl	cda0 <rng_issue_complete>
    return true;
   1bf02:	2001      	movs	r0, #1
                break;
   1bf04:	e6ea      	b.n	1bcdc <rx_complete_cb+0x5c>
        return false;
   1bf06:	2000      	movs	r0, #0
}
   1bf08:	4770      	bx	lr
        return false;
   1bf0a:	2000      	movs	r0, #0
   1bf0c:	e6e6      	b.n	1bcdc <rx_complete_cb+0x5c>
   1bf0e:	bf00      	nop
   1bf10:	20000f24 	.word	0x20000f24
   1bf14:	20004644 	.word	0x20004644

0001bf18 <twr_ss_ext_pkg_init>:
{
   1bf18:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bf1a:	b083      	sub	sp, #12
    printf("{\"utime\": %"PRIu32",\"msg\": \"twr_ss_ext_pkg_init\"}\n",
   1bf1c:	f7f2 fa09 	bl	e332 <dpl_cputime_get32>
   1bf20:	4601      	mov	r1, r0
   1bf22:	481b      	ldr	r0, [pc, #108]	; (1bf90 <twr_ss_ext_pkg_init+0x78>)
   1bf24:	f7f2 f980 	bl	e228 <printf>
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   1bf28:	2400      	movs	r4, #0
   1bf2a:	b18c      	cbz	r4, 1bf50 <twr_ss_ext_pkg_init+0x38>
    rc = stats_init(
   1bf2c:	4d19      	ldr	r5, [pc, #100]	; (1bf94 <twr_ss_ext_pkg_init+0x7c>)
   1bf2e:	2202      	movs	r2, #2
   1bf30:	9200      	str	r2, [sp, #0]
   1bf32:	4b19      	ldr	r3, [pc, #100]	; (1bf98 <twr_ss_ext_pkg_init+0x80>)
   1bf34:	2104      	movs	r1, #4
   1bf36:	4628      	mov	r0, r5
   1bf38:	f7f4 ffee 	bl	10f18 <stats_init>
   1bf3c:	4604      	mov	r4, r0
    rc |= stats_register("twr_ss_ext", STATS_HDR(g_twr_ss_ext_stat));
   1bf3e:	4629      	mov	r1, r5
   1bf40:	4816      	ldr	r0, [pc, #88]	; (1bf9c <twr_ss_ext_pkg_init+0x84>)
   1bf42:	f7f5 f873 	bl	1102c <stats_register>
    assert(rc == 0);
   1bf46:	ea54 0300 	orrs.w	r3, r4, r0
   1bf4a:	d11b      	bne.n	1bf84 <twr_ss_ext_pkg_init+0x6c>
}
   1bf4c:	b003      	add	sp, #12
   1bf4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        udev = uwb_dev_idx_lookup(i);
   1bf50:	4620      	mov	r0, r4
   1bf52:	f7ec fdd1 	bl	8af8 <uwb_dev_idx_lookup>
        if (!udev) {
   1bf56:	4607      	mov	r7, r0
   1bf58:	b190      	cbz	r0, 1bf80 <twr_ss_ext_pkg_init+0x68>
        g_cbs[i].inst_ptr = (struct uwb_rng_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_RNG);
   1bf5a:	2104      	movs	r1, #4
   1bf5c:	f7ec fe51 	bl	8c02 <uwb_mac_find_cb_inst_ptr>
   1bf60:	0126      	lsls	r6, r4, #4
   1bf62:	ebc4 1504 	rsb	r5, r4, r4, lsl #4
   1bf66:	4b0e      	ldr	r3, [pc, #56]	; (1bfa0 <twr_ss_ext_pkg_init+0x88>)
   1bf68:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   1bf6c:	6068      	str	r0, [r5, #4]
        uwb_mac_append_interface(udev, &g_cbs[i]);
   1bf6e:	4629      	mov	r1, r5
   1bf70:	4638      	mov	r0, r7
   1bf72:	f7ec fdf1 	bl	8b58 <uwb_mac_append_interface>
        uwb_rng_append_config(g_cbs[i].inst_ptr, &g_rng_cfgs[i]);
   1bf76:	490b      	ldr	r1, [pc, #44]	; (1bfa4 <twr_ss_ext_pkg_init+0x8c>)
   1bf78:	4431      	add	r1, r6
   1bf7a:	6868      	ldr	r0, [r5, #4]
   1bf7c:	f7f0 fc88 	bl	c890 <uwb_rng_append_config>
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   1bf80:	3401      	adds	r4, #1
   1bf82:	e7d2      	b.n	1bf2a <twr_ss_ext_pkg_init+0x12>
    assert(rc == 0);
   1bf84:	2300      	movs	r3, #0
   1bf86:	461a      	mov	r2, r3
   1bf88:	4619      	mov	r1, r3
   1bf8a:	4618      	mov	r0, r3
   1bf8c:	f7ed f85e 	bl	904c <__assert_func>
   1bf90:	00024840 	.word	0x00024840
   1bf94:	20004644 	.word	0x20004644
   1bf98:	0002487c 	.word	0x0002487c
   1bf9c:	00024870 	.word	0x00024870
   1bfa0:	20000ee8 	.word	0x20000ee8
   1bfa4:	20000f34 	.word	0x20000f34

0001bfa8 <twr_ss_ext_free>:
twr_ss_ext_free(struct uwb_dev * inst){
   1bfa8:	b508      	push	{r3, lr}
    assert(inst);
   1bfaa:	b118      	cbz	r0, 1bfb4 <twr_ss_ext_free+0xc>
    uwb_mac_remove_interface(inst, UWBEXT_RNG_SS_EXT);
   1bfac:	2106      	movs	r1, #6
   1bfae:	f7ec fdf8 	bl	8ba2 <uwb_mac_remove_interface>
}
   1bfb2:	bd08      	pop	{r3, pc}
    assert(inst);
   1bfb4:	2300      	movs	r3, #0
   1bfb6:	461a      	mov	r2, r3
   1bfb8:	4619      	mov	r1, r3
   1bfba:	4618      	mov	r0, r3
   1bfbc:	f7ed f846 	bl	904c <__assert_func>

0001bfc0 <twr_ss_ext_pkg_down>:
{
   1bfc0:	b538      	push	{r3, r4, r5, lr}
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   1bfc2:	2400      	movs	r4, #0
   1bfc4:	b10c      	cbz	r4, 1bfca <twr_ss_ext_pkg_down+0xa>
}
   1bfc6:	2000      	movs	r0, #0
   1bfc8:	bd38      	pop	{r3, r4, r5, pc}
        rng = (struct uwb_rng_instance *)g_cbs[i].inst_ptr;
   1bfca:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   1bfce:	009a      	lsls	r2, r3, #2
   1bfd0:	4b07      	ldr	r3, [pc, #28]	; (1bff0 <twr_ss_ext_pkg_down+0x30>)
   1bfd2:	4413      	add	r3, r2
   1bfd4:	685d      	ldr	r5, [r3, #4]
        if (!rng) continue;
   1bfd6:	b145      	cbz	r5, 1bfea <twr_ss_ext_pkg_down+0x2a>
        uwb_rng_remove_config(g_cbs[i].inst_ptr, g_rng_cfgs[i].rng_code);
   1bfd8:	0123      	lsls	r3, r4, #4
   1bfda:	4a06      	ldr	r2, [pc, #24]	; (1bff4 <twr_ss_ext_pkg_down+0x34>)
   1bfdc:	5ad1      	ldrh	r1, [r2, r3]
   1bfde:	4628      	mov	r0, r5
   1bfe0:	f7f0 fc6f 	bl	c8c2 <uwb_rng_remove_config>
        twr_ss_ext_free(rng->dev_inst);
   1bfe4:	6828      	ldr	r0, [r5, #0]
   1bfe6:	f7ff ffdf 	bl	1bfa8 <twr_ss_ext_free>
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   1bfea:	3401      	adds	r4, #1
   1bfec:	e7ea      	b.n	1bfc4 <twr_ss_ext_pkg_down+0x4>
   1bfee:	bf00      	nop
   1bff0:	20000ee8 	.word	0x20000ee8
   1bff4:	20000f34 	.word	0x20000f34

0001bff8 <wcs_timescale_cb>:
 *
 * returns none
 */
static bool
wcs_timescale_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
   1bff8:	b510      	push	{r4, lr}
    struct uwb_wcs_instance * wcs = (struct uwb_wcs_instance *)cbs->inst_ptr;
   1bffa:	684c      	ldr	r4, [r1, #4]
    struct uwb_ccp_instance * ccp = wcs->ccp;
   1bffc:	6e22      	ldr	r2, [r4, #96]	; 0x60

    uwb_ccp_frame_t * frame = ccp->frames[(ccp->idx)%ccp->nframes];
   1bffe:	f8b2 30ee 	ldrh.w	r3, [r2, #238]	; 0xee
   1c002:	f8b2 10ec 	ldrh.w	r1, [r2, #236]	; 0xec
   1c006:	fbb3 f0f1 	udiv	r0, r3, r1
   1c00a:	fb01 3310 	mls	r3, r1, r0, r3
   1c00e:	b29b      	uxth	r3, r3
   1c010:	33e0      	adds	r3, #224	; 0xe0
   1c012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    wcs->carrier_integrator = frame->carrier_integrator;
   1c016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c018:	63a3      	str	r3, [r4, #56]	; 0x38
    wcs->observed_interval = (ccp->local_epoch - wcs->local_epoch.lo) & 0x0FFFFFFFFFFUL; // Observed ccp interval
   1c01a:	f8d2 00d8 	ldr.w	r0, [r2, #216]	; 0xd8
   1c01e:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
   1c022:	69a1      	ldr	r1, [r4, #24]
   1c024:	f894 c01c 	ldrb.w	ip, [r4, #28]
   1c028:	1a40      	subs	r0, r0, r1
   1c02a:	eb63 030c 	sbc.w	r3, r3, ip
   1c02e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   1c032:	60a0      	str	r0, [r4, #8]
   1c034:	60e3      	str	r3, [r4, #12]
    wcs->master_epoch.timestamp = ccp->master_epoch.timestamp;
   1c036:	ed92 7b34 	vldr	d7, [r2, #208]	; 0xd0
   1c03a:	ed84 7b04 	vstr	d7, [r4, #16]
    wcs->local_epoch.timestamp += wcs->observed_interval;
   1c03e:	1809      	adds	r1, r1, r0
   1c040:	69e0      	ldr	r0, [r4, #28]
   1c042:	eb43 0300 	adc.w	r3, r3, r0
   1c046:	61a1      	str	r1, [r4, #24]
   1c048:	61e3      	str	r3, [r4, #28]

    if(ccp->status.valid){
   1c04a:	f892 30c8 	ldrb.w	r3, [r2, #200]	; 0xc8
   1c04e:	f013 0f04 	tst.w	r3, #4
   1c052:	d00a      	beq.n	1c06a <wcs_timescale_cb+0x72>
        if (wcs->config.postprocess == true)
   1c054:	7923      	ldrb	r3, [r4, #4]
   1c056:	f013 0f01 	tst.w	r3, #1
   1c05a:	d012      	beq.n	1c082 <wcs_timescale_cb+0x8a>
    return (struct dpl_eventq *) os_eventq_dflt_get();
   1c05c:	f7ed fbd8 	bl	9810 <os_eventq_dflt_get>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
   1c060:	f104 0150 	add.w	r1, r4, #80	; 0x50
   1c064:	f7ed fb26 	bl	96b4 <os_eventq_put>
}
   1c068:	e00b      	b.n	1c082 <wcs_timescale_cb+0x8a>
            dpl_eventq_put(dpl_eventq_dflt_get(), &wcs->postprocess_ev);
    }else{
        wcs->normalized_skew = (dpl_float64_t) 1.0l;
   1c06a:	2200      	movs	r2, #0
   1c06c:	4b06      	ldr	r3, [pc, #24]	; (1c088 <wcs_timescale_cb+0x90>)
   1c06e:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
        wcs->fractional_skew = (dpl_float64_t) 0.0l;
   1c072:	2200      	movs	r2, #0
   1c074:	2300      	movs	r3, #0
   1c076:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
        wcs->status.initialized = 0;
   1c07a:	7823      	ldrb	r3, [r4, #0]
   1c07c:	f36f 0341 	bfc	r3, #1, #1
   1c080:	7023      	strb	r3, [r4, #0]
    }
    return true;

}
   1c082:	2001      	movs	r0, #1
   1c084:	bd10      	pop	{r4, pc}
   1c086:	bf00      	nop
   1c088:	3ff00000 	.word	0x3ff00000
   1c08c:	00000000 	.word	0x00000000

0001c090 <wcs_timescale_ev>:
 *
 * returns none
 */
void
wcs_timescale_ev(struct dpl_event * ev)
{
   1c090:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c092:	b091      	sub	sp, #68	; 0x44
    assert(ev != NULL);
   1c094:	2800      	cmp	r0, #0
   1c096:	f000 8089 	beq.w	1c1ac <wcs_timescale_ev+0x11c>
    return ev->ev.ev_arg;
   1c09a:	6884      	ldr	r4, [r0, #8]
    assert(dpl_event_get_arg(ev) != NULL);
   1c09c:	2c00      	cmp	r4, #0
   1c09e:	f000 808b 	beq.w	1c1b8 <wcs_timescale_ev+0x128>

    struct uwb_wcs_instance * wcs = (struct uwb_wcs_instance *)dpl_event_get_arg(ev);
    struct uwb_ccp_instance * ccp = wcs->ccp;
   1c0a2:	6e27      	ldr	r7, [r4, #96]	; 0x60
    uwb_wcs_states_t * states = (uwb_wcs_states_t *) wcs->states.array;
    timescale_instance_t * timescale = wcs->timescale;
   1c0a4:	f8d4 60a0 	ldr.w	r6, [r4, #160]	; 0xa0

    if(ccp->status.valid){
   1c0a8:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
   1c0ac:	f013 0f04 	tst.w	r3, #4
   1c0b0:	d07a      	beq.n	1c1a8 <wcs_timescale_ev+0x118>
        double q[] = { MYNEWT_VAL(TIMESCALE_QVAR) * 1.0l, MYNEWT_VAL(TIMESCALE_QVAR) * 0.1l, MYNEWT_VAL(TIMESCALE_QVAR) * 0.01l};
   1c0b2:	f10d 0c10 	add.w	ip, sp, #16
   1c0b6:	4d68      	ldr	r5, [pc, #416]	; (1c258 <wcs_timescale_ev+0x1c8>)
   1c0b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1c0ba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1c0be:	e895 0003 	ldmia.w	r5, {r0, r1}
   1c0c2:	e88c 0003 	stmia.w	ip, {r0, r1}

        if (wcs->status.initialized == 0){
   1c0c6:	7823      	ldrb	r3, [r4, #0]
   1c0c8:	f013 0f02 	tst.w	r3, #2
   1c0cc:	d17a      	bne.n	1c1c4 <wcs_timescale_ev+0x134>
            states->time = (double) wcs->master_epoch.lo;
   1c0ce:	6920      	ldr	r0, [r4, #16]
   1c0d0:	7d21      	ldrb	r1, [r4, #20]
   1c0d2:	f005 f8cd 	bl	21270 <__aeabi_ul2d>
   1c0d6:	e9c4 0108 	strd	r0, r1, [r4, #32]
            states->skew = (1.0l + (double ) uwb_calc_clock_offset_ratio(
   1c0da:	6838      	ldr	r0, [r7, #0]
    return (dev->uw_funcs->uf_calc_clock_offset_ratio(dev, integrator_val, type));
   1c0dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1c0de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   1c0e2:	2200      	movs	r2, #0
   1c0e4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   1c0e6:	4798      	blx	r3
   1c0e8:	ec51 0b10 	vmov	r0, r1, d0
   1c0ec:	2200      	movs	r2, #0
   1c0ee:	4b5b      	ldr	r3, [pc, #364]	; (1c25c <wcs_timescale_ev+0x1cc>)
   1c0f0:	f004 ff3e 	bl	20f70 <__adddf3>
                                ccp->dev_inst, wcs->carrier_integrator,
                                UWB_CR_CARRIER_INTEGRATOR)) * MYNEWT_VAL(UWB_WCS_DTU) ;
   1c0f4:	a354      	add	r3, pc, #336	; (adr r3, 1c248 <wcs_timescale_ev+0x1b8>)
   1c0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c0fa:	f005 f8ef 	bl	212dc <__aeabi_dmul>
            states->skew = (1.0l + (double ) uwb_calc_clock_offset_ratio(
   1c0fe:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
            states->drift = 0;
   1c102:	2200      	movs	r2, #0
   1c104:	2300      	movs	r3, #0
   1c106:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
            double x0[] = {states->time, states->skew, states->drift};
   1c10a:	ed94 7b08 	vldr	d7, [r4, #32]
   1c10e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
   1c112:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   1c116:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
            double T = 1e-6l * MYNEWT_VAL(UWB_CCP_PERIOD);
            timescale = timescale_init(timescale, x0, q, T);
   1c11a:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 1c250 <wcs_timescale_ev+0x1c0>
   1c11e:	aa04      	add	r2, sp, #16
   1c120:	a90a      	add	r1, sp, #40	; 0x28
   1c122:	4630      	mov	r0, r6
   1c124:	f7fd fa1a 	bl	1955c <timescale_init>
   1c128:	4606      	mov	r6, r0
            ((timescale_states_t * )timescale->eke->x)->time = states->time;
   1c12a:	6803      	ldr	r3, [r0, #0]
   1c12c:	689b      	ldr	r3, [r3, #8]
   1c12e:	e9d4 0108 	ldrd	r0, r1, [r4, #32]
   1c132:	e9c3 0100 	strd	r0, r1, [r3]
            ((timescale_states_t * )timescale->eke->x)->skew = states->skew;
   1c136:	6833      	ldr	r3, [r6, #0]
   1c138:	689b      	ldr	r3, [r3, #8]
   1c13a:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
   1c13e:	e9c3 0102 	strd	r0, r1, [r3, #8]
            ((timescale_states_t * )timescale->eke->x)->drift =states->drift;
   1c142:	6833      	ldr	r3, [r6, #0]
   1c144:	689b      	ldr	r3, [r3, #8]
   1c146:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
   1c14a:	e9c3 0104 	strd	r0, r1, [r3, #16]
            wcs->status.valid = wcs->status.initialized = 1;
   1c14e:	7823      	ldrb	r3, [r4, #0]
   1c150:	f043 0302 	orr.w	r3, r3, #2
   1c154:	7023      	strb	r3, [r4, #0]
   1c156:	b2db      	uxtb	r3, r3
   1c158:	f043 0304 	orr.w	r3, r3, #4
   1c15c:	7023      	strb	r3, [r4, #0]
            double T = wcs->observed_interval / MYNEWT_VAL(UWB_WCS_DTU) ; // observed interval in seconds, master reference
            double r[] = {MYNEWT_VAL(TIMESCALE_RVAR), MYNEWT_VAL(UWB_WCS_DTU) * 1e20};
            wcs->status.valid = timescale_main(timescale, z, q, r, T).valid;
        }

        if (wcs->status.valid){
   1c15e:	7823      	ldrb	r3, [r4, #0]
   1c160:	f013 0f04 	tst.w	r3, #4
   1c164:	d065      	beq.n	1c232 <wcs_timescale_ev+0x1a2>
            states->time = ((timescale_states_t * )timescale->eke->x)->time;
   1c166:	6833      	ldr	r3, [r6, #0]
   1c168:	689b      	ldr	r3, [r3, #8]
   1c16a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c16e:	e9c4 2308 	strd	r2, r3, [r4, #32]
            states->skew = ((timescale_states_t * )timescale->eke->x)->skew;
   1c172:	6833      	ldr	r3, [r6, #0]
   1c174:	689b      	ldr	r3, [r3, #8]
   1c176:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
   1c17a:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
            states->drift = ((timescale_states_t * )timescale->eke->x)->drift;
   1c17e:	6833      	ldr	r3, [r6, #0]
   1c180:	689b      	ldr	r3, [r3, #8]
   1c182:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
   1c186:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
            wcs->normalized_skew = states->skew / MYNEWT_VAL(UWB_WCS_DTU);
   1c18a:	a32f      	add	r3, pc, #188	; (adr r3, 1c248 <wcs_timescale_ev+0x1b8>)
   1c18c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c190:	f005 f9ce 	bl	21530 <__aeabi_ddiv>
   1c194:	4602      	mov	r2, r0
   1c196:	460b      	mov	r3, r1
   1c198:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
            wcs->fractional_skew = (dpl_float64_t) 1.0l - wcs->normalized_skew;
   1c19c:	2000      	movs	r0, #0
   1c19e:	492f      	ldr	r1, [pc, #188]	; (1c25c <wcs_timescale_ev+0x1cc>)
   1c1a0:	f004 fee4 	bl	20f6c <__aeabi_dsub>
   1c1a4:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
        .ppm = DPL_FLOAT64_MUL(wcs->fractional_skew, DPL_FLOAT64_INIT(1e6l))
    };
    wcs_json_write_uint64(&json);
#endif
    }
}
   1c1a8:	b011      	add	sp, #68	; 0x44
   1c1aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert(ev != NULL);
   1c1ac:	2300      	movs	r3, #0
   1c1ae:	461a      	mov	r2, r3
   1c1b0:	4619      	mov	r1, r3
   1c1b2:	4618      	mov	r0, r3
   1c1b4:	f7ec ff4a 	bl	904c <__assert_func>
    assert(dpl_event_get_arg(ev) != NULL);
   1c1b8:	2300      	movs	r3, #0
   1c1ba:	461a      	mov	r2, r3
   1c1bc:	4619      	mov	r1, r3
   1c1be:	4618      	mov	r0, r3
   1c1c0:	f7ec ff44 	bl	904c <__assert_func>
            double z[] ={(double) wcs->master_epoch.lo,
   1c1c4:	6920      	ldr	r0, [r4, #16]
   1c1c6:	7d21      	ldrb	r1, [r4, #20]
   1c1c8:	f005 f852 	bl	21270 <__aeabi_ul2d>
   1c1cc:	e9cd 0100 	strd	r0, r1, [sp]
                        (1.0l + (double ) uwb_calc_clock_offset_ratio(
   1c1d0:	6838      	ldr	r0, [r7, #0]
   1c1d2:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1c1d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   1c1d8:	2200      	movs	r2, #0
   1c1da:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   1c1dc:	4798      	blx	r3
   1c1de:	ec51 0b10 	vmov	r0, r1, d0
   1c1e2:	2200      	movs	r2, #0
   1c1e4:	4b1d      	ldr	r3, [pc, #116]	; (1c25c <wcs_timescale_ev+0x1cc>)
   1c1e6:	f004 fec3 	bl	20f70 <__adddf3>
                               UWB_CR_CARRIER_INTEGRATOR)) * MYNEWT_VAL(UWB_WCS_DTU)
   1c1ea:	a317      	add	r3, pc, #92	; (adr r3, 1c248 <wcs_timescale_ev+0x1b8>)
   1c1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c1f0:	f005 f874 	bl	212dc <__aeabi_dmul>
            double z[] ={(double) wcs->master_epoch.lo,
   1c1f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
            double T = wcs->observed_interval / MYNEWT_VAL(UWB_WCS_DTU) ; // observed interval in seconds, master reference
   1c1f8:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
   1c1fc:	f005 f838 	bl	21270 <__aeabi_ul2d>
   1c200:	a311      	add	r3, pc, #68	; (adr r3, 1c248 <wcs_timescale_ev+0x1b8>)
   1c202:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c206:	f005 f993 	bl	21530 <__aeabi_ddiv>
   1c20a:	ec41 0b10 	vmov	d0, r0, r1
            double r[] = {MYNEWT_VAL(TIMESCALE_RVAR), MYNEWT_VAL(UWB_WCS_DTU) * 1e20};
   1c20e:	ad0a      	add	r5, sp, #40	; 0x28
   1c210:	4b13      	ldr	r3, [pc, #76]	; (1c260 <wcs_timescale_ev+0x1d0>)
   1c212:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1c214:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            wcs->status.valid = timescale_main(timescale, z, q, r, T).valid;
   1c218:	462b      	mov	r3, r5
   1c21a:	aa04      	add	r2, sp, #16
   1c21c:	4669      	mov	r1, sp
   1c21e:	4630      	mov	r0, r6
   1c220:	f7fd fa32 	bl	19688 <timescale_main>
   1c224:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   1c228:	7823      	ldrb	r3, [r4, #0]
   1c22a:	f360 0382 	bfi	r3, r0, #2, #1
   1c22e:	7023      	strb	r3, [r4, #0]
   1c230:	e795      	b.n	1c15e <wcs_timescale_ev+0xce>
            wcs->normalized_skew = (dpl_float64_t) 1.0l;
   1c232:	2200      	movs	r2, #0
   1c234:	4b09      	ldr	r3, [pc, #36]	; (1c25c <wcs_timescale_ev+0x1cc>)
   1c236:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
            wcs->fractional_skew = (dpl_float64_t) 0.0l;
   1c23a:	2200      	movs	r2, #0
   1c23c:	2300      	movs	r3, #0
   1c23e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
}
   1c242:	e7b1      	b.n	1c1a8 <wcs_timescale_ev+0x118>
   1c244:	f3af 8000 	nop.w
   1c248:	00000000 	.word	0x00000000
   1c24c:	422e8480 	.word	0x422e8480
   1c250:	a0b5ed8d 	.word	0xa0b5ed8d
   1c254:	3ff0c6f7 	.word	0x3ff0c6f7
   1c258:	000248b8 	.word	0x000248b8
   1c25c:	3ff00000 	.word	0x3ff00000
   1c260:	000248d0 	.word	0x000248d0
   1c264:	00000000 	.word	0x00000000

0001c268 <wcs_timescale_init>:
wcs_timescale_init(struct uwb_wcs_instance * wcs){
   1c268:	b570      	push	{r4, r5, r6, lr}
   1c26a:	b086      	sub	sp, #24
   1c26c:	4604      	mov	r4, r0
    struct uwb_ccp_instance * ccp = wcs->ccp;
   1c26e:	6e06      	ldr	r6, [r0, #96]	; 0x60
    double q[] = { MYNEWT_VAL(TIMESCALE_QVAR) * 1.0l, MYNEWT_VAL(TIMESCALE_QVAR) * 0.1l, MYNEWT_VAL(TIMESCALE_QVAR) * 0.01l};
   1c270:	46ec      	mov	ip, sp
   1c272:	4d1b      	ldr	r5, [pc, #108]	; (1c2e0 <wcs_timescale_init+0x78>)
   1c274:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1c276:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1c27a:	e895 0003 	ldmia.w	r5, {r0, r1}
   1c27e:	e88c 0003 	stmia.w	ip, {r0, r1}
    wcs->timescale = timescale_init(NULL, NULL, q, T);
   1c282:	ed9f 0b15 	vldr	d0, [pc, #84]	; 1c2d8 <wcs_timescale_init+0x70>
   1c286:	466a      	mov	r2, sp
   1c288:	2100      	movs	r1, #0
   1c28a:	4608      	mov	r0, r1
   1c28c:	f7fd f966 	bl	1955c <timescale_init>
   1c290:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    wcs->cbs = (struct uwb_mac_interface){
   1c294:	f104 0564 	add.w	r5, r4, #100	; 0x64
   1c298:	223c      	movs	r2, #60	; 0x3c
   1c29a:	2100      	movs	r1, #0
   1c29c:	4628      	mov	r0, r5
   1c29e:	f7f1 fbb0 	bl	da02 <memset>
   1c2a2:	2302      	movs	r3, #2
   1c2a4:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
   1c2a8:	66a4      	str	r4, [r4, #104]	; 0x68
   1c2aa:	4b0e      	ldr	r3, [pc, #56]	; (1c2e4 <wcs_timescale_init+0x7c>)
   1c2ac:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    wcs->normalized_skew = (dpl_float64_t) 1.0l;
   1c2b0:	2200      	movs	r2, #0
   1c2b2:	4b0d      	ldr	r3, [pc, #52]	; (1c2e8 <wcs_timescale_init+0x80>)
   1c2b4:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
    wcs->fractional_skew = (dpl_float64_t) 0.0l;
   1c2b8:	2200      	movs	r2, #0
   1c2ba:	2300      	movs	r3, #0
   1c2bc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
    uwb_mac_append_interface(ccp->dev_inst, &wcs->cbs);
   1c2c0:	4629      	mov	r1, r5
   1c2c2:	6830      	ldr	r0, [r6, #0]
   1c2c4:	f7ec fc48 	bl	8b58 <uwb_mac_append_interface>
    uwb_wcs_set_postprocess(wcs, &wcs_timescale_ev);      // Using default process
   1c2c8:	4908      	ldr	r1, [pc, #32]	; (1c2ec <wcs_timescale_init+0x84>)
   1c2ca:	4620      	mov	r0, r4
   1c2cc:	f7f1 f968 	bl	d5a0 <uwb_wcs_set_postprocess>
}
   1c2d0:	4620      	mov	r0, r4
   1c2d2:	b006      	add	sp, #24
   1c2d4:	bd70      	pop	{r4, r5, r6, pc}
   1c2d6:	bf00      	nop
   1c2d8:	a0b5ed8d 	.word	0xa0b5ed8d
   1c2dc:	3ff0c6f7 	.word	0x3ff0c6f7
   1c2e0:	000248b8 	.word	0x000248b8
   1c2e4:	0001bff9 	.word	0x0001bff9
   1c2e8:	3ff00000 	.word	0x3ff00000
   1c2ec:	0001c091 	.word	0x0001c091

0001c2f0 <wcs_timescale_free>:
{
   1c2f0:	b510      	push	{r4, lr}
   1c2f2:	4604      	mov	r4, r0
    uwb_mac_remove_interface(wcs->ccp->dev_inst, wcs->cbs.id);
   1c2f4:	6e03      	ldr	r3, [r0, #96]	; 0x60
   1c2f6:	f8b0 1066 	ldrh.w	r1, [r0, #102]	; 0x66
   1c2fa:	6818      	ldr	r0, [r3, #0]
   1c2fc:	f7ec fc51 	bl	8ba2 <uwb_mac_remove_interface>
    timescale_free(wcs->timescale);
   1c300:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   1c304:	f7fd f9a4 	bl	19650 <timescale_free>
}
   1c308:	bd10      	pop	{r4, pc}
	...

0001c30c <wcs_timescale_pkg_init>:
 *
 * @return void
 */
void
wcs_timescale_pkg_init(void)
{
   1c30c:	b510      	push	{r4, lr}
    int i;
    struct uwb_dev * udev;
    struct uwb_ccp_instance * ccp;

#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    printf("{\"utime\": %lu,\"msg\": \"wcs_timescale_pkg_init\"}\n",dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
   1c30e:	f7f2 f810 	bl	e332 <dpl_cputime_get32>
   1c312:	4601      	mov	r1, r0
   1c314:	480a      	ldr	r0, [pc, #40]	; (1c340 <wcs_timescale_pkg_init+0x34>)
   1c316:	f7f1 ff87 	bl	e228 <printf>
#endif

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
   1c31a:	2400      	movs	r4, #0
   1c31c:	e000      	b.n	1c320 <wcs_timescale_pkg_init+0x14>
   1c31e:	3401      	adds	r4, #1
   1c320:	2c02      	cmp	r4, #2
   1c322:	dc0b      	bgt.n	1c33c <wcs_timescale_pkg_init+0x30>
        udev = uwb_dev_idx_lookup(i);
   1c324:	4620      	mov	r0, r4
   1c326:	f7ec fbe7 	bl	8af8 <uwb_dev_idx_lookup>
        if (!udev) {
   1c32a:	2800      	cmp	r0, #0
   1c32c:	d0f7      	beq.n	1c31e <wcs_timescale_pkg_init+0x12>
            continue;
        }
        ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_CCP);
   1c32e:	2101      	movs	r1, #1
   1c330:	f7ec fc67 	bl	8c02 <uwb_mac_find_cb_inst_ptr>
        wcs_timescale_init(ccp->wcs);
   1c334:	6e80      	ldr	r0, [r0, #104]	; 0x68
   1c336:	f7ff ff97 	bl	1c268 <wcs_timescale_init>
   1c33a:	e7f0      	b.n	1c31e <wcs_timescale_pkg_init+0x12>
    }
}
   1c33c:	bd10      	pop	{r4, pc}
   1c33e:	bf00      	nop
   1c340:	00024888 	.word	0x00024888

0001c344 <wcs_timescale_pkg_down>:
 *
 * @return void
 */
int
wcs_timescale_pkg_down(int reason)
{
   1c344:	b510      	push	{r4, lr}
    int i;
    struct uwb_dev *udev;
    struct uwb_wcs_instance * wcs;

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
   1c346:	2400      	movs	r4, #0
   1c348:	e000      	b.n	1c34c <wcs_timescale_pkg_down+0x8>
   1c34a:	3401      	adds	r4, #1
   1c34c:	2c02      	cmp	r4, #2
   1c34e:	dc0c      	bgt.n	1c36a <wcs_timescale_pkg_down+0x26>
        udev = uwb_dev_idx_lookup(i);
   1c350:	4620      	mov	r0, r4
   1c352:	f7ec fbd1 	bl	8af8 <uwb_dev_idx_lookup>
        if (!udev) {
   1c356:	2800      	cmp	r0, #0
   1c358:	d0f7      	beq.n	1c34a <wcs_timescale_pkg_down+0x6>
            continue;
        }
        wcs = (struct uwb_wcs_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_WCS);
   1c35a:	2102      	movs	r1, #2
   1c35c:	f7ec fc51 	bl	8c02 <uwb_mac_find_cb_inst_ptr>
        if (!wcs) {
   1c360:	2800      	cmp	r0, #0
   1c362:	d0f2      	beq.n	1c34a <wcs_timescale_pkg_down+0x6>
            continue;
        }
        wcs_timescale_free(wcs);
   1c364:	f7ff ffc4 	bl	1c2f0 <wcs_timescale_free>
   1c368:	e7ef      	b.n	1c34a <wcs_timescale_pkg_down+0x6>
    }

    return 0;
}
   1c36a:	2000      	movs	r0, #0
   1c36c:	bd10      	pop	{r4, pc}

0001c36e <realloc>:
#include "malloc.h"

/* FIXME: This is cheesy, it should be fixed later */

void *realloc(void *ptr, size_t size)
{
   1c36e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct free_arena_header *ah;
	void *newptr;
	size_t oldsize;

	if (!ptr)
   1c370:	b300      	cbz	r0, 1c3b4 <realloc+0x46>
   1c372:	4606      	mov	r6, r0
		return malloc(size);

	if (size == 0 || size > (SIZE_MAX - sizeof(struct arena_header))) {
   1c374:	1e4b      	subs	r3, r1, #1
   1c376:	f113 0f12 	cmn.w	r3, #18
   1c37a:	d820      	bhi.n	1c3be <realloc+0x50>
		free(ptr);
		return NULL;
	}

	/* Add the obligatory arena header, and round up */
	size = (size + 2 * sizeof(struct arena_header) - 1) & ARENA_SIZE_MASK;
   1c37c:	311f      	adds	r1, #31
   1c37e:	f021 040f 	bic.w	r4, r1, #15

	ah = (struct free_arena_header *)
	    ((struct arena_header *)ptr - 1);

	if (ah->a.size >= size && size >= (ah->a.size >> 2)) {
   1c382:	f850 5c0c 	ldr.w	r5, [r0, #-12]
   1c386:	42a5      	cmp	r5, r4
   1c388:	d302      	bcc.n	1c390 <realloc+0x22>
   1c38a:	ebb4 0f95 	cmp.w	r4, r5, lsr #2
   1c38e:	d21c      	bcs.n	1c3ca <realloc+0x5c>
	} else {
		/* Make me a new block.  This is kind of bogus; we should
		   be checking the following block to see if we can do an
		   in-place adjustment... fix that later. */

		oldsize = ah->a.size - sizeof(struct arena_header);
   1c390:	3d10      	subs	r5, #16

		newptr = malloc(size);
   1c392:	4620      	mov	r0, r4
   1c394:	f7f1 fab8 	bl	d908 <malloc>
                if (newptr) {
   1c398:	4607      	mov	r7, r0
   1c39a:	b1a0      	cbz	r0, 1c3c6 <realloc+0x58>
                    memcpy(newptr, ptr, (size < oldsize) ? size : oldsize);
   1c39c:	4622      	mov	r2, r4
   1c39e:	42ac      	cmp	r4, r5
   1c3a0:	bf28      	it	cs
   1c3a2:	462a      	movcs	r2, r5
   1c3a4:	4631      	mov	r1, r6
   1c3a6:	f7f1 fb1f 	bl	d9e8 <memcpy>
                    free(ptr);
   1c3aa:	4630      	mov	r0, r6
   1c3ac:	f7f1 fae2 	bl	d974 <free>
                } else {
                    newptr = ptr;
                }
		return newptr;
	}
}
   1c3b0:	4638      	mov	r0, r7
   1c3b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return malloc(size);
   1c3b4:	4608      	mov	r0, r1
   1c3b6:	f7f1 faa7 	bl	d908 <malloc>
   1c3ba:	4607      	mov	r7, r0
   1c3bc:	e7f8      	b.n	1c3b0 <realloc+0x42>
		free(ptr);
   1c3be:	f7f1 fad9 	bl	d974 <free>
		return NULL;
   1c3c2:	2700      	movs	r7, #0
   1c3c4:	e7f4      	b.n	1c3b0 <realloc+0x42>
                    newptr = ptr;
   1c3c6:	4637      	mov	r7, r6
		return newptr;
   1c3c8:	e7f2      	b.n	1c3b0 <realloc+0x42>
		return ptr;
   1c3ca:	4607      	mov	r7, r0
   1c3cc:	e7f0      	b.n	1c3b0 <realloc+0x42>

0001c3ce <sprintf>:
#include <stdio.h>
#include <unistd.h>
#include <stdint.h>

int sprintf(char *buffer, const char *format, ...)
{
   1c3ce:	b40e      	push	{r1, r2, r3}
   1c3d0:	b500      	push	{lr}
   1c3d2:	b082      	sub	sp, #8
   1c3d4:	ab03      	add	r3, sp, #12
   1c3d6:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list ap;
	int rv;

	va_start(ap, format);
   1c3da:	9301      	str	r3, [sp, #4]
	rv = vsnprintf(buffer, SIZE_MAX/2, format, ap);
   1c3dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1c3e0:	f7f1 ff34 	bl	e24c <vsnprintf>
	va_end(ap);

	return rv;
}
   1c3e4:	b002      	add	sp, #8
   1c3e6:	f85d eb04 	ldr.w	lr, [sp], #4
   1c3ea:	b003      	add	sp, #12
   1c3ec:	4770      	bx	lr

0001c3ee <strchr>:

#include <string.h>

char *strchr(const char *s, int c)
{
	while (*s != (char)c) {
   1c3ee:	e000      	b.n	1c3f2 <strchr+0x4>
		if (!*s)
			return NULL;
		s++;
   1c3f0:	3001      	adds	r0, #1
	while (*s != (char)c) {
   1c3f2:	7803      	ldrb	r3, [r0, #0]
   1c3f4:	b2ca      	uxtb	r2, r1
   1c3f6:	4293      	cmp	r3, r2
   1c3f8:	d003      	beq.n	1c402 <strchr+0x14>
		if (!*s)
   1c3fa:	2b00      	cmp	r3, #0
   1c3fc:	d1f8      	bne.n	1c3f0 <strchr+0x2>
			return NULL;
   1c3fe:	2000      	movs	r0, #0
	}

	return (char *)s;
}
   1c400:	4770      	bx	lr
   1c402:	4770      	bx	lr

0001c404 <strcpy>:
 */

#include <string.h>

char *strcpy(char *dst, const char *src)
{
   1c404:	b410      	push	{r4}
	char *q = dst;
   1c406:	4602      	mov	r2, r0
	const char *p = src;
	char ch;

	do {
		*q++ = ch = *p++;
   1c408:	780c      	ldrb	r4, [r1, #0]
   1c40a:	3101      	adds	r1, #1
   1c40c:	7014      	strb	r4, [r2, #0]
   1c40e:	3201      	adds	r2, #1
	} while (ch);
   1c410:	2c00      	cmp	r4, #0
   1c412:	d1f9      	bne.n	1c408 <strcpy+0x4>

	return dst;
}
   1c414:	f85d 4b04 	ldr.w	r4, [sp], #4
   1c418:	4770      	bx	lr

0001c41a <strncmp>:
 */

#include <string.h>

int strncmp(const char *s1, const char *s2, size_t n)
{
   1c41a:	b410      	push	{r4}
   1c41c:	4603      	mov	r3, r0
	const unsigned char *c1 = (const unsigned char *)s1;
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;
   1c41e:	2000      	movs	r0, #0

	while (n--) {
   1c420:	4614      	mov	r4, r2
   1c422:	3a01      	subs	r2, #1
   1c424:	b13c      	cbz	r4, 1c436 <strncmp+0x1c>
		d = (int)(ch = *c1++) - (int)*c2++;
   1c426:	f813 4b01 	ldrb.w	r4, [r3], #1
   1c42a:	f811 0b01 	ldrb.w	r0, [r1], #1
		if (d || !ch)
   1c42e:	1a20      	subs	r0, r4, r0
   1c430:	d101      	bne.n	1c436 <strncmp+0x1c>
   1c432:	2c00      	cmp	r4, #0
   1c434:	d1f4      	bne.n	1c420 <strncmp+0x6>
			break;
	}

	return d;
}
   1c436:	f85d 4b04 	ldr.w	r4, [sp], #4
   1c43a:	4770      	bx	lr

0001c43c <strrchr>:
 */

#include <string.h>

char *strrchr(const char *s, int c)
{
   1c43c:	4603      	mov	r3, r0
	const char *found = NULL;
   1c43e:	2000      	movs	r0, #0

	while (*s) {
   1c440:	e000      	b.n	1c444 <strrchr+0x8>
		if (*s == (char)c)
			found = s;
		s++;
   1c442:	3301      	adds	r3, #1
	while (*s) {
   1c444:	781a      	ldrb	r2, [r3, #0]
   1c446:	b12a      	cbz	r2, 1c454 <strrchr+0x18>
		if (*s == (char)c)
   1c448:	fa5f fc81 	uxtb.w	ip, r1
   1c44c:	4594      	cmp	ip, r2
   1c44e:	d1f8      	bne.n	1c442 <strrchr+0x6>
			found = s;
   1c450:	4618      	mov	r0, r3
   1c452:	e7f6      	b.n	1c442 <strrchr+0x6>
	}

	return (char *)found;
}
   1c454:	4770      	bx	lr

0001c456 <strtok_r>:
#include <string.h>

char *strtok_r(char *s, const char *delim, char **holder)
{
   1c456:	b538      	push	{r3, r4, r5, lr}
   1c458:	460d      	mov	r5, r1
   1c45a:	4614      	mov	r4, r2
	if (s)
   1c45c:	b100      	cbz	r0, 1c460 <strtok_r+0xa>
		*holder = s;
   1c45e:	6020      	str	r0, [r4, #0]

	do {
		s = strsep(holder, delim);
   1c460:	4629      	mov	r1, r5
   1c462:	4620      	mov	r0, r4
   1c464:	f000 f89e 	bl	1c5a4 <strsep>
	} while (s && !*s);
   1c468:	4603      	mov	r3, r0
   1c46a:	b110      	cbz	r0, 1c472 <strtok_r+0x1c>
   1c46c:	7800      	ldrb	r0, [r0, #0]
   1c46e:	2800      	cmp	r0, #0
   1c470:	d0f6      	beq.n	1c460 <strtok_r+0xa>

	return s;
}
   1c472:	4618      	mov	r0, r3
   1c474:	bd38      	pop	{r3, r4, r5, pc}

0001c476 <strtol>:
#include <stddef.h>
#include <stdlib.h>
#include <inttypes.h>

TYPE NAME(const char *nptr, char **endptr, int base)
{
   1c476:	b508      	push	{r3, lr}
	return (TYPE) strntoumax(nptr, endptr, base, ~(size_t) 0);
   1c478:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c47c:	f000 f812 	bl	1c4a4 <strntoumax>
}
   1c480:	bd08      	pop	{r3, pc}

0001c482 <strtoll>:
{
   1c482:	b508      	push	{r3, lr}
	return (TYPE) strntoumax(nptr, endptr, base, ~(size_t) 0);
   1c484:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c488:	f000 f80c 	bl	1c4a4 <strntoumax>
}
   1c48c:	bd08      	pop	{r3, pc}
	...

0001c490 <vprintf>:

#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
   1c490:	b508      	push	{r3, lr}
   1c492:	460a      	mov	r2, r1
	return vfprintf(stdout, format, ap);
   1c494:	4601      	mov	r1, r0
   1c496:	4b02      	ldr	r3, [pc, #8]	; (1c4a0 <vprintf+0x10>)
   1c498:	6818      	ldr	r0, [r3, #0]
   1c49a:	f7f1 fec1 	bl	e220 <vfprintf>
}
   1c49e:	bd08      	pop	{r3, pc}
   1c4a0:	00023224 	.word	0x00023224

0001c4a4 <strntoumax>:
		return -1;
	}
}

uintmax_t strntoumax(const char *nptr, char **endptr, int base, size_t n)
{
   1c4a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c4a6:	4604      	mov	r4, r0
   1c4a8:	460d      	mov	r5, r1
	int minus = 0;
	uintmax_t v = 0;
	int d;

	while (n && isspace((unsigned char)*nptr)) {
   1c4aa:	e001      	b.n	1c4b0 <strntoumax+0xc>
		nptr++;
   1c4ac:	3401      	adds	r4, #1
		n--;
   1c4ae:	3b01      	subs	r3, #1
	while (n && isspace((unsigned char)*nptr)) {
   1c4b0:	b143      	cbz	r3, 1c4c4 <strntoumax+0x20>
   1c4b2:	7821      	ldrb	r1, [r4, #0]
	return __c == ' ' || __c == '\n' || __c == '\t' || __c == '\r';
   1c4b4:	2920      	cmp	r1, #32
   1c4b6:	d0f9      	beq.n	1c4ac <strntoumax+0x8>
   1c4b8:	290a      	cmp	r1, #10
   1c4ba:	d0f7      	beq.n	1c4ac <strntoumax+0x8>
   1c4bc:	2909      	cmp	r1, #9
   1c4be:	d0f5      	beq.n	1c4ac <strntoumax+0x8>
   1c4c0:	290d      	cmp	r1, #13
   1c4c2:	d0f3      	beq.n	1c4ac <strntoumax+0x8>
	}

	/* Single optional + or - */
	if (n) {
   1c4c4:	b16b      	cbz	r3, 1c4e2 <strntoumax+0x3e>
		char c = *nptr;
   1c4c6:	7827      	ldrb	r7, [r4, #0]
		if (c == '-' || c == '+') {
   1c4c8:	2f2d      	cmp	r7, #45	; 0x2d
   1c4ca:	d003      	beq.n	1c4d4 <strntoumax+0x30>
   1c4cc:	2f2b      	cmp	r7, #43	; 0x2b
   1c4ce:	d001      	beq.n	1c4d4 <strntoumax+0x30>
	int minus = 0;
   1c4d0:	2700      	movs	r7, #0
   1c4d2:	e007      	b.n	1c4e4 <strntoumax+0x40>
			minus = (c == '-');
   1c4d4:	2f2d      	cmp	r7, #45	; 0x2d
   1c4d6:	bf14      	ite	ne
   1c4d8:	2700      	movne	r7, #0
   1c4da:	2701      	moveq	r7, #1
			nptr++;
   1c4dc:	3401      	adds	r4, #1
			n--;
   1c4de:	3b01      	subs	r3, #1
   1c4e0:	e000      	b.n	1c4e4 <strntoumax+0x40>
	int minus = 0;
   1c4e2:	2700      	movs	r7, #0
		}
	}

	if (base == 0) {
   1c4e4:	b9ba      	cbnz	r2, 1c516 <strntoumax+0x72>
		if (n >= 2 && nptr[0] == '0' &&
   1c4e6:	2b01      	cmp	r3, #1
   1c4e8:	d902      	bls.n	1c4f0 <strntoumax+0x4c>
   1c4ea:	7822      	ldrb	r2, [r4, #0]
   1c4ec:	2a30      	cmp	r2, #48	; 0x30
   1c4ee:	d005      	beq.n	1c4fc <strntoumax+0x58>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
			n -= 2;
			nptr += 2;
			base = 16;
		} else if (n >= 1 && nptr[0] == '0') {
   1c4f0:	b31b      	cbz	r3, 1c53a <strntoumax+0x96>
   1c4f2:	7822      	ldrb	r2, [r4, #0]
   1c4f4:	2a30      	cmp	r2, #48	; 0x30
   1c4f6:	d00a      	beq.n	1c50e <strntoumax+0x6a>
			n--;
			nptr++;
			base = 8;
		} else {
			base = 10;
   1c4f8:	220a      	movs	r2, #10
   1c4fa:	e00e      	b.n	1c51a <strntoumax+0x76>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   1c4fc:	7862      	ldrb	r2, [r4, #1]
		if (n >= 2 && nptr[0] == '0' &&
   1c4fe:	2a78      	cmp	r2, #120	; 0x78
   1c500:	d001      	beq.n	1c506 <strntoumax+0x62>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   1c502:	2a58      	cmp	r2, #88	; 0x58
   1c504:	d1f4      	bne.n	1c4f0 <strntoumax+0x4c>
			n -= 2;
   1c506:	3b02      	subs	r3, #2
			nptr += 2;
   1c508:	3402      	adds	r4, #2
			base = 16;
   1c50a:	2210      	movs	r2, #16
   1c50c:	e005      	b.n	1c51a <strntoumax+0x76>
			n--;
   1c50e:	3b01      	subs	r3, #1
			nptr++;
   1c510:	3401      	adds	r4, #1
			base = 8;
   1c512:	2208      	movs	r2, #8
   1c514:	e001      	b.n	1c51a <strntoumax+0x76>
		}
	} else if (base == 16) {
   1c516:	2a10      	cmp	r2, #16
   1c518:	d002      	beq.n	1c520 <strntoumax+0x7c>
			base = 16;
   1c51a:	2000      	movs	r0, #0
   1c51c:	4601      	mov	r1, r0
   1c51e:	e028      	b.n	1c572 <strntoumax+0xce>
		if (n >= 2 && nptr[0] == '0' &&
   1c520:	2b01      	cmp	r3, #1
   1c522:	d9fa      	bls.n	1c51a <strntoumax+0x76>
   1c524:	7821      	ldrb	r1, [r4, #0]
   1c526:	2930      	cmp	r1, #48	; 0x30
   1c528:	d1f7      	bne.n	1c51a <strntoumax+0x76>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   1c52a:	7861      	ldrb	r1, [r4, #1]
		if (n >= 2 && nptr[0] == '0' &&
   1c52c:	2978      	cmp	r1, #120	; 0x78
   1c52e:	d001      	beq.n	1c534 <strntoumax+0x90>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   1c530:	2958      	cmp	r1, #88	; 0x58
   1c532:	d1f2      	bne.n	1c51a <strntoumax+0x76>
			n -= 2;
   1c534:	3b02      	subs	r3, #2
			nptr += 2;
   1c536:	3402      	adds	r4, #2
   1c538:	e7ef      	b.n	1c51a <strntoumax+0x76>
			base = 10;
   1c53a:	220a      	movs	r2, #10
   1c53c:	e7ed      	b.n	1c51a <strntoumax+0x76>
		return ch - '0';
   1c53e:	46b4      	mov	ip, r6
   1c540:	e004      	b.n	1c54c <strntoumax+0xa8>
		return ch - 'A' + 10;
   1c542:	f1ac 0c37 	sub.w	ip, ip, #55	; 0x37
   1c546:	e001      	b.n	1c54c <strntoumax+0xa8>
		return ch - 'a' + 10;
   1c548:	f1ac 0c57 	sub.w	ip, ip, #87	; 0x57
		}
	}

	while (n && (d = digitval(*nptr)) >= 0 && d < base) {
   1c54c:	f1bc 0f00 	cmp.w	ip, #0
   1c550:	db21      	blt.n	1c596 <strntoumax+0xf2>
   1c552:	4562      	cmp	r2, ip
   1c554:	dd1f      	ble.n	1c596 <strntoumax+0xf2>
		v = v * base + d;
   1c556:	17d6      	asrs	r6, r2, #31
   1c558:	fb02 fe01 	mul.w	lr, r2, r1
   1c55c:	fb00 e106 	mla	r1, r0, r6, lr
   1c560:	fba2 0600 	umull	r0, r6, r2, r0
   1c564:	4431      	add	r1, r6
   1c566:	eb10 000c 	adds.w	r0, r0, ip
   1c56a:	eb41 71ec 	adc.w	r1, r1, ip, asr #31
		n--;
   1c56e:	3b01      	subs	r3, #1
		nptr++;
   1c570:	3401      	adds	r4, #1
	while (n && (d = digitval(*nptr)) >= 0 && d < base) {
   1c572:	b183      	cbz	r3, 1c596 <strntoumax+0xf2>
   1c574:	f894 c000 	ldrb.w	ip, [r4]
	if (ch >= '0' && ch <= '9') {
   1c578:	f1ac 0630 	sub.w	r6, ip, #48	; 0x30
   1c57c:	2e09      	cmp	r6, #9
   1c57e:	d9de      	bls.n	1c53e <strntoumax+0x9a>
	} else if (ch >= 'A' && ch <= 'Z') {
   1c580:	f1ac 0641 	sub.w	r6, ip, #65	; 0x41
   1c584:	2e19      	cmp	r6, #25
   1c586:	d9dc      	bls.n	1c542 <strntoumax+0x9e>
	} else if (ch >= 'a' && ch <= 'z') {
   1c588:	f1ac 0661 	sub.w	r6, ip, #97	; 0x61
   1c58c:	2e19      	cmp	r6, #25
   1c58e:	d9db      	bls.n	1c548 <strntoumax+0xa4>
		return -1;
   1c590:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   1c594:	e7da      	b.n	1c54c <strntoumax+0xa8>
	}

	if (endptr)
   1c596:	b105      	cbz	r5, 1c59a <strntoumax+0xf6>
		*endptr = (char *)nptr;
   1c598:	602c      	str	r4, [r5, #0]

	return minus ? -v : v;
   1c59a:	b117      	cbz	r7, 1c5a2 <strntoumax+0xfe>
   1c59c:	4240      	negs	r0, r0
   1c59e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
}
   1c5a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001c5a4 <strsep>:
 */

#include <string.h>

char *strsep(char **stringp, const char *delim)
{
   1c5a4:	b538      	push	{r3, r4, r5, lr}
	char *s = *stringp;
   1c5a6:	6805      	ldr	r5, [r0, #0]
	char *e;

	if (!s)
   1c5a8:	b14d      	cbz	r5, 1c5be <strsep+0x1a>
   1c5aa:	4604      	mov	r4, r0
		return NULL;

	e = strpbrk(s, delim);
   1c5ac:	4628      	mov	r0, r5
   1c5ae:	f000 f808 	bl	1c5c2 <strpbrk>
	if (e)
   1c5b2:	4603      	mov	r3, r0
   1c5b4:	b110      	cbz	r0, 1c5bc <strsep+0x18>
		*e++ = '\0';
   1c5b6:	2200      	movs	r2, #0
   1c5b8:	f803 2b01 	strb.w	r2, [r3], #1

	*stringp = e;
   1c5bc:	6023      	str	r3, [r4, #0]
	return s;
}
   1c5be:	4628      	mov	r0, r5
   1c5c0:	bd38      	pop	{r3, r4, r5, pc}

0001c5c2 <strpbrk>:
*/

#include <string.h>

char *strpbrk(const char *s1, const char *s2)
{
   1c5c2:	468c      	mov	ip, r1
  const char *c = s2;
  if (!*s1)
   1c5c4:	7803      	ldrb	r3, [r0, #0]
   1c5c6:	b183      	cbz	r3, 1c5ea <strpbrk+0x28>
  const char *c = s2;
   1c5c8:	460a      	mov	r2, r1
   1c5ca:	e001      	b.n	1c5d0 <strpbrk+0xe>
      for (c = s2; *c; c++)
	{
	  if (*s1 == *c)
	    break;
	}
      if (*c)
   1c5cc:	b953      	cbnz	r3, 1c5e4 <strpbrk+0x22>
	break;
      s1++;
   1c5ce:	3001      	adds	r0, #1
  while (*s1)
   1c5d0:	7801      	ldrb	r1, [r0, #0]
   1c5d2:	b139      	cbz	r1, 1c5e4 <strpbrk+0x22>
      for (c = s2; *c; c++)
   1c5d4:	4662      	mov	r2, ip
   1c5d6:	7813      	ldrb	r3, [r2, #0]
   1c5d8:	2b00      	cmp	r3, #0
   1c5da:	d0f7      	beq.n	1c5cc <strpbrk+0xa>
	  if (*s1 == *c)
   1c5dc:	428b      	cmp	r3, r1
   1c5de:	d0f5      	beq.n	1c5cc <strpbrk+0xa>
      for (c = s2; *c; c++)
   1c5e0:	3201      	adds	r2, #1
   1c5e2:	e7f8      	b.n	1c5d6 <strpbrk+0x14>
    }

  if (*c == '\0')
   1c5e4:	7813      	ldrb	r3, [r2, #0]
   1c5e6:	b113      	cbz	r3, 1c5ee <strpbrk+0x2c>
   1c5e8:	4770      	bx	lr
    return (char *) NULL;
   1c5ea:	2000      	movs	r0, #0
   1c5ec:	4770      	bx	lr
    s1 = NULL;
   1c5ee:	2000      	movs	r0, #0

  return (char *) s1;
}
   1c5f0:	4770      	bx	lr

0001c5f2 <imgr_vercmp>:
 * @return                       1 if a > b
 */
static int
imgr_vercmp(const struct image_version *a, const struct image_version *b)
{
    if (a->iv_major < b->iv_major) {
   1c5f2:	7802      	ldrb	r2, [r0, #0]
   1c5f4:	780b      	ldrb	r3, [r1, #0]
   1c5f6:	429a      	cmp	r2, r3
   1c5f8:	d30c      	bcc.n	1c614 <imgr_vercmp+0x22>
        return -1;
    } else if (a->iv_major > b->iv_major) {
   1c5fa:	d80e      	bhi.n	1c61a <imgr_vercmp+0x28>
        return 1;
    }

    if (a->iv_minor < b->iv_minor) {
   1c5fc:	7842      	ldrb	r2, [r0, #1]
   1c5fe:	784b      	ldrb	r3, [r1, #1]
   1c600:	429a      	cmp	r2, r3
   1c602:	d30c      	bcc.n	1c61e <imgr_vercmp+0x2c>
        return -1;
    } else if (a->iv_minor > b->iv_minor) {
   1c604:	d80e      	bhi.n	1c624 <imgr_vercmp+0x32>
        return 1;
    }

    if (a->iv_revision < b->iv_revision) {
   1c606:	8842      	ldrh	r2, [r0, #2]
   1c608:	884b      	ldrh	r3, [r1, #2]
   1c60a:	429a      	cmp	r2, r3
   1c60c:	d30c      	bcc.n	1c628 <imgr_vercmp+0x36>
        return -1;
    } else if (a->iv_revision > b->iv_revision) {
   1c60e:	d80e      	bhi.n	1c62e <imgr_vercmp+0x3c>
        return 1;
    }

    /* Note: For semver compatibility, don't compare the 32-bit build num. */

    return 0;
   1c610:	2000      	movs	r0, #0
   1c612:	4770      	bx	lr
        return -1;
   1c614:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c618:	4770      	bx	lr
        return 1;
   1c61a:	2001      	movs	r0, #1
   1c61c:	4770      	bx	lr
        return -1;
   1c61e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c622:	4770      	bx	lr
        return 1;
   1c624:	2001      	movs	r0, #1
   1c626:	4770      	bx	lr
        return -1;
   1c628:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c62c:	4770      	bx	lr
        return 1;
   1c62e:	2001      	movs	r0, #1
}
   1c630:	4770      	bx	lr

0001c632 <imgr_img_tlvs>:
{
   1c632:	b530      	push	{r4, r5, lr}
   1c634:	b083      	sub	sp, #12
   1c636:	4614      	mov	r4, r2
   1c638:	461d      	mov	r5, r3
    rc = flash_area_read(fa, *start_off, &tlv_info, sizeof(tlv_info));
   1c63a:	2304      	movs	r3, #4
   1c63c:	eb0d 0203 	add.w	r2, sp, r3
   1c640:	6821      	ldr	r1, [r4, #0]
   1c642:	f001 fdaf 	bl	1e1a4 <flash_area_read>
    if (rc) {
   1c646:	b968      	cbnz	r0, 1c664 <imgr_img_tlvs+0x32>
    if (tlv_info.it_magic != IMAGE_TLV_INFO_MAGIC) {
   1c648:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1c64c:	f646 1307 	movw	r3, #26887	; 0x6907
   1c650:	429a      	cmp	r2, r3
   1c652:	d10b      	bne.n	1c66c <imgr_img_tlvs+0x3a>
    *start_off += sizeof(tlv_info);
   1c654:	6822      	ldr	r2, [r4, #0]
   1c656:	3204      	adds	r2, #4
   1c658:	6022      	str	r2, [r4, #0]
    *end_off = *start_off + tlv_info.it_tlv_tot;
   1c65a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1c65e:	441a      	add	r2, r3
   1c660:	602a      	str	r2, [r5, #0]
    rc = 0;
   1c662:	e001      	b.n	1c668 <imgr_img_tlvs+0x36>
        rc = -1;
   1c664:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1c668:	b003      	add	sp, #12
   1c66a:	bd30      	pop	{r4, r5, pc}
        rc = 1;
   1c66c:	2001      	movs	r0, #1
    return rc;
   1c66e:	e7fb      	b.n	1c668 <imgr_img_tlvs+0x36>

0001c670 <imgr_upload_good_rsp>:
    return 0;
}

static int
imgr_upload_good_rsp(struct mgmt_cbuf *cb)
{
   1c670:	b538      	push	{r3, r4, r5, lr}
    CborError err = CborNoError;

    err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1c672:	f100 040c 	add.w	r4, r0, #12
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1c676:	2202      	movs	r2, #2
   1c678:	490e      	ldr	r1, [pc, #56]	; (1c6b4 <imgr_upload_good_rsp+0x44>)
   1c67a:	4620      	mov	r0, r4
   1c67c:	f7f6 fd49 	bl	13112 <cbor_encode_text_string>
   1c680:	4605      	mov	r5, r0
    err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1c682:	2200      	movs	r2, #0
   1c684:	2300      	movs	r3, #0
   1c686:	4620      	mov	r0, r4
   1c688:	f7f6 fcc8 	bl	1301c <cbor_encode_int>
   1c68c:	4305      	orrs	r5, r0
   1c68e:	2203      	movs	r2, #3
   1c690:	4909      	ldr	r1, [pc, #36]	; (1c6b8 <imgr_upload_good_rsp+0x48>)
   1c692:	4620      	mov	r0, r4
   1c694:	f7f6 fd3d 	bl	13112 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&cb->encoder, "off");
   1c698:	4305      	orrs	r5, r0
    err |= cbor_encode_int(&cb->encoder, imgr_state.off);
   1c69a:	4b08      	ldr	r3, [pc, #32]	; (1c6bc <imgr_upload_good_rsp+0x4c>)
   1c69c:	685a      	ldr	r2, [r3, #4]
   1c69e:	2300      	movs	r3, #0
   1c6a0:	4620      	mov	r0, r4
   1c6a2:	f7f6 fcbb 	bl	1301c <cbor_encode_int>

    if (err != 0) {
   1c6a6:	ea55 0300 	orrs.w	r3, r5, r0
   1c6aa:	d101      	bne.n	1c6b0 <imgr_upload_good_rsp+0x40>
        return MGMT_ERR_ENOMEM;
    }

    return 0;
   1c6ac:	2000      	movs	r0, #0
}
   1c6ae:	bd38      	pop	{r3, r4, r5, pc}
        return MGMT_ERR_ENOMEM;
   1c6b0:	2002      	movs	r0, #2
   1c6b2:	e7fc      	b.n	1c6ae <imgr_upload_good_rsp+0x3e>
   1c6b4:	000238e4 	.word	0x000238e4
   1c6b8:	00023808 	.word	0x00023808
   1c6bc:	20004664 	.word	0x20004664

0001c6c0 <imgr_read_info>:
{
   1c6c0:	b570      	push	{r4, r5, r6, lr}
   1c6c2:	b08c      	sub	sp, #48	; 0x30
   1c6c4:	460c      	mov	r4, r1
   1c6c6:	4615      	mov	r5, r2
   1c6c8:	461e      	mov	r6, r3
    data_end = 0;
   1c6ca:	2200      	movs	r2, #0
   1c6cc:	9201      	str	r2, [sp, #4]
    area_id = flash_area_id_from_image_slot(image_slot);
   1c6ce:	f001 fdc9 	bl	1e264 <flash_area_id_from_image_slot>
    rc2 = flash_area_open(area_id, &fa);
   1c6d2:	a90b      	add	r1, sp, #44	; 0x2c
   1c6d4:	b2c0      	uxtb	r0, r0
   1c6d6:	f001 fd05 	bl	1e0e4 <flash_area_open>
    if (rc2) {
   1c6da:	2800      	cmp	r0, #0
   1c6dc:	d163      	bne.n	1c7a6 <imgr_read_info+0xe6>
    rc2 = flash_area_read_is_empty(fa, 0, hdr, sizeof(*hdr));
   1c6de:	2320      	movs	r3, #32
   1c6e0:	aa03      	add	r2, sp, #12
   1c6e2:	2100      	movs	r1, #0
   1c6e4:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1c6e6:	f001 fdb6 	bl	1e256 <flash_area_read_is_empty>
    if (rc2 < 0) {
   1c6ea:	2800      	cmp	r0, #0
   1c6ec:	db5e      	blt.n	1c7ac <imgr_read_info+0xec>
    if (ver) {
   1c6ee:	b11c      	cbz	r4, 1c6f8 <imgr_read_info+0x38>
        memset(ver, 0xff, sizeof(*ver));
   1c6f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c6f4:	6023      	str	r3, [r4, #0]
   1c6f6:	6063      	str	r3, [r4, #4]
    if (hdr->ih_magic == IMAGE_MAGIC) {
   1c6f8:	9a03      	ldr	r2, [sp, #12]
   1c6fa:	4b2f      	ldr	r3, [pc, #188]	; (1c7b8 <imgr_read_info+0xf8>)
   1c6fc:	429a      	cmp	r2, r3
   1c6fe:	d005      	beq.n	1c70c <imgr_read_info+0x4c>
    } else if (rc2 == 1) {
   1c700:	2801      	cmp	r0, #1
   1c702:	d020      	beq.n	1c746 <imgr_read_info+0x86>
        rc = 1;
   1c704:	2401      	movs	r4, #1
}
   1c706:	4620      	mov	r0, r4
   1c708:	b00c      	add	sp, #48	; 0x30
   1c70a:	bd70      	pop	{r4, r5, r6, pc}
        if (ver) {
   1c70c:	b11c      	cbz	r4, 1c716 <imgr_read_info+0x56>
            memcpy(ver, &hdr->ih_ver, sizeof(*ver));
   1c70e:	ab08      	add	r3, sp, #32
   1c710:	cb03      	ldmia	r3!, {r0, r1}
   1c712:	6020      	str	r0, [r4, #0]
   1c714:	6061      	str	r1, [r4, #4]
    if (flags) {
   1c716:	b10e      	cbz	r6, 1c71c <imgr_read_info+0x5c>
        *flags = hdr->ih_flags;
   1c718:	9b07      	ldr	r3, [sp, #28]
   1c71a:	6033      	str	r3, [r6, #0]
    data_off = hdr->ih_hdr_size + hdr->ih_img_size;
   1c71c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1c720:	9a06      	ldr	r2, [sp, #24]
   1c722:	4413      	add	r3, r2
   1c724:	9302      	str	r3, [sp, #8]
    rc = imgr_img_tlvs(fa, hdr, &data_off, &data_end);
   1c726:	ab01      	add	r3, sp, #4
   1c728:	aa02      	add	r2, sp, #8
   1c72a:	a903      	add	r1, sp, #12
   1c72c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1c72e:	f7ff ff80 	bl	1c632 <imgr_img_tlvs>
    if (rc) {
   1c732:	4604      	mov	r4, r0
   1c734:	2800      	cmp	r0, #0
   1c736:	d1e6      	bne.n	1c706 <imgr_read_info+0x46>
    if (data_end > fa->fa_size) {
   1c738:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1c73a:	689a      	ldr	r2, [r3, #8]
   1c73c:	9b01      	ldr	r3, [sp, #4]
   1c73e:	429a      	cmp	r2, r3
   1c740:	d209      	bcs.n	1c756 <imgr_read_info+0x96>
        rc = 1;
   1c742:	2401      	movs	r4, #1
   1c744:	e7df      	b.n	1c706 <imgr_read_info+0x46>
        rc = 2;
   1c746:	2402      	movs	r4, #2
   1c748:	e7dd      	b.n	1c706 <imgr_read_info+0x46>
            data_off += sizeof(*tlv) + tlv->it_len;
   1c74a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1c74e:	9a02      	ldr	r2, [sp, #8]
   1c750:	4413      	add	r3, r2
   1c752:	3304      	adds	r3, #4
   1c754:	9302      	str	r3, [sp, #8]
    while (data_off + sizeof(*tlv) <= data_end) {
   1c756:	9902      	ldr	r1, [sp, #8]
   1c758:	1d0a      	adds	r2, r1, #4
   1c75a:	9b01      	ldr	r3, [sp, #4]
   1c75c:	429a      	cmp	r2, r3
   1c75e:	d820      	bhi.n	1c7a2 <imgr_read_info+0xe2>
        rc2 = flash_area_read_is_empty(fa, data_off, tlv, sizeof(*tlv));
   1c760:	2304      	movs	r3, #4
   1c762:	aa03      	add	r2, sp, #12
   1c764:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1c766:	f001 fd76 	bl	1e256 <flash_area_read_is_empty>
        if (rc2 < 0) {
   1c76a:	2800      	cmp	r0, #0
   1c76c:	dbcb      	blt.n	1c706 <imgr_read_info+0x46>
        if (rc2 == 1) {
   1c76e:	2801      	cmp	r0, #1
   1c770:	d01f      	beq.n	1c7b2 <imgr_read_info+0xf2>
        if (tlv->it_type != IMAGE_TLV_SHA256 ||
   1c772:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1c776:	2b10      	cmp	r3, #16
   1c778:	d1e7      	bne.n	1c74a <imgr_read_info+0x8a>
          tlv->it_len != IMGMGR_HASH_LEN) {
   1c77a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
        if (tlv->it_type != IMAGE_TLV_SHA256 ||
   1c77e:	2b20      	cmp	r3, #32
   1c780:	d1e3      	bne.n	1c74a <imgr_read_info+0x8a>
        data_off += sizeof(*tlv);
   1c782:	9902      	ldr	r1, [sp, #8]
   1c784:	3104      	adds	r1, #4
   1c786:	9102      	str	r1, [sp, #8]
        if (hash) {
   1c788:	2d00      	cmp	r5, #0
   1c78a:	d0bc      	beq.n	1c706 <imgr_read_info+0x46>
            if (data_off + IMGMGR_HASH_LEN > data_end) {
   1c78c:	f101 0320 	add.w	r3, r1, #32
   1c790:	9a01      	ldr	r2, [sp, #4]
   1c792:	4293      	cmp	r3, r2
   1c794:	d8b7      	bhi.n	1c706 <imgr_read_info+0x46>
            rc2 = flash_area_read(fa, data_off, hash, IMGMGR_HASH_LEN);
   1c796:	2320      	movs	r3, #32
   1c798:	462a      	mov	r2, r5
   1c79a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1c79c:	f001 fd02 	bl	1e1a4 <flash_area_read>
            if (rc2) {
   1c7a0:	e7b1      	b.n	1c706 <imgr_read_info+0x46>
    rc = 1;
   1c7a2:	2401      	movs	r4, #1
   1c7a4:	e7af      	b.n	1c706 <imgr_read_info+0x46>
        return -1;
   1c7a6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1c7aa:	e7ac      	b.n	1c706 <imgr_read_info+0x46>
    int rc = -1;
   1c7ac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1c7b0:	e7a9      	b.n	1c706 <imgr_read_info+0x46>
    rc = 1;
   1c7b2:	4604      	mov	r4, r0
   1c7b4:	e7a7      	b.n	1c706 <imgr_read_info+0x46>
   1c7b6:	bf00      	nop
   1c7b8:	96f3b83d 	.word	0x96f3b83d

0001c7bc <imgr_upload_log>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
imgr_upload_log(bool is_first, bool is_last, int status)
{
   1c7bc:	b510      	push	{r4, lr}
   1c7be:	b088      	sub	sp, #32
   1c7c0:	4614      	mov	r4, r2
    uint8_t hash[IMGMGR_HASH_LEN];
    const uint8_t *hashp;
    int rc;

    if (is_first) {
   1c7c2:	b920      	cbnz	r0, 1c7ce <imgr_upload_log+0x12>
        return imgmgr_log_upload_start(status);
    }

    if (is_last || status != 0) {
   1c7c4:	b939      	cbnz	r1, 1c7d6 <imgr_upload_log+0x1a>
   1c7c6:	b932      	cbnz	r2, 1c7d6 <imgr_upload_log+0x1a>

        return imgmgr_log_upload_done(status, hashp);
    }

    /* Nothing to log. */
    return 0;
   1c7c8:	4610      	mov	r0, r2
}
   1c7ca:	b008      	add	sp, #32
   1c7cc:	bd10      	pop	{r4, pc}
        return imgmgr_log_upload_start(status);
   1c7ce:	4610      	mov	r0, r2
   1c7d0:	f000 fad8 	bl	1cd84 <imgmgr_log_upload_start>
   1c7d4:	e7f9      	b.n	1c7ca <imgr_upload_log+0xe>
        rc = imgr_read_info(1, NULL, hash, NULL);
   1c7d6:	2300      	movs	r3, #0
   1c7d8:	466a      	mov	r2, sp
   1c7da:	4619      	mov	r1, r3
   1c7dc:	2001      	movs	r0, #1
   1c7de:	f7ff ff6f 	bl	1c6c0 <imgr_read_info>
        if (rc != 0) {
   1c7e2:	b120      	cbz	r0, 1c7ee <imgr_upload_log+0x32>
            hashp = NULL;
   1c7e4:	2100      	movs	r1, #0
        return imgmgr_log_upload_done(status, hashp);
   1c7e6:	4620      	mov	r0, r4
   1c7e8:	f000 fad6 	bl	1cd98 <imgmgr_log_upload_done>
   1c7ec:	e7ed      	b.n	1c7ca <imgr_upload_log+0xe>
            hashp = hash;
   1c7ee:	4669      	mov	r1, sp
   1c7f0:	e7f9      	b.n	1c7e6 <imgr_upload_log+0x2a>
	...

0001c7f4 <imgr_my_version>:
{
   1c7f4:	b508      	push	{r3, lr}
   1c7f6:	4601      	mov	r1, r0
    return imgr_read_info(boot_current_slot, ver, NULL, NULL);
   1c7f8:	2300      	movs	r3, #0
   1c7fa:	461a      	mov	r2, r3
   1c7fc:	4802      	ldr	r0, [pc, #8]	; (1c808 <imgr_my_version+0x14>)
   1c7fe:	6800      	ldr	r0, [r0, #0]
   1c800:	f7ff ff5e 	bl	1c6c0 <imgr_read_info>
}
   1c804:	bd08      	pop	{r3, pc}
   1c806:	bf00      	nop
   1c808:	20004a34 	.word	0x20004a34

0001c80c <imgr_find_by_hash>:
{
   1c80c:	b570      	push	{r4, r5, r6, lr}
   1c80e:	b088      	sub	sp, #32
   1c810:	4606      	mov	r6, r0
   1c812:	460d      	mov	r5, r1
    for (i = 0; i < 2; i++) {
   1c814:	2400      	movs	r4, #0
   1c816:	e000      	b.n	1c81a <imgr_find_by_hash+0xe>
   1c818:	3401      	adds	r4, #1
   1c81a:	2c01      	cmp	r4, #1
   1c81c:	dc0f      	bgt.n	1c83e <imgr_find_by_hash+0x32>
        if (imgr_read_info(i, ver, hash, NULL) != 0) {
   1c81e:	2300      	movs	r3, #0
   1c820:	466a      	mov	r2, sp
   1c822:	4629      	mov	r1, r5
   1c824:	4620      	mov	r0, r4
   1c826:	f7ff ff4b 	bl	1c6c0 <imgr_read_info>
   1c82a:	2800      	cmp	r0, #0
   1c82c:	d1f4      	bne.n	1c818 <imgr_find_by_hash+0xc>
        if (!memcmp(hash, find, IMGMGR_HASH_LEN)) {
   1c82e:	2220      	movs	r2, #32
   1c830:	4631      	mov	r1, r6
   1c832:	4668      	mov	r0, sp
   1c834:	f7f1 f8b4 	bl	d9a0 <memcmp>
   1c838:	2800      	cmp	r0, #0
   1c83a:	d1ed      	bne.n	1c818 <imgr_find_by_hash+0xc>
   1c83c:	e001      	b.n	1c842 <imgr_find_by_hash+0x36>
    return -1;
   1c83e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   1c842:	4620      	mov	r0, r4
   1c844:	b008      	add	sp, #32
   1c846:	bd70      	pop	{r4, r5, r6, pc}

0001c848 <imgmgr_find_best_area_id>:
{
   1c848:	b530      	push	{r4, r5, lr}
   1c84a:	b083      	sub	sp, #12
    for (i = 0; i < 2; i++) {
   1c84c:	2400      	movs	r4, #0
    int best = -1;
   1c84e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    for (i = 0; i < 2; i++) {
   1c852:	e000      	b.n	1c856 <imgmgr_find_best_area_id+0xe>
   1c854:	3401      	adds	r4, #1
   1c856:	2c01      	cmp	r4, #1
   1c858:	dc10      	bgt.n	1c87c <imgmgr_find_best_area_id+0x34>
        rc = imgr_read_info(i, &ver, NULL, NULL);
   1c85a:	2300      	movs	r3, #0
   1c85c:	461a      	mov	r2, r3
   1c85e:	4669      	mov	r1, sp
   1c860:	4620      	mov	r0, r4
   1c862:	f7ff ff2d 	bl	1c6c0 <imgr_read_info>
        if (rc < 0) {
   1c866:	2800      	cmp	r0, #0
   1c868:	dbf4      	blt.n	1c854 <imgmgr_find_best_area_id+0xc>
        if (rc == 0) {
   1c86a:	b930      	cbnz	r0, 1c87a <imgmgr_find_best_area_id+0x32>
            if (imgmgr_state_slot_in_use(i)) {
   1c86c:	4620      	mov	r0, r4
   1c86e:	f000 fb1f 	bl	1ceb0 <imgmgr_state_slot_in_use>
   1c872:	2800      	cmp	r0, #0
   1c874:	d1ee      	bne.n	1c854 <imgmgr_find_best_area_id+0xc>
                best = i;
   1c876:	4625      	mov	r5, r4
   1c878:	e7ec      	b.n	1c854 <imgmgr_find_best_area_id+0xc>
        best = i;
   1c87a:	4625      	mov	r5, r4
    if (best >= 0) {
   1c87c:	2d00      	cmp	r5, #0
   1c87e:	da02      	bge.n	1c886 <imgmgr_find_best_area_id+0x3e>
}
   1c880:	4628      	mov	r0, r5
   1c882:	b003      	add	sp, #12
   1c884:	bd30      	pop	{r4, r5, pc}
        best = flash_area_id_from_image_slot(best);
   1c886:	4628      	mov	r0, r5
   1c888:	f001 fcec 	bl	1e264 <flash_area_id_from_image_slot>
   1c88c:	4605      	mov	r5, r0
    return best;
   1c88e:	e7f7      	b.n	1c880 <imgmgr_find_best_area_id+0x38>

0001c890 <imgr_erase_state>:
{
   1c890:	b570      	push	{r4, r5, r6, lr}
   1c892:	b082      	sub	sp, #8
   1c894:	4604      	mov	r4, r0
    area_id = imgmgr_find_best_area_id();
   1c896:	f7ff ffd7 	bl	1c848 <imgmgr_find_best_area_id>
    if (area_id >= 0) {
   1c89a:	2800      	cmp	r0, #0
   1c89c:	db1f      	blt.n	1c8de <imgr_erase_state+0x4e>
        rc = flash_area_open(area_id, &fa);
   1c89e:	a901      	add	r1, sp, #4
   1c8a0:	b2c0      	uxtb	r0, r0
   1c8a2:	f001 fc1f 	bl	1e0e4 <flash_area_open>
        if (rc) {
   1c8a6:	b9f0      	cbnz	r0, 1c8e6 <imgr_erase_state+0x56>
        rc = flash_area_erase(fa, 0, sizeof(struct image_header));
   1c8a8:	2220      	movs	r2, #32
   1c8aa:	2100      	movs	r1, #0
   1c8ac:	9801      	ldr	r0, [sp, #4]
   1c8ae:	f001 fca1 	bl	1e1f4 <flash_area_erase>
        if (rc) {
   1c8b2:	4605      	mov	r5, r0
   1c8b4:	b9c8      	cbnz	r0, 1c8ea <imgr_erase_state+0x5a>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1c8b6:	340c      	adds	r4, #12
   1c8b8:	2202      	movs	r2, #2
   1c8ba:	490e      	ldr	r1, [pc, #56]	; (1c8f4 <imgr_erase_state+0x64>)
   1c8bc:	4620      	mov	r0, r4
   1c8be:	f7f6 fc28 	bl	13112 <cbor_encode_text_string>
   1c8c2:	4606      	mov	r6, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1c8c4:	2200      	movs	r2, #0
   1c8c6:	2300      	movs	r3, #0
   1c8c8:	4620      	mov	r0, r4
   1c8ca:	f7f6 fba7 	bl	1301c <cbor_encode_int>
    if (g_err) {
   1c8ce:	ea50 0306 	orrs.w	r3, r0, r6
   1c8d2:	d10c      	bne.n	1c8ee <imgr_erase_state+0x5e>
    imgr_state.area_id = -1;
   1c8d4:	4b08      	ldr	r3, [pc, #32]	; (1c8f8 <imgr_erase_state+0x68>)
   1c8d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c8da:	601a      	str	r2, [r3, #0]
    return 0;
   1c8dc:	e000      	b.n	1c8e0 <imgr_erase_state+0x50>
        return imgr_error_rsp(cb, MGMT_ERR_ENOMEM, imgmgr_err_str_no_slot);
   1c8de:	2502      	movs	r5, #2
}
   1c8e0:	4628      	mov	r0, r5
   1c8e2:	b002      	add	sp, #8
   1c8e4:	bd70      	pop	{r4, r5, r6, pc}
            return imgr_error_rsp(cb, MGMT_ERR_EINVAL,
   1c8e6:	2503      	movs	r5, #3
   1c8e8:	e7fa      	b.n	1c8e0 <imgr_erase_state+0x50>
            return imgr_error_rsp(cb, MGMT_ERR_EINVAL,
   1c8ea:	2503      	movs	r5, #3
   1c8ec:	e7f8      	b.n	1c8e0 <imgr_erase_state+0x50>
        return MGMT_ERR_ENOMEM;
   1c8ee:	2502      	movs	r5, #2
   1c8f0:	e7f6      	b.n	1c8e0 <imgr_erase_state+0x50>
   1c8f2:	bf00      	nop
   1c8f4:	000238e4 	.word	0x000238e4
   1c8f8:	20004664 	.word	0x20004664

0001c8fc <imgr_erase>:
{
   1c8fc:	b570      	push	{r4, r5, r6, lr}
   1c8fe:	b082      	sub	sp, #8
   1c900:	4604      	mov	r4, r0
    area_id = imgmgr_find_best_area_id();
   1c902:	f7ff ffa1 	bl	1c848 <imgmgr_find_best_area_id>
    if (area_id >= 0) {
   1c906:	2800      	cmp	r0, #0
   1c908:	db1f      	blt.n	1c94a <imgr_erase+0x4e>
        rc = flash_area_open(area_id, &fa);
   1c90a:	a901      	add	r1, sp, #4
   1c90c:	b2c0      	uxtb	r0, r0
   1c90e:	f001 fbe9 	bl	1e0e4 <flash_area_open>
        if (rc) {
   1c912:	b9f0      	cbnz	r0, 1c952 <imgr_erase+0x56>
        rc = flash_area_erase(fa, 0, fa->fa_size);
   1c914:	9801      	ldr	r0, [sp, #4]
   1c916:	6882      	ldr	r2, [r0, #8]
   1c918:	2100      	movs	r1, #0
   1c91a:	f001 fc6b 	bl	1e1f4 <flash_area_erase>
        if (rc) {
   1c91e:	4605      	mov	r5, r0
   1c920:	b9c8      	cbnz	r0, 1c956 <imgr_erase+0x5a>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1c922:	340c      	adds	r4, #12
   1c924:	2202      	movs	r2, #2
   1c926:	490e      	ldr	r1, [pc, #56]	; (1c960 <imgr_erase+0x64>)
   1c928:	4620      	mov	r0, r4
   1c92a:	f7f6 fbf2 	bl	13112 <cbor_encode_text_string>
   1c92e:	4606      	mov	r6, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1c930:	2200      	movs	r2, #0
   1c932:	2300      	movs	r3, #0
   1c934:	4620      	mov	r0, r4
   1c936:	f7f6 fb71 	bl	1301c <cbor_encode_int>
    if (g_err) {
   1c93a:	ea50 0306 	orrs.w	r3, r0, r6
   1c93e:	d10c      	bne.n	1c95a <imgr_erase+0x5e>
    imgr_state.area_id = -1;
   1c940:	4b08      	ldr	r3, [pc, #32]	; (1c964 <imgr_erase+0x68>)
   1c942:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c946:	601a      	str	r2, [r3, #0]
    return 0;
   1c948:	e000      	b.n	1c94c <imgr_erase+0x50>
        return imgr_error_rsp(cb, MGMT_ERR_ENOMEM, imgmgr_err_str_no_slot);
   1c94a:	2502      	movs	r5, #2
}
   1c94c:	4628      	mov	r0, r5
   1c94e:	b002      	add	sp, #8
   1c950:	bd70      	pop	{r4, r5, r6, pc}
            return imgr_error_rsp(cb, MGMT_ERR_EINVAL,
   1c952:	2503      	movs	r5, #3
   1c954:	e7fa      	b.n	1c94c <imgr_erase+0x50>
            return imgr_error_rsp(cb, MGMT_ERR_EINVAL,
   1c956:	2503      	movs	r5, #3
   1c958:	e7f8      	b.n	1c94c <imgr_erase+0x50>
        return MGMT_ERR_ENOMEM;
   1c95a:	2502      	movs	r5, #2
   1c95c:	e7f6      	b.n	1c94c <imgr_erase+0x50>
   1c95e:	bf00      	nop
   1c960:	000238e4 	.word	0x000238e4
   1c964:	20004664 	.word	0x20004664

0001c968 <imgr_upload_inspect>:
{
   1c968:	b570      	push	{r4, r5, r6, lr}
   1c96a:	b084      	sub	sp, #16
   1c96c:	460c      	mov	r4, r1
   1c96e:	4616      	mov	r6, r2
    memset(action, 0, sizeof *action);
   1c970:	2300      	movs	r3, #0
   1c972:	600b      	str	r3, [r1, #0]
   1c974:	604b      	str	r3, [r1, #4]
   1c976:	608b      	str	r3, [r1, #8]
   1c978:	60cb      	str	r3, [r1, #12]
   1c97a:	610b      	str	r3, [r1, #16]
   1c97c:	614b      	str	r3, [r1, #20]
    if (req->off == -1) {
   1c97e:	6801      	ldr	r1, [r0, #0]
   1c980:	6843      	ldr	r3, [r0, #4]
   1c982:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1c986:	bf08      	it	eq
   1c988:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
   1c98c:	d03e      	beq.n	1ca0c <imgr_upload_inspect+0xa4>
   1c98e:	4605      	mov	r5, r0
    if (req->off == 0) {
   1c990:	430b      	orrs	r3, r1
   1c992:	d168      	bne.n	1ca66 <imgr_upload_inspect+0xfe>
        if (req->data_len < sizeof(struct image_header)) {
   1c994:	6903      	ldr	r3, [r0, #16]
   1c996:	2b1f      	cmp	r3, #31
   1c998:	d93c      	bls.n	1ca14 <imgr_upload_inspect+0xac>
        if (req->size == -1) {
   1c99a:	6882      	ldr	r2, [r0, #8]
   1c99c:	68c3      	ldr	r3, [r0, #12]
   1c99e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1c9a2:	bf08      	it	eq
   1c9a4:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   1c9a8:	d038      	beq.n	1ca1c <imgr_upload_inspect+0xb4>
        action->size = req->size;
   1c9aa:	6022      	str	r2, [r4, #0]
   1c9ac:	6063      	str	r3, [r4, #4]
        if (hdr->ih_magic != IMAGE_MAGIC) {
   1c9ae:	6982      	ldr	r2, [r0, #24]
   1c9b0:	4b4e      	ldr	r3, [pc, #312]	; (1caec <imgr_upload_inspect+0x184>)
   1c9b2:	429a      	cmp	r2, r3
   1c9b4:	d136      	bne.n	1ca24 <imgr_upload_inspect+0xbc>
        if (req->data_sha_len > IMGMGR_DATA_SHA_LEN) {
   1c9b6:	6942      	ldr	r2, [r0, #20]
   1c9b8:	2a20      	cmp	r2, #32
   1c9ba:	f200 808d 	bhi.w	1cad8 <imgr_upload_inspect+0x170>
        if ((req->data_sha_len > 0) && (imgr_state.area_id != -1)) {
   1c9be:	b142      	cbz	r2, 1c9d2 <imgr_upload_inspect+0x6a>
   1c9c0:	4b4b      	ldr	r3, [pc, #300]	; (1caf0 <imgr_upload_inspect+0x188>)
   1c9c2:	681b      	ldr	r3, [r3, #0]
   1c9c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1c9c8:	d003      	beq.n	1c9d2 <imgr_upload_inspect+0x6a>
            if ((imgr_state.data_sha_len == req->data_sha_len) &&
   1c9ca:	4b49      	ldr	r3, [pc, #292]	; (1caf0 <imgr_upload_inspect+0x188>)
   1c9cc:	7b1b      	ldrb	r3, [r3, #12]
   1c9ce:	429a      	cmp	r2, r3
   1c9d0:	d02c      	beq.n	1ca2c <imgr_upload_inspect+0xc4>
        action->area_id = imgmgr_find_best_area_id();
   1c9d2:	f7ff ff39 	bl	1c848 <imgmgr_find_best_area_id>
   1c9d6:	60e0      	str	r0, [r4, #12]
        if (action->area_id < 0) {
   1c9d8:	2800      	cmp	r0, #0
   1c9da:	db2f      	blt.n	1ca3c <imgr_upload_inspect+0xd4>
        if (req->upgrade) {
   1c9dc:	f895 3238 	ldrb.w	r3, [r5, #568]	; 0x238
   1c9e0:	b15b      	cbz	r3, 1c9fa <imgr_upload_inspect+0x92>
            rc = imgr_my_version(&cur_ver);
   1c9e2:	a801      	add	r0, sp, #4
   1c9e4:	f7ff ff06 	bl	1c7f4 <imgr_my_version>
            if (rc != 0) {
   1c9e8:	2800      	cmp	r0, #0
   1c9ea:	d177      	bne.n	1cadc <imgr_upload_inspect+0x174>
            if (imgr_vercmp(&cur_ver, &hdr->ih_ver) >= 0) {
   1c9ec:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   1c9f0:	a801      	add	r0, sp, #4
   1c9f2:	f7ff fdfe 	bl	1c5f2 <imgr_vercmp>
   1c9f6:	2800      	cmp	r0, #0
   1c9f8:	da24      	bge.n	1ca44 <imgr_upload_inspect+0xdc>
        rc = flash_area_open(action->area_id, &fa);
   1c9fa:	a903      	add	r1, sp, #12
   1c9fc:	7b20      	ldrb	r0, [r4, #12]
   1c9fe:	f001 fb71 	bl	1e0e4 <flash_area_open>
        if (rc) {
   1ca02:	b318      	cbz	r0, 1ca4c <imgr_upload_inspect+0xe4>
            *errstr = imgmgr_err_str_flash_open_failed;
   1ca04:	2300      	movs	r3, #0
   1ca06:	6033      	str	r3, [r6, #0]
            return MGMT_ERR_EUNKNOWN;
   1ca08:	2001      	movs	r0, #1
   1ca0a:	e06c      	b.n	1cae6 <imgr_upload_inspect+0x17e>
        *errstr = imgmgr_err_str_hdr_malformed;
   1ca0c:	2300      	movs	r3, #0
   1ca0e:	6013      	str	r3, [r2, #0]
        return MGMT_ERR_EINVAL;
   1ca10:	2003      	movs	r0, #3
   1ca12:	e068      	b.n	1cae6 <imgr_upload_inspect+0x17e>
            *errstr = imgmgr_err_str_hdr_malformed;
   1ca14:	2300      	movs	r3, #0
   1ca16:	6013      	str	r3, [r2, #0]
            return MGMT_ERR_EINVAL;
   1ca18:	2003      	movs	r0, #3
   1ca1a:	e064      	b.n	1cae6 <imgr_upload_inspect+0x17e>
            *errstr = imgmgr_err_str_hdr_malformed;
   1ca1c:	2300      	movs	r3, #0
   1ca1e:	6033      	str	r3, [r6, #0]
            return MGMT_ERR_EINVAL;
   1ca20:	2003      	movs	r0, #3
   1ca22:	e060      	b.n	1cae6 <imgr_upload_inspect+0x17e>
            *errstr = imgmgr_err_str_magic_mismatch;
   1ca24:	2300      	movs	r3, #0
   1ca26:	6033      	str	r3, [r6, #0]
            return MGMT_ERR_EINVAL;
   1ca28:	2003      	movs	r0, #3
   1ca2a:	e05c      	b.n	1cae6 <imgr_upload_inspect+0x17e>
                            !memcmp(imgr_state.data_sha, req->data_sha,
   1ca2c:	f500 7106 	add.w	r1, r0, #536	; 0x218
   1ca30:	4830      	ldr	r0, [pc, #192]	; (1caf4 <imgr_upload_inspect+0x18c>)
   1ca32:	f7f0 ffb5 	bl	d9a0 <memcmp>
            if ((imgr_state.data_sha_len == req->data_sha_len) &&
   1ca36:	2800      	cmp	r0, #0
   1ca38:	d1cb      	bne.n	1c9d2 <imgr_upload_inspect+0x6a>
   1ca3a:	e054      	b.n	1cae6 <imgr_upload_inspect+0x17e>
            *errstr = imgmgr_err_str_no_slot;
   1ca3c:	2300      	movs	r3, #0
   1ca3e:	6033      	str	r3, [r6, #0]
            return MGMT_ERR_ENOMEM;
   1ca40:	2002      	movs	r0, #2
   1ca42:	e050      	b.n	1cae6 <imgr_upload_inspect+0x17e>
                *errstr = imgmgr_err_str_downgrade;
   1ca44:	2300      	movs	r3, #0
   1ca46:	6033      	str	r3, [r6, #0]
                return MGMT_ERR_EBADSTATE;
   1ca48:	2006      	movs	r0, #6
   1ca4a:	e04c      	b.n	1cae6 <imgr_upload_inspect+0x17e>
        rc = flash_area_is_empty(fa, &empty);
   1ca4c:	f10d 0103 	add.w	r1, sp, #3
   1ca50:	9803      	ldr	r0, [sp, #12]
   1ca52:	f001 fbed 	bl	1e230 <flash_area_is_empty>
        if (rc) {
   1ca56:	2800      	cmp	r0, #0
   1ca58:	d142      	bne.n	1cae0 <imgr_upload_inspect+0x178>
        action->erase = !empty;
   1ca5a:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1ca5e:	f083 0301 	eor.w	r3, r3, #1
   1ca62:	7463      	strb	r3, [r4, #17]
   1ca64:	e00d      	b.n	1ca82 <imgr_upload_inspect+0x11a>
        action->area_id = imgr_state.area_id;
   1ca66:	4b22      	ldr	r3, [pc, #136]	; (1caf0 <imgr_upload_inspect+0x188>)
   1ca68:	681a      	ldr	r2, [r3, #0]
   1ca6a:	60e2      	str	r2, [r4, #12]
        action->size = imgr_state.size;
   1ca6c:	6899      	ldr	r1, [r3, #8]
   1ca6e:	2200      	movs	r2, #0
   1ca70:	6021      	str	r1, [r4, #0]
   1ca72:	6062      	str	r2, [r4, #4]
        if (req->off != imgr_state.off) {
   1ca74:	6800      	ldr	r0, [r0, #0]
   1ca76:	6869      	ldr	r1, [r5, #4]
   1ca78:	685b      	ldr	r3, [r3, #4]
   1ca7a:	4291      	cmp	r1, r2
   1ca7c:	bf08      	it	eq
   1ca7e:	4298      	cmpeq	r0, r3
   1ca80:	d130      	bne.n	1cae4 <imgr_upload_inspect+0x17c>
    action->write_bytes = req->data_len;
   1ca82:	692b      	ldr	r3, [r5, #16]
   1ca84:	60a3      	str	r3, [r4, #8]
    if (req->off + req->data_len < action->size) {
   1ca86:	682b      	ldr	r3, [r5, #0]
   1ca88:	686a      	ldr	r2, [r5, #4]
   1ca8a:	6929      	ldr	r1, [r5, #16]
   1ca8c:	185b      	adds	r3, r3, r1
   1ca8e:	f142 0200 	adc.w	r2, r2, #0
   1ca92:	6820      	ldr	r0, [r4, #0]
   1ca94:	6861      	ldr	r1, [r4, #4]
   1ca96:	4283      	cmp	r3, r0
   1ca98:	eb72 0301 	sbcs.w	r3, r2, r1
   1ca9c:	d303      	bcc.n	1caa6 <imgr_upload_inspect+0x13e>
    action->proceed = true;
   1ca9e:	2301      	movs	r3, #1
   1caa0:	7423      	strb	r3, [r4, #16]
    return 0;
   1caa2:	2000      	movs	r0, #0
   1caa4:	e01f      	b.n	1cae6 <imgr_upload_inspect+0x17e>
        rc = flash_area_open(action->area_id, &fa);
   1caa6:	a903      	add	r1, sp, #12
   1caa8:	7b20      	ldrb	r0, [r4, #12]
   1caaa:	f001 fb1b 	bl	1e0e4 <flash_area_open>
        if (rc) {
   1caae:	b118      	cbz	r0, 1cab8 <imgr_upload_inspect+0x150>
            *errstr = imgmgr_err_str_flash_open_failed;
   1cab0:	2300      	movs	r3, #0
   1cab2:	6033      	str	r3, [r6, #0]
            return MGMT_ERR_EUNKNOWN;
   1cab4:	2001      	movs	r0, #1
   1cab6:	e016      	b.n	1cae6 <imgr_upload_inspect+0x17e>
        rem_bytes = req->data_len % flash_area_align(fa);
   1cab8:	692d      	ldr	r5, [r5, #16]
   1caba:	9803      	ldr	r0, [sp, #12]
   1cabc:	f001 fbae 	bl	1e21c <flash_area_align>
   1cac0:	fbb5 f3f0 	udiv	r3, r5, r0
   1cac4:	fb00 5513 	mls	r5, r0, r3, r5
        if (rem_bytes) {
   1cac8:	f015 0fff 	tst.w	r5, #255	; 0xff
   1cacc:	d0e7      	beq.n	1ca9e <imgr_upload_inspect+0x136>
            action->write_bytes -= rem_bytes;
   1cace:	b2ed      	uxtb	r5, r5
   1cad0:	68a3      	ldr	r3, [r4, #8]
   1cad2:	1b5d      	subs	r5, r3, r5
   1cad4:	60a5      	str	r5, [r4, #8]
   1cad6:	e7e2      	b.n	1ca9e <imgr_upload_inspect+0x136>
            return MGMT_ERR_EINVAL;
   1cad8:	2003      	movs	r0, #3
   1cada:	e004      	b.n	1cae6 <imgr_upload_inspect+0x17e>
                return MGMT_ERR_EUNKNOWN;
   1cadc:	2001      	movs	r0, #1
   1cade:	e002      	b.n	1cae6 <imgr_upload_inspect+0x17e>
            return MGMT_ERR_EUNKNOWN;
   1cae0:	2001      	movs	r0, #1
   1cae2:	e000      	b.n	1cae6 <imgr_upload_inspect+0x17e>
            return 0;
   1cae4:	2000      	movs	r0, #0
}
   1cae6:	b004      	add	sp, #16
   1cae8:	bd70      	pop	{r4, r5, r6, pc}
   1caea:	bf00      	nop
   1caec:	96f3b83d 	.word	0x96f3b83d
   1caf0:	20004664 	.word	0x20004664
   1caf4:	20004671 	.word	0x20004671

0001caf8 <imgmgr_dfu_stopped>:
    return imgr_upload_good_rsp(cb);
}

void
imgmgr_dfu_stopped(void)
{
   1caf8:	b508      	push	{r3, lr}
    if (imgmgr_dfu_callbacks_fn && imgmgr_dfu_callbacks_fn->dfu_stopped_cb) {
   1cafa:	4b03      	ldr	r3, [pc, #12]	; (1cb08 <imgmgr_dfu_stopped+0x10>)
   1cafc:	681b      	ldr	r3, [r3, #0]
   1cafe:	b113      	cbz	r3, 1cb06 <imgmgr_dfu_stopped+0xe>
   1cb00:	685b      	ldr	r3, [r3, #4]
   1cb02:	b103      	cbz	r3, 1cb06 <imgmgr_dfu_stopped+0xe>
        imgmgr_dfu_callbacks_fn->dfu_stopped_cb();
   1cb04:	4798      	blx	r3
    }
}
   1cb06:	bd08      	pop	{r3, pc}
   1cb08:	20004660 	.word	0x20004660

0001cb0c <imgmgr_dfu_started>:

void
imgmgr_dfu_started(void)
{
   1cb0c:	b508      	push	{r3, lr}
    if (imgmgr_dfu_callbacks_fn && imgmgr_dfu_callbacks_fn->dfu_started_cb) {
   1cb0e:	4b03      	ldr	r3, [pc, #12]	; (1cb1c <imgmgr_dfu_started+0x10>)
   1cb10:	681b      	ldr	r3, [r3, #0]
   1cb12:	b113      	cbz	r3, 1cb1a <imgmgr_dfu_started+0xe>
   1cb14:	681b      	ldr	r3, [r3, #0]
   1cb16:	b103      	cbz	r3, 1cb1a <imgmgr_dfu_started+0xe>
        imgmgr_dfu_callbacks_fn->dfu_started_cb();
   1cb18:	4798      	blx	r3
    }
}
   1cb1a:	bd08      	pop	{r3, pc}
   1cb1c:	20004660 	.word	0x20004660

0001cb20 <imgmgr_dfu_pending>:

void
imgmgr_dfu_pending(void)
{
   1cb20:	b508      	push	{r3, lr}
    if (imgmgr_dfu_callbacks_fn && imgmgr_dfu_callbacks_fn->dfu_pending_cb) {
   1cb22:	4b03      	ldr	r3, [pc, #12]	; (1cb30 <imgmgr_dfu_pending+0x10>)
   1cb24:	681b      	ldr	r3, [r3, #0]
   1cb26:	b113      	cbz	r3, 1cb2e <imgmgr_dfu_pending+0xe>
   1cb28:	689b      	ldr	r3, [r3, #8]
   1cb2a:	b103      	cbz	r3, 1cb2e <imgmgr_dfu_pending+0xe>
        imgmgr_dfu_callbacks_fn->dfu_pending_cb();
   1cb2c:	4798      	blx	r3
    }
}
   1cb2e:	bd08      	pop	{r3, pc}
   1cb30:	20004660 	.word	0x20004660

0001cb34 <imgr_upload>:
{
   1cb34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cb38:	f5ad 7d62 	sub.w	sp, sp, #904	; 0x388
   1cb3c:	4605      	mov	r5, r0
    struct imgr_upload_req req = {
   1cb3e:	ac52      	add	r4, sp, #328	; 0x148
   1cb40:	f44f 7210 	mov.w	r2, #576	; 0x240
   1cb44:	2100      	movs	r1, #0
   1cb46:	4620      	mov	r0, r4
   1cb48:	f7f0 ff5b 	bl	da02 <memset>
   1cb4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1cb50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1cb54:	e9cd 2352 	strd	r2, r3, [sp, #328]	; 0x148
   1cb58:	e9cd 2354 	strd	r2, r3, [sp, #336]	; 0x150
    const struct cbor_attr_t off_attr[] = {
   1cb5c:	f44f 7290 	mov.w	r2, #288	; 0x120
   1cb60:	2100      	movs	r1, #0
   1cb62:	a80a      	add	r0, sp, #40	; 0x28
   1cb64:	f7f0 ff4d 	bl	da02 <memset>
   1cb68:	4b69      	ldr	r3, [pc, #420]	; (1cd10 <imgr_upload+0x1dc>)
   1cb6a:	930a      	str	r3, [sp, #40]	; 0x28
   1cb6c:	2303      	movs	r3, #3
   1cb6e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   1cb72:	aa58      	add	r2, sp, #352	; 0x160
   1cb74:	920c      	str	r2, [sp, #48]	; 0x30
   1cb76:	aa56      	add	r2, sp, #344	; 0x158
   1cb78:	920d      	str	r2, [sp, #52]	; 0x34
   1cb7a:	f44f 7200 	mov.w	r2, #512	; 0x200
   1cb7e:	9214      	str	r2, [sp, #80]	; 0x50
   1cb80:	4a64      	ldr	r2, [pc, #400]	; (1cd14 <imgr_upload+0x1e0>)
   1cb82:	9216      	str	r2, [sp, #88]	; 0x58
   1cb84:	2102      	movs	r1, #2
   1cb86:	f88d 105c 	strb.w	r1, [sp, #92]	; 0x5c
   1cb8a:	aa54      	add	r2, sp, #336	; 0x150
   1cb8c:	9218      	str	r2, [sp, #96]	; 0x60
   1cb8e:	2201      	movs	r2, #1
   1cb90:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   1cb94:	4860      	ldr	r0, [pc, #384]	; (1cd18 <imgr_upload+0x1e4>)
   1cb96:	9022      	str	r0, [sp, #136]	; 0x88
   1cb98:	f88d 108c 	strb.w	r1, [sp, #140]	; 0x8c
   1cb9c:	9424      	str	r4, [sp, #144]	; 0x90
   1cb9e:	f88d 20b4 	strb.w	r2, [sp, #180]	; 0xb4
   1cba2:	4a5e      	ldr	r2, [pc, #376]	; (1cd1c <imgr_upload+0x1e8>)
   1cba4:	922e      	str	r2, [sp, #184]	; 0xb8
   1cba6:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
   1cbaa:	abd8      	add	r3, sp, #864	; 0x360
   1cbac:	9330      	str	r3, [sp, #192]	; 0xc0
   1cbae:	ab57      	add	r3, sp, #348	; 0x15c
   1cbb0:	9331      	str	r3, [sp, #196]	; 0xc4
   1cbb2:	2320      	movs	r3, #32
   1cbb4:	9338      	str	r3, [sp, #224]	; 0xe0
   1cbb6:	4b5a      	ldr	r3, [pc, #360]	; (1cd20 <imgr_upload+0x1ec>)
   1cbb8:	933a      	str	r3, [sp, #232]	; 0xe8
   1cbba:	2305      	movs	r3, #5
   1cbbc:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
   1cbc0:	abe0      	add	r3, sp, #896	; 0x380
   1cbc2:	933c      	str	r3, [sp, #240]	; 0xf0
    const char *errstr = NULL;
   1cbc4:	2300      	movs	r3, #0
   1cbc6:	9309      	str	r3, [sp, #36]	; 0x24
    const struct flash_area *fa = NULL;
   1cbc8:	9301      	str	r3, [sp, #4]
    rc = cbor_read_object(&cb->it, off_attr);
   1cbca:	a90a      	add	r1, sp, #40	; 0x28
   1cbcc:	f105 001c 	add.w	r0, r5, #28
   1cbd0:	f7f6 f8b8 	bl	12d44 <cbor_read_object>
    if (rc != 0) {
   1cbd4:	2800      	cmp	r0, #0
   1cbd6:	f040 8095 	bne.w	1cd04 <imgr_upload+0x1d0>
    rc = imgr_upload_inspect(&req, &action, &errstr);
   1cbda:	aa09      	add	r2, sp, #36	; 0x24
   1cbdc:	a902      	add	r1, sp, #8
   1cbde:	4620      	mov	r0, r4
   1cbe0:	f7ff fec2 	bl	1c968 <imgr_upload_inspect>
    if (rc != 0) {
   1cbe4:	4604      	mov	r4, r0
   1cbe6:	2800      	cmp	r0, #0
   1cbe8:	d137      	bne.n	1cc5a <imgr_upload+0x126>
    if (!action.proceed) {
   1cbea:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1cbee:	2b00      	cmp	r3, #0
   1cbf0:	d036      	beq.n	1cc60 <imgr_upload+0x12c>
    if (imgr_upload_cb != NULL) {
   1cbf2:	4b4c      	ldr	r3, [pc, #304]	; (1cd24 <imgr_upload+0x1f0>)
   1cbf4:	681b      	ldr	r3, [r3, #0]
   1cbf6:	b13b      	cbz	r3, 1cc08 <imgr_upload+0xd4>
        rc = imgr_upload_cb(req.off, action.size, imgr_upload_arg);
   1cbf8:	4a4b      	ldr	r2, [pc, #300]	; (1cd28 <imgr_upload+0x1f4>)
   1cbfa:	6812      	ldr	r2, [r2, #0]
   1cbfc:	9902      	ldr	r1, [sp, #8]
   1cbfe:	9852      	ldr	r0, [sp, #328]	; 0x148
   1cc00:	4798      	blx	r3
        if (rc != 0) {
   1cc02:	4604      	mov	r4, r0
   1cc04:	2800      	cmp	r0, #0
   1cc06:	d130      	bne.n	1cc6a <imgr_upload+0x136>
    imgr_state.area_id = action.area_id;
   1cc08:	9805      	ldr	r0, [sp, #20]
   1cc0a:	4b48      	ldr	r3, [pc, #288]	; (1cd2c <imgr_upload+0x1f8>)
   1cc0c:	6018      	str	r0, [r3, #0]
    imgr_state.size = action.size;
   1cc0e:	9a02      	ldr	r2, [sp, #8]
   1cc10:	609a      	str	r2, [r3, #8]
    rc = flash_area_open(imgr_state.area_id, &fa);
   1cc12:	a901      	add	r1, sp, #4
   1cc14:	b2c0      	uxtb	r0, r0
   1cc16:	f001 fa65 	bl	1e0e4 <flash_area_open>
    if (rc != 0) {
   1cc1a:	4604      	mov	r4, r0
   1cc1c:	bb40      	cbnz	r0, 1cc70 <imgr_upload+0x13c>
    if (req.off == 0) {
   1cc1e:	9a52      	ldr	r2, [sp, #328]	; 0x148
   1cc20:	9b53      	ldr	r3, [sp, #332]	; 0x14c
   1cc22:	4313      	orrs	r3, r2
   1cc24:	d028      	beq.n	1cc78 <imgr_upload+0x144>
    if (req.data_len != 0) {
   1cc26:	9b56      	ldr	r3, [sp, #344]	; 0x158
   1cc28:	2b00      	cmp	r3, #0
   1cc2a:	d14d      	bne.n	1ccc8 <imgr_upload+0x194>
    imgr_upload_log(req.off == 0, imgr_state.off == imgr_state.size, rc);
   1cc2c:	9852      	ldr	r0, [sp, #328]	; 0x148
   1cc2e:	9a53      	ldr	r2, [sp, #332]	; 0x14c
   1cc30:	4b3e      	ldr	r3, [pc, #248]	; (1cd2c <imgr_upload+0x1f8>)
   1cc32:	6859      	ldr	r1, [r3, #4]
   1cc34:	689b      	ldr	r3, [r3, #8]
   1cc36:	4302      	orrs	r2, r0
   1cc38:	bf0c      	ite	eq
   1cc3a:	2001      	moveq	r0, #1
   1cc3c:	2000      	movne	r0, #0
   1cc3e:	4622      	mov	r2, r4
   1cc40:	4299      	cmp	r1, r3
   1cc42:	bf14      	ite	ne
   1cc44:	2100      	movne	r1, #0
   1cc46:	2101      	moveq	r1, #1
   1cc48:	f7ff fdb8 	bl	1c7bc <imgr_upload_log>
    if (rc != 0) {
   1cc4c:	2c00      	cmp	r4, #0
   1cc4e:	d156      	bne.n	1ccfe <imgr_upload+0x1ca>
    return imgr_upload_good_rsp(cb);
   1cc50:	4628      	mov	r0, r5
   1cc52:	f7ff fd0d 	bl	1c670 <imgr_upload_good_rsp>
   1cc56:	4604      	mov	r4, r0
   1cc58:	e055      	b.n	1cd06 <imgr_upload+0x1d2>
        imgmgr_dfu_stopped();
   1cc5a:	f7ff ff4d 	bl	1caf8 <imgmgr_dfu_stopped>
        return rc;
   1cc5e:	e052      	b.n	1cd06 <imgr_upload+0x1d2>
        return imgr_upload_good_rsp(cb);
   1cc60:	4628      	mov	r0, r5
   1cc62:	f7ff fd05 	bl	1c670 <imgr_upload_good_rsp>
   1cc66:	4604      	mov	r4, r0
   1cc68:	e04d      	b.n	1cd06 <imgr_upload+0x1d2>
            errstr = imgmgr_err_str_app_reject;
   1cc6a:	2300      	movs	r3, #0
   1cc6c:	9309      	str	r3, [sp, #36]	; 0x24
            goto end;
   1cc6e:	e7dd      	b.n	1cc2c <imgr_upload+0xf8>
        errstr = imgmgr_err_str_flash_open_failed;
   1cc70:	2300      	movs	r3, #0
   1cc72:	9309      	str	r3, [sp, #36]	; 0x24
        rc = MGMT_ERR_EUNKNOWN;
   1cc74:	2401      	movs	r4, #1
        goto end;
   1cc76:	e7d9      	b.n	1cc2c <imgr_upload+0xf8>
        imgr_state.off = 0;
   1cc78:	4e2c      	ldr	r6, [pc, #176]	; (1cd2c <imgr_upload+0x1f8>)
   1cc7a:	f04f 0800 	mov.w	r8, #0
   1cc7e:	f8c6 8004 	str.w	r8, [r6, #4]
        imgmgr_dfu_started();
   1cc82:	f7ff ff43 	bl	1cb0c <imgmgr_dfu_started>
        imgr_state.data_sha_len = req.data_sha_len;
   1cc86:	9f57      	ldr	r7, [sp, #348]	; 0x15c
   1cc88:	7337      	strb	r7, [r6, #12]
        memcpy(imgr_state.data_sha, req.data_sha, req.data_sha_len);
   1cc8a:	463a      	mov	r2, r7
   1cc8c:	a9d8      	add	r1, sp, #864	; 0x360
   1cc8e:	f106 000d 	add.w	r0, r6, #13
   1cc92:	f7f0 fea9 	bl	d9e8 <memcpy>
        memset(&imgr_state.data_sha[req.data_sha_len], 0,
   1cc96:	f107 0008 	add.w	r0, r7, #8
   1cc9a:	4430      	add	r0, r6
   1cc9c:	f1c7 0220 	rsb	r2, r7, #32
   1cca0:	4641      	mov	r1, r8
   1cca2:	3005      	adds	r0, #5
   1cca4:	f7f0 fead 	bl	da02 <memset>
        if (action.erase) {
   1cca8:	f89d 3019 	ldrb.w	r3, [sp, #25]
   1ccac:	2b00      	cmp	r3, #0
   1ccae:	d0ba      	beq.n	1cc26 <imgr_upload+0xf2>
            rc = flash_area_erase(fa, 0, req.size);
   1ccb0:	9a54      	ldr	r2, [sp, #336]	; 0x150
   1ccb2:	4641      	mov	r1, r8
   1ccb4:	9801      	ldr	r0, [sp, #4]
   1ccb6:	f001 fa9d 	bl	1e1f4 <flash_area_erase>
            if (rc != 0) {
   1ccba:	4604      	mov	r4, r0
   1ccbc:	2800      	cmp	r0, #0
   1ccbe:	d0b2      	beq.n	1cc26 <imgr_upload+0xf2>
                errstr = imgmgr_err_str_flash_erase_failed;
   1ccc0:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
                rc = MGMT_ERR_EUNKNOWN;
   1ccc4:	2401      	movs	r4, #1
                goto end;
   1ccc6:	e7b1      	b.n	1cc2c <imgr_upload+0xf8>
        rc = flash_area_write(fa, req.off, req.img_data, action.write_bytes);
   1ccc8:	9b04      	ldr	r3, [sp, #16]
   1ccca:	aa58      	add	r2, sp, #352	; 0x160
   1cccc:	9952      	ldr	r1, [sp, #328]	; 0x148
   1ccce:	9801      	ldr	r0, [sp, #4]
   1ccd0:	f001 fa7c 	bl	1e1cc <flash_area_write>
        if (rc != 0) {
   1ccd4:	4604      	mov	r4, r0
   1ccd6:	b970      	cbnz	r0, 1ccf6 <imgr_upload+0x1c2>
            imgr_state.off += action.write_bytes;
   1ccd8:	9b04      	ldr	r3, [sp, #16]
   1ccda:	4a14      	ldr	r2, [pc, #80]	; (1cd2c <imgr_upload+0x1f8>)
   1ccdc:	6851      	ldr	r1, [r2, #4]
   1ccde:	440b      	add	r3, r1
   1cce0:	6053      	str	r3, [r2, #4]
            if (imgr_state.off == imgr_state.size) {
   1cce2:	6892      	ldr	r2, [r2, #8]
   1cce4:	4293      	cmp	r3, r2
   1cce6:	d1a1      	bne.n	1cc2c <imgr_upload+0xf8>
                imgmgr_dfu_pending();
   1cce8:	f7ff ff1a 	bl	1cb20 <imgmgr_dfu_pending>
                imgr_state.area_id = -1;
   1ccec:	4b0f      	ldr	r3, [pc, #60]	; (1cd2c <imgr_upload+0x1f8>)
   1ccee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ccf2:	601a      	str	r2, [r3, #0]
   1ccf4:	e79a      	b.n	1cc2c <imgr_upload+0xf8>
            errstr = imgmgr_err_str_flash_write_failed;
   1ccf6:	2300      	movs	r3, #0
   1ccf8:	9309      	str	r3, [sp, #36]	; 0x24
            rc = MGMT_ERR_EUNKNOWN;
   1ccfa:	2401      	movs	r4, #1
            goto end;
   1ccfc:	e796      	b.n	1cc2c <imgr_upload+0xf8>
        imgmgr_dfu_stopped();
   1ccfe:	f7ff fefb 	bl	1caf8 <imgmgr_dfu_stopped>
        return imgr_error_rsp(cb, rc, errstr);
   1cd02:	e000      	b.n	1cd06 <imgr_upload+0x1d2>
        return MGMT_ERR_EINVAL;
   1cd04:	2403      	movs	r4, #3
}
   1cd06:	4620      	mov	r0, r4
   1cd08:	f50d 7d62 	add.w	sp, sp, #904	; 0x388
   1cd0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cd10:	000248e0 	.word	0x000248e0
   1cd14:	000248e8 	.word	0x000248e8
   1cd18:	00023808 	.word	0x00023808
   1cd1c:	000248ec 	.word	0x000248ec
   1cd20:	000248f0 	.word	0x000248f0
   1cd24:	20004698 	.word	0x20004698
   1cd28:	20004694 	.word	0x20004694
   1cd2c:	20004664 	.word	0x20004664

0001cd30 <imgmgr_dfu_confirmed>:

void
imgmgr_dfu_confirmed(void)
{
   1cd30:	b508      	push	{r3, lr}
    if (imgmgr_dfu_callbacks_fn && imgmgr_dfu_callbacks_fn->dfu_confirmed_cb) {
   1cd32:	4b03      	ldr	r3, [pc, #12]	; (1cd40 <imgmgr_dfu_confirmed+0x10>)
   1cd34:	681b      	ldr	r3, [r3, #0]
   1cd36:	b113      	cbz	r3, 1cd3e <imgmgr_dfu_confirmed+0xe>
   1cd38:	68db      	ldr	r3, [r3, #12]
   1cd3a:	b103      	cbz	r3, 1cd3e <imgmgr_dfu_confirmed+0xe>
        imgmgr_dfu_callbacks_fn->dfu_confirmed_cb();
   1cd3c:	4798      	blx	r3
    }
}
   1cd3e:	bd08      	pop	{r3, pc}
   1cd40:	20004660 	.word	0x20004660

0001cd44 <imgmgr_module_init>:
    imgmgr_dfu_callbacks_fn = cb_struct;
}

void
imgmgr_module_init(void)
{
   1cd44:	b510      	push	{r4, lr}
   1cd46:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1cd48:	4b0a      	ldr	r3, [pc, #40]	; (1cd74 <imgmgr_module_init+0x30>)
   1cd4a:	781b      	ldrb	r3, [r3, #0]
   1cd4c:	b16b      	cbz	r3, 1cd6a <imgmgr_module_init+0x26>

    rc = mgmt_group_register(&imgr_nmgr_group);
   1cd4e:	480a      	ldr	r0, [pc, #40]	; (1cd78 <imgmgr_module_init+0x34>)
   1cd50:	f000 fab6 	bl	1d2c0 <mgmt_group_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1cd54:	b138      	cbz	r0, 1cd66 <imgmgr_module_init+0x22>
   1cd56:	2000      	movs	r0, #0
   1cd58:	9000      	str	r0, [sp, #0]
   1cd5a:	4b08      	ldr	r3, [pc, #32]	; (1cd7c <imgmgr_module_init+0x38>)
   1cd5c:	681c      	ldr	r4, [r3, #0]
   1cd5e:	4603      	mov	r3, r0
   1cd60:	4602      	mov	r2, r0
   1cd62:	4601      	mov	r1, r0
   1cd64:	47a0      	blx	r4
     */
    if (imgmgr_state_slot_in_use(1)) {
        log_fcb_slot1_lock();
    }
#endif
}
   1cd66:	b002      	add	sp, #8
   1cd68:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1cd6a:	461a      	mov	r2, r3
   1cd6c:	4619      	mov	r1, r3
   1cd6e:	4618      	mov	r0, r3
   1cd70:	f7ec f96c 	bl	904c <__assert_func>
   1cd74:	20004548 	.word	0x20004548
   1cd78:	20000f44 	.word	0x20000f44
   1cd7c:	2000064c 	.word	0x2000064c

0001cd80 <imgmgr_log_gen>:
    modlog_append_mbuf(MYNEWT_VAL(IMGMGR_LOG_MOD), LOG_LEVEL_INFO,
                       LOG_ETYPE_CBOR, om);
#endif

    return 0;
}
   1cd80:	2000      	movs	r0, #0
   1cd82:	4770      	bx	lr

0001cd84 <imgmgr_log_upload_start>:

int
imgmgr_log_upload_start(int status)
{
   1cd84:	b508      	push	{r3, lr}
   1cd86:	4601      	mov	r1, r0
    return imgmgr_log_gen(IMGMGR_LOG_EV_UPSTART, status, NULL);
   1cd88:	2200      	movs	r2, #0
   1cd8a:	4802      	ldr	r0, [pc, #8]	; (1cd94 <imgmgr_log_upload_start+0x10>)
   1cd8c:	f7ff fff8 	bl	1cd80 <imgmgr_log_gen>
}
   1cd90:	bd08      	pop	{r3, pc}
   1cd92:	bf00      	nop
   1cd94:	00024930 	.word	0x00024930

0001cd98 <imgmgr_log_upload_done>:

int
imgmgr_log_upload_done(int status, const uint8_t *hash)
{
   1cd98:	b508      	push	{r3, lr}
   1cd9a:	460a      	mov	r2, r1
    return imgmgr_log_gen(IMGMGR_LOG_EV_UPDONE, 0, hash);
   1cd9c:	2100      	movs	r1, #0
   1cd9e:	4802      	ldr	r0, [pc, #8]	; (1cda8 <imgmgr_log_upload_done+0x10>)
   1cda0:	f7ff ffee 	bl	1cd80 <imgmgr_log_gen>
}
   1cda4:	bd08      	pop	{r3, pc}
   1cda6:	bf00      	nop
   1cda8:	00024938 	.word	0x00024938

0001cdac <imgmgr_log_pending>:

int
imgmgr_log_pending(int status, const uint8_t *hash)
{
   1cdac:	b508      	push	{r3, lr}
   1cdae:	460a      	mov	r2, r1
    return imgmgr_log_gen(IMGMGR_LOG_EV_PEND, status, hash);
   1cdb0:	4601      	mov	r1, r0
   1cdb2:	4802      	ldr	r0, [pc, #8]	; (1cdbc <imgmgr_log_pending+0x10>)
   1cdb4:	f7ff ffe4 	bl	1cd80 <imgmgr_log_gen>
}
   1cdb8:	bd08      	pop	{r3, pc}
   1cdba:	bf00      	nop
   1cdbc:	00024940 	.word	0x00024940

0001cdc0 <imgmgr_log_confirm>:

int
imgmgr_log_confirm(int status, const uint8_t *hash)
{
   1cdc0:	b508      	push	{r3, lr}
   1cdc2:	460a      	mov	r2, r1
    return imgmgr_log_gen(IMGMGR_LOG_EV_CONF, status, hash);
   1cdc4:	4601      	mov	r1, r0
   1cdc6:	4802      	ldr	r0, [pc, #8]	; (1cdd0 <imgmgr_log_confirm+0x10>)
   1cdc8:	f7ff ffda 	bl	1cd80 <imgmgr_log_gen>
}
   1cdcc:	bd08      	pop	{r3, pc}
   1cdce:	bf00      	nop
   1cdd0:	00024948 	.word	0x00024948

0001cdd4 <imgmgr_state_flags>:
#include "imgmgr_priv.h"
#include "log/log_fcb_slot1.h"

uint8_t
imgmgr_state_flags(int query_slot)
{
   1cdd4:	b538      	push	{r3, r4, r5, lr}
    split_mode_t split_mode;
    uint8_t flags;
    int swap_type;

    assert(query_slot == 0 || query_slot == 1);
   1cdd6:	2801      	cmp	r0, #1
   1cdd8:	d809      	bhi.n	1cdee <imgmgr_state_flags+0x1a>
   1cdda:	4604      	mov	r4, r0
    flags = 0;

    /* Determine if this is is pending or confirmed (only applicable for
     * unified images and loaders.
     */
    swap_type = boot_swap_type();
   1cddc:	f002 ff48 	bl	1fc70 <boot_swap_type>
    switch (swap_type) {
   1cde0:	3801      	subs	r0, #1
   1cde2:	2803      	cmp	r0, #3
   1cde4:	d825      	bhi.n	1ce32 <imgmgr_state_flags+0x5e>
   1cde6:	e8df f000 	tbb	[pc, r0]
   1cdea:	1508      	.short	0x1508
   1cdec:	1f1a      	.short	0x1f1a
    assert(query_slot == 0 || query_slot == 1);
   1cdee:	2300      	movs	r3, #0
   1cdf0:	461a      	mov	r2, r3
   1cdf2:	4619      	mov	r1, r3
   1cdf4:	4618      	mov	r0, r3
   1cdf6:	f7ec f929 	bl	904c <__assert_func>
    case BOOT_SWAP_TYPE_NONE:
        if (query_slot == 0) {
   1cdfa:	b1e4      	cbz	r4, 1ce36 <imgmgr_state_flags+0x62>
    flags = 0;
   1cdfc:	2500      	movs	r5, #0

    /* Slot 0 is always active.  Slot 1 is also active if a split app is
     * currently running.
     */
    /* XXX: The slot 0 assumption only holds when running from flash. */
    if (query_slot == 0 || split_app_active_get()) {
   1cdfe:	bb44      	cbnz	r4, 1ce52 <imgmgr_state_flags+0x7e>
        flags |= IMGMGR_STATE_F_ACTIVE;
   1ce00:	f045 0504 	orr.w	r5, r5, #4
    }

    /* Read the split/status config state to determine any pending split-image
     * state changes.
     */
    split_mode = split_mode_get();
   1ce04:	f7f5 fb16 	bl	12434 <split_mode_get>
    switch (split_mode) {
   1ce08:	2803      	cmp	r0, #3
   1ce0a:	d838      	bhi.n	1ce7e <imgmgr_state_flags+0xaa>
   1ce0c:	e8df f000 	tbb	[pc, r0]
   1ce10:	2d263228 	.word	0x2d263228
        if (query_slot == 0) {
   1ce14:	b18c      	cbz	r4, 1ce3a <imgmgr_state_flags+0x66>
        } else if (query_slot == 1) {
   1ce16:	2c01      	cmp	r4, #1
   1ce18:	d011      	beq.n	1ce3e <imgmgr_state_flags+0x6a>
    flags = 0;
   1ce1a:	2500      	movs	r5, #0
   1ce1c:	e7ef      	b.n	1cdfe <imgmgr_state_flags+0x2a>
        if (query_slot == 0) {
   1ce1e:	b184      	cbz	r4, 1ce42 <imgmgr_state_flags+0x6e>
        } else if (query_slot == 1) {
   1ce20:	2c01      	cmp	r4, #1
   1ce22:	d010      	beq.n	1ce46 <imgmgr_state_flags+0x72>
    flags = 0;
   1ce24:	2500      	movs	r5, #0
   1ce26:	e7ea      	b.n	1cdfe <imgmgr_state_flags+0x2a>
        if (query_slot == 0) {
   1ce28:	b17c      	cbz	r4, 1ce4a <imgmgr_state_flags+0x76>
        } else if (query_slot == 1) {
   1ce2a:	2c01      	cmp	r4, #1
   1ce2c:	d00f      	beq.n	1ce4e <imgmgr_state_flags+0x7a>
    flags = 0;
   1ce2e:	2500      	movs	r5, #0
   1ce30:	e7e5      	b.n	1cdfe <imgmgr_state_flags+0x2a>
    switch (swap_type) {
   1ce32:	2500      	movs	r5, #0
   1ce34:	e7e3      	b.n	1cdfe <imgmgr_state_flags+0x2a>
            flags |= IMGMGR_STATE_F_ACTIVE;
   1ce36:	2506      	movs	r5, #6
   1ce38:	e7e1      	b.n	1cdfe <imgmgr_state_flags+0x2a>
            flags |= IMGMGR_STATE_F_CONFIRMED;
   1ce3a:	2502      	movs	r5, #2
   1ce3c:	e7df      	b.n	1cdfe <imgmgr_state_flags+0x2a>
            flags |= IMGMGR_STATE_F_PENDING;
   1ce3e:	2501      	movs	r5, #1
   1ce40:	e7dd      	b.n	1cdfe <imgmgr_state_flags+0x2a>
            flags |= IMGMGR_STATE_F_CONFIRMED;
   1ce42:	2502      	movs	r5, #2
   1ce44:	e7db      	b.n	1cdfe <imgmgr_state_flags+0x2a>
            flags |= IMGMGR_STATE_F_PENDING | IMGMGR_STATE_F_PERMANENT;
   1ce46:	2509      	movs	r5, #9
   1ce48:	e7d9      	b.n	1cdfe <imgmgr_state_flags+0x2a>
            flags |= IMGMGR_STATE_F_ACTIVE;
   1ce4a:	2504      	movs	r5, #4
   1ce4c:	e7d7      	b.n	1cdfe <imgmgr_state_flags+0x2a>
            flags |= IMGMGR_STATE_F_CONFIRMED;
   1ce4e:	2502      	movs	r5, #2
   1ce50:	e7d5      	b.n	1cdfe <imgmgr_state_flags+0x2a>
    if (query_slot == 0 || split_app_active_get()) {
   1ce52:	f7f5 faf5 	bl	12440 <split_app_active_get>
   1ce56:	2800      	cmp	r0, #0
   1ce58:	d0d4      	beq.n	1ce04 <imgmgr_state_flags+0x30>
   1ce5a:	e7d1      	b.n	1ce00 <imgmgr_state_flags+0x2c>
    case SPLIT_MODE_LOADER:
        break;

    case SPLIT_MODE_APP:
        if (query_slot == 1) {
   1ce5c:	2c01      	cmp	r4, #1
   1ce5e:	d001      	beq.n	1ce64 <imgmgr_state_flags+0x90>
        assert(0);
        break;
    }

    return flags;
}
   1ce60:	4628      	mov	r0, r5
   1ce62:	bd38      	pop	{r3, r4, r5, pc}
            flags |= IMGMGR_STATE_F_CONFIRMED;
   1ce64:	f045 0502 	orr.w	r5, r5, #2
   1ce68:	e7fa      	b.n	1ce60 <imgmgr_state_flags+0x8c>
        if (query_slot == 0) {
   1ce6a:	2c00      	cmp	r4, #0
   1ce6c:	d1f8      	bne.n	1ce60 <imgmgr_state_flags+0x8c>
            flags |= IMGMGR_STATE_F_PENDING;
   1ce6e:	f045 0501 	orr.w	r5, r5, #1
   1ce72:	e7f5      	b.n	1ce60 <imgmgr_state_flags+0x8c>
        if (query_slot == 1) {
   1ce74:	2c01      	cmp	r4, #1
   1ce76:	d1f3      	bne.n	1ce60 <imgmgr_state_flags+0x8c>
            flags |= IMGMGR_STATE_F_PENDING;
   1ce78:	f045 0501 	orr.w	r5, r5, #1
   1ce7c:	e7f0      	b.n	1ce60 <imgmgr_state_flags+0x8c>
        assert(0);
   1ce7e:	2300      	movs	r3, #0
   1ce80:	461a      	mov	r2, r3
   1ce82:	4619      	mov	r1, r3
   1ce84:	4618      	mov	r0, r3
   1ce86:	f7ec f8e1 	bl	904c <__assert_func>

0001ce8a <imgmgr_state_any_pending>:

static int
imgmgr_state_any_pending(void)
{
   1ce8a:	b508      	push	{r3, lr}
    return (imgmgr_state_flags(0) & IMGMGR_STATE_F_PENDING) ||
   1ce8c:	2000      	movs	r0, #0
   1ce8e:	f7ff ffa1 	bl	1cdd4 <imgmgr_state_flags>
   1ce92:	f010 0f01 	tst.w	r0, #1
   1ce96:	d001      	beq.n	1ce9c <imgmgr_state_any_pending+0x12>
   1ce98:	2001      	movs	r0, #1
           (imgmgr_state_flags(1) & IMGMGR_STATE_F_PENDING);
}
   1ce9a:	bd08      	pop	{r3, pc}
           (imgmgr_state_flags(1) & IMGMGR_STATE_F_PENDING);
   1ce9c:	2001      	movs	r0, #1
   1ce9e:	f7ff ff99 	bl	1cdd4 <imgmgr_state_flags>
    return (imgmgr_state_flags(0) & IMGMGR_STATE_F_PENDING) ||
   1cea2:	f010 0f01 	tst.w	r0, #1
   1cea6:	d101      	bne.n	1ceac <imgmgr_state_any_pending+0x22>
   1cea8:	2000      	movs	r0, #0
   1ceaa:	e7f6      	b.n	1ce9a <imgmgr_state_any_pending+0x10>
   1ceac:	2001      	movs	r0, #1
   1ceae:	e7f4      	b.n	1ce9a <imgmgr_state_any_pending+0x10>

0001ceb0 <imgmgr_state_slot_in_use>:

int
imgmgr_state_slot_in_use(int slot)
{
   1ceb0:	b508      	push	{r3, lr}
    uint8_t state_flags;

    state_flags = imgmgr_state_flags(slot);
   1ceb2:	f7ff ff8f 	bl	1cdd4 <imgmgr_state_flags>
    return (state_flags & IMGMGR_STATE_F_ACTIVE)       ||
           (state_flags & IMGMGR_STATE_F_CONFIRMED)    ||
   1ceb6:	f010 0f06 	tst.w	r0, #6
   1ceba:	d104      	bne.n	1cec6 <imgmgr_state_slot_in_use+0x16>
   1cebc:	f010 0f01 	tst.w	r0, #1
   1cec0:	d003      	beq.n	1ceca <imgmgr_state_slot_in_use+0x1a>
   1cec2:	2001      	movs	r0, #1
   1cec4:	e000      	b.n	1cec8 <imgmgr_state_slot_in_use+0x18>
   1cec6:	2001      	movs	r0, #1
           (state_flags & IMGMGR_STATE_F_PENDING);
}
   1cec8:	bd08      	pop	{r3, pc}
           (state_flags & IMGMGR_STATE_F_CONFIRMED)    ||
   1ceca:	2000      	movs	r0, #0
   1cecc:	e7fc      	b.n	1cec8 <imgmgr_state_slot_in_use+0x18>

0001cece <imgmgr_state_set_pending>:

int
imgmgr_state_set_pending(int slot, int permanent)
{
   1cece:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ced0:	b08b      	sub	sp, #44	; 0x2c
   1ced2:	4605      	mov	r5, r0
   1ced4:	460c      	mov	r4, r1
    uint8_t hash[IMGMGR_HASH_LEN];
    const uint8_t *hashp;
    int split_app_active;
    int rc;

    state_flags = imgmgr_state_flags(slot);
   1ced6:	f7ff ff7d 	bl	1cdd4 <imgmgr_state_flags>
   1ceda:	4606      	mov	r6, r0
    split_app_active = split_app_active_get();
   1cedc:	f7f5 fab0 	bl	12440 <split_app_active_get>
   1cee0:	4607      	mov	r7, r0
    hashp = NULL;

    /* Unconfirmed slots are always runable.  A confirmed slot can only be
     * run if it is a loader in a split image setup.
     */
    if ((state_flags & IMGMGR_STATE_F_CONFIRMED) &&
   1cee2:	f016 0f02 	tst.w	r6, #2
   1cee6:	d001      	beq.n	1ceec <imgmgr_state_set_pending+0x1e>
   1cee8:	bb6d      	cbnz	r5, 1cf46 <imgmgr_state_set_pending+0x78>
        (slot != 0 || !split_app_active)) {
   1ceea:	b378      	cbz	r0, 1cf4c <imgmgr_state_set_pending+0x7e>

        rc = MGMT_ERR_EBADSTATE;
        goto done;
    }

    rc = imgr_read_info(slot, NULL, hash, &image_flags);
   1ceec:	ab09      	add	r3, sp, #36	; 0x24
   1ceee:	aa01      	add	r2, sp, #4
   1cef0:	2100      	movs	r1, #0
   1cef2:	4628      	mov	r0, r5
   1cef4:	f7ff fbe4 	bl	1c6c0 <imgr_read_info>
    if (rc != 0) {
   1cef8:	bb58      	cbnz	r0, 1cf52 <imgmgr_state_set_pending+0x84>
        rc = MGMT_ERR_EUNKNOWN;
        goto done;
    }
    hashp = hash;

    if (!(image_flags & IMAGE_F_NON_BOOTABLE)) {
   1cefa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1cefc:	f013 0f10 	tst.w	r3, #16
   1cf00:	d114      	bne.n	1cf2c <imgmgr_state_set_pending+0x5e>
        /* Unified image or loader. */
        if (!split_app_active) {
   1cf02:	b13f      	cbz	r7, 1cf14 <imgmgr_state_set_pending+0x46>
                rc = MGMT_ERR_EUNKNOWN;
                goto done;
            }
        } else {
            /* Currently loader + app; testing loader-only. */
            if (permanent) {
   1cf04:	b16c      	cbz	r4, 1cf22 <imgmgr_state_set_pending+0x54>
                rc = split_write_split(SPLIT_MODE_LOADER);
   1cf06:	2000      	movs	r0, #0
   1cf08:	f7f5 fb0e 	bl	12528 <split_write_split>
   1cf0c:	4605      	mov	r5, r0
            } else {
                rc = split_write_split(SPLIT_MODE_TEST_LOADER);
            }
            if (rc != 0) {
   1cf0e:	bb65      	cbnz	r5, 1cf6a <imgmgr_state_set_pending+0x9c>
    hashp = hash;
   1cf10:	a901      	add	r1, sp, #4
   1cf12:	e020      	b.n	1cf56 <imgmgr_state_set_pending+0x88>
            rc = boot_set_pending(permanent);
   1cf14:	4620      	mov	r0, r4
   1cf16:	f002 fefd 	bl	1fd14 <boot_set_pending>
            if (rc != 0) {
   1cf1a:	4605      	mov	r5, r0
   1cf1c:	bb10      	cbnz	r0, 1cf64 <imgmgr_state_set_pending+0x96>
    hashp = hash;
   1cf1e:	a901      	add	r1, sp, #4
   1cf20:	e019      	b.n	1cf56 <imgmgr_state_set_pending+0x88>
                rc = split_write_split(SPLIT_MODE_TEST_LOADER);
   1cf22:	2003      	movs	r0, #3
   1cf24:	f7f5 fb00 	bl	12528 <split_write_split>
   1cf28:	4605      	mov	r5, r0
   1cf2a:	e7f0      	b.n	1cf0e <imgmgr_state_set_pending+0x40>
                goto done;
            }
        }
    } else {
        /* Testing split app. */
        if (permanent) {
   1cf2c:	b134      	cbz	r4, 1cf3c <imgmgr_state_set_pending+0x6e>
            rc = split_write_split(SPLIT_MODE_APP);
   1cf2e:	2002      	movs	r0, #2
   1cf30:	f7f5 fafa 	bl	12528 <split_write_split>
   1cf34:	4605      	mov	r5, r0
        } else {
            rc = split_write_split(SPLIT_MODE_TEST_APP);
        }
        if (rc != 0) {
   1cf36:	b9dd      	cbnz	r5, 1cf70 <imgmgr_state_set_pending+0xa2>
    hashp = hash;
   1cf38:	a901      	add	r1, sp, #4
   1cf3a:	e00c      	b.n	1cf56 <imgmgr_state_set_pending+0x88>
            rc = split_write_split(SPLIT_MODE_TEST_APP);
   1cf3c:	2001      	movs	r0, #1
   1cf3e:	f7f5 faf3 	bl	12528 <split_write_split>
   1cf42:	4605      	mov	r5, r0
   1cf44:	e7f7      	b.n	1cf36 <imgmgr_state_set_pending+0x68>
        rc = MGMT_ERR_EBADSTATE;
   1cf46:	2506      	movs	r5, #6
    hashp = NULL;
   1cf48:	2100      	movs	r1, #0
   1cf4a:	e004      	b.n	1cf56 <imgmgr_state_set_pending+0x88>
        rc = MGMT_ERR_EBADSTATE;
   1cf4c:	2506      	movs	r5, #6
    hashp = NULL;
   1cf4e:	2100      	movs	r1, #0
   1cf50:	e001      	b.n	1cf56 <imgmgr_state_set_pending+0x88>
        rc = MGMT_ERR_EUNKNOWN;
   1cf52:	2501      	movs	r5, #1
    hashp = NULL;
   1cf54:	2100      	movs	r1, #0
            goto done;
        }
    }

done:
    if (permanent) {
   1cf56:	b174      	cbz	r4, 1cf76 <imgmgr_state_set_pending+0xa8>
        imgmgr_log_confirm(rc, hashp);
   1cf58:	4628      	mov	r0, r5
   1cf5a:	f7ff ff31 	bl	1cdc0 <imgmgr_log_confirm>
    } else {
        imgmgr_log_pending(rc, hashp);
    }
    return rc;
}
   1cf5e:	4628      	mov	r0, r5
   1cf60:	b00b      	add	sp, #44	; 0x2c
   1cf62:	bdf0      	pop	{r4, r5, r6, r7, pc}
                rc = MGMT_ERR_EUNKNOWN;
   1cf64:	2501      	movs	r5, #1
    hashp = hash;
   1cf66:	a901      	add	r1, sp, #4
   1cf68:	e7f5      	b.n	1cf56 <imgmgr_state_set_pending+0x88>
                rc = MGMT_ERR_EUNKNOWN;
   1cf6a:	2501      	movs	r5, #1
    hashp = hash;
   1cf6c:	a901      	add	r1, sp, #4
   1cf6e:	e7f2      	b.n	1cf56 <imgmgr_state_set_pending+0x88>
            rc = MGMT_ERR_EUNKNOWN;
   1cf70:	2501      	movs	r5, #1
    hashp = hash;
   1cf72:	a901      	add	r1, sp, #4
   1cf74:	e7ef      	b.n	1cf56 <imgmgr_state_set_pending+0x88>
        imgmgr_log_pending(rc, hashp);
   1cf76:	4628      	mov	r0, r5
   1cf78:	f7ff ff18 	bl	1cdac <imgmgr_log_pending>
    return rc;
   1cf7c:	e7ef      	b.n	1cf5e <imgmgr_state_set_pending+0x90>

0001cf7e <imgmgr_state_confirm>:

int
imgmgr_state_confirm(void)
{
   1cf7e:	b510      	push	{r4, lr}
    int rc;

    /* Confirm disallowed if a test is pending. */
    if (imgmgr_state_any_pending()) {
   1cf80:	f7ff ff83 	bl	1ce8a <imgmgr_state_any_pending>
   1cf84:	b9b8      	cbnz	r0, 1cfb6 <imgmgr_state_confirm+0x38>
        rc = MGMT_ERR_EBADSTATE;
        goto done;
    }

    /* Confirm the unified image or loader in slot 0. */
    rc = boot_set_confirmed();
   1cf86:	f002 ff08 	bl	1fd9a <boot_set_confirmed>
    if (rc != 0) {
   1cf8a:	b108      	cbz	r0, 1cf90 <imgmgr_state_confirm+0x12>
        rc = MGMT_ERR_EUNKNOWN;
   1cf8c:	2401      	movs	r4, #1
   1cf8e:	e013      	b.n	1cfb8 <imgmgr_state_confirm+0x3a>
        goto done;
    }

    /* If a split app in slot 1 is active, confirm it as well. */
    if (split_app_active_get()) {
   1cf90:	f7f5 fa56 	bl	12440 <split_app_active_get>
   1cf94:	b138      	cbz	r0, 1cfa6 <imgmgr_state_confirm+0x28>
        rc = split_write_split(SPLIT_MODE_APP);
   1cf96:	2002      	movs	r0, #2
   1cf98:	f7f5 fac6 	bl	12528 <split_write_split>
        if (rc != 0) {
   1cf9c:	4604      	mov	r4, r0
   1cf9e:	b988      	cbnz	r0, 1cfc4 <imgmgr_state_confirm+0x46>
        /* If logging to slot1 is enabled, we can unlock slot1 here. */
        log_fcb_slot1_unlock();
#endif
    }

    imgmgr_dfu_confirmed();
   1cfa0:	f7ff fec6 	bl	1cd30 <imgmgr_dfu_confirmed>
   1cfa4:	e008      	b.n	1cfb8 <imgmgr_state_confirm+0x3a>
        rc = split_write_split(SPLIT_MODE_LOADER);
   1cfa6:	2000      	movs	r0, #0
   1cfa8:	f7f5 fabe 	bl	12528 <split_write_split>
        if (rc != 0) {
   1cfac:	4604      	mov	r4, r0
   1cfae:	2800      	cmp	r0, #0
   1cfb0:	d0f6      	beq.n	1cfa0 <imgmgr_state_confirm+0x22>
            rc = MGMT_ERR_EUNKNOWN;
   1cfb2:	2401      	movs	r4, #1
   1cfb4:	e000      	b.n	1cfb8 <imgmgr_state_confirm+0x3a>
        rc = MGMT_ERR_EBADSTATE;
   1cfb6:	2406      	movs	r4, #6

done:
    imgmgr_log_confirm(rc, NULL);
   1cfb8:	2100      	movs	r1, #0
   1cfba:	4620      	mov	r0, r4
   1cfbc:	f7ff ff00 	bl	1cdc0 <imgmgr_log_confirm>
    return rc;
}
   1cfc0:	4620      	mov	r0, r4
   1cfc2:	bd10      	pop	{r4, pc}
            rc = MGMT_ERR_EUNKNOWN;
   1cfc4:	2401      	movs	r4, #1
   1cfc6:	e7f7      	b.n	1cfb8 <imgmgr_state_confirm+0x3a>

0001cfc8 <imgmgr_state_read>:

int
imgmgr_state_read(struct mgmt_cbuf *cb)
{
   1cfc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cfcc:	b09a      	sub	sp, #104	; 0x68
    CborEncoder images;
    CborEncoder image;

    any_non_bootable = 0;

    g_err |= cbor_encode_text_stringz(&cb->encoder, "images");
   1cfce:	f100 070c 	add.w	r7, r0, #12
   1cfd2:	2206      	movs	r2, #6
   1cfd4:	4961      	ldr	r1, [pc, #388]	; (1d15c <imgmgr_state_read+0x194>)
   1cfd6:	4638      	mov	r0, r7
   1cfd8:	f7f6 f89b 	bl	13112 <cbor_encode_text_string>
   1cfdc:	4604      	mov	r4, r0

    g_err |= cbor_encoder_create_array(&cb->encoder, &images,
   1cfde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1cfe2:	a904      	add	r1, sp, #16
   1cfe4:	4638      	mov	r0, r7
   1cfe6:	f7f6 f89b 	bl	13120 <cbor_encoder_create_array>
   1cfea:	4304      	orrs	r4, r0
    any_non_bootable = 0;
   1cfec:	f04f 0800 	mov.w	r8, #0
                                       CborIndefiniteLength);
    for (i = 0; i < 2; i++) {
   1cff0:	4645      	mov	r5, r8
   1cff2:	e080      	b.n	1d0f6 <imgmgr_state_read+0x12e>

        if (flags & IMAGE_F_NON_BOOTABLE) {
            any_non_bootable = 1;
        }

        state_flags = imgmgr_state_flags(i);
   1cff4:	4628      	mov	r0, r5
   1cff6:	f7ff feed 	bl	1cdd4 <imgmgr_state_flags>
   1cffa:	4606      	mov	r6, r0

        g_err |= cbor_encoder_create_map(&images, &image,
   1cffc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d000:	4669      	mov	r1, sp
   1d002:	a804      	add	r0, sp, #16
   1d004:	f7f6 f891 	bl	1312a <cbor_encoder_create_map>
   1d008:	4304      	orrs	r4, r0
   1d00a:	2204      	movs	r2, #4
   1d00c:	4954      	ldr	r1, [pc, #336]	; (1d160 <imgmgr_state_read+0x198>)
   1d00e:	4668      	mov	r0, sp
   1d010:	f7f6 f87f 	bl	13112 <cbor_encode_text_string>
                                         CborIndefiniteLength);
        g_err |= cbor_encode_text_stringz(&image, "slot");
   1d014:	4304      	orrs	r4, r0
        g_err |= cbor_encode_int(&image, i);
   1d016:	462a      	mov	r2, r5
   1d018:	17eb      	asrs	r3, r5, #31
   1d01a:	4668      	mov	r0, sp
   1d01c:	f7f5 fffe 	bl	1301c <cbor_encode_int>
   1d020:	4304      	orrs	r4, r0
   1d022:	2207      	movs	r2, #7
   1d024:	494f      	ldr	r1, [pc, #316]	; (1d164 <imgmgr_state_read+0x19c>)
   1d026:	4668      	mov	r0, sp
   1d028:	f7f6 f873 	bl	13112 <cbor_encode_text_string>

        g_err |= cbor_encode_text_stringz(&image, "version");
   1d02c:	4304      	orrs	r4, r0
        imgr_ver_str(&ver, vers_str);
   1d02e:	a908      	add	r1, sp, #32
   1d030:	a817      	add	r0, sp, #92	; 0x5c
   1d032:	f000 f8f5 	bl	1d220 <imgr_ver_str>
   1d036:	a808      	add	r0, sp, #32
   1d038:	f7f0 fd1a 	bl	da70 <strlen>
   1d03c:	4602      	mov	r2, r0
   1d03e:	a908      	add	r1, sp, #32
   1d040:	4668      	mov	r0, sp
   1d042:	f7f6 f866 	bl	13112 <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&image, vers_str);
   1d046:	4304      	orrs	r4, r0
   1d048:	2204      	movs	r2, #4
   1d04a:	4947      	ldr	r1, [pc, #284]	; (1d168 <imgmgr_state_read+0x1a0>)
   1d04c:	4668      	mov	r0, sp
   1d04e:	f7f6 f860 	bl	13112 <cbor_encode_text_string>

        g_err |= cbor_encode_text_stringz(&image, "hash");
   1d052:	4304      	orrs	r4, r0
        g_err |= cbor_encode_byte_string(&image, hash, IMGMGR_HASH_LEN);
   1d054:	2220      	movs	r2, #32
   1d056:	a90f      	add	r1, sp, #60	; 0x3c
   1d058:	4668      	mov	r0, sp
   1d05a:	f7f6 f853 	bl	13104 <cbor_encode_byte_string>
   1d05e:	4304      	orrs	r4, r0
   1d060:	2208      	movs	r2, #8
   1d062:	4942      	ldr	r1, [pc, #264]	; (1d16c <imgmgr_state_read+0x1a4>)
   1d064:	4668      	mov	r0, sp
   1d066:	f7f6 f854 	bl	13112 <cbor_encode_text_string>

        g_err |= cbor_encode_text_stringz(&image, "bootable");
   1d06a:	4304      	orrs	r4, r0
        g_err |= cbor_encode_boolean(&image, !(flags & IMAGE_F_NON_BOOTABLE));
   1d06c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1d06e:	f013 0f10 	tst.w	r3, #16
   1d072:	bf0c      	ite	eq
   1d074:	2101      	moveq	r1, #1
   1d076:	2100      	movne	r1, #0
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   1d078:	3114      	adds	r1, #20
   1d07a:	4668      	mov	r0, sp
   1d07c:	f7f6 f814 	bl	130a8 <cbor_encode_simple_value>
   1d080:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1d082:	2207      	movs	r2, #7
   1d084:	493a      	ldr	r1, [pc, #232]	; (1d170 <imgmgr_state_read+0x1a8>)
   1d086:	4668      	mov	r0, sp
   1d088:	f7f6 f843 	bl	13112 <cbor_encode_text_string>

        g_err |= cbor_encode_text_stringz(&image, "pending");
   1d08c:	4304      	orrs	r4, r0
        g_err |= cbor_encode_boolean(&image,
   1d08e:	f006 0101 	and.w	r1, r6, #1
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   1d092:	3114      	adds	r1, #20
   1d094:	4668      	mov	r0, sp
   1d096:	f7f6 f807 	bl	130a8 <cbor_encode_simple_value>
   1d09a:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1d09c:	2209      	movs	r2, #9
   1d09e:	4935      	ldr	r1, [pc, #212]	; (1d174 <imgmgr_state_read+0x1ac>)
   1d0a0:	4668      	mov	r0, sp
   1d0a2:	f7f6 f836 	bl	13112 <cbor_encode_text_string>
                                     state_flags & IMGMGR_STATE_F_PENDING);

        g_err |= cbor_encode_text_stringz(&image, "confirmed");
   1d0a6:	4304      	orrs	r4, r0
        g_err |= cbor_encode_boolean(&image,
   1d0a8:	f3c6 0140 	ubfx	r1, r6, #1, #1
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   1d0ac:	3114      	adds	r1, #20
   1d0ae:	4668      	mov	r0, sp
   1d0b0:	f7f5 fffa 	bl	130a8 <cbor_encode_simple_value>
   1d0b4:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1d0b6:	2206      	movs	r2, #6
   1d0b8:	492f      	ldr	r1, [pc, #188]	; (1d178 <imgmgr_state_read+0x1b0>)
   1d0ba:	4668      	mov	r0, sp
   1d0bc:	f7f6 f829 	bl	13112 <cbor_encode_text_string>
                                     state_flags & IMGMGR_STATE_F_CONFIRMED);

        g_err |= cbor_encode_text_stringz(&image, "active");
   1d0c0:	4304      	orrs	r4, r0
        g_err |= cbor_encode_boolean(&image,
   1d0c2:	f3c6 0180 	ubfx	r1, r6, #2, #1
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   1d0c6:	3114      	adds	r1, #20
   1d0c8:	4668      	mov	r0, sp
   1d0ca:	f7f5 ffed 	bl	130a8 <cbor_encode_simple_value>
   1d0ce:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1d0d0:	2209      	movs	r2, #9
   1d0d2:	492a      	ldr	r1, [pc, #168]	; (1d17c <imgmgr_state_read+0x1b4>)
   1d0d4:	4668      	mov	r0, sp
   1d0d6:	f7f6 f81c 	bl	13112 <cbor_encode_text_string>
                                     state_flags & IMGMGR_STATE_F_ACTIVE);

        g_err |= cbor_encode_text_stringz(&image, "permanent");
   1d0da:	4304      	orrs	r4, r0
        g_err |= cbor_encode_boolean(&image,
   1d0dc:	f3c6 01c0 	ubfx	r1, r6, #3, #1
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   1d0e0:	3114      	adds	r1, #20
   1d0e2:	4668      	mov	r0, sp
   1d0e4:	f7f5 ffe0 	bl	130a8 <cbor_encode_simple_value>
   1d0e8:	4304      	orrs	r4, r0
                                     state_flags & IMGMGR_STATE_F_PERMANENT);

        g_err |= cbor_encoder_close_container(&images, &image);
   1d0ea:	4669      	mov	r1, sp
   1d0ec:	a804      	add	r0, sp, #16
   1d0ee:	f7f6 f82a 	bl	13146 <cbor_encoder_close_container>
   1d0f2:	4304      	orrs	r4, r0
    for (i = 0; i < 2; i++) {
   1d0f4:	3501      	adds	r5, #1
   1d0f6:	2d01      	cmp	r5, #1
   1d0f8:	dc0f      	bgt.n	1d11a <imgmgr_state_read+0x152>
        rc = imgr_read_info(i, &ver, hash, &flags);
   1d0fa:	ab19      	add	r3, sp, #100	; 0x64
   1d0fc:	aa0f      	add	r2, sp, #60	; 0x3c
   1d0fe:	a917      	add	r1, sp, #92	; 0x5c
   1d100:	4628      	mov	r0, r5
   1d102:	f7ff fadd 	bl	1c6c0 <imgr_read_info>
        if (rc != 0) {
   1d106:	2800      	cmp	r0, #0
   1d108:	d1f4      	bne.n	1d0f4 <imgmgr_state_read+0x12c>
        if (flags & IMAGE_F_NON_BOOTABLE) {
   1d10a:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1d10c:	f013 0f10 	tst.w	r3, #16
   1d110:	f43f af70 	beq.w	1cff4 <imgmgr_state_read+0x2c>
            any_non_bootable = 1;
   1d114:	f04f 0801 	mov.w	r8, #1
   1d118:	e76c      	b.n	1cff4 <imgmgr_state_read+0x2c>
    }

    g_err |= cbor_encoder_close_container(&cb->encoder, &images);
   1d11a:	a904      	add	r1, sp, #16
   1d11c:	4638      	mov	r0, r7
   1d11e:	f7f6 f812 	bl	13146 <cbor_encoder_close_container>
   1d122:	4304      	orrs	r4, r0

    if (any_non_bootable) {
   1d124:	f1b8 0f00 	cmp.w	r8, #0
   1d128:	d112      	bne.n	1d150 <imgmgr_state_read+0x188>
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1d12a:	220b      	movs	r2, #11
   1d12c:	4914      	ldr	r1, [pc, #80]	; (1d180 <imgmgr_state_read+0x1b8>)
   1d12e:	4638      	mov	r0, r7
   1d130:	f7f5 ffef 	bl	13112 <cbor_encode_text_string>
        split_status = split_check_status();
    } else {
        split_status = SPLIT_STATUS_INVALID;
    }

    g_err |= cbor_encode_text_stringz(&cb->encoder, "splitStatus");
   1d134:	4304      	orrs	r4, r0
    g_err |= cbor_encode_int(&cb->encoder, split_status);
   1d136:	4642      	mov	r2, r8
   1d138:	ea4f 73e8 	mov.w	r3, r8, asr #31
   1d13c:	4638      	mov	r0, r7
   1d13e:	f7f5 ff6d 	bl	1301c <cbor_encode_int>

    if (g_err) {
   1d142:	ea54 0300 	orrs.w	r3, r4, r0
   1d146:	d107      	bne.n	1d158 <imgmgr_state_read+0x190>
        return MGMT_ERR_ENOMEM;
    }
    return 0;
   1d148:	2000      	movs	r0, #0
}
   1d14a:	b01a      	add	sp, #104	; 0x68
   1d14c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        split_status = split_check_status();
   1d150:	f7f5 f954 	bl	123fc <split_check_status>
   1d154:	4680      	mov	r8, r0
   1d156:	e7e8      	b.n	1d12a <imgmgr_state_read+0x162>
        return MGMT_ERR_ENOMEM;
   1d158:	2002      	movs	r0, #2
   1d15a:	e7f6      	b.n	1d14a <imgmgr_state_read+0x182>
   1d15c:	00024950 	.word	0x00024950
   1d160:	00024958 	.word	0x00024958
   1d164:	00024960 	.word	0x00024960
   1d168:	00024968 	.word	0x00024968
   1d16c:	00024970 	.word	0x00024970
   1d170:	0002497c 	.word	0x0002497c
   1d174:	00024984 	.word	0x00024984
   1d178:	00024990 	.word	0x00024990
   1d17c:	00024998 	.word	0x00024998
   1d180:	000249a4 	.word	0x000249a4

0001d184 <imgmgr_state_write>:

int
imgmgr_state_write(struct mgmt_cbuf *cb)
{
   1d184:	b510      	push	{r4, lr}
   1d186:	b0ae      	sub	sp, #184	; 0xb8
   1d188:	4604      	mov	r4, r0
    uint8_t hash[IMGMGR_HASH_LEN];
    size_t hash_len = 0;
   1d18a:	2100      	movs	r1, #0
   1d18c:	9125      	str	r1, [sp, #148]	; 0x94
    bool confirm;
    int slot;
    int rc;

    const struct cbor_attr_t write_attr[] = {
   1d18e:	2290      	movs	r2, #144	; 0x90
   1d190:	4668      	mov	r0, sp
   1d192:	f7f0 fc36 	bl	da02 <memset>
   1d196:	4b20      	ldr	r3, [pc, #128]	; (1d218 <imgmgr_state_write+0x94>)
   1d198:	9300      	str	r3, [sp, #0]
   1d19a:	2303      	movs	r3, #3
   1d19c:	f88d 3004 	strb.w	r3, [sp, #4]
   1d1a0:	ab26      	add	r3, sp, #152	; 0x98
   1d1a2:	9302      	str	r3, [sp, #8]
   1d1a4:	ab25      	add	r3, sp, #148	; 0x94
   1d1a6:	9303      	str	r3, [sp, #12]
   1d1a8:	2320      	movs	r3, #32
   1d1aa:	930a      	str	r3, [sp, #40]	; 0x28
   1d1ac:	4b1b      	ldr	r3, [pc, #108]	; (1d21c <imgmgr_state_write+0x98>)
   1d1ae:	930c      	str	r3, [sp, #48]	; 0x30
   1d1b0:	2305      	movs	r3, #5
   1d1b2:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   1d1b6:	f10d 0393 	add.w	r3, sp, #147	; 0x93
   1d1ba:	930e      	str	r3, [sp, #56]	; 0x38
            .dflt.boolean = false,
        },
        [2] = { 0 },
    };

    rc = cbor_read_object(&cb->it, write_attr);
   1d1bc:	4669      	mov	r1, sp
   1d1be:	f104 001c 	add.w	r0, r4, #28
   1d1c2:	f7f5 fdbf 	bl	12d44 <cbor_read_object>
    if (rc != 0) {
   1d1c6:	bb10      	cbnz	r0, 1d20e <imgmgr_state_write+0x8a>
   1d1c8:	4603      	mov	r3, r0
        return MGMT_ERR_EINVAL;
    }

    /* Determine which slot is being operated on. */
    if (hash_len == 0) {
   1d1ca:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1d1cc:	b97a      	cbnz	r2, 1d1ee <imgmgr_state_write+0x6a>
        if (confirm) {
   1d1ce:	f89d 2093 	ldrb.w	r2, [sp, #147]	; 0x93
   1d1d2:	b152      	cbz	r2, 1d1ea <imgmgr_state_write+0x66>
        if (slot < 0) {
            return MGMT_ERR_EINVAL;
        }
    }

    if (slot == 0 && confirm) {
   1d1d4:	f89d 2093 	ldrb.w	r2, [sp, #147]	; 0x93
   1d1d8:	b992      	cbnz	r2, 1d200 <imgmgr_state_write+0x7c>
        /* Confirm current setup. */
        rc = imgmgr_state_confirm();
    } else {
        rc = imgmgr_state_set_pending(slot, confirm);
   1d1da:	f89d 1093 	ldrb.w	r1, [sp, #147]	; 0x93
   1d1de:	4618      	mov	r0, r3
   1d1e0:	f7ff fe75 	bl	1cece <imgmgr_state_set_pending>
    }
    if (rc != 0) {
   1d1e4:	b178      	cbz	r0, 1d206 <imgmgr_state_write+0x82>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1d1e6:	b02e      	add	sp, #184	; 0xb8
   1d1e8:	bd10      	pop	{r4, pc}
            return MGMT_ERR_EINVAL;
   1d1ea:	2003      	movs	r0, #3
   1d1ec:	e7fb      	b.n	1d1e6 <imgmgr_state_write+0x62>
        slot = imgr_find_by_hash(hash, NULL);
   1d1ee:	2100      	movs	r1, #0
   1d1f0:	a826      	add	r0, sp, #152	; 0x98
   1d1f2:	f7ff fb0b 	bl	1c80c <imgr_find_by_hash>
        if (slot < 0) {
   1d1f6:	1e03      	subs	r3, r0, #0
   1d1f8:	db0b      	blt.n	1d212 <imgmgr_state_write+0x8e>
    if (slot == 0 && confirm) {
   1d1fa:	2b00      	cmp	r3, #0
   1d1fc:	d1ed      	bne.n	1d1da <imgmgr_state_write+0x56>
   1d1fe:	e7e9      	b.n	1d1d4 <imgmgr_state_write+0x50>
        rc = imgmgr_state_confirm();
   1d200:	f7ff febd 	bl	1cf7e <imgmgr_state_confirm>
   1d204:	e7ee      	b.n	1d1e4 <imgmgr_state_write+0x60>
    rc = imgmgr_state_read(cb);
   1d206:	4620      	mov	r0, r4
   1d208:	f7ff fede 	bl	1cfc8 <imgmgr_state_read>
    if (rc != 0) {
   1d20c:	e7eb      	b.n	1d1e6 <imgmgr_state_write+0x62>
        return MGMT_ERR_EINVAL;
   1d20e:	2003      	movs	r0, #3
   1d210:	e7e9      	b.n	1d1e6 <imgmgr_state_write+0x62>
            return MGMT_ERR_EINVAL;
   1d212:	2003      	movs	r0, #3
   1d214:	e7e7      	b.n	1d1e6 <imgmgr_state_write+0x62>
   1d216:	bf00      	nop
   1d218:	00024968 	.word	0x00024968
   1d21c:	000249b0 	.word	0x000249b0

0001d220 <imgr_ver_str>:
    return 0;
}

int
imgr_ver_str(struct image_version *ver, char *dst)
{
   1d220:	b500      	push	{lr}
   1d222:	b083      	sub	sp, #12
   1d224:	4602      	mov	r2, r0
   1d226:	4608      	mov	r0, r1
    if (ver->iv_build_num) {
   1d228:	6853      	ldr	r3, [r2, #4]
   1d22a:	b153      	cbz	r3, 1d242 <imgr_ver_str+0x22>
        return sprintf(dst, "%u.%u.%u.%lu",
          ver->iv_major, ver->iv_minor, ver->iv_revision,
   1d22c:	8851      	ldrh	r1, [r2, #2]
        return sprintf(dst, "%u.%u.%u.%lu",
   1d22e:	9301      	str	r3, [sp, #4]
   1d230:	9100      	str	r1, [sp, #0]
   1d232:	7853      	ldrb	r3, [r2, #1]
   1d234:	7812      	ldrb	r2, [r2, #0]
   1d236:	4907      	ldr	r1, [pc, #28]	; (1d254 <imgr_ver_str+0x34>)
   1d238:	f7ff f8c9 	bl	1c3ce <sprintf>
          (unsigned long)ver->iv_build_num);
    } else {
        return sprintf(dst, "%u.%u.%u",
          ver->iv_major, ver->iv_minor, ver->iv_revision);
    }
}
   1d23c:	b003      	add	sp, #12
   1d23e:	f85d fb04 	ldr.w	pc, [sp], #4
          ver->iv_major, ver->iv_minor, ver->iv_revision);
   1d242:	8853      	ldrh	r3, [r2, #2]
        return sprintf(dst, "%u.%u.%u",
   1d244:	9300      	str	r3, [sp, #0]
   1d246:	7853      	ldrb	r3, [r2, #1]
   1d248:	7812      	ldrb	r2, [r2, #0]
   1d24a:	4903      	ldr	r1, [pc, #12]	; (1d258 <imgr_ver_str+0x38>)
   1d24c:	f7ff f8bf 	bl	1c3ce <sprintf>
   1d250:	e7f4      	b.n	1d23c <imgr_ver_str+0x1c>
   1d252:	bf00      	nop
   1d254:	000249b8 	.word	0x000249b8
   1d258:	000249c8 	.word	0x000249c8

0001d25c <mgmt_group_list_lock>:
static STAILQ_HEAD(, mgmt_group) mgmt_group_list =
    STAILQ_HEAD_INITIALIZER(mgmt_group_list);

static int
mgmt_group_list_lock(void)
{
   1d25c:	b508      	push	{r3, lr}
    int rc;

    if (!os_started()) {
   1d25e:	f7eb ffaf 	bl	91c0 <os_started>
   1d262:	b900      	cbnz	r0, 1d266 <mgmt_group_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
   1d264:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&mgmt_group_lock, OS_WAIT_FOREVER);
   1d266:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d26a:	4802      	ldr	r0, [pc, #8]	; (1d274 <mgmt_group_list_lock+0x18>)
   1d26c:	f7ed fc60 	bl	ab30 <os_mutex_pend>
    if (rc != 0) {
   1d270:	e7f8      	b.n	1d264 <mgmt_group_list_lock+0x8>
   1d272:	bf00      	nop
   1d274:	2000469c 	.word	0x2000469c

0001d278 <mgmt_group_list_unlock>:

int
mgmt_group_list_unlock(void)
{
   1d278:	b508      	push	{r3, lr}
    int rc;

    if (!os_started()) {
   1d27a:	f7eb ffa1 	bl	91c0 <os_started>
   1d27e:	b900      	cbnz	r0, 1d282 <mgmt_group_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
   1d280:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&mgmt_group_lock);
   1d282:	4802      	ldr	r0, [pc, #8]	; (1d28c <mgmt_group_list_unlock+0x14>)
   1d284:	f7ed fbf8 	bl	aa78 <os_mutex_release>
    if (rc != 0) {
   1d288:	e7fa      	b.n	1d280 <mgmt_group_list_unlock+0x8>
   1d28a:	bf00      	nop
   1d28c:	2000469c 	.word	0x2000469c

0001d290 <mgmt_find_group>:
    return (rc);
}

static struct mgmt_group *
mgmt_find_group(uint16_t group_id)
{
   1d290:	b538      	push	{r3, r4, r5, lr}
   1d292:	4605      	mov	r5, r0
    struct mgmt_group *group;
    int rc;

    group = NULL;

    rc = mgmt_group_list_lock();
   1d294:	f7ff ffe2 	bl	1d25c <mgmt_group_list_lock>
    if (rc != 0) {
   1d298:	b960      	cbnz	r0, 1d2b4 <mgmt_find_group+0x24>
        goto err;
    }

    STAILQ_FOREACH(group, &mgmt_group_list, mg_next) {
   1d29a:	4b08      	ldr	r3, [pc, #32]	; (1d2bc <mgmt_find_group+0x2c>)
   1d29c:	681c      	ldr	r4, [r3, #0]
   1d29e:	b124      	cbz	r4, 1d2aa <mgmt_find_group+0x1a>
        if (group->mg_group_id == group_id) {
   1d2a0:	88e3      	ldrh	r3, [r4, #6]
   1d2a2:	42ab      	cmp	r3, r5
   1d2a4:	d001      	beq.n	1d2aa <mgmt_find_group+0x1a>
    STAILQ_FOREACH(group, &mgmt_group_list, mg_next) {
   1d2a6:	68a4      	ldr	r4, [r4, #8]
   1d2a8:	e7f9      	b.n	1d29e <mgmt_find_group+0xe>
            break;
        }
    }

    rc = mgmt_group_list_unlock();
   1d2aa:	f7ff ffe5 	bl	1d278 <mgmt_group_list_unlock>
    if (rc != 0) {
   1d2ae:	b918      	cbnz	r0, 1d2b8 <mgmt_find_group+0x28>
    }

    return (group);
err:
    return (NULL);
}
   1d2b0:	4620      	mov	r0, r4
   1d2b2:	bd38      	pop	{r3, r4, r5, pc}
    return (NULL);
   1d2b4:	2400      	movs	r4, #0
   1d2b6:	e7fb      	b.n	1d2b0 <mgmt_find_group+0x20>
   1d2b8:	2400      	movs	r4, #0
   1d2ba:	e7f9      	b.n	1d2b0 <mgmt_find_group+0x20>
   1d2bc:	20000f50 	.word	0x20000f50

0001d2c0 <mgmt_group_register>:
{
   1d2c0:	b510      	push	{r4, lr}
   1d2c2:	4604      	mov	r4, r0
    rc = mgmt_group_list_lock();
   1d2c4:	f7ff ffca 	bl	1d25c <mgmt_group_list_lock>
    if (rc != 0) {
   1d2c8:	b100      	cbz	r0, 1d2cc <mgmt_group_register+0xc>
}
   1d2ca:	bd10      	pop	{r4, pc}
    STAILQ_INSERT_TAIL(&mgmt_group_list, group, mg_next);
   1d2cc:	60a0      	str	r0, [r4, #8]
   1d2ce:	4b04      	ldr	r3, [pc, #16]	; (1d2e0 <mgmt_group_register+0x20>)
   1d2d0:	685a      	ldr	r2, [r3, #4]
   1d2d2:	6014      	str	r4, [r2, #0]
   1d2d4:	3408      	adds	r4, #8
   1d2d6:	605c      	str	r4, [r3, #4]
    rc = mgmt_group_list_unlock();
   1d2d8:	f7ff ffce 	bl	1d278 <mgmt_group_list_unlock>
    if (rc != 0) {
   1d2dc:	e7f5      	b.n	1d2ca <mgmt_group_register+0xa>
   1d2de:	bf00      	nop
   1d2e0:	20000f50 	.word	0x20000f50

0001d2e4 <mgmt_find_handler>:

const struct mgmt_handler *
mgmt_find_handler(uint16_t group_id, uint16_t handler_id)
{
   1d2e4:	b510      	push	{r4, lr}
   1d2e6:	460c      	mov	r4, r1
    struct mgmt_group *group;
    const struct mgmt_handler *handler;

    group = mgmt_find_group(group_id);
   1d2e8:	f7ff ffd2 	bl	1d290 <mgmt_find_group>
    if (!group) {
   1d2ec:	4603      	mov	r3, r0
   1d2ee:	b128      	cbz	r0, 1d2fc <mgmt_find_handler+0x18>
        goto err;
    }

    if (handler_id >= group->mg_handlers_count) {
   1d2f0:	8882      	ldrh	r2, [r0, #4]
   1d2f2:	42a2      	cmp	r2, r4
   1d2f4:	d904      	bls.n	1d300 <mgmt_find_handler+0x1c>
        goto err;
    }

    handler = &group->mg_handlers[handler_id];
   1d2f6:	6803      	ldr	r3, [r0, #0]
   1d2f8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3

    return (handler);
err:
    return (NULL);
}
   1d2fc:	4618      	mov	r0, r3
   1d2fe:	bd10      	pop	{r4, pc}
    return (NULL);
   1d300:	2300      	movs	r3, #0
   1d302:	e7fb      	b.n	1d2fc <mgmt_find_handler+0x18>

0001d304 <mgmt_cbuf_setoerr>:

int
mgmt_cbuf_setoerr(struct mgmt_cbuf *cb, int errcode)
{
   1d304:	b538      	push	{r3, r4, r5, lr}
   1d306:	460d      	mov	r5, r1
    int rc;

    rc = cbor_encode_text_stringz(&cb->encoder, "rc");
   1d308:	f100 040c 	add.w	r4, r0, #12
   1d30c:	2202      	movs	r2, #2
   1d30e:	4906      	ldr	r1, [pc, #24]	; (1d328 <mgmt_cbuf_setoerr+0x24>)
   1d310:	4620      	mov	r0, r4
   1d312:	f7f5 fefe 	bl	13112 <cbor_encode_text_string>
    if (rc != 0) {
   1d316:	b100      	cbz	r0, 1d31a <mgmt_cbuf_setoerr+0x16>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1d318:	bd38      	pop	{r3, r4, r5, pc}
    rc = cbor_encode_int(&cb->encoder, errcode);
   1d31a:	462a      	mov	r2, r5
   1d31c:	17eb      	asrs	r3, r5, #31
   1d31e:	4620      	mov	r0, r4
   1d320:	f7f5 fe7c 	bl	1301c <cbor_encode_int>
    if (rc != 0) {
   1d324:	e7f8      	b.n	1d318 <mgmt_cbuf_setoerr+0x14>
   1d326:	bf00      	nop
   1d328:	000238e4 	.word	0x000238e4

0001d32c <nmgr_rsp_frag_alloc>:
/**
 * Allocates an mbuf to contain an outgoing response fragment.
 */
static struct os_mbuf *
nmgr_rsp_frag_alloc(uint16_t frag_size, void *arg)
{
   1d32c:	b538      	push	{r3, r4, r5, lr}
   1d32e:	460c      	mov	r4, r1
    /* We need to duplicate the user header from the source response, as that
     * is where transport-specific information is stored.
     */
    src_rsp = arg;

    frag = os_msys_get_pkthdr(frag_size, OS_MBUF_USRHDR_LEN(src_rsp));
   1d330:	7949      	ldrb	r1, [r1, #5]
   1d332:	3908      	subs	r1, #8
   1d334:	b289      	uxth	r1, r1
   1d336:	f7ec fb83 	bl	9a40 <os_msys_get_pkthdr>
    if (frag != NULL) {
   1d33a:	4605      	mov	r5, r0
   1d33c:	b130      	cbz	r0, 1d34c <nmgr_rsp_frag_alloc+0x20>
        /* Copy the user header from the response into the fragment mbuf. */
        memcpy(OS_MBUF_USRHDR(frag), OS_MBUF_USRHDR(src_rsp),
               OS_MBUF_USRHDR_LEN(src_rsp));
   1d33e:	7962      	ldrb	r2, [r4, #5]
        memcpy(OS_MBUF_USRHDR(frag), OS_MBUF_USRHDR(src_rsp),
   1d340:	3a08      	subs	r2, #8
   1d342:	f104 0118 	add.w	r1, r4, #24
   1d346:	3018      	adds	r0, #24
   1d348:	f7f0 fb4e 	bl	d9e8 <memcpy>
    }

    return frag;
}
   1d34c:	4628      	mov	r0, r5
   1d34e:	bd38      	pop	{r3, r4, r5, pc}

0001d350 <nmgr_init_rsp>:
{
   1d350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d352:	4606      	mov	r6, r0
   1d354:	460d      	mov	r5, r1
    hdr = (struct nmgr_hdr *) os_mbuf_extend(m, sizeof(struct nmgr_hdr));
   1d356:	2108      	movs	r1, #8
   1d358:	f7ed fb56 	bl	aa08 <os_mbuf_extend>
    if (!hdr) {
   1d35c:	4604      	mov	r4, r0
   1d35e:	b318      	cbz	r0, 1d3a8 <nmgr_init_rsp+0x58>
    memcpy(hdr, src, sizeof(*hdr));
   1d360:	682a      	ldr	r2, [r5, #0]
   1d362:	686b      	ldr	r3, [r5, #4]
   1d364:	6002      	str	r2, [r0, #0]
   1d366:	6043      	str	r3, [r0, #4]
    hdr->nh_len = 0;
   1d368:	2300      	movs	r3, #0
   1d36a:	8043      	strh	r3, [r0, #2]
    hdr->nh_flags = 0;
   1d36c:	7043      	strb	r3, [r0, #1]
    hdr->nh_op = (src->nh_op == NMGR_OP_READ) ? NMGR_OP_READ_RSP :
   1d36e:	782b      	ldrb	r3, [r5, #0]
   1d370:	f013 0f07 	tst.w	r3, #7
   1d374:	d11a      	bne.n	1d3ac <nmgr_init_rsp+0x5c>
   1d376:	2201      	movs	r2, #1
   1d378:	7823      	ldrb	r3, [r4, #0]
   1d37a:	f362 0302 	bfi	r3, r2, #0, #3
   1d37e:	7023      	strb	r3, [r4, #0]
    hdr->nh_group = src->nh_group;
   1d380:	88ab      	ldrh	r3, [r5, #4]
   1d382:	80a3      	strh	r3, [r4, #4]
    hdr->nh_seq = src->nh_seq;
   1d384:	79ab      	ldrb	r3, [r5, #6]
   1d386:	71a3      	strb	r3, [r4, #6]
    hdr->nh_id = src->nh_id;
   1d388:	79eb      	ldrb	r3, [r5, #7]
   1d38a:	71e3      	strb	r3, [r4, #7]
    cbor_mbuf_writer_init(&nmgr_task_cbuf.writer, m);
   1d38c:	4d08      	ldr	r5, [pc, #32]	; (1d3b0 <nmgr_init_rsp+0x60>)
   1d38e:	f105 072c 	add.w	r7, r5, #44	; 0x2c
   1d392:	4631      	mov	r1, r6
   1d394:	4638      	mov	r0, r7
   1d396:	f7f5 fd67 	bl	12e68 <cbor_mbuf_writer_init>
    cbor_encoder_init(&nmgr_task_cbuf.n_b.encoder, &nmgr_task_cbuf.writer.enc, 0);
   1d39a:	2200      	movs	r2, #0
   1d39c:	4639      	mov	r1, r7
   1d39e:	f105 000c 	add.w	r0, r5, #12
   1d3a2:	f7f5 fdf6 	bl	12f92 <cbor_encoder_init>
    nmgr_task_cbuf.n_out_m = m;
   1d3a6:	65ee      	str	r6, [r5, #92]	; 0x5c
}
   1d3a8:	4620      	mov	r0, r4
   1d3aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdr->nh_op = (src->nh_op == NMGR_OP_READ) ? NMGR_OP_READ_RSP :
   1d3ac:	2203      	movs	r2, #3
   1d3ae:	e7e3      	b.n	1d378 <nmgr_init_rsp+0x28>
   1d3b0:	200046ac 	.word	0x200046ac

0001d3b4 <nmgr_rsp_tx>:
 * reason for this is to allow the caller to reuse the mbuf for an error
 * response.
 */
static int
nmgr_rsp_tx(struct nmgr_transport *nt, struct os_mbuf **rsp, uint16_t mtu)
{
   1d3b4:	b570      	push	{r4, r5, r6, lr}
   1d3b6:	4605      	mov	r5, r0
   1d3b8:	460c      	mov	r4, r1
   1d3ba:	4616      	mov	r6, r2
    struct os_mbuf *frag;
    int rc;

    while (*rsp != NULL) {
   1d3bc:	6823      	ldr	r3, [r4, #0]
   1d3be:	b16b      	cbz	r3, 1d3dc <nmgr_rsp_tx+0x28>
        frag = mem_split_frag(rsp, mtu, nmgr_rsp_frag_alloc, *rsp);
   1d3c0:	4a08      	ldr	r2, [pc, #32]	; (1d3e4 <nmgr_rsp_tx+0x30>)
   1d3c2:	4631      	mov	r1, r6
   1d3c4:	4620      	mov	r0, r4
   1d3c6:	f7f0 fff1 	bl	e3ac <mem_split_frag>
        if (frag == NULL) {
   1d3ca:	4601      	mov	r1, r0
   1d3cc:	b140      	cbz	r0, 1d3e0 <nmgr_rsp_tx+0x2c>
            return MGMT_ERR_ENOMEM;
        }

        rc = nt->nt_output(nt, frag);
   1d3ce:	69ab      	ldr	r3, [r5, #24]
   1d3d0:	4628      	mov	r0, r5
   1d3d2:	4798      	blx	r3
        if (rc != 0) {
   1d3d4:	2800      	cmp	r0, #0
   1d3d6:	d0f1      	beq.n	1d3bc <nmgr_rsp_tx+0x8>
            /* Output function already freed mbuf. */
            return MGMT_ERR_EUNKNOWN;
   1d3d8:	2001      	movs	r0, #1
   1d3da:	e000      	b.n	1d3de <nmgr_rsp_tx+0x2a>
        }
    }

    return MGMT_ERR_EOK;
   1d3dc:	2000      	movs	r0, #0
}
   1d3de:	bd70      	pop	{r4, r5, r6, pc}
            return MGMT_ERR_ENOMEM;
   1d3e0:	2002      	movs	r0, #2
   1d3e2:	e7fc      	b.n	1d3de <nmgr_rsp_tx+0x2a>
   1d3e4:	0001d32d 	.word	0x0001d32d

0001d3e8 <nmgr_send_err_rsp>:
{
   1d3e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d3ea:	b085      	sub	sp, #20
   1d3ec:	4606      	mov	r6, r0
   1d3ee:	460c      	mov	r4, r1
   1d3f0:	461d      	mov	r5, r3
    hdr = nmgr_init_rsp(m, hdr);
   1d3f2:	4611      	mov	r1, r2
   1d3f4:	4620      	mov	r0, r4
   1d3f6:	f7ff ffab 	bl	1d350 <nmgr_init_rsp>
    if (!hdr) {
   1d3fa:	b148      	cbz	r0, 1d410 <nmgr_send_err_rsp+0x28>
   1d3fc:	4607      	mov	r7, r0
    rc = cbor_encoder_create_map(&nmgr_task_cbuf.n_b.encoder, &map,
   1d3fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d402:	4669      	mov	r1, sp
   1d404:	4811      	ldr	r0, [pc, #68]	; (1d44c <nmgr_send_err_rsp+0x64>)
   1d406:	f7f5 fe90 	bl	1312a <cbor_encoder_create_map>
    if (rc != 0) {
   1d40a:	b128      	cbz	r0, 1d418 <nmgr_send_err_rsp+0x30>
}
   1d40c:	b005      	add	sp, #20
   1d40e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        os_mbuf_free_chain(m);
   1d410:	4620      	mov	r0, r4
   1d412:	f7ed f97e 	bl	a712 <os_mbuf_free_chain>
        return;
   1d416:	e7f9      	b.n	1d40c <nmgr_send_err_rsp+0x24>
    rc = mgmt_cbuf_setoerr(&nmgr_task_cbuf.n_b, status);
   1d418:	4629      	mov	r1, r5
   1d41a:	480d      	ldr	r0, [pc, #52]	; (1d450 <nmgr_send_err_rsp+0x68>)
   1d41c:	f7ff ff72 	bl	1d304 <mgmt_cbuf_setoerr>
    if (rc != 0) {
   1d420:	2800      	cmp	r0, #0
   1d422:	d1f3      	bne.n	1d40c <nmgr_send_err_rsp+0x24>
    rc = cbor_encoder_close_container(&nmgr_task_cbuf.n_b.encoder, &map);
   1d424:	4669      	mov	r1, sp
   1d426:	4809      	ldr	r0, [pc, #36]	; (1d44c <nmgr_send_err_rsp+0x64>)
   1d428:	f7f5 fe8d 	bl	13146 <cbor_encoder_close_container>
    if (rc != 0) {
   1d42c:	2800      	cmp	r0, #0
   1d42e:	d1ed      	bne.n	1d40c <nmgr_send_err_rsp+0x24>
{   return encoder->writer->bytes_written; }
   1d430:	4907      	ldr	r1, [pc, #28]	; (1d450 <nmgr_send_err_rsp+0x68>)
   1d432:	68cb      	ldr	r3, [r1, #12]
   1d434:	685a      	ldr	r2, [r3, #4]
        htons(cbor_encode_bytes_written(&nmgr_task_cbuf.n_b.encoder));
   1d436:	0213      	lsls	r3, r2, #8
   1d438:	b29b      	uxth	r3, r3
   1d43a:	f3c2 2207 	ubfx	r2, r2, #8, #8
   1d43e:	4313      	orrs	r3, r2
    hdr->nh_len =
   1d440:	807b      	strh	r3, [r7, #2]
    nt->nt_output(nt, nmgr_task_cbuf.n_out_m);
   1d442:	69b3      	ldr	r3, [r6, #24]
   1d444:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
   1d446:	4630      	mov	r0, r6
   1d448:	4798      	blx	r3
   1d44a:	e7df      	b.n	1d40c <nmgr_send_err_rsp+0x24>
   1d44c:	200046b8 	.word	0x200046b8
   1d450:	200046ac 	.word	0x200046ac

0001d454 <nmgr_handle_req>:

static void
nmgr_handle_req(struct nmgr_transport *nt, struct os_mbuf *req)
{
   1d454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d458:	b088      	sub	sp, #32
   1d45a:	4606      	mov	r6, r0
   1d45c:	460c      	mov	r4, r1
    uint16_t mtu;
    int rc;

    rsp_hdr = NULL;

    rsp = os_msys_get_pkthdr(512, OS_MBUF_USRHDR_LEN(req));
   1d45e:	7949      	ldrb	r1, [r1, #5]
   1d460:	3908      	subs	r1, #8
   1d462:	b289      	uxth	r1, r1
   1d464:	f44f 7000 	mov.w	r0, #512	; 0x200
   1d468:	f7ec faea 	bl	9a40 <os_msys_get_pkthdr>
   1d46c:	9007      	str	r0, [sp, #28]
    if (!rsp) {
   1d46e:	b168      	cbz	r0, 1d48c <nmgr_handle_req+0x38>
        rsp = req;
        req = NULL;
        goto err;
    }

    mtu = nt->nt_get_mtu(req);
   1d470:	69f3      	ldr	r3, [r6, #28]
   1d472:	4620      	mov	r0, r4
   1d474:	4798      	blx	r3
    if (mtu == 0) {
   1d476:	4605      	mov	r5, r0
   1d478:	bb08      	cbnz	r0, 1d4be <nmgr_handle_req+0x6a>
    nmgr_send_err_rsp(nt, rsp, &hdr, rc);
    os_mbuf_free_chain(req);
    return;

err_norsp:
    os_mbuf_free_chain(rsp);
   1d47a:	9807      	ldr	r0, [sp, #28]
   1d47c:	f7ed f949 	bl	a712 <os_mbuf_free_chain>
    os_mbuf_free_chain(req);
   1d480:	4620      	mov	r0, r4
   1d482:	f7ed f946 	bl	a712 <os_mbuf_free_chain>
    return;
}
   1d486:	b008      	add	sp, #32
   1d488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d48c:	4605      	mov	r5, r0
        rc = os_mbuf_copydata(req, 0, sizeof(hdr), &hdr);
   1d48e:	ab01      	add	r3, sp, #4
   1d490:	2208      	movs	r2, #8
   1d492:	2100      	movs	r1, #0
   1d494:	4620      	mov	r0, r4
   1d496:	f7ed f9b2 	bl	a7fe <os_mbuf_copydata>
        if (rc < 0) {
   1d49a:	1e07      	subs	r7, r0, #0
   1d49c:	dbed      	blt.n	1d47a <nmgr_handle_req+0x26>
        rsp = req;
   1d49e:	9407      	str	r4, [sp, #28]
        req = NULL;
   1d4a0:	462c      	mov	r4, r5
    os_mbuf_adj(rsp, OS_MBUF_PKTLEN(rsp));
   1d4a2:	9807      	ldr	r0, [sp, #28]
   1d4a4:	8a01      	ldrh	r1, [r0, #16]
   1d4a6:	f7ed f9d7 	bl	a858 <os_mbuf_adj>
    nmgr_send_err_rsp(nt, rsp, &hdr, rc);
   1d4aa:	463b      	mov	r3, r7
   1d4ac:	aa01      	add	r2, sp, #4
   1d4ae:	9907      	ldr	r1, [sp, #28]
   1d4b0:	4630      	mov	r0, r6
   1d4b2:	f7ff ff99 	bl	1d3e8 <nmgr_send_err_rsp>
    os_mbuf_free_chain(req);
   1d4b6:	4620      	mov	r0, r4
   1d4b8:	f7ed f92b 	bl	a712 <os_mbuf_free_chain>
    return;
   1d4bc:	e7e3      	b.n	1d486 <nmgr_handle_req+0x32>
    memcpy(OS_MBUF_USRHDR(rsp), OS_MBUF_USRHDR(req), OS_MBUF_USRHDR_LEN(req));
   1d4be:	7962      	ldrb	r2, [r4, #5]
   1d4c0:	3a08      	subs	r2, #8
   1d4c2:	f104 0118 	add.w	r1, r4, #24
   1d4c6:	9807      	ldr	r0, [sp, #28]
   1d4c8:	3018      	adds	r0, #24
   1d4ca:	f7f0 fa8d 	bl	d9e8 <memcpy>
    rc = os_mbuf_copydata(req, 0, sizeof(hdr), &hdr);
   1d4ce:	ab01      	add	r3, sp, #4
   1d4d0:	2208      	movs	r2, #8
   1d4d2:	2100      	movs	r1, #0
   1d4d4:	4620      	mov	r0, r4
   1d4d6:	f7ed f992 	bl	a7fe <os_mbuf_copydata>
    if (rc < 0) {
   1d4da:	2800      	cmp	r0, #0
   1d4dc:	dbcd      	blt.n	1d47a <nmgr_handle_req+0x26>
    hdr.nh_len = ntohs(hdr.nh_len);
   1d4de:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1d4e2:	0213      	lsls	r3, r2, #8
   1d4e4:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   1d4e8:	f8ad 3006 	strh.w	r3, [sp, #6]
    handler = mgmt_find_handler(ntohs(hdr.nh_group), hdr.nh_id);
   1d4ec:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1d4f0:	0218      	lsls	r0, r3, #8
   1d4f2:	ea40 2013 	orr.w	r0, r0, r3, lsr #8
   1d4f6:	f89d 100b 	ldrb.w	r1, [sp, #11]
   1d4fa:	b280      	uxth	r0, r0
   1d4fc:	f7ff fef2 	bl	1d2e4 <mgmt_find_handler>
    if (!handler) {
   1d500:	4680      	mov	r8, r0
   1d502:	2800      	cmp	r0, #0
   1d504:	d062      	beq.n	1d5cc <nmgr_handle_req+0x178>
    rsp_hdr = nmgr_init_rsp(rsp, &hdr);
   1d506:	a901      	add	r1, sp, #4
   1d508:	9807      	ldr	r0, [sp, #28]
   1d50a:	f7ff ff21 	bl	1d350 <nmgr_init_rsp>
    if (!rsp_hdr) {
   1d50e:	4681      	mov	r9, r0
   1d510:	2800      	cmp	r0, #0
   1d512:	d0b2      	beq.n	1d47a <nmgr_handle_req+0x26>
    cbor_mbuf_reader_init(&nmgr_task_cbuf.reader, req, sizeof(hdr));
   1d514:	4f2f      	ldr	r7, [pc, #188]	; (1d5d4 <nmgr_handle_req+0x180>)
   1d516:	f107 0a38 	add.w	sl, r7, #56	; 0x38
   1d51a:	2208      	movs	r2, #8
   1d51c:	4621      	mov	r1, r4
   1d51e:	4650      	mov	r0, sl
   1d520:	f7f5 fc6a 	bl	12df8 <cbor_mbuf_reader_init>
    cbor_parser_init(&nmgr_task_cbuf.reader.r, 0,
   1d524:	f107 031c 	add.w	r3, r7, #28
   1d528:	463a      	mov	r2, r7
   1d52a:	2100      	movs	r1, #0
   1d52c:	4650      	mov	r0, sl
   1d52e:	f7f6 f89a 	bl	13666 <cbor_parser_init>
    rc = cbor_encoder_create_map(&nmgr_task_cbuf.n_b.encoder, &payload_enc,
   1d532:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d536:	a903      	add	r1, sp, #12
   1d538:	f107 000c 	add.w	r0, r7, #12
   1d53c:	f7f5 fdf5 	bl	1312a <cbor_encoder_create_map>
    if (rc != 0) {
   1d540:	2800      	cmp	r0, #0
   1d542:	d145      	bne.n	1d5d0 <nmgr_handle_req+0x17c>
    if (hdr.nh_op == NMGR_OP_READ) {
   1d544:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1d548:	f013 0307 	ands.w	r3, r3, #7
   1d54c:	d10e      	bne.n	1d56c <nmgr_handle_req+0x118>
        if (handler->mh_read) {
   1d54e:	f8d8 3000 	ldr.w	r3, [r8]
   1d552:	b1a3      	cbz	r3, 1d57e <nmgr_handle_req+0x12a>
            rc = handler->mh_read(&nmgr_task_cbuf.n_b);
   1d554:	4638      	mov	r0, r7
   1d556:	4798      	blx	r3
   1d558:	4607      	mov	r7, r0
    if (rc != 0) {
   1d55a:	2f00      	cmp	r7, #0
   1d55c:	d1a1      	bne.n	1d4a2 <nmgr_handle_req+0x4e>
    rc = cbor_encoder_close_container(&nmgr_task_cbuf.n_b.encoder,
   1d55e:	a903      	add	r1, sp, #12
   1d560:	481d      	ldr	r0, [pc, #116]	; (1d5d8 <nmgr_handle_req+0x184>)
   1d562:	f7f5 fdf0 	bl	13146 <cbor_encoder_close_container>
    if (rc != 0) {
   1d566:	b180      	cbz	r0, 1d58a <nmgr_handle_req+0x136>
        rc = MGMT_ERR_ENOMEM;
   1d568:	2702      	movs	r7, #2
   1d56a:	e79a      	b.n	1d4a2 <nmgr_handle_req+0x4e>
    } else if (hdr.nh_op == NMGR_OP_WRITE) {
   1d56c:	2b02      	cmp	r3, #2
   1d56e:	d108      	bne.n	1d582 <nmgr_handle_req+0x12e>
        if (handler->mh_write) {
   1d570:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1d574:	b13b      	cbz	r3, 1d586 <nmgr_handle_req+0x132>
            rc = handler->mh_write(&nmgr_task_cbuf.n_b);
   1d576:	4817      	ldr	r0, [pc, #92]	; (1d5d4 <nmgr_handle_req+0x180>)
   1d578:	4798      	blx	r3
   1d57a:	4607      	mov	r7, r0
   1d57c:	e7ed      	b.n	1d55a <nmgr_handle_req+0x106>
            rc = MGMT_ERR_ENOENT;
   1d57e:	2705      	movs	r7, #5
   1d580:	e78f      	b.n	1d4a2 <nmgr_handle_req+0x4e>
        rc = MGMT_ERR_EINVAL;
   1d582:	2703      	movs	r7, #3
   1d584:	e78d      	b.n	1d4a2 <nmgr_handle_req+0x4e>
            rc = MGMT_ERR_ENOENT;
   1d586:	2705      	movs	r7, #5
        goto err;
   1d588:	e78b      	b.n	1d4a2 <nmgr_handle_req+0x4e>
   1d58a:	4b12      	ldr	r3, [pc, #72]	; (1d5d4 <nmgr_handle_req+0x180>)
   1d58c:	68db      	ldr	r3, [r3, #12]
   1d58e:	685b      	ldr	r3, [r3, #4]
    rsp_hdr->nh_len += cbor_encode_bytes_written(&nmgr_task_cbuf.n_b.encoder);
   1d590:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   1d594:	4413      	add	r3, r2
   1d596:	b29b      	uxth	r3, r3
   1d598:	f8a9 3002 	strh.w	r3, [r9, #2]
    rsp_hdr->nh_len = htons(rsp_hdr->nh_len);
   1d59c:	021a      	lsls	r2, r3, #8
   1d59e:	ea42 2313 	orr.w	r3, r2, r3, lsr #8
   1d5a2:	f8a9 3002 	strh.w	r3, [r9, #2]
    rc = nmgr_rsp_tx(nt, &rsp, mtu);
   1d5a6:	462a      	mov	r2, r5
   1d5a8:	a907      	add	r1, sp, #28
   1d5aa:	4630      	mov	r0, r6
   1d5ac:	f7ff ff02 	bl	1d3b4 <nmgr_rsp_tx>
    if (rc) {
   1d5b0:	4607      	mov	r7, r0
   1d5b2:	b120      	cbz	r0, 1d5be <nmgr_handle_req+0x16a>
        if (rsp == NULL) {
   1d5b4:	9b07      	ldr	r3, [sp, #28]
   1d5b6:	2b00      	cmp	r3, #0
   1d5b8:	f47f af73 	bne.w	1d4a2 <nmgr_handle_req+0x4e>
   1d5bc:	e75d      	b.n	1d47a <nmgr_handle_req+0x26>
    os_mbuf_free_chain(rsp);
   1d5be:	9807      	ldr	r0, [sp, #28]
   1d5c0:	f7ed f8a7 	bl	a712 <os_mbuf_free_chain>
    os_mbuf_free_chain(req);
   1d5c4:	4620      	mov	r0, r4
   1d5c6:	f7ed f8a4 	bl	a712 <os_mbuf_free_chain>
    return;
   1d5ca:	e75c      	b.n	1d486 <nmgr_handle_req+0x32>
        rc = MGMT_ERR_ENOENT;
   1d5cc:	2705      	movs	r7, #5
   1d5ce:	e768      	b.n	1d4a2 <nmgr_handle_req+0x4e>
        rc = MGMT_ERR_ENOMEM;
   1d5d0:	2702      	movs	r7, #2
   1d5d2:	e766      	b.n	1d4a2 <nmgr_handle_req+0x4e>
   1d5d4:	200046ac 	.word	0x200046ac
   1d5d8:	200046b8 	.word	0x200046b8

0001d5dc <nmgr_process>:


static void
nmgr_process(struct nmgr_transport *nt)
{
   1d5dc:	b510      	push	{r4, lr}
   1d5de:	4604      	mov	r4, r0
   1d5e0:	e002      	b.n	1d5e8 <nmgr_process+0xc>
        m = os_mqueue_get(&nt->nt_imq);
        if (!m) {
            break;
        }

        nmgr_handle_req(nt, m);
   1d5e2:	4620      	mov	r0, r4
   1d5e4:	f7ff ff36 	bl	1d454 <nmgr_handle_req>
        m = os_mqueue_get(&nt->nt_imq);
   1d5e8:	4620      	mov	r0, r4
   1d5ea:	f7ed f828 	bl	a63e <os_mqueue_get>
        if (!m) {
   1d5ee:	4601      	mov	r1, r0
   1d5f0:	2800      	cmp	r0, #0
   1d5f2:	d1f6      	bne.n	1d5e2 <nmgr_process+0x6>
    }
}
   1d5f4:	bd10      	pop	{r4, pc}

0001d5f6 <nmgr_event_data_in>:

static void
nmgr_event_data_in(struct os_event *ev)
{
   1d5f6:	b508      	push	{r3, lr}
    nmgr_process(ev->ev_arg);
   1d5f8:	6880      	ldr	r0, [r0, #8]
   1d5fa:	f7ff ffef 	bl	1d5dc <nmgr_process>
}
   1d5fe:	bd08      	pop	{r3, pc}

0001d600 <nmgr_cbuf_init>:
{
   1d600:	b508      	push	{r3, lr}
    memset(njb, 0, sizeof(*njb));
   1d602:	2260      	movs	r2, #96	; 0x60
   1d604:	2100      	movs	r1, #0
   1d606:	f7f0 f9fc 	bl	da02 <memset>
}
   1d60a:	2000      	movs	r0, #0
   1d60c:	bd08      	pop	{r3, pc}
	...

0001d610 <mgmt_evq_get>:
}
   1d610:	4b01      	ldr	r3, [pc, #4]	; (1d618 <mgmt_evq_get+0x8>)
   1d612:	6818      	ldr	r0, [r3, #0]
   1d614:	4770      	bx	lr
   1d616:	bf00      	nop
   1d618:	200046a8 	.word	0x200046a8

0001d61c <mgmt_evq_set>:
    nmgr_evq = evq;
   1d61c:	4b01      	ldr	r3, [pc, #4]	; (1d624 <mgmt_evq_set+0x8>)
   1d61e:	6018      	str	r0, [r3, #0]
}
   1d620:	4770      	bx	lr
   1d622:	bf00      	nop
   1d624:	200046a8 	.word	0x200046a8

0001d628 <nmgr_transport_init>:

int
nmgr_transport_init(struct nmgr_transport *nt,
        nmgr_transport_out_func_t output_func,
        nmgr_transport_get_mtu_func_t get_mtu_func)
{
   1d628:	b508      	push	{r3, lr}
    int rc;

    nt->nt_output = output_func;
   1d62a:	6181      	str	r1, [r0, #24]
    nt->nt_get_mtu = get_mtu_func;
   1d62c:	61c2      	str	r2, [r0, #28]

    rc = os_mqueue_init(&nt->nt_imq, nmgr_event_data_in, nt);
   1d62e:	4602      	mov	r2, r0
   1d630:	4901      	ldr	r1, [pc, #4]	; (1d638 <nmgr_transport_init+0x10>)
   1d632:	f7ec fff9 	bl	a628 <os_mqueue_init>
    }

    return (0);
err:
    return (rc);
}
   1d636:	bd08      	pop	{r3, pc}
   1d638:	0001d5f7 	.word	0x0001d5f7

0001d63c <nmgr_rx_req>:
 *
 * @return                      0 on success; nonzero on failure.
 */
int
nmgr_rx_req(struct nmgr_transport *nt, struct os_mbuf *req)
{
   1d63c:	b538      	push	{r3, r4, r5, lr}
   1d63e:	4605      	mov	r5, r0
   1d640:	460c      	mov	r4, r1
    int rc;

    rc = os_mqueue_put(&nt->nt_imq, mgmt_evq_get(), req);
   1d642:	f7ff ffe5 	bl	1d610 <mgmt_evq_get>
   1d646:	4601      	mov	r1, r0
   1d648:	4622      	mov	r2, r4
   1d64a:	4628      	mov	r0, r5
   1d64c:	f7ed f808 	bl	a660 <os_mqueue_put>
    if (rc != 0) {
   1d650:	4605      	mov	r5, r0
   1d652:	b908      	cbnz	r0, 1d658 <nmgr_rx_req+0x1c>
        os_mbuf_free_chain(req);
    }

    return rc;
}
   1d654:	4628      	mov	r0, r5
   1d656:	bd38      	pop	{r3, r4, r5, pc}
        os_mbuf_free_chain(req);
   1d658:	4620      	mov	r0, r4
   1d65a:	f7ed f85a 	bl	a712 <os_mbuf_free_chain>
    return rc;
   1d65e:	e7f9      	b.n	1d654 <nmgr_rx_req+0x18>

0001d660 <nmgr_pkg_init>:

void
nmgr_pkg_init(void)
{
   1d660:	b510      	push	{r4, lr}
   1d662:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1d664:	4b0d      	ldr	r3, [pc, #52]	; (1d69c <nmgr_pkg_init+0x3c>)
   1d666:	781b      	ldrb	r3, [r3, #0]
   1d668:	b19b      	cbz	r3, 1d692 <nmgr_pkg_init+0x32>

    rc = nmgr_os_groups_register();
   1d66a:	f000 fa79 	bl	1db60 <nmgr_os_groups_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1d66e:	b138      	cbz	r0, 1d680 <nmgr_pkg_init+0x20>
   1d670:	2000      	movs	r0, #0
   1d672:	9000      	str	r0, [sp, #0]
   1d674:	4b0a      	ldr	r3, [pc, #40]	; (1d6a0 <nmgr_pkg_init+0x40>)
   1d676:	681c      	ldr	r4, [r3, #0]
   1d678:	4603      	mov	r3, r0
   1d67a:	4602      	mov	r2, r0
   1d67c:	4601      	mov	r1, r0
   1d67e:	47a0      	blx	r4

    nmgr_cbuf_init(&nmgr_task_cbuf);
   1d680:	4808      	ldr	r0, [pc, #32]	; (1d6a4 <nmgr_pkg_init+0x44>)
   1d682:	f7ff ffbd 	bl	1d600 <nmgr_cbuf_init>

    mgmt_evq_set(os_eventq_dflt_get());
   1d686:	f7ec f8c3 	bl	9810 <os_eventq_dflt_get>
   1d68a:	f7ff ffc7 	bl	1d61c <mgmt_evq_set>
}
   1d68e:	b002      	add	sp, #8
   1d690:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1d692:	461a      	mov	r2, r3
   1d694:	4619      	mov	r1, r3
   1d696:	4618      	mov	r0, r3
   1d698:	f7eb fcd8 	bl	904c <__assert_func>
   1d69c:	20004548 	.word	0x20004548
   1d6a0:	2000064c 	.word	0x2000064c
   1d6a4:	200046ac 	.word	0x200046ac

0001d6a8 <nmgr_reset>:
    os_reboot(HAL_RESET_REQUESTED);
}

static int
nmgr_reset(struct mgmt_cbuf *cb)
{
   1d6a8:	b570      	push	{r4, r5, r6, lr}
   1d6aa:	b084      	sub	sp, #16
   1d6ac:	4605      	mov	r5, r0
#if MYNEWT_VAL(LOG_SOFT_RESET)
    struct log_reboot_info info;
#endif
    int rc;

    os_callout_init(&nmgr_reset_callout, mgmt_evq_get(), nmgr_reset_tmo, NULL);
   1d6ae:	f7ff ffaf 	bl	1d610 <mgmt_evq_get>
   1d6b2:	4601      	mov	r1, r0
   1d6b4:	4e0e      	ldr	r6, [pc, #56]	; (1d6f0 <nmgr_reset+0x48>)
   1d6b6:	2300      	movs	r3, #0
   1d6b8:	4a0e      	ldr	r2, [pc, #56]	; (1d6f4 <nmgr_reset+0x4c>)
   1d6ba:	4630      	mov	r0, r6
   1d6bc:	f7eb fe54 	bl	9368 <os_callout_init>

#if MYNEWT_VAL(LOG_SOFT_RESET)
    info = (struct log_reboot_info) {
   1d6c0:	2306      	movs	r3, #6
   1d6c2:	f88d 3000 	strb.w	r3, [sp]
   1d6c6:	2400      	movs	r4, #0
   1d6c8:	9401      	str	r4, [sp, #4]
   1d6ca:	9402      	str	r4, [sp, #8]
   1d6cc:	9403      	str	r4, [sp, #12]
        .reason = HAL_RESET_REQUESTED,
        .file = NULL,
        .line = 0,
        .pc = 0,
    };
    log_reboot(&info);
   1d6ce:	4668      	mov	r0, sp
   1d6d0:	f002 f8d2 	bl	1f878 <log_reboot>
#endif
    os_callout_reset(&nmgr_reset_callout, OS_TICKS_PER_SEC / 4);
   1d6d4:	2120      	movs	r1, #32
   1d6d6:	4630      	mov	r0, r6
   1d6d8:	f7eb fe72 	bl	93c0 <os_callout_reset>

    rc = mgmt_cbuf_setoerr(cb, 0);
   1d6dc:	4621      	mov	r1, r4
   1d6de:	4628      	mov	r0, r5
   1d6e0:	f7ff fe10 	bl	1d304 <mgmt_cbuf_setoerr>
    if (rc != 0) {
   1d6e4:	b908      	cbnz	r0, 1d6ea <nmgr_reset+0x42>
        return MGMT_ERR_EUNKNOWN;
    }

    return 0;
}
   1d6e6:	b004      	add	sp, #16
   1d6e8:	bd70      	pop	{r4, r5, r6, pc}
        return MGMT_ERR_EUNKNOWN;
   1d6ea:	2001      	movs	r0, #1
   1d6ec:	e7fb      	b.n	1d6e6 <nmgr_reset+0x3e>
   1d6ee:	bf00      	nop
   1d6f0:	2000470c 	.word	0x2000470c
   1d6f4:	0001d6f9 	.word	0x0001d6f9

0001d6f8 <nmgr_reset_tmo>:
{
   1d6f8:	b508      	push	{r3, lr}
    os_reboot(HAL_RESET_REQUESTED);
   1d6fa:	2006      	movs	r0, #6
   1d6fc:	f7eb fe0f 	bl	931e <os_reboot>
}
   1d700:	bd08      	pop	{r3, pc}
	...

0001d704 <nmgr_datetime_set>:
{
   1d704:	b510      	push	{r4, lr}
   1d706:	b0a6      	sub	sp, #152	; 0x98
   1d708:	4604      	mov	r4, r0
    const struct cbor_attr_t datetime_write_attr[] = {
   1d70a:	2260      	movs	r2, #96	; 0x60
   1d70c:	2100      	movs	r1, #0
   1d70e:	4668      	mov	r0, sp
   1d710:	f7f0 f977 	bl	da02 <memset>
   1d714:	4b12      	ldr	r3, [pc, #72]	; (1d760 <nmgr_datetime_set+0x5c>)
   1d716:	9300      	str	r3, [sp, #0]
   1d718:	2304      	movs	r3, #4
   1d71a:	f88d 3004 	strb.w	r3, [sp, #4]
   1d71e:	ab18      	add	r3, sp, #96	; 0x60
   1d720:	9302      	str	r3, [sp, #8]
   1d722:	2321      	movs	r3, #33	; 0x21
   1d724:	930a      	str	r3, [sp, #40]	; 0x28
    rc = cbor_read_object(&cb->it, datetime_write_attr);
   1d726:	4669      	mov	r1, sp
   1d728:	f104 001c 	add.w	r0, r4, #28
   1d72c:	f7f5 fb0a 	bl	12d44 <cbor_read_object>
    if (rc) {
   1d730:	b978      	cbnz	r0, 1d752 <nmgr_datetime_set+0x4e>
    rc = datetime_parse(buf, &tv, &tz);
   1d732:	aa21      	add	r2, sp, #132	; 0x84
   1d734:	a922      	add	r1, sp, #136	; 0x88
   1d736:	a818      	add	r0, sp, #96	; 0x60
   1d738:	f7f4 fc68 	bl	1200c <datetime_parse>
    if (!rc) {
   1d73c:	b960      	cbnz	r0, 1d758 <nmgr_datetime_set+0x54>
        rc = os_settimeofday(&tv, &tz);
   1d73e:	a921      	add	r1, sp, #132	; 0x84
   1d740:	a822      	add	r0, sp, #136	; 0x88
   1d742:	f7ec fdfd 	bl	a340 <os_settimeofday>
        if (rc) {
   1d746:	b948      	cbnz	r0, 1d75c <nmgr_datetime_set+0x58>
    rc = mgmt_cbuf_setoerr(cb, 0);
   1d748:	2100      	movs	r1, #0
   1d74a:	4620      	mov	r0, r4
   1d74c:	f7ff fdda 	bl	1d304 <mgmt_cbuf_setoerr>
    if (rc != 0) {
   1d750:	e000      	b.n	1d754 <nmgr_datetime_set+0x50>
        return MGMT_ERR_EINVAL;
   1d752:	2003      	movs	r0, #3
}
   1d754:	b026      	add	sp, #152	; 0x98
   1d756:	bd10      	pop	{r4, pc}
        return MGMT_ERR_EINVAL;
   1d758:	2003      	movs	r0, #3
   1d75a:	e7fb      	b.n	1d754 <nmgr_datetime_set+0x50>
          return MGMT_ERR_EINVAL;
   1d75c:	2003      	movs	r0, #3
   1d75e:	e7f9      	b.n	1d754 <nmgr_datetime_set+0x50>
   1d760:	000249d4 	.word	0x000249d4

0001d764 <nmgr_def_console_echo>:
{
   1d764:	b510      	push	{r4, lr}
   1d766:	b09a      	sub	sp, #104	; 0x68
   1d768:	4604      	mov	r4, r0
    long long int echo_on = 1;
   1d76a:	2201      	movs	r2, #1
   1d76c:	2300      	movs	r3, #0
   1d76e:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    struct cbor_attr_t attrs[2] = {
   1d772:	2260      	movs	r2, #96	; 0x60
   1d774:	2100      	movs	r1, #0
   1d776:	4668      	mov	r0, sp
   1d778:	f7f0 f943 	bl	da02 <memset>
   1d77c:	4b0f      	ldr	r3, [pc, #60]	; (1d7bc <nmgr_def_console_echo+0x58>)
   1d77e:	9300      	str	r3, [sp, #0]
   1d780:	2301      	movs	r3, #1
   1d782:	f88d 3004 	strb.w	r3, [sp, #4]
   1d786:	aa18      	add	r2, sp, #96	; 0x60
   1d788:	9202      	str	r2, [sp, #8]
   1d78a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    rc = cbor_read_object(&cb->it, attrs);
   1d78e:	4669      	mov	r1, sp
   1d790:	f104 001c 	add.w	r0, r4, #28
   1d794:	f7f5 fad6 	bl	12d44 <cbor_read_object>
    if (rc) {
   1d798:	b970      	cbnz	r0, 1d7b8 <nmgr_def_console_echo+0x54>
   1d79a:	4604      	mov	r4, r0
    if (echo_on) {
   1d79c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1d79e:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1d7a0:	4313      	orrs	r3, r2
   1d7a2:	d005      	beq.n	1d7b0 <nmgr_def_console_echo+0x4c>
        console_echo(1);
   1d7a4:	2001      	movs	r0, #1
   1d7a6:	f7f1 fcd1 	bl	f14c <console_echo>
}
   1d7aa:	4620      	mov	r0, r4
   1d7ac:	b01a      	add	sp, #104	; 0x68
   1d7ae:	bd10      	pop	{r4, pc}
        console_echo(0);
   1d7b0:	2000      	movs	r0, #0
   1d7b2:	f7f1 fccb 	bl	f14c <console_echo>
   1d7b6:	e7f8      	b.n	1d7aa <nmgr_def_console_echo+0x46>
        return MGMT_ERR_EINVAL;
   1d7b8:	2403      	movs	r4, #3
   1d7ba:	e7f6      	b.n	1d7aa <nmgr_def_console_echo+0x46>
   1d7bc:	000249e0 	.word	0x000249e0

0001d7c0 <nmgr_def_echo>:
{
   1d7c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d7c2:	b0b9      	sub	sp, #228	; 0xe4
   1d7c4:	4604      	mov	r4, r0
    char echo_buf[128] = {'\0'};
   1d7c6:	2500      	movs	r5, #0
   1d7c8:	9518      	str	r5, [sp, #96]	; 0x60
   1d7ca:	227c      	movs	r2, #124	; 0x7c
   1d7cc:	4629      	mov	r1, r5
   1d7ce:	a819      	add	r0, sp, #100	; 0x64
   1d7d0:	f7f0 f917 	bl	da02 <memset>
    struct cbor_attr_t attrs[2] = {
   1d7d4:	2260      	movs	r2, #96	; 0x60
   1d7d6:	4629      	mov	r1, r5
   1d7d8:	4668      	mov	r0, sp
   1d7da:	f7f0 f912 	bl	da02 <memset>
   1d7de:	4b14      	ldr	r3, [pc, #80]	; (1d830 <nmgr_def_echo+0x70>)
   1d7e0:	9300      	str	r3, [sp, #0]
   1d7e2:	2304      	movs	r3, #4
   1d7e4:	f88d 3004 	strb.w	r3, [sp, #4]
   1d7e8:	ad18      	add	r5, sp, #96	; 0x60
   1d7ea:	9502      	str	r5, [sp, #8]
   1d7ec:	2380      	movs	r3, #128	; 0x80
   1d7ee:	930a      	str	r3, [sp, #40]	; 0x28
   1d7f0:	2201      	movs	r2, #1
   1d7f2:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
    g_err |= cbor_encode_text_stringz(&cb->encoder, "r");
   1d7f6:	f104 070c 	add.w	r7, r4, #12
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1d7fa:	490e      	ldr	r1, [pc, #56]	; (1d834 <nmgr_def_echo+0x74>)
   1d7fc:	4638      	mov	r0, r7
   1d7fe:	f7f5 fc88 	bl	13112 <cbor_encode_text_string>
   1d802:	4606      	mov	r6, r0
    g_err |= cbor_read_object(&cb->it, attrs);
   1d804:	4669      	mov	r1, sp
   1d806:	f104 001c 	add.w	r0, r4, #28
   1d80a:	f7f5 fa9b 	bl	12d44 <cbor_read_object>
   1d80e:	4306      	orrs	r6, r0
    g_err |= cbor_encode_text_string(&cb->encoder, echo_buf, strlen(echo_buf));
   1d810:	4628      	mov	r0, r5
   1d812:	f7f0 f92d 	bl	da70 <strlen>
   1d816:	4602      	mov	r2, r0
   1d818:	4629      	mov	r1, r5
   1d81a:	4638      	mov	r0, r7
   1d81c:	f7f5 fc79 	bl	13112 <cbor_encode_text_string>
    if (g_err) {
   1d820:	ea56 0300 	orrs.w	r3, r6, r0
   1d824:	d102      	bne.n	1d82c <nmgr_def_echo+0x6c>
    return (0);
   1d826:	2000      	movs	r0, #0
}
   1d828:	b039      	add	sp, #228	; 0xe4
   1d82a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return MGMT_ERR_ENOMEM;
   1d82c:	2002      	movs	r0, #2
   1d82e:	e7fb      	b.n	1d828 <nmgr_def_echo+0x68>
   1d830:	00022cb8 	.word	0x00022cb8
   1d834:	00024448 	.word	0x00024448

0001d838 <nmgr_datetime_get>:
{
   1d838:	b570      	push	{r4, r5, r6, lr}
   1d83a:	b08e      	sub	sp, #56	; 0x38
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1d83c:	f100 040c 	add.w	r4, r0, #12
   1d840:	2202      	movs	r2, #2
   1d842:	491b      	ldr	r1, [pc, #108]	; (1d8b0 <nmgr_datetime_get+0x78>)
   1d844:	4620      	mov	r0, r4
   1d846:	f7f5 fc64 	bl	13112 <cbor_encode_text_string>
   1d84a:	4605      	mov	r5, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1d84c:	2200      	movs	r2, #0
   1d84e:	2300      	movs	r3, #0
   1d850:	4620      	mov	r0, r4
   1d852:	f7f5 fbe3 	bl	1301c <cbor_encode_int>
   1d856:	4305      	orrs	r5, r0
    rc = os_gettimeofday(&tv, &tz);
   1d858:	a909      	add	r1, sp, #36	; 0x24
   1d85a:	a80a      	add	r0, sp, #40	; 0x28
   1d85c:	f7ec fd24 	bl	a2a8 <os_gettimeofday>
    assert(rc == 0);
   1d860:	b9d8      	cbnz	r0, 1d89a <nmgr_datetime_get+0x62>
    rc = datetime_format(&tv, &tz, buf, DATETIME_BUFSIZE);
   1d862:	2321      	movs	r3, #33	; 0x21
   1d864:	466a      	mov	r2, sp
   1d866:	a909      	add	r1, sp, #36	; 0x24
   1d868:	a80a      	add	r0, sp, #40	; 0x28
   1d86a:	f7f4 fccf 	bl	1220c <datetime_format>
    if (rc) {
   1d86e:	4606      	mov	r6, r0
   1d870:	b9c8      	cbnz	r0, 1d8a6 <nmgr_datetime_get+0x6e>
   1d872:	2208      	movs	r2, #8
   1d874:	490f      	ldr	r1, [pc, #60]	; (1d8b4 <nmgr_datetime_get+0x7c>)
   1d876:	4620      	mov	r0, r4
   1d878:	f7f5 fc4b 	bl	13112 <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "datetime");
   1d87c:	4305      	orrs	r5, r0
   1d87e:	4668      	mov	r0, sp
   1d880:	f7f0 f8f6 	bl	da70 <strlen>
   1d884:	4602      	mov	r2, r0
   1d886:	4669      	mov	r1, sp
   1d888:	4620      	mov	r0, r4
   1d88a:	f7f5 fc42 	bl	13112 <cbor_encode_text_string>
    if (g_err) {
   1d88e:	ea55 0300 	orrs.w	r3, r5, r0
   1d892:	d10a      	bne.n	1d8aa <nmgr_datetime_get+0x72>
}
   1d894:	4630      	mov	r0, r6
   1d896:	b00e      	add	sp, #56	; 0x38
   1d898:	bd70      	pop	{r4, r5, r6, pc}
    assert(rc == 0);
   1d89a:	2300      	movs	r3, #0
   1d89c:	461a      	mov	r2, r3
   1d89e:	4619      	mov	r1, r3
   1d8a0:	4618      	mov	r0, r3
   1d8a2:	f7eb fbd3 	bl	904c <__assert_func>
    return (rc);
   1d8a6:	2603      	movs	r6, #3
   1d8a8:	e7f4      	b.n	1d894 <nmgr_datetime_get+0x5c>
        return MGMT_ERR_ENOMEM;
   1d8aa:	2602      	movs	r6, #2
   1d8ac:	e7f2      	b.n	1d894 <nmgr_datetime_get+0x5c>
   1d8ae:	bf00      	nop
   1d8b0:	000238e4 	.word	0x000238e4
   1d8b4:	000249d4 	.word	0x000249d4

0001d8b8 <nmgr_def_mpstat_read>:
{
   1d8b8:	b570      	push	{r4, r5, r6, lr}
   1d8ba:	b094      	sub	sp, #80	; 0x50
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1d8bc:	f100 060c 	add.w	r6, r0, #12
   1d8c0:	2202      	movs	r2, #2
   1d8c2:	4939      	ldr	r1, [pc, #228]	; (1d9a8 <nmgr_def_mpstat_read+0xf0>)
   1d8c4:	4630      	mov	r0, r6
   1d8c6:	f7f5 fc24 	bl	13112 <cbor_encode_text_string>
   1d8ca:	4604      	mov	r4, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1d8cc:	2200      	movs	r2, #0
   1d8ce:	2300      	movs	r3, #0
   1d8d0:	4630      	mov	r0, r6
   1d8d2:	f7f5 fba3 	bl	1301c <cbor_encode_int>
   1d8d6:	4304      	orrs	r4, r0
   1d8d8:	2206      	movs	r2, #6
   1d8da:	4934      	ldr	r1, [pc, #208]	; (1d9ac <nmgr_def_mpstat_read+0xf4>)
   1d8dc:	4630      	mov	r0, r6
   1d8de:	f7f5 fc18 	bl	13112 <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "mpools");
   1d8e2:	4304      	orrs	r4, r0
    g_err |= cbor_encoder_create_map(&cb->encoder, &pools,
   1d8e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d8e8:	a904      	add	r1, sp, #16
   1d8ea:	4630      	mov	r0, r6
   1d8ec:	f7f5 fc1d 	bl	1312a <cbor_encoder_create_map>
   1d8f0:	4304      	orrs	r4, r0
    prev_mp = NULL;
   1d8f2:	2500      	movs	r5, #0
   1d8f4:	e044      	b.n	1d980 <nmgr_def_mpstat_read+0xc8>
   1d8f6:	a80c      	add	r0, sp, #48	; 0x30
   1d8f8:	f7f0 f8ba 	bl	da70 <strlen>
   1d8fc:	4602      	mov	r2, r0
   1d8fe:	a90c      	add	r1, sp, #48	; 0x30
   1d900:	a804      	add	r0, sp, #16
   1d902:	f7f5 fc06 	bl	13112 <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&pools, omi.omi_name);
   1d906:	4304      	orrs	r4, r0
        g_err |= cbor_encoder_create_map(&pools, &pool, CborIndefiniteLength);
   1d908:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d90c:	4669      	mov	r1, sp
   1d90e:	a804      	add	r0, sp, #16
   1d910:	f7f5 fc0b 	bl	1312a <cbor_encoder_create_map>
   1d914:	4304      	orrs	r4, r0
   1d916:	2206      	movs	r2, #6
   1d918:	4925      	ldr	r1, [pc, #148]	; (1d9b0 <nmgr_def_mpstat_read+0xf8>)
   1d91a:	4668      	mov	r0, sp
   1d91c:	f7f5 fbf9 	bl	13112 <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&pool, "blksiz");
   1d920:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&pool, omi.omi_block_size);
   1d922:	9a08      	ldr	r2, [sp, #32]
   1d924:	17d3      	asrs	r3, r2, #31
   1d926:	4668      	mov	r0, sp
   1d928:	f7f5 fb38 	bl	12f9c <cbor_encode_uint>
   1d92c:	4304      	orrs	r4, r0
   1d92e:	2205      	movs	r2, #5
   1d930:	4920      	ldr	r1, [pc, #128]	; (1d9b4 <nmgr_def_mpstat_read+0xfc>)
   1d932:	4668      	mov	r0, sp
   1d934:	f7f5 fbed 	bl	13112 <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&pool, "nblks");
   1d938:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&pool, omi.omi_num_blocks);
   1d93a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1d93c:	17d3      	asrs	r3, r2, #31
   1d93e:	4668      	mov	r0, sp
   1d940:	f7f5 fb2c 	bl	12f9c <cbor_encode_uint>
   1d944:	4304      	orrs	r4, r0
   1d946:	2205      	movs	r2, #5
   1d948:	491b      	ldr	r1, [pc, #108]	; (1d9b8 <nmgr_def_mpstat_read+0x100>)
   1d94a:	4668      	mov	r0, sp
   1d94c:	f7f5 fbe1 	bl	13112 <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&pool, "nfree");
   1d950:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&pool, omi.omi_num_free);
   1d952:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1d954:	17d3      	asrs	r3, r2, #31
   1d956:	4668      	mov	r0, sp
   1d958:	f7f5 fb20 	bl	12f9c <cbor_encode_uint>
   1d95c:	4304      	orrs	r4, r0
   1d95e:	2203      	movs	r2, #3
   1d960:	4916      	ldr	r1, [pc, #88]	; (1d9bc <nmgr_def_mpstat_read+0x104>)
   1d962:	4668      	mov	r0, sp
   1d964:	f7f5 fbd5 	bl	13112 <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&pool, "min");
   1d968:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&pool, omi.omi_min_free);
   1d96a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1d96c:	17d3      	asrs	r3, r2, #31
   1d96e:	4668      	mov	r0, sp
   1d970:	f7f5 fb14 	bl	12f9c <cbor_encode_uint>
   1d974:	4304      	orrs	r4, r0
        g_err |= cbor_encoder_close_container(&pools, &pool);
   1d976:	4669      	mov	r1, sp
   1d978:	a804      	add	r0, sp, #16
   1d97a:	f7f5 fbe4 	bl	13146 <cbor_encoder_close_container>
   1d97e:	4304      	orrs	r4, r0
        prev_mp = os_mempool_info_get_next(prev_mp, &omi);
   1d980:	a908      	add	r1, sp, #32
   1d982:	4628      	mov	r0, r5
   1d984:	f7eb ffcc 	bl	9920 <os_mempool_info_get_next>
        if (prev_mp == NULL) {
   1d988:	4605      	mov	r5, r0
   1d98a:	2800      	cmp	r0, #0
   1d98c:	d1b3      	bne.n	1d8f6 <nmgr_def_mpstat_read+0x3e>
    g_err |= cbor_encoder_close_container(&cb->encoder, &pools);
   1d98e:	a904      	add	r1, sp, #16
   1d990:	4630      	mov	r0, r6
   1d992:	f7f5 fbd8 	bl	13146 <cbor_encoder_close_container>
    if (g_err) {
   1d996:	ea54 0300 	orrs.w	r3, r4, r0
   1d99a:	d102      	bne.n	1d9a2 <nmgr_def_mpstat_read+0xea>
    return (0);
   1d99c:	2000      	movs	r0, #0
}
   1d99e:	b014      	add	sp, #80	; 0x50
   1d9a0:	bd70      	pop	{r4, r5, r6, pc}
        return MGMT_ERR_ENOMEM;
   1d9a2:	2002      	movs	r0, #2
   1d9a4:	e7fb      	b.n	1d99e <nmgr_def_mpstat_read+0xe6>
   1d9a6:	bf00      	nop
   1d9a8:	000238e4 	.word	0x000238e4
   1d9ac:	000249e8 	.word	0x000249e8
   1d9b0:	000249f0 	.word	0x000249f0
   1d9b4:	000249f8 	.word	0x000249f8
   1d9b8:	00024a00 	.word	0x00024a00
   1d9bc:	00023558 	.word	0x00023558

0001d9c0 <nmgr_def_taskstat_read>:
{
   1d9c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d9c2:	b097      	sub	sp, #92	; 0x5c
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1d9c4:	f100 060c 	add.w	r6, r0, #12
   1d9c8:	2202      	movs	r2, #2
   1d9ca:	495a      	ldr	r1, [pc, #360]	; (1db34 <nmgr_def_taskstat_read+0x174>)
   1d9cc:	4630      	mov	r0, r6
   1d9ce:	f7f5 fba0 	bl	13112 <cbor_encode_text_string>
   1d9d2:	4604      	mov	r4, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1d9d4:	2200      	movs	r2, #0
   1d9d6:	2300      	movs	r3, #0
   1d9d8:	4630      	mov	r0, r6
   1d9da:	f7f5 fb1f 	bl	1301c <cbor_encode_int>
   1d9de:	4304      	orrs	r4, r0
   1d9e0:	2205      	movs	r2, #5
   1d9e2:	4955      	ldr	r1, [pc, #340]	; (1db38 <nmgr_def_taskstat_read+0x178>)
   1d9e4:	4630      	mov	r0, r6
   1d9e6:	f7f5 fb94 	bl	13112 <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "tasks");
   1d9ea:	4304      	orrs	r4, r0
    g_err |= cbor_encoder_create_map(&cb->encoder, &tasks,
   1d9ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d9f0:	a904      	add	r1, sp, #16
   1d9f2:	4630      	mov	r0, r6
   1d9f4:	f7f5 fb99 	bl	1312a <cbor_encoder_create_map>
   1d9f8:	4304      	orrs	r4, r0
    prev_task = NULL;
   1d9fa:	2500      	movs	r5, #0
   1d9fc:	e086      	b.n	1db0c <nmgr_def_taskstat_read+0x14c>
   1d9fe:	a80e      	add	r0, sp, #56	; 0x38
   1da00:	f7f0 f836 	bl	da70 <strlen>
   1da04:	4602      	mov	r2, r0
   1da06:	a90e      	add	r1, sp, #56	; 0x38
   1da08:	a804      	add	r0, sp, #16
   1da0a:	f7f5 fb82 	bl	13112 <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&tasks, oti.oti_name);
   1da0e:	4304      	orrs	r4, r0
        g_err |= cbor_encoder_create_map(&tasks, &task, CborIndefiniteLength);
   1da10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1da14:	4669      	mov	r1, sp
   1da16:	a804      	add	r0, sp, #16
   1da18:	f7f5 fb87 	bl	1312a <cbor_encoder_create_map>
   1da1c:	4304      	orrs	r4, r0
   1da1e:	2204      	movs	r2, #4
   1da20:	4946      	ldr	r1, [pc, #280]	; (1db3c <nmgr_def_taskstat_read+0x17c>)
   1da22:	4668      	mov	r0, sp
   1da24:	f7f5 fb75 	bl	13112 <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&task, "prio");
   1da28:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_prio);
   1da2a:	2700      	movs	r7, #0
   1da2c:	f89d 2020 	ldrb.w	r2, [sp, #32]
   1da30:	463b      	mov	r3, r7
   1da32:	4668      	mov	r0, sp
   1da34:	f7f5 fab2 	bl	12f9c <cbor_encode_uint>
   1da38:	4304      	orrs	r4, r0
   1da3a:	2203      	movs	r2, #3
   1da3c:	4940      	ldr	r1, [pc, #256]	; (1db40 <nmgr_def_taskstat_read+0x180>)
   1da3e:	4668      	mov	r0, sp
   1da40:	f7f5 fb67 	bl	13112 <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&task, "tid");
   1da44:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_taskid);
   1da46:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   1da4a:	463b      	mov	r3, r7
   1da4c:	4668      	mov	r0, sp
   1da4e:	f7f5 faa5 	bl	12f9c <cbor_encode_uint>
   1da52:	4304      	orrs	r4, r0
   1da54:	2205      	movs	r2, #5
   1da56:	493b      	ldr	r1, [pc, #236]	; (1db44 <nmgr_def_taskstat_read+0x184>)
   1da58:	4668      	mov	r0, sp
   1da5a:	f7f5 fb5a 	bl	13112 <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&task, "state");
   1da5e:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_state);
   1da60:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   1da64:	463b      	mov	r3, r7
   1da66:	4668      	mov	r0, sp
   1da68:	f7f5 fa98 	bl	12f9c <cbor_encode_uint>
   1da6c:	4304      	orrs	r4, r0
   1da6e:	2206      	movs	r2, #6
   1da70:	4935      	ldr	r1, [pc, #212]	; (1db48 <nmgr_def_taskstat_read+0x188>)
   1da72:	4668      	mov	r0, sp
   1da74:	f7f5 fb4d 	bl	13112 <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&task, "stkuse");
   1da78:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_stkusage);
   1da7a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   1da7e:	463b      	mov	r3, r7
   1da80:	4668      	mov	r0, sp
   1da82:	f7f5 fa8b 	bl	12f9c <cbor_encode_uint>
   1da86:	4304      	orrs	r4, r0
   1da88:	2206      	movs	r2, #6
   1da8a:	4930      	ldr	r1, [pc, #192]	; (1db4c <nmgr_def_taskstat_read+0x18c>)
   1da8c:	4668      	mov	r0, sp
   1da8e:	f7f5 fb40 	bl	13112 <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&task, "stksiz");
   1da92:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_stksize);
   1da94:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
   1da98:	463b      	mov	r3, r7
   1da9a:	4668      	mov	r0, sp
   1da9c:	f7f5 fa7e 	bl	12f9c <cbor_encode_uint>
   1daa0:	4304      	orrs	r4, r0
   1daa2:	2206      	movs	r2, #6
   1daa4:	492a      	ldr	r1, [pc, #168]	; (1db50 <nmgr_def_taskstat_read+0x190>)
   1daa6:	4668      	mov	r0, sp
   1daa8:	f7f5 fb33 	bl	13112 <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&task, "cswcnt");
   1daac:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_cswcnt);
   1daae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1dab0:	463b      	mov	r3, r7
   1dab2:	4668      	mov	r0, sp
   1dab4:	f7f5 fa72 	bl	12f9c <cbor_encode_uint>
   1dab8:	4304      	orrs	r4, r0
   1daba:	2207      	movs	r2, #7
   1dabc:	4925      	ldr	r1, [pc, #148]	; (1db54 <nmgr_def_taskstat_read+0x194>)
   1dabe:	4668      	mov	r0, sp
   1dac0:	f7f5 fb27 	bl	13112 <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&task, "runtime");
   1dac4:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_runtime);
   1dac6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1dac8:	463b      	mov	r3, r7
   1daca:	4668      	mov	r0, sp
   1dacc:	f7f5 fa66 	bl	12f9c <cbor_encode_uint>
   1dad0:	4304      	orrs	r4, r0
   1dad2:	220c      	movs	r2, #12
   1dad4:	4920      	ldr	r1, [pc, #128]	; (1db58 <nmgr_def_taskstat_read+0x198>)
   1dad6:	4668      	mov	r0, sp
   1dad8:	f7f5 fb1b 	bl	13112 <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&task, "last_checkin");
   1dadc:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_last_checkin);
   1dade:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1dae0:	463b      	mov	r3, r7
   1dae2:	4668      	mov	r0, sp
   1dae4:	f7f5 fa5a 	bl	12f9c <cbor_encode_uint>
   1dae8:	4304      	orrs	r4, r0
   1daea:	220c      	movs	r2, #12
   1daec:	491b      	ldr	r1, [pc, #108]	; (1db5c <nmgr_def_taskstat_read+0x19c>)
   1daee:	4668      	mov	r0, sp
   1daf0:	f7f5 fb0f 	bl	13112 <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&task, "next_checkin");
   1daf4:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_next_checkin);
   1daf6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1daf8:	463b      	mov	r3, r7
   1dafa:	4668      	mov	r0, sp
   1dafc:	f7f5 fa4e 	bl	12f9c <cbor_encode_uint>
   1db00:	4304      	orrs	r4, r0
        g_err |= cbor_encoder_close_container(&tasks, &task);
   1db02:	4669      	mov	r1, sp
   1db04:	a804      	add	r0, sp, #16
   1db06:	f7f5 fb1e 	bl	13146 <cbor_encoder_close_container>
   1db0a:	4304      	orrs	r4, r0
        prev_task = os_task_info_get_next(prev_task, &oti);
   1db0c:	a908      	add	r1, sp, #32
   1db0e:	4628      	mov	r0, r5
   1db10:	f7ec fae6 	bl	a0e0 <os_task_info_get_next>
        if (prev_task == NULL) {
   1db14:	4605      	mov	r5, r0
   1db16:	2800      	cmp	r0, #0
   1db18:	f47f af71 	bne.w	1d9fe <nmgr_def_taskstat_read+0x3e>
    g_err |= cbor_encoder_close_container(&cb->encoder, &tasks);
   1db1c:	a904      	add	r1, sp, #16
   1db1e:	4630      	mov	r0, r6
   1db20:	f7f5 fb11 	bl	13146 <cbor_encoder_close_container>
    if (g_err) {
   1db24:	ea54 0300 	orrs.w	r3, r4, r0
   1db28:	d102      	bne.n	1db30 <nmgr_def_taskstat_read+0x170>
    return (0);
   1db2a:	2000      	movs	r0, #0
}
   1db2c:	b017      	add	sp, #92	; 0x5c
   1db2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return MGMT_ERR_ENOMEM;
   1db30:	2002      	movs	r0, #2
   1db32:	e7fb      	b.n	1db2c <nmgr_def_taskstat_read+0x16c>
   1db34:	000238e4 	.word	0x000238e4
   1db38:	00023708 	.word	0x00023708
   1db3c:	00024a08 	.word	0x00024a08
   1db40:	00023640 	.word	0x00023640
   1db44:	00024a10 	.word	0x00024a10
   1db48:	00023624 	.word	0x00023624
   1db4c:	00024a18 	.word	0x00024a18
   1db50:	00024a20 	.word	0x00024a20
   1db54:	00023638 	.word	0x00023638
   1db58:	00024a28 	.word	0x00024a28
   1db5c:	00024a38 	.word	0x00024a38

0001db60 <nmgr_os_groups_register>:

int
nmgr_os_groups_register(void)
{
   1db60:	b508      	push	{r3, lr}
    return mgmt_group_register(&nmgr_def_group);
   1db62:	4802      	ldr	r0, [pc, #8]	; (1db6c <nmgr_os_groups_register+0xc>)
   1db64:	f7ff fbac 	bl	1d2c0 <mgmt_group_register>
}
   1db68:	bd08      	pop	{r3, pc}
   1db6a:	bf00      	nop
   1db6c:	20000f58 	.word	0x20000f58

0001db70 <nmgr_shell_get_mtu>:

static uint16_t
nmgr_shell_get_mtu(struct os_mbuf *m)
{
    return MGMT_MAX_MTU;
}
   1db70:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1db74:	4770      	bx	lr
	...

0001db78 <nmgr_shell_in>:
    return (rc);
}

static int
nmgr_shell_in(struct os_mbuf *m, void *arg)
{
   1db78:	b508      	push	{r3, lr}
   1db7a:	4601      	mov	r1, r0
    return nmgr_rx_req(&nmgr_shell_transport, m);
   1db7c:	4801      	ldr	r0, [pc, #4]	; (1db84 <nmgr_shell_in+0xc>)
   1db7e:	f7ff fd5d 	bl	1d63c <nmgr_rx_req>
}
   1db82:	bd08      	pop	{r3, pc}
   1db84:	2000472c 	.word	0x2000472c

0001db88 <nmgr_shell_out>:
{
   1db88:	b538      	push	{r3, r4, r5, lr}
   1db8a:	460c      	mov	r4, r1
    rc = shell_nlip_output(m);
   1db8c:	4608      	mov	r0, r1
   1db8e:	f7f2 ff91 	bl	10ab4 <shell_nlip_output>
    if (rc != 0) {
   1db92:	4605      	mov	r5, r0
   1db94:	b908      	cbnz	r0, 1db9a <nmgr_shell_out+0x12>
}
   1db96:	4628      	mov	r0, r5
   1db98:	bd38      	pop	{r3, r4, r5, pc}
    os_mbuf_free_chain(m);
   1db9a:	4620      	mov	r0, r4
   1db9c:	f7ec fdb9 	bl	a712 <os_mbuf_free_chain>
    return (rc);
   1dba0:	e7f9      	b.n	1db96 <nmgr_shell_out+0xe>
	...

0001dba4 <nmgr_shell_pkg_init>:

void
nmgr_shell_pkg_init(void)
{
   1dba4:	b508      	push	{r3, lr}
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1dba6:	4b10      	ldr	r3, [pc, #64]	; (1dbe8 <nmgr_shell_pkg_init+0x44>)
   1dba8:	781b      	ldrb	r3, [r3, #0]
   1dbaa:	b15b      	cbz	r3, 1dbc4 <nmgr_shell_pkg_init+0x20>

    rc = nmgr_transport_init(&nmgr_shell_transport, nmgr_shell_out,
   1dbac:	4a0f      	ldr	r2, [pc, #60]	; (1dbec <nmgr_shell_pkg_init+0x48>)
   1dbae:	4910      	ldr	r1, [pc, #64]	; (1dbf0 <nmgr_shell_pkg_init+0x4c>)
   1dbb0:	4810      	ldr	r0, [pc, #64]	; (1dbf4 <nmgr_shell_pkg_init+0x50>)
   1dbb2:	f7ff fd39 	bl	1d628 <nmgr_transport_init>
      nmgr_shell_get_mtu);
    assert(rc == 0);
   1dbb6:	b950      	cbnz	r0, 1dbce <nmgr_shell_pkg_init+0x2a>

    rc = shell_nlip_input_register(nmgr_shell_in, &nmgr_shell_transport);
   1dbb8:	490e      	ldr	r1, [pc, #56]	; (1dbf4 <nmgr_shell_pkg_init+0x50>)
   1dbba:	480f      	ldr	r0, [pc, #60]	; (1dbf8 <nmgr_shell_pkg_init+0x54>)
   1dbbc:	f7f2 ff70 	bl	10aa0 <shell_nlip_input_register>
    assert(rc == 0);
   1dbc0:	b958      	cbnz	r0, 1dbda <nmgr_shell_pkg_init+0x36>
}
   1dbc2:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1dbc4:	461a      	mov	r2, r3
   1dbc6:	4619      	mov	r1, r3
   1dbc8:	4618      	mov	r0, r3
   1dbca:	f7eb fa3f 	bl	904c <__assert_func>
    assert(rc == 0);
   1dbce:	2300      	movs	r3, #0
   1dbd0:	461a      	mov	r2, r3
   1dbd2:	4619      	mov	r1, r3
   1dbd4:	4618      	mov	r0, r3
   1dbd6:	f7eb fa39 	bl	904c <__assert_func>
    assert(rc == 0);
   1dbda:	2300      	movs	r3, #0
   1dbdc:	461a      	mov	r2, r3
   1dbde:	4619      	mov	r1, r3
   1dbe0:	4618      	mov	r0, r3
   1dbe2:	f7eb fa33 	bl	904c <__assert_func>
   1dbe6:	bf00      	nop
   1dbe8:	20004548 	.word	0x20004548
   1dbec:	0001db71 	.word	0x0001db71
   1dbf0:	0001db89 	.word	0x0001db89
   1dbf4:	2000472c 	.word	0x2000472c
   1dbf8:	0001db79 	.word	0x0001db79

0001dbfc <config_init_fcb>:
    .cf_fcb.f_sectors = conf_fcb_area,
};

static void
config_init_fcb(void)
{
   1dbfc:	b510      	push	{r4, lr}
   1dbfe:	b084      	sub	sp, #16
    int cnt;
    int rc;

    rc = flash_area_to_sectors(MYNEWT_VAL(CONFIG_FCB_FLASH_AREA), &cnt, NULL);
   1dc00:	2200      	movs	r2, #0
   1dc02:	a903      	add	r1, sp, #12
   1dc04:	2011      	movs	r0, #17
   1dc06:	f000 fa8f 	bl	1e128 <flash_area_to_sectors>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1dc0a:	b138      	cbz	r0, 1dc1c <config_init_fcb+0x20>
   1dc0c:	2000      	movs	r0, #0
   1dc0e:	9000      	str	r0, [sp, #0]
   1dc10:	4b26      	ldr	r3, [pc, #152]	; (1dcac <config_init_fcb+0xb0>)
   1dc12:	681c      	ldr	r4, [r3, #0]
   1dc14:	4603      	mov	r3, r0
   1dc16:	4602      	mov	r2, r0
   1dc18:	4601      	mov	r1, r0
   1dc1a:	47a0      	blx	r4
    SYSINIT_PANIC_ASSERT(
   1dc1c:	9b03      	ldr	r3, [sp, #12]
   1dc1e:	2b09      	cmp	r3, #9
   1dc20:	d907      	bls.n	1dc32 <config_init_fcb+0x36>
   1dc22:	2000      	movs	r0, #0
   1dc24:	9000      	str	r0, [sp, #0]
   1dc26:	4b21      	ldr	r3, [pc, #132]	; (1dcac <config_init_fcb+0xb0>)
   1dc28:	681c      	ldr	r4, [r3, #0]
   1dc2a:	4603      	mov	r3, r0
   1dc2c:	4602      	mov	r2, r0
   1dc2e:	4601      	mov	r1, r0
   1dc30:	47a0      	blx	r4
        cnt <= sizeof(conf_fcb_area) / sizeof(conf_fcb_area[0]));
    flash_area_to_sectors(
   1dc32:	4a1f      	ldr	r2, [pc, #124]	; (1dcb0 <config_init_fcb+0xb4>)
   1dc34:	a903      	add	r1, sp, #12
   1dc36:	2011      	movs	r0, #17
   1dc38:	f000 fa76 	bl	1e128 <flash_area_to_sectors>
        MYNEWT_VAL(CONFIG_FCB_FLASH_AREA), &cnt, conf_fcb_area);

    config_init_conf_fcb.cf_fcb.f_sector_cnt = cnt;
   1dc3c:	481d      	ldr	r0, [pc, #116]	; (1dcb4 <config_init_fcb+0xb8>)
   1dc3e:	9b03      	ldr	r3, [sp, #12]
   1dc40:	7343      	strb	r3, [r0, #13]

    rc = conf_fcb_src(&config_init_conf_fcb);
   1dc42:	f000 f933 	bl	1deac <conf_fcb_src>
    if (rc) {
   1dc46:	4603      	mov	r3, r0
   1dc48:	b1c0      	cbz	r0, 1dc7c <config_init_fcb+0x80>
        for (cnt = 0;
   1dc4a:	2300      	movs	r3, #0
   1dc4c:	9303      	str	r3, [sp, #12]
   1dc4e:	e00c      	b.n	1dc6a <config_init_fcb+0x6e>
             cnt < config_init_conf_fcb.cf_fcb.f_sector_cnt;
             cnt++) {

            flash_area_erase(&conf_fcb_area[cnt], 0,
   1dc50:	4817      	ldr	r0, [pc, #92]	; (1dcb0 <config_init_fcb+0xb4>)
   1dc52:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
   1dc56:	eb00 038c 	add.w	r3, r0, ip, lsl #2
   1dc5a:	689a      	ldr	r2, [r3, #8]
   1dc5c:	2100      	movs	r1, #0
   1dc5e:	4618      	mov	r0, r3
   1dc60:	f000 fac8 	bl	1e1f4 <flash_area_erase>
             cnt++) {
   1dc64:	9b03      	ldr	r3, [sp, #12]
   1dc66:	3301      	adds	r3, #1
   1dc68:	9303      	str	r3, [sp, #12]
             cnt < config_init_conf_fcb.cf_fcb.f_sector_cnt;
   1dc6a:	4b12      	ldr	r3, [pc, #72]	; (1dcb4 <config_init_fcb+0xb8>)
   1dc6c:	7b5a      	ldrb	r2, [r3, #13]
   1dc6e:	9b03      	ldr	r3, [sp, #12]
        for (cnt = 0;
   1dc70:	429a      	cmp	r2, r3
   1dc72:	dced      	bgt.n	1dc50 <config_init_fcb+0x54>
                             conf_fcb_area[cnt].fa_size);
        }
        rc = conf_fcb_src(&config_init_conf_fcb);
   1dc74:	480f      	ldr	r0, [pc, #60]	; (1dcb4 <config_init_fcb+0xb8>)
   1dc76:	f000 f919 	bl	1deac <conf_fcb_src>
   1dc7a:	4603      	mov	r3, r0
    }
    SYSINIT_PANIC_ASSERT(rc == 0);
   1dc7c:	b13b      	cbz	r3, 1dc8e <config_init_fcb+0x92>
   1dc7e:	2000      	movs	r0, #0
   1dc80:	9000      	str	r0, [sp, #0]
   1dc82:	4b0a      	ldr	r3, [pc, #40]	; (1dcac <config_init_fcb+0xb0>)
   1dc84:	681c      	ldr	r4, [r3, #0]
   1dc86:	4603      	mov	r3, r0
   1dc88:	4602      	mov	r2, r0
   1dc8a:	4601      	mov	r1, r0
   1dc8c:	47a0      	blx	r4
    rc = conf_fcb_dst(&config_init_conf_fcb);
   1dc8e:	4809      	ldr	r0, [pc, #36]	; (1dcb4 <config_init_fcb+0xb8>)
   1dc90:	f000 f938 	bl	1df04 <conf_fcb_dst>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1dc94:	b138      	cbz	r0, 1dca6 <config_init_fcb+0xaa>
   1dc96:	2000      	movs	r0, #0
   1dc98:	9000      	str	r0, [sp, #0]
   1dc9a:	4b04      	ldr	r3, [pc, #16]	; (1dcac <config_init_fcb+0xb0>)
   1dc9c:	681c      	ldr	r4, [r3, #0]
   1dc9e:	4603      	mov	r3, r0
   1dca0:	4602      	mov	r2, r0
   1dca2:	4601      	mov	r1, r0
   1dca4:	47a0      	blx	r4
}
   1dca6:	b004      	add	sp, #16
   1dca8:	bd10      	pop	{r4, pc}
   1dcaa:	bf00      	nop
   1dcac:	2000064c 	.word	0x2000064c
   1dcb0:	2000474c 	.word	0x2000474c
   1dcb4:	20000f64 	.word	0x20000f64

0001dcb8 <config_pkg_init>:
#endif
#endif

void
config_pkg_init(void)
{
   1dcb8:	b508      	push	{r3, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1dcba:	4b06      	ldr	r3, [pc, #24]	; (1dcd4 <config_pkg_init+0x1c>)
   1dcbc:	781b      	ldrb	r3, [r3, #0]
   1dcbe:	b123      	cbz	r3, 1dcca <config_pkg_init+0x12>

    conf_init();
   1dcc0:	f7f0 fe64 	bl	e98c <conf_init>

#if MYNEWT_VAL(CONFIG_AUTO_INIT)
#if MYNEWT_VAL(CONFIG_NFFS)
    config_init_fs();
#elif MYNEWT_VAL(CONFIG_FCB)
    config_init_fcb();
   1dcc4:	f7ff ff9a 	bl	1dbfc <config_init_fcb>
#endif
#endif
}
   1dcc8:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1dcca:	461a      	mov	r2, r3
   1dccc:	4619      	mov	r1, r3
   1dcce:	4618      	mov	r0, r3
   1dcd0:	f7eb f9bc 	bl	904c <__assert_func>
   1dcd4:	20004548 	.word	0x20004548

0001dcd8 <config_pkg_init_stage2>:
     */
#if MYNEWT_VAL(CONFIG_NFFS)
    fs_mkdir(MYNEWT_VAL(CONFIG_NFFS_DIR));
#endif
#endif
}
   1dcd8:	4770      	bx	lr
	...

0001dcdc <conf_fcb_load>:
    return 0;
}

static int
conf_fcb_load(struct conf_store *cs, conf_store_load_cb cb, void *cb_arg)
{
   1dcdc:	b500      	push	{lr}
   1dcde:	b083      	sub	sp, #12
    struct conf_fcb *cf = (struct conf_fcb *)cs;
    struct conf_fcb_load_cb_arg arg;
    int rc;

    arg.cb = cb;
   1dce0:	9100      	str	r1, [sp, #0]
    arg.cb_arg = cb_arg;
   1dce2:	9201      	str	r2, [sp, #4]
    rc = fcb_walk(&cf->cf_fcb, 0, conf_fcb_load_cb, &arg);
   1dce4:	466b      	mov	r3, sp
   1dce6:	4a05      	ldr	r2, [pc, #20]	; (1dcfc <conf_fcb_load+0x20>)
   1dce8:	2100      	movs	r1, #0
   1dcea:	3008      	adds	r0, #8
   1dcec:	f002 ff42 	bl	20b74 <fcb_walk>
    if (rc) {
   1dcf0:	b910      	cbnz	r0, 1dcf8 <conf_fcb_load+0x1c>
        return OS_EINVAL;
    }
    return OS_OK;
}
   1dcf2:	b003      	add	sp, #12
   1dcf4:	f85d fb04 	ldr.w	pc, [sp], #4
        return OS_EINVAL;
   1dcf8:	2002      	movs	r0, #2
   1dcfa:	e7fa      	b.n	1dcf2 <conf_fcb_load+0x16>
   1dcfc:	0001dd01 	.word	0x0001dd01

0001dd00 <conf_fcb_load_cb>:
{
   1dd00:	b530      	push	{r4, r5, lr}
   1dd02:	b0db      	sub	sp, #364	; 0x16c
   1dd04:	460d      	mov	r5, r1
    len = loc->fe_data_len;
   1dd06:	8984      	ldrh	r4, [r0, #12]
    if (len >= sizeof(buf)) {
   1dd08:	f5b4 7fb0 	cmp.w	r4, #352	; 0x160
   1dd0c:	d301      	bcc.n	1dd12 <conf_fcb_load_cb+0x12>
        len = sizeof(buf) - 1;
   1dd0e:	f240 145f 	movw	r4, #351	; 0x15f
    rc = flash_area_read(loc->fe_area, loc->fe_data_off, buf, len);
   1dd12:	4623      	mov	r3, r4
   1dd14:	aa02      	add	r2, sp, #8
   1dd16:	6881      	ldr	r1, [r0, #8]
   1dd18:	6800      	ldr	r0, [r0, #0]
   1dd1a:	f000 fa43 	bl	1e1a4 <flash_area_read>
    if (rc) {
   1dd1e:	b110      	cbz	r0, 1dd26 <conf_fcb_load_cb+0x26>
}
   1dd20:	2000      	movs	r0, #0
   1dd22:	b05b      	add	sp, #364	; 0x16c
   1dd24:	bd30      	pop	{r4, r5, pc}
    buf[len] = '\0';
   1dd26:	a802      	add	r0, sp, #8
   1dd28:	2300      	movs	r3, #0
   1dd2a:	5503      	strb	r3, [r0, r4]
    rc = conf_line_parse(buf, &name_str, &val_str);
   1dd2c:	466a      	mov	r2, sp
   1dd2e:	a901      	add	r1, sp, #4
   1dd30:	f000 f910 	bl	1df54 <conf_line_parse>
    if (rc) {
   1dd34:	2800      	cmp	r0, #0
   1dd36:	d1f3      	bne.n	1dd20 <conf_fcb_load_cb+0x20>
    argp->cb(name_str, val_str, argp->cb_arg);
   1dd38:	682b      	ldr	r3, [r5, #0]
   1dd3a:	686a      	ldr	r2, [r5, #4]
   1dd3c:	9900      	ldr	r1, [sp, #0]
   1dd3e:	9801      	ldr	r0, [sp, #4]
   1dd40:	4798      	blx	r3
    return 0;
   1dd42:	e7ed      	b.n	1dd20 <conf_fcb_load_cb+0x20>

0001dd44 <conf_fcb_var_read>:

static int
conf_fcb_var_read(struct fcb_entry *loc, char *buf, char **name, char **val)
{
   1dd44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dd46:	4604      	mov	r4, r0
   1dd48:	460d      	mov	r5, r1
   1dd4a:	4617      	mov	r7, r2
   1dd4c:	461e      	mov	r6, r3
    int rc;

    rc = flash_area_read(loc->fe_area, loc->fe_data_off, buf, loc->fe_data_len);
   1dd4e:	8983      	ldrh	r3, [r0, #12]
   1dd50:	460a      	mov	r2, r1
   1dd52:	6881      	ldr	r1, [r0, #8]
   1dd54:	6800      	ldr	r0, [r0, #0]
   1dd56:	f000 fa25 	bl	1e1a4 <flash_area_read>
    if (rc) {
   1dd5a:	b100      	cbz	r0, 1dd5e <conf_fcb_var_read+0x1a>
        return rc;
    }
    buf[loc->fe_data_len] = '\0';
    rc = conf_line_parse(buf, name, val);
    return rc;
}
   1dd5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    buf[loc->fe_data_len] = '\0';
   1dd5e:	89a3      	ldrh	r3, [r4, #12]
   1dd60:	2200      	movs	r2, #0
   1dd62:	54ea      	strb	r2, [r5, r3]
    rc = conf_line_parse(buf, name, val);
   1dd64:	4632      	mov	r2, r6
   1dd66:	4639      	mov	r1, r7
   1dd68:	4628      	mov	r0, r5
   1dd6a:	f000 f8f3 	bl	1df54 <conf_line_parse>
    return rc;
   1dd6e:	e7f5      	b.n	1dd5c <conf_fcb_var_read+0x18>

0001dd70 <conf_fcb_compress_internal>:
static void
conf_fcb_compress_internal(struct fcb *fcb,
                           int (*copy_or_not)(const char *name, const char *val,
                                              void *cn_arg),
                           void *cn_arg)
{
   1dd70:	b570      	push	{r4, r5, r6, lr}
   1dd72:	f5ad 7d3c 	sub.w	sp, sp, #752	; 0x2f0
   1dd76:	4604      	mov	r4, r0
   1dd78:	460d      	mov	r5, r1
   1dd7a:	4616      	mov	r6, r2
    struct fcb_entry loc2;
    char *name1, *val1;
    char *name2, *val2;
    int copy;

    rc = fcb_append_to_scratch(fcb);
   1dd7c:	f002 fced 	bl	2075a <fcb_append_to_scratch>
    if (rc) {
   1dd80:	2800      	cmp	r0, #0
   1dd82:	d15e      	bne.n	1de42 <conf_fcb_compress_internal+0xd2>
        return; /* XXX */
    }

    loc1.fe_area = NULL;
   1dd84:	2300      	movs	r3, #0
   1dd86:	9308      	str	r3, [sp, #32]
    loc1.fe_elem_off = 0;
   1dd88:	9309      	str	r3, [sp, #36]	; 0x24
    while (fcb_getnext(fcb, &loc1) == 0) {
   1dd8a:	a908      	add	r1, sp, #32
   1dd8c:	4620      	mov	r0, r4
   1dd8e:	f002 fe9b 	bl	20ac8 <fcb_getnext>
   1dd92:	2800      	cmp	r0, #0
   1dd94:	d152      	bne.n	1de3c <conf_fcb_compress_internal+0xcc>
        if (loc1.fe_area != fcb->f_oldest) {
   1dd96:	9a08      	ldr	r2, [sp, #32]
   1dd98:	69a3      	ldr	r3, [r4, #24]
   1dd9a:	429a      	cmp	r2, r3
   1dd9c:	d14e      	bne.n	1de3c <conf_fcb_compress_internal+0xcc>
            break;
        }
        rc = conf_fcb_var_read(&loc1, buf1, &name1, &val1);
   1dd9e:	ab02      	add	r3, sp, #8
   1dda0:	aa03      	add	r2, sp, #12
   1dda2:	a964      	add	r1, sp, #400	; 0x190
   1dda4:	a808      	add	r0, sp, #32
   1dda6:	f7ff ffcd 	bl	1dd44 <conf_fcb_var_read>
        if (rc) {
   1ddaa:	2800      	cmp	r0, #0
   1ddac:	d1ed      	bne.n	1dd8a <conf_fcb_compress_internal+0x1a>
            continue;
        }
        if (!val1) {
   1ddae:	9b02      	ldr	r3, [sp, #8]
   1ddb0:	2b00      	cmp	r3, #0
   1ddb2:	d0ea      	beq.n	1dd8a <conf_fcb_compress_internal+0x1a>
            continue;
        }
        loc2 = loc1;
   1ddb4:	f10d 0c10 	add.w	ip, sp, #16
   1ddb8:	ab08      	add	r3, sp, #32
   1ddba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1ddbc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
        copy = 1;
        while (fcb_getnext(fcb, &loc2) == 0) {
   1ddc0:	a904      	add	r1, sp, #16
   1ddc2:	4620      	mov	r0, r4
   1ddc4:	f002 fe80 	bl	20ac8 <fcb_getnext>
   1ddc8:	b978      	cbnz	r0, 1ddea <conf_fcb_compress_internal+0x7a>
            rc = conf_fcb_var_read(&loc2, buf2, &name2, &val2);
   1ddca:	466b      	mov	r3, sp
   1ddcc:	aa01      	add	r2, sp, #4
   1ddce:	a90c      	add	r1, sp, #48	; 0x30
   1ddd0:	a804      	add	r0, sp, #16
   1ddd2:	f7ff ffb7 	bl	1dd44 <conf_fcb_var_read>
            if (rc) {
   1ddd6:	2800      	cmp	r0, #0
   1ddd8:	d1f2      	bne.n	1ddc0 <conf_fcb_compress_internal+0x50>
                continue;
            }
            if (!strcmp(name1, name2)) {
   1ddda:	9901      	ldr	r1, [sp, #4]
   1dddc:	9803      	ldr	r0, [sp, #12]
   1ddde:	f7ef fe3b 	bl	da58 <strcmp>
   1dde2:	4603      	mov	r3, r0
   1dde4:	2800      	cmp	r0, #0
   1dde6:	d1eb      	bne.n	1ddc0 <conf_fcb_compress_internal+0x50>
   1dde8:	e000      	b.n	1ddec <conf_fcb_compress_internal+0x7c>
        copy = 1;
   1ddea:	2301      	movs	r3, #1
                copy = 0;
                break;
            }
        }
        if (!copy) {
   1ddec:	2b00      	cmp	r3, #0
   1ddee:	d0cc      	beq.n	1dd8a <conf_fcb_compress_internal+0x1a>
            continue;
        }

        if (copy_or_not) {
   1ddf0:	b12d      	cbz	r5, 1ddfe <conf_fcb_compress_internal+0x8e>
            if (copy_or_not(name1, val1, cn_arg)) {
   1ddf2:	4632      	mov	r2, r6
   1ddf4:	9902      	ldr	r1, [sp, #8]
   1ddf6:	9803      	ldr	r0, [sp, #12]
   1ddf8:	47a8      	blx	r5
   1ddfa:	2800      	cmp	r0, #0
   1ddfc:	d1c5      	bne.n	1dd8a <conf_fcb_compress_internal+0x1a>
            }
        }
        /*
         * Can't find one. Must copy.
         */
        rc = flash_area_read(loc1.fe_area, loc1.fe_data_off, buf1,
   1ddfe:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   1de02:	aa64      	add	r2, sp, #400	; 0x190
   1de04:	990a      	ldr	r1, [sp, #40]	; 0x28
   1de06:	9808      	ldr	r0, [sp, #32]
   1de08:	f000 f9cc 	bl	1e1a4 <flash_area_read>
          loc1.fe_data_len);
        if (rc) {
   1de0c:	2800      	cmp	r0, #0
   1de0e:	d1bc      	bne.n	1dd8a <conf_fcb_compress_internal+0x1a>
            continue;
        }
        rc = fcb_append(fcb, loc1.fe_data_len, &loc2);
   1de10:	aa04      	add	r2, sp, #16
   1de12:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
   1de16:	4620      	mov	r0, r4
   1de18:	f002 fcb8 	bl	2078c <fcb_append>
        if (rc) {
   1de1c:	2800      	cmp	r0, #0
   1de1e:	d1b4      	bne.n	1dd8a <conf_fcb_compress_internal+0x1a>
            continue;
        }
        rc = flash_area_write(loc2.fe_area, loc2.fe_data_off, buf1,
   1de20:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   1de24:	aa64      	add	r2, sp, #400	; 0x190
   1de26:	9906      	ldr	r1, [sp, #24]
   1de28:	9804      	ldr	r0, [sp, #16]
   1de2a:	f000 f9cf 	bl	1e1cc <flash_area_write>
          loc1.fe_data_len);
        if (rc) {
   1de2e:	2800      	cmp	r0, #0
   1de30:	d1ab      	bne.n	1dd8a <conf_fcb_compress_internal+0x1a>
            continue;
        }
        fcb_append_finish(fcb, &loc2);
   1de32:	a904      	add	r1, sp, #16
   1de34:	4620      	mov	r0, r4
   1de36:	f002 fd26 	bl	20886 <fcb_append_finish>
   1de3a:	e7a6      	b.n	1dd8a <conf_fcb_compress_internal+0x1a>
    }
    rc = fcb_rotate(fcb);
   1de3c:	4620      	mov	r0, r4
   1de3e:	f002 fe5d 	bl	20afc <fcb_rotate>
    if (rc) {
        /* XXXX */
        ;
    }
}
   1de42:	f50d 7d3c 	add.w	sp, sp, #752	; 0x2f0
   1de46:	bd70      	pop	{r4, r5, r6, pc}

0001de48 <conf_fcb_append>:

static int
conf_fcb_append(struct fcb *fcb, char *buf, int len)
{
   1de48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1de4c:	b084      	sub	sp, #16
   1de4e:	4606      	mov	r6, r0
   1de50:	4688      	mov	r8, r1
   1de52:	4617      	mov	r7, r2
    int rc;
    int i;
    struct fcb_entry loc;

    for (i = 0; i < 10; i++) {
   1de54:	2500      	movs	r5, #0
   1de56:	2d09      	cmp	r5, #9
   1de58:	dc11      	bgt.n	1de7e <conf_fcb_append+0x36>
        rc = fcb_append(fcb, len, &loc);
   1de5a:	466a      	mov	r2, sp
   1de5c:	b2b9      	uxth	r1, r7
   1de5e:	4630      	mov	r0, r6
   1de60:	f002 fc94 	bl	2078c <fcb_append>
   1de64:	4604      	mov	r4, r0
        if (rc != FCB_ERR_NOSPACE) {
   1de66:	f110 0f04 	cmn.w	r0, #4
   1de6a:	d108      	bne.n	1de7e <conf_fcb_append+0x36>
            break;
        }
        if (fcb->f_scratch_cnt == 0) {
   1de6c:	79b0      	ldrb	r0, [r6, #6]
   1de6e:	b1b8      	cbz	r0, 1dea0 <conf_fcb_append+0x58>
            return OS_ENOMEM;
        }
        conf_fcb_compress_internal(fcb, NULL, NULL);
   1de70:	2200      	movs	r2, #0
   1de72:	4611      	mov	r1, r2
   1de74:	4630      	mov	r0, r6
   1de76:	f7ff ff7b 	bl	1dd70 <conf_fcb_compress_internal>
    for (i = 0; i < 10; i++) {
   1de7a:	3501      	adds	r5, #1
   1de7c:	e7eb      	b.n	1de56 <conf_fcb_append+0xe>
    }
    if (rc) {
   1de7e:	b98c      	cbnz	r4, 1dea4 <conf_fcb_append+0x5c>
        return OS_EINVAL;
    }
    rc = flash_area_write(loc.fe_area, loc.fe_data_off, buf, len);
   1de80:	463b      	mov	r3, r7
   1de82:	4642      	mov	r2, r8
   1de84:	9902      	ldr	r1, [sp, #8]
   1de86:	9800      	ldr	r0, [sp, #0]
   1de88:	f000 f9a0 	bl	1e1cc <flash_area_write>
    if (rc) {
   1de8c:	4604      	mov	r4, r0
   1de8e:	b958      	cbnz	r0, 1dea8 <conf_fcb_append+0x60>
        return OS_EINVAL;
    }
    fcb_append_finish(fcb, &loc);
   1de90:	4669      	mov	r1, sp
   1de92:	4630      	mov	r0, r6
   1de94:	f002 fcf7 	bl	20886 <fcb_append_finish>
    return OS_OK;
}
   1de98:	4620      	mov	r0, r4
   1de9a:	b004      	add	sp, #16
   1de9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return OS_ENOMEM;
   1dea0:	2401      	movs	r4, #1
   1dea2:	e7f9      	b.n	1de98 <conf_fcb_append+0x50>
        return OS_EINVAL;
   1dea4:	2402      	movs	r4, #2
   1dea6:	e7f7      	b.n	1de98 <conf_fcb_append+0x50>
        return OS_EINVAL;
   1dea8:	2402      	movs	r4, #2
   1deaa:	e7f5      	b.n	1de98 <conf_fcb_append+0x50>

0001deac <conf_fcb_src>:
{
   1deac:	b570      	push	{r4, r5, r6, lr}
   1deae:	4604      	mov	r4, r0
    cf->cf_fcb.f_version = CONF_FCB_VERS;
   1deb0:	2301      	movs	r3, #1
   1deb2:	7303      	strb	r3, [r0, #12]
    if (cf->cf_fcb.f_sector_cnt > 1) {
   1deb4:	7b43      	ldrb	r3, [r0, #13]
   1deb6:	2b01      	cmp	r3, #1
   1deb8:	d902      	bls.n	1dec0 <conf_fcb_src+0x14>
        cf->cf_fcb.f_scratch_cnt = 1;
   1deba:	2301      	movs	r3, #1
   1debc:	7383      	strb	r3, [r0, #14]
   1debe:	e007      	b.n	1ded0 <conf_fcb_src+0x24>
        cf->cf_fcb.f_scratch_cnt = 0;
   1dec0:	2300      	movs	r3, #0
   1dec2:	7383      	strb	r3, [r0, #14]
   1dec4:	e004      	b.n	1ded0 <conf_fcb_src+0x24>
            flash_area_erase(cf->cf_fcb.f_active.fe_area, 0,
   1dec6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1dec8:	6882      	ldr	r2, [r0, #8]
   1deca:	2100      	movs	r1, #0
   1decc:	f000 f992 	bl	1e1f4 <flash_area_erase>
        rc = fcb_init(&cf->cf_fcb);
   1ded0:	f104 0508 	add.w	r5, r4, #8
   1ded4:	4628      	mov	r0, r5
   1ded6:	f002 fb96 	bl	20606 <fcb_init>
        if (rc) {
   1deda:	4606      	mov	r6, r0
   1dedc:	b968      	cbnz	r0, 1defa <conf_fcb_src+0x4e>
        if (cf->cf_fcb.f_scratch_cnt &&
   1dede:	7ba3      	ldrb	r3, [r4, #14]
   1dee0:	b123      	cbz	r3, 1deec <conf_fcb_src+0x40>
            fcb_free_sector_cnt(&cf->cf_fcb) < 1) {
   1dee2:	4628      	mov	r0, r5
   1dee4:	f002 fb19 	bl	2051a <fcb_free_sector_cnt>
        if (cf->cf_fcb.f_scratch_cnt &&
   1dee8:	2800      	cmp	r0, #0
   1deea:	ddec      	ble.n	1dec6 <conf_fcb_src+0x1a>
    cf->cf_store.cs_itf = &conf_fcb_itf;
   1deec:	4b04      	ldr	r3, [pc, #16]	; (1df00 <conf_fcb_src+0x54>)
   1deee:	6063      	str	r3, [r4, #4]
    conf_src_register(&cf->cf_store);
   1def0:	4620      	mov	r0, r4
   1def2:	f7f0 fc89 	bl	e808 <conf_src_register>
}
   1def6:	4630      	mov	r0, r6
   1def8:	bd70      	pop	{r4, r5, r6, pc}
            return OS_INVALID_PARM;
   1defa:	2603      	movs	r6, #3
   1defc:	e7fb      	b.n	1def6 <conf_fcb_src+0x4a>
   1defe:	bf00      	nop
   1df00:	20000f9c 	.word	0x20000f9c

0001df04 <conf_fcb_dst>:
{
   1df04:	b508      	push	{r3, lr}
    cf->cf_store.cs_itf = &conf_fcb_itf;
   1df06:	4b03      	ldr	r3, [pc, #12]	; (1df14 <conf_fcb_dst+0x10>)
   1df08:	6043      	str	r3, [r0, #4]
    conf_dst_register(&cf->cf_store);
   1df0a:	f7f0 fc91 	bl	e830 <conf_dst_register>
}
   1df0e:	2000      	movs	r0, #0
   1df10:	bd08      	pop	{r3, pc}
   1df12:	bf00      	nop
   1df14:	20000f9c 	.word	0x20000f9c

0001df18 <conf_fcb_kv_save>:
conf_fcb_kv_save(struct fcb *fcb, const char *name, const char *value)
{
    char buf[CONF_MAX_NAME_LEN + CONF_MAX_VAL_LEN + 32];
    int len;

    if (!name) {
   1df18:	b199      	cbz	r1, 1df42 <conf_fcb_kv_save+0x2a>
{
   1df1a:	b510      	push	{r4, lr}
   1df1c:	b0d8      	sub	sp, #352	; 0x160
   1df1e:	4604      	mov	r4, r0
   1df20:	4613      	mov	r3, r2
   1df22:	460a      	mov	r2, r1
        return OS_INVALID_PARM;
    }

    len = conf_line_make(buf, sizeof(buf), name, value);
   1df24:	f44f 71b0 	mov.w	r1, #352	; 0x160
   1df28:	4668      	mov	r0, sp
   1df2a:	f000 f875 	bl	1e018 <conf_line_make>
   1df2e:	4602      	mov	r2, r0
    if (len < 0 || len + 2 > sizeof(buf)) {
   1df30:	f5b0 7faf 	cmp.w	r0, #350	; 0x15e
   1df34:	d807      	bhi.n	1df46 <conf_fcb_kv_save+0x2e>
        return OS_INVALID_PARM;
    }
    return conf_fcb_append(fcb, buf, len);
   1df36:	4669      	mov	r1, sp
   1df38:	4620      	mov	r0, r4
   1df3a:	f7ff ff85 	bl	1de48 <conf_fcb_append>
}
   1df3e:	b058      	add	sp, #352	; 0x160
   1df40:	bd10      	pop	{r4, pc}
        return OS_INVALID_PARM;
   1df42:	2003      	movs	r0, #3
}
   1df44:	4770      	bx	lr
        return OS_INVALID_PARM;
   1df46:	2003      	movs	r0, #3
   1df48:	e7f9      	b.n	1df3e <conf_fcb_kv_save+0x26>

0001df4a <conf_fcb_save>:
{
   1df4a:	b508      	push	{r3, lr}
    return conf_fcb_kv_save(&cf->cf_fcb, name, value);
   1df4c:	3008      	adds	r0, #8
   1df4e:	f7ff ffe3 	bl	1df18 <conf_fcb_kv_save>
}
   1df52:	bd08      	pop	{r3, pc}

0001df54 <conf_line_parse>:
        FIND_NAME_END,
        FIND_VAL,
        FIND_VAL_END
    } state = FIND_NAME;

    *valp = NULL;
   1df54:	2300      	movs	r3, #0
   1df56:	6013      	str	r3, [r2, #0]
    } state = FIND_NAME;
   1df58:	469c      	mov	ip, r3
    for (cp = buf; *cp != '\0'; cp++) {
   1df5a:	7803      	ldrb	r3, [r0, #0]
   1df5c:	2b00      	cmp	r3, #0
   1df5e:	d04f      	beq.n	1e000 <conf_line_parse+0xac>
{
   1df60:	b500      	push	{lr}
   1df62:	e01a      	b.n	1df9a <conf_line_parse+0x46>
   1df64:	2b20      	cmp	r3, #32
   1df66:	d015      	beq.n	1df94 <conf_line_parse+0x40>
   1df68:	2b0a      	cmp	r3, #10
   1df6a:	d013      	beq.n	1df94 <conf_line_parse+0x40>
   1df6c:	2b09      	cmp	r3, #9
   1df6e:	d011      	beq.n	1df94 <conf_line_parse+0x40>
   1df70:	2b0d      	cmp	r3, #13
   1df72:	d00f      	beq.n	1df94 <conf_line_parse+0x40>
        switch (state) {
        case FIND_NAME:
            if (!isspace((unsigned char)*cp)) {
                *namep = cp;
   1df74:	6008      	str	r0, [r1, #0]
                state = FIND_NAME_END;
   1df76:	f04f 0c01 	mov.w	ip, #1
   1df7a:	e00b      	b.n	1df94 <conf_line_parse+0x40>
            }
            break;
        case FIND_NAME_END:
            if (*cp == '=') {
   1df7c:	2b3d      	cmp	r3, #61	; 0x3d
   1df7e:	d01b      	beq.n	1dfb8 <conf_line_parse+0x64>
   1df80:	2b20      	cmp	r3, #32
   1df82:	d005      	beq.n	1df90 <conf_line_parse+0x3c>
   1df84:	2b0a      	cmp	r3, #10
   1df86:	d003      	beq.n	1df90 <conf_line_parse+0x3c>
   1df88:	2b09      	cmp	r3, #9
   1df8a:	d001      	beq.n	1df90 <conf_line_parse+0x3c>
   1df8c:	2b0d      	cmp	r3, #13
   1df8e:	d101      	bne.n	1df94 <conf_line_parse+0x40>
                *cp = '\0';
                state = FIND_VAL;
            } else if (isspace((unsigned char)*cp)) {
                *cp = '\0';
   1df90:	2300      	movs	r3, #0
   1df92:	7003      	strb	r3, [r0, #0]
    for (cp = buf; *cp != '\0'; cp++) {
   1df94:	3001      	adds	r0, #1
   1df96:	7803      	ldrb	r3, [r0, #0]
   1df98:	b32b      	cbz	r3, 1dfe6 <conf_line_parse+0x92>
        switch (state) {
   1df9a:	f1bc 0f03 	cmp.w	ip, #3
   1df9e:	d8f9      	bhi.n	1df94 <conf_line_parse+0x40>
   1dfa0:	f20f 0e04 	addw	lr, pc, #4
   1dfa4:	f85e f02c 	ldr.w	pc, [lr, ip, lsl #2]
   1dfa8:	0001df65 	.word	0x0001df65
   1dfac:	0001df7d 	.word	0x0001df7d
   1dfb0:	0001dfc3 	.word	0x0001dfc3
   1dfb4:	0001dfdb 	.word	0x0001dfdb
                *cp = '\0';
   1dfb8:	2300      	movs	r3, #0
   1dfba:	7003      	strb	r3, [r0, #0]
                state = FIND_VAL;
   1dfbc:	f04f 0c02 	mov.w	ip, #2
   1dfc0:	e7e8      	b.n	1df94 <conf_line_parse+0x40>
   1dfc2:	2b20      	cmp	r3, #32
   1dfc4:	d0e6      	beq.n	1df94 <conf_line_parse+0x40>
   1dfc6:	2b0a      	cmp	r3, #10
   1dfc8:	d0e4      	beq.n	1df94 <conf_line_parse+0x40>
   1dfca:	2b09      	cmp	r3, #9
   1dfcc:	d0e2      	beq.n	1df94 <conf_line_parse+0x40>
   1dfce:	2b0d      	cmp	r3, #13
   1dfd0:	d0e0      	beq.n	1df94 <conf_line_parse+0x40>
            }
            break;
        case FIND_VAL:
            if (!isspace((unsigned char)*cp)) {
                *valp = cp;
   1dfd2:	6010      	str	r0, [r2, #0]
                state = FIND_VAL_END;
   1dfd4:	f04f 0c03 	mov.w	ip, #3
   1dfd8:	e7dc      	b.n	1df94 <conf_line_parse+0x40>
	return (__c >= 0x20 && __c <= 0x7e);
   1dfda:	3b20      	subs	r3, #32
            }
            break;
        case FIND_VAL_END:
            if (!isprint((unsigned char)*cp)) {
   1dfdc:	2b5e      	cmp	r3, #94	; 0x5e
   1dfde:	d9d9      	bls.n	1df94 <conf_line_parse+0x40>
                *cp = '\0';
   1dfe0:	2300      	movs	r3, #0
   1dfe2:	7003      	strb	r3, [r0, #0]
   1dfe4:	e7d6      	b.n	1df94 <conf_line_parse+0x40>
            }
            break;
        }
    }
    if (state == FIND_VAL_END || state == FIND_VAL) {
   1dfe6:	f1ac 0c02 	sub.w	ip, ip, #2
   1dfea:	fa5f fc8c 	uxtb.w	ip, ip
   1dfee:	f1bc 0f01 	cmp.w	ip, #1
   1dff2:	d802      	bhi.n	1dffa <conf_line_parse+0xa6>
        return 0;
   1dff4:	2000      	movs	r0, #0
    } else {
        return -1;
    }
}
   1dff6:	f85d fb04 	ldr.w	pc, [sp], #4
        return -1;
   1dffa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1dffe:	e7fa      	b.n	1dff6 <conf_line_parse+0xa2>
    if (state == FIND_VAL_END || state == FIND_VAL) {
   1e000:	f1ac 0c02 	sub.w	ip, ip, #2
   1e004:	fa5f fc8c 	uxtb.w	ip, ip
   1e008:	f1bc 0f01 	cmp.w	ip, #1
   1e00c:	d801      	bhi.n	1e012 <conf_line_parse+0xbe>
        return 0;
   1e00e:	2000      	movs	r0, #0
   1e010:	4770      	bx	lr
        return -1;
   1e012:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1e016:	4770      	bx	lr

0001e018 <conf_line_make>:

int
conf_line_make(char *dst, int dlen, const char *name, const char *value)
{
   1e018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e01c:	4606      	mov	r6, r0
   1e01e:	4689      	mov	r9, r1
   1e020:	4690      	mov	r8, r2
   1e022:	461f      	mov	r7, r3
    int nlen;
    int vlen;
    int off;

    nlen = strlen(name);
   1e024:	4610      	mov	r0, r2
   1e026:	f7ef fd23 	bl	da70 <strlen>
   1e02a:	4605      	mov	r5, r0
    if (value) {
   1e02c:	b1e7      	cbz	r7, 1e068 <conf_line_make+0x50>
        vlen = strlen(value);
   1e02e:	4638      	mov	r0, r7
   1e030:	f7ef fd1e 	bl	da70 <strlen>
   1e034:	4604      	mov	r4, r0
    } else {
        vlen = 0;
    }
    if (nlen + vlen + 2 > dlen) {
   1e036:	1963      	adds	r3, r4, r5
   1e038:	3301      	adds	r3, #1
   1e03a:	454b      	cmp	r3, r9
   1e03c:	da16      	bge.n	1e06c <conf_line_make+0x54>
        return -1;
    }
    memcpy(dst, name, nlen);
   1e03e:	462a      	mov	r2, r5
   1e040:	4641      	mov	r1, r8
   1e042:	4630      	mov	r0, r6
   1e044:	f7ef fcd0 	bl	d9e8 <memcpy>
    off = nlen;
    dst[off++] = '=';
   1e048:	f105 0801 	add.w	r8, r5, #1
   1e04c:	233d      	movs	r3, #61	; 0x3d
   1e04e:	5573      	strb	r3, [r6, r5]

    memcpy(dst + off, value, vlen);
   1e050:	4622      	mov	r2, r4
   1e052:	4639      	mov	r1, r7
   1e054:	eb06 0008 	add.w	r0, r6, r8
   1e058:	f7ef fcc6 	bl	d9e8 <memcpy>
    off += vlen;
   1e05c:	eb04 0008 	add.w	r0, r4, r8
    dst[off] = '\0';
   1e060:	2300      	movs	r3, #0
   1e062:	5433      	strb	r3, [r6, r0]

    return off;
}
   1e064:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        vlen = 0;
   1e068:	2400      	movs	r4, #0
   1e06a:	e7e4      	b.n	1e036 <conf_line_make+0x1e>
        return -1;
   1e06c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e070:	e7f8      	b.n	1e064 <conf_line_make+0x4c>

0001e072 <flash_map_read_mfg>:
 * @return                      0 on success; nonzero on failure.
 */
static int
flash_map_read_mfg(int max_areas,
                   struct flash_area *out_areas, int *out_num_areas)
{
   1e072:	b570      	push	{r4, r5, r6, lr}
   1e074:	b086      	sub	sp, #24
   1e076:	4605      	mov	r5, r0
   1e078:	460e      	mov	r6, r1
   1e07a:	4614      	mov	r4, r2
    struct mfg_meta_flash_area meta_flash_area;
    struct mfg_reader reader;
    struct flash_area *fap;
    int rc;

    *out_num_areas = 0;
   1e07c:	2300      	movs	r3, #0
   1e07e:	6013      	str	r3, [r2, #0]

    /* Ensure manufacturing meta region has been located in flash. */
    mfg_init();
   1e080:	f001 fa9e 	bl	1f5c0 <mfg_init>

    mfg_open(&reader);
   1e084:	a801      	add	r0, sp, #4
   1e086:	f001 fac1 	bl	1f60c <mfg_open>

    while (1) {
        if (*out_num_areas >= max_areas) {
   1e08a:	6823      	ldr	r3, [r4, #0]
   1e08c:	42ab      	cmp	r3, r5
   1e08e:	da22      	bge.n	1e0d6 <flash_map_read_mfg+0x64>
            return -1;
        }

        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_FLASH_AREA);
   1e090:	2102      	movs	r1, #2
   1e092:	a801      	add	r0, sp, #4
   1e094:	f001 fa7c 	bl	1f590 <mfg_seek_next_with_type>
        switch (rc) {
   1e098:	f110 0f0f 	cmn.w	r0, #15
   1e09c:	d01e      	beq.n	1e0dc <flash_map_read_mfg+0x6a>
   1e09e:	b9f0      	cbnz	r0, 1e0de <flash_map_read_mfg+0x6c>
            return 0;
        default:
            return rc;
        }

        rc = mfg_read_tlv_flash_area(&reader, &meta_flash_area);
   1e0a0:	a903      	add	r1, sp, #12
   1e0a2:	a801      	add	r0, sp, #4
   1e0a4:	f001 fa81 	bl	1f5aa <mfg_read_tlv_flash_area>
        if (rc != 0) {
   1e0a8:	b9c8      	cbnz	r0, 1e0de <flash_map_read_mfg+0x6c>
            return rc;
        }

        fap = out_areas + *out_num_areas;
   1e0aa:	6823      	ldr	r3, [r4, #0]
   1e0ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1e0b0:	eb06 0283 	add.w	r2, r6, r3, lsl #2
        fap->fa_id = meta_flash_area.area_id;
   1e0b4:	f89d 100c 	ldrb.w	r1, [sp, #12]
   1e0b8:	f806 1023 	strb.w	r1, [r6, r3, lsl #2]
        fap->fa_device_id = meta_flash_area.device_id;
   1e0bc:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1e0c0:	7053      	strb	r3, [r2, #1]
        fap->fa_off = meta_flash_area.offset;
   1e0c2:	f8dd 300e 	ldr.w	r3, [sp, #14]
   1e0c6:	6053      	str	r3, [r2, #4]
        fap->fa_size = meta_flash_area.size;
   1e0c8:	f8dd 3012 	ldr.w	r3, [sp, #18]
   1e0cc:	6093      	str	r3, [r2, #8]

        (*out_num_areas)++;
   1e0ce:	6823      	ldr	r3, [r4, #0]
   1e0d0:	3301      	adds	r3, #1
   1e0d2:	6023      	str	r3, [r4, #0]
        if (*out_num_areas >= max_areas) {
   1e0d4:	e7d9      	b.n	1e08a <flash_map_read_mfg+0x18>
            return -1;
   1e0d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e0da:	e000      	b.n	1e0de <flash_map_read_mfg+0x6c>
        switch (rc) {
   1e0dc:	2000      	movs	r0, #0
    }
}
   1e0de:	b006      	add	sp, #24
   1e0e0:	bd70      	pop	{r4, r5, r6, pc}
	...

0001e0e4 <flash_area_open>:
{
   1e0e4:	b430      	push	{r4, r5}
    if (flash_map == NULL) {
   1e0e6:	4b0e      	ldr	r3, [pc, #56]	; (1e120 <flash_area_open+0x3c>)
   1e0e8:	681c      	ldr	r4, [r3, #0]
   1e0ea:	b1ac      	cbz	r4, 1e118 <flash_area_open+0x34>
    for (i = 0; i < flash_map_entries; i++) {
   1e0ec:	2300      	movs	r3, #0
   1e0ee:	4a0d      	ldr	r2, [pc, #52]	; (1e124 <flash_area_open+0x40>)
   1e0f0:	6812      	ldr	r2, [r2, #0]
   1e0f2:	429a      	cmp	r2, r3
   1e0f4:	dd0c      	ble.n	1e110 <flash_area_open+0x2c>
        area = flash_map + i;
   1e0f6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1e0fa:	eb04 0582 	add.w	r5, r4, r2, lsl #2
        if (area->fa_id == id) {
   1e0fe:	f814 2022 	ldrb.w	r2, [r4, r2, lsl #2]
   1e102:	4282      	cmp	r2, r0
   1e104:	d001      	beq.n	1e10a <flash_area_open+0x26>
    for (i = 0; i < flash_map_entries; i++) {
   1e106:	3301      	adds	r3, #1
   1e108:	e7f1      	b.n	1e0ee <flash_area_open+0xa>
            *fap = area;
   1e10a:	600d      	str	r5, [r1, #0]
            return 0;
   1e10c:	2000      	movs	r0, #0
   1e10e:	e001      	b.n	1e114 <flash_area_open+0x30>
    return SYS_ENOENT;
   1e110:	f06f 0003 	mvn.w	r0, #3
}
   1e114:	bc30      	pop	{r4, r5}
   1e116:	4770      	bx	lr
        return SYS_EACCES;
   1e118:	f06f 0006 	mvn.w	r0, #6
   1e11c:	e7fa      	b.n	1e114 <flash_area_open+0x30>
   1e11e:	bf00      	nop
   1e120:	200047b8 	.word	0x200047b8
   1e124:	200047bc 	.word	0x200047bc

0001e128 <flash_area_to_sectors>:
{
   1e128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e12c:	b084      	sub	sp, #16
   1e12e:	460f      	mov	r7, r1
   1e130:	4616      	mov	r6, r2
    rc = flash_area_open(id, &fa);
   1e132:	fa5f f880 	uxtb.w	r8, r0
   1e136:	a903      	add	r1, sp, #12
   1e138:	4640      	mov	r0, r8
   1e13a:	f7ff ffd3 	bl	1e0e4 <flash_area_open>
    if (rc != 0) {
   1e13e:	4681      	mov	r9, r0
   1e140:	b118      	cbz	r0, 1e14a <flash_area_to_sectors+0x22>
}
   1e142:	4648      	mov	r0, r9
   1e144:	b004      	add	sp, #16
   1e146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    *cnt = 0;
   1e14a:	2300      	movs	r3, #0
   1e14c:	603b      	str	r3, [r7, #0]
    hf = hal_bsp_flash_dev(fa->fa_device_id);
   1e14e:	9b03      	ldr	r3, [sp, #12]
   1e150:	7858      	ldrb	r0, [r3, #1]
   1e152:	f7f5 fbc9 	bl	138e8 <hal_bsp_flash_dev>
   1e156:	4605      	mov	r5, r0
    for (i = 0; i < hf->hf_sector_cnt; i++) {
   1e158:	464c      	mov	r4, r9
   1e15a:	e003      	b.n	1e164 <flash_area_to_sectors+0x3c>
            (*cnt)++;
   1e15c:	683b      	ldr	r3, [r7, #0]
   1e15e:	3301      	adds	r3, #1
   1e160:	603b      	str	r3, [r7, #0]
    for (i = 0; i < hf->hf_sector_cnt; i++) {
   1e162:	3401      	adds	r4, #1
   1e164:	68eb      	ldr	r3, [r5, #12]
   1e166:	42a3      	cmp	r3, r4
   1e168:	ddeb      	ble.n	1e142 <flash_area_to_sectors+0x1a>
        hf->hf_itf->hff_sector_info(hf, i, &start, &size);
   1e16a:	682b      	ldr	r3, [r5, #0]
   1e16c:	f8d3 a00c 	ldr.w	sl, [r3, #12]
   1e170:	ab01      	add	r3, sp, #4
   1e172:	aa02      	add	r2, sp, #8
   1e174:	4621      	mov	r1, r4
   1e176:	4628      	mov	r0, r5
   1e178:	47d0      	blx	sl
        if (start >= fa->fa_off && start < fa->fa_off + fa->fa_size) {
   1e17a:	9903      	ldr	r1, [sp, #12]
   1e17c:	684b      	ldr	r3, [r1, #4]
   1e17e:	9a02      	ldr	r2, [sp, #8]
   1e180:	4293      	cmp	r3, r2
   1e182:	d8ee      	bhi.n	1e162 <flash_area_to_sectors+0x3a>
   1e184:	6889      	ldr	r1, [r1, #8]
   1e186:	440b      	add	r3, r1
   1e188:	429a      	cmp	r2, r3
   1e18a:	d2ea      	bcs.n	1e162 <flash_area_to_sectors+0x3a>
            if (ret) {
   1e18c:	2e00      	cmp	r6, #0
   1e18e:	d0e5      	beq.n	1e15c <flash_area_to_sectors+0x34>
                ret->fa_id = id;
   1e190:	f886 8000 	strb.w	r8, [r6]
                ret->fa_device_id = fa->fa_device_id;
   1e194:	9b03      	ldr	r3, [sp, #12]
   1e196:	785b      	ldrb	r3, [r3, #1]
   1e198:	7073      	strb	r3, [r6, #1]
                ret->fa_off = start;
   1e19a:	6072      	str	r2, [r6, #4]
                ret->fa_size = size;
   1e19c:	9b01      	ldr	r3, [sp, #4]
   1e19e:	60b3      	str	r3, [r6, #8]
                ret++;
   1e1a0:	360c      	adds	r6, #12
   1e1a2:	e7db      	b.n	1e15c <flash_area_to_sectors+0x34>

0001e1a4 <flash_area_read>:
{
   1e1a4:	b510      	push	{r4, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   1e1a6:	6884      	ldr	r4, [r0, #8]
   1e1a8:	428c      	cmp	r4, r1
   1e1aa:	d309      	bcc.n	1e1c0 <flash_area_read+0x1c>
   1e1ac:	eb01 0c03 	add.w	ip, r1, r3
   1e1b0:	4564      	cmp	r4, ip
   1e1b2:	d308      	bcc.n	1e1c6 <flash_area_read+0x22>
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
   1e1b4:	6844      	ldr	r4, [r0, #4]
   1e1b6:	4421      	add	r1, r4
   1e1b8:	7840      	ldrb	r0, [r0, #1]
   1e1ba:	f002 fd48 	bl	20c4e <hal_flash_read>
}
   1e1be:	bd10      	pop	{r4, pc}
        return -1;
   1e1c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e1c4:	e7fb      	b.n	1e1be <flash_area_read+0x1a>
   1e1c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e1ca:	e7f8      	b.n	1e1be <flash_area_read+0x1a>

0001e1cc <flash_area_write>:
{
   1e1cc:	b510      	push	{r4, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   1e1ce:	6884      	ldr	r4, [r0, #8]
   1e1d0:	428c      	cmp	r4, r1
   1e1d2:	d309      	bcc.n	1e1e8 <flash_area_write+0x1c>
   1e1d4:	eb01 0c03 	add.w	ip, r1, r3
   1e1d8:	4564      	cmp	r4, ip
   1e1da:	d308      	bcc.n	1e1ee <flash_area_write+0x22>
    return hal_flash_write(fa->fa_device_id, fa->fa_off + off,
   1e1dc:	6844      	ldr	r4, [r0, #4]
   1e1de:	4421      	add	r1, r4
   1e1e0:	7840      	ldrb	r0, [r0, #1]
   1e1e2:	f002 fd5d 	bl	20ca0 <hal_flash_write>
}
   1e1e6:	bd10      	pop	{r4, pc}
        return -1;
   1e1e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e1ec:	e7fb      	b.n	1e1e6 <flash_area_write+0x1a>
   1e1ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e1f2:	e7f8      	b.n	1e1e6 <flash_area_write+0x1a>

0001e1f4 <flash_area_erase>:
{
   1e1f4:	b508      	push	{r3, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   1e1f6:	6883      	ldr	r3, [r0, #8]
   1e1f8:	428b      	cmp	r3, r1
   1e1fa:	d309      	bcc.n	1e210 <flash_area_erase+0x1c>
   1e1fc:	eb01 0c02 	add.w	ip, r1, r2
   1e200:	4563      	cmp	r3, ip
   1e202:	d308      	bcc.n	1e216 <flash_area_erase+0x22>
    return hal_flash_erase(fa->fa_device_id, fa->fa_off + off, len);
   1e204:	6843      	ldr	r3, [r0, #4]
   1e206:	4419      	add	r1, r3
   1e208:	7840      	ldrb	r0, [r0, #1]
   1e20a:	f002 fd81 	bl	20d10 <hal_flash_erase>
}
   1e20e:	bd08      	pop	{r3, pc}
        return -1;
   1e210:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e214:	e7fb      	b.n	1e20e <flash_area_erase+0x1a>
   1e216:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e21a:	e7f8      	b.n	1e20e <flash_area_erase+0x1a>

0001e21c <flash_area_align>:
{
   1e21c:	b508      	push	{r3, lr}
    return hal_flash_align(fa->fa_device_id);
   1e21e:	7840      	ldrb	r0, [r0, #1]
   1e220:	f002 fd05 	bl	20c2e <hal_flash_align>
}
   1e224:	bd08      	pop	{r3, pc}

0001e226 <flash_area_erased_val>:
{
   1e226:	b508      	push	{r3, lr}
    return hal_flash_erased_val(fa->fa_device_id);
   1e228:	7840      	ldrb	r0, [r0, #1]
   1e22a:	f002 fd08 	bl	20c3e <hal_flash_erased_val>
}
   1e22e:	bd08      	pop	{r3, pc}

0001e230 <flash_area_is_empty>:
{
   1e230:	b510      	push	{r4, lr}
   1e232:	460c      	mov	r4, r1
    *empty = false;
   1e234:	2300      	movs	r3, #0
   1e236:	700b      	strb	r3, [r1, #0]
    rc = hal_flash_isempty_no_buf(fa->fa_device_id, fa->fa_off, fa->fa_size);
   1e238:	6882      	ldr	r2, [r0, #8]
   1e23a:	6841      	ldr	r1, [r0, #4]
   1e23c:	7840      	ldrb	r0, [r0, #1]
   1e23e:	f002 fe17 	bl	20e70 <hal_flash_isempty_no_buf>
    if (rc < 0) {
   1e242:	2800      	cmp	r0, #0
   1e244:	db02      	blt.n	1e24c <flash_area_is_empty+0x1c>
    } else if (rc == 1) {
   1e246:	2801      	cmp	r0, #1
   1e248:	d001      	beq.n	1e24e <flash_area_is_empty+0x1e>
    return 0;
   1e24a:	2000      	movs	r0, #0
}
   1e24c:	bd10      	pop	{r4, pc}
        *empty = true;
   1e24e:	2301      	movs	r3, #1
   1e250:	7023      	strb	r3, [r4, #0]
    return 0;
   1e252:	2000      	movs	r0, #0
   1e254:	e7fa      	b.n	1e24c <flash_area_is_empty+0x1c>

0001e256 <flash_area_read_is_empty>:
{
   1e256:	b510      	push	{r4, lr}
    return hal_flash_isempty(fa->fa_device_id, fa->fa_off + off, dst, len);
   1e258:	6844      	ldr	r4, [r0, #4]
   1e25a:	4421      	add	r1, r4
   1e25c:	7840      	ldrb	r0, [r0, #1]
   1e25e:	f002 fdd6 	bl	20e0e <hal_flash_isempty>
}
   1e262:	bd10      	pop	{r4, pc}

0001e264 <flash_area_id_from_image_slot>:
    switch (slot) {
   1e264:	b150      	cbz	r0, 1e27c <flash_area_id_from_image_slot+0x18>
{
   1e266:	b508      	push	{r3, lr}
    switch (slot) {
   1e268:	2801      	cmp	r0, #1
   1e26a:	d101      	bne.n	1e270 <flash_area_id_from_image_slot+0xc>
        return FLASH_AREA_IMAGE_1;
   1e26c:	2002      	movs	r0, #2
}
   1e26e:	bd08      	pop	{r3, pc}
        assert(0);
   1e270:	2300      	movs	r3, #0
   1e272:	461a      	mov	r2, r3
   1e274:	4619      	mov	r1, r3
   1e276:	4618      	mov	r0, r3
   1e278:	f7ea fee8 	bl	904c <__assert_func>
    switch (slot) {
   1e27c:	2001      	movs	r0, #1
}
   1e27e:	4770      	bx	lr

0001e280 <flash_map_init>:

void
flash_map_init(void)
{
   1e280:	b510      	push	{r4, lr}
   1e282:	b084      	sub	sp, #16

    int num_areas;
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1e284:	4b14      	ldr	r3, [pc, #80]	; (1e2d8 <flash_map_init+0x58>)
   1e286:	781b      	ldrb	r3, [r3, #0]
   1e288:	b303      	cbz	r3, 1e2cc <flash_map_init+0x4c>

    rc = hal_flash_init();
   1e28a:	f002 fcbc 	bl	20c06 <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1e28e:	b138      	cbz	r0, 1e2a0 <flash_map_init+0x20>
   1e290:	2000      	movs	r0, #0
   1e292:	9000      	str	r0, [sp, #0]
   1e294:	4b11      	ldr	r3, [pc, #68]	; (1e2dc <flash_map_init+0x5c>)
   1e296:	681c      	ldr	r4, [r3, #0]
   1e298:	4603      	mov	r3, r0
   1e29a:	4602      	mov	r2, r0
   1e29c:	4601      	mov	r1, r0
   1e29e:	47a0      	blx	r4
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
   1e2a0:	4b0f      	ldr	r3, [pc, #60]	; (1e2e0 <flash_map_init+0x60>)
   1e2a2:	4a10      	ldr	r2, [pc, #64]	; (1e2e4 <flash_map_init+0x64>)
   1e2a4:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
   1e2a6:	4b10      	ldr	r3, [pc, #64]	; (1e2e8 <flash_map_init+0x68>)
   1e2a8:	2206      	movs	r2, #6
   1e2aa:	601a      	str	r2, [r3, #0]

    /* Attempt to read the flash map from the manufacturing meta regions.  On
     * success, use the new flash map instead of the default hardcoded one.
     */
    rc = flash_map_read_mfg(sizeof mfg_areas / sizeof mfg_areas[0],
   1e2ac:	aa03      	add	r2, sp, #12
   1e2ae:	490f      	ldr	r1, [pc, #60]	; (1e2ec <flash_map_init+0x6c>)
   1e2b0:	200a      	movs	r0, #10
   1e2b2:	f7ff fede 	bl	1e072 <flash_map_read_mfg>
                            mfg_areas, &num_areas);
    if (rc == 0 && num_areas > 0) {
   1e2b6:	b938      	cbnz	r0, 1e2c8 <flash_map_init+0x48>
   1e2b8:	9b03      	ldr	r3, [sp, #12]
   1e2ba:	2b00      	cmp	r3, #0
   1e2bc:	dd04      	ble.n	1e2c8 <flash_map_init+0x48>
        flash_map = mfg_areas;
   1e2be:	4a08      	ldr	r2, [pc, #32]	; (1e2e0 <flash_map_init+0x60>)
   1e2c0:	490a      	ldr	r1, [pc, #40]	; (1e2ec <flash_map_init+0x6c>)
   1e2c2:	6011      	str	r1, [r2, #0]
        flash_map_entries = num_areas;
   1e2c4:	4a08      	ldr	r2, [pc, #32]	; (1e2e8 <flash_map_init+0x68>)
   1e2c6:	6013      	str	r3, [r2, #0]
    }
}
   1e2c8:	b004      	add	sp, #16
   1e2ca:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1e2cc:	461a      	mov	r2, r3
   1e2ce:	4619      	mov	r1, r3
   1e2d0:	4618      	mov	r0, r3
   1e2d2:	f7ea febb 	bl	904c <__assert_func>
   1e2d6:	bf00      	nop
   1e2d8:	20004548 	.word	0x20004548
   1e2dc:	2000064c 	.word	0x2000064c
   1e2e0:	200047b8 	.word	0x200047b8
   1e2e4:	00024cf0 	.word	0x00024cf0
   1e2e8:	200047bc 	.word	0x200047bc
   1e2ec:	200047c0 	.word	0x200047c0

0001e2f0 <log_registered>:
static int
log_registered(struct log *log)
{
    struct log *cur;

    STAILQ_FOREACH(cur, &g_log_list, l_next) {
   1e2f0:	4b05      	ldr	r3, [pc, #20]	; (1e308 <log_registered+0x18>)
   1e2f2:	681b      	ldr	r3, [r3, #0]
   1e2f4:	e000      	b.n	1e2f8 <log_registered+0x8>
   1e2f6:	68db      	ldr	r3, [r3, #12]
   1e2f8:	b11b      	cbz	r3, 1e302 <log_registered+0x12>
        if (cur == log) {
   1e2fa:	4283      	cmp	r3, r0
   1e2fc:	d1fb      	bne.n	1e2f6 <log_registered+0x6>
            return 1;
   1e2fe:	2001      	movs	r0, #1
        }
    }

    return 0;
}
   1e300:	4770      	bx	lr
    return 0;
   1e302:	2000      	movs	r0, #0
   1e304:	4770      	bx	lr
   1e306:	bf00      	nop
   1e308:	20000fac 	.word	0x20000fac

0001e30c <log_chk_type>:
            break;
    }
#endif

    return rc;
}
   1e30c:	2000      	movs	r0, #0
   1e30e:	4770      	bx	lr

0001e310 <log_chk_max_entry_len>:
log_chk_max_entry_len(struct log *log, uint16_t len)
{
    int rc;

    rc = OS_OK;
    if (log->l_max_entry_len != 0) {
   1e310:	8ac3      	ldrh	r3, [r0, #22]
   1e312:	b11b      	cbz	r3, 1e31c <log_chk_max_entry_len+0xc>
        if (len > log->l_max_entry_len) {
   1e314:	428b      	cmp	r3, r1
   1e316:	d303      	bcc.n	1e320 <log_chk_max_entry_len+0x10>
    rc = OS_OK;
   1e318:	2000      	movs	r0, #0
   1e31a:	4770      	bx	lr
   1e31c:	2000      	movs	r0, #0
   1e31e:	4770      	bx	lr
            LOG_STATS_INC(log, too_long);
            rc = OS_ENOMEM;
   1e320:	2001      	movs	r0, #1
        }
    }

    return rc;
}
   1e322:	4770      	bx	lr

0001e324 <log_call_append_cb>:
/**
 * Calls the given log's append callback, if it has one.
 */
static void
log_call_append_cb(struct log *log, uint32_t idx)
{
   1e324:	b500      	push	{lr}
   1e326:	b083      	sub	sp, #12
     * preventing a TOCTTOU race.
     * (This all assumes that function pointer reads and writes are atomic.)
     */
    log_append_cb * volatile cb;

    cb = log->l_append_cb;
   1e328:	6903      	ldr	r3, [r0, #16]
   1e32a:	9301      	str	r3, [sp, #4]
    if (cb != NULL) {
   1e32c:	9b01      	ldr	r3, [sp, #4]
   1e32e:	b10b      	cbz	r3, 1e334 <log_call_append_cb+0x10>
        cb(log, idx);
   1e330:	9b01      	ldr	r3, [sp, #4]
   1e332:	4798      	blx	r3
    }
}
   1e334:	b003      	add	sp, #12
   1e336:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0001e33c <log_append_prepare>:
{
   1e33c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e340:	b085      	sub	sp, #20
   1e342:	4605      	mov	r5, r0
   1e344:	4688      	mov	r8, r1
   1e346:	4614      	mov	r4, r2
   1e348:	461f      	mov	r7, r3
   1e34a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    rc = log_chk_type(etype);
   1e34c:	4618      	mov	r0, r3
   1e34e:	f7ff ffdd 	bl	1e30c <log_chk_type>
    assert(rc == OS_OK);
   1e352:	2800      	cmp	r0, #0
   1e354:	d136      	bne.n	1e3c4 <log_append_prepare+0x88>
    if (log->l_name == NULL || log->l_log == NULL) {
   1e356:	682b      	ldr	r3, [r5, #0]
   1e358:	2b00      	cmp	r3, #0
   1e35a:	d063      	beq.n	1e424 <log_append_prepare+0xe8>
   1e35c:	686b      	ldr	r3, [r5, #4]
   1e35e:	2b00      	cmp	r3, #0
   1e360:	d063      	beq.n	1e42a <log_append_prepare+0xee>
    if (level > LOG_LEVEL_MAX) {
   1e362:	2c0f      	cmp	r4, #15
   1e364:	d900      	bls.n	1e368 <log_append_prepare+0x2c>
        level = LOG_LEVEL_MAX;
   1e366:	240f      	movs	r4, #15
    if (log->l_log->log_type == LOG_TYPE_STORAGE) {
   1e368:	681b      	ldr	r3, [r3, #0]
   1e36a:	2b02      	cmp	r3, #2
   1e36c:	d030      	beq.n	1e3d0 <log_append_prepare+0x94>
    if (level < log->l_level) {
   1e36e:	7d2b      	ldrb	r3, [r5, #20]
   1e370:	42a3      	cmp	r3, r4
   1e372:	d85d      	bhi.n	1e430 <log_append_prepare+0xf4>
    if (level < log_level_get(module)) {
   1e374:	4640      	mov	r0, r8
   1e376:	f000 fa7b 	bl	1e870 <log_level_get>
   1e37a:	42a0      	cmp	r0, r4
   1e37c:	d85b      	bhi.n	1e436 <log_append_prepare+0xfa>
    OS_ENTER_CRITICAL(sr);
   1e37e:	f7ec f87d 	bl	a47c <os_arch_save_sr>
    idx = g_log_info.li_next_index++;
   1e382:	4b2e      	ldr	r3, [pc, #184]	; (1e43c <log_append_prepare+0x100>)
   1e384:	681d      	ldr	r5, [r3, #0]
   1e386:	1c6a      	adds	r2, r5, #1
   1e388:	601a      	str	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   1e38a:	f7ec f87d 	bl	a488 <os_arch_restore_sr>
    rc = os_gettimeofday(&tv, NULL);
   1e38e:	2100      	movs	r1, #0
   1e390:	4668      	mov	r0, sp
   1e392:	f7eb ff89 	bl	a2a8 <os_gettimeofday>
    if (rc || tv.tv_sec < UTC01_01_2016) {
   1e396:	4681      	mov	r9, r0
   1e398:	b938      	cbnz	r0, 1e3aa <log_append_prepare+0x6e>
   1e39a:	9800      	ldr	r0, [sp, #0]
   1e39c:	9901      	ldr	r1, [sp, #4]
   1e39e:	4b28      	ldr	r3, [pc, #160]	; (1e440 <log_append_prepare+0x104>)
   1e3a0:	4283      	cmp	r3, r0
   1e3a2:	f04f 0300 	mov.w	r3, #0
   1e3a6:	418b      	sbcs	r3, r1
   1e3a8:	db16      	blt.n	1e3d8 <log_append_prepare+0x9c>
        ue->ue_ts = os_get_uptime_usec();
   1e3aa:	f7ec f821 	bl	a3f0 <os_get_uptime_usec>
   1e3ae:	6030      	str	r0, [r6, #0]
   1e3b0:	6071      	str	r1, [r6, #4]
    ue->ue_level = level;
   1e3b2:	7374      	strb	r4, [r6, #13]
    ue->ue_module = module;
   1e3b4:	f886 800c 	strb.w	r8, [r6, #12]
    ue->ue_index = idx;
   1e3b8:	60b5      	str	r5, [r6, #8]
    assert(etype == LOG_ETYPE_STRING);
   1e3ba:	bb6f      	cbnz	r7, 1e418 <log_append_prepare+0xdc>
}
   1e3bc:	4648      	mov	r0, r9
   1e3be:	b005      	add	sp, #20
   1e3c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    assert(rc == OS_OK);
   1e3c4:	2300      	movs	r3, #0
   1e3c6:	461a      	mov	r2, r3
   1e3c8:	4619      	mov	r1, r3
   1e3ca:	4618      	mov	r0, r3
   1e3cc:	f7ea fe3e 	bl	904c <__assert_func>
        log_written = 1;
   1e3d0:	4b1c      	ldr	r3, [pc, #112]	; (1e444 <log_append_prepare+0x108>)
   1e3d2:	2201      	movs	r2, #1
   1e3d4:	701a      	strb	r2, [r3, #0]
   1e3d6:	e7ca      	b.n	1e36e <log_append_prepare+0x32>
        ue->ue_ts = tv.tv_sec * 1000000 + tv.tv_usec;
   1e3d8:	014a      	lsls	r2, r1, #5
   1e3da:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
   1e3de:	0143      	lsls	r3, r0, #5
   1e3e0:	1a1b      	subs	r3, r3, r0
   1e3e2:	eb62 0201 	sbc.w	r2, r2, r1
   1e3e6:	0252      	lsls	r2, r2, #9
   1e3e8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
   1e3ec:	025b      	lsls	r3, r3, #9
   1e3ee:	181b      	adds	r3, r3, r0
   1e3f0:	eb41 0c02 	adc.w	ip, r1, r2
   1e3f4:	ea4f 1e8c 	mov.w	lr, ip, lsl #6
   1e3f8:	ea4e 6e93 	orr.w	lr, lr, r3, lsr #26
   1e3fc:	019a      	lsls	r2, r3, #6
   1e3fe:	1ad3      	subs	r3, r2, r3
   1e400:	eb6e 020c 	sbc.w	r2, lr, ip
   1e404:	181b      	adds	r3, r3, r0
   1e406:	eb41 0102 	adc.w	r1, r1, r2
   1e40a:	9a02      	ldr	r2, [sp, #8]
   1e40c:	189b      	adds	r3, r3, r2
   1e40e:	eb41 71e2 	adc.w	r1, r1, r2, asr #31
   1e412:	6033      	str	r3, [r6, #0]
   1e414:	6071      	str	r1, [r6, #4]
   1e416:	e7cc      	b.n	1e3b2 <log_append_prepare+0x76>
    assert(etype == LOG_ETYPE_STRING);
   1e418:	2300      	movs	r3, #0
   1e41a:	461a      	mov	r2, r3
   1e41c:	4619      	mov	r1, r3
   1e41e:	4618      	mov	r0, r3
   1e420:	f7ea fe14 	bl	904c <__assert_func>
        rc = -1;
   1e424:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   1e428:	e7c8      	b.n	1e3bc <log_append_prepare+0x80>
   1e42a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   1e42e:	e7c5      	b.n	1e3bc <log_append_prepare+0x80>
        rc = -1;
   1e430:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   1e434:	e7c2      	b.n	1e3bc <log_append_prepare+0x80>
        rc = -1;
   1e436:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    return (rc);
   1e43a:	e7bf      	b.n	1e3bc <log_append_prepare+0x80>
   1e43c:	20004838 	.word	0x20004838
   1e440:	5685c17f 	.word	0x5685c17f
   1e444:	20004844 	.word	0x20004844

0001e448 <log_init>:
{
   1e448:	b510      	push	{r4, lr}
   1e44a:	b082      	sub	sp, #8
    SYSINIT_ASSERT_ACTIVE();
   1e44c:	4b11      	ldr	r3, [pc, #68]	; (1e494 <log_init+0x4c>)
   1e44e:	781b      	ldrb	r3, [r3, #0]
   1e450:	b1d3      	cbz	r3, 1e488 <log_init+0x40>
    memset(g_log_module_list, 0, sizeof(g_log_module_list));
   1e452:	2300      	movs	r3, #0
   1e454:	4a10      	ldr	r2, [pc, #64]	; (1e498 <log_init+0x50>)
   1e456:	6013      	str	r3, [r2, #0]
    log_written = 0;
   1e458:	4a10      	ldr	r2, [pc, #64]	; (1e49c <log_init+0x54>)
   1e45a:	7013      	strb	r3, [r2, #0]
    STAILQ_INIT(&g_log_list);
   1e45c:	4a10      	ldr	r2, [pc, #64]	; (1e4a0 <log_init+0x58>)
   1e45e:	6013      	str	r3, [r2, #0]
   1e460:	6052      	str	r2, [r2, #4]
    g_log_info.li_version = MYNEWT_VAL(LOG_VERSION);
   1e462:	4a10      	ldr	r2, [pc, #64]	; (1e4a4 <log_init+0x5c>)
   1e464:	2102      	movs	r1, #2
   1e466:	7111      	strb	r1, [r2, #4]
    g_log_info.li_next_index = 0;
   1e468:	6013      	str	r3, [r2, #0]
    rc = log_nmgr_register_group();
   1e46a:	f000 fe09 	bl	1f080 <log_nmgr_register_group>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1e46e:	b138      	cbz	r0, 1e480 <log_init+0x38>
   1e470:	2000      	movs	r0, #0
   1e472:	9000      	str	r0, [sp, #0]
   1e474:	4b0c      	ldr	r3, [pc, #48]	; (1e4a8 <log_init+0x60>)
   1e476:	681c      	ldr	r4, [r3, #0]
   1e478:	4603      	mov	r3, r0
   1e47a:	4602      	mov	r2, r0
   1e47c:	4601      	mov	r1, r0
   1e47e:	47a0      	blx	r4
    log_console_init();
   1e480:	f000 f9ce 	bl	1e820 <log_console_init>
}
   1e484:	b002      	add	sp, #8
   1e486:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1e488:	461a      	mov	r2, r3
   1e48a:	4619      	mov	r1, r3
   1e48c:	4618      	mov	r0, r3
   1e48e:	f7ea fddd 	bl	904c <__assert_func>
   1e492:	bf00      	nop
   1e494:	20004548 	.word	0x20004548
   1e498:	20004840 	.word	0x20004840
   1e49c:	20004844 	.word	0x20004844
   1e4a0:	20000fac 	.word	0x20000fac
   1e4a4:	20004838 	.word	0x20004838
   1e4a8:	2000064c 	.word	0x2000064c

0001e4ac <log_list_get_next>:
    if (log == NULL) {
   1e4ac:	b108      	cbz	r0, 1e4b2 <log_list_get_next+0x6>
        next = STAILQ_NEXT(log, l_next);
   1e4ae:	68c0      	ldr	r0, [r0, #12]
}
   1e4b0:	4770      	bx	lr
        next = STAILQ_FIRST(&g_log_list);
   1e4b2:	4b01      	ldr	r3, [pc, #4]	; (1e4b8 <log_list_get_next+0xc>)
   1e4b4:	6818      	ldr	r0, [r3, #0]
   1e4b6:	4770      	bx	lr
   1e4b8:	20000fac 	.word	0x20000fac

0001e4bc <log_module_get_name>:
    if (module < LOG_MODULE_PERUSER) {
   1e4bc:	283f      	cmp	r0, #63	; 0x3f
   1e4be:	d81a      	bhi.n	1e4f6 <log_module_get_name+0x3a>
        switch (module) {
   1e4c0:	2808      	cmp	r0, #8
   1e4c2:	d806      	bhi.n	1e4d2 <log_module_get_name+0x16>
   1e4c4:	e8df f000 	tbb	[pc, r0]
   1e4c8:	0b09071e 	.word	0x0b09071e
   1e4cc:	13110f0d 	.word	0x13110f0d
   1e4d0:	15          	.byte	0x15
   1e4d1:	00          	.byte	0x00
   1e4d2:	2000      	movs	r0, #0
   1e4d4:	4770      	bx	lr
            return "OS";
   1e4d6:	480d      	ldr	r0, [pc, #52]	; (1e50c <log_module_get_name+0x50>)
   1e4d8:	4770      	bx	lr
            return "NEWTMGR";
   1e4da:	480d      	ldr	r0, [pc, #52]	; (1e510 <log_module_get_name+0x54>)
   1e4dc:	4770      	bx	lr
            return "NIMBLE_CTLR";
   1e4de:	480d      	ldr	r0, [pc, #52]	; (1e514 <log_module_get_name+0x58>)
   1e4e0:	4770      	bx	lr
            return "NIMBLE_HOST";
   1e4e2:	480d      	ldr	r0, [pc, #52]	; (1e518 <log_module_get_name+0x5c>)
   1e4e4:	4770      	bx	lr
            return "NFFS";
   1e4e6:	480d      	ldr	r0, [pc, #52]	; (1e51c <log_module_get_name+0x60>)
   1e4e8:	4770      	bx	lr
            return "REBOOT";
   1e4ea:	480d      	ldr	r0, [pc, #52]	; (1e520 <log_module_get_name+0x64>)
   1e4ec:	4770      	bx	lr
            return "IOTIVITY";
   1e4ee:	480d      	ldr	r0, [pc, #52]	; (1e524 <log_module_get_name+0x68>)
   1e4f0:	4770      	bx	lr
            return "TEST";
   1e4f2:	480d      	ldr	r0, [pc, #52]	; (1e528 <log_module_get_name+0x6c>)
   1e4f4:	4770      	bx	lr
    } else if (module - LOG_MODULE_PERUSER < MYNEWT_VAL(LOG_MAX_USER_MODULES)) {
   1e4f6:	2840      	cmp	r0, #64	; 0x40
   1e4f8:	d806      	bhi.n	1e508 <log_module_get_name+0x4c>
        return g_log_module_list[module - LOG_MODULE_PERUSER];
   1e4fa:	3840      	subs	r0, #64	; 0x40
   1e4fc:	4b0b      	ldr	r3, [pc, #44]	; (1e52c <log_module_get_name+0x70>)
   1e4fe:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1e502:	4770      	bx	lr
            return "DEFAULT";
   1e504:	480a      	ldr	r0, [pc, #40]	; (1e530 <log_module_get_name+0x74>)
   1e506:	4770      	bx	lr
    return NULL;
   1e508:	2000      	movs	r0, #0
}
   1e50a:	4770      	bx	lr
   1e50c:	00024a80 	.word	0x00024a80
   1e510:	00024a84 	.word	0x00024a84
   1e514:	00024a8c 	.word	0x00024a8c
   1e518:	00024a98 	.word	0x00024a98
   1e51c:	00024aa4 	.word	0x00024aa4
   1e520:	00024aac 	.word	0x00024aac
   1e524:	00024ab4 	.word	0x00024ab4
   1e528:	00024ac0 	.word	0x00024ac0
   1e52c:	20004840 	.word	0x20004840
   1e530:	00024a78 	.word	0x00024a78

0001e534 <log_append_body>:
}

int
log_append_body(struct log *log, uint8_t module, uint8_t level, uint8_t etype,
                const void *body, uint16_t body_len)
{
   1e534:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e538:	b087      	sub	sp, #28
   1e53a:	4604      	mov	r4, r0
   1e53c:	460d      	mov	r5, r1
   1e53e:	4691      	mov	r9, r2
   1e540:	461e      	mov	r6, r3
   1e542:	f8bd 803c 	ldrh.w	r8, [sp, #60]	; 0x3c
    struct log_entry_hdr hdr;
    int rc;

    LOG_STATS_INC(log, writes);

    rc = log_chk_max_entry_len(log, body_len);
   1e546:	4641      	mov	r1, r8
   1e548:	f7ff fee2 	bl	1e310 <log_chk_max_entry_len>
    if (rc != OS_OK) {
   1e54c:	4607      	mov	r7, r0
   1e54e:	b118      	cbz	r0, 1e558 <log_append_body+0x24>
    }

    log_call_append_cb(log, hdr.ue_index);

    return 0;
}
   1e550:	4638      	mov	r0, r7
   1e552:	b007      	add	sp, #28
   1e554:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    rc = log_append_prepare(log, module, level, etype, &hdr);
   1e558:	ab02      	add	r3, sp, #8
   1e55a:	9300      	str	r3, [sp, #0]
   1e55c:	4633      	mov	r3, r6
   1e55e:	464a      	mov	r2, r9
   1e560:	4629      	mov	r1, r5
   1e562:	4620      	mov	r0, r4
   1e564:	f7ff feea 	bl	1e33c <log_append_prepare>
    if (rc != 0) {
   1e568:	4607      	mov	r7, r0
   1e56a:	2800      	cmp	r0, #0
   1e56c:	d1f0      	bne.n	1e550 <log_append_body+0x1c>
    rc = log->l_log->log_append_body(log, &hdr, body, body_len);
   1e56e:	6863      	ldr	r3, [r4, #4]
   1e570:	691d      	ldr	r5, [r3, #16]
   1e572:	4643      	mov	r3, r8
   1e574:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1e576:	a902      	add	r1, sp, #8
   1e578:	4620      	mov	r0, r4
   1e57a:	47a8      	blx	r5
    if (rc != 0) {
   1e57c:	4607      	mov	r7, r0
   1e57e:	2800      	cmp	r0, #0
   1e580:	d1e6      	bne.n	1e550 <log_append_body+0x1c>
    log_call_append_cb(log, hdr.ue_index);
   1e582:	9904      	ldr	r1, [sp, #16]
   1e584:	4620      	mov	r0, r4
   1e586:	f7ff fecd 	bl	1e324 <log_call_append_cb>
    return 0;
   1e58a:	e7e1      	b.n	1e550 <log_append_body+0x1c>

0001e58c <log_printf>:
}

void
log_printf(struct log *log, uint8_t module, uint8_t level,
           const char *msg, ...)
{
   1e58c:	b408      	push	{r3}
   1e58e:	b570      	push	{r4, r5, r6, lr}
   1e590:	b0a5      	sub	sp, #148	; 0x94
   1e592:	4604      	mov	r4, r0
   1e594:	460d      	mov	r5, r1
   1e596:	4616      	mov	r6, r2
   1e598:	ab29      	add	r3, sp, #164	; 0xa4
   1e59a:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    char buf[LOG_PRINTF_MAX_ENTRY_LEN];
    int len;

    va_start(args, msg);
   1e59e:	9323      	str	r3, [sp, #140]	; 0x8c
    len = vsnprintf(buf, LOG_PRINTF_MAX_ENTRY_LEN, msg, args);
   1e5a0:	2180      	movs	r1, #128	; 0x80
   1e5a2:	a803      	add	r0, sp, #12
   1e5a4:	f7ef fe52 	bl	e24c <vsnprintf>
    va_end(args);
    if (len >= LOG_PRINTF_MAX_ENTRY_LEN) {
   1e5a8:	287f      	cmp	r0, #127	; 0x7f
   1e5aa:	dd00      	ble.n	1e5ae <log_printf+0x22>
        len = LOG_PRINTF_MAX_ENTRY_LEN-1;
   1e5ac:	207f      	movs	r0, #127	; 0x7f
    }

    log_append_body(log, module, level, LOG_ETYPE_STRING, buf, len);
   1e5ae:	b280      	uxth	r0, r0
   1e5b0:	9001      	str	r0, [sp, #4]
   1e5b2:	ab03      	add	r3, sp, #12
   1e5b4:	9300      	str	r3, [sp, #0]
   1e5b6:	2300      	movs	r3, #0
   1e5b8:	4632      	mov	r2, r6
   1e5ba:	4629      	mov	r1, r5
   1e5bc:	4620      	mov	r0, r4
   1e5be:	f7ff ffb9 	bl	1e534 <log_append_body>
}
   1e5c2:	b025      	add	sp, #148	; 0x94
   1e5c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1e5c8:	b001      	add	sp, #4
   1e5ca:	4770      	bx	lr

0001e5cc <log_walk>:

int
log_walk(struct log *log, log_walk_func_t walk_func,
         struct log_offset *log_offset)
{
   1e5cc:	b508      	push	{r3, lr}
    int rc;

    rc = log->l_log->log_walk(log, walk_func, log_offset);
   1e5ce:	6843      	ldr	r3, [r0, #4]
   1e5d0:	69db      	ldr	r3, [r3, #28]
   1e5d2:	4798      	blx	r3
    }

    return (0);
err:
    return (rc);
}
   1e5d4:	bd08      	pop	{r3, pc}
	...

0001e5d8 <log_read_last_hdr>:
{
   1e5d8:	b500      	push	{lr}
   1e5da:	b089      	sub	sp, #36	; 0x24
    arg.hdr = out_hdr;
   1e5dc:	9106      	str	r1, [sp, #24]
    arg.read_success = 0;
   1e5de:	2300      	movs	r3, #0
   1e5e0:	9307      	str	r3, [sp, #28]
    log_offset.lo_arg = &arg;
   1e5e2:	aa06      	add	r2, sp, #24
   1e5e4:	9204      	str	r2, [sp, #16]
    log_offset.lo_ts = -1;
   1e5e6:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 1e610 <log_read_last_hdr+0x38>
   1e5ea:	ed8d 7b00 	vstr	d7, [sp]
    log_offset.lo_index = 0;
   1e5ee:	9302      	str	r3, [sp, #8]
    log_offset.lo_data_len = 0;
   1e5f0:	9303      	str	r3, [sp, #12]
    log_walk(log, log_read_hdr_walk, &log_offset);
   1e5f2:	466a      	mov	r2, sp
   1e5f4:	4908      	ldr	r1, [pc, #32]	; (1e618 <log_read_last_hdr+0x40>)
   1e5f6:	f7ff ffe9 	bl	1e5cc <log_walk>
    if (!arg.read_success) {
   1e5fa:	9b07      	ldr	r3, [sp, #28]
   1e5fc:	b11b      	cbz	r3, 1e606 <log_read_last_hdr+0x2e>
    return 0;
   1e5fe:	2000      	movs	r0, #0
}
   1e600:	b009      	add	sp, #36	; 0x24
   1e602:	f85d fb04 	ldr.w	pc, [sp], #4
        return -1;
   1e606:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e60a:	e7f9      	b.n	1e600 <log_read_last_hdr+0x28>
   1e60c:	f3af 8000 	nop.w
   1e610:	ffffffff 	.word	0xffffffff
   1e614:	ffffffff 	.word	0xffffffff
   1e618:	0001e6e9 	.word	0x0001e6e9

0001e61c <log_register>:
{
   1e61c:	b530      	push	{r4, r5, lr}
   1e61e:	b085      	sub	sp, #20
   1e620:	460c      	mov	r4, r1
   1e622:	f89d 1020 	ldrb.w	r1, [sp, #32]
    assert(!log_written);
   1e626:	4d1f      	ldr	r5, [pc, #124]	; (1e6a4 <log_register+0x88>)
   1e628:	782d      	ldrb	r5, [r5, #0]
   1e62a:	bb0d      	cbnz	r5, 1e670 <log_register+0x54>
    if (level > LOG_LEVEL_MAX) {
   1e62c:	290f      	cmp	r1, #15
   1e62e:	d900      	bls.n	1e632 <log_register+0x16>
        level = LOG_LEVEL_MAX;
   1e630:	210f      	movs	r1, #15
    log->l_name = name;
   1e632:	6020      	str	r0, [r4, #0]
    log->l_log = lh;
   1e634:	6062      	str	r2, [r4, #4]
    log->l_arg = arg;
   1e636:	60a3      	str	r3, [r4, #8]
    log->l_level = level;
   1e638:	7521      	strb	r1, [r4, #20]
    log->l_append_cb = NULL;
   1e63a:	2300      	movs	r3, #0
   1e63c:	6123      	str	r3, [r4, #16]
    log->l_max_entry_len = 0;
   1e63e:	82e3      	strh	r3, [r4, #22]
    if (!log_registered(log)) {
   1e640:	4620      	mov	r0, r4
   1e642:	f7ff fe55 	bl	1e2f0 <log_registered>
   1e646:	b938      	cbnz	r0, 1e658 <log_register+0x3c>
        STAILQ_INSERT_TAIL(&g_log_list, log, l_next);
   1e648:	2300      	movs	r3, #0
   1e64a:	60e3      	str	r3, [r4, #12]
   1e64c:	4b16      	ldr	r3, [pc, #88]	; (1e6a8 <log_register+0x8c>)
   1e64e:	685a      	ldr	r2, [r3, #4]
   1e650:	6014      	str	r4, [r2, #0]
   1e652:	f104 020c 	add.w	r2, r4, #12
   1e656:	605a      	str	r2, [r3, #4]
    if (log->l_log->log_registered) {
   1e658:	6863      	ldr	r3, [r4, #4]
   1e65a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1e65c:	b10b      	cbz	r3, 1e662 <log_register+0x46>
        log->l_log->log_registered(log);
   1e65e:	4620      	mov	r0, r4
   1e660:	4798      	blx	r3
    if (log->l_log->log_type == LOG_TYPE_STORAGE) {
   1e662:	6863      	ldr	r3, [r4, #4]
   1e664:	681b      	ldr	r3, [r3, #0]
   1e666:	2b02      	cmp	r3, #2
   1e668:	d008      	beq.n	1e67c <log_register+0x60>
}
   1e66a:	2000      	movs	r0, #0
   1e66c:	b005      	add	sp, #20
   1e66e:	bd30      	pop	{r4, r5, pc}
    assert(!log_written);
   1e670:	2300      	movs	r3, #0
   1e672:	461a      	mov	r2, r3
   1e674:	4619      	mov	r1, r3
   1e676:	4618      	mov	r0, r3
   1e678:	f7ea fce8 	bl	904c <__assert_func>
        rc = log_read_last_hdr(log, &hdr);
   1e67c:	4669      	mov	r1, sp
   1e67e:	4620      	mov	r0, r4
   1e680:	f7ff ffaa 	bl	1e5d8 <log_read_last_hdr>
        if (rc == 0) {
   1e684:	2800      	cmp	r0, #0
   1e686:	d1f0      	bne.n	1e66a <log_register+0x4e>
            OS_ENTER_CRITICAL(sr);
   1e688:	f7eb fef8 	bl	a47c <os_arch_save_sr>
            if (hdr.ue_index >= g_log_info.li_next_index) {
   1e68c:	9b02      	ldr	r3, [sp, #8]
   1e68e:	4a07      	ldr	r2, [pc, #28]	; (1e6ac <log_register+0x90>)
   1e690:	6812      	ldr	r2, [r2, #0]
   1e692:	4293      	cmp	r3, r2
   1e694:	d302      	bcc.n	1e69c <log_register+0x80>
                g_log_info.li_next_index = hdr.ue_index + 1;
   1e696:	3301      	adds	r3, #1
   1e698:	4a04      	ldr	r2, [pc, #16]	; (1e6ac <log_register+0x90>)
   1e69a:	6013      	str	r3, [r2, #0]
            OS_EXIT_CRITICAL(sr);
   1e69c:	f7eb fef4 	bl	a488 <os_arch_restore_sr>
   1e6a0:	e7e3      	b.n	1e66a <log_register+0x4e>
   1e6a2:	bf00      	nop
   1e6a4:	20004844 	.word	0x20004844
   1e6a8:	20000fac 	.word	0x20000fac
   1e6ac:	20004838 	.word	0x20004838

0001e6b0 <log_walk_body>:
}

int
log_walk_body(struct log *log, log_walk_body_func_t walk_body_func,
              struct log_offset *log_offset)
{
   1e6b0:	b510      	push	{r4, lr}
   1e6b2:	b082      	sub	sp, #8
   1e6b4:	4614      	mov	r4, r2
    struct log_walk_body_arg lwba = {
   1e6b6:	9100      	str	r1, [sp, #0]
        .fn = walk_body_func,
        .arg = log_offset->lo_arg,
   1e6b8:	6913      	ldr	r3, [r2, #16]
    struct log_walk_body_arg lwba = {
   1e6ba:	9301      	str	r3, [sp, #4]
    };
    int rc;

    log_offset->lo_arg = &lwba;
   1e6bc:	f8c2 d010 	str.w	sp, [r2, #16]
    rc = log->l_log->log_walk(log, log_walk_body_fn, log_offset);
   1e6c0:	6843      	ldr	r3, [r0, #4]
   1e6c2:	69db      	ldr	r3, [r3, #28]
   1e6c4:	4902      	ldr	r1, [pc, #8]	; (1e6d0 <log_walk_body+0x20>)
   1e6c6:	4798      	blx	r3
    log_offset->lo_arg = lwba.arg;
   1e6c8:	9b01      	ldr	r3, [sp, #4]
   1e6ca:	6123      	str	r3, [r4, #16]

    return rc;
}
   1e6cc:	b002      	add	sp, #8
   1e6ce:	bd10      	pop	{r4, pc}
   1e6d0:	0001e72d 	.word	0x0001e72d

0001e6d4 <log_read>:
 * @return                      The number of bytes read; 0 on failure.
 */
int
log_read(struct log *log, void *dptr, void *buf, uint16_t off,
         uint16_t len)
{
   1e6d4:	b530      	push	{r4, r5, lr}
   1e6d6:	b083      	sub	sp, #12
    int rc;

    rc = log->l_log->log_read(log, dptr, buf, off, len);
   1e6d8:	6844      	ldr	r4, [r0, #4]
   1e6da:	6864      	ldr	r4, [r4, #4]
   1e6dc:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   1e6e0:	9500      	str	r5, [sp, #0]
   1e6e2:	47a0      	blx	r4

    return (rc);
}
   1e6e4:	b003      	add	sp, #12
   1e6e6:	bd30      	pop	{r4, r5, pc}

0001e6e8 <log_read_hdr_walk>:
{
   1e6e8:	b510      	push	{r4, lr}
   1e6ea:	b082      	sub	sp, #8
   1e6ec:	460b      	mov	r3, r1
   1e6ee:	4611      	mov	r1, r2
    arg = log_offset->lo_arg;
   1e6f0:	691c      	ldr	r4, [r3, #16]
    rc = log_read(log, dptr, arg->hdr, 0, sizeof *arg->hdr);
   1e6f2:	6822      	ldr	r2, [r4, #0]
   1e6f4:	230e      	movs	r3, #14
   1e6f6:	9300      	str	r3, [sp, #0]
   1e6f8:	2300      	movs	r3, #0
   1e6fa:	f7ff ffeb 	bl	1e6d4 <log_read>
    if (rc >= sizeof *arg->hdr) {
   1e6fe:	280d      	cmp	r0, #13
   1e700:	d901      	bls.n	1e706 <log_read_hdr_walk+0x1e>
        arg->read_success = 1;
   1e702:	2301      	movs	r3, #1
   1e704:	6063      	str	r3, [r4, #4]
}
   1e706:	2001      	movs	r0, #1
   1e708:	b002      	add	sp, #8
   1e70a:	bd10      	pop	{r4, pc}

0001e70c <log_read_hdr>:

int
log_read_hdr(struct log *log, void *dptr, struct log_entry_hdr *hdr)
{
   1e70c:	b500      	push	{lr}
   1e70e:	b083      	sub	sp, #12
    int bytes_read;

    bytes_read = log_read(log, dptr, hdr, 0, LOG_ENTRY_HDR_SIZE);
   1e710:	230e      	movs	r3, #14
   1e712:	9300      	str	r3, [sp, #0]
   1e714:	2300      	movs	r3, #0
   1e716:	f7ff ffdd 	bl	1e6d4 <log_read>
    if (bytes_read != LOG_ENTRY_HDR_SIZE) {
   1e71a:	280e      	cmp	r0, #14
   1e71c:	d103      	bne.n	1e726 <log_read_hdr+0x1a>
        return SYS_EIO;
    }

    return 0;
   1e71e:	2000      	movs	r0, #0
}
   1e720:	b003      	add	sp, #12
   1e722:	f85d fb04 	ldr.w	pc, [sp], #4
        return SYS_EIO;
   1e726:	f06f 0004 	mvn.w	r0, #4
   1e72a:	e7f9      	b.n	1e720 <log_read_hdr+0x14>

0001e72c <log_walk_body_fn>:
{
   1e72c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e730:	b087      	sub	sp, #28
   1e732:	4680      	mov	r8, r0
   1e734:	460c      	mov	r4, r1
   1e736:	4616      	mov	r6, r2
   1e738:	4699      	mov	r9, r3
    lwba = log_offset->lo_arg;
   1e73a:	690f      	ldr	r7, [r1, #16]
    rc = log_read_hdr(log, dptr, &ueh);
   1e73c:	aa02      	add	r2, sp, #8
   1e73e:	4631      	mov	r1, r6
   1e740:	f7ff ffe4 	bl	1e70c <log_read_hdr>
    if (rc != 0) {
   1e744:	b988      	cbnz	r0, 1e76a <log_walk_body_fn+0x3e>
    if (log_offset->lo_index <= ueh.ue_index) {
   1e746:	68a2      	ldr	r2, [r4, #8]
   1e748:	9b04      	ldr	r3, [sp, #16]
   1e74a:	429a      	cmp	r2, r3
   1e74c:	d80d      	bhi.n	1e76a <log_walk_body_fn+0x3e>
        len -= sizeof ueh;
   1e74e:	f1a9 050e 	sub.w	r5, r9, #14
   1e752:	b2ad      	uxth	r5, r5
        log_offset->lo_arg = lwba->arg;
   1e754:	687b      	ldr	r3, [r7, #4]
   1e756:	6123      	str	r3, [r4, #16]
        rc = lwba->fn(log, log_offset, &ueh, dptr, len);
   1e758:	f8d7 9000 	ldr.w	r9, [r7]
   1e75c:	9500      	str	r5, [sp, #0]
   1e75e:	4633      	mov	r3, r6
   1e760:	aa02      	add	r2, sp, #8
   1e762:	4621      	mov	r1, r4
   1e764:	4640      	mov	r0, r8
   1e766:	47c8      	blx	r9
        log_offset->lo_arg = lwba;
   1e768:	6127      	str	r7, [r4, #16]
}
   1e76a:	b007      	add	sp, #28
   1e76c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001e770 <log_read_body>:

int
log_read_body(struct log *log, void *dptr, void *buf, uint16_t off,
              uint16_t len)
{
   1e770:	b510      	push	{r4, lr}
   1e772:	b082      	sub	sp, #8
    return log_read(log, dptr, buf, LOG_ENTRY_HDR_SIZE + off, len);
   1e774:	330e      	adds	r3, #14
   1e776:	f8bd 4010 	ldrh.w	r4, [sp, #16]
   1e77a:	9400      	str	r4, [sp, #0]
   1e77c:	b29b      	uxth	r3, r3
   1e77e:	f7ff ffa9 	bl	1e6d4 <log_read>
}
   1e782:	b002      	add	sp, #8
   1e784:	bd10      	pop	{r4, pc}

0001e786 <log_flush>:
    return log_read_mbuf(log, dptr, om, LOG_ENTRY_HDR_SIZE + off, len);
}

int
log_flush(struct log *log)
{
   1e786:	b508      	push	{r3, lr}
    int rc;

    rc = log->l_log->log_flush(log);
   1e788:	6843      	ldr	r3, [r0, #4]
   1e78a:	6a1b      	ldr	r3, [r3, #32]
   1e78c:	4798      	blx	r3
    }

    return (0);
err:
    return (rc);
}
   1e78e:	bd08      	pop	{r3, pc}

0001e790 <log_console_read>:
log_console_read(struct log *log, void *dptr, void *buf, uint16_t offset,
        uint16_t len)
{
    /* You don't read console, console read you */
    return (OS_EINVAL);
}
   1e790:	2002      	movs	r0, #2
   1e792:	4770      	bx	lr

0001e794 <log_console_walk>:
log_console_walk(struct log *log, log_walk_func_t walk_func,
        struct log_offset *log_offset)
{
    /* You don't walk console, console walk you. */
    return (OS_EINVAL);
}
   1e794:	2002      	movs	r0, #2
   1e796:	4770      	bx	lr

0001e798 <log_console_flush>:
static int
log_console_flush(struct log *log)
{
    /* You don't flush console, console flush you. */
    return (OS_EINVAL);
}
   1e798:	2002      	movs	r0, #2
   1e79a:	4770      	bx	lr

0001e79c <log_console_print_hdr>:
{
   1e79c:	b500      	push	{lr}
   1e79e:	b083      	sub	sp, #12
                   hdr->ue_ts, hdr->ue_module, hdr->ue_level);
   1e7a0:	7b03      	ldrb	r3, [r0, #12]
   1e7a2:	7b42      	ldrb	r2, [r0, #13]
    console_printf("[ts=%lluus, mod=%u level=%u] ",
   1e7a4:	9201      	str	r2, [sp, #4]
   1e7a6:	9300      	str	r3, [sp, #0]
   1e7a8:	6802      	ldr	r2, [r0, #0]
   1e7aa:	6843      	ldr	r3, [r0, #4]
   1e7ac:	4802      	ldr	r0, [pc, #8]	; (1e7b8 <log_console_print_hdr+0x1c>)
   1e7ae:	f7f1 f8f1 	bl	f994 <console_printf>
}
   1e7b2:	b003      	add	sp, #12
   1e7b4:	f85d fb04 	ldr.w	pc, [sp], #4
   1e7b8:	00024ac8 	.word	0x00024ac8

0001e7bc <log_console_append_body>:
{
   1e7bc:	b570      	push	{r4, r5, r6, lr}
   1e7be:	460e      	mov	r6, r1
   1e7c0:	4614      	mov	r4, r2
   1e7c2:	461d      	mov	r5, r3
    if (!console_is_init()) {
   1e7c4:	f7f1 f87c 	bl	f8c0 <console_is_init>
   1e7c8:	b130      	cbz	r0, 1e7d8 <log_console_append_body+0x1c>
    if (!console_is_midline) {
   1e7ca:	4b06      	ldr	r3, [pc, #24]	; (1e7e4 <log_console_append_body+0x28>)
   1e7cc:	681b      	ldr	r3, [r3, #0]
   1e7ce:	b12b      	cbz	r3, 1e7dc <log_console_append_body+0x20>
    console_write(body, body_len);
   1e7d0:	4629      	mov	r1, r5
   1e7d2:	4620      	mov	r0, r4
   1e7d4:	f7f0 feb6 	bl	f544 <console_write>
}
   1e7d8:	2000      	movs	r0, #0
   1e7da:	bd70      	pop	{r4, r5, r6, pc}
        log_console_print_hdr(hdr);
   1e7dc:	4630      	mov	r0, r6
   1e7de:	f7ff ffdd 	bl	1e79c <log_console_print_hdr>
   1e7e2:	e7f5      	b.n	1e7d0 <log_console_append_body+0x14>
   1e7e4:	200040dc 	.word	0x200040dc

0001e7e8 <log_console_append>:
{
   1e7e8:	b538      	push	{r3, r4, r5, lr}
   1e7ea:	460c      	mov	r4, r1
   1e7ec:	4615      	mov	r5, r2
    if (!console_is_init()) {
   1e7ee:	f7f1 f867 	bl	f8c0 <console_is_init>
   1e7f2:	b140      	cbz	r0, 1e806 <log_console_append+0x1e>
    if (!console_is_midline) {
   1e7f4:	4b07      	ldr	r3, [pc, #28]	; (1e814 <log_console_append+0x2c>)
   1e7f6:	681b      	ldr	r3, [r3, #0]
   1e7f8:	b13b      	cbz	r3, 1e80a <log_console_append+0x22>
    console_write((char *) buf + LOG_ENTRY_HDR_SIZE, len - LOG_ENTRY_HDR_SIZE);
   1e7fa:	f1a5 010e 	sub.w	r1, r5, #14
   1e7fe:	f104 000e 	add.w	r0, r4, #14
   1e802:	f7f0 fe9f 	bl	f544 <console_write>
}
   1e806:	2000      	movs	r0, #0
   1e808:	bd38      	pop	{r3, r4, r5, pc}
        log_console_print_hdr(hdr);
   1e80a:	4620      	mov	r0, r4
   1e80c:	f7ff ffc6 	bl	1e79c <log_console_print_hdr>
   1e810:	e7f3      	b.n	1e7fa <log_console_append+0x12>
   1e812:	bf00      	nop
   1e814:	200040dc 	.word	0x200040dc

0001e818 <log_console_get>:
}
   1e818:	4800      	ldr	r0, [pc, #0]	; (1e81c <log_console_get+0x4>)
   1e81a:	4770      	bx	lr
   1e81c:	20004848 	.word	0x20004848

0001e820 <log_console_init>:
    .log_flush = log_console_flush,
};

void
log_console_init(void)
{
   1e820:	b510      	push	{r4, lr}
   1e822:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1e824:	4b0d      	ldr	r3, [pc, #52]	; (1e85c <log_console_init+0x3c>)
   1e826:	781b      	ldrb	r3, [r3, #0]
   1e828:	b193      	cbz	r3, 1e850 <log_console_init+0x30>

    rc = log_register("console", &log_console, &log_console_handler, NULL,
   1e82a:	2301      	movs	r3, #1
   1e82c:	9300      	str	r3, [sp, #0]
   1e82e:	2300      	movs	r3, #0
   1e830:	4a0b      	ldr	r2, [pc, #44]	; (1e860 <log_console_init+0x40>)
   1e832:	490c      	ldr	r1, [pc, #48]	; (1e864 <log_console_init+0x44>)
   1e834:	480c      	ldr	r0, [pc, #48]	; (1e868 <log_console_init+0x48>)
   1e836:	f7ff fef1 	bl	1e61c <log_register>
                      MYNEWT_VAL(LOG_LEVEL));
    SYSINIT_PANIC_ASSERT(rc == 0);
   1e83a:	b138      	cbz	r0, 1e84c <log_console_init+0x2c>
   1e83c:	2000      	movs	r0, #0
   1e83e:	9000      	str	r0, [sp, #0]
   1e840:	4b0a      	ldr	r3, [pc, #40]	; (1e86c <log_console_init+0x4c>)
   1e842:	681c      	ldr	r4, [r3, #0]
   1e844:	4603      	mov	r3, r0
   1e846:	4602      	mov	r2, r0
   1e848:	4601      	mov	r1, r0
   1e84a:	47a0      	blx	r4
}
   1e84c:	b002      	add	sp, #8
   1e84e:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1e850:	461a      	mov	r2, r3
   1e852:	4619      	mov	r1, r3
   1e854:	4618      	mov	r0, r3
   1e856:	f7ea fbf9 	bl	904c <__assert_func>
   1e85a:	bf00      	nop
   1e85c:	20004548 	.word	0x20004548
   1e860:	00024af0 	.word	0x00024af0
   1e864:	20004848 	.word	0x20004848
   1e868:	00024ae8 	.word	0x00024ae8
   1e86c:	2000064c 	.word	0x2000064c

0001e870 <log_level_get>:
uint8_t
log_level_get(uint8_t module)
{
    uint8_t byte;

    byte = log_level_map[module / 2];
   1e870:	0843      	lsrs	r3, r0, #1
   1e872:	4a05      	ldr	r2, [pc, #20]	; (1e888 <log_level_get+0x18>)
   1e874:	5cd3      	ldrb	r3, [r2, r3]
    if (module % 2 == 0) {
   1e876:	f010 0f01 	tst.w	r0, #1
   1e87a:	d102      	bne.n	1e882 <log_level_get+0x12>
        return byte & 0x0f;
   1e87c:	f003 000f 	and.w	r0, r3, #15
   1e880:	4770      	bx	lr
    } else {
        return byte >> 4;
   1e882:	0918      	lsrs	r0, r3, #4
    }
}
   1e884:	4770      	bx	lr
   1e886:	bf00      	nop
   1e888:	20004860 	.word	0x20004860

0001e88c <log_level_set>:
int
log_level_set(uint8_t module, uint8_t level)
{
    uint8_t *byte;

    if (level > LOG_LEVEL_MAX) {
   1e88c:	290f      	cmp	r1, #15
   1e88e:	d900      	bls.n	1e892 <log_level_set+0x6>
        level = LOG_LEVEL_MAX;
   1e890:	210f      	movs	r1, #15
    }

    byte = &log_level_map[module / 2];
   1e892:	0843      	lsrs	r3, r0, #1
    if (module % 2 == 0) {
   1e894:	f010 0f01 	tst.w	r0, #1
   1e898:	d107      	bne.n	1e8aa <log_level_set+0x1e>
        *byte = (*byte & 0xf0) | level;
   1e89a:	4808      	ldr	r0, [pc, #32]	; (1e8bc <log_level_set+0x30>)
   1e89c:	56c2      	ldrsb	r2, [r0, r3]
   1e89e:	f022 020f 	bic.w	r2, r2, #15
   1e8a2:	4311      	orrs	r1, r2
   1e8a4:	54c1      	strb	r1, [r0, r3]
    } else {
        *byte = (*byte & 0x0f) | (level << 4);
    }

    return 0;
}
   1e8a6:	2000      	movs	r0, #0
   1e8a8:	4770      	bx	lr
        *byte = (*byte & 0x0f) | (level << 4);
   1e8aa:	4804      	ldr	r0, [pc, #16]	; (1e8bc <log_level_set+0x30>)
   1e8ac:	56c2      	ldrsb	r2, [r0, r3]
   1e8ae:	f002 020f 	and.w	r2, r2, #15
   1e8b2:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
   1e8b6:	54c1      	strb	r1, [r0, r3]
   1e8b8:	e7f5      	b.n	1e8a6 <log_level_set+0x1a>
   1e8ba:	bf00      	nop
   1e8bc:	20004860 	.word	0x20004860

0001e8c0 <cbor_cnt_writer>:
};

static inline int
cbor_cnt_writer(struct cbor_encoder_writer *arg, const char *data, int len) {
    struct CborCntWriter *cb = (struct CborCntWriter *) arg;
    cb->enc.bytes_written += len;
   1e8c0:	6843      	ldr	r3, [r0, #4]
   1e8c2:	4413      	add	r3, r2
   1e8c4:	6043      	str	r3, [r0, #4]
    return CborNoError;
}
   1e8c6:	2000      	movs	r0, #0
   1e8c8:	4770      	bx	lr

0001e8ca <log_nmgr_clear>:
 * @param nmgr json buffer
 * @return 0 on success; non-zero on failure
 */
static int
log_nmgr_clear(struct mgmt_cbuf *cb)
{
   1e8ca:	b538      	push	{r3, r4, r5, lr}
   1e8cc:	4605      	mov	r5, r0
    struct log *log;
    int rc;

    log = NULL;
   1e8ce:	2400      	movs	r4, #0
    while (1) {
        log = log_list_get_next(log);
   1e8d0:	4620      	mov	r0, r4
   1e8d2:	f7ff fdeb 	bl	1e4ac <log_list_get_next>
        if (log == NULL) {
   1e8d6:	4604      	mov	r4, r0
   1e8d8:	b148      	cbz	r0, 1e8ee <log_nmgr_clear+0x24>
            break;
        }

        if (log->l_log->log_type == LOG_TYPE_STREAM) {
   1e8da:	6843      	ldr	r3, [r0, #4]
   1e8dc:	681b      	ldr	r3, [r3, #0]
   1e8de:	2b00      	cmp	r3, #0
   1e8e0:	d0f6      	beq.n	1e8d0 <log_nmgr_clear+0x6>
            continue;
        }

        rc = log_flush(log);
   1e8e2:	f7ff ff50 	bl	1e786 <log_flush>
        if (rc) {
   1e8e6:	4603      	mov	r3, r0
   1e8e8:	2800      	cmp	r0, #0
   1e8ea:	d0f1      	beq.n	1e8d0 <log_nmgr_clear+0x6>
   1e8ec:	e004      	b.n	1e8f8 <log_nmgr_clear+0x2e>
            return rc;
        }
    }

    rc = mgmt_cbuf_setoerr(cb, 0);
   1e8ee:	2100      	movs	r1, #0
   1e8f0:	4628      	mov	r0, r5
   1e8f2:	f7fe fd07 	bl	1d304 <mgmt_cbuf_setoerr>
   1e8f6:	4603      	mov	r3, r0
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1e8f8:	4618      	mov	r0, r3
   1e8fa:	bd38      	pop	{r3, r4, r5, pc}

0001e8fc <log_nmgr_logs_list>:
{
   1e8fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e8fe:	b085      	sub	sp, #20
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1e900:	f100 070c 	add.w	r7, r0, #12
   1e904:	2202      	movs	r2, #2
   1e906:	491c      	ldr	r1, [pc, #112]	; (1e978 <log_nmgr_logs_list+0x7c>)
   1e908:	4638      	mov	r0, r7
   1e90a:	f7f4 fc02 	bl	13112 <cbor_encode_text_string>
   1e90e:	4605      	mov	r5, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1e910:	2200      	movs	r2, #0
   1e912:	2300      	movs	r3, #0
   1e914:	4638      	mov	r0, r7
   1e916:	f7f4 fb81 	bl	1301c <cbor_encode_int>
   1e91a:	4305      	orrs	r5, r0
   1e91c:	2208      	movs	r2, #8
   1e91e:	4917      	ldr	r1, [pc, #92]	; (1e97c <log_nmgr_logs_list+0x80>)
   1e920:	4638      	mov	r0, r7
   1e922:	f7f4 fbf6 	bl	13112 <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "log_list");
   1e926:	4305      	orrs	r5, r0
    g_err |= cbor_encoder_create_array(&cb->encoder, &log_list,
   1e928:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1e92c:	4669      	mov	r1, sp
   1e92e:	4638      	mov	r0, r7
   1e930:	f7f4 fbf6 	bl	13120 <cbor_encoder_create_array>
   1e934:	4305      	orrs	r5, r0
    log = NULL;
   1e936:	2400      	movs	r4, #0
        log = log_list_get_next(log);
   1e938:	4620      	mov	r0, r4
   1e93a:	f7ff fdb7 	bl	1e4ac <log_list_get_next>
        if (!log) {
   1e93e:	4604      	mov	r4, r0
   1e940:	b170      	cbz	r0, 1e960 <log_nmgr_logs_list+0x64>
        if (log->l_log->log_type == LOG_TYPE_STREAM) {
   1e942:	6843      	ldr	r3, [r0, #4]
   1e944:	681b      	ldr	r3, [r3, #0]
   1e946:	2b00      	cmp	r3, #0
   1e948:	d0f6      	beq.n	1e938 <log_nmgr_logs_list+0x3c>
        g_err |= cbor_encode_text_stringz(&log_list, log->l_name);
   1e94a:	6806      	ldr	r6, [r0, #0]
   1e94c:	4630      	mov	r0, r6
   1e94e:	f7ef f88f 	bl	da70 <strlen>
   1e952:	4602      	mov	r2, r0
   1e954:	4631      	mov	r1, r6
   1e956:	4668      	mov	r0, sp
   1e958:	f7f4 fbdb 	bl	13112 <cbor_encode_text_string>
   1e95c:	4305      	orrs	r5, r0
   1e95e:	e7eb      	b.n	1e938 <log_nmgr_logs_list+0x3c>
    g_err |= cbor_encoder_close_container(&cb->encoder, &log_list);
   1e960:	4669      	mov	r1, sp
   1e962:	4638      	mov	r0, r7
   1e964:	f7f4 fbef 	bl	13146 <cbor_encoder_close_container>
    if (g_err) {
   1e968:	ea55 0300 	orrs.w	r3, r5, r0
   1e96c:	d102      	bne.n	1e974 <log_nmgr_logs_list+0x78>
    return (0);
   1e96e:	2000      	movs	r0, #0
}
   1e970:	b005      	add	sp, #20
   1e972:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return MGMT_ERR_ENOMEM;
   1e974:	2002      	movs	r0, #2
   1e976:	e7fb      	b.n	1e970 <log_nmgr_logs_list+0x74>
   1e978:	000238e4 	.word	0x000238e4
   1e97c:	00024b18 	.word	0x00024b18

0001e980 <log_nmgr_module_list>:
{
   1e980:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e982:	b085      	sub	sp, #20
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1e984:	f100 060c 	add.w	r6, r0, #12
   1e988:	2202      	movs	r2, #2
   1e98a:	491f      	ldr	r1, [pc, #124]	; (1ea08 <log_nmgr_module_list+0x88>)
   1e98c:	4630      	mov	r0, r6
   1e98e:	f7f4 fbc0 	bl	13112 <cbor_encode_text_string>
   1e992:	4605      	mov	r5, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1e994:	2200      	movs	r2, #0
   1e996:	2300      	movs	r3, #0
   1e998:	4630      	mov	r0, r6
   1e99a:	f7f4 fb3f 	bl	1301c <cbor_encode_int>
   1e99e:	4305      	orrs	r5, r0
   1e9a0:	220a      	movs	r2, #10
   1e9a2:	491a      	ldr	r1, [pc, #104]	; (1ea0c <log_nmgr_module_list+0x8c>)
   1e9a4:	4630      	mov	r0, r6
   1e9a6:	f7f4 fbb4 	bl	13112 <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "module_map");
   1e9aa:	4305      	orrs	r5, r0
    g_err |= cbor_encoder_create_map(&cb->encoder, &modules,
   1e9ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1e9b0:	4669      	mov	r1, sp
   1e9b2:	4630      	mov	r0, r6
   1e9b4:	f7f4 fbb9 	bl	1312a <cbor_encoder_create_map>
   1e9b8:	4305      	orrs	r5, r0
    module = LOG_MODULE_DEFAULT;
   1e9ba:	2400      	movs	r4, #0
    while (module < LOG_MODULE_MAX) {
   1e9bc:	e000      	b.n	1e9c0 <log_nmgr_module_list+0x40>
            module++;
   1e9be:	3401      	adds	r4, #1
    while (module < LOG_MODULE_MAX) {
   1e9c0:	2cfe      	cmp	r4, #254	; 0xfe
   1e9c2:	dc15      	bgt.n	1e9f0 <log_nmgr_module_list+0x70>
        str = LOG_MODULE_STR(module);
   1e9c4:	b2e0      	uxtb	r0, r4
   1e9c6:	f7ff fd79 	bl	1e4bc <log_module_get_name>
        if (!str) {
   1e9ca:	4607      	mov	r7, r0
   1e9cc:	2800      	cmp	r0, #0
   1e9ce:	d0f6      	beq.n	1e9be <log_nmgr_module_list+0x3e>
   1e9d0:	f7ef f84e 	bl	da70 <strlen>
   1e9d4:	4602      	mov	r2, r0
   1e9d6:	4639      	mov	r1, r7
   1e9d8:	4668      	mov	r0, sp
   1e9da:	f7f4 fb9a 	bl	13112 <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&modules, str);
   1e9de:	4305      	orrs	r5, r0
        g_err |= cbor_encode_uint(&modules, module);
   1e9e0:	4622      	mov	r2, r4
   1e9e2:	17e3      	asrs	r3, r4, #31
   1e9e4:	4668      	mov	r0, sp
   1e9e6:	f7f4 fad9 	bl	12f9c <cbor_encode_uint>
   1e9ea:	4305      	orrs	r5, r0
        module++;
   1e9ec:	3401      	adds	r4, #1
   1e9ee:	e7e7      	b.n	1e9c0 <log_nmgr_module_list+0x40>
    g_err |= cbor_encoder_close_container(&cb->encoder, &modules);
   1e9f0:	4669      	mov	r1, sp
   1e9f2:	4630      	mov	r0, r6
   1e9f4:	f7f4 fba7 	bl	13146 <cbor_encoder_close_container>
    if (g_err) {
   1e9f8:	ea55 0300 	orrs.w	r3, r5, r0
   1e9fc:	d102      	bne.n	1ea04 <log_nmgr_module_list+0x84>
    return (0);
   1e9fe:	2000      	movs	r0, #0
}
   1ea00:	b005      	add	sp, #20
   1ea02:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return MGMT_ERR_ENOMEM;
   1ea04:	2002      	movs	r0, #2
   1ea06:	e7fb      	b.n	1ea00 <log_nmgr_module_list+0x80>
   1ea08:	000238e4 	.word	0x000238e4
   1ea0c:	00024b24 	.word	0x00024b24

0001ea10 <log_nmgr_level_list>:
{
   1ea10:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ea12:	b085      	sub	sp, #20
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1ea14:	f100 070c 	add.w	r7, r0, #12
   1ea18:	2202      	movs	r2, #2
   1ea1a:	492a      	ldr	r1, [pc, #168]	; (1eac4 <log_nmgr_level_list+0xb4>)
   1ea1c:	4638      	mov	r0, r7
   1ea1e:	f7f4 fb78 	bl	13112 <cbor_encode_text_string>
   1ea22:	4606      	mov	r6, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1ea24:	2200      	movs	r2, #0
   1ea26:	2300      	movs	r3, #0
   1ea28:	4638      	mov	r0, r7
   1ea2a:	f7f4 faf7 	bl	1301c <cbor_encode_int>
   1ea2e:	4306      	orrs	r6, r0
   1ea30:	2209      	movs	r2, #9
   1ea32:	4925      	ldr	r1, [pc, #148]	; (1eac8 <log_nmgr_level_list+0xb8>)
   1ea34:	4638      	mov	r0, r7
   1ea36:	f7f4 fb6c 	bl	13112 <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "level_map");
   1ea3a:	4306      	orrs	r6, r0
    g_err |= cbor_encoder_create_map(&cb->encoder, &level_map,
   1ea3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ea40:	4669      	mov	r1, sp
   1ea42:	4638      	mov	r0, r7
   1ea44:	f7f4 fb71 	bl	1312a <cbor_encoder_create_map>
   1ea48:	4306      	orrs	r6, r0
    level = LOG_LEVEL_DEBUG;
   1ea4a:	2400      	movs	r4, #0
    while (level < LOG_LEVEL_MAX) {
   1ea4c:	e008      	b.n	1ea60 <log_nmgr_level_list+0x50>
        str = LOG_LEVEL_STR(level);
   1ea4e:	4d1f      	ldr	r5, [pc, #124]	; (1eacc <log_nmgr_level_list+0xbc>)
   1ea50:	e000      	b.n	1ea54 <log_nmgr_level_list+0x44>
   1ea52:	4d1f      	ldr	r5, [pc, #124]	; (1ead0 <log_nmgr_level_list+0xc0>)
        if (!strcmp(str, "UNKNOWN")) {
   1ea54:	491f      	ldr	r1, [pc, #124]	; (1ead4 <log_nmgr_level_list+0xc4>)
   1ea56:	4628      	mov	r0, r5
   1ea58:	f7ee fffe 	bl	da58 <strcmp>
   1ea5c:	b9a0      	cbnz	r0, 1ea88 <log_nmgr_level_list+0x78>
            level++;
   1ea5e:	3401      	adds	r4, #1
    while (level < LOG_LEVEL_MAX) {
   1ea60:	2c0e      	cmp	r4, #14
   1ea62:	dc22      	bgt.n	1eaaa <log_nmgr_level_list+0x9a>
        str = LOG_LEVEL_STR(level);
   1ea64:	2c00      	cmp	r4, #0
   1ea66:	d0f4      	beq.n	1ea52 <log_nmgr_level_list+0x42>
   1ea68:	2c01      	cmp	r4, #1
   1ea6a:	d007      	beq.n	1ea7c <log_nmgr_level_list+0x6c>
   1ea6c:	2c02      	cmp	r4, #2
   1ea6e:	d007      	beq.n	1ea80 <log_nmgr_level_list+0x70>
   1ea70:	2c03      	cmp	r4, #3
   1ea72:	d007      	beq.n	1ea84 <log_nmgr_level_list+0x74>
   1ea74:	2c04      	cmp	r4, #4
   1ea76:	d0ea      	beq.n	1ea4e <log_nmgr_level_list+0x3e>
   1ea78:	4d16      	ldr	r5, [pc, #88]	; (1ead4 <log_nmgr_level_list+0xc4>)
   1ea7a:	e7eb      	b.n	1ea54 <log_nmgr_level_list+0x44>
   1ea7c:	4d16      	ldr	r5, [pc, #88]	; (1ead8 <log_nmgr_level_list+0xc8>)
   1ea7e:	e7e9      	b.n	1ea54 <log_nmgr_level_list+0x44>
   1ea80:	4d16      	ldr	r5, [pc, #88]	; (1eadc <log_nmgr_level_list+0xcc>)
   1ea82:	e7e7      	b.n	1ea54 <log_nmgr_level_list+0x44>
   1ea84:	4d16      	ldr	r5, [pc, #88]	; (1eae0 <log_nmgr_level_list+0xd0>)
   1ea86:	e7e5      	b.n	1ea54 <log_nmgr_level_list+0x44>
   1ea88:	4628      	mov	r0, r5
   1ea8a:	f7ee fff1 	bl	da70 <strlen>
   1ea8e:	4602      	mov	r2, r0
   1ea90:	4629      	mov	r1, r5
   1ea92:	4668      	mov	r0, sp
   1ea94:	f7f4 fb3d 	bl	13112 <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&level_map, str);
   1ea98:	4306      	orrs	r6, r0
        g_err |= cbor_encode_uint(&level_map, level);
   1ea9a:	4622      	mov	r2, r4
   1ea9c:	17e3      	asrs	r3, r4, #31
   1ea9e:	4668      	mov	r0, sp
   1eaa0:	f7f4 fa7c 	bl	12f9c <cbor_encode_uint>
   1eaa4:	4306      	orrs	r6, r0
        level++;
   1eaa6:	3401      	adds	r4, #1
   1eaa8:	e7da      	b.n	1ea60 <log_nmgr_level_list+0x50>
    g_err |= cbor_encoder_close_container(&cb->encoder, &level_map);
   1eaaa:	4669      	mov	r1, sp
   1eaac:	4638      	mov	r0, r7
   1eaae:	f7f4 fb4a 	bl	13146 <cbor_encoder_close_container>
    if (g_err) {
   1eab2:	ea56 0300 	orrs.w	r3, r6, r0
   1eab6:	d102      	bne.n	1eabe <log_nmgr_level_list+0xae>
    return (0);
   1eab8:	2000      	movs	r0, #0
}
   1eaba:	b005      	add	sp, #20
   1eabc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return MGMT_ERR_ENOMEM;
   1eabe:	2002      	movs	r0, #2
   1eac0:	e7fb      	b.n	1eaba <log_nmgr_level_list+0xaa>
   1eac2:	bf00      	nop
   1eac4:	000238e4 	.word	0x000238e4
   1eac8:	00024b64 	.word	0x00024b64
   1eacc:	00024b58 	.word	0x00024b58
   1ead0:	00024b30 	.word	0x00024b30
   1ead4:	00024b50 	.word	0x00024b50
   1ead8:	00024b40 	.word	0x00024b40
   1eadc:	00024b48 	.word	0x00024b48
   1eae0:	00024b38 	.word	0x00024b38

0001eae4 <log_nmgr_modlevel_set>:
{
   1eae4:	b570      	push	{r4, r5, r6, lr}
   1eae6:	b0b4      	sub	sp, #208	; 0xd0
   1eae8:	4604      	mov	r4, r0
    const struct cbor_attr_t attr[4] = {
   1eaea:	22c0      	movs	r2, #192	; 0xc0
   1eaec:	2100      	movs	r1, #0
   1eaee:	4668      	mov	r0, sp
   1eaf0:	f7ee ff87 	bl	da02 <memset>
   1eaf4:	4b15      	ldr	r3, [pc, #84]	; (1eb4c <log_nmgr_modlevel_set+0x68>)
   1eaf6:	9300      	str	r3, [sp, #0]
   1eaf8:	2302      	movs	r3, #2
   1eafa:	f88d 3004 	strb.w	r3, [sp, #4]
   1eafe:	aa30      	add	r2, sp, #192	; 0xc0
   1eb00:	9202      	str	r2, [sp, #8]
   1eb02:	4a13      	ldr	r2, [pc, #76]	; (1eb50 <log_nmgr_modlevel_set+0x6c>)
   1eb04:	920c      	str	r2, [sp, #48]	; 0x30
   1eb06:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   1eb0a:	ab32      	add	r3, sp, #200	; 0xc8
   1eb0c:	930e      	str	r3, [sp, #56]	; 0x38
    rc = cbor_read_object(&cb->it, attr);
   1eb0e:	4669      	mov	r1, sp
   1eb10:	f104 001c 	add.w	r0, r4, #28
   1eb14:	f7f4 f916 	bl	12d44 <cbor_read_object>
    if (rc) {
   1eb18:	4605      	mov	r5, r0
   1eb1a:	b110      	cbz	r0, 1eb22 <log_nmgr_modlevel_set+0x3e>
}
   1eb1c:	4628      	mov	r0, r5
   1eb1e:	b034      	add	sp, #208	; 0xd0
   1eb20:	bd70      	pop	{r4, r5, r6, pc}
    rc = log_level_set(module, level);
   1eb22:	f89d 10c8 	ldrb.w	r1, [sp, #200]	; 0xc8
   1eb26:	f89d 00c0 	ldrb.w	r0, [sp, #192]	; 0xc0
   1eb2a:	f7ff feaf 	bl	1e88c <log_level_set>
    if (rc) {
   1eb2e:	4606      	mov	r6, r0
   1eb30:	b100      	cbz	r0, 1eb34 <log_nmgr_modlevel_set+0x50>
        rc = MGMT_ERR_EINVAL;
   1eb32:	2603      	movs	r6, #3
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1eb34:	340c      	adds	r4, #12
   1eb36:	2202      	movs	r2, #2
   1eb38:	4906      	ldr	r1, [pc, #24]	; (1eb54 <log_nmgr_modlevel_set+0x70>)
   1eb3a:	4620      	mov	r0, r4
   1eb3c:	f7f4 fae9 	bl	13112 <cbor_encode_text_string>
    g_err |= cbor_encode_int(&cb->encoder, rc);
   1eb40:	4632      	mov	r2, r6
   1eb42:	17f3      	asrs	r3, r6, #31
   1eb44:	4620      	mov	r0, r4
   1eb46:	f7f4 fa69 	bl	1301c <cbor_encode_int>
    return (rc);
   1eb4a:	e7e7      	b.n	1eb1c <log_nmgr_modlevel_set+0x38>
   1eb4c:	00024b70 	.word	0x00024b70
   1eb50:	00024b7c 	.word	0x00024b7c
   1eb54:	000238e4 	.word	0x000238e4

0001eb58 <log_nmgr_modlevel_get>:
{
   1eb58:	b570      	push	{r4, r5, r6, lr}
   1eb5a:	b0b2      	sub	sp, #200	; 0xc8
   1eb5c:	4604      	mov	r4, r0
    const struct cbor_attr_t attr[4] = {
   1eb5e:	22c0      	movs	r2, #192	; 0xc0
   1eb60:	2100      	movs	r1, #0
   1eb62:	4668      	mov	r0, sp
   1eb64:	f7ee ff4d 	bl	da02 <memset>
   1eb68:	4b15      	ldr	r3, [pc, #84]	; (1ebc0 <log_nmgr_modlevel_get+0x68>)
   1eb6a:	9300      	str	r3, [sp, #0]
   1eb6c:	2302      	movs	r3, #2
   1eb6e:	f88d 3004 	strb.w	r3, [sp, #4]
   1eb72:	ab30      	add	r3, sp, #192	; 0xc0
   1eb74:	9302      	str	r3, [sp, #8]
    rc = cbor_read_object(&cb->it, attr);
   1eb76:	4669      	mov	r1, sp
   1eb78:	f104 001c 	add.w	r0, r4, #28
   1eb7c:	f7f4 f8e2 	bl	12d44 <cbor_read_object>
    if (rc) {
   1eb80:	4605      	mov	r5, r0
   1eb82:	b110      	cbz	r0, 1eb8a <log_nmgr_modlevel_get+0x32>
}
   1eb84:	4628      	mov	r0, r5
   1eb86:	b032      	add	sp, #200	; 0xc8
   1eb88:	bd70      	pop	{r4, r5, r6, pc}
    level = log_level_get(module);
   1eb8a:	f89d 00c0 	ldrb.w	r0, [sp, #192]	; 0xc0
   1eb8e:	f7ff fe6f 	bl	1e870 <log_level_get>
   1eb92:	4606      	mov	r6, r0
    g_err |= cbor_encode_text_stringz(&cb->encoder, "level");
   1eb94:	340c      	adds	r4, #12
   1eb96:	2205      	movs	r2, #5
   1eb98:	490a      	ldr	r1, [pc, #40]	; (1ebc4 <log_nmgr_modlevel_get+0x6c>)
   1eb9a:	4620      	mov	r0, r4
   1eb9c:	f7f4 fab9 	bl	13112 <cbor_encode_text_string>
    g_err |= cbor_encode_uint(&cb->encoder, level);
   1eba0:	4632      	mov	r2, r6
   1eba2:	2300      	movs	r3, #0
   1eba4:	4620      	mov	r0, r4
   1eba6:	f7f4 f9f9 	bl	12f9c <cbor_encode_uint>
   1ebaa:	2202      	movs	r2, #2
   1ebac:	4906      	ldr	r1, [pc, #24]	; (1ebc8 <log_nmgr_modlevel_get+0x70>)
   1ebae:	4620      	mov	r0, r4
   1ebb0:	f7f4 faaf 	bl	13112 <cbor_encode_text_string>
    g_err |= cbor_encode_int(&cb->encoder, rc);
   1ebb4:	462a      	mov	r2, r5
   1ebb6:	17eb      	asrs	r3, r5, #31
   1ebb8:	4620      	mov	r0, r4
   1ebba:	f7f4 fa2f 	bl	1301c <cbor_encode_int>
    return (rc);
   1ebbe:	e7e1      	b.n	1eb84 <log_nmgr_modlevel_get+0x2c>
   1ebc0:	00024b70 	.word	0x00024b70
   1ebc4:	00024b7c 	.word	0x00024b7c
   1ebc8:	000238e4 	.word	0x000238e4

0001ebcc <log_encode_entries>:
{
   1ebcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ebd0:	b093      	sub	sp, #76	; 0x4c
   1ebd2:	4606      	mov	r6, r0
   1ebd4:	460c      	mov	r4, r1
   1ebd6:	4690      	mov	r8, r2
   1ebd8:	461f      	mov	r7, r3
    memset(&log_offset, 0, sizeof(log_offset));
   1ebda:	2200      	movs	r2, #0
   1ebdc:	920c      	str	r2, [sp, #48]	; 0x30
   1ebde:	920d      	str	r2, [sp, #52]	; 0x34
   1ebe0:	920e      	str	r2, [sp, #56]	; 0x38
   1ebe2:	920f      	str	r2, [sp, #60]	; 0x3c
   1ebe4:	9210      	str	r2, [sp, #64]	; 0x40
   1ebe6:	9211      	str	r2, [sp, #68]	; 0x44

static inline void
cbor_cnt_writer_init(struct CborCntWriter *cb) {
    cb->enc.bytes_written = 0;
   1ebe8:	9207      	str	r2, [sp, #28]
    cb->enc.write = &cbor_cnt_writer;
   1ebea:	4b23      	ldr	r3, [pc, #140]	; (1ec78 <log_encode_entries+0xac>)
   1ebec:	9306      	str	r3, [sp, #24]
    cbor_encoder_init(&cnt_encoder, &cnt_writer.enc, 0);
   1ebee:	a906      	add	r1, sp, #24
   1ebf0:	a802      	add	r0, sp, #8
   1ebf2:	f7f4 f9ce 	bl	12f92 <cbor_encoder_init>
   1ebf6:	2207      	movs	r2, #7
   1ebf8:	4920      	ldr	r1, [pc, #128]	; (1ec7c <log_encode_entries+0xb0>)
   1ebfa:	a802      	add	r0, sp, #8
   1ebfc:	f7f4 fa89 	bl	13112 <cbor_encode_text_string>
    g_err |= cbor_encoder_create_array(&cnt_encoder, &entries,
   1ec00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ec04:	a908      	add	r1, sp, #32
   1ec06:	a802      	add	r0, sp, #8
   1ec08:	f7f4 fa8a 	bl	13120 <cbor_encoder_create_array>
    g_err |= cbor_encoder_close_container(&cnt_encoder, &entries);
   1ec0c:	a908      	add	r1, sp, #32
   1ec0e:	a802      	add	r0, sp, #8
   1ec10:	f7f4 fa99 	bl	13146 <cbor_encoder_close_container>
{   return encoder->writer->bytes_written; }
   1ec14:	6823      	ldr	r3, [r4, #0]
   1ec16:	685b      	ldr	r3, [r3, #4]
   1ec18:	9a02      	ldr	r2, [sp, #8]
   1ec1a:	6855      	ldr	r5, [r2, #4]
    rsp_len = cbor_encode_bytes_written(cb) +
   1ec1c:	441d      	add	r5, r3
    if (rsp_len > MYNEWT_VAL(LOG_NMGR_MAX_RSP_LEN)) {
   1ec1e:	f5b5 7fc8 	cmp.w	r5, #400	; 0x190
   1ec22:	dd04      	ble.n	1ec2e <log_encode_entries+0x62>
        rc = OS_ENOMEM;
   1ec24:	2501      	movs	r5, #1
}
   1ec26:	4628      	mov	r0, r5
   1ec28:	b013      	add	sp, #76	; 0x4c
   1ec2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1ec2e:	2207      	movs	r2, #7
   1ec30:	4912      	ldr	r1, [pc, #72]	; (1ec7c <log_encode_entries+0xb0>)
   1ec32:	4620      	mov	r0, r4
   1ec34:	f7f4 fa6d 	bl	13112 <cbor_encode_text_string>
    g_err |= cbor_encoder_create_array(cb, &entries, CborIndefiniteLength);
   1ec38:	f10d 0920 	add.w	r9, sp, #32
   1ec3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ec40:	4649      	mov	r1, r9
   1ec42:	4620      	mov	r0, r4
   1ec44:	f7f4 fa6c 	bl	13120 <cbor_encoder_create_array>
    ed.counter = 0;
   1ec48:	2300      	movs	r3, #0
   1ec4a:	9300      	str	r3, [sp, #0]
    ed.enc = &entries;
   1ec4c:	f8cd 9004 	str.w	r9, [sp, #4]
    log_offset.lo_arg       = &ed;
   1ec50:	f8cd d040 	str.w	sp, [sp, #64]	; 0x40
    log_offset.lo_index     = index;
   1ec54:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1ec56:	930e      	str	r3, [sp, #56]	; 0x38
    log_offset.lo_ts        = ts;
   1ec58:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
   1ec5c:	970d      	str	r7, [sp, #52]	; 0x34
    log_offset.lo_data_len  = rsp_len;
   1ec5e:	950f      	str	r5, [sp, #60]	; 0x3c
    rc = log_walk_body(log, log_nmgr_encode_entry, &log_offset);
   1ec60:	aa0c      	add	r2, sp, #48	; 0x30
   1ec62:	4907      	ldr	r1, [pc, #28]	; (1ec80 <log_encode_entries+0xb4>)
   1ec64:	4630      	mov	r0, r6
   1ec66:	f7ff fd23 	bl	1e6b0 <log_walk_body>
   1ec6a:	4605      	mov	r5, r0
    g_err |= cbor_encoder_close_container(cb, &entries);
   1ec6c:	4649      	mov	r1, r9
   1ec6e:	4620      	mov	r0, r4
   1ec70:	f7f4 fa69 	bl	13146 <cbor_encoder_close_container>
   1ec74:	e7d7      	b.n	1ec26 <log_encode_entries+0x5a>
   1ec76:	bf00      	nop
   1ec78:	0001e8c1 	.word	0x0001e8c1
   1ec7c:	00024b84 	.word	0x00024b84
   1ec80:	0001ee49 	.word	0x0001ee49

0001ec84 <log_encode>:
{
   1ec84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ec88:	b087      	sub	sp, #28
   1ec8a:	4605      	mov	r5, r0
   1ec8c:	460e      	mov	r6, r1
   1ec8e:	4690      	mov	r8, r2
   1ec90:	461f      	mov	r7, r3
    g_err |= cbor_encoder_create_map(cb, &logs, CborIndefiniteLength);
   1ec92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ec96:	a902      	add	r1, sp, #8
   1ec98:	4630      	mov	r0, r6
   1ec9a:	f7f4 fa46 	bl	1312a <cbor_encoder_create_map>
   1ec9e:	4604      	mov	r4, r0
   1eca0:	2204      	movs	r2, #4
   1eca2:	4919      	ldr	r1, [pc, #100]	; (1ed08 <log_encode+0x84>)
   1eca4:	a802      	add	r0, sp, #8
   1eca6:	f7f4 fa34 	bl	13112 <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&logs, "name");
   1ecaa:	4304      	orrs	r4, r0
    g_err |= cbor_encode_text_stringz(&logs, log->l_name);
   1ecac:	f8d5 9000 	ldr.w	r9, [r5]
   1ecb0:	4648      	mov	r0, r9
   1ecb2:	f7ee fedd 	bl	da70 <strlen>
   1ecb6:	4602      	mov	r2, r0
   1ecb8:	4649      	mov	r1, r9
   1ecba:	a802      	add	r0, sp, #8
   1ecbc:	f7f4 fa29 	bl	13112 <cbor_encode_text_string>
   1ecc0:	4304      	orrs	r4, r0
   1ecc2:	2204      	movs	r2, #4
   1ecc4:	4911      	ldr	r1, [pc, #68]	; (1ed0c <log_encode+0x88>)
   1ecc6:	a802      	add	r0, sp, #8
   1ecc8:	f7f4 fa23 	bl	13112 <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&logs, "type");
   1eccc:	4304      	orrs	r4, r0
    g_err |= cbor_encode_uint(&logs, log->l_log->log_type);
   1ecce:	686b      	ldr	r3, [r5, #4]
   1ecd0:	681a      	ldr	r2, [r3, #0]
   1ecd2:	17d3      	asrs	r3, r2, #31
   1ecd4:	a802      	add	r0, sp, #8
   1ecd6:	f7f4 f961 	bl	12f9c <cbor_encode_uint>
   1ecda:	4304      	orrs	r4, r0
    rc = log_encode_entries(log, &logs, ts, index);
   1ecdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1ecde:	9300      	str	r3, [sp, #0]
   1ece0:	4642      	mov	r2, r8
   1ece2:	463b      	mov	r3, r7
   1ece4:	a902      	add	r1, sp, #8
   1ece6:	4628      	mov	r0, r5
   1ece8:	f7ff ff70 	bl	1ebcc <log_encode_entries>
   1ecec:	4605      	mov	r5, r0
    g_err |= cbor_encoder_close_container(cb, &logs);
   1ecee:	a902      	add	r1, sp, #8
   1ecf0:	4630      	mov	r0, r6
   1ecf2:	f7f4 fa28 	bl	13146 <cbor_encoder_close_container>
    if (g_err) {
   1ecf6:	ea54 0300 	orrs.w	r3, r4, r0
   1ecfa:	d103      	bne.n	1ed04 <log_encode+0x80>
}
   1ecfc:	4628      	mov	r0, r5
   1ecfe:	b007      	add	sp, #28
   1ed00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return MGMT_ERR_ENOMEM;
   1ed04:	2502      	movs	r5, #2
   1ed06:	e7f9      	b.n	1ecfc <log_encode+0x78>
   1ed08:	00024b98 	.word	0x00024b98
   1ed0c:	00024b8c 	.word	0x00024b8c

0001ed10 <log_nmgr_read>:
{
   1ed10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ed14:	b0cb      	sub	sp, #300	; 0x12c
   1ed16:	4606      	mov	r6, r0
    char name[LOG_NAME_MAX_LEN] = {0};
   1ed18:	2400      	movs	r4, #0
   1ed1a:	943a      	str	r4, [sp, #232]	; 0xe8
   1ed1c:	223c      	movs	r2, #60	; 0x3c
   1ed1e:	4621      	mov	r1, r4
   1ed20:	a83b      	add	r0, sp, #236	; 0xec
   1ed22:	f7ee fe6e 	bl	da02 <memset>
    const struct cbor_attr_t attr[4] = {
   1ed26:	22c0      	movs	r2, #192	; 0xc0
   1ed28:	4621      	mov	r1, r4
   1ed2a:	a802      	add	r0, sp, #8
   1ed2c:	f7ee fe69 	bl	da02 <memset>
   1ed30:	4b3e      	ldr	r3, [pc, #248]	; (1ee2c <log_nmgr_read+0x11c>)
   1ed32:	9302      	str	r3, [sp, #8]
   1ed34:	2304      	movs	r3, #4
   1ed36:	f88d 300c 	strb.w	r3, [sp, #12]
   1ed3a:	ab3a      	add	r3, sp, #232	; 0xe8
   1ed3c:	9304      	str	r3, [sp, #16]
   1ed3e:	2340      	movs	r3, #64	; 0x40
   1ed40:	930c      	str	r3, [sp, #48]	; 0x30
   1ed42:	4b3b      	ldr	r3, [pc, #236]	; (1ee30 <log_nmgr_read+0x120>)
   1ed44:	930e      	str	r3, [sp, #56]	; 0x38
   1ed46:	2301      	movs	r3, #1
   1ed48:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
   1ed4c:	ab38      	add	r3, sp, #224	; 0xe0
   1ed4e:	9310      	str	r3, [sp, #64]	; 0x40
   1ed50:	4b38      	ldr	r3, [pc, #224]	; (1ee34 <log_nmgr_read+0x124>)
   1ed52:	931a      	str	r3, [sp, #104]	; 0x68
   1ed54:	2302      	movs	r3, #2
   1ed56:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
   1ed5a:	ab36      	add	r3, sp, #216	; 0xd8
   1ed5c:	931c      	str	r3, [sp, #112]	; 0x70
    rc = cbor_read_object(&cb->it, attr);
   1ed5e:	a902      	add	r1, sp, #8
   1ed60:	f106 001c 	add.w	r0, r6, #28
   1ed64:	f7f3 ffee 	bl	12d44 <cbor_read_object>
    if (rc) {
   1ed68:	4681      	mov	r9, r0
   1ed6a:	b118      	cbz	r0, 1ed74 <log_nmgr_read+0x64>
}
   1ed6c:	4648      	mov	r0, r9
   1ed6e:	b04b      	add	sp, #300	; 0x12c
   1ed70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    g_err |= cbor_encode_text_stringz(&cb->encoder, "next_index");
   1ed74:	360c      	adds	r6, #12
   1ed76:	220a      	movs	r2, #10
   1ed78:	492f      	ldr	r1, [pc, #188]	; (1ee38 <log_nmgr_read+0x128>)
   1ed7a:	4630      	mov	r0, r6
   1ed7c:	f7f4 f9c9 	bl	13112 <cbor_encode_text_string>
   1ed80:	4607      	mov	r7, r0
    g_err |= cbor_encode_int(&cb->encoder, g_log_info.li_next_index);
   1ed82:	4b2e      	ldr	r3, [pc, #184]	; (1ee3c <log_nmgr_read+0x12c>)
   1ed84:	681a      	ldr	r2, [r3, #0]
   1ed86:	4623      	mov	r3, r4
   1ed88:	4630      	mov	r0, r6
   1ed8a:	f7f4 f947 	bl	1301c <cbor_encode_int>
   1ed8e:	4307      	orrs	r7, r0
   1ed90:	2204      	movs	r2, #4
   1ed92:	492b      	ldr	r1, [pc, #172]	; (1ee40 <log_nmgr_read+0x130>)
   1ed94:	4630      	mov	r0, r6
   1ed96:	f7f4 f9bc 	bl	13112 <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "logs");
   1ed9a:	4307      	orrs	r7, r0
    g_err |= cbor_encoder_create_array(&cb->encoder, &logs,
   1ed9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1eda0:	a932      	add	r1, sp, #200	; 0xc8
   1eda2:	4630      	mov	r0, r6
   1eda4:	f7f4 f9bc 	bl	13120 <cbor_encoder_create_array>
   1eda8:	4307      	orrs	r7, r0
    name_len = strlen(name);
   1edaa:	a83a      	add	r0, sp, #232	; 0xe8
   1edac:	f7ee fe60 	bl	da70 <strlen>
   1edb0:	4605      	mov	r5, r0
    rc = cbor_read_object(&cb->it, attr);
   1edb2:	46c8      	mov	r8, r9
   1edb4:	e00b      	b.n	1edce <log_nmgr_read+0xbe>
        rc = log_encode(log, &logs, ts, index);
   1edb6:	9b36      	ldr	r3, [sp, #216]	; 0xd8
   1edb8:	9300      	str	r3, [sp, #0]
   1edba:	e9dd 2338 	ldrd	r2, r3, [sp, #224]	; 0xe0
   1edbe:	a932      	add	r1, sp, #200	; 0xc8
   1edc0:	4620      	mov	r0, r4
   1edc2:	f7ff ff5f 	bl	1ec84 <log_encode>
        if (rc) {
   1edc6:	4680      	mov	r8, r0
   1edc8:	b9a0      	cbnz	r0, 1edf4 <log_nmgr_read+0xe4>
        if (name_len > 0) {
   1edca:	2d00      	cmp	r5, #0
   1edcc:	dc11      	bgt.n	1edf2 <log_nmgr_read+0xe2>
        log = log_list_get_next(log);
   1edce:	4620      	mov	r0, r4
   1edd0:	f7ff fb6c 	bl	1e4ac <log_list_get_next>
        if (!log) {
   1edd4:	4604      	mov	r4, r0
   1edd6:	b160      	cbz	r0, 1edf2 <log_nmgr_read+0xe2>
        if (log->l_log->log_type == LOG_TYPE_STREAM) {
   1edd8:	6843      	ldr	r3, [r0, #4]
   1edda:	681b      	ldr	r3, [r3, #0]
   1eddc:	2b00      	cmp	r3, #0
   1edde:	d0f6      	beq.n	1edce <log_nmgr_read+0xbe>
        if ((name_len > 0) && strcmp(name, log->l_name)) {
   1ede0:	2d00      	cmp	r5, #0
   1ede2:	dde8      	ble.n	1edb6 <log_nmgr_read+0xa6>
   1ede4:	6801      	ldr	r1, [r0, #0]
   1ede6:	a83a      	add	r0, sp, #232	; 0xe8
   1ede8:	f7ee fe36 	bl	da58 <strcmp>
   1edec:	2800      	cmp	r0, #0
   1edee:	d0e2      	beq.n	1edb6 <log_nmgr_read+0xa6>
   1edf0:	e7ed      	b.n	1edce <log_nmgr_read+0xbe>
    if (!log && name_len > 0) {
   1edf2:	b1b4      	cbz	r4, 1ee22 <log_nmgr_read+0x112>
    g_err |= cbor_encoder_close_container(&cb->encoder, &logs);
   1edf4:	a932      	add	r1, sp, #200	; 0xc8
   1edf6:	4630      	mov	r0, r6
   1edf8:	f7f4 f9a5 	bl	13146 <cbor_encoder_close_container>
   1edfc:	4307      	orrs	r7, r0
   1edfe:	2202      	movs	r2, #2
   1ee00:	4910      	ldr	r1, [pc, #64]	; (1ee44 <log_nmgr_read+0x134>)
   1ee02:	4630      	mov	r0, r6
   1ee04:	f7f4 f985 	bl	13112 <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1ee08:	4307      	orrs	r7, r0
    g_err |= cbor_encode_int(&cb->encoder, rc);
   1ee0a:	4642      	mov	r2, r8
   1ee0c:	ea4f 73e8 	mov.w	r3, r8, asr #31
   1ee10:	4630      	mov	r0, r6
   1ee12:	f7f4 f903 	bl	1301c <cbor_encode_int>
    if (g_err) {
   1ee16:	ea57 0300 	orrs.w	r3, r7, r0
   1ee1a:	d0a7      	beq.n	1ed6c <log_nmgr_read+0x5c>
        return MGMT_ERR_ENOMEM;
   1ee1c:	f04f 0902 	mov.w	r9, #2
   1ee20:	e7a4      	b.n	1ed6c <log_nmgr_read+0x5c>
    if (!log && name_len > 0) {
   1ee22:	2d00      	cmp	r5, #0
   1ee24:	dde6      	ble.n	1edf4 <log_nmgr_read+0xe4>
        rc = OS_EINVAL;
   1ee26:	f04f 0802 	mov.w	r8, #2
   1ee2a:	e7e3      	b.n	1edf4 <log_nmgr_read+0xe4>
   1ee2c:	00024b94 	.word	0x00024b94
   1ee30:	00024ba0 	.word	0x00024ba0
   1ee34:	00024ba4 	.word	0x00024ba4
   1ee38:	00024bac 	.word	0x00024bac
   1ee3c:	20004838 	.word	0x20004838
   1ee40:	00024bb8 	.word	0x00024bb8
   1ee44:	000238e4 	.word	0x000238e4

0001ee48 <log_nmgr_encode_entry>:
{
   1ee48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ee4c:	b0ad      	sub	sp, #180	; 0xb4
   1ee4e:	460e      	mov	r6, r1
   1ee50:	4615      	mov	r5, r2
   1ee52:	4619      	mov	r1, r3
    struct log_encode_data *ed = log_offset->lo_arg;
   1ee54:	6937      	ldr	r7, [r6, #16]
    if (log_offset->lo_ts == 0) {
   1ee56:	6834      	ldr	r4, [r6, #0]
   1ee58:	6872      	ldr	r2, [r6, #4]
   1ee5a:	ea54 0302 	orrs.w	r3, r4, r2
   1ee5e:	f040 80d7 	bne.w	1f010 <log_nmgr_encode_entry+0x1c8>
        if (log_offset->lo_index > ueh->ue_index) {
   1ee62:	68b2      	ldr	r2, [r6, #8]
   1ee64:	68ab      	ldr	r3, [r5, #8]
   1ee66:	429a      	cmp	r2, r3
   1ee68:	f200 80ee 	bhi.w	1f048 <log_nmgr_encode_entry+0x200>
    rc = log_read_body(log, dptr, data, 0, min(len, 128));
   1ee6c:	f8bd 20d0 	ldrh.w	r2, [sp, #208]	; 0xd0
   1ee70:	2a80      	cmp	r2, #128	; 0x80
   1ee72:	bf28      	it	cs
   1ee74:	2280      	movcs	r2, #128	; 0x80
   1ee76:	9200      	str	r2, [sp, #0]
   1ee78:	2300      	movs	r3, #0
   1ee7a:	aa0c      	add	r2, sp, #48	; 0x30
   1ee7c:	f7ff fc78 	bl	1e770 <log_read_body>
    if (rc < 0) {
   1ee80:	2800      	cmp	r0, #0
   1ee82:	f2c0 80e5 	blt.w	1f050 <log_nmgr_encode_entry+0x208>
    data[rc] = 0;
   1ee86:	f100 03b0 	add.w	r3, r0, #176	; 0xb0
   1ee8a:	eb0d 0003 	add.w	r0, sp, r3
   1ee8e:	f04f 0900 	mov.w	r9, #0
   1ee92:	f800 9c80 	strb.w	r9, [r0, #-128]
    cb->enc.bytes_written = 0;
   1ee96:	f8cd 901c 	str.w	r9, [sp, #28]
    cb->enc.write = &cbor_cnt_writer;
   1ee9a:	4b72      	ldr	r3, [pc, #456]	; (1f064 <log_nmgr_encode_entry+0x21c>)
   1ee9c:	9306      	str	r3, [sp, #24]
    cbor_encoder_init(&cnt_encoder, &cnt_writer.enc, 0);
   1ee9e:	464a      	mov	r2, r9
   1eea0:	a906      	add	r1, sp, #24
   1eea2:	a802      	add	r0, sp, #8
   1eea4:	f7f4 f875 	bl	12f92 <cbor_encoder_init>
    rsp_len = log_offset->lo_data_len;
   1eea8:	f8d6 800c 	ldr.w	r8, [r6, #12]
    g_err |= cbor_encoder_create_map(&cnt_encoder, &rsp, CborIndefiniteLength);
   1eeac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1eeb0:	a908      	add	r1, sp, #32
   1eeb2:	a802      	add	r0, sp, #8
   1eeb4:	f7f4 f939 	bl	1312a <cbor_encoder_create_map>
   1eeb8:	4604      	mov	r4, r0
   1eeba:	2203      	movs	r2, #3
   1eebc:	496a      	ldr	r1, [pc, #424]	; (1f068 <log_nmgr_encode_entry+0x220>)
   1eebe:	a808      	add	r0, sp, #32
   1eec0:	f7f4 f927 	bl	13112 <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&rsp, "msg");
   1eec4:	4304      	orrs	r4, r0
   1eec6:	a80c      	add	r0, sp, #48	; 0x30
   1eec8:	f7ee fdd2 	bl	da70 <strlen>
   1eecc:	4602      	mov	r2, r0
   1eece:	a90c      	add	r1, sp, #48	; 0x30
   1eed0:	a808      	add	r0, sp, #32
   1eed2:	f7f4 f91e 	bl	13112 <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&rsp, (char *)data);
   1eed6:	4304      	orrs	r4, r0
   1eed8:	2202      	movs	r2, #2
   1eeda:	4964      	ldr	r1, [pc, #400]	; (1f06c <log_nmgr_encode_entry+0x224>)
   1eedc:	a808      	add	r0, sp, #32
   1eede:	f7f4 f918 	bl	13112 <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&rsp, "ts");
   1eee2:	4304      	orrs	r4, r0
    g_err |= cbor_encode_int(&rsp, ueh->ue_ts);
   1eee4:	682a      	ldr	r2, [r5, #0]
   1eee6:	686b      	ldr	r3, [r5, #4]
   1eee8:	a808      	add	r0, sp, #32
   1eeea:	f7f4 f897 	bl	1301c <cbor_encode_int>
   1eeee:	4304      	orrs	r4, r0
   1eef0:	2205      	movs	r2, #5
   1eef2:	495f      	ldr	r1, [pc, #380]	; (1f070 <log_nmgr_encode_entry+0x228>)
   1eef4:	a808      	add	r0, sp, #32
   1eef6:	f7f4 f90c 	bl	13112 <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&rsp, "level");
   1eefa:	4304      	orrs	r4, r0
    g_err |= cbor_encode_uint(&rsp, ueh->ue_level);
   1eefc:	7b6a      	ldrb	r2, [r5, #13]
   1eefe:	464b      	mov	r3, r9
   1ef00:	a808      	add	r0, sp, #32
   1ef02:	f7f4 f84b 	bl	12f9c <cbor_encode_uint>
   1ef06:	4304      	orrs	r4, r0
   1ef08:	2205      	movs	r2, #5
   1ef0a:	495a      	ldr	r1, [pc, #360]	; (1f074 <log_nmgr_encode_entry+0x22c>)
   1ef0c:	a808      	add	r0, sp, #32
   1ef0e:	f7f4 f900 	bl	13112 <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&rsp, "index");
   1ef12:	4304      	orrs	r4, r0
    g_err |= cbor_encode_uint(&rsp,  ueh->ue_index);
   1ef14:	68aa      	ldr	r2, [r5, #8]
   1ef16:	464b      	mov	r3, r9
   1ef18:	a808      	add	r0, sp, #32
   1ef1a:	f7f4 f83f 	bl	12f9c <cbor_encode_uint>
   1ef1e:	4304      	orrs	r4, r0
   1ef20:	2206      	movs	r2, #6
   1ef22:	4955      	ldr	r1, [pc, #340]	; (1f078 <log_nmgr_encode_entry+0x230>)
   1ef24:	a808      	add	r0, sp, #32
   1ef26:	f7f4 f8f4 	bl	13112 <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&rsp, "module");
   1ef2a:	4304      	orrs	r4, r0
    g_err |= cbor_encode_uint(&rsp,  ueh->ue_module);
   1ef2c:	7b2a      	ldrb	r2, [r5, #12]
   1ef2e:	464b      	mov	r3, r9
   1ef30:	a808      	add	r0, sp, #32
   1ef32:	f7f4 f833 	bl	12f9c <cbor_encode_uint>
   1ef36:	4304      	orrs	r4, r0
    g_err |= cbor_encoder_close_container(&cnt_encoder, &rsp);
   1ef38:	a908      	add	r1, sp, #32
   1ef3a:	a802      	add	r0, sp, #8
   1ef3c:	f7f4 f903 	bl	13146 <cbor_encoder_close_container>
   1ef40:	4304      	orrs	r4, r0
{   return encoder->writer->bytes_written; }
   1ef42:	9b02      	ldr	r3, [sp, #8]
   1ef44:	685b      	ldr	r3, [r3, #4]
    rsp_len += cbor_encode_bytes_written(&cnt_encoder);
   1ef46:	4498      	add	r8, r3
    if (rsp_len > MYNEWT_VAL(LOG_NMGR_MAX_RSP_LEN)) {
   1ef48:	f5b8 7fc8 	cmp.w	r8, #400	; 0x190
   1ef4c:	dd73      	ble.n	1f036 <log_nmgr_encode_entry+0x1ee>
        if (ed->counter == 0) {
   1ef4e:	683b      	ldr	r3, [r7, #0]
   1ef50:	2b00      	cmp	r3, #0
   1ef52:	f040 8081 	bne.w	1f058 <log_nmgr_encode_entry+0x210>
            too_long = true;
   1ef56:	f04f 0901 	mov.w	r9, #1
    log_offset->lo_data_len = rsp_len;
   1ef5a:	f8c6 800c 	str.w	r8, [r6, #12]
    g_err |= cbor_encoder_create_map(ed->enc, &rsp, CborIndefiniteLength);
   1ef5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ef62:	a908      	add	r1, sp, #32
   1ef64:	6878      	ldr	r0, [r7, #4]
   1ef66:	f7f4 f8e0 	bl	1312a <cbor_encoder_create_map>
   1ef6a:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1ef6c:	2203      	movs	r2, #3
   1ef6e:	493e      	ldr	r1, [pc, #248]	; (1f068 <log_nmgr_encode_entry+0x220>)
   1ef70:	a808      	add	r0, sp, #32
   1ef72:	f7f4 f8ce 	bl	13112 <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&rsp, "msg");
   1ef76:	4304      	orrs	r4, r0
    if (too_long) {
   1ef78:	f1b9 0f00 	cmp.w	r9, #0
   1ef7c:	d15e      	bne.n	1f03c <log_nmgr_encode_entry+0x1f4>
   1ef7e:	a80c      	add	r0, sp, #48	; 0x30
   1ef80:	f7ee fd76 	bl	da70 <strlen>
   1ef84:	4602      	mov	r2, r0
   1ef86:	a90c      	add	r1, sp, #48	; 0x30
   1ef88:	a808      	add	r0, sp, #32
   1ef8a:	f7f4 f8c2 	bl	13112 <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&rsp, (char *)data);
   1ef8e:	4304      	orrs	r4, r0
   1ef90:	2202      	movs	r2, #2
   1ef92:	4936      	ldr	r1, [pc, #216]	; (1f06c <log_nmgr_encode_entry+0x224>)
   1ef94:	a808      	add	r0, sp, #32
   1ef96:	f7f4 f8bc 	bl	13112 <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&rsp, "ts");
   1ef9a:	4304      	orrs	r4, r0
    g_err |= cbor_encode_int(&rsp, ueh->ue_ts);
   1ef9c:	682a      	ldr	r2, [r5, #0]
   1ef9e:	686b      	ldr	r3, [r5, #4]
   1efa0:	a808      	add	r0, sp, #32
   1efa2:	f7f4 f83b 	bl	1301c <cbor_encode_int>
   1efa6:	4304      	orrs	r4, r0
   1efa8:	2205      	movs	r2, #5
   1efaa:	4931      	ldr	r1, [pc, #196]	; (1f070 <log_nmgr_encode_entry+0x228>)
   1efac:	a808      	add	r0, sp, #32
   1efae:	f7f4 f8b0 	bl	13112 <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&rsp, "level");
   1efb2:	4304      	orrs	r4, r0
    g_err |= cbor_encode_uint(&rsp, ueh->ue_level);
   1efb4:	2600      	movs	r6, #0
   1efb6:	7b6a      	ldrb	r2, [r5, #13]
   1efb8:	4633      	mov	r3, r6
   1efba:	a808      	add	r0, sp, #32
   1efbc:	f7f3 ffee 	bl	12f9c <cbor_encode_uint>
   1efc0:	4304      	orrs	r4, r0
   1efc2:	2205      	movs	r2, #5
   1efc4:	492b      	ldr	r1, [pc, #172]	; (1f074 <log_nmgr_encode_entry+0x22c>)
   1efc6:	a808      	add	r0, sp, #32
   1efc8:	f7f4 f8a3 	bl	13112 <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&rsp, "index");
   1efcc:	4304      	orrs	r4, r0
    g_err |= cbor_encode_uint(&rsp,  ueh->ue_index);
   1efce:	68aa      	ldr	r2, [r5, #8]
   1efd0:	4633      	mov	r3, r6
   1efd2:	a808      	add	r0, sp, #32
   1efd4:	f7f3 ffe2 	bl	12f9c <cbor_encode_uint>
   1efd8:	4304      	orrs	r4, r0
   1efda:	2206      	movs	r2, #6
   1efdc:	4926      	ldr	r1, [pc, #152]	; (1f078 <log_nmgr_encode_entry+0x230>)
   1efde:	a808      	add	r0, sp, #32
   1efe0:	f7f4 f897 	bl	13112 <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&rsp, "module");
   1efe4:	4304      	orrs	r4, r0
    g_err |= cbor_encode_uint(&rsp,  ueh->ue_module);
   1efe6:	7b2a      	ldrb	r2, [r5, #12]
   1efe8:	4633      	mov	r3, r6
   1efea:	a808      	add	r0, sp, #32
   1efec:	f7f3 ffd6 	bl	12f9c <cbor_encode_uint>
   1eff0:	4304      	orrs	r4, r0
    g_err |= cbor_encoder_close_container(ed->enc, &rsp);
   1eff2:	a908      	add	r1, sp, #32
   1eff4:	6878      	ldr	r0, [r7, #4]
   1eff6:	f7f4 f8a6 	bl	13146 <cbor_encoder_close_container>
    ed->counter++;
   1effa:	683b      	ldr	r3, [r7, #0]
   1effc:	3301      	adds	r3, #1
   1effe:	603b      	str	r3, [r7, #0]
    if (g_err) {
   1f000:	ea54 0300 	orrs.w	r3, r4, r0
   1f004:	d12a      	bne.n	1f05c <log_nmgr_encode_entry+0x214>
    if (too_long) {
   1f006:	f1b9 0f00 	cmp.w	r9, #0
   1f00a:	d029      	beq.n	1f060 <log_nmgr_encode_entry+0x218>
        rc = OS_ENOMEM;
   1f00c:	2001      	movs	r0, #1
   1f00e:	e020      	b.n	1f052 <log_nmgr_encode_entry+0x20a>
    } else if (ueh->ue_ts < log_offset->lo_ts   ||
   1f010:	f8d5 c000 	ldr.w	ip, [r5]
   1f014:	686b      	ldr	r3, [r5, #4]
   1f016:	45a4      	cmp	ip, r4
   1f018:	eb73 0e02 	sbcs.w	lr, r3, r2
   1f01c:	db16      	blt.n	1f04c <log_nmgr_encode_entry+0x204>
   1f01e:	429a      	cmp	r2, r3
   1f020:	bf08      	it	eq
   1f022:	4564      	cmpeq	r4, ip
   1f024:	f47f af22 	bne.w	1ee6c <log_nmgr_encode_entry+0x24>
                ueh->ue_index < log_offset->lo_index)) {
   1f028:	68aa      	ldr	r2, [r5, #8]
   1f02a:	68b3      	ldr	r3, [r6, #8]
               (ueh->ue_ts == log_offset->lo_ts &&
   1f02c:	429a      	cmp	r2, r3
   1f02e:	f4bf af1d 	bcs.w	1ee6c <log_nmgr_encode_entry+0x24>
    rc = OS_OK;
   1f032:	2000      	movs	r0, #0
   1f034:	e00d      	b.n	1f052 <log_nmgr_encode_entry+0x20a>
    too_long = false;
   1f036:	f04f 0900 	mov.w	r9, #0
   1f03a:	e78e      	b.n	1ef5a <log_nmgr_encode_entry+0x112>
        sprintf((char *)data, "error: entry too large (%d bytes)", rsp_len);
   1f03c:	4642      	mov	r2, r8
   1f03e:	490f      	ldr	r1, [pc, #60]	; (1f07c <log_nmgr_encode_entry+0x234>)
   1f040:	a80c      	add	r0, sp, #48	; 0x30
   1f042:	f7fd f9c4 	bl	1c3ce <sprintf>
   1f046:	e79a      	b.n	1ef7e <log_nmgr_encode_entry+0x136>
    rc = OS_OK;
   1f048:	2000      	movs	r0, #0
   1f04a:	e002      	b.n	1f052 <log_nmgr_encode_entry+0x20a>
   1f04c:	2000      	movs	r0, #0
   1f04e:	e000      	b.n	1f052 <log_nmgr_encode_entry+0x20a>
        rc = OS_ENOENT;
   1f050:	200a      	movs	r0, #10
}
   1f052:	b02d      	add	sp, #180	; 0xb4
   1f054:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            rc = OS_ENOMEM;
   1f058:	2001      	movs	r0, #1
   1f05a:	e7fa      	b.n	1f052 <log_nmgr_encode_entry+0x20a>
        return MGMT_ERR_ENOMEM;
   1f05c:	2002      	movs	r0, #2
   1f05e:	e7f8      	b.n	1f052 <log_nmgr_encode_entry+0x20a>
        rc = 0;
   1f060:	2000      	movs	r0, #0
   1f062:	e7f6      	b.n	1f052 <log_nmgr_encode_entry+0x20a>
   1f064:	0001e8c1 	.word	0x0001e8c1
   1f068:	00024bc0 	.word	0x00024bc0
   1f06c:	00024ba0 	.word	0x00024ba0
   1f070:	00024b7c 	.word	0x00024b7c
   1f074:	00024ba4 	.word	0x00024ba4
   1f078:	00024b74 	.word	0x00024b74
   1f07c:	00024bc4 	.word	0x00024bc4

0001f080 <log_nmgr_register_group>:
 * Register nmgr group handlers.
 * @return 0 on success; non-zero on failure
 */
int
log_nmgr_register_group(void)
{
   1f080:	b508      	push	{r3, lr}
    int rc;

    MGMT_GROUP_SET_HANDLERS(&log_nmgr_group, log_nmgr_group_handlers);
   1f082:	4805      	ldr	r0, [pc, #20]	; (1f098 <log_nmgr_register_group+0x18>)
   1f084:	4b05      	ldr	r3, [pc, #20]	; (1f09c <log_nmgr_register_group+0x1c>)
   1f086:	6003      	str	r3, [r0, #0]
   1f088:	2309      	movs	r3, #9
   1f08a:	8083      	strh	r3, [r0, #4]
    log_nmgr_group.mg_group_id = MGMT_GROUP_ID_LOGS;
   1f08c:	2304      	movs	r3, #4
   1f08e:	80c3      	strh	r3, [r0, #6]

    rc = mgmt_group_register(&log_nmgr_group);
   1f090:	f7fe f916 	bl	1d2c0 <mgmt_group_register>
    }

    return (0);
err:
    return (rc);
}
   1f094:	bd08      	pop	{r3, pc}
   1f096:	bf00      	nop
   1f098:	200048e0 	.word	0x200048e0
   1f09c:	20000fb4 	.word	0x20000fb4

0001f0a0 <modlog_find_by_module>:
    return cur;
}

static struct modlog_mapping *
modlog_find_by_module(uint8_t module, struct modlog_mapping **out_prev)
{
   1f0a0:	b410      	push	{r4}
   1f0a2:	4602      	mov	r2, r0
    struct modlog_mapping *prev;
    struct modlog_mapping *cur;

    prev = NULL;
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   1f0a4:	4b08      	ldr	r3, [pc, #32]	; (1f0c8 <modlog_find_by_module+0x28>)
   1f0a6:	6818      	ldr	r0, [r3, #0]
    prev = NULL;
   1f0a8:	2400      	movs	r4, #0
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   1f0aa:	e001      	b.n	1f0b0 <modlog_find_by_module+0x10>
        if (cur->desc.module > module) {
            cur = NULL;
            break;
        }

        prev = cur;
   1f0ac:	4604      	mov	r4, r0
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   1f0ae:	6800      	ldr	r0, [r0, #0]
   1f0b0:	b120      	cbz	r0, 1f0bc <modlog_find_by_module+0x1c>
        if (cur->desc.module == module) {
   1f0b2:	7a43      	ldrb	r3, [r0, #9]
   1f0b4:	4293      	cmp	r3, r2
   1f0b6:	d001      	beq.n	1f0bc <modlog_find_by_module+0x1c>
        if (cur->desc.module > module) {
   1f0b8:	d9f8      	bls.n	1f0ac <modlog_find_by_module+0xc>
            cur = NULL;
   1f0ba:	2000      	movs	r0, #0
    }

    if (out_prev != NULL) {
   1f0bc:	b101      	cbz	r1, 1f0c0 <modlog_find_by_module+0x20>
        *out_prev = prev;
   1f0be:	600c      	str	r4, [r1, #0]
    }

    return cur;
}
   1f0c0:	f85d 4b04 	ldr.w	r4, [sp], #4
   1f0c4:	4770      	bx	lr
   1f0c6:	bf00      	nop
   1f0c8:	200049cc 	.word	0x200049cc

0001f0cc <modlog_insert>:

static void
modlog_insert(struct modlog_mapping *mm)
{
   1f0cc:	b510      	push	{r4, lr}
   1f0ce:	b082      	sub	sp, #8
   1f0d0:	4604      	mov	r4, r0
    struct modlog_mapping *prev;

    modlog_find_by_module(mm->desc.module, &prev);
   1f0d2:	a901      	add	r1, sp, #4
   1f0d4:	7a40      	ldrb	r0, [r0, #9]
   1f0d6:	f7ff ffe3 	bl	1f0a0 <modlog_find_by_module>
    if (prev == NULL) {
   1f0da:	9b01      	ldr	r3, [sp, #4]
   1f0dc:	b143      	cbz	r3, 1f0f0 <modlog_insert+0x24>
        SLIST_INSERT_HEAD(&modlog_mappings, mm, next);
    } else {
        SLIST_INSERT_AFTER(prev, mm, next);
   1f0de:	681b      	ldr	r3, [r3, #0]
   1f0e0:	6023      	str	r3, [r4, #0]
   1f0e2:	9b01      	ldr	r3, [sp, #4]
   1f0e4:	601c      	str	r4, [r3, #0]
    }

    if (mm->desc.module == MODLOG_MODULE_DFLT) {
   1f0e6:	7a63      	ldrb	r3, [r4, #9]
   1f0e8:	2bff      	cmp	r3, #255	; 0xff
   1f0ea:	d006      	beq.n	1f0fa <modlog_insert+0x2e>
        modlog_first_dflt = mm;
    }
}
   1f0ec:	b002      	add	sp, #8
   1f0ee:	bd10      	pop	{r4, pc}
        SLIST_INSERT_HEAD(&modlog_mappings, mm, next);
   1f0f0:	4b03      	ldr	r3, [pc, #12]	; (1f100 <modlog_insert+0x34>)
   1f0f2:	681a      	ldr	r2, [r3, #0]
   1f0f4:	6022      	str	r2, [r4, #0]
   1f0f6:	601c      	str	r4, [r3, #0]
   1f0f8:	e7f5      	b.n	1f0e6 <modlog_insert+0x1a>
        modlog_first_dflt = mm;
   1f0fa:	4b02      	ldr	r3, [pc, #8]	; (1f104 <modlog_insert+0x38>)
   1f0fc:	601c      	str	r4, [r3, #0]
}
   1f0fe:	e7f5      	b.n	1f0ec <modlog_insert+0x20>
   1f100:	200049cc 	.word	0x200049cc
   1f104:	200048ec 	.word	0x200048ec

0001f108 <modlog_alloc>:
{
   1f108:	b508      	push	{r3, lr}
    mm = os_memblock_get(&modlog_mapping_pool);
   1f10a:	4805      	ldr	r0, [pc, #20]	; (1f120 <modlog_alloc+0x18>)
   1f10c:	f7ea fbca 	bl	98a4 <os_memblock_get>
    if (mm != NULL) {
   1f110:	4603      	mov	r3, r0
   1f112:	b118      	cbz	r0, 1f11c <modlog_alloc+0x14>
        *mm = (struct modlog_mapping) { 0 };
   1f114:	2200      	movs	r2, #0
   1f116:	6002      	str	r2, [r0, #0]
   1f118:	6042      	str	r2, [r0, #4]
   1f11a:	6082      	str	r2, [r0, #8]
}
   1f11c:	4618      	mov	r0, r3
   1f11e:	bd08      	pop	{r3, pc}
   1f120:	200049b0 	.word	0x200049b0

0001f124 <modlog_infer_handle>:
{
   1f124:	b508      	push	{r3, lr}
    off = (uintptr_t)mm - (uintptr_t)modlog_mapping_buf;
   1f126:	4a0f      	ldr	r2, [pc, #60]	; (1f164 <modlog_infer_handle+0x40>)
   1f128:	1a82      	subs	r2, r0, r2
    idx = off / elem_sz;
   1f12a:	480f      	ldr	r0, [pc, #60]	; (1f168 <modlog_infer_handle+0x44>)
   1f12c:	fba0 3002 	umull	r3, r0, r0, r2
    assert(idx >= 0 && idx < MYNEWT_VAL(MODLOG_MAX_MAPPINGS));
   1f130:	2abf      	cmp	r2, #191	; 0xbf
   1f132:	d80b      	bhi.n	1f14c <modlog_infer_handle+0x28>
   1f134:	08c0      	lsrs	r0, r0, #3
    assert(off % elem_sz == 0);
   1f136:	4b0c      	ldr	r3, [pc, #48]	; (1f168 <modlog_infer_handle+0x44>)
   1f138:	fba3 1302 	umull	r1, r3, r3, r2
   1f13c:	08db      	lsrs	r3, r3, #3
   1f13e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1f142:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   1f146:	d107      	bne.n	1f158 <modlog_infer_handle+0x34>
}
   1f148:	b2c0      	uxtb	r0, r0
   1f14a:	bd08      	pop	{r3, pc}
    assert(idx >= 0 && idx < MYNEWT_VAL(MODLOG_MAX_MAPPINGS));
   1f14c:	2300      	movs	r3, #0
   1f14e:	461a      	mov	r2, r3
   1f150:	4619      	mov	r1, r3
   1f152:	4618      	mov	r0, r3
   1f154:	f7e9 ff7a 	bl	904c <__assert_func>
    assert(off % elem_sz == 0);
   1f158:	2300      	movs	r3, #0
   1f15a:	461a      	mov	r2, r3
   1f15c:	4619      	mov	r1, r3
   1f15e:	4618      	mov	r0, r3
   1f160:	f7e9 ff74 	bl	904c <__assert_func>
   1f164:	200048f0 	.word	0x200048f0
   1f168:	aaaaaaab 	.word	0xaaaaaaab

0001f16c <modlog_register_no_lock>:
modlog_register_no_lock(uint8_t module, struct log *log, uint8_t min_level,
                        uint8_t *out_handle)
{
    struct modlog_mapping *mm;

    if (log == NULL) {
   1f16c:	b1c9      	cbz	r1, 1f1a2 <modlog_register_no_lock+0x36>
{
   1f16e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f172:	4607      	mov	r7, r0
   1f174:	4616      	mov	r6, r2
   1f176:	461d      	mov	r5, r3
   1f178:	4688      	mov	r8, r1
        return SYS_EINVAL;
    }

    mm = modlog_alloc();
   1f17a:	f7ff ffc5 	bl	1f108 <modlog_alloc>
    if (mm == NULL) {
   1f17e:	4604      	mov	r4, r0
   1f180:	b190      	cbz	r0, 1f1a8 <modlog_register_no_lock+0x3c>
        return SYS_ENOMEM;
    }

    mm->desc = (struct modlog_desc) {
        .log = log,
        .handle = modlog_infer_handle(mm),
   1f182:	f7ff ffcf 	bl	1f124 <modlog_infer_handle>
    mm->desc = (struct modlog_desc) {
   1f186:	f8c4 8004 	str.w	r8, [r4, #4]
   1f18a:	7220      	strb	r0, [r4, #8]
   1f18c:	7267      	strb	r7, [r4, #9]
   1f18e:	72a6      	strb	r6, [r4, #10]
        .module = module,
        .min_level = min_level,
    };

    modlog_insert(mm);
   1f190:	4620      	mov	r0, r4
   1f192:	f7ff ff9b 	bl	1f0cc <modlog_insert>

    if (out_handle != NULL) {
   1f196:	b155      	cbz	r5, 1f1ae <modlog_register_no_lock+0x42>
        *out_handle = mm->desc.handle;
   1f198:	7a23      	ldrb	r3, [r4, #8]
   1f19a:	702b      	strb	r3, [r5, #0]
    }

    return 0;
   1f19c:	2000      	movs	r0, #0
}
   1f19e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
   1f1a2:	f06f 0001 	mvn.w	r0, #1
}
   1f1a6:	4770      	bx	lr
        return SYS_ENOMEM;
   1f1a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f1ac:	e7f7      	b.n	1f19e <modlog_register_no_lock+0x32>
    return 0;
   1f1ae:	2000      	movs	r0, #0
   1f1b0:	e7f5      	b.n	1f19e <modlog_register_no_lock+0x32>

0001f1b2 <modlog_append_one>:
modlog_append_one(struct modlog_mapping *mm, uint8_t module, uint8_t level,
                  uint8_t etype, void *data, uint16_t len)
{
    int rc;

    if (level >= mm->desc.min_level) {
   1f1b2:	f890 c00a 	ldrb.w	ip, [r0, #10]
   1f1b6:	4594      	cmp	ip, r2
   1f1b8:	d901      	bls.n	1f1be <modlog_append_one+0xc>
    } else {
        LOG_STATS_INC(mm->desc.log, writes);
        LOG_STATS_INC(mm->desc.log, drops);
    }

    return 0;
   1f1ba:	2000      	movs	r0, #0
}
   1f1bc:	4770      	bx	lr
{
   1f1be:	b510      	push	{r4, lr}
   1f1c0:	b082      	sub	sp, #8
        rc = log_append_body(mm->desc.log, module, level, etype, data, len);
   1f1c2:	f8bd 4014 	ldrh.w	r4, [sp, #20]
   1f1c6:	9401      	str	r4, [sp, #4]
   1f1c8:	9c04      	ldr	r4, [sp, #16]
   1f1ca:	9400      	str	r4, [sp, #0]
   1f1cc:	6840      	ldr	r0, [r0, #4]
   1f1ce:	f7ff f9b1 	bl	1e534 <log_append_body>
        if (rc != 0) {
   1f1d2:	b908      	cbnz	r0, 1f1d8 <modlog_append_one+0x26>
}
   1f1d4:	b002      	add	sp, #8
   1f1d6:	bd10      	pop	{r4, pc}
            return SYS_EIO;
   1f1d8:	f06f 0004 	mvn.w	r0, #4
   1f1dc:	e7fa      	b.n	1f1d4 <modlog_append_one+0x22>
	...

0001f1e0 <modlog_append_no_lock>:

static int
modlog_append_no_lock(uint8_t module, uint8_t level, uint8_t etype,
                      void *data, uint16_t len)
{
   1f1e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f1e4:	b083      	sub	sp, #12
   1f1e6:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
    struct modlog_mapping *mm;
    int rc;

    if (module == MODLOG_MODULE_DFLT) {
   1f1ea:	28ff      	cmp	r0, #255	; 0xff
   1f1ec:	d031      	beq.n	1f252 <modlog_append_no_lock+0x72>
   1f1ee:	4605      	mov	r5, r0
   1f1f0:	460e      	mov	r6, r1
   1f1f2:	4617      	mov	r7, r2
   1f1f4:	4698      	mov	r8, r3
        return SYS_EINVAL;
    }

    mm = modlog_find_by_module(module, NULL);
   1f1f6:	2100      	movs	r1, #0
   1f1f8:	f7ff ff52 	bl	1f0a0 <modlog_find_by_module>
    if (mm != NULL) {
   1f1fc:	4604      	mov	r4, r0
   1f1fe:	b198      	cbz	r0, 1f228 <modlog_append_no_lock+0x48>
        while (mm != NULL && mm->desc.module == module) {
   1f200:	b354      	cbz	r4, 1f258 <modlog_append_no_lock+0x78>
   1f202:	7a60      	ldrb	r0, [r4, #9]
   1f204:	42a8      	cmp	r0, r5
   1f206:	d10d      	bne.n	1f224 <modlog_append_no_lock+0x44>
            rc = modlog_append_one(mm, module, level, etype, data, len);
   1f208:	f8cd 9004 	str.w	r9, [sp, #4]
   1f20c:	f8cd 8000 	str.w	r8, [sp]
   1f210:	463b      	mov	r3, r7
   1f212:	4632      	mov	r2, r6
   1f214:	4629      	mov	r1, r5
   1f216:	4620      	mov	r0, r4
   1f218:	f7ff ffcb 	bl	1f1b2 <modlog_append_one>
            if (rc != 0) {
   1f21c:	4603      	mov	r3, r0
   1f21e:	b9e0      	cbnz	r0, 1f25a <modlog_append_no_lock+0x7a>
                return rc;
            }

            mm = SLIST_NEXT(mm, next);
   1f220:	6824      	ldr	r4, [r4, #0]
   1f222:	e7ed      	b.n	1f200 <modlog_append_no_lock+0x20>
        }
        return 0;
   1f224:	2300      	movs	r3, #0
   1f226:	e018      	b.n	1f25a <modlog_append_no_lock+0x7a>
    }

    /* No mappings match the specified module; write to the default set. */
    for (mm = modlog_first_dflt;
   1f228:	4b0e      	ldr	r3, [pc, #56]	; (1f264 <modlog_append_no_lock+0x84>)
   1f22a:	681c      	ldr	r4, [r3, #0]
   1f22c:	e000      	b.n	1f230 <modlog_append_no_lock+0x50>
         mm != NULL;
         mm = SLIST_NEXT(mm, next)) {
   1f22e:	6824      	ldr	r4, [r4, #0]
    for (mm = modlog_first_dflt;
   1f230:	b16c      	cbz	r4, 1f24e <modlog_append_no_lock+0x6e>

        rc = modlog_append_one(mm, module, level, etype, data, len);
   1f232:	f8cd 9004 	str.w	r9, [sp, #4]
   1f236:	f8cd 8000 	str.w	r8, [sp]
   1f23a:	463b      	mov	r3, r7
   1f23c:	4632      	mov	r2, r6
   1f23e:	4629      	mov	r1, r5
   1f240:	4620      	mov	r0, r4
   1f242:	f7ff ffb6 	bl	1f1b2 <modlog_append_one>
        if (rc != 0) {
   1f246:	4603      	mov	r3, r0
   1f248:	2800      	cmp	r0, #0
   1f24a:	d0f0      	beq.n	1f22e <modlog_append_no_lock+0x4e>
   1f24c:	e005      	b.n	1f25a <modlog_append_no_lock+0x7a>
            return rc;
        }
    }

    return 0;
   1f24e:	2300      	movs	r3, #0
   1f250:	e003      	b.n	1f25a <modlog_append_no_lock+0x7a>
        return SYS_EINVAL;
   1f252:	f06f 0301 	mvn.w	r3, #1
   1f256:	e000      	b.n	1f25a <modlog_append_no_lock+0x7a>
        return 0;
   1f258:	2300      	movs	r3, #0
}
   1f25a:	4618      	mov	r0, r3
   1f25c:	b003      	add	sp, #12
   1f25e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1f262:	bf00      	nop
   1f264:	200048ec 	.word	0x200048ec

0001f268 <modlog_register>:
}

int
modlog_register(uint8_t module, struct log *log, uint8_t min_level,
                uint8_t *out_handle)
{
   1f268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f26c:	4604      	mov	r4, r0
   1f26e:	460d      	mov	r5, r1
   1f270:	4616      	mov	r6, r2
   1f272:	461f      	mov	r7, r3
    int rc;

    rwlock_acquire_write(&modlog_rwl);
   1f274:	f8df 8020 	ldr.w	r8, [pc, #32]	; 1f298 <modlog_register+0x30>
   1f278:	4640      	mov	r0, r8
   1f27a:	f000 fbbe 	bl	1f9fa <rwlock_acquire_write>
    rc = modlog_register_no_lock(module, log, min_level, out_handle);
   1f27e:	463b      	mov	r3, r7
   1f280:	4632      	mov	r2, r6
   1f282:	4629      	mov	r1, r5
   1f284:	4620      	mov	r0, r4
   1f286:	f7ff ff71 	bl	1f16c <modlog_register_no_lock>
   1f28a:	4604      	mov	r4, r0
    rwlock_release_write(&modlog_rwl);
   1f28c:	4640      	mov	r0, r8
   1f28e:	f000 fbde 	bl	1fa4e <rwlock_release_write>

    return rc;
}
   1f292:	4620      	mov	r0, r4
   1f294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f298:	200049d0 	.word	0x200049d0

0001f29c <modlog_append>:
}

int
modlog_append(uint8_t module, uint8_t level, uint8_t etype,
              void *data, uint16_t len)
{
   1f29c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f2a0:	b082      	sub	sp, #8
   1f2a2:	4604      	mov	r4, r0
   1f2a4:	460d      	mov	r5, r1
   1f2a6:	4616      	mov	r6, r2
   1f2a8:	461f      	mov	r7, r3
    int rc;

    rwlock_acquire_read(&modlog_rwl);
   1f2aa:	f8df 802c 	ldr.w	r8, [pc, #44]	; 1f2d8 <modlog_append+0x3c>
   1f2ae:	4640      	mov	r0, r8
   1f2b0:	f000 fb63 	bl	1f97a <rwlock_acquire_read>
    rc = modlog_append_no_lock(module, level, etype, data, len);
   1f2b4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   1f2b8:	9300      	str	r3, [sp, #0]
   1f2ba:	463b      	mov	r3, r7
   1f2bc:	4632      	mov	r2, r6
   1f2be:	4629      	mov	r1, r5
   1f2c0:	4620      	mov	r0, r4
   1f2c2:	f7ff ff8d 	bl	1f1e0 <modlog_append_no_lock>
   1f2c6:	4604      	mov	r4, r0
    rwlock_release_read(&modlog_rwl);
   1f2c8:	4640      	mov	r0, r8
   1f2ca:	f000 fb83 	bl	1f9d4 <rwlock_release_read>

    return rc;
}
   1f2ce:	4620      	mov	r0, r4
   1f2d0:	b002      	add	sp, #8
   1f2d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f2d6:	bf00      	nop
   1f2d8:	200049d0 	.word	0x200049d0

0001f2dc <modlog_printf>:
    return rc;
}

void
modlog_printf(uint8_t module, uint8_t level, const char *msg, ...)
{
   1f2dc:	b40c      	push	{r2, r3}
   1f2de:	b530      	push	{r4, r5, lr}
   1f2e0:	b0a5      	sub	sp, #148	; 0x94
   1f2e2:	4604      	mov	r4, r0
   1f2e4:	460d      	mov	r5, r1
   1f2e6:	ab28      	add	r3, sp, #160	; 0xa0
   1f2e8:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    char buf[MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN)];
    int len;

    va_start(args, msg);
   1f2ec:	9323      	str	r3, [sp, #140]	; 0x8c
    len = vsnprintf(buf, MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN), msg, args);
   1f2ee:	2180      	movs	r1, #128	; 0x80
   1f2f0:	a803      	add	r0, sp, #12
   1f2f2:	f7ee ffab 	bl	e24c <vsnprintf>
    va_end(args);

    if (len >= MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN)) {
   1f2f6:	287f      	cmp	r0, #127	; 0x7f
   1f2f8:	dd00      	ble.n	1f2fc <modlog_printf+0x20>
        len = MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN) - 1;
   1f2fa:	207f      	movs	r0, #127	; 0x7f
    }

    modlog_append(module, level, LOG_ETYPE_STRING, buf, len);
   1f2fc:	b280      	uxth	r0, r0
   1f2fe:	9000      	str	r0, [sp, #0]
   1f300:	ab03      	add	r3, sp, #12
   1f302:	2200      	movs	r2, #0
   1f304:	4629      	mov	r1, r5
   1f306:	4620      	mov	r0, r4
   1f308:	f7ff ffc8 	bl	1f29c <modlog_append>
}
   1f30c:	b025      	add	sp, #148	; 0x94
   1f30e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1f312:	b002      	add	sp, #8
   1f314:	4770      	bx	lr
	...

0001f318 <modlog_init>:

void
modlog_init(void)
{
   1f318:	b510      	push	{r4, lr}
   1f31a:	b082      	sub	sp, #8
    int rc;

    SYSINIT_ASSERT_ACTIVE();
   1f31c:	4b1e      	ldr	r3, [pc, #120]	; (1f398 <modlog_init+0x80>)
   1f31e:	781b      	ldrb	r3, [r3, #0]
   1f320:	2b00      	cmp	r3, #0
   1f322:	d034      	beq.n	1f38e <modlog_init+0x76>

    rc = os_mempool_init(&modlog_mapping_pool, MYNEWT_VAL(MODLOG_MAX_MAPPINGS),
   1f324:	4b1d      	ldr	r3, [pc, #116]	; (1f39c <modlog_init+0x84>)
   1f326:	9300      	str	r3, [sp, #0]
   1f328:	4b1d      	ldr	r3, [pc, #116]	; (1f3a0 <modlog_init+0x88>)
   1f32a:	220c      	movs	r2, #12
   1f32c:	2110      	movs	r1, #16
   1f32e:	481d      	ldr	r0, [pc, #116]	; (1f3a4 <modlog_init+0x8c>)
   1f330:	f7ea faae 	bl	9890 <os_mempool_init>
                         sizeof (struct modlog_mapping), modlog_mapping_buf,
                         "modlog_mapping_pool");
    SYSINIT_PANIC_ASSERT(rc == 0);
   1f334:	b138      	cbz	r0, 1f346 <modlog_init+0x2e>
   1f336:	2000      	movs	r0, #0
   1f338:	9000      	str	r0, [sp, #0]
   1f33a:	4b1b      	ldr	r3, [pc, #108]	; (1f3a8 <modlog_init+0x90>)
   1f33c:	681c      	ldr	r4, [r3, #0]
   1f33e:	4603      	mov	r3, r0
   1f340:	4602      	mov	r2, r0
   1f342:	4601      	mov	r1, r0
   1f344:	47a0      	blx	r4

    SLIST_INIT(&modlog_mappings);
   1f346:	2300      	movs	r3, #0
   1f348:	4a18      	ldr	r2, [pc, #96]	; (1f3ac <modlog_init+0x94>)
   1f34a:	6013      	str	r3, [r2, #0]
    modlog_first_dflt = NULL;
   1f34c:	4a18      	ldr	r2, [pc, #96]	; (1f3b0 <modlog_init+0x98>)
   1f34e:	6013      	str	r3, [r2, #0]

    rc = rwlock_init(&modlog_rwl);
   1f350:	4818      	ldr	r0, [pc, #96]	; (1f3b4 <modlog_init+0x9c>)
   1f352:	f000 fb8b 	bl	1fa6c <rwlock_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1f356:	b138      	cbz	r0, 1f368 <modlog_init+0x50>
   1f358:	2000      	movs	r0, #0
   1f35a:	9000      	str	r0, [sp, #0]
   1f35c:	4b12      	ldr	r3, [pc, #72]	; (1f3a8 <modlog_init+0x90>)
   1f35e:	681c      	ldr	r4, [r3, #0]
   1f360:	4603      	mov	r3, r0
   1f362:	4602      	mov	r2, r0
   1f364:	4601      	mov	r1, r0
   1f366:	47a0      	blx	r4

    /* Register the default console mapping if configured. */
#if MYNEWT_VAL(MODLOG_CONSOLE_DFLT)
    rc = modlog_register(MODLOG_MODULE_DFLT, log_console_get(),
   1f368:	f7ff fa56 	bl	1e818 <log_console_get>
   1f36c:	4601      	mov	r1, r0
   1f36e:	2300      	movs	r3, #0
   1f370:	461a      	mov	r2, r3
   1f372:	20ff      	movs	r0, #255	; 0xff
   1f374:	f7ff ff78 	bl	1f268 <modlog_register>
                         LOG_LEVEL_DEBUG, NULL);
    SYSINIT_PANIC_ASSERT(rc == 0);
   1f378:	b138      	cbz	r0, 1f38a <modlog_init+0x72>
   1f37a:	2000      	movs	r0, #0
   1f37c:	9000      	str	r0, [sp, #0]
   1f37e:	4b0a      	ldr	r3, [pc, #40]	; (1f3a8 <modlog_init+0x90>)
   1f380:	681c      	ldr	r4, [r3, #0]
   1f382:	4603      	mov	r3, r0
   1f384:	4602      	mov	r2, r0
   1f386:	4601      	mov	r1, r0
   1f388:	47a0      	blx	r4
#endif
}
   1f38a:	b002      	add	sp, #8
   1f38c:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1f38e:	461a      	mov	r2, r3
   1f390:	4619      	mov	r1, r3
   1f392:	4618      	mov	r0, r3
   1f394:	f7e9 fe5a 	bl	904c <__assert_func>
   1f398:	20004548 	.word	0x20004548
   1f39c:	00024be8 	.word	0x00024be8
   1f3a0:	200048f0 	.word	0x200048f0
   1f3a4:	200049b0 	.word	0x200049b0
   1f3a8:	2000064c 	.word	0x2000064c
   1f3ac:	200049cc 	.word	0x200049cc
   1f3b0:	200048ec 	.word	0x200048ec
   1f3b4:	200049d0 	.word	0x200049d0

0001f3b8 <mfg_seek_next_aux>:
 *                                  for reading.
 *                              Other MFG error code on failure.
 */
static int
mfg_seek_next_aux(struct mfg_reader *reader)
{
   1f3b8:	b530      	push	{r4, r5, lr}
   1f3ba:	b083      	sub	sp, #12
    const struct flash_area *fap;
    const struct mfg_mmr *mmr;
    int rc;

    if (reader->mmr_idx >= mfg_num_mmrs) {
   1f3bc:	7885      	ldrb	r5, [r0, #2]
   1f3be:	4b20      	ldr	r3, [pc, #128]	; (1f440 <mfg_seek_next_aux+0x88>)
   1f3c0:	681b      	ldr	r3, [r3, #0]
   1f3c2:	429d      	cmp	r5, r3
   1f3c4:	da33      	bge.n	1f42e <mfg_seek_next_aux+0x76>
   1f3c6:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }

    mmr = &mfg_mmrs[reader->mmr_idx];

    rc = flash_area_open(mmr->area_id, &fap);
   1f3c8:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   1f3cc:	a901      	add	r1, sp, #4
   1f3ce:	4a1d      	ldr	r2, [pc, #116]	; (1f444 <mfg_seek_next_aux+0x8c>)
   1f3d0:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
   1f3d4:	f7fe fe86 	bl	1e0e4 <flash_area_open>
    if (rc != 0) {
   1f3d8:	bb60      	cbnz	r0, 1f434 <mfg_seek_next_aux+0x7c>
        return SYS_EIO;
    }

    if (reader->offset == 0) {
   1f3da:	6862      	ldr	r2, [r4, #4]
   1f3dc:	b9c2      	cbnz	r2, 1f410 <mfg_seek_next_aux+0x58>
        /* First seek; advance to the start of the MMR. */
        reader->offset = mmr->offset;
   1f3de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1f3e2:	4b18      	ldr	r3, [pc, #96]	; (1f444 <mfg_seek_next_aux+0x8c>)
   1f3e4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   1f3e8:	686b      	ldr	r3, [r5, #4]
   1f3ea:	6063      	str	r3, [r4, #4]
    } else {
        /* Follow-up seek; skip the current TLV. */
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    }

    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
   1f3ec:	6861      	ldr	r1, [r4, #4]
   1f3ee:	9801      	ldr	r0, [sp, #4]
   1f3f0:	6883      	ldr	r3, [r0, #8]
   1f3f2:	3b08      	subs	r3, #8
   1f3f4:	4299      	cmp	r1, r3
   1f3f6:	d313      	bcc.n	1f420 <mfg_seek_next_aux+0x68>
        /* Reached end of the MMR; advance to the next MMR if one exists. */
        if (reader->mmr_idx + 1 >= mfg_num_mmrs) {
   1f3f8:	78a3      	ldrb	r3, [r4, #2]
   1f3fa:	1c59      	adds	r1, r3, #1
   1f3fc:	4a10      	ldr	r2, [pc, #64]	; (1f440 <mfg_seek_next_aux+0x88>)
   1f3fe:	6812      	ldr	r2, [r2, #0]
   1f400:	4291      	cmp	r1, r2
   1f402:	da0a      	bge.n	1f41a <mfg_seek_next_aux+0x62>
            rc = SYS_EDONE;
        } else {
            reader->offset = 0;
   1f404:	2200      	movs	r2, #0
   1f406:	6062      	str	r2, [r4, #4]
            reader->mmr_idx++;
   1f408:	70a1      	strb	r1, [r4, #2]
            rc = SYS_EAGAIN;
   1f40a:	f06f 0005 	mvn.w	r0, #5
   1f40e:	e00c      	b.n	1f42a <mfg_seek_next_aux+0x72>
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
   1f410:	7863      	ldrb	r3, [r4, #1]
   1f412:	4413      	add	r3, r2
   1f414:	3302      	adds	r3, #2
   1f416:	6063      	str	r3, [r4, #4]
   1f418:	e7e8      	b.n	1f3ec <mfg_seek_next_aux+0x34>
            rc = SYS_EDONE;
   1f41a:	f06f 000e 	mvn.w	r0, #14
        }
        goto done;
   1f41e:	e004      	b.n	1f42a <mfg_seek_next_aux+0x72>
    }

    /* Read current TLV header. */
    rc = flash_area_read(fap, reader->offset, &reader->cur_tlv,
   1f420:	2302      	movs	r3, #2
   1f422:	4622      	mov	r2, r4
   1f424:	f7fe febe 	bl	1e1a4 <flash_area_read>
                         MFG_META_TLV_SZ);
    if (rc != 0) {
   1f428:	b938      	cbnz	r0, 1f43a <mfg_seek_next_aux+0x82>
    }

done:
    flash_area_close(fap);
    return rc;
}
   1f42a:	b003      	add	sp, #12
   1f42c:	bd30      	pop	{r4, r5, pc}
        return SYS_EINVAL;
   1f42e:	f06f 0001 	mvn.w	r0, #1
   1f432:	e7fa      	b.n	1f42a <mfg_seek_next_aux+0x72>
        return SYS_EIO;
   1f434:	f06f 0004 	mvn.w	r0, #4
   1f438:	e7f7      	b.n	1f42a <mfg_seek_next_aux+0x72>
        rc = SYS_EIO;
   1f43a:	f06f 0004 	mvn.w	r0, #4
   1f43e:	e7f4      	b.n	1f42a <mfg_seek_next_aux+0x72>
   1f440:	20004a10 	.word	0x20004a10
   1f444:	200049f8 	.word	0x200049f8

0001f448 <mfg_read_mmr>:
/**
 * Reads an MMR from the end of the specified flash area.
 */
static int
mfg_read_mmr(uint8_t area_id, struct mfg_mmr *out_mmr)
{
   1f448:	b530      	push	{r4, r5, lr}
   1f44a:	b085      	sub	sp, #20
   1f44c:	4605      	mov	r5, r0
   1f44e:	460c      	mov	r4, r1
    const struct flash_area *fap;
    struct mfg_meta_footer ftr;
    int rc;

    rc = flash_area_open(area_id, &fap);
   1f450:	a903      	add	r1, sp, #12
   1f452:	f7fe fe47 	bl	1e0e4 <flash_area_open>
    if (rc != 0) {
   1f456:	b9d8      	cbnz	r0, 1f490 <mfg_read_mmr+0x48>
        return SYS_EIO;
    }

    /* Read the MMR footer. */
    rc = flash_area_read(fap, fap->fa_size - sizeof ftr, &ftr, sizeof ftr);
   1f458:	9803      	ldr	r0, [sp, #12]
   1f45a:	6881      	ldr	r1, [r0, #8]
   1f45c:	2308      	movs	r3, #8
   1f45e:	aa01      	add	r2, sp, #4
   1f460:	3908      	subs	r1, #8
   1f462:	f7fe fe9f 	bl	1e1a4 <flash_area_read>
    flash_area_close(fap);

    if (rc != 0) {
   1f466:	b9b0      	cbnz	r0, 1f496 <mfg_read_mmr+0x4e>
        return SYS_EIO;
    }

    if (ftr.magic != MFG_META_MAGIC) {
   1f468:	9a02      	ldr	r2, [sp, #8]
   1f46a:	4b11      	ldr	r3, [pc, #68]	; (1f4b0 <mfg_read_mmr+0x68>)
   1f46c:	429a      	cmp	r2, r3
   1f46e:	d115      	bne.n	1f49c <mfg_read_mmr+0x54>
        return SYS_ENODEV;
    }

    if (ftr.version != MFG_META_VERSION) {
   1f470:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1f474:	2b02      	cmp	r3, #2
   1f476:	d114      	bne.n	1f4a2 <mfg_read_mmr+0x5a>
        return SYS_ENOTSUP;
    }

    if (ftr.size > fap->fa_size) {
   1f478:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1f47c:	9b03      	ldr	r3, [sp, #12]
   1f47e:	689b      	ldr	r3, [r3, #8]
   1f480:	429a      	cmp	r2, r3
   1f482:	d811      	bhi.n	1f4a8 <mfg_read_mmr+0x60>
        return SYS_ENODEV;
    }

    *out_mmr = (struct mfg_mmr) {
        .area_id = area_id,
        .offset = fap->fa_size - ftr.size,
   1f484:	1a9b      	subs	r3, r3, r2
    *out_mmr = (struct mfg_mmr) {
   1f486:	7025      	strb	r5, [r4, #0]
   1f488:	6063      	str	r3, [r4, #4]
   1f48a:	60a2      	str	r2, [r4, #8]
        .size = ftr.size,
    };

    return 0;
}
   1f48c:	b005      	add	sp, #20
   1f48e:	bd30      	pop	{r4, r5, pc}
        return SYS_EIO;
   1f490:	f06f 0004 	mvn.w	r0, #4
   1f494:	e7fa      	b.n	1f48c <mfg_read_mmr+0x44>
        return SYS_EIO;
   1f496:	f06f 0004 	mvn.w	r0, #4
   1f49a:	e7f7      	b.n	1f48c <mfg_read_mmr+0x44>
        return SYS_ENODEV;
   1f49c:	f06f 0008 	mvn.w	r0, #8
   1f4a0:	e7f4      	b.n	1f48c <mfg_read_mmr+0x44>
        return SYS_ENOTSUP;
   1f4a2:	f06f 000b 	mvn.w	r0, #11
   1f4a6:	e7f1      	b.n	1f48c <mfg_read_mmr+0x44>
        return SYS_ENODEV;
   1f4a8:	f06f 0008 	mvn.w	r0, #8
   1f4ac:	e7ee      	b.n	1f48c <mfg_read_mmr+0x44>
   1f4ae:	bf00      	nop
   1f4b0:	3bb2a269 	.word	0x3bb2a269

0001f4b4 <mfg_read_next_mmr>:
 * Reads an MMR from the end of the specified flash area.  On success, the
 * global MMR list is populated with the result for subsequent reading.
 */
static int
mfg_read_next_mmr(uint8_t area_id)
{
   1f4b4:	b508      	push	{r3, lr}
    int rc;
    int i;

    /* Detect if this MMR has already been read. */
    for (i = 0; i < mfg_num_mmrs; i++) {
   1f4b6:	2300      	movs	r3, #0
   1f4b8:	e000      	b.n	1f4bc <mfg_read_next_mmr+0x8>
   1f4ba:	3301      	adds	r3, #1
   1f4bc:	4a10      	ldr	r2, [pc, #64]	; (1f500 <mfg_read_next_mmr+0x4c>)
   1f4be:	6811      	ldr	r1, [r2, #0]
   1f4c0:	4299      	cmp	r1, r3
   1f4c2:	dd09      	ble.n	1f4d8 <mfg_read_next_mmr+0x24>
        if (mfg_mmrs[i].area_id == area_id) {
   1f4c4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1f4c8:	490e      	ldr	r1, [pc, #56]	; (1f504 <mfg_read_next_mmr+0x50>)
   1f4ca:	f811 2022 	ldrb.w	r2, [r1, r2, lsl #2]
   1f4ce:	4282      	cmp	r2, r0
   1f4d0:	d1f3      	bne.n	1f4ba <mfg_read_next_mmr+0x6>
            return SYS_EALREADY;
   1f4d2:	f06f 000a 	mvn.w	r0, #10
        return rc;
    }

    mfg_num_mmrs++;
    return 0;
}
   1f4d6:	bd08      	pop	{r3, pc}
    if (mfg_num_mmrs >= MYNEWT_VAL(MFG_MAX_MMRS)) {
   1f4d8:	2901      	cmp	r1, #1
   1f4da:	dc0d      	bgt.n	1f4f8 <mfg_read_next_mmr+0x44>
    rc = mfg_read_mmr(area_id, &mfg_mmrs[mfg_num_mmrs]);
   1f4dc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   1f4e0:	4b08      	ldr	r3, [pc, #32]	; (1f504 <mfg_read_next_mmr+0x50>)
   1f4e2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1f4e6:	f7ff ffaf 	bl	1f448 <mfg_read_mmr>
    if (rc != 0) {
   1f4ea:	2800      	cmp	r0, #0
   1f4ec:	d1f3      	bne.n	1f4d6 <mfg_read_next_mmr+0x22>
    mfg_num_mmrs++;
   1f4ee:	4a04      	ldr	r2, [pc, #16]	; (1f500 <mfg_read_next_mmr+0x4c>)
   1f4f0:	6813      	ldr	r3, [r2, #0]
   1f4f2:	3301      	adds	r3, #1
   1f4f4:	6013      	str	r3, [r2, #0]
    return 0;
   1f4f6:	e7ee      	b.n	1f4d6 <mfg_read_next_mmr+0x22>
        return SYS_ENOMEM;
   1f4f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f4fc:	e7eb      	b.n	1f4d6 <mfg_read_next_mmr+0x22>
   1f4fe:	bf00      	nop
   1f500:	20004a10 	.word	0x20004a10
   1f504:	200049f8 	.word	0x200049f8

0001f508 <mfg_open_flash_area>:
{
   1f508:	b508      	push	{r3, lr}
    assert(reader->mmr_idx < mfg_num_mmrs);
   1f50a:	7883      	ldrb	r3, [r0, #2]
   1f50c:	4a0a      	ldr	r2, [pc, #40]	; (1f538 <mfg_open_flash_area+0x30>)
   1f50e:	6812      	ldr	r2, [r2, #0]
   1f510:	4293      	cmp	r3, r2
   1f512:	da08      	bge.n	1f526 <mfg_open_flash_area+0x1e>
    rc = flash_area_open(mmr->area_id, fap);
   1f514:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1f518:	4a08      	ldr	r2, [pc, #32]	; (1f53c <mfg_open_flash_area+0x34>)
   1f51a:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
   1f51e:	f7fe fde1 	bl	1e0e4 <flash_area_open>
    if (rc != 0) {
   1f522:	b930      	cbnz	r0, 1f532 <mfg_open_flash_area+0x2a>
}
   1f524:	bd08      	pop	{r3, pc}
    assert(reader->mmr_idx < mfg_num_mmrs);
   1f526:	2300      	movs	r3, #0
   1f528:	461a      	mov	r2, r3
   1f52a:	4619      	mov	r1, r3
   1f52c:	4618      	mov	r0, r3
   1f52e:	f7e9 fd8d 	bl	904c <__assert_func>
        return SYS_EIO;
   1f532:	f06f 0004 	mvn.w	r0, #4
   1f536:	e7f5      	b.n	1f524 <mfg_open_flash_area+0x1c>
   1f538:	20004a10 	.word	0x20004a10
   1f53c:	200049f8 	.word	0x200049f8

0001f540 <mfg_read_tlv_body>:
{
   1f540:	b570      	push	{r4, r5, r6, lr}
   1f542:	b082      	sub	sp, #8
   1f544:	4606      	mov	r6, r0
   1f546:	460c      	mov	r4, r1
   1f548:	4615      	mov	r5, r2
    rc = mfg_open_flash_area(reader, &fap);
   1f54a:	a901      	add	r1, sp, #4
   1f54c:	f7ff ffdc 	bl	1f508 <mfg_open_flash_area>
    if (rc != 0) {
   1f550:	b108      	cbz	r0, 1f556 <mfg_read_tlv_body+0x16>
}
   1f552:	b002      	add	sp, #8
   1f554:	bd70      	pop	{r4, r5, r6, pc}
    memset(dst, 0, max_size);
   1f556:	462a      	mov	r2, r5
   1f558:	2100      	movs	r1, #0
   1f55a:	4620      	mov	r0, r4
   1f55c:	f7ee fa51 	bl	da02 <memset>
    read_sz = min(max_size, reader->cur_tlv.size);
   1f560:	7873      	ldrb	r3, [r6, #1]
    rc = flash_area_read(fap, reader->offset + MFG_META_TLV_SZ, dst, read_sz);
   1f562:	6871      	ldr	r1, [r6, #4]
   1f564:	42ab      	cmp	r3, r5
   1f566:	bfa8      	it	ge
   1f568:	462b      	movge	r3, r5
   1f56a:	4622      	mov	r2, r4
   1f56c:	3102      	adds	r1, #2
   1f56e:	9801      	ldr	r0, [sp, #4]
   1f570:	f7fe fe18 	bl	1e1a4 <flash_area_read>
    if (rc != 0) {
   1f574:	2800      	cmp	r0, #0
   1f576:	d0ec      	beq.n	1f552 <mfg_read_tlv_body+0x12>
        return SYS_EIO;
   1f578:	f06f 0004 	mvn.w	r0, #4
   1f57c:	e7e9      	b.n	1f552 <mfg_read_tlv_body+0x12>

0001f57e <mfg_seek_next>:
{
   1f57e:	b510      	push	{r4, lr}
   1f580:	4604      	mov	r4, r0
        rc = mfg_seek_next_aux(reader);
   1f582:	4620      	mov	r0, r4
   1f584:	f7ff ff18 	bl	1f3b8 <mfg_seek_next_aux>
    } while (rc == SYS_EAGAIN);
   1f588:	f110 0f06 	cmn.w	r0, #6
   1f58c:	d0f9      	beq.n	1f582 <mfg_seek_next+0x4>
}
   1f58e:	bd10      	pop	{r4, pc}

0001f590 <mfg_seek_next_with_type>:
{
   1f590:	b538      	push	{r3, r4, r5, lr}
   1f592:	4604      	mov	r4, r0
   1f594:	460d      	mov	r5, r1
        rc = mfg_seek_next(reader);
   1f596:	4620      	mov	r0, r4
   1f598:	f7ff fff1 	bl	1f57e <mfg_seek_next>
        if (rc != 0) {
   1f59c:	4602      	mov	r2, r0
   1f59e:	b910      	cbnz	r0, 1f5a6 <mfg_seek_next_with_type+0x16>
        if (reader->cur_tlv.type == type) {
   1f5a0:	7823      	ldrb	r3, [r4, #0]
   1f5a2:	42ab      	cmp	r3, r5
   1f5a4:	d1f7      	bne.n	1f596 <mfg_seek_next_with_type+0x6>
}
   1f5a6:	4610      	mov	r0, r2
   1f5a8:	bd38      	pop	{r3, r4, r5, pc}

0001f5aa <mfg_read_tlv_flash_area>:
{
   1f5aa:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mfa, sizeof *out_mfa);
   1f5ac:	220a      	movs	r2, #10
   1f5ae:	f7ff ffc7 	bl	1f540 <mfg_read_tlv_body>
}
   1f5b2:	bd08      	pop	{r3, pc}

0001f5b4 <mfg_read_tlv_mmr_ref>:
{
   1f5b4:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mr, sizeof *out_mr);
   1f5b6:	2201      	movs	r2, #1
   1f5b8:	f7ff ffc2 	bl	1f540 <mfg_read_tlv_body>
}
   1f5bc:	bd08      	pop	{r3, pc}
	...

0001f5c0 <mfg_init>:
 * called before any TLVs can be read.  No-op if this function has already
 * executed successfully.
 */
void
mfg_init(void)
{
   1f5c0:	b508      	push	{r3, lr}
    int rc;

    if (mfg_initialized) {
   1f5c2:	4b0f      	ldr	r3, [pc, #60]	; (1f600 <mfg_init+0x40>)
   1f5c4:	781b      	ldrb	r3, [r3, #0]
   1f5c6:	b97b      	cbnz	r3, 1f5e8 <mfg_init+0x28>
        return;
    }
    mfg_initialized = true;
   1f5c8:	4b0d      	ldr	r3, [pc, #52]	; (1f600 <mfg_init+0x40>)
   1f5ca:	2201      	movs	r2, #1
   1f5cc:	701a      	strb	r2, [r3, #0]

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1f5ce:	4b0d      	ldr	r3, [pc, #52]	; (1f604 <mfg_init+0x44>)
   1f5d0:	781b      	ldrb	r3, [r3, #0]
   1f5d2:	b153      	cbz	r3, 1f5ea <mfg_init+0x2a>

    /* Read the first MMR from the boot loader area. */
    rc = mfg_read_next_mmr(FLASH_AREA_BOOTLOADER);
   1f5d4:	2000      	movs	r0, #0
   1f5d6:	f7ff ff6d 	bl	1f4b4 <mfg_read_next_mmr>
    if (rc != 0) {
   1f5da:	4603      	mov	r3, r0
   1f5dc:	b150      	cbz	r0, 1f5f4 <mfg_init+0x34>
    }

    return;

err:
    MFG_LOG(ERROR, "failed to read MMRs: rc=%d", rc);
   1f5de:	4a0a      	ldr	r2, [pc, #40]	; (1f608 <mfg_init+0x48>)
   1f5e0:	2103      	movs	r1, #3
   1f5e2:	2080      	movs	r0, #128	; 0x80
   1f5e4:	f7ff fe7a 	bl	1f2dc <modlog_printf>
}
   1f5e8:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1f5ea:	461a      	mov	r2, r3
   1f5ec:	4619      	mov	r1, r3
   1f5ee:	4618      	mov	r0, r3
   1f5f0:	f7e9 fd2c 	bl	904c <__assert_func>
    rc = mfg_read_mmr_refs();
   1f5f4:	f000 f812 	bl	1f61c <mfg_read_mmr_refs>
    if (rc != 0) {
   1f5f8:	4603      	mov	r3, r0
   1f5fa:	2800      	cmp	r0, #0
   1f5fc:	d0f4      	beq.n	1f5e8 <mfg_init+0x28>
   1f5fe:	e7ee      	b.n	1f5de <mfg_init+0x1e>
   1f600:	200049f4 	.word	0x200049f4
   1f604:	20004548 	.word	0x20004548
   1f608:	00024bfc 	.word	0x00024bfc

0001f60c <mfg_open>:
{
   1f60c:	b510      	push	{r4, lr}
   1f60e:	4604      	mov	r4, r0
    mfg_init();
   1f610:	f7ff ffd6 	bl	1f5c0 <mfg_init>
    *out_reader = (struct mfg_reader) { 0 };
   1f614:	2300      	movs	r3, #0
   1f616:	6023      	str	r3, [r4, #0]
   1f618:	6063      	str	r3, [r4, #4]
}
   1f61a:	bd10      	pop	{r4, pc}

0001f61c <mfg_read_mmr_refs>:
{
   1f61c:	b500      	push	{lr}
   1f61e:	b085      	sub	sp, #20
    mfg_open(&reader);
   1f620:	a801      	add	r0, sp, #4
   1f622:	f7ff fff3 	bl	1f60c <mfg_open>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_MMR_REF);
   1f626:	2104      	movs	r1, #4
   1f628:	eb0d 0001 	add.w	r0, sp, r1
   1f62c:	f7ff ffb0 	bl	1f590 <mfg_seek_next_with_type>
        switch (rc) {
   1f630:	f110 0f0f 	cmn.w	r0, #15
   1f634:	d00f      	beq.n	1f656 <mfg_read_mmr_refs+0x3a>
   1f636:	b978      	cbnz	r0, 1f658 <mfg_read_mmr_refs+0x3c>
        rc = mfg_read_tlv_mmr_ref(&reader, &mmr_ref);
   1f638:	a903      	add	r1, sp, #12
   1f63a:	a801      	add	r0, sp, #4
   1f63c:	f7ff ffba 	bl	1f5b4 <mfg_read_tlv_mmr_ref>
        if (rc != 0) {
   1f640:	b950      	cbnz	r0, 1f658 <mfg_read_mmr_refs+0x3c>
        rc = mfg_read_next_mmr(mmr_ref.area_id);
   1f642:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1f646:	f7ff ff35 	bl	1f4b4 <mfg_read_next_mmr>
        if (rc != 0 && rc != SYS_EALREADY) {
   1f64a:	2800      	cmp	r0, #0
   1f64c:	d0eb      	beq.n	1f626 <mfg_read_mmr_refs+0xa>
   1f64e:	f110 0f0b 	cmn.w	r0, #11
   1f652:	d0e8      	beq.n	1f626 <mfg_read_mmr_refs+0xa>
   1f654:	e000      	b.n	1f658 <mfg_read_mmr_refs+0x3c>
        switch (rc) {
   1f656:	2000      	movs	r0, #0
}
   1f658:	b005      	add	sp, #20
   1f65a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0001f660 <reboot_conf_export>:

static int
reboot_conf_export(void (*func)(char *name, char *val),
                   enum conf_export_tgt tgt)
{
    if (tgt == CONF_EXPORT_SHOW) {
   1f660:	2901      	cmp	r1, #1
   1f662:	d001      	beq.n	1f668 <reboot_conf_export+0x8>
        func("reboot/reboot_cnt", reboot_cnt_str);
        func("reboot/written", log_reboot_written_str);
    }
    return 0;
}
   1f664:	2000      	movs	r0, #0
   1f666:	4770      	bx	lr
{
   1f668:	b510      	push	{r4, lr}
   1f66a:	4604      	mov	r4, r0
        func("reboot/reboot_cnt", reboot_cnt_str);
   1f66c:	4903      	ldr	r1, [pc, #12]	; (1f67c <reboot_conf_export+0x1c>)
   1f66e:	4804      	ldr	r0, [pc, #16]	; (1f680 <reboot_conf_export+0x20>)
   1f670:	47a0      	blx	r4
        func("reboot/written", log_reboot_written_str);
   1f672:	4904      	ldr	r1, [pc, #16]	; (1f684 <reboot_conf_export+0x24>)
   1f674:	4804      	ldr	r0, [pc, #16]	; (1f688 <reboot_conf_export+0x28>)
   1f676:	47a0      	blx	r4
}
   1f678:	2000      	movs	r0, #0
   1f67a:	bd10      	pop	{r4, pc}
   1f67c:	20004a28 	.word	0x20004a28
   1f680:	00024c18 	.word	0x00024c18
   1f684:	20004a18 	.word	0x20004a18
   1f688:	00024c2c 	.word	0x00024c2c

0001f68c <reboot_conf_set>:
    if (argc == 1) {
   1f68c:	2801      	cmp	r0, #1
   1f68e:	d001      	beq.n	1f694 <reboot_conf_set+0x8>
    return OS_ENOENT;
   1f690:	200a      	movs	r0, #10
}
   1f692:	4770      	bx	lr
{
   1f694:	b538      	push	{r3, r4, r5, lr}
   1f696:	4614      	mov	r4, r2
        if (!strcmp(argv[0], "reboot_cnt")) {
   1f698:	680d      	ldr	r5, [r1, #0]
   1f69a:	490d      	ldr	r1, [pc, #52]	; (1f6d0 <reboot_conf_set+0x44>)
   1f69c:	4628      	mov	r0, r5
   1f69e:	f7ee f9db 	bl	da58 <strcmp>
   1f6a2:	b130      	cbz	r0, 1f6b2 <reboot_conf_set+0x26>
        } else if (!strcmp(argv[0], "written")) {
   1f6a4:	490b      	ldr	r1, [pc, #44]	; (1f6d4 <reboot_conf_set+0x48>)
   1f6a6:	4628      	mov	r0, r5
   1f6a8:	f7ee f9d6 	bl	da58 <strcmp>
   1f6ac:	b140      	cbz	r0, 1f6c0 <reboot_conf_set+0x34>
    return OS_ENOENT;
   1f6ae:	200a      	movs	r0, #10
}
   1f6b0:	bd38      	pop	{r3, r4, r5, pc}
            return CONF_VALUE_SET(val, CONF_INT16, reboot_cnt);
   1f6b2:	2302      	movs	r3, #2
   1f6b4:	4a08      	ldr	r2, [pc, #32]	; (1f6d8 <reboot_conf_set+0x4c>)
   1f6b6:	2103      	movs	r1, #3
   1f6b8:	4620      	mov	r0, r4
   1f6ba:	f7ef f9ee 	bl	ea9a <conf_value_from_str>
   1f6be:	e7f7      	b.n	1f6b0 <reboot_conf_set+0x24>
            return CONF_VALUE_SET(val, CONF_INT16, log_reboot_written);
   1f6c0:	2301      	movs	r3, #1
   1f6c2:	4a06      	ldr	r2, [pc, #24]	; (1f6dc <reboot_conf_set+0x50>)
   1f6c4:	2103      	movs	r1, #3
   1f6c6:	4620      	mov	r0, r4
   1f6c8:	f7ef f9e7 	bl	ea9a <conf_value_from_str>
   1f6cc:	e7f0      	b.n	1f6b0 <reboot_conf_set+0x24>
   1f6ce:	bf00      	nop
   1f6d0:	00024c3c 	.word	0x00024c3c
   1f6d4:	00024c48 	.word	0x00024c48
   1f6d8:	20004a24 	.word	0x20004a24
   1f6dc:	20004a14 	.word	0x20004a14

0001f6e0 <reboot_conf_get>:
    if (argc == 1) {
   1f6e0:	2801      	cmp	r0, #1
   1f6e2:	d11b      	bne.n	1f71c <reboot_conf_get+0x3c>
{
   1f6e4:	b510      	push	{r4, lr}
        if (!strcmp(argv[0], "reboot_cnt")) {
   1f6e6:	680c      	ldr	r4, [r1, #0]
   1f6e8:	490d      	ldr	r1, [pc, #52]	; (1f720 <reboot_conf_get+0x40>)
   1f6ea:	4620      	mov	r0, r4
   1f6ec:	f7ee f9b4 	bl	da58 <strcmp>
   1f6f0:	b130      	cbz	r0, 1f700 <reboot_conf_get+0x20>
        } else if (!strcmp(argv[0], "written")) {
   1f6f2:	490c      	ldr	r1, [pc, #48]	; (1f724 <reboot_conf_get+0x44>)
   1f6f4:	4620      	mov	r0, r4
   1f6f6:	f7ee f9af 	bl	da58 <strcmp>
   1f6fa:	b140      	cbz	r0, 1f70e <reboot_conf_get+0x2e>
    return NULL;
   1f6fc:	2000      	movs	r0, #0
}
   1f6fe:	bd10      	pop	{r4, pc}
            return conf_str_from_value(CONF_INT16, &reboot_cnt,
   1f700:	230c      	movs	r3, #12
   1f702:	4a09      	ldr	r2, [pc, #36]	; (1f728 <reboot_conf_get+0x48>)
   1f704:	4909      	ldr	r1, [pc, #36]	; (1f72c <reboot_conf_get+0x4c>)
   1f706:	2003      	movs	r0, #3
   1f708:	f7ef fa2c 	bl	eb64 <conf_str_from_value>
   1f70c:	e7f7      	b.n	1f6fe <reboot_conf_get+0x1e>
            return conf_str_from_value(CONF_BOOL, &log_reboot_written,
   1f70e:	230c      	movs	r3, #12
   1f710:	4a07      	ldr	r2, [pc, #28]	; (1f730 <reboot_conf_get+0x50>)
   1f712:	4908      	ldr	r1, [pc, #32]	; (1f734 <reboot_conf_get+0x54>)
   1f714:	200a      	movs	r0, #10
   1f716:	f7ef fa25 	bl	eb64 <conf_str_from_value>
   1f71a:	e7f0      	b.n	1f6fe <reboot_conf_get+0x1e>
    return NULL;
   1f71c:	2000      	movs	r0, #0
}
   1f71e:	4770      	bx	lr
   1f720:	00024c3c 	.word	0x00024c3c
   1f724:	00024c48 	.word	0x00024c48
   1f728:	20004a28 	.word	0x20004a28
   1f72c:	20004a24 	.word	0x20004a24
   1f730:	20004a18 	.word	0x20004a18
   1f734:	20004a14 	.word	0x20004a14

0001f738 <log_reboot_write>:
{
   1f738:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f73a:	b0d1      	sub	sp, #324	; 0x144
   1f73c:	4606      	mov	r6, r0
    rc = imgr_read_info(boot_current_slot, &ver, hash, NULL);
   1f73e:	2300      	movs	r3, #0
   1f740:	aa46      	add	r2, sp, #280	; 0x118
   1f742:	a94e      	add	r1, sp, #312	; 0x138
   1f744:	4839      	ldr	r0, [pc, #228]	; (1f82c <log_reboot_write+0xf4>)
   1f746:	6800      	ldr	r0, [r0, #0]
   1f748:	f7fc ffba 	bl	1c6c0 <imgr_read_info>
    if (rc != 0) {
   1f74c:	4607      	mov	r7, r0
   1f74e:	2800      	cmp	r0, #0
   1f750:	d15f      	bne.n	1f812 <log_reboot_write+0xda>
                    REBOOT_REASON_STR(info->reason), reboot_cnt, ver.iv_major,
   1f752:	7833      	ldrb	r3, [r6, #0]
    off += snprintf(buf + off, sizeof buf - off,
   1f754:	2b01      	cmp	r3, #1
   1f756:	d00f      	beq.n	1f778 <log_reboot_write+0x40>
                    REBOOT_REASON_STR(info->reason), reboot_cnt, ver.iv_major,
   1f758:	2b02      	cmp	r3, #2
   1f75a:	d025      	beq.n	1f7a8 <log_reboot_write+0x70>
   1f75c:	2b03      	cmp	r3, #3
   1f75e:	d025      	beq.n	1f7ac <log_reboot_write+0x74>
   1f760:	2b04      	cmp	r3, #4
   1f762:	d025      	beq.n	1f7b0 <log_reboot_write+0x78>
   1f764:	2b05      	cmp	r3, #5
   1f766:	d025      	beq.n	1f7b4 <log_reboot_write+0x7c>
   1f768:	2b06      	cmp	r3, #6
   1f76a:	d025      	beq.n	1f7b8 <log_reboot_write+0x80>
   1f76c:	2b07      	cmp	r3, #7
   1f76e:	d001      	beq.n	1f774 <log_reboot_write+0x3c>
   1f770:	4b2f      	ldr	r3, [pc, #188]	; (1f830 <log_reboot_write+0xf8>)
   1f772:	e002      	b.n	1f77a <log_reboot_write+0x42>
   1f774:	4b2f      	ldr	r3, [pc, #188]	; (1f834 <log_reboot_write+0xfc>)
   1f776:	e000      	b.n	1f77a <log_reboot_write+0x42>
    off += snprintf(buf + off, sizeof buf - off,
   1f778:	4b2f      	ldr	r3, [pc, #188]	; (1f838 <log_reboot_write+0x100>)
                    REBOOT_REASON_STR(info->reason), reboot_cnt, ver.iv_major,
   1f77a:	f89d 2138 	ldrb.w	r2, [sp, #312]	; 0x138
                    ver.iv_minor, ver.iv_revision,
   1f77e:	f89d 1139 	ldrb.w	r1, [sp, #313]	; 0x139
   1f782:	f8bd 013a 	ldrh.w	r0, [sp, #314]	; 0x13a
    off += snprintf(buf + off, sizeof buf - off,
   1f786:	9c4f      	ldr	r4, [sp, #316]	; 0x13c
   1f788:	9404      	str	r4, [sp, #16]
   1f78a:	9003      	str	r0, [sp, #12]
   1f78c:	9102      	str	r1, [sp, #8]
   1f78e:	9201      	str	r2, [sp, #4]
   1f790:	4a2a      	ldr	r2, [pc, #168]	; (1f83c <log_reboot_write+0x104>)
   1f792:	8812      	ldrh	r2, [r2, #0]
   1f794:	9200      	str	r2, [sp, #0]
   1f796:	4a2a      	ldr	r2, [pc, #168]	; (1f840 <log_reboot_write+0x108>)
   1f798:	f44f 7180 	mov.w	r1, #256	; 0x100
   1f79c:	a806      	add	r0, sp, #24
   1f79e:	f7ee fd72 	bl	e286 <snprintf>
   1f7a2:	4604      	mov	r4, r0
    for (i = 0; i < sizeof hash; i++) {
   1f7a4:	463d      	mov	r5, r7
   1f7a6:	e017      	b.n	1f7d8 <log_reboot_write+0xa0>
                    REBOOT_REASON_STR(info->reason), reboot_cnt, ver.iv_major,
   1f7a8:	4b26      	ldr	r3, [pc, #152]	; (1f844 <log_reboot_write+0x10c>)
   1f7aa:	e7e6      	b.n	1f77a <log_reboot_write+0x42>
   1f7ac:	4b26      	ldr	r3, [pc, #152]	; (1f848 <log_reboot_write+0x110>)
   1f7ae:	e7e4      	b.n	1f77a <log_reboot_write+0x42>
   1f7b0:	4b26      	ldr	r3, [pc, #152]	; (1f84c <log_reboot_write+0x114>)
   1f7b2:	e7e2      	b.n	1f77a <log_reboot_write+0x42>
   1f7b4:	4b26      	ldr	r3, [pc, #152]	; (1f850 <log_reboot_write+0x118>)
   1f7b6:	e7e0      	b.n	1f77a <log_reboot_write+0x42>
   1f7b8:	4b26      	ldr	r3, [pc, #152]	; (1f854 <log_reboot_write+0x11c>)
   1f7ba:	e7de      	b.n	1f77a <log_reboot_write+0x42>
                        (unsigned int)hash[i]);
   1f7bc:	f505 73a0 	add.w	r3, r5, #320	; 0x140
   1f7c0:	446b      	add	r3, sp
        off += snprintf(buf + off, sizeof buf - off, "%02x",
   1f7c2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
   1f7c6:	4a24      	ldr	r2, [pc, #144]	; (1f858 <log_reboot_write+0x120>)
   1f7c8:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   1f7cc:	a806      	add	r0, sp, #24
   1f7ce:	4420      	add	r0, r4
   1f7d0:	f7ee fd59 	bl	e286 <snprintf>
   1f7d4:	4404      	add	r4, r0
    for (i = 0; i < sizeof hash; i++) {
   1f7d6:	3501      	adds	r5, #1
   1f7d8:	2d1f      	cmp	r5, #31
   1f7da:	d9ef      	bls.n	1f7bc <log_reboot_write+0x84>
    if (info->file != NULL) {
   1f7dc:	6873      	ldr	r3, [r6, #4]
   1f7de:	b14b      	cbz	r3, 1f7f4 <log_reboot_write+0xbc>
        off += snprintf(buf + off, sizeof buf - off, ", die:%s:%d",
   1f7e0:	68b2      	ldr	r2, [r6, #8]
   1f7e2:	9200      	str	r2, [sp, #0]
   1f7e4:	4a1d      	ldr	r2, [pc, #116]	; (1f85c <log_reboot_write+0x124>)
   1f7e6:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   1f7ea:	a806      	add	r0, sp, #24
   1f7ec:	4420      	add	r0, r4
   1f7ee:	f7ee fd4a 	bl	e286 <snprintf>
   1f7f2:	4404      	add	r4, r0
    if (info->pc != 0) {
   1f7f4:	68f3      	ldr	r3, [r6, #12]
   1f7f6:	b97b      	cbnz	r3, 1f818 <log_reboot_write+0xe0>
    if (off > sizeof buf) {
   1f7f8:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   1f7fc:	d901      	bls.n	1f802 <log_reboot_write+0xca>
        off = sizeof buf;
   1f7fe:	f44f 7480 	mov.w	r4, #256	; 0x100
    modlog_append(LOG_MODULE_REBOOT, LOG_LEVEL_CRITICAL, LOG_ETYPE_STRING,
   1f802:	b2a4      	uxth	r4, r4
   1f804:	9400      	str	r4, [sp, #0]
   1f806:	ab06      	add	r3, sp, #24
   1f808:	2200      	movs	r2, #0
   1f80a:	2104      	movs	r1, #4
   1f80c:	2006      	movs	r0, #6
   1f80e:	f7ff fd45 	bl	1f29c <modlog_append>
}
   1f812:	4638      	mov	r0, r7
   1f814:	b051      	add	sp, #324	; 0x144
   1f816:	bdf0      	pop	{r4, r5, r6, r7, pc}
        off += snprintf(buf + off, sizeof buf - off, ", pc:0x%lx",
   1f818:	4a11      	ldr	r2, [pc, #68]	; (1f860 <log_reboot_write+0x128>)
   1f81a:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   1f81e:	a806      	add	r0, sp, #24
   1f820:	4420      	add	r0, r4
   1f822:	f7ee fd30 	bl	e286 <snprintf>
   1f826:	4404      	add	r4, r0
   1f828:	e7e6      	b.n	1f7f8 <log_reboot_write+0xc0>
   1f82a:	bf00      	nop
   1f82c:	20004a34 	.word	0x20004a34
   1f830:	00024b50 	.word	0x00024b50
   1f834:	00024c8c 	.word	0x00024c8c
   1f838:	00024c50 	.word	0x00024c50
   1f83c:	20004a24 	.word	0x20004a24
   1f840:	00024c9c 	.word	0x00024c9c
   1f844:	00024c64 	.word	0x00024c64
   1f848:	00024c70 	.word	0x00024c70
   1f84c:	00024c78 	.word	0x00024c78
   1f850:	00024c80 	.word	0x00024c80
   1f854:	00024c58 	.word	0x00024c58
   1f858:	00024cc4 	.word	0x00024cc4
   1f85c:	00024ccc 	.word	0x00024ccc
   1f860:	00024cd8 	.word	0x00024cd8

0001f864 <log_reboot_init_console>:
{
   1f864:	b508      	push	{r3, lr}
    rc = modlog_register(LOG_MODULE_REBOOT, log_console_get(), LOG_SYSLEVEL,
   1f866:	f7fe ffd7 	bl	1e818 <log_console_get>
   1f86a:	4601      	mov	r1, r0
   1f86c:	2300      	movs	r3, #0
   1f86e:	2201      	movs	r2, #1
   1f870:	2006      	movs	r0, #6
   1f872:	f7ff fcf9 	bl	1f268 <modlog_register>
}
   1f876:	bd08      	pop	{r3, pc}

0001f878 <log_reboot>:
{
   1f878:	b510      	push	{r4, lr}
    if (log_reboot_written) {
   1f87a:	4b0a      	ldr	r3, [pc, #40]	; (1f8a4 <log_reboot+0x2c>)
   1f87c:	f993 3000 	ldrsb.w	r3, [r3]
   1f880:	b113      	cbz	r3, 1f888 <log_reboot+0x10>
        return 0;
   1f882:	2400      	movs	r4, #0
}
   1f884:	4620      	mov	r0, r4
   1f886:	bd10      	pop	{r4, pc}
    rc = log_reboot_write(info);
   1f888:	f7ff ff56 	bl	1f738 <log_reboot_write>
    if (rc != 0) {
   1f88c:	4604      	mov	r4, r0
   1f88e:	2800      	cmp	r0, #0
   1f890:	d1f8      	bne.n	1f884 <log_reboot+0xc>
    log_reboot_written = 1;
   1f892:	4b04      	ldr	r3, [pc, #16]	; (1f8a4 <log_reboot+0x2c>)
   1f894:	2201      	movs	r2, #1
   1f896:	701a      	strb	r2, [r3, #0]
    conf_save_one("reboot/written", "1");
   1f898:	4903      	ldr	r1, [pc, #12]	; (1f8a8 <log_reboot+0x30>)
   1f89a:	4804      	ldr	r0, [pc, #16]	; (1f8ac <log_reboot+0x34>)
   1f89c:	f7ef f804 	bl	e8a8 <conf_save_one>
    return 0;
   1f8a0:	e7f0      	b.n	1f884 <log_reboot+0xc>
   1f8a2:	bf00      	nop
   1f8a4:	20004a14 	.word	0x20004a14
   1f8a8:	00024ce4 	.word	0x00024ce4
   1f8ac:	00024c2c 	.word	0x00024c2c

0001f8b0 <log_reboot_pkg_init>:

void
log_reboot_pkg_init(void)
{
   1f8b0:	b510      	push	{r4, lr}
   1f8b2:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1f8b4:	4b10      	ldr	r3, [pc, #64]	; (1f8f8 <log_reboot_pkg_init+0x48>)
   1f8b6:	781b      	ldrb	r3, [r3, #0]
   1f8b8:	b1c3      	cbz	r3, 1f8ec <log_reboot_pkg_init+0x3c>

    rc = conf_register(&reboot_conf_handler);
   1f8ba:	4810      	ldr	r0, [pc, #64]	; (1f8fc <log_reboot_pkg_init+0x4c>)
   1f8bc:	f7ef f8a8 	bl	ea10 <conf_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1f8c0:	b138      	cbz	r0, 1f8d2 <log_reboot_pkg_init+0x22>
   1f8c2:	2000      	movs	r0, #0
   1f8c4:	9000      	str	r0, [sp, #0]
   1f8c6:	4b0e      	ldr	r3, [pc, #56]	; (1f900 <log_reboot_pkg_init+0x50>)
   1f8c8:	681c      	ldr	r4, [r3, #0]
   1f8ca:	4603      	mov	r3, r0
   1f8cc:	4602      	mov	r2, r0
   1f8ce:	4601      	mov	r1, r0
   1f8d0:	47a0      	blx	r4
#if MYNEWT_VAL(REBOOT_LOG_FCB)
    rc = log_reboot_init_fcb();
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
#if MYNEWT_VAL(REBOOT_LOG_CONSOLE)
    rc = log_reboot_init_console();
   1f8d2:	f7ff ffc7 	bl	1f864 <log_reboot_init_console>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1f8d6:	b138      	cbz	r0, 1f8e8 <log_reboot_pkg_init+0x38>
   1f8d8:	2000      	movs	r0, #0
   1f8da:	9000      	str	r0, [sp, #0]
   1f8dc:	4b08      	ldr	r3, [pc, #32]	; (1f900 <log_reboot_pkg_init+0x50>)
   1f8de:	681c      	ldr	r4, [r3, #0]
   1f8e0:	4603      	mov	r3, r0
   1f8e2:	4602      	mov	r2, r0
   1f8e4:	4601      	mov	r1, r0
   1f8e6:	47a0      	blx	r4
#endif
}
   1f8e8:	b002      	add	sp, #8
   1f8ea:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1f8ec:	461a      	mov	r2, r3
   1f8ee:	4619      	mov	r1, r3
   1f8f0:	4618      	mov	r0, r3
   1f8f2:	f7e9 fbab 	bl	904c <__assert_func>
   1f8f6:	bf00      	nop
   1f8f8:	20004548 	.word	0x20004548
   1f8fc:	20000ffc 	.word	0x20000ffc
   1f900:	2000064c 	.word	0x2000064c

0001f904 <rwlock_complete_handoff>:
static void
rwlock_complete_handoff(struct rwlock *lock)
{
    RWLOCK_DBG_ASSERT(lock->mtx.mu_owner == g_current_task);
    RWLOCK_DBG_ASSERT(lock->handoffs > 0);
    lock->handoffs--;
   1f904:	f890 3020 	ldrb.w	r3, [r0, #32]
   1f908:	3b01      	subs	r3, #1
   1f90a:	f880 3020 	strb.w	r3, [r0, #32]
}
   1f90e:	4770      	bx	lr

0001f910 <rwlock_read_must_block>:
static bool
rwlock_read_must_block(const struct rwlock *lock)
{
    RWLOCK_DBG_ASSERT(lock->mtx.mu_owner == g_current_task);

    return lock->active_writer ||
   1f910:	69c3      	ldr	r3, [r0, #28]
           lock->pending_writers > 0 ||
   1f912:	f013 2fff 	tst.w	r3, #4278255360	; 0xff00ff00
   1f916:	d104      	bne.n	1f922 <rwlock_read_must_block+0x12>
           lock->handoffs > 0;
   1f918:	f890 3020 	ldrb.w	r3, [r0, #32]
           lock->pending_writers > 0 ||
   1f91c:	b11b      	cbz	r3, 1f926 <rwlock_read_must_block+0x16>
   1f91e:	2001      	movs	r0, #1
   1f920:	4770      	bx	lr
   1f922:	2001      	movs	r0, #1
   1f924:	4770      	bx	lr
   1f926:	2000      	movs	r0, #0
}
   1f928:	4770      	bx	lr

0001f92a <rwlock_write_must_block>:
static bool
rwlock_write_must_block(const struct rwlock *lock)
{
    RWLOCK_DBG_ASSERT(lock->mtx.mu_owner == g_current_task);

    return lock->active_writer ||
   1f92a:	8b83      	ldrh	r3, [r0, #28]
           lock->num_readers > 0 ||
   1f92c:	b923      	cbnz	r3, 1f938 <rwlock_write_must_block+0xe>
           lock->handoffs > 0;
   1f92e:	f890 3020 	ldrb.w	r3, [r0, #32]
           lock->num_readers > 0 ||
   1f932:	b11b      	cbz	r3, 1f93c <rwlock_write_must_block+0x12>
   1f934:	2001      	movs	r0, #1
   1f936:	4770      	bx	lr
   1f938:	2001      	movs	r0, #1
   1f93a:	4770      	bx	lr
   1f93c:	2000      	movs	r0, #0
}
   1f93e:	4770      	bx	lr

0001f940 <rwlock_unblock>:
{
   1f940:	b510      	push	{r4, lr}
   1f942:	4604      	mov	r4, r0
    if (lock->pending_writers > 0) {
   1f944:	7fc3      	ldrb	r3, [r0, #31]
   1f946:	b91b      	cbnz	r3, 1f950 <rwlock_unblock+0x10>
        lock->handoffs = lock->pending_readers;
   1f948:	7f83      	ldrb	r3, [r0, #30]
   1f94a:	f880 3020 	strb.w	r3, [r0, #32]
        while (lock->pending_readers > 0) {
   1f94e:	e010      	b.n	1f972 <rwlock_unblock+0x32>
        lock->handoffs = 1;
   1f950:	2301      	movs	r3, #1
   1f952:	f880 3020 	strb.w	r3, [r0, #32]
        os_sem_release(&lock->wsem);
   1f956:	3014      	adds	r0, #20
   1f958:	f7ea fa98 	bl	9e8c <os_sem_release>
        lock->pending_writers--;
   1f95c:	7fe3      	ldrb	r3, [r4, #31]
   1f95e:	3b01      	subs	r3, #1
   1f960:	77e3      	strb	r3, [r4, #31]
   1f962:	e009      	b.n	1f978 <rwlock_unblock+0x38>
            os_sem_release(&lock->rsem);
   1f964:	f104 000c 	add.w	r0, r4, #12
   1f968:	f7ea fa90 	bl	9e8c <os_sem_release>
            lock->pending_readers--;
   1f96c:	7fa3      	ldrb	r3, [r4, #30]
   1f96e:	3b01      	subs	r3, #1
   1f970:	77a3      	strb	r3, [r4, #30]
        while (lock->pending_readers > 0) {
   1f972:	7fa3      	ldrb	r3, [r4, #30]
   1f974:	2b00      	cmp	r3, #0
   1f976:	d1f5      	bne.n	1f964 <rwlock_unblock+0x24>
}
   1f978:	bd10      	pop	{r4, pc}

0001f97a <rwlock_acquire_read>:

void
rwlock_acquire_read(struct rwlock *lock)
{
   1f97a:	b538      	push	{r3, r4, r5, lr}
   1f97c:	4604      	mov	r4, r0
    bool acquired;

    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1f97e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f982:	f7eb f8d5 	bl	ab30 <os_mutex_pend>

    if (rwlock_read_must_block(lock)) {
   1f986:	4620      	mov	r0, r4
   1f988:	f7ff ffc2 	bl	1f910 <rwlock_read_must_block>
   1f98c:	b140      	cbz	r0, 1f9a0 <rwlock_acquire_read+0x26>
        lock->pending_readers++;
   1f98e:	7fa3      	ldrb	r3, [r4, #30]
   1f990:	3301      	adds	r3, #1
   1f992:	77a3      	strb	r3, [r4, #30]
        acquired = false;
   1f994:	2500      	movs	r5, #0
    } else {
        lock->num_readers++;
        acquired = true;
    }

    os_mutex_release(&lock->mtx);
   1f996:	4620      	mov	r0, r4
   1f998:	f7eb f86e 	bl	aa78 <os_mutex_release>

    if (acquired) {
   1f99c:	b12d      	cbz	r5, 1f9aa <rwlock_acquire_read+0x30>
    /* Record reader ownership. */
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
    lock->num_readers++;
    rwlock_complete_handoff(lock);
    os_mutex_release(&lock->mtx);
}
   1f99e:	bd38      	pop	{r3, r4, r5, pc}
        lock->num_readers++;
   1f9a0:	7f23      	ldrb	r3, [r4, #28]
   1f9a2:	3301      	adds	r3, #1
   1f9a4:	7723      	strb	r3, [r4, #28]
        acquired = true;
   1f9a6:	2501      	movs	r5, #1
   1f9a8:	e7f5      	b.n	1f996 <rwlock_acquire_read+0x1c>
    os_sem_pend(&lock->rsem, OS_TIMEOUT_NEVER);
   1f9aa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f9ae:	f104 000c 	add.w	r0, r4, #12
   1f9b2:	f7ea fa9d 	bl	9ef0 <os_sem_pend>
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1f9b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f9ba:	4620      	mov	r0, r4
   1f9bc:	f7eb f8b8 	bl	ab30 <os_mutex_pend>
    lock->num_readers++;
   1f9c0:	7f23      	ldrb	r3, [r4, #28]
   1f9c2:	3301      	adds	r3, #1
   1f9c4:	7723      	strb	r3, [r4, #28]
    rwlock_complete_handoff(lock);
   1f9c6:	4620      	mov	r0, r4
   1f9c8:	f7ff ff9c 	bl	1f904 <rwlock_complete_handoff>
    os_mutex_release(&lock->mtx);
   1f9cc:	4620      	mov	r0, r4
   1f9ce:	f7eb f853 	bl	aa78 <os_mutex_release>
   1f9d2:	e7e4      	b.n	1f99e <rwlock_acquire_read+0x24>

0001f9d4 <rwlock_release_read>:

void
rwlock_release_read(struct rwlock *lock)
{
   1f9d4:	b510      	push	{r4, lr}
   1f9d6:	4604      	mov	r4, r0
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1f9d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f9dc:	f7eb f8a8 	bl	ab30 <os_mutex_pend>

    RWLOCK_DBG_ASSERT(lock->num_readers > 0);
    lock->num_readers--;
   1f9e0:	7f23      	ldrb	r3, [r4, #28]
   1f9e2:	3b01      	subs	r3, #1
   1f9e4:	b2db      	uxtb	r3, r3
   1f9e6:	7723      	strb	r3, [r4, #28]

    /* If this is the last active reader, unblock a pending writer if there is
     * one.
     */
    if (lock->num_readers == 0) {
   1f9e8:	b11b      	cbz	r3, 1f9f2 <rwlock_release_read+0x1e>
        rwlock_unblock(lock);
    }

    os_mutex_release(&lock->mtx);
   1f9ea:	4620      	mov	r0, r4
   1f9ec:	f7eb f844 	bl	aa78 <os_mutex_release>
}
   1f9f0:	bd10      	pop	{r4, pc}
        rwlock_unblock(lock);
   1f9f2:	4620      	mov	r0, r4
   1f9f4:	f7ff ffa4 	bl	1f940 <rwlock_unblock>
   1f9f8:	e7f7      	b.n	1f9ea <rwlock_release_read+0x16>

0001f9fa <rwlock_acquire_write>:

void
rwlock_acquire_write(struct rwlock *lock)
{
   1f9fa:	b538      	push	{r3, r4, r5, lr}
   1f9fc:	4604      	mov	r4, r0
    bool acquired;

    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1f9fe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1fa02:	f7eb f895 	bl	ab30 <os_mutex_pend>

    if (rwlock_write_must_block(lock)) {
   1fa06:	4620      	mov	r0, r4
   1fa08:	f7ff ff8f 	bl	1f92a <rwlock_write_must_block>
   1fa0c:	b140      	cbz	r0, 1fa20 <rwlock_acquire_write+0x26>
        lock->pending_writers++;
   1fa0e:	7fe3      	ldrb	r3, [r4, #31]
   1fa10:	3301      	adds	r3, #1
   1fa12:	77e3      	strb	r3, [r4, #31]
        acquired = false;
   1fa14:	2500      	movs	r5, #0
    } else {
        lock->active_writer = true;
        acquired = true;
    }

    os_mutex_release(&lock->mtx);
   1fa16:	4620      	mov	r0, r4
   1fa18:	f7eb f82e 	bl	aa78 <os_mutex_release>

    if (acquired) {
   1fa1c:	b11d      	cbz	r5, 1fa26 <rwlock_acquire_write+0x2c>
    /* Record writer ownership. */
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
    lock->active_writer = true;
    rwlock_complete_handoff(lock);
    os_mutex_release(&lock->mtx);
}
   1fa1e:	bd38      	pop	{r3, r4, r5, pc}
        lock->active_writer = true;
   1fa20:	2501      	movs	r5, #1
   1fa22:	7765      	strb	r5, [r4, #29]
        acquired = true;
   1fa24:	e7f7      	b.n	1fa16 <rwlock_acquire_write+0x1c>
    os_sem_pend(&lock->wsem, OS_TIMEOUT_NEVER);
   1fa26:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1fa2a:	f104 0014 	add.w	r0, r4, #20
   1fa2e:	f7ea fa5f 	bl	9ef0 <os_sem_pend>
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1fa32:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1fa36:	4620      	mov	r0, r4
   1fa38:	f7eb f87a 	bl	ab30 <os_mutex_pend>
    lock->active_writer = true;
   1fa3c:	2301      	movs	r3, #1
   1fa3e:	7763      	strb	r3, [r4, #29]
    rwlock_complete_handoff(lock);
   1fa40:	4620      	mov	r0, r4
   1fa42:	f7ff ff5f 	bl	1f904 <rwlock_complete_handoff>
    os_mutex_release(&lock->mtx);
   1fa46:	4620      	mov	r0, r4
   1fa48:	f7eb f816 	bl	aa78 <os_mutex_release>
   1fa4c:	e7e7      	b.n	1fa1e <rwlock_acquire_write+0x24>

0001fa4e <rwlock_release_write>:

void
rwlock_release_write(struct rwlock *lock)
{
   1fa4e:	b510      	push	{r4, lr}
   1fa50:	4604      	mov	r4, r0
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1fa52:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1fa56:	f7eb f86b 	bl	ab30 <os_mutex_pend>

    RWLOCK_DBG_ASSERT(lock->active_writer);
    lock->active_writer = false;
   1fa5a:	2300      	movs	r3, #0
   1fa5c:	7763      	strb	r3, [r4, #29]

    rwlock_unblock(lock);
   1fa5e:	4620      	mov	r0, r4
   1fa60:	f7ff ff6e 	bl	1f940 <rwlock_unblock>

    os_mutex_release(&lock->mtx);
   1fa64:	4620      	mov	r0, r4
   1fa66:	f7eb f807 	bl	aa78 <os_mutex_release>
}
   1fa6a:	bd10      	pop	{r4, pc}

0001fa6c <rwlock_init>:

int
rwlock_init(struct rwlock *lock)
{
   1fa6c:	b510      	push	{r4, lr}
   1fa6e:	4604      	mov	r4, r0
    int rc;

    *lock = (struct rwlock) { 0 };
   1fa70:	2224      	movs	r2, #36	; 0x24
   1fa72:	2100      	movs	r1, #0
   1fa74:	f7ed ffc5 	bl	da02 <memset>

    rc = os_mutex_init(&lock->mtx);
   1fa78:	4620      	mov	r0, r4
   1fa7a:	f7ea fff3 	bl	aa64 <os_mutex_init>
    if (rc != 0) {
   1fa7e:	b100      	cbz	r0, 1fa82 <rwlock_init+0x16>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1fa80:	bd10      	pop	{r4, pc}
    rc = os_sem_init(&lock->rsem, 0);
   1fa82:	2100      	movs	r1, #0
   1fa84:	f104 000c 	add.w	r0, r4, #12
   1fa88:	f7ea f9f8 	bl	9e7c <os_sem_init>
    if (rc != 0) {
   1fa8c:	2800      	cmp	r0, #0
   1fa8e:	d1f7      	bne.n	1fa80 <rwlock_init+0x14>
    rc = os_sem_init(&lock->wsem, 0);
   1fa90:	2100      	movs	r1, #0
   1fa92:	f104 0014 	add.w	r0, r4, #20
   1fa96:	f7ea f9f1 	bl	9e7c <os_sem_init>
    if (rc != 0) {
   1fa9a:	e7f1      	b.n	1fa80 <rwlock_init+0x14>

0001fa9c <boot_flag_decode>:
}

static int
boot_flag_decode(uint8_t flag)
{
    if (flag != BOOT_FLAG_SET) {
   1fa9c:	2801      	cmp	r0, #1
   1fa9e:	d100      	bne.n	1faa2 <boot_flag_decode+0x6>
        return BOOT_FLAG_BAD;
    }
    return BOOT_FLAG_SET;
}
   1faa0:	4770      	bx	lr
        return BOOT_FLAG_BAD;
   1faa2:	2002      	movs	r0, #2
   1faa4:	e7fc      	b.n	1faa0 <boot_flag_decode+0x4>

0001faa6 <boot_magic_off>:
}

static uint32_t
boot_magic_off(const struct flash_area *fap)
{
    return fap->fa_size - BOOT_MAGIC_SZ;
   1faa6:	6880      	ldr	r0, [r0, #8]
}
   1faa8:	3810      	subs	r0, #16
   1faaa:	4770      	bx	lr

0001faac <boot_copy_done_off>:
}

static uint32_t
boot_copy_done_off(const struct flash_area *fap)
{
    return fap->fa_size - BOOT_MAGIC_SZ - BOOT_MAX_ALIGN * 2;
   1faac:	6880      	ldr	r0, [r0, #8]
}
   1faae:	3820      	subs	r0, #32
   1fab0:	4770      	bx	lr

0001fab2 <boot_image_ok_off>:

static uint32_t
boot_image_ok_off(const struct flash_area *fap)
{
    return fap->fa_size - BOOT_MAGIC_SZ - BOOT_MAX_ALIGN;
   1fab2:	6880      	ldr	r0, [r0, #8]
}
   1fab4:	3818      	subs	r0, #24
   1fab6:	4770      	bx	lr

0001fab8 <boot_magic_decode>:
{
   1fab8:	b508      	push	{r3, lr}
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
   1faba:	2210      	movs	r2, #16
   1fabc:	4903      	ldr	r1, [pc, #12]	; (1facc <boot_magic_decode+0x14>)
   1fabe:	f7ed ff6f 	bl	d9a0 <memcmp>
   1fac2:	b108      	cbz	r0, 1fac8 <boot_magic_decode+0x10>
    return BOOT_MAGIC_BAD;
   1fac4:	2002      	movs	r0, #2
}
   1fac6:	bd08      	pop	{r3, pc}
        return BOOT_MAGIC_GOOD;
   1fac8:	2001      	movs	r0, #1
   1faca:	e7fc      	b.n	1fac6 <boot_magic_decode+0xe>
   1facc:	00024d38 	.word	0x00024d38

0001fad0 <boot_write_trailer_byte>:
}

static int
boot_write_trailer_byte(const struct flash_area *fap, uint32_t off,
                        uint8_t val)
{
   1fad0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fad2:	b083      	sub	sp, #12
   1fad4:	4605      	mov	r5, r0
   1fad6:	460e      	mov	r6, r1
   1fad8:	4617      	mov	r7, r2
    uint8_t buf[BOOT_MAX_ALIGN];
    uint8_t align;
    uint8_t erased_val;
    int rc;

    align = flash_area_align(fap);
   1fada:	f7fe fb9f 	bl	1e21c <flash_area_align>
    assert(align <= BOOT_MAX_ALIGN);
   1fade:	2808      	cmp	r0, #8
   1fae0:	d813      	bhi.n	1fb0a <boot_write_trailer_byte+0x3a>
   1fae2:	4604      	mov	r4, r0
    erased_val = flash_area_erased_val(fap);
   1fae4:	4628      	mov	r0, r5
   1fae6:	f7fe fb9e 	bl	1e226 <flash_area_erased_val>
    memset(buf, erased_val, BOOT_MAX_ALIGN);
   1faea:	2208      	movs	r2, #8
   1faec:	b2c1      	uxtb	r1, r0
   1faee:	4668      	mov	r0, sp
   1faf0:	f7ed ff87 	bl	da02 <memset>
    buf[0] = val;
   1faf4:	f88d 7000 	strb.w	r7, [sp]

    rc = flash_area_write(fap, off, buf, align);
   1faf8:	4623      	mov	r3, r4
   1fafa:	466a      	mov	r2, sp
   1fafc:	4631      	mov	r1, r6
   1fafe:	4628      	mov	r0, r5
   1fb00:	f7fe fb64 	bl	1e1cc <flash_area_write>
    if (rc != 0) {
   1fb04:	b938      	cbnz	r0, 1fb16 <boot_write_trailer_byte+0x46>
        return BOOT_EFLASH;
    }

    return 0;
}
   1fb06:	b003      	add	sp, #12
   1fb08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert(align <= BOOT_MAX_ALIGN);
   1fb0a:	2300      	movs	r3, #0
   1fb0c:	461a      	mov	r2, r3
   1fb0e:	4619      	mov	r1, r3
   1fb10:	4618      	mov	r0, r3
   1fb12:	f7e9 fa9b 	bl	904c <__assert_func>
        return BOOT_EFLASH;
   1fb16:	2001      	movs	r0, #1
   1fb18:	e7f5      	b.n	1fb06 <boot_write_trailer_byte+0x36>

0001fb1a <boot_magic_compatible_check>:
    switch (tbl_val) {
   1fb1a:	2804      	cmp	r0, #4
   1fb1c:	d00a      	beq.n	1fb34 <boot_magic_compatible_check+0x1a>
   1fb1e:	2805      	cmp	r0, #5
   1fb20:	d103      	bne.n	1fb2a <boot_magic_compatible_check+0x10>
        return val != BOOT_MAGIC_GOOD;
   1fb22:	1e48      	subs	r0, r1, #1
   1fb24:	bf18      	it	ne
   1fb26:	2001      	movne	r0, #1
   1fb28:	4770      	bx	lr
        return tbl_val == val;
   1fb2a:	4288      	cmp	r0, r1
   1fb2c:	bf14      	ite	ne
   1fb2e:	2000      	movne	r0, #0
   1fb30:	2001      	moveq	r0, #1
   1fb32:	4770      	bx	lr
    switch (tbl_val) {
   1fb34:	2001      	movs	r0, #1
}
   1fb36:	4770      	bx	lr

0001fb38 <boot_swap_type_off>:
    return fap->fa_size - BOOT_MAGIC_SZ - BOOT_MAX_ALIGN * 3;
   1fb38:	6880      	ldr	r0, [r0, #8]
}
   1fb3a:	3828      	subs	r0, #40	; 0x28
   1fb3c:	4770      	bx	lr

0001fb3e <boot_read_swap_state>:
{
   1fb3e:	b530      	push	{r4, r5, lr}
   1fb40:	b085      	sub	sp, #20
   1fb42:	4604      	mov	r4, r0
   1fb44:	460d      	mov	r5, r1
    off = boot_magic_off(fap);
   1fb46:	f7ff ffae 	bl	1faa6 <boot_magic_off>
   1fb4a:	4601      	mov	r1, r0
    rc = flash_area_read_is_empty(fap, off, magic, BOOT_MAGIC_SZ);
   1fb4c:	2310      	movs	r3, #16
   1fb4e:	466a      	mov	r2, sp
   1fb50:	4620      	mov	r0, r4
   1fb52:	f7fe fb80 	bl	1e256 <flash_area_read_is_empty>
    if (rc < 0) {
   1fb56:	2800      	cmp	r0, #0
   1fb58:	db45      	blt.n	1fbe6 <boot_read_swap_state+0xa8>
    if (rc == 1) {
   1fb5a:	2801      	cmp	r0, #1
   1fb5c:	d039      	beq.n	1fbd2 <boot_read_swap_state+0x94>
        state->magic = boot_magic_decode(magic);
   1fb5e:	4668      	mov	r0, sp
   1fb60:	f7ff ffaa 	bl	1fab8 <boot_magic_decode>
   1fb64:	7028      	strb	r0, [r5, #0]
    off = boot_swap_type_off(fap);
   1fb66:	4620      	mov	r0, r4
   1fb68:	f7ff ffe6 	bl	1fb38 <boot_swap_type_off>
   1fb6c:	4601      	mov	r1, r0
    rc = flash_area_read_is_empty(fap, off, &state->swap_type,
   1fb6e:	2301      	movs	r3, #1
   1fb70:	18ea      	adds	r2, r5, r3
   1fb72:	4620      	mov	r0, r4
   1fb74:	f7fe fb6f 	bl	1e256 <flash_area_read_is_empty>
    if (rc < 0) {
   1fb78:	2800      	cmp	r0, #0
   1fb7a:	db37      	blt.n	1fbec <boot_read_swap_state+0xae>
    if (rc == 1 || state->swap_type > BOOT_SWAP_TYPE_REVERT) {
   1fb7c:	2801      	cmp	r0, #1
   1fb7e:	d002      	beq.n	1fb86 <boot_read_swap_state+0x48>
   1fb80:	786b      	ldrb	r3, [r5, #1]
   1fb82:	2b04      	cmp	r3, #4
   1fb84:	d901      	bls.n	1fb8a <boot_read_swap_state+0x4c>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
   1fb86:	2301      	movs	r3, #1
   1fb88:	706b      	strb	r3, [r5, #1]
    off = boot_copy_done_off(fap);
   1fb8a:	4620      	mov	r0, r4
   1fb8c:	f7ff ff8e 	bl	1faac <boot_copy_done_off>
   1fb90:	4601      	mov	r1, r0
    rc = flash_area_read_is_empty(fap, off, &state->copy_done,
   1fb92:	2301      	movs	r3, #1
   1fb94:	1caa      	adds	r2, r5, #2
   1fb96:	4620      	mov	r0, r4
   1fb98:	f7fe fb5d 	bl	1e256 <flash_area_read_is_empty>
    if (rc < 0) {
   1fb9c:	2800      	cmp	r0, #0
   1fb9e:	db27      	blt.n	1fbf0 <boot_read_swap_state+0xb2>
    if (rc == 1) {
   1fba0:	2801      	cmp	r0, #1
   1fba2:	d019      	beq.n	1fbd8 <boot_read_swap_state+0x9a>
        state->copy_done = boot_flag_decode(state->copy_done);
   1fba4:	78a8      	ldrb	r0, [r5, #2]
   1fba6:	f7ff ff79 	bl	1fa9c <boot_flag_decode>
   1fbaa:	70a8      	strb	r0, [r5, #2]
    off = boot_image_ok_off(fap);
   1fbac:	4620      	mov	r0, r4
   1fbae:	f7ff ff80 	bl	1fab2 <boot_image_ok_off>
   1fbb2:	4601      	mov	r1, r0
    rc = flash_area_read_is_empty(fap, off, &state->image_ok,
   1fbb4:	2301      	movs	r3, #1
   1fbb6:	1cea      	adds	r2, r5, #3
   1fbb8:	4620      	mov	r0, r4
   1fbba:	f7fe fb4c 	bl	1e256 <flash_area_read_is_empty>
    if (rc < 0) {
   1fbbe:	2800      	cmp	r0, #0
   1fbc0:	db18      	blt.n	1fbf4 <boot_read_swap_state+0xb6>
    if (rc == 1) {
   1fbc2:	2801      	cmp	r0, #1
   1fbc4:	d00b      	beq.n	1fbde <boot_read_swap_state+0xa0>
        state->image_ok = boot_flag_decode(state->image_ok);
   1fbc6:	78e8      	ldrb	r0, [r5, #3]
   1fbc8:	f7ff ff68 	bl	1fa9c <boot_flag_decode>
   1fbcc:	70e8      	strb	r0, [r5, #3]
    return 0;
   1fbce:	2000      	movs	r0, #0
   1fbd0:	e00a      	b.n	1fbe8 <boot_read_swap_state+0xaa>
        state->magic = BOOT_MAGIC_UNSET;
   1fbd2:	2303      	movs	r3, #3
   1fbd4:	702b      	strb	r3, [r5, #0]
   1fbd6:	e7c6      	b.n	1fb66 <boot_read_swap_state+0x28>
        state->copy_done = BOOT_FLAG_UNSET;
   1fbd8:	2303      	movs	r3, #3
   1fbda:	70ab      	strb	r3, [r5, #2]
   1fbdc:	e7e6      	b.n	1fbac <boot_read_swap_state+0x6e>
        state->image_ok = BOOT_FLAG_UNSET;
   1fbde:	2303      	movs	r3, #3
   1fbe0:	70eb      	strb	r3, [r5, #3]
    return 0;
   1fbe2:	2000      	movs	r0, #0
   1fbe4:	e000      	b.n	1fbe8 <boot_read_swap_state+0xaa>
        return BOOT_EFLASH;
   1fbe6:	2001      	movs	r0, #1
}
   1fbe8:	b005      	add	sp, #20
   1fbea:	bd30      	pop	{r4, r5, pc}
        return BOOT_EFLASH;
   1fbec:	2001      	movs	r0, #1
   1fbee:	e7fb      	b.n	1fbe8 <boot_read_swap_state+0xaa>
        return BOOT_EFLASH;
   1fbf0:	2001      	movs	r0, #1
   1fbf2:	e7f9      	b.n	1fbe8 <boot_read_swap_state+0xaa>
        return BOOT_EFLASH;
   1fbf4:	2001      	movs	r0, #1
   1fbf6:	e7f7      	b.n	1fbe8 <boot_read_swap_state+0xaa>

0001fbf8 <boot_read_swap_state_by_id>:
    switch (flash_area_id) {
   1fbf8:	1e43      	subs	r3, r0, #1
   1fbfa:	2b02      	cmp	r3, #2
   1fbfc:	d901      	bls.n	1fc02 <boot_read_swap_state_by_id+0xa>
        return BOOT_EBADARGS;
   1fbfe:	2007      	movs	r0, #7
}
   1fc00:	4770      	bx	lr
{
   1fc02:	b510      	push	{r4, lr}
   1fc04:	b082      	sub	sp, #8
   1fc06:	460c      	mov	r4, r1
        rc = flash_area_open(flash_area_id, &fap);
   1fc08:	a901      	add	r1, sp, #4
   1fc0a:	b2c0      	uxtb	r0, r0
   1fc0c:	f7fe fa6a 	bl	1e0e4 <flash_area_open>
        if (rc != 0) {
   1fc10:	b110      	cbz	r0, 1fc18 <boot_read_swap_state_by_id+0x20>
            return BOOT_EFLASH;
   1fc12:	2001      	movs	r0, #1
}
   1fc14:	b002      	add	sp, #8
   1fc16:	bd10      	pop	{r4, pc}
    rc = boot_read_swap_state(fap, state);
   1fc18:	4621      	mov	r1, r4
   1fc1a:	9801      	ldr	r0, [sp, #4]
   1fc1c:	f7ff ff8f 	bl	1fb3e <boot_read_swap_state>
    return rc;
   1fc20:	e7f8      	b.n	1fc14 <boot_read_swap_state_by_id+0x1c>
	...

0001fc24 <boot_write_magic>:
{
   1fc24:	b510      	push	{r4, lr}
   1fc26:	4604      	mov	r4, r0
    off = boot_magic_off(fap);
   1fc28:	f7ff ff3d 	bl	1faa6 <boot_magic_off>
   1fc2c:	4601      	mov	r1, r0
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
   1fc2e:	2310      	movs	r3, #16
   1fc30:	4a03      	ldr	r2, [pc, #12]	; (1fc40 <boot_write_magic+0x1c>)
   1fc32:	4620      	mov	r0, r4
   1fc34:	f7fe faca 	bl	1e1cc <flash_area_write>
    if (rc != 0) {
   1fc38:	b900      	cbnz	r0, 1fc3c <boot_write_magic+0x18>
}
   1fc3a:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
   1fc3c:	2001      	movs	r0, #1
   1fc3e:	e7fc      	b.n	1fc3a <boot_write_magic+0x16>
   1fc40:	00024d38 	.word	0x00024d38

0001fc44 <boot_write_image_ok>:
    return boot_write_trailer_byte(fap, off, BOOT_FLAG_SET);
}

int
boot_write_image_ok(const struct flash_area *fap)
{
   1fc44:	b510      	push	{r4, lr}
   1fc46:	4604      	mov	r4, r0
    uint32_t off;

    off = boot_image_ok_off(fap);
   1fc48:	f7ff ff33 	bl	1fab2 <boot_image_ok_off>
   1fc4c:	4601      	mov	r1, r0
    BOOT_LOG_DBG("writing image_ok; fa_id=%d off=0x%x (0x%x)",
                 fap->fa_id, off, fap->fa_off + off);
    return boot_write_trailer_byte(fap, off, BOOT_FLAG_SET);
   1fc4e:	2201      	movs	r2, #1
   1fc50:	4620      	mov	r0, r4
   1fc52:	f7ff ff3d 	bl	1fad0 <boot_write_trailer_byte>
}
   1fc56:	bd10      	pop	{r4, pc}

0001fc58 <boot_write_swap_type>:
 * This value is persisted so that the boot loader knows what swap operation to
 * resume in case of an unexpected reset.
 */
int
boot_write_swap_type(const struct flash_area *fap, uint8_t swap_type)
{
   1fc58:	b538      	push	{r3, r4, r5, lr}
   1fc5a:	4604      	mov	r4, r0
   1fc5c:	460d      	mov	r5, r1
    uint32_t off;

    off = boot_swap_type_off(fap);
   1fc5e:	f7ff ff6b 	bl	1fb38 <boot_swap_type_off>
   1fc62:	4601      	mov	r1, r0
    BOOT_LOG_DBG("writing swap_type; fa_id=%d off=0x%x (0x%x), swap_type=0x%x",
                 fap->fa_id, off, fap->fa_off + off, swap_type);
    return boot_write_trailer_byte(fap, off, swap_type);
   1fc64:	462a      	mov	r2, r5
   1fc66:	4620      	mov	r0, r4
   1fc68:	f7ff ff32 	bl	1fad0 <boot_write_trailer_byte>
}
   1fc6c:	bd38      	pop	{r3, r4, r5, pc}
	...

0001fc70 <boot_swap_type>:
}
#endif

int
boot_swap_type(void)
{
   1fc70:	b530      	push	{r4, r5, lr}
   1fc72:	b083      	sub	sp, #12
    struct boot_swap_state primary_slot;
    struct boot_swap_state secondary_slot;
    int rc;
    size_t i;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY, &primary_slot);
   1fc74:	a901      	add	r1, sp, #4
   1fc76:	2001      	movs	r0, #1
   1fc78:	f7ff ffbe 	bl	1fbf8 <boot_read_swap_state_by_id>
    if (rc) {
   1fc7c:	2800      	cmp	r0, #0
   1fc7e:	d142      	bne.n	1fd06 <boot_swap_type+0x96>
        return BOOT_SWAP_TYPE_PANIC;
    }

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY,
   1fc80:	4669      	mov	r1, sp
   1fc82:	2002      	movs	r0, #2
   1fc84:	f7ff ffb8 	bl	1fbf8 <boot_read_swap_state_by_id>
                                    &secondary_slot);
    if (rc) {
   1fc88:	2800      	cmp	r0, #0
   1fc8a:	d13e      	bne.n	1fd0a <boot_swap_type+0x9a>
        return BOOT_SWAP_TYPE_PANIC;
    }

    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
   1fc8c:	2400      	movs	r4, #0
   1fc8e:	e007      	b.n	1fca0 <boot_swap_type+0x30>
                                        secondary_slot.magic) &&
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
                table->image_ok_primary_slot == primary_slot.image_ok) &&
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
   1fc90:	792b      	ldrb	r3, [r5, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
   1fc92:	2b04      	cmp	r3, #4
   1fc94:	d029      	beq.n	1fcea <boot_swap_type+0x7a>
                table->copy_done_primary_slot == primary_slot.copy_done)) {
   1fc96:	f89d 2006 	ldrb.w	r2, [sp, #6]
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
   1fc9a:	4293      	cmp	r3, r2
   1fc9c:	d025      	beq.n	1fcea <boot_swap_type+0x7a>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
   1fc9e:	3401      	adds	r4, #1
   1fca0:	2c02      	cmp	r4, #2
   1fca2:	d82d      	bhi.n	1fd00 <boot_swap_type+0x90>
        table = boot_swap_tables + i;
   1fca4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1fca8:	4a19      	ldr	r2, [pc, #100]	; (1fd10 <boot_swap_type+0xa0>)
   1fcaa:	eb02 0543 	add.w	r5, r2, r3, lsl #1
        if (boot_magic_compatible_check(table->magic_primary_slot,
   1fcae:	f89d 1004 	ldrb.w	r1, [sp, #4]
   1fcb2:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
   1fcb6:	f7ff ff30 	bl	1fb1a <boot_magic_compatible_check>
   1fcba:	2800      	cmp	r0, #0
   1fcbc:	d0ef      	beq.n	1fc9e <boot_swap_type+0x2e>
            boot_magic_compatible_check(table->magic_secondary_slot,
   1fcbe:	f89d 1000 	ldrb.w	r1, [sp]
   1fcc2:	7868      	ldrb	r0, [r5, #1]
   1fcc4:	f7ff ff29 	bl	1fb1a <boot_magic_compatible_check>
                                        primary_slot.magic) &&
   1fcc8:	2800      	cmp	r0, #0
   1fcca:	d0e8      	beq.n	1fc9e <boot_swap_type+0x2e>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
   1fccc:	78ab      	ldrb	r3, [r5, #2]
                                        secondary_slot.magic) &&
   1fcce:	2b04      	cmp	r3, #4
   1fcd0:	d003      	beq.n	1fcda <boot_swap_type+0x6a>
                table->image_ok_primary_slot == primary_slot.image_ok) &&
   1fcd2:	f89d 2007 	ldrb.w	r2, [sp, #7]
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
   1fcd6:	4293      	cmp	r3, r2
   1fcd8:	d1e1      	bne.n	1fc9e <boot_swap_type+0x2e>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
   1fcda:	78eb      	ldrb	r3, [r5, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
   1fcdc:	2b04      	cmp	r3, #4
   1fcde:	d0d7      	beq.n	1fc90 <boot_swap_type+0x20>
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
   1fce0:	f89d 2003 	ldrb.w	r2, [sp, #3]
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
   1fce4:	4293      	cmp	r3, r2
   1fce6:	d1da      	bne.n	1fc9e <boot_swap_type+0x2e>
   1fce8:	e7d2      	b.n	1fc90 <boot_swap_type+0x20>
            BOOT_LOG_INF("Swap type: %s",
   1fcea:	7968      	ldrb	r0, [r5, #5]
                         table->swap_type == BOOT_SWAP_TYPE_TEST   ? "test"   :
                         table->swap_type == BOOT_SWAP_TYPE_PERM   ? "perm"   :
                         table->swap_type == BOOT_SWAP_TYPE_REVERT ? "revert" :
                         "BUG; can't happen");
            assert(table->swap_type == BOOT_SWAP_TYPE_TEST ||
   1fcec:	1e83      	subs	r3, r0, #2
   1fcee:	b2db      	uxtb	r3, r3
   1fcf0:	2b02      	cmp	r3, #2
   1fcf2:	d906      	bls.n	1fd02 <boot_swap_type+0x92>
   1fcf4:	2300      	movs	r3, #0
   1fcf6:	461a      	mov	r2, r3
   1fcf8:	4619      	mov	r1, r3
   1fcfa:	4618      	mov	r0, r3
   1fcfc:	f7e9 f9a6 	bl	904c <__assert_func>
            return table->swap_type;
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
   1fd00:	2001      	movs	r0, #1
}
   1fd02:	b003      	add	sp, #12
   1fd04:	bd30      	pop	{r4, r5, pc}
        return BOOT_SWAP_TYPE_PANIC;
   1fd06:	20ff      	movs	r0, #255	; 0xff
   1fd08:	e7fb      	b.n	1fd02 <boot_swap_type+0x92>
        return BOOT_SWAP_TYPE_PANIC;
   1fd0a:	20ff      	movs	r0, #255	; 0xff
   1fd0c:	e7f9      	b.n	1fd02 <boot_swap_type+0x92>
   1fd0e:	bf00      	nop
   1fd10:	00024d48 	.word	0x00024d48

0001fd14 <boot_set_pending>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_pending(int permanent)
{
   1fd14:	b530      	push	{r4, r5, lr}
   1fd16:	b083      	sub	sp, #12
   1fd18:	4604      	mov	r4, r0
    const struct flash_area *fap;
    struct boot_swap_state state_secondary_slot;
    uint8_t swap_type;
    int rc;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY,
   1fd1a:	4669      	mov	r1, sp
   1fd1c:	2002      	movs	r0, #2
   1fd1e:	f7ff ff6b 	bl	1fbf8 <boot_read_swap_state_by_id>
                                    &state_secondary_slot);
    if (rc != 0) {
   1fd22:	4603      	mov	r3, r0
   1fd24:	bb78      	cbnz	r0, 1fd86 <boot_set_pending+0x72>
        return rc;
    }

    switch (state_secondary_slot.magic) {
   1fd26:	f89d 5000 	ldrb.w	r5, [sp]
   1fd2a:	2d02      	cmp	r5, #2
   1fd2c:	d025      	beq.n	1fd7a <boot_set_pending+0x66>
   1fd2e:	2d03      	cmp	r5, #3
   1fd30:	d007      	beq.n	1fd42 <boot_set_pending+0x2e>
   1fd32:	2d01      	cmp	r5, #1
   1fd34:	d027      	beq.n	1fd86 <boot_set_pending+0x72>
        flash_area_erase(fap, 0, fap->fa_size);
        flash_area_close(fap);
        return BOOT_EBADIMAGE;

    default:
        assert(0);
   1fd36:	2300      	movs	r3, #0
   1fd38:	461a      	mov	r2, r3
   1fd3a:	4619      	mov	r1, r3
   1fd3c:	4618      	mov	r0, r3
   1fd3e:	f7e9 f985 	bl	904c <__assert_func>
        rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY, &fap);
   1fd42:	a901      	add	r1, sp, #4
   1fd44:	2002      	movs	r0, #2
   1fd46:	f7fe f9cd 	bl	1e0e4 <flash_area_open>
        if (rc != 0) {
   1fd4a:	b148      	cbz	r0, 1fd60 <boot_set_pending+0x4c>
            rc = BOOT_EFLASH;
   1fd4c:	2301      	movs	r3, #1
        if (rc == 0) {
   1fd4e:	b9d3      	cbnz	r3, 1fd86 <boot_set_pending+0x72>
            if (permanent) {
   1fd50:	b904      	cbnz	r4, 1fd54 <boot_set_pending+0x40>
                swap_type = BOOT_SWAP_TYPE_TEST;
   1fd52:	2502      	movs	r5, #2
            rc = boot_write_swap_type(fap, swap_type);
   1fd54:	4629      	mov	r1, r5
   1fd56:	9801      	ldr	r0, [sp, #4]
   1fd58:	f7ff ff7e 	bl	1fc58 <boot_write_swap_type>
   1fd5c:	4603      	mov	r3, r0
   1fd5e:	e012      	b.n	1fd86 <boot_set_pending+0x72>
            rc = boot_write_magic(fap);
   1fd60:	9801      	ldr	r0, [sp, #4]
   1fd62:	f7ff ff5f 	bl	1fc24 <boot_write_magic>
        if (rc == 0 && permanent) {
   1fd66:	4603      	mov	r3, r0
   1fd68:	2800      	cmp	r0, #0
   1fd6a:	d1f0      	bne.n	1fd4e <boot_set_pending+0x3a>
   1fd6c:	2c00      	cmp	r4, #0
   1fd6e:	d0ee      	beq.n	1fd4e <boot_set_pending+0x3a>
            rc = boot_write_image_ok(fap);
   1fd70:	9801      	ldr	r0, [sp, #4]
   1fd72:	f7ff ff67 	bl	1fc44 <boot_write_image_ok>
   1fd76:	4603      	mov	r3, r0
   1fd78:	e7e9      	b.n	1fd4e <boot_set_pending+0x3a>
        rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY, &fap);
   1fd7a:	a901      	add	r1, sp, #4
   1fd7c:	2002      	movs	r0, #2
   1fd7e:	f7fe f9b1 	bl	1e0e4 <flash_area_open>
        if (rc != 0) {
   1fd82:	b118      	cbz	r0, 1fd8c <boot_set_pending+0x78>
            return BOOT_EFLASH;
   1fd84:	2301      	movs	r3, #1
        return BOOT_EBADIMAGE;
    }
}
   1fd86:	4618      	mov	r0, r3
   1fd88:	b003      	add	sp, #12
   1fd8a:	bd30      	pop	{r4, r5, pc}
        flash_area_erase(fap, 0, fap->fa_size);
   1fd8c:	9801      	ldr	r0, [sp, #4]
   1fd8e:	6882      	ldr	r2, [r0, #8]
   1fd90:	2100      	movs	r1, #0
   1fd92:	f7fe fa2f 	bl	1e1f4 <flash_area_erase>
        return BOOT_EBADIMAGE;
   1fd96:	2303      	movs	r3, #3
   1fd98:	e7f5      	b.n	1fd86 <boot_set_pending+0x72>

0001fd9a <boot_set_confirmed>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_confirmed(void)
{
   1fd9a:	b500      	push	{lr}
   1fd9c:	b083      	sub	sp, #12
    const struct flash_area *fap;
    struct boot_swap_state state_primary_slot;
    int rc;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY,
   1fd9e:	4669      	mov	r1, sp
   1fda0:	2001      	movs	r0, #1
   1fda2:	f7ff ff29 	bl	1fbf8 <boot_read_swap_state_by_id>
                                    &state_primary_slot);
    if (rc != 0) {
   1fda6:	b9b8      	cbnz	r0, 1fdd8 <boot_set_confirmed+0x3e>
        return rc;
    }

    switch (state_primary_slot.magic) {
   1fda8:	f89d 3000 	ldrb.w	r3, [sp]
   1fdac:	2b02      	cmp	r3, #2
   1fdae:	d012      	beq.n	1fdd6 <boot_set_confirmed+0x3c>
   1fdb0:	2b03      	cmp	r3, #3
   1fdb2:	d011      	beq.n	1fdd8 <boot_set_confirmed+0x3e>
    case BOOT_MAGIC_BAD:
        /* Unexpected state. */
        return BOOT_EBADVECT;
    }

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY, &fap);
   1fdb4:	a901      	add	r1, sp, #4
   1fdb6:	2001      	movs	r0, #1
   1fdb8:	f7fe f994 	bl	1e0e4 <flash_area_open>
    if (rc) {
   1fdbc:	b978      	cbnz	r0, 1fdde <boot_set_confirmed+0x44>
        rc = BOOT_EFLASH;
        goto done;
    }

    if (state_primary_slot.copy_done == BOOT_FLAG_UNSET) {
   1fdbe:	f89d 3002 	ldrb.w	r3, [sp, #2]
   1fdc2:	2b03      	cmp	r3, #3
   1fdc4:	d00d      	beq.n	1fde2 <boot_set_confirmed+0x48>
        /* Swap never completed.  This is unexpected. */
        rc = BOOT_EBADVECT;
        goto done;
    }

    if (state_primary_slot.image_ok != BOOT_FLAG_UNSET) {
   1fdc6:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1fdca:	2b03      	cmp	r3, #3
   1fdcc:	d104      	bne.n	1fdd8 <boot_set_confirmed+0x3e>
        /* Already confirmed. */
        goto done;
    }

    rc = boot_write_image_ok(fap);
   1fdce:	9801      	ldr	r0, [sp, #4]
   1fdd0:	f7ff ff38 	bl	1fc44 <boot_write_image_ok>
   1fdd4:	e000      	b.n	1fdd8 <boot_set_confirmed+0x3e>
        return BOOT_EBADVECT;
   1fdd6:	2004      	movs	r0, #4

done:
    flash_area_close(fap);
    return rc;
}
   1fdd8:	b003      	add	sp, #12
   1fdda:	f85d fb04 	ldr.w	pc, [sp], #4
        rc = BOOT_EFLASH;
   1fdde:	2001      	movs	r0, #1
   1fde0:	e7fa      	b.n	1fdd8 <boot_set_confirmed+0x3e>
        rc = BOOT_EBADVECT;
   1fde2:	2004      	movs	r0, #4
   1fde4:	e7f8      	b.n	1fdd8 <boot_set_confirmed+0x3e>
	...

0001fde8 <boot_write_sz>:
    return 0;
}

static uint8_t
boot_write_sz(void)
{
   1fde8:	b538      	push	{r3, r4, r5, lr}

    /* Figure out what size to write update status update as.  The size depends
     * on what the minimum write size is for scratch area, active image slot.
     * We need to use the bigger of those 2 values.
     */
    elem_sz = flash_area_align(boot_data.imgs[BOOT_PRIMARY_SLOT].area);
   1fdea:	4d06      	ldr	r5, [pc, #24]	; (1fe04 <boot_write_sz+0x1c>)
   1fdec:	6a28      	ldr	r0, [r5, #32]
   1fdee:	f7fe fa15 	bl	1e21c <flash_area_align>
   1fdf2:	4604      	mov	r4, r0
    align = flash_area_align(boot_data.scratch.area);
   1fdf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
   1fdf6:	f7fe fa11 	bl	1e21c <flash_area_align>
    if (align > elem_sz) {
   1fdfa:	4284      	cmp	r4, r0
   1fdfc:	d300      	bcc.n	1fe00 <boot_write_sz+0x18>
    elem_sz = flash_area_align(boot_data.imgs[BOOT_PRIMARY_SLOT].area);
   1fdfe:	4620      	mov	r0, r4
        elem_sz = align;
    }

    return elem_sz;
}
   1fe00:	bd38      	pop	{r3, r4, r5, pc}
   1fe02:	bf00      	nop
   1fe04:	20004a38 	.word	0x20004a38

0001fe08 <boot_read_image_header>:
{
   1fe08:	b510      	push	{r4, lr}
   1fe0a:	b082      	sub	sp, #8
   1fe0c:	460c      	mov	r4, r1
    area_id = flash_area_id_from_image_slot(slot);
   1fe0e:	f7fe fa29 	bl	1e264 <flash_area_id_from_image_slot>
    rc = flash_area_open(area_id, &fap);
   1fe12:	a901      	add	r1, sp, #4
   1fe14:	b2c0      	uxtb	r0, r0
   1fe16:	f7fe f965 	bl	1e0e4 <flash_area_open>
    if (rc != 0) {
   1fe1a:	b110      	cbz	r0, 1fe22 <boot_read_image_header+0x1a>
        rc = BOOT_EFLASH;
   1fe1c:	2001      	movs	r0, #1
}
   1fe1e:	b002      	add	sp, #8
   1fe20:	bd10      	pop	{r4, pc}
    rc = flash_area_read(fap, 0, out_hdr, sizeof *out_hdr);
   1fe22:	2320      	movs	r3, #32
   1fe24:	4622      	mov	r2, r4
   1fe26:	2100      	movs	r1, #0
   1fe28:	9801      	ldr	r0, [sp, #4]
   1fe2a:	f7fe f9bb 	bl	1e1a4 <flash_area_read>
    if (rc != 0) {
   1fe2e:	2800      	cmp	r0, #0
   1fe30:	d0f5      	beq.n	1fe1e <boot_read_image_header+0x16>
        rc = BOOT_EFLASH;
   1fe32:	2001      	movs	r0, #1
    return rc;
   1fe34:	e7f3      	b.n	1fe1e <boot_read_image_header+0x16>
	...

0001fe38 <boot_read_image_headers>:
{
   1fe38:	b538      	push	{r3, r4, r5, lr}
   1fe3a:	4605      	mov	r5, r0
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
   1fe3c:	2400      	movs	r4, #0
   1fe3e:	2c01      	cmp	r4, #1
   1fe40:	dc0f      	bgt.n	1fe62 <boot_read_image_headers+0x2a>
        rc = boot_read_image_header(i, boot_img_hdr(&boot_data, i));
   1fe42:	4b09      	ldr	r3, [pc, #36]	; (1fe68 <boot_read_image_headers+0x30>)
   1fe44:	212c      	movs	r1, #44	; 0x2c
   1fe46:	fb01 3104 	mla	r1, r1, r4, r3
   1fe4a:	4620      	mov	r0, r4
   1fe4c:	f7ff ffdc 	bl	1fe08 <boot_read_image_header>
        if (rc != 0) {
   1fe50:	4603      	mov	r3, r0
   1fe52:	b908      	cbnz	r0, 1fe58 <boot_read_image_headers+0x20>
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
   1fe54:	3401      	adds	r4, #1
   1fe56:	e7f2      	b.n	1fe3e <boot_read_image_headers+0x6>
            if (i > 0 && !require_all) {
   1fe58:	2c00      	cmp	r4, #0
   1fe5a:	dd03      	ble.n	1fe64 <boot_read_image_headers+0x2c>
   1fe5c:	b915      	cbnz	r5, 1fe64 <boot_read_image_headers+0x2c>
                return 0;
   1fe5e:	2300      	movs	r3, #0
   1fe60:	e000      	b.n	1fe64 <boot_read_image_headers+0x2c>
    return 0;
   1fe62:	2300      	movs	r3, #0
}
   1fe64:	4618      	mov	r0, r3
   1fe66:	bd38      	pop	{r3, r4, r5, pc}
   1fe68:	20004a38 	.word	0x20004a38

0001fe6c <split_image_check>:
static int
split_image_check(struct image_header *app_hdr,
                  const struct flash_area *app_fap,
                  struct image_header *loader_hdr,
                  const struct flash_area *loader_fap)
{
   1fe6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fe70:	b08c      	sub	sp, #48	; 0x30
   1fe72:	4606      	mov	r6, r0
   1fe74:	460f      	mov	r7, r1
   1fe76:	4690      	mov	r8, r2
   1fe78:	461d      	mov	r5, r3
    static void *tmpbuf;
    uint8_t loader_hash[32];

    if (!tmpbuf) {
   1fe7a:	4c18      	ldr	r4, [pc, #96]	; (1fedc <split_image_check+0x70>)
   1fe7c:	6824      	ldr	r4, [r4, #0]
   1fe7e:	b1f4      	cbz	r4, 1febe <split_image_check+0x52>
        if (!tmpbuf) {
            return BOOT_ENOMEM;
        }
    }

    if (bootutil_img_validate(loader_hdr, loader_fap, tmpbuf, BOOT_TMPBUF_SZ,
   1fe80:	ab04      	add	r3, sp, #16
   1fe82:	9302      	str	r3, [sp, #8]
   1fe84:	2400      	movs	r4, #0
   1fe86:	9401      	str	r4, [sp, #4]
   1fe88:	9400      	str	r4, [sp, #0]
   1fe8a:	f44f 7380 	mov.w	r3, #256	; 0x100
   1fe8e:	4a13      	ldr	r2, [pc, #76]	; (1fedc <split_image_check+0x70>)
   1fe90:	6812      	ldr	r2, [r2, #0]
   1fe92:	4629      	mov	r1, r5
   1fe94:	4640      	mov	r0, r8
   1fe96:	f000 f8fd 	bl	20094 <bootutil_img_validate>
   1fe9a:	b9d0      	cbnz	r0, 1fed2 <split_image_check+0x66>
                              NULL, 0, loader_hash)) {
        return BOOT_EBADIMAGE;
    }

    if (bootutil_img_validate(app_hdr, app_fap, tmpbuf, BOOT_TMPBUF_SZ,
   1fe9c:	9402      	str	r4, [sp, #8]
   1fe9e:	2320      	movs	r3, #32
   1fea0:	9301      	str	r3, [sp, #4]
   1fea2:	ab04      	add	r3, sp, #16
   1fea4:	9300      	str	r3, [sp, #0]
   1fea6:	f44f 7380 	mov.w	r3, #256	; 0x100
   1feaa:	4a0c      	ldr	r2, [pc, #48]	; (1fedc <split_image_check+0x70>)
   1feac:	6812      	ldr	r2, [r2, #0]
   1feae:	4639      	mov	r1, r7
   1feb0:	4630      	mov	r0, r6
   1feb2:	f000 f8ef 	bl	20094 <bootutil_img_validate>
   1feb6:	b970      	cbnz	r0, 1fed6 <split_image_check+0x6a>
                              loader_hash, 32, NULL)) {
        return BOOT_EBADIMAGE;
    }

    return 0;
}
   1feb8:	b00c      	add	sp, #48	; 0x30
   1feba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tmpbuf = malloc(BOOT_TMPBUF_SZ);
   1febe:	f44f 7080 	mov.w	r0, #256	; 0x100
   1fec2:	f001 f819 	bl	20ef8 <os_malloc>
   1fec6:	4b05      	ldr	r3, [pc, #20]	; (1fedc <split_image_check+0x70>)
   1fec8:	6018      	str	r0, [r3, #0]
        if (!tmpbuf) {
   1feca:	2800      	cmp	r0, #0
   1fecc:	d1d8      	bne.n	1fe80 <split_image_check+0x14>
            return BOOT_ENOMEM;
   1fece:	2006      	movs	r0, #6
   1fed0:	e7f2      	b.n	1feb8 <split_image_check+0x4c>
        return BOOT_EBADIMAGE;
   1fed2:	2003      	movs	r0, #3
   1fed4:	e7f0      	b.n	1feb8 <split_image_check+0x4c>
        return BOOT_EBADIMAGE;
   1fed6:	2003      	movs	r0, #3
   1fed8:	e7ee      	b.n	1feb8 <split_image_check+0x4c>
   1feda:	bf00      	nop
   1fedc:	20004aa0 	.word	0x20004aa0

0001fee0 <boot_read_sectors>:
{
   1fee0:	b510      	push	{r4, lr}
   1fee2:	b082      	sub	sp, #8
}

static inline int
boot_initialize_area(struct boot_loader_state *state, int flash_area)
{
    int num_sectors = BOOT_MAX_IMG_SECTORS;
   1fee4:	2380      	movs	r3, #128	; 0x80
   1fee6:	9301      	str	r3, [sp, #4]
    int rc;

    switch (flash_area) {
    case FLASH_AREA_IMAGE_PRIMARY:
        rc = flash_area_to_sectors(flash_area, &num_sectors,
                                   state->imgs[BOOT_PRIMARY_SLOT].sectors);
   1fee8:	4c15      	ldr	r4, [pc, #84]	; (1ff40 <boot_read_sectors+0x60>)
        rc = flash_area_to_sectors(flash_area, &num_sectors,
   1feea:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1feec:	a901      	add	r1, sp, #4
   1feee:	2001      	movs	r0, #1
   1fef0:	f7fe f91a 	bl	1e128 <flash_area_to_sectors>
        state->imgs[BOOT_PRIMARY_SLOT].num_sectors = (size_t)num_sectors;
   1fef4:	9b01      	ldr	r3, [sp, #4]
   1fef6:	62a3      	str	r3, [r4, #40]	; 0x28
    if (rc != 0) {
   1fef8:	b118      	cbz	r0, 1ff02 <boot_read_sectors+0x22>
        return BOOT_EFLASH;
   1fefa:	2401      	movs	r4, #1
}
   1fefc:	4620      	mov	r0, r4
   1fefe:	b002      	add	sp, #8
   1ff00:	bd10      	pop	{r4, pc}
    int num_sectors = BOOT_MAX_IMG_SECTORS;
   1ff02:	2380      	movs	r3, #128	; 0x80
   1ff04:	9301      	str	r3, [sp, #4]
        break;
    case FLASH_AREA_IMAGE_SECONDARY:
        rc = flash_area_to_sectors(flash_area, &num_sectors,
   1ff06:	6d22      	ldr	r2, [r4, #80]	; 0x50
   1ff08:	a901      	add	r1, sp, #4
   1ff0a:	2002      	movs	r0, #2
   1ff0c:	f7fe f90c 	bl	1e128 <flash_area_to_sectors>
                                   state->imgs[BOOT_SECONDARY_SLOT].sectors);
        state->imgs[BOOT_SECONDARY_SLOT].num_sectors = (size_t)num_sectors;
   1ff10:	9b01      	ldr	r3, [sp, #4]
   1ff12:	6563      	str	r3, [r4, #84]	; 0x54
    if (rc != 0) {
   1ff14:	b108      	cbz	r0, 1ff1a <boot_read_sectors+0x3a>
        return BOOT_EFLASH;
   1ff16:	2401      	movs	r4, #1
   1ff18:	e7f0      	b.n	1fefc <boot_read_sectors+0x1c>
    int num_sectors = BOOT_MAX_IMG_SECTORS;
   1ff1a:	2380      	movs	r3, #128	; 0x80
   1ff1c:	9301      	str	r3, [sp, #4]
        break;
    case FLASH_AREA_IMAGE_SCRATCH:
        rc = flash_area_to_sectors(flash_area, &num_sectors,
   1ff1e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   1ff20:	a901      	add	r1, sp, #4
   1ff22:	2003      	movs	r0, #3
   1ff24:	f7fe f900 	bl	1e128 <flash_area_to_sectors>
                                   state->scratch.sectors);
        state->scratch.num_sectors = (size_t)num_sectors;
   1ff28:	9b01      	ldr	r3, [sp, #4]
   1ff2a:	6623      	str	r3, [r4, #96]	; 0x60
    if (rc != 0) {
   1ff2c:	4604      	mov	r4, r0
   1ff2e:	b108      	cbz	r0, 1ff34 <boot_read_sectors+0x54>
        return BOOT_EFLASH;
   1ff30:	2401      	movs	r4, #1
   1ff32:	e7e3      	b.n	1fefc <boot_read_sectors+0x1c>
    BOOT_WRITE_SZ(&boot_data) = boot_write_sz();
   1ff34:	f7ff ff58 	bl	1fde8 <boot_write_sz>
   1ff38:	4b01      	ldr	r3, [pc, #4]	; (1ff40 <boot_read_sectors+0x60>)
   1ff3a:	f883 0064 	strb.w	r0, [r3, #100]	; 0x64
    return 0;
   1ff3e:	e7dd      	b.n	1fefc <boot_read_sectors+0x1c>
   1ff40:	20004a38 	.word	0x20004a38

0001ff44 <split_go>:
    return rc;
}

int
split_go(int loader_slot, int split_slot, void **entry)
{
   1ff44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ff48:	4605      	mov	r5, r0
   1ff4a:	460c      	mov	r4, r1
   1ff4c:	4690      	mov	r8, r2
    uintptr_t entry_val;
    int loader_flash_id;
    int split_flash_id;
    int rc;

    sectors = malloc(BOOT_MAX_IMG_SECTORS * 2 * sizeof *sectors);
   1ff4e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
   1ff52:	f000 ffd1 	bl	20ef8 <os_malloc>
    if (sectors == NULL) {
   1ff56:	2800      	cmp	r0, #0
   1ff58:	d05b      	beq.n	20012 <split_go+0xce>
   1ff5a:	4607      	mov	r7, r0
        return SPLIT_GO_ERR;
    }
    boot_data.imgs[loader_slot].sectors = sectors + 0;
   1ff5c:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 20018 <split_go+0xd4>
   1ff60:	232c      	movs	r3, #44	; 0x2c
   1ff62:	fb03 f605 	mul.w	r6, r3, r5
   1ff66:	eb09 0206 	add.w	r2, r9, r6
   1ff6a:	6250      	str	r0, [r2, #36]	; 0x24
    boot_data.imgs[split_slot].sectors = sectors + BOOT_MAX_IMG_SECTORS;
   1ff6c:	f500 62c0 	add.w	r2, r0, #1536	; 0x600
   1ff70:	fb03 9304 	mla	r3, r3, r4, r9
   1ff74:	625a      	str	r2, [r3, #36]	; 0x24

    loader_flash_id = flash_area_id_from_image_slot(loader_slot);
   1ff76:	4628      	mov	r0, r5
   1ff78:	f7fe f974 	bl	1e264 <flash_area_id_from_image_slot>
    rc = flash_area_open(loader_flash_id,
   1ff7c:	f106 0120 	add.w	r1, r6, #32
   1ff80:	4449      	add	r1, r9
   1ff82:	b2c0      	uxtb	r0, r0
   1ff84:	f7fe f8ae 	bl	1e0e4 <flash_area_open>
                         &BOOT_IMG_AREA(&boot_data, loader_slot));
    assert(rc == 0);
   1ff88:	b9b8      	cbnz	r0, 1ffba <split_go+0x76>
    split_flash_id = flash_area_id_from_image_slot(split_slot);
   1ff8a:	4620      	mov	r0, r4
   1ff8c:	f7fe f96a 	bl	1e264 <flash_area_id_from_image_slot>
    rc = flash_area_open(split_flash_id,
   1ff90:	232c      	movs	r3, #44	; 0x2c
   1ff92:	fb04 f303 	mul.w	r3, r4, r3
   1ff96:	3320      	adds	r3, #32
   1ff98:	491f      	ldr	r1, [pc, #124]	; (20018 <split_go+0xd4>)
   1ff9a:	4419      	add	r1, r3
   1ff9c:	b2c0      	uxtb	r0, r0
   1ff9e:	f7fe f8a1 	bl	1e0e4 <flash_area_open>
                         &BOOT_IMG_AREA(&boot_data, split_slot));
    assert(rc == 0);
   1ffa2:	b980      	cbnz	r0, 1ffc6 <split_go+0x82>

    /* Determine the sector layout of the image slots and scratch area. */
    rc = boot_read_sectors();
   1ffa4:	f7ff ff9c 	bl	1fee0 <boot_read_sectors>
    if (rc != 0) {
   1ffa8:	b198      	cbz	r0, 1ffd2 <split_go+0x8e>
        rc = SPLIT_GO_ERR;
   1ffaa:	f06f 0601 	mvn.w	r6, #1
    rc = SPLIT_GO_OK;

done:
    flash_area_close(BOOT_IMG_AREA(&boot_data, split_slot));
    flash_area_close(BOOT_IMG_AREA(&boot_data, loader_slot));
    free(sectors);
   1ffae:	4638      	mov	r0, r7
   1ffb0:	f000 ffae 	bl	20f10 <os_free>
    return rc;
}
   1ffb4:	4630      	mov	r0, r6
   1ffb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    assert(rc == 0);
   1ffba:	2300      	movs	r3, #0
   1ffbc:	461a      	mov	r2, r3
   1ffbe:	4619      	mov	r1, r3
   1ffc0:	4618      	mov	r0, r3
   1ffc2:	f7e9 f843 	bl	904c <__assert_func>
    assert(rc == 0);
   1ffc6:	2300      	movs	r3, #0
   1ffc8:	461a      	mov	r2, r3
   1ffca:	4619      	mov	r1, r3
   1ffcc:	4618      	mov	r0, r3
   1ffce:	f7e9 f83d 	bl	904c <__assert_func>
    rc = boot_read_image_headers(true);
   1ffd2:	2001      	movs	r0, #1
   1ffd4:	f7ff ff30 	bl	1fe38 <boot_read_image_headers>
    if (rc != 0) {
   1ffd8:	4606      	mov	r6, r0
   1ffda:	2800      	cmp	r0, #0
   1ffdc:	d1e7      	bne.n	1ffae <split_go+0x6a>
    return &state->imgs[slot].hdr;
   1ffde:	4a0e      	ldr	r2, [pc, #56]	; (20018 <split_go+0xd4>)
   1ffe0:	232c      	movs	r3, #44	; 0x2c
   1ffe2:	fb03 2004 	mla	r0, r3, r4, r2
   1ffe6:	fb03 2205 	mla	r2, r3, r5, r2
    rc = split_image_check(boot_img_hdr(&boot_data, split_slot),
   1ffea:	6a13      	ldr	r3, [r2, #32]
   1ffec:	6a01      	ldr	r1, [r0, #32]
   1ffee:	f7ff ff3d 	bl	1fe6c <split_image_check>
    if (rc != 0) {
   1fff2:	4606      	mov	r6, r0
   1fff4:	b950      	cbnz	r0, 2000c <split_go+0xc8>
    return state->imgs[slot].area->fa_off;
   1fff6:	4908      	ldr	r1, [pc, #32]	; (20018 <split_go+0xd4>)
   1fff8:	232c      	movs	r3, #44	; 0x2c
   1fffa:	fb03 1404 	mla	r4, r3, r4, r1
   1fffe:	6a23      	ldr	r3, [r4, #32]
   20000:	685a      	ldr	r2, [r3, #4]
                boot_img_hdr(&boot_data, split_slot)->ih_hdr_size;
   20002:	8923      	ldrh	r3, [r4, #8]
    entry_val = boot_img_slot_off(&boot_data, split_slot) +
   20004:	4413      	add	r3, r2
    *entry = (void *) entry_val;
   20006:	f8c8 3000 	str.w	r3, [r8]
    rc = SPLIT_GO_OK;
   2000a:	e7d0      	b.n	1ffae <split_go+0x6a>
        rc = SPLIT_GO_NON_MATCHING;
   2000c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   20010:	e7cd      	b.n	1ffae <split_go+0x6a>
        return SPLIT_GO_ERR;
   20012:	f06f 0601 	mvn.w	r6, #1
   20016:	e7cd      	b.n	1ffb4 <split_go+0x70>
   20018:	20004a38 	.word	0x20004a38

0002001c <bootutil_img_hash>:
 */
static int
bootutil_img_hash(struct image_header *hdr, const struct flash_area *fap,
                  uint8_t *tmp_buf, uint32_t tmp_buf_sz,
                  uint8_t *hash_result, uint8_t *seed, int seed_len)
{
   2001c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20020:	b09d      	sub	sp, #116	; 0x74
   20022:	4605      	mov	r5, r0
   20024:	4689      	mov	r9, r1
   20026:	4617      	mov	r7, r2
   20028:	4698      	mov	r8, r3
   2002a:	9c25      	ldr	r4, [sp, #148]	; 0x94
#ifdef MCUBOOT_USE_MBED_TLS
typedef mbedtls_sha256_context bootutil_sha256_context;

static inline void bootutil_sha256_init(bootutil_sha256_context *ctx)
{
    mbedtls_sha256_init(ctx);
   2002c:	a801      	add	r0, sp, #4
   2002e:	f000 f8a1 	bl	20174 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
   20032:	2100      	movs	r1, #0
   20034:	a801      	add	r0, sp, #4
   20036:	f000 f8a3 	bl	20180 <mbedtls_sha256_starts_ret>

    bootutil_sha256_init(&sha256_ctx);

    /* in some cases (split image) the hash is seeded with data from
     * the loader image */
    if (seed && (seed_len > 0)) {
   2003a:	b114      	cbz	r4, 20042 <bootutil_img_hash+0x26>
   2003c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2003e:	2b00      	cmp	r3, #0
   20040:	dc04      	bgt.n	2004c <bootutil_img_hash+0x30>

    /*
     * Hash is computed over image header and image itself. No TLV is
     * included ATM.
     */
    hdr_size = hdr->ih_hdr_size;
   20042:	892b      	ldrh	r3, [r5, #8]
    size = hdr->ih_img_size + hdr_size;
   20044:	68ee      	ldr	r6, [r5, #12]
   20046:	441e      	add	r6, r3
    for (off = 0; off < size; off += blk_sz) {
   20048:	2500      	movs	r5, #0
   2004a:	e013      	b.n	20074 <bootutil_img_hash+0x58>

static inline void bootutil_sha256_update(bootutil_sha256_context *ctx,
                                          const void *data,
                                          uint32_t data_len)
{
    (void)mbedtls_sha256_update_ret(ctx, data, data_len);
   2004c:	461a      	mov	r2, r3
   2004e:	4621      	mov	r1, r4
   20050:	a801      	add	r0, sp, #4
   20052:	f000 f97f 	bl	20354 <mbedtls_sha256_update_ret>
}
   20056:	e7f4      	b.n	20042 <bootutil_img_hash+0x26>
         */
        if ((off < hdr_size) && ((off + blk_sz) > hdr_size)) {
            blk_sz = hdr_size - off;
        }
#endif
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
   20058:	4623      	mov	r3, r4
   2005a:	463a      	mov	r2, r7
   2005c:	4629      	mov	r1, r5
   2005e:	4648      	mov	r0, r9
   20060:	f7fe f8a0 	bl	1e1a4 <flash_area_read>
        if (rc) {
   20064:	4603      	mov	r3, r0
   20066:	b988      	cbnz	r0, 2008c <bootutil_img_hash+0x70>
    (void)mbedtls_sha256_update_ret(ctx, data, data_len);
   20068:	4622      	mov	r2, r4
   2006a:	4639      	mov	r1, r7
   2006c:	a801      	add	r0, sp, #4
   2006e:	f000 f971 	bl	20354 <mbedtls_sha256_update_ret>
    for (off = 0; off < size; off += blk_sz) {
   20072:	4425      	add	r5, r4
   20074:	42b5      	cmp	r5, r6
   20076:	d204      	bcs.n	20082 <bootutil_img_hash+0x66>
        blk_sz = size - off;
   20078:	1b74      	subs	r4, r6, r5
        if (blk_sz > tmp_buf_sz) {
   2007a:	4544      	cmp	r4, r8
   2007c:	d9ec      	bls.n	20058 <bootutil_img_hash+0x3c>
            blk_sz = tmp_buf_sz;
   2007e:	4644      	mov	r4, r8
   20080:	e7ea      	b.n	20058 <bootutil_img_hash+0x3c>

static inline void bootutil_sha256_finish(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    (void)mbedtls_sha256_finish_ret(ctx, output);
   20082:	9924      	ldr	r1, [sp, #144]	; 0x90
   20084:	a801      	add	r0, sp, #4
   20086:	f000 f9a8 	bl	203da <mbedtls_sha256_finish_ret>
#endif
        bootutil_sha256_update(&sha256_ctx, tmp_buf, blk_sz);
    }
    bootutil_sha256_finish(&sha256_ctx, hash_result);

    return 0;
   2008a:	2300      	movs	r3, #0
}
   2008c:	4618      	mov	r0, r3
   2008e:	b01d      	add	sp, #116	; 0x74
   20090:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00020094 <bootutil_img_validate>:
 */
int
bootutil_img_validate(struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz,
                      uint8_t *seed, int seed_len, uint8_t *out_hash)
{
   20094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20098:	b096      	sub	sp, #88	; 0x58
   2009a:	4680      	mov	r8, r0
   2009c:	460d      	mov	r5, r1
   2009e:	9e1e      	ldr	r6, [sp, #120]	; 0x78
    struct image_tlv tlv;
    uint8_t buf[SIG_BUF_SIZE];
    uint8_t hash[32];
    int rc;

    rc = bootutil_img_hash(hdr, fap, tmp_buf, tmp_buf_sz, hash, seed, seed_len);
   200a0:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   200a2:	9402      	str	r4, [sp, #8]
   200a4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
   200a6:	9401      	str	r4, [sp, #4]
   200a8:	ac04      	add	r4, sp, #16
   200aa:	9400      	str	r4, [sp, #0]
   200ac:	f7ff ffb6 	bl	2001c <bootutil_img_hash>
    if (rc) {
   200b0:	4607      	mov	r7, r0
   200b2:	2800      	cmp	r0, #0
   200b4:	d14a      	bne.n	2014c <bootutil_img_validate+0xb8>
        return rc;
    }

    if (out_hash) {
   200b6:	b14e      	cbz	r6, 200cc <bootutil_img_validate+0x38>
        memcpy(out_hash, hash, 32);
   200b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   200ba:	6030      	str	r0, [r6, #0]
   200bc:	6071      	str	r1, [r6, #4]
   200be:	60b2      	str	r2, [r6, #8]
   200c0:	60f3      	str	r3, [r6, #12]
   200c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   200c4:	6130      	str	r0, [r6, #16]
   200c6:	6171      	str	r1, [r6, #20]
   200c8:	61b2      	str	r2, [r6, #24]
   200ca:	61f3      	str	r3, [r6, #28]
    }

    /* The TLVs come after the image. */
    /* After image there are TLVs. */
    off = hdr->ih_img_size + hdr->ih_hdr_size;
   200cc:	f8d8 400c 	ldr.w	r4, [r8, #12]
   200d0:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   200d4:	441c      	add	r4, r3

    rc = flash_area_read(fap, off, &info, sizeof(info));
   200d6:	2304      	movs	r3, #4
   200d8:	aa15      	add	r2, sp, #84	; 0x54
   200da:	4621      	mov	r1, r4
   200dc:	4628      	mov	r0, r5
   200de:	f7fe f861 	bl	1e1a4 <flash_area_read>
    if (rc) {
   200e2:	4607      	mov	r7, r0
   200e4:	bb90      	cbnz	r0, 2014c <bootutil_img_validate+0xb8>
        return rc;
    }
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
   200e6:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
   200ea:	f646 1307 	movw	r3, #26887	; 0x6907
   200ee:	429a      	cmp	r2, r3
   200f0:	d130      	bne.n	20154 <bootutil_img_validate+0xc0>
        return -1;
    }
    end = off + info.it_tlv_tot;
   200f2:	f8bd 6056 	ldrh.w	r6, [sp, #86]	; 0x56
   200f6:	4426      	add	r6, r4
    off += sizeof(info);
   200f8:	3404      	adds	r4, #4
    int sha256_valid = 0;
   200fa:	4680      	mov	r8, r0

    /*
     * Traverse through all of the TLVs, performing any checks we know
     * and are able to do.
     */
    for (; off < end; off += sizeof(tlv) + tlv.it_len) {
   200fc:	e003      	b.n	20106 <bootutil_img_validate+0x72>
   200fe:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
   20102:	441c      	add	r4, r3
   20104:	3404      	adds	r4, #4
   20106:	42b4      	cmp	r4, r6
   20108:	d21d      	bcs.n	20146 <bootutil_img_validate+0xb2>
        rc = flash_area_read(fap, off, &tlv, sizeof tlv);
   2010a:	2304      	movs	r3, #4
   2010c:	aa14      	add	r2, sp, #80	; 0x50
   2010e:	4621      	mov	r1, r4
   20110:	4628      	mov	r0, r5
   20112:	f7fe f847 	bl	1e1a4 <flash_area_read>
        if (rc) {
   20116:	bb00      	cbnz	r0, 2015a <bootutil_img_validate+0xc6>
            return rc;
        }

        if (tlv.it_type == IMAGE_TLV_SHA256) {
   20118:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
   2011c:	2b10      	cmp	r3, #16
   2011e:	d1ee      	bne.n	200fe <bootutil_img_validate+0x6a>
            /*
             * Verify the SHA256 image hash.  This must always be
             * present.
             */
            if (tlv.it_len != sizeof(hash)) {
   20120:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
   20124:	2b20      	cmp	r3, #32
   20126:	d11a      	bne.n	2015e <bootutil_img_validate+0xca>
                return -1;
            }
            rc = flash_area_read(fap, off + sizeof(tlv), buf, sizeof hash);
   20128:	aa0c      	add	r2, sp, #48	; 0x30
   2012a:	1d21      	adds	r1, r4, #4
   2012c:	4628      	mov	r0, r5
   2012e:	f7fe f839 	bl	1e1a4 <flash_area_read>
            if (rc) {
   20132:	b9b8      	cbnz	r0, 20164 <bootutil_img_validate+0xd0>
                return rc;
            }
            if (memcmp(hash, buf, sizeof(hash))) {
   20134:	2220      	movs	r2, #32
   20136:	a90c      	add	r1, sp, #48	; 0x30
   20138:	a804      	add	r0, sp, #16
   2013a:	f7ed fc31 	bl	d9a0 <memcmp>
   2013e:	b998      	cbnz	r0, 20168 <bootutil_img_validate+0xd4>
                return -1;
            }

            sha256_valid = 1;
   20140:	f04f 0801 	mov.w	r8, #1
   20144:	e7db      	b.n	200fe <bootutil_img_validate+0x6a>
            key_id = -1;
#endif
        }
    }

    if (!sha256_valid) {
   20146:	f1b8 0f00 	cmp.w	r8, #0
   2014a:	d010      	beq.n	2016e <bootutil_img_validate+0xda>
        return -1;
    }
#endif

    return 0;
}
   2014c:	4638      	mov	r0, r7
   2014e:	b016      	add	sp, #88	; 0x58
   20150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
   20154:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   20158:	e7f8      	b.n	2014c <bootutil_img_validate+0xb8>
            return rc;
   2015a:	4607      	mov	r7, r0
   2015c:	e7f6      	b.n	2014c <bootutil_img_validate+0xb8>
                return -1;
   2015e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   20162:	e7f3      	b.n	2014c <bootutil_img_validate+0xb8>
                return rc;
   20164:	4607      	mov	r7, r0
   20166:	e7f1      	b.n	2014c <bootutil_img_validate+0xb8>
                return -1;
   20168:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2016c:	e7ee      	b.n	2014c <bootutil_img_validate+0xb8>
        return -1;
   2016e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   20172:	e7eb      	b.n	2014c <bootutil_img_validate+0xb8>

00020174 <mbedtls_sha256_init>:
    (b)[(i) + 3] = (unsigned char) ( (n)       );       \
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
   20174:	b508      	push	{r3, lr}
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
   20176:	226c      	movs	r2, #108	; 0x6c
   20178:	2100      	movs	r1, #0
   2017a:	f7ed fc42 	bl	da02 <memset>
}
   2017e:	bd08      	pop	{r3, pc}

00020180 <mbedtls_sha256_starts_ret>:
/*
 * SHA-256 context setup
 */
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    ctx->total[0] = 0;
   20180:	2300      	movs	r3, #0
   20182:	6003      	str	r3, [r0, #0]
    ctx->total[1] = 0;
   20184:	6043      	str	r3, [r0, #4]

    if( is224 == 0 )
   20186:	460b      	mov	r3, r1
   20188:	b9b9      	cbnz	r1, 201ba <mbedtls_sha256_starts_ret+0x3a>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
   2018a:	4a19      	ldr	r2, [pc, #100]	; (201f0 <mbedtls_sha256_starts_ret+0x70>)
   2018c:	6082      	str	r2, [r0, #8]
        ctx->state[1] = 0xBB67AE85;
   2018e:	4a19      	ldr	r2, [pc, #100]	; (201f4 <mbedtls_sha256_starts_ret+0x74>)
   20190:	60c2      	str	r2, [r0, #12]
        ctx->state[2] = 0x3C6EF372;
   20192:	4a19      	ldr	r2, [pc, #100]	; (201f8 <mbedtls_sha256_starts_ret+0x78>)
   20194:	6102      	str	r2, [r0, #16]
        ctx->state[3] = 0xA54FF53A;
   20196:	4a19      	ldr	r2, [pc, #100]	; (201fc <mbedtls_sha256_starts_ret+0x7c>)
   20198:	6142      	str	r2, [r0, #20]
        ctx->state[4] = 0x510E527F;
   2019a:	4a19      	ldr	r2, [pc, #100]	; (20200 <mbedtls_sha256_starts_ret+0x80>)
   2019c:	6182      	str	r2, [r0, #24]
        ctx->state[5] = 0x9B05688C;
   2019e:	4a19      	ldr	r2, [pc, #100]	; (20204 <mbedtls_sha256_starts_ret+0x84>)
   201a0:	61c2      	str	r2, [r0, #28]
        ctx->state[6] = 0x1F83D9AB;
   201a2:	4a19      	ldr	r2, [pc, #100]	; (20208 <mbedtls_sha256_starts_ret+0x88>)
   201a4:	6202      	str	r2, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
   201a6:	f102 5274 	add.w	r2, r2, #1023410176	; 0x3d000000
   201aa:	f5a2 0223 	sub.w	r2, r2, #10682368	; 0xa30000
   201ae:	f6a2 4292 	subw	r2, r2, #3218	; 0xc92
   201b2:	6242      	str	r2, [r0, #36]	; 0x24
        ctx->state[5] = 0x68581511;
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
    }

    ctx->is224 = is224;
   201b4:	6683      	str	r3, [r0, #104]	; 0x68

    return( 0 );
}
   201b6:	2000      	movs	r0, #0
   201b8:	4770      	bx	lr
        ctx->state[0] = 0xC1059ED8;
   201ba:	4a14      	ldr	r2, [pc, #80]	; (2020c <mbedtls_sha256_starts_ret+0x8c>)
   201bc:	6082      	str	r2, [r0, #8]
        ctx->state[1] = 0x367CD507;
   201be:	4a14      	ldr	r2, [pc, #80]	; (20210 <mbedtls_sha256_starts_ret+0x90>)
   201c0:	60c2      	str	r2, [r0, #12]
        ctx->state[2] = 0x3070DD17;
   201c2:	f102 4279 	add.w	r2, r2, #4177526784	; 0xf9000000
   201c6:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
   201ca:	f502 6201 	add.w	r2, r2, #2064	; 0x810
   201ce:	6102      	str	r2, [r0, #16]
        ctx->state[3] = 0xF70E5939;
   201d0:	4a10      	ldr	r2, [pc, #64]	; (20214 <mbedtls_sha256_starts_ret+0x94>)
   201d2:	6142      	str	r2, [r0, #20]
        ctx->state[4] = 0xFFC00B31;
   201d4:	4a10      	ldr	r2, [pc, #64]	; (20218 <mbedtls_sha256_starts_ret+0x98>)
   201d6:	6182      	str	r2, [r0, #24]
        ctx->state[5] = 0x68581511;
   201d8:	f102 42d1 	add.w	r2, r2, #1753219072	; 0x68800000
   201dc:	f502 12c0 	add.w	r2, r2, #1572864	; 0x180000
   201e0:	f502 621e 	add.w	r2, r2, #2528	; 0x9e0
   201e4:	61c2      	str	r2, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
   201e6:	4a0d      	ldr	r2, [pc, #52]	; (2021c <mbedtls_sha256_starts_ret+0x9c>)
   201e8:	6202      	str	r2, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
   201ea:	4a0d      	ldr	r2, [pc, #52]	; (20220 <mbedtls_sha256_starts_ret+0xa0>)
   201ec:	6242      	str	r2, [r0, #36]	; 0x24
   201ee:	e7e1      	b.n	201b4 <mbedtls_sha256_starts_ret+0x34>
   201f0:	6a09e667 	.word	0x6a09e667
   201f4:	bb67ae85 	.word	0xbb67ae85
   201f8:	3c6ef372 	.word	0x3c6ef372
   201fc:	a54ff53a 	.word	0xa54ff53a
   20200:	510e527f 	.word	0x510e527f
   20204:	9b05688c 	.word	0x9b05688c
   20208:	1f83d9ab 	.word	0x1f83d9ab
   2020c:	c1059ed8 	.word	0xc1059ed8
   20210:	367cd507 	.word	0x367cd507
   20214:	f70e5939 	.word	0xf70e5939
   20218:	ffc00b31 	.word	0xffc00b31
   2021c:	64f98fa7 	.word	0x64f98fa7
   20220:	befa4fa4 	.word	0xbefa4fa4

00020224 <mbedtls_internal_sha256_process>:
    d += temp1; h = temp1 + temp2;              \
}

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
   20224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20228:	b0c8      	sub	sp, #288	; 0x120
    uint32_t temp1, temp2, W[64];
    uint32_t A[8];
    unsigned int i;

    for( i = 0; i < 8; i++ )
   2022a:	2300      	movs	r3, #0
   2022c:	e005      	b.n	2023a <mbedtls_internal_sha256_process+0x16>
        A[i] = ctx->state[i];
   2022e:	1c9a      	adds	r2, r3, #2
   20230:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   20234:	f84d 2023 	str.w	r2, [sp, r3, lsl #2]
    for( i = 0; i < 8; i++ )
   20238:	3301      	adds	r3, #1
   2023a:	2b07      	cmp	r3, #7
   2023c:	d9f7      	bls.n	2022e <mbedtls_internal_sha256_process+0xa>

#if defined(MBEDTLS_SHA256_SMALLER)
    for( i = 0; i < 64; i++ )
   2023e:	2200      	movs	r2, #0
   20240:	e04f      	b.n	202e2 <mbedtls_internal_sha256_process+0xbe>
    {
        if( i < 16 )
            GET_UINT32_BE( W[i], data, 4 * i );
   20242:	f811 5022 	ldrb.w	r5, [r1, r2, lsl #2]
   20246:	eb01 0482 	add.w	r4, r1, r2, lsl #2
   2024a:	7863      	ldrb	r3, [r4, #1]
   2024c:	041b      	lsls	r3, r3, #16
   2024e:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   20252:	78a5      	ldrb	r5, [r4, #2]
   20254:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   20258:	78e4      	ldrb	r4, [r4, #3]
   2025a:	4323      	orrs	r3, r4
   2025c:	ac08      	add	r4, sp, #32
   2025e:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
        else
            R( i );

        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i], K[i] );
   20262:	9b07      	ldr	r3, [sp, #28]
   20264:	9c04      	ldr	r4, [sp, #16]
   20266:	ea4f 2cf4 	mov.w	ip, r4, ror #11
   2026a:	ea8c 1cb4 	eor.w	ip, ip, r4, ror #6
   2026e:	ea8c 6c74 	eor.w	ip, ip, r4, ror #25
   20272:	4463      	add	r3, ip
   20274:	9d06      	ldr	r5, [sp, #24]
   20276:	9e05      	ldr	r6, [sp, #20]
   20278:	ea85 0c06 	eor.w	ip, r5, r6
   2027c:	ea04 0c0c 	and.w	ip, r4, ip
   20280:	ea85 0c0c 	eor.w	ip, r5, ip
   20284:	4463      	add	r3, ip
   20286:	4f32      	ldr	r7, [pc, #200]	; (20350 <mbedtls_internal_sha256_process+0x12c>)
   20288:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
   2028c:	443b      	add	r3, r7
   2028e:	af08      	add	r7, sp, #32
   20290:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
   20294:	443b      	add	r3, r7
   20296:	f8dd e000 	ldr.w	lr, [sp]
   2029a:	ea4f 3c7e 	mov.w	ip, lr, ror #13
   2029e:	ea8c 0cbe 	eor.w	ip, ip, lr, ror #2
   202a2:	ea8c 5cbe 	eor.w	ip, ip, lr, ror #22
   202a6:	f8dd 8004 	ldr.w	r8, [sp, #4]
   202aa:	ea0e 0708 	and.w	r7, lr, r8
   202ae:	f8dd 9008 	ldr.w	r9, [sp, #8]
   202b2:	ea4e 0a08 	orr.w	sl, lr, r8
   202b6:	ea09 0a0a 	and.w	sl, r9, sl
   202ba:	ea47 070a 	orr.w	r7, r7, sl
   202be:	44bc      	add	ip, r7
   202c0:	9f03      	ldr	r7, [sp, #12]
   202c2:	441f      	add	r7, r3
   202c4:	9703      	str	r7, [sp, #12]
   202c6:	4463      	add	r3, ip
   202c8:	9307      	str	r3, [sp, #28]

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
   202ca:	9507      	str	r5, [sp, #28]
   202cc:	9606      	str	r6, [sp, #24]
   202ce:	9405      	str	r4, [sp, #20]
   202d0:	9704      	str	r7, [sp, #16]
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
   202d2:	f8cd 900c 	str.w	r9, [sp, #12]
   202d6:	f8cd 8008 	str.w	r8, [sp, #8]
   202da:	f8cd e004 	str.w	lr, [sp, #4]
   202de:	9300      	str	r3, [sp, #0]
    for( i = 0; i < 64; i++ )
   202e0:	3201      	adds	r2, #1
   202e2:	2a3f      	cmp	r2, #63	; 0x3f
   202e4:	d822      	bhi.n	2032c <mbedtls_internal_sha256_process+0x108>
        if( i < 16 )
   202e6:	2a0f      	cmp	r2, #15
   202e8:	d9ab      	bls.n	20242 <mbedtls_internal_sha256_process+0x1e>
            R( i );
   202ea:	1e93      	subs	r3, r2, #2
   202ec:	ac08      	add	r4, sp, #32
   202ee:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
   202f2:	ea4f 43f5 	mov.w	r3, r5, ror #19
   202f6:	ea83 4375 	eor.w	r3, r3, r5, ror #17
   202fa:	ea83 2395 	eor.w	r3, r3, r5, lsr #10
   202fe:	1fd5      	subs	r5, r2, #7
   20300:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   20304:	442b      	add	r3, r5
   20306:	f1a2 050f 	sub.w	r5, r2, #15
   2030a:	f854 6025 	ldr.w	r6, [r4, r5, lsl #2]
   2030e:	ea4f 45b6 	mov.w	r5, r6, ror #18
   20312:	ea85 15f6 	eor.w	r5, r5, r6, ror #7
   20316:	ea85 05d6 	eor.w	r5, r5, r6, lsr #3
   2031a:	442b      	add	r3, r5
   2031c:	f1a2 0510 	sub.w	r5, r2, #16
   20320:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   20324:	442b      	add	r3, r5
   20326:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
   2032a:	e79a      	b.n	20262 <mbedtls_internal_sha256_process+0x3e>
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
   2032c:	2300      	movs	r3, #0
   2032e:	e008      	b.n	20342 <mbedtls_internal_sha256_process+0x11e>
        ctx->state[i] += A[i];
   20330:	f85d 4023 	ldr.w	r4, [sp, r3, lsl #2]
   20334:	1c99      	adds	r1, r3, #2
   20336:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
   2033a:	4422      	add	r2, r4
   2033c:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
    for( i = 0; i < 8; i++ )
   20340:	3301      	adds	r3, #1
   20342:	2b07      	cmp	r3, #7
   20344:	d9f4      	bls.n	20330 <mbedtls_internal_sha256_process+0x10c>

    return( 0 );
}
   20346:	2000      	movs	r0, #0
   20348:	b048      	add	sp, #288	; 0x120
   2034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2034e:	bf00      	nop
   20350:	00024d5c 	.word	0x00024d5c

00020354 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
   20354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    int ret;
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
   20358:	b3da      	cbz	r2, 203d2 <mbedtls_sha256_update_ret+0x7e>
   2035a:	4606      	mov	r6, r0
   2035c:	460d      	mov	r5, r1
   2035e:	4614      	mov	r4, r2
        return( 0 );

    left = ctx->total[0] & 0x3F;
   20360:	6803      	ldr	r3, [r0, #0]
   20362:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    fill = 64 - left;
   20366:	f1c7 0840 	rsb	r8, r7, #64	; 0x40

    ctx->total[0] += (uint32_t) ilen;
   2036a:	4413      	add	r3, r2
   2036c:	6003      	str	r3, [r0, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
   2036e:	4293      	cmp	r3, r2
   20370:	d202      	bcs.n	20378 <mbedtls_sha256_update_ret+0x24>
        ctx->total[1]++;
   20372:	6843      	ldr	r3, [r0, #4]
   20374:	3301      	adds	r3, #1
   20376:	6043      	str	r3, [r0, #4]

    if( left && ilen >= fill )
   20378:	b10f      	cbz	r7, 2037e <mbedtls_sha256_update_ret+0x2a>
   2037a:	4544      	cmp	r4, r8
   2037c:	d20a      	bcs.n	20394 <mbedtls_sha256_update_ret+0x40>
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
   2037e:	2c3f      	cmp	r4, #63	; 0x3f
   20380:	d91b      	bls.n	203ba <mbedtls_sha256_update_ret+0x66>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
   20382:	4629      	mov	r1, r5
   20384:	4630      	mov	r0, r6
   20386:	f7ff ff4d 	bl	20224 <mbedtls_internal_sha256_process>
   2038a:	4603      	mov	r3, r0
   2038c:	bb10      	cbnz	r0, 203d4 <mbedtls_sha256_update_ret+0x80>
            return( ret );

        input += 64;
   2038e:	3540      	adds	r5, #64	; 0x40
        ilen  -= 64;
   20390:	3c40      	subs	r4, #64	; 0x40
   20392:	e7f4      	b.n	2037e <mbedtls_sha256_update_ret+0x2a>
        memcpy( (void *) (ctx->buffer + left), input, fill );
   20394:	f106 0928 	add.w	r9, r6, #40	; 0x28
   20398:	4642      	mov	r2, r8
   2039a:	4629      	mov	r1, r5
   2039c:	eb09 0007 	add.w	r0, r9, r7
   203a0:	f7ed fb22 	bl	d9e8 <memcpy>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
   203a4:	4649      	mov	r1, r9
   203a6:	4630      	mov	r0, r6
   203a8:	f7ff ff3c 	bl	20224 <mbedtls_internal_sha256_process>
   203ac:	4603      	mov	r3, r0
   203ae:	b988      	cbnz	r0, 203d4 <mbedtls_sha256_update_ret+0x80>
        input += fill;
   203b0:	4445      	add	r5, r8
        ilen  -= fill;
   203b2:	3f40      	subs	r7, #64	; 0x40
   203b4:	443c      	add	r4, r7
        left = 0;
   203b6:	2700      	movs	r7, #0
   203b8:	e7e1      	b.n	2037e <mbedtls_sha256_update_ret+0x2a>
    }

    if( ilen > 0 )
   203ba:	b90c      	cbnz	r4, 203c0 <mbedtls_sha256_update_ret+0x6c>
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
   203bc:	2300      	movs	r3, #0
   203be:	e009      	b.n	203d4 <mbedtls_sha256_update_ret+0x80>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
   203c0:	f106 0028 	add.w	r0, r6, #40	; 0x28
   203c4:	4622      	mov	r2, r4
   203c6:	4629      	mov	r1, r5
   203c8:	4438      	add	r0, r7
   203ca:	f7ed fb0d 	bl	d9e8 <memcpy>
    return( 0 );
   203ce:	2300      	movs	r3, #0
   203d0:	e000      	b.n	203d4 <mbedtls_sha256_update_ret+0x80>
        return( 0 );
   203d2:	2300      	movs	r3, #0
}
   203d4:	4618      	mov	r0, r3
   203d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000203da <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
   203da:	b570      	push	{r4, r5, r6, lr}
   203dc:	4604      	mov	r4, r0
   203de:	460d      	mov	r5, r1
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
   203e0:	6803      	ldr	r3, [r0, #0]
   203e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
   203e6:	1c58      	adds	r0, r3, #1
   203e8:	4423      	add	r3, r4
   203ea:	2280      	movs	r2, #128	; 0x80
   203ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( used <= 56 )
   203f0:	2838      	cmp	r0, #56	; 0x38
   203f2:	d87c      	bhi.n	204ee <mbedtls_sha256_finish_ret+0x114>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
   203f4:	f104 0328 	add.w	r3, r4, #40	; 0x28
   203f8:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   203fc:	2100      	movs	r1, #0
   203fe:	4418      	add	r0, r3
   20400:	f7ed faff 	bl	da02 <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
   20404:	6822      	ldr	r2, [r4, #0]
         | ( ctx->total[1] <<  3 );
   20406:	6863      	ldr	r3, [r4, #4]
   20408:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
   2040a:	ea43 7052 	orr.w	r0, r3, r2, lsr #29
    low  = ( ctx->total[0] <<  3 );
   2040e:	00d1      	lsls	r1, r2, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
   20410:	0e1e      	lsrs	r6, r3, #24
   20412:	f884 6060 	strb.w	r6, [r4, #96]	; 0x60
   20416:	f3c3 4607 	ubfx	r6, r3, #16, #8
   2041a:	f884 6061 	strb.w	r6, [r4, #97]	; 0x61
   2041e:	f3c3 2307 	ubfx	r3, r3, #8, #8
   20422:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
   20426:	f884 0063 	strb.w	r0, [r4, #99]	; 0x63
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
   2042a:	f3c2 5347 	ubfx	r3, r2, #21, #8
   2042e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
   20432:	f3c2 3347 	ubfx	r3, r2, #13, #8
   20436:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
   2043a:	f3c2 1247 	ubfx	r2, r2, #5, #8
   2043e:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
   20442:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
   20446:	f104 0128 	add.w	r1, r4, #40	; 0x28
   2044a:	4620      	mov	r0, r4
   2044c:	f7ff feea 	bl	20224 <mbedtls_internal_sha256_process>
   20450:	4603      	mov	r3, r0
   20452:	2800      	cmp	r0, #0
   20454:	d159      	bne.n	2050a <mbedtls_sha256_finish_ret+0x130>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
   20456:	7ae2      	ldrb	r2, [r4, #11]
   20458:	702a      	strb	r2, [r5, #0]
   2045a:	7aa2      	ldrb	r2, [r4, #10]
   2045c:	706a      	strb	r2, [r5, #1]
   2045e:	7a62      	ldrb	r2, [r4, #9]
   20460:	70aa      	strb	r2, [r5, #2]
   20462:	7a22      	ldrb	r2, [r4, #8]
   20464:	70ea      	strb	r2, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
   20466:	7be2      	ldrb	r2, [r4, #15]
   20468:	712a      	strb	r2, [r5, #4]
   2046a:	7ba2      	ldrb	r2, [r4, #14]
   2046c:	716a      	strb	r2, [r5, #5]
   2046e:	7b62      	ldrb	r2, [r4, #13]
   20470:	71aa      	strb	r2, [r5, #6]
   20472:	7b22      	ldrb	r2, [r4, #12]
   20474:	71ea      	strb	r2, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
   20476:	7ce2      	ldrb	r2, [r4, #19]
   20478:	722a      	strb	r2, [r5, #8]
   2047a:	7ca2      	ldrb	r2, [r4, #18]
   2047c:	726a      	strb	r2, [r5, #9]
   2047e:	7c62      	ldrb	r2, [r4, #17]
   20480:	72aa      	strb	r2, [r5, #10]
   20482:	7c22      	ldrb	r2, [r4, #16]
   20484:	72ea      	strb	r2, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
   20486:	7de2      	ldrb	r2, [r4, #23]
   20488:	732a      	strb	r2, [r5, #12]
   2048a:	7da2      	ldrb	r2, [r4, #22]
   2048c:	736a      	strb	r2, [r5, #13]
   2048e:	7d62      	ldrb	r2, [r4, #21]
   20490:	73aa      	strb	r2, [r5, #14]
   20492:	7d22      	ldrb	r2, [r4, #20]
   20494:	73ea      	strb	r2, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
   20496:	7ee2      	ldrb	r2, [r4, #27]
   20498:	742a      	strb	r2, [r5, #16]
   2049a:	7ea2      	ldrb	r2, [r4, #26]
   2049c:	746a      	strb	r2, [r5, #17]
   2049e:	7e62      	ldrb	r2, [r4, #25]
   204a0:	74aa      	strb	r2, [r5, #18]
   204a2:	7e22      	ldrb	r2, [r4, #24]
   204a4:	74ea      	strb	r2, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
   204a6:	7fe2      	ldrb	r2, [r4, #31]
   204a8:	752a      	strb	r2, [r5, #20]
   204aa:	7fa2      	ldrb	r2, [r4, #30]
   204ac:	756a      	strb	r2, [r5, #21]
   204ae:	7f62      	ldrb	r2, [r4, #29]
   204b0:	75aa      	strb	r2, [r5, #22]
   204b2:	7f22      	ldrb	r2, [r4, #28]
   204b4:	75ea      	strb	r2, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
   204b6:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
   204ba:	762a      	strb	r2, [r5, #24]
   204bc:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
   204c0:	766a      	strb	r2, [r5, #25]
   204c2:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
   204c6:	76aa      	strb	r2, [r5, #26]
   204c8:	f894 2020 	ldrb.w	r2, [r4, #32]
   204cc:	76ea      	strb	r2, [r5, #27]

    if( ctx->is224 == 0 )
   204ce:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   204d0:	b9da      	cbnz	r2, 2050a <mbedtls_sha256_finish_ret+0x130>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
   204d2:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   204d6:	772b      	strb	r3, [r5, #28]
   204d8:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   204dc:	776b      	strb	r3, [r5, #29]
   204de:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   204e2:	77ab      	strb	r3, [r5, #30]
   204e4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   204e8:	77eb      	strb	r3, [r5, #31]

    return( 0 );
   204ea:	4613      	mov	r3, r2
   204ec:	e00d      	b.n	2050a <mbedtls_sha256_finish_ret+0x130>
        memset( ctx->buffer + used, 0, 64 - used );
   204ee:	f104 0628 	add.w	r6, r4, #40	; 0x28
   204f2:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   204f6:	2100      	movs	r1, #0
   204f8:	4430      	add	r0, r6
   204fa:	f7ed fa82 	bl	da02 <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
   204fe:	4631      	mov	r1, r6
   20500:	4620      	mov	r0, r4
   20502:	f7ff fe8f 	bl	20224 <mbedtls_internal_sha256_process>
   20506:	4603      	mov	r3, r0
   20508:	b108      	cbz	r0, 2050e <mbedtls_sha256_finish_ret+0x134>
}
   2050a:	4618      	mov	r0, r3
   2050c:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer, 0, 56 );
   2050e:	2238      	movs	r2, #56	; 0x38
   20510:	2100      	movs	r1, #0
   20512:	4630      	mov	r0, r6
   20514:	f7ed fa75 	bl	da02 <memset>
   20518:	e774      	b.n	20404 <mbedtls_sha256_finish_ret+0x2a>

0002051a <fcb_free_sector_cnt>:
    return rc;
}

int
fcb_free_sector_cnt(struct fcb *fcb)
{
   2051a:	b538      	push	{r3, r4, r5, lr}
   2051c:	4604      	mov	r4, r0
    int i;
    struct flash_area *fa;

    fa = fcb->f_active.fe_area;
   2051e:	69c1      	ldr	r1, [r0, #28]
    for (i = 0; i < fcb->f_sector_cnt; i++) {
   20520:	2500      	movs	r5, #0
   20522:	e000      	b.n	20526 <fcb_free_sector_cnt+0xc>
   20524:	3501      	adds	r5, #1
   20526:	7963      	ldrb	r3, [r4, #5]
   20528:	42ab      	cmp	r3, r5
   2052a:	dd06      	ble.n	2053a <fcb_free_sector_cnt+0x20>
        fa = fcb_getnext_area(fcb, fa);
   2052c:	4620      	mov	r0, r4
   2052e:	f000 fa7b 	bl	20a28 <fcb_getnext_area>
   20532:	4601      	mov	r1, r0
        if (fa == fcb->f_oldest) {
   20534:	69a3      	ldr	r3, [r4, #24]
   20536:	4283      	cmp	r3, r0
   20538:	d1f4      	bne.n	20524 <fcb_free_sector_cnt+0xa>
            break;
        }
    }
    return i;
}
   2053a:	4628      	mov	r0, r5
   2053c:	bd38      	pop	{r3, r4, r5, pc}

0002053e <fcb_put_len>:
 * 1 byte for lengths < 128 bytes, and 2 bytes for < 16384.
 */
int
fcb_put_len(uint8_t *buf, uint16_t len)
{
    if (len < 0x80) {
   2053e:	297f      	cmp	r1, #127	; 0x7f
   20540:	d90a      	bls.n	20558 <fcb_put_len+0x1a>
        buf[0] = len;
        return 1;
    } else if (len < FCB_MAX_LEN) {
   20542:	f647 73fe 	movw	r3, #32766	; 0x7ffe
   20546:	4299      	cmp	r1, r3
   20548:	d809      	bhi.n	2055e <fcb_put_len+0x20>
        buf[0] = (len & 0x7f) | 0x80;
   2054a:	f061 037f 	orn	r3, r1, #127	; 0x7f
   2054e:	7003      	strb	r3, [r0, #0]
        buf[1] = len >> 7;
   20550:	09c9      	lsrs	r1, r1, #7
   20552:	7041      	strb	r1, [r0, #1]
        return 2;
   20554:	2002      	movs	r0, #2
   20556:	4770      	bx	lr
        buf[0] = len;
   20558:	7001      	strb	r1, [r0, #0]
        return 1;
   2055a:	2001      	movs	r0, #1
   2055c:	4770      	bx	lr
    } else {
        return FCB_ERR_ARGS;
   2055e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
}
   20562:	4770      	bx	lr

00020564 <fcb_get_len>:
int
fcb_get_len(uint8_t *buf, uint16_t *len)
{
    int rc;

    if (buf[0] & 0x80) {
   20564:	7803      	ldrb	r3, [r0, #0]
   20566:	f990 2000 	ldrsb.w	r2, [r0]
   2056a:	2a00      	cmp	r2, #0
   2056c:	db02      	blt.n	20574 <fcb_get_len+0x10>
        *len = (buf[0] & 0x7f) | (buf[1] << 7);
        rc = 2;
    } else {
        *len = buf[0];
   2056e:	800b      	strh	r3, [r1, #0]
        rc = 1;
   20570:	2001      	movs	r0, #1
    }
    return rc;
}
   20572:	4770      	bx	lr
        *len = (buf[0] & 0x7f) | (buf[1] << 7);
   20574:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   20578:	7842      	ldrb	r2, [r0, #1]
   2057a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
   2057e:	800b      	strh	r3, [r1, #0]
        rc = 2;
   20580:	2002      	movs	r0, #2
   20582:	4770      	bx	lr

00020584 <fcb_sector_hdr_init>:
/**
 * Initialize erased sector for use.
 */
int
fcb_sector_hdr_init(struct fcb *fcb, struct flash_area *fap, uint16_t id)
{
   20584:	b500      	push	{lr}
   20586:	b083      	sub	sp, #12
   20588:	4603      	mov	r3, r0
   2058a:	4608      	mov	r0, r1
    struct fcb_disk_area fda;
    int rc;

    fda.fd_magic = fcb->f_magic;
   2058c:	6819      	ldr	r1, [r3, #0]
   2058e:	9100      	str	r1, [sp, #0]
    fda.fd_ver = fcb->f_version;
   20590:	791b      	ldrb	r3, [r3, #4]
   20592:	f88d 3004 	strb.w	r3, [sp, #4]
    fda._pad = 0xff;
   20596:	23ff      	movs	r3, #255	; 0xff
   20598:	f88d 3005 	strb.w	r3, [sp, #5]
    fda.fd_id = id;
   2059c:	f8ad 2006 	strh.w	r2, [sp, #6]

    rc = flash_area_write(fap, 0, &fda, sizeof(fda));
   205a0:	2308      	movs	r3, #8
   205a2:	466a      	mov	r2, sp
   205a4:	2100      	movs	r1, #0
   205a6:	f7fd fe11 	bl	1e1cc <flash_area_write>
    if (rc) {
   205aa:	b910      	cbnz	r0, 205b2 <fcb_sector_hdr_init+0x2e>
        return FCB_ERR_FLASH;
    }
    return 0;
}
   205ac:	b003      	add	sp, #12
   205ae:	f85d fb04 	ldr.w	pc, [sp], #4
        return FCB_ERR_FLASH;
   205b2:	f06f 0001 	mvn.w	r0, #1
   205b6:	e7f9      	b.n	205ac <fcb_sector_hdr_init+0x28>

000205b8 <fcb_sector_hdr_read>:
 * Returns 1 if sector has data.
 */
int
fcb_sector_hdr_read(struct fcb *fcb, struct flash_area *fap,
  struct fcb_disk_area *fdap)
{
   205b8:	b530      	push	{r4, r5, lr}
   205ba:	b083      	sub	sp, #12
   205bc:	4604      	mov	r4, r0
   205be:	4608      	mov	r0, r1
    struct fcb_disk_area fda;
    int rc;

    if (!fdap) {
   205c0:	4615      	mov	r5, r2
   205c2:	b19a      	cbz	r2, 205ec <fcb_sector_hdr_read+0x34>
        fdap = &fda;
    }
    rc = flash_area_read_is_empty(fap, 0, fdap, sizeof(*fdap));
   205c4:	2308      	movs	r3, #8
   205c6:	462a      	mov	r2, r5
   205c8:	2100      	movs	r1, #0
   205ca:	f7fd fe44 	bl	1e256 <flash_area_read_is_empty>
    if (rc < 0) {
   205ce:	1e03      	subs	r3, r0, #0
   205d0:	db0e      	blt.n	205f0 <fcb_sector_hdr_read+0x38>
        return FCB_ERR_FLASH;
    } else if (rc == 1) {
   205d2:	2b01      	cmp	r3, #1
   205d4:	d00f      	beq.n	205f6 <fcb_sector_hdr_read+0x3e>
        return 0;
    }
    if (fdap->fd_magic != fcb->f_magic) {
   205d6:	682a      	ldr	r2, [r5, #0]
   205d8:	6823      	ldr	r3, [r4, #0]
   205da:	429a      	cmp	r2, r3
   205dc:	d10d      	bne.n	205fa <fcb_sector_hdr_read+0x42>
        return FCB_ERR_MAGIC;
    }
    if (fdap->fd_ver != fcb->f_version) {
   205de:	792a      	ldrb	r2, [r5, #4]
   205e0:	7923      	ldrb	r3, [r4, #4]
   205e2:	429a      	cmp	r2, r3
   205e4:	d10c      	bne.n	20600 <fcb_sector_hdr_read+0x48>
        return FCB_ERR_VERSION;
    }
    return 1;
   205e6:	2001      	movs	r0, #1
}
   205e8:	b003      	add	sp, #12
   205ea:	bd30      	pop	{r4, r5, pc}
        fdap = &fda;
   205ec:	466d      	mov	r5, sp
   205ee:	e7e9      	b.n	205c4 <fcb_sector_hdr_read+0xc>
        return FCB_ERR_FLASH;
   205f0:	f06f 0001 	mvn.w	r0, #1
   205f4:	e7f8      	b.n	205e8 <fcb_sector_hdr_read+0x30>
        return 0;
   205f6:	2000      	movs	r0, #0
   205f8:	e7f6      	b.n	205e8 <fcb_sector_hdr_read+0x30>
        return FCB_ERR_MAGIC;
   205fa:	f06f 0006 	mvn.w	r0, #6
   205fe:	e7f3      	b.n	205e8 <fcb_sector_hdr_read+0x30>
        return FCB_ERR_VERSION;
   20600:	f06f 0007 	mvn.w	r0, #7
   20604:	e7f0      	b.n	205e8 <fcb_sector_hdr_read+0x30>

00020606 <fcb_init>:
{
   20606:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2060a:	b085      	sub	sp, #20
    if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   2060c:	6883      	ldr	r3, [r0, #8]
   2060e:	2b00      	cmp	r3, #0
   20610:	f000 8082 	beq.w	20718 <fcb_init+0x112>
   20614:	4606      	mov	r6, r0
   20616:	7943      	ldrb	r3, [r0, #5]
   20618:	7982      	ldrb	r2, [r0, #6]
   2061a:	1a9b      	subs	r3, r3, r2
   2061c:	2b00      	cmp	r3, #0
   2061e:	dd7e      	ble.n	2071e <fcb_init+0x118>
    struct flash_area *oldest_fap = NULL, *newest_fap = NULL;
   20620:	f04f 0b00 	mov.w	fp, #0
   20624:	f8cd b004 	str.w	fp, [sp, #4]
    int oldest = -1, newest = -1;
   20628:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   2062c:	46d1      	mov	r9, sl
    int max_align = 1;
   2062e:	f04f 0801 	mov.w	r8, #1
    for (i = 0; i < fcb->f_sector_cnt; i++) {
   20632:	465f      	mov	r7, fp
   20634:	e00a      	b.n	2064c <fcb_init+0x46>
            max_align = flash_area_align(fap);
   20636:	4620      	mov	r0, r4
   20638:	f7fd fdf0 	bl	1e21c <flash_area_align>
   2063c:	4680      	mov	r8, r0
   2063e:	e012      	b.n	20666 <fcb_init+0x60>
            oldest = newest = fda.fd_id;
   20640:	f8bd 900e 	ldrh.w	r9, [sp, #14]
            oldest_fap = newest_fap = fap;
   20644:	46a3      	mov	fp, r4
   20646:	9401      	str	r4, [sp, #4]
            oldest = newest = fda.fd_id;
   20648:	46ca      	mov	sl, r9
    for (i = 0; i < fcb->f_sector_cnt; i++) {
   2064a:	3701      	adds	r7, #1
   2064c:	7973      	ldrb	r3, [r6, #5]
   2064e:	42bb      	cmp	r3, r7
   20650:	dd29      	ble.n	206a6 <fcb_init+0xa0>
        fap = &fcb->f_sectors[i];
   20652:	68b4      	ldr	r4, [r6, #8]
   20654:	eb07 0347 	add.w	r3, r7, r7, lsl #1
   20658:	eb04 0483 	add.w	r4, r4, r3, lsl #2
        align = flash_area_align(fap);
   2065c:	4620      	mov	r0, r4
   2065e:	f7fd fddd 	bl	1e21c <flash_area_align>
        if (align > max_align) {
   20662:	4580      	cmp	r8, r0
   20664:	dbe7      	blt.n	20636 <fcb_init+0x30>
        rc = fcb_sector_hdr_read(fcb, fap, &fda);
   20666:	aa02      	add	r2, sp, #8
   20668:	4621      	mov	r1, r4
   2066a:	4630      	mov	r0, r6
   2066c:	f7ff ffa4 	bl	205b8 <fcb_sector_hdr_read>
        if (rc < 0) {
   20670:	1e05      	subs	r5, r0, #0
   20672:	db3b      	blt.n	206ec <fcb_init+0xe6>
        if (rc == 0) {
   20674:	2d00      	cmp	r5, #0
   20676:	d0e8      	beq.n	2064a <fcb_init+0x44>
        if (oldest < 0) {
   20678:	f1b9 0f00 	cmp.w	r9, #0
   2067c:	dbe0      	blt.n	20640 <fcb_init+0x3a>
        if (FCB_ID_GT(fda.fd_id, newest)) {
   2067e:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   20682:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
   20686:	fa0f f38a 	sxth.w	r3, sl
   2068a:	1ad3      	subs	r3, r2, r3
   2068c:	2b00      	cmp	r3, #0
   2068e:	dd02      	ble.n	20696 <fcb_init+0x90>
            newest = fda.fd_id;
   20690:	468a      	mov	sl, r1
            newest_fap = fap;
   20692:	46a3      	mov	fp, r4
   20694:	e7d9      	b.n	2064a <fcb_init+0x44>
        } else if (FCB_ID_GT(oldest, fda.fd_id)) {
   20696:	fa0f f389 	sxth.w	r3, r9
   2069a:	1a9a      	subs	r2, r3, r2
   2069c:	2a00      	cmp	r2, #0
   2069e:	ddd4      	ble.n	2064a <fcb_init+0x44>
            oldest = fda.fd_id;
   206a0:	4689      	mov	r9, r1
            oldest_fap = fap;
   206a2:	9401      	str	r4, [sp, #4]
   206a4:	e7d1      	b.n	2064a <fcb_init+0x44>
    if (oldest < 0) {
   206a6:	f1b9 0f00 	cmp.w	r9, #0
   206aa:	db23      	blt.n	206f4 <fcb_init+0xee>
    fcb->f_align = max_align;
   206ac:	fa5f f888 	uxtb.w	r8, r8
   206b0:	f886 802e 	strb.w	r8, [r6, #46]	; 0x2e
    fcb->f_oldest = oldest_fap;
   206b4:	9b01      	ldr	r3, [sp, #4]
   206b6:	61b3      	str	r3, [r6, #24]
    fcb->f_active.fe_area = newest_fap;
   206b8:	f8c6 b01c 	str.w	fp, [r6, #28]
    fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   206bc:	2308      	movs	r3, #8
   206be:	6233      	str	r3, [r6, #32]
    fcb->f_active_id = newest;
   206c0:	f8a6 a02c 	strh.w	sl, [r6, #44]	; 0x2c
    assert((fcb->f_align & (fcb->f_align - 1)) == 0);
   206c4:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
   206c8:	ea18 0505 	ands.w	r5, r8, r5
   206cc:	d11e      	bne.n	2070c <fcb_init+0x106>
        rc = fcb_getnext_in_area(fcb, &fcb->f_active);
   206ce:	f106 011c 	add.w	r1, r6, #28
   206d2:	4630      	mov	r0, r6
   206d4:	f000 f984 	bl	209e0 <fcb_getnext_in_area>
        if (rc == FCB_ERR_NOVAR) {
   206d8:	f110 0f03 	cmn.w	r0, #3
   206dc:	d002      	beq.n	206e4 <fcb_init+0xde>
        if (rc != 0) {
   206de:	2800      	cmp	r0, #0
   206e0:	d0f5      	beq.n	206ce <fcb_init+0xc8>
        rc = fcb_getnext_in_area(fcb, &fcb->f_active);
   206e2:	4605      	mov	r5, r0
    os_mutex_init(&fcb->f_mtx);
   206e4:	f106 000c 	add.w	r0, r6, #12
   206e8:	f7ea f9bc 	bl	aa64 <os_mutex_init>
}
   206ec:	4628      	mov	r0, r5
   206ee:	b005      	add	sp, #20
   206f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        oldest_fap = newest_fap = &fcb->f_sectors[0];
   206f4:	68b3      	ldr	r3, [r6, #8]
   206f6:	461c      	mov	r4, r3
   206f8:	9301      	str	r3, [sp, #4]
        rc = fcb_sector_hdr_init(fcb, oldest_fap, 0);
   206fa:	2200      	movs	r2, #0
   206fc:	4619      	mov	r1, r3
   206fe:	4630      	mov	r0, r6
   20700:	f7ff ff40 	bl	20584 <fcb_sector_hdr_init>
        if (rc) {
   20704:	4682      	mov	sl, r0
   20706:	b968      	cbnz	r0, 20724 <fcb_init+0x11e>
        oldest_fap = newest_fap = &fcb->f_sectors[0];
   20708:	46a3      	mov	fp, r4
   2070a:	e7cf      	b.n	206ac <fcb_init+0xa6>
    assert((fcb->f_align & (fcb->f_align - 1)) == 0);
   2070c:	2300      	movs	r3, #0
   2070e:	461a      	mov	r2, r3
   20710:	4619      	mov	r1, r3
   20712:	4618      	mov	r0, r3
   20714:	f7e8 fc9a 	bl	904c <__assert_func>
        return FCB_ERR_ARGS;
   20718:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2071c:	e7e6      	b.n	206ec <fcb_init+0xe6>
   2071e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   20722:	e7e3      	b.n	206ec <fcb_init+0xe6>
            return rc;
   20724:	4605      	mov	r5, r0
   20726:	e7e1      	b.n	206ec <fcb_init+0xe6>

00020728 <fcb_new_area>:
#include "fcb/fcb.h"
#include "fcb_priv.h"

static struct flash_area *
fcb_new_area(struct fcb *fcb, int cnt)
{
   20728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2072a:	4605      	mov	r5, r0
   2072c:	460f      	mov	r7, r1
    struct flash_area *rfa;
    int i;

    rfa = NULL;
    i = 0;
    fa = fcb->f_active.fe_area;
   2072e:	69c1      	ldr	r1, [r0, #28]
    i = 0;
   20730:	2400      	movs	r4, #0
    rfa = NULL;
   20732:	4626      	mov	r6, r4
   20734:	e006      	b.n	20744 <fcb_new_area+0x1c>
    do {
        fa = fcb_getnext_area(fcb, fa);
        if (!rfa) {
            rfa = fa;
        }
        if (fa == fcb->f_oldest) {
   20736:	69ab      	ldr	r3, [r5, #24]
   20738:	428b      	cmp	r3, r1
   2073a:	d00b      	beq.n	20754 <fcb_new_area+0x2c>
            return NULL;
        }
    } while (i++ < cnt);
   2073c:	1c63      	adds	r3, r4, #1
   2073e:	42bc      	cmp	r4, r7
   20740:	da09      	bge.n	20756 <fcb_new_area+0x2e>
   20742:	461c      	mov	r4, r3
        fa = fcb_getnext_area(fcb, fa);
   20744:	4628      	mov	r0, r5
   20746:	f000 f96f 	bl	20a28 <fcb_getnext_area>
   2074a:	4601      	mov	r1, r0
        if (!rfa) {
   2074c:	2e00      	cmp	r6, #0
   2074e:	d1f2      	bne.n	20736 <fcb_new_area+0xe>
            rfa = fa;
   20750:	4606      	mov	r6, r0
   20752:	e7f0      	b.n	20736 <fcb_new_area+0xe>
            return NULL;
   20754:	2600      	movs	r6, #0
    return rfa;
}
   20756:	4630      	mov	r0, r6
   20758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002075a <fcb_append_to_scratch>:
/*
 * Take one of the scratch blocks into use, if at all possible.
 */
int
fcb_append_to_scratch(struct fcb *fcb)
{
   2075a:	b538      	push	{r3, r4, r5, lr}
   2075c:	4604      	mov	r4, r0
    struct flash_area *fa;
    int rc;

    fa = fcb_new_area(fcb, 0);
   2075e:	2100      	movs	r1, #0
   20760:	f7ff ffe2 	bl	20728 <fcb_new_area>
    if (!fa) {
   20764:	b178      	cbz	r0, 20786 <fcb_append_to_scratch+0x2c>
   20766:	4605      	mov	r5, r0
        return FCB_ERR_NOSPACE;
    }
    rc = fcb_sector_hdr_init(fcb, fa, fcb->f_active_id + 1);
   20768:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   2076a:	3201      	adds	r2, #1
   2076c:	b292      	uxth	r2, r2
   2076e:	4601      	mov	r1, r0
   20770:	4620      	mov	r0, r4
   20772:	f7ff ff07 	bl	20584 <fcb_sector_hdr_init>
    if (rc) {
   20776:	b928      	cbnz	r0, 20784 <fcb_append_to_scratch+0x2a>
        return rc;
    }
    fcb->f_active.fe_area = fa;
   20778:	61e5      	str	r5, [r4, #28]
    fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   2077a:	2308      	movs	r3, #8
   2077c:	6223      	str	r3, [r4, #32]
    fcb->f_active_id++;
   2077e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   20780:	3301      	adds	r3, #1
   20782:	85a3      	strh	r3, [r4, #44]	; 0x2c
    return FCB_OK;
}
   20784:	bd38      	pop	{r3, r4, r5, pc}
        return FCB_ERR_NOSPACE;
   20786:	f06f 0003 	mvn.w	r0, #3
   2078a:	e7fb      	b.n	20784 <fcb_append_to_scratch+0x2a>

0002078c <fcb_append>:

int
fcb_append(struct fcb *fcb, uint16_t len, struct fcb_entry *append_loc)
{
   2078c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20790:	b082      	sub	sp, #8
   20792:	4605      	mov	r5, r0
   20794:	460c      	mov	r4, r1
   20796:	4617      	mov	r7, r2
    struct flash_area *fa;
    uint8_t tmp_str[2];
    int cnt;
    int rc;

    cnt = fcb_put_len(tmp_str, len);
   20798:	a801      	add	r0, sp, #4
   2079a:	f7ff fed0 	bl	2053e <fcb_put_len>
    if (cnt < 0) {
   2079e:	1e06      	subs	r6, r0, #0
   207a0:	db58      	blt.n	20854 <fcb_append+0xc8>
int fcb_get_len(uint8_t *buf, uint16_t *len);

static inline int
fcb_len_in_flash(struct fcb *fcb, uint16_t len)
{
    if (fcb->f_align <= 1) {
   207a2:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   207a6:	2b01      	cmp	r3, #1
   207a8:	d933      	bls.n	20812 <fcb_append+0x86>
        return len;
    }
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   207aa:	1e58      	subs	r0, r3, #1
   207ac:	fa10 f686 	uxtah	r6, r0, r6
   207b0:	4258      	negs	r0, r3
   207b2:	4006      	ands	r6, r0
    if (fcb->f_align <= 1) {
   207b4:	2b01      	cmp	r3, #1
   207b6:	d903      	bls.n	207c0 <fcb_append+0x34>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   207b8:	1e59      	subs	r1, r3, #1
   207ba:	440c      	add	r4, r1
   207bc:	4259      	negs	r1, r3
   207be:	400c      	ands	r4, r1
        return cnt;
    }
    cnt = fcb_len_in_flash(fcb, cnt);
    len = fcb_len_in_flash(fcb, len) + fcb_len_in_flash(fcb, FCB_CRC_SZ);
   207c0:	b2a1      	uxth	r1, r4
    if (fcb->f_align <= 1) {
   207c2:	2b01      	cmp	r3, #1
   207c4:	d927      	bls.n	20816 <fcb_append+0x8a>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   207c6:	425c      	negs	r4, r3
   207c8:	401c      	ands	r4, r3
   207ca:	440c      	add	r4, r1
   207cc:	b2a4      	uxth	r4, r4

    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   207ce:	f105 080c 	add.w	r8, r5, #12
   207d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   207d6:	4640      	mov	r0, r8
   207d8:	f7ea f9aa 	bl	ab30 <os_mutex_pend>
    if (rc && rc != OS_NOT_STARTED) {
   207dc:	b108      	cbz	r0, 207e2 <fcb_append+0x56>
   207de:	2809      	cmp	r0, #9
   207e0:	d14e      	bne.n	20880 <fcb_append+0xf4>
        return FCB_ERR_ARGS;
    }
    active = &fcb->f_active;
    if (active->fe_elem_off + len + cnt > active->fe_area->fa_size) {
   207e2:	6a2b      	ldr	r3, [r5, #32]
   207e4:	4423      	add	r3, r4
   207e6:	46b1      	mov	r9, r6
   207e8:	441e      	add	r6, r3
   207ea:	69eb      	ldr	r3, [r5, #28]
   207ec:	689b      	ldr	r3, [r3, #8]
   207ee:	429e      	cmp	r6, r3
   207f0:	d923      	bls.n	2083a <fcb_append+0xae>
        fa = fcb_new_area(fcb, fcb->f_scratch_cnt);
   207f2:	79a9      	ldrb	r1, [r5, #6]
   207f4:	4628      	mov	r0, r5
   207f6:	f7ff ff97 	bl	20728 <fcb_new_area>
        if (!fa || (fa->fa_size <
   207fa:	4682      	mov	sl, r0
   207fc:	2800      	cmp	r0, #0
   207fe:	d03c      	beq.n	2087a <fcb_append+0xee>
   20800:	6882      	ldr	r2, [r0, #8]
            sizeof(struct fcb_disk_area) + len + cnt)) {
   20802:	eb04 0309 	add.w	r3, r4, r9
   20806:	3308      	adds	r3, #8
        if (!fa || (fa->fa_size <
   20808:	429a      	cmp	r2, r3
   2080a:	d206      	bcs.n	2081a <fcb_append+0x8e>
            rc = FCB_ERR_NOSPACE;
   2080c:	f06f 0603 	mvn.w	r6, #3
   20810:	e01d      	b.n	2084e <fcb_append+0xc2>
        return len;
   20812:	b2b6      	uxth	r6, r6
   20814:	e7ce      	b.n	207b4 <fcb_append+0x28>
   20816:	2401      	movs	r4, #1
   20818:	e7d7      	b.n	207ca <fcb_append+0x3e>
            goto err;
        }
        rc = fcb_sector_hdr_init(fcb, fa, fcb->f_active_id + 1);
   2081a:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
   2081c:	3201      	adds	r2, #1
   2081e:	b292      	uxth	r2, r2
   20820:	4601      	mov	r1, r0
   20822:	4628      	mov	r0, r5
   20824:	f7ff feae 	bl	20584 <fcb_sector_hdr_init>
        if (rc) {
   20828:	4606      	mov	r6, r0
   2082a:	b980      	cbnz	r0, 2084e <fcb_append+0xc2>
            goto err;
        }
        fcb->f_active.fe_area = fa;
   2082c:	f8c5 a01c 	str.w	sl, [r5, #28]
        fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   20830:	2308      	movs	r3, #8
   20832:	622b      	str	r3, [r5, #32]
        fcb->f_active_id++;
   20834:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
   20836:	3301      	adds	r3, #1
   20838:	85ab      	strh	r3, [r5, #44]	; 0x2c
    }

    rc = flash_area_write(active->fe_area, active->fe_elem_off, tmp_str, cnt);
   2083a:	464b      	mov	r3, r9
   2083c:	aa01      	add	r2, sp, #4
   2083e:	6a29      	ldr	r1, [r5, #32]
   20840:	69e8      	ldr	r0, [r5, #28]
   20842:	f7fd fcc3 	bl	1e1cc <flash_area_write>
    if (rc) {
   20846:	4606      	mov	r6, r0
   20848:	b140      	cbz	r0, 2085c <fcb_append+0xd0>
        rc = FCB_ERR_FLASH;
   2084a:	f06f 0601 	mvn.w	r6, #1

    os_mutex_release(&fcb->f_mtx);

    return FCB_OK;
err:
    os_mutex_release(&fcb->f_mtx);
   2084e:	4640      	mov	r0, r8
   20850:	f7ea f912 	bl	aa78 <os_mutex_release>
    return rc;
}
   20854:	4630      	mov	r0, r6
   20856:	b002      	add	sp, #8
   20858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    append_loc->fe_area = active->fe_area;
   2085c:	69eb      	ldr	r3, [r5, #28]
   2085e:	603b      	str	r3, [r7, #0]
    append_loc->fe_elem_off = active->fe_elem_off;
   20860:	6a2b      	ldr	r3, [r5, #32]
   20862:	607b      	str	r3, [r7, #4]
    append_loc->fe_data_off = active->fe_elem_off + cnt;
   20864:	444b      	add	r3, r9
   20866:	60bb      	str	r3, [r7, #8]
    active->fe_elem_off = append_loc->fe_data_off + len;
   20868:	4423      	add	r3, r4
   2086a:	622b      	str	r3, [r5, #32]
    active->fe_data_off = append_loc->fe_data_off;
   2086c:	68bb      	ldr	r3, [r7, #8]
   2086e:	626b      	str	r3, [r5, #36]	; 0x24
    active->fe_data_len = len;
   20870:	852c      	strh	r4, [r5, #40]	; 0x28
    os_mutex_release(&fcb->f_mtx);
   20872:	4640      	mov	r0, r8
   20874:	f7ea f900 	bl	aa78 <os_mutex_release>
    return FCB_OK;
   20878:	e7ec      	b.n	20854 <fcb_append+0xc8>
            rc = FCB_ERR_NOSPACE;
   2087a:	f06f 0603 	mvn.w	r6, #3
   2087e:	e7e6      	b.n	2084e <fcb_append+0xc2>
        return FCB_ERR_ARGS;
   20880:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   20884:	e7e6      	b.n	20854 <fcb_append+0xc8>

00020886 <fcb_append_finish>:

int
fcb_append_finish(struct fcb *fcb, struct fcb_entry *loc)
{
   20886:	b530      	push	{r4, r5, lr}
   20888:	b083      	sub	sp, #12
   2088a:	4605      	mov	r5, r0
   2088c:	460c      	mov	r4, r1
    int rc;
    uint8_t crc8;
    uint32_t off;

    rc = fcb_elem_crc8(fcb, loc, &crc8);
   2088e:	f10d 0207 	add.w	r2, sp, #7
   20892:	f000 f818 	bl	208c6 <fcb_elem_crc8>
    if (rc) {
   20896:	b988      	cbnz	r0, 208bc <fcb_append_finish+0x36>
        return rc;
    }
    off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   20898:	68a0      	ldr	r0, [r4, #8]
   2089a:	89a1      	ldrh	r1, [r4, #12]
    if (fcb->f_align <= 1) {
   2089c:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   208a0:	2b01      	cmp	r3, #1
   208a2:	d903      	bls.n	208ac <fcb_append_finish+0x26>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   208a4:	1e5a      	subs	r2, r3, #1
   208a6:	4411      	add	r1, r2
   208a8:	425b      	negs	r3, r3
   208aa:	4019      	ands	r1, r3

    rc = flash_area_write(loc->fe_area, off, &crc8, sizeof(crc8));
   208ac:	2301      	movs	r3, #1
   208ae:	f10d 0207 	add.w	r2, sp, #7
   208b2:	4401      	add	r1, r0
   208b4:	6820      	ldr	r0, [r4, #0]
   208b6:	f7fd fc89 	bl	1e1cc <flash_area_write>
    if (rc) {
   208ba:	b908      	cbnz	r0, 208c0 <fcb_append_finish+0x3a>
        return FCB_ERR_FLASH;
    }
    return 0;
}
   208bc:	b003      	add	sp, #12
   208be:	bd30      	pop	{r4, r5, pc}
        return FCB_ERR_FLASH;
   208c0:	f06f 0001 	mvn.w	r0, #1
   208c4:	e7fa      	b.n	208bc <fcb_append_finish+0x36>

000208c6 <fcb_elem_crc8>:
 * Given offset in flash area, fill in rest of the fcb_entry, and crc8 over
 * the data.
 */
int
fcb_elem_crc8(struct fcb *fcb, struct fcb_entry *loc, uint8_t *c8p)
{
   208c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   208ca:	b08b      	sub	sp, #44	; 0x2c
   208cc:	4605      	mov	r5, r0
   208ce:	4688      	mov	r8, r1
   208d0:	4691      	mov	r9, r2
    uint16_t len;
    uint32_t off;
    uint32_t end;
    int rc;

    if (loc->fe_elem_off + 2 > loc->fe_area->fa_size) {
   208d2:	6849      	ldr	r1, [r1, #4]
   208d4:	1c8a      	adds	r2, r1, #2
   208d6:	f8d8 0000 	ldr.w	r0, [r8]
   208da:	6883      	ldr	r3, [r0, #8]
   208dc:	429a      	cmp	r2, r3
   208de:	d84a      	bhi.n	20976 <fcb_elem_crc8+0xb0>
        return FCB_ERR_NOVAR;
    }
    rc = flash_area_read_is_empty(loc->fe_area, loc->fe_elem_off, tmp_str, 2);
   208e0:	2302      	movs	r3, #2
   208e2:	aa02      	add	r2, sp, #8
   208e4:	f7fd fcb7 	bl	1e256 <flash_area_read_is_empty>
    if (rc < 0) {
   208e8:	1e03      	subs	r3, r0, #0
   208ea:	db47      	blt.n	2097c <fcb_elem_crc8+0xb6>
        return FCB_ERR_FLASH;
    } else if (rc == 1) {
   208ec:	2b01      	cmp	r3, #1
   208ee:	d048      	beq.n	20982 <fcb_elem_crc8+0xbc>
        return FCB_ERR_NOVAR;
    }

    cnt = fcb_get_len(tmp_str, &len);
   208f0:	f10d 0106 	add.w	r1, sp, #6
   208f4:	a802      	add	r0, sp, #8
   208f6:	f7ff fe35 	bl	20564 <fcb_get_len>
   208fa:	4604      	mov	r4, r0
    loc->fe_data_off = loc->fe_elem_off + fcb_len_in_flash(fcb, cnt);
   208fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
    if (fcb->f_align <= 1) {
   20900:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   20904:	2b01      	cmp	r3, #1
   20906:	d918      	bls.n	2093a <fcb_elem_crc8+0x74>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   20908:	1e5a      	subs	r2, r3, #1
   2090a:	fa12 f280 	uxtah	r2, r2, r0
   2090e:	425b      	negs	r3, r3
   20910:	4013      	ands	r3, r2
   20912:	440b      	add	r3, r1
   20914:	f8c8 3008 	str.w	r3, [r8, #8]
    loc->fe_data_len = len;
   20918:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   2091c:	f8a8 300c 	strh.w	r3, [r8, #12]

    crc8 = crc8_init();
   20920:	f000 fb00 	bl	20f24 <crc8_init>
    crc8 = crc8_calc(crc8, tmp_str, cnt);
   20924:	4622      	mov	r2, r4
   20926:	a902      	add	r1, sp, #8
   20928:	f000 fafe 	bl	20f28 <crc8_calc>
   2092c:	4606      	mov	r6, r0

    off = loc->fe_data_off;
   2092e:	f8d8 5008 	ldr.w	r5, [r8, #8]
    end = loc->fe_data_off + len;
   20932:	f8bd 7006 	ldrh.w	r7, [sp, #6]
   20936:	442f      	add	r7, r5
    for (; off < end; off += blk_sz) {
   20938:	e010      	b.n	2095c <fcb_elem_crc8+0x96>
        return len;
   2093a:	b283      	uxth	r3, r0
   2093c:	e7e9      	b.n	20912 <fcb_elem_crc8+0x4c>
        blk_sz = end - off;
        if (blk_sz > sizeof(tmp_str)) {
            blk_sz = sizeof(tmp_str);
        }

        rc = flash_area_read(loc->fe_area, off, tmp_str, blk_sz);
   2093e:	4623      	mov	r3, r4
   20940:	aa02      	add	r2, sp, #8
   20942:	4629      	mov	r1, r5
   20944:	f8d8 0000 	ldr.w	r0, [r8]
   20948:	f7fd fc2c 	bl	1e1a4 <flash_area_read>
        if (rc) {
   2094c:	b9e0      	cbnz	r0, 20988 <fcb_elem_crc8+0xc2>
            return FCB_ERR_FLASH;
        }
        crc8 = crc8_calc(crc8, tmp_str, blk_sz);
   2094e:	4622      	mov	r2, r4
   20950:	a902      	add	r1, sp, #8
   20952:	4630      	mov	r0, r6
   20954:	f000 fae8 	bl	20f28 <crc8_calc>
   20958:	4606      	mov	r6, r0
    for (; off < end; off += blk_sz) {
   2095a:	4425      	add	r5, r4
   2095c:	42bd      	cmp	r5, r7
   2095e:	d204      	bcs.n	2096a <fcb_elem_crc8+0xa4>
        blk_sz = end - off;
   20960:	1b7c      	subs	r4, r7, r5
        if (blk_sz > sizeof(tmp_str)) {
   20962:	2c20      	cmp	r4, #32
   20964:	d9eb      	bls.n	2093e <fcb_elem_crc8+0x78>
            blk_sz = sizeof(tmp_str);
   20966:	2420      	movs	r4, #32
   20968:	e7e9      	b.n	2093e <fcb_elem_crc8+0x78>
    }
    *c8p = crc8;
   2096a:	f889 6000 	strb.w	r6, [r9]

    return 0;
   2096e:	2000      	movs	r0, #0
}
   20970:	b00b      	add	sp, #44	; 0x2c
   20972:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return FCB_ERR_NOVAR;
   20976:	f06f 0002 	mvn.w	r0, #2
   2097a:	e7f9      	b.n	20970 <fcb_elem_crc8+0xaa>
        return FCB_ERR_FLASH;
   2097c:	f06f 0001 	mvn.w	r0, #1
   20980:	e7f6      	b.n	20970 <fcb_elem_crc8+0xaa>
        return FCB_ERR_NOVAR;
   20982:	f06f 0002 	mvn.w	r0, #2
   20986:	e7f3      	b.n	20970 <fcb_elem_crc8+0xaa>
            return FCB_ERR_FLASH;
   20988:	f06f 0001 	mvn.w	r0, #1
   2098c:	e7f0      	b.n	20970 <fcb_elem_crc8+0xaa>

0002098e <fcb_elem_info>:

int
fcb_elem_info(struct fcb *fcb, struct fcb_entry *loc)
{
   2098e:	b530      	push	{r4, r5, lr}
   20990:	b083      	sub	sp, #12
   20992:	4605      	mov	r5, r0
   20994:	460c      	mov	r4, r1
    int rc;
    uint8_t crc8;
    uint8_t fl_crc8;
    uint32_t off;

    rc = fcb_elem_crc8(fcb, loc, &crc8);
   20996:	f10d 0207 	add.w	r2, sp, #7
   2099a:	f7ff ff94 	bl	208c6 <fcb_elem_crc8>
    if (rc) {
   2099e:	b9b8      	cbnz	r0, 209d0 <fcb_elem_info+0x42>
        return rc;
    }
    off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   209a0:	68a0      	ldr	r0, [r4, #8]
   209a2:	89a1      	ldrh	r1, [r4, #12]
    if (fcb->f_align <= 1) {
   209a4:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   209a8:	2b01      	cmp	r3, #1
   209aa:	d903      	bls.n	209b4 <fcb_elem_info+0x26>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   209ac:	1e5a      	subs	r2, r3, #1
   209ae:	4411      	add	r1, r2
   209b0:	425b      	negs	r3, r3
   209b2:	4019      	ands	r1, r3

    rc = flash_area_read(loc->fe_area, off, &fl_crc8, sizeof(fl_crc8));
   209b4:	2301      	movs	r3, #1
   209b6:	f10d 0206 	add.w	r2, sp, #6
   209ba:	4401      	add	r1, r0
   209bc:	6820      	ldr	r0, [r4, #0]
   209be:	f7fd fbf1 	bl	1e1a4 <flash_area_read>
    if (rc) {
   209c2:	b938      	cbnz	r0, 209d4 <fcb_elem_info+0x46>
        return FCB_ERR_FLASH;
    }

    if (fl_crc8 != crc8) {
   209c4:	f89d 2006 	ldrb.w	r2, [sp, #6]
   209c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   209cc:	429a      	cmp	r2, r3
   209ce:	d104      	bne.n	209da <fcb_elem_info+0x4c>
        return FCB_ERR_CRC;
    }
    return 0;
}
   209d0:	b003      	add	sp, #12
   209d2:	bd30      	pop	{r4, r5, pc}
        return FCB_ERR_FLASH;
   209d4:	f06f 0001 	mvn.w	r0, #1
   209d8:	e7fa      	b.n	209d0 <fcb_elem_info+0x42>
        return FCB_ERR_CRC;
   209da:	f06f 0005 	mvn.w	r0, #5
   209de:	e7f7      	b.n	209d0 <fcb_elem_info+0x42>

000209e0 <fcb_getnext_in_area>:
#include "fcb/fcb.h"
#include "fcb_priv.h"

int
fcb_getnext_in_area(struct fcb *fcb, struct fcb_entry *loc)
{
   209e0:	b570      	push	{r4, r5, r6, lr}
   209e2:	4606      	mov	r6, r0
   209e4:	460d      	mov	r5, r1
    int rc;

    rc = fcb_elem_info(fcb, loc);
   209e6:	f7ff ffd2 	bl	2098e <fcb_elem_info>
    if (rc == 0 || rc == FCB_ERR_CRC) {
   209ea:	b170      	cbz	r0, 20a0a <fcb_getnext_in_area+0x2a>
   209ec:	f110 0f06 	cmn.w	r0, #6
   209f0:	d00b      	beq.n	20a0a <fcb_getnext_in_area+0x2a>
                break;
            }
        } while (rc == FCB_ERR_CRC);
    }
    return rc;
}
   209f2:	bd70      	pop	{r4, r5, r6, pc}
   209f4:	4259      	negs	r1, r3
   209f6:	400b      	ands	r3, r1
              fcb_len_in_flash(fcb, loc->fe_data_len) +
   209f8:	4413      	add	r3, r2
            loc->fe_elem_off = loc->fe_data_off +
   209fa:	606b      	str	r3, [r5, #4]
            rc = fcb_elem_info(fcb, loc);
   209fc:	4629      	mov	r1, r5
   209fe:	4630      	mov	r0, r6
   20a00:	f7ff ffc5 	bl	2098e <fcb_elem_info>
            if (rc != FCB_ERR_CRC) {
   20a04:	f110 0f06 	cmn.w	r0, #6
   20a08:	d1f3      	bne.n	209f2 <fcb_getnext_in_area+0x12>
            loc->fe_elem_off = loc->fe_data_off +
   20a0a:	68ac      	ldr	r4, [r5, #8]
              fcb_len_in_flash(fcb, loc->fe_data_len) +
   20a0c:	89aa      	ldrh	r2, [r5, #12]
    if (fcb->f_align <= 1) {
   20a0e:	f896 302e 	ldrb.w	r3, [r6, #46]	; 0x2e
   20a12:	2b01      	cmp	r3, #1
   20a14:	d903      	bls.n	20a1e <fcb_getnext_in_area+0x3e>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   20a16:	1e59      	subs	r1, r3, #1
   20a18:	440a      	add	r2, r1
   20a1a:	4259      	negs	r1, r3
   20a1c:	400a      	ands	r2, r1
            loc->fe_elem_off = loc->fe_data_off +
   20a1e:	4422      	add	r2, r4
    if (fcb->f_align <= 1) {
   20a20:	2b01      	cmp	r3, #1
   20a22:	d8e7      	bhi.n	209f4 <fcb_getnext_in_area+0x14>
        return len;
   20a24:	2301      	movs	r3, #1
   20a26:	e7e7      	b.n	209f8 <fcb_getnext_in_area+0x18>

00020a28 <fcb_getnext_area>:

struct flash_area *
fcb_getnext_area(struct fcb *fcb, struct flash_area *fap)
{
   20a28:	4603      	mov	r3, r0
    fap++;
   20a2a:	310c      	adds	r1, #12
    if (fap >= &fcb->f_sectors[fcb->f_sector_cnt]) {
   20a2c:	6880      	ldr	r0, [r0, #8]
   20a2e:	795b      	ldrb	r3, [r3, #5]
   20a30:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   20a34:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   20a38:	428b      	cmp	r3, r1
   20a3a:	d900      	bls.n	20a3e <fcb_getnext_area+0x16>
    fap++;
   20a3c:	4608      	mov	r0, r1
        fap = &fcb->f_sectors[0];
    }
    return fap;
}
   20a3e:	4770      	bx	lr

00020a40 <fcb_getnext_nolock>:

int
fcb_getnext_nolock(struct fcb *fcb, struct fcb_entry *loc)
{
   20a40:	b538      	push	{r3, r4, r5, lr}
   20a42:	4605      	mov	r5, r0
   20a44:	460c      	mov	r4, r1
    int rc;

    if (loc->fe_area == NULL) {
   20a46:	680b      	ldr	r3, [r1, #0]
   20a48:	b313      	cbz	r3, 20a90 <fcb_getnext_nolock+0x50>
        /*
         * Find the first one we have in flash.
         */
        loc->fe_area = fcb->f_oldest;
    }
    if (loc->fe_elem_off == 0) {
   20a4a:	6863      	ldr	r3, [r4, #4]
   20a4c:	bb1b      	cbnz	r3, 20a96 <fcb_getnext_nolock+0x56>
        /*
         * If offset is zero, we serve the first entry from the area.
         */
        loc->fe_elem_off = sizeof(struct fcb_disk_area);
   20a4e:	2308      	movs	r3, #8
   20a50:	6063      	str	r3, [r4, #4]
        rc = fcb_elem_info(fcb, loc);
   20a52:	4621      	mov	r1, r4
   20a54:	4628      	mov	r0, r5
   20a56:	f7ff ff9a 	bl	2098e <fcb_elem_info>
   20a5a:	4603      	mov	r3, r0
    } else {
        rc = fcb_getnext_in_area(fcb, loc);
    }
    switch (rc) {
   20a5c:	f113 0f06 	cmn.w	r3, #6
   20a60:	d01f      	beq.n	20aa2 <fcb_getnext_nolock+0x62>
   20a62:	b19b      	cbz	r3, 20a8c <fcb_getnext_nolock+0x4c>
        if (rc != FCB_ERR_CRC) {
            /*
             * Moving to next sector.
             */
next_sector:
            if (loc->fe_area == fcb->f_active.fe_area) {
   20a64:	6821      	ldr	r1, [r4, #0]
   20a66:	69eb      	ldr	r3, [r5, #28]
   20a68:	4299      	cmp	r1, r3
   20a6a:	d02a      	beq.n	20ac2 <fcb_getnext_nolock+0x82>
                return FCB_ERR_NOVAR;
            }
            loc->fe_area = fcb_getnext_area(fcb, loc->fe_area);
   20a6c:	4628      	mov	r0, r5
   20a6e:	f7ff ffdb 	bl	20a28 <fcb_getnext_area>
   20a72:	6020      	str	r0, [r4, #0]
            loc->fe_elem_off = sizeof(struct fcb_disk_area);
   20a74:	2308      	movs	r3, #8
   20a76:	6063      	str	r3, [r4, #4]
            rc = fcb_elem_info(fcb, loc);
   20a78:	4621      	mov	r1, r4
   20a7a:	4628      	mov	r0, r5
   20a7c:	f7ff ff87 	bl	2098e <fcb_elem_info>
   20a80:	4603      	mov	r3, r0
            switch (rc) {
   20a82:	f110 0f06 	cmn.w	r0, #6
   20a86:	d00c      	beq.n	20aa2 <fcb_getnext_nolock+0x62>
   20a88:	2800      	cmp	r0, #0
   20a8a:	d1eb      	bne.n	20a64 <fcb_getnext_nolock+0x24>
            }
        }
    }

    return 0;
}
   20a8c:	4618      	mov	r0, r3
   20a8e:	bd38      	pop	{r3, r4, r5, pc}
        loc->fe_area = fcb->f_oldest;
   20a90:	6983      	ldr	r3, [r0, #24]
   20a92:	600b      	str	r3, [r1, #0]
   20a94:	e7d9      	b.n	20a4a <fcb_getnext_nolock+0xa>
        rc = fcb_getnext_in_area(fcb, loc);
   20a96:	4621      	mov	r1, r4
   20a98:	4628      	mov	r0, r5
   20a9a:	f7ff ffa1 	bl	209e0 <fcb_getnext_in_area>
   20a9e:	4603      	mov	r3, r0
   20aa0:	e7dc      	b.n	20a5c <fcb_getnext_nolock+0x1c>
    while (rc == FCB_ERR_CRC) {
   20aa2:	f113 0f06 	cmn.w	r3, #6
   20aa6:	d10a      	bne.n	20abe <fcb_getnext_nolock+0x7e>
        rc = fcb_getnext_in_area(fcb, loc);
   20aa8:	4621      	mov	r1, r4
   20aaa:	4628      	mov	r0, r5
   20aac:	f7ff ff98 	bl	209e0 <fcb_getnext_in_area>
        if (rc == 0) {
   20ab0:	4603      	mov	r3, r0
   20ab2:	2800      	cmp	r0, #0
   20ab4:	d0ea      	beq.n	20a8c <fcb_getnext_nolock+0x4c>
        if (rc != FCB_ERR_CRC) {
   20ab6:	f110 0f06 	cmn.w	r0, #6
   20aba:	d0f2      	beq.n	20aa2 <fcb_getnext_nolock+0x62>
next_sector:
   20abc:	e7d2      	b.n	20a64 <fcb_getnext_nolock+0x24>
    return 0;
   20abe:	2300      	movs	r3, #0
   20ac0:	e7e4      	b.n	20a8c <fcb_getnext_nolock+0x4c>
                return FCB_ERR_NOVAR;
   20ac2:	f06f 0302 	mvn.w	r3, #2
   20ac6:	e7e1      	b.n	20a8c <fcb_getnext_nolock+0x4c>

00020ac8 <fcb_getnext>:

int
fcb_getnext(struct fcb *fcb, struct fcb_entry *loc)
{
   20ac8:	b570      	push	{r4, r5, r6, lr}
   20aca:	4604      	mov	r4, r0
   20acc:	460d      	mov	r5, r1
    int rc;

    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   20ace:	f100 060c 	add.w	r6, r0, #12
   20ad2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20ad6:	4630      	mov	r0, r6
   20ad8:	f7ea f82a 	bl	ab30 <os_mutex_pend>
    if (rc && rc != OS_NOT_STARTED) {
   20adc:	b108      	cbz	r0, 20ae2 <fcb_getnext+0x1a>
   20ade:	2809      	cmp	r0, #9
   20ae0:	d109      	bne.n	20af6 <fcb_getnext+0x2e>
        return FCB_ERR_ARGS;
    }
    rc = fcb_getnext_nolock(fcb, loc);
   20ae2:	4629      	mov	r1, r5
   20ae4:	4620      	mov	r0, r4
   20ae6:	f7ff ffab 	bl	20a40 <fcb_getnext_nolock>
   20aea:	4604      	mov	r4, r0
    os_mutex_release(&fcb->f_mtx);
   20aec:	4630      	mov	r0, r6
   20aee:	f7e9 ffc3 	bl	aa78 <os_mutex_release>

    return rc;
}
   20af2:	4620      	mov	r0, r4
   20af4:	bd70      	pop	{r4, r5, r6, pc}
        return FCB_ERR_ARGS;
   20af6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   20afa:	e7fa      	b.n	20af2 <fcb_getnext+0x2a>

00020afc <fcb_rotate>:
#include "fcb/fcb.h"
#include "fcb_priv.h"

int
fcb_rotate(struct fcb *fcb)
{
   20afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20afe:	4604      	mov	r4, r0
    struct flash_area *fap;
    int rc = 0;

    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   20b00:	f100 050c 	add.w	r5, r0, #12
   20b04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20b08:	4628      	mov	r0, r5
   20b0a:	f7ea f811 	bl	ab30 <os_mutex_pend>
    if (rc && rc != OS_NOT_STARTED) {
   20b0e:	b108      	cbz	r0, 20b14 <fcb_rotate+0x18>
   20b10:	2809      	cmp	r0, #9
   20b12:	d12c      	bne.n	20b6e <fcb_rotate+0x72>
        return FCB_ERR_ARGS;
    }

    rc = flash_area_erase(fcb->f_oldest, 0, fcb->f_oldest->fa_size);
   20b14:	69a0      	ldr	r0, [r4, #24]
   20b16:	6882      	ldr	r2, [r0, #8]
   20b18:	2100      	movs	r1, #0
   20b1a:	f7fd fb6b 	bl	1e1f4 <flash_area_erase>
    if (rc) {
   20b1e:	4606      	mov	r6, r0
   20b20:	bb10      	cbnz	r0, 20b68 <fcb_rotate+0x6c>
        rc = FCB_ERR_FLASH;
        goto out;
    }
    if (fcb->f_oldest == fcb->f_active.fe_area) {
   20b22:	69a1      	ldr	r1, [r4, #24]
   20b24:	69e3      	ldr	r3, [r4, #28]
   20b26:	4299      	cmp	r1, r3
   20b28:	d009      	beq.n	20b3e <fcb_rotate+0x42>
        }
        fcb->f_active.fe_area = fap;
        fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
        fcb->f_active_id++;
    }
    fcb->f_oldest = fcb_getnext_area(fcb, fcb->f_oldest);
   20b2a:	69a1      	ldr	r1, [r4, #24]
   20b2c:	4620      	mov	r0, r4
   20b2e:	f7ff ff7b 	bl	20a28 <fcb_getnext_area>
   20b32:	61a0      	str	r0, [r4, #24]
out:
    os_mutex_release(&fcb->f_mtx);
   20b34:	4628      	mov	r0, r5
   20b36:	f7e9 ff9f 	bl	aa78 <os_mutex_release>
    return rc;
}
   20b3a:	4630      	mov	r0, r6
   20b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        fap = fcb_getnext_area(fcb, fcb->f_oldest);
   20b3e:	4620      	mov	r0, r4
   20b40:	f7ff ff72 	bl	20a28 <fcb_getnext_area>
   20b44:	4607      	mov	r7, r0
        rc = fcb_sector_hdr_init(fcb, fap, fcb->f_active_id + 1);
   20b46:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   20b48:	3201      	adds	r2, #1
   20b4a:	b292      	uxth	r2, r2
   20b4c:	4601      	mov	r1, r0
   20b4e:	4620      	mov	r0, r4
   20b50:	f7ff fd18 	bl	20584 <fcb_sector_hdr_init>
        if (rc) {
   20b54:	4606      	mov	r6, r0
   20b56:	2800      	cmp	r0, #0
   20b58:	d1ec      	bne.n	20b34 <fcb_rotate+0x38>
        fcb->f_active.fe_area = fap;
   20b5a:	61e7      	str	r7, [r4, #28]
        fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   20b5c:	2308      	movs	r3, #8
   20b5e:	6223      	str	r3, [r4, #32]
        fcb->f_active_id++;
   20b60:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   20b62:	3301      	adds	r3, #1
   20b64:	85a3      	strh	r3, [r4, #44]	; 0x2c
   20b66:	e7e0      	b.n	20b2a <fcb_rotate+0x2e>
        rc = FCB_ERR_FLASH;
   20b68:	f06f 0601 	mvn.w	r6, #1
   20b6c:	e7e2      	b.n	20b34 <fcb_rotate+0x38>
        return FCB_ERR_ARGS;
   20b6e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   20b72:	e7e2      	b.n	20b3a <fcb_rotate+0x3e>

00020b74 <fcb_walk>:
 * Call 'cb' for every element in flash circular buffer. If fap is specified,
 * only elements with that flash_area are reported.
 */
int
fcb_walk(struct fcb *fcb, struct flash_area *fap, fcb_walk_cb cb, void *cb_arg)
{
   20b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20b78:	b084      	sub	sp, #16
   20b7a:	4606      	mov	r6, r0
   20b7c:	460d      	mov	r5, r1
   20b7e:	4617      	mov	r7, r2
   20b80:	4698      	mov	r8, r3
    struct fcb_entry loc;
    int rc;

    loc.fe_area = fap;
   20b82:	9100      	str	r1, [sp, #0]
    loc.fe_elem_off = 0;
   20b84:	2300      	movs	r3, #0
   20b86:	9301      	str	r3, [sp, #4]

    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   20b88:	f100 040c 	add.w	r4, r0, #12
   20b8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20b90:	4620      	mov	r0, r4
   20b92:	f7e9 ffcd 	bl	ab30 <os_mutex_pend>
    if (rc && rc != OS_NOT_STARTED) {
   20b96:	b170      	cbz	r0, 20bb6 <fcb_walk+0x42>
   20b98:	2809      	cmp	r0, #9
   20b9a:	d00c      	beq.n	20bb6 <fcb_walk+0x42>
        return FCB_ERR_ARGS;
   20b9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20ba0:	e01e      	b.n	20be0 <fcb_walk+0x6c>
    while ((rc = fcb_getnext_nolock(fcb, &loc)) != FCB_ERR_NOVAR) {
        os_mutex_release(&fcb->f_mtx);
        if (fap && loc.fe_area != fap) {
            return 0;
        }
        rc = cb(&loc, cb_arg);
   20ba2:	4641      	mov	r1, r8
   20ba4:	4668      	mov	r0, sp
   20ba6:	47b8      	blx	r7
        if (rc) {
   20ba8:	4603      	mov	r3, r0
   20baa:	b9c8      	cbnz	r0, 20be0 <fcb_walk+0x6c>
            return rc;
        }
        os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   20bac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20bb0:	4620      	mov	r0, r4
   20bb2:	f7e9 ffbd 	bl	ab30 <os_mutex_pend>
    while ((rc = fcb_getnext_nolock(fcb, &loc)) != FCB_ERR_NOVAR) {
   20bb6:	4669      	mov	r1, sp
   20bb8:	4630      	mov	r0, r6
   20bba:	f7ff ff41 	bl	20a40 <fcb_getnext_nolock>
   20bbe:	f110 0f03 	cmn.w	r0, #3
   20bc2:	d009      	beq.n	20bd8 <fcb_walk+0x64>
        os_mutex_release(&fcb->f_mtx);
   20bc4:	4620      	mov	r0, r4
   20bc6:	f7e9 ff57 	bl	aa78 <os_mutex_release>
        if (fap && loc.fe_area != fap) {
   20bca:	2d00      	cmp	r5, #0
   20bcc:	d0e9      	beq.n	20ba2 <fcb_walk+0x2e>
   20bce:	9800      	ldr	r0, [sp, #0]
   20bd0:	42a8      	cmp	r0, r5
   20bd2:	d0e6      	beq.n	20ba2 <fcb_walk+0x2e>
            return 0;
   20bd4:	2300      	movs	r3, #0
   20bd6:	e003      	b.n	20be0 <fcb_walk+0x6c>
    }
    os_mutex_release(&fcb->f_mtx);
   20bd8:	4620      	mov	r0, r4
   20bda:	f7e9 ff4d 	bl	aa78 <os_mutex_release>
    return 0;
   20bde:	2300      	movs	r3, #0
}
   20be0:	4618      	mov	r0, r3
   20be2:	b004      	add	sp, #16
   20be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00020be8 <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
   20be8:	6843      	ldr	r3, [r0, #4]
   20bea:	428b      	cmp	r3, r1
   20bec:	d805      	bhi.n	20bfa <hal_flash_check_addr+0x12>
   20bee:	6882      	ldr	r2, [r0, #8]
   20bf0:	4413      	add	r3, r2
   20bf2:	428b      	cmp	r3, r1
   20bf4:	d304      	bcc.n	20c00 <hal_flash_check_addr+0x18>
        return SYS_EINVAL;
    }
    return 0;
   20bf6:	2000      	movs	r0, #0
   20bf8:	4770      	bx	lr
        return SYS_EINVAL;
   20bfa:	f06f 0001 	mvn.w	r0, #1
   20bfe:	4770      	bx	lr
   20c00:	f06f 0001 	mvn.w	r0, #1
}
   20c04:	4770      	bx	lr

00020c06 <hal_flash_init>:
{
   20c06:	b538      	push	{r3, r4, r5, lr}
    int rc = 0;
   20c08:	2500      	movs	r5, #0
    for (i = 0; ; i++) {
   20c0a:	462c      	mov	r4, r5
   20c0c:	e001      	b.n	20c12 <hal_flash_init+0xc>
   20c0e:	3401      	adds	r4, #1
   20c10:	b2e4      	uxtb	r4, r4
        hf = hal_bsp_flash_dev(i);
   20c12:	4620      	mov	r0, r4
   20c14:	f7f2 fe68 	bl	138e8 <hal_bsp_flash_dev>
        if (!hf) {
   20c18:	b138      	cbz	r0, 20c2a <hal_flash_init+0x24>
        if (hf->hf_itf->hff_init(hf)) {
   20c1a:	6802      	ldr	r2, [r0, #0]
   20c1c:	6952      	ldr	r2, [r2, #20]
   20c1e:	4790      	blx	r2
   20c20:	2800      	cmp	r0, #0
   20c22:	d0f4      	beq.n	20c0e <hal_flash_init+0x8>
            rc = SYS_EIO;
   20c24:	f06f 0504 	mvn.w	r5, #4
   20c28:	e7f1      	b.n	20c0e <hal_flash_init+0x8>
}
   20c2a:	4628      	mov	r0, r5
   20c2c:	bd38      	pop	{r3, r4, r5, pc}

00020c2e <hal_flash_align>:
{
   20c2e:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
   20c30:	f7f2 fe5a 	bl	138e8 <hal_bsp_flash_dev>
    if (!hf) {
   20c34:	b108      	cbz	r0, 20c3a <hal_flash_align+0xc>
    return hf->hf_align;
   20c36:	7c00      	ldrb	r0, [r0, #16]
}
   20c38:	bd08      	pop	{r3, pc}
        return 1;
   20c3a:	2001      	movs	r0, #1
   20c3c:	e7fc      	b.n	20c38 <hal_flash_align+0xa>

00020c3e <hal_flash_erased_val>:
{
   20c3e:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
   20c40:	f7f2 fe52 	bl	138e8 <hal_bsp_flash_dev>
    if (!hf) {
   20c44:	b108      	cbz	r0, 20c4a <hal_flash_erased_val+0xc>
    return hf->hf_erased_val;
   20c46:	7d00      	ldrb	r0, [r0, #20]
}
   20c48:	bd08      	pop	{r3, pc}
        return 1;
   20c4a:	2001      	movs	r0, #1
   20c4c:	e7fc      	b.n	20c48 <hal_flash_erased_val+0xa>

00020c4e <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
   20c4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20c52:	460c      	mov	r4, r1
   20c54:	4617      	mov	r7, r2
   20c56:	461d      	mov	r5, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   20c58:	f7f2 fe46 	bl	138e8 <hal_bsp_flash_dev>
    if (!hf) {
   20c5c:	b1a0      	cbz	r0, 20c88 <hal_flash_read+0x3a>
   20c5e:	4606      	mov	r6, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   20c60:	4621      	mov	r1, r4
   20c62:	f7ff ffc1 	bl	20be8 <hal_flash_check_addr>
   20c66:	b990      	cbnz	r0, 20c8e <hal_flash_read+0x40>
      hal_flash_check_addr(hf, address + num_bytes)) {
   20c68:	1961      	adds	r1, r4, r5
   20c6a:	4630      	mov	r0, r6
   20c6c:	f7ff ffbc 	bl	20be8 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   20c70:	b980      	cbnz	r0, 20c94 <hal_flash_read+0x46>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
   20c72:	6833      	ldr	r3, [r6, #0]
   20c74:	f8d3 8000 	ldr.w	r8, [r3]
   20c78:	462b      	mov	r3, r5
   20c7a:	463a      	mov	r2, r7
   20c7c:	4621      	mov	r1, r4
   20c7e:	4630      	mov	r0, r6
   20c80:	47c0      	blx	r8
    if (rc != 0) {
   20c82:	b950      	cbnz	r0, 20c9a <hal_flash_read+0x4c>
        return SYS_EIO;
    }

    return 0;
}
   20c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
   20c88:	f06f 0001 	mvn.w	r0, #1
   20c8c:	e7fa      	b.n	20c84 <hal_flash_read+0x36>
        return SYS_EINVAL;
   20c8e:	f06f 0001 	mvn.w	r0, #1
   20c92:	e7f7      	b.n	20c84 <hal_flash_read+0x36>
   20c94:	f06f 0001 	mvn.w	r0, #1
   20c98:	e7f4      	b.n	20c84 <hal_flash_read+0x36>
        return SYS_EIO;
   20c9a:	f06f 0004 	mvn.w	r0, #4
   20c9e:	e7f1      	b.n	20c84 <hal_flash_read+0x36>

00020ca0 <hal_flash_write>:
#endif

int
hal_flash_write(uint8_t id, uint32_t address, const void *src,
  uint32_t num_bytes)
{
   20ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20ca4:	4604      	mov	r4, r0
   20ca6:	460d      	mov	r5, r1
   20ca8:	4690      	mov	r8, r2
   20caa:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   20cac:	f7f2 fe1c 	bl	138e8 <hal_bsp_flash_dev>
    if (!hf) {
   20cb0:	b1e8      	cbz	r0, 20cee <hal_flash_write+0x4e>
   20cb2:	4607      	mov	r7, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   20cb4:	4629      	mov	r1, r5
   20cb6:	f7ff ff97 	bl	20be8 <hal_flash_check_addr>
   20cba:	b9d8      	cbnz	r0, 20cf4 <hal_flash_write+0x54>
      hal_flash_check_addr(hf, address + num_bytes)) {
   20cbc:	19a9      	adds	r1, r5, r6
   20cbe:	4638      	mov	r0, r7
   20cc0:	f7ff ff92 	bl	20be8 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   20cc4:	b9c8      	cbnz	r0, 20cfa <hal_flash_write+0x5a>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
   20cc6:	08e3      	lsrs	r3, r4, #3
   20cc8:	4a10      	ldr	r2, [pc, #64]	; (20d0c <hal_flash_write+0x6c>)
   20cca:	5cd0      	ldrb	r0, [r2, r3]
   20ccc:	f004 0407 	and.w	r4, r4, #7
   20cd0:	fa40 f404 	asr.w	r4, r0, r4
   20cd4:	f014 0f01 	tst.w	r4, #1
   20cd8:	d112      	bne.n	20d00 <hal_flash_write+0x60>
        return SYS_EACCES;
    }

    rc = hf->hf_itf->hff_write(hf, address, src, num_bytes);
   20cda:	683b      	ldr	r3, [r7, #0]
   20cdc:	685c      	ldr	r4, [r3, #4]
   20cde:	4633      	mov	r3, r6
   20ce0:	4642      	mov	r2, r8
   20ce2:	4629      	mov	r1, r5
   20ce4:	4638      	mov	r0, r7
   20ce6:	47a0      	blx	r4
    if (rc != 0) {
   20ce8:	b968      	cbnz	r0, 20d06 <hal_flash_write+0x66>
#if MYNEWT_VAL(HAL_FLASH_VERIFY_WRITES)
    assert(hal_flash_cmp(hf, address, src, num_bytes) == 0);
#endif

    return 0;
}
   20cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
   20cee:	f06f 0001 	mvn.w	r0, #1
   20cf2:	e7fa      	b.n	20cea <hal_flash_write+0x4a>
        return SYS_EINVAL;
   20cf4:	f06f 0001 	mvn.w	r0, #1
   20cf8:	e7f7      	b.n	20cea <hal_flash_write+0x4a>
   20cfa:	f06f 0001 	mvn.w	r0, #1
   20cfe:	e7f4      	b.n	20cea <hal_flash_write+0x4a>
        return SYS_EACCES;
   20d00:	f06f 0006 	mvn.w	r0, #6
   20d04:	e7f1      	b.n	20cea <hal_flash_write+0x4a>
        return SYS_EIO;
   20d06:	f06f 0004 	mvn.w	r0, #4
   20d0a:	e7ee      	b.n	20cea <hal_flash_write+0x4a>
   20d0c:	20004aa4 	.word	0x20004aa4

00020d10 <hal_flash_erase>:
    return 0;
}

int
hal_flash_erase(uint8_t id, uint32_t address, uint32_t num_bytes)
{
   20d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20d14:	b082      	sub	sp, #8
   20d16:	4605      	mov	r5, r0
   20d18:	460e      	mov	r6, r1
   20d1a:	4691      	mov	r9, r2
    uint32_t end;
    uint32_t end_area;
    int i;
    int rc;

    hf = hal_bsp_flash_dev(id);
   20d1c:	f7f2 fde4 	bl	138e8 <hal_bsp_flash_dev>
    if (!hf) {
   20d20:	2800      	cmp	r0, #0
   20d22:	d049      	beq.n	20db8 <hal_flash_erase+0xa8>
   20d24:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   20d26:	4631      	mov	r1, r6
   20d28:	f7ff ff5e 	bl	20be8 <hal_flash_check_addr>
   20d2c:	2800      	cmp	r0, #0
   20d2e:	d146      	bne.n	20dbe <hal_flash_erase+0xae>
      hal_flash_check_addr(hf, address + num_bytes)) {
   20d30:	eb06 0809 	add.w	r8, r6, r9
   20d34:	4641      	mov	r1, r8
   20d36:	4620      	mov	r0, r4
   20d38:	f7ff ff56 	bl	20be8 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   20d3c:	2800      	cmp	r0, #0
   20d3e:	d141      	bne.n	20dc4 <hal_flash_erase+0xb4>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
   20d40:	08eb      	lsrs	r3, r5, #3
   20d42:	4a25      	ldr	r2, [pc, #148]	; (20dd8 <hal_flash_erase+0xc8>)
   20d44:	5cd7      	ldrb	r7, [r2, r3]
   20d46:	f005 0507 	and.w	r5, r5, #7
   20d4a:	fa47 f505 	asr.w	r5, r7, r5
   20d4e:	f015 0a01 	ands.w	sl, r5, #1
   20d52:	d13a      	bne.n	20dca <hal_flash_erase+0xba>
        return SYS_EACCES;
    }

    end = address + num_bytes;
    if (end <= address) {
   20d54:	45b0      	cmp	r8, r6
   20d56:	d93b      	bls.n	20dd0 <hal_flash_erase+0xc0>
         * Check for wrap-around.
         */
        return SYS_EINVAL;
    }

    if (hf->hf_itf->hff_erase) {
   20d58:	6823      	ldr	r3, [r4, #0]
   20d5a:	699b      	ldr	r3, [r3, #24]
   20d5c:	b353      	cbz	r3, 20db4 <hal_flash_erase+0xa4>
        hf->hf_itf->hff_erase(hf, address, num_bytes);
   20d5e:	464a      	mov	r2, r9
   20d60:	4631      	mov	r1, r6
   20d62:	4620      	mov	r0, r4
   20d64:	4798      	blx	r3
#endif
            }
        }
    }
    return 0;
}
   20d66:	4650      	mov	r0, sl
   20d68:	b002      	add	sp, #8
   20d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            assert(rc == 0);
   20d6e:	2300      	movs	r3, #0
   20d70:	461a      	mov	r2, r3
   20d72:	4619      	mov	r1, r3
   20d74:	4618      	mov	r0, r3
   20d76:	f7e8 f969 	bl	904c <__assert_func>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
   20d7a:	3501      	adds	r5, #1
   20d7c:	68e3      	ldr	r3, [r4, #12]
   20d7e:	42ab      	cmp	r3, r5
   20d80:	ddf1      	ble.n	20d66 <hal_flash_erase+0x56>
            rc = hf->hf_itf->hff_sector_info(hf, i, &start, &size);
   20d82:	6823      	ldr	r3, [r4, #0]
   20d84:	68df      	ldr	r7, [r3, #12]
   20d86:	466b      	mov	r3, sp
   20d88:	aa01      	add	r2, sp, #4
   20d8a:	4629      	mov	r1, r5
   20d8c:	4620      	mov	r0, r4
   20d8e:	47b8      	blx	r7
            assert(rc == 0);
   20d90:	2800      	cmp	r0, #0
   20d92:	d1ec      	bne.n	20d6e <hal_flash_erase+0x5e>
            end_area = start + size;
   20d94:	9901      	ldr	r1, [sp, #4]
   20d96:	9b00      	ldr	r3, [sp, #0]
   20d98:	440b      	add	r3, r1
            if (address < end_area && end > start) {
   20d9a:	429e      	cmp	r6, r3
   20d9c:	d2ed      	bcs.n	20d7a <hal_flash_erase+0x6a>
   20d9e:	4588      	cmp	r8, r1
   20da0:	d9eb      	bls.n	20d7a <hal_flash_erase+0x6a>
                if (hf->hf_itf->hff_erase_sector(hf, start)) {
   20da2:	6823      	ldr	r3, [r4, #0]
   20da4:	689b      	ldr	r3, [r3, #8]
   20da6:	4620      	mov	r0, r4
   20da8:	4798      	blx	r3
   20daa:	2800      	cmp	r0, #0
   20dac:	d0e5      	beq.n	20d7a <hal_flash_erase+0x6a>
                    return SYS_EIO;
   20dae:	f06f 0a04 	mvn.w	sl, #4
   20db2:	e7d8      	b.n	20d66 <hal_flash_erase+0x56>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
   20db4:	4655      	mov	r5, sl
   20db6:	e7e1      	b.n	20d7c <hal_flash_erase+0x6c>
        return SYS_EINVAL;
   20db8:	f06f 0a01 	mvn.w	sl, #1
   20dbc:	e7d3      	b.n	20d66 <hal_flash_erase+0x56>
        return SYS_EINVAL;
   20dbe:	f06f 0a01 	mvn.w	sl, #1
   20dc2:	e7d0      	b.n	20d66 <hal_flash_erase+0x56>
   20dc4:	f06f 0a01 	mvn.w	sl, #1
   20dc8:	e7cd      	b.n	20d66 <hal_flash_erase+0x56>
        return SYS_EACCES;
   20dca:	f06f 0a06 	mvn.w	sl, #6
   20dce:	e7ca      	b.n	20d66 <hal_flash_erase+0x56>
        return SYS_EINVAL;
   20dd0:	f06f 0a01 	mvn.w	sl, #1
   20dd4:	e7c7      	b.n	20d66 <hal_flash_erase+0x56>
   20dd6:	bf00      	nop
   20dd8:	20004aa4 	.word	0x20004aa4

00020ddc <hal_flash_is_erased>:

int
hal_flash_is_erased(const struct hal_flash *hf, uint32_t address, void *dst,
        uint32_t num_bytes)
{
   20ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20dde:	4604      	mov	r4, r0
   20de0:	4616      	mov	r6, r2
   20de2:	461d      	mov	r5, r3
    uint8_t *buf;
    int rc;

    buf = dst;

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
   20de4:	6807      	ldr	r7, [r0, #0]
   20de6:	683f      	ldr	r7, [r7, #0]
   20de8:	47b8      	blx	r7
    if (rc != 0) {
   20dea:	b968      	cbnz	r0, 20e08 <hal_flash_is_erased+0x2c>
        return SYS_EIO;
    }

    for (i = 0; i < num_bytes; i++) {
   20dec:	2100      	movs	r1, #0
   20dee:	e000      	b.n	20df2 <hal_flash_is_erased+0x16>
   20df0:	3101      	adds	r1, #1
   20df2:	42a9      	cmp	r1, r5
   20df4:	d206      	bcs.n	20e04 <hal_flash_is_erased+0x28>
        if (buf[i] != hf->hf_erased_val) {
   20df6:	f816 e001 	ldrb.w	lr, [r6, r1]
   20dfa:	f894 c014 	ldrb.w	ip, [r4, #20]
   20dfe:	45e6      	cmp	lr, ip
   20e00:	d0f6      	beq.n	20df0 <hal_flash_is_erased+0x14>
   20e02:	e000      	b.n	20e06 <hal_flash_is_erased+0x2a>
            return 0;
        }
    }
    return 1;
   20e04:	2001      	movs	r0, #1
}
   20e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return SYS_EIO;
   20e08:	f06f 0004 	mvn.w	r0, #4
   20e0c:	e7fb      	b.n	20e06 <hal_flash_is_erased+0x2a>

00020e0e <hal_flash_isempty>:

int
hal_flash_isempty(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
   20e0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20e12:	460c      	mov	r4, r1
   20e14:	4690      	mov	r8, r2
   20e16:	461d      	mov	r5, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   20e18:	f7f2 fd66 	bl	138e8 <hal_bsp_flash_dev>
    if (!hf) {
   20e1c:	b1f8      	cbz	r0, 20e5e <hal_flash_isempty+0x50>
   20e1e:	4606      	mov	r6, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   20e20:	4621      	mov	r1, r4
   20e22:	f7ff fee1 	bl	20be8 <hal_flash_check_addr>
   20e26:	b9e8      	cbnz	r0, 20e64 <hal_flash_isempty+0x56>
      hal_flash_check_addr(hf, address + num_bytes)) {
   20e28:	1961      	adds	r1, r4, r5
   20e2a:	4630      	mov	r0, r6
   20e2c:	f7ff fedc 	bl	20be8 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   20e30:	b9d8      	cbnz	r0, 20e6a <hal_flash_isempty+0x5c>
        return SYS_EINVAL;
    }
    if (hf->hf_itf->hff_is_empty) {
   20e32:	6833      	ldr	r3, [r6, #0]
   20e34:	691f      	ldr	r7, [r3, #16]
   20e36:	b15f      	cbz	r7, 20e50 <hal_flash_isempty+0x42>
        rc = hf->hf_itf->hff_is_empty(hf, address, dst, num_bytes);
   20e38:	462b      	mov	r3, r5
   20e3a:	4642      	mov	r2, r8
   20e3c:	4621      	mov	r1, r4
   20e3e:	4630      	mov	r0, r6
   20e40:	47b8      	blx	r7
        if (rc < 0) {
   20e42:	2800      	cmp	r0, #0
   20e44:	db01      	blt.n	20e4a <hal_flash_isempty+0x3c>
            return rc;
        }
    } else {
        return hal_flash_is_erased(hf, address, dst, num_bytes);
    }
}
   20e46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return SYS_EIO;
   20e4a:	f06f 0004 	mvn.w	r0, #4
   20e4e:	e7fa      	b.n	20e46 <hal_flash_isempty+0x38>
        return hal_flash_is_erased(hf, address, dst, num_bytes);
   20e50:	462b      	mov	r3, r5
   20e52:	4642      	mov	r2, r8
   20e54:	4621      	mov	r1, r4
   20e56:	4630      	mov	r0, r6
   20e58:	f7ff ffc0 	bl	20ddc <hal_flash_is_erased>
   20e5c:	e7f3      	b.n	20e46 <hal_flash_isempty+0x38>
        return SYS_EINVAL;
   20e5e:	f06f 0001 	mvn.w	r0, #1
   20e62:	e7f0      	b.n	20e46 <hal_flash_isempty+0x38>
        return SYS_EINVAL;
   20e64:	f06f 0001 	mvn.w	r0, #1
   20e68:	e7ed      	b.n	20e46 <hal_flash_isempty+0x38>
   20e6a:	f06f 0001 	mvn.w	r0, #1
   20e6e:	e7ea      	b.n	20e46 <hal_flash_isempty+0x38>

00020e70 <hal_flash_isempty_no_buf>:

int
hal_flash_isempty_no_buf(uint8_t id, uint32_t address, uint32_t num_bytes)
{
   20e70:	b5f0      	push	{r4, r5, r6, r7, lr}
   20e72:	b085      	sub	sp, #20
   20e74:	4607      	mov	r7, r0
   20e76:	460e      	mov	r6, r1
   20e78:	4615      	mov	r5, r2
    uint32_t blksz;
    uint32_t rem;
    uint32_t off;
    int empty;

    for (off = 0; off < num_bytes; off += sizeof buf) {
   20e7a:	2400      	movs	r4, #0
   20e7c:	e007      	b.n	20e8e <hal_flash_isempty_no_buf+0x1e>
        blksz = sizeof buf;
        if (blksz > rem) {
            blksz = rem;
        }

        empty = hal_flash_isempty(id, address + off, buf, blksz);
   20e7e:	466a      	mov	r2, sp
   20e80:	19a1      	adds	r1, r4, r6
   20e82:	4638      	mov	r0, r7
   20e84:	f7ff ffc3 	bl	20e0e <hal_flash_isempty>
        if (empty != 1) {
   20e88:	2801      	cmp	r0, #1
   20e8a:	d108      	bne.n	20e9e <hal_flash_isempty_no_buf+0x2e>
    for (off = 0; off < num_bytes; off += sizeof buf) {
   20e8c:	3410      	adds	r4, #16
   20e8e:	42ac      	cmp	r4, r5
   20e90:	d204      	bcs.n	20e9c <hal_flash_isempty_no_buf+0x2c>
        rem = num_bytes - off;
   20e92:	1b2b      	subs	r3, r5, r4
        if (blksz > rem) {
   20e94:	2b0f      	cmp	r3, #15
   20e96:	d9f2      	bls.n	20e7e <hal_flash_isempty_no_buf+0xe>
        blksz = sizeof buf;
   20e98:	2310      	movs	r3, #16
   20e9a:	e7f0      	b.n	20e7e <hal_flash_isempty_no_buf+0xe>
            return empty;
        }
    }

    return 1;
   20e9c:	2001      	movs	r0, #1
}
   20e9e:	b005      	add	sp, #20
   20ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00020ea4 <os_malloc_lock>:
static struct os_mutex os_malloc_mutex;
#endif

static void
os_malloc_lock(void)
{
   20ea4:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    int rc;

    if (g_os_started) {
   20ea6:	4b08      	ldr	r3, [pc, #32]	; (20ec8 <os_malloc_lock+0x24>)
   20ea8:	681b      	ldr	r3, [r3, #0]
   20eaa:	b903      	cbnz	r3, 20eae <os_malloc_lock+0xa>
        rc = os_mutex_pend(&os_malloc_mutex, 0xffffffff);
        assert(rc == 0);
    }
#endif
}
   20eac:	bd08      	pop	{r3, pc}
        rc = os_mutex_pend(&os_malloc_mutex, 0xffffffff);
   20eae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20eb2:	4806      	ldr	r0, [pc, #24]	; (20ecc <os_malloc_lock+0x28>)
   20eb4:	f7e9 fe3c 	bl	ab30 <os_mutex_pend>
        assert(rc == 0);
   20eb8:	2800      	cmp	r0, #0
   20eba:	d0f7      	beq.n	20eac <os_malloc_lock+0x8>
   20ebc:	2300      	movs	r3, #0
   20ebe:	461a      	mov	r2, r3
   20ec0:	4619      	mov	r1, r3
   20ec2:	4618      	mov	r0, r3
   20ec4:	f7e8 f8c2 	bl	904c <__assert_func>
   20ec8:	20002658 	.word	0x20002658
   20ecc:	20004aa8 	.word	0x20004aa8

00020ed0 <os_malloc_unlock>:

static void
os_malloc_unlock(void)
{
   20ed0:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    int rc;

    if (g_os_started) {
   20ed2:	4b07      	ldr	r3, [pc, #28]	; (20ef0 <os_malloc_unlock+0x20>)
   20ed4:	681b      	ldr	r3, [r3, #0]
   20ed6:	b903      	cbnz	r3, 20eda <os_malloc_unlock+0xa>
        rc = os_mutex_release(&os_malloc_mutex);
        assert(rc == 0);
    }
#endif
}
   20ed8:	bd08      	pop	{r3, pc}
        rc = os_mutex_release(&os_malloc_mutex);
   20eda:	4806      	ldr	r0, [pc, #24]	; (20ef4 <os_malloc_unlock+0x24>)
   20edc:	f7e9 fdcc 	bl	aa78 <os_mutex_release>
        assert(rc == 0);
   20ee0:	2800      	cmp	r0, #0
   20ee2:	d0f9      	beq.n	20ed8 <os_malloc_unlock+0x8>
   20ee4:	2300      	movs	r3, #0
   20ee6:	461a      	mov	r2, r3
   20ee8:	4619      	mov	r1, r3
   20eea:	4618      	mov	r0, r3
   20eec:	f7e8 f8ae 	bl	904c <__assert_func>
   20ef0:	20002658 	.word	0x20002658
   20ef4:	20004aa8 	.word	0x20004aa8

00020ef8 <os_malloc>:

void *
os_malloc(size_t size)
{
   20ef8:	b510      	push	{r4, lr}
   20efa:	4604      	mov	r4, r0
    void *ptr;

    os_malloc_lock();
   20efc:	f7ff ffd2 	bl	20ea4 <os_malloc_lock>
    ptr = malloc(size);
   20f00:	4620      	mov	r0, r4
   20f02:	f7ec fd01 	bl	d908 <malloc>
   20f06:	4604      	mov	r4, r0
    os_malloc_unlock();
   20f08:	f7ff ffe2 	bl	20ed0 <os_malloc_unlock>

    return ptr;
}
   20f0c:	4620      	mov	r0, r4
   20f0e:	bd10      	pop	{r4, pc}

00020f10 <os_free>:

void
os_free(void *mem)
{
   20f10:	b510      	push	{r4, lr}
   20f12:	4604      	mov	r4, r0
    os_malloc_lock();
   20f14:	f7ff ffc6 	bl	20ea4 <os_malloc_lock>
    free(mem);
   20f18:	4620      	mov	r0, r4
   20f1a:	f7ec fd2b 	bl	d974 <free>
    os_malloc_unlock();
   20f1e:	f7ff ffd7 	bl	20ed0 <os_malloc_unlock>
}
   20f22:	bd10      	pop	{r4, pc}

00020f24 <crc8_init>:

uint8_t
crc8_init(void)
{
    return 0xff;
}
   20f24:	20ff      	movs	r0, #255	; 0xff
   20f26:	4770      	bx	lr

00020f28 <crc8_calc>:
crc8_calc(uint8_t val, void *buf, int cnt)
{
	int i;
	uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
   20f28:	f04f 0c00 	mov.w	ip, #0
   20f2c:	4594      	cmp	ip, r2
   20f2e:	da16      	bge.n	20f5e <crc8_calc+0x36>
{
   20f30:	b410      	push	{r4}
		val ^= p[i];
   20f32:	f811 300c 	ldrb.w	r3, [r1, ip]
   20f36:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_small_table[val >> 4];
   20f38:	0918      	lsrs	r0, r3, #4
   20f3a:	4c09      	ldr	r4, [pc, #36]	; (20f60 <crc8_calc+0x38>)
   20f3c:	5620      	ldrsb	r0, [r4, r0]
   20f3e:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
   20f42:	b2c3      	uxtb	r3, r0
		val = (val << 4) ^ crc8_small_table[val >> 4];
   20f44:	f3c0 1003 	ubfx	r0, r0, #4, #4
   20f48:	5620      	ldrsb	r0, [r4, r0]
   20f4a:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
   20f4e:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
   20f50:	f10c 0c01 	add.w	ip, ip, #1
   20f54:	4594      	cmp	ip, r2
   20f56:	dbec      	blt.n	20f32 <crc8_calc+0xa>
	}
	return val;
}
   20f58:	f85d 4b04 	ldr.w	r4, [sp], #4
   20f5c:	4770      	bx	lr
   20f5e:	4770      	bx	lr
   20f60:	00024e5c 	.word	0x00024e5c

00020f64 <__aeabi_drsub>:
   20f64:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   20f68:	e002      	b.n	20f70 <__adddf3>
   20f6a:	bf00      	nop

00020f6c <__aeabi_dsub>:
   20f6c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00020f70 <__adddf3>:
   20f70:	b530      	push	{r4, r5, lr}
   20f72:	ea4f 0441 	mov.w	r4, r1, lsl #1
   20f76:	ea4f 0543 	mov.w	r5, r3, lsl #1
   20f7a:	ea94 0f05 	teq	r4, r5
   20f7e:	bf08      	it	eq
   20f80:	ea90 0f02 	teqeq	r0, r2
   20f84:	bf1f      	itttt	ne
   20f86:	ea54 0c00 	orrsne.w	ip, r4, r0
   20f8a:	ea55 0c02 	orrsne.w	ip, r5, r2
   20f8e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   20f92:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   20f96:	f000 80e2 	beq.w	2115e <__adddf3+0x1ee>
   20f9a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   20f9e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   20fa2:	bfb8      	it	lt
   20fa4:	426d      	neglt	r5, r5
   20fa6:	dd0c      	ble.n	20fc2 <__adddf3+0x52>
   20fa8:	442c      	add	r4, r5
   20faa:	ea80 0202 	eor.w	r2, r0, r2
   20fae:	ea81 0303 	eor.w	r3, r1, r3
   20fb2:	ea82 0000 	eor.w	r0, r2, r0
   20fb6:	ea83 0101 	eor.w	r1, r3, r1
   20fba:	ea80 0202 	eor.w	r2, r0, r2
   20fbe:	ea81 0303 	eor.w	r3, r1, r3
   20fc2:	2d36      	cmp	r5, #54	; 0x36
   20fc4:	bf88      	it	hi
   20fc6:	bd30      	pophi	{r4, r5, pc}
   20fc8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   20fcc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   20fd0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   20fd4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   20fd8:	d002      	beq.n	20fe0 <__adddf3+0x70>
   20fda:	4240      	negs	r0, r0
   20fdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   20fe0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   20fe4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   20fe8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   20fec:	d002      	beq.n	20ff4 <__adddf3+0x84>
   20fee:	4252      	negs	r2, r2
   20ff0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   20ff4:	ea94 0f05 	teq	r4, r5
   20ff8:	f000 80a7 	beq.w	2114a <__adddf3+0x1da>
   20ffc:	f1a4 0401 	sub.w	r4, r4, #1
   21000:	f1d5 0e20 	rsbs	lr, r5, #32
   21004:	db0d      	blt.n	21022 <__adddf3+0xb2>
   21006:	fa02 fc0e 	lsl.w	ip, r2, lr
   2100a:	fa22 f205 	lsr.w	r2, r2, r5
   2100e:	1880      	adds	r0, r0, r2
   21010:	f141 0100 	adc.w	r1, r1, #0
   21014:	fa03 f20e 	lsl.w	r2, r3, lr
   21018:	1880      	adds	r0, r0, r2
   2101a:	fa43 f305 	asr.w	r3, r3, r5
   2101e:	4159      	adcs	r1, r3
   21020:	e00e      	b.n	21040 <__adddf3+0xd0>
   21022:	f1a5 0520 	sub.w	r5, r5, #32
   21026:	f10e 0e20 	add.w	lr, lr, #32
   2102a:	2a01      	cmp	r2, #1
   2102c:	fa03 fc0e 	lsl.w	ip, r3, lr
   21030:	bf28      	it	cs
   21032:	f04c 0c02 	orrcs.w	ip, ip, #2
   21036:	fa43 f305 	asr.w	r3, r3, r5
   2103a:	18c0      	adds	r0, r0, r3
   2103c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   21040:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   21044:	d507      	bpl.n	21056 <__adddf3+0xe6>
   21046:	f04f 0e00 	mov.w	lr, #0
   2104a:	f1dc 0c00 	rsbs	ip, ip, #0
   2104e:	eb7e 0000 	sbcs.w	r0, lr, r0
   21052:	eb6e 0101 	sbc.w	r1, lr, r1
   21056:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   2105a:	d31b      	bcc.n	21094 <__adddf3+0x124>
   2105c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   21060:	d30c      	bcc.n	2107c <__adddf3+0x10c>
   21062:	0849      	lsrs	r1, r1, #1
   21064:	ea5f 0030 	movs.w	r0, r0, rrx
   21068:	ea4f 0c3c 	mov.w	ip, ip, rrx
   2106c:	f104 0401 	add.w	r4, r4, #1
   21070:	ea4f 5244 	mov.w	r2, r4, lsl #21
   21074:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   21078:	f080 809a 	bcs.w	211b0 <__adddf3+0x240>
   2107c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   21080:	bf08      	it	eq
   21082:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   21086:	f150 0000 	adcs.w	r0, r0, #0
   2108a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   2108e:	ea41 0105 	orr.w	r1, r1, r5
   21092:	bd30      	pop	{r4, r5, pc}
   21094:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   21098:	4140      	adcs	r0, r0
   2109a:	eb41 0101 	adc.w	r1, r1, r1
   2109e:	3c01      	subs	r4, #1
   210a0:	bf28      	it	cs
   210a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   210a6:	d2e9      	bcs.n	2107c <__adddf3+0x10c>
   210a8:	f091 0f00 	teq	r1, #0
   210ac:	bf04      	itt	eq
   210ae:	4601      	moveq	r1, r0
   210b0:	2000      	moveq	r0, #0
   210b2:	fab1 f381 	clz	r3, r1
   210b6:	bf08      	it	eq
   210b8:	3320      	addeq	r3, #32
   210ba:	f1a3 030b 	sub.w	r3, r3, #11
   210be:	f1b3 0220 	subs.w	r2, r3, #32
   210c2:	da0c      	bge.n	210de <__adddf3+0x16e>
   210c4:	320c      	adds	r2, #12
   210c6:	dd08      	ble.n	210da <__adddf3+0x16a>
   210c8:	f102 0c14 	add.w	ip, r2, #20
   210cc:	f1c2 020c 	rsb	r2, r2, #12
   210d0:	fa01 f00c 	lsl.w	r0, r1, ip
   210d4:	fa21 f102 	lsr.w	r1, r1, r2
   210d8:	e00c      	b.n	210f4 <__adddf3+0x184>
   210da:	f102 0214 	add.w	r2, r2, #20
   210de:	bfd8      	it	le
   210e0:	f1c2 0c20 	rsble	ip, r2, #32
   210e4:	fa01 f102 	lsl.w	r1, r1, r2
   210e8:	fa20 fc0c 	lsr.w	ip, r0, ip
   210ec:	bfdc      	itt	le
   210ee:	ea41 010c 	orrle.w	r1, r1, ip
   210f2:	4090      	lslle	r0, r2
   210f4:	1ae4      	subs	r4, r4, r3
   210f6:	bfa2      	ittt	ge
   210f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   210fc:	4329      	orrge	r1, r5
   210fe:	bd30      	popge	{r4, r5, pc}
   21100:	ea6f 0404 	mvn.w	r4, r4
   21104:	3c1f      	subs	r4, #31
   21106:	da1c      	bge.n	21142 <__adddf3+0x1d2>
   21108:	340c      	adds	r4, #12
   2110a:	dc0e      	bgt.n	2112a <__adddf3+0x1ba>
   2110c:	f104 0414 	add.w	r4, r4, #20
   21110:	f1c4 0220 	rsb	r2, r4, #32
   21114:	fa20 f004 	lsr.w	r0, r0, r4
   21118:	fa01 f302 	lsl.w	r3, r1, r2
   2111c:	ea40 0003 	orr.w	r0, r0, r3
   21120:	fa21 f304 	lsr.w	r3, r1, r4
   21124:	ea45 0103 	orr.w	r1, r5, r3
   21128:	bd30      	pop	{r4, r5, pc}
   2112a:	f1c4 040c 	rsb	r4, r4, #12
   2112e:	f1c4 0220 	rsb	r2, r4, #32
   21132:	fa20 f002 	lsr.w	r0, r0, r2
   21136:	fa01 f304 	lsl.w	r3, r1, r4
   2113a:	ea40 0003 	orr.w	r0, r0, r3
   2113e:	4629      	mov	r1, r5
   21140:	bd30      	pop	{r4, r5, pc}
   21142:	fa21 f004 	lsr.w	r0, r1, r4
   21146:	4629      	mov	r1, r5
   21148:	bd30      	pop	{r4, r5, pc}
   2114a:	f094 0f00 	teq	r4, #0
   2114e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   21152:	bf06      	itte	eq
   21154:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   21158:	3401      	addeq	r4, #1
   2115a:	3d01      	subne	r5, #1
   2115c:	e74e      	b.n	20ffc <__adddf3+0x8c>
   2115e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   21162:	bf18      	it	ne
   21164:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   21168:	d029      	beq.n	211be <__adddf3+0x24e>
   2116a:	ea94 0f05 	teq	r4, r5
   2116e:	bf08      	it	eq
   21170:	ea90 0f02 	teqeq	r0, r2
   21174:	d005      	beq.n	21182 <__adddf3+0x212>
   21176:	ea54 0c00 	orrs.w	ip, r4, r0
   2117a:	bf04      	itt	eq
   2117c:	4619      	moveq	r1, r3
   2117e:	4610      	moveq	r0, r2
   21180:	bd30      	pop	{r4, r5, pc}
   21182:	ea91 0f03 	teq	r1, r3
   21186:	bf1e      	ittt	ne
   21188:	2100      	movne	r1, #0
   2118a:	2000      	movne	r0, #0
   2118c:	bd30      	popne	{r4, r5, pc}
   2118e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   21192:	d105      	bne.n	211a0 <__adddf3+0x230>
   21194:	0040      	lsls	r0, r0, #1
   21196:	4149      	adcs	r1, r1
   21198:	bf28      	it	cs
   2119a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   2119e:	bd30      	pop	{r4, r5, pc}
   211a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   211a4:	bf3c      	itt	cc
   211a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   211aa:	bd30      	popcc	{r4, r5, pc}
   211ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   211b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   211b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   211b8:	f04f 0000 	mov.w	r0, #0
   211bc:	bd30      	pop	{r4, r5, pc}
   211be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   211c2:	bf1a      	itte	ne
   211c4:	4619      	movne	r1, r3
   211c6:	4610      	movne	r0, r2
   211c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   211cc:	bf1c      	itt	ne
   211ce:	460b      	movne	r3, r1
   211d0:	4602      	movne	r2, r0
   211d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   211d6:	bf06      	itte	eq
   211d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   211dc:	ea91 0f03 	teqeq	r1, r3
   211e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   211e4:	bd30      	pop	{r4, r5, pc}
   211e6:	bf00      	nop

000211e8 <__aeabi_ui2d>:
   211e8:	f090 0f00 	teq	r0, #0
   211ec:	bf04      	itt	eq
   211ee:	2100      	moveq	r1, #0
   211f0:	4770      	bxeq	lr
   211f2:	b530      	push	{r4, r5, lr}
   211f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   211f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   211fc:	f04f 0500 	mov.w	r5, #0
   21200:	f04f 0100 	mov.w	r1, #0
   21204:	e750      	b.n	210a8 <__adddf3+0x138>
   21206:	bf00      	nop

00021208 <__aeabi_i2d>:
   21208:	f090 0f00 	teq	r0, #0
   2120c:	bf04      	itt	eq
   2120e:	2100      	moveq	r1, #0
   21210:	4770      	bxeq	lr
   21212:	b530      	push	{r4, r5, lr}
   21214:	f44f 6480 	mov.w	r4, #1024	; 0x400
   21218:	f104 0432 	add.w	r4, r4, #50	; 0x32
   2121c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   21220:	bf48      	it	mi
   21222:	4240      	negmi	r0, r0
   21224:	f04f 0100 	mov.w	r1, #0
   21228:	e73e      	b.n	210a8 <__adddf3+0x138>
   2122a:	bf00      	nop

0002122c <__aeabi_f2d>:
   2122c:	0042      	lsls	r2, r0, #1
   2122e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   21232:	ea4f 0131 	mov.w	r1, r1, rrx
   21236:	ea4f 7002 	mov.w	r0, r2, lsl #28
   2123a:	bf1f      	itttt	ne
   2123c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   21240:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   21244:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   21248:	4770      	bxne	lr
   2124a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   2124e:	bf08      	it	eq
   21250:	4770      	bxeq	lr
   21252:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   21256:	bf04      	itt	eq
   21258:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   2125c:	4770      	bxeq	lr
   2125e:	b530      	push	{r4, r5, lr}
   21260:	f44f 7460 	mov.w	r4, #896	; 0x380
   21264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   21268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   2126c:	e71c      	b.n	210a8 <__adddf3+0x138>
   2126e:	bf00      	nop

00021270 <__aeabi_ul2d>:
   21270:	ea50 0201 	orrs.w	r2, r0, r1
   21274:	bf08      	it	eq
   21276:	4770      	bxeq	lr
   21278:	b530      	push	{r4, r5, lr}
   2127a:	f04f 0500 	mov.w	r5, #0
   2127e:	e00a      	b.n	21296 <__aeabi_l2d+0x16>

00021280 <__aeabi_l2d>:
   21280:	ea50 0201 	orrs.w	r2, r0, r1
   21284:	bf08      	it	eq
   21286:	4770      	bxeq	lr
   21288:	b530      	push	{r4, r5, lr}
   2128a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   2128e:	d502      	bpl.n	21296 <__aeabi_l2d+0x16>
   21290:	4240      	negs	r0, r0
   21292:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   21296:	f44f 6480 	mov.w	r4, #1024	; 0x400
   2129a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   2129e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   212a2:	f43f aed8 	beq.w	21056 <__adddf3+0xe6>
   212a6:	f04f 0203 	mov.w	r2, #3
   212aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   212ae:	bf18      	it	ne
   212b0:	3203      	addne	r2, #3
   212b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   212b6:	bf18      	it	ne
   212b8:	3203      	addne	r2, #3
   212ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   212be:	f1c2 0320 	rsb	r3, r2, #32
   212c2:	fa00 fc03 	lsl.w	ip, r0, r3
   212c6:	fa20 f002 	lsr.w	r0, r0, r2
   212ca:	fa01 fe03 	lsl.w	lr, r1, r3
   212ce:	ea40 000e 	orr.w	r0, r0, lr
   212d2:	fa21 f102 	lsr.w	r1, r1, r2
   212d6:	4414      	add	r4, r2
   212d8:	e6bd      	b.n	21056 <__adddf3+0xe6>
   212da:	bf00      	nop

000212dc <__aeabi_dmul>:
   212dc:	b570      	push	{r4, r5, r6, lr}
   212de:	f04f 0cff 	mov.w	ip, #255	; 0xff
   212e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   212e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   212ea:	bf1d      	ittte	ne
   212ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   212f0:	ea94 0f0c 	teqne	r4, ip
   212f4:	ea95 0f0c 	teqne	r5, ip
   212f8:	f000 f8de 	bleq	214b8 <__aeabi_dmul+0x1dc>
   212fc:	442c      	add	r4, r5
   212fe:	ea81 0603 	eor.w	r6, r1, r3
   21302:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   21306:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   2130a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   2130e:	bf18      	it	ne
   21310:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   21314:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   21318:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   2131c:	d038      	beq.n	21390 <__aeabi_dmul+0xb4>
   2131e:	fba0 ce02 	umull	ip, lr, r0, r2
   21322:	f04f 0500 	mov.w	r5, #0
   21326:	fbe1 e502 	umlal	lr, r5, r1, r2
   2132a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   2132e:	fbe0 e503 	umlal	lr, r5, r0, r3
   21332:	f04f 0600 	mov.w	r6, #0
   21336:	fbe1 5603 	umlal	r5, r6, r1, r3
   2133a:	f09c 0f00 	teq	ip, #0
   2133e:	bf18      	it	ne
   21340:	f04e 0e01 	orrne.w	lr, lr, #1
   21344:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   21348:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   2134c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   21350:	d204      	bcs.n	2135c <__aeabi_dmul+0x80>
   21352:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   21356:	416d      	adcs	r5, r5
   21358:	eb46 0606 	adc.w	r6, r6, r6
   2135c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   21360:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   21364:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   21368:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   2136c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   21370:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   21374:	bf88      	it	hi
   21376:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   2137a:	d81e      	bhi.n	213ba <__aeabi_dmul+0xde>
   2137c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   21380:	bf08      	it	eq
   21382:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   21386:	f150 0000 	adcs.w	r0, r0, #0
   2138a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   2138e:	bd70      	pop	{r4, r5, r6, pc}
   21390:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   21394:	ea46 0101 	orr.w	r1, r6, r1
   21398:	ea40 0002 	orr.w	r0, r0, r2
   2139c:	ea81 0103 	eor.w	r1, r1, r3
   213a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   213a4:	bfc2      	ittt	gt
   213a6:	ebd4 050c 	rsbsgt	r5, r4, ip
   213aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   213ae:	bd70      	popgt	{r4, r5, r6, pc}
   213b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   213b4:	f04f 0e00 	mov.w	lr, #0
   213b8:	3c01      	subs	r4, #1
   213ba:	f300 80ab 	bgt.w	21514 <__aeabi_dmul+0x238>
   213be:	f114 0f36 	cmn.w	r4, #54	; 0x36
   213c2:	bfde      	ittt	le
   213c4:	2000      	movle	r0, #0
   213c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   213ca:	bd70      	pople	{r4, r5, r6, pc}
   213cc:	f1c4 0400 	rsb	r4, r4, #0
   213d0:	3c20      	subs	r4, #32
   213d2:	da35      	bge.n	21440 <__aeabi_dmul+0x164>
   213d4:	340c      	adds	r4, #12
   213d6:	dc1b      	bgt.n	21410 <__aeabi_dmul+0x134>
   213d8:	f104 0414 	add.w	r4, r4, #20
   213dc:	f1c4 0520 	rsb	r5, r4, #32
   213e0:	fa00 f305 	lsl.w	r3, r0, r5
   213e4:	fa20 f004 	lsr.w	r0, r0, r4
   213e8:	fa01 f205 	lsl.w	r2, r1, r5
   213ec:	ea40 0002 	orr.w	r0, r0, r2
   213f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   213f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   213f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   213fc:	fa21 f604 	lsr.w	r6, r1, r4
   21400:	eb42 0106 	adc.w	r1, r2, r6
   21404:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   21408:	bf08      	it	eq
   2140a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   2140e:	bd70      	pop	{r4, r5, r6, pc}
   21410:	f1c4 040c 	rsb	r4, r4, #12
   21414:	f1c4 0520 	rsb	r5, r4, #32
   21418:	fa00 f304 	lsl.w	r3, r0, r4
   2141c:	fa20 f005 	lsr.w	r0, r0, r5
   21420:	fa01 f204 	lsl.w	r2, r1, r4
   21424:	ea40 0002 	orr.w	r0, r0, r2
   21428:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   2142c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   21430:	f141 0100 	adc.w	r1, r1, #0
   21434:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   21438:	bf08      	it	eq
   2143a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   2143e:	bd70      	pop	{r4, r5, r6, pc}
   21440:	f1c4 0520 	rsb	r5, r4, #32
   21444:	fa00 f205 	lsl.w	r2, r0, r5
   21448:	ea4e 0e02 	orr.w	lr, lr, r2
   2144c:	fa20 f304 	lsr.w	r3, r0, r4
   21450:	fa01 f205 	lsl.w	r2, r1, r5
   21454:	ea43 0302 	orr.w	r3, r3, r2
   21458:	fa21 f004 	lsr.w	r0, r1, r4
   2145c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   21460:	fa21 f204 	lsr.w	r2, r1, r4
   21464:	ea20 0002 	bic.w	r0, r0, r2
   21468:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   2146c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   21470:	bf08      	it	eq
   21472:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   21476:	bd70      	pop	{r4, r5, r6, pc}
   21478:	f094 0f00 	teq	r4, #0
   2147c:	d10f      	bne.n	2149e <__aeabi_dmul+0x1c2>
   2147e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   21482:	0040      	lsls	r0, r0, #1
   21484:	eb41 0101 	adc.w	r1, r1, r1
   21488:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   2148c:	bf08      	it	eq
   2148e:	3c01      	subeq	r4, #1
   21490:	d0f7      	beq.n	21482 <__aeabi_dmul+0x1a6>
   21492:	ea41 0106 	orr.w	r1, r1, r6
   21496:	f095 0f00 	teq	r5, #0
   2149a:	bf18      	it	ne
   2149c:	4770      	bxne	lr
   2149e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   214a2:	0052      	lsls	r2, r2, #1
   214a4:	eb43 0303 	adc.w	r3, r3, r3
   214a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   214ac:	bf08      	it	eq
   214ae:	3d01      	subeq	r5, #1
   214b0:	d0f7      	beq.n	214a2 <__aeabi_dmul+0x1c6>
   214b2:	ea43 0306 	orr.w	r3, r3, r6
   214b6:	4770      	bx	lr
   214b8:	ea94 0f0c 	teq	r4, ip
   214bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   214c0:	bf18      	it	ne
   214c2:	ea95 0f0c 	teqne	r5, ip
   214c6:	d00c      	beq.n	214e2 <__aeabi_dmul+0x206>
   214c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   214cc:	bf18      	it	ne
   214ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   214d2:	d1d1      	bne.n	21478 <__aeabi_dmul+0x19c>
   214d4:	ea81 0103 	eor.w	r1, r1, r3
   214d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   214dc:	f04f 0000 	mov.w	r0, #0
   214e0:	bd70      	pop	{r4, r5, r6, pc}
   214e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   214e6:	bf06      	itte	eq
   214e8:	4610      	moveq	r0, r2
   214ea:	4619      	moveq	r1, r3
   214ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   214f0:	d019      	beq.n	21526 <__aeabi_dmul+0x24a>
   214f2:	ea94 0f0c 	teq	r4, ip
   214f6:	d102      	bne.n	214fe <__aeabi_dmul+0x222>
   214f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   214fc:	d113      	bne.n	21526 <__aeabi_dmul+0x24a>
   214fe:	ea95 0f0c 	teq	r5, ip
   21502:	d105      	bne.n	21510 <__aeabi_dmul+0x234>
   21504:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   21508:	bf1c      	itt	ne
   2150a:	4610      	movne	r0, r2
   2150c:	4619      	movne	r1, r3
   2150e:	d10a      	bne.n	21526 <__aeabi_dmul+0x24a>
   21510:	ea81 0103 	eor.w	r1, r1, r3
   21514:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   21518:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   2151c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   21520:	f04f 0000 	mov.w	r0, #0
   21524:	bd70      	pop	{r4, r5, r6, pc}
   21526:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   2152a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   2152e:	bd70      	pop	{r4, r5, r6, pc}

00021530 <__aeabi_ddiv>:
   21530:	b570      	push	{r4, r5, r6, lr}
   21532:	f04f 0cff 	mov.w	ip, #255	; 0xff
   21536:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   2153a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   2153e:	bf1d      	ittte	ne
   21540:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   21544:	ea94 0f0c 	teqne	r4, ip
   21548:	ea95 0f0c 	teqne	r5, ip
   2154c:	f000 f8a7 	bleq	2169e <__aeabi_ddiv+0x16e>
   21550:	eba4 0405 	sub.w	r4, r4, r5
   21554:	ea81 0e03 	eor.w	lr, r1, r3
   21558:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   2155c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   21560:	f000 8088 	beq.w	21674 <__aeabi_ddiv+0x144>
   21564:	ea4f 3303 	mov.w	r3, r3, lsl #12
   21568:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   2156c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   21570:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   21574:	ea4f 2202 	mov.w	r2, r2, lsl #8
   21578:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   2157c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   21580:	ea4f 2600 	mov.w	r6, r0, lsl #8
   21584:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   21588:	429d      	cmp	r5, r3
   2158a:	bf08      	it	eq
   2158c:	4296      	cmpeq	r6, r2
   2158e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   21592:	f504 7440 	add.w	r4, r4, #768	; 0x300
   21596:	d202      	bcs.n	2159e <__aeabi_ddiv+0x6e>
   21598:	085b      	lsrs	r3, r3, #1
   2159a:	ea4f 0232 	mov.w	r2, r2, rrx
   2159e:	1ab6      	subs	r6, r6, r2
   215a0:	eb65 0503 	sbc.w	r5, r5, r3
   215a4:	085b      	lsrs	r3, r3, #1
   215a6:	ea4f 0232 	mov.w	r2, r2, rrx
   215aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   215ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   215b2:	ebb6 0e02 	subs.w	lr, r6, r2
   215b6:	eb75 0e03 	sbcs.w	lr, r5, r3
   215ba:	bf22      	ittt	cs
   215bc:	1ab6      	subcs	r6, r6, r2
   215be:	4675      	movcs	r5, lr
   215c0:	ea40 000c 	orrcs.w	r0, r0, ip
   215c4:	085b      	lsrs	r3, r3, #1
   215c6:	ea4f 0232 	mov.w	r2, r2, rrx
   215ca:	ebb6 0e02 	subs.w	lr, r6, r2
   215ce:	eb75 0e03 	sbcs.w	lr, r5, r3
   215d2:	bf22      	ittt	cs
   215d4:	1ab6      	subcs	r6, r6, r2
   215d6:	4675      	movcs	r5, lr
   215d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   215dc:	085b      	lsrs	r3, r3, #1
   215de:	ea4f 0232 	mov.w	r2, r2, rrx
   215e2:	ebb6 0e02 	subs.w	lr, r6, r2
   215e6:	eb75 0e03 	sbcs.w	lr, r5, r3
   215ea:	bf22      	ittt	cs
   215ec:	1ab6      	subcs	r6, r6, r2
   215ee:	4675      	movcs	r5, lr
   215f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   215f4:	085b      	lsrs	r3, r3, #1
   215f6:	ea4f 0232 	mov.w	r2, r2, rrx
   215fa:	ebb6 0e02 	subs.w	lr, r6, r2
   215fe:	eb75 0e03 	sbcs.w	lr, r5, r3
   21602:	bf22      	ittt	cs
   21604:	1ab6      	subcs	r6, r6, r2
   21606:	4675      	movcs	r5, lr
   21608:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   2160c:	ea55 0e06 	orrs.w	lr, r5, r6
   21610:	d018      	beq.n	21644 <__aeabi_ddiv+0x114>
   21612:	ea4f 1505 	mov.w	r5, r5, lsl #4
   21616:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   2161a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   2161e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   21622:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   21626:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   2162a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   2162e:	d1c0      	bne.n	215b2 <__aeabi_ddiv+0x82>
   21630:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   21634:	d10b      	bne.n	2164e <__aeabi_ddiv+0x11e>
   21636:	ea41 0100 	orr.w	r1, r1, r0
   2163a:	f04f 0000 	mov.w	r0, #0
   2163e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   21642:	e7b6      	b.n	215b2 <__aeabi_ddiv+0x82>
   21644:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   21648:	bf04      	itt	eq
   2164a:	4301      	orreq	r1, r0
   2164c:	2000      	moveq	r0, #0
   2164e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   21652:	bf88      	it	hi
   21654:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   21658:	f63f aeaf 	bhi.w	213ba <__aeabi_dmul+0xde>
   2165c:	ebb5 0c03 	subs.w	ip, r5, r3
   21660:	bf04      	itt	eq
   21662:	ebb6 0c02 	subseq.w	ip, r6, r2
   21666:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   2166a:	f150 0000 	adcs.w	r0, r0, #0
   2166e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   21672:	bd70      	pop	{r4, r5, r6, pc}
   21674:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   21678:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   2167c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   21680:	bfc2      	ittt	gt
   21682:	ebd4 050c 	rsbsgt	r5, r4, ip
   21686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   2168a:	bd70      	popgt	{r4, r5, r6, pc}
   2168c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   21690:	f04f 0e00 	mov.w	lr, #0
   21694:	3c01      	subs	r4, #1
   21696:	e690      	b.n	213ba <__aeabi_dmul+0xde>
   21698:	ea45 0e06 	orr.w	lr, r5, r6
   2169c:	e68d      	b.n	213ba <__aeabi_dmul+0xde>
   2169e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   216a2:	ea94 0f0c 	teq	r4, ip
   216a6:	bf08      	it	eq
   216a8:	ea95 0f0c 	teqeq	r5, ip
   216ac:	f43f af3b 	beq.w	21526 <__aeabi_dmul+0x24a>
   216b0:	ea94 0f0c 	teq	r4, ip
   216b4:	d10a      	bne.n	216cc <__aeabi_ddiv+0x19c>
   216b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   216ba:	f47f af34 	bne.w	21526 <__aeabi_dmul+0x24a>
   216be:	ea95 0f0c 	teq	r5, ip
   216c2:	f47f af25 	bne.w	21510 <__aeabi_dmul+0x234>
   216c6:	4610      	mov	r0, r2
   216c8:	4619      	mov	r1, r3
   216ca:	e72c      	b.n	21526 <__aeabi_dmul+0x24a>
   216cc:	ea95 0f0c 	teq	r5, ip
   216d0:	d106      	bne.n	216e0 <__aeabi_ddiv+0x1b0>
   216d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   216d6:	f43f aefd 	beq.w	214d4 <__aeabi_dmul+0x1f8>
   216da:	4610      	mov	r0, r2
   216dc:	4619      	mov	r1, r3
   216de:	e722      	b.n	21526 <__aeabi_dmul+0x24a>
   216e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   216e4:	bf18      	it	ne
   216e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   216ea:	f47f aec5 	bne.w	21478 <__aeabi_dmul+0x19c>
   216ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   216f2:	f47f af0d 	bne.w	21510 <__aeabi_dmul+0x234>
   216f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   216fa:	f47f aeeb 	bne.w	214d4 <__aeabi_dmul+0x1f8>
   216fe:	e712      	b.n	21526 <__aeabi_dmul+0x24a>

00021700 <__gedf2>:
   21700:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   21704:	e006      	b.n	21714 <__cmpdf2+0x4>
   21706:	bf00      	nop

00021708 <__ledf2>:
   21708:	f04f 0c01 	mov.w	ip, #1
   2170c:	e002      	b.n	21714 <__cmpdf2+0x4>
   2170e:	bf00      	nop

00021710 <__cmpdf2>:
   21710:	f04f 0c01 	mov.w	ip, #1
   21714:	f84d cd04 	str.w	ip, [sp, #-4]!
   21718:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   2171c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   21720:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   21724:	bf18      	it	ne
   21726:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   2172a:	d01b      	beq.n	21764 <__cmpdf2+0x54>
   2172c:	b001      	add	sp, #4
   2172e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   21732:	bf0c      	ite	eq
   21734:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   21738:	ea91 0f03 	teqne	r1, r3
   2173c:	bf02      	ittt	eq
   2173e:	ea90 0f02 	teqeq	r0, r2
   21742:	2000      	moveq	r0, #0
   21744:	4770      	bxeq	lr
   21746:	f110 0f00 	cmn.w	r0, #0
   2174a:	ea91 0f03 	teq	r1, r3
   2174e:	bf58      	it	pl
   21750:	4299      	cmppl	r1, r3
   21752:	bf08      	it	eq
   21754:	4290      	cmpeq	r0, r2
   21756:	bf2c      	ite	cs
   21758:	17d8      	asrcs	r0, r3, #31
   2175a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   2175e:	f040 0001 	orr.w	r0, r0, #1
   21762:	4770      	bx	lr
   21764:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   21768:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   2176c:	d102      	bne.n	21774 <__cmpdf2+0x64>
   2176e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   21772:	d107      	bne.n	21784 <__cmpdf2+0x74>
   21774:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   21778:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   2177c:	d1d6      	bne.n	2172c <__cmpdf2+0x1c>
   2177e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   21782:	d0d3      	beq.n	2172c <__cmpdf2+0x1c>
   21784:	f85d 0b04 	ldr.w	r0, [sp], #4
   21788:	4770      	bx	lr
   2178a:	bf00      	nop

0002178c <__aeabi_cdrcmple>:
   2178c:	4684      	mov	ip, r0
   2178e:	4610      	mov	r0, r2
   21790:	4662      	mov	r2, ip
   21792:	468c      	mov	ip, r1
   21794:	4619      	mov	r1, r3
   21796:	4663      	mov	r3, ip
   21798:	e000      	b.n	2179c <__aeabi_cdcmpeq>
   2179a:	bf00      	nop

0002179c <__aeabi_cdcmpeq>:
   2179c:	b501      	push	{r0, lr}
   2179e:	f7ff ffb7 	bl	21710 <__cmpdf2>
   217a2:	2800      	cmp	r0, #0
   217a4:	bf48      	it	mi
   217a6:	f110 0f00 	cmnmi.w	r0, #0
   217aa:	bd01      	pop	{r0, pc}

000217ac <__aeabi_dcmpeq>:
   217ac:	f84d ed08 	str.w	lr, [sp, #-8]!
   217b0:	f7ff fff4 	bl	2179c <__aeabi_cdcmpeq>
   217b4:	bf0c      	ite	eq
   217b6:	2001      	moveq	r0, #1
   217b8:	2000      	movne	r0, #0
   217ba:	f85d fb08 	ldr.w	pc, [sp], #8
   217be:	bf00      	nop

000217c0 <__aeabi_dcmplt>:
   217c0:	f84d ed08 	str.w	lr, [sp, #-8]!
   217c4:	f7ff ffea 	bl	2179c <__aeabi_cdcmpeq>
   217c8:	bf34      	ite	cc
   217ca:	2001      	movcc	r0, #1
   217cc:	2000      	movcs	r0, #0
   217ce:	f85d fb08 	ldr.w	pc, [sp], #8
   217d2:	bf00      	nop

000217d4 <__aeabi_dcmple>:
   217d4:	f84d ed08 	str.w	lr, [sp, #-8]!
   217d8:	f7ff ffe0 	bl	2179c <__aeabi_cdcmpeq>
   217dc:	bf94      	ite	ls
   217de:	2001      	movls	r0, #1
   217e0:	2000      	movhi	r0, #0
   217e2:	f85d fb08 	ldr.w	pc, [sp], #8
   217e6:	bf00      	nop

000217e8 <__aeabi_dcmpge>:
   217e8:	f84d ed08 	str.w	lr, [sp, #-8]!
   217ec:	f7ff ffce 	bl	2178c <__aeabi_cdrcmple>
   217f0:	bf94      	ite	ls
   217f2:	2001      	movls	r0, #1
   217f4:	2000      	movhi	r0, #0
   217f6:	f85d fb08 	ldr.w	pc, [sp], #8
   217fa:	bf00      	nop

000217fc <__aeabi_dcmpgt>:
   217fc:	f84d ed08 	str.w	lr, [sp, #-8]!
   21800:	f7ff ffc4 	bl	2178c <__aeabi_cdrcmple>
   21804:	bf34      	ite	cc
   21806:	2001      	movcc	r0, #1
   21808:	2000      	movcs	r0, #0
   2180a:	f85d fb08 	ldr.w	pc, [sp], #8
   2180e:	bf00      	nop

00021810 <__aeabi_dcmpun>:
   21810:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   21814:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   21818:	d102      	bne.n	21820 <__aeabi_dcmpun+0x10>
   2181a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   2181e:	d10a      	bne.n	21836 <__aeabi_dcmpun+0x26>
   21820:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   21824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   21828:	d102      	bne.n	21830 <__aeabi_dcmpun+0x20>
   2182a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   2182e:	d102      	bne.n	21836 <__aeabi_dcmpun+0x26>
   21830:	f04f 0000 	mov.w	r0, #0
   21834:	4770      	bx	lr
   21836:	f04f 0001 	mov.w	r0, #1
   2183a:	4770      	bx	lr

0002183c <__aeabi_d2iz>:
   2183c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   21840:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   21844:	d215      	bcs.n	21872 <__aeabi_d2iz+0x36>
   21846:	d511      	bpl.n	2186c <__aeabi_d2iz+0x30>
   21848:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   2184c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   21850:	d912      	bls.n	21878 <__aeabi_d2iz+0x3c>
   21852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   21856:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   2185a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   2185e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   21862:	fa23 f002 	lsr.w	r0, r3, r2
   21866:	bf18      	it	ne
   21868:	4240      	negne	r0, r0
   2186a:	4770      	bx	lr
   2186c:	f04f 0000 	mov.w	r0, #0
   21870:	4770      	bx	lr
   21872:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   21876:	d105      	bne.n	21884 <__aeabi_d2iz+0x48>
   21878:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   2187c:	bf08      	it	eq
   2187e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   21882:	4770      	bx	lr
   21884:	f04f 0000 	mov.w	r0, #0
   21888:	4770      	bx	lr
   2188a:	bf00      	nop

0002188c <__aeabi_d2uiz>:
   2188c:	004a      	lsls	r2, r1, #1
   2188e:	d211      	bcs.n	218b4 <__aeabi_d2uiz+0x28>
   21890:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   21894:	d211      	bcs.n	218ba <__aeabi_d2uiz+0x2e>
   21896:	d50d      	bpl.n	218b4 <__aeabi_d2uiz+0x28>
   21898:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   2189c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   218a0:	d40e      	bmi.n	218c0 <__aeabi_d2uiz+0x34>
   218a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   218a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   218aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   218ae:	fa23 f002 	lsr.w	r0, r3, r2
   218b2:	4770      	bx	lr
   218b4:	f04f 0000 	mov.w	r0, #0
   218b8:	4770      	bx	lr
   218ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   218be:	d102      	bne.n	218c6 <__aeabi_d2uiz+0x3a>
   218c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   218c4:	4770      	bx	lr
   218c6:	f04f 0000 	mov.w	r0, #0
   218ca:	4770      	bx	lr

000218cc <__aeabi_d2f>:
   218cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   218d0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   218d4:	bf24      	itt	cs
   218d6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   218da:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   218de:	d90d      	bls.n	218fc <__aeabi_d2f+0x30>
   218e0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   218e4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   218e8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   218ec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   218f0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   218f4:	bf08      	it	eq
   218f6:	f020 0001 	biceq.w	r0, r0, #1
   218fa:	4770      	bx	lr
   218fc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   21900:	d121      	bne.n	21946 <__aeabi_d2f+0x7a>
   21902:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   21906:	bfbc      	itt	lt
   21908:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   2190c:	4770      	bxlt	lr
   2190e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   21912:	ea4f 5252 	mov.w	r2, r2, lsr #21
   21916:	f1c2 0218 	rsb	r2, r2, #24
   2191a:	f1c2 0c20 	rsb	ip, r2, #32
   2191e:	fa10 f30c 	lsls.w	r3, r0, ip
   21922:	fa20 f002 	lsr.w	r0, r0, r2
   21926:	bf18      	it	ne
   21928:	f040 0001 	orrne.w	r0, r0, #1
   2192c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   21930:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   21934:	fa03 fc0c 	lsl.w	ip, r3, ip
   21938:	ea40 000c 	orr.w	r0, r0, ip
   2193c:	fa23 f302 	lsr.w	r3, r3, r2
   21940:	ea4f 0343 	mov.w	r3, r3, lsl #1
   21944:	e7cc      	b.n	218e0 <__aeabi_d2f+0x14>
   21946:	ea7f 5362 	mvns.w	r3, r2, asr #21
   2194a:	d107      	bne.n	2195c <__aeabi_d2f+0x90>
   2194c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   21950:	bf1e      	ittt	ne
   21952:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   21956:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   2195a:	4770      	bxne	lr
   2195c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   21960:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   21964:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   21968:	4770      	bx	lr
   2196a:	bf00      	nop

0002196c <__aeabi_ldivmod>:
   2196c:	b97b      	cbnz	r3, 2198e <__aeabi_ldivmod+0x22>
   2196e:	b972      	cbnz	r2, 2198e <__aeabi_ldivmod+0x22>
   21970:	2900      	cmp	r1, #0
   21972:	bfbe      	ittt	lt
   21974:	2000      	movlt	r0, #0
   21976:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   2197a:	e006      	blt.n	2198a <__aeabi_ldivmod+0x1e>
   2197c:	bf08      	it	eq
   2197e:	2800      	cmpeq	r0, #0
   21980:	bf1c      	itt	ne
   21982:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   21986:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   2198a:	f000 ba15 	b.w	21db8 <__aeabi_idiv0>
   2198e:	f1ad 0c08 	sub.w	ip, sp, #8
   21992:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   21996:	2900      	cmp	r1, #0
   21998:	db09      	blt.n	219ae <__aeabi_ldivmod+0x42>
   2199a:	2b00      	cmp	r3, #0
   2199c:	db1a      	blt.n	219d4 <__aeabi_ldivmod+0x68>
   2199e:	f000 f8a3 	bl	21ae8 <__udivmoddi4>
   219a2:	f8dd e004 	ldr.w	lr, [sp, #4]
   219a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   219aa:	b004      	add	sp, #16
   219ac:	4770      	bx	lr
   219ae:	4240      	negs	r0, r0
   219b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   219b4:	2b00      	cmp	r3, #0
   219b6:	db1b      	blt.n	219f0 <__aeabi_ldivmod+0x84>
   219b8:	f000 f896 	bl	21ae8 <__udivmoddi4>
   219bc:	f8dd e004 	ldr.w	lr, [sp, #4]
   219c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   219c4:	b004      	add	sp, #16
   219c6:	4240      	negs	r0, r0
   219c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   219cc:	4252      	negs	r2, r2
   219ce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   219d2:	4770      	bx	lr
   219d4:	4252      	negs	r2, r2
   219d6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   219da:	f000 f885 	bl	21ae8 <__udivmoddi4>
   219de:	f8dd e004 	ldr.w	lr, [sp, #4]
   219e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   219e6:	b004      	add	sp, #16
   219e8:	4240      	negs	r0, r0
   219ea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   219ee:	4770      	bx	lr
   219f0:	4252      	negs	r2, r2
   219f2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   219f6:	f000 f877 	bl	21ae8 <__udivmoddi4>
   219fa:	f8dd e004 	ldr.w	lr, [sp, #4]
   219fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   21a02:	b004      	add	sp, #16
   21a04:	4252      	negs	r2, r2
   21a06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   21a0a:	4770      	bx	lr

00021a0c <__aeabi_uldivmod>:
   21a0c:	b953      	cbnz	r3, 21a24 <__aeabi_uldivmod+0x18>
   21a0e:	b94a      	cbnz	r2, 21a24 <__aeabi_uldivmod+0x18>
   21a10:	2900      	cmp	r1, #0
   21a12:	bf08      	it	eq
   21a14:	2800      	cmpeq	r0, #0
   21a16:	bf1c      	itt	ne
   21a18:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   21a1c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   21a20:	f000 b9ca 	b.w	21db8 <__aeabi_idiv0>
   21a24:	f1ad 0c08 	sub.w	ip, sp, #8
   21a28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   21a2c:	f000 f85c 	bl	21ae8 <__udivmoddi4>
   21a30:	f8dd e004 	ldr.w	lr, [sp, #4]
   21a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   21a38:	b004      	add	sp, #16
   21a3a:	4770      	bx	lr

00021a3c <__aeabi_d2lz>:
   21a3c:	b538      	push	{r3, r4, r5, lr}
   21a3e:	2200      	movs	r2, #0
   21a40:	2300      	movs	r3, #0
   21a42:	4604      	mov	r4, r0
   21a44:	460d      	mov	r5, r1
   21a46:	f7ff febb 	bl	217c0 <__aeabi_dcmplt>
   21a4a:	b928      	cbnz	r0, 21a58 <__aeabi_d2lz+0x1c>
   21a4c:	4620      	mov	r0, r4
   21a4e:	4629      	mov	r1, r5
   21a50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   21a54:	f000 b82a 	b.w	21aac <__aeabi_d2ulz>
   21a58:	4620      	mov	r0, r4
   21a5a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   21a5e:	f000 f825 	bl	21aac <__aeabi_d2ulz>
   21a62:	4240      	negs	r0, r0
   21a64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   21a68:	bd38      	pop	{r3, r4, r5, pc}
   21a6a:	bf00      	nop

00021a6c <__aeabi_f2ulz>:
   21a6c:	b5d0      	push	{r4, r6, r7, lr}
   21a6e:	f7ff fbdd 	bl	2122c <__aeabi_f2d>
   21a72:	4b0c      	ldr	r3, [pc, #48]	; (21aa4 <__aeabi_f2ulz+0x38>)
   21a74:	2200      	movs	r2, #0
   21a76:	4606      	mov	r6, r0
   21a78:	460f      	mov	r7, r1
   21a7a:	f7ff fc2f 	bl	212dc <__aeabi_dmul>
   21a7e:	f7ff ff05 	bl	2188c <__aeabi_d2uiz>
   21a82:	4604      	mov	r4, r0
   21a84:	f7ff fbb0 	bl	211e8 <__aeabi_ui2d>
   21a88:	4b07      	ldr	r3, [pc, #28]	; (21aa8 <__aeabi_f2ulz+0x3c>)
   21a8a:	2200      	movs	r2, #0
   21a8c:	f7ff fc26 	bl	212dc <__aeabi_dmul>
   21a90:	4602      	mov	r2, r0
   21a92:	460b      	mov	r3, r1
   21a94:	4630      	mov	r0, r6
   21a96:	4639      	mov	r1, r7
   21a98:	f7ff fa68 	bl	20f6c <__aeabi_dsub>
   21a9c:	f7ff fef6 	bl	2188c <__aeabi_d2uiz>
   21aa0:	4621      	mov	r1, r4
   21aa2:	bdd0      	pop	{r4, r6, r7, pc}
   21aa4:	3df00000 	.word	0x3df00000
   21aa8:	41f00000 	.word	0x41f00000

00021aac <__aeabi_d2ulz>:
   21aac:	b5d0      	push	{r4, r6, r7, lr}
   21aae:	4b0c      	ldr	r3, [pc, #48]	; (21ae0 <__aeabi_d2ulz+0x34>)
   21ab0:	2200      	movs	r2, #0
   21ab2:	4606      	mov	r6, r0
   21ab4:	460f      	mov	r7, r1
   21ab6:	f7ff fc11 	bl	212dc <__aeabi_dmul>
   21aba:	f7ff fee7 	bl	2188c <__aeabi_d2uiz>
   21abe:	4604      	mov	r4, r0
   21ac0:	f7ff fb92 	bl	211e8 <__aeabi_ui2d>
   21ac4:	4b07      	ldr	r3, [pc, #28]	; (21ae4 <__aeabi_d2ulz+0x38>)
   21ac6:	2200      	movs	r2, #0
   21ac8:	f7ff fc08 	bl	212dc <__aeabi_dmul>
   21acc:	4602      	mov	r2, r0
   21ace:	460b      	mov	r3, r1
   21ad0:	4630      	mov	r0, r6
   21ad2:	4639      	mov	r1, r7
   21ad4:	f7ff fa4a 	bl	20f6c <__aeabi_dsub>
   21ad8:	f7ff fed8 	bl	2188c <__aeabi_d2uiz>
   21adc:	4621      	mov	r1, r4
   21ade:	bdd0      	pop	{r4, r6, r7, pc}
   21ae0:	3df00000 	.word	0x3df00000
   21ae4:	41f00000 	.word	0x41f00000

00021ae8 <__udivmoddi4>:
   21ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21aec:	9d08      	ldr	r5, [sp, #32]
   21aee:	4604      	mov	r4, r0
   21af0:	468e      	mov	lr, r1
   21af2:	2b00      	cmp	r3, #0
   21af4:	d14d      	bne.n	21b92 <__udivmoddi4+0xaa>
   21af6:	428a      	cmp	r2, r1
   21af8:	4694      	mov	ip, r2
   21afa:	d969      	bls.n	21bd0 <__udivmoddi4+0xe8>
   21afc:	fab2 f282 	clz	r2, r2
   21b00:	b152      	cbz	r2, 21b18 <__udivmoddi4+0x30>
   21b02:	fa01 f302 	lsl.w	r3, r1, r2
   21b06:	f1c2 0120 	rsb	r1, r2, #32
   21b0a:	fa20 f101 	lsr.w	r1, r0, r1
   21b0e:	fa0c fc02 	lsl.w	ip, ip, r2
   21b12:	ea41 0e03 	orr.w	lr, r1, r3
   21b16:	4094      	lsls	r4, r2
   21b18:	ea4f 481c 	mov.w	r8, ip, lsr #16
   21b1c:	0c21      	lsrs	r1, r4, #16
   21b1e:	fbbe f6f8 	udiv	r6, lr, r8
   21b22:	fa1f f78c 	uxth.w	r7, ip
   21b26:	fb08 e316 	mls	r3, r8, r6, lr
   21b2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   21b2e:	fb06 f107 	mul.w	r1, r6, r7
   21b32:	4299      	cmp	r1, r3
   21b34:	d90a      	bls.n	21b4c <__udivmoddi4+0x64>
   21b36:	eb1c 0303 	adds.w	r3, ip, r3
   21b3a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   21b3e:	f080 811f 	bcs.w	21d80 <__udivmoddi4+0x298>
   21b42:	4299      	cmp	r1, r3
   21b44:	f240 811c 	bls.w	21d80 <__udivmoddi4+0x298>
   21b48:	3e02      	subs	r6, #2
   21b4a:	4463      	add	r3, ip
   21b4c:	1a5b      	subs	r3, r3, r1
   21b4e:	b2a4      	uxth	r4, r4
   21b50:	fbb3 f0f8 	udiv	r0, r3, r8
   21b54:	fb08 3310 	mls	r3, r8, r0, r3
   21b58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   21b5c:	fb00 f707 	mul.w	r7, r0, r7
   21b60:	42a7      	cmp	r7, r4
   21b62:	d90a      	bls.n	21b7a <__udivmoddi4+0x92>
   21b64:	eb1c 0404 	adds.w	r4, ip, r4
   21b68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   21b6c:	f080 810a 	bcs.w	21d84 <__udivmoddi4+0x29c>
   21b70:	42a7      	cmp	r7, r4
   21b72:	f240 8107 	bls.w	21d84 <__udivmoddi4+0x29c>
   21b76:	4464      	add	r4, ip
   21b78:	3802      	subs	r0, #2
   21b7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   21b7e:	1be4      	subs	r4, r4, r7
   21b80:	2600      	movs	r6, #0
   21b82:	b11d      	cbz	r5, 21b8c <__udivmoddi4+0xa4>
   21b84:	40d4      	lsrs	r4, r2
   21b86:	2300      	movs	r3, #0
   21b88:	e9c5 4300 	strd	r4, r3, [r5]
   21b8c:	4631      	mov	r1, r6
   21b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   21b92:	428b      	cmp	r3, r1
   21b94:	d909      	bls.n	21baa <__udivmoddi4+0xc2>
   21b96:	2d00      	cmp	r5, #0
   21b98:	f000 80ef 	beq.w	21d7a <__udivmoddi4+0x292>
   21b9c:	2600      	movs	r6, #0
   21b9e:	e9c5 0100 	strd	r0, r1, [r5]
   21ba2:	4630      	mov	r0, r6
   21ba4:	4631      	mov	r1, r6
   21ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   21baa:	fab3 f683 	clz	r6, r3
   21bae:	2e00      	cmp	r6, #0
   21bb0:	d14a      	bne.n	21c48 <__udivmoddi4+0x160>
   21bb2:	428b      	cmp	r3, r1
   21bb4:	d302      	bcc.n	21bbc <__udivmoddi4+0xd4>
   21bb6:	4282      	cmp	r2, r0
   21bb8:	f200 80f9 	bhi.w	21dae <__udivmoddi4+0x2c6>
   21bbc:	1a84      	subs	r4, r0, r2
   21bbe:	eb61 0303 	sbc.w	r3, r1, r3
   21bc2:	2001      	movs	r0, #1
   21bc4:	469e      	mov	lr, r3
   21bc6:	2d00      	cmp	r5, #0
   21bc8:	d0e0      	beq.n	21b8c <__udivmoddi4+0xa4>
   21bca:	e9c5 4e00 	strd	r4, lr, [r5]
   21bce:	e7dd      	b.n	21b8c <__udivmoddi4+0xa4>
   21bd0:	b902      	cbnz	r2, 21bd4 <__udivmoddi4+0xec>
   21bd2:	deff      	udf	#255	; 0xff
   21bd4:	fab2 f282 	clz	r2, r2
   21bd8:	2a00      	cmp	r2, #0
   21bda:	f040 8092 	bne.w	21d02 <__udivmoddi4+0x21a>
   21bde:	eba1 010c 	sub.w	r1, r1, ip
   21be2:	ea4f 471c 	mov.w	r7, ip, lsr #16
   21be6:	fa1f fe8c 	uxth.w	lr, ip
   21bea:	2601      	movs	r6, #1
   21bec:	0c20      	lsrs	r0, r4, #16
   21bee:	fbb1 f3f7 	udiv	r3, r1, r7
   21bf2:	fb07 1113 	mls	r1, r7, r3, r1
   21bf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   21bfa:	fb0e f003 	mul.w	r0, lr, r3
   21bfe:	4288      	cmp	r0, r1
   21c00:	d908      	bls.n	21c14 <__udivmoddi4+0x12c>
   21c02:	eb1c 0101 	adds.w	r1, ip, r1
   21c06:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   21c0a:	d202      	bcs.n	21c12 <__udivmoddi4+0x12a>
   21c0c:	4288      	cmp	r0, r1
   21c0e:	f200 80cb 	bhi.w	21da8 <__udivmoddi4+0x2c0>
   21c12:	4643      	mov	r3, r8
   21c14:	1a09      	subs	r1, r1, r0
   21c16:	b2a4      	uxth	r4, r4
   21c18:	fbb1 f0f7 	udiv	r0, r1, r7
   21c1c:	fb07 1110 	mls	r1, r7, r0, r1
   21c20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   21c24:	fb0e fe00 	mul.w	lr, lr, r0
   21c28:	45a6      	cmp	lr, r4
   21c2a:	d908      	bls.n	21c3e <__udivmoddi4+0x156>
   21c2c:	eb1c 0404 	adds.w	r4, ip, r4
   21c30:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   21c34:	d202      	bcs.n	21c3c <__udivmoddi4+0x154>
   21c36:	45a6      	cmp	lr, r4
   21c38:	f200 80bb 	bhi.w	21db2 <__udivmoddi4+0x2ca>
   21c3c:	4608      	mov	r0, r1
   21c3e:	eba4 040e 	sub.w	r4, r4, lr
   21c42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   21c46:	e79c      	b.n	21b82 <__udivmoddi4+0x9a>
   21c48:	f1c6 0720 	rsb	r7, r6, #32
   21c4c:	40b3      	lsls	r3, r6
   21c4e:	fa22 fc07 	lsr.w	ip, r2, r7
   21c52:	ea4c 0c03 	orr.w	ip, ip, r3
   21c56:	fa20 f407 	lsr.w	r4, r0, r7
   21c5a:	fa01 f306 	lsl.w	r3, r1, r6
   21c5e:	431c      	orrs	r4, r3
   21c60:	40f9      	lsrs	r1, r7
   21c62:	ea4f 491c 	mov.w	r9, ip, lsr #16
   21c66:	fa00 f306 	lsl.w	r3, r0, r6
   21c6a:	fbb1 f8f9 	udiv	r8, r1, r9
   21c6e:	0c20      	lsrs	r0, r4, #16
   21c70:	fa1f fe8c 	uxth.w	lr, ip
   21c74:	fb09 1118 	mls	r1, r9, r8, r1
   21c78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   21c7c:	fb08 f00e 	mul.w	r0, r8, lr
   21c80:	4288      	cmp	r0, r1
   21c82:	fa02 f206 	lsl.w	r2, r2, r6
   21c86:	d90b      	bls.n	21ca0 <__udivmoddi4+0x1b8>
   21c88:	eb1c 0101 	adds.w	r1, ip, r1
   21c8c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   21c90:	f080 8088 	bcs.w	21da4 <__udivmoddi4+0x2bc>
   21c94:	4288      	cmp	r0, r1
   21c96:	f240 8085 	bls.w	21da4 <__udivmoddi4+0x2bc>
   21c9a:	f1a8 0802 	sub.w	r8, r8, #2
   21c9e:	4461      	add	r1, ip
   21ca0:	1a09      	subs	r1, r1, r0
   21ca2:	b2a4      	uxth	r4, r4
   21ca4:	fbb1 f0f9 	udiv	r0, r1, r9
   21ca8:	fb09 1110 	mls	r1, r9, r0, r1
   21cac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   21cb0:	fb00 fe0e 	mul.w	lr, r0, lr
   21cb4:	458e      	cmp	lr, r1
   21cb6:	d908      	bls.n	21cca <__udivmoddi4+0x1e2>
   21cb8:	eb1c 0101 	adds.w	r1, ip, r1
   21cbc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
   21cc0:	d26c      	bcs.n	21d9c <__udivmoddi4+0x2b4>
   21cc2:	458e      	cmp	lr, r1
   21cc4:	d96a      	bls.n	21d9c <__udivmoddi4+0x2b4>
   21cc6:	3802      	subs	r0, #2
   21cc8:	4461      	add	r1, ip
   21cca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   21cce:	fba0 9402 	umull	r9, r4, r0, r2
   21cd2:	eba1 010e 	sub.w	r1, r1, lr
   21cd6:	42a1      	cmp	r1, r4
   21cd8:	46c8      	mov	r8, r9
   21cda:	46a6      	mov	lr, r4
   21cdc:	d356      	bcc.n	21d8c <__udivmoddi4+0x2a4>
   21cde:	d053      	beq.n	21d88 <__udivmoddi4+0x2a0>
   21ce0:	b15d      	cbz	r5, 21cfa <__udivmoddi4+0x212>
   21ce2:	ebb3 0208 	subs.w	r2, r3, r8
   21ce6:	eb61 010e 	sbc.w	r1, r1, lr
   21cea:	fa01 f707 	lsl.w	r7, r1, r7
   21cee:	fa22 f306 	lsr.w	r3, r2, r6
   21cf2:	40f1      	lsrs	r1, r6
   21cf4:	431f      	orrs	r7, r3
   21cf6:	e9c5 7100 	strd	r7, r1, [r5]
   21cfa:	2600      	movs	r6, #0
   21cfc:	4631      	mov	r1, r6
   21cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   21d02:	f1c2 0320 	rsb	r3, r2, #32
   21d06:	40d8      	lsrs	r0, r3
   21d08:	fa0c fc02 	lsl.w	ip, ip, r2
   21d0c:	fa21 f303 	lsr.w	r3, r1, r3
   21d10:	4091      	lsls	r1, r2
   21d12:	4301      	orrs	r1, r0
   21d14:	ea4f 471c 	mov.w	r7, ip, lsr #16
   21d18:	fa1f fe8c 	uxth.w	lr, ip
   21d1c:	fbb3 f0f7 	udiv	r0, r3, r7
   21d20:	fb07 3610 	mls	r6, r7, r0, r3
   21d24:	0c0b      	lsrs	r3, r1, #16
   21d26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   21d2a:	fb00 f60e 	mul.w	r6, r0, lr
   21d2e:	429e      	cmp	r6, r3
   21d30:	fa04 f402 	lsl.w	r4, r4, r2
   21d34:	d908      	bls.n	21d48 <__udivmoddi4+0x260>
   21d36:	eb1c 0303 	adds.w	r3, ip, r3
   21d3a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
   21d3e:	d22f      	bcs.n	21da0 <__udivmoddi4+0x2b8>
   21d40:	429e      	cmp	r6, r3
   21d42:	d92d      	bls.n	21da0 <__udivmoddi4+0x2b8>
   21d44:	3802      	subs	r0, #2
   21d46:	4463      	add	r3, ip
   21d48:	1b9b      	subs	r3, r3, r6
   21d4a:	b289      	uxth	r1, r1
   21d4c:	fbb3 f6f7 	udiv	r6, r3, r7
   21d50:	fb07 3316 	mls	r3, r7, r6, r3
   21d54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   21d58:	fb06 f30e 	mul.w	r3, r6, lr
   21d5c:	428b      	cmp	r3, r1
   21d5e:	d908      	bls.n	21d72 <__udivmoddi4+0x28a>
   21d60:	eb1c 0101 	adds.w	r1, ip, r1
   21d64:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
   21d68:	d216      	bcs.n	21d98 <__udivmoddi4+0x2b0>
   21d6a:	428b      	cmp	r3, r1
   21d6c:	d914      	bls.n	21d98 <__udivmoddi4+0x2b0>
   21d6e:	3e02      	subs	r6, #2
   21d70:	4461      	add	r1, ip
   21d72:	1ac9      	subs	r1, r1, r3
   21d74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   21d78:	e738      	b.n	21bec <__udivmoddi4+0x104>
   21d7a:	462e      	mov	r6, r5
   21d7c:	4628      	mov	r0, r5
   21d7e:	e705      	b.n	21b8c <__udivmoddi4+0xa4>
   21d80:	4606      	mov	r6, r0
   21d82:	e6e3      	b.n	21b4c <__udivmoddi4+0x64>
   21d84:	4618      	mov	r0, r3
   21d86:	e6f8      	b.n	21b7a <__udivmoddi4+0x92>
   21d88:	454b      	cmp	r3, r9
   21d8a:	d2a9      	bcs.n	21ce0 <__udivmoddi4+0x1f8>
   21d8c:	ebb9 0802 	subs.w	r8, r9, r2
   21d90:	eb64 0e0c 	sbc.w	lr, r4, ip
   21d94:	3801      	subs	r0, #1
   21d96:	e7a3      	b.n	21ce0 <__udivmoddi4+0x1f8>
   21d98:	4646      	mov	r6, r8
   21d9a:	e7ea      	b.n	21d72 <__udivmoddi4+0x28a>
   21d9c:	4620      	mov	r0, r4
   21d9e:	e794      	b.n	21cca <__udivmoddi4+0x1e2>
   21da0:	4640      	mov	r0, r8
   21da2:	e7d1      	b.n	21d48 <__udivmoddi4+0x260>
   21da4:	46d0      	mov	r8, sl
   21da6:	e77b      	b.n	21ca0 <__udivmoddi4+0x1b8>
   21da8:	3b02      	subs	r3, #2
   21daa:	4461      	add	r1, ip
   21dac:	e732      	b.n	21c14 <__udivmoddi4+0x12c>
   21dae:	4630      	mov	r0, r6
   21db0:	e709      	b.n	21bc6 <__udivmoddi4+0xde>
   21db2:	4464      	add	r4, ip
   21db4:	3802      	subs	r0, #2
   21db6:	e742      	b.n	21c3e <__udivmoddi4+0x156>

00021db8 <__aeabi_idiv0>:
   21db8:	4770      	bx	lr
   21dba:	bf00      	nop

00021dbc <fabs>:
   21dbc:	ec51 0b10 	vmov	r0, r1, d0
   21dc0:	ee10 2a10 	vmov	r2, s0
   21dc4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   21dc8:	ec43 2b10 	vmov	d0, r2, r3
   21dcc:	4770      	bx	lr
   21dce:	bf00      	nop

00021dd0 <ceilf>:
   21dd0:	ee10 2a10 	vmov	r2, s0
   21dd4:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   21dd8:	3b7f      	subs	r3, #127	; 0x7f
   21dda:	2b16      	cmp	r3, #22
   21ddc:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   21de0:	dc2f      	bgt.n	21e42 <ceilf+0x72>
   21de2:	2b00      	cmp	r3, #0
   21de4:	db18      	blt.n	21e18 <ceilf+0x48>
   21de6:	491a      	ldr	r1, [pc, #104]	; (21e50 <ceilf+0x80>)
   21de8:	4119      	asrs	r1, r3
   21dea:	420a      	tst	r2, r1
   21dec:	d028      	beq.n	21e40 <ceilf+0x70>
   21dee:	eddf 7a19 	vldr	s15, [pc, #100]	; 21e54 <ceilf+0x84>
   21df2:	ee70 7a27 	vadd.f32	s15, s0, s15
   21df6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   21dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   21dfe:	dd1f      	ble.n	21e40 <ceilf+0x70>
   21e00:	2a00      	cmp	r2, #0
   21e02:	dd04      	ble.n	21e0e <ceilf+0x3e>
   21e04:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   21e08:	fa40 f303 	asr.w	r3, r0, r3
   21e0c:	441a      	add	r2, r3
   21e0e:	ea22 0301 	bic.w	r3, r2, r1
   21e12:	ee00 3a10 	vmov	s0, r3
   21e16:	4770      	bx	lr
   21e18:	eddf 7a0e 	vldr	s15, [pc, #56]	; 21e54 <ceilf+0x84>
   21e1c:	ee70 7a27 	vadd.f32	s15, s0, s15
   21e20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   21e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   21e28:	dd0a      	ble.n	21e40 <ceilf+0x70>
   21e2a:	2a00      	cmp	r2, #0
   21e2c:	db06      	blt.n	21e3c <ceilf+0x6c>
   21e2e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   21e32:	2900      	cmp	r1, #0
   21e34:	bf18      	it	ne
   21e36:	eeb0 0a67 	vmovne.f32	s0, s15
   21e3a:	4770      	bx	lr
   21e3c:	ed9f 0a06 	vldr	s0, [pc, #24]	; 21e58 <ceilf+0x88>
   21e40:	4770      	bx	lr
   21e42:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   21e46:	d3fb      	bcc.n	21e40 <ceilf+0x70>
   21e48:	ee30 0a00 	vadd.f32	s0, s0, s0
   21e4c:	4770      	bx	lr
   21e4e:	bf00      	nop
   21e50:	007fffff 	.word	0x007fffff
   21e54:	7149f2ca 	.word	0x7149f2ca
   21e58:	80000000 	.word	0x80000000

00021e5c <asin>:
   21e5c:	b538      	push	{r3, r4, r5, lr}
   21e5e:	ed2d 8b02 	vpush	{d8}
   21e62:	ec55 4b10 	vmov	r4, r5, d0
   21e66:	f000 f8a7 	bl	21fb8 <__ieee754_asin>
   21e6a:	4b17      	ldr	r3, [pc, #92]	; (21ec8 <asin+0x6c>)
   21e6c:	eeb0 8a40 	vmov.f32	s16, s0
   21e70:	eef0 8a60 	vmov.f32	s17, s1
   21e74:	f993 3000 	ldrsb.w	r3, [r3]
   21e78:	3301      	adds	r3, #1
   21e7a:	d011      	beq.n	21ea0 <asin+0x44>
   21e7c:	4622      	mov	r2, r4
   21e7e:	462b      	mov	r3, r5
   21e80:	4620      	mov	r0, r4
   21e82:	4629      	mov	r1, r5
   21e84:	f7ff fcc4 	bl	21810 <__aeabi_dcmpun>
   21e88:	b950      	cbnz	r0, 21ea0 <asin+0x44>
   21e8a:	ec45 4b10 	vmov	d0, r4, r5
   21e8e:	f7ff ff95 	bl	21dbc <fabs>
   21e92:	4b0e      	ldr	r3, [pc, #56]	; (21ecc <asin+0x70>)
   21e94:	ec51 0b10 	vmov	r0, r1, d0
   21e98:	2200      	movs	r2, #0
   21e9a:	f7ff fcaf 	bl	217fc <__aeabi_dcmpgt>
   21e9e:	b930      	cbnz	r0, 21eae <asin+0x52>
   21ea0:	eeb0 0a48 	vmov.f32	s0, s16
   21ea4:	eef0 0a68 	vmov.f32	s1, s17
   21ea8:	ecbd 8b02 	vpop	{d8}
   21eac:	bd38      	pop	{r3, r4, r5, pc}
   21eae:	f000 fe4d 	bl	22b4c <__errno>
   21eb2:	ecbd 8b02 	vpop	{d8}
   21eb6:	4603      	mov	r3, r0
   21eb8:	2221      	movs	r2, #33	; 0x21
   21eba:	601a      	str	r2, [r3, #0]
   21ebc:	4804      	ldr	r0, [pc, #16]	; (21ed0 <asin+0x74>)
   21ebe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   21ec2:	f000 bd35 	b.w	22930 <nan>
   21ec6:	bf00      	nop
   21ec8:	20001014 	.word	0x20001014
   21ecc:	3ff00000 	.word	0x3ff00000
   21ed0:	000235d8 	.word	0x000235d8

00021ed4 <fmod>:
   21ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21ed6:	ed2d 8b02 	vpush	{d8}
   21eda:	ec57 6b10 	vmov	r6, r7, d0
   21ede:	ec55 4b11 	vmov	r4, r5, d1
   21ee2:	f000 fabb 	bl	2245c <__ieee754_fmod>
   21ee6:	4b18      	ldr	r3, [pc, #96]	; (21f48 <fmod+0x74>)
   21ee8:	eeb0 8a40 	vmov.f32	s16, s0
   21eec:	eef0 8a60 	vmov.f32	s17, s1
   21ef0:	f993 3000 	ldrsb.w	r3, [r3]
   21ef4:	3301      	adds	r3, #1
   21ef6:	d00d      	beq.n	21f14 <fmod+0x40>
   21ef8:	4630      	mov	r0, r6
   21efa:	4639      	mov	r1, r7
   21efc:	4622      	mov	r2, r4
   21efe:	462b      	mov	r3, r5
   21f00:	f7ff fc86 	bl	21810 <__aeabi_dcmpun>
   21f04:	b930      	cbnz	r0, 21f14 <fmod+0x40>
   21f06:	2200      	movs	r2, #0
   21f08:	2300      	movs	r3, #0
   21f0a:	4620      	mov	r0, r4
   21f0c:	4629      	mov	r1, r5
   21f0e:	f7ff fc4d 	bl	217ac <__aeabi_dcmpeq>
   21f12:	b930      	cbnz	r0, 21f22 <fmod+0x4e>
   21f14:	eeb0 0a48 	vmov.f32	s0, s16
   21f18:	eef0 0a68 	vmov.f32	s1, s17
   21f1c:	ecbd 8b02 	vpop	{d8}
   21f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21f22:	f000 fe13 	bl	22b4c <__errno>
   21f26:	2200      	movs	r2, #0
   21f28:	2300      	movs	r3, #0
   21f2a:	2121      	movs	r1, #33	; 0x21
   21f2c:	6001      	str	r1, [r0, #0]
   21f2e:	4610      	mov	r0, r2
   21f30:	4619      	mov	r1, r3
   21f32:	f7ff fafd 	bl	21530 <__aeabi_ddiv>
   21f36:	ec41 0b18 	vmov	d8, r0, r1
   21f3a:	eeb0 0a48 	vmov.f32	s0, s16
   21f3e:	eef0 0a68 	vmov.f32	s1, s17
   21f42:	ecbd 8b02 	vpop	{d8}
   21f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21f48:	20001014 	.word	0x20001014

00021f4c <log10f>:
   21f4c:	b508      	push	{r3, lr}
   21f4e:	ed2d 8b02 	vpush	{d8}
   21f52:	eeb0 8a40 	vmov.f32	s16, s0
   21f56:	f000 fc8b 	bl	22870 <__ieee754_log10f>
   21f5a:	4b14      	ldr	r3, [pc, #80]	; (21fac <log10f+0x60>)
   21f5c:	f993 3000 	ldrsb.w	r3, [r3]
   21f60:	3301      	adds	r3, #1
   21f62:	d014      	beq.n	21f8e <log10f+0x42>
   21f64:	eeb4 8a48 	vcmp.f32	s16, s16
   21f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   21f6c:	d60f      	bvs.n	21f8e <log10f+0x42>
   21f6e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   21f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   21f76:	d80a      	bhi.n	21f8e <log10f+0x42>
   21f78:	eeb5 8a40 	vcmp.f32	s16, #0.0
   21f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   21f80:	d108      	bne.n	21f94 <log10f+0x48>
   21f82:	f000 fde3 	bl	22b4c <__errno>
   21f86:	2322      	movs	r3, #34	; 0x22
   21f88:	ed9f 0a09 	vldr	s0, [pc, #36]	; 21fb0 <log10f+0x64>
   21f8c:	6003      	str	r3, [r0, #0]
   21f8e:	ecbd 8b02 	vpop	{d8}
   21f92:	bd08      	pop	{r3, pc}
   21f94:	f000 fdda 	bl	22b4c <__errno>
   21f98:	ecbd 8b02 	vpop	{d8}
   21f9c:	4603      	mov	r3, r0
   21f9e:	2221      	movs	r2, #33	; 0x21
   21fa0:	601a      	str	r2, [r3, #0]
   21fa2:	4804      	ldr	r0, [pc, #16]	; (21fb4 <log10f+0x68>)
   21fa4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   21fa8:	f000 bcca 	b.w	22940 <nanf>
   21fac:	20001014 	.word	0x20001014
   21fb0:	ff800000 	.word	0xff800000
   21fb4:	000235d8 	.word	0x000235d8

00021fb8 <__ieee754_asin>:
   21fb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21fbc:	ec55 4b10 	vmov	r4, r5, d0
   21fc0:	4bcf      	ldr	r3, [pc, #828]	; (22300 <__ieee754_asin+0x348>)
   21fc2:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
   21fc6:	429f      	cmp	r7, r3
   21fc8:	ed2d 8b04 	vpush	{d8-d9}
   21fcc:	dd37      	ble.n	2203e <__ieee754_asin+0x86>
   21fce:	ee10 3a10 	vmov	r3, s0
   21fd2:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
   21fd6:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
   21fda:	433b      	orrs	r3, r7
   21fdc:	d010      	beq.n	22000 <__ieee754_asin+0x48>
   21fde:	ee10 2a10 	vmov	r2, s0
   21fe2:	462b      	mov	r3, r5
   21fe4:	4620      	mov	r0, r4
   21fe6:	4629      	mov	r1, r5
   21fe8:	f7fe ffc0 	bl	20f6c <__aeabi_dsub>
   21fec:	4602      	mov	r2, r0
   21fee:	460b      	mov	r3, r1
   21ff0:	f7ff fa9e 	bl	21530 <__aeabi_ddiv>
   21ff4:	ec41 0b10 	vmov	d0, r0, r1
   21ff8:	ecbd 8b04 	vpop	{d8-d9}
   21ffc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22000:	ee10 0a10 	vmov	r0, s0
   22004:	a3a2      	add	r3, pc, #648	; (adr r3, 22290 <__ieee754_asin+0x2d8>)
   22006:	e9d3 2300 	ldrd	r2, r3, [r3]
   2200a:	4629      	mov	r1, r5
   2200c:	f7ff f966 	bl	212dc <__aeabi_dmul>
   22010:	4602      	mov	r2, r0
   22012:	460b      	mov	r3, r1
   22014:	4620      	mov	r0, r4
   22016:	4629      	mov	r1, r5
   22018:	4614      	mov	r4, r2
   2201a:	461d      	mov	r5, r3
   2201c:	a39e      	add	r3, pc, #632	; (adr r3, 22298 <__ieee754_asin+0x2e0>)
   2201e:	e9d3 2300 	ldrd	r2, r3, [r3]
   22022:	f7ff f95b 	bl	212dc <__aeabi_dmul>
   22026:	4602      	mov	r2, r0
   22028:	460b      	mov	r3, r1
   2202a:	4620      	mov	r0, r4
   2202c:	4629      	mov	r1, r5
   2202e:	f7fe ff9f 	bl	20f70 <__adddf3>
   22032:	ecbd 8b04 	vpop	{d8-d9}
   22036:	ec41 0b10 	vmov	d0, r0, r1
   2203a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2203e:	4bb1      	ldr	r3, [pc, #708]	; (22304 <__ieee754_asin+0x34c>)
   22040:	429f      	cmp	r7, r3
   22042:	462e      	mov	r6, r5
   22044:	dc12      	bgt.n	2206c <__ieee754_asin+0xb4>
   22046:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
   2204a:	f280 8163 	bge.w	22314 <__ieee754_asin+0x35c>
   2204e:	a394      	add	r3, pc, #592	; (adr r3, 222a0 <__ieee754_asin+0x2e8>)
   22050:	e9d3 2300 	ldrd	r2, r3, [r3]
   22054:	ee10 0a10 	vmov	r0, s0
   22058:	4629      	mov	r1, r5
   2205a:	f7fe ff89 	bl	20f70 <__adddf3>
   2205e:	4baa      	ldr	r3, [pc, #680]	; (22308 <__ieee754_asin+0x350>)
   22060:	2200      	movs	r2, #0
   22062:	f7ff fbcb 	bl	217fc <__aeabi_dcmpgt>
   22066:	2800      	cmp	r0, #0
   22068:	f040 810c 	bne.w	22284 <__ieee754_asin+0x2cc>
   2206c:	ec45 4b10 	vmov	d0, r4, r5
   22070:	f7ff fea4 	bl	21dbc <fabs>
   22074:	49a4      	ldr	r1, [pc, #656]	; (22308 <__ieee754_asin+0x350>)
   22076:	ec53 2b10 	vmov	r2, r3, d0
   2207a:	2000      	movs	r0, #0
   2207c:	f7fe ff76 	bl	20f6c <__aeabi_dsub>
   22080:	4ba2      	ldr	r3, [pc, #648]	; (2230c <__ieee754_asin+0x354>)
   22082:	2200      	movs	r2, #0
   22084:	f7ff f92a 	bl	212dc <__aeabi_dmul>
   22088:	a387      	add	r3, pc, #540	; (adr r3, 222a8 <__ieee754_asin+0x2f0>)
   2208a:	e9d3 2300 	ldrd	r2, r3, [r3]
   2208e:	4604      	mov	r4, r0
   22090:	460d      	mov	r5, r1
   22092:	f7ff f923 	bl	212dc <__aeabi_dmul>
   22096:	a386      	add	r3, pc, #536	; (adr r3, 222b0 <__ieee754_asin+0x2f8>)
   22098:	e9d3 2300 	ldrd	r2, r3, [r3]
   2209c:	f7fe ff68 	bl	20f70 <__adddf3>
   220a0:	4622      	mov	r2, r4
   220a2:	462b      	mov	r3, r5
   220a4:	f7ff f91a 	bl	212dc <__aeabi_dmul>
   220a8:	a383      	add	r3, pc, #524	; (adr r3, 222b8 <__ieee754_asin+0x300>)
   220aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   220ae:	f7fe ff5d 	bl	20f6c <__aeabi_dsub>
   220b2:	4622      	mov	r2, r4
   220b4:	462b      	mov	r3, r5
   220b6:	f7ff f911 	bl	212dc <__aeabi_dmul>
   220ba:	a381      	add	r3, pc, #516	; (adr r3, 222c0 <__ieee754_asin+0x308>)
   220bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   220c0:	f7fe ff56 	bl	20f70 <__adddf3>
   220c4:	4622      	mov	r2, r4
   220c6:	462b      	mov	r3, r5
   220c8:	f7ff f908 	bl	212dc <__aeabi_dmul>
   220cc:	a37e      	add	r3, pc, #504	; (adr r3, 222c8 <__ieee754_asin+0x310>)
   220ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   220d2:	f7fe ff4b 	bl	20f6c <__aeabi_dsub>
   220d6:	4622      	mov	r2, r4
   220d8:	462b      	mov	r3, r5
   220da:	f7ff f8ff 	bl	212dc <__aeabi_dmul>
   220de:	a37c      	add	r3, pc, #496	; (adr r3, 222d0 <__ieee754_asin+0x318>)
   220e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   220e4:	f7fe ff44 	bl	20f70 <__adddf3>
   220e8:	4622      	mov	r2, r4
   220ea:	462b      	mov	r3, r5
   220ec:	f7ff f8f6 	bl	212dc <__aeabi_dmul>
   220f0:	a379      	add	r3, pc, #484	; (adr r3, 222d8 <__ieee754_asin+0x320>)
   220f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   220f6:	ec41 0b18 	vmov	d8, r0, r1
   220fa:	ec41 0b19 	vmov	d9, r0, r1
   220fe:	4620      	mov	r0, r4
   22100:	4629      	mov	r1, r5
   22102:	f7ff f8eb 	bl	212dc <__aeabi_dmul>
   22106:	a376      	add	r3, pc, #472	; (adr r3, 222e0 <__ieee754_asin+0x328>)
   22108:	e9d3 2300 	ldrd	r2, r3, [r3]
   2210c:	f7fe ff2e 	bl	20f6c <__aeabi_dsub>
   22110:	4622      	mov	r2, r4
   22112:	462b      	mov	r3, r5
   22114:	f7ff f8e2 	bl	212dc <__aeabi_dmul>
   22118:	a373      	add	r3, pc, #460	; (adr r3, 222e8 <__ieee754_asin+0x330>)
   2211a:	e9d3 2300 	ldrd	r2, r3, [r3]
   2211e:	f7fe ff27 	bl	20f70 <__adddf3>
   22122:	4622      	mov	r2, r4
   22124:	462b      	mov	r3, r5
   22126:	f7ff f8d9 	bl	212dc <__aeabi_dmul>
   2212a:	a371      	add	r3, pc, #452	; (adr r3, 222f0 <__ieee754_asin+0x338>)
   2212c:	e9d3 2300 	ldrd	r2, r3, [r3]
   22130:	f7fe ff1c 	bl	20f6c <__aeabi_dsub>
   22134:	4622      	mov	r2, r4
   22136:	462b      	mov	r3, r5
   22138:	f7ff f8d0 	bl	212dc <__aeabi_dmul>
   2213c:	4b72      	ldr	r3, [pc, #456]	; (22308 <__ieee754_asin+0x350>)
   2213e:	2200      	movs	r2, #0
   22140:	f7fe ff16 	bl	20f70 <__adddf3>
   22144:	ec45 4b10 	vmov	d0, r4, r5
   22148:	4680      	mov	r8, r0
   2214a:	4689      	mov	r9, r1
   2214c:	f000 fac4 	bl	226d8 <__ieee754_sqrt>
   22150:	4b6f      	ldr	r3, [pc, #444]	; (22310 <__ieee754_asin+0x358>)
   22152:	429f      	cmp	r7, r3
   22154:	ec5b ab10 	vmov	sl, fp, d0
   22158:	dc73      	bgt.n	22242 <__ieee754_asin+0x28a>
   2215a:	465b      	mov	r3, fp
   2215c:	2200      	movs	r2, #0
   2215e:	ee10 0a10 	vmov	r0, s0
   22162:	ec43 2b18 	vmov	d8, r2, r3
   22166:	4659      	mov	r1, fp
   22168:	ee10 2a10 	vmov	r2, s0
   2216c:	f7fe ff00 	bl	20f70 <__adddf3>
   22170:	4642      	mov	r2, r8
   22172:	464b      	mov	r3, r9
   22174:	4680      	mov	r8, r0
   22176:	4689      	mov	r9, r1
   22178:	ec51 0b19 	vmov	r0, r1, d9
   2217c:	f7ff f9d8 	bl	21530 <__aeabi_ddiv>
   22180:	4602      	mov	r2, r0
   22182:	460b      	mov	r3, r1
   22184:	4640      	mov	r0, r8
   22186:	4649      	mov	r1, r9
   22188:	f7ff f8a8 	bl	212dc <__aeabi_dmul>
   2218c:	ec53 2b18 	vmov	r2, r3, d8
   22190:	4680      	mov	r8, r0
   22192:	4689      	mov	r9, r1
   22194:	ec51 0b18 	vmov	r0, r1, d8
   22198:	f7ff f8a0 	bl	212dc <__aeabi_dmul>
   2219c:	4602      	mov	r2, r0
   2219e:	460b      	mov	r3, r1
   221a0:	4620      	mov	r0, r4
   221a2:	4629      	mov	r1, r5
   221a4:	f7fe fee2 	bl	20f6c <__aeabi_dsub>
   221a8:	ec53 2b18 	vmov	r2, r3, d8
   221ac:	4604      	mov	r4, r0
   221ae:	460d      	mov	r5, r1
   221b0:	4650      	mov	r0, sl
   221b2:	4659      	mov	r1, fp
   221b4:	f7fe fedc 	bl	20f70 <__adddf3>
   221b8:	4602      	mov	r2, r0
   221ba:	460b      	mov	r3, r1
   221bc:	4620      	mov	r0, r4
   221be:	4629      	mov	r1, r5
   221c0:	f7ff f9b6 	bl	21530 <__aeabi_ddiv>
   221c4:	4602      	mov	r2, r0
   221c6:	460b      	mov	r3, r1
   221c8:	f7fe fed2 	bl	20f70 <__adddf3>
   221cc:	4602      	mov	r2, r0
   221ce:	460b      	mov	r3, r1
   221d0:	a131      	add	r1, pc, #196	; (adr r1, 22298 <__ieee754_asin+0x2e0>)
   221d2:	e9d1 0100 	ldrd	r0, r1, [r1]
   221d6:	f7fe fec9 	bl	20f6c <__aeabi_dsub>
   221da:	4602      	mov	r2, r0
   221dc:	460b      	mov	r3, r1
   221de:	4640      	mov	r0, r8
   221e0:	4649      	mov	r1, r9
   221e2:	f7fe fec3 	bl	20f6c <__aeabi_dsub>
   221e6:	ec53 2b18 	vmov	r2, r3, d8
   221ea:	4604      	mov	r4, r0
   221ec:	460d      	mov	r5, r1
   221ee:	ee18 0a10 	vmov	r0, s16
   221f2:	4619      	mov	r1, r3
   221f4:	f7fe febc 	bl	20f70 <__adddf3>
   221f8:	4602      	mov	r2, r0
   221fa:	460b      	mov	r3, r1
   221fc:	a13e      	add	r1, pc, #248	; (adr r1, 222f8 <__ieee754_asin+0x340>)
   221fe:	e9d1 0100 	ldrd	r0, r1, [r1]
   22202:	f7fe feb3 	bl	20f6c <__aeabi_dsub>
   22206:	4602      	mov	r2, r0
   22208:	460b      	mov	r3, r1
   2220a:	4620      	mov	r0, r4
   2220c:	4629      	mov	r1, r5
   2220e:	f7fe fead 	bl	20f6c <__aeabi_dsub>
   22212:	4602      	mov	r2, r0
   22214:	460b      	mov	r3, r1
   22216:	a138      	add	r1, pc, #224	; (adr r1, 222f8 <__ieee754_asin+0x340>)
   22218:	e9d1 0100 	ldrd	r0, r1, [r1]
   2221c:	f7fe fea6 	bl	20f6c <__aeabi_dsub>
   22220:	ec41 0b10 	vmov	d0, r0, r1
   22224:	2e00      	cmp	r6, #0
   22226:	f73f aee7 	bgt.w	21ff8 <__ieee754_asin+0x40>
   2222a:	ecbd 8b04 	vpop	{d8-d9}
   2222e:	ee10 1a90 	vmov	r1, s1
   22232:	ee10 2a10 	vmov	r2, s0
   22236:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   2223a:	ec43 2b10 	vmov	d0, r2, r3
   2223e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22242:	4642      	mov	r2, r8
   22244:	464b      	mov	r3, r9
   22246:	ec51 0b18 	vmov	r0, r1, d8
   2224a:	f7ff f971 	bl	21530 <__aeabi_ddiv>
   2224e:	4652      	mov	r2, sl
   22250:	465b      	mov	r3, fp
   22252:	f7ff f843 	bl	212dc <__aeabi_dmul>
   22256:	4652      	mov	r2, sl
   22258:	465b      	mov	r3, fp
   2225a:	f7fe fe89 	bl	20f70 <__adddf3>
   2225e:	4602      	mov	r2, r0
   22260:	460b      	mov	r3, r1
   22262:	f7fe fe85 	bl	20f70 <__adddf3>
   22266:	a30c      	add	r3, pc, #48	; (adr r3, 22298 <__ieee754_asin+0x2e0>)
   22268:	e9d3 2300 	ldrd	r2, r3, [r3]
   2226c:	f7fe fe7e 	bl	20f6c <__aeabi_dsub>
   22270:	4602      	mov	r2, r0
   22272:	460b      	mov	r3, r1
   22274:	a106      	add	r1, pc, #24	; (adr r1, 22290 <__ieee754_asin+0x2d8>)
   22276:	e9d1 0100 	ldrd	r0, r1, [r1]
   2227a:	f7fe fe77 	bl	20f6c <__aeabi_dsub>
   2227e:	ec41 0b10 	vmov	d0, r0, r1
   22282:	e7cf      	b.n	22224 <__ieee754_asin+0x26c>
   22284:	ec45 4b10 	vmov	d0, r4, r5
   22288:	e6b6      	b.n	21ff8 <__ieee754_asin+0x40>
   2228a:	bf00      	nop
   2228c:	f3af 8000 	nop.w
   22290:	54442d18 	.word	0x54442d18
   22294:	3ff921fb 	.word	0x3ff921fb
   22298:	33145c07 	.word	0x33145c07
   2229c:	3c91a626 	.word	0x3c91a626
   222a0:	8800759c 	.word	0x8800759c
   222a4:	7e37e43c 	.word	0x7e37e43c
   222a8:	0dfdf709 	.word	0x0dfdf709
   222ac:	3f023de1 	.word	0x3f023de1
   222b0:	7501b288 	.word	0x7501b288
   222b4:	3f49efe0 	.word	0x3f49efe0
   222b8:	b5688f3b 	.word	0xb5688f3b
   222bc:	3fa48228 	.word	0x3fa48228
   222c0:	0e884455 	.word	0x0e884455
   222c4:	3fc9c155 	.word	0x3fc9c155
   222c8:	03eb6f7d 	.word	0x03eb6f7d
   222cc:	3fd4d612 	.word	0x3fd4d612
   222d0:	55555555 	.word	0x55555555
   222d4:	3fc55555 	.word	0x3fc55555
   222d8:	b12e9282 	.word	0xb12e9282
   222dc:	3fb3b8c5 	.word	0x3fb3b8c5
   222e0:	1b8d0159 	.word	0x1b8d0159
   222e4:	3fe6066c 	.word	0x3fe6066c
   222e8:	9c598ac8 	.word	0x9c598ac8
   222ec:	40002ae5 	.word	0x40002ae5
   222f0:	1c8a2d4b 	.word	0x1c8a2d4b
   222f4:	40033a27 	.word	0x40033a27
   222f8:	54442d18 	.word	0x54442d18
   222fc:	3fe921fb 	.word	0x3fe921fb
   22300:	3fefffff 	.word	0x3fefffff
   22304:	3fdfffff 	.word	0x3fdfffff
   22308:	3ff00000 	.word	0x3ff00000
   2230c:	3fe00000 	.word	0x3fe00000
   22310:	3fef3332 	.word	0x3fef3332
   22314:	ee10 2a10 	vmov	r2, s0
   22318:	ee10 0a10 	vmov	r0, s0
   2231c:	462b      	mov	r3, r5
   2231e:	4629      	mov	r1, r5
   22320:	f7fe ffdc 	bl	212dc <__aeabi_dmul>
   22324:	a339      	add	r3, pc, #228	; (adr r3, 2240c <__ieee754_asin+0x454>)
   22326:	e9d3 2300 	ldrd	r2, r3, [r3]
   2232a:	4606      	mov	r6, r0
   2232c:	460f      	mov	r7, r1
   2232e:	f7fe ffd5 	bl	212dc <__aeabi_dmul>
   22332:	a338      	add	r3, pc, #224	; (adr r3, 22414 <__ieee754_asin+0x45c>)
   22334:	e9d3 2300 	ldrd	r2, r3, [r3]
   22338:	f7fe fe1a 	bl	20f70 <__adddf3>
   2233c:	4632      	mov	r2, r6
   2233e:	463b      	mov	r3, r7
   22340:	f7fe ffcc 	bl	212dc <__aeabi_dmul>
   22344:	a335      	add	r3, pc, #212	; (adr r3, 2241c <__ieee754_asin+0x464>)
   22346:	e9d3 2300 	ldrd	r2, r3, [r3]
   2234a:	f7fe fe0f 	bl	20f6c <__aeabi_dsub>
   2234e:	4632      	mov	r2, r6
   22350:	463b      	mov	r3, r7
   22352:	f7fe ffc3 	bl	212dc <__aeabi_dmul>
   22356:	a333      	add	r3, pc, #204	; (adr r3, 22424 <__ieee754_asin+0x46c>)
   22358:	e9d3 2300 	ldrd	r2, r3, [r3]
   2235c:	f7fe fe08 	bl	20f70 <__adddf3>
   22360:	4632      	mov	r2, r6
   22362:	463b      	mov	r3, r7
   22364:	f7fe ffba 	bl	212dc <__aeabi_dmul>
   22368:	a330      	add	r3, pc, #192	; (adr r3, 2242c <__ieee754_asin+0x474>)
   2236a:	e9d3 2300 	ldrd	r2, r3, [r3]
   2236e:	f7fe fdfd 	bl	20f6c <__aeabi_dsub>
   22372:	4632      	mov	r2, r6
   22374:	463b      	mov	r3, r7
   22376:	f7fe ffb1 	bl	212dc <__aeabi_dmul>
   2237a:	a32e      	add	r3, pc, #184	; (adr r3, 22434 <__ieee754_asin+0x47c>)
   2237c:	e9d3 2300 	ldrd	r2, r3, [r3]
   22380:	f7fe fdf6 	bl	20f70 <__adddf3>
   22384:	4632      	mov	r2, r6
   22386:	463b      	mov	r3, r7
   22388:	f7fe ffa8 	bl	212dc <__aeabi_dmul>
   2238c:	a32b      	add	r3, pc, #172	; (adr r3, 2243c <__ieee754_asin+0x484>)
   2238e:	e9d3 2300 	ldrd	r2, r3, [r3]
   22392:	4680      	mov	r8, r0
   22394:	4689      	mov	r9, r1
   22396:	4630      	mov	r0, r6
   22398:	4639      	mov	r1, r7
   2239a:	f7fe ff9f 	bl	212dc <__aeabi_dmul>
   2239e:	a329      	add	r3, pc, #164	; (adr r3, 22444 <__ieee754_asin+0x48c>)
   223a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   223a4:	f7fe fde2 	bl	20f6c <__aeabi_dsub>
   223a8:	4632      	mov	r2, r6
   223aa:	463b      	mov	r3, r7
   223ac:	f7fe ff96 	bl	212dc <__aeabi_dmul>
   223b0:	a326      	add	r3, pc, #152	; (adr r3, 2244c <__ieee754_asin+0x494>)
   223b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   223b6:	f7fe fddb 	bl	20f70 <__adddf3>
   223ba:	4632      	mov	r2, r6
   223bc:	463b      	mov	r3, r7
   223be:	f7fe ff8d 	bl	212dc <__aeabi_dmul>
   223c2:	a324      	add	r3, pc, #144	; (adr r3, 22454 <__ieee754_asin+0x49c>)
   223c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   223c8:	f7fe fdd0 	bl	20f6c <__aeabi_dsub>
   223cc:	4632      	mov	r2, r6
   223ce:	463b      	mov	r3, r7
   223d0:	f7fe ff84 	bl	212dc <__aeabi_dmul>
   223d4:	4b0c      	ldr	r3, [pc, #48]	; (22408 <__ieee754_asin+0x450>)
   223d6:	2200      	movs	r2, #0
   223d8:	f7fe fdca 	bl	20f70 <__adddf3>
   223dc:	4602      	mov	r2, r0
   223de:	460b      	mov	r3, r1
   223e0:	4640      	mov	r0, r8
   223e2:	4649      	mov	r1, r9
   223e4:	f7ff f8a4 	bl	21530 <__aeabi_ddiv>
   223e8:	4622      	mov	r2, r4
   223ea:	462b      	mov	r3, r5
   223ec:	f7fe ff76 	bl	212dc <__aeabi_dmul>
   223f0:	4622      	mov	r2, r4
   223f2:	462b      	mov	r3, r5
   223f4:	f7fe fdbc 	bl	20f70 <__adddf3>
   223f8:	ecbd 8b04 	vpop	{d8-d9}
   223fc:	ec41 0b10 	vmov	d0, r0, r1
   22400:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22404:	f3af 8000 	nop.w
   22408:	3ff00000 	.word	0x3ff00000
   2240c:	0dfdf709 	.word	0x0dfdf709
   22410:	3f023de1 	.word	0x3f023de1
   22414:	7501b288 	.word	0x7501b288
   22418:	3f49efe0 	.word	0x3f49efe0
   2241c:	b5688f3b 	.word	0xb5688f3b
   22420:	3fa48228 	.word	0x3fa48228
   22424:	0e884455 	.word	0x0e884455
   22428:	3fc9c155 	.word	0x3fc9c155
   2242c:	03eb6f7d 	.word	0x03eb6f7d
   22430:	3fd4d612 	.word	0x3fd4d612
   22434:	55555555 	.word	0x55555555
   22438:	3fc55555 	.word	0x3fc55555
   2243c:	b12e9282 	.word	0xb12e9282
   22440:	3fb3b8c5 	.word	0x3fb3b8c5
   22444:	1b8d0159 	.word	0x1b8d0159
   22448:	3fe6066c 	.word	0x3fe6066c
   2244c:	9c598ac8 	.word	0x9c598ac8
   22450:	40002ae5 	.word	0x40002ae5
   22454:	1c8a2d4b 	.word	0x1c8a2d4b
   22458:	40033a27 	.word	0x40033a27

0002245c <__ieee754_fmod>:
   2245c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22460:	ec53 2b11 	vmov	r2, r3, d1
   22464:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
   22468:	ea5e 0402 	orrs.w	r4, lr, r2
   2246c:	ec51 0b10 	vmov	r0, r1, d0
   22470:	d033      	beq.n	224da <__ieee754_fmod+0x7e>
   22472:	4c93      	ldr	r4, [pc, #588]	; (226c0 <__ieee754_fmod+0x264>)
   22474:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
   22478:	45a1      	cmp	r9, r4
   2247a:	4688      	mov	r8, r1
   2247c:	dc2d      	bgt.n	224da <__ieee754_fmod+0x7e>
   2247e:	4254      	negs	r4, r2
   22480:	4e90      	ldr	r6, [pc, #576]	; (226c4 <__ieee754_fmod+0x268>)
   22482:	4314      	orrs	r4, r2
   22484:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
   22488:	42b4      	cmp	r4, r6
   2248a:	ee11 7a10 	vmov	r7, s2
   2248e:	d824      	bhi.n	224da <__ieee754_fmod+0x7e>
   22490:	45f1      	cmp	r9, lr
   22492:	469c      	mov	ip, r3
   22494:	ee11 5a10 	vmov	r5, s2
   22498:	ee10 3a10 	vmov	r3, s0
   2249c:	4602      	mov	r2, r0
   2249e:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
   224a2:	dc06      	bgt.n	224b2 <__ieee754_fmod+0x56>
   224a4:	f2c0 80bd 	blt.w	22622 <__ieee754_fmod+0x1c6>
   224a8:	42b8      	cmp	r0, r7
   224aa:	f0c0 80ba 	bcc.w	22622 <__ieee754_fmod+0x1c6>
   224ae:	f000 80ef 	beq.w	22690 <__ieee754_fmod+0x234>
   224b2:	4984      	ldr	r1, [pc, #528]	; (226c4 <__ieee754_fmod+0x268>)
   224b4:	ea08 0101 	and.w	r1, r8, r1
   224b8:	b9c9      	cbnz	r1, 224ee <__ieee754_fmod+0x92>
   224ba:	f1b9 0f00 	cmp.w	r9, #0
   224be:	f040 80d0 	bne.w	22662 <__ieee754_fmod+0x206>
   224c2:	2b00      	cmp	r3, #0
   224c4:	4618      	mov	r0, r3
   224c6:	f340 80f8 	ble.w	226ba <__ieee754_fmod+0x25e>
   224ca:	f2a1 4113 	subw	r1, r1, #1043	; 0x413
   224ce:	0040      	lsls	r0, r0, #1
   224d0:	2800      	cmp	r0, #0
   224d2:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
   224d6:	dcfa      	bgt.n	224ce <__ieee754_fmod+0x72>
   224d8:	e00d      	b.n	224f6 <__ieee754_fmod+0x9a>
   224da:	f7fe feff 	bl	212dc <__aeabi_dmul>
   224de:	4602      	mov	r2, r0
   224e0:	460b      	mov	r3, r1
   224e2:	f7ff f825 	bl	21530 <__aeabi_ddiv>
   224e6:	ec41 0b10 	vmov	d0, r0, r1
   224ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   224ee:	ea4f 5129 	mov.w	r1, r9, asr #20
   224f2:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   224f6:	4873      	ldr	r0, [pc, #460]	; (226c4 <__ieee754_fmod+0x268>)
   224f8:	ea0c 0000 	and.w	r0, ip, r0
   224fc:	b968      	cbnz	r0, 2251a <__ieee754_fmod+0xbe>
   224fe:	f1be 0f00 	cmp.w	lr, #0
   22502:	f040 80a2 	bne.w	2264a <__ieee754_fmod+0x1ee>
   22506:	2f00      	cmp	r7, #0
   22508:	4e6f      	ldr	r6, [pc, #444]	; (226c8 <__ieee754_fmod+0x26c>)
   2250a:	4638      	mov	r0, r7
   2250c:	dd09      	ble.n	22522 <__ieee754_fmod+0xc6>
   2250e:	0040      	lsls	r0, r0, #1
   22510:	2800      	cmp	r0, #0
   22512:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   22516:	dcfa      	bgt.n	2250e <__ieee754_fmod+0xb2>
   22518:	e003      	b.n	22522 <__ieee754_fmod+0xc6>
   2251a:	ea4f 562e 	mov.w	r6, lr, asr #20
   2251e:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
   22522:	486a      	ldr	r0, [pc, #424]	; (226cc <__ieee754_fmod+0x270>)
   22524:	4281      	cmp	r1, r0
   22526:	db6f      	blt.n	22608 <__ieee754_fmod+0x1ac>
   22528:	f3c8 0313 	ubfx	r3, r8, #0, #20
   2252c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   22530:	4866      	ldr	r0, [pc, #408]	; (226cc <__ieee754_fmod+0x270>)
   22532:	4286      	cmp	r6, r0
   22534:	db58      	blt.n	225e8 <__ieee754_fmod+0x18c>
   22536:	f3cc 0c13 	ubfx	ip, ip, #0, #20
   2253a:	f44c 1c80 	orr.w	ip, ip, #1048576	; 0x100000
   2253e:	1bd0      	subs	r0, r2, r7
   22540:	1b89      	subs	r1, r1, r6
   22542:	d10b      	bne.n	2255c <__ieee754_fmod+0x100>
   22544:	e01d      	b.n	22582 <__ieee754_fmod+0x126>
   22546:	ea50 030e 	orrs.w	r3, r0, lr
   2254a:	d045      	beq.n	225d8 <__ieee754_fmod+0x17c>
   2254c:	ea4f 73de 	mov.w	r3, lr, lsr #31
   22550:	3901      	subs	r1, #1
   22552:	eb03 0340 	add.w	r3, r3, r0, lsl #1
   22556:	ea4f 024e 	mov.w	r2, lr, lsl #1
   2255a:	d011      	beq.n	22580 <__ieee754_fmod+0x124>
   2255c:	eba3 000c 	sub.w	r0, r3, ip
   22560:	4295      	cmp	r5, r2
   22562:	bf88      	it	hi
   22564:	f100 30ff 	addhi.w	r0, r0, #4294967295	; 0xffffffff
   22568:	2800      	cmp	r0, #0
   2256a:	eba2 0e05 	sub.w	lr, r2, r5
   2256e:	ea4f 77d2 	mov.w	r7, r2, lsr #31
   22572:	dae8      	bge.n	22546 <__ieee754_fmod+0xea>
   22574:	3901      	subs	r1, #1
   22576:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   2257a:	ea4f 0242 	mov.w	r2, r2, lsl #1
   2257e:	d1ed      	bne.n	2255c <__ieee754_fmod+0x100>
   22580:	1b50      	subs	r0, r2, r5
   22582:	eba3 0c0c 	sub.w	ip, r3, ip
   22586:	4295      	cmp	r5, r2
   22588:	bf88      	it	hi
   2258a:	f10c 3cff 	addhi.w	ip, ip, #4294967295	; 0xffffffff
   2258e:	f1bc 0f00 	cmp.w	ip, #0
   22592:	bfa4      	itt	ge
   22594:	4602      	movge	r2, r0
   22596:	4663      	movge	r3, ip
   22598:	ea53 0102 	orrs.w	r1, r3, r2
   2259c:	d105      	bne.n	225aa <__ieee754_fmod+0x14e>
   2259e:	e01b      	b.n	225d8 <__ieee754_fmod+0x17c>
   225a0:	0fd1      	lsrs	r1, r2, #31
   225a2:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   225a6:	0052      	lsls	r2, r2, #1
   225a8:	3e01      	subs	r6, #1
   225aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   225ae:	dbf7      	blt.n	225a0 <__ieee754_fmod+0x144>
   225b0:	4946      	ldr	r1, [pc, #280]	; (226cc <__ieee754_fmod+0x270>)
   225b2:	428e      	cmp	r6, r1
   225b4:	da61      	bge.n	2267a <__ieee754_fmod+0x21e>
   225b6:	1b89      	subs	r1, r1, r6
   225b8:	2914      	cmp	r1, #20
   225ba:	dc6f      	bgt.n	2269c <__ieee754_fmod+0x240>
   225bc:	f206 401e 	addw	r0, r6, #1054	; 0x41e
   225c0:	40ca      	lsrs	r2, r1
   225c2:	fa03 f000 	lsl.w	r0, r3, r0
   225c6:	fa43 f101 	asr.w	r1, r3, r1
   225ca:	4310      	orrs	r0, r2
   225cc:	430c      	orrs	r4, r1
   225ce:	4623      	mov	r3, r4
   225d0:	4602      	mov	r2, r0
   225d2:	ec43 2b10 	vmov	d0, r2, r3
   225d6:	e788      	b.n	224ea <__ieee754_fmod+0x8e>
   225d8:	4b3d      	ldr	r3, [pc, #244]	; (226d0 <__ieee754_fmod+0x274>)
   225da:	0fe4      	lsrs	r4, r4, #31
   225dc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   225e0:	ed94 0b00 	vldr	d0, [r4]
   225e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   225e8:	1b80      	subs	r0, r0, r6
   225ea:	281f      	cmp	r0, #31
   225ec:	dd21      	ble.n	22632 <__ieee754_fmod+0x1d6>
   225ee:	4839      	ldr	r0, [pc, #228]	; (226d4 <__ieee754_fmod+0x278>)
   225f0:	1b89      	subs	r1, r1, r6
   225f2:	eba0 0c06 	sub.w	ip, r0, r6
   225f6:	fa07 fc0c 	lsl.w	ip, r7, ip
   225fa:	bf18      	it	ne
   225fc:	2500      	movne	r5, #0
   225fe:	d1ad      	bne.n	2255c <__ieee754_fmod+0x100>
   22600:	eba3 0c0c 	sub.w	ip, r3, ip
   22604:	4610      	mov	r0, r2
   22606:	e7c2      	b.n	2258e <__ieee754_fmod+0x132>
   22608:	1a40      	subs	r0, r0, r1
   2260a:	281f      	cmp	r0, #31
   2260c:	dc0c      	bgt.n	22628 <__ieee754_fmod+0x1cc>
   2260e:	fa09 f900 	lsl.w	r9, r9, r0
   22612:	fa03 f200 	lsl.w	r2, r3, r0
   22616:	f201 401e 	addw	r0, r1, #1054	; 0x41e
   2261a:	40c3      	lsrs	r3, r0
   2261c:	ea43 0309 	orr.w	r3, r3, r9
   22620:	e786      	b.n	22530 <__ieee754_fmod+0xd4>
   22622:	ec41 0b10 	vmov	d0, r0, r1
   22626:	e760      	b.n	224ea <__ieee754_fmod+0x8e>
   22628:	4a2a      	ldr	r2, [pc, #168]	; (226d4 <__ieee754_fmod+0x278>)
   2262a:	1a52      	subs	r2, r2, r1
   2262c:	4093      	lsls	r3, r2
   2262e:	2200      	movs	r2, #0
   22630:	e77e      	b.n	22530 <__ieee754_fmod+0xd4>
   22632:	fa0e fe00 	lsl.w	lr, lr, r0
   22636:	fa07 f500 	lsl.w	r5, r7, r0
   2263a:	f206 401e 	addw	r0, r6, #1054	; 0x41e
   2263e:	fa27 f000 	lsr.w	r0, r7, r0
   22642:	ea40 0c0e 	orr.w	ip, r0, lr
   22646:	1b50      	subs	r0, r2, r5
   22648:	e77a      	b.n	22540 <__ieee754_fmod+0xe4>
   2264a:	ea4f 20ce 	mov.w	r0, lr, lsl #11
   2264e:	2800      	cmp	r0, #0
   22650:	4e1e      	ldr	r6, [pc, #120]	; (226cc <__ieee754_fmod+0x270>)
   22652:	f77f af66 	ble.w	22522 <__ieee754_fmod+0xc6>
   22656:	0040      	lsls	r0, r0, #1
   22658:	2800      	cmp	r0, #0
   2265a:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   2265e:	dcfa      	bgt.n	22656 <__ieee754_fmod+0x1fa>
   22660:	e75f      	b.n	22522 <__ieee754_fmod+0xc6>
   22662:	ea4f 20c9 	mov.w	r0, r9, lsl #11
   22666:	2800      	cmp	r0, #0
   22668:	4918      	ldr	r1, [pc, #96]	; (226cc <__ieee754_fmod+0x270>)
   2266a:	f77f af44 	ble.w	224f6 <__ieee754_fmod+0x9a>
   2266e:	0040      	lsls	r0, r0, #1
   22670:	2800      	cmp	r0, #0
   22672:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
   22676:	dcfa      	bgt.n	2266e <__ieee754_fmod+0x212>
   22678:	e73d      	b.n	224f6 <__ieee754_fmod+0x9a>
   2267a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   2267e:	431c      	orrs	r4, r3
   22680:	f206 36ff 	addw	r6, r6, #1023	; 0x3ff
   22684:	ea44 5106 	orr.w	r1, r4, r6, lsl #20
   22688:	4610      	mov	r0, r2
   2268a:	ec41 0b10 	vmov	d0, r0, r1
   2268e:	e72c      	b.n	224ea <__ieee754_fmod+0x8e>
   22690:	4b0f      	ldr	r3, [pc, #60]	; (226d0 <__ieee754_fmod+0x274>)
   22692:	eb03 7414 	add.w	r4, r3, r4, lsr #28
   22696:	ed94 0b00 	vldr	d0, [r4]
   2269a:	e726      	b.n	224ea <__ieee754_fmod+0x8e>
   2269c:	291f      	cmp	r1, #31
   2269e:	dc07      	bgt.n	226b0 <__ieee754_fmod+0x254>
   226a0:	f206 401e 	addw	r0, r6, #1054	; 0x41e
   226a4:	fa22 f101 	lsr.w	r1, r2, r1
   226a8:	4083      	lsls	r3, r0
   226aa:	ea43 0001 	orr.w	r0, r3, r1
   226ae:	e78e      	b.n	225ce <__ieee754_fmod+0x172>
   226b0:	4908      	ldr	r1, [pc, #32]	; (226d4 <__ieee754_fmod+0x278>)
   226b2:	1b89      	subs	r1, r1, r6
   226b4:	fa43 f001 	asr.w	r0, r3, r1
   226b8:	e789      	b.n	225ce <__ieee754_fmod+0x172>
   226ba:	4903      	ldr	r1, [pc, #12]	; (226c8 <__ieee754_fmod+0x26c>)
   226bc:	e71b      	b.n	224f6 <__ieee754_fmod+0x9a>
   226be:	bf00      	nop
   226c0:	7fefffff 	.word	0x7fefffff
   226c4:	7ff00000 	.word	0x7ff00000
   226c8:	fffffbed 	.word	0xfffffbed
   226cc:	fffffc02 	.word	0xfffffc02
   226d0:	00024e70 	.word	0x00024e70
   226d4:	fffffbe2 	.word	0xfffffbe2

000226d8 <__ieee754_sqrt>:
   226d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   226dc:	4a63      	ldr	r2, [pc, #396]	; (2286c <__ieee754_sqrt+0x194>)
   226de:	ec55 4b10 	vmov	r4, r5, d0
   226e2:	43aa      	bics	r2, r5
   226e4:	f000 809f 	beq.w	22826 <__ieee754_sqrt+0x14e>
   226e8:	2d00      	cmp	r5, #0
   226ea:	ee10 ca10 	vmov	ip, s0
   226ee:	462b      	mov	r3, r5
   226f0:	dd54      	ble.n	2279c <__ieee754_sqrt+0xc4>
   226f2:	1529      	asrs	r1, r5, #20
   226f4:	d063      	beq.n	227be <__ieee754_sqrt+0xe6>
   226f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
   226fa:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   226fe:	07c9      	lsls	r1, r1, #31
   22700:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   22704:	d404      	bmi.n	22710 <__ieee754_sqrt+0x38>
   22706:	005b      	lsls	r3, r3, #1
   22708:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   2270c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   22710:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   22714:	2600      	movs	r6, #0
   22716:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   2271a:	107f      	asrs	r7, r7, #1
   2271c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   22720:	f04f 0e16 	mov.w	lr, #22
   22724:	4634      	mov	r4, r6
   22726:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   2272a:	18a1      	adds	r1, r4, r2
   2272c:	4299      	cmp	r1, r3
   2272e:	dc02      	bgt.n	22736 <__ieee754_sqrt+0x5e>
   22730:	1a5b      	subs	r3, r3, r1
   22732:	188c      	adds	r4, r1, r2
   22734:	4416      	add	r6, r2
   22736:	005b      	lsls	r3, r3, #1
   22738:	f1be 0e01 	subs.w	lr, lr, #1
   2273c:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   22740:	ea4f 0252 	mov.w	r2, r2, lsr #1
   22744:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   22748:	d1ef      	bne.n	2272a <__ieee754_sqrt+0x52>
   2274a:	4675      	mov	r5, lr
   2274c:	2020      	movs	r0, #32
   2274e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   22752:	e00a      	b.n	2276a <__ieee754_sqrt+0x92>
   22754:	d044      	beq.n	227e0 <__ieee754_sqrt+0x108>
   22756:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   2275a:	3801      	subs	r0, #1
   2275c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   22760:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   22764:	ea4f 0252 	mov.w	r2, r2, lsr #1
   22768:	d043      	beq.n	227f2 <__ieee754_sqrt+0x11a>
   2276a:	42a3      	cmp	r3, r4
   2276c:	eb02 010e 	add.w	r1, r2, lr
   22770:	ddf0      	ble.n	22754 <__ieee754_sqrt+0x7c>
   22772:	2900      	cmp	r1, #0
   22774:	eb01 0e02 	add.w	lr, r1, r2
   22778:	db0a      	blt.n	22790 <__ieee754_sqrt+0xb8>
   2277a:	46a0      	mov	r8, r4
   2277c:	1b1b      	subs	r3, r3, r4
   2277e:	4561      	cmp	r1, ip
   22780:	bf88      	it	hi
   22782:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   22786:	ebac 0c01 	sub.w	ip, ip, r1
   2278a:	4415      	add	r5, r2
   2278c:	4644      	mov	r4, r8
   2278e:	e7e2      	b.n	22756 <__ieee754_sqrt+0x7e>
   22790:	f1be 0f00 	cmp.w	lr, #0
   22794:	dbf1      	blt.n	2277a <__ieee754_sqrt+0xa2>
   22796:	f104 0801 	add.w	r8, r4, #1
   2279a:	e7ef      	b.n	2277c <__ieee754_sqrt+0xa4>
   2279c:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   227a0:	4322      	orrs	r2, r4
   227a2:	d038      	beq.n	22816 <__ieee754_sqrt+0x13e>
   227a4:	2d00      	cmp	r5, #0
   227a6:	d14e      	bne.n	22846 <__ieee754_sqrt+0x16e>
   227a8:	4629      	mov	r1, r5
   227aa:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   227ae:	3915      	subs	r1, #21
   227b0:	4613      	mov	r3, r2
   227b2:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   227b6:	2a00      	cmp	r2, #0
   227b8:	d0f7      	beq.n	227aa <__ieee754_sqrt+0xd2>
   227ba:	02d6      	lsls	r6, r2, #11
   227bc:	d450      	bmi.n	22860 <__ieee754_sqrt+0x188>
   227be:	2000      	movs	r0, #0
   227c0:	005b      	lsls	r3, r3, #1
   227c2:	02dd      	lsls	r5, r3, #11
   227c4:	4604      	mov	r4, r0
   227c6:	f100 0001 	add.w	r0, r0, #1
   227ca:	d5f9      	bpl.n	227c0 <__ieee754_sqrt+0xe8>
   227cc:	461a      	mov	r2, r3
   227ce:	4663      	mov	r3, ip
   227d0:	fa0c fc00 	lsl.w	ip, ip, r0
   227d4:	f1c0 0020 	rsb	r0, r0, #32
   227d8:	40c3      	lsrs	r3, r0
   227da:	1b09      	subs	r1, r1, r4
   227dc:	4313      	orrs	r3, r2
   227de:	e78a      	b.n	226f6 <__ieee754_sqrt+0x1e>
   227e0:	4561      	cmp	r1, ip
   227e2:	d8b8      	bhi.n	22756 <__ieee754_sqrt+0x7e>
   227e4:	2900      	cmp	r1, #0
   227e6:	eb01 0e02 	add.w	lr, r1, r2
   227ea:	dbd1      	blt.n	22790 <__ieee754_sqrt+0xb8>
   227ec:	4698      	mov	r8, r3
   227ee:	2300      	movs	r3, #0
   227f0:	e7c9      	b.n	22786 <__ieee754_sqrt+0xae>
   227f2:	ea53 030c 	orrs.w	r3, r3, ip
   227f6:	d110      	bne.n	2281a <__ieee754_sqrt+0x142>
   227f8:	0868      	lsrs	r0, r5, #1
   227fa:	1071      	asrs	r1, r6, #1
   227fc:	07f3      	lsls	r3, r6, #31
   227fe:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   22802:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   22806:	bf48      	it	mi
   22808:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   2280c:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   22810:	4602      	mov	r2, r0
   22812:	ec43 2b10 	vmov	d0, r2, r3
   22816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2281a:	1c6a      	adds	r2, r5, #1
   2281c:	bf16      	itet	ne
   2281e:	1c68      	addne	r0, r5, #1
   22820:	3601      	addeq	r6, #1
   22822:	0840      	lsrne	r0, r0, #1
   22824:	e7e9      	b.n	227fa <__ieee754_sqrt+0x122>
   22826:	ee10 2a10 	vmov	r2, s0
   2282a:	ee10 0a10 	vmov	r0, s0
   2282e:	462b      	mov	r3, r5
   22830:	4629      	mov	r1, r5
   22832:	f7fe fd53 	bl	212dc <__aeabi_dmul>
   22836:	4622      	mov	r2, r4
   22838:	462b      	mov	r3, r5
   2283a:	f7fe fb99 	bl	20f70 <__adddf3>
   2283e:	ec41 0b10 	vmov	d0, r0, r1
   22842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22846:	ee10 2a10 	vmov	r2, s0
   2284a:	4620      	mov	r0, r4
   2284c:	4629      	mov	r1, r5
   2284e:	f7fe fb8d 	bl	20f6c <__aeabi_dsub>
   22852:	4602      	mov	r2, r0
   22854:	460b      	mov	r3, r1
   22856:	f7fe fe6b 	bl	21530 <__aeabi_ddiv>
   2285a:	ec41 0b10 	vmov	d0, r0, r1
   2285e:	e7da      	b.n	22816 <__ieee754_sqrt+0x13e>
   22860:	4663      	mov	r3, ip
   22862:	2020      	movs	r0, #32
   22864:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   22868:	e7b6      	b.n	227d8 <__ieee754_sqrt+0x100>
   2286a:	bf00      	nop
   2286c:	7ff00000 	.word	0x7ff00000

00022870 <__ieee754_log10f>:
   22870:	b508      	push	{r3, lr}
   22872:	ee10 3a10 	vmov	r3, s0
   22876:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   2287a:	ed2d 8b02 	vpush	{d8}
   2287e:	d02b      	beq.n	228d8 <__ieee754_log10f+0x68>
   22880:	2b00      	cmp	r3, #0
   22882:	db32      	blt.n	228ea <__ieee754_log10f+0x7a>
   22884:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   22888:	da41      	bge.n	2290e <__ieee754_log10f+0x9e>
   2288a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   2288e:	db35      	blt.n	228fc <__ieee754_log10f+0x8c>
   22890:	2100      	movs	r1, #0
   22892:	15da      	asrs	r2, r3, #23
   22894:	3a7f      	subs	r2, #127	; 0x7f
   22896:	440a      	add	r2, r1
   22898:	0fd1      	lsrs	r1, r2, #31
   2289a:	f1c1 017f 	rsb	r1, r1, #127	; 0x7f
   2289e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   228a2:	f3c3 0316 	ubfx	r3, r3, #0, #23
   228a6:	ee07 2a90 	vmov	s15, r2
   228aa:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
   228ae:	ee00 3a10 	vmov	s0, r3
   228b2:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
   228b6:	f000 f849 	bl	2294c <__ieee754_logf>
   228ba:	eddf 7a17 	vldr	s15, [pc, #92]	; 22918 <__ieee754_log10f+0xa8>
   228be:	ed9f 7a17 	vldr	s14, [pc, #92]	; 2291c <__ieee754_log10f+0xac>
   228c2:	ee20 0a27 	vmul.f32	s0, s0, s15
   228c6:	eddf 7a16 	vldr	s15, [pc, #88]	; 22920 <__ieee754_log10f+0xb0>
   228ca:	eea8 0a07 	vfma.f32	s0, s16, s14
   228ce:	eea8 0a27 	vfma.f32	s0, s16, s15
   228d2:	ecbd 8b02 	vpop	{d8}
   228d6:	bd08      	pop	{r3, pc}
   228d8:	ecbd 8b02 	vpop	{d8}
   228dc:	ed9f 7a11 	vldr	s14, [pc, #68]	; 22924 <__ieee754_log10f+0xb4>
   228e0:	eddf 7a11 	vldr	s15, [pc, #68]	; 22928 <__ieee754_log10f+0xb8>
   228e4:	ee87 0a27 	vdiv.f32	s0, s14, s15
   228e8:	bd08      	pop	{r3, pc}
   228ea:	ecbd 8b02 	vpop	{d8}
   228ee:	ee70 7a40 	vsub.f32	s15, s0, s0
   228f2:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 22928 <__ieee754_log10f+0xb8>
   228f6:	ee87 0a87 	vdiv.f32	s0, s15, s14
   228fa:	bd08      	pop	{r3, pc}
   228fc:	eddf 7a0b 	vldr	s15, [pc, #44]	; 2292c <__ieee754_log10f+0xbc>
   22900:	ee60 7a27 	vmul.f32	s15, s0, s15
   22904:	f06f 0118 	mvn.w	r1, #24
   22908:	ee17 3a90 	vmov	r3, s15
   2290c:	e7c1      	b.n	22892 <__ieee754_log10f+0x22>
   2290e:	ecbd 8b02 	vpop	{d8}
   22912:	ee30 0a00 	vadd.f32	s0, s0, s0
   22916:	bd08      	pop	{r3, pc}
   22918:	3ede5bd9 	.word	0x3ede5bd9
   2291c:	355427db 	.word	0x355427db
   22920:	3e9a2080 	.word	0x3e9a2080
   22924:	cc000000 	.word	0xcc000000
   22928:	00000000 	.word	0x00000000
   2292c:	4c000000 	.word	0x4c000000

00022930 <nan>:
   22930:	ed9f 0b01 	vldr	d0, [pc, #4]	; 22938 <nan+0x8>
   22934:	4770      	bx	lr
   22936:	bf00      	nop
   22938:	00000000 	.word	0x00000000
   2293c:	7ff80000 	.word	0x7ff80000

00022940 <nanf>:
   22940:	ed9f 0a01 	vldr	s0, [pc, #4]	; 22948 <nanf+0x8>
   22944:	4770      	bx	lr
   22946:	bf00      	nop
   22948:	7fc00000 	.word	0x7fc00000

0002294c <__ieee754_logf>:
   2294c:	ee10 3a10 	vmov	r3, s0
   22950:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   22954:	d02e      	beq.n	229b4 <__ieee754_logf+0x68>
   22956:	2b00      	cmp	r3, #0
   22958:	db33      	blt.n	229c2 <__ieee754_logf+0x76>
   2295a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   2295e:	da40      	bge.n	229e2 <__ieee754_logf+0x96>
   22960:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   22964:	db34      	blt.n	229d0 <__ieee754_logf+0x84>
   22966:	f04f 0c00 	mov.w	ip, #0
   2296a:	4868      	ldr	r0, [pc, #416]	; (22b0c <__ieee754_logf+0x1c0>)
   2296c:	f3c3 0116 	ubfx	r1, r3, #0, #23
   22970:	4408      	add	r0, r1
   22972:	f400 0200 	and.w	r2, r0, #8388608	; 0x800000
   22976:	f082 527e 	eor.w	r2, r2, #1065353216	; 0x3f800000
   2297a:	430a      	orrs	r2, r1
   2297c:	15db      	asrs	r3, r3, #23
   2297e:	ee00 2a10 	vmov	s0, r2
   22982:	3b7f      	subs	r3, #127	; 0x7f
   22984:	4a62      	ldr	r2, [pc, #392]	; (22b10 <__ieee754_logf+0x1c4>)
   22986:	4463      	add	r3, ip
   22988:	f101 0c0f 	add.w	ip, r1, #15
   2298c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   22990:	ea0c 0202 	and.w	r2, ip, r2
   22994:	ee30 0a67 	vsub.f32	s0, s0, s15
   22998:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
   2299c:	bb22      	cbnz	r2, 229e8 <__ieee754_logf+0x9c>
   2299e:	eeb5 0a40 	vcmp.f32	s0, #0.0
   229a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   229a6:	d160      	bne.n	22a6a <__ieee754_logf+0x11e>
   229a8:	2b00      	cmp	r3, #0
   229aa:	f040 8092 	bne.w	22ad2 <__ieee754_logf+0x186>
   229ae:	ed9f 0a59 	vldr	s0, [pc, #356]	; 22b14 <__ieee754_logf+0x1c8>
   229b2:	4770      	bx	lr
   229b4:	ed9f 7a58 	vldr	s14, [pc, #352]	; 22b18 <__ieee754_logf+0x1cc>
   229b8:	eddf 7a56 	vldr	s15, [pc, #344]	; 22b14 <__ieee754_logf+0x1c8>
   229bc:	ee87 0a27 	vdiv.f32	s0, s14, s15
   229c0:	4770      	bx	lr
   229c2:	ee70 7a40 	vsub.f32	s15, s0, s0
   229c6:	ed9f 7a53 	vldr	s14, [pc, #332]	; 22b14 <__ieee754_logf+0x1c8>
   229ca:	ee87 0a87 	vdiv.f32	s0, s15, s14
   229ce:	4770      	bx	lr
   229d0:	eddf 7a52 	vldr	s15, [pc, #328]	; 22b1c <__ieee754_logf+0x1d0>
   229d4:	ee60 7a27 	vmul.f32	s15, s0, s15
   229d8:	f06f 0c18 	mvn.w	ip, #24
   229dc:	ee17 3a90 	vmov	r3, s15
   229e0:	e7c3      	b.n	2296a <__ieee754_logf+0x1e>
   229e2:	ee30 0a00 	vadd.f32	s0, s0, s0
   229e6:	4770      	bx	lr
   229e8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   229ec:	ee70 7a27 	vadd.f32	s15, s0, s15
   229f0:	ee07 3a10 	vmov	s14, r3
   229f4:	ee80 4a27 	vdiv.f32	s8, s0, s15
   229f8:	4849      	ldr	r0, [pc, #292]	; (22b20 <__ieee754_logf+0x1d4>)
   229fa:	f5c1 1257 	rsb	r2, r1, #3522560	; 0x35c000
   229fe:	4408      	add	r0, r1
   22a00:	f502 7222 	add.w	r2, r2, #648	; 0x288
   22a04:	4302      	orrs	r2, r0
   22a06:	2a00      	cmp	r2, #0
   22a08:	ed9f 3a46 	vldr	s6, [pc, #280]	; 22b24 <__ieee754_logf+0x1d8>
   22a0c:	eddf 4a46 	vldr	s9, [pc, #280]	; 22b28 <__ieee754_logf+0x1dc>
   22a10:	eddf 5a46 	vldr	s11, [pc, #280]	; 22b2c <__ieee754_logf+0x1e0>
   22a14:	eddf 3a46 	vldr	s7, [pc, #280]	; 22b30 <__ieee754_logf+0x1e4>
   22a18:	ed9f 5a46 	vldr	s10, [pc, #280]	; 22b34 <__ieee754_logf+0x1e8>
   22a1c:	eddf 7a46 	vldr	s15, [pc, #280]	; 22b38 <__ieee754_logf+0x1ec>
   22a20:	eddf 6a46 	vldr	s13, [pc, #280]	; 22b3c <__ieee754_logf+0x1f0>
   22a24:	ee24 6a04 	vmul.f32	s12, s8, s8
   22a28:	eef8 2ac7 	vcvt.f32.s32	s5, s14
   22a2c:	ee26 7a06 	vmul.f32	s14, s12, s12
   22a30:	eee7 4a03 	vfma.f32	s9, s14, s6
   22a34:	eea7 5a23 	vfma.f32	s10, s14, s7
   22a38:	eee4 5a87 	vfma.f32	s11, s9, s14
   22a3c:	eee5 6a07 	vfma.f32	s13, s10, s14
   22a40:	eee5 7a87 	vfma.f32	s15, s11, s14
   22a44:	ee67 7a86 	vmul.f32	s15, s15, s12
   22a48:	eee6 7a87 	vfma.f32	s15, s13, s14
   22a4c:	dd2a      	ble.n	22aa4 <__ieee754_logf+0x158>
   22a4e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   22a52:	ee20 7a07 	vmul.f32	s14, s0, s14
   22a56:	ee27 7a00 	vmul.f32	s14, s14, s0
   22a5a:	bb4b      	cbnz	r3, 22ab0 <__ieee754_logf+0x164>
   22a5c:	ee77 7a87 	vadd.f32	s15, s15, s14
   22a60:	eea7 7ac4 	vfms.f32	s14, s15, s8
   22a64:	ee30 0a47 	vsub.f32	s0, s0, s14
   22a68:	4770      	bx	lr
   22a6a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   22a6e:	eddf 6a34 	vldr	s13, [pc, #208]	; 22b40 <__ieee754_logf+0x1f4>
   22a72:	eef0 7a47 	vmov.f32	s15, s14
   22a76:	eee0 7a66 	vfms.f32	s15, s0, s13
   22a7a:	ee20 7a00 	vmul.f32	s14, s0, s0
   22a7e:	ee27 7a27 	vmul.f32	s14, s14, s15
   22a82:	2b00      	cmp	r3, #0
   22a84:	d0ee      	beq.n	22a64 <__ieee754_logf+0x118>
   22a86:	ee07 3a90 	vmov	s15, r3
   22a8a:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 22b44 <__ieee754_logf+0x1f8>
   22a8e:	eddf 6a2e 	vldr	s13, [pc, #184]	; 22b48 <__ieee754_logf+0x1fc>
   22a92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   22a96:	eea7 7ac6 	vfms.f32	s14, s15, s12
   22a9a:	ee37 0a40 	vsub.f32	s0, s14, s0
   22a9e:	ee97 0aa6 	vfnms.f32	s0, s15, s13
   22aa2:	4770      	bx	lr
   22aa4:	bb13      	cbnz	r3, 22aec <__ieee754_logf+0x1a0>
   22aa6:	ee70 7a67 	vsub.f32	s15, s0, s15
   22aaa:	eea7 0ac4 	vfms.f32	s0, s15, s8
   22aae:	4770      	bx	lr
   22ab0:	eddf 6a24 	vldr	s13, [pc, #144]	; 22b44 <__ieee754_logf+0x1f8>
   22ab4:	ed9f 6a24 	vldr	s12, [pc, #144]	; 22b48 <__ieee754_logf+0x1fc>
   22ab8:	ee77 7a87 	vadd.f32	s15, s15, s14
   22abc:	ee62 6aa6 	vmul.f32	s13, s5, s13
   22ac0:	eee7 6a84 	vfma.f32	s13, s15, s8
   22ac4:	ee37 7a66 	vsub.f32	s14, s14, s13
   22ac8:	ee37 0a40 	vsub.f32	s0, s14, s0
   22acc:	ee92 0a86 	vfnms.f32	s0, s5, s12
   22ad0:	4770      	bx	lr
   22ad2:	ee07 3a90 	vmov	s15, r3
   22ad6:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 22b44 <__ieee754_logf+0x1f8>
   22ada:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 22b48 <__ieee754_logf+0x1fc>
   22ade:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   22ae2:	ee27 0a80 	vmul.f32	s0, s15, s0
   22ae6:	eea7 0a87 	vfma.f32	s0, s15, s14
   22aea:	4770      	bx	lr
   22aec:	ed9f 7a15 	vldr	s14, [pc, #84]	; 22b44 <__ieee754_logf+0x1f8>
   22af0:	eddf 6a15 	vldr	s13, [pc, #84]	; 22b48 <__ieee754_logf+0x1fc>
   22af4:	ee70 7a67 	vsub.f32	s15, s0, s15
   22af8:	ee27 7a62 	vnmul.f32	s14, s14, s5
   22afc:	eea7 7a84 	vfma.f32	s14, s15, s8
   22b00:	ee37 0a40 	vsub.f32	s0, s14, s0
   22b04:	ee92 0aa6 	vfnms.f32	s0, s5, s13
   22b08:	4770      	bx	lr
   22b0a:	bf00      	nop
   22b0c:	004afb20 	.word	0x004afb20
   22b10:	007ffff0 	.word	0x007ffff0
   22b14:	00000000 	.word	0x00000000
   22b18:	cc000000 	.word	0xcc000000
   22b1c:	4c000000 	.word	0x4c000000
   22b20:	ffcf5c30 	.word	0xffcf5c30
   22b24:	3e178897 	.word	0x3e178897
   22b28:	3e3a3325 	.word	0x3e3a3325
   22b2c:	3e924925 	.word	0x3e924925
   22b30:	3e1cd04f 	.word	0x3e1cd04f
   22b34:	3e638e29 	.word	0x3e638e29
   22b38:	3f2aaaab 	.word	0x3f2aaaab
   22b3c:	3ecccccd 	.word	0x3ecccccd
   22b40:	3eaaaaab 	.word	0x3eaaaaab
   22b44:	3717f7d1 	.word	0x3717f7d1
   22b48:	3f317180 	.word	0x3f317180

00022b4c <__errno>:
   22b4c:	4b01      	ldr	r3, [pc, #4]	; (22b54 <__errno+0x8>)
   22b4e:	6818      	ldr	r0, [r3, #0]
   22b50:	4770      	bx	lr
   22b52:	bf00      	nop
   22b54:	20001018 	.word	0x20001018
   22b58:	69742023 	.word	0x69742023
   22b5c:	756f656d 	.word	0x756f656d
   22b60:	65732074 	.word	0x65732074
   22b64:	6f742074 	.word	0x6f742074
   22b68:	6425203a 	.word	0x6425203a
   22b6c:	20642520 	.word	0x20642520
   22b70:	6425203d 	.word	0x6425203d
   22b74:	0000000a 	.word	0x0000000a
   22b78:	73707061 	.word	0x73707061
   22b7c:	7277742f 	.word	0x7277742f
   22b80:	646f6e5f 	.word	0x646f6e5f
   22b84:	64745f65 	.word	0x64745f65
   22b88:	732f616d 	.word	0x732f616d
   22b8c:	6d2f6372 	.word	0x6d2f6372
   22b90:	2e6e6961 	.word	0x2e6e6961
   22b94:	00000063 	.word	0x00000063
   22b98:	7475227b 	.word	0x7475227b
   22b9c:	22656d69 	.word	0x22656d69
   22ba0:	6c25203a 	.word	0x6c25203a
   22ba4:	65222c75 	.word	0x65222c75
   22ba8:	22636578 	.word	0x22636578
   22bac:	2522203a 	.word	0x2522203a
   22bb0:	0a7d2273 	.word	0x0a7d2273
   22bb4:	00000000 	.word	0x00000000
   22bb8:	6564227b 	.word	0x6564227b
   22bbc:	65636976 	.word	0x65636976
   22bc0:	2264695f 	.word	0x2264695f
   22bc4:	6c25223d 	.word	0x6c25223d
   22bc8:	00002258 	.word	0x00002258
   22bcc:	6f72222c 	.word	0x6f72222c
   22bd0:	223d656c 	.word	0x223d656c
   22bd4:	00225825 	.word	0x00225825
   22bd8:	6170222c 	.word	0x6170222c
   22bdc:	3d64696e 	.word	0x3d64696e
   22be0:	22582522 	.word	0x22582522
   22be4:	00000000 	.word	0x00000000
   22be8:	6461222c 	.word	0x6461222c
   22bec:	3d227264 	.word	0x3d227264
   22bf0:	22582522 	.word	0x22582522
   22bf4:	00000000 	.word	0x00000000
   22bf8:	6170222c 	.word	0x6170222c
   22bfc:	695f7472 	.word	0x695f7472
   22c00:	223d2264 	.word	0x223d2264
   22c04:	22586c25 	.word	0x22586c25
   22c08:	00000000 	.word	0x00000000
   22c0c:	6f6c222c 	.word	0x6f6c222c
   22c10:	64695f74 	.word	0x64695f74
   22c14:	25223d22 	.word	0x25223d22
   22c18:	7d22586c 	.word	0x7d22586c
   22c1c:	0000000a 	.word	0x0000000a
   22c20:	7475227b 	.word	0x7475227b
   22c24:	22656d69 	.word	0x22656d69
   22c28:	6c25203a 	.word	0x6c25203a
   22c2c:	6d222c75 	.word	0x6d222c75
   22c30:	3a226773 	.word	0x3a226773
   22c34:	72662220 	.word	0x72662220
   22c38:	5f656d61 	.word	0x5f656d61
   22c3c:	61727564 	.word	0x61727564
   22c40:	6e6f6974 	.word	0x6e6f6974
   22c44:	25203d20 	.word	0x25203d20
   22c48:	73752064 	.word	0x73752064
   22c4c:	7d226365 	.word	0x7d226365
   22c50:	0000000a 	.word	0x0000000a
   22c54:	7475227b 	.word	0x7475227b
   22c58:	22656d69 	.word	0x22656d69
   22c5c:	6c25203a 	.word	0x6c25203a
   22c60:	6d222c75 	.word	0x6d222c75
   22c64:	3a226773 	.word	0x3a226773
   22c68:	48532220 	.word	0x48532220
   22c6c:	75645f52 	.word	0x75645f52
   22c70:	69746172 	.word	0x69746172
   22c74:	3d206e6f 	.word	0x3d206e6f
   22c78:	20642520 	.word	0x20642520
   22c7c:	63657375 	.word	0x63657375
   22c80:	000a7d22 	.word	0x000a7d22
   22c84:	7475227b 	.word	0x7475227b
   22c88:	22656d69 	.word	0x22656d69
   22c8c:	6c25203a 	.word	0x6c25203a
   22c90:	6d222c75 	.word	0x6d222c75
   22c94:	3a226773 	.word	0x3a226773
   22c98:	6f682220 	.word	0x6f682220
   22c9c:	666f646c 	.word	0x666f646c
   22ca0:	203d2066 	.word	0x203d2066
   22ca4:	75206425 	.word	0x75206425
   22ca8:	22636573 	.word	0x22636573
   22cac:	00000a7d 	.word	0x00000a7d
   22cb0:	30317764 	.word	0x30317764
   22cb4:	255f3030 	.word	0x255f3030
   22cb8:	00000064 	.word	0x00000064
   22cbc:	30337764 	.word	0x30337764
   22cc0:	255f3030 	.word	0x255f3030
   22cc4:	00000064 	.word	0x00000064
   22cc8:	5f627775 	.word	0x5f627775
   22ccc:	00717269 	.word	0x00717269
   22cd0:	65737341 	.word	0x65737341
   22cd4:	40207472 	.word	0x40207472
   22cd8:	25783020 	.word	0x25783020
   22cdc:	00000a78 	.word	0x00000a78
   22ce0:	65737341 	.word	0x65737341
   22ce4:	40207472 	.word	0x40207472
   22ce8:	25783020 	.word	0x25783020
   22cec:	202d2078 	.word	0x202d2078
   22cf0:	253a7325 	.word	0x253a7325
   22cf4:	00000a64 	.word	0x00000a64
   22cf8:	61686e55 	.word	0x61686e55
   22cfc:	656c646e 	.word	0x656c646e
   22d00:	6e692064 	.word	0x6e692064
   22d04:	72726574 	.word	0x72726574
   22d08:	20747075 	.word	0x20747075
   22d0c:	646c2528 	.word	0x646c2528
   22d10:	65202c29 	.word	0x65202c29
   22d14:	70656378 	.word	0x70656378
   22d18:	6e6f6974 	.word	0x6e6f6974
   22d1c:	20707320 	.word	0x20707320
   22d20:	30257830 	.word	0x30257830
   22d24:	0a786c38 	.word	0x0a786c38
   22d28:	00000000 	.word	0x00000000
   22d2c:	3a307220 	.word	0x3a307220
   22d30:	30257830 	.word	0x30257830
   22d34:	20786c38 	.word	0x20786c38
   22d38:	3a317220 	.word	0x3a317220
   22d3c:	30257830 	.word	0x30257830
   22d40:	20786c38 	.word	0x20786c38
   22d44:	3a327220 	.word	0x3a327220
   22d48:	30257830 	.word	0x30257830
   22d4c:	20786c38 	.word	0x20786c38
   22d50:	3a337220 	.word	0x3a337220
   22d54:	30257830 	.word	0x30257830
   22d58:	0a786c38 	.word	0x0a786c38
   22d5c:	00000000 	.word	0x00000000
   22d60:	3a347220 	.word	0x3a347220
   22d64:	30257830 	.word	0x30257830
   22d68:	20786c38 	.word	0x20786c38
   22d6c:	3a357220 	.word	0x3a357220
   22d70:	30257830 	.word	0x30257830
   22d74:	20786c38 	.word	0x20786c38
   22d78:	3a367220 	.word	0x3a367220
   22d7c:	30257830 	.word	0x30257830
   22d80:	20786c38 	.word	0x20786c38
   22d84:	3a377220 	.word	0x3a377220
   22d88:	30257830 	.word	0x30257830
   22d8c:	0a786c38 	.word	0x0a786c38
   22d90:	00000000 	.word	0x00000000
   22d94:	3a387220 	.word	0x3a387220
   22d98:	30257830 	.word	0x30257830
   22d9c:	20786c38 	.word	0x20786c38
   22da0:	3a397220 	.word	0x3a397220
   22da4:	30257830 	.word	0x30257830
   22da8:	20786c38 	.word	0x20786c38
   22dac:	3a303172 	.word	0x3a303172
   22db0:	30257830 	.word	0x30257830
   22db4:	20786c38 	.word	0x20786c38
   22db8:	3a313172 	.word	0x3a313172
   22dbc:	30257830 	.word	0x30257830
   22dc0:	0a786c38 	.word	0x0a786c38
   22dc4:	00000000 	.word	0x00000000
   22dc8:	3a323172 	.word	0x3a323172
   22dcc:	30257830 	.word	0x30257830
   22dd0:	20786c38 	.word	0x20786c38
   22dd4:	3a726c20 	.word	0x3a726c20
   22dd8:	30257830 	.word	0x30257830
   22ddc:	20786c38 	.word	0x20786c38
   22de0:	3a637020 	.word	0x3a637020
   22de4:	30257830 	.word	0x30257830
   22de8:	20786c38 	.word	0x20786c38
   22dec:	3a727370 	.word	0x3a727370
   22df0:	30257830 	.word	0x30257830
   22df4:	0a786c38 	.word	0x0a786c38
   22df8:	00000000 	.word	0x00000000
   22dfc:	52534349 	.word	0x52534349
   22e00:	2578303a 	.word	0x2578303a
   22e04:	786c3830 	.word	0x786c3830
   22e08:	53464820 	.word	0x53464820
   22e0c:	78303a52 	.word	0x78303a52
   22e10:	6c383025 	.word	0x6c383025
   22e14:	46432078 	.word	0x46432078
   22e18:	303a5253 	.word	0x303a5253
   22e1c:	38302578 	.word	0x38302578
   22e20:	000a786c 	.word	0x000a786c
   22e24:	52414642 	.word	0x52414642
   22e28:	2578303a 	.word	0x2578303a
   22e2c:	786c3830 	.word	0x786c3830
   22e30:	464d4d20 	.word	0x464d4d20
   22e34:	303a5241 	.word	0x303a5241
   22e38:	38302578 	.word	0x38302578
   22e3c:	000a786c 	.word	0x000a786c
   22e40:	656c6469 	.word	0x656c6469
   22e44:	00000000 	.word	0x00000000
   22e48:	6e69616d 	.word	0x6e69616d
   22e4c:	00000000 	.word	0x00000000
   22e50:	7379736d 	.word	0x7379736d
   22e54:	0000315f 	.word	0x0000315f
   22e58:	616d6474 	.word	0x616d6474
   22e5c:	00000000 	.word	0x00000000
   22e60:	7475227b 	.word	0x7475227b
   22e64:	22656d69 	.word	0x22656d69
   22e68:	6c25203a 	.word	0x6c25203a
   22e6c:	6d222c75 	.word	0x6d222c75
   22e70:	3a226773 	.word	0x3a226773
   22e74:	64742220 	.word	0x64742220
   22e78:	705f616d 	.word	0x705f616d
   22e7c:	695f676b 	.word	0x695f676b
   22e80:	2274696e 	.word	0x2274696e
   22e84:	00000a7d 	.word	0x00000a7d
   22e88:	7475227b 	.word	0x7475227b
   22e8c:	22656d69 	.word	0x22656d69
   22e90:	6c25203a 	.word	0x6c25203a
   22e94:	6d222c75 	.word	0x6d222c75
   22e98:	3a226773 	.word	0x3a226773
   22e9c:	64742220 	.word	0x64742220
   22ea0:	705f616d 	.word	0x705f616d
   22ea4:	645f676b 	.word	0x645f676b
   22ea8:	226e776f 	.word	0x226e776f
   22eac:	00000a7d 	.word	0x00000a7d
   22eb0:	746f6c73 	.word	0x746f6c73
   22eb4:	6d69745f 	.word	0x6d69745f
   22eb8:	635f7265 	.word	0x635f7265
   22ebc:	0000746e 	.word	0x0000746e
   22ec0:	65707573 	.word	0x65707573
   22ec4:	61726672 	.word	0x61726672
   22ec8:	635f656d 	.word	0x635f656d
   22ecc:	0000746e 	.word	0x0000746e
   22ed0:	65707573 	.word	0x65707573
   22ed4:	61726672 	.word	0x61726672
   22ed8:	6d5f656d 	.word	0x6d5f656d
   22edc:	00737369 	.word	0x00737369
   22ee0:	706f7264 	.word	0x706f7264
   22ee4:	5f646570 	.word	0x5f646570
   22ee8:	746f6c73 	.word	0x746f6c73
   22eec:	00000073 	.word	0x00000073

00022ef0 <g_stats_map_tdma_stat_section>:
   22ef0:	2eb00014 00180002 00022ec0 2ed0001c     ................
   22f00:	00200002 00022ee0 00706363 7475227b     .. .....ccp.{"ut
   22f10:	22656d69 6c25203a 6d222c75 3a226773     ime": %lu,"msg":
   22f20:	77752220 63635f62 6b705f70 6e695f67      "uwb_ccp_pkg_in
   22f30:	7d227469 0000000a 7473616d 635f7265     it"}....master_c
   22f40:	0000746e 76616c73 6e635f65 00000074     nt..slave_cnt...
   22f50:	646e6573 00000000 635f7874 6c706d6f     send....tx_compl
   22f60:	00657465 635f7872 6c706d6f 00657465     ete.rx_complete.
   22f70:	725f7872 79616c65 00006465 735f7872     rx_relayed..rx_s
   22f80:	74726174 7272655f 0000726f 755f7872     tart_error..rx_u
   22f90:	6c6f736e 74696369 00006465 6f5f7872     nsolicited..rx_o
   22fa0:	72656874 6172665f 0000656d 78727874     ther_frame..txrx
   22fb0:	7272655f 0000726f 735f7874 74726174     _error..tx_start
   22fc0:	7272655f 0000726f 725f7874 79616c65     _error..tx_relay
   22fd0:	7272655f 0000726f 725f7874 79616c65     _error..tx_relay
   22fe0:	006b6f5f 5f717269 6574616c 0079636e     _ok.irq_latency.
   22ff0:	6c5f736f 625f7461 6e696865 00000064     os_lat_behind...
   23000:	6c5f736f 6d5f7461 69677261 0000006e     os_lat_margin...
   23010:	745f7872 6f656d69 00007475 5f6d6573     rx_timeout..sem_
   23020:	656d6974 0074756f 65736572 00000074     timeout.reset...

00023030 <g_stats_map_uwb_ccp_stat_section>:
   23030:	2f380014 00180002 00022f44 2f50001c     ..8/....D/....P/
   23040:	00200002 00023110 2f580024 00280002     .. ..1..$.X/..(.
   23050:	00022f64 2f70002c 00300002 00022f7c     d/..,.p/..0.|/..
   23060:	2f8c0034 00380002 00022f9c 2fac003c     4../..8../..<../
   23070:	00400002 00022fb8 2fc80044 00480002     ..@../..D../..H.
   23080:	00022fd8 2fe4004c 00500002 00022ff0     ./..L../..P../..
   23090:	30000054 00580002 00023010 301c005c     T..0..X..0..\..0
   230a0:	00600002 00023028 7475227b 22656d69     ..`.(0..{"utime"
   230b0:	6c25203a 6d222c75 3a226773 75732220     : %lu,"msg": "su
   230c0:	66726570 656d6172 7365725f 7d227465     perframe_reset"}
   230d0:	0000000a 00676e72 7475227b 22656d69     ....rng.{"utime"
   230e0:	6c25203a 6d222c75 3a226773 6e722220     : %lu,"msg": "rn
   230f0:	6b705f67 6e695f67 7d227469 0000000a     g_pkg_init"}....
   23100:	5f676e72 75716572 00747365 5f676e72     rng_request.rng_
   23110:	7473696c 00006e65 655f7872 726f7272     listen..rx_error
   23120:	00000000 655f7874 726f7272 00000000     ....tx_error....
   23130:	706d6f63 6574656c 0062635f 65707573     complete_cb.supe
   23140:	61726672 725f656d 74657365 00000000     rframe_reset....

00023150 <g_stats_map_rng_stat_section>:
   23150:	31000014 00180002 0002310c 2f58001c     ...1.....1....X/
   23160:	00200002 00022f64 2f8c0024 00280002     .. .d/..$../..(.
   23170:	00022f9c 3118002c 00300002 00023124     ./..,..1..0.$1..
   23180:	30100034 00380002 00023130 3028003c     4..0..8.01..<.(0
   23190:	00400002 0002313c 7272652c 203a726f     ..@.<1..,error: 
   231a0:	6b6e5522 6e776f6e 61724620 4320656d     "Unknown Frame C
   231b0:	2265646f 7825202c 0000000a 6d697475     ode", %x....utim
   231c0:	00000065 00716573 00646975 6469756f     e...seq.uid.ouid
   231d0:	00000000 007a6172 7a617262 00000000     ....raz.braz....
   231e0:	69737372 00000000 00736f6c 006d7070     rssi....los.ppm.
   231f0:	00737473 00000000 7475227b 22656d69     sts.....{"utime"
   23200:	6c25203a 6d222c75 3a226773 77752220     : %lu,"msg": "uw
   23210:	63775f62 6b705f73 6e695f67 7d227469     b_wcs_pkg_init"}
   23220:	0000000a                                ....

00023224 <stdout>:
   23224:	200005cc                                ... 

00023228 <MemFile_methods>:
   23228:	0000e2a3 00000000 0000002f 00646c25     ......../...%ld.
   23238:	646c6c25 00000000 6c65643c 0000003e     %lld....<del>...
   23248:	3d207325 0a732520 00000000 656e6f44     %s = %s.....Done
   23258:	0000000a 6c696146 74206465 6f63206f     ....Failed to co
   23268:	74696d6d 0000000a 6d6d6f63 00007469     mmit....commit..
   23278:	00007325 706d7564 00000000 6e6e7572     %s..dump....runn
   23288:	00676e69 65766173 00000000 6e6e6143     ing.save....Cann
   23298:	6420746f 6c707369 76207961 65756c61     ot display value
   232a8:	0000000a 6c696146 74206465 6573206f     ....Failed to se
   232b8:	65202c74 203a7272 000a6425 61766e49     t, err: %d..Inva
   232c8:	2064696c 73677261 0000000a 666e6f63     lid args....conf
   232d8:	00006769 006c6176                       ig..val.

000232e0 <conf_nmgr_handlers>:
   232e0:	0000ee85 0000edcd 75255b1b 00000044     .........[%uD...
   232f0:	75255b1b 00000043 6c363025 00002075     .[%uC...%06lu ..
   23300:	706c6568 0000000a 30332d25 00000073     help....%-30s...
   23310:	30332d25 0a732573 00000000 65726e55     %-30s%s.....Unre
   23320:	6e676f63 64657a69 6d6f6320 646e616d     cognized command
   23330:	0000000a 65726e55 6e676f63 64657a69     ....Unrecognized
   23340:	6d6f6320 646e616d 7325203a 0000000a      command: %s....
   23350:	656c6c49 206c6167 75646f6d 2520656c     Illegal module %
   23360:	00000a73 656c6c49 206c6167 61726170     s...Illegal para
   23370:	6574656d 00000a72 706c6568 00000000     meter...help....
   23380:	656c6573 00007463 7373694d 20676e69     select..Missing 
   23390:	61726170 6574656d 00000a72 206f6e28     parameter...(no 
   233a0:	706c6568 61766120 62616c69 0a29656c     help available).
   233b0:	00000000 6d6d7553 3a797261 0000000a     ....Summary:....
   233c0:	67617355 000a3a65 61726150 6574656d     Usage:..Paramete
   233d0:	0a3a7372 00000000 69617641 6c62616c     rs:.....Availabl
   233e0:	6f6d2065 656c7564 000a3a73 73206f54     e modules:..To s
   233f0:	63656c65 20612074 75646f6d 202c656c     elect a module, 
   23400:	65746e65 73272072 63656c65 6d3c2074     enter 'select <m
   23410:	6c75646f 616e2065 273e656d 00000a2e     odule name>'....
   23420:	0000203e 73257325 00000000 206f6f54     > ..%s%s....Too 
   23430:	796e616d 72617020 74656d61 20737265     many parameters 
   23440:	78616d28 757a2520 00000a29 65707954     (max %zu)...Type
   23450:	65682720 2027706c 20726f66 7473696c      'help' for list
   23460:	20666f20 69617661 6c62616c 6f632065      of available co
   23470:	6e616d6d 000a7364 2078614d 626d756e     mmands..Max numb
   23480:	6f207265 6f6d2066 656c7564 65722073     er of modules re
   23490:	65686361 00000a64 2078614d 626d756e     ached...Max numb
   234a0:	6f207265 6f632066 7461706d 6d6f6320     er of compat com
   234b0:	646e616d 65722073 65686361 00000a64     mands reached...
   234c0:	706d6f63 00007461 656c6c49 206c6167     compat..Illegal 
   234d0:	75646f6d 2520656c 64202c73 75616665     module %s, defau
   234e0:	6920746c 6f6e2073 68632074 65676e61     lt is not change
   234f0:	00000a64 6c656873 0000006c              d...shell...

000234fc <shell_cmd_help>:
   234fc:	00000001 0000fee1 00023378 00000000     ........x3......

0002350c <shell_cmd_select_module>:
   2350c:	00000001 0000fca5 00023380 00000000     .........3......
   2351c:	0009060a 20643425 20783325 000a7325     ....%4d %3x %s..
   2352c:	706d654d 736c6f6f 000a203a 736b6c62     Mempools: ..blks
   2353c:	0000007a 73323325 73352520 73342520     z...%32s %5s %4s
   2354c:	73342520 73342520 0000000a 006e696d      %4s %4s....min.
   2355c:	65657266 00000000 73323325 64352520     free....%32s %5d
   2356c:	64342520 64342520 64342520 0000000a      %4d %4d %4d....
   2357c:	6c756f43 74276e64 6e696620 20612064     Couldn't find a 
   2358c:	6f6d656d 70207972 206c6f6f 68746977     memory pool with
   2359c:	6d616e20 73252065 0000000a 61766e49      name %s....Inva
   235ac:	2064696c 65746164 656d6974 0000000a     lid datetime....
   235bc:	00676c66 00666572 20733425 20733325     flg.ref.%4s %3s 
   235cc:	000a7325 6b736154 0a203a73 00000000     %s..Tasks: .....
   235dc:	00697270 6b736174 00000000 20733825     pri.task....%8s 
   235ec:	20733325 20733325 20733825 20733825     %3s %3s %8s %8s 
   235fc:	20733825 20733825 20733825 20733825     %8s %8s %8s %8s 
   2360c:	0a733325 00000000 6568636e 00006b63     %3s.....ncheck..
   2361c:	6568636c 00006b63 756b7473 00006573     lcheck..stkuse..
   2362c:	736b7473 0000007a 00777363 746e7572     stksz...csw.runt
   2363c:	00656d69 00646974 20733825 20753325     ime.tid.%8s %3u 
   2364c:	20753325 756c3825 6c382520 38252075     %3u %8lu %8lu %8
   2365c:	38252075 38252075 2520756c 0a756c38     u %8u %8lu %8lu.
   2366c:	00000000 6c756f43 74276e64 6e696620     ....Couldn't fin
   2367c:	61742064 77206b73 20687469 656d616e     d task with name
   2368c:	0a732520 00000000 6564736c 00000076      %s.....lsdev...
   2369c:	7473696c 20534f20 69766564 00736563     list OS devices.
   236ac:	65736572 79732074 6d657473 00000000     reset system....
   236bc:	776f6873 73797320 206d6574 65746164     show system date
   236cc:	00000000 65746164 656d6974 206f7420     ....datetime to 
   236dc:	00746573 776f6873 73797320 206d6574     set.show system 
   236ec:	6f6f706d 0000006c 6f6f706d 616e206c     mpool...mpool na
   236fc:	0000656d 776f6873 20736f20 6b736174     me..show os task
   2370c:	00000073 6b736174 6d616e20 00000065     s...task name...

0002371c <date_help>:
   2371c:	000236bc 00000000 00023728              .6......(7..

00023728 <date_params>:
   23728:	000235d8 000236d0 00000000 00000000     .5...6..........

00023738 <ls_dev_help>:
   23738:	0002369c 00000000 00000000              .6..........

00023744 <mpool_help>:
   23744:	000236e0 00000000 00023750              .6......P7..

00023750 <mpool_params>:
   23750:	000235d8 000236f4 00000000 00000000     .5...6..........

00023760 <os_commands>:
   23760:	00000001 00010c89 00023708 000237d4     .........7...7..
   23770:	00000001 00010b09 000236ec 00023744     .........6..D7..
   23780:	00000001 00010bb9 000236c8 0002371c     .........6...7..
   23790:	00000001 00010c3d 00023028 000237c0     ....=...(0...7..
   237a0:	00000001 00010c51 00023694 00023738     ....Q....6..87..
	...

000237c0 <reset_help>:
   237c0:	000236ac 00000000 000237cc              .6.......7..

000237cc <reset_params>:
	...

000237d4 <tasks_help>:
   237d4:	00023700 00000000 000237e0              .7.......7..

000237e0 <tasks_params>:
   237e0:	000235d8 00023710 00000000 00000000     .5...7..........
   237f0:	00006e6f 6e6f4320 656c6f73 63695420     on.. Console Tic
   23800:	6f20736b 00000a6e 0066666f 6e6f4320     ks on...off. Con
   23810:	656c6f73 63695420 6f20736b 000a6666     sole Ticks off..
   23820:	61735520 203a6567 6b636974 6f5b2073      Usage: ticks [o
   23830:	666f7c6e 000a5d66 6d6f7270 00007470     n|off]..prompt..
   23840:	6b636974 00000073 6c656873 6974206c     ticks...shell ti
   23850:	20736b63 6d6d6f63 00646e61 67617375     cks command.usag
   23860:	74203a65 736b6369 6e6f5b20 66666f7c     e: ticks [on|off
   23870:	0000005d 6e727574 006e6f20              ]...turn on.

0002387c <prompt_commands>:
   2387c:	00000000 00010db1 00023840 0002389c     ........@8...8..
	...

0002389c <ticks_help>:
   2389c:	00023848 0002385c 000238a8              H8..\8...8..

000238a8 <ticks_params>:
   238a8:	000237f0 00023874 00023808 00023874     .7..t8...8..t8..
	...
   238c0:	00642573 74617473 00000000 5f6d756e     s%d.stat....num_
   238d0:	69676572 72657473 00006465              registered..

000238dc <g_stats_map_stats>:
   238dc:	38cc0014 00000002 00006372 74617473     ...8....rc..stat
   238ec:	73696c5f 00000074 756f7267 00000070     _list...group...
   238fc:	00737973 6c656966 00007364 203a7325     sys.fields..%s: 
   2390c:	000a7525 203a7325 0a756c25 00000000     %u..%s: %lu.....
   2391c:	203a7325 756c6c25 0000000a 6e6b6e55     %s: %llu....Unkn
   2392c:	206e776f 74617473 7a697320 6f662065     own stat size fo
   2393c:	73252072 0a752520 00000000 0a732509     r %s %u......%s.
   2394c:	00000000 7473754d 65707320 79666963     ....Must specify
   2395c:	73206120 69746174 63697473 6d616e20      a statistic nam
   2396c:	6f742065 6d756420 70202c70 6973736f     e to dump, possi
   2397c:	20656c62 656d616e 72612073 000a3a65     ble names are:..
   2398c:	6c756f43 6f6e2064 69662074 7320646e     Could not find s
   2399c:	69746174 63697473 6f726720 25207075     tatistic group %
   239ac:	00000a73 252f7325 00000073 00386d36     s...%s/%s...6m8.
   239bc:	6b303538 00000000 6b303131 00000000     850k....110k....
   239cc:	20766e69 61657270 6c5f626d 000a6e65     inv preamb_len..
   239dc:	63627775 00006766 00627775 00667270     uwbcfg..uwb.prf.
   239ec:	61746164 65746172 00000000 705f7872     datarate....rx_p
   239fc:	656c6361 0000006e 705f7872 6d616572     aclen...rx_pream
   23a0c:	6469635f 00000078 735f7872 79746466     _cidx...rx_sfdty
   23a1c:	00006570 735f7872 745f6466 0000006f     pe..rx_sfd_to...
   23a2c:	705f7872 6f6d7268 00006564 645f7872     rx_phrmode..rx_d
   23a3c:	5f676169 00006e65 705f7874 6d616572     iag_en..tx_pream
   23a4c:	6469635f 00000078 705f7874 6d616572     _cidx...tx_pream
   23a5c:	6e656c5f 00000000 66727874 776f705f     _len....txrf_pow
   23a6c:	635f7265 7372616f 00000065 66727874     er_coarse...txrf
   23a7c:	776f705f 665f7265 00656e69 615f7872     _power_fine.rx_a
   23a8c:	6c64746e 00000079 615f7874 6c64746e     ntdly...tx_antdl
   23a9c:	00000079 615f7872 735f746e 72617065     y...rx_ant_separ
   23aac:	6f697461 0000006e 5f747865 646b6c63     ation...ext_clkd
   23abc:	0000796c 656c6f72 00000000 6d617266     ly..role....fram
   23acc:	69665f65 7265746c 00000000 6c617478     e_filter....xtal
   23adc:	6972745f 0000006d 20766e69 61657270     _trim...inv prea
   23aec:	6f63206d 28206564 6e697375 64252067     m code (using %d
   23afc:	00000a29 20766e69 20667270 000a6425     )...inv prf %d..
   23b0c:	20766e69 000a6863 20766e69 61746164     inv ch..inv data
   23b1c:	65746172 0000000a 20766e69 6c636170     rate....inv pacl
   23b2c:	000a6e65 20766e69 54646673 0a657079     en..inv sfdType.
   23b3c:	00000000 20766e69 72616f63 74206573     ....inv coarse t
   23b4c:	72777078 0000000a 64343025 3230252d     xpwr....%04d-%02
   23b5c:	30252d64 25546432 3a643230 64323025     d-%02dT%02d:%02d
   23b6c:	3230253a 30252e64 00006436 30256325     :%02d.%06d..%c%0
   23b7c:	253a6432 00643230                       2d:%02d.

00023b84 <month_days>:
   23b84:	0000001f 0000001c 0000001f 0000001e     ................
   23b94:	0000001f 0000001e 0000001f 0000001f     ................
   23ba4:	0000001e 0000001f 0000001e 0000001f     ................

00023bb4 <crc16tab>:
   23bb4:	10210000 30632042 50a54084 70e760c6     ..!.B c0.@.P.`.p
   23bc4:	91298108 b16ba14a d1adc18c f1efe1ce     ..).J.k.........
   23bd4:	02101231 22523273 429452b5 62d672f7     1...s2R".R.B.r.b
   23be4:	83189339 a35ab37b c39cd3bd e3def3ff     9...{.Z.........
   23bf4:	34432462 14010420 74c764e6 548544a4     b$C4 ....d.t.D.T
   23c04:	b54ba56a 95098528 f5cfe5ee d58dc5ac     j.K.(...........
   23c14:	26723653 06301611 66f676d7 46b45695     S6r&..0..v.f.V.F
   23c24:	a77ab75b 87389719 e7fef7df c7bcd79d     [.z...8.........
   23c34:	58e548c4 78a76886 18610840 38232802     .H.X.h.x@.a..(#8
   23c44:	d9edc9cc f9afe98e 99698948 b92ba90a     ........H.i...+.
   23c54:	4ad45af5 6a967ab7 0a501a71 2a123a33     .Z.J.z.jq.P.3:.*
   23c64:	cbdcdbfd eb9efbbf 8b589b79 ab1abb3b     ........y.X.;...
   23c74:	7c876ca6 5cc54ce4 3c032c22 1c410c60     .l.|.L.\",.<`.A.
   23c84:	fd8fedae ddcdcdec bd0bad2a 9d498d68     ........*...h.I.
   23c94:	6eb67e97 4ef45ed5 2e323e13 0e701e51     .~.n.^.N.>2.Q.p.
   23ca4:	efbeff9f cffcdfdd af3abf1b 8f789f59     ..........:.Y.x.
   23cb4:	81a99188 a1ebb1ca c12dd10c e16ff14e     ..........-.N.o.
   23cc4:	00a11080 20e330c2 40255004 60677046     .....0. .P%@Fpg`
   23cd4:	939883b9 b3daa3fb d31cc33d f35ee37f     ........=.....^.
   23ce4:	129002b1 32d222f3 52144235 72566277     .....".25B.RwbVr
   23cf4:	a5cbb5ea 858995a8 e54ff56e c50dd52c     ........n.O.,...
   23d04:	24c334e2 048114a0 64477466 44055424     .4.$....ftGd$T.D
   23d14:	b7faa7db 97b88799 f77ee75f d73cc71d     ........_.~...<.
   23d24:	36f226d3 16b00691 76766657 56344615     .&.6....Wfvv.F4V
   23d34:	c96dd94c e92ff90e 89e999c8 a9abb98a     L.m.../.........
   23d44:	48655844 68277806 08e118c0 28a33882     DXeH.x'h.....8.(
   23d54:	db5ccb7d fb1eeb3f 9bd88bf9 bb9aabbb     }.\.?...........
   23d64:	5a544a75 7a166a37 1ad00af1 3a922ab3     uJTZ7j.z.....*.:
   23d74:	ed0ffd2e cd4ddd6c ad8bbdaa 8dc99de8     ....l.M.........
   23d84:	6c077c26 4c455c64 2c833ca2 0cc11ce0     &|.ld\EL.<.,....
   23d94:	ff3eef1f df7ccf5d bfbaaf9b 9ff88fd9     ..>.].|.........
   23da4:	7e366e17 5e744e55 3eb22e93 1ef00ed1     .n6~UNt^...>....

00023db4 <streamer_cfg_console>:
   23db4:	00012343 00012337                       C#..7#..

00023dbc <sysdown_cbs>:
   23dbc:	00017679 00018b57 0000c4d1 0000d749     yv..W.......I...
   23dcc:	0000b1e1 0000cee1 0001c345 0001bc69     ........E...i...
   23ddc:	0001bfc1 0001b78d 0001aea9 0001b3f5     ................
   23dec:	000117bd 00000000 696c7073 74732f74     ........split/st
   23dfc:	73757461 00000000 74617473 00007375     atus....status..
   23e0c:	696c7073 00000074                       split...

00023e14 <base64_chars>:
   23e14:	44434241 48474645 4c4b4a49 504f4e4d     ABCDEFGHIJKLMNOP
   23e24:	54535251 58575655 62615a59 66656463     QRSTUVWXYZabcdef
   23e34:	6a696867 6e6d6c6b 7271706f 76757473     ghijklmnopqrstuv
   23e44:	7a797877 33323130 37363534 2f2b3938     wxyz0123456789+/
   23e54:	00000000 30317764 305f3030 00000000     ....dw1000_0....

00023e64 <dw1000_0_cfg>:
   23e64:	20004570 00001f40 000007d0 11131800     pE. @...........
   23e74:	40424042 00000000 6d726554 6c616e69     B@B@....Terminal
   23e84:	00000000 00545452 47474553 00005245     ....RTT.SEGGER..
   23e94:	6e207325 6920746f 656c706d 746e656d     %s not implement
   23ea4:	000a6465 7475227b 22656d69 6c25203a     ed..{"utime": %l
   23eb4:	6d222c75 3a226773 77642220 30303031     u,"msg": "dw1000
   23ec4:	7665645f 696e695f 0a7d2274 00000000     _dev_init"}.....

00023ed4 <__func__.0>:
   23ed4:	5f627775 30317764 635f3030 5f636c61     uwb_dw1000_calc_
   23ee4:	616f6470 00000000                       pdoa....

00023eec <dw1000_uwb_funcs>:
   23eec:	00013e7f 00013e77 00013e6f 0001438b     .>..w>..o>...C..
   23efc:	00014409 00014709 0001475b 000146b9     .D...G..[G...F..
   23f0c:	00013e67 00013e5d 00013e53 00013e3d     g>..]>..S>..=>..
   23f1c:	00013e35 00013e2d 00013e25 00013e1d     5>..->..%>...>..
   23f2c:	00013e15 00013e0d 00013e05 00013c8b     .>...>...>...<..
   23f3c:	00013dfd 00013df5 00013ded 00013de5     .=...=...=...=..
   23f4c:	00013ddd 00013dd5 00013dcd 00013dc5     .=...=...=...=..
   23f5c:	00013c81 00013dbd 00013db5 00013da9     .<...=...=...=..
   23f6c:	00013d9d 00013d91 00013d89 00013d81     .=...=...=...=..
   23f7c:	00013d79 00013d71 00014221 00014207     y=..q=..!B...B..
   23f8c:	000141ed 00013d49 00013d41 00013d39     .A..I=..A=..9=..
   23f9c:	00013d31 00013d29 00013d21 00013d19     1=..)=..!=...=..
   23fac:	00013cf9 00000000 00013c93 00013cd7     .<.......<...<..
   23fbc:	00013cdf 00013ce7 00013cef 0063616d     .<...<...<..mac.
   23fcc:	625f7874 73657479 00000000 625f7872     tx_bytes....rx_b
   23fdc:	73657479 00000000 5f524644 00746e63     ytes....DFR_cnt.
   23fec:	5f4f5452 00746e63 5f564f52 00727265     RTO_cnt.ROV_err.
   23ffc:	5f474654 00746e63 5f45444c 00727265     TFG_cnt.LDE_err.
   2400c:	655f5852 00007272 55425854 72655f46     RX_err..TXBUF_er
   2401c:	00000072 5f4c4c50 655f4c4c 00007272     r...PLL_LL_err..

0002402c <agc_config>:
   2402c:	2502a907 889b8870                       ...%p...

00024034 <chan_idx>:
   24034:	02010000 05000403                       ........

0002403c <digital_bb_config>:
   2403c:	311a002d 331a0052 351a009a 371a011d     -..1R..3...5...7
   2404c:	313b006b 333b00be 353b015e 373b0296     k.;1..;3^.;5..;7

0002405c <dtune1>:
   2405c:	008d0087                                ....

00024060 <dwnsSFDlen>:
   24060:	00081040                                @...

00024064 <fs_pll_cfg>:
   24064:	09000407 08400508 08401009 08400508     ......@...@...@.
   24074:	0800041d 0800041d                       ........

0002407c <fs_pll_tune>:
   2407c:	2656261e 0000bebe                       .&V&....

00024084 <g_stats_map_mac_stat_section>:
   24084:	3fcc0014 00180002 00023fd8 3fe4001c     ...?.....?.....?
   24094:	00200002 00023fec 3ff40024 00280002     .. ..?..$..?..(.
   240a4:	00023ffc 4004002c 00300002 0002400c     .?..,..@..0..@..
   240b4:	40140034 00380002 00024020              4..@..8. @..

000240c0 <lde_replicaCoeff>:
   240c0:	59980000 51ea5998 451e428e 80002e14     ...Y.Y.Q.B.E....
   240d0:	28f451ea 3ae03332 3ae03d70 2b8435c2     .Q.(23.:p=.:.5.+
   240e0:	333235c2 35c235c2 3ae047ae 30a23850     .523.5.5.G.:P8.0
   240f0:	00003850                                P8..

000240f4 <rx_config>:
   240f4:	0000bcd8                                ....

000240f8 <sftsh>:
   240f8:	0016000a 00060001 00020001              ............

00024104 <tx_config>:
   24104:	00005c40 00045ca0 00086cc0 00045c80     @\...\...l...\..
   24114:	001e3fe0 001e7de0 43534d50 5b44495f     .?...}..PMSC_ID[
   24124:	203a5d30 0a786c25 00000000 43534d50     0]: %lx.....PMSC
   24134:	5b44495f 203a5d31 0a786c25 00000000     _ID[1]: %lx.....
   24144:	7475227b 22656d69 6c25203a 6d222c75     {"utime": %lu,"m
   24154:	3a226773 77642220 30303031 676b705f     sg": "dw1000_pkg
   24164:	696e695f 0a7d2274 00000000 7475227b     _init"}.....{"ut
   24174:	22656d69 6c25203a 6d222c75 3a226773     ime": %lu,"msg":
   24184:	77642220 30303031 676b705f 776f645f      "dw1000_pkg_dow
   24194:	0a7d226e 00000000 30317764 315f3030     n"}.....dw1000_1
   241a4:	00000000 30317764 325f3030 00000000     ....dw1000_2....
   241b4:	206f6f54 20776566 73677261 0000000a     Too few args....
   241c4:	6572227b 30255b67 225d5832 7830223d     {"reg[%02X]"="0x
   241d4:	6c383025 7d22586c 0000000a 6572227b     %08llX"}....{"re
   241e4:	30255b67 225d5832 7830223d 30313025     g[%02X]"="0x%010
   241f4:	22586c6c 00000a7d 6572227b 30255b67     llX"}...{"reg[%0
   24204:	225d5832 7830223d 36313025 22586c6c     2X]"="0x%016llX"
   24214:	00000a7d 6e69227b 3e2d7473 5f717269     }...{"inst->irq_
   24224:	226d6573 7d64253d 0000000a 6e69227b     sem"=%d}....{"in
   24234:	3e2d7473 735f7874 3d226d65 0a7d6425     st->tx_sem"=%d}.
   24244:	00000000 6e72227b 733e2d67 3d226d65     ....{"rng->sem"=
   24254:	0a7d6425 00000000 6363227b 733e2d70     %d}.....{"ccp->s
   24264:	3d226d65 0a7d6425 00000000 706d7544     em"=%d}.....Dump
   24274:	61747320 6e697472 74612067 36302520      starting at %06
   24284:	0a3a586c 00000000 58343025 3025203a     lX:.....%04X: %0
   24294:	25205832 20583230 58323025 32302520     2X %02X %02X %02
   242a4:	30252058 25205832 20583230 58323025     X %02X %02X %02X
   242b4:	32302520 30252058 25205832 20583230      %02X %02X %02X 
   242c4:	58323025 32302520 30252058 25205832     %02X %02X %02X %
   242d4:	20583230 58323025 32302520 00000a58     02X %02X %02X...
   242e4:	00006164 00007763 69766544 255b6563     da..cw..Device[%
   242f4:	6e205d64 6920776f 5743206e 646f6d20     d] now in CW mod
   24304:	6e6f2065 20686320 202e6425 65736552     e on ch %d. Rese
   24314:	6f742074 6e6f6320 756e6974 00000a65     t to continue...
   24324:	00007277 00006472 30257830 2c586c36     wr..rd..0x%06lX,
   24334:	30257830 203a5834 6c257830 000a586c     0x%04X: 0x%llX..
   24344:	6e6b6e55 206e776f 0a646d63 00000000     Unknown cmd.....
   24354:	30317764 00003030 30317764 64203030     dw1000..dw1000 d
   24364:	00006762 30317764 64203030 67756265     bg..dw1000 debug
   24374:	00000000 736e695b 64205d74 20706d75     ....[inst] dump 
   24384:	206c6c61 69676572 72657473 00000073     all registers...
   24394:	736e693c 74203e74 57432078 206e6f20     <inst> tx CW on 
   243a4:	72727563 20746e65 6e616863 006c656e     current channel.
   243b4:	736e693c 3c203e74 72646461 6c5b203e     <inst> <addr> [l
   243c4:	74676e65 202c5d68 706d7564 65726120     ength], dump are
   243d4:	00000061 736e693c 3c203e74 72646461     a...<inst> <addr
   243e4:	733c203e 64616275 203e7264 6e656c3c     > <subaddr> <len
   243f4:	3e687467 6572202c 72206461 73696765     gth>, read regis
   24404:	00726574 736e693c 3c203e74 72646461     ter.<inst> <addr
   24414:	733c203e 64616275 203e7264 6c61763c     > <subaddr> <val
   24424:	203e6575 6e656c3c 3e687467 7277202c     ue> <length>, wr
   24434:	20657469 756c6176 6f742065 67657220     ite value to reg
   24444:	65747369 00000072                       ister...

0002444c <cmd_dw1000_help>:
   2444c:	0002435c 00024368 00024458              \C..hC..XD..

00024458 <cmd_dw1000_param>:
   24458:	0002327c 00024378 000242e8 00024394     |2..xC...B...C..
   24468:	000242e4 000243b4 00024328 000243d8     .B...C..(C...C..
   24478:	00024324 00024408 00000000 00000000     $C...D..........

00024488 <nrf52k_flash_dev>:
   24488:	000244a0 00000000 00080000 00000080     .D..............
   24498:	00000001 000000ff                       ........

000244a0 <nrf52k_flash_funcs>:
   244a0:	00017dd9 00017d11 00017c9d 00017cf1     .}...}...|...|..
   244b0:	00000000 00017ced 00000000              .....|......

000244bc <nrf52_hal_spis>:
   244bc:	20004584 00000000 00000000 00000000     .E. ............

000244cc <nrf52_hal_timers>:
   244cc:	200045ac 00000000 00000000 00000000     .E. ............
	...

000244e4 <os_bsp_spi0m_cfg>:
   244e4:	00121410 0000002c 0000007b 00000022     ....,...{..."...
   244f4:	00203a22 736c6166 00000065 65757274     ": .false...true
   24504:	00000000 756c6c25 00000000 696c6c25     ....%llu....%lli
   24514:	00000000 6c6c756e 00000000 00006625     ....null....%f..
   24524:	0000005c 0000745c 0000725c 00006e5c     \...\t..\r..\n..
   24534:	0000665c 0000625c 0000005b               \f..\b..[...}.

00024542 <__func__.7324>:
   24542:	656d6974 6c616373 6e695f65               timescale_init.

00024551 <__func__.7336>:
   24551:	656d6974 6c616373 72665f65 69006565     timescale_free.i
   24561:	2d74736e 656b653e 736e6900 682f0074     nst->eke.inst./h
   24571:	2f656d6f 6c6b696e 642f7361 742f7665     ome/niklas/dev/t
   24581:	73656d69 656c6163 726f632d 696c2f65     imescale-core/li
   24591:	69742f62 6373656d 2e656c61               b/timescale.c.

0002459f <__func__.7283>:
   2459f:	666b7273 6c62645f 69616d5f               srkf_dbl_main.

000245ad <__func__.7299>:
   245ad:	666b7273 6c62645f 696e695f               srkf_dbl_init.

000245bb <__func__.7311>:
   245bb:	666b7273 6c62645f 6572665f 6e690065     srkf_dbl_free.in
   245cb:	21207473 4c554e3d 6e69004c 3e2d7473     st !=NULL.inst->
   245db:	3d3d206e 69006e20 2d74736e 6900783e     n == n.inst->x.i
   245eb:	2d74736e 6900793e 2d74736e 69007a3e     nst->y.inst->z.i
   245fb:	2d74736e 6900653e 2d74736e 6900483e     nst->e.inst->H.i
   2460b:	2d74736e 6900503e 2d74736e 0050553e     nst->P.inst->UP.
   2461b:	74736e69 50443e2d 736e6900 513e2d74     inst->DP.inst->Q
   2462b:	736e6900 553e2d74 6e690051 3e2d7473     .inst->UQ.inst->
   2463b:	69005144 2d74736e 6900523e 2d74736e     DQ.inst->R.inst-
   2464b:	0052553e 74736e69 52443e2d 736e6900     >UR.inst->DR.ins
   2465b:	533e2d74 736e6900 5f3e2d74 6e690053     t->S.inst->_S.in
   2466b:	3e2d7473 6e690041 3e2d7473 6e69004b     st->A.inst->K.in
   2467b:	21207473 554e203d 2f004c4c 656d6f68     st != NULL./home
   2468b:	6b696e2f 2f73616c 2f766564 656d6974     /niklas/dev/time
   2469b:	6c616373 6f632d65 6c2f6572 732f6269     scale-core/lib/s
   246ab:	5f666b72 2e6c6264 6e690063 3e2d7473     rkf_dbl.c.inst->
   246bb:	78666f41 203d2120 4c4c554e 736e6900     Aofx != NULL.ins
   246cb:	483e2d74 2078666f 4e203d21 004c4c55     t->Hofx != NULL.
   246db:	75227b00 656d6974 25203a22 222c756c     .{"utime": %lu,"
   246eb:	2267736d 7422203a 645f7277 6b705f73     msg": "twr_ds_pk
   246fb:	6e695f67 7d227469 0000000a 72777400     g_init"}.....twr
   2470b:	0073645f 6d6f6300 74656c70 00000065     _ds..complete...
   2471b:	61747300 745f7472 72655f78 00726f72     .start_tx_error.
	...

0002472c <g_stats_map_twr_ds_stat_section>:
   2472c:	47100014 00180002 0002471c 7475227b     ...G.....G..{"ut
   2473c:	22656d69 6c25203a 6d222c75 3a226773     ime": %lu,"msg":
   2474c:	77742220 73645f72 7478655f 676b705f      "twr_ds_ext_pkg
   2475c:	696e695f 0a7d2274 00000000 5f727774     _init"}.....twr_
   2476c:	655f7364 00007478                       ds_ext..

00024774 <g_stats_map_twr_ds_ext_stat_section>:
   24774:	47100014 00180002 00023124 7475227b     ...G....$1..{"ut
   24784:	22656d69 6c25203a 6d222c75 3a226773     ime": %lu,"msg":
   24794:	77742220 73735f72 676b705f 696e695f      "twr_ss_pkg_ini
   247a4:	0a7d2274 00000000 5f727774 00007373     t"}.....twr_ss..

000247b4 <g_stats_map_twr_ss_stat_section>:
   247b4:	47100014 00180002 00023124 7475227b     ...G....$1..{"ut
   247c4:	22656d69 6c25203a 6d222c75 3a226773     ime": %lu,"msg":
   247d4:	77742220 73735f72 6b63615f 676b705f      "twr_ss_ack_pkg
   247e4:	696e695f 0a7d2274 00000000 5f727774     _init"}.....twr_
   247f4:	615f7373 00006b63 5f6b6361 655f7874     ss_ack..ack_tx_e
   24804:	00007272 5f6b6361 655f7872 00007272     rr..ack_rx_err..
   24814:	5f6b6361 5f716573 00727265              ack_seq_err.

00024820 <g_stats_map_twr_ss_ack_stat_section>:
   24820:	47100014 00180002 00023124 47fc001c     ...G....$1.....G
   24830:	00200002 00024808 48140024 00000002     .. ..H..$..H....
   24840:	7475227b 22656d69 6c25203a 6d222c75     {"utime": %lu,"m
   24850:	3a226773 77742220 73735f72 7478655f     sg": "twr_ss_ext
   24860:	676b705f 696e695f 0a7d2274 00000000     _pkg_init"}.....
   24870:	5f727774 655f7373 00007478              twr_ss_ext..

0002487c <g_stats_map_twr_ss_ext_stat_section>:
   2487c:	47100014 00180002 00023124 7475227b     ...G....$1..{"ut
   2488c:	22656d69 6c25203a 6d222c75 3a226773     ime": %lu,"msg":
   2489c:	63772220 69745f73 6373656d 5f656c61      "wcs_timescale_
   248ac:	5f676b70 74696e69 000a7d22 a4f8e0b5     pkg_init"}......
   248bc:	3e20e374 6e5b0122 3deb0587 f1e2674e     t. >".[n...=Ng..
   248cc:	3db59e05 a4f8e0b5 3e30e374 b7320335     ...=....t.0>5.2.
   248dc:	4654adf4 61746164 00000000 006e656c     ..TFdata....len.
   248ec:	00616873 72677075 00656461              sha.upgrade.

000248f8 <imgr_nmgr_handlers>:
   248f8:	0001cfc9 0001d185 00000000 0001cb35     ............5...
	...
   24924:	0001c8fd 00000000 0001c891 74737075     ............upst
   24934:	00747261 6f647075 0000656e 646e6570     art.updone..pend
   24944:	00000000 666e6f63 00000000 67616d69     ....conf....imag
   24954:	00007365 746f6c73 00000000 73726576     es..slot....vers
   24964:	006e6f69 68736168 00000000 746f6f62     ion.hash....boot
   24974:	656c6261 00000000 646e6570 00676e69     able....pending.
   24984:	666e6f63 656d7269 00000064 69746361     confirmed...acti
   24994:	00006576 6d726570 6e656e61 00000074     ve..permanent...
   249a4:	696c7073 61745374 00737574 666e6f63     splitStatus.conf
   249b4:	006d7269 252e7525 75252e75 756c252e     irm.%u.%u.%u.%lu
   249c4:	00000000 252e7525 75252e75 00000000     ....%u.%u.%u....
   249d4:	65746164 656d6974 00000000 6f686365     datetime....echo
   249e4:	00000000 6f6f706d 0000736c 736b6c62     ....mpools..blks
   249f4:	00007a69 6b6c626e 00000073 6572666e     iz..nblks...nfre
   24a04:	00000065 6f697270 00000000 74617473     e...prio....stat
   24a14:	00000065 736b7473 00007a69 63777363     e...stksiz..cswc
   24a24:	0000746e 7473616c 6568635f 6e696b63     nt..last_checkin
   24a34:	00000000 7478656e 6568635f 6e696b63     ....next_checkin
   24a44:	00000000                                ....

00024a48 <nmgr_def_group_handlers>:
   24a48:	0001d7c1 0001d7c1 0001d765 0001d765     ........e...e...
   24a58:	0001d9c1 00000000 0001d8b9 00000000     ................
   24a68:	0001d839 0001d705 00000000 0001d6a9     9...............
   24a78:	41464544 00544c55 0000534f 5457454e     DEFAULT.OS..NEWT
   24a88:	0052474d 424d494e 435f454c 00524c54     MGR.NIMBLE_CTLR.
   24a98:	424d494e 485f454c 0054534f 5346464e     NIMBLE_HOST.NFFS
   24aa8:	00000000 4f424552 0000544f 49544f49     ....REBOOT..IOTI
   24ab8:	59544956 00000000 54534554 00000000     VITY....TEST....
   24ac8:	3d73745b 756c6c25 202c7375 3d646f6d     [ts=%lluus, mod=
   24ad8:	6c207525 6c657665 5d75253d 00000020     %u level=%u] ...
   24ae8:	736e6f63 00656c6f                       console.

00024af0 <log_console_handler>:
   24af0:	00000000 0001e791 00000000 0001e7e9     ................
   24b00:	0001e7bd 00000000 00000000 0001e795     ................
   24b10:	0001e799 00000000 5f676f6c 7473696c     ........log_list
   24b20:	00000000 75646f6d 6d5f656c 00007061     ....module_map..
   24b30:	55424544 00000047 4f525245 00000052     DEBUG...ERROR...
   24b40:	4f464e49 00000000 4e524157 00000000     INFO....WARN....
   24b50:	4e4b4e55 004e574f 54495243 4c414349     UNKNOWN.CRITICAL
   24b60:	00000000 6576656c 616d5f6c 00000070     ....level_map...
   24b70:	5f676f6c 75646f6d 0000656c 6576656c     log_module..leve
   24b80:	0000006c 72746e65 00736569 65707974     l...entries.type
   24b90:	00000000 5f676f6c 656d616e 00000000     ....log_name....
   24ba0:	00007374 65646e69 00000078 7478656e     ts..index...next
   24bb0:	646e695f 00007865 73676f6c 00000000     _index..logs....
   24bc0:	0067736d 6f727265 65203a72 7972746e     msg.error: entry
   24bd0:	6f6f7420 72616c20 28206567 62206425      too large (%d b
   24be0:	73657479 00000029 6c646f6d 6d5f676f     ytes)...modlog_m
   24bf0:	69707061 705f676e 006c6f6f 6c696166     apping_pool.fail
   24c00:	74206465 6572206f 4d206461 3a73524d     ed to read MMRs:
   24c10:	3d637220 00006425 6f626572 722f746f      rc=%d..reboot/r
   24c20:	6f6f6265 6e635f74 00000074 6f626572     eboot_cnt...rebo
   24c30:	772f746f 74746972 00006e65 6f626572     ot/written..rebo
   24c40:	635f746f 0000746e 74697277 006e6574     ot_cnt..written.
   24c50:	44524148 00000000 55514552 45545345     HARD....REQUESTE
   24c60:	00000044 45534552 49505f54 0000004e     D...RESET_PIN...
   24c70:	474f4457 00000000 54464f53 00000000     WDOG....SOFT....
   24c80:	574f5242 54554f4e 00000000 54535953     BROWNOUT....SYST
   24c90:	4f5f4d45 495f4646 0000544e 3a6e7372     EM_OFF_INT..rsn:
   24ca0:	202c7325 3a746e63 202c7525 3a676d69     %s, cnt:%u, img:
   24cb0:	252e7525 75252e75 2c75252e 73616820     %u.%u.%u.%u, has
   24cc0:	00003a68 78323025 00000000 6964202c     h:..%02x...., di
   24cd0:	73253a65 0064253a 6370202c 2578303a     e:%s:%d., pc:0x%
   24ce0:	0000786c 00000031 6f626572 0000746f     lx..1...reboot..

00024cf0 <sysflash_map_dflt>:
	...
   24cf8:	00004000 00000001 00008000 0003a000     .@..............
   24d08:	00000002 00042000 0003a000 00000003     ..... ..........
   24d18:	0007c000 00001000 00000010 00004000     .............@..
   24d28:	00004000 00000011 0007d000 00003000     .@...........0..

00024d38 <boot_img_magic>:
   24d38:	f395c277 7fefd260 0f505235 8079b62c     w...`...5RP.,.y.

00024d48 <boot_swap_tables>:
   24d48:	03040104 01040204 03040104 04030301     ................
   24d58:	00000401                                ....

00024d5c <K>:
   24d5c:	428a2f98 71374491 b5c0fbcf e9b5dba5     ./.B.D7q........
   24d6c:	3956c25b 59f111f1 923f82a4 ab1c5ed5     [.V9...Y..?..^..
   24d7c:	d807aa98 12835b01 243185be 550c7dc3     .....[....1$.}.U
   24d8c:	72be5d74 80deb1fe 9bdc06a7 c19bf174     t].r........t...
   24d9c:	e49b69c1 efbe4786 0fc19dc6 240ca1cc     .i...G.........$
   24dac:	2de92c6f 4a7484aa 5cb0a9dc 76f988da     o,.-..tJ...\...v
   24dbc:	983e5152 a831c66d b00327c8 bf597fc7     RQ>.m.1..'....Y.
   24dcc:	c6e00bf3 d5a79147 06ca6351 14292967     ....G...Qc..g)).
   24ddc:	27b70a85 2e1b2138 4d2c6dfc 53380d13     ...'8!...m,M..8S
   24dec:	650a7354 766a0abb 81c2c92e 92722c85     Ts.e..jv.....,r.
   24dfc:	a2bfe8a1 a81a664b c24b8b70 c76c51a3     ....Kf..p.K..Ql.
   24e0c:	d192e819 d6990624 f40e3585 106aa070     ....$....5..p.j.
   24e1c:	19a4c116 1e376c08 2748774c 34b0bcb5     .....l7.LwH'...4
   24e2c:	391c0cb3 4ed8aa4a 5b9cca4f 682e6ff3     ...9J..NO..[.o.h
   24e3c:	748f82ee 78a5636f 84c87814 8cc70208     ...toc.x.x......
   24e4c:	90befffa a4506ceb bef9a3f7 c67178f2     .....lP......xq.

00024e5c <crc8_small_table>:
   24e5c:	090e0700 15121b1c 31363f38 2d2a2324     ........8?61$#*-
   24e6c:	00000000                                ....

00024e70 <Zero>:
	...
   24e7c:	80000000                                ....

/home/joel/Capstone/uwb-apps/bin/targets/twr_node_tdma/app/apps/twr_node_tdma/twr_node_tdma.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
 118392	   3864	  15292	 137548	  2194c	/home/joel/Capstone/uwb-apps/bin/targets/twr_node_tdma/app/apps/twr_node_tdma/twr_node_tdma.elf
