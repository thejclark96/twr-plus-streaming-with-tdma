
/home/joel/Capstone/uwb-apps/bin/targets/twr_tag_tdma/app/apps/twr_tag_tdma/twr_tag_tdma.elf:     file format elf32-littlearm
/home/joel/Capstone/uwb-apps/bin/targets/twr_tag_tdma/app/apps/twr_tag_tdma/twr_tag_tdma.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000080f9

Program Header:
0x70000001 off    0x00024fe8 vaddr 0x00024fe8 paddr 0x00024fe8 align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x00025000 memsz 0x00025000 flags rwx
    LOAD off    0x00030530 vaddr 0x20000530 paddr 0x00025000 align 2**16
         filesz 0x00000f18 memsz 0x00004574 flags rw-
    LOAD off    0x00000000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x00000530 flags rw-
private flags = 0x5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  00008000  00008000  00008000  2**0  ALLOC
  1 .text              0001cfc8  00008020  00008020  00008020  2**3  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab         00000000  00024fe8  00024fe8  00031448  2**0  CONTENTS
  3 .ARM.exidx         00000018  00024fe8  00024fe8  00024fe8  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .vector_relocation 000000d8  20000000  20000000  00040000  2**0  ALLOC
  5 .rtt               00000458  200000d8  200000d8  00040000  2**2  ALLOC
  6 .data              00000f18  20000530  00025000  00030530  2**3  CONTENTS, ALLOC, LOAD, DATA
  7 .bssnz             00000000  20001448  20001448  00031448  2**0  CONTENTS
  8 .bss               0000365c  20001448  00025f18  00031448  2**3  ALLOC
  9 .stack_dummy       000001b0  20004aa8  20004aa8  00031448  2**3  CONTENTS, READONLY
 10 .ARM.attributes    00000030  00000000  00000000  000315f8  2**0  CONTENTS, READONLY
 11 .comment           000000b2  00000000  00000000  00031628  2**0  CONTENTS, READONLY
 12 .svc_table         00000004  00000000  00000000  000316da  2**0  CONTENTS, READONLY
 13 .debug_line        00040cbf  00000000  00000000  000316de  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info        000b28a0  00000000  00000000  0007239d  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev      0001a46d  00000000  00000000  00124c3d  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges     00003cc0  00000000  00000000  0013f0b0  2**3  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str         00019e13  00000000  00000000  00142d70  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc         00048b2b  00000000  00000000  0015cb83  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges      00004c50  00000000  00000000  001a56ae  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame       0000a5d0  00000000  00000000  001aa300  2**2  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro       0000279b  00000000  00000000  001b48d0  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00008000 l    d  .imghdr	00000000 .imghdr
00008020 l    d  .text	00000000 .text
00024fe8 l    d  .ARM.extab	00000000 .ARM.extab
00024fe8 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
200000d8 l    d  .rtt	00000000 .rtt
20000530 l    d  .data	00000000 .data
20001448 l    d  .bssnz	00000000 .bssnz
20001448 l    d  .bss	00000000 .bss
20004aa8 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    df *ABS*	00000000 gcc_startup_nrf52.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
00008100 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 sbrk.c
20000530 l     O .data	00000004 sbrkBase
20000534 l     O .data	00000004 sbrkLimit
20000538 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 system_nrf52.c
00008248 l     F .text	0000003a errata_16
00008282 l     F .text	0000004a errata_31
000082cc l     F .text	0000003a errata_32
00008306 l     F .text	0000004a errata_36
00008350 l     F .text	0000003a errata_37
0000838a l     F .text	0000003a errata_57
000083c4 l     F .text	0000003a errata_66
000083fe l     F .text	0000004a errata_108
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 main.c
0000867c l     F .text	00000080 error_cb
000086fc l     F .text	00000018 slot_complete_cb
00008714 l     F .text	000000a2 slot_cb
000087b8 l     F .text	00000050 complete_cb
20001448 l     O .bss	00000002 g_idx_latest
2000144c l     O .bss	00000010 slot_event
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 uwb.c
00008a04 l     F .text	0000000e uwb_interrupt_task
00000000 l    df *ABS*	00000000 hal_gpio.c
00008cc8 l     F .text	00000050 hal_gpio_irq_handler
00008d18 l     F .text	0000002c hal_gpio_irq_setup
00008d44 l     F .text	0000001c hal_gpio_find_empty_slot
00008d60 l     F .text	00000038 hal_gpio_find_pin
2000145c l     O .bss	00000040 hal_gpio_irqs
2000149c l     O .bss	00000001 irq_setup.0
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os.c
000090c0 l     F .text	00000016 os_main
200015f8 l     O .bss	00001000 g_os_main_stack
200014f0 l     O .bss	00000100 g_idle_task_stack
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_dev.c
00009448 l     F .text	0000005c os_dev_add
000094a4 l     F .text	00000022 os_dev_initialize
000094c6 l     F .text	00000030 os_dev_init
20002654 l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
2000265c l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mempool.c
00009730 l     F .text	00000078 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
0000987c l     F .text	00000010 os_msys_find_biggest_pool
0000988c l     F .text	0000002c os_msys_find_pool
00009904 l     F .text	00000044 os_msys_init_once
20002674 l     O .bss	00000db0 os_msys_1_data
20003424 l     O .bss	0000000c os_msys_1_mbuf_pool
20003430 l     O .bss	0000001c os_msys_1_mempool
20000540 l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_sanity.c
000099b0 l     F .text	00000020 os_sanity_check_list_lock
000099d0 l     F .text	0000001c os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00009ebc l     F .text	00000018 _clear_stack
00000000 l    df *ABS*	00000000 os_time.c
0000a078 l     F .text	00000054 os_deltatime
0000a0cc l     F .text	00000020 os_time_change_notify
0000a0ec l     F .text	0000005c os_time_tick
0000a210 l     F .text	00000048 os_time_populate_info
20003470 l     O .bss	00000030 basetod
20000558 l     O .data	00000008 os_time_change_listeners
00000000 l    df *ABS*	00000000 os_arch_arm.c
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 HAL_CM4.o
0000ab64 l       .text	00000000 SVC_User
0000ab82 l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 tdma.c
0000ac10 l     F .text	000000e8 tdma_superframe_slot_cb
0000acf8 l     F .text	00000034 slot_timer_cb
0000ad2c l     F .text	0000002c superframe_cb
0000ad58 l     F .text	00000034 tdma_task
0000ad8c l     F .text	0000004c tdma_tasks_init
00000000 l    df *ABS*	00000000 uwb_ccp.c
0000b188 l     F .text	00000068 adjust_for_epoch_to_rm
0000b1f0 l     F .text	0000002e reset_cb
0000b21e l     F .text	00000054 error_cb
0000b272 l     F .text	0000004a rx_timeout_cb
0000b2bc l     F .text	0000001e ccp_timer_irq
0000b2e0 l     F .text	000001b4 tx_complete_cb
0000b494 l     F .text	0000000e ccp_task
0000b4a4 l     F .text	0000004c ccp_tasks_init
0000b4f0 l     F .text	0000007c ccp_timer_init
0000bae0 l     F .text	000000b8 ccp_master_timer_ev_cb
0000b6a8 l     F .text	000001b8 ccp_slave_timer_ev_cb
0000b570 l     F .text	00000138 ccp_listen
0000b860 l     F .text	00000280 ccp_send
0000bf70 l     F .text	00000498 rx_complete_cb
00000000 l    df *ABS*	00000000 uwb_rng.c
0000c474 l     F .text	00000044 reset_cb
0000c4b8 l     F .text	0000004a rx_timeout_cb
0000c504 l     F .text	00000054 superframe_reset_cb
0000c558 l     F .text	00000026 complete_ev_cb
0000c580 l     F .text	00000130 complete_cb
0000c938 l     F .text	000000ea rx_complete_cb
0000cd40 l     F .text	00000138 tx_final_cb
0000ce98 l     F .text	00000062 tx_complete_cb
200034a8 l     O .bss	000003c0 g_twr_frames
20000560 l     O .data	0000003c g_cbs
2000059c l     O .data	00000010 g_config
00000000 l    df *ABS*	00000000 rng_encode.c
00000000 l    df *ABS*	00000000 rng_json.c
0000d180 l     F .text	00000042 rng_write_line
00000000 l    df *ABS*	00000000 uwb_wcs.c
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 inline.c
00000000 l    df *ABS*	00000000 malloc.c
0000d8dc l     F .text	00000004 malloc_lock_nop
0000d8e0 l     F .text	00000002 malloc_unlock_nop
0000d8e2 l     F .text	00000048 __malloc_from_block
0000d92c l     F .text	00000064 __free_block
200005ac l     O .data	00000018 __malloc_head
200005c4 l     O .data	00000004 malloc_lock
200005c8 l     O .data	00000004 malloc_unlock
00000000 l    df *ABS*	00000000 memcmp.c
0000da90 l       .text	00000000 test1
0000da84 l       .text	00000000 loop1
0000da96 l       .text	00000000 res1
0000dab2 l       .text	00000000 test2
0000daba l       .text	00000000 done
0000daa6 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
0000dac6 l       .text	00000000 test1
0000dac2 l       .text	00000000 loop1
0000dad4 l       .text	00000000 test2
0000dad0 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mynewt.c
0000db1c l     F .text	00000004 stdin_read
0000db20 l     F .text	00000010 stdout_write
200005cc l     O .data	00000004 _stdin
200005d0 l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 tinyprintf.c
0000db76 l     F .text	000000ce ui2a
0000dc44 l     F .text	0000001c i2a
0000dc60 l     F .text	00000030 a2d
0000dc90 l     F .text	0000003c a2i
0000dccc l     F .text	00000024 putf
0000dcf0 l     F .text	00000124 putchw
0000de14 l     F .text	00000068 intarg
00000000 l    df *ABS*	00000000 memfile.c
00000000 l    df *ABS*	00000000 dpl_cputime.c
00000000 l    df *ABS*	00000000 dpl_mem.c
00000000 l    df *ABS*	00000000 dpl_mempool.c
00000000 l    df *ABS*	00000000 dpl_mbuf.c
00000000 l    df *ABS*	00000000 config_store.c
0000e888 l     F .text	0000003c conf_dup_check_cb
0000e8c4 l     F .text	0000001c conf_load_cb
0000e9e8 l     F .text	00000008 conf_store_one
2000386c l     O .bss	00000001 conf_loaded
2000386d l     O .bss	00000001 conf_loading
00000000 l    df *ABS*	00000000 config.c
0000ea5c l     F .text	00000008 conf_ev_fn_load
20003878 l     O .bss	0000000c conf_mtx
200005e0 l     O .data	00000010 conf_ev_load
00000000 l    df *ABS*	00000000 config_cli.c
0000ed78 l     F .text	0000001c conf_running_one
0000ed94 l     F .text	0000002c conf_dump_running
0000edc0 l     F .text	000000d4 shell_conf_command
200005f0 l     O .data	00000010 shell_conf_cmd
00000000 l    df *ABS*	00000000 config_nmgr.c
0000eea4 l     F .text	000000b8 conf_nmgr_write
0000ef5c l     F .text	00000080 conf_nmgr_read
20000600 l     O .data	0000000c conf_nmgr_group
00023444 l     O .text	00000008 conf_nmgr_handlers
00000000 l    df *ABS*	00000000 console.c
0000efec l     F .text	0000000e ring_buf_next
0000effa l     F .text	0000000e ring_buf_prev
0000f008 l     F .text	0000001c console_hist_is_full
0000f024 l     F .text	00000054 handle_nlip
0000f078 l     F .text	0000006a trim_whitespace
0000f0e4 l     F .text	00000080 console_hist_move_to_head
0000f164 l     F .text	00000080 console_hist_add
0000f1e4 l     F .text	00000040 console_hist_init
0000f2b8 l     F .text	00000044 console_append_char
0000f2fc l     F .text	0000003c console_clear_line
0000f338 l     F .text	00000080 insert_char
0000f3b8 l     F .text	0000006c console_hist_move
0000f424 l     F .text	0000005e del_char
0000f484 l     F .text	00000198 handle_ansi
20003884 l     O .bss	00000004 ansi_val
20003888 l     O .bss	00000004 ansi_val_2
2000388c l     O .bss	00000010 avail_queue
2000389c l     O .bss	00000004 completion
200038a0 l     O .bss	00000004 console_compat_rx_cb
200038a4 l     O .bss	00000028 console_hist
200038cc l     O .bss	00000800 console_hist_lines
200040d0 l     O .bss	0000000c console_write_lock
200040dc l     O .bss	00000002 cur
200040de l     O .bss	00000002 end
200040e0 l     O .bss	00000004 esc_state
200040e4 l     O .bss	00000004 ev.2
200040ec l     O .bss	00000004 input.1
200040f0 l     O .bss	00000004 lines_queue
200040f4 l     O .bss	00000004 nlip_state
200040f8 l     O .bss	00000001 prev_endl.0
200040f9 l     O .bss	00000001 rx_stalled
2000060c l     O .data	00000004 echo
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 rtt_console.c
0000fa88 l     F .text	0000001c rtt_console_wait_for_retry
0000faa4 l     F .text	0000004c rtt_console_write_ch
0000faf0 l     F .text	00000070 rtt_console_poll_func
200040fc l     O .bss	00000018 rtt_timer
20000610 l     O .data	00000004 itvl_ms.0
20000614 l     O .data	00000004 key.1
20000618 l     O .data	00000004 rtt_console_retries_left.2
00000000 l    df *ABS*	00000000 ticks.c
2000061c l     O .data	00000001 do_ticks
00000000 l    df *ABS*	00000000 shell.c
0000fbfc l     F .text	00000038 get_prompt
0000fc34 l     F .text	0000006c print_module_commands
0000fca0 l     F .text	00000030 print_modules
0000fcd0 l     F .text	00000044 print_command_params
0000fd14 l     F .text	0000004c get_destination_module
0000fd60 l     F .text	0000001c set_default_module
0000fd7c l     F .text	00000020 select_module
0000fd9c l     F .text	00000078 get_command_and_module
0000fe14 l     F .text	000000c4 shell_find_cmd
0000fed8 l     F .text	000000e0 show_cmd_help
0000ffb8 l     F .text	00000088 show_help
00010040 l     F .text	0000001c print_prompt
0001005c l     F .text	00000014 print_prompt_if_console
00010070 l     F .text	00000110 complete_module
00010180 l     F .text	00000108 complete_command
00010288 l     F .text	00000048 get_command_from_module
000102d0 l     F .text	000000f0 complete_param
000103c0 l     F .text	0000003c get_token
000103fc l     F .text	00000074 complete_select
00010470 l     F .text	0000006c line2argv
000104dc l     F .text	0000001e get_last_token
000104fc l     F .text	00000170 completion
0001066c l     F .text	00000030 shell_avail_queue_init
000107dc l     F .text	0000002a shell
00010764 l     F .text	00000026 shell_process_command
0001078a l     F .text	00000052 shell_process_nlip_line
20004114 l     O .bss	00000010 app_cmd
20004124 l     O .bss	00000004 app_prompt_handler
20004128 l     O .bss	00000200 buf
20004328 l     O .bss	00000150 compat_commands
20004478 l     O .bss	00000004 module_registered
2000447c l     O .bss	00000004 num_compat_commands
20004480 l     O .bss	00000004 num_of_shell_entities
20004484 l     O .bss	00000004 prompt
20004488 l     O .bss	00000020 shell_console_ev
200044a8 l     O .bss	00000004 shell_evq
200044ac l     O .bss	00000018 shell_modules
20000620 l     O .data	00000004 default_module
00023660 l     O .text	00000010 shell_cmd_help
00023670 l     O .text	00000010 shell_cmd_select_module
00000000 l    df *ABS*	00000000 shell_nlip.c
00010918 l     F .text	0000013c shell_nlip_mtx
00010a54 l     F .text	00000020 shell_event_data_in
200044c4 l     O .bss	00000002 g_nlip_expected_len
200044c8 l     O .bss	00000004 g_nlip_mbuf
200044cc l     O .bss	00000004 g_shell_nlip_in_arg
200044d0 l     O .bss	00000004 g_shell_nlip_in_func
200044d4 l     O .bss	00000018 g_shell_nlip_mq
00000000 l    df *ABS*	00000000 shell_os.c
00010bbc l     F .text	00000024 shell_os_ls_dev
00010d60 l     F .text	000000f0 shell_os_tasks_display_cmd
00023880 l     O .text	0000000c date_help
0002388c l     O .text	00000010 date_params
0002389c l     O .text	0000000c ls_dev_help
000238a8 l     O .text	0000000c mpool_help
000238b4 l     O .text	00000010 mpool_params
000238c4 l     O .text	00000060 os_commands
00023938 l     O .text	0000000c tasks_help
00023924 l     O .text	0000000c reset_help
00023930 l     O .text	00000008 reset_params
00023944 l     O .text	00000010 tasks_params
00000000 l    df *ABS*	00000000 shell_prompt.c
000239e0 l     O .text	00000020 prompt_commands
00023a00 l     O .text	0000000c ticks_help
00023a0c l     O .text	00000018 ticks_params
00000000 l    df *ABS*	00000000 stats.c
00010ef0 l     F .text	00000010 stats_offset
00010f00 l     F .text	0000004c stats_register_internal
0001101c l     F .text	00000058 stats_module_init_internal
00000000 l    df *ABS*	00000000 stats_nmgr.c
0001112c l     F .text	00000018 stats_nmgr_encode_name
00011144 l     F .text	00000068 stats_nmgr_list
000111ac l     F .text	00000060 stats_nmgr_walk_func
0001120c l     F .text	000000ec stats_nmgr_read
20004504 l     O .bss	0000000c shell_nmgr_group
2000062c l     O .data	00000010 shell_nmgr_group_handlers
00000000 l    df *ABS*	00000000 stats_shell.c
00011314 l     F .text	0000006c stats_shell_display_entry
00011380 l     F .text	00000018 stats_shell_display_group
00011398 l     F .text	00000050 shell_stats_display
2000063c l     O .data	00000010 shell_stats_cmd
00000000 l    df *ABS*	00000000 sysdown.c
0001140c l     F .text	0000000e sysdown_timer_exp
0001141c l     F .text	00000014 sysdown_complete
20004514 l     O .bss	00000004 sysdown_num_in_progress
20004518 l     O .bss	00000020 sysdown_timer
00000000 l    df *ABS*	00000000 sysinit.c
000114d0 l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 uwbcfg.c
000114f0 l     F .text	00000048 uwbcfg_set
00011538 l     F .text	00000038 uwbcfg_get
00011570 l     F .text	00000048 uwbcfg_export
20004554 l     O .bss	00000004 uwbcfg_callbacks
20000740 l     O .data	00000018 uwbcfg_handler
00000000 l    df *ABS*	00000000 uwbcfg_dw1000.c
00011898 l     F .text	000000a8 check_preamble_code
00000000 l    df *ABS*	00000000 uwbcfg_strtod.c
00000000 l    df *ABS*	00000000 datetime.c
00011d44 l     F .text	00000044 leapyear
00011d88 l     F .text	00000048 parse_number
00023ce8 l     O .text	00000030 month_days
00000000 l    df *ABS*	00000000 crc16.c
00023d18 l     O .text	00000200 crc16tab
00000000 l    df *ABS*	00000000 streamer.c
00000000 l    df *ABS*	00000000 streamer_console.c
0001240e l     F .text	0000000c streamer_console_vprintf
0001241a l     F .text	0000000e streamer_console_write
20000758 l     O .data	00000004 streamer_console
00023f18 l     O .text	00000008 streamer_cfg_console
00000000 l    df *ABS*	00000000 twr_tag_tdma-sysinit-app.c
00000000 l    df *ABS*	00000000 split.c
20004558 l     O .bss	00000001 split_app_active
20004559 l     O .bss	00000001 split_mode_cur
00000000 l    df *ABS*	00000000 split_config.c
0001253c l     F .text	00000004 split_conf_commit
00012540 l     F .text	0000002c split_conf_export
0001256c l     F .text	00000040 split_conf_get
000125ac l     F .text	00000044 split_conf_set
2000075c l     O .data	00000018 split_conf_handler
00000000 l    df *ABS*	00000000 base64.c
0001263c l     F .text	00000020 pos
0001265c l     F .text	0000004c token_decode
00023f78 l     O .text	00000041 base64_chars
00000000 l    df *ABS*	00000000 cborattr.c
000127c0 l     F .text	00000080 valid_attr_type
00012840 l     F .text	0000005e cbor_target_address
00012ab8 l     F .text	00000362 cbor_internal_read_object
00000000 l    df *ABS*	00000000 cbor_mbuf_reader.c
00012e28 l     F .text	0000001c cbor_mbuf_reader_cpy
00012e44 l     F .text	0000001c cbor_mbuf_reader_get8
00012e60 l     F .text	00000018 cbor_mbuf_reader_cmp
00012e78 l     F .text	0000001e cbor_mbuf_reader_get64
00012e96 l     F .text	0000001a cbor_mbuf_reader_get32
00012eb0 l     F .text	00000020 cbor_mbuf_reader_get16
00000000 l    df *ABS*	00000000 cbor_mbuf_writer.c
00000000 l    df *ABS*	00000000 cborencoder.c
00012f50 l     F .text	000000a0 create_container
00012ff0 l     F .text	0000007a encode_string
00000000 l    df *ABS*	00000000 cborparser.c
0001324a l     F .text	00000024 is_fixed_type
0001326e l     F .text	00000004 iterate_noop
00013272 l     F .text	00000134 preparse_value
000133a6 l     F .text	0000004a preparse_next_value
000133f0 l     F .text	000000a0 extract_length
00013490 l     F .text	0000016c iterate_string_chunks
000135fc l     F .text	000000ca advance_internal
00013904 l     F .text	00000082 advance_recursive
00000000 l    df *ABS*	00000000 hal_bsp.c
2000455c l     O .bss	00000004 dw1000_0
00023fc8 l     O .text	00000018 dw1000_0_cfg
00000000 l    df *ABS*	00000000 SEGGER_RTT.c
20000120 l     O .rtt	00000400 _acUpBuffer
20000520 l     O .rtt	00000010 _acDownBuffer
00000000 l    df *ABS*	00000000 dw1000_dev.c
00013d58 l     F .text	0000000a uwb_dw1000_read_sts_rxtime
00013d62 l     F .text	00000008 uwb_dw1000_hal_noblock_wait
00013dd0 l     F .text	00000020 uwb_dw1000_calc_pdoa
00013df0 l     F .text	00000008 uwb_dw1000_estimate_los
00013df8 l     F .text	00000008 uwb_dw1000_calc_fppl
00013e00 l     F .text	00000008 uwb_dw1000_calc_seq_rssi
00013e08 l     F .text	00000008 uwb_dw1000_calc_rssi
00013e10 l     F .text	00000008 uwb_dw1000_get_fppl
00013e18 l     F .text	00000008 uwb_dw1000_get_rssi
00013e20 l     F .text	00000028 uwb_dw1000_calc_clock_offset_ratio
00013e48 l     F .text	00000008 uwb_dw1000_set_on_error_continue
00013e50 l     F .text	00000008 uwb_dw1000_phy_repeated_frames
00013e58 l     F .text	00000008 uwb_dw1000_phy_rx_reset
00013e60 l     F .text	00000008 uwb_dw1000_phy_forcetrxoff
00013e68 l     F .text	0000000c uwb_dw1000_phy_data_duration
00013e74 l     F .text	0000000c uwb_dw1000_phy_SHR_duration
00013e80 l     F .text	0000000c uwb_dw1000_phy_frame_duration
00013e8c l     F .text	00000008 uwb_dw1000_read_txtime_lo32
00013e94 l     F .text	00000008 uwb_dw1000_read_txtime
00013e9c l     F .text	00000008 uwb_dw1000_read_rxtime_lo32
00013ea4 l     F .text	00000008 uwb_dw1000_read_rxtime
00013eac l     F .text	00000008 uwb_dw1000_read_systime_lo32
00013eb4 l     F .text	00000008 uwb_dw1000_read_systime
00013ebc l     F .text	00000008 uwb_dw1000_set_rxauto_disable
00013ec4 l     F .text	00000008 uwb_dw1000_set_wait4resp_delay
00013ecc l     F .text	00000008 uwb_dw1000_set_wait4resp
00013ed4 l     F .text	00000008 uwb_dw1000_tx_wait
00013edc l     F .text	00000008 uwb_dw1000_write_tx_fctrl
00013ee4 l     F .text	00000008 uwb_dw1000_write_tx
00013eec l     F .text	00000008 uwb_dw1000_stop_rx
00013ef4 l     F .text	00000008 uwb_dw1000_start_rx
00013efc l     F .text	00000008 uwb_dw1000_start_tx
00013f04 l     F .text	00000008 uwb_dw1000_set_delay_start
00013f0c l     F .text	00000008 uwb_dw1000_set_abs_timeout
00013f14 l     F .text	00000016 uwb_dw1000_set_rx_window
00013f2a l     F .text	0000000a uwb_dw1000_adj_rx_timeout
00013f34 l     F .text	0000000a uwb_dw1000_set_rx_timeout
00013f3e l     F .text	00000008 uwb_dw1000_set_dblrxbuf
00013f46 l     F .text	00000008 uwb_dw1000_txrf_power_value
00013f4e l     F .text	00000008 uwb_dw1000_txrf_config
00013f56 l     F .text	00000008 uwb_dw1000_mac_config
000142c4 l     F .text	0000001a uwb_dw1000_set_euid
000142de l     F .text	0000001a uwb_dw1000_set_uid
000142f8 l     F .text	0000001a uwb_dw1000_set_panid
00014462 l     F .text	00000008 uwb_dw1000_sleep_config
000144e0 l     F .text	00000008 uwb_dw1000_enter_sleep
00014790 l     F .text	00000008 uwb_dw1000_wakeup
000147e0 l     F .text	00000008 uwb_dw1000_enter_sleep_after_tx
00014832 l     F .text	00000008 uwb_dw1000_enter_sleep_after_rx
00024038 l     O .text	00000015 __func__.0
00024050 l     O .text	000000dc dw1000_uwb_funcs
00000000 l    df *ABS*	00000000 dw1000_hal.c
20000778 l     O .data	000005f0 hal_dw1000_instances
00000000 l    df *ABS*	00000000 dw1000_mac.c
000150d6 l     F .text	00000028 calc_rx_window_timeout
000150fe l     F .text	00000012 dw1000_checkoverrun
00015110 l     F .text	00000024 dw1000_irq
00015720 l     F .text	00000022 update_rx_window_timeout
000161a8 l     F .text	000009a8 dw1000_interrupt_ev_cb
00024190 l     O .text	00000008 agc_config
00024198 l     O .text	00000008 chan_idx
000241a0 l     O .text	00000020 digital_bb_config
000241c0 l     O .text	00000004 dtune1
000241c4 l     O .text	00000003 dwnsSFDlen
000241c8 l     O .text	00000018 fs_pll_cfg
000241e0 l     O .text	00000006 fs_pll_tune
00024224 l     O .text	00000032 lde_replicaCoeff
00024258 l     O .text	00000002 rx_config
0002425c l     O .text	0000000c sftsh
00024268 l     O .text	00000018 tx_config
00000000 l    df *ABS*	00000000 dw1000_phy.c
00000000 l    df *ABS*	00000000 dw1000_pkg.c
00000000 l    df *ABS*	00000000 dw1000_cli.c
000177a0 l     F .text	00000010 dw1000_cli_too_few_args
00017a00 l     F .text	0000020c dw1000_cli_cmd
20000d68 l     O .data	00000010 shell_dw1000_cmd
00000000 l    df *ABS*	00000000 dw1000_gpio.c
00000000 l    df *ABS*	00000000 dw1000_otp.c
00000000 l    df *ABS*	00000000 hal_flash.c
00017d4c l     F .text	00000028 nrf52k_flash_wait_ready
00017d74 l     F .text	00000050 nrf52k_flash_erase_sector
00017dc4 l     F .text	00000004 nrf52k_flash_init
00017dc8 l     F .text	00000020 nrf52k_flash_sector_info
00017de8 l     F .text	000000c8 nrf52k_flash_write
00017eb0 l     F .text	0000000e nrf52k_flash_read
00024604 l     O .text	0000001c nrf52k_flash_funcs
00000000 l    df *ABS*	00000000 hal_os_tick.c
00017ec0 l     F .text	000000d4 nrf52_timer_handler
00000000 l    df *ABS*	00000000 hal_spi.c
000180cc l     F .text	0000006e nrf52_irqm_handler
00018154 l     F .text	00000014 hal_spi_stop_transfer
00018168 l     F .text	0000004a hal_spi_config_slave
000181b4 l     F .text	000000bc hal_spi_init_master
00018270 l     F .text	000000ea hal_spi_config_master
00024620 l     O .text	00000010 nrf52_hal_spis
00000000 l    df *ABS*	00000000 hal_timer.c
00018678 l     F .text	0000000a nrf_read_timer_cntr
00018684 l     F .text	000000b8 nrf_timer_set_ocmp
0001873c l     F .text	0000000a nrf_timer_disable_ocmp
00018746 l     F .text	0000000a nrf_rtc_disable_ocmp
00018750 l     F .text	00000054 hal_timer_read_bsptimer
000187a4 l     F .text	00000076 hal_timer_chk_queue
0001881a l     F .text	0000002c hal_timer_irq_handler
00024630 l     O .text	00000018 nrf52_hal_timers
00000000 l    df *ABS*	00000000 hal_watchdog.c
00018b00 l     F .text	0000000e nrf52_hal_wdt_default_handler
00018b10 l     F .text	00000020 nrf52_wdt_irq_handler
00000000 l    df *ABS*	00000000 nrf52_periph.c
00018bcc l     F .text	00000034 nrf52_periph_create_timers
00018c00 l     F .text	00000020 nrf52_periph_create_spi
00024648 l     O .text	00000004 os_bsp_spi0m_cfg
00000000 l    df *ABS*	00000000 cir.c
00000000 l    df *ABS*	00000000 json_encode.c
00018d2c l     F .text	000002e4 json_encode_value
00000000 l    df *ABS*	00000000 json_util.c
00000000 l    df *ABS*	00000000 rng_math.c
00000000 l    df *ABS*	00000000 timescale.c
00019218 l     F .text	00000174 timescale_QUpdate
0001938c l     F .text	00000084 timescale_JofAx
00019410 l     F .text	00000074 timescale_Aofx
00019488 l     F .text	000000f8 timescale_innovation
00019580 l     F .text	00000044 timescale_constraints
000195c8 l     F .text	0000006c timescale_Hofx
000246a6 l     O .text	0000000f __func__.7324
000246b5 l     O .text	0000000f __func__.7336
00000000 l    df *ABS*	00000000 srkf_dbl.c
00019828 l     F .text	00000080 Hofx
000198a8 l     F .text	000000a0 Aofx
00024703 l     O .text	0000000e __func__.7283
00024711 l     O .text	0000000e __func__.7299
0002471f l     O .text	0000000e __func__.7311
00000000 l    df *ABS*	00000000 trisolve_dbl.c
00000000 l    df *ABS*	00000000 ud_dbl.c
00000000 l    df *ABS*	00000000 thornton_dbl.c
00000000 l    df *ABS*	00000000 bierman_dbl.c
00000000 l    df *ABS*	00000000 twr_ds.c
0001aa80 l     F .text	00000450 rx_complete_cb
20000d78 l     O .data	0000003c g_cbs
20000db4 l     O .data	00000010 g_config
20000dc4 l     O .data	00000010 g_rng_cfgs
00000000 l    df *ABS*	00000000 twr_ds_ext.c
0001afb8 l     F .text	00000464 rx_complete_cb
200045d4 l     O .bss	0000001c g_twr_ds_ext_stat
20000dd4 l     O .data	0000003c g_cbs
20000e10 l     O .data	00000010 g_config
20000e20 l     O .data	00000010 g_rng_cfgs
00000000 l    df *ABS*	00000000 twr_ss.c
0001b508 l     F .text	000002a8 rx_complete_cb
20000e30 l     O .data	0000003c g_cbs
20000e6c l     O .data	00000010 g_config
20000e7c l     O .data	00000010 g_rng_cfgs
00000000 l    df *ABS*	00000000 twr_ss_ack.c
0001b8a0 l     F .text	00000290 rx_complete_cb
0001bb30 l     F .text	0000015c tx_complete_cb
20000e8c l     O .data	0000003c g_cbs
20000ec8 l     O .data	00000010 g_config
20000ed8 l     O .data	00000010 g_rng_cfgs
00000000 l    df *ABS*	00000000 twr_ss_ext.c
0001bd58 l     F .text	00000298 rx_complete_cb
20004634 l     O .bss	0000001c g_twr_ss_ext_stat
20000ee8 l     O .data	0000003c g_cbs
20000f24 l     O .data	00000010 g_config
20000f34 l     O .data	00000010 g_rng_cfgs
00000000 l    df *ABS*	00000000 wcs_timescale.c
0001c0d0 l     F .text	00000094 wcs_timescale_cb
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strrchr.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll.c
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 strntoumax.c
00000000 l    df *ABS*	00000000 strsep.c
00000000 l    df *ABS*	00000000 strpbrk.c
00000000 l    df *ABS*	00000000 imgmgr.c
0001c6ca l     F .text	00000040 imgr_vercmp
0001c70a l     F .text	0000003e imgr_img_tlvs
0001c748 l     F .text	00000050 imgr_upload_good_rsp
0001c894 l     F .text	00000036 imgr_upload_log
0001c968 l     F .text	0000006c imgr_erase_state
0001c9d4 l     F .text	0000006c imgr_erase
0001ca40 l     F .text	00000190 imgr_upload_inspect
0001cc0c l     F .text	000001fc imgr_upload
20004654 l     O .bss	00000030 imgr_state
20004684 l     O .bss	00000004 imgr_upload_arg
20004688 l     O .bss	00000004 imgr_upload_cb
20000f44 l     O .data	0000000c imgr_nmgr_group
00024a60 l     O .text	00000038 imgr_nmgr_handlers
00000000 l    df *ABS*	00000000 imgmgr_log.c
0001ce58 l     F .text	00000004 imgmgr_log_gen
00000000 l    df *ABS*	00000000 imgmgr_state.c
0001cf62 l     F .text	00000026 imgmgr_state_any_pending
00000000 l    df *ABS*	00000000 imgmgr_util.c
00000000 l    df *ABS*	00000000 mgmt.c
0001d334 l     F .text	0000001c mgmt_group_list_lock
0001d368 l     F .text	00000030 mgmt_find_group
2000468c l     O .bss	0000000c mgmt_group_lock
20000f50 l     O .data	00000008 mgmt_group_list
00000000 l    df *ABS*	00000000 newtmgr.c
0001d404 l     F .text	00000024 nmgr_rsp_frag_alloc
0001d428 l     F .text	00000064 nmgr_init_rsp
0001d48c l     F .text	00000034 nmgr_rsp_tx
0001d4c0 l     F .text	0000006c nmgr_send_err_rsp
0001d52c l     F .text	00000188 nmgr_handle_req
0001d6b4 l     F .text	0000001a nmgr_process
0001d6ce l     F .text	0000000a nmgr_event_data_in
0001d6d8 l     F .text	0000000e nmgr_cbuf_init
2000469c l     O .bss	00000060 nmgr_task_cbuf
00000000 l    df *ABS*	00000000 newtmgr_os.c
0001d780 l     F .text	00000050 nmgr_reset
0001d7d0 l     F .text	0000000a nmgr_reset_tmo
0001d7dc l     F .text	00000060 nmgr_datetime_set
0001d83c l     F .text	0000005c nmgr_def_console_echo
0001d898 l     F .text	00000078 nmgr_def_echo
0001d910 l     F .text	00000080 nmgr_datetime_get
0001d990 l     F .text	00000108 nmgr_def_mpstat_read
0001da98 l     F .text	000001a0 nmgr_def_taskstat_read
200046fc l     O .bss	00000020 nmgr_reset_callout
20000f58 l     O .data	0000000c nmgr_def_group
00024bb0 l     O .text	00000030 nmgr_def_group_handlers
00000000 l    df *ABS*	00000000 nmgr_shell.c
0001dc48 l     F .text	00000006 nmgr_shell_get_mtu
0001dc50 l     F .text	00000010 nmgr_shell_in
0001dc60 l     F .text	0000001a nmgr_shell_out
2000471c l     O .bss	00000020 nmgr_shell_transport
00000000 l    df *ABS*	00000000 config_init.c
0001dcd4 l     F .text	000000bc config_init_fcb
2000473c l     O .bss	0000006c conf_fcb_area
20000f64 l     O .data	00000038 config_init_conf_fcb
00000000 l    df *ABS*	00000000 config_fcb.c
0001ddb4 l     F .text	00000024 conf_fcb_load
0001ddd8 l     F .text	00000044 conf_fcb_load_cb
0001de1c l     F .text	0000002c conf_fcb_var_read
0001de48 l     F .text	000000d8 conf_fcb_compress_internal
0001df20 l     F .text	00000064 conf_fcb_append
0001e022 l     F .text	0000000a conf_fcb_save
20000f9c l     O .data	00000010 conf_fcb_itf
00000000 l    df *ABS*	00000000 config_line.c
00000000 l    df *ABS*	00000000 flash_map.c
0001e14a l     F .text	00000070 flash_map_read_mfg
200047b0 l     O .bss	00000078 mfg_areas.0
00000000 l    df *ABS*	00000000 log.c
0001e3c8 l     F .text	0000001c log_registered
0001e3e4 l     F .text	00000004 log_chk_type
0001e3e8 l     F .text	00000014 log_chk_max_entry_len
0001e3fc l     F .text	00000016 log_call_append_cb
0001e414 l     F .text	0000010c log_append_prepare
0001e6b0 l     F .text	00000044 log_read_last_hdr
0001e7c0 l     F .text	00000024 log_read_hdr_walk
0001e804 l     F .text	00000044 log_walk_body_fn
20004830 l     O .bss	00000004 g_log_module_list
20004834 l     O .bss	00000001 log_written
20000fac l     O .data	00000008 g_log_list
00000000 l    df *ABS*	00000000 log_console.c
0001e868 l     F .text	00000004 log_console_read
0001e86c l     F .text	00000004 log_console_walk
0001e870 l     F .text	00000004 log_console_flush
0001e874 l     F .text	00000020 log_console_print_hdr
0001e894 l     F .text	0000002c log_console_append_body
0001e8c0 l     F .text	00000030 log_console_append
20004838 l     O .bss	00000018 log_console
00000000 l    df *ABS*	00000000 log_level.c
20004850 l     O .bss	00000080 log_level_map
00000000 l    df *ABS*	00000000 log_nmgr.c
0001e994 l     F .text	0000000a cbor_cnt_writer
0001e99e l     F .text	00000032 log_nmgr_clear
0001e9d0 l     F .text	00000084 log_nmgr_logs_list
0001ea54 l     F .text	00000090 log_nmgr_module_list
0001eae4 l     F .text	000000d4 log_nmgr_level_list
0001ebb8 l     F .text	00000074 log_nmgr_modlevel_set
0001ec2c l     F .text	00000074 log_nmgr_modlevel_get
0001eca0 l     F .text	000000b8 log_encode_entries
0001ef1c l     F .text	00000238 log_nmgr_encode_entry
0001ed58 l     F .text	0000008c log_encode
0001ede4 l     F .text	00000138 log_nmgr_read
200048d0 l     O .bss	0000000c log_nmgr_group
20000fb4 l     O .data	00000048 log_nmgr_group_handlers
00000000 l    df *ABS*	00000000 modlog.c
0001f174 l     F .text	0000002c modlog_find_by_module
0001f1a0 l     F .text	0000003c modlog_insert
0001f1dc l     F .text	0000001c modlog_alloc
0001f1f8 l     F .text	00000048 modlog_infer_handle
0001f240 l     F .text	00000046 modlog_register_no_lock
0001f286 l     F .text	0000002c modlog_append_one
0001f2b4 l     F .text	00000088 modlog_append_no_lock
200048dc l     O .bss	00000004 modlog_first_dflt
200048e0 l     O .bss	000000c0 modlog_mapping_buf
200049bc l     O .bss	00000004 modlog_mappings
200049c0 l     O .bss	00000024 modlog_rwl
00000000 l    df *ABS*	00000000 mfg.c
0001f48c l     F .text	00000090 mfg_seek_next_aux
0001f51c l     F .text	0000006c mfg_read_mmr
0001f588 l     F .text	00000054 mfg_read_next_mmr
0001f5dc l     F .text	00000038 mfg_open_flash_area
0001f614 l     F .text	0000003e mfg_read_tlv_body
0001f6f0 l     F .text	00000042 mfg_read_mmr_refs
200049e4 l     O .bss	00000001 mfg_initialized
200049e8 l     O .bss	00000018 mfg_mmrs
20004a00 l     O .bss	00000004 mfg_num_mmrs
00000000 l    df *ABS*	00000000 log_reboot.c
0001f734 l     F .text	0000002c reboot_conf_export
0001f760 l     F .text	00000054 reboot_conf_set
0001f7b4 l     F .text	00000058 reboot_conf_get
0001f80c l     F .text	0000012c log_reboot_write
0001f938 l     F .text	00000014 log_reboot_init_console
20004a04 l     O .bss	00000001 log_reboot_written
20004a08 l     O .bss	0000000c log_reboot_written_str
20004a18 l     O .bss	0000000c reboot_cnt_str
00000000 l    df *ABS*	00000000 rwlock.c
0001f9d8 l     F .text	0000000c rwlock_complete_handoff
0001f9e4 l     F .text	0000001a rwlock_read_must_block
0001f9fe l     F .text	00000016 rwlock_write_must_block
0001fa14 l     F .text	0000003a rwlock_unblock
00000000 l    df *ABS*	00000000 bootutil_misc.c
0001fb70 l     F .text	0000000a boot_flag_decode
0001fb7a l     F .text	00000006 boot_magic_off
0001fb80 l     F .text	00000006 boot_copy_done_off
0001fb86 l     F .text	00000006 boot_image_ok_off
0001fb8c l     F .text	00000018 boot_magic_decode
0001fba4 l     F .text	0000004a boot_write_trailer_byte
00024eb0 l     O .text	00000012 boot_swap_tables
00000000 l    df *ABS*	00000000 loader.c
0001febc l     F .text	00000020 boot_write_sz
0001fedc l     F .text	0000002e boot_read_image_header
0001ff0c l     F .text	00000034 boot_read_image_headers
0001ff40 l     F .text	00000074 split_image_check
0001ffb4 l     F .text	00000064 boot_read_sectors
20004a28 l     O .bss	00000068 boot_data
20004a90 l     O .bss	00000004 tmpbuf.0
00000000 l    df *ABS*	00000000 image_validate.c
000200f0 l     F .text	00000078 bootutil_img_hash
00000000 l    df *ABS*	00000000 sha256.c
00024ec4 l     O .text	00000100 K
00000000 l    df *ABS*	00000000 fcb.c
00000000 l    df *ABS*	00000000 fcb_append.c
000207fc l     F .text	00000032 fcb_new_area
00000000 l    df *ABS*	00000000 fcb_elem_info.c
00000000 l    df *ABS*	00000000 fcb_getnext.c
00000000 l    df *ABS*	00000000 fcb_rotate.c
00000000 l    df *ABS*	00000000 fcb_walk.c
00000000 l    df *ABS*	00000000 hal_flash.c
00020cbc l     F .text	0000001e hal_flash_check_addr
20004a94 l     O .bss	00000001 protected_flash
00000000 l    df *ABS*	00000000 os_heap.c
00020f78 l     F .text	0000002c os_malloc_lock
00020fa4 l     F .text	00000028 os_malloc_unlock
20004a98 l     O .bss	0000000c os_malloc_mutex
00000000 l    df *ABS*	00000000 crc8.c
00024fc4 l     O .text	00000010 crc8_small_table
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _arm_fixunsdfsi.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _aeabi_ldivmod.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 sf_ceil.c
00000000 l    df *ABS*	00000000 w_asin.c
00000000 l    df *ABS*	00000000 w_fmod.c
00000000 l    df *ABS*	00000000 wf_log10.c
00000000 l    df *ABS*	00000000 e_asin.c
00000000 l    df *ABS*	00000000 e_fmod.c
00024fd8 l     O .text	00000010 Zero
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 ef_log10.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 ef_log.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 twr_tag_tdma-sysdown-app.c
00000000 l    df *ABS*	00000000 twr_tag_tdma-sysflash.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 impure.c
20001020 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
000136c6 g     F .text	00000078 _cbor_value_decode_int64_internal
00013a38 g     F .text	000001ac SEGGER_RTT_WriteNoLock
00012f40 g     F .text	00000010 cbor_mbuf_writer_init
000218e4 g     F .text	0000002c .hidden __aeabi_dcmpun
0000a4a8 g     F .text	00000030 os_arch_start
0001e33c g     F .text	0000001c flash_area_id_from_image_slot
0000e42a g     F .text	00000008 dpl_cputime_delay_usecs
0001dfdc g     F .text	00000014 conf_fcb_dst
20004aa8 g       .bss	00000000 __HeapBase
20003464 g     O .bss	00000008 g_os_task_list
00009048 g     F .text	00000078 os_idle_task
000218a8 g     F .text	00000012 .hidden __aeabi_dcmple
00015618 g     F .text	000000a8 dw1000_stop_rx
0001c4dc g     F .text	00000016 strcpy
00016f7e g     F .text	0000005a dw1000_phy_config_lde
0001768e g     F .text	00000046 dw1000_phy_event_cnt_ctrl
0001c3c8 g     F .text	0000001a wcs_timescale_free
00016ea2 g     F .text	0000002e dw1000_phy_sysclk_PLL
00000000 g       .svc_table	00000000 SVC_Count
00015702 g     F .text	0000001e dw1000_adj_rx_timeout
00008164  w    F .text	00000002 TIMER2_IRQHandler
0000e3b4 g     F .text	00000018 fmemopen_w
000217e4 g     F .text	0000007a .hidden __cmpdf2
0001c41c g     F .text	0000002a wcs_timescale_pkg_down
0000e484 g     F .text	00000048 mem_split_frag
00021e90 g     F .text	00000012 fabs
0000a716 g     F .text	0000005a os_mbuf_copydata
2000266c g     O .bss	00000008 g_os_mempool_list
00009280 g     F .text	0000001a os_callout_init
0000929c g     F .text	0000003c os_callout_stop
00008164  w    F .text	00000002 RTC0_IRQHandler
00013dae g     F .text	00000008 uwb_dw1000_set_autoack
0001fc12 g     F .text	000000ba boot_read_swap_state
0001a430 g     F .text	00000446 thornton_dbl
0000d990 g     F .text	00000050 add_malloc_block
000217e4 g     F .text	0000007a .hidden __eqdf2
000157ee g     F .text	00000042 dw1000_set_rx_window
000095cc g     F .text	00000068 os_eventq_put
0001069c g     F .text	00000010 shell_evq_set
00014a1c g     F .text	00000054 hal_dw1000_reset
0001a1bc g     F .text	000000cc trisolve_dbl
20000530 g       .data	00000000 __data_start__
0000a920 g     F .text	0000005c os_mbuf_extend
0000bdee g     F .text	000000f4 uwb_ccp_start
0001c52e g     F .text	00000020 strtok_r
000245ec g     O .text	00000018 nrf52k_flash_dev
00021354 g     F .text	0000005a .hidden __floatdidf
0002095a g     F .text	00000040 fcb_append_finish
000248d8 g     O .text	0000000c g_stats_map_twr_ds_ext_stat_section
0000e300 g     F .text	00000024 printf
0001d056 g     F .text	0000004a imgmgr_state_confirm
00014e30 g     F .text	000001e4 hal_dw1000_write_noblock
00023388 g     O .text	00000004 stdout
00010e88 g     F .text	00000054 shell_ticks_cmd
00008164  w    F .text	00000002 SWI0_EGU0_IRQHandler
00008dfc g     F .text	00000022 hal_gpio_write
000202f8 g     F .text	00000130 mbedtls_internal_sha256_process
000205ee g     F .text	00000024 fcb_free_sector_cnt
00010b8c g     F .text	00000018 shell_nlip_output
0001e85e g     F .text	0000000a log_flush
0000a408 g     F .text	0000009c os_arch_os_init
0001f94c g     F .text	00000038 log_reboot
00008156  w    F .text	00000002 HardFault_Handler
000122e4 g     F .text	000000d0 datetime_format
00018858 g     F .text	00000060 hal_timer_init
0001f664 g     F .text	0000001a mfg_seek_next_with_type
000130f4 g     F .text	0000008c cbor_encode_int
0000a4d8 g     F .text	00000064 os_arch_os_start
200040e8 g     O .bss	00000001 g_console_ignore_non_nlip
200040ea g     O .bss	00000001 g_console_silence_non_nlip
00020d02 g     F .text	00000010 hal_flash_align
0001e7ac g     F .text	00000014 log_read
000110b8 g     F .text	00000028 stats_group_walk
0000cefc g     F .text	000000b8 uwb_rng_pkg_init
00008164  w    F .text	00000002 SWI2_EGU2_IRQHandler
0001fbee g     F .text	0000001e boot_magic_compatible_check
0000fbd8 g     F .text	0000000c console_no_ticks
00008c08 g     F .text	000000c0 uwb_calc_aoa
0000b0c8 g     F .text	00000050 tdma_tx_slot_start
0000abce g     F .text	0000000c SysTick_Handler
0000c7f8 g     F .text	00000024 uwb_rng_get_config
00008164  w    F .text	00000002 GPIOTE_IRQHandler
00009fac g     F .text	0000004a os_task_remove
00018848 g     F .text	00000010 nrf52_timer0_irq_handler
00012e1c g     F .text	0000000c cbor_read_object
00017c0c g     F .text	00000010 dw1000_cli_register
00012f20 g     F .text	0000001e cbor_mbuf_writer
0000980c g     F .text	0000002a os_memblock_put
0001a288 g     F .text	000001a4 ud_dbl
00008164  w    F .text	00000002 PWM1_IRQHandler
0000e908 g     F .text	0000000c conf_dst_register
00009958 g     F .text	00000024 os_msys_get_pkthdr
200047a8 g     O .bss	00000004 flash_map
00011980 g     F .text	00000244 uwbcfg_commit_to_inst_dw1000
00020eb0 g     F .text	00000032 hal_flash_is_erased
0000ab88 g     F .text	00000046 PendSV_Handler
0000e35e g     F .text	0000001c snprintf
00008154  w    F .text	00000002 NMI_Handler
00025000 g       .ARM.exidx	00000000 __exidx_end
00020248 g     F .text	0000000c mbedtls_sha256_init
00008020 g       .text	00000000 __isr_vector_start
000159b4 g     F .text	00000028 dw1000_set_autoack_delay
0001e520 g     F .text	00000064 log_init
0000e37a g     F .text	0000003a memfile_write
0000a380 g     F .text	00000014 os_arch_ctx_sw
00013180 g     F .text	0000005c cbor_encode_simple_value
0000fbac g     F .text	00000004 rtt_console_is_init
0000923e g     F .text	0000000a os_system_reset
00014a04 g     F .text	00000018 hal_dw1000_inst
000081d0 g     F .text	0000002c hal_system_reset
0001446a g     F .text	00000076 dw1000_dev_enter_sleep
000090e4 g     F .text	00000070 os_init_idle_task
20000560 g       .data	00000000 __aeabi_unwind_cpp_pr0
000217d4 g     F .text	0000008a .hidden __gtdf2
00009b28 g     F .text	0000000c os_sched_set_current_task
00008164  w    F .text	00000002 POWER_CLOCK_IRQHandler
00022c24 g     F .text	0000000c __errno
00025000 g       .ARM.exidx	00000000 __etext
0000a308 g     F .text	00000052 os_get_uptime_usec
0000d6cc g     F .text	00000074 uwb_wcs_prediction
0000fa30 g     F .text	0000003c console_vprintf
0001f154 g     F .text	00000020 log_nmgr_register_group
00008164  w    F .text	00000002 RADIO_IRQHandler
0001e2a4 g     F .text	00000028 flash_area_write
0001c098 g     F .text	00000038 twr_ss_ext_pkg_down
00021b10 g     F .text	0000002e .hidden __aeabi_d2lz
0000a990 g     F .text	000000b8 os_mutex_release
00010f4c g     F .text	0000000a stats_size
00011104 g     F .text	00000028 stats_register
00022534 g     F .text	0000027c __ieee754_fmod
20004698 g     O .bss	00000004 nmgr_evq
000099fc g     F .text	00000020 os_sanity_check_register
20001448 g       .bssnz	00000000 __bssnz_start__
20003868 g     O .bss	00000004 conf_load_srcs
00020638 g     F .text	00000020 fcb_get_len
0001700c g     F .text	000001d2 dw1000_phy_init
0000a198 g     F .text	00000026 os_time_delay
0001fd44 g     F .text	000000a4 boot_swap_type
20000650 g     O .data	000000a0 g_uwb_config
0000a898 g     F .text	00000088 os_mbuf_copyinto
00008164  w    F .text	00000002 PDM_IRQHandler
00021870 g     F .text	00000010 .hidden __aeabi_cdcmple
000171de g     F .text	00000066 dw1000_phy_rx_reset
0001f67e g     F .text	0000000a mfg_read_tlv_flash_area
0000fbf0 g     F .text	0000000c console_get_ticks
000156f0 g     F .text	00000012 dw1000_set_rxauto_disable
0001cf88 g     F .text	0000001e imgmgr_state_slot_in_use
000123b4 g     F .text	00000034 crc16_ccitt
0001c168 g     F .text	000001d4 wcs_timescale_ev
0001373e g     F .text	00000024 cbor_parser_init
00016c08 g     F .text	00000060 dw1000_calc_rssi
0000fb9c g     F .text	00000010 console_rx_restart
0000986c g     F .text	00000010 os_mempool_module_init
0001d6f4 g     F .text	0000000c mgmt_evq_set
00008164  w    F .text	00000002 TEMP_IRQHandler
0000a3a6 g     F .text	0000000a os_arch_in_critical
000241e8 g     O .text	0000003c g_stats_map_mac_stat_section
00008164  w    F .text	00000002 QDEC_IRQHandler
00017554 g     F .text	00000054 dw1000_phy_data_duration
200006f0 g     O .data	00000050 g_uwbcfg_str
00013be4 g     F .text	00000110 SEGGER_RTT_GetKey
00008164  w    F .text	00000002 TIMER3_IRQHandler
0000c910 g     F .text	00000028 uwb_rng_clear_twr_data
0000a374 g     F .text	0000000a timer_handler
0000955c g     F .text	00000024 os_dev_lookup
00009b34 g     F .text	00000090 os_sched_sleep
000140f4 g     F .text	000000e0 dw1000_read_reg
00013f60 g     F .text	000000c8 dw1000_read
0000f9d4 g     F .text	0000000c console_set_completion_cb
0000dac0 g     F .text	0000001a memcpy
00021860 g     F .text	00000020 .hidden __aeabi_cdrcmple
00010a98 g     F .text	000000e0 shell_nlip_process
000125f0 g     F .text	00000010 split_conf_init
0000eb28 g     F .text	00000034 conf_parse_name
00008b30 g     F .text	00000074 uwb_task_init
00018b30 g     F .text	00000078 hal_watchdog_init
0000d7c0 g     F .text	00000020 uwb_wcs_read_systime_master64
000212dc g     F .text	00000022 .hidden __floatsidf
0000e914 g     F .text	00000054 conf_load
00019058 g     F .text	00000038 json_encode_array_value
0000d740 g     F .text	00000068 uwb_wcs_local_to_master64
000217dc g     F .text	00000082 .hidden __ltdf2
000190da g     F .text	00000026 json_readn
000093e0 g     F .text	0000000c os_cputime_init
20003874 g     O .bss	00000004 conf_handlers
00019090 g     F .text	0000001c json_encode_array_finish
000189e4 g     F .text	0000002c hal_timer_set_cb
00021ae0 g     F .text	00000000 .hidden __aeabi_uldivmod
00020ee2 g     F .text	00000062 hal_flash_isempty
000124a8 g     F .text	0000002c split_app_init
0000d8a8 g     F .text	00000034 puts
0000ce78 g     F .text	00000020 rng_issue_complete
00000020 g       *ABS*	00000000 _imghdr_size
00009aec g     F .text	00000030 os_sched_ctx_sw_hook
00022a24 g     F .text	00000200 __ieee754_logf
00020a62 g     F .text	00000052 fcb_elem_info
200040cc g     O .bss	00000004 console_is_midline
000106ac g     F .text	000000b8 shell_exec
0000a616 g     F .text	00000014 os_mbuf_free
2000053c g     O .data	00000004 SystemCoreClock
0000e432 g     F .text	00000022 dpl_cputime_timer_relative
000156c0 g     F .text	0000001e dw1000_set_wait4resp
000081b4 g     F .text	0000000c hal_system_init
000131dc g     F .text	0000000e cbor_encode_byte_string
00017248 g     F .text	00000120 dw1000_phy_forcetrxoff
00008164  w    F .text	00000002 SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
0000a3b0 g     F .text	00000040 os_arch_task_stack_init
0001603a g     F .text	00000036 dw1000_calc_clock_offset_ratio_ttco
000141d4 g     F .text	000000f0 dw1000_write_reg
0000d9e0 g     F .text	0000006c malloc
0001e27c g     F .text	00000028 flash_area_read
00016f5a g     F .text	00000024 dw1000_phy_disable_sequencing
00008f64 g     F .text	0000004c __assert_func
0001c8cc g     F .text	00000018 imgr_my_version
0001813c g     F .text	00000018 nrf52_spi0_irq_handler
0001ceac g     F .text	000000b6 imgmgr_state_flags
00009cf8 g     F .text	00000040 os_sched_wakeup_ticks
000113e8 g     F .text	00000024 stats_shell_register
0000f9e0 g     F .text	00000050 console_pkg_init
0001ce1c g     F .text	0000003c imgmgr_module_init
0000815c  w    F .text	00000002 UsageFault_Handler
00015400 g     F .text	0000006a dw1000_set_delay_start
0001c55a g     F .text	0000000c strtoll
0000e324 g     F .text	0000003a vsnprintf
2000453c g     O .bss	00000018 _uwbcfg_log
00021960 g     F .text	00000040 .hidden __fixunsdfsi
2000264c g     O .bss	00000008 g_callout_list
00020fcc g     F .text	00000018 os_malloc
0000bd7c g     F .text	00000072 uwb_ccp_free
00008164  w    F .text	00000002 UARTE0_UART0_IRQHandler
0000de7c g     F .text	0000047c tfp_format
2000fe50 g       *ABS*	00000000 __HeapLimit
20001448 g       .bss	00000000 __bss_start__
0000afbc g     F .text	0000003e tdma_release_slot
000081c0 g     F .text	00000010 hal_debugger_connected
000212bc g     F .text	0000001e .hidden __aeabi_ui2d
00020d74 g     F .text	00000070 hal_flash_write
0000e72e g     F .text	00000058 dpl_mbuf_appendfrom
0001ce5c g     F .text	00000014 imgmgr_log_upload_start
00008164  w    F .text	00000002 TIMER4_IRQHandler
000149b0 g     F .text	00000052 hal_dw1000_spi_txrx_cb
00021bbc g     F .text	000002d0 .hidden __udivmoddi4
00021038 g     F .text	00000000 .hidden __aeabi_drsub
0000e402 g     F .text	00000008 dpl_cputime_timer_stop
0000b02c g     F .text	0000003e tdma_free
0001d738 g     F .text	00000048 nmgr_pkg_init
0001c080 g     F .text	00000018 twr_ss_ext_free
000138cc g     F .text	00000038 _cbor_value_copy_string
00017c20 g     F .text	000000d2 dw1000_gpio_config_leds
00008ba4 g     F .text	00000018 uwb_task_deinit
2000345c g     O .bss	00000004 g_current_task
00009a1c g     F .text	0000006c os_sanity_run
0001321e g     F .text	0000002c cbor_encoder_close_container
0000a394 g     F .text	0000000c os_arch_save_sr
20004511 g     O .bss	00000001 sysdown_active
00021894 g     F .text	00000012 .hidden __aeabi_dcmplt
0001fcf8 g     F .text	00000020 boot_write_magic
000097a8 g     F .text	00000014 os_mempool_init
0001dd90 g     F .text	00000020 config_pkg_init
0000a1c0 g     F .text	00000038 os_gettimeofday
2000346c g     O .bss	00000001 g_task_id
0000eb5c g     F .text	00000016 conf_parse_and_lookup
00011fa4 g     F .text	00000140 timeval_to_clocktime
00011830 g     F .text	00000010 uwbcfg_register
20000624 g     O .data	00000008 g_stats_registry
00021300 g     F .text	00000042 .hidden __extendsfdf2
0000eb04 g     F .text	00000024 conf_handler_lookup
00016c68 g     F .text	00000020 dw1000_get_rssi
00021604 g     F .text	000001d0 .hidden __aeabi_ddiv
00021044 g     F .text	00000276 .hidden __adddf3
00008a14 g     F .text	00000060 uwb_dev_idx_lookup
00024fe8 g       .text	00000000 __exidx_start
0001af68 g     F .text	00000018 twr_ds_free
0001c57c g     F .text	00000100 strntoumax
000213b0 g     F .text	00000254 .hidden __aeabi_dmul
00023190 g     O .text	00000078 g_stats_map_uwb_ccp_stat_section
00009a88 g     F .text	00000010 os_sanity_init
20001014 g     O .data	00000001 __fdlib_version
20004650 g     O .bss	00000004 imgmgr_dfu_callbacks_fn
00019100 g     F .text	00000048 uwb_rng_tof_to_meters
0001d0a0 g     F .text	000001bc imgmgr_state_read
0000a64a g     F .text	000000a8 os_mbuf_append
0001f688 g     F .text	0000000a mfg_read_tlv_mmr_ref
0000fbb0 g     F .text	00000028 rtt_console_init
0000ab28 g     F .text	00000014 os_set_env
0000e596 g     F .text	00000036 dpl_memblock_put_from_cb
00014798 g     F .text	00000048 dw1000_dev_enter_sleep_after_tx
00016ce8 g     F .text	0000000e dw1000_read_systime_lo
00016c88 g     F .text	00000050 dw1000_estimate_los
000139c0 g     F .text	00000010 hal_bsp_flash_dev
00015a66 g     F .text	000000c4 dw1000_set_dblrxbuff
00018c20 g     F .text	0000000c nrf52_periph_create
00019634 g     F .text	000000f4 timescale_init
00016ed0 g     F .text	0000002e dw1000_phy_txclk_PLL
00016184 g     F .text	0000001e dw1000_ic_and_host_ptrs_equal
0002338c g     O .text	00000008 MemFile_methods
00017368 g     F .text	00000068 dw1000_phy_interrupt_mask
20003450 g     O .bss	0000000c g_os_sanity_check_mu
0001e2f4 g     F .text	0000000a flash_area_align
000212bc g     F .text	0000001e .hidden __floatunsidf
0001ce98 g     F .text	00000014 imgmgr_log_confirm
0000f9a0 g     F .text	0000000c console_line_queue_set
00020fe4 g     F .text	00000014 os_free
00008178 g     F .text	0000003c _sbrk
0001273c g     F .text	0000002a base64_pad
000139aa g     F .text	00000014 cbor_value_calculate_string_length
00015f14 g     F .text	00000024 dw1000_read_carrier_integrator
00024890 g     O .text	0000000c g_stats_map_twr_ds_stat_section
00017f94 g     F .text	00000098 os_tick_idle
0000fa6c g     F .text	0000001c console_printf
0001d700 g     F .text	00000014 nmgr_transport_init
0001ce08 g     F .text	00000014 imgmgr_dfu_confirmed
00010d14 g     F .text	00000012 shell_os_reset_cmd
00014028 g     F .text	000000cc dw1000_write
00016b50 g     F .text	00000098 dw1000_calc_fppl
0000f6a0 g     F .text	00000002 console_blocking_mode
0000e968 g     F .text	00000018 conf_ensure_loaded
000159dc g     F .text	0000008a dw1000_set_wait4resp_delay
00013762 g     F .text	0000012a cbor_value_enter_container
00008164  w    F .text	00000002 I2S_IRQHandler
00008644 g     F .text	00000002 _init
0001fc0c g     F .text	00000006 boot_swap_type_off
00020de4 g     F .text	000000cc hal_flash_erase
0001250c g     F .text	0000000c split_mode_get
0001c54e g     F .text	0000000c strtol
00010c90 g     F .text	00000084 shell_os_date_cmd
0000b118 g     F .text	00000030 tdma_pkg_init
00022948 g     F .text	000000c0 __ieee754_log10f
00020ab4 g     F .text	00000048 fcb_getnext_in_area
00008164  w    F .text	00000002 SWI4_EGU4_IRQHandler
000219a0 g     F .text	0000009e .hidden __aeabi_d2f
200045f0 g     O .bss	0000001c g_twr_ss_stat
0001802c g     F .text	000000a0 os_tick_init
00021b80 g     F .text	0000003c .hidden __aeabi_d2ulz
000173d0 g     F .text	0000015c dw1000_phy_repeated_frames
00015830 g     F .text	00000022 dw1000_set_abs_timeout
200005d8 g     O .data	00000008 g_dpl_mempool_list
0002099a g     F .text	000000c8 fcb_elem_crc8
0001e8f0 g     F .text	00000008 log_console_get
0000c890 g     F .text	00000080 uwb_rng_calc_rel_tx
00008164  w    F .text	00000002 TIMER0_IRQHandler
00009154 g     F .text	000000c8 os_init
0001ce70 g     F .text	00000014 imgmgr_log_upload_done
0001bd28 g     F .text	00000018 twr_ss_ack_free
0001af80 g     F .text	00000038 twr_ds_pkg_down
000080f8 g     F .text	0000005c Reset_Handler
0001a11c g     F .text	000000a0 srkf_dbl_free
0001c514 g     F .text	0000001a strrchr
00020612 g     F .text	00000026 fcb_put_len
000124d4 g     F .text	00000038 split_check_status
000177b0 g     F .text	00000180 dw1000_cli_dump_registers
0001f370 g     F .text	00000040 modlog_append
0000f224 g     F .text	0000000c console_echo
00021910 g     F .text	0000004e .hidden __fixdfsi
0000d856 g     F .text	00000030 calloc
00009838 g     F .text	00000034 os_mempool_info_get_next
20004538 g     O .bss	00000001 sysinit_active
00013cf4 g     F .text	00000064 SEGGER_RTT_Init
200040e9 g     O .bss	00000001 g_console_silence
00012518 g     F .text	0000000c split_app_active_get
000131f8 g     F .text	0000000a cbor_encoder_create_array
00008e52 g     F .text	0000001a hal_gpio_toggle
0000abda g     F .text	0000001e os_default_irq_asm
000245b0 g     O .text	0000000c cmd_dw1000_help
00009d38 g     F .text	0000000c os_sched_next_task
00009a98 g     F .text	00000054 os_sched_insert
000092d8 g     F .text	00000078 os_callout_reset
0001f694 g     F .text	0000004c mfg_init
00009580 g     F .text	00000010 os_dev_reset
00018c2e g     F .text	00000004 cir_pkg_down
000108d0 g     F .text	00000048 shell_init
00021044 g     F .text	00000276 .hidden __aeabi_dadd
000217dc g     F .text	00000082 .hidden __ledf2
0001d350 g     F .text	00000018 mgmt_group_list_unlock
0000a97c g     F .text	00000014 os_mutex_init
00008168 g     F .text	00000010 _sbrkInit
00021b40 g     F .text	00000040 .hidden __aeabi_f2ulz
00009634 g     F .text	0000001a os_eventq_get_no_wait
00021344 g     F .text	0000006a .hidden __aeabi_ul2d
0000d820 g     F .text	00000036 uwb_wcs_pkg_down
20001448 g       .bssnz	00000000 __bssnz_end__
0001e358 g     F .text	00000070 flash_map_init
0001c568 g     F .text	00000014 vprintf
000090d8 g     F .text	0000000c os_started
00008164  w    F .text	00000002 TIMER1_IRQHandler
20000000 g       .bss	00000000 _ram_start
20000ffc g     O .data	00000018 reboot_conf_handler
0000ead8 g     F .text	00000010 conf_unlock
00009cbc g     F .text	0000003c os_sched_os_timer_exp
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
000175a8 g     F .text	0000001a dw1000_phy_frame_duration
000110e0 g     F .text	00000024 stats_group_find
00024c58 g     O .text	00000028 log_console_handler
0001fb22 g     F .text	0000001e rwlock_release_write
0001d714 g     F .text	00000024 nmgr_rx_req
00008d98 g     F .text	0000002c hal_gpio_init_in
0000d694 g     F .text	00000038 uwb_wcs_dtu_time_adjust
00017c1c g     F .text	00000004 dw1000_cli_down
00010ba4 g     F .text	00000018 shell_nlip_init
00013986 g     F .text	00000024 cbor_value_advance
00023050 g     O .text	00000018 g_stats_map_tdma_stat_section
0001e584 g     F .text	00000010 log_list_get_next
00008164  w    F .text	00000002 PWM2_IRQHandler
000190ac g     F .text	0000001c json_read_next
0000c81c g     F .text	00000032 uwb_rng_append_config
00022020 g     F .text	0000006c log10f
0001d2f8 g     F .text	0000003c imgr_ver_str
2000460c g     O .bss	00000028 g_twr_ss_ack_stat
20001448 g       .data	00000000 __data_end__
0001e6f4 g     F .text	00000094 log_register
000204ae g     F .text	00000140 mbedtls_sha256_finish_ret
00008b1e g     F .text	00000010 uwb_mac_find_cb_inst_ptr
00011894 g     F .text	00000004 uwbcfg_pkg_down
00020afc g     F .text	00000018 fcb_getnext_area
0001ce84 g     F .text	00000014 imgmgr_log_pending
0001faa8 g     F .text	00000026 rwlock_release_read
00016be8 g     F .text	00000020 dw1000_get_fppl
0000efdc g     F .text	00000010 conf_nmgr_register
00008164  w    F .text	00000002 ECB_IRQHandler
00010edc g     F .text	00000014 shell_prompt_register
00022090 g     F .text	000004a4 __ieee754_asin
0000e62e g     F .text	00000014 dpl_mbuf_free
0000fbe4 g     F .text	0000000c console_yes_ticks
000218d0 g     F .text	00000012 .hidden __aeabi_dcmpgt
00021fa8 g     F .text	00000078 fmod
0001b7b0 g     F .text	0000009c twr_ss_pkg_init
0000e834 g     F .text	00000054 dpl_mbuf_trim_front
200034a0 g     O .bss	00000004 g_os_time
0001d6e8 g     F .text	0000000c mgmt_evq_get
00018448 g     F .text	00000060 hal_spi_init
00018bb8 g     F .text	00000014 hal_watchdog_tickle
20004aa4 g       .bss	00000000 __bss_end__
00009590 g     F .text	00000020 os_dev_walk
000147e8 g     F .text	0000004a dw1000_dev_enter_sleep_after_rx
0000a5b6 g     F .text	0000002e os_mbuf_get
00008164  w    F .text	00000002 SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
0001dc7c g     F .text	00000058 nmgr_shell_pkg_init
000218bc g     F .text	00000012 .hidden __aeabi_dcmpge
0000c70c g     F .text	000000ec uwb_rng_init
0001772c g     F .text	00000024 dw1000_pkg_init
00020658 g     F .text	00000034 fcb_sector_hdr_init
0001c798 g     F .text	000000fc imgr_read_info
00011940 g     F .text	0000003e remap_framefilter
0000bb98 g     F .text	000001e4 uwb_ccp_init
00021040 g     F .text	0000027a .hidden __aeabi_dsub
00009948 g     F .text	00000010 os_msys_reset
00008164 g     F .text	00000002 Default_Handler
00008630 g     F .text	00000014 _start
00015014 g     F .text	0000003c hal_dw1000_rw_noblock_wait
00019148 g     F .text	0000005c calc_tof_ss
00010d28 g     F .text	00000038 shell_os_ls_dev_cmd
00021344 g     F .text	0000006a .hidden __floatundidf
00008bbc g     F .text	0000004a uwb_dev_init
0000d678 g     F .text	0000001c uwb_wcs_set_postprocess
20004510 g     O .bss	00000001 stats_shell_registered
200044ec g     O .bss	00000018 g_stats_stats
000126a8 g     F .text	00000094 base64_encode
0000a1f8 g     F .text	00000018 os_time_is_set
0000ab3c g     F .text	00000006 os_arch_init_task_stack
000096cc g     F .text	00000018 os_eventq_run
0000eac4 g     F .text	00000014 conf_lock
00009ff8 g     F .text	00000080 os_task_info_get_next
00024ea0 g     O .text	00000010 boot_img_magic
00012600 g     F .text	0000003c split_write_split
0000f230 g     F .text	00000034 console_lock
0001c4f2 g     F .text	00000022 strncmp
00010f58 g     F .text	00000098 stats_walk
20003870 g     O .bss	00000004 conf_save_dst
0001b4b4 g     F .text	00000018 twr_ds_ext_free
0001752c g     F .text	00000028 dw1000_phy_SHR_duration
00008f28 g     F .text	0000003c hal_gpio_irq_release
000249e0 g     O .text	0000000c g_stats_map_twr_ss_ext_stat_section
200014a0 g     O .bss	00000050 g_idle_task
00008dc4 g     F .text	00000038 hal_gpio_init_out
00008e1e g     F .text	00000034 hal_gpio_read
2000064c g     O .data	00000004 sysinit_panic_cb
00018a10 g     F .text	0000008c hal_timer_start_at
000145ec g     F .text	000001a4 dw1000_dev_config
0001cbd0 g     F .text	00000014 imgmgr_dfu_stopped
000191a8 g     F .text	00000070 calc_tof_ds
2000344c g     O .bss	00000004 g_os_sanity_check_list
0001591c g     F .text	00000098 dw1000_set_autoack
000190c8 g     F .text	00000012 json_read_prev
0000db58 g     F .text	0000001e strncpy
00016070 g     F .text	0000003c dw1000_read_rxdiag
00016d06 g     F .text	0000000e dw1000_read_rxtime_lo
000097bc g     F .text	00000032 os_memblock_get
00009c48 g     F .text	00000074 os_sched_wakeup
0000a556 g     F .text	00000022 os_mqueue_get
00009d94 g     F .text	00000010 os_sem_init
00010be0 g     F .text	000000b0 shell_os_mpool_display_cmd
000175c2 g     F .text	000000cc dw1000_phy_txrf_power_value
00015050 g     F .text	00000086 hal_dw1000_wakeup
0001c446 g     F .text	00000060 realloc
00010e50 g     F .text	00000038 shell_os_register
0000e454 g     F .text	00000030 mem_init_mbuf_pool
00019728 g     F .text	00000038 timescale_free
00008fb0 g     F .text	00000098 os_default_irq
0001e2fe g     F .text	0000000a flash_area_erased_val
000144e8 g     F .text	00000104 dw1000_dev_wakeup
000212dc g     F .text	00000022 .hidden __aeabi_i2d
0000e642 g     F .text	00000020 dpl_mbuf_free_chain
20003460 g     O .bss	00000004 g_os_last_ctx_sw_time
00009da4 g     F .text	00000064 os_sem_release
0000da78 g     F .text	00000048 memcmp
0000a3f0 g     F .text	00000018 os_arch_init
0001483c g     F .text	00000124 dw1000_dev_init
0002068c g     F .text	0000004e fcb_sector_hdr_read
0001e02c g     F .text	000000c4 conf_line_parse
00021e8c  w    F .text	00000002 .hidden __aeabi_ldiv0
0000e5f6 g     F .text	0000000a dpl_mbuf_pool_init
0000cfb8 g     F .text	00000038 uwb_rng_pkg_down
00020ffc g     F .text	0000003c crc8_calc
0000ed24 g     F .text	00000054 conf_commit
0000bee2 g     F .text	00000054 uwb_ccp_stop
000114d8 g     F .text	0000000c sysinit_start
00021604 g     F .text	000001d0 .hidden __divdf3
000188b8 g     F .text	000000fc hal_timer_config
000153e8 g     F .text	00000018 dw1000_tx_wait
0000d600 g     F .text	00000044 uwb_wcs_init
0000b148 g     F .text	0000003c tdma_pkg_down
00012524 g     F .text	00000018 split_mode_set
000206da g     F .text	00000122 fcb_init
0000af24 g     F .text	00000098 tdma_assign_slot
000213b0 g     F .text	00000254 .hidden __muldf3
0000f998 g     F .text	00000008 console_is_init
0001bc8c g     F .text	0000009c twr_ss_ack_pkg_init
0000e9f0 g     F .text	00000058 conf_save
0000cc80 g     F .text	000000c0 uwb_rng_twr_to_tof
0000add8 g     F .text	0000014c tdma_init
00009e08 g     F .text	000000b4 os_sem_pend
0001dc38 g     F .text	00000010 nmgr_os_groups_register
00018ba8 g     F .text	00000010 hal_watchdog_enable
0001fb40 g     F .text	00000030 rwlock_init
0000d7e0 g     F .text	00000040 uwb_wcs_pkg_init
0001fa4e g     F .text	0000005a rwlock_acquire_read
00009424 g     F .text	00000022 os_cputime_timer_relative
00015230 g     F .text	00000082 dw1000_write_tx_fctrl
0000a578 g     F .text	0000003e os_mqueue_put
000098b8 g     F .text	0000004c os_msys_register
200015f0 g     O .bss	00000004 g_os_idle_ctr
0001e1bc g     F .text	00000044 flash_area_open
00015742 g     F .text	000000ac dw1000_set_rx_timeout
0000a81e g     F .text	0000007a os_mbuf_cmpf
0001e788 g     F .text	00000024 log_walk_body
00008164  w    F .text	00000002 SAADC_IRQHandler
0001fccc g     F .text	0000002a boot_read_swap_state_by_id
00019c1c g     F .text	00000500 srkf_dbl_init
00008afc g     F .text	00000022 uwb_mac_get_interface
0000dada g     F .text	00000042 memset
00008020 g       .text	000000d8 __isr_vector
00008808 g     F .text	000001c8 main
000184a8 g     F .text	0000002c hal_spi_set_txrx_cb
0001e848 g     F .text	00000016 log_read_body
00020b9c g     F .text	00000034 fcb_getnext
20004560 g     O .bss	00000008 g_spi0_sem
0000fb60 g     F .text	0000003c console_out_nolock
00013074 g     F .text	00000080 cbor_encode_uint
0000e54c g     F .text	0000004a dpl_memblock_get
00019038 g     F .text	00000020 json_encode_array_start
00008164  w    F .text	00000002 CCM_AAR_IRQHandler
00008164  w    F .text	00000002 WDT_IRQHandler
0001f33c g     F .text	00000034 modlog_register
00020bd0 g     F .text	00000078 fcb_rotate
000114e4 g     F .text	0000000c sysinit_end
0001f3ec g     F .text	000000a0 modlog_init
0000ab42 g     F .text	00000046 SVC_Handler
200045b8 g     O .bss	0000001c g_twr_ds_stat
000095c2 g     F .text	0000000a os_eventq_inited
000219a0 g     F .text	0000009e .hidden __truncdfsf2
00023f20 g     O .text	00000038 sysdown_cbs
00011dd0 g     F .text	000001d4 clocktime_to_timeval
0001d398 g     F .text	00000024 mgmt_group_register
000123f2 g     F .text	0000001c streamer_printf
0000c84e g     F .text	0000003e uwb_rng_remove_config
0000cff0 g     F .text	00000190 rng_encode
0000e4cc g     F .text	00000080 dpl_mempool_init
00021354 g     F .text	0000005a .hidden __aeabi_l2d
00020d22 g     F .text	00000052 hal_flash_read
0000f264 g     F .text	00000034 console_unlock
00009728 g     F .text	00000008 os_eventq_dflt_get
000189b4 g     F .text	00000030 hal_timer_read
0000cc48 g     F .text	00000034 uwb_rng_request_delay_start
0000c6de g     F .text	0000002e uwb_rng_config
0000964e g     F .text	0000007e os_eventq_get
0001e2cc g     F .text	00000028 flash_area_erase
0001b84c g     F .text	00000018 twr_ss_free
0001b41c g     F .text	00000098 twr_ds_ext_pkg_init
20004574 g     O .bss	00000028 nrf52_hal_spi0
0001bff0 g     F .text	00000090 twr_ss_ext_pkg_init
00016d34 g     F .text	00000140 dw1000_configcwmode
00013dbe g     F .text	00000008 uwb_dw1000_event_cnt_ctrl
0000a35a g     F .text	0000001a os_time_ms_to_ticks
0001e6a4 g     F .text	0000000a log_walk
000093ac g     F .text	00000034 os_callout_wakeup_ticks
00021b40 g     F .text	00000040 .hidden __fixunssfdi
00008164  w    F .text	00000002 SWI5_EGU5_IRQHandler
00016018 g     F .text	00000022 dw1000_read_time_tracking_offset
000152b2 g     F .text	00000136 dw1000_start_tx
000123e8 g     F .text	0000000a streamer_vprintf
200047ac g     O .bss	00000004 flash_map_entries
0000a770 g     F .text	000000ae os_mbuf_adj
20004a14 g     O .bss	00000002 reboot_cnt
0000eae8 g     F .text	0000001c conf_register
00009236 g     F .text	00000008 os_reboot
00008020 g       .imghdr	00000000 __text
00020ff8 g     F .text	00000004 crc8_init
0001dff0 g     F .text	00000032 conf_fcb_kv_save
0000c408 g     F .text	00000030 uwb_ccp_pkg_init
0001f652 g     F .text	00000012 mfg_seek_next
0000db30 g     F .text	00000018 strcmp
0001e32e g     F .text	0000000e flash_area_read_is_empty
00009b1c g     F .text	0000000c os_sched_get_current_task
00013202 g     F .text	0000001c cbor_encoder_create_map
0000f61c g     F .text	00000084 console_write
0000b06a g     F .text	0000005c tdma_rx_slot_start
00008458 g     F .text	000001d8 SystemInit
0000941a g     F .text	0000000a os_cputime_get32
0001df84 g     F .text	00000058 conf_fcb_src
00008164  w    F .text	00000002 RNG_IRQHandler
0000ca28 g     F .text	00000220 uwb_rng_request
0001589c g     F .text	00000080 dw1000_mac_framefilter
0001e7e4 g     F .text	00000020 log_read_hdr
00021b80 g     F .text	0000003c .hidden __fixunsdfdi
000217e4 g     F .text	0000007a .hidden __nedf2
000112f8 g     F .text	0000001c stats_nmgr_register_group
00019030 g     F .text	00000008 json_encode_array_name
000096e4 g     F .text	00000042 os_eventq_remove
00014d94 g     F .text	0000009a hal_dw1000_write
00015196 g     F .text	0000009a dw1000_write_tx
0000e980 g     F .text	00000068 conf_save_one
0000eb72 g     F .text	000000ca conf_value_from_str
0001e594 g     F .text	00000078 log_module_get_name
00013db6 g     F .text	00000008 uwb_dw1000_set_autoack_delay
0001c4a6 g     F .text	00000020 sprintf
00021b10 g     F .text	0000002e .hidden __fixdfdi
00009d44 g     F .text	00000022 os_sched
00020d12 g     F .text	00000010 hal_flash_erased_val
00020168 g     F .text	000000e0 bootutil_img_validate
00017cf2 g     F .text	00000058 _dw1000_otp_read
0000aa48 g     F .text	000000e0 os_mutex_pend
00013d6a g     F .text	00000044 uwb_dw1000_mac_framefilter
00000000 g       .svc_table	00000000 SVC_Table
00021f30 g     F .text	00000078 asin
0001cfa6 g     F .text	000000b0 imgmgr_state_set_pending
00008164  w    F .text	00000002 RTC2_IRQHandler
000232b0 g     O .text	00000048 g_stats_map_rng_stat_section
00016d14 g     F .text	00000010 dw1000_read_txtime
00018c34 g     F .text	0000003c json_encode_object_start
20010000 g       .bss	00000000 __StackTop
000131ea g     F .text	0000000e cbor_encode_text_string
00022a18 g     F .text	0000000c nanf
000128a0 g     F .text	00000218 cbor_read_array
20001018 g     O .data	00000004 _impure_ptr
0001ddb0 g     F .text	00000002 config_pkg_init_stage2
0000a540 g     F .text	00000016 os_mqueue_init
0000a258 g     F .text	00000074 os_settimeofday
0001e960 g     F .text	00000034 log_level_set
00017930 g     F .text	000000d0 dw1000_cli_dump_address
00008164  w    F .text	00000002 PWM0_IRQHandler
00008164  w    F .text	00000002 SWI3_EGU3_IRQHandler
0001c67c g     F .text	0000001e strsep
0001835c g     F .text	00000038 hal_spi_config
0001e0f0 g     F .text	0000005a conf_line_make
0001bd40 g     F .text	00000018 twr_ss_ack_pkg_down
0001e200 g     F .text	0000007c flash_area_to_sectors
00012768 g     F .text	00000058 base64_decode
00016d24 g     F .text	0000000e dw1000_read_txtime_lo
0001a878 g     F .text	00000204 bierman_dbl
0000d1c4 g     F .text	0000043c rng_json_write
00008abe g     F .text	0000003e uwb_mac_remove_interface
00019948 g     F .text	000002d4 srkf_dbl_main
00009350 g     F .text	0000005c os_callout_tick
00024e58 g     O .text	00000048 sysflash_map_dflt
2000459c g     O .bss	0000001c nrf52_hal_timer0
000080f8 g       .text	00000000 __isr_vector_end
00018580 g     F .text	000000f8 hal_spi_txrx_noblock
0000921c g     F .text	0000001a os_start
00016fd8 g     F .text	00000034 dw1000_phy_config_txrf
00008164  w    F .text	00000002 RTC1_IRQHandler
0001fde8 g     F .text	00000086 boot_set_pending
00014960 g     F .text	00000050 dw1000_dev_deinit
00018394 g     F .text	0000004c hal_spi_enable
0001d25c g     F .text	0000009c imgmgr_state_write
00021960 g     F .text	00000040 .hidden __aeabi_d2uiz
0000e3cc g     F .text	0000002e dpl_cputime_timer_init
00022a08 g     F .text	00000010 nan
000093ec g     F .text	0000002e os_cputime_timer_init
00008a74 g     F .text	0000004a uwb_mac_append_interface
0001b4cc g     F .text	00000038 twr_ds_ext_pkg_down
000227b0 g     F .text	00000198 __ieee754_sqrt
0000ea48 g     F .text	00000014 conf_store_init
000176d4 g     F .text	00000056 dw1000_phy_event_cnt_read
0000e3fa g     F .text	00000008 dpl_cputime_timer_start
00021ea4 g     F .text	0000008c ceilf
00008164  w    F .text	00000002 SWI1_EGU1_IRQHandler
0000f6a4 g     F .text	000002f4 console_handle_char
00016efe g     F .text	00000032 dw1000_phy_sysclk_LDE
00021880 g     F .text	00000012 .hidden __aeabi_dcmpeq
00010808 g     F .text	00000044 shell_register
0000d886 g     F .text	00000020 fwrite
0001f6e0 g     F .text	00000010 mfg_open
20000548 g     O .data	00000008 g_os_run_list
0001612c g     F .text	00000058 dw1000_mac_init
00016cf6 g     F .text	00000010 dw1000_read_rxtime
0001aed0 g     F .text	00000098 twr_ds_pkg_init
0000cfb4 g     F .text	00000002 uwb_rng_pkg_init2
00015b30 g     F .text	000003e4 dw1000_mac_config
000089d0 g     F .text	00000034 NVIC_Relocate
0000e8e0 g     F .text	00000028 conf_src_register
0001306a g     F .text	0000000a cbor_encoder_init
00012430 g     F .text	00000078 sysinit_app
200034a4 g     O .bss	00000004 os_flags
00018c70 g     F .text	00000054 json_encode_object_key
0000affa g     F .text	00000032 tdma_stop
0001fd2c g     F .text	00000016 boot_write_swap_type
0000a3a0 g     F .text	00000006 os_arch_restore_sr
20004568 g     O .bss	0000000c g_hal_os_tick
0000e600 g     F .text	0000002e dpl_mbuf_get
0001546a g     F .text	000001ac dw1000_start_rx
0000bf38 g     F .text	00000038 uwb_ccp_skew_compensation_ui64
00018cc4 g     F .text	00000068 json_encode_object_entry
0001f984 g     F .text	00000054 log_reboot_pkg_init
2000fe50 g       *ABS*	000001b0 __StackLimit
0001cbe4 g     F .text	00000014 imgmgr_dfu_started
0001e308 g     F .text	00000026 flash_area_is_empty
20002648 g     O .bss	00000004 g_os_started
00020428 g     F .text	00000086 mbedtls_sha256_update_ret
0001c3e4 g     F .text	00000038 wcs_timescale_pkg_init
00020018 g     F .text	000000d8 split_go
00008164  w    F .text	00000002 SPIM2_SPIS2_SPI2_IRQHandler
00008164  w    F .text	00000002 NFCT_IRQHandler
000115b8 g     F .text	00000250 uwbcfg_commit_to_inst
0001c8e4 g     F .text	0000003c imgr_find_by_hash
0000e414 g     F .text	00000016 dpl_cputime_delay_ticks
0001388c g     F .text	0000003e cbor_value_leave_container
0002082e g     F .text	00000032 fcb_append_to_scratch
0001d3dc g     F .text	00000028 mgmt_cbuf_setoerr
00008448 g     F .text	00000010 SystemCoreClockUpdate
00019010 g     F .text	00000020 json_encode_object_finish
0000a62a g     F .text	00000020 os_mbuf_free_chain
00021910 g     F .text	0000004e .hidden __aeabi_d2iz
0000a2cc g     F .text	0000003c os_get_uptime
0000997c g     F .text	00000034 os_msys_init
00020b14 g     F .text	00000088 fcb_getnext_nolock
0000a6f2 g     F .text	00000024 os_mbuf_off
200040eb g     O .bss	00000001 g_is_output_nlip
0001084c g     F .text	00000084 shell_cmd_register
00008ee4 g     F .text	00000028 hal_gpio_irq_enable
0000a148 g     F .text	0000000c os_time_get
200049a0 g     O .bss	0000001c modlog_mapping_pool
000184d4 g     F .text	000000ac hal_spi_txrx
00019760 g     F .text	000000c8 timescale_main
00018a9c g     F .text	00000064 hal_timer_stop
00015134 g     F .text	00000062 dw1000_read_rx
00015852 g     F .text	00000048 dw1000_sync_rxbufptrs
0000ece8 g     F .text	0000003c conf_get_value
0001e60c g     F .text	00000058 log_append_body
0000c6b0 g     F .text	0000002e uwb_rng_free
0000a5e4 g     F .text	00000032 os_mbuf_get_pkthdr
20004828 g     O .bss	00000008 g_log_info
0000ec3c g     F .text	00000078 conf_str_from_value
00021e8c  w    F .text	00000002 .hidden __aeabi_idiv0
00012ed0 g     F .text	00000050 cbor_mbuf_reader_init
000218e4 g     F .text	0000002c .hidden __unorddf2
000120e4 g     F .text	00000200 datetime_parse
00020860 g     F .text	000000fa fcb_append
200000d8 g     O .rtt	00000048 _SEGGER_RTT
0000ecb4 g     F .text	00000034 conf_set_value
000245bc g     O .text	00000030 cmd_dw1000_param
0000e40a g     F .text	0000000a dpl_cputime_get32
0001e664 g     F .text	00000040 log_printf
00023a40 g     O .text	00000006 g_stats_map_stats
00009ed4 g     F .text	000000d8 os_task_init
0000e786 g     F .text	000000ae dpl_mbuf_adj
000081fc g     F .text	0000004c hal_system_clock_start
0000815a  w    F .text	00000002 BusFault_Handler
0001e8f8 g     F .text	0000004c log_console_init
00011430 g     F .text	000000a0 sysdown
00013dc6 g     F .text	00000008 uwb_dw1000_event_cnt_read
0000d7a8 g     F .text	00000018 uwb_wcs_local_to_master
0000f9ac g     F .text	00000028 console_line_event_put
0000db48 g     F .text	00000010 strlen
000094f8 g     F .text	00000038 os_dev_create
000097ee g     F .text	0000001e os_memblock_put_from_cb
0001face g     F .text	00000054 rwlock_acquire_write
000143b0 g     F .text	000000b2 dw1000_dev_configure_sleep
000095b0 g     F .text	00000012 os_eventq_init
0000a154 g     F .text	00000044 os_time_advance
00014b28 g     F .text	0000026c hal_dw1000_read_noblock
00021870 g     F .text	00000010 .hidden __aeabi_cdcmpeq
0000ee94 g     F .text	00000010 conf_cli_register
000217d4 g     F .text	0000008a .hidden __gedf2
00009d68 g     F .text	0000002c os_sched_resort
20004a24 g     O .bss	00000004 boot_current_slot
0001c340 g     F .text	00000088 wcs_timescale_init
00017750 g     F .text	00000050 dw1000_pkg_down
00024918 g     O .text	0000000c g_stats_map_twr_ss_stat_section
0000e5cc g     F .text	0000002a dpl_memblock_put
00020cda g     F .text	00000028 hal_flash_init
0000d644 g     F .text	00000034 uwb_wcs_free
0001b864 g     F .text	00000038 twr_ss_pkg_down
0001c4c6 g     F .text	00000016 strchr
00008164  w    F .text	00000002 MWU_IRQHandler
00011074 g     F .text	00000044 stats_module_init
0001d3bc g     F .text	00000020 mgmt_find_handler
00021300 g     F .text	00000042 .hidden __aeabi_f2d
00008158  w    F .text	00000002 MemoryManagement_Handler
00014312 g     F .text	0000009e dw1000_softreset
00014a70 g     F .text	000000b6 hal_dw1000_read
00008648 g     F .text	00000034 uwb_config_updated
0001cbf8 g     F .text	00000014 imgmgr_dfu_pending
00024984 g     O .text	0000001e g_stats_map_twr_ss_ack_stat_section
0000e662 g     F .text	000000a8 dpl_mbuf_append
0001e944 g     F .text	0000001c log_level_get
0001fe6e g     F .text	0000004c boot_set_confirmed
00010b78 g     F .text	00000014 shell_nlip_input_register
00008164  w    F .text	00000002 COMP_LPCOMP_IRQHandler
00020f44 g     F .text	00000032 hal_flash_isempty_no_buf
00011808 g     F .text	00000028 uwbcfg_commit
00009530 g     F .text	0000002c os_dev_initialize_all
00021040 g     F .text	0000027a .hidden __subdf3
00010a74 g     F .text	00000024 shell_nlip_clear_pkt
0001f3b0 g     F .text	0000003a modlog_printf
000156de g     F .text	00000012 dw1000_set_on_error_continue
00009bc4 g     F .text	00000084 os_sched_remove
0001c920 g     F .text	00000048 imgmgr_find_best_area_id
20000550 g     O .data	00000008 g_os_sleep_list
00021a40 g     F .text	00000000 .hidden __aeabi_ldivmod
00012428 g     F .text	00000008 streamer_console_get
000139d0 g     F .text	00000068 hal_bsp_init
00009248 g     F .text	00000038 os_pkg_init
000160b0 g     F .text	0000007c dw1000_tasks_init
000183e0 g     F .text	00000068 hal_spi_disable
00011bc4 g     F .text	00000180 strtod_soft
0000ea64 g     F .text	00000060 conf_init
000099ec g     F .text	00000010 os_sanity_check_init
00020c48 g     F .text	00000074 fcb_walk
0000e70a g     F .text	00000024 dpl_mbuf_off
00016cd8 g     F .text	00000010 dw1000_read_systime
00010ff0 g     F .text	0000002c stats_init
0000e2f8 g     F .text	00000008 vfprintf
0001c69a g     F .text	00000030 strpbrk
00015f38 g     F .text	000000e0 dw1000_calc_clock_offset_ratio
00008e6c g     F .text	00000078 hal_gpio_irq_init
00016e74 g     F .text	0000002e dw1000_phy_sysclk_XTAL
200025f8 g     O .bss	00000050 g_os_main_task
00008f0c g     F .text	0000001c hal_gpio_irq_disable
0000da4c g     F .text	0000002c free
0000c438 g     F .text	0000003c uwb_ccp_pkg_down
0001fd18 g     F .text	00000014 boot_write_image_ok
00018c2c g     F .text	00000002 cir_pkg_init
00020254 g     F .text	000000a4 mbedtls_sha256_starts_ret
00011840 g     F .text	00000054 uwbcfg_pkg_init
00016f30 g     F .text	0000002a dw1000_phy_sysclk_SEQ
0000f298 g     F .text	0000001e console_out



Disassembly of section .text:

00008020 <__isr_vector>:
    8020:	20010000 	.word	0x20010000
    8024:	000080f9 	.word	0x000080f9
    8028:	00008155 	.word	0x00008155
    802c:	00008157 	.word	0x00008157
	...
    804c:	0000ab43 	.word	0x0000ab43
	...
    8058:	0000ab89 	.word	0x0000ab89
    805c:	0000abcf 	.word	0x0000abcf
    8060:	00008165 	.word	0x00008165
    8064:	00008165 	.word	0x00008165
    8068:	00008165 	.word	0x00008165
    806c:	00008165 	.word	0x00008165
    8070:	00008165 	.word	0x00008165
    8074:	00008165 	.word	0x00008165
    8078:	00008165 	.word	0x00008165
    807c:	00008165 	.word	0x00008165
    8080:	00008165 	.word	0x00008165
    8084:	00008165 	.word	0x00008165
    8088:	00008165 	.word	0x00008165
    808c:	00008165 	.word	0x00008165
    8090:	00008165 	.word	0x00008165
    8094:	00008165 	.word	0x00008165
    8098:	00008165 	.word	0x00008165
    809c:	00008165 	.word	0x00008165
    80a0:	00008165 	.word	0x00008165
    80a4:	00008165 	.word	0x00008165
    80a8:	00008165 	.word	0x00008165
    80ac:	00008165 	.word	0x00008165
    80b0:	00008165 	.word	0x00008165
    80b4:	00008165 	.word	0x00008165
    80b8:	00008165 	.word	0x00008165
    80bc:	00008165 	.word	0x00008165
    80c0:	00008165 	.word	0x00008165
    80c4:	00008165 	.word	0x00008165
    80c8:	00008165 	.word	0x00008165
    80cc:	00008165 	.word	0x00008165
    80d0:	00008165 	.word	0x00008165
    80d4:	00008165 	.word	0x00008165
	...
    80e0:	00008165 	.word	0x00008165
    80e4:	00008165 	.word	0x00008165
    80e8:	00008165 	.word	0x00008165
    80ec:	00008165 	.word	0x00008165
    80f0:	00008165 	.word	0x00008165
    80f4:	00008165 	.word	0x00008165

000080f8 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
    80f8:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
    80fc:	4a0c      	ldr	r2, [pc, #48]	; (8130 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
    80fe:	4b0d      	ldr	r3, [pc, #52]	; (8134 <.bss_zero_loop+0x34>)

00008100 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
    8100:	429a      	cmp	r2, r3
    itt     lt
    8102:	bfbc      	itt	lt
    strlt   r0, [r2], #4
    8104:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
    8108:	e7fa      	blt.n	8100 <.bss_zero_loop>
 *      of copy from/to are specified by following symbols evaluated in
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */
    ldr    r1, =__etext
    810a:	490b      	ldr	r1, [pc, #44]	; (8138 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
    810c:	4a0b      	ldr	r2, [pc, #44]	; (813c <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
    810e:	4b0c      	ldr	r3, [pc, #48]	; (8140 <.bss_zero_loop+0x40>)

    subs    r3, r2
    8110:	1a9b      	subs	r3, r3, r2
    ble     .LC0
    8112:	dd03      	ble.n	811c <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
    8114:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
    8116:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
    8118:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
    811a:	dcfb      	bgt.n	8114 <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
    811c:	4809      	ldr	r0, [pc, #36]	; (8144 <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
    811e:	490a      	ldr	r1, [pc, #40]	; (8148 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
    8120:	f000 f822 	bl	8168 <_sbrkInit>

    LDR     R0, =SystemInit
    8124:	4809      	ldr	r0, [pc, #36]	; (814c <.bss_zero_loop+0x4c>)
    BLX     R0
    8126:	4780      	blx	r0

    BL      hal_system_init
    8128:	f000 f844 	bl	81b4 <hal_system_init>

    LDR     R0, =_start
    812c:	4808      	ldr	r0, [pc, #32]	; (8150 <.bss_zero_loop+0x50>)
    BX      R0
    812e:	4700      	bx	r0
    ldr     r2, =__bss_start__
    8130:	20001448 	.word	0x20001448
    ldr     r3, =__bss_end__
    8134:	20004aa4 	.word	0x20004aa4
    ldr    r1, =__etext
    8138:	00025000 	.word	0x00025000
    ldr    r2, =__data_start__
    813c:	20000530 	.word	0x20000530
    ldr    r3, =__data_end__
    8140:	20001448 	.word	0x20001448
    LDR     R0, =__HeapBase
    8144:	20004aa8 	.word	0x20004aa8
    LDR     R1, =__HeapLimit
    8148:	2000fe50 	.word	0x2000fe50
    LDR     R0, =SystemInit
    814c:	00008459 	.word	0x00008459
    LDR     R0, =_start
    8150:	00008631 	.word	0x00008631

00008154 <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
    8154:	e7fe      	b.n	8154 <NMI_Handler>

00008156 <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
    8156:	e7fe      	b.n	8156 <HardFault_Handler>

00008158 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
    8158:	e7fe      	b.n	8158 <MemoryManagement_Handler>

0000815a <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
    815a:	e7fe      	b.n	815a <BusFault_Handler>

0000815c <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
    815c:	e7fe      	b.n	815c <UsageFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
    815e:	e7fe      	b.n	815e <UsageFault_Handler+0x2>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
    8160:	e7fe      	b.n	8160 <UsageFault_Handler+0x4>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
    8162:	e7fe      	b.n	8162 <UsageFault_Handler+0x6>

00008164 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
    8164:	e7fe      	b.n	8164 <Default_Handler>
    8166:	bf00      	nop

00008168 <_sbrkInit>:
static char *sbrkLimit __attribute__ ((section (".data")));
static char *brk __attribute__ ((section (".data")));

void
_sbrkInit(char *base, char *limit) {
    sbrkBase = base;
    8168:	4b02      	ldr	r3, [pc, #8]	; (8174 <_sbrkInit+0xc>)
    816a:	6018      	str	r0, [r3, #0]
    sbrkLimit = limit;
    816c:	6059      	str	r1, [r3, #4]
    brk = base;
    816e:	6098      	str	r0, [r3, #8]
}
    8170:	4770      	bx	lr
    8172:	bf00      	nop
    8174:	20000530 	.word	0x20000530

00008178 <_sbrk>:
void *
_sbrk(int incr)
{
    void *prev_brk;

    if (incr < 0) {
    8178:	1e03      	subs	r3, r0, #0
    817a:	db09      	blt.n	8190 <_sbrk+0x18>
            prev_brk = brk;
            brk -= incr;
        }
    } else {
        /* Allocating memory from the heap. */
        if (sbrkLimit - brk >= incr) {
    817c:	4a0c      	ldr	r2, [pc, #48]	; (81b0 <_sbrk+0x38>)
    817e:	6890      	ldr	r0, [r2, #8]
    8180:	6852      	ldr	r2, [r2, #4]
    8182:	1a12      	subs	r2, r2, r0
    8184:	429a      	cmp	r2, r3
    8186:	db0f      	blt.n	81a8 <_sbrk+0x30>
            prev_brk = brk;
            brk += incr;
    8188:	4403      	add	r3, r0
    818a:	4a09      	ldr	r2, [pc, #36]	; (81b0 <_sbrk+0x38>)
    818c:	6093      	str	r3, [r2, #8]
    818e:	4770      	bx	lr
        if (brk - incr < sbrkBase) {
    8190:	4a07      	ldr	r2, [pc, #28]	; (81b0 <_sbrk+0x38>)
    8192:	6890      	ldr	r0, [r2, #8]
    8194:	4403      	add	r3, r0
    8196:	6812      	ldr	r2, [r2, #0]
    8198:	4293      	cmp	r3, r2
    819a:	d302      	bcc.n	81a2 <_sbrk+0x2a>
            brk -= incr;
    819c:	4a04      	ldr	r2, [pc, #16]	; (81b0 <_sbrk+0x38>)
    819e:	6093      	str	r3, [r2, #8]
    81a0:	4770      	bx	lr
            prev_brk = (void *)-1;
    81a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    81a6:	4770      	bx	lr
        } else {
            prev_brk = (void *)-1;
    81a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        }
    }

    return prev_brk;
}
    81ac:	4770      	bx	lr
    81ae:	bf00      	nop
    81b0:	20000530 	.word	0x20000530

000081b4 <hal_system_init>:
 */
void
hal_system_init(void)
{
#if MYNEWT_VAL(MCU_DCDC_ENABLED)
    NRF_POWER->DCDCEN = 1;
    81b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81b8:	2201      	movs	r2, #1
    81ba:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
#endif
}
    81be:	4770      	bx	lr

000081c0 <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
    81c0:	4b02      	ldr	r3, [pc, #8]	; (81cc <hal_debugger_connected+0xc>)
    81c2:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
}
    81c6:	f000 0001 	and.w	r0, r0, #1
    81ca:	4770      	bx	lr
    81cc:	e000ed00 	.word	0xe000ed00

000081d0 <hal_system_reset>:
{
    81d0:	b508      	push	{r3, lr}
        if (hal_debugger_connected()) {
    81d2:	f7ff fff5 	bl	81c0 <hal_debugger_connected>
    81d6:	b100      	cbz	r0, 81da <hal_system_reset+0xa>
            asm("bkpt");
    81d8:	be00      	bkpt	0x0000
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    81da:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    81de:	4905      	ldr	r1, [pc, #20]	; (81f4 <hal_system_reset+0x24>)
    81e0:	68ca      	ldr	r2, [r1, #12]
    81e2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    81e6:	4b04      	ldr	r3, [pc, #16]	; (81f8 <hal_system_reset+0x28>)
    81e8:	4313      	orrs	r3, r2
    81ea:	60cb      	str	r3, [r1, #12]
    81ec:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    81f0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    81f2:	e7fd      	b.n	81f0 <hal_system_reset+0x20>
    81f4:	e000ed00 	.word	0xe000ed00
    81f8:	05fa0004 	.word	0x05fa0004

000081fc <hal_system_clock_start>:
        }
    }
#endif

    /* Check if this clock source is already running */
    if ((NRF_CLOCK->LFCLKSTAT & regmsk) != regval) {
    81fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8200:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    8204:	4b0f      	ldr	r3, [pc, #60]	; (8244 <hal_system_clock_start+0x48>)
    8206:	4013      	ands	r3, r2
    8208:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    820c:	d018      	beq.n	8240 <hal_system_clock_start+0x44>
        NRF_CLOCK->TASKS_LFCLKSTOP = 1;
    820e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8212:	2201      	movs	r2, #1
    8214:	60da      	str	r2, [r3, #12]
        NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    8216:	2100      	movs	r1, #0
    8218:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
        NRF_CLOCK->LFCLKSRC = clksrc;
    821c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
        NRF_CLOCK->TASKS_LFCLKSTART = 1;
    8220:	609a      	str	r2, [r3, #8]

        /* Wait here till started! */
        while (1) {
            if (NRF_CLOCK->EVENTS_LFCLKSTARTED) {
    8222:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8226:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    822a:	2b00      	cmp	r3, #0
    822c:	d0f9      	beq.n	8222 <hal_system_clock_start+0x26>
                if ((NRF_CLOCK->LFCLKSTAT & regmsk) == regval) {
    822e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8232:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    8236:	4b03      	ldr	r3, [pc, #12]	; (8244 <hal_system_clock_start+0x48>)
    8238:	4013      	ands	r3, r2
    823a:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    823e:	d1f0      	bne.n	8222 <hal_system_clock_start+0x26>
                }
            }
        }
    }
#endif
}
    8240:	4770      	bx	lr
    8242:	bf00      	nop
    8244:	00010003 	.word	0x00010003

00008248 <errata_16>:
}

#ifdef NRF52
static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8248:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    824c:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
    8250:	2b06      	cmp	r3, #6
    8252:	d001      	beq.n	8258 <errata_16+0x10>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8254:	2000      	movs	r0, #0
    8256:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8258:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    825c:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
    8260:	f013 0f0f 	tst.w	r3, #15
    8264:	d109      	bne.n	827a <errata_16+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8266:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    826a:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    826e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8272:	2b30      	cmp	r3, #48	; 0x30
    8274:	d003      	beq.n	827e <errata_16+0x36>
    return false;
    8276:	2000      	movs	r0, #0
    8278:	4770      	bx	lr
    827a:	2000      	movs	r0, #0
    827c:	4770      	bx	lr
            return true;
    827e:	2001      	movs	r0, #1
}
    8280:	4770      	bx	lr

00008282 <errata_31>:

static bool errata_31(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8282:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8286:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
    828a:	2b06      	cmp	r3, #6
    828c:	d001      	beq.n	8292 <errata_31+0x10>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    828e:	2000      	movs	r0, #0
    8290:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8292:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8296:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
    829a:	f013 0f0f 	tst.w	r3, #15
    829e:	d10d      	bne.n	82bc <errata_31+0x3a>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82a0:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    82a4:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    82a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82ac:	2b30      	cmp	r3, #48	; 0x30
    82ae:	d007      	beq.n	82c0 <errata_31+0x3e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    82b0:	2b40      	cmp	r3, #64	; 0x40
    82b2:	d007      	beq.n	82c4 <errata_31+0x42>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    82b4:	2b50      	cmp	r3, #80	; 0x50
    82b6:	d007      	beq.n	82c8 <errata_31+0x46>
    return false;
    82b8:	2000      	movs	r0, #0
    82ba:	4770      	bx	lr
    82bc:	2000      	movs	r0, #0
    82be:	4770      	bx	lr
            return true;
    82c0:	2001      	movs	r0, #1
    82c2:	4770      	bx	lr
            return true;
    82c4:	2001      	movs	r0, #1
    82c6:	4770      	bx	lr
            return true;
    82c8:	2001      	movs	r0, #1
}
    82ca:	4770      	bx	lr

000082cc <errata_32>:

static bool errata_32(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82cc:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    82d0:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
    82d4:	2b06      	cmp	r3, #6
    82d6:	d001      	beq.n	82dc <errata_32+0x10>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    82d8:	2000      	movs	r0, #0
    82da:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82dc:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    82e0:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
    82e4:	f013 0f0f 	tst.w	r3, #15
    82e8:	d109      	bne.n	82fe <errata_32+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82ea:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    82ee:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    82f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82f6:	2b30      	cmp	r3, #48	; 0x30
    82f8:	d003      	beq.n	8302 <errata_32+0x36>
    return false;
    82fa:	2000      	movs	r0, #0
    82fc:	4770      	bx	lr
    82fe:	2000      	movs	r0, #0
    8300:	4770      	bx	lr
            return true;
    8302:	2001      	movs	r0, #1
}
    8304:	4770      	bx	lr

00008306 <errata_36>:

static bool errata_36(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8306:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    830a:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
    830e:	2b06      	cmp	r3, #6
    8310:	d001      	beq.n	8316 <errata_36+0x10>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    8312:	2000      	movs	r0, #0
    8314:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8316:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    831a:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
    831e:	f013 0f0f 	tst.w	r3, #15
    8322:	d10d      	bne.n	8340 <errata_36+0x3a>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8324:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8328:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    832c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8330:	2b30      	cmp	r3, #48	; 0x30
    8332:	d007      	beq.n	8344 <errata_36+0x3e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    8334:	2b40      	cmp	r3, #64	; 0x40
    8336:	d007      	beq.n	8348 <errata_36+0x42>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    8338:	2b50      	cmp	r3, #80	; 0x50
    833a:	d007      	beq.n	834c <errata_36+0x46>
    return false;
    833c:	2000      	movs	r0, #0
    833e:	4770      	bx	lr
    8340:	2000      	movs	r0, #0
    8342:	4770      	bx	lr
            return true;
    8344:	2001      	movs	r0, #1
    8346:	4770      	bx	lr
            return true;
    8348:	2001      	movs	r0, #1
    834a:	4770      	bx	lr
            return true;
    834c:	2001      	movs	r0, #1
}
    834e:	4770      	bx	lr

00008350 <errata_37>:

static bool errata_37(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8350:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8354:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
    8358:	2b06      	cmp	r3, #6
    835a:	d001      	beq.n	8360 <errata_37+0x10>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    835c:	2000      	movs	r0, #0
    835e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8360:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8364:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
    8368:	f013 0f0f 	tst.w	r3, #15
    836c:	d109      	bne.n	8382 <errata_37+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    836e:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8372:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    8376:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    837a:	2b30      	cmp	r3, #48	; 0x30
    837c:	d003      	beq.n	8386 <errata_37+0x36>
    return false;
    837e:	2000      	movs	r0, #0
    8380:	4770      	bx	lr
    8382:	2000      	movs	r0, #0
    8384:	4770      	bx	lr
            return true;
    8386:	2001      	movs	r0, #1
}
    8388:	4770      	bx	lr

0000838a <errata_57>:

static bool errata_57(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    838a:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    838e:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
    8392:	2b06      	cmp	r3, #6
    8394:	d001      	beq.n	839a <errata_57+0x10>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8396:	2000      	movs	r0, #0
    8398:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    839a:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    839e:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
    83a2:	f013 0f0f 	tst.w	r3, #15
    83a6:	d109      	bne.n	83bc <errata_57+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    83a8:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    83ac:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    83b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83b4:	2b30      	cmp	r3, #48	; 0x30
    83b6:	d003      	beq.n	83c0 <errata_57+0x36>
    return false;
    83b8:	2000      	movs	r0, #0
    83ba:	4770      	bx	lr
    83bc:	2000      	movs	r0, #0
    83be:	4770      	bx	lr
            return true;
    83c0:	2001      	movs	r0, #1
}
    83c2:	4770      	bx	lr

000083c4 <errata_66>:

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83c4:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    83c8:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
    83cc:	2b06      	cmp	r3, #6
    83ce:	d001      	beq.n	83d4 <errata_66+0x10>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    83d0:	2000      	movs	r0, #0
    83d2:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83d4:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    83d8:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
    83dc:	f013 0f0f 	tst.w	r3, #15
    83e0:	d109      	bne.n	83f6 <errata_66+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    83e2:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    83e6:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    83ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83ee:	2b50      	cmp	r3, #80	; 0x50
    83f0:	d003      	beq.n	83fa <errata_66+0x36>
    return false;
    83f2:	2000      	movs	r0, #0
    83f4:	4770      	bx	lr
    83f6:	2000      	movs	r0, #0
    83f8:	4770      	bx	lr
            return true;
    83fa:	2001      	movs	r0, #1
}
    83fc:	4770      	bx	lr

000083fe <errata_108>:


static bool errata_108(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83fe:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8402:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
    8406:	2b06      	cmp	r3, #6
    8408:	d001      	beq.n	840e <errata_108+0x10>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    840a:	2000      	movs	r0, #0
    840c:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    840e:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8412:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
    8416:	f013 0f0f 	tst.w	r3, #15
    841a:	d10d      	bne.n	8438 <errata_108+0x3a>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    841c:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8420:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    8424:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8428:	2b30      	cmp	r3, #48	; 0x30
    842a:	d007      	beq.n	843c <errata_108+0x3e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    842c:	2b40      	cmp	r3, #64	; 0x40
    842e:	d007      	beq.n	8440 <errata_108+0x42>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    8430:	2b50      	cmp	r3, #80	; 0x50
    8432:	d007      	beq.n	8444 <errata_108+0x46>
    return false;
    8434:	2000      	movs	r0, #0
    8436:	4770      	bx	lr
    8438:	2000      	movs	r0, #0
    843a:	4770      	bx	lr
            return true;
    843c:	2001      	movs	r0, #1
    843e:	4770      	bx	lr
            return true;
    8440:	2001      	movs	r0, #1
    8442:	4770      	bx	lr
            return true;
    8444:	2001      	movs	r0, #1
}
    8446:	4770      	bx	lr

00008448 <SystemCoreClockUpdate>:
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    8448:	4b01      	ldr	r3, [pc, #4]	; (8450 <SystemCoreClockUpdate+0x8>)
    844a:	4a02      	ldr	r2, [pc, #8]	; (8454 <SystemCoreClockUpdate+0xc>)
    844c:	601a      	str	r2, [r3, #0]
}
    844e:	4770      	bx	lr
    8450:	2000053c 	.word	0x2000053c
    8454:	03d09000 	.word	0x03d09000

00008458 <SystemInit>:
{
    8458:	b508      	push	{r3, lr}
    if (errata_16()){
    845a:	f7ff fef5 	bl	8248 <errata_16>
    845e:	b110      	cbz	r0, 8466 <SystemInit+0xe>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    8460:	4b6c      	ldr	r3, [pc, #432]	; (8614 <SystemInit+0x1bc>)
    8462:	4a6d      	ldr	r2, [pc, #436]	; (8618 <SystemInit+0x1c0>)
    8464:	675a      	str	r2, [r3, #116]	; 0x74
    if (errata_31()){
    8466:	f7ff ff0c 	bl	8282 <errata_31>
    846a:	b148      	cbz	r0, 8480 <SystemInit+0x28>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    846c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    8470:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
    8474:	f3c3 3342 	ubfx	r3, r3, #13, #3
    8478:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    847c:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    if (errata_32()){
    8480:	f7ff ff24 	bl	82cc <errata_32>
    8484:	b130      	cbz	r0, 8494 <SystemInit+0x3c>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    8486:	4a65      	ldr	r2, [pc, #404]	; (861c <SystemInit+0x1c4>)
    8488:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    848c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    8490:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    if (errata_36()){
    8494:	f7ff ff37 	bl	8306 <errata_36>
    8498:	b140      	cbz	r0, 84ac <SystemInit+0x54>
        NRF_CLOCK->EVENTS_DONE = 0;
    849a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    849e:	2200      	movs	r2, #0
    84a0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    84a4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    84a8:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
    84ac:	f7ff ff50 	bl	8350 <errata_37>
    84b0:	b120      	cbz	r0, 84bc <SystemInit+0x64>
        *(volatile uint32_t *)0x400005A0 = 0x3;
    84b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    84b6:	2203      	movs	r2, #3
    84b8:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    if (errata_57()){
    84bc:	f7ff ff65 	bl	838a <errata_57>
    84c0:	b160      	cbz	r0, 84dc <SystemInit+0x84>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
    84c2:	4b57      	ldr	r3, [pc, #348]	; (8620 <SystemInit+0x1c8>)
    84c4:	2205      	movs	r2, #5
    84c6:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
        *(volatile uint32_t *)0x40005688 = 0x00000001;
    84ca:	2201      	movs	r2, #1
    84cc:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
        *(volatile uint32_t *)0x40005618 = 0x00000000;
    84d0:	2200      	movs	r2, #0
    84d2:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
    84d6:	223f      	movs	r2, #63	; 0x3f
    84d8:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
    if (errata_66()){
    84dc:	f7ff ff72 	bl	83c4 <errata_66>
    84e0:	2800      	cmp	r0, #0
    84e2:	d046      	beq.n	8572 <SystemInit+0x11a>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    84e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    84e8:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    84ec:	4b4d      	ldr	r3, [pc, #308]	; (8624 <SystemInit+0x1cc>)
    84ee:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    84f2:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    84f6:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    84fa:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    84fe:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    8502:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    8506:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    850a:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    850e:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    8512:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    8516:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    851a:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    851e:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    8522:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    8526:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    852a:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    852e:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    8532:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    8536:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    853a:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    853e:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    8542:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    8546:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    854a:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    854e:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    8552:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    8556:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    855a:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    855e:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    8562:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    8566:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    856a:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    856e:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
    8572:	f7ff ff44 	bl	83fe <errata_108>
    8576:	b148      	cbz	r0, 858c <SystemInit+0x134>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
    8578:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    857c:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    8580:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    8584:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    8588:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
    858c:	4a23      	ldr	r2, [pc, #140]	; (861c <SystemInit+0x1c4>)
    858e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    8592:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    8596:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    859a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    859e:	f3bf 8f6f 	isb	sy
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
    85a2:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    85a6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
    85aa:	f013 0f01 	tst.w	r3, #1
    85ae:	d104      	bne.n	85ba <SystemInit+0x162>
    SystemCoreClockUpdate();
    85b0:	f7ff ff4a 	bl	8448 <SystemCoreClockUpdate>
    NVIC_Relocate();
    85b4:	f000 fa0c 	bl	89d0 <NVIC_Relocate>
}
    85b8:	bd08      	pop	{r3, pc}
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    85ba:	4b1b      	ldr	r3, [pc, #108]	; (8628 <SystemInit+0x1d0>)
    85bc:	2201      	movs	r2, #1
    85be:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    85c2:	4b19      	ldr	r3, [pc, #100]	; (8628 <SystemInit+0x1d0>)
    85c4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    85c8:	2b00      	cmp	r3, #0
    85ca:	d0fa      	beq.n	85c2 <SystemInit+0x16a>
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
    85cc:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    85d0:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
    85d4:	f023 0301 	bic.w	r3, r3, #1
    85d8:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    85dc:	4b12      	ldr	r3, [pc, #72]	; (8628 <SystemInit+0x1d0>)
    85de:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    85e2:	2b00      	cmp	r3, #0
    85e4:	d0fa      	beq.n	85dc <SystemInit+0x184>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    85e6:	4b10      	ldr	r3, [pc, #64]	; (8628 <SystemInit+0x1d0>)
    85e8:	2200      	movs	r2, #0
    85ea:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    85ee:	4b0e      	ldr	r3, [pc, #56]	; (8628 <SystemInit+0x1d0>)
    85f0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    85f4:	2b00      	cmp	r3, #0
    85f6:	d0fa      	beq.n	85ee <SystemInit+0x196>
  __ASM volatile ("dsb 0xF":::"memory");
    85f8:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    85fc:	4907      	ldr	r1, [pc, #28]	; (861c <SystemInit+0x1c4>)
    85fe:	68ca      	ldr	r2, [r1, #12]
    8600:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    8604:	4b09      	ldr	r3, [pc, #36]	; (862c <SystemInit+0x1d4>)
    8606:	4313      	orrs	r3, r2
    8608:	60cb      	str	r3, [r1, #12]
    860a:	f3bf 8f4f 	dsb	sy
    __NOP();
    860e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    8610:	e7fd      	b.n	860e <SystemInit+0x1b6>
    8612:	bf00      	nop
    8614:	4007c000 	.word	0x4007c000
    8618:	baadf00d 	.word	0xbaadf00d
    861c:	e000ed00 	.word	0xe000ed00
    8620:	40005000 	.word	0x40005000
    8624:	4000c000 	.word	0x4000c000
    8628:	4001e000 	.word	0x4001e000
    862c:	05fa0004 	.word	0x05fa0004

00008630 <_start>:

/*
 * Rudimentary startup function.
 */
void _start(void)
{
    8630:	b508      	push	{r3, lr}
    int rc;

    rc = main(0, NULL);
    exit(rc);
#else
    os_init(main);
    8632:	4803      	ldr	r0, [pc, #12]	; (8640 <_start+0x10>)
    8634:	f000 fd8e 	bl	9154 <os_init>
    os_start();
    8638:	f000 fdf0 	bl	921c <os_start>
#endif
}
    863c:	bd08      	pop	{r3, pc}
    863e:	bf00      	nop
    8640:	00008809 	.word	0x00008809

00008644 <_init>:

void
_init(void)
{
}
    8644:	4770      	bx	lr
	...

00008648 <uwb_config_updated>:
 * Called from the main event queue as a result of the uwbcfg packet
 * having received a commit/load of new uwb configuration.
 */
int
uwb_config_updated()
{
    8648:	b538      	push	{r3, r4, r5, lr}
    uint32_t utime = os_cputime_ticks_to_usecs(os_cputime_get32());
    864a:	f000 fee6 	bl	941a <os_cputime_get32>
    864e:	4605      	mov	r5, r0
    struct uwb_dev *udev = uwb_dev_idx_lookup(0);
    8650:	2000      	movs	r0, #0
    8652:	f000 f9df 	bl	8a14 <uwb_dev_idx_lookup>
    8656:	4604      	mov	r4, r0
 *
 */
UWB_API_IMPL_PREFIX struct uwb_dev_status
uwb_mac_config(struct uwb_dev * dev, struct uwb_dev_config * config)
{
    return (dev->uw_funcs->uf_mac_config(dev, config));
    8658:	6a43      	ldr	r3, [r0, #36]	; 0x24
    865a:	681b      	ldr	r3, [r3, #0]
    865c:	2100      	movs	r1, #0
    865e:	4798      	blx	r3
 * @return void
 */
UWB_API_IMPL_PREFIX void
uwb_txrf_config(struct uwb_dev * dev, struct uwb_dev_txrf_config *config)
{
    return (dev->uw_funcs->uf_txrf_config(dev, config));
    8660:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8662:	685b      	ldr	r3, [r3, #4]
    8664:	f204 5124 	addw	r1, r4, #1316	; 0x524
    8668:	4620      	mov	r0, r4
    866a:	4798      	blx	r3
    uwb_mac_config(udev, NULL);
    uwb_txrf_config(udev, &udev->config.txrf);
    printf("{\"utime\": %lu,\"msg\": \"new config applied\"}\n",utime);
    866c:	4629      	mov	r1, r5
    866e:	4802      	ldr	r0, [pc, #8]	; (8678 <uwb_config_updated+0x30>)
    8670:	f005 fe46 	bl	e300 <printf>
    return 0;
}
    8674:	2000      	movs	r0, #0
    8676:	bd38      	pop	{r3, r4, r5, pc}
    8678:	00022c30 	.word	0x00022c30

0000867c <error_cb>:
{
    867c:	b538      	push	{r3, r4, r5, lr}
    867e:	4604      	mov	r4, r0
    if (inst->fctrl != FCNTL_IEEE_RANGE_16 &&
    8680:	f8b0 34e0 	ldrh.w	r3, [r0, #1248]	; 0x4e0
    8684:	f648 0241 	movw	r2, #34881	; 0x8841
    8688:	4293      	cmp	r3, r2
    868a:	d003      	beq.n	8694 <error_cb+0x18>
    868c:	f648 0261 	movw	r2, #34913	; 0x8861
    8690:	4293      	cmp	r3, r2
    8692:	d129      	bne.n	86e8 <error_cb+0x6c>
    uint32_t utime = os_cputime_ticks_to_usecs(os_cputime_get32());
    8694:	f000 fec1 	bl	941a <os_cputime_get32>
    8698:	4605      	mov	r5, r0
    if (inst->status.start_rx_error)
    869a:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
    869e:	f013 0f08 	tst.w	r3, #8
    86a2:	d10b      	bne.n	86bc <error_cb+0x40>
    if (inst->status.start_tx_error)
    86a4:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
    86a8:	f013 0f04 	tst.w	r3, #4
    86ac:	d10d      	bne.n	86ca <error_cb+0x4e>
    if (inst->status.rx_error)
    86ae:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
    86b2:	f013 0f40 	tst.w	r3, #64	; 0x40
    86b6:	d10f      	bne.n	86d8 <error_cb+0x5c>
    return true;
    86b8:	2001      	movs	r0, #1
}
    86ba:	bd38      	pop	{r3, r4, r5, pc}
        printf("{\"utime\": %lu,\"msg\": \"start_rx_error,%s:%d\"}\n",utime, __FILE__, __LINE__);
    86bc:	23bd      	movs	r3, #189	; 0xbd
    86be:	4a0b      	ldr	r2, [pc, #44]	; (86ec <error_cb+0x70>)
    86c0:	4601      	mov	r1, r0
    86c2:	480b      	ldr	r0, [pc, #44]	; (86f0 <error_cb+0x74>)
    86c4:	f005 fe1c 	bl	e300 <printf>
    86c8:	e7ec      	b.n	86a4 <error_cb+0x28>
        printf("{\"utime\": %lu,\"msg\": \"start_tx_error,%s:%d\"}\n",utime, __FILE__, __LINE__);
    86ca:	23bf      	movs	r3, #191	; 0xbf
    86cc:	4a07      	ldr	r2, [pc, #28]	; (86ec <error_cb+0x70>)
    86ce:	4629      	mov	r1, r5
    86d0:	4808      	ldr	r0, [pc, #32]	; (86f4 <error_cb+0x78>)
    86d2:	f005 fe15 	bl	e300 <printf>
    86d6:	e7ea      	b.n	86ae <error_cb+0x32>
        printf("{\"utime\": %lu,\"msg\": \"rx_error,%s:%d\"}\n",utime, __FILE__, __LINE__);
    86d8:	23c1      	movs	r3, #193	; 0xc1
    86da:	4a04      	ldr	r2, [pc, #16]	; (86ec <error_cb+0x70>)
    86dc:	4629      	mov	r1, r5
    86de:	4806      	ldr	r0, [pc, #24]	; (86f8 <error_cb+0x7c>)
    86e0:	f005 fe0e 	bl	e300 <printf>
    return true;
    86e4:	2001      	movs	r0, #1
    86e6:	e7e8      	b.n	86ba <error_cb+0x3e>
        return false;
    86e8:	2000      	movs	r0, #0
    86ea:	e7e6      	b.n	86ba <error_cb+0x3e>
    86ec:	00022c5c 	.word	0x00022c5c
    86f0:	00022c7c 	.word	0x00022c7c
    86f4:	00022cac 	.word	0x00022cac
    86f8:	00022cdc 	.word	0x00022cdc

000086fc <slot_complete_cb>:
slot_complete_cb(struct dpl_event * ev){
    86fc:	b508      	push	{r3, lr}
    assert(ev != NULL);
    86fe:	b118      	cbz	r0, 8708 <slot_complete_cb+0xc>
    hal_gpio_toggle(LED_BLINK_PIN);
    8700:	201f      	movs	r0, #31
    8702:	f000 fba6 	bl	8e52 <hal_gpio_toggle>
}
    8706:	bd08      	pop	{r3, pc}
    assert(ev != NULL);
    8708:	2300      	movs	r3, #0
    870a:	461a      	mov	r2, r3
    870c:	4619      	mov	r1, r3
    870e:	4618      	mov	r0, r3
    8710:	f000 fc28 	bl	8f64 <__assert_func>

00008714 <slot_cb>:
slot_cb(struct dpl_event *ev){
    8714:	b5f0      	push	{r4, r5, r6, r7, lr}
    8716:	b083      	sub	sp, #12
    assert(ev);
    8718:	2800      	cmp	r0, #0
    871a:	d03a      	beq.n	8792 <slot_cb+0x7e>
}

static inline void *
dpl_event_get_arg(struct dpl_event *ev)
{
    return ev->ev.ev_arg;
    871c:	6885      	ldr	r5, [r0, #8]
    tdma_instance_t * tdma = slot->parent;
    871e:	68ae      	ldr	r6, [r5, #8]
    uint16_t idx = slot->idx;
    8720:	882f      	ldrh	r7, [r5, #0]
    struct uwb_rng_instance *rng = (struct uwb_rng_instance*)slot->arg;
    8722:	6b6c      	ldr	r4, [r5, #52]	; 0x34
    hal_gpio_toggle(LED_BLINK_PIN);
    8724:	201f      	movs	r0, #31
    8726:	f000 fb94 	bl	8e52 <hal_gpio_toggle>
    uint64_t dx_time = tdma_tx_slot_start(tdma, idx) & 0xFFFFFFFFFE00UL;
    872a:	ee07 7a90 	vmov	s15, r7
    872e:	eeb8 0a67 	vcvt.f32.u32	s0, s15
    8732:	4630      	mov	r0, r6
    8734:	f002 fcc8 	bl	b0c8 <tdma_tx_slot_start>
    8738:	f420 72ff 	bic.w	r2, r0, #510	; 0x1fe
    873c:	f022 0201 	bic.w	r2, r2, #1
    8740:	b28b      	uxth	r3, r1
    struct uwb_ccp_instance *ccp = tdma->ccp;
    8742:	6871      	ldr	r1, [r6, #4]
    uint16_t node_address = ccp->frames[ccp->idx%ccp->nframes]->short_address;
    8744:	f8b1 c0ee 	ldrh.w	ip, [r1, #238]	; 0xee
    8748:	f8b1 00ec 	ldrh.w	r0, [r1, #236]	; 0xec
    874c:	fbbc f6f0 	udiv	r6, ip, r0
    8750:	fb00 cc16 	mls	ip, r0, r6, ip
    8754:	fa1f fc8c 	uxth.w	ip, ip
    8758:	f10c 0ce0 	add.w	ip, ip, #224	; 0xe0
    875c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
    8760:	8949      	ldrh	r1, [r1, #10]
    if ((slot->idx&7)==1) {
    8762:	f8b5 c000 	ldrh.w	ip, [r5]
    8766:	f00c 0c07 	and.w	ip, ip, #7
    876a:	f1bc 0f01 	cmp.w	ip, #1
    876e:	d016      	beq.n	879e <slot_cb+0x8a>
    int mode = UWB_DATA_CODE_SS_TWR_ACK;
    8770:	f44f 708c 	mov.w	r0, #280	; 0x118
    if ((slot->idx&7)==2) {
    8774:	f1bc 0f02 	cmp.w	ip, #2
    8778:	d014      	beq.n	87a4 <slot_cb+0x90>
    if ((slot->idx&7)==3) {
    877a:	f1bc 0f03 	cmp.w	ip, #3
    877e:	d014      	beq.n	87aa <slot_cb+0x96>
    if ((slot->idx&7)==4) {
    8780:	f1bc 0f04 	cmp.w	ip, #4
    8784:	d014      	beq.n	87b0 <slot_cb+0x9c>
    uwb_rng_request_delay_start(rng, node_address, dx_time, mode);
    8786:	9000      	str	r0, [sp, #0]
    8788:	4620      	mov	r0, r4
    878a:	f004 fa5d 	bl	cc48 <uwb_rng_request_delay_start>
}
    878e:	b003      	add	sp, #12
    8790:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert(ev);
    8792:	2300      	movs	r3, #0
    8794:	461a      	mov	r2, r3
    8796:	4619      	mov	r1, r3
    8798:	4618      	mov	r0, r3
    879a:	f000 fbe3 	bl	8f64 <__assert_func>
        mode = UWB_DATA_CODE_SS_TWR;
    879e:	f44f 7088 	mov.w	r0, #272	; 0x110
    87a2:	e7e7      	b.n	8774 <slot_cb+0x60>
        mode = UWB_DATA_CODE_SS_TWR_EXT;
    87a4:	f44f 708a 	mov.w	r0, #276	; 0x114
    87a8:	e7e7      	b.n	877a <slot_cb+0x66>
        mode = UWB_DATA_CODE_DS_TWR;
    87aa:	f44f 7090 	mov.w	r0, #288	; 0x120
    87ae:	e7e7      	b.n	8780 <slot_cb+0x6c>
        mode = UWB_DATA_CODE_DS_TWR_EXT;
    87b0:	f240 1025 	movw	r0, #293	; 0x125
    87b4:	e7e7      	b.n	8786 <slot_cb+0x72>
	...

000087b8 <complete_cb>:
{
    87b8:	b508      	push	{r3, lr}
    if (inst->fctrl != FCNTL_IEEE_RANGE_16 &&
    87ba:	f8b0 34e0 	ldrh.w	r3, [r0, #1248]	; 0x4e0
    87be:	f648 0241 	movw	r2, #34881	; 0x8841
    87c2:	4293      	cmp	r3, r2
    87c4:	d003      	beq.n	87ce <complete_cb+0x16>
    87c6:	f648 0261 	movw	r2, #34913	; 0x8861
    87ca:	4293      	cmp	r3, r2
    87cc:	d116      	bne.n	87fc <complete_cb+0x44>
    struct uwb_rng_instance* rng = (struct uwb_rng_instance*)cbs->inst_ptr;
    87ce:	684a      	ldr	r2, [r1, #4]
    g_idx_latest = (rng->idx)%rng->nframes; // Store valid frame pointer
    87d0:	f8b2 3076 	ldrh.w	r3, [r2, #118]	; 0x76
    87d4:	f8b2 207a 	ldrh.w	r2, [r2, #122]	; 0x7a
    87d8:	fbb3 f1f2 	udiv	r1, r3, r2
    87dc:	fb02 3311 	mls	r3, r2, r1, r3
    87e0:	4a07      	ldr	r2, [pc, #28]	; (8800 <complete_cb+0x48>)
    87e2:	8013      	strh	r3, [r2, #0]
    return ev->ev.ev_queued;
    87e4:	4b07      	ldr	r3, [pc, #28]	; (8804 <complete_cb+0x4c>)
    87e6:	781b      	ldrb	r3, [r3, #0]
    if (!dpl_event_is_queued(&slot_event)) {
    87e8:	b10b      	cbz	r3, 87ee <complete_cb+0x36>
    return true;
    87ea:	2001      	movs	r0, #1
}
    87ec:	bd08      	pop	{r3, pc}
    return (struct dpl_eventq *) os_eventq_dflt_get();
    87ee:	f000 ff9b 	bl	9728 <os_eventq_dflt_get>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    87f2:	4904      	ldr	r1, [pc, #16]	; (8804 <complete_cb+0x4c>)
    87f4:	f000 feea 	bl	95cc <os_eventq_put>
    return true;
    87f8:	2001      	movs	r0, #1
}
    87fa:	e7f7      	b.n	87ec <complete_cb+0x34>
        return false;
    87fc:	2000      	movs	r0, #0
    87fe:	e7f5      	b.n	87ec <complete_cb+0x34>
    8800:	20001448 	.word	0x20001448
    8804:	2000144c 	.word	0x2000144c

00008808 <main>:


int main(int argc, char **argv){
    8808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    880c:	b092      	sub	sp, #72	; 0x48
    int rc;

    sysinit();
    880e:	f008 fe63 	bl	114d8 <sysinit_start>
    8812:	f009 fe0d 	bl	12430 <sysinit_app>
    8816:	f008 fe65 	bl	114e4 <sysinit_end>
    /* Register callback for UWB configuration changes */
    struct uwbcfg_cbs uwb_cb = {
    881a:	2400      	movs	r4, #0
    881c:	9410      	str	r4, [sp, #64]	; 0x40
    881e:	9411      	str	r4, [sp, #68]	; 0x44
    8820:	4b5b      	ldr	r3, [pc, #364]	; (8990 <main+0x188>)
    8822:	9311      	str	r3, [sp, #68]	; 0x44
        .uc_update = uwb_config_updated
    };
    uwbcfg_register(&uwb_cb);
    8824:	a810      	add	r0, sp, #64	; 0x40
    8826:	f009 f803 	bl	11830 <uwbcfg_register>
    /* Load config from flash */
    conf_load();
    882a:	f006 f873 	bl	e914 <conf_load>

    hal_gpio_init_out(LED_BLINK_PIN, 1);
    882e:	2101      	movs	r1, #1
    8830:	201f      	movs	r0, #31
    8832:	f000 fac7 	bl	8dc4 <hal_gpio_init_out>
    hal_gpio_init_out(LED_1, 1);
    8836:	2101      	movs	r1, #1
    8838:	201e      	movs	r0, #30
    883a:	f000 fac3 	bl	8dc4 <hal_gpio_init_out>
    hal_gpio_init_out(LED_3, 1);
    883e:	2101      	movs	r1, #1
    8840:	2016      	movs	r0, #22
    8842:	f000 fabf 	bl	8dc4 <hal_gpio_init_out>

    struct uwb_dev *udev = uwb_dev_idx_lookup(0);
    8846:	4620      	mov	r0, r4
    8848:	f000 f8e4 	bl	8a14 <uwb_dev_idx_lookup>
    884c:	4607      	mov	r7, r0
    struct uwb_rng_instance* rng = (struct uwb_rng_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_RNG);
    884e:	2104      	movs	r1, #4
    8850:	f000 f965 	bl	8b1e <uwb_mac_find_cb_inst_ptr>
    assert(rng);
    8854:	2800      	cmp	r0, #0
    8856:	d075      	beq.n	8944 <main+0x13c>
    8858:	4605      	mov	r5, r0

    struct uwb_mac_interface cbs = {
    885a:	223c      	movs	r2, #60	; 0x3c
    885c:	2100      	movs	r1, #0
    885e:	a801      	add	r0, sp, #4
    8860:	f005 f93b 	bl	dada <memset>
    8864:	f44f 6380 	mov.w	r3, #1024	; 0x400
    8868:	f8ad 3006 	strh.w	r3, [sp, #6]
    886c:	9502      	str	r5, [sp, #8]
    886e:	4b49      	ldr	r3, [pc, #292]	; (8994 <main+0x18c>)
    8870:	9308      	str	r3, [sp, #32]
    8872:	9309      	str	r3, [sp, #36]	; 0x24
    8874:	4b48      	ldr	r3, [pc, #288]	; (8998 <main+0x190>)
    8876:	930c      	str	r3, [sp, #48]	; 0x30
        .inst_ptr = rng,
        .tx_error_cb = error_cb,
        .rx_error_cb = error_cb,
        .complete_cb = complete_cb
    };
    uwb_mac_append_interface(udev, &cbs);
    8878:	a901      	add	r1, sp, #4
    887a:	4638      	mov	r0, r7
    887c:	f000 f8fa 	bl	8a74 <uwb_mac_append_interface>

    tdma_instance_t * tdma = (tdma_instance_t*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_TDMA);
    8880:	2103      	movs	r1, #3
    8882:	4638      	mov	r0, r7
    8884:	f000 f94b 	bl	8b1e <uwb_mac_find_cb_inst_ptr>
    assert(tdma);
    8888:	4606      	mov	r6, r0
    888a:	2800      	cmp	r0, #0
    888c:	d060      	beq.n	8950 <main+0x148>
    uwb_ccp_start(tdma->ccp, CCP_ROLE_SLAVE);
    888e:	2101      	movs	r1, #1
    8890:	6840      	ldr	r0, [r0, #4]
    8892:	f003 faac 	bl	bdee <uwb_ccp_start>

    uint32_t utime = os_cputime_ticks_to_usecs(os_cputime_get32());
    8896:	f000 fdc0 	bl	941a <os_cputime_get32>
    889a:	4604      	mov	r4, r0
    printf("{\"utime\": %lu,\"exec\": \"%s\"}\n",utime,__FILE__);
    889c:	4a3f      	ldr	r2, [pc, #252]	; (899c <main+0x194>)
    889e:	4601      	mov	r1, r0
    88a0:	483f      	ldr	r0, [pc, #252]	; (89a0 <main+0x198>)
    88a2:	f005 fd2d 	bl	e300 <printf>
    printf("{\"device_id\"=\"%lX\"",udev->device_id);
    88a6:	f8d7 14c8 	ldr.w	r1, [r7, #1224]	; 0x4c8
    88aa:	483e      	ldr	r0, [pc, #248]	; (89a4 <main+0x19c>)
    88ac:	f005 fd28 	bl	e300 <printf>
    printf(",\"panid=\"%X\"",udev->pan_id);
    88b0:	f8b7 14c0 	ldrh.w	r1, [r7, #1216]	; 0x4c0
    88b4:	483c      	ldr	r0, [pc, #240]	; (89a8 <main+0x1a0>)
    88b6:	f005 fd23 	bl	e300 <printf>
    printf(",\"addr\"=\"%X\"",udev->uid);
    88ba:	f8b7 14b6 	ldrh.w	r1, [r7, #1206]	; 0x4b6
    88be:	483b      	ldr	r0, [pc, #236]	; (89ac <main+0x1a4>)
    88c0:	f005 fd1e 	bl	e300 <printf>
    printf(",\"part_id\"=\"%lX\"",(uint32_t)(udev->euid&0xffffffff));
    88c4:	f8d7 14b8 	ldr.w	r1, [r7, #1208]	; 0x4b8
    88c8:	4839      	ldr	r0, [pc, #228]	; (89b0 <main+0x1a8>)
    88ca:	f005 fd19 	bl	e300 <printf>
    printf(",\"lot_id\"=\"%lX\"}\n",(uint32_t)(udev->euid>>32));
    88ce:	f8d7 14bc 	ldr.w	r1, [r7, #1212]	; 0x4bc
    88d2:	4838      	ldr	r0, [pc, #224]	; (89b4 <main+0x1ac>)
    88d4:	f005 fd14 	bl	e300 <printf>
 * @return uint16_t duration in usec (not uwb usecs)
 */
UWB_API_IMPL_PREFIX uint16_t
uwb_phy_frame_duration(struct uwb_dev* dev, uint16_t nlen)
{
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
    88d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    88da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    88dc:	211f      	movs	r1, #31
    88de:	4638      	mov	r0, r7
    88e0:	4798      	blx	r3
    88e2:	4602      	mov	r2, r0
    printf("{\"utime\": %lu,\"msg\": \"frame_duration = %d usec\"}\n",utime, uwb_phy_frame_duration(udev, sizeof(twr_frame_final_t)));
    88e4:	4621      	mov	r1, r4
    88e6:	4834      	ldr	r0, [pc, #208]	; (89b8 <main+0x1b0>)
    88e8:	f005 fd0a 	bl	e300 <printf>
 * @return uint16_t duration in usec (not uwb usec)
 */
UWB_API_IMPL_PREFIX uint16_t
uwb_phy_SHR_duration(struct uwb_dev* dev)
{
    return (dev->uw_funcs->uf_phy_SHR_duration(dev));
    88ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    88ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    88f2:	4638      	mov	r0, r7
    88f4:	4798      	blx	r3
    88f6:	4602      	mov	r2, r0
    printf("{\"utime\": %lu,\"msg\": \"SHR_duration = %d usec\"}\n",utime, uwb_phy_SHR_duration(udev));
    88f8:	4621      	mov	r1, r4
    88fa:	4830      	ldr	r0, [pc, #192]	; (89bc <main+0x1b4>)
    88fc:	f005 fd00 	bl	e300 <printf>
    printf("{\"utime\": %lu,\"msg\": \"holdoff = %d usec\"}\n",utime,(uint16_t)ceilf(uwb_dwt_usecs_to_usecs(rng->config.tx_holdoff_delay)));
    8900:	6e68      	ldr	r0, [r5, #100]	; 0x64
    8902:	f018 fcdb 	bl	212bc <__aeabi_ui2d>
    8906:	a320      	add	r3, pc, #128	; (adr r3, 8988 <main+0x180>)
    8908:	e9d3 2300 	ldrd	r2, r3, [r3]
    890c:	f018 fd50 	bl	213b0 <__aeabi_dmul>
    8910:	f019 f846 	bl	219a0 <__aeabi_d2f>
    8914:	ee00 0a10 	vmov	s0, r0
    8918:	f019 fac4 	bl	21ea4 <ceilf>
    891c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    8920:	ee17 3a90 	vmov	r3, s15
    8924:	b29a      	uxth	r2, r3
    8926:	4621      	mov	r1, r4
    8928:	4825      	ldr	r0, [pc, #148]	; (89c0 <main+0x1b8>)
    892a:	f005 fce9 	bl	e300 <printf>
    memset(ev, 0, sizeof(*ev));
    892e:	4b25      	ldr	r3, [pc, #148]	; (89c4 <main+0x1bc>)
    8930:	2200      	movs	r2, #0
    8932:	601a      	str	r2, [r3, #0]
    8934:	605a      	str	r2, [r3, #4]
    8936:	609a      	str	r2, [r3, #8]
    8938:	60da      	str	r2, [r3, #12]
    ev->ev.ev_cb = (os_event_fn *)fn;
    893a:	4a23      	ldr	r2, [pc, #140]	; (89c8 <main+0x1c0>)
    893c:	605a      	str	r2, [r3, #4]
    ev->ev.ev_arg = arg;
    893e:	609d      	str	r5, [r3, #8]
    ble_init(udev->euid);
#endif
    dpl_event_init(&slot_event, slot_complete_cb, rng);

    /* Slot 0:ccp, 1+ twr */
    for (uint16_t i = 1; i < MYNEWT_VAL(TDMA_NSLOTS); i++) {
    8940:	2401      	movs	r4, #1
    8942:	e013      	b.n	896c <main+0x164>
    assert(rng);
    8944:	4623      	mov	r3, r4
    8946:	4622      	mov	r2, r4
    8948:	4621      	mov	r1, r4
    894a:	4620      	mov	r0, r4
    894c:	f000 fb0a 	bl	8f64 <__assert_func>
    assert(tdma);
    8950:	2300      	movs	r3, #0
    8952:	461a      	mov	r2, r3
    8954:	4619      	mov	r1, r3
    8956:	4618      	mov	r0, r3
    8958:	f000 fb04 	bl	8f64 <__assert_func>
        tdma_assign_slot(tdma, slot_cb,  i, (void*)rng);
    895c:	462b      	mov	r3, r5
    895e:	4622      	mov	r2, r4
    8960:	491a      	ldr	r1, [pc, #104]	; (89cc <main+0x1c4>)
    8962:	4630      	mov	r0, r6
    8964:	f002 fade 	bl	af24 <tdma_assign_slot>
    for (uint16_t i = 1; i < MYNEWT_VAL(TDMA_NSLOTS); i++) {
    8968:	3401      	adds	r4, #1
    896a:	b2a4      	uxth	r4, r4
    896c:	2c9f      	cmp	r4, #159	; 0x9f
    896e:	d9f5      	bls.n	895c <main+0x154>
    }

#if MYNEWT_VAL(RNG_VERBOSE) > 1
    udev->config.rxdiag_enable = 1;
    8970:	f897 352c 	ldrb.w	r3, [r7, #1324]	; 0x52c
    8974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8978:	f887 352c 	strb.w	r3, [r7, #1324]	; 0x52c
#else
    udev->config.rxdiag_enable = 0;
#endif

    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    897c:	f000 fed4 	bl	9728 <os_eventq_dflt_get>
    8980:	f000 fea4 	bl	96cc <os_eventq_run>
    while (1) {
    8984:	e7fa      	b.n	897c <main+0x174>
    8986:	bf00      	nop
    8988:	90690691 	.word	0x90690691
    898c:	3ff06906 	.word	0x3ff06906
    8990:	00008649 	.word	0x00008649
    8994:	0000867d 	.word	0x0000867d
    8998:	000087b9 	.word	0x000087b9
    899c:	00022c5c 	.word	0x00022c5c
    89a0:	00022d04 	.word	0x00022d04
    89a4:	00022d24 	.word	0x00022d24
    89a8:	00022d38 	.word	0x00022d38
    89ac:	00022d48 	.word	0x00022d48
    89b0:	00022d58 	.word	0x00022d58
    89b4:	00022d6c 	.word	0x00022d6c
    89b8:	00022d80 	.word	0x00022d80
    89bc:	00022db4 	.word	0x00022db4
    89c0:	00022de4 	.word	0x00022de4
    89c4:	2000144c 	.word	0x2000144c
    89c8:	000086fd 	.word	0x000086fd
    89cc:	00008715 	.word	0x00008715

000089d0 <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
    89d0:	4a09      	ldr	r2, [pc, #36]	; (89f8 <NVIC_Relocate+0x28>)
    89d2:	4b0a      	ldr	r3, [pc, #40]	; (89fc <NVIC_Relocate+0x2c>)
    89d4:	429a      	cmp	r2, r3
    89d6:	d00a      	beq.n	89ee <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
    89d8:	2300      	movs	r3, #0
    89da:	e006      	b.n	89ea <NVIC_Relocate+0x1a>
            new_location[i] = current_location[i];
    89dc:	4a07      	ldr	r2, [pc, #28]	; (89fc <NVIC_Relocate+0x2c>)
    89de:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    89e2:	4a05      	ldr	r2, [pc, #20]	; (89f8 <NVIC_Relocate+0x28>)
    89e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
    89e8:	3301      	adds	r3, #1
    89ea:	2b35      	cmp	r3, #53	; 0x35
    89ec:	ddf6      	ble.n	89dc <NVIC_Relocate+0xc>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
    89ee:	4a02      	ldr	r2, [pc, #8]	; (89f8 <NVIC_Relocate+0x28>)
    89f0:	4b03      	ldr	r3, [pc, #12]	; (8a00 <NVIC_Relocate+0x30>)
    89f2:	609a      	str	r2, [r3, #8]
#endif
}
    89f4:	4770      	bx	lr
    89f6:	bf00      	nop
    89f8:	20000000 	.word	0x20000000
    89fc:	00008020 	.word	0x00008020
    8a00:	e000ed00 	.word	0xe000ed00

00008a04 <uwb_interrupt_task>:
 * @param arg  Pointer to the queue of interrupts.
 * @return void
 */
static void *
uwb_interrupt_task(void *arg)
{
    8a04:	b510      	push	{r4, lr}
    8a06:	4604      	mov	r4, r0
    os_eventq_run((struct os_eventq * )evq);
    8a08:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    8a0c:	f000 fe5e 	bl	96cc <os_eventq_run>
    8a10:	e7fa      	b.n	8a08 <uwb_interrupt_task+0x4>
	...

00008a14 <uwb_dev_idx_lookup>:
{
    8a14:	b510      	push	{r4, lr}
    8a16:	b08a      	sub	sp, #40	; 0x28
    8a18:	4604      	mov	r4, r0
    const char base1k[] = "dw1000_%d";
    8a1a:	4b14      	ldr	r3, [pc, #80]	; (8a6c <uwb_dev_idx_lookup+0x58>)
    8a1c:	f10d 0c1c 	add.w	ip, sp, #28
    8a20:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    8a24:	e8ac 0003 	stmia.w	ip!, {r0, r1}
    8a28:	f8ac 2000 	strh.w	r2, [ip]
    const char base3k[] = "dw3000_%d";
    8a2c:	4b10      	ldr	r3, [pc, #64]	; (8a70 <uwb_dev_idx_lookup+0x5c>)
    8a2e:	f10d 0c10 	add.w	ip, sp, #16
    8a32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    8a36:	e8ac 0003 	stmia.w	ip!, {r0, r1}
    8a3a:	f8ac 2000 	strh.w	r2, [ip]
    snprintf(buf, sizeof buf, base1k, idx);
    8a3e:	4623      	mov	r3, r4
    8a40:	aa07      	add	r2, sp, #28
    8a42:	210c      	movs	r1, #12
    8a44:	a801      	add	r0, sp, #4
    8a46:	f005 fc8a 	bl	e35e <snprintf>
    odev = os_dev_lookup(buf);
    8a4a:	a801      	add	r0, sp, #4
    8a4c:	f000 fd86 	bl	955c <os_dev_lookup>
    if (!odev) {
    8a50:	b108      	cbz	r0, 8a56 <uwb_dev_idx_lookup+0x42>
}
    8a52:	b00a      	add	sp, #40	; 0x28
    8a54:	bd10      	pop	{r4, pc}
        snprintf(buf, sizeof buf, base3k, idx);
    8a56:	4623      	mov	r3, r4
    8a58:	aa04      	add	r2, sp, #16
    8a5a:	210c      	movs	r1, #12
    8a5c:	a801      	add	r0, sp, #4
    8a5e:	f005 fc7e 	bl	e35e <snprintf>
        odev = os_dev_lookup(buf);
    8a62:	a801      	add	r0, sp, #4
    8a64:	f000 fd7a 	bl	955c <os_dev_lookup>
    return (struct uwb_dev*)odev;
    8a68:	e7f3      	b.n	8a52 <uwb_dev_idx_lookup+0x3e>
    8a6a:	bf00      	nop
    8a6c:	00022e10 	.word	0x00022e10
    8a70:	00022e1c 	.word	0x00022e1c

00008a74 <uwb_mac_append_interface>:
{
    8a74:	b508      	push	{r3, lr}
    assert(dev);
    8a76:	b148      	cbz	r0, 8a8c <uwb_mac_append_interface+0x18>
    assert(cbs);
    8a78:	b171      	cbz	r1, 8a98 <uwb_mac_append_interface+0x24>
    cbs->status.initialized = true;
    8a7a:	780b      	ldrb	r3, [r1, #0]
    8a7c:	f043 0301 	orr.w	r3, r3, #1
    8a80:	700b      	strb	r3, [r1, #0]
    if(!(SLIST_EMPTY(&dev->interface_cbs))) {
    8a82:	f8d0 3530 	ldr.w	r3, [r0, #1328]	; 0x530
    8a86:	b1b3      	cbz	r3, 8ab6 <uwb_mac_append_interface+0x42>
        struct uwb_mac_interface * prev_cbs = NULL;
    8a88:	2200      	movs	r2, #0
    8a8a:	e00d      	b.n	8aa8 <uwb_mac_append_interface+0x34>
    assert(dev);
    8a8c:	2300      	movs	r3, #0
    8a8e:	461a      	mov	r2, r3
    8a90:	4619      	mov	r1, r3
    8a92:	4618      	mov	r0, r3
    8a94:	f000 fa66 	bl	8f64 <__assert_func>
    assert(cbs);
    8a98:	2300      	movs	r3, #0
    8a9a:	461a      	mov	r2, r3
    8a9c:	4619      	mov	r1, r3
    8a9e:	4618      	mov	r0, r3
    8aa0:	f000 fa60 	bl	8f64 <__assert_func>
            prev_cbs = cur_cbs;
    8aa4:	461a      	mov	r2, r3
        SLIST_FOREACH(cur_cbs, &dev->interface_cbs, next){
    8aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    8aa8:	2b00      	cmp	r3, #0
    8aaa:	d1fb      	bne.n	8aa4 <uwb_mac_append_interface+0x30>
        SLIST_INSERT_AFTER(prev_cbs, cbs, next);
    8aac:	6b93      	ldr	r3, [r2, #56]	; 0x38
    8aae:	638b      	str	r3, [r1, #56]	; 0x38
    8ab0:	6391      	str	r1, [r2, #56]	; 0x38
}
    8ab2:	4608      	mov	r0, r1
    8ab4:	bd08      	pop	{r3, pc}
        SLIST_INSERT_HEAD(&dev->interface_cbs, cbs, next);
    8ab6:	638b      	str	r3, [r1, #56]	; 0x38
    8ab8:	f8c0 1530 	str.w	r1, [r0, #1328]	; 0x530
    8abc:	e7f9      	b.n	8ab2 <uwb_mac_append_interface+0x3e>

00008abe <uwb_mac_remove_interface>:
{
    8abe:	b508      	push	{r3, lr}
    assert(dev);
    8ac0:	b148      	cbz	r0, 8ad6 <uwb_mac_remove_interface+0x18>
    8ac2:	4684      	mov	ip, r0
    SLIST_FOREACH(cbs, &dev->interface_cbs, next){
    8ac4:	f8d0 0530 	ldr.w	r0, [r0, #1328]	; 0x530
    8ac8:	4603      	mov	r3, r0
    8aca:	b193      	cbz	r3, 8af2 <uwb_mac_remove_interface+0x34>
        if(cbs->id == id){
    8acc:	885a      	ldrh	r2, [r3, #2]
    8ace:	428a      	cmp	r2, r1
    8ad0:	d007      	beq.n	8ae2 <uwb_mac_remove_interface+0x24>
    SLIST_FOREACH(cbs, &dev->interface_cbs, next){
    8ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    8ad4:	e7f9      	b.n	8aca <uwb_mac_remove_interface+0xc>
    assert(dev);
    8ad6:	2300      	movs	r3, #0
    8ad8:	461a      	mov	r2, r3
    8ada:	4619      	mov	r1, r3
    8adc:	4618      	mov	r0, r3
    8ade:	f000 fa41 	bl	8f64 <__assert_func>
            SLIST_REMOVE(&dev->interface_cbs, cbs, uwb_mac_interface, next);
    8ae2:	4283      	cmp	r3, r0
    8ae4:	d006      	beq.n	8af4 <uwb_mac_remove_interface+0x36>
    8ae6:	4602      	mov	r2, r0
    8ae8:	6b80      	ldr	r0, [r0, #56]	; 0x38
    8aea:	4298      	cmp	r0, r3
    8aec:	d1fb      	bne.n	8ae6 <uwb_mac_remove_interface+0x28>
    8aee:	6b83      	ldr	r3, [r0, #56]	; 0x38
    8af0:	6393      	str	r3, [r2, #56]	; 0x38
}
    8af2:	bd08      	pop	{r3, pc}
            SLIST_REMOVE(&dev->interface_cbs, cbs, uwb_mac_interface, next);
    8af4:	6b83      	ldr	r3, [r0, #56]	; 0x38
    8af6:	f8cc 3530 	str.w	r3, [ip, #1328]	; 0x530
    8afa:	e7fa      	b.n	8af2 <uwb_mac_remove_interface+0x34>

00008afc <uwb_mac_get_interface>:
{
    8afc:	b508      	push	{r3, lr}
    assert(dev);
    8afe:	b138      	cbz	r0, 8b10 <uwb_mac_get_interface+0x14>
    SLIST_FOREACH(cbs, &dev->interface_cbs, next){
    8b00:	f8d0 0530 	ldr.w	r0, [r0, #1328]	; 0x530
    8b04:	b150      	cbz	r0, 8b1c <uwb_mac_get_interface+0x20>
        if(cbs->id == id){
    8b06:	8843      	ldrh	r3, [r0, #2]
    8b08:	428b      	cmp	r3, r1
    8b0a:	d007      	beq.n	8b1c <uwb_mac_get_interface+0x20>
    SLIST_FOREACH(cbs, &dev->interface_cbs, next){
    8b0c:	6b80      	ldr	r0, [r0, #56]	; 0x38
    8b0e:	e7f9      	b.n	8b04 <uwb_mac_get_interface+0x8>
    assert(dev);
    8b10:	2300      	movs	r3, #0
    8b12:	461a      	mov	r2, r3
    8b14:	4619      	mov	r1, r3
    8b16:	4618      	mov	r0, r3
    8b18:	f000 fa24 	bl	8f64 <__assert_func>
}
    8b1c:	bd08      	pop	{r3, pc}

00008b1e <uwb_mac_find_cb_inst_ptr>:
{
    8b1e:	b508      	push	{r3, lr}
    struct uwb_mac_interface * cbs = uwb_mac_get_interface(dev, id);
    8b20:	f7ff ffec 	bl	8afc <uwb_mac_get_interface>
    if (cbs) {
    8b24:	4603      	mov	r3, r0
    8b26:	b100      	cbz	r0, 8b2a <uwb_mac_find_cb_inst_ptr+0xc>
        return cbs->inst_ptr;
    8b28:	6843      	ldr	r3, [r0, #4]
}
    8b2a:	4618      	mov	r0, r3
    8b2c:	bd08      	pop	{r3, pc}
	...

00008b30 <uwb_task_init>:
 *
 * @return void
 */
void
uwb_task_init(struct uwb_dev * inst, void (*irq_ev_cb)(struct dpl_event*))
{
    8b30:	b570      	push	{r4, r5, r6, lr}
    8b32:	b084      	sub	sp, #16
    8b34:	4604      	mov	r4, r0
    8b36:	460d      	mov	r5, r1
    int rc;
    /* Check if the task is already initiated */
    if (!dpl_eventq_inited(&inst->eventq))
    8b38:	f100 063c 	add.w	r6, r0, #60	; 0x3c
    return os_eventq_inited((struct os_eventq *) evq);
    8b3c:	4630      	mov	r0, r6
    8b3e:	f000 fd40 	bl	95c2 <os_eventq_inited>
    8b42:	b108      	cbz	r0, 8b48 <uwb_task_init+0x18>
                      inst->task_prio, DPL_WAIT_FOREVER,
                      inst->task_stack,
                      MYNEWT_VAL(UWB_DEV_TASK_STACK_SZ));
#endif
    }
}
    8b44:	b004      	add	sp, #16
    8b46:	bd70      	pop	{r4, r5, r6, pc}
    os_eventq_init((struct os_eventq *) evq);
    8b48:	4630      	mov	r0, r6
    8b4a:	f000 fd31 	bl	95b0 <os_eventq_init>
    memset(ev, 0, sizeof(*ev));
    8b4e:	2300      	movs	r3, #0
    8b50:	64e3      	str	r3, [r4, #76]	; 0x4c
    8b52:	6523      	str	r3, [r4, #80]	; 0x50
    8b54:	6563      	str	r3, [r4, #84]	; 0x54
    8b56:	65a3      	str	r3, [r4, #88]	; 0x58
    ev->ev.ev_cb = (os_event_fn *)fn;
    8b58:	6525      	str	r5, [r4, #80]	; 0x50
    ev->ev.ev_arg = arg;
    8b5a:	6564      	str	r4, [r4, #84]	; 0x54
}

static inline dpl_error_t
dpl_sem_init(struct dpl_sem *sem, uint16_t tokens)
{
    return (dpl_error_t)os_sem_init(&sem->sem, tokens);
    8b5c:	2101      	movs	r1, #1
    8b5e:	f104 0034 	add.w	r0, r4, #52	; 0x34
    8b62:	f001 f917 	bl	9d94 <os_sem_init>
        assert(rc == DPL_OK);
    8b66:	b998      	cbnz	r0, 8b90 <uwb_task_init+0x60>
        dpl_task_init(&inst->task_str, "uwb_irq",
    8b68:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
                      inst->task_stack,
    8b6c:	f104 02b0 	add.w	r2, r4, #176	; 0xb0
static inline int dpl_task_init(struct dpl_task *t, const char *name, dpl_task_func_t func,
		 void *arg, uint8_t prio, dpl_time_t sanity_itvl,
		 os_stack_t * stack_bottom, uint16_t stack_size)
{

    return os_task_init((struct os_task *) t, name, (os_task_func_t) func,
    8b70:	f44f 7180 	mov.w	r1, #256	; 0x100
    8b74:	9103      	str	r1, [sp, #12]
    8b76:	9202      	str	r2, [sp, #8]
    8b78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8b7c:	9201      	str	r2, [sp, #4]
    8b7e:	9300      	str	r3, [sp, #0]
    8b80:	4623      	mov	r3, r4
    8b82:	4a06      	ldr	r2, [pc, #24]	; (8b9c <uwb_task_init+0x6c>)
    8b84:	4906      	ldr	r1, [pc, #24]	; (8ba0 <uwb_task_init+0x70>)
    8b86:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    8b8a:	f001 f9a3 	bl	9ed4 <os_task_init>
}
    8b8e:	e7d9      	b.n	8b44 <uwb_task_init+0x14>
        assert(rc == DPL_OK);
    8b90:	2300      	movs	r3, #0
    8b92:	461a      	mov	r2, r3
    8b94:	4619      	mov	r1, r3
    8b96:	4618      	mov	r0, r3
    8b98:	f000 f9e4 	bl	8f64 <__assert_func>
    8b9c:	00008a05 	.word	0x00008a05
    8ba0:	00022e28 	.word	0x00022e28

00008ba4 <uwb_task_deinit>:

void
uwb_task_deinit(struct uwb_dev * inst)
{
    8ba4:	b510      	push	{r4, lr}
    8ba6:	4604      	mov	r4, r0
    return os_eventq_inited((struct os_eventq *) evq);
    8ba8:	303c      	adds	r0, #60	; 0x3c
    8baa:	f000 fd0a 	bl	95c2 <os_eventq_inited>
    if (dpl_eventq_inited(&inst->eventq))
    8bae:	b900      	cbnz	r0, 8bb2 <uwb_task_deinit+0xe>
    {
        dpl_task_remove(&inst->task_str);
        dpl_eventq_deinit(&inst->eventq);
    }
}
    8bb0:	bd10      	pop	{r4, pc}
        (os_stack_t *) stack_bottom, stack_size) ;
}

static inline int dpl_task_remove(struct dpl_task * t)
{
    return os_task_remove((struct os_task * ) t);
    8bb2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    8bb6:	f001 f9f9 	bl	9fac <os_task_remove>
    8bba:	e7f9      	b.n	8bb0 <uwb_task_deinit+0xc>

00008bbc <uwb_dev_init>:

void
uwb_dev_init(struct uwb_dev * inst)
{
    8bbc:	b510      	push	{r4, lr}
    8bbe:	4604      	mov	r4, r0
    if (!inst->txbuf) {
    8bc0:	f8d0 3500 	ldr.w	r3, [r0, #1280]	; 0x500
    8bc4:	b11b      	cbz	r3, 8bce <uwb_dev_init+0x12>
#else
        inst->txbuf = malloc(inst->txbuf_size);
        assert(inst->txbuf);
#endif
    }
    if (!inst->rxbuf) {
    8bc6:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
    8bca:	b173      	cbz	r3, 8bea <uwb_dev_init+0x2e>
#else
        inst->rxbuf = malloc(inst->rxbuf_size);
        assert(inst->rxbuf);
#endif
    }
}
    8bcc:	bd10      	pop	{r4, pc}
        inst->txbuf = malloc(inst->txbuf_size);
    8bce:	f8b0 0506 	ldrh.w	r0, [r0, #1286]	; 0x506
    8bd2:	f004 ff05 	bl	d9e0 <malloc>
    8bd6:	f8c4 0500 	str.w	r0, [r4, #1280]	; 0x500
        assert(inst->txbuf);
    8bda:	2800      	cmp	r0, #0
    8bdc:	d1f3      	bne.n	8bc6 <uwb_dev_init+0xa>
    8bde:	2300      	movs	r3, #0
    8be0:	461a      	mov	r2, r3
    8be2:	4619      	mov	r1, r3
    8be4:	4618      	mov	r0, r3
    8be6:	f000 f9bd 	bl	8f64 <__assert_func>
        inst->rxbuf = malloc(inst->rxbuf_size);
    8bea:	f8b4 0504 	ldrh.w	r0, [r4, #1284]	; 0x504
    8bee:	f004 fef7 	bl	d9e0 <malloc>
    8bf2:	f8c4 04fc 	str.w	r0, [r4, #1276]	; 0x4fc
        assert(inst->rxbuf);
    8bf6:	2800      	cmp	r0, #0
    8bf8:	d1e8      	bne.n	8bcc <uwb_dev_init+0x10>
    8bfa:	2300      	movs	r3, #0
    8bfc:	461a      	mov	r2, r3
    8bfe:	4619      	mov	r1, r3
    8c00:	4618      	mov	r0, r3
    8c02:	f000 f9af 	bl	8f64 <__assert_func>
	...

00008c08 <uwb_calc_aoa>:
 *
 * returns angle of arrival - float, in radians
 */
dpl_float32_t
uwb_calc_aoa(dpl_float32_t pdoa, int channel, dpl_float32_t antenna_separation)
{
    8c08:	b508      	push	{r3, lr}
    8c0a:	ed2d 8b02 	vpush	{d8}
    8c0e:	ee10 3a10 	vmov	r3, s0
    8c12:	eeb0 8a60 	vmov.f32	s16, s1
    dpl_float32_t pd_dist, wavelength;
    dpl_float32_t frequency = DPL_FLOAT32_INIT(0);
    switch(channel) {
    8c16:	3801      	subs	r0, #1
    8c18:	2808      	cmp	r0, #8
    8c1a:	d839      	bhi.n	8c90 <uwb_calc_aoa+0x88>
    8c1c:	e8df f000 	tbb	[pc, r0]
    8c20:	2c05413e 	.word	0x2c05413e
    8c24:	3832382f 	.word	0x3832382f
    8c28:	35          	.byte	0x35
    8c29:	00          	.byte	0x00
    case (1): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_1);break;
    case (2): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_2);break;
    case (3): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_3);break;
    8c2a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8cb0 <uwb_calc_aoa+0xa8>
    case (5): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_5);break;
    case (7): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_7);break;
    case (9): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_9);break;
    default: assert(0); break;
    }
    wavelength = DPL_FLOAT32_DIV(DPL_FLOAT32_INIT(SPEED_OF_LIGHT), frequency);
    8c2e:	eddf 7a21 	vldr	s15, [pc, #132]	; 8cb4 <uwb_calc_aoa+0xac>
    8c32:	eec7 8a87 	vdiv.f32	s17, s15, s14
    pd_dist = DPL_FLOAT32_DIV(pdoa, DPL_FLOAT32_INIT(2.0f*M_PI));
    8c36:	4618      	mov	r0, r3
    8c38:	f018 fb62 	bl	21300 <__aeabi_f2d>
    8c3c:	a31a      	add	r3, pc, #104	; (adr r3, 8ca8 <uwb_calc_aoa+0xa0>)
    8c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
    8c42:	f018 fcdf 	bl	21604 <__aeabi_ddiv>
    8c46:	f018 feab 	bl	219a0 <__aeabi_d2f>
    8c4a:	ee07 0a90 	vmov	s15, r0
    pd_dist = DPL_FLOAT32_MUL(pd_dist, wavelength);
    8c4e:	ee68 8aa7 	vmul.f32	s17, s17, s15
    return DPL_FLOAT32_FROM_F64(
    8c52:	eec8 7a88 	vdiv.f32	s15, s17, s16
    8c56:	ee17 0a90 	vmov	r0, s15
    8c5a:	f018 fb51 	bl	21300 <__aeabi_f2d>
    8c5e:	ec41 0b10 	vmov	d0, r0, r1
    8c62:	f019 f965 	bl	21f30 <asin>
    8c66:	ec51 0b10 	vmov	r0, r1, d0
    8c6a:	f018 fe99 	bl	219a0 <__aeabi_d2f>
        DPL_FLOAT64_ASIN(DPL_FLOAT64_FROM_F32(
                         DPL_FLOAT32_DIV(pd_dist, antenna_separation)
                         )
            )
        );
}
    8c6e:	ee00 0a10 	vmov	s0, r0
    8c72:	ecbd 8b02 	vpop	{d8}
    8c76:	bd08      	pop	{r3, pc}
    case (4): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_4);break;
    8c78:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8cb0 <uwb_calc_aoa+0xa8>
    8c7c:	e7d7      	b.n	8c2e <uwb_calc_aoa+0x26>
    case (5): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_5);break;
    8c7e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8cb8 <uwb_calc_aoa+0xb0>
    8c82:	e7d4      	b.n	8c2e <uwb_calc_aoa+0x26>
    case (7): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_7);break;
    8c84:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8cb8 <uwb_calc_aoa+0xb0>
    8c88:	e7d1      	b.n	8c2e <uwb_calc_aoa+0x26>
    case (9): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_9);break;
    8c8a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8cbc <uwb_calc_aoa+0xb4>
    8c8e:	e7ce      	b.n	8c2e <uwb_calc_aoa+0x26>
    default: assert(0); break;
    8c90:	2300      	movs	r3, #0
    8c92:	461a      	mov	r2, r3
    8c94:	4619      	mov	r1, r3
    8c96:	4618      	mov	r0, r3
    8c98:	f000 f964 	bl	8f64 <__assert_func>
    switch(channel) {
    8c9c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8cc0 <uwb_calc_aoa+0xb8>
    8ca0:	e7c5      	b.n	8c2e <uwb_calc_aoa+0x26>
    case (2): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_2);break;
    8ca2:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8cc4 <uwb_calc_aoa+0xbc>
    8ca6:	e7c2      	b.n	8c2e <uwb_calc_aoa+0x26>
    8ca8:	54442d18 	.word	0x54442d18
    8cac:	401921fb 	.word	0x401921fb
    8cb0:	4f85e558 	.word	0x4f85e558
    8cb4:	4d8ef3c2 	.word	0x4d8ef3c2
    8cb8:	4fc167b8 	.word	0x4fc167b8
    8cbc:	4fee0980 	.word	0x4fee0980
    8cc0:	4f504850 	.word	0x4f504850
    8cc4:	4f6e0980 	.word	0x4f6e0980

00008cc8 <hal_gpio_irq_handler>:
 *
 * @param index
 */
static void
hal_gpio_irq_handler(void)
{
    8cc8:	b510      	push	{r4, lr}
#if NRF52840_XXAA
    gpio_state |= (uint64_t)NRF_P1->IN << 32;
#endif
#endif

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
    8cca:	2400      	movs	r4, #0
    8ccc:	e000      	b.n	8cd0 <hal_gpio_irq_handler+0x8>
    8cce:	3401      	adds	r4, #1
    8cd0:	2c07      	cmp	r4, #7
    8cd2:	dc1c      	bgt.n	8d0e <hal_gpio_irq_handler+0x46>
        if ((hal_gpio_irqs[i].sense_trig == HAL_GPIO_SENSE_TRIG_BOTH) ||
            (hal_gpio_irqs[i].sense_trig == sense_trig)) {
            hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
        }
#else
        if (NRF_GPIOTE->EVENTS_IN[i] && (NRF_GPIOTE->INTENSET & (1 << i))) {
    8cd4:	f104 0340 	add.w	r3, r4, #64	; 0x40
    8cd8:	4a0d      	ldr	r2, [pc, #52]	; (8d10 <hal_gpio_irq_handler+0x48>)
    8cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8cde:	2b00      	cmp	r3, #0
    8ce0:	d0f5      	beq.n	8cce <hal_gpio_irq_handler+0x6>
    8ce2:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    8ce6:	2301      	movs	r3, #1
    8ce8:	40a3      	lsls	r3, r4
    8cea:	421a      	tst	r2, r3
    8cec:	d0ef      	beq.n	8cce <hal_gpio_irq_handler+0x6>
            NRF_GPIOTE->EVENTS_IN[i] = 0;
    8cee:	f104 0340 	add.w	r3, r4, #64	; 0x40
    8cf2:	4a07      	ldr	r2, [pc, #28]	; (8d10 <hal_gpio_irq_handler+0x48>)
    8cf4:	2100      	movs	r1, #0
    8cf6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            if (hal_gpio_irqs[i].func) {
    8cfa:	4b06      	ldr	r3, [pc, #24]	; (8d14 <hal_gpio_irq_handler+0x4c>)
    8cfc:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
    8d00:	2a00      	cmp	r2, #0
    8d02:	d0e4      	beq.n	8cce <hal_gpio_irq_handler+0x6>
                hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
    8d04:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    8d08:	6858      	ldr	r0, [r3, #4]
    8d0a:	4790      	blx	r2
    8d0c:	e7df      	b.n	8cce <hal_gpio_irq_handler+0x6>
        }
#endif
    }

    os_trace_isr_exit();
}
    8d0e:	bd10      	pop	{r4, pc}
    8d10:	40006000 	.word	0x40006000
    8d14:	2000145c 	.word	0x2000145c

00008d18 <hal_gpio_irq_setup>:
static void
hal_gpio_irq_setup(void)
{
    static uint8_t irq_setup = 0;

    if (!irq_setup) {
    8d18:	4b06      	ldr	r3, [pc, #24]	; (8d34 <hal_gpio_irq_setup+0x1c>)
    8d1a:	781b      	ldrb	r3, [r3, #0]
    8d1c:	b94b      	cbnz	r3, 8d32 <hal_gpio_irq_setup+0x1a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
    8d1e:	4b06      	ldr	r3, [pc, #24]	; (8d38 <hal_gpio_irq_setup+0x20>)
    8d20:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    8d22:	4a06      	ldr	r2, [pc, #24]	; (8d3c <hal_gpio_irq_setup+0x24>)
    8d24:	659a      	str	r2, [r3, #88]	; 0x58
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8d26:	4b06      	ldr	r3, [pc, #24]	; (8d40 <hal_gpio_irq_setup+0x28>)
    8d28:	2240      	movs	r2, #64	; 0x40
    8d2a:	601a      	str	r2, [r3, #0]
        NVIC_SetVector(GPIOTE_IRQn, (uint32_t)hal_gpio_irq_handler);
        NVIC_EnableIRQ(GPIOTE_IRQn);
        irq_setup = 1;
    8d2c:	4b01      	ldr	r3, [pc, #4]	; (8d34 <hal_gpio_irq_setup+0x1c>)
    8d2e:	2201      	movs	r2, #1
    8d30:	701a      	strb	r2, [r3, #0]
#if MYNEWT_VAL(MCU_GPIO_USE_PORT_EVENT)
        NRF_GPIOTE->INTENCLR = GPIOTE_INTENCLR_PORT_Msk;
        NRF_GPIOTE->EVENTS_PORT = 0;
#endif
    }
}
    8d32:	4770      	bx	lr
    8d34:	2000149c 	.word	0x2000149c
    8d38:	e000ed00 	.word	0xe000ed00
    8d3c:	00008cc9 	.word	0x00008cc9
    8d40:	e000e100 	.word	0xe000e100

00008d44 <hal_gpio_find_empty_slot>:
static int
hal_gpio_find_empty_slot(void)
{
    int i;

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
    8d44:	2000      	movs	r0, #0
    8d46:	2807      	cmp	r0, #7
    8d48:	dc05      	bgt.n	8d56 <hal_gpio_find_empty_slot+0x12>
        if (hal_gpio_irqs[i].func == NULL) {
    8d4a:	4b04      	ldr	r3, [pc, #16]	; (8d5c <hal_gpio_find_empty_slot+0x18>)
    8d4c:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    8d50:	b11b      	cbz	r3, 8d5a <hal_gpio_find_empty_slot+0x16>
    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
    8d52:	3001      	adds	r0, #1
    8d54:	e7f7      	b.n	8d46 <hal_gpio_find_empty_slot+0x2>
            return i;
        }
    }
    return -1;
    8d56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    8d5a:	4770      	bx	lr
    8d5c:	2000145c 	.word	0x2000145c

00008d60 <hal_gpio_find_pin>:
        if (hal_gpio_irqs[i].func && hal_gpio_irqs[i].pin == pin) {
            return i;
        }
    }
#else
    pin = pin << GPIOTE_CONFIG_PSEL_Pos;
    8d60:	0201      	lsls	r1, r0, #8

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
    8d62:	2000      	movs	r0, #0
    8d64:	e000      	b.n	8d68 <hal_gpio_find_pin+0x8>
    8d66:	3001      	adds	r0, #1
    8d68:	2807      	cmp	r0, #7
    8d6a:	dc0e      	bgt.n	8d8a <hal_gpio_find_pin+0x2a>
        if (hal_gpio_irqs[i].func &&
    8d6c:	4b08      	ldr	r3, [pc, #32]	; (8d90 <hal_gpio_find_pin+0x30>)
    8d6e:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    8d72:	2b00      	cmp	r3, #0
    8d74:	d0f7      	beq.n	8d66 <hal_gpio_find_pin+0x6>
           (NRF_GPIOTE->CONFIG[i] & HAL_GPIOTE_PIN_MASK) == pin) {
    8d76:	f500 73a2 	add.w	r3, r0, #324	; 0x144
    8d7a:	4a06      	ldr	r2, [pc, #24]	; (8d94 <hal_gpio_find_pin+0x34>)
    8d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d80:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
        if (hal_gpio_irqs[i].func &&
    8d84:	428b      	cmp	r3, r1
    8d86:	d1ee      	bne.n	8d66 <hal_gpio_find_pin+0x6>
    8d88:	e001      	b.n	8d8e <hal_gpio_find_pin+0x2e>
            return i;
        }
    }
#endif

    return -1;
    8d8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    8d8e:	4770      	bx	lr
    8d90:	2000145c 	.word	0x2000145c
    8d94:	40006000 	.word	0x40006000

00008d98 <hal_gpio_init_in>:
    switch (pull) {
    8d98:	2901      	cmp	r1, #1
    8d9a:	d00f      	beq.n	8dbc <hal_gpio_init_in+0x24>
    8d9c:	2902      	cmp	r1, #2
    8d9e:	d10f      	bne.n	8dc0 <hal_gpio_init_in+0x28>
        conf = GPIO_PIN_CNF_PULL_Pulldown << GPIO_PIN_CNF_PULL_Pos;
    8da0:	2304      	movs	r3, #4
    port->PIN_CNF[pin_index] = conf;
    8da2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    8da6:	f500 71e0 	add.w	r1, r0, #448	; 0x1c0
    8daa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    port->DIRCLR = HAL_GPIO_MASK(pin);
    8dae:	2301      	movs	r3, #1
    8db0:	fa03 f000 	lsl.w	r0, r3, r0
    8db4:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
}
    8db8:	2000      	movs	r0, #0
    8dba:	4770      	bx	lr
    switch (pull) {
    8dbc:	230c      	movs	r3, #12
    8dbe:	e7f0      	b.n	8da2 <hal_gpio_init_in+0xa>
        conf = 0;
    8dc0:	2300      	movs	r3, #0
    8dc2:	e7ee      	b.n	8da2 <hal_gpio_init_in+0xa>

00008dc4 <hal_gpio_init_out>:
    if (val) {
    8dc4:	b199      	cbz	r1, 8dee <hal_gpio_init_out+0x2a>
        port->OUTSET = HAL_GPIO_MASK(pin);
    8dc6:	2301      	movs	r3, #1
    8dc8:	4083      	lsls	r3, r0
    8dca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    8dce:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    port->PIN_CNF[pin_index] = GPIO_PIN_CNF_DIR_Output |
    8dd2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    8dd6:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
    8dda:	2103      	movs	r1, #3
    8ddc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    port->DIRSET = HAL_GPIO_MASK(pin);
    8de0:	2301      	movs	r3, #1
    8de2:	fa03 f000 	lsl.w	r0, r3, r0
    8de6:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518
}
    8dea:	2000      	movs	r0, #0
    8dec:	4770      	bx	lr
        port->OUTCLR = HAL_GPIO_MASK(pin);
    8dee:	2301      	movs	r3, #1
    8df0:	4083      	lsls	r3, r0
    8df2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    8df6:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    8dfa:	e7ea      	b.n	8dd2 <hal_gpio_init_out+0xe>

00008dfc <hal_gpio_write>:
    if (val) {
    8dfc:	b139      	cbz	r1, 8e0e <hal_gpio_write+0x12>
        port->OUTSET = HAL_GPIO_MASK(pin);
    8dfe:	2301      	movs	r3, #1
    8e00:	fa03 f000 	lsl.w	r0, r3, r0
    8e04:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    8e08:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    8e0c:	4770      	bx	lr
        port->OUTCLR = HAL_GPIO_MASK(pin);
    8e0e:	2301      	movs	r3, #1
    8e10:	fa03 f000 	lsl.w	r0, r3, r0
    8e14:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    8e18:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
    8e1c:	4770      	bx	lr

00008e1e <hal_gpio_read>:
    return (port->DIR & HAL_GPIO_MASK(pin)) ?
    8e1e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    8e22:	f8d3 2514 	ldr.w	r2, [r3, #1300]	; 0x514
    8e26:	2301      	movs	r3, #1
    8e28:	4083      	lsls	r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
    8e2a:	421a      	tst	r2, r3
    8e2c:	d008      	beq.n	8e40 <hal_gpio_read+0x22>
    8e2e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    8e32:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    8e36:	fa23 f000 	lsr.w	r0, r3, r0
    8e3a:	f000 0001 	and.w	r0, r0, #1
    8e3e:	4770      	bx	lr
        (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
    8e40:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    8e44:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    8e48:	fa23 f000 	lsr.w	r0, r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
    8e4c:	f000 0001 	and.w	r0, r0, #1
}
    8e50:	4770      	bx	lr

00008e52 <hal_gpio_toggle>:
{
    8e52:	b538      	push	{r3, r4, r5, lr}
    8e54:	4605      	mov	r5, r0
    int pin_state = (hal_gpio_read(pin) == 0);
    8e56:	f7ff ffe2 	bl	8e1e <hal_gpio_read>
    8e5a:	fab0 f480 	clz	r4, r0
    8e5e:	0964      	lsrs	r4, r4, #5
    hal_gpio_write(pin, pin_state);
    8e60:	4621      	mov	r1, r4
    8e62:	4628      	mov	r0, r5
    8e64:	f7ff ffca 	bl	8dfc <hal_gpio_write>
}
    8e68:	4620      	mov	r0, r4
    8e6a:	bd38      	pop	{r3, r4, r5, pc}

00008e6c <hal_gpio_irq_init>:
 * @return int
 */
int
hal_gpio_irq_init(int pin, hal_gpio_irq_handler_t handler, void *arg,
                  hal_gpio_irq_trig_t trig, hal_gpio_pull_t pull)
{
    8e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8e70:	4606      	mov	r6, r0
    8e72:	4688      	mov	r8, r1
    8e74:	4617      	mov	r7, r2
    8e76:	461d      	mov	r5, r3
    uint32_t conf;
    int i;

    hal_gpio_irq_setup();
    8e78:	f7ff ff4e 	bl	8d18 <hal_gpio_irq_setup>
    i = hal_gpio_find_empty_slot();
    8e7c:	f7ff ff62 	bl	8d44 <hal_gpio_find_empty_slot>
    if (i < 0) {
    8e80:	1e04      	subs	r4, r0, #0
    8e82:	db27      	blt.n	8ed4 <hal_gpio_irq_init+0x68>
        return -1;
    }
    hal_gpio_init_in(pin, pull);
    8e84:	f89d 1018 	ldrb.w	r1, [sp, #24]
    8e88:	4630      	mov	r0, r6
    8e8a:	f7ff ff85 	bl	8d98 <hal_gpio_init_in>
    default:
        hal_gpio_irqs[i].sense_trig = HAL_GPIO_SENSE_TRIG_NONE;
        return -1;
    }
#else
    switch (trig) {
    8e8e:	2d02      	cmp	r5, #2
    8e90:	d01a      	beq.n	8ec8 <hal_gpio_irq_init+0x5c>
    8e92:	2d03      	cmp	r5, #3
    8e94:	d01b      	beq.n	8ece <hal_gpio_irq_init+0x62>
    8e96:	2d01      	cmp	r5, #1
    8e98:	d002      	beq.n	8ea0 <hal_gpio_irq_init+0x34>
    8e9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8e9e:	e011      	b.n	8ec4 <hal_gpio_irq_init+0x58>
    8ea0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
        break;
    default:
        return -1;
    }

    conf |= pin << GPIOTE_CONFIG_PSEL_Pos;
    8ea4:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
    conf |= GPIOTE_CONFIG_MODE_Event << GPIOTE_CONFIG_MODE_Pos;
    8ea8:	f040 0001 	orr.w	r0, r0, #1

    NRF_GPIOTE->CONFIG[i] = conf;
    8eac:	f504 72a2 	add.w	r2, r4, #324	; 0x144
    8eb0:	4b0a      	ldr	r3, [pc, #40]	; (8edc <hal_gpio_irq_init+0x70>)
    8eb2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
#endif

    hal_gpio_irqs[i].func = handler;
    8eb6:	480a      	ldr	r0, [pc, #40]	; (8ee0 <hal_gpio_irq_init+0x74>)
    8eb8:	f840 8034 	str.w	r8, [r0, r4, lsl #3]
    hal_gpio_irqs[i].arg = arg;
    8ebc:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
    8ec0:	6047      	str	r7, [r0, #4]

    return 0;
    8ec2:	2000      	movs	r0, #0
}
    8ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        conf = GPIOTE_CONFIG_POLARITY_HiToLo << GPIOTE_CONFIG_POLARITY_Pos;
    8ec8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    8ecc:	e7ea      	b.n	8ea4 <hal_gpio_irq_init+0x38>
        conf = GPIOTE_CONFIG_POLARITY_Toggle << GPIOTE_CONFIG_POLARITY_Pos;
    8ece:	f44f 3040 	mov.w	r0, #196608	; 0x30000
    8ed2:	e7e7      	b.n	8ea4 <hal_gpio_irq_init+0x38>
        return -1;
    8ed4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8ed8:	e7f4      	b.n	8ec4 <hal_gpio_irq_init+0x58>
    8eda:	bf00      	nop
    8edc:	40006000 	.word	0x40006000
    8ee0:	2000145c 	.word	0x2000145c

00008ee4 <hal_gpio_irq_enable>:
 *
 * @param pin
 */
void
hal_gpio_irq_enable(int pin)
{
    8ee4:	b508      	push	{r3, lr}
    NRF_GPIO_Type *nrf_gpio;
    int pin_index;
#endif
    int i;

    i = hal_gpio_find_pin(pin);
    8ee6:	f7ff ff3b 	bl	8d60 <hal_gpio_find_pin>
    if (i < 0) {
    8eea:	2800      	cmp	r0, #0
    8eec:	db0a      	blt.n	8f04 <hal_gpio_irq_enable+0x20>
        nrf_gpio->PIN_CNF[pin_index] |= GPIO_PIN_CNF_SENSE_High << GPIO_PIN_CNF_SENSE_Pos;
    }

    NRF_GPIOTE->INTENSET = GPIOTE_INTENSET_PORT_Msk;
#else
    NRF_GPIOTE->EVENTS_IN[i] = 0;
    8eee:	4a06      	ldr	r2, [pc, #24]	; (8f08 <hal_gpio_irq_enable+0x24>)
    8ef0:	f100 0340 	add.w	r3, r0, #64	; 0x40
    8ef4:	2100      	movs	r1, #0
    8ef6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    NRF_GPIOTE->INTENSET = 1 << i;
    8efa:	2301      	movs	r3, #1
    8efc:	fa03 f000 	lsl.w	r0, r3, r0
    8f00:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
#endif
}
    8f04:	bd08      	pop	{r3, pc}
    8f06:	bf00      	nop
    8f08:	40006000 	.word	0x40006000

00008f0c <hal_gpio_irq_disable>:
 *
 * @param pin
 */
void
hal_gpio_irq_disable(int pin)
{
    8f0c:	b508      	push	{r3, lr}
    int pin_index;
    bool sense_enabled = false;
#endif
    int i;

    i = hal_gpio_find_pin(pin);
    8f0e:	f7ff ff27 	bl	8d60 <hal_gpio_find_pin>
    if (i < 0) {
    8f12:	2800      	cmp	r0, #0
    8f14:	db05      	blt.n	8f22 <hal_gpio_irq_disable+0x16>

    if (!sense_enabled) {
        NRF_GPIOTE->INTENCLR = GPIOTE_INTENCLR_PORT_Msk;
    }
#else
    NRF_GPIOTE->INTENCLR = 1 << i;
    8f16:	2301      	movs	r3, #1
    8f18:	fa03 f000 	lsl.w	r0, r3, r0
    8f1c:	4b01      	ldr	r3, [pc, #4]	; (8f24 <hal_gpio_irq_disable+0x18>)
    8f1e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
#endif
}
    8f22:	bd08      	pop	{r3, pc}
    8f24:	40006000 	.word	0x40006000

00008f28 <hal_gpio_irq_release>:
{
    8f28:	b538      	push	{r3, r4, r5, lr}
    8f2a:	4605      	mov	r5, r0
    i = hal_gpio_find_pin(pin);
    8f2c:	f7ff ff18 	bl	8d60 <hal_gpio_find_pin>
    if (i < 0) {
    8f30:	1e04      	subs	r4, r0, #0
    8f32:	db12      	blt.n	8f5a <hal_gpio_irq_release+0x32>
    hal_gpio_irq_disable(pin);
    8f34:	4628      	mov	r0, r5
    8f36:	f7ff ffe9 	bl	8f0c <hal_gpio_irq_disable>
    NRF_GPIOTE->CONFIG[i] = 0;
    8f3a:	4a08      	ldr	r2, [pc, #32]	; (8f5c <hal_gpio_irq_release+0x34>)
    8f3c:	f504 71a2 	add.w	r1, r4, #324	; 0x144
    8f40:	2300      	movs	r3, #0
    8f42:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    NRF_GPIOTE->EVENTS_IN[i] = 0;
    8f46:	f104 0140 	add.w	r1, r4, #64	; 0x40
    8f4a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    hal_gpio_irqs[i].arg = NULL;
    8f4e:	4a04      	ldr	r2, [pc, #16]	; (8f60 <hal_gpio_irq_release+0x38>)
    8f50:	eb02 01c4 	add.w	r1, r2, r4, lsl #3
    8f54:	604b      	str	r3, [r1, #4]
    hal_gpio_irqs[i].func = NULL;
    8f56:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
}
    8f5a:	bd38      	pop	{r3, r4, r5, pc}
    8f5c:	40006000 	.word	0x40006000
    8f60:	2000145c 	.word	0x2000145c

00008f64 <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
    8f64:	b508      	push	{r3, lr}
    8f66:	4675      	mov	r5, lr
    8f68:	4604      	mov	r4, r0
    8f6a:	460e      	mov	r6, r1
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
    8f6c:	f001 fa12 	bl	a394 <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
    8f70:	f006 fb96 	bl	f6a0 <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
    8f74:	b18c      	cbz	r4, 8f9a <__assert_func+0x36>
    8f76:	4633      	mov	r3, r6
    8f78:	4622      	mov	r2, r4
    8f7a:	4629      	mov	r1, r5
    8f7c:	4809      	ldr	r0, [pc, #36]	; (8fa4 <__assert_func+0x40>)
    8f7e:	f006 fd75 	bl	fa6c <console_printf>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    if (hal_debugger_connected()) {
    8f82:	f7ff f91d 	bl	81c0 <hal_debugger_connected>
    8f86:	b100      	cbz	r0, 8f8a <__assert_func+0x26>
       /*
        * If debugger is attached, breakpoint before the trap.
        */
#if !MYNEWT_VAL(MCU_DEBUG_IGNORE_BKPT)
       asm("bkpt");
    8f88:	be00      	bkpt	0x0000
#endif
    }
    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
    8f8a:	4b07      	ldr	r3, [pc, #28]	; (8fa8 <__assert_func+0x44>)
    8f8c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    8f90:	605a      	str	r2, [r3, #4]
    asm("isb");
    8f92:	f3bf 8f6f 	isb	sy
    hal_system_reset();
    8f96:	f7ff f91b 	bl	81d0 <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
    8f9a:	4629      	mov	r1, r5
    8f9c:	4803      	ldr	r0, [pc, #12]	; (8fac <__assert_func+0x48>)
    8f9e:	f006 fd65 	bl	fa6c <console_printf>
    8fa2:	e7ee      	b.n	8f82 <__assert_func+0x1e>
    8fa4:	00022e40 	.word	0x00022e40
    8fa8:	e000ed00 	.word	0xe000ed00
    8fac:	00022e30 	.word	0x00022e30

00008fb0 <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
    8fb0:	b500      	push	{lr}
    8fb2:	b083      	sub	sp, #12
    8fb4:	4604      	mov	r4, r0
#endif
#if MYNEWT_VAL(OS_CRASH_RESTORE_REGS)
    uint32_t orig_sp;
#endif

    console_blocking_mode();
    8fb6:	f006 fb73 	bl	f6a0 <console_blocking_mode>
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
    8fba:	4d1b      	ldr	r5, [pc, #108]	; (9028 <os_default_irq+0x78>)
    8fbc:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
    8fbe:	6822      	ldr	r2, [r4, #0]
    8fc0:	f3c1 0108 	ubfx	r1, r1, #0, #9
    8fc4:	4819      	ldr	r0, [pc, #100]	; (902c <os_default_irq+0x7c>)
    8fc6:	f006 fd51 	bl	fa6c <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
    8fca:	6820      	ldr	r0, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
    8fcc:	6883      	ldr	r3, [r0, #8]
    8fce:	6842      	ldr	r2, [r0, #4]
    8fd0:	6801      	ldr	r1, [r0, #0]
    8fd2:	68c0      	ldr	r0, [r0, #12]
    8fd4:	9000      	str	r0, [sp, #0]
    8fd6:	4816      	ldr	r0, [pc, #88]	; (9030 <os_default_irq+0x80>)
    8fd8:	f006 fd48 	bl	fa6c <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
    8fdc:	6923      	ldr	r3, [r4, #16]
    8fde:	9300      	str	r3, [sp, #0]
    8fe0:	68e3      	ldr	r3, [r4, #12]
    8fe2:	68a2      	ldr	r2, [r4, #8]
    8fe4:	6861      	ldr	r1, [r4, #4]
    8fe6:	4813      	ldr	r0, [pc, #76]	; (9034 <os_default_irq+0x84>)
    8fe8:	f006 fd40 	bl	fa6c <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
    8fec:	6a23      	ldr	r3, [r4, #32]
    8fee:	9300      	str	r3, [sp, #0]
    8ff0:	69e3      	ldr	r3, [r4, #28]
    8ff2:	69a2      	ldr	r2, [r4, #24]
    8ff4:	6961      	ldr	r1, [r4, #20]
    8ff6:	4810      	ldr	r0, [pc, #64]	; (9038 <os_default_irq+0x88>)
    8ff8:	f006 fd38 	bl	fa6c <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
    8ffc:	6820      	ldr	r0, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
    8ffe:	6983      	ldr	r3, [r0, #24]
    9000:	6942      	ldr	r2, [r0, #20]
    9002:	6901      	ldr	r1, [r0, #16]
    9004:	69c0      	ldr	r0, [r0, #28]
    9006:	9000      	str	r0, [sp, #0]
    9008:	480c      	ldr	r0, [pc, #48]	; (903c <os_default_irq+0x8c>)
    900a:	f006 fd2f 	bl	fa6c <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
    900e:	6869      	ldr	r1, [r5, #4]
    9010:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    9012:	6aab      	ldr	r3, [r5, #40]	; 0x28
    9014:	480a      	ldr	r0, [pc, #40]	; (9040 <os_default_irq+0x90>)
    9016:	f006 fd29 	bl	fa6c <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
    901a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    901c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    901e:	4809      	ldr	r0, [pc, #36]	; (9044 <os_default_irq+0x94>)
    9020:	f006 fd24 	bl	fa6c <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
    9024:	f7ff f8d4 	bl	81d0 <hal_system_reset>
    9028:	e000ed00 	.word	0xe000ed00
    902c:	00022e58 	.word	0x00022e58
    9030:	00022e8c 	.word	0x00022e8c
    9034:	00022ec0 	.word	0x00022ec0
    9038:	00022ef4 	.word	0x00022ef4
    903c:	00022f28 	.word	0x00022f28
    9040:	00022f5c 	.word	0x00022f5c
    9044:	00022f84 	.word	0x00022f84

00009048 <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
    9048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_time_t sanity_itvl_ticks;

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

    hal_watchdog_tickle();
    904a:	f00f fdb5 	bl	18bb8 <hal_watchdog_tickle>
    sanity_last = 0;
    904e:	2600      	movs	r6, #0
    9050:	e00b      	b.n	906a <os_idle_task+0x22>
    while (1) {
        ++g_os_idle_ctr;

        now = os_time_get();
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
            os_sanity_run();
    9052:	f000 fce3 	bl	9a1c <os_sanity_run>
            /* Tickle the watchdog after successfully running sanity */
            hal_watchdog_tickle();
    9056:	f00f fdaf 	bl	18bb8 <hal_watchdog_tickle>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
            os_cputime_timer_stop(&os_wdog_monitor);
            os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
            sanity_last = now;
    905a:	4626      	mov	r6, r4
    905c:	e011      	b.n	9082 <os_idle_task+0x3a>
         * as the idle task does not schedule itself.
         */
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));

        if (iticks < MIN_IDLE_TICKS) {
            iticks = 0;
    905e:	2000      	movs	r0, #0
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
    9060:	f00e ff98 	bl	17f94 <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
    9064:	4628      	mov	r0, r5
    9066:	f001 f99b 	bl	a3a0 <os_arch_restore_sr>
        ++g_os_idle_ctr;
    906a:	4a14      	ldr	r2, [pc, #80]	; (90bc <os_idle_task+0x74>)
    906c:	6813      	ldr	r3, [r2, #0]
    906e:	3301      	adds	r3, #1
    9070:	6013      	str	r3, [r2, #0]
        now = os_time_get();
    9072:	f001 f869 	bl	a148 <os_time_get>
    9076:	4604      	mov	r4, r0
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
    9078:	f506 63f0 	add.w	r3, r6, #1920	; 0x780
    907c:	1ac3      	subs	r3, r0, r3
    907e:	2b00      	cmp	r3, #0
    9080:	dce7      	bgt.n	9052 <os_idle_task+0xa>
        OS_ENTER_CRITICAL(sr);
    9082:	f001 f987 	bl	a394 <os_arch_save_sr>
    9086:	4605      	mov	r5, r0
        now = os_time_get();
    9088:	f001 f85e 	bl	a148 <os_time_get>
    908c:	4607      	mov	r7, r0
        sticks = os_sched_wakeup_ticks(now);
    908e:	f000 fe33 	bl	9cf8 <os_sched_wakeup_ticks>
    9092:	4604      	mov	r4, r0
        cticks = os_callout_wakeup_ticks(now);
    9094:	4638      	mov	r0, r7
    9096:	f000 f989 	bl	93ac <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
    909a:	4284      	cmp	r4, r0
    909c:	bf28      	it	cs
    909e:	4604      	movcs	r4, r0
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));
    90a0:	f506 63f0 	add.w	r3, r6, #1920	; 0x780
    90a4:	1bd8      	subs	r0, r3, r7
    90a6:	42a0      	cmp	r0, r4
    90a8:	bf28      	it	cs
    90aa:	4620      	movcs	r0, r4
        if (iticks < MIN_IDLE_TICKS) {
    90ac:	280b      	cmp	r0, #11
    90ae:	d9d6      	bls.n	905e <os_idle_task+0x16>
        } else if (iticks > MAX_IDLE_TICKS) {
    90b0:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
    90b4:	d9d4      	bls.n	9060 <os_idle_task+0x18>
            iticks = MAX_IDLE_TICKS;
    90b6:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
    90ba:	e7d1      	b.n	9060 <os_idle_task+0x18>
    90bc:	200015f0 	.word	0x200015f0

000090c0 <os_main>:
    return (g_os_started);
}

static void
os_main(void *arg)
{
    90c0:	b508      	push	{r3, lr}
    90c2:	4603      	mov	r3, r0
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
    90c4:	2100      	movs	r1, #0
    90c6:	4608      	mov	r0, r1
    90c8:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
    90ca:	2300      	movs	r3, #0
    90cc:	461a      	mov	r2, r3
    90ce:	4619      	mov	r1, r3
    90d0:	4618      	mov	r0, r3
    90d2:	f7ff ff47 	bl	8f64 <__assert_func>
	...

000090d8 <os_started>:
}
    90d8:	4b01      	ldr	r3, [pc, #4]	; (90e0 <os_started+0x8>)
    90da:	6818      	ldr	r0, [r3, #0]
    90dc:	4770      	bx	lr
    90de:	bf00      	nop
    90e0:	20002648 	.word	0x20002648

000090e4 <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
    90e4:	b500      	push	{lr}
    90e6:	b085      	sub	sp, #20
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
    90e8:	2340      	movs	r3, #64	; 0x40
    90ea:	9303      	str	r3, [sp, #12]
    90ec:	4b15      	ldr	r3, [pc, #84]	; (9144 <os_init_idle_task+0x60>)
    90ee:	9302      	str	r3, [sp, #8]
    90f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    90f4:	9301      	str	r3, [sp, #4]
    90f6:	23ff      	movs	r3, #255	; 0xff
    90f8:	9300      	str	r3, [sp, #0]
    90fa:	2300      	movs	r3, #0
    90fc:	4a12      	ldr	r2, [pc, #72]	; (9148 <os_init_idle_task+0x64>)
    90fe:	4913      	ldr	r1, [pc, #76]	; (914c <os_init_idle_task+0x68>)
    9100:	4813      	ldr	r0, [pc, #76]	; (9150 <os_init_idle_task+0x6c>)
    9102:	f000 fee7 	bl	9ed4 <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
    9106:	b950      	cbnz	r0, 911e <os_init_idle_task+0x3a>

    /* Initialize sanity */
    rc = os_sanity_init();
    9108:	f000 fcbe 	bl	9a88 <os_sanity_init>
    assert(rc == 0);
    910c:	b968      	cbnz	r0, 912a <os_init_idle_task+0x46>

    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
    910e:	f247 5030 	movw	r0, #30000	; 0x7530
    9112:	f00f fd0d 	bl	18b30 <hal_watchdog_init>
    assert(rc == 0);
    9116:	b970      	cbnz	r0, 9136 <os_init_idle_task+0x52>

#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
}
    9118:	b005      	add	sp, #20
    911a:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
    911e:	2300      	movs	r3, #0
    9120:	461a      	mov	r2, r3
    9122:	4619      	mov	r1, r3
    9124:	4618      	mov	r0, r3
    9126:	f7ff ff1d 	bl	8f64 <__assert_func>
    assert(rc == 0);
    912a:	2300      	movs	r3, #0
    912c:	461a      	mov	r2, r3
    912e:	4619      	mov	r1, r3
    9130:	4618      	mov	r0, r3
    9132:	f7ff ff17 	bl	8f64 <__assert_func>
    assert(rc == 0);
    9136:	2300      	movs	r3, #0
    9138:	461a      	mov	r2, r3
    913a:	4619      	mov	r1, r3
    913c:	4618      	mov	r0, r3
    913e:	f7ff ff11 	bl	8f64 <__assert_func>
    9142:	bf00      	nop
    9144:	200014f0 	.word	0x200014f0
    9148:	00009049 	.word	0x00009049
    914c:	00022fa0 	.word	0x00022fa0
    9150:	200014a0 	.word	0x200014a0

00009154 <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
    9154:	b510      	push	{r4, lr}
    9156:	b084      	sub	sp, #16
    9158:	4604      	mov	r4, r0
    os_error_t err;

#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    915a:	2248      	movs	r2, #72	; 0x48
    915c:	2100      	movs	r1, #0
    915e:	4828      	ldr	r0, [pc, #160]	; (9200 <os_init+0xac>)
    9160:	f004 fcbb 	bl	dada <memset>
    SEGGER_RTT_Init();
    9164:	f00a fdc6 	bl	13cf4 <SEGGER_RTT_Init>
#endif

    TAILQ_INIT(&g_callout_list);
    9168:	4b26      	ldr	r3, [pc, #152]	; (9204 <os_init+0xb0>)
    916a:	2200      	movs	r2, #0
    916c:	601a      	str	r2, [r3, #0]
    916e:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&g_os_task_list);
    9170:	4b25      	ldr	r3, [pc, #148]	; (9208 <os_init+0xb4>)
    9172:	601a      	str	r2, [r3, #0]
    9174:	605b      	str	r3, [r3, #4]
    os_eventq_init(os_eventq_dflt_get());
    9176:	f000 fad7 	bl	9728 <os_eventq_dflt_get>
    917a:	f000 fa19 	bl	95b0 <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
    917e:	f000 f9ff 	bl	9580 <os_dev_reset>

    err = os_arch_os_init();
    9182:	f001 f941 	bl	a408 <os_arch_os_init>
    assert(err == OS_OK);
    9186:	bb18      	cbnz	r0, 91d0 <os_init+0x7c>

    if (main_fn) {
    9188:	b194      	cbz	r4, 91b0 <os_init+0x5c>
        err = os_task_init(&g_os_main_task, "main", os_main, main_fn,
    918a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    918e:	9303      	str	r3, [sp, #12]
    9190:	4b1e      	ldr	r3, [pc, #120]	; (920c <os_init+0xb8>)
    9192:	9302      	str	r3, [sp, #8]
    9194:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9198:	9301      	str	r3, [sp, #4]
    919a:	237f      	movs	r3, #127	; 0x7f
    919c:	9300      	str	r3, [sp, #0]
    919e:	4623      	mov	r3, r4
    91a0:	4a1b      	ldr	r2, [pc, #108]	; (9210 <os_init+0xbc>)
    91a2:	491c      	ldr	r1, [pc, #112]	; (9214 <os_init+0xc0>)
    91a4:	481c      	ldr	r0, [pc, #112]	; (9218 <os_init+0xc4>)
    91a6:	f000 fe95 	bl	9ed4 <os_task_init>
                   OS_MAIN_TASK_PRIO,
                   (OS_MAIN_TASK_TIMER_TICKS == 0) ? OS_WAIT_FOREVER : OS_MAIN_TASK_TIMER_TICKS,
                   g_os_main_stack, OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
    91aa:	f010 0fff 	tst.w	r0, #255	; 0xff
    91ae:	d115      	bne.n	91dc <os_init+0x88>
    }

    /* Call bsp related OS initializations */
    hal_bsp_init();
    91b0:	f00a fc0e 	bl	139d0 <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
    91b4:	2001      	movs	r0, #1
    91b6:	f000 f9bb 	bl	9530 <os_dev_initialize_all>
    assert(err == OS_OK);
    91ba:	f010 0fff 	tst.w	r0, #255	; 0xff
    91be:	d113      	bne.n	91e8 <os_init+0x94>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
    91c0:	2002      	movs	r0, #2
    91c2:	f000 f9b5 	bl	9530 <os_dev_initialize_all>
    assert(err == OS_OK);
    91c6:	f010 0fff 	tst.w	r0, #255	; 0xff
    91ca:	d113      	bne.n	91f4 <os_init+0xa0>
}
    91cc:	b004      	add	sp, #16
    91ce:	bd10      	pop	{r4, pc}
    assert(err == OS_OK);
    91d0:	2300      	movs	r3, #0
    91d2:	461a      	mov	r2, r3
    91d4:	4619      	mov	r1, r3
    91d6:	4618      	mov	r0, r3
    91d8:	f7ff fec4 	bl	8f64 <__assert_func>
        assert(err == 0);
    91dc:	2300      	movs	r3, #0
    91de:	461a      	mov	r2, r3
    91e0:	4619      	mov	r1, r3
    91e2:	4618      	mov	r0, r3
    91e4:	f7ff febe 	bl	8f64 <__assert_func>
    assert(err == OS_OK);
    91e8:	2300      	movs	r3, #0
    91ea:	461a      	mov	r2, r3
    91ec:	4619      	mov	r1, r3
    91ee:	4618      	mov	r0, r3
    91f0:	f7ff feb8 	bl	8f64 <__assert_func>
    assert(err == OS_OK);
    91f4:	2300      	movs	r3, #0
    91f6:	461a      	mov	r2, r3
    91f8:	4619      	mov	r1, r3
    91fa:	4618      	mov	r0, r3
    91fc:	f7ff feb2 	bl	8f64 <__assert_func>
    9200:	200000d8 	.word	0x200000d8
    9204:	2000264c 	.word	0x2000264c
    9208:	20003464 	.word	0x20003464
    920c:	200015f8 	.word	0x200015f8
    9210:	000090c1 	.word	0x000090c1
    9214:	00022fa8 	.word	0x00022fa8
    9218:	200025f8 	.word	0x200025f8

0000921c <os_start>:

void
os_start(void)
{
    921c:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
    921e:	f00f fcc3 	bl	18ba8 <hal_watchdog_enable>

    err = os_arch_os_start();
    9222:	f001 f959 	bl	a4d8 <os_arch_os_start>
    assert(err == OS_OK);
    9226:	b900      	cbnz	r0, 922a <os_start+0xe>
#else
    assert(0);
#endif
}
    9228:	bd08      	pop	{r3, pc}
    assert(err == OS_OK);
    922a:	2300      	movs	r3, #0
    922c:	461a      	mov	r2, r3
    922e:	4619      	mov	r1, r3
    9230:	4618      	mov	r0, r3
    9232:	f7ff fe97 	bl	8f64 <__assert_func>

00009236 <os_reboot>:

void
os_reboot(int reason)
{
    9236:	b508      	push	{r3, lr}
    sysdown(reason);
    9238:	f008 f8fa 	bl	11430 <sysdown>
}
    923c:	bd08      	pop	{r3, pc}

0000923e <os_system_reset>:

void
os_system_reset(void)
{
    923e:	b508      	push	{r3, lr}
    /* Tickle watchdog just before re-entering bootloader.  Depending on what
     * the system has been doing lately, the watchdog timer might be close to
     * firing.
     */
    hal_watchdog_tickle();
    9240:	f00f fcba 	bl	18bb8 <hal_watchdog_tickle>
    hal_system_reset();
    9244:	f7fe ffc4 	bl	81d0 <hal_system_reset>

00009248 <os_pkg_init>:
}

void
os_pkg_init(void)
{
    9248:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
    924a:	4b0c      	ldr	r3, [pc, #48]	; (927c <os_pkg_init+0x34>)
    924c:	781b      	ldrb	r3, [r3, #0]
    924e:	b153      	cbz	r3, 9266 <os_pkg_init+0x1e>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
    9250:	2003      	movs	r0, #3
    9252:	f000 f96d 	bl	9530 <os_dev_initialize_all>
    assert(err == OS_OK);
    9256:	f010 0fff 	tst.w	r0, #255	; 0xff
    925a:	d109      	bne.n	9270 <os_pkg_init+0x28>

    os_mempool_module_init();
    925c:	f000 fb06 	bl	986c <os_mempool_module_init>
    os_msys_init();
    9260:	f000 fb8c 	bl	997c <os_msys_init>
}
    9264:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
    9266:	461a      	mov	r2, r3
    9268:	4619      	mov	r1, r3
    926a:	4618      	mov	r0, r3
    926c:	f7ff fe7a 	bl	8f64 <__assert_func>
    assert(err == OS_OK);
    9270:	2300      	movs	r3, #0
    9272:	461a      	mov	r2, r3
    9274:	4619      	mov	r1, r3
    9276:	4618      	mov	r0, r3
    9278:	f7ff fe74 	bl	8f64 <__assert_func>
    927c:	20004538 	.word	0x20004538

00009280 <os_callout_init>:

struct os_callout_list g_callout_list;

void os_callout_init(struct os_callout *c, struct os_eventq *evq,
                     os_event_fn *ev_cb, void *ev_arg)
{
    9280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9282:	4604      	mov	r4, r0
    9284:	460d      	mov	r5, r1
    9286:	4617      	mov	r7, r2
    9288:	461e      	mov	r6, r3
    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_INIT, (uint32_t)c, (uint32_t)evq);

    memset(c, 0, sizeof(*c));
    928a:	2220      	movs	r2, #32
    928c:	2100      	movs	r1, #0
    928e:	f004 fc24 	bl	dada <memset>
    c->c_ev.ev_cb = ev_cb;
    9292:	6067      	str	r7, [r4, #4]
    c->c_ev.ev_arg = ev_arg;
    9294:	60a6      	str	r6, [r4, #8]
    c->c_evq = evq;
    9296:	6125      	str	r5, [r4, #16]

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_INIT);
}
    9298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000929c <os_callout_stop>:

void
os_callout_stop(struct os_callout *c)
{
    929c:	b538      	push	{r3, r4, r5, lr}
    929e:	4604      	mov	r4, r0
    os_sr_t sr;

    os_trace_api_u32(OS_TRACE_ID_CALLOUT_STOP, (uint32_t)c);

    OS_ENTER_CRITICAL(sr);
    92a0:	f001 f878 	bl	a394 <os_arch_save_sr>
    92a4:	4605      	mov	r5, r0
 * @return 1 if queued, 0 if not queued.
 */
static inline int
os_callout_queued(struct os_callout *c)
{
    return c->c_next.tqe_prev != NULL;
    92a6:	69e3      	ldr	r3, [r4, #28]

    if (os_callout_queued(c)) {
    92a8:	b13b      	cbz	r3, 92ba <os_callout_stop+0x1e>
        TAILQ_REMOVE(&g_callout_list, c, c_next);
    92aa:	69a2      	ldr	r2, [r4, #24]
    92ac:	b172      	cbz	r2, 92cc <os_callout_stop+0x30>
    92ae:	61d3      	str	r3, [r2, #28]
    92b0:	69e3      	ldr	r3, [r4, #28]
    92b2:	69a2      	ldr	r2, [r4, #24]
    92b4:	601a      	str	r2, [r3, #0]
        c->c_next.tqe_prev = NULL;
    92b6:	2300      	movs	r3, #0
    92b8:	61e3      	str	r3, [r4, #28]
    }

    if (c->c_evq) {
    92ba:	6920      	ldr	r0, [r4, #16]
    92bc:	b110      	cbz	r0, 92c4 <os_callout_stop+0x28>
        os_eventq_remove(c->c_evq, &c->c_ev);
    92be:	4621      	mov	r1, r4
    92c0:	f000 fa10 	bl	96e4 <os_eventq_remove>
    }

    OS_EXIT_CRITICAL(sr);
    92c4:	4628      	mov	r0, r5
    92c6:	f001 f86b 	bl	a3a0 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_STOP);
}
    92ca:	bd38      	pop	{r3, r4, r5, pc}
        TAILQ_REMOVE(&g_callout_list, c, c_next);
    92cc:	4a01      	ldr	r2, [pc, #4]	; (92d4 <os_callout_stop+0x38>)
    92ce:	6053      	str	r3, [r2, #4]
    92d0:	e7ee      	b.n	92b0 <os_callout_stop+0x14>
    92d2:	bf00      	nop
    92d4:	2000264c 	.word	0x2000264c

000092d8 <os_callout_reset>:

int
os_callout_reset(struct os_callout *c, os_time_t ticks)
{
    92d8:	b570      	push	{r4, r5, r6, lr}
    struct os_callout *entry;
    os_sr_t sr;
    int ret;

    /* Ensure this callout has been initialized. */
    assert(c->c_evq != NULL);
    92da:	6903      	ldr	r3, [r0, #16]
    92dc:	b193      	cbz	r3, 9304 <os_callout_reset+0x2c>
    92de:	4604      	mov	r4, r0
    92e0:	460e      	mov	r6, r1

    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)c, (uint32_t)ticks);

    if (ticks > INT32_MAX) {
    92e2:	2900      	cmp	r1, #0
    92e4:	db2f      	blt.n	9346 <os_callout_reset+0x6e>
        ret = OS_EINVAL;
        goto err;
    }

    OS_ENTER_CRITICAL(sr);
    92e6:	f001 f855 	bl	a394 <os_arch_save_sr>
    92ea:	4605      	mov	r5, r0

    os_callout_stop(c);
    92ec:	4620      	mov	r0, r4
    92ee:	f7ff ffd5 	bl	929c <os_callout_stop>

    if (ticks == 0) {
    92f2:	b906      	cbnz	r6, 92f6 <os_callout_reset+0x1e>
        ticks = 1;
    92f4:	2601      	movs	r6, #1
    }

    c->c_ticks = os_time_get() + ticks;
    92f6:	f000 ff27 	bl	a148 <os_time_get>
    92fa:	4430      	add	r0, r6
    92fc:	6160      	str	r0, [r4, #20]

    entry = NULL;
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
    92fe:	4b13      	ldr	r3, [pc, #76]	; (934c <os_callout_reset+0x74>)
    9300:	681b      	ldr	r3, [r3, #0]
    9302:	e005      	b.n	9310 <os_callout_reset+0x38>
    assert(c->c_evq != NULL);
    9304:	461a      	mov	r2, r3
    9306:	4619      	mov	r1, r3
    9308:	4618      	mov	r0, r3
    930a:	f7ff fe2b 	bl	8f64 <__assert_func>
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
    930e:	699b      	ldr	r3, [r3, #24]
    9310:	b11b      	cbz	r3, 931a <os_callout_reset+0x42>
        if (OS_TIME_TICK_LT(c->c_ticks, entry->c_ticks)) {
    9312:	695a      	ldr	r2, [r3, #20]
    9314:	1a82      	subs	r2, r0, r2
    9316:	2a00      	cmp	r2, #0
    9318:	daf9      	bge.n	930e <os_callout_reset+0x36>
            break;
        }
    }

    if (entry) {
    931a:	b15b      	cbz	r3, 9334 <os_callout_reset+0x5c>
        TAILQ_INSERT_BEFORE(entry, c, c_next);
    931c:	69da      	ldr	r2, [r3, #28]
    931e:	61e2      	str	r2, [r4, #28]
    9320:	61a3      	str	r3, [r4, #24]
    9322:	69da      	ldr	r2, [r3, #28]
    9324:	6014      	str	r4, [r2, #0]
    9326:	3418      	adds	r4, #24
    9328:	61dc      	str	r4, [r3, #28]
    } else {
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
    }

    OS_EXIT_CRITICAL(sr);
    932a:	4628      	mov	r0, r5
    932c:	f001 f838 	bl	a3a0 <os_arch_restore_sr>

    ret = OS_OK;
    9330:	2000      	movs	r0, #0

err:
    os_trace_api_ret_u32(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)ret);
    return ret;
}
    9332:	bd70      	pop	{r4, r5, r6, pc}
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
    9334:	2300      	movs	r3, #0
    9336:	61a3      	str	r3, [r4, #24]
    9338:	4b04      	ldr	r3, [pc, #16]	; (934c <os_callout_reset+0x74>)
    933a:	685a      	ldr	r2, [r3, #4]
    933c:	61e2      	str	r2, [r4, #28]
    933e:	6014      	str	r4, [r2, #0]
    9340:	3418      	adds	r4, #24
    9342:	605c      	str	r4, [r3, #4]
    9344:	e7f1      	b.n	932a <os_callout_reset+0x52>
        ret = OS_EINVAL;
    9346:	2002      	movs	r0, #2
    return ret;
    9348:	e7f3      	b.n	9332 <os_callout_reset+0x5a>
    934a:	bf00      	nop
    934c:	2000264c 	.word	0x2000264c

00009350 <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
    9350:	b538      	push	{r3, r4, r5, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
    9352:	f000 fef9 	bl	a148 <os_time_get>
    9356:	4605      	mov	r5, r0
    9358:	e00f      	b.n	937a <os_callout_tick+0x2a>
    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
        if (c) {
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
                TAILQ_REMOVE(&g_callout_list, c, c_next);
    935a:	69e2      	ldr	r2, [r4, #28]
    935c:	4b12      	ldr	r3, [pc, #72]	; (93a8 <os_callout_tick+0x58>)
    935e:	605a      	str	r2, [r3, #4]
    9360:	69e3      	ldr	r3, [r4, #28]
    9362:	69a2      	ldr	r2, [r4, #24]
    9364:	601a      	str	r2, [r3, #0]
                c->c_next.tqe_prev = NULL;
    9366:	2300      	movs	r3, #0
    9368:	61e3      	str	r3, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
    936a:	f001 f819 	bl	a3a0 <os_arch_restore_sr>

        if (c) {
    936e:	b1d4      	cbz	r4, 93a6 <os_callout_tick+0x56>
            if (c->c_evq) {
    9370:	6920      	ldr	r0, [r4, #16]
    9372:	b1a0      	cbz	r0, 939e <os_callout_tick+0x4e>
                os_eventq_put(c->c_evq, &c->c_ev);
    9374:	4621      	mov	r1, r4
    9376:	f000 f929 	bl	95cc <os_eventq_put>
        OS_ENTER_CRITICAL(sr);
    937a:	f001 f80b 	bl	a394 <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
    937e:	4b0a      	ldr	r3, [pc, #40]	; (93a8 <os_callout_tick+0x58>)
    9380:	681c      	ldr	r4, [r3, #0]
        if (c) {
    9382:	2c00      	cmp	r4, #0
    9384:	d0f1      	beq.n	936a <os_callout_tick+0x1a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
    9386:	6963      	ldr	r3, [r4, #20]
    9388:	1aeb      	subs	r3, r5, r3
    938a:	2b00      	cmp	r3, #0
    938c:	db05      	blt.n	939a <os_callout_tick+0x4a>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
    938e:	69a3      	ldr	r3, [r4, #24]
    9390:	2b00      	cmp	r3, #0
    9392:	d0e2      	beq.n	935a <os_callout_tick+0xa>
    9394:	69e2      	ldr	r2, [r4, #28]
    9396:	61da      	str	r2, [r3, #28]
    9398:	e7e2      	b.n	9360 <os_callout_tick+0x10>
                c = NULL;
    939a:	2400      	movs	r4, #0
    939c:	e7e5      	b.n	936a <os_callout_tick+0x1a>
            } else {
                c->c_ev.ev_cb(&c->c_ev);
    939e:	6863      	ldr	r3, [r4, #4]
    93a0:	4620      	mov	r0, r4
    93a2:	4798      	blx	r3
    93a4:	e7e9      	b.n	937a <os_callout_tick+0x2a>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
    93a6:	bd38      	pop	{r3, r4, r5, pc}
    93a8:	2000264c 	.word	0x2000264c

000093ac <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
    93ac:	b510      	push	{r4, lr}
    93ae:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
    93b0:	f000 fff9 	bl	a3a6 <os_arch_in_critical>
    93b4:	b130      	cbz	r0, 93c4 <os_callout_wakeup_ticks+0x18>

    c = TAILQ_FIRST(&g_callout_list);
    93b6:	4b09      	ldr	r3, [pc, #36]	; (93dc <os_callout_wakeup_ticks+0x30>)
    93b8:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
    93ba:	b15b      	cbz	r3, 93d4 <os_callout_wakeup_ticks+0x28>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
    93bc:	6958      	ldr	r0, [r3, #20]
    93be:	1b00      	subs	r0, r0, r4
    93c0:	d406      	bmi.n	93d0 <os_callout_wakeup_ticks+0x24>
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
    93c2:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
    93c4:	2300      	movs	r3, #0
    93c6:	461a      	mov	r2, r3
    93c8:	4619      	mov	r1, r3
    93ca:	4618      	mov	r0, r3
    93cc:	f7ff fdca 	bl	8f64 <__assert_func>
            rt = 0;     /* callout time is in the past */
    93d0:	2000      	movs	r0, #0
    93d2:	e7f6      	b.n	93c2 <os_callout_wakeup_ticks+0x16>
        rt = OS_TIMEOUT_NEVER;
    93d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
    93d8:	e7f3      	b.n	93c2 <os_callout_wakeup_ticks+0x16>
    93da:	bf00      	nop
    93dc:	2000264c 	.word	0x2000264c

000093e0 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
    93e0:	b508      	push	{r3, lr}
    93e2:	4601      	mov	r1, r0

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
    93e4:	2000      	movs	r0, #0
    93e6:	f00f fa67 	bl	188b8 <hal_timer_config>
    return rc;
}
    93ea:	bd08      	pop	{r3, pc}

000093ec <os_cputime_timer_init>:
    os_cputime_delay_ticks(ticks);
}

void
os_cputime_timer_init(struct hal_timer *timer, hal_timer_cb fp, void *arg)
{
    93ec:	b510      	push	{r4, lr}
    assert(timer != NULL);
    93ee:	b140      	cbz	r0, 9402 <os_cputime_timer_init+0x16>
    93f0:	460c      	mov	r4, r1
    93f2:	4613      	mov	r3, r2
    93f4:	4601      	mov	r1, r0
    assert(fp != NULL);
    93f6:	b154      	cbz	r4, 940e <os_cputime_timer_init+0x22>

    hal_timer_set_cb(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), timer, fp, arg);
    93f8:	4622      	mov	r2, r4
    93fa:	2000      	movs	r0, #0
    93fc:	f00f faf2 	bl	189e4 <hal_timer_set_cb>
}
    9400:	bd10      	pop	{r4, pc}
    assert(timer != NULL);
    9402:	2300      	movs	r3, #0
    9404:	461a      	mov	r2, r3
    9406:	4619      	mov	r1, r3
    9408:	4618      	mov	r0, r3
    940a:	f7ff fdab 	bl	8f64 <__assert_func>
    assert(fp != NULL);
    940e:	2300      	movs	r3, #0
    9410:	461a      	mov	r2, r3
    9412:	4619      	mov	r1, r3
    9414:	4618      	mov	r0, r3
    9416:	f7ff fda5 	bl	8f64 <__assert_func>

0000941a <os_cputime_get32>:
    hal_timer_stop(timer);
}

uint32_t
os_cputime_get32(void)
{
    941a:	b508      	push	{r3, lr}
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
    941c:	2000      	movs	r0, #0
    941e:	f00f fac9 	bl	189b4 <hal_timer_read>
    return cpu_time;
}
    9422:	bd08      	pop	{r3, pc}

00009424 <os_cputime_timer_relative>:
{
    9424:	b538      	push	{r3, r4, r5, lr}
    assert(timer != NULL);
    9426:	b140      	cbz	r0, 943a <os_cputime_timer_relative+0x16>
    9428:	460c      	mov	r4, r1
    942a:	4605      	mov	r5, r0
    cputime = os_cputime_get32() + os_cputime_usecs_to_ticks(usecs);
    942c:	f7ff fff5 	bl	941a <os_cputime_get32>
    rc = hal_timer_start_at(timer, cputime);
    9430:	1901      	adds	r1, r0, r4
    9432:	4628      	mov	r0, r5
    9434:	f00f faec 	bl	18a10 <hal_timer_start_at>
}
    9438:	bd38      	pop	{r3, r4, r5, pc}
    assert(timer != NULL);
    943a:	2300      	movs	r3, #0
    943c:	461a      	mov	r2, r3
    943e:	4619      	mov	r1, r3
    9440:	4618      	mov	r0, r3
    9442:	f7ff fd8f 	bl	8f64 <__assert_func>
	...

00009448 <os_dev_add>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_add(struct os_dev *dev)
{
    9448:	b430      	push	{r4, r5}
    struct os_dev *cur_dev;
    struct os_dev *prev_dev;

    /* If no devices present, insert into head */
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
    944a:	4b15      	ldr	r3, [pc, #84]	; (94a0 <os_dev_add+0x58>)
    944c:	681d      	ldr	r5, [r3, #0]
    944e:	b115      	cbz	r5, 9456 <os_dev_add+0xe>
    /* Add devices to the list, sorted first by stage, then by
     * priority.  Keep sorted in this order for initialization
     * stage.
     */
    prev_dev = NULL;
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
    9450:	462b      	mov	r3, r5
    prev_dev = NULL;
    9452:	2400      	movs	r4, #0
    9454:	e008      	b.n	9468 <os_dev_add+0x20>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    9456:	4603      	mov	r3, r0
    9458:	f843 5f20 	str.w	r5, [r3, #32]!
    945c:	4a10      	ldr	r2, [pc, #64]	; (94a0 <os_dev_add+0x58>)
    945e:	6053      	str	r3, [r2, #4]
    9460:	6010      	str	r0, [r2, #0]
        return (0);
    9462:	e010      	b.n	9486 <os_dev_add+0x3e>
        if (dev->od_stage < cur_dev->od_stage ||
            ((dev->od_stage == cur_dev->od_stage) &&
             (dev->od_priority < cur_dev->od_priority))) {
            break;
        }
        prev_dev = cur_dev;
    9464:	461c      	mov	r4, r3
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
    9466:	6a1b      	ldr	r3, [r3, #32]
    9468:	b143      	cbz	r3, 947c <os_dev_add+0x34>
        if (dev->od_stage < cur_dev->od_stage ||
    946a:	7e01      	ldrb	r1, [r0, #24]
    946c:	7e1a      	ldrb	r2, [r3, #24]
    946e:	4291      	cmp	r1, r2
    9470:	d304      	bcc.n	947c <os_dev_add+0x34>
    9472:	d1f7      	bne.n	9464 <os_dev_add+0x1c>
             (dev->od_priority < cur_dev->od_priority))) {
    9474:	7e41      	ldrb	r1, [r0, #25]
    9476:	7e5a      	ldrb	r2, [r3, #25]
            ((dev->od_stage == cur_dev->od_stage) &&
    9478:	4291      	cmp	r1, r2
    947a:	d2f3      	bcs.n	9464 <os_dev_add+0x1c>
    }

    if (prev_dev) {
    947c:	b15c      	cbz	r4, 9496 <os_dev_add+0x4e>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
    947e:	6a23      	ldr	r3, [r4, #32]
    9480:	6203      	str	r3, [r0, #32]
    9482:	b11b      	cbz	r3, 948c <os_dev_add+0x44>
    9484:	6220      	str	r0, [r4, #32]
    } else {
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    }

    return (0);
}
    9486:	2000      	movs	r0, #0
    9488:	bc30      	pop	{r4, r5}
    948a:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
    948c:	f100 0320 	add.w	r3, r0, #32
    9490:	4a03      	ldr	r2, [pc, #12]	; (94a0 <os_dev_add+0x58>)
    9492:	6053      	str	r3, [r2, #4]
    9494:	e7f6      	b.n	9484 <os_dev_add+0x3c>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    9496:	6205      	str	r5, [r0, #32]
    9498:	4b01      	ldr	r3, [pc, #4]	; (94a0 <os_dev_add+0x58>)
    949a:	6018      	str	r0, [r3, #0]
    949c:	e7f3      	b.n	9486 <os_dev_add+0x3e>
    949e:	bf00      	nop
    94a0:	20002654 	.word	0x20002654

000094a4 <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
    94a4:	b510      	push	{r4, lr}
    94a6:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
    94a8:	6903      	ldr	r3, [r0, #16]
    94aa:	6941      	ldr	r1, [r0, #20]
    94ac:	4798      	blx	r3
    if (rc != 0) {
    94ae:	b128      	cbz	r0, 94bc <os_dev_initialize+0x18>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
    94b0:	7ee3      	ldrb	r3, [r4, #27]
    94b2:	f013 0f08 	tst.w	r3, #8
    94b6:	d105      	bne.n	94c4 <os_dev_initialize+0x20>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
    94b8:	2000      	movs	r0, #0
    94ba:	e003      	b.n	94c4 <os_dev_initialize+0x20>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    94bc:	7ee3      	ldrb	r3, [r4, #27]
    94be:	f043 0301 	orr.w	r3, r3, #1
    94c2:	76e3      	strb	r3, [r4, #27]
err:
    return rc;
}
    94c4:	bd10      	pop	{r4, pc}

000094c6 <os_dev_init>:
{
    94c6:	4684      	mov	ip, r0
    dev->od_name = name;
    94c8:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
    94ca:	7602      	strb	r2, [r0, #24]
    dev->od_priority = priority;
    94cc:	7643      	strb	r3, [r0, #25]
    dev->od_flags = 0;
    94ce:	2000      	movs	r0, #0
    94d0:	f88c 001b 	strb.w	r0, [ip, #27]
    dev->od_open_ref = 0;
    94d4:	f88c 001a 	strb.w	r0, [ip, #26]
    dev->od_init = od_init;
    94d8:	9b00      	ldr	r3, [sp, #0]
    94da:	f8cc 3010 	str.w	r3, [ip, #16]
    dev->od_init_arg = arg;
    94de:	9b01      	ldr	r3, [sp, #4]
    94e0:	f8cc 3014 	str.w	r3, [ip, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
    94e4:	f8cc 0000 	str.w	r0, [ip]
    94e8:	f8cc 0004 	str.w	r0, [ip, #4]
    94ec:	f8cc 0008 	str.w	r0, [ip, #8]
    94f0:	f8cc 000c 	str.w	r0, [ip, #12]
}
    94f4:	4770      	bx	lr
	...

000094f8 <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
    94f8:	b530      	push	{r4, r5, lr}
    94fa:	b083      	sub	sp, #12
    94fc:	4604      	mov	r4, r0
    int rc;

    rc = os_dev_init(dev, name, stage, priority, od_init, arg);
    94fe:	9d07      	ldr	r5, [sp, #28]
    9500:	9501      	str	r5, [sp, #4]
    9502:	9d06      	ldr	r5, [sp, #24]
    9504:	9500      	str	r5, [sp, #0]
    9506:	f7ff ffde 	bl	94c6 <os_dev_init>
    if (rc != 0) {
    950a:	b108      	cbz	r0, 9510 <os_dev_create+0x18>
    if (g_os_started) {
        rc = os_dev_initialize(dev);
    }
err:
    return (rc);
}
    950c:	b003      	add	sp, #12
    950e:	bd30      	pop	{r4, r5, pc}
    rc = os_dev_add(dev);
    9510:	4620      	mov	r0, r4
    9512:	f7ff ff99 	bl	9448 <os_dev_add>
    if (rc != 0) {
    9516:	2800      	cmp	r0, #0
    9518:	d1f8      	bne.n	950c <os_dev_create+0x14>
    if (g_os_started) {
    951a:	4b04      	ldr	r3, [pc, #16]	; (952c <os_dev_create+0x34>)
    951c:	681b      	ldr	r3, [r3, #0]
    951e:	2b00      	cmp	r3, #0
    9520:	d0f4      	beq.n	950c <os_dev_create+0x14>
        rc = os_dev_initialize(dev);
    9522:	4620      	mov	r0, r4
    9524:	f7ff ffbe 	bl	94a4 <os_dev_initialize>
    return (rc);
    9528:	e7f0      	b.n	950c <os_dev_create+0x14>
    952a:	bf00      	nop
    952c:	20002648 	.word	0x20002648

00009530 <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
    9530:	b538      	push	{r3, r4, r5, lr}
    9532:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    9534:	4b08      	ldr	r3, [pc, #32]	; (9558 <os_dev_initialize_all+0x28>)
    9536:	681c      	ldr	r4, [r3, #0]
    int rc = 0;
    9538:	2200      	movs	r2, #0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    953a:	e000      	b.n	953e <os_dev_initialize_all+0xe>
    953c:	6a24      	ldr	r4, [r4, #32]
    953e:	b144      	cbz	r4, 9552 <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
    9540:	7e23      	ldrb	r3, [r4, #24]
    9542:	42ab      	cmp	r3, r5
    9544:	d1fa      	bne.n	953c <os_dev_initialize_all+0xc>
            rc = os_dev_initialize(dev);
    9546:	4620      	mov	r0, r4
    9548:	f7ff ffac 	bl	94a4 <os_dev_initialize>
            if (rc) {
    954c:	4602      	mov	r2, r0
    954e:	2800      	cmp	r0, #0
    9550:	d0f4      	beq.n	953c <os_dev_initialize_all+0xc>
            }
        }
    }

    return (rc);
}
    9552:	4610      	mov	r0, r2
    9554:	bd38      	pop	{r3, r4, r5, pc}
    9556:	bf00      	nop
    9558:	20002654 	.word	0x20002654

0000955c <os_dev_lookup>:
    return (rc);
}

struct os_dev *
os_dev_lookup(const char *name)
{
    955c:	b538      	push	{r3, r4, r5, lr}
    955e:	4605      	mov	r5, r0
    struct os_dev *dev;

    dev = NULL;
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    9560:	4b06      	ldr	r3, [pc, #24]	; (957c <os_dev_lookup+0x20>)
    9562:	681c      	ldr	r4, [r3, #0]
    9564:	e000      	b.n	9568 <os_dev_lookup+0xc>
    9566:	6a24      	ldr	r4, [r4, #32]
    9568:	b12c      	cbz	r4, 9576 <os_dev_lookup+0x1a>
        if (!strcmp(dev->od_name, name)) {
    956a:	4629      	mov	r1, r5
    956c:	69e0      	ldr	r0, [r4, #28]
    956e:	f004 fadf 	bl	db30 <strcmp>
    9572:	2800      	cmp	r0, #0
    9574:	d1f7      	bne.n	9566 <os_dev_lookup+0xa>
            break;
        }
    }
    return (dev);
}
    9576:	4620      	mov	r0, r4
    9578:	bd38      	pop	{r3, r4, r5, pc}
    957a:	bf00      	nop
    957c:	20002654 	.word	0x20002654

00009580 <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
    9580:	4b02      	ldr	r3, [pc, #8]	; (958c <os_dev_reset+0xc>)
    9582:	2200      	movs	r2, #0
    9584:	601a      	str	r2, [r3, #0]
    9586:	605b      	str	r3, [r3, #4]
}
    9588:	4770      	bx	lr
    958a:	bf00      	nop
    958c:	20002654 	.word	0x20002654

00009590 <os_dev_walk>:

void
os_dev_walk(int (*walk_func)(struct os_dev *, void *), void *arg)
{
    9590:	b570      	push	{r4, r5, r6, lr}
    9592:	4606      	mov	r6, r0
    9594:	460d      	mov	r5, r1
    struct os_dev *dev;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    9596:	4b05      	ldr	r3, [pc, #20]	; (95ac <os_dev_walk+0x1c>)
    9598:	681c      	ldr	r4, [r3, #0]
    959a:	e000      	b.n	959e <os_dev_walk+0xe>
    959c:	6a24      	ldr	r4, [r4, #32]
    959e:	b124      	cbz	r4, 95aa <os_dev_walk+0x1a>
        if (walk_func(dev, arg)) {
    95a0:	4629      	mov	r1, r5
    95a2:	4620      	mov	r0, r4
    95a4:	47b0      	blx	r6
    95a6:	2800      	cmp	r0, #0
    95a8:	d0f8      	beq.n	959c <os_dev_walk+0xc>
            break;
        }
    }
}
    95aa:	bd70      	pop	{r4, r5, r6, pc}
    95ac:	20002654 	.word	0x20002654

000095b0 <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
    95b0:	2300      	movs	r3, #0
    95b2:	6003      	str	r3, [r0, #0]
    95b4:	6043      	str	r3, [r0, #4]
    95b6:	6083      	str	r3, [r0, #8]
    95b8:	60c3      	str	r3, [r0, #12]
    STAILQ_INIT(&evq->evq_list);
    95ba:	f100 0308 	add.w	r3, r0, #8
    95be:	60c3      	str	r3, [r0, #12]
}
    95c0:	4770      	bx	lr

000095c2 <os_eventq_inited>:

int
os_eventq_inited(const struct os_eventq *evq)
{
    return evq->evq_list.stqh_last != NULL;
    95c2:	68c0      	ldr	r0, [r0, #12]
}
    95c4:	3800      	subs	r0, #0
    95c6:	bf18      	it	ne
    95c8:	2001      	movne	r0, #1
    95ca:	4770      	bx	lr

000095cc <os_eventq_put>:

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
    95cc:	b570      	push	{r4, r5, r6, lr}
    int resched;
    os_sr_t sr;

    assert(evq != NULL && os_eventq_inited(evq));
    95ce:	b1f0      	cbz	r0, 960e <os_eventq_put+0x42>
    95d0:	460c      	mov	r4, r1
    95d2:	4606      	mov	r6, r0
    95d4:	f7ff fff5 	bl	95c2 <os_eventq_inited>
    95d8:	b1c8      	cbz	r0, 960e <os_eventq_put+0x42>

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
    95da:	f000 fedb 	bl	a394 <os_arch_save_sr>
    95de:	4605      	mov	r5, r0

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
    95e0:	7823      	ldrb	r3, [r4, #0]
    95e2:	b9d3      	cbnz	r3, 961a <os_eventq_put+0x4e>
        os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
        return;
    }

    /* Queue the event */
    ev->ev_queued = 1;
    95e4:	2301      	movs	r3, #1
    95e6:	7023      	strb	r3, [r4, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
    95e8:	2300      	movs	r3, #0
    95ea:	60e3      	str	r3, [r4, #12]
    95ec:	68f3      	ldr	r3, [r6, #12]
    95ee:	601c      	str	r4, [r3, #0]
    95f0:	340c      	adds	r4, #12
    95f2:	60f4      	str	r4, [r6, #12]

    resched = 0;
    if (evq->evq_task) {
    95f4:	6870      	ldr	r0, [r6, #4]
    95f6:	b1b8      	cbz	r0, 9628 <os_eventq_put+0x5c>
        /* If task waiting on event, wake it up.
         * Check if task is sleeping, because another event
         * queue may have woken this task up beforehand.
         */
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
    95f8:	7b03      	ldrb	r3, [r0, #12]
    95fa:	2b02      	cmp	r3, #2
    95fc:	d010      	beq.n	9620 <os_eventq_put+0x54>
    resched = 0;
    95fe:	2400      	movs	r4, #0
            resched = 1;
        }
        /* Either way, NULL out the task, because the task will
         * be awake upon exit of this function.
         */
        evq->evq_task = NULL;
    9600:	2300      	movs	r3, #0
    9602:	6073      	str	r3, [r6, #4]
    }

    OS_EXIT_CRITICAL(sr);
    9604:	4628      	mov	r0, r5
    9606:	f000 fecb 	bl	a3a0 <os_arch_restore_sr>

    if (resched) {
    960a:	b97c      	cbnz	r4, 962c <os_eventq_put+0x60>
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
    960c:	bd70      	pop	{r4, r5, r6, pc}
    assert(evq != NULL && os_eventq_inited(evq));
    960e:	2300      	movs	r3, #0
    9610:	461a      	mov	r2, r3
    9612:	4619      	mov	r1, r3
    9614:	4618      	mov	r0, r3
    9616:	f7ff fca5 	bl	8f64 <__assert_func>
        OS_EXIT_CRITICAL(sr);
    961a:	f000 fec1 	bl	a3a0 <os_arch_restore_sr>
        return;
    961e:	e7f5      	b.n	960c <os_eventq_put+0x40>
            os_sched_wakeup(evq->evq_task);
    9620:	f000 fb12 	bl	9c48 <os_sched_wakeup>
            resched = 1;
    9624:	2401      	movs	r4, #1
    9626:	e7eb      	b.n	9600 <os_eventq_put+0x34>
    resched = 0;
    9628:	2400      	movs	r4, #0
    962a:	e7eb      	b.n	9604 <os_eventq_put+0x38>
        os_sched(NULL);
    962c:	2000      	movs	r0, #0
    962e:	f000 fb89 	bl	9d44 <os_sched>
    9632:	e7eb      	b.n	960c <os_eventq_put+0x40>

00009634 <os_eventq_get_no_wait>:

struct os_event *
os_eventq_get_no_wait(struct os_eventq *evq)
{
    9634:	4603      	mov	r3, r0
    struct os_event *ev;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET_NO_WAIT, (uint32_t)evq);

    ev = STAILQ_FIRST(&evq->evq_list);
    9636:	6880      	ldr	r0, [r0, #8]
    if (ev) {
    9638:	b120      	cbz	r0, 9644 <os_eventq_get_no_wait+0x10>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    963a:	68c2      	ldr	r2, [r0, #12]
    963c:	609a      	str	r2, [r3, #8]
    963e:	b112      	cbz	r2, 9646 <os_eventq_get_no_wait+0x12>
        ev->ev_queued = 0;
    9640:	2300      	movs	r3, #0
    9642:	7003      	strb	r3, [r0, #0]
    }

    os_trace_api_ret_u32(OS_TRACE_ID_EVENTQ_GET_NO_WAIT, (uint32_t)ev);

    return ev;
}
    9644:	4770      	bx	lr
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    9646:	f103 0208 	add.w	r2, r3, #8
    964a:	60da      	str	r2, [r3, #12]
    964c:	e7f8      	b.n	9640 <os_eventq_get_no_wait+0xc>

0000964e <os_eventq_get>:

struct os_event *
os_eventq_get(struct os_eventq *evq)
{
    964e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9650:	4606      	mov	r6, r0
    os_sr_t sr;
    struct os_task *t;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET, (uint32_t)evq);

    t = os_sched_get_current_task();
    9652:	f000 fa63 	bl	9b1c <os_sched_get_current_task>
    9656:	4604      	mov	r4, r0
    if (evq->evq_owner != t) {
    9658:	6833      	ldr	r3, [r6, #0]
    965a:	4283      	cmp	r3, r0
    965c:	d001      	beq.n	9662 <os_eventq_get+0x14>
        if (evq->evq_owner == NULL) {
    965e:	b923      	cbnz	r3, 966a <os_eventq_get+0x1c>
            evq->evq_owner = t;
    9660:	6030      	str	r0, [r6, #0]
             * by another.
             */
            assert(0);
        }
    }
    OS_ENTER_CRITICAL(sr);
    9662:	f000 fe97 	bl	a394 <os_arch_save_sr>
    9666:	4605      	mov	r5, r0
    9668:	e01e      	b.n	96a8 <os_eventq_get+0x5a>
            assert(0);
    966a:	2300      	movs	r3, #0
    966c:	461a      	mov	r2, r3
    966e:	4619      	mov	r1, r3
    9670:	4618      	mov	r0, r3
    9672:	f7ff fc77 	bl	8f64 <__assert_func>
pull_one:
    ev = STAILQ_FIRST(&evq->evq_list);
    if (ev) {
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    9676:	f106 0308 	add.w	r3, r6, #8
    967a:	60f3      	str	r3, [r6, #12]
    967c:	e01b      	b.n	96b6 <os_eventq_get+0x68>
        ev->ev_queued = 0;
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    } else {
        evq->evq_task = t;
    967e:	6074      	str	r4, [r6, #4]
        os_sched_sleep(evq->evq_task, OS_TIMEOUT_NEVER);
    9680:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9684:	4620      	mov	r0, r4
    9686:	f000 fa55 	bl	9b34 <os_sched_sleep>
        t->t_flags |= OS_TASK_FLAG_EVQ_WAIT;
    968a:	7b63      	ldrb	r3, [r4, #13]
    968c:	f043 0308 	orr.w	r3, r3, #8
    9690:	7363      	strb	r3, [r4, #13]
        OS_EXIT_CRITICAL(sr);
    9692:	4628      	mov	r0, r5
    9694:	f000 fe84 	bl	a3a0 <os_arch_restore_sr>

        os_sched(NULL);
    9698:	2000      	movs	r0, #0
    969a:	f000 fb53 	bl	9d44 <os_sched>

        OS_ENTER_CRITICAL(sr);
    969e:	f000 fe79 	bl	a394 <os_arch_save_sr>
    96a2:	4605      	mov	r5, r0
        evq->evq_task = NULL;
    96a4:	2300      	movs	r3, #0
    96a6:	6073      	str	r3, [r6, #4]
    ev = STAILQ_FIRST(&evq->evq_list);
    96a8:	68b7      	ldr	r7, [r6, #8]
    if (ev) {
    96aa:	2f00      	cmp	r7, #0
    96ac:	d0e7      	beq.n	967e <os_eventq_get+0x30>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    96ae:	68fb      	ldr	r3, [r7, #12]
    96b0:	60b3      	str	r3, [r6, #8]
    96b2:	2b00      	cmp	r3, #0
    96b4:	d0df      	beq.n	9676 <os_eventq_get+0x28>
        ev->ev_queued = 0;
    96b6:	2300      	movs	r3, #0
    96b8:	703b      	strb	r3, [r7, #0]
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    96ba:	7b63      	ldrb	r3, [r4, #13]
    96bc:	f023 0308 	bic.w	r3, r3, #8
    96c0:	7363      	strb	r3, [r4, #13]
        goto pull_one;
    }
    OS_EXIT_CRITICAL(sr);
    96c2:	4628      	mov	r0, r5
    96c4:	f000 fe6c 	bl	a3a0 <os_arch_restore_sr>
#if MYNEWT_VAL(OS_EVENTQ_DEBUG)
    evq->evq_prev = ev;
#endif

    return (ev);
}
    96c8:	4638      	mov	r0, r7
    96ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000096cc <os_eventq_run>:
}
#endif

void
os_eventq_run(struct os_eventq *evq)
{
    96cc:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    struct os_eventq_mon *mon;
    uint32_t ticks;
#endif

    ev = os_eventq_get(evq);
    96ce:	f7ff ffbe 	bl	964e <os_eventq_get>
    assert(ev->ev_cb != NULL);
    96d2:	6843      	ldr	r3, [r0, #4]
    96d4:	b10b      	cbz	r3, 96da <os_eventq_run+0xe>
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    ticks = os_cputime_get32();
#endif
    ev->ev_cb(ev);
    96d6:	4798      	blx	r3
        if (ticks > mon->em_max) {
            mon->em_max = ticks;
        }
    }
#endif
}
    96d8:	bd08      	pop	{r3, pc}
    assert(ev->ev_cb != NULL);
    96da:	461a      	mov	r2, r3
    96dc:	4619      	mov	r1, r3
    96de:	4618      	mov	r0, r3
    96e0:	f7ff fc40 	bl	8f64 <__assert_func>

000096e4 <os_eventq_remove>:
    return (ev);
}

void
os_eventq_remove(struct os_eventq *evq, struct os_event *ev)
{
    96e4:	b538      	push	{r3, r4, r5, lr}
    96e6:	4605      	mov	r5, r0
    96e8:	460c      	mov	r4, r1
    os_sr_t sr;

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_REMOVE, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
    96ea:	f000 fe53 	bl	a394 <os_arch_save_sr>
    if (OS_EVENT_QUEUED(ev)) {
    96ee:	7823      	ldrb	r3, [r4, #0]
    96f0:	b14b      	cbz	r3, 9706 <os_eventq_remove+0x22>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    96f2:	68ab      	ldr	r3, [r5, #8]
    96f4:	42a3      	cmp	r3, r4
    96f6:	d00b      	beq.n	9710 <os_eventq_remove+0x2c>
    96f8:	461a      	mov	r2, r3
    96fa:	68db      	ldr	r3, [r3, #12]
    96fc:	42a3      	cmp	r3, r4
    96fe:	d1fb      	bne.n	96f8 <os_eventq_remove+0x14>
    9700:	68db      	ldr	r3, [r3, #12]
    9702:	60d3      	str	r3, [r2, #12]
    9704:	b163      	cbz	r3, 9720 <os_eventq_remove+0x3c>
    }
    ev->ev_queued = 0;
    9706:	2300      	movs	r3, #0
    9708:	7023      	strb	r3, [r4, #0]
    OS_EXIT_CRITICAL(sr);
    970a:	f000 fe49 	bl	a3a0 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_REMOVE);
}
    970e:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    9710:	68db      	ldr	r3, [r3, #12]
    9712:	60ab      	str	r3, [r5, #8]
    9714:	2b00      	cmp	r3, #0
    9716:	d1f6      	bne.n	9706 <os_eventq_remove+0x22>
    9718:	f105 0308 	add.w	r3, r5, #8
    971c:	60eb      	str	r3, [r5, #12]
    971e:	e7f2      	b.n	9706 <os_eventq_remove+0x22>
    9720:	320c      	adds	r2, #12
    9722:	60ea      	str	r2, [r5, #12]
    9724:	e7ef      	b.n	9706 <os_eventq_remove+0x22>
	...

00009728 <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
    9728:	4800      	ldr	r0, [pc, #0]	; (972c <os_eventq_dflt_get+0x4>)
    972a:	4770      	bx	lr
    972c:	2000265c 	.word	0x2000265c

00009730 <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
    9730:	2800      	cmp	r0, #0
    9732:	d031      	beq.n	9798 <os_mempool_init_internal+0x68>
{
    9734:	b430      	push	{r4, r5}
    9736:	4604      	mov	r4, r0
    if (!mp || (block_size == 0)) {
    9738:	2a00      	cmp	r2, #0
    973a:	d02f      	beq.n	979c <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
    973c:	b1bb      	cbz	r3, 976e <os_mempool_init_internal+0x3e>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
    973e:	b113      	cbz	r3, 9746 <os_mempool_init_internal+0x16>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
    9740:	f013 0f03 	tst.w	r3, #3
    9744:	d12c      	bne.n	97a0 <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
    9746:	6022      	str	r2, [r4, #0]
    mp->mp_num_free = blocks;
    9748:	80e1      	strh	r1, [r4, #6]
    mp->mp_min_free = blocks;
    974a:	8121      	strh	r1, [r4, #8]
    mp->mp_flags = flags;
    974c:	f89d 000c 	ldrb.w	r0, [sp, #12]
    9750:	72a0      	strb	r0, [r4, #10]
    mp->mp_num_blocks = blocks;
    9752:	80a1      	strh	r1, [r4, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
    9754:	60e3      	str	r3, [r4, #12]
    mp->name = name;
    9756:	9802      	ldr	r0, [sp, #8]
    9758:	61a0      	str	r0, [r4, #24]
    SLIST_FIRST(mp) = membuf;
    975a:	6163      	str	r3, [r4, #20]

    if (blocks > 0) {
    975c:	b199      	cbz	r1, 9786 <os_mempool_init_internal+0x56>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
    975e:	f012 0f03 	tst.w	r2, #3
    9762:	d002      	beq.n	976a <os_mempool_init_internal+0x3a>
    9764:	f022 0203 	bic.w	r2, r2, #3
    9768:	3204      	adds	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
    976a:	2001      	movs	r0, #1
    976c:	e007      	b.n	977e <os_mempool_init_internal+0x4e>
    if ((!membuf) && (blocks != 0)) {
    976e:	2900      	cmp	r1, #0
    9770:	d0e5      	beq.n	973e <os_mempool_init_internal+0xe>
        return OS_INVALID_PARM;
    9772:	2003      	movs	r0, #3
    9774:	e00e      	b.n	9794 <os_mempool_init_internal+0x64>
            block_addr += true_block_size;
    9776:	189d      	adds	r5, r3, r2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
    9778:	601d      	str	r5, [r3, #0]
        for (i = 1; i < blocks; i++) {
    977a:	3001      	adds	r0, #1
            block_addr += true_block_size;
    977c:	462b      	mov	r3, r5
        for (i = 1; i < blocks; i++) {
    977e:	4281      	cmp	r1, r0
    9780:	dcf9      	bgt.n	9776 <os_mempool_init_internal+0x46>
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
    9782:	2200      	movs	r2, #0
    9784:	601a      	str	r2, [r3, #0]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
    9786:	2000      	movs	r0, #0
    9788:	6120      	str	r0, [r4, #16]
    978a:	4b06      	ldr	r3, [pc, #24]	; (97a4 <os_mempool_init_internal+0x74>)
    978c:	685a      	ldr	r2, [r3, #4]
    978e:	6014      	str	r4, [r2, #0]
    9790:	3410      	adds	r4, #16
    9792:	605c      	str	r4, [r3, #4]

    return OS_OK;
}
    9794:	bc30      	pop	{r4, r5}
    9796:	4770      	bx	lr
        return OS_INVALID_PARM;
    9798:	2003      	movs	r0, #3
}
    979a:	4770      	bx	lr
        return OS_INVALID_PARM;
    979c:	2003      	movs	r0, #3
    979e:	e7f9      	b.n	9794 <os_mempool_init_internal+0x64>
            return OS_MEM_NOT_ALIGNED;
    97a0:	2004      	movs	r0, #4
    97a2:	e7f7      	b.n	9794 <os_mempool_init_internal+0x64>
    97a4:	2000266c 	.word	0x2000266c

000097a8 <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
    97a8:	b510      	push	{r4, lr}
    97aa:	b082      	sub	sp, #8
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
    97ac:	2400      	movs	r4, #0
    97ae:	9401      	str	r4, [sp, #4]
    97b0:	9c04      	ldr	r4, [sp, #16]
    97b2:	9400      	str	r4, [sp, #0]
    97b4:	f7ff ffbc 	bl	9730 <os_mempool_init_internal>
}
    97b8:	b002      	add	sp, #8
    97ba:	bd10      	pop	{r4, pc}

000097bc <os_memblock_get>:
    return 1;
}

void *
os_memblock_get(struct os_mempool *mp)
{
    97bc:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)mp);

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
    97be:	4604      	mov	r4, r0
    97c0:	b198      	cbz	r0, 97ea <os_memblock_get+0x2e>
        OS_ENTER_CRITICAL(sr);
    97c2:	f000 fde7 	bl	a394 <os_arch_save_sr>
        /* Check for any free */
        if (mp->mp_num_free) {
    97c6:	88e3      	ldrh	r3, [r4, #6]
    97c8:	b153      	cbz	r3, 97e0 <os_memblock_get+0x24>
            /* Get a free block */
            block = SLIST_FIRST(mp);
    97ca:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
    97cc:	682a      	ldr	r2, [r5, #0]
    97ce:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
    97d0:	3b01      	subs	r3, #1
    97d2:	b29b      	uxth	r3, r3
    97d4:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
    97d6:	8922      	ldrh	r2, [r4, #8]
    97d8:	4293      	cmp	r3, r2
    97da:	d202      	bcs.n	97e2 <os_memblock_get+0x26>
                mp->mp_min_free = mp->mp_num_free;
    97dc:	8123      	strh	r3, [r4, #8]
    97de:	e000      	b.n	97e2 <os_memblock_get+0x26>
    block = NULL;
    97e0:	2500      	movs	r5, #0
            }
        }
        OS_EXIT_CRITICAL(sr);
    97e2:	f000 fddd 	bl	a3a0 <os_arch_restore_sr>
    }

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)block);

    return (void *)block;
}
    97e6:	4628      	mov	r0, r5
    97e8:	bd38      	pop	{r3, r4, r5, pc}
    block = NULL;
    97ea:	4605      	mov	r5, r0
    return (void *)block;
    97ec:	e7fb      	b.n	97e6 <os_memblock_get+0x2a>

000097ee <os_memblock_put_from_cb>:

os_error_t
os_memblock_put_from_cb(struct os_mempool *mp, void *block_addr)
{
    97ee:	b538      	push	{r3, r4, r5, lr}
    97f0:	4604      	mov	r4, r0
    97f2:	460d      	mov	r5, r1

    os_mempool_guard_check(mp, block_addr);
    os_mempool_poison(mp, block_addr);

    block = (struct os_memblock *)block_addr;
    OS_ENTER_CRITICAL(sr);
    97f4:	f000 fdce 	bl	a394 <os_arch_save_sr>

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
    97f8:	6963      	ldr	r3, [r4, #20]
    97fa:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;
    97fc:	6165      	str	r5, [r4, #20]

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
    97fe:	88e3      	ldrh	r3, [r4, #6]
    9800:	3301      	adds	r3, #1
    9802:	80e3      	strh	r3, [r4, #6]

    OS_EXIT_CRITICAL(sr);
    9804:	f000 fdcc 	bl	a3a0 <os_arch_restore_sr>

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT_FROM_CB, (uint32_t)OS_OK);

    return OS_OK;
}
    9808:	2000      	movs	r0, #0
    980a:	bd38      	pop	{r3, r4, r5, pc}

0000980c <os_memblock_put>:

    os_trace_api_u32x2(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)mp,
                       (uint32_t)block_addr);

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
    980c:	b178      	cbz	r0, 982e <os_memblock_put+0x22>
    980e:	4603      	mov	r3, r0
    9810:	b179      	cbz	r1, 9832 <os_memblock_put+0x26>
{
    9812:	b510      	push	{r4, lr}
    }
#endif
    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & OS_MEMPOOL_F_EXT) {
    9814:	7a82      	ldrb	r2, [r0, #10]
    9816:	f012 0f01 	tst.w	r2, #1
    981a:	d004      	beq.n	9826 <os_memblock_put+0x1a>
        mpe = (struct os_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
    981c:	69c4      	ldr	r4, [r0, #28]
    981e:	b114      	cbz	r4, 9826 <os_memblock_put+0x1a>
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
    9820:	6a02      	ldr	r2, [r0, #32]
    9822:	47a0      	blx	r4
            goto done;
    9824:	e002      	b.n	982c <os_memblock_put+0x20>
        }
    }

    /* No callback; free the block. */
    ret = os_memblock_put_from_cb(mp, block_addr);
    9826:	4618      	mov	r0, r3
    9828:	f7ff ffe1 	bl	97ee <os_memblock_put_from_cb>

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)ret);
    return ret;
}
    982c:	bd10      	pop	{r4, pc}
        ret = OS_INVALID_PARM;
    982e:	2003      	movs	r0, #3
    9830:	4770      	bx	lr
    9832:	2003      	movs	r0, #3
}
    9834:	4770      	bx	lr
	...

00009838 <os_mempool_info_get_next>:

struct os_mempool *
os_mempool_info_get_next(struct os_mempool *mp, struct os_mempool_info *omi)
{
    9838:	b510      	push	{r4, lr}
    983a:	460b      	mov	r3, r1
    struct os_mempool *cur;

    if (mp == NULL) {
    983c:	b188      	cbz	r0, 9862 <os_mempool_info_get_next+0x2a>
        cur = STAILQ_FIRST(&g_os_mempool_list);
    } else {
        cur = STAILQ_NEXT(mp, mp_list);
    983e:	6904      	ldr	r4, [r0, #16]
    }

    if (cur == NULL) {
    9840:	b16c      	cbz	r4, 985e <os_mempool_info_get_next+0x26>
        return (NULL);
    }

    omi->omi_block_size = cur->mp_block_size;
    9842:	6822      	ldr	r2, [r4, #0]
    9844:	601a      	str	r2, [r3, #0]
    omi->omi_num_blocks = cur->mp_num_blocks;
    9846:	88a2      	ldrh	r2, [r4, #4]
    9848:	605a      	str	r2, [r3, #4]
    omi->omi_num_free = cur->mp_num_free;
    984a:	88e2      	ldrh	r2, [r4, #6]
    984c:	609a      	str	r2, [r3, #8]
    omi->omi_min_free = cur->mp_min_free;
    984e:	8922      	ldrh	r2, [r4, #8]
    9850:	60da      	str	r2, [r3, #12]
    strncpy(omi->omi_name, cur->name, sizeof(omi->omi_name));
    9852:	2220      	movs	r2, #32
    9854:	69a1      	ldr	r1, [r4, #24]
    9856:	f103 0010 	add.w	r0, r3, #16
    985a:	f004 f97d 	bl	db58 <strncpy>

    return (cur);
}
    985e:	4620      	mov	r0, r4
    9860:	bd10      	pop	{r4, pc}
        cur = STAILQ_FIRST(&g_os_mempool_list);
    9862:	4a01      	ldr	r2, [pc, #4]	; (9868 <os_mempool_info_get_next+0x30>)
    9864:	6814      	ldr	r4, [r2, #0]
    9866:	e7eb      	b.n	9840 <os_mempool_info_get_next+0x8>
    9868:	2000266c 	.word	0x2000266c

0000986c <os_mempool_module_init>:

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
    986c:	4b02      	ldr	r3, [pc, #8]	; (9878 <os_mempool_module_init+0xc>)
    986e:	2200      	movs	r2, #0
    9870:	601a      	str	r2, [r3, #0]
    9872:	605b      	str	r3, [r3, #4]
}
    9874:	4770      	bx	lr
    9876:	bf00      	nop
    9878:	2000266c 	.word	0x2000266c

0000987c <os_msys_find_biggest_pool>:

static struct os_mbuf_pool *
os_msys_find_biggest_pool(void)
{
    /* Mempools are sorted by the blocksize, so just return last one */
    return STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    987c:	4b02      	ldr	r3, [pc, #8]	; (9888 <os_msys_find_biggest_pool+0xc>)
    987e:	6818      	ldr	r0, [r3, #0]
    9880:	b108      	cbz	r0, 9886 <os_msys_find_biggest_pool+0xa>
    9882:	6858      	ldr	r0, [r3, #4]
    9884:	3808      	subs	r0, #8
}
    9886:	4770      	bx	lr
    9888:	20000540 	.word	0x20000540

0000988c <os_msys_find_pool>:

static struct os_mbuf_pool *
os_msys_find_pool(uint16_t dsize)
{
    988c:	4602      	mov	r2, r0
    struct os_mbuf_pool *pool;

    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    988e:	4b09      	ldr	r3, [pc, #36]	; (98b4 <os_msys_find_pool+0x28>)
    9890:	6819      	ldr	r1, [r3, #0]
    9892:	4608      	mov	r0, r1
    9894:	e000      	b.n	9898 <os_msys_find_pool+0xc>
    9896:	6880      	ldr	r0, [r0, #8]
    9898:	b110      	cbz	r0, 98a0 <os_msys_find_pool+0x14>
        if (dsize <= pool->omp_databuf_len) {
    989a:	8803      	ldrh	r3, [r0, #0]
    989c:	4293      	cmp	r3, r2
    989e:	d3fa      	bcc.n	9896 <os_msys_find_pool+0xa>
            break;
        }
    }

    if (!pool) {
    98a0:	b100      	cbz	r0, 98a4 <os_msys_find_pool+0x18>
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    }

    return (pool);
}
    98a2:	4770      	bx	lr
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    98a4:	b119      	cbz	r1, 98ae <os_msys_find_pool+0x22>
    98a6:	4b03      	ldr	r3, [pc, #12]	; (98b4 <os_msys_find_pool+0x28>)
    98a8:	6858      	ldr	r0, [r3, #4]
    98aa:	3808      	subs	r0, #8
    98ac:	4770      	bx	lr
    98ae:	4608      	mov	r0, r1
    return (pool);
    98b0:	e7f7      	b.n	98a2 <os_msys_find_pool+0x16>
    98b2:	bf00      	nop
    98b4:	20000540 	.word	0x20000540

000098b8 <os_msys_register>:
{
    98b8:	b430      	push	{r4, r5}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    98ba:	4b11      	ldr	r3, [pc, #68]	; (9900 <os_msys_register+0x48>)
    98bc:	681d      	ldr	r5, [r3, #0]
    98be:	462b      	mov	r3, r5
    prev = NULL;
    98c0:	2400      	movs	r4, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    98c2:	e001      	b.n	98c8 <os_msys_register+0x10>
        prev = pool;
    98c4:	461c      	mov	r4, r3
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    98c6:	689b      	ldr	r3, [r3, #8]
    98c8:	b11b      	cbz	r3, 98d2 <os_msys_register+0x1a>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
    98ca:	8801      	ldrh	r1, [r0, #0]
    98cc:	881a      	ldrh	r2, [r3, #0]
    98ce:	4291      	cmp	r1, r2
    98d0:	d2f8      	bcs.n	98c4 <os_msys_register+0xc>
    if (prev) {
    98d2:	b15c      	cbz	r4, 98ec <os_msys_register+0x34>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
    98d4:	68a3      	ldr	r3, [r4, #8]
    98d6:	6083      	str	r3, [r0, #8]
    98d8:	b11b      	cbz	r3, 98e2 <os_msys_register+0x2a>
    98da:	60a0      	str	r0, [r4, #8]
}
    98dc:	2000      	movs	r0, #0
    98de:	bc30      	pop	{r4, r5}
    98e0:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
    98e2:	f100 0308 	add.w	r3, r0, #8
    98e6:	4a06      	ldr	r2, [pc, #24]	; (9900 <os_msys_register+0x48>)
    98e8:	6053      	str	r3, [r2, #4]
    98ea:	e7f6      	b.n	98da <os_msys_register+0x22>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
    98ec:	6085      	str	r5, [r0, #8]
    98ee:	b115      	cbz	r5, 98f6 <os_msys_register+0x3e>
    98f0:	4b03      	ldr	r3, [pc, #12]	; (9900 <os_msys_register+0x48>)
    98f2:	6018      	str	r0, [r3, #0]
    98f4:	e7f2      	b.n	98dc <os_msys_register+0x24>
    98f6:	f100 0308 	add.w	r3, r0, #8
    98fa:	4a01      	ldr	r2, [pc, #4]	; (9900 <os_msys_register+0x48>)
    98fc:	6053      	str	r3, [r2, #4]
    98fe:	e7f7      	b.n	98f0 <os_msys_register+0x38>
    9900:	20000540 	.word	0x20000540

00009904 <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
    9904:	b530      	push	{r4, r5, lr}
    9906:	b083      	sub	sp, #12
    9908:	4614      	mov	r4, r2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
    990a:	9d07      	ldr	r5, [sp, #28]
    990c:	9501      	str	r5, [sp, #4]
    990e:	9d06      	ldr	r5, [sp, #24]
    9910:	9500      	str	r5, [sp, #0]
    9912:	f004 fd9f 	bl	e454 <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
    9916:	b138      	cbz	r0, 9928 <os_msys_init_once+0x24>
    9918:	2000      	movs	r0, #0
    991a:	9000      	str	r0, [sp, #0]
    991c:	4b09      	ldr	r3, [pc, #36]	; (9944 <os_msys_init_once+0x40>)
    991e:	681d      	ldr	r5, [r3, #0]
    9920:	4603      	mov	r3, r0
    9922:	4602      	mov	r2, r0
    9924:	4601      	mov	r1, r0
    9926:	47a8      	blx	r5

    rc = os_msys_register(mbuf_pool);
    9928:	4620      	mov	r0, r4
    992a:	f7ff ffc5 	bl	98b8 <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
    992e:	b138      	cbz	r0, 9940 <os_msys_init_once+0x3c>
    9930:	2000      	movs	r0, #0
    9932:	9000      	str	r0, [sp, #0]
    9934:	4b03      	ldr	r3, [pc, #12]	; (9944 <os_msys_init_once+0x40>)
    9936:	681c      	ldr	r4, [r3, #0]
    9938:	4603      	mov	r3, r0
    993a:	4602      	mov	r2, r0
    993c:	4601      	mov	r1, r0
    993e:	47a0      	blx	r4
}
    9940:	b003      	add	sp, #12
    9942:	bd30      	pop	{r4, r5, pc}
    9944:	2000064c 	.word	0x2000064c

00009948 <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
    9948:	4b02      	ldr	r3, [pc, #8]	; (9954 <os_msys_reset+0xc>)
    994a:	2200      	movs	r2, #0
    994c:	601a      	str	r2, [r3, #0]
    994e:	605b      	str	r3, [r3, #4]
}
    9950:	4770      	bx	lr
    9952:	bf00      	nop
    9954:	20000540 	.word	0x20000540

00009958 <os_msys_get_pkthdr>:
{
    9958:	b510      	push	{r4, lr}
    995a:	460c      	mov	r4, r1
    if (dsize == 0) {
    995c:	b930      	cbnz	r0, 996c <os_msys_get_pkthdr+0x14>
        pool = os_msys_find_biggest_pool();
    995e:	f7ff ff8d 	bl	987c <os_msys_find_biggest_pool>
    if (!pool) {
    9962:	b110      	cbz	r0, 996a <os_msys_get_pkthdr+0x12>
    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
    9964:	b2e1      	uxtb	r1, r4
    9966:	f000 fe3d 	bl	a5e4 <os_mbuf_get_pkthdr>
}
    996a:	bd10      	pop	{r4, pc}
    996c:	f101 0308 	add.w	r3, r1, #8
    9970:	b29b      	uxth	r3, r3
        pool = os_msys_find_pool(dsize + total_pkthdr_len);
    9972:	4403      	add	r3, r0
    9974:	b298      	uxth	r0, r3
    9976:	f7ff ff89 	bl	988c <os_msys_find_pool>
    997a:	e7f2      	b.n	9962 <os_msys_get_pkthdr+0xa>

0000997c <os_msys_init>:

void
os_msys_init(void)
{
    997c:	b500      	push	{lr}
    997e:	b083      	sub	sp, #12
    int rc;

    os_msys_reset();
    9980:	f7ff ffe2 	bl	9948 <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
    9984:	4b06      	ldr	r3, [pc, #24]	; (99a0 <os_msys_init+0x24>)
    9986:	9301      	str	r3, [sp, #4]
    9988:	f44f 7392 	mov.w	r3, #292	; 0x124
    998c:	9300      	str	r3, [sp, #0]
    998e:	230c      	movs	r3, #12
    9990:	4a04      	ldr	r2, [pc, #16]	; (99a4 <os_msys_init+0x28>)
    9992:	4905      	ldr	r1, [pc, #20]	; (99a8 <os_msys_init+0x2c>)
    9994:	4805      	ldr	r0, [pc, #20]	; (99ac <os_msys_init+0x30>)
    9996:	f7ff ffb5 	bl	9904 <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
    999a:	b003      	add	sp, #12
    999c:	f85d fb04 	ldr.w	pc, [sp], #4
    99a0:	00022fb0 	.word	0x00022fb0
    99a4:	20003424 	.word	0x20003424
    99a8:	20003430 	.word	0x20003430
    99ac:	20002674 	.word	0x20002674

000099b0 <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
    99b0:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
    99b2:	4b05      	ldr	r3, [pc, #20]	; (99c8 <os_sanity_check_list_lock+0x18>)
    99b4:	6818      	ldr	r0, [r3, #0]
    99b6:	b900      	cbnz	r0, 99ba <os_sanity_check_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
    99b8:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
    99ba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    99be:	4803      	ldr	r0, [pc, #12]	; (99cc <os_sanity_check_list_lock+0x1c>)
    99c0:	f001 f842 	bl	aa48 <os_mutex_pend>
    if (rc != OS_OK) {
    99c4:	e7f8      	b.n	99b8 <os_sanity_check_list_lock+0x8>
    99c6:	bf00      	nop
    99c8:	20002648 	.word	0x20002648
    99cc:	20003450 	.word	0x20003450

000099d0 <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
    99d0:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
    99d2:	4b04      	ldr	r3, [pc, #16]	; (99e4 <os_sanity_check_list_unlock+0x14>)
    99d4:	6818      	ldr	r0, [r3, #0]
    99d6:	b900      	cbnz	r0, 99da <os_sanity_check_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
    99d8:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&g_os_sanity_check_mu);
    99da:	4803      	ldr	r0, [pc, #12]	; (99e8 <os_sanity_check_list_unlock+0x18>)
    99dc:	f000 ffd8 	bl	a990 <os_mutex_release>
    if (rc != 0) {
    99e0:	e7fa      	b.n	99d8 <os_sanity_check_list_unlock+0x8>
    99e2:	bf00      	nop
    99e4:	20002648 	.word	0x20002648
    99e8:	20003450 	.word	0x20003450

000099ec <os_sanity_check_init>:
{
    99ec:	4603      	mov	r3, r0
    memset(sc, 0, sizeof(*sc));
    99ee:	2000      	movs	r0, #0
    99f0:	6018      	str	r0, [r3, #0]
    99f2:	6058      	str	r0, [r3, #4]
    99f4:	6098      	str	r0, [r3, #8]
    99f6:	60d8      	str	r0, [r3, #12]
    99f8:	6118      	str	r0, [r3, #16]
}
    99fa:	4770      	bx	lr

000099fc <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
    99fc:	b510      	push	{r4, lr}
    99fe:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
    9a00:	f7ff ffd6 	bl	99b0 <os_sanity_check_list_lock>
    if (rc != OS_OK) {
    9a04:	b100      	cbz	r0, 9a08 <os_sanity_check_register+0xc>
    }

    return (0);
err:
    return (rc);
}
    9a06:	bd10      	pop	{r4, pc}
    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
    9a08:	4b03      	ldr	r3, [pc, #12]	; (9a18 <os_sanity_check_register+0x1c>)
    9a0a:	681a      	ldr	r2, [r3, #0]
    9a0c:	6122      	str	r2, [r4, #16]
    9a0e:	601c      	str	r4, [r3, #0]
    rc = os_sanity_check_list_unlock();
    9a10:	f7ff ffde 	bl	99d0 <os_sanity_check_list_unlock>
    if (rc != OS_OK) {
    9a14:	e7f7      	b.n	9a06 <os_sanity_check_register+0xa>
    9a16:	bf00      	nop
    9a18:	2000344c 	.word	0x2000344c

00009a1c <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
    9a1c:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
    9a1e:	f7ff ffc7 	bl	99b0 <os_sanity_check_list_lock>
    if (rc != 0) {
    9a22:	b910      	cbnz	r0, 9a2a <os_sanity_run+0xe>
        assert(0);
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
    9a24:	4b17      	ldr	r3, [pc, #92]	; (9a84 <os_sanity_run+0x68>)
    9a26:	681c      	ldr	r4, [r3, #0]
    9a28:	e00e      	b.n	9a48 <os_sanity_run+0x2c>
        assert(0);
    9a2a:	2300      	movs	r3, #0
    9a2c:	461a      	mov	r2, r3
    9a2e:	4619      	mov	r1, r3
    9a30:	4618      	mov	r0, r3
    9a32:	f7ff fa97 	bl	8f64 <__assert_func>
                sc->sc_checkin_last = os_time_get();
                continue;
            }
        }

        if (OS_TIME_TICK_GT(os_time_get(),
    9a36:	f000 fb87 	bl	a148 <os_time_get>
    9a3a:	6823      	ldr	r3, [r4, #0]
    9a3c:	6862      	ldr	r2, [r4, #4]
    9a3e:	4413      	add	r3, r2
    9a40:	1ac0      	subs	r0, r0, r3
    9a42:	2800      	cmp	r0, #0
    9a44:	dc0d      	bgt.n	9a62 <os_sanity_run+0x46>
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
    9a46:	6924      	ldr	r4, [r4, #16]
    9a48:	b18c      	cbz	r4, 9a6e <os_sanity_run+0x52>
        if (sc->sc_func) {
    9a4a:	68a3      	ldr	r3, [r4, #8]
    9a4c:	2b00      	cmp	r3, #0
    9a4e:	d0f2      	beq.n	9a36 <os_sanity_run+0x1a>
            rc = sc->sc_func(sc, sc->sc_arg);
    9a50:	68e1      	ldr	r1, [r4, #12]
    9a52:	4620      	mov	r0, r4
    9a54:	4798      	blx	r3
            if (rc == OS_OK) {
    9a56:	2800      	cmp	r0, #0
    9a58:	d1ed      	bne.n	9a36 <os_sanity_run+0x1a>
                sc->sc_checkin_last = os_time_get();
    9a5a:	f000 fb75 	bl	a148 <os_time_get>
    9a5e:	6020      	str	r0, [r4, #0]
                continue;
    9a60:	e7f1      	b.n	9a46 <os_sanity_run+0x2a>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
    9a62:	2300      	movs	r3, #0
    9a64:	461a      	mov	r2, r3
    9a66:	4619      	mov	r1, r3
    9a68:	4618      	mov	r0, r3
    9a6a:	f7ff fa7b 	bl	8f64 <__assert_func>
        }
    }

    rc = os_sanity_check_list_unlock();
    9a6e:	f7ff ffaf 	bl	99d0 <os_sanity_check_list_unlock>
    if (rc != 0) {
    9a72:	b900      	cbnz	r0, 9a76 <os_sanity_run+0x5a>
        assert(0);
    }
}
    9a74:	bd10      	pop	{r4, pc}
        assert(0);
    9a76:	2300      	movs	r3, #0
    9a78:	461a      	mov	r2, r3
    9a7a:	4619      	mov	r1, r3
    9a7c:	4618      	mov	r0, r3
    9a7e:	f7ff fa71 	bl	8f64 <__assert_func>
    9a82:	bf00      	nop
    9a84:	2000344c 	.word	0x2000344c

00009a88 <os_sanity_init>:

int
os_sanity_init(void)
{
    9a88:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
    9a8a:	4802      	ldr	r0, [pc, #8]	; (9a94 <os_sanity_init+0xc>)
    9a8c:	f000 ff76 	bl	a97c <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
    9a90:	bd08      	pop	{r3, pc}
    9a92:	bf00      	nop
    9a94:	20003450 	.word	0x20003450

00009a98 <os_sched_insert>:
{
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
    9a98:	7b03      	ldrb	r3, [r0, #12]
    9a9a:	2b01      	cmp	r3, #1
    9a9c:	d001      	beq.n	9aa2 <os_sched_insert+0xa>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
    9a9e:	2002      	movs	r0, #2
}
    9aa0:	4770      	bx	lr
{
    9aa2:	b510      	push	{r4, lr}
    9aa4:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
    9aa6:	f000 fc75 	bl	a394 <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
    9aaa:	4b0f      	ldr	r3, [pc, #60]	; (9ae8 <os_sched_insert+0x50>)
    9aac:	681b      	ldr	r3, [r3, #0]
    9aae:	b12b      	cbz	r3, 9abc <os_sched_insert+0x24>
        if (t->t_prio < entry->t_prio) {
    9ab0:	7ae1      	ldrb	r1, [r4, #11]
    9ab2:	7ada      	ldrb	r2, [r3, #11]
    9ab4:	4291      	cmp	r1, r2
    9ab6:	d301      	bcc.n	9abc <os_sched_insert+0x24>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
    9ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    9aba:	e7f8      	b.n	9aae <os_sched_insert+0x16>
    if (entry) {
    9abc:	b153      	cbz	r3, 9ad4 <os_sched_insert+0x3c>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
    9abe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    9ac0:	64a2      	str	r2, [r4, #72]	; 0x48
    9ac2:	6463      	str	r3, [r4, #68]	; 0x44
    9ac4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    9ac6:	6014      	str	r4, [r2, #0]
    9ac8:	3444      	adds	r4, #68	; 0x44
    9aca:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
    9acc:	f000 fc68 	bl	a3a0 <os_arch_restore_sr>
    return (0);
    9ad0:	2000      	movs	r0, #0
}
    9ad2:	bd10      	pop	{r4, pc}
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
    9ad4:	2300      	movs	r3, #0
    9ad6:	6463      	str	r3, [r4, #68]	; 0x44
    9ad8:	4b03      	ldr	r3, [pc, #12]	; (9ae8 <os_sched_insert+0x50>)
    9ada:	685a      	ldr	r2, [r3, #4]
    9adc:	64a2      	str	r2, [r4, #72]	; 0x48
    9ade:	6014      	str	r4, [r2, #0]
    9ae0:	3444      	adds	r4, #68	; 0x44
    9ae2:	605c      	str	r4, [r3, #4]
    9ae4:	e7f2      	b.n	9acc <os_sched_insert+0x34>
    9ae6:	bf00      	nop
    9ae8:	20000548 	.word	0x20000548

00009aec <os_sched_ctx_sw_hook>:

void
os_sched_ctx_sw_hook(struct os_task *next_t)
{
    9aec:	b410      	push	{r4}
    top = g_current_task->t_stacktop - g_current_task->t_stacksize;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(top[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
    9aee:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    9af0:	3301      	adds	r3, #1
    9af2:	63c3      	str	r3, [r0, #60]	; 0x3c
    g_current_task->t_run_time += g_os_time - g_os_last_ctx_sw_time;
    9af4:	4b06      	ldr	r3, [pc, #24]	; (9b10 <os_sched_ctx_sw_hook+0x24>)
    9af6:	681c      	ldr	r4, [r3, #0]
    9af8:	4b06      	ldr	r3, [pc, #24]	; (9b14 <os_sched_ctx_sw_hook+0x28>)
    9afa:	6818      	ldr	r0, [r3, #0]
    9afc:	4906      	ldr	r1, [pc, #24]	; (9b18 <os_sched_ctx_sw_hook+0x2c>)
    9afe:	680b      	ldr	r3, [r1, #0]
    9b00:	1ac2      	subs	r2, r0, r3
    9b02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    9b04:	4413      	add	r3, r2
    9b06:	63a3      	str	r3, [r4, #56]	; 0x38
    g_os_last_ctx_sw_time = g_os_time;
    9b08:	6008      	str	r0, [r1, #0]
}
    9b0a:	f85d 4b04 	ldr.w	r4, [sp], #4
    9b0e:	4770      	bx	lr
    9b10:	2000345c 	.word	0x2000345c
    9b14:	200034a0 	.word	0x200034a0
    9b18:	20003460 	.word	0x20003460

00009b1c <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
    9b1c:	4b01      	ldr	r3, [pc, #4]	; (9b24 <os_sched_get_current_task+0x8>)
    9b1e:	6818      	ldr	r0, [r3, #0]
    9b20:	4770      	bx	lr
    9b22:	bf00      	nop
    9b24:	2000345c 	.word	0x2000345c

00009b28 <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
    9b28:	4b01      	ldr	r3, [pc, #4]	; (9b30 <os_sched_set_current_task+0x8>)
    9b2a:	6018      	str	r0, [r3, #0]
}
    9b2c:	4770      	bx	lr
    9b2e:	bf00      	nop
    9b30:	2000345c 	.word	0x2000345c

00009b34 <os_sched_sleep>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
    9b34:	b538      	push	{r3, r4, r5, lr}
    9b36:	4604      	mov	r4, r0
    9b38:	460d      	mov	r5, r1
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    9b3a:	6c43      	ldr	r3, [r0, #68]	; 0x44
    9b3c:	b183      	cbz	r3, 9b60 <os_sched_sleep+0x2c>
    9b3e:	6c82      	ldr	r2, [r0, #72]	; 0x48
    9b40:	649a      	str	r2, [r3, #72]	; 0x48
    9b42:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    9b44:	6c62      	ldr	r2, [r4, #68]	; 0x44
    9b46:	601a      	str	r2, [r3, #0]
    t->t_state = OS_TASK_SLEEP;
    9b48:	2302      	movs	r3, #2
    9b4a:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
    9b4c:	f000 fafc 	bl	a148 <os_time_get>
    9b50:	4428      	add	r0, r5
    9b52:	6360      	str	r0, [r4, #52]	; 0x34
    if (nticks == OS_TIMEOUT_NEVER) {
    9b54:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    9b58:	d006      	beq.n	9b68 <os_sched_sleep+0x34>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
    9b5a:	4b18      	ldr	r3, [pc, #96]	; (9bbc <os_sched_sleep+0x88>)
    9b5c:	681b      	ldr	r3, [r3, #0]
    9b5e:	e011      	b.n	9b84 <os_sched_sleep+0x50>
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    9b60:	6c82      	ldr	r2, [r0, #72]	; 0x48
    9b62:	4b17      	ldr	r3, [pc, #92]	; (9bc0 <os_sched_sleep+0x8c>)
    9b64:	605a      	str	r2, [r3, #4]
    9b66:	e7ec      	b.n	9b42 <os_sched_sleep+0xe>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
    9b68:	7b63      	ldrb	r3, [r4, #13]
    9b6a:	f043 0301 	orr.w	r3, r3, #1
    9b6e:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    9b70:	2300      	movs	r3, #0
    9b72:	6463      	str	r3, [r4, #68]	; 0x44
    9b74:	4b11      	ldr	r3, [pc, #68]	; (9bbc <os_sched_sleep+0x88>)
    9b76:	685a      	ldr	r2, [r3, #4]
    9b78:	64a2      	str	r2, [r4, #72]	; 0x48
    9b7a:	6014      	str	r4, [r2, #0]
    9b7c:	3444      	adds	r4, #68	; 0x44
    9b7e:	605c      	str	r4, [r3, #4]
    9b80:	e011      	b.n	9ba6 <os_sched_sleep+0x72>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
    9b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    9b84:	b13b      	cbz	r3, 9b96 <os_sched_sleep+0x62>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
    9b86:	7b5a      	ldrb	r2, [r3, #13]
    9b88:	f012 0f01 	tst.w	r2, #1
    9b8c:	d103      	bne.n	9b96 <os_sched_sleep+0x62>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
    9b8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    9b90:	1a12      	subs	r2, r2, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
    9b92:	2a00      	cmp	r2, #0
    9b94:	ddf5      	ble.n	9b82 <os_sched_sleep+0x4e>
                break;
            }
        }
        if (entry) {
    9b96:	b143      	cbz	r3, 9baa <os_sched_sleep+0x76>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
    9b98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    9b9a:	64a2      	str	r2, [r4, #72]	; 0x48
    9b9c:	6463      	str	r3, [r4, #68]	; 0x44
    9b9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    9ba0:	6014      	str	r4, [r2, #0]
    9ba2:	3444      	adds	r4, #68	; 0x44
    9ba4:	649c      	str	r4, [r3, #72]	; 0x48
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
    9ba6:	2000      	movs	r0, #0
    9ba8:	bd38      	pop	{r3, r4, r5, pc}
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    9baa:	2300      	movs	r3, #0
    9bac:	6463      	str	r3, [r4, #68]	; 0x44
    9bae:	4b03      	ldr	r3, [pc, #12]	; (9bbc <os_sched_sleep+0x88>)
    9bb0:	685a      	ldr	r2, [r3, #4]
    9bb2:	64a2      	str	r2, [r4, #72]	; 0x48
    9bb4:	6014      	str	r4, [r2, #0]
    9bb6:	3444      	adds	r4, #68	; 0x44
    9bb8:	605c      	str	r4, [r3, #4]
    9bba:	e7f4      	b.n	9ba6 <os_sched_sleep+0x72>
    9bbc:	20000550 	.word	0x20000550
    9bc0:	20000548 	.word	0x20000548

00009bc4 <os_sched_remove>:
 */
int
os_sched_remove(struct os_task *t)
{

    if (t->t_state == OS_TASK_SLEEP) {
    9bc4:	7b03      	ldrb	r3, [r0, #12]
    9bc6:	2b02      	cmp	r3, #2
    9bc8:	d014      	beq.n	9bf4 <os_sched_remove+0x30>
        TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
    } else if (t->t_state == OS_TASK_READY) {
    9bca:	2b01      	cmp	r3, #1
    9bcc:	d01e      	beq.n	9c0c <os_sched_remove+0x48>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    }
    t->t_next_wakeup = 0;
    9bce:	2300      	movs	r3, #0
    9bd0:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
    9bd2:	7b43      	ldrb	r3, [r0, #13]
    9bd4:	f043 0301 	orr.w	r3, r3, #1
    9bd8:	7343      	strb	r3, [r0, #13]

    STAILQ_REMOVE(&g_os_task_list, t, os_task, t_os_task_list);
    9bda:	4b18      	ldr	r3, [pc, #96]	; (9c3c <os_sched_remove+0x78>)
    9bdc:	681b      	ldr	r3, [r3, #0]
    9bde:	4283      	cmp	r3, r0
    9be0:	d020      	beq.n	9c24 <os_sched_remove+0x60>
    9be2:	461a      	mov	r2, r3
    9be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9be6:	4283      	cmp	r3, r0
    9be8:	d1fb      	bne.n	9be2 <os_sched_remove+0x1e>
    9bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9bec:	6413      	str	r3, [r2, #64]	; 0x40
    9bee:	b303      	cbz	r3, 9c32 <os_sched_remove+0x6e>

    os_trace_task_stop_exec();
    return OS_OK;
}
    9bf0:	2000      	movs	r0, #0
    9bf2:	4770      	bx	lr
        TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
    9bf4:	6c43      	ldr	r3, [r0, #68]	; 0x44
    9bf6:	b12b      	cbz	r3, 9c04 <os_sched_remove+0x40>
    9bf8:	6c82      	ldr	r2, [r0, #72]	; 0x48
    9bfa:	649a      	str	r2, [r3, #72]	; 0x48
    9bfc:	6c83      	ldr	r3, [r0, #72]	; 0x48
    9bfe:	6c42      	ldr	r2, [r0, #68]	; 0x44
    9c00:	601a      	str	r2, [r3, #0]
    9c02:	e7e4      	b.n	9bce <os_sched_remove+0xa>
    9c04:	6c82      	ldr	r2, [r0, #72]	; 0x48
    9c06:	4b0e      	ldr	r3, [pc, #56]	; (9c40 <os_sched_remove+0x7c>)
    9c08:	605a      	str	r2, [r3, #4]
    9c0a:	e7f7      	b.n	9bfc <os_sched_remove+0x38>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    9c0c:	6c43      	ldr	r3, [r0, #68]	; 0x44
    9c0e:	b12b      	cbz	r3, 9c1c <os_sched_remove+0x58>
    9c10:	6c82      	ldr	r2, [r0, #72]	; 0x48
    9c12:	649a      	str	r2, [r3, #72]	; 0x48
    9c14:	6c83      	ldr	r3, [r0, #72]	; 0x48
    9c16:	6c42      	ldr	r2, [r0, #68]	; 0x44
    9c18:	601a      	str	r2, [r3, #0]
    9c1a:	e7d8      	b.n	9bce <os_sched_remove+0xa>
    9c1c:	6c82      	ldr	r2, [r0, #72]	; 0x48
    9c1e:	4b09      	ldr	r3, [pc, #36]	; (9c44 <os_sched_remove+0x80>)
    9c20:	605a      	str	r2, [r3, #4]
    9c22:	e7f7      	b.n	9c14 <os_sched_remove+0x50>
    STAILQ_REMOVE(&g_os_task_list, t, os_task, t_os_task_list);
    9c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9c26:	4a05      	ldr	r2, [pc, #20]	; (9c3c <os_sched_remove+0x78>)
    9c28:	6013      	str	r3, [r2, #0]
    9c2a:	2b00      	cmp	r3, #0
    9c2c:	d1e0      	bne.n	9bf0 <os_sched_remove+0x2c>
    9c2e:	6052      	str	r2, [r2, #4]
    9c30:	e7de      	b.n	9bf0 <os_sched_remove+0x2c>
    9c32:	3240      	adds	r2, #64	; 0x40
    9c34:	4b01      	ldr	r3, [pc, #4]	; (9c3c <os_sched_remove+0x78>)
    9c36:	605a      	str	r2, [r3, #4]
    9c38:	e7da      	b.n	9bf0 <os_sched_remove+0x2c>
    9c3a:	bf00      	nop
    9c3c:	20003464 	.word	0x20003464
    9c40:	20000550 	.word	0x20000550
    9c44:	20000548 	.word	0x20000548

00009c48 <os_sched_wakeup>:
 *
 * NOTE: This function must be called with interrupts disabled.
 */
int
os_sched_wakeup(struct os_task *t)
{
    9c48:	b508      	push	{r3, lr}
    struct os_task_obj *os_obj;

    assert(t->t_state == OS_TASK_SLEEP);
    9c4a:	7b03      	ldrb	r3, [r0, #12]
    9c4c:	2b02      	cmp	r3, #2
    9c4e:	d121      	bne.n	9c94 <os_sched_wakeup+0x4c>

    /* Remove self from object list if waiting on one */
    if (t->t_obj) {
    9c50:	69c2      	ldr	r2, [r0, #28]
    9c52:	b162      	cbz	r2, 9c6e <os_sched_wakeup+0x26>
        os_obj = (struct os_task_obj *)t->t_obj;
        assert(!SLIST_EMPTY(&os_obj->obj_head));
    9c54:	6813      	ldr	r3, [r2, #0]
    9c56:	b31b      	cbz	r3, 9ca0 <os_sched_wakeup+0x58>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
    9c58:	4283      	cmp	r3, r0
    9c5a:	d026      	beq.n	9caa <os_sched_wakeup+0x62>
    9c5c:	461a      	mov	r2, r3
    9c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    9c60:	4283      	cmp	r3, r0
    9c62:	d1fb      	bne.n	9c5c <os_sched_wakeup+0x14>
    9c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    9c66:	64d3      	str	r3, [r2, #76]	; 0x4c
        SLIST_NEXT(t, t_obj_list) = NULL;
    9c68:	2300      	movs	r3, #0
    9c6a:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
    9c6c:	61c3      	str	r3, [r0, #28]
    }

    /* Remove task from sleep list */
    t->t_state = OS_TASK_READY;
    9c6e:	2301      	movs	r3, #1
    9c70:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
    9c72:	2300      	movs	r3, #0
    9c74:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
    9c76:	7b43      	ldrb	r3, [r0, #13]
    9c78:	f023 0301 	bic.w	r3, r3, #1
    9c7c:	7343      	strb	r3, [r0, #13]
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
    9c7e:	6c43      	ldr	r3, [r0, #68]	; 0x44
    9c80:	b1b3      	cbz	r3, 9cb0 <os_sched_wakeup+0x68>
    9c82:	6c82      	ldr	r2, [r0, #72]	; 0x48
    9c84:	649a      	str	r2, [r3, #72]	; 0x48
    9c86:	6c83      	ldr	r3, [r0, #72]	; 0x48
    9c88:	6c42      	ldr	r2, [r0, #68]	; 0x44
    9c8a:	601a      	str	r2, [r3, #0]
    os_sched_insert(t);
    9c8c:	f7ff ff04 	bl	9a98 <os_sched_insert>

    os_trace_task_start_ready(t);

    return (0);
}
    9c90:	2000      	movs	r0, #0
    9c92:	bd08      	pop	{r3, pc}
    assert(t->t_state == OS_TASK_SLEEP);
    9c94:	2300      	movs	r3, #0
    9c96:	461a      	mov	r2, r3
    9c98:	4619      	mov	r1, r3
    9c9a:	4618      	mov	r0, r3
    9c9c:	f7ff f962 	bl	8f64 <__assert_func>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
    9ca0:	461a      	mov	r2, r3
    9ca2:	4619      	mov	r1, r3
    9ca4:	4618      	mov	r0, r3
    9ca6:	f7ff f95d 	bl	8f64 <__assert_func>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
    9caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    9cac:	6013      	str	r3, [r2, #0]
    9cae:	e7db      	b.n	9c68 <os_sched_wakeup+0x20>
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
    9cb0:	6c82      	ldr	r2, [r0, #72]	; 0x48
    9cb2:	4b01      	ldr	r3, [pc, #4]	; (9cb8 <os_sched_wakeup+0x70>)
    9cb4:	605a      	str	r2, [r3, #4]
    9cb6:	e7e6      	b.n	9c86 <os_sched_wakeup+0x3e>
    9cb8:	20000550 	.word	0x20000550

00009cbc <os_sched_os_timer_exp>:
 * removed from the sleep list and added to the run list.
 *
 */
void
os_sched_os_timer_exp(void)
{
    9cbc:	b570      	push	{r4, r5, r6, lr}
    struct os_task *t;
    struct os_task *next;
    os_time_t now;
    os_sr_t sr;

    now = os_time_get();
    9cbe:	f000 fa43 	bl	a148 <os_time_get>
    9cc2:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
    9cc4:	f000 fb66 	bl	a394 <os_arch_save_sr>
    9cc8:	4606      	mov	r6, r0

    /*
     * Wakeup any tasks that have their sleep timer expired
     */
    t = TAILQ_FIRST(&g_os_sleep_list);
    9cca:	4b0a      	ldr	r3, [pc, #40]	; (9cf4 <os_sched_os_timer_exp+0x38>)
    9ccc:	6818      	ldr	r0, [r3, #0]
    while (t) {
    9cce:	e002      	b.n	9cd6 <os_sched_os_timer_exp+0x1a>
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
            break;
        }
        next = TAILQ_NEXT(t, t_os_list);
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
            os_sched_wakeup(t);
    9cd0:	f7ff ffba 	bl	9c48 <os_sched_wakeup>
        } else {
            break;
        }
        t = next;
    9cd4:	4620      	mov	r0, r4
    while (t) {
    9cd6:	b140      	cbz	r0, 9cea <os_sched_os_timer_exp+0x2e>
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
    9cd8:	7b43      	ldrb	r3, [r0, #13]
    9cda:	f013 0f01 	tst.w	r3, #1
    9cde:	d104      	bne.n	9cea <os_sched_os_timer_exp+0x2e>
        next = TAILQ_NEXT(t, t_os_list);
    9ce0:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
    9ce2:	6b43      	ldr	r3, [r0, #52]	; 0x34
    9ce4:	1aeb      	subs	r3, r5, r3
    9ce6:	2b00      	cmp	r3, #0
    9ce8:	daf2      	bge.n	9cd0 <os_sched_os_timer_exp+0x14>
    }

    OS_EXIT_CRITICAL(sr);
    9cea:	4630      	mov	r0, r6
    9cec:	f000 fb58 	bl	a3a0 <os_arch_restore_sr>
}
    9cf0:	bd70      	pop	{r4, r5, r6, pc}
    9cf2:	bf00      	nop
    9cf4:	20000550 	.word	0x20000550

00009cf8 <os_sched_wakeup_ticks>:
 * Return the number of ticks until the first sleep timer expires.If there are
 * no such tasks then return OS_TIMEOUT_NEVER instead.
 */
os_time_t
os_sched_wakeup_ticks(os_time_t now)
{
    9cf8:	b510      	push	{r4, lr}
    9cfa:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_task *t;

    OS_ASSERT_CRITICAL();
    9cfc:	f000 fb53 	bl	a3a6 <os_arch_in_critical>
    9d00:	b150      	cbz	r0, 9d18 <os_sched_wakeup_ticks+0x20>

    t = TAILQ_FIRST(&g_os_sleep_list);
    9d02:	4b0c      	ldr	r3, [pc, #48]	; (9d34 <os_sched_wakeup_ticks+0x3c>)
    9d04:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
    9d06:	b17b      	cbz	r3, 9d28 <os_sched_wakeup_ticks+0x30>
    9d08:	7b5a      	ldrb	r2, [r3, #13]
    9d0a:	f012 0f01 	tst.w	r2, #1
    9d0e:	d10e      	bne.n	9d2e <os_sched_wakeup_ticks+0x36>
        rt = OS_TIMEOUT_NEVER;
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
    9d10:	6b58      	ldr	r0, [r3, #52]	; 0x34
    9d12:	1b00      	subs	r0, r0, r4
    9d14:	d406      	bmi.n	9d24 <os_sched_wakeup_ticks+0x2c>
        rt = t->t_next_wakeup - now;
    } else {
        rt = 0;     /* wakeup time was in the past */
    }
    return (rt);
}
    9d16:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
    9d18:	2300      	movs	r3, #0
    9d1a:	461a      	mov	r2, r3
    9d1c:	4619      	mov	r1, r3
    9d1e:	4618      	mov	r0, r3
    9d20:	f7ff f920 	bl	8f64 <__assert_func>
        rt = 0;     /* wakeup time was in the past */
    9d24:	2000      	movs	r0, #0
    9d26:	e7f6      	b.n	9d16 <os_sched_wakeup_ticks+0x1e>
        rt = OS_TIMEOUT_NEVER;
    9d28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9d2c:	e7f3      	b.n	9d16 <os_sched_wakeup_ticks+0x1e>
    9d2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
    9d32:	e7f0      	b.n	9d16 <os_sched_wakeup_ticks+0x1e>
    9d34:	20000550 	.word	0x20000550

00009d38 <os_sched_next_task>:
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
}
    9d38:	4b01      	ldr	r3, [pc, #4]	; (9d40 <os_sched_next_task+0x8>)
    9d3a:	6818      	ldr	r0, [r3, #0]
    9d3c:	4770      	bx	lr
    9d3e:	bf00      	nop
    9d40:	20000548 	.word	0x20000548

00009d44 <os_sched>:
{
    9d44:	b538      	push	{r3, r4, r5, lr}
    9d46:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
    9d48:	f000 fb24 	bl	a394 <os_arch_save_sr>
    9d4c:	4605      	mov	r5, r0
    if (!next_t) {
    9d4e:	b134      	cbz	r4, 9d5e <os_sched+0x1a>
    os_arch_ctx_sw(next_t);
    9d50:	4620      	mov	r0, r4
    9d52:	f000 fb15 	bl	a380 <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
    9d56:	4628      	mov	r0, r5
    9d58:	f000 fb22 	bl	a3a0 <os_arch_restore_sr>
}
    9d5c:	bd38      	pop	{r3, r4, r5, pc}
        next_t = os_sched_next_task();
    9d5e:	f7ff ffeb 	bl	9d38 <os_sched_next_task>
    9d62:	4604      	mov	r4, r0
    9d64:	e7f4      	b.n	9d50 <os_sched+0xc>
	...

00009d68 <os_sched_resort>:
 * NOTE: this function expects interrupts to be disabled so they
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
    9d68:	b508      	push	{r3, lr}
    if (t->t_state == OS_TASK_READY) {
    9d6a:	7b03      	ldrb	r3, [r0, #12]
    9d6c:	2b01      	cmp	r3, #1
    9d6e:	d000      	beq.n	9d72 <os_sched_resort+0xa>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
        os_sched_insert(t);
    }
}
    9d70:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    9d72:	6c43      	ldr	r3, [r0, #68]	; 0x44
    9d74:	b13b      	cbz	r3, 9d86 <os_sched_resort+0x1e>
    9d76:	6c82      	ldr	r2, [r0, #72]	; 0x48
    9d78:	649a      	str	r2, [r3, #72]	; 0x48
    9d7a:	6c83      	ldr	r3, [r0, #72]	; 0x48
    9d7c:	6c42      	ldr	r2, [r0, #68]	; 0x44
    9d7e:	601a      	str	r2, [r3, #0]
        os_sched_insert(t);
    9d80:	f7ff fe8a 	bl	9a98 <os_sched_insert>
}
    9d84:	e7f4      	b.n	9d70 <os_sched_resort+0x8>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    9d86:	6c82      	ldr	r2, [r0, #72]	; 0x48
    9d88:	4b01      	ldr	r3, [pc, #4]	; (9d90 <os_sched_resort+0x28>)
    9d8a:	605a      	str	r2, [r3, #4]
    9d8c:	e7f5      	b.n	9d7a <os_sched_resort+0x12>
    9d8e:	bf00      	nop
    9d90:	20000548 	.word	0x20000548

00009d94 <os_sem_init>:
{
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_INIT, (uint32_t)sem, (uint32_t)tokens);

    if (!sem) {
    9d94:	4603      	mov	r3, r0
    9d96:	b118      	cbz	r0, 9da0 <os_sem_init+0xc>
        ret = OS_INVALID_PARM;
        goto done;
    }

    sem->sem_tokens = tokens;
    9d98:	80c1      	strh	r1, [r0, #6]
    SLIST_FIRST(&sem->sem_head) = NULL;
    9d9a:	2000      	movs	r0, #0
    9d9c:	6018      	str	r0, [r3, #0]

    ret = OS_OK;
    9d9e:	4770      	bx	lr
        ret = OS_INVALID_PARM;
    9da0:	2003      	movs	r0, #3

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_INIT, (uint32_t)ret);
    return ret;
}
    9da2:	4770      	bx	lr

00009da4 <os_sem_release>:

os_error_t
os_sem_release(struct os_sem *sem)
{
    9da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)sem);

    /* OS must be started to release semaphores */
    if (!g_os_started) {
    9da6:	4b17      	ldr	r3, [pc, #92]	; (9e04 <os_sem_release+0x60>)
    9da8:	681b      	ldr	r3, [r3, #0]
    9daa:	b33b      	cbz	r3, 9dfc <os_sem_release+0x58>
    9dac:	4604      	mov	r4, r0
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
    9dae:	b338      	cbz	r0, 9e00 <os_sem_release+0x5c>
        goto done;
    }

    /* Get current task */
    resched = 0;
    current = os_sched_get_current_task();
    9db0:	f7ff feb4 	bl	9b1c <os_sched_get_current_task>
    9db4:	4607      	mov	r7, r0

    OS_ENTER_CRITICAL(sr);
    9db6:	f000 faed 	bl	a394 <os_arch_save_sr>
    9dba:	4606      	mov	r6, r0

    /* Check if tasks are waiting for the semaphore */
    rdy = SLIST_FIRST(&sem->sem_head);
    9dbc:	6825      	ldr	r5, [r4, #0]
    if (rdy) {
    9dbe:	b165      	cbz	r5, 9dda <os_sem_release+0x36>
        /* Clear flag that we are waiting on the semaphore; wake up task */
        rdy->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
    9dc0:	7b6b      	ldrb	r3, [r5, #13]
    9dc2:	f023 0302 	bic.w	r3, r3, #2
    9dc6:	736b      	strb	r3, [r5, #13]
        os_sched_wakeup(rdy);
    9dc8:	4628      	mov	r0, r5
    9dca:	f7ff ff3d 	bl	9c48 <os_sched_wakeup>

        /* Schedule if waiting task higher priority */
        if (current->t_prio > rdy->t_prio) {
    9dce:	7afa      	ldrb	r2, [r7, #11]
    9dd0:	7aeb      	ldrb	r3, [r5, #11]
    9dd2:	429a      	cmp	r2, r3
    9dd4:	d80b      	bhi.n	9dee <os_sem_release+0x4a>
    resched = 0;
    9dd6:	2400      	movs	r4, #0
    9dd8:	e003      	b.n	9de2 <os_sem_release+0x3e>
            resched = 1;
        }
    } else {
        /* Add to the number of tokens */
        sem->sem_tokens++;
    9dda:	88e3      	ldrh	r3, [r4, #6]
    9ddc:	3301      	adds	r3, #1
    9dde:	80e3      	strh	r3, [r4, #6]
    resched = 0;
    9de0:	2400      	movs	r4, #0
    }

    OS_EXIT_CRITICAL(sr);
    9de2:	4630      	mov	r0, r6
    9de4:	f000 fadc 	bl	a3a0 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
    9de8:	b91c      	cbnz	r4, 9df2 <os_sem_release+0x4e>
        os_sched(rdy);
    }

    ret = OS_OK;
    9dea:	2000      	movs	r0, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)ret);
    return ret;
}
    9dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            resched = 1;
    9dee:	2401      	movs	r4, #1
    9df0:	e7f7      	b.n	9de2 <os_sem_release+0x3e>
        os_sched(rdy);
    9df2:	4628      	mov	r0, r5
    9df4:	f7ff ffa6 	bl	9d44 <os_sched>
    ret = OS_OK;
    9df8:	2000      	movs	r0, #0
    9dfa:	e7f7      	b.n	9dec <os_sem_release+0x48>
        ret = OS_NOT_STARTED;
    9dfc:	2009      	movs	r0, #9
    9dfe:	e7f5      	b.n	9dec <os_sem_release+0x48>
        ret = OS_INVALID_PARM;
    9e00:	2003      	movs	r0, #3
    9e02:	e7f3      	b.n	9dec <os_sem_release+0x48>
    9e04:	20002648 	.word	0x20002648

00009e08 <os_sem_pend>:

os_error_t
os_sem_pend(struct os_sem *sem, os_time_t timeout)
{
    9e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_PEND, (uint32_t)sem, (uint32_t)timeout);

    /* Check if OS is started */
    if (!g_os_started) {
    9e0a:	4b2b      	ldr	r3, [pc, #172]	; (9eb8 <os_sem_pend+0xb0>)
    9e0c:	681b      	ldr	r3, [r3, #0]
    9e0e:	2b00      	cmp	r3, #0
    9e10:	d04d      	beq.n	9eae <os_sem_pend+0xa6>
    9e12:	4604      	mov	r4, r0
    9e14:	460f      	mov	r7, r1
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
    9e16:	2800      	cmp	r0, #0
    9e18:	d04b      	beq.n	9eb2 <os_sem_pend+0xaa>
        goto done;
    }

    /* Assume we dont have to put task to sleep; get current task */
    sched = 0;
    current = os_sched_get_current_task();
    9e1a:	f7ff fe7f 	bl	9b1c <os_sched_get_current_task>
    9e1e:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
    9e20:	f000 fab8 	bl	a394 <os_arch_save_sr>
    9e24:	4606      	mov	r6, r0

    /*
     * If there is a token available, take it. If no token, either return
     * with error if timeout was 0 or put this task to sleep.
     */
    if (sem->sem_tokens != 0) {
    9e26:	88e3      	ldrh	r3, [r4, #6]
    9e28:	b14b      	cbz	r3, 9e3e <os_sem_pend+0x36>
        sem->sem_tokens--;
    9e2a:	3b01      	subs	r3, #1
    9e2c:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
    9e2e:	2400      	movs	r4, #0
    sched = 0;
    9e30:	4627      	mov	r7, r4
        /* We will put this task to sleep */
        sched = 1;
        os_sched_sleep(current, timeout);
    }

    OS_EXIT_CRITICAL(sr);
    9e32:	4630      	mov	r0, r6
    9e34:	f000 fab4 	bl	a3a0 <os_arch_restore_sr>

    if (sched) {
    9e38:	bb47      	cbnz	r7, 9e8c <os_sem_pend+0x84>
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_PEND, (uint32_t)ret);
    return ret;
}
    9e3a:	4620      	mov	r0, r4
    9e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (timeout == 0) {
    9e3e:	b317      	cbz	r7, 9e86 <os_sem_pend+0x7e>
        current->t_obj = sem;
    9e40:	61ec      	str	r4, [r5, #28]
        current->t_flags |= OS_TASK_FLAG_SEM_WAIT;
    9e42:	7b6b      	ldrb	r3, [r5, #13]
    9e44:	f043 0302 	orr.w	r3, r3, #2
    9e48:	736b      	strb	r3, [r5, #13]
        if (!SLIST_EMPTY(&sem->sem_head)) {
    9e4a:	f8d4 c000 	ldr.w	ip, [r4]
    9e4e:	f1bc 0f00 	cmp.w	ip, #0
    9e52:	d00e      	beq.n	9e72 <os_sem_pend+0x6a>
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
    9e54:	4663      	mov	r3, ip
        last = NULL;
    9e56:	2000      	movs	r0, #0
    9e58:	e001      	b.n	9e5e <os_sem_pend+0x56>
                last = entry;
    9e5a:	4618      	mov	r0, r3
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
    9e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    9e5e:	b11b      	cbz	r3, 9e68 <os_sem_pend+0x60>
                if (current->t_prio < entry->t_prio) {
    9e60:	7ae9      	ldrb	r1, [r5, #11]
    9e62:	7ada      	ldrb	r2, [r3, #11]
    9e64:	4291      	cmp	r1, r2
    9e66:	d2f8      	bcs.n	9e5a <os_sem_pend+0x52>
        if (last) {
    9e68:	b118      	cbz	r0, 9e72 <os_sem_pend+0x6a>
            SLIST_INSERT_AFTER(last, current, t_obj_list);
    9e6a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    9e6c:	64eb      	str	r3, [r5, #76]	; 0x4c
    9e6e:	64c5      	str	r5, [r0, #76]	; 0x4c
    9e70:	e002      	b.n	9e78 <os_sem_pend+0x70>
            SLIST_INSERT_HEAD(&sem->sem_head, current, t_obj_list);
    9e72:	f8c5 c04c 	str.w	ip, [r5, #76]	; 0x4c
    9e76:	6025      	str	r5, [r4, #0]
        os_sched_sleep(current, timeout);
    9e78:	4639      	mov	r1, r7
    9e7a:	4628      	mov	r0, r5
    9e7c:	f7ff fe5a 	bl	9b34 <os_sched_sleep>
        ret = OS_OK;
    9e80:	2400      	movs	r4, #0
        sched = 1;
    9e82:	2701      	movs	r7, #1
    9e84:	e7d5      	b.n	9e32 <os_sem_pend+0x2a>
        ret = OS_TIMEOUT;
    9e86:	2406      	movs	r4, #6
    sched = 0;
    9e88:	2700      	movs	r7, #0
    9e8a:	e7d2      	b.n	9e32 <os_sem_pend+0x2a>
        os_sched(NULL);
    9e8c:	2000      	movs	r0, #0
    9e8e:	f7ff ff59 	bl	9d44 <os_sched>
        if (current->t_flags & OS_TASK_FLAG_SEM_WAIT) {
    9e92:	7b6c      	ldrb	r4, [r5, #13]
    9e94:	f014 0402 	ands.w	r4, r4, #2
    9e98:	d0cf      	beq.n	9e3a <os_sem_pend+0x32>
            OS_ENTER_CRITICAL(sr);
    9e9a:	f000 fa7b 	bl	a394 <os_arch_save_sr>
            current->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
    9e9e:	7b6b      	ldrb	r3, [r5, #13]
    9ea0:	f023 0302 	bic.w	r3, r3, #2
    9ea4:	736b      	strb	r3, [r5, #13]
            OS_EXIT_CRITICAL(sr);
    9ea6:	f000 fa7b 	bl	a3a0 <os_arch_restore_sr>
            ret = OS_TIMEOUT;
    9eaa:	2406      	movs	r4, #6
    9eac:	e7c5      	b.n	9e3a <os_sem_pend+0x32>
        ret = OS_NOT_STARTED;
    9eae:	2409      	movs	r4, #9
    9eb0:	e7c3      	b.n	9e3a <os_sem_pend+0x32>
        ret = OS_INVALID_PARM;
    9eb2:	2403      	movs	r4, #3
    9eb4:	e7c1      	b.n	9e3a <os_sem_pend+0x32>
    9eb6:	bf00      	nop
    9eb8:	20002648 	.word	0x20002648

00009ebc <_clear_stack>:
static void
_clear_stack(os_stack_t *stack_bottom, int size)
{
    int i;

    for (i = 0; i < size; i++) {
    9ebc:	2300      	movs	r3, #0
    9ebe:	e003      	b.n	9ec8 <_clear_stack+0xc>
        stack_bottom[i] = OS_STACK_PATTERN;
    9ec0:	4a03      	ldr	r2, [pc, #12]	; (9ed0 <_clear_stack+0x14>)
    9ec2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < size; i++) {
    9ec6:	3301      	adds	r3, #1
    9ec8:	428b      	cmp	r3, r1
    9eca:	dbf9      	blt.n	9ec0 <_clear_stack+0x4>
    }
}
    9ecc:	4770      	bx	lr
    9ece:	bf00      	nop
    9ed0:	deadbeef 	.word	0xdeadbeef

00009ed4 <os_task_init>:

int
os_task_init(struct os_task *t, const char *name, os_task_func_t func,
        void *arg, uint8_t prio, os_time_t sanity_itvl,
        os_stack_t *stack_bottom, uint16_t stack_size)
{
    9ed4:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
    9ed8:	4604      	mov	r4, r0
    9eda:	460d      	mov	r5, r1
    9edc:	4617      	mov	r7, r2
    9ede:	461e      	mov	r6, r3
    9ee0:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
    struct os_sanity_check *sc;
    int rc;
    struct os_task *task;

    memset(t, 0, sizeof(*t));
    9ee4:	2250      	movs	r2, #80	; 0x50
    9ee6:	2100      	movs	r1, #0
    9ee8:	f003 fdf7 	bl	dada <memset>

    t->t_func = func;
    9eec:	6167      	str	r7, [r4, #20]
    t->t_arg = arg;
    9eee:	61a6      	str	r6, [r4, #24]
    OS_ENTER_CRITICAL(sr);
    9ef0:	f000 fa50 	bl	a394 <os_arch_save_sr>
    rc = g_task_id;
    9ef4:	4b2b      	ldr	r3, [pc, #172]	; (9fa4 <os_task_init+0xd0>)
    9ef6:	781e      	ldrb	r6, [r3, #0]
    g_task_id++;
    9ef8:	1c72      	adds	r2, r6, #1
    9efa:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
    9efc:	f000 fa50 	bl	a3a0 <os_arch_restore_sr>

    t->t_taskid = os_task_next_id();
    9f00:	72a6      	strb	r6, [r4, #10]
    t->t_prio = prio;
    9f02:	f89d 3018 	ldrb.w	r3, [sp, #24]
    9f06:	72e3      	strb	r3, [r4, #11]

    t->t_state = OS_TASK_READY;
    9f08:	2301      	movs	r3, #1
    9f0a:	7323      	strb	r3, [r4, #12]
    t->t_name = name;
    9f0c:	6125      	str	r5, [r4, #16]
    t->t_next_wakeup = 0;
    9f0e:	2300      	movs	r3, #0
    9f10:	6363      	str	r3, [r4, #52]	; 0x34

    rc = os_sanity_check_init(&t->t_sanity_check);
    9f12:	f104 0620 	add.w	r6, r4, #32
    9f16:	4630      	mov	r0, r6
    9f18:	f7ff fd68 	bl	99ec <os_sanity_check_init>
    if (rc != OS_OK) {
    9f1c:	4605      	mov	r5, r0
    9f1e:	2800      	cmp	r0, #0
    9f20:	d133      	bne.n	9f8a <os_task_init+0xb6>
        goto err;
    }

    if (sanity_itvl != OS_WAIT_FOREVER) {
    9f22:	9b07      	ldr	r3, [sp, #28]
    9f24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    9f28:	d005      	beq.n	9f36 <os_task_init+0x62>
        sc = (struct os_sanity_check *) &t->t_sanity_check;
        sc->sc_checkin_itvl = sanity_itvl;
    9f2a:	6263      	str	r3, [r4, #36]	; 0x24

        rc = os_sanity_check_register(sc);
    9f2c:	4630      	mov	r0, r6
    9f2e:	f7ff fd65 	bl	99fc <os_sanity_check_register>
        if (rc != OS_OK) {
    9f32:	4605      	mov	r5, r0
    9f34:	bb48      	cbnz	r0, 9f8a <os_task_init+0xb6>
            goto err;
        }
    }

    _clear_stack(stack_bottom, stack_size);
    9f36:	4649      	mov	r1, r9
    9f38:	9808      	ldr	r0, [sp, #32]
    9f3a:	f7ff ffbf 	bl	9ebc <_clear_stack>
    t->t_stacktop = &stack_bottom[stack_size];
    9f3e:	9b08      	ldr	r3, [sp, #32]
    9f40:	eb03 0189 	add.w	r1, r3, r9, lsl #2
    9f44:	6061      	str	r1, [r4, #4]
    t->t_stacksize = stack_size;
    9f46:	f8a4 9008 	strh.w	r9, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, t->t_stacktop,
    9f4a:	464a      	mov	r2, r9
    9f4c:	4620      	mov	r0, r4
    9f4e:	f000 fa2f 	bl	a3b0 <os_arch_task_stack_init>
    9f52:	6020      	str	r0, [r4, #0]
            t->t_stacksize);

    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
    9f54:	4b14      	ldr	r3, [pc, #80]	; (9fa8 <os_task_init+0xd4>)
    9f56:	681b      	ldr	r3, [r3, #0]
    9f58:	b15b      	cbz	r3, 9f72 <os_task_init+0x9e>
        assert(t->t_prio != task->t_prio);
    9f5a:	7ae1      	ldrb	r1, [r4, #11]
    9f5c:	7ada      	ldrb	r2, [r3, #11]
    9f5e:	4291      	cmp	r1, r2
    9f60:	d001      	beq.n	9f66 <os_task_init+0x92>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
    9f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9f64:	e7f8      	b.n	9f58 <os_task_init+0x84>
        assert(t->t_prio != task->t_prio);
    9f66:	2300      	movs	r3, #0
    9f68:	461a      	mov	r2, r3
    9f6a:	4619      	mov	r1, r3
    9f6c:	4618      	mov	r0, r3
    9f6e:	f7fe fff9 	bl	8f64 <__assert_func>
    }

    /* insert this task into the task list */
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
    9f72:	6423      	str	r3, [r4, #64]	; 0x40
    9f74:	4b0c      	ldr	r3, [pc, #48]	; (9fa8 <os_task_init+0xd4>)
    9f76:	685a      	ldr	r2, [r3, #4]
    9f78:	6014      	str	r4, [r2, #0]
    9f7a:	f104 0240 	add.w	r2, r4, #64	; 0x40
    9f7e:	605a      	str	r2, [r3, #4]

    /* insert this task into the scheduler list */
    rc = os_sched_insert(t);
    9f80:	4620      	mov	r0, r4
    9f82:	f7ff fd89 	bl	9a98 <os_sched_insert>
    9f86:	4605      	mov	r5, r0
    if (rc != OS_OK) {
    9f88:	b110      	cbz	r0, 9f90 <os_task_init+0xbc>
    }

    return (0);
err:
    return (rc);
}
    9f8a:	4628      	mov	r0, r5
    9f8c:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
    if (os_started()) {
    9f90:	f7ff f8a2 	bl	90d8 <os_started>
    9f94:	b908      	cbnz	r0, 9f9a <os_task_init+0xc6>
    return (0);
    9f96:	4605      	mov	r5, r0
    9f98:	e7f7      	b.n	9f8a <os_task_init+0xb6>
        os_sched(NULL);
    9f9a:	2000      	movs	r0, #0
    9f9c:	f7ff fed2 	bl	9d44 <os_sched>
    9fa0:	e7f3      	b.n	9f8a <os_task_init+0xb6>
    9fa2:	bf00      	nop
    9fa4:	2000346c 	.word	0x2000346c
    9fa8:	20003464 	.word	0x20003464

00009fac <os_task_remove>:

int
os_task_remove(struct os_task *t)
{
    9fac:	b538      	push	{r3, r4, r5, lr}
    9fae:	4604      	mov	r4, r0
    os_sr_t sr;

    /*
     * Can't suspend yourself
     */
    if (t == os_sched_get_current_task()) {
    9fb0:	f7ff fdb4 	bl	9b1c <os_sched_get_current_task>
    9fb4:	4284      	cmp	r4, r0
    9fb6:	d016      	beq.n	9fe6 <os_task_remove+0x3a>
    }

    /*
     * If state is not READY or SLEEP, assume task has not been initialized
     */
    if (t->t_state != OS_TASK_READY && t->t_state != OS_TASK_SLEEP)
    9fb8:	7b23      	ldrb	r3, [r4, #12]
    9fba:	3b01      	subs	r3, #1
    9fbc:	b2db      	uxtb	r3, r3
    9fbe:	2b01      	cmp	r3, #1
    9fc0:	d813      	bhi.n	9fea <os_task_remove+0x3e>
    }

    /*
     * Disallow suspending tasks which are waiting on a lock
     */
    if (t->t_flags & (OS_TASK_FLAG_SEM_WAIT | OS_TASK_FLAG_MUTEX_WAIT |
    9fc2:	7b63      	ldrb	r3, [r4, #13]
    9fc4:	f013 0f0e 	tst.w	r3, #14
    9fc8:	d111      	bne.n	9fee <os_task_remove+0x42>
    }

    /*
     * Disallowing suspending tasks which are holding a mutex
     */
    if (t->t_lockcnt) {
    9fca:	7ba3      	ldrb	r3, [r4, #14]
    9fcc:	b98b      	cbnz	r3, 9ff2 <os_task_remove+0x46>
        return OS_EBUSY;
    }

    OS_ENTER_CRITICAL(sr);
    9fce:	f000 f9e1 	bl	a394 <os_arch_save_sr>
    9fd2:	4605      	mov	r5, r0
    rc = os_sched_remove(t);
    9fd4:	4620      	mov	r0, r4
    9fd6:	f7ff fdf5 	bl	9bc4 <os_sched_remove>
    9fda:	4604      	mov	r4, r0
    OS_EXIT_CRITICAL(sr);
    9fdc:	4628      	mov	r0, r5
    9fde:	f000 f9df 	bl	a3a0 <os_arch_restore_sr>
    return rc;
}
    9fe2:	4620      	mov	r0, r4
    9fe4:	bd38      	pop	{r3, r4, r5, pc}
        return OS_INVALID_PARM;
    9fe6:	2403      	movs	r4, #3
    9fe8:	e7fb      	b.n	9fe2 <os_task_remove+0x36>
        return OS_NOT_STARTED;
    9fea:	2409      	movs	r4, #9
    9fec:	e7f9      	b.n	9fe2 <os_task_remove+0x36>
        return OS_EBUSY;
    9fee:	240b      	movs	r4, #11
    9ff0:	e7f7      	b.n	9fe2 <os_task_remove+0x36>
        return OS_EBUSY;
    9ff2:	240b      	movs	r4, #11
    9ff4:	e7f5      	b.n	9fe2 <os_task_remove+0x36>
	...

00009ff8 <os_task_info_get_next>:


struct os_task *
os_task_info_get_next(const struct os_task *prev, struct os_task_info *oti)
{
    9ff8:	b538      	push	{r3, r4, r5, lr}
    9ffa:	468c      	mov	ip, r1
    struct os_task *next;
    os_stack_t *top;
    os_stack_t *bottom;

    if (prev != NULL) {
    9ffc:	b1b8      	cbz	r0, a02e <os_task_info_get_next+0x36>
        next = STAILQ_NEXT(prev, t_os_task_list);
    9ffe:	6c05      	ldr	r5, [r0, #64]	; 0x40
    } else {
        next = STAILQ_FIRST(&g_os_task_list);
    }

    if (next == NULL) {
    a000:	2d00      	cmp	r5, #0
    a002:	d032      	beq.n	a06a <os_task_info_get_next+0x72>
    }

    /* Otherwise, copy OS task information into the OTI structure, and
     * return 1, which means continue
     */
    oti->oti_prio = next->t_prio;
    a004:	7aeb      	ldrb	r3, [r5, #11]
    a006:	f88c 3000 	strb.w	r3, [ip]
    oti->oti_taskid = next->t_taskid;
    a00a:	7aab      	ldrb	r3, [r5, #10]
    a00c:	f88c 3001 	strb.w	r3, [ip, #1]
    oti->oti_state = next->t_state;
    a010:	7b2b      	ldrb	r3, [r5, #12]
    a012:	f88c 3002 	strb.w	r3, [ip, #2]

    top = next->t_stacktop;
    a016:	686c      	ldr	r4, [r5, #4]
    bottom = next->t_stacktop - next->t_stacksize;
    a018:	892b      	ldrh	r3, [r5, #8]
    a01a:	eba4 0383 	sub.w	r3, r4, r3, lsl #2
    while (bottom < top) {
    a01e:	42a3      	cmp	r3, r4
    a020:	d208      	bcs.n	a034 <os_task_info_get_next+0x3c>
        if (*bottom != OS_STACK_PATTERN) {
    a022:	4a13      	ldr	r2, [pc, #76]	; (a070 <os_task_info_get_next+0x78>)
    a024:	6819      	ldr	r1, [r3, #0]
    a026:	4291      	cmp	r1, r2
    a028:	d104      	bne.n	a034 <os_task_info_get_next+0x3c>
            break;
        }
        ++bottom;
    a02a:	3304      	adds	r3, #4
    a02c:	e7f7      	b.n	a01e <os_task_info_get_next+0x26>
        next = STAILQ_FIRST(&g_os_task_list);
    a02e:	4b11      	ldr	r3, [pc, #68]	; (a074 <os_task_info_get_next+0x7c>)
    a030:	681d      	ldr	r5, [r3, #0]
    a032:	e7e5      	b.n	a000 <os_task_info_get_next+0x8>
    }

    oti->oti_stkusage = (uint16_t) (next->t_stacktop - bottom);
    a034:	1ae3      	subs	r3, r4, r3
    a036:	f3c3 038f 	ubfx	r3, r3, #2, #16
    a03a:	f8ac 3004 	strh.w	r3, [ip, #4]
    oti->oti_stksize = next->t_stacksize;
    a03e:	892b      	ldrh	r3, [r5, #8]
    a040:	f8ac 3006 	strh.w	r3, [ip, #6]
    oti->oti_cswcnt = next->t_ctx_sw_cnt;
    a044:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    a046:	f8cc 3008 	str.w	r3, [ip, #8]
    oti->oti_runtime = next->t_run_time;
    a04a:	6bab      	ldr	r3, [r5, #56]	; 0x38
    a04c:	f8cc 300c 	str.w	r3, [ip, #12]
    oti->oti_last_checkin = next->t_sanity_check.sc_checkin_last;
    a050:	6a2b      	ldr	r3, [r5, #32]
    a052:	f8cc 3010 	str.w	r3, [ip, #16]
    oti->oti_next_checkin = next->t_sanity_check.sc_checkin_last +
        next->t_sanity_check.sc_checkin_itvl;
    a056:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    oti->oti_next_checkin = next->t_sanity_check.sc_checkin_last +
    a058:	4413      	add	r3, r2
    a05a:	f8cc 3014 	str.w	r3, [ip, #20]
    strncpy(oti->oti_name, next->t_name, sizeof(oti->oti_name));
    a05e:	2220      	movs	r2, #32
    a060:	6929      	ldr	r1, [r5, #16]
    a062:	f10c 0018 	add.w	r0, ip, #24
    a066:	f003 fd77 	bl	db58 <strncpy>

    return (next);
}
    a06a:	4628      	mov	r0, r5
    a06c:	bd38      	pop	{r3, r4, r5, pc}
    a06e:	bf00      	nop
    a070:	deadbeef 	.word	0xdeadbeef
    a074:	20003464 	.word	0x20003464

0000a078 <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
    a078:	b430      	push	{r4, r5}
    a07a:	b084      	sub	sp, #16
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
    a07c:	09c4      	lsrs	r4, r0, #7
    a07e:	9400      	str	r4, [sp, #0]
    a080:	2300      	movs	r3, #0
    a082:	9301      	str	r3, [sp, #4]
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
    a084:	f000 037f 	and.w	r3, r0, #127	; 0x7f
    a088:	f641 6084 	movw	r0, #7812	; 0x1e84
    a08c:	fb00 f303 	mul.w	r3, r0, r3
    a090:	9302      	str	r3, [sp, #8]
    os_timeradd(base, &tvdelta, result);
    a092:	6848      	ldr	r0, [r1, #4]
    a094:	680d      	ldr	r5, [r1, #0]
    a096:	1964      	adds	r4, r4, r5
    a098:	f140 0000 	adc.w	r0, r0, #0
    a09c:	6014      	str	r4, [r2, #0]
    a09e:	6050      	str	r0, [r2, #4]
    a0a0:	6889      	ldr	r1, [r1, #8]
    a0a2:	440b      	add	r3, r1
    a0a4:	6093      	str	r3, [r2, #8]
    a0a6:	4908      	ldr	r1, [pc, #32]	; (a0c8 <os_deltatime+0x50>)
    a0a8:	428b      	cmp	r3, r1
    a0aa:	dd09      	ble.n	a0c0 <os_deltatime+0x48>
    a0ac:	3401      	adds	r4, #1
    a0ae:	f140 0000 	adc.w	r0, r0, #0
    a0b2:	6014      	str	r4, [r2, #0]
    a0b4:	6050      	str	r0, [r2, #4]
    a0b6:	f5a3 2374 	sub.w	r3, r3, #999424	; 0xf4000
    a0ba:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
    a0be:	6093      	str	r3, [r2, #8]
}
    a0c0:	b004      	add	sp, #16
    a0c2:	bc30      	pop	{r4, r5}
    a0c4:	4770      	bx	lr
    a0c6:	bf00      	nop
    a0c8:	000f423f 	.word	0x000f423f

0000a0cc <os_time_change_notify>:
    return 0;
}

static void
os_time_change_notify(const struct os_time_change_info *info)
{
    a0cc:	b538      	push	{r3, r4, r5, lr}
    a0ce:	4605      	mov	r5, r0
    struct os_time_change_listener *listener;

    STAILQ_FOREACH(listener, &os_time_change_listeners, tcl_next) {
    a0d0:	4b05      	ldr	r3, [pc, #20]	; (a0e8 <os_time_change_notify+0x1c>)
    a0d2:	681c      	ldr	r4, [r3, #0]
    a0d4:	e004      	b.n	a0e0 <os_time_change_notify+0x14>
        listener->tcl_fn(info, listener->tcl_arg);
    a0d6:	6823      	ldr	r3, [r4, #0]
    a0d8:	6861      	ldr	r1, [r4, #4]
    a0da:	4628      	mov	r0, r5
    a0dc:	4798      	blx	r3
    STAILQ_FOREACH(listener, &os_time_change_listeners, tcl_next) {
    a0de:	68a4      	ldr	r4, [r4, #8]
    a0e0:	2c00      	cmp	r4, #0
    a0e2:	d1f8      	bne.n	a0d6 <os_time_change_notify+0xa>
    }
}
    a0e4:	bd38      	pop	{r3, r4, r5, pc}
    a0e6:	bf00      	nop
    a0e8:	20000558 	.word	0x20000558

0000a0ec <os_time_tick>:
{
    a0ec:	b570      	push	{r4, r5, r6, lr}
    assert(ticks >= 0);
    a0ee:	1e04      	subs	r4, r0, #0
    a0f0:	db0d      	blt.n	a10e <os_time_tick+0x22>
    OS_ENTER_CRITICAL(sr);
    a0f2:	f000 f94f 	bl	a394 <os_arch_save_sr>
    a0f6:	4605      	mov	r5, r0
    prev_os_time = g_os_time;
    a0f8:	4911      	ldr	r1, [pc, #68]	; (a140 <os_time_tick+0x54>)
    a0fa:	680a      	ldr	r2, [r1, #0]
    g_os_time += ticks;
    a0fc:	18a3      	adds	r3, r4, r2
    a0fe:	600b      	str	r3, [r1, #0]
    if ((prev_os_time ^ g_os_time) >> 31) {
    a100:	ea93 0f02 	teq	r3, r2
    a104:	d409      	bmi.n	a11a <os_time_tick+0x2e>
    OS_EXIT_CRITICAL(sr);
    a106:	4628      	mov	r0, r5
    a108:	f000 f94a 	bl	a3a0 <os_arch_restore_sr>
}
    a10c:	bd70      	pop	{r4, r5, r6, pc}
    assert(ticks >= 0);
    a10e:	2300      	movs	r3, #0
    a110:	461a      	mov	r2, r3
    a112:	4619      	mov	r1, r3
    a114:	4618      	mov	r0, r3
    a116:	f7fe ff25 	bl	8f64 <__assert_func>
        delta = g_os_time - basetod.ostime;
    a11a:	4e0a      	ldr	r6, [pc, #40]	; (a144 <os_time_tick+0x58>)
    a11c:	4631      	mov	r1, r6
    a11e:	f851 4b08 	ldr.w	r4, [r1], #8
    a122:	1b1c      	subs	r4, r3, r4
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
    a124:	460a      	mov	r2, r1
    a126:	4620      	mov	r0, r4
    a128:	f7ff ffa6 	bl	a078 <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
    a12c:	f106 0118 	add.w	r1, r6, #24
    a130:	460a      	mov	r2, r1
    a132:	4620      	mov	r0, r4
    a134:	f7ff ffa0 	bl	a078 <os_deltatime>
        basetod.ostime = g_os_time;
    a138:	4b01      	ldr	r3, [pc, #4]	; (a140 <os_time_tick+0x54>)
    a13a:	681b      	ldr	r3, [r3, #0]
    a13c:	6033      	str	r3, [r6, #0]
    a13e:	e7e2      	b.n	a106 <os_time_tick+0x1a>
    a140:	200034a0 	.word	0x200034a0
    a144:	20003470 	.word	0x20003470

0000a148 <os_time_get>:
}
    a148:	4b01      	ldr	r3, [pc, #4]	; (a150 <os_time_get+0x8>)
    a14a:	6818      	ldr	r0, [r3, #0]
    a14c:	4770      	bx	lr
    a14e:	bf00      	nop
    a150:	200034a0 	.word	0x200034a0

0000a154 <os_time_advance>:
{
    a154:	b510      	push	{r4, lr}
    assert(ticks >= 0);
    a156:	1e04      	subs	r4, r0, #0
    a158:	db02      	blt.n	a160 <os_time_advance+0xc>
    if (ticks > 0) {
    a15a:	2c00      	cmp	r4, #0
    a15c:	dc06      	bgt.n	a16c <os_time_advance+0x18>
}
    a15e:	bd10      	pop	{r4, pc}
    assert(ticks >= 0);
    a160:	2300      	movs	r3, #0
    a162:	461a      	mov	r2, r3
    a164:	4619      	mov	r1, r3
    a166:	4618      	mov	r0, r3
    a168:	f7fe fefc 	bl	8f64 <__assert_func>
        if (!os_started()) {
    a16c:	f7fe ffb4 	bl	90d8 <os_started>
    a170:	b920      	cbnz	r0, a17c <os_time_advance+0x28>
            g_os_time += ticks;
    a172:	4b08      	ldr	r3, [pc, #32]	; (a194 <os_time_advance+0x40>)
    a174:	6818      	ldr	r0, [r3, #0]
    a176:	4420      	add	r0, r4
    a178:	6018      	str	r0, [r3, #0]
    a17a:	e7f0      	b.n	a15e <os_time_advance+0xa>
            os_time_tick(ticks);
    a17c:	4620      	mov	r0, r4
    a17e:	f7ff ffb5 	bl	a0ec <os_time_tick>
            os_callout_tick();
    a182:	f7ff f8e5 	bl	9350 <os_callout_tick>
            os_sched_os_timer_exp();
    a186:	f7ff fd99 	bl	9cbc <os_sched_os_timer_exp>
            os_sched(NULL);
    a18a:	2000      	movs	r0, #0
    a18c:	f7ff fdda 	bl	9d44 <os_sched>
}
    a190:	e7e5      	b.n	a15e <os_time_advance+0xa>
    a192:	bf00      	nop
    a194:	200034a0 	.word	0x200034a0

0000a198 <os_time_delay>:
    if (osticks > 0) {
    a198:	b900      	cbnz	r0, a19c <os_time_delay+0x4>
    a19a:	4770      	bx	lr
{
    a19c:	b538      	push	{r3, r4, r5, lr}
    a19e:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
    a1a0:	f000 f8f8 	bl	a394 <os_arch_save_sr>
    a1a4:	4605      	mov	r5, r0
        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);
    a1a6:	f7ff fcb9 	bl	9b1c <os_sched_get_current_task>
    a1aa:	4621      	mov	r1, r4
    a1ac:	f7ff fcc2 	bl	9b34 <os_sched_sleep>
        OS_EXIT_CRITICAL(sr);
    a1b0:	4628      	mov	r0, r5
    a1b2:	f000 f8f5 	bl	a3a0 <os_arch_restore_sr>
        os_sched(NULL);
    a1b6:	2000      	movs	r0, #0
    a1b8:	f7ff fdc4 	bl	9d44 <os_sched>
}
    a1bc:	bd38      	pop	{r3, r4, r5, pc}
	...

0000a1c0 <os_gettimeofday>:
    return (0);
}

int
os_gettimeofday(struct os_timeval *tv, struct os_timezone *tz)
{
    a1c0:	b570      	push	{r4, r5, r6, lr}
    a1c2:	4605      	mov	r5, r0
    a1c4:	460c      	mov	r4, r1
    os_sr_t sr;
    os_time_t delta;

    OS_ENTER_CRITICAL(sr);
    a1c6:	f000 f8e5 	bl	a394 <os_arch_save_sr>
    a1ca:	4606      	mov	r6, r0
    if (tv != NULL) {
    a1cc:	b145      	cbz	r5, a1e0 <os_gettimeofday+0x20>
        delta = os_time_get() - basetod.ostime;
    a1ce:	f7ff ffbb 	bl	a148 <os_time_get>
    a1d2:	4908      	ldr	r1, [pc, #32]	; (a1f4 <os_gettimeofday+0x34>)
    a1d4:	f851 3b18 	ldr.w	r3, [r1], #24
        os_deltatime(delta, &basetod.utctime, tv);
    a1d8:	462a      	mov	r2, r5
    a1da:	1ac0      	subs	r0, r0, r3
    a1dc:	f7ff ff4c 	bl	a078 <os_deltatime>
    }

    if (tz != NULL) {
    a1e0:	b114      	cbz	r4, a1e8 <os_gettimeofday+0x28>
        *tz = basetod.timezone;
    a1e2:	4b04      	ldr	r3, [pc, #16]	; (a1f4 <os_gettimeofday+0x34>)
    a1e4:	6a98      	ldr	r0, [r3, #40]	; 0x28
    a1e6:	6020      	str	r0, [r4, #0]
    }
    OS_EXIT_CRITICAL(sr);
    a1e8:	4630      	mov	r0, r6
    a1ea:	f000 f8d9 	bl	a3a0 <os_arch_restore_sr>

    return (0);
}
    a1ee:	2000      	movs	r0, #0
    a1f0:	bd70      	pop	{r4, r5, r6, pc}
    a1f2:	bf00      	nop
    a1f4:	20003470 	.word	0x20003470

0000a1f8 <os_time_is_set>:

bool
os_time_is_set(void)
{
    return basetod.utctime.tv_sec > 0;
    a1f8:	4b04      	ldr	r3, [pc, #16]	; (a20c <os_time_is_set+0x14>)
    a1fa:	699a      	ldr	r2, [r3, #24]
    a1fc:	69db      	ldr	r3, [r3, #28]
    a1fe:	2a01      	cmp	r2, #1
    a200:	f173 0300 	sbcs.w	r3, r3, #0
}
    a204:	bfac      	ite	ge
    a206:	2001      	movge	r0, #1
    a208:	2000      	movlt	r0, #0
    a20a:	4770      	bx	lr
    a20c:	20003470 	.word	0x20003470

0000a210 <os_time_populate_info>:
{
    a210:	b510      	push	{r4, lr}
    a212:	4604      	mov	r4, r0
    if (new_tv == NULL && new_tz == NULL) {
    a214:	4608      	mov	r0, r1
    a216:	b181      	cbz	r1, a23a <os_time_populate_info+0x2a>
    if (new_tv == NULL) {
    a218:	b1a0      	cbz	r0, a244 <os_time_populate_info+0x34>
    if (new_tz == NULL) {
    a21a:	b1aa      	cbz	r2, a248 <os_time_populate_info+0x38>
    info->tci_prev_tv = &basetod.utctime;
    a21c:	4b0b      	ldr	r3, [pc, #44]	; (a24c <os_time_populate_info+0x3c>)
    a21e:	f103 0118 	add.w	r1, r3, #24
    a222:	6021      	str	r1, [r4, #0]
    info->tci_cur_tv = new_tv;
    a224:	60a0      	str	r0, [r4, #8]
    info->tci_prev_tz = &basetod.timezone;
    a226:	3328      	adds	r3, #40	; 0x28
    a228:	6063      	str	r3, [r4, #4]
    info->tci_cur_tz = new_tz;
    a22a:	60e2      	str	r2, [r4, #12]
    info->tci_newly_synced = !os_time_is_set();
    a22c:	f7ff ffe4 	bl	a1f8 <os_time_is_set>
    a230:	f080 0001 	eor.w	r0, r0, #1
    a234:	7420      	strb	r0, [r4, #16]
    return 0;
    a236:	2000      	movs	r0, #0
}
    a238:	bd10      	pop	{r4, pc}
    if (new_tv == NULL && new_tz == NULL) {
    a23a:	2a00      	cmp	r2, #0
    a23c:	d1ec      	bne.n	a218 <os_time_populate_info+0x8>
        return SYS_EINVAL;
    a23e:	f06f 0001 	mvn.w	r0, #1
    a242:	e7f9      	b.n	a238 <os_time_populate_info+0x28>
        new_tv = &basetod.utctime;
    a244:	4802      	ldr	r0, [pc, #8]	; (a250 <os_time_populate_info+0x40>)
    a246:	e7e8      	b.n	a21a <os_time_populate_info+0xa>
        new_tz = &basetod.timezone;
    a248:	4a02      	ldr	r2, [pc, #8]	; (a254 <os_time_populate_info+0x44>)
    a24a:	e7e7      	b.n	a21c <os_time_populate_info+0xc>
    a24c:	20003470 	.word	0x20003470
    a250:	20003488 	.word	0x20003488
    a254:	20003498 	.word	0x20003498

0000a258 <os_settimeofday>:
{
    a258:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a25c:	b087      	sub	sp, #28
    a25e:	4604      	mov	r4, r0
    a260:	460d      	mov	r5, r1
    OS_ENTER_CRITICAL(sr);
    a262:	f000 f897 	bl	a394 <os_arch_save_sr>
    a266:	4607      	mov	r7, r0
    rc = os_time_populate_info(&info, utctime, tz);
    a268:	462a      	mov	r2, r5
    a26a:	4621      	mov	r1, r4
    a26c:	a801      	add	r0, sp, #4
    a26e:	f7ff ffcf 	bl	a210 <os_time_populate_info>
    a272:	4606      	mov	r6, r0
    if (utctime != NULL) {
    a274:	b1bc      	cbz	r4, a2a6 <os_settimeofday+0x4e>
        delta = os_time_get() - basetod.ostime;
    a276:	f7ff ff67 	bl	a148 <os_time_get>
    a27a:	f8df 804c 	ldr.w	r8, [pc, #76]	; a2c8 <os_settimeofday+0x70>
    a27e:	4641      	mov	r1, r8
    a280:	f851 3b08 	ldr.w	r3, [r1], #8
    a284:	eba0 0903 	sub.w	r9, r0, r3
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
    a288:	460a      	mov	r2, r1
    a28a:	4648      	mov	r0, r9
    a28c:	f7ff fef4 	bl	a078 <os_deltatime>
        basetod.utctime = *utctime;
    a290:	f108 0c18 	add.w	ip, r8, #24
    a294:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    a298:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
        basetod.ostime += delta;
    a29c:	f8d8 0000 	ldr.w	r0, [r8]
    a2a0:	4448      	add	r0, r9
    a2a2:	f8c8 0000 	str.w	r0, [r8]
    if (tz != NULL) {
    a2a6:	b115      	cbz	r5, a2ae <os_settimeofday+0x56>
        basetod.timezone = *tz;
    a2a8:	6828      	ldr	r0, [r5, #0]
    a2aa:	4b07      	ldr	r3, [pc, #28]	; (a2c8 <os_settimeofday+0x70>)
    a2ac:	6298      	str	r0, [r3, #40]	; 0x28
    OS_EXIT_CRITICAL(sr);
    a2ae:	4638      	mov	r0, r7
    a2b0:	f000 f876 	bl	a3a0 <os_arch_restore_sr>
    if (notify) {
    a2b4:	b11e      	cbz	r6, a2be <os_settimeofday+0x66>
}
    a2b6:	2000      	movs	r0, #0
    a2b8:	b007      	add	sp, #28
    a2ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        os_time_change_notify(&info);
    a2be:	a801      	add	r0, sp, #4
    a2c0:	f7ff ff04 	bl	a0cc <os_time_change_notify>
    a2c4:	e7f7      	b.n	a2b6 <os_settimeofday+0x5e>
    a2c6:	bf00      	nop
    a2c8:	20003470 	.word	0x20003470

0000a2cc <os_get_uptime>:

void
os_get_uptime(struct os_timeval *tvp)
{
    a2cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    a2ce:	b085      	sub	sp, #20
    a2d0:	4606      	mov	r6, r0
  struct os_timeval tv;
  os_time_t delta;
  os_sr_t sr;
  os_time_t ostime;

  OS_ENTER_CRITICAL(sr);
    a2d2:	f000 f85f 	bl	a394 <os_arch_save_sr>
    a2d6:	4607      	mov	r7, r0
  tv = basetod.uptime;
    a2d8:	4d0a      	ldr	r5, [pc, #40]	; (a304 <os_get_uptime+0x38>)
    a2da:	466c      	mov	r4, sp
    a2dc:	f105 0308 	add.w	r3, r5, #8
    a2e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    a2e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ostime = basetod.ostime;
    a2e6:	682d      	ldr	r5, [r5, #0]
  delta = os_time_get() - ostime;
    a2e8:	f7ff ff2e 	bl	a148 <os_time_get>
    a2ec:	1b45      	subs	r5, r0, r5
  OS_EXIT_CRITICAL(sr);
    a2ee:	4638      	mov	r0, r7
    a2f0:	f000 f856 	bl	a3a0 <os_arch_restore_sr>

  os_deltatime(delta, &tv, tvp);
    a2f4:	4632      	mov	r2, r6
    a2f6:	4621      	mov	r1, r4
    a2f8:	4628      	mov	r0, r5
    a2fa:	f7ff febd 	bl	a078 <os_deltatime>
}
    a2fe:	b005      	add	sp, #20
    a300:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a302:	bf00      	nop
    a304:	20003470 	.word	0x20003470

0000a308 <os_get_uptime_usec>:

int64_t
os_get_uptime_usec(void)
{
    a308:	b510      	push	{r4, lr}
    a30a:	b084      	sub	sp, #16
  struct os_timeval tv;

  os_get_uptime(&tv);
    a30c:	4668      	mov	r0, sp
    a30e:	f7ff ffdd 	bl	a2cc <os_get_uptime>

  return (tv.tv_sec * 1000000 + tv.tv_usec);
    a312:	9a00      	ldr	r2, [sp, #0]
    a314:	9c01      	ldr	r4, [sp, #4]
    a316:	0163      	lsls	r3, r4, #5
    a318:	ea43 63d2 	orr.w	r3, r3, r2, lsr #27
    a31c:	ea4f 1c42 	mov.w	ip, r2, lsl #5
    a320:	ebbc 0c02 	subs.w	ip, ip, r2
    a324:	eb63 0304 	sbc.w	r3, r3, r4
    a328:	0259      	lsls	r1, r3, #9
    a32a:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
    a32e:	ea4f 204c 	mov.w	r0, ip, lsl #9
    a332:	1883      	adds	r3, r0, r2
    a334:	eb44 0101 	adc.w	r1, r4, r1
    a338:	ea4f 1c81 	mov.w	ip, r1, lsl #6
    a33c:	ea4c 6c93 	orr.w	ip, ip, r3, lsr #26
    a340:	0198      	lsls	r0, r3, #6
    a342:	1ac0      	subs	r0, r0, r3
    a344:	eb6c 0101 	sbc.w	r1, ip, r1
    a348:	1880      	adds	r0, r0, r2
    a34a:	eb44 0401 	adc.w	r4, r4, r1
    a34e:	9902      	ldr	r1, [sp, #8]
    a350:	1840      	adds	r0, r0, r1
}
    a352:	eb44 71e1 	adc.w	r1, r4, r1, asr #31
    a356:	b004      	add	sp, #16
    a358:	bd10      	pop	{r4, pc}

0000a35a <os_time_ms_to_ticks>:

int
os_time_ms_to_ticks(uint32_t ms, os_time_t *out_ticks)
{
    a35a:	b538      	push	{r3, r4, r5, lr}
    a35c:	460d      	mov	r5, r1
#endif

    static_assert(OS_TICKS_PER_SEC <= UINT32_MAX,
                  "OS_TICKS_PER_SEC must be <= UINT32_MAX");

    ticks = ((uint64_t)ms * OS_TICKS_PER_SEC) / 1000;
    a35e:	0e41      	lsrs	r1, r0, #25
    a360:	01c4      	lsls	r4, r0, #7
    a362:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a366:	2300      	movs	r3, #0
    a368:	4620      	mov	r0, r4
    a36a:	f017 fbb9 	bl	21ae0 <__aeabi_uldivmod>
    if (ticks > UINT32_MAX) {
        return OS_EINVAL;
    }

    *out_ticks = ticks;
    a36e:	6028      	str	r0, [r5, #0]
    return 0;
}
    a370:	2000      	movs	r0, #0
    a372:	bd38      	pop	{r3, r4, r5, pc}

0000a374 <timer_handler>:
/* XXX: determine how we will deal with running un-privileged */
uint32_t os_flags = OS_RUN_PRIV;

void
timer_handler(void)
{
    a374:	b508      	push	{r3, lr}
    os_time_advance(1);
    a376:	2001      	movs	r0, #1
    a378:	f7ff feec 	bl	a154 <os_time_advance>
}
    a37c:	bd08      	pop	{r3, pc}
	...

0000a380 <os_arch_ctx_sw>:

void
os_arch_ctx_sw(struct os_task *t)
{
    a380:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
    a382:	f7ff fbb3 	bl	9aec <os_sched_ctx_sw_hook>

    /* Set PendSV interrupt pending bit to force context switch */
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
    a386:	4b02      	ldr	r3, [pc, #8]	; (a390 <os_arch_ctx_sw+0x10>)
    a388:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    a38c:	605a      	str	r2, [r3, #4]
}
    a38e:	bd08      	pop	{r3, pc}
    a390:	e000ed00 	.word	0xe000ed00

0000a394 <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    a394:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    a398:	b672      	cpsid	i
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    __disable_irq();
    return (isr_ctx & 1);
}
    a39a:	f000 0001 	and.w	r0, r0, #1
    a39e:	4770      	bx	lr

0000a3a0 <os_arch_restore_sr>:

void
os_arch_restore_sr(os_sr_t isr_ctx)
{
    if (!isr_ctx) {
    a3a0:	b900      	cbnz	r0, a3a4 <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
    a3a2:	b662      	cpsie	i
        __enable_irq();
    }
}
    a3a4:	4770      	bx	lr

0000a3a6 <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    a3a6:	f3ef 8010 	mrs	r0, PRIMASK
{
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    return (isr_ctx & 1);
}
    a3aa:	f000 0001 	and.w	r0, r0, #1
    a3ae:	4770      	bx	lr

0000a3b0 <os_arch_task_stack_init>:

os_stack_t *
os_arch_task_stack_init(struct os_task *t, os_stack_t *stack_top, int size)
{
    a3b0:	b570      	push	{r4, r5, r6, lr}
    a3b2:	4606      	mov	r6, r0
    a3b4:	460d      	mov	r5, r1
    int i;
    os_stack_t *s;
    struct stack_frame *sf;

    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
    a3b6:	f1a1 0444 	sub.w	r4, r1, #68	; 0x44

    /* Zero out R1-R3, R12, LR */
    for (i = 9; i < 14; ++i) {
    a3ba:	2309      	movs	r3, #9
    a3bc:	e003      	b.n	a3c6 <os_arch_task_stack_init+0x16>
        s[i] = 0;
    a3be:	2200      	movs	r2, #0
    a3c0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for (i = 9; i < 14; ++i) {
    a3c4:	3301      	adds	r3, #1
    a3c6:	2b0d      	cmp	r3, #13
    a3c8:	ddf9      	ble.n	a3be <os_arch_task_stack_init+0xe>
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
    a3ca:	4620      	mov	r0, r4
    a3cc:	f000 fbb6 	bl	ab3c <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
    a3d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    a3d4:	f845 3c04 	str.w	r3, [r5, #-4]
    sf->pc = (uint32_t)t->t_func;
    a3d8:	6973      	ldr	r3, [r6, #20]
    a3da:	f845 3c08 	str.w	r3, [r5, #-8]
    sf->r0 = (uint32_t)t->t_arg;
    a3de:	69b3      	ldr	r3, [r6, #24]
    a3e0:	f845 3c20 	str.w	r3, [r5, #-32]
#if MYNEWT_VAL(HARDFLOAT)
    sf->exc_lr = INITIAL_LR;
    a3e4:	f06f 0302 	mvn.w	r3, #2
    a3e8:	f845 3c24 	str.w	r3, [r5, #-36]
#endif

    return (s);
}
    a3ec:	4620      	mov	r0, r4
    a3ee:	bd70      	pop	{r4, r5, r6, pc}

0000a3f0 <os_arch_init>:

void
os_arch_init(void)
{
    a3f0:	b508      	push	{r3, lr}
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    a3f2:	4a04      	ldr	r2, [pc, #16]	; (a404 <os_arch_init+0x14>)
    a3f4:	6953      	ldr	r3, [r2, #20]
    a3f6:	f043 0310 	orr.w	r3, r3, #16
    a3fa:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
    a3fc:	f7fe fe72 	bl	90e4 <os_init_idle_task>
}
    a400:	bd08      	pop	{r3, pc}
    a402:	bf00      	nop
    a404:	e000ed00 	.word	0xe000ed00

0000a408 <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
    a408:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    a40a:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
    a40e:	b914      	cbnz	r4, a416 <os_arch_os_init+0xe>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
    a410:	f04f 0c00 	mov.w	ip, #0
    a414:	e00a      	b.n	a42c <os_arch_os_init+0x24>
    err = OS_ERR_IN_ISR;
    a416:	2007      	movs	r0, #7
    a418:	e034      	b.n	a484 <os_arch_os_init+0x7c>
            NVIC->IP[i] = -1;
    a41a:	f10c 4e60 	add.w	lr, ip, #3758096384	; 0xe0000000
    a41e:	f50e 4e61 	add.w	lr, lr, #57600	; 0xe100
    a422:	24ff      	movs	r4, #255	; 0xff
    a424:	f88e 4300 	strb.w	r4, [lr, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
    a428:	f10c 0c01 	add.w	ip, ip, #1
    a42c:	f1bc 0fef 	cmp.w	ip, #239	; 0xef
    a430:	d9f3      	bls.n	a41a <os_arch_os_init+0x12>
         * Install default interrupt handler for all interrupts except Reset,
         * which'll print out system state at the time of the interrupt, and
         * few other regs which should help in trying to figure out what went
         * wrong.
         */
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
    a432:	f06f 0c0d 	mvn.w	ip, #13
    a436:	e00a      	b.n	a44e <os_arch_os_init+0x46>
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
            NVIC_SetVector(i, (uint32_t)os_default_irq_asm);
    a438:	fa4f fe8c 	sxtb.w	lr, ip
  uint32_t vectors = (uint32_t )SCB->VTOR;
    a43c:	4c14      	ldr	r4, [pc, #80]	; (a490 <os_arch_os_init+0x88>)
    a43e:	68a4      	ldr	r4, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    a440:	f10e 0e10 	add.w	lr, lr, #16
    a444:	4d13      	ldr	r5, [pc, #76]	; (a494 <os_arch_os_init+0x8c>)
    a446:	f844 502e 	str.w	r5, [r4, lr, lsl #2]
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
    a44a:	f10c 0c01 	add.w	ip, ip, #1
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
    a44e:	f1bc 0f25 	cmp.w	ip, #37	; 0x25
    a452:	ddf1      	ble.n	a438 <os_arch_os_init+0x30>
  uint32_t vectors = (uint32_t )SCB->VTOR;
    a454:	4c0e      	ldr	r4, [pc, #56]	; (a490 <os_arch_os_init+0x88>)
    a456:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    a458:	4e0f      	ldr	r6, [pc, #60]	; (a498 <os_arch_os_init+0x90>)
    a45a:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
    a45c:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    a45e:	4e0f      	ldr	r6, [pc, #60]	; (a49c <os_arch_os_init+0x94>)
    a460:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
    a462:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    a464:	4e0e      	ldr	r6, [pc, #56]	; (a4a0 <os_arch_os_init+0x98>)
    a466:	63ee      	str	r6, [r5, #60]	; 0x3c
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a468:	25e0      	movs	r5, #224	; 0xe0
    a46a:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
    a46e:	2520      	movs	r5, #32
    a470:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    a472:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVCall_IRQn, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
    a476:	f014 0f01 	tst.w	r4, #1
    a47a:	d004      	beq.n	a486 <os_arch_os_init+0x7e>
    SVC_Call(os_arch_init);
    a47c:	f8df c024 	ldr.w	ip, [pc, #36]	; a4a4 <os_arch_os_init+0x9c>
    a480:	df00      	svc	0
        err = OS_OK;
    a482:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
    a484:	bd70      	pop	{r4, r5, r6, pc}
            os_arch_init();
    a486:	f7ff ffb3 	bl	a3f0 <os_arch_init>
        err = OS_OK;
    a48a:	2000      	movs	r0, #0
    a48c:	e7fa      	b.n	a484 <os_arch_os_init+0x7c>
    a48e:	bf00      	nop
    a490:	e000ed00 	.word	0xe000ed00
    a494:	0000abdb 	.word	0x0000abdb
    a498:	0000ab43 	.word	0x0000ab43
    a49c:	0000ab89 	.word	0x0000ab89
    a4a0:	0000abcf 	.word	0x0000abcf
    a4a4:	0000a3f1 	.word	0x0000a3f1

0000a4a8 <os_arch_start>:

uint32_t
os_arch_start(void)
{
    a4a8:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
    a4aa:	f7ff fc45 	bl	9d38 <os_sched_next_task>
    a4ae:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
    a4b0:	f7ff fb3a 	bl	9b28 <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
    a4b4:	6823      	ldr	r3, [r4, #0]
    a4b6:	3324      	adds	r3, #36	; 0x24
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    a4b8:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
    a4bc:	2106      	movs	r1, #6
    a4be:	2080      	movs	r0, #128	; 0x80
    a4c0:	f00d fdb4 	bl	1802c <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
    a4c4:	4b03      	ldr	r3, [pc, #12]	; (a4d4 <os_arch_start+0x2c>)
    a4c6:	2201      	movs	r2, #1
    a4c8:	601a      	str	r2, [r3, #0]

    /* Perform context switch */
    os_arch_ctx_sw(t);
    a4ca:	4620      	mov	r0, r4
    a4cc:	f7ff ff58 	bl	a380 <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
    a4d0:	69a0      	ldr	r0, [r4, #24]
    a4d2:	bd10      	pop	{r4, pc}
    a4d4:	20002648 	.word	0x20002648

0000a4d8 <os_arch_os_start>:
 *
 * @return os_error_t
 */
os_error_t
os_arch_os_start(void)
{
    a4d8:	b510      	push	{r4, lr}
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
    a4da:	4816      	ldr	r0, [pc, #88]	; (a534 <os_arch_os_start+0x5c>)
    a4dc:	6800      	ldr	r0, [r0, #0]
    a4de:	3804      	subs	r0, #4
    a4e0:	f000 fb22 	bl	ab28 <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    a4e4:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
    a4e8:	bb04      	cbnz	r4, a52c <os_arch_os_start+0x54>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    a4ea:	f3ef 8c14 	mrs	ip, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
    a4ee:	f00c 0c03 	and.w	ip, ip, #3
    a4f2:	f1bc 0f02 	cmp.w	ip, #2
    a4f6:	d00f      	beq.n	a518 <os_arch_os_start+0x40>
    a4f8:	d804      	bhi.n	a504 <os_arch_os_start+0x2c>
    a4fa:	f1bc 0f01 	cmp.w	ip, #1
    a4fe:	d810      	bhi.n	a522 <os_arch_os_start+0x4a>
    a500:	2008      	movs	r0, #8
            svc_os_arch_start();
        }
    }

    return err;
}
    a502:	bd10      	pop	{r4, pc}
        switch (__get_CONTROL() & 0x03) {
    a504:	f1bc 0f03 	cmp.w	ip, #3
    a508:	d10b      	bne.n	a522 <os_arch_os_start+0x4a>
            if  ((os_flags & 1) == OS_RUN_PRIV) {
    a50a:	4c0b      	ldr	r4, [pc, #44]	; (a538 <os_arch_os_start+0x60>)
    a50c:	6824      	ldr	r4, [r4, #0]
    a50e:	f014 0f01 	tst.w	r4, #1
    a512:	d106      	bne.n	a522 <os_arch_os_start+0x4a>
                err = OS_ERR_PRIV;
    a514:	2008      	movs	r0, #8
    a516:	e7f4      	b.n	a502 <os_arch_os_start+0x2a>
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
    a518:	4c07      	ldr	r4, [pc, #28]	; (a538 <os_arch_os_start+0x60>)
    a51a:	6824      	ldr	r4, [r4, #0]
    a51c:	f014 0f01 	tst.w	r4, #1
    a520:	d106      	bne.n	a530 <os_arch_os_start+0x58>
    SVC_Call(os_arch_start);
    a522:	f8df c018 	ldr.w	ip, [pc, #24]	; a53c <os_arch_os_start+0x64>
    a526:	df00      	svc	0
}
    a528:	2000      	movs	r0, #0
    a52a:	e7ea      	b.n	a502 <os_arch_os_start+0x2a>
    err = OS_ERR_IN_ISR;
    a52c:	2007      	movs	r0, #7
    a52e:	e7e8      	b.n	a502 <os_arch_os_start+0x2a>
                err = OS_ERR_PRIV;
    a530:	2008      	movs	r0, #8
    a532:	e7e6      	b.n	a502 <os_arch_os_start+0x2a>
    a534:	200014a0 	.word	0x200014a0
    a538:	200034a4 	.word	0x200034a4
    a53c:	0000a4a9 	.word	0x0000a4a9

0000a540 <os_mqueue_init>:
#endif
#include "os/mynewt.h"

int
os_mqueue_init(struct os_mqueue *mq, os_event_fn *ev_cb, void *arg)
{
    a540:	4603      	mov	r3, r0
    struct os_event *ev;

    STAILQ_INIT(&mq->mq_head);
    a542:	2000      	movs	r0, #0
    a544:	6018      	str	r0, [r3, #0]
    a546:	605b      	str	r3, [r3, #4]

    ev = &mq->mq_ev;
    memset(ev, 0, sizeof(*ev));
    a548:	6098      	str	r0, [r3, #8]
    a54a:	60d8      	str	r0, [r3, #12]
    a54c:	6118      	str	r0, [r3, #16]
    a54e:	6158      	str	r0, [r3, #20]
    ev->ev_cb = ev_cb;
    a550:	60d9      	str	r1, [r3, #12]
    ev->ev_arg = arg;
    a552:	611a      	str	r2, [r3, #16]

    return (0);
}
    a554:	4770      	bx	lr

0000a556 <os_mqueue_get>:

struct os_mbuf *
os_mqueue_get(struct os_mqueue *mq)
{
    a556:	b538      	push	{r3, r4, r5, lr}
    a558:	4605      	mov	r5, r0
    struct os_mbuf_pkthdr *mp;
    struct os_mbuf *m;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
    a55a:	f7ff ff1b 	bl	a394 <os_arch_save_sr>
    mp = STAILQ_FIRST(&mq->mq_head);
    a55e:	682c      	ldr	r4, [r5, #0]
    if (mp) {
    a560:	b114      	cbz	r4, a568 <os_mqueue_get+0x12>
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
    a562:	6863      	ldr	r3, [r4, #4]
    a564:	602b      	str	r3, [r5, #0]
    a566:	b12b      	cbz	r3, a574 <os_mqueue_get+0x1e>
    }
    OS_EXIT_CRITICAL(sr);
    a568:	f7ff ff1a 	bl	a3a0 <os_arch_restore_sr>

    if (mp) {
    a56c:	b104      	cbz	r4, a570 <os_mqueue_get+0x1a>
        m = OS_MBUF_PKTHDR_TO_MBUF(mp);
    a56e:	3c10      	subs	r4, #16
    } else {
        m = NULL;
    }

    return (m);
}
    a570:	4620      	mov	r0, r4
    a572:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
    a574:	606d      	str	r5, [r5, #4]
    a576:	e7f7      	b.n	a568 <os_mqueue_get+0x12>

0000a578 <os_mqueue_put>:

int
os_mqueue_put(struct os_mqueue *mq, struct os_eventq *evq, struct os_mbuf *m)
{
    a578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf_pkthdr *mp;
    os_sr_t sr;
    int rc;

    /* Can only place the head of a chained mbuf on the queue. */
    if (!OS_MBUF_IS_PKTHDR(m)) {
    a57a:	7953      	ldrb	r3, [r2, #5]
    a57c:	2b07      	cmp	r3, #7
    a57e:	d916      	bls.n	a5ae <os_mqueue_put+0x36>
    a580:	4605      	mov	r5, r0
    a582:	460e      	mov	r6, r1
    a584:	4614      	mov	r4, r2
        rc = OS_EINVAL;
        goto err;
    }

    mp = OS_MBUF_PKTHDR(m);
    a586:	f102 0710 	add.w	r7, r2, #16

    OS_ENTER_CRITICAL(sr);
    a58a:	f7ff ff03 	bl	a394 <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&mq->mq_head, mp, omp_next);
    a58e:	2300      	movs	r3, #0
    a590:	f844 3f14 	str.w	r3, [r4, #20]!
    a594:	686b      	ldr	r3, [r5, #4]
    a596:	601f      	str	r7, [r3, #0]
    a598:	606c      	str	r4, [r5, #4]
    OS_EXIT_CRITICAL(sr);
    a59a:	f7ff ff01 	bl	a3a0 <os_arch_restore_sr>

    /* Only post an event to the queue if its specified */
    if (evq) {
    a59e:	b146      	cbz	r6, a5b2 <os_mqueue_put+0x3a>
        os_eventq_put(evq, &mq->mq_ev);
    a5a0:	f105 0108 	add.w	r1, r5, #8
    a5a4:	4630      	mov	r0, r6
    a5a6:	f7ff f811 	bl	95cc <os_eventq_put>
    }

    return (0);
    a5aa:	2000      	movs	r0, #0
    a5ac:	e000      	b.n	a5b0 <os_mqueue_put+0x38>
err:
    return (rc);
    a5ae:	2002      	movs	r0, #2
}
    a5b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (0);
    a5b2:	2000      	movs	r0, #0
    a5b4:	e7fc      	b.n	a5b0 <os_mqueue_put+0x38>

0000a5b6 <os_mbuf_get>:
    return (0);
}

struct os_mbuf *
os_mbuf_get(struct os_mbuf_pool *omp, uint16_t leadingspace)
{
    a5b6:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET, (uint32_t)omp,
                       (uint32_t)leadingspace);

    if (leadingspace > omp->omp_databuf_len) {
    a5b8:	8803      	ldrh	r3, [r0, #0]
    a5ba:	428b      	cmp	r3, r1
    a5bc:	d310      	bcc.n	a5e0 <os_mbuf_get+0x2a>
    a5be:	4604      	mov	r4, r0
    a5c0:	460d      	mov	r5, r1
        om = NULL;
        goto done;
    }

    om = os_memblock_get(omp->omp_pool);
    a5c2:	6840      	ldr	r0, [r0, #4]
    a5c4:	f7ff f8fa 	bl	97bc <os_memblock_get>
    if (!om) {
    a5c8:	b148      	cbz	r0, a5de <os_mbuf_get+0x28>
        goto done;
    }

    SLIST_NEXT(om, om_next) = NULL;
    a5ca:	2300      	movs	r3, #0
    a5cc:	60c3      	str	r3, [r0, #12]
    om->om_flags = 0;
    a5ce:	7103      	strb	r3, [r0, #4]
    om->om_pkthdr_len = 0;
    a5d0:	7143      	strb	r3, [r0, #5]
    om->om_len = 0;
    a5d2:	80c3      	strh	r3, [r0, #6]
    om->om_data = (&om->om_databuf[0] + leadingspace);
    a5d4:	f100 0110 	add.w	r1, r0, #16
    a5d8:	440d      	add	r5, r1
    a5da:	6005      	str	r5, [r0, #0]
    om->om_omp = omp;
    a5dc:	6084      	str	r4, [r0, #8]

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET, (uint32_t)om);
    return om;
}
    a5de:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
    a5e0:	2000      	movs	r0, #0
    return om;
    a5e2:	e7fc      	b.n	a5de <os_mbuf_get+0x28>

0000a5e4 <os_mbuf_get_pkthdr>:

struct os_mbuf *
os_mbuf_get_pkthdr(struct os_mbuf_pool *omp, uint8_t user_pkthdr_len)
{
    a5e4:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)omp,
                       (uint32_t)user_pkthdr_len);

    /* User packet header must fit inside mbuf */
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
    a5e6:	f101 0508 	add.w	r5, r1, #8
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
    a5ea:	8803      	ldrh	r3, [r0, #0]
    a5ec:	42ab      	cmp	r3, r5
    a5ee:	d30e      	bcc.n	a60e <os_mbuf_get_pkthdr+0x2a>
    a5f0:	2dff      	cmp	r5, #255	; 0xff
    a5f2:	d80e      	bhi.n	a612 <os_mbuf_get_pkthdr+0x2e>
        om = NULL;
        goto done;
    }

    om = os_mbuf_get(omp, 0);
    a5f4:	2100      	movs	r1, #0
    a5f6:	f7ff ffde 	bl	a5b6 <os_mbuf_get>
    if (om) {
    a5fa:	b138      	cbz	r0, a60c <os_mbuf_get_pkthdr+0x28>
        om->om_pkthdr_len = pkthdr_len;
    a5fc:	7145      	strb	r5, [r0, #5]
        om->om_data += pkthdr_len;
    a5fe:	6803      	ldr	r3, [r0, #0]
    a600:	442b      	add	r3, r5
    a602:	6003      	str	r3, [r0, #0]

        pkthdr = OS_MBUF_PKTHDR(om);
        pkthdr->omp_len = 0;
    a604:	2300      	movs	r3, #0
    a606:	8203      	strh	r3, [r0, #16]
        pkthdr->omp_flags = 0;
    a608:	8243      	strh	r3, [r0, #18]
        STAILQ_NEXT(pkthdr, omp_next) = NULL;
    a60a:	6143      	str	r3, [r0, #20]
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)om);
    return om;
}
    a60c:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
    a60e:	2000      	movs	r0, #0
    a610:	e7fc      	b.n	a60c <os_mbuf_get_pkthdr+0x28>
    a612:	2000      	movs	r0, #0
    return om;
    a614:	e7fa      	b.n	a60c <os_mbuf_get_pkthdr+0x28>

0000a616 <os_mbuf_free>:

int
os_mbuf_free(struct os_mbuf *om)
{
    a616:	b508      	push	{r3, lr}
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)om);

    if (om->om_omp != NULL) {
    a618:	6883      	ldr	r3, [r0, #8]
    a61a:	b123      	cbz	r3, a626 <os_mbuf_free+0x10>
    a61c:	4601      	mov	r1, r0
        rc = os_memblock_put(om->om_omp->omp_pool, om);
    a61e:	6858      	ldr	r0, [r3, #4]
    a620:	f7ff f8f4 	bl	980c <os_memblock_put>
    rc = 0;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)rc);
    return (rc);
}
    a624:	bd08      	pop	{r3, pc}
    rc = 0;
    a626:	2000      	movs	r0, #0
    return (rc);
    a628:	e7fc      	b.n	a624 <os_mbuf_free+0xe>

0000a62a <os_mbuf_free_chain>:
    struct os_mbuf *next;
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)om);

    while (om != NULL) {
    a62a:	b158      	cbz	r0, a644 <os_mbuf_free_chain+0x1a>
{
    a62c:	b510      	push	{r4, lr}
        next = SLIST_NEXT(om, om_next);
    a62e:	68c4      	ldr	r4, [r0, #12]

        rc = os_mbuf_free(om);
    a630:	f7ff fff1 	bl	a616 <os_mbuf_free>
        if (rc != 0) {
    a634:	4603      	mov	r3, r0
    a636:	b918      	cbnz	r0, a640 <os_mbuf_free_chain+0x16>
            goto done;
        }

        om = next;
    a638:	4620      	mov	r0, r4
    while (om != NULL) {
    a63a:	2c00      	cmp	r4, #0
    a63c:	d1f7      	bne.n	a62e <os_mbuf_free_chain+0x4>
    }

    rc = 0;
    a63e:	2300      	movs	r3, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)rc);
    return (rc);
}
    a640:	4618      	mov	r0, r3
    a642:	bd10      	pop	{r4, pc}
    rc = 0;
    a644:	2300      	movs	r3, #0
}
    a646:	4618      	mov	r0, r3
    a648:	4770      	bx	lr

0000a64a <os_mbuf_append>:
    return len;
}

int
os_mbuf_append(struct os_mbuf *om, const void *data,  uint16_t len)
{
    a64a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    struct os_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
    a64e:	2800      	cmp	r0, #0
    a650:	d04b      	beq.n	a6ea <os_mbuf_append+0xa0>
    a652:	460f      	mov	r7, r1
    a654:	4691      	mov	r9, r2
    a656:	4682      	mov	sl, r0
        rc = OS_EINVAL;
        goto err;
    }

    omp = om->om_omp;
    a658:	f8d0 8008 	ldr.w	r8, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
    a65c:	4603      	mov	r3, r0
    while (SLIST_NEXT(last, om_next) != NULL) {
    a65e:	461e      	mov	r6, r3
    a660:	68db      	ldr	r3, [r3, #12]
    a662:	2b00      	cmp	r3, #0
    a664:	d1fb      	bne.n	a65e <os_mbuf_append+0x14>
        last = SLIST_NEXT(last, om_next);
    }

    remainder = len;
    a666:	464d      	mov	r5, r9
static inline uint16_t
_os_mbuf_trailingspace(struct os_mbuf *om)
{
    struct os_mbuf_pool *omp;

    omp = om->om_omp;
    a668:	68b3      	ldr	r3, [r6, #8]

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    a66a:	f106 0410 	add.w	r4, r6, #16
    a66e:	881b      	ldrh	r3, [r3, #0]
    a670:	441c      	add	r4, r3
      (om->om_data + om->om_len);
    a672:	6830      	ldr	r0, [r6, #0]
    a674:	88f3      	ldrh	r3, [r6, #6]
    a676:	4418      	add	r0, r3
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    a678:	1a24      	subs	r4, r4, r0
    a67a:	b2a4      	uxth	r4, r4
    space = OS_MBUF_TRAILINGSPACE(last);

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
    a67c:	b164      	cbz	r4, a698 <os_mbuf_append+0x4e>
        if (space > remainder) {
    a67e:	454c      	cmp	r4, r9
    a680:	dd00      	ble.n	a684 <os_mbuf_append+0x3a>
            space = remainder;
    a682:	464c      	mov	r4, r9
        }

        memcpy(OS_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
    a684:	4622      	mov	r2, r4
    a686:	4639      	mov	r1, r7
    a688:	f003 fa1a 	bl	dac0 <memcpy>

        last->om_len += space;
    a68c:	88f3      	ldrh	r3, [r6, #6]
    a68e:	4423      	add	r3, r4
    a690:	80f3      	strh	r3, [r6, #6]
        data += space;
    a692:	4427      	add	r7, r4
        remainder -= space;
    a694:	eba9 0504 	sub.w	r5, r9, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
    a698:	2d00      	cmp	r5, #0
    a69a:	dd16      	ble.n	a6ca <os_mbuf_append+0x80>
        new = os_mbuf_get(omp, 0);
    a69c:	2100      	movs	r1, #0
    a69e:	4640      	mov	r0, r8
    a6a0:	f7ff ff89 	bl	a5b6 <os_mbuf_get>
        if (!new) {
    a6a4:	4604      	mov	r4, r0
    a6a6:	b180      	cbz	r0, a6ca <os_mbuf_append+0x80>
            break;
        }

        new->om_len = min(omp->omp_databuf_len, remainder);
    a6a8:	f8b8 2000 	ldrh.w	r2, [r8]
    a6ac:	42aa      	cmp	r2, r5
    a6ae:	bfa8      	it	ge
    a6b0:	462a      	movge	r2, r5
    a6b2:	b292      	uxth	r2, r2
    a6b4:	80c2      	strh	r2, [r0, #6]
        memcpy(OS_MBUF_DATA(new, void *), data, new->om_len);
    a6b6:	4639      	mov	r1, r7
    a6b8:	6800      	ldr	r0, [r0, #0]
    a6ba:	f003 fa01 	bl	dac0 <memcpy>
        data += new->om_len;
    a6be:	88e3      	ldrh	r3, [r4, #6]
    a6c0:	441f      	add	r7, r3
        remainder -= new->om_len;
    a6c2:	1aed      	subs	r5, r5, r3
        SLIST_NEXT(last, om_next) = new;
    a6c4:	60f4      	str	r4, [r6, #12]
        last = new;
    a6c6:	4626      	mov	r6, r4
    a6c8:	e7e6      	b.n	a698 <os_mbuf_append+0x4e>
    }

    /* Adjust the packet header length in the buffer */
    if (OS_MBUF_IS_PKTHDR(om)) {
    a6ca:	f89a 3005 	ldrb.w	r3, [sl, #5]
    a6ce:	2b07      	cmp	r3, #7
    a6d0:	d907      	bls.n	a6e2 <os_mbuf_append+0x98>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
    a6d2:	eba9 0905 	sub.w	r9, r9, r5
    a6d6:	f8ba 3010 	ldrh.w	r3, [sl, #16]
    a6da:	fa13 f989 	uxtah	r9, r3, r9
    a6de:	f8aa 9010 	strh.w	r9, [sl, #16]
    }

    if (remainder != 0) {
    a6e2:	b925      	cbnz	r5, a6ee <os_mbuf_append+0xa4>


    return (0);
err:
    return (rc);
}
    a6e4:	4628      	mov	r0, r5
    a6e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = OS_EINVAL;
    a6ea:	2502      	movs	r5, #2
    a6ec:	e7fa      	b.n	a6e4 <os_mbuf_append+0x9a>
        rc = OS_ENOMEM;
    a6ee:	2501      	movs	r5, #1
    a6f0:	e7f8      	b.n	a6e4 <os_mbuf_append+0x9a>

0000a6f2 <os_mbuf_off>:

    /* Cast away const. */
    cur = (struct os_mbuf *)om;

    while (1) {
        if (cur == NULL) {
    a6f2:	b178      	cbz	r0, a714 <os_mbuf_off+0x22>
{
    a6f4:	b410      	push	{r4}
    a6f6:	e002      	b.n	a6fe <os_mbuf_off+0xc>

            *out_off = off;
            return cur;
        }

        off -= cur->om_len;
    a6f8:	1ac9      	subs	r1, r1, r3
        cur = next;
    a6fa:	4620      	mov	r0, r4
        if (cur == NULL) {
    a6fc:	b13c      	cbz	r4, a70e <os_mbuf_off+0x1c>
        next = SLIST_NEXT(cur, om_next);
    a6fe:	68c4      	ldr	r4, [r0, #12]
        if (cur->om_len > off ||
    a700:	88c3      	ldrh	r3, [r0, #6]
    a702:	428b      	cmp	r3, r1
    a704:	dc02      	bgt.n	a70c <os_mbuf_off+0x1a>
    a706:	d1f7      	bne.n	a6f8 <os_mbuf_off+0x6>
            (cur->om_len == off && next == NULL)) {
    a708:	2c00      	cmp	r4, #0
    a70a:	d1f5      	bne.n	a6f8 <os_mbuf_off+0x6>
            *out_off = off;
    a70c:	8011      	strh	r1, [r2, #0]
    }
}
    a70e:	f85d 4b04 	ldr.w	r4, [sp], #4
    a712:	4770      	bx	lr
    a714:	4770      	bx	lr

0000a716 <os_mbuf_copydata>:

int
os_mbuf_copydata(const struct os_mbuf *m, int off, int len, void *dst)
{
    a716:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a718:	4604      	mov	r4, r0
    a71a:	461f      	mov	r7, r3
    unsigned int count;
    uint8_t *udst;

    if (!len) {
    a71c:	4616      	mov	r6, r2
    a71e:	b91a      	cbnz	r2, a728 <os_mbuf_copydata+0x12>
        return 0;
    a720:	4610      	mov	r0, r2
    a722:	e01e      	b.n	a762 <os_mbuf_copydata+0x4c>
            return (-1);
        }

        if (off < m->om_len)
            break;
        off -= m->om_len;
    a724:	1a89      	subs	r1, r1, r2
        m = SLIST_NEXT(m, om_next);
    a726:	68e4      	ldr	r4, [r4, #12]
    while (off > 0) {
    a728:	2900      	cmp	r1, #0
    a72a:	dd13      	ble.n	a754 <os_mbuf_copydata+0x3e>
        if (!m) {
    a72c:	b1ec      	cbz	r4, a76a <os_mbuf_copydata+0x54>
        if (off < m->om_len)
    a72e:	88e2      	ldrh	r2, [r4, #6]
    a730:	428a      	cmp	r2, r1
    a732:	ddf7      	ble.n	a724 <os_mbuf_copydata+0xe>
    a734:	e00e      	b.n	a754 <os_mbuf_copydata+0x3e>
    }
    while (len > 0 && m != NULL) {
        count = min(m->om_len - off, len);
    a736:	88e5      	ldrh	r5, [r4, #6]
    a738:	1a6d      	subs	r5, r5, r1
    a73a:	42b5      	cmp	r5, r6
    a73c:	bfa8      	it	ge
    a73e:	4635      	movge	r5, r6
        memcpy(udst, m->om_data + off, count);
    a740:	6823      	ldr	r3, [r4, #0]
    a742:	462a      	mov	r2, r5
    a744:	4419      	add	r1, r3
    a746:	4638      	mov	r0, r7
    a748:	f003 f9ba 	bl	dac0 <memcpy>
        len -= count;
    a74c:	1b76      	subs	r6, r6, r5
        udst += count;
    a74e:	442f      	add	r7, r5
        off = 0;
        m = SLIST_NEXT(m, om_next);
    a750:	68e4      	ldr	r4, [r4, #12]
        off = 0;
    a752:	2100      	movs	r1, #0
    while (len > 0 && m != NULL) {
    a754:	2e00      	cmp	r6, #0
    a756:	dd01      	ble.n	a75c <os_mbuf_copydata+0x46>
    a758:	2c00      	cmp	r4, #0
    a75a:	d1ec      	bne.n	a736 <os_mbuf_copydata+0x20>
    }

    return (len > 0 ? -1 : 0);
    a75c:	2e00      	cmp	r6, #0
    a75e:	dc01      	bgt.n	a764 <os_mbuf_copydata+0x4e>
    a760:	2000      	movs	r0, #0
}
    a762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (len > 0 ? -1 : 0);
    a764:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a768:	e7fb      	b.n	a762 <os_mbuf_copydata+0x4c>
            return (-1);
    a76a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a76e:	e7f8      	b.n	a762 <os_mbuf_copydata+0x4c>

0000a770 <os_mbuf_adj>:
{
    int len = req_len;
    struct os_mbuf *m;
    int count;

    if ((m = mp) == NULL)
    a770:	2800      	cmp	r0, #0
    a772:	d053      	beq.n	a81c <os_mbuf_adj+0xac>
{
    a774:	b510      	push	{r4, lr}
    a776:	4604      	mov	r4, r0
        return;
    if (len >= 0) {
    a778:	2900      	cmp	r1, #0
    a77a:	db1b      	blt.n	a7b4 <os_mbuf_adj+0x44>
    if ((m = mp) == NULL)
    a77c:	4603      	mov	r3, r0
    int len = req_len;
    a77e:	460a      	mov	r2, r1
    a780:	e005      	b.n	a78e <os_mbuf_adj+0x1e>
            if (m->om_len <= len) {
                len -= m->om_len;
                m->om_len = 0;
                m = SLIST_NEXT(m, om_next);
            } else {
                m->om_len -= len;
    a782:	1a80      	subs	r0, r0, r2
    a784:	80d8      	strh	r0, [r3, #6]
                m->om_data += len;
    a786:	6818      	ldr	r0, [r3, #0]
    a788:	4402      	add	r2, r0
    a78a:	601a      	str	r2, [r3, #0]
                len = 0;
    a78c:	2200      	movs	r2, #0
        while (m != NULL && len > 0) {
    a78e:	b14b      	cbz	r3, a7a4 <os_mbuf_adj+0x34>
    a790:	2a00      	cmp	r2, #0
    a792:	dd07      	ble.n	a7a4 <os_mbuf_adj+0x34>
            if (m->om_len <= len) {
    a794:	88d8      	ldrh	r0, [r3, #6]
    a796:	4290      	cmp	r0, r2
    a798:	dcf3      	bgt.n	a782 <os_mbuf_adj+0x12>
                len -= m->om_len;
    a79a:	1a12      	subs	r2, r2, r0
                m->om_len = 0;
    a79c:	2000      	movs	r0, #0
    a79e:	80d8      	strh	r0, [r3, #6]
                m = SLIST_NEXT(m, om_next);
    a7a0:	68db      	ldr	r3, [r3, #12]
    a7a2:	e7f4      	b.n	a78e <os_mbuf_adj+0x1e>
            }
        }
        if (OS_MBUF_IS_PKTHDR(mp))
    a7a4:	7963      	ldrb	r3, [r4, #5]
    a7a6:	2b07      	cmp	r3, #7
    a7a8:	d903      	bls.n	a7b2 <os_mbuf_adj+0x42>
            OS_MBUF_PKTHDR(mp)->omp_len -= (req_len - len);
    a7aa:	1a52      	subs	r2, r2, r1
    a7ac:	8a23      	ldrh	r3, [r4, #16]
    a7ae:	441a      	add	r2, r3
    a7b0:	8222      	strh	r2, [r4, #16]
                break;
            }
            count -= m->om_len;
        }
    }
}
    a7b2:	bd10      	pop	{r4, pc}
        len = -len;
    a7b4:	f1c1 0e00 	rsb	lr, r1, #0
    if ((m = mp) == NULL)
    a7b8:	4603      	mov	r3, r0
        count = 0;
    a7ba:	2200      	movs	r2, #0
            count += m->om_len;
    a7bc:	88d8      	ldrh	r0, [r3, #6]
    a7be:	4402      	add	r2, r0
            if (SLIST_NEXT(m, om_next) == (struct os_mbuf *)0)
    a7c0:	469c      	mov	ip, r3
    a7c2:	68db      	ldr	r3, [r3, #12]
    a7c4:	2b00      	cmp	r3, #0
    a7c6:	d1f9      	bne.n	a7bc <os_mbuf_adj+0x4c>
        if (m->om_len >= len) {
    a7c8:	4570      	cmp	r0, lr
    a7ca:	da0d      	bge.n	a7e8 <os_mbuf_adj+0x78>
        if (count < 0)
    a7cc:	188a      	adds	r2, r1, r2
    a7ce:	d41a      	bmi.n	a806 <os_mbuf_adj+0x96>
        if (OS_MBUF_IS_PKTHDR(m))
    a7d0:	7963      	ldrb	r3, [r4, #5]
    a7d2:	2b07      	cmp	r3, #7
    a7d4:	d900      	bls.n	a7d8 <os_mbuf_adj+0x68>
            OS_MBUF_PKTHDR(m)->omp_len = count;
    a7d6:	8222      	strh	r2, [r4, #16]
        for (; m; m = SLIST_NEXT(m, om_next)) {
    a7d8:	2c00      	cmp	r4, #0
    a7da:	d0ea      	beq.n	a7b2 <os_mbuf_adj+0x42>
            if (m->om_len >= count) {
    a7dc:	88e3      	ldrh	r3, [r4, #6]
    a7de:	4293      	cmp	r3, r2
    a7e0:	da13      	bge.n	a80a <os_mbuf_adj+0x9a>
            count -= m->om_len;
    a7e2:	1ad2      	subs	r2, r2, r3
        for (; m; m = SLIST_NEXT(m, om_next)) {
    a7e4:	68e4      	ldr	r4, [r4, #12]
    a7e6:	e7f7      	b.n	a7d8 <os_mbuf_adj+0x68>
            m->om_len -= len;
    a7e8:	fa1f fe8e 	uxth.w	lr, lr
    a7ec:	eba0 000e 	sub.w	r0, r0, lr
    a7f0:	f8ac 0006 	strh.w	r0, [ip, #6]
            if (OS_MBUF_IS_PKTHDR(mp))
    a7f4:	7963      	ldrb	r3, [r4, #5]
    a7f6:	2b07      	cmp	r3, #7
    a7f8:	d9db      	bls.n	a7b2 <os_mbuf_adj+0x42>
                OS_MBUF_PKTHDR(mp)->omp_len -= len;
    a7fa:	8a23      	ldrh	r3, [r4, #16]
    a7fc:	eba3 0e0e 	sub.w	lr, r3, lr
    a800:	f8a4 e010 	strh.w	lr, [r4, #16]
            return;
    a804:	e7d5      	b.n	a7b2 <os_mbuf_adj+0x42>
            count = 0;
    a806:	2200      	movs	r2, #0
    a808:	e7e2      	b.n	a7d0 <os_mbuf_adj+0x60>
                m->om_len = count;
    a80a:	80e2      	strh	r2, [r4, #6]
                if (SLIST_NEXT(m, om_next) != NULL) {
    a80c:	68e0      	ldr	r0, [r4, #12]
    a80e:	2800      	cmp	r0, #0
    a810:	d0cf      	beq.n	a7b2 <os_mbuf_adj+0x42>
                    os_mbuf_free_chain(SLIST_NEXT(m, om_next));
    a812:	f7ff ff0a 	bl	a62a <os_mbuf_free_chain>
                    SLIST_NEXT(m, om_next) = NULL;
    a816:	2300      	movs	r3, #0
    a818:	60e3      	str	r3, [r4, #12]
    a81a:	e7ca      	b.n	a7b2 <os_mbuf_adj+0x42>
    a81c:	4770      	bx	lr

0000a81e <os_mbuf_cmpf>:

int
os_mbuf_cmpf(const struct os_mbuf *om, int off, const void *data, int len)
{
    a81e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a822:	b082      	sub	sp, #8
    uint16_t chunk_sz;
    uint16_t data_off;
    uint16_t om_off;
    int rc;

    if (len <= 0) {
    a824:	1e1e      	subs	r6, r3, #0
    a826:	dd2d      	ble.n	a884 <os_mbuf_cmpf+0x66>
    a828:	4617      	mov	r7, r2
        return 0;
    }

    data_off = 0;
    om = os_mbuf_off(om, off, &om_off);
    a82a:	f10d 0206 	add.w	r2, sp, #6
    a82e:	f7ff ff60 	bl	a6f2 <os_mbuf_off>
    a832:	4604      	mov	r4, r0
    data_off = 0;
    a834:	f04f 0800 	mov.w	r8, #0
    a838:	e009      	b.n	a84e <os_mbuf_cmpf+0x30>
            if (rc != 0) {
                return rc;
            }
        }

        data_off += chunk_sz;
    a83a:	4445      	add	r5, r8
    a83c:	fa1f f885 	uxth.w	r8, r5
        if (data_off == len) {
    a840:	45b0      	cmp	r8, r6
    a842:	d027      	beq.n	a894 <os_mbuf_cmpf+0x76>
            return 0;
        }

        om = SLIST_NEXT(om, om_next);
    a844:	68e4      	ldr	r4, [r4, #12]
        om_off = 0;
    a846:	2300      	movs	r3, #0
    a848:	f8ad 3006 	strh.w	r3, [sp, #6]

        if (om == NULL) {
    a84c:	b1bc      	cbz	r4, a87e <os_mbuf_cmpf+0x60>
        if (om == NULL) {
    a84e:	b1f4      	cbz	r4, a88e <os_mbuf_cmpf+0x70>
        chunk_sz = min(om->om_len - om_off, len - data_off);
    a850:	eba6 0208 	sub.w	r2, r6, r8
    a854:	88e3      	ldrh	r3, [r4, #6]
    a856:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    a85a:	1a1b      	subs	r3, r3, r0
    a85c:	429a      	cmp	r2, r3
    a85e:	bfa8      	it	ge
    a860:	461a      	movge	r2, r3
    a862:	b295      	uxth	r5, r2
        if (chunk_sz > 0) {
    a864:	2d00      	cmp	r5, #0
    a866:	d0e8      	beq.n	a83a <os_mbuf_cmpf+0x1c>
            rc = memcmp(om->om_data + om_off, data + data_off, chunk_sz);
    a868:	6823      	ldr	r3, [r4, #0]
    a86a:	462a      	mov	r2, r5
    a86c:	eb07 0108 	add.w	r1, r7, r8
    a870:	4418      	add	r0, r3
    a872:	f003 f901 	bl	da78 <memcmp>
            if (rc != 0) {
    a876:	4603      	mov	r3, r0
    a878:	2800      	cmp	r0, #0
    a87a:	d0de      	beq.n	a83a <os_mbuf_cmpf+0x1c>
    a87c:	e003      	b.n	a886 <os_mbuf_cmpf+0x68>
            return INT_MAX;
    a87e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    a882:	e000      	b.n	a886 <os_mbuf_cmpf+0x68>
        return 0;
    a884:	2300      	movs	r3, #0
        }
    }
}
    a886:	4618      	mov	r0, r3
    a888:	b002      	add	sp, #8
    a88a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return INT_MAX;
    a88e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    a892:	e7f8      	b.n	a886 <os_mbuf_cmpf+0x68>
            return 0;
    a894:	2300      	movs	r3, #0
    a896:	e7f6      	b.n	a886 <os_mbuf_cmpf+0x68>

0000a898 <os_mbuf_copyinto>:
    return om;
}

int
os_mbuf_copyinto(struct os_mbuf *om, int off, const void *src, int len)
{
    a898:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a89c:	b083      	sub	sp, #12
    a89e:	4681      	mov	r9, r0
    a8a0:	4688      	mov	r8, r1
    a8a2:	4617      	mov	r7, r2
    a8a4:	461e      	mov	r6, r3
    uint16_t cur_off;
    int copylen;
    int rc;

    /* Find the mbuf,offset pair for the start of the destination. */
    cur = os_mbuf_off(om, off, &cur_off);
    a8a6:	f10d 0206 	add.w	r2, sp, #6
    a8aa:	f7ff ff22 	bl	a6f2 <os_mbuf_off>
    if (cur == NULL) {
    a8ae:	4605      	mov	r5, r0
    a8b0:	b948      	cbnz	r0, a8c6 <os_mbuf_copyinto+0x2e>
        return -1;
    a8b2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    a8b6:	e02d      	b.n	a914 <os_mbuf_copyinto+0x7c>
            len -= copylen;

            copylen = 0;
        }

        if (len == 0) {
    a8b8:	b366      	cbz	r6, a914 <os_mbuf_copyinto+0x7c>
            /* All the source data fit in the existing mbuf chain. */
            return 0;
        }

        next = SLIST_NEXT(cur, om_next);
    a8ba:	68eb      	ldr	r3, [r5, #12]
        if (next == NULL) {
    a8bc:	b1ab      	cbz	r3, a8ea <os_mbuf_copyinto+0x52>
            break;
        }

        cur = next;
        cur_off = 0;
    a8be:	2200      	movs	r2, #0
    a8c0:	f8ad 2006 	strh.w	r2, [sp, #6]
        cur = next;
    a8c4:	461d      	mov	r5, r3
        copylen = min(cur->om_len - cur_off, len);
    a8c6:	88ec      	ldrh	r4, [r5, #6]
    a8c8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a8cc:	1ae4      	subs	r4, r4, r3
    a8ce:	42b4      	cmp	r4, r6
    a8d0:	bfa8      	it	ge
    a8d2:	4634      	movge	r4, r6
        if (copylen > 0) {
    a8d4:	2c00      	cmp	r4, #0
    a8d6:	ddef      	ble.n	a8b8 <os_mbuf_copyinto+0x20>
            memcpy(cur->om_data + cur_off, sptr, copylen);
    a8d8:	6828      	ldr	r0, [r5, #0]
    a8da:	4622      	mov	r2, r4
    a8dc:	4639      	mov	r1, r7
    a8de:	4418      	add	r0, r3
    a8e0:	f003 f8ee 	bl	dac0 <memcpy>
            sptr += copylen;
    a8e4:	4427      	add	r7, r4
            len -= copylen;
    a8e6:	1b36      	subs	r6, r6, r4
            copylen = 0;
    a8e8:	e7e6      	b.n	a8b8 <os_mbuf_copyinto+0x20>
    }

    /* Append the remaining data to the end of the chain. */
    rc = os_mbuf_append(cur, sptr, len);
    a8ea:	b2b2      	uxth	r2, r6
    a8ec:	4639      	mov	r1, r7
    a8ee:	4628      	mov	r0, r5
    a8f0:	f7ff feab 	bl	a64a <os_mbuf_append>
    if (rc != 0) {
    a8f4:	b968      	cbnz	r0, a912 <os_mbuf_copyinto+0x7a>
        return rc;
    }

    /* Fix up the packet header, if one is present. */
    if (OS_MBUF_IS_PKTHDR(om)) {
    a8f6:	f899 2005 	ldrb.w	r2, [r9, #5]
    a8fa:	2a07      	cmp	r2, #7
    a8fc:	d90e      	bls.n	a91c <os_mbuf_copyinto+0x84>
        OS_MBUF_PKTHDR(om)->omp_len =
            max(OS_MBUF_PKTHDR(om)->omp_len, off + len);
    a8fe:	4446      	add	r6, r8
    a900:	f8b9 8010 	ldrh.w	r8, [r9, #16]
    a904:	4546      	cmp	r6, r8
    a906:	bfb8      	it	lt
    a908:	4646      	movlt	r6, r8
        OS_MBUF_PKTHDR(om)->omp_len =
    a90a:	f8a9 6010 	strh.w	r6, [r9, #16]
    }

    return 0;
    a90e:	4606      	mov	r6, r0
    a910:	e000      	b.n	a914 <os_mbuf_copyinto+0x7c>
        return rc;
    a912:	4606      	mov	r6, r0
}
    a914:	4630      	mov	r0, r6
    a916:	b003      	add	sp, #12
    a918:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
    a91c:	4606      	mov	r6, r0
    a91e:	e7f9      	b.n	a914 <os_mbuf_copyinto+0x7c>

0000a920 <os_mbuf_extend>:
    second->om_pkthdr_len = 0;
}

void *
os_mbuf_extend(struct os_mbuf *om, uint16_t len)
{
    a920:	b570      	push	{r4, r5, r6, lr}
    a922:	4606      	mov	r6, r0
    struct os_mbuf *newm;
    struct os_mbuf *last;
    void *data;

    if (len > om->om_omp->omp_databuf_len) {
    a924:	6880      	ldr	r0, [r0, #8]
    a926:	8803      	ldrh	r3, [r0, #0]
    a928:	428b      	cmp	r3, r1
    a92a:	d325      	bcc.n	a978 <os_mbuf_extend+0x58>
    a92c:	460d      	mov	r5, r1
        return NULL;
    }

    /* Scroll to last mbuf in the chain */
    last = om;
    a92e:	4633      	mov	r3, r6
    while (SLIST_NEXT(last, om_next) != NULL) {
    a930:	461c      	mov	r4, r3
    a932:	68db      	ldr	r3, [r3, #12]
    a934:	2b00      	cmp	r3, #0
    a936:	d1fb      	bne.n	a930 <os_mbuf_extend+0x10>
    omp = om->om_omp;
    a938:	68a2      	ldr	r2, [r4, #8]
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    a93a:	f104 0310 	add.w	r3, r4, #16
    a93e:	8812      	ldrh	r2, [r2, #0]
    a940:	4413      	add	r3, r2
      (om->om_data + om->om_len);
    a942:	6822      	ldr	r2, [r4, #0]
    a944:	88e1      	ldrh	r1, [r4, #6]
    a946:	440a      	add	r2, r1
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    a948:	1a9b      	subs	r3, r3, r2
    a94a:	b29b      	uxth	r3, r3
        last = SLIST_NEXT(last, om_next);
    }

    if (OS_MBUF_TRAILINGSPACE(last) < len) {
    a94c:	429d      	cmp	r5, r3
    a94e:	d80b      	bhi.n	a968 <os_mbuf_extend+0x48>

        SLIST_NEXT(last, om_next) = newm;
        last = newm;
    }

    data = last->om_data + last->om_len;
    a950:	6820      	ldr	r0, [r4, #0]
    a952:	88e3      	ldrh	r3, [r4, #6]
    a954:	4418      	add	r0, r3
    last->om_len += len;
    a956:	442b      	add	r3, r5
    a958:	80e3      	strh	r3, [r4, #6]

    if (OS_MBUF_IS_PKTHDR(om)) {
    a95a:	7973      	ldrb	r3, [r6, #5]
    a95c:	2b07      	cmp	r3, #7
    a95e:	d902      	bls.n	a966 <os_mbuf_extend+0x46>
        OS_MBUF_PKTHDR(om)->omp_len += len;
    a960:	8a33      	ldrh	r3, [r6, #16]
    a962:	441d      	add	r5, r3
    a964:	8235      	strh	r5, [r6, #16]
    }

    return data;
}
    a966:	bd70      	pop	{r4, r5, r6, pc}
        newm = os_mbuf_get(om->om_omp, 0);
    a968:	2100      	movs	r1, #0
    a96a:	f7ff fe24 	bl	a5b6 <os_mbuf_get>
        if (newm == NULL) {
    a96e:	2800      	cmp	r0, #0
    a970:	d0f9      	beq.n	a966 <os_mbuf_extend+0x46>
        SLIST_NEXT(last, om_next) = newm;
    a972:	60e0      	str	r0, [r4, #12]
        last = newm;
    a974:	4604      	mov	r4, r0
    a976:	e7eb      	b.n	a950 <os_mbuf_extend+0x30>
        return NULL;
    a978:	2000      	movs	r0, #0
    a97a:	e7f4      	b.n	a966 <os_mbuf_extend+0x46>

0000a97c <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
    a97c:	4603      	mov	r3, r0
    a97e:	b128      	cbz	r0, a98c <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
    a980:	2000      	movs	r0, #0
    a982:	7158      	strb	r0, [r3, #5]
    mu->mu_level = 0;
    a984:	80d8      	strh	r0, [r3, #6]
    mu->mu_owner = NULL;
    a986:	6098      	str	r0, [r3, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
    a988:	6018      	str	r0, [r3, #0]

    ret = OS_OK;
    a98a:	4770      	bx	lr
        ret = OS_INVALID_PARM;
    a98c:	2003      	movs	r0, #3

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
    a98e:	4770      	bx	lr

0000a990 <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
    a990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
    a992:	4b2c      	ldr	r3, [pc, #176]	; (aa44 <os_mutex_release+0xb4>)
    a994:	681b      	ldr	r3, [r3, #0]
    a996:	2b00      	cmp	r3, #0
    a998:	d04b      	beq.n	aa32 <os_mutex_release+0xa2>
    a99a:	4604      	mov	r4, r0
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
    a99c:	2800      	cmp	r0, #0
    a99e:	d04a      	beq.n	aa36 <os_mutex_release+0xa6>
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
    a9a0:	f7ff f8bc 	bl	9b1c <os_sched_get_current_task>
    a9a4:	4605      	mov	r5, r0
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
    a9a6:	88e3      	ldrh	r3, [r4, #6]
    a9a8:	2b00      	cmp	r3, #0
    a9aa:	d046      	beq.n	aa3a <os_mutex_release+0xaa>
    a9ac:	68a2      	ldr	r2, [r4, #8]
    a9ae:	4282      	cmp	r2, r0
    a9b0:	d145      	bne.n	aa3e <os_mutex_release+0xae>
        ret = OS_BAD_MUTEX;
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
    a9b2:	2b01      	cmp	r3, #1
    a9b4:	d003      	beq.n	a9be <os_mutex_release+0x2e>
        --mu->mu_level;
    a9b6:	3b01      	subs	r3, #1
    a9b8:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
    a9ba:	2000      	movs	r0, #0
        goto done;
    a9bc:	e03a      	b.n	aa34 <os_mutex_release+0xa4>
    }

    OS_ENTER_CRITICAL(sr);
    a9be:	f7ff fce9 	bl	a394 <os_arch_save_sr>
    a9c2:	4607      	mov	r7, r0

    /* Decrement nesting level (this effectively sets nesting level to 0) */
    --mu->mu_level;
    a9c4:	88e3      	ldrh	r3, [r4, #6]
    a9c6:	3b01      	subs	r3, #1
    a9c8:	80e3      	strh	r3, [r4, #6]

    /* Restore owner task's priority; resort list if different  */
    if (current->t_prio != mu->mu_prio) {
    a9ca:	7aea      	ldrb	r2, [r5, #11]
    a9cc:	7963      	ldrb	r3, [r4, #5]
    a9ce:	429a      	cmp	r2, r3
    a9d0:	d11e      	bne.n	aa10 <os_mutex_release+0x80>
        current->t_prio = mu->mu_prio;
        os_sched_resort(current);
    }

    /* Check if tasks are waiting for the mutex */
    rdy = SLIST_FIRST(&mu->mu_head);
    a9d2:	6826      	ldr	r6, [r4, #0]
    if (rdy) {
    a9d4:	b146      	cbz	r6, a9e8 <os_mutex_release+0x58>
        /* There is one waiting. Wake it up */
        assert(rdy->t_obj);
    a9d6:	69f3      	ldr	r3, [r6, #28]
    a9d8:	b1fb      	cbz	r3, aa1a <os_mutex_release+0x8a>
        os_sched_wakeup(rdy);
    a9da:	4630      	mov	r0, r6
    a9dc:	f7ff f934 	bl	9c48 <os_sched_wakeup>

        /* Set mutex internals */
        mu->mu_level = 1;
    a9e0:	2301      	movs	r3, #1
    a9e2:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
    a9e4:	7af3      	ldrb	r3, [r6, #11]
    a9e6:	7163      	strb	r3, [r4, #5]
    }

    /* Set new owner of mutex (or NULL if not owned) */
    mu->mu_owner = rdy;
    a9e8:	60a6      	str	r6, [r4, #8]
    if (rdy) {
    a9ea:	b116      	cbz	r6, a9f2 <os_mutex_release+0x62>
        rdy->t_lockcnt++;
    a9ec:	7bb3      	ldrb	r3, [r6, #14]
    a9ee:	3301      	adds	r3, #1
    a9f0:	73b3      	strb	r3, [r6, #14]
    }
    --current->t_lockcnt;
    a9f2:	7bab      	ldrb	r3, [r5, #14]
    a9f4:	3b01      	subs	r3, #1
    a9f6:	73ab      	strb	r3, [r5, #14]

    /* Do we need to re-schedule? */
    resched = 0;
    rdy = os_sched_next_task();
    a9f8:	f7ff f99e 	bl	9d38 <os_sched_next_task>
    a9fc:	4604      	mov	r4, r0
    if (rdy != current) {
    a9fe:	4285      	cmp	r5, r0
    aa00:	d010      	beq.n	aa24 <os_mutex_release+0x94>
        resched = 1;
    aa02:	2501      	movs	r5, #1
    }
    OS_EXIT_CRITICAL(sr);
    aa04:	4638      	mov	r0, r7
    aa06:	f7ff fccb 	bl	a3a0 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
    aa0a:	b96d      	cbnz	r5, aa28 <os_mutex_release+0x98>
        os_sched(rdy);
    }

    ret = OS_OK;
    aa0c:	2000      	movs	r0, #0
    aa0e:	e011      	b.n	aa34 <os_mutex_release+0xa4>
        current->t_prio = mu->mu_prio;
    aa10:	72eb      	strb	r3, [r5, #11]
        os_sched_resort(current);
    aa12:	4628      	mov	r0, r5
    aa14:	f7ff f9a8 	bl	9d68 <os_sched_resort>
    aa18:	e7db      	b.n	a9d2 <os_mutex_release+0x42>
        assert(rdy->t_obj);
    aa1a:	461a      	mov	r2, r3
    aa1c:	4619      	mov	r1, r3
    aa1e:	4618      	mov	r0, r3
    aa20:	f7fe faa0 	bl	8f64 <__assert_func>
    resched = 0;
    aa24:	2500      	movs	r5, #0
    aa26:	e7ed      	b.n	aa04 <os_mutex_release+0x74>
        os_sched(rdy);
    aa28:	4620      	mov	r0, r4
    aa2a:	f7ff f98b 	bl	9d44 <os_sched>
    ret = OS_OK;
    aa2e:	2000      	movs	r0, #0
    aa30:	e000      	b.n	aa34 <os_mutex_release+0xa4>
        ret = OS_NOT_STARTED;
    aa32:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
    aa34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
    aa36:	2003      	movs	r0, #3
    aa38:	e7fc      	b.n	aa34 <os_mutex_release+0xa4>
        ret = OS_BAD_MUTEX;
    aa3a:	2005      	movs	r0, #5
    aa3c:	e7fa      	b.n	aa34 <os_mutex_release+0xa4>
    aa3e:	2005      	movs	r0, #5
    aa40:	e7f8      	b.n	aa34 <os_mutex_release+0xa4>
    aa42:	bf00      	nop
    aa44:	20002648 	.word	0x20002648

0000aa48 <os_mutex_pend>:

os_error_t
os_mutex_pend(struct os_mutex *mu, os_time_t timeout)
{
    aa48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
    aa4a:	4b36      	ldr	r3, [pc, #216]	; (ab24 <os_mutex_pend+0xdc>)
    aa4c:	681b      	ldr	r3, [r3, #0]
    aa4e:	2b00      	cmp	r3, #0
    aa50:	d063      	beq.n	ab1a <os_mutex_pend+0xd2>
    aa52:	4605      	mov	r5, r0
    aa54:	460e      	mov	r6, r1
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
    aa56:	2800      	cmp	r0, #0
    aa58:	d061      	beq.n	ab1e <os_mutex_pend+0xd6>
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
    aa5a:	f7ff fc9b 	bl	a394 <os_arch_save_sr>
    aa5e:	4607      	mov	r7, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
    aa60:	f7ff f85c 	bl	9b1c <os_sched_get_current_task>
    aa64:	4604      	mov	r4, r0
    if (mu->mu_level == 0) {
    aa66:	88ea      	ldrh	r2, [r5, #6]
    aa68:	b1a2      	cbz	r2, aa94 <os_mutex_pend+0x4c>
        ret = OS_OK;
        goto done;
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
    aa6a:	68ab      	ldr	r3, [r5, #8]
    aa6c:	4283      	cmp	r3, r0
    aa6e:	d01e      	beq.n	aaae <os_mutex_pend+0x66>
        ret = OS_OK;
        goto done;
    }

    /* Mutex is not owned by us. If timeout is 0, return immediately */
    if (timeout == 0) {
    aa70:	b326      	cbz	r6, aabc <os_mutex_pend+0x74>
        ret = OS_TIMEOUT;
        goto done;
    }

    /* Change priority of owner if needed */
    if (mu->mu_owner->t_prio > current->t_prio) {
    aa72:	7ad9      	ldrb	r1, [r3, #11]
    aa74:	7ac2      	ldrb	r2, [r0, #11]
    aa76:	4291      	cmp	r1, r2
    aa78:	d825      	bhi.n	aac6 <os_mutex_pend+0x7e>
        os_sched_resort(mu->mu_owner);
    }

    /* Link current task to tasks waiting for mutex */
    last = NULL;
    if (!SLIST_EMPTY(&mu->mu_head)) {
    aa7a:	6828      	ldr	r0, [r5, #0]
    aa7c:	b368      	cbz	r0, aada <os_mutex_pend+0x92>
        /* Insert in priority order */
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
    aa7e:	4603      	mov	r3, r0
    last = NULL;
    aa80:	2100      	movs	r1, #0
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
    aa82:	b32b      	cbz	r3, aad0 <os_mutex_pend+0x88>
            if (current->t_prio < entry->t_prio) {
    aa84:	f894 c00b 	ldrb.w	ip, [r4, #11]
    aa88:	7ada      	ldrb	r2, [r3, #11]
    aa8a:	4594      	cmp	ip, r2
    aa8c:	d320      	bcc.n	aad0 <os_mutex_pend+0x88>
                break;
            }
            last = entry;
    aa8e:	4619      	mov	r1, r3
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
    aa90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    aa92:	e7f6      	b.n	aa82 <os_mutex_pend+0x3a>
        mu->mu_owner = current;
    aa94:	60a8      	str	r0, [r5, #8]
        mu->mu_prio  = current->t_prio;
    aa96:	7ac3      	ldrb	r3, [r0, #11]
    aa98:	716b      	strb	r3, [r5, #5]
        current->t_lockcnt++;
    aa9a:	7b83      	ldrb	r3, [r0, #14]
    aa9c:	3301      	adds	r3, #1
    aa9e:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
    aaa0:	2301      	movs	r3, #1
    aaa2:	80eb      	strh	r3, [r5, #6]
        OS_EXIT_CRITICAL(sr);
    aaa4:	4638      	mov	r0, r7
    aaa6:	f7ff fc7b 	bl	a3a0 <os_arch_restore_sr>
        ret = OS_OK;
    aaaa:	2000      	movs	r0, #0
        goto done;
    aaac:	e032      	b.n	ab14 <os_mutex_pend+0xcc>
        ++mu->mu_level;
    aaae:	3201      	adds	r2, #1
    aab0:	80ea      	strh	r2, [r5, #6]
        OS_EXIT_CRITICAL(sr);
    aab2:	4638      	mov	r0, r7
    aab4:	f7ff fc74 	bl	a3a0 <os_arch_restore_sr>
        ret = OS_OK;
    aab8:	2000      	movs	r0, #0
        goto done;
    aaba:	e02b      	b.n	ab14 <os_mutex_pend+0xcc>
        OS_EXIT_CRITICAL(sr);
    aabc:	4638      	mov	r0, r7
    aabe:	f7ff fc6f 	bl	a3a0 <os_arch_restore_sr>
        ret = OS_TIMEOUT;
    aac2:	2006      	movs	r0, #6
        goto done;
    aac4:	e026      	b.n	ab14 <os_mutex_pend+0xcc>
        mu->mu_owner->t_prio = current->t_prio;
    aac6:	72da      	strb	r2, [r3, #11]
        os_sched_resort(mu->mu_owner);
    aac8:	68a8      	ldr	r0, [r5, #8]
    aaca:	f7ff f94d 	bl	9d68 <os_sched_resort>
    aace:	e7d4      	b.n	aa7a <os_mutex_pend+0x32>
        }
    }

    if (last) {
    aad0:	b119      	cbz	r1, aada <os_mutex_pend+0x92>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
    aad2:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
    aad4:	64e3      	str	r3, [r4, #76]	; 0x4c
    aad6:	64cc      	str	r4, [r1, #76]	; 0x4c
    aad8:	e001      	b.n	aade <os_mutex_pend+0x96>
    } else {
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
    aada:	64e0      	str	r0, [r4, #76]	; 0x4c
    aadc:	602c      	str	r4, [r5, #0]
    }

    /* Set mutex pointer in task */
    current->t_obj = mu;
    aade:	61e5      	str	r5, [r4, #28]
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
    aae0:	7b63      	ldrb	r3, [r4, #13]
    aae2:	f043 0304 	orr.w	r3, r3, #4
    aae6:	7363      	strb	r3, [r4, #13]
    os_sched_sleep(current, timeout);
    aae8:	4631      	mov	r1, r6
    aaea:	4620      	mov	r0, r4
    aaec:	f7ff f822 	bl	9b34 <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
    aaf0:	4638      	mov	r0, r7
    aaf2:	f7ff fc55 	bl	a3a0 <os_arch_restore_sr>

    os_sched(NULL);
    aaf6:	2000      	movs	r0, #0
    aaf8:	f7ff f924 	bl	9d44 <os_sched>

    OS_ENTER_CRITICAL(sr);
    aafc:	f7ff fc4a 	bl	a394 <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
    ab00:	7b63      	ldrb	r3, [r4, #13]
    ab02:	f023 0304 	bic.w	r3, r3, #4
    ab06:	7363      	strb	r3, [r4, #13]
    OS_EXIT_CRITICAL(sr);
    ab08:	f7ff fc4a 	bl	a3a0 <os_arch_restore_sr>

    /* If we are owner we did not time out. */
    if (mu->mu_owner == current) {
    ab0c:	68ab      	ldr	r3, [r5, #8]
    ab0e:	42a3      	cmp	r3, r4
    ab10:	d001      	beq.n	ab16 <os_mutex_pend+0xce>
        ret = OS_OK;
    } else {
        ret = OS_TIMEOUT;
    ab12:	2006      	movs	r0, #6
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
    ab14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_OK;
    ab16:	2000      	movs	r0, #0
    ab18:	e7fc      	b.n	ab14 <os_mutex_pend+0xcc>
        ret = OS_NOT_STARTED;
    ab1a:	2009      	movs	r0, #9
    ab1c:	e7fa      	b.n	ab14 <os_mutex_pend+0xcc>
        ret = OS_INVALID_PARM;
    ab1e:	2003      	movs	r0, #3
    ab20:	e7f8      	b.n	ab14 <os_mutex_pend+0xcc>
    ab22:	bf00      	nop
    ab24:	20002648 	.word	0x20002648

0000ab28 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
    ab28:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
    ab2c:	4832      	ldr	r0, [pc, #200]	; (abf8 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
    ab2e:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
    ab30:	3002      	adds	r0, #2
        MSR     CONTROL,R0
    ab32:	f380 8814 	msr	CONTROL, r0
        ISB
    ab36:	f3bf 8f6f 	isb	sy
        BX      LR
    ab3a:	4770      	bx	lr

0000ab3c <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
    ab3c:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
    ab40:	4770      	bx	lr

0000ab42 <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
    ab42:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
    ab46:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
    ab48:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
    ab4c:	b951      	cbnz	r1, ab64 <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
    ab4e:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    ab52:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
    ab54:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    ab56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
    ab5a:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
    ab5e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
    ab62:	4770      	bx	lr

0000ab64 <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    ab64:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
    ab66:	4a25      	ldr	r2, [pc, #148]	; (abfc <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
    ab68:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
    ab6a:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
    ab6c:	d809      	bhi.n	ab82 <SVC_Done>

        LDR     R4,=SVC_Table-4
    ab6e:	4c24      	ldr	r4, [pc, #144]	; (ac00 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
    ab70:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
    ab74:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
    ab78:	47a0      	blx	r4

        MRS     R12,PSP
    ab7a:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
    ab7e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

0000ab82 <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    ab82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
    ab86:	4770      	bx	lr

0000ab88 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
    ab88:	4b1e      	ldr	r3, [pc, #120]	; (ac04 <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
    ab8a:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
    ab8c:	4b1e      	ldr	r3, [pc, #120]	; (ac08 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
    ab8e:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
    ab90:	4291      	cmp	r1, r2
        IT      EQ
    ab92:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
    ab94:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
    ab96:	f3ef 8c09 	mrs	ip, PSP
#if MYNEWT_VAL(HARDFLOAT)
        TST     LR,#0x10                /* is it extended frame? */
    ab9a:	f01e 0f10 	tst.w	lr, #16
        IT      EQ
    ab9e:	bf08      	it	eq
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
    aba0:	ed2c 8a10 	vstmdbeq	ip!, {s16-s31}
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
    aba4:	e92c 4ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
    aba8:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
    abac:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
    abae:	f8d2 c000 	ldr.w	ip, [r2]
#if MYNEWT_VAL(HARDFLOAT)
        LDMIA   R12!,{R4-R11,LR}        /* Restore New Context */
    abb2:	e8bc 4ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        TST     LR,#0x10                /* is it extended frame? */
    abb6:	f01e 0f10 	tst.w	lr, #16
        ITTE    EQ
    abba:	bf06      	itte	eq
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
    abbc:	ecbc 8a10 	vldmiaeq	ip!, {s16-s31}
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
    abc0:	f06f 0e12 	mvneq.w	lr, #18
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
    abc4:	f06f 0e02 	mvnne.w	lr, #2
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
#endif
        MSR     PSP,R12                 /* Write PSP */
    abc8:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
    abcc:	4770      	bx	lr

0000abce <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    abce:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
    abd0:	f7ff fbd0 	bl	a374 <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    abd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
    abd8:	4770      	bx	lr

0000abda <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
    abda:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
    abde:	bf0c      	ite	eq
        MRSEQ   R3,MSP
    abe0:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
    abe4:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
    abe8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
    abec:	4668      	mov	r0, sp
        BL      os_default_irq
    abee:	f7fe f9df 	bl	8fb0 <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
    abf2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
    abf6:	4770      	bx	lr
        LDR     R0,=os_flags
    abf8:	200034a4 	.word	0x200034a4
        LDR     R2,=SVC_Count
    abfc:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
    ac00:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
    ac04:	20000548 	.word	0x20000548
        LDR     R3,=g_current_task      /* Get current task */
    ac08:	2000345c 	.word	0x2000345c
    ac0c:	00000000 	.word	0x00000000

0000ac10 <tdma_superframe_slot_cb>:
 *
 * @return void
 */
static void
tdma_superframe_slot_cb(struct dpl_event * ev)
{
    ac10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint16_t i;
    uint32_t slot_period_us;
    struct _tdma_slot_t *slot;
    tdma_instance_t * tdma;
    struct uwb_ccp_instance * ccp;
    assert(ev != NULL);
    ac14:	b170      	cbz	r0, ac34 <tdma_superframe_slot_cb+0x24>
    return ev->ev.ev_arg;
    ac16:	6886      	ldr	r6, [r0, #8]
    assert(dpl_event_get_arg(ev) != NULL);
    ac18:	b196      	cbz	r6, ac40 <tdma_superframe_slot_cb+0x30>

    DIAGMSG("{\"utime\": %"PRIu32",\"msg\": \"tdma_superframe_slot_cb\"}\n",
            dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
    slot = (struct _tdma_slot_t *) dpl_event_get_arg(ev);
    tdma = slot->parent;
    ac1a:	68b5      	ldr	r5, [r6, #8]
    ccp = tdma->ccp;
    ac1c:	f8d5 8004 	ldr.w	r8, [r5, #4]

    TDMA_STATS_INC(superframe_cnt);
    ac20:	6a2b      	ldr	r3, [r5, #32]
    ac22:	3301      	adds	r3, #1
    ac24:	622b      	str	r3, [r5, #32]

    /* Make sure all timers are stopped */
    dpl_cputime_timer_stop(&slot->timer);
    ac26:	f106 070c 	add.w	r7, r6, #12
    ac2a:	4638      	mov	r0, r7
    ac2c:	f003 fbe9 	bl	e402 <dpl_cputime_timer_stop>
    for (i = 0; i < tdma->nslots; i++) {
    ac30:	2400      	movs	r4, #0
    ac32:	e00d      	b.n	ac50 <tdma_superframe_slot_cb+0x40>
    assert(ev != NULL);
    ac34:	2300      	movs	r3, #0
    ac36:	461a      	mov	r2, r3
    ac38:	4619      	mov	r1, r3
    ac3a:	4618      	mov	r0, r3
    ac3c:	f7fe f992 	bl	8f64 <__assert_func>
    assert(dpl_event_get_arg(ev) != NULL);
    ac40:	2300      	movs	r3, #0
    ac42:	461a      	mov	r2, r3
    ac44:	4619      	mov	r1, r3
    ac46:	4618      	mov	r0, r3
    ac48:	f7fe f98c 	bl	8f64 <__assert_func>
    for (i = 0; i < tdma->nslots; i++) {
    ac4c:	3401      	adds	r4, #1
    ac4e:	b2a4      	uxth	r4, r4
    ac50:	f8b5 307a 	ldrh.w	r3, [r5, #122]	; 0x7a
    ac54:	42a3      	cmp	r3, r4
    ac56:	d909      	bls.n	ac6c <tdma_superframe_slot_cb+0x5c>
        if (tdma->slot[i]){
    ac58:	f504 73a4 	add.w	r3, r4, #328	; 0x148
    ac5c:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
    ac60:	2800      	cmp	r0, #0
    ac62:	d0f3      	beq.n	ac4c <tdma_superframe_slot_cb+0x3c>
            dpl_cputime_timer_stop(&tdma->slot[i]->timer);
    ac64:	300c      	adds	r0, #12
    ac66:	f003 fbcc 	bl	e402 <dpl_cputime_timer_stop>
    ac6a:	e7ef      	b.n	ac4c <tdma_superframe_slot_cb+0x3c>
        }
    }
#if __KERNEL__
    slot_period_us = uwb_dwt_usecs_to_usecs(div64_s64(ccp->period, tdma->nslots));
#else
    slot_period_us = uwb_dwt_usecs_to_usecs(ccp->period / tdma->nslots);
    ac6c:	f8d8 00e8 	ldr.w	r0, [r8, #232]	; 0xe8
    ac70:	fbb0 f0f3 	udiv	r0, r0, r3
    ac74:	f016 fb22 	bl	212bc <__aeabi_ui2d>
    ac78:	a31d      	add	r3, pc, #116	; (adr r3, acf0 <tdma_superframe_slot_cb+0xe0>)
    ac7a:	e9d3 2300 	ldrd	r2, r3, [r3]
    ac7e:	f016 fb97 	bl	213b0 <__aeabi_dmul>
    ac82:	f016 fe6d 	bl	21960 <__aeabi_d2uiz>
    ac86:	4681      	mov	r9, r0
#endif
    for (i = 0; i < tdma->nslots; i++) {
    ac88:	2400      	movs	r4, #0
    ac8a:	e001      	b.n	ac90 <tdma_superframe_slot_cb+0x80>
    ac8c:	3401      	adds	r4, #1
    ac8e:	b2a4      	uxth	r4, r4
    ac90:	f8b5 307a 	ldrh.w	r3, [r5, #122]	; 0x7a
    ac94:	42a3      	cmp	r3, r4
    ac96:	d914      	bls.n	acc2 <tdma_superframe_slot_cb+0xb2>
        if (tdma->slot[i]){
    ac98:	f504 73a4 	add.w	r3, r4, #328	; 0x148
    ac9c:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
    aca0:	2a00      	cmp	r2, #0
    aca2:	d0f3      	beq.n	ac8c <tdma_superframe_slot_cb+0x7c>
            tdma->slot[i]->cputime_slot_start = tdma->os_epoch
    aca4:	6feb      	ldr	r3, [r5, #124]	; 0x7c
                + dpl_cputime_usecs_to_ticks((uint32_t) (i * slot_period_us) - MYNEWT_VAL(OS_LATENCY));
    aca6:	fb09 3304 	mla	r3, r9, r4, r3
    acaa:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
            tdma->slot[i]->cputime_slot_start = tdma->os_epoch
    acae:	6053      	str	r3, [r2, #4]
            hal_timer_start_at(&tdma->slot[i]->timer, tdma->slot[i]->cputime_slot_start);
    acb0:	f504 73a4 	add.w	r3, r4, #328	; 0x148
    acb4:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
    acb8:	6841      	ldr	r1, [r0, #4]
    acba:	300c      	adds	r0, #12
    acbc:	f00d fea8 	bl	18a10 <hal_timer_start_at>
    acc0:	e7e4      	b.n	ac8c <tdma_superframe_slot_cb+0x7c>
        }
    }

    /* Next superframe slot estimate */
    slot->cputime_slot_start = tdma->os_epoch
    acc2:	6fec      	ldr	r4, [r5, #124]	; 0x7c
        + dpl_cputime_usecs_to_ticks(
    acc4:	f8d8 00e8 	ldr.w	r0, [r8, #232]	; 0xe8
    acc8:	f016 faf8 	bl	212bc <__aeabi_ui2d>
    accc:	a308      	add	r3, pc, #32	; (adr r3, acf0 <tdma_superframe_slot_cb+0xe0>)
    acce:	e9d3 2300 	ldrd	r2, r3, [r3]
    acd2:	f016 fb6d 	bl	213b0 <__aeabi_dmul>
    acd6:	f016 fe43 	bl	21960 <__aeabi_d2uiz>
    acda:	eb00 0109 	add.w	r1, r0, r9
    acde:	4421      	add	r1, r4
    slot->cputime_slot_start = tdma->os_epoch
    ace0:	6071      	str	r1, [r6, #4]
            (uint32_t)uwb_dwt_usecs_to_usecs(ccp->period) + slot_period_us);
    hal_timer_start_at(&slot->timer, slot->cputime_slot_start);
    ace2:	4638      	mov	r0, r7
    ace4:	f00d fe94 	bl	18a10 <hal_timer_start_at>
}
    ace8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    acec:	f3af 8000 	nop.w
    acf0:	90690691 	.word	0x90690691
    acf4:	3ff06906 	.word	0x3ff06906

0000acf8 <slot_timer_cb>:
 *
 * @return void
 */
static void
slot_timer_cb(void * arg)
{
    acf8:	b508      	push	{r3, lr}
    assert(arg);
    acfa:	b168      	cbz	r0, ad18 <slot_timer_cb+0x20>
    acfc:	4601      	mov	r1, r0
    tdma_slot_t * slot = (tdma_slot_t *) arg;
    /* No point in continuing if this slot is NULL */
    if (slot == NULL) {
        return;
    }
    tdma_instance_t * tdma = slot->parent;
    acfe:	6880      	ldr	r0, [r0, #8]

    DIAGMSG("{\"utime\": %"PRIu32",\"msg\": \"slot_timer_cb\"}\n",
            dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));

    TDMA_STATS_INC(slot_timer_cnt);
    ad00:	69c3      	ldr	r3, [r0, #28]
    ad02:	3301      	adds	r3, #1
    ad04:	61c3      	str	r3, [r0, #28]

    if (slot == &tdma->superframe_slot) {
    ad06:	f100 0380 	add.w	r3, r0, #128	; 0x80
    ad0a:	428b      	cmp	r3, r1
    ad0c:	d00a      	beq.n	ad24 <slot_timer_cb+0x2c>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    ad0e:	3124      	adds	r1, #36	; 0x24
    ad10:	30b8      	adds	r0, #184	; 0xb8
    ad12:	f7fe fc5b 	bl	95cc <os_eventq_put>
#ifdef TDMA_TASKS_ENABLE
    dpl_eventq_put(&tdma->eventq, &slot->event);
#else
    dpl_eventq_put(&tdma->dev_inst->eventq, &slot->event);
#endif
}
    ad16:	bd08      	pop	{r3, pc}
    assert(arg);
    ad18:	2300      	movs	r3, #0
    ad1a:	461a      	mov	r2, r3
    ad1c:	4619      	mov	r1, r3
    ad1e:	4618      	mov	r0, r3
    ad20:	f7fe f920 	bl	8f64 <__assert_func>
        TDMA_STATS_INC(superframe_miss);
    ad24:	6a43      	ldr	r3, [r0, #36]	; 0x24
    ad26:	3301      	adds	r3, #1
    ad28:	6243      	str	r3, [r0, #36]	; 0x24
        return;
    ad2a:	e7f4      	b.n	ad16 <slot_timer_cb+0x1e>

0000ad2c <superframe_cb>:
    tdma_instance_t * tdma = (tdma_instance_t*)cbs->inst_ptr;
    ad2c:	6848      	ldr	r0, [r1, #4]
    struct uwb_ccp_instance *ccp = tdma->ccp;
    ad2e:	6842      	ldr	r2, [r0, #4]
    if (!tdma) {
    ad30:	b180      	cbz	r0, ad54 <superframe_cb+0x28>
{
    ad32:	b508      	push	{r3, lr}
    if (tdma->status.initialized) {
    ad34:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    ad38:	f013 0f02 	tst.w	r3, #2
    ad3c:	d101      	bne.n	ad42 <superframe_cb+0x16>
}
    ad3e:	2000      	movs	r0, #0
    ad40:	bd08      	pop	{r3, pc}
        tdma->os_epoch = ccp->os_epoch;
    ad42:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
    ad46:	67c3      	str	r3, [r0, #124]	; 0x7c
    ad48:	f100 01a4 	add.w	r1, r0, #164	; 0xa4
    ad4c:	30b8      	adds	r0, #184	; 0xb8
    ad4e:	f7fe fc3d 	bl	95cc <os_eventq_put>
}
    ad52:	e7f4      	b.n	ad3e <superframe_cb+0x12>
}
    ad54:	2000      	movs	r0, #0
    ad56:	4770      	bx	lr

0000ad58 <tdma_task>:
{
    ad58:	b570      	push	{r4, r5, r6, lr}
    ad5a:	4606      	mov	r6, r0
    tdma_instance_t * tdma = arg;
    ad5c:	e002      	b.n	ad64 <tdma_task+0xc>
    return ((struct os_event*)ev)->ev_cb((struct os_event*)ev);
    ad5e:	6863      	ldr	r3, [r4, #4]
    ad60:	4620      	mov	r0, r4
    ad62:	4798      	blx	r3
    return (struct dpl_event *) os_eventq_get((struct os_eventq *) evq);
    ad64:	f106 00b8 	add.w	r0, r6, #184	; 0xb8
    ad68:	f7fe fc71 	bl	964e <os_eventq_get>
    ad6c:	4604      	mov	r4, r0
    return ev->ev.ev_arg;
    ad6e:	6885      	ldr	r5, [r0, #8]
        ticks = dpl_cputime_get32();
    ad70:	f003 fb4b 	bl	e40a <dpl_cputime_get32>
        delay = dpl_cputime_ticks_to_usecs(ticks - slot->cputime_slot_start);
    ad74:	686b      	ldr	r3, [r5, #4]
    ad76:	1ac0      	subs	r0, r0, r3
        if (slot->idx!=0 && delay > MYNEWT_VAL(TDMA_MAX_SLOT_DELAY_US)) {
    ad78:	882b      	ldrh	r3, [r5, #0]
    ad7a:	2b00      	cmp	r3, #0
    ad7c:	d0ef      	beq.n	ad5e <tdma_task+0x6>
    ad7e:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    ad82:	d9ec      	bls.n	ad5e <tdma_task+0x6>
            TDMA_STATS_INC(dropped_slots);
    ad84:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    ad86:	3301      	adds	r3, #1
    ad88:	62b3      	str	r3, [r6, #40]	; 0x28
    ad8a:	e7eb      	b.n	ad64 <tdma_task+0xc>

0000ad8c <tdma_tasks_init>:
{
    ad8c:	b530      	push	{r4, r5, lr}
    ad8e:	b085      	sub	sp, #20
    ad90:	4604      	mov	r4, r0
    if (!dpl_eventq_inited(&inst->eventq))
    ad92:	f100 05b8 	add.w	r5, r0, #184	; 0xb8
    return os_eventq_inited((struct os_eventq *) evq);
    ad96:	4628      	mov	r0, r5
    ad98:	f7fe fc13 	bl	95c2 <os_eventq_inited>
    ad9c:	b108      	cbz	r0, ada2 <tdma_tasks_init+0x16>
}
    ad9e:	b005      	add	sp, #20
    ada0:	bd30      	pop	{r4, r5, pc}
    os_eventq_init((struct os_eventq *) evq);
    ada2:	4628      	mov	r0, r5
    ada4:	f7fe fc04 	bl	95b0 <os_eventq_init>
        dpl_task_init(&inst->task_str, "tdma",
    ada8:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
                      inst->task_stack,
    adac:	f504 7290 	add.w	r2, r4, #288	; 0x120
    return os_task_init((struct os_task *) t, name, (os_task_func_t) func,
    adb0:	f44f 7180 	mov.w	r1, #256	; 0x100
    adb4:	9103      	str	r1, [sp, #12]
    adb6:	9202      	str	r2, [sp, #8]
    adb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    adbc:	9201      	str	r2, [sp, #4]
    adbe:	9300      	str	r3, [sp, #0]
    adc0:	4623      	mov	r3, r4
    adc2:	4a03      	ldr	r2, [pc, #12]	; (add0 <tdma_tasks_init+0x44>)
    adc4:	4903      	ldr	r1, [pc, #12]	; (add4 <tdma_tasks_init+0x48>)
    adc6:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    adca:	f7ff f883 	bl	9ed4 <os_task_init>
}
    adce:	e7e6      	b.n	ad9e <tdma_tasks_init+0x12>
    add0:	0000ad59 	.word	0x0000ad59
    add4:	00022fb8 	.word	0x00022fb8

0000add8 <tdma_init>:
{
    add8:	b570      	push	{r4, r5, r6, lr}
    adda:	b082      	sub	sp, #8
    assert(dev);
    addc:	2800      	cmp	r0, #0
    adde:	d057      	beq.n	ae90 <tdma_init+0xb8>
    ade0:	460d      	mov	r5, r1
    ade2:	4606      	mov	r6, r0
    tdma_instance_t * tdma = (tdma_instance_t*)uwb_mac_find_cb_inst_ptr(dev, UWBEXT_TDMA);
    ade4:	2103      	movs	r1, #3
    ade6:	f7fd fe9a 	bl	8b1e <uwb_mac_find_cb_inst_ptr>
    if (tdma == NULL) {
    adea:	4604      	mov	r4, r0
    adec:	2800      	cmp	r0, #0
    adee:	d055      	beq.n	ae9c <tdma_init+0xc4>
    tdma->cbs = (struct uwb_mac_interface){
    adf0:	f104 0530 	add.w	r5, r4, #48	; 0x30
    adf4:	223c      	movs	r2, #60	; 0x3c
    adf6:	2100      	movs	r1, #0
    adf8:	4628      	mov	r0, r5
    adfa:	f002 fe6e 	bl	dada <memset>
    adfe:	2303      	movs	r3, #3
    ae00:	8663      	strh	r3, [r4, #50]	; 0x32
    ae02:	6364      	str	r4, [r4, #52]	; 0x34
    ae04:	4b42      	ldr	r3, [pc, #264]	; (af10 <tdma_init+0x138>)
    ae06:	6663      	str	r3, [r4, #100]	; 0x64
    uwb_mac_append_interface(dev, &tdma->cbs);
    ae08:	4629      	mov	r1, r5
    ae0a:	4630      	mov	r0, r6
    ae0c:	f7fd fe32 	bl	8a74 <uwb_mac_append_interface>
    tdma->ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(dev, UWBEXT_CCP);
    ae10:	2101      	movs	r1, #1
    ae12:	4630      	mov	r0, r6
    ae14:	f7fd fe83 	bl	8b1e <uwb_mac_find_cb_inst_ptr>
    ae18:	6060      	str	r0, [r4, #4]
    assert(tdma->ccp);
    ae1a:	2800      	cmp	r0, #0
    ae1c:	d065      	beq.n	aeea <tdma_init+0x112>
    int rc = stats_init(
    ae1e:	f104 0508 	add.w	r5, r4, #8
    ae22:	2104      	movs	r1, #4
    ae24:	9100      	str	r1, [sp, #0]
    ae26:	4b3b      	ldr	r3, [pc, #236]	; (af14 <tdma_init+0x13c>)
    ae28:	460a      	mov	r2, r1
    ae2a:	4628      	mov	r0, r5
    ae2c:	f006 f8e0 	bl	10ff0 <stats_init>
    assert(rc == 0);
    ae30:	2800      	cmp	r0, #0
    ae32:	d160      	bne.n	aef6 <tdma_init+0x11e>
    rc = stats_register("tdma", STATS_HDR(tdma->stat));
    ae34:	4629      	mov	r1, r5
    ae36:	4838      	ldr	r0, [pc, #224]	; (af18 <tdma_init+0x140>)
    ae38:	f006 f964 	bl	11104 <stats_register>
    assert(rc == 0);
    ae3c:	2800      	cmp	r0, #0
    ae3e:	d160      	bne.n	af02 <tdma_init+0x12a>
    tdma->superframe_slot.parent = tdma;
    ae40:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
    tdma->superframe_slot.idx = 0;
    ae44:	2500      	movs	r5, #0
    ae46:	4626      	mov	r6, r4
    ae48:	f826 5f80 	strh.w	r5, [r6, #128]!
    dpl_cputime_timer_init(&tdma->superframe_slot.timer, slot_timer_cb, (void *) &tdma->superframe_slot);
    ae4c:	4632      	mov	r2, r6
    ae4e:	4933      	ldr	r1, [pc, #204]	; (af1c <tdma_init+0x144>)
    ae50:	f104 008c 	add.w	r0, r4, #140	; 0x8c
    ae54:	f003 faba 	bl	e3cc <dpl_cputime_timer_init>
    memset(ev, 0, sizeof(*ev));
    ae58:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
    ae5c:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
    ae60:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
    ae64:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
    ev->ev.ev_cb = (os_event_fn *)fn;
    ae68:	4b2d      	ldr	r3, [pc, #180]	; (af20 <tdma_init+0x148>)
    ae6a:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
    ev->ev.ev_arg = arg;
    ae6e:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
    tdma->status.initialized = true;
    ae72:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    ae76:	f043 0302 	orr.w	r3, r3, #2
    ae7a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    tdma->os_epoch = dpl_cputime_get32();
    ae7e:	f003 fac4 	bl	e40a <dpl_cputime_get32>
    ae82:	67e0      	str	r0, [r4, #124]	; 0x7c
    tdma_tasks_init(tdma);
    ae84:	4620      	mov	r0, r4
    ae86:	f7ff ff81 	bl	ad8c <tdma_tasks_init>
}
    ae8a:	4620      	mov	r0, r4
    ae8c:	b002      	add	sp, #8
    ae8e:	bd70      	pop	{r4, r5, r6, pc}
    assert(dev);
    ae90:	2300      	movs	r3, #0
    ae92:	461a      	mov	r2, r3
    ae94:	4619      	mov	r1, r3
    ae96:	4618      	mov	r0, r3
    ae98:	f7fe f864 	bl	8f64 <__assert_func>
        tdma = (tdma_instance_t *) calloc(1, sizeof(struct _tdma_instance_t) + nslots * sizeof(struct _tdma_slot_t *));
    ae9c:	f505 71a4 	add.w	r1, r5, #328	; 0x148
    aea0:	0089      	lsls	r1, r1, #2
    aea2:	2001      	movs	r0, #1
    aea4:	f002 fcd7 	bl	d856 <calloc>
        assert(tdma);
    aea8:	4604      	mov	r4, r0
    aeaa:	b190      	cbz	r0, aed2 <tdma_init+0xfa>
        tdma->status.selfmalloc = 1;
    aeac:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    aeb0:	f043 0301 	orr.w	r3, r3, #1
    aeb4:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
    return (dpl_error_t)os_mutex_init(&mu->mu);
    aeb8:	306c      	adds	r0, #108	; 0x6c
    aeba:	f7ff fd5f 	bl	a97c <os_mutex_init>
        assert(err == DPL_OK);
    aebe:	b970      	cbnz	r0, aede <tdma_init+0x106>
        tdma->nslots = nslots;
    aec0:	f8a4 507a 	strh.w	r5, [r4, #122]	; 0x7a
        tdma->dev_inst = dev;
    aec4:	6026      	str	r6, [r4, #0]
        tdma->task_prio = dev->task_prio + 0x6;
    aec6:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
    aeca:	3306      	adds	r3, #6
    aecc:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
    aed0:	e78e      	b.n	adf0 <tdma_init+0x18>
        assert(tdma);
    aed2:	2300      	movs	r3, #0
    aed4:	461a      	mov	r2, r3
    aed6:	4619      	mov	r1, r3
    aed8:	4618      	mov	r0, r3
    aeda:	f7fe f843 	bl	8f64 <__assert_func>
        assert(err == DPL_OK);
    aede:	2300      	movs	r3, #0
    aee0:	461a      	mov	r2, r3
    aee2:	4619      	mov	r1, r3
    aee4:	4618      	mov	r0, r3
    aee6:	f7fe f83d 	bl	8f64 <__assert_func>
    assert(tdma->ccp);
    aeea:	2300      	movs	r3, #0
    aeec:	461a      	mov	r2, r3
    aeee:	4619      	mov	r1, r3
    aef0:	4618      	mov	r0, r3
    aef2:	f7fe f837 	bl	8f64 <__assert_func>
    assert(rc == 0);
    aef6:	2300      	movs	r3, #0
    aef8:	461a      	mov	r2, r3
    aefa:	4619      	mov	r1, r3
    aefc:	4618      	mov	r0, r3
    aefe:	f7fe f831 	bl	8f64 <__assert_func>
    assert(rc == 0);
    af02:	2300      	movs	r3, #0
    af04:	461a      	mov	r2, r3
    af06:	4619      	mov	r1, r3
    af08:	4618      	mov	r0, r3
    af0a:	f7fe f82b 	bl	8f64 <__assert_func>
    af0e:	bf00      	nop
    af10:	0000ad2d 	.word	0x0000ad2d
    af14:	00023050 	.word	0x00023050
    af18:	00022fb8 	.word	0x00022fb8
    af1c:	0000acf9 	.word	0x0000acf9
    af20:	0000ac11 	.word	0x0000ac11

0000af24 <tdma_assign_slot>:
{
    af24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    af26:	4615      	mov	r5, r2
    assert(idx < inst->nslots);
    af28:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
    af2c:	42aa      	cmp	r2, r5
    af2e:	d92c      	bls.n	af8a <tdma_assign_slot+0x66>
    af30:	4604      	mov	r4, r0
    af32:	460e      	mov	r6, r1
    af34:	461f      	mov	r7, r3
    if (inst->status.initialized == false)
    af36:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    af3a:	f013 0f02 	tst.w	r3, #2
    af3e:	d023      	beq.n	af88 <tdma_assign_slot+0x64>
    if (inst->slot[idx] == NULL){
    af40:	f505 73a4 	add.w	r3, r5, #328	; 0x148
    af44:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    af48:	b328      	cbz	r0, af96 <tdma_assign_slot+0x72>
        memset(inst->slot[idx], 0, sizeof(struct _tdma_slot_t));
    af4a:	2238      	movs	r2, #56	; 0x38
    af4c:	2100      	movs	r1, #0
    af4e:	f002 fdc4 	bl	dada <memset>
    inst->slot[idx]->idx = idx;
    af52:	f505 72a4 	add.w	r2, r5, #328	; 0x148
    af56:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
    af5a:	801d      	strh	r5, [r3, #0]
    inst->slot[idx]->parent = inst;
    af5c:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
    af60:	609c      	str	r4, [r3, #8]
    inst->slot[idx]->arg = arg;
    af62:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
    af66:	635f      	str	r7, [r3, #52]	; 0x34
    dpl_event_init(&inst->slot[idx]->event, call_back, (void *) inst->slot[idx]);
    af68:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
    memset(ev, 0, sizeof(*ev));
    af6c:	2100      	movs	r1, #0
    af6e:	6259      	str	r1, [r3, #36]	; 0x24
    af70:	6299      	str	r1, [r3, #40]	; 0x28
    af72:	62d9      	str	r1, [r3, #44]	; 0x2c
    af74:	6319      	str	r1, [r3, #48]	; 0x30
    ev->ev.ev_cb = (os_event_fn *)fn;
    af76:	629e      	str	r6, [r3, #40]	; 0x28
    ev->ev.ev_arg = arg;
    af78:	62db      	str	r3, [r3, #44]	; 0x2c
    dpl_cputime_timer_init(&inst->slot[idx]->timer, slot_timer_cb, (void *) inst->slot[idx]);
    af7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    af7e:	490e      	ldr	r1, [pc, #56]	; (afb8 <tdma_assign_slot+0x94>)
    af80:	f102 000c 	add.w	r0, r2, #12
    af84:	f003 fa22 	bl	e3cc <dpl_cputime_timer_init>
}
    af88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert(idx < inst->nslots);
    af8a:	2300      	movs	r3, #0
    af8c:	461a      	mov	r2, r3
    af8e:	4619      	mov	r1, r3
    af90:	4618      	mov	r0, r3
    af92:	f7fd ffe7 	bl	8f64 <__assert_func>
        inst->slot[idx] = (tdma_slot_t  *) calloc(1, sizeof(struct _tdma_slot_t));
    af96:	2138      	movs	r1, #56	; 0x38
    af98:	2001      	movs	r0, #1
    af9a:	f002 fc5c 	bl	d856 <calloc>
    af9e:	f505 73a4 	add.w	r3, r5, #328	; 0x148
    afa2:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
        assert(inst->slot[idx]);
    afa6:	2800      	cmp	r0, #0
    afa8:	d1d3      	bne.n	af52 <tdma_assign_slot+0x2e>
    afaa:	2300      	movs	r3, #0
    afac:	461a      	mov	r2, r3
    afae:	4619      	mov	r1, r3
    afb0:	4618      	mov	r0, r3
    afb2:	f7fd ffd7 	bl	8f64 <__assert_func>
    afb6:	bf00      	nop
    afb8:	0000acf9 	.word	0x0000acf9

0000afbc <tdma_release_slot>:
{
    afbc:	b538      	push	{r3, r4, r5, lr}
    assert(idx < inst->nslots);
    afbe:	f8b0 307a 	ldrh.w	r3, [r0, #122]	; 0x7a
    afc2:	428b      	cmp	r3, r1
    afc4:	d913      	bls.n	afee <tdma_release_slot+0x32>
    afc6:	4605      	mov	r5, r0
    afc8:	460c      	mov	r4, r1
    if (inst->slot[idx]) {
    afca:	f501 73a4 	add.w	r3, r1, #328	; 0x148
    afce:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    afd2:	b158      	cbz	r0, afec <tdma_release_slot+0x30>
        dpl_cputime_timer_stop(&inst->slot[idx]->timer);
    afd4:	300c      	adds	r0, #12
    afd6:	f003 fa14 	bl	e402 <dpl_cputime_timer_stop>
        free(inst->slot[idx]);
    afda:	f504 74a4 	add.w	r4, r4, #328	; 0x148
    afde:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    afe2:	f002 fd33 	bl	da4c <free>
        inst->slot[idx] =  NULL;
    afe6:	2300      	movs	r3, #0
    afe8:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
}
    afec:	bd38      	pop	{r3, r4, r5, pc}
    assert(idx < inst->nslots);
    afee:	2300      	movs	r3, #0
    aff0:	461a      	mov	r2, r3
    aff2:	4619      	mov	r1, r3
    aff4:	4618      	mov	r0, r3
    aff6:	f7fd ffb5 	bl	8f64 <__assert_func>

0000affa <tdma_stop>:
 *
 * @return void
 */
void
tdma_stop(struct _tdma_instance_t * tdma)
{
    affa:	b538      	push	{r3, r4, r5, lr}
    affc:	4605      	mov	r5, r0
    uint16_t i;
    for (i = 0; i < tdma->nslots; i++) {
    affe:	2400      	movs	r4, #0
    b000:	e001      	b.n	b006 <tdma_stop+0xc>
    b002:	3401      	adds	r4, #1
    b004:	b2a4      	uxth	r4, r4
    b006:	f8b5 307a 	ldrh.w	r3, [r5, #122]	; 0x7a
    b00a:	42a3      	cmp	r3, r4
    b00c:	d90d      	bls.n	b02a <tdma_stop+0x30>
        if (tdma->slot[i]){
    b00e:	f504 73a4 	add.w	r3, r4, #328	; 0x148
    b012:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
    b016:	2800      	cmp	r0, #0
    b018:	d0f3      	beq.n	b002 <tdma_stop+0x8>
            dpl_cputime_timer_stop(&tdma->slot[i]->timer);
    b01a:	300c      	adds	r0, #12
    b01c:	f003 f9f1 	bl	e402 <dpl_cputime_timer_stop>
            tdma_release_slot(tdma, i);
    b020:	4621      	mov	r1, r4
    b022:	4628      	mov	r0, r5
    b024:	f7ff ffca 	bl	afbc <tdma_release_slot>
    b028:	e7eb      	b.n	b002 <tdma_stop+0x8>
        }
    }
}
    b02a:	bd38      	pop	{r3, r4, r5, pc}

0000b02c <tdma_free>:
{
    b02c:	b510      	push	{r4, lr}
    assert(inst);
    b02e:	b190      	cbz	r0, b056 <tdma_free+0x2a>
    b030:	4604      	mov	r4, r0
    tdma_stop(inst);
    b032:	f7ff ffe2 	bl	affa <tdma_stop>
    uwb_mac_remove_interface(inst->dev_inst, inst->cbs.id);
    b036:	8e61      	ldrh	r1, [r4, #50]	; 0x32
    b038:	6820      	ldr	r0, [r4, #0]
    b03a:	f7fd fd40 	bl	8abe <uwb_mac_remove_interface>
    if (inst->status.selfmalloc)
    b03e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    b042:	f013 0f01 	tst.w	r3, #1
    b046:	d10c      	bne.n	b062 <tdma_free+0x36>
        inst->status.initialized = 0;
    b048:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    b04c:	f36f 0341 	bfc	r3, #1, #1
    b050:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
    b054:	bd10      	pop	{r4, pc}
    assert(inst);
    b056:	2300      	movs	r3, #0
    b058:	461a      	mov	r2, r3
    b05a:	4619      	mov	r1, r3
    b05c:	4618      	mov	r0, r3
    b05e:	f7fd ff81 	bl	8f64 <__assert_func>
        free(inst);
    b062:	4620      	mov	r0, r4
    b064:	f002 fcf2 	bl	da4c <free>
    b068:	e7f4      	b.n	b054 <tdma_free+0x28>

0000b06a <tdma_rx_slot_start>:
 *
 * @return dx_time   The time for a rx operation to start
 */
uint64_t
tdma_rx_slot_start(struct _tdma_instance_t * tdma, dpl_float32_t idx)
{
    b06a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b06e:	ee10 8a10 	vmov	r8, s0
    uint64_t dx_time, slot_offset;
    dpl_float64_t slot_period;
    struct uwb_ccp_instance * ccp = tdma->ccp;
    b072:	6845      	ldr	r5, [r0, #4]
    uint64_t rx_stable = tdma->dev_inst->config.rx.timeToRxStable;
    b074:	6803      	ldr	r3, [r0, #0]
    b076:	f893 451b 	ldrb.w	r4, [r3, #1307]	; 0x51b
#if __KERNEL__
    slot_period = DPL_FLOAT64_U64_TO_F64(div64_s64(((uint64_t)ccp->period << 16), tdma->nslots));
#else
    slot_period = DPL_FLOAT64_U64_TO_F64((((uint64_t)ccp->period << 16) / tdma->nslots));
    b07a:	f8d5 10e8 	ldr.w	r1, [r5, #232]	; 0xe8
    b07e:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
    b082:	2300      	movs	r3, #0
    b084:	0408      	lsls	r0, r1, #16
    b086:	0c09      	lsrs	r1, r1, #16
    b088:	f016 fd2a 	bl	21ae0 <__aeabi_uldivmod>
    b08c:	f016 f95a 	bl	21344 <__aeabi_ul2d>
    b090:	4606      	mov	r6, r0
    b092:	460f      	mov	r7, r1
#endif
    slot_offset = DPL_FLOAT64_INT(DPL_FLOAT64_MUL(DPL_FLOAT64_FROM_F32(idx), slot_period));
    b094:	4640      	mov	r0, r8
    b096:	f016 f933 	bl	21300 <__aeabi_f2d>
    b09a:	4632      	mov	r2, r6
    b09c:	463b      	mov	r3, r7
    b09e:	f016 f987 	bl	213b0 <__aeabi_dmul>
    b0a2:	f016 fd35 	bl	21b10 <__aeabi_d2lz>
    /* Compensate for the time it takes to turn on the receiver */
    slot_offset -= (rx_stable << 16);
    b0a6:	0422      	lsls	r2, r4, #16
    b0a8:	1a82      	subs	r2, r0, r2

#if MYNEWT_VAL(UWB_WCS_ENABLED)
    {
        struct uwb_wcs_instance * wcs = ccp->wcs;
        dx_time = ccp->local_epoch + (uint64_t) uwb_wcs_dtu_time_adjust(wcs, slot_offset);
    b0aa:	f8d5 40d8 	ldr.w	r4, [r5, #216]	; 0xd8
    b0ae:	f8d5 60dc 	ldr.w	r6, [r5, #220]	; 0xdc
    b0b2:	f161 0300 	sbc.w	r3, r1, #0
    b0b6:	6ea8      	ldr	r0, [r5, #104]	; 0x68
    b0b8:	f002 faec 	bl	d694 <uwb_wcs_dtu_time_adjust>
    b0bc:	1820      	adds	r0, r4, r0
    }
#else
    dx_time = ccp->local_epoch + slot_offset;
#endif
    return dx_time;
}
    b0be:	eb46 0101 	adc.w	r1, r6, r1
    b0c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0000b0c8 <tdma_tx_slot_start>:
 *
 * @return dx_time   The time for a rx operation to start (dtu)
 */
uint64_t
tdma_tx_slot_start(struct _tdma_instance_t * tdma, dpl_float32_t idx)
{
    b0c8:	b570      	push	{r4, r5, r6, lr}
    b0ca:	4606      	mov	r6, r0
    uint64_t dx_time = tdma_rx_slot_start(tdma, idx);
    b0cc:	f7ff ffcd 	bl	b06a <tdma_rx_slot_start>
    b0d0:	4604      	mov	r4, r0
    b0d2:	460d      	mov	r5, r1
#ifndef __KERNEL__
    dx_time = (dx_time + ((uint64_t)ceilf(uwb_usecs_to_dwt_usecs(uwb_phy_SHR_duration(tdma->dev_inst))) << 16));
    b0d4:	6830      	ldr	r0, [r6, #0]
    b0d6:	6a43      	ldr	r3, [r0, #36]	; 0x24
    b0d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    b0dc:	4798      	blx	r3
    b0de:	f016 f8fd 	bl	212dc <__aeabi_i2d>
    b0e2:	a30b      	add	r3, pc, #44	; (adr r3, b110 <tdma_tx_slot_start+0x48>)
    b0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
    b0e8:	f016 fa8c 	bl	21604 <__aeabi_ddiv>
    b0ec:	f016 fc58 	bl	219a0 <__aeabi_d2f>
    b0f0:	ee00 0a10 	vmov	s0, r0
    b0f4:	f016 fed6 	bl	21ea4 <ceilf>
    b0f8:	ee10 0a10 	vmov	r0, s0
    b0fc:	f016 fd20 	bl	21b40 <__aeabi_f2ulz>
    b100:	0409      	lsls	r1, r1, #16
    b102:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
    b106:	0403      	lsls	r3, r0, #16
    b108:	1918      	adds	r0, r3, r4
#else
    dx_time = (dx_time + ((uint64_t)(uwb_usecs_to_dwt_usecs(uwb_phy_SHR_duration(tdma->dev_inst))) << 16));
#endif
    return dx_time;
}
    b10a:	eb41 0105 	adc.w	r1, r1, r5
    b10e:	bd70      	pop	{r4, r5, r6, pc}
    b110:	90690691 	.word	0x90690691
    b114:	3ff06906 	.word	0x3ff06906

0000b118 <tdma_pkg_init>:
 *
 * @return void
 */
void
tdma_pkg_init(void)
{
    b118:	b510      	push	{r4, lr}
    int i;
    struct uwb_dev *udev;
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    printf("{\"utime\": %"PRIu32",\"msg\": \"tdma_pkg_init\"}\n",
    b11a:	f003 f976 	bl	e40a <dpl_cputime_get32>
    b11e:	4601      	mov	r1, r0
    b120:	4808      	ldr	r0, [pc, #32]	; (b144 <tdma_pkg_init+0x2c>)
    b122:	f003 f8ed 	bl	e300 <printf>
           dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
#endif

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
    b126:	2400      	movs	r4, #0
    b128:	e000      	b.n	b12c <tdma_pkg_init+0x14>
    b12a:	3401      	adds	r4, #1
    b12c:	2c02      	cmp	r4, #2
    b12e:	dc08      	bgt.n	b142 <tdma_pkg_init+0x2a>
        udev = uwb_dev_idx_lookup(i);
    b130:	4620      	mov	r0, r4
    b132:	f7fd fc6f 	bl	8a14 <uwb_dev_idx_lookup>
        if (!udev) {
    b136:	2800      	cmp	r0, #0
    b138:	d0f7      	beq.n	b12a <tdma_pkg_init+0x12>
            continue;
        }
        tdma_init(udev, MYNEWT_VAL(TDMA_NSLOTS));
    b13a:	21a0      	movs	r1, #160	; 0xa0
    b13c:	f7ff fe4c 	bl	add8 <tdma_init>
    b140:	e7f3      	b.n	b12a <tdma_pkg_init+0x12>
    }
}
    b142:	bd10      	pop	{r4, pc}
    b144:	00022fc0 	.word	0x00022fc0

0000b148 <tdma_pkg_down>:
 *
 * @return void
 */
int
tdma_pkg_down(int reason)
{
    b148:	b510      	push	{r4, lr}
    int i;
    struct uwb_dev *udev;
    struct _tdma_instance_t * tdma;
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    printf("{\"utime\": %"PRIu32",\"msg\": \"tdma_pkg_down\"}\n",
    b14a:	f003 f95e 	bl	e40a <dpl_cputime_get32>
    b14e:	4601      	mov	r1, r0
    b150:	480b      	ldr	r0, [pc, #44]	; (b180 <tdma_pkg_down+0x38>)
    b152:	f003 f8d5 	bl	e300 <printf>
           dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
#endif

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
    b156:	2400      	movs	r4, #0
    b158:	e000      	b.n	b15c <tdma_pkg_down+0x14>
    b15a:	3401      	adds	r4, #1
    b15c:	2c02      	cmp	r4, #2
    b15e:	dc0c      	bgt.n	b17a <tdma_pkg_down+0x32>
        udev = uwb_dev_idx_lookup(i);
    b160:	4620      	mov	r0, r4
    b162:	f7fd fc57 	bl	8a14 <uwb_dev_idx_lookup>
        if (!udev) {
    b166:	2800      	cmp	r0, #0
    b168:	d0f7      	beq.n	b15a <tdma_pkg_down+0x12>
            continue;
        }
        tdma = (struct _tdma_instance_t*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_TDMA);
    b16a:	2103      	movs	r1, #3
    b16c:	f7fd fcd7 	bl	8b1e <uwb_mac_find_cb_inst_ptr>
        if (!tdma) {
    b170:	2800      	cmp	r0, #0
    b172:	d0f2      	beq.n	b15a <tdma_pkg_down+0x12>
            continue;
        }
        tdma_free(tdma);
    b174:	f7ff ff5a 	bl	b02c <tdma_free>
    b178:	e7ef      	b.n	b15a <tdma_pkg_down+0x12>
    }
    return 0;
}
    b17a:	2000      	movs	r0, #0
    b17c:	bd10      	pop	{r4, pc}
    b17e:	bf00      	nop
    b180:	00022fe8 	.word	0x00022fe8
    b184:	00000000 	.word	0x00000000

0000b188 <adjust_for_epoch_to_rm>:
}
#endif

static void
adjust_for_epoch_to_rm(struct uwb_ccp_instance * ccp, uint16_t epoch_to_rm_us)
{
    b188:	b5d0      	push	{r4, r6, r7, lr}
    b18a:	4604      	mov	r4, r0
    b18c:	4608      	mov	r0, r1
    ccp->master_epoch.timestamp -= ((uint64_t)epoch_to_rm_us << 16);
    b18e:	040a      	lsls	r2, r1, #16
    b190:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    b194:	f8d4 10d4 	ldr.w	r1, [r4, #212]	; 0xd4
    b198:	1a9b      	subs	r3, r3, r2
    b19a:	f161 0100 	sbc.w	r1, r1, #0
    b19e:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
    b1a2:	f8c4 10d4 	str.w	r1, [r4, #212]	; 0xd4
    ccp->local_epoch -= ((uint64_t)epoch_to_rm_us << 16);
    b1a6:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    b1aa:	f8d4 10dc 	ldr.w	r1, [r4, #220]	; 0xdc
    b1ae:	1a9b      	subs	r3, r3, r2
    b1b0:	f161 0100 	sbc.w	r1, r1, #0
    b1b4:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
    b1b8:	f8c4 10dc 	str.w	r1, [r4, #220]	; 0xdc
    ccp->os_epoch -= dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(epoch_to_rm_us));
    b1bc:	f016 f88e 	bl	212dc <__aeabi_i2d>
    b1c0:	a309      	add	r3, pc, #36	; (adr r3, b1e8 <adjust_for_epoch_to_rm+0x60>)
    b1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
    b1c6:	f016 f8f3 	bl	213b0 <__aeabi_dmul>
    b1ca:	4606      	mov	r6, r0
    b1cc:	460f      	mov	r7, r1
    b1ce:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
    b1d2:	f016 f873 	bl	212bc <__aeabi_ui2d>
    b1d6:	4632      	mov	r2, r6
    b1d8:	463b      	mov	r3, r7
    b1da:	f015 ff31 	bl	21040 <__aeabi_dsub>
    b1de:	f016 fbbf 	bl	21960 <__aeabi_d2uiz>
    b1e2:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
}
    b1e6:	bdd0      	pop	{r4, r6, r7, pc}
    b1e8:	90690691 	.word	0x90690691
    b1ec:	3ff06906 	.word	0x3ff06906

0000b1f0 <reset_cb>:
 *
 * @return void
 */
static bool
reset_cb(struct uwb_dev *inst, struct uwb_mac_interface * cbs)
{
    b1f0:	b510      	push	{r4, lr}
    struct uwb_ccp_instance * ccp = (struct uwb_ccp_instance *)cbs->inst_ptr;
    b1f2:	684c      	ldr	r4, [r1, #4]
/**
 * Get current semaphore's count
 */
static inline uint16_t os_sem_get_count(struct os_sem *sem)
{
    return sem->sem_tokens;
    b1f4:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
    if(dpl_sem_get_count(&ccp->sem) == 0){
    b1f8:	b10b      	cbz	r3, b1fe <reset_cb+0xe>
        dpl_error_t err = dpl_sem_release(&ccp->sem);
        assert(err == DPL_OK);
        CCP_STATS_INC(reset);
        return true;
    }
    return false;   // CCP is an observer and should not return true
    b1fa:	2000      	movs	r0, #0
}
    b1fc:	bd10      	pop	{r4, pc}
    return (dpl_error_t)os_sem_release(&sem->sem);
    b1fe:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    b202:	f7fe fdcf 	bl	9da4 <os_sem_release>
        assert(err == DPL_OK);
    b206:	b920      	cbnz	r0, b212 <reset_cb+0x22>
        CCP_STATS_INC(reset);
    b208:	6e63      	ldr	r3, [r4, #100]	; 0x64
    b20a:	3301      	adds	r3, #1
    b20c:	6663      	str	r3, [r4, #100]	; 0x64
        return true;
    b20e:	2001      	movs	r0, #1
    b210:	e7f4      	b.n	b1fc <reset_cb+0xc>
        assert(err == DPL_OK);
    b212:	2300      	movs	r3, #0
    b214:	461a      	mov	r2, r3
    b216:	4619      	mov	r1, r3
    b218:	4618      	mov	r0, r3
    b21a:	f7fd fea3 	bl	8f64 <__assert_func>

0000b21e <error_cb>:
    struct uwb_ccp_instance * ccp = (struct uwb_ccp_instance *)cbs->inst_ptr;
    b21e:	6848      	ldr	r0, [r1, #4]
    b220:	f8b0 20b6 	ldrh.w	r2, [r0, #182]	; 0xb6
    if(dpl_sem_get_count(&ccp->sem) == 1)
    b224:	2a01      	cmp	r2, #1
    b226:	d020      	beq.n	b26a <error_cb+0x4c>
{
    b228:	b508      	push	{r3, lr}
    CCP_STATS_INC(txrx_error);
    b22a:	6c03      	ldr	r3, [r0, #64]	; 0x40
    b22c:	3301      	adds	r3, #1
    b22e:	6403      	str	r3, [r0, #64]	; 0x40
    if(dpl_sem_get_count(&ccp->sem) == 0) {
    b230:	b9ea      	cbnz	r2, b26e <error_cb+0x50>
        if (ccp->config.role != CCP_ROLE_MASTER) {
    b232:	f890 30ca 	ldrb.w	r3, [r0, #202]	; 0xca
    b236:	f013 0f1e 	tst.w	r3, #30
    b23a:	d00a      	beq.n	b252 <error_cb+0x34>
            ccp->status.rx_error = 1;
    b23c:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
    b240:	f043 0301 	orr.w	r3, r3, #1
    b244:	f880 30c9 	strb.w	r3, [r0, #201]	; 0xc9
            ccp->missed_frames++;
    b248:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
    b24c:	3301      	adds	r3, #1
    b24e:	f880 30f1 	strb.w	r3, [r0, #241]	; 0xf1
    b252:	30b0      	adds	r0, #176	; 0xb0
    b254:	f7fe fda6 	bl	9da4 <os_sem_release>
        assert(err == DPL_OK);
    b258:	b908      	cbnz	r0, b25e <error_cb+0x40>
    return true;
    b25a:	2001      	movs	r0, #1
    b25c:	e008      	b.n	b270 <error_cb+0x52>
        assert(err == DPL_OK);
    b25e:	2300      	movs	r3, #0
    b260:	461a      	mov	r2, r3
    b262:	4619      	mov	r1, r3
    b264:	4618      	mov	r0, r3
    b266:	f7fd fe7d 	bl	8f64 <__assert_func>
        return false;
    b26a:	2000      	movs	r0, #0
}
    b26c:	4770      	bx	lr
    return true;
    b26e:	2001      	movs	r0, #1
}
    b270:	bd08      	pop	{r3, pc}

0000b272 <rx_timeout_cb>:
{
    b272:	b508      	push	{r3, lr}
    struct uwb_ccp_instance * ccp = (struct uwb_ccp_instance *)cbs->inst_ptr;
    b274:	6848      	ldr	r0, [r1, #4]
    b276:	f8b0 30b6 	ldrh.w	r3, [r0, #182]	; 0xb6
    if(dpl_sem_get_count(&ccp->sem) == 1)
    b27a:	2b01      	cmp	r3, #1
    b27c:	d01c      	beq.n	b2b8 <rx_timeout_cb+0x46>
    if (dpl_sem_get_count(&ccp->sem) == 0){
    b27e:	b10b      	cbz	r3, b284 <rx_timeout_cb+0x12>
    return true;
    b280:	2001      	movs	r0, #1
}
    b282:	bd08      	pop	{r3, pc}
        ccp->status.rx_timeout_error = 1;
    b284:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
    b288:	f043 0302 	orr.w	r3, r3, #2
    b28c:	f880 30c9 	strb.w	r3, [r0, #201]	; 0xc9
        ccp->missed_frames++;
    b290:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
    b294:	3301      	adds	r3, #1
    b296:	f880 30f1 	strb.w	r3, [r0, #241]	; 0xf1
        CCP_STATS_INC(rx_timeout);
    b29a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    b29c:	3301      	adds	r3, #1
    b29e:	65c3      	str	r3, [r0, #92]	; 0x5c
    b2a0:	30b0      	adds	r0, #176	; 0xb0
    b2a2:	f7fe fd7f 	bl	9da4 <os_sem_release>
        assert(err == DPL_OK);
    b2a6:	b908      	cbnz	r0, b2ac <rx_timeout_cb+0x3a>
    return true;
    b2a8:	2001      	movs	r0, #1
    b2aa:	e7ea      	b.n	b282 <rx_timeout_cb+0x10>
        assert(err == DPL_OK);
    b2ac:	2300      	movs	r3, #0
    b2ae:	461a      	mov	r2, r3
    b2b0:	4619      	mov	r1, r3
    b2b2:	4618      	mov	r0, r3
    b2b4:	f7fd fe56 	bl	8f64 <__assert_func>
        return false;
    b2b8:	2000      	movs	r0, #0
    b2ba:	e7e2      	b.n	b282 <rx_timeout_cb+0x10>

0000b2bc <ccp_timer_irq>:
ccp_timer_irq(void * arg){
    b2bc:	b508      	push	{r3, lr}
    assert(arg);
    b2be:	b130      	cbz	r0, b2ce <ccp_timer_irq+0x12>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    b2c0:	f500 718e 	add.w	r1, r0, #284	; 0x11c
    b2c4:	f500 7086 	add.w	r0, r0, #268	; 0x10c
    b2c8:	f7fe f980 	bl	95cc <os_eventq_put>
}
    b2cc:	bd08      	pop	{r3, pc}
    assert(arg);
    b2ce:	2300      	movs	r3, #0
    b2d0:	461a      	mov	r2, r3
    b2d2:	4619      	mov	r1, r3
    b2d4:	4618      	mov	r0, r3
    b2d6:	f7fd fe45 	bl	8f64 <__assert_func>
    b2da:	0000      	movs	r0, r0
    b2dc:	0000      	movs	r0, r0
	...

0000b2e0 <tx_complete_cb>:
{
    b2e0:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    struct uwb_ccp_instance * ccp = (struct uwb_ccp_instance *)cbs->inst_ptr;
    b2e4:	684c      	ldr	r4, [r1, #4]
    b2e6:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
    if(dpl_sem_get_count(&ccp->sem) == 1)
    b2ea:	2b01      	cmp	r3, #1
    b2ec:	f000 8083 	beq.w	b3f6 <tx_complete_cb+0x116>
    b2f0:	4606      	mov	r6, r0
    CCP_STATS_INC(tx_complete);
    b2f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    b2f4:	3301      	adds	r3, #1
    b2f6:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ccp->config.role != CCP_ROLE_MASTER)
    b2f8:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
    b2fc:	f013 0f1e 	tst.w	r3, #30
    b300:	d179      	bne.n	b3f6 <tx_complete_cb+0x116>
    uwb_ccp_frame_t * frame = ccp->frames[(++ccp->idx)%ccp->nframes];
    b302:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
    b306:	3301      	adds	r3, #1
    b308:	b29b      	uxth	r3, r3
    b30a:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
    b30e:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
    b312:	fbb3 f1f2 	udiv	r1, r3, r2
    b316:	fb02 3311 	mls	r3, r2, r1, r3
    b31a:	b29b      	uxth	r3, r3
    b31c:	33e0      	adds	r3, #224	; 0xe0
    b31e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
    return (dev->uw_funcs->uf_read_systime_lo32(dev));
    b322:	6a43      	ldr	r3, [r0, #36]	; 0x24
    b324:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    b326:	4798      	blx	r3
    uint32_t delta_0 = 0xffffffffU&(uwb_read_systime_lo32(inst) - frame->transmission_timestamp.lo);
    b328:	696b      	ldr	r3, [r5, #20]
    b32a:	eba0 0803 	sub.w	r8, r0, r3
    ccp->os_epoch = dpl_cputime_get32();
    b32e:	f003 f86c 	bl	e40a <dpl_cputime_get32>
    b332:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    b336:	6a73      	ldr	r3, [r6, #36]	; 0x24
    b338:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    b33a:	4630      	mov	r0, r6
    b33c:	4798      	blx	r3
    uint32_t delta_1 = 0xffffffffU&(uwb_read_systime_lo32(inst) - frame->transmission_timestamp.lo);
    b33e:	696b      	ldr	r3, [r5, #20]
    b340:	1ac0      	subs	r0, r0, r3
    uint32_t delta = (delta_0>>1) + (delta_1>>1);
    b342:	0840      	lsrs	r0, r0, #1
    b344:	eb00 0058 	add.w	r0, r0, r8, lsr #1
    ccp->os_epoch -= dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(delta>>16));
    b348:	0c00      	lsrs	r0, r0, #16
    b34a:	f015 ffb7 	bl	212bc <__aeabi_ui2d>
    b34e:	a34e      	add	r3, pc, #312	; (adr r3, b488 <tx_complete_cb+0x1a8>)
    b350:	e9d3 2300 	ldrd	r2, r3, [r3]
    b354:	f016 f82c 	bl	213b0 <__aeabi_dmul>
    b358:	4680      	mov	r8, r0
    b35a:	4689      	mov	r9, r1
    b35c:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
    b360:	f015 ffac 	bl	212bc <__aeabi_ui2d>
    b364:	4642      	mov	r2, r8
    b366:	464b      	mov	r3, r9
    b368:	f015 fe6a 	bl	21040 <__aeabi_dsub>
    b36c:	f016 faf8 	bl	21960 <__aeabi_d2uiz>
    b370:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    CCP_STATS_SET(irq_latency, uwb_dwt_usecs_to_usecs(delta>>16));
    b374:	2300      	movs	r3, #0
    b376:	6523      	str	r3, [r4, #80]	; 0x50
    b378:	2200      	movs	r2, #0
    b37a:	2300      	movs	r3, #0
    b37c:	4640      	mov	r0, r8
    b37e:	4649      	mov	r1, r9
    b380:	f015 fe60 	bl	21044 <__adddf3>
    b384:	f016 faec 	bl	21960 <__aeabi_d2uiz>
    b388:	6520      	str	r0, [r4, #80]	; 0x50
    ccp->local_epoch = frame->transmission_timestamp.lo;
    b38a:	696a      	ldr	r2, [r5, #20]
    b38c:	7e2b      	ldrb	r3, [r5, #24]
    b38e:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
    b392:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    ccp->master_epoch = frame->transmission_timestamp;
    b396:	696a      	ldr	r2, [r5, #20]
    b398:	69ab      	ldr	r3, [r5, #24]
    b39a:	f8c4 20d0 	str.w	r2, [r4, #208]	; 0xd0
    b39e:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
    ccp->period = (frame->transmission_interval >> 16);
    b3a2:	68eb      	ldr	r3, [r5, #12]
    b3a4:	7c2a      	ldrb	r2, [r5, #16]
    b3a6:	0c1b      	lsrs	r3, r3, #16
    b3a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    b3ac:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    adjust_for_epoch_to_rm(ccp, frame->epoch_to_rm_us);
    b3b0:	8be9      	ldrh	r1, [r5, #30]
    b3b2:	4620      	mov	r0, r4
    b3b4:	f7ff fee8 	bl	b188 <adjust_for_epoch_to_rm>
    if (ccp->status.timer_enabled){
    b3b8:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    b3bc:	f013 0f04 	tst.w	r3, #4
    b3c0:	d11c      	bne.n	b3fc <tx_complete_cb+0x11c>
    ccp->status.valid |= ccp->idx > 1;
    b3c2:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    b3c6:	f3c3 0280 	ubfx	r2, r3, #2, #1
    b3ca:	f8b4 10ee 	ldrh.w	r1, [r4, #238]	; 0xee
    b3ce:	2901      	cmp	r1, #1
    b3d0:	bf88      	it	hi
    b3d2:	f042 0201 	orrhi.w	r2, r2, #1
    b3d6:	f362 0382 	bfi	r3, r2, #2, #1
    b3da:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
    if(!(SLIST_EMPTY(&inst->interface_cbs))) {
    b3de:	f8d6 5530 	ldr.w	r5, [r6, #1328]	; 0x530
    b3e2:	bb95      	cbnz	r5, b44a <tx_complete_cb+0x16a>
    if (ccp->config.postprocess && ccp->status.valid)
    b3e4:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
    b3e8:	4b29      	ldr	r3, [pc, #164]	; (b490 <tx_complete_cb+0x1b0>)
    b3ea:	4393      	bics	r3, r2
    b3ec:	d036      	beq.n	b45c <tx_complete_cb+0x17c>
    b3ee:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
    if(dpl_sem_get_count(&ccp->sem) == 0){
    b3f2:	2b00      	cmp	r3, #0
    b3f4:	d039      	beq.n	b46a <tx_complete_cb+0x18a>
}
    b3f6:	2000      	movs	r0, #0
    b3f8:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
        rc = dpl_cputime_timer_start(&ccp->timer, ccp->os_epoch
    b3fc:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
            - dpl_cputime_usecs_to_ticks(MYNEWT_VAL(OS_LATENCY))
    b400:	f5a5 7548 	sub.w	r5, r5, #800	; 0x320
            + dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(ccp->period))
    b404:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
    b408:	f015 ff58 	bl	212bc <__aeabi_ui2d>
    b40c:	a31e      	add	r3, pc, #120	; (adr r3, b488 <tx_complete_cb+0x1a8>)
    b40e:	e9d3 2300 	ldrd	r2, r3, [r3]
    b412:	f015 ffcd 	bl	213b0 <__aeabi_dmul>
    b416:	4680      	mov	r8, r0
    b418:	4689      	mov	r9, r1
    b41a:	4628      	mov	r0, r5
    b41c:	f015 ff4e 	bl	212bc <__aeabi_ui2d>
    b420:	4642      	mov	r2, r8
    b422:	464b      	mov	r3, r9
    b424:	f015 fe0e 	bl	21044 <__adddf3>
        rc = dpl_cputime_timer_start(&ccp->timer, ccp->os_epoch
    b428:	f016 fa9a 	bl	21960 <__aeabi_d2uiz>
    b42c:	4601      	mov	r1, r0
    b42e:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
    b432:	f002 ffe2 	bl	e3fa <dpl_cputime_timer_start>
        if (rc == 0) ccp->status.timer_restarted = 1;
    b436:	2800      	cmp	r0, #0
    b438:	d1c3      	bne.n	b3c2 <tx_complete_cb+0xe2>
    b43a:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    b43e:	f043 0308 	orr.w	r3, r3, #8
    b442:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
    b446:	e7bc      	b.n	b3c2 <tx_complete_cb+0xe2>
        SLIST_FOREACH(lcbs, &inst->interface_cbs, next) {
    b448:	6bad      	ldr	r5, [r5, #56]	; 0x38
    b44a:	2d00      	cmp	r5, #0
    b44c:	d0ca      	beq.n	b3e4 <tx_complete_cb+0x104>
            if (lcbs != NULL && lcbs->superframe_cb) {
    b44e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    b450:	2b00      	cmp	r3, #0
    b452:	d0f9      	beq.n	b448 <tx_complete_cb+0x168>
                if(lcbs->superframe_cb((struct uwb_dev*)inst, lcbs)) continue;
    b454:	4629      	mov	r1, r5
    b456:	4630      	mov	r0, r6
    b458:	4798      	blx	r3
    b45a:	e7f5      	b.n	b448 <tx_complete_cb+0x168>
    return (struct dpl_eventq *) os_eventq_dflt_get();
    b45c:	f7fe f964 	bl	9728 <os_eventq_dflt_get>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    b460:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
    b464:	f7fe f8b2 	bl	95cc <os_eventq_put>
}
    b468:	e7c1      	b.n	b3ee <tx_complete_cb+0x10e>
    return (dpl_error_t)os_sem_release(&sem->sem);
    b46a:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    b46e:	f7fe fc99 	bl	9da4 <os_sem_release>
        assert(err == DPL_OK);
    b472:	2800      	cmp	r0, #0
    b474:	d0bf      	beq.n	b3f6 <tx_complete_cb+0x116>
    b476:	2300      	movs	r3, #0
    b478:	461a      	mov	r2, r3
    b47a:	4619      	mov	r1, r3
    b47c:	4618      	mov	r0, r3
    b47e:	f7fd fd71 	bl	8f64 <__assert_func>
    b482:	bf00      	nop
    b484:	f3af 8000 	nop.w
    b488:	90690691 	.word	0x90690691
    b48c:	3ff06906 	.word	0x3ff06906
    b490:	00010004 	.word	0x00010004

0000b494 <ccp_task>:
{
    b494:	b510      	push	{r4, lr}
    b496:	4604      	mov	r4, r0
    os_eventq_run((struct os_eventq * )evq);
    b498:	f504 7086 	add.w	r0, r4, #268	; 0x10c
    b49c:	f7fe f916 	bl	96cc <os_eventq_run>
    b4a0:	e7fa      	b.n	b498 <ccp_task+0x4>
	...

0000b4a4 <ccp_tasks_init>:
{
    b4a4:	b530      	push	{r4, r5, lr}
    b4a6:	b085      	sub	sp, #20
    b4a8:	4604      	mov	r4, r0
    if (!dpl_eventq_inited(&inst->eventq))
    b4aa:	f500 7586 	add.w	r5, r0, #268	; 0x10c
    return os_eventq_inited((struct os_eventq *) evq);
    b4ae:	4628      	mov	r0, r5
    b4b0:	f7fe f887 	bl	95c2 <os_eventq_inited>
    b4b4:	b108      	cbz	r0, b4ba <ccp_tasks_init+0x16>
}
    b4b6:	b005      	add	sp, #20
    b4b8:	bd30      	pop	{r4, r5, pc}
    os_eventq_init((struct os_eventq *) evq);
    b4ba:	4628      	mov	r0, r5
    b4bc:	f7fe f878 	bl	95b0 <os_eventq_init>
        dpl_task_init(&inst->task_str, "ccp",
    b4c0:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
                      inst->task_stack,
    b4c4:	f504 72c0 	add.w	r2, r4, #384	; 0x180
    return os_task_init((struct os_task *) t, name, (os_task_func_t) func,
    b4c8:	2180      	movs	r1, #128	; 0x80
    b4ca:	9103      	str	r1, [sp, #12]
    b4cc:	9202      	str	r2, [sp, #8]
    b4ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b4d2:	9201      	str	r2, [sp, #4]
    b4d4:	9300      	str	r3, [sp, #0]
    b4d6:	4623      	mov	r3, r4
    b4d8:	4a03      	ldr	r2, [pc, #12]	; (b4e8 <ccp_tasks_init+0x44>)
    b4da:	4904      	ldr	r1, [pc, #16]	; (b4ec <ccp_tasks_init+0x48>)
    b4dc:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    b4e0:	f7fe fcf8 	bl	9ed4 <os_task_init>
}
    b4e4:	e7e7      	b.n	b4b6 <ccp_tasks_init+0x12>
    b4e6:	bf00      	nop
    b4e8:	0000b495 	.word	0x0000b495
    b4ec:	00023068 	.word	0x00023068

0000b4f0 <ccp_timer_init>:
{
    b4f0:	b570      	push	{r4, r5, r6, lr}
    b4f2:	4604      	mov	r4, r0
    b4f4:	460d      	mov	r5, r1
    ccp->status.timer_enabled = true;
    b4f6:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
    b4fa:	f043 0304 	orr.w	r3, r3, #4
    b4fe:	f880 30c9 	strb.w	r3, [r0, #201]	; 0xc9
    dpl_cputime_timer_init(&ccp->timer, ccp_timer_irq, (void *) ccp);
    b502:	f100 06f4 	add.w	r6, r0, #244	; 0xf4
    b506:	4602      	mov	r2, r0
    b508:	4915      	ldr	r1, [pc, #84]	; (b560 <ccp_timer_init+0x70>)
    b50a:	4630      	mov	r0, r6
    b50c:	f002 ff5e 	bl	e3cc <dpl_cputime_timer_init>
    return ev->ev.ev_arg;
    b510:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    if (dpl_event_get_arg(&ccp->timer_event) != (void *) ccp) {
    b514:	429c      	cmp	r4, r3
    b516:	d00e      	beq.n	b536 <ccp_timer_init+0x46>
        if (role == CCP_ROLE_MASTER){
    b518:	b995      	cbnz	r5, b540 <ccp_timer_init+0x50>
    memset(ev, 0, sizeof(*ev));
    b51a:	2300      	movs	r3, #0
    b51c:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    b520:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    b524:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    b528:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    ev->ev.ev_cb = (os_event_fn *)fn;
    b52c:	4b0d      	ldr	r3, [pc, #52]	; (b564 <ccp_timer_init+0x74>)
    b52e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    ev->ev.ev_arg = arg;
    b532:	f8c4 4124 	str.w	r4, [r4, #292]	; 0x124
    dpl_cputime_timer_relative(&ccp->timer, 0);
    b536:	2100      	movs	r1, #0
    b538:	4630      	mov	r0, r6
    b53a:	f002 ff7a 	bl	e432 <dpl_cputime_timer_relative>
}
    b53e:	bd70      	pop	{r4, r5, r6, pc}
    memset(ev, 0, sizeof(*ev));
    b540:	2300      	movs	r3, #0
    b542:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    b546:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    b54a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    b54e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    ev->ev.ev_cb = (os_event_fn *)fn;
    b552:	4b05      	ldr	r3, [pc, #20]	; (b568 <ccp_timer_init+0x78>)
    b554:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    ev->ev.ev_arg = arg;
    b558:	f8c4 4124 	str.w	r4, [r4, #292]	; 0x124
}
    b55c:	e7eb      	b.n	b536 <ccp_timer_init+0x46>
    b55e:	bf00      	nop
    b560:	0000b2bd 	.word	0x0000b2bd
    b564:	0000bae1 	.word	0x0000bae1
    b568:	0000b6a9 	.word	0x0000b6a9
    b56c:	00000000 	.word	0x00000000

0000b570 <ccp_listen>:
 *
 * returns struct uwb_ccp_status_t
 */
static struct uwb_ccp_status
ccp_listen(struct uwb_ccp_instance *ccp, uint64_t dx_time, uwb_dev_modes_t mode)
{
    b570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b574:	4604      	mov	r4, r0
    b576:	4616      	mov	r6, r2
    b578:	4698      	mov	r8, r3
    b57a:	f89d 9020 	ldrb.w	r9, [sp, #32]
    struct uwb_dev * inst = ccp->dev_inst;
    b57e:	4607      	mov	r7, r0
    b580:	f857 5bb0 	ldr.w	r5, [r7], #176
 * @return void
 */
UWB_API_IMPL_PREFIX void
uwb_phy_forcetrxoff(struct uwb_dev* dev)
{
    return (dev->uw_funcs->uf_phy_forcetrxoff(dev));
    b584:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    b58a:	4628      	mov	r0, r5
    b58c:	4798      	blx	r3
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    b58e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b592:	4638      	mov	r0, r7
    b594:	f7fe fc38 	bl	9e08 <os_sem_pend>
    DIAGMSG("{\"utime\": %"PRIu32",\"msg\": \"uwb_ccp_listen\"}\n",
            dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
    uwb_phy_forcetrxoff(inst);
    dpl_error_t err = dpl_sem_pend(&ccp->sem,  DPL_TIMEOUT_NEVER);
    assert(err == DPL_OK);
    b598:	2800      	cmp	r0, #0
    b59a:	d14f      	bne.n	b63c <ccp_listen+0xcc>

    CCP_STATS_INC(listen);
    b59c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    b59e:	3301      	adds	r3, #1
    b5a0:	6263      	str	r3, [r4, #36]	; 0x24

    if (dx_time) {
    b5a2:	ea56 0308 	orrs.w	r3, r6, r8
    b5a6:	d005      	beq.n	b5b4 <ccp_listen+0x44>
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
    b5a8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b5aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
    b5ac:	4632      	mov	r2, r6
    b5ae:	4643      	mov	r3, r8
    b5b0:	4628      	mov	r0, r5
    b5b2:	4788      	blx	r1
        uwb_set_delay_start(inst, dx_time);
    }

    ccp->status.rx_timeout_error = 0;
    b5b4:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    b5b8:	f36f 0341 	bfc	r3, #1, #1
    b5bc:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
    return (dev->uw_funcs->uf_start_rx(dev));
    b5c0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b5c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    b5c4:	4628      	mov	r0, r5
    b5c6:	4798      	blx	r3
    ccp->status.start_rx_error = uwb_start_rx(inst).start_rx_error;
    b5c8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    b5cc:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    b5d0:	f360 13c7 	bfi	r3, r0, #7, #1
    b5d4:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
    if (ccp->status.start_rx_error) {
    b5d8:	b25b      	sxtb	r3, r3
    b5da:	2b00      	cmp	r3, #0
    b5dc:	db34      	blt.n	b648 <ccp_listen+0xd8>
#endif
        /*  */
        CCP_STATS_INC(rx_start_error);
        err = dpl_sem_release(&ccp->sem);
        assert(err == DPL_OK);
    }else if(mode == UWB_BLOCKING){
    b5de:	f1b9 0f00 	cmp.w	r9, #0
    b5e2:	d14e      	bne.n	b682 <ccp_listen+0x112>
#if MYNEWT_VAL(UWB_CCP_STATS)
        if (dx_time) {
    b5e4:	ea56 0308 	orrs.w	r3, r6, r8
    b5e8:	d015      	beq.n	b616 <ccp_listen+0xa6>
    return (dev->uw_funcs->uf_read_systime_lo32(dev));
    b5ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b5ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    b5ee:	4628      	mov	r0, r5
    b5f0:	4798      	blx	r3
            uint32_t margin = 0xffffffffU&(dx_time - uwb_read_systime_lo32(inst));
    b5f2:	1a30      	subs	r0, r6, r0
            CCP_STATS_SET(os_lat_margin, uwb_dwt_usecs_to_usecs(margin>>16));
    b5f4:	2300      	movs	r3, #0
    b5f6:	65a3      	str	r3, [r4, #88]	; 0x58
    b5f8:	0c00      	lsrs	r0, r0, #16
    b5fa:	f015 fe5f 	bl	212bc <__aeabi_ui2d>
    b5fe:	a328      	add	r3, pc, #160	; (adr r3, b6a0 <ccp_listen+0x130>)
    b600:	e9d3 2300 	ldrd	r2, r3, [r3]
    b604:	f015 fed4 	bl	213b0 <__aeabi_dmul>
    b608:	2200      	movs	r2, #0
    b60a:	2300      	movs	r3, #0
    b60c:	f015 fd1a 	bl	21044 <__adddf3>
    b610:	f016 f9a6 	bl	21960 <__aeabi_d2uiz>
    b614:	65a0      	str	r0, [r4, #88]	; 0x58
    b616:	2121      	movs	r1, #33	; 0x21
    b618:	4638      	mov	r0, r7
    b61a:	f7fe fbf5 	bl	9e08 <os_sem_pend>
        }
#endif
        /* Wait for completion of transactions */
        err = dpl_sem_pend(&ccp->sem, dpl_time_ms_to_ticks32(4*MYNEWT_VAL(UWB_CCP_LONG_RX_TO)/1000));
        if (err==DPL_TIMEOUT) {
    b61e:	2806      	cmp	r0, #6
    b620:	d039      	beq.n	b696 <ccp_listen+0x126>
    b622:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
            CCP_STATS_INC(sem_timeout);
        }
        if(dpl_sem_get_count(&ccp->sem) == 0){
    b626:	bb63      	cbnz	r3, b682 <ccp_listen+0x112>
    return (dpl_error_t)os_sem_release(&sem->sem);
    b628:	4638      	mov	r0, r7
    b62a:	f7fe fbbb 	bl	9da4 <os_sem_release>
            err = dpl_sem_release(&ccp->sem);
            assert(err == DPL_OK);
    b62e:	b340      	cbz	r0, b682 <ccp_listen+0x112>
    b630:	2300      	movs	r3, #0
    b632:	461a      	mov	r2, r3
    b634:	4619      	mov	r1, r3
    b636:	4618      	mov	r0, r3
    b638:	f7fd fc94 	bl	8f64 <__assert_func>
    assert(err == DPL_OK);
    b63c:	2300      	movs	r3, #0
    b63e:	461a      	mov	r2, r3
    b640:	4619      	mov	r1, r3
    b642:	4618      	mov	r0, r3
    b644:	f7fd fc8e 	bl	8f64 <__assert_func>
    b648:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b64a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    b64c:	4628      	mov	r0, r5
    b64e:	4798      	blx	r3
        uint32_t behind = 0xffffffffU&(uwb_read_systime_lo32(inst) - dx_time);
    b650:	1b80      	subs	r0, r0, r6
        CCP_STATS_SET(os_lat_behind, uwb_dwt_usecs_to_usecs(behind>>16));
    b652:	2300      	movs	r3, #0
    b654:	6563      	str	r3, [r4, #84]	; 0x54
    b656:	0c00      	lsrs	r0, r0, #16
    b658:	f015 fe30 	bl	212bc <__aeabi_ui2d>
    b65c:	a310      	add	r3, pc, #64	; (adr r3, b6a0 <ccp_listen+0x130>)
    b65e:	e9d3 2300 	ldrd	r2, r3, [r3]
    b662:	f015 fea5 	bl	213b0 <__aeabi_dmul>
    b666:	2200      	movs	r2, #0
    b668:	2300      	movs	r3, #0
    b66a:	f015 fceb 	bl	21044 <__adddf3>
    b66e:	f016 f977 	bl	21960 <__aeabi_d2uiz>
    b672:	6560      	str	r0, [r4, #84]	; 0x54
        CCP_STATS_INC(rx_start_error);
    b674:	6b63      	ldr	r3, [r4, #52]	; 0x34
    b676:	3301      	adds	r3, #1
    b678:	6363      	str	r3, [r4, #52]	; 0x34
    b67a:	4638      	mov	r0, r7
    b67c:	f7fe fb92 	bl	9da4 <os_sem_release>
        assert(err == DPL_OK);
    b680:	b918      	cbnz	r0, b68a <ccp_listen+0x11a>
        }
    }
    return ccp->status;
}
    b682:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
    b686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        assert(err == DPL_OK);
    b68a:	2300      	movs	r3, #0
    b68c:	461a      	mov	r2, r3
    b68e:	4619      	mov	r1, r3
    b690:	4618      	mov	r0, r3
    b692:	f7fd fc67 	bl	8f64 <__assert_func>
            CCP_STATS_INC(sem_timeout);
    b696:	6e23      	ldr	r3, [r4, #96]	; 0x60
    b698:	3301      	adds	r3, #1
    b69a:	6623      	str	r3, [r4, #96]	; 0x60
    b69c:	e7c1      	b.n	b622 <ccp_listen+0xb2>
    b69e:	bf00      	nop
    b6a0:	90690691 	.word	0x90690691
    b6a4:	3ff06906 	.word	0x3ff06906

0000b6a8 <ccp_slave_timer_ev_cb>:
{
    b6a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b6ac:	b082      	sub	sp, #8
    assert(ev != NULL);
    b6ae:	2800      	cmp	r0, #0
    b6b0:	d06f      	beq.n	b792 <ccp_slave_timer_ev_cb+0xea>
    return ev->ev.ev_arg;
    b6b2:	6884      	ldr	r4, [r0, #8]
    assert(dpl_event_get_arg(ev));
    b6b4:	2c00      	cmp	r4, #0
    b6b6:	d072      	beq.n	b79e <ccp_slave_timer_ev_cb+0xf6>
    struct uwb_dev * inst = ccp->dev_inst;
    b6b8:	6825      	ldr	r5, [r4, #0]
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
    b6ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b6bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    b6be:	2120      	movs	r1, #32
    b6c0:	4628      	mov	r0, r5
    b6c2:	4798      	blx	r3
    ccp->blink_frame_duration = uwb_phy_frame_duration(inst, sizeof(uwb_ccp_blink_frame_t));
    b6c4:	f8a4 017e 	strh.w	r0, [r4, #382]	; 0x17e
    if (!ccp->status.enabled) {
    b6c8:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    b6cc:	f013 0f10 	tst.w	r3, #16
    b6d0:	d05c      	beq.n	b78c <ccp_slave_timer_ev_cb+0xe4>
    if (ccp->status.rx_timeout_error) {
    b6d2:	f013 0f02 	tst.w	r3, #2
    b6d6:	d168      	bne.n	b7aa <ccp_slave_timer_ev_cb+0x102>
    CCP_STATS_INC(slave_cnt);
    b6d8:	69e3      	ldr	r3, [r4, #28]
    b6da:	3301      	adds	r3, #1
    b6dc:	61e3      	str	r3, [r4, #28]
    dx_time = ccp->local_epoch;
    b6de:	f8d4 70d8 	ldr.w	r7, [r4, #216]	; 0xd8
    b6e2:	f8d4 60dc 	ldr.w	r6, [r4, #220]	; 0xdc
    if (ccp->wcs) {
    b6e6:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
    b6ea:	f1b8 0f00 	cmp.w	r8, #0
    b6ee:	d00e      	beq.n	b70e <ccp_slave_timer_ev_cb+0x66>
        dx_time += DPL_FLOAT64_F64_TO_U64(DPL_FLOAT64_MUL(DPL_FLOAT64_U64_TO_F64((uint64_t)ccp->period << 16),
    b6f0:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
    b6f4:	0408      	lsls	r0, r1, #16
    b6f6:	0c09      	lsrs	r1, r1, #16
    b6f8:	f015 fe24 	bl	21344 <__aeabi_ul2d>
    b6fc:	e9d8 2310 	ldrd	r2, r3, [r8, #64]	; 0x40
    b700:	f015 fe56 	bl	213b0 <__aeabi_dmul>
    b704:	f016 fa3c 	bl	21b80 <__aeabi_d2ulz>
    b708:	19c7      	adds	r7, r0, r7
    b70a:	eb46 0601 	adc.w	r6, r6, r1
    return (dev->uw_funcs->uf_phy_SHR_duration(dev));
    b70e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b710:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    b714:	4628      	mov	r0, r5
    b716:	4798      	blx	r3
    dx_time -= ((uint64_t)ceilf(uwb_usecs_to_dwt_usecs(uwb_phy_SHR_duration(inst) +
    b718:	f895 351b 	ldrb.w	r3, [r5, #1307]	; 0x51b
    b71c:	4418      	add	r0, r3
    b71e:	f015 fddd 	bl	212dc <__aeabi_i2d>
    b722:	a34d      	add	r3, pc, #308	; (adr r3, b858 <ccp_slave_timer_ev_cb+0x1b0>)
    b724:	e9d3 2300 	ldrd	r2, r3, [r3]
    b728:	f015 ff6c 	bl	21604 <__aeabi_ddiv>
    b72c:	f016 f938 	bl	219a0 <__aeabi_d2f>
    b730:	ee00 0a10 	vmov	s0, r0
    b734:	f016 fbb6 	bl	21ea4 <ceilf>
    b738:	ee10 0a10 	vmov	r0, s0
    b73c:	f016 fa00 	bl	21b40 <__aeabi_f2ulz>
                                                       inst->config.rx.timeToRxStable)) << 16);
    b740:	0409      	lsls	r1, r1, #16
    b742:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
    b746:	0400      	lsls	r0, r0, #16
    dx_time -= ((uint64_t)ceilf(uwb_usecs_to_dwt_usecs(uwb_phy_SHR_duration(inst) +
    b748:	1a3f      	subs	r7, r7, r0
    b74a:	eb66 0601 	sbc.w	r6, r6, r1
    timeout = ccp->blink_frame_duration + MYNEWT_VAL(XTALT_GUARD);
    b74e:	f8b4 117e 	ldrh.w	r1, [r4, #382]	; 0x17e
    b752:	f501 7380 	add.w	r3, r1, #256	; 0x100
    timeout += (ccp->config.tx_holdoff_dly + ccp->blink_frame_duration) * MYNEWT_VAL(UWB_CCP_MAX_CASCADE_RPTS);
    b756:	f8b4 20cc 	ldrh.w	r2, [r4, #204]	; 0xcc
    b75a:	4411      	add	r1, r2
    b75c:	0089      	lsls	r1, r1, #2
    b75e:	fa11 f183 	uxtah	r1, r1, r3
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
    b762:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b766:	b289      	uxth	r1, r1
    b768:	4628      	mov	r0, r5
    b76a:	4798      	blx	r3
    ccp_listen(ccp, dx_time, UWB_BLOCKING);
    b76c:	2300      	movs	r3, #0
    b76e:	9300      	str	r3, [sp, #0]
    b770:	463a      	mov	r2, r7
    b772:	4633      	mov	r3, r6
    b774:	4620      	mov	r0, r4
    b776:	f7ff fefb 	bl	b570 <ccp_listen>
    if(ccp->status.start_rx_error){
    b77a:	f994 30c8 	ldrsb.w	r3, [r4, #200]	; 0xc8
    b77e:	2b00      	cmp	r3, #0
    b780:	db21      	blt.n	b7c6 <ccp_slave_timer_ev_cb+0x11e>
    if (!ccp->status.enabled) {
    b782:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    b786:	f013 0f10 	tst.w	r3, #16
    b78a:	d12a      	bne.n	b7e2 <ccp_slave_timer_ev_cb+0x13a>
}
    b78c:	b002      	add	sp, #8
    b78e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert(ev != NULL);
    b792:	2300      	movs	r3, #0
    b794:	461a      	mov	r2, r3
    b796:	4619      	mov	r1, r3
    b798:	4618      	mov	r0, r3
    b79a:	f7fd fbe3 	bl	8f64 <__assert_func>
    assert(dpl_event_get_arg(ev));
    b79e:	2300      	movs	r3, #0
    b7a0:	461a      	mov	r2, r3
    b7a2:	4619      	mov	r1, r3
    b7a4:	4618      	mov	r0, r3
    b7a6:	f7fd fbdd 	bl	8f64 <__assert_func>
    b7aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b7ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b7ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b7b2:	4628      	mov	r0, r5
    b7b4:	4798      	blx	r3
        ccp_listen(ccp, 0, UWB_BLOCKING);
    b7b6:	2300      	movs	r3, #0
    b7b8:	9300      	str	r3, [sp, #0]
    b7ba:	2200      	movs	r2, #0
    b7bc:	2300      	movs	r3, #0
    b7be:	4620      	mov	r0, r4
    b7c0:	f7ff fed6 	bl	b570 <ccp_listen>
        goto reset_timer;
    b7c4:	e7dd      	b.n	b782 <ccp_slave_timer_ev_cb+0xda>
    b7c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b7c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b7ca:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b7ce:	4628      	mov	r0, r5
    b7d0:	4798      	blx	r3
        ccp_listen(ccp, 0, UWB_BLOCKING);
    b7d2:	2300      	movs	r3, #0
    b7d4:	9300      	str	r3, [sp, #0]
    b7d6:	2200      	movs	r2, #0
    b7d8:	2300      	movs	r3, #0
    b7da:	4620      	mov	r0, r4
    b7dc:	f7ff fec8 	bl	b570 <ccp_listen>
    b7e0:	e7cf      	b.n	b782 <ccp_slave_timer_ev_cb+0xda>
    dpl_cputime_timer_stop(&ccp->timer);
    b7e2:	f104 07f4 	add.w	r7, r4, #244	; 0xf4
    b7e6:	4638      	mov	r0, r7
    b7e8:	f002 fe0b 	bl	e402 <dpl_cputime_timer_stop>
    if (ccp->status.rx_timeout_error &&
    b7ec:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    b7f0:	f013 0f02 	tst.w	r3, #2
    b7f4:	d002      	beq.n	b7fc <ccp_slave_timer_ev_cb+0x154>
        ccp->missed_frames > MYNEWT_VAL(UWB_CCP_TOLERATE_MISSED_FRAMES)) {
    b7f6:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
    if (ccp->status.rx_timeout_error &&
    b7fa:	bb3b      	cbnz	r3, b84c <ccp_slave_timer_ev_cb+0x1a4>
        ccp->status.rx_timeout_error = 0;
    b7fc:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    b800:	f36f 0341 	bfc	r3, #1, #1
    b804:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
        timer_expiry = ccp->os_epoch + dpl_cputime_usecs_to_ticks(
    b808:	f8d4 60e0 	ldr.w	r6, [r4, #224]	; 0xe0
    b80c:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
    b810:	f015 fd54 	bl	212bc <__aeabi_ui2d>
    b814:	a310      	add	r3, pc, #64	; (adr r3, b858 <ccp_slave_timer_ev_cb+0x1b0>)
    b816:	e9d3 2300 	ldrd	r2, r3, [r3]
    b81a:	f015 fdc9 	bl	213b0 <__aeabi_dmul>
    b81e:	f016 f89f 	bl	21960 <__aeabi_d2uiz>
    b822:	f8b4 117e 	ldrh.w	r1, [r4, #382]	; 0x17e
    b826:	1a41      	subs	r1, r0, r1
    b828:	f895 051b 	ldrb.w	r0, [r5, #1307]	; 0x51b
    b82c:	1a09      	subs	r1, r1, r0
    b82e:	4431      	add	r1, r6
        rc = dpl_cputime_timer_start(&ccp->timer, timer_expiry);
    b830:	f5a1 7148 	sub.w	r1, r1, #800	; 0x320
    b834:	4638      	mov	r0, r7
    b836:	f002 fde0 	bl	e3fa <dpl_cputime_timer_start>
    if (rc == 0) ccp->status.timer_restarted = 1;
    b83a:	2800      	cmp	r0, #0
    b83c:	d1a6      	bne.n	b78c <ccp_slave_timer_ev_cb+0xe4>
    b83e:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    b842:	f043 0308 	orr.w	r3, r3, #8
    b846:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
    b84a:	e79f      	b.n	b78c <ccp_slave_timer_ev_cb+0xe4>
        rc = dpl_cputime_timer_relative(&ccp->timer, 0);
    b84c:	2100      	movs	r1, #0
    b84e:	4638      	mov	r0, r7
    b850:	f002 fdef 	bl	e432 <dpl_cputime_timer_relative>
    b854:	e7f1      	b.n	b83a <ccp_slave_timer_ev_cb+0x192>
    b856:	bf00      	nop
    b858:	90690691 	.word	0x90690691
    b85c:	3ff06906 	.word	0x3ff06906

0000b860 <ccp_send>:
{
    b860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b864:	b083      	sub	sp, #12
    b866:	9101      	str	r1, [sp, #4]
    assert(ccp);
    b868:	2800      	cmp	r0, #0
    b86a:	f000 80f2 	beq.w	ba52 <ccp_send+0x1f2>
    b86e:	4604      	mov	r4, r0
    struct uwb_dev * inst = ccp->dev_inst;
    b870:	6805      	ldr	r5, [r0, #0]
    CCP_STATS_INC(send);
    b872:	6a03      	ldr	r3, [r0, #32]
    b874:	3301      	adds	r3, #1
    b876:	6203      	str	r3, [r0, #32]
    return (dev->uw_funcs->uf_phy_forcetrxoff(dev));
    b878:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b87a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    b87e:	4628      	mov	r0, r5
    b880:	4798      	blx	r3
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    b882:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
    b886:	9300      	str	r3, [sp, #0]
    b888:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b88c:	4618      	mov	r0, r3
    b88e:	f7fe fabb 	bl	9e08 <os_sem_pend>
    assert(err == DPL_OK);
    b892:	2800      	cmp	r0, #0
    b894:	f040 80e3 	bne.w	ba5e <ccp_send+0x1fe>
    uwb_ccp_frame_t * previous_frame = ccp->frames[(uint16_t)(ccp->idx)%ccp->nframes];
    b898:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
    b89c:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	; 0xec
    b8a0:	fbb3 f2f1 	udiv	r2, r3, r1
    b8a4:	fb01 3212 	mls	r2, r1, r2, r3
    b8a8:	b292      	uxth	r2, r2
    b8aa:	32e0      	adds	r2, #224	; 0xe0
    b8ac:	f854 a022 	ldr.w	sl, [r4, r2, lsl #2]
    uwb_ccp_frame_t * frame = ccp->frames[(ccp->idx+1)%ccp->nframes];
    b8b0:	3301      	adds	r3, #1
    b8b2:	fb93 f2f1 	sdiv	r2, r3, r1
    b8b6:	fb01 3312 	mls	r3, r1, r2, r3
    b8ba:	33e0      	adds	r3, #224	; 0xe0
    b8bc:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
    frame->rpt_count = 0;
    b8c0:	f04f 0900 	mov.w	r9, #0
    b8c4:	f886 901c 	strb.w	r9, [r6, #28]
    frame->rpt_max = MYNEWT_VAL(UWB_CCP_MAX_CASCADE_RPTS);
    b8c8:	2304      	movs	r3, #4
    b8ca:	7773      	strb	r3, [r6, #29]
    return (dev->uw_funcs->uf_phy_SHR_duration(dev));
    b8cc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b8ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    b8d2:	4628      	mov	r0, r5
    b8d4:	4798      	blx	r3
    frame->epoch_to_rm_us = uwb_phy_SHR_duration(inst);
    b8d6:	83f0      	strh	r0, [r6, #30]
    uint64_t timestamp = previous_frame->transmission_timestamp.timestamp
    b8d8:	f8da 8014 	ldr.w	r8, [sl, #20]
    b8dc:	f8da 7018 	ldr.w	r7, [sl, #24]
                        + ((uint64_t)ccp->period << 16);
    b8e0:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    b8e4:	041a      	lsls	r2, r3, #16
    uint64_t timestamp = previous_frame->transmission_timestamp.timestamp
    b8e6:	eb18 0802 	adds.w	r8, r8, r2
    b8ea:	eb47 4713 	adc.w	r7, r7, r3, lsr #16
    timestamp = timestamp & 0xFFFFFFFFFFFFFE00ULL; /* Mask off the last 9 bits */
    b8ee:	f428 78ff 	bic.w	r8, r8, #510	; 0x1fe
    b8f2:	f028 0801 	bic.w	r8, r8, #1
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
    b8f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b8f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
    b8fa:	4642      	mov	r2, r8
    b8fc:	463b      	mov	r3, r7
    b8fe:	4628      	mov	r0, r5
    b900:	4788      	blx	r1
    timestamp += inst->tx_antenna_delay;
    b902:	f8b5 34ce 	ldrh.w	r3, [r5, #1230]	; 0x4ce
    b906:	eb13 0808 	adds.w	r8, r3, r8
    b90a:	f147 0700 	adc.w	r7, r7, #0
    frame->transmission_timestamp.timestamp = timestamp;
    b90e:	f8c6 8014 	str.w	r8, [r6, #20]
    b912:	61b7      	str	r7, [r6, #24]
    frame->seq_num = ++ccp->seq_num;
    b914:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
    b918:	3301      	adds	r3, #1
    b91a:	b2db      	uxtb	r3, r3
    b91c:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
    b920:	7073      	strb	r3, [r6, #1]
    frame->euid = inst->euid;
    b922:	f8d5 24b8 	ldr.w	r2, [r5, #1208]	; 0x4b8
    b926:	f8d5 34bc 	ldr.w	r3, [r5, #1212]	; 0x4bc
    b92a:	f8c6 2002 	str.w	r2, [r6, #2]
    b92e:	f8c6 3006 	str.w	r3, [r6, #6]
    frame->short_address = inst->my_short_address;
    b932:	f8b5 34b6 	ldrh.w	r3, [r5, #1206]	; 0x4b6
    b936:	8173      	strh	r3, [r6, #10]
    frame->transmission_interval = ((uint64_t)ccp->period << 16);
    b938:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    b93c:	041a      	lsls	r2, r3, #16
    b93e:	f3c3 4307 	ubfx	r3, r3, #16, #8
    b942:	60f2      	str	r2, [r6, #12]
    b944:	7433      	strb	r3, [r6, #16]
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
    b946:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b948:	f8d3 b044 	ldr.w	fp, [r3, #68]	; 0x44
    b94c:	2320      	movs	r3, #32
    b94e:	464a      	mov	r2, r9
    b950:	4631      	mov	r1, r6
    b952:	4628      	mov	r0, r5
    b954:	47d8      	blx	fp
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
    b956:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b958:	f8d3 b048 	ldr.w	fp, [r3, #72]	; 0x48
    b95c:	464b      	mov	r3, r9
    b95e:	464a      	mov	r2, r9
    b960:	2120      	movs	r1, #32
    b962:	4628      	mov	r0, r5
    b964:	47d8      	blx	fp
    return (dev->uw_funcs->uf_set_wait4resp(dev, enable));
    b966:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    b96a:	4649      	mov	r1, r9
    b96c:	4628      	mov	r0, r5
    b96e:	4798      	blx	r3
    return (dev->uw_funcs->uf_start_tx(dev));
    b970:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    b974:	4628      	mov	r0, r5
    b976:	4798      	blx	r3
    ccp->status.start_tx_error = uwb_start_tx(inst).start_tx_error;
    b978:	f3c0 0080 	ubfx	r0, r0, #2, #1
    b97c:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    b980:	f360 1386 	bfi	r3, r0, #6, #1
    b984:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
    if (ccp->status.start_tx_error) {
    b988:	b2db      	uxtb	r3, r3
    b98a:	f013 0f40 	tst.w	r3, #64	; 0x40
    b98e:	d072      	beq.n	ba76 <ccp_send+0x216>
    return (dev->uw_funcs->uf_read_systime(dev));
    b990:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    b994:	4628      	mov	r0, r5
    b996:	4798      	blx	r3
        uint64_t late_us = ((systime - timestamp)&UWB_DTU_40BMASK) >> 16;
    b998:	ebb0 0808 	subs.w	r8, r0, r8
    b99c:	eb61 0107 	sbc.w	r1, r1, r7
    b9a0:	ea4f 4818 	mov.w	r8, r8, lsr #16
    b9a4:	ea48 4801 	orr.w	r8, r8, r1, lsl #16
    b9a8:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
        CCP_STATS_INC(tx_start_error);
    b9ac:	6c63      	ldr	r3, [r4, #68]	; 0x44
    b9ae:	3301      	adds	r3, #1
    b9b0:	6463      	str	r3, [r4, #68]	; 0x44
        previous_frame->transmission_timestamp.timestamp = (frame->transmission_timestamp.timestamp
    b9b2:	6973      	ldr	r3, [r6, #20]
    b9b4:	69b2      	ldr	r2, [r6, #24]
                        + ((uint64_t)ccp->period << 16));
    b9b6:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
    b9ba:	0408      	lsls	r0, r1, #16
    b9bc:	181b      	adds	r3, r3, r0
    b9be:	eb42 4211 	adc.w	r2, r2, r1, lsr #16
        previous_frame->transmission_timestamp.timestamp = (frame->transmission_timestamp.timestamp
    b9c2:	f8ca 3014 	str.w	r3, [sl, #20]
    b9c6:	f8ca 2018 	str.w	r2, [sl, #24]
        ccp->idx++;
    b9ca:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
    b9ce:	3301      	adds	r3, #1
    b9d0:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
        ccp->os_epoch += dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(ccp->period - late_us));
    b9d4:	f8d4 50e8 	ldr.w	r5, [r4, #232]	; 0xe8
    b9d8:	ebb5 0008 	subs.w	r0, r5, r8
    b9dc:	eb61 0101 	sbc.w	r1, r1, r1
    b9e0:	f015 fcb0 	bl	21344 <__aeabi_ul2d>
    b9e4:	a33c      	add	r3, pc, #240	; (adr r3, bad8 <ccp_send+0x278>)
    b9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
    b9ea:	f015 fce1 	bl	213b0 <__aeabi_dmul>
    b9ee:	4606      	mov	r6, r0
    b9f0:	460f      	mov	r7, r1
    b9f2:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
    b9f6:	f015 fc61 	bl	212bc <__aeabi_ui2d>
    b9fa:	4632      	mov	r2, r6
    b9fc:	463b      	mov	r3, r7
    b9fe:	f015 fb21 	bl	21044 <__adddf3>
    ba02:	f015 ffad 	bl	21960 <__aeabi_d2uiz>
    ba06:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
        ccp->os_epoch -= dpl_cputime_usecs_to_ticks(MYNEWT_VAL(OS_LATENCY));
    ba0a:	f5a0 7048 	sub.w	r0, r0, #800	; 0x320
    ba0e:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
        ccp->master_epoch.timestamp += ((uint64_t)ccp->period)<<16;
    ba12:	0429      	lsls	r1, r5, #16
    ba14:	f8d4 20d0 	ldr.w	r2, [r4, #208]	; 0xd0
    ba18:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
    ba1c:	1852      	adds	r2, r2, r1
    ba1e:	eb43 4315 	adc.w	r3, r3, r5, lsr #16
    ba22:	f8c4 20d0 	str.w	r2, [r4, #208]	; 0xd0
    ba26:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
        ccp->local_epoch += ((uint64_t)ccp->period)<<16;
    ba2a:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    ba2e:	f8d4 20dc 	ldr.w	r2, [r4, #220]	; 0xdc
    ba32:	185b      	adds	r3, r3, r1
    ba34:	eb42 4215 	adc.w	r2, r2, r5, lsr #16
    ba38:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
    ba3c:	f8c4 20dc 	str.w	r2, [r4, #220]	; 0xdc
    return (dpl_error_t)os_sem_release(&sem->sem);
    ba40:	9800      	ldr	r0, [sp, #0]
    ba42:	f7fe f9af 	bl	9da4 <os_sem_release>
        assert(err == DPL_OK);
    ba46:	b980      	cbnz	r0, ba6a <ccp_send+0x20a>
}
    ba48:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
    ba4c:	b003      	add	sp, #12
    ba4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(ccp);
    ba52:	2300      	movs	r3, #0
    ba54:	461a      	mov	r2, r3
    ba56:	4619      	mov	r1, r3
    ba58:	4618      	mov	r0, r3
    ba5a:	f7fd fa83 	bl	8f64 <__assert_func>
    assert(err == DPL_OK);
    ba5e:	2300      	movs	r3, #0
    ba60:	461a      	mov	r2, r3
    ba62:	4619      	mov	r1, r3
    ba64:	4618      	mov	r0, r3
    ba66:	f7fd fa7d 	bl	8f64 <__assert_func>
        assert(err == DPL_OK);
    ba6a:	464b      	mov	r3, r9
    ba6c:	464a      	mov	r2, r9
    ba6e:	4649      	mov	r1, r9
    ba70:	4648      	mov	r0, r9
    ba72:	f7fd fa77 	bl	8f64 <__assert_func>
    }else if(mode == UWB_BLOCKING){
    ba76:	9b01      	ldr	r3, [sp, #4]
    ba78:	2b00      	cmp	r3, #0
    ba7a:	d1e5      	bne.n	ba48 <ccp_send+0x1e8>
        uint32_t margin = 0xffffffffU&(frame->transmission_timestamp.lo - uwb_read_systime_lo32(inst));
    ba7c:	6976      	ldr	r6, [r6, #20]
    return (dev->uw_funcs->uf_read_systime_lo32(dev));
    ba7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    ba80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    ba82:	4628      	mov	r0, r5
    ba84:	4798      	blx	r3
    ba86:	1a30      	subs	r0, r6, r0
        CCP_STATS_SET(os_lat_margin, uwb_dwt_usecs_to_usecs(margin>>16));
    ba88:	2300      	movs	r3, #0
    ba8a:	65a3      	str	r3, [r4, #88]	; 0x58
    ba8c:	0c00      	lsrs	r0, r0, #16
    ba8e:	f015 fc15 	bl	212bc <__aeabi_ui2d>
    ba92:	a311      	add	r3, pc, #68	; (adr r3, bad8 <ccp_send+0x278>)
    ba94:	e9d3 2300 	ldrd	r2, r3, [r3]
    ba98:	f015 fc8a 	bl	213b0 <__aeabi_dmul>
    ba9c:	2200      	movs	r2, #0
    ba9e:	2300      	movs	r3, #0
    baa0:	f015 fad0 	bl	21044 <__adddf3>
    baa4:	f015 ff5c 	bl	21960 <__aeabi_d2uiz>
    baa8:	65a0      	str	r0, [r4, #88]	; 0x58
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    baaa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    baae:	9800      	ldr	r0, [sp, #0]
    bab0:	f7fe f9aa 	bl	9e08 <os_sem_pend>
        assert(err == DPL_OK);
    bab4:	b950      	cbnz	r0, bacc <ccp_send+0x26c>
    return (dpl_error_t)os_sem_release(&sem->sem);
    bab6:	9800      	ldr	r0, [sp, #0]
    bab8:	f7fe f974 	bl	9da4 <os_sem_release>
        assert(err == DPL_OK);
    babc:	2800      	cmp	r0, #0
    babe:	d0c3      	beq.n	ba48 <ccp_send+0x1e8>
    bac0:	2300      	movs	r3, #0
    bac2:	461a      	mov	r2, r3
    bac4:	4619      	mov	r1, r3
    bac6:	4618      	mov	r0, r3
    bac8:	f7fd fa4c 	bl	8f64 <__assert_func>
        assert(err == DPL_OK);
    bacc:	2300      	movs	r3, #0
    bace:	461a      	mov	r2, r3
    bad0:	4619      	mov	r1, r3
    bad2:	4618      	mov	r0, r3
    bad4:	f7fd fa46 	bl	8f64 <__assert_func>
    bad8:	90690691 	.word	0x90690691
    badc:	3ff06906 	.word	0x3ff06906

0000bae0 <ccp_master_timer_ev_cb>:
{
    bae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    assert(ev != NULL);
    bae2:	b138      	cbz	r0, baf4 <ccp_master_timer_ev_cb+0x14>
    return ev->ev.ev_arg;
    bae4:	6884      	ldr	r4, [r0, #8]
    assert(dpl_event_get_arg(ev));
    bae6:	b15c      	cbz	r4, bb00 <ccp_master_timer_ev_cb+0x20>
    if (!ccp->status.enabled) {
    bae8:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    baec:	f013 0f10 	tst.w	r3, #16
    baf0:	d10c      	bne.n	bb0c <ccp_master_timer_ev_cb+0x2c>
}
    baf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert(ev != NULL);
    baf4:	2300      	movs	r3, #0
    baf6:	461a      	mov	r2, r3
    baf8:	4619      	mov	r1, r3
    bafa:	4618      	mov	r0, r3
    bafc:	f7fd fa32 	bl	8f64 <__assert_func>
    assert(dpl_event_get_arg(ev));
    bb00:	2300      	movs	r3, #0
    bb02:	461a      	mov	r2, r3
    bb04:	4619      	mov	r1, r3
    bb06:	4618      	mov	r0, r3
    bb08:	f7fd fa2c 	bl	8f64 <__assert_func>
    CCP_STATS_INC(master_cnt);
    bb0c:	69a3      	ldr	r3, [r4, #24]
    bb0e:	3301      	adds	r3, #1
    bb10:	61a3      	str	r3, [r4, #24]
    ccp->status.timer_restarted = 0;
    bb12:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    bb16:	f36f 03c3 	bfc	r3, #3, #1
    bb1a:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
    if (ccp_send(ccp, UWB_BLOCKING).start_tx_error) {
    bb1e:	2100      	movs	r1, #0
    bb20:	4620      	mov	r0, r4
    bb22:	f7ff fe9d 	bl	b860 <ccp_send>
    bb26:	f010 0f40 	tst.w	r0, #64	; 0x40
    bb2a:	d004      	beq.n	bb36 <ccp_master_timer_ev_cb+0x56>
        if (!ccp->status.enabled) {
    bb2c:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    bb30:	f013 0f10 	tst.w	r3, #16
    bb34:	d0dd      	beq.n	baf2 <ccp_master_timer_ev_cb+0x12>
    if (!ccp->status.timer_restarted && ccp->status.enabled) {
    bb36:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    bb3a:	f003 0318 	and.w	r3, r3, #24
    bb3e:	2b10      	cmp	r3, #16
    bb40:	d1d7      	bne.n	baf2 <ccp_master_timer_ev_cb+0x12>
        rc = dpl_cputime_timer_start(&ccp->timer, ccp->os_epoch
    bb42:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
            - dpl_cputime_usecs_to_ticks(MYNEWT_VAL(OS_LATENCY))
    bb46:	f5a5 7548 	sub.w	r5, r5, #800	; 0x320
            + dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(ccp->period))
    bb4a:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
    bb4e:	f015 fbb5 	bl	212bc <__aeabi_ui2d>
    bb52:	a30f      	add	r3, pc, #60	; (adr r3, bb90 <ccp_master_timer_ev_cb+0xb0>)
    bb54:	e9d3 2300 	ldrd	r2, r3, [r3]
    bb58:	f015 fc2a 	bl	213b0 <__aeabi_dmul>
    bb5c:	4606      	mov	r6, r0
    bb5e:	460f      	mov	r7, r1
    bb60:	4628      	mov	r0, r5
    bb62:	f015 fbab 	bl	212bc <__aeabi_ui2d>
    bb66:	4632      	mov	r2, r6
    bb68:	463b      	mov	r3, r7
    bb6a:	f015 fa6b 	bl	21044 <__adddf3>
        rc = dpl_cputime_timer_start(&ccp->timer, ccp->os_epoch
    bb6e:	f015 fef7 	bl	21960 <__aeabi_d2uiz>
    bb72:	4601      	mov	r1, r0
    bb74:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
    bb78:	f002 fc3f 	bl	e3fa <dpl_cputime_timer_start>
        if (rc == 0) ccp->status.timer_restarted = 1;
    bb7c:	2800      	cmp	r0, #0
    bb7e:	d1b8      	bne.n	baf2 <ccp_master_timer_ev_cb+0x12>
    bb80:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    bb84:	f043 0308 	orr.w	r3, r3, #8
    bb88:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
    bb8c:	e7b1      	b.n	baf2 <ccp_master_timer_ev_cb+0x12>
    bb8e:	bf00      	nop
    bb90:	90690691 	.word	0x90690691
    bb94:	3ff06906 	.word	0x3ff06906

0000bb98 <uwb_ccp_init>:
{
    bb98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bb9c:	b08e      	sub	sp, #56	; 0x38
    assert(dev);
    bb9e:	2800      	cmp	r0, #0
    bba0:	d05c      	beq.n	bc5c <uwb_ccp_init+0xc4>
    bba2:	460d      	mov	r5, r1
    bba4:	4607      	mov	r7, r0
    assert(nframes > 1);
    bba6:	2901      	cmp	r1, #1
    bba8:	d95e      	bls.n	bc68 <uwb_ccp_init+0xd0>
    struct uwb_ccp_instance *ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(dev, UWBEXT_CCP);
    bbaa:	2101      	movs	r1, #1
    bbac:	f7fc ffb7 	bl	8b1e <uwb_mac_find_cb_inst_ptr>
    if (ccp == NULL) {
    bbb0:	4604      	mov	r4, r0
    bbb2:	2800      	cmp	r0, #0
    bbb4:	d05e      	beq.n	bc74 <uwb_ccp_init+0xdc>
        assert(ccp->nframes == nframes);
    bbb6:	f8b0 30ec 	ldrh.w	r3, [r0, #236]	; 0xec
    bbba:	42ab      	cmp	r3, r5
    bbbc:	f040 80b7 	bne.w	bd2e <uwb_ccp_init+0x196>
    ccp->period = MYNEWT_VAL(UWB_CCP_PERIOD);
    bbc0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    bbc4:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    ccp->config = (struct uwb_ccp_config){
    bbc8:	2300      	movs	r3, #0
    bbca:	f8c4 30ca 	str.w	r3, [r4, #202]	; 0xca
    bbce:	f44f 7360 	mov.w	r3, #896	; 0x380
    bbd2:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
    return (dpl_error_t)os_sem_init(&sem->sem, tokens);
    bbd6:	2101      	movs	r1, #1
    bbd8:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    bbdc:	f7fe f8da 	bl	9d94 <os_sem_init>
    assert(err == DPL_OK);
    bbe0:	2800      	cmp	r0, #0
    bbe2:	f040 80aa 	bne.w	bd3a <uwb_ccp_init+0x1a2>
    ccp->cbs = (struct uwb_mac_interface){
    bbe6:	f104 056c 	add.w	r5, r4, #108	; 0x6c
    bbea:	223c      	movs	r2, #60	; 0x3c
    bbec:	2100      	movs	r1, #0
    bbee:	4628      	mov	r0, r5
    bbf0:	f001 ff73 	bl	dada <memset>
    bbf4:	2301      	movs	r3, #1
    bbf6:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
    bbfa:	6724      	str	r4, [r4, #112]	; 0x70
    bbfc:	4b58      	ldr	r3, [pc, #352]	; (bd60 <uwb_ccp_init+0x1c8>)
    bbfe:	67a3      	str	r3, [r4, #120]	; 0x78
    bc00:	4b58      	ldr	r3, [pc, #352]	; (bd64 <uwb_ccp_init+0x1cc>)
    bc02:	67e3      	str	r3, [r4, #124]	; 0x7c
    bc04:	4b58      	ldr	r3, [pc, #352]	; (bd68 <uwb_ccp_init+0x1d0>)
    bc06:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    bc0a:	4b58      	ldr	r3, [pc, #352]	; (bd6c <uwb_ccp_init+0x1d4>)
    bc0c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    bc10:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    bc14:	4b56      	ldr	r3, [pc, #344]	; (bd70 <uwb_ccp_init+0x1d8>)
    bc16:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    uwb_mac_append_interface(dev, &ccp->cbs);
    bc1a:	4629      	mov	r1, r5
    bc1c:	4638      	mov	r0, r7
    bc1e:	f7fc ff29 	bl	8a74 <uwb_mac_append_interface>
    ccp_tasks_init(ccp);
    bc22:	4620      	mov	r0, r4
    bc24:	f7ff fc3e 	bl	b4a4 <ccp_tasks_init>
    ccp->status.initialized = 1;
    bc28:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    bc2c:	f043 0302 	orr.w	r3, r3, #2
    bc30:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
    int rc = stats_init(
    bc34:	1d25      	adds	r5, r4, #4
    bc36:	2214      	movs	r2, #20
    bc38:	9200      	str	r2, [sp, #0]
    bc3a:	4b4e      	ldr	r3, [pc, #312]	; (bd74 <uwb_ccp_init+0x1dc>)
    bc3c:	2104      	movs	r1, #4
    bc3e:	4628      	mov	r0, r5
    bc40:	f005 f9d6 	bl	10ff0 <stats_init>
    assert(rc == 0);
    bc44:	2800      	cmp	r0, #0
    bc46:	d17e      	bne.n	bd46 <uwb_ccp_init+0x1ae>
    rc = stats_register("ccp", STATS_HDR(ccp->stat));
    bc48:	4629      	mov	r1, r5
    bc4a:	484b      	ldr	r0, [pc, #300]	; (bd78 <uwb_ccp_init+0x1e0>)
    bc4c:	f005 fa5a 	bl	11104 <stats_register>
    assert(rc == 0);
    bc50:	2800      	cmp	r0, #0
    bc52:	d17e      	bne.n	bd52 <uwb_ccp_init+0x1ba>
}
    bc54:	4620      	mov	r0, r4
    bc56:	b00e      	add	sp, #56	; 0x38
    bc58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert(dev);
    bc5c:	2300      	movs	r3, #0
    bc5e:	461a      	mov	r2, r3
    bc60:	4619      	mov	r1, r3
    bc62:	4618      	mov	r0, r3
    bc64:	f7fd f97e 	bl	8f64 <__assert_func>
    assert(nframes > 1);
    bc68:	2300      	movs	r3, #0
    bc6a:	461a      	mov	r2, r3
    bc6c:	4619      	mov	r1, r3
    bc6e:	4618      	mov	r0, r3
    bc70:	f7fd f978 	bl	8f64 <__assert_func>
        ccp = (struct uwb_ccp_instance *) calloc(1, sizeof(struct uwb_ccp_instance) + nframes * sizeof(uwb_ccp_frame_t *));
    bc74:	f105 01e0 	add.w	r1, r5, #224	; 0xe0
    bc78:	0089      	lsls	r1, r1, #2
    bc7a:	2001      	movs	r0, #1
    bc7c:	f001 fdeb 	bl	d856 <calloc>
        assert(ccp);
    bc80:	4604      	mov	r4, r0
    bc82:	b1b8      	cbz	r0, bcb4 <uwb_ccp_init+0x11c>
        ccp->status.selfmalloc = 1;
    bc84:	f890 30c8 	ldrb.w	r3, [r0, #200]	; 0xc8
    bc88:	f043 0301 	orr.w	r3, r3, #1
    bc8c:	f880 30c8 	strb.w	r3, [r0, #200]	; 0xc8
        ccp->nframes = nframes;
    bc90:	f8a0 50ec 	strh.w	r5, [r0, #236]	; 0xec
        uwb_ccp_frame_t ccp_default = {
    bc94:	2230      	movs	r2, #48	; 0x30
    bc96:	2100      	movs	r1, #0
    bc98:	a802      	add	r0, sp, #8
    bc9a:	f001 ff1e 	bl	dada <memset>
    bc9e:	23c5      	movs	r3, #197	; 0xc5
    bca0:	f88d 3008 	strb.w	r3, [sp, #8]
    bca4:	23ff      	movs	r3, #255	; 0xff
    bca6:	f88d 3009 	strb.w	r3, [sp, #9]
    bcaa:	2304      	movs	r3, #4
    bcac:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
        for (i = 0; i < ccp->nframes; i++){
    bcb0:	2600      	movs	r6, #0
    bcb2:	e022      	b.n	bcfa <uwb_ccp_init+0x162>
        assert(ccp);
    bcb4:	2300      	movs	r3, #0
    bcb6:	461a      	mov	r2, r3
    bcb8:	4619      	mov	r1, r3
    bcba:	4618      	mov	r0, r3
    bcbc:	f7fd f952 	bl	8f64 <__assert_func>
            assert(ccp->frames[i]);
    bcc0:	2300      	movs	r3, #0
    bcc2:	461a      	mov	r2, r3
    bcc4:	4619      	mov	r1, r3
    bcc6:	4618      	mov	r0, r3
    bcc8:	f7fd f94c 	bl	8f64 <__assert_func>
            memcpy(ccp->frames[i], &ccp_default, sizeof(uwb_ccp_frame_t));
    bccc:	46ae      	mov	lr, r5
    bcce:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    bcd2:	f8cc 0000 	str.w	r0, [ip]
    bcd6:	f8cc 1004 	str.w	r1, [ip, #4]
    bcda:	f8cc 2008 	str.w	r2, [ip, #8]
    bcde:	f8cc 300c 	str.w	r3, [ip, #12]
    bce2:	4675      	mov	r5, lr
    bce4:	f10c 0c10 	add.w	ip, ip, #16
    bce8:	45c6      	cmp	lr, r8
    bcea:	d1ef      	bne.n	bccc <uwb_ccp_init+0x134>
            ccp->frames[i]->seq_num = 0;
    bcec:	f106 03e0 	add.w	r3, r6, #224	; 0xe0
    bcf0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    bcf4:	2200      	movs	r2, #0
    bcf6:	705a      	strb	r2, [r3, #1]
        for (i = 0; i < ccp->nframes; i++){
    bcf8:	3601      	adds	r6, #1
    bcfa:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
    bcfe:	42b3      	cmp	r3, r6
    bd00:	dd0e      	ble.n	bd20 <uwb_ccp_init+0x188>
            ccp->frames[i] = (uwb_ccp_frame_t *) calloc(1, sizeof(uwb_ccp_frame_t));
    bd02:	2130      	movs	r1, #48	; 0x30
    bd04:	2001      	movs	r0, #1
    bd06:	f001 fda6 	bl	d856 <calloc>
    bd0a:	f106 03e0 	add.w	r3, r6, #224	; 0xe0
    bd0e:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
            assert(ccp->frames[i]);
    bd12:	2800      	cmp	r0, #0
    bd14:	d0d4      	beq.n	bcc0 <uwb_ccp_init+0x128>
            memcpy(ccp->frames[i], &ccp_default, sizeof(uwb_ccp_frame_t));
    bd16:	ad02      	add	r5, sp, #8
    bd18:	4684      	mov	ip, r0
    bd1a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    bd1e:	e7d5      	b.n	bccc <uwb_ccp_init+0x134>
        ccp->dev_inst = dev;
    bd20:	6027      	str	r7, [r4, #0]
        ccp->task_prio = dev->task_prio - 0x4;
    bd22:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    bd26:	3b04      	subs	r3, #4
    bd28:	f884 317c 	strb.w	r3, [r4, #380]	; 0x17c
    bd2c:	e748      	b.n	bbc0 <uwb_ccp_init+0x28>
        assert(ccp->nframes == nframes);
    bd2e:	2300      	movs	r3, #0
    bd30:	461a      	mov	r2, r3
    bd32:	4619      	mov	r1, r3
    bd34:	4618      	mov	r0, r3
    bd36:	f7fd f915 	bl	8f64 <__assert_func>
    assert(err == DPL_OK);
    bd3a:	2300      	movs	r3, #0
    bd3c:	461a      	mov	r2, r3
    bd3e:	4619      	mov	r1, r3
    bd40:	4618      	mov	r0, r3
    bd42:	f7fd f90f 	bl	8f64 <__assert_func>
    assert(rc == 0);
    bd46:	2300      	movs	r3, #0
    bd48:	461a      	mov	r2, r3
    bd4a:	4619      	mov	r1, r3
    bd4c:	4618      	mov	r0, r3
    bd4e:	f7fd f909 	bl	8f64 <__assert_func>
    assert(rc == 0);
    bd52:	2300      	movs	r3, #0
    bd54:	461a      	mov	r2, r3
    bd56:	4619      	mov	r1, r3
    bd58:	4618      	mov	r0, r3
    bd5a:	f7fd f903 	bl	8f64 <__assert_func>
    bd5e:	bf00      	nop
    bd60:	0000b2e1 	.word	0x0000b2e1
    bd64:	0000bf71 	.word	0x0000bf71
    bd68:	0000b273 	.word	0x0000b273
    bd6c:	0000b21f 	.word	0x0000b21f
    bd70:	0000b1f1 	.word	0x0000b1f1
    bd74:	00023190 	.word	0x00023190
    bd78:	00023068 	.word	0x00023068

0000bd7c <uwb_ccp_free>:
{
    bd7c:	b538      	push	{r3, r4, r5, lr}
    assert(inst);
    bd7e:	b1f8      	cbz	r0, bdc0 <uwb_ccp_free+0x44>
    bd80:	4605      	mov	r5, r0
    inst->status.enabled = 0;
    bd82:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
    bd86:	f36f 1304 	bfc	r3, #4, #1
    bd8a:	f880 30c9 	strb.w	r3, [r0, #201]	; 0xc9
    return (dpl_error_t)os_sem_release(&sem->sem);
    bd8e:	30b0      	adds	r0, #176	; 0xb0
    bd90:	f7fe f808 	bl	9da4 <os_sem_release>
    uwb_mac_remove_interface(inst->dev_inst, inst->cbs.id);
    bd94:	462c      	mov	r4, r5
    bd96:	f8b5 106e 	ldrh.w	r1, [r5, #110]	; 0x6e
    bd9a:	f854 0bf4 	ldr.w	r0, [r4], #244
    bd9e:	f7fc fe8e 	bl	8abe <uwb_mac_remove_interface>
    dpl_cputime_timer_stop(&inst->timer);
    bda2:	4620      	mov	r0, r4
    bda4:	f002 fb2d 	bl	e402 <dpl_cputime_timer_stop>
    if (inst->status.selfmalloc) {
    bda8:	f895 30c8 	ldrb.w	r3, [r5, #200]	; 0xc8
    bdac:	f013 0f01 	tst.w	r3, #1
    bdb0:	d11b      	bne.n	bdea <uwb_ccp_free+0x6e>
        inst->status.initialized = 0;
    bdb2:	f895 30c8 	ldrb.w	r3, [r5, #200]	; 0xc8
    bdb6:	f36f 0341 	bfc	r3, #1, #1
    bdba:	f885 30c8 	strb.w	r3, [r5, #200]	; 0xc8
}
    bdbe:	e013      	b.n	bde8 <uwb_ccp_free+0x6c>
    assert(inst);
    bdc0:	2300      	movs	r3, #0
    bdc2:	461a      	mov	r2, r3
    bdc4:	4619      	mov	r1, r3
    bdc6:	4618      	mov	r0, r3
    bdc8:	f7fd f8cc 	bl	8f64 <__assert_func>
            free(inst->frames[i]);
    bdcc:	f104 03e0 	add.w	r3, r4, #224	; 0xe0
    bdd0:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
    bdd4:	f001 fe3a 	bl	da4c <free>
        for (i = 0; i < inst->nframes; i++) {
    bdd8:	3401      	adds	r4, #1
    bdda:	f8b5 30ec 	ldrh.w	r3, [r5, #236]	; 0xec
    bdde:	42a3      	cmp	r3, r4
    bde0:	dcf4      	bgt.n	bdcc <uwb_ccp_free+0x50>
        free(inst);
    bde2:	4628      	mov	r0, r5
    bde4:	f001 fe32 	bl	da4c <free>
}
    bde8:	bd38      	pop	{r3, r4, r5, pc}
        for (i = 0; i < inst->nframes; i++) {
    bdea:	2400      	movs	r4, #0
    bdec:	e7f5      	b.n	bdda <uwb_ccp_free+0x5e>

0000bdee <uwb_ccp_start>:
 *
 * @return void
 */
void
uwb_ccp_start(struct uwb_ccp_instance *ccp, uwb_ccp_role_t role)
{
    bdee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bdf2:	4604      	mov	r4, r0
    bdf4:	460e      	mov	r6, r1
    struct uwb_dev * inst = ccp->dev_inst;
    bdf6:	f8d0 8000 	ldr.w	r8, [r0]
    return (dev->uw_funcs->uf_phy_SHR_duration(dev));
    bdfa:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    bdfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    be02:	4640      	mov	r0, r8
    be04:	4798      	blx	r3
    uint16_t epoch_to_rm = uwb_phy_SHR_duration(inst);

    // Initialise frame timestamp to current time
    DIAGMSG("{\"utime\": %"PRIu32",\"msg\": \"uwb_ccp_start\"}\n",
            dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
    assert(ccp);
    be06:	2c00      	cmp	r4, #0
    be08:	d05e      	beq.n	bec8 <uwb_ccp_start+0xda>
    be0a:	4605      	mov	r5, r0
    ccp->idx = 0x0;
    be0c:	2200      	movs	r2, #0
    be0e:	f8a4 20ee 	strh.w	r2, [r4, #238]	; 0xee
    ccp->status.valid = false;
    be12:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    be16:	f362 0382 	bfi	r3, r2, #2, #1
    be1a:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
    ccp->master_euid = 0x0;
    be1e:	2200      	movs	r2, #0
    be20:	2300      	movs	r3, #0
    be22:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
    uwb_ccp_frame_t * frame = ccp->frames[(ccp->idx)%ccp->nframes];
    be26:	f8d4 7380 	ldr.w	r7, [r4, #896]	; 0x380
    ccp->config.role = role;
    be2a:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
    be2e:	f366 0344 	bfi	r3, r6, #1, #4
    be32:	f884 30ca 	strb.w	r3, [r4, #202]	; 0xca
    ccp->status.enabled = 1;
    be36:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    be3a:	f043 0310 	orr.w	r3, r3, #16
    be3e:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9

    /* Setup CCP to send/listen for the first packet ASAP */
    ccp->os_epoch = dpl_cputime_get32() - epoch_to_rm;
    be42:	f002 fae2 	bl	e40a <dpl_cputime_get32>
    be46:	1b40      	subs	r0, r0, r5
    be48:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    return (dev->uw_funcs->uf_read_systime(dev));
    be4c:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    be50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    be52:	4640      	mov	r0, r8
    be54:	4798      	blx	r3
    uint64_t ts = (uwb_read_systime(inst) - (((uint64_t)ccp->period)<<16))&UWB_DTU_40BMASK;
    be56:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    be5a:	041a      	lsls	r2, r3, #16
    be5c:	1a80      	subs	r0, r0, r2
    be5e:	eb61 4313 	sbc.w	r3, r1, r3, lsr #16
    be62:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    ts += ((uint64_t)ccp->config.tx_holdoff_dly + 2 * MYNEWT_VAL(OS_LATENCY))<<16;
    be66:	f8b4 10cc 	ldrh.w	r1, [r4, #204]	; 0xcc
    be6a:	f501 61c8 	add.w	r1, r1, #1600	; 0x640
    be6e:	040a      	lsls	r2, r1, #16
    be70:	1812      	adds	r2, r2, r0
    be72:	eb43 4311 	adc.w	r3, r3, r1, lsr #16

    if (ccp->config.role == CCP_ROLE_MASTER){
    be76:	f894 10ca 	ldrb.w	r1, [r4, #202]	; 0xca
    be7a:	f011 0f1e 	tst.w	r1, #30
    be7e:	d129      	bne.n	bed4 <uwb_ccp_start+0xe6>
        ccp->local_epoch = frame->transmission_timestamp.lo = ts;
    be80:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    be84:	617a      	str	r2, [r7, #20]
    be86:	763b      	strb	r3, [r7, #24]
    be88:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
    be8c:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
        frame->transmission_timestamp.hi = 0;
    be90:	2300      	movs	r3, #0
    be92:	767b      	strb	r3, [r7, #25]
    be94:	76bb      	strb	r3, [r7, #26]
    be96:	7efb      	ldrb	r3, [r7, #27]
    be98:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    be9c:	76fb      	strb	r3, [r7, #27]
    } else {
        ccp->local_epoch = frame->reception_timestamp = ts;
    }
    ccp->local_epoch -= epoch_to_rm;
    be9e:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
    bea2:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
    bea6:	1b40      	subs	r0, r0, r5
    bea8:	f163 0300 	sbc.w	r3, r3, #0
    beac:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    beb0:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    ccp->local_epoch &= UWB_DTU_40BMASK;
    beb4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    beb8:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc

    ccp_timer_init(ccp, role);
    bebc:	4631      	mov	r1, r6
    bebe:	4620      	mov	r0, r4
    bec0:	f7ff fb16 	bl	b4f0 <ccp_timer_init>
}
    bec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert(ccp);
    bec8:	2300      	movs	r3, #0
    beca:	461a      	mov	r2, r3
    becc:	4619      	mov	r1, r3
    bece:	4618      	mov	r0, r3
    bed0:	f7fd f848 	bl	8f64 <__assert_func>
        ccp->local_epoch = frame->reception_timestamp = ts;
    bed4:	623a      	str	r2, [r7, #32]
    bed6:	627b      	str	r3, [r7, #36]	; 0x24
    bed8:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
    bedc:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    bee0:	e7dd      	b.n	be9e <uwb_ccp_start+0xb0>

0000bee2 <uwb_ccp_stop>:
 * @param inst   Pointer to struct uwb_ccp_instance.
 * @return void
 */
void
uwb_ccp_stop(struct uwb_ccp_instance *ccp)
{
    bee2:	b510      	push	{r4, lr}
    assert(ccp);
    bee4:	b1a8      	cbz	r0, bf12 <uwb_ccp_stop+0x30>
    bee6:	4604      	mov	r4, r0
    DIAGMSG("{\"utime\": %"PRIu32",\"msg\": \"uwb_ccp_stop\"}\n",
            dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
    ccp->status.enabled = 0;
    bee8:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
    beec:	f36f 1304 	bfc	r3, #4, #1
    bef0:	f880 30c9 	strb.w	r3, [r0, #201]	; 0xc9
    dpl_cputime_timer_stop(&ccp->timer);
    bef4:	30f4      	adds	r0, #244	; 0xf4
    bef6:	f002 fa84 	bl	e402 <dpl_cputime_timer_stop>
    befa:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
    if(dpl_sem_get_count(&ccp->sem) == 0){
    befe:	b93b      	cbnz	r3, bf10 <uwb_ccp_stop+0x2e>
        uwb_phy_forcetrxoff(ccp->dev_inst);
    bf00:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_phy_forcetrxoff(dev));
    bf02:	6a43      	ldr	r3, [r0, #36]	; 0x24
    bf04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    bf08:	4798      	blx	r3
    bf0a:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
        if(dpl_sem_get_count(&ccp->sem) == 0){
    bf0e:	b133      	cbz	r3, bf1e <uwb_ccp_stop+0x3c>
            dpl_error_t err = dpl_sem_release(&ccp->sem);
            assert(err == DPL_OK);
        }
    }
}
    bf10:	bd10      	pop	{r4, pc}
    assert(ccp);
    bf12:	2300      	movs	r3, #0
    bf14:	461a      	mov	r2, r3
    bf16:	4619      	mov	r1, r3
    bf18:	4618      	mov	r0, r3
    bf1a:	f7fd f823 	bl	8f64 <__assert_func>
    bf1e:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    bf22:	f7fd ff3f 	bl	9da4 <os_sem_release>
            assert(err == DPL_OK);
    bf26:	2800      	cmp	r0, #0
    bf28:	d0f2      	beq.n	bf10 <uwb_ccp_stop+0x2e>
    bf2a:	2300      	movs	r3, #0
    bf2c:	461a      	mov	r2, r3
    bf2e:	4619      	mov	r1, r3
    bf30:	4618      	mov	r0, r3
    bf32:	f7fd f817 	bl	8f64 <__assert_func>
	...

0000bf38 <uwb_ccp_skew_compensation_ui64>:
EXPORT_SYMBOL(uwb_ccp_stop);

uint64_t uwb_ccp_skew_compensation_ui64(struct uwb_ccp_instance *ccp, uint64_t value)
{
    bf38:	b570      	push	{r4, r5, r6, lr}
    bf3a:	4619      	mov	r1, r3
#if MYNEWT_VAL(UWB_WCS_ENABLED)
    struct uwb_wcs_instance * wcs = ccp->wcs;
    bf3c:	6e86      	ldr	r6, [r0, #104]	; 0x68
    if (!wcs) return value;
    bf3e:	b19e      	cbz	r6, bf68 <uwb_ccp_skew_compensation_ui64+0x30>
    // value *= (1.0l - fractional_skew);
    value = DPL_FLOAT64_F64_TO_U64(DPL_FLOAT64_MUL( DPL_FLOAT64_U64_TO_F64(value), DPL_FLOAT64_SUB( DPL_FLOAT64_INIT(1.0l),wcs->fractional_skew)));
    bf40:	4610      	mov	r0, r2
    bf42:	f015 f9ff 	bl	21344 <__aeabi_ul2d>
    bf46:	4604      	mov	r4, r0
    bf48:	460d      	mov	r5, r1
    bf4a:	e9d6 2312 	ldrd	r2, r3, [r6, #72]	; 0x48
    bf4e:	2000      	movs	r0, #0
    bf50:	4906      	ldr	r1, [pc, #24]	; (bf6c <uwb_ccp_skew_compensation_ui64+0x34>)
    bf52:	f015 f875 	bl	21040 <__aeabi_dsub>
    bf56:	4602      	mov	r2, r0
    bf58:	460b      	mov	r3, r1
    bf5a:	4620      	mov	r0, r4
    bf5c:	4629      	mov	r1, r5
    bf5e:	f015 fa27 	bl	213b0 <__aeabi_dmul>
    bf62:	f015 fe0d 	bl	21b80 <__aeabi_d2ulz>
#endif
    return value;
}
    bf66:	bd70      	pop	{r4, r5, r6, pc}
    if (!wcs) return value;
    bf68:	4610      	mov	r0, r2
    bf6a:	e7fc      	b.n	bf66 <uwb_ccp_skew_compensation_ui64+0x2e>
    bf6c:	3ff00000 	.word	0x3ff00000

0000bf70 <rx_complete_cb>:
{
    bf70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    bf74:	b08f      	sub	sp, #60	; 0x3c
    struct uwb_ccp_instance * ccp = (struct uwb_ccp_instance *)cbs->inst_ptr;
    bf76:	684c      	ldr	r4, [r1, #4]
    if (ccp->config.role == CCP_ROLE_MASTER) {
    bf78:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
    bf7c:	f013 0f1e 	tst.w	r3, #30
    bf80:	f000 8230 	beq.w	c3e4 <rx_complete_cb+0x474>
    bf84:	4605      	mov	r5, r0
    if (inst->fctrl_array[0] != FCNTL_IEEE_BLINK_CCP_64){
    bf86:	f890 34e0 	ldrb.w	r3, [r0, #1248]	; 0x4e0
    bf8a:	2bc5      	cmp	r3, #197	; 0xc5
    bf8c:	d00e      	beq.n	bfac <rx_complete_cb+0x3c>
    bf8e:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
        if(dpl_sem_get_count(&ccp->sem) == 0){
    bf92:	2b00      	cmp	r3, #0
    bf94:	f040 822a 	bne.w	c3ec <rx_complete_cb+0x47c>
    return (dev->uw_funcs->uf_adj_rx_timeout(dev, to));
    bf98:	6a43      	ldr	r3, [r0, #36]	; 0x24
    bf9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    bf9c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    bfa0:	4798      	blx	r3
            CCP_STATS_INC(rx_other_frame);
    bfa2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    bfa4:	3301      	adds	r3, #1
    bfa6:	63e3      	str	r3, [r4, #60]	; 0x3c
            return true;
    bfa8:	2001      	movs	r0, #1
    bfaa:	e21c      	b.n	c3e6 <rx_complete_cb+0x476>
    bfac:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
    if(dpl_sem_get_count(&ccp->sem) != 0){
    bfb0:	b99b      	cbnz	r3, bfda <rx_complete_cb+0x6a>
    uwb_ccp_frame_t * frame = ccp->frames[(ccp->idx+1)%ccp->nframes];  // speculative frame advance
    bfb2:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
    bfb6:	3301      	adds	r3, #1
    bfb8:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
    bfbc:	fb93 f1f2 	sdiv	r1, r3, r2
    bfc0:	fb02 3311 	mls	r3, r2, r1, r3
    bfc4:	33e0      	adds	r3, #224	; 0xe0
    bfc6:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
    if (inst->frame_len >= sizeof(uwb_ccp_blink_frame_t) && inst->frame_len <= sizeof(frame->array))
    bfca:	f8b0 34e2 	ldrh.w	r3, [r0, #1250]	; 0x4e2
    bfce:	3b20      	subs	r3, #32
    bfd0:	b29b      	uxth	r3, r3
    bfd2:	2b10      	cmp	r3, #16
    bfd4:	d906      	bls.n	bfe4 <rx_complete_cb+0x74>
        return true;
    bfd6:	2001      	movs	r0, #1
    bfd8:	e205      	b.n	c3e6 <rx_complete_cb+0x476>
        CCP_STATS_INC(rx_unsolicited);
    bfda:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    bfdc:	3301      	adds	r3, #1
    bfde:	63a3      	str	r3, [r4, #56]	; 0x38
        return false;
    bfe0:	2000      	movs	r0, #0
    bfe2:	e200      	b.n	c3e6 <rx_complete_cb+0x476>
        memcpy(frame->array, inst->rxbuf, sizeof(uwb_ccp_blink_frame_t));
    bfe4:	f8d0 34fc 	ldr.w	r3, [r0, #1276]	; 0x4fc
    bfe8:	681f      	ldr	r7, [r3, #0]
    bfea:	6858      	ldr	r0, [r3, #4]
    bfec:	6899      	ldr	r1, [r3, #8]
    bfee:	68da      	ldr	r2, [r3, #12]
    bff0:	6037      	str	r7, [r6, #0]
    bff2:	6070      	str	r0, [r6, #4]
    bff4:	60b1      	str	r1, [r6, #8]
    bff6:	60f2      	str	r2, [r6, #12]
    bff8:	691f      	ldr	r7, [r3, #16]
    bffa:	6958      	ldr	r0, [r3, #20]
    bffc:	6999      	ldr	r1, [r3, #24]
    bffe:	69da      	ldr	r2, [r3, #28]
    c000:	6137      	str	r7, [r6, #16]
    c002:	6170      	str	r0, [r6, #20]
    c004:	61b1      	str	r1, [r6, #24]
    c006:	61f2      	str	r2, [r6, #28]
    if (inst->status.lde_error)
    c008:	f895 3509 	ldrb.w	r3, [r5, #1289]	; 0x509
    c00c:	f013 0f04 	tst.w	r3, #4
    c010:	f040 81ee 	bne.w	c3f0 <rx_complete_cb+0x480>
    return (dev->uw_funcs->uf_stop_rx(dev));
    c014:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    c016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    c018:	4628      	mov	r0, r5
    c01a:	4798      	blx	r3
    ccp->idx++; // confirmed frame advance
    c01c:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
    c020:	3301      	adds	r3, #1
    c022:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
    ccp->seq_num = frame->seq_num;
    c026:	7873      	ldrb	r3, [r6, #1]
    c028:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
    ccp->missed_frames = 0;
    c02c:	2700      	movs	r7, #0
    c02e:	f884 70f1 	strb.w	r7, [r4, #241]	; 0xf1
    return (dev->uw_funcs->uf_read_systime_lo32(dev));
    c032:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    c034:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    c036:	4628      	mov	r0, r5
    c038:	4798      	blx	r3
    uint32_t delta_0 = 0xffffffffU&(uwb_read_systime_lo32(inst) - (uint32_t)(inst->rxtimestamp&0xFFFFFFFFUL));
    c03a:	f8d5 34e8 	ldr.w	r3, [r5, #1256]	; 0x4e8
    c03e:	eba0 0803 	sub.w	r8, r0, r3
    ccp->os_epoch = dpl_cputime_get32();
    c042:	f002 f9e2 	bl	e40a <dpl_cputime_get32>
    c046:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    c04a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    c04c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    c04e:	4628      	mov	r0, r5
    c050:	4798      	blx	r3
    uint32_t delta_1 = 0xffffffffU&(uwb_read_systime_lo32(inst) - (uint32_t)(inst->rxtimestamp&0xFFFFFFFFUL));
    c052:	f8d5 34e8 	ldr.w	r3, [r5, #1256]	; 0x4e8
    c056:	1ac0      	subs	r0, r0, r3
    uint32_t delta = (delta_0>>1) + (delta_1>>1);
    c058:	0840      	lsrs	r0, r0, #1
    c05a:	eb00 0058 	add.w	r0, r0, r8, lsr #1
    ccp->os_epoch -= dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(delta>>16));
    c05e:	0c00      	lsrs	r0, r0, #16
    c060:	f015 f92c 	bl	212bc <__aeabi_ui2d>
    c064:	a3e6      	add	r3, pc, #920	; (adr r3, c400 <rx_complete_cb+0x490>)
    c066:	e9d3 2300 	ldrd	r2, r3, [r3]
    c06a:	f015 f9a1 	bl	213b0 <__aeabi_dmul>
    c06e:	4680      	mov	r8, r0
    c070:	4689      	mov	r9, r1
    c072:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
    c076:	f015 f921 	bl	212bc <__aeabi_ui2d>
    c07a:	4642      	mov	r2, r8
    c07c:	464b      	mov	r3, r9
    c07e:	f014 ffdf 	bl	21040 <__aeabi_dsub>
    c082:	f015 fc6d 	bl	21960 <__aeabi_d2uiz>
    c086:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    CCP_STATS_SET(irq_latency, uwb_dwt_usecs_to_usecs(delta>>16));
    c08a:	6527      	str	r7, [r4, #80]	; 0x50
    c08c:	2200      	movs	r2, #0
    c08e:	2300      	movs	r3, #0
    c090:	4640      	mov	r0, r8
    c092:	4649      	mov	r1, r9
    c094:	f014 ffd6 	bl	21044 <__adddf3>
    c098:	f015 fc62 	bl	21960 <__aeabi_d2uiz>
    c09c:	6520      	str	r0, [r4, #80]	; 0x50
    CCP_STATS_INC(rx_complete);
    c09e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    c0a0:	3301      	adds	r3, #1
    c0a2:	62e3      	str	r3, [r4, #44]	; 0x2c
    ccp->status.rx_timeout_error = 0;
    c0a4:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    c0a8:	f367 0341 	bfi	r3, r7, #1, #1
    c0ac:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
    if (frame->transmission_timestamp.timestamp < ccp->master_epoch.timestamp ||
    c0b0:	6970      	ldr	r0, [r6, #20]
    c0b2:	69b2      	ldr	r2, [r6, #24]
    c0b4:	f8d4 10d0 	ldr.w	r1, [r4, #208]	; 0xd0
    c0b8:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
    c0bc:	4288      	cmp	r0, r1
    c0be:	eb72 0303 	sbcs.w	r3, r2, r3
    c0c2:	d30c      	bcc.n	c0de <rx_complete_cb+0x16e>
        frame->euid != ccp->master_euid) {
    c0c4:	f8d6 0002 	ldr.w	r0, [r6, #2]
    c0c8:	f8d6 2006 	ldr.w	r2, [r6, #6]
    c0cc:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    c0d0:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    if (frame->transmission_timestamp.timestamp < ccp->master_epoch.timestamp ||
    c0d4:	429a      	cmp	r2, r3
    c0d6:	bf08      	it	eq
    c0d8:	4288      	cmpeq	r0, r1
    c0da:	f000 80ce 	beq.w	c27a <rx_complete_cb+0x30a>
        ccp->master_euid = frame->euid;
    c0de:	f8d6 2002 	ldr.w	r2, [r6, #2]
    c0e2:	f8d6 3006 	ldr.w	r3, [r6, #6]
    c0e6:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
    c0ea:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        ccp->status.valid = (MYNEWT_VAL(UWB_CCP_VALID_THRESHOLD)==0);
    c0ee:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    c0f2:	f36f 0382 	bfc	r3, #2, #1
    c0f6:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
        ccp->status.valid_count = 0;
    c0fa:	b2db      	uxtb	r3, r3
    c0fc:	f36f 03c5 	bfc	r3, #3, #3
    c100:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
    ccp->master_epoch.timestamp = frame->transmission_timestamp.timestamp;
    c104:	6972      	ldr	r2, [r6, #20]
    c106:	69b3      	ldr	r3, [r6, #24]
    c108:	f8c4 20d0 	str.w	r2, [r4, #208]	; 0xd0
    c10c:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
    ccp->local_epoch = frame->reception_timestamp = inst->rxtimestamp;
    c110:	f8d5 24e8 	ldr.w	r2, [r5, #1256]	; 0x4e8
    c114:	f8d5 34ec 	ldr.w	r3, [r5, #1260]	; 0x4ec
    c118:	6232      	str	r2, [r6, #32]
    c11a:	6273      	str	r3, [r6, #36]	; 0x24
    c11c:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
    c120:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    ccp->period = (frame->transmission_interval >> 16);
    c124:	68f3      	ldr	r3, [r6, #12]
    c126:	7c32      	ldrb	r2, [r6, #16]
    c128:	0c1b      	lsrs	r3, r3, #16
    c12a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    c12e:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    adjust_for_epoch_to_rm(ccp, frame->epoch_to_rm_us);
    c132:	8bf1      	ldrh	r1, [r6, #30]
    c134:	4620      	mov	r0, r4
    c136:	f7ff f827 	bl	b188 <adjust_for_epoch_to_rm>
    frame->carrier_integrator = inst->carrier_integrator;
    c13a:	f8d5 34f0 	ldr.w	r3, [r5, #1264]	; 0x4f0
    c13e:	62b3      	str	r3, [r6, #40]	; 0x28
    if (inst->config.rxttcko_enable) {
    c140:	f995 352c 	ldrsb.w	r3, [r5, #1324]	; 0x52c
    c144:	2b00      	cmp	r3, #0
    c146:	f2c0 80b3 	blt.w	c2b0 <rx_complete_cb+0x340>
        frame->rxttcko = 0;
    c14a:	2300      	movs	r3, #0
    c14c:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
    c150:	f886 302d 	strb.w	r3, [r6, #45]	; 0x2d
    c154:	f886 302e 	strb.w	r3, [r6, #46]	; 0x2e
    c158:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
    if (ccp->tof_comp_cb) {
    c15c:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    c160:	b19b      	cbz	r3, c18a <rx_complete_cb+0x21a>
        uint32_t tof_comp = ccp->tof_comp_cb(frame->short_address);
    c162:	8970      	ldrh	r0, [r6, #10]
    c164:	4798      	blx	r3
    c166:	4602      	mov	r2, r0
        tof_comp = uwb_ccp_skew_compensation_ui64(ccp, (uint64_t)tof_comp);
    c168:	2300      	movs	r3, #0
    c16a:	4620      	mov	r0, r4
    c16c:	f7ff fee4 	bl	bf38 <uwb_ccp_skew_compensation_ui64>
        ccp->local_epoch -= tof_comp;
    c170:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    c174:	f8d4 20dc 	ldr.w	r2, [r4, #220]	; 0xdc
    c178:	1a1b      	subs	r3, r3, r0
    c17a:	f162 0200 	sbc.w	r2, r2, #0
    c17e:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
    c182:	f8c4 20dc 	str.w	r2, [r4, #220]	; 0xdc
        frame->reception_timestamp = ccp->local_epoch;
    c186:	6233      	str	r3, [r6, #32]
    c188:	6272      	str	r2, [r6, #36]	; 0x24
    if (frame->rpt_count != 0) {
    c18a:	7f33      	ldrb	r3, [r6, #28]
    c18c:	2b00      	cmp	r3, #0
    c18e:	d05c      	beq.n	c24a <rx_complete_cb+0x2da>
        CCP_STATS_INC(rx_relayed);
    c190:	6b23      	ldr	r3, [r4, #48]	; 0x30
    c192:	3301      	adds	r3, #1
    c194:	6323      	str	r3, [r4, #48]	; 0x30
        uint64_t master_interval = ((frame->transmission_interval/0x100000000UL+1)*0x100000000UL);
    c196:	f896 c010 	ldrb.w	ip, [r6, #16]
    c19a:	f11c 0c01 	adds.w	ip, ip, #1
    c19e:	2700      	movs	r7, #0
        ccp->period = master_interval>>16;
    c1a0:	ea4f 430c 	mov.w	r3, ip, lsl #16
    c1a4:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
        uint64_t repeat_dly = master_interval - frame->transmission_interval;
    c1a8:	68f1      	ldr	r1, [r6, #12]
    c1aa:	f896 e010 	ldrb.w	lr, [r6, #16]
    c1ae:	1a7a      	subs	r2, r7, r1
    c1b0:	eb6c 030e 	sbc.w	r3, ip, lr
        ccp->master_epoch.timestamp = (ccp->master_epoch.timestamp - repeat_dly);
    c1b4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
    c1b8:	9001      	str	r0, [sp, #4]
    c1ba:	1bc9      	subs	r1, r1, r7
    c1bc:	ebae 0c0c 	sub.w	ip, lr, ip
    c1c0:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
    c1c4:	1809      	adds	r1, r1, r0
    c1c6:	9801      	ldr	r0, [sp, #4]
    c1c8:	eb40 000c 	adc.w	r0, r0, ip
    c1cc:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
    c1d0:	f8c4 00d4 	str.w	r0, [r4, #212]	; 0xd4
        repeat_dly = uwb_ccp_skew_compensation_ui64(ccp, repeat_dly);
    c1d4:	4620      	mov	r0, r4
    c1d6:	f7ff feaf 	bl	bf38 <uwb_ccp_skew_compensation_ui64>
        ccp->local_epoch = (ccp->local_epoch - repeat_dly) & 0x0FFFFFFFFFFUL;
    c1da:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
    c1de:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
    c1e2:	1a12      	subs	r2, r2, r0
    c1e4:	eb63 0301 	sbc.w	r3, r3, r1
    c1e8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    c1ec:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
    c1f0:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
        frame->reception_timestamp = ccp->local_epoch;
    c1f4:	6232      	str	r2, [r6, #32]
    c1f6:	6273      	str	r3, [r6, #36]	; 0x24
        ccp->os_epoch -= dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs((repeat_dly >> 16)));
    c1f8:	0c00      	lsrs	r0, r0, #16
    c1fa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
    c1fe:	0c09      	lsrs	r1, r1, #16
    c200:	f015 f8a0 	bl	21344 <__aeabi_ul2d>
    c204:	a37e      	add	r3, pc, #504	; (adr r3, c400 <rx_complete_cb+0x490>)
    c206:	e9d3 2300 	ldrd	r2, r3, [r3]
    c20a:	f015 f8d1 	bl	213b0 <__aeabi_dmul>
    c20e:	4680      	mov	r8, r0
    c210:	4689      	mov	r9, r1
    c212:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
    c216:	f015 f851 	bl	212bc <__aeabi_ui2d>
    c21a:	4642      	mov	r2, r8
    c21c:	464b      	mov	r3, r9
    c21e:	f014 ff0f 	bl	21040 <__aeabi_dsub>
    c222:	f015 fb9d 	bl	21960 <__aeabi_d2uiz>
    c226:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
        frame->carrier_integrator = 0;
    c22a:	f886 7028 	strb.w	r7, [r6, #40]	; 0x28
    c22e:	f886 7029 	strb.w	r7, [r6, #41]	; 0x29
    c232:	f886 702a 	strb.w	r7, [r6, #42]	; 0x2a
    c236:	f886 702b 	strb.w	r7, [r6, #43]	; 0x2b
        frame->rxttcko = 0;
    c23a:	f886 702c 	strb.w	r7, [r6, #44]	; 0x2c
    c23e:	f886 702d 	strb.w	r7, [r6, #45]	; 0x2d
    c242:	f886 702e 	strb.w	r7, [r6, #46]	; 0x2e
    c246:	f886 702f 	strb.w	r7, [r6, #47]	; 0x2f
    if (ccp->config.role == CCP_ROLE_RELAY && ccp->status.valid && frame->rpt_count < frame->rpt_max) {
    c24a:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
    c24e:	4b6a      	ldr	r3, [pc, #424]	; (c3f8 <rx_complete_cb+0x488>)
    c250:	4013      	ands	r3, r2
    c252:	f1b3 1f04 	cmp.w	r3, #262148	; 0x40004
    c256:	d02f      	beq.n	c2b8 <rx_complete_cb+0x348>
    if(!(SLIST_EMPTY(&inst->interface_cbs))) {
    c258:	f8d5 6530 	ldr.w	r6, [r5, #1328]	; 0x530
    c25c:	2e00      	cmp	r6, #0
    c25e:	f040 80b0 	bne.w	c3c2 <rx_complete_cb+0x452>
    if (ccp->config.postprocess && ccp->status.valid) {
    c262:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
    c266:	4b65      	ldr	r3, [pc, #404]	; (c3fc <rx_complete_cb+0x48c>)
    c268:	4393      	bics	r3, r2
    c26a:	f000 80b4 	beq.w	c3d6 <rx_complete_cb+0x466>
    c26e:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    c272:	f7fd fd97 	bl	9da4 <os_sem_release>
    return false;
    c276:	2000      	movs	r0, #0
    c278:	e0b5      	b.n	c3e6 <rx_complete_cb+0x476>
        if(ccp->status.valid_count < MYNEWT_VAL(UWB_CCP_VALID_THRESHOLD)-1){
    c27a:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    c27e:	f013 0f38 	tst.w	r3, #56	; 0x38
    c282:	d106      	bne.n	c292 <rx_complete_cb+0x322>
            ccp->status.valid_count++;
    c284:	f3c3 02c2 	ubfx	r2, r3, #3, #3
    c288:	3201      	adds	r2, #1
    c28a:	f362 03c5 	bfi	r3, r2, #3, #3
    c28e:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
        ccp->status.valid |= (ccp->status.valid_count == MYNEWT_VAL(UWB_CCP_VALID_THRESHOLD)-1);
    c292:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    c296:	f3c3 0280 	ubfx	r2, r3, #2, #1
    c29a:	f003 0138 	and.w	r1, r3, #56	; 0x38
    c29e:	2908      	cmp	r1, #8
    c2a0:	bf08      	it	eq
    c2a2:	f042 0201 	orreq.w	r2, r2, #1
    c2a6:	f362 0382 	bfi	r3, r2, #2, #1
    c2aa:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
    c2ae:	e729      	b.n	c104 <rx_complete_cb+0x194>
        frame->rxttcko = inst->rxttcko;
    c2b0:	f8d5 34f4 	ldr.w	r3, [r5, #1268]	; 0x4f4
    c2b4:	62f3      	str	r3, [r6, #44]	; 0x2c
    c2b6:	e751      	b.n	c15c <rx_complete_cb+0x1ec>
    if (ccp->config.role == CCP_ROLE_RELAY && ccp->status.valid && frame->rpt_count < frame->rpt_max) {
    c2b8:	f896 e01c 	ldrb.w	lr, [r6, #28]
    c2bc:	7f73      	ldrb	r3, [r6, #29]
    c2be:	459e      	cmp	lr, r3
    c2c0:	d2ca      	bcs.n	c258 <rx_complete_cb+0x2e8>
        memcpy(tx_frame.array, frame->array, sizeof(uwb_ccp_frame_t));
    c2c2:	4637      	mov	r7, r6
    c2c4:	f10d 0808 	add.w	r8, sp, #8
    c2c8:	f106 0930 	add.w	r9, r6, #48	; 0x30
    c2cc:	46c4      	mov	ip, r8
    c2ce:	6838      	ldr	r0, [r7, #0]
    c2d0:	6879      	ldr	r1, [r7, #4]
    c2d2:	68ba      	ldr	r2, [r7, #8]
    c2d4:	68fb      	ldr	r3, [r7, #12]
    c2d6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    c2da:	3710      	adds	r7, #16
    c2dc:	46e0      	mov	r8, ip
    c2de:	454f      	cmp	r7, r9
    c2e0:	d1f4      	bne.n	c2cc <rx_complete_cb+0x35c>
        tx_frame.short_address = inst->my_short_address;
    c2e2:	f8b5 34b6 	ldrh.w	r3, [r5, #1206]	; 0x4b6
    c2e6:	f8ad 3012 	strh.w	r3, [sp, #18]
        tx_frame.rpt_count++;
    c2ea:	f10e 0301 	add.w	r3, lr, #1
    c2ee:	b2db      	uxtb	r3, r3
    c2f0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        uint64_t tx_timestamp = frame->reception_timestamp;
    c2f4:	6a31      	ldr	r1, [r6, #32]
    c2f6:	6a70      	ldr	r0, [r6, #36]	; 0x24
        tx_timestamp += tx_frame.rpt_count*((uint64_t)ccp->config.tx_holdoff_dly<<16);
    c2f8:	f04f 0800 	mov.w	r8, #0
    c2fc:	f8b4 20cc 	ldrh.w	r2, [r4, #204]	; 0xcc
    c300:	0412      	lsls	r2, r2, #16
    c302:	fba3 3202 	umull	r3, r2, r3, r2
    c306:	185b      	adds	r3, r3, r1
    c308:	eb42 0000 	adc.w	r0, r2, r0
        tx_timestamp += (inst->slot_id%4)*(((uint64_t)ccp->blink_frame_duration)<<16);
    c30c:	f8b5 24c2 	ldrh.w	r2, [r5, #1218]	; 0x4c2
    c310:	f002 0203 	and.w	r2, r2, #3
    c314:	f8b4 117e 	ldrh.w	r1, [r4, #382]	; 0x17e
    c318:	0409      	lsls	r1, r1, #16
    c31a:	fba2 2901 	umull	r2, r9, r2, r1
    c31e:	18d3      	adds	r3, r2, r3
    c320:	eb49 0900 	adc.w	r9, r9, r0
        tx_timestamp &= 0x0FFFFFFFE00UL;
    c324:	f423 77ff 	bic.w	r7, r3, #510	; 0x1fe
    c328:	f027 0701 	bic.w	r7, r7, #1
    c32c:	f009 09ff 	and.w	r9, r9, #255	; 0xff
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
    c330:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    c332:	6b59      	ldr	r1, [r3, #52]	; 0x34
    c334:	463a      	mov	r2, r7
    c336:	464b      	mov	r3, r9
    c338:	4628      	mov	r0, r5
    c33a:	4788      	blx	r1
        tx_timestamp += inst->tx_antenna_delay;
    c33c:	f8b5 34ce 	ldrh.w	r3, [r5, #1230]	; 0x4ce
    c340:	19df      	adds	r7, r3, r7
    c342:	f149 0900 	adc.w	r9, r9, #0
        uint64_t tx_delay = (tx_timestamp - frame->reception_timestamp);
    c346:	6a32      	ldr	r2, [r6, #32]
    c348:	6a73      	ldr	r3, [r6, #36]	; 0x24
    c34a:	1aba      	subs	r2, r7, r2
        tx_delay = uwb_ccp_skew_compensation_ui64(ccp, tx_delay);
    c34c:	eb69 0303 	sbc.w	r3, r9, r3
    c350:	4620      	mov	r0, r4
    c352:	f7ff fdf1 	bl	bf38 <uwb_ccp_skew_compensation_ui64>
        tx_frame.transmission_timestamp.timestamp += tx_delay;
    c356:	9b07      	ldr	r3, [sp, #28]
    c358:	181b      	adds	r3, r3, r0
    c35a:	9a08      	ldr	r2, [sp, #32]
    c35c:	eb41 0202 	adc.w	r2, r1, r2
    c360:	9307      	str	r3, [sp, #28]
    c362:	9208      	str	r2, [sp, #32]
        tx_frame.transmission_interval = frame->transmission_interval - tx_delay;
    c364:	68f3      	ldr	r3, [r6, #12]
    c366:	7c32      	ldrb	r2, [r6, #16]
    c368:	1a1b      	subs	r3, r3, r0
    c36a:	eb62 0101 	sbc.w	r1, r2, r1
    c36e:	9305      	str	r3, [sp, #20]
    c370:	f88d 1018 	strb.w	r1, [sp, #24]
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
    c374:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    c376:	6c5e      	ldr	r6, [r3, #68]	; 0x44
    c378:	2320      	movs	r3, #32
    c37a:	4642      	mov	r2, r8
    c37c:	a902      	add	r1, sp, #8
    c37e:	4628      	mov	r0, r5
    c380:	47b0      	blx	r6
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
    c382:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    c384:	6c9e      	ldr	r6, [r3, #72]	; 0x48
    c386:	4643      	mov	r3, r8
    c388:	4642      	mov	r2, r8
    c38a:	2120      	movs	r1, #32
    c38c:	4628      	mov	r0, r5
    c38e:	47b0      	blx	r6
    return (dev->uw_funcs->uf_start_tx(dev));
    c390:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    c392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    c394:	4628      	mov	r0, r5
    c396:	4798      	blx	r3
        ccp->status.start_tx_error = uwb_start_tx(inst).start_tx_error;
    c398:	f3c0 0380 	ubfx	r3, r0, #2, #1
    c39c:	f894 20c8 	ldrb.w	r2, [r4, #200]	; 0xc8
    c3a0:	f363 1286 	bfi	r2, r3, #6, #1
    c3a4:	f884 20c8 	strb.w	r2, [r4, #200]	; 0xc8
        if (ccp->status.start_tx_error){
    c3a8:	b2d3      	uxtb	r3, r2
    c3aa:	f013 0f40 	tst.w	r3, #64	; 0x40
    c3ae:	d003      	beq.n	c3b8 <rx_complete_cb+0x448>
            CCP_STATS_INC(tx_relay_error);
    c3b0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    c3b2:	3301      	adds	r3, #1
    c3b4:	64a3      	str	r3, [r4, #72]	; 0x48
    c3b6:	e74f      	b.n	c258 <rx_complete_cb+0x2e8>
            CCP_STATS_INC(tx_relay_ok);
    c3b8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    c3ba:	3301      	adds	r3, #1
    c3bc:	64e3      	str	r3, [r4, #76]	; 0x4c
    c3be:	e74b      	b.n	c258 <rx_complete_cb+0x2e8>
        SLIST_FOREACH(lcbs, &inst->interface_cbs, next) {
    c3c0:	6bb6      	ldr	r6, [r6, #56]	; 0x38
    c3c2:	2e00      	cmp	r6, #0
    c3c4:	f43f af4d 	beq.w	c262 <rx_complete_cb+0x2f2>
            if (lcbs != NULL && lcbs->superframe_cb) {
    c3c8:	6b73      	ldr	r3, [r6, #52]	; 0x34
    c3ca:	2b00      	cmp	r3, #0
    c3cc:	d0f8      	beq.n	c3c0 <rx_complete_cb+0x450>
                if(lcbs->superframe_cb((struct uwb_dev*)inst, lcbs)) continue;
    c3ce:	4631      	mov	r1, r6
    c3d0:	4628      	mov	r0, r5
    c3d2:	4798      	blx	r3
    c3d4:	e7f4      	b.n	c3c0 <rx_complete_cb+0x450>
    return (struct dpl_eventq *) os_eventq_dflt_get();
    c3d6:	f7fd f9a7 	bl	9728 <os_eventq_dflt_get>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    c3da:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
    c3de:	f7fd f8f5 	bl	95cc <os_eventq_put>
}
    c3e2:	e744      	b.n	c26e <rx_complete_cb+0x2fe>
        return true;
    c3e4:	2001      	movs	r0, #1
}
    c3e6:	b00f      	add	sp, #60	; 0x3c
    c3e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return false;
    c3ec:	2000      	movs	r0, #0
    c3ee:	e7fa      	b.n	c3e6 <rx_complete_cb+0x476>
        return true;
    c3f0:	2001      	movs	r0, #1
    c3f2:	e7f8      	b.n	c3e6 <rx_complete_cb+0x476>
    c3f4:	f3af 8000 	nop.w
    c3f8:	001e0004 	.word	0x001e0004
    c3fc:	00010004 	.word	0x00010004
    c400:	90690691 	.word	0x90690691
    c404:	3ff06906 	.word	0x3ff06906

0000c408 <uwb_ccp_pkg_init>:
 *
 * @return void
 */
void
uwb_ccp_pkg_init(void)
{
    c408:	b510      	push	{r4, lr}
    int i;
    struct uwb_dev *udev;
    struct uwb_ccp_instance * ccp __attribute__((unused));
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    printf("{\"utime\": %"PRIu32",\"msg\": \"uwb_ccp_pkg_init\"}\n",
    c40a:	f001 fffe 	bl	e40a <dpl_cputime_get32>
    c40e:	4601      	mov	r1, r0
    c410:	4808      	ldr	r0, [pc, #32]	; (c434 <uwb_ccp_pkg_init+0x2c>)
    c412:	f001 ff75 	bl	e300 <printf>
           dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
#endif

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
    c416:	2400      	movs	r4, #0
    c418:	e000      	b.n	c41c <uwb_ccp_pkg_init+0x14>
    c41a:	3401      	adds	r4, #1
    c41c:	2c02      	cmp	r4, #2
    c41e:	dc08      	bgt.n	c432 <uwb_ccp_pkg_init+0x2a>
        udev = uwb_dev_idx_lookup(i);
    c420:	4620      	mov	r0, r4
    c422:	f7fc faf7 	bl	8a14 <uwb_dev_idx_lookup>
        if (!udev) {
    c426:	2800      	cmp	r0, #0
    c428:	d0f7      	beq.n	c41a <uwb_ccp_pkg_init+0x12>
            continue;
        }
        ccp = uwb_ccp_init(udev, 2);
    c42a:	2102      	movs	r1, #2
    c42c:	f7ff fbb4 	bl	bb98 <uwb_ccp_init>
    c430:	e7f3      	b.n	c41a <uwb_ccp_pkg_init+0x12>
        pr_info("uwbccp: To start service: echo 1 > /sys/kernel/uwbcore/uwbccp%d/role; echo 1 > /sys/kernel/uwbcore/uwbccp%d/enable; cat /dev/uwbccp%d\n",
                udev->idx, udev->idx, udev->idx);
#endif  /* __KERNEL__ */
    }

}
    c432:	bd10      	pop	{r4, pc}
    c434:	0002306c 	.word	0x0002306c

0000c438 <uwb_ccp_pkg_down>:
 *
 * @return void
 */
int
uwb_ccp_pkg_down(int reason)
{
    c438:	b538      	push	{r3, r4, r5, lr}
    int i;
    struct uwb_dev *udev;
    struct uwb_ccp_instance * ccp;

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
    c43a:	2400      	movs	r4, #0
    c43c:	e003      	b.n	c446 <uwb_ccp_pkg_down+0xe>
        }
#if __KERNEL__
        ccp_chrdev_destroy(udev->idx);
        ccp_sysfs_deinit(udev->idx);
#endif
        uwb_ccp_free(ccp);
    c43e:	4628      	mov	r0, r5
    c440:	f7ff fc9c 	bl	bd7c <uwb_ccp_free>
    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
    c444:	3401      	adds	r4, #1
    c446:	2c02      	cmp	r4, #2
    c448:	dc12      	bgt.n	c470 <uwb_ccp_pkg_down+0x38>
        udev = uwb_dev_idx_lookup(i);
    c44a:	4620      	mov	r0, r4
    c44c:	f7fc fae2 	bl	8a14 <uwb_dev_idx_lookup>
        if (!udev) {
    c450:	2800      	cmp	r0, #0
    c452:	d0f7      	beq.n	c444 <uwb_ccp_pkg_down+0xc>
        ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_CCP);
    c454:	2101      	movs	r1, #1
    c456:	f7fc fb62 	bl	8b1e <uwb_mac_find_cb_inst_ptr>
        if (!ccp) {
    c45a:	4605      	mov	r5, r0
    c45c:	2800      	cmp	r0, #0
    c45e:	d0f1      	beq.n	c444 <uwb_ccp_pkg_down+0xc>
        if (ccp->status.enabled) {
    c460:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
    c464:	f013 0f10 	tst.w	r3, #16
    c468:	d0e9      	beq.n	c43e <uwb_ccp_pkg_down+0x6>
            uwb_ccp_stop(ccp);
    c46a:	f7ff fd3a 	bl	bee2 <uwb_ccp_stop>
    c46e:	e7e6      	b.n	c43e <uwb_ccp_pkg_down+0x6>
    }

    return 0;
}
    c470:	2000      	movs	r0, #0
    c472:	bd38      	pop	{r3, r4, r5, pc}

0000c474 <reset_cb>:
 *
 * @return true on sucess
 */
static bool
reset_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
    c474:	b510      	push	{r4, lr}
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
    c476:	684c      	ldr	r4, [r1, #4]
    c478:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
    if(dpl_sem_get_count(&rng->sem) == 0){
    c47c:	b10b      	cbz	r3, c482 <reset_cb+0xe>
        rng->status.rx_ack_expected = 0;
        rng->status.tx_ack_expected = 0;
        return true;
    }
    else
        return false;
    c47e:	2000      	movs	r0, #0
}
    c480:	bd10      	pop	{r4, pc}
    return (dpl_error_t)os_sem_release(&sem->sem);
    c482:	f104 0050 	add.w	r0, r4, #80	; 0x50
    c486:	f7fd fc8d 	bl	9da4 <os_sem_release>
        assert(err == DPL_OK);
    c48a:	b978      	cbnz	r0, c4ac <reset_cb+0x38>
        RNG_STATS_INC(reset);
    c48c:	6c63      	ldr	r3, [r4, #68]	; 0x44
    c48e:	3301      	adds	r3, #1
    c490:	6463      	str	r3, [r4, #68]	; 0x44
        rng->status.rx_ack_expected = 0;
    c492:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
    c496:	f36f 1345 	bfc	r3, #5, #1
    c49a:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        rng->status.tx_ack_expected = 0;
    c49e:	b2db      	uxtb	r3, r3
    c4a0:	f36f 1304 	bfc	r3, #4, #1
    c4a4:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        return true;
    c4a8:	2001      	movs	r0, #1
    c4aa:	e7e9      	b.n	c480 <reset_cb+0xc>
        assert(err == DPL_OK);
    c4ac:	2300      	movs	r3, #0
    c4ae:	461a      	mov	r2, r3
    c4b0:	4619      	mov	r1, r3
    c4b2:	4618      	mov	r0, r3
    c4b4:	f7fc fd56 	bl	8f64 <__assert_func>

0000c4b8 <rx_timeout_cb>:
{
    c4b8:	b510      	push	{r4, lr}
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
    c4ba:	684c      	ldr	r4, [r1, #4]
    c4bc:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
    if(dpl_sem_get_count(&rng->sem) == 1)
    c4c0:	2b01      	cmp	r3, #1
    c4c2:	d01a      	beq.n	c4fa <rx_timeout_cb+0x42>
    if(dpl_sem_get_count(&rng->sem) == 0){
    c4c4:	b10b      	cbz	r3, c4ca <rx_timeout_cb+0x12>
    return false;
    c4c6:	2000      	movs	r0, #0
}
    c4c8:	bd10      	pop	{r4, pc}
    c4ca:	f104 0050 	add.w	r0, r4, #80	; 0x50
    c4ce:	f7fd fc69 	bl	9da4 <os_sem_release>
        assert(err == DPL_OK);
    c4d2:	b960      	cbnz	r0, c4ee <rx_timeout_cb+0x36>
        RNG_STATS_INC(rx_timeout);
    c4d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    c4d6:	3301      	adds	r3, #1
    c4d8:	63e3      	str	r3, [r4, #60]	; 0x3c
        switch(rng->code){
    c4da:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
    c4de:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
    c4e2:	2a18      	cmp	r2, #24
    c4e4:	d80b      	bhi.n	c4fe <rx_timeout_cb+0x46>
                    RNG_STATS_INC(rx_timeout);
    c4e6:	3301      	adds	r3, #1
    c4e8:	63e3      	str	r3, [r4, #60]	; 0x3c
                    return true;
    c4ea:	2001      	movs	r0, #1
    c4ec:	e7ec      	b.n	c4c8 <rx_timeout_cb+0x10>
        assert(err == DPL_OK);
    c4ee:	2300      	movs	r3, #0
    c4f0:	461a      	mov	r2, r3
    c4f2:	4619      	mov	r1, r3
    c4f4:	4618      	mov	r0, r3
    c4f6:	f7fc fd35 	bl	8f64 <__assert_func>
        return false;
    c4fa:	2000      	movs	r0, #0
    c4fc:	e7e4      	b.n	c4c8 <rx_timeout_cb+0x10>
                return false;
    c4fe:	2000      	movs	r0, #0
    c500:	e7e2      	b.n	c4c8 <rx_timeout_cb+0x10>
	...

0000c504 <superframe_reset_cb>:
 *
 * @return true on sucess
 */
static bool
superframe_reset_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
    c504:	b510      	push	{r4, lr}
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
    c506:	684c      	ldr	r4, [r1, #4]
    c508:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
    if(dpl_sem_get_count(&rng->sem) == 0){
    c50c:	b10b      	cbz	r3, c512 <superframe_reset_cb+0xe>
               dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
        rng->status.rx_ack_expected = 0;
        rng->status.tx_ack_expected = 0;
    }
    return false;
}
    c50e:	2000      	movs	r0, #0
    c510:	bd10      	pop	{r4, pc}
    c512:	f104 0050 	add.w	r0, r4, #80	; 0x50
    c516:	f7fd fc45 	bl	9da4 <os_sem_release>
        assert(err == DPL_OK);
    c51a:	b9a0      	cbnz	r0, c546 <superframe_reset_cb+0x42>
        RNG_STATS_INC(superframe_reset);
    c51c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    c51e:	3301      	adds	r3, #1
    c520:	64a3      	str	r3, [r4, #72]	; 0x48
        printf("{\"utime\": %"PRIu32",\"msg\": \"superframe_reset\"}\n",
    c522:	f001 ff72 	bl	e40a <dpl_cputime_get32>
    c526:	4601      	mov	r1, r0
    c528:	480a      	ldr	r0, [pc, #40]	; (c554 <superframe_reset_cb+0x50>)
    c52a:	f001 fee9 	bl	e300 <printf>
        rng->status.rx_ack_expected = 0;
    c52e:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
    c532:	f36f 1345 	bfc	r3, #5, #1
    c536:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        rng->status.tx_ack_expected = 0;
    c53a:	b2db      	uxtb	r3, r3
    c53c:	f36f 1304 	bfc	r3, #4, #1
    c540:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
    c544:	e7e3      	b.n	c50e <superframe_reset_cb+0xa>
        assert(err == DPL_OK);
    c546:	2300      	movs	r3, #0
    c548:	461a      	mov	r2, r3
    c54a:	4619      	mov	r1, r3
    c54c:	4618      	mov	r0, r3
    c54e:	f7fc fd09 	bl	8f64 <__assert_func>
    c552:	bf00      	nop
    c554:	00023208 	.word	0x00023208

0000c558 <complete_ev_cb>:
 *
 * @return true on sucess
 */
static void
complete_ev_cb(struct dpl_event *ev)
{
    c558:	b508      	push	{r3, lr}
    c55a:	4603      	mov	r3, r0
    return ev->ev.ev_arg;
    c55c:	6880      	ldr	r0, [r0, #8]
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)dpl_event_get_arg(ev);
    assert(ev != NULL);
    c55e:	b11b      	cbz	r3, c568 <complete_ev_cb+0x10>
    assert(rng);
    c560:	b138      	cbz	r0, c572 <complete_ev_cb+0x1a>
    rng_encode(rng);
    c562:	f000 fd45 	bl	cff0 <rng_encode>
}
    c566:	bd08      	pop	{r3, pc}
    assert(ev != NULL);
    c568:	461a      	mov	r2, r3
    c56a:	4619      	mov	r1, r3
    c56c:	4618      	mov	r0, r3
    c56e:	f7fc fcf9 	bl	8f64 <__assert_func>
    assert(rng);
    c572:	2300      	movs	r3, #0
    c574:	461a      	mov	r2, r3
    c576:	4619      	mov	r1, r3
    c578:	4618      	mov	r0, r3
    c57a:	f7fc fcf3 	bl	8f64 <__assert_func>
	...

0000c580 <complete_cb>:
 *
 * @return true on sucess
 */
static bool
complete_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
    c580:	b570      	push	{r4, r5, r6, lr}
    c582:	4604      	mov	r4, r0
    twr_frame_t * frame;
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
    c584:	684d      	ldr	r5, [r1, #4]
    RNG_STATS_INC(complete_cb);
    c586:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    c588:	3301      	adds	r3, #1
    c58a:	642b      	str	r3, [r5, #64]	; 0x40
    if (inst->fctrl != FCNTL_IEEE_RANGE_16 &&
    c58c:	f8b0 34e0 	ldrh.w	r3, [r0, #1248]	; 0x4e0
    c590:	f648 0241 	movw	r2, #34881	; 0x8841
    c594:	4293      	cmp	r3, r2
    c596:	d004      	beq.n	c5a2 <complete_cb+0x22>
    c598:	f648 0261 	movw	r2, #34913	; 0x8861
    c59c:	4293      	cmp	r3, r2
    c59e:	f040 8082 	bne.w	c6a6 <complete_cb+0x126>
        inst->fctrl != (FCNTL_IEEE_RANGE_16|UWB_FCTRL_ACK_REQUESTED))
        return false;

    /* Calculate Local results and diagnostics.
     * XXX TODO: Generalise antenna distance */
    rng->idx_current = (rng->idx)%rng->nframes;
    c5a2:	f8b5 3076 	ldrh.w	r3, [r5, #118]	; 0x76
    c5a6:	f8b5 207a 	ldrh.w	r2, [r5, #122]	; 0x7a
    c5aa:	fbb3 f1f2 	udiv	r1, r3, r2
    c5ae:	fb02 3311 	mls	r3, r2, r1, r3
    c5b2:	b29b      	uxth	r3, r3
    c5b4:	f8a5 3078 	strh.w	r3, [r5, #120]	; 0x78
    frame = rng->frames[rng->idx_current];
    c5b8:	3326      	adds	r3, #38	; 0x26
    c5ba:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    c5be:	685e      	ldr	r6, [r3, #4]
    if (inst->capabilities.single_receiver_pdoa) {
    c5c0:	f894 34b2 	ldrb.w	r3, [r4, #1202]	; 0x4b2
    c5c4:	f013 0f02 	tst.w	r3, #2
    c5c8:	d01b      	beq.n	c602 <complete_cb+0x82>
 * @return pdoa (radians) on success
 */
UWB_API_IMPL_PREFIX dpl_float32_t
uwb_calc_pdoa(struct uwb_dev * dev, struct uwb_dev_rxdiag * diag)
{
    return (dev->uw_funcs->uf_calc_pdoa(dev, diag));
    c5ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
    c5cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    c5d0:	f8d4 14f8 	ldr.w	r1, [r4, #1272]	; 0x4f8
    c5d4:	4620      	mov	r0, r4
    c5d6:	4798      	blx	r3
        dpl_float32_t tmp_pdoa = uwb_calc_pdoa(inst, inst->rxdiag);
        if (!DPL_FLOAT32_ISNAN(tmp_pdoa)) {
    c5d8:	eeb4 0a40 	vcmp.f32	s0, s0
    c5dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c5e0:	d60f      	bvs.n	c602 <complete_cb+0x82>
            frame->local.pdoa = tmp_pdoa;
    c5e2:	ed86 0a36 	vstr	s0, [r6, #216]	; 0xd8
            frame->local.spherical.azimuth = DPL_FLOAT64_FROM_F32(
    c5e6:	f504 639a 	add.w	r3, r4, #1232	; 0x4d0
    c5ea:	edd3 0a00 	vldr	s1, [r3]
    c5ee:	f894 050c 	ldrb.w	r0, [r4, #1292]	; 0x50c
    c5f2:	f7fc fb09 	bl	8c08 <uwb_calc_aoa>
    c5f6:	ee10 0a10 	vmov	r0, s0
    c5fa:	f014 fe81 	bl	21300 <__aeabi_f2d>
    c5fe:	e9c6 0124 	strd	r0, r1, [r6, #144]	; 0x90
                uwb_calc_aoa(frame->local.pdoa, inst->config.channel, inst->rx_ant_separation)
                );
        }
    }

    frame->local.vrssi[0] = DPL_FLOAT32_NAN();
    c602:	4b2a      	ldr	r3, [pc, #168]	; (c6ac <complete_cb+0x12c>)
    c604:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
    return (dev->uw_funcs->uf_calc_rssi(dev, diag));
    c608:	6a63      	ldr	r3, [r4, #36]	; 0x24
    c60a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    c60e:	f8d4 14f8 	ldr.w	r1, [r4, #1272]	; 0x4f8
    c612:	4620      	mov	r0, r4
    c614:	4798      	blx	r3
    frame->local.rssi = uwb_calc_rssi(inst, inst->rxdiag);
    c616:	ed86 0a34 	vstr	s0, [r6, #208]	; 0xd0
    return (dev->uw_funcs->uf_calc_fppl(dev, diag));
    c61a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    c61c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
    c620:	f8d4 14f8 	ldr.w	r1, [r4, #1272]	; 0x4f8
    c624:	4620      	mov	r0, r4
    c626:	4798      	blx	r3
    frame->local.fppl = uwb_calc_fppl(inst, inst->rxdiag);
    c628:	ed86 0a35 	vstr	s0, [r6, #212]	; 0xd4

    if (inst->capabilities.sts) {
    c62c:	f894 34b2 	ldrb.w	r3, [r4, #1202]	; 0x4b2
    c630:	f013 0f01 	tst.w	r3, #1
    c634:	d031      	beq.n	c69a <complete_cb+0x11a>
        frame->local.flags.has_sts = inst->config.rx.stsMode != DWT_STS_MODE_OFF;
    c636:	f894 3518 	ldrb.w	r3, [r4, #1304]	; 0x518
    c63a:	3b00      	subs	r3, #0
    c63c:	bf18      	it	ne
    c63e:	2301      	movne	r3, #1
    c640:	f896 20dc 	ldrb.w	r2, [r6, #220]	; 0xdc
    c644:	f363 0200 	bfi	r2, r3, #0, #1
    c648:	f886 20dc 	strb.w	r2, [r6, #220]	; 0xdc
        frame->local.flags.has_valid_sts = !(inst->status.sts_ts_error || inst->status.sts_pream_error);
    c64c:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
    c650:	f013 0f30 	tst.w	r3, #48	; 0x30
    c654:	bf0c      	ite	eq
    c656:	2201      	moveq	r2, #1
    c658:	2200      	movne	r2, #0
    c65a:	f896 30dc 	ldrb.w	r3, [r6, #220]	; 0xdc
    c65e:	f362 0341 	bfi	r3, r2, #1, #1
    c662:	f886 30dc 	strb.w	r3, [r6, #220]	; 0xdc
        frame->local.vrssi[0] = frame->local.rssi;
    c666:	f8d6 30d0 	ldr.w	r3, [r6, #208]	; 0xd0
    c66a:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
    return (dev->uw_funcs->uf_calc_seq_rssi(dev, diag, type));
    c66e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    c670:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
    c674:	f44f 7200 	mov.w	r2, #512	; 0x200
    c678:	f8d4 14f8 	ldr.w	r1, [r4, #1272]	; 0x4f8
    c67c:	4620      	mov	r0, r4
    c67e:	4798      	blx	r3
        frame->local.vrssi[1] = uwb_calc_seq_rssi(inst, inst->rxdiag, UWB_RXDIAG_STS);
    c680:	ed86 0a39 	vstr	s0, [r6, #228]	; 0xe4
    c684:	6a63      	ldr	r3, [r4, #36]	; 0x24
    c686:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
    c68a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    c68e:	f8d4 14f8 	ldr.w	r1, [r4, #1272]	; 0x4f8
    c692:	4620      	mov	r0, r4
    c694:	4798      	blx	r3
        frame->local.vrssi[2] = uwb_calc_seq_rssi(inst, inst->rxdiag, UWB_RXDIAG_STS2);
    c696:	ed86 0a3a 	vstr	s0, [r6, #232]	; 0xe8
    return (struct dpl_eventq *) os_eventq_dflt_get();
    c69a:	f7fd f845 	bl	9728 <os_eventq_dflt_get>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    c69e:	f105 0188 	add.w	r1, r5, #136	; 0x88
    c6a2:	f7fc ff93 	bl	95cc <os_eventq_put>
    }

    /* Postprocess in thread context */
    dpl_eventq_put(dpl_eventq_dflt_get(), &rng->complete_event);
    return false;
}
    c6a6:	2000      	movs	r0, #0
    c6a8:	bd70      	pop	{r4, r5, r6, pc}
    c6aa:	bf00      	nop
    c6ac:	7fc00000 	.word	0x7fc00000

0000c6b0 <uwb_rng_free>:
{
    c6b0:	b508      	push	{r3, lr}
    assert(rng);
    c6b2:	b158      	cbz	r0, c6cc <uwb_rng_free+0x1c>
    if (rng->status.selfmalloc)
    c6b4:	f890 2072 	ldrb.w	r2, [r0, #114]	; 0x72
    c6b8:	f012 0f01 	tst.w	r2, #1
    c6bc:	d10c      	bne.n	c6d8 <uwb_rng_free+0x28>
        rng->status.initialized = 0;
    c6be:	f890 2072 	ldrb.w	r2, [r0, #114]	; 0x72
    c6c2:	f36f 0241 	bfc	r2, #1, #1
    c6c6:	f880 2072 	strb.w	r2, [r0, #114]	; 0x72
}
    c6ca:	bd08      	pop	{r3, pc}
    assert(rng);
    c6cc:	2300      	movs	r3, #0
    c6ce:	461a      	mov	r2, r3
    c6d0:	4619      	mov	r1, r3
    c6d2:	4618      	mov	r0, r3
    c6d4:	f7fc fc46 	bl	8f64 <__assert_func>
        free(rng);
    c6d8:	f001 f9b8 	bl	da4c <free>
    c6dc:	e7f5      	b.n	c6ca <uwb_rng_free+0x1a>

0000c6de <uwb_rng_config>:
uwb_rng_config(struct uwb_rng_instance * rng, struct uwb_rng_config * config){
    c6de:	b508      	push	{r3, lr}
    assert(config);
    c6e0:	b171      	cbz	r1, c700 <uwb_rng_config+0x22>
    c6e2:	460b      	mov	r3, r1
    memcpy(&rng->config, config, sizeof(struct uwb_rng_config));
    c6e4:	f8d1 c000 	ldr.w	ip, [r1]
    c6e8:	6849      	ldr	r1, [r1, #4]
    c6ea:	689a      	ldr	r2, [r3, #8]
    c6ec:	68db      	ldr	r3, [r3, #12]
    c6ee:	f8c0 c060 	str.w	ip, [r0, #96]	; 0x60
    c6f2:	6641      	str	r1, [r0, #100]	; 0x64
    c6f4:	6682      	str	r2, [r0, #104]	; 0x68
    c6f6:	66c3      	str	r3, [r0, #108]	; 0x6c
    return rng->dev_inst->status;
    c6f8:	6803      	ldr	r3, [r0, #0]
}
    c6fa:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    c6fe:	bd08      	pop	{r3, pc}
    assert(config);
    c700:	2300      	movs	r3, #0
    c702:	461a      	mov	r2, r3
    c704:	4619      	mov	r1, r3
    c706:	4618      	mov	r0, r3
    c708:	f7fc fc2c 	bl	8f64 <__assert_func>

0000c70c <uwb_rng_init>:
{
    c70c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c70e:	b083      	sub	sp, #12
    assert(dev);
    c710:	2800      	cmp	r0, #0
    c712:	d03d      	beq.n	c790 <uwb_rng_init+0x84>
    c714:	460d      	mov	r5, r1
    c716:	4617      	mov	r7, r2
    c718:	4606      	mov	r6, r0
    rng = (struct uwb_rng_instance*)uwb_mac_find_cb_inst_ptr(dev, UWBEXT_RNG);
    c71a:	2104      	movs	r1, #4
    c71c:	f7fc f9ff 	bl	8b1e <uwb_mac_find_cb_inst_ptr>
    if (rng == NULL ) {
    c720:	4604      	mov	r4, r0
    c722:	2800      	cmp	r0, #0
    c724:	d03a      	beq.n	c79c <uwb_rng_init+0x90>
    rng->dev_inst = dev;
    c726:	6026      	str	r6, [r4, #0]
    rng->ccp_inst = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(dev, UWBEXT_CCP);
    c728:	2101      	movs	r1, #1
    c72a:	4630      	mov	r0, r6
    c72c:	f7fc f9f7 	bl	8b1e <uwb_mac_find_cb_inst_ptr>
    c730:	6060      	str	r0, [r4, #4]
    assert(rng->ccp_inst);
    c732:	2800      	cmp	r0, #0
    c734:	d049      	beq.n	c7ca <uwb_rng_init+0xbe>
    return (dpl_error_t)os_sem_init(&sem->sem, tokens);
    c736:	2101      	movs	r1, #1
    c738:	f104 0050 	add.w	r0, r4, #80	; 0x50
    c73c:	f7fd fb2a 	bl	9d94 <os_sem_init>
    assert(err == DPL_OK);
    c740:	2800      	cmp	r0, #0
    c742:	d148      	bne.n	c7d6 <uwb_rng_init+0xca>
    if (config != NULL ) {
    c744:	b11d      	cbz	r5, c74e <uwb_rng_init+0x42>
        uwb_rng_config(rng, config);
    c746:	4629      	mov	r1, r5
    c748:	4620      	mov	r0, r4
    c74a:	f7ff ffc8 	bl	c6de <uwb_rng_config>
    rng->control = (uwb_rng_control_t){
    c74e:	2300      	movs	r3, #0
    c750:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
    rng->idx = 0xFFFF;
    c754:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c758:	f8a4 3076 	strh.w	r3, [r4, #118]	; 0x76
    rng->status.initialized = 1;
    c75c:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
    c760:	f043 0302 	orr.w	r3, r3, #2
    c764:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        int rc = stats_init(
    c768:	f104 0508 	add.w	r5, r4, #8
    c76c:	220c      	movs	r2, #12
    c76e:	9200      	str	r2, [sp, #0]
    c770:	4b1f      	ldr	r3, [pc, #124]	; (c7f0 <uwb_rng_init+0xe4>)
    c772:	2104      	movs	r1, #4
    c774:	4628      	mov	r0, r5
    c776:	f004 fc3b 	bl	10ff0 <stats_init>
    c77a:	4606      	mov	r6, r0
        rc |= stats_register("rng", STATS_HDR(rng->stat));
    c77c:	4629      	mov	r1, r5
    c77e:	481d      	ldr	r0, [pc, #116]	; (c7f4 <uwb_rng_init+0xe8>)
    c780:	f004 fcc0 	bl	11104 <stats_register>
        assert(rc == 0);
    c784:	ea56 0300 	orrs.w	r3, r6, r0
    c788:	d12b      	bne.n	c7e2 <uwb_rng_init+0xd6>
}
    c78a:	4620      	mov	r0, r4
    c78c:	b003      	add	sp, #12
    c78e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert(dev);
    c790:	2300      	movs	r3, #0
    c792:	461a      	mov	r2, r3
    c794:	4619      	mov	r1, r3
    c796:	4618      	mov	r0, r3
    c798:	f7fc fbe4 	bl	8f64 <__assert_func>
        rng = (struct uwb_rng_instance *) calloc(1, sizeof(*rng) + nframes * sizeof(twr_frame_t *));
    c79c:	f107 0128 	add.w	r1, r7, #40	; 0x28
    c7a0:	0089      	lsls	r1, r1, #2
    c7a2:	2001      	movs	r0, #1
    c7a4:	f001 f857 	bl	d856 <calloc>
        assert(rng);
    c7a8:	4604      	mov	r4, r0
    c7aa:	b140      	cbz	r0, c7be <uwb_rng_init+0xb2>
        rng->status.selfmalloc = 1;
    c7ac:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
    c7b0:	f043 0301 	orr.w	r3, r3, #1
    c7b4:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
        rng->nframes = nframes;
    c7b8:	f8a0 707a 	strh.w	r7, [r0, #122]	; 0x7a
    c7bc:	e7b3      	b.n	c726 <uwb_rng_init+0x1a>
        assert(rng);
    c7be:	2300      	movs	r3, #0
    c7c0:	461a      	mov	r2, r3
    c7c2:	4619      	mov	r1, r3
    c7c4:	4618      	mov	r0, r3
    c7c6:	f7fc fbcd 	bl	8f64 <__assert_func>
    assert(rng->ccp_inst);
    c7ca:	2300      	movs	r3, #0
    c7cc:	461a      	mov	r2, r3
    c7ce:	4619      	mov	r1, r3
    c7d0:	4618      	mov	r0, r3
    c7d2:	f7fc fbc7 	bl	8f64 <__assert_func>
    assert(err == DPL_OK);
    c7d6:	2300      	movs	r3, #0
    c7d8:	461a      	mov	r2, r3
    c7da:	4619      	mov	r1, r3
    c7dc:	4618      	mov	r0, r3
    c7de:	f7fc fbc1 	bl	8f64 <__assert_func>
        assert(rc == 0);
    c7e2:	2300      	movs	r3, #0
    c7e4:	461a      	mov	r2, r3
    c7e6:	4619      	mov	r1, r3
    c7e8:	4618      	mov	r0, r3
    c7ea:	f7fc fbbb 	bl	8f64 <__assert_func>
    c7ee:	bf00      	nop
    c7f0:	000232b0 	.word	0x000232b0
    c7f4:	00023234 	.word	0x00023234

0000c7f8 <uwb_rng_get_config>:
    if(!(SLIST_EMPTY(&rng->rng_configs))){
    c7f8:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    c7fc:	b12b      	cbz	r3, c80a <uwb_rng_get_config+0x12>
        SLIST_FOREACH(cfgs, &rng->rng_configs, next){
    c7fe:	b143      	cbz	r3, c812 <uwb_rng_get_config+0x1a>
            if (cfgs != NULL && cfgs->rng_code == code) {
    c800:	881a      	ldrh	r2, [r3, #0]
    c802:	428a      	cmp	r2, r1
    c804:	d003      	beq.n	c80e <uwb_rng_get_config+0x16>
        SLIST_FOREACH(cfgs, &rng->rng_configs, next){
    c806:	68db      	ldr	r3, [r3, #12]
    c808:	e7f9      	b.n	c7fe <uwb_rng_get_config+0x6>
    return &g_config;
    c80a:	4803      	ldr	r0, [pc, #12]	; (c818 <uwb_rng_get_config+0x20>)
    c80c:	4770      	bx	lr
                return cfgs->config;
    c80e:	6898      	ldr	r0, [r3, #8]
    c810:	4770      	bx	lr
    return &g_config;
    c812:	4801      	ldr	r0, [pc, #4]	; (c818 <uwb_rng_get_config+0x20>)
}
    c814:	4770      	bx	lr
    c816:	bf00      	nop
    c818:	2000059c 	.word	0x2000059c

0000c81c <uwb_rng_append_config>:
{
    c81c:	b508      	push	{r3, lr}
    assert(rng);
    c81e:	b120      	cbz	r0, c82a <uwb_rng_append_config+0xe>
    if(!(SLIST_EMPTY(&rng->rng_configs))) {
    c820:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    c824:	b17b      	cbz	r3, c846 <uwb_rng_append_config+0x2a>
        struct rng_config_list * prev_cfgs = NULL;
    c826:	2200      	movs	r2, #0
    c828:	e007      	b.n	c83a <uwb_rng_append_config+0x1e>
    assert(rng);
    c82a:	2300      	movs	r3, #0
    c82c:	461a      	mov	r2, r3
    c82e:	4619      	mov	r1, r3
    c830:	4618      	mov	r0, r3
    c832:	f7fc fb97 	bl	8f64 <__assert_func>
            prev_cfgs = cur_cfgs;
    c836:	461a      	mov	r2, r3
        SLIST_FOREACH(cur_cfgs, &rng->rng_configs, next){
    c838:	68db      	ldr	r3, [r3, #12]
    c83a:	2b00      	cmp	r3, #0
    c83c:	d1fb      	bne.n	c836 <uwb_rng_append_config+0x1a>
        SLIST_INSERT_AFTER(prev_cfgs, cfgs, next);
    c83e:	68d3      	ldr	r3, [r2, #12]
    c840:	60cb      	str	r3, [r1, #12]
    c842:	60d1      	str	r1, [r2, #12]
}
    c844:	bd08      	pop	{r3, pc}
        SLIST_INSERT_HEAD(&rng->rng_configs, cfgs, next);
    c846:	60cb      	str	r3, [r1, #12]
    c848:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
}
    c84c:	e7fa      	b.n	c844 <uwb_rng_append_config+0x28>

0000c84e <uwb_rng_remove_config>:
{
    c84e:	b508      	push	{r3, lr}
    assert(rng);
    c850:	b148      	cbz	r0, c866 <uwb_rng_remove_config+0x18>
    c852:	4684      	mov	ip, r0
    SLIST_FOREACH(cfgs, &rng->rng_configs, next){
    c854:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
    c858:	4603      	mov	r3, r0
    c85a:	b193      	cbz	r3, c882 <uwb_rng_remove_config+0x34>
        if(cfgs->rng_code == code){
    c85c:	881a      	ldrh	r2, [r3, #0]
    c85e:	428a      	cmp	r2, r1
    c860:	d007      	beq.n	c872 <uwb_rng_remove_config+0x24>
    SLIST_FOREACH(cfgs, &rng->rng_configs, next){
    c862:	68db      	ldr	r3, [r3, #12]
    c864:	e7f9      	b.n	c85a <uwb_rng_remove_config+0xc>
    assert(rng);
    c866:	2300      	movs	r3, #0
    c868:	461a      	mov	r2, r3
    c86a:	4619      	mov	r1, r3
    c86c:	4618      	mov	r0, r3
    c86e:	f7fc fb79 	bl	8f64 <__assert_func>
            SLIST_REMOVE(&rng->rng_configs, cfgs, rng_config_list, next);
    c872:	4283      	cmp	r3, r0
    c874:	d006      	beq.n	c884 <uwb_rng_remove_config+0x36>
    c876:	4602      	mov	r2, r0
    c878:	68c0      	ldr	r0, [r0, #12]
    c87a:	4298      	cmp	r0, r3
    c87c:	d1fb      	bne.n	c876 <uwb_rng_remove_config+0x28>
    c87e:	68c3      	ldr	r3, [r0, #12]
    c880:	60d3      	str	r3, [r2, #12]
}
    c882:	bd08      	pop	{r3, pc}
            SLIST_REMOVE(&rng->rng_configs, cfgs, rng_config_list, next);
    c884:	68c3      	ldr	r3, [r0, #12]
    c886:	f8cc 3098 	str.w	r3, [ip, #152]	; 0x98
    c88a:	e7fa      	b.n	c882 <uwb_rng_remove_config+0x34>
    c88c:	0000      	movs	r0, r0
	...

0000c890 <uwb_rng_calc_rel_tx>:
{
    c890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c894:	4605      	mov	r5, r0
    c896:	460c      	mov	r4, r1
    c898:	4690      	mov	r8, r2
    c89a:	9f06      	ldr	r7, [sp, #24]
    c89c:	9e07      	ldr	r6, [sp, #28]
    uint16_t data_duration = uwb_usecs_to_dwt_usecs(uwb_phy_data_duration(rng->dev_inst, rx_data_len));
    c89e:	6800      	ldr	r0, [r0, #0]
    return (dev->uw_funcs->uf_phy_data_duration(dev, nlen));
    c8a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
    c8a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    c8a6:	f8bd 1020 	ldrh.w	r1, [sp, #32]
    c8aa:	4798      	blx	r3
    c8ac:	f014 fd16 	bl	212dc <__aeabi_i2d>
    c8b0:	a315      	add	r3, pc, #84	; (adr r3, c908 <uwb_rng_calc_rel_tx+0x78>)
    c8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
    c8b6:	f014 fea5 	bl	21604 <__aeabi_ddiv>
    c8ba:	f015 f851 	bl	21960 <__aeabi_d2uiz>
    c8be:	b283      	uxth	r3, r0
    ret->response_tx_delay = ts + (((uint64_t) cfg->tx_holdoff_delay + rng->frame_shr_duration + data_duration) << 16);
    c8c0:	f8d8 1004 	ldr.w	r1, [r8, #4]
    c8c4:	2200      	movs	r2, #0
    c8c6:	f8b5 0074 	ldrh.w	r0, [r5, #116]	; 0x74
    c8ca:	1809      	adds	r1, r1, r0
    c8cc:	4152      	adcs	r2, r2
    c8ce:	185b      	adds	r3, r3, r1
    c8d0:	f142 0200 	adc.w	r2, r2, #0
    c8d4:	0412      	lsls	r2, r2, #16
    c8d6:	ea42 4213 	orr.w	r2, r2, r3, lsr #16
    c8da:	041b      	lsls	r3, r3, #16
    c8dc:	19db      	adds	r3, r3, r7
    c8de:	eb42 0206 	adc.w	r2, r2, r6
    c8e2:	6023      	str	r3, [r4, #0]
    c8e4:	6062      	str	r2, [r4, #4]
    ret->response_timestamp = (ret->response_tx_delay & 0xFFFFFFFE00UL) + rng->dev_inst->tx_antenna_delay;
    c8e6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    c8ea:	f023 0301 	bic.w	r3, r3, #1
    c8ee:	f002 02ff 	and.w	r2, r2, #255	; 0xff
    c8f2:	6829      	ldr	r1, [r5, #0]
    c8f4:	f8b1 14ce 	ldrh.w	r1, [r1, #1230]	; 0x4ce
    c8f8:	185b      	adds	r3, r3, r1
    c8fa:	f142 0200 	adc.w	r2, r2, #0
    c8fe:	60a3      	str	r3, [r4, #8]
    c900:	60e2      	str	r2, [r4, #12]
}
    c902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c906:	bf00      	nop
    c908:	90690691 	.word	0x90690691
    c90c:	3ff06906 	.word	0x3ff06906

0000c910 <uwb_rng_clear_twr_data>:
    s->spherical.array[0] = DPL_FLOAT64_NAN();
    c910:	2200      	movs	r2, #0
    c912:	4b07      	ldr	r3, [pc, #28]	; (c930 <uwb_rng_clear_twr_data+0x20>)
    c914:	e9c0 2300 	strd	r2, r3, [r0]
    s->spherical.array[1] = DPL_FLOAT64_NAN();
    c918:	e9c0 2302 	strd	r2, r3, [r0, #8]
    s->spherical.array[2] = DPL_FLOAT64_NAN();
    c91c:	e9c0 2304 	strd	r2, r3, [r0, #16]
    s->rssi = DPL_FLOAT32_NAN();
    c920:	4b04      	ldr	r3, [pc, #16]	; (c934 <uwb_rng_clear_twr_data+0x24>)
    c922:	6483      	str	r3, [r0, #72]	; 0x48
    s->fppl = DPL_FLOAT32_NAN();
    c924:	64c3      	str	r3, [r0, #76]	; 0x4c
    s->pdoa = DPL_FLOAT32_NAN();
    c926:	6503      	str	r3, [r0, #80]	; 0x50
    s->flags = (struct _rng_frame_flags){0};
    c928:	2300      	movs	r3, #0
    c92a:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
}
    c92e:	4770      	bx	lr
    c930:	7ff80000 	.word	0x7ff80000
    c934:	7fc00000 	.word	0x7fc00000

0000c938 <rx_complete_cb>:
{
    c938:	b570      	push	{r4, r5, r6, lr}
    c93a:	4604      	mov	r4, r0
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
    c93c:	684d      	ldr	r5, [r1, #4]
    if (inst->fctrl != FCNTL_IEEE_RANGE_16 &&
    c93e:	f8b0 34e0 	ldrh.w	r3, [r0, #1248]	; 0x4e0
    c942:	f648 0241 	movw	r2, #34881	; 0x8841
    c946:	4293      	cmp	r3, r2
    c948:	d012      	beq.n	c970 <rx_complete_cb+0x38>
    c94a:	f648 0261 	movw	r2, #34913	; 0x8861
    c94e:	4293      	cmp	r3, r2
    c950:	d00e      	beq.n	c970 <rx_complete_cb+0x38>
        inst->fctrl != (FCNTL_IEEE_RANGE_16|UWB_FCTRL_ACK_REQUESTED) &&
    c952:	2b02      	cmp	r3, #2
    c954:	d00c      	beq.n	c970 <rx_complete_cb+0x38>
    c956:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
        if(dpl_sem_get_count(&rng->sem) == 0) {
    c95a:	b10b      	cbz	r3, c960 <rx_complete_cb+0x28>
        return false;
    c95c:	2000      	movs	r0, #0
    c95e:	e01b      	b.n	c998 <rx_complete_cb+0x60>
            RNG_STATS_INC(rx_other_frame);
    c960:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    c962:	3301      	adds	r3, #1
    c964:	632b      	str	r3, [r5, #48]	; 0x30
    return (dpl_error_t)os_sem_release(&sem->sem);
    c966:	f105 0050 	add.w	r0, r5, #80	; 0x50
    c96a:	f7fd fa1b 	bl	9da4 <os_sem_release>
    c96e:	e7f5      	b.n	c95c <rx_complete_cb+0x24>
    c970:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
    if(dpl_sem_get_count(&rng->sem) == 1){
    c974:	2b01      	cmp	r3, #1
    c976:	d010      	beq.n	c99a <rx_complete_cb+0x62>
    if (inst->frame_len < sizeof(ieee_rng_request_frame_t))
    c978:	f8b4 34e2 	ldrh.w	r3, [r4, #1250]	; 0x4e2
    c97c:	2b0a      	cmp	r3, #10
    c97e:	d94e      	bls.n	ca1e <rx_complete_cb+0xe6>
    req_frame = (ieee_rng_request_frame_t * ) inst->rxbuf;
    c980:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
    rng->code = req_frame->code;
    c984:	f8b3 2009 	ldrh.w	r2, [r3, #9]
    c988:	b293      	uxth	r3, r2
    c98a:	f8a5 204c 	strh.w	r2, [r5, #76]	; 0x4c
    switch(rng->code) {
    c98e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
    c992:	2b19      	cmp	r3, #25
    c994:	d906      	bls.n	c9a4 <rx_complete_cb+0x6c>
            return false;
    c996:	2000      	movs	r0, #0
}
    c998:	bd70      	pop	{r4, r5, r6, pc}
        RNG_STATS_INC(rx_unsolicited);
    c99a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    c99c:	3301      	adds	r3, #1
    c99e:	62eb      	str	r3, [r5, #44]	; 0x2c
        return false;
    c9a0:	2000      	movs	r0, #0
    c9a2:	e7f9      	b.n	c998 <rx_complete_cb+0x60>
                twr_frame_t * frame = rng->frames[(rng->idx+1)%rng->nframes]; // speculative frame advance
    c9a4:	f8b5 3076 	ldrh.w	r3, [r5, #118]	; 0x76
    c9a8:	3301      	adds	r3, #1
    c9aa:	f8b5 207a 	ldrh.w	r2, [r5, #122]	; 0x7a
    c9ae:	fb93 f1f2 	sdiv	r1, r3, r2
    c9b2:	fb02 3311 	mls	r3, r2, r1, r3
    c9b6:	3326      	adds	r3, #38	; 0x26
    c9b8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    c9bc:	685e      	ldr	r6, [r3, #4]
                uwb_rng_clear_twr_data(&frame->remote);
    c9be:	f106 0020 	add.w	r0, r6, #32
    c9c2:	f7ff ffa5 	bl	c910 <uwb_rng_clear_twr_data>
                uwb_rng_clear_twr_data(&frame->local);
    c9c6:	f106 0088 	add.w	r0, r6, #136	; 0x88
    c9ca:	f7ff ffa1 	bl	c910 <uwb_rng_clear_twr_data>
                if (inst->frame_len <= sizeof(frame->array))
    c9ce:	f8b4 24e2 	ldrh.w	r2, [r4, #1250]	; 0x4e2
    c9d2:	2a88      	cmp	r2, #136	; 0x88
    c9d4:	d901      	bls.n	c9da <rx_complete_cb+0xa2>
    return false;
    c9d6:	2000      	movs	r0, #0
    c9d8:	e7de      	b.n	c998 <rx_complete_cb+0x60>
                    memcpy(frame->array, inst->rxbuf, inst->frame_len);
    c9da:	f8d4 14fc 	ldr.w	r1, [r4, #1276]	; 0x4fc
    c9de:	4630      	mov	r0, r6
    c9e0:	f001 f86e 	bl	dac0 <memcpy>
                if (inst->config.rx.frameFilter == 0 && frame->dst_address != inst->my_short_address){
    c9e4:	f8b4 351c 	ldrh.w	r3, [r4, #1308]	; 0x51c
    c9e8:	b97b      	cbnz	r3, ca0a <rx_complete_cb+0xd2>
    c9ea:	f8b6 2005 	ldrh.w	r2, [r6, #5]
    c9ee:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
    c9f2:	429a      	cmp	r2, r3
    c9f4:	d009      	beq.n	ca0a <rx_complete_cb+0xd2>
    c9f6:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
                    if(dpl_sem_get_count(&rng->sem) == 0){
    c9fa:	b10b      	cbz	r3, ca00 <rx_complete_cb+0xc8>
                    return true;
    c9fc:	2001      	movs	r0, #1
    c9fe:	e7cb      	b.n	c998 <rx_complete_cb+0x60>
    ca00:	f105 0050 	add.w	r0, r5, #80	; 0x50
    ca04:	f7fd f9ce 	bl	9da4 <os_sem_release>
    ca08:	e7f8      	b.n	c9fc <rx_complete_cb+0xc4>
                    RNG_STATS_INC(rx_complete);
    ca0a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    ca0c:	3301      	adds	r3, #1
    ca0e:	62ab      	str	r3, [r5, #40]	; 0x28
                    rng->idx++;     // confirmed frame advance
    ca10:	f8b5 3076 	ldrh.w	r3, [r5, #118]	; 0x76
    ca14:	3301      	adds	r3, #1
    ca16:	f8a5 3076 	strh.w	r3, [r5, #118]	; 0x76
                    return false;   // Allow sub extensions to handle event
    ca1a:	2000      	movs	r0, #0
    ca1c:	e7bc      	b.n	c998 <rx_complete_cb+0x60>
       return false;
    ca1e:	2000      	movs	r0, #0
    ca20:	e7ba      	b.n	c998 <rx_complete_cb+0x60>
    ca22:	0000      	movs	r0, r0
    ca24:	0000      	movs	r0, r0
	...

0000ca28 <uwb_rng_request>:
{
    ca28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ca2c:	4604      	mov	r4, r0
    ca2e:	460f      	mov	r7, r1
    ca30:	4616      	mov	r6, r2
    struct uwb_dev * inst = rng->dev_inst;
    ca32:	6805      	ldr	r5, [r0, #0]
    twr_frame_t * frame  = rng->frames[(rng->idx+1)%rng->nframes];
    ca34:	f8b0 3076 	ldrh.w	r3, [r0, #118]	; 0x76
    ca38:	3301      	adds	r3, #1
    ca3a:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
    ca3e:	fb93 f1f2 	sdiv	r1, r3, r2
    ca42:	fb02 3311 	mls	r3, r2, r1, r3
    ca46:	3326      	adds	r3, #38	; 0x26
    ca48:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ca4c:	f8d3 8004 	ldr.w	r8, [r3, #4]
    struct uwb_rng_config * config = uwb_rng_get_config(rng, code);
    ca50:	4631      	mov	r1, r6
    ca52:	f7ff fed1 	bl	c7f8 <uwb_rng_get_config>
    if (!config) {
    ca56:	b158      	cbz	r0, ca70 <uwb_rng_request+0x48>
    ca58:	4681      	mov	r9, r0
    RNG_STATS_INC(rng_request);
    ca5a:	69e3      	ldr	r3, [r4, #28]
    ca5c:	3301      	adds	r3, #1
    ca5e:	61e3      	str	r3, [r4, #28]
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    ca60:	f104 0a50 	add.w	sl, r4, #80	; 0x50
    ca64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ca68:	4650      	mov	r0, sl
    ca6a:	f7fd f9cd 	bl	9e08 <os_sem_pend>
    if (err != DPL_OK) {
    ca6e:	b118      	cbz	r0, ca78 <uwb_rng_request+0x50>
}
    ca70:	f8d5 0508 	ldr.w	r0, [r5, #1288]	; 0x508
    ca74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ca78:	f105 0b34 	add.w	fp, r5, #52	; 0x34
    ca7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ca80:	4658      	mov	r0, fp
    ca82:	f7fd f9c1 	bl	9e08 <os_sem_pend>
    if (err != DPL_OK) {
    ca86:	2800      	cmp	r0, #0
    ca88:	f040 80a9 	bne.w	cbde <uwb_rng_request+0x1b6>
    if (code == UWB_DATA_CODE_SS_TWR || code == UWB_DATA_CODE_SS_TWR_EXT)
    ca8c:	f5b6 7f88 	cmp.w	r6, #272	; 0x110
    ca90:	d008      	beq.n	caa4 <uwb_rng_request+0x7c>
    ca92:	f5b6 7f8a 	cmp.w	r6, #276	; 0x114
    ca96:	d005      	beq.n	caa4 <uwb_rng_request+0x7c>
        rng->seq_num+=2;
    ca98:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
    ca9c:	3302      	adds	r3, #2
    ca9e:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
    caa2:	e004      	b.n	caae <uwb_rng_request+0x86>
        rng->seq_num+=1;
    caa4:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
    caa8:	3301      	adds	r3, #1
    caaa:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
    frame->fctrl = FCNTL_IEEE_RANGE_16;
    caae:	f648 0241 	movw	r2, #34881	; 0x8841
    cab2:	f8a8 2000 	strh.w	r2, [r8]
    frame->fctrl |=  (config->fctrl_req_ack)? UWB_FCTRL_ACK_REQUESTED : 0;
    cab6:	f899 300e 	ldrb.w	r3, [r9, #14]
    caba:	011b      	lsls	r3, r3, #4
    cabc:	f003 0320 	and.w	r3, r3, #32
    cac0:	4313      	orrs	r3, r2
    cac2:	f8a8 3000 	strh.w	r3, [r8]
    frame->seq_num = rng->seq_num;
    cac6:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
    caca:	f888 3002 	strb.w	r3, [r8, #2]
    frame->code = code;
    cace:	f8a8 6009 	strh.w	r6, [r8, #9]
    frame->PANID = inst->pan_id;
    cad2:	f8b5 34c0 	ldrh.w	r3, [r5, #1216]	; 0x4c0
    cad6:	f8a8 3003 	strh.w	r3, [r8, #3]
    frame->src_address = inst->my_short_address;
    cada:	f8b5 34b6 	ldrh.w	r3, [r5, #1206]	; 0x4b6
    cade:	f8a8 3007 	strh.w	r3, [r8, #7]
    frame->dst_address = dst_address;
    cae2:	f8a8 7005 	strh.w	r7, [r8, #5]
    uwb_rng_clear_twr_data(&frame->remote);
    cae6:	f108 0020 	add.w	r0, r8, #32
    caea:	f7ff ff11 	bl	c910 <uwb_rng_clear_twr_data>
    uwb_rng_clear_twr_data(&frame->local);
    caee:	f108 0088 	add.w	r0, r8, #136	; 0x88
    caf2:	f7ff ff0d 	bl	c910 <uwb_rng_clear_twr_data>
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
    caf6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    caf8:	6c5f      	ldr	r7, [r3, #68]	; 0x44
    cafa:	230b      	movs	r3, #11
    cafc:	2200      	movs	r2, #0
    cafe:	4641      	mov	r1, r8
    cb00:	4628      	mov	r0, r5
    cb02:	47b8      	blx	r7
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
    cb04:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    cb06:	6c9f      	ldr	r7, [r3, #72]	; 0x48
    cb08:	2300      	movs	r3, #0
    cb0a:	461a      	mov	r2, r3
    cb0c:	210b      	movs	r1, #11
    cb0e:	4628      	mov	r0, r5
    cb10:	47b8      	blx	r7
    return (dev->uw_funcs->uf_set_wait4resp(dev, enable));
    cb12:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    cb14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    cb16:	2101      	movs	r1, #1
    cb18:	4628      	mov	r0, r5
    cb1a:	4798      	blx	r3
    return (dev->uw_funcs->uf_phy_data_duration(dev, nlen));
    cb1c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    cb1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    cb22:	2113      	movs	r1, #19
    cb24:	4628      	mov	r0, r5
    cb26:	4798      	blx	r3
    data_duration = uwb_usecs_to_dwt_usecs(uwb_phy_data_duration(inst, sizeof(ieee_rng_response_frame_t)));
    cb28:	f014 fbd8 	bl	212dc <__aeabi_i2d>
    cb2c:	a344      	add	r3, pc, #272	; (adr r3, cc40 <uwb_rng_request+0x218>)
    cb2e:	e9d3 2300 	ldrd	r2, r3, [r3]
    cb32:	f014 fd67 	bl	21604 <__aeabi_ddiv>
    cb36:	f014 ff13 	bl	21960 <__aeabi_d2uiz>
    cb3a:	fa1f f880 	uxth.w	r8, r0
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
    cb3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    cb40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    cb42:	2113      	movs	r1, #19
    cb44:	4628      	mov	r0, r5
    cb46:	4798      	blx	r3
    frame_duration = uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst, sizeof(ieee_rng_response_frame_t)));
    cb48:	f014 fbc8 	bl	212dc <__aeabi_i2d>
    cb4c:	a33c      	add	r3, pc, #240	; (adr r3, cc40 <uwb_rng_request+0x218>)
    cb4e:	e9d3 2300 	ldrd	r2, r3, [r3]
    cb52:	f014 fd57 	bl	21604 <__aeabi_ddiv>
    cb56:	f014 ff03 	bl	21960 <__aeabi_d2uiz>
    cb5a:	b287      	uxth	r7, r0
    rng->frame_shr_duration = frame_duration - data_duration;
    cb5c:	eba7 0808 	sub.w	r8, r7, r8
    cb60:	f8a4 8074 	strh.w	r8, [r4, #116]	; 0x74
    if (!config->fctrl_req_ack) {
    cb64:	f899 300e 	ldrb.w	r3, [r9, #14]
    cb68:	f013 0f02 	tst.w	r3, #2
    cb6c:	d140      	bne.n	cbf0 <uwb_rng_request+0x1c8>
        uwb_set_wait4resp_delay(inst, config->tx_holdoff_delay -
    cb6e:	f8d9 1004 	ldr.w	r1, [r9, #4]
                                inst->config.rx.timeToRxStable);
    cb72:	f895 251b 	ldrb.w	r2, [r5, #1307]	; 0x51b
    return (dev->uw_funcs->uf_set_wait4resp_delay(dev, delay));
    cb76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    cb78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    cb7a:	1a89      	subs	r1, r1, r2
    cb7c:	4628      	mov	r0, r5
    cb7e:	4798      	blx	r3
    return (dev->uw_funcs->uf_set_rxauto_disable(dev, disable));
    cb80:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    cb82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    cb84:	2101      	movs	r1, #1
    cb86:	4628      	mov	r0, r5
    cb88:	4798      	blx	r3
    if (code == UWB_DATA_CODE_SS_TWR_EXT) {
    cb8a:	f5b6 7f8a 	cmp.w	r6, #276	; 0x114
    cb8e:	d040      	beq.n	cc12 <uwb_rng_request+0x1ea>
    uwb_set_rx_timeout(inst, frame_duration + config->rx_timeout_delay +
    cb90:	f8b9 100c 	ldrh.w	r1, [r9, #12]
    cb94:	440f      	add	r7, r1
                       inst->config.rx.timeToRxStable);
    cb96:	f895 151b 	ldrb.w	r1, [r5, #1307]	; 0x51b
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
    cb9a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    cb9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    cb9e:	4439      	add	r1, r7
    cba0:	4628      	mov	r0, r5
    cba2:	4798      	blx	r3
    if (rng->control.delay_start_enabled)
    cba4:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
    cba8:	f013 0f01 	tst.w	r3, #1
    cbac:	d005      	beq.n	cbba <uwb_rng_request+0x192>
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
    cbae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    cbb0:	6b59      	ldr	r1, [r3, #52]	; 0x34
    cbb2:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
    cbb6:	4628      	mov	r0, r5
    cbb8:	4788      	blx	r1
    return (dpl_error_t)os_sem_release(&sem->sem);
    cbba:	4658      	mov	r0, fp
    cbbc:	f7fd f8f2 	bl	9da4 <os_sem_release>
    return (dev->uw_funcs->uf_start_tx(dev));
    cbc0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    cbc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    cbc4:	4628      	mov	r0, r5
    cbc6:	4798      	blx	r3
    if (uwb_start_tx(inst).start_tx_error) {
    cbc8:	f010 0f04 	tst.w	r0, #4
    cbcc:	d131      	bne.n	cc32 <uwb_rng_request+0x20a>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    cbce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    cbd2:	4650      	mov	r0, sl
    cbd4:	f7fd f918 	bl	9e08 <os_sem_pend>
    if (err != DPL_OK) {
    cbd8:	2800      	cmp	r0, #0
    cbda:	f47f af49 	bne.w	ca70 <uwb_rng_request+0x48>
    cbde:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
    if(dpl_sem_get_count(&rng->sem) == 0){
    cbe2:	2b00      	cmp	r3, #0
    cbe4:	f47f af44 	bne.w	ca70 <uwb_rng_request+0x48>
    return (dpl_error_t)os_sem_release(&sem->sem);
    cbe8:	4650      	mov	r0, sl
    cbea:	f7fd f8db 	bl	9da4 <os_sem_release>
early_exit:
    cbee:	e73f      	b.n	ca70 <uwb_rng_request+0x48>
    return (dev->uw_funcs->uf_set_wait4resp_delay(dev, delay));
    cbf0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    cbf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    cbf4:	2100      	movs	r1, #0
    cbf6:	4628      	mov	r0, r5
    cbf8:	4798      	blx	r3
        rng->status.rx_ack_expected = 1;
    cbfa:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
    cbfe:	f043 0320 	orr.w	r3, r3, #32
    cc02:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
    return (dev->uw_funcs->uf_set_rxauto_disable(dev, disable));
    cc06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    cc08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    cc0a:	2100      	movs	r1, #0
    cc0c:	4628      	mov	r0, r5
    cc0e:	4798      	blx	r3
    cc10:	e7bb      	b.n	cb8a <uwb_rng_request+0x162>
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
    cc12:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    cc14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    cc16:	2120      	movs	r1, #32
    cc18:	4628      	mov	r0, r5
    cc1a:	4798      	blx	r3
        frame_duration = uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst, TWR_EXT_FRAME_SIZE));
    cc1c:	f014 fb5e 	bl	212dc <__aeabi_i2d>
    cc20:	a307      	add	r3, pc, #28	; (adr r3, cc40 <uwb_rng_request+0x218>)
    cc22:	e9d3 2300 	ldrd	r2, r3, [r3]
    cc26:	f014 fced 	bl	21604 <__aeabi_ddiv>
    cc2a:	f014 fe99 	bl	21960 <__aeabi_d2uiz>
    cc2e:	b287      	uxth	r7, r0
    cc30:	e7ae      	b.n	cb90 <uwb_rng_request+0x168>
    cc32:	4650      	mov	r0, sl
    cc34:	f7fd f8b6 	bl	9da4 <os_sem_release>
        RNG_STATS_INC(tx_error);
    cc38:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    cc3a:	3301      	adds	r3, #1
    cc3c:	63a3      	str	r3, [r4, #56]	; 0x38
    cc3e:	e7c6      	b.n	cbce <uwb_rng_request+0x1a6>
    cc40:	90690691 	.word	0x90690691
    cc44:	3ff06906 	.word	0x3ff06906

0000cc48 <uwb_rng_request_delay_start>:
{
    cc48:	b5d0      	push	{r4, r6, r7, lr}
    cc4a:	4604      	mov	r4, r0
    cc4c:	4616      	mov	r6, r2
    cc4e:	461f      	mov	r7, r3
    rng->control.delay_start_enabled = 1;
    cc50:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
    cc54:	f043 0301 	orr.w	r3, r3, #1
    cc58:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    rng->delay = delay;
    cc5c:	e9c0 6716 	strd	r6, r7, [r0, #88]	; 0x58
    uwb_rng_request(rng, dst_address, code);
    cc60:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    cc64:	f7ff fee0 	bl	ca28 <uwb_rng_request>
    rng->control.delay_start_enabled = 0;
    cc68:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
    cc6c:	f36f 0300 	bfc	r3, #0, #1
    cc70:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    return rng->dev_inst->status;
    cc74:	6823      	ldr	r3, [r4, #0]
}
    cc76:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    cc7a:	bdd0      	pop	{r4, r6, r7, pc}
    cc7c:	0000      	movs	r0, r0
	...

0000cc80 <uwb_rng_twr_to_tof>:
{
    cc80:	b5f0      	push	{r4, r5, r6, r7, lr}
    cc82:	b089      	sub	sp, #36	; 0x24
    twr_frame_t * first_frame = rng->frames[(uint16_t)(idx-1)%rng->nframes];
    cc84:	1e4b      	subs	r3, r1, #1
    cc86:	b29b      	uxth	r3, r3
    cc88:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
    cc8c:	fbb3 f4f2 	udiv	r4, r3, r2
    cc90:	fb02 3314 	mls	r3, r2, r4, r3
    cc94:	b29b      	uxth	r3, r3
    cc96:	3326      	adds	r3, #38	; 0x26
    cc98:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    cc9c:	685d      	ldr	r5, [r3, #4]
    twr_frame_t * frame = rng->frames[(idx)%rng->nframes];
    cc9e:	fbb1 f3f2 	udiv	r3, r1, r2
    cca2:	fb02 1113 	mls	r1, r2, r3, r1
    cca6:	b289      	uxth	r1, r1
    cca8:	3126      	adds	r1, #38	; 0x26
    ccaa:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    ccae:	6844      	ldr	r4, [r0, #4]
    switch(frame->code) {
    ccb0:	f8b4 3009 	ldrh.w	r3, [r4, #9]
    ccb4:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
    ccb8:	d321      	bcc.n	ccfe <uwb_rng_twr_to_tof+0x7e>
    ccba:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
    ccbe:	b29b      	uxth	r3, r3
    ccc0:	2b09      	cmp	r3, #9
    ccc2:	d833      	bhi.n	cd2c <uwb_rng_twr_to_tof+0xac>
                              first_frame->transmission_timestamp, first_frame->reception_timestamp,
    ccc4:	f8d5 200f 	ldr.w	r2, [r5, #15]
    ccc8:	f8d5 600b 	ldr.w	r6, [r5, #11]
                              frame->transmission_timestamp, frame->reception_timestamp);
    cccc:	f8d4 700f 	ldr.w	r7, [r4, #15]
    ccd0:	f8d4 c00b 	ldr.w	ip, [r4, #11]
            ToF = calc_tof_ds(first_frame->response_timestamp, first_frame->request_timestamp,
    ccd4:	2300      	movs	r3, #0
    ccd6:	f8d5 1013 	ldr.w	r1, [r5, #19]
    ccda:	f8d5 0017 	ldr.w	r0, [r5, #23]
    ccde:	f8cd c018 	str.w	ip, [sp, #24]
    cce2:	9307      	str	r3, [sp, #28]
    cce4:	9704      	str	r7, [sp, #16]
    cce6:	9305      	str	r3, [sp, #20]
    cce8:	f8d4 5013 	ldr.w	r5, [r4, #19]
    ccec:	9503      	str	r5, [sp, #12]
    ccee:	f8d4 4017 	ldr.w	r4, [r4, #23]
    ccf2:	9402      	str	r4, [sp, #8]
    ccf4:	9600      	str	r6, [sp, #0]
    ccf6:	9301      	str	r3, [sp, #4]
    ccf8:	f00c fa56 	bl	191a8 <calc_tof_ds>
            break;
    ccfc:	e004      	b.n	cd08 <uwb_rng_twr_to_tof+0x88>
    switch(frame->code) {
    ccfe:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
    cd02:	d203      	bcs.n	cd0c <uwb_rng_twr_to_tof+0x8c>
    cd04:	ed9f 0b0c 	vldr	d0, [pc, #48]	; cd38 <uwb_rng_twr_to_tof+0xb8>
}
    cd08:	b009      	add	sp, #36	; 0x24
    cd0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                              frame->transmission_timestamp, frame->reception_timestamp, skew);
    cd0c:	f8d4 200f 	ldr.w	r2, [r4, #15]
    cd10:	f8d4 500b 	ldr.w	r5, [r4, #11]
            ToF = calc_tof_ss(frame->response_timestamp, frame->request_timestamp,
    cd14:	2300      	movs	r3, #0
    cd16:	f8d4 1013 	ldr.w	r1, [r4, #19]
    cd1a:	f8d4 0017 	ldr.w	r0, [r4, #23]
    cd1e:	9500      	str	r5, [sp, #0]
    cd20:	9301      	str	r3, [sp, #4]
    cd22:	ed9f 0b05 	vldr	d0, [pc, #20]	; cd38 <uwb_rng_twr_to_tof+0xb8>
    cd26:	f00c fa0f 	bl	19148 <calc_tof_ss>
            break;
    cd2a:	e7ed      	b.n	cd08 <uwb_rng_twr_to_tof+0x88>
    switch(frame->code) {
    cd2c:	ed9f 0b02 	vldr	d0, [pc, #8]	; cd38 <uwb_rng_twr_to_tof+0xb8>
    return ToF;
    cd30:	e7ea      	b.n	cd08 <uwb_rng_twr_to_tof+0x88>
    cd32:	bf00      	nop
    cd34:	f3af 8000 	nop.w
	...

0000cd40 <tx_final_cb>:
 *
 * @return void
 */
static bool
tx_final_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
    cd40:	b570      	push	{r4, r5, r6, lr}
    cd42:	4605      	mov	r5, r0
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
    cd44:	684e      	ldr	r6, [r1, #4]
    twr_frame_t * frame = rng->frames[(rng->idx)%rng->nframes];
    cd46:	f8b6 3076 	ldrh.w	r3, [r6, #118]	; 0x76
    cd4a:	f8b6 207a 	ldrh.w	r2, [r6, #122]	; 0x7a
    cd4e:	fbb3 f1f2 	udiv	r1, r3, r2
    cd52:	fb02 3311 	mls	r3, r2, r1, r3
    cd56:	b29b      	uxth	r3, r3
    cd58:	3326      	adds	r3, #38	; 0x26
    cd5a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    cd5e:	685c      	ldr	r4, [r3, #4]

    frame->remote.cartesian.x = DPL_FLOAT64_INIT(MYNEWT_VAL(LOCAL_COORDINATE_X));
    cd60:	2200      	movs	r2, #0
    cd62:	2300      	movs	r3, #0
    cd64:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
    frame->remote.cartesian.y = DPL_FLOAT64_INIT(MYNEWT_VAL(LOCAL_COORDINATE_Y));
    cd68:	e9c4 2316 	strd	r2, r3, [r4, #88]	; 0x58
    frame->remote.cartesian.z = DPL_FLOAT64_INIT(MYNEWT_VAL(LOCAL_COORDINATE_Z));
    cd6c:	e9c4 2318 	strd	r2, r3, [r4, #96]	; 0x60

    if (inst->capabilities.single_receiver_pdoa) {
    cd70:	f890 34b2 	ldrb.w	r3, [r0, #1202]	; 0x4b2
    cd74:	f013 0f02 	tst.w	r3, #2
    cd78:	d007      	beq.n	cd8a <tx_final_cb+0x4a>
    return (dev->uw_funcs->uf_calc_pdoa(dev, diag));
    cd7a:	6a43      	ldr	r3, [r0, #36]	; 0x24
    cd7c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    cd80:	f8d0 14f8 	ldr.w	r1, [r0, #1272]	; 0x4f8
    cd84:	4798      	blx	r3
        frame->remote.pdoa = uwb_calc_pdoa(inst, inst->rxdiag);
    cd86:	ed84 0a1c 	vstr	s0, [r4, #112]	; 0x70
    }
    if (inst->capabilities.sts) {
    cd8a:	f895 34b2 	ldrb.w	r3, [r5, #1202]	; 0x4b2
    cd8e:	f013 0f01 	tst.w	r3, #1
    cd92:	d017      	beq.n	cdc4 <tx_final_cb+0x84>
        frame->remote.flags.has_sts = inst->config.rx.stsMode != DWT_STS_MODE_OFF;
    cd94:	f895 3518 	ldrb.w	r3, [r5, #1304]	; 0x518
    cd98:	3b00      	subs	r3, #0
    cd9a:	bf18      	it	ne
    cd9c:	2301      	movne	r3, #1
    cd9e:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
    cda2:	f363 0200 	bfi	r2, r3, #0, #1
    cda6:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
        frame->local.flags.has_valid_sts = !(inst->status.sts_ts_error || inst->status.sts_pream_error);
    cdaa:	f895 350b 	ldrb.w	r3, [r5, #1291]	; 0x50b
    cdae:	f013 0f30 	tst.w	r3, #48	; 0x30
    cdb2:	bf0c      	ite	eq
    cdb4:	2201      	moveq	r2, #1
    cdb6:	2200      	movne	r2, #0
    cdb8:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
    cdbc:	f362 0341 	bfi	r3, r2, #1, #1
    cdc0:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
    return (dev->uw_funcs->uf_calc_rssi(dev, diag));
    cdc4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    cdc6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    cdca:	f8d5 14f8 	ldr.w	r1, [r5, #1272]	; 0x4f8
    cdce:	4628      	mov	r0, r5
    cdd0:	4798      	blx	r3
    }
    frame->remote.rssi = uwb_calc_rssi(inst, inst->rxdiag);
    cdd2:	ed84 0a1a 	vstr	s0, [r4, #104]	; 0x68
    return (dev->uw_funcs->uf_calc_fppl(dev, diag));
    cdd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    cdd8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
    cddc:	f8d5 14f8 	ldr.w	r1, [r5, #1272]	; 0x4f8
    cde0:	4628      	mov	r0, r5
    cde2:	4798      	blx	r3
    frame->remote.fppl = uwb_calc_fppl(inst, inst->rxdiag);
    cde4:	ed84 0a1b 	vstr	s0, [r4, #108]	; 0x6c

    if (frame->code != UWB_DATA_CODE_SS_TWR_EXT_T1) {
    cde8:	f8b4 2009 	ldrh.w	r2, [r4, #9]
    cdec:	f240 1315 	movw	r3, #277	; 0x115
    cdf0:	429a      	cmp	r2, r3
    cdf2:	d125      	bne.n	ce40 <tx_final_cb+0x100>
#else
        frame->remote.spherical.range = uwb_rng_tof_to_meters(uwb_rng_twr_to_tof(rng,rng->idx));
#endif
        frame->remote.spherical_variance.range = DPL_FLOAT64_I32_TO_F64(MYNEWT_VAL(RANGE_VARIANCE));
    } else {
        frame->remote.spherical.range = DPL_FLOAT64_NAN();
    cdf4:	2200      	movs	r2, #0
    cdf6:	4b1e      	ldr	r3, [pc, #120]	; (ce70 <tx_final_cb+0x130>)
    cdf8:	e9c4 2308 	strd	r2, r3, [r4, #32]
    }
    frame->remote.spherical_variance.azimuth = DPL_FLOAT64_INIT(-1.0);
    cdfc:	2200      	movs	r2, #0
    cdfe:	4b1d      	ldr	r3, [pc, #116]	; (ce74 <tx_final_cb+0x134>)
    ce00:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
    frame->remote.spherical_variance.zenith = DPL_FLOAT64_INIT(-1.0);
    ce04:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
    if (!DPL_FLOAT32_ISNAN(frame->remote.pdoa)) {
    ce08:	ed94 0a1c 	vldr	s0, [r4, #112]	; 0x70
    ce0c:	eeb4 0a40 	vcmp.f32	s0, s0
    ce10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ce14:	d612      	bvs.n	ce3c <tx_final_cb+0xfc>
        frame->remote.spherical.azimuth = DPL_FLOAT64_FROM_F32(uwb_calc_aoa(
    ce16:	f505 639a 	add.w	r3, r5, #1232	; 0x4d0
    ce1a:	edd3 0a00 	vldr	s1, [r3]
    ce1e:	f895 050c 	ldrb.w	r0, [r5, #1292]	; 0x50c
    ce22:	f7fb fef1 	bl	8c08 <uwb_calc_aoa>
    ce26:	ee10 0a10 	vmov	r0, s0
    ce2a:	f014 fa69 	bl	21300 <__aeabi_f2d>
    ce2e:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
            frame->remote.pdoa, inst->config.channel, inst->rx_ant_separation)
            );
        frame->remote.spherical_variance.azimuth = DPL_FLOAT64_INIT(MYNEWT_VAL(AZIMUTH_VARIANCE));
    ce32:	a30b      	add	r3, pc, #44	; (adr r3, ce60 <tx_final_cb+0x120>)
    ce34:	e9d3 2300 	ldrd	r2, r3, [r3]
    ce38:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
    }

    return true;
}
    ce3c:	2001      	movs	r0, #1
    ce3e:	bd70      	pop	{r4, r5, r6, pc}
        frame->remote.spherical.range = uwb_rng_tof_to_meters(uwb_rng_twr_to_tof(rng,rng->idx));
    ce40:	f8b6 1076 	ldrh.w	r1, [r6, #118]	; 0x76
    ce44:	4630      	mov	r0, r6
    ce46:	f7ff ff1b 	bl	cc80 <uwb_rng_twr_to_tof>
    ce4a:	f00c f959 	bl	19100 <uwb_rng_tof_to_meters>
    ce4e:	ed84 0b08 	vstr	d0, [r4, #32]
        frame->remote.spherical_variance.range = DPL_FLOAT64_I32_TO_F64(MYNEWT_VAL(RANGE_VARIANCE));
    ce52:	a305      	add	r3, pc, #20	; (adr r3, ce68 <tx_final_cb+0x128>)
    ce54:	e9d3 2300 	ldrd	r2, r3, [r3]
    ce58:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    ce5c:	e7ce      	b.n	cdfc <tx_final_cb+0xbc>
    ce5e:	bf00      	nop
    ce60:	00000000 	.word	0x00000000
    ce64:	3f9dcc64 	.word	0x3f9dcc64
    ce68:	00000000 	.word	0x00000000
    ce6c:	3f41d718 	.word	0x3f41d718
    ce70:	7ff80000 	.word	0x7ff80000
    ce74:	bff00000 	.word	0xbff00000

0000ce78 <rng_issue_complete>:
{
    ce78:	b538      	push	{r3, r4, r5, lr}
    ce7a:	4605      	mov	r5, r0
    if(!(SLIST_EMPTY(&inst->interface_cbs))) {
    ce7c:	f8d0 4530 	ldr.w	r4, [r0, #1328]	; 0x530
    ce80:	b90c      	cbnz	r4, ce86 <rng_issue_complete+0xe>
}
    ce82:	bd38      	pop	{r3, r4, r5, pc}
        SLIST_FOREACH(cbs_i, &inst->interface_cbs, next) {
    ce84:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    ce86:	2c00      	cmp	r4, #0
    ce88:	d0fb      	beq.n	ce82 <rng_issue_complete+0xa>
            if (cbs_i != NULL && cbs_i->complete_cb)
    ce8a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    ce8c:	2b00      	cmp	r3, #0
    ce8e:	d0f9      	beq.n	ce84 <rng_issue_complete+0xc>
                if(cbs_i->complete_cb(inst, cbs_i)) continue;
    ce90:	4621      	mov	r1, r4
    ce92:	4628      	mov	r0, r5
    ce94:	4798      	blx	r3
    ce96:	e7f5      	b.n	ce84 <rng_issue_complete+0xc>

0000ce98 <tx_complete_cb>:
{
    ce98:	b538      	push	{r3, r4, r5, lr}
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
    ce9a:	684d      	ldr	r5, [r1, #4]
    if (inst->fctrl != FCNTL_IEEE_RANGE_16)
    ce9c:	f8b0 24e0 	ldrh.w	r2, [r0, #1248]	; 0x4e0
    cea0:	f648 0341 	movw	r3, #34881	; 0x8841
    cea4:	429a      	cmp	r2, r3
    cea6:	d122      	bne.n	ceee <tx_complete_cb+0x56>
    cea8:	4604      	mov	r4, r0
    ceaa:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
    if(dpl_sem_get_count(&rng->sem) == 1) {
    ceae:	2b01      	cmp	r3, #1
    ceb0:	d01f      	beq.n	cef2 <tx_complete_cb+0x5a>
    switch(rng->code) {
    ceb2:	f8b5 304c 	ldrh.w	r3, [r5, #76]	; 0x4c
    ceb6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
    ceba:	2b19      	cmp	r3, #25
    cebc:	d81b      	bhi.n	cef6 <tx_complete_cb+0x5e>
            RNG_STATS_INC(tx_complete);
    cebe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    cec0:	3301      	adds	r3, #1
    cec2:	626b      	str	r3, [r5, #36]	; 0x24
            if (rng->control.complete_after_tx) {
    cec4:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
    cec8:	f013 0f02 	tst.w	r3, #2
    cecc:	d107      	bne.n	cede <tx_complete_cb+0x46>
            rng->control.complete_after_tx = 0;
    cece:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
    ced2:	f36f 0341 	bfc	r3, #1, #1
    ced6:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
            return true;
    ceda:	2001      	movs	r0, #1
    cedc:	e008      	b.n	cef0 <tx_complete_cb+0x58>
    cede:	f105 0050 	add.w	r0, r5, #80	; 0x50
    cee2:	f7fc ff5f 	bl	9da4 <os_sem_release>
                rng_issue_complete(inst);
    cee6:	4620      	mov	r0, r4
    cee8:	f7ff ffc6 	bl	ce78 <rng_issue_complete>
    ceec:	e7ef      	b.n	cece <tx_complete_cb+0x36>
        return false;
    ceee:	2000      	movs	r0, #0
}
    cef0:	bd38      	pop	{r3, r4, r5, pc}
        return false;
    cef2:	2000      	movs	r0, #0
    cef4:	e7fc      	b.n	cef0 <tx_complete_cb+0x58>
            return false;
    cef6:	2000      	movs	r0, #0
    cef8:	e7fa      	b.n	cef0 <tx_complete_cb+0x58>
	...

0000cefc <uwb_rng_pkg_init>:
 * @return void
 */

void
uwb_rng_pkg_init(void)
{
    cefc:	b570      	push	{r4, r5, r6, lr}
    int i;
    struct uwb_rng_instance *rng;
    struct uwb_dev *udev;
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    printf("{\"utime\": %"PRIu32",\"msg\": \"rng_pkg_init\"}\n",
    cefe:	f001 fa84 	bl	e40a <dpl_cputime_get32>
    cf02:	4601      	mov	r1, r0
    cf04:	4826      	ldr	r0, [pc, #152]	; (cfa0 <uwb_rng_pkg_init+0xa4>)
    cf06:	f001 f9fb 	bl	e300 <printf>
           dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
#endif

    for (i=0;i<ARRAY_SIZE(g_cbs);i++) {
    cf0a:	2500      	movs	r5, #0
    cf0c:	b105      	cbz	r5, cf10 <uwb_rng_pkg_init+0x14>
#if __KERNEL__
        rng_chrdev_create(udev->idx);
#endif
    }

}
    cf0e:	bd70      	pop	{r4, r5, r6, pc}
        udev = uwb_dev_idx_lookup(i);
    cf10:	4628      	mov	r0, r5
    cf12:	f7fb fd7f 	bl	8a14 <uwb_dev_idx_lookup>
        if (!udev) continue;
    cf16:	4606      	mov	r6, r0
    cf18:	2800      	cmp	r0, #0
    cf1a:	d03e      	beq.n	cf9a <uwb_rng_pkg_init+0x9e>
        g_cbs[i].inst_ptr = rng = uwb_rng_init(udev, &g_config, sizeof(g_twr_frames[i])/sizeof(g_twr_frames[i][0]));
    cf1c:	2204      	movs	r2, #4
    cf1e:	4921      	ldr	r1, [pc, #132]	; (cfa4 <uwb_rng_pkg_init+0xa8>)
    cf20:	f7ff fbf4 	bl	c70c <uwb_rng_init>
    cf24:	4604      	mov	r4, r0
    cf26:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
    cf2a:	4a1f      	ldr	r2, [pc, #124]	; (cfa8 <uwb_rng_pkg_init+0xac>)
    cf2c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    cf30:	6058      	str	r0, [r3, #4]
        uwb_rng_set_frames(rng, g_twr_frames[i], sizeof(g_twr_frames[0])/sizeof(g_twr_frames[0][0]));
    cf32:	ebc5 1005 	rsb	r0, r5, r5, lsl #4
    cf36:	4b1d      	ldr	r3, [pc, #116]	; (cfac <uwb_rng_pkg_init+0xb0>)
    cf38:	eb03 1080 	add.w	r0, r3, r0, lsl #6
    assert(nframes <= rng->nframes);
    cf3c:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    cf40:	2b03      	cmp	r3, #3
    cf42:	d901      	bls.n	cf48 <uwb_rng_pkg_init+0x4c>
    for (i = 0; i < nframes; i++)
    cf44:	2300      	movs	r3, #0
    cf46:	e010      	b.n	cf6a <uwb_rng_pkg_init+0x6e>
    assert(nframes <= rng->nframes);
    cf48:	2300      	movs	r3, #0
    cf4a:	461a      	mov	r2, r3
    cf4c:	4619      	mov	r1, r3
    cf4e:	4618      	mov	r0, r3
    cf50:	f7fc f808 	bl	8f64 <__assert_func>
        rng->frames[i] = &twr[i];
    cf54:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
    cf58:	eb00 1101 	add.w	r1, r0, r1, lsl #4
    cf5c:	f103 0226 	add.w	r2, r3, #38	; 0x26
    cf60:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    cf64:	6051      	str	r1, [r2, #4]
    for (i = 0; i < nframes; i++)
    cf66:	3301      	adds	r3, #1
    cf68:	b29b      	uxth	r3, r3
    cf6a:	2b03      	cmp	r3, #3
    cf6c:	d9f2      	bls.n	cf54 <uwb_rng_pkg_init+0x58>
        uwb_mac_append_interface(udev, &g_cbs[i]);
    cf6e:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
    cf72:	490d      	ldr	r1, [pc, #52]	; (cfa8 <uwb_rng_pkg_init+0xac>)
    cf74:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    cf78:	4630      	mov	r0, r6
    cf7a:	f7fb fd7b 	bl	8a74 <uwb_mac_append_interface>
    memset(ev, 0, sizeof(*ev));
    cf7e:	2300      	movs	r3, #0
    cf80:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    cf84:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    cf88:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    cf8c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    ev->ev.ev_cb = (os_event_fn *)fn;
    cf90:	4b07      	ldr	r3, [pc, #28]	; (cfb0 <uwb_rng_pkg_init+0xb4>)
    cf92:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    ev->ev.ev_arg = arg;
    cf96:	f8c4 4090 	str.w	r4, [r4, #144]	; 0x90
    for (i=0;i<ARRAY_SIZE(g_cbs);i++) {
    cf9a:	3501      	adds	r5, #1
    cf9c:	e7b6      	b.n	cf0c <uwb_rng_pkg_init+0x10>
    cf9e:	bf00      	nop
    cfa0:	00023238 	.word	0x00023238
    cfa4:	2000059c 	.word	0x2000059c
    cfa8:	20000560 	.word	0x20000560
    cfac:	200034a8 	.word	0x200034a8
    cfb0:	0000c559 	.word	0x0000c559

0000cfb4 <uwb_rng_pkg_init2>:
    for (i=0;i<ARRAY_SIZE(g_cbs);i++) {
        if (!g_cbs[i].inst_ptr) continue;
        uwbrng_sysfs_init((struct uwb_rng_instance *)g_cbs[i].inst_ptr);
    }
#endif
}
    cfb4:	4770      	bx	lr
	...

0000cfb8 <uwb_rng_pkg_down>:

int
uwb_rng_pkg_down(int reason)
{
    cfb8:	b538      	push	{r3, r4, r5, lr}
    int i;
    struct uwb_rng_instance * rng;

    for (i=0;i<ARRAY_SIZE(g_cbs);i++) {
    cfba:	2400      	movs	r4, #0
    cfbc:	b10c      	cbz	r4, cfc2 <uwb_rng_pkg_down+0xa>
        uwb_rng_free(g_cbs[i].inst_ptr);
        g_cbs[i].inst_ptr = 0;
    }

    return 0;
}
    cfbe:	2000      	movs	r0, #0
    cfc0:	bd38      	pop	{r3, r4, r5, pc}
        rng = (struct uwb_rng_instance *)g_cbs[i].inst_ptr;
    cfc2:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
    cfc6:	009a      	lsls	r2, r3, #2
    cfc8:	4b08      	ldr	r3, [pc, #32]	; (cfec <uwb_rng_pkg_down+0x34>)
    cfca:	4413      	add	r3, r2
    cfcc:	685b      	ldr	r3, [r3, #4]
        if (!rng) continue;
    cfce:	b153      	cbz	r3, cfe6 <uwb_rng_pkg_down+0x2e>
        uwb_mac_remove_interface(rng->dev_inst, g_cbs[i].id);
    cfd0:	4d06      	ldr	r5, [pc, #24]	; (cfec <uwb_rng_pkg_down+0x34>)
    cfd2:	4415      	add	r5, r2
    cfd4:	8869      	ldrh	r1, [r5, #2]
    cfd6:	6818      	ldr	r0, [r3, #0]
    cfd8:	f7fb fd71 	bl	8abe <uwb_mac_remove_interface>
        uwb_rng_free(g_cbs[i].inst_ptr);
    cfdc:	6868      	ldr	r0, [r5, #4]
    cfde:	f7ff fb67 	bl	c6b0 <uwb_rng_free>
        g_cbs[i].inst_ptr = 0;
    cfe2:	2300      	movs	r3, #0
    cfe4:	606b      	str	r3, [r5, #4]
    for (i=0;i<ARRAY_SIZE(g_cbs);i++) {
    cfe6:	3401      	adds	r4, #1
    cfe8:	e7e8      	b.n	cfbc <uwb_rng_pkg_down+0x4>
    cfea:	bf00      	nop
    cfec:	20000560 	.word	0x20000560

0000cff0 <rng_encode>:
 * output parameters
 * returns void
 */
void
rng_encode(struct uwb_rng_instance * rng)
{
    cff0:	b570      	push	{r4, r5, r6, lr}
    cff2:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
    cff6:	4605      	mov	r5, r0
    int rc;

    twr_frame_t * frame = rng->frames[rng->idx_current];
    cff8:	f8b0 1078 	ldrh.w	r1, [r0, #120]	; 0x78
    cffc:	f101 0326 	add.w	r3, r1, #38	; 0x26
    d000:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    d004:	685c      	ldr	r4, [r3, #4]
    dpl_float64_t time_of_flight = uwb_rng_twr_to_tof(rng, rng->idx_current);
    d006:	f7ff fe3b 	bl	cc80 <uwb_rng_twr_to_tof>
    frame->local.spherical.range = uwb_rng_tof_to_meters(time_of_flight);
    d00a:	f00c f879 	bl	19100 <uwb_rng_tof_to_meters>
    d00e:	ed84 0b22 	vstr	d0, [r4, #136]	; 0x88

    rng_json_t json = {
    d012:	f44f 7206 	mov.w	r2, #536	; 0x218
    d016:	2100      	movs	r1, #0
    d018:	4668      	mov	r0, sp
    d01a:	f000 fd5e 	bl	dada <memset>
#if MYNEWT_VAL(UWB_WCS_ENABLED)
        .utime = uwb_wcs_read_systime_master64(rng->dev_inst),
    d01e:	6828      	ldr	r0, [r5, #0]
    d020:	f000 fbce 	bl	d7c0 <uwb_wcs_read_systime_master64>
    rng_json_t json = {
    d024:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
#else
        .utime = dpl_cputime_ticks_to_usecs(dpl_cputime_get32()),
#endif
        .uid = frame->src_address,
    d028:	f8b4 2007 	ldrh.w	r2, [r4, #7]
    d02c:	2300      	movs	r3, #0
    rng_json_t json = {
    d02e:	9220      	str	r2, [sp, #128]	; 0x80
    d030:	9321      	str	r3, [sp, #132]	; 0x84
        .ouid = frame->dst_address,
    d032:	f8b4 2005 	ldrh.w	r2, [r4, #5]
    rng_json_t json = {
    d036:	9222      	str	r2, [sp, #136]	; 0x88
    d038:	9323      	str	r3, [sp, #140]	; 0x8c
    d03a:	2000      	movs	r0, #0
    d03c:	494e      	ldr	r1, [pc, #312]	; (d178 <rng_encode+0x188>)
    d03e:	e9cd 0140 	strd	r0, r1, [sp, #256]	; 0x100
    d042:	e9cd 0142 	strd	r0, r1, [sp, #264]	; 0x108
        .ppm = DPL_FLOAT64_NAN(),
        .sts = DPL_FLOAT64_NAN(),
        .idx =0
    };

    for (uint8_t i = 0;i< sizeof(json.raz)/sizeof(json.raz.array[0]);i++)
    d046:	e015      	b.n	d074 <rng_encode+0x84>
            json.raz.array[i] = json.braz.array[i] = json.los[i] = DPL_FLOAT64_NAN();
    d048:	f103 021c 	add.w	r2, r3, #28
    d04c:	eb0d 02c2 	add.w	r2, sp, r2, lsl #3
    d050:	2000      	movs	r0, #0
    d052:	4949      	ldr	r1, [pc, #292]	; (d178 <rng_encode+0x188>)
    d054:	e9c2 0100 	strd	r0, r1, [r2]
    d058:	f103 0215 	add.w	r2, r3, #21
    d05c:	eb0d 02c2 	add.w	r2, sp, r2, lsl #3
    d060:	e9c2 0100 	strd	r0, r1, [r2]
    d064:	f103 0212 	add.w	r2, r3, #18
    d068:	eb0d 02c2 	add.w	r2, sp, r2, lsl #3
    d06c:	e9c2 0100 	strd	r0, r1, [r2]
    for (uint8_t i = 0;i< sizeof(json.raz)/sizeof(json.raz.array[0]);i++)
    d070:	3301      	adds	r3, #1
    d072:	b2db      	uxtb	r3, r3
    d074:	2b02      	cmp	r3, #2
    d076:	d9e7      	bls.n	d048 <rng_encode+0x58>

    switch(frame->code){
    d078:	f8b4 1009 	ldrh.w	r1, [r4, #9]
    d07c:	f5a1 7389 	sub.w	r3, r1, #274	; 0x112
    d080:	2b16      	cmp	r3, #22
    d082:	d84b      	bhi.n	d11c <rng_encode+0x12c>
    d084:	e8df f003 	tbb	[pc, r3]
    d088:	4a4a4a1b 	.word	0x4a4a4a1b
    d08c:	4a4a4a1d 	.word	0x4a4a4a1d
    d090:	4a4a4a1b 	.word	0x4a4a4a1b
    d094:	4a4a4a4a 	.word	0x4a4a4a4a
    d098:	4a4a1b4a 	.word	0x4a4a1b4a
    d09c:	4a4a      	.short	0x4a4a
    d09e:	1d          	.byte	0x1d
    d09f:	00          	.byte	0x00
        case UWB_DATA_CODE_SS_TWR_EXT_FINAL:
        case UWB_DATA_CODE_DS_TWR_EXT_FINAL:
        for (uint8_t i = 0; i < sizeof(json.braz)/sizeof(json.braz.array[0]);i++){
            json.braz.array[i] = frame->remote.spherical.array[i];
    d0a0:	1d1a      	adds	r2, r3, #4
    d0a2:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    d0a6:	e9d2 0100 	ldrd	r0, r1, [r2]
    d0aa:	f103 0215 	add.w	r2, r3, #21
    d0ae:	eb0d 02c2 	add.w	r2, sp, r2, lsl #3
    d0b2:	e9c2 0100 	strd	r0, r1, [r2]
        for (uint8_t i = 0; i < sizeof(json.braz)/sizeof(json.braz.array[0]);i++){
    d0b6:	3301      	adds	r3, #1
    d0b8:	b2db      	uxtb	r3, r3
    d0ba:	2b02      	cmp	r3, #2
    d0bc:	d9f0      	bls.n	d0a0 <rng_encode+0xb0>
    switch(frame->code){
    d0be:	2300      	movs	r3, #0
    d0c0:	e00f      	b.n	d0e2 <rng_encode+0xf2>
    d0c2:	2300      	movs	r3, #0
    d0c4:	e7f9      	b.n	d0ba <rng_encode+0xca>
        /* Intentionally fall through */
        case UWB_DATA_CODE_SS_TWR_FINAL:
        case UWB_DATA_CODE_SS_TWR_ACK_FINAL:
        case UWB_DATA_CODE_DS_TWR_FINAL:
        for (uint8_t i = 0; i < sizeof(json.raz)/sizeof(json.raz.array[0]);i++){
            json.raz.array[i] = frame->local.spherical.array[i];
    d0c6:	f103 0211 	add.w	r2, r3, #17
    d0ca:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    d0ce:	e9d2 0100 	ldrd	r0, r1, [r2]
    d0d2:	f103 0212 	add.w	r2, r3, #18
    d0d6:	eb0d 02c2 	add.w	r2, sp, r2, lsl #3
    d0da:	e9c2 0100 	strd	r0, r1, [r2]
        for (uint8_t i = 0; i < sizeof(json.raz)/sizeof(json.raz.array[0]);i++){
    d0de:	3301      	adds	r3, #1
    d0e0:	b2db      	uxtb	r3, r3
    d0e2:	2b02      	cmp	r3, #2
    d0e4:	d9ef      	bls.n	d0c6 <rng_encode+0xd6>
        break;
        default: printf(",error: \"Unknown Frame Code\", %x\n", frame->code);
    }

#if MYNEWT_VAL(RNG_VERBOSE) > 1
    json.pd   = DPL_FLOAT64_FROM_F32(frame->local.pdoa);
    d0e6:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
    d0ea:	f014 f909 	bl	21300 <__aeabi_f2d>
    d0ee:	e9cd 013e 	strd	r0, r1, [sp, #248]	; 0xf8
    json.code = frame->code;
    d0f2:	f8b4 3009 	ldrh.w	r3, [r4, #9]
    d0f6:	931e      	str	r3, [sp, #120]	; 0x78
    d0f8:	2300      	movs	r3, #0
    d0fa:	931f      	str	r3, [sp, #124]	; 0x7c
    if(rng->dev_inst->config.rxdiag_enable){
    d0fc:	682b      	ldr	r3, [r5, #0]
    d0fe:	f893 352c 	ldrb.w	r3, [r3, #1324]	; 0x52c
    d102:	f013 0f40 	tst.w	r3, #64	; 0x40
    d106:	d10d      	bne.n	d124 <rng_encode+0x134>
            json.rssi[i] = DPL_FLOAT64_FROM_F32(frame->local.vrssi[i]);
        dpl_float32_t fppl = frame->local.fppl;
        json.los[0] = DPL_FLOAT64_FROM_F32(uwb_estimate_los(rng->dev_inst, frame->local.rssi, fppl));
    }

    rc = rng_json_write(&json);
    d108:	4668      	mov	r0, sp
    d10a:	f000 f85b 	bl	d1c4 <rng_json_write>
    assert(rc == 0);
    d10e:	bb60      	cbnz	r0, d16a <rng_encode+0x17a>
    size_t n = strlen(json.iobuf);
    json.iobuf[n]='\n';
    json.iobuf[n+1]='\0';
    rng_encode_output(rng->dev_inst->idx, json.iobuf, strlen(json.iobuf));
#else
    printf("%s\n",json.iobuf);
    d110:	a844      	add	r0, sp, #272	; 0x110
    d112:	f000 fbc9 	bl	d8a8 <puts>
#endif

}
    d116:	f50d 7d06 	add.w	sp, sp, #536	; 0x218
    d11a:	bd70      	pop	{r4, r5, r6, pc}
        default: printf(",error: \"Unknown Frame Code\", %x\n", frame->code);
    d11c:	4817      	ldr	r0, [pc, #92]	; (d17c <rng_encode+0x18c>)
    d11e:	f001 f8ef 	bl	e300 <printf>
    d122:	e7e0      	b.n	d0e6 <rng_encode+0xf6>
        for (uint8_t i=0;i< sizeof(json.rssi)/sizeof(json.rssi[0]);i++)
    d124:	2600      	movs	r6, #0
    d126:	2e02      	cmp	r6, #2
    d128:	d80f      	bhi.n	d14a <rng_encode+0x15a>
            json.rssi[i] = DPL_FLOAT64_FROM_F32(frame->local.vrssi[i]);
    d12a:	f106 0338 	add.w	r3, r6, #56	; 0x38
    d12e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    d132:	6818      	ldr	r0, [r3, #0]
    d134:	f014 f8e4 	bl	21300 <__aeabi_f2d>
    d138:	f106 0318 	add.w	r3, r6, #24
    d13c:	eb0d 03c3 	add.w	r3, sp, r3, lsl #3
    d140:	e9c3 0100 	strd	r0, r1, [r3]
        for (uint8_t i=0;i< sizeof(json.rssi)/sizeof(json.rssi[0]);i++)
    d144:	3601      	adds	r6, #1
    d146:	b2f6      	uxtb	r6, r6
    d148:	e7ed      	b.n	d126 <rng_encode+0x136>
        json.los[0] = DPL_FLOAT64_FROM_F32(uwb_estimate_los(rng->dev_inst, frame->local.rssi, fppl));
    d14a:	6828      	ldr	r0, [r5, #0]
    return (dev->uw_funcs->uf_estimate_los(dev, rssi, fppl));
    d14c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    d14e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
    d152:	edd4 0a35 	vldr	s1, [r4, #212]	; 0xd4
    d156:	ed94 0a34 	vldr	s0, [r4, #208]	; 0xd0
    d15a:	4798      	blx	r3
    d15c:	ee10 0a10 	vmov	r0, s0
    d160:	f014 f8ce 	bl	21300 <__aeabi_f2d>
    d164:	e9cd 0138 	strd	r0, r1, [sp, #224]	; 0xe0
    d168:	e7ce      	b.n	d108 <rng_encode+0x118>
    assert(rc == 0);
    d16a:	2300      	movs	r3, #0
    d16c:	461a      	mov	r2, r3
    d16e:	4619      	mov	r1, r3
    d170:	4618      	mov	r0, r3
    d172:	f7fb fef7 	bl	8f64 <__assert_func>
    d176:	bf00      	nop
    d178:	7ff80000 	.word	0x7ff80000
    d17c:	000232f8 	.word	0x000232f8

0000d180 <rng_write_line>:
        free(json);
}

static int
rng_write_line(void *buf, char* data, int len)
{
    d180:	b510      	push	{r4, lr}
    d182:	4686      	mov	lr, r0
    d184:	4610      	mov	r0, r2
    rng_json_t * json = buf;
    for (uint16_t i=0; i < len; i++){
    d186:	2300      	movs	r3, #0
    d188:	e001      	b.n	d18e <rng_write_line+0xe>
    d18a:	3301      	adds	r3, #1
    d18c:	b29b      	uxth	r3, r3
    d18e:	4283      	cmp	r3, r0
    d190:	da0d      	bge.n	d1ae <rng_write_line+0x2e>
        json->iobuf[(json->idx++)%MYNEWT_VAL(UWB_RNG_JSON_BUFSIZE)] = data[i];
    d192:	f8be c210 	ldrh.w	ip, [lr, #528]	; 0x210
    d196:	f10c 0401 	add.w	r4, ip, #1
    d19a:	f8ae 4210 	strh.w	r4, [lr, #528]	; 0x210
    d19e:	5ccc      	ldrb	r4, [r1, r3]
    d1a0:	fa5e fc8c 	uxtab	ip, lr, ip
    d1a4:	f88c 4110 	strb.w	r4, [ip, #272]	; 0x110
        if (data[i]=='\0'){
    d1a8:	5ccc      	ldrb	r4, [r1, r3]
    d1aa:	2c00      	cmp	r4, #0
    d1ac:	d1ed      	bne.n	d18a <rng_write_line+0xa>
            break;
        }
    }
    if (json->iobuf[json->idx-1]=='\0')
    d1ae:	f8be 3210 	ldrh.w	r3, [lr, #528]	; 0x210
    d1b2:	3b01      	subs	r3, #1
    d1b4:	4473      	add	r3, lr
    d1b6:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
    d1ba:	b90b      	cbnz	r3, d1c0 <rng_write_line+0x40>
        json->idx = 0;
    d1bc:	f8ae 3210 	strh.w	r3, [lr, #528]	; 0x210
    return len;
}
    d1c0:	bd10      	pop	{r4, pc}
	...

0000d1c4 <rng_json_write>:

int
rng_json_write(rng_json_t * json){
    d1c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d1c8:	b085      	sub	sp, #20
    d1ca:	4604      	mov	r4, r0

    struct json_value value;
    int rc;

    json->encoder.je_write = rng_write_line;
    d1cc:	4bbe      	ldr	r3, [pc, #760]	; (d4c8 <rng_json_write+0x304>)
    d1ce:	6183      	str	r3, [r0, #24]
    json->encoder.je_arg = (void *)json;
    d1d0:	61c0      	str	r0, [r0, #28]
    json->decoder.json_buf.jb_read_next = json_read_next;
    d1d2:	4bbe      	ldr	r3, [pc, #760]	; (d4cc <rng_json_write+0x308>)
    d1d4:	6043      	str	r3, [r0, #4]
    json->decoder.json_buf.jb_read_prev = json_read_prev;
    d1d6:	4bbe      	ldr	r3, [pc, #760]	; (d4d0 <rng_json_write+0x30c>)
    d1d8:	6083      	str	r3, [r0, #8]
    json->decoder.json_buf.jb_readn = json_readn;
    d1da:	4bbe      	ldr	r3, [pc, #760]	; (d4d4 <rng_json_write+0x310>)
    d1dc:	6003      	str	r3, [r0, #0]
    json->encoder.je_wr_commas = 0;
    d1de:	f890 3020 	ldrb.w	r3, [r0, #32]
    d1e2:	f36f 0300 	bfc	r3, #0, #1
    d1e6:	f880 3020 	strb.w	r3, [r0, #32]

    rc = json_encode_object_start(&json->encoder);
    d1ea:	f100 0518 	add.w	r5, r0, #24
    d1ee:	4628      	mov	r0, r5
    d1f0:	f00b fd20 	bl	18c34 <json_encode_object_start>
    d1f4:	4606      	mov	r6, r0
    JSON_VALUE_UINT(&value, json->utime);
    d1f6:	2301      	movs	r3, #1
    d1f8:	f88d 3001 	strb.w	r3, [sp, #1]
    d1fc:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
    d200:	e9cd 2302 	strd	r2, r3, [sp, #8]
    rc |= json_encode_object_entry(&json->encoder, "utime", &value);
    d204:	466a      	mov	r2, sp
    d206:	49b4      	ldr	r1, [pc, #720]	; (d4d8 <rng_json_write+0x314>)
    d208:	4628      	mov	r0, r5
    d20a:	f00b fd5b 	bl	18cc4 <json_encode_object_entry>
    d20e:	4306      	orrs	r6, r0

    if (json->seq){
    d210:	6f22      	ldr	r2, [r4, #112]	; 0x70
    d212:	6f63      	ldr	r3, [r4, #116]	; 0x74
    d214:	ea52 0103 	orrs.w	r1, r2, r3
    d218:	d126      	bne.n	d268 <rng_json_write+0xa4>
        JSON_VALUE_UINT(&value, json->seq);
        rc |= json_encode_object_entry(&json->encoder, "seq", &value);
    }
    if (json->code){
    d21a:	6fa2      	ldr	r2, [r4, #120]	; 0x78
    d21c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    d21e:	ea52 0103 	orrs.w	r1, r2, r3
    d222:	d12d      	bne.n	d280 <rng_json_write+0xbc>
        JSON_VALUE_UINT(&value, json->code);
        rc |= json_encode_object_entry(&json->encoder, "c", &value);
    }
    if (json->uid){
    d224:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    d228:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    d22c:	ea52 0103 	orrs.w	r1, r2, r3
    d230:	d132      	bne.n	d298 <rng_json_write+0xd4>
        JSON_VALUE_UINT(&value, json->uid);
        rc |= json_encode_object_entry(&json->encoder, "uid", &value);
    }
    if (json->ouid){
    d232:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
    d236:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    d23a:	ea52 0103 	orrs.w	r1, r2, r3
    d23e:	d137      	bne.n	d2b0 <rng_json_write+0xec>
        JSON_VALUE_UINT(&value, json->ouid);
        rc |= json_encode_object_entry(&json->encoder, "ouid", &value);
    }

    if(DPL_FLOAT64_ISNAN(json->raz.azimuth) && DPL_FLOAT64_ISNAN(json->raz.zenith)){
    d240:	e9d4 0126 	ldrd	r0, r1, [r4, #152]	; 0x98
    d244:	4602      	mov	r2, r0
    d246:	460b      	mov	r3, r1
    d248:	f014 fb4c 	bl	218e4 <__aeabi_dcmpun>
    d24c:	2800      	cmp	r0, #0
    d24e:	d13b      	bne.n	d2c8 <rng_json_write+0x104>
        rc |= json_encode_array_start(&json->encoder);
        JSON_VALUE_FLOAT64(&value, json->raz.range);
        rc |= json_encode_array_value(&json->encoder, &value);
        rc |= json_encode_array_finish(&json->encoder);
    }else{
        rc |= json_encode_array_name(&json->encoder, "raz");
    d250:	49a2      	ldr	r1, [pc, #648]	; (d4dc <rng_json_write+0x318>)
    d252:	4628      	mov	r0, r5
    d254:	f00b feec 	bl	19030 <json_encode_array_name>
    d258:	4306      	orrs	r6, r0
        rc |= json_encode_array_start(&json->encoder);
    d25a:	4628      	mov	r0, r5
    d25c:	f00b feec 	bl	19038 <json_encode_array_start>
    d260:	ea46 0700 	orr.w	r7, r6, r0
        for (uint8_t i = 0; i< sizeof(json->raz)/sizeof(dpl_float64_t); i++){
    d264:	2600      	movs	r6, #0
    d266:	e063      	b.n	d330 <rng_json_write+0x16c>
        JSON_VALUE_UINT(&value, json->seq);
    d268:	2101      	movs	r1, #1
    d26a:	f88d 1001 	strb.w	r1, [sp, #1]
    d26e:	9202      	str	r2, [sp, #8]
    d270:	9303      	str	r3, [sp, #12]
        rc |= json_encode_object_entry(&json->encoder, "seq", &value);
    d272:	466a      	mov	r2, sp
    d274:	499a      	ldr	r1, [pc, #616]	; (d4e0 <rng_json_write+0x31c>)
    d276:	4628      	mov	r0, r5
    d278:	f00b fd24 	bl	18cc4 <json_encode_object_entry>
    d27c:	4306      	orrs	r6, r0
    d27e:	e7cc      	b.n	d21a <rng_json_write+0x56>
        JSON_VALUE_UINT(&value, json->code);
    d280:	2101      	movs	r1, #1
    d282:	f88d 1001 	strb.w	r1, [sp, #1]
    d286:	9202      	str	r2, [sp, #8]
    d288:	9303      	str	r3, [sp, #12]
        rc |= json_encode_object_entry(&json->encoder, "c", &value);
    d28a:	466a      	mov	r2, sp
    d28c:	4995      	ldr	r1, [pc, #596]	; (d4e4 <rng_json_write+0x320>)
    d28e:	4628      	mov	r0, r5
    d290:	f00b fd18 	bl	18cc4 <json_encode_object_entry>
    d294:	4306      	orrs	r6, r0
    d296:	e7c5      	b.n	d224 <rng_json_write+0x60>
        JSON_VALUE_UINT(&value, json->uid);
    d298:	2101      	movs	r1, #1
    d29a:	f88d 1001 	strb.w	r1, [sp, #1]
    d29e:	9202      	str	r2, [sp, #8]
    d2a0:	9303      	str	r3, [sp, #12]
        rc |= json_encode_object_entry(&json->encoder, "uid", &value);
    d2a2:	466a      	mov	r2, sp
    d2a4:	4990      	ldr	r1, [pc, #576]	; (d4e8 <rng_json_write+0x324>)
    d2a6:	4628      	mov	r0, r5
    d2a8:	f00b fd0c 	bl	18cc4 <json_encode_object_entry>
    d2ac:	4306      	orrs	r6, r0
    d2ae:	e7c0      	b.n	d232 <rng_json_write+0x6e>
        JSON_VALUE_UINT(&value, json->ouid);
    d2b0:	2101      	movs	r1, #1
    d2b2:	f88d 1001 	strb.w	r1, [sp, #1]
    d2b6:	9202      	str	r2, [sp, #8]
    d2b8:	9303      	str	r3, [sp, #12]
        rc |= json_encode_object_entry(&json->encoder, "ouid", &value);
    d2ba:	466a      	mov	r2, sp
    d2bc:	498b      	ldr	r1, [pc, #556]	; (d4ec <rng_json_write+0x328>)
    d2be:	4628      	mov	r0, r5
    d2c0:	f00b fd00 	bl	18cc4 <json_encode_object_entry>
    d2c4:	4306      	orrs	r6, r0
    d2c6:	e7bb      	b.n	d240 <rng_json_write+0x7c>
    if(DPL_FLOAT64_ISNAN(json->raz.azimuth) && DPL_FLOAT64_ISNAN(json->raz.zenith)){
    d2c8:	e9d4 0128 	ldrd	r0, r1, [r4, #160]	; 0xa0
    d2cc:	4602      	mov	r2, r0
    d2ce:	460b      	mov	r3, r1
    d2d0:	f014 fb08 	bl	218e4 <__aeabi_dcmpun>
    d2d4:	2800      	cmp	r0, #0
    d2d6:	d0bb      	beq.n	d250 <rng_json_write+0x8c>
        rc |= json_encode_array_name(&json->encoder, "raz");
    d2d8:	4980      	ldr	r1, [pc, #512]	; (d4dc <rng_json_write+0x318>)
    d2da:	4628      	mov	r0, r5
    d2dc:	f00b fea8 	bl	19030 <json_encode_array_name>
    d2e0:	4306      	orrs	r6, r0
        rc |= json_encode_array_start(&json->encoder);
    d2e2:	4628      	mov	r0, r5
    d2e4:	f00b fea8 	bl	19038 <json_encode_array_start>
    d2e8:	4306      	orrs	r6, r0
        JSON_VALUE_FLOAT64(&value, json->raz.range);
    d2ea:	2306      	movs	r3, #6
    d2ec:	f88d 3001 	strb.w	r3, [sp, #1]
    d2f0:	e9d4 2324 	ldrd	r2, r3, [r4, #144]	; 0x90
    d2f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
        rc |= json_encode_array_value(&json->encoder, &value);
    d2f8:	4669      	mov	r1, sp
    d2fa:	4628      	mov	r0, r5
    d2fc:	f00b feac 	bl	19058 <json_encode_array_value>
    d300:	4306      	orrs	r6, r0
        rc |= json_encode_array_finish(&json->encoder);
    d302:	4628      	mov	r0, r5
    d304:	f00b fec4 	bl	19090 <json_encode_array_finish>
    d308:	4306      	orrs	r6, r0
    d30a:	e018      	b.n	d33e <rng_json_write+0x17a>
            JSON_VALUE_FLOAT64(&value, json->raz.array[i]);
    d30c:	2306      	movs	r3, #6
    d30e:	f88d 3001 	strb.w	r3, [sp, #1]
    d312:	f106 0312 	add.w	r3, r6, #18
    d316:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    d31a:	e9d3 2300 	ldrd	r2, r3, [r3]
    d31e:	e9cd 2302 	strd	r2, r3, [sp, #8]
            rc |= json_encode_array_value(&json->encoder, &value);
    d322:	4669      	mov	r1, sp
    d324:	4628      	mov	r0, r5
    d326:	f00b fe97 	bl	19058 <json_encode_array_value>
    d32a:	4307      	orrs	r7, r0
        for (uint8_t i = 0; i< sizeof(json->raz)/sizeof(dpl_float64_t); i++){
    d32c:	3601      	adds	r6, #1
    d32e:	b2f6      	uxtb	r6, r6
    d330:	2e02      	cmp	r6, #2
    d332:	d9eb      	bls.n	d30c <rng_json_write+0x148>
        }
        rc |= json_encode_array_finish(&json->encoder);
    d334:	4628      	mov	r0, r5
    d336:	f00b feab 	bl	19090 <json_encode_array_finish>
    d33a:	ea47 0600 	orr.w	r6, r7, r0
    }

    if(!DPL_FLOAT64_ISNAN(json->braz.range)){
    d33e:	e9d4 012a 	ldrd	r0, r1, [r4, #168]	; 0xa8
    d342:	4602      	mov	r2, r0
    d344:	460b      	mov	r3, r1
    d346:	f014 facd 	bl	218e4 <__aeabi_dcmpun>
    d34a:	2800      	cmp	r0, #0
    d34c:	d14b      	bne.n	d3e6 <rng_json_write+0x222>
        if(DPL_FLOAT64_ISNAN(json->braz.azimuth) && DPL_FLOAT64_ISNAN(json->braz.zenith)){
    d34e:	e9d4 012c 	ldrd	r0, r1, [r4, #176]	; 0xb0
    d352:	4602      	mov	r2, r0
    d354:	460b      	mov	r3, r1
    d356:	f014 fac5 	bl	218e4 <__aeabi_dcmpun>
    d35a:	b950      	cbnz	r0, d372 <rng_json_write+0x1ae>
            rc |= json_encode_array_start(&json->encoder);
            JSON_VALUE_FLOAT64(&value, json->braz.range);
            rc |= json_encode_array_value(&json->encoder, &value);
            rc |= json_encode_array_finish(&json->encoder);
        }else{
            rc |= json_encode_array_name(&json->encoder, "braz");
    d35c:	4964      	ldr	r1, [pc, #400]	; (d4f0 <rng_json_write+0x32c>)
    d35e:	4628      	mov	r0, r5
    d360:	f00b fe66 	bl	19030 <json_encode_array_name>
    d364:	4306      	orrs	r6, r0
            rc |= json_encode_array_start(&json->encoder);
    d366:	4628      	mov	r0, r5
    d368:	f00b fe66 	bl	19038 <json_encode_array_start>
    d36c:	4306      	orrs	r6, r0
            for (uint8_t i = 0; i< sizeof(json->braz)/sizeof(dpl_float64_t); i++){
    d36e:	2700      	movs	r7, #0
    d370:	e033      	b.n	d3da <rng_json_write+0x216>
        if(DPL_FLOAT64_ISNAN(json->braz.azimuth) && DPL_FLOAT64_ISNAN(json->braz.zenith)){
    d372:	e9d4 012e 	ldrd	r0, r1, [r4, #184]	; 0xb8
    d376:	4602      	mov	r2, r0
    d378:	460b      	mov	r3, r1
    d37a:	f014 fab3 	bl	218e4 <__aeabi_dcmpun>
    d37e:	2800      	cmp	r0, #0
    d380:	d0ec      	beq.n	d35c <rng_json_write+0x198>
            rc |= json_encode_array_name(&json->encoder, "braz");
    d382:	495b      	ldr	r1, [pc, #364]	; (d4f0 <rng_json_write+0x32c>)
    d384:	4628      	mov	r0, r5
    d386:	f00b fe53 	bl	19030 <json_encode_array_name>
    d38a:	4306      	orrs	r6, r0
            rc |= json_encode_array_start(&json->encoder);
    d38c:	4628      	mov	r0, r5
    d38e:	f00b fe53 	bl	19038 <json_encode_array_start>
    d392:	4306      	orrs	r6, r0
            JSON_VALUE_FLOAT64(&value, json->braz.range);
    d394:	2306      	movs	r3, #6
    d396:	f88d 3001 	strb.w	r3, [sp, #1]
    d39a:	e9d4 232a 	ldrd	r2, r3, [r4, #168]	; 0xa8
    d39e:	e9cd 2302 	strd	r2, r3, [sp, #8]
            rc |= json_encode_array_value(&json->encoder, &value);
    d3a2:	4669      	mov	r1, sp
    d3a4:	4628      	mov	r0, r5
    d3a6:	f00b fe57 	bl	19058 <json_encode_array_value>
    d3aa:	4306      	orrs	r6, r0
            rc |= json_encode_array_finish(&json->encoder);
    d3ac:	4628      	mov	r0, r5
    d3ae:	f00b fe6f 	bl	19090 <json_encode_array_finish>
    d3b2:	4306      	orrs	r6, r0
    d3b4:	e017      	b.n	d3e6 <rng_json_write+0x222>
                JSON_VALUE_FLOAT64(&value, json->braz.array[i]);
    d3b6:	2306      	movs	r3, #6
    d3b8:	f88d 3001 	strb.w	r3, [sp, #1]
    d3bc:	f107 0315 	add.w	r3, r7, #21
    d3c0:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    d3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
    d3c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
                rc |= json_encode_array_value(&json->encoder, &value);
    d3cc:	4669      	mov	r1, sp
    d3ce:	4628      	mov	r0, r5
    d3d0:	f00b fe42 	bl	19058 <json_encode_array_value>
    d3d4:	4306      	orrs	r6, r0
            for (uint8_t i = 0; i< sizeof(json->braz)/sizeof(dpl_float64_t); i++){
    d3d6:	3701      	adds	r7, #1
    d3d8:	b2ff      	uxtb	r7, r7
    d3da:	2f02      	cmp	r7, #2
    d3dc:	d9eb      	bls.n	d3b6 <rng_json_write+0x1f2>
            }
            rc |= json_encode_array_finish(&json->encoder);
    d3de:	4628      	mov	r0, r5
    d3e0:	f00b fe56 	bl	19090 <json_encode_array_finish>
    d3e4:	4306      	orrs	r6, r0
        }
    }

    if(!DPL_FLOAT64_ISNAN(json->rssi[0])){
    d3e6:	e9d4 8930 	ldrd	r8, r9, [r4, #192]	; 0xc0
    d3ea:	4642      	mov	r2, r8
    d3ec:	464b      	mov	r3, r9
    d3ee:	4640      	mov	r0, r8
    d3f0:	4649      	mov	r1, r9
    d3f2:	f014 fa77 	bl	218e4 <__aeabi_dcmpun>
    d3f6:	2800      	cmp	r0, #0
    d3f8:	d149      	bne.n	d48e <rng_json_write+0x2ca>
        if(!DPL_FLOAT64_ISNAN(json->rssi[0]) && DPL_FLOAT64_ISNAN(json->rssi[1]) && DPL_FLOAT64_ISNAN(json->rssi[2])){
    d3fa:	e9d4 0132 	ldrd	r0, r1, [r4, #200]	; 0xc8
    d3fe:	4602      	mov	r2, r0
    d400:	460b      	mov	r3, r1
    d402:	f014 fa6f 	bl	218e4 <__aeabi_dcmpun>
    d406:	b950      	cbnz	r0, d41e <rng_json_write+0x25a>
                rc |= json_encode_array_name(&json->encoder, "rssi");
                rc |= json_encode_array_start(&json->encoder);
                rc |= json_encode_array_value(&json->encoder, &value);
                rc |= json_encode_array_finish(&json->encoder);
        }else{
                rc |= json_encode_array_name(&json->encoder, "rssi");
    d408:	493a      	ldr	r1, [pc, #232]	; (d4f4 <rng_json_write+0x330>)
    d40a:	4628      	mov	r0, r5
    d40c:	f00b fe10 	bl	19030 <json_encode_array_name>
    d410:	4306      	orrs	r6, r0
                rc |= json_encode_array_start(&json->encoder);
    d412:	4628      	mov	r0, r5
    d414:	f00b fe10 	bl	19038 <json_encode_array_start>
    d418:	4306      	orrs	r6, r0
                for (uint8_t i = 0; i< sizeof(json->rssi)/sizeof(dpl_float64_t); i++){
    d41a:	2700      	movs	r7, #0
    d41c:	e031      	b.n	d482 <rng_json_write+0x2be>
        if(!DPL_FLOAT64_ISNAN(json->rssi[0]) && DPL_FLOAT64_ISNAN(json->rssi[1]) && DPL_FLOAT64_ISNAN(json->rssi[2])){
    d41e:	e9d4 0134 	ldrd	r0, r1, [r4, #208]	; 0xd0
    d422:	4602      	mov	r2, r0
    d424:	460b      	mov	r3, r1
    d426:	f014 fa5d 	bl	218e4 <__aeabi_dcmpun>
    d42a:	2800      	cmp	r0, #0
    d42c:	d0ec      	beq.n	d408 <rng_json_write+0x244>
                JSON_VALUE_FLOAT64(&value, json->rssi[0]);
    d42e:	2306      	movs	r3, #6
    d430:	f88d 3001 	strb.w	r3, [sp, #1]
    d434:	e9cd 8902 	strd	r8, r9, [sp, #8]
                rc |= json_encode_array_name(&json->encoder, "rssi");
    d438:	492e      	ldr	r1, [pc, #184]	; (d4f4 <rng_json_write+0x330>)
    d43a:	4628      	mov	r0, r5
    d43c:	f00b fdf8 	bl	19030 <json_encode_array_name>
    d440:	4306      	orrs	r6, r0
                rc |= json_encode_array_start(&json->encoder);
    d442:	4628      	mov	r0, r5
    d444:	f00b fdf8 	bl	19038 <json_encode_array_start>
    d448:	4306      	orrs	r6, r0
                rc |= json_encode_array_value(&json->encoder, &value);
    d44a:	4669      	mov	r1, sp
    d44c:	4628      	mov	r0, r5
    d44e:	f00b fe03 	bl	19058 <json_encode_array_value>
    d452:	4306      	orrs	r6, r0
                rc |= json_encode_array_finish(&json->encoder);
    d454:	4628      	mov	r0, r5
    d456:	f00b fe1b 	bl	19090 <json_encode_array_finish>
    d45a:	4306      	orrs	r6, r0
    d45c:	e017      	b.n	d48e <rng_json_write+0x2ca>
                    JSON_VALUE_FLOAT64(&value, json->rssi[i]);
    d45e:	2306      	movs	r3, #6
    d460:	f88d 3001 	strb.w	r3, [sp, #1]
    d464:	f107 0318 	add.w	r3, r7, #24
    d468:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    d46c:	e9d3 2300 	ldrd	r2, r3, [r3]
    d470:	e9cd 2302 	strd	r2, r3, [sp, #8]
                    rc |= json_encode_array_value(&json->encoder, &value);
    d474:	4669      	mov	r1, sp
    d476:	4628      	mov	r0, r5
    d478:	f00b fdee 	bl	19058 <json_encode_array_value>
    d47c:	4306      	orrs	r6, r0
                for (uint8_t i = 0; i< sizeof(json->rssi)/sizeof(dpl_float64_t); i++){
    d47e:	3701      	adds	r7, #1
    d480:	b2ff      	uxtb	r7, r7
    d482:	2f02      	cmp	r7, #2
    d484:	d9eb      	bls.n	d45e <rng_json_write+0x29a>
                }
                rc |= json_encode_array_finish(&json->encoder);
    d486:	4628      	mov	r0, r5
    d488:	f00b fe02 	bl	19090 <json_encode_array_finish>
    d48c:	4306      	orrs	r6, r0
        }
    }

    if(!DPL_FLOAT64_ISNAN(json->los[0])){
    d48e:	e9d4 8938 	ldrd	r8, r9, [r4, #224]	; 0xe0
    d492:	4642      	mov	r2, r8
    d494:	464b      	mov	r3, r9
    d496:	4640      	mov	r0, r8
    d498:	4649      	mov	r1, r9
    d49a:	f014 fa23 	bl	218e4 <__aeabi_dcmpun>
    d49e:	2800      	cmp	r0, #0
    d4a0:	d164      	bne.n	d56c <rng_json_write+0x3a8>
        if(!DPL_FLOAT64_ISNAN(json->los[0]) && DPL_FLOAT64_ISNAN(json->los[1]) && DPL_FLOAT64_ISNAN(json->los[2])){
    d4a2:	e9d4 013a 	ldrd	r0, r1, [r4, #232]	; 0xe8
    d4a6:	4602      	mov	r2, r0
    d4a8:	460b      	mov	r3, r1
    d4aa:	f014 fa1b 	bl	218e4 <__aeabi_dcmpun>
    d4ae:	bb28      	cbnz	r0, d4fc <rng_json_write+0x338>
                rc |= json_encode_array_name(&json->encoder, "los");
                rc |= json_encode_array_start(&json->encoder);
                rc |= json_encode_array_value(&json->encoder, &value);
                rc |= json_encode_array_finish(&json->encoder);
        }else{
                rc |= json_encode_array_name(&json->encoder, "los");
    d4b0:	4911      	ldr	r1, [pc, #68]	; (d4f8 <rng_json_write+0x334>)
    d4b2:	4628      	mov	r0, r5
    d4b4:	f00b fdbc 	bl	19030 <json_encode_array_name>
    d4b8:	4306      	orrs	r6, r0
                rc |= json_encode_array_start(&json->encoder);
    d4ba:	4628      	mov	r0, r5
    d4bc:	f00b fdbc 	bl	19038 <json_encode_array_start>
    d4c0:	4306      	orrs	r6, r0
                for (uint8_t i = 0; i< sizeof(json->los)/sizeof(dpl_float64_t); i++){
    d4c2:	2700      	movs	r7, #0
    d4c4:	e04c      	b.n	d560 <rng_json_write+0x39c>
    d4c6:	bf00      	nop
    d4c8:	0000d181 	.word	0x0000d181
    d4cc:	000190ad 	.word	0x000190ad
    d4d0:	000190c9 	.word	0x000190c9
    d4d4:	000190db 	.word	0x000190db
    d4d8:	0002331c 	.word	0x0002331c
    d4dc:	00023338 	.word	0x00023338
    d4e0:	00023324 	.word	0x00023324
    d4e4:	00023328 	.word	0x00023328
    d4e8:	0002332c 	.word	0x0002332c
    d4ec:	00023330 	.word	0x00023330
    d4f0:	0002333c 	.word	0x0002333c
    d4f4:	00023344 	.word	0x00023344
    d4f8:	0002334c 	.word	0x0002334c
        if(!DPL_FLOAT64_ISNAN(json->los[0]) && DPL_FLOAT64_ISNAN(json->los[1]) && DPL_FLOAT64_ISNAN(json->los[2])){
    d4fc:	e9d4 013c 	ldrd	r0, r1, [r4, #240]	; 0xf0
    d500:	4602      	mov	r2, r0
    d502:	460b      	mov	r3, r1
    d504:	f014 f9ee 	bl	218e4 <__aeabi_dcmpun>
    d508:	2800      	cmp	r0, #0
    d50a:	d0d1      	beq.n	d4b0 <rng_json_write+0x2ec>
                JSON_VALUE_FLOAT64(&value, json->los[0]);
    d50c:	2306      	movs	r3, #6
    d50e:	f88d 3001 	strb.w	r3, [sp, #1]
    d512:	e9cd 8902 	strd	r8, r9, [sp, #8]
                rc |= json_encode_array_name(&json->encoder, "los");
    d516:	4936      	ldr	r1, [pc, #216]	; (d5f0 <rng_json_write+0x42c>)
    d518:	4628      	mov	r0, r5
    d51a:	f00b fd89 	bl	19030 <json_encode_array_name>
    d51e:	4306      	orrs	r6, r0
                rc |= json_encode_array_start(&json->encoder);
    d520:	4628      	mov	r0, r5
    d522:	f00b fd89 	bl	19038 <json_encode_array_start>
    d526:	4306      	orrs	r6, r0
                rc |= json_encode_array_value(&json->encoder, &value);
    d528:	4669      	mov	r1, sp
    d52a:	4628      	mov	r0, r5
    d52c:	f00b fd94 	bl	19058 <json_encode_array_value>
    d530:	4306      	orrs	r6, r0
                rc |= json_encode_array_finish(&json->encoder);
    d532:	4628      	mov	r0, r5
    d534:	f00b fdac 	bl	19090 <json_encode_array_finish>
    d538:	4306      	orrs	r6, r0
    d53a:	e017      	b.n	d56c <rng_json_write+0x3a8>
                    JSON_VALUE_FLOAT64(&value, json->los[i]);
    d53c:	2306      	movs	r3, #6
    d53e:	f88d 3001 	strb.w	r3, [sp, #1]
    d542:	f107 031c 	add.w	r3, r7, #28
    d546:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    d54a:	e9d3 2300 	ldrd	r2, r3, [r3]
    d54e:	e9cd 2302 	strd	r2, r3, [sp, #8]
                    rc |= json_encode_array_value(&json->encoder, &value);
    d552:	4669      	mov	r1, sp
    d554:	4628      	mov	r0, r5
    d556:	f00b fd7f 	bl	19058 <json_encode_array_value>
    d55a:	4306      	orrs	r6, r0
                for (uint8_t i = 0; i< sizeof(json->los)/sizeof(dpl_float64_t); i++){
    d55c:	3701      	adds	r7, #1
    d55e:	b2ff      	uxtb	r7, r7
    d560:	2f02      	cmp	r7, #2
    d562:	d9eb      	bls.n	d53c <rng_json_write+0x378>
                }
                rc |= json_encode_array_finish(&json->encoder);
    d564:	4628      	mov	r0, r5
    d566:	f00b fd93 	bl	19090 <json_encode_array_finish>
    d56a:	4306      	orrs	r6, r0
        }
    }

    if (!DPL_FLOAT64_ISNAN(json->ppm)){
    d56c:	e9d4 8940 	ldrd	r8, r9, [r4, #256]	; 0x100
    d570:	4642      	mov	r2, r8
    d572:	464b      	mov	r3, r9
    d574:	4640      	mov	r0, r8
    d576:	4649      	mov	r1, r9
    d578:	f014 f9b4 	bl	218e4 <__aeabi_dcmpun>
    d57c:	b950      	cbnz	r0, d594 <rng_json_write+0x3d0>
        JSON_VALUE_FLOAT64(&value, json->ppm);
    d57e:	2306      	movs	r3, #6
    d580:	f88d 3001 	strb.w	r3, [sp, #1]
    d584:	e9cd 8902 	strd	r8, r9, [sp, #8]
        rc |= json_encode_object_entry(&json->encoder, "ppm", &value);
    d588:	466a      	mov	r2, sp
    d58a:	491a      	ldr	r1, [pc, #104]	; (d5f4 <rng_json_write+0x430>)
    d58c:	4628      	mov	r0, r5
    d58e:	f00b fb99 	bl	18cc4 <json_encode_object_entry>
    d592:	4306      	orrs	r6, r0
    }

    if (!DPL_FLOAT64_ISNAN(json->sts)){
    d594:	e9d4 8942 	ldrd	r8, r9, [r4, #264]	; 0x108
    d598:	4642      	mov	r2, r8
    d59a:	464b      	mov	r3, r9
    d59c:	4640      	mov	r0, r8
    d59e:	4649      	mov	r1, r9
    d5a0:	f014 f9a0 	bl	218e4 <__aeabi_dcmpun>
    d5a4:	b950      	cbnz	r0, d5bc <rng_json_write+0x3f8>
        JSON_VALUE_FLOAT64(&value, json->sts);
    d5a6:	2306      	movs	r3, #6
    d5a8:	f88d 3001 	strb.w	r3, [sp, #1]
    d5ac:	e9cd 8902 	strd	r8, r9, [sp, #8]
        rc |= json_encode_object_entry(&json->encoder, "sts", &value);
    d5b0:	466a      	mov	r2, sp
    d5b2:	4911      	ldr	r1, [pc, #68]	; (d5f8 <rng_json_write+0x434>)
    d5b4:	4628      	mov	r0, r5
    d5b6:	f00b fb85 	bl	18cc4 <json_encode_object_entry>
    d5ba:	4306      	orrs	r6, r0
    }
    rc |= json_encode_object_finish(&json->encoder);
    d5bc:	4628      	mov	r0, r5
    d5be:	f00b fd27 	bl	19010 <json_encode_object_finish>
    json->encoder.je_wr_commas = 0;
    d5c2:	f894 3020 	ldrb.w	r3, [r4, #32]
    d5c6:	f36f 0300 	bfc	r3, #0, #1
    d5ca:	f884 3020 	strb.w	r3, [r4, #32]
    assert(rc == 0);
    d5ce:	4306      	orrs	r6, r0
    d5d0:	d108      	bne.n	d5e4 <rng_json_write+0x420>

    rng_write_line(json->encoder.je_arg, "\0", 1);
    d5d2:	2201      	movs	r2, #1
    d5d4:	4909      	ldr	r1, [pc, #36]	; (d5fc <rng_json_write+0x438>)
    d5d6:	69e0      	ldr	r0, [r4, #28]
    d5d8:	f7ff fdd2 	bl	d180 <rng_write_line>

    return rc;
}
    d5dc:	4630      	mov	r0, r6
    d5de:	b005      	add	sp, #20
    d5e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    assert(rc == 0);
    d5e4:	2300      	movs	r3, #0
    d5e6:	461a      	mov	r2, r3
    d5e8:	4619      	mov	r1, r3
    d5ea:	4618      	mov	r0, r3
    d5ec:	f7fb fcba 	bl	8f64 <__assert_func>
    d5f0:	0002334c 	.word	0x0002334c
    d5f4:	00023350 	.word	0x00023350
    d5f8:	00023354 	.word	0x00023354
    d5fc:	00023358 	.word	0x00023358

0000d600 <uwb_wcs_init>:
 * returns struct uwb_wcs_instance *
 */

struct uwb_wcs_instance *
uwb_wcs_init(struct uwb_wcs_instance * wcs, struct uwb_ccp_instance * ccp)
{
    d600:	b510      	push	{r4, lr}
    d602:	460c      	mov	r4, r1
    if (wcs == NULL ) {
    d604:	4603      	mov	r3, r0
    d606:	b150      	cbz	r0, d61e <uwb_wcs_init+0x1e>
        wcs = (struct uwb_wcs_instance *) calloc(1, sizeof(struct uwb_wcs_instance));
        assert(wcs);
        wcs->status.selfmalloc = 1;
    }
    wcs->ccp = ccp;
    d608:	661c      	str	r4, [r3, #96]	; 0x60
    wcs->normalized_skew = DPL_FLOAT64_INIT(1.0l);
    d60a:	2000      	movs	r0, #0
    d60c:	490c      	ldr	r1, [pc, #48]	; (d640 <uwb_wcs_init+0x40>)
    d60e:	e9c3 0110 	strd	r0, r1, [r3, #64]	; 0x40
    wcs->fractional_skew = DPL_FLOAT64_INIT(0.0l);
    d612:	2000      	movs	r0, #0
    d614:	2100      	movs	r1, #0
    d616:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48

    return wcs;
}
    d61a:	4618      	mov	r0, r3
    d61c:	bd10      	pop	{r4, pc}
        wcs = (struct uwb_wcs_instance *) calloc(1, sizeof(struct uwb_wcs_instance));
    d61e:	21a8      	movs	r1, #168	; 0xa8
    d620:	2001      	movs	r0, #1
    d622:	f000 f918 	bl	d856 <calloc>
        assert(wcs);
    d626:	4603      	mov	r3, r0
    d628:	b120      	cbz	r0, d634 <uwb_wcs_init+0x34>
        wcs->status.selfmalloc = 1;
    d62a:	7802      	ldrb	r2, [r0, #0]
    d62c:	f042 0201 	orr.w	r2, r2, #1
    d630:	7002      	strb	r2, [r0, #0]
    d632:	e7e9      	b.n	d608 <uwb_wcs_init+0x8>
        assert(wcs);
    d634:	2300      	movs	r3, #0
    d636:	461a      	mov	r2, r3
    d638:	4619      	mov	r1, r3
    d63a:	4618      	mov	r0, r3
    d63c:	f7fb fc92 	bl	8f64 <__assert_func>
    d640:	3ff00000 	.word	0x3ff00000

0000d644 <uwb_wcs_free>:
 *
 * returns none
 */
void
uwb_wcs_free(struct uwb_wcs_instance * inst)
{
    d644:	b510      	push	{r4, lr}
    assert(inst);
    d646:	b168      	cbz	r0, d664 <uwb_wcs_free+0x20>
    d648:	4604      	mov	r4, r0
#ifndef __KERNEL__
#if MYNEWT_VAL(TIMESCALE_ENABLED)
    timescale_free(inst->timescale);
    d64a:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
    d64e:	f00c f86b 	bl	19728 <timescale_free>
#endif
#endif
    if (inst->status.selfmalloc)
    d652:	7823      	ldrb	r3, [r4, #0]
    d654:	f013 0f01 	tst.w	r3, #1
    d658:	d10a      	bne.n	d670 <uwb_wcs_free+0x2c>
        free(inst);
    else
        inst->status.initialized = 0;
    d65a:	7823      	ldrb	r3, [r4, #0]
    d65c:	f36f 0341 	bfc	r3, #1, #1
    d660:	7023      	strb	r3, [r4, #0]
}
    d662:	bd10      	pop	{r4, pc}
    assert(inst);
    d664:	2300      	movs	r3, #0
    d666:	461a      	mov	r2, r3
    d668:	4619      	mov	r1, r3
    d66a:	4618      	mov	r0, r3
    d66c:	f7fb fc7a 	bl	8f64 <__assert_func>
        free(inst);
    d670:	4620      	mov	r0, r4
    d672:	f000 f9eb 	bl	da4c <free>
    d676:	e7f4      	b.n	d662 <uwb_wcs_free+0x1e>

0000d678 <uwb_wcs_set_postprocess>:
 * returns none
 */
void
uwb_wcs_set_postprocess(struct uwb_wcs_instance * wcs, dpl_event_fn * postprocess)
{
    if(!wcs) return;
    d678:	4603      	mov	r3, r0
    d67a:	b150      	cbz	r0, d692 <uwb_wcs_set_postprocess+0x1a>
    memset(ev, 0, sizeof(*ev));
    d67c:	2200      	movs	r2, #0
    d67e:	6502      	str	r2, [r0, #80]	; 0x50
    d680:	6542      	str	r2, [r0, #84]	; 0x54
    d682:	6582      	str	r2, [r0, #88]	; 0x58
    d684:	65c2      	str	r2, [r0, #92]	; 0x5c
    ev->ev.ev_cb = (os_event_fn *)fn;
    d686:	6541      	str	r1, [r0, #84]	; 0x54
    ev->ev.ev_arg = arg;
    d688:	6598      	str	r0, [r3, #88]	; 0x58
    dpl_event_init(&wcs->postprocess_ev, postprocess, (void *)wcs);
    wcs->config.postprocess = true;
    d68a:	7902      	ldrb	r2, [r0, #4]
    d68c:	f042 0201 	orr.w	r2, r2, #1
    d690:	7102      	strb	r2, [r0, #4]
}
    d692:	4770      	bx	lr

0000d694 <uwb_wcs_dtu_time_adjust>:
 * @return dtu_time compensated.
 *
 */
uint64_t
uwb_wcs_dtu_time_adjust(struct uwb_wcs_instance * wcs, uint64_t dtu_time)
{
    d694:	4619      	mov	r1, r3
    if(!wcs) return dtu_time;
    d696:	b1b8      	cbz	r0, d6c8 <uwb_wcs_dtu_time_adjust+0x34>
{
    d698:	b538      	push	{r3, r4, r5, lr}
    d69a:	4603      	mov	r3, r0
    if (wcs->status.valid){
    d69c:	7800      	ldrb	r0, [r0, #0]
    d69e:	f010 0f04 	tst.w	r0, #4
    d6a2:	d00d      	beq.n	d6c0 <uwb_wcs_dtu_time_adjust+0x2c>
        dtu_time = (uint64_t) DPL_FLOAT64_INT(DPL_FLOAT64_MUL(wcs->normalized_skew,DPL_FLOAT64_I64_TO_F64(dtu_time)));
    d6a4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
    d6a8:	4610      	mov	r0, r2
    d6aa:	f013 fe4b 	bl	21344 <__aeabi_ul2d>
    d6ae:	4602      	mov	r2, r0
    d6b0:	460b      	mov	r3, r1
    d6b2:	4620      	mov	r0, r4
    d6b4:	4629      	mov	r1, r5
    d6b6:	f013 fe7b 	bl	213b0 <__aeabi_dmul>
    d6ba:	f014 fa29 	bl	21b10 <__aeabi_d2lz>
    d6be:	4602      	mov	r2, r0
    }

    return dtu_time & 0x00FFFFFFFFFFUL;
    d6c0:	4610      	mov	r0, r2
    d6c2:	f001 01ff 	and.w	r1, r1, #255	; 0xff
}
    d6c6:	bd38      	pop	{r3, r4, r5, pc}
    if(!wcs) return dtu_time;
    d6c8:	4610      	mov	r0, r2
}
    d6ca:	4770      	bx	lr

0000d6cc <uwb_wcs_prediction>:
 * @param T interval over which to predict.
 * @return Clock master prediction for local epoch T
 */
dpl_float64_t
uwb_wcs_prediction(dpl_float64_t * x, dpl_float64_t T)
{
    d6cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    d6ce:	b087      	sub	sp, #28
    d6d0:	4605      	mov	r5, r0
    d6d2:	ec51 0b10 	vmov	r0, r1, d0
    // x = A * x;
    dpl_float64_t A[] = { DPL_FLOAT64_INIT(1.0l), T, DPL_FLOAT64_DIV(DPL_FLOAT64_MUL(T,T),DPL_FLOAT64_INIT(2.0l))};
    d6d6:	2200      	movs	r2, #0
    d6d8:	4b17      	ldr	r3, [pc, #92]	; (d738 <uwb_wcs_prediction+0x6c>)
    d6da:	e9cd 2300 	strd	r2, r3, [sp]
    d6de:	ed8d 0b02 	vstr	d0, [sp, #8]
    d6e2:	ee10 2a10 	vmov	r2, s0
    d6e6:	460b      	mov	r3, r1
    d6e8:	f013 fe62 	bl	213b0 <__aeabi_dmul>
    d6ec:	2200      	movs	r2, #0
    d6ee:	4b13      	ldr	r3, [pc, #76]	; (d73c <uwb_wcs_prediction+0x70>)
    d6f0:	f013 fe5e 	bl	213b0 <__aeabi_dmul>
    d6f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
    dpl_float64_t tmp = DPL_FLOAT64_INIT(0.0l);
    for (uint8_t i=0 ; i < sizeof(A)/sizeof(dpl_float64_t); i++ ){
    d6f8:	2400      	movs	r4, #0
    dpl_float64_t tmp = DPL_FLOAT64_INIT(0.0l);
    d6fa:	2600      	movs	r6, #0
    d6fc:	2700      	movs	r7, #0
    for (uint8_t i=0 ; i < sizeof(A)/sizeof(dpl_float64_t); i++ ){
    d6fe:	e014      	b.n	d72a <uwb_wcs_prediction+0x5e>
            tmp = DPL_FLOAT64_ADD(tmp,DPL_FLOAT64_MUL(A[i],x[i]));
    d700:	ab06      	add	r3, sp, #24
    d702:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
    d706:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
    d70a:	e9d3 2300 	ldrd	r2, r3, [r3]
    d70e:	e951 0106 	ldrd	r0, r1, [r1, #-24]
    d712:	f013 fe4d 	bl	213b0 <__aeabi_dmul>
    d716:	4602      	mov	r2, r0
    d718:	460b      	mov	r3, r1
    d71a:	4630      	mov	r0, r6
    d71c:	4639      	mov	r1, r7
    d71e:	f013 fc91 	bl	21044 <__adddf3>
    d722:	4606      	mov	r6, r0
    d724:	460f      	mov	r7, r1
    for (uint8_t i=0 ; i < sizeof(A)/sizeof(dpl_float64_t); i++ ){
    d726:	3401      	adds	r4, #1
    d728:	b2e4      	uxtb	r4, r4
    d72a:	2c02      	cmp	r4, #2
    d72c:	d9e8      	bls.n	d700 <uwb_wcs_prediction+0x34>
    }
    return tmp;
}
    d72e:	ec47 6b10 	vmov	d0, r6, r7
    d732:	b007      	add	sp, #28
    d734:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d736:	bf00      	nop
    d738:	3ff00000 	.word	0x3ff00000
    d73c:	3fe00000 	.word	0x3fe00000

0000d740 <uwb_wcs_local_to_master64>:
    if(!wcs) return 0xffffffffffffffffULL;
    d740:	b350      	cbz	r0, d798 <uwb_wcs_local_to_master64+0x58>
{
    d742:	b510      	push	{r4, lr}
    d744:	4604      	mov	r4, r0
    delta = ((dtu_time & 0x0FFFFFFFFFFUL) - wcs->local_epoch.lo) & 0x0FFFFFFFFFFUL;
    d746:	6980      	ldr	r0, [r0, #24]
    d748:	7f21      	ldrb	r1, [r4, #28]
    d74a:	1a10      	subs	r0, r2, r0
    d74c:	eb63 0301 	sbc.w	r3, r3, r1
    d750:	4602      	mov	r2, r0
    d752:	f003 01ff 	and.w	r1, r3, #255	; 0xff
    if (wcs->status.valid) {
    d756:	7823      	ldrb	r3, [r4, #0]
    d758:	f013 0f04 	tst.w	r3, #4
    d75c:	d016      	beq.n	d78c <uwb_wcs_local_to_master64+0x4c>
        interval = DPL_FLOAT64_DIV(DPL_FLOAT64_U64_TO_F64(delta), DPL_FLOAT64_INIT(MYNEWT_VAL(UWB_WCS_DTU)));
    d75e:	f013 fdf1 	bl	21344 <__aeabi_ul2d>
    d762:	a30f      	add	r3, pc, #60	; (adr r3, d7a0 <uwb_wcs_local_to_master64+0x60>)
    d764:	e9d3 2300 	ldrd	r2, r3, [r3]
    d768:	f013 ff4c 	bl	21604 <__aeabi_ddiv>
        master_lo40 = (uint64_t) DPL_FLOAT64_INT(uwb_wcs_prediction(wcs->states.array, interval));
    d76c:	ec41 0b10 	vmov	d0, r0, r1
    d770:	f104 0020 	add.w	r0, r4, #32
    d774:	f7ff ffaa 	bl	d6cc <uwb_wcs_prediction>
    d778:	ec51 0b10 	vmov	r0, r1, d0
    d77c:	f014 f9c8 	bl	21b10 <__aeabi_d2lz>
    d780:	460b      	mov	r3, r1
    return (wcs->master_epoch.timestamp & 0xFFFFFF0000000000UL) + master_lo40;
    d782:	6961      	ldr	r1, [r4, #20]
    d784:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    d788:	4419      	add	r1, r3
}
    d78a:	bd10      	pop	{r4, pc}
        master_lo40 = wcs->master_epoch.lo + delta;
    d78c:	6920      	ldr	r0, [r4, #16]
    d78e:	7d23      	ldrb	r3, [r4, #20]
    d790:	1880      	adds	r0, r0, r2
    d792:	eb43 0301 	adc.w	r3, r3, r1
    d796:	e7f4      	b.n	d782 <uwb_wcs_local_to_master64+0x42>
    if(!wcs) return 0xffffffffffffffffULL;
    d798:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d79c:	4601      	mov	r1, r0
}
    d79e:	4770      	bx	lr
    d7a0:	00000000 	.word	0x00000000
    d7a4:	422e8480 	.word	0x422e8480

0000d7a8 <uwb_wcs_local_to_master>:
{
    d7a8:	b508      	push	{r3, lr}
    assert(wcs);
    d7aa:	b118      	cbz	r0, d7b4 <uwb_wcs_local_to_master+0xc>
    return uwb_wcs_local_to_master64(wcs, dtu_time) & 0x0FFFFFFFFFFUL;
    d7ac:	f7ff ffc8 	bl	d740 <uwb_wcs_local_to_master64>
}
    d7b0:	b2c9      	uxtb	r1, r1
    d7b2:	bd08      	pop	{r3, pc}
    assert(wcs);
    d7b4:	2300      	movs	r3, #0
    d7b6:	461a      	mov	r2, r3
    d7b8:	4619      	mov	r1, r3
    d7ba:	4618      	mov	r0, r3
    d7bc:	f7fb fbd2 	bl	8f64 <__assert_func>

0000d7c0 <uwb_wcs_read_systime_master64>:
{
    d7c0:	b538      	push	{r3, r4, r5, lr}
    d7c2:	4604      	mov	r4, r0
    struct uwb_ccp_instance *ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(inst, UWBEXT_CCP);
    d7c4:	2101      	movs	r1, #1
    d7c6:	f7fb f9aa 	bl	8b1e <uwb_mac_find_cb_inst_ptr>
    struct uwb_wcs_instance *wcs = ccp->wcs;
    d7ca:	6e85      	ldr	r5, [r0, #104]	; 0x68
    return (dev->uw_funcs->uf_read_systime(dev));
    d7cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d7ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    d7d0:	4620      	mov	r0, r4
    d7d2:	4798      	blx	r3
    d7d4:	4602      	mov	r2, r0
    d7d6:	460b      	mov	r3, r1
    return uwb_wcs_local_to_master64(wcs, uwb_read_systime(inst));
    d7d8:	4628      	mov	r0, r5
    d7da:	f7ff ffb1 	bl	d740 <uwb_wcs_local_to_master64>
}
    d7de:	bd38      	pop	{r3, r4, r5, pc}

0000d7e0 <uwb_wcs_pkg_init>:
 *
 * @return void
 */
void
uwb_wcs_pkg_init(void)
{
    d7e0:	b538      	push	{r3, r4, r5, lr}
    int i;
    struct uwb_dev * udev;
    struct uwb_ccp_instance * ccp;
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    printf("{\"utime\": %"PRIu32",\"msg\": \"uwb_wcs_pkg_init\"}\n",
    d7e2:	f000 fe12 	bl	e40a <dpl_cputime_get32>
    d7e6:	4601      	mov	r1, r0
    d7e8:	480c      	ldr	r0, [pc, #48]	; (d81c <uwb_wcs_pkg_init+0x3c>)
    d7ea:	f000 fd89 	bl	e300 <printf>
           dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
#endif

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
    d7ee:	2400      	movs	r4, #0
    d7f0:	e000      	b.n	d7f4 <uwb_wcs_pkg_init+0x14>
    d7f2:	3401      	adds	r4, #1
    d7f4:	2c02      	cmp	r4, #2
    d7f6:	dc10      	bgt.n	d81a <uwb_wcs_pkg_init+0x3a>
        udev = uwb_dev_idx_lookup(i);
    d7f8:	4620      	mov	r0, r4
    d7fa:	f7fb f90b 	bl	8a14 <uwb_dev_idx_lookup>
        if (!udev) {
    d7fe:	2800      	cmp	r0, #0
    d800:	d0f7      	beq.n	d7f2 <uwb_wcs_pkg_init+0x12>
            continue;
        }
#if MYNEWT_VAL(UWB_CCP_ENABLED)
        ccp = (struct uwb_ccp_instance *)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_CCP);
    d802:	2101      	movs	r1, #1
    d804:	f7fb f98b 	bl	8b1e <uwb_mac_find_cb_inst_ptr>
        if (!ccp) {
    d808:	4605      	mov	r5, r0
    d80a:	2800      	cmp	r0, #0
    d80c:	d0f1      	beq.n	d7f2 <uwb_wcs_pkg_init+0x12>
            continue;
        }
        ccp->wcs = uwb_wcs_init(NULL, ccp);
    d80e:	4601      	mov	r1, r0
    d810:	2000      	movs	r0, #0
    d812:	f7ff fef5 	bl	d600 <uwb_wcs_init>
    d816:	66a8      	str	r0, [r5, #104]	; 0x68
    d818:	e7eb      	b.n	d7f2 <uwb_wcs_pkg_init+0x12>
        wcs_chrdev_create(ccp->wcs);
#endif /* __KERNEL__ */
#endif
    }

}
    d81a:	bd38      	pop	{r3, r4, r5, pc}
    d81c:	0002335c 	.word	0x0002335c

0000d820 <uwb_wcs_pkg_down>:
 *
 * @return void
 */
int
uwb_wcs_pkg_down(int reason)
{
    d820:	b538      	push	{r3, r4, r5, lr}
    int i;
    struct uwb_dev * udev;
    struct uwb_ccp_instance * ccp;

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
    d822:	2400      	movs	r4, #0
    d824:	e000      	b.n	d828 <uwb_wcs_pkg_down+0x8>
    d826:	3401      	adds	r4, #1
    d828:	2c02      	cmp	r4, #2
    d82a:	dc12      	bgt.n	d852 <uwb_wcs_pkg_down+0x32>
        udev = uwb_dev_idx_lookup(i);
    d82c:	4620      	mov	r0, r4
    d82e:	f7fb f8f1 	bl	8a14 <uwb_dev_idx_lookup>
        if (!udev) {
    d832:	2800      	cmp	r0, #0
    d834:	d0f7      	beq.n	d826 <uwb_wcs_pkg_down+0x6>
        }
#if MYNEWT_VAL(UWB_CCP_ENABLED)
#ifdef __KERNEL__
        wcs_chrdev_destroy(i);
#endif /* __KERNEL__ */
        ccp = (struct uwb_ccp_instance *)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_CCP);
    d836:	2101      	movs	r1, #1
    d838:	f7fb f971 	bl	8b1e <uwb_mac_find_cb_inst_ptr>
        if (!ccp) {
    d83c:	4605      	mov	r5, r0
    d83e:	2800      	cmp	r0, #0
    d840:	d0f1      	beq.n	d826 <uwb_wcs_pkg_down+0x6>
            continue;
        }
        if (ccp->wcs) {
    d842:	6e80      	ldr	r0, [r0, #104]	; 0x68
    d844:	2800      	cmp	r0, #0
    d846:	d0ee      	beq.n	d826 <uwb_wcs_pkg_down+0x6>
            uwb_wcs_free(ccp->wcs);
    d848:	f7ff fefc 	bl	d644 <uwb_wcs_free>
            ccp->wcs = 0;
    d84c:	2300      	movs	r3, #0
    d84e:	66ab      	str	r3, [r5, #104]	; 0x68
    d850:	e7e9      	b.n	d826 <uwb_wcs_pkg_down+0x6>
        }
#endif
    }

    return 0;
}
    d852:	2000      	movs	r0, #0
    d854:	bd38      	pop	{r3, r4, r5, pc}

0000d856 <calloc>:
#include <stdlib.h>
#include <string.h>
#include <stdint.h>

void *calloc(size_t nmemb, size_t size)
{
    d856:	b538      	push	{r3, r4, r5, lr}
	void *ptr;
        int nb;

        nb = sizeof(size_t) * 4;
        if (size >= SIZE_MAX >> nb || nmemb >= SIZE_MAX >> nb) {
    d858:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    d85c:	4299      	cmp	r1, r3
    d85e:	d80e      	bhi.n	d87e <calloc+0x28>
    d860:	4298      	cmp	r0, r3
    d862:	d80e      	bhi.n	d882 <calloc+0x2c>
            return NULL;
        }
	size *= nmemb;
    d864:	fb00 f401 	mul.w	r4, r0, r1
	ptr = malloc(size);
    d868:	4620      	mov	r0, r4
    d86a:	f000 f8b9 	bl	d9e0 <malloc>
	if (ptr)
    d86e:	4605      	mov	r5, r0
    d870:	b118      	cbz	r0, d87a <calloc+0x24>
		memset(ptr, 0, size);
    d872:	4622      	mov	r2, r4
    d874:	2100      	movs	r1, #0
    d876:	f000 f930 	bl	dada <memset>

	return ptr;
}
    d87a:	4628      	mov	r0, r5
    d87c:	bd38      	pop	{r3, r4, r5, pc}
            return NULL;
    d87e:	2500      	movs	r5, #0
    d880:	e7fb      	b.n	d87a <calloc+0x24>
    d882:	2500      	movs	r5, #0
    d884:	e7f9      	b.n	d87a <calloc+0x24>

0000d886 <fwrite>:
    if (stream->vmt->read == NULL) return 0;
    return stream->vmt->read(stream, (char*)buf, size*nmemb) / size;
}

__extern_inline size_t fwrite(const void *buf, size_t size, size_t nmemb, FILE *stream)
{
    d886:	4684      	mov	ip, r0
    d888:	4618      	mov	r0, r3
    if (stream->vmt->write == NULL) return 0;
    d88a:	681b      	ldr	r3, [r3, #0]
    d88c:	681b      	ldr	r3, [r3, #0]
    d88e:	b143      	cbz	r3, d8a2 <fwrite+0x1c>
{
    d890:	b510      	push	{r4, lr}
    d892:	460c      	mov	r4, r1
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
    d894:	fb01 f202 	mul.w	r2, r1, r2
    d898:	4661      	mov	r1, ip
    d89a:	4798      	blx	r3
    d89c:	fbb0 f0f4 	udiv	r0, r0, r4
}
    d8a0:	bd10      	pop	{r4, pc}
    if (stream->vmt->write == NULL) return 0;
    d8a2:	2000      	movs	r0, #0
}
    d8a4:	4770      	bx	lr
	...

0000d8a8 <puts>:
{
	return fwrite(s, 1, strlen(s), f);
}

__extern_inline int puts(const char *s)
{
    d8a8:	b538      	push	{r3, r4, r5, lr}
    d8aa:	4604      	mov	r4, r0
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
    d8ac:	f000 f94c 	bl	db48 <strlen>
    d8b0:	4602      	mov	r2, r0
    d8b2:	4b08      	ldr	r3, [pc, #32]	; (d8d4 <puts+0x2c>)
    d8b4:	681d      	ldr	r5, [r3, #0]
    d8b6:	462b      	mov	r3, r5
    d8b8:	2101      	movs	r1, #1
    d8ba:	4620      	mov	r0, r4
    d8bc:	f7ff ffe3 	bl	d886 <fwrite>
    d8c0:	4604      	mov	r4, r0
    d8c2:	462b      	mov	r3, r5
    d8c4:	2201      	movs	r2, #1
    d8c6:	4611      	mov	r1, r2
    d8c8:	4803      	ldr	r0, [pc, #12]	; (d8d8 <puts+0x30>)
    d8ca:	f7ff ffdc 	bl	d886 <fwrite>
}
    d8ce:	4420      	add	r0, r4
    d8d0:	bd38      	pop	{r3, r4, r5, pc}
    d8d2:	bf00      	nop
    d8d4:	00023388 	.word	0x00023388
    d8d8:	00023520 	.word	0x00023520

0000d8dc <malloc_lock_nop>:
    },
    &__malloc_head,
    &__malloc_head
};

static bool malloc_lock_nop() {return true;}
    d8dc:	2001      	movs	r0, #1
    d8de:	4770      	bx	lr

0000d8e0 <malloc_unlock_nop>:
static void malloc_unlock_nop() {}
    d8e0:	4770      	bx	lr

0000d8e2 <__malloc_from_block>:
static void *__malloc_from_block(struct free_arena_header *fp, size_t size)
{
    size_t fsize;
    struct free_arena_header *nfp, *na, *fpn, *fpp;

    fsize = fp->a.size;
    d8e2:	6842      	ldr	r2, [r0, #4]

    /* We need the 2* to account for the larger requirements of a
       free block */
    if (fsize >= size + 2 * sizeof(struct arena_header)) {
    d8e4:	f101 0320 	add.w	r3, r1, #32
    d8e8:	4293      	cmp	r3, r2
    d8ea:	d816      	bhi.n	d91a <__malloc_from_block+0x38>
{
    d8ec:	b430      	push	{r4, r5}
        /* Bigger block than required -- split block */
        nfp = (struct free_arena_header *)((char *)fp + size);
    d8ee:	1843      	adds	r3, r0, r1
        na = fp->a.next;
    d8f0:	6884      	ldr	r4, [r0, #8]

        nfp->a.type = ARENA_TYPE_FREE;
    d8f2:	2501      	movs	r5, #1
    d8f4:	5045      	str	r5, [r0, r1]
        nfp->a.size = fsize - size;
    d8f6:	1a52      	subs	r2, r2, r1
    d8f8:	605a      	str	r2, [r3, #4]
        fp->a.type = ARENA_TYPE_USED;
    d8fa:	2200      	movs	r2, #0
    d8fc:	6002      	str	r2, [r0, #0]
        fp->a.size = size;
    d8fe:	6041      	str	r1, [r0, #4]

        /* Insert into all-block chain */
        nfp->a.prev = fp;
    d900:	60d8      	str	r0, [r3, #12]
        nfp->a.next = na;
    d902:	609c      	str	r4, [r3, #8]
        na->a.prev = nfp;
    d904:	60e3      	str	r3, [r4, #12]
        fp->a.next = nfp;
    d906:	6083      	str	r3, [r0, #8]

        /* Replace current block on free chain */
        nfp->next_free = fpn = fp->next_free;
    d908:	6901      	ldr	r1, [r0, #16]
    d90a:	6119      	str	r1, [r3, #16]
        nfp->prev_free = fpp = fp->prev_free;
    d90c:	6942      	ldr	r2, [r0, #20]
    d90e:	615a      	str	r2, [r3, #20]
        fpn->prev_free = nfp;
    d910:	614b      	str	r3, [r1, #20]
        fpp->next_free = nfp;
    d912:	6113      	str	r3, [r2, #16]
        fp->a.type = ARENA_TYPE_USED; /* Allocate the whole block */
        remove_from_free_chain(fp);
    }

    return (void *)(&fp->a + 1);
}
    d914:	3010      	adds	r0, #16
    d916:	bc30      	pop	{r4, r5}
    d918:	4770      	bx	lr
        fp->a.type = ARENA_TYPE_USED; /* Allocate the whole block */
    d91a:	2300      	movs	r3, #0
    d91c:	6003      	str	r3, [r0, #0]
    ap = ah->prev_free;
    d91e:	6942      	ldr	r2, [r0, #20]
    an = ah->next_free;
    d920:	6903      	ldr	r3, [r0, #16]
    ap->next_free = an;
    d922:	6113      	str	r3, [r2, #16]
    an->prev_free = ap;
    d924:	615a      	str	r2, [r3, #20]
}
    d926:	3010      	adds	r0, #16
    d928:	4770      	bx	lr
	...

0000d92c <__free_block>:

static struct free_arena_header *__free_block(struct free_arena_header *ah)
{
    d92c:	4603      	mov	r3, r0
    struct free_arena_header *pah, *nah;

    pah = ah->a.prev;
    d92e:	68c0      	ldr	r0, [r0, #12]
    nah = ah->a.next;
    d930:	6899      	ldr	r1, [r3, #8]
    if (pah->a.type == ARENA_TYPE_FREE &&
    d932:	6802      	ldr	r2, [r0, #0]
    d934:	2a01      	cmp	r2, #1
    d936:	d00d      	beq.n	d954 <__free_block+0x28>

        ah = pah;
        pah = ah->a.prev;
    } else {
        /* Need to add this block to the free chain */
        ah->a.type = ARENA_TYPE_FREE;
    d938:	2201      	movs	r2, #1
    d93a:	601a      	str	r2, [r3, #0]

        ah->next_free = __malloc_head.next_free;
    d93c:	4a13      	ldr	r2, [pc, #76]	; (d98c <__free_block+0x60>)
    d93e:	6910      	ldr	r0, [r2, #16]
    d940:	6118      	str	r0, [r3, #16]
        ah->prev_free = &__malloc_head;
    d942:	615a      	str	r2, [r3, #20]
        __malloc_head.next_free = ah;
    d944:	6113      	str	r3, [r2, #16]
        ah->next_free->prev_free = ah;
    d946:	691a      	ldr	r2, [r3, #16]
    d948:	6153      	str	r3, [r2, #20]
    d94a:	4618      	mov	r0, r3
    }

    /* In either of the previous cases, we might be able to merge
       with the subsequent block... */
    if (nah->a.type == ARENA_TYPE_FREE &&
    d94c:	680b      	ldr	r3, [r1, #0]
    d94e:	2b01      	cmp	r3, #1
    d950:	d00b      	beq.n	d96a <__free_block+0x3e>
        remove_from_chains(nah);
    }

    /* Return the block that contains the called block */
    return ah;
}
    d952:	4770      	bx	lr
        (char *)pah + pah->a.size == (char *)ah) {
    d954:	6842      	ldr	r2, [r0, #4]
    d956:	eb00 0c02 	add.w	ip, r0, r2
    if (pah->a.type == ARENA_TYPE_FREE &&
    d95a:	459c      	cmp	ip, r3
    d95c:	d1ec      	bne.n	d938 <__free_block+0xc>
        pah->a.size += ah->a.size;
    d95e:	685b      	ldr	r3, [r3, #4]
    d960:	441a      	add	r2, r3
    d962:	6042      	str	r2, [r0, #4]
        pah->a.next = nah;
    d964:	6081      	str	r1, [r0, #8]
        nah->a.prev = pah;
    d966:	60c8      	str	r0, [r1, #12]
        pah = ah->a.prev;
    d968:	e7f0      	b.n	d94c <__free_block+0x20>
        (char *)ah + ah->a.size == (char *)nah) {
    d96a:	6843      	ldr	r3, [r0, #4]
    d96c:	18c2      	adds	r2, r0, r3
    if (nah->a.type == ARENA_TYPE_FREE &&
    d96e:	428a      	cmp	r2, r1
    d970:	d1ef      	bne.n	d952 <__free_block+0x26>
        ah->a.size += nah->a.size;
    d972:	684a      	ldr	r2, [r1, #4]
    d974:	4413      	add	r3, r2
    d976:	6043      	str	r3, [r0, #4]
    ap = ah->prev_free;
    d978:	694a      	ldr	r2, [r1, #20]
    an = ah->next_free;
    d97a:	690b      	ldr	r3, [r1, #16]
    ap->next_free = an;
    d97c:	6113      	str	r3, [r2, #16]
    an->prev_free = ap;
    d97e:	615a      	str	r2, [r3, #20]
    ap = ah->a.prev;
    d980:	68ca      	ldr	r2, [r1, #12]
    an = ah->a.next;
    d982:	688b      	ldr	r3, [r1, #8]
    ap->a.next = an;
    d984:	6093      	str	r3, [r2, #8]
    an->a.prev = ap;
    d986:	60da      	str	r2, [r3, #12]
    return ah;
    d988:	e7e3      	b.n	d952 <__free_block+0x26>
    d98a:	bf00      	nop
    d98c:	200005ac 	.word	0x200005ac

0000d990 <add_malloc_block>:
void add_malloc_block(void *buf, size_t size)
{
    struct free_arena_header *fp = buf;
    struct free_arena_header *pah;

    if (size < sizeof(struct free_arena_header))
    d990:	2917      	cmp	r1, #23
    d992:	d91e      	bls.n	d9d2 <add_malloc_block+0x42>
{
    d994:	b510      	push	{r4, lr}
    d996:	4604      	mov	r4, r0
        return; // Too small.

    /* Insert the block into the management chains.  We need to set
       up the size and the main block list pointer, the rest of
       the work is logically identical to free(). */
    fp->a.type = ARENA_TYPE_FREE;
    d998:	2301      	movs	r3, #1
    d99a:	6003      	str	r3, [r0, #0]
    fp->a.size = size;
    d99c:	6041      	str	r1, [r0, #4]

    if (!malloc_lock())
    d99e:	4b0d      	ldr	r3, [pc, #52]	; (d9d4 <add_malloc_block+0x44>)
    d9a0:	681b      	ldr	r3, [r3, #0]
    d9a2:	4798      	blx	r3
    d9a4:	b1a0      	cbz	r0, d9d0 <add_malloc_block+0x40>

    /* We need to insert this into the main block list in the proper
       place -- this list is required to be sorted.  Since we most likely
       get memory assignments in ascending order, search backwards for
       the proper place. */
    for (pah = __malloc_head.a.prev; pah->a.type != ARENA_TYPE_HEAD;
    d9a6:	4b0c      	ldr	r3, [pc, #48]	; (d9d8 <add_malloc_block+0x48>)
    d9a8:	68db      	ldr	r3, [r3, #12]
    d9aa:	e000      	b.n	d9ae <add_malloc_block+0x1e>
         pah = pah->a.prev) {
    d9ac:	68db      	ldr	r3, [r3, #12]
    for (pah = __malloc_head.a.prev; pah->a.type != ARENA_TYPE_HEAD;
    d9ae:	681a      	ldr	r2, [r3, #0]
    d9b0:	2a02      	cmp	r2, #2
    d9b2:	d001      	beq.n	d9b8 <add_malloc_block+0x28>
        if (pah < fp)
    d9b4:	42a3      	cmp	r3, r4
    d9b6:	d2f9      	bcs.n	d9ac <add_malloc_block+0x1c>
            break;
    }

    /* Now pah points to the node that should be the predecessor of
       the new node */
    fp->a.next = pah->a.next;
    d9b8:	689a      	ldr	r2, [r3, #8]
    d9ba:	60a2      	str	r2, [r4, #8]
    fp->a.prev = pah;
    d9bc:	60e3      	str	r3, [r4, #12]
    pah->a.next = fp;
    d9be:	609c      	str	r4, [r3, #8]
    fp->a.next->a.prev = fp;
    d9c0:	68a3      	ldr	r3, [r4, #8]
    d9c2:	60dc      	str	r4, [r3, #12]

    /* Insert into the free chain and coalesce with adjacent blocks */
    fp = __free_block(fp);
    d9c4:	4620      	mov	r0, r4
    d9c6:	f7ff ffb1 	bl	d92c <__free_block>

    malloc_unlock();
    d9ca:	4b04      	ldr	r3, [pc, #16]	; (d9dc <add_malloc_block+0x4c>)
    d9cc:	681b      	ldr	r3, [r3, #0]
    d9ce:	4798      	blx	r3
}
    d9d0:	bd10      	pop	{r4, pc}
    d9d2:	4770      	bx	lr
    d9d4:	200005c4 	.word	0x200005c4
    d9d8:	200005ac 	.word	0x200005ac
    d9dc:	200005c8 	.word	0x200005c8

0000d9e0 <malloc>:
{
    d9e0:	b538      	push	{r3, r4, r5, lr}
    if (size == 0 || size > (SIZE_MAX - sizeof(struct arena_header))) {
    d9e2:	1e43      	subs	r3, r0, #1
    d9e4:	f113 0f12 	cmn.w	r3, #18
    d9e8:	d825      	bhi.n	da36 <malloc+0x56>
    size = (size + 2 * sizeof(struct arena_header) - 1) & ARENA_SIZE_MASK;
    d9ea:	301f      	adds	r0, #31
    d9ec:	f020 040f 	bic.w	r4, r0, #15
    if (!malloc_lock())
    d9f0:	4b13      	ldr	r3, [pc, #76]	; (da40 <malloc+0x60>)
    d9f2:	681b      	ldr	r3, [r3, #0]
    d9f4:	4798      	blx	r3
    d9f6:	b300      	cbz	r0, da3a <malloc+0x5a>
    void *result = NULL;
    d9f8:	2500      	movs	r5, #0
    d9fa:	e00d      	b.n	da18 <malloc+0x38>
            result = __malloc_from_block(fp, size);
    d9fc:	4621      	mov	r1, r4
    d9fe:	f7ff ff70 	bl	d8e2 <__malloc_from_block>
    da02:	4605      	mov	r5, r0
    if (result == NULL) {
    da04:	b995      	cbnz	r5, da2c <malloc+0x4c>
        more_mem = _sbrk(size);
    da06:	4620      	mov	r0, r4
    da08:	f7fa fbb6 	bl	8178 <_sbrk>
        if (more_mem != (void *)-1) {
    da0c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    da10:	d00c      	beq.n	da2c <malloc+0x4c>
            add_malloc_block(more_mem, size);
    da12:	4621      	mov	r1, r4
    da14:	f7ff ffbc 	bl	d990 <add_malloc_block>
    for (fp = __malloc_head.next_free; fp->a.type != ARENA_TYPE_HEAD;
    da18:	4b0a      	ldr	r3, [pc, #40]	; (da44 <malloc+0x64>)
    da1a:	6918      	ldr	r0, [r3, #16]
    da1c:	6803      	ldr	r3, [r0, #0]
    da1e:	2b02      	cmp	r3, #2
    da20:	d0f0      	beq.n	da04 <malloc+0x24>
        if (fp->a.size >= size) {
    da22:	6843      	ldr	r3, [r0, #4]
    da24:	42a3      	cmp	r3, r4
    da26:	d2e9      	bcs.n	d9fc <malloc+0x1c>
         fp = fp->next_free) {
    da28:	6900      	ldr	r0, [r0, #16]
    da2a:	e7f7      	b.n	da1c <malloc+0x3c>
    malloc_unlock();
    da2c:	4b06      	ldr	r3, [pc, #24]	; (da48 <malloc+0x68>)
    da2e:	681b      	ldr	r3, [r3, #0]
    da30:	4798      	blx	r3
}
    da32:	4628      	mov	r0, r5
    da34:	bd38      	pop	{r3, r4, r5, pc}
        return NULL;
    da36:	2500      	movs	r5, #0
    da38:	e7fb      	b.n	da32 <malloc+0x52>
        return NULL;
    da3a:	2500      	movs	r5, #0
    da3c:	e7f9      	b.n	da32 <malloc+0x52>
    da3e:	bf00      	nop
    da40:	200005c4 	.word	0x200005c4
    da44:	200005ac 	.word	0x200005ac
    da48:	200005c8 	.word	0x200005c8

0000da4c <free>:

void free(void *ptr)
{
    struct free_arena_header *ah;

    if (!ptr)
    da4c:	b170      	cbz	r0, da6c <free+0x20>
{
    da4e:	b510      	push	{r4, lr}
        return;

    ah = (struct free_arena_header *)
    da50:	f1a0 0410 	sub.w	r4, r0, #16

#ifdef DEBUG_MALLOC
    assert(ah->a.type == ARENA_TYPE_USED);
#endif

    if (!malloc_lock())
    da54:	4b06      	ldr	r3, [pc, #24]	; (da70 <free+0x24>)
    da56:	681b      	ldr	r3, [r3, #0]
    da58:	4798      	blx	r3
    da5a:	b900      	cbnz	r0, da5e <free+0x12>
        return;

    /* Merge into adjacent free blocks */
    ah = __free_block(ah);
    malloc_unlock();
}
    da5c:	bd10      	pop	{r4, pc}
    ah = __free_block(ah);
    da5e:	4620      	mov	r0, r4
    da60:	f7ff ff64 	bl	d92c <__free_block>
    malloc_unlock();
    da64:	4b03      	ldr	r3, [pc, #12]	; (da74 <free+0x28>)
    da66:	681b      	ldr	r3, [r3, #0]
    da68:	4798      	blx	r3
    da6a:	e7f7      	b.n	da5c <free+0x10>
    da6c:	4770      	bx	lr
    da6e:	bf00      	nop
    da70:	200005c4 	.word	0x200005c4
    da74:	200005c8 	.word	0x200005c8

0000da78 <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7)
    asm (".syntax unified                   \n"
    da78:	b470      	push	{r4, r5, r6}
    da7a:	f04f 0500 	mov.w	r5, #0
    da7e:	f022 0603 	bic.w	r6, r2, #3
    da82:	e005      	b.n	da90 <test1>

0000da84 <loop1>:
    da84:	5943      	ldr	r3, [r0, r5]
    da86:	594c      	ldr	r4, [r1, r5]
    da88:	42a3      	cmp	r3, r4
    da8a:	d104      	bne.n	da96 <res1>
    da8c:	f105 0504 	add.w	r5, r5, #4

0000da90 <test1>:
    da90:	42b5      	cmp	r5, r6
    da92:	d1f7      	bne.n	da84 <loop1>
    da94:	e00d      	b.n	dab2 <test2>

0000da96 <res1>:
    da96:	ba1b      	rev	r3, r3
    da98:	ba24      	rev	r4, r4
    da9a:	1b1b      	subs	r3, r3, r4
    da9c:	bf8c      	ite	hi
    da9e:	2301      	movhi	r3, #1
    daa0:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
    daa4:	e009      	b.n	daba <done>

0000daa6 <loop2>:
    daa6:	5d43      	ldrb	r3, [r0, r5]
    daa8:	5d4c      	ldrb	r4, [r1, r5]
    daaa:	1b1b      	subs	r3, r3, r4
    daac:	d105      	bne.n	daba <done>
    daae:	f105 0501 	add.w	r5, r5, #1

0000dab2 <test2>:
    dab2:	4295      	cmp	r5, r2
    dab4:	d1f7      	bne.n	daa6 <loop2>
    dab6:	f04f 0300 	mov.w	r3, #0

0000daba <done>:
    daba:	4618      	mov	r0, r3
    dabc:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
    dabe:	4770      	bx	lr

0000dac0 <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
    dac0:	e001      	b.n	dac6 <test1>

0000dac2 <loop1>:
    dac2:	588b      	ldr	r3, [r1, r2]
    dac4:	5083      	str	r3, [r0, r2]

0000dac6 <test1>:
    dac6:	3a04      	subs	r2, #4
    dac8:	d5fb      	bpl.n	dac2 <loop1>
    daca:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
    dace:	e001      	b.n	dad4 <test2>

0000dad0 <loop2>:
    dad0:	5c8b      	ldrb	r3, [r1, r2]
    dad2:	5483      	strb	r3, [r0, r2]

0000dad4 <test2>:
    dad4:	3a01      	subs	r2, #1
    dad6:	d5fb      	bpl.n	dad0 <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
    dad8:	4770      	bx	lr

0000dada <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
    dada:	b410      	push	{r4}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
    dadc:	4684      	mov	ip, r0
    dade:	b2c9      	uxtb	r1, r1
    dae0:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    dae4:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    dae8:	eb1c 0302 	adds.w	r3, ip, r2
    daec:	2403      	movs	r4, #3
    daee:	4023      	ands	r3, r4
    daf0:	1ad3      	subs	r3, r2, r3
    daf2:	d40e      	bmi.n	db12 <memset+0x38>
    daf4:	e002      	b.n	dafc <memset+0x22>
    daf6:	3a01      	subs	r2, #1
    daf8:	f80c 1002 	strb.w	r1, [ip, r2]
    dafc:	429a      	cmp	r2, r3
    dafe:	d1fa      	bne.n	daf6 <memset+0x1c>
    db00:	e001      	b.n	db06 <memset+0x2c>
    db02:	f84c 1002 	str.w	r1, [ip, r2]
    db06:	3a04      	subs	r2, #4
    db08:	d5fb      	bpl.n	db02 <memset+0x28>
    db0a:	3204      	adds	r2, #4
    db0c:	e001      	b.n	db12 <memset+0x38>
    db0e:	f80c 1002 	strb.w	r1, [ip, r2]
    db12:	3a01      	subs	r2, #1
    db14:	d5fb      	bpl.n	db0e <memset+0x34>
		*q++ = c;
	}
#endif

	return dst;
}
    db16:	f85d 4b04 	ldr.w	r4, [sp], #4
    db1a:	4770      	bx	lr

0000db1c <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
    db1c:	2000      	movs	r0, #0
    db1e:	4770      	bx	lr

0000db20 <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
    db20:	b510      	push	{r4, lr}
    db22:	4608      	mov	r0, r1
    db24:	4614      	mov	r4, r2
    console_write(bp, n);
    db26:	4611      	mov	r1, r2
    db28:	f001 fd78 	bl	f61c <console_write>
    return n;
}
    db2c:	4620      	mov	r0, r4
    db2e:	bd10      	pop	{r4, pc}

0000db30 <strcmp>:
 */

#include <string.h>

int strcmp(const char *s1, const char *s2)
{
    db30:	4684      	mov	ip, r0
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;

	while (1) {
		d = (int)(ch = *c1++) - (int)*c2++;
    db32:	f89c 2000 	ldrb.w	r2, [ip]
    db36:	f10c 0c01 	add.w	ip, ip, #1
    db3a:	7808      	ldrb	r0, [r1, #0]
    db3c:	3101      	adds	r1, #1
		if (d || !ch)
    db3e:	1a10      	subs	r0, r2, r0
    db40:	d101      	bne.n	db46 <strcmp+0x16>
    db42:	2a00      	cmp	r2, #0
    db44:	d1f5      	bne.n	db32 <strcmp+0x2>
			break;
	}

	return d;
}
    db46:	4770      	bx	lr

0000db48 <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
    db48:	4603      	mov	r3, r0
	while (*ss)
    db4a:	e000      	b.n	db4e <strlen+0x6>
		ss++;
    db4c:	3301      	adds	r3, #1
	while (*ss)
    db4e:	781a      	ldrb	r2, [r3, #0]
    db50:	2a00      	cmp	r2, #0
    db52:	d1fb      	bne.n	db4c <strlen+0x4>
	return ss - s;
}
    db54:	1a18      	subs	r0, r3, r0
    db56:	4770      	bx	lr

0000db58 <strncpy>:
 */

#include <string.h>

char *strncpy(char *dst, const char *src, size_t n)
{
    db58:	b510      	push	{r4, lr}
    db5a:	4604      	mov	r4, r0
	char *q = dst;
	const char *p = src;
	char ch;

	while (n) {
    db5c:	b132      	cbz	r2, db6c <strncpy+0x14>
		n--;
    db5e:	3a01      	subs	r2, #1
		*q++ = ch = *p++;
    db60:	f811 3b01 	ldrb.w	r3, [r1], #1
    db64:	f800 3b01 	strb.w	r3, [r0], #1
		if (!ch)
    db68:	2b00      	cmp	r3, #0
    db6a:	d1f7      	bne.n	db5c <strncpy+0x4>
			break;
	}

	/* The specs say strncpy() fills the entire buffer with NUL.  Sigh. */
	memset(q, 0, n);
    db6c:	2100      	movs	r1, #0
    db6e:	f7ff ffb4 	bl	dada <memset>

	return dst;
}
    db72:	4620      	mov	r0, r4
    db74:	bd10      	pop	{r4, pc}

0000db76 <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
    db76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    db7a:	b085      	sub	sp, #20
    db7c:	4606      	mov	r6, r0
    db7e:	460f      	mov	r7, r1
    db80:	4691      	mov	r9, r2
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
    db82:	6853      	ldr	r3, [r2, #4]
    db84:	9302      	str	r3, [sp, #8]
    unsigned long long int d = 1;
    db86:	2501      	movs	r5, #1
    db88:	2400      	movs	r4, #0
    while (num / d >= p->base)
    db8a:	e004      	b.n	db96 <ui2a+0x20>
        d *= p->base;
    db8c:	fb04 f303 	mul.w	r3, r4, r3
    db90:	fba5 5402 	umull	r5, r4, r5, r2
    db94:	441c      	add	r4, r3
    while (num / d >= p->base)
    db96:	462a      	mov	r2, r5
    db98:	4623      	mov	r3, r4
    db9a:	4630      	mov	r0, r6
    db9c:	4639      	mov	r1, r7
    db9e:	f013 ff9f 	bl	21ae0 <__aeabi_uldivmod>
    dba2:	f899 3003 	ldrb.w	r3, [r9, #3]
    dba6:	461a      	mov	r2, r3
    dba8:	4298      	cmp	r0, r3
    dbaa:	f171 0100 	sbcs.w	r1, r1, #0
    dbae:	d2ed      	bcs.n	db8c <ui2a+0x16>
    int n = 0;
    dbb0:	f04f 0a00 	mov.w	sl, #0
    dbb4:	e00b      	b.n	dbce <ui2a+0x58>
    while (d != 0) {
        unsigned long long  dgt = num / d;
        num %= d;
        d /= p->base;
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    dbb6:	2230      	movs	r2, #48	; 0x30
    dbb8:	9b02      	ldr	r3, [sp, #8]
    dbba:	4490      	add	r8, r2
    dbbc:	f803 8b01 	strb.w	r8, [r3], #1
            ++n;
    dbc0:	f10a 0a01 	add.w	sl, sl, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    dbc4:	9302      	str	r3, [sp, #8]
    dbc6:	4605      	mov	r5, r0
    dbc8:	460c      	mov	r4, r1
    dbca:	9e00      	ldr	r6, [sp, #0]
    dbcc:	9f01      	ldr	r7, [sp, #4]
    while (d != 0) {
    dbce:	ea55 0304 	orrs.w	r3, r5, r4
    dbd2:	d031      	beq.n	dc38 <ui2a+0xc2>
        unsigned long long  dgt = num / d;
    dbd4:	462a      	mov	r2, r5
    dbd6:	4623      	mov	r3, r4
    dbd8:	4630      	mov	r0, r6
    dbda:	4639      	mov	r1, r7
    dbdc:	f013 ff80 	bl	21ae0 <__aeabi_uldivmod>
    dbe0:	4680      	mov	r8, r0
    dbe2:	9103      	str	r1, [sp, #12]
        num %= d;
    dbe4:	462a      	mov	r2, r5
    dbe6:	4623      	mov	r3, r4
    dbe8:	4630      	mov	r0, r6
    dbea:	4639      	mov	r1, r7
    dbec:	f013 ff78 	bl	21ae0 <__aeabi_uldivmod>
    dbf0:	9200      	str	r2, [sp, #0]
    dbf2:	9301      	str	r3, [sp, #4]
        d /= p->base;
    dbf4:	f899 b003 	ldrb.w	fp, [r9, #3]
    dbf8:	465a      	mov	r2, fp
    dbfa:	2300      	movs	r3, #0
    dbfc:	4628      	mov	r0, r5
    dbfe:	4621      	mov	r1, r4
    dc00:	f013 ff6e 	bl	21ae0 <__aeabi_uldivmod>
        if (n || dgt > 0 || d == 0) {
    dc04:	f1ba 0f00 	cmp.w	sl, #0
    dc08:	d107      	bne.n	dc1a <ui2a+0xa4>
    dc0a:	42ae      	cmp	r6, r5
    dc0c:	eb77 0304 	sbcs.w	r3, r7, r4
    dc10:	d203      	bcs.n	dc1a <ui2a+0xa4>
    dc12:	455d      	cmp	r5, fp
    dc14:	f174 0300 	sbcs.w	r3, r4, #0
    dc18:	d2d5      	bcs.n	dbc6 <ui2a+0x50>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    dc1a:	f1b8 0f0a 	cmp.w	r8, #10
    dc1e:	9b03      	ldr	r3, [sp, #12]
    dc20:	f173 0300 	sbcs.w	r3, r3, #0
    dc24:	d3c7      	bcc.n	dbb6 <ui2a+0x40>
    dc26:	f899 3002 	ldrb.w	r3, [r9, #2]
    dc2a:	f013 0f04 	tst.w	r3, #4
    dc2e:	d001      	beq.n	dc34 <ui2a+0xbe>
    dc30:	2237      	movs	r2, #55	; 0x37
    dc32:	e7c1      	b.n	dbb8 <ui2a+0x42>
    dc34:	2257      	movs	r2, #87	; 0x57
    dc36:	e7bf      	b.n	dbb8 <ui2a+0x42>
        }
    }
    *bf = 0;
    dc38:	2300      	movs	r3, #0
    dc3a:	9a02      	ldr	r2, [sp, #8]
    dc3c:	7013      	strb	r3, [r2, #0]
}
    dc3e:	b005      	add	sp, #20
    dc40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000dc44 <i2a>:

static void i2a(long long int num, struct param *p)
{
    dc44:	b508      	push	{r3, lr}
    if (num < 0) {
    dc46:	2900      	cmp	r1, #0
    dc48:	db02      	blt.n	dc50 <i2a+0xc>
        num = -num;
        p->sign = 1;
    }
    ui2a(num, p);
    dc4a:	f7ff ff94 	bl	db76 <ui2a>
}
    dc4e:	bd08      	pop	{r3, pc}
        num = -num;
    dc50:	4240      	negs	r0, r0
    dc52:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
    dc56:	7893      	ldrb	r3, [r2, #2]
    dc58:	f043 0301 	orr.w	r3, r3, #1
    dc5c:	7093      	strb	r3, [r2, #2]
    dc5e:	e7f4      	b.n	dc4a <i2a+0x6>

0000dc60 <a2d>:

static int a2d(char ch)
{
    if (ch >= '0' && ch <= '9')
    dc60:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    dc64:	b2db      	uxtb	r3, r3
    dc66:	2b09      	cmp	r3, #9
    dc68:	d90b      	bls.n	dc82 <a2d+0x22>
        return ch - '0';
    else if (ch >= 'a' && ch <= 'f')
    dc6a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
    dc6e:	b2db      	uxtb	r3, r3
    dc70:	2b05      	cmp	r3, #5
    dc72:	d908      	bls.n	dc86 <a2d+0x26>
        return ch - 'a' + 10;
    else if (ch >= 'A' && ch <= 'F')
    dc74:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
    dc78:	b2db      	uxtb	r3, r3
    dc7a:	2b05      	cmp	r3, #5
    dc7c:	d805      	bhi.n	dc8a <a2d+0x2a>
        return ch - 'A' + 10;
    dc7e:	3837      	subs	r0, #55	; 0x37
    dc80:	4770      	bx	lr
        return ch - '0';
    dc82:	3830      	subs	r0, #48	; 0x30
    dc84:	4770      	bx	lr
        return ch - 'a' + 10;
    dc86:	3857      	subs	r0, #87	; 0x57
    dc88:	4770      	bx	lr
    else
        return -1;
    dc8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    dc8e:	4770      	bx	lr

0000dc90 <a2i>:

static char a2i(char ch, const char **src, int base, unsigned char *nump)
{
    dc90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dc94:	4604      	mov	r4, r0
    dc96:	460f      	mov	r7, r1
    dc98:	4615      	mov	r5, r2
    dc9a:	4698      	mov	r8, r3
    const char *p = *src;
    dc9c:	f8d1 9000 	ldr.w	r9, [r1]
    int num = 0;
    dca0:	2600      	movs	r6, #0
    int digit;
    while ((digit = a2d(ch)) >= 0) {
    dca2:	e005      	b.n	dcb0 <a2i+0x20>
        if (digit > base)
            break;
        num = num * base + digit;
    dca4:	fb05 0606 	mla	r6, r5, r6, r0
        ch = *p++;
    dca8:	46cc      	mov	ip, r9
    dcaa:	f81c 4b01 	ldrb.w	r4, [ip], #1
    dcae:	46e1      	mov	r9, ip
    while ((digit = a2d(ch)) >= 0) {
    dcb0:	4620      	mov	r0, r4
    dcb2:	f7ff ffd5 	bl	dc60 <a2d>
    dcb6:	2800      	cmp	r0, #0
    dcb8:	db01      	blt.n	dcbe <a2i+0x2e>
        if (digit > base)
    dcba:	42a8      	cmp	r0, r5
    dcbc:	ddf2      	ble.n	dca4 <a2i+0x14>
    }
    *src = p;
    dcbe:	f8c7 9000 	str.w	r9, [r7]
    *nump = num;
    dcc2:	f888 6000 	strb.w	r6, [r8]
    return ch;
}
    dcc6:	4620      	mov	r0, r4
    dcc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000dccc <putf>:

static int putf(FILE *putp, char c)
{
    dccc:	b500      	push	{lr}
    dcce:	b083      	sub	sp, #12

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
    dcd0:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
    dcd4:	6803      	ldr	r3, [r0, #0]
    dcd6:	681b      	ldr	r3, [r3, #0]
    dcd8:	b143      	cbz	r3, dcec <putf+0x20>
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
    dcda:	2201      	movs	r2, #1
    dcdc:	f10d 0107 	add.w	r1, sp, #7
    dce0:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
    dce2:	2801      	cmp	r0, #1
    dce4:	d102      	bne.n	dcec <putf+0x20>
    if (fputc(c, putp) == EOF)
        return 0;
    else
        return 1;
}
    dce6:	b003      	add	sp, #12
    dce8:	f85d fb04 	ldr.w	pc, [sp], #4
        return 0;
    dcec:	2000      	movs	r0, #0
    dcee:	e7fa      	b.n	dce6 <putf+0x1a>

0000dcf0 <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
    dcf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dcf4:	4607      	mov	r7, r0
    dcf6:	4688      	mov	r8, r1
    unsigned written = 0;
    char ch;
    int n = p->width;
    dcf8:	780c      	ldrb	r4, [r1, #0]
    char *bf = p->bf;
    dcfa:	684b      	ldr	r3, [r1, #4]

    /* Number of filling characters */
    while (*bf++ && n > 0)
    dcfc:	e000      	b.n	dd00 <putchw+0x10>
        n--;
    dcfe:	3c01      	subs	r4, #1
    while (*bf++ && n > 0)
    dd00:	f813 2b01 	ldrb.w	r2, [r3], #1
    dd04:	b10a      	cbz	r2, dd0a <putchw+0x1a>
    dd06:	2c00      	cmp	r4, #0
    dd08:	dcf9      	bgt.n	dcfe <putchw+0xe>
    if (p->sign)
    dd0a:	f898 3002 	ldrb.w	r3, [r8, #2]
    dd0e:	f013 0f01 	tst.w	r3, #1
    dd12:	d000      	beq.n	dd16 <putchw+0x26>
        n--;
    dd14:	3c01      	subs	r4, #1
    if (p->alt && p->base == 16)
    dd16:	f8b8 3002 	ldrh.w	r3, [r8, #2]
    dd1a:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
    dd1e:	b29b      	uxth	r3, r3
    dd20:	f241 0202 	movw	r2, #4098	; 0x1002
    dd24:	4293      	cmp	r3, r2
    dd26:	d021      	beq.n	dd6c <putchw+0x7c>
        n -= 2;
    else if (p->alt && p->base == 8)
    dd28:	f640 0202 	movw	r2, #2050	; 0x802
    dd2c:	4293      	cmp	r3, r2
    dd2e:	d01f      	beq.n	dd70 <putchw+0x80>
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
    dd30:	f8d8 3000 	ldr.w	r3, [r8]
    dd34:	4e36      	ldr	r6, [pc, #216]	; (de10 <putchw+0x120>)
    dd36:	401e      	ands	r6, r3
    dd38:	b316      	cbz	r6, dd80 <putchw+0x90>
    unsigned written = 0;
    dd3a:	2600      	movs	r6, #0
        while (n-- > 0)
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
    dd3c:	f898 3002 	ldrb.w	r3, [r8, #2]
    dd40:	f013 0f01 	tst.w	r3, #1
    dd44:	d121      	bne.n	dd8a <putchw+0x9a>
        written += putf(putp, '-');

    /* Alternate */
    if (p->alt && p->base == 16) {
    dd46:	f8b8 3002 	ldrh.w	r3, [r8, #2]
    dd4a:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
    dd4e:	b29b      	uxth	r3, r3
    dd50:	f241 0202 	movw	r2, #4098	; 0x1002
    dd54:	4293      	cmp	r3, r2
    dd56:	d01e      	beq.n	dd96 <putchw+0xa6>
        written += putf(putp, '0');
        written += putf(putp, (p->uc ? 'X' : 'x'));
    } else if (p->alt && p->base == 8) {
    dd58:	f640 0202 	movw	r2, #2050	; 0x802
    dd5c:	4293      	cmp	r3, r2
    dd5e:	d02c      	beq.n	ddba <putchw+0xca>
        written += putf(putp, '0');
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
    dd60:	f898 3001 	ldrb.w	r3, [r8, #1]
    dd64:	bbab      	cbnz	r3, ddd2 <putchw+0xe2>
        while (n-- > 0)
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
    dd66:	f8d8 5004 	ldr.w	r5, [r8, #4]
    while ((ch = *bf++))
    dd6a:	e03b      	b.n	dde4 <putchw+0xf4>
        n -= 2;
    dd6c:	3c02      	subs	r4, #2
    dd6e:	e7df      	b.n	dd30 <putchw+0x40>
        n--;
    dd70:	3c01      	subs	r4, #1
    dd72:	e7dd      	b.n	dd30 <putchw+0x40>
            written += putf(putp, ' ');
    dd74:	2120      	movs	r1, #32
    dd76:	4638      	mov	r0, r7
    dd78:	f7ff ffa8 	bl	dccc <putf>
    dd7c:	4406      	add	r6, r0
        while (n-- > 0)
    dd7e:	462c      	mov	r4, r5
    dd80:	1e65      	subs	r5, r4, #1
    dd82:	2c00      	cmp	r4, #0
    dd84:	dcf6      	bgt.n	dd74 <putchw+0x84>
    dd86:	462c      	mov	r4, r5
    dd88:	e7d8      	b.n	dd3c <putchw+0x4c>
        written += putf(putp, '-');
    dd8a:	212d      	movs	r1, #45	; 0x2d
    dd8c:	4638      	mov	r0, r7
    dd8e:	f7ff ff9d 	bl	dccc <putf>
    dd92:	4406      	add	r6, r0
    dd94:	e7d7      	b.n	dd46 <putchw+0x56>
        written += putf(putp, '0');
    dd96:	2130      	movs	r1, #48	; 0x30
    dd98:	4638      	mov	r0, r7
    dd9a:	f7ff ff97 	bl	dccc <putf>
    dd9e:	4406      	add	r6, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
    dda0:	f898 3002 	ldrb.w	r3, [r8, #2]
    dda4:	f013 0f04 	tst.w	r3, #4
    dda8:	d005      	beq.n	ddb6 <putchw+0xc6>
    ddaa:	2158      	movs	r1, #88	; 0x58
    ddac:	4638      	mov	r0, r7
    ddae:	f7ff ff8d 	bl	dccc <putf>
    ddb2:	4406      	add	r6, r0
    ddb4:	e7d4      	b.n	dd60 <putchw+0x70>
    ddb6:	2178      	movs	r1, #120	; 0x78
    ddb8:	e7f8      	b.n	ddac <putchw+0xbc>
        written += putf(putp, '0');
    ddba:	2130      	movs	r1, #48	; 0x30
    ddbc:	4638      	mov	r0, r7
    ddbe:	f7ff ff85 	bl	dccc <putf>
    ddc2:	4406      	add	r6, r0
    ddc4:	e7cc      	b.n	dd60 <putchw+0x70>
            written += putf(putp, '0');
    ddc6:	2130      	movs	r1, #48	; 0x30
    ddc8:	4638      	mov	r0, r7
    ddca:	f7ff ff7f 	bl	dccc <putf>
    ddce:	4406      	add	r6, r0
        while (n-- > 0)
    ddd0:	462c      	mov	r4, r5
    ddd2:	1e65      	subs	r5, r4, #1
    ddd4:	2c00      	cmp	r4, #0
    ddd6:	dcf6      	bgt.n	ddc6 <putchw+0xd6>
    ddd8:	462c      	mov	r4, r5
    ddda:	e7c4      	b.n	dd66 <putchw+0x76>
        written += putf(putp, ch);
    dddc:	4638      	mov	r0, r7
    ddde:	f7ff ff75 	bl	dccc <putf>
    dde2:	4406      	add	r6, r0
    while ((ch = *bf++))
    dde4:	f815 1b01 	ldrb.w	r1, [r5], #1
    dde8:	2900      	cmp	r1, #0
    ddea:	d1f7      	bne.n	dddc <putchw+0xec>

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
    ddec:	f898 3002 	ldrb.w	r3, [r8, #2]
    ddf0:	f013 0f08 	tst.w	r3, #8
    ddf4:	d108      	bne.n	de08 <putchw+0x118>
        while (n-- > 0)
            written += putf(putp, ' ');
    }
    
    return written;
}
    ddf6:	4630      	mov	r0, r6
    ddf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            written += putf(putp, ' ');
    ddfc:	2120      	movs	r1, #32
    ddfe:	4638      	mov	r0, r7
    de00:	f7ff ff64 	bl	dccc <putf>
    de04:	4406      	add	r6, r0
        while (n-- > 0)
    de06:	462c      	mov	r4, r5
    de08:	1e65      	subs	r5, r4, #1
    de0a:	2c00      	cmp	r4, #0
    de0c:	dcf6      	bgt.n	ddfc <putchw+0x10c>
    de0e:	e7f2      	b.n	ddf6 <putchw+0x106>
    de10:	0008ff00 	.word	0x0008ff00

0000de14 <intarg>:
static unsigned long long
intarg(int lng, int sign, va_list *va)
{
    unsigned long long val;

    switch (lng) {
    de14:	b160      	cbz	r0, de30 <intarg+0x1c>
    de16:	2801      	cmp	r0, #1
    de18:	d018      	beq.n	de4c <intarg+0x38>
        }
        break;

    case 2:
    default:
        if (sign) {
    de1a:	b329      	cbz	r1, de68 <intarg+0x54>
            val = va_arg(*va, long long);
    de1c:	6813      	ldr	r3, [r2, #0]
    de1e:	3307      	adds	r3, #7
    de20:	f023 0307 	bic.w	r3, r3, #7
    de24:	f103 0108 	add.w	r1, r3, #8
    de28:	6011      	str	r1, [r2, #0]
    de2a:	6818      	ldr	r0, [r3, #0]
    de2c:	6859      	ldr	r1, [r3, #4]
    de2e:	4770      	bx	lr
        if (sign) {
    de30:	b131      	cbz	r1, de40 <intarg+0x2c>
            val = va_arg(*va, int);
    de32:	6813      	ldr	r3, [r2, #0]
    de34:	1d19      	adds	r1, r3, #4
    de36:	6011      	str	r1, [r2, #0]
    de38:	6819      	ldr	r1, [r3, #0]
    de3a:	4608      	mov	r0, r1
    de3c:	17c9      	asrs	r1, r1, #31
    de3e:	4770      	bx	lr
            val = va_arg(*va, unsigned int);
    de40:	6813      	ldr	r3, [r2, #0]
    de42:	1d19      	adds	r1, r3, #4
    de44:	6011      	str	r1, [r2, #0]
    de46:	6818      	ldr	r0, [r3, #0]
    de48:	2100      	movs	r1, #0
    de4a:	4770      	bx	lr
        if (sign) {
    de4c:	b131      	cbz	r1, de5c <intarg+0x48>
            val = va_arg(*va, long);
    de4e:	6813      	ldr	r3, [r2, #0]
    de50:	1d19      	adds	r1, r3, #4
    de52:	6011      	str	r1, [r2, #0]
    de54:	6819      	ldr	r1, [r3, #0]
    de56:	4608      	mov	r0, r1
    de58:	17c9      	asrs	r1, r1, #31
    de5a:	4770      	bx	lr
            val = va_arg(*va, unsigned long);
    de5c:	6813      	ldr	r3, [r2, #0]
    de5e:	1d19      	adds	r1, r3, #4
    de60:	6011      	str	r1, [r2, #0]
    de62:	6818      	ldr	r0, [r3, #0]
    de64:	2100      	movs	r1, #0
    de66:	4770      	bx	lr
        } else {
            val = va_arg(*va, unsigned long long);
    de68:	6813      	ldr	r3, [r2, #0]
    de6a:	3307      	adds	r3, #7
    de6c:	f023 0307 	bic.w	r3, r3, #7
    de70:	f103 0108 	add.w	r1, r3, #8
    de74:	6011      	str	r1, [r2, #0]
    de76:	6818      	ldr	r0, [r3, #0]
    de78:	6859      	ldr	r1, [r3, #4]
        }
        break;
    }

    return val;
}
    de7a:	4770      	bx	lr

0000de7c <tfp_format>:

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
    de7c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    de80:	b08a      	sub	sp, #40	; 0x28
    de82:	4606      	mov	r6, r0
    de84:	9101      	str	r1, [sp, #4]
    de86:	9200      	str	r2, [sp, #0]
    double d;
    int n;
#endif
    int i;

    p.bf = bf;
    de88:	ab02      	add	r3, sp, #8
    de8a:	9309      	str	r3, [sp, #36]	; 0x24
    size_t written = 0;
    de8c:	2500      	movs	r5, #0

    while ((ch = *(fmt++))) {
    de8e:	9b01      	ldr	r3, [sp, #4]
    de90:	1c5a      	adds	r2, r3, #1
    de92:	9201      	str	r2, [sp, #4]
    de94:	7819      	ldrb	r1, [r3, #0]
    de96:	2900      	cmp	r1, #0
    de98:	f000 8227 	beq.w	e2ea <tfp_format+0x46e>
        if (ch != '%') {
    de9c:	2925      	cmp	r1, #37	; 0x25
    de9e:	d004      	beq.n	deaa <tfp_format+0x2e>
            written += putf(putp, ch);
    dea0:	4630      	mov	r0, r6
    dea2:	f7ff ff13 	bl	dccc <putf>
    dea6:	4405      	add	r5, r0
    dea8:	e7f1      	b.n	de8e <tfp_format+0x12>
        } else {
            /* Init parameter struct */
            p.lz = 0;
    deaa:	2300      	movs	r3, #0
    deac:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
            p.alt = 0;
    deb0:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    deb4:	f363 0241 	bfi	r2, r3, #1, #1
    deb8:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
            p.width = 0;
    debc:	f88d 3020 	strb.w	r3, [sp, #32]
            p.sign = 0;
    dec0:	b2d2      	uxtb	r2, r2
    dec2:	f363 0200 	bfi	r2, r3, #0, #1
    dec6:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
            p.left = 0;
    deca:	b2d2      	uxtb	r2, r2
    decc:	f363 02c3 	bfi	r2, r3, #3, #1
    ded0:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
            p.uc = 0;
    ded4:	b2d2      	uxtb	r2, r2
    ded6:	f363 0282 	bfi	r2, r3, #2, #1
    deda:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
            lng = 0;

            /* Flags */
            while ((ch = *(fmt++))) {
    dede:	9b01      	ldr	r3, [sp, #4]
    dee0:	1c5a      	adds	r2, r3, #1
    dee2:	9201      	str	r2, [sp, #4]
    dee4:	781c      	ldrb	r4, [r3, #0]
    dee6:	b144      	cbz	r4, defa <tfp_format+0x7e>
                switch (ch) {
    dee8:	2c2d      	cmp	r4, #45	; 0x2d
    deea:	f000 80de 	beq.w	e0aa <tfp_format+0x22e>
    deee:	2c30      	cmp	r4, #48	; 0x30
    def0:	f000 80ca 	beq.w	e088 <tfp_format+0x20c>
    def4:	2c23      	cmp	r4, #35	; 0x23
    def6:	f000 80d1 	beq.w	e09c <tfp_format+0x220>
                }
                break;
            }

            /* Width */
            if (ch == '*') {
    defa:	2c2a      	cmp	r4, #42	; 0x2a
    defc:	f000 80df 	beq.w	e0be <tfp_format+0x242>
                    p.width = UCHAR_MAX;
                } else if (i > 0) {
                    p.width = i;
                }
                ch = *(fmt++);
            } else if (ch >= '0' && ch <= '9') {
    df00:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    df04:	b2db      	uxtb	r3, r3
    df06:	2b09      	cmp	r3, #9
    df08:	f240 80ed 	bls.w	e0e6 <tfp_format+0x26a>
                ch = a2i(ch, &fmt, 10, &(p.width));
            }
            if (ch == 'l') {
    df0c:	2c6c      	cmp	r4, #108	; 0x6c
    df0e:	f000 80f2 	beq.w	e0f6 <tfp_format+0x27a>
            lng = 0;
    df12:	2000      	movs	r0, #0
                    ch = *(fmt++);
                    lng = 2;
                }
            }

            if (ch == 'z') {
    df14:	2c7a      	cmp	r4, #122	; 0x7a
    df16:	f000 80fb 	beq.w	e110 <tfp_format+0x294>
                ch = *(fmt++);
            }

            switch (ch) {
    df1a:	2c00      	cmp	r4, #0
    df1c:	f000 81e5 	beq.w	e2ea <tfp_format+0x46e>
    df20:	2c78      	cmp	r4, #120	; 0x78
    df22:	d8b4      	bhi.n	de8e <tfp_format+0x12>
    df24:	2c25      	cmp	r4, #37	; 0x25
    df26:	d3b2      	bcc.n	de8e <tfp_format+0x12>
    df28:	f1a4 0325 	sub.w	r3, r4, #37	; 0x25
    df2c:	2b53      	cmp	r3, #83	; 0x53
    df2e:	d8ae      	bhi.n	de8e <tfp_format+0x12>
    df30:	a201      	add	r2, pc, #4	; (adr r2, df38 <tfp_format+0xbc>)
    df32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    df36:	bf00      	nop
    df38:	0000e2df 	.word	0x0000e2df
    df3c:	0000de8f 	.word	0x0000de8f
    df40:	0000de8f 	.word	0x0000de8f
    df44:	0000de8f 	.word	0x0000de8f
    df48:	0000de8f 	.word	0x0000de8f
    df4c:	0000de8f 	.word	0x0000de8f
    df50:	0000de8f 	.word	0x0000de8f
    df54:	0000de8f 	.word	0x0000de8f
    df58:	0000de8f 	.word	0x0000de8f
    df5c:	0000de8f 	.word	0x0000de8f
    df60:	0000de8f 	.word	0x0000de8f
    df64:	0000de8f 	.word	0x0000de8f
    df68:	0000de8f 	.word	0x0000de8f
    df6c:	0000de8f 	.word	0x0000de8f
    df70:	0000de8f 	.word	0x0000de8f
    df74:	0000de8f 	.word	0x0000de8f
    df78:	0000de8f 	.word	0x0000de8f
    df7c:	0000de8f 	.word	0x0000de8f
    df80:	0000de8f 	.word	0x0000de8f
    df84:	0000de8f 	.word	0x0000de8f
    df88:	0000de8f 	.word	0x0000de8f
    df8c:	0000de8f 	.word	0x0000de8f
    df90:	0000de8f 	.word	0x0000de8f
    df94:	0000de8f 	.word	0x0000de8f
    df98:	0000de8f 	.word	0x0000de8f
    df9c:	0000de8f 	.word	0x0000de8f
    dfa0:	0000de8f 	.word	0x0000de8f
    dfa4:	0000de8f 	.word	0x0000de8f
    dfa8:	0000de8f 	.word	0x0000de8f
    dfac:	0000de8f 	.word	0x0000de8f
    dfb0:	0000de8f 	.word	0x0000de8f
    dfb4:	0000de8f 	.word	0x0000de8f
    dfb8:	0000de8f 	.word	0x0000de8f
    dfbc:	0000de8f 	.word	0x0000de8f
    dfc0:	0000de8f 	.word	0x0000de8f
    dfc4:	0000de8f 	.word	0x0000de8f
    dfc8:	0000de8f 	.word	0x0000de8f
    dfcc:	0000de8f 	.word	0x0000de8f
    dfd0:	0000de8f 	.word	0x0000de8f
    dfd4:	0000de8f 	.word	0x0000de8f
    dfd8:	0000de8f 	.word	0x0000de8f
    dfdc:	0000de8f 	.word	0x0000de8f
    dfe0:	0000de8f 	.word	0x0000de8f
    dfe4:	0000de8f 	.word	0x0000de8f
    dfe8:	0000de8f 	.word	0x0000de8f
    dfec:	0000de8f 	.word	0x0000de8f
    dff0:	0000de8f 	.word	0x0000de8f
    dff4:	0000de8f 	.word	0x0000de8f
    dff8:	0000de8f 	.word	0x0000de8f
    dffc:	0000de8f 	.word	0x0000de8f
    e000:	0000de8f 	.word	0x0000de8f
    e004:	0000e15b 	.word	0x0000e15b
    e008:	0000de8f 	.word	0x0000de8f
    e00c:	0000de8f 	.word	0x0000de8f
    e010:	0000de8f 	.word	0x0000de8f
    e014:	0000de8f 	.word	0x0000de8f
    e018:	0000de8f 	.word	0x0000de8f
    e01c:	0000de8f 	.word	0x0000de8f
    e020:	0000de8f 	.word	0x0000de8f
    e024:	0000de8f 	.word	0x0000de8f
    e028:	0000de8f 	.word	0x0000de8f
    e02c:	0000de8f 	.word	0x0000de8f
    e030:	0000e1f1 	.word	0x0000e1f1
    e034:	0000e13b 	.word	0x0000e13b
    e038:	0000de8f 	.word	0x0000de8f
    e03c:	0000e21d 	.word	0x0000e21d
    e040:	0000de8f 	.word	0x0000de8f
    e044:	0000de8f 	.word	0x0000de8f
    e048:	0000e13b 	.word	0x0000e13b
    e04c:	0000de8f 	.word	0x0000de8f
    e050:	0000de8f 	.word	0x0000de8f
    e054:	0000de8f 	.word	0x0000de8f
    e058:	0000de8f 	.word	0x0000de8f
    e05c:	0000de8f 	.word	0x0000de8f
    e060:	0000e18f 	.word	0x0000e18f
    e064:	0000e1af 	.word	0x0000e1af
    e068:	0000de8f 	.word	0x0000de8f
    e06c:	0000de8f 	.word	0x0000de8f
    e070:	0000e203 	.word	0x0000e203
    e074:	0000de8f 	.word	0x0000de8f
    e078:	0000e11b 	.word	0x0000e11b
    e07c:	0000de8f 	.word	0x0000de8f
    e080:	0000de8f 	.word	0x0000de8f
    e084:	0000e15b 	.word	0x0000e15b
                    if (!p.left) {
    e088:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    e08c:	f013 0f08 	tst.w	r3, #8
    e090:	f47f af25 	bne.w	dede <tfp_format+0x62>
                        p.lz = 1;
    e094:	2301      	movs	r3, #1
    e096:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
    e09a:	e720      	b.n	dede <tfp_format+0x62>
                    p.alt = 1;
    e09c:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    e0a0:	f043 0302 	orr.w	r3, r3, #2
    e0a4:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    continue;
    e0a8:	e719      	b.n	dede <tfp_format+0x62>
                    p.left = 1;
    e0aa:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    e0ae:	f043 0308 	orr.w	r3, r3, #8
    e0b2:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    p.lz = 0;
    e0b6:	2300      	movs	r3, #0
    e0b8:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
    e0bc:	e70f      	b.n	dede <tfp_format+0x62>
                i = intarg(0, 1, &va);
    e0be:	466a      	mov	r2, sp
    e0c0:	2101      	movs	r1, #1
    e0c2:	2000      	movs	r0, #0
    e0c4:	f7ff fea6 	bl	de14 <intarg>
                if (i > UCHAR_MAX) {
    e0c8:	28ff      	cmp	r0, #255	; 0xff
    e0ca:	dd07      	ble.n	e0dc <tfp_format+0x260>
                    p.width = UCHAR_MAX;
    e0cc:	23ff      	movs	r3, #255	; 0xff
    e0ce:	f88d 3020 	strb.w	r3, [sp, #32]
                ch = *(fmt++);
    e0d2:	9b01      	ldr	r3, [sp, #4]
    e0d4:	1c5a      	adds	r2, r3, #1
    e0d6:	9201      	str	r2, [sp, #4]
    e0d8:	781c      	ldrb	r4, [r3, #0]
    e0da:	e717      	b.n	df0c <tfp_format+0x90>
                } else if (i > 0) {
    e0dc:	2800      	cmp	r0, #0
    e0de:	ddf8      	ble.n	e0d2 <tfp_format+0x256>
                    p.width = i;
    e0e0:	f88d 0020 	strb.w	r0, [sp, #32]
    e0e4:	e7f5      	b.n	e0d2 <tfp_format+0x256>
                ch = a2i(ch, &fmt, 10, &(p.width));
    e0e6:	ab08      	add	r3, sp, #32
    e0e8:	220a      	movs	r2, #10
    e0ea:	a901      	add	r1, sp, #4
    e0ec:	4620      	mov	r0, r4
    e0ee:	f7ff fdcf 	bl	dc90 <a2i>
    e0f2:	4604      	mov	r4, r0
    e0f4:	e70a      	b.n	df0c <tfp_format+0x90>
                ch = *(fmt++);
    e0f6:	9b01      	ldr	r3, [sp, #4]
    e0f8:	1c5a      	adds	r2, r3, #1
    e0fa:	9201      	str	r2, [sp, #4]
    e0fc:	781c      	ldrb	r4, [r3, #0]
                if (ch == 'l') {
    e0fe:	2c6c      	cmp	r4, #108	; 0x6c
    e100:	d001      	beq.n	e106 <tfp_format+0x28a>
                lng = 1;
    e102:	2001      	movs	r0, #1
    e104:	e706      	b.n	df14 <tfp_format+0x98>
                    ch = *(fmt++);
    e106:	1c9a      	adds	r2, r3, #2
    e108:	9201      	str	r2, [sp, #4]
    e10a:	785c      	ldrb	r4, [r3, #1]
                    lng = 2;
    e10c:	2002      	movs	r0, #2
    e10e:	e701      	b.n	df14 <tfp_format+0x98>
                ch = *(fmt++);
    e110:	9b01      	ldr	r3, [sp, #4]
    e112:	1c5a      	adds	r2, r3, #1
    e114:	9201      	str	r2, [sp, #4]
    e116:	781c      	ldrb	r4, [r3, #0]
    e118:	e6ff      	b.n	df1a <tfp_format+0x9e>
            case 0:
                goto abort;
            case 'u':
                p.base = 10;
    e11a:	230a      	movs	r3, #10
    e11c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
    e120:	466a      	mov	r2, sp
    e122:	2100      	movs	r1, #0
    e124:	f7ff fe76 	bl	de14 <intarg>
    e128:	aa08      	add	r2, sp, #32
    e12a:	f7ff fd24 	bl	db76 <ui2a>
                written += putchw(putp, &p);
    e12e:	a908      	add	r1, sp, #32
    e130:	4630      	mov	r0, r6
    e132:	f7ff fddd 	bl	dcf0 <putchw>
    e136:	4405      	add	r5, r0
                break;
    e138:	e6a9      	b.n	de8e <tfp_format+0x12>
            case 'd':
            case 'i':
                p.base = 10;
    e13a:	230a      	movs	r3, #10
    e13c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                i2a(intarg(lng, 1, &va), &p);
    e140:	466a      	mov	r2, sp
    e142:	2101      	movs	r1, #1
    e144:	f7ff fe66 	bl	de14 <intarg>
    e148:	aa08      	add	r2, sp, #32
    e14a:	f7ff fd7b 	bl	dc44 <i2a>
                written += putchw(putp, &p);
    e14e:	a908      	add	r1, sp, #32
    e150:	4630      	mov	r0, r6
    e152:	f7ff fdcd 	bl	dcf0 <putchw>
    e156:	4405      	add	r5, r0
                break;
    e158:	e699      	b.n	de8e <tfp_format+0x12>
            case 'x':
            case 'X':
                p.base = 16;
    e15a:	2310      	movs	r3, #16
    e15c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                p.uc = (ch == 'X');
    e160:	2c58      	cmp	r4, #88	; 0x58
    e162:	bf14      	ite	ne
    e164:	2400      	movne	r4, #0
    e166:	2401      	moveq	r4, #1
    e168:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    e16c:	f364 0382 	bfi	r3, r4, #2, #1
    e170:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                ui2a(intarg(lng, 0, &va), &p);
    e174:	466a      	mov	r2, sp
    e176:	2100      	movs	r1, #0
    e178:	f7ff fe4c 	bl	de14 <intarg>
    e17c:	aa08      	add	r2, sp, #32
    e17e:	f7ff fcfa 	bl	db76 <ui2a>
                written += putchw(putp, &p);
    e182:	a908      	add	r1, sp, #32
    e184:	4630      	mov	r0, r6
    e186:	f7ff fdb3 	bl	dcf0 <putchw>
    e18a:	4405      	add	r5, r0
                break;
    e18c:	e67f      	b.n	de8e <tfp_format+0x12>
            case 'o':
                p.base = 8;
    e18e:	2308      	movs	r3, #8
    e190:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
    e194:	466a      	mov	r2, sp
    e196:	2100      	movs	r1, #0
    e198:	f7ff fe3c 	bl	de14 <intarg>
    e19c:	aa08      	add	r2, sp, #32
    e19e:	f7ff fcea 	bl	db76 <ui2a>
                written += putchw(putp, &p);
    e1a2:	a908      	add	r1, sp, #32
    e1a4:	4630      	mov	r0, r6
    e1a6:	f7ff fda3 	bl	dcf0 <putchw>
    e1aa:	4405      	add	r5, r0
                break;
    e1ac:	e66f      	b.n	de8e <tfp_format+0x12>
            case 'p':
                v = va_arg(va, void *);
    e1ae:	9b00      	ldr	r3, [sp, #0]
    e1b0:	1d1a      	adds	r2, r3, #4
    e1b2:	9200      	str	r2, [sp, #0]
    e1b4:	6818      	ldr	r0, [r3, #0]
                p.base = 16;
    e1b6:	2310      	movs	r3, #16
    e1b8:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a((uintptr_t)v, &p);
    e1bc:	aa08      	add	r2, sp, #32
    e1be:	2100      	movs	r1, #0
    e1c0:	f7ff fcd9 	bl	db76 <ui2a>
                p.width = 2 * sizeof(void*);
    e1c4:	2308      	movs	r3, #8
    e1c6:	f88d 3020 	strb.w	r3, [sp, #32]
                p.lz = 1;
    e1ca:	2301      	movs	r3, #1
    e1cc:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                written += putf(putp, '0');
    e1d0:	2130      	movs	r1, #48	; 0x30
    e1d2:	4630      	mov	r0, r6
    e1d4:	f7ff fd7a 	bl	dccc <putf>
    e1d8:	4405      	add	r5, r0
                written += putf(putp, 'x');
    e1da:	2178      	movs	r1, #120	; 0x78
    e1dc:	4630      	mov	r0, r6
    e1de:	f7ff fd75 	bl	dccc <putf>
    e1e2:	4405      	add	r5, r0
                written += putchw(putp, &p);
    e1e4:	a908      	add	r1, sp, #32
    e1e6:	4630      	mov	r0, r6
    e1e8:	f7ff fd82 	bl	dcf0 <putchw>
    e1ec:	4405      	add	r5, r0
                break;
    e1ee:	e64e      	b.n	de8e <tfp_format+0x12>
            case 'c':
                written += putf(putp, (char)(va_arg(va, int)));
    e1f0:	9b00      	ldr	r3, [sp, #0]
    e1f2:	1d1a      	adds	r2, r3, #4
    e1f4:	9200      	str	r2, [sp, #0]
    e1f6:	7819      	ldrb	r1, [r3, #0]
    e1f8:	4630      	mov	r0, r6
    e1fa:	f7ff fd67 	bl	dccc <putf>
    e1fe:	4405      	add	r5, r0
                break;
    e200:	e645      	b.n	de8e <tfp_format+0x12>
            case 's':
                p.bf = va_arg(va, char *);
    e202:	9b00      	ldr	r3, [sp, #0]
    e204:	1d1a      	adds	r2, r3, #4
    e206:	9200      	str	r2, [sp, #0]
    e208:	681b      	ldr	r3, [r3, #0]
    e20a:	9309      	str	r3, [sp, #36]	; 0x24
                written += putchw(putp, &p);
    e20c:	a908      	add	r1, sp, #32
    e20e:	4630      	mov	r0, r6
    e210:	f7ff fd6e 	bl	dcf0 <putchw>
    e214:	4405      	add	r5, r0
                p.bf = bf;
    e216:	ab02      	add	r3, sp, #8
    e218:	9309      	str	r3, [sp, #36]	; 0x24
                break;
    e21a:	e638      	b.n	de8e <tfp_format+0x12>
#if MYNEWT_VAL(FLOAT_USER)
            case 'f':
                p.base = 10;
    e21c:	230a      	movs	r3, #10
    e21e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                d = va_arg(va, double);
    e222:	9b00      	ldr	r3, [sp, #0]
    e224:	3307      	adds	r3, #7
    e226:	f023 0307 	bic.w	r3, r3, #7
    e22a:	f103 0208 	add.w	r2, r3, #8
    e22e:	9200      	str	r2, [sp, #0]
    e230:	e9d3 8900 	ldrd	r8, r9, [r3]
                /* Convert to an int to get the integer part of the number. */
                n = d;
    e234:	4640      	mov	r0, r8
    e236:	4649      	mov	r1, r9
    e238:	f013 fb6a 	bl	21910 <__aeabi_d2iz>
    e23c:	4604      	mov	r4, r0
                /* Convert to ascii */
                i2a(n, &p);
    e23e:	aa08      	add	r2, sp, #32
    e240:	17c1      	asrs	r1, r0, #31
    e242:	f7ff fcff 	bl	dc44 <i2a>
                /* When the double was converted to an int it was truncated
                 * towards 0.  If the number is in the range (-1, 0), the
                 * negative sign was lost.  Preserve the sign in this case.
                 */
                if (d < 0.0) {
    e246:	2200      	movs	r2, #0
    e248:	2300      	movs	r3, #0
    e24a:	4640      	mov	r0, r8
    e24c:	4649      	mov	r1, r9
    e24e:	f013 fb21 	bl	21894 <__aeabi_dcmplt>
    e252:	bbc8      	cbnz	r0, e2c8 <tfp_format+0x44c>
                    p.sign = 1;
                }
                /* Ignore left align for integer part */
                p.left = 0;
    e254:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    e258:	f36f 03c3 	bfc	r3, #3, #1
    e25c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                /* Subtract width for decimal part and decimal point */
                if (p.width >= 4) {
    e260:	f89d 3020 	ldrb.w	r3, [sp, #32]
    e264:	2b03      	cmp	r3, #3
    e266:	d936      	bls.n	e2d6 <tfp_format+0x45a>
                    p.width -= 4;
    e268:	3b04      	subs	r3, #4
    e26a:	f88d 3020 	strb.w	r3, [sp, #32]
                } else {
                    p.width = 0;
                }
                /* Write integer part to console */
                written += putchw(putp, &p);
    e26e:	a908      	add	r1, sp, #32
    e270:	4630      	mov	r0, r6
    e272:	f7ff fd3d 	bl	dcf0 <putchw>
    e276:	4405      	add	r5, r0
                /* Take the decimal part and multiply by 1000 */
                n = (d-n)*1000;
    e278:	4620      	mov	r0, r4
    e27a:	f013 f82f 	bl	212dc <__aeabi_i2d>
    e27e:	4602      	mov	r2, r0
    e280:	460b      	mov	r3, r1
    e282:	4640      	mov	r0, r8
    e284:	4649      	mov	r1, r9
    e286:	f012 fedb 	bl	21040 <__aeabi_dsub>
    e28a:	2200      	movs	r2, #0
    e28c:	4b19      	ldr	r3, [pc, #100]	; (e2f4 <tfp_format+0x478>)
    e28e:	f013 f88f 	bl	213b0 <__aeabi_dmul>
    e292:	f013 fb3d 	bl	21910 <__aeabi_d2iz>
                /* Convert to ascii */
                i2a(n, &p);
    e296:	aa08      	add	r2, sp, #32
    e298:	17c1      	asrs	r1, r0, #31
    e29a:	f7ff fcd3 	bl	dc44 <i2a>
                /* Set the leading zeros for the next integer output to 3 */
                p.lz = 3;
    e29e:	2303      	movs	r3, #3
    e2a0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                /* Always use the same decimal width */
                p.width = 3;
    e2a4:	f88d 3020 	strb.w	r3, [sp, #32]
                /* Ignore sign for decimal part*/
                p.sign = 0;
    e2a8:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    e2ac:	f36f 0300 	bfc	r3, #0, #1
    e2b0:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                /* Output a decimal point */
                putf(putp, '.');
    e2b4:	212e      	movs	r1, #46	; 0x2e
    e2b6:	4630      	mov	r0, r6
    e2b8:	f7ff fd08 	bl	dccc <putf>
                /* Output the decimal part. */
                written += putchw(putp, &p);
    e2bc:	a908      	add	r1, sp, #32
    e2be:	4630      	mov	r0, r6
    e2c0:	f7ff fd16 	bl	dcf0 <putchw>
    e2c4:	4405      	add	r5, r0
                break;
    e2c6:	e5e2      	b.n	de8e <tfp_format+0x12>
                    p.sign = 1;
    e2c8:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    e2cc:	f043 0301 	orr.w	r3, r3, #1
    e2d0:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    e2d4:	e7be      	b.n	e254 <tfp_format+0x3d8>
                    p.width = 0;
    e2d6:	2300      	movs	r3, #0
    e2d8:	f88d 3020 	strb.w	r3, [sp, #32]
    e2dc:	e7c7      	b.n	e26e <tfp_format+0x3f2>
#endif
            case '%':
                written += putf(putp, ch);
    e2de:	4621      	mov	r1, r4
    e2e0:	4630      	mov	r0, r6
    e2e2:	f7ff fcf3 	bl	dccc <putf>
    e2e6:	4405      	add	r5, r0
                break;
    e2e8:	e5d1      	b.n	de8e <tfp_format+0x12>
        }
    }
 abort:;
 
 return written;
}
    e2ea:	4628      	mov	r0, r5
    e2ec:	b00a      	add	sp, #40	; 0x28
    e2ee:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    e2f2:	bf00      	nop
    e2f4:	408f4000 	.word	0x408f4000

0000e2f8 <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
    e2f8:	b508      	push	{r3, lr}
    return tfp_format(f, fmt, va);
    e2fa:	f7ff fdbf 	bl	de7c <tfp_format>
}
    e2fe:	bd08      	pop	{r3, pc}

0000e300 <printf>:
    va_end(va);
    return rv;
}

int printf(const char *fmt, ...)
{
    e300:	b40f      	push	{r0, r1, r2, r3}
    e302:	b500      	push	{lr}
    e304:	b083      	sub	sp, #12
    e306:	aa04      	add	r2, sp, #16
    e308:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
    e30c:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(stdout, fmt, va);
    e30e:	4b04      	ldr	r3, [pc, #16]	; (e320 <printf+0x20>)
    e310:	6818      	ldr	r0, [r3, #0]
    e312:	f7ff fff1 	bl	e2f8 <vfprintf>
    va_end(va);
    return rv;
}
    e316:	b003      	add	sp, #12
    e318:	f85d eb04 	ldr.w	lr, [sp], #4
    e31c:	b004      	add	sp, #16
    e31e:	4770      	bx	lr
    e320:	00023388 	.word	0x00023388

0000e324 <vsnprintf>:

int vsnprintf(char *str, size_t size, const char *fmt, va_list va)
{
    e324:	b5f0      	push	{r4, r5, r6, r7, lr}
    e326:	b085      	sub	sp, #20
    e328:	4605      	mov	r5, r0
    e32a:	460c      	mov	r4, r1
    e32c:	4616      	mov	r6, r2
    e32e:	461f      	mov	r7, r3
    struct MemFile state;
    FILE *f = fmemopen_w(&state, str, size);
    e330:	460a      	mov	r2, r1
    e332:	4601      	mov	r1, r0
    e334:	4668      	mov	r0, sp
    e336:	f000 f83d 	bl	e3b4 <fmemopen_w>
    tfp_format(f, fmt, va);
    e33a:	463a      	mov	r2, r7
    e33c:	4631      	mov	r1, r6
    e33e:	f7ff fd9d 	bl	de7c <tfp_format>
    if (size > 0) {
    e342:	b12c      	cbz	r4, e350 <vsnprintf+0x2c>
        if (state.bytes_written < size) {
    e344:	9b02      	ldr	r3, [sp, #8]
    e346:	42a3      	cmp	r3, r4
    e348:	d205      	bcs.n	e356 <vsnprintf+0x32>
            *(state.buffer) = '\0';
    e34a:	9b01      	ldr	r3, [sp, #4]
    e34c:	2200      	movs	r2, #0
    e34e:	701a      	strb	r2, [r3, #0]
        } else {
            str[size - 1] = '\0';
        }
    }
    return state.bytes_written;
}
    e350:	9802      	ldr	r0, [sp, #8]
    e352:	b005      	add	sp, #20
    e354:	bdf0      	pop	{r4, r5, r6, r7, pc}
            str[size - 1] = '\0';
    e356:	3c01      	subs	r4, #1
    e358:	2300      	movs	r3, #0
    e35a:	552b      	strb	r3, [r5, r4]
    e35c:	e7f8      	b.n	e350 <vsnprintf+0x2c>

0000e35e <snprintf>:

int snprintf(char *str, size_t size, const char *fmt, ...)
{
    e35e:	b40c      	push	{r2, r3}
    e360:	b500      	push	{lr}
    e362:	b083      	sub	sp, #12
    e364:	ab04      	add	r3, sp, #16
    e366:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list va;
    va_start(va, fmt);
    e36a:	9301      	str	r3, [sp, #4]
    int rv = vsnprintf(str, size, fmt, va);
    e36c:	f7ff ffda 	bl	e324 <vsnprintf>
    va_end(va);
    return rv;
}
    e370:	b003      	add	sp, #12
    e372:	f85d eb04 	ldr.w	lr, [sp], #4
    e376:	b002      	add	sp, #8
    e378:	4770      	bx	lr

0000e37a <memfile_write>:
#include <stdio.h>

size_t memfile_write(FILE *instance, const char *bp, size_t n)
{
    e37a:	b500      	push	{lr}
    e37c:	4684      	mov	ip, r0
    struct MemFile *f = (struct MemFile*)instance;
    size_t i = 0;
    e37e:	2000      	movs	r0, #0
    
    while (n--)
    e380:	e000      	b.n	e384 <memfile_write+0xa>
    {
        f->bytes_written++;
        if (f->bytes_written <= f->size)
        {
            *f->buffer++ = *bp++;
    e382:	4672      	mov	r2, lr
    while (n--)
    e384:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
    e388:	b192      	cbz	r2, e3b0 <memfile_write+0x36>
        f->bytes_written++;
    e38a:	f8dc 3008 	ldr.w	r3, [ip, #8]
    e38e:	3301      	adds	r3, #1
    e390:	f8cc 3008 	str.w	r3, [ip, #8]
        if (f->bytes_written <= f->size)
    e394:	f8dc 200c 	ldr.w	r2, [ip, #12]
    e398:	4293      	cmp	r3, r2
    e39a:	d8f2      	bhi.n	e382 <memfile_write+0x8>
            *f->buffer++ = *bp++;
    e39c:	f8dc 3004 	ldr.w	r3, [ip, #4]
    e3a0:	1c5a      	adds	r2, r3, #1
    e3a2:	f8cc 2004 	str.w	r2, [ip, #4]
    e3a6:	f811 2b01 	ldrb.w	r2, [r1], #1
    e3aa:	701a      	strb	r2, [r3, #0]
            i++;
    e3ac:	3001      	adds	r0, #1
    e3ae:	e7e8      	b.n	e382 <memfile_write+0x8>
        }
    }
    
    return i;
}
    e3b0:	f85d fb04 	ldr.w	pc, [sp], #4

0000e3b4 <fmemopen_w>:
    &memfile_write,
    NULL
};

FILE *fmemopen_w(struct MemFile* storage, char *buffer, size_t size)
{
    e3b4:	b410      	push	{r4}
    storage->file.vmt = &MemFile_methods;
    e3b6:	4c04      	ldr	r4, [pc, #16]	; (e3c8 <fmemopen_w+0x14>)
    e3b8:	6004      	str	r4, [r0, #0]
    storage->buffer = buffer;
    e3ba:	6041      	str	r1, [r0, #4]
    storage->bytes_written = 0;
    e3bc:	2100      	movs	r1, #0
    e3be:	6081      	str	r1, [r0, #8]
    storage->size = size;
    e3c0:	60c2      	str	r2, [r0, #12]
    return (FILE*)storage;
}
    e3c2:	f85d 4b04 	ldr.w	r4, [sp], #4
    e3c6:	4770      	bx	lr
    e3c8:	0002338c 	.word	0x0002338c

0000e3cc <dpl_cputime_timer_init>:
    dpl_cputime_delay_ticks(ticks);
}

void
dpl_cputime_timer_init(struct hal_timer *timer, hal_timer_cb fp, void *arg)
{
    e3cc:	b510      	push	{r4, lr}
    assert(timer != NULL);
    e3ce:	b140      	cbz	r0, e3e2 <dpl_cputime_timer_init+0x16>
    e3d0:	460c      	mov	r4, r1
    e3d2:	4613      	mov	r3, r2
    e3d4:	4601      	mov	r1, r0
    assert(fp != NULL);
    e3d6:	b154      	cbz	r4, e3ee <dpl_cputime_timer_init+0x22>
    hal_timer_set_cb(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), timer, fp, arg);
    e3d8:	4622      	mov	r2, r4
    e3da:	2000      	movs	r0, #0
    e3dc:	f00a fb02 	bl	189e4 <hal_timer_set_cb>
}
    e3e0:	bd10      	pop	{r4, pc}
    assert(timer != NULL);
    e3e2:	2300      	movs	r3, #0
    e3e4:	461a      	mov	r2, r3
    e3e6:	4619      	mov	r1, r3
    e3e8:	4618      	mov	r0, r3
    e3ea:	f7fa fdbb 	bl	8f64 <__assert_func>
    assert(fp != NULL);
    e3ee:	2300      	movs	r3, #0
    e3f0:	461a      	mov	r2, r3
    e3f2:	4619      	mov	r1, r3
    e3f4:	4618      	mov	r0, r3
    e3f6:	f7fa fdb5 	bl	8f64 <__assert_func>

0000e3fa <dpl_cputime_timer_start>:

int
dpl_cputime_timer_start(struct hal_timer *timer, uint32_t cputime)
{
    e3fa:	b508      	push	{r3, lr}
    int rc;

    rc = hal_timer_start_at(timer, cputime);
    e3fc:	f00a fb08 	bl	18a10 <hal_timer_start_at>
    return rc;
}
    e400:	bd08      	pop	{r3, pc}

0000e402 <dpl_cputime_timer_stop>:
    return rc;
}

void
dpl_cputime_timer_stop(struct hal_timer *timer)
{
    e402:	b508      	push	{r3, lr}
    hal_timer_stop(timer);
    e404:	f00a fb4a 	bl	18a9c <hal_timer_stop>
}
    e408:	bd08      	pop	{r3, pc}

0000e40a <dpl_cputime_get32>:

uint32_t
dpl_cputime_get32(void)
{
    e40a:	b508      	push	{r3, lr}
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
    e40c:	2000      	movs	r0, #0
    e40e:	f00a fad1 	bl	189b4 <hal_timer_read>
return cpu_time;
}
    e412:	bd08      	pop	{r3, pc}

0000e414 <dpl_cputime_delay_ticks>:
{
    e414:	b510      	push	{r4, lr}
    e416:	4604      	mov	r4, r0
    until = dpl_cputime_get32() + ticks;
    e418:	f7ff fff7 	bl	e40a <dpl_cputime_get32>
    e41c:	4404      	add	r4, r0
    while ((int32_t)(dpl_cputime_get32() - until) < 0) {
    e41e:	f7ff fff4 	bl	e40a <dpl_cputime_get32>
    e422:	1b00      	subs	r0, r0, r4
    e424:	2800      	cmp	r0, #0
    e426:	dbfa      	blt.n	e41e <dpl_cputime_delay_ticks+0xa>
}
    e428:	bd10      	pop	{r4, pc}

0000e42a <dpl_cputime_delay_usecs>:
{
    e42a:	b508      	push	{r3, lr}
    dpl_cputime_delay_ticks(ticks);
    e42c:	f7ff fff2 	bl	e414 <dpl_cputime_delay_ticks>
}
    e430:	bd08      	pop	{r3, pc}

0000e432 <dpl_cputime_timer_relative>:
{
    e432:	b538      	push	{r3, r4, r5, lr}
    assert(timer != NULL);
    e434:	b140      	cbz	r0, e448 <dpl_cputime_timer_relative+0x16>
    e436:	460c      	mov	r4, r1
    e438:	4605      	mov	r5, r0
    cputime = dpl_cputime_get32() + dpl_cputime_usecs_to_ticks(usecs);
    e43a:	f7ff ffe6 	bl	e40a <dpl_cputime_get32>
    rc = hal_timer_start_at(timer, cputime);
    e43e:	1901      	adds	r1, r0, r4
    e440:	4628      	mov	r0, r5
    e442:	f00a fae5 	bl	18a10 <hal_timer_start_at>
}
    e446:	bd38      	pop	{r3, r4, r5, pc}
    assert(timer != NULL);
    e448:	2300      	movs	r3, #0
    e44a:	461a      	mov	r2, r3
    e44c:	4619      	mov	r1, r3
    e44e:	4618      	mov	r0, r3
    e450:	f7fa fd88 	bl	8f64 <__assert_func>

0000e454 <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct dpl_mempool *mempool,
                   struct dpl_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
    e454:	b5f0      	push	{r4, r5, r6, r7, lr}
    e456:	b083      	sub	sp, #12
    e458:	460d      	mov	r5, r1
    e45a:	4617      	mov	r7, r2
    int rc;

    rc = dpl_mempool_init(mempool, num_blocks, block_size, mem, name);
    e45c:	b29e      	uxth	r6, r3
    e45e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e460:	9300      	str	r3, [sp, #0]
    e462:	4603      	mov	r3, r0
    e464:	9a08      	ldr	r2, [sp, #32]
    e466:	4631      	mov	r1, r6
    e468:	4628      	mov	r0, r5
    e46a:	f000 f82f 	bl	e4cc <dpl_mempool_init>
    if (rc != 0) {
    e46e:	b108      	cbz	r0, e474 <mem_init_mbuf_pool+0x20>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
    e470:	b003      	add	sp, #12
    e472:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rc = dpl_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
    e474:	4633      	mov	r3, r6
    e476:	9a08      	ldr	r2, [sp, #32]
    e478:	b292      	uxth	r2, r2
    e47a:	4629      	mov	r1, r5
    e47c:	4638      	mov	r0, r7
    e47e:	f000 f8ba 	bl	e5f6 <dpl_mbuf_pool_init>
    if (rc != 0) {
    e482:	e7f5      	b.n	e470 <mem_init_mbuf_pool+0x1c>

0000e484 <mem_split_frag>:
 *                              NULL on failure.
 */
struct dpl_mbuf *
mem_split_frag(struct dpl_mbuf **om, uint16_t max_frag_sz,
               mem_frag_alloc_fn *alloc_cb, void *cb_arg)
{
    e484:	b570      	push	{r4, r5, r6, lr}
    e486:	4604      	mov	r4, r0
    e488:	460d      	mov	r5, r1
    e48a:	4619      	mov	r1, r3
    struct dpl_mbuf *frag;
    int rc;

    if (DPL_MBUF_PKTLEN(*om) <= max_frag_sz) {
    e48c:	6806      	ldr	r6, [r0, #0]
    e48e:	8a33      	ldrh	r3, [r6, #16]
    e490:	42ab      	cmp	r3, r5
    e492:	d913      	bls.n	e4bc <mem_split_frag+0x38>
        *om = NULL;
        return frag;
    }

    /* Packet needs to be split.  Allocate a new buffer for the fragment. */
    frag = alloc_cb(max_frag_sz, cb_arg);
    e494:	4628      	mov	r0, r5
    e496:	4790      	blx	r2
    if (frag == NULL) {
    e498:	4606      	mov	r6, r0
    e49a:	b190      	cbz	r0, e4c2 <mem_split_frag+0x3e>
        goto err;
    }

    /* Move data from the front of the packet into the fragment mbuf. */
    rc = dpl_mbuf_appendfrom(frag, *om, 0, max_frag_sz);
    e49c:	462b      	mov	r3, r5
    e49e:	2200      	movs	r2, #0
    e4a0:	6821      	ldr	r1, [r4, #0]
    e4a2:	f000 f944 	bl	e72e <dpl_mbuf_appendfrom>
    if (rc != 0) {
    e4a6:	b960      	cbnz	r0, e4c2 <mem_split_frag+0x3e>
        goto err;
    }
    dpl_mbuf_adj(*om, max_frag_sz);
    e4a8:	4629      	mov	r1, r5
    e4aa:	6820      	ldr	r0, [r4, #0]
    e4ac:	f000 f96b 	bl	e786 <dpl_mbuf_adj>

    /* Free unused portion of of source mbuf chain, if possible. */
    *om = dpl_mbuf_trim_front(*om);
    e4b0:	6820      	ldr	r0, [r4, #0]
    e4b2:	f000 f9bf 	bl	e834 <dpl_mbuf_trim_front>
    e4b6:	6020      	str	r0, [r4, #0]
    return frag;

err:
    dpl_mbuf_free_chain(frag);
    return NULL;
}
    e4b8:	4630      	mov	r0, r6
    e4ba:	bd70      	pop	{r4, r5, r6, pc}
        *om = NULL;
    e4bc:	2300      	movs	r3, #0
    e4be:	6003      	str	r3, [r0, #0]
        return frag;
    e4c0:	e7fa      	b.n	e4b8 <mem_split_frag+0x34>
    dpl_mbuf_free_chain(frag);
    e4c2:	4630      	mov	r0, r6
    e4c4:	f000 f8bd 	bl	e642 <dpl_mbuf_free_chain>
    return NULL;
    e4c8:	2600      	movs	r6, #0
    e4ca:	e7f5      	b.n	e4b8 <mem_split_frag+0x34>

0000e4cc <dpl_mempool_init>:
    int true_block_size;
    uint8_t *block_addr;
    struct dpl_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
    e4cc:	2800      	cmp	r0, #0
    e4ce:	d035      	beq.n	e53c <dpl_mempool_init+0x70>
{
    e4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e4d2:	460c      	mov	r4, r1
    e4d4:	461d      	mov	r5, r3
    e4d6:	4606      	mov	r6, r0
    if (!mp || (block_size == 0)) {
    e4d8:	2a00      	cmp	r2, #0
    e4da:	d031      	beq.n	e540 <dpl_mempool_init+0x74>
        return DPL_INVALID_PARAM;
    }

    if ((!membuf) && (blocks != 0)) {
    e4dc:	b1c3      	cbz	r3, e510 <dpl_mempool_init+0x44>
        return DPL_INVALID_PARAM;
    }

    if (membuf != NULL) {
    e4de:	b115      	cbz	r5, e4e6 <dpl_mempool_init+0x1a>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uintptr_t)membuf & (DPL_ALIGNMENT - 1)) != 0) {
    e4e0:	f015 0f03 	tst.w	r5, #3
    e4e4:	d12e      	bne.n	e544 <dpl_mempool_init+0x78>
            return DPL_MEM_NOT_ALIGNED;
        }
    }
    true_block_size = DPL_MEM_TRUE_BLOCK_SIZE(block_size);
    e4e6:	f012 0f03 	tst.w	r2, #3
    e4ea:	d015      	beq.n	e518 <dpl_mempool_init+0x4c>
    e4ec:	f022 0703 	bic.w	r7, r2, #3
    e4f0:	3704      	adds	r7, #4

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
    e4f2:	6032      	str	r2, [r6, #0]
    mp->mp_num_free = blocks;
    e4f4:	80f4      	strh	r4, [r6, #6]
    mp->mp_min_free = blocks;
    e4f6:	8134      	strh	r4, [r6, #8]
    mp->mp_flags = 0;
    e4f8:	2300      	movs	r3, #0
    e4fa:	72b3      	strb	r3, [r6, #10]
    mp->mp_num_blocks = blocks;
    e4fc:	80b4      	strh	r4, [r6, #4]
    mp->mp_membuf_addr = (uintptr_t)membuf;
    e4fe:	60f5      	str	r5, [r6, #12]
    mp->name = name;
    e500:	9b06      	ldr	r3, [sp, #24]
    e502:	61b3      	str	r3, [r6, #24]
    dpl_mempool_poison(membuf, true_block_size);
    SLIST_FIRST(mp) = membuf;
    e504:	6175      	str	r5, [r6, #20]
    return (dpl_error_t)os_mutex_init(&mu->mu);
    e506:	f106 001c 	add.w	r0, r6, #28
    e50a:	f7fc fa37 	bl	a97c <os_mutex_init>
    dpl_mutex_init(&mp->mutex);

    /* Chain the memory blocks to the free list */
    block_addr = (uint8_t *)membuf;
    block_ptr = (struct dpl_memblock *)block_addr;
    while (blocks > 1) {
    e50e:	e00a      	b.n	e526 <dpl_mempool_init+0x5a>
    if ((!membuf) && (blocks != 0)) {
    e510:	2900      	cmp	r1, #0
    e512:	d0e4      	beq.n	e4de <dpl_mempool_init+0x12>
        return DPL_INVALID_PARAM;
    e514:	2003      	movs	r0, #3
    e516:	e010      	b.n	e53a <dpl_mempool_init+0x6e>
    true_block_size = DPL_MEM_TRUE_BLOCK_SIZE(block_size);
    e518:	4617      	mov	r7, r2
    e51a:	e7ea      	b.n	e4f2 <dpl_mempool_init+0x26>
        block_addr += true_block_size;
    e51c:	19eb      	adds	r3, r5, r7
        dpl_mempool_poison(block_addr, true_block_size);
        SLIST_NEXT(block_ptr, mb_next) = (struct dpl_memblock *)block_addr;
    e51e:	602b      	str	r3, [r5, #0]
        block_ptr = (struct dpl_memblock *)block_addr;
        --blocks;
    e520:	3c01      	subs	r4, #1
    e522:	b2a4      	uxth	r4, r4
        block_addr += true_block_size;
    e524:	461d      	mov	r5, r3
    while (blocks > 1) {
    e526:	2c01      	cmp	r4, #1
    e528:	d8f8      	bhi.n	e51c <dpl_mempool_init+0x50>
    }

    /* Last one in the list should be NULL */
    SLIST_NEXT(block_ptr, mb_next) = NULL;
    e52a:	2000      	movs	r0, #0
    e52c:	6028      	str	r0, [r5, #0]

    STAILQ_INSERT_TAIL(&g_dpl_mempool_list, mp, mp_list);
    e52e:	6130      	str	r0, [r6, #16]
    e530:	4b05      	ldr	r3, [pc, #20]	; (e548 <dpl_mempool_init+0x7c>)
    e532:	685a      	ldr	r2, [r3, #4]
    e534:	6016      	str	r6, [r2, #0]
    e536:	3610      	adds	r6, #16
    e538:	605e      	str	r6, [r3, #4]

    return DPL_OK;
}
    e53a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return DPL_INVALID_PARAM;
    e53c:	2003      	movs	r0, #3
}
    e53e:	4770      	bx	lr
        return DPL_INVALID_PARAM;
    e540:	2003      	movs	r0, #3
    e542:	e7fa      	b.n	e53a <dpl_mempool_init+0x6e>
            return DPL_MEM_NOT_ALIGNED;
    e544:	2004      	movs	r0, #4
    e546:	e7f8      	b.n	e53a <dpl_mempool_init+0x6e>
    e548:	200005d8 	.word	0x200005d8

0000e54c <dpl_memblock_get>:
    return 1;
}

void *
dpl_memblock_get(struct dpl_mempool *mp)
{
    e54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dpl_sr_t sr;
    struct dpl_memblock *block;

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
    e54e:	4604      	mov	r4, r0
    e550:	b1f8      	cbz	r0, e592 <dpl_memblock_get+0x46>
    return os_arch_save_sr();
    e552:	f7fb ff1f 	bl	a394 <os_arch_save_sr>
    e556:	4605      	mov	r5, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
    e558:	f104 071c 	add.w	r7, r4, #28
    e55c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e560:	4638      	mov	r0, r7
    e562:	f7fc fa71 	bl	aa48 <os_mutex_pend>
        DPL_ENTER_CRITICAL(sr);
        dpl_mutex_pend(&mp->mutex, DPL_WAIT_FOREVER);
        /* Check for any free */
        if (mp->mp_num_free) {
    e566:	88e3      	ldrh	r3, [r4, #6]
    e568:	b153      	cbz	r3, e580 <dpl_memblock_get+0x34>
            /* Get a free block */
            block = SLIST_FIRST(mp);
    e56a:	6966      	ldr	r6, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
    e56c:	6832      	ldr	r2, [r6, #0]
    e56e:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
    e570:	3b01      	subs	r3, #1
    e572:	b29b      	uxth	r3, r3
    e574:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
    e576:	8922      	ldrh	r2, [r4, #8]
    e578:	4293      	cmp	r3, r2
    e57a:	d202      	bcs.n	e582 <dpl_memblock_get+0x36>
                mp->mp_min_free = mp->mp_num_free;
    e57c:	8123      	strh	r3, [r4, #8]
    e57e:	e000      	b.n	e582 <dpl_memblock_get+0x36>
    block = NULL;
    e580:	2600      	movs	r6, #0
    return (dpl_error_t)os_mutex_release(&mu->mu);
    e582:	4638      	mov	r0, r7
    e584:	f7fc fa04 	bl	a990 <os_mutex_release>
    os_arch_restore_sr(ctx);
    e588:	4628      	mov	r0, r5
    e58a:	f7fb ff09 	bl	a3a0 <os_arch_restore_sr>
            dpl_mempool_poison_check(block, DPL_MEMPOOL_TRUE_BLOCK_SIZE(mp));
        }
    }

    return (void *)block;
}
    e58e:	4630      	mov	r0, r6
    e590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    block = NULL;
    e592:	4606      	mov	r6, r0
    return (void *)block;
    e594:	e7fb      	b.n	e58e <dpl_memblock_get+0x42>

0000e596 <dpl_memblock_put_from_cb>:

dpl_error_t
dpl_memblock_put_from_cb(struct dpl_mempool *mp, void *block_addr)
{
    e596:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e598:	4604      	mov	r4, r0
    e59a:	460d      	mov	r5, r1
    return os_arch_save_sr();
    e59c:	f7fb fefa 	bl	a394 <os_arch_save_sr>
    e5a0:	4606      	mov	r6, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
    e5a2:	f104 071c 	add.w	r7, r4, #28
    e5a6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e5aa:	4638      	mov	r0, r7
    e5ac:	f7fc fa4c 	bl	aa48 <os_mutex_pend>
    block = (struct dpl_memblock *)block_addr;
    DPL_ENTER_CRITICAL(sr);
    dpl_mutex_pend(&mp->mutex, DPL_WAIT_FOREVER);

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
    e5b0:	6963      	ldr	r3, [r4, #20]
    e5b2:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;
    e5b4:	6165      	str	r5, [r4, #20]

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
    e5b6:	88e3      	ldrh	r3, [r4, #6]
    e5b8:	3301      	adds	r3, #1
    e5ba:	80e3      	strh	r3, [r4, #6]
    return (dpl_error_t)os_mutex_release(&mu->mu);
    e5bc:	4638      	mov	r0, r7
    e5be:	f7fc f9e7 	bl	a990 <os_mutex_release>
    os_arch_restore_sr(ctx);
    e5c2:	4630      	mov	r0, r6
    e5c4:	f7fb feec 	bl	a3a0 <os_arch_restore_sr>

    dpl_mutex_release(&mp->mutex);
    DPL_EXIT_CRITICAL(sr);

    return DPL_OK;
}
    e5c8:	2000      	movs	r0, #0
    e5ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000e5cc <dpl_memblock_put>:
#if MYNEWT_VAL(DPL_MEMPOOL_CHECK)
    struct dpl_memblock *block;
#endif

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
    e5cc:	b178      	cbz	r0, e5ee <dpl_memblock_put+0x22>
    e5ce:	4603      	mov	r3, r0
    e5d0:	b179      	cbz	r1, e5f2 <dpl_memblock_put+0x26>
{
    e5d2:	b510      	push	{r4, lr}
#endif

    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & DPL_MEMPOOL_F_EXT) {
    e5d4:	7a82      	ldrb	r2, [r0, #10]
    e5d6:	f012 0f01 	tst.w	r2, #1
    e5da:	d004      	beq.n	e5e6 <dpl_memblock_put+0x1a>
        mpe = (struct dpl_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
    e5dc:	6a84      	ldr	r4, [r0, #40]	; 0x28
    e5de:	b114      	cbz	r4, e5e6 <dpl_memblock_put+0x1a>
            rc = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
    e5e0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    e5e2:	47a0      	blx	r4
            return rc;
    e5e4:	e002      	b.n	e5ec <dpl_memblock_put+0x20>
        }
    }

    /* No callback; free the block. */
    return dpl_memblock_put_from_cb(mp, block_addr);
    e5e6:	4618      	mov	r0, r3
    e5e8:	f7ff ffd5 	bl	e596 <dpl_memblock_put_from_cb>
}
    e5ec:	bd10      	pop	{r4, pc}
        return DPL_INVALID_PARAM;
    e5ee:	2003      	movs	r0, #3
    e5f0:	4770      	bx	lr
    e5f2:	2003      	movs	r0, #3
}
    e5f4:	4770      	bx	lr

0000e5f6 <dpl_mbuf_pool_init>:

int
dpl_mbuf_pool_init(struct dpl_mbuf_pool *omp, struct dpl_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct dpl_mbuf);
    e5f6:	3a10      	subs	r2, #16
    e5f8:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
    e5fa:	6041      	str	r1, [r0, #4]

    return (0);
}
    e5fc:	2000      	movs	r0, #0
    e5fe:	4770      	bx	lr

0000e600 <dpl_mbuf_get>:

struct dpl_mbuf *
dpl_mbuf_get(struct dpl_mbuf_pool *omp, uint16_t leadingspace)
{
    e600:	b538      	push	{r3, r4, r5, lr}
    struct dpl_mbuf *om;

    if (leadingspace > omp->omp_databuf_len) {
    e602:	8803      	ldrh	r3, [r0, #0]
    e604:	428b      	cmp	r3, r1
    e606:	d310      	bcc.n	e62a <dpl_mbuf_get+0x2a>
    e608:	4604      	mov	r4, r0
    e60a:	460d      	mov	r5, r1
        goto err;
    }

    om = dpl_memblock_get(omp->omp_pool);
    e60c:	6840      	ldr	r0, [r0, #4]
    e60e:	f7ff ff9d 	bl	e54c <dpl_memblock_get>
    if (!om) {
    e612:	b148      	cbz	r0, e628 <dpl_mbuf_get+0x28>
        goto err;
    }

    SLIST_NEXT(om, om_next) = NULL;
    e614:	2300      	movs	r3, #0
    e616:	60c3      	str	r3, [r0, #12]
    om->om_flags = 0;
    e618:	7103      	strb	r3, [r0, #4]
    om->om_pkthdr_len = 0;
    e61a:	7143      	strb	r3, [r0, #5]
    om->om_len = 0;
    e61c:	80c3      	strh	r3, [r0, #6]
    om->om_data = (&om->om_databuf[0] + leadingspace);
    e61e:	f100 0110 	add.w	r1, r0, #16
    e622:	440d      	add	r5, r1
    e624:	6005      	str	r5, [r0, #0]
    om->om_omp = omp;
    e626:	6084      	str	r4, [r0, #8]

    return (om);
err:
    return (NULL);
}
    e628:	bd38      	pop	{r3, r4, r5, pc}
    return (NULL);
    e62a:	2000      	movs	r0, #0
    e62c:	e7fc      	b.n	e628 <dpl_mbuf_get+0x28>

0000e62e <dpl_mbuf_free>:
    return om;
}

int
dpl_mbuf_free(struct dpl_mbuf *om)
{
    e62e:	b508      	push	{r3, lr}
    int rc;

    if (om->om_omp != NULL) {
    e630:	6883      	ldr	r3, [r0, #8]
    e632:	b123      	cbz	r3, e63e <dpl_mbuf_free+0x10>
    e634:	4601      	mov	r1, r0
        rc = dpl_memblock_put(om->om_omp->omp_pool, om);
    e636:	6858      	ldr	r0, [r3, #4]
    e638:	f7ff ffc8 	bl	e5cc <dpl_memblock_put>
    }

    return (0);
err:
    return (rc);
}
    e63c:	bd08      	pop	{r3, pc}
    return (0);
    e63e:	2000      	movs	r0, #0
    e640:	e7fc      	b.n	e63c <dpl_mbuf_free+0xe>

0000e642 <dpl_mbuf_free_chain>:
dpl_mbuf_free_chain(struct dpl_mbuf *om)
{
    struct dpl_mbuf *next;
    int rc;

    while (om != NULL) {
    e642:	b158      	cbz	r0, e65c <dpl_mbuf_free_chain+0x1a>
{
    e644:	b510      	push	{r4, lr}
        next = SLIST_NEXT(om, om_next);
    e646:	68c4      	ldr	r4, [r0, #12]

        rc = dpl_mbuf_free(om);
    e648:	f7ff fff1 	bl	e62e <dpl_mbuf_free>
        if (rc != 0) {
    e64c:	4603      	mov	r3, r0
    e64e:	b918      	cbnz	r0, e658 <dpl_mbuf_free_chain+0x16>
            goto err;
        }

        om = next;
    e650:	4620      	mov	r0, r4
    while (om != NULL) {
    e652:	2c00      	cmp	r4, #0
    e654:	d1f7      	bne.n	e646 <dpl_mbuf_free_chain+0x4>
    }

    return (0);
    e656:	2300      	movs	r3, #0
err:
    return (rc);
}
    e658:	4618      	mov	r0, r3
    e65a:	bd10      	pop	{r4, pc}
    return (0);
    e65c:	2300      	movs	r3, #0
}
    e65e:	4618      	mov	r0, r3
    e660:	4770      	bx	lr

0000e662 <dpl_mbuf_append>:
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
}

int
dpl_mbuf_append(struct dpl_mbuf *om, const void *data,  uint16_t len)
{
    e662:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    struct dpl_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
    e666:	2800      	cmp	r0, #0
    e668:	d04b      	beq.n	e702 <dpl_mbuf_append+0xa0>
    e66a:	460f      	mov	r7, r1
    e66c:	4691      	mov	r9, r2
    e66e:	4682      	mov	sl, r0
        rc = DPL_EINVAL;
        goto err;
    }

    omp = om->om_omp;
    e670:	f8d0 8008 	ldr.w	r8, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
    e674:	4603      	mov	r3, r0
    while (SLIST_NEXT(last, om_next) != NULL) {
    e676:	461e      	mov	r6, r3
    e678:	68db      	ldr	r3, [r3, #12]
    e67a:	2b00      	cmp	r3, #0
    e67c:	d1fb      	bne.n	e676 <dpl_mbuf_append+0x14>
        last = SLIST_NEXT(last, om_next);
    }

    remainder = len;
    e67e:	464d      	mov	r5, r9
static inline uint16_t
_dpl_mbuf_trailingspace(struct dpl_mbuf *om)
{
    struct dpl_mbuf_pool *omp;

    omp = om->om_omp;
    e680:	68b3      	ldr	r3, [r6, #8]

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    e682:	f106 0410 	add.w	r4, r6, #16
    e686:	881b      	ldrh	r3, [r3, #0]
    e688:	441c      	add	r4, r3
      (om->om_data + om->om_len);
    e68a:	6830      	ldr	r0, [r6, #0]
    e68c:	88f3      	ldrh	r3, [r6, #6]
    e68e:	4418      	add	r0, r3
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    e690:	1a24      	subs	r4, r4, r0
    e692:	b2a4      	uxth	r4, r4
    space = DPL_MBUF_TRAILINGSPACE(last);

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
    e694:	b164      	cbz	r4, e6b0 <dpl_mbuf_append+0x4e>
        if (space > remainder) {
    e696:	454c      	cmp	r4, r9
    e698:	dd00      	ble.n	e69c <dpl_mbuf_append+0x3a>
            space = remainder;
    e69a:	464c      	mov	r4, r9
        }

        memcpy(DPL_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
    e69c:	4622      	mov	r2, r4
    e69e:	4639      	mov	r1, r7
    e6a0:	f7ff fa0e 	bl	dac0 <memcpy>

        last->om_len += space;
    e6a4:	88f3      	ldrh	r3, [r6, #6]
    e6a6:	4423      	add	r3, r4
    e6a8:	80f3      	strh	r3, [r6, #6]
        data += space;
    e6aa:	4427      	add	r7, r4
        remainder -= space;
    e6ac:	eba9 0504 	sub.w	r5, r9, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
    e6b0:	2d00      	cmp	r5, #0
    e6b2:	dd16      	ble.n	e6e2 <dpl_mbuf_append+0x80>
        new = dpl_mbuf_get(omp, 0);
    e6b4:	2100      	movs	r1, #0
    e6b6:	4640      	mov	r0, r8
    e6b8:	f7ff ffa2 	bl	e600 <dpl_mbuf_get>
        if (!new) {
    e6bc:	4604      	mov	r4, r0
    e6be:	b180      	cbz	r0, e6e2 <dpl_mbuf_append+0x80>
            break;
        }

        new->om_len = mynewt_min(omp->omp_databuf_len, remainder);
    e6c0:	f8b8 2000 	ldrh.w	r2, [r8]
    e6c4:	42aa      	cmp	r2, r5
    e6c6:	bfa8      	it	ge
    e6c8:	462a      	movge	r2, r5
    e6ca:	b292      	uxth	r2, r2
    e6cc:	80c2      	strh	r2, [r0, #6]
        memcpy(DPL_MBUF_DATA(new, void *), data, new->om_len);
    e6ce:	4639      	mov	r1, r7
    e6d0:	6800      	ldr	r0, [r0, #0]
    e6d2:	f7ff f9f5 	bl	dac0 <memcpy>
        data += new->om_len;
    e6d6:	88e3      	ldrh	r3, [r4, #6]
    e6d8:	441f      	add	r7, r3
        remainder -= new->om_len;
    e6da:	1aed      	subs	r5, r5, r3
        SLIST_NEXT(last, om_next) = new;
    e6dc:	60f4      	str	r4, [r6, #12]
        last = new;
    e6de:	4626      	mov	r6, r4
    e6e0:	e7e6      	b.n	e6b0 <dpl_mbuf_append+0x4e>
    }

    /* Adjust the packet header length in the buffer */
    if (DPL_MBUF_IS_PKTHDR(om)) {
    e6e2:	f89a 3005 	ldrb.w	r3, [sl, #5]
    e6e6:	2b07      	cmp	r3, #7
    e6e8:	d907      	bls.n	e6fa <dpl_mbuf_append+0x98>
        DPL_MBUF_PKTHDR(om)->omp_len += len - remainder;
    e6ea:	eba9 0905 	sub.w	r9, r9, r5
    e6ee:	f8ba 3010 	ldrh.w	r3, [sl, #16]
    e6f2:	fa13 f989 	uxtah	r9, r3, r9
    e6f6:	f8aa 9010 	strh.w	r9, [sl, #16]
    }

    if (remainder != 0) {
    e6fa:	b925      	cbnz	r5, e706 <dpl_mbuf_append+0xa4>


    return (0);
err:
    return (rc);
}
    e6fc:	4628      	mov	r0, r5
    e6fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = DPL_EINVAL;
    e702:	2502      	movs	r5, #2
    e704:	e7fa      	b.n	e6fc <dpl_mbuf_append+0x9a>
        rc = DPL_ENOMEM;
    e706:	2501      	movs	r5, #1
    e708:	e7f8      	b.n	e6fc <dpl_mbuf_append+0x9a>

0000e70a <dpl_mbuf_off>:

    /* Cast away const. */
    cur = (struct dpl_mbuf *)om;

    while (1) {
        if (cur == NULL) {
    e70a:	b178      	cbz	r0, e72c <dpl_mbuf_off+0x22>
{
    e70c:	b410      	push	{r4}
    e70e:	e002      	b.n	e716 <dpl_mbuf_off+0xc>

            *out_off = off;
            return cur;
        }

        off -= cur->om_len;
    e710:	1ac9      	subs	r1, r1, r3
        cur = next;
    e712:	4620      	mov	r0, r4
        if (cur == NULL) {
    e714:	b13c      	cbz	r4, e726 <dpl_mbuf_off+0x1c>
        next = SLIST_NEXT(cur, om_next);
    e716:	68c4      	ldr	r4, [r0, #12]
        if (cur->om_len > off ||
    e718:	88c3      	ldrh	r3, [r0, #6]
    e71a:	428b      	cmp	r3, r1
    e71c:	dc02      	bgt.n	e724 <dpl_mbuf_off+0x1a>
    e71e:	d1f7      	bne.n	e710 <dpl_mbuf_off+0x6>
            (cur->om_len == off && next == NULL)) {
    e720:	2c00      	cmp	r4, #0
    e722:	d1f5      	bne.n	e710 <dpl_mbuf_off+0x6>
            *out_off = off;
    e724:	8011      	strh	r1, [r2, #0]
    }
}
    e726:	f85d 4b04 	ldr.w	r4, [sp], #4
    e72a:	4770      	bx	lr
    e72c:	4770      	bx	lr

0000e72e <dpl_mbuf_appendfrom>:
{
    e72e:	b5f0      	push	{r4, r5, r6, r7, lr}
    e730:	b083      	sub	sp, #12
    e732:	4607      	mov	r7, r0
    e734:	4608      	mov	r0, r1
    e736:	4611      	mov	r1, r2
    e738:	461e      	mov	r6, r3
    src_cur_om = dpl_mbuf_off(src, src_off, &src_cur_off);
    e73a:	f10d 0206 	add.w	r2, sp, #6
    e73e:	f7ff ffe4 	bl	e70a <dpl_mbuf_off>
    e742:	4605      	mov	r5, r0
    while (len > 0) {
    e744:	e005      	b.n	e752 <dpl_mbuf_appendfrom+0x24>
        len -= chunk_sz;
    e746:	1b34      	subs	r4, r6, r4
    e748:	b2a6      	uxth	r6, r4
        src_cur_om = SLIST_NEXT(src_cur_om, om_next);
    e74a:	68ed      	ldr	r5, [r5, #12]
        src_cur_off = 0;
    e74c:	2300      	movs	r3, #0
    e74e:	f8ad 3006 	strh.w	r3, [sp, #6]
    while (len > 0) {
    e752:	b196      	cbz	r6, e77a <dpl_mbuf_appendfrom+0x4c>
        if (src_cur_om == NULL) {
    e754:	b1ad      	cbz	r5, e782 <dpl_mbuf_appendfrom+0x54>
        chunk_sz = mynewt_min(len, src_cur_om->om_len - src_cur_off);
    e756:	88ec      	ldrh	r4, [r5, #6]
    e758:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    e75c:	1ae4      	subs	r4, r4, r3
    e75e:	42b4      	cmp	r4, r6
    e760:	bfa8      	it	ge
    e762:	4634      	movge	r4, r6
    e764:	b2a4      	uxth	r4, r4
        rc = dpl_mbuf_append(dst, src_cur_om->om_data + src_cur_off, chunk_sz);
    e766:	6829      	ldr	r1, [r5, #0]
    e768:	4622      	mov	r2, r4
    e76a:	4419      	add	r1, r3
    e76c:	4638      	mov	r0, r7
    e76e:	f7ff ff78 	bl	e662 <dpl_mbuf_append>
        if (rc != 0) {
    e772:	4603      	mov	r3, r0
    e774:	2800      	cmp	r0, #0
    e776:	d0e6      	beq.n	e746 <dpl_mbuf_appendfrom+0x18>
    e778:	e000      	b.n	e77c <dpl_mbuf_appendfrom+0x4e>
    return 0;
    e77a:	2300      	movs	r3, #0
}
    e77c:	4618      	mov	r0, r3
    e77e:	b003      	add	sp, #12
    e780:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return DPL_EINVAL;
    e782:	2302      	movs	r3, #2
    e784:	e7fa      	b.n	e77c <dpl_mbuf_appendfrom+0x4e>

0000e786 <dpl_mbuf_adj>:
{
    int len = req_len;
    struct dpl_mbuf *m;
    int count;

    if ((m = mp) == NULL)
    e786:	2800      	cmp	r0, #0
    e788:	d053      	beq.n	e832 <dpl_mbuf_adj+0xac>
{
    e78a:	b510      	push	{r4, lr}
    e78c:	4604      	mov	r4, r0
        return;
    if (len >= 0) {
    e78e:	2900      	cmp	r1, #0
    e790:	db1b      	blt.n	e7ca <dpl_mbuf_adj+0x44>
    if ((m = mp) == NULL)
    e792:	4603      	mov	r3, r0
    int len = req_len;
    e794:	460a      	mov	r2, r1
    e796:	e005      	b.n	e7a4 <dpl_mbuf_adj+0x1e>
            if (m->om_len <= len) {
                len -= m->om_len;
                m->om_len = 0;
                m = SLIST_NEXT(m, om_next);
            } else {
                m->om_len -= len;
    e798:	1a80      	subs	r0, r0, r2
    e79a:	80d8      	strh	r0, [r3, #6]
                m->om_data += len;
    e79c:	6818      	ldr	r0, [r3, #0]
    e79e:	4402      	add	r2, r0
    e7a0:	601a      	str	r2, [r3, #0]
                len = 0;
    e7a2:	2200      	movs	r2, #0
        while (m != NULL && len > 0) {
    e7a4:	b14b      	cbz	r3, e7ba <dpl_mbuf_adj+0x34>
    e7a6:	2a00      	cmp	r2, #0
    e7a8:	dd07      	ble.n	e7ba <dpl_mbuf_adj+0x34>
            if (m->om_len <= len) {
    e7aa:	88d8      	ldrh	r0, [r3, #6]
    e7ac:	4290      	cmp	r0, r2
    e7ae:	dcf3      	bgt.n	e798 <dpl_mbuf_adj+0x12>
                len -= m->om_len;
    e7b0:	1a12      	subs	r2, r2, r0
                m->om_len = 0;
    e7b2:	2000      	movs	r0, #0
    e7b4:	80d8      	strh	r0, [r3, #6]
                m = SLIST_NEXT(m, om_next);
    e7b6:	68db      	ldr	r3, [r3, #12]
    e7b8:	e7f4      	b.n	e7a4 <dpl_mbuf_adj+0x1e>
            }
        }
        if (DPL_MBUF_IS_PKTHDR(mp))
    e7ba:	7963      	ldrb	r3, [r4, #5]
    e7bc:	2b07      	cmp	r3, #7
    e7be:	d903      	bls.n	e7c8 <dpl_mbuf_adj+0x42>
            DPL_MBUF_PKTHDR(mp)->omp_len -= (req_len - len);
    e7c0:	1a52      	subs	r2, r2, r1
    e7c2:	8a23      	ldrh	r3, [r4, #16]
    e7c4:	441a      	add	r2, r3
    e7c6:	8222      	strh	r2, [r4, #16]
                break;
            }
            count -= m->om_len;
        }
    }
}
    e7c8:	bd10      	pop	{r4, pc}
        len = -len;
    e7ca:	f1c1 0e00 	rsb	lr, r1, #0
    if ((m = mp) == NULL)
    e7ce:	4603      	mov	r3, r0
        count = 0;
    e7d0:	2200      	movs	r2, #0
            count += m->om_len;
    e7d2:	88d8      	ldrh	r0, [r3, #6]
    e7d4:	4402      	add	r2, r0
            if (SLIST_NEXT(m, om_next) == (struct dpl_mbuf *)0)
    e7d6:	469c      	mov	ip, r3
    e7d8:	68db      	ldr	r3, [r3, #12]
    e7da:	2b00      	cmp	r3, #0
    e7dc:	d1f9      	bne.n	e7d2 <dpl_mbuf_adj+0x4c>
        if (m->om_len >= len) {
    e7de:	4570      	cmp	r0, lr
    e7e0:	da0d      	bge.n	e7fe <dpl_mbuf_adj+0x78>
        if (count < 0)
    e7e2:	188a      	adds	r2, r1, r2
    e7e4:	d41a      	bmi.n	e81c <dpl_mbuf_adj+0x96>
        if (DPL_MBUF_IS_PKTHDR(m))
    e7e6:	7963      	ldrb	r3, [r4, #5]
    e7e8:	2b07      	cmp	r3, #7
    e7ea:	d900      	bls.n	e7ee <dpl_mbuf_adj+0x68>
            DPL_MBUF_PKTHDR(m)->omp_len = count;
    e7ec:	8222      	strh	r2, [r4, #16]
        for (; m; m = SLIST_NEXT(m, om_next)) {
    e7ee:	2c00      	cmp	r4, #0
    e7f0:	d0ea      	beq.n	e7c8 <dpl_mbuf_adj+0x42>
            if (m->om_len >= count) {
    e7f2:	88e3      	ldrh	r3, [r4, #6]
    e7f4:	4293      	cmp	r3, r2
    e7f6:	da13      	bge.n	e820 <dpl_mbuf_adj+0x9a>
            count -= m->om_len;
    e7f8:	1ad2      	subs	r2, r2, r3
        for (; m; m = SLIST_NEXT(m, om_next)) {
    e7fa:	68e4      	ldr	r4, [r4, #12]
    e7fc:	e7f7      	b.n	e7ee <dpl_mbuf_adj+0x68>
            m->om_len -= len;
    e7fe:	fa1f fe8e 	uxth.w	lr, lr
    e802:	eba0 000e 	sub.w	r0, r0, lr
    e806:	f8ac 0006 	strh.w	r0, [ip, #6]
            if (DPL_MBUF_IS_PKTHDR(mp))
    e80a:	7963      	ldrb	r3, [r4, #5]
    e80c:	2b07      	cmp	r3, #7
    e80e:	d9db      	bls.n	e7c8 <dpl_mbuf_adj+0x42>
                DPL_MBUF_PKTHDR(mp)->omp_len -= len;
    e810:	8a23      	ldrh	r3, [r4, #16]
    e812:	eba3 0e0e 	sub.w	lr, r3, lr
    e816:	f8a4 e010 	strh.w	lr, [r4, #16]
            return;
    e81a:	e7d5      	b.n	e7c8 <dpl_mbuf_adj+0x42>
            count = 0;
    e81c:	2200      	movs	r2, #0
    e81e:	e7e2      	b.n	e7e6 <dpl_mbuf_adj+0x60>
                m->om_len = count;
    e820:	80e2      	strh	r2, [r4, #6]
                if (SLIST_NEXT(m, om_next) != NULL) {
    e822:	68e0      	ldr	r0, [r4, #12]
    e824:	2800      	cmp	r0, #0
    e826:	d0cf      	beq.n	e7c8 <dpl_mbuf_adj+0x42>
                    dpl_mbuf_free_chain(SLIST_NEXT(m, om_next));
    e828:	f7ff ff0b 	bl	e642 <dpl_mbuf_free_chain>
                    SLIST_NEXT(m, om_next) = NULL;
    e82c:	2300      	movs	r3, #0
    e82e:	60e3      	str	r3, [r4, #12]
    e830:	e7ca      	b.n	e7c8 <dpl_mbuf_adj+0x42>
    e832:	4770      	bx	lr

0000e834 <dpl_mbuf_trim_front>:
    return (NULL);
}

struct dpl_mbuf *
dpl_mbuf_trim_front(struct dpl_mbuf *om)
{
    e834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e836:	4606      	mov	r6, r0
    struct dpl_mbuf *next;
    struct dpl_mbuf *cur;

    /* Abort early if there is nothing to trim. */
    if (om->om_len != 0) {
    e838:	88c7      	ldrh	r7, [r0, #6]
    e83a:	b9cf      	cbnz	r7, e870 <dpl_mbuf_trim_front+0x3c>
    }

    /* Starting with the second mbuf in the chain, continue removing and
     * freeing mbufs until an non-empty one is encountered.
     */
    cur = SLIST_NEXT(om, om_next);
    e83c:	68c4      	ldr	r4, [r0, #12]
    while (cur != NULL && cur->om_len == 0) {
    e83e:	b144      	cbz	r4, e852 <dpl_mbuf_trim_front+0x1e>
    e840:	88e3      	ldrh	r3, [r4, #6]
    e842:	b933      	cbnz	r3, e852 <dpl_mbuf_trim_front+0x1e>
        next = SLIST_NEXT(cur, om_next);
    e844:	68e5      	ldr	r5, [r4, #12]

        SLIST_NEXT(om, om_next) = next;
    e846:	60f5      	str	r5, [r6, #12]
        dpl_mbuf_free(cur);
    e848:	4620      	mov	r0, r4
    e84a:	f7ff fef0 	bl	e62e <dpl_mbuf_free>

        cur = next;
    e84e:	462c      	mov	r4, r5
    e850:	e7f5      	b.n	e83e <dpl_mbuf_trim_front+0xa>
    }

    if (cur == NULL) {
    e852:	b16c      	cbz	r4, e870 <dpl_mbuf_trim_front+0x3c>
    if (DPL_MBUF_IS_PKTHDR(om)) {
    e854:	7963      	ldrb	r3, [r4, #5]
    e856:	2b07      	cmp	r3, #7
    e858:	d900      	bls.n	e85c <dpl_mbuf_trim_front+0x28>
        startoff = om->om_pkthdr_len;
    e85a:	b29f      	uxth	r7, r3
    leadingspace = (uint16_t) (DPL_MBUF_DATA(om, uint8_t *) -
    e85c:	4620      	mov	r0, r4
    e85e:	f850 3b10 	ldr.w	r3, [r0], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
    e862:	4407      	add	r7, r0
    leadingspace = (uint16_t) (DPL_MBUF_DATA(om, uint8_t *) -
    e864:	1bdf      	subs	r7, r3, r7
    e866:	b2bf      	uxth	r7, r7
    }

    /* Try to remove the first mbuf in the chain.  If this buffer contains a
     * packet header, make sure the second buffer can accommodate it.
     */
    if (DPL_MBUF_LEADINGSPACE(cur) >= om->om_pkthdr_len) {
    e868:	7972      	ldrb	r2, [r6, #5]
    e86a:	b293      	uxth	r3, r2
    e86c:	42bb      	cmp	r3, r7
    e86e:	d901      	bls.n	e874 <dpl_mbuf_trim_front+0x40>
        dpl_mbuf_free(om);
        om = cur;
    }

    return om;
}
    e870:	4630      	mov	r0, r6
    e872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        cur->om_pkthdr_len = om->om_pkthdr_len;
    e874:	7162      	strb	r2, [r4, #5]
        memcpy(DPL_MBUF_PKTHDR(cur), DPL_MBUF_PKTHDR(om), om->om_pkthdr_len);
    e876:	f106 0110 	add.w	r1, r6, #16
    e87a:	f7ff f921 	bl	dac0 <memcpy>
        dpl_mbuf_free(om);
    e87e:	4630      	mov	r0, r6
    e880:	f7ff fed5 	bl	e62e <dpl_mbuf_free>
        om = cur;
    e884:	4626      	mov	r6, r4
    e886:	e7f3      	b.n	e870 <dpl_mbuf_trim_front+0x3c>

0000e888 <conf_dup_check_cb>:
    return 0;
}

static void
conf_dup_check_cb(char *name, char *val, void *cb_arg)
{
    e888:	b538      	push	{r3, r4, r5, lr}
    e88a:	460d      	mov	r5, r1
    e88c:	4614      	mov	r4, r2
    struct conf_dup_check_arg *cdca = (struct conf_dup_check_arg *)cb_arg;

    if (strcmp(name, cdca->name)) {
    e88e:	6811      	ldr	r1, [r2, #0]
    e890:	f7ff f94e 	bl	db30 <strcmp>
    e894:	b9a8      	cbnz	r0, e8c2 <conf_dup_check_cb+0x3a>
        return;
    }
    if (!val) {
    e896:	b145      	cbz	r5, e8aa <conf_dup_check_cb+0x22>
            cdca->is_dup = 1;
        } else {
            cdca->is_dup = 0;
        }
    } else {
        if (cdca->val && !strcmp(val, cdca->val)) {
    e898:	6861      	ldr	r1, [r4, #4]
    e89a:	b181      	cbz	r1, e8be <conf_dup_check_cb+0x36>
    e89c:	4628      	mov	r0, r5
    e89e:	f7ff f947 	bl	db30 <strcmp>
    e8a2:	b960      	cbnz	r0, e8be <conf_dup_check_cb+0x36>
            cdca->is_dup = 1;
    e8a4:	2301      	movs	r3, #1
    e8a6:	60a3      	str	r3, [r4, #8]
    e8a8:	e00b      	b.n	e8c2 <conf_dup_check_cb+0x3a>
        if (!cdca->val || cdca->val[0] == '\0') {
    e8aa:	6863      	ldr	r3, [r4, #4]
    e8ac:	b10b      	cbz	r3, e8b2 <conf_dup_check_cb+0x2a>
    e8ae:	781b      	ldrb	r3, [r3, #0]
    e8b0:	b913      	cbnz	r3, e8b8 <conf_dup_check_cb+0x30>
            cdca->is_dup = 1;
    e8b2:	2301      	movs	r3, #1
    e8b4:	60a3      	str	r3, [r4, #8]
    e8b6:	e004      	b.n	e8c2 <conf_dup_check_cb+0x3a>
            cdca->is_dup = 0;
    e8b8:	2300      	movs	r3, #0
    e8ba:	60a3      	str	r3, [r4, #8]
    e8bc:	e001      	b.n	e8c2 <conf_dup_check_cb+0x3a>
        } else {
            cdca->is_dup = 0;
    e8be:	2300      	movs	r3, #0
    e8c0:	60a3      	str	r3, [r4, #8]
        }
    }
}
    e8c2:	bd38      	pop	{r3, r4, r5, pc}

0000e8c4 <conf_load_cb>:
{
    e8c4:	b538      	push	{r3, r4, r5, lr}
    e8c6:	4604      	mov	r4, r0
    e8c8:	460d      	mov	r5, r1
    if (!cb_arg || !strcmp((char*)cb_arg, name)) {
    e8ca:	b122      	cbz	r2, e8d6 <conf_load_cb+0x12>
    e8cc:	4610      	mov	r0, r2
    e8ce:	4621      	mov	r1, r4
    e8d0:	f7ff f92e 	bl	db30 <strcmp>
    e8d4:	b918      	cbnz	r0, e8de <conf_load_cb+0x1a>
        conf_set_value(name, val);
    e8d6:	4629      	mov	r1, r5
    e8d8:	4620      	mov	r0, r4
    e8da:	f000 f9eb 	bl	ecb4 <conf_set_value>
}
    e8de:	bd38      	pop	{r3, r4, r5, pc}

0000e8e0 <conf_src_register>:
    SLIST_FOREACH(cur, &conf_load_srcs, cs_next) {
    e8e0:	4b08      	ldr	r3, [pc, #32]	; (e904 <conf_src_register+0x24>)
    e8e2:	6819      	ldr	r1, [r3, #0]
    e8e4:	460b      	mov	r3, r1
    prev = NULL;
    e8e6:	2200      	movs	r2, #0
    SLIST_FOREACH(cur, &conf_load_srcs, cs_next) {
    e8e8:	e001      	b.n	e8ee <conf_src_register+0xe>
        prev = cur;
    e8ea:	461a      	mov	r2, r3
    SLIST_FOREACH(cur, &conf_load_srcs, cs_next) {
    e8ec:	681b      	ldr	r3, [r3, #0]
    e8ee:	2b00      	cmp	r3, #0
    e8f0:	d1fb      	bne.n	e8ea <conf_src_register+0xa>
    if (!prev) {
    e8f2:	b11a      	cbz	r2, e8fc <conf_src_register+0x1c>
        SLIST_INSERT_AFTER(prev, cs, cs_next);
    e8f4:	6813      	ldr	r3, [r2, #0]
    e8f6:	6003      	str	r3, [r0, #0]
    e8f8:	6010      	str	r0, [r2, #0]
}
    e8fa:	4770      	bx	lr
        SLIST_INSERT_HEAD(&conf_load_srcs, cs, cs_next);
    e8fc:	6001      	str	r1, [r0, #0]
    e8fe:	4b01      	ldr	r3, [pc, #4]	; (e904 <conf_src_register+0x24>)
    e900:	6018      	str	r0, [r3, #0]
    e902:	4770      	bx	lr
    e904:	20003868 	.word	0x20003868

0000e908 <conf_dst_register>:
    conf_save_dst = cs;
    e908:	4b01      	ldr	r3, [pc, #4]	; (e910 <conf_dst_register+0x8>)
    e90a:	6018      	str	r0, [r3, #0]
}
    e90c:	4770      	bx	lr
    e90e:	bf00      	nop
    e910:	20003870 	.word	0x20003870

0000e914 <conf_load>:
{
    e914:	b510      	push	{r4, lr}
    conf_lock();
    e916:	f000 f8d5 	bl	eac4 <conf_lock>
    conf_loaded = true;
    e91a:	2301      	movs	r3, #1
    e91c:	4a0e      	ldr	r2, [pc, #56]	; (e958 <conf_load+0x44>)
    e91e:	7013      	strb	r3, [r2, #0]
    conf_loading = true;
    e920:	4a0e      	ldr	r2, [pc, #56]	; (e95c <conf_load+0x48>)
    e922:	7013      	strb	r3, [r2, #0]
    SLIST_FOREACH(cs, &conf_load_srcs, cs_next) {
    e924:	4b0e      	ldr	r3, [pc, #56]	; (e960 <conf_load+0x4c>)
    e926:	681c      	ldr	r4, [r3, #0]
    e928:	e000      	b.n	e92c <conf_load+0x18>
    e92a:	6824      	ldr	r4, [r4, #0]
    e92c:	b164      	cbz	r4, e948 <conf_load+0x34>
        cs->cs_itf->csi_load(cs, conf_load_cb, NULL);
    e92e:	6863      	ldr	r3, [r4, #4]
    e930:	681b      	ldr	r3, [r3, #0]
    e932:	2200      	movs	r2, #0
    e934:	490b      	ldr	r1, [pc, #44]	; (e964 <conf_load+0x50>)
    e936:	4620      	mov	r0, r4
    e938:	4798      	blx	r3
        if (SLIST_NEXT(cs, cs_next)) {
    e93a:	6823      	ldr	r3, [r4, #0]
    e93c:	2b00      	cmp	r3, #0
    e93e:	d0f4      	beq.n	e92a <conf_load+0x16>
            conf_commit(NULL);
    e940:	2000      	movs	r0, #0
    e942:	f000 f9ef 	bl	ed24 <conf_commit>
    e946:	e7f0      	b.n	e92a <conf_load+0x16>
    conf_loading = false;
    e948:	4b04      	ldr	r3, [pc, #16]	; (e95c <conf_load+0x48>)
    e94a:	701c      	strb	r4, [r3, #0]
    conf_unlock();
    e94c:	f000 f8c4 	bl	ead8 <conf_unlock>
    return conf_commit(NULL);
    e950:	4620      	mov	r0, r4
    e952:	f000 f9e7 	bl	ed24 <conf_commit>
}
    e956:	bd10      	pop	{r4, pc}
    e958:	2000386c 	.word	0x2000386c
    e95c:	2000386d 	.word	0x2000386d
    e960:	20003868 	.word	0x20003868
    e964:	0000e8c5 	.word	0x0000e8c5

0000e968 <conf_ensure_loaded>:
{
    e968:	b508      	push	{r3, lr}
    if (conf_loaded) {
    e96a:	4b04      	ldr	r3, [pc, #16]	; (e97c <conf_ensure_loaded+0x14>)
    e96c:	781b      	ldrb	r3, [r3, #0]
    e96e:	b10b      	cbz	r3, e974 <conf_ensure_loaded+0xc>
        return 0;
    e970:	2000      	movs	r0, #0
}
    e972:	bd08      	pop	{r3, pc}
    return conf_load();
    e974:	f7ff ffce 	bl	e914 <conf_load>
    e978:	e7fb      	b.n	e972 <conf_ensure_loaded+0xa>
    e97a:	bf00      	nop
    e97c:	2000386c 	.word	0x2000386c

0000e980 <conf_save_one>:
/*
 * Append a single value to persisted config. Don't store duplicate value.
 */
int
conf_save_one(const char *name, char *value)
{
    e980:	b570      	push	{r4, r5, r6, lr}
    e982:	b084      	sub	sp, #16
    e984:	4605      	mov	r5, r0
    e986:	460e      	mov	r6, r1
    struct conf_store *cs;
    struct conf_dup_check_arg cdca;
    int rc;

    conf_lock();
    e988:	f000 f89c 	bl	eac4 <conf_lock>
    if (!conf_save_dst) {
    e98c:	4b13      	ldr	r3, [pc, #76]	; (e9dc <conf_save_one+0x5c>)
    e98e:	681b      	ldr	r3, [r3, #0]
    e990:	b1fb      	cbz	r3, e9d2 <conf_save_one+0x52>
    }

    /*
     * Check if we're writing the same value again.
     */
    cdca.name = name;
    e992:	9501      	str	r5, [sp, #4]
    cdca.val = value;
    e994:	9602      	str	r6, [sp, #8]
    cdca.is_dup = 0;
    e996:	2300      	movs	r3, #0
    e998:	9303      	str	r3, [sp, #12]
    SLIST_FOREACH(cs, &conf_load_srcs, cs_next) {
    e99a:	4b11      	ldr	r3, [pc, #68]	; (e9e0 <conf_save_one+0x60>)
    e99c:	681c      	ldr	r4, [r3, #0]
    e99e:	e006      	b.n	e9ae <conf_save_one+0x2e>
        cs->cs_itf->csi_load(cs, conf_dup_check_cb, &cdca);
    e9a0:	6863      	ldr	r3, [r4, #4]
    e9a2:	681b      	ldr	r3, [r3, #0]
    e9a4:	aa01      	add	r2, sp, #4
    e9a6:	490f      	ldr	r1, [pc, #60]	; (e9e4 <conf_save_one+0x64>)
    e9a8:	4620      	mov	r0, r4
    e9aa:	4798      	blx	r3
    SLIST_FOREACH(cs, &conf_load_srcs, cs_next) {
    e9ac:	6824      	ldr	r4, [r4, #0]
    e9ae:	2c00      	cmp	r4, #0
    e9b0:	d1f6      	bne.n	e9a0 <conf_save_one+0x20>
    }
    if (cdca.is_dup == 1) {
    e9b2:	9b03      	ldr	r3, [sp, #12]
    e9b4:	2b01      	cmp	r3, #1
    e9b6:	d00e      	beq.n	e9d6 <conf_save_one+0x56>
        rc = 0;
        goto out;
    }
    cs = conf_save_dst;
    e9b8:	4b08      	ldr	r3, [pc, #32]	; (e9dc <conf_save_one+0x5c>)
    e9ba:	6818      	ldr	r0, [r3, #0]
    rc = cs->cs_itf->csi_save(cs, name, value);
    e9bc:	6843      	ldr	r3, [r0, #4]
    e9be:	689b      	ldr	r3, [r3, #8]
    e9c0:	4632      	mov	r2, r6
    e9c2:	4629      	mov	r1, r5
    e9c4:	4798      	blx	r3
    e9c6:	4604      	mov	r4, r0
out:
    conf_unlock();
    e9c8:	f000 f886 	bl	ead8 <conf_unlock>
    return rc;
}
    e9cc:	4620      	mov	r0, r4
    e9ce:	b004      	add	sp, #16
    e9d0:	bd70      	pop	{r4, r5, r6, pc}
        rc = OS_ENOENT;
    e9d2:	240a      	movs	r4, #10
    e9d4:	e7f8      	b.n	e9c8 <conf_save_one+0x48>
        rc = 0;
    e9d6:	2400      	movs	r4, #0
    e9d8:	e7f6      	b.n	e9c8 <conf_save_one+0x48>
    e9da:	bf00      	nop
    e9dc:	20003870 	.word	0x20003870
    e9e0:	20003868 	.word	0x20003868
    e9e4:	0000e889 	.word	0x0000e889

0000e9e8 <conf_store_one>:

static void
conf_store_one(char *name, char *value)
{
    e9e8:	b508      	push	{r3, lr}
    conf_save_one(name, value);
    e9ea:	f7ff ffc9 	bl	e980 <conf_save_one>
}
    e9ee:	bd08      	pop	{r3, pc}

0000e9f0 <conf_save>:
 * Walk through all registered subsystems, and ask them to export their
 * config variables. Persist these settings.
 */
int
conf_save(void)
{
    e9f0:	b570      	push	{r4, r5, r6, lr}
    struct conf_store *cs;
    struct conf_handler *ch;
    int rc;
    int rc2;

    conf_lock();
    e9f2:	f000 f867 	bl	eac4 <conf_lock>
    cs = conf_save_dst;
    e9f6:	4b11      	ldr	r3, [pc, #68]	; (ea3c <conf_save+0x4c>)
    e9f8:	681e      	ldr	r6, [r3, #0]
    if (!cs) {
    e9fa:	b1ee      	cbz	r6, ea38 <conf_save+0x48>
        rc = OS_ENOENT;
        goto out;
    }

    if (cs->cs_itf->csi_save_start) {
    e9fc:	6873      	ldr	r3, [r6, #4]
    e9fe:	685b      	ldr	r3, [r3, #4]
    ea00:	b10b      	cbz	r3, ea06 <conf_save+0x16>
        cs->cs_itf->csi_save_start(cs);
    ea02:	4630      	mov	r0, r6
    ea04:	4798      	blx	r3
    }
    rc = 0;
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
    ea06:	4b0e      	ldr	r3, [pc, #56]	; (ea40 <conf_save+0x50>)
    ea08:	681c      	ldr	r4, [r3, #0]
    rc = 0;
    ea0a:	2500      	movs	r5, #0
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
    ea0c:	e000      	b.n	ea10 <conf_save+0x20>
    ea0e:	6824      	ldr	r4, [r4, #0]
    ea10:	b14c      	cbz	r4, ea26 <conf_save+0x36>
        if (ch->ch_export) {
    ea12:	6963      	ldr	r3, [r4, #20]
    ea14:	2b00      	cmp	r3, #0
    ea16:	d0fa      	beq.n	ea0e <conf_save+0x1e>
            rc2 = ch->ch_export(conf_store_one, CONF_EXPORT_PERSIST);
    ea18:	2100      	movs	r1, #0
    ea1a:	480a      	ldr	r0, [pc, #40]	; (ea44 <conf_save+0x54>)
    ea1c:	4798      	blx	r3
            if (!rc) {
    ea1e:	2d00      	cmp	r5, #0
    ea20:	d1f5      	bne.n	ea0e <conf_save+0x1e>
                rc = rc2;
    ea22:	4605      	mov	r5, r0
    ea24:	e7f3      	b.n	ea0e <conf_save+0x1e>
            }
        }
    }
    if (cs->cs_itf->csi_save_end) {
    ea26:	6873      	ldr	r3, [r6, #4]
    ea28:	68db      	ldr	r3, [r3, #12]
    ea2a:	b10b      	cbz	r3, ea30 <conf_save+0x40>
        cs->cs_itf->csi_save_end(cs);
    ea2c:	4630      	mov	r0, r6
    ea2e:	4798      	blx	r3
    }
out:
    conf_unlock();
    ea30:	f000 f852 	bl	ead8 <conf_unlock>
    return rc;
}
    ea34:	4628      	mov	r0, r5
    ea36:	bd70      	pop	{r4, r5, r6, pc}
        rc = OS_ENOENT;
    ea38:	250a      	movs	r5, #10
    ea3a:	e7f9      	b.n	ea30 <conf_save+0x40>
    ea3c:	20003870 	.word	0x20003870
    ea40:	20003874 	.word	0x20003874
    ea44:	0000e9e9 	.word	0x0000e9e9

0000ea48 <conf_store_init>:

void
conf_store_init(void)
{
    conf_loaded = false;
    ea48:	2300      	movs	r3, #0
    ea4a:	4a02      	ldr	r2, [pc, #8]	; (ea54 <conf_store_init+0xc>)
    ea4c:	7013      	strb	r3, [r2, #0]
    SLIST_INIT(&conf_load_srcs);
    ea4e:	4a02      	ldr	r2, [pc, #8]	; (ea58 <conf_store_init+0x10>)
    ea50:	6013      	str	r3, [r2, #0]
}
    ea52:	4770      	bx	lr
    ea54:	2000386c 	.word	0x2000386c
    ea58:	20003868 	.word	0x20003868

0000ea5c <conf_ev_fn_load>:
}

#if MYNEWT_VAL(OS_SCHEDULING)
static void
conf_ev_fn_load(struct os_event *ev)
{
    ea5c:	b508      	push	{r3, lr}
    conf_ensure_loaded();
    ea5e:	f7ff ff83 	bl	e968 <conf_ensure_loaded>
}
    ea62:	bd08      	pop	{r3, pc}

0000ea64 <conf_init>:
{
    ea64:	b510      	push	{r4, lr}
    ea66:	b082      	sub	sp, #8
    os_mutex_init(&conf_mtx);
    ea68:	4812      	ldr	r0, [pc, #72]	; (eab4 <conf_init+0x50>)
    ea6a:	f7fb ff87 	bl	a97c <os_mutex_init>
    SLIST_INIT(&conf_handlers);
    ea6e:	4b12      	ldr	r3, [pc, #72]	; (eab8 <conf_init+0x54>)
    ea70:	2200      	movs	r2, #0
    ea72:	601a      	str	r2, [r3, #0]
    conf_store_init();
    ea74:	f7ff ffe8 	bl	ea48 <conf_store_init>
    rc = conf_cli_register();
    ea78:	f000 fa0c 	bl	ee94 <conf_cli_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
    ea7c:	b138      	cbz	r0, ea8e <conf_init+0x2a>
    ea7e:	2000      	movs	r0, #0
    ea80:	9000      	str	r0, [sp, #0]
    ea82:	4b0e      	ldr	r3, [pc, #56]	; (eabc <conf_init+0x58>)
    ea84:	681c      	ldr	r4, [r3, #0]
    ea86:	4603      	mov	r3, r0
    ea88:	4602      	mov	r2, r0
    ea8a:	4601      	mov	r1, r0
    ea8c:	47a0      	blx	r4
    rc = conf_nmgr_register();
    ea8e:	f000 faa5 	bl	efdc <conf_nmgr_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
    ea92:	b138      	cbz	r0, eaa4 <conf_init+0x40>
    ea94:	2000      	movs	r0, #0
    ea96:	9000      	str	r0, [sp, #0]
    ea98:	4b08      	ldr	r3, [pc, #32]	; (eabc <conf_init+0x58>)
    ea9a:	681c      	ldr	r4, [r3, #0]
    ea9c:	4603      	mov	r3, r0
    ea9e:	4602      	mov	r2, r0
    eaa0:	4601      	mov	r1, r0
    eaa2:	47a0      	blx	r4
    os_eventq_put(os_eventq_dflt_get(), &conf_ev_load);
    eaa4:	f7fa fe40 	bl	9728 <os_eventq_dflt_get>
    eaa8:	4905      	ldr	r1, [pc, #20]	; (eac0 <conf_init+0x5c>)
    eaaa:	f7fa fd8f 	bl	95cc <os_eventq_put>
}
    eaae:	b002      	add	sp, #8
    eab0:	bd10      	pop	{r4, pc}
    eab2:	bf00      	nop
    eab4:	20003878 	.word	0x20003878
    eab8:	20003874 	.word	0x20003874
    eabc:	2000064c 	.word	0x2000064c
    eac0:	200005e0 	.word	0x200005e0

0000eac4 <conf_lock>:
{
    eac4:	b508      	push	{r3, lr}
    os_mutex_pend(&conf_mtx, 0xFFFFFFFF);
    eac6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    eaca:	4802      	ldr	r0, [pc, #8]	; (ead4 <conf_lock+0x10>)
    eacc:	f7fb ffbc 	bl	aa48 <os_mutex_pend>
}
    ead0:	bd08      	pop	{r3, pc}
    ead2:	bf00      	nop
    ead4:	20003878 	.word	0x20003878

0000ead8 <conf_unlock>:
{
    ead8:	b508      	push	{r3, lr}
    os_mutex_release(&conf_mtx);
    eada:	4802      	ldr	r0, [pc, #8]	; (eae4 <conf_unlock+0xc>)
    eadc:	f7fb ff58 	bl	a990 <os_mutex_release>
}
    eae0:	bd08      	pop	{r3, pc}
    eae2:	bf00      	nop
    eae4:	20003878 	.word	0x20003878

0000eae8 <conf_register>:
{
    eae8:	b510      	push	{r4, lr}
    eaea:	4604      	mov	r4, r0
    conf_lock();
    eaec:	f7ff ffea 	bl	eac4 <conf_lock>
    SLIST_INSERT_HEAD(&conf_handlers, handler, ch_list);
    eaf0:	4b03      	ldr	r3, [pc, #12]	; (eb00 <conf_register+0x18>)
    eaf2:	681a      	ldr	r2, [r3, #0]
    eaf4:	6022      	str	r2, [r4, #0]
    eaf6:	601c      	str	r4, [r3, #0]
    conf_unlock();
    eaf8:	f7ff ffee 	bl	ead8 <conf_unlock>
}
    eafc:	2000      	movs	r0, #0
    eafe:	bd10      	pop	{r4, pc}
    eb00:	20003874 	.word	0x20003874

0000eb04 <conf_handler_lookup>:
/*
 * Find conf_handler based on name.
 */
struct conf_handler *
conf_handler_lookup(char *name)
{
    eb04:	b538      	push	{r3, r4, r5, lr}
    eb06:	4605      	mov	r5, r0
    struct conf_handler *ch;

    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
    eb08:	4b06      	ldr	r3, [pc, #24]	; (eb24 <conf_handler_lookup+0x20>)
    eb0a:	681c      	ldr	r4, [r3, #0]
    eb0c:	e000      	b.n	eb10 <conf_handler_lookup+0xc>
    eb0e:	6824      	ldr	r4, [r4, #0]
    eb10:	b12c      	cbz	r4, eb1e <conf_handler_lookup+0x1a>
        if (!strcmp(name, ch->ch_name)) {
    eb12:	6861      	ldr	r1, [r4, #4]
    eb14:	4628      	mov	r0, r5
    eb16:	f7ff f80b 	bl	db30 <strcmp>
    eb1a:	2800      	cmp	r0, #0
    eb1c:	d1f7      	bne.n	eb0e <conf_handler_lookup+0xa>
            return ch;
        }
    }
    return NULL;
}
    eb1e:	4620      	mov	r0, r4
    eb20:	bd38      	pop	{r3, r4, r5, pc}
    eb22:	bf00      	nop
    eb24:	20003874 	.word	0x20003874

0000eb28 <conf_parse_name>:
/*
 * Separate string into argv array.
 */
int
conf_parse_name(char *name, int *name_argc, char *name_argv[])
{
    eb28:	b570      	push	{r4, r5, r6, lr}
    eb2a:	b082      	sub	sp, #8
    eb2c:	460e      	mov	r6, r1
    eb2e:	4615      	mov	r5, r2
    char *tok;
    char *tok_ptr;
    char *sep = CONF_NAME_SEPARATOR;
    int i;

    tok = strtok_r(name, sep, &tok_ptr);
    eb30:	aa01      	add	r2, sp, #4
    eb32:	4909      	ldr	r1, [pc, #36]	; (eb58 <conf_parse_name+0x30>)
    eb34:	f00d fcfb 	bl	1c52e <strtok_r>

    i = 0;
    eb38:	2300      	movs	r3, #0
    while (tok) {
    eb3a:	e008      	b.n	eb4e <conf_parse_name+0x26>
        name_argv[i++] = tok;
    eb3c:	1c5c      	adds	r4, r3, #1
    eb3e:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
        tok = strtok_r(NULL, sep, &tok_ptr);
    eb42:	aa01      	add	r2, sp, #4
    eb44:	4904      	ldr	r1, [pc, #16]	; (eb58 <conf_parse_name+0x30>)
    eb46:	2000      	movs	r0, #0
    eb48:	f00d fcf1 	bl	1c52e <strtok_r>
        name_argv[i++] = tok;
    eb4c:	4623      	mov	r3, r4
    while (tok) {
    eb4e:	2800      	cmp	r0, #0
    eb50:	d1f4      	bne.n	eb3c <conf_parse_name+0x14>
    }
    *name_argc = i;
    eb52:	6033      	str	r3, [r6, #0]

    return 0;
}
    eb54:	b002      	add	sp, #8
    eb56:	bd70      	pop	{r4, r5, r6, pc}
    eb58:	00023394 	.word	0x00023394

0000eb5c <conf_parse_and_lookup>:

struct conf_handler *
conf_parse_and_lookup(char *name, int *name_argc, char *name_argv[])
{
    eb5c:	b510      	push	{r4, lr}
    eb5e:	4614      	mov	r4, r2
    int rc;

    rc = conf_parse_name(name, name_argc, name_argv);
    eb60:	f7ff ffe2 	bl	eb28 <conf_parse_name>
    if (rc) {
    eb64:	b918      	cbnz	r0, eb6e <conf_parse_and_lookup+0x12>
        return NULL;
    }
    return conf_handler_lookup(name_argv[0]);
    eb66:	6820      	ldr	r0, [r4, #0]
    eb68:	f7ff ffcc 	bl	eb04 <conf_handler_lookup>
}
    eb6c:	bd10      	pop	{r4, pc}
        return NULL;
    eb6e:	2000      	movs	r0, #0
    eb70:	e7fc      	b.n	eb6c <conf_parse_and_lookup+0x10>

0000eb72 <conf_value_from_str>:
{
    int32_t val;
    int64_t val64;
    char *eptr;

    if (!val_str) {
    eb72:	2800      	cmp	r0, #0
    eb74:	d051      	beq.n	ec1a <conf_value_from_str+0xa8>
{
    eb76:	b5f0      	push	{r4, r5, r6, r7, lr}
    eb78:	b083      	sub	sp, #12
    eb7a:	460c      	mov	r4, r1
    eb7c:	4616      	mov	r6, r2
    eb7e:	461d      	mov	r5, r3
    eb80:	4607      	mov	r7, r0
        goto err;
    }
    switch (type) {
    eb82:	1e8b      	subs	r3, r1, #2
    eb84:	2b08      	cmp	r3, #8
    eb86:	d84a      	bhi.n	ec1e <conf_value_from_str+0xac>
    eb88:	e8df f003 	tbb	[pc, r3]
    eb8c:	32050505 	.word	0x32050505
    eb90:	4949493d 	.word	0x4949493d
    eb94:	05          	.byte	0x05
    eb95:	00          	.byte	0x00
    case CONF_INT8:
    case CONF_INT16:
    case CONF_INT32:
    case CONF_BOOL:
        val = strtol(val_str, &eptr, 0);
    eb96:	2200      	movs	r2, #0
    eb98:	a901      	add	r1, sp, #4
    eb9a:	f00d fcd8 	bl	1c54e <strtol>
        if (*eptr != '\0') {
    eb9e:	9b01      	ldr	r3, [sp, #4]
    eba0:	781b      	ldrb	r3, [r3, #0]
    eba2:	2b00      	cmp	r3, #0
    eba4:	d13e      	bne.n	ec24 <conf_value_from_str+0xb2>
            goto err;
        }
        if (type == CONF_BOOL) {
    eba6:	2c0a      	cmp	r4, #10
    eba8:	d007      	beq.n	ebba <conf_value_from_str+0x48>
            if (val < 0 || val > 1) {
                goto err;
            }
            *(bool *)vp = val;
        } else if (type == CONF_INT8) {
    ebaa:	2c02      	cmp	r4, #2
    ebac:	d00d      	beq.n	ebca <conf_value_from_str+0x58>
            if (val < INT8_MIN || val > UINT8_MAX) {
                goto err;
            }
            *(int8_t *)vp = val;
        } else if (type == CONF_INT16) {
    ebae:	2c03      	cmp	r4, #3
    ebb0:	d013      	beq.n	ebda <conf_value_from_str+0x68>
            if (val < INT16_MIN || val > UINT16_MAX) {
                goto err;
            }
            *(int16_t *)vp = val;
        } else if (type == CONF_INT32) {
    ebb2:	2c04      	cmp	r4, #4
    ebb4:	d019      	beq.n	ebea <conf_value_from_str+0x78>
        strcpy(vp, val_str);
        break;
    default:
        goto err;
    }
    return 0;
    ebb6:	2000      	movs	r0, #0
    ebb8:	e032      	b.n	ec20 <conf_value_from_str+0xae>
            if (val < 0 || val > 1) {
    ebba:	2801      	cmp	r0, #1
    ebbc:	d834      	bhi.n	ec28 <conf_value_from_str+0xb6>
            *(bool *)vp = val;
    ebbe:	3800      	subs	r0, #0
    ebc0:	bf18      	it	ne
    ebc2:	2001      	movne	r0, #1
    ebc4:	7030      	strb	r0, [r6, #0]
    return 0;
    ebc6:	2000      	movs	r0, #0
    ebc8:	e02a      	b.n	ec20 <conf_value_from_str+0xae>
            if (val < INT8_MIN || val > UINT8_MAX) {
    ebca:	f100 0380 	add.w	r3, r0, #128	; 0x80
    ebce:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
    ebd2:	d22b      	bcs.n	ec2c <conf_value_from_str+0xba>
            *(int8_t *)vp = val;
    ebd4:	7030      	strb	r0, [r6, #0]
    return 0;
    ebd6:	2000      	movs	r0, #0
    ebd8:	e022      	b.n	ec20 <conf_value_from_str+0xae>
            if (val < INT16_MIN || val > UINT16_MAX) {
    ebda:	f500 4300 	add.w	r3, r0, #32768	; 0x8000
    ebde:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
    ebe2:	d225      	bcs.n	ec30 <conf_value_from_str+0xbe>
            *(int16_t *)vp = val;
    ebe4:	8030      	strh	r0, [r6, #0]
    return 0;
    ebe6:	2000      	movs	r0, #0
    ebe8:	e01a      	b.n	ec20 <conf_value_from_str+0xae>
            *(int32_t *)vp = val;
    ebea:	6030      	str	r0, [r6, #0]
    return 0;
    ebec:	2000      	movs	r0, #0
    ebee:	e017      	b.n	ec20 <conf_value_from_str+0xae>
        val64 = strtoll(val_str, &eptr, 0);
    ebf0:	2200      	movs	r2, #0
    ebf2:	a901      	add	r1, sp, #4
    ebf4:	f00d fcb1 	bl	1c55a <strtoll>
        if (*eptr != '\0') {
    ebf8:	9b01      	ldr	r3, [sp, #4]
    ebfa:	781b      	ldrb	r3, [r3, #0]
    ebfc:	b9d3      	cbnz	r3, ec34 <conf_value_from_str+0xc2>
        *(int64_t *)vp = val64;
    ebfe:	6030      	str	r0, [r6, #0]
    ec00:	6071      	str	r1, [r6, #4]
    return 0;
    ec02:	2000      	movs	r0, #0
        break;
    ec04:	e00c      	b.n	ec20 <conf_value_from_str+0xae>
        val = strlen(val_str);
    ec06:	f7fe ff9f 	bl	db48 <strlen>
        if (val + 1 > maxlen) {
    ec0a:	42a8      	cmp	r0, r5
    ec0c:	da14      	bge.n	ec38 <conf_value_from_str+0xc6>
        strcpy(vp, val_str);
    ec0e:	4639      	mov	r1, r7
    ec10:	4630      	mov	r0, r6
    ec12:	f00d fc63 	bl	1c4dc <strcpy>
    return 0;
    ec16:	2000      	movs	r0, #0
        break;
    ec18:	e002      	b.n	ec20 <conf_value_from_str+0xae>
err:
    return OS_INVALID_PARM;
    ec1a:	2003      	movs	r0, #3
}
    ec1c:	4770      	bx	lr
    switch (type) {
    ec1e:	2003      	movs	r0, #3
}
    ec20:	b003      	add	sp, #12
    ec22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return OS_INVALID_PARM;
    ec24:	2003      	movs	r0, #3
    ec26:	e7fb      	b.n	ec20 <conf_value_from_str+0xae>
    ec28:	2003      	movs	r0, #3
    ec2a:	e7f9      	b.n	ec20 <conf_value_from_str+0xae>
    ec2c:	2003      	movs	r0, #3
    ec2e:	e7f7      	b.n	ec20 <conf_value_from_str+0xae>
    ec30:	2003      	movs	r0, #3
    ec32:	e7f5      	b.n	ec20 <conf_value_from_str+0xae>
    ec34:	2003      	movs	r0, #3
    ec36:	e7f3      	b.n	ec20 <conf_value_from_str+0xae>
    ec38:	2003      	movs	r0, #3
    ec3a:	e7f1      	b.n	ec20 <conf_value_from_str+0xae>

0000ec3c <conf_str_from_value>:
    return 0;
}

char *
conf_str_from_value(enum conf_type type, void *vp, char *buf, int buf_len)
{
    ec3c:	468c      	mov	ip, r1
    int32_t val;

    if (type == CONF_STRING) {
    ec3e:	2806      	cmp	r0, #6
    ec40:	d02f      	beq.n	eca2 <conf_str_from_value+0x66>
{
    ec42:	b510      	push	{r4, lr}
    ec44:	b082      	sub	sp, #8
    ec46:	4614      	mov	r4, r2
    ec48:	4619      	mov	r1, r3
        return vp;
    }
    switch (type) {
    ec4a:	2805      	cmp	r0, #5
    ec4c:	d01f      	beq.n	ec8e <conf_str_from_value+0x52>
    ec4e:	d903      	bls.n	ec58 <conf_str_from_value+0x1c>
    ec50:	280a      	cmp	r0, #10
    ec52:	d005      	beq.n	ec60 <conf_str_from_value+0x24>
    ec54:	2000      	movs	r0, #0
    ec56:	e027      	b.n	eca8 <conf_str_from_value+0x6c>
    ec58:	1e83      	subs	r3, r0, #2
    ec5a:	b2db      	uxtb	r3, r3
    ec5c:	2b02      	cmp	r3, #2
    ec5e:	d822      	bhi.n	eca6 <conf_str_from_value+0x6a>
    case CONF_INT8:
    case CONF_INT16:
    case CONF_INT32:
    case CONF_BOOL:
        if (type == CONF_BOOL) {
    ec60:	280a      	cmp	r0, #10
    ec62:	d006      	beq.n	ec72 <conf_str_from_value+0x36>
            val = *(bool *)vp;
        } else if (type == CONF_INT8) {
    ec64:	2802      	cmp	r0, #2
    ec66:	d00c      	beq.n	ec82 <conf_str_from_value+0x46>
            val = *(int8_t *)vp;
        } else if (type == CONF_INT16) {
    ec68:	2803      	cmp	r0, #3
    ec6a:	d00d      	beq.n	ec88 <conf_str_from_value+0x4c>
            val = *(int16_t *)vp;
        } else {
            val = *(int32_t *)vp;
    ec6c:	f8dc 3000 	ldr.w	r3, [ip]
    ec70:	e001      	b.n	ec76 <conf_str_from_value+0x3a>
            val = *(bool *)vp;
    ec72:	f89c 3000 	ldrb.w	r3, [ip]
        }
        snprintf(buf, buf_len, "%ld", (long)val);
    ec76:	4a0d      	ldr	r2, [pc, #52]	; (ecac <conf_str_from_value+0x70>)
    ec78:	4620      	mov	r0, r4
    ec7a:	f7ff fb70 	bl	e35e <snprintf>
        return buf;
    ec7e:	4620      	mov	r0, r4
    ec80:	e012      	b.n	eca8 <conf_str_from_value+0x6c>
            val = *(int8_t *)vp;
    ec82:	f99c 3000 	ldrsb.w	r3, [ip]
    ec86:	e7f6      	b.n	ec76 <conf_str_from_value+0x3a>
            val = *(int16_t *)vp;
    ec88:	f9bc 3000 	ldrsh.w	r3, [ip]
    ec8c:	e7f3      	b.n	ec76 <conf_str_from_value+0x3a>
    case CONF_INT64:
        snprintf(buf, buf_len, "%lld", *(long long *)vp);
    ec8e:	e9dc 2300 	ldrd	r2, r3, [ip]
    ec92:	e9cd 2300 	strd	r2, r3, [sp]
    ec96:	4a06      	ldr	r2, [pc, #24]	; (ecb0 <conf_str_from_value+0x74>)
    ec98:	4620      	mov	r0, r4
    ec9a:	f7ff fb60 	bl	e35e <snprintf>
        return buf;
    ec9e:	4620      	mov	r0, r4
    eca0:	e002      	b.n	eca8 <conf_str_from_value+0x6c>
        return vp;
    eca2:	4608      	mov	r0, r1
    default:
        return NULL;
    }
}
    eca4:	4770      	bx	lr
    switch (type) {
    eca6:	2000      	movs	r0, #0
}
    eca8:	b002      	add	sp, #8
    ecaa:	bd10      	pop	{r4, pc}
    ecac:	00023398 	.word	0x00023398
    ecb0:	0002339c 	.word	0x0002339c

0000ecb4 <conf_set_value>:
    return buf;
}

int
conf_set_value(char *name, char *val_str)
{
    ecb4:	b530      	push	{r4, r5, lr}
    ecb6:	b08b      	sub	sp, #44	; 0x2c
    ecb8:	4604      	mov	r4, r0
    ecba:	460d      	mov	r5, r1
    int name_argc;
    char *name_argv[CONF_MAX_DIR_DEPTH];
    struct conf_handler *ch;
    int rc;

    conf_lock();
    ecbc:	f7ff ff02 	bl	eac4 <conf_lock>
    ch = conf_parse_and_lookup(name, &name_argc, name_argv);
    ecc0:	aa01      	add	r2, sp, #4
    ecc2:	a909      	add	r1, sp, #36	; 0x24
    ecc4:	4620      	mov	r0, r4
    ecc6:	f7ff ff49 	bl	eb5c <conf_parse_and_lookup>
    if (!ch) {
    ecca:	b158      	cbz	r0, ece4 <conf_set_value+0x30>
        rc = OS_INVALID_PARM;
        goto out;
    }
    rc = ch->ch_set(name_argc - 1, &name_argv[1], val_str);
    eccc:	68c3      	ldr	r3, [r0, #12]
    ecce:	462a      	mov	r2, r5
    ecd0:	a902      	add	r1, sp, #8
    ecd2:	9809      	ldr	r0, [sp, #36]	; 0x24
    ecd4:	3801      	subs	r0, #1
    ecd6:	4798      	blx	r3
    ecd8:	4604      	mov	r4, r0
out:
    conf_unlock();
    ecda:	f7ff fefd 	bl	ead8 <conf_unlock>
    return rc;
}
    ecde:	4620      	mov	r0, r4
    ece0:	b00b      	add	sp, #44	; 0x2c
    ece2:	bd30      	pop	{r4, r5, pc}
        rc = OS_INVALID_PARM;
    ece4:	2403      	movs	r4, #3
    ece6:	e7f8      	b.n	ecda <conf_set_value+0x26>

0000ece8 <conf_get_value>:
 * Return value will be pointer to beginning of that buffer,
 * except for string it will pointer to beginning of string.
 */
char *
conf_get_value(char *name, char *buf, int buf_len)
{
    ece8:	b570      	push	{r4, r5, r6, lr}
    ecea:	b08a      	sub	sp, #40	; 0x28
    ecec:	4604      	mov	r4, r0
    ecee:	460d      	mov	r5, r1
    ecf0:	4616      	mov	r6, r2
    int name_argc;
    char *name_argv[CONF_MAX_DIR_DEPTH];
    struct conf_handler *ch;
    char *rval = NULL;

    conf_lock();
    ecf2:	f7ff fee7 	bl	eac4 <conf_lock>
    ch = conf_parse_and_lookup(name, &name_argc, name_argv);
    ecf6:	aa01      	add	r2, sp, #4
    ecf8:	a909      	add	r1, sp, #36	; 0x24
    ecfa:	4620      	mov	r0, r4
    ecfc:	f7ff ff2e 	bl	eb5c <conf_parse_and_lookup>
    if (!ch) {
    ed00:	4604      	mov	r4, r0
    ed02:	b140      	cbz	r0, ed16 <conf_get_value+0x2e>
        goto out;
    }

    if (!ch->ch_get) {
    ed04:	6884      	ldr	r4, [r0, #8]
    ed06:	b15c      	cbz	r4, ed20 <conf_get_value+0x38>
        goto out;
    }
    rval = ch->ch_get(name_argc - 1, &name_argv[1], buf, buf_len);
    ed08:	4633      	mov	r3, r6
    ed0a:	462a      	mov	r2, r5
    ed0c:	a902      	add	r1, sp, #8
    ed0e:	9809      	ldr	r0, [sp, #36]	; 0x24
    ed10:	3801      	subs	r0, #1
    ed12:	47a0      	blx	r4
    ed14:	4604      	mov	r4, r0
out:
    conf_unlock();
    ed16:	f7ff fedf 	bl	ead8 <conf_unlock>
    return rval;
}
    ed1a:	4620      	mov	r0, r4
    ed1c:	b00a      	add	sp, #40	; 0x28
    ed1e:	bd70      	pop	{r4, r5, r6, pc}
    char *rval = NULL;
    ed20:	2400      	movs	r4, #0
    ed22:	e7f8      	b.n	ed16 <conf_get_value+0x2e>

0000ed24 <conf_commit>:

int
conf_commit(char *name)
{
    ed24:	b530      	push	{r4, r5, lr}
    ed26:	b08b      	sub	sp, #44	; 0x2c
    ed28:	4604      	mov	r4, r0
    char *name_argv[CONF_MAX_DIR_DEPTH];
    struct conf_handler *ch;
    int rc;
    int rc2;

    conf_lock();
    ed2a:	f7ff fecb 	bl	eac4 <conf_lock>
    if (name) {
    ed2e:	b174      	cbz	r4, ed4e <conf_commit+0x2a>
        ch = conf_parse_and_lookup(name, &name_argc, name_argv);
    ed30:	aa01      	add	r2, sp, #4
    ed32:	a909      	add	r1, sp, #36	; 0x24
    ed34:	4620      	mov	r0, r4
    ed36:	f7ff ff11 	bl	eb5c <conf_parse_and_lookup>
        if (!ch) {
    ed3a:	b1b8      	cbz	r0, ed6c <conf_commit+0x48>
            rc = OS_INVALID_PARM;
            goto out;
        }
        if (ch->ch_commit) {
    ed3c:	6903      	ldr	r3, [r0, #16]
    ed3e:	b1bb      	cbz	r3, ed70 <conf_commit+0x4c>
            rc = ch->ch_commit();
    ed40:	4798      	blx	r3
    ed42:	4605      	mov	r5, r0
                }
            }
        }
    }
out:
    conf_unlock();
    ed44:	f7ff fec8 	bl	ead8 <conf_unlock>
    return rc;
}
    ed48:	4628      	mov	r0, r5
    ed4a:	b00b      	add	sp, #44	; 0x2c
    ed4c:	bd30      	pop	{r4, r5, pc}
        SLIST_FOREACH(ch, &conf_handlers, ch_list) {
    ed4e:	4b09      	ldr	r3, [pc, #36]	; (ed74 <conf_commit+0x50>)
    ed50:	681c      	ldr	r4, [r3, #0]
        rc = 0;
    ed52:	2500      	movs	r5, #0
        SLIST_FOREACH(ch, &conf_handlers, ch_list) {
    ed54:	e000      	b.n	ed58 <conf_commit+0x34>
    ed56:	6824      	ldr	r4, [r4, #0]
    ed58:	2c00      	cmp	r4, #0
    ed5a:	d0f3      	beq.n	ed44 <conf_commit+0x20>
            if (ch->ch_commit) {
    ed5c:	6923      	ldr	r3, [r4, #16]
    ed5e:	2b00      	cmp	r3, #0
    ed60:	d0f9      	beq.n	ed56 <conf_commit+0x32>
                rc2 = ch->ch_commit();
    ed62:	4798      	blx	r3
                if (!rc) {
    ed64:	2d00      	cmp	r5, #0
    ed66:	d1f6      	bne.n	ed56 <conf_commit+0x32>
                    rc = rc2;
    ed68:	4605      	mov	r5, r0
    ed6a:	e7f4      	b.n	ed56 <conf_commit+0x32>
            rc = OS_INVALID_PARM;
    ed6c:	2503      	movs	r5, #3
    ed6e:	e7e9      	b.n	ed44 <conf_commit+0x20>
            rc = 0;
    ed70:	2500      	movs	r5, #0
    ed72:	e7e7      	b.n	ed44 <conf_commit+0x20>
    ed74:	20003874 	.word	0x20003874

0000ed78 <conf_running_one>:
};

#if (MYNEWT_VAL(CONFIG_CLI_RW) & 1) == 1
static void
conf_running_one(char *name, char *val)
{
    ed78:	b508      	push	{r3, lr}
    console_printf("%s = %s\n", name, val ? val : "<del>");
    ed7a:	460a      	mov	r2, r1
    ed7c:	b121      	cbz	r1, ed88 <conf_running_one+0x10>
    ed7e:	4601      	mov	r1, r0
    ed80:	4802      	ldr	r0, [pc, #8]	; (ed8c <conf_running_one+0x14>)
    ed82:	f000 fe73 	bl	fa6c <console_printf>
}
    ed86:	bd08      	pop	{r3, pc}
    console_printf("%s = %s\n", name, val ? val : "<del>");
    ed88:	4a01      	ldr	r2, [pc, #4]	; (ed90 <conf_running_one+0x18>)
    ed8a:	e7f8      	b.n	ed7e <conf_running_one+0x6>
    ed8c:	000233ac 	.word	0x000233ac
    ed90:	000233a4 	.word	0x000233a4

0000ed94 <conf_dump_running>:

static void
conf_dump_running(void)
{
    ed94:	b510      	push	{r4, lr}
    struct conf_handler *ch;

    conf_lock();
    ed96:	f7ff fe95 	bl	eac4 <conf_lock>
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
    ed9a:	4b07      	ldr	r3, [pc, #28]	; (edb8 <conf_dump_running+0x24>)
    ed9c:	681c      	ldr	r4, [r3, #0]
    ed9e:	e003      	b.n	eda8 <conf_dump_running+0x14>
        if (ch->ch_export) {
            ch->ch_export(conf_running_one, CONF_EXPORT_SHOW);
    eda0:	2101      	movs	r1, #1
    eda2:	4806      	ldr	r0, [pc, #24]	; (edbc <conf_dump_running+0x28>)
    eda4:	4798      	blx	r3
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
    eda6:	6824      	ldr	r4, [r4, #0]
    eda8:	b11c      	cbz	r4, edb2 <conf_dump_running+0x1e>
        if (ch->ch_export) {
    edaa:	6963      	ldr	r3, [r4, #20]
    edac:	2b00      	cmp	r3, #0
    edae:	d1f7      	bne.n	eda0 <conf_dump_running+0xc>
    edb0:	e7f9      	b.n	eda6 <conf_dump_running+0x12>
        }
    }
    conf_unlock();
    edb2:	f7ff fe91 	bl	ead8 <conf_unlock>
}
    edb6:	bd10      	pop	{r4, pc}
    edb8:	20003874 	.word	0x20003874
    edbc:	0000ed79 	.word	0x0000ed79

0000edc0 <shell_conf_command>:
}
#endif

static int
shell_conf_command(int argc, char **argv)
{
    edc0:	b530      	push	{r4, r5, lr}
    edc2:	b0c3      	sub	sp, #268	; 0x10c
    char *val = NULL;
    char tmp_buf[CONF_MAX_VAL_LEN + 1];
    int rc;

    (void)rc;
    switch (argc) {
    edc4:	2802      	cmp	r0, #2
    edc6:	d007      	beq.n	edd8 <shell_conf_command+0x18>
    edc8:	2803      	cmp	r0, #3
    edca:	d022      	beq.n	ee12 <shell_conf_command+0x52>
        }
    }
    return 0;
err:
#endif
    console_printf("Invalid args\n");
    edcc:	4826      	ldr	r0, [pc, #152]	; (ee68 <shell_conf_command+0xa8>)
    edce:	f000 fe4d 	bl	fa6c <console_printf>
    return 0;
}
    edd2:	2000      	movs	r0, #0
    edd4:	b043      	add	sp, #268	; 0x10c
    edd6:	bd30      	pop	{r4, r5, pc}
        name = argv[1];
    edd8:	684c      	ldr	r4, [r1, #4]
    char *val = NULL;
    edda:	2500      	movs	r5, #0
    if (!strcmp(name, "commit")) {
    eddc:	4923      	ldr	r1, [pc, #140]	; (ee6c <shell_conf_command+0xac>)
    edde:	4620      	mov	r0, r4
    ede0:	f7fe fea6 	bl	db30 <strcmp>
    ede4:	b1c0      	cbz	r0, ee18 <shell_conf_command+0x58>
        if (!strcmp(name, "dump")) {
    ede6:	4922      	ldr	r1, [pc, #136]	; (ee70 <shell_conf_command+0xb0>)
    ede8:	4620      	mov	r0, r4
    edea:	f7fe fea1 	bl	db30 <strcmp>
    edee:	b1f0      	cbz	r0, ee2e <shell_conf_command+0x6e>
            if (!strcmp(name, "save")) {
    edf0:	4920      	ldr	r1, [pc, #128]	; (ee74 <shell_conf_command+0xb4>)
    edf2:	4620      	mov	r0, r4
    edf4:	f7fe fe9c 	bl	db30 <strcmp>
    edf8:	b318      	cbz	r0, ee42 <shell_conf_command+0x82>
    if (!val) {
    edfa:	b32d      	cbz	r5, ee48 <shell_conf_command+0x88>
        rc = conf_set_value(name, val);
    edfc:	4629      	mov	r1, r5
    edfe:	4620      	mov	r0, r4
    ee00:	f7ff ff58 	bl	ecb4 <conf_set_value>
        if (rc) {
    ee04:	4601      	mov	r1, r0
    ee06:	2800      	cmp	r0, #0
    ee08:	d0e3      	beq.n	edd2 <shell_conf_command+0x12>
            console_printf("Failed to set, err: %d\n", rc);
    ee0a:	481b      	ldr	r0, [pc, #108]	; (ee78 <shell_conf_command+0xb8>)
    ee0c:	f000 fe2e 	bl	fa6c <console_printf>
            goto err;
    ee10:	e7dc      	b.n	edcc <shell_conf_command+0xc>
        name = argv[1];
    ee12:	684c      	ldr	r4, [r1, #4]
        val = argv[2];
    ee14:	688d      	ldr	r5, [r1, #8]
        break;
    ee16:	e7e1      	b.n	eddc <shell_conf_command+0x1c>
        rc = conf_commit(val);
    ee18:	4628      	mov	r0, r5
    ee1a:	f7ff ff83 	bl	ed24 <conf_commit>
        if (rc) {
    ee1e:	b120      	cbz	r0, ee2a <shell_conf_command+0x6a>
            val = "Failed to commit\n";
    ee20:	4916      	ldr	r1, [pc, #88]	; (ee7c <shell_conf_command+0xbc>)
        console_printf("%s", val);
    ee22:	4817      	ldr	r0, [pc, #92]	; (ee80 <shell_conf_command+0xc0>)
    ee24:	f000 fe22 	bl	fa6c <console_printf>
        return 0;
    ee28:	e7d3      	b.n	edd2 <shell_conf_command+0x12>
            val = "Done\n";
    ee2a:	4916      	ldr	r1, [pc, #88]	; (ee84 <shell_conf_command+0xc4>)
    ee2c:	e7f9      	b.n	ee22 <shell_conf_command+0x62>
            if (!val || !strcmp(val, "running")) {
    ee2e:	b12d      	cbz	r5, ee3c <shell_conf_command+0x7c>
    ee30:	4915      	ldr	r1, [pc, #84]	; (ee88 <shell_conf_command+0xc8>)
    ee32:	4628      	mov	r0, r5
    ee34:	f7fe fe7c 	bl	db30 <strcmp>
    ee38:	2800      	cmp	r0, #0
    ee3a:	d1ca      	bne.n	edd2 <shell_conf_command+0x12>
                conf_dump_running();
    ee3c:	f7ff ffaa 	bl	ed94 <conf_dump_running>
            return 0;
    ee40:	e7c7      	b.n	edd2 <shell_conf_command+0x12>
                conf_save();
    ee42:	f7ff fdd5 	bl	e9f0 <conf_save>
                return 0;
    ee46:	e7c4      	b.n	edd2 <shell_conf_command+0x12>
        val = conf_get_value(name, tmp_buf, sizeof(tmp_buf));
    ee48:	f240 1201 	movw	r2, #257	; 0x101
    ee4c:	a901      	add	r1, sp, #4
    ee4e:	4620      	mov	r0, r4
    ee50:	f7ff ff4a 	bl	ece8 <conf_get_value>
        if (!val) {
    ee54:	4601      	mov	r1, r0
    ee56:	b118      	cbz	r0, ee60 <shell_conf_command+0xa0>
        console_printf("%s\n", val);
    ee58:	480c      	ldr	r0, [pc, #48]	; (ee8c <shell_conf_command+0xcc>)
    ee5a:	f000 fe07 	bl	fa6c <console_printf>
    ee5e:	e7b8      	b.n	edd2 <shell_conf_command+0x12>
            console_printf("Cannot display value\n");
    ee60:	480b      	ldr	r0, [pc, #44]	; (ee90 <shell_conf_command+0xd0>)
    ee62:	f000 fe03 	bl	fa6c <console_printf>
            goto err;
    ee66:	e7b1      	b.n	edcc <shell_conf_command+0xc>
    ee68:	00023428 	.word	0x00023428
    ee6c:	000233d4 	.word	0x000233d4
    ee70:	000233e0 	.word	0x000233e0
    ee74:	000233f0 	.word	0x000233f0
    ee78:	00023410 	.word	0x00023410
    ee7c:	000233c0 	.word	0x000233c0
    ee80:	000233dc 	.word	0x000233dc
    ee84:	000233b8 	.word	0x000233b8
    ee88:	000233e8 	.word	0x000233e8
    ee8c:	00023730 	.word	0x00023730
    ee90:	000233f8 	.word	0x000233f8

0000ee94 <conf_cli_register>:

int
conf_cli_register(void)
{
    ee94:	b508      	push	{r3, lr}
    return shell_cmd_register(&shell_conf_cmd);
    ee96:	4802      	ldr	r0, [pc, #8]	; (eea0 <conf_cli_register+0xc>)
    ee98:	f001 fcd8 	bl	1084c <shell_cmd_register>
}
    ee9c:	bd08      	pop	{r3, pc}
    ee9e:	bf00      	nop
    eea0:	200005f0 	.word	0x200005f0

0000eea4 <conf_nmgr_write>:
    return 0;
}

static int
conf_nmgr_write(struct mgmt_cbuf *cb)
{
    eea4:	b570      	push	{r4, r5, r6, lr}
    eea6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
    eeaa:	4605      	mov	r5, r0
    int rc;
    char name_str[CONF_MAX_NAME_LEN];
    char val_str[CONF_MAX_VAL_LEN];
    bool do_save = false;
    eeac:	f10d 06c7 	add.w	r6, sp, #199	; 0xc7
    eeb0:	2400      	movs	r4, #0
    eeb2:	f88d 40c7 	strb.w	r4, [sp, #199]	; 0xc7
    const struct cbor_attr_t val_attr[] = {
    eeb6:	22c0      	movs	r2, #192	; 0xc0
    eeb8:	4621      	mov	r1, r4
    eeba:	4668      	mov	r0, sp
    eebc:	f7fe fe0d 	bl	dada <memset>
    eec0:	4b23      	ldr	r3, [pc, #140]	; (ef50 <conf_nmgr_write+0xac>)
    eec2:	9300      	str	r3, [sp, #0]
    eec4:	2304      	movs	r3, #4
    eec6:	f88d 3004 	strb.w	r3, [sp, #4]
    eeca:	aa72      	add	r2, sp, #456	; 0x1c8
    eecc:	9202      	str	r2, [sp, #8]
    eece:	2240      	movs	r2, #64	; 0x40
    eed0:	920a      	str	r2, [sp, #40]	; 0x28
    eed2:	4a20      	ldr	r2, [pc, #128]	; (ef54 <conf_nmgr_write+0xb0>)
    eed4:	920c      	str	r2, [sp, #48]	; 0x30
    eed6:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    eeda:	ab32      	add	r3, sp, #200	; 0xc8
    eedc:	930e      	str	r3, [sp, #56]	; 0x38
    eede:	f44f 7280 	mov.w	r2, #256	; 0x100
    eee2:	9216      	str	r2, [sp, #88]	; 0x58
    eee4:	4a1c      	ldr	r2, [pc, #112]	; (ef58 <conf_nmgr_write+0xb4>)
    eee6:	9218      	str	r2, [sp, #96]	; 0x60
    eee8:	2205      	movs	r2, #5
    eeea:	f88d 2064 	strb.w	r2, [sp, #100]	; 0x64
    eeee:	961a      	str	r6, [sp, #104]	; 0x68
        [3] = {
            .attribute = NULL
        }
    };

    name_str[0] = '\0';
    eef0:	f88d 41c8 	strb.w	r4, [sp, #456]	; 0x1c8
    val_str[0] = '\0';
    eef4:	f88d 40c8 	strb.w	r4, [sp, #200]	; 0xc8

    rc = cbor_read_object(&cb->it, val_attr);
    eef8:	4669      	mov	r1, sp
    eefa:	f105 001c 	add.w	r0, r5, #28
    eefe:	f003 ff8d 	bl	12e1c <cbor_read_object>
    if (rc) {
    ef02:	b9f8      	cbnz	r0, ef44 <conf_nmgr_write+0xa0>
        return MGMT_ERR_EINVAL;
    }

    if (name_str[0] != '\0') {
    ef04:	f89d 31c8 	ldrb.w	r3, [sp, #456]	; 0x1c8
    ef08:	b13b      	cbz	r3, ef1a <conf_nmgr_write+0x76>
        if (val_str[0] != '\0') {
    ef0a:	f89d 30c8 	ldrb.w	r3, [sp, #200]	; 0xc8
    ef0e:	b173      	cbz	r3, ef2e <conf_nmgr_write+0x8a>
            rc = conf_set_value(name_str, val_str);
    ef10:	a932      	add	r1, sp, #200	; 0xc8
    ef12:	a872      	add	r0, sp, #456	; 0x1c8
    ef14:	f7ff fece 	bl	ecb4 <conf_set_value>
        } else {
            rc = conf_set_value(name_str, NULL);
        }
        if (rc) {
    ef18:	b9b0      	cbnz	r0, ef48 <conf_nmgr_write+0xa4>
            return MGMT_ERR_EINVAL;
        }
    }
    rc = conf_commit(NULL);
    ef1a:	2000      	movs	r0, #0
    ef1c:	f7ff ff02 	bl	ed24 <conf_commit>
    if (rc) {
    ef20:	b9a0      	cbnz	r0, ef4c <conf_nmgr_write+0xa8>
        return MGMT_ERR_EINVAL;
    }
    if (do_save) {
    ef22:	f89d 30c7 	ldrb.w	r3, [sp, #199]	; 0xc7
    ef26:	b93b      	cbnz	r3, ef38 <conf_nmgr_write+0x94>
        if (rc) {
            return MGMT_ERR_EINVAL;
        }
    }
    return 0;
}
    ef28:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
    ef2c:	bd70      	pop	{r4, r5, r6, pc}
            rc = conf_set_value(name_str, NULL);
    ef2e:	2100      	movs	r1, #0
    ef30:	a872      	add	r0, sp, #456	; 0x1c8
    ef32:	f7ff febf 	bl	ecb4 <conf_set_value>
    ef36:	e7ef      	b.n	ef18 <conf_nmgr_write+0x74>
        rc = conf_save();
    ef38:	f7ff fd5a 	bl	e9f0 <conf_save>
        if (rc) {
    ef3c:	2800      	cmp	r0, #0
    ef3e:	d0f3      	beq.n	ef28 <conf_nmgr_write+0x84>
            return MGMT_ERR_EINVAL;
    ef40:	2003      	movs	r0, #3
    ef42:	e7f1      	b.n	ef28 <conf_nmgr_write+0x84>
        return MGMT_ERR_EINVAL;
    ef44:	2003      	movs	r0, #3
    ef46:	e7ef      	b.n	ef28 <conf_nmgr_write+0x84>
            return MGMT_ERR_EINVAL;
    ef48:	2003      	movs	r0, #3
    ef4a:	e7ed      	b.n	ef28 <conf_nmgr_write+0x84>
        return MGMT_ERR_EINVAL;
    ef4c:	2003      	movs	r0, #3
    ef4e:	e7eb      	b.n	ef28 <conf_nmgr_write+0x84>
    ef50:	00024d00 	.word	0x00024d00
    ef54:	00023440 	.word	0x00023440
    ef58:	000233f0 	.word	0x000233f0

0000ef5c <conf_nmgr_read>:
{
    ef5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ef5e:	b0e9      	sub	sp, #420	; 0x1a4
    ef60:	4604      	mov	r4, r0
    const struct cbor_attr_t attr[2] = {
    ef62:	2260      	movs	r2, #96	; 0x60
    ef64:	2100      	movs	r1, #0
    ef66:	4668      	mov	r0, sp
    ef68:	f7fe fdb7 	bl	dada <memset>
    ef6c:	4b19      	ldr	r3, [pc, #100]	; (efd4 <conf_nmgr_read+0x78>)
    ef6e:	9300      	str	r3, [sp, #0]
    ef70:	2304      	movs	r3, #4
    ef72:	f88d 3004 	strb.w	r3, [sp, #4]
    ef76:	ab58      	add	r3, sp, #352	; 0x160
    ef78:	9302      	str	r3, [sp, #8]
    ef7a:	2340      	movs	r3, #64	; 0x40
    ef7c:	930a      	str	r3, [sp, #40]	; 0x28
    rc = cbor_read_object(&cb->it, attr);
    ef7e:	4669      	mov	r1, sp
    ef80:	f104 001c 	add.w	r0, r4, #28
    ef84:	f003 ff4a 	bl	12e1c <cbor_read_object>
    if (rc) {
    ef88:	b9e8      	cbnz	r0, efc6 <conf_nmgr_read+0x6a>
    ef8a:	4605      	mov	r5, r0
    val = conf_get_value(name_str, val_str, sizeof(val_str));
    ef8c:	f44f 7280 	mov.w	r2, #256	; 0x100
    ef90:	a918      	add	r1, sp, #96	; 0x60
    ef92:	a858      	add	r0, sp, #352	; 0x160
    ef94:	f7ff fea8 	bl	ece8 <conf_get_value>
    if (!val) {
    ef98:	4607      	mov	r7, r0
    ef9a:	b1b0      	cbz	r0, efca <conf_nmgr_read+0x6e>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "val");
    ef9c:	340c      	adds	r4, #12
CBOR_API CborError cbor_encode_negative_int(CborEncoder *encoder, uint64_t absolute_value);
CBOR_API CborError cbor_encode_simple_value(CborEncoder *encoder, uint8_t value);
CBOR_API CborError cbor_encode_tag(CborEncoder *encoder, CborTag tag);
CBOR_API CborError cbor_encode_text_string(CborEncoder *encoder, const char *string, size_t length);
CBOR_INLINE_API CborError cbor_encode_text_stringz(CborEncoder *encoder, const char *string)
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
    ef9e:	2203      	movs	r2, #3
    efa0:	490d      	ldr	r1, [pc, #52]	; (efd8 <conf_nmgr_read+0x7c>)
    efa2:	4620      	mov	r0, r4
    efa4:	f004 f921 	bl	131ea <cbor_encode_text_string>
    efa8:	4606      	mov	r6, r0
    efaa:	4638      	mov	r0, r7
    efac:	f7fe fdcc 	bl	db48 <strlen>
    efb0:	4602      	mov	r2, r0
    efb2:	4639      	mov	r1, r7
    efb4:	4620      	mov	r0, r4
    efb6:	f004 f918 	bl	131ea <cbor_encode_text_string>
    if (g_err) {
    efba:	ea50 0306 	orrs.w	r3, r0, r6
    efbe:	d106      	bne.n	efce <conf_nmgr_read+0x72>
}
    efc0:	4628      	mov	r0, r5
    efc2:	b069      	add	sp, #420	; 0x1a4
    efc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return MGMT_ERR_EINVAL;
    efc6:	2503      	movs	r5, #3
    efc8:	e7fa      	b.n	efc0 <conf_nmgr_read+0x64>
        return MGMT_ERR_EINVAL;
    efca:	2503      	movs	r5, #3
    efcc:	e7f8      	b.n	efc0 <conf_nmgr_read+0x64>
        return MGMT_ERR_ENOMEM;
    efce:	2502      	movs	r5, #2
    efd0:	e7f6      	b.n	efc0 <conf_nmgr_read+0x64>
    efd2:	bf00      	nop
    efd4:	00024d00 	.word	0x00024d00
    efd8:	00023440 	.word	0x00023440

0000efdc <conf_nmgr_register>:

int
conf_nmgr_register(void)
{
    efdc:	b508      	push	{r3, lr}
    return mgmt_group_register(&conf_nmgr_group);
    efde:	4802      	ldr	r0, [pc, #8]	; (efe8 <conf_nmgr_register+0xc>)
    efe0:	f00e f9da 	bl	1d398 <mgmt_group_register>
}
    efe4:	bd08      	pop	{r3, pc}
    efe6:	bf00      	nop
    efe8:	20000600 	.word	0x20000600

0000efec <ring_buf_next>:
}

static uint8_t
ring_buf_next(uint8_t i, uint8_t size)
{
    return (uint8_t) ((i + 1) % size);
    efec:	3001      	adds	r0, #1
    efee:	fb90 f3f1 	sdiv	r3, r0, r1
    eff2:	fb01 0013 	mls	r0, r1, r3, r0
}
    eff6:	b2c0      	uxtb	r0, r0
    eff8:	4770      	bx	lr

0000effa <ring_buf_prev>:

static uint8_t
ring_buf_prev(uint8_t i, uint8_t size)
{
    return i == 0 ? i = size - 1 : --i;
    effa:	b910      	cbnz	r0, f002 <ring_buf_prev+0x8>
    effc:	3901      	subs	r1, #1
    effe:	b2c8      	uxtb	r0, r1
    f000:	4770      	bx	lr
    f002:	3801      	subs	r0, #1
    f004:	b2c0      	uxtb	r0, r0
}
    f006:	4770      	bx	lr

0000f008 <console_hist_is_full>:

static bool
console_hist_is_full(void)
{
    f008:	b510      	push	{r4, lr}
    struct console_hist *sh = &console_hist;

    return ring_buf_next(sh->head, sh->size) == sh->tail;
    f00a:	4c05      	ldr	r4, [pc, #20]	; (f020 <console_hist_is_full+0x18>)
    f00c:	78a1      	ldrb	r1, [r4, #2]
    f00e:	7820      	ldrb	r0, [r4, #0]
    f010:	f7ff ffec 	bl	efec <ring_buf_next>
    f014:	7863      	ldrb	r3, [r4, #1]
}
    f016:	4298      	cmp	r0, r3
    f018:	bf14      	ite	ne
    f01a:	2000      	movne	r0, #0
    f01c:	2001      	moveq	r0, #1
    f01e:	bd10      	pop	{r4, pc}
    f020:	200038a4 	.word	0x200038a4

0000f024 <handle_nlip>:
}

static int
handle_nlip(uint8_t byte)
{
    if (((nlip_state & NLIP_PKT_START1) &&
    f024:	4b13      	ldr	r3, [pc, #76]	; (f074 <handle_nlip+0x50>)
    f026:	681b      	ldr	r3, [r3, #0]
    f028:	f003 0203 	and.w	r2, r3, #3
    f02c:	2a03      	cmp	r2, #3
    f02e:	d01d      	beq.n	f06c <handle_nlip+0x48>
         (nlip_state & NLIP_PKT_START2)) ||
        ((nlip_state & NLIP_DATA_START1) &&
    f030:	f003 020c 	and.w	r2, r3, #12
         (nlip_state & NLIP_PKT_START2)) ||
    f034:	2a0c      	cmp	r2, #12
    f036:	d01b      	beq.n	f070 <handle_nlip+0x4c>
         (nlip_state & NLIP_DATA_START2)))
    {
        return 1;
    }

    if ((nlip_state & NLIP_PKT_START1) &&
    f038:	f013 0f01 	tst.w	r3, #1
    f03c:	d001      	beq.n	f042 <handle_nlip+0x1e>
    f03e:	2809      	cmp	r0, #9
    f040:	d008      	beq.n	f054 <handle_nlip+0x30>
        (byte == CONSOLE_NLIP_PKT_START2)) {
        nlip_state |= NLIP_PKT_START2;
        return 1;
    } else if ((nlip_state & NLIP_DATA_START1) &&
    f042:	f013 0f04 	tst.w	r3, #4
    f046:	d001      	beq.n	f04c <handle_nlip+0x28>
    f048:	2814      	cmp	r0, #20
    f04a:	d009      	beq.n	f060 <handle_nlip+0x3c>
               (byte == CONSOLE_NLIP_DATA_START2)) {
        nlip_state |= NLIP_DATA_START2;
        return 1;
    } else {
        nlip_state = 0;
    f04c:	2000      	movs	r0, #0
    f04e:	4b09      	ldr	r3, [pc, #36]	; (f074 <handle_nlip+0x50>)
    f050:	6018      	str	r0, [r3, #0]
        return 0;
    f052:	4770      	bx	lr
        nlip_state |= NLIP_PKT_START2;
    f054:	f043 0302 	orr.w	r3, r3, #2
    f058:	4a06      	ldr	r2, [pc, #24]	; (f074 <handle_nlip+0x50>)
    f05a:	6013      	str	r3, [r2, #0]
        return 1;
    f05c:	2001      	movs	r0, #1
    f05e:	4770      	bx	lr
        nlip_state |= NLIP_DATA_START2;
    f060:	f043 0308 	orr.w	r3, r3, #8
    f064:	4a03      	ldr	r2, [pc, #12]	; (f074 <handle_nlip+0x50>)
    f066:	6013      	str	r3, [r2, #0]
        return 1;
    f068:	2001      	movs	r0, #1
    f06a:	4770      	bx	lr
        return 1;
    f06c:	2001      	movs	r0, #1
    f06e:	4770      	bx	lr
    f070:	2001      	movs	r0, #1
    }
}
    f072:	4770      	bx	lr
    f074:	200040f4 	.word	0x200040f4

0000f078 <trim_whitespace>:
{
    f078:	b570      	push	{r4, r5, r6, lr}
    f07a:	4604      	mov	r4, r0
    f07c:	4615      	mov	r5, r2
    if (len == 0) {
    f07e:	460e      	mov	r6, r1
    f080:	b909      	cbnz	r1, f086 <trim_whitespace+0xe>
    f082:	e02c      	b.n	f0de <trim_whitespace+0x66>
        str++;
    f084:	3401      	adds	r4, #1
    while (isspace((unsigned char)*str)) {
    f086:	7823      	ldrb	r3, [r4, #0]
	return __c < 0x20;
}

__extern_inline int isspace(int __c)
{
	return __c == ' ' || __c == '\n' || __c == '\t' || __c == '\r';
    f088:	2b20      	cmp	r3, #32
    f08a:	d0fb      	beq.n	f084 <trim_whitespace+0xc>
    f08c:	2b0a      	cmp	r3, #10
    f08e:	d0f9      	beq.n	f084 <trim_whitespace+0xc>
    f090:	2b09      	cmp	r3, #9
    f092:	d0f7      	beq.n	f084 <trim_whitespace+0xc>
    f094:	2b0d      	cmp	r3, #13
    f096:	d0f5      	beq.n	f084 <trim_whitespace+0xc>
    if (*str == 0) { /* All spaces? */
    f098:	b12b      	cbz	r3, f0a6 <trim_whitespace+0x2e>
    end = str + strlen(str) - 1;
    f09a:	4620      	mov	r0, r4
    f09c:	f7fe fd54 	bl	db48 <strlen>
    f0a0:	1e43      	subs	r3, r0, #1
    f0a2:	4423      	add	r3, r4
    while (end > str && isspace((unsigned char)*end)) {
    f0a4:	e003      	b.n	f0ae <trim_whitespace+0x36>
        *out = 0;
    f0a6:	702b      	strb	r3, [r5, #0]
        return 0;
    f0a8:	461e      	mov	r6, r3
    f0aa:	e018      	b.n	f0de <trim_whitespace+0x66>
        end--;
    f0ac:	3b01      	subs	r3, #1
    while (end > str && isspace((unsigned char)*end)) {
    f0ae:	429c      	cmp	r4, r3
    f0b0:	d208      	bcs.n	f0c4 <trim_whitespace+0x4c>
    f0b2:	781a      	ldrb	r2, [r3, #0]
    f0b4:	2a20      	cmp	r2, #32
    f0b6:	d0f9      	beq.n	f0ac <trim_whitespace+0x34>
    f0b8:	2a0a      	cmp	r2, #10
    f0ba:	d0f7      	beq.n	f0ac <trim_whitespace+0x34>
    f0bc:	2a09      	cmp	r2, #9
    f0be:	d0f5      	beq.n	f0ac <trim_whitespace+0x34>
    f0c0:	2a0d      	cmp	r2, #13
    f0c2:	d0f3      	beq.n	f0ac <trim_whitespace+0x34>
    end++;
    f0c4:	3301      	adds	r3, #1
    out_size = min(end - str, len - 1);
    f0c6:	3e01      	subs	r6, #1
    f0c8:	1b1b      	subs	r3, r3, r4
    f0ca:	429e      	cmp	r6, r3
    f0cc:	bf28      	it	cs
    f0ce:	461e      	movcs	r6, r3
    memcpy(out, str, out_size);
    f0d0:	4632      	mov	r2, r6
    f0d2:	4621      	mov	r1, r4
    f0d4:	4628      	mov	r0, r5
    f0d6:	f7fe fcf3 	bl	dac0 <memcpy>
    out[out_size] = 0;
    f0da:	2300      	movs	r3, #0
    f0dc:	55ab      	strb	r3, [r5, r6]
}
    f0de:	4630      	mov	r0, r6
    f0e0:	bd70      	pop	{r4, r5, r6, pc}
	...

0000f0e4 <console_hist_move_to_head>:
{
    f0e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f0e8:	4605      	mov	r5, r0
    curr = sh->tail;
    f0ea:	4b1d      	ldr	r3, [pc, #116]	; (f160 <console_hist_move_to_head+0x7c>)
    f0ec:	785c      	ldrb	r4, [r3, #1]
    while (curr != sh->head) {
    f0ee:	e005      	b.n	f0fc <console_hist_move_to_head+0x18>
        curr = ring_buf_next(curr, sh->size);
    f0f0:	4b1b      	ldr	r3, [pc, #108]	; (f160 <console_hist_move_to_head+0x7c>)
    f0f2:	7899      	ldrb	r1, [r3, #2]
    f0f4:	4620      	mov	r0, r4
    f0f6:	f7ff ff79 	bl	efec <ring_buf_next>
    f0fa:	4604      	mov	r4, r0
    while (curr != sh->head) {
    f0fc:	4b18      	ldr	r3, [pc, #96]	; (f160 <console_hist_move_to_head+0x7c>)
    f0fe:	781e      	ldrb	r6, [r3, #0]
    f100:	42a6      	cmp	r6, r4
    f102:	d00a      	beq.n	f11a <console_hist_move_to_head+0x36>
        if (strcmp(sh->lines[curr], line) == 0) {
    f104:	4b16      	ldr	r3, [pc, #88]	; (f160 <console_hist_move_to_head+0x7c>)
    f106:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    f10a:	685f      	ldr	r7, [r3, #4]
    f10c:	4629      	mov	r1, r5
    f10e:	4638      	mov	r0, r7
    f110:	f7fe fd0e 	bl	db30 <strcmp>
    f114:	2800      	cmp	r0, #0
    f116:	d1eb      	bne.n	f0f0 <console_hist_move_to_head+0xc>
    f118:	e000      	b.n	f11c <console_hist_move_to_head+0x38>
    char *match = NULL;
    f11a:	2700      	movs	r7, #0
    if (!match) {
    f11c:	b1f7      	cbz	r7, f15c <console_hist_move_to_head+0x78>
    curr = ring_buf_next(curr, sh->size);
    f11e:	4b10      	ldr	r3, [pc, #64]	; (f160 <console_hist_move_to_head+0x7c>)
    f120:	f893 8002 	ldrb.w	r8, [r3, #2]
    f124:	4641      	mov	r1, r8
    f126:	4620      	mov	r0, r4
    f128:	f7ff ff60 	bl	efec <ring_buf_next>
    f12c:	4605      	mov	r5, r0
    while (curr != sh->head) {
    f12e:	e00c      	b.n	f14a <console_hist_move_to_head+0x66>
        sh->lines[prev] = sh->lines[curr];
    f130:	480b      	ldr	r0, [pc, #44]	; (f160 <console_hist_move_to_head+0x7c>)
    f132:	eb00 0385 	add.w	r3, r0, r5, lsl #2
    f136:	685b      	ldr	r3, [r3, #4]
    f138:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    f13c:	6043      	str	r3, [r0, #4]
        curr = ring_buf_next(curr, sh->size);
    f13e:	4641      	mov	r1, r8
    f140:	4628      	mov	r0, r5
    f142:	f7ff ff53 	bl	efec <ring_buf_next>
        prev = curr;
    f146:	462c      	mov	r4, r5
        curr = ring_buf_next(curr, sh->size);
    f148:	4605      	mov	r5, r0
    while (curr != sh->head) {
    f14a:	42ae      	cmp	r6, r5
    f14c:	d1f0      	bne.n	f130 <console_hist_move_to_head+0x4c>
    sh->lines[prev] = match;
    f14e:	4804      	ldr	r0, [pc, #16]	; (f160 <console_hist_move_to_head+0x7c>)
    f150:	eb00 0484 	add.w	r4, r0, r4, lsl #2
    f154:	6067      	str	r7, [r4, #4]
    return true;
    f156:	2001      	movs	r0, #1
}
    f158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return false;
    f15c:	2000      	movs	r0, #0
    f15e:	e7fb      	b.n	f158 <console_hist_move_to_head+0x74>
    f160:	200038a4 	.word	0x200038a4

0000f164 <console_hist_add>:
{
    f164:	b510      	push	{r4, lr}
    f166:	b0c0      	sub	sp, #256	; 0x100
    sh->curr = sh->head;
    f168:	4b1d      	ldr	r3, [pc, #116]	; (f1e0 <console_hist_add+0x7c>)
    f16a:	781a      	ldrb	r2, [r3, #0]
    f16c:	70da      	strb	r2, [r3, #3]
    len = trim_whitespace(line, sizeof(buf), buf);
    f16e:	466a      	mov	r2, sp
    f170:	f44f 7180 	mov.w	r1, #256	; 0x100
    f174:	f7ff ff80 	bl	f078 <trim_whitespace>
    if (!len) {
    f178:	b908      	cbnz	r0, f17e <console_hist_add+0x1a>
}
    f17a:	b040      	add	sp, #256	; 0x100
    f17c:	bd10      	pop	{r4, pc}
    if (console_hist_move_to_head(buf)) {
    f17e:	4668      	mov	r0, sp
    f180:	f7ff ffb0 	bl	f0e4 <console_hist_move_to_head>
    f184:	2800      	cmp	r0, #0
    f186:	d1f8      	bne.n	f17a <console_hist_add+0x16>
    if (console_hist_is_full()) {
    f188:	f7ff ff3e 	bl	f008 <console_hist_is_full>
    f18c:	b198      	cbz	r0, f1b6 <console_hist_add+0x52>
        assert(sh->lines[sh->head] == NULL);
    f18e:	4a14      	ldr	r2, [pc, #80]	; (f1e0 <console_hist_add+0x7c>)
    f190:	7813      	ldrb	r3, [r2, #0]
    f192:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    f196:	6852      	ldr	r2, [r2, #4]
    f198:	b9e2      	cbnz	r2, f1d4 <console_hist_add+0x70>
        sh->lines[sh->head] = sh->lines[sh->tail];
    f19a:	4c11      	ldr	r4, [pc, #68]	; (f1e0 <console_hist_add+0x7c>)
    f19c:	7860      	ldrb	r0, [r4, #1]
    f19e:	eb04 0280 	add.w	r2, r4, r0, lsl #2
    f1a2:	6851      	ldr	r1, [r2, #4]
    f1a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    f1a8:	6059      	str	r1, [r3, #4]
        sh->lines[sh->tail] = NULL;
    f1aa:	2300      	movs	r3, #0
    f1ac:	6053      	str	r3, [r2, #4]
        sh->tail = ring_buf_next(sh->tail, sh->size);
    f1ae:	78a1      	ldrb	r1, [r4, #2]
    f1b0:	f7ff ff1c 	bl	efec <ring_buf_next>
    f1b4:	7060      	strb	r0, [r4, #1]
    strcpy(sh->lines[sh->head], buf);
    f1b6:	4c0a      	ldr	r4, [pc, #40]	; (f1e0 <console_hist_add+0x7c>)
    f1b8:	7823      	ldrb	r3, [r4, #0]
    f1ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    f1be:	4669      	mov	r1, sp
    f1c0:	6858      	ldr	r0, [r3, #4]
    f1c2:	f00d f98b 	bl	1c4dc <strcpy>
    sh->head = ring_buf_next(sh->head, sh->size);
    f1c6:	78a1      	ldrb	r1, [r4, #2]
    f1c8:	7820      	ldrb	r0, [r4, #0]
    f1ca:	f7ff ff0f 	bl	efec <ring_buf_next>
    f1ce:	7020      	strb	r0, [r4, #0]
    sh->curr = sh->head;
    f1d0:	70e0      	strb	r0, [r4, #3]
    f1d2:	e7d2      	b.n	f17a <console_hist_add+0x16>
        assert(sh->lines[sh->head] == NULL);
    f1d4:	2300      	movs	r3, #0
    f1d6:	461a      	mov	r2, r3
    f1d8:	4619      	mov	r1, r3
    f1da:	4618      	mov	r0, r3
    f1dc:	f7f9 fec2 	bl	8f64 <__assert_func>
    f1e0:	200038a4 	.word	0x200038a4

0000f1e4 <console_hist_init>:
{
    f1e4:	b510      	push	{r4, lr}
    memset(console_hist_lines, 0, sizeof(console_hist_lines));
    f1e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
    f1ea:	2100      	movs	r1, #0
    f1ec:	480b      	ldr	r0, [pc, #44]	; (f21c <console_hist_init+0x38>)
    f1ee:	f7fe fc74 	bl	dada <memset>
    memset(&console_hist, 0, sizeof(console_hist));
    f1f2:	4c0b      	ldr	r4, [pc, #44]	; (f220 <console_hist_init+0x3c>)
    f1f4:	2228      	movs	r2, #40	; 0x28
    f1f6:	2100      	movs	r1, #0
    f1f8:	4620      	mov	r0, r4
    f1fa:	f7fe fc6e 	bl	dada <memset>
    sh->size = MYNEWT_VAL(CONSOLE_HISTORY_SIZE) + 1;
    f1fe:	2309      	movs	r3, #9
    f200:	70a3      	strb	r3, [r4, #2]
    for (i = 0; i < sh->size - 1; i++) {
    f202:	2300      	movs	r3, #0
    f204:	e007      	b.n	f216 <console_hist_init+0x32>
        sh->lines[i] = console_hist_lines[i];
    f206:	4905      	ldr	r1, [pc, #20]	; (f21c <console_hist_init+0x38>)
    f208:	eb01 2103 	add.w	r1, r1, r3, lsl #8
    f20c:	4a04      	ldr	r2, [pc, #16]	; (f220 <console_hist_init+0x3c>)
    f20e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    f212:	6051      	str	r1, [r2, #4]
    for (i = 0; i < sh->size - 1; i++) {
    f214:	3301      	adds	r3, #1
    f216:	2b07      	cmp	r3, #7
    f218:	ddf5      	ble.n	f206 <console_hist_init+0x22>
}
    f21a:	bd10      	pop	{r4, pc}
    f21c:	200038cc 	.word	0x200038cc
    f220:	200038a4 	.word	0x200038a4

0000f224 <console_echo>:
    echo = on;
    f224:	4b01      	ldr	r3, [pc, #4]	; (f22c <console_echo+0x8>)
    f226:	6018      	str	r0, [r3, #0]
}
    f228:	4770      	bx	lr
    f22a:	bf00      	nop
    f22c:	2000060c 	.word	0x2000060c

0000f230 <console_lock>:
{
    f230:	b508      	push	{r3, lr}
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
    f232:	4b0a      	ldr	r3, [pc, #40]	; (f25c <console_lock+0x2c>)
    f234:	685b      	ldr	r3, [r3, #4]
    f236:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) {
    f23a:	b133      	cbz	r3, f24a <console_lock+0x1a>
 *
 * @return number of times lock was called from current task
 */
static inline uint16_t os_mutex_get_level(struct os_mutex *mu)
{
    return mu->mu_level;
    f23c:	4b08      	ldr	r3, [pc, #32]	; (f260 <console_lock+0x30>)
    f23e:	88db      	ldrh	r3, [r3, #6]
        if (os_mutex_get_level(&console_write_lock)) {
    f240:	b90b      	cbnz	r3, f246 <console_lock+0x16>
    int rc = OS_OK;
    f242:	2000      	movs	r0, #0
    f244:	e007      	b.n	f256 <console_lock+0x26>
            rc = OS_EBUSY;
    f246:	200b      	movs	r0, #11
        goto end;
    f248:	e005      	b.n	f256 <console_lock+0x26>
    rc = os_mutex_pend(&console_write_lock, timeout);
    f24a:	4601      	mov	r1, r0
    f24c:	4804      	ldr	r0, [pc, #16]	; (f260 <console_lock+0x30>)
    f24e:	f7fb fbfb 	bl	aa48 <os_mutex_pend>
    if (rc == OS_NOT_STARTED) {
    f252:	2809      	cmp	r0, #9
    f254:	d000      	beq.n	f258 <console_lock+0x28>
}
    f256:	bd08      	pop	{r3, pc}
        rc = OS_OK;
    f258:	2000      	movs	r0, #0
    return rc;
    f25a:	e7fc      	b.n	f256 <console_lock+0x26>
    f25c:	e000ed00 	.word	0xe000ed00
    f260:	200040d0 	.word	0x200040d0

0000f264 <console_unlock>:
{
    f264:	b508      	push	{r3, lr}
    f266:	4b0a      	ldr	r3, [pc, #40]	; (f290 <console_unlock+0x2c>)
    f268:	685b      	ldr	r3, [r3, #4]
    f26a:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) {
    f26e:	b10b      	cbz	r3, f274 <console_unlock+0x10>
    int rc = OS_OK;
    f270:	2000      	movs	r0, #0
}
    f272:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&console_write_lock);
    f274:	4807      	ldr	r0, [pc, #28]	; (f294 <console_unlock+0x30>)
    f276:	f7fb fb8b 	bl	a990 <os_mutex_release>
    assert(rc == OS_OK || rc == OS_NOT_STARTED);
    f27a:	2800      	cmp	r0, #0
    f27c:	d0f9      	beq.n	f272 <console_unlock+0xe>
    f27e:	2809      	cmp	r0, #9
    f280:	d0f7      	beq.n	f272 <console_unlock+0xe>
    f282:	2300      	movs	r3, #0
    f284:	461a      	mov	r2, r3
    f286:	4619      	mov	r1, r3
    f288:	4618      	mov	r0, r3
    f28a:	f7f9 fe6b 	bl	8f64 <__assert_func>
    f28e:	bf00      	nop
    f290:	e000ed00 	.word	0xe000ed00
    f294:	200040d0 	.word	0x200040d0

0000f298 <console_out>:
{
    f298:	b510      	push	{r4, lr}
    f29a:	4604      	mov	r4, r0
    if (console_lock(timeout) != OS_OK) {
    f29c:	2080      	movs	r0, #128	; 0x80
    f29e:	f7ff ffc7 	bl	f230 <console_lock>
    f2a2:	b108      	cbz	r0, f2a8 <console_out+0x10>
}
    f2a4:	4620      	mov	r0, r4
    f2a6:	bd10      	pop	{r4, pc}
    rc = console_out_nolock(c);
    f2a8:	4620      	mov	r0, r4
    f2aa:	f000 fc59 	bl	fb60 <console_out_nolock>
    f2ae:	4604      	mov	r4, r0
    (void)console_unlock();
    f2b0:	f7ff ffd8 	bl	f264 <console_unlock>
    return rc;
    f2b4:	e7f6      	b.n	f2a4 <console_out+0xc>
	...

0000f2b8 <console_append_char>:

static int
console_append_char(char *line, uint8_t byte)
{
    f2b8:	b508      	push	{r3, lr}
    if (cur + end >= MYNEWT_VAL(CONSOLE_MAX_INPUT_LEN) - 1) {
    f2ba:	4b0d      	ldr	r3, [pc, #52]	; (f2f0 <console_append_char+0x38>)
    f2bc:	881b      	ldrh	r3, [r3, #0]
    f2be:	4a0d      	ldr	r2, [pc, #52]	; (f2f4 <console_append_char+0x3c>)
    f2c0:	8812      	ldrh	r2, [r2, #0]
    f2c2:	4413      	add	r3, r2
    f2c4:	2bfe      	cmp	r3, #254	; 0xfe
    f2c6:	dc0e      	bgt.n	f2e6 <console_append_char+0x2e>
        return 0;
    }

    line[cur + end] = byte;
    f2c8:	54c1      	strb	r1, [r0, r3]

    if (byte == '\0') {
    f2ca:	b171      	cbz	r1, f2ea <console_append_char+0x32>
        return 1;
    }

    if (echo) {
    f2cc:	4b0a      	ldr	r3, [pc, #40]	; (f2f8 <console_append_char+0x40>)
    f2ce:	681b      	ldr	r3, [r3, #0]
    f2d0:	b92b      	cbnz	r3, f2de <console_append_char+0x26>
        /* Echo back to console */
        console_out(byte);
    }
    ++cur;
    f2d2:	4a07      	ldr	r2, [pc, #28]	; (f2f0 <console_append_char+0x38>)
    f2d4:	8813      	ldrh	r3, [r2, #0]
    f2d6:	3301      	adds	r3, #1
    f2d8:	8013      	strh	r3, [r2, #0]
    return 1;
    f2da:	2001      	movs	r0, #1
}
    f2dc:	bd08      	pop	{r3, pc}
        console_out(byte);
    f2de:	4608      	mov	r0, r1
    f2e0:	f7ff ffda 	bl	f298 <console_out>
    f2e4:	e7f5      	b.n	f2d2 <console_append_char+0x1a>
        return 0;
    f2e6:	2000      	movs	r0, #0
    f2e8:	e7f8      	b.n	f2dc <console_append_char+0x24>
        return 1;
    f2ea:	2001      	movs	r0, #1
    f2ec:	e7f6      	b.n	f2dc <console_append_char+0x24>
    f2ee:	bf00      	nop
    f2f0:	200040dc 	.word	0x200040dc
    f2f4:	200040de 	.word	0x200040de
    f2f8:	2000060c 	.word	0x2000060c

0000f2fc <console_clear_line>:
{
    f2fc:	b508      	push	{r3, lr}
    if (cur) {
    f2fe:	4b0b      	ldr	r3, [pc, #44]	; (f32c <console_clear_line+0x30>)
    f300:	8819      	ldrh	r1, [r3, #0]
    f302:	b971      	cbnz	r1, f322 <console_clear_line+0x26>
    cur = 0;
    f304:	2300      	movs	r3, #0
    f306:	4a09      	ldr	r2, [pc, #36]	; (f32c <console_clear_line+0x30>)
    f308:	8013      	strh	r3, [r2, #0]
    end = 0;
    f30a:	4a09      	ldr	r2, [pc, #36]	; (f330 <console_clear_line+0x34>)
    f30c:	8013      	strh	r3, [r2, #0]
    console_out(ESC);
    f30e:	201b      	movs	r0, #27
    f310:	f7ff ffc2 	bl	f298 <console_out>
    console_out('[');
    f314:	205b      	movs	r0, #91	; 0x5b
    f316:	f7ff ffbf 	bl	f298 <console_out>
    console_out('K');
    f31a:	204b      	movs	r0, #75	; 0x4b
    f31c:	f7ff ffbc 	bl	f298 <console_out>
}
    f320:	bd08      	pop	{r3, pc}
    console_printf("\x1b[%uD", count);
    f322:	4804      	ldr	r0, [pc, #16]	; (f334 <console_clear_line+0x38>)
    f324:	f000 fba2 	bl	fa6c <console_printf>
}
    f328:	e7ec      	b.n	f304 <console_clear_line+0x8>
    f32a:	bf00      	nop
    f32c:	200040dc 	.word	0x200040dc
    f330:	200040de 	.word	0x200040de
    f334:	0002344c 	.word	0x0002344c

0000f338 <insert_char>:
{
    f338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (cur + end >= MYNEWT_VAL(CONSOLE_MAX_INPUT_LEN) - 1) {
    f33a:	4b1d      	ldr	r3, [pc, #116]	; (f3b0 <insert_char+0x78>)
    f33c:	881b      	ldrh	r3, [r3, #0]
    f33e:	4413      	add	r3, r2
    f340:	2bfe      	cmp	r3, #254	; 0xfe
    f342:	dc0b      	bgt.n	f35c <insert_char+0x24>
    f344:	4604      	mov	r4, r0
    f346:	460e      	mov	r6, r1
    f348:	4615      	mov	r5, r2
    if (echo) {
    f34a:	4b1a      	ldr	r3, [pc, #104]	; (f3b4 <insert_char+0x7c>)
    f34c:	681b      	ldr	r3, [r3, #0]
    f34e:	b933      	cbnz	r3, f35e <insert_char+0x26>
    ++cur;
    f350:	4a17      	ldr	r2, [pc, #92]	; (f3b0 <insert_char+0x78>)
    f352:	8813      	ldrh	r3, [r2, #0]
    f354:	3301      	adds	r3, #1
    f356:	8013      	strh	r3, [r2, #0]
    if (end == 0) {
    f358:	b92d      	cbnz	r5, f366 <insert_char+0x2e>
        *pos = c;
    f35a:	7026      	strb	r6, [r4, #0]
}
    f35c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        console_out(c);
    f35e:	4608      	mov	r0, r1
    f360:	f7ff ff9a 	bl	f298 <console_out>
    f364:	e7f4      	b.n	f350 <insert_char+0x18>
    tmp = *pos;
    f366:	7827      	ldrb	r7, [r4, #0]
    *(pos++) = c;
    f368:	f804 6b01 	strb.w	r6, [r4], #1
    console_out(ESC);
    f36c:	201b      	movs	r0, #27
    f36e:	f7ff ff93 	bl	f298 <console_out>
    console_out('[');
    f372:	205b      	movs	r0, #91	; 0x5b
    f374:	f7ff ff90 	bl	f298 <console_out>
    console_out('s');
    f378:	2073      	movs	r0, #115	; 0x73
    f37a:	f7ff ff8d 	bl	f298 <console_out>
}
    f37e:	e009      	b.n	f394 <insert_char+0x5c>
        console_out(tmp);
    f380:	4638      	mov	r0, r7
    f382:	f7ff ff89 	bl	f298 <console_out>
        c = *pos;
    f386:	7823      	ldrb	r3, [r4, #0]
        *(pos++) = tmp;
    f388:	4620      	mov	r0, r4
    f38a:	f800 7b01 	strb.w	r7, [r0], #1
        tmp = c;
    f38e:	461f      	mov	r7, r3
    while (end-- > 0) {
    f390:	4635      	mov	r5, r6
        *(pos++) = tmp;
    f392:	4604      	mov	r4, r0
    while (end-- > 0) {
    f394:	1e6b      	subs	r3, r5, #1
    f396:	b29e      	uxth	r6, r3
    f398:	2d00      	cmp	r5, #0
    f39a:	d1f1      	bne.n	f380 <insert_char+0x48>
    console_out(ESC);
    f39c:	201b      	movs	r0, #27
    f39e:	f7ff ff7b 	bl	f298 <console_out>
    console_out('[');
    f3a2:	205b      	movs	r0, #91	; 0x5b
    f3a4:	f7ff ff78 	bl	f298 <console_out>
    console_out('u');
    f3a8:	2075      	movs	r0, #117	; 0x75
    f3aa:	f7ff ff75 	bl	f298 <console_out>
}
    f3ae:	e7d5      	b.n	f35c <insert_char+0x24>
    f3b0:	200040dc 	.word	0x200040dc
    f3b4:	2000060c 	.word	0x2000060c

0000f3b8 <console_hist_move>:
{
    f3b8:	b538      	push	{r3, r4, r5, lr}
    f3ba:	4605      	mov	r5, r0
    uint8_t limit = direction ==  ANSI_UP ? sh->tail : sh->head;
    f3bc:	2941      	cmp	r1, #65	; 0x41
    f3be:	d014      	beq.n	f3ea <console_hist_move+0x32>
    f3c0:	4b15      	ldr	r3, [pc, #84]	; (f418 <console_hist_move+0x60>)
    f3c2:	781b      	ldrb	r3, [r3, #0]
    if (sh->curr == limit) {
    f3c4:	4a14      	ldr	r2, [pc, #80]	; (f418 <console_hist_move+0x60>)
    f3c6:	78d0      	ldrb	r0, [r2, #3]
    f3c8:	4298      	cmp	r0, r3
    f3ca:	d023      	beq.n	f414 <console_hist_move+0x5c>
    if (direction == ANSI_UP) {
    f3cc:	2941      	cmp	r1, #65	; 0x41
    f3ce:	d00f      	beq.n	f3f0 <console_hist_move+0x38>
        sh->curr = ring_buf_next(sh->curr, sh->size);
    f3d0:	4c11      	ldr	r4, [pc, #68]	; (f418 <console_hist_move+0x60>)
    f3d2:	78a1      	ldrb	r1, [r4, #2]
    f3d4:	f7ff fe0a 	bl	efec <ring_buf_next>
    f3d8:	70e0      	strb	r0, [r4, #3]
    console_clear_line();
    f3da:	f7ff ff8f 	bl	f2fc <console_clear_line>
    str = sh->lines[sh->curr];
    f3de:	4b0e      	ldr	r3, [pc, #56]	; (f418 <console_hist_move+0x60>)
    f3e0:	78da      	ldrb	r2, [r3, #3]
    f3e2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    f3e6:	685c      	ldr	r4, [r3, #4]
    while (str && *str != '\0') {
    f3e8:	e010      	b.n	f40c <console_hist_move+0x54>
    uint8_t limit = direction ==  ANSI_UP ? sh->tail : sh->head;
    f3ea:	4b0b      	ldr	r3, [pc, #44]	; (f418 <console_hist_move+0x60>)
    f3ec:	785b      	ldrb	r3, [r3, #1]
    f3ee:	e7e9      	b.n	f3c4 <console_hist_move+0xc>
        sh->curr = ring_buf_prev(sh->curr, sh->size);
    f3f0:	4614      	mov	r4, r2
    f3f2:	7891      	ldrb	r1, [r2, #2]
    f3f4:	f7ff fe01 	bl	effa <ring_buf_prev>
    f3f8:	70e0      	strb	r0, [r4, #3]
    f3fa:	e7ee      	b.n	f3da <console_hist_move+0x22>
        insert_char(&line[cur], *str, end);
    f3fc:	4b07      	ldr	r3, [pc, #28]	; (f41c <console_hist_move+0x64>)
    f3fe:	8818      	ldrh	r0, [r3, #0]
    f400:	4b07      	ldr	r3, [pc, #28]	; (f420 <console_hist_move+0x68>)
    f402:	881a      	ldrh	r2, [r3, #0]
    f404:	4428      	add	r0, r5
    f406:	f7ff ff97 	bl	f338 <insert_char>
        ++str;
    f40a:	3401      	adds	r4, #1
    while (str && *str != '\0') {
    f40c:	b114      	cbz	r4, f414 <console_hist_move+0x5c>
    f40e:	7821      	ldrb	r1, [r4, #0]
    f410:	2900      	cmp	r1, #0
    f412:	d1f3      	bne.n	f3fc <console_hist_move+0x44>
}
    f414:	bd38      	pop	{r3, r4, r5, pc}
    f416:	bf00      	nop
    f418:	200038a4 	.word	0x200038a4
    f41c:	200040dc 	.word	0x200040dc
    f420:	200040de 	.word	0x200040de

0000f424 <del_char>:
{
    f424:	b570      	push	{r4, r5, r6, lr}
    f426:	4606      	mov	r6, r0
    f428:	460d      	mov	r5, r1
    console_out('\b');
    f42a:	2008      	movs	r0, #8
    f42c:	f7ff ff34 	bl	f298 <console_out>
    if (end == 0) {
    f430:	b14d      	cbz	r5, f446 <del_char+0x22>
    console_out(ESC);
    f432:	201b      	movs	r0, #27
    f434:	f7ff ff30 	bl	f298 <console_out>
    console_out('[');
    f438:	205b      	movs	r0, #91	; 0x5b
    f43a:	f7ff ff2d 	bl	f298 <console_out>
    console_out('s');
    f43e:	2073      	movs	r0, #115	; 0x73
    f440:	f7ff ff2a 	bl	f298 <console_out>
}
    f444:	e00c      	b.n	f460 <del_char+0x3c>
        console_out(' ');
    f446:	2020      	movs	r0, #32
    f448:	f7ff ff26 	bl	f298 <console_out>
        console_out('\b');
    f44c:	2008      	movs	r0, #8
    f44e:	f7ff ff23 	bl	f298 <console_out>
        return;
    f452:	e015      	b.n	f480 <del_char+0x5c>
        *pos = *(pos + 1);
    f454:	7870      	ldrb	r0, [r6, #1]
    f456:	f806 0b01 	strb.w	r0, [r6], #1
        console_out(*(pos++));
    f45a:	f7ff ff1d 	bl	f298 <console_out>
    while (end-- > 0) {
    f45e:	4625      	mov	r5, r4
    f460:	1e6b      	subs	r3, r5, #1
    f462:	b29c      	uxth	r4, r3
    f464:	2d00      	cmp	r5, #0
    f466:	d1f5      	bne.n	f454 <del_char+0x30>
    console_out(' ');
    f468:	2020      	movs	r0, #32
    f46a:	f7ff ff15 	bl	f298 <console_out>
    console_out(ESC);
    f46e:	201b      	movs	r0, #27
    f470:	f7ff ff12 	bl	f298 <console_out>
    console_out('[');
    f474:	205b      	movs	r0, #91	; 0x5b
    f476:	f7ff ff0f 	bl	f298 <console_out>
    console_out('u');
    f47a:	2075      	movs	r0, #117	; 0x75
    f47c:	f7ff ff0c 	bl	f298 <console_out>
}
    f480:	bd70      	pop	{r4, r5, r6, pc}
	...

0000f484 <handle_ansi>:
{
    f484:	b510      	push	{r4, lr}
    f486:	460c      	mov	r4, r1
    if (esc_state & ESC_ANSI_FIRST) {
    f488:	4b5d      	ldr	r3, [pc, #372]	; (f600 <handle_ansi+0x17c>)
    f48a:	681b      	ldr	r3, [r3, #0]
    f48c:	f013 0f04 	tst.w	r3, #4
    f490:	d023      	beq.n	f4da <handle_ansi+0x56>
        esc_state &= ~ESC_ANSI_FIRST;
    f492:	f023 0304 	bic.w	r3, r3, #4
    f496:	4a5a      	ldr	r2, [pc, #360]	; (f600 <handle_ansi+0x17c>)
    f498:	6013      	str	r3, [r2, #0]
        if (!isdigit(byte)) {
    f49a:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    f49e:	2a09      	cmp	r2, #9
    f4a0:	d910      	bls.n	f4c4 <handle_ansi+0x40>
            ansi_val = 1;
    f4a2:	4b58      	ldr	r3, [pc, #352]	; (f604 <handle_ansi+0x180>)
    f4a4:	2201      	movs	r2, #1
    f4a6:	601a      	str	r2, [r3, #0]
    switch (byte) {
    f4a8:	2848      	cmp	r0, #72	; 0x48
    f4aa:	d846      	bhi.n	f53a <handle_ansi+0xb6>
    f4ac:	2841      	cmp	r0, #65	; 0x41
    f4ae:	d35c      	bcc.n	f56a <handle_ansi+0xe6>
    f4b0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
    f4b4:	2b07      	cmp	r3, #7
    f4b6:	d858      	bhi.n	f56a <handle_ansi+0xe6>
    f4b8:	e8df f003 	tbb	[pc, r3]
    f4bc:	5d6f5353 	.word	0x5d6f5353
    f4c0:	81579157 	.word	0x81579157
        esc_state |= ESC_ANSI_VAL;
    f4c4:	f043 0308 	orr.w	r3, r3, #8
    f4c8:	4a4d      	ldr	r2, [pc, #308]	; (f600 <handle_ansi+0x17c>)
    f4ca:	6013      	str	r3, [r2, #0]
        ansi_val = byte - '0';
    f4cc:	3830      	subs	r0, #48	; 0x30
    f4ce:	4b4d      	ldr	r3, [pc, #308]	; (f604 <handle_ansi+0x180>)
    f4d0:	6018      	str	r0, [r3, #0]
        ansi_val_2 = 0;
    f4d2:	4b4d      	ldr	r3, [pc, #308]	; (f608 <handle_ansi+0x184>)
    f4d4:	2200      	movs	r2, #0
    f4d6:	601a      	str	r2, [r3, #0]
        return;
    f4d8:	e04c      	b.n	f574 <handle_ansi+0xf0>
    if (esc_state & ESC_ANSI_VAL) {
    f4da:	f013 0f08 	tst.w	r3, #8
    f4de:	d0e3      	beq.n	f4a8 <handle_ansi+0x24>
        if (isdigit(byte)) {
    f4e0:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    f4e4:	2a09      	cmp	r2, #9
    f4e6:	d909      	bls.n	f4fc <handle_ansi+0x78>
        if (byte == ';' && !(esc_state & ESC_ANSI_VAL_2)) {
    f4e8:	283b      	cmp	r0, #59	; 0x3b
    f4ea:	d01e      	beq.n	f52a <handle_ansi+0xa6>
        esc_state &= ~ESC_ANSI_VAL;
    f4ec:	f023 0108 	bic.w	r1, r3, #8
    f4f0:	4a43      	ldr	r2, [pc, #268]	; (f600 <handle_ansi+0x17c>)
    f4f2:	6011      	str	r1, [r2, #0]
        esc_state &= ~ESC_ANSI_VAL_2;
    f4f4:	f023 0318 	bic.w	r3, r3, #24
    f4f8:	6013      	str	r3, [r2, #0]
    f4fa:	e7d5      	b.n	f4a8 <handle_ansi+0x24>
            if (esc_state & ESC_ANSI_VAL_2) {
    f4fc:	f013 0f10 	tst.w	r3, #16
    f500:	d009      	beq.n	f516 <handle_ansi+0x92>
                ansi_val_2 *= 10;
    f502:	4a41      	ldr	r2, [pc, #260]	; (f608 <handle_ansi+0x184>)
    f504:	6813      	ldr	r3, [r2, #0]
    f506:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    f50a:	005b      	lsls	r3, r3, #1
    f50c:	6013      	str	r3, [r2, #0]
                ansi_val_2 += byte - '0';
    f50e:	4403      	add	r3, r0
    f510:	3b30      	subs	r3, #48	; 0x30
    f512:	6013      	str	r3, [r2, #0]
    f514:	e02e      	b.n	f574 <handle_ansi+0xf0>
                ansi_val *= 10;
    f516:	4a3b      	ldr	r2, [pc, #236]	; (f604 <handle_ansi+0x180>)
    f518:	6813      	ldr	r3, [r2, #0]
    f51a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    f51e:	005b      	lsls	r3, r3, #1
    f520:	6013      	str	r3, [r2, #0]
                ansi_val += byte - '0';
    f522:	4403      	add	r3, r0
    f524:	3b30      	subs	r3, #48	; 0x30
    f526:	6013      	str	r3, [r2, #0]
            return;
    f528:	e024      	b.n	f574 <handle_ansi+0xf0>
        if (byte == ';' && !(esc_state & ESC_ANSI_VAL_2)) {
    f52a:	f013 0f10 	tst.w	r3, #16
    f52e:	d1dd      	bne.n	f4ec <handle_ansi+0x68>
            esc_state |= ESC_ANSI_VAL_2;
    f530:	f043 0310 	orr.w	r3, r3, #16
    f534:	4a32      	ldr	r2, [pc, #200]	; (f600 <handle_ansi+0x17c>)
    f536:	6013      	str	r3, [r2, #0]
            return;
    f538:	e01c      	b.n	f574 <handle_ansi+0xf0>
    switch (byte) {
    f53a:	287e      	cmp	r0, #126	; 0x7e
    f53c:	d115      	bne.n	f56a <handle_ansi+0xe6>
        if (!end) {
    f53e:	4b33      	ldr	r3, [pc, #204]	; (f60c <handle_ansi+0x188>)
    f540:	881b      	ldrh	r3, [r3, #0]
    f542:	b193      	cbz	r3, f56a <handle_ansi+0xe6>
    console_printf("\x1b[%uC", count);
    f544:	2101      	movs	r1, #1
    f546:	4832      	ldr	r0, [pc, #200]	; (f610 <handle_ansi+0x18c>)
    f548:	f000 fa90 	bl	fa6c <console_printf>
        del_char(&line[cur], --end);
    f54c:	4b31      	ldr	r3, [pc, #196]	; (f614 <handle_ansi+0x190>)
    f54e:	8818      	ldrh	r0, [r3, #0]
    f550:	4b2e      	ldr	r3, [pc, #184]	; (f60c <handle_ansi+0x188>)
    f552:	8819      	ldrh	r1, [r3, #0]
    f554:	3901      	subs	r1, #1
    f556:	b289      	uxth	r1, r1
    f558:	8019      	strh	r1, [r3, #0]
    f55a:	4420      	add	r0, r4
    f55c:	f7ff ff62 	bl	f424 <del_char>
        break;
    f560:	e003      	b.n	f56a <handle_ansi+0xe6>
        console_hist_move(line, byte);
    f562:	4601      	mov	r1, r0
    f564:	4620      	mov	r0, r4
    f566:	f7ff ff27 	bl	f3b8 <console_hist_move>
    esc_state &= ~ESC_ANSI;
    f56a:	4a25      	ldr	r2, [pc, #148]	; (f600 <handle_ansi+0x17c>)
    f56c:	6813      	ldr	r3, [r2, #0]
    f56e:	f023 0302 	bic.w	r3, r3, #2
    f572:	6013      	str	r3, [r2, #0]
}
    f574:	bd10      	pop	{r4, pc}
        if (ansi_val > cur) {
    f576:	4b27      	ldr	r3, [pc, #156]	; (f614 <handle_ansi+0x190>)
    f578:	881b      	ldrh	r3, [r3, #0]
    f57a:	4a22      	ldr	r2, [pc, #136]	; (f604 <handle_ansi+0x180>)
    f57c:	6811      	ldr	r1, [r2, #0]
    f57e:	428b      	cmp	r3, r1
    f580:	d3f3      	bcc.n	f56a <handle_ansi+0xe6>
        end += ansi_val;
    f582:	b288      	uxth	r0, r1
    f584:	4c21      	ldr	r4, [pc, #132]	; (f60c <handle_ansi+0x188>)
    f586:	8822      	ldrh	r2, [r4, #0]
    f588:	4402      	add	r2, r0
    f58a:	8022      	strh	r2, [r4, #0]
        cur -= ansi_val;
    f58c:	1a1b      	subs	r3, r3, r0
    f58e:	4a21      	ldr	r2, [pc, #132]	; (f614 <handle_ansi+0x190>)
    f590:	8013      	strh	r3, [r2, #0]
    console_printf("\x1b[%uD", count);
    f592:	4821      	ldr	r0, [pc, #132]	; (f618 <handle_ansi+0x194>)
    f594:	f000 fa6a 	bl	fa6c <console_printf>
}
    f598:	e7e7      	b.n	f56a <handle_ansi+0xe6>
        if (ansi_val > end) {
    f59a:	4b1c      	ldr	r3, [pc, #112]	; (f60c <handle_ansi+0x188>)
    f59c:	881b      	ldrh	r3, [r3, #0]
    f59e:	4a19      	ldr	r2, [pc, #100]	; (f604 <handle_ansi+0x180>)
    f5a0:	6811      	ldr	r1, [r2, #0]
    f5a2:	428b      	cmp	r3, r1
    f5a4:	d3e1      	bcc.n	f56a <handle_ansi+0xe6>
        end -= ansi_val;
    f5a6:	b28a      	uxth	r2, r1
    f5a8:	1a9b      	subs	r3, r3, r2
    f5aa:	4818      	ldr	r0, [pc, #96]	; (f60c <handle_ansi+0x188>)
    f5ac:	8003      	strh	r3, [r0, #0]
        cur += ansi_val;
    f5ae:	4b19      	ldr	r3, [pc, #100]	; (f614 <handle_ansi+0x190>)
    f5b0:	8818      	ldrh	r0, [r3, #0]
    f5b2:	4402      	add	r2, r0
    f5b4:	801a      	strh	r2, [r3, #0]
    console_printf("\x1b[%uC", count);
    f5b6:	4816      	ldr	r0, [pc, #88]	; (f610 <handle_ansi+0x18c>)
    f5b8:	f000 fa58 	bl	fa6c <console_printf>
}
    f5bc:	e7d5      	b.n	f56a <handle_ansi+0xe6>
        if (!cur) {
    f5be:	4b15      	ldr	r3, [pc, #84]	; (f614 <handle_ansi+0x190>)
    f5c0:	8819      	ldrh	r1, [r3, #0]
    f5c2:	2900      	cmp	r1, #0
    f5c4:	d0d1      	beq.n	f56a <handle_ansi+0xe6>
    console_printf("\x1b[%uD", count);
    f5c6:	4814      	ldr	r0, [pc, #80]	; (f618 <handle_ansi+0x194>)
    f5c8:	f000 fa50 	bl	fa6c <console_printf>
        end += cur;
    f5cc:	490f      	ldr	r1, [pc, #60]	; (f60c <handle_ansi+0x188>)
    f5ce:	4a11      	ldr	r2, [pc, #68]	; (f614 <handle_ansi+0x190>)
    f5d0:	880b      	ldrh	r3, [r1, #0]
    f5d2:	8810      	ldrh	r0, [r2, #0]
    f5d4:	4403      	add	r3, r0
    f5d6:	800b      	strh	r3, [r1, #0]
        cur = 0;
    f5d8:	2300      	movs	r3, #0
    f5da:	8013      	strh	r3, [r2, #0]
        break;
    f5dc:	e7c5      	b.n	f56a <handle_ansi+0xe6>
        if (!end) {
    f5de:	4b0b      	ldr	r3, [pc, #44]	; (f60c <handle_ansi+0x188>)
    f5e0:	8819      	ldrh	r1, [r3, #0]
    f5e2:	2900      	cmp	r1, #0
    f5e4:	d0c1      	beq.n	f56a <handle_ansi+0xe6>
    console_printf("\x1b[%uC", count);
    f5e6:	480a      	ldr	r0, [pc, #40]	; (f610 <handle_ansi+0x18c>)
    f5e8:	f000 fa40 	bl	fa6c <console_printf>
        cur += end;
    f5ec:	4909      	ldr	r1, [pc, #36]	; (f614 <handle_ansi+0x190>)
    f5ee:	4a07      	ldr	r2, [pc, #28]	; (f60c <handle_ansi+0x188>)
    f5f0:	880b      	ldrh	r3, [r1, #0]
    f5f2:	8810      	ldrh	r0, [r2, #0]
    f5f4:	4403      	add	r3, r0
    f5f6:	800b      	strh	r3, [r1, #0]
        end = 0;
    f5f8:	2300      	movs	r3, #0
    f5fa:	8013      	strh	r3, [r2, #0]
        break;
    f5fc:	e7b5      	b.n	f56a <handle_ansi+0xe6>
    f5fe:	bf00      	nop
    f600:	200040e0 	.word	0x200040e0
    f604:	20003884 	.word	0x20003884
    f608:	20003888 	.word	0x20003888
    f60c:	200040de 	.word	0x200040de
    f610:	00023454 	.word	0x00023454
    f614:	200040dc 	.word	0x200040dc
    f618:	0002344c 	.word	0x0002344c

0000f61c <console_write>:
{
    f61c:	b570      	push	{r4, r5, r6, lr}
    f61e:	4606      	mov	r6, r0
    f620:	460d      	mov	r5, r1
    if (console_lock(timeout) != OS_OK) {
    f622:	2080      	movs	r0, #128	; 0x80
    f624:	f7ff fe04 	bl	f230 <console_lock>
    f628:	bb88      	cbnz	r0, f68e <console_write+0x72>
    f62a:	4604      	mov	r4, r0
    if (cnt >= 2 && str[0] == CONSOLE_NLIP_DATA_START1 &&
    f62c:	2d01      	cmp	r5, #1
    f62e:	dd02      	ble.n	f636 <console_write+0x1a>
    f630:	7833      	ldrb	r3, [r6, #0]
    f632:	2b04      	cmp	r3, #4
    f634:	d014      	beq.n	f660 <console_write+0x44>
    if (cnt >= 3 && str[1] == CONSOLE_NLIP_PKT_START1 &&
    f636:	2d02      	cmp	r5, #2
    f638:	dd02      	ble.n	f640 <console_write+0x24>
    f63a:	7873      	ldrb	r3, [r6, #1]
    f63c:	2b06      	cmp	r3, #6
    f63e:	d016      	beq.n	f66e <console_write+0x52>
    if (!g_is_output_nlip && g_console_silence_non_nlip) {
    f640:	4b15      	ldr	r3, [pc, #84]	; (f698 <console_write+0x7c>)
    f642:	781b      	ldrb	r3, [r3, #0]
    f644:	b913      	cbnz	r3, f64c <console_write+0x30>
    f646:	4b15      	ldr	r3, [pc, #84]	; (f69c <console_write+0x80>)
    f648:	781b      	ldrb	r3, [r3, #0]
    f64a:	b9bb      	cbnz	r3, f67c <console_write+0x60>
    for (i = 0; i < cnt; i++) {
    f64c:	42ac      	cmp	r4, r5
    f64e:	da15      	bge.n	f67c <console_write+0x60>
        if (console_out_nolock((int)str[i]) == EOF) {
    f650:	5d30      	ldrb	r0, [r6, r4]
    f652:	f000 fa85 	bl	fb60 <console_out_nolock>
    f656:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    f65a:	d00f      	beq.n	f67c <console_write+0x60>
    for (i = 0; i < cnt; i++) {
    f65c:	3401      	adds	r4, #1
    f65e:	e7f5      	b.n	f64c <console_write+0x30>
        str[1] == CONSOLE_NLIP_DATA_START2) {
    f660:	7873      	ldrb	r3, [r6, #1]
    if (cnt >= 2 && str[0] == CONSOLE_NLIP_DATA_START1 &&
    f662:	2b14      	cmp	r3, #20
    f664:	d1e7      	bne.n	f636 <console_write+0x1a>
        g_is_output_nlip = 1;
    f666:	4b0c      	ldr	r3, [pc, #48]	; (f698 <console_write+0x7c>)
    f668:	2201      	movs	r2, #1
    f66a:	701a      	strb	r2, [r3, #0]
    f66c:	e7e3      	b.n	f636 <console_write+0x1a>
        str[2] == CONSOLE_NLIP_PKT_START2) {
    f66e:	78b3      	ldrb	r3, [r6, #2]
    if (cnt >= 3 && str[1] == CONSOLE_NLIP_PKT_START1 &&
    f670:	2b09      	cmp	r3, #9
    f672:	d1e5      	bne.n	f640 <console_write+0x24>
        g_is_output_nlip = 1;
    f674:	4b08      	ldr	r3, [pc, #32]	; (f698 <console_write+0x7c>)
    f676:	2201      	movs	r2, #1
    f678:	701a      	strb	r2, [r3, #0]
    f67a:	e7e1      	b.n	f640 <console_write+0x24>
    if (cnt > 0 && str[cnt - 1] == '\n') {
    f67c:	2d00      	cmp	r5, #0
    f67e:	dd04      	ble.n	f68a <console_write+0x6e>
    f680:	4435      	add	r5, r6
    f682:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    f686:	2b0a      	cmp	r3, #10
    f688:	d002      	beq.n	f690 <console_write+0x74>
    (void)console_unlock();
    f68a:	f7ff fdeb 	bl	f264 <console_unlock>
}
    f68e:	bd70      	pop	{r4, r5, r6, pc}
        g_is_output_nlip = 0;
    f690:	4b01      	ldr	r3, [pc, #4]	; (f698 <console_write+0x7c>)
    f692:	2200      	movs	r2, #0
    f694:	701a      	strb	r2, [r3, #0]
    f696:	e7f8      	b.n	f68a <console_write+0x6e>
    f698:	200040eb 	.word	0x200040eb
    f69c:	200040ea 	.word	0x200040ea

0000f6a0 <console_blocking_mode>:
}
    f6a0:	4770      	bx	lr
	...

0000f6a4 <console_handle_char>:


int
console_handle_char(uint8_t byte)
{
    f6a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#endif
    static struct os_event *ev;
    static struct console_input *input;
    static char prev_endl = '\0';

    if (!lines_queue) {
    f6a8:	4b8a      	ldr	r3, [pc, #552]	; (f8d4 <console_handle_char+0x230>)
    f6aa:	681b      	ldr	r3, [r3, #0]
    f6ac:	2b00      	cmp	r3, #0
    f6ae:	f000 8161 	beq.w	f974 <console_handle_char+0x2d0>
    f6b2:	4604      	mov	r4, r0
        return 0;
    }

    if (!ev) {
    f6b4:	4b88      	ldr	r3, [pc, #544]	; (f8d8 <console_handle_char+0x234>)
    f6b6:	681b      	ldr	r3, [r3, #0]
    f6b8:	b1cb      	cbz	r3, f6ee <console_handle_char+0x4a>
            return -1;
        }
        input = ev->ev_arg;
    }

    if (handle_nlip(byte))  {
    f6ba:	4620      	mov	r0, r4
    f6bc:	f7ff fcb2 	bl	f024 <handle_nlip>
    f6c0:	4605      	mov	r5, r0
    f6c2:	2800      	cmp	r0, #0
    f6c4:	d064      	beq.n	f790 <console_handle_char+0xec>
        if (byte == '\n') {
    f6c6:	2c0a      	cmp	r4, #10
    f6c8:	d021      	beq.n	f70e <console_handle_char+0x6a>
            input = NULL;
            ev = NULL;
            console_echo(1);
            return 0;
        /* Ignore characters if there's no more buffer space */
        } else if (byte == CONSOLE_NLIP_PKT_START2) {
    f6ca:	2c09      	cmp	r4, #9
    f6cc:	d044      	beq.n	f758 <console_handle_char+0xb4>
            /* Disable echo to not flood the UART */
            console_echo(0);
            insert_char(&input->line[cur], CONSOLE_NLIP_PKT_START1, end);
        } else if (byte == CONSOLE_NLIP_DATA_START2) {
    f6ce:	2c14      	cmp	r4, #20
    f6d0:	d050      	beq.n	f774 <console_handle_char+0xd0>
            /* Disable echo to not flood the UART */
            console_echo(0);
            insert_char(&input->line[cur], CONSOLE_NLIP_DATA_START1, end);
        }

        insert_char(&input->line[cur], byte, end);
    f6d2:	4b82      	ldr	r3, [pc, #520]	; (f8dc <console_handle_char+0x238>)
    f6d4:	6818      	ldr	r0, [r3, #0]
    f6d6:	4b82      	ldr	r3, [pc, #520]	; (f8e0 <console_handle_char+0x23c>)
    f6d8:	881b      	ldrh	r3, [r3, #0]
    f6da:	4a82      	ldr	r2, [pc, #520]	; (f8e4 <console_handle_char+0x240>)
    f6dc:	8812      	ldrh	r2, [r2, #0]
    f6de:	4621      	mov	r1, r4
    f6e0:	4418      	add	r0, r3
    f6e2:	f7ff fe29 	bl	f338 <insert_char>

        return 0;
    f6e6:	2500      	movs	r5, #0

    if (!g_console_ignore_non_nlip) {
        insert_char(&input->line[cur], byte, end);
    }
    return 0;
}
    f6e8:	4628      	mov	r0, r5
    f6ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ev = os_eventq_get_no_wait(&avail_queue);
    f6ee:	487e      	ldr	r0, [pc, #504]	; (f8e8 <console_handle_char+0x244>)
    f6f0:	f7f9 ffa0 	bl	9634 <os_eventq_get_no_wait>
    f6f4:	4b78      	ldr	r3, [pc, #480]	; (f8d8 <console_handle_char+0x234>)
    f6f6:	6018      	str	r0, [r3, #0]
        if (!ev) {
    f6f8:	b118      	cbz	r0, f702 <console_handle_char+0x5e>
        input = ev->ev_arg;
    f6fa:	6882      	ldr	r2, [r0, #8]
    f6fc:	4b77      	ldr	r3, [pc, #476]	; (f8dc <console_handle_char+0x238>)
    f6fe:	601a      	str	r2, [r3, #0]
    f700:	e7db      	b.n	f6ba <console_handle_char+0x16>
            rx_stalled = true;
    f702:	4b7a      	ldr	r3, [pc, #488]	; (f8ec <console_handle_char+0x248>)
    f704:	2201      	movs	r2, #1
    f706:	701a      	strb	r2, [r3, #0]
            return -1;
    f708:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    f70c:	e7ec      	b.n	f6e8 <console_handle_char+0x44>
            insert_char(&input->line[cur], byte, end);
    f70e:	4f73      	ldr	r7, [pc, #460]	; (f8dc <console_handle_char+0x238>)
    f710:	6838      	ldr	r0, [r7, #0]
    f712:	4d73      	ldr	r5, [pc, #460]	; (f8e0 <console_handle_char+0x23c>)
    f714:	882b      	ldrh	r3, [r5, #0]
    f716:	4e73      	ldr	r6, [pc, #460]	; (f8e4 <console_handle_char+0x240>)
    f718:	8832      	ldrh	r2, [r6, #0]
    f71a:	4621      	mov	r1, r4
    f71c:	4418      	add	r0, r3
    f71e:	f7ff fe0b 	bl	f338 <insert_char>
            input->line[cur] = '\0';
    f722:	683a      	ldr	r2, [r7, #0]
    f724:	882b      	ldrh	r3, [r5, #0]
    f726:	2400      	movs	r4, #0
    f728:	54d4      	strb	r4, [r2, r3]
            cur = 0;
    f72a:	802c      	strh	r4, [r5, #0]
            end = 0;
    f72c:	8034      	strh	r4, [r6, #0]
            os_eventq_put(lines_queue, ev);
    f72e:	4b6a      	ldr	r3, [pc, #424]	; (f8d8 <console_handle_char+0x234>)
    f730:	6819      	ldr	r1, [r3, #0]
    f732:	4b68      	ldr	r3, [pc, #416]	; (f8d4 <console_handle_char+0x230>)
    f734:	6818      	ldr	r0, [r3, #0]
    f736:	f7f9 ff49 	bl	95cc <os_eventq_put>
            nlip_state = 0;
    f73a:	4b6d      	ldr	r3, [pc, #436]	; (f8f0 <console_handle_char+0x24c>)
    f73c:	601c      	str	r4, [r3, #0]
            if (console_compat_rx_cb) {
    f73e:	4b6d      	ldr	r3, [pc, #436]	; (f8f4 <console_handle_char+0x250>)
    f740:	681b      	ldr	r3, [r3, #0]
    f742:	b103      	cbz	r3, f746 <console_handle_char+0xa2>
                console_compat_rx_cb();
    f744:	4798      	blx	r3
            input = NULL;
    f746:	2500      	movs	r5, #0
    f748:	4b64      	ldr	r3, [pc, #400]	; (f8dc <console_handle_char+0x238>)
    f74a:	601d      	str	r5, [r3, #0]
            ev = NULL;
    f74c:	4b62      	ldr	r3, [pc, #392]	; (f8d8 <console_handle_char+0x234>)
    f74e:	601d      	str	r5, [r3, #0]
            console_echo(1);
    f750:	2001      	movs	r0, #1
    f752:	f7ff fd67 	bl	f224 <console_echo>
            return 0;
    f756:	e7c7      	b.n	f6e8 <console_handle_char+0x44>
            console_echo(0);
    f758:	2000      	movs	r0, #0
    f75a:	f7ff fd63 	bl	f224 <console_echo>
            insert_char(&input->line[cur], CONSOLE_NLIP_PKT_START1, end);
    f75e:	4b5f      	ldr	r3, [pc, #380]	; (f8dc <console_handle_char+0x238>)
    f760:	6818      	ldr	r0, [r3, #0]
    f762:	4b5f      	ldr	r3, [pc, #380]	; (f8e0 <console_handle_char+0x23c>)
    f764:	881b      	ldrh	r3, [r3, #0]
    f766:	4a5f      	ldr	r2, [pc, #380]	; (f8e4 <console_handle_char+0x240>)
    f768:	8812      	ldrh	r2, [r2, #0]
    f76a:	2106      	movs	r1, #6
    f76c:	4418      	add	r0, r3
    f76e:	f7ff fde3 	bl	f338 <insert_char>
    f772:	e7ae      	b.n	f6d2 <console_handle_char+0x2e>
            console_echo(0);
    f774:	2000      	movs	r0, #0
    f776:	f7ff fd55 	bl	f224 <console_echo>
            insert_char(&input->line[cur], CONSOLE_NLIP_DATA_START1, end);
    f77a:	4b58      	ldr	r3, [pc, #352]	; (f8dc <console_handle_char+0x238>)
    f77c:	6818      	ldr	r0, [r3, #0]
    f77e:	4b58      	ldr	r3, [pc, #352]	; (f8e0 <console_handle_char+0x23c>)
    f780:	881b      	ldrh	r3, [r3, #0]
    f782:	4a58      	ldr	r2, [pc, #352]	; (f8e4 <console_handle_char+0x240>)
    f784:	8812      	ldrh	r2, [r2, #0]
    f786:	2104      	movs	r1, #4
    f788:	4418      	add	r0, r3
    f78a:	f7ff fdd5 	bl	f338 <insert_char>
    f78e:	e7a0      	b.n	f6d2 <console_handle_char+0x2e>
    if (esc_state & ESC_ANSI) {
    f790:	4b59      	ldr	r3, [pc, #356]	; (f8f8 <console_handle_char+0x254>)
    f792:	681b      	ldr	r3, [r3, #0]
    f794:	f013 0602 	ands.w	r6, r3, #2
    f798:	d009      	beq.n	f7ae <console_handle_char+0x10a>
        if (g_console_ignore_non_nlip) {
    f79a:	4b58      	ldr	r3, [pc, #352]	; (f8fc <console_handle_char+0x258>)
    f79c:	781b      	ldrb	r3, [r3, #0]
    f79e:	2b00      	cmp	r3, #0
    f7a0:	d1a2      	bne.n	f6e8 <console_handle_char+0x44>
        handle_ansi(byte, input->line);
    f7a2:	4b4e      	ldr	r3, [pc, #312]	; (f8dc <console_handle_char+0x238>)
    f7a4:	6819      	ldr	r1, [r3, #0]
    f7a6:	4620      	mov	r0, r4
    f7a8:	f7ff fe6c 	bl	f484 <handle_ansi>
        return 0;
    f7ac:	e79c      	b.n	f6e8 <console_handle_char+0x44>
    if (esc_state & ESC_ESC) {
    f7ae:	f013 0501 	ands.w	r5, r3, #1
    f7b2:	d01a      	beq.n	f7ea <console_handle_char+0x146>
        if (g_console_ignore_non_nlip) {
    f7b4:	4a51      	ldr	r2, [pc, #324]	; (f8fc <console_handle_char+0x258>)
    f7b6:	7812      	ldrb	r2, [r2, #0]
    f7b8:	b10a      	cbz	r2, f7be <console_handle_char+0x11a>
            return 0;
    f7ba:	4635      	mov	r5, r6
    f7bc:	e794      	b.n	f6e8 <console_handle_char+0x44>
        esc_state &= ~ESC_ESC;
    f7be:	f023 0301 	bic.w	r3, r3, #1
    f7c2:	4a4d      	ldr	r2, [pc, #308]	; (f8f8 <console_handle_char+0x254>)
    f7c4:	6013      	str	r3, [r2, #0]
        handle_ansi(byte, input->line);
    f7c6:	4b45      	ldr	r3, [pc, #276]	; (f8dc <console_handle_char+0x238>)
    f7c8:	6819      	ldr	r1, [r3, #0]
    f7ca:	4620      	mov	r0, r4
    f7cc:	f7ff fe5a 	bl	f484 <handle_ansi>
        switch (byte) {
    f7d0:	2c5b      	cmp	r4, #91	; 0x5b
    f7d2:	d001      	beq.n	f7d8 <console_handle_char+0x134>
        return 0;
    f7d4:	4635      	mov	r5, r6
    f7d6:	e787      	b.n	f6e8 <console_handle_char+0x44>
            esc_state |= ESC_ANSI;
    f7d8:	4a47      	ldr	r2, [pc, #284]	; (f8f8 <console_handle_char+0x254>)
    f7da:	6813      	ldr	r3, [r2, #0]
    f7dc:	f043 0102 	orr.w	r1, r3, #2
    f7e0:	6011      	str	r1, [r2, #0]
            esc_state |= ESC_ANSI_FIRST;
    f7e2:	f043 0306 	orr.w	r3, r3, #6
    f7e6:	6013      	str	r3, [r2, #0]
            break;
    f7e8:	e7f4      	b.n	f7d4 <console_handle_char+0x130>
	    (__c >= '{' && __c <= '~');
}

__extern_inline int isprint(int __c)
{
	return (__c >= 0x20 && __c <= 0x7e);
    f7ea:	f1a4 0320 	sub.w	r3, r4, #32
    if (!isprint(byte)) {
    f7ee:	2b5e      	cmp	r3, #94	; 0x5e
    f7f0:	d80f      	bhi.n	f812 <console_handle_char+0x16e>
    if (!g_console_ignore_non_nlip) {
    f7f2:	4b42      	ldr	r3, [pc, #264]	; (f8fc <console_handle_char+0x258>)
    f7f4:	781b      	ldrb	r3, [r3, #0]
    f7f6:	2b00      	cmp	r3, #0
    f7f8:	f47f af76 	bne.w	f6e8 <console_handle_char+0x44>
        insert_char(&input->line[cur], byte, end);
    f7fc:	4b37      	ldr	r3, [pc, #220]	; (f8dc <console_handle_char+0x238>)
    f7fe:	6818      	ldr	r0, [r3, #0]
    f800:	4b37      	ldr	r3, [pc, #220]	; (f8e0 <console_handle_char+0x23c>)
    f802:	881b      	ldrh	r3, [r3, #0]
    f804:	4a37      	ldr	r2, [pc, #220]	; (f8e4 <console_handle_char+0x240>)
    f806:	8812      	ldrh	r2, [r2, #0]
    f808:	4621      	mov	r1, r4
    f80a:	4418      	add	r0, r3
    f80c:	f7ff fd94 	bl	f338 <insert_char>
    f810:	e76a      	b.n	f6e8 <console_handle_char+0x44>
        handle_ansi(byte, input->line);
    f812:	4b32      	ldr	r3, [pc, #200]	; (f8dc <console_handle_char+0x238>)
    f814:	6819      	ldr	r1, [r3, #0]
    f816:	4620      	mov	r0, r4
    f818:	f7ff fe34 	bl	f484 <handle_ansi>
        switch (byte) {
    f81c:	2c1b      	cmp	r4, #27
    f81e:	d812      	bhi.n	f846 <console_handle_char+0x1a2>
    f820:	2c04      	cmp	r4, #4
    f822:	d312      	bcc.n	f84a <console_handle_char+0x1a6>
    f824:	1f23      	subs	r3, r4, #4
    f826:	2b17      	cmp	r3, #23
    f828:	d80f      	bhi.n	f84a <console_handle_char+0x1a6>
    f82a:	e8df f003 	tbb	[pc, r3]
    f82e:	0e4d      	.short	0x0e4d
    f830:	8f6b0e47 	.word	0x8f6b0e47
    f834:	180e0e18 	.word	0x180e0e18
    f838:	0e0e0e0e 	.word	0x0e0e0e0e
    f83c:	0e0e0e0e 	.word	0x0e0e0e0e
    f840:	0e0e0e0e 	.word	0x0e0e0e0e
    f844:	810e      	.short	0x810e
    f846:	2c7f      	cmp	r4, #127	; 0x7f
    f848:	d05c      	beq.n	f904 <console_handle_char+0x260>
            insert_char(&input->line[cur], byte, end);
    f84a:	4b24      	ldr	r3, [pc, #144]	; (f8dc <console_handle_char+0x238>)
    f84c:	6818      	ldr	r0, [r3, #0]
    f84e:	4b24      	ldr	r3, [pc, #144]	; (f8e0 <console_handle_char+0x23c>)
    f850:	881b      	ldrh	r3, [r3, #0]
    f852:	4a24      	ldr	r2, [pc, #144]	; (f8e4 <console_handle_char+0x240>)
    f854:	8812      	ldrh	r2, [r2, #0]
    f856:	4621      	mov	r1, r4
    f858:	4418      	add	r0, r3
    f85a:	f7ff fd6d 	bl	f338 <insert_char>
            if (byte == '\n' && prev_endl == '\r') {
    f85e:	2c0a      	cmp	r4, #10
    f860:	d103      	bne.n	f86a <console_handle_char+0x1c6>
    f862:	4b27      	ldr	r3, [pc, #156]	; (f900 <console_handle_char+0x25c>)
    f864:	781b      	ldrb	r3, [r3, #0]
    f866:	2b0d      	cmp	r3, #13
    f868:	d06d      	beq.n	f946 <console_handle_char+0x2a2>
            prev_endl = byte;
    f86a:	4b25      	ldr	r3, [pc, #148]	; (f900 <console_handle_char+0x25c>)
    f86c:	701c      	strb	r4, [r3, #0]
            input->line[cur + end] = '\0';
    f86e:	4e1b      	ldr	r6, [pc, #108]	; (f8dc <console_handle_char+0x238>)
    f870:	6832      	ldr	r2, [r6, #0]
    f872:	f8df 806c 	ldr.w	r8, [pc, #108]	; f8e0 <console_handle_char+0x23c>
    f876:	f8b8 3000 	ldrh.w	r3, [r8]
    f87a:	4f1a      	ldr	r7, [pc, #104]	; (f8e4 <console_handle_char+0x240>)
    f87c:	8839      	ldrh	r1, [r7, #0]
    f87e:	440b      	add	r3, r1
    f880:	2400      	movs	r4, #0
    f882:	54d4      	strb	r4, [r2, r3]
            console_out('\r');
    f884:	200d      	movs	r0, #13
    f886:	f7ff fd07 	bl	f298 <console_out>
            console_out('\n');
    f88a:	200a      	movs	r0, #10
    f88c:	f7ff fd04 	bl	f298 <console_out>
            cur = 0;
    f890:	f8a8 4000 	strh.w	r4, [r8]
            end = 0;
    f894:	803c      	strh	r4, [r7, #0]
            os_eventq_put(lines_queue, ev);
    f896:	4b10      	ldr	r3, [pc, #64]	; (f8d8 <console_handle_char+0x234>)
    f898:	6819      	ldr	r1, [r3, #0]
    f89a:	4b0e      	ldr	r3, [pc, #56]	; (f8d4 <console_handle_char+0x230>)
    f89c:	6818      	ldr	r0, [r3, #0]
    f89e:	f7f9 fe95 	bl	95cc <os_eventq_put>
            console_hist_add(input->line);
    f8a2:	6830      	ldr	r0, [r6, #0]
    f8a4:	f7ff fc5e 	bl	f164 <console_hist_add>
            if (console_compat_rx_cb) {
    f8a8:	4b12      	ldr	r3, [pc, #72]	; (f8f4 <console_handle_char+0x250>)
    f8aa:	681b      	ldr	r3, [r3, #0]
    f8ac:	b103      	cbz	r3, f8b0 <console_handle_char+0x20c>
                console_compat_rx_cb();
    f8ae:	4798      	blx	r3
            input = NULL;
    f8b0:	2300      	movs	r3, #0
    f8b2:	4a0a      	ldr	r2, [pc, #40]	; (f8dc <console_handle_char+0x238>)
    f8b4:	6013      	str	r3, [r2, #0]
            ev = NULL;
    f8b6:	4a08      	ldr	r2, [pc, #32]	; (f8d8 <console_handle_char+0x234>)
    f8b8:	6013      	str	r3, [r2, #0]
            break;
    f8ba:	e715      	b.n	f6e8 <console_handle_char+0x44>
            nlip_state |= NLIP_PKT_START1;
    f8bc:	4a0c      	ldr	r2, [pc, #48]	; (f8f0 <console_handle_char+0x24c>)
    f8be:	6813      	ldr	r3, [r2, #0]
    f8c0:	f043 0301 	orr.w	r3, r3, #1
    f8c4:	6013      	str	r3, [r2, #0]
            break;
    f8c6:	e70f      	b.n	f6e8 <console_handle_char+0x44>
            nlip_state |= NLIP_DATA_START1;
    f8c8:	4a09      	ldr	r2, [pc, #36]	; (f8f0 <console_handle_char+0x24c>)
    f8ca:	6813      	ldr	r3, [r2, #0]
    f8cc:	f043 0304 	orr.w	r3, r3, #4
    f8d0:	6013      	str	r3, [r2, #0]
            break;
    f8d2:	e709      	b.n	f6e8 <console_handle_char+0x44>
    f8d4:	200040f0 	.word	0x200040f0
    f8d8:	200040e4 	.word	0x200040e4
    f8dc:	200040ec 	.word	0x200040ec
    f8e0:	200040dc 	.word	0x200040dc
    f8e4:	200040de 	.word	0x200040de
    f8e8:	2000388c 	.word	0x2000388c
    f8ec:	200040f9 	.word	0x200040f9
    f8f0:	200040f4 	.word	0x200040f4
    f8f4:	200038a0 	.word	0x200038a0
    f8f8:	200040e0 	.word	0x200040e0
    f8fc:	200040e8 	.word	0x200040e8
    f900:	200040f8 	.word	0x200040f8
            if (g_console_ignore_non_nlip) {
    f904:	4b1c      	ldr	r3, [pc, #112]	; (f978 <console_handle_char+0x2d4>)
    f906:	781b      	ldrb	r3, [r3, #0]
    f908:	2b00      	cmp	r3, #0
    f90a:	f47f aeed 	bne.w	f6e8 <console_handle_char+0x44>
            if (cur > 0) {
    f90e:	4b1b      	ldr	r3, [pc, #108]	; (f97c <console_handle_char+0x2d8>)
    f910:	881b      	ldrh	r3, [r3, #0]
    f912:	2b00      	cmp	r3, #0
    f914:	f43f aee8 	beq.w	f6e8 <console_handle_char+0x44>
                del_char(&input->line[--cur], end);
    f918:	4a19      	ldr	r2, [pc, #100]	; (f980 <console_handle_char+0x2dc>)
    f91a:	6810      	ldr	r0, [r2, #0]
    f91c:	3b01      	subs	r3, #1
    f91e:	b29b      	uxth	r3, r3
    f920:	4a16      	ldr	r2, [pc, #88]	; (f97c <console_handle_char+0x2d8>)
    f922:	8013      	strh	r3, [r2, #0]
    f924:	4a17      	ldr	r2, [pc, #92]	; (f984 <console_handle_char+0x2e0>)
    f926:	8811      	ldrh	r1, [r2, #0]
    f928:	4418      	add	r0, r3
    f92a:	f7ff fd7b 	bl	f424 <del_char>
    f92e:	e6db      	b.n	f6e8 <console_handle_char+0x44>
            if (g_console_ignore_non_nlip) {
    f930:	4b11      	ldr	r3, [pc, #68]	; (f978 <console_handle_char+0x2d4>)
    f932:	781b      	ldrb	r3, [r3, #0]
    f934:	2b00      	cmp	r3, #0
    f936:	f47f aed7 	bne.w	f6e8 <console_handle_char+0x44>
            esc_state |= ESC_ESC;
    f93a:	4a13      	ldr	r2, [pc, #76]	; (f988 <console_handle_char+0x2e4>)
    f93c:	6813      	ldr	r3, [r2, #0]
    f93e:	f043 0301 	orr.w	r3, r3, #1
    f942:	6013      	str	r3, [r2, #0]
            break;
    f944:	e6d0      	b.n	f6e8 <console_handle_char+0x44>
                prev_endl = byte;
    f946:	4b11      	ldr	r3, [pc, #68]	; (f98c <console_handle_char+0x2e8>)
    f948:	701c      	strb	r4, [r3, #0]
                break;
    f94a:	e6cd      	b.n	f6e8 <console_handle_char+0x44>
            if (g_console_ignore_non_nlip) {
    f94c:	4b0a      	ldr	r3, [pc, #40]	; (f978 <console_handle_char+0x2d4>)
    f94e:	781b      	ldrb	r3, [r3, #0]
    f950:	2b00      	cmp	r3, #0
    f952:	f47f aec9 	bne.w	f6e8 <console_handle_char+0x44>
            if (completion && !end) {
    f956:	4b0e      	ldr	r3, [pc, #56]	; (f990 <console_handle_char+0x2ec>)
    f958:	681b      	ldr	r3, [r3, #0]
    f95a:	2b00      	cmp	r3, #0
    f95c:	f43f aec4 	beq.w	f6e8 <console_handle_char+0x44>
    f960:	4a08      	ldr	r2, [pc, #32]	; (f984 <console_handle_char+0x2e0>)
    f962:	8812      	ldrh	r2, [r2, #0]
    f964:	2a00      	cmp	r2, #0
    f966:	f47f aebf 	bne.w	f6e8 <console_handle_char+0x44>
                completion(input->line, console_append_char);
    f96a:	490a      	ldr	r1, [pc, #40]	; (f994 <console_handle_char+0x2f0>)
    f96c:	4a04      	ldr	r2, [pc, #16]	; (f980 <console_handle_char+0x2dc>)
    f96e:	6810      	ldr	r0, [r2, #0]
    f970:	4798      	blx	r3
        return 0;
    f972:	e6b9      	b.n	f6e8 <console_handle_char+0x44>
        return 0;
    f974:	2500      	movs	r5, #0
    f976:	e6b7      	b.n	f6e8 <console_handle_char+0x44>
    f978:	200040e8 	.word	0x200040e8
    f97c:	200040dc 	.word	0x200040dc
    f980:	200040ec 	.word	0x200040ec
    f984:	200040de 	.word	0x200040de
    f988:	200040e0 	.word	0x200040e0
    f98c:	200040f8 	.word	0x200040f8
    f990:	2000389c 	.word	0x2000389c
    f994:	0000f2b9 	.word	0x0000f2b9

0000f998 <console_is_init>:

int
console_is_init(void)
{
    f998:	b508      	push	{r3, lr}
#if MYNEWT_VAL(CONSOLE_UART)
    return uart_console_is_init();
#endif
#if MYNEWT_VAL(CONSOLE_RTT)
    return rtt_console_is_init();
    f99a:	f000 f907 	bl	fbac <rtt_console_is_init>
#endif
#if MYNEWT_VAL(CONSOLE_BLE_MONITOR)
    return ble_monitor_console_is_init();
#endif
    return 0;
}
    f99e:	bd08      	pop	{r3, pc}

0000f9a0 <console_line_queue_set>:

void
console_line_queue_set(struct os_eventq *evq)
{
    lines_queue = evq;
    f9a0:	4b01      	ldr	r3, [pc, #4]	; (f9a8 <console_line_queue_set+0x8>)
    f9a2:	6018      	str	r0, [r3, #0]
}
    f9a4:	4770      	bx	lr
    f9a6:	bf00      	nop
    f9a8:	200040f0 	.word	0x200040f0

0000f9ac <console_line_event_put>:

void
console_line_event_put(struct os_event *ev)
{
    f9ac:	b508      	push	{r3, lr}
    f9ae:	4601      	mov	r1, r0
    os_eventq_put(&avail_queue, ev);
    f9b0:	4806      	ldr	r0, [pc, #24]	; (f9cc <console_line_event_put+0x20>)
    f9b2:	f7f9 fe0b 	bl	95cc <os_eventq_put>

    if (rx_stalled) {
    f9b6:	4b06      	ldr	r3, [pc, #24]	; (f9d0 <console_line_event_put+0x24>)
    f9b8:	781b      	ldrb	r3, [r3, #0]
    f9ba:	b903      	cbnz	r3, f9be <console_line_event_put+0x12>
        rx_stalled = false;
        console_rx_restart();
    }
}
    f9bc:	bd08      	pop	{r3, pc}
        rx_stalled = false;
    f9be:	4b04      	ldr	r3, [pc, #16]	; (f9d0 <console_line_event_put+0x24>)
    f9c0:	2200      	movs	r2, #0
    f9c2:	701a      	strb	r2, [r3, #0]
        console_rx_restart();
    f9c4:	f000 f8ea 	bl	fb9c <console_rx_restart>
}
    f9c8:	e7f8      	b.n	f9bc <console_line_event_put+0x10>
    f9ca:	bf00      	nop
    f9cc:	2000388c 	.word	0x2000388c
    f9d0:	200040f9 	.word	0x200040f9

0000f9d4 <console_set_completion_cb>:

void
console_set_completion_cb(completion_cb cb)
{
    completion = cb;
    f9d4:	4b01      	ldr	r3, [pc, #4]	; (f9dc <console_set_completion_cb+0x8>)
    f9d6:	6018      	str	r0, [r3, #0]
}
    f9d8:	4770      	bx	lr
    f9da:	bf00      	nop
    f9dc:	2000389c 	.word	0x2000389c

0000f9e0 <console_pkg_init>:
}
#endif

void
console_pkg_init(void)
{
    f9e0:	b510      	push	{r4, lr}
    f9e2:	b082      	sub	sp, #8
    int rc = 0;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
    f9e4:	4b0e      	ldr	r3, [pc, #56]	; (fa20 <console_pkg_init+0x40>)
    f9e6:	781b      	ldrb	r3, [r3, #0]
    f9e8:	b1a3      	cbz	r3, fa14 <console_pkg_init+0x34>

    os_eventq_init(&avail_queue);
    f9ea:	480e      	ldr	r0, [pc, #56]	; (fa24 <console_pkg_init+0x44>)
    f9ec:	f7f9 fde0 	bl	95b0 <os_eventq_init>
    os_mutex_init(&console_write_lock);
    f9f0:	480d      	ldr	r0, [pc, #52]	; (fa28 <console_pkg_init+0x48>)
    f9f2:	f7fa ffc3 	bl	a97c <os_mutex_init>

#if MYNEWT_VAL(CONSOLE_HISTORY_SIZE) > 0
    console_hist_init();
    f9f6:	f7ff fbf5 	bl	f1e4 <console_hist_init>

#if MYNEWT_VAL(CONSOLE_UART)
    rc = uart_console_init();
#endif
#if MYNEWT_VAL(CONSOLE_RTT)
    rc = rtt_console_init();
    f9fa:	f000 f8d9 	bl	fbb0 <rtt_console_init>
#endif
    SYSINIT_PANIC_ASSERT(rc == 0);
    f9fe:	b138      	cbz	r0, fa10 <console_pkg_init+0x30>
    fa00:	2000      	movs	r0, #0
    fa02:	9000      	str	r0, [sp, #0]
    fa04:	4b09      	ldr	r3, [pc, #36]	; (fa2c <console_pkg_init+0x4c>)
    fa06:	681c      	ldr	r4, [r3, #0]
    fa08:	4603      	mov	r3, r0
    fa0a:	4602      	mov	r2, r0
    fa0c:	4601      	mov	r1, r0
    fa0e:	47a0      	blx	r4
}
    fa10:	b002      	add	sp, #8
    fa12:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
    fa14:	461a      	mov	r2, r3
    fa16:	4619      	mov	r1, r3
    fa18:	4618      	mov	r0, r3
    fa1a:	f7f9 faa3 	bl	8f64 <__assert_func>
    fa1e:	bf00      	nop
    fa20:	20004538 	.word	0x20004538
    fa24:	2000388c 	.word	0x2000388c
    fa28:	200040d0 	.word	0x200040d0
    fa2c:	2000064c 	.word	0x2000064c

0000fa30 <console_vprintf>:

#if MYNEWT_VAL(BASELIBC_PRESENT)

int
console_vprintf(const char *fmt, va_list ap)
{
    fa30:	b570      	push	{r4, r5, r6, lr}
    fa32:	4604      	mov	r4, r0
    fa34:	460d      	mov	r5, r1
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
    fa36:	f000 f8db 	bl	fbf0 <console_get_ticks>
    fa3a:	b160      	cbz	r0, fa56 <console_vprintf+0x26>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
    fa3c:	4b09      	ldr	r3, [pc, #36]	; (fa64 <console_vprintf+0x34>)
    fa3e:	681b      	ldr	r3, [r3, #0]
    fa40:	b10b      	cbz	r3, fa46 <console_vprintf+0x16>
    num_chars = 0;
    fa42:	2600      	movs	r6, #0
    fa44:	e008      	b.n	fa58 <console_vprintf+0x28>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
    fa46:	f7fa fb7f 	bl	a148 <os_time_get>
    fa4a:	4601      	mov	r1, r0
    fa4c:	4806      	ldr	r0, [pc, #24]	; (fa68 <console_vprintf+0x38>)
    fa4e:	f7fe fc57 	bl	e300 <printf>
    fa52:	4606      	mov	r6, r0
    fa54:	e000      	b.n	fa58 <console_vprintf+0x28>
    num_chars = 0;
    fa56:	2600      	movs	r6, #0
        }
    }

    num_chars += vprintf(fmt, ap);
    fa58:	4629      	mov	r1, r5
    fa5a:	4620      	mov	r0, r4
    fa5c:	f00c fd84 	bl	1c568 <vprintf>

    return num_chars;
}
    fa60:	4430      	add	r0, r6
    fa62:	bd70      	pop	{r4, r5, r6, pc}
    fa64:	200040cc 	.word	0x200040cc
    fa68:	0002345c 	.word	0x0002345c

0000fa6c <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
    fa6c:	b40f      	push	{r0, r1, r2, r3}
    fa6e:	b500      	push	{lr}
    fa70:	b083      	sub	sp, #12
    fa72:	a904      	add	r1, sp, #16
    fa74:	f851 0b04 	ldr.w	r0, [r1], #4
    va_list args;
    int num_chars;

    va_start(args, fmt);
    fa78:	9101      	str	r1, [sp, #4]
    num_chars = console_vprintf(fmt, args);
    fa7a:	f7ff ffd9 	bl	fa30 <console_vprintf>
    va_end(args);

    return num_chars;
}
    fa7e:	b003      	add	sp, #12
    fa80:	f85d eb04 	ldr.w	lr, [sp], #4
    fa84:	b004      	add	sp, #16
    fa86:	4770      	bx	lr

0000fa88 <rtt_console_wait_for_retry>:

#if MYNEWT_VAL(CONSOLE_RTT_RETRY_COUNT) > 0

static void
rtt_console_wait_for_retry(void)
{
    fa88:	b508      	push	{r3, lr}
    fa8a:	4b05      	ldr	r3, [pc, #20]	; (faa0 <rtt_console_wait_for_retry+0x18>)
    fa8c:	685b      	ldr	r3, [r3, #4]
    fa8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    uint32_t ticks;

    if (os_arch_in_isr()) {
    fa92:	b103      	cbz	r3, fa96 <rtt_console_wait_for_retry+0xe>
#endif
    } else {
        ticks = max(1, os_time_ms_to_ticks32(MYNEWT_VAL(CONSOLE_RTT_RETRY_DELAY_MS)));
        os_time_delay(ticks);
    }
}
    fa94:	bd08      	pop	{r3, pc}
        os_time_delay(ticks);
    fa96:	2001      	movs	r0, #1
    fa98:	f7fa fb7e 	bl	a198 <os_time_delay>
}
    fa9c:	e7fa      	b.n	fa94 <rtt_console_wait_for_retry+0xc>
    fa9e:	bf00      	nop
    faa0:	e000ed00 	.word	0xe000ed00

0000faa4 <rtt_console_write_ch>:

static void
rtt_console_write_ch(char c)
{
    faa4:	b530      	push	{r4, r5, lr}
    faa6:	b083      	sub	sp, #12
    faa8:	f88d 0007 	strb.w	r0, [sp, #7]
    faac:	e00a      	b.n	fac4 <rtt_console_write_ch+0x20>
         * read data), we stop retrying until successful write (which means that
         * host is reading data).
         */

        if (ret) {
            rtt_console_retries_left = MYNEWT_VAL(CONSOLE_RTT_RETRY_COUNT);
    faae:	4b0f      	ldr	r3, [pc, #60]	; (faec <rtt_console_write_ch+0x48>)
    fab0:	2202      	movs	r2, #2
    fab2:	601a      	str	r2, [r3, #0]
        }

        rtt_console_wait_for_retry();
        rtt_console_retries_left--;
    }
}
    fab4:	b003      	add	sp, #12
    fab6:	bd30      	pop	{r4, r5, pc}
        rtt_console_wait_for_retry();
    fab8:	f7ff ffe6 	bl	fa88 <rtt_console_wait_for_retry>
        rtt_console_retries_left--;
    fabc:	4a0b      	ldr	r2, [pc, #44]	; (faec <rtt_console_write_ch+0x48>)
    fabe:	6813      	ldr	r3, [r2, #0]
    fac0:	3b01      	subs	r3, #1
    fac2:	6013      	str	r3, [r2, #0]
        OS_ENTER_CRITICAL(sr);
    fac4:	f7fa fc66 	bl	a394 <os_arch_save_sr>
    fac8:	4605      	mov	r5, r0
        ret = SEGGER_RTT_WriteNoLock(0, &c, 1);
    faca:	2201      	movs	r2, #1
    facc:	f10d 0107 	add.w	r1, sp, #7
    fad0:	2000      	movs	r0, #0
    fad2:	f003 ffb1 	bl	13a38 <SEGGER_RTT_WriteNoLock>
    fad6:	4604      	mov	r4, r0
        OS_EXIT_CRITICAL(sr);
    fad8:	4628      	mov	r0, r5
    fada:	f7fa fc61 	bl	a3a0 <os_arch_restore_sr>
        if (ret) {
    fade:	2c00      	cmp	r4, #0
    fae0:	d1e5      	bne.n	faae <rtt_console_write_ch+0xa>
        if (rtt_console_retries_left <= 0) {
    fae2:	4b02      	ldr	r3, [pc, #8]	; (faec <rtt_console_write_ch+0x48>)
    fae4:	681b      	ldr	r3, [r3, #0]
    fae6:	2b00      	cmp	r3, #0
    fae8:	dce6      	bgt.n	fab8 <rtt_console_write_ch+0x14>
    faea:	e7e3      	b.n	fab4 <rtt_console_write_ch+0x10>
    faec:	20000618 	.word	0x20000618

0000faf0 <rtt_console_poll_func>:
#define RTT_INPUT_POLL_INTERVAL_STEP    10 /* ms */
#define RTT_INPUT_POLL_INTERVAL_MAX     MYNEWT_VAL(CONSOLE_RTT_INPUT_POLL_INTERVAL_MAX)

static void
rtt_console_poll_func(void *arg)
{
    faf0:	b508      	push	{r3, lr}
    static uint32_t itvl_ms = RTT_INPUT_POLL_INTERVAL_MIN;
    static int key = -1;
    int ret;

    if (key < 0) {
    faf2:	4b18      	ldr	r3, [pc, #96]	; (fb54 <rtt_console_poll_func+0x64>)
    faf4:	681b      	ldr	r3, [r3, #0]
    faf6:	2b00      	cmp	r3, #0
    faf8:	db11      	blt.n	fb1e <rtt_console_poll_func+0x2e>
        key = SEGGER_RTT_GetKey();
    }

    if (key < 0) {
    fafa:	4b16      	ldr	r3, [pc, #88]	; (fb54 <rtt_console_poll_func+0x64>)
    fafc:	681b      	ldr	r3, [r3, #0]
    fafe:	2b00      	cmp	r3, #0
    fb00:	db12      	blt.n	fb28 <rtt_console_poll_func+0x38>
        itvl_ms += RTT_INPUT_POLL_INTERVAL_STEP;
        itvl_ms = min(itvl_ms, RTT_INPUT_POLL_INTERVAL_MAX);
    } else {
        while (key >= 0) {
    fb02:	4b14      	ldr	r3, [pc, #80]	; (fb54 <rtt_console_poll_func+0x64>)
    fb04:	6818      	ldr	r0, [r3, #0]
    fb06:	2800      	cmp	r0, #0
    fb08:	db20      	blt.n	fb4c <rtt_console_poll_func+0x5c>
            ret = console_handle_char((char)key);
    fb0a:	b2c0      	uxtb	r0, r0
    fb0c:	f7ff fdca 	bl	f6a4 <console_handle_char>
            if (ret < 0) {
    fb10:	2800      	cmp	r0, #0
    fb12:	db1a      	blt.n	fb4a <rtt_console_poll_func+0x5a>
                return;
            }
            key = SEGGER_RTT_GetKey();
    fb14:	f004 f866 	bl	13be4 <SEGGER_RTT_GetKey>
    fb18:	4b0e      	ldr	r3, [pc, #56]	; (fb54 <rtt_console_poll_func+0x64>)
    fb1a:	6018      	str	r0, [r3, #0]
    fb1c:	e7f1      	b.n	fb02 <rtt_console_poll_func+0x12>
        key = SEGGER_RTT_GetKey();
    fb1e:	f004 f861 	bl	13be4 <SEGGER_RTT_GetKey>
    fb22:	4b0c      	ldr	r3, [pc, #48]	; (fb54 <rtt_console_poll_func+0x64>)
    fb24:	6018      	str	r0, [r3, #0]
    fb26:	e7e8      	b.n	fafa <rtt_console_poll_func+0xa>
        itvl_ms += RTT_INPUT_POLL_INTERVAL_STEP;
    fb28:	4a0b      	ldr	r2, [pc, #44]	; (fb58 <rtt_console_poll_func+0x68>)
    fb2a:	6813      	ldr	r3, [r2, #0]
    fb2c:	330a      	adds	r3, #10
    fb2e:	6013      	str	r3, [r2, #0]
        itvl_ms = min(itvl_ms, RTT_INPUT_POLL_INTERVAL_MAX);
    fb30:	2bfa      	cmp	r3, #250	; 0xfa
    fb32:	bf28      	it	cs
    fb34:	23fa      	movcs	r3, #250	; 0xfa
    fb36:	6013      	str	r3, [r2, #0]
        }
        itvl_ms = RTT_INPUT_POLL_INTERVAL_MIN;
    }

    os_cputime_timer_relative(&rtt_timer, itvl_ms * 1000);
    fb38:	4b07      	ldr	r3, [pc, #28]	; (fb58 <rtt_console_poll_func+0x68>)
    fb3a:	681b      	ldr	r3, [r3, #0]
    fb3c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    fb40:	fb03 f101 	mul.w	r1, r3, r1
    fb44:	4805      	ldr	r0, [pc, #20]	; (fb5c <rtt_console_poll_func+0x6c>)
    fb46:	f7f9 fc6d 	bl	9424 <os_cputime_timer_relative>
}
    fb4a:	bd08      	pop	{r3, pc}
        itvl_ms = RTT_INPUT_POLL_INTERVAL_MIN;
    fb4c:	4b02      	ldr	r3, [pc, #8]	; (fb58 <rtt_console_poll_func+0x68>)
    fb4e:	220a      	movs	r2, #10
    fb50:	601a      	str	r2, [r3, #0]
    fb52:	e7f1      	b.n	fb38 <rtt_console_poll_func+0x48>
    fb54:	20000614 	.word	0x20000614
    fb58:	20000610 	.word	0x20000610
    fb5c:	200040fc 	.word	0x200040fc

0000fb60 <console_out_nolock>:
{
    fb60:	b538      	push	{r3, r4, r5, lr}
    char c = (char)character;
    fb62:	b2c5      	uxtb	r5, r0
    if (g_console_silence) {
    fb64:	4b0b      	ldr	r3, [pc, #44]	; (fb94 <console_out_nolock+0x34>)
    fb66:	781b      	ldrb	r3, [r3, #0]
    fb68:	b953      	cbnz	r3, fb80 <console_out_nolock+0x20>
    fb6a:	4604      	mov	r4, r0
    if ('\n' == c) {
    fb6c:	2d0a      	cmp	r5, #10
    fb6e:	d009      	beq.n	fb84 <console_out_nolock+0x24>
        console_is_midline = 1;
    fb70:	4b09      	ldr	r3, [pc, #36]	; (fb98 <console_out_nolock+0x38>)
    fb72:	2201      	movs	r2, #1
    fb74:	601a      	str	r2, [r3, #0]
    rtt_console_write_ch(c);
    fb76:	4628      	mov	r0, r5
    fb78:	f7ff ff94 	bl	faa4 <rtt_console_write_ch>
    return character;
    fb7c:	4620      	mov	r0, r4
}
    fb7e:	bd38      	pop	{r3, r4, r5, pc}
        return c;
    fb80:	4628      	mov	r0, r5
    fb82:	e7fc      	b.n	fb7e <console_out_nolock+0x1e>
        rtt_console_write_ch('\r');
    fb84:	200d      	movs	r0, #13
    fb86:	f7ff ff8d 	bl	faa4 <rtt_console_write_ch>
        console_is_midline = 0;
    fb8a:	4b03      	ldr	r3, [pc, #12]	; (fb98 <console_out_nolock+0x38>)
    fb8c:	2200      	movs	r2, #0
    fb8e:	601a      	str	r2, [r3, #0]
    fb90:	e7f1      	b.n	fb76 <console_out_nolock+0x16>
    fb92:	bf00      	nop
    fb94:	200040e9 	.word	0x200040e9
    fb98:	200040cc 	.word	0x200040cc

0000fb9c <console_rx_restart>:
{
    fb9c:	b508      	push	{r3, lr}
    os_cputime_timer_relative(&rtt_timer, 0);
    fb9e:	2100      	movs	r1, #0
    fba0:	4801      	ldr	r0, [pc, #4]	; (fba8 <console_rx_restart+0xc>)
    fba2:	f7f9 fc3f 	bl	9424 <os_cputime_timer_relative>
}
    fba6:	bd08      	pop	{r3, pc}
    fba8:	200040fc 	.word	0x200040fc

0000fbac <rtt_console_is_init>:

int
rtt_console_is_init(void)
{
    return 1;
}
    fbac:	2001      	movs	r0, #1
    fbae:	4770      	bx	lr

0000fbb0 <rtt_console_init>:

int
rtt_console_init(void)
{
    fbb0:	b510      	push	{r4, lr}
#if MYNEWT_VAL(CONSOLE_INPUT)
    os_cputime_timer_init(&rtt_timer, rtt_console_poll_func, NULL);
    fbb2:	4c06      	ldr	r4, [pc, #24]	; (fbcc <rtt_console_init+0x1c>)
    fbb4:	2200      	movs	r2, #0
    fbb6:	4906      	ldr	r1, [pc, #24]	; (fbd0 <rtt_console_init+0x20>)
    fbb8:	4620      	mov	r0, r4
    fbba:	f7f9 fc17 	bl	93ec <os_cputime_timer_init>
    /* start after a second */
    os_cputime_timer_relative(&rtt_timer, 1000000);
    fbbe:	4905      	ldr	r1, [pc, #20]	; (fbd4 <rtt_console_init+0x24>)
    fbc0:	4620      	mov	r0, r4
    fbc2:	f7f9 fc2f 	bl	9424 <os_cputime_timer_relative>
#endif
    return 0;
}
    fbc6:	2000      	movs	r0, #0
    fbc8:	bd10      	pop	{r4, pc}
    fbca:	bf00      	nop
    fbcc:	200040fc 	.word	0x200040fc
    fbd0:	0000faf1 	.word	0x0000faf1
    fbd4:	000f4240 	.word	0x000f4240

0000fbd8 <console_no_ticks>:

/* Turn OS Ticks off */
void
console_no_ticks(void)
{
    do_ticks = 0;
    fbd8:	4b01      	ldr	r3, [pc, #4]	; (fbe0 <console_no_ticks+0x8>)
    fbda:	2200      	movs	r2, #0
    fbdc:	701a      	strb	r2, [r3, #0]
}
    fbde:	4770      	bx	lr
    fbe0:	2000061c 	.word	0x2000061c

0000fbe4 <console_yes_ticks>:

/* Turn OS Ticks on */
void
console_yes_ticks(void)
{
    do_ticks = 1;
    fbe4:	4b01      	ldr	r3, [pc, #4]	; (fbec <console_yes_ticks+0x8>)
    fbe6:	2201      	movs	r2, #1
    fbe8:	701a      	strb	r2, [r3, #0]
}
    fbea:	4770      	bx	lr
    fbec:	2000061c 	.word	0x2000061c

0000fbf0 <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
    fbf0:	4b01      	ldr	r3, [pc, #4]	; (fbf8 <console_get_ticks+0x8>)
    fbf2:	7818      	ldrb	r0, [r3, #0]
    fbf4:	4770      	bx	lr
    fbf6:	bf00      	nop
    fbf8:	2000061c 	.word	0x2000061c

0000fbfc <get_prompt>:
    console_line_queue_set(shell_evq);
}

static const char *
get_prompt(void)
{
    fbfc:	b508      	push	{r3, lr}
    const char *str;

    if (app_prompt_handler) {
    fbfe:	4b09      	ldr	r3, [pc, #36]	; (fc24 <get_prompt+0x28>)
    fc00:	681b      	ldr	r3, [r3, #0]
    fc02:	b113      	cbz	r3, fc0a <get_prompt+0xe>

        str = app_prompt_handler();
    fc04:	4798      	blx	r3
        if (str) {
    fc06:	b100      	cbz	r0, fc0a <get_prompt+0xe>
    if (default_module != -1) {
        return shell_modules[default_module].name;
    }

    return prompt;
}
    fc08:	bd08      	pop	{r3, pc}
    if (default_module != -1) {
    fc0a:	4b07      	ldr	r3, [pc, #28]	; (fc28 <get_prompt+0x2c>)
    fc0c:	681b      	ldr	r3, [r3, #0]
    fc0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    fc12:	d003      	beq.n	fc1c <get_prompt+0x20>
        return shell_modules[default_module].name;
    fc14:	4a05      	ldr	r2, [pc, #20]	; (fc2c <get_prompt+0x30>)
    fc16:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
    fc1a:	e7f5      	b.n	fc08 <get_prompt+0xc>
    return prompt;
    fc1c:	4b04      	ldr	r3, [pc, #16]	; (fc30 <get_prompt+0x34>)
    fc1e:	6818      	ldr	r0, [r3, #0]
    fc20:	e7f2      	b.n	fc08 <get_prompt+0xc>
    fc22:	bf00      	nop
    fc24:	20004124 	.word	0x20004124
    fc28:	20000620 	.word	0x20000620
    fc2c:	200044ac 	.word	0x200044ac
    fc30:	20004484 	.word	0x20004484

0000fc34 <print_module_commands>:
    }
}

static void
print_module_commands(const int module, struct streamer *streamer)
{
    fc34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fc36:	4606      	mov	r6, r0
    fc38:	460d      	mov	r5, r1
    const struct shell_module *shell_module = &shell_modules[module];
    int i;

    streamer_printf(streamer, "help\n");
    fc3a:	4914      	ldr	r1, [pc, #80]	; (fc8c <print_module_commands+0x58>)
    fc3c:	4628      	mov	r0, r5
    fc3e:	f002 fbd8 	bl	123f2 <streamer_printf>

    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
    fc42:	2400      	movs	r4, #0
    fc44:	e004      	b.n	fc50 <print_module_commands+0x1c>
            shell_module->commands[i].help->summary) {
        
            streamer_printf(streamer, "%s",
                            shell_module->commands[i].help->summary);
        }
        streamer_printf(streamer, "\n");
    fc46:	4912      	ldr	r1, [pc, #72]	; (fc90 <print_module_commands+0x5c>)
    fc48:	4628      	mov	r0, r5
    fc4a:	f002 fbd2 	bl	123f2 <streamer_printf>
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
    fc4e:	3401      	adds	r4, #1
    fc50:	4b10      	ldr	r3, [pc, #64]	; (fc94 <print_module_commands+0x60>)
    fc52:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    fc56:	685b      	ldr	r3, [r3, #4]
    fc58:	0127      	lsls	r7, r4, #4
    fc5a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    fc5e:	689a      	ldr	r2, [r3, #8]
    fc60:	b19a      	cbz	r2, fc8a <print_module_commands+0x56>
        streamer_printf(streamer, "%-30s", shell_module->commands[i].sc_cmd);
    fc62:	490d      	ldr	r1, [pc, #52]	; (fc98 <print_module_commands+0x64>)
    fc64:	4628      	mov	r0, r5
    fc66:	f002 fbc4 	bl	123f2 <streamer_printf>
        if (shell_module->commands[i].help &&
    fc6a:	4b0a      	ldr	r3, [pc, #40]	; (fc94 <print_module_commands+0x60>)
    fc6c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    fc70:	685b      	ldr	r3, [r3, #4]
    fc72:	443b      	add	r3, r7
    fc74:	68db      	ldr	r3, [r3, #12]
    fc76:	2b00      	cmp	r3, #0
    fc78:	d0e5      	beq.n	fc46 <print_module_commands+0x12>
            shell_module->commands[i].help->summary) {
    fc7a:	681a      	ldr	r2, [r3, #0]
        if (shell_module->commands[i].help &&
    fc7c:	2a00      	cmp	r2, #0
    fc7e:	d0e2      	beq.n	fc46 <print_module_commands+0x12>
            streamer_printf(streamer, "%s",
    fc80:	4906      	ldr	r1, [pc, #24]	; (fc9c <print_module_commands+0x68>)
    fc82:	4628      	mov	r0, r5
    fc84:	f002 fbb5 	bl	123f2 <streamer_printf>
    fc88:	e7dd      	b.n	fc46 <print_module_commands+0x12>
    }
}
    fc8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fc8c:	00023464 	.word	0x00023464
    fc90:	00023520 	.word	0x00023520
    fc94:	200044ac 	.word	0x200044ac
    fc98:	0002346c 	.word	0x0002346c
    fc9c:	000233dc 	.word	0x000233dc

0000fca0 <print_modules>:
{
    fca0:	b538      	push	{r3, r4, r5, lr}
    fca2:	4605      	mov	r5, r0
    for (module = 0; module < num_of_shell_entities; module++) {
    fca4:	2400      	movs	r4, #0
    fca6:	e007      	b.n	fcb8 <print_modules+0x18>
        streamer_printf(streamer, "%s\n", shell_modules[module].name);
    fca8:	4b06      	ldr	r3, [pc, #24]	; (fcc4 <print_modules+0x24>)
    fcaa:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
    fcae:	4906      	ldr	r1, [pc, #24]	; (fcc8 <print_modules+0x28>)
    fcb0:	4628      	mov	r0, r5
    fcb2:	f002 fb9e 	bl	123f2 <streamer_printf>
    for (module = 0; module < num_of_shell_entities; module++) {
    fcb6:	3401      	adds	r4, #1
    fcb8:	4b04      	ldr	r3, [pc, #16]	; (fccc <print_modules+0x2c>)
    fcba:	681b      	ldr	r3, [r3, #0]
    fcbc:	429c      	cmp	r4, r3
    fcbe:	d3f3      	bcc.n	fca8 <print_modules+0x8>
}
    fcc0:	bd38      	pop	{r3, r4, r5, pc}
    fcc2:	bf00      	nop
    fcc4:	200044ac 	.word	0x200044ac
    fcc8:	00023730 	.word	0x00023730
    fccc:	20004480 	.word	0x20004480

0000fcd0 <print_command_params>:
{
    fcd0:	b570      	push	{r4, r5, r6, lr}
	const struct shell_cmd *shell_cmd = &shell_module->commands[command];
    fcd2:	4b0e      	ldr	r3, [pc, #56]	; (fd0c <print_command_params+0x3c>)
    fcd4:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    fcd8:	685d      	ldr	r5, [r3, #4]
    fcda:	eb05 1501 	add.w	r5, r5, r1, lsl #4
	if (!(shell_cmd->help && shell_cmd->help->params)) {
    fcde:	68eb      	ldr	r3, [r5, #12]
    fce0:	b19b      	cbz	r3, fd0a <print_command_params+0x3a>
    fce2:	4616      	mov	r6, r2
    fce4:	689b      	ldr	r3, [r3, #8]
    fce6:	b183      	cbz	r3, fd0a <print_command_params+0x3a>
	for (i = 0; shell_cmd->help->params[i].param_name; i++) {
    fce8:	2400      	movs	r4, #0
    fcea:	e006      	b.n	fcfa <print_command_params+0x2a>
		streamer_printf(streamer, "%-30s%s\n",
    fcec:	f8dc 3004 	ldr.w	r3, [ip, #4]
    fcf0:	4907      	ldr	r1, [pc, #28]	; (fd10 <print_command_params+0x40>)
    fcf2:	4630      	mov	r0, r6
    fcf4:	f002 fb7d 	bl	123f2 <streamer_printf>
	for (i = 0; shell_cmd->help->params[i].param_name; i++) {
    fcf8:	3401      	adds	r4, #1
    fcfa:	68eb      	ldr	r3, [r5, #12]
    fcfc:	689b      	ldr	r3, [r3, #8]
    fcfe:	eb03 0cc4 	add.w	ip, r3, r4, lsl #3
    fd02:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
    fd06:	2a00      	cmp	r2, #0
    fd08:	d1f0      	bne.n	fcec <print_command_params+0x1c>
}
    fd0a:	bd70      	pop	{r4, r5, r6, pc}
    fd0c:	200044ac 	.word	0x200044ac
    fd10:	00023474 	.word	0x00023474

0000fd14 <get_destination_module>:
{
    fd14:	b570      	push	{r4, r5, r6, lr}
    fd16:	4606      	mov	r6, r0
    fd18:	460d      	mov	r5, r1
    for (i = 0; i < num_of_shell_entities; i++) {
    fd1a:	2400      	movs	r4, #0
    fd1c:	e007      	b.n	fd2e <get_destination_module+0x1a>
            if (!strcmp(module_str, shell_modules[i].name)) {
    fd1e:	4b0e      	ldr	r3, [pc, #56]	; (fd58 <get_destination_module+0x44>)
    fd20:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
    fd24:	4630      	mov	r0, r6
    fd26:	f7fd ff03 	bl	db30 <strcmp>
    fd2a:	b190      	cbz	r0, fd52 <get_destination_module+0x3e>
    for (i = 0; i < num_of_shell_entities; i++) {
    fd2c:	3401      	adds	r4, #1
    fd2e:	4b0b      	ldr	r3, [pc, #44]	; (fd5c <get_destination_module+0x48>)
    fd30:	681b      	ldr	r3, [r3, #0]
    fd32:	429c      	cmp	r4, r3
    fd34:	d20b      	bcs.n	fd4e <get_destination_module+0x3a>
        if (len < 0) {
    fd36:	2d00      	cmp	r5, #0
    fd38:	dbf1      	blt.n	fd1e <get_destination_module+0xa>
            if (!strncmp(module_str, shell_modules[i].name, len)) {
    fd3a:	462a      	mov	r2, r5
    fd3c:	4b06      	ldr	r3, [pc, #24]	; (fd58 <get_destination_module+0x44>)
    fd3e:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
    fd42:	4630      	mov	r0, r6
    fd44:	f00c fbd5 	bl	1c4f2 <strncmp>
    fd48:	2800      	cmp	r0, #0
    fd4a:	d1ef      	bne.n	fd2c <get_destination_module+0x18>
    fd4c:	e001      	b.n	fd52 <get_destination_module+0x3e>
    return -1;
    fd4e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
    fd52:	4620      	mov	r0, r4
    fd54:	bd70      	pop	{r4, r5, r6, pc}
    fd56:	bf00      	nop
    fd58:	200044ac 	.word	0x200044ac
    fd5c:	20004480 	.word	0x20004480

0000fd60 <set_default_module>:
static const struct shell_cmd shell_cmd_help =
    SHELL_CMD_EXT("help", show_help, NULL);

static int
set_default_module(const char *name)
{
    fd60:	b508      	push	{r3, lr}
    int module;

    module = get_destination_module(name, -1);
    fd62:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    fd66:	f7ff ffd5 	bl	fd14 <get_destination_module>

    if (module == -1) {
    fd6a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    fd6e:	d002      	beq.n	fd76 <set_default_module+0x16>
        return -1;
    }

    default_module = module;
    fd70:	4b01      	ldr	r3, [pc, #4]	; (fd78 <set_default_module+0x18>)
    fd72:	6018      	str	r0, [r3, #0]

    return 0;
    fd74:	2000      	movs	r0, #0
}
    fd76:	bd08      	pop	{r3, pc}
    fd78:	20000620 	.word	0x20000620

0000fd7c <select_module>:

static int
select_module(const struct shell_cmd *cmd, int argc, char *argv[],
              struct streamer *streamer)
{
    fd7c:	b508      	push	{r3, lr}
    if (argc == 1) {
    fd7e:	2901      	cmp	r1, #1
    fd80:	d105      	bne.n	fd8e <select_module+0x12>
        default_module = -1;
    fd82:	4b05      	ldr	r3, [pc, #20]	; (fd98 <select_module+0x1c>)
    fd84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    fd88:	601a      	str	r2, [r3, #0]
    } else {
        set_default_module(argv[1]);
    }

    return 0;
}
    fd8a:	2000      	movs	r0, #0
    fd8c:	bd08      	pop	{r3, pc}
        set_default_module(argv[1]);
    fd8e:	6850      	ldr	r0, [r2, #4]
    fd90:	f7ff ffe6 	bl	fd60 <set_default_module>
    fd94:	e7f9      	b.n	fd8a <select_module+0xe>
    fd96:	bf00      	nop
    fd98:	20000620 	.word	0x20000620

0000fd9c <get_command_and_module>:
{
    fd9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fd9e:	4617      	mov	r7, r2
    *module = -1;
    fda0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fda4:	600b      	str	r3, [r1, #0]
    if (!argv[0]) {
    fda6:	6806      	ldr	r6, [r0, #0]
    fda8:	b156      	cbz	r6, fdc0 <get_command_and_module+0x24>
    fdaa:	4604      	mov	r4, r0
    fdac:	460d      	mov	r5, r1
    if (default_module == -1) {
    fdae:	4b15      	ldr	r3, [pc, #84]	; (fe04 <get_command_and_module+0x68>)
    fdb0:	681b      	ldr	r3, [r3, #0]
    fdb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    fdb6:	d008      	beq.n	fdca <get_command_and_module+0x2e>
    *module = default_module;
    fdb8:	600b      	str	r3, [r1, #0]
    return argv[0];
    fdba:	6806      	ldr	r6, [r0, #0]
}
    fdbc:	4630      	mov	r0, r6
    fdbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        streamer_printf(streamer, "Unrecognized command\n");
    fdc0:	4911      	ldr	r1, [pc, #68]	; (fe08 <get_command_and_module+0x6c>)
    fdc2:	4610      	mov	r0, r2
    fdc4:	f002 fb15 	bl	123f2 <streamer_printf>
        return NULL;
    fdc8:	e7f8      	b.n	fdbc <get_command_and_module+0x20>
        if (!argv[1] || argv[1][0] == '\0') {
    fdca:	6843      	ldr	r3, [r0, #4]
    fdcc:	b163      	cbz	r3, fde8 <get_command_and_module+0x4c>
    fdce:	781b      	ldrb	r3, [r3, #0]
    fdd0:	b153      	cbz	r3, fde8 <get_command_and_module+0x4c>
        *module = get_destination_module(argv[0], -1);
    fdd2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    fdd6:	4630      	mov	r0, r6
    fdd8:	f7ff ff9c 	bl	fd14 <get_destination_module>
    fddc:	6028      	str	r0, [r5, #0]
        if (*module == -1) {
    fdde:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    fde2:	d008      	beq.n	fdf6 <get_command_and_module+0x5a>
        return argv[1];
    fde4:	6866      	ldr	r6, [r4, #4]
    fde6:	e7e9      	b.n	fdbc <get_command_and_module+0x20>
            streamer_printf(streamer, "Unrecognized command: %s\n", argv[0]);
    fde8:	4632      	mov	r2, r6
    fdea:	4908      	ldr	r1, [pc, #32]	; (fe0c <get_command_and_module+0x70>)
    fdec:	4638      	mov	r0, r7
    fdee:	f002 fb00 	bl	123f2 <streamer_printf>
            return NULL;
    fdf2:	2600      	movs	r6, #0
    fdf4:	e7e2      	b.n	fdbc <get_command_and_module+0x20>
            streamer_printf(streamer, "Illegal module %s\n", argv[0]);
    fdf6:	6822      	ldr	r2, [r4, #0]
    fdf8:	4905      	ldr	r1, [pc, #20]	; (fe10 <get_command_and_module+0x74>)
    fdfa:	4638      	mov	r0, r7
    fdfc:	f002 faf9 	bl	123f2 <streamer_printf>
            return NULL;
    fe00:	2600      	movs	r6, #0
    fe02:	e7db      	b.n	fdbc <get_command_and_module+0x20>
    fe04:	20000620 	.word	0x20000620
    fe08:	00023480 	.word	0x00023480
    fe0c:	00023498 	.word	0x00023498
    fe10:	000234b4 	.word	0x000234b4

0000fe14 <shell_find_cmd>:
static const struct shell_cmd shell_cmd_select_module =
    SHELL_CMD_EXT("select", select_module, NULL);

static const struct shell_cmd *
shell_find_cmd(int argc, char *argv[], struct streamer *streamer)
{
    fe14:	b5f0      	push	{r4, r5, r6, r7, lr}
    fe16:	b083      	sub	sp, #12
    fe18:	4616      	mov	r6, r2
    const char *first_string = argv[0];
    fe1a:	680d      	ldr	r5, [r1, #0]
    int module = -1;
    fe1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fe20:	9301      	str	r3, [sp, #4]
    const struct shell_module *shell_module;
    const char *command;
    int i;

    if (!first_string || first_string[0] == '\0') {
    fe22:	b31d      	cbz	r5, fe6c <shell_find_cmd+0x58>
    fe24:	4607      	mov	r7, r0
    fe26:	460c      	mov	r4, r1
    fe28:	782b      	ldrb	r3, [r5, #0]
    fe2a:	b1fb      	cbz	r3, fe6c <shell_find_cmd+0x58>
        streamer_printf(streamer, "Illegal parameter\n");
        return NULL;
    }

    if (!strcmp(first_string, "help")) {
    fe2c:	4922      	ldr	r1, [pc, #136]	; (feb8 <shell_find_cmd+0xa4>)
    fe2e:	4628      	mov	r0, r5
    fe30:	f7fd fe7e 	bl	db30 <strcmp>
    fe34:	2800      	cmp	r0, #0
    fe36:	d035      	beq.n	fea4 <shell_find_cmd+0x90>
        return &shell_cmd_help;
    }

    if (!strcmp(first_string, "select")) {
    fe38:	4920      	ldr	r1, [pc, #128]	; (febc <shell_find_cmd+0xa8>)
    fe3a:	4628      	mov	r0, r5
    fe3c:	f7fd fe78 	bl	db30 <strcmp>
    fe40:	2800      	cmp	r0, #0
    fe42:	d033      	beq.n	feac <shell_find_cmd+0x98>
        return &shell_cmd_select_module;
    }

    if ((argc == 1) && (default_module == -1)) {
    fe44:	2f01      	cmp	r7, #1
    fe46:	d104      	bne.n	fe52 <shell_find_cmd+0x3e>
    fe48:	4b1d      	ldr	r3, [pc, #116]	; (fec0 <shell_find_cmd+0xac>)
    fe4a:	681b      	ldr	r3, [r3, #0]
    fe4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    fe50:	d012      	beq.n	fe78 <shell_find_cmd+0x64>
        streamer_printf(streamer, "Missing parameter\n");
        return NULL;
    }

    command = get_command_and_module(argv, &module, streamer);
    fe52:	4632      	mov	r2, r6
    fe54:	a901      	add	r1, sp, #4
    fe56:	4620      	mov	r0, r4
    fe58:	f7ff ffa0 	bl	fd9c <get_command_and_module>
    fe5c:	4606      	mov	r6, r0
    if ((module == -1) || (command == NULL)) {
    fe5e:	9f01      	ldr	r7, [sp, #4]
    fe60:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
    fe64:	d024      	beq.n	feb0 <shell_find_cmd+0x9c>
    fe66:	b328      	cbz	r0, feb4 <shell_find_cmd+0xa0>
        return NULL;
    }

    shell_module = &shell_modules[module];
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
    fe68:	2500      	movs	r5, #0
    fe6a:	e00c      	b.n	fe86 <shell_find_cmd+0x72>
        streamer_printf(streamer, "Illegal parameter\n");
    fe6c:	4915      	ldr	r1, [pc, #84]	; (fec4 <shell_find_cmd+0xb0>)
    fe6e:	4630      	mov	r0, r6
    fe70:	f002 fabf 	bl	123f2 <streamer_printf>
        return NULL;
    fe74:	2100      	movs	r1, #0
    fe76:	e016      	b.n	fea6 <shell_find_cmd+0x92>
        streamer_printf(streamer, "Missing parameter\n");
    fe78:	4913      	ldr	r1, [pc, #76]	; (fec8 <shell_find_cmd+0xb4>)
    fe7a:	4630      	mov	r0, r6
    fe7c:	f002 fab9 	bl	123f2 <streamer_printf>
        return NULL;
    fe80:	2100      	movs	r1, #0
    fe82:	e010      	b.n	fea6 <shell_find_cmd+0x92>
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
    fe84:	3501      	adds	r5, #1
    fe86:	4b11      	ldr	r3, [pc, #68]	; (fecc <shell_find_cmd+0xb8>)
    fe88:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    fe8c:	685c      	ldr	r4, [r3, #4]
    fe8e:	eb04 1405 	add.w	r4, r4, r5, lsl #4
    fe92:	68a1      	ldr	r1, [r4, #8]
    fe94:	b139      	cbz	r1, fea6 <shell_find_cmd+0x92>
        if (!strcmp(command, shell_module->commands[i].sc_cmd)) {
    fe96:	4630      	mov	r0, r6
    fe98:	f7fd fe4a 	bl	db30 <strcmp>
    fe9c:	2800      	cmp	r0, #0
    fe9e:	d1f1      	bne.n	fe84 <shell_find_cmd+0x70>
            return &shell_module->commands[i];
    fea0:	4621      	mov	r1, r4
    fea2:	e000      	b.n	fea6 <shell_find_cmd+0x92>
        return &shell_cmd_help;
    fea4:	490a      	ldr	r1, [pc, #40]	; (fed0 <shell_find_cmd+0xbc>)
        }
    }

    return NULL;
}
    fea6:	4608      	mov	r0, r1
    fea8:	b003      	add	sp, #12
    feaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return &shell_cmd_select_module;
    feac:	4909      	ldr	r1, [pc, #36]	; (fed4 <shell_find_cmd+0xc0>)
    feae:	e7fa      	b.n	fea6 <shell_find_cmd+0x92>
        return NULL;
    feb0:	2100      	movs	r1, #0
    feb2:	e7f8      	b.n	fea6 <shell_find_cmd+0x92>
    feb4:	4601      	mov	r1, r0
    feb6:	e7f6      	b.n	fea6 <shell_find_cmd+0x92>
    feb8:	000234dc 	.word	0x000234dc
    febc:	000234e4 	.word	0x000234e4
    fec0:	20000620 	.word	0x20000620
    fec4:	000234c8 	.word	0x000234c8
    fec8:	000234ec 	.word	0x000234ec
    fecc:	200044ac 	.word	0x200044ac
    fed0:	00023660 	.word	0x00023660
    fed4:	00023670 	.word	0x00023670

0000fed8 <show_cmd_help>:
{
    fed8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fedc:	b083      	sub	sp, #12
    fede:	4681      	mov	r9, r0
    fee0:	4688      	mov	r8, r1
    int module = -1;
    fee2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fee6:	9301      	str	r3, [sp, #4]
    command = get_command_and_module(argv, &module, streamer);
    fee8:	460a      	mov	r2, r1
    feea:	a901      	add	r1, sp, #4
    feec:	f7ff ff56 	bl	fd9c <get_command_and_module>
    if ((module == -1) || (command == NULL)) {
    fef0:	9f01      	ldr	r7, [sp, #4]
    fef2:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
    fef6:	d04d      	beq.n	ff94 <show_cmd_help+0xbc>
    fef8:	4606      	mov	r6, r0
    fefa:	2800      	cmp	r0, #0
    fefc:	d04a      	beq.n	ff94 <show_cmd_help+0xbc>
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
    fefe:	2500      	movs	r5, #0
    ff00:	e009      	b.n	ff16 <show_cmd_help+0x3e>
                               !cmd->help->usage &&
    ff02:	6859      	ldr	r1, [r3, #4]
            if (!cmd->help || (!cmd->help->summary &&
    ff04:	b9d9      	cbnz	r1, ff3e <show_cmd_help+0x66>
                               !cmd->help->params)) {
    ff06:	689b      	ldr	r3, [r3, #8]
                               !cmd->help->usage &&
    ff08:	b9cb      	cbnz	r3, ff3e <show_cmd_help+0x66>
                streamer_printf(streamer, "(no help available)\n");
    ff0a:	4924      	ldr	r1, [pc, #144]	; (ff9c <show_cmd_help+0xc4>)
    ff0c:	4640      	mov	r0, r8
    ff0e:	f002 fa70 	bl	123f2 <streamer_printf>
                return 0;
    ff12:	e03f      	b.n	ff94 <show_cmd_help+0xbc>
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
    ff14:	3501      	adds	r5, #1
    ff16:	4b22      	ldr	r3, [pc, #136]	; (ffa0 <show_cmd_help+0xc8>)
    ff18:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    ff1c:	685c      	ldr	r4, [r3, #4]
    ff1e:	eb04 1405 	add.w	r4, r4, r5, lsl #4
    ff22:	68a1      	ldr	r1, [r4, #8]
    ff24:	2900      	cmp	r1, #0
    ff26:	d02f      	beq.n	ff88 <show_cmd_help+0xb0>
        if (!strcmp(command, cmd->sc_cmd)) {
    ff28:	4630      	mov	r0, r6
    ff2a:	f7fd fe01 	bl	db30 <strcmp>
    ff2e:	2800      	cmp	r0, #0
    ff30:	d1f0      	bne.n	ff14 <show_cmd_help+0x3c>
            if (!cmd->help || (!cmd->help->summary &&
    ff32:	68e3      	ldr	r3, [r4, #12]
    ff34:	2b00      	cmp	r3, #0
    ff36:	d0e8      	beq.n	ff0a <show_cmd_help+0x32>
    ff38:	681a      	ldr	r2, [r3, #0]
    ff3a:	2a00      	cmp	r2, #0
    ff3c:	d0e1      	beq.n	ff02 <show_cmd_help+0x2a>
            if (cmd->help->summary) {
    ff3e:	b14a      	cbz	r2, ff54 <show_cmd_help+0x7c>
                streamer_printf(streamer, "Summary:\n");
    ff40:	4918      	ldr	r1, [pc, #96]	; (ffa4 <show_cmd_help+0xcc>)
    ff42:	4640      	mov	r0, r8
    ff44:	f002 fa55 	bl	123f2 <streamer_printf>
                streamer_printf(streamer, "%s\n", cmd->help->summary);
    ff48:	68e3      	ldr	r3, [r4, #12]
    ff4a:	681a      	ldr	r2, [r3, #0]
    ff4c:	4916      	ldr	r1, [pc, #88]	; (ffa8 <show_cmd_help+0xd0>)
    ff4e:	4640      	mov	r0, r8
    ff50:	f002 fa4f 	bl	123f2 <streamer_printf>
            if (cmd->help->usage) {
    ff54:	68e3      	ldr	r3, [r4, #12]
    ff56:	685b      	ldr	r3, [r3, #4]
    ff58:	b14b      	cbz	r3, ff6e <show_cmd_help+0x96>
                streamer_printf(streamer, "Usage:\n");
    ff5a:	4914      	ldr	r1, [pc, #80]	; (ffac <show_cmd_help+0xd4>)
    ff5c:	4640      	mov	r0, r8
    ff5e:	f002 fa48 	bl	123f2 <streamer_printf>
                streamer_printf(streamer, "%s\n", cmd->help->usage);
    ff62:	68e3      	ldr	r3, [r4, #12]
    ff64:	685a      	ldr	r2, [r3, #4]
    ff66:	4910      	ldr	r1, [pc, #64]	; (ffa8 <show_cmd_help+0xd0>)
    ff68:	4640      	mov	r0, r8
    ff6a:	f002 fa42 	bl	123f2 <streamer_printf>
            if (cmd->help->params) {
    ff6e:	68e3      	ldr	r3, [r4, #12]
    ff70:	689b      	ldr	r3, [r3, #8]
    ff72:	b17b      	cbz	r3, ff94 <show_cmd_help+0xbc>
                streamer_printf(streamer, "Parameters:\n");
    ff74:	490e      	ldr	r1, [pc, #56]	; (ffb0 <show_cmd_help+0xd8>)
    ff76:	4640      	mov	r0, r8
    ff78:	f002 fa3b 	bl	123f2 <streamer_printf>
                print_command_params(module, i, streamer);
    ff7c:	4642      	mov	r2, r8
    ff7e:	4629      	mov	r1, r5
    ff80:	9801      	ldr	r0, [sp, #4]
    ff82:	f7ff fea5 	bl	fcd0 <print_command_params>
            return 0;
    ff86:	e005      	b.n	ff94 <show_cmd_help+0xbc>
    streamer_printf(streamer, "Unrecognized command: %s\n", argv[0]);
    ff88:	f8d9 2000 	ldr.w	r2, [r9]
    ff8c:	4909      	ldr	r1, [pc, #36]	; (ffb4 <show_cmd_help+0xdc>)
    ff8e:	4640      	mov	r0, r8
    ff90:	f002 fa2f 	bl	123f2 <streamer_printf>
}
    ff94:	2000      	movs	r0, #0
    ff96:	b003      	add	sp, #12
    ff98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ff9c:	00023500 	.word	0x00023500
    ffa0:	200044ac 	.word	0x200044ac
    ffa4:	00023518 	.word	0x00023518
    ffa8:	00023730 	.word	0x00023730
    ffac:	00023524 	.word	0x00023524
    ffb0:	0002352c 	.word	0x0002352c
    ffb4:	00023498 	.word	0x00023498

0000ffb8 <show_help>:
{
    ffb8:	b538      	push	{r3, r4, r5, lr}
    ffba:	461c      	mov	r4, r3
    if ((argc > 2) || ((default_module != -1) && (argc == 2))) {
    ffbc:	2902      	cmp	r1, #2
    ffbe:	dc1a      	bgt.n	fff6 <show_help+0x3e>
    ffc0:	4b1b      	ldr	r3, [pc, #108]	; (10030 <show_help+0x78>)
    ffc2:	6818      	ldr	r0, [r3, #0]
    ffc4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    ffc8:	d001      	beq.n	ffce <show_help+0x16>
    ffca:	2902      	cmp	r1, #2
    ffcc:	d013      	beq.n	fff6 <show_help+0x3e>
    if ((argc == 2) || ((default_module != -1) && (argc == 1))) {
    ffce:	2902      	cmp	r1, #2
    ffd0:	d016      	beq.n	10000 <show_help+0x48>
    ffd2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    ffd6:	d001      	beq.n	ffdc <show_help+0x24>
    ffd8:	2901      	cmp	r1, #1
    ffda:	d011      	beq.n	10000 <show_help+0x48>
        streamer_printf(streamer, "Available modules:\n");
    ffdc:	4915      	ldr	r1, [pc, #84]	; (10034 <show_help+0x7c>)
    ffde:	4620      	mov	r0, r4
    ffe0:	f002 fa07 	bl	123f2 <streamer_printf>
        print_modules(streamer);
    ffe4:	4620      	mov	r0, r4
    ffe6:	f7ff fe5b 	bl	fca0 <print_modules>
        streamer_printf(streamer,
    ffea:	4913      	ldr	r1, [pc, #76]	; (10038 <show_help+0x80>)
    ffec:	4620      	mov	r0, r4
    ffee:	f002 fa00 	bl	123f2 <streamer_printf>
    return 0;
    fff2:	2000      	movs	r0, #0
    fff4:	e014      	b.n	10020 <show_help+0x68>
        return show_cmd_help(&argv[1], streamer);
    fff6:	4621      	mov	r1, r4
    fff8:	1d10      	adds	r0, r2, #4
    fffa:	f7ff ff6d 	bl	fed8 <show_cmd_help>
    fffe:	e00f      	b.n	10020 <show_help+0x68>
        if (default_module == -1) {
   10000:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   10004:	d108      	bne.n	10018 <show_help+0x60>
            module = get_destination_module(argv[1], -1);
   10006:	6855      	ldr	r5, [r2, #4]
   10008:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1000c:	4628      	mov	r0, r5
   1000e:	f7ff fe81 	bl	fd14 <get_destination_module>
            if (module == -1) {
   10012:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   10016:	d004      	beq.n	10022 <show_help+0x6a>
        print_module_commands(module, streamer);
   10018:	4621      	mov	r1, r4
   1001a:	f7ff fe0b 	bl	fc34 <print_module_commands>
    return 0;
   1001e:	2000      	movs	r0, #0
}
   10020:	bd38      	pop	{r3, r4, r5, pc}
                streamer_printf(streamer, "Illegal module %s\n", argv[1]);
   10022:	462a      	mov	r2, r5
   10024:	4905      	ldr	r1, [pc, #20]	; (1003c <show_help+0x84>)
   10026:	4620      	mov	r0, r4
   10028:	f002 f9e3 	bl	123f2 <streamer_printf>
                return 0;
   1002c:	2000      	movs	r0, #0
   1002e:	e7f7      	b.n	10020 <show_help+0x68>
   10030:	20000620 	.word	0x20000620
   10034:	0002353c 	.word	0x0002353c
   10038:	00023550 	.word	0x00023550
   1003c:	000234b4 	.word	0x000234b4

00010040 <print_prompt>:
{
   10040:	b508      	push	{r3, lr}
    console_printf("%s%s", get_prompt(), MYNEWT_VAL(SHELL_PROMPT_SUFFIX));
   10042:	f7ff fddb 	bl	fbfc <get_prompt>
   10046:	4601      	mov	r1, r0
   10048:	4a02      	ldr	r2, [pc, #8]	; (10054 <print_prompt+0x14>)
   1004a:	4803      	ldr	r0, [pc, #12]	; (10058 <print_prompt+0x18>)
   1004c:	f7ff fd0e 	bl	fa6c <console_printf>
}
   10050:	bd08      	pop	{r3, pc}
   10052:	bf00      	nop
   10054:	00023584 	.word	0x00023584
   10058:	00023588 	.word	0x00023588

0001005c <print_prompt_if_console>:
{
   1005c:	b510      	push	{r4, lr}
   1005e:	4604      	mov	r4, r0
    if (streamer == streamer_console_get()) {
   10060:	f002 f9e2 	bl	12428 <streamer_console_get>
   10064:	4284      	cmp	r4, r0
   10066:	d000      	beq.n	1006a <print_prompt_if_console+0xe>
}
   10068:	bd10      	pop	{r4, pc}
        print_prompt();
   1006a:	f7ff ffe9 	bl	10040 <print_prompt>
}
   1006e:	e7fb      	b.n	10068 <print_prompt_if_console+0xc>

00010070 <complete_module>:
}

static void
complete_module(char *line, char *module_prefix,
                int module_len, console_append_char_cb append_char)
{
   10070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10074:	b083      	sub	sp, #12
   10076:	4681      	mov	r9, r0
   10078:	9101      	str	r1, [sp, #4]
    int i, j;
    const char *first_match = NULL;
    int common_chars = -1, space = 0;

    if (!module_len) {
   1007a:	4615      	mov	r5, r2
   1007c:	b132      	cbz	r2, 1008c <complete_module+0x1c>
   1007e:	469a      	mov	sl, r3
    int common_chars = -1, space = 0;
   10080:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    const char *first_match = NULL;
   10084:	f04f 0800 	mov.w	r8, #0
        print_prompt();
        console_printf("%s", line);
        return;
    }

    for (i = 0; i < num_of_shell_entities; i++) {
   10088:	4646      	mov	r6, r8
   1008a:	e02b      	b.n	100e4 <complete_module+0x74>
        console_printf("\n");
   1008c:	4837      	ldr	r0, [pc, #220]	; (1016c <complete_module+0xfc>)
   1008e:	f7ff fced 	bl	fa6c <console_printf>
        for (i = 0; i < num_of_shell_entities; i++) {
   10092:	e006      	b.n	100a2 <complete_module+0x32>
            console_printf("%s\n", shell_modules[i].name);
   10094:	4b36      	ldr	r3, [pc, #216]	; (10170 <complete_module+0x100>)
   10096:	f853 1035 	ldr.w	r1, [r3, r5, lsl #3]
   1009a:	4836      	ldr	r0, [pc, #216]	; (10174 <complete_module+0x104>)
   1009c:	f7ff fce6 	bl	fa6c <console_printf>
        for (i = 0; i < num_of_shell_entities; i++) {
   100a0:	3501      	adds	r5, #1
   100a2:	4b35      	ldr	r3, [pc, #212]	; (10178 <complete_module+0x108>)
   100a4:	681b      	ldr	r3, [r3, #0]
   100a6:	429d      	cmp	r5, r3
   100a8:	d3f4      	bcc.n	10094 <complete_module+0x24>
        print_prompt();
   100aa:	f7ff ffc9 	bl	10040 <print_prompt>
        console_printf("%s", line);
   100ae:	4649      	mov	r1, r9
   100b0:	4832      	ldr	r0, [pc, #200]	; (1017c <complete_module+0x10c>)
   100b2:	f7ff fcdb 	bl	fa6c <console_printf>

    /* for convenience add space after command */
    if (space) {
        append_char(line, ' ');
    }
}
   100b6:	b003      	add	sp, #12
   100b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            console_printf("\n");
   100bc:	482b      	ldr	r0, [pc, #172]	; (1016c <complete_module+0xfc>)
   100be:	f7ff fcd5 	bl	fa6c <console_printf>
            console_printf("%s\n", first_match);
   100c2:	4641      	mov	r1, r8
   100c4:	482b      	ldr	r0, [pc, #172]	; (10174 <complete_module+0x104>)
   100c6:	f7ff fcd1 	bl	fa6c <console_printf>
            common_chars = strlen(first_match);
   100ca:	4640      	mov	r0, r8
   100cc:	f7fd fd3c 	bl	db48 <strlen>
   100d0:	4607      	mov	r7, r0
        for (j = 0; j < common_chars; j++) {
   100d2:	e01b      	b.n	1010c <complete_module+0x9c>
        console_printf("%s\n", shell_modules[i].name);
   100d4:	4b26      	ldr	r3, [pc, #152]	; (10170 <complete_module+0x100>)
   100d6:	f853 1036 	ldr.w	r1, [r3, r6, lsl #3]
   100da:	4826      	ldr	r0, [pc, #152]	; (10174 <complete_module+0x104>)
   100dc:	f7ff fcc6 	bl	fa6c <console_printf>
        common_chars = j;
   100e0:	4627      	mov	r7, r4
    for (i = 0; i < num_of_shell_entities; i++) {
   100e2:	3601      	adds	r6, #1
   100e4:	4b24      	ldr	r3, [pc, #144]	; (10178 <complete_module+0x108>)
   100e6:	681b      	ldr	r3, [r3, #0]
   100e8:	429e      	cmp	r6, r3
   100ea:	d21d      	bcs.n	10128 <complete_module+0xb8>
        if (strncmp(module_prefix,
   100ec:	4b20      	ldr	r3, [pc, #128]	; (10170 <complete_module+0x100>)
   100ee:	f853 b036 	ldr.w	fp, [r3, r6, lsl #3]
   100f2:	462a      	mov	r2, r5
   100f4:	4659      	mov	r1, fp
   100f6:	9801      	ldr	r0, [sp, #4]
   100f8:	f00c f9fb 	bl	1c4f2 <strncmp>
   100fc:	4604      	mov	r4, r0
   100fe:	2800      	cmp	r0, #0
   10100:	d1ef      	bne.n	100e2 <complete_module+0x72>
        if (!first_match) {
   10102:	f1b8 0f00 	cmp.w	r8, #0
   10106:	d00d      	beq.n	10124 <complete_module+0xb4>
        if (first_match && (common_chars < 0)) {
   10108:	2f00      	cmp	r7, #0
   1010a:	dbd7      	blt.n	100bc <complete_module+0x4c>
        for (j = 0; j < common_chars; j++) {
   1010c:	42bc      	cmp	r4, r7
   1010e:	dae1      	bge.n	100d4 <complete_module+0x64>
            if (first_match[j] != shell_modules[i].name[j]) {
   10110:	f818 2004 	ldrb.w	r2, [r8, r4]
   10114:	4b16      	ldr	r3, [pc, #88]	; (10170 <complete_module+0x100>)
   10116:	f853 3036 	ldr.w	r3, [r3, r6, lsl #3]
   1011a:	5d1b      	ldrb	r3, [r3, r4]
   1011c:	429a      	cmp	r2, r3
   1011e:	d1d9      	bne.n	100d4 <complete_module+0x64>
        for (j = 0; j < common_chars; j++) {
   10120:	3401      	adds	r4, #1
   10122:	e7f3      	b.n	1010c <complete_module+0x9c>
            first_match = shell_modules[i].name;
   10124:	46d8      	mov	r8, fp
   10126:	e7dc      	b.n	100e2 <complete_module+0x72>
    if (!first_match) {
   10128:	f1b8 0f00 	cmp.w	r8, #0
   1012c:	d0c3      	beq.n	100b6 <complete_module+0x46>
    if (common_chars >= 0) {
   1012e:	2f00      	cmp	r7, #0
   10130:	da0e      	bge.n	10150 <complete_module+0xe0>
        common_chars = strlen(first_match);
   10132:	4640      	mov	r0, r8
   10134:	f7fd fd08 	bl	db48 <strlen>
   10138:	4607      	mov	r7, r0
        space = 1;
   1013a:	2401      	movs	r4, #1
    for (i = module_len; i < common_chars; i++) {
   1013c:	42bd      	cmp	r5, r7
   1013e:	da0f      	bge.n	10160 <complete_module+0xf0>
        if (!append_char(line, first_match[i])) {
   10140:	f818 1005 	ldrb.w	r1, [r8, r5]
   10144:	4648      	mov	r0, r9
   10146:	47d0      	blx	sl
   10148:	2800      	cmp	r0, #0
   1014a:	d0b4      	beq.n	100b6 <complete_module+0x46>
    for (i = module_len; i < common_chars; i++) {
   1014c:	3501      	adds	r5, #1
   1014e:	e7f5      	b.n	1013c <complete_module+0xcc>
        print_prompt();
   10150:	f7ff ff76 	bl	10040 <print_prompt>
        console_printf("%s", line);
   10154:	4649      	mov	r1, r9
   10156:	4809      	ldr	r0, [pc, #36]	; (1017c <complete_module+0x10c>)
   10158:	f7ff fc88 	bl	fa6c <console_printf>
    int common_chars = -1, space = 0;
   1015c:	2400      	movs	r4, #0
   1015e:	e7ed      	b.n	1013c <complete_module+0xcc>
    if (space) {
   10160:	2c00      	cmp	r4, #0
   10162:	d0a8      	beq.n	100b6 <complete_module+0x46>
        append_char(line, ' ');
   10164:	2120      	movs	r1, #32
   10166:	4648      	mov	r0, r9
   10168:	47d0      	blx	sl
   1016a:	e7a4      	b.n	100b6 <complete_module+0x46>
   1016c:	00023520 	.word	0x00023520
   10170:	200044ac 	.word	0x200044ac
   10174:	00023730 	.word	0x00023730
   10178:	20004480 	.word	0x20004480
   1017c:	000233dc 	.word	0x000233dc

00010180 <complete_command>:
{
   10180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10184:	b083      	sub	sp, #12
   10186:	9001      	str	r0, [sp, #4]
   10188:	468b      	mov	fp, r1
   1018a:	4615      	mov	r5, r2
    commands = shell_modules[module_idx].commands;
   1018c:	4a3a      	ldr	r2, [pc, #232]	; (10278 <complete_command+0xf8>)
   1018e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   10192:	6857      	ldr	r7, [r2, #4]
    int i, j, common_chars = -1;
   10194:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    for (i = 0; commands[i].sc_cmd; i++) {
   10198:	f04f 0900 	mov.w	r9, #0
    int match_count = 0;
   1019c:	46ca      	mov	sl, r9
    int first_match = -1;
   1019e:	46b0      	mov	r8, r6
    for (i = 0; commands[i].sc_cmd; i++) {
   101a0:	e006      	b.n	101b0 <complete_command+0x30>
            common_chars = strlen(commands[i].sc_cmd);
   101a2:	4620      	mov	r0, r4
   101a4:	f7fd fcd0 	bl	db48 <strlen>
   101a8:	4606      	mov	r6, r0
            first_match = i;
   101aa:	46c8      	mov	r8, r9
    for (i = 0; commands[i].sc_cmd; i++) {
   101ac:	f109 0901 	add.w	r9, r9, #1
   101b0:	eb07 1309 	add.w	r3, r7, r9, lsl #4
   101b4:	689c      	ldr	r4, [r3, #8]
   101b6:	b1ec      	cbz	r4, 101f4 <complete_command+0x74>
        if (0 != strncmp(command_prefix, commands[i].sc_cmd, command_len)) {
   101b8:	462a      	mov	r2, r5
   101ba:	4621      	mov	r1, r4
   101bc:	4658      	mov	r0, fp
   101be:	f00c f998 	bl	1c4f2 <strncmp>
   101c2:	2800      	cmp	r0, #0
   101c4:	d1f2      	bne.n	101ac <complete_command+0x2c>
        match_count++;
   101c6:	f10a 0a01 	add.w	sl, sl, #1
        if (match_count == 1) {
   101ca:	f1ba 0f01 	cmp.w	sl, #1
   101ce:	d0e8      	beq.n	101a2 <complete_command+0x22>
        if (common_chars <= command_len) {
   101d0:	42ae      	cmp	r6, r5
   101d2:	ddeb      	ble.n	101ac <complete_command+0x2c>
        for (j = command_len; j < common_chars; j++) {
   101d4:	462b      	mov	r3, r5
   101d6:	42b3      	cmp	r3, r6
   101d8:	da08      	bge.n	101ec <complete_command+0x6c>
            if (commands[first_match].sc_cmd[j] != commands[i].sc_cmd[j]) {
   101da:	eb07 1208 	add.w	r2, r7, r8, lsl #4
   101de:	6892      	ldr	r2, [r2, #8]
   101e0:	5cd1      	ldrb	r1, [r2, r3]
   101e2:	5ce2      	ldrb	r2, [r4, r3]
   101e4:	4291      	cmp	r1, r2
   101e6:	d103      	bne.n	101f0 <complete_command+0x70>
        for (j = command_len; j < common_chars; j++) {
   101e8:	3301      	adds	r3, #1
   101ea:	e7f4      	b.n	101d6 <complete_command+0x56>
        common_chars = j;
   101ec:	461e      	mov	r6, r3
   101ee:	e7dd      	b.n	101ac <complete_command+0x2c>
   101f0:	461e      	mov	r6, r3
   101f2:	e7db      	b.n	101ac <complete_command+0x2c>
    if (match_count == 0) {
   101f4:	f1ba 0f00 	cmp.w	sl, #0
   101f8:	d03b      	beq.n	10272 <complete_command+0xf2>
    if (common_chars > command_len) {
   101fa:	42ae      	cmp	r6, r5
   101fc:	dd15      	ble.n	1022a <complete_command+0xaa>
   101fe:	9c01      	ldr	r4, [sp, #4]
   10200:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
        for (i = command_len; i < common_chars; i++) {
   10204:	42b5      	cmp	r5, r6
   10206:	da08      	bge.n	1021a <complete_command+0x9a>
            if (!append_char(line, (uint8_t)commands[first_match].sc_cmd[i])) {
   10208:	eb07 1308 	add.w	r3, r7, r8, lsl #4
   1020c:	689b      	ldr	r3, [r3, #8]
   1020e:	5d59      	ldrb	r1, [r3, r5]
   10210:	4620      	mov	r0, r4
   10212:	47c8      	blx	r9
   10214:	b368      	cbz	r0, 10272 <complete_command+0xf2>
        for (i = command_len; i < common_chars; i++) {
   10216:	3501      	adds	r5, #1
   10218:	e7f4      	b.n	10204 <complete_command+0x84>
        if (match_count == 1) {
   1021a:	f1ba 0f01 	cmp.w	sl, #1
   1021e:	d128      	bne.n	10272 <complete_command+0xf2>
            append_char(line, ' ');
   10220:	2120      	movs	r1, #32
   10222:	9801      	ldr	r0, [sp, #4]
   10224:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10226:	4798      	blx	r3
        return;
   10228:	e023      	b.n	10272 <complete_command+0xf2>
    console_printf("\n");
   1022a:	4814      	ldr	r0, [pc, #80]	; (1027c <complete_command+0xfc>)
   1022c:	f7ff fc1e 	bl	fa6c <console_printf>
    console_printf("%s\n", commands[first_match].sc_cmd);
   10230:	eb07 1308 	add.w	r3, r7, r8, lsl #4
   10234:	6899      	ldr	r1, [r3, #8]
   10236:	4812      	ldr	r0, [pc, #72]	; (10280 <complete_command+0x100>)
   10238:	f7ff fc18 	bl	fa6c <console_printf>
    for (i = first_match + 1; commands[i].sc_cmd; i++) {
   1023c:	f108 0801 	add.w	r8, r8, #1
   10240:	e001      	b.n	10246 <complete_command+0xc6>
   10242:	f108 0801 	add.w	r8, r8, #1
   10246:	eb07 1308 	add.w	r3, r7, r8, lsl #4
   1024a:	689c      	ldr	r4, [r3, #8]
   1024c:	b15c      	cbz	r4, 10266 <complete_command+0xe6>
        if (0 == strncmp(command_prefix, commands[i].sc_cmd, command_len)) {
   1024e:	462a      	mov	r2, r5
   10250:	4621      	mov	r1, r4
   10252:	4658      	mov	r0, fp
   10254:	f00c f94d 	bl	1c4f2 <strncmp>
   10258:	2800      	cmp	r0, #0
   1025a:	d1f2      	bne.n	10242 <complete_command+0xc2>
            console_printf("%s\n", commands[i].sc_cmd);
   1025c:	4621      	mov	r1, r4
   1025e:	4808      	ldr	r0, [pc, #32]	; (10280 <complete_command+0x100>)
   10260:	f7ff fc04 	bl	fa6c <console_printf>
   10264:	e7ed      	b.n	10242 <complete_command+0xc2>
    print_prompt();
   10266:	f7ff feeb 	bl	10040 <print_prompt>
    console_printf("%s", line);
   1026a:	9901      	ldr	r1, [sp, #4]
   1026c:	4805      	ldr	r0, [pc, #20]	; (10284 <complete_command+0x104>)
   1026e:	f7ff fbfd 	bl	fa6c <console_printf>
}
   10272:	b003      	add	sp, #12
   10274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10278:	200044ac 	.word	0x200044ac
   1027c:	00023520 	.word	0x00023520
   10280:	00023730 	.word	0x00023730
   10284:	000233dc 	.word	0x000233dc

00010288 <get_command_from_module>:
{
   10288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1028c:	4680      	mov	r8, r0
   1028e:	460d      	mov	r5, r1
   10290:	4616      	mov	r6, r2
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   10292:	2400      	movs	r4, #0
   10294:	e000      	b.n	10298 <get_command_from_module+0x10>
   10296:	3401      	adds	r4, #1
   10298:	4b0c      	ldr	r3, [pc, #48]	; (102cc <get_command_from_module+0x44>)
   1029a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   1029e:	685b      	ldr	r3, [r3, #4]
   102a0:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   102a4:	689f      	ldr	r7, [r3, #8]
   102a6:	b167      	cbz	r7, 102c2 <get_command_from_module+0x3a>
        if (strlen(shell_module->commands[i].sc_cmd) != len) {
   102a8:	4638      	mov	r0, r7
   102aa:	f7fd fc4d 	bl	db48 <strlen>
   102ae:	42a8      	cmp	r0, r5
   102b0:	d1f1      	bne.n	10296 <get_command_from_module+0xe>
        if (!strncmp(command, shell_module->commands[i].sc_cmd, len)) {
   102b2:	462a      	mov	r2, r5
   102b4:	4639      	mov	r1, r7
   102b6:	4640      	mov	r0, r8
   102b8:	f00c f91b 	bl	1c4f2 <strncmp>
   102bc:	2800      	cmp	r0, #0
   102be:	d1ea      	bne.n	10296 <get_command_from_module+0xe>
   102c0:	e001      	b.n	102c6 <get_command_from_module+0x3e>
    return -1;
   102c2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   102c6:	4620      	mov	r0, r4
   102c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   102cc:	200044ac 	.word	0x200044ac

000102d0 <complete_param>:
{
   102d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   102d4:	b083      	sub	sp, #12
   102d6:	9001      	str	r0, [sp, #4]
   102d8:	9100      	str	r1, [sp, #0]
   102da:	4691      	mov	r9, r2
    command = &shell_modules[module_idx].commands[command_idx];
   102dc:	4a34      	ldr	r2, [pc, #208]	; (103b0 <complete_param+0xe0>)
   102de:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   102e2:	6857      	ldr	r7, [r2, #4]
   102e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   102e6:	eb07 1703 	add.w	r7, r7, r3, lsl #4
    if (!(command->help && command->help->params)) {
   102ea:	68fb      	ldr	r3, [r7, #12]
   102ec:	2b00      	cmp	r3, #0
   102ee:	d05c      	beq.n	103aa <complete_param+0xda>
   102f0:	689b      	ldr	r3, [r3, #8]
   102f2:	2b00      	cmp	r3, #0
   102f4:	d059      	beq.n	103aa <complete_param+0xda>
    int i, j, common_chars = -1;
   102f6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    for (i = 0; command->help->params[i].param_name; i++) {
   102fa:	f04f 0a00 	mov.w	sl, #0
    const char *first_match = NULL;
   102fe:	4656      	mov	r6, sl
   10300:	e015      	b.n	1032e <complete_param+0x5e>
            console_printf("\n");
   10302:	482c      	ldr	r0, [pc, #176]	; (103b4 <complete_param+0xe4>)
   10304:	f7ff fbb2 	bl	fa6c <console_printf>
            console_printf("%s\n", first_match);
   10308:	4631      	mov	r1, r6
   1030a:	482b      	ldr	r0, [pc, #172]	; (103b8 <complete_param+0xe8>)
   1030c:	f7ff fbae 	bl	fa6c <console_printf>
            common_chars = strlen(first_match);
   10310:	4630      	mov	r0, r6
   10312:	f7fd fc19 	bl	db48 <strlen>
   10316:	4605      	mov	r5, r0
        for (j = 0; j < common_chars; j++) {
   10318:	e01d      	b.n	10356 <complete_param+0x86>
        console_printf("%s\n", command->help->params[i].param_name);
   1031a:	68fb      	ldr	r3, [r7, #12]
   1031c:	689b      	ldr	r3, [r3, #8]
   1031e:	f853 1008 	ldr.w	r1, [r3, r8]
   10322:	4825      	ldr	r0, [pc, #148]	; (103b8 <complete_param+0xe8>)
   10324:	f7ff fba2 	bl	fa6c <console_printf>
        common_chars = j;
   10328:	4625      	mov	r5, r4
    for (i = 0; command->help->params[i].param_name; i++) {
   1032a:	f10a 0a01 	add.w	sl, sl, #1
   1032e:	68fb      	ldr	r3, [r7, #12]
   10330:	689b      	ldr	r3, [r3, #8]
   10332:	ea4f 08ca 	mov.w	r8, sl, lsl #3
   10336:	f853 b03a 	ldr.w	fp, [r3, sl, lsl #3]
   1033a:	f1bb 0f00 	cmp.w	fp, #0
   1033e:	d018      	beq.n	10372 <complete_param+0xa2>
        if (strncmp(param_prefix,
   10340:	464a      	mov	r2, r9
   10342:	4659      	mov	r1, fp
   10344:	9800      	ldr	r0, [sp, #0]
   10346:	f00c f8d4 	bl	1c4f2 <strncmp>
   1034a:	4604      	mov	r4, r0
   1034c:	2800      	cmp	r0, #0
   1034e:	d1ec      	bne.n	1032a <complete_param+0x5a>
        if (!first_match) {
   10350:	b16e      	cbz	r6, 1036e <complete_param+0x9e>
        if (first_match && (common_chars < 0)) {
   10352:	2d00      	cmp	r5, #0
   10354:	dbd5      	blt.n	10302 <complete_param+0x32>
        for (j = 0; j < common_chars; j++) {
   10356:	42ac      	cmp	r4, r5
   10358:	dadf      	bge.n	1031a <complete_param+0x4a>
            if (first_match[j] != command->help->params[i].param_name[j]) {
   1035a:	5d32      	ldrb	r2, [r6, r4]
   1035c:	68fb      	ldr	r3, [r7, #12]
   1035e:	689b      	ldr	r3, [r3, #8]
   10360:	f853 3008 	ldr.w	r3, [r3, r8]
   10364:	5d1b      	ldrb	r3, [r3, r4]
   10366:	429a      	cmp	r2, r3
   10368:	d1d7      	bne.n	1031a <complete_param+0x4a>
        for (j = 0; j < common_chars; j++) {
   1036a:	3401      	adds	r4, #1
   1036c:	e7f3      	b.n	10356 <complete_param+0x86>
            first_match = command->help->params[i].param_name;
   1036e:	465e      	mov	r6, fp
   10370:	e7db      	b.n	1032a <complete_param+0x5a>
    if (!first_match) {
   10372:	b1d6      	cbz	r6, 103aa <complete_param+0xda>
    if (common_chars >= 0) {
   10374:	2d00      	cmp	r5, #0
   10376:	da0f      	bge.n	10398 <complete_param+0xc8>
        common_chars = strlen(first_match);
   10378:	4630      	mov	r0, r6
   1037a:	f7fd fbe5 	bl	db48 <strlen>
   1037e:	4605      	mov	r5, r0
    for (i = param_len; i < common_chars; i++) {
   10380:	9c01      	ldr	r4, [sp, #4]
   10382:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   10384:	45a9      	cmp	r9, r5
   10386:	da10      	bge.n	103aa <complete_param+0xda>
        if (!append_char(line, first_match[i])) {
   10388:	f816 1009 	ldrb.w	r1, [r6, r9]
   1038c:	4620      	mov	r0, r4
   1038e:	47b8      	blx	r7
   10390:	b158      	cbz	r0, 103aa <complete_param+0xda>
    for (i = param_len; i < common_chars; i++) {
   10392:	f109 0901 	add.w	r9, r9, #1
   10396:	e7f5      	b.n	10384 <complete_param+0xb4>
        print_prompt();
   10398:	f7ff fe52 	bl	10040 <print_prompt>
        console_printf("%s", line);
   1039c:	9c01      	ldr	r4, [sp, #4]
   1039e:	4621      	mov	r1, r4
   103a0:	4806      	ldr	r0, [pc, #24]	; (103bc <complete_param+0xec>)
   103a2:	f7ff fb63 	bl	fa6c <console_printf>
   103a6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   103a8:	e7ec      	b.n	10384 <complete_param+0xb4>
}
   103aa:	b003      	add	sp, #12
   103ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   103b0:	200044ac 	.word	0x200044ac
   103b4:	00023520 	.word	0x00023520
   103b8:	00023730 	.word	0x00023730
   103bc:	000233dc 	.word	0x000233dc

000103c0 <get_token>:
{
   103c0:	b570      	push	{r4, r5, r6, lr}
   103c2:	4605      	mov	r5, r0
   103c4:	460e      	mov	r6, r1
    char *str = *cur;
   103c6:	6804      	ldr	r4, [r0, #0]
    *null_terminated = 0;
   103c8:	2300      	movs	r3, #0
   103ca:	600b      	str	r3, [r1, #0]
    while (*str && *str == ' ') {
   103cc:	e000      	b.n	103d0 <get_token+0x10>
        str++;
   103ce:	3401      	adds	r4, #1
    while (*str && *str == ' ') {
   103d0:	7823      	ldrb	r3, [r4, #0]
   103d2:	2b20      	cmp	r3, #32
   103d4:	d0fb      	beq.n	103ce <get_token+0xe>
    if (*str == '\0') {
   103d6:	b13b      	cbz	r3, 103e8 <get_token+0x28>
    *cur = str;
   103d8:	602c      	str	r4, [r5, #0]
    str = strchr(str, ' ');
   103da:	2120      	movs	r1, #32
   103dc:	4620      	mov	r0, r4
   103de:	f00c f872 	bl	1c4c6 <strchr>
    if (str == NULL) {
   103e2:	b128      	cbz	r0, 103f0 <get_token+0x30>
    return str - *cur;
   103e4:	1b00      	subs	r0, r0, r4
}
   103e6:	bd70      	pop	{r4, r5, r6, pc}
        *null_terminated = 1;
   103e8:	2301      	movs	r3, #1
   103ea:	6033      	str	r3, [r6, #0]
        return 0;
   103ec:	2000      	movs	r0, #0
   103ee:	e7fa      	b.n	103e6 <get_token+0x26>
        *null_terminated = 1;
   103f0:	2301      	movs	r3, #1
   103f2:	6033      	str	r3, [r6, #0]
        return strlen(*cur);
   103f4:	6828      	ldr	r0, [r5, #0]
   103f6:	f7fd fba7 	bl	db48 <strlen>
   103fa:	e7f4      	b.n	103e6 <get_token+0x26>

000103fc <complete_select>:

static void
complete_select(char *line, char *cur,
                int tok_len, console_append_char_cb append_char)
{
   103fc:	b530      	push	{r4, r5, lr}
   103fe:	b085      	sub	sp, #20
   10400:	4604      	mov	r4, r0
   10402:	9101      	str	r1, [sp, #4]
   10404:	461d      	mov	r5, r3
    int null_terminated = 0;
   10406:	2000      	movs	r0, #0
   10408:	9003      	str	r0, [sp, #12]

    cur += tok_len + 1;
   1040a:	3201      	adds	r2, #1
   1040c:	4411      	add	r1, r2
   1040e:	9101      	str	r1, [sp, #4]
    tok_len = get_token(&cur, &null_terminated);
   10410:	a903      	add	r1, sp, #12
   10412:	a801      	add	r0, sp, #4
   10414:	f7ff ffd4 	bl	103c0 <get_token>
    if (tok_len == 0) {
   10418:	b9a0      	cbnz	r0, 10444 <complete_select+0x48>
        if (default_module != -1) {
   1041a:	4b12      	ldr	r3, [pc, #72]	; (10464 <complete_select+0x68>)
   1041c:	681b      	ldr	r3, [r3, #0]
   1041e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   10422:	d001      	beq.n	10428 <complete_select+0x2c>
    if (null_terminated) {
        if (default_module == -1) {
            complete_module(line, cur, tok_len, append_char);
        }
    }
}
   10424:	b005      	add	sp, #20
   10426:	bd30      	pop	{r4, r5, pc}
        console_printf("\n");
   10428:	480f      	ldr	r0, [pc, #60]	; (10468 <complete_select+0x6c>)
   1042a:	f7ff fb1f 	bl	fa6c <console_printf>
        print_modules(streamer_console_get());
   1042e:	f001 fffb 	bl	12428 <streamer_console_get>
   10432:	f7ff fc35 	bl	fca0 <print_modules>
        print_prompt();
   10436:	f7ff fe03 	bl	10040 <print_prompt>
        console_printf("%s", line);
   1043a:	4621      	mov	r1, r4
   1043c:	480b      	ldr	r0, [pc, #44]	; (1046c <complete_select+0x70>)
   1043e:	f7ff fb15 	bl	fa6c <console_printf>
        return;
   10442:	e7ef      	b.n	10424 <complete_select+0x28>
   10444:	4602      	mov	r2, r0
    if (null_terminated) {
   10446:	9b03      	ldr	r3, [sp, #12]
   10448:	2b00      	cmp	r3, #0
   1044a:	d0eb      	beq.n	10424 <complete_select+0x28>
        if (default_module == -1) {
   1044c:	4b05      	ldr	r3, [pc, #20]	; (10464 <complete_select+0x68>)
   1044e:	681b      	ldr	r3, [r3, #0]
   10450:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   10454:	d1e6      	bne.n	10424 <complete_select+0x28>
            complete_module(line, cur, tok_len, append_char);
   10456:	462b      	mov	r3, r5
   10458:	9901      	ldr	r1, [sp, #4]
   1045a:	4620      	mov	r0, r4
   1045c:	f7ff fe08 	bl	10070 <complete_module>
   10460:	e7e0      	b.n	10424 <complete_select+0x28>
   10462:	bf00      	nop
   10464:	20000620 	.word	0x20000620
   10468:	00023520 	.word	0x00023520
   1046c:	000233dc 	.word	0x000233dc

00010470 <line2argv>:
{
   10470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10472:	460d      	mov	r5, r1
   10474:	4616      	mov	r6, r2
   10476:	461f      	mov	r7, r3
    if (!strlen(str)) {
   10478:	7803      	ldrb	r3, [r0, #0]
   1047a:	b91b      	cbnz	r3, 10484 <line2argv+0x14>
        return 0;
   1047c:	2400      	movs	r4, #0
}
   1047e:	4620      	mov	r0, r4
   10480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        str++;
   10482:	3001      	adds	r0, #1
    while (*str && *str == ' ') {
   10484:	7804      	ldrb	r4, [r0, #0]
   10486:	2c20      	cmp	r4, #32
   10488:	d0fb      	beq.n	10482 <line2argv+0x12>
    if (!*str) {
   1048a:	b314      	cbz	r4, 104d2 <line2argv+0x62>
    argv[argc++] = str;
   1048c:	6028      	str	r0, [r5, #0]
   1048e:	2401      	movs	r4, #1
    while ((str = strchr(str, ' '))) {
   10490:	e00a      	b.n	104a8 <line2argv+0x38>
            str++;
   10492:	3001      	adds	r0, #1
        while (*str && *str == ' ') {
   10494:	7803      	ldrb	r3, [r0, #0]
   10496:	2b20      	cmp	r3, #32
   10498:	d0fb      	beq.n	10492 <line2argv+0x22>
        if (!*str) {
   1049a:	b1b3      	cbz	r3, 104ca <line2argv+0x5a>
        argv[argc++] = str;
   1049c:	1c63      	adds	r3, r4, #1
   1049e:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
        if (argc == size) {
   104a2:	42b3      	cmp	r3, r6
   104a4:	d00a      	beq.n	104bc <line2argv+0x4c>
        argv[argc++] = str;
   104a6:	461c      	mov	r4, r3
    while ((str = strchr(str, ' '))) {
   104a8:	2120      	movs	r1, #32
   104aa:	f00c f80c 	bl	1c4c6 <strchr>
   104ae:	4603      	mov	r3, r0
   104b0:	b158      	cbz	r0, 104ca <line2argv+0x5a>
        *str++ = '\0';
   104b2:	4618      	mov	r0, r3
   104b4:	2300      	movs	r3, #0
   104b6:	f800 3b01 	strb.w	r3, [r0], #1
        while (*str && *str == ' ') {
   104ba:	e7eb      	b.n	10494 <line2argv+0x24>
            streamer_printf(streamer, "Too many parameters (max %zu)\n",
   104bc:	1e72      	subs	r2, r6, #1
   104be:	4906      	ldr	r1, [pc, #24]	; (104d8 <line2argv+0x68>)
   104c0:	4638      	mov	r0, r7
   104c2:	f001 ff96 	bl	123f2 <streamer_printf>
            return 0;
   104c6:	2400      	movs	r4, #0
   104c8:	e7d9      	b.n	1047e <line2argv+0xe>
    argv[argc] = NULL;
   104ca:	2300      	movs	r3, #0
   104cc:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
    return argc;
   104d0:	e7d5      	b.n	1047e <line2argv+0xe>
        return 0;
   104d2:	2400      	movs	r4, #0
   104d4:	e7d3      	b.n	1047e <line2argv+0xe>
   104d6:	bf00      	nop
   104d8:	00023590 	.word	0x00023590

000104dc <get_last_token>:
{
   104dc:	b510      	push	{r4, lr}
   104de:	4604      	mov	r4, r0
    *cur = strrchr(*cur, ' ');
   104e0:	2120      	movs	r1, #32
   104e2:	6800      	ldr	r0, [r0, #0]
   104e4:	f00c f816 	bl	1c514 <strrchr>
   104e8:	6020      	str	r0, [r4, #0]
    if (*cur == NULL) {
   104ea:	b120      	cbz	r0, 104f6 <get_last_token+0x1a>
    (*cur)++;
   104ec:	3001      	adds	r0, #1
   104ee:	6020      	str	r0, [r4, #0]
    return strlen(*cur);
   104f0:	f7fd fb2a 	bl	db48 <strlen>
}
   104f4:	bd10      	pop	{r4, pc}
        return 0;
   104f6:	2000      	movs	r0, #0
   104f8:	e7fc      	b.n	104f4 <get_last_token+0x18>
	...

000104fc <completion>:

static void
completion(char *line, console_append_char_cb append_char)
{
   104fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10500:	b085      	sub	sp, #20
   10502:	4605      	mov	r5, r0
   10504:	460c      	mov	r4, r1
    char *cur;
    int tok_len;
    int module, command;
    int null_terminated = 0;
   10506:	2100      	movs	r1, #0
   10508:	9102      	str	r1, [sp, #8]

    /*
     * line to completion is not ended by '\0' as the line that gets from
     * os_eventq_get function
     */
    if (!append_char(line, '\0')) {
   1050a:	47a0      	blx	r4
   1050c:	b910      	cbnz	r0, 10514 <completion+0x18>
        return;
    }
    complete_param(line, cur, tok_len,
                   module, command, append_char);
    return;
}
   1050e:	b005      	add	sp, #20
   10510:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    cur = line;
   10514:	9503      	str	r5, [sp, #12]
    tok_len = get_token(&cur, &null_terminated);
   10516:	a902      	add	r1, sp, #8
   10518:	a803      	add	r0, sp, #12
   1051a:	f7ff ff51 	bl	103c0 <get_token>
    if (tok_len == 0) {
   1051e:	4606      	mov	r6, r0
   10520:	b168      	cbz	r0, 1053e <completion+0x42>
    if (null_terminated) {
   10522:	9b02      	ldr	r3, [sp, #8]
   10524:	b363      	cbz	r3, 10580 <completion+0x84>
        if (default_module == -1) {
   10526:	4b4d      	ldr	r3, [pc, #308]	; (1065c <completion+0x160>)
   10528:	681b      	ldr	r3, [r3, #0]
   1052a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1052e:	d020      	beq.n	10572 <completion+0x76>
        complete_command(line, cur, tok_len,
   10530:	9400      	str	r4, [sp, #0]
   10532:	4602      	mov	r2, r0
   10534:	9903      	ldr	r1, [sp, #12]
   10536:	4628      	mov	r0, r5
   10538:	f7ff fe22 	bl	10180 <complete_command>
        return;
   1053c:	e7e7      	b.n	1050e <completion+0x12>
        console_printf("\n");
   1053e:	4848      	ldr	r0, [pc, #288]	; (10660 <completion+0x164>)
   10540:	f7ff fa94 	bl	fa6c <console_printf>
        if (default_module == -1) {
   10544:	4b45      	ldr	r3, [pc, #276]	; (1065c <completion+0x160>)
   10546:	681c      	ldr	r4, [r3, #0]
   10548:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   1054c:	d00c      	beq.n	10568 <completion+0x6c>
            print_module_commands(default_module, streamer_console_get());
   1054e:	f001 ff6b 	bl	12428 <streamer_console_get>
   10552:	4601      	mov	r1, r0
   10554:	4620      	mov	r0, r4
   10556:	f7ff fb6d 	bl	fc34 <print_module_commands>
        print_prompt();
   1055a:	f7ff fd71 	bl	10040 <print_prompt>
        console_printf("%s", line);
   1055e:	4629      	mov	r1, r5
   10560:	4840      	ldr	r0, [pc, #256]	; (10664 <completion+0x168>)
   10562:	f7ff fa83 	bl	fa6c <console_printf>
        return;
   10566:	e7d2      	b.n	1050e <completion+0x12>
            print_modules(streamer_console_get());
   10568:	f001 ff5e 	bl	12428 <streamer_console_get>
   1056c:	f7ff fb98 	bl	fca0 <print_modules>
   10570:	e7f3      	b.n	1055a <completion+0x5e>
            complete_module(line, cur, tok_len, append_char);
   10572:	4623      	mov	r3, r4
   10574:	4602      	mov	r2, r0
   10576:	9903      	ldr	r1, [sp, #12]
   10578:	4628      	mov	r0, r5
   1057a:	f7ff fd79 	bl	10070 <complete_module>
            return;
   1057e:	e7c6      	b.n	1050e <completion+0x12>
    if (strncmp("select", cur, tok_len) == 0) {
   10580:	f8dd 800c 	ldr.w	r8, [sp, #12]
   10584:	4602      	mov	r2, r0
   10586:	4641      	mov	r1, r8
   10588:	4837      	ldr	r0, [pc, #220]	; (10668 <completion+0x16c>)
   1058a:	f00b ffb2 	bl	1c4f2 <strncmp>
   1058e:	b300      	cbz	r0, 105d2 <completion+0xd6>
    if (default_module != -1) {
   10590:	4b32      	ldr	r3, [pc, #200]	; (1065c <completion+0x160>)
   10592:	681f      	ldr	r7, [r3, #0]
   10594:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   10598:	d022      	beq.n	105e0 <completion+0xe4>
    command = get_command_from_module(cur, tok_len, module);
   1059a:	f8dd 900c 	ldr.w	r9, [sp, #12]
   1059e:	463a      	mov	r2, r7
   105a0:	4631      	mov	r1, r6
   105a2:	4648      	mov	r0, r9
   105a4:	f7ff fe70 	bl	10288 <get_command_from_module>
   105a8:	4680      	mov	r8, r0
    if (command == -1) {
   105aa:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   105ae:	d0ae      	beq.n	1050e <completion+0x12>
    cur += tok_len;
   105b0:	444e      	add	r6, r9
   105b2:	9603      	str	r6, [sp, #12]
    tok_len = get_last_token(&cur);
   105b4:	a803      	add	r0, sp, #12
   105b6:	f7ff ff91 	bl	104dc <get_last_token>
    if (tok_len == 0) {
   105ba:	4602      	mov	r2, r0
   105bc:	2800      	cmp	r0, #0
   105be:	d03b      	beq.n	10638 <completion+0x13c>
    complete_param(line, cur, tok_len,
   105c0:	9401      	str	r4, [sp, #4]
   105c2:	f8cd 8000 	str.w	r8, [sp]
   105c6:	463b      	mov	r3, r7
   105c8:	9903      	ldr	r1, [sp, #12]
   105ca:	4628      	mov	r0, r5
   105cc:	f7ff fe80 	bl	102d0 <complete_param>
    return;
   105d0:	e79d      	b.n	1050e <completion+0x12>
        complete_select(line, cur, tok_len, append_char);
   105d2:	4623      	mov	r3, r4
   105d4:	4632      	mov	r2, r6
   105d6:	4641      	mov	r1, r8
   105d8:	4628      	mov	r0, r5
   105da:	f7ff ff0f 	bl	103fc <complete_select>
        return;
   105de:	e796      	b.n	1050e <completion+0x12>
        module = get_destination_module(cur, tok_len);
   105e0:	4631      	mov	r1, r6
   105e2:	4640      	mov	r0, r8
   105e4:	f7ff fb96 	bl	fd14 <get_destination_module>
   105e8:	4607      	mov	r7, r0
        if (module == -1) {
   105ea:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   105ee:	d08e      	beq.n	1050e <completion+0x12>
        cur += tok_len + 1;
   105f0:	1c73      	adds	r3, r6, #1
   105f2:	4443      	add	r3, r8
   105f4:	9303      	str	r3, [sp, #12]
        tok_len = get_token(&cur, &null_terminated);
   105f6:	a902      	add	r1, sp, #8
   105f8:	a803      	add	r0, sp, #12
   105fa:	f7ff fee1 	bl	103c0 <get_token>
        if (tok_len == 0) {
   105fe:	4606      	mov	r6, r0
   10600:	b150      	cbz	r0, 10618 <completion+0x11c>
        if (null_terminated) {
   10602:	9b02      	ldr	r3, [sp, #8]
   10604:	2b00      	cmp	r3, #0
   10606:	d0c8      	beq.n	1059a <completion+0x9e>
            complete_command(line, cur, tok_len,
   10608:	9400      	str	r4, [sp, #0]
   1060a:	463b      	mov	r3, r7
   1060c:	4602      	mov	r2, r0
   1060e:	9903      	ldr	r1, [sp, #12]
   10610:	4628      	mov	r0, r5
   10612:	f7ff fdb5 	bl	10180 <complete_command>
            return;
   10616:	e77a      	b.n	1050e <completion+0x12>
            console_printf("\n");
   10618:	4811      	ldr	r0, [pc, #68]	; (10660 <completion+0x164>)
   1061a:	f7ff fa27 	bl	fa6c <console_printf>
            print_module_commands(module, streamer_console_get());
   1061e:	f001 ff03 	bl	12428 <streamer_console_get>
   10622:	4601      	mov	r1, r0
   10624:	4638      	mov	r0, r7
   10626:	f7ff fb05 	bl	fc34 <print_module_commands>
            print_prompt();
   1062a:	f7ff fd09 	bl	10040 <print_prompt>
            console_printf("%s", line);
   1062e:	4629      	mov	r1, r5
   10630:	480c      	ldr	r0, [pc, #48]	; (10664 <completion+0x168>)
   10632:	f7ff fa1b 	bl	fa6c <console_printf>
            return;
   10636:	e76a      	b.n	1050e <completion+0x12>
        console_printf("\n");
   10638:	4809      	ldr	r0, [pc, #36]	; (10660 <completion+0x164>)
   1063a:	f7ff fa17 	bl	fa6c <console_printf>
        print_command_params(module, command, streamer_console_get());
   1063e:	f001 fef3 	bl	12428 <streamer_console_get>
   10642:	4602      	mov	r2, r0
   10644:	4641      	mov	r1, r8
   10646:	4638      	mov	r0, r7
   10648:	f7ff fb42 	bl	fcd0 <print_command_params>
        print_prompt();
   1064c:	f7ff fcf8 	bl	10040 <print_prompt>
        console_printf("%s", line);
   10650:	4629      	mov	r1, r5
   10652:	4804      	ldr	r0, [pc, #16]	; (10664 <completion+0x168>)
   10654:	f7ff fa0a 	bl	fa6c <console_printf>
        return;
   10658:	e759      	b.n	1050e <completion+0x12>
   1065a:	bf00      	nop
   1065c:	20000620 	.word	0x20000620
   10660:	00023520 	.word	0x00023520
   10664:	000233dc 	.word	0x000233dc
   10668:	000234e4 	.word	0x000234e4

0001066c <shell_avail_queue_init>:
    }
}

static void
shell_avail_queue_init(void)
{
   1066c:	b510      	push	{r4, lr}
    int i;

    for (i = 0; i < MYNEWT_VAL(SHELL_MAX_CMD_QUEUED); i++) {
   1066e:	2400      	movs	r4, #0
   10670:	e00b      	b.n	1068a <shell_avail_queue_init+0x1e>
        shell_console_ev[i].ev_cb = shell;
   10672:	4807      	ldr	r0, [pc, #28]	; (10690 <shell_avail_queue_init+0x24>)
   10674:	eb00 1004 	add.w	r0, r0, r4, lsl #4
   10678:	4b06      	ldr	r3, [pc, #24]	; (10694 <shell_avail_queue_init+0x28>)
   1067a:	6043      	str	r3, [r0, #4]
        shell_console_ev[i].ev_arg = &buf[i];
   1067c:	4b06      	ldr	r3, [pc, #24]	; (10698 <shell_avail_queue_init+0x2c>)
   1067e:	eb03 2304 	add.w	r3, r3, r4, lsl #8
   10682:	6083      	str	r3, [r0, #8]
        console_line_event_put(&shell_console_ev[i]);
   10684:	f7ff f992 	bl	f9ac <console_line_event_put>
    for (i = 0; i < MYNEWT_VAL(SHELL_MAX_CMD_QUEUED); i++) {
   10688:	3401      	adds	r4, #1
   1068a:	2c01      	cmp	r4, #1
   1068c:	ddf1      	ble.n	10672 <shell_avail_queue_init+0x6>
    }
}
   1068e:	bd10      	pop	{r4, pc}
   10690:	20004488 	.word	0x20004488
   10694:	000107dd 	.word	0x000107dd
   10698:	20004128 	.word	0x20004128

0001069c <shell_evq_set>:
{
   1069c:	b508      	push	{r3, lr}
    shell_evq = evq;
   1069e:	4b02      	ldr	r3, [pc, #8]	; (106a8 <shell_evq_set+0xc>)
   106a0:	6018      	str	r0, [r3, #0]
    console_line_queue_set(shell_evq);
   106a2:	f7ff f97d 	bl	f9a0 <console_line_queue_set>
}
   106a6:	bd08      	pop	{r3, pc}
   106a8:	200044a8 	.word	0x200044a8

000106ac <shell_exec>:
{
   106ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   106b0:	4607      	mov	r7, r0
   106b2:	460e      	mov	r6, r1
   106b4:	4615      	mov	r5, r2
    cmd = shell_find_cmd(argc, argv, streamer);
   106b6:	f7ff fbad 	bl	fe14 <shell_find_cmd>
    if (!cmd) {
   106ba:	4604      	mov	r4, r0
   106bc:	b1b8      	cbz	r0, 106ee <shell_exec+0x42>
    if (default_module == -1 && cmd != &shell_cmd_select_module &&
   106be:	4b23      	ldr	r3, [pc, #140]	; (1074c <shell_exec+0xa0>)
   106c0:	681b      	ldr	r3, [r3, #0]
   106c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   106c6:	d026      	beq.n	10716 <shell_exec+0x6a>
    size_t argc_offset = 0;
   106c8:	2000      	movs	r0, #0
    if (!cmd->sc_ext) {
   106ca:	7823      	ldrb	r3, [r4, #0]
   106cc:	f013 0f01 	tst.w	r3, #1
   106d0:	d12d      	bne.n	1072e <shell_exec+0x82>
        rc = cmd->sc_cmd_func(argc - argc_offset, &argv[argc_offset]);
   106d2:	6863      	ldr	r3, [r4, #4]
   106d4:	eb06 0180 	add.w	r1, r6, r0, lsl #2
   106d8:	1a38      	subs	r0, r7, r0
   106da:	4798      	blx	r3
   106dc:	4604      	mov	r4, r0
    if (rc < 0) {
   106de:	2c00      	cmp	r4, #0
   106e0:	db2f      	blt.n	10742 <shell_exec+0x96>
    print_prompt_if_console(streamer);
   106e2:	4628      	mov	r0, r5
   106e4:	f7ff fcba 	bl	1005c <print_prompt_if_console>
}
   106e8:	4620      	mov	r0, r4
   106ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (app_cmd.sc_cmd_func != NULL) {
   106ee:	4b18      	ldr	r3, [pc, #96]	; (10750 <shell_exec+0xa4>)
   106f0:	685b      	ldr	r3, [r3, #4]
   106f2:	b10b      	cbz	r3, 106f8 <shell_exec+0x4c>
            cmd = &app_cmd;
   106f4:	4c16      	ldr	r4, [pc, #88]	; (10750 <shell_exec+0xa4>)
   106f6:	e7e2      	b.n	106be <shell_exec+0x12>
            streamer_printf(streamer, "Unrecognized command: %s\n", argv[0]);
   106f8:	6832      	ldr	r2, [r6, #0]
   106fa:	4916      	ldr	r1, [pc, #88]	; (10754 <shell_exec+0xa8>)
   106fc:	4628      	mov	r0, r5
   106fe:	f001 fe78 	bl	123f2 <streamer_printf>
            streamer_printf(streamer,
   10702:	4915      	ldr	r1, [pc, #84]	; (10758 <shell_exec+0xac>)
   10704:	4628      	mov	r0, r5
   10706:	f001 fe74 	bl	123f2 <streamer_printf>
            print_prompt_if_console(streamer);
   1070a:	4628      	mov	r0, r5
   1070c:	f7ff fca6 	bl	1005c <print_prompt_if_console>
            return SYS_ENOENT;
   10710:	f06f 0403 	mvn.w	r4, #3
   10714:	e7e8      	b.n	106e8 <shell_exec+0x3c>
    if (default_module == -1 && cmd != &shell_cmd_select_module &&
   10716:	4b11      	ldr	r3, [pc, #68]	; (1075c <shell_exec+0xb0>)
   10718:	429c      	cmp	r4, r3
   1071a:	d006      	beq.n	1072a <shell_exec+0x7e>
   1071c:	4b10      	ldr	r3, [pc, #64]	; (10760 <shell_exec+0xb4>)
   1071e:	429c      	cmp	r4, r3
   10720:	d001      	beq.n	10726 <shell_exec+0x7a>
        argc_offset = 1;
   10722:	2001      	movs	r0, #1
   10724:	e7d1      	b.n	106ca <shell_exec+0x1e>
    size_t argc_offset = 0;
   10726:	2000      	movs	r0, #0
   10728:	e7cf      	b.n	106ca <shell_exec+0x1e>
   1072a:	2000      	movs	r0, #0
   1072c:	e7cd      	b.n	106ca <shell_exec+0x1e>
        rc = cmd->sc_cmd_ext_func(cmd, argc - argc_offset, &argv[argc_offset],
   1072e:	f8d4 8004 	ldr.w	r8, [r4, #4]
   10732:	462b      	mov	r3, r5
   10734:	eb06 0280 	add.w	r2, r6, r0, lsl #2
   10738:	1a39      	subs	r1, r7, r0
   1073a:	4620      	mov	r0, r4
   1073c:	47c0      	blx	r8
   1073e:	4604      	mov	r4, r0
   10740:	e7cd      	b.n	106de <shell_exec+0x32>
        show_cmd_help(argv, streamer);
   10742:	4629      	mov	r1, r5
   10744:	4630      	mov	r0, r6
   10746:	f7ff fbc7 	bl	fed8 <show_cmd_help>
   1074a:	e7ca      	b.n	106e2 <shell_exec+0x36>
   1074c:	20000620 	.word	0x20000620
   10750:	20004114 	.word	0x20004114
   10754:	00023498 	.word	0x00023498
   10758:	000235b0 	.word	0x000235b0
   1075c:	00023670 	.word	0x00023670
   10760:	00023660 	.word	0x00023660

00010764 <shell_process_command>:
{
   10764:	b510      	push	{r4, lr}
   10766:	b08e      	sub	sp, #56	; 0x38
   10768:	460c      	mov	r4, r1
    argc = line2argv(line, argv, MYNEWT_VAL(SHELL_CMD_ARGC_MAX) + 1, streamer);
   1076a:	460b      	mov	r3, r1
   1076c:	220d      	movs	r2, #13
   1076e:	a901      	add	r1, sp, #4
   10770:	f7ff fe7e 	bl	10470 <line2argv>
    if (!argc) {
   10774:	b128      	cbz	r0, 10782 <shell_process_command+0x1e>
    shell_exec(argc, argv, streamer);
   10776:	4622      	mov	r2, r4
   10778:	a901      	add	r1, sp, #4
   1077a:	f7ff ff97 	bl	106ac <shell_exec>
}
   1077e:	b00e      	add	sp, #56	; 0x38
   10780:	bd10      	pop	{r4, pc}
        print_prompt_if_console(streamer);
   10782:	4620      	mov	r0, r4
   10784:	f7ff fc6a 	bl	1005c <print_prompt_if_console>
        return;
   10788:	e7f9      	b.n	1077e <shell_process_command+0x1a>

0001078a <shell_process_nlip_line>:
{
   1078a:	b570      	push	{r4, r5, r6, lr}
   1078c:	4604      	mov	r4, r0
   1078e:	460e      	mov	r6, r1
    shell_line_len = strlen(shell_line);
   10790:	f7fd f9da 	bl	db48 <strlen>
    if (shell_line_len > 2) {
   10794:	2802      	cmp	r0, #2
   10796:	d91c      	bls.n	107d2 <shell_process_nlip_line+0x48>
   10798:	4605      	mov	r5, r0
        if (shell_line[0] == SHELL_NLIP_PKT_START1 &&
   1079a:	7823      	ldrb	r3, [r4, #0]
   1079c:	2b06      	cmp	r3, #6
   1079e:	d009      	beq.n	107b4 <shell_process_nlip_line+0x2a>
        } else if (shell_line[0] == SHELL_NLIP_DATA_START1 &&
   107a0:	2b04      	cmp	r3, #4
   107a2:	d102      	bne.n	107aa <shell_process_nlip_line+0x20>
                shell_line[1] == SHELL_NLIP_DATA_START2) {
   107a4:	7863      	ldrb	r3, [r4, #1]
        } else if (shell_line[0] == SHELL_NLIP_DATA_START1 &&
   107a6:	2b14      	cmp	r3, #20
   107a8:	d00e      	beq.n	107c8 <shell_process_nlip_line+0x3e>
            shell_process_command(shell_line, streamer);
   107aa:	4631      	mov	r1, r6
   107ac:	4620      	mov	r0, r4
   107ae:	f7ff ffd9 	bl	10764 <shell_process_command>
}
   107b2:	bd70      	pop	{r4, r5, r6, pc}
                shell_line[1] == SHELL_NLIP_PKT_START2) {
   107b4:	7862      	ldrb	r2, [r4, #1]
        if (shell_line[0] == SHELL_NLIP_PKT_START1 &&
   107b6:	2a09      	cmp	r2, #9
   107b8:	d1f2      	bne.n	107a0 <shell_process_nlip_line+0x16>
            shell_nlip_clear_pkt();
   107ba:	f000 f95b 	bl	10a74 <shell_nlip_clear_pkt>
            shell_nlip_process(&shell_line[2], shell_line_len - 2);
   107be:	1ea9      	subs	r1, r5, #2
   107c0:	1ca0      	adds	r0, r4, #2
   107c2:	f000 f969 	bl	10a98 <shell_nlip_process>
   107c6:	e7f4      	b.n	107b2 <shell_process_nlip_line+0x28>
            shell_nlip_process(&shell_line[2], shell_line_len - 2);
   107c8:	1ea9      	subs	r1, r5, #2
   107ca:	1ca0      	adds	r0, r4, #2
   107cc:	f000 f964 	bl	10a98 <shell_nlip_process>
   107d0:	e7ef      	b.n	107b2 <shell_process_nlip_line+0x28>
        shell_process_command(shell_line, streamer);
   107d2:	4631      	mov	r1, r6
   107d4:	4620      	mov	r0, r4
   107d6:	f7ff ffc5 	bl	10764 <shell_process_command>
}
   107da:	e7ea      	b.n	107b2 <shell_process_nlip_line+0x28>

000107dc <shell>:
{
   107dc:	b538      	push	{r3, r4, r5, lr}
    if (!ev) {
   107de:	b160      	cbz	r0, 107fa <shell+0x1e>
   107e0:	4604      	mov	r4, r0
    cmd = ev->ev_arg;
   107e2:	6885      	ldr	r5, [r0, #8]
    if (!cmd) {
   107e4:	b165      	cbz	r5, 10800 <shell+0x24>
    streamer = streamer_console_get();
   107e6:	f001 fe1f 	bl	12428 <streamer_console_get>
   107ea:	4601      	mov	r1, r0
    shell_process_nlip_line(cmd->line, streamer);
   107ec:	4628      	mov	r0, r5
   107ee:	f7ff ffcc 	bl	1078a <shell_process_nlip_line>
    console_line_event_put(ev);
   107f2:	4620      	mov	r0, r4
   107f4:	f7ff f8da 	bl	f9ac <console_line_event_put>
}
   107f8:	bd38      	pop	{r3, r4, r5, pc}
        print_prompt();
   107fa:	f7ff fc21 	bl	10040 <print_prompt>
        return;
   107fe:	e7fb      	b.n	107f8 <shell+0x1c>
        print_prompt();
   10800:	f7ff fc1e 	bl	10040 <print_prompt>
        return;
   10804:	e7f8      	b.n	107f8 <shell+0x1c>
	...

00010808 <shell_register>:

int
shell_register(const char *module_name, const struct shell_cmd *commands)
{
   10808:	b508      	push	{r3, lr}
    if (num_of_shell_entities >= MYNEWT_VAL(SHELL_MAX_MODULES)) {
   1080a:	4b0d      	ldr	r3, [pc, #52]	; (10840 <shell_register+0x38>)
   1080c:	681b      	ldr	r3, [r3, #0]
   1080e:	2b02      	cmp	r3, #2
   10810:	d80a      	bhi.n	10828 <shell_register+0x20>
        MODLOG_ERROR(LOG_MODULE_DEFAULT, "Max number of modules reached\n");
        assert(0);
    }

    shell_modules[num_of_shell_entities].name = module_name;
   10812:	4a0c      	ldr	r2, [pc, #48]	; (10844 <shell_register+0x3c>)
   10814:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
    shell_modules[num_of_shell_entities].commands = commands;
   10818:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   1081c:	6051      	str	r1, [r2, #4]
    ++num_of_shell_entities;
   1081e:	3301      	adds	r3, #1
   10820:	4a07      	ldr	r2, [pc, #28]	; (10840 <shell_register+0x38>)
   10822:	6013      	str	r3, [r2, #0]

    return 0;
}
   10824:	2000      	movs	r0, #0
   10826:	bd08      	pop	{r3, pc}
        MODLOG_ERROR(LOG_MODULE_DEFAULT, "Max number of modules reached\n");
   10828:	4a07      	ldr	r2, [pc, #28]	; (10848 <shell_register+0x40>)
   1082a:	2103      	movs	r1, #3
   1082c:	2000      	movs	r0, #0
   1082e:	f00e fdbf 	bl	1f3b0 <modlog_printf>
        assert(0);
   10832:	2300      	movs	r3, #0
   10834:	461a      	mov	r2, r3
   10836:	4619      	mov	r1, r3
   10838:	4618      	mov	r0, r3
   1083a:	f7f8 fb93 	bl	8f64 <__assert_func>
   1083e:	bf00      	nop
   10840:	20004480 	.word	0x20004480
   10844:	200044ac 	.word	0x200044ac
   10848:	000235dc 	.word	0x000235dc

0001084c <shell_cmd_register>:
static int num_compat_commands;
static int module_registered;

int
shell_cmd_register(const struct shell_cmd *sc)
{
   1084c:	b570      	push	{r4, r5, r6, lr}
    int rc;

    if (num_compat_commands >= MYNEWT_VAL(SHELL_MAX_COMPAT_COMMANDS)) {
   1084e:	4b1a      	ldr	r3, [pc, #104]	; (108b8 <shell_cmd_register+0x6c>)
   10850:	681b      	ldr	r3, [r3, #0]
   10852:	2b13      	cmp	r3, #19
   10854:	dc10      	bgt.n	10878 <shell_cmd_register+0x2c>
   10856:	4604      	mov	r4, r0
        MODLOG_ERROR(LOG_MODULE_DEFAULT,
                     "Max number of compat commands reached\n");
        assert(0);
    }

    if (!module_registered) {
   10858:	4b18      	ldr	r3, [pc, #96]	; (108bc <shell_cmd_register+0x70>)
   1085a:	681b      	ldr	r3, [r3, #0]
   1085c:	b1bb      	cbz	r3, 1088e <shell_cmd_register+0x42>
                         "Illegal module %s, default is not changed\n",
                         SHELL_COMPAT_MODULE_NAME);
        }
    }

    compat_commands[num_compat_commands] = *sc;
   1085e:	4e16      	ldr	r6, [pc, #88]	; (108b8 <shell_cmd_register+0x6c>)
   10860:	6835      	ldr	r5, [r6, #0]
   10862:	4b17      	ldr	r3, [pc, #92]	; (108c0 <shell_cmd_register+0x74>)
   10864:	eb03 1c05 	add.w	ip, r3, r5, lsl #4
   10868:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1086c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    ++num_compat_commands;
   10870:	3501      	adds	r5, #1
   10872:	6035      	str	r5, [r6, #0]
    return 0;
}
   10874:	2000      	movs	r0, #0
   10876:	bd70      	pop	{r4, r5, r6, pc}
        MODLOG_ERROR(LOG_MODULE_DEFAULT,
   10878:	4a12      	ldr	r2, [pc, #72]	; (108c4 <shell_cmd_register+0x78>)
   1087a:	2103      	movs	r1, #3
   1087c:	2000      	movs	r0, #0
   1087e:	f00e fd97 	bl	1f3b0 <modlog_printf>
        assert(0);
   10882:	2300      	movs	r3, #0
   10884:	461a      	mov	r2, r3
   10886:	4619      	mov	r1, r3
   10888:	4618      	mov	r0, r3
   1088a:	f7f8 fb6b 	bl	8f64 <__assert_func>
        shell_register(SHELL_COMPAT_MODULE_NAME, compat_commands);
   1088e:	4d0e      	ldr	r5, [pc, #56]	; (108c8 <shell_cmd_register+0x7c>)
   10890:	490b      	ldr	r1, [pc, #44]	; (108c0 <shell_cmd_register+0x74>)
   10892:	4628      	mov	r0, r5
   10894:	f7ff ffb8 	bl	10808 <shell_register>
        module_registered = 1;
   10898:	4b08      	ldr	r3, [pc, #32]	; (108bc <shell_cmd_register+0x70>)
   1089a:	2201      	movs	r2, #1
   1089c:	601a      	str	r2, [r3, #0]
        rc = set_default_module(SHELL_COMPAT_MODULE_NAME);
   1089e:	4628      	mov	r0, r5
   108a0:	f7ff fa5e 	bl	fd60 <set_default_module>
        if (rc != 0) {
   108a4:	2800      	cmp	r0, #0
   108a6:	d0da      	beq.n	1085e <shell_cmd_register+0x12>
            MODLOG_ERROR(LOG_MODULE_DEFAULT,
   108a8:	462b      	mov	r3, r5
   108aa:	4a08      	ldr	r2, [pc, #32]	; (108cc <shell_cmd_register+0x80>)
   108ac:	2103      	movs	r1, #3
   108ae:	2000      	movs	r0, #0
   108b0:	f00e fd7e 	bl	1f3b0 <modlog_printf>
   108b4:	e7d3      	b.n	1085e <shell_cmd_register+0x12>
   108b6:	bf00      	nop
   108b8:	2000447c 	.word	0x2000447c
   108bc:	20004478 	.word	0x20004478
   108c0:	20004328 	.word	0x20004328
   108c4:	000235fc 	.word	0x000235fc
   108c8:	00023624 	.word	0x00023624
   108cc:	0002362c 	.word	0x0002362c

000108d0 <shell_init>:
#endif

void
shell_init(void)
{
   108d0:	b508      	push	{r3, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   108d2:	4b0d      	ldr	r3, [pc, #52]	; (10908 <shell_init+0x38>)
   108d4:	781b      	ldrb	r3, [r3, #0]
   108d6:	b193      	cbz	r3, 108fe <shell_init+0x2e>

#if !MYNEWT_VAL(SHELL_TASK)
    return;
#endif

    shell_avail_queue_init();
   108d8:	f7ff fec8 	bl	1066c <shell_avail_queue_init>
    shell_evq_set(os_eventq_dflt_get());
   108dc:	f7f8 ff24 	bl	9728 <os_eventq_dflt_get>
   108e0:	f7ff fedc 	bl	1069c <shell_evq_set>

    prompt = SHELL_PROMPT;
   108e4:	4b09      	ldr	r3, [pc, #36]	; (1090c <shell_init+0x3c>)
   108e6:	4a0a      	ldr	r2, [pc, #40]	; (10910 <shell_init+0x40>)
   108e8:	601a      	str	r2, [r3, #0]

#if MYNEWT_VAL(SHELL_NEWTMGR)
    shell_nlip_init();
   108ea:	f000 f95b 	bl	10ba4 <shell_nlip_init>
#endif

#if MYNEWT_VAL(SHELL_COMPLETION)
    console_set_completion_cb(completion);
   108ee:	4809      	ldr	r0, [pc, #36]	; (10914 <shell_init+0x44>)
   108f0:	f7ff f870 	bl	f9d4 <console_set_completion_cb>
#endif

#if MYNEWT_VAL(SHELL_OS_MODULE)
    shell_os_register();
   108f4:	f000 faac 	bl	10e50 <shell_os_register>
#endif
#if MYNEWT_VAL(SHELL_PROMPT_MODULE)
    shell_prompt_register();
   108f8:	f000 faf0 	bl	10edc <shell_prompt_register>
#endif
#if MYNEWT_VAL(SHELL_BRIDGE)
    shell_bridge_init();
#endif
}
   108fc:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   108fe:	461a      	mov	r2, r3
   10900:	4619      	mov	r1, r3
   10902:	4618      	mov	r0, r3
   10904:	f7f8 fb2e 	bl	8f64 <__assert_func>
   10908:	20004538 	.word	0x20004538
   1090c:	20004484 	.word	0x20004484
   10910:	00023658 	.word	0x00023658
   10914:	000104fd 	.word	0x000104fd

00010918 <shell_nlip_mtx>:
    return (rc);
}

static int
shell_nlip_mtx(struct os_mbuf *m)
{
   10918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1091c:	b08b      	sub	sp, #44	; 0x2c
   1091e:	4680      	mov	r8, r0
#define SHELL_NLIP_MTX_BUF_SIZE (12)
    uint8_t readbuf[SHELL_NLIP_MTX_BUF_SIZE];
    char encodebuf[BASE64_ENCODE_SIZE(SHELL_NLIP_MTX_BUF_SIZE)];
    char pkt_seq[3] = { '\n', SHELL_NLIP_PKT_START1, SHELL_NLIP_PKT_START2 };
   10920:	4b49      	ldr	r3, [pc, #292]	; (10a48 <shell_nlip_mtx+0x130>)
   10922:	681b      	ldr	r3, [r3, #0]
   10924:	f8ad 3008 	strh.w	r3, [sp, #8]
   10928:	0c1b      	lsrs	r3, r3, #16
   1092a:	f88d 300a 	strb.w	r3, [sp, #10]
    char esc_seq[2] = { SHELL_NLIP_DATA_START1, SHELL_NLIP_DATA_START2 };
   1092e:	f241 4304 	movw	r3, #5124	; 0x1404
   10932:	f8ad 3004 	strh.w	r3, [sp, #4]
     *
     * continuation packets are preceded by 04 20 until the entire
     * buffer has been sent.
     */
    crc = CRC16_INITIAL_CRC;
    for (tmp = m; tmp; tmp = SLIST_NEXT(tmp, om_next)) {
   10936:	4604      	mov	r4, r0
    crc = CRC16_INITIAL_CRC;
   10938:	2000      	movs	r0, #0
    for (tmp = m; tmp; tmp = SLIST_NEXT(tmp, om_next)) {
   1093a:	e004      	b.n	10946 <shell_nlip_mtx+0x2e>
        crc = crc16_ccitt(crc, tmp->om_data, tmp->om_len);
   1093c:	88e2      	ldrh	r2, [r4, #6]
   1093e:	6821      	ldr	r1, [r4, #0]
   10940:	f001 fd38 	bl	123b4 <crc16_ccitt>
    for (tmp = m; tmp; tmp = SLIST_NEXT(tmp, om_next)) {
   10944:	68e4      	ldr	r4, [r4, #12]
   10946:	2c00      	cmp	r4, #0
   10948:	d1f8      	bne.n	1093c <shell_nlip_mtx+0x24>
    }
    crc = htons(crc);
   1094a:	f3c0 230f 	ubfx	r3, r0, #8, #16
   1094e:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   10952:	b284      	uxth	r4, r0
    ptr = os_mbuf_extend(m, sizeof(crc));
   10954:	2102      	movs	r1, #2
   10956:	4640      	mov	r0, r8
   10958:	f7f9 ffe2 	bl	a920 <os_mbuf_extend>
    if (!ptr) {
   1095c:	2800      	cmp	r0, #0
   1095e:	d070      	beq.n	10a42 <shell_nlip_mtx+0x12a>
        rc = -1;
        goto err;
    }
    memcpy(ptr, &crc, sizeof(crc));
   10960:	8004      	strh	r4, [r0, #0]

    totlen = OS_MBUF_PKTHDR(m)->omp_len;
   10962:	f8b8 5010 	ldrh.w	r5, [r8, #16]
    off = 0;
    bodylen = 0;
    rb_off = 0;

    rc = console_lock(OS_TICKS_PER_SEC);
   10966:	2080      	movs	r0, #128	; 0x80
   10968:	f7fe fc62 	bl	f230 <console_lock>
    if (rc != OS_OK) {
   1096c:	4682      	mov	sl, r0
   1096e:	b118      	cbz	r0, 10978 <shell_nlip_mtx+0x60>
end:
    (void)console_unlock();

err:
    return (rc);
}
   10970:	4650      	mov	r0, sl
   10972:	b00b      	add	sp, #44	; 0x2c
   10974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    console_write(pkt_seq, sizeof(pkt_seq));
   10978:	2103      	movs	r1, #3
   1097a:	a802      	add	r0, sp, #8
   1097c:	f7fe fe4e 	bl	f61c <console_write>
    dlen = htons(totlen);
   10980:	022b      	lsls	r3, r5, #8
   10982:	ea43 2315 	orr.w	r3, r3, r5, lsr #8
    memcpy(readbuf, &dlen, sizeof(dlen));
   10986:	f8ad 301c 	strh.w	r3, [sp, #28]
    rc = console_lock(OS_TICKS_PER_SEC);
   1098a:	46d3      	mov	fp, sl
    bodylen = 0;
   1098c:	2600      	movs	r6, #0
    rb_off += 2;
   1098e:	2302      	movs	r3, #2
    off = 0;
   10990:	46b1      	mov	r9, r6
    while (totlen > 0) {
   10992:	e01c      	b.n	109ce <shell_nlip_mtx+0xb6>
            rc = os_mbuf_copydata(m, off, dlen, readbuf + rb_off);
   10994:	aa07      	add	r2, sp, #28
   10996:	4413      	add	r3, r2
   10998:	4622      	mov	r2, r4
   1099a:	4649      	mov	r1, r9
   1099c:	4640      	mov	r0, r8
   1099e:	f7f9 feba 	bl	a716 <os_mbuf_copydata>
            if (rc != 0) {
   109a2:	4683      	mov	fp, r0
   109a4:	2800      	cmp	r0, #0
   109a6:	d14a      	bne.n	10a3e <shell_nlip_mtx+0x126>
            elen = base64_encode(readbuf, dlen + rb_off, encodebuf, 0);
   109a8:	2300      	movs	r3, #0
   109aa:	aa03      	add	r2, sp, #12
   109ac:	4639      	mov	r1, r7
   109ae:	a807      	add	r0, sp, #28
   109b0:	f001 fe7a 	bl	126a8 <base64_encode>
   109b4:	4607      	mov	r7, r0
            console_write(encodebuf, elen);
   109b6:	4601      	mov	r1, r0
   109b8:	a803      	add	r0, sp, #12
   109ba:	f7fe fe2f 	bl	f61c <console_write>
            bodylen += elen;
   109be:	443e      	add	r6, r7
   109c0:	b2b6      	uxth	r6, r6
            totlen -= dlen;
   109c2:	1b2d      	subs	r5, r5, r4
   109c4:	b2ad      	uxth	r5, r5
            off += dlen;
   109c6:	44a1      	add	r9, r4
   109c8:	fa1f f989 	uxth.w	r9, r9
            bodylen = 0;
   109cc:	4653      	mov	r3, sl
    while (totlen > 0) {
   109ce:	b335      	cbz	r5, 10a1e <shell_nlip_mtx+0x106>
        dlen = min(SHELL_NLIP_MTX_BUF_SIZE - rb_off, totlen);
   109d0:	f1c3 040c 	rsb	r4, r3, #12
   109d4:	42ac      	cmp	r4, r5
   109d6:	bfa8      	it	ge
   109d8:	462c      	movge	r4, r5
   109da:	b2a4      	uxth	r4, r4
        newbodylen = 2 + bodylen + BASE64_ENCODE_SIZE(dlen + rb_off) + 1;
   109dc:	191f      	adds	r7, r3, r4
   109de:	1e79      	subs	r1, r7, #1
   109e0:	4a1a      	ldr	r2, [pc, #104]	; (10a4c <shell_nlip_mtx+0x134>)
   109e2:	fb82 0201 	smull	r0, r2, r2, r1
   109e6:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
   109ea:	3201      	adds	r2, #1
   109ec:	eb06 0282 	add.w	r2, r6, r2, lsl #2
   109f0:	b292      	uxth	r2, r2
   109f2:	3203      	adds	r2, #3
   109f4:	b292      	uxth	r2, r2
        if (newbodylen > MGMT_NLIP_MAX_FRAME) {
   109f6:	2a7f      	cmp	r2, #127	; 0x7f
   109f8:	d9cc      	bls.n	10994 <shell_nlip_mtx+0x7c>
            elen = base64_pad(encodebuf, bodylen);
   109fa:	4631      	mov	r1, r6
   109fc:	a803      	add	r0, sp, #12
   109fe:	f001 fe9d 	bl	1273c <base64_pad>
   10a02:	4601      	mov	r1, r0
            console_write(encodebuf, elen);
   10a04:	a803      	add	r0, sp, #12
   10a06:	f7fe fe09 	bl	f61c <console_write>
            console_write("\n", 1);
   10a0a:	2101      	movs	r1, #1
   10a0c:	4810      	ldr	r0, [pc, #64]	; (10a50 <shell_nlip_mtx+0x138>)
   10a0e:	f7fe fe05 	bl	f61c <console_write>
            console_write(esc_seq, sizeof(esc_seq));
   10a12:	2102      	movs	r1, #2
   10a14:	a801      	add	r0, sp, #4
   10a16:	f7fe fe01 	bl	f61c <console_write>
            bodylen = 0;
   10a1a:	2600      	movs	r6, #0
   10a1c:	e7d6      	b.n	109cc <shell_nlip_mtx+0xb4>
    elen = base64_pad(encodebuf, bodylen);
   10a1e:	4631      	mov	r1, r6
   10a20:	a803      	add	r0, sp, #12
   10a22:	f001 fe8b 	bl	1273c <base64_pad>
   10a26:	4601      	mov	r1, r0
    console_write(encodebuf, elen);
   10a28:	a803      	add	r0, sp, #12
   10a2a:	f7fe fdf7 	bl	f61c <console_write>
    console_write("\n", 1);
   10a2e:	2101      	movs	r1, #1
   10a30:	4807      	ldr	r0, [pc, #28]	; (10a50 <shell_nlip_mtx+0x138>)
   10a32:	f7fe fdf3 	bl	f61c <console_write>
   10a36:	46da      	mov	sl, fp
    (void)console_unlock();
   10a38:	f7fe fc14 	bl	f264 <console_unlock>
   10a3c:	e798      	b.n	10970 <shell_nlip_mtx+0x58>
            rc = os_mbuf_copydata(m, off, dlen, readbuf + rb_off);
   10a3e:	4682      	mov	sl, r0
   10a40:	e7fa      	b.n	10a38 <shell_nlip_mtx+0x120>
        rc = -1;
   10a42:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    return (rc);
   10a46:	e793      	b.n	10970 <shell_nlip_mtx+0x58>
   10a48:	00023680 	.word	0x00023680
   10a4c:	55555556 	.word	0x55555556
   10a50:	00023520 	.word	0x00023520

00010a54 <shell_event_data_in>:
    return os_mqueue_put(&g_shell_nlip_mq, os_eventq_dflt_get(), m);
}

static void
shell_event_data_in(struct os_event *ev)
{
   10a54:	b510      	push	{r4, lr}
   10a56:	e005      	b.n	10a64 <shell_event_data_in+0x10>
   10a58:	4604      	mov	r4, r0
        m = os_mqueue_get(&g_shell_nlip_mq);
        if (!m) {
            break;
        }

        (void) shell_nlip_mtx(m);
   10a5a:	f7ff ff5d 	bl	10918 <shell_nlip_mtx>

        os_mbuf_free_chain(m);
   10a5e:	4620      	mov	r0, r4
   10a60:	f7f9 fde3 	bl	a62a <os_mbuf_free_chain>
        m = os_mqueue_get(&g_shell_nlip_mq);
   10a64:	4802      	ldr	r0, [pc, #8]	; (10a70 <shell_event_data_in+0x1c>)
   10a66:	f7f9 fd76 	bl	a556 <os_mqueue_get>
        if (!m) {
   10a6a:	2800      	cmp	r0, #0
   10a6c:	d1f4      	bne.n	10a58 <shell_event_data_in+0x4>
    }
}
   10a6e:	bd10      	pop	{r4, pc}
   10a70:	200044d4 	.word	0x200044d4

00010a74 <shell_nlip_clear_pkt>:
{
   10a74:	b508      	push	{r3, lr}
    if (g_nlip_mbuf) {
   10a76:	4b06      	ldr	r3, [pc, #24]	; (10a90 <shell_nlip_clear_pkt+0x1c>)
   10a78:	6818      	ldr	r0, [r3, #0]
   10a7a:	b120      	cbz	r0, 10a86 <shell_nlip_clear_pkt+0x12>
        os_mbuf_free_chain(g_nlip_mbuf);
   10a7c:	f7f9 fdd5 	bl	a62a <os_mbuf_free_chain>
        g_nlip_mbuf = NULL;
   10a80:	4b03      	ldr	r3, [pc, #12]	; (10a90 <shell_nlip_clear_pkt+0x1c>)
   10a82:	2200      	movs	r2, #0
   10a84:	601a      	str	r2, [r3, #0]
    g_nlip_expected_len = 0;
   10a86:	4b03      	ldr	r3, [pc, #12]	; (10a94 <shell_nlip_clear_pkt+0x20>)
   10a88:	2200      	movs	r2, #0
   10a8a:	801a      	strh	r2, [r3, #0]
}
   10a8c:	bd08      	pop	{r3, pc}
   10a8e:	bf00      	nop
   10a90:	200044c8 	.word	0x200044c8
   10a94:	200044c4 	.word	0x200044c4

00010a98 <shell_nlip_process>:
{
   10a98:	b538      	push	{r3, r4, r5, lr}
   10a9a:	4605      	mov	r5, r0
    rc = base64_decode(data, data);
   10a9c:	4601      	mov	r1, r0
   10a9e:	f001 fe63 	bl	12768 <base64_decode>
    if (rc < 0) {
   10aa2:	1e04      	subs	r4, r0, #0
   10aa4:	db18      	blt.n	10ad8 <shell_nlip_process+0x40>
    if (g_nlip_mbuf == NULL) {
   10aa6:	4b30      	ldr	r3, [pc, #192]	; (10b68 <shell_nlip_process+0xd0>)
   10aa8:	681b      	ldr	r3, [r3, #0]
   10aaa:	b1bb      	cbz	r3, 10adc <shell_nlip_process+0x44>
    copy_len = min(g_nlip_expected_len - OS_MBUF_PKTHDR(g_nlip_mbuf)->omp_len,
   10aac:	4b2e      	ldr	r3, [pc, #184]	; (10b68 <shell_nlip_process+0xd0>)
   10aae:	6818      	ldr	r0, [r3, #0]
   10ab0:	8a01      	ldrh	r1, [r0, #16]
   10ab2:	4b2e      	ldr	r3, [pc, #184]	; (10b6c <shell_nlip_process+0xd4>)
   10ab4:	881b      	ldrh	r3, [r3, #0]
   10ab6:	1a5b      	subs	r3, r3, r1
   10ab8:	42a3      	cmp	r3, r4
   10aba:	bfa8      	it	ge
   10abc:	4623      	movge	r3, r4
    rc = os_mbuf_copyinto(g_nlip_mbuf, OS_MBUF_PKTHDR(g_nlip_mbuf)->omp_len,
   10abe:	b29b      	uxth	r3, r3
   10ac0:	462a      	mov	r2, r5
   10ac2:	f7f9 fee9 	bl	a898 <os_mbuf_copyinto>
    if (rc != 0) {
   10ac6:	4604      	mov	r4, r0
   10ac8:	b930      	cbnz	r0, 10ad8 <shell_nlip_process+0x40>
    if (OS_MBUF_PKTHDR(g_nlip_mbuf)->omp_len == g_nlip_expected_len) {
   10aca:	4b27      	ldr	r3, [pc, #156]	; (10b68 <shell_nlip_process+0xd0>)
   10acc:	681d      	ldr	r5, [r3, #0]
   10ace:	8a2a      	ldrh	r2, [r5, #16]
   10ad0:	4b26      	ldr	r3, [pc, #152]	; (10b6c <shell_nlip_process+0xd4>)
   10ad2:	881b      	ldrh	r3, [r3, #0]
   10ad4:	429a      	cmp	r2, r3
   10ad6:	d014      	beq.n	10b02 <shell_nlip_process+0x6a>
}
   10ad8:	4620      	mov	r0, r4
   10ada:	bd38      	pop	{r3, r4, r5, pc}
        if (len < 2) {
   10adc:	2c01      	cmp	r4, #1
   10ade:	dd3c      	ble.n	10b5a <shell_nlip_process+0xc2>
        g_nlip_expected_len = ntohs(*(uint16_t *) data);
   10ae0:	882b      	ldrh	r3, [r5, #0]
   10ae2:	0218      	lsls	r0, r3, #8
   10ae4:	ea40 2013 	orr.w	r0, r0, r3, lsr #8
   10ae8:	b280      	uxth	r0, r0
   10aea:	4b20      	ldr	r3, [pc, #128]	; (10b6c <shell_nlip_process+0xd4>)
   10aec:	8018      	strh	r0, [r3, #0]
        g_nlip_mbuf = os_msys_get_pkthdr(g_nlip_expected_len, 0);
   10aee:	2100      	movs	r1, #0
   10af0:	f7f8 ff32 	bl	9958 <os_msys_get_pkthdr>
   10af4:	4b1c      	ldr	r3, [pc, #112]	; (10b68 <shell_nlip_process+0xd0>)
   10af6:	6018      	str	r0, [r3, #0]
        if (!g_nlip_mbuf) {
   10af8:	2800      	cmp	r0, #0
   10afa:	d031      	beq.n	10b60 <shell_nlip_process+0xc8>
        data += sizeof(uint16_t);
   10afc:	3502      	adds	r5, #2
        len -= sizeof(uint16_t);
   10afe:	3c02      	subs	r4, #2
   10b00:	e7d4      	b.n	10aac <shell_nlip_process+0x14>
        if (g_shell_nlip_in_func) {
   10b02:	4b1b      	ldr	r3, [pc, #108]	; (10b70 <shell_nlip_process+0xd8>)
   10b04:	681b      	ldr	r3, [r3, #0]
   10b06:	b323      	cbz	r3, 10b52 <shell_nlip_process+0xba>
            crc = CRC16_INITIAL_CRC;
   10b08:	2000      	movs	r0, #0
   10b0a:	e004      	b.n	10b16 <shell_nlip_process+0x7e>
                crc = crc16_ccitt(crc, m->om_data, m->om_len);
   10b0c:	88ea      	ldrh	r2, [r5, #6]
   10b0e:	6829      	ldr	r1, [r5, #0]
   10b10:	f001 fc50 	bl	123b4 <crc16_ccitt>
            for (m = g_nlip_mbuf; m; m = SLIST_NEXT(m, om_next)) {
   10b14:	68ed      	ldr	r5, [r5, #12]
   10b16:	2d00      	cmp	r5, #0
   10b18:	d1f8      	bne.n	10b0c <shell_nlip_process+0x74>
            if (crc == 0 && g_nlip_expected_len >= sizeof(crc)) {
   10b1a:	b918      	cbnz	r0, 10b24 <shell_nlip_process+0x8c>
   10b1c:	4b13      	ldr	r3, [pc, #76]	; (10b6c <shell_nlip_process+0xd4>)
   10b1e:	881b      	ldrh	r3, [r3, #0]
   10b20:	2b01      	cmp	r3, #1
   10b22:	d809      	bhi.n	10b38 <shell_nlip_process+0xa0>
                os_mbuf_free_chain(g_nlip_mbuf);
   10b24:	4b10      	ldr	r3, [pc, #64]	; (10b68 <shell_nlip_process+0xd0>)
   10b26:	6818      	ldr	r0, [r3, #0]
   10b28:	f7f9 fd7f 	bl	a62a <os_mbuf_free_chain>
        g_nlip_mbuf = NULL;
   10b2c:	2300      	movs	r3, #0
   10b2e:	4a0e      	ldr	r2, [pc, #56]	; (10b68 <shell_nlip_process+0xd0>)
   10b30:	6013      	str	r3, [r2, #0]
        g_nlip_expected_len = 0;
   10b32:	4a0e      	ldr	r2, [pc, #56]	; (10b6c <shell_nlip_process+0xd4>)
   10b34:	8013      	strh	r3, [r2, #0]
   10b36:	e7cf      	b.n	10ad8 <shell_nlip_process+0x40>
                os_mbuf_adj(g_nlip_mbuf, -sizeof(crc));
   10b38:	4d0b      	ldr	r5, [pc, #44]	; (10b68 <shell_nlip_process+0xd0>)
   10b3a:	f06f 0101 	mvn.w	r1, #1
   10b3e:	6828      	ldr	r0, [r5, #0]
   10b40:	f7f9 fe16 	bl	a770 <os_mbuf_adj>
                g_shell_nlip_in_func(g_nlip_mbuf, g_shell_nlip_in_arg);
   10b44:	4b0a      	ldr	r3, [pc, #40]	; (10b70 <shell_nlip_process+0xd8>)
   10b46:	681b      	ldr	r3, [r3, #0]
   10b48:	4a0a      	ldr	r2, [pc, #40]	; (10b74 <shell_nlip_process+0xdc>)
   10b4a:	6811      	ldr	r1, [r2, #0]
   10b4c:	6828      	ldr	r0, [r5, #0]
   10b4e:	4798      	blx	r3
   10b50:	e7ec      	b.n	10b2c <shell_nlip_process+0x94>
            os_mbuf_free_chain(g_nlip_mbuf);
   10b52:	4628      	mov	r0, r5
   10b54:	f7f9 fd69 	bl	a62a <os_mbuf_free_chain>
   10b58:	e7e8      	b.n	10b2c <shell_nlip_process+0x94>
            rc = -1;
   10b5a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   10b5e:	e7bb      	b.n	10ad8 <shell_nlip_process+0x40>
            rc = -1;
   10b60:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   10b64:	e7b8      	b.n	10ad8 <shell_nlip_process+0x40>
   10b66:	bf00      	nop
   10b68:	200044c8 	.word	0x200044c8
   10b6c:	200044c4 	.word	0x200044c4
   10b70:	200044d0 	.word	0x200044d0
   10b74:	200044cc 	.word	0x200044cc

00010b78 <shell_nlip_input_register>:
    g_shell_nlip_in_func = nf;
   10b78:	4b02      	ldr	r3, [pc, #8]	; (10b84 <shell_nlip_input_register+0xc>)
   10b7a:	6018      	str	r0, [r3, #0]
    g_shell_nlip_in_arg = arg;
   10b7c:	4b02      	ldr	r3, [pc, #8]	; (10b88 <shell_nlip_input_register+0x10>)
   10b7e:	6019      	str	r1, [r3, #0]
}
   10b80:	2000      	movs	r0, #0
   10b82:	4770      	bx	lr
   10b84:	200044d0 	.word	0x200044d0
   10b88:	200044cc 	.word	0x200044cc

00010b8c <shell_nlip_output>:
{
   10b8c:	b510      	push	{r4, lr}
   10b8e:	4604      	mov	r4, r0
    return os_mqueue_put(&g_shell_nlip_mq, os_eventq_dflt_get(), m);
   10b90:	f7f8 fdca 	bl	9728 <os_eventq_dflt_get>
   10b94:	4601      	mov	r1, r0
   10b96:	4622      	mov	r2, r4
   10b98:	4801      	ldr	r0, [pc, #4]	; (10ba0 <shell_nlip_output+0x14>)
   10b9a:	f7f9 fced 	bl	a578 <os_mqueue_put>
}
   10b9e:	bd10      	pop	{r4, pc}
   10ba0:	200044d4 	.word	0x200044d4

00010ba4 <shell_nlip_init>:

void
shell_nlip_init(void)
{
   10ba4:	b508      	push	{r3, lr}
    os_mqueue_init(&g_shell_nlip_mq, shell_event_data_in, NULL);
   10ba6:	2200      	movs	r2, #0
   10ba8:	4902      	ldr	r1, [pc, #8]	; (10bb4 <shell_nlip_init+0x10>)
   10baa:	4803      	ldr	r0, [pc, #12]	; (10bb8 <shell_nlip_init+0x14>)
   10bac:	f7f9 fcc8 	bl	a540 <os_mqueue_init>
}
   10bb0:	bd08      	pop	{r3, pc}
   10bb2:	bf00      	nop
   10bb4:	00010a55 	.word	0x00010a55
   10bb8:	200044d4 	.word	0x200044d4

00010bbc <shell_os_ls_dev>:
    return 0;
}

static int
shell_os_ls_dev(struct os_dev *dev, void *arg)
{
   10bbc:	b500      	push	{lr}
   10bbe:	b083      	sub	sp, #12
   10bc0:	4602      	mov	r2, r0
   10bc2:	4608      	mov	r0, r1
    struct streamer *streamer;

    streamer = arg;
    streamer_printf(streamer, "%4d %3x %s\n",
   10bc4:	69d3      	ldr	r3, [r2, #28]
   10bc6:	9300      	str	r3, [sp, #0]
   10bc8:	7ed3      	ldrb	r3, [r2, #27]
   10bca:	7e92      	ldrb	r2, [r2, #26]
   10bcc:	4903      	ldr	r1, [pc, #12]	; (10bdc <shell_os_ls_dev+0x20>)
   10bce:	f001 fc10 	bl	123f2 <streamer_printf>
                    dev->od_open_ref, dev->od_flags, dev->od_name);
    return 0;
}
   10bd2:	2000      	movs	r0, #0
   10bd4:	b003      	add	sp, #12
   10bd6:	f85d fb04 	ldr.w	pc, [sp], #4
   10bda:	bf00      	nop
   10bdc:	00023684 	.word	0x00023684

00010be0 <shell_os_mpool_display_cmd>:
{
   10be0:	b5f0      	push	{r4, r5, r6, r7, lr}
   10be2:	b091      	sub	sp, #68	; 0x44
   10be4:	461e      	mov	r6, r3
    if (argc > 1 && strcmp(argv[1], "")) {
   10be6:	2901      	cmp	r1, #1
   10be8:	dd04      	ble.n	10bf4 <shell_os_mpool_display_cmd+0x14>
   10bea:	6855      	ldr	r5, [r2, #4]
   10bec:	782b      	ldrb	r3, [r5, #0]
   10bee:	b913      	cbnz	r3, 10bf6 <shell_os_mpool_display_cmd+0x16>
    name = NULL;
   10bf0:	2500      	movs	r5, #0
   10bf2:	e000      	b.n	10bf6 <shell_os_mpool_display_cmd+0x16>
   10bf4:	2500      	movs	r5, #0
    streamer_printf(streamer, "Mempools: \n");
   10bf6:	491d      	ldr	r1, [pc, #116]	; (10c6c <shell_os_mpool_display_cmd+0x8c>)
   10bf8:	4630      	mov	r0, r6
   10bfa:	f001 fbfa 	bl	123f2 <streamer_printf>
    streamer_printf(streamer, "%32s %5s %4s %4s %4s\n",
   10bfe:	4b1c      	ldr	r3, [pc, #112]	; (10c70 <shell_os_mpool_display_cmd+0x90>)
   10c00:	9302      	str	r3, [sp, #8]
   10c02:	4b1c      	ldr	r3, [pc, #112]	; (10c74 <shell_os_mpool_display_cmd+0x94>)
   10c04:	9301      	str	r3, [sp, #4]
   10c06:	4b1c      	ldr	r3, [pc, #112]	; (10c78 <shell_os_mpool_display_cmd+0x98>)
   10c08:	9300      	str	r3, [sp, #0]
   10c0a:	4b1c      	ldr	r3, [pc, #112]	; (10c7c <shell_os_mpool_display_cmd+0x9c>)
   10c0c:	4a1c      	ldr	r2, [pc, #112]	; (10c80 <shell_os_mpool_display_cmd+0xa0>)
   10c0e:	491d      	ldr	r1, [pc, #116]	; (10c84 <shell_os_mpool_display_cmd+0xa4>)
   10c10:	4630      	mov	r0, r6
   10c12:	f001 fbee 	bl	123f2 <streamer_printf>
    found = 0;
   10c16:	2700      	movs	r7, #0
    mp = NULL;
   10c18:	463c      	mov	r4, r7
   10c1a:	e00b      	b.n	10c34 <shell_os_mpool_display_cmd+0x54>
        streamer_printf(streamer, "%32s %5d %4d %4d %4d\n", omi.omi_name,
   10c1c:	9b07      	ldr	r3, [sp, #28]
   10c1e:	9302      	str	r3, [sp, #8]
   10c20:	9a06      	ldr	r2, [sp, #24]
   10c22:	9201      	str	r2, [sp, #4]
   10c24:	9a05      	ldr	r2, [sp, #20]
   10c26:	9200      	str	r2, [sp, #0]
   10c28:	9b04      	ldr	r3, [sp, #16]
   10c2a:	aa08      	add	r2, sp, #32
   10c2c:	4916      	ldr	r1, [pc, #88]	; (10c88 <shell_os_mpool_display_cmd+0xa8>)
   10c2e:	4630      	mov	r0, r6
   10c30:	f001 fbdf 	bl	123f2 <streamer_printf>
        mp = os_mempool_info_get_next(mp, &omi);
   10c34:	a904      	add	r1, sp, #16
   10c36:	4620      	mov	r0, r4
   10c38:	f7f8 fdfe 	bl	9838 <os_mempool_info_get_next>
        if (mp == NULL) {
   10c3c:	4604      	mov	r4, r0
   10c3e:	b148      	cbz	r0, 10c54 <shell_os_mpool_display_cmd+0x74>
        if (name) {
   10c40:	2d00      	cmp	r5, #0
   10c42:	d0eb      	beq.n	10c1c <shell_os_mpool_display_cmd+0x3c>
            if (strcmp(name, omi.omi_name)) {
   10c44:	a908      	add	r1, sp, #32
   10c46:	4628      	mov	r0, r5
   10c48:	f7fc ff72 	bl	db30 <strcmp>
   10c4c:	2800      	cmp	r0, #0
   10c4e:	d1f1      	bne.n	10c34 <shell_os_mpool_display_cmd+0x54>
                found = 1;
   10c50:	2701      	movs	r7, #1
   10c52:	e7e3      	b.n	10c1c <shell_os_mpool_display_cmd+0x3c>
    if (name && !found) {
   10c54:	b105      	cbz	r5, 10c58 <shell_os_mpool_display_cmd+0x78>
   10c56:	b117      	cbz	r7, 10c5e <shell_os_mpool_display_cmd+0x7e>
}
   10c58:	2000      	movs	r0, #0
   10c5a:	b011      	add	sp, #68	; 0x44
   10c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        streamer_printf(streamer, "Couldn't find a memory pool with name %s\n",
   10c5e:	462a      	mov	r2, r5
   10c60:	490a      	ldr	r1, [pc, #40]	; (10c8c <shell_os_mpool_display_cmd+0xac>)
   10c62:	4630      	mov	r0, r6
   10c64:	f001 fbc5 	bl	123f2 <streamer_printf>
   10c68:	e7f6      	b.n	10c58 <shell_os_mpool_display_cmd+0x78>
   10c6a:	bf00      	nop
   10c6c:	00023690 	.word	0x00023690
   10c70:	000236bc 	.word	0x000236bc
   10c74:	000236c0 	.word	0x000236c0
   10c78:	00024164 	.word	0x00024164
   10c7c:	0002369c 	.word	0x0002369c
   10c80:	00024d00 	.word	0x00024d00
   10c84:	000236a4 	.word	0x000236a4
   10c88:	000236c8 	.word	0x000236c8
   10c8c:	000236e0 	.word	0x000236e0

00010c90 <shell_os_date_cmd>:
{
   10c90:	b530      	push	{r4, r5, lr}
   10c92:	b08f      	sub	sp, #60	; 0x3c
   10c94:	461c      	mov	r4, r3
    if (argc == 0) {
   10c96:	3901      	subs	r1, #1
   10c98:	d00f      	beq.n	10cba <shell_os_date_cmd+0x2a>
   10c9a:	4610      	mov	r0, r2
    } else if (argc == 1) {
   10c9c:	2901      	cmp	r1, #1
   10c9e:	d132      	bne.n	10d06 <shell_os_date_cmd+0x76>
        rc = datetime_parse(*argv, &tv, &tz);
   10ca0:	aa09      	add	r2, sp, #36	; 0x24
   10ca2:	a90a      	add	r1, sp, #40	; 0x28
   10ca4:	6840      	ldr	r0, [r0, #4]
   10ca6:	f001 fa1d 	bl	120e4 <datetime_parse>
        if (rc == 0) {
   10caa:	4605      	mov	r5, r0
   10cac:	bb30      	cbnz	r0, 10cfc <shell_os_date_cmd+0x6c>
            rc = os_settimeofday(&tv, &tz);
   10cae:	a909      	add	r1, sp, #36	; 0x24
   10cb0:	a80a      	add	r0, sp, #40	; 0x28
   10cb2:	f7f9 fad1 	bl	a258 <os_settimeofday>
   10cb6:	4605      	mov	r5, r0
   10cb8:	e011      	b.n	10cde <shell_os_date_cmd+0x4e>
        rc = os_gettimeofday(&tv, &tz);
   10cba:	a909      	add	r1, sp, #36	; 0x24
   10cbc:	a80a      	add	r0, sp, #40	; 0x28
   10cbe:	f7f9 fa7f 	bl	a1c0 <os_gettimeofday>
        assert(rc == 0);
   10cc2:	b978      	cbnz	r0, 10ce4 <shell_os_date_cmd+0x54>
        rc = datetime_format(&tv, &tz, buf, sizeof(buf));
   10cc4:	2321      	movs	r3, #33	; 0x21
   10cc6:	466a      	mov	r2, sp
   10cc8:	a909      	add	r1, sp, #36	; 0x24
   10cca:	a80a      	add	r0, sp, #40	; 0x28
   10ccc:	f001 fb0a 	bl	122e4 <datetime_format>
        assert(rc == 0);
   10cd0:	4605      	mov	r5, r0
   10cd2:	b968      	cbnz	r0, 10cf0 <shell_os_date_cmd+0x60>
        streamer_printf(streamer, "%s\n", buf);
   10cd4:	466a      	mov	r2, sp
   10cd6:	490d      	ldr	r1, [pc, #52]	; (10d0c <shell_os_date_cmd+0x7c>)
   10cd8:	4620      	mov	r0, r4
   10cda:	f001 fb8a 	bl	123f2 <streamer_printf>
}
   10cde:	4628      	mov	r0, r5
   10ce0:	b00f      	add	sp, #60	; 0x3c
   10ce2:	bd30      	pop	{r4, r5, pc}
        assert(rc == 0);
   10ce4:	2300      	movs	r3, #0
   10ce6:	461a      	mov	r2, r3
   10ce8:	4619      	mov	r1, r3
   10cea:	4618      	mov	r0, r3
   10cec:	f7f8 f93a 	bl	8f64 <__assert_func>
        assert(rc == 0);
   10cf0:	2300      	movs	r3, #0
   10cf2:	461a      	mov	r2, r3
   10cf4:	4619      	mov	r1, r3
   10cf6:	4618      	mov	r0, r3
   10cf8:	f7f8 f934 	bl	8f64 <__assert_func>
            streamer_printf(streamer, "Invalid datetime\n");
   10cfc:	4904      	ldr	r1, [pc, #16]	; (10d10 <shell_os_date_cmd+0x80>)
   10cfe:	4620      	mov	r0, r4
   10d00:	f001 fb77 	bl	123f2 <streamer_printf>
   10d04:	e7eb      	b.n	10cde <shell_os_date_cmd+0x4e>
        rc = -1;
   10d06:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    return rc;
   10d0a:	e7e8      	b.n	10cde <shell_os_date_cmd+0x4e>
   10d0c:	00023730 	.word	0x00023730
   10d10:	0002370c 	.word	0x0002370c

00010d14 <shell_os_reset_cmd>:
{
   10d14:	b508      	push	{r3, lr}
    os_time_delay(OS_TICKS_PER_SEC / 10);
   10d16:	200c      	movs	r0, #12
   10d18:	f7f9 fa3e 	bl	a198 <os_time_delay>
    os_reboot(HAL_RESET_REQUESTED);
   10d1c:	2006      	movs	r0, #6
   10d1e:	f7f8 fa8a 	bl	9236 <os_reboot>
}
   10d22:	2000      	movs	r0, #0
   10d24:	bd08      	pop	{r3, pc}
	...

00010d28 <shell_os_ls_dev_cmd>:

int
shell_os_ls_dev_cmd(const struct shell_cmd *cmd, int argc, char **argv,
                    struct streamer *streamer)
{
   10d28:	b510      	push	{r4, lr}
   10d2a:	b082      	sub	sp, #8
   10d2c:	461c      	mov	r4, r3
    streamer_printf(streamer, "%4s %3s %s\n", "ref", "flg", "name");
   10d2e:	4b07      	ldr	r3, [pc, #28]	; (10d4c <shell_os_ls_dev_cmd+0x24>)
   10d30:	9300      	str	r3, [sp, #0]
   10d32:	4b07      	ldr	r3, [pc, #28]	; (10d50 <shell_os_ls_dev_cmd+0x28>)
   10d34:	4a07      	ldr	r2, [pc, #28]	; (10d54 <shell_os_ls_dev_cmd+0x2c>)
   10d36:	4908      	ldr	r1, [pc, #32]	; (10d58 <shell_os_ls_dev_cmd+0x30>)
   10d38:	4620      	mov	r0, r4
   10d3a:	f001 fb5a 	bl	123f2 <streamer_printf>
    os_dev_walk(shell_os_ls_dev, streamer);
   10d3e:	4621      	mov	r1, r4
   10d40:	4806      	ldr	r0, [pc, #24]	; (10d5c <shell_os_ls_dev_cmd+0x34>)
   10d42:	f7f8 fc25 	bl	9590 <os_dev_walk>
    return 0;
}
   10d46:	2000      	movs	r0, #0
   10d48:	b002      	add	sp, #8
   10d4a:	bd10      	pop	{r4, pc}
   10d4c:	00024d00 	.word	0x00024d00
   10d50:	00023720 	.word	0x00023720
   10d54:	00023724 	.word	0x00023724
   10d58:	00023728 	.word	0x00023728
   10d5c:	00010bbd 	.word	0x00010bbd

00010d60 <shell_os_tasks_display_cmd>:
{
   10d60:	b5f0      	push	{r4, r5, r6, r7, lr}
   10d62:	b097      	sub	sp, #92	; 0x5c
   10d64:	461e      	mov	r6, r3
    if (argc > 1 && strcmp(argv[1], "")) {
   10d66:	2901      	cmp	r1, #1
   10d68:	dd04      	ble.n	10d74 <shell_os_tasks_display_cmd+0x14>
   10d6a:	6855      	ldr	r5, [r2, #4]
   10d6c:	782b      	ldrb	r3, [r5, #0]
   10d6e:	b913      	cbnz	r3, 10d76 <shell_os_tasks_display_cmd+0x16>
    name = NULL;
   10d70:	2500      	movs	r5, #0
   10d72:	e000      	b.n	10d76 <shell_os_tasks_display_cmd+0x16>
   10d74:	2500      	movs	r5, #0
    streamer_printf(streamer, "Tasks: \n");
   10d76:	4928      	ldr	r1, [pc, #160]	; (10e18 <shell_os_tasks_display_cmd+0xb8>)
   10d78:	4630      	mov	r0, r6
   10d7a:	f001 fb3a 	bl	123f2 <streamer_printf>
    streamer_printf(streamer, "%8s %3s %3s %8s %8s %8s %8s %8s %8s %3s\n",
   10d7e:	4b27      	ldr	r3, [pc, #156]	; (10e1c <shell_os_tasks_display_cmd+0xbc>)
   10d80:	9307      	str	r3, [sp, #28]
   10d82:	4b27      	ldr	r3, [pc, #156]	; (10e20 <shell_os_tasks_display_cmd+0xc0>)
   10d84:	9306      	str	r3, [sp, #24]
   10d86:	4b27      	ldr	r3, [pc, #156]	; (10e24 <shell_os_tasks_display_cmd+0xc4>)
   10d88:	9305      	str	r3, [sp, #20]
   10d8a:	4b27      	ldr	r3, [pc, #156]	; (10e28 <shell_os_tasks_display_cmd+0xc8>)
   10d8c:	9304      	str	r3, [sp, #16]
   10d8e:	4b27      	ldr	r3, [pc, #156]	; (10e2c <shell_os_tasks_display_cmd+0xcc>)
   10d90:	9303      	str	r3, [sp, #12]
   10d92:	4b27      	ldr	r3, [pc, #156]	; (10e30 <shell_os_tasks_display_cmd+0xd0>)
   10d94:	9302      	str	r3, [sp, #8]
   10d96:	4b27      	ldr	r3, [pc, #156]	; (10e34 <shell_os_tasks_display_cmd+0xd4>)
   10d98:	9301      	str	r3, [sp, #4]
   10d9a:	4b27      	ldr	r3, [pc, #156]	; (10e38 <shell_os_tasks_display_cmd+0xd8>)
   10d9c:	9300      	str	r3, [sp, #0]
   10d9e:	4b27      	ldr	r3, [pc, #156]	; (10e3c <shell_os_tasks_display_cmd+0xdc>)
   10da0:	4a27      	ldr	r2, [pc, #156]	; (10e40 <shell_os_tasks_display_cmd+0xe0>)
   10da2:	4928      	ldr	r1, [pc, #160]	; (10e44 <shell_os_tasks_display_cmd+0xe4>)
   10da4:	4630      	mov	r0, r6
   10da6:	f001 fb24 	bl	123f2 <streamer_printf>
    found = 0;
   10daa:	2700      	movs	r7, #0
    prev_task = NULL;
   10dac:	463c      	mov	r4, r7
   10dae:	e017      	b.n	10de0 <shell_os_tasks_display_cmd+0x80>
                oti.oti_name, oti.oti_prio, oti.oti_taskid,
   10db0:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
                oti.oti_stksize, oti.oti_stkusage,
   10db4:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   10db8:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
        streamer_printf(streamer, "%8s %3u %3u %8lu %8lu %8u %8u %8lu %8lu\n",
   10dbc:	980d      	ldr	r0, [sp, #52]	; 0x34
   10dbe:	9006      	str	r0, [sp, #24]
   10dc0:	980c      	ldr	r0, [sp, #48]	; 0x30
   10dc2:	9005      	str	r0, [sp, #20]
   10dc4:	9104      	str	r1, [sp, #16]
   10dc6:	9303      	str	r3, [sp, #12]
   10dc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10dca:	9302      	str	r3, [sp, #8]
   10dcc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10dce:	9101      	str	r1, [sp, #4]
   10dd0:	9200      	str	r2, [sp, #0]
   10dd2:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10dd6:	aa0e      	add	r2, sp, #56	; 0x38
   10dd8:	491b      	ldr	r1, [pc, #108]	; (10e48 <shell_os_tasks_display_cmd+0xe8>)
   10dda:	4630      	mov	r0, r6
   10ddc:	f001 fb09 	bl	123f2 <streamer_printf>
        prev_task = os_task_info_get_next(prev_task, &oti);
   10de0:	a908      	add	r1, sp, #32
   10de2:	4620      	mov	r0, r4
   10de4:	f7f9 f908 	bl	9ff8 <os_task_info_get_next>
        if (prev_task == NULL) {
   10de8:	4604      	mov	r4, r0
   10dea:	b148      	cbz	r0, 10e00 <shell_os_tasks_display_cmd+0xa0>
        if (name) {
   10dec:	2d00      	cmp	r5, #0
   10dee:	d0df      	beq.n	10db0 <shell_os_tasks_display_cmd+0x50>
            if (strcmp(name, oti.oti_name)) {
   10df0:	a90e      	add	r1, sp, #56	; 0x38
   10df2:	4628      	mov	r0, r5
   10df4:	f7fc fe9c 	bl	db30 <strcmp>
   10df8:	2800      	cmp	r0, #0
   10dfa:	d1f1      	bne.n	10de0 <shell_os_tasks_display_cmd+0x80>
                found = 1;
   10dfc:	2701      	movs	r7, #1
   10dfe:	e7d7      	b.n	10db0 <shell_os_tasks_display_cmd+0x50>
    if (name && !found) {
   10e00:	b105      	cbz	r5, 10e04 <shell_os_tasks_display_cmd+0xa4>
   10e02:	b117      	cbz	r7, 10e0a <shell_os_tasks_display_cmd+0xaa>
}
   10e04:	2000      	movs	r0, #0
   10e06:	b017      	add	sp, #92	; 0x5c
   10e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
        streamer_printf(streamer, "Couldn't find task with name %s\n", name);
   10e0a:	462a      	mov	r2, r5
   10e0c:	490f      	ldr	r1, [pc, #60]	; (10e4c <shell_os_tasks_display_cmd+0xec>)
   10e0e:	4630      	mov	r0, r6
   10e10:	f001 faef 	bl	123f2 <streamer_printf>
   10e14:	e7f6      	b.n	10e04 <shell_os_tasks_display_cmd+0xa4>
   10e16:	bf00      	nop
   10e18:	00023734 	.word	0x00023734
   10e1c:	00023720 	.word	0x00023720
   10e20:	00023778 	.word	0x00023778
   10e24:	00023780 	.word	0x00023780
   10e28:	00023788 	.word	0x00023788
   10e2c:	00023790 	.word	0x00023790
   10e30:	00023798 	.word	0x00023798
   10e34:	0002379c 	.word	0x0002379c
   10e38:	000237a4 	.word	0x000237a4
   10e3c:	00023740 	.word	0x00023740
   10e40:	00023744 	.word	0x00023744
   10e44:	0002374c 	.word	0x0002374c
   10e48:	000237a8 	.word	0x000237a8
   10e4c:	000237d4 	.word	0x000237d4

00010e50 <shell_os_register>:
    { 0 },
};

void
shell_os_register(void)
{
   10e50:	b530      	push	{r4, r5, lr}
   10e52:	b083      	sub	sp, #12
    const struct shell_cmd *cmd;
    int rc;

    for (cmd = os_commands; cmd->sc_cmd != NULL; cmd++) {
   10e54:	4c0a      	ldr	r4, [pc, #40]	; (10e80 <shell_os_register+0x30>)
   10e56:	e000      	b.n	10e5a <shell_os_register+0xa>
   10e58:	3410      	adds	r4, #16
   10e5a:	68a3      	ldr	r3, [r4, #8]
   10e5c:	b16b      	cbz	r3, 10e7a <shell_os_register+0x2a>
        rc = shell_cmd_register(cmd);
   10e5e:	4620      	mov	r0, r4
   10e60:	f7ff fcf4 	bl	1084c <shell_cmd_register>
        SYSINIT_PANIC_ASSERT_MSG(
   10e64:	2800      	cmp	r0, #0
   10e66:	d0f7      	beq.n	10e58 <shell_os_register+0x8>
   10e68:	2000      	movs	r0, #0
   10e6a:	9000      	str	r0, [sp, #0]
   10e6c:	4b05      	ldr	r3, [pc, #20]	; (10e84 <shell_os_register+0x34>)
   10e6e:	681d      	ldr	r5, [r3, #0]
   10e70:	4603      	mov	r3, r0
   10e72:	4602      	mov	r2, r0
   10e74:	4601      	mov	r1, r0
   10e76:	47a8      	blx	r5
   10e78:	e7ee      	b.n	10e58 <shell_os_register+0x8>
            rc == 0, "Failed to register OS shell commands");
    }
}
   10e7a:	b003      	add	sp, #12
   10e7c:	bd30      	pop	{r4, r5, pc}
   10e7e:	bf00      	nop
   10e80:	000238c4 	.word	0x000238c4
   10e84:	2000064c 	.word	0x2000064c

00010e88 <shell_ticks_cmd>:
/**
 * Handles the 'ticks' command
 */
int
shell_ticks_cmd(int argc, char **argv)
{
   10e88:	b510      	push	{r4, lr}
    if (argc > 1) {
   10e8a:	2801      	cmp	r0, #1
   10e8c:	dd16      	ble.n	10ebc <shell_ticks_cmd+0x34>
        if (!strcmp(argv[1], "on")) {
   10e8e:	684c      	ldr	r4, [r1, #4]
   10e90:	490d      	ldr	r1, [pc, #52]	; (10ec8 <shell_ticks_cmd+0x40>)
   10e92:	4620      	mov	r0, r4
   10e94:	f7fc fe4c 	bl	db30 <strcmp>
   10e98:	b150      	cbz	r0, 10eb0 <shell_ticks_cmd+0x28>
            console_yes_ticks();
            console_printf(" Console Ticks on\n");
        }
        else if (!strcmp(argv[1],"off")) {
   10e9a:	490c      	ldr	r1, [pc, #48]	; (10ecc <shell_ticks_cmd+0x44>)
   10e9c:	4620      	mov	r0, r4
   10e9e:	f7fc fe47 	bl	db30 <strcmp>
   10ea2:	b970      	cbnz	r0, 10ec2 <shell_ticks_cmd+0x3a>
            console_printf(" Console Ticks off\n");
   10ea4:	480a      	ldr	r0, [pc, #40]	; (10ed0 <shell_ticks_cmd+0x48>)
   10ea6:	f7fe fde1 	bl	fa6c <console_printf>
            console_no_ticks();
   10eaa:	f7fe fe95 	bl	fbd8 <console_no_ticks>
        }
        return 0;
   10eae:	e008      	b.n	10ec2 <shell_ticks_cmd+0x3a>
            console_yes_ticks();
   10eb0:	f7fe fe98 	bl	fbe4 <console_yes_ticks>
            console_printf(" Console Ticks on\n");
   10eb4:	4807      	ldr	r0, [pc, #28]	; (10ed4 <shell_ticks_cmd+0x4c>)
   10eb6:	f7fe fdd9 	bl	fa6c <console_printf>
   10eba:	e002      	b.n	10ec2 <shell_ticks_cmd+0x3a>
    }
    console_printf(" Usage: ticks [on|off]\n");
   10ebc:	4806      	ldr	r0, [pc, #24]	; (10ed8 <shell_ticks_cmd+0x50>)
   10ebe:	f7fe fdd5 	bl	fa6c <console_printf>
    return 0;
}
   10ec2:	2000      	movs	r0, #0
   10ec4:	bd10      	pop	{r4, pc}
   10ec6:	bf00      	nop
   10ec8:	00023954 	.word	0x00023954
   10ecc:	0002396c 	.word	0x0002396c
   10ed0:	00023970 	.word	0x00023970
   10ed4:	00023958 	.word	0x00023958
   10ed8:	00023984 	.word	0x00023984

00010edc <shell_prompt_register>:
};


void
shell_prompt_register(void)
{
   10edc:	b508      	push	{r3, lr}
    shell_register(SHELL_PROMPT, prompt_commands);
   10ede:	4902      	ldr	r1, [pc, #8]	; (10ee8 <shell_prompt_register+0xc>)
   10ee0:	4802      	ldr	r0, [pc, #8]	; (10eec <shell_prompt_register+0x10>)
   10ee2:	f7ff fc91 	bl	10808 <shell_register>
}
   10ee6:	bd08      	pop	{r3, pc}
   10ee8:	000239e0 	.word	0x000239e0
   10eec:	0002399c 	.word	0x0002399c

00010ef0 <stats_offset>:
    STAILQ_HEAD_INITIALIZER(g_stats_registry);

static size_t
stats_offset(const struct stats_hdr *hdr)
{
    if (hdr->s_flags & STATS_HDR_F_PERSIST) {
   10ef0:	88c3      	ldrh	r3, [r0, #6]
   10ef2:	f013 0f01 	tst.w	r3, #1
   10ef6:	d001      	beq.n	10efc <stats_offset+0xc>
        return sizeof (struct stats_persisted_hdr);
   10ef8:	2038      	movs	r0, #56	; 0x38
   10efa:	4770      	bx	lr
    } else {
        return sizeof (struct stats_hdr);
   10efc:	2014      	movs	r0, #20
    }
}
   10efe:	4770      	bx	lr

00010f00 <stats_register_internal>:
    return (uint8_t *)hdr + offset;
}

static int
stats_register_internal(const char *name, struct stats_hdr *shdr)
{
   10f00:	b570      	push	{r4, r5, r6, lr}
   10f02:	4606      	mov	r6, r0
   10f04:	460d      	mov	r5, r1
    int rc;

    /* Don't allow duplicate entries, return an error if this stat
     * is already registered.
     */
    STAILQ_FOREACH(cur, &g_stats_registry, s_next) {
   10f06:	4b0f      	ldr	r3, [pc, #60]	; (10f44 <stats_register_internal+0x44>)
   10f08:	681c      	ldr	r4, [r3, #0]
   10f0a:	e000      	b.n	10f0e <stats_register_internal+0xe>
   10f0c:	6924      	ldr	r4, [r4, #16]
   10f0e:	b14c      	cbz	r4, 10f24 <stats_register_internal+0x24>
        if (!strcmp(cur->s_name, name) || cur == shdr) {
   10f10:	4631      	mov	r1, r6
   10f12:	6820      	ldr	r0, [r4, #0]
   10f14:	f7fc fe0c 	bl	db30 <strcmp>
   10f18:	b188      	cbz	r0, 10f3e <stats_register_internal+0x3e>
   10f1a:	42ac      	cmp	r4, r5
   10f1c:	d1f6      	bne.n	10f0c <stats_register_internal+0xc>

    STATS_INC(g_stats_stats, num_registered);

    return (0);
err:
    return (rc);
   10f1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10f22:	e00b      	b.n	10f3c <stats_register_internal+0x3c>
    shdr->s_name = name;
   10f24:	602e      	str	r6, [r5, #0]
    STAILQ_INSERT_TAIL(&g_stats_registry, shdr, s_next);
   10f26:	2000      	movs	r0, #0
   10f28:	6128      	str	r0, [r5, #16]
   10f2a:	4b06      	ldr	r3, [pc, #24]	; (10f44 <stats_register_internal+0x44>)
   10f2c:	685a      	ldr	r2, [r3, #4]
   10f2e:	6015      	str	r5, [r2, #0]
   10f30:	3510      	adds	r5, #16
   10f32:	605d      	str	r5, [r3, #4]
    STATS_INC(g_stats_stats, num_registered);
   10f34:	4a04      	ldr	r2, [pc, #16]	; (10f48 <stats_register_internal+0x48>)
   10f36:	6953      	ldr	r3, [r2, #20]
   10f38:	3301      	adds	r3, #1
   10f3a:	6153      	str	r3, [r2, #20]
}
   10f3c:	bd70      	pop	{r4, r5, r6, pc}
    return (rc);
   10f3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10f42:	e7fb      	b.n	10f3c <stats_register_internal+0x3c>
   10f44:	20000624 	.word	0x20000624
   10f48:	200044ec 	.word	0x200044ec

00010f4c <stats_size>:
    return hdr->s_cnt * hdr->s_size;
   10f4c:	7943      	ldrb	r3, [r0, #5]
   10f4e:	7900      	ldrb	r0, [r0, #4]
}
   10f50:	fb03 f000 	mul.w	r0, r3, r0
   10f54:	4770      	bx	lr
	...

00010f58 <stats_walk>:
 * @return 0 on success, the return code of the walk_func on abort.
 *
 */
int
stats_walk(struct stats_hdr *hdr, stats_walk_func_t walk_func, void *arg)
{
   10f58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10f5c:	b085      	sub	sp, #20
   10f5e:	4604      	mov	r4, r0
   10f60:	4688      	mov	r8, r1
   10f62:	4617      	mov	r7, r2
    int rc;
#if MYNEWT_VAL(STATS_NAMES)
    int i;
#endif

    start = stats_offset(hdr);
   10f64:	f7ff ffc4 	bl	10ef0 <stats_offset>
   10f68:	4681      	mov	r9, r0
   10f6a:	b285      	uxth	r5, r0
    cur = start;
    end = start + stats_size(hdr);
   10f6c:	4620      	mov	r0, r4
   10f6e:	f7ff ffed 	bl	10f4c <stats_size>
   10f72:	fa15 f680 	uxtah	r6, r5, r0
   10f76:	b2b6      	uxth	r6, r6

    while (cur < end) {
   10f78:	e00d      	b.n	10f96 <stats_walk+0x3e>
         * offset.  This annotation allows for naming only certain statistics,
         * and doesn't enforce ordering restrictions on the stats name map.
         */
        for (i = 0; i < hdr->s_map_cnt; ++i) {
            if (hdr->s_map[i].snm_off == cur) {
                name = hdr->s_map[i].snm_name;
   10f7a:	f8d0 2002 	ldr.w	r2, [r0, #2]
                break;
   10f7e:	e000      	b.n	10f82 <stats_walk+0x2a>
        name = NULL;
   10f80:	2200      	movs	r2, #0
#endif
        /* Do this check irrespective of whether MYNEWT_VALUE(STATS_NAMES)
         * is set.  Users may only partially name elements in the statistics
         * structure.
         */
        if (name == NULL) {
   10f82:	b1ca      	cbz	r2, 10fb8 <stats_walk+0x60>
            len = snprintf(name_buf, sizeof(name_buf), "s%d", ent_n);
            name_buf[len] = '\0';
            name = name_buf;
        }

        rc = walk_func(hdr, arg, name, cur);
   10f84:	462b      	mov	r3, r5
   10f86:	4639      	mov	r1, r7
   10f88:	4620      	mov	r0, r4
   10f8a:	47c0      	blx	r8
        if (rc != 0) {
   10f8c:	4603      	mov	r3, r0
   10f8e:	bb40      	cbnz	r0, 10fe2 <stats_walk+0x8a>
        }

        /* Statistics are variable sized, move forward either 16, 32 or 64
         * bits in the structure.
         */
        cur += hdr->s_size;
   10f90:	7923      	ldrb	r3, [r4, #4]
   10f92:	441d      	add	r5, r3
   10f94:	b2ad      	uxth	r5, r5
    while (cur < end) {
   10f96:	42b5      	cmp	r5, r6
   10f98:	d222      	bcs.n	10fe0 <stats_walk+0x88>
        for (i = 0; i < hdr->s_map_cnt; ++i) {
   10f9a:	2300      	movs	r3, #0
   10f9c:	68e2      	ldr	r2, [r4, #12]
   10f9e:	429a      	cmp	r2, r3
   10fa0:	ddee      	ble.n	10f80 <stats_walk+0x28>
            if (hdr->s_map[i].snm_off == cur) {
   10fa2:	68a2      	ldr	r2, [r4, #8]
   10fa4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   10fa8:	eb02 0041 	add.w	r0, r2, r1, lsl #1
   10fac:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
   10fb0:	42aa      	cmp	r2, r5
   10fb2:	d0e2      	beq.n	10f7a <stats_walk+0x22>
        for (i = 0; i < hdr->s_map_cnt; ++i) {
   10fb4:	3301      	adds	r3, #1
   10fb6:	e7f1      	b.n	10f9c <stats_walk+0x44>
            ent_n = (cur - start) / hdr->s_size;
   10fb8:	fa1f f389 	uxth.w	r3, r9
   10fbc:	1aeb      	subs	r3, r5, r3
   10fbe:	7922      	ldrb	r2, [r4, #4]
            len = snprintf(name_buf, sizeof(name_buf), "s%d", ent_n);
   10fc0:	fb93 f3f2 	sdiv	r3, r3, r2
   10fc4:	4a09      	ldr	r2, [pc, #36]	; (10fec <stats_walk+0x94>)
   10fc6:	210c      	movs	r1, #12
   10fc8:	a801      	add	r0, sp, #4
   10fca:	f7fd f9c8 	bl	e35e <snprintf>
            name_buf[len] = '\0';
   10fce:	f100 0310 	add.w	r3, r0, #16
   10fd2:	eb0d 0003 	add.w	r0, sp, r3
   10fd6:	2300      	movs	r3, #0
   10fd8:	f800 3c0c 	strb.w	r3, [r0, #-12]
            name = name_buf;
   10fdc:	aa01      	add	r2, sp, #4
   10fde:	e7d1      	b.n	10f84 <stats_walk+0x2c>
    }

    return (0);
   10fe0:	2300      	movs	r3, #0
err:
    return (rc);
}
   10fe2:	4618      	mov	r0, r3
   10fe4:	b005      	add	sp, #20
   10fe6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   10fea:	bf00      	nop
   10fec:	00023a24 	.word	0x00023a24

00010ff0 <stats_init>:
 * @return 0 on success, non-zero error code on failure.
 */
int
stats_init(struct stats_hdr *shdr, uint8_t size, uint8_t cnt,
        const struct stats_name_map *map, uint8_t map_cnt)
{
   10ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10ff2:	4604      	mov	r4, r0
   10ff4:	460e      	mov	r6, r1
   10ff6:	4615      	mov	r5, r2
   10ff8:	461f      	mov	r7, r3
    size_t offset;

    offset = stats_offset(shdr);
   10ffa:	f7ff ff79 	bl	10ef0 <stats_offset>
    memset((uint8_t *)shdr + offset, 0, size * cnt);
   10ffe:	fb05 f206 	mul.w	r2, r5, r6
   11002:	2100      	movs	r1, #0
   11004:	4420      	add	r0, r4
   11006:	f7fc fd68 	bl	dada <memset>

    shdr->s_size = size;
   1100a:	7126      	strb	r6, [r4, #4]
    shdr->s_cnt = cnt;
   1100c:	7165      	strb	r5, [r4, #5]
    shdr->s_flags = 0;
   1100e:	2000      	movs	r0, #0
   11010:	80e0      	strh	r0, [r4, #6]
#if MYNEWT_VAL(STATS_NAMES)
    shdr->s_map = map;
   11012:	60a7      	str	r7, [r4, #8]
    shdr->s_map_cnt = map_cnt;
   11014:	f89d 3018 	ldrb.w	r3, [sp, #24]
   11018:	60e3      	str	r3, [r4, #12]
#endif

    return (0);
}
   1101a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001101c <stats_module_init_internal>:
{
   1101c:	b500      	push	{lr}
   1101e:	b083      	sub	sp, #12
    STAILQ_INIT(&g_stats_registry);
   11020:	4b10      	ldr	r3, [pc, #64]	; (11064 <stats_module_init_internal+0x48>)
   11022:	2200      	movs	r2, #0
   11024:	601a      	str	r2, [r3, #0]
   11026:	605b      	str	r3, [r3, #4]
    rc = stats_init(STATS_HDR(g_stats_stats),
   11028:	2201      	movs	r2, #1
   1102a:	9200      	str	r2, [sp, #0]
   1102c:	4b0e      	ldr	r3, [pc, #56]	; (11068 <stats_module_init_internal+0x4c>)
   1102e:	2104      	movs	r1, #4
   11030:	480e      	ldr	r0, [pc, #56]	; (1106c <stats_module_init_internal+0x50>)
   11032:	f7ff ffdd 	bl	10ff0 <stats_init>
    if (rc) {
   11036:	4603      	mov	r3, r0
   11038:	b118      	cbz	r0, 11042 <stats_module_init_internal+0x26>
}
   1103a:	4618      	mov	r0, r3
   1103c:	b003      	add	sp, #12
   1103e:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = stats_register_internal("stat", STATS_HDR(g_stats_stats));
   11042:	490a      	ldr	r1, [pc, #40]	; (1106c <stats_module_init_internal+0x50>)
   11044:	480a      	ldr	r0, [pc, #40]	; (11070 <stats_module_init_internal+0x54>)
   11046:	f7ff ff5b 	bl	10f00 <stats_register_internal>
    if (rc) {
   1104a:	4603      	mov	r3, r0
   1104c:	2800      	cmp	r0, #0
   1104e:	d1f4      	bne.n	1103a <stats_module_init_internal+0x1e>
    rc = stats_nmgr_register_group();
   11050:	f000 f952 	bl	112f8 <stats_nmgr_register_group>
    if (rc) {
   11054:	4603      	mov	r3, r0
   11056:	2800      	cmp	r0, #0
   11058:	d1ef      	bne.n	1103a <stats_module_init_internal+0x1e>
    rc = stats_shell_register();
   1105a:	f000 f9c5 	bl	113e8 <stats_shell_register>
   1105e:	4603      	mov	r3, r0
    if (rc) {
   11060:	e7eb      	b.n	1103a <stats_module_init_internal+0x1e>
   11062:	bf00      	nop
   11064:	20000624 	.word	0x20000624
   11068:	00023a40 	.word	0x00023a40
   1106c:	200044ec 	.word	0x200044ec
   11070:	00023a28 	.word	0x00023a28

00011074 <stats_module_init>:
{
   11074:	b510      	push	{r4, lr}
   11076:	b082      	sub	sp, #8
    SYSINIT_ASSERT_ACTIVE();
   11078:	4b0c      	ldr	r3, [pc, #48]	; (110ac <stats_module_init+0x38>)
   1107a:	781b      	ldrb	r3, [r3, #0]
   1107c:	b123      	cbz	r3, 11088 <stats_module_init+0x14>
    if (g_stats_stats.snum_registered) {
   1107e:	4b0c      	ldr	r3, [pc, #48]	; (110b0 <stats_module_init+0x3c>)
   11080:	695b      	ldr	r3, [r3, #20]
   11082:	b133      	cbz	r3, 11092 <stats_module_init+0x1e>
}
   11084:	b002      	add	sp, #8
   11086:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   11088:	461a      	mov	r2, r3
   1108a:	4619      	mov	r1, r3
   1108c:	4618      	mov	r0, r3
   1108e:	f7f7 ff69 	bl	8f64 <__assert_func>
    rc = stats_module_init_internal();
   11092:	f7ff ffc3 	bl	1101c <stats_module_init_internal>
    SYSINIT_PANIC_ASSERT(rc == 0);
   11096:	2800      	cmp	r0, #0
   11098:	d0f4      	beq.n	11084 <stats_module_init+0x10>
   1109a:	2000      	movs	r0, #0
   1109c:	9000      	str	r0, [sp, #0]
   1109e:	4b05      	ldr	r3, [pc, #20]	; (110b4 <stats_module_init+0x40>)
   110a0:	681c      	ldr	r4, [r3, #0]
   110a2:	4603      	mov	r3, r0
   110a4:	4602      	mov	r2, r0
   110a6:	4601      	mov	r1, r0
   110a8:	47a0      	blx	r4
   110aa:	e7eb      	b.n	11084 <stats_module_init+0x10>
   110ac:	20004538 	.word	0x20004538
   110b0:	200044ec 	.word	0x200044ec
   110b4:	2000064c 	.word	0x2000064c

000110b8 <stats_group_walk>:
 *
 * @return 0 on success, non-zero error code on failure
 */
int
stats_group_walk(stats_group_walk_func_t walk_func, void *arg)
{
   110b8:	b570      	push	{r4, r5, r6, lr}
   110ba:	4606      	mov	r6, r0
   110bc:	460d      	mov	r5, r1
    struct stats_hdr *hdr;
    int rc;

    STAILQ_FOREACH(hdr, &g_stats_registry, s_next) {
   110be:	4b07      	ldr	r3, [pc, #28]	; (110dc <stats_group_walk+0x24>)
   110c0:	681c      	ldr	r4, [r3, #0]
   110c2:	e000      	b.n	110c6 <stats_group_walk+0xe>
   110c4:	6924      	ldr	r4, [r4, #16]
   110c6:	b134      	cbz	r4, 110d6 <stats_group_walk+0x1e>
        rc = walk_func(hdr, arg);
   110c8:	4629      	mov	r1, r5
   110ca:	4620      	mov	r0, r4
   110cc:	47b0      	blx	r6
        if (rc != 0) {
   110ce:	4603      	mov	r3, r0
   110d0:	2800      	cmp	r0, #0
   110d2:	d0f7      	beq.n	110c4 <stats_group_walk+0xc>
   110d4:	e000      	b.n	110d8 <stats_group_walk+0x20>
            goto err;
        }
    }
    return (0);
   110d6:	2300      	movs	r3, #0
err:
    return (rc);
}
   110d8:	4618      	mov	r0, r3
   110da:	bd70      	pop	{r4, r5, r6, pc}
   110dc:	20000624 	.word	0x20000624

000110e0 <stats_group_find>:
 *
 * @return statistic structure if found, NULL if not found.
 */
struct stats_hdr *
stats_group_find(const char *name)
{
   110e0:	b538      	push	{r3, r4, r5, lr}
   110e2:	4605      	mov	r5, r0
    struct stats_hdr *cur;

    cur = NULL;
    STAILQ_FOREACH(cur, &g_stats_registry, s_next) {
   110e4:	4b06      	ldr	r3, [pc, #24]	; (11100 <stats_group_find+0x20>)
   110e6:	681c      	ldr	r4, [r3, #0]
   110e8:	e000      	b.n	110ec <stats_group_find+0xc>
   110ea:	6924      	ldr	r4, [r4, #16]
   110ec:	b12c      	cbz	r4, 110fa <stats_group_find+0x1a>
        if (!strcmp(cur->s_name, name)) {
   110ee:	4629      	mov	r1, r5
   110f0:	6820      	ldr	r0, [r4, #0]
   110f2:	f7fc fd1d 	bl	db30 <strcmp>
   110f6:	2800      	cmp	r0, #0
   110f8:	d1f7      	bne.n	110ea <stats_group_find+0xa>
            break;
        }
    }

    return (cur);
}
   110fa:	4620      	mov	r0, r4
   110fc:	bd38      	pop	{r3, r4, r5, pc}
   110fe:	bf00      	nop
   11100:	20000624 	.word	0x20000624

00011104 <stats_register>:
 *
 * @return 0 on success, non-zero error code on failure.
 */
int
stats_register(const char *name, struct stats_hdr *shdr)
{
   11104:	b538      	push	{r3, r4, r5, lr}
   11106:	4604      	mov	r4, r0
   11108:	460d      	mov	r5, r1
    /*
     * We should always have at least "stat" registered so if there are no stats
     * registered, try to initialize module first. This allows to register stat
     * before sysinit is called (e.g. from BSP).
     */
    if (g_stats_stats.snum_registered == 0) {
   1110a:	4b07      	ldr	r3, [pc, #28]	; (11128 <stats_register+0x24>)
   1110c:	695b      	ldr	r3, [r3, #20]
   1110e:	b913      	cbnz	r3, 11116 <stats_register+0x12>
        if (stats_module_init_internal()) {
   11110:	f7ff ff84 	bl	1101c <stats_module_init_internal>
   11114:	b920      	cbnz	r0, 11120 <stats_register+0x1c>
            return -1;
        }
    }

    return stats_register_internal(name, shdr);
   11116:	4629      	mov	r1, r5
   11118:	4620      	mov	r0, r4
   1111a:	f7ff fef1 	bl	10f00 <stats_register_internal>
}
   1111e:	bd38      	pop	{r3, r4, r5, pc}
            return -1;
   11120:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11124:	e7fb      	b.n	1111e <stats_register+0x1a>
   11126:	bf00      	nop
   11128:	200044ec 	.word	0x200044ec

0001112c <stats_nmgr_encode_name>:
    return (g_err);
}

static int
stats_nmgr_encode_name(struct stats_hdr *hdr, void *arg)
{
   1112c:	b538      	push	{r3, r4, r5, lr}
   1112e:	460c      	mov	r4, r1
    CborEncoder *penc = (CborEncoder *) arg;

    return cbor_encode_text_stringz(penc, hdr->s_name);
   11130:	6805      	ldr	r5, [r0, #0]
   11132:	4628      	mov	r0, r5
   11134:	f7fc fd08 	bl	db48 <strlen>
   11138:	4602      	mov	r2, r0
   1113a:	4629      	mov	r1, r5
   1113c:	4620      	mov	r0, r4
   1113e:	f002 f854 	bl	131ea <cbor_encode_text_string>
}
   11142:	bd38      	pop	{r3, r4, r5, pc}

00011144 <stats_nmgr_list>:
    return (0);
}

static int
stats_nmgr_list(struct mgmt_cbuf *cb)
{
   11144:	b530      	push	{r4, r5, lr}
   11146:	b085      	sub	sp, #20
    CborError g_err = CborNoError;
    CborEncoder stats;

    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   11148:	f100 050c 	add.w	r5, r0, #12
   1114c:	2202      	movs	r2, #2
   1114e:	4914      	ldr	r1, [pc, #80]	; (111a0 <stats_nmgr_list+0x5c>)
   11150:	4628      	mov	r0, r5
   11152:	f002 f84a 	bl	131ea <cbor_encode_text_string>
   11156:	4604      	mov	r4, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   11158:	2200      	movs	r2, #0
   1115a:	2300      	movs	r3, #0
   1115c:	4628      	mov	r0, r5
   1115e:	f001 ffc9 	bl	130f4 <cbor_encode_int>
   11162:	4304      	orrs	r4, r0
   11164:	2209      	movs	r2, #9
   11166:	490f      	ldr	r1, [pc, #60]	; (111a4 <stats_nmgr_list+0x60>)
   11168:	4628      	mov	r0, r5
   1116a:	f002 f83e 	bl	131ea <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "stat_list");
   1116e:	4304      	orrs	r4, r0
    g_err |= cbor_encoder_create_array(&cb->encoder, &stats,
   11170:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11174:	4669      	mov	r1, sp
   11176:	4628      	mov	r0, r5
   11178:	f002 f83e 	bl	131f8 <cbor_encoder_create_array>
   1117c:	4304      	orrs	r4, r0
                                       CborIndefiniteLength);
    stats_group_walk(stats_nmgr_encode_name, &stats);
   1117e:	4669      	mov	r1, sp
   11180:	4809      	ldr	r0, [pc, #36]	; (111a8 <stats_nmgr_list+0x64>)
   11182:	f7ff ff99 	bl	110b8 <stats_group_walk>
    g_err |= cbor_encoder_close_container(&cb->encoder, &stats);
   11186:	4669      	mov	r1, sp
   11188:	4628      	mov	r0, r5
   1118a:	f002 f848 	bl	1321e <cbor_encoder_close_container>

    if (g_err) {
   1118e:	ea54 0300 	orrs.w	r3, r4, r0
   11192:	d102      	bne.n	1119a <stats_nmgr_list+0x56>
        return MGMT_ERR_ENOMEM;
    }
    return (0);
   11194:	2000      	movs	r0, #0
}
   11196:	b005      	add	sp, #20
   11198:	bd30      	pop	{r4, r5, pc}
        return MGMT_ERR_ENOMEM;
   1119a:	2002      	movs	r0, #2
   1119c:	e7fb      	b.n	11196 <stats_nmgr_list+0x52>
   1119e:	bf00      	nop
   111a0:	00023a48 	.word	0x00023a48
   111a4:	00023a4c 	.word	0x00023a4c
   111a8:	0001112d 	.word	0x0001112d

000111ac <stats_nmgr_walk_func>:
{
   111ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   111b0:	4605      	mov	r5, r0
   111b2:	460e      	mov	r6, r1
   111b4:	4614      	mov	r4, r2
   111b6:	461f      	mov	r7, r3
    stat_val = (uint8_t *)hdr + stat_off;
   111b8:	eb00 0803 	add.w	r8, r0, r3
   111bc:	4610      	mov	r0, r2
   111be:	f7fc fcc3 	bl	db48 <strlen>
   111c2:	4602      	mov	r2, r0
   111c4:	4621      	mov	r1, r4
   111c6:	4630      	mov	r0, r6
   111c8:	f002 f80f 	bl	131ea <cbor_encode_text_string>
   111cc:	4604      	mov	r4, r0
    switch (hdr->s_size) {
   111ce:	792a      	ldrb	r2, [r5, #4]
   111d0:	2a04      	cmp	r2, #4
   111d2:	d00d      	beq.n	111f0 <stats_nmgr_walk_func+0x44>
   111d4:	2a08      	cmp	r2, #8
   111d6:	d012      	beq.n	111fe <stats_nmgr_walk_func+0x52>
   111d8:	2a02      	cmp	r2, #2
   111da:	d002      	beq.n	111e2 <stats_nmgr_walk_func+0x36>
}
   111dc:	4620      	mov	r0, r4
   111de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            g_err |= cbor_encode_uint(penc, *(uint16_t *) stat_val);
   111e2:	5bea      	ldrh	r2, [r5, r7]
   111e4:	2300      	movs	r3, #0
   111e6:	4630      	mov	r0, r6
   111e8:	f001 ff44 	bl	13074 <cbor_encode_uint>
   111ec:	4304      	orrs	r4, r0
            break;
   111ee:	e7f5      	b.n	111dc <stats_nmgr_walk_func+0x30>
            g_err |= cbor_encode_uint(penc, *(uint32_t *) stat_val);
   111f0:	59ea      	ldr	r2, [r5, r7]
   111f2:	2300      	movs	r3, #0
   111f4:	4630      	mov	r0, r6
   111f6:	f001 ff3d 	bl	13074 <cbor_encode_uint>
   111fa:	4304      	orrs	r4, r0
            break;
   111fc:	e7ee      	b.n	111dc <stats_nmgr_walk_func+0x30>
            g_err |= cbor_encode_uint(penc, *(uint64_t *) stat_val);
   111fe:	e9d8 2300 	ldrd	r2, r3, [r8]
   11202:	4630      	mov	r0, r6
   11204:	f001 ff36 	bl	13074 <cbor_encode_uint>
   11208:	4304      	orrs	r4, r0
            break;
   1120a:	e7e7      	b.n	111dc <stats_nmgr_walk_func+0x30>

0001120c <stats_nmgr_read>:
{
   1120c:	b570      	push	{r4, r5, r6, lr}
   1120e:	b0a4      	sub	sp, #144	; 0x90
   11210:	4605      	mov	r5, r0
    struct cbor_attr_t attrs[] = {
   11212:	2260      	movs	r2, #96	; 0x60
   11214:	2100      	movs	r1, #0
   11216:	a804      	add	r0, sp, #16
   11218:	f7fc fc5f 	bl	dada <memset>
   1121c:	4b30      	ldr	r3, [pc, #192]	; (112e0 <stats_nmgr_read+0xd4>)
   1121e:	9304      	str	r3, [sp, #16]
   11220:	2304      	movs	r3, #4
   11222:	f88d 3014 	strb.w	r3, [sp, #20]
   11226:	ab1c      	add	r3, sp, #112	; 0x70
   11228:	9306      	str	r3, [sp, #24]
   1122a:	2320      	movs	r3, #32
   1122c:	930e      	str	r3, [sp, #56]	; 0x38
    g_err = cbor_read_object(&cb->it, attrs);
   1122e:	a904      	add	r1, sp, #16
   11230:	f105 001c 	add.w	r0, r5, #28
   11234:	f001 fdf2 	bl	12e1c <cbor_read_object>
    if (g_err != 0) {
   11238:	2800      	cmp	r0, #0
   1123a:	d14a      	bne.n	112d2 <stats_nmgr_read+0xc6>
   1123c:	4604      	mov	r4, r0
    hdr = stats_group_find(stats_name);
   1123e:	a81c      	add	r0, sp, #112	; 0x70
   11240:	f7ff ff4e 	bl	110e0 <stats_group_find>
    if (!hdr) {
   11244:	4606      	mov	r6, r0
   11246:	2800      	cmp	r0, #0
   11248:	d045      	beq.n	112d6 <stats_nmgr_read+0xca>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1124a:	350c      	adds	r5, #12
   1124c:	2202      	movs	r2, #2
   1124e:	4925      	ldr	r1, [pc, #148]	; (112e4 <stats_nmgr_read+0xd8>)
   11250:	4628      	mov	r0, r5
   11252:	f001 ffca 	bl	131ea <cbor_encode_text_string>
   11256:	4304      	orrs	r4, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   11258:	2200      	movs	r2, #0
   1125a:	2300      	movs	r3, #0
   1125c:	4628      	mov	r0, r5
   1125e:	f001 ff49 	bl	130f4 <cbor_encode_int>
   11262:	4304      	orrs	r4, r0
   11264:	2204      	movs	r2, #4
   11266:	491e      	ldr	r1, [pc, #120]	; (112e0 <stats_nmgr_read+0xd4>)
   11268:	4628      	mov	r0, r5
   1126a:	f001 ffbe 	bl	131ea <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "name");
   1126e:	4304      	orrs	r4, r0
   11270:	a81c      	add	r0, sp, #112	; 0x70
   11272:	f7fc fc69 	bl	db48 <strlen>
   11276:	4602      	mov	r2, r0
   11278:	a91c      	add	r1, sp, #112	; 0x70
   1127a:	4628      	mov	r0, r5
   1127c:	f001 ffb5 	bl	131ea <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, stats_name);
   11280:	4304      	orrs	r4, r0
   11282:	2205      	movs	r2, #5
   11284:	4918      	ldr	r1, [pc, #96]	; (112e8 <stats_nmgr_read+0xdc>)
   11286:	4628      	mov	r0, r5
   11288:	f001 ffaf 	bl	131ea <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "group");
   1128c:	4304      	orrs	r4, r0
    g_err |= cbor_encode_text_string(&cb->encoder, "sys", sizeof("sys")-1);
   1128e:	2203      	movs	r2, #3
   11290:	4916      	ldr	r1, [pc, #88]	; (112ec <stats_nmgr_read+0xe0>)
   11292:	4628      	mov	r0, r5
   11294:	f001 ffa9 	bl	131ea <cbor_encode_text_string>
   11298:	4304      	orrs	r4, r0
   1129a:	2206      	movs	r2, #6
   1129c:	4914      	ldr	r1, [pc, #80]	; (112f0 <stats_nmgr_read+0xe4>)
   1129e:	4628      	mov	r0, r5
   112a0:	f001 ffa3 	bl	131ea <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "fields");
   112a4:	4304      	orrs	r4, r0
    g_err |= cbor_encoder_create_map(&cb->encoder, &stats,
   112a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   112aa:	4669      	mov	r1, sp
   112ac:	4628      	mov	r0, r5
   112ae:	f001 ffa8 	bl	13202 <cbor_encoder_create_map>
   112b2:	4304      	orrs	r4, r0
    stats_walk(hdr, stats_nmgr_walk_func, &stats);
   112b4:	466a      	mov	r2, sp
   112b6:	490f      	ldr	r1, [pc, #60]	; (112f4 <stats_nmgr_read+0xe8>)
   112b8:	4630      	mov	r0, r6
   112ba:	f7ff fe4d 	bl	10f58 <stats_walk>
    g_err |= cbor_encoder_close_container(&cb->encoder, &stats);
   112be:	4669      	mov	r1, sp
   112c0:	4628      	mov	r0, r5
   112c2:	f001 ffac 	bl	1321e <cbor_encoder_close_container>
    if (g_err) {
   112c6:	ea54 0300 	orrs.w	r3, r4, r0
   112ca:	d106      	bne.n	112da <stats_nmgr_read+0xce>
    return (0);
   112cc:	2000      	movs	r0, #0
}
   112ce:	b024      	add	sp, #144	; 0x90
   112d0:	bd70      	pop	{r4, r5, r6, pc}
        return MGMT_ERR_EINVAL;
   112d2:	2003      	movs	r0, #3
   112d4:	e7fb      	b.n	112ce <stats_nmgr_read+0xc2>
        return MGMT_ERR_EINVAL;
   112d6:	2003      	movs	r0, #3
   112d8:	e7f9      	b.n	112ce <stats_nmgr_read+0xc2>
        return MGMT_ERR_ENOMEM;
   112da:	2002      	movs	r0, #2
   112dc:	e7f7      	b.n	112ce <stats_nmgr_read+0xc2>
   112de:	bf00      	nop
   112e0:	00024d00 	.word	0x00024d00
   112e4:	00023a48 	.word	0x00023a48
   112e8:	00023a58 	.word	0x00023a58
   112ec:	00023a60 	.word	0x00023a60
   112f0:	00023a64 	.word	0x00023a64
   112f4:	000111ad 	.word	0x000111ad

000112f8 <stats_nmgr_register_group>:
/**
 * Register nmgr group handlers
 */
int
stats_nmgr_register_group(void)
{
   112f8:	b508      	push	{r3, lr}
    int rc;

    MGMT_GROUP_SET_HANDLERS(&shell_nmgr_group, shell_nmgr_group_handlers);
   112fa:	4804      	ldr	r0, [pc, #16]	; (1130c <stats_nmgr_register_group+0x14>)
   112fc:	4b04      	ldr	r3, [pc, #16]	; (11310 <stats_nmgr_register_group+0x18>)
   112fe:	6003      	str	r3, [r0, #0]
   11300:	2302      	movs	r3, #2
   11302:	8083      	strh	r3, [r0, #4]
    shell_nmgr_group.mg_group_id = MGMT_GROUP_ID_STATS;
   11304:	80c3      	strh	r3, [r0, #6]

    rc = mgmt_group_register(&shell_nmgr_group);
   11306:	f00c f847 	bl	1d398 <mgmt_group_register>
    }

    return (0);
err:
    return (rc);
}
   1130a:	bd08      	pop	{r3, pc}
   1130c:	20004504 	.word	0x20004504
   11310:	2000062c 	.word	0x2000062c

00011314 <stats_shell_display_entry>:
uint8_t stats_shell_registered;

static int 
stats_shell_display_entry(struct stats_hdr *hdr, void *arg, char *name,
        uint16_t stat_off)
{
   11314:	b500      	push	{lr}
   11316:	b083      	sub	sp, #12
   11318:	4684      	mov	ip, r0
   1131a:	4608      	mov	r0, r1
    struct streamer *streamer;
    void *stat_val;

    streamer = arg;

    stat_val = (uint8_t *)hdr + stat_off;
   1131c:	eb0c 0103 	add.w	r1, ip, r3
    switch (hdr->s_size) {
   11320:	f89c e004 	ldrb.w	lr, [ip, #4]
   11324:	f1be 0f04 	cmp.w	lr, #4
   11328:	d013      	beq.n	11352 <stats_shell_display_entry+0x3e>
   1132a:	f1be 0f08 	cmp.w	lr, #8
   1132e:	d016      	beq.n	1135e <stats_shell_display_entry+0x4a>
   11330:	f1be 0f02 	cmp.w	lr, #2
   11334:	d004      	beq.n	11340 <stats_shell_display_entry+0x2c>
        case sizeof(uint64_t):
            streamer_printf(streamer, "%s: %llu\n", name,
                    *(uint64_t *) stat_val);
            break;
        default:
            streamer_printf(streamer, "Unknown stat size for %s %u\n", name, 
   11336:	4673      	mov	r3, lr
   11338:	490d      	ldr	r1, [pc, #52]	; (11370 <stats_shell_display_entry+0x5c>)
   1133a:	f001 f85a 	bl	123f2 <streamer_printf>
                    hdr->s_size);
            break;
   1133e:	e004      	b.n	1134a <stats_shell_display_entry+0x36>
            streamer_printf(streamer, "%s: %u\n", name,
   11340:	f83c 3003 	ldrh.w	r3, [ip, r3]
   11344:	490b      	ldr	r1, [pc, #44]	; (11374 <stats_shell_display_entry+0x60>)
   11346:	f001 f854 	bl	123f2 <streamer_printf>
    }

    return (0);
}
   1134a:	2000      	movs	r0, #0
   1134c:	b003      	add	sp, #12
   1134e:	f85d fb04 	ldr.w	pc, [sp], #4
            streamer_printf(streamer, "%s: %lu\n", name,
   11352:	f85c 3003 	ldr.w	r3, [ip, r3]
   11356:	4908      	ldr	r1, [pc, #32]	; (11378 <stats_shell_display_entry+0x64>)
   11358:	f001 f84b 	bl	123f2 <streamer_printf>
            break;
   1135c:	e7f5      	b.n	1134a <stats_shell_display_entry+0x36>
            streamer_printf(streamer, "%s: %llu\n", name,
   1135e:	ed91 7b00 	vldr	d7, [r1]
   11362:	ed8d 7b00 	vstr	d7, [sp]
   11366:	4905      	ldr	r1, [pc, #20]	; (1137c <stats_shell_display_entry+0x68>)
   11368:	f001 f843 	bl	123f2 <streamer_printf>
            break;
   1136c:	e7ed      	b.n	1134a <stats_shell_display_entry+0x36>
   1136e:	bf00      	nop
   11370:	00023a8c 	.word	0x00023a8c
   11374:	00023a6c 	.word	0x00023a6c
   11378:	00023a74 	.word	0x00023a74
   1137c:	00023a80 	.word	0x00023a80

00011380 <stats_shell_display_group>:

static int 
stats_shell_display_group(struct stats_hdr *hdr, void *arg)
{
   11380:	b508      	push	{r3, lr}
   11382:	460b      	mov	r3, r1
    struct streamer *streamer;

    streamer = arg;
    streamer_printf(streamer, "\t%s\n", hdr->s_name);
   11384:	6802      	ldr	r2, [r0, #0]
   11386:	4903      	ldr	r1, [pc, #12]	; (11394 <stats_shell_display_group+0x14>)
   11388:	4618      	mov	r0, r3
   1138a:	f001 f832 	bl	123f2 <streamer_printf>
    return (0);
}
   1138e:	2000      	movs	r0, #0
   11390:	bd08      	pop	{r3, pc}
   11392:	bf00      	nop
   11394:	00023aac 	.word	0x00023aac

00011398 <shell_stats_display>:

static int
shell_stats_display(const struct shell_cmd *cmd, int argc, char **argv,
                    struct streamer *streamer)
{
   11398:	b538      	push	{r3, r4, r5, lr}
   1139a:	461c      	mov	r4, r3
    struct stats_hdr *hdr;
    char *name;
    int rc;

    name = argv[1];
   1139c:	6855      	ldr	r5, [r2, #4]
    if (name == NULL || !strcmp(name, "")) {
   1139e:	b155      	cbz	r5, 113b6 <shell_stats_display+0x1e>
   113a0:	782b      	ldrb	r3, [r5, #0]
   113a2:	b143      	cbz	r3, 113b6 <shell_stats_display+0x1e>
        stats_group_walk(stats_shell_display_group, streamer);
        rc = OS_EINVAL;
        goto err;
    }

    hdr = stats_group_find(name);
   113a4:	4628      	mov	r0, r5
   113a6:	f7ff fe9b 	bl	110e0 <stats_group_find>
    if (!hdr) {
   113aa:	b170      	cbz	r0, 113ca <shell_stats_display+0x32>
        streamer_printf(streamer, "Could not find statistic group %s\n", name);
        rc = OS_EINVAL;
        goto err;
    }

    rc = stats_walk(hdr, stats_shell_display_entry, streamer);
   113ac:	4622      	mov	r2, r4
   113ae:	490a      	ldr	r1, [pc, #40]	; (113d8 <shell_stats_display+0x40>)
   113b0:	f7ff fdd2 	bl	10f58 <stats_walk>
    }

    return (0);
err:
    return (rc);
}
   113b4:	bd38      	pop	{r3, r4, r5, pc}
        streamer_printf(streamer, "Must specify a statistic name to dump, "
   113b6:	4909      	ldr	r1, [pc, #36]	; (113dc <shell_stats_display+0x44>)
   113b8:	4620      	mov	r0, r4
   113ba:	f001 f81a 	bl	123f2 <streamer_printf>
        stats_group_walk(stats_shell_display_group, streamer);
   113be:	4621      	mov	r1, r4
   113c0:	4807      	ldr	r0, [pc, #28]	; (113e0 <shell_stats_display+0x48>)
   113c2:	f7ff fe79 	bl	110b8 <stats_group_walk>
        rc = OS_EINVAL;
   113c6:	2002      	movs	r0, #2
        goto err;
   113c8:	e7f4      	b.n	113b4 <shell_stats_display+0x1c>
        streamer_printf(streamer, "Could not find statistic group %s\n", name);
   113ca:	462a      	mov	r2, r5
   113cc:	4905      	ldr	r1, [pc, #20]	; (113e4 <shell_stats_display+0x4c>)
   113ce:	4620      	mov	r0, r4
   113d0:	f001 f80f 	bl	123f2 <streamer_printf>
        rc = OS_EINVAL;
   113d4:	2002      	movs	r0, #2
        goto err;
   113d6:	e7ed      	b.n	113b4 <shell_stats_display+0x1c>
   113d8:	00011315 	.word	0x00011315
   113dc:	00023ab4 	.word	0x00023ab4
   113e0:	00011381 	.word	0x00011381
   113e4:	00023af0 	.word	0x00023af0

000113e8 <stats_shell_register>:


int 
stats_shell_register(void)
{
   113e8:	b508      	push	{r3, lr}
    if (!stats_shell_registered) {
   113ea:	4b06      	ldr	r3, [pc, #24]	; (11404 <stats_shell_register+0x1c>)
   113ec:	781b      	ldrb	r3, [r3, #0]
   113ee:	b10b      	cbz	r3, 113f4 <stats_shell_register+0xc>
        stats_shell_registered = 1;
        shell_cmd_register(&shell_stats_cmd);
    }

    return (0);
}
   113f0:	2000      	movs	r0, #0
   113f2:	bd08      	pop	{r3, pc}
        stats_shell_registered = 1;
   113f4:	4b03      	ldr	r3, [pc, #12]	; (11404 <stats_shell_register+0x1c>)
   113f6:	2201      	movs	r2, #1
   113f8:	701a      	strb	r2, [r3, #0]
        shell_cmd_register(&shell_stats_cmd);
   113fa:	4803      	ldr	r0, [pc, #12]	; (11408 <stats_shell_register+0x20>)
   113fc:	f7ff fa26 	bl	1084c <shell_cmd_register>
   11400:	e7f6      	b.n	113f0 <stats_shell_register+0x8>
   11402:	bf00      	nop
   11404:	20004510 	.word	0x20004510
   11408:	2000063c 	.word	0x2000063c

0001140c <sysdown_timer_exp>:
    }
}

static void
sysdown_timer_exp(struct os_event *unused)
{
   1140c:	b508      	push	{r3, lr}
    assert(0);
   1140e:	2300      	movs	r3, #0
   11410:	461a      	mov	r2, r3
   11412:	4619      	mov	r1, r3
   11414:	4618      	mov	r0, r3
   11416:	f7f7 fda5 	bl	8f64 <__assert_func>
	...

0001141c <sysdown_complete>:
{
   1141c:	b508      	push	{r3, lr}
    os_callout_stop(&sysdown_timer);
   1141e:	4803      	ldr	r0, [pc, #12]	; (1142c <sysdown_complete+0x10>)
   11420:	f7f7 ff3c 	bl	929c <os_callout_stop>
    os_system_reset();
   11424:	f7f7 ff0b 	bl	923e <os_system_reset>
}
   11428:	bd08      	pop	{r3, pc}
   1142a:	bf00      	nop
   1142c:	20004518 	.word	0x20004518

00011430 <sysdown>:
}

int
sysdown(int reason)
{
   11430:	b570      	push	{r4, r5, r6, lr}
   11432:	4605      	mov	r5, r0
    os_sr_t sr;
    int rc;
    int i;

    /* Only allow one shutdown operation. */
    OS_ENTER_CRITICAL(sr);
   11434:	f7f8 ffae 	bl	a394 <os_arch_save_sr>
    if (sysdown_active) {
   11438:	4b20      	ldr	r3, [pc, #128]	; (114bc <sysdown+0x8c>)
   1143a:	781b      	ldrb	r3, [r3, #0]
   1143c:	b943      	cbnz	r3, 11450 <sysdown+0x20>
        rc = SYS_EALREADY;
    } else {
        sysdown_active = true;
   1143e:	4b1f      	ldr	r3, [pc, #124]	; (114bc <sysdown+0x8c>)
   11440:	2201      	movs	r2, #1
   11442:	701a      	strb	r2, [r3, #0]
        rc = 0;
   11444:	2600      	movs	r6, #0
    }
    OS_EXIT_CRITICAL(sr);
   11446:	f7f8 ffab 	bl	a3a0 <os_arch_restore_sr>

    if (rc != 0) {
   1144a:	b126      	cbz	r6, 11456 <sysdown+0x26>
    if (sysdown_num_in_progress == 0) {
        sysdown_complete();
    }

    return 0;
}
   1144c:	4630      	mov	r0, r6
   1144e:	bd70      	pop	{r4, r5, r6, pc}
        rc = SYS_EALREADY;
   11450:	f06f 060a 	mvn.w	r6, #10
   11454:	e7f7      	b.n	11446 <sysdown+0x16>
    os_callout_init(&sysdown_timer, os_eventq_dflt_get(), sysdown_timer_exp,
   11456:	f7f8 f967 	bl	9728 <os_eventq_dflt_get>
   1145a:	4601      	mov	r1, r0
   1145c:	4c18      	ldr	r4, [pc, #96]	; (114c0 <sysdown+0x90>)
   1145e:	2300      	movs	r3, #0
   11460:	4a18      	ldr	r2, [pc, #96]	; (114c4 <sysdown+0x94>)
   11462:	4620      	mov	r0, r4
   11464:	f7f7 ff0c 	bl	9280 <os_callout_init>
    rc = os_callout_reset(&sysdown_timer, SYSDOWN_TIMEOUT_TICKS);
   11468:	f44f 61a0 	mov.w	r1, #1280	; 0x500
   1146c:	4620      	mov	r0, r4
   1146e:	f7f7 ff33 	bl	92d8 <os_callout_reset>
    assert(rc == 0);
   11472:	4606      	mov	r6, r0
   11474:	b908      	cbnz	r0, 1147a <sysdown+0x4a>
    for (i = 0; sysdown_cbs[i] != NULL; i++) {
   11476:	4604      	mov	r4, r0
   11478:	e006      	b.n	11488 <sysdown+0x58>
    assert(rc == 0);
   1147a:	2300      	movs	r3, #0
   1147c:	461a      	mov	r2, r3
   1147e:	4619      	mov	r1, r3
   11480:	4618      	mov	r0, r3
   11482:	f7f7 fd6f 	bl	8f64 <__assert_func>
    for (i = 0; sysdown_cbs[i] != NULL; i++) {
   11486:	3401      	adds	r4, #1
   11488:	4b0f      	ldr	r3, [pc, #60]	; (114c8 <sysdown+0x98>)
   1148a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   1148e:	b163      	cbz	r3, 114aa <sysdown+0x7a>
        rc = sysdown_cbs[i](reason);
   11490:	4628      	mov	r0, r5
   11492:	4798      	blx	r3
        switch (rc) {
   11494:	2801      	cmp	r0, #1
   11496:	d1f6      	bne.n	11486 <sysdown+0x56>
            OS_ENTER_CRITICAL(sr);
   11498:	f7f8 ff7c 	bl	a394 <os_arch_save_sr>
            sysdown_num_in_progress++;
   1149c:	4a0b      	ldr	r2, [pc, #44]	; (114cc <sysdown+0x9c>)
   1149e:	6813      	ldr	r3, [r2, #0]
   114a0:	3301      	adds	r3, #1
   114a2:	6013      	str	r3, [r2, #0]
            OS_EXIT_CRITICAL(sr);
   114a4:	f7f8 ff7c 	bl	a3a0 <os_arch_restore_sr>
            break;
   114a8:	e7ed      	b.n	11486 <sysdown+0x56>
    if (sysdown_num_in_progress == 0) {
   114aa:	4b08      	ldr	r3, [pc, #32]	; (114cc <sysdown+0x9c>)
   114ac:	681c      	ldr	r4, [r3, #0]
   114ae:	2c00      	cmp	r4, #0
   114b0:	d1cc      	bne.n	1144c <sysdown+0x1c>
        sysdown_complete();
   114b2:	f7ff ffb3 	bl	1141c <sysdown_complete>
    return 0;
   114b6:	4626      	mov	r6, r4
   114b8:	e7c8      	b.n	1144c <sysdown+0x1c>
   114ba:	bf00      	nop
   114bc:	20004511 	.word	0x20004511
   114c0:	20004518 	.word	0x20004518
   114c4:	0001140d 	.word	0x0001140d
   114c8:	00023f20 	.word	0x00023f20
   114cc:	20004514 	.word	0x20004514

000114d0 <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
   114d0:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
   114d2:	f7f7 fd47 	bl	8f64 <__assert_func>
	...

000114d8 <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
   114d8:	4b01      	ldr	r3, [pc, #4]	; (114e0 <sysinit_start+0x8>)
   114da:	2201      	movs	r2, #1
   114dc:	701a      	strb	r2, [r3, #0]
}
   114de:	4770      	bx	lr
   114e0:	20004538 	.word	0x20004538

000114e4 <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
   114e4:	4b01      	ldr	r3, [pc, #4]	; (114ec <sysinit_end+0x8>)
   114e6:	2200      	movs	r2, #0
   114e8:	701a      	strb	r2, [r3, #0]
}
   114ea:	4770      	bx	lr
   114ec:	20004538 	.word	0x20004538

000114f0 <uwbcfg_set>:

static int
uwbcfg_set(int argc, char **argv, char *val)
{
    int i;
    if (argc == 1) {
   114f0:	2801      	cmp	r0, #1
   114f2:	d00a      	beq.n	1150a <uwbcfg_set+0x1a>
        for (i=0;i<CFGSTR_MAX;i++) {
            if (!strcmp(argv[0], g_uwbcfg_str[i]))
                return CONF_VALUE_SET(val, CONF_STRING, g_uwb_config[i]);
        }
    }
    return DPL_ENOENT;
   114f4:	200a      	movs	r0, #10
}
   114f6:	4770      	bx	lr
                return CONF_VALUE_SET(val, CONF_STRING, g_uwb_config[i]);
   114f8:	2308      	movs	r3, #8
   114fa:	4a0d      	ldr	r2, [pc, #52]	; (11530 <uwbcfg_set+0x40>)
   114fc:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
   11500:	2106      	movs	r1, #6
   11502:	4630      	mov	r0, r6
   11504:	f7fd fb35 	bl	eb72 <conf_value_from_str>
}
   11508:	bd70      	pop	{r4, r5, r6, pc}
{
   1150a:	b570      	push	{r4, r5, r6, lr}
   1150c:	460d      	mov	r5, r1
   1150e:	4616      	mov	r6, r2
        for (i=0;i<CFGSTR_MAX;i++) {
   11510:	2400      	movs	r4, #0
   11512:	2c13      	cmp	r4, #19
   11514:	dc09      	bgt.n	1152a <uwbcfg_set+0x3a>
            if (!strcmp(argv[0], g_uwbcfg_str[i]))
   11516:	4b07      	ldr	r3, [pc, #28]	; (11534 <uwbcfg_set+0x44>)
   11518:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   1151c:	6828      	ldr	r0, [r5, #0]
   1151e:	f7fc fb07 	bl	db30 <strcmp>
   11522:	2800      	cmp	r0, #0
   11524:	d0e8      	beq.n	114f8 <uwbcfg_set+0x8>
        for (i=0;i<CFGSTR_MAX;i++) {
   11526:	3401      	adds	r4, #1
   11528:	e7f3      	b.n	11512 <uwbcfg_set+0x22>
    return DPL_ENOENT;
   1152a:	200a      	movs	r0, #10
   1152c:	e7ec      	b.n	11508 <uwbcfg_set+0x18>
   1152e:	bf00      	nop
   11530:	20000650 	.word	0x20000650
   11534:	200006f0 	.word	0x200006f0

00011538 <uwbcfg_get>:
    if (argc == 1) {
   11538:	2801      	cmp	r0, #1
   1153a:	d10d      	bne.n	11558 <uwbcfg_get+0x20>
{
   1153c:	b538      	push	{r3, r4, r5, lr}
   1153e:	460d      	mov	r5, r1
        for (i=0;i<CFGSTR_MAX;i++) {
   11540:	2400      	movs	r4, #0
   11542:	2c13      	cmp	r4, #19
   11544:	dc0e      	bgt.n	11564 <uwbcfg_get+0x2c>
            if (!strcmp(argv[0], g_uwbcfg_str[i])) return g_uwb_config[i];
   11546:	4b08      	ldr	r3, [pc, #32]	; (11568 <uwbcfg_get+0x30>)
   11548:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   1154c:	6828      	ldr	r0, [r5, #0]
   1154e:	f7fc faef 	bl	db30 <strcmp>
   11552:	b118      	cbz	r0, 1155c <uwbcfg_get+0x24>
        for (i=0;i<CFGSTR_MAX;i++) {
   11554:	3401      	adds	r4, #1
   11556:	e7f4      	b.n	11542 <uwbcfg_get+0xa>
    return NULL;
   11558:	2000      	movs	r0, #0
}
   1155a:	4770      	bx	lr
            if (!strcmp(argv[0], g_uwbcfg_str[i])) return g_uwb_config[i];
   1155c:	4803      	ldr	r0, [pc, #12]	; (1156c <uwbcfg_get+0x34>)
   1155e:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
}
   11562:	bd38      	pop	{r3, r4, r5, pc}
    return NULL;
   11564:	2000      	movs	r0, #0
   11566:	e7fc      	b.n	11562 <uwbcfg_get+0x2a>
   11568:	200006f0 	.word	0x200006f0
   1156c:	20000650 	.word	0x20000650

00011570 <uwbcfg_export>:
}

static int
uwbcfg_export(void (*export_func)(char *name, char *val),
  enum conf_export_tgt tgt)
{
   11570:	b530      	push	{r4, r5, lr}
   11572:	b08b      	sub	sp, #44	; 0x2c
   11574:	4605      	mov	r5, r0
    int i;
    char b[32];
    for (i=0;i<CFGSTR_MAX;i++) {
   11576:	2400      	movs	r4, #0
   11578:	e010      	b.n	1159c <uwbcfg_export+0x2c>
        snprintf(b, sizeof(b), "%s/%s", uwbcfg_handler.ch_name, g_uwbcfg_str[i]);
   1157a:	4b0b      	ldr	r3, [pc, #44]	; (115a8 <uwbcfg_export+0x38>)
   1157c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   11580:	9300      	str	r3, [sp, #0]
   11582:	4b0a      	ldr	r3, [pc, #40]	; (115ac <uwbcfg_export+0x3c>)
   11584:	685b      	ldr	r3, [r3, #4]
   11586:	4a0a      	ldr	r2, [pc, #40]	; (115b0 <uwbcfg_export+0x40>)
   11588:	2120      	movs	r1, #32
   1158a:	a802      	add	r0, sp, #8
   1158c:	f7fc fee7 	bl	e35e <snprintf>
        export_func(b, g_uwb_config[i]);
   11590:	4908      	ldr	r1, [pc, #32]	; (115b4 <uwbcfg_export+0x44>)
   11592:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
   11596:	a802      	add	r0, sp, #8
   11598:	47a8      	blx	r5
    for (i=0;i<CFGSTR_MAX;i++) {
   1159a:	3401      	adds	r4, #1
   1159c:	2c13      	cmp	r4, #19
   1159e:	ddec      	ble.n	1157a <uwbcfg_export+0xa>
    }
    return 0;
}
   115a0:	2000      	movs	r0, #0
   115a2:	b00b      	add	sp, #44	; 0x2c
   115a4:	bd30      	pop	{r4, r5, pc}
   115a6:	bf00      	nop
   115a8:	200006f0 	.word	0x200006f0
   115ac:	20000740 	.word	0x20000740
   115b0:	00023b14 	.word	0x00023b14
   115b4:	20000650 	.word	0x20000650

000115b8 <uwbcfg_commit_to_inst>:
{
   115b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   115ba:	b083      	sub	sp, #12
   115bc:	4604      	mov	r4, r0
   115be:	460d      	mov	r5, r1
    conf_value_from_str(cfg[CFGSTR_CH], CONF_INT8, (void*)&(inst->config.channel), 0);
   115c0:	2300      	movs	r3, #0
   115c2:	f200 520c 	addw	r2, r0, #1292	; 0x50c
   115c6:	2102      	movs	r1, #2
   115c8:	4628      	mov	r0, r5
   115ca:	f7fd fad2 	bl	eb72 <conf_value_from_str>
    if (!strcmp(cfg[CFGSTR_DATARATE], "6m8")) {
   115ce:	f105 0610 	add.w	r6, r5, #16
   115d2:	4984      	ldr	r1, [pc, #528]	; (117e4 <uwbcfg_commit_to_inst+0x22c>)
   115d4:	4630      	mov	r0, r6
   115d6:	f7fc faab 	bl	db30 <strcmp>
   115da:	2800      	cmp	r0, #0
   115dc:	f040 80c0 	bne.w	11760 <uwbcfg_commit_to_inst+0x1a8>
        inst->attrib.Tdsym = DPL_FLOAT32_INIT(0.12821f);
   115e0:	f204 533c 	addw	r3, r4, #1340	; 0x53c
   115e4:	4a80      	ldr	r2, [pc, #512]	; (117e8 <uwbcfg_commit_to_inst+0x230>)
   115e6:	601a      	str	r2, [r3, #0]
        sfd_len = 8;
   115e8:	2708      	movs	r7, #8
    conf_value_from_str(cfg[CFGSTR_RX_PACLEN], CONF_INT8, (void*)&paclen, 0);
   115ea:	2300      	movs	r3, #0
   115ec:	f10d 0207 	add.w	r2, sp, #7
   115f0:	2102      	movs	r1, #2
   115f2:	f105 0018 	add.w	r0, r5, #24
   115f6:	f7fd fabc 	bl	eb72 <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_RX_SFDTYPE], CONF_INT8,
   115fa:	2300      	movs	r3, #0
   115fc:	f204 5212 	addw	r2, r4, #1298	; 0x512
   11600:	2102      	movs	r1, #2
   11602:	f105 0028 	add.w	r0, r5, #40	; 0x28
   11606:	f7fd fab4 	bl	eb72 <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_RX_SFD_TO], CONF_INT16, (void*)&sfd_timeout, 0);
   1160a:	2300      	movs	r3, #0
   1160c:	f10d 0202 	add.w	r2, sp, #2
   11610:	2103      	movs	r1, #3
   11612:	f105 0030 	add.w	r0, r5, #48	; 0x30
   11616:	f7fd faac 	bl	eb72 <conf_value_from_str>
    inst->config.rx.phrMode = (cfg[CFGSTR_RX_PHRMODE][0] == 's')? DWT_PHRMODE_STD : DWT_PHRMODE_EXT;
   1161a:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   1161e:	2b73      	cmp	r3, #115	; 0x73
   11620:	f000 80b6 	beq.w	11790 <uwbcfg_commit_to_inst+0x1d8>
   11624:	2303      	movs	r3, #3
   11626:	f884 3513 	strb.w	r3, [r4, #1299]	; 0x513
    if (inst->rxdiag) {
   1162a:	f8d4 24f8 	ldr.w	r2, [r4, #1272]	; 0x4f8
   1162e:	b192      	cbz	r2, 11656 <uwbcfg_commit_to_inst+0x9e>
        conf_value_from_str(cfg[CFGSTR_RX_DIAG_EN], CONF_INT16,
   11630:	2300      	movs	r3, #0
   11632:	3202      	adds	r2, #2
   11634:	2103      	movs	r1, #3
   11636:	f105 0040 	add.w	r0, r5, #64	; 0x40
   1163a:	f7fd fa9a 	bl	eb72 <conf_value_from_str>
        inst->config.rxdiag_enable = (inst->rxdiag->enabled != 0);
   1163e:	f8d4 34f8 	ldr.w	r3, [r4, #1272]	; 0x4f8
   11642:	885b      	ldrh	r3, [r3, #2]
   11644:	3b00      	subs	r3, #0
   11646:	bf18      	it	ne
   11648:	2301      	movne	r3, #1
   1164a:	f894 252c 	ldrb.w	r2, [r4, #1324]	; 0x52c
   1164e:	f363 1286 	bfi	r2, r3, #6, #1
   11652:	f884 252c 	strb.w	r2, [r4, #1324]	; 0x52c
    conf_value_from_str(cfg[CFGSTR_RX_PREAM_CIDX], CONF_INT8,
   11656:	2300      	movs	r3, #0
   11658:	f204 5211 	addw	r2, r4, #1297	; 0x511
   1165c:	2102      	movs	r1, #2
   1165e:	f105 0020 	add.w	r0, r5, #32
   11662:	f7fd fa86 	bl	eb72 <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_TX_PREAM_CIDX], CONF_INT8,
   11666:	2300      	movs	r3, #0
   11668:	f504 62a4 	add.w	r2, r4, #1312	; 0x520
   1166c:	2102      	movs	r1, #2
   1166e:	f105 0048 	add.w	r0, r5, #72	; 0x48
   11672:	f7fd fa7e 	bl	eb72 <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_RX_ANTDLY], CONF_INT16, (void*)&inst->rx_antenna_delay, 0);
   11676:	2300      	movs	r3, #0
   11678:	f204 42cc 	addw	r2, r4, #1228	; 0x4cc
   1167c:	2103      	movs	r1, #3
   1167e:	f105 0068 	add.w	r0, r5, #104	; 0x68
   11682:	f7fd fa76 	bl	eb72 <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_TX_ANTDLY], CONF_INT16, (void*)&inst->tx_antenna_delay, 0);
   11686:	2300      	movs	r3, #0
   11688:	f204 42ce 	addw	r2, r4, #1230	; 0x4ce
   1168c:	2103      	movs	r1, #3
   1168e:	f105 0070 	add.w	r0, r5, #112	; 0x70
   11692:	f7fd fa6e 	bl	eb72 <conf_value_from_str>
    inst->rx_ant_separation = DPL_FLOAT32_FROM_F64(strtod_soft(cfg[CFGSTR_RX_ANTSEP], 0));
   11696:	2100      	movs	r1, #0
   11698:	f105 0078 	add.w	r0, r5, #120	; 0x78
   1169c:	f000 fa92 	bl	11bc4 <strtod_soft>
   116a0:	ec51 0b10 	vmov	r0, r1, d0
   116a4:	f010 f97c 	bl	219a0 <__aeabi_d2f>
   116a8:	f504 639a 	add.w	r3, r4, #1232	; 0x4d0
   116ac:	6018      	str	r0, [r3, #0]
    conf_value_from_str(cfg[CFGSTR_EXT_CLKDLY], CONF_INT32, (void*)&inst->ext_clock_delay, 0);
   116ae:	2300      	movs	r3, #0
   116b0:	f204 42d4 	addw	r2, r4, #1236	; 0x4d4
   116b4:	2104      	movs	r1, #4
   116b6:	f105 0080 	add.w	r0, r5, #128	; 0x80
   116ba:	f7fd fa5a 	bl	eb72 <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_ROLE], CONF_INT16, (void*)&inst->role, 0);
   116be:	2300      	movs	r3, #0
   116c0:	f204 42b4 	addw	r2, r4, #1204	; 0x4b4
   116c4:	2103      	movs	r1, #3
   116c6:	f105 0088 	add.w	r0, r5, #136	; 0x88
   116ca:	f7fd fa52 	bl	eb72 <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_FRAME_FILTER], CONF_INT16,
   116ce:	2300      	movs	r3, #0
   116d0:	f204 521c 	addw	r2, r4, #1308	; 0x51c
   116d4:	2103      	movs	r1, #3
   116d6:	f105 0090 	add.w	r0, r5, #144	; 0x90
   116da:	f7fd fa4a 	bl	eb72 <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_XTAL_TRIM], CONF_INT8,
   116de:	2300      	movs	r3, #0
   116e0:	f204 521e 	addw	r2, r4, #1310	; 0x51e
   116e4:	2102      	movs	r1, #2
   116e6:	f105 0098 	add.w	r0, r5, #152	; 0x98
   116ea:	f7fd fa42 	bl	eb72 <conf_value_from_str>
    txP = inst->config.tx.preambleLength;
   116ee:	f894 6521 	ldrb.w	r6, [r4, #1313]	; 0x521
    sfd_timeout = inst->config.rx.sfdTimeout;
   116f2:	f8b4 3516 	ldrh.w	r3, [r4, #1302]	; 0x516
   116f6:	f8ad 3002 	strh.w	r3, [sp, #2]
    conf_value_from_str(cfg[CFGSTR_TX_PREAM_LEN], CONF_INT16,
   116fa:	2300      	movs	r3, #0
   116fc:	aa01      	add	r2, sp, #4
   116fe:	2103      	movs	r1, #3
   11700:	f105 0050 	add.w	r0, r5, #80	; 0x50
   11704:	f7fd fa35 	bl	eb72 <conf_value_from_str>
    switch (preamble_len)
   11708:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1170c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   11710:	d058      	beq.n	117c4 <uwbcfg_commit_to_inst+0x20c>
   11712:	d843      	bhi.n	1179c <uwbcfg_commit_to_inst+0x1e4>
   11714:	2b80      	cmp	r3, #128	; 0x80
   11716:	d057      	beq.n	117c8 <uwbcfg_commit_to_inst+0x210>
   11718:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1171c:	d13a      	bne.n	11794 <uwbcfg_commit_to_inst+0x1dc>
    case (256):  txP = DWT_PLEN_256 ;break;
   1171e:	2624      	movs	r6, #36	; 0x24
    if (sfd_timeout < 1) {
   11720:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   11724:	b94b      	cbnz	r3, 1173a <uwbcfg_commit_to_inst+0x182>
        sfd_timeout = (preamble_len + 1 + sfd_len - paclen);
   11726:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1172a:	443b      	add	r3, r7
   1172c:	b29b      	uxth	r3, r3
   1172e:	f89d 2007 	ldrb.w	r2, [sp, #7]
   11732:	1a9b      	subs	r3, r3, r2
   11734:	3301      	adds	r3, #1
   11736:	f8ad 3002 	strh.w	r3, [sp, #2]
    inst->config.tx.preambleLength = txP;
   1173a:	f884 6521 	strb.w	r6, [r4, #1313]	; 0x521
    inst->config.rx.sfdTimeout = sfd_timeout;
   1173e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   11742:	f8a4 3516 	strh.w	r3, [r4, #1302]	; 0x516
    inst->attrib.nsfd = sfd_len;
   11746:	f884 7540 	strb.w	r7, [r4, #1344]	; 0x540
    inst->attrib.nsync = preamble_len;
   1174a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1174e:	f8a4 3542 	strh.w	r3, [r4, #1346]	; 0x542
    uwbcfg_commit_to_inst_dw1000(inst, cfg);
   11752:	4629      	mov	r1, r5
   11754:	4620      	mov	r0, r4
   11756:	f000 f913 	bl	11980 <uwbcfg_commit_to_inst_dw1000>
    SLIST_FOREACH(cb, &uwbcfg_callbacks, uc_list) {
   1175a:	4b24      	ldr	r3, [pc, #144]	; (117ec <uwbcfg_commit_to_inst+0x234>)
   1175c:	681c      	ldr	r4, [r3, #0]
   1175e:	e039      	b.n	117d4 <uwbcfg_commit_to_inst+0x21c>
    } else if (!strcmp(cfg[CFGSTR_DATARATE], "850k")) {
   11760:	4923      	ldr	r1, [pc, #140]	; (117f0 <uwbcfg_commit_to_inst+0x238>)
   11762:	4630      	mov	r0, r6
   11764:	f7fc f9e4 	bl	db30 <strcmp>
   11768:	b928      	cbnz	r0, 11776 <uwbcfg_commit_to_inst+0x1be>
        inst->attrib.Tdsym = DPL_FLOAT32_INIT(1.02564f);
   1176a:	f204 533c 	addw	r3, r4, #1340	; 0x53c
   1176e:	4a21      	ldr	r2, [pc, #132]	; (117f4 <uwbcfg_commit_to_inst+0x23c>)
   11770:	601a      	str	r2, [r3, #0]
        sfd_len = 8;
   11772:	2708      	movs	r7, #8
   11774:	e739      	b.n	115ea <uwbcfg_commit_to_inst+0x32>
    } else if (!strcmp(cfg[CFGSTR_DATARATE], "110k")) {
   11776:	4920      	ldr	r1, [pc, #128]	; (117f8 <uwbcfg_commit_to_inst+0x240>)
   11778:	4630      	mov	r0, r6
   1177a:	f7fc f9d9 	bl	db30 <strcmp>
   1177e:	b928      	cbnz	r0, 1178c <uwbcfg_commit_to_inst+0x1d4>
        inst->attrib.Tdsym = DPL_FLOAT32_INIT(8.20513f);
   11780:	f204 533c 	addw	r3, r4, #1340	; 0x53c
   11784:	4a1d      	ldr	r2, [pc, #116]	; (117fc <uwbcfg_commit_to_inst+0x244>)
   11786:	601a      	str	r2, [r3, #0]
        sfd_len = 64;
   11788:	2740      	movs	r7, #64	; 0x40
   1178a:	e72e      	b.n	115ea <uwbcfg_commit_to_inst+0x32>
    int sfd_len=0;
   1178c:	2700      	movs	r7, #0
   1178e:	e72c      	b.n	115ea <uwbcfg_commit_to_inst+0x32>
    inst->config.rx.phrMode = (cfg[CFGSTR_RX_PHRMODE][0] == 's')? DWT_PHRMODE_STD : DWT_PHRMODE_EXT;
   11790:	2300      	movs	r3, #0
   11792:	e748      	b.n	11626 <uwbcfg_commit_to_inst+0x6e>
    switch (preamble_len)
   11794:	2b40      	cmp	r3, #64	; 0x40
   11796:	d10e      	bne.n	117b6 <uwbcfg_commit_to_inst+0x1fe>
   11798:	2604      	movs	r6, #4
   1179a:	e7c1      	b.n	11720 <uwbcfg_commit_to_inst+0x168>
   1179c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   117a0:	d014      	beq.n	117cc <uwbcfg_commit_to_inst+0x214>
   117a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   117a6:	d101      	bne.n	117ac <uwbcfg_commit_to_inst+0x1f4>
    case (4096): txP = DWT_PLEN_4096;break;
   117a8:	260c      	movs	r6, #12
   117aa:	e7b9      	b.n	11720 <uwbcfg_commit_to_inst+0x168>
    switch (preamble_len)
   117ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   117b0:	d101      	bne.n	117b6 <uwbcfg_commit_to_inst+0x1fe>
    case (1024): txP = DWT_PLEN_1024;break;
   117b2:	2608      	movs	r6, #8
   117b4:	e7b4      	b.n	11720 <uwbcfg_commit_to_inst+0x168>
        UC_WARN("inv preamb_len\n");
   117b6:	4b12      	ldr	r3, [pc, #72]	; (11800 <uwbcfg_commit_to_inst+0x248>)
   117b8:	2202      	movs	r2, #2
   117ba:	215c      	movs	r1, #92	; 0x5c
   117bc:	4811      	ldr	r0, [pc, #68]	; (11804 <uwbcfg_commit_to_inst+0x24c>)
   117be:	f00c ff51 	bl	1e664 <log_printf>
        break;
   117c2:	e7ad      	b.n	11720 <uwbcfg_commit_to_inst+0x168>
    case (512):  txP = DWT_PLEN_512 ;break;
   117c4:	2634      	movs	r6, #52	; 0x34
   117c6:	e7ab      	b.n	11720 <uwbcfg_commit_to_inst+0x168>
    case (128):  txP = DWT_PLEN_128 ;break;
   117c8:	2614      	movs	r6, #20
   117ca:	e7a9      	b.n	11720 <uwbcfg_commit_to_inst+0x168>
    case (2048): txP = DWT_PLEN_2048;break;
   117cc:	2628      	movs	r6, #40	; 0x28
   117ce:	e7a7      	b.n	11720 <uwbcfg_commit_to_inst+0x168>
            cb->uc_update();
   117d0:	4798      	blx	r3
    SLIST_FOREACH(cb, &uwbcfg_callbacks, uc_list) {
   117d2:	6824      	ldr	r4, [r4, #0]
   117d4:	b11c      	cbz	r4, 117de <uwbcfg_commit_to_inst+0x226>
        if (cb->uc_update) {
   117d6:	6863      	ldr	r3, [r4, #4]
   117d8:	2b00      	cmp	r3, #0
   117da:	d1f9      	bne.n	117d0 <uwbcfg_commit_to_inst+0x218>
   117dc:	e7f9      	b.n	117d2 <uwbcfg_commit_to_inst+0x21a>
}
   117de:	2000      	movs	r0, #0
   117e0:	b003      	add	sp, #12
   117e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   117e4:	00023b1c 	.word	0x00023b1c
   117e8:	3e03497b 	.word	0x3e03497b
   117ec:	20004554 	.word	0x20004554
   117f0:	00023b20 	.word	0x00023b20
   117f4:	3f83482c 	.word	0x3f83482c
   117f8:	00023b28 	.word	0x00023b28
   117fc:	41034836 	.word	0x41034836
   11800:	00023b30 	.word	0x00023b30
   11804:	2000453c 	.word	0x2000453c

00011808 <uwbcfg_commit>:
{
   11808:	b510      	push	{r4, lr}
    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
   1180a:	2400      	movs	r4, #0
   1180c:	e000      	b.n	11810 <uwbcfg_commit+0x8>
   1180e:	3401      	adds	r4, #1
   11810:	2c02      	cmp	r4, #2
   11812:	dc08      	bgt.n	11826 <uwbcfg_commit+0x1e>
        udev = uwb_dev_idx_lookup(i);
   11814:	4620      	mov	r0, r4
   11816:	f7f7 f8fd 	bl	8a14 <uwb_dev_idx_lookup>
        if (!udev) {
   1181a:	2800      	cmp	r0, #0
   1181c:	d0f7      	beq.n	1180e <uwbcfg_commit+0x6>
        uwbcfg_commit_to_inst(udev, g_uwb_config);
   1181e:	4903      	ldr	r1, [pc, #12]	; (1182c <uwbcfg_commit+0x24>)
   11820:	f7ff feca 	bl	115b8 <uwbcfg_commit_to_inst>
   11824:	e7f3      	b.n	1180e <uwbcfg_commit+0x6>
}
   11826:	2000      	movs	r0, #0
   11828:	bd10      	pop	{r4, pc}
   1182a:	bf00      	nop
   1182c:	20000650 	.word	0x20000650

00011830 <uwbcfg_register>:

int
uwbcfg_register(struct uwbcfg_cbs *handler)
{
    SLIST_INSERT_HEAD(&uwbcfg_callbacks, handler, uc_list);
   11830:	4b02      	ldr	r3, [pc, #8]	; (1183c <uwbcfg_register+0xc>)
   11832:	681a      	ldr	r2, [r3, #0]
   11834:	6002      	str	r2, [r0, #0]
   11836:	6018      	str	r0, [r3, #0]
    return 0;
}
   11838:	2000      	movs	r0, #0
   1183a:	4770      	bx	lr
   1183c:	20004554 	.word	0x20004554

00011840 <uwbcfg_pkg_init>:
    return uwbcfg_commit();
}

int
uwbcfg_pkg_init(void)
{
   11840:	b510      	push	{r4, lr}
   11842:	b082      	sub	sp, #8
#ifndef __KERNEL__
    int rc;
    rc = conf_register(&uwbcfg_handler);
   11844:	480d      	ldr	r0, [pc, #52]	; (1187c <uwbcfg_pkg_init+0x3c>)
   11846:	f7fd f94f 	bl	eae8 <conf_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1184a:	b138      	cbz	r0, 1185c <uwbcfg_pkg_init+0x1c>
   1184c:	2000      	movs	r0, #0
   1184e:	9000      	str	r0, [sp, #0]
   11850:	4b0b      	ldr	r3, [pc, #44]	; (11880 <uwbcfg_pkg_init+0x40>)
   11852:	681c      	ldr	r4, [r3, #0]
   11854:	4603      	mov	r3, r0
   11856:	4602      	mov	r2, r0
   11858:	4601      	mov	r1, r0
   1185a:	47a0      	blx	r4
#endif

    /* Init log and Config */
    log_register("uwbcfg", &_uwbcfg_log, &log_console_handler,
   1185c:	2400      	movs	r4, #0
   1185e:	9400      	str	r4, [sp, #0]
   11860:	4623      	mov	r3, r4
   11862:	4a08      	ldr	r2, [pc, #32]	; (11884 <uwbcfg_pkg_init+0x44>)
   11864:	4908      	ldr	r1, [pc, #32]	; (11888 <uwbcfg_pkg_init+0x48>)
   11866:	4809      	ldr	r0, [pc, #36]	; (1188c <uwbcfg_pkg_init+0x4c>)
   11868:	f00c ff44 	bl	1e6f4 <log_register>
                 NULL, LOG_SYSLEVEL);

    SLIST_INIT(&uwbcfg_callbacks);
   1186c:	4b08      	ldr	r3, [pc, #32]	; (11890 <uwbcfg_pkg_init+0x50>)
   1186e:	601c      	str	r4, [r3, #0]
#if MYNEWT_VAL(UWBCFG_CLI)
    uwbcfg_cli_register();
#endif

#if MYNEWT_VAL(UWBCFG_APPLY_AT_INIT)
    uwbcfg_commit();
   11870:	f7ff ffca 	bl	11808 <uwbcfg_commit>
#endif
#ifdef __KERNEL__
    uwbcfg_sysfs_init();
#endif
    return 0;
}
   11874:	4620      	mov	r0, r4
   11876:	b002      	add	sp, #8
   11878:	bd10      	pop	{r4, pc}
   1187a:	bf00      	nop
   1187c:	20000740 	.word	0x20000740
   11880:	2000064c 	.word	0x2000064c
   11884:	00024c58 	.word	0x00024c58
   11888:	2000453c 	.word	0x2000453c
   1188c:	00023b40 	.word	0x00023b40
   11890:	20004554 	.word	0x20004554

00011894 <uwbcfg_pkg_down>:
{
#ifdef __KERNEL__
    uwbcfg_sysfs_deinit();
#endif
    return 0;
}
   11894:	2000      	movs	r0, #0
   11896:	4770      	bx	lr

00011898 <check_preamble_code>:
#define power_value(COARSE,FINE) ((COARSE<<5) + FINE)

#if MYNEWT_VAL(DW1000_DEVICE_0)
static void
check_preamble_code(struct uwb_dev * inst, uint8_t *arg_code)
{
   11898:	b530      	push	{r4, r5, lr}
   1189a:	b083      	sub	sp, #12
   1189c:	460c      	mov	r4, r1
    int new_code = 0;
    int ch = inst->config.channel;
   1189e:	f890 250c 	ldrb.w	r2, [r0, #1292]	; 0x50c
    int prf = inst->config.prf;
   118a2:	f890 150e 	ldrb.w	r1, [r0, #1294]	; 0x50e
    uint8_t code = *arg_code;
   118a6:	7823      	ldrb	r3, [r4, #0]
    if (prf == DWT_PRF_16M) {
   118a8:	2901      	cmp	r1, #1
   118aa:	d00a      	beq.n	118c2 <check_preamble_code+0x2a>
        if (ch == 1 && code != 1 && code != 2)              new_code = 1;
        if ((ch == 2 || ch==5) && code != 3 && code != 4)   new_code = 3;
        if (ch == 3 && code != 5 && code != 6)              new_code = 5;
        if ((ch == 4 || ch == 7) && code != 7 && code != 8) new_code = 7;
    } else {
        if (ch == 1 || ch==2 || ch==3 || ch==5) {
   118ac:	1e51      	subs	r1, r2, #1
   118ae:	2902      	cmp	r1, #2
   118b0:	d932      	bls.n	11918 <check_preamble_code+0x80>
   118b2:	2a05      	cmp	r2, #5
   118b4:	d030      	beq.n	11918 <check_preamble_code+0x80>
            if (code < 9 || code > 12)  new_code = 9;
        } else { /* channels 4 and 7 */
            if (code < 17 || code > 20) new_code = 17;
   118b6:	3b11      	subs	r3, #17
   118b8:	b2db      	uxtb	r3, r3
   118ba:	2b03      	cmp	r3, #3
   118bc:	d939      	bls.n	11932 <check_preamble_code+0x9a>
   118be:	2511      	movs	r5, #17
   118c0:	e02f      	b.n	11922 <check_preamble_code+0x8a>
        if (ch == 1 && code != 1 && code != 2)              new_code = 1;
   118c2:	2a01      	cmp	r2, #1
   118c4:	d00c      	beq.n	118e0 <check_preamble_code+0x48>
    int new_code = 0;
   118c6:	2500      	movs	r5, #0
        if ((ch == 2 || ch==5) && code != 3 && code != 4)   new_code = 3;
   118c8:	2a02      	cmp	r2, #2
   118ca:	d013      	beq.n	118f4 <check_preamble_code+0x5c>
   118cc:	2a05      	cmp	r2, #5
   118ce:	d011      	beq.n	118f4 <check_preamble_code+0x5c>
        if (ch == 3 && code != 5 && code != 6)              new_code = 5;
   118d0:	2a03      	cmp	r2, #3
   118d2:	d015      	beq.n	11900 <check_preamble_code+0x68>
        if ((ch == 4 || ch == 7) && code != 7 && code != 8) new_code = 7;
   118d4:	2a04      	cmp	r2, #4
   118d6:	d019      	beq.n	1190c <check_preamble_code+0x74>
   118d8:	2a07      	cmp	r2, #7
   118da:	d017      	beq.n	1190c <check_preamble_code+0x74>
        }
    }
    if (new_code) {
   118dc:	b34d      	cbz	r5, 11932 <check_preamble_code+0x9a>
   118de:	e020      	b.n	11922 <check_preamble_code+0x8a>
        if (ch == 1 && code != 1 && code != 2)              new_code = 1;
   118e0:	2b01      	cmp	r3, #1
   118e2:	d005      	beq.n	118f0 <check_preamble_code+0x58>
   118e4:	2b02      	cmp	r3, #2
   118e6:	d001      	beq.n	118ec <check_preamble_code+0x54>
   118e8:	4615      	mov	r5, r2
   118ea:	e7ed      	b.n	118c8 <check_preamble_code+0x30>
    int new_code = 0;
   118ec:	2500      	movs	r5, #0
   118ee:	e7eb      	b.n	118c8 <check_preamble_code+0x30>
   118f0:	2500      	movs	r5, #0
   118f2:	e7e9      	b.n	118c8 <check_preamble_code+0x30>
        if ((ch == 2 || ch==5) && code != 3 && code != 4)   new_code = 3;
   118f4:	2b03      	cmp	r3, #3
   118f6:	d0eb      	beq.n	118d0 <check_preamble_code+0x38>
   118f8:	2b04      	cmp	r3, #4
   118fa:	d0e9      	beq.n	118d0 <check_preamble_code+0x38>
   118fc:	2503      	movs	r5, #3
   118fe:	e7e7      	b.n	118d0 <check_preamble_code+0x38>
        if (ch == 3 && code != 5 && code != 6)              new_code = 5;
   11900:	2b05      	cmp	r3, #5
   11902:	d0e7      	beq.n	118d4 <check_preamble_code+0x3c>
   11904:	2b06      	cmp	r3, #6
   11906:	d0e5      	beq.n	118d4 <check_preamble_code+0x3c>
   11908:	2505      	movs	r5, #5
   1190a:	e7e3      	b.n	118d4 <check_preamble_code+0x3c>
        if ((ch == 4 || ch == 7) && code != 7 && code != 8) new_code = 7;
   1190c:	2b07      	cmp	r3, #7
   1190e:	d0e5      	beq.n	118dc <check_preamble_code+0x44>
   11910:	2b08      	cmp	r3, #8
   11912:	d0e3      	beq.n	118dc <check_preamble_code+0x44>
   11914:	2507      	movs	r5, #7
   11916:	e004      	b.n	11922 <check_preamble_code+0x8a>
            if (code < 9 || code > 12)  new_code = 9;
   11918:	3b09      	subs	r3, #9
   1191a:	b2db      	uxtb	r3, r3
   1191c:	2b03      	cmp	r3, #3
   1191e:	d908      	bls.n	11932 <check_preamble_code+0x9a>
   11920:	2509      	movs	r5, #9
        UC_WARN("inv pream code (using %d)\n", new_code);
   11922:	9500      	str	r5, [sp, #0]
   11924:	4b04      	ldr	r3, [pc, #16]	; (11938 <check_preamble_code+0xa0>)
   11926:	2202      	movs	r2, #2
   11928:	215c      	movs	r1, #92	; 0x5c
   1192a:	4804      	ldr	r0, [pc, #16]	; (1193c <check_preamble_code+0xa4>)
   1192c:	f00c fe9a 	bl	1e664 <log_printf>
        *arg_code = new_code;
   11930:	7025      	strb	r5, [r4, #0]
    }
}
   11932:	b003      	add	sp, #12
   11934:	bd30      	pop	{r4, r5, pc}
   11936:	bf00      	nop
   11938:	00023c48 	.word	0x00023c48
   1193c:	2000453c 	.word	0x2000453c

00011940 <remap_framefilter>:

uint16_t
remap_framefilter(uint16_t cfg_ff)
{
   11940:	4603      	mov	r3, r0
    uint16_t r=0;
    if (cfg_ff & UWB_FF_BEACON_EN) r|= DWT_FF_BEACON_EN;
   11942:	f010 0001 	ands.w	r0, r0, #1
   11946:	d000      	beq.n	1194a <remap_framefilter+0xa>
   11948:	2004      	movs	r0, #4
    if (cfg_ff & UWB_FF_DATA_EN)   r|= DWT_FF_DATA_EN;
   1194a:	f013 0f02 	tst.w	r3, #2
   1194e:	d001      	beq.n	11954 <remap_framefilter+0x14>
   11950:	f040 0008 	orr.w	r0, r0, #8
    if (cfg_ff & UWB_FF_ACK_EN)    r|= DWT_FF_ACK_EN;
   11954:	f013 0f04 	tst.w	r3, #4
   11958:	d001      	beq.n	1195e <remap_framefilter+0x1e>
   1195a:	f040 0010 	orr.w	r0, r0, #16
    if (cfg_ff & UWB_FF_MAC_EN)    r|= DWT_FF_MAC_EN;
   1195e:	f013 0f08 	tst.w	r3, #8
   11962:	d001      	beq.n	11968 <remap_framefilter+0x28>
   11964:	f040 0020 	orr.w	r0, r0, #32
    if (cfg_ff & UWB_FF_RSVD_EN)   r|= DWT_FF_RSVD_EN;
   11968:	f013 0f10 	tst.w	r3, #16
   1196c:	d001      	beq.n	11972 <remap_framefilter+0x32>
   1196e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    if (cfg_ff & UWB_FF_COORD_EN)  r|= DWT_FF_COORD_EN;
   11972:	f413 7f80 	tst.w	r3, #256	; 0x100
   11976:	d001      	beq.n	1197c <remap_framefilter+0x3c>
   11978:	f040 0002 	orr.w	r0, r0, #2
    return r;
}
   1197c:	4770      	bx	lr
	...

00011980 <uwbcfg_commit_to_inst_dw1000>:
{
#if MYNEWT_VAL(DW1000_DEVICE_0)
    uint8_t prf, coarse, fine, txpwr, paclen;

    /* Only proceed if this device is a dw1000 */
    if(inst->device_id != DWT_DEVICE_ID) {
   11980:	f8d0 24c8 	ldr.w	r2, [r0, #1224]	; 0x4c8
   11984:	4b84      	ldr	r3, [pc, #528]	; (11b98 <uwbcfg_commit_to_inst_dw1000+0x218>)
   11986:	429a      	cmp	r2, r3
   11988:	d001      	beq.n	1198e <uwbcfg_commit_to_inst_dw1000+0xe>
     * dw1000 understands */
    inst->config.rx.frameFilter = remap_framefilter(
        inst->config.rx.frameFilter);
#endif
    return 0;
}
   1198a:	2000      	movs	r0, #0
   1198c:	4770      	bx	lr
{
   1198e:	b570      	push	{r4, r5, r6, lr}
   11990:	b084      	sub	sp, #16
   11992:	4604      	mov	r4, r0
   11994:	460d      	mov	r5, r1
    conf_value_from_str(cfg[CFGSTR_PRF], CONF_INT8, (void*)&prf, 0);
   11996:	2300      	movs	r3, #0
   11998:	f10d 020f 	add.w	r2, sp, #15
   1199c:	2102      	movs	r1, #2
   1199e:	f105 0008 	add.w	r0, r5, #8
   119a2:	f7fd f8e6 	bl	eb72 <conf_value_from_str>
    if (prf == 16) {
   119a6:	f89d 300f 	ldrb.w	r3, [sp, #15]
   119aa:	2b10      	cmp	r3, #16
   119ac:	d005      	beq.n	119ba <uwbcfg_commit_to_inst_dw1000+0x3a>
    } else if (prf == 64) {
   119ae:	2b40      	cmp	r3, #64	; 0x40
   119b0:	d11b      	bne.n	119ea <uwbcfg_commit_to_inst_dw1000+0x6a>
        inst->config.prf = DWT_PRF_64M;
   119b2:	2302      	movs	r3, #2
   119b4:	f884 350e 	strb.w	r3, [r4, #1294]	; 0x50e
   119b8:	e002      	b.n	119c0 <uwbcfg_commit_to_inst_dw1000+0x40>
        inst->config.prf = DWT_PRF_16M;
   119ba:	2301      	movs	r3, #1
   119bc:	f884 350e 	strb.w	r3, [r4, #1294]	; 0x50e
    check_preamble_code(inst, &inst->config.rx.preambleCodeIndex);
   119c0:	f204 5111 	addw	r1, r4, #1297	; 0x511
   119c4:	4620      	mov	r0, r4
   119c6:	f7ff ff67 	bl	11898 <check_preamble_code>
    check_preamble_code(inst, &inst->config.tx.preambleCodeIndex);
   119ca:	f504 61a4 	add.w	r1, r4, #1312	; 0x520
   119ce:	4620      	mov	r0, r4
   119d0:	f7ff ff62 	bl	11898 <check_preamble_code>
    switch (inst->config.channel) {
   119d4:	f894 350c 	ldrb.w	r3, [r4, #1292]	; 0x50c
   119d8:	3b01      	subs	r3, #1
   119da:	2b06      	cmp	r3, #6
   119dc:	d842      	bhi.n	11a64 <uwbcfg_commit_to_inst_dw1000+0xe4>
   119de:	e8df f003 	tbb	[pc, r3]
   119e2:	2d0c      	.short	0x2d0c
   119e4:	413d3531 	.word	0x413d3531
   119e8:	39          	.byte	0x39
   119e9:	00          	.byte	0x00
        UC_WARN("inv prf %d\n", prf);
   119ea:	9300      	str	r3, [sp, #0]
   119ec:	4b6b      	ldr	r3, [pc, #428]	; (11b9c <uwbcfg_commit_to_inst_dw1000+0x21c>)
   119ee:	2202      	movs	r2, #2
   119f0:	215c      	movs	r1, #92	; 0x5c
   119f2:	486b      	ldr	r0, [pc, #428]	; (11ba0 <uwbcfg_commit_to_inst_dw1000+0x220>)
   119f4:	f00c fe36 	bl	1e664 <log_printf>
   119f8:	e7e2      	b.n	119c0 <uwbcfg_commit_to_inst_dw1000+0x40>
    case (1): inst->config.txrf.PGdly = TC_PGDELAY_CH1;break;
   119fa:	23c9      	movs	r3, #201	; 0xc9
   119fc:	f884 3524 	strb.w	r3, [r4, #1316]	; 0x524
    if (!strcmp(cfg[CFGSTR_DATARATE], "6m8")) {
   11a00:	f105 0610 	add.w	r6, r5, #16
   11a04:	4967      	ldr	r1, [pc, #412]	; (11ba4 <uwbcfg_commit_to_inst_dw1000+0x224>)
   11a06:	4630      	mov	r0, r6
   11a08:	f7fc f892 	bl	db30 <strcmp>
   11a0c:	bb88      	cbnz	r0, 11a72 <uwbcfg_commit_to_inst_dw1000+0xf2>
        inst->config.dataRate = DWT_BR_6M8;
   11a0e:	2302      	movs	r3, #2
   11a10:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
    conf_value_from_str(cfg[CFGSTR_RX_PACLEN], CONF_INT8, (void*)&paclen, 0);
   11a14:	2300      	movs	r3, #0
   11a16:	aa03      	add	r2, sp, #12
   11a18:	2102      	movs	r1, #2
   11a1a:	f105 0018 	add.w	r0, r5, #24
   11a1e:	f7fd f8a8 	bl	eb72 <conf_value_from_str>
    switch (paclen) {
   11a22:	f89d 300c 	ldrb.w	r3, [sp, #12]
   11a26:	2b20      	cmp	r3, #32
   11a28:	d06b      	beq.n	11b02 <uwbcfg_commit_to_inst_dw1000+0x182>
   11a2a:	d83b      	bhi.n	11aa4 <uwbcfg_commit_to_inst_dw1000+0x124>
   11a2c:	2b08      	cmp	r3, #8
   11a2e:	d03f      	beq.n	11ab0 <uwbcfg_commit_to_inst_dw1000+0x130>
   11a30:	2b10      	cmp	r3, #16
   11a32:	d16a      	bne.n	11b0a <uwbcfg_commit_to_inst_dw1000+0x18a>
    case (16): inst->config.rx.pacLength = DWT_PAC16;break;
   11a34:	2301      	movs	r3, #1
   11a36:	f884 3510 	strb.w	r3, [r4, #1296]	; 0x510
   11a3a:	e03c      	b.n	11ab6 <uwbcfg_commit_to_inst_dw1000+0x136>
    case (2): inst->config.txrf.PGdly = TC_PGDELAY_CH2;break;
   11a3c:	23c2      	movs	r3, #194	; 0xc2
   11a3e:	f884 3524 	strb.w	r3, [r4, #1316]	; 0x524
   11a42:	e7dd      	b.n	11a00 <uwbcfg_commit_to_inst_dw1000+0x80>
    case (3): inst->config.txrf.PGdly = TC_PGDELAY_CH3;break;
   11a44:	23c5      	movs	r3, #197	; 0xc5
   11a46:	f884 3524 	strb.w	r3, [r4, #1316]	; 0x524
   11a4a:	e7d9      	b.n	11a00 <uwbcfg_commit_to_inst_dw1000+0x80>
    case (4): inst->config.txrf.PGdly = TC_PGDELAY_CH4;break;
   11a4c:	2395      	movs	r3, #149	; 0x95
   11a4e:	f884 3524 	strb.w	r3, [r4, #1316]	; 0x524
   11a52:	e7d5      	b.n	11a00 <uwbcfg_commit_to_inst_dw1000+0x80>
    case (7): inst->config.txrf.PGdly = TC_PGDELAY_CH7;break;
   11a54:	2393      	movs	r3, #147	; 0x93
   11a56:	f884 3524 	strb.w	r3, [r4, #1316]	; 0x524
   11a5a:	e7d1      	b.n	11a00 <uwbcfg_commit_to_inst_dw1000+0x80>
    case (5): inst->config.txrf.PGdly = TC_PGDELAY_CH5;break;
   11a5c:	23c0      	movs	r3, #192	; 0xc0
   11a5e:	f884 3524 	strb.w	r3, [r4, #1316]	; 0x524
   11a62:	e7cd      	b.n	11a00 <uwbcfg_commit_to_inst_dw1000+0x80>
        UC_WARN("inv ch\n");
   11a64:	4b50      	ldr	r3, [pc, #320]	; (11ba8 <uwbcfg_commit_to_inst_dw1000+0x228>)
   11a66:	2202      	movs	r2, #2
   11a68:	215c      	movs	r1, #92	; 0x5c
   11a6a:	484d      	ldr	r0, [pc, #308]	; (11ba0 <uwbcfg_commit_to_inst_dw1000+0x220>)
   11a6c:	f00c fdfa 	bl	1e664 <log_printf>
        break;
   11a70:	e7c6      	b.n	11a00 <uwbcfg_commit_to_inst_dw1000+0x80>
    } else if (!strcmp(cfg[CFGSTR_DATARATE], "850k")) {
   11a72:	494e      	ldr	r1, [pc, #312]	; (11bac <uwbcfg_commit_to_inst_dw1000+0x22c>)
   11a74:	4630      	mov	r0, r6
   11a76:	f7fc f85b 	bl	db30 <strcmp>
   11a7a:	b918      	cbnz	r0, 11a84 <uwbcfg_commit_to_inst_dw1000+0x104>
        inst->config.dataRate = DWT_BR_850K;
   11a7c:	2301      	movs	r3, #1
   11a7e:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
   11a82:	e7c7      	b.n	11a14 <uwbcfg_commit_to_inst_dw1000+0x94>
    } else if (!strcmp(cfg[CFGSTR_DATARATE], "110k")) {
   11a84:	494a      	ldr	r1, [pc, #296]	; (11bb0 <uwbcfg_commit_to_inst_dw1000+0x230>)
   11a86:	4630      	mov	r0, r6
   11a88:	f7fc f852 	bl	db30 <strcmp>
   11a8c:	b918      	cbnz	r0, 11a96 <uwbcfg_commit_to_inst_dw1000+0x116>
        inst->config.dataRate = DWT_BR_110K;
   11a8e:	2300      	movs	r3, #0
   11a90:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
   11a94:	e7be      	b.n	11a14 <uwbcfg_commit_to_inst_dw1000+0x94>
        UC_WARN("inv datarate\n");
   11a96:	4b47      	ldr	r3, [pc, #284]	; (11bb4 <uwbcfg_commit_to_inst_dw1000+0x234>)
   11a98:	2202      	movs	r2, #2
   11a9a:	215c      	movs	r1, #92	; 0x5c
   11a9c:	4840      	ldr	r0, [pc, #256]	; (11ba0 <uwbcfg_commit_to_inst_dw1000+0x220>)
   11a9e:	f00c fde1 	bl	1e664 <log_printf>
   11aa2:	e7b7      	b.n	11a14 <uwbcfg_commit_to_inst_dw1000+0x94>
    switch (paclen) {
   11aa4:	2b40      	cmp	r3, #64	; 0x40
   11aa6:	d130      	bne.n	11b0a <uwbcfg_commit_to_inst_dw1000+0x18a>
    case (64): inst->config.rx.pacLength = DWT_PAC64;break;
   11aa8:	2303      	movs	r3, #3
   11aaa:	f884 3510 	strb.w	r3, [r4, #1296]	; 0x510
   11aae:	e002      	b.n	11ab6 <uwbcfg_commit_to_inst_dw1000+0x136>
    case (8):  inst->config.rx.pacLength = DWT_PAC8;break;
   11ab0:	2300      	movs	r3, #0
   11ab2:	f884 3510 	strb.w	r3, [r4, #1296]	; 0x510
    if (inst->config.rx.sfdType>1) {
   11ab6:	f894 3512 	ldrb.w	r3, [r4, #1298]	; 0x512
   11aba:	2b01      	cmp	r3, #1
   11abc:	d82c      	bhi.n	11b18 <uwbcfg_commit_to_inst_dw1000+0x198>
    conf_value_from_str(cfg[CFGSTR_TXRF_PWR_COARSE], CONF_INT8, (void*)&coarse, 0);
   11abe:	2300      	movs	r3, #0
   11ac0:	f10d 020e 	add.w	r2, sp, #14
   11ac4:	2102      	movs	r1, #2
   11ac6:	f105 0058 	add.w	r0, r5, #88	; 0x58
   11aca:	f7fd f852 	bl	eb72 <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_TXRF_PWR_FINE], CONF_INT8, (void*)&fine, 0);
   11ace:	2300      	movs	r3, #0
   11ad0:	f10d 020d 	add.w	r2, sp, #13
   11ad4:	2102      	movs	r1, #2
   11ad6:	f105 0060 	add.w	r0, r5, #96	; 0x60
   11ada:	f7fd f84a 	bl	eb72 <conf_value_from_str>
    txpwr = inst->config.txrf.BOOSTNORM;
   11ade:	f894 5528 	ldrb.w	r5, [r4, #1320]	; 0x528
    switch (coarse) {
   11ae2:	f89d 300e 	ldrb.w	r3, [sp, #14]
   11ae6:	2b12      	cmp	r3, #18
   11ae8:	d84e      	bhi.n	11b88 <uwbcfg_commit_to_inst_dw1000+0x208>
   11aea:	e8df f003 	tbb	[pc, r3]
   11aee:	4d48      	.short	0x4d48
   11af0:	4d4d434d 	.word	0x4d4d434d
   11af4:	394d4d3e 	.word	0x394d4d3e
   11af8:	4d344d4d 	.word	0x4d344d4d
   11afc:	4d4d2f4d 	.word	0x4d4d2f4d
   11b00:	1c          	.byte	0x1c
   11b01:	00          	.byte	0x00
    case (32): inst->config.rx.pacLength = DWT_PAC32;break;
   11b02:	2302      	movs	r3, #2
   11b04:	f884 3510 	strb.w	r3, [r4, #1296]	; 0x510
   11b08:	e7d5      	b.n	11ab6 <uwbcfg_commit_to_inst_dw1000+0x136>
        UC_WARN("inv paclen\n");
   11b0a:	4b2b      	ldr	r3, [pc, #172]	; (11bb8 <uwbcfg_commit_to_inst_dw1000+0x238>)
   11b0c:	2202      	movs	r2, #2
   11b0e:	215c      	movs	r1, #92	; 0x5c
   11b10:	4823      	ldr	r0, [pc, #140]	; (11ba0 <uwbcfg_commit_to_inst_dw1000+0x220>)
   11b12:	f00c fda7 	bl	1e664 <log_printf>
   11b16:	e7ce      	b.n	11ab6 <uwbcfg_commit_to_inst_dw1000+0x136>
        UC_WARN("inv sfdType\n");
   11b18:	4b28      	ldr	r3, [pc, #160]	; (11bbc <uwbcfg_commit_to_inst_dw1000+0x23c>)
   11b1a:	2202      	movs	r2, #2
   11b1c:	215c      	movs	r1, #92	; 0x5c
   11b1e:	4820      	ldr	r0, [pc, #128]	; (11ba0 <uwbcfg_commit_to_inst_dw1000+0x220>)
   11b20:	f00c fda0 	bl	1e664 <log_printf>
   11b24:	e7cb      	b.n	11abe <uwbcfg_commit_to_inst_dw1000+0x13e>
    case(18): txpwr = power_value(DW1000_txrf_config_18db, fine);break;
   11b26:	f89d 500d 	ldrb.w	r5, [sp, #13]
    inst->config.txrf.BOOSTNORM = txpwr;
   11b2a:	f884 5528 	strb.w	r5, [r4, #1320]	; 0x528
    inst->config.txrf.BOOSTP500 = txpwr;
   11b2e:	f884 5529 	strb.w	r5, [r4, #1321]	; 0x529
    inst->config.txrf.BOOSTP250 = txpwr;
   11b32:	f884 552a 	strb.w	r5, [r4, #1322]	; 0x52a
    inst->config.txrf.BOOSTP125 = txpwr;
   11b36:	f884 552b 	strb.w	r5, [r4, #1323]	; 0x52b
    inst->config.rx.frameFilter = remap_framefilter(
   11b3a:	f8b4 051c 	ldrh.w	r0, [r4, #1308]	; 0x51c
   11b3e:	f7ff feff 	bl	11940 <remap_framefilter>
   11b42:	f8a4 051c 	strh.w	r0, [r4, #1308]	; 0x51c
}
   11b46:	2000      	movs	r0, #0
   11b48:	b004      	add	sp, #16
   11b4a:	bd70      	pop	{r4, r5, r6, pc}
    case(15): txpwr = power_value(DW1000_txrf_config_15db, fine);break;
   11b4c:	f89d 500d 	ldrb.w	r5, [sp, #13]
   11b50:	3520      	adds	r5, #32
   11b52:	b2ed      	uxtb	r5, r5
   11b54:	e7e9      	b.n	11b2a <uwbcfg_commit_to_inst_dw1000+0x1aa>
    case(12): txpwr = power_value(DW1000_txrf_config_12db, fine);break;
   11b56:	f89d 500d 	ldrb.w	r5, [sp, #13]
   11b5a:	3540      	adds	r5, #64	; 0x40
   11b5c:	b2ed      	uxtb	r5, r5
   11b5e:	e7e4      	b.n	11b2a <uwbcfg_commit_to_inst_dw1000+0x1aa>
    case(9):  txpwr = power_value(DW1000_txrf_config_9db, fine);break;
   11b60:	f89d 500d 	ldrb.w	r5, [sp, #13]
   11b64:	3560      	adds	r5, #96	; 0x60
   11b66:	b2ed      	uxtb	r5, r5
   11b68:	e7df      	b.n	11b2a <uwbcfg_commit_to_inst_dw1000+0x1aa>
    case(6):  txpwr = power_value(DW1000_txrf_config_6db, fine);break;
   11b6a:	f89d 500d 	ldrb.w	r5, [sp, #13]
   11b6e:	f085 0580 	eor.w	r5, r5, #128	; 0x80
   11b72:	e7da      	b.n	11b2a <uwbcfg_commit_to_inst_dw1000+0x1aa>
        txpwr = power_value(DW1000_txrf_config_3db, fine);
   11b74:	f89d 500d 	ldrb.w	r5, [sp, #13]
   11b78:	3d60      	subs	r5, #96	; 0x60
   11b7a:	b2ed      	uxtb	r5, r5
        break;
   11b7c:	e7d5      	b.n	11b2a <uwbcfg_commit_to_inst_dw1000+0x1aa>
        txpwr = power_value(DW1000_txrf_config_0db, fine);
   11b7e:	f89d 500d 	ldrb.w	r5, [sp, #13]
   11b82:	3d40      	subs	r5, #64	; 0x40
   11b84:	b2ed      	uxtb	r5, r5
        break;
   11b86:	e7d0      	b.n	11b2a <uwbcfg_commit_to_inst_dw1000+0x1aa>
        UC_WARN("inv coarse txpwr\n");
   11b88:	4b0d      	ldr	r3, [pc, #52]	; (11bc0 <uwbcfg_commit_to_inst_dw1000+0x240>)
   11b8a:	2202      	movs	r2, #2
   11b8c:	215c      	movs	r1, #92	; 0x5c
   11b8e:	4804      	ldr	r0, [pc, #16]	; (11ba0 <uwbcfg_commit_to_inst_dw1000+0x220>)
   11b90:	f00c fd68 	bl	1e664 <log_printf>
   11b94:	e7c9      	b.n	11b2a <uwbcfg_commit_to_inst_dw1000+0x1aa>
   11b96:	bf00      	nop
   11b98:	deca0130 	.word	0xdeca0130
   11b9c:	00023c64 	.word	0x00023c64
   11ba0:	2000453c 	.word	0x2000453c
   11ba4:	00023b1c 	.word	0x00023b1c
   11ba8:	00023c70 	.word	0x00023c70
   11bac:	00023b20 	.word	0x00023b20
   11bb0:	00023b28 	.word	0x00023b28
   11bb4:	00023c78 	.word	0x00023c78
   11bb8:	00023c88 	.word	0x00023c88
   11bbc:	00023c94 	.word	0x00023c94
   11bc0:	00023ca4 	.word	0x00023ca4

00011bc4 <strtod_soft>:
#include <inttypes.h>

#ifndef __KERNEL__

double strtod_soft( const char *nptr, char **endptr )
{
   11bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11bc8:	ed2d 8b02 	vpush	{d8}
   11bcc:	b085      	sub	sp, #20
   11bce:	4604      	mov	r4, r0
   11bd0:	460f      	mov	r7, r1
    int i, n;
    char *period_at;
    char *dash_at;
    char *exponent_at;
    char *ep = 0;
   11bd2:	2300      	movs	r3, #0
   11bd4:	9303      	str	r3, [sp, #12]
    int64_t ival, frac, div, exp;
    double f, f_frac;

    period_at = strchr(nptr, '.');
   11bd6:	212e      	movs	r1, #46	; 0x2e
   11bd8:	f00a fc75 	bl	1c4c6 <strchr>
   11bdc:	4606      	mov	r6, r0
    dash_at = strchr(nptr, '-');
   11bde:	212d      	movs	r1, #45	; 0x2d
   11be0:	4620      	mov	r0, r4
   11be2:	f00a fc70 	bl	1c4c6 <strchr>
   11be6:	9001      	str	r0, [sp, #4]
    exponent_at = strchr(nptr, 'e');
   11be8:	2165      	movs	r1, #101	; 0x65
   11bea:	4620      	mov	r0, r4
   11bec:	f00a fc6b 	bl	1c4c6 <strchr>
   11bf0:	4682      	mov	sl, r0
    ival = strtoll(nptr, &ep, 10);
   11bf2:	220a      	movs	r2, #10
   11bf4:	a903      	add	r1, sp, #12
   11bf6:	4620      	mov	r0, r4
   11bf8:	f00a fcaf 	bl	1c55a <strtoll>
   11bfc:	468b      	mov	fp, r1
    f = (double)(ival);
   11bfe:	f00f fba9 	bl	21354 <__aeabi_l2d>
   11c02:	ec41 0b18 	vmov	d8, r0, r1

    if (period_at == 0 || *(period_at+1) == 0) {
   11c06:	b10e      	cbz	r6, 11c0c <strtod_soft+0x48>
   11c08:	7873      	ldrb	r3, [r6, #1]
   11c0a:	b95b      	cbnz	r3, 11c24 <strtod_soft+0x60>
        /* No period, or period at the very end, treat as integer */
        if (endptr) *endptr = ep;
   11c0c:	b10f      	cbz	r7, 11c12 <strtod_soft+0x4e>
   11c0e:	9b03      	ldr	r3, [sp, #12]
   11c10:	603b      	str	r3, [r7, #0]
        exp = 1;
        for (i = 0; i < n; i++) exp *= 10;
        f *= (double)exp;
    }
    return f;
}
   11c12:	eeb0 0a48 	vmov.f32	s0, s16
   11c16:	eef0 0a68 	vmov.f32	s1, s17
   11c1a:	b005      	add	sp, #20
   11c1c:	ecbd 8b02 	vpop	{d8}
   11c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    frac = strtoll(period_at+1, &ep, 10);
   11c24:	1c74      	adds	r4, r6, #1
   11c26:	220a      	movs	r2, #10
   11c28:	a903      	add	r1, sp, #12
   11c2a:	4620      	mov	r0, r4
   11c2c:	f00a fc95 	bl	1c55a <strtoll>
   11c30:	4680      	mov	r8, r0
   11c32:	4689      	mov	r9, r1
    if (endptr == 0) n = strlen(period_at + 1);
   11c34:	b137      	cbz	r7, 11c44 <strtod_soft+0x80>
    else n = *endptr - period_at + 1;
   11c36:	6838      	ldr	r0, [r7, #0]
   11c38:	1b80      	subs	r0, r0, r6
   11c3a:	3001      	adds	r0, #1
    div = 1;
   11c3c:	2401      	movs	r4, #1
   11c3e:	2500      	movs	r5, #0
    for (i = 0; i < n; i++) div *= 10;
   11c40:	4629      	mov	r1, r5
   11c42:	e00d      	b.n	11c60 <strtod_soft+0x9c>
    if (endptr == 0) n = strlen(period_at + 1);
   11c44:	4620      	mov	r0, r4
   11c46:	f7fb ff7f 	bl	db48 <strlen>
   11c4a:	e7f7      	b.n	11c3c <strtod_soft+0x78>
    for (i = 0; i < n; i++) div *= 10;
   11c4c:	00aa      	lsls	r2, r5, #2
   11c4e:	ea42 7294 	orr.w	r2, r2, r4, lsr #30
   11c52:	00a3      	lsls	r3, r4, #2
   11c54:	191c      	adds	r4, r3, r4
   11c56:	eb45 0502 	adc.w	r5, r5, r2
   11c5a:	1924      	adds	r4, r4, r4
   11c5c:	416d      	adcs	r5, r5
   11c5e:	3101      	adds	r1, #1
   11c60:	4281      	cmp	r1, r0
   11c62:	dbf3      	blt.n	11c4c <strtod_soft+0x88>
    f_frac = (double)frac / (double)div;
   11c64:	4640      	mov	r0, r8
   11c66:	4649      	mov	r1, r9
   11c68:	f00f fb74 	bl	21354 <__aeabi_l2d>
   11c6c:	4680      	mov	r8, r0
   11c6e:	4689      	mov	r9, r1
   11c70:	4620      	mov	r0, r4
   11c72:	4629      	mov	r1, r5
   11c74:	f00f fb6e 	bl	21354 <__aeabi_l2d>
   11c78:	4602      	mov	r2, r0
   11c7a:	460b      	mov	r3, r1
   11c7c:	4640      	mov	r0, r8
   11c7e:	4649      	mov	r1, r9
   11c80:	f00f fcc0 	bl	21604 <__aeabi_ddiv>
   11c84:	4602      	mov	r2, r0
   11c86:	460b      	mov	r3, r1
    if (ival < 0 || (dash_at != 0 && dash_at < period_at)) {
   11c88:	f1bb 0f00 	cmp.w	fp, #0
   11c8c:	db03      	blt.n	11c96 <strtod_soft+0xd2>
   11c8e:	9901      	ldr	r1, [sp, #4]
   11c90:	b311      	cbz	r1, 11cd8 <strtod_soft+0x114>
   11c92:	428e      	cmp	r6, r1
   11c94:	d920      	bls.n	11cd8 <strtod_soft+0x114>
        f -= f_frac;
   11c96:	ec51 0b18 	vmov	r0, r1, d8
   11c9a:	f00f f9d1 	bl	21040 <__aeabi_dsub>
   11c9e:	ec41 0b18 	vmov	d8, r0, r1
    if (endptr) *endptr = ep;
   11ca2:	b10f      	cbz	r7, 11ca8 <strtod_soft+0xe4>
   11ca4:	9b03      	ldr	r3, [sp, #12]
   11ca6:	603b      	str	r3, [r7, #0]
    if (exponent_at == 0 || *(exponent_at+1) == 0|| ep == 0 || exponent_at != ep) {
   11ca8:	f1ba 0f00 	cmp.w	sl, #0
   11cac:	d0b1      	beq.n	11c12 <strtod_soft+0x4e>
   11cae:	f89a 3001 	ldrb.w	r3, [sl, #1]
   11cb2:	2b00      	cmp	r3, #0
   11cb4:	d0ad      	beq.n	11c12 <strtod_soft+0x4e>
   11cb6:	9b03      	ldr	r3, [sp, #12]
   11cb8:	2b00      	cmp	r3, #0
   11cba:	d0aa      	beq.n	11c12 <strtod_soft+0x4e>
   11cbc:	4553      	cmp	r3, sl
   11cbe:	d1a8      	bne.n	11c12 <strtod_soft+0x4e>
    n = strtoll(exponent_at+1, &ep, 10);
   11cc0:	220a      	movs	r2, #10
   11cc2:	a903      	add	r1, sp, #12
   11cc4:	f10a 0001 	add.w	r0, sl, #1
   11cc8:	f00a fc47 	bl	1c55a <strtoll>
    if (n < 0) {
   11ccc:	1e05      	subs	r5, r0, #0
   11cce:	db12      	blt.n	11cf6 <strtod_soft+0x132>
        exp = 1;
   11cd0:	2001      	movs	r0, #1
   11cd2:	2100      	movs	r1, #0
        for (i = 0; i < n; i++) exp *= 10;
   11cd4:	460c      	mov	r4, r1
   11cd6:	e028      	b.n	11d2a <strtod_soft+0x166>
        f += f_frac;
   11cd8:	ec51 0b18 	vmov	r0, r1, d8
   11cdc:	f00f f9b2 	bl	21044 <__adddf3>
   11ce0:	ec41 0b18 	vmov	d8, r0, r1
   11ce4:	e7dd      	b.n	11ca2 <strtod_soft+0xde>
        for (i = 0; i < n; i++) div *= 10;
   11ce6:	220a      	movs	r2, #10
   11ce8:	fb02 f401 	mul.w	r4, r2, r1
   11cec:	fba0 0102 	umull	r0, r1, r0, r2
   11cf0:	4421      	add	r1, r4
   11cf2:	3301      	adds	r3, #1
   11cf4:	e002      	b.n	11cfc <strtod_soft+0x138>
        div = 1;
   11cf6:	2001      	movs	r0, #1
   11cf8:	2100      	movs	r1, #0
        for (i = 0; i < n; i++) div *= 10;
   11cfa:	460b      	mov	r3, r1
   11cfc:	42ab      	cmp	r3, r5
   11cfe:	dbf2      	blt.n	11ce6 <strtod_soft+0x122>
        f /= (double)div;
   11d00:	f00f fb28 	bl	21354 <__aeabi_l2d>
   11d04:	4602      	mov	r2, r0
   11d06:	460b      	mov	r3, r1
   11d08:	ec51 0b18 	vmov	r0, r1, d8
   11d0c:	f00f fc7a 	bl	21604 <__aeabi_ddiv>
   11d10:	ec41 0b18 	vmov	d8, r0, r1
   11d14:	e77d      	b.n	11c12 <strtod_soft+0x4e>
        for (i = 0; i < n; i++) exp *= 10;
   11d16:	008b      	lsls	r3, r1, #2
   11d18:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
   11d1c:	0082      	lsls	r2, r0, #2
   11d1e:	1810      	adds	r0, r2, r0
   11d20:	eb41 0103 	adc.w	r1, r1, r3
   11d24:	1800      	adds	r0, r0, r0
   11d26:	4149      	adcs	r1, r1
   11d28:	3401      	adds	r4, #1
   11d2a:	42ac      	cmp	r4, r5
   11d2c:	dbf3      	blt.n	11d16 <strtod_soft+0x152>
        f *= (double)exp;
   11d2e:	f00f fb11 	bl	21354 <__aeabi_l2d>
   11d32:	4602      	mov	r2, r0
   11d34:	460b      	mov	r3, r1
   11d36:	ec51 0b18 	vmov	r0, r1, d8
   11d3a:	f00f fb39 	bl	213b0 <__aeabi_dmul>
   11d3e:	ec41 0b18 	vmov	d8, r0, r1
   11d42:	e766      	b.n	11c12 <strtod_soft+0x4e>

00011d44 <leapyear>:
 *     ((year % 400) == 0) )
 * It is otherwise equivalent.
 */
static int
leapyear(int year)
{
   11d44:	4603      	mov	r3, r0
    int rv = 0;

    if ((year & 3) == 0) {
   11d46:	f010 0f03 	tst.w	r0, #3
   11d4a:	d115      	bne.n	11d78 <leapyear+0x34>
        rv = 1;
        if ((year % 100) == 0) {
   11d4c:	4a0d      	ldr	r2, [pc, #52]	; (11d84 <leapyear+0x40>)
   11d4e:	fb82 1200 	smull	r1, r2, r2, r0
   11d52:	17c0      	asrs	r0, r0, #31
   11d54:	ebc0 1062 	rsb	r0, r0, r2, asr #5
   11d58:	2264      	movs	r2, #100	; 0x64
   11d5a:	fb02 3010 	mls	r0, r2, r0, r3
   11d5e:	b968      	cbnz	r0, 11d7c <leapyear+0x38>
            rv = 0;
            if ((year % 400) == 0)
   11d60:	4908      	ldr	r1, [pc, #32]	; (11d84 <leapyear+0x40>)
   11d62:	fb81 2103 	smull	r2, r1, r1, r3
   11d66:	17da      	asrs	r2, r3, #31
   11d68:	ebc2 12e1 	rsb	r2, r2, r1, asr #7
   11d6c:	f44f 71c8 	mov.w	r1, #400	; 0x190
   11d70:	fb01 3212 	mls	r2, r1, r2, r3
   11d74:	b122      	cbz	r2, 11d80 <leapyear+0x3c>
   11d76:	4770      	bx	lr
    int rv = 0;
   11d78:	2000      	movs	r0, #0
   11d7a:	4770      	bx	lr
        rv = 1;
   11d7c:	2001      	movs	r0, #1
   11d7e:	4770      	bx	lr
                rv = 1;
   11d80:	2001      	movs	r0, #1
        }
    }
    return (rv);
}
   11d82:	4770      	bx	lr
   11d84:	51eb851f 	.word	0x51eb851f

00011d88 <parse_number>:
    return (0);
}

static const char *
parse_number(const char *str, int digits, int *val)
{
   11d88:	4684      	mov	ip, r0
    const char *cp;
    const char *end;

    *val = 0;
   11d8a:	2300      	movs	r3, #0
   11d8c:	6013      	str	r3, [r2, #0]
    cp = str;
    end = str + digits;
   11d8e:	4408      	add	r0, r1
    while (cp < end) {
   11d90:	4584      	cmp	ip, r0
   11d92:	d21a      	bcs.n	11dca <parse_number+0x42>
        if (!isdigit((int) *cp)) {
   11d94:	f89c 3000 	ldrb.w	r3, [ip]
   11d98:	3b30      	subs	r3, #48	; 0x30
   11d9a:	2b09      	cmp	r3, #9
   11d9c:	d816      	bhi.n	11dcc <parse_number+0x44>
{
   11d9e:	b500      	push	{lr}
            return (NULL);
        }
        *val *= 10;
   11da0:	6813      	ldr	r3, [r2, #0]
   11da2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   11da6:	005b      	lsls	r3, r3, #1
   11da8:	6013      	str	r3, [r2, #0]
        *val += (*cp - '0');
   11daa:	f81c eb01 	ldrb.w	lr, [ip], #1
   11dae:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   11db2:	4473      	add	r3, lr
   11db4:	6013      	str	r3, [r2, #0]
    while (cp < end) {
   11db6:	4584      	cmp	ip, r0
   11db8:	d205      	bcs.n	11dc6 <parse_number+0x3e>
        if (!isdigit((int) *cp)) {
   11dba:	f89c 3000 	ldrb.w	r3, [ip]
   11dbe:	3b30      	subs	r3, #48	; 0x30
   11dc0:	2b09      	cmp	r3, #9
   11dc2:	d9ed      	bls.n	11da0 <parse_number+0x18>
            return (NULL);
   11dc4:	2000      	movs	r0, #0
        cp++;
    }
    return (end);
}
   11dc6:	f85d fb04 	ldr.w	pc, [sp], #4
   11dca:	4770      	bx	lr
            return (NULL);
   11dcc:	2000      	movs	r0, #0
}
   11dce:	4770      	bx	lr

00011dd0 <clocktime_to_timeval>:
{
   11dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11dd4:	b085      	sub	sp, #20
   11dd6:	9101      	str	r1, [sp, #4]
   11dd8:	9200      	str	r2, [sp, #0]
    year = ct->year;
   11dda:	6806      	ldr	r6, [r0, #0]
    if (year < POSIX_BASE_YEAR ||
   11ddc:	f240 73b1 	movw	r3, #1969	; 0x7b1
   11de0:	429e      	cmp	r6, r3
   11de2:	f340 80bc 	ble.w	11f5e <clocktime_to_timeval+0x18e>
   11de6:	4604      	mov	r4, r0
        ct->mon < 1 || ct->mon > 12 ||
   11de8:	6845      	ldr	r5, [r0, #4]
    if (year < POSIX_BASE_YEAR ||
   11dea:	2d00      	cmp	r5, #0
   11dec:	f340 80bb 	ble.w	11f66 <clocktime_to_timeval+0x196>
        ct->mon < 1 || ct->mon > 12 ||
   11df0:	2d0c      	cmp	r5, #12
   11df2:	f300 80ba 	bgt.w	11f6a <clocktime_to_timeval+0x19a>
        ct->day < 1 || ct->day > days_in_month(year, ct->mon) ||
   11df6:	f8d0 8008 	ldr.w	r8, [r0, #8]
        ct->mon < 1 || ct->mon > 12 ||
   11dfa:	f1b8 0f00 	cmp.w	r8, #0
   11dfe:	f340 80b6 	ble.w	11f6e <clocktime_to_timeval+0x19e>
        ct->day < 1 || ct->day > days_in_month(year, ct->mon) ||
   11e02:	1e6b      	subs	r3, r5, #1
   11e04:	4a65      	ldr	r2, [pc, #404]	; (11f9c <clocktime_to_timeval+0x1cc>)
   11e06:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
   11e0a:	2d02      	cmp	r5, #2
   11e0c:	d02b      	beq.n	11e66 <clocktime_to_timeval+0x96>
   11e0e:	2000      	movs	r0, #0
   11e10:	4407      	add	r7, r0
   11e12:	45b8      	cmp	r8, r7
   11e14:	f300 80ad 	bgt.w	11f72 <clocktime_to_timeval+0x1a2>
        ct->hour < 0 || ct->hour > 23 ||
   11e18:	f8d4 b00c 	ldr.w	fp, [r4, #12]
        ct->day < 1 || ct->day > days_in_month(year, ct->mon) ||
   11e1c:	f1bb 0f00 	cmp.w	fp, #0
   11e20:	f2c0 80a9 	blt.w	11f76 <clocktime_to_timeval+0x1a6>
        ct->hour < 0 || ct->hour > 23 ||
   11e24:	f1bb 0f17 	cmp.w	fp, #23
   11e28:	f300 80a7 	bgt.w	11f7a <clocktime_to_timeval+0x1aa>
        ct->min < 0 || ct->min > 59 ||
   11e2c:	6923      	ldr	r3, [r4, #16]
   11e2e:	9302      	str	r3, [sp, #8]
        ct->hour < 0 || ct->hour > 23 ||
   11e30:	2b00      	cmp	r3, #0
   11e32:	f2c0 80a4 	blt.w	11f7e <clocktime_to_timeval+0x1ae>
        ct->min < 0 || ct->min > 59 ||
   11e36:	2b3b      	cmp	r3, #59	; 0x3b
   11e38:	f300 80a3 	bgt.w	11f82 <clocktime_to_timeval+0x1b2>
        ct->sec < 0 || ct->sec > 59 ||
   11e3c:	6963      	ldr	r3, [r4, #20]
   11e3e:	9303      	str	r3, [sp, #12]
        ct->min < 0 || ct->min > 59 ||
   11e40:	2b00      	cmp	r3, #0
   11e42:	f2c0 80a0 	blt.w	11f86 <clocktime_to_timeval+0x1b6>
        ct->sec < 0 || ct->sec > 59 ||
   11e46:	2b3b      	cmp	r3, #59	; 0x3b
   11e48:	f300 809f 	bgt.w	11f8a <clocktime_to_timeval+0x1ba>
        ct->usec < 0 || ct->usec > 999999) {
   11e4c:	69e3      	ldr	r3, [r4, #28]
        ct->sec < 0 || ct->sec > 59 ||
   11e4e:	2b00      	cmp	r3, #0
   11e50:	f2c0 809d 	blt.w	11f8e <clocktime_to_timeval+0x1be>
        ct->usec < 0 || ct->usec > 999999) {
   11e54:	4a52      	ldr	r2, [pc, #328]	; (11fa0 <clocktime_to_timeval+0x1d0>)
   11e56:	4293      	cmp	r3, r2
   11e58:	f300 809b 	bgt.w	11f92 <clocktime_to_timeval+0x1c2>
    days = 0;
   11e5c:	f04f 0900 	mov.w	r9, #0
    for (i = POSIX_BASE_YEAR; i < year; i++)
   11e60:	f240 77b2 	movw	r7, #1970	; 0x7b2
   11e64:	e007      	b.n	11e76 <clocktime_to_timeval+0xa6>
        ct->day < 1 || ct->day > days_in_month(year, ct->mon) ||
   11e66:	4630      	mov	r0, r6
   11e68:	f7ff ff6c 	bl	11d44 <leapyear>
   11e6c:	e7d0      	b.n	11e10 <clocktime_to_timeval+0x40>
        days += days_in_year(i);
   11e6e:	f240 136d 	movw	r3, #365	; 0x16d
   11e72:	4499      	add	r9, r3
    for (i = POSIX_BASE_YEAR; i < year; i++)
   11e74:	3701      	adds	r7, #1
   11e76:	42b7      	cmp	r7, r6
   11e78:	da07      	bge.n	11e8a <clocktime_to_timeval+0xba>
        days += days_in_year(i);
   11e7a:	4638      	mov	r0, r7
   11e7c:	f7ff ff62 	bl	11d44 <leapyear>
   11e80:	2800      	cmp	r0, #0
   11e82:	d0f4      	beq.n	11e6e <clocktime_to_timeval+0x9e>
   11e84:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   11e88:	e7f3      	b.n	11e72 <clocktime_to_timeval+0xa2>
    for (i = 1; i < ct->mon; i++)
   11e8a:	2701      	movs	r7, #1
   11e8c:	46aa      	mov	sl, r5
   11e8e:	e005      	b.n	11e9c <clocktime_to_timeval+0xcc>
          days += days_in_month(year, i);
   11e90:	4630      	mov	r0, r6
   11e92:	f7ff ff57 	bl	11d44 <leapyear>
   11e96:	4405      	add	r5, r0
   11e98:	44a9      	add	r9, r5
    for (i = 1; i < ct->mon; i++)
   11e9a:	3701      	adds	r7, #1
   11e9c:	45ba      	cmp	sl, r7
   11e9e:	dd07      	ble.n	11eb0 <clocktime_to_timeval+0xe0>
          days += days_in_month(year, i);
   11ea0:	1e7b      	subs	r3, r7, #1
   11ea2:	4a3e      	ldr	r2, [pc, #248]	; (11f9c <clocktime_to_timeval+0x1cc>)
   11ea4:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   11ea8:	2f02      	cmp	r7, #2
   11eaa:	d0f1      	beq.n	11e90 <clocktime_to_timeval+0xc0>
   11eac:	2000      	movs	r0, #0
   11eae:	e7f2      	b.n	11e96 <clocktime_to_timeval+0xc6>
    days += (ct->day - 1);
   11eb0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   11eb4:	44c1      	add	r9, r8
    tv->tv_sec = (((int64_t)days * 24 + ct->hour) * 60 + ct->min) * 60 +
   11eb6:	ea4f 72e9 	mov.w	r2, r9, asr #31
   11eba:	eb19 0309 	adds.w	r3, r9, r9
   11ebe:	eb42 0102 	adc.w	r1, r2, r2
   11ec2:	eb13 0309 	adds.w	r3, r3, r9
   11ec6:	eb42 0201 	adc.w	r2, r2, r1
   11eca:	00d2      	lsls	r2, r2, #3
   11ecc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   11ed0:	00db      	lsls	r3, r3, #3
   11ed2:	eb13 030b 	adds.w	r3, r3, fp
   11ed6:	eb42 7beb 	adc.w	fp, r2, fp, asr #31
   11eda:	ea4f 120b 	mov.w	r2, fp, lsl #4
   11ede:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
   11ee2:	0119      	lsls	r1, r3, #4
   11ee4:	1acb      	subs	r3, r1, r3
   11ee6:	eb62 020b 	sbc.w	r2, r2, fp
   11eea:	0092      	lsls	r2, r2, #2
   11eec:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
   11ef0:	009b      	lsls	r3, r3, #2
   11ef2:	9802      	ldr	r0, [sp, #8]
   11ef4:	1819      	adds	r1, r3, r0
   11ef6:	eb42 70e0 	adc.w	r0, r2, r0, asr #31
   11efa:	0102      	lsls	r2, r0, #4
   11efc:	ea42 7211 	orr.w	r2, r2, r1, lsr #28
   11f00:	010b      	lsls	r3, r1, #4
   11f02:	1a5b      	subs	r3, r3, r1
   11f04:	eb62 0200 	sbc.w	r2, r2, r0
   11f08:	0092      	lsls	r2, r2, #2
   11f0a:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
   11f0e:	009b      	lsls	r3, r3, #2
   11f10:	9903      	ldr	r1, [sp, #12]
   11f12:	185b      	adds	r3, r3, r1
   11f14:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
   11f18:	9800      	ldr	r0, [sp, #0]
   11f1a:	6003      	str	r3, [r0, #0]
   11f1c:	6042      	str	r2, [r0, #4]
    tv->tv_usec = ct->usec;
   11f1e:	69e1      	ldr	r1, [r4, #28]
   11f20:	4604      	mov	r4, r0
   11f22:	6081      	str	r1, [r0, #8]
    if (tz != NULL) {
   11f24:	9d01      	ldr	r5, [sp, #4]
   11f26:	b3b5      	cbz	r5, 11f96 <clocktime_to_timeval+0x1c6>
	tv->tv_sec += tz->tz_minuteswest * 60;
   11f28:	f9b5 1000 	ldrsh.w	r1, [r5]
   11f2c:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
   11f30:	0088      	lsls	r0, r1, #2
   11f32:	181b      	adds	r3, r3, r0
   11f34:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
   11f38:	6023      	str	r3, [r4, #0]
   11f3a:	6062      	str	r2, [r4, #4]
	tv->tv_sec -= tz->tz_dsttime ? 3600 : 0;
   11f3c:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
   11f40:	b151      	cbz	r1, 11f58 <clocktime_to_timeval+0x188>
   11f42:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   11f46:	2000      	movs	r0, #0
   11f48:	1a5b      	subs	r3, r3, r1
   11f4a:	eb62 0200 	sbc.w	r2, r2, r0
   11f4e:	9900      	ldr	r1, [sp, #0]
   11f50:	600b      	str	r3, [r1, #0]
   11f52:	604a      	str	r2, [r1, #4]
    return (0);
   11f54:	2000      	movs	r0, #0
   11f56:	e003      	b.n	11f60 <clocktime_to_timeval+0x190>
	tv->tv_sec -= tz->tz_dsttime ? 3600 : 0;
   11f58:	2100      	movs	r1, #0
   11f5a:	4608      	mov	r0, r1
   11f5c:	e7f4      	b.n	11f48 <clocktime_to_timeval+0x178>
        return (OS_EINVAL);
   11f5e:	2002      	movs	r0, #2
}
   11f60:	b005      	add	sp, #20
   11f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return (OS_EINVAL);
   11f66:	2002      	movs	r0, #2
   11f68:	e7fa      	b.n	11f60 <clocktime_to_timeval+0x190>
   11f6a:	2002      	movs	r0, #2
   11f6c:	e7f8      	b.n	11f60 <clocktime_to_timeval+0x190>
   11f6e:	2002      	movs	r0, #2
   11f70:	e7f6      	b.n	11f60 <clocktime_to_timeval+0x190>
   11f72:	2002      	movs	r0, #2
   11f74:	e7f4      	b.n	11f60 <clocktime_to_timeval+0x190>
   11f76:	2002      	movs	r0, #2
   11f78:	e7f2      	b.n	11f60 <clocktime_to_timeval+0x190>
   11f7a:	2002      	movs	r0, #2
   11f7c:	e7f0      	b.n	11f60 <clocktime_to_timeval+0x190>
   11f7e:	2002      	movs	r0, #2
   11f80:	e7ee      	b.n	11f60 <clocktime_to_timeval+0x190>
   11f82:	2002      	movs	r0, #2
   11f84:	e7ec      	b.n	11f60 <clocktime_to_timeval+0x190>
   11f86:	2002      	movs	r0, #2
   11f88:	e7ea      	b.n	11f60 <clocktime_to_timeval+0x190>
   11f8a:	2002      	movs	r0, #2
   11f8c:	e7e8      	b.n	11f60 <clocktime_to_timeval+0x190>
   11f8e:	2002      	movs	r0, #2
   11f90:	e7e6      	b.n	11f60 <clocktime_to_timeval+0x190>
   11f92:	2002      	movs	r0, #2
   11f94:	e7e4      	b.n	11f60 <clocktime_to_timeval+0x190>
    return (0);
   11f96:	2000      	movs	r0, #0
   11f98:	e7e2      	b.n	11f60 <clocktime_to_timeval+0x190>
   11f9a:	bf00      	nop
   11f9c:	00023ce8 	.word	0x00023ce8
   11fa0:	000f423f 	.word	0x000f423f

00011fa4 <timeval_to_clocktime>:
{
   11fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11fa8:	4606      	mov	r6, r0
   11faa:	4615      	mov	r5, r2
    secs = tv->tv_sec;
   11fac:	6807      	ldr	r7, [r0, #0]
   11fae:	f8d0 8004 	ldr.w	r8, [r0, #4]
    if (tz != NULL) {
   11fb2:	b189      	cbz	r1, 11fd8 <timeval_to_clocktime+0x34>
        secs -= tz->tz_minuteswest * 60;
   11fb4:	f9b1 3000 	ldrsh.w	r3, [r1]
   11fb8:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   11fbc:	009a      	lsls	r2, r3, #2
   11fbe:	1abf      	subs	r7, r7, r2
   11fc0:	eb68 73e3 	sbc.w	r3, r8, r3, asr #31
        secs += tz->tz_dsttime ? 3600 : 0;
   11fc4:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
   11fc8:	b37a      	cbz	r2, 1202a <timeval_to_clocktime+0x86>
   11fca:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   11fce:	f04f 0800 	mov.w	r8, #0
   11fd2:	19d7      	adds	r7, r2, r7
   11fd4:	eb48 0803 	adc.w	r8, r8, r3
    if (secs < 0 || tv->tv_usec < 0 || tv->tv_usec > 999999) {
   11fd8:	f1b8 0f00 	cmp.w	r8, #0
   11fdc:	db73      	blt.n	120c6 <timeval_to_clocktime+0x122>
   11fde:	68b3      	ldr	r3, [r6, #8]
   11fe0:	2b00      	cmp	r3, #0
   11fe2:	db72      	blt.n	120ca <timeval_to_clocktime+0x126>
   11fe4:	4a3b      	ldr	r2, [pc, #236]	; (120d4 <timeval_to_clocktime+0x130>)
   11fe6:	4293      	cmp	r3, r2
   11fe8:	dc71      	bgt.n	120ce <timeval_to_clocktime+0x12a>
    days = secs / SECDAY;
   11fea:	4a3b      	ldr	r2, [pc, #236]	; (120d8 <timeval_to_clocktime+0x134>)
   11fec:	2300      	movs	r3, #0
   11fee:	4638      	mov	r0, r7
   11ff0:	4641      	mov	r1, r8
   11ff2:	f00f fd25 	bl	21a40 <__aeabi_ldivmod>
   11ff6:	4681      	mov	r9, r0
   11ff8:	4604      	mov	r4, r0
    rsec = secs % SECDAY;
   11ffa:	4a37      	ldr	r2, [pc, #220]	; (120d8 <timeval_to_clocktime+0x134>)
   11ffc:	2300      	movs	r3, #0
   11ffe:	4638      	mov	r0, r7
   12000:	4641      	mov	r1, r8
   12002:	f00f fd1d 	bl	21a40 <__aeabi_ldivmod>
   12006:	4690      	mov	r8, r2
   12008:	461f      	mov	r7, r3
    ct->dow = day_of_week(days);
   1200a:	f109 0004 	add.w	r0, r9, #4
   1200e:	4b33      	ldr	r3, [pc, #204]	; (120dc <timeval_to_clocktime+0x138>)
   12010:	fb83 2300 	smull	r2, r3, r3, r0
   12014:	181a      	adds	r2, r3, r0
   12016:	17c3      	asrs	r3, r0, #31
   12018:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
   1201c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   12020:	1ac3      	subs	r3, r0, r3
   12022:	61ab      	str	r3, [r5, #24]
    for (year = POSIX_BASE_YEAR; days >= days_in_year(year); year++)
   12024:	f240 79b2 	movw	r9, #1970	; 0x7b2
   12028:	e009      	b.n	1203e <timeval_to_clocktime+0x9a>
        secs += tz->tz_dsttime ? 3600 : 0;
   1202a:	2200      	movs	r2, #0
   1202c:	4690      	mov	r8, r2
   1202e:	e7d0      	b.n	11fd2 <timeval_to_clocktime+0x2e>
    for (year = POSIX_BASE_YEAR; days >= days_in_year(year); year++)
   12030:	f240 136d 	movw	r3, #365	; 0x16d
   12034:	429c      	cmp	r4, r3
   12036:	db0b      	blt.n	12050 <timeval_to_clocktime+0xac>
        days -= days_in_year(year);
   12038:	1ae4      	subs	r4, r4, r3
    for (year = POSIX_BASE_YEAR; days >= days_in_year(year); year++)
   1203a:	f109 0901 	add.w	r9, r9, #1
   1203e:	4648      	mov	r0, r9
   12040:	f7ff fe80 	bl	11d44 <leapyear>
   12044:	4686      	mov	lr, r0
   12046:	2800      	cmp	r0, #0
   12048:	d0f2      	beq.n	12030 <timeval_to_clocktime+0x8c>
   1204a:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   1204e:	e7f1      	b.n	12034 <timeval_to_clocktime+0x90>
    ct->year = year;
   12050:	f8c5 9000 	str.w	r9, [r5]
    for (i = 1; days >= days_in_month(year, i); i++)
   12054:	2301      	movs	r3, #1
   12056:	e006      	b.n	12066 <timeval_to_clocktime+0xc2>
   12058:	46f4      	mov	ip, lr
   1205a:	448c      	add	ip, r1
   1205c:	45a4      	cmp	ip, r4
   1205e:	dc0b      	bgt.n	12078 <timeval_to_clocktime+0xd4>
        days -= days_in_month(year, i);
   12060:	eba4 040c 	sub.w	r4, r4, ip
    for (i = 1; days >= days_in_month(year, i); i++)
   12064:	3301      	adds	r3, #1
   12066:	1e5a      	subs	r2, r3, #1
   12068:	491d      	ldr	r1, [pc, #116]	; (120e0 <timeval_to_clocktime+0x13c>)
   1206a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   1206e:	2b02      	cmp	r3, #2
   12070:	d0f2      	beq.n	12058 <timeval_to_clocktime+0xb4>
   12072:	f04f 0c00 	mov.w	ip, #0
   12076:	e7f0      	b.n	1205a <timeval_to_clocktime+0xb6>
    ct->mon = i;
   12078:	606b      	str	r3, [r5, #4]
    ct->day = days + 1;
   1207a:	3401      	adds	r4, #1
   1207c:	60ac      	str	r4, [r5, #8]
    ct->hour = rsec / 3600;
   1207e:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   12082:	2300      	movs	r3, #0
   12084:	4640      	mov	r0, r8
   12086:	4639      	mov	r1, r7
   12088:	f00f fcda 	bl	21a40 <__aeabi_ldivmod>
   1208c:	60e8      	str	r0, [r5, #12]
    rsec = rsec % 3600;
   1208e:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   12092:	2300      	movs	r3, #0
   12094:	4640      	mov	r0, r8
   12096:	4639      	mov	r1, r7
   12098:	f00f fcd2 	bl	21a40 <__aeabi_ldivmod>
   1209c:	4617      	mov	r7, r2
   1209e:	461c      	mov	r4, r3
    ct->min  = rsec / 60;
   120a0:	223c      	movs	r2, #60	; 0x3c
   120a2:	2300      	movs	r3, #0
   120a4:	4638      	mov	r0, r7
   120a6:	4621      	mov	r1, r4
   120a8:	f00f fcca 	bl	21a40 <__aeabi_ldivmod>
   120ac:	6128      	str	r0, [r5, #16]
    rsec = rsec % 60;
   120ae:	223c      	movs	r2, #60	; 0x3c
   120b0:	2300      	movs	r3, #0
   120b2:	4638      	mov	r0, r7
   120b4:	4621      	mov	r1, r4
   120b6:	f00f fcc3 	bl	21a40 <__aeabi_ldivmod>
    ct->sec  = rsec;
   120ba:	616a      	str	r2, [r5, #20]
    ct->usec = tv->tv_usec;
   120bc:	68b3      	ldr	r3, [r6, #8]
   120be:	61eb      	str	r3, [r5, #28]
    return (0);
   120c0:	2000      	movs	r0, #0
}
   120c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return (OS_EINVAL);
   120c6:	2002      	movs	r0, #2
   120c8:	e7fb      	b.n	120c2 <timeval_to_clocktime+0x11e>
   120ca:	2002      	movs	r0, #2
   120cc:	e7f9      	b.n	120c2 <timeval_to_clocktime+0x11e>
   120ce:	2002      	movs	r0, #2
   120d0:	e7f7      	b.n	120c2 <timeval_to_clocktime+0x11e>
   120d2:	bf00      	nop
   120d4:	000f423f 	.word	0x000f423f
   120d8:	00015180 	.word	0x00015180
   120dc:	92492493 	.word	0x92492493
   120e0:	00023ce8 	.word	0x00023ce8

000120e4 <datetime_parse>:
 * 2016-03-02T22:44:00.1                fractional seconds
 * 2016-03-02T22:44:00.101+05:30        fractional seconds with timezone
 */
int
datetime_parse(const char *input, struct os_timeval *tv, struct os_timezone *tz)
{
   120e4:	b570      	push	{r4, r5, r6, lr}
   120e6:	b08a      	sub	sp, #40	; 0x28
   120e8:	4604      	mov	r4, r0
   120ea:	460d      	mov	r5, r1
   120ec:	4616      	mov	r6, r2
    int off_hour, off_min;
    const char *cp;
    const char *ep;
    struct clocktime ct;

    bzero(&ct, sizeof(struct clocktime));
   120ee:	2220      	movs	r2, #32
   120f0:	2100      	movs	r1, #0
   120f2:	4668      	mov	r0, sp
   120f4:	f7fb fcf1 	bl	dada <memset>
    bzero(tv, sizeof(struct os_timeval));
   120f8:	2300      	movs	r3, #0
   120fa:	602b      	str	r3, [r5, #0]
   120fc:	606b      	str	r3, [r5, #4]
   120fe:	60ab      	str	r3, [r5, #8]
   12100:	60eb      	str	r3, [r5, #12]
    bzero(tz, sizeof(struct os_timezone));      /* default to UTC time */
   12102:	6033      	str	r3, [r6, #0]

    cp = input;
    cp = parse_number(cp, 4, &ct.year);
   12104:	466a      	mov	r2, sp
   12106:	2104      	movs	r1, #4
   12108:	4620      	mov	r0, r4
   1210a:	f7ff fe3d 	bl	11d88 <parse_number>
    if (cp == NULL || *cp != '-') {
   1210e:	2800      	cmp	r0, #0
   12110:	f000 80a6 	beq.w	12260 <datetime_parse+0x17c>
   12114:	7802      	ldrb	r2, [r0, #0]
   12116:	2a2d      	cmp	r2, #45	; 0x2d
   12118:	f040 80a5 	bne.w	12266 <datetime_parse+0x182>
        goto err;
    }

    cp = parse_number(cp + 1, 2, &ct.mon);
   1211c:	aa01      	add	r2, sp, #4
   1211e:	2102      	movs	r1, #2
   12120:	3001      	adds	r0, #1
   12122:	f7ff fe31 	bl	11d88 <parse_number>
    if (cp == NULL || *cp != '-') {
   12126:	2800      	cmp	r0, #0
   12128:	f000 80a0 	beq.w	1226c <datetime_parse+0x188>
   1212c:	7802      	ldrb	r2, [r0, #0]
   1212e:	2a2d      	cmp	r2, #45	; 0x2d
   12130:	f040 809f 	bne.w	12272 <datetime_parse+0x18e>
        goto err;
    }

    cp = parse_number(cp + 1, 2, &ct.day);
   12134:	aa02      	add	r2, sp, #8
   12136:	2102      	movs	r1, #2
   12138:	3001      	adds	r0, #1
   1213a:	f7ff fe25 	bl	11d88 <parse_number>
    if (cp == NULL || *cp != 'T') {
   1213e:	2800      	cmp	r0, #0
   12140:	f000 809a 	beq.w	12278 <datetime_parse+0x194>
   12144:	7802      	ldrb	r2, [r0, #0]
   12146:	2a54      	cmp	r2, #84	; 0x54
   12148:	f040 8099 	bne.w	1227e <datetime_parse+0x19a>
        goto err;
    }

    cp = parse_number(cp + 1, 2, &ct.hour);
   1214c:	aa03      	add	r2, sp, #12
   1214e:	2102      	movs	r1, #2
   12150:	3001      	adds	r0, #1
   12152:	f7ff fe19 	bl	11d88 <parse_number>
    if (cp == NULL || *cp != ':') {
   12156:	2800      	cmp	r0, #0
   12158:	f000 8094 	beq.w	12284 <datetime_parse+0x1a0>
   1215c:	7802      	ldrb	r2, [r0, #0]
   1215e:	2a3a      	cmp	r2, #58	; 0x3a
   12160:	f040 8093 	bne.w	1228a <datetime_parse+0x1a6>
        goto err;
    }

    cp = parse_number(cp + 1, 2, &ct.min);
   12164:	aa04      	add	r2, sp, #16
   12166:	2102      	movs	r1, #2
   12168:	3001      	adds	r0, #1
   1216a:	f7ff fe0d 	bl	11d88 <parse_number>
    if (cp == NULL || *cp != ':') {
   1216e:	2800      	cmp	r0, #0
   12170:	f000 808e 	beq.w	12290 <datetime_parse+0x1ac>
   12174:	7802      	ldrb	r2, [r0, #0]
   12176:	2a3a      	cmp	r2, #58	; 0x3a
   12178:	f040 808d 	bne.w	12296 <datetime_parse+0x1b2>
        goto err;
    }

    cp = parse_number(cp + 1, 2, &ct.sec);
   1217c:	aa05      	add	r2, sp, #20
   1217e:	2102      	movs	r1, #2
   12180:	3001      	adds	r0, #1
   12182:	f7ff fe01 	bl	11d88 <parse_number>
    if (cp == NULL) {
   12186:	4684      	mov	ip, r0
   12188:	2800      	cmp	r0, #0
   1218a:	f000 8087 	beq.w	1229c <datetime_parse+0x1b8>
        goto err;
    }

    /* parse fractional seconds if specified */
    if (*cp == '.') {
   1218e:	7803      	ldrb	r3, [r0, #0]
   12190:	2b2e      	cmp	r3, #46	; 0x2e
   12192:	d037      	beq.n	12204 <datetime_parse+0x120>
        while (digits++ < 6) {
            ct.usec *= 10;
        }
    }

    if (*cp == 'Z' || *cp == 'z') {
   12194:	f89c 3000 	ldrb.w	r3, [ip]
   12198:	2b5a      	cmp	r3, #90	; 0x5a
   1219a:	d050      	beq.n	1223e <datetime_parse+0x15a>
   1219c:	2b7a      	cmp	r3, #122	; 0x7a
   1219e:	d04e      	beq.n	1223e <datetime_parse+0x15a>
        cp++;
    } else if (*cp == '+' || *cp == '-') {
   121a0:	2b2b      	cmp	r3, #43	; 0x2b
   121a2:	d001      	beq.n	121a8 <datetime_parse+0xc4>
   121a4:	2b2d      	cmp	r3, #45	; 0x2d
   121a6:	d14c      	bne.n	12242 <datetime_parse+0x15e>
        sign = (*cp == '+') ? +1 : -1;
   121a8:	2b2b      	cmp	r3, #43	; 0x2b
   121aa:	d057      	beq.n	1225c <datetime_parse+0x178>
   121ac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
        cp = parse_number(cp + 1, 2, &off_hour);
   121b0:	aa09      	add	r2, sp, #36	; 0x24
   121b2:	2102      	movs	r1, #2
   121b4:	f10c 0001 	add.w	r0, ip, #1
   121b8:	f7ff fde6 	bl	11d88 <parse_number>
        if (cp == NULL || *cp != ':') {
   121bc:	2800      	cmp	r0, #0
   121be:	d076      	beq.n	122ae <datetime_parse+0x1ca>
   121c0:	7802      	ldrb	r2, [r0, #0]
   121c2:	2a3a      	cmp	r2, #58	; 0x3a
   121c4:	d176      	bne.n	122b4 <datetime_parse+0x1d0>
            goto err;
        }

        cp = parse_number(cp + 1, 2, &off_min);
   121c6:	aa08      	add	r2, sp, #32
   121c8:	2102      	movs	r1, #2
   121ca:	3001      	adds	r0, #1
   121cc:	f7ff fddc 	bl	11d88 <parse_number>
        if (cp == NULL) {
   121d0:	4684      	mov	ip, r0
   121d2:	2800      	cmp	r0, #0
   121d4:	d071      	beq.n	122ba <datetime_parse+0x1d6>
            goto err;
        }

        if (off_hour < 0 || off_hour > 23 || off_min < 0 || off_min > 59) {
   121d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   121d8:	2a17      	cmp	r2, #23
   121da:	d871      	bhi.n	122c0 <datetime_parse+0x1dc>
   121dc:	9b08      	ldr	r3, [sp, #32]
   121de:	2b00      	cmp	r3, #0
   121e0:	db71      	blt.n	122c6 <datetime_parse+0x1e2>
   121e2:	2b3b      	cmp	r3, #59	; 0x3b
   121e4:	dc72      	bgt.n	122cc <datetime_parse+0x1e8>

        /*
         * Allow time zone offsets of up to 18 hours from the GMT.
         * https://docs.oracle.com/javase/8/docs/api/java/time/ZoneOffset.html
         */
        tz->tz_minuteswest = off_hour * 60 + off_min;
   121e6:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
   121ea:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   121ee:	b29a      	uxth	r2, r3
   121f0:	b21b      	sxth	r3, r3
   121f2:	8033      	strh	r3, [r6, #0]
        if (tz->tz_minuteswest > 18 * 60) {
   121f4:	f5b3 6f87 	cmp.w	r3, #1080	; 0x438
   121f8:	dc6b      	bgt.n	122d2 <datetime_parse+0x1ee>

        /*
         * Positive GMT offsets (i.e. timezones to the east of GMT) are
         * represented with a negative 'tz_minuteswest' value.
         */
        if (sign > 0) {
   121fa:	2c00      	cmp	r4, #0
   121fc:	dd21      	ble.n	12242 <datetime_parse+0x15e>
            tz->tz_minuteswest = -tz->tz_minuteswest;
   121fe:	4252      	negs	r2, r2
   12200:	8032      	strh	r2, [r6, #0]
   12202:	e01e      	b.n	12242 <datetime_parse+0x15e>
        ep = ++cp;
   12204:	3001      	adds	r0, #1
   12206:	4604      	mov	r4, r0
        while (isdigit((int) *ep)) {
   12208:	e000      	b.n	1220c <datetime_parse+0x128>
            ep++;
   1220a:	3401      	adds	r4, #1
        while (isdigit((int) *ep)) {
   1220c:	7823      	ldrb	r3, [r4, #0]
   1220e:	3b30      	subs	r3, #48	; 0x30
   12210:	2b09      	cmp	r3, #9
   12212:	d9fa      	bls.n	1220a <datetime_parse+0x126>
        digits = ep - cp;
   12214:	1a24      	subs	r4, r4, r0
        if (digits <= 0 || digits > 6) {
   12216:	1e63      	subs	r3, r4, #1
   12218:	2b05      	cmp	r3, #5
   1221a:	d842      	bhi.n	122a2 <datetime_parse+0x1be>
        cp = parse_number(cp, digits, &ct.usec);
   1221c:	aa07      	add	r2, sp, #28
   1221e:	4621      	mov	r1, r4
   12220:	f7ff fdb2 	bl	11d88 <parse_number>
        if (cp == NULL) {
   12224:	4684      	mov	ip, r0
   12226:	2800      	cmp	r0, #0
   12228:	d03e      	beq.n	122a8 <datetime_parse+0x1c4>
        while (digits++ < 6) {
   1222a:	1c62      	adds	r2, r4, #1
   1222c:	2c05      	cmp	r4, #5
   1222e:	dcb1      	bgt.n	12194 <datetime_parse+0xb0>
            ct.usec *= 10;
   12230:	9b07      	ldr	r3, [sp, #28]
   12232:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   12236:	005b      	lsls	r3, r3, #1
   12238:	9307      	str	r3, [sp, #28]
        while (digits++ < 6) {
   1223a:	4614      	mov	r4, r2
   1223c:	e7f5      	b.n	1222a <datetime_parse+0x146>
        cp++;
   1223e:	f10c 0c01 	add.w	ip, ip, #1
        /*
         * 'time offset' is not specified so date/time defaults to UTC.
         */
    }

    if (*cp != '\0') {
   12242:	f89c 3000 	ldrb.w	r3, [ip]
   12246:	2b00      	cmp	r3, #0
   12248:	d146      	bne.n	122d8 <datetime_parse+0x1f4>
        goto err;
    }

    if (clocktime_to_timeval(&ct, tz, tv) != 0) {
   1224a:	462a      	mov	r2, r5
   1224c:	4631      	mov	r1, r6
   1224e:	4668      	mov	r0, sp
   12250:	f7ff fdbe 	bl	11dd0 <clocktime_to_timeval>
   12254:	2800      	cmp	r0, #0
   12256:	d142      	bne.n	122de <datetime_parse+0x1fa>
    }

    return (0);
err:
    return (-1);
}
   12258:	b00a      	add	sp, #40	; 0x28
   1225a:	bd70      	pop	{r4, r5, r6, pc}
        sign = (*cp == '+') ? +1 : -1;
   1225c:	2401      	movs	r4, #1
   1225e:	e7a7      	b.n	121b0 <datetime_parse+0xcc>
    return (-1);
   12260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12264:	e7f8      	b.n	12258 <datetime_parse+0x174>
   12266:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1226a:	e7f5      	b.n	12258 <datetime_parse+0x174>
   1226c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12270:	e7f2      	b.n	12258 <datetime_parse+0x174>
   12272:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12276:	e7ef      	b.n	12258 <datetime_parse+0x174>
   12278:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1227c:	e7ec      	b.n	12258 <datetime_parse+0x174>
   1227e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12282:	e7e9      	b.n	12258 <datetime_parse+0x174>
   12284:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12288:	e7e6      	b.n	12258 <datetime_parse+0x174>
   1228a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1228e:	e7e3      	b.n	12258 <datetime_parse+0x174>
   12290:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12294:	e7e0      	b.n	12258 <datetime_parse+0x174>
   12296:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1229a:	e7dd      	b.n	12258 <datetime_parse+0x174>
   1229c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   122a0:	e7da      	b.n	12258 <datetime_parse+0x174>
   122a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   122a6:	e7d7      	b.n	12258 <datetime_parse+0x174>
   122a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   122ac:	e7d4      	b.n	12258 <datetime_parse+0x174>
   122ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   122b2:	e7d1      	b.n	12258 <datetime_parse+0x174>
   122b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   122b8:	e7ce      	b.n	12258 <datetime_parse+0x174>
   122ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   122be:	e7cb      	b.n	12258 <datetime_parse+0x174>
   122c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   122c4:	e7c8      	b.n	12258 <datetime_parse+0x174>
   122c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   122ca:	e7c5      	b.n	12258 <datetime_parse+0x174>
   122cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   122d0:	e7c2      	b.n	12258 <datetime_parse+0x174>
   122d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   122d6:	e7bf      	b.n	12258 <datetime_parse+0x174>
   122d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   122dc:	e7bc      	b.n	12258 <datetime_parse+0x174>
   122de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   122e2:	e7b9      	b.n	12258 <datetime_parse+0x174>

000122e4 <datetime_format>:

int
datetime_format(const struct os_timeval *tv, const struct os_timezone *tz,
    char *ostr, int olen)
{
   122e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   122e6:	b08f      	sub	sp, #60	; 0x3c
   122e8:	460e      	mov	r6, r1
   122ea:	4617      	mov	r7, r2
   122ec:	461c      	mov	r4, r3
    char *cp;
    int rc, rlen, minswest;
    int off_hour, off_min, sign;
    struct clocktime ct;

    rc = timeval_to_clocktime(tv, tz, &ct);
   122ee:	aa06      	add	r2, sp, #24
   122f0:	f7ff fe58 	bl	11fa4 <timeval_to_clocktime>
    if (rc != 0) {
   122f4:	2800      	cmp	r0, #0
   122f6:	d147      	bne.n	12388 <datetime_format+0xa4>
   122f8:	4605      	mov	r5, r0
    }

    cp = ostr;
    rlen = olen;

    rc = snprintf(cp, rlen, "%04d-%02d-%02dT%02d:%02d:%02d.%06d",
   122fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   122fc:	9305      	str	r3, [sp, #20]
   122fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12300:	9304      	str	r3, [sp, #16]
   12302:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12304:	9303      	str	r3, [sp, #12]
   12306:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12308:	9302      	str	r3, [sp, #8]
   1230a:	9b08      	ldr	r3, [sp, #32]
   1230c:	9301      	str	r3, [sp, #4]
   1230e:	9b07      	ldr	r3, [sp, #28]
   12310:	9300      	str	r3, [sp, #0]
   12312:	9b06      	ldr	r3, [sp, #24]
   12314:	4a24      	ldr	r2, [pc, #144]	; (123a8 <datetime_format+0xc4>)
   12316:	4621      	mov	r1, r4
   12318:	4638      	mov	r0, r7
   1231a:	f7fc f820 	bl	e35e <snprintf>
   1231e:	4684      	mov	ip, r0
        ct.year, ct.mon, ct.day, ct.hour, ct.min, ct.sec, ct.usec);
    cp += rc;
   12320:	1838      	adds	r0, r7, r0
    rlen -= rc;
   12322:	eba4 040c 	sub.w	r4, r4, ip
    if (rc < 0 || rlen <= 0) {
   12326:	f1bc 0f00 	cmp.w	ip, #0
   1232a:	db30      	blt.n	1238e <datetime_format+0xaa>
   1232c:	2c00      	cmp	r4, #0
   1232e:	dd31      	ble.n	12394 <datetime_format+0xb0>
        goto err;
    }

    if (tz != NULL) {
   12330:	b15e      	cbz	r6, 1234a <datetime_format+0x66>
        minswest = tz->tz_minuteswest;
   12332:	f9b6 c000 	ldrsh.w	ip, [r6]
        if (tz->tz_dsttime) {
   12336:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
   1233a:	b10b      	cbz	r3, 12340 <datetime_format+0x5c>
            minswest -= 60;
   1233c:	f1ac 0c3c 	sub.w	ip, ip, #60	; 0x3c
        }
    } else {
        minswest = 0;
    }

    if (minswest <= 0) {
   12340:	f1bc 0f00 	cmp.w	ip, #0
   12344:	dd02      	ble.n	1234c <datetime_format+0x68>
        sign = '+';
        minswest = -minswest;
    } else {
        sign = '-';
   12346:	232d      	movs	r3, #45	; 0x2d
   12348:	e003      	b.n	12352 <datetime_format+0x6e>
        minswest = 0;
   1234a:	46ac      	mov	ip, r5
        minswest = -minswest;
   1234c:	f1cc 0c00 	rsb	ip, ip, #0
        sign = '+';
   12350:	232b      	movs	r3, #43	; 0x2b
    }

    off_hour = minswest / 60;
   12352:	4a16      	ldr	r2, [pc, #88]	; (123ac <datetime_format+0xc8>)
   12354:	fb82 120c 	smull	r1, r2, r2, ip
   12358:	eb02 010c 	add.w	r1, r2, ip
   1235c:	ea4f 72ec 	mov.w	r2, ip, asr #31
   12360:	ebc2 1261 	rsb	r2, r2, r1, asr #5
    off_min = minswest % 60;
   12364:	ebc2 1102 	rsb	r1, r2, r2, lsl #4
   12368:	ebac 0181 	sub.w	r1, ip, r1, lsl #2

    rc = snprintf(cp, rlen, "%c%02d:%02d", sign, off_hour, off_min);
   1236c:	9101      	str	r1, [sp, #4]
   1236e:	9200      	str	r2, [sp, #0]
   12370:	4a0f      	ldr	r2, [pc, #60]	; (123b0 <datetime_format+0xcc>)
   12372:	4621      	mov	r1, r4
   12374:	f7fb fff3 	bl	e35e <snprintf>
    cp += rc;
    rlen -= rc;
   12378:	1a24      	subs	r4, r4, r0
    if (rc < 0 || rlen <= 0) {
   1237a:	2800      	cmp	r0, #0
   1237c:	db0d      	blt.n	1239a <datetime_format+0xb6>
   1237e:	2c00      	cmp	r4, #0
   12380:	dd0e      	ble.n	123a0 <datetime_format+0xbc>

    return (0);

err:
    return (-1);
}
   12382:	4628      	mov	r0, r5
   12384:	b00f      	add	sp, #60	; 0x3c
   12386:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (-1);
   12388:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1238c:	e7f9      	b.n	12382 <datetime_format+0x9e>
   1238e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12392:	e7f6      	b.n	12382 <datetime_format+0x9e>
   12394:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12398:	e7f3      	b.n	12382 <datetime_format+0x9e>
   1239a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1239e:	e7f0      	b.n	12382 <datetime_format+0x9e>
   123a0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   123a4:	e7ed      	b.n	12382 <datetime_format+0x9e>
   123a6:	bf00      	nop
   123a8:	00023cb8 	.word	0x00023cb8
   123ac:	88888889 	.word	0x88888889
   123b0:	00023cdc 	.word	0x00023cdc

000123b4 <crc16_ccitt>:
    int counter;

    crc = initial_crc;
    ptr = buf;

    for (counter = 0; counter < len; counter++) {
   123b4:	f04f 0c00 	mov.w	ip, #0
   123b8:	4594      	cmp	ip, r2
   123ba:	da11      	bge.n	123e0 <crc16_ccitt+0x2c>
{
   123bc:	b410      	push	{r4}
        crc = (crc<<8) ^ crc16tab[((crc>>8) ^ *ptr++)&0x00FF];
   123be:	f811 3b01 	ldrb.w	r3, [r1], #1
   123c2:	ea83 2310 	eor.w	r3, r3, r0, lsr #8
   123c6:	4c07      	ldr	r4, [pc, #28]	; (123e4 <crc16_ccitt+0x30>)
   123c8:	f934 3013 	ldrsh.w	r3, [r4, r3, lsl #1]
   123cc:	ea83 2000 	eor.w	r0, r3, r0, lsl #8
   123d0:	b280      	uxth	r0, r0
    for (counter = 0; counter < len; counter++) {
   123d2:	f10c 0c01 	add.w	ip, ip, #1
   123d6:	4594      	cmp	ip, r2
   123d8:	dbf1      	blt.n	123be <crc16_ccitt+0xa>
    }

    return crc;
}
   123da:	f85d 4b04 	ldr.w	r4, [sp], #4
   123de:	4770      	bx	lr
   123e0:	4770      	bx	lr
   123e2:	bf00      	nop
   123e4:	00023d18 	.word	0x00023d18

000123e8 <streamer_vprintf>:
    return streamer->cfg->write_cb(streamer, src, len);
}

int
streamer_vprintf(struct streamer *streamer, const char *fmt, va_list ap)
{
   123e8:	b508      	push	{r3, lr}
    return streamer->cfg->vprintf_cb(streamer, fmt, ap);
   123ea:	6803      	ldr	r3, [r0, #0]
   123ec:	685b      	ldr	r3, [r3, #4]
   123ee:	4798      	blx	r3
}
   123f0:	bd08      	pop	{r3, pc}

000123f2 <streamer_printf>:

int
streamer_printf(struct streamer *streamer, const char *fmt, ...)
{
   123f2:	b40e      	push	{r1, r2, r3}
   123f4:	b500      	push	{lr}
   123f6:	b082      	sub	sp, #8
   123f8:	aa03      	add	r2, sp, #12
   123fa:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list ap;
    int rc;

    va_start(ap, fmt);
   123fe:	9201      	str	r2, [sp, #4]
    rc = streamer_vprintf(streamer, fmt, ap);
   12400:	f7ff fff2 	bl	123e8 <streamer_vprintf>
    va_end(ap);

    return rc;
}
   12404:	b002      	add	sp, #8
   12406:	f85d eb04 	ldr.w	lr, [sp], #4
   1240a:	b003      	add	sp, #12
   1240c:	4770      	bx	lr

0001240e <streamer_console_vprintf>:
}

static int
streamer_console_vprintf(struct streamer *streamer,
                         const char *fmt, va_list ap)
{
   1240e:	b508      	push	{r3, lr}
   12410:	4608      	mov	r0, r1
    return console_vprintf(fmt, ap);
   12412:	4611      	mov	r1, r2
   12414:	f7fd fb0c 	bl	fa30 <console_vprintf>
}
   12418:	bd08      	pop	{r3, pc}

0001241a <streamer_console_write>:
{
   1241a:	b508      	push	{r3, lr}
   1241c:	4608      	mov	r0, r1
    console_write(src, len);
   1241e:	4611      	mov	r1, r2
   12420:	f7fd f8fc 	bl	f61c <console_write>
}
   12424:	2000      	movs	r0, #0
   12426:	bd08      	pop	{r3, pc}

00012428 <streamer_console_get>:

struct streamer *
streamer_console_get(void)
{
    return &streamer_console;
}
   12428:	4800      	ldr	r0, [pc, #0]	; (1242c <streamer_console_get+0x4>)
   1242a:	4770      	bx	lr
   1242c:	20000758 	.word	0x20000758

00012430 <sysinit_app>:
void nmgr_shell_pkg_init(void);
void uwb_rng_pkg_init2(void);

void
sysinit_app(void)
{
   12430:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
   12432:	f7f6 ff09 	bl	9248 <os_pkg_init>

    /*** Stage 2 */
    /* 2.0: flash_map_init (sys/flash_map) */
    flash_map_init();
   12436:	f00b ff8f 	bl	1e358 <flash_map_init>

    /*** Stage 10 */
    /* 10.0: stats_module_init (sys/stats/full) */
    stats_module_init();
   1243a:	f7fe fe1b 	bl	11074 <stats_module_init>

    /*** Stage 20 */
    /* 20.0: console_pkg_init (sys/console/full) */
    console_pkg_init();
   1243e:	f7fd facf 	bl	f9e0 <console_pkg_init>

    /*** Stage 50 */
    /* 50.0: config_pkg_init (sys/config) */
    config_pkg_init();
   12442:	f00b fca5 	bl	1dd90 <config_pkg_init>

    /*** Stage 100 */
    /* 100.0: log_init (sys/log/full) */
    log_init();
   12446:	f00c f86b 	bl	1e520 <log_init>
    /* 100.1: mfg_init (sys/mfg) */
    mfg_init();
   1244a:	f00d f923 	bl	1f694 <mfg_init>
    /* 100.2: modlog_init (sys/log/modlog) */
    modlog_init();
   1244e:	f00c ffcd 	bl	1f3ec <modlog_init>

    /*** Stage 200 */
    /* 200.0: log_reboot_pkg_init (sys/reboot) */
    log_reboot_pkg_init();
   12452:	f00d fa97 	bl	1f984 <log_reboot_pkg_init>

    /*** Stage 220 */
    /* 220.0: config_pkg_init_stage2 (sys/config) */
    config_pkg_init_stage2();
   12456:	f00b fcab 	bl	1ddb0 <config_pkg_init_stage2>

    /*** Stage 401 */
    /* 401.0: dw1000_pkg_init (hw/drivers/uwb/uwb_dw1000) */
    dw1000_pkg_init();
   1245a:	f005 f967 	bl	1772c <dw1000_pkg_init>

    /*** Stage 402 */
    /* 402.0: cir_pkg_init (lib/cir) */
    cir_pkg_init();
   1245e:	f006 fbe5 	bl	18c2c <cir_pkg_init>
    /* 402.1: uwb_ccp_pkg_init (lib/uwb_ccp) */
    uwb_ccp_pkg_init();
   12462:	f7f9 ffd1 	bl	c408 <uwb_ccp_pkg_init>

    /*** Stage 403 */
    /* 403.0: uwb_wcs_pkg_init (lib/uwb_wcs) */
    uwb_wcs_pkg_init();
   12466:	f7fb f9bb 	bl	d7e0 <uwb_wcs_pkg_init>

    /*** Stage 404 */
    /* 404.0: tdma_pkg_init (lib/tdma) */
    tdma_pkg_init();
   1246a:	f7f8 fe55 	bl	b118 <tdma_pkg_init>
    /* 404.1: uwb_rng_pkg_init (lib/uwb_rng) */
    uwb_rng_pkg_init();
   1246e:	f7fa fd45 	bl	cefc <uwb_rng_pkg_init>
    /* 404.2: wcs_timescale_pkg_init (lib/uwb_wcs) */
    wcs_timescale_pkg_init();
   12472:	f009 ffb7 	bl	1c3e4 <wcs_timescale_pkg_init>

    /*** Stage 406 */
    /* 406.0: twr_ss_ack_pkg_init (lib/twr_ss_ack) */
    twr_ss_ack_pkg_init();
   12476:	f009 fc09 	bl	1bc8c <twr_ss_ack_pkg_init>
    /* 406.1: twr_ss_ext_pkg_init (lib/twr_ss_ext) */
    twr_ss_ext_pkg_init();
   1247a:	f009 fdb9 	bl	1bff0 <twr_ss_ext_pkg_init>
    /* 406.2: twr_ss_pkg_init (lib/twr_ss) */
    twr_ss_pkg_init();
   1247e:	f009 f997 	bl	1b7b0 <twr_ss_pkg_init>

    /*** Stage 408 */
    /* 408.0: twr_ds_pkg_init (lib/twr_ds) */
    twr_ds_pkg_init();
   12482:	f008 fd25 	bl	1aed0 <twr_ds_pkg_init>

    /*** Stage 410 */
    /* 410.0: twr_ds_ext_pkg_init (lib/twr_ds_ext) */
    twr_ds_ext_pkg_init();
   12486:	f008 ffc9 	bl	1b41c <twr_ds_ext_pkg_init>

    /*** Stage 500 */
    /* 500.0: imgmgr_module_init (mgmt/imgmgr) */
    imgmgr_module_init();
   1248a:	f00a fcc7 	bl	1ce1c <imgmgr_module_init>
    /* 500.1: nmgr_pkg_init (mgmt/newtmgr) */
    nmgr_pkg_init();
   1248e:	f00b f953 	bl	1d738 <nmgr_pkg_init>
    /* 500.2: shell_init (sys/shell) */
    shell_init();
   12492:	f7fe fa1d 	bl	108d0 <shell_init>
    /* 500.3: split_app_init (boot/split) */
    split_app_init();
   12496:	f000 f807 	bl	124a8 <split_app_init>
    /* 500.4: uwbcfg_pkg_init (sys/uwbcfg) */
    uwbcfg_pkg_init();
   1249a:	f7ff f9d1 	bl	11840 <uwbcfg_pkg_init>

    /*** Stage 501 */
    /* 501.0: nmgr_shell_pkg_init (mgmt/newtmgr/transport/nmgr_shell) */
    nmgr_shell_pkg_init();
   1249e:	f00b fbed 	bl	1dc7c <nmgr_shell_pkg_init>

    /*** Stage 999 */
    /* 999.0: uwb_rng_pkg_init2 (lib/uwb_rng) */
    uwb_rng_pkg_init2();
   124a2:	f7fa fd87 	bl	cfb4 <uwb_rng_pkg_init2>
}
   124a6:	bd08      	pop	{r3, pc}

000124a8 <split_app_init>:
static int8_t split_mode_cur;
static int8_t split_app_active;

void
split_app_init(void)
{
   124a8:	b508      	push	{r3, lr}
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   124aa:	4b09      	ldr	r3, [pc, #36]	; (124d0 <split_app_init+0x28>)
   124ac:	781b      	ldrb	r3, [r3, #0]
   124ae:	b11b      	cbz	r3, 124b8 <split_app_init+0x10>

    rc = split_conf_init();
   124b0:	f000 f89e 	bl	125f0 <split_conf_init>
    assert(rc == 0);
   124b4:	b928      	cbnz	r0, 124c2 <split_app_init+0x1a>
}
   124b6:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   124b8:	461a      	mov	r2, r3
   124ba:	4619      	mov	r1, r3
   124bc:	4618      	mov	r0, r3
   124be:	f7f6 fd51 	bl	8f64 <__assert_func>
    assert(rc == 0);
   124c2:	2300      	movs	r3, #0
   124c4:	461a      	mov	r2, r3
   124c6:	4619      	mov	r1, r3
   124c8:	4618      	mov	r0, r3
   124ca:	f7f6 fd4b 	bl	8f64 <__assert_func>
   124ce:	bf00      	nop
   124d0:	20004538 	.word	0x20004538

000124d4 <split_check_status>:

split_status_t
split_check_status(void)
{
   124d4:	b500      	push	{lr}
   124d6:	b083      	sub	sp, #12
    void *entry;
    int rc;

    rc = split_go(LOADER_IMAGE_SLOT, SPLIT_IMAGE_SLOT, &entry);
   124d8:	aa01      	add	r2, sp, #4
   124da:	2101      	movs	r1, #1
   124dc:	2000      	movs	r0, #0
   124de:	f00d fd9b 	bl	20018 <split_go>
    switch (rc) {
   124e2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   124e6:	d009      	beq.n	124fc <split_check_status+0x28>
   124e8:	b150      	cbz	r0, 12500 <split_check_status+0x2c>
   124ea:	f110 0f02 	cmn.w	r0, #2
   124ee:	d00b      	beq.n	12508 <split_check_status+0x34>

    case SPLIT_GO_OK:
        return SPLIT_STATUS_MATCHING;

    default:
        assert(0);
   124f0:	2300      	movs	r3, #0
   124f2:	461a      	mov	r2, r3
   124f4:	4619      	mov	r1, r3
   124f6:	4618      	mov	r0, r3
   124f8:	f7f6 fd34 	bl	8f64 <__assert_func>
        return SPLIT_STATUS_NOT_MATCHING;
   124fc:	2001      	movs	r0, #1
   124fe:	e000      	b.n	12502 <split_check_status+0x2e>
        return SPLIT_STATUS_MATCHING;
   12500:	2002      	movs	r0, #2
        return SPLIT_STATUS_INVALID;
    }
}
   12502:	b003      	add	sp, #12
   12504:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (rc) {
   12508:	2000      	movs	r0, #0
   1250a:	e7fa      	b.n	12502 <split_check_status+0x2e>

0001250c <split_mode_get>:

split_mode_t
split_mode_get(void)
{
    return split_mode_cur;
}
   1250c:	4b01      	ldr	r3, [pc, #4]	; (12514 <split_mode_get+0x8>)
   1250e:	7818      	ldrb	r0, [r3, #0]
   12510:	4770      	bx	lr
   12512:	bf00      	nop
   12514:	20004559 	.word	0x20004559

00012518 <split_app_active_get>:

int
split_app_active_get(void)
{
    return split_app_active;
}
   12518:	4b01      	ldr	r3, [pc, #4]	; (12520 <split_app_active_get+0x8>)
   1251a:	f993 0000 	ldrsb.w	r0, [r3]
   1251e:	4770      	bx	lr
   12520:	20004558 	.word	0x20004558

00012524 <split_mode_set>:
    /* XXX: For now, cast this as an integer.  This value should either be
     * treated as an enumeration generally (i.e. not read directly and assigned
     * from values in flash), or switched to a native type of integer.  However,
     * this is not a high priority change, so just cast it for now.
     */
    if ((int) split_mode < 0 || (int) split_mode >= SPLIT_MODE_CNT) {
   12524:	2803      	cmp	r0, #3
   12526:	d803      	bhi.n	12530 <split_mode_set+0xc>
        return SYS_EINVAL;
    }

    split_mode_cur = split_mode;
   12528:	4b03      	ldr	r3, [pc, #12]	; (12538 <split_mode_set+0x14>)
   1252a:	7018      	strb	r0, [r3, #0]
    return 0;
   1252c:	2000      	movs	r0, #0
   1252e:	4770      	bx	lr
        return SYS_EINVAL;
   12530:	f06f 0001 	mvn.w	r0, #1
}
   12534:	4770      	bx	lr
   12536:	bf00      	nop
   12538:	20004559 	.word	0x20004559

0001253c <split_conf_commit>:

static int
split_conf_commit(void)
{
    return 0;
}
   1253c:	2000      	movs	r0, #0
   1253e:	4770      	bx	lr

00012540 <split_conf_export>:

static int
split_conf_export(void (*func)(char *name, char *val), enum conf_export_tgt tgt)
{
   12540:	b510      	push	{r4, lr}
   12542:	b082      	sub	sp, #8
   12544:	4604      	mov	r4, r0
    split_mode_t split_mode;
    char buf[4];

    split_mode = split_mode_get();
   12546:	f7ff ffe1 	bl	1250c <split_mode_get>
   1254a:	f88d 0007 	strb.w	r0, [sp, #7]
    conf_str_from_value(CONF_INT8, &split_mode, buf, sizeof(buf));
   1254e:	2304      	movs	r3, #4
   12550:	466a      	mov	r2, sp
   12552:	f10d 0107 	add.w	r1, sp, #7
   12556:	2002      	movs	r0, #2
   12558:	f7fc fb70 	bl	ec3c <conf_str_from_value>
    func("split/status", buf);
   1255c:	4669      	mov	r1, sp
   1255e:	4802      	ldr	r0, [pc, #8]	; (12568 <split_conf_export+0x28>)
   12560:	47a0      	blx	r4
    return 0;
}
   12562:	2000      	movs	r0, #0
   12564:	b002      	add	sp, #8
   12566:	bd10      	pop	{r4, pc}
   12568:	00023f58 	.word	0x00023f58

0001256c <split_conf_get>:
    if (argc == 1) {
   1256c:	2801      	cmp	r0, #1
   1256e:	d119      	bne.n	125a4 <split_conf_get+0x38>
{
   12570:	b530      	push	{r4, r5, lr}
   12572:	b083      	sub	sp, #12
   12574:	468c      	mov	ip, r1
   12576:	4614      	mov	r4, r2
   12578:	461d      	mov	r5, r3
        if (!strcmp(argv[0], "status")) {
   1257a:	490b      	ldr	r1, [pc, #44]	; (125a8 <split_conf_get+0x3c>)
   1257c:	f8dc 0000 	ldr.w	r0, [ip]
   12580:	f7fb fad6 	bl	db30 <strcmp>
   12584:	b110      	cbz	r0, 1258c <split_conf_get+0x20>
    return NULL;
   12586:	2000      	movs	r0, #0
}
   12588:	b003      	add	sp, #12
   1258a:	bd30      	pop	{r4, r5, pc}
            split_mode = split_mode_get();
   1258c:	f7ff ffbe 	bl	1250c <split_mode_get>
   12590:	f88d 0007 	strb.w	r0, [sp, #7]
            return conf_str_from_value(CONF_INT8, &split_mode, buf, max_len);
   12594:	462b      	mov	r3, r5
   12596:	4622      	mov	r2, r4
   12598:	f10d 0107 	add.w	r1, sp, #7
   1259c:	2002      	movs	r0, #2
   1259e:	f7fc fb4d 	bl	ec3c <conf_str_from_value>
   125a2:	e7f1      	b.n	12588 <split_conf_get+0x1c>
    return NULL;
   125a4:	2000      	movs	r0, #0
}
   125a6:	4770      	bx	lr
   125a8:	00023f68 	.word	0x00023f68

000125ac <split_conf_set>:
    if (argc == 1) {
   125ac:	2801      	cmp	r0, #1
   125ae:	d117      	bne.n	125e0 <split_conf_set+0x34>
{
   125b0:	b510      	push	{r4, lr}
   125b2:	b082      	sub	sp, #8
   125b4:	460b      	mov	r3, r1
   125b6:	4614      	mov	r4, r2
        if (!strcmp(argv[0], "status")) {
   125b8:	490c      	ldr	r1, [pc, #48]	; (125ec <split_conf_set+0x40>)
   125ba:	6818      	ldr	r0, [r3, #0]
   125bc:	f7fb fab8 	bl	db30 <strcmp>
   125c0:	b988      	cbnz	r0, 125e6 <split_conf_set+0x3a>
            rc = CONF_VALUE_SET(val, CONF_INT8, split_mode);
   125c2:	2301      	movs	r3, #1
   125c4:	f10d 0207 	add.w	r2, sp, #7
   125c8:	2102      	movs	r1, #2
   125ca:	4620      	mov	r0, r4
   125cc:	f7fc fad1 	bl	eb72 <conf_value_from_str>
            if (rc != 0) {
   125d0:	b108      	cbz	r0, 125d6 <split_conf_set+0x2a>
}
   125d2:	b002      	add	sp, #8
   125d4:	bd10      	pop	{r4, pc}
            rc = split_mode_set(split_mode);
   125d6:	f89d 0007 	ldrb.w	r0, [sp, #7]
   125da:	f7ff ffa3 	bl	12524 <split_mode_set>
            if (rc != 0) {
   125de:	e7f8      	b.n	125d2 <split_conf_set+0x26>
    return -1;
   125e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   125e4:	4770      	bx	lr
    return -1;
   125e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   125ea:	e7f2      	b.n	125d2 <split_conf_set+0x26>
   125ec:	00023f68 	.word	0x00023f68

000125f0 <split_conf_init>:
{
   125f0:	b508      	push	{r3, lr}
    rc = conf_register(&split_conf_handler);
   125f2:	4802      	ldr	r0, [pc, #8]	; (125fc <split_conf_init+0xc>)
   125f4:	f7fc fa78 	bl	eae8 <conf_register>
}
   125f8:	bd08      	pop	{r3, pc}
   125fa:	bf00      	nop
   125fc:	2000075c 	.word	0x2000075c

00012600 <split_write_split>:

int
split_write_split(split_mode_t split_mode)
{
   12600:	b500      	push	{lr}
   12602:	b085      	sub	sp, #20
   12604:	f88d 0007 	strb.w	r0, [sp, #7]
    char str[CONF_STR_FROM_BYTES_LEN(sizeof(split_mode_t))];
    int rc;

    rc = split_mode_set(split_mode);
   12608:	b2c0      	uxtb	r0, r0
   1260a:	f7ff ff8b 	bl	12524 <split_mode_set>
    if (rc != 0) {
   1260e:	b110      	cbz	r0, 12616 <split_write_split+0x16>

    if (!conf_str_from_value(CONF_INT8, &split_mode, str, sizeof(str))) {
        return -1;
    }
    return conf_save_one("split/status", str);
}
   12610:	b005      	add	sp, #20
   12612:	f85d fb04 	ldr.w	pc, [sp], #4
    if (!conf_str_from_value(CONF_INT8, &split_mode, str, sizeof(str))) {
   12616:	2305      	movs	r3, #5
   12618:	aa02      	add	r2, sp, #8
   1261a:	f10d 0107 	add.w	r1, sp, #7
   1261e:	2002      	movs	r0, #2
   12620:	f7fc fb0c 	bl	ec3c <conf_str_from_value>
   12624:	b120      	cbz	r0, 12630 <split_write_split+0x30>
    return conf_save_one("split/status", str);
   12626:	a902      	add	r1, sp, #8
   12628:	4803      	ldr	r0, [pc, #12]	; (12638 <split_write_split+0x38>)
   1262a:	f7fc f9a9 	bl	e980 <conf_save_one>
   1262e:	e7ef      	b.n	12610 <split_write_split+0x10>
        return -1;
   12630:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12634:	e7ec      	b.n	12610 <split_write_split+0x10>
   12636:	bf00      	nop
   12638:	00023f58 	.word	0x00023f58

0001263c <pos>:

static int
pos(char c)
{
    const char *p;
    for (p = base64_chars; *p; p++)
   1263c:	4b06      	ldr	r3, [pc, #24]	; (12658 <pos+0x1c>)
   1263e:	e000      	b.n	12642 <pos+0x6>
   12640:	3301      	adds	r3, #1
   12642:	781a      	ldrb	r2, [r3, #0]
   12644:	b122      	cbz	r2, 12650 <pos+0x14>
        if (*p == c)
   12646:	4282      	cmp	r2, r0
   12648:	d1fa      	bne.n	12640 <pos+0x4>
            return p - base64_chars;
   1264a:	4803      	ldr	r0, [pc, #12]	; (12658 <pos+0x1c>)
   1264c:	1a18      	subs	r0, r3, r0
   1264e:	4770      	bx	lr
    return -1;
   12650:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   12654:	4770      	bx	lr
   12656:	bf00      	nop
   12658:	00023f78 	.word	0x00023f78

0001265c <token_decode>:

#define DECODE_ERROR -1

static unsigned int
token_decode(const char *token)
{
   1265c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1265e:	4607      	mov	r7, r0
    int i;
    unsigned int val = 0;
    int marker = 0;
    if (strlen(token) < 4)
   12660:	f7fb fa72 	bl	db48 <strlen>
   12664:	2803      	cmp	r0, #3
   12666:	d916      	bls.n	12696 <token_decode+0x3a>
    int marker = 0;
   12668:	2600      	movs	r6, #0
    unsigned int val = 0;
   1266a:	4635      	mov	r5, r6
        return DECODE_ERROR;
    for (i = 0; i < 4; i++) {
   1266c:	4634      	mov	r4, r6
   1266e:	e001      	b.n	12674 <token_decode+0x18>
        val *= 64;
        if (token[i] == '=')
            marker++;
   12670:	3601      	adds	r6, #1
    for (i = 0; i < 4; i++) {
   12672:	3401      	adds	r4, #1
   12674:	2c03      	cmp	r4, #3
   12676:	dc09      	bgt.n	1268c <token_decode+0x30>
        val *= 64;
   12678:	01ad      	lsls	r5, r5, #6
        if (token[i] == '=')
   1267a:	5d38      	ldrb	r0, [r7, r4]
   1267c:	283d      	cmp	r0, #61	; 0x3d
   1267e:	d0f7      	beq.n	12670 <token_decode+0x14>
        else if (marker > 0)
   12680:	2e00      	cmp	r6, #0
   12682:	dc0b      	bgt.n	1269c <token_decode+0x40>
            return DECODE_ERROR;
        else
            val += pos(token[i]);
   12684:	f7ff ffda 	bl	1263c <pos>
   12688:	4405      	add	r5, r0
   1268a:	e7f2      	b.n	12672 <token_decode+0x16>
    }
    if (marker > 2)
   1268c:	2e02      	cmp	r6, #2
   1268e:	dc08      	bgt.n	126a2 <token_decode+0x46>
        return DECODE_ERROR;
    return (marker << 24) | val;
   12690:	ea45 6006 	orr.w	r0, r5, r6, lsl #24
}
   12694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return DECODE_ERROR;
   12696:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1269a:	e7fb      	b.n	12694 <token_decode+0x38>
            return DECODE_ERROR;
   1269c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   126a0:	e7f8      	b.n	12694 <token_decode+0x38>
        return DECODE_ERROR;
   126a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   126a6:	e7f5      	b.n	12694 <token_decode+0x38>

000126a8 <base64_encode>:
{
   126a8:	b570      	push	{r4, r5, r6, lr}
   126aa:	4615      	mov	r5, r2
    p = s;
   126ac:	4614      	mov	r4, r2
    last = NULL;
   126ae:	2600      	movs	r6, #0
    i = 0;
   126b0:	4632      	mov	r2, r6
    while (i < size) {
   126b2:	e021      	b.n	126f8 <base64_encode+0x50>
        i++;
   126b4:	1c96      	adds	r6, r2, #2
        c *= 256;
   126b6:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
        if (i < size)
   126ba:	42b1      	cmp	r1, r6
   126bc:	dd01      	ble.n	126c2 <base64_encode+0x1a>
            c += q[i];
   126be:	5d86      	ldrb	r6, [r0, r6]
   126c0:	44b4      	add	ip, r6
        i++;
   126c2:	3203      	adds	r2, #3
        p[0] = base64_chars[(c & 0x00fc0000) >> 18];
   126c4:	f3cc 4e85 	ubfx	lr, ip, #18, #6
   126c8:	4e1b      	ldr	r6, [pc, #108]	; (12738 <base64_encode+0x90>)
   126ca:	f816 e00e 	ldrb.w	lr, [r6, lr]
   126ce:	f884 e000 	strb.w	lr, [r4]
        p[1] = base64_chars[(c & 0x0003f000) >> 12];
   126d2:	f3cc 3e05 	ubfx	lr, ip, #12, #6
   126d6:	f816 e00e 	ldrb.w	lr, [r6, lr]
   126da:	f884 e001 	strb.w	lr, [r4, #1]
        p[2] = base64_chars[(c & 0x00000fc0) >> 6];
   126de:	f3cc 1e85 	ubfx	lr, ip, #6, #6
   126e2:	f816 e00e 	ldrb.w	lr, [r6, lr]
   126e6:	f884 e002 	strb.w	lr, [r4, #2]
        p[3] = base64_chars[(c & 0x0000003f) >> 0];
   126ea:	f00c 0c3f 	and.w	ip, ip, #63	; 0x3f
   126ee:	f816 600c 	ldrb.w	r6, [r6, ip]
   126f2:	70e6      	strb	r6, [r4, #3]
        last = p;
   126f4:	4626      	mov	r6, r4
        p += 4;
   126f6:	3404      	adds	r4, #4
    while (i < size) {
   126f8:	428a      	cmp	r2, r1
   126fa:	da09      	bge.n	12710 <base64_encode+0x68>
        c = q[i++];
   126fc:	1c56      	adds	r6, r2, #1
   126fe:	f810 c002 	ldrb.w	ip, [r0, r2]
        c *= 256;
   12702:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
        if (i < size)
   12706:	42b1      	cmp	r1, r6
   12708:	ddd4      	ble.n	126b4 <base64_encode+0xc>
            c += q[i];
   1270a:	5d86      	ldrb	r6, [r0, r6]
   1270c:	44b4      	add	ip, r6
   1270e:	e7d1      	b.n	126b4 <base64_encode+0xc>
    if (last) {
   12710:	b136      	cbz	r6, 12720 <base64_encode+0x78>
        diff = i - size;
   12712:	1a52      	subs	r2, r2, r1
        if (diff > 0) {
   12714:	2a00      	cmp	r2, #0
   12716:	dd03      	ble.n	12720 <base64_encode+0x78>
            if (should_pad) {
   12718:	b933      	cbnz	r3, 12728 <base64_encode+0x80>
                p = last + (4 - diff);
   1271a:	f1c2 0304 	rsb	r3, r2, #4
   1271e:	18f4      	adds	r4, r6, r3
    *p = 0;
   12720:	2300      	movs	r3, #0
   12722:	7023      	strb	r3, [r4, #0]
}
   12724:	1b60      	subs	r0, r4, r5
   12726:	bd70      	pop	{r4, r5, r6, pc}
                memset(last + (4 - diff), '=', diff);
   12728:	f1c2 0004 	rsb	r0, r2, #4
   1272c:	213d      	movs	r1, #61	; 0x3d
   1272e:	4430      	add	r0, r6
   12730:	f7fb f9d3 	bl	dada <memset>
   12734:	e7f4      	b.n	12720 <base64_encode+0x78>
   12736:	bf00      	nop
   12738:	00023f78 	.word	0x00023f78

0001273c <base64_pad>:
{
   1273c:	b510      	push	{r4, lr}
    remainder = len % 4;
   1273e:	424b      	negs	r3, r1
   12740:	f001 0203 	and.w	r2, r1, #3
   12744:	f003 0303 	and.w	r3, r3, #3
   12748:	bf58      	it	pl
   1274a:	425a      	negpl	r2, r3
    if (remainder == 0) {
   1274c:	f011 0f03 	tst.w	r1, #3
   12750:	d102      	bne.n	12758 <base64_pad+0x1c>
        return (0);
   12752:	2400      	movs	r4, #0
}
   12754:	4620      	mov	r0, r4
   12756:	bd10      	pop	{r4, pc}
    memset(buf, '=', 4 - remainder);
   12758:	f1c2 0404 	rsb	r4, r2, #4
   1275c:	4622      	mov	r2, r4
   1275e:	213d      	movs	r1, #61	; 0x3d
   12760:	f7fb f9bb 	bl	dada <memset>
    return (4 - remainder);
   12764:	e7f6      	b.n	12754 <base64_pad+0x18>
	...

00012768 <base64_decode>:

int
base64_decode(const char *str, void *data)
{
   12768:	b570      	push	{r4, r5, r6, lr}
   1276a:	4604      	mov	r4, r0
   1276c:	460d      	mov	r5, r1
    const char *p;
    unsigned char *q;

    q = data;
   1276e:	460e      	mov	r6, r1
    for (p = str; *p && (*p == '=' || strchr(base64_chars, *p)); p += 4) {
   12770:	e005      	b.n	1277e <base64_decode+0x16>
        unsigned int marker = (val >> 24) & 0xff;
        if (val == DECODE_ERROR)
            return -1;
        *q++ = (val >> 16) & 0xff;
        if (marker < 2)
            *q++ = (val >> 8) & 0xff;
   12772:	0a02      	lsrs	r2, r0, #8
   12774:	1cb3      	adds	r3, r6, #2
   12776:	7072      	strb	r2, [r6, #1]
   12778:	e016      	b.n	127a8 <base64_decode+0x40>
    for (p = str; *p && (*p == '=' || strchr(base64_chars, *p)); p += 4) {
   1277a:	3404      	adds	r4, #4
   1277c:	461e      	mov	r6, r3
   1277e:	7821      	ldrb	r1, [r4, #0]
   12780:	b1b9      	cbz	r1, 127b2 <base64_decode+0x4a>
   12782:	293d      	cmp	r1, #61	; 0x3d
   12784:	d003      	beq.n	1278e <base64_decode+0x26>
   12786:	480d      	ldr	r0, [pc, #52]	; (127bc <base64_decode+0x54>)
   12788:	f009 fe9d 	bl	1c4c6 <strchr>
   1278c:	b188      	cbz	r0, 127b2 <base64_decode+0x4a>
        unsigned int val = token_decode(p);
   1278e:	4620      	mov	r0, r4
   12790:	f7ff ff64 	bl	1265c <token_decode>
        unsigned int marker = (val >> 24) & 0xff;
   12794:	0e01      	lsrs	r1, r0, #24
        if (val == DECODE_ERROR)
   12796:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1279a:	d00c      	beq.n	127b6 <base64_decode+0x4e>
        *q++ = (val >> 16) & 0xff;
   1279c:	0c02      	lsrs	r2, r0, #16
   1279e:	4633      	mov	r3, r6
   127a0:	f803 2b01 	strb.w	r2, [r3], #1
        if (marker < 2)
   127a4:	2901      	cmp	r1, #1
   127a6:	d9e4      	bls.n	12772 <base64_decode+0xa>
        if (marker < 1)
   127a8:	2900      	cmp	r1, #0
   127aa:	d1e6      	bne.n	1277a <base64_decode+0x12>
            *q++ = val & 0xff;
   127ac:	f803 0b01 	strb.w	r0, [r3], #1
   127b0:	e7e3      	b.n	1277a <base64_decode+0x12>
    }
    return q - (unsigned char *) data;
   127b2:	1b70      	subs	r0, r6, r5
}
   127b4:	bd70      	pop	{r4, r5, r6, pc}
            return -1;
   127b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   127ba:	e7fb      	b.n	127b4 <base64_decode+0x4c>
   127bc:	00023f78 	.word	0x00023f78

000127c0 <valid_attr_type>:
 * one-to-one because of signedness of integers
 * and therefore we need a function to do this trickery */
static int
valid_attr_type(CborType ct, CborAttrType at)
{
    switch (at) {
   127c0:	3901      	subs	r1, #1
   127c2:	290a      	cmp	r1, #10
   127c4:	d828      	bhi.n	12818 <valid_attr_type+0x58>
   127c6:	e8df f001 	tbb	[pc, r1]
   127ca:	0606      	.short	0x0606
   127cc:	13110d09 	.word	0x13110d09
   127d0:	271f1b17 	.word	0x271f1b17
   127d4:	23          	.byte	0x23
   127d5:	00          	.byte	0x00
    case CborAttrIntegerType:
    case CborAttrUnsignedIntegerType:
        if (ct == CborIntegerType) {
   127d6:	b308      	cbz	r0, 1281c <valid_attr_type+0x5c>
        }
        break;
    default:
        break;
    }
    return 0;
   127d8:	2000      	movs	r0, #0
   127da:	4770      	bx	lr
        if (ct == CborByteStringType) {
   127dc:	2840      	cmp	r0, #64	; 0x40
   127de:	d01f      	beq.n	12820 <valid_attr_type+0x60>
    return 0;
   127e0:	2000      	movs	r0, #0
   127e2:	4770      	bx	lr
        if (ct == CborTextStringType) {
   127e4:	2860      	cmp	r0, #96	; 0x60
   127e6:	d01d      	beq.n	12824 <valid_attr_type+0x64>
    return 0;
   127e8:	2000      	movs	r0, #0
   127ea:	4770      	bx	lr
        if (ct == CborBooleanType) {
   127ec:	28f5      	cmp	r0, #245	; 0xf5
   127ee:	d01b      	beq.n	12828 <valid_attr_type+0x68>
        if (ct == CborFloatType) {
   127f0:	28fa      	cmp	r0, #250	; 0xfa
   127f2:	d01b      	beq.n	1282c <valid_attr_type+0x6c>
    return 0;
   127f4:	2000      	movs	r0, #0
   127f6:	4770      	bx	lr
        if (ct == CborDoubleType) {
   127f8:	28fb      	cmp	r0, #251	; 0xfb
   127fa:	d019      	beq.n	12830 <valid_attr_type+0x70>
    return 0;
   127fc:	2000      	movs	r0, #0
   127fe:	4770      	bx	lr
        if (ct == CborArrayType) {
   12800:	2880      	cmp	r0, #128	; 0x80
   12802:	d017      	beq.n	12834 <valid_attr_type+0x74>
    return 0;
   12804:	2000      	movs	r0, #0
   12806:	4770      	bx	lr
        if (ct == CborMapType) {
   12808:	28a0      	cmp	r0, #160	; 0xa0
   1280a:	d015      	beq.n	12838 <valid_attr_type+0x78>
    return 0;
   1280c:	2000      	movs	r0, #0
   1280e:	4770      	bx	lr
        if (ct == CborNullType) {
   12810:	28f6      	cmp	r0, #246	; 0xf6
   12812:	d013      	beq.n	1283c <valid_attr_type+0x7c>
    return 0;
   12814:	2000      	movs	r0, #0
   12816:	4770      	bx	lr
    switch (at) {
   12818:	2000      	movs	r0, #0
   1281a:	4770      	bx	lr
            return 1;
   1281c:	2001      	movs	r0, #1
   1281e:	4770      	bx	lr
            return 1;
   12820:	2001      	movs	r0, #1
   12822:	4770      	bx	lr
            return 1;
   12824:	2001      	movs	r0, #1
   12826:	4770      	bx	lr
            return 1;
   12828:	2001      	movs	r0, #1
   1282a:	4770      	bx	lr
            return 1;
   1282c:	2001      	movs	r0, #1
   1282e:	4770      	bx	lr
            return 1;
   12830:	2001      	movs	r0, #1
   12832:	4770      	bx	lr
            return 1;
   12834:	2001      	movs	r0, #1
   12836:	4770      	bx	lr
            return 1;
   12838:	2001      	movs	r0, #1
   1283a:	4770      	bx	lr
            return 1;
   1283c:	2001      	movs	r0, #1
}
   1283e:	4770      	bx	lr

00012840 <cbor_target_address>:
cbor_target_address(const struct cbor_attr_t *cursor,
                    const struct cbor_array_t *parent, int offset)
{
    char *targetaddr = NULL;

    if (parent == NULL || parent->element_type != CborAttrStructObjectType) {
   12840:	460b      	mov	r3, r1
   12842:	b111      	cbz	r1, 1284a <cbor_target_address+0xa>
   12844:	7809      	ldrb	r1, [r1, #0]
   12846:	290a      	cmp	r1, #10
   12848:	d020      	beq.n	1288c <cbor_target_address+0x4c>
        /* ordinary case - use the address in the cursor structure */
        switch (cursor->type) {
   1284a:	7903      	ldrb	r3, [r0, #4]
   1284c:	3b01      	subs	r3, #1
   1284e:	2b06      	cmp	r3, #6
   12850:	d823      	bhi.n	1289a <cbor_target_address+0x5a>
   12852:	e8df f003 	tbb	[pc, r3]
   12856:	0804      	.short	0x0804
   12858:	0c181614 	.word	0x0c181614
   1285c:	10          	.byte	0x10
   1285d:	00          	.byte	0x00
        case CborAttrNullType:
            targetaddr = NULL;
            break;
        case CborAttrIntegerType:
            targetaddr = (char *)&cursor->addr.integer[offset];
   1285e:	6880      	ldr	r0, [r0, #8]
   12860:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
            break;
   12864:	4770      	bx	lr
        case CborAttrUnsignedIntegerType:
            targetaddr = (char *)&cursor->addr.uinteger[offset];
   12866:	6880      	ldr	r0, [r0, #8]
   12868:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
            break;
   1286c:	4770      	bx	lr
#if FLOAT_SUPPORT
        case CborAttrFloatType:
            targetaddr = (char *)&cursor->addr.fval[offset];
   1286e:	6880      	ldr	r0, [r0, #8]
   12870:	eb00 0082 	add.w	r0, r0, r2, lsl #2
            break;
   12874:	4770      	bx	lr
        case CborAttrDoubleType:
            targetaddr = (char *)&cursor->addr.real[offset];
   12876:	6880      	ldr	r0, [r0, #8]
   12878:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
            break;
   1287c:	4770      	bx	lr
#endif
        case CborAttrByteStringType:
            targetaddr = (char *) cursor->addr.bytestring.data;
   1287e:	6880      	ldr	r0, [r0, #8]
            break;
   12880:	4770      	bx	lr
        case CborAttrTextStringType:
            targetaddr = cursor->addr.string;
   12882:	6880      	ldr	r0, [r0, #8]
            break;
   12884:	4770      	bx	lr
        case CborAttrBooleanType:
            targetaddr = (char *)&cursor->addr.boolean[offset];
   12886:	6880      	ldr	r0, [r0, #8]
   12888:	4410      	add	r0, r2
            break;
   1288a:	4770      	bx	lr
            break;
        }
    } else {
        /* tricky case - hacking a member in an array of structures */
        targetaddr =
            parent->arr.objects.base + (offset * parent->arr.objects.stride) +
   1288c:	6899      	ldr	r1, [r3, #8]
   1288e:	68db      	ldr	r3, [r3, #12]
            cursor->addr.offset;
   12890:	6880      	ldr	r0, [r0, #8]
            parent->arr.objects.base + (offset * parent->arr.objects.stride) +
   12892:	fb03 0002 	mla	r0, r3, r2, r0
        targetaddr =
   12896:	4408      	add	r0, r1
   12898:	4770      	bx	lr
        switch (cursor->type) {
   1289a:	2000      	movs	r0, #0
    }
    return targetaddr;
}
   1289c:	4770      	bx	lr
	...

000128a0 <cbor_read_array>:
    return err;
}

int
cbor_read_array(struct CborValue *value, const struct cbor_array_t *arr)
{
   128a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   128a4:	b08b      	sub	sp, #44	; 0x2c
   128a6:	9001      	str	r0, [sp, #4]
   128a8:	460c      	mov	r4, r1
    int off, arrcount;
    size_t len;
    void *lptr;
    char *tp;

    err = cbor_value_enter_container(value, &elem);
   128aa:	a906      	add	r1, sp, #24
   128ac:	f000 ff59 	bl	13762 <cbor_value_enter_container>
    if (err) {
   128b0:	4605      	mov	r5, r0
   128b2:	2800      	cmp	r0, #0
   128b4:	f040 80fd 	bne.w	12ab2 <cbor_read_array+0x212>
        return err;
    }
    arrcount = 0;
    tp = arr->arr.strings.store;
   128b8:	f8d4 8008 	ldr.w	r8, [r4, #8]
    arrcount = 0;
   128bc:	2700      	movs	r7, #0
    for (off = 0; off < arr->maxlen; off++) {
   128be:	463e      	mov	r6, r7
   128c0:	e0be      	b.n	12a40 <cbor_read_array+0x1a0>
        switch (arr->element_type) {
        case CborAttrBooleanType:
            lptr = &arr->arr.booleans.store[off];
   128c2:	6862      	ldr	r2, [r4, #4]
CBOR_INLINE_API bool cbor_value_is_undefined(const CborValue *value)
{ return value->type == CborUndefinedType; }

/* Booleans */
CBOR_INLINE_API bool cbor_value_is_boolean(const CborValue *value)
{ return value->type == CborBooleanType; }
   128c4:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
CBOR_INLINE_API CborError cbor_value_get_boolean(const CborValue *value, bool *result)
{
    assert(cbor_value_is_boolean(value));
   128c8:	2bf5      	cmp	r3, #245	; 0xf5
   128ca:	d106      	bne.n	128da <cbor_read_array+0x3a>
    *result = !!value->extra;
   128cc:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   128d0:	3b00      	subs	r3, #0
   128d2:	bf18      	it	ne
   128d4:	2301      	movne	r3, #1
   128d6:	5593      	strb	r3, [r2, r6]
            err |= cbor_value_get_boolean(&elem, lptr);
            break;
   128d8:	e0a7      	b.n	12a2a <cbor_read_array+0x18a>
    assert(cbor_value_is_boolean(value));
   128da:	2300      	movs	r3, #0
   128dc:	461a      	mov	r2, r3
   128de:	4619      	mov	r1, r3
   128e0:	4618      	mov	r0, r3
   128e2:	f7f6 fb3f 	bl	8f64 <__assert_func>
        case CborAttrIntegerType:
            lptr = &arr->arr.integers.store[off];
   128e6:	f8d4 9004 	ldr.w	r9, [r4, #4]
   128ea:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
   128ee:	eb09 0ac6 	add.w	sl, r9, r6, lsl #3
    return CborNoError;
}

/* Integers */
CBOR_INLINE_API bool cbor_value_is_integer(const CborValue *value)
{ return value->type == CborIntegerType; }
   128f2:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    return CborNoError;
}

CBOR_INLINE_API CborError cbor_value_get_int64(const CborValue *value, int64_t *result)
{
    assert(cbor_value_is_integer(value));
   128f6:	b9c3      	cbnz	r3, 1292a <cbor_read_array+0x8a>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   128f8:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
                _cbor_value_decode_int64_internal(value) : value->extra;
   128fc:	f013 0f01 	tst.w	r3, #1
   12900:	d119      	bne.n	12936 <cbor_read_array+0x96>
   12902:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
   12906:	2100      	movs	r1, #0
    *result = (int64_t) _cbor_value_extract_int64_helper(value);
   12908:	f849 000b 	str.w	r0, [r9, fp]
   1290c:	f8ca 1004 	str.w	r1, [sl, #4]
    if (value->flags & CborIteratorFlag_NegativeInteger)
   12910:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   12914:	f013 0f02 	tst.w	r3, #2
   12918:	f000 8087 	beq.w	12a2a <cbor_read_array+0x18a>
        *result = -*result - 1;
   1291c:	43c0      	mvns	r0, r0
   1291e:	43c9      	mvns	r1, r1
   12920:	f849 000b 	str.w	r0, [r9, fp]
   12924:	f8ca 1004 	str.w	r1, [sl, #4]
            err |= cbor_value_get_int64(&elem, lptr);
            break;
   12928:	e07f      	b.n	12a2a <cbor_read_array+0x18a>
    assert(cbor_value_is_integer(value));
   1292a:	2300      	movs	r3, #0
   1292c:	461a      	mov	r2, r3
   1292e:	4619      	mov	r1, r3
   12930:	4618      	mov	r0, r3
   12932:	f7f6 fb17 	bl	8f64 <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   12936:	a806      	add	r0, sp, #24
   12938:	f000 fec5 	bl	136c6 <_cbor_value_decode_int64_internal>
   1293c:	e7e4      	b.n	12908 <cbor_read_array+0x68>
        case CborAttrUnsignedIntegerType:
            lptr = &arr->arr.uintegers.store[off];
   1293e:	f8d4 9004 	ldr.w	r9, [r4, #4]
   12942:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
   12946:	eb09 0ac6 	add.w	sl, r9, r6, lsl #3
{ return value->type == CborIntegerType; }
   1294a:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   1294e:	b933      	cbnz	r3, 1295e <cbor_read_array+0xbe>
   12950:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   12954:	f013 0f02 	tst.w	r3, #2
   12958:	d010      	beq.n	1297c <cbor_read_array+0xdc>
   1295a:	2300      	movs	r3, #0
   1295c:	e000      	b.n	12960 <cbor_read_array+0xc0>
   1295e:	2300      	movs	r3, #0
    assert(cbor_value_is_unsigned_integer(value));
   12960:	b173      	cbz	r3, 12980 <cbor_read_array+0xe0>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   12962:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
                _cbor_value_decode_int64_internal(value) : value->extra;
   12966:	f013 0f01 	tst.w	r3, #1
   1296a:	d10e      	bne.n	1298a <cbor_read_array+0xea>
   1296c:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
   12970:	2100      	movs	r1, #0
    *result = _cbor_value_extract_int64_helper(value);
   12972:	f849 000b 	str.w	r0, [r9, fp]
   12976:	f8ca 1004 	str.w	r1, [sl, #4]
            err |= cbor_value_get_uint64(&elem, lptr);
            break;
   1297a:	e056      	b.n	12a2a <cbor_read_array+0x18a>
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   1297c:	2301      	movs	r3, #1
   1297e:	e7ef      	b.n	12960 <cbor_read_array+0xc0>
    assert(cbor_value_is_unsigned_integer(value));
   12980:	461a      	mov	r2, r3
   12982:	4619      	mov	r1, r3
   12984:	4618      	mov	r0, r3
   12986:	f7f6 faed 	bl	8f64 <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   1298a:	a806      	add	r0, sp, #24
   1298c:	f000 fe9b 	bl	136c6 <_cbor_value_decode_int64_internal>
   12990:	e7ef      	b.n	12972 <cbor_read_array+0xd2>
#if FLOAT_SUPPORT
        case CborAttrFloatType:
        case CborAttrDoubleType:
            lptr = &arr->arr.reals.store[off];
   12992:	f8d4 9004 	ldr.w	r9, [r4, #4]
   12996:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
   1299a:	eb09 0ac6 	add.w	sl, r9, r6, lsl #3
    memcpy(result, &data, sizeof(*result));
    return CborNoError;
}

CBOR_INLINE_API bool cbor_value_is_double(const CborValue *value)
{ return value->type == CborDoubleType; }
   1299e:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
CBOR_INLINE_API CborError cbor_value_get_double(const CborValue *value, double *result)
{
    assert(cbor_value_is_double(value));
   129a2:	2bfb      	cmp	r3, #251	; 0xfb
   129a4:	d110      	bne.n	129c8 <cbor_read_array+0x128>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
   129a6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   129aa:	f013 0f01 	tst.w	r3, #1
   129ae:	d011      	beq.n	129d4 <cbor_read_array+0x134>
    uint64_t data = _cbor_value_decode_int64_internal(value);
   129b0:	a806      	add	r0, sp, #24
   129b2:	f000 fe88 	bl	136c6 <_cbor_value_decode_int64_internal>
   129b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
    memcpy(result, &data, sizeof(*result));
   129ba:	ab02      	add	r3, sp, #8
   129bc:	cb03      	ldmia	r3!, {r0, r1}
   129be:	f849 000b 	str.w	r0, [r9, fp]
   129c2:	f8ca 1004 	str.w	r1, [sl, #4]
            err |= cbor_value_get_double(&elem, lptr);
            break;
   129c6:	e030      	b.n	12a2a <cbor_read_array+0x18a>
    assert(cbor_value_is_double(value));
   129c8:	2300      	movs	r3, #0
   129ca:	461a      	mov	r2, r3
   129cc:	4619      	mov	r1, r3
   129ce:	4618      	mov	r0, r3
   129d0:	f7f6 fac8 	bl	8f64 <__assert_func>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
   129d4:	2300      	movs	r3, #0
   129d6:	461a      	mov	r2, r3
   129d8:	4619      	mov	r1, r3
   129da:	4618      	mov	r0, r3
   129dc:	f7f6 fac2 	bl	8f64 <__assert_func>
#endif
        case CborAttrTextStringType:
            len = arr->arr.strings.storelen - (tp - arr->arr.strings.store);
   129e0:	68e3      	ldr	r3, [r4, #12]
   129e2:	68a2      	ldr	r2, [r4, #8]
   129e4:	eba8 0202 	sub.w	r2, r8, r2
   129e8:	1a9b      	subs	r3, r3, r2
   129ea:	9305      	str	r3, [sp, #20]
{ return value->type == CborTextStringType; }
   129ec:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    assert(cbor_value_is_text_string(value));
   129f0:	2b60      	cmp	r3, #96	; 0x60
   129f2:	d10d      	bne.n	12a10 <cbor_read_array+0x170>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   129f4:	2300      	movs	r3, #0
   129f6:	aa05      	add	r2, sp, #20
   129f8:	4641      	mov	r1, r8
   129fa:	a806      	add	r0, sp, #24
   129fc:	f000 ff66 	bl	138cc <_cbor_value_copy_string>
            err |= cbor_value_copy_text_string(&elem, tp, &len, NULL);
   12a00:	4305      	orrs	r5, r0
            arr->arr.strings.ptrs[off] = tp;
   12a02:	6863      	ldr	r3, [r4, #4]
   12a04:	f843 8026 	str.w	r8, [r3, r6, lsl #2]
            tp += len + 1;
   12a08:	9b05      	ldr	r3, [sp, #20]
   12a0a:	3301      	adds	r3, #1
   12a0c:	4498      	add	r8, r3
            break;
   12a0e:	e00c      	b.n	12a2a <cbor_read_array+0x18a>
    assert(cbor_value_is_text_string(value));
   12a10:	2300      	movs	r3, #0
   12a12:	461a      	mov	r2, r3
   12a14:	4619      	mov	r1, r3
   12a16:	4618      	mov	r0, r3
   12a18:	f7f6 faa4 	bl	8f64 <__assert_func>
        case CborAttrStructObjectType:
            err |= cbor_internal_read_object(&elem, arr->arr.objects.subtype,
   12a1c:	4633      	mov	r3, r6
   12a1e:	4622      	mov	r2, r4
   12a20:	6861      	ldr	r1, [r4, #4]
   12a22:	a806      	add	r0, sp, #24
   12a24:	f000 f848 	bl	12ab8 <cbor_internal_read_object>
   12a28:	4305      	orrs	r5, r0
            break;
        default:
            err |= CborErrorIllegalType;
            break;
        }
        arrcount++;
   12a2a:	3701      	adds	r7, #1
        if (arr->element_type != CborAttrStructObjectType) {
   12a2c:	7823      	ldrb	r3, [r4, #0]
   12a2e:	2b0a      	cmp	r3, #10
   12a30:	d127      	bne.n	12a82 <cbor_read_array+0x1e2>
{ return value && value->type != CborInvalidType; }
   12a32:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   12a36:	2bff      	cmp	r3, #255	; 0xff
   12a38:	d028      	beq.n	12a8c <cbor_read_array+0x1ec>
   12a3a:	2301      	movs	r3, #1
            err |= cbor_value_advance(&elem);
        }
        if (!cbor_value_is_valid(&elem)) {
   12a3c:	b343      	cbz	r3, 12a90 <cbor_read_array+0x1f0>
    for (off = 0; off < arr->maxlen; off++) {
   12a3e:	3601      	adds	r6, #1
   12a40:	6963      	ldr	r3, [r4, #20]
   12a42:	42b3      	cmp	r3, r6
   12a44:	dd24      	ble.n	12a90 <cbor_read_array+0x1f0>
        switch (arr->element_type) {
   12a46:	7823      	ldrb	r3, [r4, #0]
   12a48:	3b01      	subs	r3, #1
   12a4a:	2b09      	cmp	r3, #9
   12a4c:	d816      	bhi.n	12a7c <cbor_read_array+0x1dc>
   12a4e:	a201      	add	r2, pc, #4	; (adr r2, 12a54 <cbor_read_array+0x1b4>)
   12a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   12a54:	000128e7 	.word	0x000128e7
   12a58:	0001293f 	.word	0x0001293f
   12a5c:	00012a7d 	.word	0x00012a7d
   12a60:	000129e1 	.word	0x000129e1
   12a64:	000128c3 	.word	0x000128c3
   12a68:	00012993 	.word	0x00012993
   12a6c:	00012993 	.word	0x00012993
   12a70:	00012a7d 	.word	0x00012a7d
   12a74:	00012a7d 	.word	0x00012a7d
   12a78:	00012a1d 	.word	0x00012a1d
            err |= CborErrorIllegalType;
   12a7c:	f445 7582 	orr.w	r5, r5, #260	; 0x104
            break;
   12a80:	e7d3      	b.n	12a2a <cbor_read_array+0x18a>
            err |= cbor_value_advance(&elem);
   12a82:	a806      	add	r0, sp, #24
   12a84:	f000 ff7f 	bl	13986 <cbor_value_advance>
   12a88:	4305      	orrs	r5, r0
   12a8a:	e7d2      	b.n	12a32 <cbor_read_array+0x192>
   12a8c:	2300      	movs	r3, #0
   12a8e:	e7d5      	b.n	12a3c <cbor_read_array+0x19c>
            break;
        }
    }
    if (arr->count) {
   12a90:	6923      	ldr	r3, [r4, #16]
   12a92:	b133      	cbz	r3, 12aa2 <cbor_read_array+0x202>
        *arr->count = arrcount;
   12a94:	601f      	str	r7, [r3, #0]
   12a96:	e004      	b.n	12aa2 <cbor_read_array+0x202>
    }
    while (!cbor_value_at_end(&elem)) {
        err |= CborErrorDataTooLarge;
   12a98:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
        cbor_value_advance(&elem);
   12a9c:	a806      	add	r0, sp, #24
   12a9e:	f000 ff72 	bl	13986 <cbor_value_advance>
{ return it->remaining == 0; }
   12aa2:	9b08      	ldr	r3, [sp, #32]
    while (!cbor_value_at_end(&elem)) {
   12aa4:	2b00      	cmp	r3, #0
   12aa6:	d1f7      	bne.n	12a98 <cbor_read_array+0x1f8>
    }
    err |= cbor_value_leave_container(value, &elem);
   12aa8:	a906      	add	r1, sp, #24
   12aaa:	9801      	ldr	r0, [sp, #4]
   12aac:	f000 feee 	bl	1388c <cbor_value_leave_container>
   12ab0:	4328      	orrs	r0, r5
    return err;
}
   12ab2:	b00b      	add	sp, #44	; 0x2c
   12ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00012ab8 <cbor_internal_read_object>:
{
   12ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12abc:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
   12ac0:	9001      	str	r0, [sp, #4]
   12ac2:	9100      	str	r1, [sp, #0]
   12ac4:	4691      	mov	r9, r2
   12ac6:	469a      	mov	sl, r3
    for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   12ac8:	460c      	mov	r4, r1
   12aca:	e004      	b.n	12ad6 <cbor_internal_read_object+0x1e>
                    memcpy(lptr, &cursor->dflt.integer, sizeof(long long int));
   12acc:	6a21      	ldr	r1, [r4, #32]
   12ace:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12ad0:	6001      	str	r1, [r0, #0]
   12ad2:	6043      	str	r3, [r0, #4]
    for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   12ad4:	3430      	adds	r4, #48	; 0x30
   12ad6:	6827      	ldr	r7, [r4, #0]
   12ad8:	b38f      	cbz	r7, 12b3e <cbor_internal_read_object+0x86>
        if (!cursor->nodefault) {
   12ada:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   12ade:	2b00      	cmp	r3, #0
   12ae0:	d1f8      	bne.n	12ad4 <cbor_internal_read_object+0x1c>
            lptr = cbor_target_address(cursor, parent, offset);
   12ae2:	4652      	mov	r2, sl
   12ae4:	4649      	mov	r1, r9
   12ae6:	4620      	mov	r0, r4
   12ae8:	f7ff feaa 	bl	12840 <cbor_target_address>
            if (lptr != NULL) {
   12aec:	2800      	cmp	r0, #0
   12aee:	d0f1      	beq.n	12ad4 <cbor_internal_read_object+0x1c>
                switch (cursor->type) {
   12af0:	7923      	ldrb	r3, [r4, #4]
   12af2:	3b01      	subs	r3, #1
   12af4:	2b06      	cmp	r3, #6
   12af6:	d8ed      	bhi.n	12ad4 <cbor_internal_read_object+0x1c>
   12af8:	a101      	add	r1, pc, #4	; (adr r1, 12b00 <cbor_internal_read_object+0x48>)
   12afa:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   12afe:	bf00      	nop
   12b00:	00012acd 	.word	0x00012acd
   12b04:	00012b1d 	.word	0x00012b1d
   12b08:	00012ad5 	.word	0x00012ad5
   12b0c:	00012ad5 	.word	0x00012ad5
   12b10:	00012b27 	.word	0x00012b27
   12b14:	00012b2f 	.word	0x00012b2f
   12b18:	00012b35 	.word	0x00012b35
                    memcpy(lptr, &cursor->dflt.integer,
   12b1c:	6a21      	ldr	r1, [r4, #32]
   12b1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12b20:	6001      	str	r1, [r0, #0]
   12b22:	6043      	str	r3, [r0, #4]
                    break;
   12b24:	e7d6      	b.n	12ad4 <cbor_internal_read_object+0x1c>
                    memcpy(lptr, &cursor->dflt.boolean, sizeof(bool));
   12b26:	f894 3020 	ldrb.w	r3, [r4, #32]
   12b2a:	7003      	strb	r3, [r0, #0]
                    break;
   12b2c:	e7d2      	b.n	12ad4 <cbor_internal_read_object+0x1c>
                    memcpy(lptr, &cursor->dflt.fval, sizeof(float));
   12b2e:	6a23      	ldr	r3, [r4, #32]
   12b30:	6003      	str	r3, [r0, #0]
                    break;
   12b32:	e7cf      	b.n	12ad4 <cbor_internal_read_object+0x1c>
                    memcpy(lptr, &cursor->dflt.real, sizeof(double));
   12b34:	6a21      	ldr	r1, [r4, #32]
   12b36:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12b38:	6001      	str	r1, [r0, #0]
   12b3a:	6043      	str	r3, [r0, #4]
                    break;
   12b3c:	e7ca      	b.n	12ad4 <cbor_internal_read_object+0x1c>
{ return value->type == CborMapType; }
   12b3e:	9801      	ldr	r0, [sp, #4]
   12b40:	7b83      	ldrb	r3, [r0, #14]
    if (cbor_value_is_map(root_value)) {
   12b42:	2ba0      	cmp	r3, #160	; 0xa0
   12b44:	d005      	beq.n	12b52 <cbor_internal_read_object+0x9a>
        return err;
   12b46:	f44f 7082 	mov.w	r0, #260	; 0x104
}
   12b4a:	f50d 7d0b 	add.w	sp, sp, #556	; 0x22c
   12b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        err |= cbor_value_enter_container(root_value, &cur_value);
   12b52:	a905      	add	r1, sp, #20
   12b54:	f000 fe05 	bl	13762 <cbor_value_enter_container>
   12b58:	4680      	mov	r8, r0
    while (cbor_value_is_valid(&cur_value) && !err) {
   12b5a:	e140      	b.n	12dde <cbor_internal_read_object+0x326>
            if (cbor_value_calculate_string_length(&cur_value, &len) == 0) {
   12b5c:	a904      	add	r1, sp, #16
   12b5e:	a805      	add	r0, sp, #20
   12b60:	f000 ff23 	bl	139aa <cbor_value_calculate_string_length>
   12b64:	b978      	cbnz	r0, 12b86 <cbor_internal_read_object+0xce>
                if (len > MYNEWT_VAL(CBORATTR_MAX_SIZE)) {
   12b66:	9b04      	ldr	r3, [sp, #16]
   12b68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   12b6c:	d820      	bhi.n	12bb0 <cbor_internal_read_object+0xf8>
{ return value->type == CborTextStringType; }
   12b6e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_text_string(value));
   12b72:	2b60      	cmp	r3, #96	; 0x60
   12b74:	d11f      	bne.n	12bb6 <cbor_internal_read_object+0xfe>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   12b76:	2300      	movs	r3, #0
   12b78:	aa04      	add	r2, sp, #16
   12b7a:	a909      	add	r1, sp, #36	; 0x24
   12b7c:	a805      	add	r0, sp, #20
   12b7e:	f000 fea5 	bl	138cc <_cbor_value_copy_string>
                err |= cbor_value_copy_text_string(&cur_value, attrbuf, &len,
   12b82:	ea48 0800 	orr.w	r8, r8, r0
            err |= cbor_value_advance(&cur_value);
   12b86:	a805      	add	r0, sp, #20
   12b88:	f000 fefd 	bl	13986 <cbor_value_advance>
   12b8c:	ea48 0800 	orr.w	r8, r8, r0
{ return value && value->type != CborInvalidType; }
   12b90:	f89d 6022 	ldrb.w	r6, [sp, #34]	; 0x22
   12b94:	2eff      	cmp	r6, #255	; 0xff
   12b96:	d014      	beq.n	12bc2 <cbor_internal_read_object+0x10a>
   12b98:	2301      	movs	r3, #1
            if (cbor_value_is_valid(&cur_value)) {
   12b9a:	2b00      	cmp	r3, #0
   12b9c:	f040 8131 	bne.w	12e02 <cbor_internal_read_object+0x34a>
                err |= CborErrorIllegalType;
   12ba0:	f448 7882 	orr.w	r8, r8, #260	; 0x104
    if (!err) {
   12ba4:	f1b8 0f00 	cmp.w	r8, #0
   12ba8:	f000 8130 	beq.w	12e0c <cbor_internal_read_object+0x354>
    return err;
   12bac:	4640      	mov	r0, r8
   12bae:	e7cc      	b.n	12b4a <cbor_internal_read_object+0x92>
                    err |= CborErrorDataTooLarge;
   12bb0:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
                    break;
   12bb4:	e7f6      	b.n	12ba4 <cbor_internal_read_object+0xec>
    assert(cbor_value_is_text_string(value));
   12bb6:	2300      	movs	r3, #0
   12bb8:	461a      	mov	r2, r3
   12bba:	4619      	mov	r1, r3
   12bbc:	4618      	mov	r0, r3
   12bbe:	f7f6 f9d1 	bl	8f64 <__assert_func>
{ return value && value->type != CborInvalidType; }
   12bc2:	2300      	movs	r3, #0
   12bc4:	e7e9      	b.n	12b9a <cbor_internal_read_object+0xe2>
                    attrbuf[0] == '\0') {
   12bc6:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
                if (cursor->attribute == CBORATTR_ATTR_UNNAMED &&
   12bca:	b963      	cbnz	r3, 12be6 <cbor_internal_read_object+0x12e>
                    best_match = cursor;
   12bcc:	46a3      	mov	fp, r4
        for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   12bce:	3430      	adds	r4, #48	; 0x30
   12bd0:	6825      	ldr	r5, [r4, #0]
   12bd2:	b1a5      	cbz	r5, 12bfe <cbor_internal_read_object+0x146>
            if (valid_attr_type(type, cursor->type)) {
   12bd4:	7921      	ldrb	r1, [r4, #4]
   12bd6:	4630      	mov	r0, r6
   12bd8:	f7ff fdf2 	bl	127c0 <valid_attr_type>
   12bdc:	2800      	cmp	r0, #0
   12bde:	d0f6      	beq.n	12bce <cbor_internal_read_object+0x116>
                if (cursor->attribute == CBORATTR_ATTR_UNNAMED &&
   12be0:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   12be4:	d0ef      	beq.n	12bc6 <cbor_internal_read_object+0x10e>
                } else if (strlen(cursor->attribute) == len &&
   12be6:	4628      	mov	r0, r5
   12be8:	f7fa ffae 	bl	db48 <strlen>
   12bec:	9a04      	ldr	r2, [sp, #16]
   12bee:	4290      	cmp	r0, r2
   12bf0:	d1ed      	bne.n	12bce <cbor_internal_read_object+0x116>
                    !memcmp(cursor->attribute, attrbuf, len)) {
   12bf2:	a909      	add	r1, sp, #36	; 0x24
   12bf4:	4628      	mov	r0, r5
   12bf6:	f7fa ff3f 	bl	da78 <memcmp>
                } else if (strlen(cursor->attribute) == len &&
   12bfa:	2800      	cmp	r0, #0
   12bfc:	d1e7      	bne.n	12bce <cbor_internal_read_object+0x116>
        if (!cursor->attribute && best_match) {
   12bfe:	b1b5      	cbz	r5, 12c2e <cbor_internal_read_object+0x176>
        if (cursor->attribute != NULL) {
   12c00:	6823      	ldr	r3, [r4, #0]
   12c02:	2b00      	cmp	r3, #0
   12c04:	f000 80e8 	beq.w	12dd8 <cbor_internal_read_object+0x320>
            lptr = cbor_target_address(cursor, parent, offset);
   12c08:	4652      	mov	r2, sl
   12c0a:	4649      	mov	r1, r9
   12c0c:	4620      	mov	r0, r4
   12c0e:	f7ff fe17 	bl	12840 <cbor_target_address>
   12c12:	4605      	mov	r5, r0
            switch (cursor->type) {
   12c14:	7923      	ldrb	r3, [r4, #4]
   12c16:	3b01      	subs	r3, #1
   12c18:	2b0a      	cmp	r3, #10
   12c1a:	f200 80db 	bhi.w	12dd4 <cbor_internal_read_object+0x31c>
   12c1e:	e8df f003 	tbb	[pc, r3]
   12c22:	401c      	.short	0x401c
   12c24:	620bb39b 	.word	0x620bb39b
   12c28:	d9d0c87c 	.word	0xd9d0c87c
   12c2c:	db          	.byte	0xdb
   12c2d:	00          	.byte	0x00
        if (!cursor->attribute && best_match) {
   12c2e:	f1bb 0f00 	cmp.w	fp, #0
   12c32:	d0e5      	beq.n	12c00 <cbor_internal_read_object+0x148>
            cursor = best_match;
   12c34:	465c      	mov	r4, fp
   12c36:	e7e3      	b.n	12c00 <cbor_internal_read_object+0x148>
{ return value->type == CborBooleanType; }
   12c38:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_boolean(value));
   12c3c:	2bf5      	cmp	r3, #245	; 0xf5
   12c3e:	d106      	bne.n	12c4e <cbor_internal_read_object+0x196>
    *result = !!value->extra;
   12c40:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   12c44:	3b00      	subs	r3, #0
   12c46:	bf18      	it	ne
   12c48:	2301      	movne	r3, #1
   12c4a:	7003      	strb	r3, [r0, #0]
                break;
   12c4c:	e0c4      	b.n	12dd8 <cbor_internal_read_object+0x320>
    assert(cbor_value_is_boolean(value));
   12c4e:	2300      	movs	r3, #0
   12c50:	461a      	mov	r2, r3
   12c52:	4619      	mov	r1, r3
   12c54:	4618      	mov	r0, r3
   12c56:	f7f6 f985 	bl	8f64 <__assert_func>
{ return value->type == CborIntegerType; }
   12c5a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_integer(value));
   12c5e:	b9a3      	cbnz	r3, 12c8a <cbor_internal_read_object+0x1d2>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   12c60:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
                _cbor_value_decode_int64_internal(value) : value->extra;
   12c64:	f013 0f01 	tst.w	r3, #1
   12c68:	d115      	bne.n	12c96 <cbor_internal_read_object+0x1de>
   12c6a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   12c6e:	2300      	movs	r3, #0
    *result = (int64_t) _cbor_value_extract_int64_helper(value);
   12c70:	602a      	str	r2, [r5, #0]
   12c72:	606b      	str	r3, [r5, #4]
    if (value->flags & CborIteratorFlag_NegativeInteger)
   12c74:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
   12c78:	f011 0f02 	tst.w	r1, #2
   12c7c:	f000 80ac 	beq.w	12dd8 <cbor_internal_read_object+0x320>
        *result = -*result - 1;
   12c80:	43d2      	mvns	r2, r2
   12c82:	43db      	mvns	r3, r3
   12c84:	602a      	str	r2, [r5, #0]
   12c86:	606b      	str	r3, [r5, #4]
                break;
   12c88:	e0a6      	b.n	12dd8 <cbor_internal_read_object+0x320>
    assert(cbor_value_is_integer(value));
   12c8a:	2300      	movs	r3, #0
   12c8c:	461a      	mov	r2, r3
   12c8e:	4619      	mov	r1, r3
   12c90:	4618      	mov	r0, r3
   12c92:	f7f6 f967 	bl	8f64 <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   12c96:	a805      	add	r0, sp, #20
   12c98:	f000 fd15 	bl	136c6 <_cbor_value_decode_int64_internal>
   12c9c:	4602      	mov	r2, r0
   12c9e:	460b      	mov	r3, r1
   12ca0:	e7e6      	b.n	12c70 <cbor_internal_read_object+0x1b8>
{ return value->type == CborIntegerType; }
   12ca2:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   12ca6:	b933      	cbnz	r3, 12cb6 <cbor_internal_read_object+0x1fe>
   12ca8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   12cac:	f013 0f02 	tst.w	r3, #2
   12cb0:	d00e      	beq.n	12cd0 <cbor_internal_read_object+0x218>
   12cb2:	2300      	movs	r3, #0
   12cb4:	e000      	b.n	12cb8 <cbor_internal_read_object+0x200>
   12cb6:	2300      	movs	r3, #0
    assert(cbor_value_is_unsigned_integer(value));
   12cb8:	b163      	cbz	r3, 12cd4 <cbor_internal_read_object+0x21c>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   12cba:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
                _cbor_value_decode_int64_internal(value) : value->extra;
   12cbe:	f013 0f01 	tst.w	r3, #1
   12cc2:	d10c      	bne.n	12cde <cbor_internal_read_object+0x226>
   12cc4:	f8bd 0020 	ldrh.w	r0, [sp, #32]
   12cc8:	2100      	movs	r1, #0
    *result = _cbor_value_extract_int64_helper(value);
   12cca:	6028      	str	r0, [r5, #0]
   12ccc:	6069      	str	r1, [r5, #4]
                break;
   12cce:	e083      	b.n	12dd8 <cbor_internal_read_object+0x320>
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   12cd0:	2301      	movs	r3, #1
   12cd2:	e7f1      	b.n	12cb8 <cbor_internal_read_object+0x200>
    assert(cbor_value_is_unsigned_integer(value));
   12cd4:	461a      	mov	r2, r3
   12cd6:	4619      	mov	r1, r3
   12cd8:	4618      	mov	r0, r3
   12cda:	f7f6 f943 	bl	8f64 <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   12cde:	a805      	add	r0, sp, #20
   12ce0:	f000 fcf1 	bl	136c6 <_cbor_value_decode_int64_internal>
   12ce4:	e7f1      	b.n	12cca <cbor_internal_read_object+0x212>
{ return value->type == CborFloatType; }
   12ce6:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_float(value));
   12cea:	2bfa      	cmp	r3, #250	; 0xfa
   12cec:	d109      	bne.n	12d02 <cbor_internal_read_object+0x24a>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
   12cee:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   12cf2:	f013 0f01 	tst.w	r3, #1
   12cf6:	d00a      	beq.n	12d0e <cbor_internal_read_object+0x256>
    uint32_t data = (uint32_t)_cbor_value_decode_int64_internal(value);
   12cf8:	a805      	add	r0, sp, #20
   12cfa:	f000 fce4 	bl	136c6 <_cbor_value_decode_int64_internal>
    memcpy(result, &data, sizeof(*result));
   12cfe:	6028      	str	r0, [r5, #0]
                break;
   12d00:	e06a      	b.n	12dd8 <cbor_internal_read_object+0x320>
    assert(cbor_value_is_float(value));
   12d02:	2300      	movs	r3, #0
   12d04:	461a      	mov	r2, r3
   12d06:	4619      	mov	r1, r3
   12d08:	4618      	mov	r0, r3
   12d0a:	f7f6 f92b 	bl	8f64 <__assert_func>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
   12d0e:	2300      	movs	r3, #0
   12d10:	461a      	mov	r2, r3
   12d12:	4619      	mov	r1, r3
   12d14:	4618      	mov	r0, r3
   12d16:	f7f6 f925 	bl	8f64 <__assert_func>
{ return value->type == CborDoubleType; }
   12d1a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_double(value));
   12d1e:	2bfb      	cmp	r3, #251	; 0xfb
   12d20:	d10e      	bne.n	12d40 <cbor_internal_read_object+0x288>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
   12d22:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   12d26:	f013 0f01 	tst.w	r3, #1
   12d2a:	d00f      	beq.n	12d4c <cbor_internal_read_object+0x294>
    uint64_t data = _cbor_value_decode_int64_internal(value);
   12d2c:	a805      	add	r0, sp, #20
   12d2e:	f000 fcca 	bl	136c6 <_cbor_value_decode_int64_internal>
   12d32:	e9cd 0102 	strd	r0, r1, [sp, #8]
    memcpy(result, &data, sizeof(*result));
   12d36:	ab02      	add	r3, sp, #8
   12d38:	cb03      	ldmia	r3!, {r0, r1}
   12d3a:	6028      	str	r0, [r5, #0]
   12d3c:	6069      	str	r1, [r5, #4]
                break;
   12d3e:	e04b      	b.n	12dd8 <cbor_internal_read_object+0x320>
    assert(cbor_value_is_double(value));
   12d40:	2300      	movs	r3, #0
   12d42:	461a      	mov	r2, r3
   12d44:	4619      	mov	r1, r3
   12d46:	4618      	mov	r0, r3
   12d48:	f7f6 f90c 	bl	8f64 <__assert_func>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
   12d4c:	2300      	movs	r3, #0
   12d4e:	461a      	mov	r2, r3
   12d50:	4619      	mov	r1, r3
   12d52:	4618      	mov	r0, r3
   12d54:	f7f6 f906 	bl	8f64 <__assert_func>
                size_t len = cursor->len;
   12d58:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12d5a:	9302      	str	r3, [sp, #8]
{ return value->type == CborByteStringType; }
   12d5c:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_byte_string(value));
   12d60:	2b40      	cmp	r3, #64	; 0x40
   12d62:	d10b      	bne.n	12d7c <cbor_internal_read_object+0x2c4>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   12d64:	2300      	movs	r3, #0
   12d66:	aa02      	add	r2, sp, #8
   12d68:	4601      	mov	r1, r0
   12d6a:	a805      	add	r0, sp, #20
   12d6c:	f000 fdae 	bl	138cc <_cbor_value_copy_string>
                err |= cbor_value_copy_byte_string(&cur_value, lptr,
   12d70:	ea48 0800 	orr.w	r8, r8, r0
                *cursor->addr.bytestring.len = len;
   12d74:	68e3      	ldr	r3, [r4, #12]
   12d76:	9a02      	ldr	r2, [sp, #8]
   12d78:	601a      	str	r2, [r3, #0]
                break;
   12d7a:	e02d      	b.n	12dd8 <cbor_internal_read_object+0x320>
    assert(cbor_value_is_byte_string(value));
   12d7c:	2300      	movs	r3, #0
   12d7e:	461a      	mov	r2, r3
   12d80:	4619      	mov	r1, r3
   12d82:	4618      	mov	r0, r3
   12d84:	f7f6 f8ee 	bl	8f64 <__assert_func>
                size_t len = cursor->len;
   12d88:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12d8a:	9302      	str	r3, [sp, #8]
{ return value->type == CborTextStringType; }
   12d8c:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_text_string(value));
   12d90:	2b60      	cmp	r3, #96	; 0x60
   12d92:	d108      	bne.n	12da6 <cbor_internal_read_object+0x2ee>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   12d94:	2300      	movs	r3, #0
   12d96:	aa02      	add	r2, sp, #8
   12d98:	4601      	mov	r1, r0
   12d9a:	a805      	add	r0, sp, #20
   12d9c:	f000 fd96 	bl	138cc <_cbor_value_copy_string>
                err |= cbor_value_copy_text_string(&cur_value, lptr,
   12da0:	ea48 0800 	orr.w	r8, r8, r0
                break;
   12da4:	e018      	b.n	12dd8 <cbor_internal_read_object+0x320>
    assert(cbor_value_is_text_string(value));
   12da6:	2300      	movs	r3, #0
   12da8:	461a      	mov	r2, r3
   12daa:	4619      	mov	r1, r3
   12dac:	4618      	mov	r0, r3
   12dae:	f7f6 f8d9 	bl	8f64 <__assert_func>
                err |= cbor_read_array(&cur_value, &cursor->addr.array);
   12db2:	f104 0108 	add.w	r1, r4, #8
   12db6:	a805      	add	r0, sp, #20
   12db8:	f7ff fd72 	bl	128a0 <cbor_read_array>
   12dbc:	ea48 0800 	orr.w	r8, r8, r0
                continue;
   12dc0:	e00d      	b.n	12dde <cbor_internal_read_object+0x326>
                err |= cbor_internal_read_object(&cur_value, cursor->addr.obj,
   12dc2:	2300      	movs	r3, #0
   12dc4:	461a      	mov	r2, r3
   12dc6:	68a1      	ldr	r1, [r4, #8]
   12dc8:	a805      	add	r0, sp, #20
   12dca:	f7ff fe75 	bl	12ab8 <cbor_internal_read_object>
   12dce:	ea48 0800 	orr.w	r8, r8, r0
                continue;
   12dd2:	e004      	b.n	12dde <cbor_internal_read_object+0x326>
                err |= CborErrorIllegalType;
   12dd4:	f448 7882 	orr.w	r8, r8, #260	; 0x104
        cbor_value_advance(&cur_value);
   12dd8:	a805      	add	r0, sp, #20
   12dda:	f000 fdd4 	bl	13986 <cbor_value_advance>
{ return value && value->type != CborInvalidType; }
   12dde:	f89d 6022 	ldrb.w	r6, [sp, #34]	; 0x22
   12de2:	2eff      	cmp	r6, #255	; 0xff
   12de4:	d010      	beq.n	12e08 <cbor_internal_read_object+0x350>
   12de6:	2301      	movs	r3, #1
    while (cbor_value_is_valid(&cur_value) && !err) {
   12de8:	2b00      	cmp	r3, #0
   12dea:	f43f aedb 	beq.w	12ba4 <cbor_internal_read_object+0xec>
   12dee:	f1b8 0f00 	cmp.w	r8, #0
   12df2:	f47f aed7 	bne.w	12ba4 <cbor_internal_read_object+0xec>
        if (cbor_value_is_text_string(&cur_value)) {
   12df6:	2e60      	cmp	r6, #96	; 0x60
   12df8:	f43f aeb0 	beq.w	12b5c <cbor_internal_read_object+0xa4>
            attrbuf[0] = '\0';
   12dfc:	2300      	movs	r3, #0
   12dfe:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        best_match = NULL;
   12e02:	46bb      	mov	fp, r7
        for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   12e04:	9c00      	ldr	r4, [sp, #0]
   12e06:	e6e3      	b.n	12bd0 <cbor_internal_read_object+0x118>
   12e08:	2300      	movs	r3, #0
   12e0a:	e7ed      	b.n	12de8 <cbor_internal_read_object+0x330>
        err |= cbor_value_leave_container(root_value, &cur_value);
   12e0c:	a905      	add	r1, sp, #20
   12e0e:	9801      	ldr	r0, [sp, #4]
   12e10:	f000 fd3c 	bl	1388c <cbor_value_leave_container>
   12e14:	ea48 0800 	orr.w	r8, r8, r0
   12e18:	e6c8      	b.n	12bac <cbor_internal_read_object+0xf4>
   12e1a:	bf00      	nop

00012e1c <cbor_read_object>:

int
cbor_read_object(struct CborValue *value, const struct cbor_attr_t *attrs)
{
   12e1c:	b508      	push	{r3, lr}
    int st;

    st = cbor_internal_read_object(value, attrs, NULL, 0);
   12e1e:	2300      	movs	r3, #0
   12e20:	461a      	mov	r2, r3
   12e22:	f7ff fe49 	bl	12ab8 <cbor_internal_read_object>
    return st;
}
   12e26:	bd08      	pop	{r3, pc}

00012e28 <cbor_mbuf_reader_cpy>:
}

static uintptr_t
cbor_mbuf_reader_cpy(struct cbor_decoder_reader *d, char *dst, int offset,
                     size_t len)
{
   12e28:	b508      	push	{r3, lr}
   12e2a:	4694      	mov	ip, r2
   12e2c:	461a      	mov	r2, r3
    int rc;
    struct cbor_mbuf_reader *cb = (struct cbor_mbuf_reader *) d;

    rc = os_mbuf_copydata(cb->m, offset + cb->init_off, len, dst);
   12e2e:	460b      	mov	r3, r1
   12e30:	69c1      	ldr	r1, [r0, #28]
   12e32:	4461      	add	r1, ip
   12e34:	6a00      	ldr	r0, [r0, #32]
   12e36:	f7f7 fc6e 	bl	a716 <os_mbuf_copydata>
    if (rc == 0) {
   12e3a:	b108      	cbz	r0, 12e40 <cbor_mbuf_reader_cpy+0x18>
        return true;
    }
    return false;
   12e3c:	2000      	movs	r0, #0
}
   12e3e:	bd08      	pop	{r3, pc}
        return true;
   12e40:	2001      	movs	r0, #1
   12e42:	e7fc      	b.n	12e3e <cbor_mbuf_reader_cpy+0x16>

00012e44 <cbor_mbuf_reader_get8>:
{
   12e44:	b510      	push	{r4, lr}
   12e46:	b082      	sub	sp, #8
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   12e48:	f10d 0307 	add.w	r3, sp, #7
   12e4c:	2201      	movs	r2, #1
   12e4e:	69c4      	ldr	r4, [r0, #28]
   12e50:	4421      	add	r1, r4
   12e52:	6a00      	ldr	r0, [r0, #32]
   12e54:	f7f7 fc5f 	bl	a716 <os_mbuf_copydata>
}
   12e58:	f89d 0007 	ldrb.w	r0, [sp, #7]
   12e5c:	b002      	add	sp, #8
   12e5e:	bd10      	pop	{r4, pc}

00012e60 <cbor_mbuf_reader_cmp>:
{
   12e60:	b508      	push	{r3, lr}
   12e62:	4694      	mov	ip, r2
    return os_mbuf_cmpf(cb->m, offset + cb->init_off, buf, len) == 0;
   12e64:	460a      	mov	r2, r1
   12e66:	69c1      	ldr	r1, [r0, #28]
   12e68:	4461      	add	r1, ip
   12e6a:	6a00      	ldr	r0, [r0, #32]
   12e6c:	f7f7 fcd7 	bl	a81e <os_mbuf_cmpf>
}
   12e70:	fab0 f080 	clz	r0, r0
   12e74:	0940      	lsrs	r0, r0, #5
   12e76:	bd08      	pop	{r3, pc}

00012e78 <cbor_mbuf_reader_get64>:
{
   12e78:	b510      	push	{r4, lr}
   12e7a:	b082      	sub	sp, #8
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   12e7c:	466b      	mov	r3, sp
   12e7e:	2208      	movs	r2, #8
   12e80:	69c4      	ldr	r4, [r0, #28]
   12e82:	4421      	add	r1, r4
   12e84:	6a00      	ldr	r0, [r0, #32]
   12e86:	f7f7 fc46 	bl	a716 <os_mbuf_copydata>
}
   12e8a:	9801      	ldr	r0, [sp, #4]
   12e8c:	ba00      	rev	r0, r0
   12e8e:	9900      	ldr	r1, [sp, #0]
   12e90:	ba09      	rev	r1, r1
   12e92:	b002      	add	sp, #8
   12e94:	bd10      	pop	{r4, pc}

00012e96 <cbor_mbuf_reader_get32>:
{
   12e96:	b510      	push	{r4, lr}
   12e98:	b082      	sub	sp, #8
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   12e9a:	ab01      	add	r3, sp, #4
   12e9c:	2204      	movs	r2, #4
   12e9e:	69c4      	ldr	r4, [r0, #28]
   12ea0:	4421      	add	r1, r4
   12ea2:	6a00      	ldr	r0, [r0, #32]
   12ea4:	f7f7 fc37 	bl	a716 <os_mbuf_copydata>
}
   12ea8:	9801      	ldr	r0, [sp, #4]
   12eaa:	ba00      	rev	r0, r0
   12eac:	b002      	add	sp, #8
   12eae:	bd10      	pop	{r4, pc}

00012eb0 <cbor_mbuf_reader_get16>:
{
   12eb0:	b510      	push	{r4, lr}
   12eb2:	b082      	sub	sp, #8
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   12eb4:	f10d 0306 	add.w	r3, sp, #6
   12eb8:	2202      	movs	r2, #2
   12eba:	69c4      	ldr	r4, [r0, #28]
   12ebc:	4421      	add	r1, r4
   12ebe:	6a00      	ldr	r0, [r0, #32]
   12ec0:	f7f7 fc29 	bl	a716 <os_mbuf_copydata>
    return cbor_ntohs(val);
   12ec4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   12ec8:	ba40      	rev16	r0, r0
}
   12eca:	b280      	uxth	r0, r0
   12ecc:	b002      	add	sp, #8
   12ece:	bd10      	pop	{r4, pc}

00012ed0 <cbor_mbuf_reader_init>:

void
cbor_mbuf_reader_init(struct cbor_mbuf_reader *cb, struct os_mbuf *m,
                      int initial_offset)
{
   12ed0:	b508      	push	{r3, lr}
    struct os_mbuf_pkthdr *hdr;

    cb->r.get8 = &cbor_mbuf_reader_get8;
   12ed2:	4b0d      	ldr	r3, [pc, #52]	; (12f08 <cbor_mbuf_reader_init+0x38>)
   12ed4:	6003      	str	r3, [r0, #0]
    cb->r.get16 = &cbor_mbuf_reader_get16;
   12ed6:	4b0d      	ldr	r3, [pc, #52]	; (12f0c <cbor_mbuf_reader_init+0x3c>)
   12ed8:	6043      	str	r3, [r0, #4]
    cb->r.get32 = &cbor_mbuf_reader_get32;
   12eda:	4b0d      	ldr	r3, [pc, #52]	; (12f10 <cbor_mbuf_reader_init+0x40>)
   12edc:	6083      	str	r3, [r0, #8]
    cb->r.get64 = &cbor_mbuf_reader_get64;
   12ede:	4b0d      	ldr	r3, [pc, #52]	; (12f14 <cbor_mbuf_reader_init+0x44>)
   12ee0:	60c3      	str	r3, [r0, #12]
    cb->r.cmp = &cbor_mbuf_reader_cmp;
   12ee2:	4b0d      	ldr	r3, [pc, #52]	; (12f18 <cbor_mbuf_reader_init+0x48>)
   12ee4:	6103      	str	r3, [r0, #16]
    cb->r.cpy = &cbor_mbuf_reader_cpy;
   12ee6:	4b0d      	ldr	r3, [pc, #52]	; (12f1c <cbor_mbuf_reader_init+0x4c>)
   12ee8:	6143      	str	r3, [r0, #20]

    assert(OS_MBUF_IS_PKTHDR(m));
   12eea:	794b      	ldrb	r3, [r1, #5]
   12eec:	2b07      	cmp	r3, #7
   12eee:	d905      	bls.n	12efc <cbor_mbuf_reader_init+0x2c>
    hdr = OS_MBUF_PKTHDR(m);
    cb->m = m;
   12ef0:	6201      	str	r1, [r0, #32]
    cb->init_off = initial_offset;
   12ef2:	61c2      	str	r2, [r0, #28]
    cb->r.message_size = hdr->omp_len - initial_offset;
   12ef4:	8a0b      	ldrh	r3, [r1, #16]
   12ef6:	1a9a      	subs	r2, r3, r2
   12ef8:	6182      	str	r2, [r0, #24]
}
   12efa:	bd08      	pop	{r3, pc}
    assert(OS_MBUF_IS_PKTHDR(m));
   12efc:	2300      	movs	r3, #0
   12efe:	461a      	mov	r2, r3
   12f00:	4619      	mov	r1, r3
   12f02:	4618      	mov	r0, r3
   12f04:	f7f6 f82e 	bl	8f64 <__assert_func>
   12f08:	00012e45 	.word	0x00012e45
   12f0c:	00012eb1 	.word	0x00012eb1
   12f10:	00012e97 	.word	0x00012e97
   12f14:	00012e79 	.word	0x00012e79
   12f18:	00012e61 	.word	0x00012e61
   12f1c:	00012e29 	.word	0x00012e29

00012f20 <cbor_mbuf_writer>:
#include <tinycbor/cbor.h>
#include <tinycbor/cbor_mbuf_writer.h>

int
cbor_mbuf_writer(struct cbor_encoder_writer *arg, const char *data, int len)
{
   12f20:	b538      	push	{r3, r4, r5, lr}
   12f22:	4604      	mov	r4, r0
   12f24:	4615      	mov	r5, r2
    int rc;
    struct cbor_mbuf_writer *cb = (struct cbor_mbuf_writer *) arg;

    rc = os_mbuf_append(cb->m, data, len);
   12f26:	b292      	uxth	r2, r2
   12f28:	6880      	ldr	r0, [r0, #8]
   12f2a:	f7f7 fb8e 	bl	a64a <os_mbuf_append>
    if (rc) {
   12f2e:	b918      	cbnz	r0, 12f38 <cbor_mbuf_writer+0x18>
        return CborErrorOutOfMemory;
    }
    cb->enc.bytes_written += len;
   12f30:	6862      	ldr	r2, [r4, #4]
   12f32:	442a      	add	r2, r5
   12f34:	6062      	str	r2, [r4, #4]
    return CborNoError;
}
   12f36:	bd38      	pop	{r3, r4, r5, pc}
        return CborErrorOutOfMemory;
   12f38:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   12f3c:	e7fb      	b.n	12f36 <cbor_mbuf_writer+0x16>
	...

00012f40 <cbor_mbuf_writer_init>:


void
cbor_mbuf_writer_init(struct cbor_mbuf_writer *cb, struct os_mbuf *m)
{
    cb->m = m;
   12f40:	6081      	str	r1, [r0, #8]
    cb->enc.bytes_written = 0;
   12f42:	2300      	movs	r3, #0
   12f44:	6043      	str	r3, [r0, #4]
    cb->enc.write = &cbor_mbuf_writer;
   12f46:	4b01      	ldr	r3, [pc, #4]	; (12f4c <cbor_mbuf_writer_init+0xc>)
   12f48:	6003      	str	r3, [r0, #0]
}
   12f4a:	4770      	bx	lr
   12f4c:	00012f21 	.word	0x00012f21

00012f50 <create_container>:

#ifdef __GNUC__
__attribute__((noinline))
#endif
static CborError create_container(CborEncoder *encoder, CborEncoder *container, size_t length, uint8_t shiftedMajorType)
{
   12f50:	b510      	push	{r4, lr}
   12f52:	b084      	sub	sp, #16
   12f54:	468c      	mov	ip, r1
    CborError err;
    container->writer = encoder->writer;
   12f56:	6801      	ldr	r1, [r0, #0]
   12f58:	f8cc 1000 	str.w	r1, [ip]
    ++encoder->added;
   12f5c:	6881      	ldr	r1, [r0, #8]
   12f5e:	3101      	adds	r1, #1
   12f60:	6081      	str	r1, [r0, #8]
    container->added = 0;
   12f62:	2100      	movs	r1, #0
   12f64:	f8cc 1008 	str.w	r1, [ip, #8]

    cbor_static_assert(((MapType << MajorTypeShift) & CborIteratorFlag_ContainerIsMap) == CborIteratorFlag_ContainerIsMap);
    cbor_static_assert(((ArrayType << MajorTypeShift) & CborIteratorFlag_ContainerIsMap) == 0);
    container->flags = shiftedMajorType & CborIteratorFlag_ContainerIsMap;
   12f68:	f003 0120 	and.w	r1, r3, #32
   12f6c:	f8cc 100c 	str.w	r1, [ip, #12]

    if (length == CborIndefiniteLength) {
   12f70:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   12f74:	d10f      	bne.n	12f96 <create_container+0x46>
        container->flags |= CborIteratorFlag_UnknownLength;
   12f76:	f041 0104 	orr.w	r1, r1, #4
   12f7a:	f8cc 100c 	str.w	r1, [ip, #12]
        err = append_byte_to_buffer(container, shiftedMajorType + IndefiniteLength);
   12f7e:	331f      	adds	r3, #31
   12f80:	f88d 3000 	strb.w	r3, [sp]
    return encoder->writer->write(encoder->writer, data, len);
   12f84:	f8dc 0000 	ldr.w	r0, [ip]
   12f88:	6803      	ldr	r3, [r0, #0]
   12f8a:	2201      	movs	r2, #1
   12f8c:	4669      	mov	r1, sp
   12f8e:	4798      	blx	r3
    }
    if (err && !isOomError(err))
        return err;

    return CborNoError;
}
   12f90:	2000      	movs	r0, #0
   12f92:	b004      	add	sp, #16
   12f94:	bd10      	pop	{r4, pc}
        err = encode_number_no_update(container, length, shiftedMajorType);
   12f96:	2100      	movs	r1, #0
    v = cbor_htonll(v);
   12f98:	ba10      	rev	r0, r2
    memcpy(where, &v, sizeof(v));
   12f9a:	9102      	str	r1, [sp, #8]
   12f9c:	9003      	str	r0, [sp, #12]
    if (ui < Value8Bit) {
   12f9e:	2a18      	cmp	r2, #24
   12fa0:	f171 0400 	sbcs.w	r4, r1, #0
   12fa4:	d20c      	bcs.n	12fc0 <create_container+0x70>
        *bufstart += shiftedMajorType;
   12fa6:	eb03 6310 	add.w	r3, r3, r0, lsr #24
   12faa:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8_t *bufstart = bufend - 1;
   12fae:	f10d 010f 	add.w	r1, sp, #15
    return encoder->writer->write(encoder->writer, data, len);
   12fb2:	f8dc 0000 	ldr.w	r0, [ip]
   12fb6:	6803      	ldr	r3, [r0, #0]
   12fb8:	aa04      	add	r2, sp, #16
   12fba:	1a52      	subs	r2, r2, r1
   12fbc:	4798      	blx	r3
    return append_to_buffer(encoder, bufstart, bufend - bufstart);
   12fbe:	e7e7      	b.n	12f90 <create_container+0x40>
        if (ui > 0xffU)
   12fc0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   12fc4:	f171 0000 	sbcs.w	r0, r1, #0
   12fc8:	d210      	bcs.n	12fec <create_container+0x9c>
        unsigned more = 0;
   12fca:	2000      	movs	r0, #0
        if (ui > 0xffffU)
   12fcc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   12fd0:	f171 0200 	sbcs.w	r2, r1, #0
   12fd4:	d300      	bcc.n	12fd8 <create_container+0x88>
            ++more;
   12fd6:	3001      	adds	r0, #1
        bufstart -= (size_t)1 << more;
   12fd8:	2101      	movs	r1, #1
   12fda:	fa01 f200 	lsl.w	r2, r1, r0
   12fde:	f10d 010f 	add.w	r1, sp, #15
   12fe2:	1a89      	subs	r1, r1, r2
        *bufstart = shiftedMajorType + Value8Bit + more;
   12fe4:	4403      	add	r3, r0
   12fe6:	3318      	adds	r3, #24
   12fe8:	700b      	strb	r3, [r1, #0]
   12fea:	e7e2      	b.n	12fb2 <create_container+0x62>
            ++more;
   12fec:	2001      	movs	r0, #1
   12fee:	e7ed      	b.n	12fcc <create_container+0x7c>

00012ff0 <encode_string>:
{
   12ff0:	b570      	push	{r4, r5, r6, lr}
   12ff2:	b084      	sub	sp, #16
   12ff4:	4605      	mov	r5, r0
   12ff6:	460c      	mov	r4, r1
   12ff8:	461e      	mov	r6, r3
    CborError err = encode_number(encoder, length, shiftedMajorType);
   12ffa:	2300      	movs	r3, #0
    ++encoder->added;
   12ffc:	6881      	ldr	r1, [r0, #8]
   12ffe:	3101      	adds	r1, #1
   13000:	6081      	str	r1, [r0, #8]
    v = cbor_htonll(v);
   13002:	ba21      	rev	r1, r4
    memcpy(where, &v, sizeof(v));
   13004:	9302      	str	r3, [sp, #8]
   13006:	9103      	str	r1, [sp, #12]
    if (ui < Value8Bit) {
   13008:	2c18      	cmp	r4, #24
   1300a:	f173 0000 	sbcs.w	r0, r3, #0
   1300e:	d211      	bcs.n	13034 <encode_string+0x44>
        *bufstart += shiftedMajorType;
   13010:	eb02 6211 	add.w	r2, r2, r1, lsr #24
   13014:	f88d 200f 	strb.w	r2, [sp, #15]
    uint8_t *bufstart = bufend - 1;
   13018:	f10d 010f 	add.w	r1, sp, #15
    return encoder->writer->write(encoder->writer, data, len);
   1301c:	6828      	ldr	r0, [r5, #0]
   1301e:	6803      	ldr	r3, [r0, #0]
   13020:	aa04      	add	r2, sp, #16
   13022:	1a52      	subs	r2, r2, r1
   13024:	4798      	blx	r3
   13026:	6828      	ldr	r0, [r5, #0]
   13028:	6803      	ldr	r3, [r0, #0]
   1302a:	4622      	mov	r2, r4
   1302c:	4631      	mov	r1, r6
   1302e:	4798      	blx	r3
}
   13030:	b004      	add	sp, #16
   13032:	bd70      	pop	{r4, r5, r6, pc}
        if (ui > 0xffU)
   13034:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   13038:	f173 0100 	sbcs.w	r1, r3, #0
   1303c:	d212      	bcs.n	13064 <encode_string+0x74>
        unsigned more = 0;
   1303e:	f04f 0c00 	mov.w	ip, #0
        if (ui > 0xffffU)
   13042:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   13046:	f173 0300 	sbcs.w	r3, r3, #0
   1304a:	d301      	bcc.n	13050 <encode_string+0x60>
            ++more;
   1304c:	f10c 0c01 	add.w	ip, ip, #1
        bufstart -= (size_t)1 << more;
   13050:	2101      	movs	r1, #1
   13052:	fa01 f10c 	lsl.w	r1, r1, ip
   13056:	f10d 000f 	add.w	r0, sp, #15
   1305a:	1a41      	subs	r1, r0, r1
        *bufstart = shiftedMajorType + Value8Bit + more;
   1305c:	4462      	add	r2, ip
   1305e:	3218      	adds	r2, #24
   13060:	700a      	strb	r2, [r1, #0]
   13062:	e7db      	b.n	1301c <encode_string+0x2c>
            ++more;
   13064:	f04f 0c01 	mov.w	ip, #1
   13068:	e7eb      	b.n	13042 <encode_string+0x52>

0001306a <cbor_encoder_init>:
    encoder->writer = writer;
   1306a:	6001      	str	r1, [r0, #0]
    encoder->added = 0;
   1306c:	2300      	movs	r3, #0
   1306e:	6083      	str	r3, [r0, #8]
    encoder->flags = flags;
   13070:	60c2      	str	r2, [r0, #12]
}
   13072:	4770      	bx	lr

00013074 <cbor_encode_uint>:
{
   13074:	b510      	push	{r4, lr}
   13076:	b084      	sub	sp, #16
    ++encoder->added;
   13078:	6881      	ldr	r1, [r0, #8]
   1307a:	3101      	adds	r1, #1
   1307c:	6081      	str	r1, [r0, #8]
    v = cbor_htonll(v);
   1307e:	ba11      	rev	r1, r2
   13080:	ba1c      	rev	r4, r3
    memcpy(where, &v, sizeof(v));
   13082:	9402      	str	r4, [sp, #8]
   13084:	9103      	str	r1, [sp, #12]
    if (ui < Value8Bit) {
   13086:	2a18      	cmp	r2, #24
   13088:	f173 0400 	sbcs.w	r4, r3, #0
   1308c:	d20c      	bcs.n	130a8 <cbor_encode_uint+0x34>
        *bufstart += shiftedMajorType;
   1308e:	f3c1 6107 	ubfx	r1, r1, #24, #8
   13092:	f88d 100f 	strb.w	r1, [sp, #15]
    uint8_t *bufstart = bufend - 1;
   13096:	f10d 010f 	add.w	r1, sp, #15
    return encoder->writer->write(encoder->writer, data, len);
   1309a:	6800      	ldr	r0, [r0, #0]
   1309c:	6803      	ldr	r3, [r0, #0]
   1309e:	aa04      	add	r2, sp, #16
   130a0:	1a52      	subs	r2, r2, r1
   130a2:	4798      	blx	r3
}
   130a4:	b004      	add	sp, #16
   130a6:	bd10      	pop	{r4, pc}
        if (ui > 0xffU)
   130a8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   130ac:	f173 0100 	sbcs.w	r1, r3, #0
   130b0:	d21d      	bcs.n	130ee <cbor_encode_uint+0x7a>
        unsigned more = 0;
   130b2:	f04f 0c00 	mov.w	ip, #0
        if (ui > 0xffffU)
   130b6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   130ba:	f173 0100 	sbcs.w	r1, r3, #0
   130be:	d301      	bcc.n	130c4 <cbor_encode_uint+0x50>
            ++more;
   130c0:	f10c 0c01 	add.w	ip, ip, #1
        if (ui > 0xffffffffU)
   130c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   130c8:	4291      	cmp	r1, r2
   130ca:	f04f 0200 	mov.w	r2, #0
   130ce:	eb72 0303 	sbcs.w	r3, r2, r3
   130d2:	d201      	bcs.n	130d8 <cbor_encode_uint+0x64>
            ++more;
   130d4:	f10c 0c01 	add.w	ip, ip, #1
        bufstart -= (size_t)1 << more;
   130d8:	2101      	movs	r1, #1
   130da:	fa01 f30c 	lsl.w	r3, r1, ip
   130de:	f10d 010f 	add.w	r1, sp, #15
   130e2:	1ac9      	subs	r1, r1, r3
        *bufstart = shiftedMajorType + Value8Bit + more;
   130e4:	f10c 0c18 	add.w	ip, ip, #24
   130e8:	f881 c000 	strb.w	ip, [r1]
   130ec:	e7d5      	b.n	1309a <cbor_encode_uint+0x26>
            ++more;
   130ee:	f04f 0c01 	mov.w	ip, #1
   130f2:	e7e0      	b.n	130b6 <cbor_encode_uint+0x42>

000130f4 <cbor_encode_int>:
{
   130f4:	b510      	push	{r4, lr}
   130f6:	b084      	sub	sp, #16
    uint64_t ui = value >> 63;              /* extend sign to whole length */
   130f8:	17d9      	asrs	r1, r3, #31
    uint8_t majorType = ui & 0x20;          /* extract major type */
   130fa:	f001 0c20 	and.w	ip, r1, #32
    ui ^= value;                            /* complement negatives */
   130fe:	404a      	eors	r2, r1
   13100:	404b      	eors	r3, r1
    ++encoder->added;
   13102:	6881      	ldr	r1, [r0, #8]
   13104:	3101      	adds	r1, #1
   13106:	6081      	str	r1, [r0, #8]
    v = cbor_htonll(v);
   13108:	ba11      	rev	r1, r2
   1310a:	ba1c      	rev	r4, r3
    memcpy(where, &v, sizeof(v));
   1310c:	9402      	str	r4, [sp, #8]
   1310e:	9103      	str	r1, [sp, #12]
    if (ui < Value8Bit) {
   13110:	2a18      	cmp	r2, #24
   13112:	f173 0400 	sbcs.w	r4, r3, #0
   13116:	d20c      	bcs.n	13132 <cbor_encode_int+0x3e>
        *bufstart += shiftedMajorType;
   13118:	eb0c 6111 	add.w	r1, ip, r1, lsr #24
   1311c:	f88d 100f 	strb.w	r1, [sp, #15]
    uint8_t *bufstart = bufend - 1;
   13120:	f10d 010f 	add.w	r1, sp, #15
    return encoder->writer->write(encoder->writer, data, len);
   13124:	6800      	ldr	r0, [r0, #0]
   13126:	6803      	ldr	r3, [r0, #0]
   13128:	aa04      	add	r2, sp, #16
   1312a:	1a52      	subs	r2, r2, r1
   1312c:	4798      	blx	r3
}
   1312e:	b004      	add	sp, #16
   13130:	bd10      	pop	{r4, pc}
        if (ui > 0xffU)
   13132:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   13136:	f173 0100 	sbcs.w	r1, r3, #0
   1313a:	d21e      	bcs.n	1317a <cbor_encode_int+0x86>
        unsigned more = 0;
   1313c:	f04f 0e00 	mov.w	lr, #0
        if (ui > 0xffffU)
   13140:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   13144:	f173 0100 	sbcs.w	r1, r3, #0
   13148:	d301      	bcc.n	1314e <cbor_encode_int+0x5a>
            ++more;
   1314a:	f10e 0e01 	add.w	lr, lr, #1
        if (ui > 0xffffffffU)
   1314e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   13152:	4291      	cmp	r1, r2
   13154:	f04f 0200 	mov.w	r2, #0
   13158:	eb72 0303 	sbcs.w	r3, r2, r3
   1315c:	d201      	bcs.n	13162 <cbor_encode_int+0x6e>
            ++more;
   1315e:	f10e 0e01 	add.w	lr, lr, #1
        bufstart -= (size_t)1 << more;
   13162:	2101      	movs	r1, #1
   13164:	fa01 f30e 	lsl.w	r3, r1, lr
   13168:	f10d 010f 	add.w	r1, sp, #15
   1316c:	1ac9      	subs	r1, r1, r3
        *bufstart = shiftedMajorType + Value8Bit + more;
   1316e:	44f4      	add	ip, lr
   13170:	f10c 0c18 	add.w	ip, ip, #24
   13174:	f881 c000 	strb.w	ip, [r1]
   13178:	e7d4      	b.n	13124 <cbor_encode_int+0x30>
            ++more;
   1317a:	f04f 0e01 	mov.w	lr, #1
   1317e:	e7df      	b.n	13140 <cbor_encode_int+0x4c>

00013180 <cbor_encode_simple_value>:
    if (value >= HalfPrecisionFloat && value <= Break)
   13180:	f1a1 0319 	sub.w	r3, r1, #25
   13184:	b2db      	uxtb	r3, r3
   13186:	2b06      	cmp	r3, #6
   13188:	d925      	bls.n	131d6 <cbor_encode_simple_value+0x56>
{
   1318a:	b500      	push	{lr}
   1318c:	b085      	sub	sp, #20
    return encode_number(encoder, value, SimpleTypesType << MajorTypeShift);
   1318e:	2200      	movs	r2, #0
    ++encoder->added;
   13190:	6883      	ldr	r3, [r0, #8]
   13192:	3301      	adds	r3, #1
   13194:	6083      	str	r3, [r0, #8]
    v = cbor_htonll(v);
   13196:	ba0b      	rev	r3, r1
    memcpy(where, &v, sizeof(v));
   13198:	9202      	str	r2, [sp, #8]
   1319a:	9303      	str	r3, [sp, #12]
    if (ui < Value8Bit) {
   1319c:	2918      	cmp	r1, #24
   1319e:	f172 0200 	sbcs.w	r2, r2, #0
   131a2:	d20e      	bcs.n	131c2 <cbor_encode_simple_value+0x42>
        *bufstart += shiftedMajorType;
   131a4:	f3c3 6307 	ubfx	r3, r3, #24, #8
   131a8:	3b20      	subs	r3, #32
   131aa:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8_t *bufstart = bufend - 1;
   131ae:	f10d 010f 	add.w	r1, sp, #15
    return encoder->writer->write(encoder->writer, data, len);
   131b2:	6800      	ldr	r0, [r0, #0]
   131b4:	6803      	ldr	r3, [r0, #0]
   131b6:	aa04      	add	r2, sp, #16
   131b8:	1a52      	subs	r2, r2, r1
   131ba:	4798      	blx	r3
}
   131bc:	b005      	add	sp, #20
   131be:	f85d fb04 	ldr.w	pc, [sp], #4
        unsigned more = 0;
   131c2:	2300      	movs	r3, #0
        bufstart -= (size_t)1 << more;
   131c4:	2101      	movs	r1, #1
   131c6:	fa01 f203 	lsl.w	r2, r1, r3
   131ca:	f10d 010f 	add.w	r1, sp, #15
   131ce:	1a89      	subs	r1, r1, r2
        *bufstart = shiftedMajorType + Value8Bit + more;
   131d0:	3b08      	subs	r3, #8
   131d2:	700b      	strb	r3, [r1, #0]
   131d4:	e7ed      	b.n	131b2 <cbor_encode_simple_value+0x32>
        return CborErrorIllegalSimpleType;
   131d6:	f44f 7083 	mov.w	r0, #262	; 0x106
}
   131da:	4770      	bx	lr

000131dc <cbor_encode_byte_string>:
{
   131dc:	b508      	push	{r3, lr}
   131de:	460b      	mov	r3, r1
   131e0:	4611      	mov	r1, r2
    return encode_string(encoder, length, ByteStringType << MajorTypeShift, string);
   131e2:	2240      	movs	r2, #64	; 0x40
   131e4:	f7ff ff04 	bl	12ff0 <encode_string>
}
   131e8:	bd08      	pop	{r3, pc}

000131ea <cbor_encode_text_string>:
{
   131ea:	b508      	push	{r3, lr}
   131ec:	460b      	mov	r3, r1
   131ee:	4611      	mov	r1, r2
    return encode_string(encoder, length, TextStringType << MajorTypeShift, string);
   131f0:	2260      	movs	r2, #96	; 0x60
   131f2:	f7ff fefd 	bl	12ff0 <encode_string>
}
   131f6:	bd08      	pop	{r3, pc}

000131f8 <cbor_encoder_create_array>:
 * length instead.
 *
 * \sa cbor_encoder_create_map
 */
CborError cbor_encoder_create_array(CborEncoder *encoder, CborEncoder *arrayEncoder, size_t length)
{
   131f8:	b508      	push	{r3, lr}
    return create_container(encoder, arrayEncoder, length, ArrayType << MajorTypeShift);
   131fa:	2380      	movs	r3, #128	; 0x80
   131fc:	f7ff fea8 	bl	12f50 <create_container>
}
   13200:	bd08      	pop	{r3, pc}

00013202 <cbor_encoder_create_map>:
 * value, this function returns error CborErrorDataTooLarge.
 *
 * \sa cbor_encoder_create_array
 */
CborError cbor_encoder_create_map(CborEncoder *encoder, CborEncoder *mapEncoder, size_t length)
{
   13202:	b508      	push	{r3, lr}
    if (length != CborIndefiniteLength && length > SIZE_MAX / 2)
   13204:	f102 4c00 	add.w	ip, r2, #2147483648	; 0x80000000
   13208:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   1320c:	459c      	cmp	ip, r3
   1320e:	d303      	bcc.n	13218 <cbor_encoder_create_map+0x16>
        return CborErrorDataTooLarge;
    return create_container(encoder, mapEncoder, length, MapType << MajorTypeShift);
   13210:	23a0      	movs	r3, #160	; 0xa0
   13212:	f7ff fe9d 	bl	12f50 <create_container>
}
   13216:	bd08      	pop	{r3, pc}
        return CborErrorDataTooLarge;
   13218:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1321c:	e7fb      	b.n	13216 <cbor_encoder_create_map+0x14>

0001321e <cbor_encoder_close_container>:
 *
 * \sa cbor_encoder_create_array(), cbor_encoder_create_map()
 */
CborError cbor_encoder_close_container(CborEncoder *encoder, const CborEncoder *containerEncoder)
{
    encoder->writer = containerEncoder->writer;
   1321e:	680b      	ldr	r3, [r1, #0]
   13220:	6003      	str	r3, [r0, #0]

    if (containerEncoder->flags & CborIteratorFlag_UnknownLength)
   13222:	68cb      	ldr	r3, [r1, #12]
   13224:	f013 0f04 	tst.w	r3, #4
   13228:	d101      	bne.n	1322e <cbor_encoder_close_container+0x10>
        return append_byte_to_buffer(encoder, BreakByte);
    return CborNoError;
   1322a:	2000      	movs	r0, #0
}
   1322c:	4770      	bx	lr
{
   1322e:	b500      	push	{lr}
   13230:	b083      	sub	sp, #12
        return append_byte_to_buffer(encoder, BreakByte);
   13232:	23ff      	movs	r3, #255	; 0xff
   13234:	f88d 3007 	strb.w	r3, [sp, #7]
    return encoder->writer->write(encoder->writer, data, len);
   13238:	6800      	ldr	r0, [r0, #0]
   1323a:	6803      	ldr	r3, [r0, #0]
   1323c:	2201      	movs	r2, #1
   1323e:	f10d 0107 	add.w	r1, sp, #7
   13242:	4798      	blx	r3
}
   13244:	b003      	add	sp, #12
   13246:	f85d fb04 	ldr.w	pc, [sp], #4

0001324a <is_fixed_type>:
    return CborNoError;
}

static bool is_fixed_type(uint8_t type)
{
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
   1324a:	2860      	cmp	r0, #96	; 0x60
   1324c:	d009      	beq.n	13262 <is_fixed_type+0x18>
   1324e:	2840      	cmp	r0, #64	; 0x40
   13250:	d009      	beq.n	13266 <is_fixed_type+0x1c>
   13252:	2880      	cmp	r0, #128	; 0x80
   13254:	d009      	beq.n	1326a <is_fixed_type+0x20>
   13256:	28a0      	cmp	r0, #160	; 0xa0
   13258:	d001      	beq.n	1325e <is_fixed_type+0x14>
   1325a:	2001      	movs	r0, #1
           type != CborMapType;
}
   1325c:	4770      	bx	lr
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
   1325e:	2000      	movs	r0, #0
   13260:	4770      	bx	lr
   13262:	2000      	movs	r0, #0
   13264:	4770      	bx	lr
   13266:	2000      	movs	r0, #0
   13268:	4770      	bx	lr
   1326a:	2000      	movs	r0, #0
   1326c:	4770      	bx	lr

0001326e <iterate_noop>:
    (void)d;
    (void)dst;
    (void)src_offset;
    (void)len;
    return true;
}
   1326e:	2001      	movs	r0, #1
   13270:	4770      	bx	lr

00013272 <preparse_value>:
{
   13272:	b570      	push	{r4, r5, r6, lr}
    const CborParser *parser = it->parser;
   13274:	6805      	ldr	r5, [r0, #0]
    it->type = CborInvalidType;
   13276:	23ff      	movs	r3, #255	; 0xff
   13278:	7383      	strb	r3, [r0, #14]
    if (it->offset == parser->end)
   1327a:	6841      	ldr	r1, [r0, #4]
   1327c:	686b      	ldr	r3, [r5, #4]
   1327e:	4299      	cmp	r1, r3
   13280:	f000 8089 	beq.w	13396 <preparse_value+0x124>
   13284:	4604      	mov	r4, r0
    uint8_t descriptor = parser->d->get8(parser->d, it->offset);
   13286:	6828      	ldr	r0, [r5, #0]
   13288:	6803      	ldr	r3, [r0, #0]
   1328a:	4798      	blx	r3
    uint8_t type = descriptor & MajorTypeMask;
   1328c:	f000 06e0 	and.w	r6, r0, #224	; 0xe0
    it->type = type;
   13290:	73a6      	strb	r6, [r4, #14]
    it->flags = 0;
   13292:	2300      	movs	r3, #0
   13294:	73e3      	strb	r3, [r4, #15]
    it->extra = (descriptor &= SmallValueMask);
   13296:	f000 031f 	and.w	r3, r0, #31
   1329a:	81a3      	strh	r3, [r4, #12]
    if (descriptor > Value64Bit) {
   1329c:	2b1b      	cmp	r3, #27
   1329e:	d91d      	bls.n	132dc <preparse_value+0x6a>
        if (unlikely(descriptor != IndefiniteLength))
   132a0:	2b1f      	cmp	r3, #31
   132a2:	d10b      	bne.n	132bc <preparse_value+0x4a>
        if (likely(!is_fixed_type(type))) {
   132a4:	4630      	mov	r0, r6
   132a6:	f7ff ffd0 	bl	1324a <is_fixed_type>
   132aa:	f080 0001 	eor.w	r0, r0, #1
   132ae:	f010 0fff 	tst.w	r0, #255	; 0xff
   132b2:	d00b      	beq.n	132cc <preparse_value+0x5a>
            it->flags |= CborIteratorFlag_UnknownLength;
   132b4:	2304      	movs	r3, #4
   132b6:	73e3      	strb	r3, [r4, #15]
            return CborNoError;
   132b8:	2000      	movs	r0, #0
}
   132ba:	bd70      	pop	{r4, r5, r6, pc}
            return type == CborSimpleType ? CborErrorUnknownType : CborErrorIllegalNumber;
   132bc:	2ee0      	cmp	r6, #224	; 0xe0
   132be:	d002      	beq.n	132c6 <preparse_value+0x54>
   132c0:	f240 1005 	movw	r0, #261	; 0x105
   132c4:	e7f9      	b.n	132ba <preparse_value+0x48>
   132c6:	f240 1003 	movw	r0, #259	; 0x103
   132ca:	e7f6      	b.n	132ba <preparse_value+0x48>
        return type == CborSimpleType ? CborErrorUnexpectedBreak : CborErrorIllegalNumber;
   132cc:	2ee0      	cmp	r6, #224	; 0xe0
   132ce:	d002      	beq.n	132d6 <preparse_value+0x64>
   132d0:	f240 1005 	movw	r0, #261	; 0x105
   132d4:	e7f1      	b.n	132ba <preparse_value+0x48>
   132d6:	f44f 7081 	mov.w	r0, #258	; 0x102
   132da:	e7ee      	b.n	132ba <preparse_value+0x48>
    size_t bytesNeeded = descriptor < Value8Bit ? 0 : (1 << (descriptor - Value8Bit));
   132dc:	2b17      	cmp	r3, #23
   132de:	d91a      	bls.n	13316 <preparse_value+0xa4>
   132e0:	f1a3 0118 	sub.w	r1, r3, #24
   132e4:	2201      	movs	r2, #1
   132e6:	408a      	lsls	r2, r1
    if (bytesNeeded + 1 > (size_t)(parser->end - it->offset))
   132e8:	3201      	adds	r2, #1
   132ea:	6868      	ldr	r0, [r5, #4]
   132ec:	6861      	ldr	r1, [r4, #4]
   132ee:	1a40      	subs	r0, r0, r1
   132f0:	4282      	cmp	r2, r0
   132f2:	d853      	bhi.n	1339c <preparse_value+0x12a>
    uint8_t majortype = type >> MajorTypeShift;
   132f4:	0972      	lsrs	r2, r6, #5
    if (majortype == NegativeIntegerType) {
   132f6:	2e20      	cmp	r6, #32
   132f8:	d00f      	beq.n	1331a <preparse_value+0xa8>
    } else if (majortype == SimpleTypesType) {
   132fa:	2a07      	cmp	r2, #7
   132fc:	d012      	beq.n	13324 <preparse_value+0xb2>
    if (descriptor < Value8Bit)
   132fe:	2b17      	cmp	r3, #23
   13300:	d94f      	bls.n	133a2 <preparse_value+0x130>
    if (descriptor == Value8Bit)
   13302:	2b18      	cmp	r3, #24
   13304:	d039      	beq.n	1337a <preparse_value+0x108>
    else if (descriptor == Value16Bit)
   13306:	2b19      	cmp	r3, #25
   13308:	d03e      	beq.n	13388 <preparse_value+0x116>
        it->flags |= CborIteratorFlag_IntegerValueTooLarge;     /* Value32Bit or Value64Bit */
   1330a:	7be3      	ldrb	r3, [r4, #15]
   1330c:	f043 0301 	orr.w	r3, r3, #1
   13310:	73e3      	strb	r3, [r4, #15]
    return CborNoError;
   13312:	2000      	movs	r0, #0
   13314:	e7d1      	b.n	132ba <preparse_value+0x48>
    size_t bytesNeeded = descriptor < Value8Bit ? 0 : (1 << (descriptor - Value8Bit));
   13316:	2200      	movs	r2, #0
   13318:	e7e6      	b.n	132e8 <preparse_value+0x76>
        it->flags |= CborIteratorFlag_NegativeInteger;
   1331a:	2202      	movs	r2, #2
   1331c:	73e2      	strb	r2, [r4, #15]
        it->type = CborIntegerType;
   1331e:	2200      	movs	r2, #0
   13320:	73a2      	strb	r2, [r4, #14]
   13322:	e7ec      	b.n	132fe <preparse_value+0x8c>
        switch (descriptor) {
   13324:	3b14      	subs	r3, #20
   13326:	2b0b      	cmp	r3, #11
   13328:	d812      	bhi.n	13350 <preparse_value+0xde>
   1332a:	e8df f003 	tbb	[pc, r3]
   1332e:	0d06      	.short	0x0d06
   13330:	0d130d0d 	.word	0x0d130d0d
   13334:	20200b0b 	.word	0x20200b0b
   13338:	2020      	.short	0x2020
            it->extra = false;
   1333a:	2300      	movs	r3, #0
   1333c:	81a3      	strh	r3, [r4, #12]
            it->type = CborBooleanType;
   1333e:	23f5      	movs	r3, #245	; 0xf5
   13340:	73a3      	strb	r3, [r4, #14]
            break;
   13342:	e005      	b.n	13350 <preparse_value+0xde>
            it->flags |= CborIteratorFlag_IntegerValueTooLarge;
   13344:	2301      	movs	r3, #1
   13346:	73e3      	strb	r3, [r4, #15]
            it->type = parser->d->get8(parser->d, it->offset);
   13348:	6828      	ldr	r0, [r5, #0]
   1334a:	6803      	ldr	r3, [r0, #0]
   1334c:	4798      	blx	r3
   1334e:	73a0      	strb	r0, [r4, #14]
        return CborNoError;
   13350:	2000      	movs	r0, #0
   13352:	e7b2      	b.n	132ba <preparse_value+0x48>
            it->extra = parser->d->get8(parser->d, it->offset + 1);
   13354:	6828      	ldr	r0, [r5, #0]
   13356:	6803      	ldr	r3, [r0, #0]
   13358:	3101      	adds	r1, #1
   1335a:	4798      	blx	r3
   1335c:	b283      	uxth	r3, r0
   1335e:	81a3      	strh	r3, [r4, #12]
            if (unlikely(it->extra < 32)) {
   13360:	2b1f      	cmp	r3, #31
   13362:	d8f5      	bhi.n	13350 <preparse_value+0xde>
                it->type = CborInvalidType;
   13364:	23ff      	movs	r3, #255	; 0xff
   13366:	73a3      	strb	r3, [r4, #14]
                return CborErrorIllegalSimpleType;
   13368:	f44f 7083 	mov.w	r0, #262	; 0x106
   1336c:	e7a5      	b.n	132ba <preparse_value+0x48>
            assert(false);  /* these conditions can't be reached */
   1336e:	2300      	movs	r3, #0
   13370:	461a      	mov	r2, r3
   13372:	4619      	mov	r1, r3
   13374:	4618      	mov	r0, r3
   13376:	f7f5 fdf5 	bl	8f64 <__assert_func>
        it->extra = parser->d->get8(parser->d, it->offset + 1);
   1337a:	6828      	ldr	r0, [r5, #0]
   1337c:	6803      	ldr	r3, [r0, #0]
   1337e:	3101      	adds	r1, #1
   13380:	4798      	blx	r3
   13382:	81a0      	strh	r0, [r4, #12]
    return CborNoError;
   13384:	2000      	movs	r0, #0
   13386:	e798      	b.n	132ba <preparse_value+0x48>
        it->extra = parser->d->get16(parser->d, it->offset + 1);
   13388:	6828      	ldr	r0, [r5, #0]
   1338a:	6843      	ldr	r3, [r0, #4]
   1338c:	3101      	adds	r1, #1
   1338e:	4798      	blx	r3
   13390:	81a0      	strh	r0, [r4, #12]
    return CborNoError;
   13392:	2000      	movs	r0, #0
   13394:	e791      	b.n	132ba <preparse_value+0x48>
        return CborErrorUnexpectedEOF;
   13396:	f240 1001 	movw	r0, #257	; 0x101
   1339a:	e78e      	b.n	132ba <preparse_value+0x48>
        return CborErrorUnexpectedEOF;
   1339c:	f240 1001 	movw	r0, #257	; 0x101
   133a0:	e78b      	b.n	132ba <preparse_value+0x48>
        return CborNoError;
   133a2:	2000      	movs	r0, #0
   133a4:	e789      	b.n	132ba <preparse_value+0x48>

000133a6 <preparse_next_value>:
{
   133a6:	b510      	push	{r4, lr}
   133a8:	4604      	mov	r4, r0
    if (it->remaining != UINT32_MAX) {
   133aa:	6880      	ldr	r0, [r0, #8]
   133ac:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   133b0:	d00c      	beq.n	133cc <preparse_next_value+0x26>
        if (it->type != CborTagType && !--it->remaining) {
   133b2:	7ba2      	ldrb	r2, [r4, #14]
   133b4:	2ac0      	cmp	r2, #192	; 0xc0
   133b6:	d002      	beq.n	133be <preparse_next_value+0x18>
   133b8:	3801      	subs	r0, #1
   133ba:	60a0      	str	r0, [r4, #8]
   133bc:	b118      	cbz	r0, 133c6 <preparse_next_value+0x20>
    return preparse_value(it);
   133be:	4620      	mov	r0, r4
   133c0:	f7ff ff57 	bl	13272 <preparse_value>
}
   133c4:	bd10      	pop	{r4, pc}
            it->type = CborInvalidType;
   133c6:	23ff      	movs	r3, #255	; 0xff
   133c8:	73a3      	strb	r3, [r4, #14]
            return CborNoError;
   133ca:	e7fb      	b.n	133c4 <preparse_next_value+0x1e>
    } else if (it->remaining == UINT32_MAX && it->offset != it->parser->end &&
   133cc:	6861      	ldr	r1, [r4, #4]
   133ce:	6823      	ldr	r3, [r4, #0]
   133d0:	685a      	ldr	r2, [r3, #4]
   133d2:	4291      	cmp	r1, r2
   133d4:	d0f3      	beq.n	133be <preparse_next_value+0x18>
        it->parser->d->get8(it->parser->d, it->offset) == (uint8_t)BreakByte) {
   133d6:	6818      	ldr	r0, [r3, #0]
   133d8:	6803      	ldr	r3, [r0, #0]
   133da:	4798      	blx	r3
    } else if (it->remaining == UINT32_MAX && it->offset != it->parser->end &&
   133dc:	28ff      	cmp	r0, #255	; 0xff
   133de:	d1ee      	bne.n	133be <preparse_next_value+0x18>
        ++it->offset;
   133e0:	6863      	ldr	r3, [r4, #4]
   133e2:	3301      	adds	r3, #1
   133e4:	6063      	str	r3, [r4, #4]
        it->type = CborInvalidType;
   133e6:	23ff      	movs	r3, #255	; 0xff
   133e8:	73a3      	strb	r3, [r4, #14]
        it->remaining = 0;
   133ea:	2000      	movs	r0, #0
   133ec:	60a0      	str	r0, [r4, #8]
        return CborNoError;
   133ee:	e7e9      	b.n	133c4 <preparse_next_value+0x1e>

000133f0 <extract_length>:
{
   133f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   133f2:	4607      	mov	r7, r0
   133f4:	460c      	mov	r4, r1
   133f6:	4615      	mov	r5, r2
    return cbor_ntohll(result);
}

static inline CborError extract_number(const CborParser *p, int *offset, uint64_t *len)
{
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   133f8:	6800      	ldr	r0, [r0, #0]
   133fa:	6803      	ldr	r3, [r0, #0]
   133fc:	6809      	ldr	r1, [r1, #0]
   133fe:	4798      	blx	r3
   13400:	f000 031f 	and.w	r3, r0, #31
    ++*offset;
   13404:	6822      	ldr	r2, [r4, #0]
   13406:	3201      	adds	r2, #1
   13408:	6022      	str	r2, [r4, #0]
    *len = 1;
    if (additional_information < Value8Bit) {
   1340a:	2b17      	cmp	r3, #23
   1340c:	d914      	bls.n	13438 <extract_length+0x48>
        *len = additional_information;
        return CborNoError;
    }
    if (unlikely(additional_information > Value64Bit))
   1340e:	2b1b      	cmp	r3, #27
   13410:	d82e      	bhi.n	13470 <extract_length+0x80>
        return CborErrorIllegalNumber;

    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   13412:	3b18      	subs	r3, #24
   13414:	2601      	movs	r6, #1
   13416:	409e      	lsls	r6, r3
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   13418:	687b      	ldr	r3, [r7, #4]
   1341a:	6821      	ldr	r1, [r4, #0]
   1341c:	1a5b      	subs	r3, r3, r1
   1341e:	429e      	cmp	r6, r3
   13420:	d82b      	bhi.n	1347a <extract_length+0x8a>
        return CborErrorUnexpectedEOF;
    } else if (bytesNeeded == 1) {
   13422:	2e01      	cmp	r6, #1
   13424:	d00b      	beq.n	1343e <extract_length+0x4e>
        *len = p->d->get8(p->d, *offset);
    } else if (bytesNeeded == 2) {
   13426:	2e02      	cmp	r6, #2
   13428:	d016      	beq.n	13458 <extract_length+0x68>
        *len =  p->d->get16(p->d, *offset);
    } else if (bytesNeeded == 4) {
   1342a:	2e04      	cmp	r6, #4
   1342c:	d01a      	beq.n	13464 <extract_length+0x74>
        *len =  p->d->get32(p->d, *offset);
    } else {
        *len =  p->d->get64(p->d, *offset);
   1342e:	6838      	ldr	r0, [r7, #0]
   13430:	68c3      	ldr	r3, [r0, #12]
   13432:	4798      	blx	r3
   13434:	4603      	mov	r3, r0
   13436:	e007      	b.n	13448 <extract_length+0x58>
        *len = additional_information;
   13438:	2000      	movs	r0, #0
   1343a:	4601      	mov	r1, r0
        return CborNoError;
   1343c:	e008      	b.n	13450 <extract_length+0x60>
        *len = p->d->get8(p->d, *offset);
   1343e:	6838      	ldr	r0, [r7, #0]
   13440:	6803      	ldr	r3, [r0, #0]
   13442:	4798      	blx	r3
   13444:	4603      	mov	r3, r0
   13446:	2100      	movs	r1, #0
    }
    *offset += bytesNeeded;
   13448:	6822      	ldr	r2, [r4, #0]
   1344a:	4432      	add	r2, r6
   1344c:	6022      	str	r2, [r4, #0]
    return CborNoError;
   1344e:	2000      	movs	r0, #0
    if (err) {
   13450:	b9c0      	cbnz	r0, 13484 <extract_length+0x94>
    *len = v;
   13452:	602b      	str	r3, [r5, #0]
    if (v != *len)
   13454:	b9c9      	cbnz	r1, 1348a <extract_length+0x9a>
}
   13456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        *len =  p->d->get16(p->d, *offset);
   13458:	6838      	ldr	r0, [r7, #0]
   1345a:	6843      	ldr	r3, [r0, #4]
   1345c:	4798      	blx	r3
   1345e:	4603      	mov	r3, r0
   13460:	2100      	movs	r1, #0
   13462:	e7f1      	b.n	13448 <extract_length+0x58>
        *len =  p->d->get32(p->d, *offset);
   13464:	6838      	ldr	r0, [r7, #0]
   13466:	6883      	ldr	r3, [r0, #8]
   13468:	4798      	blx	r3
   1346a:	4603      	mov	r3, r0
   1346c:	2100      	movs	r1, #0
   1346e:	e7eb      	b.n	13448 <extract_length+0x58>
    *len = 1;
   13470:	2301      	movs	r3, #1
   13472:	2100      	movs	r1, #0
        return CborErrorIllegalNumber;
   13474:	f240 1005 	movw	r0, #261	; 0x105
   13478:	e7ea      	b.n	13450 <extract_length+0x60>
    *len = 1;
   1347a:	2301      	movs	r3, #1
   1347c:	2100      	movs	r1, #0
        return CborErrorUnexpectedEOF;
   1347e:	f240 1001 	movw	r0, #257	; 0x101
   13482:	e7e5      	b.n	13450 <extract_length+0x60>
        *len = 0;
   13484:	2300      	movs	r3, #0
   13486:	602b      	str	r3, [r5, #0]
        return err;
   13488:	e7e5      	b.n	13456 <extract_length+0x66>
        return CborErrorDataTooLarge;
   1348a:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1348e:	e7e2      	b.n	13456 <extract_length+0x66>

00013490 <iterate_string_chunks>:

static CborError iterate_string_chunks(const CborValue *value, char *buffer, size_t *buflen,
                                       bool *result, CborValue *next, IterateFunction func)
{
   13490:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13494:	b085      	sub	sp, #20
   13496:	4604      	mov	r4, r0
   13498:	4689      	mov	r9, r1
   1349a:	4616      	mov	r6, r2
   1349c:	461d      	mov	r5, r3
{ return value->type == CborByteStringType; }
   1349e:	7b83      	ldrb	r3, [r0, #14]
    assert(cbor_value_is_byte_string(value) || cbor_value_is_text_string(value));
   134a0:	2b40      	cmp	r3, #64	; 0x40
   134a2:	d001      	beq.n	134a8 <iterate_string_chunks+0x18>
   134a4:	2b60      	cmp	r3, #96	; 0x60
   134a6:	d10c      	bne.n	134c2 <iterate_string_chunks+0x32>

    size_t total;
    CborError err;
    int offset = value->offset;
   134a8:	6863      	ldr	r3, [r4, #4]
   134aa:	9302      	str	r3, [sp, #8]
{ return (value->flags & CborIteratorFlag_UnknownLength) == 0; }
   134ac:	7be2      	ldrb	r2, [r4, #15]
    if (cbor_value_is_length_known(value)) {
   134ae:	f012 0f04 	tst.w	r2, #4
   134b2:	d00c      	beq.n	134ce <iterate_string_chunks+0x3e>
        else
            *result = false;
        offset += total;
    } else {
        /* chunked */
        ++offset;
   134b4:	3301      	adds	r3, #1
   134b6:	9302      	str	r3, [sp, #8]
        total = 0;
   134b8:	2300      	movs	r3, #0
   134ba:	9303      	str	r3, [sp, #12]
        *result = true;
   134bc:	2301      	movs	r3, #1
   134be:	702b      	strb	r3, [r5, #0]
   134c0:	e048      	b.n	13554 <iterate_string_chunks+0xc4>
    assert(cbor_value_is_byte_string(value) || cbor_value_is_text_string(value));
   134c2:	2300      	movs	r3, #0
   134c4:	461a      	mov	r2, r3
   134c6:	4619      	mov	r1, r3
   134c8:	4618      	mov	r0, r3
   134ca:	f7f5 fd4b 	bl	8f64 <__assert_func>
        err = extract_length(value->parser, &offset, &total);
   134ce:	aa03      	add	r2, sp, #12
   134d0:	a902      	add	r1, sp, #8
   134d2:	6820      	ldr	r0, [r4, #0]
   134d4:	f7ff ff8c 	bl	133f0 <extract_length>
        if (err)
   134d8:	4603      	mov	r3, r0
   134da:	2800      	cmp	r0, #0
   134dc:	d178      	bne.n	135d0 <iterate_string_chunks+0x140>
        if (total > (size_t)(value->parser->end - offset))
   134de:	6820      	ldr	r0, [r4, #0]
   134e0:	6843      	ldr	r3, [r0, #4]
   134e2:	9a02      	ldr	r2, [sp, #8]
   134e4:	1a99      	subs	r1, r3, r2
   134e6:	9b03      	ldr	r3, [sp, #12]
   134e8:	4299      	cmp	r1, r3
   134ea:	f0c0 8084 	bcc.w	135f6 <iterate_string_chunks+0x166>
        if (total <= *buflen)
   134ee:	6831      	ldr	r1, [r6, #0]
   134f0:	428b      	cmp	r3, r1
   134f2:	d81e      	bhi.n	13532 <iterate_string_chunks+0xa2>
            *result = !!func(value->parser->d, buffer, offset, total);
   134f4:	4649      	mov	r1, r9
   134f6:	6800      	ldr	r0, [r0, #0]
   134f8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   134fa:	47b8      	blx	r7
   134fc:	3800      	subs	r0, #0
   134fe:	bf18      	it	ne
   13500:	2001      	movne	r0, #1
   13502:	7028      	strb	r0, [r5, #0]
        offset += total;
   13504:	9b02      	ldr	r3, [sp, #8]
   13506:	9a03      	ldr	r2, [sp, #12]
   13508:	4413      	add	r3, r2
   1350a:	9302      	str	r3, [sp, #8]
            total = newTotal;
        }
    }

    /* is there enough room for the ending NUL byte? */
    if (*result && *buflen > total) {
   1350c:	782b      	ldrb	r3, [r5, #0]
   1350e:	b14b      	cbz	r3, 13524 <iterate_string_chunks+0x94>
   13510:	6832      	ldr	r2, [r6, #0]
   13512:	9b03      	ldr	r3, [sp, #12]
   13514:	429a      	cmp	r2, r3
   13516:	d905      	bls.n	13524 <iterate_string_chunks+0x94>
        /* we are just trying to write a NULL byte here,, but this is hard
         * because this is called by function pointer with an abstract
         * reader.  Since this is the output buffer, we can assume that if
         * we have a valid buffer its ok to write a NULL here  */
        if(buffer) {
   13518:	f1b9 0f00 	cmp.w	r9, #0
   1351c:	d002      	beq.n	13524 <iterate_string_chunks+0x94>
            *(buffer + total) = '\0';
   1351e:	2200      	movs	r2, #0
   13520:	f809 2003 	strb.w	r2, [r9, r3]
        }
    }
    *buflen = total;
   13524:	9b03      	ldr	r3, [sp, #12]
   13526:	6033      	str	r3, [r6, #0]

    if (next) {
   13528:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1352a:	2b00      	cmp	r3, #0
   1352c:	d157      	bne.n	135de <iterate_string_chunks+0x14e>
        *next = *value;
        next->offset = offset;
        return preparse_next_value(next);
    }
    return CborNoError;
   1352e:	2300      	movs	r3, #0
   13530:	e04e      	b.n	135d0 <iterate_string_chunks+0x140>
            *result = false;
   13532:	2300      	movs	r3, #0
   13534:	702b      	strb	r3, [r5, #0]
   13536:	e7e5      	b.n	13504 <iterate_string_chunks+0x74>
                ++offset;
   13538:	9b02      	ldr	r3, [sp, #8]
   1353a:	3301      	adds	r3, #1
   1353c:	9302      	str	r3, [sp, #8]
                break;
   1353e:	e7e5      	b.n	1350c <iterate_string_chunks+0x7c>
#endif

static inline bool add_check_overflow(size_t v1, size_t v2, size_t *r)
{
#if ((defined(__GNUC__) && (__GNUC__ >= 5)) && !defined(__INTEL_COMPILER)) || __has_builtin(__builtin_add_overflow)
    return __builtin_add_overflow(v1, v2, r);
   13540:	2201      	movs	r2, #1
   13542:	e023      	b.n	1358c <iterate_string_chunks+0xfc>
                *result = false;
   13544:	2300      	movs	r3, #0
   13546:	702b      	strb	r3, [r5, #0]
            offset += chunkLen;
   13548:	9b02      	ldr	r3, [sp, #8]
   1354a:	9a01      	ldr	r2, [sp, #4]
   1354c:	4413      	add	r3, r2
   1354e:	9302      	str	r3, [sp, #8]
            total = newTotal;
   13550:	f8cd 800c 	str.w	r8, [sp, #12]
            if (offset == value->parser->end)
   13554:	6823      	ldr	r3, [r4, #0]
   13556:	685a      	ldr	r2, [r3, #4]
   13558:	9902      	ldr	r1, [sp, #8]
   1355a:	428a      	cmp	r2, r1
   1355c:	d030      	beq.n	135c0 <iterate_string_chunks+0x130>
            val = value->parser->d->get8(value->parser->d, offset);
   1355e:	6818      	ldr	r0, [r3, #0]
   13560:	6803      	ldr	r3, [r0, #0]
   13562:	4798      	blx	r3
            if (val == (uint8_t)BreakByte) {
   13564:	28ff      	cmp	r0, #255	; 0xff
   13566:	d0e7      	beq.n	13538 <iterate_string_chunks+0xa8>
            if ((val & MajorTypeMask) != value->type)
   13568:	f020 001f 	bic.w	r0, r0, #31
   1356c:	7ba3      	ldrb	r3, [r4, #14]
   1356e:	4298      	cmp	r0, r3
   13570:	d129      	bne.n	135c6 <iterate_string_chunks+0x136>
            err = extract_length(value->parser, &offset, &chunkLen);
   13572:	aa01      	add	r2, sp, #4
   13574:	a902      	add	r1, sp, #8
   13576:	6820      	ldr	r0, [r4, #0]
   13578:	f7ff ff3a 	bl	133f0 <extract_length>
            if (err)
   1357c:	4603      	mov	r3, r0
   1357e:	bb38      	cbnz	r0, 135d0 <iterate_string_chunks+0x140>
            if (unlikely(add_check_overflow(total, chunkLen, &newTotal)))
   13580:	9803      	ldr	r0, [sp, #12]
   13582:	9b01      	ldr	r3, [sp, #4]
   13584:	2200      	movs	r2, #0
   13586:	eb10 0803 	adds.w	r8, r0, r3
   1358a:	d2d9      	bcs.n	13540 <iterate_string_chunks+0xb0>
   1358c:	b9f2      	cbnz	r2, 135cc <iterate_string_chunks+0x13c>
            if (chunkLen > (size_t)(value->parser->end - offset))
   1358e:	f8d4 c000 	ldr.w	ip, [r4]
   13592:	f8dc 1004 	ldr.w	r1, [ip, #4]
   13596:	9a02      	ldr	r2, [sp, #8]
   13598:	1a89      	subs	r1, r1, r2
   1359a:	428b      	cmp	r3, r1
   1359c:	d81c      	bhi.n	135d8 <iterate_string_chunks+0x148>
            if (*result && *buflen >= newTotal)
   1359e:	7829      	ldrb	r1, [r5, #0]
   135a0:	2900      	cmp	r1, #0
   135a2:	d0cf      	beq.n	13544 <iterate_string_chunks+0xb4>
   135a4:	6831      	ldr	r1, [r6, #0]
   135a6:	4541      	cmp	r1, r8
   135a8:	d3cc      	bcc.n	13544 <iterate_string_chunks+0xb4>
                *result = !!func(value->parser->d, buffer + total, offset, chunkLen);
   135aa:	eb09 0100 	add.w	r1, r9, r0
   135ae:	f8dc 0000 	ldr.w	r0, [ip]
   135b2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   135b4:	47b8      	blx	r7
   135b6:	3800      	subs	r0, #0
   135b8:	bf18      	it	ne
   135ba:	2001      	movne	r0, #1
   135bc:	7028      	strb	r0, [r5, #0]
   135be:	e7c3      	b.n	13548 <iterate_string_chunks+0xb8>
                return CborErrorUnexpectedEOF;
   135c0:	f240 1301 	movw	r3, #257	; 0x101
   135c4:	e004      	b.n	135d0 <iterate_string_chunks+0x140>
                return CborErrorIllegalType;
   135c6:	f44f 7382 	mov.w	r3, #260	; 0x104
   135ca:	e001      	b.n	135d0 <iterate_string_chunks+0x140>
                return CborErrorDataTooLarge;
   135cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
}
   135d0:	4618      	mov	r0, r3
   135d2:	b005      	add	sp, #20
   135d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                return CborErrorUnexpectedEOF;
   135d8:	f240 1301 	movw	r3, #257	; 0x101
   135dc:	e7f8      	b.n	135d0 <iterate_string_chunks+0x140>
        *next = *value;
   135de:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   135e2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   135e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        next->offset = offset;
   135e8:	9b02      	ldr	r3, [sp, #8]
   135ea:	6063      	str	r3, [r4, #4]
        return preparse_next_value(next);
   135ec:	4620      	mov	r0, r4
   135ee:	f7ff feda 	bl	133a6 <preparse_next_value>
   135f2:	4603      	mov	r3, r0
   135f4:	e7ec      	b.n	135d0 <iterate_string_chunks+0x140>
            return CborErrorUnexpectedEOF;
   135f6:	f240 1301 	movw	r3, #257	; 0x101
   135fa:	e7e9      	b.n	135d0 <iterate_string_chunks+0x140>

000135fc <advance_internal>:
{
   135fc:	b570      	push	{r4, r5, r6, lr}
   135fe:	4604      	mov	r4, r0
    CborError err = extract_number(it->parser, &it->offset,  &length);
   13600:	6806      	ldr	r6, [r0, #0]
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   13602:	6830      	ldr	r0, [r6, #0]
   13604:	6803      	ldr	r3, [r0, #0]
   13606:	6861      	ldr	r1, [r4, #4]
   13608:	4798      	blx	r3
   1360a:	f000 001f 	and.w	r0, r0, #31
    ++*offset;
   1360e:	6863      	ldr	r3, [r4, #4]
   13610:	3301      	adds	r3, #1
   13612:	6063      	str	r3, [r4, #4]
    if (additional_information < Value8Bit) {
   13614:	2817      	cmp	r0, #23
   13616:	d913      	bls.n	13640 <advance_internal+0x44>
    if (unlikely(additional_information > Value64Bit))
   13618:	281b      	cmp	r0, #27
   1361a:	d838      	bhi.n	1368e <advance_internal+0x92>
    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   1361c:	3818      	subs	r0, #24
   1361e:	2501      	movs	r5, #1
   13620:	4085      	lsls	r5, r0
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   13622:	6873      	ldr	r3, [r6, #4]
   13624:	6861      	ldr	r1, [r4, #4]
   13626:	1a5b      	subs	r3, r3, r1
   13628:	429d      	cmp	r5, r3
   1362a:	d835      	bhi.n	13698 <advance_internal+0x9c>
    } else if (bytesNeeded == 1) {
   1362c:	2d01      	cmp	r5, #1
   1362e:	d00a      	beq.n	13646 <advance_internal+0x4a>
    } else if (bytesNeeded == 2) {
   13630:	2d02      	cmp	r5, #2
   13632:	d022      	beq.n	1367a <advance_internal+0x7e>
    } else if (bytesNeeded == 4) {
   13634:	2d04      	cmp	r5, #4
   13636:	d025      	beq.n	13684 <advance_internal+0x88>
        *len =  p->d->get64(p->d, *offset);
   13638:	6830      	ldr	r0, [r6, #0]
   1363a:	68c3      	ldr	r3, [r0, #12]
   1363c:	4798      	blx	r3
   1363e:	e006      	b.n	1364e <advance_internal+0x52>
        *len = additional_information;
   13640:	2300      	movs	r3, #0
   13642:	4619      	mov	r1, r3
        return CborNoError;
   13644:	e007      	b.n	13656 <advance_internal+0x5a>
        *len = p->d->get8(p->d, *offset);
   13646:	6830      	ldr	r0, [r6, #0]
   13648:	6803      	ldr	r3, [r0, #0]
   1364a:	4798      	blx	r3
   1364c:	2100      	movs	r1, #0
    *offset += bytesNeeded;
   1364e:	6863      	ldr	r3, [r4, #4]
   13650:	442b      	add	r3, r5
   13652:	6063      	str	r3, [r4, #4]
    return CborNoError;
   13654:	2300      	movs	r3, #0
    assert(err == CborNoError);
   13656:	bb23      	cbnz	r3, 136a2 <advance_internal+0xa6>
    if (it->type == CborByteStringType || it->type == CborTextStringType) {
   13658:	7ba3      	ldrb	r3, [r4, #14]
   1365a:	2b40      	cmp	r3, #64	; 0x40
   1365c:	d001      	beq.n	13662 <advance_internal+0x66>
   1365e:	2b60      	cmp	r3, #96	; 0x60
   13660:	d107      	bne.n	13672 <advance_internal+0x76>
        assert(length == (size_t)length);
   13662:	bb21      	cbnz	r1, 136ae <advance_internal+0xb2>
        assert((it->flags & CborIteratorFlag_UnknownLength) == 0);
   13664:	7be3      	ldrb	r3, [r4, #15]
   13666:	f013 0f04 	tst.w	r3, #4
   1366a:	d126      	bne.n	136ba <advance_internal+0xbe>
        it->offset += length;
   1366c:	6863      	ldr	r3, [r4, #4]
   1366e:	4418      	add	r0, r3
   13670:	6060      	str	r0, [r4, #4]
    return preparse_next_value(it);
   13672:	4620      	mov	r0, r4
   13674:	f7ff fe97 	bl	133a6 <preparse_next_value>
}
   13678:	bd70      	pop	{r4, r5, r6, pc}
        *len =  p->d->get16(p->d, *offset);
   1367a:	6830      	ldr	r0, [r6, #0]
   1367c:	6843      	ldr	r3, [r0, #4]
   1367e:	4798      	blx	r3
   13680:	2100      	movs	r1, #0
   13682:	e7e4      	b.n	1364e <advance_internal+0x52>
        *len =  p->d->get32(p->d, *offset);
   13684:	6830      	ldr	r0, [r6, #0]
   13686:	6883      	ldr	r3, [r0, #8]
   13688:	4798      	blx	r3
   1368a:	2100      	movs	r1, #0
   1368c:	e7df      	b.n	1364e <advance_internal+0x52>
    *len = 1;
   1368e:	2001      	movs	r0, #1
   13690:	2100      	movs	r1, #0
        return CborErrorIllegalNumber;
   13692:	f240 1305 	movw	r3, #261	; 0x105
   13696:	e7de      	b.n	13656 <advance_internal+0x5a>
    *len = 1;
   13698:	2001      	movs	r0, #1
   1369a:	2100      	movs	r1, #0
        return CborErrorUnexpectedEOF;
   1369c:	f240 1301 	movw	r3, #257	; 0x101
   136a0:	e7d9      	b.n	13656 <advance_internal+0x5a>
    assert(err == CborNoError);
   136a2:	2300      	movs	r3, #0
   136a4:	461a      	mov	r2, r3
   136a6:	4619      	mov	r1, r3
   136a8:	4618      	mov	r0, r3
   136aa:	f7f5 fc5b 	bl	8f64 <__assert_func>
        assert(length == (size_t)length);
   136ae:	2300      	movs	r3, #0
   136b0:	461a      	mov	r2, r3
   136b2:	4619      	mov	r1, r3
   136b4:	4618      	mov	r0, r3
   136b6:	f7f5 fc55 	bl	8f64 <__assert_func>
        assert((it->flags & CborIteratorFlag_UnknownLength) == 0);
   136ba:	2300      	movs	r3, #0
   136bc:	461a      	mov	r2, r3
   136be:	4619      	mov	r1, r3
   136c0:	4618      	mov	r0, r3
   136c2:	f7f5 fc4f 	bl	8f64 <__assert_func>

000136c6 <_cbor_value_decode_int64_internal>:
{
   136c6:	b510      	push	{r4, lr}
   136c8:	4604      	mov	r4, r0
    uint8_t val = value->parser->d->get8(value->parser->d, value->offset);
   136ca:	6803      	ldr	r3, [r0, #0]
   136cc:	6818      	ldr	r0, [r3, #0]
   136ce:	6803      	ldr	r3, [r0, #0]
   136d0:	6861      	ldr	r1, [r4, #4]
   136d2:	4798      	blx	r3
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge ||
   136d4:	7be3      	ldrb	r3, [r4, #15]
   136d6:	f013 0f01 	tst.w	r3, #1
   136da:	d104      	bne.n	136e6 <_cbor_value_decode_int64_internal+0x20>
   136dc:	7ba3      	ldrb	r3, [r4, #14]
   136de:	2bfa      	cmp	r3, #250	; 0xfa
   136e0:	d001      	beq.n	136e6 <_cbor_value_decode_int64_internal+0x20>
   136e2:	2bfb      	cmp	r3, #251	; 0xfb
   136e4:	d111      	bne.n	1370a <_cbor_value_decode_int64_internal+0x44>
    assert((val & SmallValueMask) == Value32Bit || (val & SmallValueMask) == Value64Bit);
   136e6:	f000 031e 	and.w	r3, r0, #30
   136ea:	2b1a      	cmp	r3, #26
   136ec:	d113      	bne.n	13716 <_cbor_value_decode_int64_internal+0x50>
    if ((val & 1) == (Value32Bit & 1))
   136ee:	f010 0f01 	tst.w	r0, #1
   136f2:	d016      	beq.n	13722 <_cbor_value_decode_int64_internal+0x5c>
    assert((val & SmallValueMask) == Value64Bit);
   136f4:	f000 001f 	and.w	r0, r0, #31
   136f8:	281b      	cmp	r0, #27
   136fa:	d11a      	bne.n	13732 <_cbor_value_decode_int64_internal+0x6c>
        return value->parser->d->get64(value->parser->d, value->offset + 1);
   136fc:	6823      	ldr	r3, [r4, #0]
   136fe:	6818      	ldr	r0, [r3, #0]
   13700:	68c3      	ldr	r3, [r0, #12]
   13702:	6861      	ldr	r1, [r4, #4]
   13704:	3101      	adds	r1, #1
   13706:	4798      	blx	r3
}
   13708:	bd10      	pop	{r4, pc}
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge ||
   1370a:	2300      	movs	r3, #0
   1370c:	461a      	mov	r2, r3
   1370e:	4619      	mov	r1, r3
   13710:	4618      	mov	r0, r3
   13712:	f7f5 fc27 	bl	8f64 <__assert_func>
    assert((val & SmallValueMask) == Value32Bit || (val & SmallValueMask) == Value64Bit);
   13716:	2300      	movs	r3, #0
   13718:	461a      	mov	r2, r3
   1371a:	4619      	mov	r1, r3
   1371c:	4618      	mov	r0, r3
   1371e:	f7f5 fc21 	bl	8f64 <__assert_func>
        return value->parser->d->get32(value->parser->d, value->offset + 1);
   13722:	6823      	ldr	r3, [r4, #0]
   13724:	6818      	ldr	r0, [r3, #0]
   13726:	6883      	ldr	r3, [r0, #8]
   13728:	6861      	ldr	r1, [r4, #4]
   1372a:	3101      	adds	r1, #1
   1372c:	4798      	blx	r3
   1372e:	2100      	movs	r1, #0
   13730:	e7ea      	b.n	13708 <_cbor_value_decode_int64_internal+0x42>
    assert((val & SmallValueMask) == Value64Bit);
   13732:	2300      	movs	r3, #0
   13734:	461a      	mov	r2, r3
   13736:	4619      	mov	r1, r3
   13738:	4618      	mov	r0, r3
   1373a:	f7f5 fc13 	bl	8f64 <__assert_func>

0001373e <cbor_parser_init>:
{
   1373e:	b510      	push	{r4, lr}
   13740:	4604      	mov	r4, r0
   13742:	4618      	mov	r0, r3
    memset(parser, 0, sizeof(*parser));
   13744:	2300      	movs	r3, #0
   13746:	6013      	str	r3, [r2, #0]
   13748:	6053      	str	r3, [r2, #4]
   1374a:	6093      	str	r3, [r2, #8]
    parser->d = d;
   1374c:	6014      	str	r4, [r2, #0]
    parser->end = d->message_size;
   1374e:	69a4      	ldr	r4, [r4, #24]
   13750:	6054      	str	r4, [r2, #4]
    parser->flags = flags;
   13752:	6091      	str	r1, [r2, #8]
    it->parser = parser;
   13754:	6002      	str	r2, [r0, #0]
    it->offset = 0;
   13756:	6043      	str	r3, [r0, #4]
    it->remaining = 1;/* there's one type altogether, usually an array or map */
   13758:	2301      	movs	r3, #1
   1375a:	6083      	str	r3, [r0, #8]
    return preparse_value(it);
   1375c:	f7ff fd89 	bl	13272 <preparse_value>
}
   13760:	bd10      	pop	{r4, pc}

00013762 <cbor_value_enter_container>:
{
   13762:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13764:	4605      	mov	r5, r0
   13766:	460c      	mov	r4, r1
{ return it->type == CborArrayType || it->type == CborMapType; }
   13768:	7b83      	ldrb	r3, [r0, #14]
   1376a:	2b80      	cmp	r3, #128	; 0x80
   1376c:	d021      	beq.n	137b2 <cbor_value_enter_container+0x50>
   1376e:	2ba0      	cmp	r3, #160	; 0xa0
   13770:	d01d      	beq.n	137ae <cbor_value_enter_container+0x4c>
   13772:	2300      	movs	r3, #0
    assert(cbor_value_is_container(it));
   13774:	b1fb      	cbz	r3, 137b6 <cbor_value_enter_container+0x54>
    *recursed = *it;
   13776:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1377a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (it->flags & CborIteratorFlag_UnknownLength) {
   1377e:	7beb      	ldrb	r3, [r5, #15]
   13780:	f013 0f04 	tst.w	r3, #4
   13784:	d01c      	beq.n	137c0 <cbor_value_enter_container+0x5e>
        recursed->remaining = UINT32_MAX;
   13786:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1378a:	60a3      	str	r3, [r4, #8]
        ++recursed->offset;
   1378c:	460b      	mov	r3, r1
   1378e:	3301      	adds	r3, #1
   13790:	6063      	str	r3, [r4, #4]
        err = preparse_value(recursed);
   13792:	4620      	mov	r0, r4
   13794:	f7ff fd6d 	bl	13272 <preparse_value>
        if (err != CborErrorUnexpectedBreak)
   13798:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   1379c:	d106      	bne.n	137ac <cbor_value_enter_container+0x4a>
        ++recursed->offset;
   1379e:	6863      	ldr	r3, [r4, #4]
   137a0:	3301      	adds	r3, #1
   137a2:	6063      	str	r3, [r4, #4]
    recursed->type = CborInvalidType;
   137a4:	23ff      	movs	r3, #255	; 0xff
   137a6:	73a3      	strb	r3, [r4, #14]
    recursed->remaining = 0;
   137a8:	2000      	movs	r0, #0
   137aa:	60a0      	str	r0, [r4, #8]
}
   137ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   137ae:	2301      	movs	r3, #1
   137b0:	e7e0      	b.n	13774 <cbor_value_enter_container+0x12>
   137b2:	2301      	movs	r3, #1
   137b4:	e7de      	b.n	13774 <cbor_value_enter_container+0x12>
    assert(cbor_value_is_container(it));
   137b6:	461a      	mov	r2, r3
   137b8:	4619      	mov	r1, r3
   137ba:	4618      	mov	r0, r3
   137bc:	f7f5 fbd2 	bl	8f64 <__assert_func>
        err = extract_number(recursed->parser, &recursed->offset, &len);
   137c0:	6827      	ldr	r7, [r4, #0]
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   137c2:	6838      	ldr	r0, [r7, #0]
   137c4:	6803      	ldr	r3, [r0, #0]
   137c6:	6861      	ldr	r1, [r4, #4]
   137c8:	4798      	blx	r3
   137ca:	f000 001f 	and.w	r0, r0, #31
    ++*offset;
   137ce:	6863      	ldr	r3, [r4, #4]
   137d0:	3301      	adds	r3, #1
   137d2:	6063      	str	r3, [r4, #4]
    if (additional_information < Value8Bit) {
   137d4:	2817      	cmp	r0, #23
   137d6:	d913      	bls.n	13800 <cbor_value_enter_container+0x9e>
    if (unlikely(additional_information > Value64Bit))
   137d8:	281b      	cmp	r0, #27
   137da:	d838      	bhi.n	1384e <cbor_value_enter_container+0xec>
    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   137dc:	3818      	subs	r0, #24
   137de:	2601      	movs	r6, #1
   137e0:	4086      	lsls	r6, r0
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   137e2:	687b      	ldr	r3, [r7, #4]
   137e4:	6861      	ldr	r1, [r4, #4]
   137e6:	1a5b      	subs	r3, r3, r1
   137e8:	429e      	cmp	r6, r3
   137ea:	d835      	bhi.n	13858 <cbor_value_enter_container+0xf6>
    } else if (bytesNeeded == 1) {
   137ec:	2e01      	cmp	r6, #1
   137ee:	d00a      	beq.n	13806 <cbor_value_enter_container+0xa4>
    } else if (bytesNeeded == 2) {
   137f0:	2e02      	cmp	r6, #2
   137f2:	d022      	beq.n	1383a <cbor_value_enter_container+0xd8>
    } else if (bytesNeeded == 4) {
   137f4:	2e04      	cmp	r6, #4
   137f6:	d025      	beq.n	13844 <cbor_value_enter_container+0xe2>
        *len =  p->d->get64(p->d, *offset);
   137f8:	6838      	ldr	r0, [r7, #0]
   137fa:	68c3      	ldr	r3, [r0, #12]
   137fc:	4798      	blx	r3
   137fe:	e006      	b.n	1380e <cbor_value_enter_container+0xac>
        *len = additional_information;
   13800:	2300      	movs	r3, #0
   13802:	4619      	mov	r1, r3
        return CborNoError;
   13804:	e007      	b.n	13816 <cbor_value_enter_container+0xb4>
        *len = p->d->get8(p->d, *offset);
   13806:	6838      	ldr	r0, [r7, #0]
   13808:	6803      	ldr	r3, [r0, #0]
   1380a:	4798      	blx	r3
   1380c:	2100      	movs	r1, #0
    *offset += bytesNeeded;
   1380e:	6863      	ldr	r3, [r4, #4]
   13810:	4433      	add	r3, r6
   13812:	6063      	str	r3, [r4, #4]
    return CborNoError;
   13814:	2300      	movs	r3, #0
        assert(err == CborNoError);
   13816:	bb23      	cbnz	r3, 13862 <cbor_value_enter_container+0x100>
        recursed->remaining = (uint32_t)len;
   13818:	60a0      	str	r0, [r4, #8]
        if (recursed->remaining != len || len == UINT32_MAX) {
   1381a:	bb41      	cbnz	r1, 1386e <cbor_value_enter_container+0x10c>
   1381c:	2900      	cmp	r1, #0
   1381e:	bf08      	it	eq
   13820:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   13824:	d023      	beq.n	1386e <cbor_value_enter_container+0x10c>
        if (recursed->type == CborMapType) {
   13826:	7ba2      	ldrb	r2, [r4, #14]
   13828:	2aa0      	cmp	r2, #160	; 0xa0
   1382a:	d025      	beq.n	13878 <cbor_value_enter_container+0x116>
        if (len != 0)
   1382c:	ea50 0301 	orrs.w	r3, r0, r1
   13830:	d0b8      	beq.n	137a4 <cbor_value_enter_container+0x42>
            return preparse_value(recursed);
   13832:	4620      	mov	r0, r4
   13834:	f7ff fd1d 	bl	13272 <preparse_value>
   13838:	e7b8      	b.n	137ac <cbor_value_enter_container+0x4a>
        *len =  p->d->get16(p->d, *offset);
   1383a:	6838      	ldr	r0, [r7, #0]
   1383c:	6843      	ldr	r3, [r0, #4]
   1383e:	4798      	blx	r3
   13840:	2100      	movs	r1, #0
   13842:	e7e4      	b.n	1380e <cbor_value_enter_container+0xac>
        *len =  p->d->get32(p->d, *offset);
   13844:	6838      	ldr	r0, [r7, #0]
   13846:	6883      	ldr	r3, [r0, #8]
   13848:	4798      	blx	r3
   1384a:	2100      	movs	r1, #0
   1384c:	e7df      	b.n	1380e <cbor_value_enter_container+0xac>
    *len = 1;
   1384e:	2001      	movs	r0, #1
   13850:	2100      	movs	r1, #0
        return CborErrorIllegalNumber;
   13852:	f240 1305 	movw	r3, #261	; 0x105
   13856:	e7de      	b.n	13816 <cbor_value_enter_container+0xb4>
    *len = 1;
   13858:	2001      	movs	r0, #1
   1385a:	2100      	movs	r1, #0
        return CborErrorUnexpectedEOF;
   1385c:	f240 1301 	movw	r3, #257	; 0x101
   13860:	e7d9      	b.n	13816 <cbor_value_enter_container+0xb4>
        assert(err == CborNoError);
   13862:	2300      	movs	r3, #0
   13864:	461a      	mov	r2, r3
   13866:	4619      	mov	r1, r3
   13868:	4618      	mov	r0, r3
   1386a:	f7f5 fb7b 	bl	8f64 <__assert_func>
            recursed->offset = it->offset;
   1386e:	686b      	ldr	r3, [r5, #4]
   13870:	6063      	str	r3, [r4, #4]
            return CborErrorDataTooLarge;
   13872:	f44f 6080 	mov.w	r0, #1024	; 0x400
   13876:	e799      	b.n	137ac <cbor_value_enter_container+0x4a>
            if (recursed->remaining > UINT32_MAX / 2) {
   13878:	2800      	cmp	r0, #0
   1387a:	db02      	blt.n	13882 <cbor_value_enter_container+0x120>
            recursed->remaining *= 2;
   1387c:	0043      	lsls	r3, r0, #1
   1387e:	60a3      	str	r3, [r4, #8]
   13880:	e7d4      	b.n	1382c <cbor_value_enter_container+0xca>
                recursed->offset = it->offset;
   13882:	686b      	ldr	r3, [r5, #4]
   13884:	6063      	str	r3, [r4, #4]
                return CborErrorDataTooLarge;
   13886:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1388a:	e78f      	b.n	137ac <cbor_value_enter_container+0x4a>

0001388c <cbor_value_leave_container>:
{
   1388c:	b508      	push	{r3, lr}
   1388e:	7b83      	ldrb	r3, [r0, #14]
   13890:	2b80      	cmp	r3, #128	; 0x80
   13892:	d00d      	beq.n	138b0 <cbor_value_leave_container+0x24>
   13894:	2ba0      	cmp	r3, #160	; 0xa0
   13896:	d009      	beq.n	138ac <cbor_value_leave_container+0x20>
   13898:	2300      	movs	r3, #0
    assert(cbor_value_is_container(it));
   1389a:	b15b      	cbz	r3, 138b4 <cbor_value_leave_container+0x28>
    assert(recursed->type == CborInvalidType);
   1389c:	7b8b      	ldrb	r3, [r1, #14]
   1389e:	2bff      	cmp	r3, #255	; 0xff
   138a0:	d10d      	bne.n	138be <cbor_value_leave_container+0x32>
    it->offset = recursed->offset;
   138a2:	684b      	ldr	r3, [r1, #4]
   138a4:	6043      	str	r3, [r0, #4]
    return preparse_next_value(it);
   138a6:	f7ff fd7e 	bl	133a6 <preparse_next_value>
}
   138aa:	bd08      	pop	{r3, pc}
   138ac:	2301      	movs	r3, #1
   138ae:	e7f4      	b.n	1389a <cbor_value_leave_container+0xe>
   138b0:	2301      	movs	r3, #1
   138b2:	e7f2      	b.n	1389a <cbor_value_leave_container+0xe>
    assert(cbor_value_is_container(it));
   138b4:	461a      	mov	r2, r3
   138b6:	4619      	mov	r1, r3
   138b8:	4618      	mov	r0, r3
   138ba:	f7f5 fb53 	bl	8f64 <__assert_func>
    assert(recursed->type == CborInvalidType);
   138be:	2300      	movs	r3, #0
   138c0:	461a      	mov	r2, r3
   138c2:	4619      	mov	r1, r3
   138c4:	4618      	mov	r0, r3
   138c6:	f7f5 fb4d 	bl	8f64 <__assert_func>
	...

000138cc <_cbor_value_copy_string>:
 * \sa cbor_value_dup_text_string(), cbor_value_copy_text_string(), cbor_value_get_string_length(), cbor_value_calculate_string_length()
 */

CborError _cbor_value_copy_string(const CborValue *value, void *buffer,
                                 size_t *buflen, CborValue *next)
{
   138cc:	b500      	push	{lr}
   138ce:	b085      	sub	sp, #20
    bool copied_all;
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   138d0:	468c      	mov	ip, r1
   138d2:	b181      	cbz	r1, 138f6 <_cbor_value_copy_string+0x2a>
                                          buffer ? (IterateFunction) value->parser->d->cpy : iterate_noop);
   138d4:	6801      	ldr	r1, [r0, #0]
   138d6:	6809      	ldr	r1, [r1, #0]
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   138d8:	6949      	ldr	r1, [r1, #20]
   138da:	9101      	str	r1, [sp, #4]
   138dc:	9300      	str	r3, [sp, #0]
   138de:	f10d 030f 	add.w	r3, sp, #15
   138e2:	4661      	mov	r1, ip
   138e4:	f7ff fdd4 	bl	13490 <iterate_string_chunks>
    return err ? err :
   138e8:	b910      	cbnz	r0, 138f0 <_cbor_value_copy_string+0x24>
                 copied_all ? CborNoError : CborErrorOutOfMemory;
   138ea:	f89d 300f 	ldrb.w	r3, [sp, #15]
    return err ? err :
   138ee:	b123      	cbz	r3, 138fa <_cbor_value_copy_string+0x2e>
}
   138f0:	b005      	add	sp, #20
   138f2:	f85d fb04 	ldr.w	pc, [sp], #4
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   138f6:	4902      	ldr	r1, [pc, #8]	; (13900 <_cbor_value_copy_string+0x34>)
   138f8:	e7ef      	b.n	138da <_cbor_value_copy_string+0xe>
    return err ? err :
   138fa:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   138fe:	e7f7      	b.n	138f0 <_cbor_value_copy_string+0x24>
   13900:	0001326f 	.word	0x0001326f

00013904 <advance_recursive>:
{
   13904:	b570      	push	{r4, r5, r6, lr}
   13906:	b086      	sub	sp, #24
   13908:	4604      	mov	r4, r0
   1390a:	460d      	mov	r5, r1
    if (is_fixed_type(it->type))
   1390c:	7b86      	ldrb	r6, [r0, #14]
   1390e:	4630      	mov	r0, r6
   13910:	f7ff fc9b 	bl	1324a <is_fixed_type>
   13914:	b9c0      	cbnz	r0, 13948 <advance_recursive+0x44>
   13916:	2e80      	cmp	r6, #128	; 0x80
   13918:	d01f      	beq.n	1395a <advance_recursive+0x56>
   1391a:	2ea0      	cmp	r6, #160	; 0xa0
   1391c:	d01b      	beq.n	13956 <advance_recursive+0x52>
   1391e:	2300      	movs	r3, #0
    if (!cbor_value_is_container(it)) {
   13920:	b1eb      	cbz	r3, 1395e <advance_recursive+0x5a>
    if (nestingLevel == CBOR_PARSER_MAX_RECURSIONS)
   13922:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   13926:	d02b      	beq.n	13980 <advance_recursive+0x7c>
    err = cbor_value_enter_container(it, &recursed);
   13928:	a902      	add	r1, sp, #8
   1392a:	4620      	mov	r0, r4
   1392c:	f7ff ff19 	bl	13762 <cbor_value_enter_container>
    if (err)
   13930:	4603      	mov	r3, r0
   13932:	b968      	cbnz	r0, 13950 <advance_recursive+0x4c>
{ return it->remaining == 0; }
   13934:	9b04      	ldr	r3, [sp, #16]
    while (!cbor_value_at_end(&recursed)) {
   13936:	b1eb      	cbz	r3, 13974 <advance_recursive+0x70>
        err = advance_recursive(&recursed, nestingLevel + 1);
   13938:	1c69      	adds	r1, r5, #1
   1393a:	a802      	add	r0, sp, #8
   1393c:	f7ff ffe2 	bl	13904 <advance_recursive>
        if (err)
   13940:	4603      	mov	r3, r0
   13942:	2800      	cmp	r0, #0
   13944:	d0f6      	beq.n	13934 <advance_recursive+0x30>
   13946:	e003      	b.n	13950 <advance_recursive+0x4c>
        return advance_internal(it);
   13948:	4620      	mov	r0, r4
   1394a:	f7ff fe57 	bl	135fc <advance_internal>
   1394e:	4603      	mov	r3, r0
}
   13950:	4618      	mov	r0, r3
   13952:	b006      	add	sp, #24
   13954:	bd70      	pop	{r4, r5, r6, pc}
{ return it->type == CborArrayType || it->type == CborMapType; }
   13956:	2301      	movs	r3, #1
   13958:	e7e2      	b.n	13920 <advance_recursive+0x1c>
   1395a:	2301      	movs	r3, #1
   1395c:	e7e0      	b.n	13920 <advance_recursive+0x1c>
        size_t len = SIZE_MAX;
   1395e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13962:	9301      	str	r3, [sp, #4]
        return _cbor_value_copy_string(it, NULL, &len, it);
   13964:	4623      	mov	r3, r4
   13966:	aa01      	add	r2, sp, #4
   13968:	2100      	movs	r1, #0
   1396a:	4620      	mov	r0, r4
   1396c:	f7ff ffae 	bl	138cc <_cbor_value_copy_string>
   13970:	4603      	mov	r3, r0
   13972:	e7ed      	b.n	13950 <advance_recursive+0x4c>
    return cbor_value_leave_container(it, &recursed);
   13974:	a902      	add	r1, sp, #8
   13976:	4620      	mov	r0, r4
   13978:	f7ff ff88 	bl	1388c <cbor_value_leave_container>
   1397c:	4603      	mov	r3, r0
   1397e:	e7e7      	b.n	13950 <advance_recursive+0x4c>
        return CborErrorNestingTooDeep;
   13980:	f240 4301 	movw	r3, #1025	; 0x401
   13984:	e7e4      	b.n	13950 <advance_recursive+0x4c>

00013986 <cbor_value_advance>:
{
   13986:	b508      	push	{r3, lr}
    assert(it->type != CborInvalidType);
   13988:	7b83      	ldrb	r3, [r0, #14]
   1398a:	2bff      	cmp	r3, #255	; 0xff
   1398c:	d005      	beq.n	1399a <cbor_value_advance+0x14>
    if (!it->remaining)
   1398e:	6883      	ldr	r3, [r0, #8]
   13990:	b14b      	cbz	r3, 139a6 <cbor_value_advance+0x20>
    return advance_recursive(it, 0);
   13992:	2100      	movs	r1, #0
   13994:	f7ff ffb6 	bl	13904 <advance_recursive>
}
   13998:	bd08      	pop	{r3, pc}
    assert(it->type != CborInvalidType);
   1399a:	2300      	movs	r3, #0
   1399c:	461a      	mov	r2, r3
   1399e:	4619      	mov	r1, r3
   139a0:	4618      	mov	r0, r3
   139a2:	f7f5 fadf 	bl	8f64 <__assert_func>
        return CborErrorAdvancePastEOF;
   139a6:	2003      	movs	r0, #3
   139a8:	e7f6      	b.n	13998 <cbor_value_advance+0x12>

000139aa <cbor_value_calculate_string_length>:
{
   139aa:	b508      	push	{r3, lr}
   139ac:	460a      	mov	r2, r1
    *len = SIZE_MAX;
   139ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   139b2:	600b      	str	r3, [r1, #0]
    return _cbor_value_copy_string(value, NULL, len, NULL);
   139b4:	2300      	movs	r3, #0
   139b6:	4619      	mov	r1, r3
   139b8:	f7ff ff88 	bl	138cc <_cbor_value_copy_string>
}
   139bc:	bd08      	pop	{r3, pc}
	...

000139c0 <hal_bsp_flash_dev>:


const struct hal_flash *
hal_bsp_flash_dev(uint8_t id)
{
    switch (id) {
   139c0:	b908      	cbnz	r0, 139c6 <hal_bsp_flash_dev+0x6>
    case 0:
        /* MCU internal flash. */
        return &nrf52k_flash_dev;
   139c2:	4802      	ldr	r0, [pc, #8]	; (139cc <hal_bsp_flash_dev+0xc>)
   139c4:	4770      	bx	lr
    default:
        /* External flash.  Assume not present in this BSP. */
        return NULL;
   139c6:	2000      	movs	r0, #0
    }
}
   139c8:	4770      	bx	lr
   139ca:	bf00      	nop
   139cc:	000245ec 	.word	0x000245ec

000139d0 <hal_bsp_init>:
}


void
hal_bsp_init(void)
{
   139d0:	b500      	push	{lr}
   139d2:	b083      	sub	sp, #12
    int rc;

    (void)rc;

    /* Make sure system clocks have started */
    hal_system_clock_start();
   139d4:	f7f4 fc12 	bl	81fc <hal_system_clock_start>

    /* Create all available nRF52832 peripherals */
    nrf52_periph_create();
   139d8:	f005 f922 	bl	18c20 <nrf52_periph_create>
    return (dpl_error_t)os_sem_init(&sem->sem, tokens);
   139dc:	2101      	movs	r1, #1
   139de:	4811      	ldr	r0, [pc, #68]	; (13a24 <hal_bsp_init+0x54>)
   139e0:	f7f6 f9d8 	bl	9d94 <os_sem_init>

#if MYNEWT_VAL(SPI_0_MASTER)
    rc = dpl_sem_init(&g_spi0_sem, 0x1);
    assert(rc == 0);
   139e4:	b988      	cbnz	r0, 13a0a <hal_bsp_init+0x3a>
#endif

#if MYNEWT_VAL(DW1000_DEVICE_0)
    dw1000_0 = hal_dw1000_inst(0);
   139e6:	2000      	movs	r0, #0
   139e8:	f001 f80c 	bl	14a04 <hal_dw1000_inst>
   139ec:	4b0e      	ldr	r3, [pc, #56]	; (13a28 <hal_bsp_init+0x58>)
   139ee:	6018      	str	r0, [r3, #0]
    rc = os_dev_create((struct os_dev *) dw1000_0, "dw1000_0",
   139f0:	4b0e      	ldr	r3, [pc, #56]	; (13a2c <hal_bsp_init+0x5c>)
   139f2:	9301      	str	r3, [sp, #4]
   139f4:	4b0e      	ldr	r3, [pc, #56]	; (13a30 <hal_bsp_init+0x60>)
   139f6:	9300      	str	r3, [sp, #0]
   139f8:	2300      	movs	r3, #0
   139fa:	2201      	movs	r2, #1
   139fc:	490d      	ldr	r1, [pc, #52]	; (13a34 <hal_bsp_init+0x64>)
   139fe:	f7f5 fd7b 	bl	94f8 <os_dev_create>
      OS_DEV_INIT_PRIMARY, 0, dw1000_dev_init, (void *)&dw1000_0_cfg);
    assert(rc == 0);
   13a02:	b940      	cbnz	r0, 13a16 <hal_bsp_init+0x46>
#endif
}
   13a04:	b003      	add	sp, #12
   13a06:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   13a0a:	2300      	movs	r3, #0
   13a0c:	461a      	mov	r2, r3
   13a0e:	4619      	mov	r1, r3
   13a10:	4618      	mov	r0, r3
   13a12:	f7f5 faa7 	bl	8f64 <__assert_func>
    assert(rc == 0);
   13a16:	2300      	movs	r3, #0
   13a18:	461a      	mov	r2, r3
   13a1a:	4619      	mov	r1, r3
   13a1c:	4618      	mov	r0, r3
   13a1e:	f7f5 faa1 	bl	8f64 <__assert_func>
   13a22:	bf00      	nop
   13a24:	20004560 	.word	0x20004560
   13a28:	2000455c 	.word	0x2000455c
   13a2c:	00023fc8 	.word	0x00023fc8
   13a30:	0001483d 	.word	0x0001483d
   13a34:	00023fbc 	.word	0x00023fbc

00013a38 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   13a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
   13a3c:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 13be0 <SEGGER_RTT_WriteNoLock+0x1a8>
   13a40:	eb00 0640 	add.w	r6, r0, r0, lsl #1
   13a44:	eb09 06c6 	add.w	r6, r9, r6, lsl #3
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   13a48:	b083      	sub	sp, #12
  switch (pRing->Flags) {
   13a4a:	6af7      	ldr	r7, [r6, #44]	; 0x2c
   13a4c:	2f01      	cmp	r7, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   13a4e:	4680      	mov	r8, r0
   13a50:	468b      	mov	fp, r1
   13a52:	4692      	mov	sl, r2
  switch (pRing->Flags) {
   13a54:	ea4f 0440 	mov.w	r4, r0, lsl #1
   13a58:	d007      	beq.n	13a6a <SEGGER_RTT_WriteNoLock+0x32>
   13a5a:	2f02      	cmp	r7, #2
   13a5c:	d049      	beq.n	13af2 <SEGGER_RTT_WriteNoLock+0xba>
   13a5e:	b33f      	cbz	r7, 13ab0 <SEGGER_RTT_WriteNoLock+0x78>
   13a60:	2700      	movs	r7, #0
  }
  //
  // Finish up.
  //
  return Status;
}
   13a62:	4638      	mov	r0, r7
   13a64:	b003      	add	sp, #12
   13a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  RdOff = pRing->RdOff;
   13a6a:	6ab7      	ldr	r7, [r6, #40]	; 0x28
  WrOff = pRing->WrOff;
   13a6c:	6a75      	ldr	r5, [r6, #36]	; 0x24
  if (RdOff <= WrOff) {
   13a6e:	42af      	cmp	r7, r5
   13a70:	d97a      	bls.n	13b68 <SEGGER_RTT_WriteNoLock+0x130>
    r = RdOff - WrOff - 1u;
   13a72:	3f01      	subs	r7, #1
   13a74:	1b7f      	subs	r7, r7, r5
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   13a76:	6a36      	ldr	r6, [r6, #32]
    Status = Avail < NumBytes ? Avail : NumBytes;
   13a78:	4557      	cmp	r7, sl
   13a7a:	bf28      	it	cs
   13a7c:	4657      	movcs	r7, sl
  Rem = pRing->SizeOfBuffer - WrOff;
   13a7e:	1b72      	subs	r2, r6, r5
  if (Rem > NumBytes) {
   13a80:	4297      	cmp	r7, r2
   13a82:	d27b      	bcs.n	13b7c <SEGGER_RTT_WriteNoLock+0x144>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   13a84:	f108 0301 	add.w	r3, r8, #1
   13a88:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   13a8c:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
   13a90:	4659      	mov	r1, fp
   13a92:	6858      	ldr	r0, [r3, #4]
   13a94:	463a      	mov	r2, r7
   13a96:	4428      	add	r0, r5
   13a98:	f7fa f812 	bl	dac0 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
   13a9c:	4444      	add	r4, r8
   13a9e:	eb09 09c4 	add.w	r9, r9, r4, lsl #3
   13aa2:	443d      	add	r5, r7
}
   13aa4:	4638      	mov	r0, r7
    pRing->WrOff = WrOff + NumBytes;
   13aa6:	f8c9 5024 	str.w	r5, [r9, #36]	; 0x24
}
   13aaa:	b003      	add	sp, #12
   13aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  RdOff = pRing->RdOff;
   13ab0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  WrOff = pRing->WrOff;
   13ab2:	6a75      	ldr	r5, [r6, #36]	; 0x24
  if (RdOff <= WrOff) {
   13ab4:	42ab      	cmp	r3, r5
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   13ab6:	bf9c      	itt	ls
   13ab8:	6a32      	ldrls	r2, [r6, #32]
   13aba:	189b      	addls	r3, r3, r2
    r = RdOff - WrOff - 1u;
   13abc:	3b01      	subs	r3, #1
   13abe:	1b5b      	subs	r3, r3, r5
    if (Avail < NumBytes) {
   13ac0:	459a      	cmp	sl, r3
   13ac2:	d8ce      	bhi.n	13a62 <SEGGER_RTT_WriteNoLock+0x2a>
  Rem = pRing->SizeOfBuffer - WrOff;
   13ac4:	4404      	add	r4, r0
   13ac6:	eb09 04c4 	add.w	r4, r9, r4, lsl #3
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   13aca:	f100 0801 	add.w	r8, r0, #1
  Rem = pRing->SizeOfBuffer - WrOff;
   13ace:	6a26      	ldr	r6, [r4, #32]
   13ad0:	1b77      	subs	r7, r6, r5
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   13ad2:	eb08 0848 	add.w	r8, r8, r8, lsl #1
  if (Rem > NumBytes) {
   13ad6:	45ba      	cmp	sl, r7
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   13ad8:	eb09 09c8 	add.w	r9, r9, r8, lsl #3
  if (Rem > NumBytes) {
   13adc:	d26e      	bcs.n	13bbc <SEGGER_RTT_WriteNoLock+0x184>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   13ade:	f8d9 0004 	ldr.w	r0, [r9, #4]
   13ae2:	4652      	mov	r2, sl
   13ae4:	4428      	add	r0, r5
    pRing->WrOff = WrOff + NumBytes;
   13ae6:	4455      	add	r5, sl
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   13ae8:	f7f9 ffea 	bl	dac0 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
   13aec:	4657      	mov	r7, sl
   13aee:	6265      	str	r5, [r4, #36]	; 0x24
   13af0:	e7b7      	b.n	13a62 <SEGGER_RTT_WriteNoLock+0x2a>
  WrOff = pRing->WrOff;
   13af2:	f100 0801 	add.w	r8, r0, #1
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   13af6:	eb08 0848 	add.w	r8, r8, r8, lsl #1
  WrOff = pRing->WrOff;
   13afa:	6a75      	ldr	r5, [r6, #36]	; 0x24
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   13afc:	ea4f 08c8 	mov.w	r8, r8, lsl #3
  NumBytesWritten = 0u;
   13b00:	2700      	movs	r7, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   13b02:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    if (RdOff > WrOff) {
   13b04:	42aa      	cmp	r2, r5
      NumBytesToWrite = RdOff - WrOff - 1u;
   13b06:	f102 34ff 	add.w	r4, r2, #4294967295	; 0xffffffff
    if (RdOff > WrOff) {
   13b0a:	d922      	bls.n	13b52 <SEGGER_RTT_WriteNoLock+0x11a>
      NumBytesToWrite = RdOff - WrOff - 1u;
   13b0c:	1b62      	subs	r2, r4, r5
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   13b0e:	6a34      	ldr	r4, [r6, #32]
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   13b10:	4552      	cmp	r2, sl
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   13b12:	eb09 0108 	add.w	r1, r9, r8
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   13b16:	eba4 0405 	sub.w	r4, r4, r5
   13b1a:	bf28      	it	cs
   13b1c:	4652      	movcs	r2, sl
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   13b1e:	4294      	cmp	r4, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   13b20:	6848      	ldr	r0, [r1, #4]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   13b22:	bf28      	it	cs
   13b24:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   13b26:	4428      	add	r0, r5
   13b28:	4659      	mov	r1, fp
   13b2a:	4622      	mov	r2, r4
   13b2c:	f7f9 ffc8 	bl	dac0 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   13b30:	6a33      	ldr	r3, [r6, #32]
    WrOff           += NumBytesToWrite;
   13b32:	4425      	add	r5, r4
    if (WrOff == pRing->SizeOfBuffer) {
   13b34:	429d      	cmp	r5, r3
    NumBytes        -= NumBytesToWrite;
   13b36:	ebaa 0a04 	sub.w	sl, sl, r4
    NumBytesWritten += NumBytesToWrite;
   13b3a:	4427      	add	r7, r4
    pBuffer         += NumBytesToWrite;
   13b3c:	44a3      	add	fp, r4
    if (WrOff == pRing->SizeOfBuffer) {
   13b3e:	d00d      	beq.n	13b5c <SEGGER_RTT_WriteNoLock+0x124>
    pRing->WrOff = WrOff;
   13b40:	6275      	str	r5, [r6, #36]	; 0x24
  } while (NumBytes);
   13b42:	f1ba 0f00 	cmp.w	sl, #0
   13b46:	d08c      	beq.n	13a62 <SEGGER_RTT_WriteNoLock+0x2a>
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   13b48:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    if (RdOff > WrOff) {
   13b4a:	42aa      	cmp	r2, r5
      NumBytesToWrite = RdOff - WrOff - 1u;
   13b4c:	f102 34ff 	add.w	r4, r2, #4294967295	; 0xffffffff
    if (RdOff > WrOff) {
   13b50:	d8dc      	bhi.n	13b0c <SEGGER_RTT_WriteNoLock+0xd4>
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   13b52:	6a34      	ldr	r4, [r6, #32]
   13b54:	4422      	add	r2, r4
   13b56:	3a01      	subs	r2, #1
   13b58:	1b52      	subs	r2, r2, r5
   13b5a:	e7d9      	b.n	13b10 <SEGGER_RTT_WriteNoLock+0xd8>
    pRing->WrOff = WrOff;
   13b5c:	2500      	movs	r5, #0
   13b5e:	6275      	str	r5, [r6, #36]	; 0x24
  } while (NumBytes);
   13b60:	f1ba 0f00 	cmp.w	sl, #0
   13b64:	d1cd      	bne.n	13b02 <SEGGER_RTT_WriteNoLock+0xca>
   13b66:	e77c      	b.n	13a62 <SEGGER_RTT_WriteNoLock+0x2a>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   13b68:	6a36      	ldr	r6, [r6, #32]
   13b6a:	4437      	add	r7, r6
   13b6c:	3f01      	subs	r7, #1
   13b6e:	1b7f      	subs	r7, r7, r5
    Status = Avail < NumBytes ? Avail : NumBytes;
   13b70:	4557      	cmp	r7, sl
   13b72:	bf28      	it	cs
   13b74:	4657      	movcs	r7, sl
  Rem = pRing->SizeOfBuffer - WrOff;
   13b76:	1b72      	subs	r2, r6, r5
  if (Rem > NumBytes) {
   13b78:	4297      	cmp	r7, r2
   13b7a:	d383      	bcc.n	13a84 <SEGGER_RTT_WriteNoLock+0x4c>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   13b7c:	f108 0a01 	add.w	sl, r8, #1
   13b80:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
   13b84:	eb09 0aca 	add.w	sl, r9, sl, lsl #3
   13b88:	4659      	mov	r1, fp
   13b8a:	f8da 0004 	ldr.w	r0, [sl, #4]
   13b8e:	9201      	str	r2, [sp, #4]
   13b90:	4428      	add	r0, r5
   13b92:	f7f9 ff95 	bl	dac0 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
   13b96:	1bbe      	subs	r6, r7, r6
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   13b98:	9a01      	ldr	r2, [sp, #4]
   13b9a:	f8da 0004 	ldr.w	r0, [sl, #4]
    NumBytesAtOnce = NumBytes - Rem;
   13b9e:	4435      	add	r5, r6
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   13ba0:	eb0b 0102 	add.w	r1, fp, r2
   13ba4:	462a      	mov	r2, r5
   13ba6:	f7f9 ff8b 	bl	dac0 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   13baa:	4444      	add	r4, r8
   13bac:	eb09 09c4 	add.w	r9, r9, r4, lsl #3
}
   13bb0:	4638      	mov	r0, r7
    pRing->WrOff = NumBytesAtOnce;
   13bb2:	f8c9 5024 	str.w	r5, [r9, #36]	; 0x24
}
   13bb6:	b003      	add	sp, #12
   13bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   13bbc:	f8d9 0004 	ldr.w	r0, [r9, #4]
   13bc0:	4428      	add	r0, r5
    NumBytesAtOnce = NumBytes - Rem;
   13bc2:	4455      	add	r5, sl
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   13bc4:	463a      	mov	r2, r7
    NumBytesAtOnce = NumBytes - Rem;
   13bc6:	1bad      	subs	r5, r5, r6
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   13bc8:	f7f9 ff7a 	bl	dac0 <memcpy>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   13bcc:	eb0b 0107 	add.w	r1, fp, r7
   13bd0:	f8d9 0004 	ldr.w	r0, [r9, #4]
   13bd4:	462a      	mov	r2, r5
   13bd6:	f7f9 ff73 	bl	dac0 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   13bda:	4657      	mov	r7, sl
   13bdc:	6265      	str	r5, [r4, #36]	; 0x24
   13bde:	e740      	b.n	13a62 <SEGGER_RTT_WriteNoLock+0x2a>
   13be0:	200000d8 	.word	0x200000d8

00013be4 <SEGGER_RTT_GetKey>:
*    >= 0 -   Character which has been read. (Possible values: 0 - 255)
*
*  Notes
*    (1) This function is only specified for accesses to RTT buffer 0.
*/
int SEGGER_RTT_GetKey(void) {
   13be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  INIT();
   13be8:	4c3e      	ldr	r4, [pc, #248]	; (13ce4 <SEGGER_RTT_GetKey+0x100>)
int SEGGER_RTT_GetKey(void) {
   13bea:	b082      	sub	sp, #8
  SEGGER_RTT_LOCK();
   13bec:	f7f6 fbd2 	bl	a394 <os_arch_save_sr>
  INIT();
   13bf0:	7825      	ldrb	r5, [r4, #0]
  SEGGER_RTT_LOCK();
   13bf2:	4606      	mov	r6, r0
  INIT();
   13bf4:	2d00      	cmp	r5, #0
   13bf6:	d04d      	beq.n	13c94 <SEGGER_RTT_GetKey+0xb0>
  WrOff = pRing->WrOff;
   13bf8:	f8d4 a03c 	ldr.w	sl, [r4, #60]	; 0x3c
  RdOff = pRing->RdOff;
   13bfc:	6c25      	ldr	r5, [r4, #64]	; 0x40
  if (RdOff > WrOff) {
   13bfe:	4555      	cmp	r5, sl
   13c00:	d809      	bhi.n	13c16 <SEGGER_RTT_GetKey+0x32>
  if (NumBytesRem > 0u) {
   13c02:	4555      	cmp	r5, sl
   13c04:	d128      	bne.n	13c58 <SEGGER_RTT_GetKey+0x74>
  SEGGER_RTT_UNLOCK();
   13c06:	4630      	mov	r0, r6
   13c08:	f7f6 fbca 	bl	a3a0 <os_arch_restore_sr>

  r = (int)SEGGER_RTT_Read(0u, &c, 1u);
  if (r == 1) {
    r = (int)(unsigned char)c;
  } else {
    r = -1;
   13c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  }
  return r;
}
   13c10:	b002      	add	sp, #8
   13c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
   13c16:	e9d4 980d 	ldrd	r9, r8, [r4, #52]	; 0x34
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
   13c1a:	eba8 0705 	sub.w	r7, r8, r5
    NumBytesRem = MIN(NumBytesRem, BufferSize);
   13c1e:	2f01      	cmp	r7, #1
   13c20:	bf28      	it	cs
   13c22:	2701      	movcs	r7, #1
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
   13c24:	463a      	mov	r2, r7
   13c26:	eb09 0105 	add.w	r1, r9, r5
   13c2a:	f10d 0007 	add.w	r0, sp, #7
   13c2e:	f7f9 ff47 	bl	dac0 <memcpy>
    RdOff        += NumBytesRem;
   13c32:	19eb      	adds	r3, r5, r7
    if (RdOff == pRing->SizeOfBuffer) {
   13c34:	4598      	cmp	r8, r3
    BufferSize   -= NumBytesRem;
   13c36:	f1c7 0201 	rsb	r2, r7, #1
  NumBytesRem = WrOff - RdOff;
   13c3a:	bf14      	ite	ne
   13c3c:	ebaa 0a03 	subne.w	sl, sl, r3
      RdOff = 0u;
   13c40:	2300      	moveq	r3, #0
  NumBytesRem = MIN(NumBytesRem, BufferSize);
   13c42:	4552      	cmp	r2, sl
   13c44:	bf28      	it	cs
   13c46:	4652      	movcs	r2, sl
  if (NumBytesRem > 0u) {
   13c48:	b9a2      	cbnz	r2, 13c74 <SEGGER_RTT_GetKey+0x90>
  if (NumBytesRead) {
   13c4a:	4545      	cmp	r5, r8
   13c4c:	d0db      	beq.n	13c06 <SEGGER_RTT_GetKey+0x22>
  SEGGER_RTT_UNLOCK();
   13c4e:	4630      	mov	r0, r6
    pRing->RdOff = RdOff;
   13c50:	6423      	str	r3, [r4, #64]	; 0x40
  SEGGER_RTT_UNLOCK();
   13c52:	f7f6 fba5 	bl	a3a0 <os_arch_restore_sr>
  if (r == 1) {
   13c56:	e008      	b.n	13c6a <SEGGER_RTT_GetKey+0x86>
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
   13c58:	6b62      	ldr	r2, [r4, #52]	; 0x34
    RdOff        += NumBytesRem;
   13c5a:	1c6b      	adds	r3, r5, #1
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
   13c5c:	5d52      	ldrb	r2, [r2, r5]
   13c5e:	f88d 2007 	strb.w	r2, [sp, #7]
  SEGGER_RTT_UNLOCK();
   13c62:	4630      	mov	r0, r6
    pRing->RdOff = RdOff;
   13c64:	6423      	str	r3, [r4, #64]	; 0x40
  SEGGER_RTT_UNLOCK();
   13c66:	f7f6 fb9b 	bl	a3a0 <os_arch_restore_sr>
    r = (int)(unsigned char)c;
   13c6a:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
   13c6e:	b002      	add	sp, #8
   13c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
   13c74:	f107 0208 	add.w	r2, r7, #8
   13c78:	eb0d 0702 	add.w	r7, sp, r2
   13c7c:	f819 2003 	ldrb.w	r2, [r9, r3]
   13c80:	f807 2c01 	strb.w	r2, [r7, #-1]
    RdOff        += NumBytesRem;
   13c84:	3301      	adds	r3, #1
  SEGGER_RTT_UNLOCK();
   13c86:	4630      	mov	r0, r6
    pRing->RdOff = RdOff;
   13c88:	6423      	str	r3, [r4, #64]	; 0x40
  SEGGER_RTT_UNLOCK();
   13c8a:	f7f6 fb89 	bl	a3a0 <os_arch_restore_sr>
  if (r == 1) {
   13c8e:	4545      	cmp	r5, r8
   13c90:	d0eb      	beq.n	13c6a <SEGGER_RTT_GetKey+0x86>
   13c92:	e7bb      	b.n	13c0c <SEGGER_RTT_GetKey+0x28>
  p->aUp[0].sName         = "Terminal";
   13c94:	4a14      	ldr	r2, [pc, #80]	; (13ce8 <SEGGER_RTT_GetKey+0x104>)
  p->aUp[0].RdOff         = 0u;
   13c96:	62a5      	str	r5, [r4, #40]	; 0x28
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   13c98:	2301      	movs	r3, #1
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   13c9a:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
   13c9e:	f104 0348 	add.w	r3, r4, #72	; 0x48
   13ca2:	e9c4 2306 	strd	r2, r3, [r4, #24]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   13ca6:	f44f 6380 	mov.w	r3, #1024	; 0x400
   13caa:	6223      	str	r3, [r4, #32]
  strcpy(&p->acID[7], "RTT");
   13cac:	4b0f      	ldr	r3, [pc, #60]	; (13cec <SEGGER_RTT_GetKey+0x108>)
  p->aDown[0].WrOff         = 0u;
   13cae:	63e5      	str	r5, [r4, #60]	; 0x3c
  strcpy(&p->acID[7], "RTT");
   13cb0:	6818      	ldr	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
   13cb2:	4b0f      	ldr	r3, [pc, #60]	; (13cf0 <SEGGER_RTT_GetKey+0x10c>)
  WrOff = pRing->WrOff;
   13cb4:	f8d4 a03c 	ldr.w	sl, [r4, #60]	; 0x3c
  strcpy(&p->acID[7], "RTT");
   13cb8:	f8c4 0007 	str.w	r0, [r4, #7]
  p->aDown[0].pBuffer       = _acDownBuffer;
   13cbc:	f504 6189 	add.w	r1, r4, #1096	; 0x448
   13cc0:	6361      	str	r1, [r4, #52]	; 0x34
  strcpy(&p->acID[0], "SEGGER");
   13cc2:	e893 0003 	ldmia.w	r3, {r0, r1}
  p->acID[6] = ' ';
   13cc6:	2320      	movs	r3, #32
   13cc8:	71a3      	strb	r3, [r4, #6]
  if (NumBytesRem > 0u) {
   13cca:	4555      	cmp	r5, sl
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   13ccc:	f04f 0310 	mov.w	r3, #16
  p->aDown[0].sName         = "Terminal";
   13cd0:	e9c4 520b 	strd	r5, r2, [r4, #44]	; 0x2c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   13cd4:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
  p->aUp[0].WrOff         = 0u;
   13cd8:	6265      	str	r5, [r4, #36]	; 0x24
  strcpy(&p->acID[0], "SEGGER");
   13cda:	6020      	str	r0, [r4, #0]
   13cdc:	80a1      	strh	r1, [r4, #4]
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   13cde:	63a3      	str	r3, [r4, #56]	; 0x38
  if (NumBytesRem > 0u) {
   13ce0:	d091      	beq.n	13c06 <SEGGER_RTT_GetKey+0x22>
   13ce2:	e7b9      	b.n	13c58 <SEGGER_RTT_GetKey+0x74>
   13ce4:	200000d8 	.word	0x200000d8
   13ce8:	00023fe0 	.word	0x00023fe0
   13cec:	00023fec 	.word	0x00023fec
   13cf0:	00023ff0 	.word	0x00023ff0

00013cf4 <SEGGER_RTT_Init>:
  strcpy(&p->acID[7], "RTT");
   13cf4:	4814      	ldr	r0, [pc, #80]	; (13d48 <SEGGER_RTT_Init+0x54>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   13cf6:	4b15      	ldr	r3, [pc, #84]	; (13d4c <SEGGER_RTT_Init+0x58>)
  strcpy(&p->acID[0], "SEGGER");
   13cf8:	4915      	ldr	r1, [pc, #84]	; (13d50 <SEGGER_RTT_Init+0x5c>)
  strcpy(&p->acID[7], "RTT");
   13cfa:	6800      	ldr	r0, [r0, #0]
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
   13cfc:	b410      	push	{r4}
  strcpy(&p->acID[7], "RTT");
   13cfe:	f8c3 0007 	str.w	r0, [r3, #7]
  strcpy(&p->acID[0], "SEGGER");
   13d02:	c903      	ldmia	r1, {r0, r1}
  p->aUp[0].sName         = "Terminal";
   13d04:	4c13      	ldr	r4, [pc, #76]	; (13d54 <SEGGER_RTT_Init+0x60>)
  strcpy(&p->acID[0], "SEGGER");
   13d06:	6018      	str	r0, [r3, #0]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   13d08:	2001      	movs	r0, #1
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   13d0a:	e9c3 0004 	strd	r0, r0, [r3, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
   13d0e:	f103 0048 	add.w	r0, r3, #72	; 0x48
   13d12:	e9c3 4006 	strd	r4, r0, [r3, #24]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   13d16:	f44f 6080 	mov.w	r0, #1024	; 0x400
  p->acID[6] = ' ';
   13d1a:	f04f 0c20 	mov.w	ip, #32
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   13d1e:	6218      	str	r0, [r3, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
   13d20:	f503 6089 	add.w	r0, r3, #1096	; 0x448
  p->aUp[0].RdOff         = 0u;
   13d24:	2200      	movs	r2, #0
  p->acID[6] = ' ';
   13d26:	f883 c006 	strb.w	ip, [r3, #6]
  p->aDown[0].pBuffer       = _acDownBuffer;
   13d2a:	6358      	str	r0, [r3, #52]	; 0x34
  strcpy(&p->acID[0], "SEGGER");
   13d2c:	8099      	strh	r1, [r3, #4]
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   13d2e:	2010      	movs	r0, #16
  p->aDown[0].sName         = "Terminal";
   13d30:	e9c3 240b 	strd	r2, r4, [r3, #44]	; 0x2c
  p->aUp[0].RdOff         = 0u;
   13d34:	629a      	str	r2, [r3, #40]	; 0x28
  _DoInit();
}
   13d36:	f85d 4b04 	ldr.w	r4, [sp], #4
  p->aUp[0].WrOff         = 0u;
   13d3a:	625a      	str	r2, [r3, #36]	; 0x24
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   13d3c:	6398      	str	r0, [r3, #56]	; 0x38
  p->aDown[0].RdOff         = 0u;
   13d3e:	641a      	str	r2, [r3, #64]	; 0x40
  p->aDown[0].WrOff         = 0u;
   13d40:	63da      	str	r2, [r3, #60]	; 0x3c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   13d42:	645a      	str	r2, [r3, #68]	; 0x44
}
   13d44:	4770      	bx	lr
   13d46:	bf00      	nop
   13d48:	00023fec 	.word	0x00023fec
   13d4c:	200000d8 	.word	0x200000d8
   13d50:	00023ff0 	.word	0x00023ff0
   13d54:	00023fe0 	.word	0x00023fe0

00013d58 <uwb_dw1000_read_sts_rxtime>:
inline static uint64_t
uwb_dw1000_read_sts_rxtime(struct uwb_dev* __attribute((unused)) dev)
{
    /* No such functionality */
    return 0xffffffffffffffffULL;
}
   13d58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13d5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   13d60:	4770      	bx	lr

00013d62 <uwb_dw1000_hal_noblock_wait>:
{
   13d62:	b508      	push	{r3, lr}
    return hal_dw1000_rw_noblock_wait((dw1000_dev_instance_t *)dev, timeout);
   13d64:	f001 f956 	bl	15014 <hal_dw1000_rw_noblock_wait>
}
   13d68:	bd08      	pop	{r3, pc}

00013d6a <uwb_dw1000_mac_framefilter>:
    assert(0);
}

struct uwb_dev_status
uwb_dw1000_mac_framefilter(struct uwb_dev * dev, uint16_t enable)
{
   13d6a:	b508      	push	{r3, lr}
   13d6c:	460b      	mov	r3, r1
    uint16_t dw1k_en = 0;

    /* Translate uwb-level frame filtering flags to dw1000 reg */
    if (enable & UWB_FF_BEACON_EN) dw1k_en |= DWT_FF_BEACON_EN;
   13d6e:	f011 0101 	ands.w	r1, r1, #1
   13d72:	d000      	beq.n	13d76 <uwb_dw1000_mac_framefilter+0xc>
   13d74:	2104      	movs	r1, #4
    if (enable & UWB_FF_DATA_EN)   dw1k_en |= DWT_FF_DATA_EN;
   13d76:	f013 0f02 	tst.w	r3, #2
   13d7a:	d001      	beq.n	13d80 <uwb_dw1000_mac_framefilter+0x16>
   13d7c:	f041 0108 	orr.w	r1, r1, #8
    if (enable & UWB_FF_ACK_EN)    dw1k_en |= DWT_FF_ACK_EN;
   13d80:	f013 0f04 	tst.w	r3, #4
   13d84:	d001      	beq.n	13d8a <uwb_dw1000_mac_framefilter+0x20>
   13d86:	f041 0110 	orr.w	r1, r1, #16
    if (enable & UWB_FF_MAC_EN)    dw1k_en |= DWT_FF_MAC_EN;
   13d8a:	f013 0f08 	tst.w	r3, #8
   13d8e:	d001      	beq.n	13d94 <uwb_dw1000_mac_framefilter+0x2a>
   13d90:	f041 0120 	orr.w	r1, r1, #32
    if (enable & UWB_FF_RSVD_EN)   dw1k_en |= DWT_FF_RSVD_EN;
   13d94:	f013 0f10 	tst.w	r3, #16
   13d98:	d001      	beq.n	13d9e <uwb_dw1000_mac_framefilter+0x34>
   13d9a:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    if (enable & UWB_FF_COORD_EN)  dw1k_en |= DWT_FF_COORD_EN;
   13d9e:	f413 7f80 	tst.w	r3, #256	; 0x100
   13da2:	d001      	beq.n	13da8 <uwb_dw1000_mac_framefilter+0x3e>
   13da4:	f041 0102 	orr.w	r1, r1, #2

    return dw1000_mac_framefilter((dw1000_dev_instance_t *)dev, dw1k_en);
   13da8:	f001 fd78 	bl	1589c <dw1000_mac_framefilter>
}
   13dac:	bd08      	pop	{r3, pc}

00013dae <uwb_dw1000_set_autoack>:

struct uwb_dev_status
uwb_dw1000_set_autoack(struct uwb_dev * dev, bool enable)
{
   13dae:	b508      	push	{r3, lr}
    return dw1000_set_autoack((dw1000_dev_instance_t *)dev, enable);
   13db0:	f001 fdb4 	bl	1591c <dw1000_set_autoack>
}
   13db4:	bd08      	pop	{r3, pc}

00013db6 <uwb_dw1000_set_autoack_delay>:

struct uwb_dev_status
uwb_dw1000_set_autoack_delay(struct uwb_dev * dev, uint8_t delay)
{
   13db6:	b508      	push	{r3, lr}
    return dw1000_set_autoack_delay((dw1000_dev_instance_t *)dev, delay);
   13db8:	f001 fdfc 	bl	159b4 <dw1000_set_autoack_delay>
}
   13dbc:	bd08      	pop	{r3, pc}

00013dbe <uwb_dw1000_event_cnt_ctrl>:

struct uwb_dev_status
uwb_dw1000_event_cnt_ctrl(struct uwb_dev * dev, bool enable, bool reset)
{
   13dbe:	b508      	push	{r3, lr}
    return dw1000_phy_event_cnt_ctrl((dw1000_dev_instance_t *)dev, enable, reset);
   13dc0:	f003 fc65 	bl	1768e <dw1000_phy_event_cnt_ctrl>
}
   13dc4:	bd08      	pop	{r3, pc}

00013dc6 <uwb_dw1000_event_cnt_read>:

struct uwb_dev_status
uwb_dw1000_event_cnt_read(struct uwb_dev * dev, struct uwb_dev_evcnt *res)
{
   13dc6:	b508      	push	{r3, lr}
    return dw1000_phy_event_cnt_read((dw1000_dev_instance_t *)dev, res);
   13dc8:	f003 fc84 	bl	176d4 <dw1000_phy_event_cnt_read>
}
   13dcc:	bd08      	pop	{r3, pc}
	...

00013dd0 <uwb_dw1000_calc_pdoa>:
{
   13dd0:	b508      	push	{r3, lr}
    printf("%s not implemented\n", __func__);
   13dd2:	4905      	ldr	r1, [pc, #20]	; (13de8 <uwb_dw1000_calc_pdoa+0x18>)
   13dd4:	4805      	ldr	r0, [pc, #20]	; (13dec <uwb_dw1000_calc_pdoa+0x1c>)
   13dd6:	f7fa fa93 	bl	e300 <printf>
    assert(0);
   13dda:	2300      	movs	r3, #0
   13ddc:	461a      	mov	r2, r3
   13dde:	4619      	mov	r1, r3
   13de0:	4618      	mov	r0, r3
   13de2:	f7f5 f8bf 	bl	8f64 <__assert_func>
   13de6:	bf00      	nop
   13de8:	00024038 	.word	0x00024038
   13dec:	00023ff8 	.word	0x00023ff8

00013df0 <uwb_dw1000_estimate_los>:
{
   13df0:	b508      	push	{r3, lr}
    return dw1000_estimate_los(rssi, fppl);
   13df2:	f002 ff49 	bl	16c88 <dw1000_estimate_los>
}
   13df6:	bd08      	pop	{r3, pc}

00013df8 <uwb_dw1000_calc_fppl>:
{
   13df8:	b508      	push	{r3, lr}
    return dw1000_calc_fppl((dw1000_dev_instance_t *)dev, (struct _dw1000_dev_rxdiag_t*)diag);
   13dfa:	f002 fea9 	bl	16b50 <dw1000_calc_fppl>
}
   13dfe:	bd08      	pop	{r3, pc}

00013e00 <uwb_dw1000_calc_seq_rssi>:
{
   13e00:	b508      	push	{r3, lr}
    return dw1000_calc_rssi((dw1000_dev_instance_t *)dev, (struct _dw1000_dev_rxdiag_t*)diag);
   13e02:	f002 ff01 	bl	16c08 <dw1000_calc_rssi>
}
   13e06:	bd08      	pop	{r3, pc}

00013e08 <uwb_dw1000_calc_rssi>:
{
   13e08:	b508      	push	{r3, lr}
    return dw1000_calc_rssi((dw1000_dev_instance_t *)dev, (struct _dw1000_dev_rxdiag_t*)diag);
   13e0a:	f002 fefd 	bl	16c08 <dw1000_calc_rssi>
}
   13e0e:	bd08      	pop	{r3, pc}

00013e10 <uwb_dw1000_get_fppl>:
{
   13e10:	b508      	push	{r3, lr}
    return dw1000_get_fppl((dw1000_dev_instance_t *)dev);
   13e12:	f002 fee9 	bl	16be8 <dw1000_get_fppl>
}
   13e16:	bd08      	pop	{r3, pc}

00013e18 <uwb_dw1000_get_rssi>:
{
   13e18:	b508      	push	{r3, lr}
    return dw1000_get_rssi((dw1000_dev_instance_t *)dev);
   13e1a:	f002 ff25 	bl	16c68 <dw1000_get_rssi>
}
   13e1e:	bd08      	pop	{r3, pc}

00013e20 <uwb_dw1000_calc_clock_offset_ratio>:
{
   13e20:	b508      	push	{r3, lr}
    if (type == UWB_CR_CARRIER_INTEGRATOR) {
   13e22:	b122      	cbz	r2, 13e2e <uwb_dw1000_calc_clock_offset_ratio+0xe>
    } else if (type == UWB_CR_RXTTCKO) {
   13e24:	2a01      	cmp	r2, #1
   13e26:	d005      	beq.n	13e34 <uwb_dw1000_calc_clock_offset_ratio+0x14>
    return DPL_FLOAT64_INIT(0.0f);
   13e28:	ed9f 0b05 	vldr	d0, [pc, #20]	; 13e40 <uwb_dw1000_calc_clock_offset_ratio+0x20>
}
   13e2c:	bd08      	pop	{r3, pc}
        return dw1000_calc_clock_offset_ratio((dw1000_dev_instance_t *)dev, val);
   13e2e:	f002 f883 	bl	15f38 <dw1000_calc_clock_offset_ratio>
   13e32:	e7fb      	b.n	13e2c <uwb_dw1000_calc_clock_offset_ratio+0xc>
        return dw1000_calc_clock_offset_ratio_ttco((dw1000_dev_instance_t *)dev, val);
   13e34:	f002 f901 	bl	1603a <dw1000_calc_clock_offset_ratio_ttco>
   13e38:	e7f8      	b.n	13e2c <uwb_dw1000_calc_clock_offset_ratio+0xc>
   13e3a:	bf00      	nop
   13e3c:	f3af 8000 	nop.w
	...

00013e48 <uwb_dw1000_set_on_error_continue>:
{
   13e48:	b508      	push	{r3, lr}
    return dw1000_set_on_error_continue((dw1000_dev_instance_t *)dev, enable);
   13e4a:	f001 fc48 	bl	156de <dw1000_set_on_error_continue>
}
   13e4e:	bd08      	pop	{r3, pc}

00013e50 <uwb_dw1000_phy_repeated_frames>:
{
   13e50:	b508      	push	{r3, lr}
    return dw1000_phy_repeated_frames((dw1000_dev_instance_t *)dev, rate);
   13e52:	f003 fabd 	bl	173d0 <dw1000_phy_repeated_frames>
}
   13e56:	bd08      	pop	{r3, pc}

00013e58 <uwb_dw1000_phy_rx_reset>:
{
   13e58:	b508      	push	{r3, lr}
    return dw1000_phy_rx_reset((dw1000_dev_instance_t *)dev);
   13e5a:	f003 f9c0 	bl	171de <dw1000_phy_rx_reset>
}
   13e5e:	bd08      	pop	{r3, pc}

00013e60 <uwb_dw1000_phy_forcetrxoff>:
{
   13e60:	b508      	push	{r3, lr}
    return dw1000_phy_forcetrxoff((dw1000_dev_instance_t *)dev);
   13e62:	f003 f9f1 	bl	17248 <dw1000_phy_forcetrxoff>
}
   13e66:	bd08      	pop	{r3, pc}

00013e68 <uwb_dw1000_phy_data_duration>:
{
   13e68:	b508      	push	{r3, lr}
    return dw1000_phy_data_duration(&dev->attrib, nlen);
   13e6a:	f200 5034 	addw	r0, r0, #1332	; 0x534
   13e6e:	f003 fb71 	bl	17554 <dw1000_phy_data_duration>
}
   13e72:	bd08      	pop	{r3, pc}

00013e74 <uwb_dw1000_phy_SHR_duration>:
{
   13e74:	b508      	push	{r3, lr}
    return dw1000_phy_SHR_duration(&dev->attrib);
   13e76:	f200 5034 	addw	r0, r0, #1332	; 0x534
   13e7a:	f003 fb57 	bl	1752c <dw1000_phy_SHR_duration>
}
   13e7e:	bd08      	pop	{r3, pc}

00013e80 <uwb_dw1000_phy_frame_duration>:
{
   13e80:	b508      	push	{r3, lr}
    return dw1000_phy_frame_duration(&dev->attrib, nlen);
   13e82:	f200 5034 	addw	r0, r0, #1332	; 0x534
   13e86:	f003 fb8f 	bl	175a8 <dw1000_phy_frame_duration>
}
   13e8a:	bd08      	pop	{r3, pc}

00013e8c <uwb_dw1000_read_txtime_lo32>:
{
   13e8c:	b508      	push	{r3, lr}
    return dw1000_read_txtime_lo((dw1000_dev_instance_t *)dev);
   13e8e:	f002 ff49 	bl	16d24 <dw1000_read_txtime_lo>
}
   13e92:	bd08      	pop	{r3, pc}

00013e94 <uwb_dw1000_read_txtime>:
{
   13e94:	b508      	push	{r3, lr}
    return dw1000_read_txtime((dw1000_dev_instance_t *)dev);
   13e96:	f002 ff3d 	bl	16d14 <dw1000_read_txtime>
}
   13e9a:	bd08      	pop	{r3, pc}

00013e9c <uwb_dw1000_read_rxtime_lo32>:
{
   13e9c:	b508      	push	{r3, lr}
    return dw1000_read_rxtime_lo((dw1000_dev_instance_t *)dev);
   13e9e:	f002 ff32 	bl	16d06 <dw1000_read_rxtime_lo>
}
   13ea2:	bd08      	pop	{r3, pc}

00013ea4 <uwb_dw1000_read_rxtime>:
{
   13ea4:	b508      	push	{r3, lr}
    return dw1000_read_rxtime((dw1000_dev_instance_t *)dev);
   13ea6:	f002 ff26 	bl	16cf6 <dw1000_read_rxtime>
}
   13eaa:	bd08      	pop	{r3, pc}

00013eac <uwb_dw1000_read_systime_lo32>:
{
   13eac:	b508      	push	{r3, lr}
    return dw1000_read_systime_lo((dw1000_dev_instance_t *)dev);
   13eae:	f002 ff1b 	bl	16ce8 <dw1000_read_systime_lo>
}
   13eb2:	bd08      	pop	{r3, pc}

00013eb4 <uwb_dw1000_read_systime>:
{
   13eb4:	b508      	push	{r3, lr}
    return dw1000_read_systime((dw1000_dev_instance_t *)dev);
   13eb6:	f002 ff0f 	bl	16cd8 <dw1000_read_systime>
}
   13eba:	bd08      	pop	{r3, pc}

00013ebc <uwb_dw1000_set_rxauto_disable>:
{
   13ebc:	b508      	push	{r3, lr}
    return dw1000_set_rxauto_disable((dw1000_dev_instance_t *)dev, disable);
   13ebe:	f001 fc17 	bl	156f0 <dw1000_set_rxauto_disable>
}
   13ec2:	bd08      	pop	{r3, pc}

00013ec4 <uwb_dw1000_set_wait4resp_delay>:
{
   13ec4:	b508      	push	{r3, lr}
    return dw1000_set_wait4resp_delay((dw1000_dev_instance_t *)dev, delay);
   13ec6:	f001 fd89 	bl	159dc <dw1000_set_wait4resp_delay>
}
   13eca:	bd08      	pop	{r3, pc}

00013ecc <uwb_dw1000_set_wait4resp>:
{
   13ecc:	b508      	push	{r3, lr}
    return dw1000_set_wait4resp((dw1000_dev_instance_t *)dev, enable);
   13ece:	f001 fbf7 	bl	156c0 <dw1000_set_wait4resp>
}
   13ed2:	bd08      	pop	{r3, pc}

00013ed4 <uwb_dw1000_tx_wait>:
{
   13ed4:	b508      	push	{r3, lr}
    return dw1000_tx_wait((dw1000_dev_instance_t *)dev, timeout);
   13ed6:	f001 fa87 	bl	153e8 <dw1000_tx_wait>
}
   13eda:	bd08      	pop	{r3, pc}

00013edc <uwb_dw1000_write_tx_fctrl>:
{
   13edc:	b508      	push	{r3, lr}
    dw1000_write_tx_fctrl((dw1000_dev_instance_t *)dev, tx_frame_length,
   13ede:	f001 f9a7 	bl	15230 <dw1000_write_tx_fctrl>
}
   13ee2:	bd08      	pop	{r3, pc}

00013ee4 <uwb_dw1000_write_tx>:
{
   13ee4:	b508      	push	{r3, lr}
    return dw1000_write_tx((dw1000_dev_instance_t *)dev, tx_frame_bytes,
   13ee6:	f001 f956 	bl	15196 <dw1000_write_tx>
}
   13eea:	bd08      	pop	{r3, pc}

00013eec <uwb_dw1000_stop_rx>:
{
   13eec:	b508      	push	{r3, lr}
    return dw1000_stop_rx((dw1000_dev_instance_t *)dev);
   13eee:	f001 fb93 	bl	15618 <dw1000_stop_rx>
}
   13ef2:	bd08      	pop	{r3, pc}

00013ef4 <uwb_dw1000_start_rx>:
{
   13ef4:	b508      	push	{r3, lr}
    return dw1000_start_rx((dw1000_dev_instance_t *)dev);
   13ef6:	f001 fab8 	bl	1546a <dw1000_start_rx>
}
   13efa:	bd08      	pop	{r3, pc}

00013efc <uwb_dw1000_start_tx>:
{
   13efc:	b508      	push	{r3, lr}
    return dw1000_start_tx((dw1000_dev_instance_t *)dev);
   13efe:	f001 f9d8 	bl	152b2 <dw1000_start_tx>
}
   13f02:	bd08      	pop	{r3, pc}

00013f04 <uwb_dw1000_set_delay_start>:
{
   13f04:	b508      	push	{r3, lr}
    return dw1000_set_delay_start((dw1000_dev_instance_t *)dev, dx_time);
   13f06:	f001 fa7b 	bl	15400 <dw1000_set_delay_start>
}
   13f0a:	bd08      	pop	{r3, pc}

00013f0c <uwb_dw1000_set_abs_timeout>:
{
   13f0c:	b508      	push	{r3, lr}
    return dw1000_set_abs_timeout((dw1000_dev_instance_t *)dev, rx_end);
   13f0e:	f001 fc8f 	bl	15830 <dw1000_set_abs_timeout>
}
   13f12:	bd08      	pop	{r3, pc}

00013f14 <uwb_dw1000_set_rx_window>:
{
   13f14:	b500      	push	{lr}
   13f16:	b083      	sub	sp, #12
    return dw1000_set_rx_window((dw1000_dev_instance_t *)dev, rx_start, rx_end);
   13f18:	ed9d 7b04 	vldr	d7, [sp, #16]
   13f1c:	ed8d 7b00 	vstr	d7, [sp]
   13f20:	f001 fc65 	bl	157ee <dw1000_set_rx_window>
}
   13f24:	b003      	add	sp, #12
   13f26:	f85d fb04 	ldr.w	pc, [sp], #4

00013f2a <uwb_dw1000_adj_rx_timeout>:
{
   13f2a:	b508      	push	{r3, lr}
    return dw1000_adj_rx_timeout((dw1000_dev_instance_t *)dev, timeout);
   13f2c:	b289      	uxth	r1, r1
   13f2e:	f001 fbe8 	bl	15702 <dw1000_adj_rx_timeout>
}
   13f32:	bd08      	pop	{r3, pc}

00013f34 <uwb_dw1000_set_rx_timeout>:
{
   13f34:	b508      	push	{r3, lr}
    return dw1000_set_rx_timeout((dw1000_dev_instance_t *)dev, timeout);
   13f36:	b289      	uxth	r1, r1
   13f38:	f001 fc03 	bl	15742 <dw1000_set_rx_timeout>
}
   13f3c:	bd08      	pop	{r3, pc}

00013f3e <uwb_dw1000_set_dblrxbuf>:
{
   13f3e:	b508      	push	{r3, lr}
    return dw1000_set_dblrxbuff((dw1000_dev_instance_t *)dev, enable);
   13f40:	f001 fd91 	bl	15a66 <dw1000_set_dblrxbuff>
}
   13f44:	bd08      	pop	{r3, pc}

00013f46 <uwb_dw1000_txrf_power_value>:
{
   13f46:	b508      	push	{r3, lr}
    return dw1000_phy_txrf_power_value((dw1000_dev_instance_t *)dev, reg, coarse, fine);
   13f48:	f003 fb3b 	bl	175c2 <dw1000_phy_txrf_power_value>
}
   13f4c:	bd08      	pop	{r3, pc}

00013f4e <uwb_dw1000_txrf_config>:
{
   13f4e:	b508      	push	{r3, lr}
    dw1000_phy_config_txrf((dw1000_dev_instance_t *)dev, config);
   13f50:	f003 f842 	bl	16fd8 <dw1000_phy_config_txrf>
}
   13f54:	bd08      	pop	{r3, pc}

00013f56 <uwb_dw1000_mac_config>:
{
   13f56:	b508      	push	{r3, lr}
    return dw1000_mac_config((dw1000_dev_instance_t *)dev, config);
   13f58:	f001 fdea 	bl	15b30 <dw1000_mac_config>
}
   13f5c:	bd08      	pop	{r3, pc}
	...

00013f60 <dw1000_read>:
{
   13f60:	b570      	push	{r4, r5, r6, lr}
   13f62:	b084      	sub	sp, #16
   13f64:	4604      	mov	r4, r0
   13f66:	f8bd 5020 	ldrh.w	r5, [sp, #32]
    dw1000_cmd_t cmd = {
   13f6a:	f001 003f 	and.w	r0, r1, #63	; 0x3f
   13f6e:	f04f 0e00 	mov.w	lr, #0
   13f72:	f360 0e05 	bfi	lr, r0, #0, #6
        .subindex = subaddress != 0,
   13f76:	4694      	mov	ip, r2
   13f78:	3a00      	subs	r2, #0
   13f7a:	bf18      	it	ne
   13f7c:	2201      	movne	r2, #1
    dw1000_cmd_t cmd = {
   13f7e:	f362 1e86 	bfi	lr, r2, #6, #1
   13f82:	f36f 1ec7 	bfc	lr, #7, #1
        .extended = subaddress > 0x7F,
   13f86:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
   13f8a:	bf94      	ite	ls
   13f8c:	2600      	movls	r6, #0
   13f8e:	2601      	movhi	r6, #1
    dw1000_cmd_t cmd = {
   13f90:	f366 2e08 	bfi	lr, r6, #8, #1
   13f94:	f36c 2e57 	bfi	lr, ip, #9, #15
        [0] = cmd.operation << 7 | cmd.subindex << 6 | cmd.reg,
   13f98:	ea40 1282 	orr.w	r2, r0, r2, lsl #6
    uint8_t header[] = {
   13f9c:	f88d 200c 	strb.w	r2, [sp, #12]
        [1] = cmd.extended << 7 | (uint8_t) (subaddress),
   13fa0:	fa4f f28c 	sxtb.w	r2, ip
   13fa4:	ea42 12c6 	orr.w	r2, r2, r6, lsl #7
    uint8_t header[] = {
   13fa8:	f88d 200d 	strb.w	r2, [sp, #13]
        [2] = (uint8_t) (subaddress >> 7)
   13fac:	f3cc 12c7 	ubfx	r2, ip, #7, #8
    uint8_t header[] = {
   13fb0:	f88d 200e 	strb.w	r2, [sp, #14]
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   13fb4:	4a1b      	ldr	r2, [pc, #108]	; (14024 <dw1000_read+0xc4>)
   13fb6:	ea0e 0202 	and.w	r2, lr, r2
   13fba:	b122      	cbz	r2, 13fc6 <dw1000_read+0x66>
   13fbc:	f41e 7f80 	tst.w	lr, #256	; 0x100
   13fc0:	d01b      	beq.n	13ffa <dw1000_read+0x9a>
   13fc2:	2203      	movs	r2, #3
   13fc4:	e000      	b.n	13fc8 <dw1000_read+0x68>
   13fc6:	2201      	movs	r2, #1
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
   13fc8:	293f      	cmp	r1, #63	; 0x3f
   13fca:	d818      	bhi.n	13ffe <dw1000_read+0x9e>
    assert((subaddress <= 0x7FFF) && ((subaddress + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
   13fcc:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
   13fd0:	d11b      	bne.n	1400a <dw1000_read+0xaa>
   13fd2:	44ac      	add	ip, r5
   13fd4:	f5bc 4f00 	cmp.w	ip, #32768	; 0x8000
   13fd8:	da17      	bge.n	1400a <dw1000_read+0xaa>
    if (length < MYNEWT_VAL(DW1000_DEVICE_SPI_RD_MAX_NOBLOCK) ||
   13fda:	2d08      	cmp	r5, #8
   13fdc:	d904      	bls.n	13fe8 <dw1000_read+0x88>
   13fde:	f894 152e 	ldrb.w	r1, [r4, #1326]	; 0x52e
   13fe2:	f011 0f01 	tst.w	r1, #1
   13fe6:	d016      	beq.n	14016 <dw1000_read+0xb6>
        hal_dw1000_read(inst, header, len, buffer, length);
   13fe8:	9500      	str	r5, [sp, #0]
   13fea:	a903      	add	r1, sp, #12
   13fec:	4620      	mov	r0, r4
   13fee:	f000 fd3f 	bl	14a70 <hal_dw1000_read>
}
   13ff2:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   13ff6:	b004      	add	sp, #16
   13ff8:	bd70      	pop	{r4, r5, r6, pc}
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   13ffa:	2202      	movs	r2, #2
   13ffc:	e7e4      	b.n	13fc8 <dw1000_read+0x68>
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
   13ffe:	2300      	movs	r3, #0
   14000:	461a      	mov	r2, r3
   14002:	4619      	mov	r1, r3
   14004:	4618      	mov	r0, r3
   14006:	f7f4 ffad 	bl	8f64 <__assert_func>
    assert((subaddress <= 0x7FFF) && ((subaddress + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
   1400a:	2300      	movs	r3, #0
   1400c:	461a      	mov	r2, r3
   1400e:	4619      	mov	r1, r3
   14010:	4618      	mov	r0, r3
   14012:	f7f4 ffa7 	bl	8f64 <__assert_func>
        hal_dw1000_read_noblock(inst, header, len, buffer, length);
   14016:	9500      	str	r5, [sp, #0]
   14018:	a903      	add	r1, sp, #12
   1401a:	4620      	mov	r0, r4
   1401c:	f000 fd84 	bl	14b28 <hal_dw1000_read_noblock>
   14020:	e7e7      	b.n	13ff2 <dw1000_read+0x92>
   14022:	bf00      	nop
   14024:	00fffe00 	.word	0x00fffe00

00014028 <dw1000_write>:
{
   14028:	b570      	push	{r4, r5, r6, lr}
   1402a:	b084      	sub	sp, #16
   1402c:	4604      	mov	r4, r0
   1402e:	f8bd 5020 	ldrh.w	r5, [sp, #32]
    dw1000_cmd_t cmd = {
   14032:	f001 003f 	and.w	r0, r1, #63	; 0x3f
   14036:	f04f 0e00 	mov.w	lr, #0
   1403a:	f360 0e05 	bfi	lr, r0, #0, #6
        .subindex = subaddress != 0,
   1403e:	4694      	mov	ip, r2
   14040:	3a00      	subs	r2, #0
   14042:	bf18      	it	ne
   14044:	2201      	movne	r2, #1
    dw1000_cmd_t cmd = {
   14046:	f362 1e86 	bfi	lr, r2, #6, #1
   1404a:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
        .extended = subaddress > 0x7F,
   1404e:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
   14052:	bf94      	ite	ls
   14054:	2600      	movls	r6, #0
   14056:	2601      	movhi	r6, #1
    dw1000_cmd_t cmd = {
   14058:	f366 2e08 	bfi	lr, r6, #8, #1
   1405c:	f36c 2e57 	bfi	lr, ip, #9, #15
        [0] = cmd.operation << 7 | cmd.subindex << 6 | cmd.reg,
   14060:	0192      	lsls	r2, r2, #6
   14062:	f062 027f 	orn	r2, r2, #127	; 0x7f
   14066:	4302      	orrs	r2, r0
    uint8_t header[] = {
   14068:	f88d 200c 	strb.w	r2, [sp, #12]
        [1] = cmd.extended << 7 | (uint8_t) (subaddress),
   1406c:	fa4f f28c 	sxtb.w	r2, ip
   14070:	ea42 12c6 	orr.w	r2, r2, r6, lsl #7
    uint8_t header[] = {
   14074:	f88d 200d 	strb.w	r2, [sp, #13]
        [2] = (uint8_t) (subaddress >> 7)
   14078:	f3cc 12c7 	ubfx	r2, ip, #7, #8
    uint8_t header[] = {
   1407c:	f88d 200e 	strb.w	r2, [sp, #14]
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   14080:	4a1b      	ldr	r2, [pc, #108]	; (140f0 <dw1000_write+0xc8>)
   14082:	ea0e 0202 	and.w	r2, lr, r2
   14086:	b122      	cbz	r2, 14092 <dw1000_write+0x6a>
   14088:	f41e 7f80 	tst.w	lr, #256	; 0x100
   1408c:	d01c      	beq.n	140c8 <dw1000_write+0xa0>
   1408e:	2203      	movs	r2, #3
   14090:	e000      	b.n	14094 <dw1000_write+0x6c>
   14092:	2201      	movs	r2, #1
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
   14094:	293f      	cmp	r1, #63	; 0x3f
   14096:	d819      	bhi.n	140cc <dw1000_write+0xa4>
    assert((subaddress <= 0x7FFF) && ((subaddress + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
   14098:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
   1409c:	d11c      	bne.n	140d8 <dw1000_write+0xb0>
   1409e:	44ac      	add	ip, r5
   140a0:	f5bc 4f00 	cmp.w	ip, #32768	; 0x8000
   140a4:	da18      	bge.n	140d8 <dw1000_write+0xb0>
    if (len+length < MYNEWT_VAL(DW1000_DEVICE_SPI_RD_MAX_NOBLOCK) ||
   140a6:	1951      	adds	r1, r2, r5
   140a8:	2908      	cmp	r1, #8
   140aa:	dd04      	ble.n	140b6 <dw1000_write+0x8e>
   140ac:	f894 152e 	ldrb.w	r1, [r4, #1326]	; 0x52e
   140b0:	f011 0f01 	tst.w	r1, #1
   140b4:	d016      	beq.n	140e4 <dw1000_write+0xbc>
        hal_dw1000_write(inst, header, len, buffer, length);
   140b6:	9500      	str	r5, [sp, #0]
   140b8:	a903      	add	r1, sp, #12
   140ba:	4620      	mov	r0, r4
   140bc:	f000 fe6a 	bl	14d94 <hal_dw1000_write>
}
   140c0:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   140c4:	b004      	add	sp, #16
   140c6:	bd70      	pop	{r4, r5, r6, pc}
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   140c8:	2202      	movs	r2, #2
   140ca:	e7e3      	b.n	14094 <dw1000_write+0x6c>
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
   140cc:	2300      	movs	r3, #0
   140ce:	461a      	mov	r2, r3
   140d0:	4619      	mov	r1, r3
   140d2:	4618      	mov	r0, r3
   140d4:	f7f4 ff46 	bl	8f64 <__assert_func>
    assert((subaddress <= 0x7FFF) && ((subaddress + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
   140d8:	2300      	movs	r3, #0
   140da:	461a      	mov	r2, r3
   140dc:	4619      	mov	r1, r3
   140de:	4618      	mov	r0, r3
   140e0:	f7f4 ff40 	bl	8f64 <__assert_func>
        hal_dw1000_write_noblock(inst, header, len, buffer, length);
   140e4:	9500      	str	r5, [sp, #0]
   140e6:	a903      	add	r1, sp, #12
   140e8:	4620      	mov	r0, r4
   140ea:	f000 fea1 	bl	14e30 <hal_dw1000_write_noblock>
   140ee:	e7e7      	b.n	140c0 <dw1000_write+0x98>
   140f0:	00fffe00 	.word	0x00fffe00

000140f4 <dw1000_read_reg>:
{
   140f4:	b530      	push	{r4, r5, lr}
   140f6:	b087      	sub	sp, #28
    } __attribute__((__packed__, aligned (8))) buffer = {0};
   140f8:	2400      	movs	r4, #0
   140fa:	2500      	movs	r5, #0
   140fc:	e9cd 4504 	strd	r4, r5, [sp, #16]
    dw1000_cmd_t cmd = {
   14100:	f001 043f 	and.w	r4, r1, #63	; 0x3f
   14104:	f04f 0e00 	mov.w	lr, #0
   14108:	f364 0e05 	bfi	lr, r4, #0, #6
        .subindex = subaddress != 0,
   1410c:	4694      	mov	ip, r2
   1410e:	3a00      	subs	r2, #0
   14110:	bf18      	it	ne
   14112:	2201      	movne	r2, #1
    dw1000_cmd_t cmd = {
   14114:	f362 1e86 	bfi	lr, r2, #6, #1
   14118:	f36f 1ec7 	bfc	lr, #7, #1
        .extended = subaddress > 0x7F,
   1411c:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
   14120:	bf94      	ite	ls
   14122:	2500      	movls	r5, #0
   14124:	2501      	movhi	r5, #1
    dw1000_cmd_t cmd = {
   14126:	f365 2e08 	bfi	lr, r5, #8, #1
   1412a:	f36c 2e57 	bfi	lr, ip, #9, #15
        [0] = cmd.operation << 7 | cmd.subindex << 6 | cmd.reg,
   1412e:	ea44 1282 	orr.w	r2, r4, r2, lsl #6
    uint8_t header[] = {
   14132:	f88d 200c 	strb.w	r2, [sp, #12]
        [1] = cmd.extended << 7 | (uint8_t) (subaddress),
   14136:	fa4f f28c 	sxtb.w	r2, ip
   1413a:	ea42 12c5 	orr.w	r2, r2, r5, lsl #7
    uint8_t header[] = {
   1413e:	f88d 200d 	strb.w	r2, [sp, #13]
        [2] = (uint8_t) (subaddress >> 7)
   14142:	f3cc 12c7 	ubfx	r2, ip, #7, #8
    uint8_t header[] = {
   14146:	f88d 200e 	strb.w	r2, [sp, #14]
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   1414a:	4a21      	ldr	r2, [pc, #132]	; (141d0 <dw1000_read_reg+0xdc>)
   1414c:	ea0e 0202 	and.w	r2, lr, r2
   14150:	b122      	cbz	r2, 1415c <dw1000_read_reg+0x68>
   14152:	f41e 7f80 	tst.w	lr, #256	; 0x100
   14156:	d01f      	beq.n	14198 <dw1000_read_reg+0xa4>
   14158:	2203      	movs	r2, #3
   1415a:	e000      	b.n	1415e <dw1000_read_reg+0x6a>
   1415c:	2201      	movs	r2, #1
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
   1415e:	293f      	cmp	r1, #63	; 0x3f
   14160:	d81c      	bhi.n	1419c <dw1000_read_reg+0xa8>
    assert((subaddress <= 0x7FFF) && ((subaddress + nbytes) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
   14162:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
   14166:	d11f      	bne.n	141a8 <dw1000_read_reg+0xb4>
   14168:	449c      	add	ip, r3
   1416a:	f5bc 4f00 	cmp.w	ip, #32768	; 0x8000
   1416e:	d21b      	bcs.n	141a8 <dw1000_read_reg+0xb4>
    assert(nbytes <= sizeof(uint64_t));
   14170:	2b08      	cmp	r3, #8
   14172:	d81f      	bhi.n	141b4 <dw1000_read_reg+0xc0>
    if (len+nbytes < MYNEWT_VAL(DW1000_DEVICE_SPI_RD_MAX_NOBLOCK) ||
   14174:	18d1      	adds	r1, r2, r3
   14176:	2908      	cmp	r1, #8
   14178:	d904      	bls.n	14184 <dw1000_read_reg+0x90>
   1417a:	f890 152e 	ldrb.w	r1, [r0, #1326]	; 0x52e
   1417e:	f011 0f01 	tst.w	r1, #1
   14182:	d01d      	beq.n	141c0 <dw1000_read_reg+0xcc>
        hal_dw1000_read(inst, header, len, buffer.array, nbytes);
   14184:	b29b      	uxth	r3, r3
   14186:	9300      	str	r3, [sp, #0]
   14188:	ab04      	add	r3, sp, #16
   1418a:	a903      	add	r1, sp, #12
   1418c:	f000 fc70 	bl	14a70 <hal_dw1000_read>
}
   14190:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   14194:	b007      	add	sp, #28
   14196:	bd30      	pop	{r4, r5, pc}
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   14198:	2202      	movs	r2, #2
   1419a:	e7e0      	b.n	1415e <dw1000_read_reg+0x6a>
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
   1419c:	2300      	movs	r3, #0
   1419e:	461a      	mov	r2, r3
   141a0:	4619      	mov	r1, r3
   141a2:	4618      	mov	r0, r3
   141a4:	f7f4 fede 	bl	8f64 <__assert_func>
    assert((subaddress <= 0x7FFF) && ((subaddress + nbytes) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
   141a8:	2300      	movs	r3, #0
   141aa:	461a      	mov	r2, r3
   141ac:	4619      	mov	r1, r3
   141ae:	4618      	mov	r0, r3
   141b0:	f7f4 fed8 	bl	8f64 <__assert_func>
    assert(nbytes <= sizeof(uint64_t));
   141b4:	2300      	movs	r3, #0
   141b6:	461a      	mov	r2, r3
   141b8:	4619      	mov	r1, r3
   141ba:	4618      	mov	r0, r3
   141bc:	f7f4 fed2 	bl	8f64 <__assert_func>
        hal_dw1000_read_noblock(inst, header, len, buffer.array, nbytes);
   141c0:	b29b      	uxth	r3, r3
   141c2:	9300      	str	r3, [sp, #0]
   141c4:	ab04      	add	r3, sp, #16
   141c6:	a903      	add	r1, sp, #12
   141c8:	f000 fcae 	bl	14b28 <hal_dw1000_read_noblock>
   141cc:	e7e0      	b.n	14190 <dw1000_read_reg+0x9c>
   141ce:	bf00      	nop
   141d0:	00fffe00 	.word	0x00fffe00

000141d4 <dw1000_write_reg>:
{
   141d4:	b530      	push	{r4, r5, lr}
   141d6:	b087      	sub	sp, #28
   141d8:	4604      	mov	r4, r0
   141da:	980c      	ldr	r0, [sp, #48]	; 0x30
    dw1000_cmd_t cmd = {
   141dc:	f001 0e3f 	and.w	lr, r1, #63	; 0x3f
   141e0:	f04f 0c00 	mov.w	ip, #0
   141e4:	f36e 0c05 	bfi	ip, lr, #0, #6
        .subindex = subaddress != 0,
   141e8:	4613      	mov	r3, r2
   141ea:	3a00      	subs	r2, #0
   141ec:	bf18      	it	ne
   141ee:	2201      	movne	r2, #1
    dw1000_cmd_t cmd = {
   141f0:	f362 1c86 	bfi	ip, r2, #6, #1
   141f4:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
        .extended = subaddress > 0x7F,
   141f8:	2b7f      	cmp	r3, #127	; 0x7f
   141fa:	bf94      	ite	ls
   141fc:	2500      	movls	r5, #0
   141fe:	2501      	movhi	r5, #1
    dw1000_cmd_t cmd = {
   14200:	f365 2c08 	bfi	ip, r5, #8, #1
   14204:	f363 2c57 	bfi	ip, r3, #9, #15
        [0] = cmd.operation << 7 | cmd.subindex << 6 | cmd.reg,
   14208:	0192      	lsls	r2, r2, #6
   1420a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1420e:	ea4e 0202 	orr.w	r2, lr, r2
    uint8_t header[] = {
   14212:	f88d 200c 	strb.w	r2, [sp, #12]
        [1] = cmd.extended << 7 | (uint8_t) (subaddress),
   14216:	b25a      	sxtb	r2, r3
   14218:	ea42 12c5 	orr.w	r2, r2, r5, lsl #7
    uint8_t header[] = {
   1421c:	f88d 200d 	strb.w	r2, [sp, #13]
        [2] = (uint8_t) (subaddress >> 7)
   14220:	f3c3 12c7 	ubfx	r2, r3, #7, #8
    uint8_t header[] = {
   14224:	f88d 200e 	strb.w	r2, [sp, #14]
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   14228:	4a25      	ldr	r2, [pc, #148]	; (142c0 <dw1000_write_reg+0xec>)
   1422a:	ea0c 0202 	and.w	r2, ip, r2
   1422e:	b122      	cbz	r2, 1423a <dw1000_write_reg+0x66>
   14230:	f41c 7f80 	tst.w	ip, #256	; 0x100
   14234:	d022      	beq.n	1427c <dw1000_write_reg+0xa8>
   14236:	2203      	movs	r2, #3
   14238:	e000      	b.n	1423c <dw1000_write_reg+0x68>
   1423a:	2201      	movs	r2, #1
    buffer.value = val;
   1423c:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
   14240:	ed8d 7b04 	vstr	d7, [sp, #16]
    assert(nbytes <= sizeof(uint64_t));
   14244:	2808      	cmp	r0, #8
   14246:	d81b      	bhi.n	14280 <dw1000_write_reg+0xac>
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
   14248:	293f      	cmp	r1, #63	; 0x3f
   1424a:	d81f      	bhi.n	1428c <dw1000_write_reg+0xb8>
    assert((subaddress <= 0x7FFF) && ((subaddress + nbytes) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
   1424c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   14250:	d122      	bne.n	14298 <dw1000_write_reg+0xc4>
   14252:	4403      	add	r3, r0
   14254:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   14258:	d21e      	bcs.n	14298 <dw1000_write_reg+0xc4>
    if (len+nbytes < MYNEWT_VAL(DW1000_DEVICE_SPI_RD_MAX_NOBLOCK) ||
   1425a:	1813      	adds	r3, r2, r0
   1425c:	2b08      	cmp	r3, #8
   1425e:	d904      	bls.n	1426a <dw1000_write_reg+0x96>
   14260:	f894 352e 	ldrb.w	r3, [r4, #1326]	; 0x52e
   14264:	f013 0f01 	tst.w	r3, #1
   14268:	d01c      	beq.n	142a4 <dw1000_write_reg+0xd0>
        hal_dw1000_write(inst, header, len, buffer.array, nbytes);
   1426a:	b280      	uxth	r0, r0
   1426c:	9000      	str	r0, [sp, #0]
   1426e:	ab04      	add	r3, sp, #16
   14270:	a903      	add	r1, sp, #12
   14272:	4620      	mov	r0, r4
   14274:	f000 fd8e 	bl	14d94 <hal_dw1000_write>
}
   14278:	b007      	add	sp, #28
   1427a:	bd30      	pop	{r4, r5, pc}
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   1427c:	2202      	movs	r2, #2
   1427e:	e7dd      	b.n	1423c <dw1000_write_reg+0x68>
    assert(nbytes <= sizeof(uint64_t));
   14280:	2300      	movs	r3, #0
   14282:	461a      	mov	r2, r3
   14284:	4619      	mov	r1, r3
   14286:	4618      	mov	r0, r3
   14288:	f7f4 fe6c 	bl	8f64 <__assert_func>
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
   1428c:	2300      	movs	r3, #0
   1428e:	461a      	mov	r2, r3
   14290:	4619      	mov	r1, r3
   14292:	4618      	mov	r0, r3
   14294:	f7f4 fe66 	bl	8f64 <__assert_func>
    assert((subaddress <= 0x7FFF) && ((subaddress + nbytes) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
   14298:	2300      	movs	r3, #0
   1429a:	461a      	mov	r2, r3
   1429c:	4619      	mov	r1, r3
   1429e:	4618      	mov	r0, r3
   142a0:	f7f4 fe60 	bl	8f64 <__assert_func>
        hal_dw1000_write_noblock(inst, header, len, buffer.array, nbytes);
   142a4:	b280      	uxth	r0, r0
   142a6:	9000      	str	r0, [sp, #0]
   142a8:	ab04      	add	r3, sp, #16
   142aa:	a903      	add	r1, sp, #12
   142ac:	4620      	mov	r0, r4
   142ae:	f000 fdbf 	bl	14e30 <hal_dw1000_write_noblock>
        hal_dw1000_rw_noblock_wait(inst, DPL_TIMEOUT_NEVER);
   142b2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   142b6:	4620      	mov	r0, r4
   142b8:	f000 feac 	bl	15014 <hal_dw1000_rw_noblock_wait>
}
   142bc:	e7dc      	b.n	14278 <dw1000_write_reg+0xa4>
   142be:	bf00      	nop
   142c0:	00fffe00 	.word	0x00fffe00

000142c4 <uwb_dw1000_set_euid>:
{
   142c4:	b500      	push	{lr}
   142c6:	b085      	sub	sp, #20
    return dw1000_set_eui((dw1000_dev_instance_t *)dev, euid);
   142c8:	2108      	movs	r1, #8
   142ca:	9102      	str	r1, [sp, #8]
   142cc:	e9cd 2300 	strd	r2, r3, [sp]
   142d0:	2200      	movs	r2, #0
   142d2:	2101      	movs	r1, #1
   142d4:	f7ff ff7e 	bl	141d4 <dw1000_write_reg>
}
   142d8:	b005      	add	sp, #20
   142da:	f85d fb04 	ldr.w	pc, [sp], #4

000142de <uwb_dw1000_set_uid>:
{
   142de:	b500      	push	{lr}
   142e0:	b085      	sub	sp, #20
    return dw1000_set_address16((dw1000_dev_instance_t *)dev, uid);
   142e2:	2302      	movs	r3, #2
   142e4:	9302      	str	r3, [sp, #8]
   142e6:	2200      	movs	r2, #0
   142e8:	9100      	str	r1, [sp, #0]
   142ea:	9201      	str	r2, [sp, #4]
   142ec:	2103      	movs	r1, #3
   142ee:	f7ff ff71 	bl	141d4 <dw1000_write_reg>
}
   142f2:	b005      	add	sp, #20
   142f4:	f85d fb04 	ldr.w	pc, [sp], #4

000142f8 <uwb_dw1000_set_panid>:
{
   142f8:	b500      	push	{lr}
   142fa:	b085      	sub	sp, #20
    return dw1000_set_panid((dw1000_dev_instance_t *)dev, pan_id);
   142fc:	2202      	movs	r2, #2
   142fe:	9202      	str	r2, [sp, #8]
   14300:	9100      	str	r1, [sp, #0]
   14302:	2300      	movs	r3, #0
   14304:	9301      	str	r3, [sp, #4]
   14306:	2103      	movs	r1, #3
   14308:	f7ff ff64 	bl	141d4 <dw1000_write_reg>
}
   1430c:	b005      	add	sp, #20
   1430e:	f85d fb04 	ldr.w	pc, [sp], #4

00014312 <dw1000_softreset>:
{
   14312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14316:	b084      	sub	sp, #16
   14318:	4604      	mov	r4, r0
    dw1000_phy_sysclk_XTAL(inst);
   1431a:	f002 fdab 	bl	16e74 <dw1000_phy_sysclk_XTAL>
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE, sizeof(uint16_t)); // Disable PMSC ctrl of RF and RX clk blocks
   1431e:	f04f 0802 	mov.w	r8, #2
   14322:	f8cd 8008 	str.w	r8, [sp, #8]
   14326:	2600      	movs	r6, #0
   14328:	2700      	movs	r7, #0
   1432a:	e9cd 6700 	strd	r6, r7, [sp]
   1432e:	2204      	movs	r2, #4
   14330:	2136      	movs	r1, #54	; 0x36
   14332:	4620      	mov	r0, r4
   14334:	f7ff ff4e 	bl	141d4 <dw1000_write_reg>
    dw1000_write_reg(inst, AON_ID, AON_WCFG_OFFSET, 0x0, sizeof(uint16_t)); // Clear any AON auto download bits (as reset will trigger AON download)
   14338:	f8cd 8008 	str.w	r8, [sp, #8]
   1433c:	e9cd 6700 	strd	r6, r7, [sp]
   14340:	2200      	movs	r2, #0
   14342:	212c      	movs	r1, #44	; 0x2c
   14344:	4620      	mov	r0, r4
   14346:	f7ff ff45 	bl	141d4 <dw1000_write_reg>
    dw1000_write_reg(inst, AON_ID, AON_CFG0_OFFSET, 0x0, sizeof(uint8_t));  // Clear the wake-up configuration
   1434a:	2501      	movs	r5, #1
   1434c:	9502      	str	r5, [sp, #8]
   1434e:	e9cd 6700 	strd	r6, r7, [sp]
   14352:	2206      	movs	r2, #6
   14354:	212c      	movs	r1, #44	; 0x2c
   14356:	4620      	mov	r0, r4
   14358:	f7ff ff3c 	bl	141d4 <dw1000_write_reg>
    dw1000_write_reg(inst, AON_ID, AON_CTRL_OFFSET, 0x0, sizeof(uint8_t)); // Clear the register
   1435c:	9502      	str	r5, [sp, #8]
   1435e:	e9cd 6700 	strd	r6, r7, [sp]
   14362:	4642      	mov	r2, r8
   14364:	212c      	movs	r1, #44	; 0x2c
   14366:	4620      	mov	r0, r4
   14368:	f7ff ff34 	bl	141d4 <dw1000_write_reg>
    dw1000_write_reg(inst, AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE, sizeof(uint8_t));
   1436c:	9502      	str	r5, [sp, #8]
   1436e:	2202      	movs	r2, #2
   14370:	2300      	movs	r3, #0
   14372:	e9cd 2300 	strd	r2, r3, [sp]
   14376:	4642      	mov	r2, r8
   14378:	212c      	movs	r1, #44	; 0x2c
   1437a:	4620      	mov	r0, r4
   1437c:	f7ff ff2a 	bl	141d4 <dw1000_write_reg>
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL, sizeof(uint8_t));// Reset HIF, TX, RX and PMSC
   14380:	9502      	str	r5, [sp, #8]
   14382:	e9cd 6700 	strd	r6, r7, [sp]
   14386:	2203      	movs	r2, #3
   14388:	2136      	movs	r1, #54	; 0x36
   1438a:	4620      	mov	r0, r4
   1438c:	f7ff ff22 	bl	141d4 <dw1000_write_reg>
    dpl_cputime_delay_usecs(10);
   14390:	200a      	movs	r0, #10
   14392:	f7fa f84a 	bl	e42a <dpl_cputime_delay_usecs>
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR, sizeof(uint8_t)); // Clear reset
   14396:	9502      	str	r5, [sp, #8]
   14398:	22f0      	movs	r2, #240	; 0xf0
   1439a:	2300      	movs	r3, #0
   1439c:	e9cd 2300 	strd	r2, r3, [sp]
   143a0:	2203      	movs	r2, #3
   143a2:	2136      	movs	r1, #54	; 0x36
   143a4:	4620      	mov	r0, r4
   143a6:	f7ff ff15 	bl	141d4 <dw1000_write_reg>
}
   143aa:	b004      	add	sp, #16
   143ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000143b0 <dw1000_dev_configure_sleep>:
{
   143b0:	b530      	push	{r4, r5, lr}
   143b2:	b085      	sub	sp, #20
   143b4:	4604      	mov	r4, r0
    uint16_t reg = dw1000_read_reg(inst, AON_ID, AON_WCFG_OFFSET, sizeof(uint16_t));
   143b6:	2302      	movs	r3, #2
   143b8:	2200      	movs	r2, #0
   143ba:	212c      	movs	r1, #44	; 0x2c
   143bc:	f7ff fe9a 	bl	140f4 <dw1000_read_reg>
   143c0:	b283      	uxth	r3, r0
    if (inst->uwb_dev.status.LDE_enabled)
   143c2:	f894 2509 	ldrb.w	r2, [r4, #1289]	; 0x509
   143c6:	f012 0f10 	tst.w	r2, #16
   143ca:	d03a      	beq.n	14442 <dw1000_dev_configure_sleep+0x92>
        reg |= AON_WCFG_ONW_LLDE;
   143cc:	f443 630c 	orr.w	r3, r3, #2240	; 0x8c0
    if (inst->uwb_dev.status.LDO_enabled)
   143d0:	f012 0f20 	tst.w	r2, #32
   143d4:	d03a      	beq.n	1444c <dw1000_dev_configure_sleep+0x9c>
        reg |= AON_WCFG_ONW_LLDO;
   143d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    if (inst->uwb_dev.config.wakeup_rx_enable)
   143da:	f894 252d 	ldrb.w	r2, [r4, #1325]	; 0x52d
   143de:	f012 0f10 	tst.w	r2, #16
   143e2:	d037      	beq.n	14454 <dw1000_dev_configure_sleep+0xa4>
        reg |= AON_WCFG_ONW_RX;
   143e4:	f043 0302 	orr.w	r3, r3, #2
    dw1000_write_reg(inst, AON_ID, AON_WCFG_OFFSET, reg, sizeof(uint16_t));
   143e8:	2502      	movs	r5, #2
   143ea:	9502      	str	r5, [sp, #8]
   143ec:	2200      	movs	r2, #0
   143ee:	9300      	str	r3, [sp, #0]
   143f0:	9201      	str	r2, [sp, #4]
   143f2:	212c      	movs	r1, #44	; 0x2c
   143f4:	4620      	mov	r0, r4
   143f6:	f7ff feed 	bl	141d4 <dw1000_write_reg>
    reg = dw1000_read_reg(inst, AON_ID, AON_CFG0_OFFSET, sizeof(uint16_t));
   143fa:	462b      	mov	r3, r5
   143fc:	2206      	movs	r2, #6
   143fe:	212c      	movs	r1, #44	; 0x2c
   14400:	4620      	mov	r0, r4
   14402:	f7ff fe77 	bl	140f4 <dw1000_read_reg>
   14406:	b280      	uxth	r0, r0
    inst->uwb_dev.status.sleep_enabled = inst->uwb_dev.config.sleep_enable;
   14408:	f894 352d 	ldrb.w	r3, [r4, #1325]	; 0x52d
   1440c:	f3c3 1340 	ubfx	r3, r3, #5, #1
   14410:	f894 2509 	ldrb.w	r2, [r4, #1289]	; 0x509
   14414:	f363 12c7 	bfi	r2, r3, #7, #1
   14418:	f884 2509 	strb.w	r2, [r4, #1289]	; 0x509
    if (inst->uwb_dev.status.sleep_enabled)
   1441c:	b253      	sxtb	r3, r2
   1441e:	2b00      	cmp	r3, #0
   14420:	db1c      	blt.n	1445c <dw1000_dev_configure_sleep+0xac>
        reg &= ~(AON_CFG0_WAKE_CNT | AON_CFG0_SLEEP_EN);
   14422:	f020 0009 	bic.w	r0, r0, #9
   14426:	f040 0006 	orr.w	r0, r0, #6
    dw1000_write_reg(inst, AON_ID, AON_CFG0_OFFSET, reg, sizeof(uint16_t));
   1442a:	2302      	movs	r3, #2
   1442c:	9302      	str	r3, [sp, #8]
   1442e:	9000      	str	r0, [sp, #0]
   14430:	2300      	movs	r3, #0
   14432:	9301      	str	r3, [sp, #4]
   14434:	2206      	movs	r2, #6
   14436:	212c      	movs	r1, #44	; 0x2c
   14438:	4620      	mov	r0, r4
   1443a:	f7ff fecb 	bl	141d4 <dw1000_write_reg>
}
   1443e:	b005      	add	sp, #20
   14440:	bd30      	pop	{r4, r5, pc}
        reg &= ~AON_WCFG_ONW_LLDE;
   14442:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   14446:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
   1444a:	e7c1      	b.n	143d0 <dw1000_dev_configure_sleep+0x20>
        reg &= ~AON_WCFG_ONW_LLDO;
   1444c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   14450:	b29b      	uxth	r3, r3
   14452:	e7c2      	b.n	143da <dw1000_dev_configure_sleep+0x2a>
        reg &= ~AON_WCFG_ONW_RX;
   14454:	f023 0302 	bic.w	r3, r3, #2
   14458:	b29b      	uxth	r3, r3
   1445a:	e7c5      	b.n	143e8 <dw1000_dev_configure_sleep+0x38>
        reg |= AON_CFG0_WAKE_CNT | AON_CFG0_SLEEP_EN;
   1445c:	f040 000f 	orr.w	r0, r0, #15
   14460:	e7e3      	b.n	1442a <dw1000_dev_configure_sleep+0x7a>

00014462 <uwb_dw1000_sleep_config>:
{
   14462:	b508      	push	{r3, lr}
    dw1000_dev_configure_sleep((dw1000_dev_instance_t *)dev);
   14464:	f7ff ffa4 	bl	143b0 <dw1000_dev_configure_sleep>
}
   14468:	bd08      	pop	{r3, pc}

0001446a <dw1000_dev_enter_sleep>:
{
   1446a:	b570      	push	{r4, r5, r6, lr}
   1446c:	b084      	sub	sp, #16
   1446e:	4604      	mov	r4, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   14470:	f500 65ad 	add.w	r5, r0, #1384	; 0x568
   14474:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14478:	4628      	mov	r0, r5
   1447a:	f7f6 fae5 	bl	aa48 <os_mutex_pend>
    if (err != DPL_OK) {
   1447e:	b148      	cbz	r0, 14494 <dw1000_dev_enter_sleep+0x2a>
        inst->uwb_dev.status.mtx_error = 1;
   14480:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   14484:	f043 0308 	orr.w	r3, r3, #8
   14488:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   1448c:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   14490:	b004      	add	sp, #16
   14492:	bd70      	pop	{r4, r5, r6, pc}
    dw1000_write_reg(inst, AON_ID, AON_CTRL_OFFSET, 0x0, sizeof(uint16_t));
   14494:	2602      	movs	r6, #2
   14496:	9602      	str	r6, [sp, #8]
   14498:	2200      	movs	r2, #0
   1449a:	2300      	movs	r3, #0
   1449c:	e9cd 2300 	strd	r2, r3, [sp]
   144a0:	4632      	mov	r2, r6
   144a2:	212c      	movs	r1, #44	; 0x2c
   144a4:	4620      	mov	r0, r4
   144a6:	f7ff fe95 	bl	141d4 <dw1000_write_reg>
    dw1000_write_reg(inst, AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE, sizeof(uint16_t));
   144aa:	9602      	str	r6, [sp, #8]
   144ac:	2202      	movs	r2, #2
   144ae:	2300      	movs	r3, #0
   144b0:	e9cd 2300 	strd	r2, r3, [sp]
   144b4:	4632      	mov	r2, r6
   144b6:	212c      	movs	r1, #44	; 0x2c
   144b8:	4620      	mov	r0, r4
   144ba:	f7ff fe8b 	bl	141d4 <dw1000_write_reg>
    inst->uwb_dev.status.sleeping = 1;
   144be:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   144c2:	f043 0301 	orr.w	r3, r3, #1
   144c6:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
    return (dpl_error_t)os_mutex_release(&mu->mu);
   144ca:	4628      	mov	r0, r5
   144cc:	f7f6 fa60 	bl	a990 <os_mutex_release>
    assert(err == DPL_OK);
   144d0:	2800      	cmp	r0, #0
   144d2:	d0db      	beq.n	1448c <dw1000_dev_enter_sleep+0x22>
   144d4:	2300      	movs	r3, #0
   144d6:	461a      	mov	r2, r3
   144d8:	4619      	mov	r1, r3
   144da:	4618      	mov	r0, r3
   144dc:	f7f4 fd42 	bl	8f64 <__assert_func>

000144e0 <uwb_dw1000_enter_sleep>:
{
   144e0:	b508      	push	{r3, lr}
    return dw1000_dev_enter_sleep((dw1000_dev_instance_t *)dev);
   144e2:	f7ff ffc2 	bl	1446a <dw1000_dev_enter_sleep>
}
   144e6:	bd08      	pop	{r3, pc}

000144e8 <dw1000_dev_wakeup>:
{
   144e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   144ea:	b085      	sub	sp, #20
   144ec:	4604      	mov	r4, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   144ee:	f500 66ad 	add.w	r6, r0, #1384	; 0x568
   144f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   144f6:	4630      	mov	r0, r6
   144f8:	f7f6 faa6 	bl	aa48 <os_mutex_pend>
    if (err != DPL_OK) {
   144fc:	b148      	cbz	r0, 14512 <dw1000_dev_wakeup+0x2a>
        inst->uwb_dev.status.mtx_error = 1;
   144fe:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   14502:	f043 0308 	orr.w	r3, r3, #8
   14506:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   1450a:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1450e:	b005      	add	sp, #20
   14510:	bdf0      	pop	{r4, r5, r6, r7, pc}
    inst->uwb_dev.status.sleeping = 0;
   14512:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   14516:	f36f 0300 	bfc	r3, #0, #1
   1451a:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
    devid = dw1000_read_reg(inst, DEV_ID_ID, 0, sizeof(uint32_t));
   1451e:	2304      	movs	r3, #4
   14520:	2200      	movs	r2, #0
   14522:	4611      	mov	r1, r2
   14524:	4620      	mov	r0, r4
   14526:	f7ff fde5 	bl	140f4 <dw1000_read_reg>
    int timeout=5;
   1452a:	2505      	movs	r5, #5
    while (devid != 0xDECA0130 && --timeout)
   1452c:	e008      	b.n	14540 <dw1000_dev_wakeup+0x58>
        hal_dw1000_wakeup(inst);
   1452e:	4620      	mov	r0, r4
   14530:	f000 fd8e 	bl	15050 <hal_dw1000_wakeup>
        devid = dw1000_read_reg(inst, DEV_ID_ID, 0, sizeof(uint32_t));
   14534:	2304      	movs	r3, #4
   14536:	2200      	movs	r2, #0
   14538:	4611      	mov	r1, r2
   1453a:	4620      	mov	r0, r4
   1453c:	f7ff fdda 	bl	140f4 <dw1000_read_reg>
    while (devid != 0xDECA0130 && --timeout)
   14540:	4b29      	ldr	r3, [pc, #164]	; (145e8 <dw1000_dev_wakeup+0x100>)
   14542:	4298      	cmp	r0, r3
   14544:	d001      	beq.n	1454a <dw1000_dev_wakeup+0x62>
   14546:	3d01      	subs	r5, #1
   14548:	d1f1      	bne.n	1452e <dw1000_dev_wakeup+0x46>
    inst->uwb_dev.status.sleeping = (devid != DWT_DEVICE_ID);
   1454a:	4b27      	ldr	r3, [pc, #156]	; (145e8 <dw1000_dev_wakeup+0x100>)
   1454c:	1ac0      	subs	r0, r0, r3
   1454e:	bf18      	it	ne
   14550:	2001      	movne	r0, #1
   14552:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   14556:	f360 0300 	bfi	r3, r0, #0, #1
   1455a:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
    dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_SLP2INIT, sizeof(uint32_t));
   1455e:	2504      	movs	r5, #4
   14560:	9502      	str	r5, [sp, #8]
   14562:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   14566:	2300      	movs	r3, #0
   14568:	e9cd 2300 	strd	r2, r3, [sp]
   1456c:	2200      	movs	r2, #0
   1456e:	210f      	movs	r1, #15
   14570:	4620      	mov	r0, r4
   14572:	f7ff fe2f 	bl	141d4 <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_ALL_RX_ERR, sizeof(uint32_t));
   14576:	9502      	str	r5, [sp, #8]
   14578:	a319      	add	r3, pc, #100	; (adr r3, 145e0 <dw1000_dev_wakeup+0xf8>)
   1457a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1457e:	e9cd 2300 	strd	r2, r3, [sp]
   14582:	2200      	movs	r2, #0
   14584:	210f      	movs	r1, #15
   14586:	4620      	mov	r0, r4
   14588:	f7ff fe24 	bl	141d4 <dw1000_write_reg>
    dw1000_phy_set_rx_antennadelay(inst, inst->uwb_dev.rx_antenna_delay);
   1458c:	f8b4 34cc 	ldrh.w	r3, [r4, #1228]	; 0x4cc
   14590:	2702      	movs	r7, #2
   14592:	9702      	str	r7, [sp, #8]
   14594:	2500      	movs	r5, #0
   14596:	9300      	str	r3, [sp, #0]
   14598:	9501      	str	r5, [sp, #4]
   1459a:	f641 0204 	movw	r2, #6148	; 0x1804
   1459e:	212e      	movs	r1, #46	; 0x2e
   145a0:	4620      	mov	r0, r4
   145a2:	f7ff fe17 	bl	141d4 <dw1000_write_reg>
    dw1000_phy_set_tx_antennadelay(inst, inst->uwb_dev.tx_antenna_delay);
   145a6:	f8b4 34ce 	ldrh.w	r3, [r4, #1230]	; 0x4ce
   145aa:	9702      	str	r7, [sp, #8]
   145ac:	9300      	str	r3, [sp, #0]
   145ae:	9501      	str	r5, [sp, #4]
   145b0:	462a      	mov	r2, r5
   145b2:	2118      	movs	r1, #24
   145b4:	4620      	mov	r0, r4
   145b6:	f7ff fe0d 	bl	141d4 <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   145ba:	4630      	mov	r0, r6
   145bc:	f7f6 f9e8 	bl	a990 <os_mutex_release>
    assert(err == DPL_OK);
   145c0:	b940      	cbnz	r0, 145d4 <dw1000_dev_wakeup+0xec>
   145c2:	f8b4 3566 	ldrh.w	r3, [r4, #1382]	; 0x566
    if(dpl_sem_get_count(&inst->tx_sem) == 0) {
   145c6:	2b00      	cmp	r3, #0
   145c8:	d19f      	bne.n	1450a <dw1000_dev_wakeup+0x22>
    return (dpl_error_t)os_sem_release(&sem->sem);
   145ca:	f504 60ac 	add.w	r0, r4, #1376	; 0x560
   145ce:	f7f5 fbe9 	bl	9da4 <os_sem_release>
   145d2:	e79a      	b.n	1450a <dw1000_dev_wakeup+0x22>
    assert(err == DPL_OK);
   145d4:	462b      	mov	r3, r5
   145d6:	462a      	mov	r2, r5
   145d8:	4629      	mov	r1, r5
   145da:	4628      	mov	r0, r5
   145dc:	f7f4 fcc2 	bl	8f64 <__assert_func>
   145e0:	24119000 	.word	0x24119000
   145e4:	00000000 	.word	0x00000000
   145e8:	deca0130 	.word	0xdeca0130

000145ec <dw1000_dev_config>:
{
   145ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   145ee:	b085      	sub	sp, #20
   145f0:	4604      	mov	r4, r0
    int timeout = 3;
   145f2:	2503      	movs	r5, #3
    inst->spi_settings.baudrate = inst->spi_baudrate_low;
   145f4:	f8d4 3558 	ldr.w	r3, [r4, #1368]	; 0x558
   145f8:	f8c4 3598 	str.w	r3, [r4, #1432]	; 0x598
    hal_dw1000_reset(inst);
   145fc:	4620      	mov	r0, r4
   145fe:	f000 fa0d 	bl	14a1c <hal_dw1000_reset>
    rc = hal_spi_disable(inst->spi_num);
   14602:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   14606:	f003 feeb 	bl	183e0 <hal_spi_disable>
    assert(rc == 0);
   1460a:	bb48      	cbnz	r0, 14660 <dw1000_dev_config+0x74>
    rc = hal_spi_config(inst->spi_num, &inst->spi_settings);
   1460c:	f204 5694 	addw	r6, r4, #1428	; 0x594
   14610:	4631      	mov	r1, r6
   14612:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   14616:	f003 fea1 	bl	1835c <hal_spi_config>
    assert(rc == 0);
   1461a:	bb38      	cbnz	r0, 1466c <dw1000_dev_config+0x80>
    rc = hal_spi_enable(inst->spi_num);
   1461c:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   14620:	f003 feb8 	bl	18394 <hal_spi_enable>
    assert(rc == 0);
   14624:	bb40      	cbnz	r0, 14678 <dw1000_dev_config+0x8c>
    inst->uwb_dev.device_id = dw1000_read_reg(inst, DEV_ID_ID, 0, sizeof(uint32_t));
   14626:	2304      	movs	r3, #4
   14628:	2200      	movs	r2, #0
   1462a:	4611      	mov	r1, r2
   1462c:	4620      	mov	r0, r4
   1462e:	f7ff fd61 	bl	140f4 <dw1000_read_reg>
   14632:	f8c4 04c8 	str.w	r0, [r4, #1224]	; 0x4c8
    inst->uwb_dev.status.initialized = (inst->uwb_dev.device_id == DWT_DEVICE_ID);
   14636:	4b55      	ldr	r3, [pc, #340]	; (1478c <dw1000_dev_config+0x1a0>)
   14638:	4298      	cmp	r0, r3
   1463a:	bf14      	ite	ne
   1463c:	2000      	movne	r0, #0
   1463e:	2001      	moveq	r0, #1
   14640:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   14644:	f360 0341 	bfi	r3, r0, #1, #1
   14648:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
    if (!inst->uwb_dev.status.initialized && --timeout)
   1464c:	b2db      	uxtb	r3, r3
   1464e:	f013 0302 	ands.w	r3, r3, #2
   14652:	d117      	bne.n	14684 <dw1000_dev_config+0x98>
   14654:	3d01      	subs	r5, #1
   14656:	d015      	beq.n	14684 <dw1000_dev_config+0x98>
        dw1000_dev_wakeup(inst);
   14658:	4620      	mov	r0, r4
   1465a:	f7ff ff45 	bl	144e8 <dw1000_dev_wakeup>
        goto retry;
   1465e:	e7c9      	b.n	145f4 <dw1000_dev_config+0x8>
    assert(rc == 0);
   14660:	2300      	movs	r3, #0
   14662:	461a      	mov	r2, r3
   14664:	4619      	mov	r1, r3
   14666:	4618      	mov	r0, r3
   14668:	f7f4 fc7c 	bl	8f64 <__assert_func>
    assert(rc == 0);
   1466c:	2300      	movs	r3, #0
   1466e:	461a      	mov	r2, r3
   14670:	4619      	mov	r1, r3
   14672:	4618      	mov	r0, r3
   14674:	f7f4 fc76 	bl	8f64 <__assert_func>
    assert(rc == 0);
   14678:	2300      	movs	r3, #0
   1467a:	461a      	mov	r2, r3
   1467c:	4619      	mov	r1, r3
   1467e:	4618      	mov	r0, r3
   14680:	f7f4 fc70 	bl	8f64 <__assert_func>
    if(!inst->uwb_dev.status.initialized)
   14684:	2b00      	cmp	r3, #0
   14686:	d07f      	beq.n	14788 <dw1000_dev_config+0x19c>
    dw1000_phy_init(inst, NULL);
   14688:	2100      	movs	r1, #0
   1468a:	4620      	mov	r0, r4
   1468c:	f002 fcbe 	bl	1700c <dw1000_phy_init>
    inst->spi_settings.baudrate = inst->spi_baudrate;
   14690:	f8d4 3554 	ldr.w	r3, [r4, #1364]	; 0x554
   14694:	f8c4 3598 	str.w	r3, [r4, #1432]	; 0x598
    rc = hal_spi_disable(inst->spi_num);
   14698:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   1469c:	f003 fea0 	bl	183e0 <hal_spi_disable>
    assert(rc == 0);
   146a0:	2800      	cmp	r0, #0
   146a2:	d15f      	bne.n	14764 <dw1000_dev_config+0x178>
    rc = hal_spi_config(inst->spi_num, &inst->spi_settings);
   146a4:	4631      	mov	r1, r6
   146a6:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   146aa:	f003 fe57 	bl	1835c <hal_spi_config>
    assert(rc == 0);
   146ae:	2800      	cmp	r0, #0
   146b0:	d15e      	bne.n	14770 <dw1000_dev_config+0x184>
    rc = hal_spi_enable(inst->spi_num);
   146b2:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   146b6:	f003 fe6d 	bl	18394 <hal_spi_enable>
    assert(rc == 0);
   146ba:	4607      	mov	r7, r0
   146bc:	2800      	cmp	r0, #0
   146be:	d15d      	bne.n	1477c <dw1000_dev_config+0x190>
    inst->uwb_dev.pan_id = MYNEWT_VAL(PANID);
   146c0:	f64d 63ca 	movw	r3, #57034	; 0xdeca
   146c4:	f8a4 34c0 	strh.w	r3, [r4, #1216]	; 0x4c0
    inst->uwb_dev.uid = inst->part_id & 0xffff;
   146c8:	f8d4 3574 	ldr.w	r3, [r4, #1396]	; 0x574
   146cc:	f8a4 34b6 	strh.w	r3, [r4, #1206]	; 0x4b6
    if (inst == hal_dw1000_inst(0)) {
   146d0:	2000      	movs	r0, #0
   146d2:	f000 f997 	bl	14a04 <hal_dw1000_inst>
   146d6:	4284      	cmp	r4, r0
   146d8:	d007      	beq.n	146ea <dw1000_dev_config+0xfe>
    } else if (inst == hal_dw1000_inst(1)){
   146da:	2001      	movs	r0, #1
   146dc:	f000 f992 	bl	14a04 <hal_dw1000_inst>
   146e0:	4284      	cmp	r4, r0
   146e2:	d002      	beq.n	146ea <dw1000_dev_config+0xfe>
    } else if (inst == hal_dw1000_inst(2)){
   146e4:	2002      	movs	r0, #2
   146e6:	f000 f98d 	bl	14a04 <hal_dw1000_inst>
    inst->uwb_dev.euid = (((uint64_t)inst->lot_id) << 32) + inst->part_id;
   146ea:	f8d4 2578 	ldr.w	r2, [r4, #1400]	; 0x578
   146ee:	f8d4 1574 	ldr.w	r1, [r4, #1396]	; 0x574
   146f2:	f8c4 14b8 	str.w	r1, [r4, #1208]	; 0x4b8
   146f6:	f8c4 24bc 	str.w	r2, [r4, #1212]	; 0x4bc
    dw1000_mac_init(inst, NULL);
   146fa:	2100      	movs	r1, #0
   146fc:	4620      	mov	r0, r4
   146fe:	f001 fd15 	bl	1612c <dw1000_mac_init>
    if (!inst->uwb_dev.uid || inst->uwb_dev.uid == 0xFFFF) {
   14702:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
   14706:	3b01      	subs	r3, #1
   14708:	b29b      	uxth	r3, r3
   1470a:	f64f 72fd 	movw	r2, #65533	; 0xfffd
   1470e:	4293      	cmp	r3, r2
   14710:	d902      	bls.n	14718 <dw1000_dev_config+0x12c>
        inst->uwb_dev.uid = 0x1;
   14712:	2301      	movs	r3, #1
   14714:	f8a4 34b6 	strh.w	r3, [r4, #1206]	; 0x4b6
    dw1000_set_panid(inst,inst->uwb_dev.pan_id);
   14718:	f8b4 34c0 	ldrh.w	r3, [r4, #1216]	; 0x4c0
   1471c:	2602      	movs	r6, #2
   1471e:	9602      	str	r6, [sp, #8]
   14720:	2500      	movs	r5, #0
   14722:	9300      	str	r3, [sp, #0]
   14724:	9501      	str	r5, [sp, #4]
   14726:	4632      	mov	r2, r6
   14728:	2103      	movs	r1, #3
   1472a:	4620      	mov	r0, r4
   1472c:	f7ff fd52 	bl	141d4 <dw1000_write_reg>
    dw1000_set_eui(inst,inst->uwb_dev.euid);
   14730:	2308      	movs	r3, #8
   14732:	9302      	str	r3, [sp, #8]
   14734:	f504 6398 	add.w	r3, r4, #1216	; 0x4c0
   14738:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   1473c:	e9cd 2300 	strd	r2, r3, [sp]
   14740:	462a      	mov	r2, r5
   14742:	2101      	movs	r1, #1
   14744:	4620      	mov	r0, r4
   14746:	f7ff fd45 	bl	141d4 <dw1000_write_reg>
    dw1000_set_address16(inst,inst->uwb_dev.uid);
   1474a:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
   1474e:	9602      	str	r6, [sp, #8]
   14750:	9300      	str	r3, [sp, #0]
   14752:	9501      	str	r5, [sp, #4]
   14754:	462a      	mov	r2, r5
   14756:	2103      	movs	r1, #3
   14758:	4620      	mov	r0, r4
   1475a:	f7ff fd3b 	bl	141d4 <dw1000_write_reg>
}
   1475e:	4638      	mov	r0, r7
   14760:	b005      	add	sp, #20
   14762:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert(rc == 0);
   14764:	2300      	movs	r3, #0
   14766:	461a      	mov	r2, r3
   14768:	4619      	mov	r1, r3
   1476a:	4618      	mov	r0, r3
   1476c:	f7f4 fbfa 	bl	8f64 <__assert_func>
    assert(rc == 0);
   14770:	2300      	movs	r3, #0
   14772:	461a      	mov	r2, r3
   14774:	4619      	mov	r1, r3
   14776:	4618      	mov	r0, r3
   14778:	f7f4 fbf4 	bl	8f64 <__assert_func>
    assert(rc == 0);
   1477c:	2300      	movs	r3, #0
   1477e:	461a      	mov	r2, r3
   14780:	4619      	mov	r1, r3
   14782:	4618      	mov	r0, r3
   14784:	f7f4 fbee 	bl	8f64 <__assert_func>
        return DPL_TIMEOUT;
   14788:	2706      	movs	r7, #6
   1478a:	e7e8      	b.n	1475e <dw1000_dev_config+0x172>
   1478c:	deca0130 	.word	0xdeca0130

00014790 <uwb_dw1000_wakeup>:
{
   14790:	b508      	push	{r3, lr}
    return dw1000_dev_wakeup((dw1000_dev_instance_t *)dev);
   14792:	f7ff fea9 	bl	144e8 <dw1000_dev_wakeup>
}
   14796:	bd08      	pop	{r3, pc}

00014798 <dw1000_dev_enter_sleep_after_tx>:
{
   14798:	b530      	push	{r4, r5, lr}
   1479a:	b085      	sub	sp, #20
   1479c:	4604      	mov	r4, r0
   1479e:	460d      	mov	r5, r1
    uint32_t reg = dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, sizeof(uint32_t));
   147a0:	2304      	movs	r3, #4
   147a2:	461a      	mov	r2, r3
   147a4:	2136      	movs	r1, #54	; 0x36
   147a6:	f7ff fca5 	bl	140f4 <dw1000_read_reg>
    inst->control.sleep_after_tx = enable;
   147aa:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
   147ae:	f365 13c7 	bfi	r3, r5, #7, #1
   147b2:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    if(inst->control.sleep_after_tx)
   147b6:	b25b      	sxtb	r3, r3
   147b8:	2b00      	cmp	r3, #0
   147ba:	db0e      	blt.n	147da <dw1000_dev_enter_sleep_after_tx+0x42>
        reg &= ~(PMSC_CTRL1_ATXSLP);
   147bc:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, reg, sizeof(uint32_t));
   147c0:	2204      	movs	r2, #4
   147c2:	9202      	str	r2, [sp, #8]
   147c4:	9000      	str	r0, [sp, #0]
   147c6:	2300      	movs	r3, #0
   147c8:	9301      	str	r3, [sp, #4]
   147ca:	2136      	movs	r1, #54	; 0x36
   147cc:	4620      	mov	r0, r4
   147ce:	f7ff fd01 	bl	141d4 <dw1000_write_reg>
}
   147d2:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   147d6:	b005      	add	sp, #20
   147d8:	bd30      	pop	{r4, r5, pc}
        reg |= PMSC_CTRL1_ATXSLP;
   147da:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
   147de:	e7ef      	b.n	147c0 <dw1000_dev_enter_sleep_after_tx+0x28>

000147e0 <uwb_dw1000_enter_sleep_after_tx>:
{
   147e0:	b508      	push	{r3, lr}
    return dw1000_dev_enter_sleep_after_tx((dw1000_dev_instance_t *)dev, enable);
   147e2:	f7ff ffd9 	bl	14798 <dw1000_dev_enter_sleep_after_tx>
}
   147e6:	bd08      	pop	{r3, pc}

000147e8 <dw1000_dev_enter_sleep_after_rx>:
{
   147e8:	b530      	push	{r4, r5, lr}
   147ea:	b085      	sub	sp, #20
   147ec:	4604      	mov	r4, r0
   147ee:	460d      	mov	r5, r1
    uint32_t reg = dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, sizeof(uint32_t));
   147f0:	2304      	movs	r3, #4
   147f2:	461a      	mov	r2, r3
   147f4:	2136      	movs	r1, #54	; 0x36
   147f6:	f7ff fc7d 	bl	140f4 <dw1000_read_reg>
    inst->control.sleep_after_rx = enable;
   147fa:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   147fe:	f365 0300 	bfi	r3, r5, #0, #1
   14802:	f884 35b1 	strb.w	r3, [r4, #1457]	; 0x5b1
    if(inst->control.sleep_after_rx)
   14806:	b2db      	uxtb	r3, r3
   14808:	f013 0f01 	tst.w	r3, #1
   1480c:	d00e      	beq.n	1482c <dw1000_dev_enter_sleep_after_rx+0x44>
        reg |= PMSC_CTRL1_ARXSLP;
   1480e:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, reg, sizeof(uint32_t));
   14812:	2204      	movs	r2, #4
   14814:	9202      	str	r2, [sp, #8]
   14816:	9000      	str	r0, [sp, #0]
   14818:	2300      	movs	r3, #0
   1481a:	9301      	str	r3, [sp, #4]
   1481c:	2136      	movs	r1, #54	; 0x36
   1481e:	4620      	mov	r0, r4
   14820:	f7ff fcd8 	bl	141d4 <dw1000_write_reg>
}
   14824:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   14828:	b005      	add	sp, #20
   1482a:	bd30      	pop	{r4, r5, pc}
        reg &= ~(PMSC_CTRL1_ARXSLP);
   1482c:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
   14830:	e7ef      	b.n	14812 <dw1000_dev_enter_sleep_after_rx+0x2a>

00014832 <uwb_dw1000_enter_sleep_after_rx>:
{
   14832:	b508      	push	{r3, lr}
    return dw1000_dev_enter_sleep_after_rx((dw1000_dev_instance_t *)dev, enable);
   14834:	f7ff ffd8 	bl	147e8 <dw1000_dev_enter_sleep_after_rx>
}
   14838:	bd08      	pop	{r3, pc}
	...

0001483c <dw1000_dev_init>:
 * @param arg   Argument to set as pointer to struct dw1000_dev_cfg.
 * @return DPL_OK on success
 */
int
dw1000_dev_init(struct os_dev *odev, void *arg)
{
   1483c:	b538      	push	{r3, r4, r5, lr}
   1483e:	4604      	mov	r4, r0
   14840:	460d      	mov	r5, r1
    dpl_error_t err;
    struct dw1000_dev_cfg *cfg = (struct dw1000_dev_cfg*)arg;
    struct uwb_dev *udev = (struct uwb_dev*)odev;
    dw1000_dev_instance_t *inst = (dw1000_dev_instance_t *)odev;
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    DIAGMSG("{\"utime\": %"PRIu32",\"msg\": \"dw1000_dev_init\"}\n", dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
   14842:	f7f9 fde2 	bl	e40a <dpl_cputime_get32>
   14846:	4601      	mov	r1, r0
   14848:	4840      	ldr	r0, [pc, #256]	; (1494c <dw1000_dev_init+0x110>)
   1484a:	f7f9 fd59 	bl	e300 <printf>
#endif
    /* TODO, replace with open anch close function pointers below */
    OS_DEV_SETHANDLERS(odev, 0, 0);
   1484e:	2300      	movs	r3, #0
   14850:	6023      	str	r3, [r4, #0]
   14852:	60e3      	str	r3, [r4, #12]

    if (inst == NULL) {
   14854:	2c00      	cmp	r4, #0
   14856:	d052      	beq.n	148fe <dw1000_dev_init+0xc2>
        assert(inst);
        inst->uwb_dev.status.selfmalloc = 1;
        udev = (struct uwb_dev*)inst;
    }

    udev->rxbuf_size = MYNEWT_VAL(UWB_RX_BUFFER_SIZE);
   14858:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1485c:	f8a4 3504 	strh.w	r3, [r4, #1284]	; 0x504
    udev->txbuf_size = MYNEWT_VAL(DW1000_HAL_SPI_BUFFER_SIZE);
   14860:	f44f 7380 	mov.w	r3, #256	; 0x100
   14864:	f8a4 3506 	strh.w	r3, [r4, #1286]	; 0x506
    uwb_dev_init(udev);
   14868:	4620      	mov	r0, r4
   1486a:	f7f4 f9a7 	bl	8bbc <uwb_dev_init>

    /* Setup common uwb interface */
    udev->uw_funcs = &dw1000_uwb_funcs;
   1486e:	4b38      	ldr	r3, [pc, #224]	; (14950 <dw1000_dev_init+0x114>)
   14870:	6263      	str	r3, [r4, #36]	; 0x24
    udev->rxdiag = (struct uwb_dev_rxdiag*)&inst->rxdiag;
   14872:	f204 539c 	addw	r3, r4, #1436	; 0x59c
   14876:	f8c4 34f8 	str.w	r3, [r4, #1272]	; 0x4f8
    udev->rxdiag->rxd_len = sizeof(inst->rxdiag);
   1487a:	2314      	movs	r3, #20
   1487c:	f8a4 359c 	strh.w	r3, [r4, #1436]	; 0x59c

    /* Check size requirements */
    assert(sizeof(inst->rxdiag) <= MYNEWT_VAL(UWB_DEV_RXDIAG_MAXLEN));

    /* Capture dev_cfg parameters */
    inst->spi_sem = cfg->spi_sem;
   14880:	682b      	ldr	r3, [r5, #0]
   14882:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    inst->spi_num = cfg->spi_num;
   14886:	7b2b      	ldrb	r3, [r5, #12]
   14888:	f884 355c 	strb.w	r3, [r4, #1372]	; 0x55c
    inst->spi_baudrate = cfg->spi_baudrate;
   1488c:	686b      	ldr	r3, [r5, #4]
   1488e:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
    inst->spi_baudrate_low = cfg->spi_baudrate_low;
   14892:	68ab      	ldr	r3, [r5, #8]
   14894:	f8c4 3558 	str.w	r3, [r4, #1368]	; 0x558
    inst->irq_pin = cfg->irq_pin;
   14898:	7bab      	ldrb	r3, [r5, #14]
   1489a:	f884 355d 	strb.w	r3, [r4, #1373]	; 0x55d
    inst->rst_pin = cfg->rst_pin;
   1489e:	7b6b      	ldrb	r3, [r5, #13]
   148a0:	f884 355f 	strb.w	r3, [r4, #1375]	; 0x55f
    inst->ss_pin  = cfg->ss_pin;
   148a4:	7beb      	ldrb	r3, [r5, #15]
   148a6:	f884 355e 	strb.w	r3, [r4, #1374]	; 0x55e

    udev->rx_antenna_delay = cfg->rx_antenna_delay;
   148aa:	8a2b      	ldrh	r3, [r5, #16]
   148ac:	f8a4 34cc 	strh.w	r3, [r4, #1228]	; 0x4cc
    udev->tx_antenna_delay = cfg->tx_antenna_delay;
   148b0:	8a6b      	ldrh	r3, [r5, #18]
   148b2:	f8a4 34ce 	strh.w	r3, [r4, #1230]	; 0x4ce
    udev->ext_clock_delay = cfg->ext_clock_delay;
   148b6:	696b      	ldr	r3, [r5, #20]
   148b8:	f8c4 34d4 	str.w	r3, [r4, #1236]	; 0x4d4
    return (dpl_error_t)os_mutex_init(&mu->mu);
   148bc:	f504 60ad 	add.w	r0, r4, #1384	; 0x568
   148c0:	f7f6 f85c 	bl	a97c <os_mutex_init>

    err = dpl_mutex_init(&inst->mutex);
    assert(err == DPL_OK);
   148c4:	bb78      	cbnz	r0, 14926 <dw1000_dev_init+0xea>
    return (dpl_error_t)os_sem_init(&sem->sem, tokens);
   148c6:	2101      	movs	r1, #1
   148c8:	f504 60ac 	add.w	r0, r4, #1376	; 0x560
   148cc:	f7f5 fa62 	bl	9d94 <os_sem_init>
    err = dpl_sem_init(&inst->tx_sem, 0x1);
    assert(err == DPL_OK);
   148d0:	bb78      	cbnz	r0, 14932 <dw1000_dev_init+0xf6>
   148d2:	2101      	movs	r1, #1
   148d4:	f204 504c 	addw	r0, r4, #1356	; 0x54c
   148d8:	f7f5 fa5c 	bl	9d94 <os_sem_init>
    err = dpl_sem_init(&inst->spi_nb_sem, 0x1);
    assert(err == DPL_OK);
   148dc:	bb78      	cbnz	r0, 1493e <dw1000_dev_init+0x102>

    /* phy attritubes per the IEEE802.15.4-2011 standard, Table 99 and Table 101 */
    udev->attrib.Tpsym = DPL_FLOAT32_INIT(1.0176282f); //!< Preamble symbols duration (usec) for MPRF of 62.89Mhz
   148de:	f204 5334 	addw	r3, r4, #1332	; 0x534
   148e2:	4a1c      	ldr	r2, [pc, #112]	; (14954 <dw1000_dev_init+0x118>)
   148e4:	601a      	str	r2, [r3, #0]
    udev->attrib.Tbsym = DPL_FLOAT32_INIT(1.0256410f); //!< Baserate symbols duration (usec) 850khz
   148e6:	f504 63a7 	add.w	r3, r4, #1336	; 0x538
   148ea:	4a1b      	ldr	r2, [pc, #108]	; (14958 <dw1000_dev_init+0x11c>)
   148ec:	601a      	str	r2, [r3, #0]
    udev->attrib.Tdsym = DPL_FLOAT32_INIT(0.1282051f); //!< Datarate symbols duration (usec) 6.81Mhz
   148ee:	f204 533c 	addw	r3, r4, #1340	; 0x53c
   148f2:	4a1a      	ldr	r2, [pc, #104]	; (1495c <dw1000_dev_init+0x120>)
   148f4:	601a      	str	r2, [r3, #0]

    SLIST_INIT(&inst->uwb_dev.interface_cbs);
   148f6:	2000      	movs	r0, #0
   148f8:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530

#if MYNEWT_VAL(DW1000_SPI_BACKTRACE_LEN) || MYNEWT_VAL(DW1000_SYS_STATUS_BACKTRACE_LEN)
    inst->bt_ticks2usec = 1000000/MYNEWT_VAL(OS_CPUTIME_FREQ);
#endif
    return DPL_OK;
}
   148fc:	bd38      	pop	{r3, r4, r5, pc}
        inst = (dw1000_dev_instance_t *) calloc(1, sizeof(dw1000_dev_instance_t));
   148fe:	f44f 61be 	mov.w	r1, #1520	; 0x5f0
   14902:	2001      	movs	r0, #1
   14904:	f7f8 ffa7 	bl	d856 <calloc>
        assert(inst);
   14908:	4604      	mov	r4, r0
   1490a:	b130      	cbz	r0, 1491a <dw1000_dev_init+0xde>
        inst->uwb_dev.status.selfmalloc = 1;
   1490c:	f890 3508 	ldrb.w	r3, [r0, #1288]	; 0x508
   14910:	f043 0301 	orr.w	r3, r3, #1
   14914:	f880 3508 	strb.w	r3, [r0, #1288]	; 0x508
        udev = (struct uwb_dev*)inst;
   14918:	e79e      	b.n	14858 <dw1000_dev_init+0x1c>
        assert(inst);
   1491a:	2300      	movs	r3, #0
   1491c:	461a      	mov	r2, r3
   1491e:	4619      	mov	r1, r3
   14920:	4618      	mov	r0, r3
   14922:	f7f4 fb1f 	bl	8f64 <__assert_func>
    assert(err == DPL_OK);
   14926:	2300      	movs	r3, #0
   14928:	461a      	mov	r2, r3
   1492a:	4619      	mov	r1, r3
   1492c:	4618      	mov	r0, r3
   1492e:	f7f4 fb19 	bl	8f64 <__assert_func>
    assert(err == DPL_OK);
   14932:	2300      	movs	r3, #0
   14934:	461a      	mov	r2, r3
   14936:	4619      	mov	r1, r3
   14938:	4618      	mov	r0, r3
   1493a:	f7f4 fb13 	bl	8f64 <__assert_func>
    assert(err == DPL_OK);
   1493e:	2300      	movs	r3, #0
   14940:	461a      	mov	r2, r3
   14942:	4619      	mov	r1, r3
   14944:	4618      	mov	r0, r3
   14946:	f7f4 fb0d 	bl	8f64 <__assert_func>
   1494a:	bf00      	nop
   1494c:	0002400c 	.word	0x0002400c
   14950:	00024050 	.word	0x00024050
   14954:	3f8241a4 	.word	0x3f8241a4
   14958:	3f834834 	.word	0x3f834834
   1495c:	3e034833 	.word	0x3e034833

00014960 <dw1000_dev_deinit>:
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void
dw1000_dev_deinit(dw1000_dev_instance_t * inst)
{
   14960:	b510      	push	{r4, lr}
    assert(inst);
   14962:	b1d8      	cbz	r0, 1499c <dw1000_dev_deinit+0x3c>
   14964:	4604      	mov	r4, r0
    hal_spi_disable(inst->spi_num);
   14966:	f890 055c 	ldrb.w	r0, [r0, #1372]	; 0x55c
   1496a:	f003 fd39 	bl	183e0 <hal_spi_disable>

    /* De-Initialise task structures in uwb_dev */
    uwb_task_deinit(&inst->uwb_dev);
   1496e:	4620      	mov	r0, r4
   14970:	f7f4 f918 	bl	8ba4 <uwb_task_deinit>
    hal_gpio_irq_disable(inst->irq_pin);
   14974:	f894 055d 	ldrb.w	r0, [r4, #1373]	; 0x55d
   14978:	f7f4 fac8 	bl	8f0c <hal_gpio_irq_disable>
    hal_gpio_irq_release(inst->irq_pin);
   1497c:	f894 055d 	ldrb.w	r0, [r4, #1373]	; 0x55d
   14980:	f7f4 fad2 	bl	8f28 <hal_gpio_irq_release>

    if (inst->uwb_dev.status.selfmalloc) {
   14984:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   14988:	f013 0f01 	tst.w	r3, #1
   1498c:	d10c      	bne.n	149a8 <dw1000_dev_deinit+0x48>
        free(inst);
    } else {
        inst->uwb_dev.status.initialized = 0;
   1498e:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   14992:	f36f 0341 	bfc	r3, #1, #1
   14996:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
    }
}
   1499a:	bd10      	pop	{r4, pc}
    assert(inst);
   1499c:	2300      	movs	r3, #0
   1499e:	461a      	mov	r2, r3
   149a0:	4619      	mov	r1, r3
   149a2:	4618      	mov	r0, r3
   149a4:	f7f4 fade 	bl	8f64 <__assert_func>
        free(inst);
   149a8:	4620      	mov	r0, r4
   149aa:	f7f9 f84f 	bl	da4c <free>
   149ae:	e7f4      	b.n	1499a <dw1000_dev_deinit+0x3a>

000149b0 <hal_dw1000_spi_txrx_cb>:
 * @param ev    pointer to os_event
 * @return void
 */
void
hal_dw1000_spi_txrx_cb(void *arg, int len)
{
   149b0:	b510      	push	{r4, lr}
    dpl_error_t err;
    struct _dw1000_dev_instance_t * inst = arg;
    assert(inst!=0);
   149b2:	b148      	cbz	r0, 149c8 <hal_dw1000_spi_txrx_cb+0x18>
   149b4:	4604      	mov	r4, r0
   149b6:	f8b0 3552 	ldrh.w	r3, [r0, #1362]	; 0x552

    /* Check for longer nonblocking read/write op */
    if (dpl_sem_get_count(&inst->spi_nb_sem) == 0) {
   149ba:	b98b      	cbnz	r3, 149e0 <hal_dw1000_spi_txrx_cb+0x30>
    return (dpl_error_t)os_sem_release(&sem->sem);
   149bc:	f200 504c 	addw	r0, r0, #1356	; 0x54c
   149c0:	f7f5 f9f0 	bl	9da4 <os_sem_release>
        err = dpl_sem_release(&inst->spi_nb_sem);
        assert(err == DPL_OK);
   149c4:	b930      	cbnz	r0, 149d4 <hal_dw1000_spi_txrx_cb+0x24>
        hal_gpio_write(inst->ss_pin, 1);
        DW1000_SPI_BT_ADD_END(inst);
        err = dpl_sem_release(inst->spi_sem);
        assert(err == DPL_OK);
    }
}
   149c6:	bd10      	pop	{r4, pc}
    assert(inst!=0);
   149c8:	2300      	movs	r3, #0
   149ca:	461a      	mov	r2, r3
   149cc:	4619      	mov	r1, r3
   149ce:	4618      	mov	r0, r3
   149d0:	f7f4 fac8 	bl	8f64 <__assert_func>
        assert(err == DPL_OK);
   149d4:	2300      	movs	r3, #0
   149d6:	461a      	mov	r2, r3
   149d8:	4619      	mov	r1, r3
   149da:	4618      	mov	r0, r3
   149dc:	f7f4 fac2 	bl	8f64 <__assert_func>
        hal_gpio_write(inst->ss_pin, 1);
   149e0:	2101      	movs	r1, #1
   149e2:	f890 055e 	ldrb.w	r0, [r0, #1374]	; 0x55e
   149e6:	f7f4 fa09 	bl	8dfc <hal_gpio_write>
   149ea:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
   149ee:	f7f5 f9d9 	bl	9da4 <os_sem_release>
        assert(err == DPL_OK);
   149f2:	2800      	cmp	r0, #0
   149f4:	d0e7      	beq.n	149c6 <hal_dw1000_spi_txrx_cb+0x16>
   149f6:	2300      	movs	r3, #0
   149f8:	461a      	mov	r2, r3
   149fa:	4619      	mov	r1, r3
   149fc:	4618      	mov	r0, r3
   149fe:	f7f4 fab1 	bl	8f64 <__assert_func>
	...

00014a04 <hal_dw1000_inst>:
    if (idx < ARRAY_SIZE(hal_dw1000_instances)) {
   14a04:	4603      	mov	r3, r0
   14a06:	b928      	cbnz	r0, 14a14 <hal_dw1000_inst+0x10>
        return &hal_dw1000_instances[idx];
   14a08:	4803      	ldr	r0, [pc, #12]	; (14a18 <hal_dw1000_inst+0x14>)
   14a0a:	f44f 62be 	mov.w	r2, #1520	; 0x5f0
   14a0e:	fb02 0003 	mla	r0, r2, r3, r0
   14a12:	4770      	bx	lr
    return 0;
   14a14:	2000      	movs	r0, #0
}
   14a16:	4770      	bx	lr
   14a18:	20000778 	.word	0x20000778

00014a1c <hal_dw1000_reset>:
{
   14a1c:	b510      	push	{r4, lr}
    assert(inst);
   14a1e:	b308      	cbz	r0, 14a64 <hal_dw1000_reset+0x48>
   14a20:	4604      	mov	r4, r0
    hal_gpio_init_out(inst->ss_pin, 1);
   14a22:	2101      	movs	r1, #1
   14a24:	f890 055e 	ldrb.w	r0, [r0, #1374]	; 0x55e
   14a28:	f7f4 f9cc 	bl	8dc4 <hal_gpio_init_out>
    hal_gpio_init_out(inst->rst_pin, 0);
   14a2c:	2100      	movs	r1, #0
   14a2e:	f894 055f 	ldrb.w	r0, [r4, #1375]	; 0x55f
   14a32:	f7f4 f9c7 	bl	8dc4 <hal_gpio_init_out>
    hal_gpio_write(inst->rst_pin, 0);
   14a36:	2100      	movs	r1, #0
   14a38:	f894 055f 	ldrb.w	r0, [r4, #1375]	; 0x55f
   14a3c:	f7f4 f9de 	bl	8dfc <hal_gpio_write>
    dpl_cputime_delay_usecs(1);
   14a40:	2001      	movs	r0, #1
   14a42:	f7f9 fcf2 	bl	e42a <dpl_cputime_delay_usecs>
    hal_gpio_write(inst->rst_pin, 1);
   14a46:	2101      	movs	r1, #1
   14a48:	f894 055f 	ldrb.w	r0, [r4, #1375]	; 0x55f
   14a4c:	f7f4 f9d6 	bl	8dfc <hal_gpio_write>
    hal_gpio_init_in(inst->rst_pin, HAL_GPIO_PULL_NONE);
   14a50:	2100      	movs	r1, #0
   14a52:	f894 055f 	ldrb.w	r0, [r4, #1375]	; 0x55f
   14a56:	f7f4 f99f 	bl	8d98 <hal_gpio_init_in>
    dpl_cputime_delay_usecs(5000);
   14a5a:	f241 3088 	movw	r0, #5000	; 0x1388
   14a5e:	f7f9 fce4 	bl	e42a <dpl_cputime_delay_usecs>
}
   14a62:	bd10      	pop	{r4, pc}
    assert(inst);
   14a64:	2300      	movs	r3, #0
   14a66:	461a      	mov	r2, r3
   14a68:	4619      	mov	r1, r3
   14a6a:	4618      	mov	r0, r3
   14a6c:	f7f4 fa7a 	bl	8f64 <__assert_func>

00014a70 <hal_dw1000_read>:
{
   14a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14a74:	4605      	mov	r5, r0
   14a76:	f8bd 9020 	ldrh.w	r9, [sp, #32]
    assert(inst->spi_sem);
   14a7a:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548
   14a7e:	b178      	cbz	r0, 14aa0 <hal_dw1000_read+0x30>
   14a80:	460e      	mov	r6, r1
   14a82:	4617      	mov	r7, r2
   14a84:	4698      	mov	r8, r3
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   14a86:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14a8a:	f7f5 f9bd 	bl	9e08 <os_sem_pend>
    if (rc != DPL_OK) {
   14a8e:	b168      	cbz	r0, 14aac <hal_dw1000_read+0x3c>
        inst->uwb_dev.status.sem_error = 1;
   14a90:	f895 350b 	ldrb.w	r3, [r5, #1291]	; 0x50b
   14a94:	f043 0304 	orr.w	r3, r3, #4
   14a98:	f885 350b 	strb.w	r3, [r5, #1291]	; 0x50b
}
   14a9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    assert(inst->spi_sem);
   14aa0:	2300      	movs	r3, #0
   14aa2:	461a      	mov	r2, r3
   14aa4:	4619      	mov	r1, r3
   14aa6:	4618      	mov	r0, r3
   14aa8:	f7f4 fa5c 	bl	8f64 <__assert_func>
    hal_gpio_write(inst->ss_pin, 0);
   14aac:	2100      	movs	r1, #0
   14aae:	f895 055e 	ldrb.w	r0, [r5, #1374]	; 0x55e
   14ab2:	f7f4 f9a3 	bl	8dfc <hal_gpio_write>
    rc = hal_spi_txrx(inst->spi_num, (void*)cmd, 0, cmd_size);
   14ab6:	463b      	mov	r3, r7
   14ab8:	2200      	movs	r2, #0
   14aba:	4631      	mov	r1, r6
   14abc:	f895 055c 	ldrb.w	r0, [r5, #1372]	; 0x55c
   14ac0:	f003 fd08 	bl	184d4 <hal_spi_txrx>
    assert(rc == DPL_OK);
   14ac4:	b9c0      	cbnz	r0, 14af8 <hal_dw1000_read+0x88>
    int step = (inst->uwb_dev.txbuf_size > MYNEWT_VAL(DW1000_HAL_SPI_MAX_CNT)) ?
   14ac6:	f8b5 7506 	ldrh.w	r7, [r5, #1286]	; 0x506
        MYNEWT_VAL(DW1000_HAL_SPI_MAX_CNT) : inst->uwb_dev.txbuf_size;
   14aca:	2fff      	cmp	r7, #255	; 0xff
   14acc:	bf28      	it	cs
   14ace:	27ff      	movcs	r7, #255	; 0xff
    for (int offset = 0;offset<length && rc == DPL_OK;offset+=step) {
   14ad0:	4604      	mov	r4, r0
    int bytes_left = length;
   14ad2:	464e      	mov	r6, r9
    for (int offset = 0;offset<length && rc == DPL_OK;offset+=step) {
   14ad4:	454c      	cmp	r4, r9
   14ad6:	da15      	bge.n	14b04 <hal_dw1000_read+0x94>
   14ad8:	b9a0      	cbnz	r0, 14b04 <hal_dw1000_read+0x94>
        int bytes_to_read = (bytes_left > step) ? step : bytes_left;
   14ada:	4633      	mov	r3, r6
   14adc:	42be      	cmp	r6, r7
   14ade:	bfa8      	it	ge
   14ae0:	463b      	movge	r3, r7
        bytes_left-=bytes_to_read;
   14ae2:	1af6      	subs	r6, r6, r3
        rc = hal_spi_txrx(inst->spi_num, inst->uwb_dev.txbuf, buffer+offset, bytes_to_read);
   14ae4:	eb08 0204 	add.w	r2, r8, r4
   14ae8:	f8d5 1500 	ldr.w	r1, [r5, #1280]	; 0x500
   14aec:	f895 055c 	ldrb.w	r0, [r5, #1372]	; 0x55c
   14af0:	f003 fcf0 	bl	184d4 <hal_spi_txrx>
    for (int offset = 0;offset<length && rc == DPL_OK;offset+=step) {
   14af4:	443c      	add	r4, r7
   14af6:	e7ed      	b.n	14ad4 <hal_dw1000_read+0x64>
    assert(rc == DPL_OK);
   14af8:	2300      	movs	r3, #0
   14afa:	461a      	mov	r2, r3
   14afc:	4619      	mov	r1, r3
   14afe:	4618      	mov	r0, r3
   14b00:	f7f4 fa30 	bl	8f64 <__assert_func>
    hal_gpio_write(inst->ss_pin, 1);
   14b04:	2101      	movs	r1, #1
   14b06:	f895 055e 	ldrb.w	r0, [r5, #1374]	; 0x55e
   14b0a:	f7f4 f977 	bl	8dfc <hal_gpio_write>
    return (dpl_error_t)os_sem_release(&sem->sem);
   14b0e:	f8d5 0548 	ldr.w	r0, [r5, #1352]	; 0x548
   14b12:	f7f5 f947 	bl	9da4 <os_sem_release>
    assert(rc == DPL_OK);
   14b16:	2800      	cmp	r0, #0
   14b18:	d0c0      	beq.n	14a9c <hal_dw1000_read+0x2c>
   14b1a:	2300      	movs	r3, #0
   14b1c:	461a      	mov	r2, r3
   14b1e:	4619      	mov	r1, r3
   14b20:	4618      	mov	r0, r3
   14b22:	f7f4 fa1f 	bl	8f64 <__assert_func>
	...

00014b28 <hal_dw1000_read_noblock>:
 * @param length    Represents buffer length.
 * @return int      DPL_OK if read is ok, error otherwise
 */
int
hal_dw1000_read_noblock(struct _dw1000_dev_instance_t * inst, const uint8_t * cmd, uint8_t cmd_size, uint8_t * buffer, uint16_t length)
{
   14b28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b2c:	4604      	mov	r4, r0
   14b2e:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
    int rc = DPL_OK;
    assert(inst->spi_sem);
   14b32:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548
   14b36:	b178      	cbz	r0, 14b58 <hal_dw1000_read_noblock+0x30>
   14b38:	4688      	mov	r8, r1
   14b3a:	4617      	mov	r7, r2
   14b3c:	461e      	mov	r6, r3
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   14b3e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14b42:	f7f5 f961 	bl	9e08 <os_sem_pend>

    rc = dpl_sem_pend(inst->spi_sem, DPL_TIMEOUT_NEVER);
    if (rc != DPL_OK) {
   14b46:	b168      	cbz	r0, 14b64 <hal_dw1000_read_noblock+0x3c>
        inst->uwb_dev.status.sem_error = 1;
   14b48:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   14b4c:	f043 0304 	orr.w	r3, r3, #4
   14b50:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
    rc = dpl_sem_release(inst->spi_sem);
    assert(rc == DPL_OK);

early_exit:
    return rc;
}
   14b54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(inst->spi_sem);
   14b58:	2300      	movs	r3, #0
   14b5a:	461a      	mov	r2, r3
   14b5c:	4619      	mov	r1, r3
   14b5e:	4618      	mov	r0, r3
   14b60:	f7f4 fa00 	bl	8f64 <__assert_func>
    rc = hal_spi_disable(inst->spi_num);
   14b64:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   14b68:	f003 fc3a 	bl	183e0 <hal_spi_disable>
   14b6c:	4605      	mov	r5, r0
    rc |= hal_spi_set_txrx_cb(inst->spi_num, hal_dw1000_spi_txrx_cb, (void*)inst);
   14b6e:	4622      	mov	r2, r4
   14b70:	4987      	ldr	r1, [pc, #540]	; (14d90 <hal_dw1000_read_noblock+0x268>)
   14b72:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   14b76:	f003 fc97 	bl	184a8 <hal_spi_set_txrx_cb>
   14b7a:	4305      	orrs	r5, r0
    rc |= hal_spi_enable(inst->spi_num);
   14b7c:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   14b80:	f003 fc08 	bl	18394 <hal_spi_enable>
    if (rc != DPL_OK) {
   14b84:	ea55 0300 	orrs.w	r3, r5, r0
   14b88:	d00b      	beq.n	14ba2 <hal_dw1000_read_noblock+0x7a>
    return (dpl_error_t)os_sem_release(&sem->sem);
   14b8a:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
   14b8e:	f7f5 f909 	bl	9da4 <os_sem_release>
    assert(rc == DPL_OK);
   14b92:	2800      	cmp	r0, #0
   14b94:	d0de      	beq.n	14b54 <hal_dw1000_read_noblock+0x2c>
   14b96:	2300      	movs	r3, #0
   14b98:	461a      	mov	r2, r3
   14b9a:	4619      	mov	r1, r3
   14b9c:	4618      	mov	r0, r3
   14b9e:	f7f4 f9e1 	bl	8f64 <__assert_func>
    hal_gpio_write(inst->ss_pin, 0);
   14ba2:	2100      	movs	r1, #0
   14ba4:	f894 055e 	ldrb.w	r0, [r4, #1374]	; 0x55e
   14ba8:	f7f4 f928 	bl	8dfc <hal_gpio_write>
    if (cmd_size + length < inst->uwb_dev.txbuf_size &&
   14bac:	eb07 0509 	add.w	r5, r7, r9
   14bb0:	f8b4 3506 	ldrh.w	r3, [r4, #1286]	; 0x506
   14bb4:	429d      	cmp	r5, r3
   14bb6:	da01      	bge.n	14bbc <hal_dw1000_read_noblock+0x94>
   14bb8:	2dfe      	cmp	r5, #254	; 0xfe
   14bba:	dd0f      	ble.n	14bdc <hal_dw1000_read_noblock+0xb4>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   14bbc:	f204 5a4c 	addw	sl, r4, #1356	; 0x54c
   14bc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14bc4:	4650      	mov	r0, sl
   14bc6:	f7f5 f91f 	bl	9e08 <os_sem_pend>
    if (rc != DPL_OK) {
   14bca:	2800      	cmp	r0, #0
   14bcc:	d059      	beq.n	14c82 <hal_dw1000_read_noblock+0x15a>
        inst->uwb_dev.status.sem_error = 1;
   14bce:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   14bd2:	f043 0304 	orr.w	r3, r3, #4
   14bd6:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
        goto err_return;
   14bda:	e7d6      	b.n	14b8a <hal_dw1000_read_noblock+0x62>
        memset(inst->uwb_dev.txbuf, 0, cmd_size + length);
   14bdc:	462a      	mov	r2, r5
   14bde:	2100      	movs	r1, #0
   14be0:	f8d4 0500 	ldr.w	r0, [r4, #1280]	; 0x500
   14be4:	f7f8 ff79 	bl	dada <memset>
        memcpy(inst->uwb_dev.txbuf, cmd, cmd_size);
   14be8:	463a      	mov	r2, r7
   14bea:	4641      	mov	r1, r8
   14bec:	f8d4 0500 	ldr.w	r0, [r4, #1280]	; 0x500
   14bf0:	f7f8 ff66 	bl	dac0 <memcpy>
   14bf4:	f204 584c 	addw	r8, r4, #1356	; 0x54c
   14bf8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14bfc:	4640      	mov	r0, r8
   14bfe:	f7f5 f903 	bl	9e08 <os_sem_pend>
        if (rc != DPL_OK) {
   14c02:	b130      	cbz	r0, 14c12 <hal_dw1000_read_noblock+0xea>
            inst->uwb_dev.status.sem_error = 1;
   14c04:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   14c08:	f043 0304 	orr.w	r3, r3, #4
   14c0c:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
            goto err_return;
   14c10:	e7bb      	b.n	14b8a <hal_dw1000_read_noblock+0x62>
        rc = hal_spi_txrx_noblock(inst->spi_num, inst->uwb_dev.txbuf,
   14c12:	f8d4 1500 	ldr.w	r1, [r4, #1280]	; 0x500
   14c16:	462b      	mov	r3, r5
   14c18:	460a      	mov	r2, r1
   14c1a:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   14c1e:	f003 fcaf 	bl	18580 <hal_spi_txrx_noblock>
   14c22:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14c26:	4640      	mov	r0, r8
   14c28:	f7f5 f8ee 	bl	9e08 <os_sem_pend>
        if (rc != DPL_OK) {
   14c2c:	b130      	cbz	r0, 14c3c <hal_dw1000_read_noblock+0x114>
            inst->uwb_dev.status.sem_error = 1;
   14c2e:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   14c32:	f043 0304 	orr.w	r3, r3, #4
   14c36:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
            goto err_return;
   14c3a:	e7a6      	b.n	14b8a <hal_dw1000_read_noblock+0x62>
    return (dpl_error_t)os_sem_release(&sem->sem);
   14c3c:	4640      	mov	r0, r8
   14c3e:	f7f5 f8b1 	bl	9da4 <os_sem_release>
        assert(rc == DPL_OK);
   14c42:	b9c0      	cbnz	r0, 14c76 <hal_dw1000_read_noblock+0x14e>
        hal_gpio_write(inst->ss_pin, 1);
   14c44:	2101      	movs	r1, #1
   14c46:	f894 055e 	ldrb.w	r0, [r4, #1374]	; 0x55e
   14c4a:	f7f4 f8d7 	bl	8dfc <hal_gpio_write>
        memcpy(buffer, inst->uwb_dev.txbuf + cmd_size, length);
   14c4e:	f8d4 1500 	ldr.w	r1, [r4, #1280]	; 0x500
   14c52:	464a      	mov	r2, r9
   14c54:	4439      	add	r1, r7
   14c56:	4630      	mov	r0, r6
   14c58:	f7f8 ff32 	bl	dac0 <memcpy>
   14c5c:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
   14c60:	f7f5 f8a0 	bl	9da4 <os_sem_release>
        assert(rc == DPL_OK);
   14c64:	2800      	cmp	r0, #0
   14c66:	f43f af75 	beq.w	14b54 <hal_dw1000_read_noblock+0x2c>
   14c6a:	2300      	movs	r3, #0
   14c6c:	461a      	mov	r2, r3
   14c6e:	4619      	mov	r1, r3
   14c70:	4618      	mov	r0, r3
   14c72:	f7f4 f977 	bl	8f64 <__assert_func>
        assert(rc == DPL_OK);
   14c76:	2300      	movs	r3, #0
   14c78:	461a      	mov	r2, r3
   14c7a:	4619      	mov	r1, r3
   14c7c:	4618      	mov	r0, r3
   14c7e:	f7f4 f971 	bl	8f64 <__assert_func>
    rc = hal_spi_txrx_noblock(inst->spi_num, (void*)cmd, inst->uwb_dev.txbuf, cmd_size);
   14c82:	463b      	mov	r3, r7
   14c84:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
   14c88:	4641      	mov	r1, r8
   14c8a:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   14c8e:	f003 fc77 	bl	18580 <hal_spi_txrx_noblock>
    if (rc != DPL_OK) {
   14c92:	4680      	mov	r8, r0
   14c94:	2800      	cmp	r0, #0
   14c96:	f47f af78 	bne.w	14b8a <hal_dw1000_read_noblock+0x62>
    memset(inst->uwb_dev.txbuf, 0, (length < inst->uwb_dev.txbuf_size)? length : inst->uwb_dev.txbuf_size);
   14c9a:	f8b4 2506 	ldrh.w	r2, [r4, #1286]	; 0x506
   14c9e:	454a      	cmp	r2, r9
   14ca0:	bf28      	it	cs
   14ca2:	464a      	movcs	r2, r9
   14ca4:	2100      	movs	r1, #0
   14ca6:	f8d4 0500 	ldr.w	r0, [r4, #1280]	; 0x500
   14caa:	f7f8 ff16 	bl	dada <memset>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   14cae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14cb2:	4650      	mov	r0, sl
   14cb4:	f7f5 f8a8 	bl	9e08 <os_sem_pend>
    if (rc != DPL_OK) {
   14cb8:	b130      	cbz	r0, 14cc8 <hal_dw1000_read_noblock+0x1a0>
        inst->uwb_dev.status.sem_error = 1;
   14cba:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   14cbe:	f043 0304 	orr.w	r3, r3, #4
   14cc2:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
        goto err_return;
   14cc6:	e760      	b.n	14b8a <hal_dw1000_read_noblock+0x62>
    return (dpl_error_t)os_sem_release(&sem->sem);
   14cc8:	4650      	mov	r0, sl
   14cca:	f7f5 f86b 	bl	9da4 <os_sem_release>
    assert(rc == DPL_OK);
   14cce:	b940      	cbnz	r0, 14ce2 <hal_dw1000_read_noblock+0x1ba>
    int step = (inst->uwb_dev.txbuf_size > MYNEWT_VAL(DW1000_HAL_SPI_MAX_CNT))?
   14cd0:	f8b4 b506 	ldrh.w	fp, [r4, #1286]	; 0x506
        MYNEWT_VAL(DW1000_HAL_SPI_MAX_CNT) : inst->uwb_dev.txbuf_size;
   14cd4:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   14cd8:	bf28      	it	cs
   14cda:	f04f 0bff 	movcs.w	fp, #255	; 0xff
    int bytes_left = length;
   14cde:	464d      	mov	r5, r9
    while (offset<length) {
   14ce0:	e011      	b.n	14d06 <hal_dw1000_read_noblock+0x1de>
    assert(rc == DPL_OK);
   14ce2:	2300      	movs	r3, #0
   14ce4:	461a      	mov	r2, r3
   14ce6:	4619      	mov	r1, r3
   14ce8:	4618      	mov	r0, r3
   14cea:	f7f4 f93b 	bl	8f64 <__assert_func>
        rc = hal_spi_txrx_noblock(inst->spi_num, (void*)inst->uwb_dev.txbuf,
   14cee:	463b      	mov	r3, r7
   14cf0:	eb06 0208 	add.w	r2, r6, r8
   14cf4:	f8d4 1500 	ldr.w	r1, [r4, #1280]	; 0x500
   14cf8:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   14cfc:	f003 fc40 	bl	18580 <hal_spi_txrx_noblock>
        assert(rc==DPL_OK);
   14d00:	b9b8      	cbnz	r0, 14d32 <hal_dw1000_read_noblock+0x20a>
        if (bytes_left) {
   14d02:	b9e5      	cbnz	r5, 14d3e <hal_dw1000_read_noblock+0x216>
        offset+=bytes_to_read;
   14d04:	44b8      	add	r8, r7
    while (offset<length) {
   14d06:	45c1      	cmp	r9, r8
   14d08:	dd31      	ble.n	14d6e <hal_dw1000_read_noblock+0x246>
        int bytes_to_read = (bytes_left > step) ? step : bytes_left;
   14d0a:	462f      	mov	r7, r5
   14d0c:	455d      	cmp	r5, fp
   14d0e:	bfa8      	it	ge
   14d10:	465f      	movge	r7, fp
        if (bytes_left) {
   14d12:	1bed      	subs	r5, r5, r7
   14d14:	d0eb      	beq.n	14cee <hal_dw1000_read_noblock+0x1c6>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   14d16:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14d1a:	4650      	mov	r0, sl
   14d1c:	f7f5 f874 	bl	9e08 <os_sem_pend>
            if (rc != DPL_OK) {
   14d20:	2800      	cmp	r0, #0
   14d22:	d0e4      	beq.n	14cee <hal_dw1000_read_noblock+0x1c6>
                inst->uwb_dev.status.sem_error = 1;
   14d24:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   14d28:	f043 0304 	orr.w	r3, r3, #4
   14d2c:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
                goto err_return;
   14d30:	e72b      	b.n	14b8a <hal_dw1000_read_noblock+0x62>
        assert(rc==DPL_OK);
   14d32:	2300      	movs	r3, #0
   14d34:	461a      	mov	r2, r3
   14d36:	4619      	mov	r1, r3
   14d38:	4618      	mov	r0, r3
   14d3a:	f7f4 f913 	bl	8f64 <__assert_func>
   14d3e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14d42:	4650      	mov	r0, sl
   14d44:	f7f5 f860 	bl	9e08 <os_sem_pend>
            if (rc != DPL_OK) {
   14d48:	b950      	cbnz	r0, 14d60 <hal_dw1000_read_noblock+0x238>
    return (dpl_error_t)os_sem_release(&sem->sem);
   14d4a:	4650      	mov	r0, sl
   14d4c:	f7f5 f82a 	bl	9da4 <os_sem_release>
            assert(rc == DPL_OK);
   14d50:	2800      	cmp	r0, #0
   14d52:	d0d7      	beq.n	14d04 <hal_dw1000_read_noblock+0x1dc>
   14d54:	2300      	movs	r3, #0
   14d56:	461a      	mov	r2, r3
   14d58:	4619      	mov	r1, r3
   14d5a:	4618      	mov	r0, r3
   14d5c:	f7f4 f902 	bl	8f64 <__assert_func>
                inst->uwb_dev.status.sem_error = 1;
   14d60:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   14d64:	f043 0304 	orr.w	r3, r3, #4
   14d68:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
                goto err_return;
   14d6c:	e70d      	b.n	14b8a <hal_dw1000_read_noblock+0x62>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   14d6e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14d72:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
   14d76:	f7f5 f847 	bl	9e08 <os_sem_pend>
    if (rc != DPL_OK) {
   14d7a:	2800      	cmp	r0, #0
   14d7c:	f43f af05 	beq.w	14b8a <hal_dw1000_read_noblock+0x62>
        inst->uwb_dev.status.sem_error = 1;
   14d80:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   14d84:	f043 0304 	orr.w	r3, r3, #4
   14d88:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
        goto err_return;
   14d8c:	e6fd      	b.n	14b8a <hal_dw1000_read_noblock+0x62>
   14d8e:	bf00      	nop
   14d90:	000149b1 	.word	0x000149b1

00014d94 <hal_dw1000_write>:
 * @param length    Represents buffer length.
 * @return int      DPL_OK if read is ok, error otherwise
 */
int
hal_dw1000_write(struct _dw1000_dev_instance_t * inst, const uint8_t * cmd, uint8_t cmd_size, uint8_t * buffer, uint16_t length)
{
   14d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14d98:	4604      	mov	r4, r0
   14d9a:	f8bd 9020 	ldrh.w	r9, [sp, #32]
    int rc = DPL_OK;
    assert(inst->spi_sem);
   14d9e:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548
   14da2:	b178      	cbz	r0, 14dc4 <hal_dw1000_write+0x30>
   14da4:	460e      	mov	r6, r1
   14da6:	4617      	mov	r7, r2
   14da8:	4698      	mov	r8, r3
   14daa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14dae:	f7f5 f82b 	bl	9e08 <os_sem_pend>
    rc = dpl_sem_pend(inst->spi_sem, DPL_TIMEOUT_NEVER);
    if (rc != DPL_OK) {
   14db2:	b168      	cbz	r0, 14dd0 <hal_dw1000_write+0x3c>
        inst->uwb_dev.status.sem_error = 1;
   14db4:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   14db8:	f043 0304 	orr.w	r3, r3, #4
   14dbc:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
    DW1000_SPI_BT_ADD_END(inst);
    rc = dpl_sem_release(inst->spi_sem);
    assert(rc == DPL_OK);
early_exit:
    return rc;
}
   14dc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    assert(inst->spi_sem);
   14dc4:	2300      	movs	r3, #0
   14dc6:	461a      	mov	r2, r3
   14dc8:	4619      	mov	r1, r3
   14dca:	4618      	mov	r0, r3
   14dcc:	f7f4 f8ca 	bl	8f64 <__assert_func>
    hal_gpio_write(inst->ss_pin, 0);
   14dd0:	2100      	movs	r1, #0
   14dd2:	f894 055e 	ldrb.w	r0, [r4, #1374]	; 0x55e
   14dd6:	f7f4 f811 	bl	8dfc <hal_gpio_write>
    rc = hal_spi_txrx(inst->spi_num, (void*)cmd, 0, cmd_size);
   14dda:	463b      	mov	r3, r7
   14ddc:	2200      	movs	r2, #0
   14dde:	4631      	mov	r1, r6
   14de0:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   14de4:	f003 fb76 	bl	184d4 <hal_spi_txrx>
    assert(rc == DPL_OK);
   14de8:	b998      	cbnz	r0, 14e12 <hal_dw1000_write+0x7e>
    if (length) {
   14dea:	f1b9 0f00 	cmp.w	r9, #0
   14dee:	d116      	bne.n	14e1e <hal_dw1000_write+0x8a>
    hal_gpio_write(inst->ss_pin, 1);
   14df0:	2101      	movs	r1, #1
   14df2:	f894 055e 	ldrb.w	r0, [r4, #1374]	; 0x55e
   14df6:	f7f4 f801 	bl	8dfc <hal_gpio_write>
    return (dpl_error_t)os_sem_release(&sem->sem);
   14dfa:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
   14dfe:	f7f4 ffd1 	bl	9da4 <os_sem_release>
    assert(rc == DPL_OK);
   14e02:	2800      	cmp	r0, #0
   14e04:	d0dc      	beq.n	14dc0 <hal_dw1000_write+0x2c>
   14e06:	2300      	movs	r3, #0
   14e08:	461a      	mov	r2, r3
   14e0a:	4619      	mov	r1, r3
   14e0c:	4618      	mov	r0, r3
   14e0e:	f7f4 f8a9 	bl	8f64 <__assert_func>
    assert(rc == DPL_OK);
   14e12:	2300      	movs	r3, #0
   14e14:	461a      	mov	r2, r3
   14e16:	4619      	mov	r1, r3
   14e18:	4618      	mov	r0, r3
   14e1a:	f7f4 f8a3 	bl	8f64 <__assert_func>
        hal_spi_txrx(inst->spi_num, (void*)buffer, 0, length);
   14e1e:	464b      	mov	r3, r9
   14e20:	2200      	movs	r2, #0
   14e22:	4641      	mov	r1, r8
   14e24:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   14e28:	f003 fb54 	bl	184d4 <hal_spi_txrx>
   14e2c:	e7e0      	b.n	14df0 <hal_dw1000_write+0x5c>
	...

00014e30 <hal_dw1000_write_noblock>:
 * @param length    Represents buffer length.
 * @return int      DPL_OK if read is ok, error otherwise
 */
int
hal_dw1000_write_noblock(struct _dw1000_dev_instance_t * inst, const uint8_t * cmd, uint8_t cmd_size, uint8_t * buffer, uint16_t length)
{
   14e30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e34:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
    int rc = DPL_OK;
    assert(length);
   14e38:	f1b9 0f00 	cmp.w	r9, #0
   14e3c:	d015      	beq.n	14e6a <hal_dw1000_write_noblock+0x3a>
   14e3e:	4604      	mov	r4, r0
   14e40:	460f      	mov	r7, r1
   14e42:	4616      	mov	r6, r2
   14e44:	4698      	mov	r8, r3
    assert(inst->spi_sem);
   14e46:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548
   14e4a:	b1a0      	cbz	r0, 14e76 <hal_dw1000_write_noblock+0x46>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   14e4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14e50:	f7f4 ffda 	bl	9e08 <os_sem_pend>
    rc = dpl_sem_pend(inst->spi_sem, DPL_TIMEOUT_NEVER);
   14e54:	4603      	mov	r3, r0
    if (rc != DPL_OK) {
   14e56:	b1a0      	cbz	r0, 14e82 <hal_dw1000_write_noblock+0x52>
        inst->uwb_dev.status.sem_error = 1;
   14e58:	f894 250b 	ldrb.w	r2, [r4, #1291]	; 0x50b
   14e5c:	f042 0204 	orr.w	r2, r2, #4
   14e60:	f884 250b 	strb.w	r2, [r4, #1291]	; 0x50b

err_return:
    rc = dpl_sem_release(inst->spi_sem);
    assert(rc == DPL_OK);
    return rc;
}
   14e64:	4618      	mov	r0, r3
   14e66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(length);
   14e6a:	2300      	movs	r3, #0
   14e6c:	461a      	mov	r2, r3
   14e6e:	4619      	mov	r1, r3
   14e70:	4618      	mov	r0, r3
   14e72:	f7f4 f877 	bl	8f64 <__assert_func>
    assert(inst->spi_sem);
   14e76:	2300      	movs	r3, #0
   14e78:	461a      	mov	r2, r3
   14e7a:	4619      	mov	r1, r3
   14e7c:	4618      	mov	r0, r3
   14e7e:	f7f4 f871 	bl	8f64 <__assert_func>
    rc = hal_spi_disable(inst->spi_num);
   14e82:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   14e86:	f003 faab 	bl	183e0 <hal_spi_disable>
   14e8a:	4605      	mov	r5, r0
    rc |= hal_spi_set_txrx_cb(inst->spi_num, hal_dw1000_spi_txrx_cb, (void*)inst);
   14e8c:	4622      	mov	r2, r4
   14e8e:	4960      	ldr	r1, [pc, #384]	; (15010 <hal_dw1000_write_noblock+0x1e0>)
   14e90:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   14e94:	f003 fb08 	bl	184a8 <hal_spi_set_txrx_cb>
   14e98:	4305      	orrs	r5, r0
    rc |= hal_spi_enable(inst->spi_num);
   14e9a:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   14e9e:	f003 fa79 	bl	18394 <hal_spi_enable>
    if (rc != DPL_OK) {
   14ea2:	ea55 0300 	orrs.w	r3, r5, r0
   14ea6:	d00c      	beq.n	14ec2 <hal_dw1000_write_noblock+0x92>
    return (dpl_error_t)os_sem_release(&sem->sem);
   14ea8:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
   14eac:	f7f4 ff7a 	bl	9da4 <os_sem_release>
    rc = dpl_sem_release(inst->spi_sem);
   14eb0:	4603      	mov	r3, r0
    assert(rc == DPL_OK);
   14eb2:	2800      	cmp	r0, #0
   14eb4:	d0d6      	beq.n	14e64 <hal_dw1000_write_noblock+0x34>
   14eb6:	2300      	movs	r3, #0
   14eb8:	461a      	mov	r2, r3
   14eba:	4619      	mov	r1, r3
   14ebc:	4618      	mov	r0, r3
   14ebe:	f7f4 f851 	bl	8f64 <__assert_func>
    hal_gpio_write(inst->ss_pin, 0);
   14ec2:	2100      	movs	r1, #0
   14ec4:	f894 055e 	ldrb.w	r0, [r4, #1374]	; 0x55e
   14ec8:	f7f3 ff98 	bl	8dfc <hal_gpio_write>
    if (cmd_size + length < inst->uwb_dev.txbuf_size &&
   14ecc:	eb06 0509 	add.w	r5, r6, r9
   14ed0:	f8b4 3506 	ldrh.w	r3, [r4, #1286]	; 0x506
   14ed4:	429d      	cmp	r5, r3
   14ed6:	da01      	bge.n	14edc <hal_dw1000_write_noblock+0xac>
   14ed8:	2dfe      	cmp	r5, #254	; 0xfe
   14eda:	dd0e      	ble.n	14efa <hal_dw1000_write_noblock+0xca>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   14edc:	f204 5a4c 	addw	sl, r4, #1356	; 0x54c
   14ee0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14ee4:	4650      	mov	r0, sl
   14ee6:	f7f4 ff8f 	bl	9e08 <os_sem_pend>
    if (rc != DPL_OK) {
   14eea:	b1e8      	cbz	r0, 14f28 <hal_dw1000_write_noblock+0xf8>
        inst->uwb_dev.status.sem_error = 1;
   14eec:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   14ef0:	f043 0304 	orr.w	r3, r3, #4
   14ef4:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
        goto err_return;
   14ef8:	e7d6      	b.n	14ea8 <hal_dw1000_write_noblock+0x78>
        memcpy(inst->uwb_dev.txbuf, cmd, cmd_size);
   14efa:	4632      	mov	r2, r6
   14efc:	4639      	mov	r1, r7
   14efe:	f8d4 0500 	ldr.w	r0, [r4, #1280]	; 0x500
   14f02:	f7f8 fddd 	bl	dac0 <memcpy>
        memcpy(inst->uwb_dev.txbuf+cmd_size, buffer, length);
   14f06:	f8d4 0500 	ldr.w	r0, [r4, #1280]	; 0x500
   14f0a:	464a      	mov	r2, r9
   14f0c:	4641      	mov	r1, r8
   14f0e:	4430      	add	r0, r6
   14f10:	f7f8 fdd6 	bl	dac0 <memcpy>
        rc = hal_spi_txrx_noblock(inst->spi_num, (void*)inst->uwb_dev.txbuf,
   14f14:	f8d4 1500 	ldr.w	r1, [r4, #1280]	; 0x500
   14f18:	462b      	mov	r3, r5
   14f1a:	460a      	mov	r2, r1
   14f1c:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   14f20:	f003 fb2e 	bl	18580 <hal_spi_txrx_noblock>
   14f24:	4603      	mov	r3, r0
        return rc;
   14f26:	e79d      	b.n	14e64 <hal_dw1000_write_noblock+0x34>
    rc = hal_spi_txrx_noblock(inst->spi_num, (void*)cmd, inst->uwb_dev.txbuf, cmd_size);
   14f28:	4633      	mov	r3, r6
   14f2a:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
   14f2e:	4639      	mov	r1, r7
   14f30:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   14f34:	f003 fb24 	bl	18580 <hal_spi_txrx_noblock>
    assert(rc==DPL_OK);
   14f38:	b960      	cbnz	r0, 14f54 <hal_dw1000_write_noblock+0x124>
   14f3a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14f3e:	4650      	mov	r0, sl
   14f40:	f7f4 ff62 	bl	9e08 <os_sem_pend>
    if (rc != DPL_OK) {
   14f44:	b160      	cbz	r0, 14f60 <hal_dw1000_write_noblock+0x130>
        inst->uwb_dev.status.sem_error = 1;
   14f46:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   14f4a:	f043 0304 	orr.w	r3, r3, #4
   14f4e:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
        goto err_return;
   14f52:	e7a9      	b.n	14ea8 <hal_dw1000_write_noblock+0x78>
    assert(rc==DPL_OK);
   14f54:	2300      	movs	r3, #0
   14f56:	461a      	mov	r2, r3
   14f58:	4619      	mov	r1, r3
   14f5a:	4618      	mov	r0, r3
   14f5c:	f7f4 f802 	bl	8f64 <__assert_func>
    return (dpl_error_t)os_sem_release(&sem->sem);
   14f60:	4650      	mov	r0, sl
   14f62:	f7f4 ff1f 	bl	9da4 <os_sem_release>
   14f66:	4607      	mov	r7, r0
    rc = dpl_sem_release(&inst->spi_nb_sem);
   14f68:	4603      	mov	r3, r0
    assert(rc == DPL_OK);
   14f6a:	b940      	cbnz	r0, 14f7e <hal_dw1000_write_noblock+0x14e>
    int step = (inst->uwb_dev.txbuf_size > MYNEWT_VAL(DW1000_HAL_SPI_MAX_CNT)) ?
   14f6c:	f8b4 b506 	ldrh.w	fp, [r4, #1286]	; 0x506
        MYNEWT_VAL(DW1000_HAL_SPI_MAX_CNT) : inst->uwb_dev.txbuf_size;
   14f70:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   14f74:	bf28      	it	cs
   14f76:	f04f 0bff 	movcs.w	fp, #255	; 0xff
    int bytes_left = length;
   14f7a:	464d      	mov	r5, r9
    while (offset<length) {
   14f7c:	e012      	b.n	14fa4 <hal_dw1000_write_noblock+0x174>
    assert(rc == DPL_OK);
   14f7e:	2300      	movs	r3, #0
   14f80:	461a      	mov	r2, r3
   14f82:	4619      	mov	r1, r3
   14f84:	4618      	mov	r0, r3
   14f86:	f7f3 ffed 	bl	8f64 <__assert_func>
        rc = hal_spi_txrx_noblock(inst->spi_num, (void*)buffer+offset,
   14f8a:	4633      	mov	r3, r6
   14f8c:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
   14f90:	eb08 0107 	add.w	r1, r8, r7
   14f94:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   14f98:	f003 faf2 	bl	18580 <hal_spi_txrx_noblock>
        assert(rc==DPL_OK);
   14f9c:	4603      	mov	r3, r0
   14f9e:	b9c0      	cbnz	r0, 14fd2 <hal_dw1000_write_noblock+0x1a2>
        if (bytes_left) {
   14fa0:	b9ed      	cbnz	r5, 14fde <hal_dw1000_write_noblock+0x1ae>
        offset+=bytes_to_write;
   14fa2:	4437      	add	r7, r6
    while (offset<length) {
   14fa4:	45b9      	cmp	r9, r7
   14fa6:	f77f af5d 	ble.w	14e64 <hal_dw1000_write_noblock+0x34>
        int bytes_to_write = (bytes_left > step) ? step : bytes_left;
   14faa:	462e      	mov	r6, r5
   14fac:	455d      	cmp	r5, fp
   14fae:	bfa8      	it	ge
   14fb0:	465e      	movge	r6, fp
        if (bytes_left) {
   14fb2:	1bad      	subs	r5, r5, r6
   14fb4:	d0e9      	beq.n	14f8a <hal_dw1000_write_noblock+0x15a>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   14fb6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14fba:	4650      	mov	r0, sl
   14fbc:	f7f4 ff24 	bl	9e08 <os_sem_pend>
            if (rc != DPL_OK) {
   14fc0:	2800      	cmp	r0, #0
   14fc2:	d0e2      	beq.n	14f8a <hal_dw1000_write_noblock+0x15a>
                inst->uwb_dev.status.sem_error = 1;
   14fc4:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   14fc8:	f043 0304 	orr.w	r3, r3, #4
   14fcc:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
                goto err_return;
   14fd0:	e76a      	b.n	14ea8 <hal_dw1000_write_noblock+0x78>
        assert(rc==DPL_OK);
   14fd2:	2300      	movs	r3, #0
   14fd4:	461a      	mov	r2, r3
   14fd6:	4619      	mov	r1, r3
   14fd8:	4618      	mov	r0, r3
   14fda:	f7f3 ffc3 	bl	8f64 <__assert_func>
   14fde:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14fe2:	4650      	mov	r0, sl
   14fe4:	f7f4 ff10 	bl	9e08 <os_sem_pend>
            if (rc != DPL_OK) {
   14fe8:	b958      	cbnz	r0, 15002 <hal_dw1000_write_noblock+0x1d2>
    return (dpl_error_t)os_sem_release(&sem->sem);
   14fea:	4650      	mov	r0, sl
   14fec:	f7f4 feda 	bl	9da4 <os_sem_release>
            rc = dpl_sem_release(&inst->spi_nb_sem);
   14ff0:	4603      	mov	r3, r0
            assert(rc == DPL_OK);
   14ff2:	2800      	cmp	r0, #0
   14ff4:	d0d5      	beq.n	14fa2 <hal_dw1000_write_noblock+0x172>
   14ff6:	2300      	movs	r3, #0
   14ff8:	461a      	mov	r2, r3
   14ffa:	4619      	mov	r1, r3
   14ffc:	4618      	mov	r0, r3
   14ffe:	f7f3 ffb1 	bl	8f64 <__assert_func>
                inst->uwb_dev.status.sem_error = 1;
   15002:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   15006:	f043 0304 	orr.w	r3, r3, #4
   1500a:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
                goto err_return;
   1500e:	e74b      	b.n	14ea8 <hal_dw1000_write_noblock+0x78>
   15010:	000149b1 	.word	0x000149b1

00015014 <hal_dw1000_rw_noblock_wait>:
 * @param timeout  Time in ms to wait, use DPL_TIMEOUT_NEVER (UINT32_MAX) to wait indefinitely
 * @return int  Returns 0 on success, error code otherwise
 */
int
hal_dw1000_rw_noblock_wait(struct _dw1000_dev_instance_t * inst, uint32_t timeout_ms)
{
   15014:	b530      	push	{r4, r5, lr}
   15016:	b083      	sub	sp, #12
   15018:	4604      	mov	r4, r0
    int err;
    dpl_time_t ticks;
    if (timeout_ms != DPL_TIMEOUT_NEVER) {
   1501a:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1501e:	d10f      	bne.n	15040 <hal_dw1000_rw_noblock_wait+0x2c>
        dpl_time_ms_to_ticks(timeout_ms, &ticks);
    } else {
        ticks = DPL_TIMEOUT_NEVER;
   15020:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15024:	9301      	str	r3, [sp, #4]
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   15026:	9901      	ldr	r1, [sp, #4]
   15028:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
   1502c:	f7f4 feec 	bl	9e08 <os_sem_pend>
   15030:	4605      	mov	r5, r0
    }
    err = dpl_sem_pend(inst->spi_sem, ticks);
    if (dpl_sem_get_count(inst->spi_sem) == 0) {
   15032:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
   15036:	88c3      	ldrh	r3, [r0, #6]
   15038:	b13b      	cbz	r3, 1504a <hal_dw1000_rw_noblock_wait+0x36>
        dpl_sem_release(inst->spi_sem);
    }
    return err;
}
   1503a:	4628      	mov	r0, r5
   1503c:	b003      	add	sp, #12
   1503e:	bd30      	pop	{r4, r5, pc}
   15040:	4608      	mov	r0, r1
    return (dpl_error_t)os_time_ms_to_ticks(ms, out_ticks);
   15042:	a901      	add	r1, sp, #4
   15044:	f7f5 f989 	bl	a35a <os_time_ms_to_ticks>
   15048:	e7ed      	b.n	15026 <hal_dw1000_rw_noblock_wait+0x12>
    return (dpl_error_t)os_sem_release(&sem->sem);
   1504a:	f7f4 feab 	bl	9da4 <os_sem_release>
    return err;
   1504e:	e7f4      	b.n	1503a <hal_dw1000_rw_noblock_wait+0x26>

00015050 <hal_dw1000_wakeup>:
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return int  DPL_OK if read is ok, error otherwise
 */
int
hal_dw1000_wakeup(struct _dw1000_dev_instance_t * inst)
{
   15050:	b538      	push	{r3, r4, r5, lr}
   15052:	4604      	mov	r4, r0
    int rc = DPL_OK;
    os_sr_t sr;
    assert(inst->spi_sem);
   15054:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548
   15058:	b158      	cbz	r0, 15072 <hal_dw1000_wakeup+0x22>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   1505a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1505e:	f7f4 fed3 	bl	9e08 <os_sem_pend>
    rc = dpl_sem_pend(inst->spi_sem, DPL_TIMEOUT_NEVER);
    if (rc != DPL_OK) {
   15062:	b160      	cbz	r0, 1507e <hal_dw1000_wakeup+0x2e>
        inst->uwb_dev.status.sem_error = 1;
   15064:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   15068:	f043 0304 	orr.w	r3, r3, #4
   1506c:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b

    rc = dpl_sem_release(inst->spi_sem);
    assert(rc == DPL_OK);
early_exit:
    return rc;
}
   15070:	bd38      	pop	{r3, r4, r5, pc}
    assert(inst->spi_sem);
   15072:	2300      	movs	r3, #0
   15074:	461a      	mov	r2, r3
   15076:	4619      	mov	r1, r3
   15078:	4618      	mov	r0, r3
   1507a:	f7f3 ff73 	bl	8f64 <__assert_func>
    return os_arch_save_sr();
   1507e:	f7f5 f989 	bl	a394 <os_arch_save_sr>
   15082:	4605      	mov	r5, r0
    hal_spi_disable(inst->spi_num);
   15084:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   15088:	f003 f9aa 	bl	183e0 <hal_spi_disable>
    hal_gpio_write(inst->ss_pin, 0);
   1508c:	2100      	movs	r1, #0
   1508e:	f894 055e 	ldrb.w	r0, [r4, #1374]	; 0x55e
   15092:	f7f3 feb3 	bl	8dfc <hal_gpio_write>
    dpl_cputime_delay_usecs(2000);
   15096:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   1509a:	f7f9 f9c6 	bl	e42a <dpl_cputime_delay_usecs>
    hal_gpio_write(inst->ss_pin, 1);
   1509e:	2101      	movs	r1, #1
   150a0:	f894 055e 	ldrb.w	r0, [r4, #1374]	; 0x55e
   150a4:	f7f3 feaa 	bl	8dfc <hal_gpio_write>
    hal_spi_enable(inst->spi_num);
   150a8:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   150ac:	f003 f972 	bl	18394 <hal_spi_enable>
    dpl_cputime_delay_usecs(5000);
   150b0:	f241 3088 	movw	r0, #5000	; 0x1388
   150b4:	f7f9 f9b9 	bl	e42a <dpl_cputime_delay_usecs>
    os_arch_restore_sr(ctx);
   150b8:	4628      	mov	r0, r5
   150ba:	f7f5 f971 	bl	a3a0 <os_arch_restore_sr>
    return (dpl_error_t)os_sem_release(&sem->sem);
   150be:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
   150c2:	f7f4 fe6f 	bl	9da4 <os_sem_release>
    assert(rc == DPL_OK);
   150c6:	2800      	cmp	r0, #0
   150c8:	d0d2      	beq.n	15070 <hal_dw1000_wakeup+0x20>
   150ca:	2300      	movs	r3, #0
   150cc:	461a      	mov	r2, r3
   150ce:	4619      	mov	r1, r3
   150d0:	4618      	mov	r0, r3
   150d2:	f7f3 ff47 	bl	8f64 <__assert_func>

000150d6 <calc_rx_window_timeout>:
}

static uint16_t
calc_rx_window_timeout(uint64_t rx_start, uint64_t rx_end)
{
    uint32_t timeout = ((rx_end - rx_start) & UWB_DTU_40BMASK) >> 16;
   150d6:	1a12      	subs	r2, r2, r0
   150d8:	eb63 0301 	sbc.w	r3, r3, r1
   150dc:	0c12      	lsrs	r2, r2, #16
   150de:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   150e2:	f022 407f 	bic.w	r0, r2, #4278190080	; 0xff000000
    /* If more than 8.4s away (more than 1/2 period)- the end has likely
     * already passed so set a short timeout as to trigger a timeout */
    if (timeout > 0x7fffff) {
   150e6:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   150ea:	d105      	bne.n	150f8 <calc_rx_window_timeout+0x22>
        timeout = 1;
    }
    /* DW1000 can't have a rx-timeout greater than 0xffff */
    if (timeout > 0xffff) {
   150ec:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   150f0:	d303      	bcc.n	150fa <calc_rx_window_timeout+0x24>
        timeout = 0xffff;
   150f2:	f64f 70ff 	movw	r0, #65535	; 0xffff
   150f6:	e000      	b.n	150fa <calc_rx_window_timeout+0x24>
        timeout = 1;
   150f8:	2001      	movs	r0, #1
    }
    return timeout;
}
   150fa:	b280      	uxth	r0, r0
   150fc:	4770      	bx	lr

000150fe <dw1000_checkoverrun>:
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return uint8_t 1 = overrun error has occured, 0 otherwise
 */
static uint8_t
dw1000_checkoverrun(dw1000_dev_instance_t * inst)
{
   150fe:	b508      	push	{r3, lr}
    uint8_t ov = dw1000_read_reg(inst, SYS_STATUS_ID, 2, sizeof(uint8_t)) & (SYS_STATUS_RXOVRR >> 16);
   15100:	2301      	movs	r3, #1
   15102:	2202      	movs	r2, #2
   15104:	210f      	movs	r1, #15
   15106:	f7fe fff5 	bl	140f4 <dw1000_read_reg>
    return (ov!=0);
}
   1510a:	f3c0 1000 	ubfx	r0, r0, #4, #1
   1510e:	bd08      	pop	{r3, pc}

00015110 <dw1000_irq>:
{
   15110:	b510      	push	{r4, lr}
   15112:	4604      	mov	r4, r0
    inst->uwb_dev.irq_at_ticks = dpl_cputime_get32();
   15114:	f7f9 f979 	bl	e40a <dpl_cputime_get32>
   15118:	6320      	str	r0, [r4, #48]	; 0x30
    if (!inst->uwb_dev.status.sleeping) {
   1511a:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   1511e:	f013 0f01 	tst.w	r3, #1
   15122:	d000      	beq.n	15126 <dw1000_irq+0x16>
}
   15124:	bd10      	pop	{r4, pc}
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
   15126:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   1512a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   1512e:	f7f4 fa4d 	bl	95cc <os_eventq_put>
   15132:	e7f7      	b.n	15124 <dw1000_irq+0x14>

00015134 <dw1000_read_rx>:
{
   15134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15138:	b082      	sub	sp, #8
   1513a:	4604      	mov	r4, r0
   1513c:	460f      	mov	r7, r1
   1513e:	4616      	mov	r6, r2
   15140:	461d      	mov	r5, r3
    MAC_STATS_INCN(rx_bytes, rxFrameLength);
   15142:	f8d0 05cc 	ldr.w	r0, [r0, #1484]	; 0x5cc
   15146:	4418      	add	r0, r3
   15148:	f8c4 05cc 	str.w	r0, [r4, #1484]	; 0x5cc
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   1514c:	f504 68ad 	add.w	r8, r4, #1384	; 0x568
   15150:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   15154:	4640      	mov	r0, r8
   15156:	f7f5 fc77 	bl	aa48 <os_mutex_pend>
    if (err != DPL_OK) {
   1515a:	b150      	cbz	r0, 15172 <dw1000_read_rx+0x3e>
        inst->uwb_dev.status.mtx_error = 1;
   1515c:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   15160:	f043 0308 	orr.w	r3, r3, #8
   15164:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   15168:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1516c:	b002      	add	sp, #8
   1516e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dw1000_read(inst, RX_BUFFER_ID, rxBufferOffset, rxFrameBytes, rxFrameLength);
   15172:	9500      	str	r5, [sp, #0]
   15174:	463b      	mov	r3, r7
   15176:	4632      	mov	r2, r6
   15178:	2111      	movs	r1, #17
   1517a:	4620      	mov	r0, r4
   1517c:	f7fe fef0 	bl	13f60 <dw1000_read>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   15180:	4640      	mov	r0, r8
   15182:	f7f5 fc05 	bl	a990 <os_mutex_release>
    assert(err == DPL_OK);
   15186:	2800      	cmp	r0, #0
   15188:	d0ee      	beq.n	15168 <dw1000_read_rx+0x34>
   1518a:	2300      	movs	r3, #0
   1518c:	461a      	mov	r2, r3
   1518e:	4619      	mov	r1, r3
   15190:	4618      	mov	r0, r3
   15192:	f7f3 fee7 	bl	8f64 <__assert_func>

00015196 <dw1000_write_tx>:
{
   15196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1519a:	b082      	sub	sp, #8
   1519c:	4604      	mov	r4, r0
   1519e:	460f      	mov	r7, r1
   151a0:	4616      	mov	r6, r2
   151a2:	461d      	mov	r5, r3
    MAC_STATS_INCN(tx_bytes, txFrameLength);
   151a4:	f8d0 25c8 	ldr.w	r2, [r0, #1480]	; 0x5c8
   151a8:	441a      	add	r2, r3
   151aa:	f8c0 25c8 	str.w	r2, [r0, #1480]	; 0x5c8
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   151ae:	f500 68ad 	add.w	r8, r0, #1384	; 0x568
   151b2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   151b6:	4640      	mov	r0, r8
   151b8:	f7f5 fc46 	bl	aa48 <os_mutex_pend>
    if (err != DPL_OK) {
   151bc:	b990      	cbnz	r0, 151e4 <dw1000_write_tx+0x4e>
    if ((txBufferOffset + txFrameLength) <= 1024){
   151be:	1973      	adds	r3, r6, r5
   151c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   151c4:	dd15      	ble.n	151f2 <dw1000_write_tx+0x5c>
        inst->uwb_dev.status.tx_frame_error = 1;
   151c6:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   151ca:	f043 0310 	orr.w	r3, r3, #16
   151ce:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
    return (dpl_error_t)os_mutex_release(&mu->mu);
   151d2:	4640      	mov	r0, r8
   151d4:	f7f5 fbdc 	bl	a990 <os_mutex_release>
    assert(err == DPL_OK);
   151d8:	bb20      	cbnz	r0, 15224 <dw1000_write_tx+0x8e>
}
   151da:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   151de:	b002      	add	sp, #8
   151e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        inst->uwb_dev.status.mtx_error = 1;
   151e4:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   151e8:	f043 0308 	orr.w	r3, r3, #8
   151ec:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
        goto mtx_error;
   151f0:	e7f3      	b.n	151da <dw1000_write_tx+0x44>
        dw1000_write(inst, TX_BUFFER_ID, txBufferOffset,  txFrameBytes, txFrameLength);
   151f2:	9500      	str	r5, [sp, #0]
   151f4:	463b      	mov	r3, r7
   151f6:	4632      	mov	r2, r6
   151f8:	2109      	movs	r1, #9
   151fa:	4620      	mov	r0, r4
   151fc:	f7fe ff14 	bl	14028 <dw1000_write>
        if (txBufferOffset == 0) {
   15200:	b176      	cbz	r6, 15220 <dw1000_write_tx+0x8a>
        inst->uwb_dev.status.tx_frame_error = 0;
   15202:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   15206:	f36f 1304 	bfc	r3, #4, #1
   1520a:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
   1520e:	e7e0      	b.n	151d2 <dw1000_write_tx+0x3c>
                inst->uwb_dev.fctrl_array[i] =  txFrameBytes[i];
   15210:	5cf9      	ldrb	r1, [r7, r3]
   15212:	18e2      	adds	r2, r4, r3
   15214:	f882 14e0 	strb.w	r1, [r2, #1248]	; 0x4e0
            for (i = 0; i< sizeof(inst->uwb_dev.fctrl); i++)
   15218:	3301      	adds	r3, #1
   1521a:	2b01      	cmp	r3, #1
   1521c:	d9f8      	bls.n	15210 <dw1000_write_tx+0x7a>
   1521e:	e7f0      	b.n	15202 <dw1000_write_tx+0x6c>
   15220:	2300      	movs	r3, #0
   15222:	e7fa      	b.n	1521a <dw1000_write_tx+0x84>
    assert(err == DPL_OK);
   15224:	2300      	movs	r3, #0
   15226:	461a      	mov	r2, r3
   15228:	4619      	mov	r1, r3
   1522a:	4618      	mov	r0, r3
   1522c:	f7f3 fe9a 	bl	8f64 <__assert_func>

00015230 <dw1000_write_tx_fctrl>:
{
   15230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15234:	b084      	sub	sp, #16
   15236:	4605      	mov	r5, r0
   15238:	460c      	mov	r4, r1
   1523a:	4690      	mov	r8, r2
   1523c:	461e      	mov	r6, r3
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   1523e:	f500 67ad 	add.w	r7, r0, #1384	; 0x568
   15242:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   15246:	4638      	mov	r0, r7
   15248:	f7f5 fbfe 	bl	aa48 <os_mutex_pend>
    if (err != DPL_OK) {
   1524c:	bb08      	cbnz	r0, 15292 <dw1000_write_tx_fctrl+0x62>
    if (ext) {
   1524e:	b33e      	cbz	r6, 152a0 <dw1000_write_tx_fctrl+0x70>
        tx_fctrl_reg = (((uint32_t)(ext->preambleLength | config->prf)) << TX_FCTRL_TXPRF_SHFT) |
   15250:	7873      	ldrb	r3, [r6, #1]
   15252:	f895 250e 	ldrb.w	r2, [r5, #1294]	; 0x50e
   15256:	431a      	orrs	r2, r3
            (((uint32_t)ext->dataRate) << TX_FCTRL_TXBR_SHFT) |
   15258:	7833      	ldrb	r3, [r6, #0]
   1525a:	035b      	lsls	r3, r3, #13
        tx_fctrl_reg = (((uint32_t)(ext->preambleLength | config->prf)) << TX_FCTRL_TXPRF_SHFT) |
   1525c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            (((uint32_t)ext->ranging_en_bit) << TX_FCTRL_TR_SHFT);
   15260:	78b2      	ldrb	r2, [r6, #2]
        tx_fctrl_reg = (((uint32_t)(ext->preambleLength | config->prf)) << TX_FCTRL_TXPRF_SHFT) |
   15262:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
    tx_fctrl_reg |= ((txFrameLength + 2) & TX_FCTRL_FLE_MASK)  |
   15266:	3402      	adds	r4, #2
   15268:	f3c4 0409 	ubfx	r4, r4, #0, #10
   1526c:	ea44 5488 	orr.w	r4, r4, r8, lsl #22
   15270:	431c      	orrs	r4, r3
    dw1000_write_reg(inst, TX_FCTRL_ID, 0, tx_fctrl_reg, sizeof(uint32_t));
   15272:	2304      	movs	r3, #4
   15274:	9302      	str	r3, [sp, #8]
   15276:	2200      	movs	r2, #0
   15278:	9400      	str	r4, [sp, #0]
   1527a:	9201      	str	r2, [sp, #4]
   1527c:	2108      	movs	r1, #8
   1527e:	4628      	mov	r0, r5
   15280:	f7fe ffa8 	bl	141d4 <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   15284:	4638      	mov	r0, r7
   15286:	f7f5 fb83 	bl	a990 <os_mutex_release>
    assert(err == DPL_OK);
   1528a:	b960      	cbnz	r0, 152a6 <dw1000_write_tx_fctrl+0x76>
}
   1528c:	b004      	add	sp, #16
   1528e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        inst->uwb_dev.status.mtx_error = 1;
   15292:	f895 350b 	ldrb.w	r3, [r5, #1291]	; 0x50b
   15296:	f043 0308 	orr.w	r3, r3, #8
   1529a:	f885 350b 	strb.w	r3, [r5, #1291]	; 0x50b
        goto mtx_error;
   1529e:	e7f5      	b.n	1528c <dw1000_write_tx_fctrl+0x5c>
        tx_fctrl_reg = inst->tx_fctrl;
   152a0:	f8d5 3588 	ldr.w	r3, [r5, #1416]	; 0x588
   152a4:	e7df      	b.n	15266 <dw1000_write_tx_fctrl+0x36>
    assert(err == DPL_OK);
   152a6:	2300      	movs	r3, #0
   152a8:	461a      	mov	r2, r3
   152aa:	4619      	mov	r1, r3
   152ac:	4618      	mov	r0, r3
   152ae:	f7f3 fe59 	bl	8f64 <__assert_func>

000152b2 <dw1000_start_tx>:
{
   152b2:	b570      	push	{r4, r5, r6, lr}
   152b4:	b084      	sub	sp, #16
   152b6:	4604      	mov	r4, r0
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   152b8:	f500 66ac 	add.w	r6, r0, #1376	; 0x560
   152bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   152c0:	4630      	mov	r0, r6
   152c2:	f7f4 fda1 	bl	9e08 <os_sem_pend>
    if (err != DPL_OK) {
   152c6:	2800      	cmp	r0, #0
   152c8:	d144      	bne.n	15354 <dw1000_start_tx+0xa2>
    control = inst->control;
   152ca:	f8d4 55b0 	ldr.w	r5, [r4, #1456]	; 0x5b0
    if (config->trxoff_enable){ // force return to idle state
   152ce:	f894 352c 	ldrb.w	r3, [r4, #1324]	; 0x52c
   152d2:	f013 0f20 	tst.w	r3, #32
   152d6:	d144      	bne.n	15362 <dw1000_start_tx+0xb0>
    if (control.wait4resp_enabled){
   152d8:	b2eb      	uxtb	r3, r5
   152da:	f015 0f01 	tst.w	r5, #1
   152de:	d14c      	bne.n	1537a <dw1000_start_tx+0xc8>
    sys_ctrl_reg = SYS_CTRL_TXSTRT;
   152e0:	2202      	movs	r2, #2
    if (control.delay_start_enabled)
   152e2:	f013 0504 	ands.w	r5, r3, #4
   152e6:	d001      	beq.n	152ec <dw1000_start_tx+0x3a>
        sys_ctrl_reg |= SYS_CTRL_TXDLYS;
   152e8:	f042 0204 	orr.w	r2, r2, #4
    dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) sys_ctrl_reg, sizeof(uint8_t));
   152ec:	b2d3      	uxtb	r3, r2
   152ee:	2201      	movs	r2, #1
   152f0:	9202      	str	r2, [sp, #8]
   152f2:	2200      	movs	r2, #0
   152f4:	9300      	str	r3, [sp, #0]
   152f6:	9201      	str	r2, [sp, #4]
   152f8:	210d      	movs	r1, #13
   152fa:	4620      	mov	r0, r4
   152fc:	f7fe ff6a 	bl	141d4 <dw1000_write_reg>
    if (control.delay_start_enabled){
   15300:	2d00      	cmp	r5, #0
   15302:	d13c      	bne.n	1537e <dw1000_start_tx+0xcc>
        inst->uwb_dev.status.start_tx_error = 0;
   15304:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   15308:	f36f 0382 	bfc	r3, #2, #1
   1530c:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
    if(inst->control.sleep_after_tx) {
   15310:	f994 35b0 	ldrsb.w	r3, [r4, #1456]	; 0x5b0
   15314:	2b00      	cmp	r3, #0
   15316:	db5d      	blt.n	153d4 <dw1000_start_tx+0x122>
    inst->control.wait4resp_enabled = false;
   15318:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
   1531c:	f36f 0300 	bfc	r3, #0, #1
   15320:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    inst->control.wait4resp_delay_enabled = false;
   15324:	b2db      	uxtb	r3, r3
   15326:	f36f 0341 	bfc	r3, #1, #1
   1532a:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    inst->control.delay_start_enabled = false;
   1532e:	b2db      	uxtb	r3, r3
   15330:	f36f 0382 	bfc	r3, #2, #1
   15334:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    inst->control.autoack_delay_enabled = false;
   15338:	b2db      	uxtb	r3, r3
   1533a:	f36f 03c3 	bfc	r3, #3, #1
   1533e:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    inst->control.on_error_continue_enabled = false;
   15342:	b2db      	uxtb	r3, r3
   15344:	f36f 1386 	bfc	r3, #6, #1
   15348:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
}
   1534c:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   15350:	b004      	add	sp, #16
   15352:	bd70      	pop	{r4, r5, r6, pc}
        inst->uwb_dev.status.sem_error = 1;
   15354:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   15358:	f043 0304 	orr.w	r3, r3, #4
   1535c:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
        goto sem_error;
   15360:	e7f4      	b.n	1534c <dw1000_start_tx+0x9a>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) SYS_CTRL_TRXOFF, sizeof(uint8_t));
   15362:	2301      	movs	r3, #1
   15364:	9302      	str	r3, [sp, #8]
   15366:	2240      	movs	r2, #64	; 0x40
   15368:	2300      	movs	r3, #0
   1536a:	e9cd 2300 	strd	r2, r3, [sp]
   1536e:	2200      	movs	r2, #0
   15370:	210d      	movs	r1, #13
   15372:	4620      	mov	r0, r4
   15374:	f7fe ff2e 	bl	141d4 <dw1000_write_reg>
   15378:	e7ae      	b.n	152d8 <dw1000_start_tx+0x26>
        sys_ctrl_reg |= SYS_CTRL_WAIT4RESP;
   1537a:	2282      	movs	r2, #130	; 0x82
   1537c:	e7b1      	b.n	152e2 <dw1000_start_tx+0x30>
        sys_status_reg = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint16_t)); // Read at offset 3 to get the upper 2 bytes out of 5
   1537e:	2302      	movs	r3, #2
   15380:	2203      	movs	r2, #3
   15382:	210f      	movs	r1, #15
   15384:	4620      	mov	r0, r4
   15386:	f7fe feb5 	bl	140f4 <dw1000_read_reg>
        inst->uwb_dev.status.start_tx_error = (sys_status_reg & ((SYS_STATUS_HPDWARN | SYS_STATUS_TXPUTE) >> 24)) != 0;
   1538a:	f410 6f81 	tst.w	r0, #1032	; 0x408
   1538e:	bf14      	ite	ne
   15390:	2201      	movne	r2, #1
   15392:	2200      	moveq	r2, #0
   15394:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   15398:	f362 0382 	bfi	r3, r2, #2, #1
   1539c:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
        if (inst->uwb_dev.status.start_tx_error){
   153a0:	b2db      	uxtb	r3, r3
   153a2:	f013 0f04 	tst.w	r3, #4
   153a6:	d0b3      	beq.n	15310 <dw1000_start_tx+0x5e>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) SYS_CTRL_TRXOFF, sizeof(uint8_t));
   153a8:	2301      	movs	r3, #1
   153aa:	9302      	str	r3, [sp, #8]
   153ac:	2240      	movs	r2, #64	; 0x40
   153ae:	2300      	movs	r3, #0
   153b0:	e9cd 2300 	strd	r2, r3, [sp]
   153b4:	2200      	movs	r2, #0
   153b6:	210d      	movs	r1, #13
   153b8:	4620      	mov	r0, r4
   153ba:	f7fe ff0b 	bl	141d4 <dw1000_write_reg>
    return (dpl_error_t)os_sem_release(&sem->sem);
   153be:	4630      	mov	r0, r6
   153c0:	f7f4 fcf0 	bl	9da4 <os_sem_release>
            assert(err == DPL_OK);
   153c4:	2800      	cmp	r0, #0
   153c6:	d0a3      	beq.n	15310 <dw1000_start_tx+0x5e>
   153c8:	2300      	movs	r3, #0
   153ca:	461a      	mov	r2, r3
   153cc:	4619      	mov	r1, r3
   153ce:	4618      	mov	r0, r3
   153d0:	f7f3 fdc8 	bl	8f64 <__assert_func>
        inst->uwb_dev.status.sleeping = 1;
   153d4:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   153d8:	f043 0301 	orr.w	r3, r3, #1
   153dc:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
   153e0:	4630      	mov	r0, r6
   153e2:	f7f4 fcdf 	bl	9da4 <os_sem_release>
   153e6:	e797      	b.n	15318 <dw1000_start_tx+0x66>

000153e8 <dw1000_tx_wait>:
{
   153e8:	b510      	push	{r4, lr}
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   153ea:	f500 64ac 	add.w	r4, r0, #1376	; 0x560
   153ee:	4620      	mov	r0, r4
   153f0:	f7f4 fd0a 	bl	9e08 <os_sem_pend>
    if (rc == DPL_OK) {
   153f4:	b100      	cbz	r0, 153f8 <dw1000_tx_wait+0x10>
}
   153f6:	bd10      	pop	{r4, pc}
    return (dpl_error_t)os_sem_release(&sem->sem);
   153f8:	4620      	mov	r0, r4
   153fa:	f7f4 fcd3 	bl	9da4 <os_sem_release>
    return rc;
   153fe:	e7fa      	b.n	153f6 <dw1000_tx_wait+0xe>

00015400 <dw1000_set_delay_start>:
{
   15400:	b5f0      	push	{r4, r5, r6, r7, lr}
   15402:	b085      	sub	sp, #20
   15404:	4604      	mov	r4, r0
   15406:	4616      	mov	r6, r2
   15408:	461d      	mov	r5, r3
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   1540a:	f500 67ad 	add.w	r7, r0, #1384	; 0x568
   1540e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   15412:	4638      	mov	r0, r7
   15414:	f7f5 fb18 	bl	aa48 <os_mutex_pend>
    if (err != DPL_OK) {
   15418:	b148      	cbz	r0, 1542e <dw1000_set_delay_start+0x2e>
        inst->uwb_dev.status.mtx_error = 1;
   1541a:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1541e:	f043 0308 	orr.w	r3, r3, #8
   15422:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   15426:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1542a:	b005      	add	sp, #20
   1542c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    inst->control.delay_start_enabled = true;
   1542e:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
   15432:	f043 0304 	orr.w	r3, r3, #4
   15436:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    dw1000_write_reg(inst, DX_TIME_ID, 1, dx_time >> 8, DX_TIME_LEN-1);
   1543a:	2304      	movs	r3, #4
   1543c:	9302      	str	r3, [sp, #8]
   1543e:	0a36      	lsrs	r6, r6, #8
   15440:	ea46 6605 	orr.w	r6, r6, r5, lsl #24
   15444:	0a2d      	lsrs	r5, r5, #8
   15446:	9600      	str	r6, [sp, #0]
   15448:	9501      	str	r5, [sp, #4]
   1544a:	2201      	movs	r2, #1
   1544c:	210a      	movs	r1, #10
   1544e:	4620      	mov	r0, r4
   15450:	f7fe fec0 	bl	141d4 <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   15454:	4638      	mov	r0, r7
   15456:	f7f5 fa9b 	bl	a990 <os_mutex_release>
    assert(err == DPL_OK);
   1545a:	2800      	cmp	r0, #0
   1545c:	d0e3      	beq.n	15426 <dw1000_set_delay_start+0x26>
   1545e:	2300      	movs	r3, #0
   15460:	461a      	mov	r2, r3
   15462:	4619      	mov	r1, r3
   15464:	4618      	mov	r0, r3
   15466:	f7f3 fd7d 	bl	8f64 <__assert_func>

0001546a <dw1000_start_rx>:
{
   1546a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1546e:	b084      	sub	sp, #16
   15470:	4604      	mov	r4, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   15472:	f500 67ad 	add.w	r7, r0, #1384	; 0x568
   15476:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1547a:	4638      	mov	r0, r7
   1547c:	f7f5 fae4 	bl	aa48 <os_mutex_pend>
    if (err != DPL_OK) {
   15480:	2800      	cmp	r0, #0
   15482:	d157      	bne.n	15534 <dw1000_start_rx+0xca>
    control = inst->control;
   15484:	f8d4 55b0 	ldr.w	r5, [r4, #1456]	; 0x5b0
    inst->uwb_dev.status.rx_restarted = 0;
   15488:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   1548c:	f36f 03c3 	bfc	r3, #3, #1
   15490:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
    if (config->trxoff_enable){ // force return to idle state, if in RX state
   15494:	f894 352c 	ldrb.w	r3, [r4, #1324]	; 0x52c
   15498:	f013 0f20 	tst.w	r3, #32
   1549c:	d151      	bne.n	15542 <dw1000_start_rx+0xd8>
    if (config->dblbuffon_enabled) {
   1549e:	f894 352c 	ldrb.w	r3, [r4, #1324]	; 0x52c
   154a2:	f013 0f10 	tst.w	r3, #16
   154a6:	d161      	bne.n	1556c <dw1000_start_rx+0x102>
    if (control.delay_start_enabled)
   154a8:	fa5f f885 	uxtb.w	r8, r5
   154ac:	f015 0504 	ands.w	r5, r5, #4
   154b0:	d17a      	bne.n	155a8 <dw1000_start_rx+0x13e>
    sys_ctrl = SYS_CTRL_RXENAB;
   154b2:	f44f 7680 	mov.w	r6, #256	; 0x100
    if (control.wait4resp_enabled) {
   154b6:	f018 0f01 	tst.w	r8, #1
   154ba:	d001      	beq.n	154c0 <dw1000_start_rx+0x56>
        sys_ctrl |= SYS_CTRL_WAIT4RESP;
   154bc:	f046 0680 	orr.w	r6, r6, #128	; 0x80
    dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, sys_ctrl, sizeof(uint16_t));
   154c0:	2302      	movs	r3, #2
   154c2:	9302      	str	r3, [sp, #8]
   154c4:	2200      	movs	r2, #0
   154c6:	9600      	str	r6, [sp, #0]
   154c8:	9201      	str	r2, [sp, #4]
   154ca:	210d      	movs	r1, #13
   154cc:	4620      	mov	r0, r4
   154ce:	f7fe fe81 	bl	141d4 <dw1000_write_reg>
    if (control.delay_start_enabled){   // check for errors
   154d2:	2d00      	cmp	r5, #0
   154d4:	d16b      	bne.n	155ae <dw1000_start_rx+0x144>
        inst->uwb_dev.status.start_rx_error = 0;
   154d6:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   154da:	f36f 03c3 	bfc	r3, #3, #1
   154de:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
    inst->control.wait4resp_enabled = false;
   154e2:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
   154e6:	f36f 0300 	bfc	r3, #0, #1
   154ea:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    inst->control.wait4resp_delay_enabled = false;
   154ee:	b2db      	uxtb	r3, r3
   154f0:	f36f 0341 	bfc	r3, #1, #1
   154f4:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    inst->control.delay_start_enabled = false;
   154f8:	b2db      	uxtb	r3, r3
   154fa:	f36f 0382 	bfc	r3, #2, #1
   154fe:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    inst->control.autoack_delay_enabled = false;
   15502:	b2db      	uxtb	r3, r3
   15504:	f36f 03c3 	bfc	r3, #3, #1
   15508:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    inst->control.start_rx_syncbuf_enabled = false;
   1550c:	b2db      	uxtb	r3, r3
   1550e:	f36f 1304 	bfc	r3, #4, #1
   15512:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    inst->control.on_error_continue_enabled = false;
   15516:	b2db      	uxtb	r3, r3
   15518:	f36f 1386 	bfc	r3, #6, #1
   1551c:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    return (dpl_error_t)os_mutex_release(&mu->mu);
   15520:	4638      	mov	r0, r7
   15522:	f7f5 fa35 	bl	a990 <os_mutex_release>
    assert(err == DPL_OK);
   15526:	2800      	cmp	r0, #0
   15528:	d16f      	bne.n	1560a <dw1000_start_rx+0x1a0>
}
   1552a:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1552e:	b004      	add	sp, #16
   15530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        inst->uwb_dev.status.mtx_error = 1;
   15534:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   15538:	f043 0308 	orr.w	r3, r3, #8
   1553c:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
        goto mtx_error;
   15540:	e7f3      	b.n	1552a <dw1000_start_rx+0xc0>
        uint8_t state = (uint8_t) dw1000_read_reg(inst, SYS_STATE_ID, PMSC_STATE_OFFSET, sizeof(uint8_t));
   15542:	2301      	movs	r3, #1
   15544:	2202      	movs	r2, #2
   15546:	2119      	movs	r1, #25
   15548:	4620      	mov	r0, r4
   1554a:	f7fe fdd3 	bl	140f4 <dw1000_read_reg>
   1554e:	b2c0      	uxtb	r0, r0
        if(state != PMSC_STATE_IDLE){
   15550:	2801      	cmp	r0, #1
   15552:	d0a4      	beq.n	1549e <dw1000_start_rx+0x34>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) SYS_CTRL_TRXOFF, sizeof(uint8_t));
   15554:	2301      	movs	r3, #1
   15556:	9302      	str	r3, [sp, #8]
   15558:	2240      	movs	r2, #64	; 0x40
   1555a:	2300      	movs	r3, #0
   1555c:	e9cd 2300 	strd	r2, r3, [sp]
   15560:	2200      	movs	r2, #0
   15562:	210d      	movs	r1, #13
   15564:	4620      	mov	r0, r4
   15566:	f7fe fe35 	bl	141d4 <dw1000_write_reg>
   1556a:	e798      	b.n	1549e <dw1000_start_rx+0x34>
    inst->control.start_rx_syncbuf_enabled = 1;
   1556c:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
   15570:	f043 0310 	orr.w	r3, r3, #16
   15574:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    buff = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t)); // Read 1 byte at offset 3 to get the 4th byte out of 5
   15578:	2301      	movs	r3, #1
   1557a:	2203      	movs	r2, #3
   1557c:	210f      	movs	r1, #15
   1557e:	4620      	mov	r0, r4
   15580:	f7fe fdb8 	bl	140f4 <dw1000_read_reg>
   15584:	b2c0      	uxtb	r0, r0
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=         // IC side Receive Buffer Pointer
   15586:	ea80 0040 	eor.w	r0, r0, r0, lsl #1
   1558a:	f010 0f80 	tst.w	r0, #128	; 0x80
   1558e:	d08b      	beq.n	154a8 <dw1000_start_rx+0x3e>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 0x01, sizeof(uint8_t)); // We need to swap RX buffer status reg (write one to toggle internally)
   15590:	2301      	movs	r3, #1
   15592:	9302      	str	r3, [sp, #8]
   15594:	2201      	movs	r2, #1
   15596:	2300      	movs	r3, #0
   15598:	e9cd 2300 	strd	r2, r3, [sp]
   1559c:	2203      	movs	r2, #3
   1559e:	210d      	movs	r1, #13
   155a0:	4620      	mov	r0, r4
   155a2:	f7fe fe17 	bl	141d4 <dw1000_write_reg>
    return inst->uwb_dev.status;
   155a6:	e77f      	b.n	154a8 <dw1000_start_rx+0x3e>
        sys_ctrl |= SYS_CTRL_RXDLYE;
   155a8:	f44f 7640 	mov.w	r6, #768	; 0x300
   155ac:	e783      	b.n	154b6 <dw1000_start_rx+0x4c>
        sys_status = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t));  // Read 1 byte at offset 3 to get the 4th byte out of 5
   155ae:	2301      	movs	r3, #1
   155b0:	2203      	movs	r2, #3
   155b2:	210f      	movs	r1, #15
   155b4:	4620      	mov	r0, r4
   155b6:	f7fe fd9d 	bl	140f4 <dw1000_read_reg>
        inst->uwb_dev.status.start_rx_error = (sys_status & (SYS_STATUS_HPDWARN >> 24)) != 0;
   155ba:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   155be:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   155c2:	f360 03c3 	bfi	r3, r0, #3, #1
   155c6:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
        if (inst->uwb_dev.status.start_rx_error){   // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
   155ca:	b2db      	uxtb	r3, r3
   155cc:	f013 0f08 	tst.w	r3, #8
   155d0:	d087      	beq.n	154e2 <dw1000_start_rx+0x78>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) SYS_CTRL_TRXOFF, sizeof(uint8_t)); // return to idle state
   155d2:	2301      	movs	r3, #1
   155d4:	9302      	str	r3, [sp, #8]
   155d6:	2240      	movs	r2, #64	; 0x40
   155d8:	2300      	movs	r3, #0
   155da:	e9cd 2300 	strd	r2, r3, [sp]
   155de:	2200      	movs	r2, #0
   155e0:	210d      	movs	r1, #13
   155e2:	4620      	mov	r0, r4
   155e4:	f7fe fdf6 	bl	141d4 <dw1000_write_reg>
            if (control.on_error_continue_enabled){
   155e8:	f018 0f40 	tst.w	r8, #64	; 0x40
   155ec:	f43f af79 	beq.w	154e2 <dw1000_start_rx+0x78>
                sys_ctrl &= ~SYS_CTRL_RXDLYE;
   155f0:	f426 7600 	bic.w	r6, r6, #512	; 0x200
   155f4:	b2b6      	uxth	r6, r6
                dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, sys_ctrl, sizeof(uint16_t)); // turn on receiver
   155f6:	2302      	movs	r3, #2
   155f8:	9302      	str	r3, [sp, #8]
   155fa:	2200      	movs	r2, #0
   155fc:	9600      	str	r6, [sp, #0]
   155fe:	9201      	str	r2, [sp, #4]
   15600:	210d      	movs	r1, #13
   15602:	4620      	mov	r0, r4
   15604:	f7fe fde6 	bl	141d4 <dw1000_write_reg>
   15608:	e76b      	b.n	154e2 <dw1000_start_rx+0x78>
    assert(err == DPL_OK);
   1560a:	2300      	movs	r3, #0
   1560c:	461a      	mov	r2, r3
   1560e:	4619      	mov	r1, r3
   15610:	4618      	mov	r0, r3
   15612:	f7f3 fca7 	bl	8f64 <__assert_func>
	...

00015618 <dw1000_stop_rx>:
{
   15618:	b5f0      	push	{r4, r5, r6, r7, lr}
   1561a:	b085      	sub	sp, #20
   1561c:	4604      	mov	r4, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   1561e:	f500 65ad 	add.w	r5, r0, #1384	; 0x568
   15622:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   15626:	4628      	mov	r0, r5
   15628:	f7f5 fa0e 	bl	aa48 <os_mutex_pend>
    if (err != DPL_OK) {
   1562c:	b148      	cbz	r0, 15642 <dw1000_stop_rx+0x2a>
        inst->uwb_dev.status.mtx_error = 1;
   1562e:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   15632:	f043 0308 	orr.w	r3, r3, #8
   15636:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   1563a:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1563e:	b005      	add	sp, #20
   15640:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mask = dw1000_read_reg(inst, SYS_MASK_ID, 0 , sizeof(uint32_t)) ; // Read set interrupt mask
   15642:	2304      	movs	r3, #4
   15644:	2200      	movs	r2, #0
   15646:	210e      	movs	r1, #14
   15648:	4620      	mov	r0, r4
   1564a:	f7fe fd53 	bl	140f4 <dw1000_read_reg>
   1564e:	4606      	mov	r6, r0
    dw1000_write_reg(inst, SYS_MASK_ID, 0, 0, sizeof(uint32_t)) ; // Clear interrupt mask - so we don't get any unwanted events
   15650:	2704      	movs	r7, #4
   15652:	9702      	str	r7, [sp, #8]
   15654:	2200      	movs	r2, #0
   15656:	2300      	movs	r3, #0
   15658:	e9cd 2300 	strd	r2, r3, [sp]
   1565c:	210e      	movs	r1, #14
   1565e:	4620      	mov	r0, r4
   15660:	f7fe fdb8 	bl	141d4 <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) SYS_CTRL_TRXOFF, sizeof(uint8_t)); // return to idle state
   15664:	2301      	movs	r3, #1
   15666:	9302      	str	r3, [sp, #8]
   15668:	2240      	movs	r2, #64	; 0x40
   1566a:	2300      	movs	r3, #0
   1566c:	e9cd 2300 	strd	r2, r3, [sp]
   15670:	2200      	movs	r2, #0
   15672:	210d      	movs	r1, #13
   15674:	4620      	mov	r0, r4
   15676:	f7fe fdad 	bl	141d4 <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_STATUS_ID, 0, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD), sizeof(uint32_t));
   1567a:	9702      	str	r7, [sp, #8]
   1567c:	a30e      	add	r3, pc, #56	; (adr r3, 156b8 <dw1000_stop_rx+0xa0>)
   1567e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15682:	e9cd 2300 	strd	r2, r3, [sp]
   15686:	2200      	movs	r2, #0
   15688:	210f      	movs	r1, #15
   1568a:	4620      	mov	r0, r4
   1568c:	f7fe fda2 	bl	141d4 <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_MASK_ID, 0, mask, sizeof(uint32_t)); // Restore mask to what it was
   15690:	9702      	str	r7, [sp, #8]
   15692:	2200      	movs	r2, #0
   15694:	9600      	str	r6, [sp, #0]
   15696:	9201      	str	r2, [sp, #4]
   15698:	210e      	movs	r1, #14
   1569a:	4620      	mov	r0, r4
   1569c:	f7fe fd9a 	bl	141d4 <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   156a0:	4628      	mov	r0, r5
   156a2:	f7f5 f975 	bl	a990 <os_mutex_release>
    assert(err == DPL_OK);
   156a6:	2800      	cmp	r0, #0
   156a8:	d0c7      	beq.n	1563a <dw1000_stop_rx+0x22>
   156aa:	2300      	movs	r3, #0
   156ac:	461a      	mov	r2, r3
   156ae:	4619      	mov	r1, r3
   156b0:	4618      	mov	r0, r3
   156b2:	f7f3 fc57 	bl	8f64 <__assert_func>
   156b6:	bf00      	nop
   156b8:	2433fbf8 	.word	0x2433fbf8
   156bc:	00000000 	.word	0x00000000

000156c0 <dw1000_set_wait4resp>:
    inst->uwb_dev.status.rx_restarted = 0;
   156c0:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
   156c4:	f36f 03c3 	bfc	r3, #3, #1
   156c8:	f880 350a 	strb.w	r3, [r0, #1290]	; 0x50a
    inst->control.wait4resp_enabled = enable;
   156cc:	f890 35b0 	ldrb.w	r3, [r0, #1456]	; 0x5b0
   156d0:	f361 0300 	bfi	r3, r1, #0, #1
   156d4:	f880 35b0 	strb.w	r3, [r0, #1456]	; 0x5b0
}
   156d8:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
   156dc:	4770      	bx	lr

000156de <dw1000_set_on_error_continue>:
    inst->control.on_error_continue_enabled = enable;
   156de:	f890 35b0 	ldrb.w	r3, [r0, #1456]	; 0x5b0
   156e2:	f361 1386 	bfi	r3, r1, #6, #1
   156e6:	f880 35b0 	strb.w	r3, [r0, #1456]	; 0x5b0
}
   156ea:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
   156ee:	4770      	bx	lr

000156f0 <dw1000_set_rxauto_disable>:
    inst->control.rxauto_disable = disable;
   156f0:	f890 35b1 	ldrb.w	r3, [r0, #1457]	; 0x5b1
   156f4:	f361 0382 	bfi	r3, r1, #2, #1
   156f8:	f880 35b1 	strb.w	r3, [r0, #1457]	; 0x5b1
}
   156fc:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
   15700:	4770      	bx	lr

00015702 <dw1000_adj_rx_timeout>:
{
   15702:	b510      	push	{r4, lr}
   15704:	b084      	sub	sp, #16
   15706:	4604      	mov	r4, r0
    dw1000_write_reg(inst, RX_FWTO_ID, RX_FWTO_OFFSET, timeout, sizeof(uint16_t));
   15708:	2302      	movs	r3, #2
   1570a:	9302      	str	r3, [sp, #8]
   1570c:	2200      	movs	r2, #0
   1570e:	9100      	str	r1, [sp, #0]
   15710:	9201      	str	r2, [sp, #4]
   15712:	210c      	movs	r1, #12
   15714:	f7fe fd5e 	bl	141d4 <dw1000_write_reg>
}
   15718:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1571c:	b004      	add	sp, #16
   1571e:	bd10      	pop	{r4, pc}

00015720 <update_rx_window_timeout>:
{
   15720:	b538      	push	{r3, r4, r5, lr}
   15722:	4605      	mov	r5, r0
   15724:	4610      	mov	r0, r2
   15726:	4619      	mov	r1, r3
    uint32_t timeout = calc_rx_window_timeout(rel_start, inst->uwb_dev.abs_timeout);
   15728:	f505 639c 	add.w	r3, r5, #1248	; 0x4e0
   1572c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   15730:	f7ff fcd1 	bl	150d6 <calc_rx_window_timeout>
   15734:	4604      	mov	r4, r0
    dw1000_adj_rx_timeout(inst, timeout);
   15736:	4601      	mov	r1, r0
   15738:	4628      	mov	r0, r5
   1573a:	f7ff ffe2 	bl	15702 <dw1000_adj_rx_timeout>
}
   1573e:	4620      	mov	r0, r4
   15740:	bd38      	pop	{r3, r4, r5, pc}

00015742 <dw1000_set_rx_timeout>:
{
   15742:	b5f0      	push	{r4, r5, r6, r7, lr}
   15744:	b085      	sub	sp, #20
   15746:	4604      	mov	r4, r0
   15748:	460e      	mov	r6, r1
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   1574a:	f500 67ad 	add.w	r7, r0, #1384	; 0x568
   1574e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   15752:	4638      	mov	r0, r7
   15754:	f7f5 f978 	bl	aa48 <os_mutex_pend>
    if (err != DPL_OK) {
   15758:	b148      	cbz	r0, 1576e <dw1000_set_rx_timeout+0x2c>
        inst->uwb_dev.status.mtx_error = 1;
   1575a:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1575e:	f043 0308 	orr.w	r3, r3, #8
   15762:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   15766:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1576a:	b005      	add	sp, #20
   1576c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    inst->uwb_dev.status.rx_timeout_error = 0;
   1576e:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   15772:	f36f 13c7 	bfc	r3, #7, #1
   15776:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
    sys_cfg_reg = dw1000_read_reg(inst, SYS_CFG_ID, 3, sizeof(uint8_t));
   1577a:	2301      	movs	r3, #1
   1577c:	2203      	movs	r2, #3
   1577e:	2104      	movs	r1, #4
   15780:	4620      	mov	r0, r4
   15782:	f7fe fcb7 	bl	140f4 <dw1000_read_reg>
   15786:	b2c5      	uxtb	r5, r0
    inst->control.rx_timeout_enabled = timeout > 0;
   15788:	1e32      	subs	r2, r6, #0
   1578a:	bf18      	it	ne
   1578c:	2201      	movne	r2, #1
   1578e:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
   15792:	f362 1345 	bfi	r3, r2, #5, #1
   15796:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    if(inst->control.rx_timeout_enabled) {
   1579a:	b2db      	uxtb	r3, r3
   1579c:	f013 0f20 	tst.w	r3, #32
   157a0:	d10e      	bne.n	157c0 <dw1000_set_rx_timeout+0x7e>
        new_reg_val = sys_cfg_reg & (~(SYS_CFG_RXWTOE>>24));
   157a2:	f005 03ef 	and.w	r3, r5, #239	; 0xef
    if (sys_cfg_reg != new_reg_val) {
   157a6:	42ab      	cmp	r3, r5
   157a8:	d116      	bne.n	157d8 <dw1000_set_rx_timeout+0x96>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   157aa:	4638      	mov	r0, r7
   157ac:	f7f5 f8f0 	bl	a990 <os_mutex_release>
    assert(err == DPL_OK);
   157b0:	2800      	cmp	r0, #0
   157b2:	d0d8      	beq.n	15766 <dw1000_set_rx_timeout+0x24>
   157b4:	2300      	movs	r3, #0
   157b6:	461a      	mov	r2, r3
   157b8:	4619      	mov	r1, r3
   157ba:	4618      	mov	r0, r3
   157bc:	f7f3 fbd2 	bl	8f64 <__assert_func>
        dw1000_write_reg(inst, RX_FWTO_ID, RX_FWTO_OFFSET, timeout, sizeof(uint16_t));
   157c0:	2302      	movs	r3, #2
   157c2:	9302      	str	r3, [sp, #8]
   157c4:	2200      	movs	r2, #0
   157c6:	9600      	str	r6, [sp, #0]
   157c8:	9201      	str	r2, [sp, #4]
   157ca:	210c      	movs	r1, #12
   157cc:	4620      	mov	r0, r4
   157ce:	f7fe fd01 	bl	141d4 <dw1000_write_reg>
        new_reg_val = sys_cfg_reg | (SYS_CFG_RXWTOE>>24);
   157d2:	f045 0310 	orr.w	r3, r5, #16
   157d6:	e7e6      	b.n	157a6 <dw1000_set_rx_timeout+0x64>
        dw1000_write_reg(inst, SYS_CFG_ID, 3, new_reg_val, sizeof(uint8_t));
   157d8:	2201      	movs	r2, #1
   157da:	9202      	str	r2, [sp, #8]
   157dc:	9300      	str	r3, [sp, #0]
   157de:	2300      	movs	r3, #0
   157e0:	9301      	str	r3, [sp, #4]
   157e2:	2203      	movs	r2, #3
   157e4:	2104      	movs	r1, #4
   157e6:	4620      	mov	r0, r4
   157e8:	f7fe fcf4 	bl	141d4 <dw1000_write_reg>
   157ec:	e7dd      	b.n	157aa <dw1000_set_rx_timeout+0x68>

000157ee <dw1000_set_rx_window>:
{
   157ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   157f2:	4604      	mov	r4, r0
   157f4:	4690      	mov	r8, r2
   157f6:	461d      	mov	r5, r3
   157f8:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
    dw1000_set_delay_start(inst, rx_start);
   157fc:	f7ff fe00 	bl	15400 <dw1000_set_delay_start>
    timeout = calc_rx_window_timeout(rx_start, rx_end);
   15800:	4632      	mov	r2, r6
   15802:	463b      	mov	r3, r7
   15804:	4640      	mov	r0, r8
   15806:	4629      	mov	r1, r5
   15808:	f7ff fc65 	bl	150d6 <calc_rx_window_timeout>
   1580c:	4601      	mov	r1, r0
    inst->control.abs_timeout = 1;
   1580e:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   15812:	f043 0308 	orr.w	r3, r3, #8
   15816:	f884 35b1 	strb.w	r3, [r4, #1457]	; 0x5b1
    inst->uwb_dev.abs_timeout = rx_end;
   1581a:	f504 639c 	add.w	r3, r4, #1248	; 0x4e0
   1581e:	e943 6702 	strd	r6, r7, [r3, #-8]
    dw1000_set_rx_timeout(inst, timeout);
   15822:	4620      	mov	r0, r4
   15824:	f7ff ff8d 	bl	15742 <dw1000_set_rx_timeout>
}
   15828:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1582c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00015830 <dw1000_set_abs_timeout>:
{
   15830:	b430      	push	{r4, r5}
   15832:	4614      	mov	r4, r2
   15834:	461d      	mov	r5, r3
    inst->control.abs_timeout = 1;
   15836:	f890 35b1 	ldrb.w	r3, [r0, #1457]	; 0x5b1
   1583a:	f043 0308 	orr.w	r3, r3, #8
   1583e:	f880 35b1 	strb.w	r3, [r0, #1457]	; 0x5b1
    inst->uwb_dev.abs_timeout = rx_end;
   15842:	f500 639c 	add.w	r3, r0, #1248	; 0x4e0
   15846:	e943 4502 	strd	r4, r5, [r3, #-8]
}
   1584a:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
   1584e:	bc30      	pop	{r4, r5}
   15850:	4770      	bx	lr

00015852 <dw1000_sync_rxbufptrs>:
{
   15852:	b510      	push	{r4, lr}
   15854:	b084      	sub	sp, #16
   15856:	4604      	mov	r4, r0
    inst->control.start_rx_syncbuf_enabled = 1;
   15858:	f890 35b0 	ldrb.w	r3, [r0, #1456]	; 0x5b0
   1585c:	f043 0310 	orr.w	r3, r3, #16
   15860:	f880 35b0 	strb.w	r3, [r0, #1456]	; 0x5b0
    buff = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t)); // Read 1 byte at offset 3 to get the 4th byte out of 5
   15864:	2301      	movs	r3, #1
   15866:	2203      	movs	r2, #3
   15868:	210f      	movs	r1, #15
   1586a:	f7fe fc43 	bl	140f4 <dw1000_read_reg>
   1586e:	b2c3      	uxtb	r3, r0
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=         // IC side Receive Buffer Pointer
   15870:	ea83 0343 	eor.w	r3, r3, r3, lsl #1
   15874:	f013 0f80 	tst.w	r3, #128	; 0x80
   15878:	d103      	bne.n	15882 <dw1000_sync_rxbufptrs+0x30>
}
   1587a:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1587e:	b004      	add	sp, #16
   15880:	bd10      	pop	{r4, pc}
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 0x01, sizeof(uint8_t)); // We need to swap RX buffer status reg (write one to toggle internally)
   15882:	2301      	movs	r3, #1
   15884:	9302      	str	r3, [sp, #8]
   15886:	2201      	movs	r2, #1
   15888:	2300      	movs	r3, #0
   1588a:	e9cd 2300 	strd	r2, r3, [sp]
   1588e:	2203      	movs	r2, #3
   15890:	210d      	movs	r1, #13
   15892:	4620      	mov	r0, r4
   15894:	f7fe fc9e 	bl	141d4 <dw1000_write_reg>
   15898:	e7ef      	b.n	1587a <dw1000_sync_rxbufptrs+0x28>
	...

0001589c <dw1000_mac_framefilter>:
{
   1589c:	b570      	push	{r4, r5, r6, lr}
   1589e:	b084      	sub	sp, #16
   158a0:	4604      	mov	r4, r0
   158a2:	460d      	mov	r5, r1
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   158a4:	f500 66ad 	add.w	r6, r0, #1384	; 0x568
   158a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   158ac:	4630      	mov	r0, r6
   158ae:	f7f5 f8cb 	bl	aa48 <os_mutex_pend>
    if (err != DPL_OK) {
   158b2:	b148      	cbz	r0, 158c8 <dw1000_mac_framefilter+0x2c>
        inst->uwb_dev.status.mtx_error = 1;
   158b4:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   158b8:	f043 0308 	orr.w	r3, r3, #8
   158bc:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   158c0:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   158c4:	b004      	add	sp, #16
   158c6:	bd70      	pop	{r4, r5, r6, pc}
    sys_cfg_reg = SYS_CFG_MASK & dw1000_read_reg(inst, SYS_CFG_ID, 0, sizeof(uint32_t)) ; // Read sysconfig register
   158c8:	2304      	movs	r3, #4
   158ca:	2200      	movs	r2, #0
   158cc:	4619      	mov	r1, r3
   158ce:	4620      	mov	r0, r4
   158d0:	f7fe fc10 	bl	140f4 <dw1000_read_reg>
    inst->uwb_dev.config.rx.frameFilter = enable;
   158d4:	f8a4 551c 	strh.w	r5, [r4, #1308]	; 0x51c
    if(enable > 0){   // Enable frame filtering and configure frame types
   158d8:	b1cd      	cbz	r5, 1590e <dw1000_mac_framefilter+0x72>
        sys_cfg_reg &= ~(SYS_CFG_FF_ALL_EN);  // Clear all
   158da:	4b0e      	ldr	r3, [pc, #56]	; (15914 <dw1000_mac_framefilter+0x78>)
   158dc:	4003      	ands	r3, r0
        sys_cfg_reg |= (enable & SYS_CFG_FF_ALL_EN) | SYS_CFG_FFE;
   158de:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
   158e2:	431d      	orrs	r5, r3
   158e4:	f045 0501 	orr.w	r5, r5, #1
    dw1000_write_reg(inst, SYS_CFG_ID,0, sys_cfg_reg, sizeof(uint32_t));
   158e8:	2104      	movs	r1, #4
   158ea:	9102      	str	r1, [sp, #8]
   158ec:	2200      	movs	r2, #0
   158ee:	9500      	str	r5, [sp, #0]
   158f0:	9201      	str	r2, [sp, #4]
   158f2:	4620      	mov	r0, r4
   158f4:	f7fe fc6e 	bl	141d4 <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   158f8:	4630      	mov	r0, r6
   158fa:	f7f5 f849 	bl	a990 <os_mutex_release>
    assert(err == DPL_OK);
   158fe:	2800      	cmp	r0, #0
   15900:	d0de      	beq.n	158c0 <dw1000_mac_framefilter+0x24>
   15902:	2300      	movs	r3, #0
   15904:	461a      	mov	r2, r3
   15906:	4619      	mov	r1, r3
   15908:	4618      	mov	r0, r3
   1590a:	f7f3 fb2b 	bl	8f64 <__assert_func>
        sys_cfg_reg &= ~(SYS_CFG_FFE);
   1590e:	4d02      	ldr	r5, [pc, #8]	; (15918 <dw1000_mac_framefilter+0x7c>)
   15910:	4005      	ands	r5, r0
   15912:	e7e9      	b.n	158e8 <dw1000_mac_framefilter+0x4c>
   15914:	f047fe01 	.word	0xf047fe01
   15918:	f047fffe 	.word	0xf047fffe

0001591c <dw1000_set_autoack>:
{
   1591c:	b570      	push	{r4, r5, r6, lr}
   1591e:	b084      	sub	sp, #16
   15920:	4604      	mov	r4, r0
   15922:	460d      	mov	r5, r1
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   15924:	f500 66ad 	add.w	r6, r0, #1384	; 0x568
   15928:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1592c:	4630      	mov	r0, r6
   1592e:	f7f5 f88b 	bl	aa48 <os_mutex_pend>
    if (err != DPL_OK) {
   15932:	b148      	cbz	r0, 15948 <dw1000_set_autoack+0x2c>
        inst->uwb_dev.status.mtx_error = 1;
   15934:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   15938:	f043 0308 	orr.w	r3, r3, #8
   1593c:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   15940:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   15944:	b004      	add	sp, #16
   15946:	bd70      	pop	{r4, r5, r6, pc}
    sys_cfg_reg = SYS_CFG_MASK & dw1000_read_reg(inst, SYS_CFG_ID, 0, sizeof(uint32_t)); // Read sysconfig register
   15948:	2304      	movs	r3, #4
   1594a:	2200      	movs	r2, #0
   1594c:	4619      	mov	r1, r3
   1594e:	4620      	mov	r0, r4
   15950:	f7fe fbd0 	bl	140f4 <dw1000_read_reg>
   15954:	f020 637b 	bic.w	r3, r0, #263192576	; 0xfb00000
   15958:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
    inst->uwb_dev.config.autoack_enabled = enable;
   1595c:	f894 252c 	ldrb.w	r2, [r4, #1324]	; 0x52c
   15960:	f365 0282 	bfi	r2, r5, #2, #1
   15964:	f884 252c 	strb.w	r2, [r4, #1324]	; 0x52c
    if(inst->uwb_dev.config.autoack_enabled){
   15968:	b2d2      	uxtb	r2, r2
   1596a:	f012 0f04 	tst.w	r2, #4
   1596e:	d014      	beq.n	1599a <dw1000_set_autoack+0x7e>
        sys_cfg_reg |= SYS_CFG_AUTOACK;
   15970:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
        dw1000_write_reg(inst, SYS_CFG_ID,0, sys_cfg_reg, sizeof(uint32_t));
   15974:	2104      	movs	r1, #4
   15976:	9102      	str	r1, [sp, #8]
   15978:	2200      	movs	r2, #0
   1597a:	9300      	str	r3, [sp, #0]
   1597c:	9201      	str	r2, [sp, #4]
   1597e:	4620      	mov	r0, r4
   15980:	f7fe fc28 	bl	141d4 <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   15984:	4630      	mov	r0, r6
   15986:	f7f5 f803 	bl	a990 <os_mutex_release>
    assert(err == DPL_OK);
   1598a:	2800      	cmp	r0, #0
   1598c:	d0d8      	beq.n	15940 <dw1000_set_autoack+0x24>
   1598e:	2300      	movs	r3, #0
   15990:	461a      	mov	r2, r3
   15992:	4619      	mov	r1, r3
   15994:	4618      	mov	r0, r3
   15996:	f7f3 fae5 	bl	8f64 <__assert_func>
        sys_cfg_reg &= ~SYS_CFG_AUTOACK;
   1599a:	f020 409f 	bic.w	r0, r0, #1333788672	; 0x4f800000
   1599e:	f420 1060 	bic.w	r0, r0, #3670016	; 0x380000
        dw1000_write_reg(inst, SYS_CFG_ID,0, sys_cfg_reg, sizeof(uint32_t));
   159a2:	2104      	movs	r1, #4
   159a4:	9102      	str	r1, [sp, #8]
   159a6:	2200      	movs	r2, #0
   159a8:	9000      	str	r0, [sp, #0]
   159aa:	9201      	str	r2, [sp, #4]
   159ac:	4620      	mov	r0, r4
   159ae:	f7fe fc11 	bl	141d4 <dw1000_write_reg>
   159b2:	e7e7      	b.n	15984 <dw1000_set_autoack+0x68>

000159b4 <dw1000_set_autoack_delay>:
{
   159b4:	b530      	push	{r4, r5, lr}
   159b6:	b085      	sub	sp, #20
   159b8:	4604      	mov	r4, r0
    dw1000_write_reg(inst, ACK_RESP_T_ID, ACK_RESP_T_ACK_TIM_OFFSET, delay, sizeof(uint8_t));
   159ba:	2501      	movs	r5, #1
   159bc:	9502      	str	r5, [sp, #8]
   159be:	9100      	str	r1, [sp, #0]
   159c0:	2300      	movs	r3, #0
   159c2:	9301      	str	r3, [sp, #4]
   159c4:	2203      	movs	r2, #3
   159c6:	211a      	movs	r1, #26
   159c8:	f7fe fc04 	bl	141d4 <dw1000_write_reg>
    dw1000_set_autoack(inst, true);
   159cc:	4629      	mov	r1, r5
   159ce:	4620      	mov	r0, r4
   159d0:	f7ff ffa4 	bl	1591c <dw1000_set_autoack>
}
   159d4:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   159d8:	b005      	add	sp, #20
   159da:	bd30      	pop	{r4, r5, pc}

000159dc <dw1000_set_wait4resp_delay>:
{
   159dc:	b570      	push	{r4, r5, r6, lr}
   159de:	b084      	sub	sp, #16
   159e0:	4604      	mov	r4, r0
   159e2:	460e      	mov	r6, r1
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   159e4:	f500 65ad 	add.w	r5, r0, #1384	; 0x568
   159e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   159ec:	4628      	mov	r0, r5
   159ee:	f7f5 f82b 	bl	aa48 <os_mutex_pend>
    if (err != DPL_OK) {
   159f2:	b148      	cbz	r0, 15a08 <dw1000_set_wait4resp_delay+0x2c>
        inst->uwb_dev.status.mtx_error = 1;
   159f4:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   159f8:	f043 0308 	orr.w	r3, r3, #8
   159fc:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   15a00:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   15a04:	b004      	add	sp, #16
   15a06:	bd70      	pop	{r4, r5, r6, pc}
    ack_resp_reg = dw1000_read_reg(inst, ACK_RESP_T_ID, 0, sizeof(uint32_t));
   15a08:	2304      	movs	r3, #4
   15a0a:	2200      	movs	r2, #0
   15a0c:	211a      	movs	r1, #26
   15a0e:	4620      	mov	r0, r4
   15a10:	f7fe fb70 	bl	140f4 <dw1000_read_reg>
    inst->control.wait4resp_delay_enabled = delay > 0;
   15a14:	1e32      	subs	r2, r6, #0
   15a16:	bf18      	it	ne
   15a18:	2201      	movne	r2, #1
   15a1a:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
   15a1e:	f362 0341 	bfi	r3, r2, #1, #1
   15a22:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    if (inst->control.wait4resp_delay_enabled || (ack_resp_reg&ACK_RESP_T_W4R_TIM_MASK)) {
   15a26:	b2db      	uxtb	r3, r3
   15a28:	f013 0f02 	tst.w	r3, #2
   15a2c:	d102      	bne.n	15a34 <dw1000_set_wait4resp_delay+0x58>
   15a2e:	f3c0 0313 	ubfx	r3, r0, #0, #20
   15a32:	b16b      	cbz	r3, 15a50 <dw1000_set_wait4resp_delay+0x74>
        ack_resp_reg &= ~(ACK_RESP_T_W4R_TIM_MASK) ;        // Clear the timer (19:0)
   15a34:	0d00      	lsrs	r0, r0, #20
   15a36:	0500      	lsls	r0, r0, #20
        ack_resp_reg |= (delay & ACK_RESP_T_W4R_TIM_MASK) ; // In UWB microseconds (e.g. turn the receiver on 20uus after TX)
   15a38:	f3c6 0113 	ubfx	r1, r6, #0, #20
   15a3c:	4308      	orrs	r0, r1
        dw1000_write_reg(inst, ACK_RESP_T_ID, 0, ack_resp_reg, sizeof(uint32_t));
   15a3e:	2304      	movs	r3, #4
   15a40:	9302      	str	r3, [sp, #8]
   15a42:	2200      	movs	r2, #0
   15a44:	9000      	str	r0, [sp, #0]
   15a46:	9201      	str	r2, [sp, #4]
   15a48:	211a      	movs	r1, #26
   15a4a:	4620      	mov	r0, r4
   15a4c:	f7fe fbc2 	bl	141d4 <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   15a50:	4628      	mov	r0, r5
   15a52:	f7f4 ff9d 	bl	a990 <os_mutex_release>
    assert(err == DPL_OK);
   15a56:	2800      	cmp	r0, #0
   15a58:	d0d2      	beq.n	15a00 <dw1000_set_wait4resp_delay+0x24>
   15a5a:	2300      	movs	r3, #0
   15a5c:	461a      	mov	r2, r3
   15a5e:	4619      	mov	r1, r3
   15a60:	4618      	mov	r0, r3
   15a62:	f7f3 fa7f 	bl	8f64 <__assert_func>

00015a66 <dw1000_set_dblrxbuff>:
{
   15a66:	b570      	push	{r4, r5, r6, lr}
   15a68:	b084      	sub	sp, #16
   15a6a:	4604      	mov	r4, r0
   15a6c:	460d      	mov	r5, r1
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   15a6e:	f500 66ad 	add.w	r6, r0, #1384	; 0x568
   15a72:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   15a76:	4630      	mov	r0, r6
   15a78:	f7f4 ffe6 	bl	aa48 <os_mutex_pend>
    if (err != DPL_OK) {
   15a7c:	b148      	cbz	r0, 15a92 <dw1000_set_dblrxbuff+0x2c>
        inst->uwb_dev.status.mtx_error = 1;
   15a7e:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   15a82:	f043 0308 	orr.w	r3, r3, #8
   15a86:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   15a8a:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   15a8e:	b004      	add	sp, #16
   15a90:	bd70      	pop	{r4, r5, r6, pc}
    sys_cfg_reg = SYS_CFG_MASK & dw1000_read_reg(inst, SYS_CFG_ID, 0, sizeof(uint32_t));
   15a92:	2304      	movs	r3, #4
   15a94:	2200      	movs	r2, #0
   15a96:	4619      	mov	r1, r3
   15a98:	4620      	mov	r0, r4
   15a9a:	f7fe fb2b 	bl	140f4 <dw1000_read_reg>
   15a9e:	f020 637b 	bic.w	r3, r0, #263192576	; 0xfb00000
   15aa2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
    inst->uwb_dev.config.dblbuffon_enabled = enable;
   15aa6:	f894 252c 	ldrb.w	r2, [r4, #1324]	; 0x52c
   15aaa:	f365 1204 	bfi	r2, r5, #4, #1
   15aae:	f884 252c 	strb.w	r2, [r4, #1324]	; 0x52c
    if(inst->uwb_dev.config.dblbuffon_enabled)
   15ab2:	b2d2      	uxtb	r2, r2
   15ab4:	f012 0f10 	tst.w	r2, #16
   15ab8:	d028      	beq.n	15b0c <dw1000_set_dblrxbuff+0xa6>
        sys_cfg_reg &= ~SYS_CFG_DIS_DRXB;
   15aba:	f020 637b 	bic.w	r3, r0, #263192576	; 0xfb00000
   15abe:	f423 2301 	bic.w	r3, r3, #528384	; 0x81000
    dw1000_write_reg(inst, SYS_CFG_ID, 0, sys_cfg_reg, sizeof(uint32_t));
   15ac2:	2104      	movs	r1, #4
   15ac4:	9102      	str	r1, [sp, #8]
   15ac6:	2200      	movs	r2, #0
   15ac8:	9300      	str	r3, [sp, #0]
   15aca:	9201      	str	r2, [sp, #4]
   15acc:	4620      	mov	r0, r4
   15ace:	f7fe fb81 	bl	141d4 <dw1000_write_reg>
    inst->control.start_rx_syncbuf_enabled = 1;
   15ad2:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
   15ad6:	f043 0310 	orr.w	r3, r3, #16
   15ada:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    buff = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t)); // Read 1 byte at offset 3 to get the 4th byte out of 5
   15ade:	2301      	movs	r3, #1
   15ae0:	2203      	movs	r2, #3
   15ae2:	210f      	movs	r1, #15
   15ae4:	4620      	mov	r0, r4
   15ae6:	f7fe fb05 	bl	140f4 <dw1000_read_reg>
   15aea:	b2c0      	uxtb	r0, r0
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=         // IC side Receive Buffer Pointer
   15aec:	ea80 0040 	eor.w	r0, r0, r0, lsl #1
   15af0:	f010 0f80 	tst.w	r0, #128	; 0x80
   15af4:	d10d      	bne.n	15b12 <dw1000_set_dblrxbuff+0xac>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   15af6:	4630      	mov	r0, r6
   15af8:	f7f4 ff4a 	bl	a990 <os_mutex_release>
    assert(err == DPL_OK);
   15afc:	2800      	cmp	r0, #0
   15afe:	d0c4      	beq.n	15a8a <dw1000_set_dblrxbuff+0x24>
   15b00:	2300      	movs	r3, #0
   15b02:	461a      	mov	r2, r3
   15b04:	4619      	mov	r1, r3
   15b06:	4618      	mov	r0, r3
   15b08:	f7f3 fa2c 	bl	8f64 <__assert_func>
        sys_cfg_reg |= SYS_CFG_DIS_DRXB;
   15b0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   15b10:	e7d7      	b.n	15ac2 <dw1000_set_dblrxbuff+0x5c>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 0x01, sizeof(uint8_t)); // We need to swap RX buffer status reg (write one to toggle internally)
   15b12:	2301      	movs	r3, #1
   15b14:	9302      	str	r3, [sp, #8]
   15b16:	2201      	movs	r2, #1
   15b18:	2300      	movs	r3, #0
   15b1a:	e9cd 2300 	strd	r2, r3, [sp]
   15b1e:	2203      	movs	r2, #3
   15b20:	210d      	movs	r1, #13
   15b22:	4620      	mov	r0, r4
   15b24:	f7fe fb56 	bl	141d4 <dw1000_write_reg>
   15b28:	e7e5      	b.n	15af6 <dw1000_set_dblrxbuff+0x90>
   15b2a:	0000      	movs	r0, r0
   15b2c:	0000      	movs	r0, r0
	...

00015b30 <dw1000_mac_config>:
{
   15b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b34:	b087      	sub	sp, #28
   15b36:	4604      	mov	r4, r0
    if (config == NULL) {
   15b38:	2900      	cmp	r1, #0
   15b3a:	f000 817f 	beq.w	15e3c <dw1000_mac_config+0x30c>
   15b3e:	460d      	mov	r5, r1
        memcpy(&inst->uwb_dev.config, config, sizeof(struct uwb_dev_config));
   15b40:	460b      	mov	r3, r1
   15b42:	f200 520c 	addw	r2, r0, #1292	; 0x50c
   15b46:	f101 0c20 	add.w	ip, r1, #32
   15b4a:	681f      	ldr	r7, [r3, #0]
   15b4c:	685e      	ldr	r6, [r3, #4]
   15b4e:	6898      	ldr	r0, [r3, #8]
   15b50:	68d9      	ldr	r1, [r3, #12]
   15b52:	6017      	str	r7, [r2, #0]
   15b54:	6056      	str	r6, [r2, #4]
   15b56:	6090      	str	r0, [r2, #8]
   15b58:	60d1      	str	r1, [r2, #12]
   15b5a:	3310      	adds	r3, #16
   15b5c:	3210      	adds	r2, #16
   15b5e:	4563      	cmp	r3, ip
   15b60:	d1f3      	bne.n	15b4a <dw1000_mac_config+0x1a>
   15b62:	681b      	ldr	r3, [r3, #0]
   15b64:	6013      	str	r3, [r2, #0]
    chan = config->channel;
   15b66:	782f      	ldrb	r7, [r5, #0]
    prfIndex = config->prf - DWT_PRF_16M;
   15b68:	f895 8002 	ldrb.w	r8, [r5, #2]
   15b6c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   15b70:	fa5f f888 	uxtb.w	r8, r8
    bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
   15b74:	2f04      	cmp	r7, #4
   15b76:	f000 8167 	beq.w	15e48 <dw1000_mac_config+0x318>
   15b7a:	2f07      	cmp	r7, #7
   15b7c:	f000 8161 	beq.w	15e42 <dw1000_mac_config+0x312>
   15b80:	2300      	movs	r3, #0
   15b82:	9305      	str	r3, [sp, #20]
    reg16 = lde_replicaCoeff[config->rx.preambleCodeIndex];
   15b84:	796a      	ldrb	r2, [r5, #5]
   15b86:	4bca      	ldr	r3, [pc, #808]	; (15eb0 <dw1000_mac_config+0x380>)
   15b88:	f833 b012 	ldrh.w	fp, [r3, r2, lsl #1]
    inst->sys_cfg_reg = SYS_CFG_MASK & dw1000_read_reg(inst, SYS_CFG_ID, 0, sizeof(uint32_t));
   15b8c:	2304      	movs	r3, #4
   15b8e:	2200      	movs	r2, #0
   15b90:	4619      	mov	r1, r3
   15b92:	4620      	mov	r0, r4
   15b94:	f7fe faae 	bl	140f4 <dw1000_read_reg>
   15b98:	f020 607b 	bic.w	r0, r0, #263192576	; 0xfb00000
   15b9c:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
   15ba0:	f8c4 0584 	str.w	r0, [r4, #1412]	; 0x584
    if(config->dataRate == DWT_BR_110K){
   15ba4:	786b      	ldrb	r3, [r5, #1]
   15ba6:	2b00      	cmp	r3, #0
   15ba8:	f040 8151 	bne.w	15e4e <dw1000_mac_config+0x31e>
        inst->sys_cfg_reg |= SYS_CFG_RXM110K;
   15bac:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
   15bb0:	f8c4 0584 	str.w	r0, [r4, #1412]	; 0x584
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
   15bb4:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
    inst->sys_cfg_reg &= ~SYS_CFG_PHR_MODE_11;
   15bb8:	f8d4 3584 	ldr.w	r3, [r4, #1412]	; 0x584
   15bbc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
   15bc0:	f8c4 3584 	str.w	r3, [r4, #1412]	; 0x584
    inst->sys_cfg_reg |= (SYS_CFG_PHR_MODE_11 & (((uint32_t)config->rx.phrMode) << SYS_CFG_PHR_MODE_SHFT));
   15bc4:	79ea      	ldrb	r2, [r5, #7]
   15bc6:	0412      	lsls	r2, r2, #16
   15bc8:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
   15bcc:	4313      	orrs	r3, r2
   15bce:	f8c4 3584 	str.w	r3, [r4, #1412]	; 0x584
    if (config->rxauto_enable)
   15bd2:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   15bd6:	f012 0f01 	tst.w	r2, #1
   15bda:	f000 813d 	beq.w	15e58 <dw1000_mac_config+0x328>
        inst->sys_cfg_reg |=SYS_CFG_RXAUTR;
   15bde:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   15be2:	f8c4 3584 	str.w	r3, [r4, #1412]	; 0x584
    inst->sys_cfg_reg |= SYS_CFG_DIS_DRXB;
   15be6:	f8d4 3584 	ldr.w	r3, [r4, #1412]	; 0x584
   15bea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   15bee:	f8c4 3584 	str.w	r3, [r4, #1412]	; 0x584
    dw1000_write_reg(inst, SYS_CFG_ID, 0, inst->sys_cfg_reg, sizeof(uint32_t));
   15bf2:	f04f 0904 	mov.w	r9, #4
   15bf6:	f8cd 9008 	str.w	r9, [sp, #8]
   15bfa:	2600      	movs	r6, #0
   15bfc:	9300      	str	r3, [sp, #0]
   15bfe:	9601      	str	r6, [sp, #4]
   15c00:	4632      	mov	r2, r6
   15c02:	4649      	mov	r1, r9
   15c04:	4620      	mov	r0, r4
   15c06:	f7fe fae5 	bl	141d4 <dw1000_write_reg>
    dw1000_write_reg(inst, LDE_IF_ID, LDE_REPC_OFFSET, reg16, sizeof(uint16_t));
   15c0a:	f04f 0a02 	mov.w	sl, #2
   15c0e:	f8cd a008 	str.w	sl, [sp, #8]
   15c12:	f8cd b000 	str.w	fp, [sp]
   15c16:	9601      	str	r6, [sp, #4]
   15c18:	f642 0204 	movw	r2, #10244	; 0x2804
   15c1c:	212e      	movs	r1, #46	; 0x2e
   15c1e:	4620      	mov	r0, r4
   15c20:	f7fe fad8 	bl	141d4 <dw1000_write_reg>
    dw1000_phy_config_lde(inst, prfIndex);
   15c24:	4641      	mov	r1, r8
   15c26:	4620      	mov	r0, r4
   15c28:	f001 f9a9 	bl	16f7e <dw1000_phy_config_lde>
    dw1000_write_reg(inst, FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]], sizeof(uint32_t));
   15c2c:	4ba1      	ldr	r3, [pc, #644]	; (15eb4 <dw1000_mac_config+0x384>)
   15c2e:	f813 b007 	ldrb.w	fp, [r3, r7]
   15c32:	4ba1      	ldr	r3, [pc, #644]	; (15eb8 <dw1000_mac_config+0x388>)
   15c34:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
   15c38:	f8cd 9008 	str.w	r9, [sp, #8]
   15c3c:	9300      	str	r3, [sp, #0]
   15c3e:	9601      	str	r6, [sp, #4]
   15c40:	2207      	movs	r2, #7
   15c42:	212b      	movs	r1, #43	; 0x2b
   15c44:	4620      	mov	r0, r4
   15c46:	f7fe fac5 	bl	141d4 <dw1000_write_reg>
    dw1000_write_reg(inst, FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]], sizeof(uint8_t));
   15c4a:	4b9c      	ldr	r3, [pc, #624]	; (15ebc <dw1000_mac_config+0x38c>)
   15c4c:	f813 300b 	ldrb.w	r3, [r3, fp]
   15c50:	2201      	movs	r2, #1
   15c52:	9202      	str	r2, [sp, #8]
   15c54:	9300      	str	r3, [sp, #0]
   15c56:	9601      	str	r6, [sp, #4]
   15c58:	220b      	movs	r2, #11
   15c5a:	212b      	movs	r1, #43	; 0x2b
   15c5c:	4620      	mov	r0, r4
   15c5e:	f7fe fab9 	bl	141d4 <dw1000_write_reg>
    dw1000_write_reg(inst, RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw], sizeof(uint8_t));
   15c62:	f89d 3014 	ldrb.w	r3, [sp, #20]
   15c66:	4a96      	ldr	r2, [pc, #600]	; (15ec0 <dw1000_mac_config+0x390>)
   15c68:	5cd3      	ldrb	r3, [r2, r3]
   15c6a:	2201      	movs	r2, #1
   15c6c:	9202      	str	r2, [sp, #8]
   15c6e:	9300      	str	r3, [sp, #0]
   15c70:	9601      	str	r6, [sp, #4]
   15c72:	220b      	movs	r2, #11
   15c74:	2128      	movs	r1, #40	; 0x28
   15c76:	4620      	mov	r0, r4
   15c78:	f7fe faac 	bl	141d4 <dw1000_write_reg>
    dw1000_write_reg(inst, RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]], sizeof(uint32_t));
   15c7c:	4b91      	ldr	r3, [pc, #580]	; (15ec4 <dw1000_mac_config+0x394>)
   15c7e:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
   15c82:	f8cd 9008 	str.w	r9, [sp, #8]
   15c86:	9300      	str	r3, [sp, #0]
   15c88:	9601      	str	r6, [sp, #4]
   15c8a:	220c      	movs	r2, #12
   15c8c:	2128      	movs	r1, #40	; 0x28
   15c8e:	4620      	mov	r0, r4
   15c90:	f7fe faa0 	bl	141d4 <dw1000_write_reg>
    dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->rx.sfdType], sizeof(uint16_t));
   15c94:	786a      	ldrb	r2, [r5, #1]
   15c96:	79ab      	ldrb	r3, [r5, #6]
   15c98:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   15c9c:	4a8a      	ldr	r2, [pc, #552]	; (15ec8 <dw1000_mac_config+0x398>)
   15c9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   15ca2:	f8cd a008 	str.w	sl, [sp, #8]
   15ca6:	9300      	str	r3, [sp, #0]
   15ca8:	9601      	str	r6, [sp, #4]
   15caa:	4652      	mov	r2, sl
   15cac:	2127      	movs	r1, #39	; 0x27
   15cae:	4620      	mov	r0, r4
   15cb0:	f7fe fa90 	bl	141d4 <dw1000_write_reg>
    dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex], sizeof(uint16_t));
   15cb4:	4b85      	ldr	r3, [pc, #532]	; (15ecc <dw1000_mac_config+0x39c>)
   15cb6:	f833 3018 	ldrh.w	r3, [r3, r8, lsl #1]
   15cba:	f8cd a008 	str.w	sl, [sp, #8]
   15cbe:	9300      	str	r3, [sp, #0]
   15cc0:	9601      	str	r6, [sp, #4]
   15cc2:	464a      	mov	r2, r9
   15cc4:	2127      	movs	r1, #39	; 0x27
   15cc6:	4620      	mov	r0, r4
   15cc8:	f7fe fa84 	bl	141d4 <dw1000_write_reg>
    if(config->dataRate == DWT_BR_110K){
   15ccc:	786b      	ldrb	r3, [r5, #1]
   15cce:	2b00      	cmp	r3, #0
   15cd0:	f000 80c7 	beq.w	15e62 <dw1000_mac_config+0x332>
        if(config->tx.preambleLength == DWT_PLEN_64){
   15cd4:	7d6b      	ldrb	r3, [r5, #21]
   15cd6:	2b04      	cmp	r3, #4
   15cd8:	f000 80cf 	beq.w	15e7a <dw1000_mac_config+0x34a>
            dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8, sizeof(uint16_t));
   15cdc:	2602      	movs	r6, #2
   15cde:	9602      	str	r6, [sp, #8]
   15ce0:	2220      	movs	r2, #32
   15ce2:	2300      	movs	r3, #0
   15ce4:	e9cd 2300 	strd	r2, r3, [sp]
   15ce8:	2206      	movs	r2, #6
   15cea:	2127      	movs	r1, #39	; 0x27
   15cec:	4620      	mov	r0, r4
   15cee:	f7fe fa71 	bl	141d4 <dw1000_write_reg>
            dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS, sizeof(uint16_t));
   15cf2:	9602      	str	r6, [sp, #8]
   15cf4:	2228      	movs	r2, #40	; 0x28
   15cf6:	2300      	movs	r3, #0
   15cf8:	e9cd 2300 	strd	r2, r3, [sp]
   15cfc:	2226      	movs	r2, #38	; 0x26
   15cfe:	2127      	movs	r1, #39	; 0x27
   15d00:	4620      	mov	r0, r4
   15d02:	f7fe fa67 	bl	141d4 <dw1000_write_reg>
                     digital_bb_config[prfIndex][config->rx.pacLength], sizeof(uint32_t));
   15d06:	792b      	ldrb	r3, [r5, #4]
   15d08:	eb03 0388 	add.w	r3, r3, r8, lsl #2
   15d0c:	4a70      	ldr	r2, [pc, #448]	; (15ed0 <dw1000_mac_config+0x3a0>)
   15d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE2_OFFSET,
   15d12:	2204      	movs	r2, #4
   15d14:	9202      	str	r2, [sp, #8]
   15d16:	9300      	str	r3, [sp, #0]
   15d18:	2300      	movs	r3, #0
   15d1a:	9301      	str	r3, [sp, #4]
   15d1c:	2208      	movs	r2, #8
   15d1e:	2127      	movs	r1, #39	; 0x27
   15d20:	4620      	mov	r0, r4
   15d22:	f7fe fa57 	bl	141d4 <dw1000_write_reg>
    if(config->rx.sfdTimeout == 0)
   15d26:	896b      	ldrh	r3, [r5, #10]
   15d28:	b90b      	cbnz	r3, 15d2e <dw1000_mac_config+0x1fe>
        config->rx.sfdTimeout= DWT_SFDTOC_DEF;
   15d2a:	2381      	movs	r3, #129	; 0x81
   15d2c:	816b      	strh	r3, [r5, #10]
    dw1000_write_reg(inst, DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->rx.sfdTimeout, sizeof(uint16_t));
   15d2e:	896b      	ldrh	r3, [r5, #10]
   15d30:	f04f 0a02 	mov.w	sl, #2
   15d34:	f8cd a008 	str.w	sl, [sp, #8]
   15d38:	f04f 0900 	mov.w	r9, #0
   15d3c:	9300      	str	r3, [sp, #0]
   15d3e:	f8cd 9004 	str.w	r9, [sp, #4]
   15d42:	2220      	movs	r2, #32
   15d44:	2127      	movs	r1, #39	; 0x27
   15d46:	4620      	mov	r0, r4
   15d48:	f7fe fa44 	bl	141d4 <dw1000_write_reg>
    dw1000_write_reg(inst, AGC_CTRL_ID, AGC_TUNE2_OFFSET, agc_config.lo32, sizeof(uint32_t));
   15d4c:	2604      	movs	r6, #4
   15d4e:	9602      	str	r6, [sp, #8]
   15d50:	a355      	add	r3, pc, #340	; (adr r3, 15ea8 <dw1000_mac_config+0x378>)
   15d52:	e9d3 2300 	ldrd	r2, r3, [r3]
   15d56:	e9cd 2300 	strd	r2, r3, [sp]
   15d5a:	220c      	movs	r2, #12
   15d5c:	2123      	movs	r1, #35	; 0x23
   15d5e:	4620      	mov	r0, r4
   15d60:	f7fe fa38 	bl	141d4 <dw1000_write_reg>
    dw1000_write_reg(inst, AGC_CTRL_ID, AGC_TUNE1_OFFSET, agc_config.target[prfIndex], sizeof(uint16_t));
   15d64:	4b5b      	ldr	r3, [pc, #364]	; (15ed4 <dw1000_mac_config+0x3a4>)
   15d66:	eb03 0848 	add.w	r8, r3, r8, lsl #1
   15d6a:	f8b8 3004 	ldrh.w	r3, [r8, #4]
   15d6e:	f8cd a008 	str.w	sl, [sp, #8]
   15d72:	9300      	str	r3, [sp, #0]
   15d74:	f8cd 9004 	str.w	r9, [sp, #4]
   15d78:	4632      	mov	r2, r6
   15d7a:	2123      	movs	r1, #35	; 0x23
   15d7c:	4620      	mov	r0, r4
   15d7e:	f7fe fa29 	bl	141d4 <dw1000_write_reg>
    if(config->rx.sfdType){
   15d82:	79aa      	ldrb	r2, [r5, #6]
   15d84:	2a00      	cmp	r2, #0
   15d86:	f040 80a7 	bne.w	15ed8 <dw1000_mac_config+0x3a8>
    uint8_t useDWnsSFD = 0;
   15d8a:	4611      	mov	r1, r2
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (((uint32_t)chan) << CHAN_CTRL_TX_CHAN_SHIFT)) |                   // Transmit Channel
   15d8c:	f007 030f 	and.w	r3, r7, #15
        (CHAN_CTRL_RX_CHAN_MASK & (((uint32_t)chan) << CHAN_CTRL_RX_CHAN_SHIFT)) |                         // Receive Channel
   15d90:	013f      	lsls	r7, r7, #4
   15d92:	b2ff      	uxtb	r7, r7
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (((uint32_t)chan) << CHAN_CTRL_TX_CHAN_SHIFT)) |                   // Transmit Channel
   15d94:	433b      	orrs	r3, r7
        (CHAN_CTRL_RXFPRF_MASK & (((uint32_t)config->prf) << CHAN_CTRL_RXFPRF_SHIFT)) |                    // RX PRF
   15d96:	78af      	ldrb	r7, [r5, #2]
   15d98:	04bf      	lsls	r7, r7, #18
   15d9a:	f407 2740 	and.w	r7, r7, #786432	; 0xc0000
        (CHAN_CTRL_RX_CHAN_MASK & (((uint32_t)chan) << CHAN_CTRL_RX_CHAN_SHIFT)) |                         // Receive Channel
   15d9e:	433b      	orrs	r3, r7
        ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & (((uint32_t)nsSfd_result) << CHAN_CTRL_TNSSFD_SHIFT)) |     // nsSFD enable RX&TX
   15da0:	0512      	lsls	r2, r2, #20
   15da2:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
        (CHAN_CTRL_RXFPRF_MASK & (((uint32_t)config->prf) << CHAN_CTRL_RXFPRF_SHIFT)) |                    // RX PRF
   15da6:	4313      	orrs	r3, r2
        (CHAN_CTRL_DWSFD & (((uint32_t)useDWnsSFD) << CHAN_CTRL_DWSFD_SHIFT)) |                            // Use DW nsSFD
   15da8:	044a      	lsls	r2, r1, #17
   15daa:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
        ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & (((uint32_t)nsSfd_result) << CHAN_CTRL_TNSSFD_SHIFT)) |     // nsSFD enable RX&TX
   15dae:	4313      	orrs	r3, r2
        (CHAN_CTRL_TX_PCOD_MASK & (((uint32_t)config->tx.preambleCodeIndex) << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
   15db0:	7d2a      	ldrb	r2, [r5, #20]
   15db2:	0592      	lsls	r2, r2, #22
   15db4:	f002 62f8 	and.w	r2, r2, #130023424	; 0x7c00000
        (CHAN_CTRL_DWSFD & (((uint32_t)useDWnsSFD) << CHAN_CTRL_DWSFD_SHIFT)) |                            // Use DW nsSFD
   15db8:	4313      	orrs	r3, r2
        (CHAN_CTRL_RX_PCOD_MASK & (((uint32_t)config->rx.preambleCodeIndex) << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
   15dba:	796a      	ldrb	r2, [r5, #5]
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (((uint32_t)chan) << CHAN_CTRL_TX_CHAN_SHIFT)) |                   // Transmit Channel
   15dbc:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
    dw1000_write_reg(inst, CHAN_CTRL_ID, 0, regval, sizeof(uint32_t)) ;
   15dc0:	2704      	movs	r7, #4
   15dc2:	9702      	str	r7, [sp, #8]
   15dc4:	2600      	movs	r6, #0
   15dc6:	9300      	str	r3, [sp, #0]
   15dc8:	9601      	str	r6, [sp, #4]
   15dca:	4632      	mov	r2, r6
   15dcc:	211f      	movs	r1, #31
   15dce:	4620      	mov	r0, r4
   15dd0:	f7fe fa00 	bl	141d4 <dw1000_write_reg>
    inst->tx_fctrl = (((uint32_t)(config->tx.preambleLength | config->prf)) << TX_FCTRL_TXPRF_SHFT) |
   15dd4:	7d6b      	ldrb	r3, [r5, #21]
   15dd6:	78aa      	ldrb	r2, [r5, #2]
   15dd8:	431a      	orrs	r2, r3
        (((uint32_t)config->dataRate) << TX_FCTRL_TXBR_SHFT);
   15dda:	786b      	ldrb	r3, [r5, #1]
   15ddc:	035b      	lsls	r3, r3, #13
    inst->tx_fctrl = (((uint32_t)(config->tx.preambleLength | config->prf)) << TX_FCTRL_TXPRF_SHFT) |
   15dde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   15de2:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    dw1000_write_reg(inst, TX_FCTRL_ID, 0, inst->tx_fctrl, sizeof(uint32_t));
   15de6:	9702      	str	r7, [sp, #8]
   15de8:	9300      	str	r3, [sp, #0]
   15dea:	9601      	str	r6, [sp, #4]
   15dec:	4632      	mov	r2, r6
   15dee:	2108      	movs	r1, #8
   15df0:	4620      	mov	r0, r4
   15df2:	f7fe f9ef 	bl	141d4 <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF, sizeof(uint8_t));
   15df6:	2301      	movs	r3, #1
   15df8:	9302      	str	r3, [sp, #8]
   15dfa:	2242      	movs	r2, #66	; 0x42
   15dfc:	2300      	movs	r3, #0
   15dfe:	e9cd 2300 	strd	r2, r3, [sp]
   15e02:	4632      	mov	r2, r6
   15e04:	210d      	movs	r1, #13
   15e06:	4620      	mov	r0, r4
   15e08:	f7fe f9e4 	bl	141d4 <dw1000_write_reg>
    dw1000_mac_framefilter(inst, config->rx.frameFilter);
   15e0c:	8a29      	ldrh	r1, [r5, #16]
   15e0e:	4620      	mov	r0, r4
   15e10:	f7ff fd44 	bl	1589c <dw1000_mac_framefilter>
    if (config->rxauto_enable)
   15e14:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   15e18:	f013 0f01 	tst.w	r3, #1
   15e1c:	d004      	beq.n	15e28 <dw1000_mac_config+0x2f8>
        assert(config->trxoff_enable);
   15e1e:	f895 3020 	ldrb.w	r3, [r5, #32]
   15e22:	f013 0f20 	tst.w	r3, #32
   15e26:	d067      	beq.n	15ef8 <dw1000_mac_config+0x3c8>
    if(config->dblbuffon_enabled)
   15e28:	f895 3020 	ldrb.w	r3, [r5, #32]
   15e2c:	f013 0f10 	tst.w	r3, #16
   15e30:	d168      	bne.n	15f04 <dw1000_mac_config+0x3d4>
}
   15e32:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   15e36:	b007      	add	sp, #28
   15e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        config = &inst->uwb_dev.config;
   15e3c:	f200 550c 	addw	r5, r0, #1292	; 0x50c
   15e40:	e691      	b.n	15b66 <dw1000_mac_config+0x36>
    bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
   15e42:	2301      	movs	r3, #1
   15e44:	9305      	str	r3, [sp, #20]
   15e46:	e69d      	b.n	15b84 <dw1000_mac_config+0x54>
   15e48:	2301      	movs	r3, #1
   15e4a:	9305      	str	r3, [sp, #20]
   15e4c:	e69a      	b.n	15b84 <dw1000_mac_config+0x54>
        inst->sys_cfg_reg &= (~SYS_CFG_RXM110K);
   15e4e:	f420 0080 	bic.w	r0, r0, #4194304	; 0x400000
   15e52:	f8c4 0584 	str.w	r0, [r4, #1412]	; 0x584
   15e56:	e6af      	b.n	15bb8 <dw1000_mac_config+0x88>
        inst->sys_cfg_reg &= (~SYS_CFG_RXAUTR);
   15e58:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   15e5c:	f8c4 3584 	str.w	r3, [r4, #1412]	; 0x584
   15e60:	e6c1      	b.n	15be6 <dw1000_mac_config+0xb6>
        dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K, sizeof(uint16_t));
   15e62:	f8cd a008 	str.w	sl, [sp, #8]
   15e66:	2264      	movs	r2, #100	; 0x64
   15e68:	2300      	movs	r3, #0
   15e6a:	e9cd 2300 	strd	r2, r3, [sp]
   15e6e:	2206      	movs	r2, #6
   15e70:	2127      	movs	r1, #39	; 0x27
   15e72:	4620      	mov	r0, r4
   15e74:	f7fe f9ae 	bl	141d4 <dw1000_write_reg>
   15e78:	e745      	b.n	15d06 <dw1000_mac_config+0x1d6>
            dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64, sizeof(uint16_t));
   15e7a:	2602      	movs	r6, #2
   15e7c:	9602      	str	r6, [sp, #8]
   15e7e:	f04f 0a10 	mov.w	sl, #16
   15e82:	f04f 0b00 	mov.w	fp, #0
   15e86:	e9cd ab00 	strd	sl, fp, [sp]
   15e8a:	2206      	movs	r2, #6
   15e8c:	2127      	movs	r1, #39	; 0x27
   15e8e:	4620      	mov	r0, r4
   15e90:	f7fe f9a0 	bl	141d4 <dw1000_write_reg>
            dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64, sizeof(uint16_t));
   15e94:	9602      	str	r6, [sp, #8]
   15e96:	e9cd ab00 	strd	sl, fp, [sp]
   15e9a:	2226      	movs	r2, #38	; 0x26
   15e9c:	2127      	movs	r1, #39	; 0x27
   15e9e:	4620      	mov	r0, r4
   15ea0:	f7fe f998 	bl	141d4 <dw1000_write_reg>
   15ea4:	e72f      	b.n	15d06 <dw1000_mac_config+0x1d6>
   15ea6:	bf00      	nop
   15ea8:	2502a907 	.word	0x2502a907
   15eac:	00000000 	.word	0x00000000
   15eb0:	00024224 	.word	0x00024224
   15eb4:	00024198 	.word	0x00024198
   15eb8:	000241c8 	.word	0x000241c8
   15ebc:	000241e0 	.word	0x000241e0
   15ec0:	00024258 	.word	0x00024258
   15ec4:	00024268 	.word	0x00024268
   15ec8:	0002425c 	.word	0x0002425c
   15ecc:	000241c0 	.word	0x000241c0
   15ed0:	000241a0 	.word	0x000241a0
   15ed4:	00024190 	.word	0x00024190
        dw1000_write_reg(inst, USR_SFD_ID, 0x0, dwnsSFDlen[config->dataRate], sizeof(uint8_t));
   15ed8:	786b      	ldrb	r3, [r5, #1]
   15eda:	4a0d      	ldr	r2, [pc, #52]	; (15f10 <dw1000_mac_config+0x3e0>)
   15edc:	5cd3      	ldrb	r3, [r2, r3]
   15ede:	2601      	movs	r6, #1
   15ee0:	9602      	str	r6, [sp, #8]
   15ee2:	464a      	mov	r2, r9
   15ee4:	9300      	str	r3, [sp, #0]
   15ee6:	f8cd 9004 	str.w	r9, [sp, #4]
   15eea:	2121      	movs	r1, #33	; 0x21
   15eec:	4620      	mov	r0, r4
   15eee:	f7fe f971 	bl	141d4 <dw1000_write_reg>
        useDWnsSFD = 1 ;
   15ef2:	4631      	mov	r1, r6
        nsSfd_result = 3 ;
   15ef4:	2203      	movs	r2, #3
   15ef6:	e749      	b.n	15d8c <dw1000_mac_config+0x25c>
        assert(config->trxoff_enable);
   15ef8:	4633      	mov	r3, r6
   15efa:	4632      	mov	r2, r6
   15efc:	4631      	mov	r1, r6
   15efe:	4630      	mov	r0, r6
   15f00:	f7f3 f830 	bl	8f64 <__assert_func>
        dw1000_set_dblrxbuff(inst, true);
   15f04:	2101      	movs	r1, #1
   15f06:	4620      	mov	r0, r4
   15f08:	f7ff fdad 	bl	15a66 <dw1000_set_dblrxbuff>
   15f0c:	e791      	b.n	15e32 <dw1000_mac_config+0x302>
   15f0e:	bf00      	nop
   15f10:	000241c4 	.word	0x000241c4

00015f14 <dw1000_read_carrier_integrator>:
{
   15f14:	b508      	push	{r3, lr}
    regval = dw1000_read_reg(inst, DRX_CONF_ID, DRX_CARRIER_INT_OFFSET, DRX_CARRIER_INT_LEN);
   15f16:	2303      	movs	r3, #3
   15f18:	2228      	movs	r2, #40	; 0x28
   15f1a:	2127      	movs	r1, #39	; 0x27
   15f1c:	f7fe f8ea 	bl	140f4 <dw1000_read_reg>
    if (regval & B20_SIGN_EXTEND_TEST) {
   15f20:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
   15f24:	d005      	beq.n	15f32 <dw1000_read_carrier_integrator+0x1e>
        regval |= B20_SIGN_EXTEND_MASK;
   15f26:	ea6f 3000 	mvn.w	r0, r0, lsl #12
   15f2a:	ea6f 3010 	mvn.w	r0, r0, lsr #12
}
   15f2e:	4240      	negs	r0, r0
   15f30:	bd08      	pop	{r3, pc}
        regval &= DRX_CARRIER_INT_MASK;
   15f32:	f3c0 0014 	ubfx	r0, r0, #0, #21
   15f36:	e7fa      	b.n	15f2e <dw1000_read_carrier_integrator+0x1a>

00015f38 <dw1000_calc_clock_offset_ratio>:
{
   15f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15f3c:	4603      	mov	r3, r0
   15f3e:	4608      	mov	r0, r1
    if (inst->uwb_dev.config.dataRate == DWT_BR_110K) {
   15f40:	f893 250d 	ldrb.w	r2, [r3, #1293]	; 0x50d
   15f44:	b172      	cbz	r2, 15f64 <dw1000_calc_clock_offset_ratio+0x2c>
    dpl_float64_t fom = DPL_FLOAT64_INIT(DWT_FREQ_OFFSET_MULTIPLIER);
   15f46:	f20f 0998 	addw	r9, pc, #152	; 0x98
   15f4a:	e9d9 8900 	ldrd	r8, r9, [r9]
    switch ( inst->uwb_dev.config.channel ) {
   15f4e:	f893 350c 	ldrb.w	r3, [r3, #1292]	; 0x50c
   15f52:	3b01      	subs	r3, #1
   15f54:	2b06      	cmp	r3, #6
   15f56:	d832      	bhi.n	15fbe <dw1000_calc_clock_offset_ratio+0x86>
   15f58:	e8df f003 	tbb	[pc, r3]
   15f5c:	25093b37 	.word	0x25093b37
   15f60:	3129      	.short	0x3129
   15f62:	2d          	.byte	0x2d
   15f63:	00          	.byte	0x00
        fom = DPL_FLOAT64_INIT(DWT_FREQ_OFFSET_MULTIPLIER_110KB);
   15f64:	f20f 0980 	addw	r9, pc, #128	; 0x80
   15f68:	e9d9 8900 	ldrd	r8, r9, [r9]
   15f6c:	e7ef      	b.n	15f4e <dw1000_calc_clock_offset_ratio+0x16>
    case 3: hz_to_ppm = DPL_FLOAT64_INIT(DWT_HZ_TO_PPM_MULTIPLIER_CHAN_3);break;
   15f6e:	a720      	add	r7, pc, #128	; (adr r7, 15ff0 <dw1000_calc_clock_offset_ratio+0xb8>)
   15f70:	e9d7 6700 	ldrd	r6, r7, [r7]
    ccor = DPL_FLOAT64_MUL(DPL_FLOAT64_I32_TO_F64(integrator_val), DPL_FLOAT64_MUL(fom, hz_to_ppm));
   15f74:	f00b f9b2 	bl	212dc <__aeabi_i2d>
   15f78:	4604      	mov	r4, r0
   15f7a:	460d      	mov	r5, r1
   15f7c:	4632      	mov	r2, r6
   15f7e:	463b      	mov	r3, r7
   15f80:	4640      	mov	r0, r8
   15f82:	4649      	mov	r1, r9
   15f84:	f00b fa14 	bl	213b0 <__aeabi_dmul>
   15f88:	4602      	mov	r2, r0
   15f8a:	460b      	mov	r3, r1
   15f8c:	4620      	mov	r0, r4
   15f8e:	4629      	mov	r1, r5
   15f90:	f00b fa0e 	bl	213b0 <__aeabi_dmul>
    ccor = DPL_FLOAT64_DIV(ccor, DPL_FLOAT64_INIT(1.0e6));
   15f94:	a318      	add	r3, pc, #96	; (adr r3, 15ff8 <dw1000_calc_clock_offset_ratio+0xc0>)
   15f96:	e9d3 2300 	ldrd	r2, r3, [r3]
   15f9a:	f00b fb33 	bl	21604 <__aeabi_ddiv>
}
   15f9e:	ec41 0b10 	vmov	d0, r0, r1
   15fa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    case 4: hz_to_ppm = DPL_FLOAT64_INIT(DWT_HZ_TO_PPM_MULTIPLIER_CHAN_4);break;
   15fa6:	a712      	add	r7, pc, #72	; (adr r7, 15ff0 <dw1000_calc_clock_offset_ratio+0xb8>)
   15fa8:	e9d7 6700 	ldrd	r6, r7, [r7]
   15fac:	e7e2      	b.n	15f74 <dw1000_calc_clock_offset_ratio+0x3c>
    case 5: hz_to_ppm = DPL_FLOAT64_INIT(DWT_HZ_TO_PPM_MULTIPLIER_CHAN_5);break;
   15fae:	a714      	add	r7, pc, #80	; (adr r7, 16000 <dw1000_calc_clock_offset_ratio+0xc8>)
   15fb0:	e9d7 6700 	ldrd	r6, r7, [r7]
   15fb4:	e7de      	b.n	15f74 <dw1000_calc_clock_offset_ratio+0x3c>
    case 7: hz_to_ppm = DPL_FLOAT64_INIT(DWT_HZ_TO_PPM_MULTIPLIER_CHAN_7);break;
   15fb6:	a712      	add	r7, pc, #72	; (adr r7, 16000 <dw1000_calc_clock_offset_ratio+0xc8>)
   15fb8:	e9d7 6700 	ldrd	r6, r7, [r7]
   15fbc:	e7da      	b.n	15f74 <dw1000_calc_clock_offset_ratio+0x3c>
    default: assert(0);
   15fbe:	2300      	movs	r3, #0
   15fc0:	461a      	mov	r2, r3
   15fc2:	4619      	mov	r1, r3
   15fc4:	4618      	mov	r0, r3
   15fc6:	f7f2 ffcd 	bl	8f64 <__assert_func>
    switch ( inst->uwb_dev.config.channel ) {
   15fca:	a70f      	add	r7, pc, #60	; (adr r7, 16008 <dw1000_calc_clock_offset_ratio+0xd0>)
   15fcc:	e9d7 6700 	ldrd	r6, r7, [r7]
   15fd0:	e7d0      	b.n	15f74 <dw1000_calc_clock_offset_ratio+0x3c>
    case 2: hz_to_ppm = DPL_FLOAT64_INIT(DWT_HZ_TO_PPM_MULTIPLIER_CHAN_2);break;
   15fd2:	a70f      	add	r7, pc, #60	; (adr r7, 16010 <dw1000_calc_clock_offset_ratio+0xd8>)
   15fd4:	e9d7 6700 	ldrd	r6, r7, [r7]
   15fd8:	e7cc      	b.n	15f74 <dw1000_calc_clock_offset_ratio+0x3c>
   15fda:	bf00      	nop
   15fdc:	f3af 8000 	nop.w
   15fe0:	00000000 	.word	0x00000000
   15fe4:	400dc130 	.word	0x400dc130
   15fe8:	00000000 	.word	0x00000000
   15fec:	3fddc130 	.word	0x3fddc130
   15ff0:	7281d2c8 	.word	0x7281d2c8
   15ff4:	3f2d2c7d 	.word	0x3f2d2c7d
   15ff8:	00000000 	.word	0x00000000
   15ffc:	412e8480 	.word	0x412e8480
   16000:	3b94f463 	.word	0x3b94f463
   16004:	3f24327e 	.word	0x3f24327e
   16008:	12c12c13 	.word	0x12c12c13
   1600c:	3f32c12c 	.word	0x3f32c12c
   16010:	90690690 	.word	0x90690690
   16014:	3f306906 	.word	0x3f306906

00016018 <dw1000_read_time_tracking_offset>:
{
   16018:	b508      	push	{r3, lr}
    regval = dw1000_read_reg(inst, RX_TTCKO_ID, 0, 3);
   1601a:	2303      	movs	r3, #3
   1601c:	2200      	movs	r2, #0
   1601e:	2114      	movs	r1, #20
   16020:	f7fe f868 	bl	140f4 <dw1000_read_reg>
    if (regval & B18_SIGN_EXTEND_TEST) {
   16024:	f410 2f80 	tst.w	r0, #262144	; 0x40000
   16028:	d004      	beq.n	16034 <dw1000_read_time_tracking_offset+0x1c>
        regval |= B18_SIGN_EXTEND_MASK;
   1602a:	ea6f 3080 	mvn.w	r0, r0, lsl #14
   1602e:	ea6f 3090 	mvn.w	r0, r0, lsr #14
}
   16032:	bd08      	pop	{r3, pc}
        regval &= RX_TTCKO_RXTOFS_MASK;
   16034:	f3c0 0012 	ubfx	r0, r0, #0, #19
   16038:	e7fb      	b.n	16032 <dw1000_read_time_tracking_offset+0x1a>

0001603a <dw1000_calc_clock_offset_ratio_ttco>:
{
   1603a:	b570      	push	{r4, r5, r6, lr}
    if (inst->uwb_dev.config.prf != DWT_PRF_16M) {
   1603c:	f890 350e 	ldrb.w	r3, [r0, #1294]	; 0x50e
   16040:	2b01      	cmp	r3, #1
   16042:	d012      	beq.n	1606a <dw1000_calc_clock_offset_ratio_ttco+0x30>
        denom = 0x01FC0000;
   16044:	f04f 76fe 	mov.w	r6, #33292288	; 0x1fc0000
    return DPL_FLOAT64_DIV(DPL_FLOAT64_I32_TO_F64(-ttcko), DPL_FLOAT64_I32_TO_F64(denom));
   16048:	4248      	negs	r0, r1
   1604a:	f00b f947 	bl	212dc <__aeabi_i2d>
   1604e:	4604      	mov	r4, r0
   16050:	460d      	mov	r5, r1
   16052:	4630      	mov	r0, r6
   16054:	f00b f942 	bl	212dc <__aeabi_i2d>
   16058:	4602      	mov	r2, r0
   1605a:	460b      	mov	r3, r1
   1605c:	4620      	mov	r0, r4
   1605e:	4629      	mov	r1, r5
   16060:	f00b fad0 	bl	21604 <__aeabi_ddiv>
}
   16064:	ec41 0b10 	vmov	d0, r0, r1
   16068:	bd70      	pop	{r4, r5, r6, pc}
    int32_t denom = 0x01F00000;
   1606a:	f04f 76f8 	mov.w	r6, #32505856	; 0x1f00000
   1606e:	e7eb      	b.n	16048 <dw1000_calc_clock_offset_ratio_ttco+0xe>

00016070 <dw1000_read_rxdiag>:
{
   16070:	b570      	push	{r4, r5, r6, lr}
   16072:	b082      	sub	sp, #8
   16074:	4605      	mov	r5, r0
   16076:	460c      	mov	r4, r1
    dw1000_read(inst, RX_TIME_ID, RX_TIME_FP_INDEX_OFFSET, (uint8_t*)&diag->rx_time, sizeof(diag->rx_time));
   16078:	2604      	movs	r6, #4
   1607a:	9600      	str	r6, [sp, #0]
   1607c:	1d8b      	adds	r3, r1, #6
   1607e:	2205      	movs	r2, #5
   16080:	2115      	movs	r1, #21
   16082:	f7fd ff6d 	bl	13f60 <dw1000_read>
    dw1000_read(inst, RX_FQUAL_ID, 0, (uint8_t*)&diag->rx_fqual, sizeof(diag->rx_fqual));
   16086:	2308      	movs	r3, #8
   16088:	9300      	str	r3, [sp, #0]
   1608a:	f104 030a 	add.w	r3, r4, #10
   1608e:	2200      	movs	r2, #0
   16090:	2112      	movs	r1, #18
   16092:	4628      	mov	r0, r5
   16094:	f7fd ff64 	bl	13f60 <dw1000_read>
    diag->pacc_cnt =  (dw1000_read_reg(inst, RX_FINFO_ID, 0, sizeof(uint32_t)) & RX_FINFO_RXPACC_MASK) >> RX_FINFO_RXPACC_SHIFT;
   16098:	4633      	mov	r3, r6
   1609a:	2200      	movs	r2, #0
   1609c:	2110      	movs	r1, #16
   1609e:	4628      	mov	r0, r5
   160a0:	f7fe f828 	bl	140f4 <dw1000_read_reg>
   160a4:	0d00      	lsrs	r0, r0, #20
   160a6:	8260      	strh	r0, [r4, #18]
}
   160a8:	b002      	add	sp, #8
   160aa:	bd70      	pop	{r4, r5, r6, pc}
   160ac:	0000      	movs	r0, r0
	...

000160b0 <dw1000_tasks_init>:
{
   160b0:	b530      	push	{r4, r5, lr}
   160b2:	b085      	sub	sp, #20
   160b4:	4604      	mov	r4, r0
    return os_eventq_inited((struct os_eventq *) evq);
   160b6:	303c      	adds	r0, #60	; 0x3c
   160b8:	f7f3 fa83 	bl	95c2 <os_eventq_inited>
    if (!dpl_eventq_inited(&inst->uwb_dev.eventq))
   160bc:	b1c0      	cbz	r0, 160f0 <dw1000_tasks_init+0x40>
    dw1000_phy_interrupt_mask(inst,          SYS_MASK_MCPLOCK | SYS_MASK_MRXDFR | SYS_MASK_MLDEERR | SYS_MASK_MTXFRB | SYS_MASK_MTXFRS | SYS_MASK_ALL_RX_TO   | SYS_MASK_ALL_RX_ERR | SYS_MASK_MTXBERR, false);
   160be:	4d18      	ldr	r5, [pc, #96]	; (16120 <dw1000_tasks_init+0x70>)
   160c0:	2200      	movs	r2, #0
   160c2:	4629      	mov	r1, r5
   160c4:	4620      	mov	r0, r4
   160c6:	f001 f94f 	bl	17368 <dw1000_phy_interrupt_mask>
    dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_SLP2INIT | SYS_STATUS_CPLOCK| SYS_STATUS_RXDFR | SYS_STATUS_LDEERR | SYS_STATUS_TXFRB | SYS_STATUS_TXFRS | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_TXBERR, sizeof(uint32_t));
   160ca:	2304      	movs	r3, #4
   160cc:	9302      	str	r3, [sp, #8]
   160ce:	a312      	add	r3, pc, #72	; (adr r3, 16118 <dw1000_tasks_init+0x68>)
   160d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   160d4:	e9cd 2300 	strd	r2, r3, [sp]
   160d8:	2200      	movs	r2, #0
   160da:	210f      	movs	r1, #15
   160dc:	4620      	mov	r0, r4
   160de:	f7fe f879 	bl	141d4 <dw1000_write_reg>
    dw1000_phy_interrupt_mask(inst,          SYS_MASK_MCPLOCK | SYS_MASK_MRXDFR | SYS_MASK_MLDEERR | SYS_MASK_MTXFRB | SYS_MASK_MTXFRS | SYS_MASK_ALL_RX_TO   | SYS_MASK_ALL_RX_ERR | SYS_MASK_MTXBERR, true);
   160e2:	2201      	movs	r2, #1
   160e4:	4629      	mov	r1, r5
   160e6:	4620      	mov	r0, r4
   160e8:	f001 f93e 	bl	17368 <dw1000_phy_interrupt_mask>
}
   160ec:	b005      	add	sp, #20
   160ee:	bd30      	pop	{r4, r5, pc}
        uwb_task_init(&inst->uwb_dev, dw1000_interrupt_ev_cb);
   160f0:	490c      	ldr	r1, [pc, #48]	; (16124 <dw1000_tasks_init+0x74>)
   160f2:	4620      	mov	r0, r4
   160f4:	f7f2 fd1c 	bl	8b30 <uwb_task_init>
        hal_gpio_irq_init(inst->irq_pin, dw1000_irq, inst, HAL_GPIO_TRIG_RISING, HAL_GPIO_PULL_DOWN);
   160f8:	2302      	movs	r3, #2
   160fa:	9300      	str	r3, [sp, #0]
   160fc:	2301      	movs	r3, #1
   160fe:	4622      	mov	r2, r4
   16100:	4909      	ldr	r1, [pc, #36]	; (16128 <dw1000_tasks_init+0x78>)
   16102:	f894 055d 	ldrb.w	r0, [r4, #1373]	; 0x55d
   16106:	f7f2 feb1 	bl	8e6c <hal_gpio_irq_init>
        hal_gpio_irq_enable(inst->irq_pin);
   1610a:	f894 055d 	ldrb.w	r0, [r4, #1373]	; 0x55d
   1610e:	f7f2 fee9 	bl	8ee4 <hal_gpio_irq_enable>
   16112:	e7d4      	b.n	160be <dw1000_tasks_init+0xe>
   16114:	f3af 8000 	nop.w
   16118:	34b7b092 	.word	0x34b7b092
   1611c:	00000000 	.word	0x00000000
   16120:	3437b092 	.word	0x3437b092
   16124:	000161a9 	.word	0x000161a9
   16128:	00015111 	.word	0x00015111

0001612c <dw1000_mac_init>:
{
   1612c:	b530      	push	{r4, r5, lr}
   1612e:	b083      	sub	sp, #12
   16130:	4604      	mov	r4, r0
    dw1000_mac_config(inst, config);
   16132:	f7ff fcfd 	bl	15b30 <dw1000_mac_config>
    dw1000_tasks_init(inst);
   16136:	4620      	mov	r0, r4
   16138:	f7ff ffba 	bl	160b0 <dw1000_tasks_init>
        int rc = stats_init(
   1613c:	f204 55b4 	addw	r5, r4, #1460	; 0x5b4
   16140:	220a      	movs	r2, #10
   16142:	9200      	str	r2, [sp, #0]
   16144:	4b0d      	ldr	r3, [pc, #52]	; (1617c <dw1000_mac_init+0x50>)
   16146:	2104      	movs	r1, #4
   16148:	4628      	mov	r0, r5
   1614a:	f7fa ff51 	bl	10ff0 <stats_init>
        assert(rc == 0);
   1614e:	b940      	cbnz	r0, 16162 <dw1000_mac_init+0x36>
        rc = stats_register("mac", STATS_HDR(inst->stat));
   16150:	4629      	mov	r1, r5
   16152:	480b      	ldr	r0, [pc, #44]	; (16180 <dw1000_mac_init+0x54>)
   16154:	f7fa ffd6 	bl	11104 <stats_register>
        assert(rc == 0);
   16158:	b948      	cbnz	r0, 1616e <dw1000_mac_init+0x42>
}
   1615a:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1615e:	b003      	add	sp, #12
   16160:	bd30      	pop	{r4, r5, pc}
        assert(rc == 0);
   16162:	2300      	movs	r3, #0
   16164:	461a      	mov	r2, r3
   16166:	4619      	mov	r1, r3
   16168:	4618      	mov	r0, r3
   1616a:	f7f2 fefb 	bl	8f64 <__assert_func>
        assert(rc == 0);
   1616e:	2300      	movs	r3, #0
   16170:	461a      	mov	r2, r3
   16172:	4619      	mov	r1, r3
   16174:	4618      	mov	r0, r3
   16176:	f7f2 fef5 	bl	8f64 <__assert_func>
   1617a:	bf00      	nop
   1617c:	000241e8 	.word	0x000241e8
   16180:	0002412c 	.word	0x0002412c

00016184 <dw1000_ic_and_host_ptrs_equal>:
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return uint8_t 1 = host and ic pointers match, 0 otherwise
 */
uint8_t
dw1000_ic_and_host_ptrs_equal(dw1000_dev_instance_t * inst)
{
   16184:	b508      	push	{r3, lr}
    uint8_t b = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t));
   16186:	2301      	movs	r3, #1
   16188:	2203      	movs	r2, #3
   1618a:	210f      	movs	r1, #15
   1618c:	f7fd ffb2 	bl	140f4 <dw1000_read_reg>
   16190:	b2c0      	uxtb	r0, r0
    /* Check where the receiver is at, and if it's in the same buffer as the host */
    return (uint8_t)((b & (SYS_STATUS_ICRBP >> 24)) == ((b & (SYS_STATUS_HSRBP >> 24)) << 1));
   16192:	ea80 0040 	eor.w	r0, r0, r0, lsl #1
   16196:	09c0      	lsrs	r0, r0, #7
   16198:	f080 0001 	eor.w	r0, r0, #1
}
   1619c:	f000 0001 	and.w	r0, r0, #1
   161a0:	bd08      	pop	{r3, pc}
   161a2:	0000      	movs	r0, r0
   161a4:	0000      	movs	r0, r0
	...

000161a8 <dw1000_interrupt_ev_cb>:
 * @return void
 *
 */
static void
dw1000_interrupt_ev_cb(struct dpl_event *ev)
{
   161a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   161ac:	b085      	sub	sp, #20
   161ae:	4606      	mov	r6, r0
    return ev->ev.ev_arg;
   161b0:	6884      	ldr	r4, [r0, #8]
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   161b2:	f104 0734 	add.w	r7, r4, #52	; 0x34
   161b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   161ba:	4638      	mov	r0, r7
   161bc:	f7f3 fe24 	bl	9e08 <os_sem_pend>
    uint16_t finfo;
    struct uwb_mac_interface * cbs = NULL;
    dw1000_dev_instance_t * inst = dpl_event_get_arg(ev);
    dpl_error_t err = dpl_sem_pend(&inst->uwb_dev.irq_sem,  DPL_TIMEOUT_NEVER);
    if (err != DPL_OK) {
   161c0:	b188      	cbz	r0, 161e6 <dw1000_interrupt_ev_cb+0x3e>
        inst->uwb_dev.status.sem_error = 1;
   161c2:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   161c6:	f043 0304 	orr.w	r3, r3, #4
   161ca:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
    /* Check for possibly missed interrupts occuring whilst we were looking at this one
     * NOTE: Because the interrupt is edge based we will only register an event if the irq pin
     * goes low and then comes back up. If the pin is high now and no event is queued just after
     * swapping rx-buffers this means we didn't have time to finish reading the data
     * from the previous irq until a new one arrived -> queue another irq event for the task */
    if (hal_gpio_read(inst->irq_pin) && !dpl_event_is_queued(ev)) {
   161ce:	f894 055d 	ldrb.w	r0, [r4, #1373]	; 0x55d
   161d2:	f7f2 fe24 	bl	8e1e <hal_gpio_read>
   161d6:	b118      	cbz	r0, 161e0 <dw1000_interrupt_ev_cb+0x38>
    return ev->ev.ev_queued;
   161d8:	7833      	ldrb	r3, [r6, #0]
   161da:	2b00      	cmp	r3, #0
   161dc:	f000 84a9 	beq.w	16b32 <dw1000_interrupt_ev_cb+0x98a>
#if MYNEWT_VAL(DW1000_SYS_STATUS_BACKTRACE_LEN)
    if(!inst->sys_status_bt_lock) {
        DW1000_SYS_STATUS_BT_PTR(inst).utime_end = dpl_cputime_get32();
    }
#endif
}
   161e0:	b005      	add	sp, #20
   161e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        inst->sys_status = dw1000_read_reg(inst, SYS_STATUS_ID, 0, sizeof(uint32_t));
   161e6:	2304      	movs	r3, #4
   161e8:	2200      	movs	r2, #0
   161ea:	210f      	movs	r1, #15
   161ec:	4620      	mov	r0, r4
   161ee:	f7fd ff81 	bl	140f4 <dw1000_read_reg>
   161f2:	f8c4 058c 	str.w	r0, [r4, #1420]	; 0x58c
        if (!(inst->sys_status & (SYS_MASK_MCPLOCK | SYS_MASK_MRXDFR | SYS_MASK_MLDEERR | SYS_MASK_MTXFRB | SYS_MASK_MTXFRS | SYS_MASK_ALL_RX_TO | SYS_MASK_ALL_RX_ERR | SYS_MASK_MTXBERR))) {
   161f6:	4bd9      	ldr	r3, [pc, #868]	; (1655c <dw1000_interrupt_ev_cb+0x3b4>)
   161f8:	4003      	ands	r3, r0
   161fa:	2b00      	cmp	r3, #0
   161fc:	f000 8148 	beq.w	16490 <dw1000_interrupt_ev_cb+0x2e8>
    inst->uwb_dev.status.rx_error = (inst->sys_status & SYS_STATUS_ALL_RX_ERR) !=0;
   16200:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   16204:	4ad6      	ldr	r2, [pc, #856]	; (16560 <dw1000_interrupt_ev_cb+0x3b8>)
   16206:	401a      	ands	r2, r3
   16208:	3a00      	subs	r2, #0
   1620a:	bf18      	it	ne
   1620c:	2201      	movne	r2, #1
   1620e:	f894 1508 	ldrb.w	r1, [r4, #1288]	; 0x508
   16212:	f362 1186 	bfi	r1, r2, #6, #1
   16216:	f884 1508 	strb.w	r1, [r4, #1288]	; 0x508
    inst->uwb_dev.status.rx_error |= (inst->sys_status_hi & (SYS_STATUS_RXRSCS>>32)) != 0;
   1621a:	f894 1590 	ldrb.w	r1, [r4, #1424]	; 0x590
   1621e:	f001 0001 	and.w	r0, r1, #1
   16222:	4302      	orrs	r2, r0
   16224:	f894 0508 	ldrb.w	r0, [r4, #1288]	; 0x508
   16228:	f362 1086 	bfi	r0, r2, #6, #1
   1622c:	f884 0508 	strb.w	r0, [r4, #1288]	; 0x508
    inst->uwb_dev.status.rx_autoframefilt_rej = (inst->sys_status & SYS_STATUS_AFFREJ) !=0;
   16230:	f3c3 7040 	ubfx	r0, r3, #29, #1
   16234:	f894 2509 	ldrb.w	r2, [r4, #1289]	; 0x509
   16238:	f360 0200 	bfi	r2, r0, #0, #1
   1623c:	f884 2509 	strb.w	r2, [r4, #1289]	; 0x509
    inst->uwb_dev.status.rx_timeout_error = (inst->sys_status & SYS_STATUS_ALL_RX_TO) !=0;
   16240:	f413 1f08 	tst.w	r3, #2228224	; 0x220000
   16244:	bf14      	ite	ne
   16246:	2001      	movne	r0, #1
   16248:	2000      	moveq	r0, #0
   1624a:	f894 2508 	ldrb.w	r2, [r4, #1288]	; 0x508
   1624e:	f360 12c7 	bfi	r2, r0, #7, #1
   16252:	f884 2508 	strb.w	r2, [r4, #1288]	; 0x508
    inst->uwb_dev.status.lde_error = (inst->sys_status & SYS_STATUS_LDEDONE) == 0;
   16256:	f413 6f80 	tst.w	r3, #1024	; 0x400
   1625a:	bf0c      	ite	eq
   1625c:	2001      	moveq	r0, #1
   1625e:	2000      	movne	r0, #0
   16260:	f894 2509 	ldrb.w	r2, [r4, #1289]	; 0x509
   16264:	f360 0282 	bfi	r2, r0, #2, #1
   16268:	f884 2509 	strb.w	r2, [r4, #1289]	; 0x509
    inst->uwb_dev.status.overrun_error = (inst->sys_status & SYS_STATUS_RXOVRR) != 0;
   1626c:	f3c3 5000 	ubfx	r0, r3, #20, #1
   16270:	f894 250a 	ldrb.w	r2, [r4, #1290]	; 0x50a
   16274:	f360 0282 	bfi	r2, r0, #2, #1
   16278:	f884 250a 	strb.w	r2, [r4, #1290]	; 0x50a
    inst->uwb_dev.status.txbuf_error = (inst->sys_status & SYS_STATUS_TXBERR) != 0;
   1627c:	f3c3 7000 	ubfx	r0, r3, #28, #1
   16280:	f894 2508 	ldrb.w	r2, [r4, #1288]	; 0x508
   16284:	f360 1245 	bfi	r2, r0, #5, #1
   16288:	f884 2508 	strb.w	r2, [r4, #1288]	; 0x508
    inst->uwb_dev.status.autoack_triggered = (inst->sys_status & SYS_STATUS_AAT) != 0;
   1628c:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   16290:	f894 2509 	ldrb.w	r2, [r4, #1289]	; 0x509
   16294:	f360 1286 	bfi	r2, r0, #6, #1
   16298:	f884 2509 	strb.w	r2, [r4, #1289]	; 0x509
    inst->uwb_dev.status.rx_prej = (inst->sys_status_hi & (SYS_STATUS_RXPREJ>>32)) != 0;
   1629c:	f3c1 0140 	ubfx	r1, r1, #1, #1
   162a0:	b2d2      	uxtb	r2, r2
   162a2:	f361 0241 	bfi	r2, r1, #1, #1
   162a6:	f884 2509 	strb.w	r2, [r4, #1289]	; 0x509
   162aa:	f8b4 2566 	ldrh.w	r2, [r4, #1382]	; 0x566
    if(dpl_sem_get_count(&inst->tx_sem) == 0 && !(
   162ae:	b922      	cbnz	r2, 162ba <dw1000_interrupt_ev_cb+0x112>
   162b0:	f003 0390 	and.w	r3, r3, #144	; 0x90
   162b4:	2b10      	cmp	r3, #16
   162b6:	f040 80f4 	bne.w	164a2 <dw1000_interrupt_ev_cb+0x2fa>
    if((inst->sys_status & SYS_STATUS_RXFCG)){
   162ba:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   162be:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   162c2:	f000 80ac 	beq.w	1641e <dw1000_interrupt_ev_cb+0x276>
        MAC_STATS_INC(DFR_cnt);
   162c6:	f8d4 35d0 	ldr.w	r3, [r4, #1488]	; 0x5d0
   162ca:	3301      	adds	r3, #1
   162cc:	f8c4 35d0 	str.w	r3, [r4, #1488]	; 0x5d0
        if (inst->uwb_dev.status.overrun_error){
   162d0:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   162d4:	f013 0f04 	tst.w	r3, #4
   162d8:	f040 80f0 	bne.w	164bc <dw1000_interrupt_ev_cb+0x314>
        if (inst->uwb_dev.config.rxauto_enable == 0 && inst->uwb_dev.config.dblbuffon_enabled) {
   162dc:	f8b4 352c 	ldrh.w	r3, [r4, #1324]	; 0x52c
   162e0:	f403 7388 	and.w	r3, r3, #272	; 0x110
   162e4:	2b10      	cmp	r3, #16
   162e6:	f000 8128 	beq.w	1653a <dw1000_interrupt_ev_cb+0x392>
        finfo = dw1000_read_reg(inst, RX_FINFO_ID, RX_FINFO_OFFSET, sizeof(uint16_t));
   162ea:	2302      	movs	r3, #2
   162ec:	2200      	movs	r2, #0
   162ee:	2110      	movs	r1, #16
   162f0:	4620      	mov	r0, r4
   162f2:	f7fd feff 	bl	140f4 <dw1000_read_reg>
        inst->uwb_dev.frame_len = (finfo & RX_FINFO_RXFL_MASK_1023);
   162f6:	f3c0 0009 	ubfx	r0, r0, #0, #10
   162fa:	f8a4 04e2 	strh.w	r0, [r4, #1250]	; 0x4e2
        if (inst->uwb_dev.frame_len) inst->uwb_dev.frame_len -= 2;
   162fe:	b110      	cbz	r0, 16306 <dw1000_interrupt_ev_cb+0x15e>
   16300:	3802      	subs	r0, #2
   16302:	f8a4 04e2 	strh.w	r0, [r4, #1250]	; 0x4e2
                       (inst->uwb_dev.frame_len < inst->uwb_dev.rxbuf_size) ?
   16306:	f8b4 2504 	ldrh.w	r2, [r4, #1284]	; 0x504
   1630a:	f8b4 34e2 	ldrh.w	r3, [r4, #1250]	; 0x4e2
        dw1000_read_rx(inst, inst->uwb_dev.rxbuf, 0,
   1630e:	4293      	cmp	r3, r2
   16310:	bf28      	it	cs
   16312:	4613      	movcs	r3, r2
   16314:	2200      	movs	r2, #0
   16316:	f8d4 14fc 	ldr.w	r1, [r4, #1276]	; 0x4fc
   1631a:	4620      	mov	r0, r4
   1631c:	f7fe ff0a 	bl	15134 <dw1000_read_rx>
        inst->uwb_dev.fctrl = ((uint16_t)inst->uwb_dev.rxbuf[1]<<8) | inst->uwb_dev.rxbuf[0];
   16320:	f8d4 24fc 	ldr.w	r2, [r4, #1276]	; 0x4fc
   16324:	7851      	ldrb	r1, [r2, #1]
   16326:	7813      	ldrb	r3, [r2, #0]
   16328:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   1632c:	f8a4 34e0 	strh.w	r3, [r4, #1248]	; 0x4e0
        if (inst->uwb_dev.status.lde_error) // retest lde_error condition
   16330:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   16334:	f013 0f04 	tst.w	r3, #4
   16338:	f040 8127 	bne.w	1658a <dw1000_interrupt_ev_cb+0x3e2>
        if (inst->uwb_dev.status.lde_error) // LDE error or LDE late
   1633c:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   16340:	f013 0f04 	tst.w	r3, #4
   16344:	d004      	beq.n	16350 <dw1000_interrupt_ev_cb+0x1a8>
            MAC_STATS_INC(LDE_err);
   16346:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
   1634a:	3301      	adds	r3, #1
   1634c:	f8c4 35e0 	str.w	r3, [r4, #1504]	; 0x5e0
 *
 * @return time
 */

inline uint64_t dw1000_read_rxtime(struct _dw1000_dev_instance_t * inst){
    uint64_t time = (uint64_t)  dw1000_read_reg(inst, RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET, RX_TIME_RX_STAMP_LEN) & 0x0FFFFFFFFFFULL;
   16350:	2305      	movs	r3, #5
   16352:	2200      	movs	r2, #0
   16354:	2115      	movs	r1, #21
   16356:	4620      	mov	r0, r4
   16358:	f7fd fecc 	bl	140f4 <dw1000_read_reg>
   1635c:	b2cb      	uxtb	r3, r1
        inst->uwb_dev.rxtimestamp = dw1000_read_rxtime(inst);
   1635e:	f8c4 04e8 	str.w	r0, [r4, #1256]	; 0x4e8
   16362:	f8c4 34ec 	str.w	r3, [r4, #1260]	; 0x4ec
        if (inst->control.abs_timeout) {
   16366:	f894 15b1 	ldrb.w	r1, [r4, #1457]	; 0x5b1
   1636a:	f011 0f08 	tst.w	r1, #8
   1636e:	f040 811e 	bne.w	165ae <dw1000_interrupt_ev_cb+0x406>
        if (inst->uwb_dev.status.autoack_triggered) {
   16372:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   16376:	f013 0f40 	tst.w	r3, #64	; 0x40
   1637a:	d01c      	beq.n	163b6 <dw1000_interrupt_ev_cb+0x20e>
            if ((inst->uwb_dev.fctrl & UWB_FCTRL_ACK_REQUESTED) == 0){
   1637c:	f8b4 34e0 	ldrh.w	r3, [r4, #1248]	; 0x4e0
   16380:	f013 0f20 	tst.w	r3, #32
   16384:	f040 8118 	bne.w	165b8 <dw1000_interrupt_ev_cb+0x410>
                dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_AAT, sizeof(uint8_t));
   16388:	2301      	movs	r3, #1
   1638a:	9302      	str	r3, [sp, #8]
   1638c:	2208      	movs	r2, #8
   1638e:	2300      	movs	r3, #0
   16390:	e9cd 2300 	strd	r2, r3, [sp]
   16394:	2200      	movs	r2, #0
   16396:	210f      	movs	r1, #15
   16398:	4620      	mov	r0, r4
   1639a:	f7fd ff1b 	bl	141d4 <dw1000_write_reg>
                inst->sys_status &= ~SYS_STATUS_AAT;
   1639e:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   163a2:	f023 0308 	bic.w	r3, r3, #8
   163a6:	f8c4 358c 	str.w	r3, [r4, #1420]	; 0x58c
                inst->uwb_dev.status.autoack_triggered = 0;
   163aa:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   163ae:	f36f 1386 	bfc	r3, #6, #1
   163b2:	f884 3509 	strb.w	r3, [r4, #1289]	; 0x509
        if(inst->uwb_dev.config.rxdiag_enable)
   163b6:	f894 352c 	ldrb.w	r3, [r4, #1324]	; 0x52c
   163ba:	f013 0f40 	tst.w	r3, #64	; 0x40
   163be:	f040 810a 	bne.w	165d6 <dw1000_interrupt_ev_cb+0x42e>
        if (inst->uwb_dev.config.dblbuffon_enabled) {
   163c2:	f894 352c 	ldrb.w	r3, [r4, #1324]	; 0x52c
   163c6:	f013 0f10 	tst.w	r3, #16
   163ca:	f000 8191 	beq.w	166f0 <dw1000_interrupt_ev_cb+0x548>
            if (inst->uwb_dev.config.rxttcko_enable) {
   163ce:	f013 0f80 	tst.w	r3, #128	; 0x80
   163d2:	f040 8106 	bne.w	165e2 <dw1000_interrupt_ev_cb+0x43a>
            inst->uwb_dev.status.overrun_error = dw1000_checkoverrun(inst);
   163d6:	4620      	mov	r0, r4
   163d8:	f7fe fe91 	bl	150fe <dw1000_checkoverrun>
   163dc:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   163e0:	f360 0382 	bfi	r3, r0, #2, #1
   163e4:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
            if (inst->uwb_dev.status.overrun_error == 0) {
   163e8:	b2db      	uxtb	r3, r3
   163ea:	f013 0f04 	tst.w	r3, #4
   163ee:	f040 813f 	bne.w	16670 <dw1000_interrupt_ev_cb+0x4c8>
                if (inst->uwb_dev.config.rxauto_enable) {
   163f2:	f894 352d 	ldrb.w	r3, [r4, #1325]	; 0x52d
   163f6:	f013 0f01 	tst.w	r3, #1
   163fa:	f040 80f8 	bne.w	165ee <dw1000_interrupt_ev_cb+0x446>
                dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0b1, sizeof(uint8_t));
   163fe:	2301      	movs	r3, #1
   16400:	9302      	str	r3, [sp, #8]
   16402:	2201      	movs	r2, #1
   16404:	2300      	movs	r3, #0
   16406:	e9cd 2300 	strd	r2, r3, [sp]
   1640a:	2203      	movs	r2, #3
   1640c:	210d      	movs	r1, #13
   1640e:	4620      	mov	r0, r4
   16410:	f7fd fee0 	bl	141d4 <dw1000_write_reg>
        if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
   16414:	f8d4 5530 	ldr.w	r5, [r4, #1328]	; 0x530
   16418:	2d00      	cmp	r5, #0
   1641a:	f040 819c 	bne.w	16756 <dw1000_interrupt_ev_cb+0x5ae>
    if(inst->sys_status & SYS_STATUS_TXFRB) {
   1641e:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   16422:	f013 0f10 	tst.w	r3, #16
   16426:	f040 819d 	bne.w	16764 <dw1000_interrupt_ev_cb+0x5bc>
    if(inst->sys_status & SYS_STATUS_TXFRS) {
   1642a:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   1642e:	f013 0f80 	tst.w	r3, #128	; 0x80
   16432:	f040 81b3 	bne.w	1679c <dw1000_interrupt_ev_cb+0x5f4>
    if(inst->uwb_dev.status.txbuf_error){
   16436:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   1643a:	f013 0f20 	tst.w	r3, #32
   1643e:	f040 81f8 	bne.w	16832 <dw1000_interrupt_ev_cb+0x68a>
    if(inst->sys_status & SYS_STATUS_LDEERR){
   16442:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   16446:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   1644a:	f040 8215 	bne.w	16878 <dw1000_interrupt_ev_cb+0x6d0>
    if(inst->uwb_dev.status.rx_timeout_error){
   1644e:	f994 3508 	ldrsb.w	r3, [r4, #1288]	; 0x508
   16452:	2b00      	cmp	r3, #0
   16454:	f2c0 8222 	blt.w	1689c <dw1000_interrupt_ev_cb+0x6f4>
    if(inst->uwb_dev.status.rx_error) {
   16458:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   1645c:	f013 0f40 	tst.w	r3, #64	; 0x40
   16460:	f040 828b 	bne.w	1697a <dw1000_interrupt_ev_cb+0x7d2>
    if(inst->sys_status & SYS_STATUS_SLP2INIT){
   16464:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   16468:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   1646c:	f040 8309 	bne.w	16a82 <dw1000_interrupt_ev_cb+0x8da>
    if(inst->sys_status & SYS_STATUS_CLKPLL_LL){
   16470:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   16474:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   16478:	f040 830f 	bne.w	16a9a <dw1000_interrupt_ev_cb+0x8f2>
    if(inst->sys_status & SYS_MASK_MCPLOCK){
   1647c:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   16480:	f013 0f02 	tst.w	r3, #2
   16484:	f040 831b 	bne.w	16abe <dw1000_interrupt_ev_cb+0x916>
    return (dpl_error_t)os_sem_release(&sem->sem);
   16488:	4638      	mov	r0, r7
   1648a:	f7f3 fc8b 	bl	9da4 <os_sem_release>
   1648e:	e69e      	b.n	161ce <dw1000_interrupt_ev_cb+0x26>
            inst->sys_status_hi = dw1000_read_reg(inst, SYS_STATUS_ID, 4, sizeof(uint8_t));
   16490:	2301      	movs	r3, #1
   16492:	2204      	movs	r2, #4
   16494:	210f      	movs	r1, #15
   16496:	4620      	mov	r0, r4
   16498:	f7fd fe2c 	bl	140f4 <dw1000_read_reg>
   1649c:	f884 0590 	strb.w	r0, [r4, #1424]	; 0x590
   164a0:	e6ae      	b.n	16200 <dw1000_interrupt_ev_cb+0x58>
   164a2:	f504 60ac 	add.w	r0, r4, #1376	; 0x560
   164a6:	f7f3 fc7d 	bl	9da4 <os_sem_release>
        assert(err == DPL_OK);
   164aa:	2800      	cmp	r0, #0
   164ac:	f43f af05 	beq.w	162ba <dw1000_interrupt_ev_cb+0x112>
   164b0:	2300      	movs	r3, #0
   164b2:	461a      	mov	r2, r3
   164b4:	4619      	mov	r1, r3
   164b6:	4618      	mov	r0, r3
   164b8:	f7f2 fd54 	bl	8f64 <__assert_func>
            MAC_STATS_INC(ROV_err);
   164bc:	f8d4 35d8 	ldr.w	r3, [r4, #1496]	; 0x5d8
   164c0:	3301      	adds	r3, #1
   164c2:	f8c4 35d8 	str.w	r3, [r4, #1496]	; 0x5d8
            dw1000_write_reg(inst, SYS_STATUS_ID, 0, (SYS_STATUS_RXOVRR |SYS_STATUS_LDEDONE | SYS_STATUS_RXDFR | SYS_STATUS_RXFCG | SYS_STATUS_RXFCE | SYS_STATUS_RXDFR), sizeof(uint32_t));
   164c6:	2304      	movs	r3, #4
   164c8:	9302      	str	r3, [sp, #8]
   164ca:	4a26      	ldr	r2, [pc, #152]	; (16564 <dw1000_interrupt_ev_cb+0x3bc>)
   164cc:	2300      	movs	r3, #0
   164ce:	e9cd 2300 	strd	r2, r3, [sp]
   164d2:	2200      	movs	r2, #0
   164d4:	210f      	movs	r1, #15
   164d6:	4620      	mov	r0, r4
   164d8:	f7fd fe7c 	bl	141d4 <dw1000_write_reg>
            dw1000_phy_forcetrxoff(inst);
   164dc:	4620      	mov	r0, r4
   164de:	f000 feb3 	bl	17248 <dw1000_phy_forcetrxoff>
            dw1000_phy_rx_reset(inst);
   164e2:	4620      	mov	r0, r4
   164e4:	f000 fe7b 	bl	171de <dw1000_phy_rx_reset>
    inst->control.start_rx_syncbuf_enabled = 1;
   164e8:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
   164ec:	f043 0310 	orr.w	r3, r3, #16
   164f0:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    buff = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t)); // Read 1 byte at offset 3 to get the 4th byte out of 5
   164f4:	2301      	movs	r3, #1
   164f6:	2203      	movs	r2, #3
   164f8:	210f      	movs	r1, #15
   164fa:	4620      	mov	r0, r4
   164fc:	f7fd fdfa 	bl	140f4 <dw1000_read_reg>
   16500:	b2c0      	uxtb	r0, r0
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=         // IC side Receive Buffer Pointer
   16502:	ea80 0040 	eor.w	r0, r0, r0, lsl #1
   16506:	f010 0f80 	tst.w	r0, #128	; 0x80
   1650a:	d10a      	bne.n	16522 <dw1000_interrupt_ev_cb+0x37a>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
   1650c:	2201      	movs	r2, #1
   1650e:	9202      	str	r2, [sp, #8]
   16510:	2001      	movs	r0, #1
   16512:	2100      	movs	r1, #0
   16514:	e9cd 0100 	strd	r0, r1, [sp]
   16518:	210d      	movs	r1, #13
   1651a:	4620      	mov	r0, r4
   1651c:	f7fd fe5a 	bl	141d4 <dw1000_write_reg>
            goto early_exit;
   16520:	e7b2      	b.n	16488 <dw1000_interrupt_ev_cb+0x2e0>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 0x01, sizeof(uint8_t)); // We need to swap RX buffer status reg (write one to toggle internally)
   16522:	2301      	movs	r3, #1
   16524:	9302      	str	r3, [sp, #8]
   16526:	2201      	movs	r2, #1
   16528:	2300      	movs	r3, #0
   1652a:	e9cd 2300 	strd	r2, r3, [sp]
   1652e:	2203      	movs	r2, #3
   16530:	210d      	movs	r1, #13
   16532:	4620      	mov	r0, r4
   16534:	f7fd fe4e 	bl	141d4 <dw1000_write_reg>
   16538:	e7e8      	b.n	1650c <dw1000_interrupt_ev_cb+0x364>
            if (inst->control.rxauto_disable == false && !inst->uwb_dev.status.autoack_triggered) {
   1653a:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   1653e:	f013 0f04 	tst.w	r3, #4
   16542:	d104      	bne.n	1654e <dw1000_interrupt_ev_cb+0x3a6>
   16544:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   16548:	f013 0f40 	tst.w	r3, #64	; 0x40
   1654c:	d00c      	beq.n	16568 <dw1000_interrupt_ev_cb+0x3c0>
            inst->control.rxauto_disable = false;
   1654e:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   16552:	f36f 0382 	bfc	r3, #2, #1
   16556:	f884 35b1 	strb.w	r3, [r4, #1457]	; 0x5b1
   1655a:	e6c6      	b.n	162ea <dw1000_interrupt_ev_cb+0x142>
   1655c:	3437b092 	.word	0x3437b092
   16560:	24119000 	.word	0x24119000
   16564:	0010e400 	.word	0x0010e400
                dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
   16568:	2201      	movs	r2, #1
   1656a:	9202      	str	r2, [sp, #8]
   1656c:	2001      	movs	r0, #1
   1656e:	2100      	movs	r1, #0
   16570:	e9cd 0100 	strd	r0, r1, [sp]
   16574:	210d      	movs	r1, #13
   16576:	4620      	mov	r0, r4
   16578:	f7fd fe2c 	bl	141d4 <dw1000_write_reg>
                inst->uwb_dev.status.rx_restarted = 1;
   1657c:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   16580:	f043 0308 	orr.w	r3, r3, #8
   16584:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
   16588:	e7e1      	b.n	1654e <dw1000_interrupt_ev_cb+0x3a6>
            inst->uwb_dev.status.lde_error = (dw1000_read_reg(inst, SYS_STATUS_ID, 1, sizeof(uint8_t))  & (SYS_STATUS_LDEDONE >> 8)) == 0;
   1658a:	2301      	movs	r3, #1
   1658c:	461a      	mov	r2, r3
   1658e:	210f      	movs	r1, #15
   16590:	4620      	mov	r0, r4
   16592:	f7fd fdaf 	bl	140f4 <dw1000_read_reg>
   16596:	f010 0f04 	tst.w	r0, #4
   1659a:	bf0c      	ite	eq
   1659c:	2201      	moveq	r2, #1
   1659e:	2200      	movne	r2, #0
   165a0:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   165a4:	f362 0382 	bfi	r3, r2, #2, #1
   165a8:	f884 3509 	strb.w	r3, [r4, #1289]	; 0x509
   165ac:	e6c6      	b.n	1633c <dw1000_interrupt_ev_cb+0x194>
            update_rx_window_timeout(inst, inst->uwb_dev.rxtimestamp);
   165ae:	4602      	mov	r2, r0
   165b0:	4620      	mov	r0, r4
   165b2:	f7ff f8b5 	bl	15720 <update_rx_window_timeout>
   165b6:	e6dc      	b.n	16372 <dw1000_interrupt_ev_cb+0x1ca>
                dw1000_write_reg(inst, SYS_STATUS_ID, 1, (inst->sys_status&(SYS_STATUS_LDEDONE | SYS_STATUS_RXDFR | SYS_STATUS_RXFCG | SYS_STATUS_RXFCE | SYS_STATUS_RXDFR))>>8, sizeof(uint8_t));
   165b8:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   165bc:	0a1b      	lsrs	r3, r3, #8
   165be:	2201      	movs	r2, #1
   165c0:	9202      	str	r2, [sp, #8]
   165c2:	f003 03e4 	and.w	r3, r3, #228	; 0xe4
   165c6:	9300      	str	r3, [sp, #0]
   165c8:	2300      	movs	r3, #0
   165ca:	9301      	str	r3, [sp, #4]
   165cc:	210f      	movs	r1, #15
   165ce:	4620      	mov	r0, r4
   165d0:	f7fd fe00 	bl	141d4 <dw1000_write_reg>
   165d4:	e6ef      	b.n	163b6 <dw1000_interrupt_ev_cb+0x20e>
            dw1000_read_rxdiag(inst, &inst->rxdiag);
   165d6:	f204 519c 	addw	r1, r4, #1436	; 0x59c
   165da:	4620      	mov	r0, r4
   165dc:	f7ff fd48 	bl	16070 <dw1000_read_rxdiag>
   165e0:	e6ef      	b.n	163c2 <dw1000_interrupt_ev_cb+0x21a>
                inst->uwb_dev.rxttcko = dw1000_read_time_tracking_offset(inst);
   165e2:	4620      	mov	r0, r4
   165e4:	f7ff fd18 	bl	16018 <dw1000_read_time_tracking_offset>
   165e8:	f8c4 04f4 	str.w	r0, [r4, #1268]	; 0x4f4
   165ec:	e6f3      	b.n	163d6 <dw1000_interrupt_ev_cb+0x22e>
                    if (dw1000_ic_and_host_ptrs_equal(inst)) {
   165ee:	4620      	mov	r0, r4
   165f0:	f7ff fdc8 	bl	16184 <dw1000_ic_and_host_ptrs_equal>
   165f4:	b368      	cbz	r0, 16652 <dw1000_interrupt_ev_cb+0x4aa>
                        uint8_t mask = dw1000_read_reg(inst, SYS_MASK_ID, 1 , sizeof(uint8_t));
   165f6:	2301      	movs	r3, #1
   165f8:	461a      	mov	r2, r3
   165fa:	210e      	movs	r1, #14
   165fc:	4620      	mov	r0, r4
   165fe:	f7fd fd79 	bl	140f4 <dw1000_read_reg>
   16602:	4680      	mov	r8, r0
                        dw1000_write_reg(inst, SYS_MASK_ID, 1, 0, sizeof(uint8_t));
   16604:	2501      	movs	r5, #1
   16606:	9502      	str	r5, [sp, #8]
   16608:	2200      	movs	r2, #0
   1660a:	2300      	movs	r3, #0
   1660c:	e9cd 2300 	strd	r2, r3, [sp]
   16610:	462a      	mov	r2, r5
   16612:	210e      	movs	r1, #14
   16614:	4620      	mov	r0, r4
   16616:	f7fd fddd 	bl	141d4 <dw1000_write_reg>
                        dw1000_write_reg(inst, SYS_STATUS_ID, 1, (inst->sys_status&(SYS_STATUS_LDEDONE | SYS_STATUS_RXDFR | SYS_STATUS_RXFCG | SYS_STATUS_RXFCE | SYS_STATUS_RXDFR))>>8, sizeof(uint8_t));
   1661a:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   1661e:	0a1b      	lsrs	r3, r3, #8
   16620:	9502      	str	r5, [sp, #8]
   16622:	f003 03e4 	and.w	r3, r3, #228	; 0xe4
   16626:	f04f 0900 	mov.w	r9, #0
   1662a:	9300      	str	r3, [sp, #0]
   1662c:	f8cd 9004 	str.w	r9, [sp, #4]
   16630:	462a      	mov	r2, r5
   16632:	210f      	movs	r1, #15
   16634:	4620      	mov	r0, r4
   16636:	f7fd fdcd 	bl	141d4 <dw1000_write_reg>
                        dw1000_write_reg(inst, SYS_MASK_ID, 1, mask, sizeof(uint8_t));
   1663a:	9502      	str	r5, [sp, #8]
   1663c:	f008 03ff 	and.w	r3, r8, #255	; 0xff
   16640:	9300      	str	r3, [sp, #0]
   16642:	f8cd 9004 	str.w	r9, [sp, #4]
   16646:	462a      	mov	r2, r5
   16648:	210e      	movs	r1, #14
   1664a:	4620      	mov	r0, r4
   1664c:	f7fd fdc2 	bl	141d4 <dw1000_write_reg>
   16650:	e6d5      	b.n	163fe <dw1000_interrupt_ev_cb+0x256>
                        dw1000_write_reg(inst, SYS_STATUS_ID, 1, (inst->sys_status&(SYS_STATUS_LDEDONE | SYS_STATUS_RXDFR | SYS_STATUS_RXFCG | SYS_STATUS_RXFCE | SYS_STATUS_RXDFR))>>8, sizeof(uint8_t));
   16652:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   16656:	0a1b      	lsrs	r3, r3, #8
   16658:	2201      	movs	r2, #1
   1665a:	9202      	str	r2, [sp, #8]
   1665c:	f003 03e4 	and.w	r3, r3, #228	; 0xe4
   16660:	9300      	str	r3, [sp, #0]
   16662:	2300      	movs	r3, #0
   16664:	9301      	str	r3, [sp, #4]
   16666:	210f      	movs	r1, #15
   16668:	4620      	mov	r0, r4
   1666a:	f7fd fdb3 	bl	141d4 <dw1000_write_reg>
   1666e:	e6c6      	b.n	163fe <dw1000_interrupt_ev_cb+0x256>
                MAC_STATS_INC(ROV_err);
   16670:	f8d4 35d8 	ldr.w	r3, [r4, #1496]	; 0x5d8
   16674:	3301      	adds	r3, #1
   16676:	f8c4 35d8 	str.w	r3, [r4, #1496]	; 0x5d8
                dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_RXOVRR, sizeof(uint32_t));
   1667a:	2304      	movs	r3, #4
   1667c:	9302      	str	r3, [sp, #8]
   1667e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   16682:	2300      	movs	r3, #0
   16684:	e9cd 2300 	strd	r2, r3, [sp]
   16688:	2200      	movs	r2, #0
   1668a:	210f      	movs	r1, #15
   1668c:	4620      	mov	r0, r4
   1668e:	f7fd fda1 	bl	141d4 <dw1000_write_reg>
                dw1000_phy_forcetrxoff(inst);
   16692:	4620      	mov	r0, r4
   16694:	f000 fdd8 	bl	17248 <dw1000_phy_forcetrxoff>
                dw1000_phy_rx_reset(inst);
   16698:	4620      	mov	r0, r4
   1669a:	f000 fda0 	bl	171de <dw1000_phy_rx_reset>
    inst->control.start_rx_syncbuf_enabled = 1;
   1669e:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
   166a2:	f043 0310 	orr.w	r3, r3, #16
   166a6:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    buff = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t)); // Read 1 byte at offset 3 to get the 4th byte out of 5
   166aa:	2301      	movs	r3, #1
   166ac:	2203      	movs	r2, #3
   166ae:	210f      	movs	r1, #15
   166b0:	4620      	mov	r0, r4
   166b2:	f7fd fd1f 	bl	140f4 <dw1000_read_reg>
   166b6:	b2c0      	uxtb	r0, r0
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=         // IC side Receive Buffer Pointer
   166b8:	ea80 0040 	eor.w	r0, r0, r0, lsl #1
   166bc:	f010 0f80 	tst.w	r0, #128	; 0x80
   166c0:	d10a      	bne.n	166d8 <dw1000_interrupt_ev_cb+0x530>
                dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
   166c2:	2201      	movs	r2, #1
   166c4:	9202      	str	r2, [sp, #8]
   166c6:	2001      	movs	r0, #1
   166c8:	2100      	movs	r1, #0
   166ca:	e9cd 0100 	strd	r0, r1, [sp]
   166ce:	210d      	movs	r1, #13
   166d0:	4620      	mov	r0, r4
   166d2:	f7fd fd7f 	bl	141d4 <dw1000_write_reg>
   166d6:	e69d      	b.n	16414 <dw1000_interrupt_ev_cb+0x26c>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 0x01, sizeof(uint8_t)); // We need to swap RX buffer status reg (write one to toggle internally)
   166d8:	2301      	movs	r3, #1
   166da:	9302      	str	r3, [sp, #8]
   166dc:	2201      	movs	r2, #1
   166de:	2300      	movs	r3, #0
   166e0:	e9cd 2300 	strd	r2, r3, [sp]
   166e4:	2203      	movs	r2, #3
   166e6:	210d      	movs	r1, #13
   166e8:	4620      	mov	r0, r4
   166ea:	f7fd fd73 	bl	141d4 <dw1000_write_reg>
   166ee:	e7e8      	b.n	166c2 <dw1000_interrupt_ev_cb+0x51a>
            inst->uwb_dev.carrier_integrator = dw1000_read_carrier_integrator(inst);
   166f0:	4620      	mov	r0, r4
   166f2:	f7ff fc0f 	bl	15f14 <dw1000_read_carrier_integrator>
   166f6:	f8c4 04f0 	str.w	r0, [r4, #1264]	; 0x4f0
                             inst->sys_status & (SYS_STATUS_LDEDONE | SYS_STATUS_RXPHD | SYS_STATUS_RXDFR |
   166fa:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
            dw1000_write_reg(inst, SYS_STATUS_ID, 0,
   166fe:	2202      	movs	r2, #2
   16700:	9202      	str	r2, [sp, #8]
   16702:	f403 436c 	and.w	r3, r3, #60416	; 0xec00
   16706:	2200      	movs	r2, #0
   16708:	9300      	str	r3, [sp, #0]
   1670a:	9201      	str	r2, [sp, #4]
   1670c:	210f      	movs	r1, #15
   1670e:	4620      	mov	r0, r4
   16710:	f7fd fd60 	bl	141d4 <dw1000_write_reg>
            if (inst->control.rxauto_disable == false){
   16714:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   16718:	f013 0f04 	tst.w	r3, #4
   1671c:	d006      	beq.n	1672c <dw1000_interrupt_ev_cb+0x584>
            inst->control.rxauto_disable = false;
   1671e:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   16722:	f36f 0382 	bfc	r3, #2, #1
   16726:	f884 35b1 	strb.w	r3, [r4, #1457]	; 0x5b1
   1672a:	e673      	b.n	16414 <dw1000_interrupt_ev_cb+0x26c>
                dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
   1672c:	2201      	movs	r2, #1
   1672e:	9202      	str	r2, [sp, #8]
   16730:	2001      	movs	r0, #1
   16732:	2100      	movs	r1, #0
   16734:	e9cd 0100 	strd	r0, r1, [sp]
   16738:	210d      	movs	r1, #13
   1673a:	4620      	mov	r0, r4
   1673c:	f7fd fd4a 	bl	141d4 <dw1000_write_reg>
                inst->uwb_dev.status.rx_restarted = 1;
   16740:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   16744:	f043 0308 	orr.w	r3, r3, #8
   16748:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
   1674c:	e7e7      	b.n	1671e <dw1000_interrupt_ev_cb+0x576>
                if(cbs->rx_complete_cb((struct uwb_dev*)inst,cbs)) continue;
   1674e:	4629      	mov	r1, r5
   16750:	4620      	mov	r0, r4
   16752:	4798      	blx	r3
            SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
   16754:	6bad      	ldr	r5, [r5, #56]	; 0x38
   16756:	2d00      	cmp	r5, #0
   16758:	f43f ae61 	beq.w	1641e <dw1000_interrupt_ev_cb+0x276>
            if (cbs != NULL && cbs->rx_complete_cb)
   1675c:	692b      	ldr	r3, [r5, #16]
   1675e:	2b00      	cmp	r3, #0
   16760:	d1f5      	bne.n	1674e <dw1000_interrupt_ev_cb+0x5a6>
   16762:	e7f7      	b.n	16754 <dw1000_interrupt_ev_cb+0x5ac>
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_TXFRB, sizeof(uint8_t)); // Clear TX Frame Begins
   16764:	2301      	movs	r3, #1
   16766:	9302      	str	r3, [sp, #8]
   16768:	2210      	movs	r2, #16
   1676a:	2300      	movs	r3, #0
   1676c:	e9cd 2300 	strd	r2, r3, [sp]
   16770:	2200      	movs	r2, #0
   16772:	210f      	movs	r1, #15
   16774:	4620      	mov	r0, r4
   16776:	f7fd fd2d 	bl	141d4 <dw1000_write_reg>
        if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
   1677a:	f8d4 5530 	ldr.w	r5, [r4, #1328]	; 0x530
   1677e:	b90d      	cbnz	r5, 16784 <dw1000_interrupt_ev_cb+0x5dc>
   16780:	e653      	b.n	1642a <dw1000_interrupt_ev_cb+0x282>
            SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
   16782:	6bad      	ldr	r5, [r5, #56]	; 0x38
   16784:	2d00      	cmp	r5, #0
   16786:	f43f ae50 	beq.w	1642a <dw1000_interrupt_ev_cb+0x282>
            if (cbs!=NULL && cbs->tx_begins_cb)
   1678a:	68ab      	ldr	r3, [r5, #8]
   1678c:	2b00      	cmp	r3, #0
   1678e:	d0f8      	beq.n	16782 <dw1000_interrupt_ev_cb+0x5da>
                if(cbs->tx_begins_cb((struct uwb_dev*)inst,cbs)) break;
   16790:	4629      	mov	r1, r5
   16792:	4620      	mov	r0, r4
   16794:	4798      	blx	r3
   16796:	2800      	cmp	r0, #0
   16798:	d0f3      	beq.n	16782 <dw1000_interrupt_ev_cb+0x5da>
   1679a:	e646      	b.n	1642a <dw1000_interrupt_ev_cb+0x282>
        MAC_STATS_INC(TFG_cnt);
   1679c:	f8d4 35dc 	ldr.w	r3, [r4, #1500]	; 0x5dc
   167a0:	3301      	adds	r3, #1
   167a2:	f8c4 35dc 	str.w	r3, [r4, #1500]	; 0x5dc
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_ALL_TX, sizeof(uint8_t)); // Clear TX event bits
   167a6:	2301      	movs	r3, #1
   167a8:	9302      	str	r3, [sp, #8]
   167aa:	22f8      	movs	r2, #248	; 0xf8
   167ac:	2300      	movs	r3, #0
   167ae:	e9cd 2300 	strd	r2, r3, [sp]
   167b2:	2200      	movs	r2, #0
   167b4:	210f      	movs	r1, #15
   167b6:	4620      	mov	r0, r4
   167b8:	f7fd fd0c 	bl	141d4 <dw1000_write_reg>
        if (inst->control.abs_timeout) {
   167bc:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   167c0:	f013 0f08 	tst.w	r3, #8
   167c4:	d106      	bne.n	167d4 <dw1000_interrupt_ev_cb+0x62c>
   167c6:	f8b4 3566 	ldrh.w	r3, [r4, #1382]	; 0x566
        if(dpl_sem_get_count(&inst->tx_sem) == 0){
   167ca:	b1cb      	cbz	r3, 16800 <dw1000_interrupt_ev_cb+0x658>
        if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
   167cc:	f8d4 5530 	ldr.w	r5, [r4, #1328]	; 0x530
   167d0:	bb1d      	cbnz	r5, 1681a <dw1000_interrupt_ev_cb+0x672>
   167d2:	e630      	b.n	16436 <dw1000_interrupt_ev_cb+0x28e>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
   167d4:	2201      	movs	r2, #1
   167d6:	9202      	str	r2, [sp, #8]
   167d8:	2001      	movs	r0, #1
   167da:	2100      	movs	r1, #0
   167dc:	e9cd 0100 	strd	r0, r1, [sp]
   167e0:	210d      	movs	r1, #13
   167e2:	4620      	mov	r0, r4
   167e4:	f7fd fcf6 	bl	141d4 <dw1000_write_reg>
 *
 * @return time
 *
 */
inline uint64_t dw1000_read_txtime(struct _dw1000_dev_instance_t * inst){
    uint64_t time = (uint64_t) dw1000_read_reg(inst, TX_TIME_ID, TX_TIME_TX_STAMP_OFFSET, TX_TIME_TX_STAMP_LEN) & 0x0FFFFFFFFFFULL;
   167e8:	2305      	movs	r3, #5
   167ea:	2200      	movs	r2, #0
   167ec:	2117      	movs	r1, #23
   167ee:	4620      	mov	r0, r4
   167f0:	f7fd fc80 	bl	140f4 <dw1000_read_reg>
   167f4:	4602      	mov	r2, r0
            update_rx_window_timeout(inst, dw1000_read_txtime(inst));
   167f6:	b2cb      	uxtb	r3, r1
   167f8:	4620      	mov	r0, r4
   167fa:	f7fe ff91 	bl	15720 <update_rx_window_timeout>
   167fe:	e7e2      	b.n	167c6 <dw1000_interrupt_ev_cb+0x61e>
   16800:	f504 60ac 	add.w	r0, r4, #1376	; 0x560
   16804:	f7f3 face 	bl	9da4 <os_sem_release>
            assert(err == DPL_OK);
   16808:	2800      	cmp	r0, #0
   1680a:	d0df      	beq.n	167cc <dw1000_interrupt_ev_cb+0x624>
   1680c:	2300      	movs	r3, #0
   1680e:	461a      	mov	r2, r3
   16810:	4619      	mov	r1, r3
   16812:	4618      	mov	r0, r3
   16814:	f7f2 fba6 	bl	8f64 <__assert_func>
            SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
   16818:	6bad      	ldr	r5, [r5, #56]	; 0x38
   1681a:	2d00      	cmp	r5, #0
   1681c:	f43f ae0b 	beq.w	16436 <dw1000_interrupt_ev_cb+0x28e>
            if (cbs!=NULL && cbs->tx_complete_cb)
   16820:	68eb      	ldr	r3, [r5, #12]
   16822:	2b00      	cmp	r3, #0
   16824:	d0f8      	beq.n	16818 <dw1000_interrupt_ev_cb+0x670>
                if(cbs->tx_complete_cb((struct uwb_dev*)inst,cbs)) break;
   16826:	4629      	mov	r1, r5
   16828:	4620      	mov	r0, r4
   1682a:	4798      	blx	r3
   1682c:	2800      	cmp	r0, #0
   1682e:	d0f3      	beq.n	16818 <dw1000_interrupt_ev_cb+0x670>
   16830:	e601      	b.n	16436 <dw1000_interrupt_ev_cb+0x28e>
        MAC_STATS_INC(TXBUF_err);
   16832:	f8d4 35e8 	ldr.w	r3, [r4, #1512]	; 0x5e8
   16836:	3301      	adds	r3, #1
   16838:	f8c4 35e8 	str.w	r3, [r4, #1512]	; 0x5e8
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_TXBERR, sizeof(uint32_t));
   1683c:	2304      	movs	r3, #4
   1683e:	9302      	str	r3, [sp, #8]
   16840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   16844:	2300      	movs	r3, #0
   16846:	e9cd 2300 	strd	r2, r3, [sp]
   1684a:	2200      	movs	r2, #0
   1684c:	210f      	movs	r1, #15
   1684e:	4620      	mov	r0, r4
   16850:	f7fd fcc0 	bl	141d4 <dw1000_write_reg>
   16854:	f8b4 3566 	ldrh.w	r3, [r4, #1382]	; 0x566
        if(dpl_sem_get_count(&inst->tx_sem) == 0){
   16858:	2b00      	cmp	r3, #0
   1685a:	f47f adf2 	bne.w	16442 <dw1000_interrupt_ev_cb+0x29a>
   1685e:	f504 60ac 	add.w	r0, r4, #1376	; 0x560
   16862:	f7f3 fa9f 	bl	9da4 <os_sem_release>
            assert(err == DPL_OK);
   16866:	2800      	cmp	r0, #0
   16868:	f43f adeb 	beq.w	16442 <dw1000_interrupt_ev_cb+0x29a>
   1686c:	2300      	movs	r3, #0
   1686e:	461a      	mov	r2, r3
   16870:	4619      	mov	r1, r3
   16872:	4618      	mov	r0, r3
   16874:	f7f2 fb76 	bl	8f64 <__assert_func>
        MAC_STATS_INC(LDE_err);
   16878:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
   1687c:	3301      	adds	r3, #1
   1687e:	f8c4 35e0 	str.w	r3, [r4, #1504]	; 0x5e0
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_LDEERR, sizeof(uint32_t));
   16882:	2304      	movs	r3, #4
   16884:	9302      	str	r3, [sp, #8]
   16886:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   1688a:	2300      	movs	r3, #0
   1688c:	e9cd 2300 	strd	r2, r3, [sp]
   16890:	2200      	movs	r2, #0
   16892:	210f      	movs	r1, #15
   16894:	4620      	mov	r0, r4
   16896:	f7fd fc9d 	bl	141d4 <dw1000_write_reg>
   1689a:	e5d8      	b.n	1644e <dw1000_interrupt_ev_cb+0x2a6>
        MAC_STATS_INC(RTO_cnt);
   1689c:	f8d4 35d4 	ldr.w	r3, [r4, #1492]	; 0x5d4
   168a0:	3301      	adds	r3, #1
   168a2:	f8c4 35d4 	str.w	r3, [r4, #1492]	; 0x5d4
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_ALL_RX_TO, sizeof(uint32_t)); // Clear RX timeout event bits
   168a6:	2304      	movs	r3, #4
   168a8:	9302      	str	r3, [sp, #8]
   168aa:	f44f 1208 	mov.w	r2, #2228224	; 0x220000
   168ae:	2300      	movs	r3, #0
   168b0:	e9cd 2300 	strd	r2, r3, [sp]
   168b4:	2200      	movs	r2, #0
   168b6:	210f      	movs	r1, #15
   168b8:	4620      	mov	r0, r4
   168ba:	f7fd fc8b 	bl	141d4 <dw1000_write_reg>
        if (inst->control.abs_timeout) {
   168be:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   168c2:	f013 0f08 	tst.w	r3, #8
   168c6:	d127      	bne.n	16918 <dw1000_interrupt_ev_cb+0x770>
        if (!inst->control.abs_timeout) {
   168c8:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   168cc:	f013 0f08 	tst.w	r3, #8
   168d0:	f47f adc2 	bne.w	16458 <dw1000_interrupt_ev_cb+0x2b0>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint16_t)SYS_CTRL_TRXOFF, sizeof(uint16_t)) ; // Disable the radio
   168d4:	2302      	movs	r3, #2
   168d6:	9302      	str	r3, [sp, #8]
   168d8:	2240      	movs	r2, #64	; 0x40
   168da:	2300      	movs	r3, #0
   168dc:	e9cd 2300 	strd	r2, r3, [sp]
   168e0:	2200      	movs	r2, #0
   168e2:	210d      	movs	r1, #13
   168e4:	4620      	mov	r0, r4
   168e6:	f7fd fc75 	bl	141d4 <dw1000_write_reg>
            dw1000_phy_rx_reset(inst);
   168ea:	4620      	mov	r0, r4
   168ec:	f000 fc77 	bl	171de <dw1000_phy_rx_reset>
            inst->control.cir_enable = false;
   168f0:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   168f4:	f36f 0341 	bfc	r3, #1, #1
   168f8:	f884 35b1 	strb.w	r3, [r4, #1457]	; 0x5b1
            inst->control.rxauto_disable = false;
   168fc:	b2db      	uxtb	r3, r3
   168fe:	f36f 0382 	bfc	r3, #2, #1
   16902:	f884 35b1 	strb.w	r3, [r4, #1457]	; 0x5b1
            inst->control.abs_timeout = false;
   16906:	b2db      	uxtb	r3, r3
   16908:	f36f 03c3 	bfc	r3, #3, #1
   1690c:	f884 35b1 	strb.w	r3, [r4, #1457]	; 0x5b1
            if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
   16910:	f8d4 5530 	ldr.w	r5, [r4, #1328]	; 0x530
   16914:	bb3d      	cbnz	r5, 16966 <dw1000_interrupt_ev_cb+0x7be>
   16916:	e59f      	b.n	16458 <dw1000_interrupt_ev_cb+0x2b0>
    uint64_t time = ((uint64_t) dw1000_read_reg(inst, SYS_TIME_ID, SYS_TIME_OFFSET, SYS_TIME_LEN)) & 0x0FFFFFFFFFFULL;
   16918:	2305      	movs	r3, #5
   1691a:	2200      	movs	r2, #0
   1691c:	2106      	movs	r1, #6
   1691e:	4620      	mov	r0, r4
   16920:	f7fd fbe8 	bl	140f4 <dw1000_read_reg>
            uint32_t new_timeout = calc_rx_window_timeout(systime, inst->uwb_dev.abs_timeout);
   16924:	f504 639c 	add.w	r3, r4, #1248	; 0x4e0
   16928:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   1692c:	b2c9      	uxtb	r1, r1
   1692e:	f7fe fbd2 	bl	150d6 <calc_rx_window_timeout>
   16932:	4605      	mov	r5, r0
            if (new_timeout > 1) {
   16934:	2801      	cmp	r0, #1
   16936:	d806      	bhi.n	16946 <dw1000_interrupt_ev_cb+0x79e>
                inst->control.abs_timeout = false;
   16938:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   1693c:	f36f 03c3 	bfc	r3, #3, #1
   16940:	f884 35b1 	strb.w	r3, [r4, #1457]	; 0x5b1
   16944:	e7c0      	b.n	168c8 <dw1000_interrupt_ev_cb+0x720>
                dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
   16946:	2201      	movs	r2, #1
   16948:	9202      	str	r2, [sp, #8]
   1694a:	2001      	movs	r0, #1
   1694c:	2100      	movs	r1, #0
   1694e:	e9cd 0100 	strd	r0, r1, [sp]
   16952:	210d      	movs	r1, #13
   16954:	4620      	mov	r0, r4
   16956:	f7fd fc3d 	bl	141d4 <dw1000_write_reg>
                dw1000_adj_rx_timeout(inst, new_timeout);
   1695a:	4629      	mov	r1, r5
   1695c:	4620      	mov	r0, r4
   1695e:	f7fe fed0 	bl	15702 <dw1000_adj_rx_timeout>
   16962:	e7b1      	b.n	168c8 <dw1000_interrupt_ev_cb+0x720>
                SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
   16964:	6bad      	ldr	r5, [r5, #56]	; 0x38
   16966:	2d00      	cmp	r5, #0
   16968:	f43f ad76 	beq.w	16458 <dw1000_interrupt_ev_cb+0x2b0>
                    if (cbs!=NULL && cbs->rx_timeout_cb)
   1696c:	69ab      	ldr	r3, [r5, #24]
   1696e:	2b00      	cmp	r3, #0
   16970:	d0f8      	beq.n	16964 <dw1000_interrupt_ev_cb+0x7bc>
                        if(cbs->rx_timeout_cb((struct uwb_dev*)inst,cbs)) continue;
   16972:	4629      	mov	r1, r5
   16974:	4620      	mov	r0, r4
   16976:	4798      	blx	r3
   16978:	e7f4      	b.n	16964 <dw1000_interrupt_ev_cb+0x7bc>
        MAC_STATS_INC(RX_err);
   1697a:	f8d4 35e4 	ldr.w	r3, [r4, #1508]	; 0x5e4
   1697e:	3301      	adds	r3, #1
   16980:	f8c4 35e4 	str.w	r3, [r4, #1508]	; 0x5e4
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, (SYS_STATUS_ALL_RX_ERR), sizeof(uint32_t)); // Clear RX error event bits
   16984:	2304      	movs	r3, #4
   16986:	9302      	str	r3, [sp, #8]
   16988:	a36f      	add	r3, pc, #444	; (adr r3, 16b48 <dw1000_interrupt_ev_cb+0x9a0>)
   1698a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1698e:	e9cd 2300 	strd	r2, r3, [sp]
   16992:	2200      	movs	r2, #0
   16994:	210f      	movs	r1, #15
   16996:	4620      	mov	r0, r4
   16998:	f7fd fc1c 	bl	141d4 <dw1000_write_reg>
        if (inst->uwb_dev.config.dblbuffon_enabled && inst->uwb_dev.status.overrun_error) {
   1699c:	f894 352c 	ldrb.w	r3, [r4, #1324]	; 0x52c
   169a0:	f013 0f10 	tst.w	r3, #16
   169a4:	d004      	beq.n	169b0 <dw1000_interrupt_ev_cb+0x808>
   169a6:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   169aa:	f013 0f04 	tst.w	r3, #4
   169ae:	d121      	bne.n	169f4 <dw1000_interrupt_ev_cb+0x84c>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) SYS_CTRL_TRXOFF, sizeof(uint8_t));
   169b0:	2301      	movs	r3, #1
   169b2:	9302      	str	r3, [sp, #8]
   169b4:	2240      	movs	r2, #64	; 0x40
   169b6:	2300      	movs	r3, #0
   169b8:	e9cd 2300 	strd	r2, r3, [sp]
   169bc:	2200      	movs	r2, #0
   169be:	210d      	movs	r1, #13
   169c0:	4620      	mov	r0, r4
   169c2:	f7fd fc07 	bl	141d4 <dw1000_write_reg>
            dw1000_phy_rx_reset(inst);
   169c6:	4620      	mov	r0, r4
   169c8:	f000 fc09 	bl	171de <dw1000_phy_rx_reset>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
   169cc:	2201      	movs	r2, #1
   169ce:	9202      	str	r2, [sp, #8]
   169d0:	2001      	movs	r0, #1
   169d2:	2100      	movs	r1, #0
   169d4:	e9cd 0100 	strd	r0, r1, [sp]
   169d8:	210d      	movs	r1, #13
   169da:	4620      	mov	r0, r4
   169dc:	f7fd fbfa 	bl	141d4 <dw1000_write_reg>
        if (inst->control.abs_timeout) {
   169e0:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   169e4:	f013 0f08 	tst.w	r3, #8
   169e8:	d134      	bne.n	16a54 <dw1000_interrupt_ev_cb+0x8ac>
        if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
   169ea:	f8d4 5530 	ldr.w	r5, [r4, #1328]	; 0x530
   169ee:	2d00      	cmp	r5, #0
   169f0:	d13d      	bne.n	16a6e <dw1000_interrupt_ev_cb+0x8c6>
   169f2:	e537      	b.n	16464 <dw1000_interrupt_ev_cb+0x2bc>
            MAC_STATS_INC(ROV_err);
   169f4:	f8d4 35d8 	ldr.w	r3, [r4, #1496]	; 0x5d8
   169f8:	3301      	adds	r3, #1
   169fa:	f8c4 35d8 	str.w	r3, [r4, #1496]	; 0x5d8
            dw1000_phy_rx_reset(inst);
   169fe:	4620      	mov	r0, r4
   16a00:	f000 fbed 	bl	171de <dw1000_phy_rx_reset>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 0b1, sizeof(uint8_t));
   16a04:	2501      	movs	r5, #1
   16a06:	9502      	str	r5, [sp, #8]
   16a08:	2201      	movs	r2, #1
   16a0a:	2300      	movs	r3, #0
   16a0c:	e9cd 2300 	strd	r2, r3, [sp]
   16a10:	2203      	movs	r2, #3
   16a12:	210d      	movs	r1, #13
   16a14:	4620      	mov	r0, r4
   16a16:	f7fd fbdd 	bl	141d4 <dw1000_write_reg>
    inst->control.start_rx_syncbuf_enabled = 1;
   16a1a:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
   16a1e:	f043 0310 	orr.w	r3, r3, #16
   16a22:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    buff = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t)); // Read 1 byte at offset 3 to get the 4th byte out of 5
   16a26:	462b      	mov	r3, r5
   16a28:	2203      	movs	r2, #3
   16a2a:	210f      	movs	r1, #15
   16a2c:	4620      	mov	r0, r4
   16a2e:	f7fd fb61 	bl	140f4 <dw1000_read_reg>
   16a32:	b2c0      	uxtb	r0, r0
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=         // IC side Receive Buffer Pointer
   16a34:	ea80 0040 	eor.w	r0, r0, r0, lsl #1
   16a38:	f010 0f80 	tst.w	r0, #128	; 0x80
   16a3c:	d0c6      	beq.n	169cc <dw1000_interrupt_ev_cb+0x824>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 0x01, sizeof(uint8_t)); // We need to swap RX buffer status reg (write one to toggle internally)
   16a3e:	9502      	str	r5, [sp, #8]
   16a40:	2201      	movs	r2, #1
   16a42:	2300      	movs	r3, #0
   16a44:	e9cd 2300 	strd	r2, r3, [sp]
   16a48:	2203      	movs	r2, #3
   16a4a:	210d      	movs	r1, #13
   16a4c:	4620      	mov	r0, r4
   16a4e:	f7fd fbc1 	bl	141d4 <dw1000_write_reg>
            dw1000_sync_rxbufptrs(inst);
   16a52:	e7bb      	b.n	169cc <dw1000_interrupt_ev_cb+0x824>
    uint64_t time = ((uint64_t) dw1000_read_reg(inst, SYS_TIME_ID, SYS_TIME_OFFSET, SYS_TIME_LEN)) & 0x0FFFFFFFFFFULL;
   16a54:	2305      	movs	r3, #5
   16a56:	2200      	movs	r2, #0
   16a58:	2106      	movs	r1, #6
   16a5a:	4620      	mov	r0, r4
   16a5c:	f7fd fb4a 	bl	140f4 <dw1000_read_reg>
   16a60:	4602      	mov	r2, r0
            update_rx_window_timeout(inst, dw1000_read_systime(inst));
   16a62:	b2cb      	uxtb	r3, r1
   16a64:	4620      	mov	r0, r4
   16a66:	f7fe fe5b 	bl	15720 <update_rx_window_timeout>
   16a6a:	e7be      	b.n	169ea <dw1000_interrupt_ev_cb+0x842>
            SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
   16a6c:	6bad      	ldr	r5, [r5, #56]	; 0x38
   16a6e:	2d00      	cmp	r5, #0
   16a70:	f43f acf8 	beq.w	16464 <dw1000_interrupt_ev_cb+0x2bc>
            if (cbs!=NULL && cbs->rx_error_cb)
   16a74:	69eb      	ldr	r3, [r5, #28]
   16a76:	2b00      	cmp	r3, #0
   16a78:	d0f8      	beq.n	16a6c <dw1000_interrupt_ev_cb+0x8c4>
                if(cbs->rx_error_cb((struct uwb_dev*)inst,cbs)) continue;
   16a7a:	4629      	mov	r1, r5
   16a7c:	4620      	mov	r0, r4
   16a7e:	4798      	blx	r3
   16a80:	e7f4      	b.n	16a6c <dw1000_interrupt_ev_cb+0x8c4>
        dw1000_write_reg(inst, SYS_STATUS_ID, 2, SYS_STATUS_SLP2INIT>>16, 1);
   16a82:	2301      	movs	r3, #1
   16a84:	9302      	str	r3, [sp, #8]
   16a86:	2280      	movs	r2, #128	; 0x80
   16a88:	2300      	movs	r3, #0
   16a8a:	e9cd 2300 	strd	r2, r3, [sp]
   16a8e:	2202      	movs	r2, #2
   16a90:	210f      	movs	r1, #15
   16a92:	4620      	mov	r0, r4
   16a94:	f7fd fb9e 	bl	141d4 <dw1000_write_reg>
   16a98:	e4ea      	b.n	16470 <dw1000_interrupt_ev_cb+0x2c8>
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_CLKPLL_LL, sizeof(uint32_t));
   16a9a:	2304      	movs	r3, #4
   16a9c:	9302      	str	r3, [sp, #8]
   16a9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   16aa2:	2300      	movs	r3, #0
   16aa4:	e9cd 2300 	strd	r2, r3, [sp]
   16aa8:	2200      	movs	r2, #0
   16aaa:	210f      	movs	r1, #15
   16aac:	4620      	mov	r0, r4
   16aae:	f7fd fb91 	bl	141d4 <dw1000_write_reg>
        MAC_STATS_INC(PLL_LL_err);
   16ab2:	f8d4 35ec 	ldr.w	r3, [r4, #1516]	; 0x5ec
   16ab6:	3301      	adds	r3, #1
   16ab8:	f8c4 35ec 	str.w	r3, [r4, #1516]	; 0x5ec
   16abc:	e4de      	b.n	1647c <dw1000_interrupt_ev_cb+0x2d4>
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_MASK_MCPLOCK, sizeof(uint32_t));
   16abe:	2304      	movs	r3, #4
   16ac0:	9302      	str	r3, [sp, #8]
   16ac2:	2202      	movs	r2, #2
   16ac4:	2300      	movs	r3, #0
   16ac6:	e9cd 2300 	strd	r2, r3, [sp]
   16aca:	2200      	movs	r2, #0
   16acc:	210f      	movs	r1, #15
   16ace:	4620      	mov	r0, r4
   16ad0:	f7fd fb80 	bl	141d4 <dw1000_write_reg>
        dw1000_phy_set_rx_antennadelay(inst, inst->uwb_dev.rx_antenna_delay);
   16ad4:	f8b4 34cc 	ldrh.w	r3, [r4, #1228]	; 0x4cc
   16ad8:	f04f 0802 	mov.w	r8, #2
   16adc:	f8cd 8008 	str.w	r8, [sp, #8]
   16ae0:	2500      	movs	r5, #0
   16ae2:	9300      	str	r3, [sp, #0]
   16ae4:	9501      	str	r5, [sp, #4]
   16ae6:	f641 0204 	movw	r2, #6148	; 0x1804
   16aea:	212e      	movs	r1, #46	; 0x2e
   16aec:	4620      	mov	r0, r4
   16aee:	f7fd fb71 	bl	141d4 <dw1000_write_reg>
        dw1000_phy_set_tx_antennadelay(inst, inst->uwb_dev.tx_antenna_delay);
   16af2:	f8b4 34ce 	ldrh.w	r3, [r4, #1230]	; 0x4ce
   16af6:	f8cd 8008 	str.w	r8, [sp, #8]
   16afa:	9300      	str	r3, [sp, #0]
   16afc:	9501      	str	r5, [sp, #4]
   16afe:	462a      	mov	r2, r5
   16b00:	2118      	movs	r1, #24
   16b02:	4620      	mov	r0, r4
   16b04:	f7fd fb66 	bl	141d4 <dw1000_write_reg>
        inst->uwb_dev.status.sleeping = 0;
   16b08:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   16b0c:	f365 0300 	bfi	r3, r5, #0, #1
   16b10:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
        if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
   16b14:	f8d4 5530 	ldr.w	r5, [r4, #1328]	; 0x530
   16b18:	b90d      	cbnz	r5, 16b1e <dw1000_interrupt_ev_cb+0x976>
   16b1a:	e4b5      	b.n	16488 <dw1000_interrupt_ev_cb+0x2e0>
            SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
   16b1c:	6bad      	ldr	r5, [r5, #56]	; 0x38
   16b1e:	2d00      	cmp	r5, #0
   16b20:	f43f acb2 	beq.w	16488 <dw1000_interrupt_ev_cb+0x2e0>
            if (cbs!=NULL && cbs->sleep_cb)
   16b24:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   16b26:	2b00      	cmp	r3, #0
   16b28:	d0f8      	beq.n	16b1c <dw1000_interrupt_ev_cb+0x974>
                if (cbs->sleep_cb((struct uwb_dev*)inst,cbs)) continue;
   16b2a:	4629      	mov	r1, r5
   16b2c:	4620      	mov	r0, r4
   16b2e:	4798      	blx	r3
   16b30:	e7f4      	b.n	16b1c <dw1000_interrupt_ev_cb+0x974>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
   16b32:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   16b36:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   16b3a:	f7f2 fd47 	bl	95cc <os_eventq_put>
}
   16b3e:	f7ff bb4f 	b.w	161e0 <dw1000_interrupt_ev_cb+0x38>
   16b42:	bf00      	nop
   16b44:	f3af 8000 	nop.w
   16b48:	24119000 	.word	0x24119000
   16b4c:	00000000 	.word	0x00000000

00016b50 <dw1000_calc_fppl>:
    if (diag->pacc_cnt == 0 ||
   16b50:	8a4a      	ldrh	r2, [r1, #18]
   16b52:	b3e2      	cbz	r2, 16bce <dw1000_calc_fppl+0x7e>
{
   16b54:	b510      	push	{r4, lr}
   16b56:	ed2d 8b02 	vpush	{d8}
        (!diag->fp_amp && !diag->fp_amp2 && !diag->fp_amp3)) {
   16b5a:	890b      	ldrh	r3, [r1, #8]
    if (diag->pacc_cnt == 0 ||
   16b5c:	b91b      	cbnz	r3, 16b66 <dw1000_calc_fppl+0x16>
        (!diag->fp_amp && !diag->fp_amp2 && !diag->fp_amp3)) {
   16b5e:	898c      	ldrh	r4, [r1, #12]
   16b60:	b90c      	cbnz	r4, 16b66 <dw1000_calc_fppl+0x16>
   16b62:	89cc      	ldrh	r4, [r1, #14]
   16b64:	b3b4      	cbz	r4, 16bd4 <dw1000_calc_fppl+0x84>
    A = (inst->uwb_dev.config.prf == DWT_PRF_16M) ? DPL_FLOAT32_INIT(113.77f) : DPL_FLOAT32_INIT(121.74f);
   16b66:	f890 050e 	ldrb.w	r0, [r0, #1294]	; 0x50e
   16b6a:	2801      	cmp	r0, #1
   16b6c:	d02c      	beq.n	16bc8 <dw1000_calc_fppl+0x78>
   16b6e:	ed9f 8a1b 	vldr	s16, [pc, #108]	; 16bdc <dw1000_calc_fppl+0x8c>
    N = (float)(diag->pacc_cnt);
   16b72:	ee07 2a90 	vmov	s15, r2
   16b76:	eeb8 0a67 	vcvt.f32.u32	s0, s15
    v = (float)(diag->fp_amp*diag->fp_amp) +
   16b7a:	fb03 f303 	mul.w	r3, r3, r3
   16b7e:	ee07 3a90 	vmov	s15, r3
   16b82:	eef8 6ae7 	vcvt.f32.s32	s13, s15
        (float)(diag->fp_amp2*diag->fp_amp2) +
   16b86:	898b      	ldrh	r3, [r1, #12]
   16b88:	fb03 f303 	mul.w	r3, r3, r3
   16b8c:	ee07 3a90 	vmov	s15, r3
   16b90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    v = (float)(diag->fp_amp*diag->fp_amp) +
   16b94:	ee36 7aa7 	vadd.f32	s14, s13, s15
        (float)(diag->fp_amp3*diag->fp_amp3);
   16b98:	89cb      	ldrh	r3, [r1, #14]
   16b9a:	fb03 f303 	mul.w	r3, r3, r3
   16b9e:	ee07 3a90 	vmov	s15, r3
   16ba2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    v = (float)(diag->fp_amp*diag->fp_amp) +
   16ba6:	ee77 7a27 	vadd.f32	s15, s14, s15
    v /= N * N;
   16baa:	ee20 0a00 	vmul.f32	s0, s0, s0
    fppl = 10.0f * log10f(v) - A;
   16bae:	ee87 0a80 	vdiv.f32	s0, s15, s0
   16bb2:	f00b fa35 	bl	22020 <log10f>
   16bb6:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
   16bba:	ee20 0a27 	vmul.f32	s0, s0, s15
   16bbe:	ee30 0a48 	vsub.f32	s0, s0, s16
}
   16bc2:	ecbd 8b02 	vpop	{d8}
   16bc6:	bd10      	pop	{r4, pc}
    A = (inst->uwb_dev.config.prf == DWT_PRF_16M) ? DPL_FLOAT32_INIT(113.77f) : DPL_FLOAT32_INIT(121.74f);
   16bc8:	ed9f 8a05 	vldr	s16, [pc, #20]	; 16be0 <dw1000_calc_fppl+0x90>
   16bcc:	e7d1      	b.n	16b72 <dw1000_calc_fppl+0x22>
        return DPL_FLOAT32_NAN();
   16bce:	ed9f 0a05 	vldr	s0, [pc, #20]	; 16be4 <dw1000_calc_fppl+0x94>
}
   16bd2:	4770      	bx	lr
        return DPL_FLOAT32_NAN();
   16bd4:	ed9f 0a03 	vldr	s0, [pc, #12]	; 16be4 <dw1000_calc_fppl+0x94>
   16bd8:	e7f3      	b.n	16bc2 <dw1000_calc_fppl+0x72>
   16bda:	bf00      	nop
   16bdc:	42f37ae1 	.word	0x42f37ae1
   16be0:	42e38a3d 	.word	0x42e38a3d
   16be4:	7fc00000 	.word	0x7fc00000

00016be8 <dw1000_get_fppl>:
{
   16be8:	b508      	push	{r3, lr}
    if (!inst->uwb_dev.config.rxdiag_enable) {
   16bea:	f890 352c 	ldrb.w	r3, [r0, #1324]	; 0x52c
   16bee:	f013 0f40 	tst.w	r3, #64	; 0x40
   16bf2:	d102      	bne.n	16bfa <dw1000_get_fppl+0x12>
        return DPL_FLOAT32_NAN();
   16bf4:	ed9f 0a03 	vldr	s0, [pc, #12]	; 16c04 <dw1000_get_fppl+0x1c>
}
   16bf8:	bd08      	pop	{r3, pc}
    return dw1000_calc_fppl(inst, &inst->rxdiag);
   16bfa:	f200 519c 	addw	r1, r0, #1436	; 0x59c
   16bfe:	f7ff ffa7 	bl	16b50 <dw1000_calc_fppl>
   16c02:	e7f9      	b.n	16bf8 <dw1000_get_fppl+0x10>
   16c04:	7fc00000 	.word	0x7fc00000

00016c08 <dw1000_calc_rssi>:
{
   16c08:	b508      	push	{r3, lr}
   16c0a:	ed2d 8b02 	vpush	{d8}
    uint32_t pacc_cnt = diag->pacc_cnt;
   16c0e:	8a4a      	ldrh	r2, [r1, #18]
    uint32_t cir_pwr = diag->cir_pwr;
   16c10:	8a0b      	ldrh	r3, [r1, #16]
    if (cir_pwr == 0 || pacc_cnt == 0) {
   16c12:	b1eb      	cbz	r3, 16c50 <dw1000_calc_rssi+0x48>
   16c14:	b1fa      	cbz	r2, 16c56 <dw1000_calc_rssi+0x4e>
    B = (inst->uwb_dev.config.prf == DWT_PRF_16M) ? DPL_FLOAT32_INIT(113.77f) : DPL_FLOAT32_INIT(121.74f);
   16c16:	f890 150e 	ldrb.w	r1, [r0, #1294]	; 0x50e
   16c1a:	2901      	cmp	r1, #1
   16c1c:	d015      	beq.n	16c4a <dw1000_calc_rssi+0x42>
   16c1e:	ed9f 8a0f 	vldr	s16, [pc, #60]	; 16c5c <dw1000_calc_rssi+0x54>
    A = cir_pwr * 0x20000/(pacc_cnt * pacc_cnt);
   16c22:	045b      	lsls	r3, r3, #17
   16c24:	fb02 f202 	mul.w	r2, r2, r2
   16c28:	fbb3 f3f2 	udiv	r3, r3, r2
   16c2c:	ee00 3a10 	vmov	s0, r3
    rssi = 10.0f * log10f(A) - B;
   16c30:	eeb8 0a40 	vcvt.f32.u32	s0, s0
   16c34:	f00b f9f4 	bl	22020 <log10f>
   16c38:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
   16c3c:	ee20 0a27 	vmul.f32	s0, s0, s15
   16c40:	ee30 0a48 	vsub.f32	s0, s0, s16
}
   16c44:	ecbd 8b02 	vpop	{d8}
   16c48:	bd08      	pop	{r3, pc}
    B = (inst->uwb_dev.config.prf == DWT_PRF_16M) ? DPL_FLOAT32_INIT(113.77f) : DPL_FLOAT32_INIT(121.74f);
   16c4a:	ed9f 8a05 	vldr	s16, [pc, #20]	; 16c60 <dw1000_calc_rssi+0x58>
   16c4e:	e7e8      	b.n	16c22 <dw1000_calc_rssi+0x1a>
        return DPL_FLOAT32_NAN();
   16c50:	ed9f 0a04 	vldr	s0, [pc, #16]	; 16c64 <dw1000_calc_rssi+0x5c>
   16c54:	e7f6      	b.n	16c44 <dw1000_calc_rssi+0x3c>
   16c56:	ed9f 0a03 	vldr	s0, [pc, #12]	; 16c64 <dw1000_calc_rssi+0x5c>
   16c5a:	e7f3      	b.n	16c44 <dw1000_calc_rssi+0x3c>
   16c5c:	42f37ae1 	.word	0x42f37ae1
   16c60:	42e38a3d 	.word	0x42e38a3d
   16c64:	7fc00000 	.word	0x7fc00000

00016c68 <dw1000_get_rssi>:
{
   16c68:	b508      	push	{r3, lr}
    if (!inst->uwb_dev.config.rxdiag_enable) {
   16c6a:	f890 352c 	ldrb.w	r3, [r0, #1324]	; 0x52c
   16c6e:	f013 0f40 	tst.w	r3, #64	; 0x40
   16c72:	d102      	bne.n	16c7a <dw1000_get_rssi+0x12>
        return DPL_FLOAT32_NAN();
   16c74:	ed9f 0a03 	vldr	s0, [pc, #12]	; 16c84 <dw1000_get_rssi+0x1c>
}
   16c78:	bd08      	pop	{r3, pc}
    return dw1000_calc_rssi(inst, &inst->rxdiag);
   16c7a:	f200 519c 	addw	r1, r0, #1436	; 0x59c
   16c7e:	f7ff ffc3 	bl	16c08 <dw1000_calc_rssi>
   16c82:	e7f9      	b.n	16c78 <dw1000_get_rssi+0x10>
   16c84:	7fc00000 	.word	0x7fc00000

00016c88 <dw1000_estimate_los>:
    d = DPL_FLOAT32_FABS(DPL_FLOAT32_SUB(rssi, fppl));
   16c88:	ee30 0a60 	vsub.f32	s0, s0, s1
   16c8c:	eeb0 0ac0 	vabs.f32	s0, s0
    if (d < DPL_FLOAT32_INIT(6.0f))  return DPL_FLOAT32_INIT(1.0f);
   16c90:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
   16c94:	eeb4 0ae7 	vcmpe.f32	s0, s15
   16c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16c9c:	d413      	bmi.n	16cc6 <dw1000_estimate_los+0x3e>
    if (d > DPL_FLOAT32_INIT(10.0f)) return DPL_FLOAT32_INIT(0.0f);
   16c9e:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
   16ca2:	eeb4 0ae7 	vcmpe.f32	s0, s15
   16ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16caa:	dc0f      	bgt.n	16ccc <dw1000_estimate_los+0x44>
    los = DPL_FLOAT32_SUB(DPL_FLOAT32_INIT(1.0f),
   16cac:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
   16cb0:	ee30 0a60 	vsub.f32	s0, s0, s1
   16cb4:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
   16cb8:	ee20 0a27 	vmul.f32	s0, s0, s15
   16cbc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   16cc0:	ee37 0ac0 	vsub.f32	s0, s15, s0
    return los;
   16cc4:	4770      	bx	lr
    if (d < DPL_FLOAT32_INIT(6.0f))  return DPL_FLOAT32_INIT(1.0f);
   16cc6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   16cca:	4770      	bx	lr
    if (d > DPL_FLOAT32_INIT(10.0f)) return DPL_FLOAT32_INIT(0.0f);
   16ccc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 16cd4 <dw1000_estimate_los+0x4c>
}
   16cd0:	4770      	bx	lr
   16cd2:	bf00      	nop
   16cd4:	00000000 	.word	0x00000000

00016cd8 <dw1000_read_systime>:
inline uint64_t dw1000_read_systime(struct _dw1000_dev_instance_t * inst){
   16cd8:	b508      	push	{r3, lr}
    uint64_t time = ((uint64_t) dw1000_read_reg(inst, SYS_TIME_ID, SYS_TIME_OFFSET, SYS_TIME_LEN)) & 0x0FFFFFFFFFFULL;
   16cda:	2305      	movs	r3, #5
   16cdc:	2200      	movs	r2, #0
   16cde:	2106      	movs	r1, #6
   16ce0:	f7fd fa08 	bl	140f4 <dw1000_read_reg>
}
   16ce4:	b2c9      	uxtb	r1, r1
   16ce6:	bd08      	pop	{r3, pc}

00016ce8 <dw1000_read_systime_lo>:
inline uint32_t dw1000_read_systime_lo(struct _dw1000_dev_instance_t * inst){
   16ce8:	b508      	push	{r3, lr}
    uint32_t time = (uint32_t) dw1000_read_reg(inst, SYS_TIME_ID, SYS_TIME_OFFSET, sizeof(uint32_t));
   16cea:	2304      	movs	r3, #4
   16cec:	2200      	movs	r2, #0
   16cee:	2106      	movs	r1, #6
   16cf0:	f7fd fa00 	bl	140f4 <dw1000_read_reg>
}
   16cf4:	bd08      	pop	{r3, pc}

00016cf6 <dw1000_read_rxtime>:
inline uint64_t dw1000_read_rxtime(struct _dw1000_dev_instance_t * inst){
   16cf6:	b508      	push	{r3, lr}
    uint64_t time = (uint64_t)  dw1000_read_reg(inst, RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET, RX_TIME_RX_STAMP_LEN) & 0x0FFFFFFFFFFULL;
   16cf8:	2305      	movs	r3, #5
   16cfa:	2200      	movs	r2, #0
   16cfc:	2115      	movs	r1, #21
   16cfe:	f7fd f9f9 	bl	140f4 <dw1000_read_reg>
}
   16d02:	b2c9      	uxtb	r1, r1
   16d04:	bd08      	pop	{r3, pc}

00016d06 <dw1000_read_rxtime_lo>:
inline uint32_t dw1000_read_rxtime_lo(struct _dw1000_dev_instance_t * inst){
   16d06:	b508      	push	{r3, lr}
    uint64_t time = (uint32_t) dw1000_read_reg(inst, RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET, sizeof(uint32_t));
   16d08:	2304      	movs	r3, #4
   16d0a:	2200      	movs	r2, #0
   16d0c:	2115      	movs	r1, #21
   16d0e:	f7fd f9f1 	bl	140f4 <dw1000_read_reg>
}
   16d12:	bd08      	pop	{r3, pc}

00016d14 <dw1000_read_txtime>:
inline uint64_t dw1000_read_txtime(struct _dw1000_dev_instance_t * inst){
   16d14:	b508      	push	{r3, lr}
    uint64_t time = (uint64_t) dw1000_read_reg(inst, TX_TIME_ID, TX_TIME_TX_STAMP_OFFSET, TX_TIME_TX_STAMP_LEN) & 0x0FFFFFFFFFFULL;
   16d16:	2305      	movs	r3, #5
   16d18:	2200      	movs	r2, #0
   16d1a:	2117      	movs	r1, #23
   16d1c:	f7fd f9ea 	bl	140f4 <dw1000_read_reg>
    return time;
}
   16d20:	b2c9      	uxtb	r1, r1
   16d22:	bd08      	pop	{r3, pc}

00016d24 <dw1000_read_txtime_lo>:
 *
 * @param inst  Pointer to _dw1000_dev_instance_t.
 *
 * @return time
 */
inline uint32_t dw1000_read_txtime_lo(struct _dw1000_dev_instance_t * inst){
   16d24:	b508      	push	{r3, lr}
    uint32_t time = (uint32_t) dw1000_read_reg(inst, TX_TIME_ID, TX_TIME_TX_STAMP_OFFSET, sizeof(uint32_t));
   16d26:	2304      	movs	r3, #4
   16d28:	2200      	movs	r2, #0
   16d2a:	2117      	movs	r1, #23
   16d2c:	f7fd f9e2 	bl	140f4 <dw1000_read_reg>
    return time;
}
   16d30:	bd08      	pop	{r3, pc}
	...

00016d34 <dw1000_configcwmode>:
 * @param chan - specifies the operating channel (e.g. 1, 2, 3, 4, 5, 6 or 7)
 *
 */
void
dw1000_configcwmode(struct _dw1000_dev_instance_t * inst, uint8_t chan)
{
   16d34:	b5f0      	push	{r4, r5, r6, r7, lr}
   16d36:	b085      	sub	sp, #20
    int rc;
    if ((chan < 1) || (chan > 7) || (6 == chan)) {
   16d38:	1e4b      	subs	r3, r1, #1
   16d3a:	b2db      	uxtb	r3, r3
   16d3c:	2b06      	cmp	r3, #6
   16d3e:	d879      	bhi.n	16e34 <dw1000_configcwmode+0x100>
   16d40:	4604      	mov	r4, r0
   16d42:	460d      	mov	r5, r1
   16d44:	2906      	cmp	r1, #6
   16d46:	d075      	beq.n	16e34 <dw1000_configcwmode+0x100>
    }

    /* Lower the speed of the SPI bus before activating CW mode.
     * This is needed because we disable the hiher sysclk and thus
     * dw1000 only support < 2Mbit spi */
    inst->spi_settings.baudrate = inst->spi_baudrate_low;
   16d48:	f8d0 3558 	ldr.w	r3, [r0, #1368]	; 0x558
   16d4c:	f8c0 3598 	str.w	r3, [r0, #1432]	; 0x598
    rc = hal_spi_disable(inst->spi_num);
   16d50:	f890 055c 	ldrb.w	r0, [r0, #1372]	; 0x55c
   16d54:	f001 fb44 	bl	183e0 <hal_spi_disable>
    assert(rc == 0);
   16d58:	2800      	cmp	r0, #0
   16d5a:	d171      	bne.n	16e40 <dw1000_configcwmode+0x10c>
    rc = hal_spi_config(inst->spi_num, &inst->spi_settings);
   16d5c:	f204 5194 	addw	r1, r4, #1428	; 0x594
   16d60:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   16d64:	f001 fafa 	bl	1835c <hal_spi_config>
    assert(rc == 0);
   16d68:	2800      	cmp	r0, #0
   16d6a:	d16f      	bne.n	16e4c <dw1000_configcwmode+0x118>
    rc = hal_spi_enable(inst->spi_num);
   16d6c:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   16d70:	f001 fb10 	bl	18394 <hal_spi_enable>
    assert(rc == 0);
   16d74:	2800      	cmp	r0, #0
   16d76:	d16f      	bne.n	16e58 <dw1000_configcwmode+0x124>

    /* disable TX/RX RF block sequencing (needed for cw frame mode) */
    dw1000_phy_disable_sequencing(inst);
   16d78:	4620      	mov	r0, r4
   16d7a:	f000 f8ee 	bl	16f5a <dw1000_phy_disable_sequencing>

    /* config RF pll (for a given channel) */
    /* configure PLL2/RF PLL block CFG */
    dw1000_write_reg(inst, FS_CTRL_ID, FS_PLLCFG_OFFSET,
                     fs_pll_cfg[chan_idx[chan]], sizeof(uint32_t));
   16d7e:	4b39      	ldr	r3, [pc, #228]	; (16e64 <dw1000_configcwmode+0x130>)
   16d80:	5d5d      	ldrb	r5, [r3, r5]
   16d82:	4b39      	ldr	r3, [pc, #228]	; (16e68 <dw1000_configcwmode+0x134>)
   16d84:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    dw1000_write_reg(inst, FS_CTRL_ID, FS_PLLCFG_OFFSET,
   16d88:	2704      	movs	r7, #4
   16d8a:	9702      	str	r7, [sp, #8]
   16d8c:	2600      	movs	r6, #0
   16d8e:	9300      	str	r3, [sp, #0]
   16d90:	9601      	str	r6, [sp, #4]
   16d92:	2207      	movs	r2, #7
   16d94:	212b      	movs	r1, #43	; 0x2b
   16d96:	4620      	mov	r0, r4
   16d98:	f7fd fa1c 	bl	141d4 <dw1000_write_reg>

    /* Configure RF TX blocks (for specified channel and prf) */
    /* Config RF TX control */
    dw1000_write_reg(inst, RF_CONF_ID, RF_TXCTRL_OFFSET,
                     tx_config[chan_idx[chan]], sizeof(uint32_t));
   16d9c:	4b33      	ldr	r3, [pc, #204]	; (16e6c <dw1000_configcwmode+0x138>)
   16d9e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    dw1000_write_reg(inst, RF_CONF_ID, RF_TXCTRL_OFFSET,
   16da2:	9702      	str	r7, [sp, #8]
   16da4:	9300      	str	r3, [sp, #0]
   16da6:	9601      	str	r6, [sp, #4]
   16da8:	220c      	movs	r2, #12
   16daa:	2128      	movs	r1, #40	; 0x28
   16dac:	4620      	mov	r0, r4
   16dae:	f7fd fa11 	bl	141d4 <dw1000_write_reg>

    /* enable RF PLL */
    dw1000_write_reg(inst, RF_CONF_ID, 0, RF_CONF_TXPLLPOWEN_MASK, sizeof(uint32_t));
   16db2:	9702      	str	r7, [sp, #8]
   16db4:	f44f 12ff 	mov.w	r2, #2088960	; 0x1fe000
   16db8:	2300      	movs	r3, #0
   16dba:	e9cd 2300 	strd	r2, r3, [sp]
   16dbe:	4632      	mov	r2, r6
   16dc0:	2128      	movs	r1, #40	; 0x28
   16dc2:	4620      	mov	r0, r4
   16dc4:	f7fd fa06 	bl	141d4 <dw1000_write_reg>
    dw1000_write_reg(inst, RF_CONF_ID, 0, RF_CONF_TXALLEN_MASK, sizeof(uint32_t));
   16dc8:	9702      	str	r7, [sp, #8]
   16dca:	4a29      	ldr	r2, [pc, #164]	; (16e70 <dw1000_configcwmode+0x13c>)
   16dcc:	2300      	movs	r3, #0
   16dce:	e9cd 2300 	strd	r2, r3, [sp]
   16dd2:	4632      	mov	r2, r6
   16dd4:	2128      	movs	r1, #40	; 0x28
   16dd6:	4620      	mov	r0, r4
   16dd8:	f7fd f9fc 	bl	141d4 <dw1000_write_reg>

    /* configure TX clocks */
    dw1000_write_reg(inst, PMSC_ID,PMSC_CTRL0_OFFSET, 0x22, 1);
   16ddc:	2501      	movs	r5, #1
   16dde:	9502      	str	r5, [sp, #8]
   16de0:	2222      	movs	r2, #34	; 0x22
   16de2:	2300      	movs	r3, #0
   16de4:	e9cd 2300 	strd	r2, r3, [sp]
   16de8:	4632      	mov	r2, r6
   16dea:	2136      	movs	r1, #54	; 0x36
   16dec:	4620      	mov	r0, r4
   16dee:	f7fd f9f1 	bl	141d4 <dw1000_write_reg>
    dw1000_write_reg(inst, PMSC_ID, 0x1, 0x07, 1);
   16df2:	9502      	str	r5, [sp, #8]
   16df4:	2207      	movs	r2, #7
   16df6:	2300      	movs	r3, #0
   16df8:	e9cd 2300 	strd	r2, r3, [sp]
   16dfc:	462a      	mov	r2, r5
   16dfe:	2136      	movs	r1, #54	; 0x36
   16e00:	4620      	mov	r0, r4
   16e02:	f7fd f9e7 	bl	141d4 <dw1000_write_reg>

    /* disable fine grain TX seq */
    dw1000_write_reg(inst, PMSC_ID, PMSC_TXFINESEQ_OFFSET,
   16e06:	2302      	movs	r3, #2
   16e08:	9302      	str	r3, [sp, #8]
   16e0a:	2200      	movs	r2, #0
   16e0c:	2300      	movs	r3, #0
   16e0e:	e9cd 2300 	strd	r2, r3, [sp]
   16e12:	2226      	movs	r2, #38	; 0x26
   16e14:	2136      	movs	r1, #54	; 0x36
   16e16:	4620      	mov	r0, r4
   16e18:	f7fd f9dc 	bl	141d4 <dw1000_write_reg>
                     PMSC_TXFINESEQ_DISABLE, sizeof(uint16_t));

    /* configure CW mode */
    dw1000_write_reg(inst, TX_CAL_ID, TC_PGTEST_OFFSET,
   16e1c:	9502      	str	r5, [sp, #8]
   16e1e:	2213      	movs	r2, #19
   16e20:	2300      	movs	r3, #0
   16e22:	e9cd 2300 	strd	r2, r3, [sp]
   16e26:	220c      	movs	r2, #12
   16e28:	212a      	movs	r1, #42	; 0x2a
   16e2a:	4620      	mov	r0, r4
   16e2c:	f7fd f9d2 	bl	141d4 <dw1000_write_reg>
                     TC_PGTEST_CW, TC_PGTEST_LEN);
}
   16e30:	b005      	add	sp, #20
   16e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
        assert(0);
   16e34:	2300      	movs	r3, #0
   16e36:	461a      	mov	r2, r3
   16e38:	4619      	mov	r1, r3
   16e3a:	4618      	mov	r0, r3
   16e3c:	f7f2 f892 	bl	8f64 <__assert_func>
    assert(rc == 0);
   16e40:	2300      	movs	r3, #0
   16e42:	461a      	mov	r2, r3
   16e44:	4619      	mov	r1, r3
   16e46:	4618      	mov	r0, r3
   16e48:	f7f2 f88c 	bl	8f64 <__assert_func>
    assert(rc == 0);
   16e4c:	2300      	movs	r3, #0
   16e4e:	461a      	mov	r2, r3
   16e50:	4619      	mov	r1, r3
   16e52:	4618      	mov	r0, r3
   16e54:	f7f2 f886 	bl	8f64 <__assert_func>
    assert(rc == 0);
   16e58:	2300      	movs	r3, #0
   16e5a:	461a      	mov	r2, r3
   16e5c:	4619      	mov	r1, r3
   16e5e:	4618      	mov	r0, r3
   16e60:	f7f2 f880 	bl	8f64 <__assert_func>
   16e64:	00024198 	.word	0x00024198
   16e68:	000241c8 	.word	0x000241c8
   16e6c:	00024268 	.word	0x00024268
   16e70:	005fff00 	.word	0x005fff00

00016e74 <dw1000_phy_sysclk_XTAL>:
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_sysclk_XTAL(struct _dw1000_dev_instance_t * inst)
{
   16e74:	b510      	push	{r4, lr}
   16e76:	b084      	sub	sp, #16
   16e78:	4604      	mov	r4, r0
    uint8_t reg = (uint8_t) dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint8_t));
   16e7a:	2301      	movs	r3, #1
   16e7c:	2200      	movs	r2, #0
   16e7e:	2136      	movs	r1, #54	; 0x36
   16e80:	f7fd f938 	bl	140f4 <dw1000_read_reg>
    reg &= (uint8_t)~PMSC_CTRL0_SYSCLKS_19M & (uint8_t)~PMSC_CTRL0_SYSCLKS_125M;
   16e84:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
    reg |= (uint8_t) PMSC_CTRL0_SYSCLKS_19M;
   16e88:	f043 0301 	orr.w	r3, r3, #1
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, reg, sizeof(uint8_t));
   16e8c:	2201      	movs	r2, #1
   16e8e:	9202      	str	r2, [sp, #8]
   16e90:	2200      	movs	r2, #0
   16e92:	9300      	str	r3, [sp, #0]
   16e94:	9201      	str	r2, [sp, #4]
   16e96:	2136      	movs	r1, #54	; 0x36
   16e98:	4620      	mov	r0, r4
   16e9a:	f7fd f99b 	bl	141d4 <dw1000_write_reg>
}
   16e9e:	b004      	add	sp, #16
   16ea0:	bd10      	pop	{r4, pc}

00016ea2 <dw1000_phy_sysclk_PLL>:
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_sysclk_PLL(struct _dw1000_dev_instance_t * inst)
{
   16ea2:	b510      	push	{r4, lr}
   16ea4:	b084      	sub	sp, #16
   16ea6:	4604      	mov	r4, r0
    uint8_t reg = (uint8_t) dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint8_t));
   16ea8:	2301      	movs	r3, #1
   16eaa:	2200      	movs	r2, #0
   16eac:	2136      	movs	r1, #54	; 0x36
   16eae:	f7fd f921 	bl	140f4 <dw1000_read_reg>
    reg &= (uint8_t)~PMSC_CTRL0_SYSCLKS_19M & (uint8_t)~PMSC_CTRL0_SYSCLKS_125M;
   16eb2:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
    reg |= (uint8_t) PMSC_CTRL0_SYSCLKS_125M;
   16eb6:	f043 0302 	orr.w	r3, r3, #2
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, reg, sizeof(uint8_t));
   16eba:	2201      	movs	r2, #1
   16ebc:	9202      	str	r2, [sp, #8]
   16ebe:	2200      	movs	r2, #0
   16ec0:	9300      	str	r3, [sp, #0]
   16ec2:	9201      	str	r2, [sp, #4]
   16ec4:	2136      	movs	r1, #54	; 0x36
   16ec6:	4620      	mov	r0, r4
   16ec8:	f7fd f984 	bl	141d4 <dw1000_write_reg>
}
   16ecc:	b004      	add	sp, #16
   16ece:	bd10      	pop	{r4, pc}

00016ed0 <dw1000_phy_txclk_PLL>:
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_txclk_PLL(struct _dw1000_dev_instance_t * inst)
{
   16ed0:	b510      	push	{r4, lr}
   16ed2:	b084      	sub	sp, #16
   16ed4:	4604      	mov	r4, r0
    uint8_t reg = (uint8_t) dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint8_t));
   16ed6:	2301      	movs	r3, #1
   16ed8:	2200      	movs	r2, #0
   16eda:	2136      	movs	r1, #54	; 0x36
   16edc:	f7fd f90a 	bl	140f4 <dw1000_read_reg>
    reg &= (uint8_t)~PMSC_CTRL0_TXCLKS_19M & (uint8_t)~PMSC_CTRL0_TXCLKS_125M;
   16ee0:	f000 03cf 	and.w	r3, r0, #207	; 0xcf
    reg |= (uint8_t) PMSC_CTRL0_TXCLKS_125M;
   16ee4:	f043 0320 	orr.w	r3, r3, #32
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, reg, sizeof(uint8_t));
   16ee8:	2201      	movs	r2, #1
   16eea:	9202      	str	r2, [sp, #8]
   16eec:	2200      	movs	r2, #0
   16eee:	9300      	str	r3, [sp, #0]
   16ef0:	9201      	str	r2, [sp, #4]
   16ef2:	2136      	movs	r1, #54	; 0x36
   16ef4:	4620      	mov	r0, r4
   16ef6:	f7fd f96d 	bl	141d4 <dw1000_write_reg>
}
   16efa:	b004      	add	sp, #16
   16efc:	bd10      	pop	{r4, pc}

00016efe <dw1000_phy_sysclk_LDE>:
 * API to enable running of the LDE algorithm.
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_sysclk_LDE(struct _dw1000_dev_instance_t * inst){
   16efe:	b530      	push	{r4, r5, lr}
   16f00:	b085      	sub	sp, #20
   16f02:	4604      	mov	r4, r0
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, 0x01, sizeof(uint8_t));
   16f04:	2501      	movs	r5, #1
   16f06:	9502      	str	r5, [sp, #8]
   16f08:	2201      	movs	r2, #1
   16f0a:	2300      	movs	r3, #0
   16f0c:	e9cd 2300 	strd	r2, r3, [sp]
   16f10:	2200      	movs	r2, #0
   16f12:	2136      	movs	r1, #54	; 0x36
   16f14:	f7fd f95e 	bl	141d4 <dw1000_write_reg>
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET + 1 , 0x03, sizeof(uint8_t));
   16f18:	9502      	str	r5, [sp, #8]
   16f1a:	2203      	movs	r2, #3
   16f1c:	2300      	movs	r3, #0
   16f1e:	e9cd 2300 	strd	r2, r3, [sp]
   16f22:	462a      	mov	r2, r5
   16f24:	2136      	movs	r1, #54	; 0x36
   16f26:	4620      	mov	r0, r4
   16f28:	f7fd f954 	bl	141d4 <dw1000_write_reg>
}
   16f2c:	b005      	add	sp, #20
   16f2e:	bd30      	pop	{r4, r5, pc}

00016f30 <dw1000_phy_sysclk_SEQ>:
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_sysclk_SEQ(struct _dw1000_dev_instance_t * inst)
{
   16f30:	b510      	push	{r4, lr}
   16f32:	b084      	sub	sp, #16
   16f34:	4604      	mov	r4, r0
    uint8_t reg = (uint8_t) dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint8_t));
   16f36:	2301      	movs	r3, #1
   16f38:	2200      	movs	r2, #0
   16f3a:	2136      	movs	r1, #54	; 0x36
   16f3c:	f7fd f8da 	bl	140f4 <dw1000_read_reg>
    reg &= (uint8_t)~PMSC_CTRL0_SYSCLKS_19M & (uint8_t)~PMSC_CTRL0_SYSCLKS_125M;
   16f40:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, reg, sizeof(uint8_t));
   16f44:	2301      	movs	r3, #1
   16f46:	9302      	str	r3, [sp, #8]
   16f48:	2200      	movs	r2, #0
   16f4a:	9000      	str	r0, [sp, #0]
   16f4c:	9201      	str	r2, [sp, #4]
   16f4e:	2136      	movs	r1, #54	; 0x36
   16f50:	4620      	mov	r0, r4
   16f52:	f7fd f93f 	bl	141d4 <dw1000_write_reg>
}
   16f56:	b004      	add	sp, #16
   16f58:	bd10      	pop	{r4, pc}

00016f5a <dw1000_phy_disable_sequencing>:
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_disable_sequencing(struct _dw1000_dev_instance_t * inst)
{
   16f5a:	b510      	push	{r4, lr}
   16f5c:	b084      	sub	sp, #16
   16f5e:	4604      	mov	r4, r0
    dw1000_phy_sysclk_XTAL(inst);
   16f60:	f7ff ff88 	bl	16e74 <dw1000_phy_sysclk_XTAL>
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE, sizeof(uint16_t)); // Disable PMSC ctrl of RF and RX clk blocks
   16f64:	2302      	movs	r3, #2
   16f66:	9302      	str	r3, [sp, #8]
   16f68:	2200      	movs	r2, #0
   16f6a:	2300      	movs	r3, #0
   16f6c:	e9cd 2300 	strd	r2, r3, [sp]
   16f70:	2204      	movs	r2, #4
   16f72:	2136      	movs	r1, #54	; 0x36
   16f74:	4620      	mov	r0, r4
   16f76:	f7fd f92d 	bl	141d4 <dw1000_write_reg>
}
   16f7a:	b004      	add	sp, #16
   16f7c:	bd10      	pop	{r4, pc}

00016f7e <dw1000_phy_config_lde>:
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @param prf   This is the PRF index (0 or 1) 0 corresponds to 16 and 1 to 64 PRF.
 * @return void
 */
void dw1000_phy_config_lde(struct _dw1000_dev_instance_t * inst, int prfIndex)
{
   16f7e:	b530      	push	{r4, r5, lr}
   16f80:	b085      	sub	sp, #20
   16f82:	4604      	mov	r4, r0
   16f84:	460d      	mov	r5, r1
    dw1000_write_reg(inst, LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1, sizeof(uint8_t)); // 8-bit configuration register
   16f86:	2301      	movs	r3, #1
   16f88:	9302      	str	r3, [sp, #8]
   16f8a:	226d      	movs	r2, #109	; 0x6d
   16f8c:	2300      	movs	r3, #0
   16f8e:	e9cd 2300 	strd	r2, r3, [sp]
   16f92:	f640 0206 	movw	r2, #2054	; 0x806
   16f96:	212e      	movs	r1, #46	; 0x2e
   16f98:	f7fd f91c 	bl	141d4 <dw1000_write_reg>

    if(prfIndex)
   16f9c:	b175      	cbz	r5, 16fbc <dw1000_phy_config_lde+0x3e>
        dw1000_write_reg(inst, LDE_IF_ID, LDE_CFG2_OFFSET, LDE_PARAM3_64, sizeof(uint16_t)); // 16-bit LDE configuration tuning register
   16f9e:	2302      	movs	r3, #2
   16fa0:	9302      	str	r3, [sp, #8]
   16fa2:	f240 6207 	movw	r2, #1543	; 0x607
   16fa6:	2300      	movs	r3, #0
   16fa8:	e9cd 2300 	strd	r2, r3, [sp]
   16fac:	f641 0206 	movw	r2, #6150	; 0x1806
   16fb0:	212e      	movs	r1, #46	; 0x2e
   16fb2:	4620      	mov	r0, r4
   16fb4:	f7fd f90e 	bl	141d4 <dw1000_write_reg>
    else
        dw1000_write_reg(inst, LDE_IF_ID, LDE_CFG2_OFFSET, LDE_PARAM3_16, sizeof(uint16_t));
}
   16fb8:	b005      	add	sp, #20
   16fba:	bd30      	pop	{r4, r5, pc}
        dw1000_write_reg(inst, LDE_IF_ID, LDE_CFG2_OFFSET, LDE_PARAM3_16, sizeof(uint16_t));
   16fbc:	2302      	movs	r3, #2
   16fbe:	9302      	str	r3, [sp, #8]
   16fc0:	f241 6207 	movw	r2, #5639	; 0x1607
   16fc4:	2300      	movs	r3, #0
   16fc6:	e9cd 2300 	strd	r2, r3, [sp]
   16fca:	f641 0206 	movw	r2, #6150	; 0x1806
   16fce:	212e      	movs	r1, #46	; 0x2e
   16fd0:	4620      	mov	r0, r4
   16fd2:	f7fd f8ff 	bl	141d4 <dw1000_write_reg>
}
   16fd6:	e7ef      	b.n	16fb8 <dw1000_phy_config_lde+0x3a>

00016fd8 <dw1000_phy_config_txrf>:
 * @param inst      Pointer to dw1000_dev_instance_t.
 * @param config    Pointer to dw1000_dev_txrf_config_t.
 * @return void
 */
void dw1000_phy_config_txrf(struct _dw1000_dev_instance_t * inst, struct uwb_dev_txrf_config *config)
{
   16fd8:	b570      	push	{r4, r5, r6, lr}
   16fda:	b084      	sub	sp, #16
   16fdc:	4605      	mov	r5, r0
   16fde:	460c      	mov	r4, r1
    // Configure RF TX PG_DELAY
    dw1000_write_reg(inst, TX_CAL_ID, TC_PGDELAY_OFFSET, config->PGdly, sizeof(uint8_t));
   16fe0:	780b      	ldrb	r3, [r1, #0]
   16fe2:	2201      	movs	r2, #1
   16fe4:	9202      	str	r2, [sp, #8]
   16fe6:	2600      	movs	r6, #0
   16fe8:	9300      	str	r3, [sp, #0]
   16fea:	9601      	str	r6, [sp, #4]
   16fec:	220b      	movs	r2, #11
   16fee:	212a      	movs	r1, #42	; 0x2a
   16ff0:	f7fd f8f0 	bl	141d4 <dw1000_write_reg>
    // Configure TX power
    dw1000_write_reg(inst, TX_POWER_ID, 0, config->power, sizeof(uint32_t));
   16ff4:	6863      	ldr	r3, [r4, #4]
   16ff6:	2204      	movs	r2, #4
   16ff8:	9202      	str	r2, [sp, #8]
   16ffa:	9300      	str	r3, [sp, #0]
   16ffc:	9601      	str	r6, [sp, #4]
   16ffe:	4632      	mov	r2, r6
   17000:	211e      	movs	r1, #30
   17002:	4628      	mov	r0, r5
   17004:	f7fd f8e6 	bl	141d4 <dw1000_write_reg>
}
   17008:	b004      	add	sp, #16
   1700a:	bd70      	pop	{r4, r5, r6, pc}

0001700c <dw1000_phy_init>:
{
   1700c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1700e:	b085      	sub	sp, #20
   17010:	4604      	mov	r4, r0
    if (txrf_config == NULL)
   17012:	2900      	cmp	r1, #0
   17014:	f000 80af 	beq.w	17176 <dw1000_phy_init+0x16a>
   17018:	460e      	mov	r6, r1
        memcpy(&inst->uwb_dev.config.txrf, txrf_config, sizeof(struct uwb_dev_txrf_config));
   1701a:	680a      	ldr	r2, [r1, #0]
   1701c:	684b      	ldr	r3, [r1, #4]
   1701e:	f8c0 2524 	str.w	r2, [r0, #1316]	; 0x524
   17022:	f8c0 3528 	str.w	r3, [r0, #1320]	; 0x528
    dw1000_softreset(inst);
   17026:	4620      	mov	r0, r4
   17028:	f7fd f973 	bl	14312 <dw1000_softreset>
    dw1000_phy_sysclk_XTAL(inst);
   1702c:	4620      	mov	r0, r4
   1702e:	f7ff ff21 	bl	16e74 <dw1000_phy_sysclk_XTAL>
    dw1000_gpio_config_leds(inst, DWT_LEDS_ENABLE | DWT_LEDS_INIT_BLINK);
   17032:	2106      	movs	r1, #6
   17034:	4620      	mov	r0, r4
   17036:	f000 fdf3 	bl	17c20 <dw1000_gpio_config_leds>
    reg = dw1000_read_reg(inst, EXT_SYNC_ID, EC_CTRL_OFFSET, sizeof(uint8_t));
   1703a:	2301      	movs	r3, #1
   1703c:	2200      	movs	r2, #0
   1703e:	2124      	movs	r1, #36	; 0x24
   17040:	4620      	mov	r0, r4
   17042:	f7fd f857 	bl	140f4 <dw1000_read_reg>
   17046:	b2c0      	uxtb	r0, r0
    reg |= EC_CTRL_PLLLCK;
   17048:	f040 0004 	orr.w	r0, r0, #4
    dw1000_write_reg(inst, EXT_SYNC_ID, EC_CTRL_OFFSET, reg, sizeof(uint8_t));
   1704c:	2301      	movs	r3, #1
   1704e:	9302      	str	r3, [sp, #8]
   17050:	2200      	movs	r2, #0
   17052:	9000      	str	r0, [sp, #0]
   17054:	9201      	str	r2, [sp, #4]
   17056:	2124      	movs	r1, #36	; 0x24
   17058:	4620      	mov	r0, r4
   1705a:	f7fd f8bb 	bl	141d4 <dw1000_write_reg>
    otp_addr = (uint32_t) _dw1000_otp_read(inst, OTP_XTRIM_ADDRESS) & 0xffff;    // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
   1705e:	211e      	movs	r1, #30
   17060:	4620      	mov	r0, r4
   17062:	f000 fe46 	bl	17cf2 <_dw1000_otp_read>
   17066:	b285      	uxth	r5, r0
    inst->otp_rev = (otp_addr >> 8) & 0xff;                                               // OTP revision is next byte
   17068:	f3c0 2007 	ubfx	r0, r0, #8, #8
   1706c:	f8a4 057c 	strh.w	r0, [r4, #1404]	; 0x57c
    ldo_tune = _dw1000_otp_read(inst, OTP_LDOTUNE_ADDRESS);
   17070:	2104      	movs	r1, #4
   17072:	4620      	mov	r0, r4
   17074:	f000 fe3d 	bl	17cf2 <_dw1000_otp_read>
    if((ldo_tune & 0xFF) != 0){
   17078:	f010 0fff 	tst.w	r0, #255	; 0xff
   1707c:	d17e      	bne.n	1717c <dw1000_phy_init+0x170>
    inst->part_id = _dw1000_otp_read(inst, OTP_PARTID_ADDRESS);
   1707e:	2106      	movs	r1, #6
   17080:	4620      	mov	r0, r4
   17082:	f000 fe36 	bl	17cf2 <_dw1000_otp_read>
   17086:	f8c4 0574 	str.w	r0, [r4, #1396]	; 0x574
    inst->lot_id = _dw1000_otp_read(inst, OTP_LOTID_ADDRESS);
   1708a:	2107      	movs	r1, #7
   1708c:	4620      	mov	r0, r4
   1708e:	f000 fe30 	bl	17cf2 <_dw1000_otp_read>
   17092:	f8c4 0578 	str.w	r0, [r4, #1400]	; 0x578
    inst->otp_vbat = _dw1000_otp_read(inst, OTP_VBAT_ADDRESS);
   17096:	2108      	movs	r1, #8
   17098:	4620      	mov	r0, r4
   1709a:	f000 fe2a 	bl	17cf2 <_dw1000_otp_read>
   1709e:	f884 057e 	strb.w	r0, [r4, #1406]	; 0x57e
    inst->otp_temp = _dw1000_otp_read(inst, OTP_VTEMP_ADDRESS);
   170a2:	2109      	movs	r1, #9
   170a4:	4620      	mov	r0, r4
   170a6:	f000 fe24 	bl	17cf2 <_dw1000_otp_read>
   170aa:	f884 057f 	strb.w	r0, [r4, #1407]	; 0x57f
    inst->otp_xtal_trim = otp_addr & 0x1F;
   170ae:	f005 051f 	and.w	r5, r5, #31
   170b2:	f884 5580 	strb.w	r5, [r4, #1408]	; 0x580
    if (inst->otp_xtal_trim && (inst->uwb_dev.config.rx.xtalTrim == 0xff)) {
   170b6:	b11d      	cbz	r5, 170c0 <dw1000_phy_init+0xb4>
   170b8:	f894 251e 	ldrb.w	r2, [r4, #1310]	; 0x51e
   170bc:	2aff      	cmp	r2, #255	; 0xff
   170be:	d06f      	beq.n	171a0 <dw1000_phy_init+0x194>
    reg = (3 << 5) | (inst->uwb_dev.config.rx.xtalTrim & FS_XTALT_MASK);
   170c0:	f994 351e 	ldrsb.w	r3, [r4, #1310]	; 0x51e
   170c4:	f003 031f 	and.w	r3, r3, #31
   170c8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    dw1000_write_reg(inst, FS_CTRL_ID, FS_XTALT_OFFSET, reg, sizeof(uint8_t));
   170cc:	2201      	movs	r2, #1
   170ce:	9202      	str	r2, [sp, #8]
   170d0:	9300      	str	r3, [sp, #0]
   170d2:	2300      	movs	r3, #0
   170d4:	9301      	str	r3, [sp, #4]
   170d6:	220e      	movs	r2, #14
   170d8:	212b      	movs	r1, #43	; 0x2b
   170da:	4620      	mov	r0, r4
   170dc:	f7fd f87a 	bl	141d4 <dw1000_write_reg>
    if(inst->uwb_dev.config.LDE_enable)
   170e0:	f894 352d 	ldrb.w	r3, [r4, #1325]	; 0x52d
   170e4:	f013 0f04 	tst.w	r3, #4
   170e8:	d15d      	bne.n	171a6 <dw1000_phy_init+0x19a>
    dw1000_phy_sysclk_SEQ(inst);    // Enable clocks for sequencing
   170ea:	4620      	mov	r0, r4
   170ec:	f7ff ff20 	bl	16f30 <dw1000_phy_sysclk_SEQ>
    reg = dw1000_read_reg(inst, AON_ID, AON_CFG1_OFFSET, sizeof(uint8_t));
   170f0:	2301      	movs	r3, #1
   170f2:	220a      	movs	r2, #10
   170f4:	212c      	movs	r1, #44	; 0x2c
   170f6:	4620      	mov	r0, r4
   170f8:	f7fc fffc 	bl	140f4 <dw1000_read_reg>
    reg |= ~AON_CFG1_SMXX;
   170fc:	f060 0002 	orn	r0, r0, #2
   17100:	b2c0      	uxtb	r0, r0
    dw1000_write_reg(inst, AON_ID, AON_CFG1_OFFSET, reg, sizeof(uint8_t));
   17102:	2301      	movs	r3, #1
   17104:	9302      	str	r3, [sp, #8]
   17106:	2500      	movs	r5, #0
   17108:	9000      	str	r0, [sp, #0]
   1710a:	9501      	str	r5, [sp, #4]
   1710c:	220a      	movs	r2, #10
   1710e:	212c      	movs	r1, #44	; 0x2c
   17110:	4620      	mov	r0, r4
   17112:	f7fd f85f 	bl	141d4 <dw1000_write_reg>
    dw1000_write_reg(inst, AON_ID, AON_WCFG_OFFSET , AON_WCFG_ONW_RADC, sizeof(uint16_t));
   17116:	2702      	movs	r7, #2
   17118:	9702      	str	r7, [sp, #8]
   1711a:	2201      	movs	r2, #1
   1711c:	2300      	movs	r3, #0
   1711e:	e9cd 2300 	strd	r2, r3, [sp]
   17122:	462a      	mov	r2, r5
   17124:	212c      	movs	r1, #44	; 0x2c
   17126:	4620      	mov	r0, r4
   17128:	f7fd f854 	bl	141d4 <dw1000_write_reg>
    dw1000_phy_set_rx_antennadelay(inst, inst->uwb_dev.rx_antenna_delay);
   1712c:	f8b4 34cc 	ldrh.w	r3, [r4, #1228]	; 0x4cc
   17130:	9702      	str	r7, [sp, #8]
   17132:	9300      	str	r3, [sp, #0]
   17134:	9501      	str	r5, [sp, #4]
   17136:	f641 0204 	movw	r2, #6148	; 0x1804
   1713a:	212e      	movs	r1, #46	; 0x2e
   1713c:	4620      	mov	r0, r4
   1713e:	f7fd f849 	bl	141d4 <dw1000_write_reg>
    dw1000_phy_set_tx_antennadelay(inst, inst->uwb_dev.tx_antenna_delay);
   17142:	f8b4 34ce 	ldrh.w	r3, [r4, #1230]	; 0x4ce
   17146:	9702      	str	r7, [sp, #8]
   17148:	9300      	str	r3, [sp, #0]
   1714a:	9501      	str	r5, [sp, #4]
   1714c:	462a      	mov	r2, r5
   1714e:	2118      	movs	r1, #24
   17150:	4620      	mov	r0, r4
   17152:	f7fd f83f 	bl	141d4 <dw1000_write_reg>
    dw1000_phy_config_txrf(inst, txrf_config);
   17156:	4631      	mov	r1, r6
   17158:	4620      	mov	r0, r4
   1715a:	f7ff ff3d 	bl	16fd8 <dw1000_phy_config_txrf>
    inst->sys_cfg_reg = dw1000_read_reg(inst, SYS_CFG_ID, 0, sizeof(uint32_t)) ; // Read sysconfig register
   1715e:	2304      	movs	r3, #4
   17160:	462a      	mov	r2, r5
   17162:	4619      	mov	r1, r3
   17164:	4620      	mov	r0, r4
   17166:	f7fc ffc5 	bl	140f4 <dw1000_read_reg>
   1716a:	f8c4 0584 	str.w	r0, [r4, #1412]	; 0x584
}
   1716e:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   17172:	b005      	add	sp, #20
   17174:	bdf0      	pop	{r4, r5, r6, r7, pc}
        txrf_config = &inst->uwb_dev.config.txrf;
   17176:	f200 5624 	addw	r6, r0, #1316	; 0x524
   1717a:	e754      	b.n	17026 <dw1000_phy_init+0x1a>
        dw1000_write_reg(inst, OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK, sizeof(uint8_t)); // Set load LDE kick bit
   1717c:	2301      	movs	r3, #1
   1717e:	9302      	str	r3, [sp, #8]
   17180:	2202      	movs	r2, #2
   17182:	2300      	movs	r3, #0
   17184:	e9cd 2300 	strd	r2, r3, [sp]
   17188:	2212      	movs	r2, #18
   1718a:	212d      	movs	r1, #45	; 0x2d
   1718c:	4620      	mov	r0, r4
   1718e:	f7fd f821 	bl	141d4 <dw1000_write_reg>
        inst->uwb_dev.status.LDO_enabled = 1; // LDO tune must be kicked at wake-up
   17192:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   17196:	f043 0320 	orr.w	r3, r3, #32
   1719a:	f884 3509 	strb.w	r3, [r4, #1289]	; 0x509
   1719e:	e76e      	b.n	1707e <dw1000_phy_init+0x72>
        inst->uwb_dev.config.rx.xtalTrim = inst->otp_xtal_trim;
   171a0:	f884 551e 	strb.w	r5, [r4, #1310]	; 0x51e
   171a4:	e78c      	b.n	170c0 <dw1000_phy_init+0xb4>
    dw1000_phy_sysclk_LDE(inst);
   171a6:	4620      	mov	r0, r4
   171a8:	f7ff fea9 	bl	16efe <dw1000_phy_sysclk_LDE>
    dw1000_write_reg(inst, OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD, sizeof(uint16_t)); // Set load LDE kick bit
   171ac:	2302      	movs	r3, #2
   171ae:	9302      	str	r3, [sp, #8]
   171b0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   171b4:	2300      	movs	r3, #0
   171b6:	e9cd 2300 	strd	r2, r3, [sp]
   171ba:	2206      	movs	r2, #6
   171bc:	212d      	movs	r1, #45	; 0x2d
   171be:	4620      	mov	r0, r4
   171c0:	f7fd f808 	bl	141d4 <dw1000_write_reg>
    dpl_cputime_delay_usecs(120); // Allow time for code to upload (should take up to 120 us)
   171c4:	2078      	movs	r0, #120	; 0x78
   171c6:	f7f7 f930 	bl	e42a <dpl_cputime_delay_usecs>
    dw1000_phy_sysclk_SEQ(inst); // Enable clocks for sequencing
   171ca:	4620      	mov	r0, r4
   171cc:	f7ff feb0 	bl	16f30 <dw1000_phy_sysclk_SEQ>
    inst->uwb_dev.status.LDE_enabled = 1;
   171d0:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   171d4:	f043 0310 	orr.w	r3, r3, #16
   171d8:	f884 3509 	strb.w	r3, [r4, #1289]	; 0x509
}
   171dc:	e785      	b.n	170ea <dw1000_phy_init+0xde>

000171de <dw1000_phy_rx_reset>:
 *
 * @param inst   Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_rx_reset(struct _dw1000_dev_instance_t * inst)
{
   171de:	b570      	push	{r4, r5, r6, lr}
   171e0:	b084      	sub	sp, #16
   171e2:	4604      	mov	r4, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   171e4:	f500 65ad 	add.w	r5, r0, #1384	; 0x568
   171e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   171ec:	4628      	mov	r0, r5
   171ee:	f7f3 fc2b 	bl	aa48 <os_mutex_pend>
    dpl_error_t err = dpl_mutex_pend(&inst->mutex, DPL_WAIT_FOREVER);
    if (err != DPL_OK) {
   171f2:	b138      	cbz	r0, 17204 <dw1000_phy_rx_reset+0x26>
        inst->uwb_dev.status.mtx_error = 1;
   171f4:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   171f8:	f043 0308 	orr.w	r3, r3, #8
   171fc:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
    // Clear RX reset
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR, sizeof(uint8_t));

    err = dpl_mutex_release(&inst->mutex);
    assert(err == DPL_OK);
}
   17200:	b004      	add	sp, #16
   17202:	bd70      	pop	{r4, r5, r6, pc}
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_RX, sizeof(uint8_t));
   17204:	2601      	movs	r6, #1
   17206:	9602      	str	r6, [sp, #8]
   17208:	22e0      	movs	r2, #224	; 0xe0
   1720a:	2300      	movs	r3, #0
   1720c:	e9cd 2300 	strd	r2, r3, [sp]
   17210:	2203      	movs	r2, #3
   17212:	2136      	movs	r1, #54	; 0x36
   17214:	4620      	mov	r0, r4
   17216:	f7fc ffdd 	bl	141d4 <dw1000_write_reg>
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR, sizeof(uint8_t));
   1721a:	9602      	str	r6, [sp, #8]
   1721c:	22f0      	movs	r2, #240	; 0xf0
   1721e:	2300      	movs	r3, #0
   17220:	e9cd 2300 	strd	r2, r3, [sp]
   17224:	2203      	movs	r2, #3
   17226:	2136      	movs	r1, #54	; 0x36
   17228:	4620      	mov	r0, r4
   1722a:	f7fc ffd3 	bl	141d4 <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   1722e:	4628      	mov	r0, r5
   17230:	f7f3 fbae 	bl	a990 <os_mutex_release>
    assert(err == DPL_OK);
   17234:	2800      	cmp	r0, #0
   17236:	d0e3      	beq.n	17200 <dw1000_phy_rx_reset+0x22>
   17238:	2300      	movs	r3, #0
   1723a:	461a      	mov	r2, r3
   1723c:	4619      	mov	r1, r3
   1723e:	4618      	mov	r0, r3
   17240:	f7f1 fe90 	bl	8f64 <__assert_func>
   17244:	0000      	movs	r0, r0
	...

00017248 <dw1000_phy_forcetrxoff>:
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_forcetrxoff(struct _dw1000_dev_instance_t * inst)
{
   17248:	b5f0      	push	{r4, r5, r6, r7, lr}
   1724a:	b085      	sub	sp, #20
   1724c:	4605      	mov	r5, r0
    dpl_error_t err;
    struct uwb_mac_interface * cbs = NULL;
    uint32_t mask = dw1000_read_reg(inst, SYS_MASK_ID, 0 , sizeof(uint32_t)) ; // Read set interrupt mask
   1724e:	2304      	movs	r3, #4
   17250:	2200      	movs	r2, #0
   17252:	210e      	movs	r1, #14
   17254:	f7fc ff4e 	bl	140f4 <dw1000_read_reg>
   17258:	4604      	mov	r4, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   1725a:	f505 66ad 	add.w	r6, r5, #1384	; 0x568
   1725e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17262:	4630      	mov	r0, r6
   17264:	f7f3 fbf0 	bl	aa48 <os_mutex_pend>
    // We can disable the radio, but before the status is cleared an interrupt can be set (e.g. the
    // event has just happened before the radio was disabled)
    // thus we need to disable interrupt during this operation

    err = dpl_mutex_pend(&inst->mutex, DPL_WAIT_FOREVER);
    if (err != DPL_OK) {
   17268:	b138      	cbz	r0, 1727a <dw1000_phy_forcetrxoff+0x32>
        inst->uwb_dev.status.mtx_error = 1;
   1726a:	f895 350b 	ldrb.w	r3, [r5, #1291]	; 0x50b
   1726e:	f043 0308 	orr.w	r3, r3, #8
   17272:	f885 350b 	strb.w	r3, [r5, #1291]	; 0x50b
    if (dpl_sem_get_count(&inst->tx_sem) == 0) {
        err = dpl_sem_release(&inst->tx_sem);
        assert(err == DPL_OK);
        inst->uwb_dev.status.sem_force_released = 1;
    }
}
   17276:	b005      	add	sp, #20
   17278:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dw1000_write_reg(inst, SYS_MASK_ID, 0, 0, sizeof(uint32_t)) ; // Clear interrupt mask - so we don't get any unwanted events
   1727a:	2704      	movs	r7, #4
   1727c:	9702      	str	r7, [sp, #8]
   1727e:	2200      	movs	r2, #0
   17280:	2300      	movs	r3, #0
   17282:	e9cd 2300 	strd	r2, r3, [sp]
   17286:	210e      	movs	r1, #14
   17288:	4628      	mov	r0, r5
   1728a:	f7fc ffa3 	bl	141d4 <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TRXOFF, sizeof(uint8_t)) ; // Disable the radio
   1728e:	2301      	movs	r3, #1
   17290:	9302      	str	r3, [sp, #8]
   17292:	2240      	movs	r2, #64	; 0x40
   17294:	2300      	movs	r3, #0
   17296:	e9cd 2300 	strd	r2, r3, [sp]
   1729a:	2200      	movs	r2, #0
   1729c:	210d      	movs	r1, #13
   1729e:	4628      	mov	r0, r5
   172a0:	f7fc ff98 	bl	141d4 <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_STATUS_ID, 0, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD| SYS_STATUS_TXBERR), sizeof(uint32_t));
   172a4:	9702      	str	r7, [sp, #8]
   172a6:	a32e      	add	r3, pc, #184	; (adr r3, 17360 <dw1000_phy_forcetrxoff+0x118>)
   172a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   172ac:	e9cd 2300 	strd	r2, r3, [sp]
   172b0:	2200      	movs	r2, #0
   172b2:	210f      	movs	r1, #15
   172b4:	4628      	mov	r0, r5
   172b6:	f7fc ff8d 	bl	141d4 <dw1000_write_reg>
    if (inst->uwb_dev.config.dblbuffon_enabled)
   172ba:	f895 352c 	ldrb.w	r3, [r5, #1324]	; 0x52c
   172be:	f013 0f10 	tst.w	r3, #16
   172c2:	d130      	bne.n	17326 <dw1000_phy_forcetrxoff+0xde>
    dw1000_write_reg(inst, SYS_MASK_ID, 0, mask, sizeof(uint32_t)); // Restore mask to what it was
   172c4:	2304      	movs	r3, #4
   172c6:	9302      	str	r3, [sp, #8]
   172c8:	2200      	movs	r2, #0
   172ca:	9400      	str	r4, [sp, #0]
   172cc:	9201      	str	r2, [sp, #4]
   172ce:	210e      	movs	r1, #14
   172d0:	4628      	mov	r0, r5
   172d2:	f7fc ff7f 	bl	141d4 <dw1000_write_reg>
    if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
   172d6:	f8d5 4530 	ldr.w	r4, [r5, #1328]	; 0x530
   172da:	bb64      	cbnz	r4, 17336 <dw1000_phy_forcetrxoff+0xee>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   172dc:	4630      	mov	r0, r6
   172de:	f7f3 fb57 	bl	a990 <os_mutex_release>
    assert(err == DPL_OK);
   172e2:	bb70      	cbnz	r0, 17342 <dw1000_phy_forcetrxoff+0xfa>
    inst->control.wait4resp_enabled = 0;
   172e4:	f895 35b0 	ldrb.w	r3, [r5, #1456]	; 0x5b0
   172e8:	f36f 0300 	bfc	r3, #0, #1
   172ec:	f885 35b0 	strb.w	r3, [r5, #1456]	; 0x5b0
    inst->control.rxauto_disable = false;
   172f0:	f895 35b1 	ldrb.w	r3, [r5, #1457]	; 0x5b1
   172f4:	f36f 0382 	bfc	r3, #2, #1
   172f8:	f885 35b1 	strb.w	r3, [r5, #1457]	; 0x5b1
    inst->control.abs_timeout = false;
   172fc:	b2db      	uxtb	r3, r3
   172fe:	f36f 03c3 	bfc	r3, #3, #1
   17302:	f885 35b1 	strb.w	r3, [r5, #1457]	; 0x5b1
   17306:	f8b5 3566 	ldrh.w	r3, [r5, #1382]	; 0x566
    if (dpl_sem_get_count(&inst->tx_sem) == 0) {
   1730a:	2b00      	cmp	r3, #0
   1730c:	d1b3      	bne.n	17276 <dw1000_phy_forcetrxoff+0x2e>
    return (dpl_error_t)os_sem_release(&sem->sem);
   1730e:	f505 60ac 	add.w	r0, r5, #1376	; 0x560
   17312:	f7f2 fd47 	bl	9da4 <os_sem_release>
        assert(err == DPL_OK);
   17316:	b9d0      	cbnz	r0, 1734e <dw1000_phy_forcetrxoff+0x106>
        inst->uwb_dev.status.sem_force_released = 1;
   17318:	f895 350a 	ldrb.w	r3, [r5, #1290]	; 0x50a
   1731c:	f043 0302 	orr.w	r3, r3, #2
   17320:	f885 350a 	strb.w	r3, [r5, #1290]	; 0x50a
   17324:	e7a7      	b.n	17276 <dw1000_phy_forcetrxoff+0x2e>
        dw1000_sync_rxbufptrs(inst);
   17326:	4628      	mov	r0, r5
   17328:	f7fe fa93 	bl	15852 <dw1000_sync_rxbufptrs>
   1732c:	e7ca      	b.n	172c4 <dw1000_phy_forcetrxoff+0x7c>
                if(cbs->reset_cb((struct uwb_dev*)inst, cbs)) continue;
   1732e:	4621      	mov	r1, r4
   17330:	4628      	mov	r0, r5
   17332:	4798      	blx	r3
        SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
   17334:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   17336:	2c00      	cmp	r4, #0
   17338:	d0d0      	beq.n	172dc <dw1000_phy_forcetrxoff+0x94>
            if (cbs!=NULL && cbs->reset_cb)
   1733a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1733c:	2b00      	cmp	r3, #0
   1733e:	d1f6      	bne.n	1732e <dw1000_phy_forcetrxoff+0xe6>
   17340:	e7f8      	b.n	17334 <dw1000_phy_forcetrxoff+0xec>
    assert(err == DPL_OK);
   17342:	2300      	movs	r3, #0
   17344:	461a      	mov	r2, r3
   17346:	4619      	mov	r1, r3
   17348:	4618      	mov	r0, r3
   1734a:	f7f1 fe0b 	bl	8f64 <__assert_func>
        assert(err == DPL_OK);
   1734e:	2300      	movs	r3, #0
   17350:	461a      	mov	r2, r3
   17352:	4619      	mov	r1, r3
   17354:	4618      	mov	r0, r3
   17356:	f7f1 fe05 	bl	8f64 <__assert_func>
   1735a:	bf00      	nop
   1735c:	f3af 8000 	nop.w
   17360:	3433fbf8 	.word	0x3433fbf8
   17364:	00000000 	.word	0x00000000

00017368 <dw1000_phy_interrupt_mask>:
 * @param bitmask   Sets the events which generates interrupt.
 * @param enable    If set, the interrupts are enabled else they are cleared.
 * @return void
 */
void dw1000_phy_interrupt_mask(struct _dw1000_dev_instance_t * inst, uint32_t bitmask, uint8_t enable)
{
   17368:	b5f0      	push	{r4, r5, r6, r7, lr}
   1736a:	b085      	sub	sp, #20
   1736c:	4604      	mov	r4, r0
   1736e:	460d      	mov	r5, r1
   17370:	4616      	mov	r6, r2
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   17372:	f500 67ad 	add.w	r7, r0, #1384	; 0x568
   17376:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1737a:	4638      	mov	r0, r7
   1737c:	f7f3 fb64 	bl	aa48 <os_mutex_pend>
    // Critical region, atomic lock with mutex
    uint32_t mask;
    dpl_error_t err = dpl_mutex_pend(&inst->mutex, DPL_WAIT_FOREVER);
    if (err != DPL_OK) {
   17380:	b138      	cbz	r0, 17392 <dw1000_phy_interrupt_mask+0x2a>
        inst->uwb_dev.status.mtx_error = 1;
   17382:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   17386:	f043 0308 	orr.w	r3, r3, #8
   1738a:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
    // Critical region, unlock mutex
    err = dpl_mutex_release(&inst->mutex);
    assert(err == DPL_OK);
mtx_error:
    return;
}
   1738e:	b005      	add	sp, #20
   17390:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mask = dw1000_read_reg(inst, SYS_MASK_ID, 0, sizeof(uint32_t)) ; // Read register
   17392:	2304      	movs	r3, #4
   17394:	2200      	movs	r2, #0
   17396:	210e      	movs	r1, #14
   17398:	4620      	mov	r0, r4
   1739a:	f7fc feab 	bl	140f4 <dw1000_read_reg>
    if(enable)
   1739e:	b1a6      	cbz	r6, 173ca <dw1000_phy_interrupt_mask+0x62>
        mask |= bitmask ;
   173a0:	4328      	orrs	r0, r5
    dw1000_write_reg(inst, SYS_MASK_ID, 0, mask, sizeof(uint32_t));
   173a2:	2304      	movs	r3, #4
   173a4:	9302      	str	r3, [sp, #8]
   173a6:	2200      	movs	r2, #0
   173a8:	9000      	str	r0, [sp, #0]
   173aa:	9201      	str	r2, [sp, #4]
   173ac:	210e      	movs	r1, #14
   173ae:	4620      	mov	r0, r4
   173b0:	f7fc ff10 	bl	141d4 <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   173b4:	4638      	mov	r0, r7
   173b6:	f7f3 faeb 	bl	a990 <os_mutex_release>
    assert(err == DPL_OK);
   173ba:	2800      	cmp	r0, #0
   173bc:	d0e7      	beq.n	1738e <dw1000_phy_interrupt_mask+0x26>
   173be:	2300      	movs	r3, #0
   173c0:	461a      	mov	r2, r3
   173c2:	4619      	mov	r1, r3
   173c4:	4618      	mov	r0, r3
   173c6:	f7f1 fdcd 	bl	8f64 <__assert_func>
        mask &= ~bitmask ; // Clear the bit
   173ca:	ea20 0005 	bic.w	r0, r0, r5
   173ce:	e7e8      	b.n	173a2 <dw1000_phy_interrupt_mask+0x3a>

000173d0 <dw1000_phy_repeated_frames>:
 * @param rate     Rate at which frames with be repeated in dtu, set to 0 to disable
 * @return void
 */
void
dw1000_phy_repeated_frames(struct _dw1000_dev_instance_t * inst, uint64_t rate)
{
   173d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   173d2:	b085      	sub	sp, #20
   173d4:	4604      	mov	r4, r0
   173d6:	461d      	mov	r5, r3
    int rc;

    if (!rate) {
   173d8:	ea52 0305 	orrs.w	r3, r2, r5
   173dc:	d114      	bne.n	17408 <dw1000_phy_repeated_frames+0x38>
        /* Stop sending packets */
        dw1000_write_reg(inst, RF_CONF_ID, 0, 0, sizeof(uint32_t));
   173de:	2304      	movs	r3, #4
   173e0:	9302      	str	r3, [sp, #8]
   173e2:	2600      	movs	r6, #0
   173e4:	2700      	movs	r7, #0
   173e6:	e9cd 6700 	strd	r6, r7, [sp]
   173ea:	2200      	movs	r2, #0
   173ec:	2128      	movs	r1, #40	; 0x28
   173ee:	f7fc fef1 	bl	141d4 <dw1000_write_reg>
        dw1000_write_reg(inst, DIG_DIAG_ID, DIAG_TMC_OFFSET, 0, sizeof(uint8_t));
   173f2:	2301      	movs	r3, #1
   173f4:	9302      	str	r3, [sp, #8]
   173f6:	e9cd 6700 	strd	r6, r7, [sp]
   173fa:	2224      	movs	r2, #36	; 0x24
   173fc:	212f      	movs	r1, #47	; 0x2f
   173fe:	4620      	mov	r0, r4
   17400:	f7fc fee8 	bl	141d4 <dw1000_write_reg>
                         (uint8_t)(DIAG_TMC_TX_PSTM), sizeof(uint8_t));

        /* Trigger first frame - Needed?? */
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT, sizeof(uint8_t));
    }
}
   17404:	b005      	add	sp, #20
   17406:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17408:	4616      	mov	r6, r2
        inst->spi_settings.baudrate = inst->spi_baudrate_low;
   1740a:	f8d0 3558 	ldr.w	r3, [r0, #1368]	; 0x558
   1740e:	f8c0 3598 	str.w	r3, [r0, #1432]	; 0x598
        rc = hal_spi_disable(inst->spi_num);
   17412:	f890 055c 	ldrb.w	r0, [r0, #1372]	; 0x55c
   17416:	f000 ffe3 	bl	183e0 <hal_spi_disable>
        assert(rc == 0);
   1741a:	2800      	cmp	r0, #0
   1741c:	d16e      	bne.n	174fc <dw1000_phy_repeated_frames+0x12c>
        rc = hal_spi_config(inst->spi_num, &inst->spi_settings);
   1741e:	f204 5194 	addw	r1, r4, #1428	; 0x594
   17422:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   17426:	f000 ff99 	bl	1835c <hal_spi_config>
        assert(rc == 0);
   1742a:	2800      	cmp	r0, #0
   1742c:	d16c      	bne.n	17508 <dw1000_phy_repeated_frames+0x138>
        rc = hal_spi_enable(inst->spi_num);
   1742e:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   17432:	f000 ffaf 	bl	18394 <hal_spi_enable>
        assert(rc == 0);
   17436:	2800      	cmp	r0, #0
   17438:	d16c      	bne.n	17514 <dw1000_phy_repeated_frames+0x144>
        printf("PMSC_ID[0]: %"PRIx32"\n", (uint32_t)dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint32_t)));
   1743a:	2304      	movs	r3, #4
   1743c:	2200      	movs	r2, #0
   1743e:	2136      	movs	r1, #54	; 0x36
   17440:	4620      	mov	r0, r4
   17442:	f7fc fe57 	bl	140f4 <dw1000_read_reg>
   17446:	4601      	mov	r1, r0
   17448:	4835      	ldr	r0, [pc, #212]	; (17520 <dw1000_phy_repeated_frames+0x150>)
   1744a:	f7f6 ff59 	bl	e300 <printf>
        printf("PMSC_ID[1]: %"PRIx32"\n", (uint32_t)dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, sizeof(uint32_t)));
   1744e:	2304      	movs	r3, #4
   17450:	461a      	mov	r2, r3
   17452:	2136      	movs	r1, #54	; 0x36
   17454:	4620      	mov	r0, r4
   17456:	f7fc fe4d 	bl	140f4 <dw1000_read_reg>
   1745a:	4601      	mov	r1, r0
   1745c:	4831      	ldr	r0, [pc, #196]	; (17524 <dw1000_phy_repeated_frames+0x154>)
   1745e:	f7f6 ff4f 	bl	e300 <printf>
        dw1000_phy_disable_sequencing(inst);
   17462:	4620      	mov	r0, r4
   17464:	f7ff fd79 	bl	16f5a <dw1000_phy_disable_sequencing>
        dw1000_write_reg(inst, RF_CONF_ID, 0, RF_CONF_TXPLLPOWEN_MASK, sizeof(uint32_t));
   17468:	2704      	movs	r7, #4
   1746a:	9702      	str	r7, [sp, #8]
   1746c:	f44f 12ff 	mov.w	r2, #2088960	; 0x1fe000
   17470:	2300      	movs	r3, #0
   17472:	e9cd 2300 	strd	r2, r3, [sp]
   17476:	2200      	movs	r2, #0
   17478:	2128      	movs	r1, #40	; 0x28
   1747a:	4620      	mov	r0, r4
   1747c:	f7fc feaa 	bl	141d4 <dw1000_write_reg>
        dw1000_write_reg(inst, RF_CONF_ID, 0, RF_CONF_TXALLEN_MASK, sizeof(uint32_t));
   17480:	9702      	str	r7, [sp, #8]
   17482:	4a29      	ldr	r2, [pc, #164]	; (17528 <dw1000_phy_repeated_frames+0x158>)
   17484:	2300      	movs	r3, #0
   17486:	e9cd 2300 	strd	r2, r3, [sp]
   1748a:	2200      	movs	r2, #0
   1748c:	2128      	movs	r1, #40	; 0x28
   1748e:	4620      	mov	r0, r4
   17490:	f7fc fea0 	bl	141d4 <dw1000_write_reg>
        dw1000_phy_sysclk_PLL(inst);
   17494:	4620      	mov	r0, r4
   17496:	f7ff fd04 	bl	16ea2 <dw1000_phy_sysclk_PLL>
        dw1000_phy_txclk_PLL(inst);
   1749a:	4620      	mov	r0, r4
   1749c:	f7ff fd18 	bl	16ed0 <dw1000_phy_txclk_PLL>
        if ((rate>>8) < 4) {
   174a0:	0a32      	lsrs	r2, r6, #8
   174a2:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   174a6:	0a2b      	lsrs	r3, r5, #8
   174a8:	42ba      	cmp	r2, r7
   174aa:	f173 0300 	sbcs.w	r3, r3, #0
   174ae:	d202      	bcs.n	174b6 <dw1000_phy_repeated_frames+0xe6>
            rate = ((uint64_t)4<<8);
   174b0:	f44f 6680 	mov.w	r6, #1024	; 0x400
   174b4:	2500      	movs	r5, #0
        dw1000_write_reg(inst, DX_TIME_ID, 0, rate>>8, sizeof(uint32_t));
   174b6:	2304      	movs	r3, #4
   174b8:	9302      	str	r3, [sp, #8]
   174ba:	0a36      	lsrs	r6, r6, #8
   174bc:	ea46 6605 	orr.w	r6, r6, r5, lsl #24
   174c0:	0a2d      	lsrs	r5, r5, #8
   174c2:	9600      	str	r6, [sp, #0]
   174c4:	9501      	str	r5, [sp, #4]
   174c6:	2200      	movs	r2, #0
   174c8:	210a      	movs	r1, #10
   174ca:	4620      	mov	r0, r4
   174cc:	f7fc fe82 	bl	141d4 <dw1000_write_reg>
        dw1000_write_reg(inst, DIG_DIAG_ID, DIAG_TMC_OFFSET,
   174d0:	2501      	movs	r5, #1
   174d2:	9502      	str	r5, [sp, #8]
   174d4:	2210      	movs	r2, #16
   174d6:	2300      	movs	r3, #0
   174d8:	e9cd 2300 	strd	r2, r3, [sp]
   174dc:	2224      	movs	r2, #36	; 0x24
   174de:	212f      	movs	r1, #47	; 0x2f
   174e0:	4620      	mov	r0, r4
   174e2:	f7fc fe77 	bl	141d4 <dw1000_write_reg>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT, sizeof(uint8_t));
   174e6:	9502      	str	r5, [sp, #8]
   174e8:	2202      	movs	r2, #2
   174ea:	2300      	movs	r3, #0
   174ec:	e9cd 2300 	strd	r2, r3, [sp]
   174f0:	2200      	movs	r2, #0
   174f2:	210d      	movs	r1, #13
   174f4:	4620      	mov	r0, r4
   174f6:	f7fc fe6d 	bl	141d4 <dw1000_write_reg>
}
   174fa:	e783      	b.n	17404 <dw1000_phy_repeated_frames+0x34>
        assert(rc == 0);
   174fc:	2300      	movs	r3, #0
   174fe:	461a      	mov	r2, r3
   17500:	4619      	mov	r1, r3
   17502:	4618      	mov	r0, r3
   17504:	f7f1 fd2e 	bl	8f64 <__assert_func>
        assert(rc == 0);
   17508:	2300      	movs	r3, #0
   1750a:	461a      	mov	r2, r3
   1750c:	4619      	mov	r1, r3
   1750e:	4618      	mov	r0, r3
   17510:	f7f1 fd28 	bl	8f64 <__assert_func>
        assert(rc == 0);
   17514:	2300      	movs	r3, #0
   17516:	461a      	mov	r2, r3
   17518:	4619      	mov	r1, r3
   1751a:	4618      	mov	r0, r3
   1751c:	f7f1 fd22 	bl	8f64 <__assert_func>
   17520:	00024280 	.word	0x00024280
   17524:	00024294 	.word	0x00024294
   17528:	005fff00 	.word	0x005fff00

0001752c <dw1000_phy_SHR_duration>:
 * @param nlen      The length of the frame to be transmitted/received excluding crc
 * @return uint16_t duration in usec
 */
uint16_t
dw1000_phy_SHR_duration(struct uwb_phy_attributes * attrib)
{
   1752c:	b508      	push	{r3, lr}
    /* TXsym is represented as a float32_t */
#ifdef __KERNEL__
    duration = f32_to_i32(
        f32_mul(attrib->Tpsym, ui32_to_f32(attrib->nsync + attrib->nsfd)), 3, false);
#else
    duration = ceilf(attrib->Tpsym * (attrib->nsync + attrib->nsfd));
   1752e:	ed90 0a00 	vldr	s0, [r0]
   17532:	89c3      	ldrh	r3, [r0, #14]
   17534:	7b02      	ldrb	r2, [r0, #12]
   17536:	4413      	add	r3, r2
   17538:	ee07 3a90 	vmov	s15, r3
   1753c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   17540:	ee27 0a80 	vmul.f32	s0, s15, s0
   17544:	f00a fcae 	bl	21ea4 <ceilf>
   17548:	eebc 0ac0 	vcvt.u32.f32	s0, s0
#endif
    return duration;
}
   1754c:	ee10 3a10 	vmov	r3, s0
   17550:	b298      	uxth	r0, r3
   17552:	bd08      	pop	{r3, pc}

00017554 <dw1000_phy_data_duration>:
 *                  when using Cipher Mode 3 (no payload)
 * @return uint16_t duration in usec
 */
uint16_t
dw1000_phy_data_duration(struct uwb_phy_attributes * attrib, uint16_t nlen)
{
   17554:	b508      	push	{r3, lr}
    int32_t total_payload_bits;
    uint16_t duration;
    /* We need to add 48 parity bits for every 330 bits in the data payload (including crc)
     * I.e. for < 330 bits we need 48 parity bits, for > 330 bits we need 48+48 parity bits,
     * for > 660 bits we need 3*48 parity bits, etc. */
    parity_data_bits += ((8*(nlen+2))/330) * 48;
   17556:	3102      	adds	r1, #2
   17558:	00c9      	lsls	r1, r1, #3
   1755a:	4b12      	ldr	r3, [pc, #72]	; (175a4 <dw1000_phy_data_duration+0x50>)
   1755c:	fb83 2301 	smull	r2, r3, r3, r1
   17560:	11db      	asrs	r3, r3, #7
   17562:	3301      	adds	r3, #1
   17564:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    total_payload_bits = 8*(nlen+2) + parity_data_bits;
   17568:	eb01 1303 	add.w	r3, r1, r3, lsl #4
   1756c:	ee07 3a90 	vmov	s15, r3
        tmp = DPL_FLOAT32_MUL(attrib->Tbsym, DPL_FLOAT32_I32_TO_F32(attrib->nphr));
        tmp = DPL_FLOAT32_ADD(tmp, DPL_FLOAT32_MUL(attrib->Tdsym, DPL_FLOAT32_I32_TO_F32(total_payload_bits)));
        duration = f32_to_i32(DPL_FLOAT32_CEIL(tmp), softfloat_round_max, false);
    }
#else
    duration = (int)ceilf(attrib->Tbsym * attrib->nphr +
   17570:	ed90 7a01 	vldr	s14, [r0, #4]
   17574:	7c83      	ldrb	r3, [r0, #18]
   17576:	ee00 3a10 	vmov	s0, r3
   1757a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   1757e:	ee20 0a07 	vmul.f32	s0, s0, s14
                          attrib->Tdsym * total_payload_bits);
   17582:	ed90 7a02 	vldr	s14, [r0, #8]
   17586:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1758a:	ee67 7a87 	vmul.f32	s15, s15, s14
    duration = (int)ceilf(attrib->Tbsym * attrib->nphr +
   1758e:	ee30 0a27 	vadd.f32	s0, s0, s15
   17592:	f00a fc87 	bl	21ea4 <ceilf>
   17596:	eebd 0ac0 	vcvt.s32.f32	s0, s0
#endif
    return duration;
}
   1759a:	ee10 3a10 	vmov	r3, s0
   1759e:	b298      	uxth	r0, r3
   175a0:	bd08      	pop	{r3, pc}
   175a2:	bf00      	nop
   175a4:	634c0635 	.word	0x634c0635

000175a8 <dw1000_phy_frame_duration>:
 * @param nlen      The length of the frame to be transmitted/received excluding crc
 * @return uint16_t duration in usec
 */
inline uint16_t
dw1000_phy_frame_duration(struct uwb_phy_attributes * attrib, uint16_t nlen)
{
   175a8:	b570      	push	{r4, r5, r6, lr}
   175aa:	4605      	mov	r5, r0
   175ac:	460e      	mov	r6, r1
    return dw1000_phy_SHR_duration(attrib) + dw1000_phy_data_duration(attrib, nlen);
   175ae:	f7ff ffbd 	bl	1752c <dw1000_phy_SHR_duration>
   175b2:	4604      	mov	r4, r0
   175b4:	4631      	mov	r1, r6
   175b6:	4628      	mov	r0, r5
   175b8:	f7ff ffcc 	bl	17554 <dw1000_phy_data_duration>
   175bc:	4420      	add	r0, r4
}
   175be:	b280      	uxth	r0, r0
   175c0:	bd70      	pop	{r4, r5, r6, pc}

000175c2 <dw1000_phy_txrf_power_value>:
 */
bool
dw1000_phy_txrf_power_value(struct _dw1000_dev_instance_t * inst, uint8_t *reg,
                            dpl_float32_t coarse, dpl_float32_t fine)
{
    int c = DPL_FLOAT32_INT(coarse);
   175c2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    if (!reg) {
   175c6:	460a      	mov	r2, r1
   175c8:	2900      	cmp	r1, #0
   175ca:	d05a      	beq.n	17682 <dw1000_phy_txrf_power_value+0xc0>
        return false;
    }
    if (DPL_FLOAT32_INT(fine) < 0 || DPL_FLOAT32_INT(fine) > 32) {
   175cc:	eefd 7ae0 	vcvt.s32.f32	s15, s1
   175d0:	ee17 3a90 	vmov	r3, s15
   175d4:	2b20      	cmp	r3, #32
   175d6:	d856      	bhi.n	17686 <dw1000_phy_txrf_power_value+0xc4>
        return false;
    }

    switch (c) {
   175d8:	ee10 3a10 	vmov	r3, s0
   175dc:	2b12      	cmp	r3, #18
   175de:	d854      	bhi.n	1768a <dw1000_phy_txrf_power_value+0xc8>
   175e0:	e8df f003 	tbb	[pc, r3]
   175e4:	3b535345 	.word	0x3b535345
   175e8:	53315353 	.word	0x53315353
   175ec:	53532753 	.word	0x53532753
   175f0:	1353531d 	.word	0x1353531d
   175f4:	5353      	.short	0x5353
   175f6:	0a          	.byte	0x0a
   175f7:	00          	.byte	0x00
    case(18): *reg = dw1000_power_valuef(DW1000_txrf_config_18db, fine);break;
   175f8:	ee70 0aa0 	vadd.f32	s1, s1, s1
   175fc:	eefd 7ae0 	vcvt.s32.f32	s15, s1
   17600:	ee17 3a90 	vmov	r3, s15
   17604:	7013      	strb	r3, [r2, #0]
    case(3):  *reg = dw1000_power_valuef(DW1000_txrf_config_3db, fine);break;
    case(0):  *reg = dw1000_power_valuef(DW1000_txrf_config_0db, fine);break;
    default:
        return false;
    }
    return true;
   17606:	2001      	movs	r0, #1
    case(18): *reg = dw1000_power_valuef(DW1000_txrf_config_18db, fine);break;
   17608:	4770      	bx	lr
    case(15): *reg = dw1000_power_valuef(DW1000_txrf_config_15db, fine);break;
   1760a:	ee70 0aa0 	vadd.f32	s1, s1, s1
   1760e:	eefd 0ae0 	vcvt.s32.f32	s1, s1
   17612:	ee10 3a90 	vmov	r3, s1
   17616:	3320      	adds	r3, #32
   17618:	7013      	strb	r3, [r2, #0]
    return true;
   1761a:	2001      	movs	r0, #1
    case(15): *reg = dw1000_power_valuef(DW1000_txrf_config_15db, fine);break;
   1761c:	4770      	bx	lr
    case(12): *reg = dw1000_power_valuef(DW1000_txrf_config_12db, fine);break;
   1761e:	ee70 0aa0 	vadd.f32	s1, s1, s1
   17622:	eefd 0ae0 	vcvt.s32.f32	s1, s1
   17626:	ee10 3a90 	vmov	r3, s1
   1762a:	3340      	adds	r3, #64	; 0x40
   1762c:	7013      	strb	r3, [r2, #0]
    return true;
   1762e:	2001      	movs	r0, #1
    case(12): *reg = dw1000_power_valuef(DW1000_txrf_config_12db, fine);break;
   17630:	4770      	bx	lr
    case(9):  *reg = dw1000_power_valuef(DW1000_txrf_config_9db, fine);break;
   17632:	ee70 0aa0 	vadd.f32	s1, s1, s1
   17636:	eefd 0ae0 	vcvt.s32.f32	s1, s1
   1763a:	ee10 3a90 	vmov	r3, s1
   1763e:	3360      	adds	r3, #96	; 0x60
   17640:	7013      	strb	r3, [r2, #0]
    return true;
   17642:	2001      	movs	r0, #1
    case(9):  *reg = dw1000_power_valuef(DW1000_txrf_config_9db, fine);break;
   17644:	4770      	bx	lr
    case(6):  *reg = dw1000_power_valuef(DW1000_txrf_config_6db, fine);break;
   17646:	ee70 0aa0 	vadd.f32	s1, s1, s1
   1764a:	eefd 0ae0 	vcvt.s32.f32	s1, s1
   1764e:	ee10 3a90 	vmov	r3, s1
   17652:	3b80      	subs	r3, #128	; 0x80
   17654:	7013      	strb	r3, [r2, #0]
    return true;
   17656:	2001      	movs	r0, #1
    case(6):  *reg = dw1000_power_valuef(DW1000_txrf_config_6db, fine);break;
   17658:	4770      	bx	lr
    case(3):  *reg = dw1000_power_valuef(DW1000_txrf_config_3db, fine);break;
   1765a:	ee70 0aa0 	vadd.f32	s1, s1, s1
   1765e:	eefd 0ae0 	vcvt.s32.f32	s1, s1
   17662:	ee10 3a90 	vmov	r3, s1
   17666:	3b60      	subs	r3, #96	; 0x60
   17668:	7013      	strb	r3, [r2, #0]
    return true;
   1766a:	2001      	movs	r0, #1
    case(3):  *reg = dw1000_power_valuef(DW1000_txrf_config_3db, fine);break;
   1766c:	4770      	bx	lr
    case(0):  *reg = dw1000_power_valuef(DW1000_txrf_config_0db, fine);break;
   1766e:	ee70 0aa0 	vadd.f32	s1, s1, s1
   17672:	eefd 0ae0 	vcvt.s32.f32	s1, s1
   17676:	ee10 3a90 	vmov	r3, s1
   1767a:	3b40      	subs	r3, #64	; 0x40
   1767c:	7013      	strb	r3, [r2, #0]
    return true;
   1767e:	2001      	movs	r0, #1
    case(0):  *reg = dw1000_power_valuef(DW1000_txrf_config_0db, fine);break;
   17680:	4770      	bx	lr
        return false;
   17682:	2000      	movs	r0, #0
   17684:	4770      	bx	lr
        return false;
   17686:	2000      	movs	r0, #0
   17688:	4770      	bx	lr
    switch (c) {
   1768a:	2000      	movs	r0, #0
}
   1768c:	4770      	bx	lr

0001768e <dw1000_phy_event_cnt_ctrl>:
 * @param reset   If true, reset counters
 * @return struct uwb_dev_status
 */
struct uwb_dev_status
dw1000_phy_event_cnt_ctrl(struct _dw1000_dev_instance_t *inst, bool enable, bool reset)
{
   1768e:	b530      	push	{r4, r5, lr}
   17690:	b085      	sub	sp, #20
   17692:	4604      	mov	r4, r0
   17694:	460d      	mov	r5, r1
    if (reset) {
   17696:	b97a      	cbnz	r2, 176b8 <dw1000_phy_event_cnt_ctrl+0x2a>
        dw1000_write_reg(inst, DIG_DIAG_ID, EVC_CTRL_OFFSET, EVC_CLR, sizeof(uint32_t));
    }

    /* Intentionally writing 32 bits here and above as the register requires at least 16 bits
     * written to take effect. */
    dw1000_write_reg(inst, DIG_DIAG_ID, EVC_CTRL_OFFSET, (enable) ? EVC_EN : 0, sizeof(uint32_t));
   17698:	b1cd      	cbz	r5, 176ce <dw1000_phy_event_cnt_ctrl+0x40>
   1769a:	2201      	movs	r2, #1
   1769c:	2300      	movs	r3, #0
   1769e:	2104      	movs	r1, #4
   176a0:	9102      	str	r1, [sp, #8]
   176a2:	e9cd 2300 	strd	r2, r3, [sp]
   176a6:	2200      	movs	r2, #0
   176a8:	212f      	movs	r1, #47	; 0x2f
   176aa:	4620      	mov	r0, r4
   176ac:	f7fc fd92 	bl	141d4 <dw1000_write_reg>
    return inst->uwb_dev.status;
}
   176b0:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   176b4:	b005      	add	sp, #20
   176b6:	bd30      	pop	{r4, r5, pc}
        dw1000_write_reg(inst, DIG_DIAG_ID, EVC_CTRL_OFFSET, EVC_CLR, sizeof(uint32_t));
   176b8:	2304      	movs	r3, #4
   176ba:	9302      	str	r3, [sp, #8]
   176bc:	2202      	movs	r2, #2
   176be:	2300      	movs	r3, #0
   176c0:	e9cd 2300 	strd	r2, r3, [sp]
   176c4:	2200      	movs	r2, #0
   176c6:	212f      	movs	r1, #47	; 0x2f
   176c8:	f7fc fd84 	bl	141d4 <dw1000_write_reg>
   176cc:	e7e4      	b.n	17698 <dw1000_phy_event_cnt_ctrl+0xa>
    dw1000_write_reg(inst, DIG_DIAG_ID, EVC_CTRL_OFFSET, (enable) ? EVC_EN : 0, sizeof(uint32_t));
   176ce:	2200      	movs	r2, #0
   176d0:	2300      	movs	r3, #0
   176d2:	e7e4      	b.n	1769e <dw1000_phy_event_cnt_ctrl+0x10>

000176d4 <dw1000_phy_event_cnt_read>:
 * @param res     Pointer to struct uwb_dev_evcnt
 * @return struct uwb_dev_status
 */
struct uwb_dev_status
dw1000_phy_event_cnt_read(struct _dw1000_dev_instance_t *inst, struct uwb_dev_evcnt *res)
{
   176d4:	b530      	push	{r4, r5, lr}
   176d6:	b083      	sub	sp, #12
   176d8:	4605      	mov	r5, r0
    if (!res) {
   176da:	b319      	cbz	r1, 17724 <dw1000_phy_event_cnt_read+0x50>
   176dc:	460c      	mov	r4, r1
        return inst->uwb_dev.status;
    }
    /* Read first 6 counter registers in one go */
    dw1000_read(inst, DIG_DIAG_ID, EVC_PHE_OFFSET, (uint8_t*)res,
   176de:	2318      	movs	r3, #24
   176e0:	9300      	str	r3, [sp, #0]
   176e2:	460b      	mov	r3, r1
   176e4:	2204      	movs	r2, #4
   176e6:	212f      	movs	r1, #47	; 0x2f
   176e8:	f7fc fc3a 	bl	13f60 <dw1000_read>
                offsetof(struct uwb_dev_evcnt, event_count6));
    /* Apply masks */
    res->event_count0 &= ((EVC_RSE_MASK << 16) | EVC_PHE_MASK);
   176ec:	6823      	ldr	r3, [r4, #0]
   176ee:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
   176f2:	6023      	str	r3, [r4, #0]
    res->event_count1 &= ((EVC_FCE_MASK << 16) | EVC_FCG_MASK);
   176f4:	6863      	ldr	r3, [r4, #4]
   176f6:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
   176fa:	6063      	str	r3, [r4, #4]
    res->event_count2 &= ((EVC_OVR_MASK << 16) | EVC_FFR_MASK);
   176fc:	68a3      	ldr	r3, [r4, #8]
   176fe:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
   17702:	60a3      	str	r3, [r4, #8]
    res->event_count3 &= ((EVC_PTO_MASK << 16) | EVC_STO_MASK);
   17704:	68e3      	ldr	r3, [r4, #12]
   17706:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
   1770a:	60e3      	str	r3, [r4, #12]
    res->event_count4 &= ((EVC_TXFS_MASK << 16) | EVC_FWTO_MASK);
   1770c:	6923      	ldr	r3, [r4, #16]
   1770e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
   17712:	6123      	str	r3, [r4, #16]
    res->event_count5 &= ((EVC_TPW_MASK << 16) | EVC_HPW_MASK);
   17714:	6963      	ldr	r3, [r4, #20]
   17716:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
   1771a:	6163      	str	r3, [r4, #20]
    return inst->uwb_dev.status;
   1771c:	f8d5 0508 	ldr.w	r0, [r5, #1288]	; 0x508
}
   17720:	b003      	add	sp, #12
   17722:	bd30      	pop	{r4, r5, pc}
        return inst->uwb_dev.status;
   17724:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
   17728:	e7fa      	b.n	17720 <dw1000_phy_event_cnt_read+0x4c>
	...

0001772c <dw1000_pkg_init>:
 *
 * @param void
 * @return void
 */
void dw1000_pkg_init(void)
{
   1772c:	b508      	push	{r3, lr}
#if defined(MYNEWT)

#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    DIAGMSG("{\"utime\": %lu,\"msg\": \"dw1000_pkg_init\"}\n", dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
   1772e:	f7f6 fe6c 	bl	e40a <dpl_cputime_get32>
   17732:	4601      	mov	r1, r0
   17734:	4805      	ldr	r0, [pc, #20]	; (1774c <dw1000_pkg_init+0x20>)
   17736:	f7f6 fde3 	bl	e300 <printf>
#endif

#if MYNEWT_VAL(DW1000_DEVICE_0)
    dw1000_dev_config(hal_dw1000_inst(0));
   1773a:	2000      	movs	r0, #0
   1773c:	f7fd f962 	bl	14a04 <hal_dw1000_inst>
   17740:	f7fc ff54 	bl	145ec <dw1000_dev_config>
        dw1000_dev_config((struct _dw1000_dev_instance_t*)dev);
    }
#endif

#if MYNEWT_VAL(DW1000_CLI)
    dw1000_cli_register();
   17744:	f000 fa62 	bl	17c0c <dw1000_cli_register>
#endif
}
   17748:	bd08      	pop	{r3, pc}
   1774a:	bf00      	nop
   1774c:	000242a8 	.word	0x000242a8

00017750 <dw1000_pkg_down>:

int dw1000_pkg_down(int reason)
{
   17750:	b510      	push	{r4, lr}
   17752:	4604      	mov	r4, r0
    struct os_dev *dev;
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    DIAGMSG("{\"utime\": %"PRIu32",\"msg\": \"dw1000_pkg_down\"}\n", dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
   17754:	f7f6 fe59 	bl	e40a <dpl_cputime_get32>
   17758:	4601      	mov	r1, r0
   1775a:	480d      	ldr	r0, [pc, #52]	; (17790 <dw1000_pkg_down+0x40>)
   1775c:	f7f6 fdd0 	bl	e300 <printf>
#endif

    dev = os_dev_lookup("dw1000_0");
   17760:	480c      	ldr	r0, [pc, #48]	; (17794 <dw1000_pkg_down+0x44>)
   17762:	f7f1 fefb 	bl	955c <os_dev_lookup>
    if (dev) {
   17766:	b108      	cbz	r0, 1776c <dw1000_pkg_down+0x1c>
        dw1000_dev_deinit((struct _dw1000_dev_instance_t *)dev);
   17768:	f7fd f8fa 	bl	14960 <dw1000_dev_deinit>
    }
    dev = os_dev_lookup("dw1000_1");
   1776c:	480a      	ldr	r0, [pc, #40]	; (17798 <dw1000_pkg_down+0x48>)
   1776e:	f7f1 fef5 	bl	955c <os_dev_lookup>
    if (dev) {
   17772:	b108      	cbz	r0, 17778 <dw1000_pkg_down+0x28>
        dw1000_dev_deinit((struct _dw1000_dev_instance_t *)dev);
   17774:	f7fd f8f4 	bl	14960 <dw1000_dev_deinit>
    }
    dev = os_dev_lookup("dw1000_2");
   17778:	4808      	ldr	r0, [pc, #32]	; (1779c <dw1000_pkg_down+0x4c>)
   1777a:	f7f1 feef 	bl	955c <os_dev_lookup>
    if (dev) {
   1777e:	b108      	cbz	r0, 17784 <dw1000_pkg_down+0x34>
        dw1000_dev_deinit((struct _dw1000_dev_instance_t *)dev);
   17780:	f7fd f8ee 	bl	14960 <dw1000_dev_deinit>
    }
#if MYNEWT_VAL(DW1000_CLI)
    dw1000_cli_down(reason);
   17784:	4620      	mov	r0, r4
   17786:	f000 fa49 	bl	17c1c <dw1000_cli_down>
#endif
    return 0;
}
   1778a:	2000      	movs	r0, #0
   1778c:	bd10      	pop	{r4, pc}
   1778e:	bf00      	nop
   17790:	000242d4 	.word	0x000242d4
   17794:	00023fbc 	.word	0x00023fbc
   17798:	00024300 	.word	0x00024300
   1779c:	0002430c 	.word	0x0002430c

000177a0 <dw1000_cli_too_few_args>:
#endif

#ifndef __KERNEL__
static void
dw1000_cli_too_few_args(struct streamer *streamer)
{
   177a0:	b508      	push	{r3, lr}
    streamer_printf(streamer, "Too few args\n");
   177a2:	4902      	ldr	r1, [pc, #8]	; (177ac <dw1000_cli_too_few_args+0xc>)
   177a4:	f7fa fe25 	bl	123f2 <streamer_printf>
}
   177a8:	bd08      	pop	{r3, pc}
   177aa:	bf00      	nop
   177ac:	00024318 	.word	0x00024318

000177b0 <dw1000_cli_dump_registers>:
{
   177b0:	b570      	push	{r4, r5, r6, lr}
   177b2:	b082      	sub	sp, #8
   177b4:	4605      	mov	r5, r0
   177b6:	460e      	mov	r6, r1
    for(i=0; i<0x37; i++)
   177b8:	2400      	movs	r4, #0
   177ba:	e00e      	b.n	177da <dw1000_cli_dump_registers+0x2a>
            reg = dw1000_read_reg(inst, i, 0, 4);
   177bc:	2304      	movs	r3, #4
   177be:	2200      	movs	r2, #0
   177c0:	b2a1      	uxth	r1, r4
   177c2:	4628      	mov	r0, r5
   177c4:	f7fc fc96 	bl	140f4 <dw1000_read_reg>
            streamer_printf(streamer, "{\"reg[%02X]\"=\"0x%08llX\"}\n",i,reg&0xffffffff);
   177c8:	9000      	str	r0, [sp, #0]
   177ca:	2300      	movs	r3, #0
   177cc:	9301      	str	r3, [sp, #4]
   177ce:	4622      	mov	r2, r4
   177d0:	4950      	ldr	r1, [pc, #320]	; (17914 <dw1000_cli_dump_registers+0x164>)
   177d2:	4630      	mov	r0, r6
   177d4:	f7fa fe0d 	bl	123f2 <streamer_printf>
    for(i=0; i<0x37; i++)
   177d8:	3401      	adds	r4, #1
   177da:	2c36      	cmp	r4, #54	; 0x36
   177dc:	dc77      	bgt.n	178ce <dw1000_cli_dump_registers+0x11e>
        if (i==0x05 || i==0x07 || i==0x0B ||
   177de:	2c05      	cmp	r4, #5
   177e0:	d0fa      	beq.n	177d8 <dw1000_cli_dump_registers+0x28>
   177e2:	2c07      	cmp	r4, #7
   177e4:	d0f8      	beq.n	177d8 <dw1000_cli_dump_registers+0x28>
   177e6:	2c0b      	cmp	r4, #11
   177e8:	d0f6      	beq.n	177d8 <dw1000_cli_dump_registers+0x28>
   177ea:	2c16      	cmp	r4, #22
   177ec:	d0f4      	beq.n	177d8 <dw1000_cli_dump_registers+0x28>
            i==0x16 || i==0x1B || i==0x1C ||
   177ee:	2c1b      	cmp	r4, #27
   177f0:	d0f2      	beq.n	177d8 <dw1000_cli_dump_registers+0x28>
   177f2:	2c1c      	cmp	r4, #28
   177f4:	d0f0      	beq.n	177d8 <dw1000_cli_dump_registers+0x28>
   177f6:	2c20      	cmp	r4, #32
   177f8:	d0ee      	beq.n	177d8 <dw1000_cli_dump_registers+0x28>
            i==0x20 || i==0x22 || i==0x29 ||
   177fa:	2c22      	cmp	r4, #34	; 0x22
   177fc:	d0ec      	beq.n	177d8 <dw1000_cli_dump_registers+0x28>
   177fe:	2c29      	cmp	r4, #41	; 0x29
   17800:	d0ea      	beq.n	177d8 <dw1000_cli_dump_registers+0x28>
            (i>0x29 && i<0x36)) {
   17802:	f1a4 032a 	sub.w	r3, r4, #42	; 0x2a
            i==0x20 || i==0x22 || i==0x29 ||
   17806:	2b0b      	cmp	r3, #11
   17808:	d9e6      	bls.n	177d8 <dw1000_cli_dump_registers+0x28>
        switch (i) {
   1780a:	2c1f      	cmp	r4, #31
   1780c:	d851      	bhi.n	178b2 <dw1000_cli_dump_registers+0x102>
   1780e:	a301      	add	r3, pc, #4	; (adr r3, 17814 <dw1000_cli_dump_registers+0x64>)
   17810:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
   17814:	000177bd 	.word	0x000177bd
   17818:	000178b3 	.word	0x000178b3
   1781c:	000178b3 	.word	0x000178b3
   17820:	000177bd 	.word	0x000177bd
   17824:	000177bd 	.word	0x000177bd
   17828:	000178b3 	.word	0x000178b3
   1782c:	00017895 	.word	0x00017895
   17830:	000178b3 	.word	0x000178b3
   17834:	00017895 	.word	0x00017895
   17838:	000178b3 	.word	0x000178b3
   1783c:	00017895 	.word	0x00017895
   17840:	000178b3 	.word	0x000178b3
   17844:	000177bd 	.word	0x000177bd
   17848:	000177bd 	.word	0x000177bd
   1784c:	00017895 	.word	0x00017895
   17850:	00017895 	.word	0x00017895
   17854:	000177bd 	.word	0x000177bd
   17858:	000178b3 	.word	0x000178b3
   1785c:	000178b3 	.word	0x000178b3
   17860:	000177bd 	.word	0x000177bd
   17864:	00017895 	.word	0x00017895
   17868:	00017895 	.word	0x00017895
   1786c:	000178b3 	.word	0x000178b3
   17870:	00017895 	.word	0x00017895
   17874:	000177bd 	.word	0x000177bd
   17878:	00017895 	.word	0x00017895
   1787c:	000177bd 	.word	0x000177bd
   17880:	000178b3 	.word	0x000178b3
   17884:	000178b3 	.word	0x000178b3
   17888:	000177bd 	.word	0x000177bd
   1788c:	000177bd 	.word	0x000177bd
   17890:	000177bd 	.word	0x000177bd
            reg = dw1000_read_reg(inst, i, 0, 5);
   17894:	2305      	movs	r3, #5
   17896:	2200      	movs	r2, #0
   17898:	b2a1      	uxth	r1, r4
   1789a:	4628      	mov	r0, r5
   1789c:	f7fc fc2a 	bl	140f4 <dw1000_read_reg>
            streamer_printf(streamer, "{\"reg[%02X]\"=\"0x%010llX\"}\n",i,reg&0xffffffffffll);
   178a0:	b2c9      	uxtb	r1, r1
   178a2:	9000      	str	r0, [sp, #0]
   178a4:	9101      	str	r1, [sp, #4]
   178a6:	4622      	mov	r2, r4
   178a8:	491b      	ldr	r1, [pc, #108]	; (17918 <dw1000_cli_dump_registers+0x168>)
   178aa:	4630      	mov	r0, r6
   178ac:	f7fa fda1 	bl	123f2 <streamer_printf>
            break;
   178b0:	e792      	b.n	177d8 <dw1000_cli_dump_registers+0x28>
            reg = dw1000_read_reg(inst, i, 0, l);
   178b2:	2308      	movs	r3, #8
   178b4:	2200      	movs	r2, #0
   178b6:	b2a1      	uxth	r1, r4
   178b8:	4628      	mov	r0, r5
   178ba:	f7fc fc1b 	bl	140f4 <dw1000_read_reg>
            streamer_printf(streamer, "{\"reg[%02X]\"=\"0x%016llX\"}\n",i,
   178be:	e9cd 0100 	strd	r0, r1, [sp]
   178c2:	4622      	mov	r2, r4
   178c4:	4915      	ldr	r1, [pc, #84]	; (1791c <dw1000_cli_dump_registers+0x16c>)
   178c6:	4630      	mov	r0, r6
   178c8:	f7fa fd93 	bl	123f2 <streamer_printf>
   178cc:	e784      	b.n	177d8 <dw1000_cli_dump_registers+0x28>
    streamer_printf(streamer, "{\"inst->irq_sem\"=%d}\n", dpl_sem_get_count(&inst->uwb_dev.irq_sem));
   178ce:	8f6a      	ldrh	r2, [r5, #58]	; 0x3a
   178d0:	4913      	ldr	r1, [pc, #76]	; (17920 <dw1000_cli_dump_registers+0x170>)
   178d2:	4630      	mov	r0, r6
   178d4:	f7fa fd8d 	bl	123f2 <streamer_printf>
    streamer_printf(streamer, "{\"inst->tx_sem\"=%d}\n", dpl_sem_get_count(&inst->tx_sem));
   178d8:	f8b5 2566 	ldrh.w	r2, [r5, #1382]	; 0x566
   178dc:	4911      	ldr	r1, [pc, #68]	; (17924 <dw1000_cli_dump_registers+0x174>)
   178de:	4630      	mov	r0, r6
   178e0:	f7fa fd87 	bl	123f2 <streamer_printf>
    struct uwb_rng_instance *rng = (struct uwb_rng_instance*)uwb_mac_find_cb_inst_ptr(&inst->uwb_dev, UWBEXT_RNG);
   178e4:	2104      	movs	r1, #4
   178e6:	4628      	mov	r0, r5
   178e8:	f7f1 f919 	bl	8b1e <uwb_mac_find_cb_inst_ptr>
    if (rng)
   178ec:	b128      	cbz	r0, 178fa <dw1000_cli_dump_registers+0x14a>
        streamer_printf(streamer, "{\"rng->sem\"=%d}\n", dpl_sem_get_count(&rng->sem));
   178ee:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
   178f2:	490d      	ldr	r1, [pc, #52]	; (17928 <dw1000_cli_dump_registers+0x178>)
   178f4:	4630      	mov	r0, r6
   178f6:	f7fa fd7c 	bl	123f2 <streamer_printf>
    struct uwb_ccp_instance *ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(&inst->uwb_dev, UWBEXT_CCP);
   178fa:	2101      	movs	r1, #1
   178fc:	4628      	mov	r0, r5
   178fe:	f7f1 f90e 	bl	8b1e <uwb_mac_find_cb_inst_ptr>
    if (ccp)
   17902:	b128      	cbz	r0, 17910 <dw1000_cli_dump_registers+0x160>
        streamer_printf(streamer, "{\"ccp->sem\"=%d}\n", dpl_sem_get_count(&ccp->sem));
   17904:	f8b0 20b6 	ldrh.w	r2, [r0, #182]	; 0xb6
   17908:	4908      	ldr	r1, [pc, #32]	; (1792c <dw1000_cli_dump_registers+0x17c>)
   1790a:	4630      	mov	r0, r6
   1790c:	f7fa fd71 	bl	123f2 <streamer_printf>
}
   17910:	b002      	add	sp, #8
   17912:	bd70      	pop	{r4, r5, r6, pc}
   17914:	00024328 	.word	0x00024328
   17918:	00024344 	.word	0x00024344
   1791c:	00024360 	.word	0x00024360
   17920:	0002437c 	.word	0x0002437c
   17924:	00024394 	.word	0x00024394
   17928:	000243ac 	.word	0x000243ac
   1792c:	000243c0 	.word	0x000243c0

00017930 <dw1000_cli_dump_address>:
{
   17930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17934:	b09b      	sub	sp, #108	; 0x6c
   17936:	9013      	str	r0, [sp, #76]	; 0x4c
   17938:	9114      	str	r1, [sp, #80]	; 0x50
   1793a:	9212      	str	r2, [sp, #72]	; 0x48
   1793c:	9315      	str	r3, [sp, #84]	; 0x54
    streamer_printf(streamer, "Dump starting at %06"PRIX32":\n", addr);
   1793e:	460a      	mov	r2, r1
   17940:	492d      	ldr	r1, [pc, #180]	; (179f8 <dw1000_cli_dump_address+0xc8>)
   17942:	4618      	mov	r0, r3
   17944:	f7fa fd55 	bl	123f2 <streamer_printf>
    for (i=0;i<length;i+=step) {
   17948:	f04f 0800 	mov.w	r8, #0
   1794c:	e04d      	b.n	179ea <dw1000_cli_dump_address+0xba>
        memset(b,0,sizeof(b));
   1794e:	2300      	movs	r3, #0
   17950:	9316      	str	r3, [sp, #88]	; 0x58
   17952:	9317      	str	r3, [sp, #92]	; 0x5c
   17954:	9318      	str	r3, [sp, #96]	; 0x60
   17956:	9319      	str	r3, [sp, #100]	; 0x64
        dw1000_read(inst, addr, i, b, step);
   17958:	2310      	movs	r3, #16
   1795a:	9300      	str	r3, [sp, #0]
   1795c:	ab16      	add	r3, sp, #88	; 0x58
   1795e:	fa1f f288 	uxth.w	r2, r8
   17962:	f8bd 1050 	ldrh.w	r1, [sp, #80]	; 0x50
   17966:	9813      	ldr	r0, [sp, #76]	; 0x4c
   17968:	f7fc fafa 	bl	13f60 <dw1000_read>
               i, b[0], b[1], b[2], b[3], b[4], b[5], b[6], b[7],
   1796c:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
   17970:	9310      	str	r3, [sp, #64]	; 0x40
   17972:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
   17976:	f89d 205b 	ldrb.w	r2, [sp, #91]	; 0x5b
   1797a:	9211      	str	r2, [sp, #68]	; 0x44
   1797c:	f89d 105c 	ldrb.w	r1, [sp, #92]	; 0x5c
   17980:	f89d 005d 	ldrb.w	r0, [sp, #93]	; 0x5d
   17984:	f89d 405e 	ldrb.w	r4, [sp, #94]	; 0x5e
   17988:	f89d 505f 	ldrb.w	r5, [sp, #95]	; 0x5f
               b[8], b[9], b[10], b[11], b[12], b[13], b[14], b[15]);
   1798c:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
   17990:	f89d 7061 	ldrb.w	r7, [sp, #97]	; 0x61
   17994:	f89d c062 	ldrb.w	ip, [sp, #98]	; 0x62
   17998:	f89d e063 	ldrb.w	lr, [sp, #99]	; 0x63
   1799c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
   179a0:	f89d 9065 	ldrb.w	r9, [sp, #101]	; 0x65
   179a4:	f89d a066 	ldrb.w	sl, [sp, #102]	; 0x66
   179a8:	f89d b067 	ldrb.w	fp, [sp, #103]	; 0x67
        streamer_printf(streamer, "%04X: %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n",
   179ac:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
   179b0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   179b4:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
   179b8:	920b      	str	r2, [sp, #44]	; 0x2c
   179ba:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
   179be:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   179c2:	9708      	str	r7, [sp, #32]
   179c4:	9607      	str	r6, [sp, #28]
   179c6:	9506      	str	r5, [sp, #24]
   179c8:	9405      	str	r4, [sp, #20]
   179ca:	9004      	str	r0, [sp, #16]
   179cc:	9103      	str	r1, [sp, #12]
   179ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
   179d0:	9202      	str	r2, [sp, #8]
   179d2:	9301      	str	r3, [sp, #4]
   179d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   179d6:	9300      	str	r3, [sp, #0]
   179d8:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   179dc:	4642      	mov	r2, r8
   179de:	4907      	ldr	r1, [pc, #28]	; (179fc <dw1000_cli_dump_address+0xcc>)
   179e0:	9815      	ldr	r0, [sp, #84]	; 0x54
   179e2:	f7fa fd06 	bl	123f2 <streamer_printf>
    for (i=0;i<length;i+=step) {
   179e6:	f108 0810 	add.w	r8, r8, #16
   179ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
   179ec:	4543      	cmp	r3, r8
   179ee:	dcae      	bgt.n	1794e <dw1000_cli_dump_address+0x1e>
}
   179f0:	b01b      	add	sp, #108	; 0x6c
   179f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   179f6:	bf00      	nop
   179f8:	000243d4 	.word	0x000243d4
   179fc:	000243f0 	.word	0x000243f0

00017a00 <dw1000_cli_cmd>:
#endif

static int
dw1000_cli_cmd(const struct shell_cmd *cmd, int argc, char **argv, struct streamer *streamer)
{
   17a00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17a04:	b085      	sub	sp, #20
   17a06:	461f      	mov	r7, r3
#ifndef __KERNEL__
    struct _dw1000_dev_instance_t * inst = 0;
    uint16_t inst_n;

    if (argc < 2) {
   17a08:	2901      	cmp	r1, #1
   17a0a:	dd1a      	ble.n	17a42 <dw1000_cli_cmd+0x42>
   17a0c:	460c      	mov	r4, r1
   17a0e:	4615      	mov	r5, r2
        dw1000_cli_too_few_args(streamer);
        return 0;
    }

    if (!strcmp(argv[1], "dump")) {
   17a10:	6856      	ldr	r6, [r2, #4]
   17a12:	4976      	ldr	r1, [pc, #472]	; (17bec <dw1000_cli_cmd+0x1ec>)
   17a14:	4630      	mov	r0, r6
   17a16:	f7f6 f88b 	bl	db30 <strcmp>
   17a1a:	b9e8      	cbnz	r0, 17a58 <dw1000_cli_cmd+0x58>
        if (argc < 3) {
   17a1c:	2c02      	cmp	r4, #2
   17a1e:	dc14      	bgt.n	17a4a <dw1000_cli_cmd+0x4a>
            inst_n=0;
   17a20:	2000      	movs	r0, #0
        } else {
            inst_n = strtol(argv[2], NULL, 0);
        }
        inst = hal_dw1000_inst(inst_n);
   17a22:	b2c0      	uxtb	r0, r0
   17a24:	f7fc ffee 	bl	14a04 <hal_dw1000_inst>
   17a28:	4604      	mov	r4, r0
        console_no_ticks();
   17a2a:	f7f8 f8d5 	bl	fbd8 <console_no_ticks>
        dw1000_cli_dump_registers(inst, streamer);
   17a2e:	4639      	mov	r1, r7
   17a30:	4620      	mov	r0, r4
   17a32:	f7ff febd 	bl	177b0 <dw1000_cli_dump_registers>
        console_yes_ticks();
   17a36:	f7f8 f8d5 	bl	fbe4 <console_yes_ticks>
        streamer_printf(streamer, "Unknown cmd\n");
    }
#endif  /* ifndef __KERNEL__ */

    return 0;
}
   17a3a:	2000      	movs	r0, #0
   17a3c:	b005      	add	sp, #20
   17a3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        dw1000_cli_too_few_args(streamer);
   17a42:	4618      	mov	r0, r3
   17a44:	f7ff feac 	bl	177a0 <dw1000_cli_too_few_args>
        return 0;
   17a48:	e7f7      	b.n	17a3a <dw1000_cli_cmd+0x3a>
            inst_n = strtol(argv[2], NULL, 0);
   17a4a:	2200      	movs	r2, #0
   17a4c:	4611      	mov	r1, r2
   17a4e:	68a8      	ldr	r0, [r5, #8]
   17a50:	f004 fd7d 	bl	1c54e <strtol>
   17a54:	b280      	uxth	r0, r0
   17a56:	e7e4      	b.n	17a22 <dw1000_cli_cmd+0x22>
    } else if (!strcmp(argv[1], "da")) {
   17a58:	4965      	ldr	r1, [pc, #404]	; (17bf0 <dw1000_cli_cmd+0x1f0>)
   17a5a:	4630      	mov	r0, r6
   17a5c:	f7f6 f868 	bl	db30 <strcmp>
   17a60:	bb08      	cbnz	r0, 17aa6 <dw1000_cli_cmd+0xa6>
        if (argc<3) {
   17a62:	2c02      	cmp	r4, #2
   17a64:	dde9      	ble.n	17a3a <dw1000_cli_cmd+0x3a>
        inst_n = strtol(argv[2], NULL, 0);
   17a66:	2200      	movs	r2, #0
   17a68:	4611      	mov	r1, r2
   17a6a:	68a8      	ldr	r0, [r5, #8]
   17a6c:	f004 fd6f 	bl	1c54e <strtol>
   17a70:	4680      	mov	r8, r0
        uint32_t addr = strtol(argv[3], NULL, 0);
   17a72:	2200      	movs	r2, #0
   17a74:	4611      	mov	r1, r2
   17a76:	68e8      	ldr	r0, [r5, #12]
   17a78:	f004 fd69 	bl	1c54e <strtol>
   17a7c:	4606      	mov	r6, r0
        if (argc>4) {
   17a7e:	2c04      	cmp	r4, #4
   17a80:	dc0a      	bgt.n	17a98 <dw1000_cli_cmd+0x98>
        int length = 128;
   17a82:	2480      	movs	r4, #128	; 0x80
        inst = hal_dw1000_inst(inst_n);
   17a84:	fa5f f088 	uxtb.w	r0, r8
   17a88:	f7fc ffbc 	bl	14a04 <hal_dw1000_inst>
        dw1000_cli_dump_address(inst, addr, length, streamer);
   17a8c:	463b      	mov	r3, r7
   17a8e:	b2a2      	uxth	r2, r4
   17a90:	4631      	mov	r1, r6
   17a92:	f7ff ff4d 	bl	17930 <dw1000_cli_dump_address>
   17a96:	e7d0      	b.n	17a3a <dw1000_cli_cmd+0x3a>
            length = strtol(argv[4], NULL, 0);
   17a98:	2200      	movs	r2, #0
   17a9a:	4611      	mov	r1, r2
   17a9c:	6928      	ldr	r0, [r5, #16]
   17a9e:	f004 fd56 	bl	1c54e <strtol>
   17aa2:	4604      	mov	r4, r0
   17aa4:	e7ee      	b.n	17a84 <dw1000_cli_cmd+0x84>
    } else if (!strcmp(argv[1], "cw")) {
   17aa6:	4953      	ldr	r1, [pc, #332]	; (17bf4 <dw1000_cli_cmd+0x1f4>)
   17aa8:	4630      	mov	r0, r6
   17aaa:	f7f6 f841 	bl	db30 <strcmp>
   17aae:	2800      	cmp	r0, #0
   17ab0:	d034      	beq.n	17b1c <dw1000_cli_cmd+0x11c>
    } else if (!strcmp(argv[1], "wr")) {
   17ab2:	4951      	ldr	r1, [pc, #324]	; (17bf8 <dw1000_cli_cmd+0x1f8>)
   17ab4:	4630      	mov	r0, r6
   17ab6:	f7f6 f83b 	bl	db30 <strcmp>
   17aba:	2800      	cmp	r0, #0
   17abc:	d15e      	bne.n	17b7c <dw1000_cli_cmd+0x17c>
        if (argc < 7) {
   17abe:	2c06      	cmp	r4, #6
   17ac0:	ddbb      	ble.n	17a3a <dw1000_cli_cmd+0x3a>
        inst_n = strtol(argv[2], NULL, 0);
   17ac2:	2200      	movs	r2, #0
   17ac4:	4611      	mov	r1, r2
   17ac6:	68a8      	ldr	r0, [r5, #8]
   17ac8:	f004 fd41 	bl	1c54e <strtol>
   17acc:	4680      	mov	r8, r0
        uint32_t addr = strtol(argv[3], NULL, 0);
   17ace:	2200      	movs	r2, #0
   17ad0:	4611      	mov	r1, r2
   17ad2:	68e8      	ldr	r0, [r5, #12]
   17ad4:	f004 fd3b 	bl	1c54e <strtol>
   17ad8:	4606      	mov	r6, r0
        uint32_t sub  = strtol(argv[4], NULL, 0);
   17ada:	2200      	movs	r2, #0
   17adc:	4611      	mov	r1, r2
   17ade:	6928      	ldr	r0, [r5, #16]
   17ae0:	f004 fd35 	bl	1c54e <strtol>
   17ae4:	4607      	mov	r7, r0
        uint64_t val  = strtol(argv[5], NULL, 0);
   17ae6:	2200      	movs	r2, #0
   17ae8:	4611      	mov	r1, r2
   17aea:	6968      	ldr	r0, [r5, #20]
   17aec:	f004 fd2f 	bl	1c54e <strtol>
   17af0:	4604      	mov	r4, r0
   17af2:	ea4f 79e0 	mov.w	r9, r0, asr #31
        int length = strtol(argv[6], NULL, 0);
   17af6:	2200      	movs	r2, #0
   17af8:	4611      	mov	r1, r2
   17afa:	69a8      	ldr	r0, [r5, #24]
   17afc:	f004 fd27 	bl	1c54e <strtol>
   17b00:	4605      	mov	r5, r0
        dw1000_write_reg(hal_dw1000_inst(inst_n), addr, sub, val, length);
   17b02:	fa5f f088 	uxtb.w	r0, r8
   17b06:	f7fc ff7d 	bl	14a04 <hal_dw1000_inst>
   17b0a:	9502      	str	r5, [sp, #8]
   17b0c:	9400      	str	r4, [sp, #0]
   17b0e:	f8cd 9004 	str.w	r9, [sp, #4]
   17b12:	b2ba      	uxth	r2, r7
   17b14:	b2b1      	uxth	r1, r6
   17b16:	f7fc fb5d 	bl	141d4 <dw1000_write_reg>
   17b1a:	e78e      	b.n	17a3a <dw1000_cli_cmd+0x3a>
        inst_n = strtol(argv[2], NULL, 0);
   17b1c:	2200      	movs	r2, #0
   17b1e:	4611      	mov	r1, r2
   17b20:	68a8      	ldr	r0, [r5, #8]
   17b22:	f004 fd14 	bl	1c54e <strtol>
   17b26:	4605      	mov	r5, r0
        inst = hal_dw1000_inst(inst_n);
   17b28:	b2c0      	uxtb	r0, r0
   17b2a:	f7fc ff6b 	bl	14a04 <hal_dw1000_inst>
   17b2e:	4604      	mov	r4, r0
        hal_gpio_irq_disable(inst->irq_pin);
   17b30:	f890 055d 	ldrb.w	r0, [r0, #1373]	; 0x55d
   17b34:	f7f1 f9ea 	bl	8f0c <hal_gpio_irq_disable>
        dw1000_write_reg(inst, SYS_MASK_ID, 0, 0, sizeof(uint32_t));
   17b38:	2304      	movs	r3, #4
   17b3a:	9302      	str	r3, [sp, #8]
   17b3c:	2200      	movs	r2, #0
   17b3e:	2300      	movs	r3, #0
   17b40:	e9cd 2300 	strd	r2, r3, [sp]
   17b44:	210e      	movs	r1, #14
   17b46:	4620      	mov	r0, r4
   17b48:	f7fc fb44 	bl	141d4 <dw1000_write_reg>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TRXOFF, sizeof(uint8_t));
   17b4c:	2301      	movs	r3, #1
   17b4e:	9302      	str	r3, [sp, #8]
   17b50:	2240      	movs	r2, #64	; 0x40
   17b52:	2300      	movs	r3, #0
   17b54:	e9cd 2300 	strd	r2, r3, [sp]
   17b58:	2200      	movs	r2, #0
   17b5a:	210d      	movs	r1, #13
   17b5c:	4620      	mov	r0, r4
   17b5e:	f7fc fb39 	bl	141d4 <dw1000_write_reg>
        dw1000_configcwmode(inst, inst->uwb_dev.config.channel);
   17b62:	f894 150c 	ldrb.w	r1, [r4, #1292]	; 0x50c
   17b66:	4620      	mov	r0, r4
   17b68:	f7ff f8e4 	bl	16d34 <dw1000_configcwmode>
        streamer_printf(streamer, "Device[%d] now in CW mode on ch %d. Reset to continue\n",
   17b6c:	f894 350c 	ldrb.w	r3, [r4, #1292]	; 0x50c
   17b70:	b2aa      	uxth	r2, r5
   17b72:	4922      	ldr	r1, [pc, #136]	; (17bfc <dw1000_cli_cmd+0x1fc>)
   17b74:	4638      	mov	r0, r7
   17b76:	f7fa fc3c 	bl	123f2 <streamer_printf>
   17b7a:	e75e      	b.n	17a3a <dw1000_cli_cmd+0x3a>
    } else if (!strcmp(argv[1], "rd")) {
   17b7c:	4920      	ldr	r1, [pc, #128]	; (17c00 <dw1000_cli_cmd+0x200>)
   17b7e:	4630      	mov	r0, r6
   17b80:	f7f5 ffd6 	bl	db30 <strcmp>
   17b84:	bb60      	cbnz	r0, 17be0 <dw1000_cli_cmd+0x1e0>
        if (argc < 6) {
   17b86:	2c05      	cmp	r4, #5
   17b88:	f77f af57 	ble.w	17a3a <dw1000_cli_cmd+0x3a>
        inst_n = strtol(argv[2], NULL, 0);
   17b8c:	2200      	movs	r2, #0
   17b8e:	4611      	mov	r1, r2
   17b90:	68a8      	ldr	r0, [r5, #8]
   17b92:	f004 fcdc 	bl	1c54e <strtol>
   17b96:	4680      	mov	r8, r0
        uint32_t addr = strtol(argv[3], NULL, 0);
   17b98:	2200      	movs	r2, #0
   17b9a:	4611      	mov	r1, r2
   17b9c:	68e8      	ldr	r0, [r5, #12]
   17b9e:	f004 fcd6 	bl	1c54e <strtol>
   17ba2:	4604      	mov	r4, r0
        uint16_t sub  = strtol(argv[4], NULL, 0);
   17ba4:	2200      	movs	r2, #0
   17ba6:	4611      	mov	r1, r2
   17ba8:	6928      	ldr	r0, [r5, #16]
   17baa:	f004 fcd0 	bl	1c54e <strtol>
   17bae:	b286      	uxth	r6, r0
        int length = strtol(argv[5], NULL, 0);
   17bb0:	2200      	movs	r2, #0
   17bb2:	4611      	mov	r1, r2
   17bb4:	6968      	ldr	r0, [r5, #20]
   17bb6:	f004 fcca 	bl	1c54e <strtol>
   17bba:	4605      	mov	r5, r0
        uint64_t reg = dw1000_read_reg(hal_dw1000_inst(inst_n), addr, sub, length);
   17bbc:	fa5f f088 	uxtb.w	r0, r8
   17bc0:	f7fc ff20 	bl	14a04 <hal_dw1000_inst>
   17bc4:	462b      	mov	r3, r5
   17bc6:	4632      	mov	r2, r6
   17bc8:	b2a1      	uxth	r1, r4
   17bca:	f7fc fa93 	bl	140f4 <dw1000_read_reg>
        streamer_printf(streamer, "0x%06"PRIX32",0x%04X: 0x%"PRIX64"\n", addr, sub, reg);
   17bce:	e9cd 0100 	strd	r0, r1, [sp]
   17bd2:	4633      	mov	r3, r6
   17bd4:	4622      	mov	r2, r4
   17bd6:	490b      	ldr	r1, [pc, #44]	; (17c04 <dw1000_cli_cmd+0x204>)
   17bd8:	4638      	mov	r0, r7
   17bda:	f7fa fc0a 	bl	123f2 <streamer_printf>
   17bde:	e72c      	b.n	17a3a <dw1000_cli_cmd+0x3a>
        streamer_printf(streamer, "Unknown cmd\n");
   17be0:	4909      	ldr	r1, [pc, #36]	; (17c08 <dw1000_cli_cmd+0x208>)
   17be2:	4638      	mov	r0, r7
   17be4:	f7fa fc05 	bl	123f2 <streamer_printf>
   17be8:	e727      	b.n	17a3a <dw1000_cli_cmd+0x3a>
   17bea:	bf00      	nop
   17bec:	000233e0 	.word	0x000233e0
   17bf0:	00024448 	.word	0x00024448
   17bf4:	0002444c 	.word	0x0002444c
   17bf8:	00024488 	.word	0x00024488
   17bfc:	00024450 	.word	0x00024450
   17c00:	0002448c 	.word	0x0002448c
   17c04:	00024490 	.word	0x00024490
   17c08:	000244a8 	.word	0x000244a8

00017c0c <dw1000_cli_register>:
#endif


int
dw1000_cli_register(void)
{
   17c0c:	b508      	push	{r3, lr}
#if MYNEWT_VAL(DW1000_CLI)
    int rc;
    rc = shell_cmd_register(&shell_dw1000_cmd);
   17c0e:	4802      	ldr	r0, [pc, #8]	; (17c18 <dw1000_cli_register+0xc>)
   17c10:	f7f8 fe1c 	bl	1084c <shell_cmd_register>
#endif
    return rc;
#else
    return 0;
#endif
}
   17c14:	bd08      	pop	{r3, pc}
   17c16:	bf00      	nop
   17c18:	20000d68 	.word	0x20000d68

00017c1c <dw1000_cli_down>:
        dw1000_sysfs_deinit(i);
    }
    dw1000_debugfs_deinit();
#endif
    return 0;
}
   17c1c:	2000      	movs	r0, #0
   17c1e:	4770      	bx	lr

00017c20 <dw1000_gpio_config_leds>:
 *          - bit 2 to 7: reserved
 *
 * @return void
 */
void dw1000_gpio_config_leds(struct _dw1000_dev_instance_t * inst, dw1000_led_modes_t mode)
{
   17c20:	b5f0      	push	{r4, r5, r6, r7, lr}
   17c22:	b085      	sub	sp, #20
   17c24:	4604      	mov	r4, r0
    uint32_t reg;

    if (mode & DWT_LEDS_ENABLE){
   17c26:	f011 0f02 	tst.w	r1, #2
   17c2a:	d050      	beq.n	17cce <dw1000_gpio_config_leds+0xae>
   17c2c:	460d      	mov	r5, r1
        // Set up MFIO for LED output.
        reg = (uint32_t) dw1000_read_reg(inst, GPIO_CTRL_ID, GPIO_MODE_OFFSET, sizeof(uint32_t));
   17c2e:	2304      	movs	r3, #4
   17c30:	2200      	movs	r2, #0
   17c32:	2126      	movs	r1, #38	; 0x26
   17c34:	f7fc fa5e 	bl	140f4 <dw1000_read_reg>
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
   17c38:	f420 5070 	bic.w	r0, r0, #15360	; 0x3c00
        reg |= (GPIO_PIN2_RXLED | GPIO_PIN3_TXLED);
   17c3c:	f440 50a0 	orr.w	r0, r0, #5120	; 0x1400
        dw1000_write_reg(inst, GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg, sizeof(uint32_t));
   17c40:	2704      	movs	r7, #4
   17c42:	9702      	str	r7, [sp, #8]
   17c44:	2600      	movs	r6, #0
   17c46:	9000      	str	r0, [sp, #0]
   17c48:	9601      	str	r6, [sp, #4]
   17c4a:	4632      	mov	r2, r6
   17c4c:	2126      	movs	r1, #38	; 0x26
   17c4e:	4620      	mov	r0, r4
   17c50:	f7fc fac0 	bl	141d4 <dw1000_write_reg>

        // Enable LP Oscillator to run from counter and turn on de-bounce clock.
        reg = (uint32_t) dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint32_t));
   17c54:	463b      	mov	r3, r7
   17c56:	4632      	mov	r2, r6
   17c58:	2136      	movs	r1, #54	; 0x36
   17c5a:	4620      	mov	r0, r4
   17c5c:	f7fc fa4a 	bl	140f4 <dw1000_read_reg>
        reg |= (PMSC_CTRL0_GPDCE | PMSC_CTRL0_KHZCLEN);
   17c60:	f440 0004 	orr.w	r0, r0, #8650752	; 0x840000
        dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, reg, sizeof(uint32_t));
   17c64:	9702      	str	r7, [sp, #8]
   17c66:	9000      	str	r0, [sp, #0]
   17c68:	9601      	str	r6, [sp, #4]
   17c6a:	4632      	mov	r2, r6
   17c6c:	2136      	movs	r1, #54	; 0x36
   17c6e:	4620      	mov	r0, r4
   17c70:	f7fc fab0 	bl	141d4 <dw1000_write_reg>
        dw1000_write_reg(inst, PMSC_ID, PMSC_LEDC_OFFSET, PMSC_LEDC_BLNKEN | PMSC_LEDC_BLINK_TIME_DEF, sizeof(uint32_t));
   17c74:	9702      	str	r7, [sp, #8]
   17c76:	f44f 7288 	mov.w	r2, #272	; 0x110
   17c7a:	2300      	movs	r3, #0
   17c7c:	e9cd 2300 	strd	r2, r3, [sp]
   17c80:	2228      	movs	r2, #40	; 0x28
   17c82:	2136      	movs	r1, #54	; 0x36
   17c84:	4620      	mov	r0, r4
   17c86:	f7fc faa5 	bl	141d4 <dw1000_write_reg>

        if (mode & DWT_LEDS_INIT_BLINK){
   17c8a:	f015 0f04 	tst.w	r5, #4
   17c8e:	d02e      	beq.n	17cee <dw1000_gpio_config_leds+0xce>
            // Single blink sign-of-life.
            reg = (uint32_t) dw1000_read_reg(inst, PMSC_ID, PMSC_LEDC_OFFSET, sizeof(uint32_t));
   17c90:	463b      	mov	r3, r7
   17c92:	2228      	movs	r2, #40	; 0x28
   17c94:	2136      	movs	r1, #54	; 0x36
   17c96:	4620      	mov	r0, r4
   17c98:	f7fc fa2c 	bl	140f4 <dw1000_read_reg>
   17c9c:	4605      	mov	r5, r0
            reg |= PMSC_LEDC_BLINK_NOW_ALL;
   17c9e:	f440 2370 	orr.w	r3, r0, #983040	; 0xf0000

            dw1000_write_reg(inst, PMSC_ID, PMSC_LEDC_OFFSET, reg, sizeof(uint32_t));
   17ca2:	9702      	str	r7, [sp, #8]
   17ca4:	9300      	str	r3, [sp, #0]
   17ca6:	9601      	str	r6, [sp, #4]
   17ca8:	2228      	movs	r2, #40	; 0x28
   17caa:	2136      	movs	r1, #54	; 0x36
   17cac:	4620      	mov	r0, r4
   17cae:	f7fc fa91 	bl	141d4 <dw1000_write_reg>
            reg &= ~PMSC_LEDC_BLINK_NOW_ALL;
            dpl_cputime_delay_usecs(10);
   17cb2:	200a      	movs	r0, #10
   17cb4:	f7f6 fbb9 	bl	e42a <dpl_cputime_delay_usecs>
            dw1000_write_reg(inst, PMSC_ID, PMSC_LEDC_OFFSET, reg, sizeof(uint32_t));
   17cb8:	9702      	str	r7, [sp, #8]
   17cba:	f425 2570 	bic.w	r5, r5, #983040	; 0xf0000
   17cbe:	9500      	str	r5, [sp, #0]
   17cc0:	9601      	str	r6, [sp, #4]
   17cc2:	2228      	movs	r2, #40	; 0x28
   17cc4:	2136      	movs	r1, #54	; 0x36
   17cc6:	4620      	mov	r0, r4
   17cc8:	f7fc fa84 	bl	141d4 <dw1000_write_reg>
   17ccc:	e00f      	b.n	17cee <dw1000_gpio_config_leds+0xce>
        }
    }else{
        // Clear the GPIO bits that are used for LED control.
        reg = dw1000_read_reg(inst,GPIO_CTRL_ID, GPIO_MODE_OFFSET,sizeof(uint32_t));
   17cce:	2304      	movs	r3, #4
   17cd0:	2200      	movs	r2, #0
   17cd2:	2126      	movs	r1, #38	; 0x26
   17cd4:	f7fc fa0e 	bl	140f4 <dw1000_read_reg>
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
   17cd8:	f420 5070 	bic.w	r0, r0, #15360	; 0x3c00
        dw1000_write_reg(inst, GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg, sizeof(uint32_t));
   17cdc:	2304      	movs	r3, #4
   17cde:	9302      	str	r3, [sp, #8]
   17ce0:	2200      	movs	r2, #0
   17ce2:	9000      	str	r0, [sp, #0]
   17ce4:	9201      	str	r2, [sp, #4]
   17ce6:	2126      	movs	r1, #38	; 0x26
   17ce8:	4620      	mov	r0, r4
   17cea:	f7fc fa73 	bl	141d4 <dw1000_write_reg>
    }
}
   17cee:	b005      	add	sp, #20
   17cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}

00017cf2 <_dw1000_otp_read>:
 * @param address  From where it starts reading
 * @return data value read from an OTP location.
 */

uint32_t _dw1000_otp_read(struct _dw1000_dev_instance_t * inst, uint16_t address)
{
   17cf2:	b530      	push	{r4, r5, lr}
   17cf4:	b085      	sub	sp, #20
   17cf6:	4604      	mov	r4, r0
    // Write the address
    dw1000_write_reg(inst, OTP_IF_ID, OTP_ADDR, address, sizeof(uint16_t));
   17cf8:	2302      	movs	r3, #2
   17cfa:	9302      	str	r3, [sp, #8]
   17cfc:	9100      	str	r1, [sp, #0]
   17cfe:	2300      	movs	r3, #0
   17d00:	9301      	str	r3, [sp, #4]
   17d02:	2204      	movs	r2, #4
   17d04:	212d      	movs	r1, #45	; 0x2d
   17d06:	f7fc fa65 	bl	141d4 <dw1000_write_reg>

    // Perform OTP Read - Manual read mode has to be set
    dw1000_write_reg(inst, OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN, sizeof(uint8_t));
   17d0a:	2501      	movs	r5, #1
   17d0c:	9502      	str	r5, [sp, #8]
   17d0e:	2203      	movs	r2, #3
   17d10:	2300      	movs	r3, #0
   17d12:	e9cd 2300 	strd	r2, r3, [sp]
   17d16:	2206      	movs	r2, #6
   17d18:	212d      	movs	r1, #45	; 0x2d
   17d1a:	4620      	mov	r0, r4
   17d1c:	f7fc fa5a 	bl	141d4 <dw1000_write_reg>
    dw1000_write_reg(inst, OTP_IF_ID, OTP_CTRL, 0x0, sizeof(uint8_t)); // OTPREAD is self clearing but OTPRDEN is not
   17d20:	9502      	str	r5, [sp, #8]
   17d22:	2200      	movs	r2, #0
   17d24:	2300      	movs	r3, #0
   17d26:	e9cd 2300 	strd	r2, r3, [sp]
   17d2a:	2206      	movs	r2, #6
   17d2c:	212d      	movs	r1, #45	; 0x2d
   17d2e:	4620      	mov	r0, r4
   17d30:	f7fc fa50 	bl	141d4 <dw1000_write_reg>

    // Read data, available 40ns after rising edge of OTP_READ
    dpl_cputime_delay_usecs(1);
   17d34:	4628      	mov	r0, r5
   17d36:	f7f6 fb78 	bl	e42a <dpl_cputime_delay_usecs>
    return  (uint32_t) dw1000_read_reg(inst, OTP_IF_ID, OTP_RDAT, sizeof(uint32_t));
   17d3a:	2304      	movs	r3, #4
   17d3c:	220a      	movs	r2, #10
   17d3e:	212d      	movs	r1, #45	; 0x2d
   17d40:	4620      	mov	r0, r4
   17d42:	f7fc f9d7 	bl	140f4 <dw1000_read_reg>
}
   17d46:	b005      	add	sp, #20
   17d48:	bd30      	pop	{r4, r5, pc}
	...

00017d4c <nrf52k_flash_wait_ready>:
static int
nrf52k_flash_wait_ready(void)
{
    int i;

    for (i = 0; i < 100000; i++) {
   17d4c:	2300      	movs	r3, #0
   17d4e:	4a07      	ldr	r2, [pc, #28]	; (17d6c <nrf52k_flash_wait_ready+0x20>)
   17d50:	4293      	cmp	r3, r2
   17d52:	dc06      	bgt.n	17d62 <nrf52k_flash_wait_ready+0x16>
        if (NRF_NVMC->READY == NVMC_READY_READY_Ready) {
   17d54:	4a06      	ldr	r2, [pc, #24]	; (17d70 <nrf52k_flash_wait_ready+0x24>)
   17d56:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
   17d5a:	2a01      	cmp	r2, #1
   17d5c:	d004      	beq.n	17d68 <nrf52k_flash_wait_ready+0x1c>
    for (i = 0; i < 100000; i++) {
   17d5e:	3301      	adds	r3, #1
   17d60:	e7f5      	b.n	17d4e <nrf52k_flash_wait_ready+0x2>
            return 0;
        }
    }
    return -1;
   17d62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17d66:	4770      	bx	lr
            return 0;
   17d68:	2000      	movs	r0, #0
}
   17d6a:	4770      	bx	lr
   17d6c:	0001869f 	.word	0x0001869f
   17d70:	4001e000 	.word	0x4001e000

00017d74 <nrf52k_flash_erase_sector>:
    return rc;
}

static int
nrf52k_flash_erase_sector(const struct hal_flash *dev, uint32_t sector_address)
{
   17d74:	b538      	push	{r3, r4, r5, lr}
   17d76:	460c      	mov	r4, r1
    int sr;
    int rc = -1;

    if (nrf52k_flash_wait_ready()) {
   17d78:	f7ff ffe8 	bl	17d4c <nrf52k_flash_wait_ready>
   17d7c:	b9e0      	cbnz	r0, 17db8 <nrf52k_flash_erase_sector+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   17d7e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   17d82:	b672      	cpsid	i
        return -1;
    }
    __HAL_DISABLE_INTERRUPTS(sr);
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Een; /* Enable erase OP */
   17d84:	4b0e      	ldr	r3, [pc, #56]	; (17dc0 <nrf52k_flash_erase_sector+0x4c>)
   17d86:	2202      	movs	r2, #2
   17d88:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (nrf52k_flash_wait_ready()) {
   17d8c:	f7ff ffde 	bl	17d4c <nrf52k_flash_wait_ready>
   17d90:	b140      	cbz	r0, 17da4 <nrf52k_flash_erase_sector+0x30>
    int rc = -1;
   17d92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    if (nrf52k_flash_wait_ready()) {
        goto out;
    }
    rc = 0;
out:
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren; /* Disable erase OP */
   17d96:	4b0a      	ldr	r3, [pc, #40]	; (17dc0 <nrf52k_flash_erase_sector+0x4c>)
   17d98:	2200      	movs	r2, #0
   17d9a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   17d9e:	b905      	cbnz	r5, 17da2 <nrf52k_flash_erase_sector+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
   17da0:	b662      	cpsie	i
    return rc;
}
   17da2:	bd38      	pop	{r3, r4, r5, pc}
    NRF_NVMC->ERASEPAGE = sector_address;
   17da4:	4b06      	ldr	r3, [pc, #24]	; (17dc0 <nrf52k_flash_erase_sector+0x4c>)
   17da6:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    if (nrf52k_flash_wait_ready()) {
   17daa:	f7ff ffcf 	bl	17d4c <nrf52k_flash_wait_ready>
   17dae:	2800      	cmp	r0, #0
   17db0:	d0f1      	beq.n	17d96 <nrf52k_flash_erase_sector+0x22>
    int rc = -1;
   17db2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17db6:	e7ee      	b.n	17d96 <nrf52k_flash_erase_sector+0x22>
        return -1;
   17db8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17dbc:	e7f1      	b.n	17da2 <nrf52k_flash_erase_sector+0x2e>
   17dbe:	bf00      	nop
   17dc0:	4001e000 	.word	0x4001e000

00017dc4 <nrf52k_flash_init>:

static int
nrf52k_flash_init(const struct hal_flash *dev)
{
    return 0;
}
   17dc4:	2000      	movs	r0, #0
   17dc6:	4770      	bx	lr

00017dc8 <nrf52k_flash_sector_info>:
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   17dc8:	297f      	cmp	r1, #127	; 0x7f
   17dca:	dc06      	bgt.n	17dda <nrf52k_flash_sector_info+0x12>
    *address = idx * NRF52K_FLASH_SECTOR_SZ;
   17dcc:	0309      	lsls	r1, r1, #12
   17dce:	6011      	str	r1, [r2, #0]
    *sz = NRF52K_FLASH_SECTOR_SZ;
   17dd0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   17dd4:	601a      	str	r2, [r3, #0]
}
   17dd6:	2000      	movs	r0, #0
   17dd8:	4770      	bx	lr
{
   17dda:	b508      	push	{r3, lr}
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   17ddc:	2300      	movs	r3, #0
   17dde:	461a      	mov	r2, r3
   17de0:	4619      	mov	r1, r3
   17de2:	4618      	mov	r0, r3
   17de4:	f7f1 f8be 	bl	8f64 <__assert_func>

00017de8 <nrf52k_flash_write>:
{
   17de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17dec:	b082      	sub	sp, #8
   17dee:	460d      	mov	r5, r1
   17df0:	4616      	mov	r6, r2
   17df2:	461c      	mov	r4, r3
    if (nrf52k_flash_wait_ready()) {
   17df4:	f7ff ffaa 	bl	17d4c <nrf52k_flash_wait_ready>
   17df8:	2800      	cmp	r0, #0
   17dfa:	d154      	bne.n	17ea6 <nrf52k_flash_write+0xbe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   17dfc:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   17e00:	b672      	cpsid	i
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen; /* Enable erase OP */
   17e02:	4b2a      	ldr	r3, [pc, #168]	; (17eac <nrf52k_flash_write+0xc4>)
   17e04:	2201      	movs	r2, #1
   17e06:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (tmp) {
   17e0a:	f015 0803 	ands.w	r8, r5, #3
   17e0e:	d10a      	bne.n	17e26 <nrf52k_flash_write+0x3e>
    while (num_bytes >= sizeof(uint32_t)) {
   17e10:	2c03      	cmp	r4, #3
   17e12:	d924      	bls.n	17e5e <nrf52k_flash_write+0x76>
        if (nrf52k_flash_wait_ready()) {
   17e14:	f7ff ff9a 	bl	17d4c <nrf52k_flash_wait_ready>
   17e18:	bbb8      	cbnz	r0, 17e8a <nrf52k_flash_write+0xa2>
        *(uint32_t *)address = *(uint32_t *)src;
   17e1a:	f856 3b04 	ldr.w	r3, [r6], #4
   17e1e:	f845 3b04 	str.w	r3, [r5], #4
        num_bytes -= sizeof(uint32_t);
   17e22:	3c04      	subs	r4, #4
   17e24:	e7f4      	b.n	17e10 <nrf52k_flash_write+0x28>
        if (nrf52k_flash_wait_ready()) {
   17e26:	f7ff ff91 	bl	17d4c <nrf52k_flash_wait_ready>
   17e2a:	bb58      	cbnz	r0, 17e84 <nrf52k_flash_write+0x9c>
        val = *(uint32_t *)(address & ~0x3);
   17e2c:	f025 0a03 	bic.w	sl, r5, #3
   17e30:	f8da 3000 	ldr.w	r3, [sl]
   17e34:	9301      	str	r3, [sp, #4]
        cnt = 4 - tmp;
   17e36:	f1c8 0904 	rsb	r9, r8, #4
        if (cnt > num_bytes) {
   17e3a:	45a1      	cmp	r9, r4
   17e3c:	d900      	bls.n	17e40 <nrf52k_flash_write+0x58>
            cnt = num_bytes;
   17e3e:	46a1      	mov	r9, r4
        memcpy((uint8_t *)&val + tmp, src, cnt);
   17e40:	464a      	mov	r2, r9
   17e42:	4631      	mov	r1, r6
   17e44:	ab01      	add	r3, sp, #4
   17e46:	eb03 0008 	add.w	r0, r3, r8
   17e4a:	f7f5 fe39 	bl	dac0 <memcpy>
        *(uint32_t *)(address & ~0x3) = val;
   17e4e:	9b01      	ldr	r3, [sp, #4]
   17e50:	f8ca 3000 	str.w	r3, [sl]
        address += cnt;
   17e54:	444d      	add	r5, r9
        num_bytes -= cnt;
   17e56:	eba4 0409 	sub.w	r4, r4, r9
        src += cnt;
   17e5a:	444e      	add	r6, r9
   17e5c:	e7d8      	b.n	17e10 <nrf52k_flash_write+0x28>
    if (num_bytes) {
   17e5e:	b15c      	cbz	r4, 17e78 <nrf52k_flash_write+0x90>
        val = *(uint32_t *)address;
   17e60:	682b      	ldr	r3, [r5, #0]
   17e62:	9301      	str	r3, [sp, #4]
        memcpy(&val, src, num_bytes);
   17e64:	4622      	mov	r2, r4
   17e66:	4631      	mov	r1, r6
   17e68:	a801      	add	r0, sp, #4
   17e6a:	f7f5 fe29 	bl	dac0 <memcpy>
        if (nrf52k_flash_wait_ready()) {
   17e6e:	f7ff ff6d 	bl	17d4c <nrf52k_flash_wait_ready>
   17e72:	b9a8      	cbnz	r0, 17ea0 <nrf52k_flash_write+0xb8>
        *(uint32_t *)address = val;
   17e74:	9b01      	ldr	r3, [sp, #4]
   17e76:	602b      	str	r3, [r5, #0]
    if (nrf52k_flash_wait_ready()) {
   17e78:	f7ff ff68 	bl	17d4c <nrf52k_flash_wait_ready>
   17e7c:	b138      	cbz	r0, 17e8e <nrf52k_flash_write+0xa6>
        rc = -1;
   17e7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17e82:	e004      	b.n	17e8e <nrf52k_flash_write+0xa6>
    int rc = -1;
   17e84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17e88:	e001      	b.n	17e8e <nrf52k_flash_write+0xa6>
   17e8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren;
   17e8e:	4b07      	ldr	r3, [pc, #28]	; (17eac <nrf52k_flash_write+0xc4>)
   17e90:	2200      	movs	r2, #0
   17e92:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   17e96:	b907      	cbnz	r7, 17e9a <nrf52k_flash_write+0xb2>
  __ASM volatile ("cpsie i" : : : "memory");
   17e98:	b662      	cpsie	i
}
   17e9a:	b002      	add	sp, #8
   17e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int rc = -1;
   17ea0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17ea4:	e7f3      	b.n	17e8e <nrf52k_flash_write+0xa6>
        return -1;
   17ea6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17eaa:	e7f6      	b.n	17e9a <nrf52k_flash_write+0xb2>
   17eac:	4001e000 	.word	0x4001e000

00017eb0 <nrf52k_flash_read>:
{
   17eb0:	b508      	push	{r3, lr}
   17eb2:	4610      	mov	r0, r2
    memcpy(dst, (void *)address, num_bytes);
   17eb4:	461a      	mov	r2, r3
   17eb6:	f7f5 fe03 	bl	dac0 <memcpy>
}
   17eba:	2000      	movs	r0, #0
   17ebc:	bd08      	pop	{r3, pc}
	...

00017ec0 <nrf52_timer_handler>:
    }
}

static void
nrf52_timer_handler(void)
{
   17ec0:	b570      	push	{r4, r5, r6, lr}
    int ticks;
    os_sr_t sr;
    uint32_t counter;

    os_trace_isr_enter();
    OS_ENTER_CRITICAL(sr);
   17ec2:	f7f2 fa67 	bl	a394 <os_arch_save_sr>
    return OS_TICK_TIMER->COUNTER;
   17ec6:	4b31      	ldr	r3, [pc, #196]	; (17f8c <nrf52_timer_handler+0xcc>)
   17ec8:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

    /* Calculate elapsed ticks and advance OS time. */

    counter = nrf52_os_tick_counter();
    delta = sub24(counter, g_hal_os_tick.lastocmp);
   17ecc:	4b30      	ldr	r3, [pc, #192]	; (17f90 <nrf52_timer_handler+0xd0>)
   17ece:	689c      	ldr	r4, [r3, #8]
    assert(x <= 0xffffff);
   17ed0:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   17ed4:	d227      	bcs.n	17f26 <nrf52_timer_handler+0x66>
   17ed6:	4605      	mov	r5, r0
    assert(y <= 0xffffff);
   17ed8:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
   17edc:	d229      	bcs.n	17f32 <nrf52_timer_handler+0x72>
    result = x - y;
   17ede:	1b12      	subs	r2, r2, r4
    if (result & 0x800000) {
   17ee0:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   17ee4:	d02b      	beq.n	17f3e <nrf52_timer_handler+0x7e>
        return (result | 0xff800000);
   17ee6:	ea6f 2242 	mvn.w	r2, r2, lsl #9
   17eea:	ea6f 2252 	mvn.w	r2, r2, lsr #9
    ticks = delta / g_hal_os_tick.ticks_per_ostick;
   17eee:	4e28      	ldr	r6, [pc, #160]	; (17f90 <nrf52_timer_handler+0xd0>)
   17ef0:	6834      	ldr	r4, [r6, #0]
   17ef2:	fb92 f4f4 	sdiv	r4, r2, r4
    os_time_advance(ticks);
   17ef6:	4620      	mov	r0, r4
   17ef8:	f7f2 f92c 	bl	a154 <os_time_advance>

    /* Clear timer interrupt */
    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   17efc:	4b23      	ldr	r3, [pc, #140]	; (17f8c <nrf52_timer_handler+0xcc>)
   17efe:	2200      	movs	r2, #0
   17f00:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

    /* Update the time associated with the most recent tick */
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   17f04:	68b3      	ldr	r3, [r6, #8]
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   17f06:	6831      	ldr	r1, [r6, #0]
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   17f08:	fb04 3201 	mla	r2, r4, r1, r3
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   17f0c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   17f10:	60b2      	str	r2, [r6, #8]

    /* Update the output compare to interrupt at the next tick */
    nrf52_os_tick_set_ocmp(g_hal_os_tick.lastocmp + g_hal_os_tick.ticks_per_ostick);
   17f12:	1854      	adds	r4, r2, r1
    OS_ASSERT_CRITICAL();
   17f14:	f7f2 fa47 	bl	a3a6 <os_arch_in_critical>
   17f18:	bb08      	cbnz	r0, 17f5e <nrf52_timer_handler+0x9e>
   17f1a:	2300      	movs	r3, #0
   17f1c:	461a      	mov	r2, r3
   17f1e:	4619      	mov	r1, r3
   17f20:	4618      	mov	r0, r3
   17f22:	f7f1 f81f 	bl	8f64 <__assert_func>
    assert(x <= 0xffffff);
   17f26:	2300      	movs	r3, #0
   17f28:	461a      	mov	r2, r3
   17f2a:	4619      	mov	r1, r3
   17f2c:	4618      	mov	r0, r3
   17f2e:	f7f1 f819 	bl	8f64 <__assert_func>
    assert(y <= 0xffffff);
   17f32:	2300      	movs	r3, #0
   17f34:	461a      	mov	r2, r3
   17f36:	4619      	mov	r1, r3
   17f38:	4618      	mov	r0, r3
   17f3a:	f7f1 f813 	bl	8f64 <__assert_func>
        return (result & 0x007fffff);
   17f3e:	f3c2 0216 	ubfx	r2, r2, #0, #23
   17f42:	e7d4      	b.n	17eee <nrf52_timer_handler+0x2e>
    assert(y <= 0xffffff);
   17f44:	2300      	movs	r3, #0
   17f46:	461a      	mov	r2, r3
   17f48:	4619      	mov	r1, r3
   17f4a:	4618      	mov	r0, r3
   17f4c:	f7f1 f80a 	bl	8f64 <__assert_func>
        return (result & 0x007fffff);
   17f50:	f3c3 0316 	ubfx	r3, r3, #0, #23
        if (delta > 2) {
   17f54:	2b02      	cmp	r3, #2
   17f56:	dc15      	bgt.n	17f84 <nrf52_timer_handler+0xc4>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   17f58:	4b0d      	ldr	r3, [pc, #52]	; (17f90 <nrf52_timer_handler+0xd0>)
   17f5a:	681c      	ldr	r4, [r3, #0]
   17f5c:	4414      	add	r4, r2
        ocmp &= 0xffffff;
   17f5e:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   17f62:	4b0a      	ldr	r3, [pc, #40]	; (17f8c <nrf52_timer_handler+0xcc>)
   17f64:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   17f68:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    assert(y <= 0xffffff);
   17f6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   17f70:	d2e8      	bcs.n	17f44 <nrf52_timer_handler+0x84>
    result = x - y;
   17f72:	1ad3      	subs	r3, r2, r3
    if (result & 0x800000) {
   17f74:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   17f78:	d0ea      	beq.n	17f50 <nrf52_timer_handler+0x90>
        return (result | 0xff800000);
   17f7a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   17f7e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   17f82:	e7e7      	b.n	17f54 <nrf52_timer_handler+0x94>

    OS_EXIT_CRITICAL(sr);
   17f84:	4628      	mov	r0, r5
   17f86:	f7f2 fa0b 	bl	a3a0 <os_arch_restore_sr>
    os_trace_isr_exit();
}
   17f8a:	bd70      	pop	{r4, r5, r6, pc}
   17f8c:	40011000 	.word	0x40011000
   17f90:	20004568 	.word	0x20004568

00017f94 <os_tick_idle>:

void
os_tick_idle(os_time_t ticks)
{
   17f94:	b538      	push	{r3, r4, r5, lr}
   17f96:	4605      	mov	r5, r0
    uint32_t ocmp;

    OS_ASSERT_CRITICAL();
   17f98:	f7f2 fa05 	bl	a3a6 <os_arch_in_critical>
   17f9c:	b1a0      	cbz	r0, 17fc8 <os_tick_idle+0x34>

    if (ticks > 0) {
   17f9e:	2d00      	cmp	r5, #0
   17fa0:	d038      	beq.n	18014 <os_tick_idle+0x80>
        /*
         * Enter tickless regime during long idle durations.
         */
        if (ticks > g_hal_os_tick.max_idle_ticks) {
   17fa2:	4b20      	ldr	r3, [pc, #128]	; (18024 <os_tick_idle+0x90>)
   17fa4:	685b      	ldr	r3, [r3, #4]
   17fa6:	42ab      	cmp	r3, r5
   17fa8:	d200      	bcs.n	17fac <os_tick_idle+0x18>
            ticks = g_hal_os_tick.max_idle_ticks;
   17faa:	461d      	mov	r5, r3
        }
        ocmp = g_hal_os_tick.lastocmp + (ticks*g_hal_os_tick.ticks_per_ostick);
   17fac:	4b1d      	ldr	r3, [pc, #116]	; (18024 <os_tick_idle+0x90>)
   17fae:	689a      	ldr	r2, [r3, #8]
   17fb0:	681c      	ldr	r4, [r3, #0]
   17fb2:	fb05 2404 	mla	r4, r5, r4, r2
    OS_ASSERT_CRITICAL();
   17fb6:	f7f2 f9f6 	bl	a3a6 <os_arch_in_critical>
   17fba:	b9c0      	cbnz	r0, 17fee <os_tick_idle+0x5a>
   17fbc:	2300      	movs	r3, #0
   17fbe:	461a      	mov	r2, r3
   17fc0:	4619      	mov	r1, r3
   17fc2:	4618      	mov	r0, r3
   17fc4:	f7f0 ffce 	bl	8f64 <__assert_func>
    OS_ASSERT_CRITICAL();
   17fc8:	2300      	movs	r3, #0
   17fca:	461a      	mov	r2, r3
   17fcc:	4619      	mov	r1, r3
   17fce:	4618      	mov	r0, r3
   17fd0:	f7f0 ffc8 	bl	8f64 <__assert_func>
    assert(y <= 0xffffff);
   17fd4:	2300      	movs	r3, #0
   17fd6:	461a      	mov	r2, r3
   17fd8:	4619      	mov	r1, r3
   17fda:	4618      	mov	r0, r3
   17fdc:	f7f0 ffc2 	bl	8f64 <__assert_func>
        return (result & 0x007fffff);
   17fe0:	f3c3 0316 	ubfx	r3, r3, #0, #23
        if (delta > 2) {
   17fe4:	2b02      	cmp	r3, #2
   17fe6:	dc15      	bgt.n	18014 <os_tick_idle+0x80>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   17fe8:	4b0e      	ldr	r3, [pc, #56]	; (18024 <os_tick_idle+0x90>)
   17fea:	681c      	ldr	r4, [r3, #0]
   17fec:	4414      	add	r4, r2
        ocmp &= 0xffffff;
   17fee:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   17ff2:	4b0d      	ldr	r3, [pc, #52]	; (18028 <os_tick_idle+0x94>)
   17ff4:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   17ff8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    assert(y <= 0xffffff);
   17ffc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   18000:	d2e8      	bcs.n	17fd4 <os_tick_idle+0x40>
    result = x - y;
   18002:	1ad3      	subs	r3, r2, r3
    if (result & 0x800000) {
   18004:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   18008:	d0ea      	beq.n	17fe0 <os_tick_idle+0x4c>
        return (result | 0xff800000);
   1800a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   1800e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   18012:	e7e7      	b.n	17fe4 <os_tick_idle+0x50>
  __ASM volatile ("dsb 0xF":::"memory");
   18014:	f3bf 8f4f 	dsb	sy
        nrf52_os_tick_set_ocmp(ocmp);
    }

    __DSB();
    __WFI();
   18018:	bf30      	wfi

    if (ticks > 0) {
   1801a:	b905      	cbnz	r5, 1801e <os_tick_idle+0x8a>
         * Update OS time before anything else when coming out of
         * the tickless regime.
         */
        nrf52_timer_handler();
    }
}
   1801c:	bd38      	pop	{r3, r4, r5, pc}
        nrf52_timer_handler();
   1801e:	f7ff ff4f 	bl	17ec0 <nrf52_timer_handler>
}
   18022:	e7fb      	b.n	1801c <os_tick_idle+0x88>
   18024:	20004568 	.word	0x20004568
   18028:	40011000 	.word	0x40011000

0001802c <os_tick_init>:

void
os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
   1802c:	b570      	push	{r4, r5, r6, lr}
    uint32_t sr;

    assert(RTC_FREQ % os_ticks_per_sec == 0);
   1802e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   18032:	fbb3 f3f0 	udiv	r3, r3, r0
   18036:	fb00 f303 	mul.w	r3, r0, r3
   1803a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1803e:	d136      	bne.n	180ae <os_tick_init+0x82>
   18040:	460c      	mov	r4, r1

    g_hal_os_tick.lastocmp = 0;
   18042:	4d1e      	ldr	r5, [pc, #120]	; (180bc <os_tick_init+0x90>)
   18044:	2600      	movs	r6, #0
   18046:	60ae      	str	r6, [r5, #8]
    g_hal_os_tick.ticks_per_ostick = RTC_FREQ / os_ticks_per_sec;
   18048:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1804c:	fbb3 f0f0 	udiv	r0, r3, r0
   18050:	6028      	str	r0, [r5, #0]
    /*
     * The maximum number of OS ticks allowed to elapse during idle is
     * limited to 1/4th the number of timer ticks before the 24-bit counter
     * rolls over.
     */
    g_hal_os_tick.max_idle_ticks = (1UL << 22) / g_hal_os_tick.ticks_per_ostick;
   18052:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   18056:	fbb3 f0f0 	udiv	r0, r3, r0
   1805a:	6068      	str	r0, [r5, #4]

    /* disable interrupts */
    OS_ENTER_CRITICAL(sr);
   1805c:	f7f2 f99a 	bl	a394 <os_arch_save_sr>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   18060:	0164      	lsls	r4, r4, #5
   18062:	b2e4      	uxtb	r4, r4
   18064:	4b16      	ldr	r3, [pc, #88]	; (180c0 <os_tick_init+0x94>)
   18066:	f883 4311 	strb.w	r4, [r3, #785]	; 0x311
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1806a:	4a16      	ldr	r2, [pc, #88]	; (180c4 <os_tick_init+0x98>)
   1806c:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1806e:	4916      	ldr	r1, [pc, #88]	; (180c8 <os_tick_init+0x9c>)
   18070:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18074:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   18078:	601a      	str	r2, [r3, #0]

    /*
     * Program the OS_TICK_TIMER to operate at 32KHz and trigger an output
     * compare interrupt at a rate of 'os_ticks_per_sec'.
     */
    OS_TICK_TIMER->TASKS_STOP = 1;
   1807a:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
   1807e:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
   18082:	2201      	movs	r2, #1
   18084:	605a      	str	r2, [r3, #4]
    OS_TICK_TIMER->TASKS_CLEAR = 1;
   18086:	609a      	str	r2, [r3, #8]

    OS_TICK_TIMER->EVTENCLR = 0xffffffff;
   18088:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1808c:	f8c3 1348 	str.w	r1, [r3, #840]	; 0x348
    OS_TICK_TIMER->INTENCLR = 0xffffffff;
   18090:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    OS_TICK_TIMER->INTENSET = RTC_COMPARE_INT_MASK(OS_TICK_CMPREG);
   18094:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   18098:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   1809c:	f8c3 614c 	str.w	r6, [r3, #332]	; 0x14c
    OS_TICK_TIMER->CC[OS_TICK_CMPREG] = g_hal_os_tick.ticks_per_ostick;
   180a0:	6829      	ldr	r1, [r5, #0]
   180a2:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c

    OS_TICK_TIMER->TASKS_START = 1;
   180a6:	601a      	str	r2, [r3, #0]

    OS_EXIT_CRITICAL(sr);
   180a8:	f7f2 f97a 	bl	a3a0 <os_arch_restore_sr>
}
   180ac:	bd70      	pop	{r4, r5, r6, pc}
    assert(RTC_FREQ % os_ticks_per_sec == 0);
   180ae:	2300      	movs	r3, #0
   180b0:	461a      	mov	r2, r3
   180b2:	4619      	mov	r1, r3
   180b4:	4618      	mov	r0, r3
   180b6:	f7f0 ff55 	bl	8f64 <__assert_func>
   180ba:	bf00      	nop
   180bc:	20004568 	.word	0x20004568
   180c0:	e000e100 	.word	0xe000e100
   180c4:	e000ed00 	.word	0xe000ed00
   180c8:	00017ec1 	.word	0x00017ec1

000180cc <nrf52_irqm_handler>:
    }

#if (MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_1_MASTER) || MYNEWT_VAL(SPI_2_MASTER) || MYNEWT_VAL(SPI_3_MASTER))
static void
nrf52_irqm_handler(struct nrf52_hal_spi *spi)
{
   180cc:	b538      	push	{r3, r4, r5, lr}
    NRF_SPIM_Type *spim;
    uint16_t xfr_bytes;
    uint16_t len;

    spim = spi->nhs_spi.spim;
   180ce:	6905      	ldr	r5, [r0, #16]
    if (spim->EVENTS_END) {
   180d0:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   180d4:	b333      	cbz	r3, 18124 <nrf52_irqm_handler+0x58>
   180d6:	4604      	mov	r4, r0
        spim->EVENTS_END = 0;
   180d8:	2300      	movs	r3, #0
   180da:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118

        /* Should not occur but if no transfer just leave  */
        if (spi->spi_xfr_flag == 0) {
   180de:	7843      	ldrb	r3, [r0, #1]
   180e0:	b303      	cbz	r3, 18124 <nrf52_irqm_handler+0x58>
            return;
        }

        /* Are there more bytes to send? */
        xfr_bytes = spim->TXD.AMOUNT;
   180e2:	f8d5 254c 	ldr.w	r2, [r5, #1356]	; 0x54c
        spi->nhs_bytes_txd += xfr_bytes;
   180e6:	88c3      	ldrh	r3, [r0, #6]
   180e8:	fa13 f382 	uxtah	r3, r3, r2
   180ec:	b29b      	uxth	r3, r3
   180ee:	80c3      	strh	r3, [r0, #6]
        if (spi->nhs_bytes_txd < spi->nhs_buflen) {
   180f0:	8881      	ldrh	r1, [r0, #4]
   180f2:	428b      	cmp	r3, r1
   180f4:	d217      	bcs.n	18126 <nrf52_irqm_handler+0x5a>
            spi->nhs_txbuf += xfr_bytes;
   180f6:	b292      	uxth	r2, r2
   180f8:	6980      	ldr	r0, [r0, #24]
   180fa:	4410      	add	r0, r2
   180fc:	61a0      	str	r0, [r4, #24]
            len = spi->nhs_buflen - spi->nhs_bytes_txd;
   180fe:	1ac9      	subs	r1, r1, r3
   18100:	b289      	uxth	r1, r1
            len = min(SPIM_TXD_MAXCNT_MAX, len);
   18102:	29ff      	cmp	r1, #255	; 0xff
   18104:	bf28      	it	cs
   18106:	21ff      	movcs	r1, #255	; 0xff
            spim->TXD.PTR = (uint32_t)spi->nhs_txbuf;
   18108:	f8c5 0544 	str.w	r0, [r5, #1348]	; 0x544
            spim->TXD.MAXCNT = len;
   1810c:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548

            /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
            if (spi->nhs_rxbuf) {
   18110:	69e3      	ldr	r3, [r4, #28]
   18112:	b12b      	cbz	r3, 18120 <nrf52_irqm_handler+0x54>
                spi->nhs_rxbuf += xfr_bytes;
   18114:	441a      	add	r2, r3
   18116:	61e2      	str	r2, [r4, #28]
                spim->RXD.PTR    = (uint32_t)spi->nhs_rxbuf;
   18118:	f8c5 2534 	str.w	r2, [r5, #1332]	; 0x534
                spim->RXD.MAXCNT = len;
   1811c:	f8c5 1538 	str.w	r1, [r5, #1336]	; 0x538
            }
            spim->TASKS_START = 1;
   18120:	2301      	movs	r3, #1
   18122:	612b      	str	r3, [r5, #16]
            }
            spi->spi_xfr_flag = 0;
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
        }
    }
}
   18124:	bd38      	pop	{r3, r4, r5, pc}
            if (spi->txrx_cb_func) {
   18126:	6a03      	ldr	r3, [r0, #32]
   18128:	b10b      	cbz	r3, 1812e <nrf52_irqm_handler+0x62>
                spi->txrx_cb_func(spi->txrx_cb_arg, spi->nhs_buflen);
   1812a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   1812c:	4798      	blx	r3
            spi->spi_xfr_flag = 0;
   1812e:	2300      	movs	r3, #0
   18130:	7063      	strb	r3, [r4, #1]
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
   18132:	2340      	movs	r3, #64	; 0x40
   18134:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   18138:	e7f4      	b.n	18124 <nrf52_irqm_handler+0x58>
	...

0001813c <nrf52_spi0_irq_handler>:

/* Interrupt handlers for SPI ports */
#if MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_0_SLAVE)
void
nrf52_spi0_irq_handler(void)
{
   1813c:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (nrf52_hal_spi0.spi_type == HAL_SPI_TYPE_MASTER) {
   1813e:	4b04      	ldr	r3, [pc, #16]	; (18150 <nrf52_spi0_irq_handler+0x14>)
   18140:	781b      	ldrb	r3, [r3, #0]
   18142:	b103      	cbz	r3, 18146 <nrf52_spi0_irq_handler+0xa>
#if MYNEWT_VAL(SPI_0_SLAVE)
        nrf52_irqs_handler(&nrf52_hal_spi0);
#endif
    }
    os_trace_isr_exit();
}
   18144:	bd08      	pop	{r3, pc}
        nrf52_irqm_handler(&nrf52_hal_spi0);
   18146:	4802      	ldr	r0, [pc, #8]	; (18150 <nrf52_spi0_irq_handler+0x14>)
   18148:	f7ff ffc0 	bl	180cc <nrf52_irqm_handler>
}
   1814c:	e7fa      	b.n	18144 <nrf52_spi0_irq_handler+0x8>
   1814e:	bf00      	nop
   18150:	20004574 	.word	0x20004574

00018154 <hal_spi_stop_transfer>:
#endif

static void
hal_spi_stop_transfer(NRF_SPIM_Type *spim)
{
    spim->TASKS_STOP = 1;
   18154:	2301      	movs	r3, #1
   18156:	6143      	str	r3, [r0, #20]
    while (!spim->EVENTS_STOPPED) {}
   18158:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
   1815c:	2b00      	cmp	r3, #0
   1815e:	d0fb      	beq.n	18158 <hal_spi_stop_transfer+0x4>
    spim->EVENTS_STOPPED = 0;
   18160:	2300      	movs	r3, #0
   18162:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
}
   18166:	4770      	bx	lr

00018168 <hal_spi_config_slave>:
{
    int rc;
    uint32_t nrf_config;
    NRF_SPIS_Type *spis;

    spis = spi->nhs_spi.spis;
   18168:	6902      	ldr	r2, [r0, #16]

    rc = 0;
    switch (settings->data_mode) {
   1816a:	780b      	ldrb	r3, [r1, #0]
   1816c:	2b03      	cmp	r3, #3
   1816e:	d815      	bhi.n	1819c <hal_spi_config_slave+0x34>
   18170:	e8df f003 	tbb	[pc, r3]
   18174:	110e1702 	.word	0x110e1702
   18178:	2300      	movs	r3, #0
   1817a:	4618      	mov	r0, r3
            nrf_config = 0;
            rc = EINVAL;
            break;
    }

    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   1817c:	f891 c001 	ldrb.w	ip, [r1, #1]
   18180:	f1bc 0f01 	cmp.w	ip, #1
   18184:	d010      	beq.n	181a8 <hal_spi_config_slave+0x40>
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
    }
    spis->CONFIG = nrf_config;
   18186:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554

    /* Only 8-bit word sizes supported. */
    switch (settings->word_size) {
   1818a:	788b      	ldrb	r3, [r1, #2]
   1818c:	b97b      	cbnz	r3, 181ae <hal_spi_config_slave+0x46>
            rc = EINVAL;
            break;
    }

    return rc;
}
   1818e:	4770      	bx	lr
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
   18190:	2304      	movs	r3, #4
    rc = 0;
   18192:	2000      	movs	r0, #0
            break;
   18194:	e7f2      	b.n	1817c <hal_spi_config_slave+0x14>
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
   18196:	2306      	movs	r3, #6
    rc = 0;
   18198:	2000      	movs	r0, #0
            break;
   1819a:	e7ef      	b.n	1817c <hal_spi_config_slave+0x14>
            nrf_config = 0;
   1819c:	2300      	movs	r3, #0
            rc = EINVAL;
   1819e:	2016      	movs	r0, #22
            break;
   181a0:	e7ec      	b.n	1817c <hal_spi_config_slave+0x14>
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
   181a2:	2302      	movs	r3, #2
    rc = 0;
   181a4:	2000      	movs	r0, #0
   181a6:	e7e9      	b.n	1817c <hal_spi_config_slave+0x14>
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
   181a8:	f043 0301 	orr.w	r3, r3, #1
   181ac:	e7eb      	b.n	18186 <hal_spi_config_slave+0x1e>
            rc = EINVAL;
   181ae:	2016      	movs	r0, #22
    return rc;
   181b0:	e7ed      	b.n	1818e <hal_spi_config_slave+0x26>
	...

000181b4 <hal_spi_init_master>:

static int
hal_spi_init_master(struct nrf52_hal_spi *spi,
                    struct nrf52_hal_spi_cfg *cfg,
                    nrf52_spi_irq_handler_t handler)
{
   181b4:	b410      	push	{r4}
    NRF_GPIO_Type *port;
    uint32_t pin;

    /*  Configure MOSI */
    port = HAL_GPIO_PORT(cfg->mosi_pin);
    pin = HAL_GPIO_INDEX(cfg->mosi_pin);
   181b6:	784b      	ldrb	r3, [r1, #1]
    port->OUTCLR = (1UL << pin);
   181b8:	2401      	movs	r4, #1
   181ba:	409c      	lsls	r4, r3
   181bc:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
   181c0:	f8cc 450c 	str.w	r4, [ip, #1292]	; 0x50c
    port->PIN_CNF[pin] =
   181c4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   181c8:	2403      	movs	r4, #3
   181ca:	f84c 4023 	str.w	r4, [ip, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Disconnect << GPIO_PIN_CNF_INPUT_Pos);

    /* Configure MISO */
    port = HAL_GPIO_PORT(cfg->miso_pin);
    pin = HAL_GPIO_INDEX(cfg->miso_pin);
   181ce:	788b      	ldrb	r3, [r1, #2]
    port->PIN_CNF[pin] =
   181d0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   181d4:	2400      	movs	r4, #0
   181d6:	f84c 4023 	str.w	r4, [ip, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Input << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos);

    spim = (NRF_SPIM_Type *)spi->nhs_spi.spim;
   181da:	6903      	ldr	r3, [r0, #16]
    spim->PSEL.SCK = cfg->sck_pin;
   181dc:	780c      	ldrb	r4, [r1, #0]
   181de:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    spim->PSEL.MOSI = cfg->mosi_pin;
   181e2:	784c      	ldrb	r4, [r1, #1]
   181e4:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
    spim->PSEL.MISO = cfg->miso_pin;
   181e8:	7889      	ldrb	r1, [r1, #2]
   181ea:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510

    spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   181ee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   181f2:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    NVIC_SetVector(spi->irq_num, (uint32_t)handler);
   181f6:	f990 3014 	ldrsb.w	r3, [r0, #20]
  uint32_t vectors = (uint32_t )SCB->VTOR;
   181fa:	491a      	ldr	r1, [pc, #104]	; (18264 <hal_spi_init_master+0xb0>)
   181fc:	6889      	ldr	r1, [r1, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   181fe:	3310      	adds	r3, #16
   18200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_SetPriority(spi->irq_num, (1 << __NVIC_PRIO_BITS) - 1);
   18204:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   18208:	2b00      	cmp	r3, #0
   1820a:	db23      	blt.n	18254 <hal_spi_init_master+0xa0>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1820c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   18210:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   18214:	22e0      	movs	r2, #224	; 0xe0
   18216:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    NVIC_ClearPendingIRQ(spi->irq_num);
   1821a:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   1821e:	2b00      	cmp	r3, #0
   18220:	db08      	blt.n	18234 <hal_spi_init_master+0x80>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18222:	f003 011f 	and.w	r1, r3, #31
   18226:	095b      	lsrs	r3, r3, #5
   18228:	2201      	movs	r2, #1
   1822a:	408a      	lsls	r2, r1
   1822c:	3360      	adds	r3, #96	; 0x60
   1822e:	490e      	ldr	r1, [pc, #56]	; (18268 <hal_spi_init_master+0xb4>)
   18230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_EnableIRQ(spi->irq_num);
   18234:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   18238:	2b00      	cmp	r3, #0
   1823a:	db07      	blt.n	1824c <hal_spi_init_master+0x98>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1823c:	f003 011f 	and.w	r1, r3, #31
   18240:	095b      	lsrs	r3, r3, #5
   18242:	2201      	movs	r2, #1
   18244:	408a      	lsls	r2, r1
   18246:	4908      	ldr	r1, [pc, #32]	; (18268 <hal_spi_init_master+0xb4>)
   18248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return 0;
}
   1824c:	2000      	movs	r0, #0
   1824e:	f85d 4b04 	ldr.w	r4, [sp], #4
   18252:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   18254:	f003 030f 	and.w	r3, r3, #15
   18258:	4a04      	ldr	r2, [pc, #16]	; (1826c <hal_spi_init_master+0xb8>)
   1825a:	441a      	add	r2, r3
   1825c:	23e0      	movs	r3, #224	; 0xe0
   1825e:	7613      	strb	r3, [r2, #24]
   18260:	e7db      	b.n	1821a <hal_spi_init_master+0x66>
   18262:	bf00      	nop
   18264:	e000ed00 	.word	0xe000ed00
   18268:	e000e100 	.word	0xe000e100
   1826c:	e000ecfc 	.word	0xe000ecfc

00018270 <hal_spi_config_master>:
{
   18270:	b410      	push	{r4}
    spim = spi->nhs_spi.spim;
   18272:	6902      	ldr	r2, [r0, #16]
    memcpy(&spi->spi_cfg, settings, sizeof(*settings));
   18274:	680c      	ldr	r4, [r1, #0]
   18276:	684b      	ldr	r3, [r1, #4]
   18278:	6084      	str	r4, [r0, #8]
   1827a:	60c3      	str	r3, [r0, #12]
    pin = spim->PSEL.SCK & SPIM_PSEL_SCK_PIN_Msk;
   1827c:	f8d2 3508 	ldr.w	r3, [r2, #1288]	; 0x508
   18280:	f003 031f 	and.w	r3, r3, #31
    if (settings->data_mode <= HAL_SPI_MODE1) {
   18284:	7808      	ldrb	r0, [r1, #0]
   18286:	2801      	cmp	r0, #1
   18288:	d916      	bls.n	182b8 <hal_spi_config_master+0x48>
        port->OUTSET = (1UL << pin);
   1828a:	2001      	movs	r0, #1
   1828c:	4098      	lsls	r0, r3
   1828e:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   18292:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    port->PIN_CNF[pin] =
   18296:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1829a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   1829e:	2403      	movs	r4, #3
   182a0:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
    switch (settings->word_size) {
   182a4:	788b      	ldrb	r3, [r1, #2]
   182a6:	b973      	cbnz	r3, 182c6 <hal_spi_config_master+0x56>
    rc = 0;
   182a8:	2000      	movs	r0, #0
    switch (settings->data_mode) {
   182aa:	780b      	ldrb	r3, [r1, #0]
   182ac:	2b03      	cmp	r3, #3
   182ae:	d825      	bhi.n	182fc <hal_spi_config_master+0x8c>
   182b0:	e8df f003 	tbb	[pc, r3]
   182b4:	2220270b 	.word	0x2220270b
        port->OUTCLR = (1UL << pin);
   182b8:	2001      	movs	r0, #1
   182ba:	4098      	lsls	r0, r3
   182bc:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   182c0:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
   182c4:	e7e7      	b.n	18296 <hal_spi_config_master+0x26>
            rc = EINVAL;
   182c6:	2016      	movs	r0, #22
   182c8:	e7ef      	b.n	182aa <hal_spi_config_master+0x3a>
    switch (settings->data_mode) {
   182ca:	2300      	movs	r3, #0
    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   182cc:	f891 c001 	ldrb.w	ip, [r1, #1]
   182d0:	f1bc 0f01 	cmp.w	ip, #1
   182d4:	d017      	beq.n	18306 <hal_spi_config_master+0x96>
    spim->CONFIG = nrf_config;
   182d6:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554
    switch (settings->baudrate) {
   182da:	684b      	ldr	r3, [r1, #4]
   182dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   182e0:	d02c      	beq.n	1833c <hal_spi_config_master+0xcc>
   182e2:	d81c      	bhi.n	1831e <hal_spi_config_master+0xae>
   182e4:	2bfa      	cmp	r3, #250	; 0xfa
   182e6:	d02c      	beq.n	18342 <hal_spi_config_master+0xd2>
   182e8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   182ec:	d10e      	bne.n	1830c <hal_spi_config_master+0x9c>
            frequency = SPIM_FREQUENCY_FREQUENCY_K500;
   182ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   182f2:	e00f      	b.n	18314 <hal_spi_config_master+0xa4>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   182f4:	2304      	movs	r3, #4
            break;
   182f6:	e7e9      	b.n	182cc <hal_spi_config_master+0x5c>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   182f8:	2306      	movs	r3, #6
            break;
   182fa:	e7e7      	b.n	182cc <hal_spi_config_master+0x5c>
            nrf_config = 0;
   182fc:	2300      	movs	r3, #0
            rc = EINVAL;
   182fe:	2016      	movs	r0, #22
            break;
   18300:	e7e4      	b.n	182cc <hal_spi_config_master+0x5c>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   18302:	2302      	movs	r3, #2
   18304:	e7e2      	b.n	182cc <hal_spi_config_master+0x5c>
        nrf_config |= SPIM_CONFIG_ORDER_LsbFirst;
   18306:	f043 0301 	orr.w	r3, r3, #1
   1830a:	e7e4      	b.n	182d6 <hal_spi_config_master+0x66>
    switch (settings->baudrate) {
   1830c:	2b7d      	cmp	r3, #125	; 0x7d
   1830e:	d11b      	bne.n	18348 <hal_spi_config_master+0xd8>
   18310:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    spim->FREQUENCY = frequency;
   18314:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
}
   18318:	f85d 4b04 	ldr.w	r4, [sp], #4
   1831c:	4770      	bx	lr
    switch (settings->baudrate) {
   1831e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
   18322:	d014      	beq.n	1834e <hal_spi_config_master+0xde>
   18324:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
   18328:	d102      	bne.n	18330 <hal_spi_config_master+0xc0>
            frequency = SPIM_FREQUENCY_FREQUENCY_M8;
   1832a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1832e:	e7f1      	b.n	18314 <hal_spi_config_master+0xa4>
    switch (settings->baudrate) {
   18330:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   18334:	d10e      	bne.n	18354 <hal_spi_config_master+0xe4>
            frequency = SPIM_FREQUENCY_FREQUENCY_M2;
   18336:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   1833a:	e7eb      	b.n	18314 <hal_spi_config_master+0xa4>
            frequency = SPIM_FREQUENCY_FREQUENCY_M1;
   1833c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18340:	e7e8      	b.n	18314 <hal_spi_config_master+0xa4>
            frequency = SPIM_FREQUENCY_FREQUENCY_K250;
   18342:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   18346:	e7e5      	b.n	18314 <hal_spi_config_master+0xa4>
            frequency = 0;
   18348:	2300      	movs	r3, #0
            rc = EINVAL;
   1834a:	2016      	movs	r0, #22
   1834c:	e7e2      	b.n	18314 <hal_spi_config_master+0xa4>
            frequency = SPIM_FREQUENCY_FREQUENCY_M4;
   1834e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   18352:	e7df      	b.n	18314 <hal_spi_config_master+0xa4>
            frequency = 0;
   18354:	2300      	movs	r3, #0
            rc = EINVAL;
   18356:	2016      	movs	r0, #22
   18358:	e7dc      	b.n	18314 <hal_spi_config_master+0xa4>
	...

0001835c <hal_spi_config>:
{
    int rc;
    struct nrf52_hal_spi *spi;
    NRF_SPIM_Type *spim;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1835c:	2803      	cmp	r0, #3
   1835e:	dc10      	bgt.n	18382 <hal_spi_config+0x26>
{
   18360:	b508      	push	{r3, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   18362:	4b0b      	ldr	r3, [pc, #44]	; (18390 <hal_spi_config+0x34>)
   18364:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   18368:	b168      	cbz	r0, 18386 <hal_spi_config+0x2a>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   1836a:	6903      	ldr	r3, [r0, #16]
    if (spim->ENABLE != 0) {
   1836c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
   18370:	b95b      	cbnz	r3, 1838a <hal_spi_config+0x2e>
        return -1;
    }

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   18372:	7803      	ldrb	r3, [r0, #0]
   18374:	b913      	cbnz	r3, 1837c <hal_spi_config+0x20>
        rc = hal_spi_config_master(spi, settings);
   18376:	f7ff ff7b 	bl	18270 <hal_spi_config_master>
        rc = hal_spi_config_slave(spi, settings);
    }

err:
    return (rc);
}
   1837a:	bd08      	pop	{r3, pc}
        rc = hal_spi_config_slave(spi, settings);
   1837c:	f7ff fef4 	bl	18168 <hal_spi_config_slave>
   18380:	e7fb      	b.n	1837a <hal_spi_config+0x1e>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   18382:	2016      	movs	r0, #22
}
   18384:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   18386:	2016      	movs	r0, #22
   18388:	e7f7      	b.n	1837a <hal_spi_config+0x1e>
        return -1;
   1838a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1838e:	e7f4      	b.n	1837a <hal_spi_config+0x1e>
   18390:	00024620 	.word	0x00024620

00018394 <hal_spi_enable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPI_Type *nrf_spi;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   18394:	2803      	cmp	r0, #3
   18396:	dc1b      	bgt.n	183d0 <hal_spi_enable+0x3c>
   18398:	4b10      	ldr	r3, [pc, #64]	; (183dc <hal_spi_enable+0x48>)
   1839a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1839e:	b1cb      	cbz	r3, 183d4 <hal_spi_enable+0x40>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   183a0:	781a      	ldrb	r2, [r3, #0]
   183a2:	b92a      	cbnz	r2, 183b0 <hal_spi_enable+0x1c>
        /* For now, enable this in normal SPI mode (not spim) */
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
   183a4:	691b      	ldr	r3, [r3, #16]
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   183a6:	2201      	movs	r2, #1
   183a8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
        spis->EVENTS_END = 0;
        spis->EVENTS_ACQUIRED = 0;
        spis->INTENSET = SPIS_INTENSET_END_Msk | SPIS_INTENSET_ACQUIRED_Msk;
        spis->ENABLE = (SPIS_ENABLE_ENABLE_Enabled << SPIS_ENABLE_ENABLE_Pos);
    }
    rc = 0;
   183ac:	2000      	movs	r0, #0
   183ae:	4770      	bx	lr
        if (spi->txrx_cb_func == NULL) {
   183b0:	6a1a      	ldr	r2, [r3, #32]
   183b2:	b18a      	cbz	r2, 183d8 <hal_spi_enable+0x44>
        spis = spi->nhs_spi.spis;
   183b4:	691b      	ldr	r3, [r3, #16]
        spis->EVENTS_END = 0;
   183b6:	2000      	movs	r0, #0
   183b8:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   183bc:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
        spis->INTENSET = SPIS_INTENSET_END_Msk | SPIS_INTENSET_ACQUIRED_Msk;
   183c0:	f240 4202 	movw	r2, #1026	; 0x402
   183c4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
        spis->ENABLE = (SPIS_ENABLE_ENABLE_Enabled << SPIS_ENABLE_ENABLE_Pos);
   183c8:	2202      	movs	r2, #2
   183ca:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   183ce:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   183d0:	2016      	movs	r0, #22
   183d2:	4770      	bx	lr
   183d4:	2016      	movs	r0, #22
   183d6:	4770      	bx	lr
            rc = EINVAL;
   183d8:	2016      	movs	r0, #22

err:
    return rc;
}
   183da:	4770      	bx	lr
   183dc:	00024620 	.word	0x00024620

000183e0 <hal_spi_disable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   183e0:	2803      	cmp	r0, #3
   183e2:	dc2a      	bgt.n	1843a <hal_spi_disable+0x5a>
{
   183e4:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   183e6:	4b17      	ldr	r3, [pc, #92]	; (18444 <hal_spi_disable+0x64>)
   183e8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   183ec:	b33c      	cbz	r4, 1843e <hal_spi_disable+0x5e>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   183ee:	7823      	ldrb	r3, [r4, #0]
   183f0:	b9ab      	cbnz	r3, 1841e <hal_spi_disable+0x3e>
        spim = spi->nhs_spi.spim;
   183f2:	6925      	ldr	r5, [r4, #16]
        spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   183f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   183f8:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308

        if (spi->spi_xfr_flag) {
   183fc:	7863      	ldrb	r3, [r4, #1]
   183fe:	b943      	cbnz	r3, 18412 <hal_spi_disable+0x32>
            hal_spi_stop_transfer(spim);
            spi->spi_xfr_flag = 0;
        }
        spim->ENABLE = 0;
   18400:	2300      	movs	r3, #0
   18402:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        spis->EVENTS_ACQUIRED = 0;
        spis->ENABLE = 0;
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
    }

    spi->nhs_txbuf = NULL;
   18406:	2000      	movs	r0, #0
   18408:	61a0      	str	r0, [r4, #24]
    spi->nhs_rxbuf = NULL;
   1840a:	61e0      	str	r0, [r4, #28]
    spi->nhs_buflen = 0;
   1840c:	80a0      	strh	r0, [r4, #4]
    spi->nhs_bytes_txd = 0;
   1840e:	80e0      	strh	r0, [r4, #6]

    rc = 0;

err:
    return rc;
}
   18410:	bd38      	pop	{r3, r4, r5, pc}
            hal_spi_stop_transfer(spim);
   18412:	4628      	mov	r0, r5
   18414:	f7ff fe9e 	bl	18154 <hal_spi_stop_transfer>
            spi->spi_xfr_flag = 0;
   18418:	2300      	movs	r3, #0
   1841a:	7063      	strb	r3, [r4, #1]
   1841c:	e7f0      	b.n	18400 <hal_spi_disable+0x20>
        spis = spi->nhs_spi.spis;
   1841e:	6922      	ldr	r2, [r4, #16]
        spis->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   18420:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18424:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        spis->EVENTS_END = 0;
   18428:	2300      	movs	r3, #0
   1842a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   1842e:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
        spis->ENABLE = 0;
   18432:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
   18436:	70e3      	strb	r3, [r4, #3]
   18438:	e7e5      	b.n	18406 <hal_spi_disable+0x26>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1843a:	2016      	movs	r0, #22
}
   1843c:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1843e:	2016      	movs	r0, #22
    return rc;
   18440:	e7e6      	b.n	18410 <hal_spi_disable+0x30>
   18442:	bf00      	nop
   18444:	00024620 	.word	0x00024620

00018448 <hal_spi_init>:
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   18448:	2803      	cmp	r0, #3
   1844a:	dc1d      	bgt.n	18488 <hal_spi_init+0x40>
{
   1844c:	b538      	push	{r3, r4, r5, lr}
   1844e:	460c      	mov	r4, r1
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   18450:	4b12      	ldr	r3, [pc, #72]	; (1849c <hal_spi_init+0x54>)
   18452:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   18456:	b1cd      	cbz	r5, 1848c <hal_spi_init+0x44>
    if (cfg == NULL) {
   18458:	b1d1      	cbz	r1, 18490 <hal_spi_init+0x48>
    if ((spi_type != HAL_SPI_TYPE_MASTER) && (spi_type != HAL_SPI_TYPE_SLAVE)) {
   1845a:	2a01      	cmp	r2, #1
   1845c:	d81a      	bhi.n	18494 <hal_spi_init+0x4c>
    spi->spi_type  = spi_type;
   1845e:	702a      	strb	r2, [r5, #0]
    if (spi_num == 0) {
   18460:	b9d0      	cbnz	r0, 18498 <hal_spi_init+0x50>
        spi->irq_num = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQn;
   18462:	2303      	movs	r3, #3
   18464:	752b      	strb	r3, [r5, #20]
        if (spi_type == HAL_SPI_TYPE_MASTER) {
   18466:	b94a      	cbnz	r2, 1847c <hal_spi_init+0x34>
            spi->nhs_spi.spim = NRF_SPIM0;
   18468:	4b0d      	ldr	r3, [pc, #52]	; (184a0 <hal_spi_init+0x58>)
   1846a:	612b      	str	r3, [r5, #16]
    hal_spi_disable(spi_num);
   1846c:	f7ff ffb8 	bl	183e0 <hal_spi_disable>
        rc = hal_spi_init_master(spi, (struct nrf52_hal_spi_cfg *)cfg,
   18470:	4a0c      	ldr	r2, [pc, #48]	; (184a4 <hal_spi_init+0x5c>)
   18472:	4621      	mov	r1, r4
   18474:	4628      	mov	r0, r5
   18476:	f7ff fe9d 	bl	181b4 <hal_spi_init_master>
   1847a:	e00e      	b.n	1849a <hal_spi_init+0x52>
            assert(0);
   1847c:	2300      	movs	r3, #0
   1847e:	461a      	mov	r2, r3
   18480:	4619      	mov	r1, r3
   18482:	4618      	mov	r0, r3
   18484:	f7f0 fd6e 	bl	8f64 <__assert_func>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   18488:	2016      	movs	r0, #22
}
   1848a:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1848c:	2016      	movs	r0, #22
   1848e:	e004      	b.n	1849a <hal_spi_init+0x52>
    rc = EINVAL;
   18490:	2016      	movs	r0, #22
   18492:	e002      	b.n	1849a <hal_spi_init+0x52>
   18494:	2016      	movs	r0, #22
   18496:	e000      	b.n	1849a <hal_spi_init+0x52>
   18498:	2016      	movs	r0, #22
}
   1849a:	bd38      	pop	{r3, r4, r5, pc}
   1849c:	00024620 	.word	0x00024620
   184a0:	40003000 	.word	0x40003000
   184a4:	0001813d 	.word	0x0001813d

000184a8 <hal_spi_set_txrx_cb>:
{
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   184a8:	2803      	cmp	r0, #3
   184aa:	dc0a      	bgt.n	184c2 <hal_spi_set_txrx_cb+0x1a>
   184ac:	4b08      	ldr	r3, [pc, #32]	; (184d0 <hal_spi_set_txrx_cb+0x28>)
   184ae:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   184b2:	b143      	cbz	r3, 184c6 <hal_spi_set_txrx_cb+0x1e>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   184b4:	6918      	ldr	r0, [r3, #16]
    if (spim->ENABLE != 0) {
   184b6:	f8d0 0500 	ldr.w	r0, [r0, #1280]	; 0x500
   184ba:	b930      	cbnz	r0, 184ca <hal_spi_set_txrx_cb+0x22>
        rc = -1;
    } else {
        spi->txrx_cb_func = txrx_cb;
   184bc:	6219      	str	r1, [r3, #32]
        spi->txrx_cb_arg = arg;
   184be:	625a      	str	r2, [r3, #36]	; 0x24
        rc = 0;
   184c0:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   184c2:	2016      	movs	r0, #22
   184c4:	4770      	bx	lr
   184c6:	2016      	movs	r0, #22
   184c8:	4770      	bx	lr
        rc = -1;
   184ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }

err:
    return rc;
}
   184ce:	4770      	bx	lr
   184d0:	00024620 	.word	0x00024620

000184d4 <hal_spi_txrx>:
    NRF_SPI_Type *spi;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *hal_spi;

    rc = EINVAL;
    if (!len) {
   184d4:	2b00      	cmp	r3, #0
   184d6:	d046      	beq.n	18566 <hal_spi_txrx+0x92>
{
   184d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   184da:	460d      	mov	r5, r1
   184dc:	4616      	mov	r6, r2
   184de:	461f      	mov	r7, r3
        goto err;
    }

    NRF52_HAL_SPI_RESOLVE(spi_num, hal_spi);
   184e0:	2803      	cmp	r0, #3
   184e2:	dc42      	bgt.n	1856a <hal_spi_txrx+0x96>
   184e4:	4b25      	ldr	r3, [pc, #148]	; (1857c <hal_spi_txrx+0xa8>)
   184e6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   184ea:	2b00      	cmp	r3, #0
   184ec:	d03f      	beq.n	1856e <hal_spi_txrx+0x9a>

    if (hal_spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   184ee:	781a      	ldrb	r2, [r3, #0]
   184f0:	2a00      	cmp	r2, #0
   184f2:	d13e      	bne.n	18572 <hal_spi_txrx+0x9e>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
   184f4:	2900      	cmp	r1, #0
   184f6:	d03e      	beq.n	18576 <hal_spi_txrx+0xa2>

        /*
         * If SPIM is enabled, we want to stop, disable, then enable
         * the legacy SPI interface.
         */
        spim = hal_spi->nhs_spi.spim;
   184f8:	691c      	ldr	r4, [r3, #16]
        enabled = spim->ENABLE;
   184fa:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        if (enabled == SPIM_ENABLE_ENABLE_Enabled) {
   184fe:	2b07      	cmp	r3, #7
   18500:	d004      	beq.n	1850c <hal_spi_txrx+0x38>
            hal_spi_disable(spi_num);
            enabled = 0;
        }

        spi = (NRF_SPI_Type *)spim;
        if (enabled == 0) {
   18502:	b95b      	cbnz	r3, 1851c <hal_spi_txrx+0x48>
            spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   18504:	2301      	movs	r3, #1
   18506:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   1850a:	e007      	b.n	1851c <hal_spi_txrx+0x48>
            hal_spi_disable(spi_num);
   1850c:	f7ff ff68 	bl	183e0 <hal_spi_disable>
        if (enabled == 0) {
   18510:	e7f8      	b.n	18504 <hal_spi_txrx+0x30>
        }

        while (spi->EVENTS_READY) {
            rxval = (uint8_t)spi->RXD;
   18512:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
            spi->EVENTS_READY = 0;
   18516:	2300      	movs	r3, #0
   18518:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
        while (spi->EVENTS_READY) {
   1851c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18520:	2b00      	cmp	r3, #0
   18522:	d1f6      	bne.n	18512 <hal_spi_txrx+0x3e>
        }
        txd = (uint8_t *)txbuf;
        spi->TXD = *txd;
   18524:	782b      	ldrb	r3, [r5, #0]
   18526:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c

        txcnt = len - 1;
   1852a:	1e7a      	subs	r2, r7, #1
        rxd = (uint8_t *)rxbuf;
   1852c:	4631      	mov	r1, r6
        for (i = 0; i < len; ++i) {
   1852e:	2000      	movs	r0, #0
   18530:	e00d      	b.n	1854e <hal_spi_txrx+0x7a>
            if (txcnt) {
                ++txd;
                spi->TXD = *txd;
                --txcnt;
            }
            while (!spi->EVENTS_READY) {}
   18532:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18536:	2b00      	cmp	r3, #0
   18538:	d0fb      	beq.n	18532 <hal_spi_txrx+0x5e>
            spi->EVENTS_READY = 0;
   1853a:	2300      	movs	r3, #0
   1853c:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
            rxval = (uint8_t)spi->RXD;
   18540:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
   18544:	b2db      	uxtb	r3, r3
            if (rxbuf) {
   18546:	b10e      	cbz	r6, 1854c <hal_spi_txrx+0x78>
                *rxd = rxval;
   18548:	f801 3b01 	strb.w	r3, [r1], #1
        for (i = 0; i < len; ++i) {
   1854c:	3001      	adds	r0, #1
   1854e:	42b8      	cmp	r0, r7
   18550:	da07      	bge.n	18562 <hal_spi_txrx+0x8e>
            if (txcnt) {
   18552:	2a00      	cmp	r2, #0
   18554:	d0ed      	beq.n	18532 <hal_spi_txrx+0x5e>
                spi->TXD = *txd;
   18556:	786b      	ldrb	r3, [r5, #1]
   18558:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
                --txcnt;
   1855c:	3a01      	subs	r2, #1
                ++txd;
   1855e:	3501      	adds	r5, #1
   18560:	e7e7      	b.n	18532 <hal_spi_txrx+0x5e>
                ++rxd;
            }
        }
        return 0;
   18562:	2000      	movs	r0, #0
    }

err:
    return rc;
}
   18564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return rc;
   18566:	2016      	movs	r0, #22
}
   18568:	4770      	bx	lr
    return rc;
   1856a:	2016      	movs	r0, #22
   1856c:	e7fa      	b.n	18564 <hal_spi_txrx+0x90>
   1856e:	2016      	movs	r0, #22
   18570:	e7f8      	b.n	18564 <hal_spi_txrx+0x90>
   18572:	2016      	movs	r0, #22
   18574:	e7f6      	b.n	18564 <hal_spi_txrx+0x90>
   18576:	2016      	movs	r0, #22
   18578:	e7f4      	b.n	18564 <hal_spi_txrx+0x90>
   1857a:	bf00      	nop
   1857c:	00024620 	.word	0x00024620

00018580 <hal_spi_txrx_noblock>:
 *
 * @return int 0 on success, non-zero error code on failure.
 */
int
hal_spi_txrx_noblock(int spi_num, void *txbuf, void *rxbuf, int len)
{
   18580:	b570      	push	{r4, r5, r6, lr}
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    rc = EINVAL;
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   18582:	2803      	cmp	r0, #3
   18584:	dc63      	bgt.n	1864e <hal_spi_txrx_noblock+0xce>
   18586:	461c      	mov	r4, r3
   18588:	4b3a      	ldr	r3, [pc, #232]	; (18674 <hal_spi_txrx_noblock+0xf4>)
   1858a:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   1858e:	2d00      	cmp	r5, #0
   18590:	d060      	beq.n	18654 <hal_spi_txrx_noblock+0xd4>

    if ((spi->txrx_cb_func == NULL) || (len == 0)) {
   18592:	6a2b      	ldr	r3, [r5, #32]
   18594:	2b00      	cmp	r3, #0
   18596:	d05f      	beq.n	18658 <hal_spi_txrx_noblock+0xd8>
   18598:	2c00      	cmp	r4, #0
   1859a:	d05f      	beq.n	1865c <hal_spi_txrx_noblock+0xdc>
#if MYNEWT_VAL_CHOICE(MCU_TARGET,nRF52832)
    /* There is a known issue in nRF52832 with sending 1 byte in SPIM mode that
     * it clocks out additional byte. For this reason, let us use SPI mode
     * for such a write
     */
    if (len == 1) {
   1859c:	2c01      	cmp	r4, #1
   1859e:	d033      	beq.n	18608 <hal_spi_txrx_noblock+0x88>
        }
        return rc;
    }
#endif

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   185a0:	782b      	ldrb	r3, [r5, #0]
   185a2:	2b00      	cmp	r3, #0
   185a4:	d141      	bne.n	1862a <hal_spi_txrx_noblock+0xaa>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
   185a6:	2900      	cmp	r1, #0
   185a8:	d05a      	beq.n	18660 <hal_spi_txrx_noblock+0xe0>
            goto err;
        }

        /* Not allowed if transfer in progress */
        if (spi->spi_xfr_flag) {
   185aa:	786b      	ldrb	r3, [r5, #1]
   185ac:	2b00      	cmp	r3, #0
   185ae:	d159      	bne.n	18664 <hal_spi_txrx_noblock+0xe4>
            rc = -1;
            goto err;
        }
        spim = spi->nhs_spi.spim;
   185b0:	6928      	ldr	r0, [r5, #16]
#if MYNEWT_VAL(SPI_3_MASTER)
        if (spim == NRF_SPIM3) {
            anomaly_198_enable(txbuf, len);
        }
#endif
        spim->INTENCLR = SPIM_INTENCLR_END_Msk;
   185b2:	2340      	movs	r3, #64	; 0x40
   185b4:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
        spi->spi_xfr_flag = 1;
   185b8:	2301      	movs	r3, #1
   185ba:	706b      	strb	r3, [r5, #1]

        /* Must be enabled for SPIM as opposed to SPI */
        if (spim->ENABLE != SPIM_ENABLE_ENABLE_Enabled) {
   185bc:	f8d0 3500 	ldr.w	r3, [r0, #1280]	; 0x500
   185c0:	2b07      	cmp	r3, #7
   185c2:	d005      	beq.n	185d0 <hal_spi_txrx_noblock+0x50>
            spim->ENABLE = 0;
   185c4:	2300      	movs	r3, #0
   185c6:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
            spim->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   185ca:	2307      	movs	r3, #7
   185cc:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
        }

        /* Set internal data structure information */
        spi->nhs_bytes_txd = 0;
   185d0:	2300      	movs	r3, #0
   185d2:	80eb      	strh	r3, [r5, #6]
        spi->nhs_buflen = len;
   185d4:	80ac      	strh	r4, [r5, #4]
        spi->nhs_txbuf = txbuf;
   185d6:	61a9      	str	r1, [r5, #24]

        len = min(SPIM_TXD_MAXCNT_MAX, len);
   185d8:	2cff      	cmp	r4, #255	; 0xff
   185da:	bfa8      	it	ge
   185dc:	24ff      	movge	r4, #255	; 0xff

        /* Set chip registers */
        spim->TXD.PTR = (uint32_t)txbuf;
   185de:	f8c0 1544 	str.w	r1, [r0, #1348]	; 0x544
        spim->TXD.MAXCNT = len;
   185e2:	f8c0 4548 	str.w	r4, [r0, #1352]	; 0x548

        /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
        spi->nhs_rxbuf = rxbuf;
   185e6:	61ea      	str	r2, [r5, #28]
        if (rxbuf == NULL) {
   185e8:	b1c2      	cbz	r2, 1861c <hal_spi_txrx_noblock+0x9c>
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
            spim->RXD.MAXCNT = 1;
        } else {
            spim->RXD.PTR = (uint32_t)rxbuf;
   185ea:	f8c0 2534 	str.w	r2, [r0, #1332]	; 0x534
            spim->RXD.MAXCNT = len;
   185ee:	f8c0 4538 	str.w	r4, [r0, #1336]	; 0x538
        }

        spim->EVENTS_END = 0;
   185f2:	2600      	movs	r6, #0
   185f4:	f8c0 6118 	str.w	r6, [r0, #280]	; 0x118
        spim->EVENTS_STOPPED = 0;
   185f8:	f8c0 6104 	str.w	r6, [r0, #260]	; 0x104
        spim->TASKS_START = 1;
   185fc:	2301      	movs	r3, #1
   185fe:	6103      	str	r3, [r0, #16]
        spim->INTENSET = SPIM_INTENSET_END_Msk;
   18600:	2340      	movs	r3, #64	; 0x40
   18602:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
   18606:	e023      	b.n	18650 <hal_spi_txrx_noblock+0xd0>
        rc = hal_spi_txrx(spi_num, txbuf, rxbuf, len);
   18608:	4623      	mov	r3, r4
   1860a:	f7ff ff63 	bl	184d4 <hal_spi_txrx>
        if (rc == 0) {
   1860e:	4606      	mov	r6, r0
   18610:	b9f0      	cbnz	r0, 18650 <hal_spi_txrx_noblock+0xd0>
            spi->txrx_cb_func(spi->txrx_cb_arg, len);
   18612:	6a2b      	ldr	r3, [r5, #32]
   18614:	4621      	mov	r1, r4
   18616:	6a68      	ldr	r0, [r5, #36]	; 0x24
   18618:	4798      	blx	r3
        return rc;
   1861a:	e019      	b.n	18650 <hal_spi_txrx_noblock+0xd0>
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
   1861c:	3502      	adds	r5, #2
   1861e:	f8c0 5534 	str.w	r5, [r0, #1332]	; 0x534
            spim->RXD.MAXCNT = 1;
   18622:	2301      	movs	r3, #1
   18624:	f8c0 3538 	str.w	r3, [r0, #1336]	; 0x538
   18628:	e7e3      	b.n	185f2 <hal_spi_txrx_noblock+0x72>
    } else {
        /* Must have txbuf or rxbuf */
        if ((txbuf == NULL) && (rxbuf == NULL)) {
   1862a:	b161      	cbz	r1, 18646 <hal_spi_txrx_noblock+0xc6>
            goto err;
        }

        /* XXX: what to do here? */
        if (len > 255) {
   1862c:	2cff      	cmp	r4, #255	; 0xff
   1862e:	dc1c      	bgt.n	1866a <hal_spi_txrx_noblock+0xea>
        /*
         * Ready the slave for a transfer. Do not allow this to be called
         * if the slave has already been readied or is requesting the
         * semaphore
         */
        if (spi->slave_state != HAL_SPI_SLAVE_STATE_IDLE) {
   18630:	78eb      	ldrb	r3, [r5, #3]
   18632:	b9e3      	cbnz	r3, 1866e <hal_spi_txrx_noblock+0xee>
            rc = -1;
            goto err;
        }

        spi->nhs_rxbuf = rxbuf;
   18634:	61ea      	str	r2, [r5, #28]
        spi->nhs_txbuf = txbuf;
   18636:	61a9      	str	r1, [r5, #24]
        spi->nhs_buflen = len;
   18638:	80ac      	strh	r4, [r5, #4]
        spi->slave_state = HAL_SPI_SLAVE_STATE_ACQ_SEM;
   1863a:	2301      	movs	r3, #1
   1863c:	70eb      	strb	r3, [r5, #3]
        spi->nhs_spi.spis->TASKS_ACQUIRE = 1;
   1863e:	692a      	ldr	r2, [r5, #16]
   18640:	6253      	str	r3, [r2, #36]	; 0x24
    }
    return 0;
   18642:	2600      	movs	r6, #0
   18644:	e004      	b.n	18650 <hal_spi_txrx_noblock+0xd0>
        if ((txbuf == NULL) && (rxbuf == NULL)) {
   18646:	2a00      	cmp	r2, #0
   18648:	d1f0      	bne.n	1862c <hal_spi_txrx_noblock+0xac>
    rc = EINVAL;
   1864a:	2616      	movs	r6, #22
   1864c:	e000      	b.n	18650 <hal_spi_txrx_noblock+0xd0>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1864e:	2616      	movs	r6, #22

err:
    return rc;
}
   18650:	4630      	mov	r0, r6
   18652:	bd70      	pop	{r4, r5, r6, pc}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   18654:	2616      	movs	r6, #22
   18656:	e7fb      	b.n	18650 <hal_spi_txrx_noblock+0xd0>
    rc = EINVAL;
   18658:	2616      	movs	r6, #22
   1865a:	e7f9      	b.n	18650 <hal_spi_txrx_noblock+0xd0>
   1865c:	2616      	movs	r6, #22
   1865e:	e7f7      	b.n	18650 <hal_spi_txrx_noblock+0xd0>
   18660:	2616      	movs	r6, #22
   18662:	e7f5      	b.n	18650 <hal_spi_txrx_noblock+0xd0>
            rc = -1;
   18664:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   18668:	e7f2      	b.n	18650 <hal_spi_txrx_noblock+0xd0>
    rc = EINVAL;
   1866a:	2616      	movs	r6, #22
   1866c:	e7f0      	b.n	18650 <hal_spi_txrx_noblock+0xd0>
            rc = -1;
   1866e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   18672:	e7ed      	b.n	18650 <hal_spi_txrx_noblock+0xd0>
   18674:	00024620 	.word	0x00024620

00018678 <nrf_read_timer_cntr>:
nrf_read_timer_cntr(NRF_TIMER_Type *hwtimer)
{
    uint32_t tcntr;

    /* Force a capture of the timer into 'cntr' capture channel; read it */
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
   18678:	2301      	movs	r3, #1
   1867a:	6483      	str	r3, [r0, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
   1867c:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548

    return tcntr;
}
   18680:	4770      	bx	lr
	...

00018684 <nrf_timer_set_ocmp>:
 *
 * @param timer Pointer to timer.
 */
static void
nrf_timer_set_ocmp(struct nrf52_hal_timer *bsptimer, uint32_t expiry)
{
   18684:	b538      	push	{r3, r4, r5, lr}
   18686:	4604      	mov	r4, r0
   18688:	460d      	mov	r5, r1
    uint32_t temp;
    uint32_t cntr;
    NRF_TIMER_Type *hwtimer;
    NRF_RTC_Type *rtctimer;

    if (bsptimer->tmr_rtc) {
   1868a:	7883      	ldrb	r3, [r0, #2]
   1868c:	b39b      	cbz	r3, 186f6 <nrf_timer_set_ocmp+0x72>
        rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1868e:	6902      	ldr	r2, [r0, #16]
        rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   18690:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   18694:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        temp = bsptimer->tmr_cntr;
   18698:	6843      	ldr	r3, [r0, #4]
        cntr = rtctimer->COUNTER;
   1869a:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
        if (rtctimer->EVENTS_OVRFLW) {
   1869e:	f8d2 0104 	ldr.w	r0, [r2, #260]	; 0x104
   186a2:	b118      	cbz	r0, 186ac <nrf_timer_set_ocmp+0x28>
            temp += (1UL << 24);
   186a4:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
            cntr = rtctimer->COUNTER;
   186a8:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
        }
        temp |= cntr;
   186ac:	430b      	orrs	r3, r1
        delta_t = (int32_t)(expiry - temp);
   186ae:	1aeb      	subs	r3, r5, r3
         * The nrf documentation states that you must set the output
         * compare to 2 greater than the counter to guarantee an interrupt.
         * Since the counter can tick once while we check, we make sure
         * it is greater than 2.
         */
        if (delta_t < 3) {
   186b0:	2b02      	cmp	r3, #2
   186b2:	dc0f      	bgt.n	186d4 <nrf_timer_set_ocmp+0x50>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   186b4:	7862      	ldrb	r2, [r4, #1]
   186b6:	f994 3001 	ldrsb.w	r3, [r4, #1]
  if ((int32_t)(IRQn) >= 0)
   186ba:	2b00      	cmp	r3, #0
   186bc:	db15      	blt.n	186ea <nrf_timer_set_ocmp+0x66>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   186be:	f002 021f 	and.w	r2, r2, #31
   186c2:	095b      	lsrs	r3, r3, #5
   186c4:	2101      	movs	r1, #1
   186c6:	fa01 f202 	lsl.w	r2, r1, r2
   186ca:	3340      	adds	r3, #64	; 0x40
   186cc:	491a      	ldr	r1, [pc, #104]	; (18738 <nrf_timer_set_ocmp+0xb4>)
   186ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   186d2:	e00a      	b.n	186ea <nrf_timer_set_ocmp+0x66>
        } else  {
            if (delta_t < (1UL << 24)) {
   186d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   186d8:	d208      	bcs.n	186ec <nrf_timer_set_ocmp+0x68>
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = expiry & 0x00ffffff;
   186da:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
   186de:	f8c2 5548 	str.w	r5, [r2, #1352]	; 0x548
            } else {
                /* CC too far ahead. Just make sure we set compare far ahead */
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
            }
            rtctimer->INTENSET = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   186e2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   186e6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
        /* Force interrupt to occur as we may have missed it */
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
        }
    }
}
   186ea:	bd38      	pop	{r3, r4, r5, pc}
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
   186ec:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
   186f0:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
   186f4:	e7f5      	b.n	186e2 <nrf_timer_set_ocmp+0x5e>
        hwtimer = bsptimer->tmr_reg;
   186f6:	6900      	ldr	r0, [r0, #16]
        hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   186f8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   186fc:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
        hwtimer->CC[NRF_TIMER_CC_INT] = expiry;
   18700:	f8c0 154c 	str.w	r1, [r0, #1356]	; 0x54c
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   18704:	2200      	movs	r2, #0
   18706:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
        hwtimer->INTENSET = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1870a:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
   1870e:	f7ff ffb3 	bl	18678 <nrf_read_timer_cntr>
   18712:	1b45      	subs	r5, r0, r5
   18714:	2d00      	cmp	r5, #0
   18716:	dbe8      	blt.n	186ea <nrf_timer_set_ocmp+0x66>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   18718:	7862      	ldrb	r2, [r4, #1]
   1871a:	f994 3001 	ldrsb.w	r3, [r4, #1]
  if ((int32_t)(IRQn) >= 0)
   1871e:	2b00      	cmp	r3, #0
   18720:	dbe3      	blt.n	186ea <nrf_timer_set_ocmp+0x66>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18722:	f002 021f 	and.w	r2, r2, #31
   18726:	095b      	lsrs	r3, r3, #5
   18728:	2101      	movs	r1, #1
   1872a:	fa01 f202 	lsl.w	r2, r1, r2
   1872e:	3340      	adds	r3, #64	; 0x40
   18730:	4901      	ldr	r1, [pc, #4]	; (18738 <nrf_timer_set_ocmp+0xb4>)
   18732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   18736:	e7d8      	b.n	186ea <nrf_timer_set_ocmp+0x66>
   18738:	e000e100 	.word	0xe000e100

0001873c <nrf_timer_disable_ocmp>:

/* Disable output compare used for timer */
static void
nrf_timer_disable_ocmp(NRF_TIMER_Type *hwtimer)
{
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1873c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   18740:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   18744:	4770      	bx	lr

00018746 <nrf_rtc_disable_ocmp>:

static void
nrf_rtc_disable_ocmp(NRF_RTC_Type *rtctimer)
{
    rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   18746:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1874a:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1874e:	4770      	bx	lr

00018750 <hal_timer_read_bsptimer>:

static uint32_t
hal_timer_read_bsptimer(struct nrf52_hal_timer *bsptimer)
{
   18750:	b430      	push	{r4, r5}
    uint32_t low32;
    uint32_t ctx;
    uint32_t tcntr;
    NRF_RTC_Type *rtctimer;

    rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   18752:	6902      	ldr	r2, [r0, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   18754:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   18758:	b672      	cpsid	i
    __HAL_DISABLE_INTERRUPTS(ctx);
    tcntr = bsptimer->tmr_cntr;
   1875a:	6841      	ldr	r1, [r0, #4]
    low32 = rtctimer->COUNTER;
   1875c:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
    if (rtctimer->EVENTS_OVRFLW) {
   18760:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   18764:	b1b5      	cbz	r5, 18794 <hal_timer_read_bsptimer+0x44>
        tcntr += (1UL << 24);
   18766:	f101 7180 	add.w	r1, r1, #16777216	; 0x1000000
        bsptimer->tmr_cntr = tcntr;
   1876a:	6041      	str	r1, [r0, #4]
        low32 = rtctimer->COUNTER;
   1876c:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
        rtctimer->EVENTS_OVRFLW = 0;
   18770:	2500      	movs	r5, #0
   18772:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
        NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   18776:	7845      	ldrb	r5, [r0, #1]
   18778:	f990 2001 	ldrsb.w	r2, [r0, #1]
  if ((int32_t)(IRQn) >= 0)
   1877c:	2a00      	cmp	r2, #0
   1877e:	db09      	blt.n	18794 <hal_timer_read_bsptimer+0x44>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18780:	f005 051f 	and.w	r5, r5, #31
   18784:	0952      	lsrs	r2, r2, #5
   18786:	2001      	movs	r0, #1
   18788:	fa00 f505 	lsl.w	r5, r0, r5
   1878c:	3240      	adds	r2, #64	; 0x40
   1878e:	4804      	ldr	r0, [pc, #16]	; (187a0 <hal_timer_read_bsptimer+0x50>)
   18790:	f840 5022 	str.w	r5, [r0, r2, lsl #2]
    }
    tcntr |= low32;
   18794:	ea43 0001 	orr.w	r0, r3, r1
    __HAL_ENABLE_INTERRUPTS(ctx);
   18798:	b904      	cbnz	r4, 1879c <hal_timer_read_bsptimer+0x4c>
  __ASM volatile ("cpsie i" : : : "memory");
   1879a:	b662      	cpsie	i

    return tcntr;
}
   1879c:	bc30      	pop	{r4, r5}
   1879e:	4770      	bx	lr
   187a0:	e000e100 	.word	0xe000e100

000187a4 <hal_timer_chk_queue>:
 *
 * @param bsptimer
 */
static void
hal_timer_chk_queue(struct nrf52_hal_timer *bsptimer)
{
   187a4:	b570      	push	{r4, r5, r6, lr}
   187a6:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   187a8:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   187ac:	b672      	cpsid	i
}
   187ae:	e013      	b.n	187d8 <hal_timer_chk_queue+0x34>
             * If we are within 3 ticks of RTC, we wont be able to set compare.
             * Thus, we have to service this timer early.
             */
            delta = -3;
        } else {
            tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   187b0:	6928      	ldr	r0, [r5, #16]
   187b2:	f7ff ff61 	bl	18678 <nrf_read_timer_cntr>
            delta = 0;
   187b6:	2200      	movs	r2, #0
        }
        if ((int32_t)(tcntr - timer->expiry) >= delta) {
   187b8:	68e3      	ldr	r3, [r4, #12]
   187ba:	1ac3      	subs	r3, r0, r3
   187bc:	4293      	cmp	r3, r2
   187be:	db19      	blt.n	187f4 <hal_timer_chk_queue+0x50>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   187c0:	6923      	ldr	r3, [r4, #16]
   187c2:	b1a3      	cbz	r3, 187ee <hal_timer_chk_queue+0x4a>
   187c4:	6962      	ldr	r2, [r4, #20]
   187c6:	615a      	str	r2, [r3, #20]
   187c8:	6963      	ldr	r3, [r4, #20]
   187ca:	6922      	ldr	r2, [r4, #16]
   187cc:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
   187ce:	2300      	movs	r3, #0
   187d0:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
   187d2:	6863      	ldr	r3, [r4, #4]
   187d4:	68a0      	ldr	r0, [r4, #8]
   187d6:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
   187d8:	696c      	ldr	r4, [r5, #20]
   187da:	b15c      	cbz	r4, 187f4 <hal_timer_chk_queue+0x50>
        if (bsptimer->tmr_rtc) {
   187dc:	78ab      	ldrb	r3, [r5, #2]
   187de:	2b00      	cmp	r3, #0
   187e0:	d0e6      	beq.n	187b0 <hal_timer_chk_queue+0xc>
            tcntr = hal_timer_read_bsptimer(bsptimer);
   187e2:	4628      	mov	r0, r5
   187e4:	f7ff ffb4 	bl	18750 <hal_timer_read_bsptimer>
            delta = -3;
   187e8:	f06f 0202 	mvn.w	r2, #2
   187ec:	e7e4      	b.n	187b8 <hal_timer_chk_queue+0x14>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   187ee:	6963      	ldr	r3, [r4, #20]
   187f0:	61ab      	str	r3, [r5, #24]
   187f2:	e7e9      	b.n	187c8 <hal_timer_chk_queue+0x24>
            break;
        }
    }

    /* Any timers left on queue? If so, we need to set OCMP */
    timer = TAILQ_FIRST(&bsptimer->hal_timer_q);
   187f4:	696b      	ldr	r3, [r5, #20]
    if (timer) {
   187f6:	b133      	cbz	r3, 18806 <hal_timer_chk_queue+0x62>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
   187f8:	68d9      	ldr	r1, [r3, #12]
   187fa:	4628      	mov	r0, r5
   187fc:	f7ff ff42 	bl	18684 <nrf_timer_set_ocmp>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
        } else {
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
        }
    }
    __HAL_ENABLE_INTERRUPTS(ctx);
   18800:	b906      	cbnz	r6, 18804 <hal_timer_chk_queue+0x60>
  __ASM volatile ("cpsie i" : : : "memory");
   18802:	b662      	cpsie	i
}
   18804:	bd70      	pop	{r4, r5, r6, pc}
        if (bsptimer->tmr_rtc) {
   18806:	78ab      	ldrb	r3, [r5, #2]
   18808:	b11b      	cbz	r3, 18812 <hal_timer_chk_queue+0x6e>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
   1880a:	6928      	ldr	r0, [r5, #16]
   1880c:	f7ff ff9b 	bl	18746 <nrf_rtc_disable_ocmp>
   18810:	e7f6      	b.n	18800 <hal_timer_chk_queue+0x5c>
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
   18812:	6928      	ldr	r0, [r5, #16]
   18814:	f7ff ff92 	bl	1873c <nrf_timer_disable_ocmp>
   18818:	e7f2      	b.n	18800 <hal_timer_chk_queue+0x5c>

0001881a <hal_timer_irq_handler>:
#if (MYNEWT_VAL(TIMER_0) || MYNEWT_VAL(TIMER_1) || MYNEWT_VAL(TIMER_2) || \
     MYNEWT_VAL(TIMER_3) || MYNEWT_VAL(TIMER_4))

static void
hal_timer_irq_handler(struct nrf52_hal_timer *bsptimer)
{
   1881a:	b510      	push	{r4, lr}
    NRF_TIMER_Type *hwtimer;

    os_trace_isr_enter();

    /* Check interrupt source. If set, clear them */
    hwtimer = bsptimer->tmr_reg;
   1881c:	6904      	ldr	r4, [r0, #16]
    compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   1881e:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    if (compare) {
   18822:	b113      	cbz	r3, 1882a <hal_timer_irq_handler+0x10>
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   18824:	2300      	movs	r3, #0
   18826:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    }

    /* XXX: make these stats? */
    /* Count # of timer isrs */
    ++bsptimer->timer_isrs;
   1882a:	6883      	ldr	r3, [r0, #8]
   1882c:	3301      	adds	r3, #1
   1882e:	6083      	str	r3, [r0, #8]
     * counter is already passed the output compare value), we use the NVIC
     * to set a pending interrupt. This means that there will be no compare
     * flag set, so all we do is check to see if the compare interrupt is
     * enabled.
     */
    if (hwtimer->INTENCLR & NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT)) {
   18830:	f8d4 3308 	ldr.w	r3, [r4, #776]	; 0x308
   18834:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   18838:	d100      	bne.n	1883c <hal_timer_irq_handler+0x22>
        /* XXX: Recommended by nordic to make sure interrupts are cleared */
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
    }

    os_trace_isr_exit();
}
   1883a:	bd10      	pop	{r4, pc}
        hal_timer_chk_queue(bsptimer);
   1883c:	f7ff ffb2 	bl	187a4 <hal_timer_chk_queue>
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   18840:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
}
   18844:	e7f9      	b.n	1883a <hal_timer_irq_handler+0x20>
	...

00018848 <nrf52_timer0_irq_handler>:
#endif

#if MYNEWT_VAL(TIMER_0)
void
nrf52_timer0_irq_handler(void)
{
   18848:	b508      	push	{r3, lr}
    hal_timer_irq_handler(&nrf52_hal_timer0);
   1884a:	4802      	ldr	r0, [pc, #8]	; (18854 <nrf52_timer0_irq_handler+0xc>)
   1884c:	f7ff ffe5 	bl	1881a <hal_timer_irq_handler>
}
   18850:	bd08      	pop	{r3, pc}
   18852:	bf00      	nop
   18854:	2000459c 	.word	0x2000459c

00018858 <hal_timer_init>:
    uint8_t irq_num;
    struct nrf52_hal_timer *bsptimer;
    void *hwtimer;
    hal_timer_irq_handler_t irq_isr;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   18858:	2805      	cmp	r0, #5
   1885a:	dc1c      	bgt.n	18896 <hal_timer_init+0x3e>
   1885c:	4b12      	ldr	r3, [pc, #72]	; (188a8 <hal_timer_init+0x50>)
   1885e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   18862:	b1d3      	cbz	r3, 1889a <hal_timer_init+0x42>

    /* If timer is enabled do not allow init */
    if (bsptimer->tmr_enabled) {
   18864:	781a      	ldrb	r2, [r3, #0]
   18866:	b9d2      	cbnz	r2, 1889e <hal_timer_init+0x46>
        rc = EINVAL;
        goto err;
    }

    switch (timer_num) {
   18868:	b9d8      	cbnz	r0, 188a2 <hal_timer_init+0x4a>
    if (hwtimer == NULL) {
        rc = EINVAL;
        goto err;
    }

    bsptimer->tmr_reg = hwtimer;
   1886a:	4a10      	ldr	r2, [pc, #64]	; (188ac <hal_timer_init+0x54>)
   1886c:	611a      	str	r2, [r3, #16]
    bsptimer->tmr_irq_num = irq_num;
   1886e:	2208      	movs	r2, #8
   18870:	705a      	strb	r2, [r3, #1]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18872:	4b0f      	ldr	r3, [pc, #60]	; (188b0 <hal_timer_init+0x58>)
   18874:	f44f 7280 	mov.w	r2, #256	; 0x100
   18878:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   1887c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   18880:	f3bf 8f6f 	isb	sy
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   18884:	22e0      	movs	r2, #224	; 0xe0
   18886:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1888a:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
   1888e:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   18890:	4a08      	ldr	r2, [pc, #32]	; (188b4 <hal_timer_init+0x5c>)
   18892:	661a      	str	r2, [r3, #96]	; 0x60
    /* Disable IRQ, set priority and set vector in table */
    NVIC_DisableIRQ(irq_num);
    NVIC_SetPriority(irq_num, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_SetVector(irq_num, (uint32_t)irq_isr);

    return 0;
   18894:	4770      	bx	lr

err:
    return rc;
   18896:	2016      	movs	r0, #22
   18898:	4770      	bx	lr
   1889a:	2016      	movs	r0, #22
   1889c:	4770      	bx	lr
   1889e:	2016      	movs	r0, #22
   188a0:	4770      	bx	lr
   188a2:	2016      	movs	r0, #22
}
   188a4:	4770      	bx	lr
   188a6:	bf00      	nop
   188a8:	00024630 	.word	0x00024630
   188ac:	40008000 	.word	0x40008000
   188b0:	e000e100 	.word	0xe000e100
   188b4:	00018849 	.word	0x00018849

000188b8 <hal_timer_config>:
    NRF_TIMER_Type *hwtimer;
#if MYNEWT_VAL(TIMER_5)
    NRF_RTC_Type *rtctimer;
#endif

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   188b8:	2805      	cmp	r0, #5
   188ba:	dc65      	bgt.n	18988 <hal_timer_config+0xd0>
{
   188bc:	b430      	push	{r4, r5}
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   188be:	4b3a      	ldr	r3, [pc, #232]	; (189a8 <hal_timer_config+0xf0>)
   188c0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   188c4:	2c00      	cmp	r4, #0
   188c6:	d061      	beq.n	1898c <hal_timer_config+0xd4>
        return 0;
    }
#endif

    /* Set timer to desired frequency */
    div = NRF52_MAX_TIMER_FREQ / freq_hz;
   188c8:	4838      	ldr	r0, [pc, #224]	; (189ac <hal_timer_config+0xf4>)
   188ca:	fbb0 f0f1 	udiv	r0, r0, r1
    /*
     * Largest prescaler is 2^9 and must make sure frequency not too high.
     * If hwtimer is NULL it means that the timer was not initialized prior
     * to call.
     */
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   188ce:	7823      	ldrb	r3, [r4, #0]
   188d0:	2b00      	cmp	r3, #0
   188d2:	d15d      	bne.n	18990 <hal_timer_config+0xd8>
   188d4:	4a35      	ldr	r2, [pc, #212]	; (189ac <hal_timer_config+0xf4>)
   188d6:	4291      	cmp	r1, r2
   188d8:	d85d      	bhi.n	18996 <hal_timer_config+0xde>
   188da:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   188de:	d85c      	bhi.n	1899a <hal_timer_config+0xe2>
        (bsptimer->tmr_reg == NULL)) {
   188e0:	6922      	ldr	r2, [r4, #16]
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   188e2:	2a00      	cmp	r2, #0
   188e4:	d05b      	beq.n	1899e <hal_timer_config+0xe6>
        rc = EINVAL;
        goto err;
    }

    if (div == 1) {
   188e6:	2801      	cmp	r0, #1
   188e8:	d013      	beq.n	18912 <hal_timer_config+0x5a>
        prescaler = 0;
    } else {
        /* Find closest prescaler */
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   188ea:	2301      	movs	r3, #1
   188ec:	2b09      	cmp	r3, #9
   188ee:	d810      	bhi.n	18912 <hal_timer_config+0x5a>
            if (div <= (1 << prescaler)) {
   188f0:	2201      	movs	r2, #1
   188f2:	409a      	lsls	r2, r3
   188f4:	4282      	cmp	r2, r0
   188f6:	d202      	bcs.n	188fe <hal_timer_config+0x46>
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   188f8:	3301      	adds	r3, #1
   188fa:	b2db      	uxtb	r3, r3
   188fc:	e7f6      	b.n	188ec <hal_timer_config+0x34>
                min_delta = div - (1 << (prescaler - 1));
   188fe:	1e59      	subs	r1, r3, #1
   18900:	2501      	movs	r5, #1
   18902:	fa05 f101 	lsl.w	r1, r5, r1
   18906:	1a41      	subs	r1, r0, r1
                max_delta = (1 << prescaler) - div;
   18908:	1a12      	subs	r2, r2, r0
                if (min_delta < max_delta) {
   1890a:	4291      	cmp	r1, r2
   1890c:	d201      	bcs.n	18912 <hal_timer_config+0x5a>
                    prescaler -= 1;
   1890e:	3b01      	subs	r3, #1
   18910:	b2db      	uxtb	r3, r3
            }
        }
    }

    /* Now set the actual frequency */
    bsptimer->tmr_freq = NRF52_MAX_TIMER_FREQ / (1 << prescaler);
   18912:	4a26      	ldr	r2, [pc, #152]	; (189ac <hal_timer_config+0xf4>)
   18914:	411a      	asrs	r2, r3
   18916:	60e2      	str	r2, [r4, #12]
    bsptimer->tmr_enabled = 1;
   18918:	2201      	movs	r2, #1
   1891a:	7022      	strb	r2, [r4, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1891c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   18920:	b672      	cpsid	i

    /* disable interrupts */
    __HAL_DISABLE_INTERRUPTS(ctx);

    /* Make sure HFXO is started */
    if ((NRF_CLOCK->HFCLKSTAT &
   18922:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   18926:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
   1892a:	f002 1201 	and.w	r2, r2, #65537	; 0x10001
   1892e:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
   18932:	d00c      	beq.n	1894e <hal_timer_config+0x96>
         (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) !=
        (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) {
        NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
   18934:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   18938:	2100      	movs	r1, #0
   1893a:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
        NRF_CLOCK->TASKS_HFCLKSTART = 1;
   1893e:	2101      	movs	r1, #1
   18940:	6011      	str	r1, [r2, #0]
        while (1) {
            if ((NRF_CLOCK->EVENTS_HFCLKSTARTED) != 0) {
   18942:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   18946:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
   1894a:	2a00      	cmp	r2, #0
   1894c:	d0f9      	beq.n	18942 <hal_timer_config+0x8a>
                break;
            }
        }
    }
    hwtimer = bsptimer->tmr_reg;
   1894e:	6922      	ldr	r2, [r4, #16]

    /* Stop the timer first */
    hwtimer->TASKS_STOP = 1;
   18950:	2101      	movs	r1, #1
   18952:	6051      	str	r1, [r2, #4]
    hwtimer->TASKS_CLEAR = 1;
   18954:	60d1      	str	r1, [r2, #12]

    /* Put the timer in timer mode using 32 bits. */
    hwtimer->MODE = TIMER_MODE_MODE_Timer;
   18956:	2500      	movs	r5, #0
   18958:	f8c2 5504 	str.w	r5, [r2, #1284]	; 0x504
    hwtimer->BITMODE = TIMER_BITMODE_BITMODE_32Bit;
   1895c:	2503      	movs	r5, #3
   1895e:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508

    /* Set the pre-scalar */
    hwtimer->PRESCALER = prescaler;
   18962:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

    /* Start the timer */
    hwtimer->TASKS_START = 1;
   18966:	6011      	str	r1, [r2, #0]

    NVIC_EnableIRQ(bsptimer->tmr_irq_num);
   18968:	7862      	ldrb	r2, [r4, #1]
   1896a:	f994 3001 	ldrsb.w	r3, [r4, #1]
  if ((int32_t)(IRQn) >= 0)
   1896e:	2b00      	cmp	r3, #0
   18970:	db07      	blt.n	18982 <hal_timer_config+0xca>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18972:	f002 021f 	and.w	r2, r2, #31
   18976:	095b      	lsrs	r3, r3, #5
   18978:	fa01 f202 	lsl.w	r2, r1, r2
   1897c:	490c      	ldr	r1, [pc, #48]	; (189b0 <hal_timer_config+0xf8>)
   1897e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    __HAL_ENABLE_INTERRUPTS(ctx);
   18982:	b970      	cbnz	r0, 189a2 <hal_timer_config+0xea>
  __ASM volatile ("cpsie i" : : : "memory");
   18984:	b662      	cpsie	i
}
   18986:	e004      	b.n	18992 <hal_timer_config+0xda>

    return 0;

err:
    return rc;
   18988:	2016      	movs	r0, #22
}
   1898a:	4770      	bx	lr
    return rc;
   1898c:	2016      	movs	r0, #22
   1898e:	e000      	b.n	18992 <hal_timer_config+0xda>
   18990:	2016      	movs	r0, #22
}
   18992:	bc30      	pop	{r4, r5}
   18994:	4770      	bx	lr
    return rc;
   18996:	2016      	movs	r0, #22
   18998:	e7fb      	b.n	18992 <hal_timer_config+0xda>
   1899a:	2016      	movs	r0, #22
   1899c:	e7f9      	b.n	18992 <hal_timer_config+0xda>
   1899e:	2016      	movs	r0, #22
   189a0:	e7f7      	b.n	18992 <hal_timer_config+0xda>
    return 0;
   189a2:	2000      	movs	r0, #0
   189a4:	e7f5      	b.n	18992 <hal_timer_config+0xda>
   189a6:	bf00      	nop
   189a8:	00024630 	.word	0x00024630
   189ac:	00f42400 	.word	0x00f42400
   189b0:	e000e100 	.word	0xe000e100

000189b4 <hal_timer_read>:
 *
 * @return uint32_t The timer counter register.
 */
uint32_t
hal_timer_read(int timer_num)
{
   189b4:	b508      	push	{r3, lr}
    int rc;
    uint32_t tcntr;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   189b6:	2805      	cmp	r0, #5
   189b8:	dc0c      	bgt.n	189d4 <hal_timer_read+0x20>
   189ba:	4b09      	ldr	r3, [pc, #36]	; (189e0 <hal_timer_read+0x2c>)
   189bc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   189c0:	b140      	cbz	r0, 189d4 <hal_timer_read+0x20>
    if (bsptimer->tmr_rtc) {
   189c2:	7883      	ldrb	r3, [r0, #2]
   189c4:	b113      	cbz	r3, 189cc <hal_timer_read+0x18>
        tcntr = hal_timer_read_bsptimer(bsptimer);
   189c6:	f7ff fec3 	bl	18750 <hal_timer_read_bsptimer>
    /* Assert here since there is no invalid return code */
err:
    assert(0);
    rc = 0;
    return rc;
}
   189ca:	bd08      	pop	{r3, pc}
        tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   189cc:	6900      	ldr	r0, [r0, #16]
   189ce:	f7ff fe53 	bl	18678 <nrf_read_timer_cntr>
    return tcntr;
   189d2:	e7fa      	b.n	189ca <hal_timer_read+0x16>
    assert(0);
   189d4:	2300      	movs	r3, #0
   189d6:	461a      	mov	r2, r3
   189d8:	4619      	mov	r1, r3
   189da:	4618      	mov	r0, r3
   189dc:	f7f0 fac2 	bl	8f64 <__assert_func>
   189e0:	00024630 	.word	0x00024630

000189e4 <hal_timer_set_cb>:
                 void *arg)
{
    int rc;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   189e4:	2805      	cmp	r0, #5
   189e6:	dc0c      	bgt.n	18a02 <hal_timer_set_cb+0x1e>
{
   189e8:	b410      	push	{r4}
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   189ea:	4c08      	ldr	r4, [pc, #32]	; (18a0c <hal_timer_set_cb+0x28>)
   189ec:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
   189f0:	b14c      	cbz	r4, 18a06 <hal_timer_set_cb+0x22>

    timer->cb_func = cb_func;
   189f2:	604a      	str	r2, [r1, #4]
    timer->cb_arg = arg;
   189f4:	608b      	str	r3, [r1, #8]
    timer->link.tqe_prev = NULL;
   189f6:	2000      	movs	r0, #0
   189f8:	6148      	str	r0, [r1, #20]
    timer->bsp_timer = bsptimer;
   189fa:	600c      	str	r4, [r1, #0]

    rc = 0;

err:
    return rc;
}
   189fc:	f85d 4b04 	ldr.w	r4, [sp], #4
   18a00:	4770      	bx	lr
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   18a02:	2016      	movs	r0, #22
}
   18a04:	4770      	bx	lr
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   18a06:	2016      	movs	r0, #22
    return rc;
   18a08:	e7f8      	b.n	189fc <hal_timer_set_cb+0x18>
   18a0a:	bf00      	nop
   18a0c:	00024630 	.word	0x00024630

00018a10 <hal_timer_start_at>:
{
    uint32_t ctx;
    struct hal_timer *entry;
    struct nrf52_hal_timer *bsptimer;

    if ((timer == NULL) || (timer->link.tqe_prev != NULL) ||
   18a10:	2800      	cmp	r0, #0
   18a12:	d03b      	beq.n	18a8c <hal_timer_start_at+0x7c>
{
   18a14:	b538      	push	{r3, r4, r5, lr}
   18a16:	4604      	mov	r4, r0
    if ((timer == NULL) || (timer->link.tqe_prev != NULL) ||
   18a18:	6943      	ldr	r3, [r0, #20]
   18a1a:	2b00      	cmp	r3, #0
   18a1c:	d138      	bne.n	18a90 <hal_timer_start_at+0x80>
        (timer->cb_func == NULL)) {
   18a1e:	6843      	ldr	r3, [r0, #4]
    if ((timer == NULL) || (timer->link.tqe_prev != NULL) ||
   18a20:	2b00      	cmp	r3, #0
   18a22:	d037      	beq.n	18a94 <hal_timer_start_at+0x84>
        return EINVAL;
    }
    bsptimer = (struct nrf52_hal_timer *)timer->bsp_timer;
   18a24:	6800      	ldr	r0, [r0, #0]
    timer->expiry = tick;
   18a26:	60e1      	str	r1, [r4, #12]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   18a28:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   18a2c:	b672      	cpsid	i

    __HAL_DISABLE_INTERRUPTS(ctx);

    if (TAILQ_EMPTY(&bsptimer->hal_timer_q)) {
   18a2e:	6943      	ldr	r3, [r0, #20]
   18a30:	b13b      	cbz	r3, 18a42 <hal_timer_start_at+0x32>
        TAILQ_INSERT_HEAD(&bsptimer->hal_timer_q, timer, link);
    } else {
        TAILQ_FOREACH(entry, &bsptimer->hal_timer_q, link) {
   18a32:	b1bb      	cbz	r3, 18a64 <hal_timer_start_at+0x54>
            if ((int32_t)(timer->expiry - entry->expiry) < 0) {
   18a34:	68e2      	ldr	r2, [r4, #12]
   18a36:	68d9      	ldr	r1, [r3, #12]
   18a38:	1a52      	subs	r2, r2, r1
   18a3a:	2a00      	cmp	r2, #0
   18a3c:	db0a      	blt.n	18a54 <hal_timer_start_at+0x44>
        TAILQ_FOREACH(entry, &bsptimer->hal_timer_q, link) {
   18a3e:	691b      	ldr	r3, [r3, #16]
   18a40:	e7f7      	b.n	18a32 <hal_timer_start_at+0x22>
        TAILQ_INSERT_HEAD(&bsptimer->hal_timer_q, timer, link);
   18a42:	4622      	mov	r2, r4
   18a44:	f842 3f10 	str.w	r3, [r2, #16]!
   18a48:	6182      	str	r2, [r0, #24]
   18a4a:	4603      	mov	r3, r0
   18a4c:	f843 4f14 	str.w	r4, [r3, #20]!
   18a50:	6163      	str	r3, [r4, #20]
   18a52:	e008      	b.n	18a66 <hal_timer_start_at+0x56>
                TAILQ_INSERT_BEFORE(entry, timer, link);
   18a54:	695a      	ldr	r2, [r3, #20]
   18a56:	6162      	str	r2, [r4, #20]
   18a58:	6123      	str	r3, [r4, #16]
   18a5a:	695a      	ldr	r2, [r3, #20]
   18a5c:	6014      	str	r4, [r2, #0]
   18a5e:	f104 0210 	add.w	r2, r4, #16
   18a62:	615a      	str	r2, [r3, #20]
                break;
            }
        }
        if (!entry) {
   18a64:	b133      	cbz	r3, 18a74 <hal_timer_start_at+0x64>
            TAILQ_INSERT_TAIL(&bsptimer->hal_timer_q, timer, link);
        }
    }

    /* If this is the head, we need to set new OCMP */
    if (timer == TAILQ_FIRST(&bsptimer->hal_timer_q)) {
   18a66:	6943      	ldr	r3, [r0, #20]
   18a68:	42a3      	cmp	r3, r4
   18a6a:	d00b      	beq.n	18a84 <hal_timer_start_at+0x74>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
    }

    __HAL_ENABLE_INTERRUPTS(ctx);
   18a6c:	b9a5      	cbnz	r5, 18a98 <hal_timer_start_at+0x88>
  __ASM volatile ("cpsie i" : : : "memory");
   18a6e:	b662      	cpsie	i

    return 0;
   18a70:	2000      	movs	r0, #0
}
   18a72:	e00e      	b.n	18a92 <hal_timer_start_at+0x82>
            TAILQ_INSERT_TAIL(&bsptimer->hal_timer_q, timer, link);
   18a74:	6123      	str	r3, [r4, #16]
   18a76:	6983      	ldr	r3, [r0, #24]
   18a78:	6163      	str	r3, [r4, #20]
   18a7a:	601c      	str	r4, [r3, #0]
   18a7c:	f104 0310 	add.w	r3, r4, #16
   18a80:	6183      	str	r3, [r0, #24]
   18a82:	e7f0      	b.n	18a66 <hal_timer_start_at+0x56>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
   18a84:	68e1      	ldr	r1, [r4, #12]
   18a86:	f7ff fdfd 	bl	18684 <nrf_timer_set_ocmp>
   18a8a:	e7ef      	b.n	18a6c <hal_timer_start_at+0x5c>
        return EINVAL;
   18a8c:	2016      	movs	r0, #22
}
   18a8e:	4770      	bx	lr
        return EINVAL;
   18a90:	2016      	movs	r0, #22
}
   18a92:	bd38      	pop	{r3, r4, r5, pc}
        return EINVAL;
   18a94:	2016      	movs	r0, #22
   18a96:	e7fc      	b.n	18a92 <hal_timer_start_at+0x82>
    return 0;
   18a98:	2000      	movs	r0, #0
   18a9a:	e7fa      	b.n	18a92 <hal_timer_start_at+0x82>

00018a9c <hal_timer_stop>:
    uint32_t ctx;
    int reset_ocmp;
    struct hal_timer *entry;
    struct nrf52_hal_timer *bsptimer;

    if (timer == NULL) {
   18a9c:	b360      	cbz	r0, 18af8 <hal_timer_stop+0x5c>
{
   18a9e:	b570      	push	{r4, r5, r6, lr}
   18aa0:	4603      	mov	r3, r0
        return EINVAL;
    }

   bsptimer = (struct nrf52_hal_timer *)timer->bsp_timer;
   18aa2:	6801      	ldr	r1, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   18aa4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   18aa8:	b672      	cpsid	i

    __HAL_DISABLE_INTERRUPTS(ctx);

    if (timer->link.tqe_prev != NULL) {
   18aaa:	6942      	ldr	r2, [r0, #20]
   18aac:	b18a      	cbz	r2, 18ad2 <hal_timer_stop+0x36>
        reset_ocmp = 0;
        if (timer == TAILQ_FIRST(&bsptimer->hal_timer_q)) {
   18aae:	6948      	ldr	r0, [r1, #20]
   18ab0:	4298      	cmp	r0, r3
   18ab2:	d012      	beq.n	18ada <hal_timer_stop+0x3e>
        reset_ocmp = 0;
   18ab4:	2500      	movs	r5, #0
            /* If first on queue, we will need to reset OCMP */
            entry = TAILQ_NEXT(timer, link);
            reset_ocmp = 1;
        }
        TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   18ab6:	6918      	ldr	r0, [r3, #16]
   18ab8:	b190      	cbz	r0, 18ae0 <hal_timer_stop+0x44>
   18aba:	6142      	str	r2, [r0, #20]
   18abc:	695a      	ldr	r2, [r3, #20]
   18abe:	6918      	ldr	r0, [r3, #16]
   18ac0:	6010      	str	r0, [r2, #0]
        timer->link.tqe_prev = NULL;
   18ac2:	2200      	movs	r2, #0
   18ac4:	615a      	str	r2, [r3, #20]
        if (reset_ocmp) {
   18ac6:	b125      	cbz	r5, 18ad2 <hal_timer_stop+0x36>
            if (entry) {
   18ac8:	b166      	cbz	r6, 18ae4 <hal_timer_stop+0x48>
                nrf_timer_set_ocmp((struct nrf52_hal_timer *)entry->bsp_timer,
   18aca:	68f1      	ldr	r1, [r6, #12]
   18acc:	6830      	ldr	r0, [r6, #0]
   18ace:	f7ff fdd9 	bl	18684 <nrf_timer_set_ocmp>
                }
            }
        }
    }

    __HAL_ENABLE_INTERRUPTS(ctx);
   18ad2:	b99c      	cbnz	r4, 18afc <hal_timer_stop+0x60>
  __ASM volatile ("cpsie i" : : : "memory");
   18ad4:	b662      	cpsie	i

    return 0;
   18ad6:	2000      	movs	r0, #0
}
   18ad8:	e011      	b.n	18afe <hal_timer_stop+0x62>
            entry = TAILQ_NEXT(timer, link);
   18ada:	691e      	ldr	r6, [r3, #16]
            reset_ocmp = 1;
   18adc:	2501      	movs	r5, #1
   18ade:	e7ea      	b.n	18ab6 <hal_timer_stop+0x1a>
        TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   18ae0:	618a      	str	r2, [r1, #24]
   18ae2:	e7eb      	b.n	18abc <hal_timer_stop+0x20>
                if (bsptimer->tmr_rtc) {
   18ae4:	788b      	ldrb	r3, [r1, #2]
   18ae6:	b11b      	cbz	r3, 18af0 <hal_timer_stop+0x54>
                    nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
   18ae8:	6908      	ldr	r0, [r1, #16]
   18aea:	f7ff fe2c 	bl	18746 <nrf_rtc_disable_ocmp>
   18aee:	e7f0      	b.n	18ad2 <hal_timer_stop+0x36>
                    nrf_timer_disable_ocmp(bsptimer->tmr_reg);
   18af0:	6908      	ldr	r0, [r1, #16]
   18af2:	f7ff fe23 	bl	1873c <nrf_timer_disable_ocmp>
   18af6:	e7ec      	b.n	18ad2 <hal_timer_stop+0x36>
        return EINVAL;
   18af8:	2016      	movs	r0, #22
}
   18afa:	4770      	bx	lr
    return 0;
   18afc:	2000      	movs	r0, #0
}
   18afe:	bd70      	pop	{r4, r5, r6, pc}

00018b00 <nrf52_hal_wdt_default_handler>:
#include "mcu/cmsis_nvic.h"
#include "nrf.h"

static void
nrf52_hal_wdt_default_handler(void)
{
   18b00:	b508      	push	{r3, lr}
    assert(0);
   18b02:	2300      	movs	r3, #0
   18b04:	461a      	mov	r2, r3
   18b06:	4619      	mov	r1, r3
   18b08:	4618      	mov	r0, r3
   18b0a:	f7f0 fa2b 	bl	8f64 <__assert_func>
	...

00018b10 <nrf52_wdt_irq_handler>:
}

/**@brief WDT interrupt handler. */
static void
nrf52_wdt_irq_handler(void)
{
   18b10:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (NRF_WDT->INTENSET & WDT_INTENSET_TIMEOUT_Msk) {
   18b12:	4b06      	ldr	r3, [pc, #24]	; (18b2c <nrf52_wdt_irq_handler+0x1c>)
   18b14:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
   18b18:	f013 0f01 	tst.w	r3, #1
   18b1c:	d100      	bne.n	18b20 <nrf52_wdt_irq_handler+0x10>
        NRF_WDT->EVENTS_TIMEOUT = 0;
        nrf52_hal_wdt_default_handler();
    }
    os_trace_isr_exit();
}
   18b1e:	bd08      	pop	{r3, pc}
        NRF_WDT->EVENTS_TIMEOUT = 0;
   18b20:	4b02      	ldr	r3, [pc, #8]	; (18b2c <nrf52_wdt_irq_handler+0x1c>)
   18b22:	2200      	movs	r2, #0
   18b24:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        nrf52_hal_wdt_default_handler();
   18b28:	f7ff ffea 	bl	18b00 <nrf52_hal_wdt_default_handler>
   18b2c:	40010000 	.word	0x40010000

00018b30 <hal_watchdog_init>:

int
hal_watchdog_init(uint32_t expire_msecs)
{
   18b30:	b508      	push	{r3, lr}
    NRF_WDT->CONFIG = WDT_CONFIG_SLEEP_Msk;
   18b32:	4b17      	ldr	r3, [pc, #92]	; (18b90 <hal_watchdog_init+0x60>)
   18b34:	2201      	movs	r2, #1
   18b36:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

    if (expire_msecs >= 44739243) {
   18b3a:	4b16      	ldr	r3, [pc, #88]	; (18b94 <hal_watchdog_init+0x64>)
   18b3c:	4298      	cmp	r0, r3
   18b3e:	d821      	bhi.n	18b84 <hal_watchdog_init+0x54>
        /* maximum allowed time is near 12.5 hours! */
        assert(0);
    } else {
        NRF_WDT->CRV = (expire_msecs * 32) + ((expire_msecs * 96) / 125);
   18b40:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   18b44:	015b      	lsls	r3, r3, #5
   18b46:	4a14      	ldr	r2, [pc, #80]	; (18b98 <hal_watchdog_init+0x68>)
   18b48:	fba2 2303 	umull	r2, r3, r2, r3
   18b4c:	08db      	lsrs	r3, r3, #3
   18b4e:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   18b52:	4b0f      	ldr	r3, [pc, #60]	; (18b90 <hal_watchdog_init+0x60>)
   18b54:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
  uint32_t vectors = (uint32_t )SCB->VTOR;
   18b58:	4a10      	ldr	r2, [pc, #64]	; (18b9c <hal_watchdog_init+0x6c>)
   18b5a:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   18b5c:	4910      	ldr	r1, [pc, #64]	; (18ba0 <hal_watchdog_init+0x70>)
   18b5e:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   18b62:	4a10      	ldr	r2, [pc, #64]	; (18ba4 <hal_watchdog_init+0x74>)
   18b64:	21e0      	movs	r1, #224	; 0xe0
   18b66:	f882 1310 	strb.w	r1, [r2, #784]	; 0x310
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18b6a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   18b6e:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18b72:	6011      	str	r1, [r2, #0]

    NVIC_SetVector(WDT_IRQn, (uint32_t) nrf52_wdt_irq_handler);
    NVIC_SetPriority(WDT_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_ClearPendingIRQ(WDT_IRQn);
    NVIC_EnableIRQ(WDT_IRQn);
    NRF_WDT->RREN |= 0x1;
   18b74:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
   18b78:	f042 0201 	orr.w	r2, r2, #1
   18b7c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

    return (0);
}
   18b80:	2000      	movs	r0, #0
   18b82:	bd08      	pop	{r3, pc}
        assert(0);
   18b84:	2300      	movs	r3, #0
   18b86:	461a      	mov	r2, r3
   18b88:	4619      	mov	r1, r3
   18b8a:	4618      	mov	r0, r3
   18b8c:	f7f0 f9ea 	bl	8f64 <__assert_func>
   18b90:	40010000 	.word	0x40010000
   18b94:	02aaaaaa 	.word	0x02aaaaaa
   18b98:	10624dd3 	.word	0x10624dd3
   18b9c:	e000ed00 	.word	0xe000ed00
   18ba0:	00018b11 	.word	0x00018b11
   18ba4:	e000e100 	.word	0xe000e100

00018ba8 <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
    NRF_WDT->INTENSET = WDT_INTENSET_TIMEOUT_Msk;
   18ba8:	4b02      	ldr	r3, [pc, #8]	; (18bb4 <hal_watchdog_enable+0xc>)
   18baa:	2201      	movs	r2, #1
   18bac:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NRF_WDT->TASKS_START = 1;
   18bb0:	601a      	str	r2, [r3, #0]
}
   18bb2:	4770      	bx	lr
   18bb4:	40010000 	.word	0x40010000

00018bb8 <hal_watchdog_tickle>:

void
hal_watchdog_tickle(void)
{
    NRF_WDT->RR[0] = WDT_RR_RR_Reload;
   18bb8:	4b02      	ldr	r3, [pc, #8]	; (18bc4 <hal_watchdog_tickle+0xc>)
   18bba:	4a03      	ldr	r2, [pc, #12]	; (18bc8 <hal_watchdog_tickle+0x10>)
   18bbc:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
}
   18bc0:	4770      	bx	lr
   18bc2:	bf00      	nop
   18bc4:	40010000 	.word	0x40010000
   18bc8:	6e524635 	.word	0x6e524635

00018bcc <nrf52_periph_create_timers>:
#endif
#endif

static void
nrf52_periph_create_timers(void)
{
   18bcc:	b508      	push	{r3, lr}
    int rc;

    (void)rc;

#if MYNEWT_VAL(TIMER_0)
    rc = hal_timer_init(0, NULL);
   18bce:	2100      	movs	r1, #0
   18bd0:	4608      	mov	r0, r1
   18bd2:	f7ff fe41 	bl	18858 <hal_timer_init>
    assert(rc == 0);
   18bd6:	b920      	cbnz	r0, 18be2 <nrf52_periph_create_timers+0x16>
    rc = hal_timer_init(5, NULL);
    assert(rc == 0);
#endif

#if MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
   18bd8:	4808      	ldr	r0, [pc, #32]	; (18bfc <nrf52_periph_create_timers+0x30>)
   18bda:	f7f0 fc01 	bl	93e0 <os_cputime_init>
    assert(rc == 0);
   18bde:	b930      	cbnz	r0, 18bee <nrf52_periph_create_timers+0x22>
#endif
}
   18be0:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   18be2:	2300      	movs	r3, #0
   18be4:	461a      	mov	r2, r3
   18be6:	4619      	mov	r1, r3
   18be8:	4618      	mov	r0, r3
   18bea:	f7f0 f9bb 	bl	8f64 <__assert_func>
    assert(rc == 0);
   18bee:	2300      	movs	r3, #0
   18bf0:	461a      	mov	r2, r3
   18bf2:	4619      	mov	r1, r3
   18bf4:	4618      	mov	r0, r3
   18bf6:	f7f0 f9b5 	bl	8f64 <__assert_func>
   18bfa:	bf00      	nop
   18bfc:	000f4240 	.word	0x000f4240

00018c00 <nrf52_periph_create_spi>:
#endif
}

static void
nrf52_periph_create_spi(void)
{
   18c00:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BUS_DRIVER_PRESENT)
    rc = bus_spi_hal_dev_create("spi0",
                                &spi0_bus, (struct bus_spi_dev_cfg *)&spi0_cfg);
    assert(rc == 0);
#else
    rc = hal_spi_init(0, (void *)&os_bsp_spi0m_cfg, HAL_SPI_TYPE_MASTER);
   18c02:	2200      	movs	r2, #0
   18c04:	4905      	ldr	r1, [pc, #20]	; (18c1c <nrf52_periph_create_spi+0x1c>)
   18c06:	4610      	mov	r0, r2
   18c08:	f7ff fc1e 	bl	18448 <hal_spi_init>
    assert(rc == 0);
   18c0c:	b900      	cbnz	r0, 18c10 <nrf52_periph_create_spi+0x10>
#else
    rc = hal_spi_init(3, (void *)&os_bsp_spi3m_cfg, HAL_SPI_TYPE_MASTER);
    assert(rc == 0);
#endif
#endif
}
   18c0e:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   18c10:	2300      	movs	r3, #0
   18c12:	461a      	mov	r2, r3
   18c14:	4619      	mov	r1, r3
   18c16:	4618      	mov	r0, r3
   18c18:	f7f0 f9a4 	bl	8f64 <__assert_func>
   18c1c:	00024648 	.word	0x00024648

00018c20 <nrf52_periph_create>:

void
nrf52_periph_create(void)
{
   18c20:	b508      	push	{r3, lr}
    nrf52_periph_create_timers();
   18c22:	f7ff ffd3 	bl	18bcc <nrf52_periph_create_timers>
    nrf52_periph_create_pwm();
    nrf52_periph_create_trng();
    nrf52_periph_create_crypto();
    nrf52_periph_create_uart();
    nrf52_periph_create_i2c();
    nrf52_periph_create_spi();
   18c26:	f7ff ffeb 	bl	18c00 <nrf52_periph_create_spi>
}
   18c2a:	bd08      	pop	{r3, pc}

00018c2c <cir_pkg_init>:
{
#ifdef __KERNEL__
    cir_chrdev_pkg_init();
    pr_info("uwbcir: cat /dev/uwbcir\n");
#endif  /* __KERNEL__ */
}
   18c2c:	4770      	bx	lr

00018c2e <cir_pkg_down>:
{
#if __KERNEL__
    cir_chrdev_pkg_down(reason);
#endif
    return 0;
}
   18c2e:	2000      	movs	r0, #0
   18c30:	4770      	bx	lr
	...

00018c34 <json_encode_object_start>:
    (__e)->je_write((__e)->je_arg, "]", sizeof("]")-1);


int
json_encode_object_start(struct json_encoder *encoder)
{
   18c34:	b510      	push	{r4, lr}
   18c36:	4604      	mov	r4, r0
    if (encoder->je_wr_commas) {
   18c38:	7a03      	ldrb	r3, [r0, #8]
   18c3a:	f013 0f01 	tst.w	r3, #1
   18c3e:	d008      	beq.n	18c52 <json_encode_object_start+0x1e>
        encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
   18c40:	6803      	ldr	r3, [r0, #0]
   18c42:	2201      	movs	r2, #1
   18c44:	4908      	ldr	r1, [pc, #32]	; (18c68 <json_encode_object_start+0x34>)
   18c46:	6840      	ldr	r0, [r0, #4]
   18c48:	4798      	blx	r3
        encoder->je_wr_commas = 0;
   18c4a:	7a23      	ldrb	r3, [r4, #8]
   18c4c:	f36f 0300 	bfc	r3, #0, #1
   18c50:	7223      	strb	r3, [r4, #8]
    }
    JSON_ENCODE_OBJECT_START(encoder);
   18c52:	6823      	ldr	r3, [r4, #0]
   18c54:	2201      	movs	r2, #1
   18c56:	4905      	ldr	r1, [pc, #20]	; (18c6c <json_encode_object_start+0x38>)
   18c58:	6860      	ldr	r0, [r4, #4]
   18c5a:	4798      	blx	r3
    encoder->je_wr_commas = 0;
   18c5c:	7a23      	ldrb	r3, [r4, #8]
   18c5e:	f36f 0300 	bfc	r3, #0, #1
   18c62:	7223      	strb	r3, [r4, #8]

    return (0);
}
   18c64:	2000      	movs	r0, #0
   18c66:	bd10      	pop	{r4, pc}
   18c68:	0002464c 	.word	0x0002464c
   18c6c:	00024650 	.word	0x00024650

00018c70 <json_encode_object_key>:
}
EXPORT_SYMBOL(json_encode_value);

int
json_encode_object_key(struct json_encoder *encoder, char *key)
{
   18c70:	b570      	push	{r4, r5, r6, lr}
   18c72:	4604      	mov	r4, r0
   18c74:	460d      	mov	r5, r1
    if (encoder->je_wr_commas) {
   18c76:	7a03      	ldrb	r3, [r0, #8]
   18c78:	f013 0f01 	tst.w	r3, #1
   18c7c:	d008      	beq.n	18c90 <json_encode_object_key+0x20>
        encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
   18c7e:	6803      	ldr	r3, [r0, #0]
   18c80:	2201      	movs	r2, #1
   18c82:	490d      	ldr	r1, [pc, #52]	; (18cb8 <json_encode_object_key+0x48>)
   18c84:	6840      	ldr	r0, [r0, #4]
   18c86:	4798      	blx	r3
        encoder->je_wr_commas = 0;
   18c88:	7a23      	ldrb	r3, [r4, #8]
   18c8a:	f36f 0300 	bfc	r3, #0, #1
   18c8e:	7223      	strb	r3, [r4, #8]
    }

    /* Write the key entry */
    encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
   18c90:	6823      	ldr	r3, [r4, #0]
   18c92:	2201      	movs	r2, #1
   18c94:	4909      	ldr	r1, [pc, #36]	; (18cbc <json_encode_object_key+0x4c>)
   18c96:	6860      	ldr	r0, [r4, #4]
   18c98:	4798      	blx	r3
    encoder->je_write(encoder->je_arg, key, strlen(key));
   18c9a:	6826      	ldr	r6, [r4, #0]
   18c9c:	4628      	mov	r0, r5
   18c9e:	f7f4 ff53 	bl	db48 <strlen>
   18ca2:	4602      	mov	r2, r0
   18ca4:	4629      	mov	r1, r5
   18ca6:	6860      	ldr	r0, [r4, #4]
   18ca8:	47b0      	blx	r6
    encoder->je_write(encoder->je_arg, "\": ", sizeof("\": ")-1);
   18caa:	6823      	ldr	r3, [r4, #0]
   18cac:	2203      	movs	r2, #3
   18cae:	4904      	ldr	r1, [pc, #16]	; (18cc0 <json_encode_object_key+0x50>)
   18cb0:	6860      	ldr	r0, [r4, #4]
   18cb2:	4798      	blx	r3

    return (0);
}
   18cb4:	2000      	movs	r0, #0
   18cb6:	bd70      	pop	{r4, r5, r6, pc}
   18cb8:	0002464c 	.word	0x0002464c
   18cbc:	00024654 	.word	0x00024654
   18cc0:	00024658 	.word	0x00024658

00018cc4 <json_encode_object_entry>:
EXPORT_SYMBOL(json_encode_object_key);

int
json_encode_object_entry(struct json_encoder *encoder, char *key,
        struct json_value *val)
{
   18cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18cc6:	4604      	mov	r4, r0
   18cc8:	460d      	mov	r5, r1
   18cca:	4616      	mov	r6, r2
    int rc;

    if (encoder->je_wr_commas) {
   18ccc:	7a03      	ldrb	r3, [r0, #8]
   18cce:	f013 0f01 	tst.w	r3, #1
   18cd2:	d008      	beq.n	18ce6 <json_encode_object_entry+0x22>
        encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
   18cd4:	6803      	ldr	r3, [r0, #0]
   18cd6:	2201      	movs	r2, #1
   18cd8:	4911      	ldr	r1, [pc, #68]	; (18d20 <json_encode_object_entry+0x5c>)
   18cda:	6840      	ldr	r0, [r0, #4]
   18cdc:	4798      	blx	r3
        encoder->je_wr_commas = 0;
   18cde:	7a23      	ldrb	r3, [r4, #8]
   18ce0:	f36f 0300 	bfc	r3, #0, #1
   18ce4:	7223      	strb	r3, [r4, #8]
    }
    /* Write the key entry */
    encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
   18ce6:	6823      	ldr	r3, [r4, #0]
   18ce8:	2201      	movs	r2, #1
   18cea:	490e      	ldr	r1, [pc, #56]	; (18d24 <json_encode_object_entry+0x60>)
   18cec:	6860      	ldr	r0, [r4, #4]
   18cee:	4798      	blx	r3
    encoder->je_write(encoder->je_arg, key, strlen(key));
   18cf0:	6827      	ldr	r7, [r4, #0]
   18cf2:	4628      	mov	r0, r5
   18cf4:	f7f4 ff28 	bl	db48 <strlen>
   18cf8:	4602      	mov	r2, r0
   18cfa:	4629      	mov	r1, r5
   18cfc:	6860      	ldr	r0, [r4, #4]
   18cfe:	47b8      	blx	r7
    encoder->je_write(encoder->je_arg, "\": ", sizeof("\": ")-1);
   18d00:	6823      	ldr	r3, [r4, #0]
   18d02:	2203      	movs	r2, #3
   18d04:	4908      	ldr	r1, [pc, #32]	; (18d28 <json_encode_object_entry+0x64>)
   18d06:	6860      	ldr	r0, [r4, #4]
   18d08:	4798      	blx	r3

    rc = json_encode_value(encoder, val);
   18d0a:	4631      	mov	r1, r6
   18d0c:	4620      	mov	r0, r4
   18d0e:	f000 f80d 	bl	18d2c <json_encode_value>
    if (rc != 0) {
   18d12:	b918      	cbnz	r0, 18d1c <json_encode_object_entry+0x58>
        goto err;
    }
    encoder->je_wr_commas = 1;
   18d14:	7a23      	ldrb	r3, [r4, #8]
   18d16:	f043 0301 	orr.w	r3, r3, #1
   18d1a:	7223      	strb	r3, [r4, #8]

    return (0);
err:
    return (rc);
}
   18d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18d1e:	bf00      	nop
   18d20:	0002464c 	.word	0x0002464c
   18d24:	00024654 	.word	0x00024654
   18d28:	00024658 	.word	0x00024658

00018d2c <json_encode_value>:
{
   18d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18d2e:	4605      	mov	r5, r0
   18d30:	460c      	mov	r4, r1
    switch (jv->jv_type) {
   18d32:	784b      	ldrb	r3, [r1, #1]
   18d34:	2b06      	cmp	r3, #6
   18d36:	f200 8141 	bhi.w	18fbc <json_encode_value+0x290>
   18d3a:	e8df f013 	tbh	[pc, r3, lsl #1]
   18d3e:	0007      	.short	0x0007
   18d40:	002b001c 	.word	0x002b001c
   18d44:	00fa005a 	.word	0x00fa005a
   18d48:	003a0120 	.word	0x003a0120
            len = sprintf(encoder->je_encode_buf, "%s",
   18d4c:	f100 0609 	add.w	r6, r0, #9
                    jv->jv_val.u > 0 ? "true" : "false");
   18d50:	688a      	ldr	r2, [r1, #8]
   18d52:	68cb      	ldr	r3, [r1, #12]
            len = sprintf(encoder->je_encode_buf, "%s",
   18d54:	4313      	orrs	r3, r2
   18d56:	d00c      	beq.n	18d72 <json_encode_value+0x46>
   18d58:	4a9a      	ldr	r2, [pc, #616]	; (18fc4 <json_encode_value+0x298>)
   18d5a:	499b      	ldr	r1, [pc, #620]	; (18fc8 <json_encode_value+0x29c>)
   18d5c:	4630      	mov	r0, r6
   18d5e:	f003 fba2 	bl	1c4a6 <sprintf>
   18d62:	4602      	mov	r2, r0
            encoder->je_write(encoder->je_arg, encoder->je_encode_buf, len);
   18d64:	682b      	ldr	r3, [r5, #0]
   18d66:	4631      	mov	r1, r6
   18d68:	6868      	ldr	r0, [r5, #4]
   18d6a:	4798      	blx	r3
    return (0);
   18d6c:	2300      	movs	r3, #0
}
   18d6e:	4618      	mov	r0, r3
   18d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            len = sprintf(encoder->je_encode_buf, "%s",
   18d72:	4a96      	ldr	r2, [pc, #600]	; (18fcc <json_encode_value+0x2a0>)
   18d74:	e7f1      	b.n	18d5a <json_encode_value+0x2e>
            len = sprintf(encoder->je_encode_buf, "%" PRIu64,
   18d76:	f100 0609 	add.w	r6, r0, #9
   18d7a:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   18d7e:	4994      	ldr	r1, [pc, #592]	; (18fd0 <json_encode_value+0x2a4>)
   18d80:	4630      	mov	r0, r6
   18d82:	f003 fb90 	bl	1c4a6 <sprintf>
   18d86:	4602      	mov	r2, r0
            encoder->je_write(encoder->je_arg, encoder->je_encode_buf, len);
   18d88:	682b      	ldr	r3, [r5, #0]
   18d8a:	4631      	mov	r1, r6
   18d8c:	6868      	ldr	r0, [r5, #4]
   18d8e:	4798      	blx	r3
    return (0);
   18d90:	2300      	movs	r3, #0
            break;
   18d92:	e7ec      	b.n	18d6e <json_encode_value+0x42>
            len = sprintf(encoder->je_encode_buf, "%" PRIi64,
   18d94:	f100 0609 	add.w	r6, r0, #9
   18d98:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   18d9c:	498d      	ldr	r1, [pc, #564]	; (18fd4 <json_encode_value+0x2a8>)
   18d9e:	4630      	mov	r0, r6
   18da0:	f003 fb81 	bl	1c4a6 <sprintf>
   18da4:	4602      	mov	r2, r0
            encoder->je_write(encoder->je_arg, encoder->je_encode_buf, len);
   18da6:	682b      	ldr	r3, [r5, #0]
   18da8:	4631      	mov	r1, r6
   18daa:	6868      	ldr	r0, [r5, #4]
   18dac:	4798      	blx	r3
    return (0);
   18dae:	2300      	movs	r3, #0
            break;
   18db0:	e7dd      	b.n	18d6e <json_encode_value+0x42>
        if  (DPL_FLOAT64_ISNAN(jv->jv_val.fl)){
   18db2:	e9d1 6702 	ldrd	r6, r7, [r1, #8]
   18db6:	4632      	mov	r2, r6
   18db8:	463b      	mov	r3, r7
   18dba:	4630      	mov	r0, r6
   18dbc:	4639      	mov	r1, r7
   18dbe:	f008 fd91 	bl	218e4 <__aeabi_dcmpun>
   18dc2:	b970      	cbnz	r0, 18de2 <json_encode_value+0xb6>
            len = sprintf(encoder->je_encode_buf,
   18dc4:	4632      	mov	r2, r6
   18dc6:	463b      	mov	r3, r7
   18dc8:	4983      	ldr	r1, [pc, #524]	; (18fd8 <json_encode_value+0x2ac>)
   18dca:	f105 0009 	add.w	r0, r5, #9
   18dce:	f003 fb6a 	bl	1c4a6 <sprintf>
   18dd2:	4602      	mov	r2, r0
        encoder->je_write(encoder->je_arg, encoder->je_encode_buf, len);
   18dd4:	4629      	mov	r1, r5
   18dd6:	f851 3b09 	ldr.w	r3, [r1], #9
   18dda:	6868      	ldr	r0, [r5, #4]
   18ddc:	4798      	blx	r3
    return (0);
   18dde:	2300      	movs	r3, #0
        break;
   18de0:	e7c5      	b.n	18d6e <json_encode_value+0x42>
            len = sprintf(encoder->je_encode_buf, "null");
   18de2:	4b7e      	ldr	r3, [pc, #504]	; (18fdc <json_encode_value+0x2b0>)
   18de4:	6818      	ldr	r0, [r3, #0]
   18de6:	f8c5 0009 	str.w	r0, [r5, #9]
   18dea:	791b      	ldrb	r3, [r3, #4]
   18dec:	736b      	strb	r3, [r5, #13]
   18dee:	2204      	movs	r2, #4
   18df0:	e7f0      	b.n	18dd4 <json_encode_value+0xa8>
            encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
   18df2:	6803      	ldr	r3, [r0, #0]
   18df4:	2201      	movs	r2, #1
   18df6:	497a      	ldr	r1, [pc, #488]	; (18fe0 <json_encode_value+0x2b4>)
   18df8:	6840      	ldr	r0, [r0, #4]
   18dfa:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
   18dfc:	2600      	movs	r6, #0
   18dfe:	e012      	b.n	18e26 <json_encode_value+0xfa>
   18e00:	2b5c      	cmp	r3, #92	; 0x5c
   18e02:	d004      	beq.n	18e0e <json_encode_value+0xe2>
                        encoder->je_write(encoder->je_arg,
   18e04:	682b      	ldr	r3, [r5, #0]
   18e06:	2201      	movs	r2, #1
   18e08:	6868      	ldr	r0, [r5, #4]
   18e0a:	4798      	blx	r3
                        break;
   18e0c:	e00a      	b.n	18e24 <json_encode_value+0xf8>
                        encoder->je_write(encoder->je_arg, "\\",
   18e0e:	682b      	ldr	r3, [r5, #0]
   18e10:	2201      	movs	r2, #1
   18e12:	4974      	ldr	r1, [pc, #464]	; (18fe4 <json_encode_value+0x2b8>)
   18e14:	6868      	ldr	r0, [r5, #4]
   18e16:	4798      	blx	r3
                        encoder->je_write(encoder->je_arg,
   18e18:	682b      	ldr	r3, [r5, #0]
                                (char *) &jv->jv_val.str[i], 1);
   18e1a:	68a1      	ldr	r1, [r4, #8]
                        encoder->je_write(encoder->je_arg,
   18e1c:	2201      	movs	r2, #1
   18e1e:	4439      	add	r1, r7
   18e20:	6868      	ldr	r0, [r5, #4]
   18e22:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
   18e24:	3601      	adds	r6, #1
   18e26:	8863      	ldrh	r3, [r4, #2]
   18e28:	42b3      	cmp	r3, r6
   18e2a:	dd7b      	ble.n	18f24 <json_encode_value+0x1f8>
                switch (jv->jv_val.str[i]) {
   18e2c:	68a3      	ldr	r3, [r4, #8]
   18e2e:	4637      	mov	r7, r6
   18e30:	1999      	adds	r1, r3, r6
   18e32:	5d9b      	ldrb	r3, [r3, r6]
   18e34:	2b2f      	cmp	r3, #47	; 0x2f
   18e36:	d8e3      	bhi.n	18e00 <json_encode_value+0xd4>
   18e38:	2b08      	cmp	r3, #8
   18e3a:	d3e3      	bcc.n	18e04 <json_encode_value+0xd8>
   18e3c:	3b08      	subs	r3, #8
   18e3e:	2b27      	cmp	r3, #39	; 0x27
   18e40:	d8e0      	bhi.n	18e04 <json_encode_value+0xd8>
   18e42:	a201      	add	r2, pc, #4	; (adr r2, 18e48 <json_encode_value+0x11c>)
   18e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   18e48:	00018f19 	.word	0x00018f19
   18e4c:	00018ee9 	.word	0x00018ee9
   18e50:	00018f01 	.word	0x00018f01
   18e54:	00018e05 	.word	0x00018e05
   18e58:	00018f0d 	.word	0x00018f0d
   18e5c:	00018ef5 	.word	0x00018ef5
   18e60:	00018e05 	.word	0x00018e05
   18e64:	00018e05 	.word	0x00018e05
   18e68:	00018e05 	.word	0x00018e05
   18e6c:	00018e05 	.word	0x00018e05
   18e70:	00018e05 	.word	0x00018e05
   18e74:	00018e05 	.word	0x00018e05
   18e78:	00018e05 	.word	0x00018e05
   18e7c:	00018e05 	.word	0x00018e05
   18e80:	00018e05 	.word	0x00018e05
   18e84:	00018e05 	.word	0x00018e05
   18e88:	00018e05 	.word	0x00018e05
   18e8c:	00018e05 	.word	0x00018e05
   18e90:	00018e05 	.word	0x00018e05
   18e94:	00018e05 	.word	0x00018e05
   18e98:	00018e05 	.word	0x00018e05
   18e9c:	00018e05 	.word	0x00018e05
   18ea0:	00018e05 	.word	0x00018e05
   18ea4:	00018e05 	.word	0x00018e05
   18ea8:	00018e05 	.word	0x00018e05
   18eac:	00018e05 	.word	0x00018e05
   18eb0:	00018e0f 	.word	0x00018e0f
   18eb4:	00018e05 	.word	0x00018e05
   18eb8:	00018e05 	.word	0x00018e05
   18ebc:	00018e05 	.word	0x00018e05
   18ec0:	00018e05 	.word	0x00018e05
   18ec4:	00018e05 	.word	0x00018e05
   18ec8:	00018e05 	.word	0x00018e05
   18ecc:	00018e05 	.word	0x00018e05
   18ed0:	00018e05 	.word	0x00018e05
   18ed4:	00018e05 	.word	0x00018e05
   18ed8:	00018e05 	.word	0x00018e05
   18edc:	00018e05 	.word	0x00018e05
   18ee0:	00018e05 	.word	0x00018e05
   18ee4:	00018e0f 	.word	0x00018e0f
                        encoder->je_write(encoder->je_arg, "\\t",
   18ee8:	682b      	ldr	r3, [r5, #0]
   18eea:	2202      	movs	r2, #2
   18eec:	493e      	ldr	r1, [pc, #248]	; (18fe8 <json_encode_value+0x2bc>)
   18eee:	6868      	ldr	r0, [r5, #4]
   18ef0:	4798      	blx	r3
                        break;
   18ef2:	e797      	b.n	18e24 <json_encode_value+0xf8>
                        encoder->je_write(encoder->je_arg, "\\r",
   18ef4:	682b      	ldr	r3, [r5, #0]
   18ef6:	2202      	movs	r2, #2
   18ef8:	493c      	ldr	r1, [pc, #240]	; (18fec <json_encode_value+0x2c0>)
   18efa:	6868      	ldr	r0, [r5, #4]
   18efc:	4798      	blx	r3
                        break;
   18efe:	e791      	b.n	18e24 <json_encode_value+0xf8>
                        encoder->je_write(encoder->je_arg, "\\n",
   18f00:	682b      	ldr	r3, [r5, #0]
   18f02:	2202      	movs	r2, #2
   18f04:	493a      	ldr	r1, [pc, #232]	; (18ff0 <json_encode_value+0x2c4>)
   18f06:	6868      	ldr	r0, [r5, #4]
   18f08:	4798      	blx	r3
                        break;
   18f0a:	e78b      	b.n	18e24 <json_encode_value+0xf8>
                        encoder->je_write(encoder->je_arg, "\\f",
   18f0c:	682b      	ldr	r3, [r5, #0]
   18f0e:	2202      	movs	r2, #2
   18f10:	4938      	ldr	r1, [pc, #224]	; (18ff4 <json_encode_value+0x2c8>)
   18f12:	6868      	ldr	r0, [r5, #4]
   18f14:	4798      	blx	r3
                        break;
   18f16:	e785      	b.n	18e24 <json_encode_value+0xf8>
                        encoder->je_write(encoder->je_arg, "\\b",
   18f18:	682b      	ldr	r3, [r5, #0]
   18f1a:	2202      	movs	r2, #2
   18f1c:	4936      	ldr	r1, [pc, #216]	; (18ff8 <json_encode_value+0x2cc>)
   18f1e:	6868      	ldr	r0, [r5, #4]
   18f20:	4798      	blx	r3
                        break;
   18f22:	e77f      	b.n	18e24 <json_encode_value+0xf8>
            encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
   18f24:	682b      	ldr	r3, [r5, #0]
   18f26:	2201      	movs	r2, #1
   18f28:	492d      	ldr	r1, [pc, #180]	; (18fe0 <json_encode_value+0x2b4>)
   18f2a:	6868      	ldr	r0, [r5, #4]
   18f2c:	4798      	blx	r3
    return (0);
   18f2e:	2300      	movs	r3, #0
            break;
   18f30:	e71d      	b.n	18d6e <json_encode_value+0x42>
            JSON_ENCODE_ARRAY_START(encoder);
   18f32:	6803      	ldr	r3, [r0, #0]
   18f34:	2201      	movs	r2, #1
   18f36:	4931      	ldr	r1, [pc, #196]	; (18ffc <json_encode_value+0x2d0>)
   18f38:	6840      	ldr	r0, [r0, #4]
   18f3a:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
   18f3c:	2600      	movs	r6, #0
   18f3e:	e000      	b.n	18f42 <json_encode_value+0x216>
   18f40:	3601      	adds	r6, #1
   18f42:	8863      	ldrh	r3, [r4, #2]
   18f44:	42b3      	cmp	r3, r6
   18f46:	dd13      	ble.n	18f70 <json_encode_value+0x244>
                rc = json_encode_value(encoder, jv->jv_val.composite.values[i]);
   18f48:	68e3      	ldr	r3, [r4, #12]
   18f4a:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
   18f4e:	4628      	mov	r0, r5
   18f50:	f7ff feec 	bl	18d2c <json_encode_value>
                if (rc != 0) {
   18f54:	4603      	mov	r3, r0
   18f56:	2800      	cmp	r0, #0
   18f58:	f47f af09 	bne.w	18d6e <json_encode_value+0x42>
                if (i != jv->jv_len - 1) {
   18f5c:	8863      	ldrh	r3, [r4, #2]
   18f5e:	3b01      	subs	r3, #1
   18f60:	42b3      	cmp	r3, r6
   18f62:	d0ed      	beq.n	18f40 <json_encode_value+0x214>
                    encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
   18f64:	682b      	ldr	r3, [r5, #0]
   18f66:	2201      	movs	r2, #1
   18f68:	4925      	ldr	r1, [pc, #148]	; (19000 <json_encode_value+0x2d4>)
   18f6a:	6868      	ldr	r0, [r5, #4]
   18f6c:	4798      	blx	r3
   18f6e:	e7e7      	b.n	18f40 <json_encode_value+0x214>
            JSON_ENCODE_ARRAY_END(encoder);
   18f70:	682b      	ldr	r3, [r5, #0]
   18f72:	2201      	movs	r2, #1
   18f74:	4923      	ldr	r1, [pc, #140]	; (19004 <json_encode_value+0x2d8>)
   18f76:	6868      	ldr	r0, [r5, #4]
   18f78:	4798      	blx	r3
    return (0);
   18f7a:	2300      	movs	r3, #0
            break;
   18f7c:	e6f7      	b.n	18d6e <json_encode_value+0x42>
            JSON_ENCODE_OBJECT_START(encoder);
   18f7e:	6803      	ldr	r3, [r0, #0]
   18f80:	2201      	movs	r2, #1
   18f82:	4921      	ldr	r1, [pc, #132]	; (19008 <json_encode_value+0x2dc>)
   18f84:	6840      	ldr	r0, [r0, #4]
   18f86:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
   18f88:	2600      	movs	r6, #0
   18f8a:	e000      	b.n	18f8e <json_encode_value+0x262>
   18f8c:	3601      	adds	r6, #1
   18f8e:	8863      	ldrh	r3, [r4, #2]
   18f90:	42b3      	cmp	r3, r6
   18f92:	dd0c      	ble.n	18fae <json_encode_value+0x282>
                        jv->jv_val.composite.keys[i],
   18f94:	68a3      	ldr	r3, [r4, #8]
                        jv->jv_val.composite.values[i]);
   18f96:	68e2      	ldr	r2, [r4, #12]
                rc = json_encode_object_entry(encoder,
   18f98:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
   18f9c:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
   18fa0:	4628      	mov	r0, r5
   18fa2:	f7ff fe8f 	bl	18cc4 <json_encode_object_entry>
                if (rc != 0) {
   18fa6:	4603      	mov	r3, r0
   18fa8:	2800      	cmp	r0, #0
   18faa:	d0ef      	beq.n	18f8c <json_encode_value+0x260>
   18fac:	e6df      	b.n	18d6e <json_encode_value+0x42>
            JSON_ENCODE_OBJECT_END(encoder);
   18fae:	682b      	ldr	r3, [r5, #0]
   18fb0:	2201      	movs	r2, #1
   18fb2:	4916      	ldr	r1, [pc, #88]	; (1900c <json_encode_value+0x2e0>)
   18fb4:	6868      	ldr	r0, [r5, #4]
   18fb6:	4798      	blx	r3
    return (0);
   18fb8:	2300      	movs	r3, #0
            break;
   18fba:	e6d8      	b.n	18d6e <json_encode_value+0x42>
    switch (jv->jv_type) {
   18fbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18fc0:	e6d5      	b.n	18d6e <json_encode_value+0x42>
   18fc2:	bf00      	nop
   18fc4:	00024664 	.word	0x00024664
   18fc8:	000233dc 	.word	0x000233dc
   18fcc:	0002465c 	.word	0x0002465c
   18fd0:	0002466c 	.word	0x0002466c
   18fd4:	00024674 	.word	0x00024674
   18fd8:	00024684 	.word	0x00024684
   18fdc:	0002467c 	.word	0x0002467c
   18fe0:	00024654 	.word	0x00024654
   18fe4:	00024688 	.word	0x00024688
   18fe8:	0002468c 	.word	0x0002468c
   18fec:	00024690 	.word	0x00024690
   18ff0:	00024694 	.word	0x00024694
   18ff4:	00024698 	.word	0x00024698
   18ff8:	0002469c 	.word	0x0002469c
   18ffc:	000246a0 	.word	0x000246a0
   19000:	0002464c 	.word	0x0002464c
   19004:	000239d4 	.word	0x000239d4
   19008:	00024650 	.word	0x00024650
   1900c:	000246a4 	.word	0x000246a4

00019010 <json_encode_object_finish>:
EXPORT_SYMBOL(json_encode_object_entry);

int
json_encode_object_finish(struct json_encoder *encoder)
{
   19010:	b510      	push	{r4, lr}
   19012:	4604      	mov	r4, r0
    JSON_ENCODE_OBJECT_END(encoder);
   19014:	6803      	ldr	r3, [r0, #0]
   19016:	2201      	movs	r2, #1
   19018:	4904      	ldr	r1, [pc, #16]	; (1902c <json_encode_object_finish+0x1c>)
   1901a:	6840      	ldr	r0, [r0, #4]
   1901c:	4798      	blx	r3
    /* Useful in case of nested objects. */
    encoder->je_wr_commas = 1;
   1901e:	7a23      	ldrb	r3, [r4, #8]
   19020:	f043 0301 	orr.w	r3, r3, #1
   19024:	7223      	strb	r3, [r4, #8]

    return (0);
}
   19026:	2000      	movs	r0, #0
   19028:	bd10      	pop	{r4, pc}
   1902a:	bf00      	nop
   1902c:	000246a4 	.word	0x000246a4

00019030 <json_encode_array_name>:
EXPORT_SYMBOL(json_encode_object_finish);

int
json_encode_array_name(struct json_encoder *encoder, char *name)
{
   19030:	b508      	push	{r3, lr}
    return json_encode_object_key(encoder, name);
   19032:	f7ff fe1d 	bl	18c70 <json_encode_object_key>
}
   19036:	bd08      	pop	{r3, pc}

00019038 <json_encode_array_start>:
EXPORT_SYMBOL(json_encode_array_name);

int
json_encode_array_start(struct json_encoder *encoder)
{
   19038:	b510      	push	{r4, lr}
   1903a:	4604      	mov	r4, r0
    JSON_ENCODE_ARRAY_START(encoder);
   1903c:	6803      	ldr	r3, [r0, #0]
   1903e:	2201      	movs	r2, #1
   19040:	4904      	ldr	r1, [pc, #16]	; (19054 <json_encode_array_start+0x1c>)
   19042:	6840      	ldr	r0, [r0, #4]
   19044:	4798      	blx	r3
    encoder->je_wr_commas = 0;
   19046:	7a23      	ldrb	r3, [r4, #8]
   19048:	f36f 0300 	bfc	r3, #0, #1
   1904c:	7223      	strb	r3, [r4, #8]

    return (0);
}
   1904e:	2000      	movs	r0, #0
   19050:	bd10      	pop	{r4, pc}
   19052:	bf00      	nop
   19054:	000246a0 	.word	0x000246a0

00019058 <json_encode_array_value>:
EXPORT_SYMBOL(json_encode_array_start);

int
json_encode_array_value(struct json_encoder *encoder, struct json_value *jv)
{
   19058:	b538      	push	{r3, r4, r5, lr}
   1905a:	4604      	mov	r4, r0
   1905c:	460d      	mov	r5, r1
    int rc;

    if (encoder->je_wr_commas) {
   1905e:	7a03      	ldrb	r3, [r0, #8]
   19060:	f013 0f01 	tst.w	r3, #1
   19064:	d008      	beq.n	19078 <json_encode_array_value+0x20>
        encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
   19066:	6803      	ldr	r3, [r0, #0]
   19068:	2201      	movs	r2, #1
   1906a:	4908      	ldr	r1, [pc, #32]	; (1908c <json_encode_array_value+0x34>)
   1906c:	6840      	ldr	r0, [r0, #4]
   1906e:	4798      	blx	r3
        encoder->je_wr_commas = 0;
   19070:	7a23      	ldrb	r3, [r4, #8]
   19072:	f36f 0300 	bfc	r3, #0, #1
   19076:	7223      	strb	r3, [r4, #8]
    }

    rc = json_encode_value(encoder, jv);
   19078:	4629      	mov	r1, r5
   1907a:	4620      	mov	r0, r4
   1907c:	f7ff fe56 	bl	18d2c <json_encode_value>
    if (rc != 0) {
   19080:	b918      	cbnz	r0, 1908a <json_encode_array_value+0x32>
        goto err;
    }
    encoder->je_wr_commas = 1;
   19082:	7a23      	ldrb	r3, [r4, #8]
   19084:	f043 0301 	orr.w	r3, r3, #1
   19088:	7223      	strb	r3, [r4, #8]

    return (0);
err:
    return (rc);
}
   1908a:	bd38      	pop	{r3, r4, r5, pc}
   1908c:	0002464c 	.word	0x0002464c

00019090 <json_encode_array_finish>:
EXPORT_SYMBOL(json_encode_array_value);

int
json_encode_array_finish(struct json_encoder *encoder)
{
   19090:	b508      	push	{r3, lr}
    encoder->je_wr_commas = 1;
   19092:	7a03      	ldrb	r3, [r0, #8]
   19094:	f043 0301 	orr.w	r3, r3, #1
   19098:	7203      	strb	r3, [r0, #8]
    JSON_ENCODE_ARRAY_END(encoder);
   1909a:	6803      	ldr	r3, [r0, #0]
   1909c:	2201      	movs	r2, #1
   1909e:	4902      	ldr	r1, [pc, #8]	; (190a8 <json_encode_array_finish+0x18>)
   190a0:	6840      	ldr	r0, [r0, #4]
   190a2:	4798      	blx	r3

    return (0);
}
   190a4:	2000      	movs	r0, #0
   190a6:	bd08      	pop	{r3, pc}
   190a8:	000239d4 	.word	0x000239d4

000190ac <json_read_next>:
    return len;
}

char
json_read_next(struct json_buffer * jb)
{
   190ac:	4603      	mov	r3, r0
    json_decoder_t * decoder = (json_decoder_t *) jb;
    char c;

    if ((decoder->start_buf + decoder->current_position) <= decoder->end_buf) {
   190ae:	68c1      	ldr	r1, [r0, #12]
   190b0:	6942      	ldr	r2, [r0, #20]
   190b2:	eb01 0c02 	add.w	ip, r1, r2
   190b6:	6900      	ldr	r0, [r0, #16]
   190b8:	4584      	cmp	ip, r0
   190ba:	d901      	bls.n	190c0 <json_read_next+0x14>
        c = *(decoder->start_buf + decoder->current_position);
        decoder->current_position++;
        return c;
    }
   return '\0';
   190bc:	2000      	movs	r0, #0
}
   190be:	4770      	bx	lr
        c = *(decoder->start_buf + decoder->current_position);
   190c0:	5c88      	ldrb	r0, [r1, r2]
        decoder->current_position++;
   190c2:	3201      	adds	r2, #1
   190c4:	615a      	str	r2, [r3, #20]
        return c;
   190c6:	4770      	bx	lr

000190c8 <json_read_prev>:
json_read_prev(struct json_buffer * jb)
{
    json_decoder_t * decoder = (json_decoder_t *) jb;

    char c;
    if (decoder->current_position) {
   190c8:	6943      	ldr	r3, [r0, #20]
   190ca:	b90b      	cbnz	r3, 190d0 <json_read_prev+0x8>
       decoder->current_position--;
       c = *(decoder->start_buf + decoder->current_position);
       return c;
    }
    /* can't rewind */
    return '\0';
   190cc:	2000      	movs	r0, #0
}
   190ce:	4770      	bx	lr
       decoder->current_position--;
   190d0:	3b01      	subs	r3, #1
   190d2:	6143      	str	r3, [r0, #20]
       c = *(decoder->start_buf + decoder->current_position);
   190d4:	68c2      	ldr	r2, [r0, #12]
   190d6:	5cd0      	ldrb	r0, [r2, r3]
       return c;
   190d8:	4770      	bx	lr

000190da <json_readn>:
EXPORT_SYMBOL(json_read_prev);

int
json_readn(struct json_buffer * jb, char *buf, int size)
{
   190da:	b538      	push	{r3, r4, r5, lr}
   190dc:	4604      	mov	r4, r0
   190de:	4608      	mov	r0, r1
    json_decoder_t * decoder = (json_decoder_t *) jb;
    int remlen;

    remlen = (int)(decoder->end_buf - (decoder->start_buf + decoder->current_position));
   190e0:	6925      	ldr	r5, [r4, #16]
   190e2:	68e3      	ldr	r3, [r4, #12]
   190e4:	6961      	ldr	r1, [r4, #20]
   190e6:	4419      	add	r1, r3
   190e8:	1a6d      	subs	r5, r5, r1
    if (size > remlen) {
   190ea:	4295      	cmp	r5, r2
   190ec:	db00      	blt.n	190f0 <json_readn+0x16>
   190ee:	4615      	mov	r5, r2
        size = remlen;
    }

    memcpy(buf, decoder->start_buf + decoder->current_position, size);
   190f0:	462a      	mov	r2, r5
   190f2:	f7f4 fce5 	bl	dac0 <memcpy>
    decoder->current_position += size;
   190f6:	6963      	ldr	r3, [r4, #20]
   190f8:	442b      	add	r3, r5
   190fa:	6163      	str	r3, [r4, #20]
    return size;
}
   190fc:	4628      	mov	r0, r5
   190fe:	bd38      	pop	{r3, r4, r5, pc}

00019100 <uwb_rng_tof_to_meters>:
 *
 * @return range in meters
 */
dpl_float64_t
uwb_rng_tof_to_meters(dpl_float64_t ToF)
{
   19100:	b538      	push	{r3, r4, r5, lr}
   19102:	ec55 4b10 	vmov	r4, r5, d0
    if (DPL_FLOAT64_ISNAN(ToF)) {
   19106:	ee10 2a10 	vmov	r2, s0
   1910a:	462b      	mov	r3, r5
   1910c:	ee10 0a10 	vmov	r0, s0
   19110:	4629      	mov	r1, r5
   19112:	f008 fbe7 	bl	218e4 <__aeabi_dcmpun>
   19116:	b948      	cbnz	r0, 1912c <uwb_rng_tof_to_meters+0x2c>
        return DPL_FLOAT64_NAN();
    }
    /* ToF * (299792458.0l/1.000293l) * (1.0/499.2e6/128.0) */
    dpl_float64_t tmp = DPL_FLOAT64_INIT((299792458.0l/1.000293l) * (1.0/499.2e6/128.0));
    return DPL_FLOAT64_MUL(ToF, tmp);
   19118:	a309      	add	r3, pc, #36	; (adr r3, 19140 <uwb_rng_tof_to_meters+0x40>)
   1911a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1911e:	4620      	mov	r0, r4
   19120:	4629      	mov	r1, r5
   19122:	f008 f945 	bl	213b0 <__aeabi_dmul>
   19126:	ec41 0b10 	vmov	d0, r0, r1
}
   1912a:	bd38      	pop	{r3, r4, r5, pc}
        return DPL_FLOAT64_NAN();
   1912c:	ed9f 0b02 	vldr	d0, [pc, #8]	; 19138 <uwb_rng_tof_to_meters+0x38>
   19130:	e7fb      	b.n	1912a <uwb_rng_tof_to_meters+0x2a>
   19132:	bf00      	nop
   19134:	f3af 8000 	nop.w
   19138:	00000000 	.word	0x00000000
   1913c:	7ff80000 	.word	0x7ff80000
   19140:	e57d514d 	.word	0xe57d514d
   19144:	3f73363a 	.word	0x3f73363a

00019148 <calc_tof_ss>:

dpl_float64_t
calc_tof_ss(uint32_t response_timestamp, uint32_t request_timestamp,
            uint64_t transmission_timestamp,
            uint64_t reception_timestamp,  dpl_float64_t skew)
{
   19148:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   1914c:	ec59 8b10 	vmov	r8, r9, d0
    dpl_float64_t ToF = DPL_FLOAT64_I32_TO_F64(0), tmpf;
    uint64_t T1R, T1r;

    T1R = (response_timestamp - request_timestamp);
   19150:	1a46      	subs	r6, r0, r1
    T1r = (transmission_timestamp - reception_timestamp) & MASK32;
    tmpf = DPL_FLOAT64_MUL(DPL_FLOAT64_U64_TO_F64(T1r),
   19152:	9806      	ldr	r0, [sp, #24]
   19154:	1a10      	subs	r0, r2, r0
   19156:	2100      	movs	r1, #0
   19158:	f008 f8f4 	bl	21344 <__aeabi_ul2d>
   1915c:	4604      	mov	r4, r0
   1915e:	460d      	mov	r5, r1
   19160:	4642      	mov	r2, r8
   19162:	464b      	mov	r3, r9
   19164:	2000      	movs	r0, #0
   19166:	490d      	ldr	r1, [pc, #52]	; (1919c <calc_tof_ss+0x54>)
   19168:	f007 ff6a 	bl	21040 <__aeabi_dsub>
   1916c:	4602      	mov	r2, r0
   1916e:	460b      	mov	r3, r1
   19170:	4620      	mov	r0, r4
   19172:	4629      	mov	r1, r5
   19174:	f008 f91c 	bl	213b0 <__aeabi_dmul>
   19178:	4604      	mov	r4, r0
   1917a:	460d      	mov	r5, r1
                                DPL_FLOAT64_SUB(DPL_FLOAT64_INIT(1.0), skew));
    ToF = DPL_FLOAT64_SUB(DPL_FLOAT64_U64_TO_F64(T1R), tmpf);
   1917c:	4630      	mov	r0, r6
   1917e:	f008 f89d 	bl	212bc <__aeabi_ui2d>
   19182:	4622      	mov	r2, r4
   19184:	462b      	mov	r3, r5
   19186:	f007 ff5b 	bl	21040 <__aeabi_dsub>
    ToF = DPL_FLOAT64_DIV(ToF, DPL_FLOAT64_INIT(2.0));
   1918a:	2200      	movs	r2, #0
   1918c:	4b04      	ldr	r3, [pc, #16]	; (191a0 <calc_tof_ss+0x58>)
   1918e:	f008 f90f 	bl	213b0 <__aeabi_dmul>

    return ToF;
}
   19192:	ec41 0b10 	vmov	d0, r0, r1
   19196:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   1919a:	bf00      	nop
   1919c:	3ff00000 	.word	0x3ff00000
   191a0:	3fe00000 	.word	0x3fe00000
   191a4:	00000000 	.word	0x00000000

000191a8 <calc_tof_ds>:
dpl_float64_t
calc_tof_ds(uint32_t first_response_timestamp, uint32_t first_request_timestamp,
            uint64_t first_transmission_timestamp, uint64_t first_reception_timestamp,
            uint32_t response_timestamp, uint32_t request_timestamp,
            uint64_t transmission_timestamp, uint64_t reception_timestamp)
{
   191a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   191aa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    dpl_float64_t ToF = DPL_FLOAT64_I32_TO_F64(0);
    uint64_t T1R, T1r, T2R, T2r;
    int64_t nom, denom;

    T1R = (first_response_timestamp - first_request_timestamp);
   191ac:	1a43      	subs	r3, r0, r1
   191ae:	f04f 0c00 	mov.w	ip, #0
    T1r = (first_transmission_timestamp  - first_reception_timestamp) & MASK32;
   191b2:	9906      	ldr	r1, [sp, #24]
   191b4:	1a52      	subs	r2, r2, r1
    T2R = (response_timestamp - request_timestamp);
   191b6:	9d08      	ldr	r5, [sp, #32]
   191b8:	9909      	ldr	r1, [sp, #36]	; 0x24
   191ba:	1a6d      	subs	r5, r5, r1
    T2r = (transmission_timestamp - reception_timestamp) & MASK32;
   191bc:	990a      	ldr	r1, [sp, #40]	; 0x28
   191be:	1b0c      	subs	r4, r1, r4
    nom = T1R * T2R  - T1r * T2r;
   191c0:	fba3 e105 	umull	lr, r1, r3, r5
   191c4:	fba2 0604 	umull	r0, r6, r2, r4
   191c8:	ebbe 0000 	subs.w	r0, lr, r0
   191cc:	eb61 0106 	sbc.w	r1, r1, r6
    denom = T1R + T2R  + T1r + T2r;
   191d0:	195b      	adds	r3, r3, r5
   191d2:	eb4c 0c0c 	adc.w	ip, ip, ip
   191d6:	189b      	adds	r3, r3, r2
   191d8:	f14c 0500 	adc.w	r5, ip, #0
   191dc:	191c      	adds	r4, r3, r4
   191de:	f145 0500 	adc.w	r5, r5, #0

    if (denom == 0) {
   191e2:	ea54 0305 	orrs.w	r3, r4, r5
   191e6:	d010      	beq.n	1920a <calc_tof_ds+0x62>
        return DPL_FLOAT64_NAN();
    }

    ToF = DPL_FLOAT64_DIV(DPL_FLOAT64_I64_TO_F64(nom),
   191e8:	f008 f8b4 	bl	21354 <__aeabi_l2d>
   191ec:	4606      	mov	r6, r0
   191ee:	460f      	mov	r7, r1
   191f0:	4620      	mov	r0, r4
   191f2:	4629      	mov	r1, r5
   191f4:	f008 f8ae 	bl	21354 <__aeabi_l2d>
   191f8:	4602      	mov	r2, r0
   191fa:	460b      	mov	r3, r1
   191fc:	4630      	mov	r0, r6
   191fe:	4639      	mov	r1, r7
   19200:	f008 fa00 	bl	21604 <__aeabi_ddiv>
   19204:	ec41 0b10 	vmov	d0, r0, r1
                                                DPL_FLOAT64_I64_TO_F64(denom));
    return ToF;
}
   19208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return DPL_FLOAT64_NAN();
   1920a:	ed9f 0b01 	vldr	d0, [pc, #4]	; 19210 <calc_tof_ds+0x68>
   1920e:	e7fb      	b.n	19208 <calc_tof_ds+0x60>
   19210:	00000000 	.word	0x00000000
   19214:	7ff80000 	.word	0x7ff80000

00019218 <timescale_QUpdate>:
   19218:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1921c:	4614      	mov	r4, r2
   1921e:	461d      	mov	r5, r3
   19220:	460f      	mov	r7, r1
   19222:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   19224:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   19228:	4682      	mov	sl, r0
   1922a:	4629      	mov	r1, r5
   1922c:	4620      	mov	r0, r4
   1922e:	f008 f8bf 	bl	213b0 <__aeabi_dmul>
   19232:	4622      	mov	r2, r4
   19234:	462b      	mov	r3, r5
   19236:	f008 f8bb 	bl	213b0 <__aeabi_dmul>
   1923a:	2200      	movs	r2, #0
   1923c:	4b4f      	ldr	r3, [pc, #316]	; (1937c <timescale_QUpdate+0x164>)
   1923e:	f008 f9e1 	bl	21604 <__aeabi_ddiv>
   19242:	e9d7 2300 	ldrd	r2, r3, [r7]
   19246:	f007 fefd 	bl	21044 <__adddf3>
   1924a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   1924e:	4680      	mov	r8, r0
   19250:	4689      	mov	r9, r1
   19252:	4620      	mov	r0, r4
   19254:	4629      	mov	r1, r5
   19256:	f008 f8ab 	bl	213b0 <__aeabi_dmul>
   1925a:	4622      	mov	r2, r4
   1925c:	462b      	mov	r3, r5
   1925e:	f008 f8a7 	bl	213b0 <__aeabi_dmul>
   19262:	4622      	mov	r2, r4
   19264:	462b      	mov	r3, r5
   19266:	f008 f8a3 	bl	213b0 <__aeabi_dmul>
   1926a:	4622      	mov	r2, r4
   1926c:	462b      	mov	r3, r5
   1926e:	f008 f89f 	bl	213b0 <__aeabi_dmul>
   19272:	2200      	movs	r2, #0
   19274:	4b42      	ldr	r3, [pc, #264]	; (19380 <timescale_QUpdate+0x168>)
   19276:	f008 f9c5 	bl	21604 <__aeabi_ddiv>
   1927a:	4602      	mov	r2, r0
   1927c:	460b      	mov	r3, r1
   1927e:	4640      	mov	r0, r8
   19280:	4649      	mov	r1, r9
   19282:	f007 fedf 	bl	21044 <__adddf3>
   19286:	e9c6 0100 	strd	r0, r1, [r6]
   1928a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   1928e:	4620      	mov	r0, r4
   19290:	4629      	mov	r1, r5
   19292:	f008 f88d 	bl	213b0 <__aeabi_dmul>
   19296:	4622      	mov	r2, r4
   19298:	462b      	mov	r3, r5
   1929a:	f008 f889 	bl	213b0 <__aeabi_dmul>
   1929e:	4622      	mov	r2, r4
   192a0:	462b      	mov	r3, r5
   192a2:	f008 f885 	bl	213b0 <__aeabi_dmul>
   192a6:	2200      	movs	r2, #0
   192a8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   192ac:	f008 f880 	bl	213b0 <__aeabi_dmul>
   192b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   192b4:	4680      	mov	r8, r0
   192b6:	4689      	mov	r9, r1
   192b8:	4620      	mov	r0, r4
   192ba:	4629      	mov	r1, r5
   192bc:	f008 f878 	bl	213b0 <__aeabi_dmul>
   192c0:	2200      	movs	r2, #0
   192c2:	4b30      	ldr	r3, [pc, #192]	; (19384 <timescale_QUpdate+0x16c>)
   192c4:	f008 f874 	bl	213b0 <__aeabi_dmul>
   192c8:	4602      	mov	r2, r0
   192ca:	460b      	mov	r3, r1
   192cc:	4640      	mov	r0, r8
   192ce:	4649      	mov	r1, r9
   192d0:	f007 feb8 	bl	21044 <__adddf3>
   192d4:	4680      	mov	r8, r0
   192d6:	4689      	mov	r9, r1
   192d8:	e9c6 8902 	strd	r8, r9, [r6, #8]
   192dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   192e0:	4620      	mov	r0, r4
   192e2:	4629      	mov	r1, r5
   192e4:	f008 f864 	bl	213b0 <__aeabi_dmul>
   192e8:	4622      	mov	r2, r4
   192ea:	462b      	mov	r3, r5
   192ec:	f008 f860 	bl	213b0 <__aeabi_dmul>
   192f0:	2200      	movs	r2, #0
   192f2:	4b25      	ldr	r3, [pc, #148]	; (19388 <timescale_QUpdate+0x170>)
   192f4:	f008 f986 	bl	21604 <__aeabi_ddiv>
   192f8:	f8ba 3000 	ldrh.w	r3, [sl]
   192fc:	9301      	str	r3, [sp, #4]
   192fe:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
   19302:	eb06 0a0b 	add.w	sl, r6, fp
   19306:	e9c6 0104 	strd	r0, r1, [r6, #16]
   1930a:	e9ca 8900 	strd	r8, r9, [sl]
   1930e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   19312:	4620      	mov	r0, r4
   19314:	4629      	mov	r1, r5
   19316:	f008 f84b 	bl	213b0 <__aeabi_dmul>
   1931a:	4622      	mov	r2, r4
   1931c:	462b      	mov	r3, r5
   1931e:	f008 f847 	bl	213b0 <__aeabi_dmul>
   19322:	2200      	movs	r2, #0
   19324:	4b15      	ldr	r3, [pc, #84]	; (1937c <timescale_QUpdate+0x164>)
   19326:	f008 f96d 	bl	21604 <__aeabi_ddiv>
   1932a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1932e:	f007 fe89 	bl	21044 <__adddf3>
   19332:	e9ca 0102 	strd	r0, r1, [sl, #8]
   19336:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   1933a:	4620      	mov	r0, r4
   1933c:	4629      	mov	r1, r5
   1933e:	f008 f837 	bl	213b0 <__aeabi_dmul>
   19342:	2200      	movs	r2, #0
   19344:	4b0f      	ldr	r3, [pc, #60]	; (19384 <timescale_QUpdate+0x16c>)
   19346:	f008 f833 	bl	213b0 <__aeabi_dmul>
   1934a:	f10b 0810 	add.w	r8, fp, #16
   1934e:	44b0      	add	r8, r6
   19350:	e9c8 0100 	strd	r0, r1, [r8]
   19354:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
   19358:	44da      	add	sl, fp
   1935a:	e9ca 2300 	strd	r2, r3, [sl]
   1935e:	9901      	ldr	r1, [sp, #4]
   19360:	e9d8 2300 	ldrd	r2, r3, [r8]
   19364:	eb06 1601 	add.w	r6, r6, r1, lsl #4
   19368:	e9c6 2302 	strd	r2, r3, [r6, #8]
   1936c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   19370:	e9c6 2304 	strd	r2, r3, [r6, #16]
   19374:	b003      	add	sp, #12
   19376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1937a:	bf00      	nop
   1937c:	40080000 	.word	0x40080000
   19380:	40340000 	.word	0x40340000
   19384:	3fe00000 	.word	0x3fe00000
   19388:	40180000 	.word	0x40180000

0001938c <timescale_JofAx>:
   1938c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19390:	ec55 4b10 	vmov	r4, r5, d0
   19394:	4f1c      	ldr	r7, [pc, #112]	; (19408 <timescale_JofAx+0x7c>)
   19396:	b092      	sub	sp, #72	; 0x48
   19398:	2600      	movs	r6, #0
   1939a:	ee10 2a10 	vmov	r2, s0
   1939e:	462b      	mov	r3, r5
   193a0:	4680      	mov	r8, r0
   193a2:	4629      	mov	r1, r5
   193a4:	ee10 0a10 	vmov	r0, s0
   193a8:	ed8d 0b02 	vstr	d0, [sp, #8]
   193ac:	e9cd 6700 	strd	r6, r7, [sp]
   193b0:	f007 fffe 	bl	213b0 <__aeabi_dmul>
   193b4:	2200      	movs	r2, #0
   193b6:	4b15      	ldr	r3, [pc, #84]	; (1940c <timescale_JofAx+0x80>)
   193b8:	f007 fffa 	bl	213b0 <__aeabi_dmul>
   193bc:	e9cd 6708 	strd	r6, r7, [sp, #32]
   193c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
   193c4:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   193c8:	f8d8 104c 	ldr.w	r1, [r8, #76]	; 0x4c
   193cc:	2300      	movs	r3, #0
   193ce:	2200      	movs	r2, #0
   193d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   193d4:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
   193d8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   193dc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   193e0:	f101 0518 	add.w	r5, r1, #24
   193e4:	2300      	movs	r3, #0
   193e6:	eb0d 0003 	add.w	r0, sp, r3
   193ea:	185a      	adds	r2, r3, r1
   193ec:	18ec      	adds	r4, r5, r3
   193ee:	e8f0 6702 	ldrd	r6, r7, [r0], #8
   193f2:	e8e2 6702 	strd	r6, r7, [r2], #8
   193f6:	42a2      	cmp	r2, r4
   193f8:	d1f9      	bne.n	193ee <timescale_JofAx+0x62>
   193fa:	3318      	adds	r3, #24
   193fc:	2b48      	cmp	r3, #72	; 0x48
   193fe:	d1f2      	bne.n	193e6 <timescale_JofAx+0x5a>
   19400:	b012      	add	sp, #72	; 0x48
   19402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19406:	bf00      	nop
   19408:	3ff00000 	.word	0x3ff00000
   1940c:	3fe00000 	.word	0x3fe00000

00019410 <timescale_Aofx>:
   19410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19414:	4606      	mov	r6, r0
   19416:	b089      	sub	sp, #36	; 0x24
   19418:	2218      	movs	r2, #24
   1941a:	2100      	movs	r1, #0
   1941c:	a802      	add	r0, sp, #8
   1941e:	f7f4 fb5c 	bl	dada <memset>
   19422:	68b5      	ldr	r5, [r6, #8]
   19424:	6cf6      	ldr	r6, [r6, #76]	; 0x4c
   19426:	f106 0348 	add.w	r3, r6, #72	; 0x48
   1942a:	ac02      	add	r4, sp, #8
   1942c:	9301      	str	r3, [sp, #4]
   1942e:	f105 0918 	add.w	r9, r5, #24
   19432:	e8f4 ab02 	ldrd	sl, fp, [r4], #8
   19436:	462f      	mov	r7, r5
   19438:	46b0      	mov	r8, r6
   1943a:	e8f7 2302 	ldrd	r2, r3, [r7], #8
   1943e:	e8f8 0102 	ldrd	r0, r1, [r8], #8
   19442:	f007 ffb5 	bl	213b0 <__aeabi_dmul>
   19446:	4602      	mov	r2, r0
   19448:	460b      	mov	r3, r1
   1944a:	4650      	mov	r0, sl
   1944c:	4659      	mov	r1, fp
   1944e:	f007 fdf9 	bl	21044 <__adddf3>
   19452:	454f      	cmp	r7, r9
   19454:	4682      	mov	sl, r0
   19456:	468b      	mov	fp, r1
   19458:	d1ef      	bne.n	1943a <timescale_Aofx+0x2a>
   1945a:	9b01      	ldr	r3, [sp, #4]
   1945c:	3618      	adds	r6, #24
   1945e:	429e      	cmp	r6, r3
   19460:	e944 ab02 	strd	sl, fp, [r4, #-8]
   19464:	d1e5      	bne.n	19432 <timescale_Aofx+0x22>
   19466:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1946a:	e9c5 2300 	strd	r2, r3, [r5]
   1946e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   19472:	e9c5 2302 	strd	r2, r3, [r5, #8]
   19476:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1947a:	e9c5 2304 	strd	r2, r3, [r5, #16]
   1947e:	b009      	add	sp, #36	; 0x24
   19480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19484:	0000      	movs	r0, r0
	...

00019488 <timescale_innovation>:
   19488:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1948c:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
   1948e:	88aa      	ldrh	r2, [r5, #4]
   19490:	f3c2 1280 	ubfx	r2, r2, #6, #1
   19494:	4604      	mov	r4, r0
   19496:	b37a      	cbz	r2, 194f8 <timescale_innovation+0x70>
   19498:	6946      	ldr	r6, [r0, #20]
   1949a:	4b37      	ldr	r3, [pc, #220]	; (19578 <timescale_innovation+0xf0>)
   1949c:	ed96 0b00 	vldr	d0, [r6]
   194a0:	2200      	movs	r2, #0
   194a2:	ec51 0b10 	vmov	r0, r1, d0
   194a6:	ed8d 0b00 	vstr	d0, [sp]
   194aa:	f008 f9f3 	bl	21894 <__aeabi_dcmplt>
   194ae:	f04f 0701 	mov.w	r7, #1
   194b2:	ed9d 0b00 	vldr	d0, [sp]
   194b6:	b900      	cbnz	r0, 194ba <timescale_innovation+0x32>
   194b8:	4607      	mov	r7, r0
   194ba:	792b      	ldrb	r3, [r5, #4]
   194bc:	f367 1345 	bfi	r3, r7, #5, #1
   194c0:	712b      	strb	r3, [r5, #4]
   194c2:	88ab      	ldrh	r3, [r5, #4]
   194c4:	069b      	lsls	r3, r3, #26
   194c6:	d509      	bpl.n	194dc <timescale_innovation+0x54>
   194c8:	ed9f 1b29 	vldr	d1, [pc, #164]	; 19570 <timescale_innovation+0xe8>
   194cc:	f008 fd6c 	bl	21fa8 <fmod>
   194d0:	792b      	ldrb	r3, [r5, #4]
   194d2:	ed86 0b00 	vstr	d0, [r6]
   194d6:	f36f 1386 	bfc	r3, #6, #1
   194da:	712b      	strb	r3, [r5, #4]
   194dc:	f8df 909c 	ldr.w	r9, [pc, #156]	; 1957c <timescale_innovation+0xf4>
   194e0:	f04f 0a00 	mov.w	sl, #0
   194e4:	f04f 0800 	mov.w	r8, #0
   194e8:	8862      	ldrh	r2, [r4, #2]
   194ea:	fa1f f38a 	uxth.w	r3, sl
   194ee:	429a      	cmp	r2, r3
   194f0:	d806      	bhi.n	19500 <timescale_innovation+0x78>
   194f2:	b002      	add	sp, #8
   194f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   194f8:	792b      	ldrb	r3, [r5, #4]
   194fa:	f362 1345 	bfi	r3, r2, #5, #1
   194fe:	e7ec      	b.n	194da <timescale_innovation+0x52>
   19500:	6963      	ldr	r3, [r4, #20]
   19502:	fa1f f58a 	uxth.w	r5, sl
   19506:	00ed      	lsls	r5, r5, #3
   19508:	1959      	adds	r1, r3, r5
   1950a:	6923      	ldr	r3, [r4, #16]
   1950c:	442b      	add	r3, r5
   1950e:	e9d3 2300 	ldrd	r2, r3, [r3]
   19512:	e9d1 0100 	ldrd	r0, r1, [r1]
   19516:	f007 fd93 	bl	21040 <__aeabi_dsub>
   1951a:	69a3      	ldr	r3, [r4, #24]
   1951c:	442b      	add	r3, r5
   1951e:	e9c3 0100 	strd	r0, r1, [r3]
   19522:	ec41 0b10 	vmov	d0, r0, r1
   19526:	f008 fcb3 	bl	21e90 <fabs>
   1952a:	2200      	movs	r2, #0
   1952c:	4b12      	ldr	r3, [pc, #72]	; (19578 <timescale_innovation+0xf0>)
   1952e:	ec51 0b10 	vmov	r0, r1, d0
   19532:	f008 f9cd 	bl	218d0 <__aeabi_dcmpgt>
   19536:	b190      	cbz	r0, 1955e <timescale_innovation+0xd6>
   19538:	69a3      	ldr	r3, [r4, #24]
   1953a:	441d      	add	r5, r3
   1953c:	e9d5 6700 	ldrd	r6, r7, [r5]
   19540:	2200      	movs	r2, #0
   19542:	2300      	movs	r3, #0
   19544:	4630      	mov	r0, r6
   19546:	4639      	mov	r1, r7
   19548:	f008 f9a4 	bl	21894 <__aeabi_dcmplt>
   1954c:	4642      	mov	r2, r8
   1954e:	464b      	mov	r3, r9
   19550:	b140      	cbz	r0, 19564 <timescale_innovation+0xdc>
   19552:	4630      	mov	r0, r6
   19554:	4639      	mov	r1, r7
   19556:	f007 fd75 	bl	21044 <__adddf3>
   1955a:	e9c5 0100 	strd	r0, r1, [r5]
   1955e:	f10a 0a01 	add.w	sl, sl, #1
   19562:	e7c1      	b.n	194e8 <timescale_innovation+0x60>
   19564:	4630      	mov	r0, r6
   19566:	4639      	mov	r1, r7
   19568:	f007 fd6a 	bl	21040 <__aeabi_dsub>
   1956c:	e7f5      	b.n	1955a <timescale_innovation+0xd2>
   1956e:	bf00      	nop
   19570:	00000000 	.word	0x00000000
   19574:	42700000 	.word	0x42700000
   19578:	42600000 	.word	0x42600000
   1957c:	42700000 	.word	0x42700000

00019580 <timescale_constraints>:
   19580:	b513      	push	{r0, r1, r4, lr}
   19582:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   19584:	889b      	ldrh	r3, [r3, #4]
   19586:	065b      	lsls	r3, r3, #25
   19588:	d513      	bpl.n	195b2 <timescale_constraints+0x32>
   1958a:	6884      	ldr	r4, [r0, #8]
   1958c:	4b0c      	ldr	r3, [pc, #48]	; (195c0 <timescale_constraints+0x40>)
   1958e:	ed94 0b00 	vldr	d0, [r4]
   19592:	2200      	movs	r2, #0
   19594:	ec51 0b10 	vmov	r0, r1, d0
   19598:	ed8d 0b00 	vstr	d0, [sp]
   1959c:	f008 f998 	bl	218d0 <__aeabi_dcmpgt>
   195a0:	ed9d 0b00 	vldr	d0, [sp]
   195a4:	b128      	cbz	r0, 195b2 <timescale_constraints+0x32>
   195a6:	ed9f 1b04 	vldr	d1, [pc, #16]	; 195b8 <timescale_constraints+0x38>
   195aa:	f008 fcfd 	bl	21fa8 <fmod>
   195ae:	ed84 0b00 	vstr	d0, [r4]
   195b2:	b002      	add	sp, #8
   195b4:	bd10      	pop	{r4, pc}
   195b6:	bf00      	nop
   195b8:	00000000 	.word	0x00000000
   195bc:	42700000 	.word	0x42700000
   195c0:	42700000 	.word	0x42700000
   195c4:	00000000 	.word	0x00000000

000195c8 <timescale_Hofx>:
   195c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   195cc:	6904      	ldr	r4, [r0, #16]
   195ce:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
   195d0:	69c5      	ldr	r5, [r0, #28]
   195d2:	6886      	ldr	r6, [r0, #8]
   195d4:	2200      	movs	r2, #0
   195d6:	2300      	movs	r3, #0
   195d8:	e9c4 2300 	strd	r2, r3, [r4]
   195dc:	f105 0818 	add.w	r8, r5, #24
   195e0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
   195e4:	e8f5 0102 	ldrd	r0, r1, [r5], #8
   195e8:	f007 fee2 	bl	213b0 <__aeabi_dmul>
   195ec:	e9d4 2300 	ldrd	r2, r3, [r4]
   195f0:	f007 fd28 	bl	21044 <__adddf3>
   195f4:	4545      	cmp	r5, r8
   195f6:	e9c4 0100 	strd	r0, r1, [r4]
   195fa:	d1f1      	bne.n	195e0 <timescale_Hofx+0x18>
   195fc:	e9cd 0100 	strd	r0, r1, [sp]
   19600:	88bb      	ldrh	r3, [r7, #4]
   19602:	065b      	lsls	r3, r3, #25
   19604:	d50c      	bpl.n	19620 <timescale_Hofx+0x58>
   19606:	2200      	movs	r2, #0
   19608:	4b09      	ldr	r3, [pc, #36]	; (19630 <timescale_Hofx+0x68>)
   1960a:	f008 f961 	bl	218d0 <__aeabi_dcmpgt>
   1960e:	ed9d 0b00 	vldr	d0, [sp]
   19612:	b128      	cbz	r0, 19620 <timescale_Hofx+0x58>
   19614:	ed9f 1b04 	vldr	d1, [pc, #16]	; 19628 <timescale_Hofx+0x60>
   19618:	f008 fcc6 	bl	21fa8 <fmod>
   1961c:	ed84 0b00 	vstr	d0, [r4]
   19620:	b002      	add	sp, #8
   19622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19626:	bf00      	nop
   19628:	00000000 	.word	0x00000000
   1962c:	42700000 	.word	0x42700000
   19630:	42700000 	.word	0x42700000

00019634 <timescale_init>:
   19634:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19638:	4688      	mov	r8, r1
   1963a:	4614      	mov	r4, r2
   1963c:	ec57 6b10 	vmov	r6, r7, d0
   19640:	4605      	mov	r5, r0
   19642:	b990      	cbnz	r0, 1966a <timescale_init+0x36>
   19644:	2008      	movs	r0, #8
   19646:	f7f4 f9cb 	bl	d9e0 <malloc>
   1964a:	4605      	mov	r5, r0
   1964c:	b928      	cbnz	r0, 1965a <timescale_init+0x26>
   1964e:	4b2c      	ldr	r3, [pc, #176]	; (19700 <timescale_init+0xcc>)
   19650:	4a2c      	ldr	r2, [pc, #176]	; (19704 <timescale_init+0xd0>)
   19652:	482d      	ldr	r0, [pc, #180]	; (19708 <timescale_init+0xd4>)
   19654:	21e0      	movs	r1, #224	; 0xe0
   19656:	f7ef fc85 	bl	8f64 <__assert_func>
   1965a:	2208      	movs	r2, #8
   1965c:	2100      	movs	r1, #0
   1965e:	f7f4 fa3c 	bl	dada <memset>
   19662:	792b      	ldrb	r3, [r5, #4]
   19664:	f043 0301 	orr.w	r3, r3, #1
   19668:	712b      	strb	r3, [r5, #4]
   1966a:	4641      	mov	r1, r8
   1966c:	2301      	movs	r3, #1
   1966e:	2203      	movs	r2, #3
   19670:	6828      	ldr	r0, [r5, #0]
   19672:	f000 fad3 	bl	19c1c <srkf_dbl_init>
   19676:	463b      	mov	r3, r7
   19678:	4621      	mov	r1, r4
   1967a:	6028      	str	r0, [r5, #0]
   1967c:	4632      	mov	r2, r6
   1967e:	f7ff fdcb 	bl	19218 <timescale_QUpdate>
   19682:	682c      	ldr	r4, [r5, #0]
   19684:	2700      	movs	r7, #0
   19686:	f8b4 a000 	ldrh.w	sl, [r4]
   1968a:	46b8      	mov	r8, r7
   1968c:	fa1f f388 	uxth.w	r3, r8
   19690:	459a      	cmp	sl, r3
   19692:	d91a      	bls.n	196ca <timescale_init+0x96>
   19694:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   19698:	2600      	movs	r6, #0
   1969a:	e00f      	b.n	196bc <timescale_init+0x88>
   1969c:	6a22      	ldr	r2, [r4, #32]
   1969e:	19f3      	adds	r3, r6, r7
   196a0:	00db      	lsls	r3, r3, #3
   196a2:	eb02 0903 	add.w	r9, r2, r3
   196a6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   196a8:	18d1      	adds	r1, r2, r3
   196aa:	e9d1 0100 	ldrd	r0, r1, [r1]
   196ae:	2200      	movs	r2, #0
   196b0:	4b16      	ldr	r3, [pc, #88]	; (1970c <timescale_init+0xd8>)
   196b2:	f007 fe7d 	bl	213b0 <__aeabi_dmul>
   196b6:	e9c9 0100 	strd	r0, r1, [r9]
   196ba:	3601      	adds	r6, #1
   196bc:	b2b3      	uxth	r3, r6
   196be:	459b      	cmp	fp, r3
   196c0:	d8ec      	bhi.n	1969c <timescale_init+0x68>
   196c2:	f108 0801 	add.w	r8, r8, #1
   196c6:	4457      	add	r7, sl
   196c8:	e7e0      	b.n	1968c <timescale_init+0x58>
   196ca:	69e3      	ldr	r3, [r4, #28]
   196cc:	4910      	ldr	r1, [pc, #64]	; (19710 <timescale_init+0xdc>)
   196ce:	792a      	ldrb	r2, [r5, #4]
   196d0:	2000      	movs	r0, #0
   196d2:	e9c3 0100 	strd	r0, r1, [r3]
   196d6:	4b0f      	ldr	r3, [pc, #60]	; (19714 <timescale_init+0xe0>)
   196d8:	65a3      	str	r3, [r4, #88]	; 0x58
   196da:	4b0f      	ldr	r3, [pc, #60]	; (19718 <timescale_init+0xe4>)
   196dc:	6563      	str	r3, [r4, #84]	; 0x54
   196de:	4b0f      	ldr	r3, [pc, #60]	; (1971c <timescale_init+0xe8>)
   196e0:	65e3      	str	r3, [r4, #92]	; 0x5c
   196e2:	4b0f      	ldr	r3, [pc, #60]	; (19720 <timescale_init+0xec>)
   196e4:	6663      	str	r3, [r4, #100]	; 0x64
   196e6:	4b0f      	ldr	r3, [pc, #60]	; (19724 <timescale_init+0xf0>)
   196e8:	e9c4 351a 	strd	r3, r5, [r4, #104]	; 0x68
   196ec:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   196f0:	f3c3 0340 	ubfx	r3, r3, #1, #1
   196f4:	f363 0241 	bfi	r2, r3, #1, #1
   196f8:	712a      	strb	r2, [r5, #4]
   196fa:	4628      	mov	r0, r5
   196fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19700:	000246ce 	.word	0x000246ce
   19704:	000246a6 	.word	0x000246a6
   19708:	000246d3 	.word	0x000246d3
   1970c:	40590000 	.word	0x40590000
   19710:	3ff00000 	.word	0x3ff00000
   19714:	0001938d 	.word	0x0001938d
   19718:	00019411 	.word	0x00019411
   1971c:	000195c9 	.word	0x000195c9
   19720:	00019581 	.word	0x00019581
   19724:	00019489 	.word	0x00019489

00019728 <timescale_free>:
   19728:	b510      	push	{r4, lr}
   1972a:	4604      	mov	r4, r0
   1972c:	6800      	ldr	r0, [r0, #0]
   1972e:	b930      	cbnz	r0, 1973e <timescale_free+0x16>
   19730:	4b08      	ldr	r3, [pc, #32]	; (19754 <timescale_free+0x2c>)
   19732:	4a09      	ldr	r2, [pc, #36]	; (19758 <timescale_free+0x30>)
   19734:	4809      	ldr	r0, [pc, #36]	; (1975c <timescale_free+0x34>)
   19736:	f44f 7181 	mov.w	r1, #258	; 0x102
   1973a:	f7ef fc13 	bl	8f64 <__assert_func>
   1973e:	f000 fced 	bl	1a11c <srkf_dbl_free>
   19742:	7923      	ldrb	r3, [r4, #4]
   19744:	07db      	lsls	r3, r3, #31
   19746:	d504      	bpl.n	19752 <timescale_free+0x2a>
   19748:	4620      	mov	r0, r4
   1974a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1974e:	f7f4 b97d 	b.w	da4c <free>
   19752:	bd10      	pop	{r4, pc}
   19754:	000246c4 	.word	0x000246c4
   19758:	000246b5 	.word	0x000246b5
   1975c:	000246d3 	.word	0x000246d3

00019760 <timescale_main>:
   19760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19764:	ed2d 8b02 	vpush	{d8}
   19768:	eeb0 8a40 	vmov.f32	s16, s0
   1976c:	eef0 8a60 	vmov.f32	s17, s1
   19770:	b083      	sub	sp, #12
   19772:	4604      	mov	r4, r0
   19774:	468a      	mov	sl, r1
   19776:	4617      	mov	r7, r2
   19778:	461d      	mov	r5, r3
   1977a:	2200      	movs	r2, #0
   1977c:	4b29      	ldr	r3, [pc, #164]	; (19824 <timescale_main+0xc4>)
   1977e:	e9d1 0100 	ldrd	r0, r1, [r1]
   19782:	f04f 0601 	mov.w	r6, #1
   19786:	f008 f8a3 	bl	218d0 <__aeabi_dcmpgt>
   1978a:	b900      	cbnz	r0, 1978e <timescale_main+0x2e>
   1978c:	4606      	mov	r6, r0
   1978e:	7923      	ldrb	r3, [r4, #4]
   19790:	6820      	ldr	r0, [r4, #0]
   19792:	f3c3 1280 	ubfx	r2, r3, #6, #1
   19796:	4316      	orrs	r6, r2
   19798:	f366 1386 	bfi	r3, r6, #6, #1
   1979c:	7123      	strb	r3, [r4, #4]
   1979e:	4639      	mov	r1, r7
   197a0:	ec53 2b18 	vmov	r2, r3, d8
   197a4:	f7ff fd38 	bl	19218 <timescale_QUpdate>
   197a8:	6827      	ldr	r7, [r4, #0]
   197aa:	887a      	ldrh	r2, [r7, #2]
   197ac:	f06f 0907 	mvn.w	r9, #7
   197b0:	1c53      	adds	r3, r2, #1
   197b2:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
   197b6:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
   197ba:	9201      	str	r2, [sp, #4]
   197bc:	fb09 f903 	mul.w	r9, r9, r3
   197c0:	f04f 0800 	mov.w	r8, #0
   197c4:	9b01      	ldr	r3, [sp, #4]
   197c6:	429d      	cmp	r5, r3
   197c8:	44d8      	add	r8, fp
   197ca:	d11e      	bne.n	1980a <timescale_main+0xaa>
   197cc:	eeb0 0a48 	vmov.f32	s0, s16
   197d0:	eef0 0a68 	vmov.f32	s1, s17
   197d4:	2300      	movs	r3, #0
   197d6:	461a      	mov	r2, r3
   197d8:	4651      	mov	r1, sl
   197da:	4638      	mov	r0, r7
   197dc:	f000 f8b4 	bl	19948 <srkf_dbl_main>
   197e0:	7923      	ldrb	r3, [r4, #4]
   197e2:	f3c0 1000 	ubfx	r0, r0, #4, #1
   197e6:	f3c3 0280 	ubfx	r2, r3, #2, #1
   197ea:	4302      	orrs	r2, r0
   197ec:	f362 0382 	bfi	r3, r2, #2, #1
   197f0:	7123      	strb	r3, [r4, #4]
   197f2:	b2db      	uxtb	r3, r3
   197f4:	075a      	lsls	r2, r3, #29
   197f6:	bf5c      	itt	pl
   197f8:	f043 0308 	orrpl.w	r3, r3, #8
   197fc:	7123      	strbpl	r3, [r4, #4]
   197fe:	88a0      	ldrh	r0, [r4, #4]
   19800:	b003      	add	sp, #12
   19802:	ecbd 8b02 	vpop	{d8}
   19806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1980a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
   1980e:	6bbe      	ldr	r6, [r7, #56]	; 0x38
   19810:	4610      	mov	r0, r2
   19812:	4619      	mov	r1, r3
   19814:	f007 fdcc 	bl	213b0 <__aeabi_dmul>
   19818:	4446      	add	r6, r8
   1981a:	444e      	add	r6, r9
   1981c:	e9c6 0100 	strd	r0, r1, [r6]
   19820:	e7d0      	b.n	197c4 <timescale_main+0x64>
   19822:	bf00      	nop
   19824:	42600000 	.word	0x42600000

00019828 <Hofx>:
   19828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1982c:	ed2d 8b02 	vpush	{d8}
   19830:	ed9f 8b1b 	vldr	d8, [pc, #108]	; 198a0 <Hofx+0x78>
   19834:	f04f 0800 	mov.w	r8, #0
   19838:	f8b0 9000 	ldrh.w	r9, [r0]
   1983c:	f8b0 a002 	ldrh.w	sl, [r0, #2]
   19840:	4604      	mov	r4, r0
   19842:	4647      	mov	r7, r8
   19844:	b2bb      	uxth	r3, r7
   19846:	459a      	cmp	sl, r3
   19848:	d803      	bhi.n	19852 <Hofx+0x2a>
   1984a:	ecbd 8b02 	vpop	{d8}
   1984e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19852:	6926      	ldr	r6, [r4, #16]
   19854:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
   19858:	ed86 8b00 	vstr	d8, [r6]
   1985c:	2500      	movs	r5, #0
   1985e:	b2ab      	uxth	r3, r5
   19860:	4599      	cmp	r9, r3
   19862:	d802      	bhi.n	1986a <Hofx+0x42>
   19864:	3701      	adds	r7, #1
   19866:	44c8      	add	r8, r9
   19868:	e7ec      	b.n	19844 <Hofx+0x1c>
   1986a:	69e3      	ldr	r3, [r4, #28]
   1986c:	eb05 0108 	add.w	r1, r5, r8
   19870:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   19874:	68a3      	ldr	r3, [r4, #8]
   19876:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   1987a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1987e:	e9d1 0100 	ldrd	r0, r1, [r1]
   19882:	f007 fd95 	bl	213b0 <__aeabi_dmul>
   19886:	4602      	mov	r2, r0
   19888:	460b      	mov	r3, r1
   1988a:	e9d6 0100 	ldrd	r0, r1, [r6]
   1988e:	f007 fbd9 	bl	21044 <__adddf3>
   19892:	3501      	adds	r5, #1
   19894:	e9c6 0100 	strd	r0, r1, [r6]
   19898:	e7e1      	b.n	1985e <Hofx+0x36>
   1989a:	bf00      	nop
   1989c:	f3af 8000 	nop.w
	...

000198a8 <Aofx>:
   198a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   198ac:	f8b0 a000 	ldrh.w	sl, [r0]
   198b0:	ed2d 8b02 	vpush	{d8}
   198b4:	ea4f 09ca 	mov.w	r9, sl, lsl #3
   198b8:	f109 030e 	add.w	r3, r9, #14
   198bc:	466a      	mov	r2, sp
   198be:	08db      	lsrs	r3, r3, #3
   198c0:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
   198c4:	af00      	add	r7, sp, #0
   198c6:	ed9f 8b1e 	vldr	d8, [pc, #120]	; 19940 <Aofx+0x98>
   198ca:	469d      	mov	sp, r3
   198cc:	46e8      	mov	r8, sp
   198ce:	4606      	mov	r6, r0
   198d0:	44c1      	add	r9, r8
   198d2:	4644      	mov	r4, r8
   198d4:	f04f 0b00 	mov.w	fp, #0
   198d8:	454c      	cmp	r4, r9
   198da:	d107      	bne.n	198ec <Aofx+0x44>
   198dc:	4643      	mov	r3, r8
   198de:	42a3      	cmp	r3, r4
   198e0:	d124      	bne.n	1992c <Aofx+0x84>
   198e2:	46bd      	mov	sp, r7
   198e4:	ecbd 8b02 	vpop	{d8}
   198e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   198ec:	eca4 8b02 	vstmia	r4!, {d8}
   198f0:	2500      	movs	r5, #0
   198f2:	b2ab      	uxth	r3, r5
   198f4:	459a      	cmp	sl, r3
   198f6:	d801      	bhi.n	198fc <Aofx+0x54>
   198f8:	44d3      	add	fp, sl
   198fa:	e7ed      	b.n	198d8 <Aofx+0x30>
   198fc:	6cf1      	ldr	r1, [r6, #76]	; 0x4c
   198fe:	eb05 030b 	add.w	r3, r5, fp
   19902:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   19906:	68b3      	ldr	r3, [r6, #8]
   19908:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   1990c:	e9d3 2300 	ldrd	r2, r3, [r3]
   19910:	e9d1 0100 	ldrd	r0, r1, [r1]
   19914:	f007 fd4c 	bl	213b0 <__aeabi_dmul>
   19918:	4602      	mov	r2, r0
   1991a:	460b      	mov	r3, r1
   1991c:	e954 0102 	ldrd	r0, r1, [r4, #-8]
   19920:	f007 fb90 	bl	21044 <__adddf3>
   19924:	3501      	adds	r5, #1
   19926:	e944 0102 	strd	r0, r1, [r4, #-8]
   1992a:	e7e2      	b.n	198f2 <Aofx+0x4a>
   1992c:	68b2      	ldr	r2, [r6, #8]
   1992e:	eba3 0108 	sub.w	r1, r3, r8
   19932:	440a      	add	r2, r1
   19934:	e8f3 0102 	ldrd	r0, r1, [r3], #8
   19938:	e9c2 0100 	strd	r0, r1, [r2]
   1993c:	e7cf      	b.n	198de <Aofx+0x36>
   1993e:	bf00      	nop
	...

00019948 <srkf_dbl_main>:
   19948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1994c:	ed2d 8b02 	vpush	{d8}
   19950:	eeb0 8a40 	vmov.f32	s16, s0
   19954:	eef0 8a60 	vmov.f32	s17, s1
   19958:	b089      	sub	sp, #36	; 0x24
   1995a:	460d      	mov	r5, r1
   1995c:	af04      	add	r7, sp, #16
   1995e:	4690      	mov	r8, r2
   19960:	461e      	mov	r6, r3
   19962:	4604      	mov	r4, r0
   19964:	b928      	cbnz	r0, 19972 <srkf_dbl_main+0x2a>
   19966:	4ba8      	ldr	r3, [pc, #672]	; (19c08 <srkf_dbl_main+0x2c0>)
   19968:	4aa8      	ldr	r2, [pc, #672]	; (19c0c <srkf_dbl_main+0x2c4>)
   1996a:	2185      	movs	r1, #133	; 0x85
   1996c:	48a8      	ldr	r0, [pc, #672]	; (19c10 <srkf_dbl_main+0x2c8>)
   1996e:	f7ef faf9 	bl	8f64 <__assert_func>
   19972:	6d43      	ldr	r3, [r0, #84]	; 0x54
   19974:	b91b      	cbnz	r3, 1997e <srkf_dbl_main+0x36>
   19976:	4ba7      	ldr	r3, [pc, #668]	; (19c14 <srkf_dbl_main+0x2cc>)
   19978:	4aa4      	ldr	r2, [pc, #656]	; (19c0c <srkf_dbl_main+0x2c4>)
   1997a:	2186      	movs	r1, #134	; 0x86
   1997c:	e7f6      	b.n	1996c <srkf_dbl_main+0x24>
   1997e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   19980:	b91b      	cbnz	r3, 1998a <srkf_dbl_main+0x42>
   19982:	4ba5      	ldr	r3, [pc, #660]	; (19c18 <srkf_dbl_main+0x2d0>)
   19984:	4aa1      	ldr	r2, [pc, #644]	; (19c0c <srkf_dbl_main+0x2c4>)
   19986:	2187      	movs	r1, #135	; 0x87
   19988:	e7f0      	b.n	1996c <srkf_dbl_main+0x24>
   1998a:	6d83      	ldr	r3, [r0, #88]	; 0x58
   1998c:	b10b      	cbz	r3, 19992 <srkf_dbl_main+0x4a>
   1998e:	4611      	mov	r1, r2
   19990:	4798      	blx	r3
   19992:	eeb0 0a48 	vmov.f32	s0, s16
   19996:	eef0 0a68 	vmov.f32	s1, s17
   1999a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1999c:	4641      	mov	r1, r8
   1999e:	4620      	mov	r0, r4
   199a0:	4798      	blx	r3
   199a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   199a4:	b12b      	cbz	r3, 199b2 <srkf_dbl_main+0x6a>
   199a6:	eeb0 0a48 	vmov.f32	s0, s16
   199aa:	eef0 0a68 	vmov.f32	s1, s17
   199ae:	4620      	mov	r0, r4
   199b0:	4798      	blx	r3
   199b2:	8863      	ldrh	r3, [r4, #2]
   199b4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   199b6:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
   199ba:	f000 fc65 	bl	1a288 <ud_dbl>
   199be:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
   199c2:	8823      	ldrh	r3, [r4, #0]
   199c4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   199c6:	f000 fc5f 	bl	1a288 <ud_dbl>
   199ca:	8823      	ldrh	r3, [r4, #0]
   199cc:	9302      	str	r3, [sp, #8]
   199ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
   199d0:	9301      	str	r3, [sp, #4]
   199d2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   199d4:	9300      	str	r3, [sp, #0]
   199d6:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
   199da:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   199de:	f000 fd27 	bl	1a430 <thornton_dbl>
   199e2:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   199e6:	f000 0001 	and.w	r0, r0, #1
   199ea:	f3c3 1240 	ubfx	r2, r3, #5, #1
   199ee:	4302      	orrs	r2, r0
   199f0:	f362 1345 	bfi	r3, r2, #5, #1
   199f4:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
   199f8:	2e00      	cmp	r6, #0
   199fa:	d156      	bne.n	19aaa <srkf_dbl_main+0x162>
   199fc:	6e23      	ldr	r3, [r4, #96]	; 0x60
   199fe:	466e      	mov	r6, sp
   19a00:	b12b      	cbz	r3, 19a0e <srkf_dbl_main+0xc6>
   19a02:	eeb0 0a48 	vmov.f32	s0, s16
   19a06:	eef0 0a68 	vmov.f32	s1, s17
   19a0a:	4620      	mov	r0, r4
   19a0c:	4798      	blx	r3
   19a0e:	eeb0 0a48 	vmov.f32	s0, s16
   19a12:	eef0 0a68 	vmov.f32	s1, s17
   19a16:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   19a18:	4620      	mov	r0, r4
   19a1a:	4798      	blx	r3
   19a1c:	8863      	ldrh	r3, [r4, #2]
   19a1e:	8822      	ldrh	r2, [r4, #0]
   19a20:	435a      	muls	r2, r3
   19a22:	00d2      	lsls	r2, r2, #3
   19a24:	3208      	adds	r2, #8
   19a26:	ebad 0d02 	sub.w	sp, sp, r2
   19a2a:	2201      	movs	r2, #1
   19a2c:	9200      	str	r2, [sp, #0]
   19a2e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   19a30:	6960      	ldr	r0, [r4, #20]
   19a32:	462a      	mov	r2, r5
   19a34:	f000 fbc2 	bl	1a1bc <trisolve_dbl>
   19a38:	8822      	ldrh	r2, [r4, #0]
   19a3a:	8863      	ldrh	r3, [r4, #2]
   19a3c:	9200      	str	r2, [sp, #0]
   19a3e:	f10d 0810 	add.w	r8, sp, #16
   19a42:	69e2      	ldr	r2, [r4, #28]
   19a44:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   19a46:	4640      	mov	r0, r8
   19a48:	f000 fbb8 	bl	1a1bc <trisolve_dbl>
   19a4c:	6ea5      	ldr	r5, [r4, #104]	; 0x68
   19a4e:	b9b5      	cbnz	r5, 19a7e <srkf_dbl_main+0x136>
   19a50:	f8b4 a002 	ldrh.w	sl, [r4, #2]
   19a54:	b2ab      	uxth	r3, r5
   19a56:	459a      	cmp	sl, r3
   19a58:	d917      	bls.n	19a8a <srkf_dbl_main+0x142>
   19a5a:	69a3      	ldr	r3, [r4, #24]
   19a5c:	00ea      	lsls	r2, r5, #3
   19a5e:	eb03 0902 	add.w	r9, r3, r2
   19a62:	6963      	ldr	r3, [r4, #20]
   19a64:	1899      	adds	r1, r3, r2
   19a66:	6923      	ldr	r3, [r4, #16]
   19a68:	4413      	add	r3, r2
   19a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
   19a6e:	e9d1 0100 	ldrd	r0, r1, [r1]
   19a72:	f007 fae5 	bl	21040 <__aeabi_dsub>
   19a76:	3501      	adds	r5, #1
   19a78:	e9c9 0100 	strd	r0, r1, [r9]
   19a7c:	e7ea      	b.n	19a54 <srkf_dbl_main+0x10c>
   19a7e:	eeb0 0a48 	vmov.f32	s0, s16
   19a82:	eef0 0a68 	vmov.f32	s1, s17
   19a86:	4620      	mov	r0, r4
   19a88:	47a8      	blx	r5
   19a8a:	2300      	movs	r3, #0
   19a8c:	8862      	ldrh	r2, [r4, #2]
   19a8e:	b299      	uxth	r1, r3
   19a90:	4291      	cmp	r1, r2
   19a92:	f103 0501 	add.w	r5, r3, #1
   19a96:	d326      	bcc.n	19ae6 <srkf_dbl_main+0x19e>
   19a98:	6e63      	ldr	r3, [r4, #100]	; 0x64
   19a9a:	b12b      	cbz	r3, 19aa8 <srkf_dbl_main+0x160>
   19a9c:	eeb0 0a48 	vmov.f32	s0, s16
   19aa0:	eef0 0a68 	vmov.f32	s1, s17
   19aa4:	4620      	mov	r0, r4
   19aa6:	4798      	blx	r3
   19aa8:	46b5      	mov	sp, r6
   19aaa:	f8b4 a000 	ldrh.w	sl, [r4]
   19aae:	ed9f 8b54 	vldr	d8, [pc, #336]	; 19c00 <srkf_dbl_main+0x2b8>
   19ab2:	ea4f 03ca 	mov.w	r3, sl, lsl #3
   19ab6:	2500      	movs	r5, #0
   19ab8:	60fb      	str	r3, [r7, #12]
   19aba:	60bd      	str	r5, [r7, #8]
   19abc:	893b      	ldrh	r3, [r7, #8]
   19abe:	459a      	cmp	sl, r3
   19ac0:	d85d      	bhi.n	19b7e <srkf_dbl_main+0x236>
   19ac2:	ed9f 8b4f 	vldr	d8, [pc, #316]	; 19c00 <srkf_dbl_main+0x2b8>
   19ac6:	2500      	movs	r5, #0
   19ac8:	68fb      	ldr	r3, [r7, #12]
   19aca:	603b      	str	r3, [r7, #0]
   19acc:	46ab      	mov	fp, r5
   19ace:	607d      	str	r5, [r7, #4]
   19ad0:	88bb      	ldrh	r3, [r7, #4]
   19ad2:	459a      	cmp	sl, r3
   19ad4:	f240 808b 	bls.w	19bee <srkf_dbl_main+0x2a6>
   19ad8:	f06f 0307 	mvn.w	r3, #7
   19adc:	436b      	muls	r3, r5
   19ade:	60bb      	str	r3, [r7, #8]
   19ae0:	f04f 0900 	mov.w	r9, #0
   19ae4:	e05e      	b.n	19ba4 <srkf_dbl_main+0x25c>
   19ae6:	b29b      	uxth	r3, r3
   19ae8:	fb02 3c03 	mla	ip, r2, r3, r3
   19aec:	6c22      	ldr	r2, [r4, #64]	; 0x40
   19aee:	8821      	ldrh	r1, [r4, #0]
   19af0:	eb02 0ccc 	add.w	ip, r2, ip, lsl #3
   19af4:	69a2      	ldr	r2, [r4, #24]
   19af6:	9100      	str	r1, [sp, #0]
   19af8:	fb03 f001 	mul.w	r0, r3, r1
   19afc:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
   19b00:	68a1      	ldr	r1, [r4, #8]
   19b02:	e9d4 2309 	ldrd	r2, r3, [r4, #36]	; 0x24
   19b06:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
   19b0a:	ed9c 1b00 	vldr	d1, [ip]
   19b0e:	ed9e 0b00 	vldr	d0, [lr]
   19b12:	f000 feb1 	bl	1a878 <bierman_dbl>
   19b16:	462b      	mov	r3, r5
   19b18:	e7b8      	b.n	19a8c <srkf_dbl_main+0x144>
   19b1a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   19b1c:	eb06 0805 	add.w	r8, r6, r5
   19b20:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
   19b24:	ed88 8b00 	vstr	d8, [r8]
   19b28:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
   19b2c:	f04f 0900 	mov.w	r9, #0
   19b30:	fa1f f389 	uxth.w	r3, r9
   19b34:	459a      	cmp	sl, r3
   19b36:	d808      	bhi.n	19b4a <srkf_dbl_main+0x202>
   19b38:	3601      	adds	r6, #1
   19b3a:	b2b3      	uxth	r3, r6
   19b3c:	459a      	cmp	sl, r3
   19b3e:	d8ec      	bhi.n	19b1a <srkf_dbl_main+0x1d2>
   19b40:	68bb      	ldr	r3, [r7, #8]
   19b42:	3301      	adds	r3, #1
   19b44:	60bb      	str	r3, [r7, #8]
   19b46:	4455      	add	r5, sl
   19b48:	e7b8      	b.n	19abc <srkf_dbl_main+0x174>
   19b4a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   19b4c:	eb09 0305 	add.w	r3, r9, r5
   19b50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   19b54:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   19b56:	445b      	add	r3, fp
   19b58:	e9d3 2300 	ldrd	r2, r3, [r3]
   19b5c:	e9d1 0100 	ldrd	r0, r1, [r1]
   19b60:	f007 fc26 	bl	213b0 <__aeabi_dmul>
   19b64:	460b      	mov	r3, r1
   19b66:	4602      	mov	r2, r0
   19b68:	e9d8 0100 	ldrd	r0, r1, [r8]
   19b6c:	f007 fa6a 	bl	21044 <__adddf3>
   19b70:	68fb      	ldr	r3, [r7, #12]
   19b72:	e9c8 0100 	strd	r0, r1, [r8]
   19b76:	f109 0901 	add.w	r9, r9, #1
   19b7a:	449b      	add	fp, r3
   19b7c:	e7d8      	b.n	19b30 <srkf_dbl_main+0x1e8>
   19b7e:	2600      	movs	r6, #0
   19b80:	e7db      	b.n	19b3a <srkf_dbl_main+0x1f2>
   19b82:	6a23      	ldr	r3, [r4, #32]
   19b84:	eb09 0805 	add.w	r8, r9, r5
   19b88:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
   19b8c:	ed88 8b00 	vstr	d8, [r8]
   19b90:	465e      	mov	r6, fp
   19b92:	683b      	ldr	r3, [r7, #0]
   19b94:	429e      	cmp	r6, r3
   19b96:	d114      	bne.n	19bc2 <srkf_dbl_main+0x27a>
   19b98:	e9d7 3202 	ldrd	r3, r2, [r7, #8]
   19b9c:	4413      	add	r3, r2
   19b9e:	f109 0901 	add.w	r9, r9, #1
   19ba2:	60bb      	str	r3, [r7, #8]
   19ba4:	fa1f f389 	uxth.w	r3, r9
   19ba8:	459a      	cmp	sl, r3
   19baa:	d8ea      	bhi.n	19b82 <srkf_dbl_main+0x23a>
   19bac:	687b      	ldr	r3, [r7, #4]
   19bae:	68fa      	ldr	r2, [r7, #12]
   19bb0:	3301      	adds	r3, #1
   19bb2:	607b      	str	r3, [r7, #4]
   19bb4:	68fb      	ldr	r3, [r7, #12]
   19bb6:	449b      	add	fp, r3
   19bb8:	683b      	ldr	r3, [r7, #0]
   19bba:	4413      	add	r3, r2
   19bbc:	603b      	str	r3, [r7, #0]
   19bbe:	4455      	add	r5, sl
   19bc0:	e786      	b.n	19ad0 <srkf_dbl_main+0x188>
   19bc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19bc4:	68ba      	ldr	r2, [r7, #8]
   19bc6:	4413      	add	r3, r2
   19bc8:	1999      	adds	r1, r3, r6
   19bca:	6c63      	ldr	r3, [r4, #68]	; 0x44
   19bcc:	4433      	add	r3, r6
   19bce:	e9d3 2300 	ldrd	r2, r3, [r3]
   19bd2:	e9d1 0100 	ldrd	r0, r1, [r1]
   19bd6:	f007 fbeb 	bl	213b0 <__aeabi_dmul>
   19bda:	4602      	mov	r2, r0
   19bdc:	460b      	mov	r3, r1
   19bde:	e9d8 0100 	ldrd	r0, r1, [r8]
   19be2:	f007 fa2f 	bl	21044 <__adddf3>
   19be6:	3608      	adds	r6, #8
   19be8:	e9c8 0100 	strd	r0, r1, [r8]
   19bec:	e7d1      	b.n	19b92 <srkf_dbl_main+0x24a>
   19bee:	f8b4 0070 	ldrh.w	r0, [r4, #112]	; 0x70
   19bf2:	3714      	adds	r7, #20
   19bf4:	46bd      	mov	sp, r7
   19bf6:	ecbd 8b02 	vpop	{d8}
   19bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19bfe:	bf00      	nop
	...
   19c08:	000247dd 	.word	0x000247dd
   19c0c:	00024703 	.word	0x00024703
   19c10:	000247ea 	.word	0x000247ea
   19c14:	00024819 	.word	0x00024819
   19c18:	0002482c 	.word	0x0002482c

00019c1c <srkf_dbl_init>:
   19c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19c20:	4688      	mov	r8, r1
   19c22:	4615      	mov	r5, r2
   19c24:	461e      	mov	r6, r3
   19c26:	4604      	mov	r4, r0
   19c28:	b9d8      	cbnz	r0, 19c62 <srkf_dbl_init+0x46>
   19c2a:	2074      	movs	r0, #116	; 0x74
   19c2c:	f7f3 fed8 	bl	d9e0 <malloc>
   19c30:	4604      	mov	r4, r0
   19c32:	b928      	cbnz	r0, 19c40 <srkf_dbl_init+0x24>
   19c34:	4baa      	ldr	r3, [pc, #680]	; (19ee0 <srkf_dbl_init+0x2c4>)
   19c36:	4aab      	ldr	r2, [pc, #684]	; (19ee4 <srkf_dbl_init+0x2c8>)
   19c38:	21c5      	movs	r1, #197	; 0xc5
   19c3a:	48ab      	ldr	r0, [pc, #684]	; (19ee8 <srkf_dbl_init+0x2cc>)
   19c3c:	f7ef f992 	bl	8f64 <__assert_func>
   19c40:	2274      	movs	r2, #116	; 0x74
   19c42:	2100      	movs	r1, #0
   19c44:	f7f3 ff49 	bl	dada <memset>
   19c48:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   19c4c:	8025      	strh	r5, [r4, #0]
   19c4e:	f043 0301 	orr.w	r3, r3, #1
   19c52:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
   19c56:	4ba5      	ldr	r3, [pc, #660]	; (19eec <srkf_dbl_init+0x2d0>)
   19c58:	6563      	str	r3, [r4, #84]	; 0x54
   19c5a:	4ba5      	ldr	r3, [pc, #660]	; (19ef0 <srkf_dbl_init+0x2d4>)
   19c5c:	80a6      	strh	r6, [r4, #4]
   19c5e:	8066      	strh	r6, [r4, #2]
   19c60:	65e3      	str	r3, [r4, #92]	; 0x5c
   19c62:	8823      	ldrh	r3, [r4, #0]
   19c64:	42ab      	cmp	r3, r5
   19c66:	d003      	beq.n	19c70 <srkf_dbl_init+0x54>
   19c68:	4ba2      	ldr	r3, [pc, #648]	; (19ef4 <srkf_dbl_init+0x2d8>)
   19c6a:	4a9e      	ldr	r2, [pc, #632]	; (19ee4 <srkf_dbl_init+0x2c8>)
   19c6c:	21ce      	movs	r1, #206	; 0xce
   19c6e:	e7e4      	b.n	19c3a <srkf_dbl_init+0x1e>
   19c70:	88a3      	ldrh	r3, [r4, #4]
   19c72:	42b3      	cmp	r3, r6
   19c74:	d920      	bls.n	19cb8 <srkf_dbl_init+0x9c>
   19c76:	00f7      	lsls	r7, r6, #3
   19c78:	8066      	strh	r6, [r4, #2]
   19c7a:	463a      	mov	r2, r7
   19c7c:	2100      	movs	r1, #0
   19c7e:	4375      	muls	r5, r6
   19c80:	6920      	ldr	r0, [r4, #16]
   19c82:	f7f3 ff2a 	bl	dada <memset>
   19c86:	00ed      	lsls	r5, r5, #3
   19c88:	463a      	mov	r2, r7
   19c8a:	2100      	movs	r1, #0
   19c8c:	69a0      	ldr	r0, [r4, #24]
   19c8e:	f7f3 ff24 	bl	dada <memset>
   19c92:	4376      	muls	r6, r6
   19c94:	462a      	mov	r2, r5
   19c96:	2100      	movs	r1, #0
   19c98:	69e0      	ldr	r0, [r4, #28]
   19c9a:	f7f3 ff1e 	bl	dada <memset>
   19c9e:	00f2      	lsls	r2, r6, #3
   19ca0:	2100      	movs	r1, #0
   19ca2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   19ca4:	f7f3 ff19 	bl	dada <memset>
   19ca8:	462a      	mov	r2, r5
   19caa:	2100      	movs	r1, #0
   19cac:	6d20      	ldr	r0, [r4, #80]	; 0x50
   19cae:	f7f3 ff14 	bl	dada <memset>
   19cb2:	4620      	mov	r0, r4
   19cb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19cb8:	68a7      	ldr	r7, [r4, #8]
   19cba:	b177      	cbz	r7, 19cda <srkf_dbl_init+0xbe>
   19cbc:	f8d4 8010 	ldr.w	r8, [r4, #16]
   19cc0:	00f7      	lsls	r7, r6, #3
   19cc2:	f1b8 0f00 	cmp.w	r8, #0
   19cc6:	d126      	bne.n	19d16 <srkf_dbl_init+0xfa>
   19cc8:	4638      	mov	r0, r7
   19cca:	f7f3 fe89 	bl	d9e0 <malloc>
   19cce:	6120      	str	r0, [r4, #16]
   19cd0:	bb58      	cbnz	r0, 19d2a <srkf_dbl_init+0x10e>
   19cd2:	4b89      	ldr	r3, [pc, #548]	; (19ef8 <srkf_dbl_init+0x2dc>)
   19cd4:	4a83      	ldr	r2, [pc, #524]	; (19ee4 <srkf_dbl_init+0x2c8>)
   19cd6:	21e6      	movs	r1, #230	; 0xe6
   19cd8:	e7af      	b.n	19c3a <srkf_dbl_init+0x1e>
   19cda:	ea4f 09c5 	mov.w	r9, r5, lsl #3
   19cde:	4648      	mov	r0, r9
   19ce0:	f7f3 fe7e 	bl	d9e0 <malloc>
   19ce4:	60a0      	str	r0, [r4, #8]
   19ce6:	b918      	cbnz	r0, 19cf0 <srkf_dbl_init+0xd4>
   19ce8:	4b84      	ldr	r3, [pc, #528]	; (19efc <srkf_dbl_init+0x2e0>)
   19cea:	4a7e      	ldr	r2, [pc, #504]	; (19ee4 <srkf_dbl_init+0x2c8>)
   19cec:	21dc      	movs	r1, #220	; 0xdc
   19cee:	e7a4      	b.n	19c3a <srkf_dbl_init+0x1e>
   19cf0:	464a      	mov	r2, r9
   19cf2:	4639      	mov	r1, r7
   19cf4:	f7f3 fef1 	bl	dada <memset>
   19cf8:	f1b8 0f00 	cmp.w	r8, #0
   19cfc:	d0de      	beq.n	19cbc <srkf_dbl_init+0xa0>
   19cfe:	463b      	mov	r3, r7
   19d00:	429d      	cmp	r5, r3
   19d02:	dddb      	ble.n	19cbc <srkf_dbl_init+0xa0>
   19d04:	68a2      	ldr	r2, [r4, #8]
   19d06:	e8f8 0102 	ldrd	r0, r1, [r8], #8
   19d0a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   19d0e:	e9c2 0100 	strd	r0, r1, [r2]
   19d12:	3301      	adds	r3, #1
   19d14:	e7f4      	b.n	19d00 <srkf_dbl_init+0xe4>
   19d16:	4639      	mov	r1, r7
   19d18:	4640      	mov	r0, r8
   19d1a:	f002 fb94 	bl	1c446 <realloc>
   19d1e:	6120      	str	r0, [r4, #16]
   19d20:	b918      	cbnz	r0, 19d2a <srkf_dbl_init+0x10e>
   19d22:	4b75      	ldr	r3, [pc, #468]	; (19ef8 <srkf_dbl_init+0x2dc>)
   19d24:	4a6f      	ldr	r2, [pc, #444]	; (19ee4 <srkf_dbl_init+0x2c8>)
   19d26:	21ea      	movs	r1, #234	; 0xea
   19d28:	e787      	b.n	19c3a <srkf_dbl_init+0x1e>
   19d2a:	463a      	mov	r2, r7
   19d2c:	2100      	movs	r1, #0
   19d2e:	f7f3 fed4 	bl	dada <memset>
   19d32:	f8d4 8014 	ldr.w	r8, [r4, #20]
   19d36:	f1b8 0f00 	cmp.w	r8, #0
   19d3a:	d108      	bne.n	19d4e <srkf_dbl_init+0x132>
   19d3c:	4638      	mov	r0, r7
   19d3e:	f7f3 fe4f 	bl	d9e0 <malloc>
   19d42:	6160      	str	r0, [r4, #20]
   19d44:	b968      	cbnz	r0, 19d62 <srkf_dbl_init+0x146>
   19d46:	4b6e      	ldr	r3, [pc, #440]	; (19f00 <srkf_dbl_init+0x2e4>)
   19d48:	4a66      	ldr	r2, [pc, #408]	; (19ee4 <srkf_dbl_init+0x2c8>)
   19d4a:	21ef      	movs	r1, #239	; 0xef
   19d4c:	e775      	b.n	19c3a <srkf_dbl_init+0x1e>
   19d4e:	4639      	mov	r1, r7
   19d50:	4640      	mov	r0, r8
   19d52:	f002 fb78 	bl	1c446 <realloc>
   19d56:	6160      	str	r0, [r4, #20]
   19d58:	b918      	cbnz	r0, 19d62 <srkf_dbl_init+0x146>
   19d5a:	4b69      	ldr	r3, [pc, #420]	; (19f00 <srkf_dbl_init+0x2e4>)
   19d5c:	4a61      	ldr	r2, [pc, #388]	; (19ee4 <srkf_dbl_init+0x2c8>)
   19d5e:	21f3      	movs	r1, #243	; 0xf3
   19d60:	e76b      	b.n	19c3a <srkf_dbl_init+0x1e>
   19d62:	463a      	mov	r2, r7
   19d64:	2100      	movs	r1, #0
   19d66:	f7f3 feb8 	bl	dada <memset>
   19d6a:	f8d4 8018 	ldr.w	r8, [r4, #24]
   19d6e:	f1b8 0f00 	cmp.w	r8, #0
   19d72:	d108      	bne.n	19d86 <srkf_dbl_init+0x16a>
   19d74:	4638      	mov	r0, r7
   19d76:	f7f3 fe33 	bl	d9e0 <malloc>
   19d7a:	61a0      	str	r0, [r4, #24]
   19d7c:	b968      	cbnz	r0, 19d9a <srkf_dbl_init+0x17e>
   19d7e:	4b61      	ldr	r3, [pc, #388]	; (19f04 <srkf_dbl_init+0x2e8>)
   19d80:	4a58      	ldr	r2, [pc, #352]	; (19ee4 <srkf_dbl_init+0x2c8>)
   19d82:	21f8      	movs	r1, #248	; 0xf8
   19d84:	e759      	b.n	19c3a <srkf_dbl_init+0x1e>
   19d86:	4639      	mov	r1, r7
   19d88:	4640      	mov	r0, r8
   19d8a:	f002 fb5c 	bl	1c446 <realloc>
   19d8e:	61a0      	str	r0, [r4, #24]
   19d90:	b918      	cbnz	r0, 19d9a <srkf_dbl_init+0x17e>
   19d92:	4b5c      	ldr	r3, [pc, #368]	; (19f04 <srkf_dbl_init+0x2e8>)
   19d94:	4a53      	ldr	r2, [pc, #332]	; (19ee4 <srkf_dbl_init+0x2c8>)
   19d96:	21fc      	movs	r1, #252	; 0xfc
   19d98:	e74f      	b.n	19c3a <srkf_dbl_init+0x1e>
   19d9a:	463a      	mov	r2, r7
   19d9c:	2100      	movs	r1, #0
   19d9e:	f7f3 fe9c 	bl	dada <memset>
   19da2:	69e7      	ldr	r7, [r4, #28]
   19da4:	fb05 f806 	mul.w	r8, r5, r6
   19da8:	ea4f 08c8 	mov.w	r8, r8, lsl #3
   19dac:	b94f      	cbnz	r7, 19dc2 <srkf_dbl_init+0x1a6>
   19dae:	4640      	mov	r0, r8
   19db0:	f7f3 fe16 	bl	d9e0 <malloc>
   19db4:	61e0      	str	r0, [r4, #28]
   19db6:	b978      	cbnz	r0, 19dd8 <srkf_dbl_init+0x1bc>
   19db8:	4b53      	ldr	r3, [pc, #332]	; (19f08 <srkf_dbl_init+0x2ec>)
   19dba:	4a4a      	ldr	r2, [pc, #296]	; (19ee4 <srkf_dbl_init+0x2c8>)
   19dbc:	f240 1101 	movw	r1, #257	; 0x101
   19dc0:	e73b      	b.n	19c3a <srkf_dbl_init+0x1e>
   19dc2:	4641      	mov	r1, r8
   19dc4:	4638      	mov	r0, r7
   19dc6:	f002 fb3e 	bl	1c446 <realloc>
   19dca:	61e0      	str	r0, [r4, #28]
   19dcc:	b920      	cbnz	r0, 19dd8 <srkf_dbl_init+0x1bc>
   19dce:	4b4e      	ldr	r3, [pc, #312]	; (19f08 <srkf_dbl_init+0x2ec>)
   19dd0:	4a44      	ldr	r2, [pc, #272]	; (19ee4 <srkf_dbl_init+0x2c8>)
   19dd2:	f240 1105 	movw	r1, #261	; 0x105
   19dd6:	e730      	b.n	19c3a <srkf_dbl_init+0x1e>
   19dd8:	4642      	mov	r2, r8
   19dda:	2100      	movs	r1, #0
   19ddc:	f7f3 fe7d 	bl	dada <memset>
   19de0:	f8d4 9020 	ldr.w	r9, [r4, #32]
   19de4:	f1b9 0f00 	cmp.w	r9, #0
   19de8:	d110      	bne.n	19e0c <srkf_dbl_init+0x1f0>
   19dea:	fb05 f705 	mul.w	r7, r5, r5
   19dee:	00ff      	lsls	r7, r7, #3
   19df0:	4638      	mov	r0, r7
   19df2:	f7f3 fdf5 	bl	d9e0 <malloc>
   19df6:	6220      	str	r0, [r4, #32]
   19df8:	b920      	cbnz	r0, 19e04 <srkf_dbl_init+0x1e8>
   19dfa:	4b44      	ldr	r3, [pc, #272]	; (19f0c <srkf_dbl_init+0x2f0>)
   19dfc:	4a39      	ldr	r2, [pc, #228]	; (19ee4 <srkf_dbl_init+0x2c8>)
   19dfe:	f44f 7185 	mov.w	r1, #266	; 0x10a
   19e02:	e71a      	b.n	19c3a <srkf_dbl_init+0x1e>
   19e04:	463a      	mov	r2, r7
   19e06:	4649      	mov	r1, r9
   19e08:	f7f3 fe67 	bl	dada <memset>
   19e0c:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
   19e10:	f1b9 0f00 	cmp.w	r9, #0
   19e14:	d110      	bne.n	19e38 <srkf_dbl_init+0x21c>
   19e16:	fb05 f705 	mul.w	r7, r5, r5
   19e1a:	00ff      	lsls	r7, r7, #3
   19e1c:	4638      	mov	r0, r7
   19e1e:	f7f3 fddf 	bl	d9e0 <malloc>
   19e22:	6260      	str	r0, [r4, #36]	; 0x24
   19e24:	b920      	cbnz	r0, 19e30 <srkf_dbl_init+0x214>
   19e26:	4b3a      	ldr	r3, [pc, #232]	; (19f10 <srkf_dbl_init+0x2f4>)
   19e28:	4a2e      	ldr	r2, [pc, #184]	; (19ee4 <srkf_dbl_init+0x2c8>)
   19e2a:	f240 110f 	movw	r1, #271	; 0x10f
   19e2e:	e704      	b.n	19c3a <srkf_dbl_init+0x1e>
   19e30:	463a      	mov	r2, r7
   19e32:	4649      	mov	r1, r9
   19e34:	f7f3 fe51 	bl	dada <memset>
   19e38:	f8d4 9028 	ldr.w	r9, [r4, #40]	; 0x28
   19e3c:	f1b9 0f00 	cmp.w	r9, #0
   19e40:	d110      	bne.n	19e64 <srkf_dbl_init+0x248>
   19e42:	fb05 f705 	mul.w	r7, r5, r5
   19e46:	00ff      	lsls	r7, r7, #3
   19e48:	4638      	mov	r0, r7
   19e4a:	f7f3 fdc9 	bl	d9e0 <malloc>
   19e4e:	62a0      	str	r0, [r4, #40]	; 0x28
   19e50:	b920      	cbnz	r0, 19e5c <srkf_dbl_init+0x240>
   19e52:	4b30      	ldr	r3, [pc, #192]	; (19f14 <srkf_dbl_init+0x2f8>)
   19e54:	4a23      	ldr	r2, [pc, #140]	; (19ee4 <srkf_dbl_init+0x2c8>)
   19e56:	f44f 718a 	mov.w	r1, #276	; 0x114
   19e5a:	e6ee      	b.n	19c3a <srkf_dbl_init+0x1e>
   19e5c:	463a      	mov	r2, r7
   19e5e:	4649      	mov	r1, r9
   19e60:	f7f3 fe3b 	bl	dada <memset>
   19e64:	f8d4 902c 	ldr.w	r9, [r4, #44]	; 0x2c
   19e68:	f1b9 0f00 	cmp.w	r9, #0
   19e6c:	d110      	bne.n	19e90 <srkf_dbl_init+0x274>
   19e6e:	fb05 f705 	mul.w	r7, r5, r5
   19e72:	00ff      	lsls	r7, r7, #3
   19e74:	4638      	mov	r0, r7
   19e76:	f7f3 fdb3 	bl	d9e0 <malloc>
   19e7a:	62e0      	str	r0, [r4, #44]	; 0x2c
   19e7c:	b920      	cbnz	r0, 19e88 <srkf_dbl_init+0x26c>
   19e7e:	4b26      	ldr	r3, [pc, #152]	; (19f18 <srkf_dbl_init+0x2fc>)
   19e80:	4a18      	ldr	r2, [pc, #96]	; (19ee4 <srkf_dbl_init+0x2c8>)
   19e82:	f240 1119 	movw	r1, #281	; 0x119
   19e86:	e6d8      	b.n	19c3a <srkf_dbl_init+0x1e>
   19e88:	463a      	mov	r2, r7
   19e8a:	4649      	mov	r1, r9
   19e8c:	f7f3 fe25 	bl	dada <memset>
   19e90:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
   19e94:	f1b9 0f00 	cmp.w	r9, #0
   19e98:	d110      	bne.n	19ebc <srkf_dbl_init+0x2a0>
   19e9a:	fb05 f705 	mul.w	r7, r5, r5
   19e9e:	00ff      	lsls	r7, r7, #3
   19ea0:	4638      	mov	r0, r7
   19ea2:	f7f3 fd9d 	bl	d9e0 <malloc>
   19ea6:	6320      	str	r0, [r4, #48]	; 0x30
   19ea8:	b920      	cbnz	r0, 19eb4 <srkf_dbl_init+0x298>
   19eaa:	4b1c      	ldr	r3, [pc, #112]	; (19f1c <srkf_dbl_init+0x300>)
   19eac:	4a0d      	ldr	r2, [pc, #52]	; (19ee4 <srkf_dbl_init+0x2c8>)
   19eae:	f44f 718f 	mov.w	r1, #286	; 0x11e
   19eb2:	e6c2      	b.n	19c3a <srkf_dbl_init+0x1e>
   19eb4:	463a      	mov	r2, r7
   19eb6:	4649      	mov	r1, r9
   19eb8:	f7f3 fe0f 	bl	dada <memset>
   19ebc:	f8d4 9034 	ldr.w	r9, [r4, #52]	; 0x34
   19ec0:	f1b9 0f00 	cmp.w	r9, #0
   19ec4:	d132      	bne.n	19f2c <srkf_dbl_init+0x310>
   19ec6:	fb05 f705 	mul.w	r7, r5, r5
   19eca:	00ff      	lsls	r7, r7, #3
   19ecc:	4638      	mov	r0, r7
   19ece:	f7f3 fd87 	bl	d9e0 <malloc>
   19ed2:	6360      	str	r0, [r4, #52]	; 0x34
   19ed4:	bb30      	cbnz	r0, 19f24 <srkf_dbl_init+0x308>
   19ed6:	4b12      	ldr	r3, [pc, #72]	; (19f20 <srkf_dbl_init+0x304>)
   19ed8:	4a02      	ldr	r2, [pc, #8]	; (19ee4 <srkf_dbl_init+0x2c8>)
   19eda:	f240 1123 	movw	r1, #291	; 0x123
   19ede:	e6ac      	b.n	19c3a <srkf_dbl_init+0x1e>
   19ee0:	000246ce 	.word	0x000246ce
   19ee4:	00024711 	.word	0x00024711
   19ee8:	000247ea 	.word	0x000247ea
   19eec:	000198a9 	.word	0x000198a9
   19ef0:	00019829 	.word	0x00019829
   19ef4:	00024739 	.word	0x00024739
   19ef8:	0002474e 	.word	0x0002474e
   19efc:	00024746 	.word	0x00024746
   19f00:	00024756 	.word	0x00024756
   19f04:	0002475e 	.word	0x0002475e
   19f08:	00024766 	.word	0x00024766
   19f0c:	0002476e 	.word	0x0002476e
   19f10:	00024776 	.word	0x00024776
   19f14:	0002477f 	.word	0x0002477f
   19f18:	00024788 	.word	0x00024788
   19f1c:	00024790 	.word	0x00024790
   19f20:	00024799 	.word	0x00024799
   19f24:	463a      	mov	r2, r7
   19f26:	4649      	mov	r1, r9
   19f28:	f7f3 fdd7 	bl	dada <memset>
   19f2c:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
   19f30:	fb06 f706 	mul.w	r7, r6, r6
   19f34:	00ff      	lsls	r7, r7, #3
   19f36:	f1b9 0f00 	cmp.w	r9, #0
   19f3a:	d109      	bne.n	19f50 <srkf_dbl_init+0x334>
   19f3c:	4638      	mov	r0, r7
   19f3e:	f7f3 fd4f 	bl	d9e0 <malloc>
   19f42:	63a0      	str	r0, [r4, #56]	; 0x38
   19f44:	b978      	cbnz	r0, 19f66 <srkf_dbl_init+0x34a>
   19f46:	4b6d      	ldr	r3, [pc, #436]	; (1a0fc <srkf_dbl_init+0x4e0>)
   19f48:	4a6d      	ldr	r2, [pc, #436]	; (1a100 <srkf_dbl_init+0x4e4>)
   19f4a:	f44f 7194 	mov.w	r1, #296	; 0x128
   19f4e:	e674      	b.n	19c3a <srkf_dbl_init+0x1e>
   19f50:	4639      	mov	r1, r7
   19f52:	4648      	mov	r0, r9
   19f54:	f002 fa77 	bl	1c446 <realloc>
   19f58:	63a0      	str	r0, [r4, #56]	; 0x38
   19f5a:	b920      	cbnz	r0, 19f66 <srkf_dbl_init+0x34a>
   19f5c:	4b67      	ldr	r3, [pc, #412]	; (1a0fc <srkf_dbl_init+0x4e0>)
   19f5e:	4a68      	ldr	r2, [pc, #416]	; (1a100 <srkf_dbl_init+0x4e4>)
   19f60:	f44f 7196 	mov.w	r1, #300	; 0x12c
   19f64:	e669      	b.n	19c3a <srkf_dbl_init+0x1e>
   19f66:	463a      	mov	r2, r7
   19f68:	2100      	movs	r1, #0
   19f6a:	f7f3 fdb6 	bl	dada <memset>
   19f6e:	f8d4 903c 	ldr.w	r9, [r4, #60]	; 0x3c
   19f72:	f1b9 0f00 	cmp.w	r9, #0
   19f76:	d109      	bne.n	19f8c <srkf_dbl_init+0x370>
   19f78:	4638      	mov	r0, r7
   19f7a:	f7f3 fd31 	bl	d9e0 <malloc>
   19f7e:	63e0      	str	r0, [r4, #60]	; 0x3c
   19f80:	b978      	cbnz	r0, 19fa2 <srkf_dbl_init+0x386>
   19f82:	4b60      	ldr	r3, [pc, #384]	; (1a104 <srkf_dbl_init+0x4e8>)
   19f84:	4a5e      	ldr	r2, [pc, #376]	; (1a100 <srkf_dbl_init+0x4e4>)
   19f86:	f240 1131 	movw	r1, #305	; 0x131
   19f8a:	e656      	b.n	19c3a <srkf_dbl_init+0x1e>
   19f8c:	4639      	mov	r1, r7
   19f8e:	4648      	mov	r0, r9
   19f90:	f002 fa59 	bl	1c446 <realloc>
   19f94:	63e0      	str	r0, [r4, #60]	; 0x3c
   19f96:	b920      	cbnz	r0, 19fa2 <srkf_dbl_init+0x386>
   19f98:	4b5a      	ldr	r3, [pc, #360]	; (1a104 <srkf_dbl_init+0x4e8>)
   19f9a:	4a59      	ldr	r2, [pc, #356]	; (1a100 <srkf_dbl_init+0x4e4>)
   19f9c:	f240 1135 	movw	r1, #309	; 0x135
   19fa0:	e64b      	b.n	19c3a <srkf_dbl_init+0x1e>
   19fa2:	463a      	mov	r2, r7
   19fa4:	2100      	movs	r1, #0
   19fa6:	f7f3 fd98 	bl	dada <memset>
   19faa:	f8d4 9040 	ldr.w	r9, [r4, #64]	; 0x40
   19fae:	f1b9 0f00 	cmp.w	r9, #0
   19fb2:	d109      	bne.n	19fc8 <srkf_dbl_init+0x3ac>
   19fb4:	4638      	mov	r0, r7
   19fb6:	f7f3 fd13 	bl	d9e0 <malloc>
   19fba:	6420      	str	r0, [r4, #64]	; 0x40
   19fbc:	b978      	cbnz	r0, 19fde <srkf_dbl_init+0x3c2>
   19fbe:	4b52      	ldr	r3, [pc, #328]	; (1a108 <srkf_dbl_init+0x4ec>)
   19fc0:	4a4f      	ldr	r2, [pc, #316]	; (1a100 <srkf_dbl_init+0x4e4>)
   19fc2:	f44f 719d 	mov.w	r1, #314	; 0x13a
   19fc6:	e638      	b.n	19c3a <srkf_dbl_init+0x1e>
   19fc8:	4639      	mov	r1, r7
   19fca:	4648      	mov	r0, r9
   19fcc:	f002 fa3b 	bl	1c446 <realloc>
   19fd0:	6420      	str	r0, [r4, #64]	; 0x40
   19fd2:	b920      	cbnz	r0, 19fde <srkf_dbl_init+0x3c2>
   19fd4:	4b4c      	ldr	r3, [pc, #304]	; (1a108 <srkf_dbl_init+0x4ec>)
   19fd6:	4a4a      	ldr	r2, [pc, #296]	; (1a100 <srkf_dbl_init+0x4e4>)
   19fd8:	f44f 719f 	mov.w	r1, #318	; 0x13e
   19fdc:	e62d      	b.n	19c3a <srkf_dbl_init+0x1e>
   19fde:	463a      	mov	r2, r7
   19fe0:	2100      	movs	r1, #0
   19fe2:	f7f3 fd7a 	bl	dada <memset>
   19fe6:	6c60      	ldr	r0, [r4, #68]	; 0x44
   19fe8:	b988      	cbnz	r0, 1a00e <srkf_dbl_init+0x3f2>
   19fea:	42b5      	cmp	r5, r6
   19fec:	bf8c      	ite	hi
   19fee:	fb15 f705 	smulbbhi	r7, r5, r5
   19ff2:	fb16 f706 	smulbbls	r7, r6, r6
   19ff6:	b2bf      	uxth	r7, r7
   19ff8:	00ff      	lsls	r7, r7, #3
   19ffa:	4638      	mov	r0, r7
   19ffc:	f7f3 fcf0 	bl	d9e0 <malloc>
   1a000:	6460      	str	r0, [r4, #68]	; 0x44
   1a002:	b9b0      	cbnz	r0, 1a032 <srkf_dbl_init+0x416>
   1a004:	4b41      	ldr	r3, [pc, #260]	; (1a10c <srkf_dbl_init+0x4f0>)
   1a006:	4a3e      	ldr	r2, [pc, #248]	; (1a100 <srkf_dbl_init+0x4e4>)
   1a008:	f44f 71a2 	mov.w	r1, #324	; 0x144
   1a00c:	e615      	b.n	19c3a <srkf_dbl_init+0x1e>
   1a00e:	42b5      	cmp	r5, r6
   1a010:	bf8c      	ite	hi
   1a012:	fb15 f705 	smulbbhi	r7, r5, r5
   1a016:	fb16 f706 	smulbbls	r7, r6, r6
   1a01a:	b2bf      	uxth	r7, r7
   1a01c:	00ff      	lsls	r7, r7, #3
   1a01e:	4639      	mov	r1, r7
   1a020:	f002 fa11 	bl	1c446 <realloc>
   1a024:	6460      	str	r0, [r4, #68]	; 0x44
   1a026:	b920      	cbnz	r0, 1a032 <srkf_dbl_init+0x416>
   1a028:	4b38      	ldr	r3, [pc, #224]	; (1a10c <srkf_dbl_init+0x4f0>)
   1a02a:	4a35      	ldr	r2, [pc, #212]	; (1a100 <srkf_dbl_init+0x4e4>)
   1a02c:	f240 1149 	movw	r1, #329	; 0x149
   1a030:	e603      	b.n	19c3a <srkf_dbl_init+0x1e>
   1a032:	463a      	mov	r2, r7
   1a034:	2100      	movs	r1, #0
   1a036:	f7f3 fd50 	bl	dada <memset>
   1a03a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   1a03c:	b988      	cbnz	r0, 1a062 <srkf_dbl_init+0x446>
   1a03e:	42b5      	cmp	r5, r6
   1a040:	bf8c      	ite	hi
   1a042:	fb15 f705 	smulbbhi	r7, r5, r5
   1a046:	fb16 f706 	smulbbls	r7, r6, r6
   1a04a:	b2bf      	uxth	r7, r7
   1a04c:	00ff      	lsls	r7, r7, #3
   1a04e:	4638      	mov	r0, r7
   1a050:	f7f3 fcc6 	bl	d9e0 <malloc>
   1a054:	64a0      	str	r0, [r4, #72]	; 0x48
   1a056:	b9b0      	cbnz	r0, 1a086 <srkf_dbl_init+0x46a>
   1a058:	4b2d      	ldr	r3, [pc, #180]	; (1a110 <srkf_dbl_init+0x4f4>)
   1a05a:	4a29      	ldr	r2, [pc, #164]	; (1a100 <srkf_dbl_init+0x4e4>)
   1a05c:	f240 114f 	movw	r1, #335	; 0x14f
   1a060:	e5eb      	b.n	19c3a <srkf_dbl_init+0x1e>
   1a062:	42b5      	cmp	r5, r6
   1a064:	bf8c      	ite	hi
   1a066:	fb15 f705 	smulbbhi	r7, r5, r5
   1a06a:	fb16 f706 	smulbbls	r7, r6, r6
   1a06e:	b2bf      	uxth	r7, r7
   1a070:	00ff      	lsls	r7, r7, #3
   1a072:	4639      	mov	r1, r7
   1a074:	f002 f9e7 	bl	1c446 <realloc>
   1a078:	64a0      	str	r0, [r4, #72]	; 0x48
   1a07a:	b920      	cbnz	r0, 1a086 <srkf_dbl_init+0x46a>
   1a07c:	4b24      	ldr	r3, [pc, #144]	; (1a110 <srkf_dbl_init+0x4f4>)
   1a07e:	4a20      	ldr	r2, [pc, #128]	; (1a100 <srkf_dbl_init+0x4e4>)
   1a080:	f44f 71aa 	mov.w	r1, #340	; 0x154
   1a084:	e5d9      	b.n	19c3a <srkf_dbl_init+0x1e>
   1a086:	463a      	mov	r2, r7
   1a088:	2100      	movs	r1, #0
   1a08a:	f7f3 fd26 	bl	dada <memset>
   1a08e:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
   1a090:	b97f      	cbnz	r7, 1a0b2 <srkf_dbl_init+0x496>
   1a092:	436d      	muls	r5, r5
   1a094:	00ed      	lsls	r5, r5, #3
   1a096:	4628      	mov	r0, r5
   1a098:	f7f3 fca2 	bl	d9e0 <malloc>
   1a09c:	64e0      	str	r0, [r4, #76]	; 0x4c
   1a09e:	b920      	cbnz	r0, 1a0aa <srkf_dbl_init+0x48e>
   1a0a0:	4b1c      	ldr	r3, [pc, #112]	; (1a114 <srkf_dbl_init+0x4f8>)
   1a0a2:	4a17      	ldr	r2, [pc, #92]	; (1a100 <srkf_dbl_init+0x4e4>)
   1a0a4:	f240 1159 	movw	r1, #345	; 0x159
   1a0a8:	e5c7      	b.n	19c3a <srkf_dbl_init+0x1e>
   1a0aa:	462a      	mov	r2, r5
   1a0ac:	4639      	mov	r1, r7
   1a0ae:	f7f3 fd14 	bl	dada <memset>
   1a0b2:	6d25      	ldr	r5, [r4, #80]	; 0x50
   1a0b4:	b94d      	cbnz	r5, 1a0ca <srkf_dbl_init+0x4ae>
   1a0b6:	4640      	mov	r0, r8
   1a0b8:	f7f3 fc92 	bl	d9e0 <malloc>
   1a0bc:	6520      	str	r0, [r4, #80]	; 0x50
   1a0be:	b978      	cbnz	r0, 1a0e0 <srkf_dbl_init+0x4c4>
   1a0c0:	4b15      	ldr	r3, [pc, #84]	; (1a118 <srkf_dbl_init+0x4fc>)
   1a0c2:	4a0f      	ldr	r2, [pc, #60]	; (1a100 <srkf_dbl_init+0x4e4>)
   1a0c4:	f44f 71af 	mov.w	r1, #350	; 0x15e
   1a0c8:	e5b7      	b.n	19c3a <srkf_dbl_init+0x1e>
   1a0ca:	4641      	mov	r1, r8
   1a0cc:	4628      	mov	r0, r5
   1a0ce:	f002 f9ba 	bl	1c446 <realloc>
   1a0d2:	6520      	str	r0, [r4, #80]	; 0x50
   1a0d4:	b920      	cbnz	r0, 1a0e0 <srkf_dbl_init+0x4c4>
   1a0d6:	4b10      	ldr	r3, [pc, #64]	; (1a118 <srkf_dbl_init+0x4fc>)
   1a0d8:	4a09      	ldr	r2, [pc, #36]	; (1a100 <srkf_dbl_init+0x4e4>)
   1a0da:	f44f 71b1 	mov.w	r1, #354	; 0x162
   1a0de:	e5ac      	b.n	19c3a <srkf_dbl_init+0x1e>
   1a0e0:	4642      	mov	r2, r8
   1a0e2:	2100      	movs	r1, #0
   1a0e4:	f7f3 fcf9 	bl	dada <memset>
   1a0e8:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   1a0ec:	80a6      	strh	r6, [r4, #4]
   1a0ee:	f043 0302 	orr.w	r3, r3, #2
   1a0f2:	8066      	strh	r6, [r4, #2]
   1a0f4:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
   1a0f8:	e5db      	b.n	19cb2 <srkf_dbl_init+0x96>
   1a0fa:	bf00      	nop
   1a0fc:	000247a2 	.word	0x000247a2
   1a100:	00024711 	.word	0x00024711
   1a104:	000247aa 	.word	0x000247aa
   1a108:	000247b3 	.word	0x000247b3
   1a10c:	000247bc 	.word	0x000247bc
   1a110:	000247c4 	.word	0x000247c4
   1a114:	000247cd 	.word	0x000247cd
   1a118:	000247d5 	.word	0x000247d5

0001a11c <srkf_dbl_free>:
   1a11c:	b510      	push	{r4, lr}
   1a11e:	4604      	mov	r4, r0
   1a120:	b930      	cbnz	r0, 1a130 <srkf_dbl_free+0x14>
   1a122:	4b23      	ldr	r3, [pc, #140]	; (1a1b0 <srkf_dbl_free+0x94>)
   1a124:	4a23      	ldr	r2, [pc, #140]	; (1a1b4 <srkf_dbl_free+0x98>)
   1a126:	4824      	ldr	r0, [pc, #144]	; (1a1b8 <srkf_dbl_free+0x9c>)
   1a128:	f240 1173 	movw	r1, #371	; 0x173
   1a12c:	f7ee ff1a 	bl	8f64 <__assert_func>
   1a130:	6880      	ldr	r0, [r0, #8]
   1a132:	f7f3 fc8b 	bl	da4c <free>
   1a136:	6920      	ldr	r0, [r4, #16]
   1a138:	f7f3 fc88 	bl	da4c <free>
   1a13c:	69a0      	ldr	r0, [r4, #24]
   1a13e:	f7f3 fc85 	bl	da4c <free>
   1a142:	69e0      	ldr	r0, [r4, #28]
   1a144:	f7f3 fc82 	bl	da4c <free>
   1a148:	6a20      	ldr	r0, [r4, #32]
   1a14a:	f7f3 fc7f 	bl	da4c <free>
   1a14e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1a150:	f7f3 fc7c 	bl	da4c <free>
   1a154:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   1a156:	f7f3 fc79 	bl	da4c <free>
   1a15a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1a15c:	f7f3 fc76 	bl	da4c <free>
   1a160:	6b20      	ldr	r0, [r4, #48]	; 0x30
   1a162:	f7f3 fc73 	bl	da4c <free>
   1a166:	6b60      	ldr	r0, [r4, #52]	; 0x34
   1a168:	f7f3 fc70 	bl	da4c <free>
   1a16c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1a16e:	f7f3 fc6d 	bl	da4c <free>
   1a172:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1a174:	f7f3 fc6a 	bl	da4c <free>
   1a178:	6c20      	ldr	r0, [r4, #64]	; 0x40
   1a17a:	f7f3 fc67 	bl	da4c <free>
   1a17e:	6c60      	ldr	r0, [r4, #68]	; 0x44
   1a180:	f7f3 fc64 	bl	da4c <free>
   1a184:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   1a186:	f7f3 fc61 	bl	da4c <free>
   1a18a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   1a18c:	f7f3 fc5e 	bl	da4c <free>
   1a190:	6d20      	ldr	r0, [r4, #80]	; 0x50
   1a192:	f7f3 fc5b 	bl	da4c <free>
   1a196:	2300      	movs	r3, #0
   1a198:	6023      	str	r3, [r4, #0]
   1a19a:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   1a19e:	07db      	lsls	r3, r3, #31
   1a1a0:	d504      	bpl.n	1a1ac <srkf_dbl_free+0x90>
   1a1a2:	4620      	mov	r0, r4
   1a1a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a1a8:	f7f3 bc50 	b.w	da4c <free>
   1a1ac:	bd10      	pop	{r4, pc}
   1a1ae:	bf00      	nop
   1a1b0:	0002472d 	.word	0x0002472d
   1a1b4:	0002471f 	.word	0x0002471f
   1a1b8:	000247ea 	.word	0x000247ea

0001a1bc <trisolve_dbl>:
   1a1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a1c0:	b08b      	sub	sp, #44	; 0x2c
   1a1c2:	4699      	mov	r9, r3
   1a1c4:	f8bd 8050 	ldrh.w	r8, [sp, #80]	; 0x50
   1a1c8:	9004      	str	r0, [sp, #16]
   1a1ca:	f06f 0307 	mvn.w	r3, #7
   1a1ce:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
   1a1d2:	fb03 f308 	mul.w	r3, r3, r8
   1a1d6:	b236      	sxth	r6, r6
   1a1d8:	9303      	str	r3, [sp, #12]
   1a1da:	e9cd 1208 	strd	r1, r2, [sp, #32]
   1a1de:	fb06 f308 	mul.w	r3, r6, r8
   1a1e2:	9306      	str	r3, [sp, #24]
   1a1e4:	fb09 f306 	mul.w	r3, r9, r6
   1a1e8:	9307      	str	r3, [sp, #28]
   1a1ea:	f04f 0b00 	mov.w	fp, #0
   1a1ee:	fa0f fa8b 	sxth.w	sl, fp
   1a1f2:	45c2      	cmp	sl, r8
   1a1f4:	db02      	blt.n	1a1fc <trisolve_dbl+0x40>
   1a1f6:	b00b      	add	sp, #44	; 0x2c
   1a1f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a1fc:	9b06      	ldr	r3, [sp, #24]
   1a1fe:	4453      	add	r3, sl
   1a200:	00db      	lsls	r3, r3, #3
   1a202:	9305      	str	r3, [sp, #20]
   1a204:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   1a208:	189f      	adds	r7, r3, r2
   1a20a:	9b07      	ldr	r3, [sp, #28]
   1a20c:	9301      	str	r3, [sp, #4]
   1a20e:	2300      	movs	r3, #0
   1a210:	4635      	mov	r5, r6
   1a212:	9302      	str	r3, [sp, #8]
   1a214:	2d00      	cmp	r5, #0
   1a216:	da02      	bge.n	1a21e <trisolve_dbl+0x62>
   1a218:	f10b 0b01 	add.w	fp, fp, #1
   1a21c:	e7e7      	b.n	1a1ee <trisolve_dbl+0x32>
   1a21e:	9a05      	ldr	r2, [sp, #20]
   1a220:	9b02      	ldr	r3, [sp, #8]
   1a222:	4413      	add	r3, r2
   1a224:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1a226:	4413      	add	r3, r2
   1a228:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a22c:	e9c7 2300 	strd	r2, r3, [r7]
   1a230:	b2ad      	uxth	r5, r5
   1a232:	1c6c      	adds	r4, r5, #1
   1a234:	b224      	sxth	r4, r4
   1a236:	454c      	cmp	r4, r9
   1a238:	db0c      	blt.n	1a254 <trisolve_dbl+0x98>
   1a23a:	9b03      	ldr	r3, [sp, #12]
   1a23c:	441f      	add	r7, r3
   1a23e:	9b01      	ldr	r3, [sp, #4]
   1a240:	eba3 0309 	sub.w	r3, r3, r9
   1a244:	9301      	str	r3, [sp, #4]
   1a246:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   1a24a:	3d01      	subs	r5, #1
   1a24c:	4413      	add	r3, r2
   1a24e:	9302      	str	r3, [sp, #8]
   1a250:	b22d      	sxth	r5, r5
   1a252:	e7df      	b.n	1a214 <trisolve_dbl+0x58>
   1a254:	9b04      	ldr	r3, [sp, #16]
   1a256:	9a08      	ldr	r2, [sp, #32]
   1a258:	fb08 a104 	mla	r1, r8, r4, sl
   1a25c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   1a260:	9b01      	ldr	r3, [sp, #4]
   1a262:	4423      	add	r3, r4
   1a264:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1a268:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a26c:	e9d1 0100 	ldrd	r0, r1, [r1]
   1a270:	f007 f89e 	bl	213b0 <__aeabi_dmul>
   1a274:	4602      	mov	r2, r0
   1a276:	460b      	mov	r3, r1
   1a278:	e9d7 0100 	ldrd	r0, r1, [r7]
   1a27c:	f006 fee0 	bl	21040 <__aeabi_dsub>
   1a280:	3401      	adds	r4, #1
   1a282:	e9c7 0100 	strd	r0, r1, [r7]
   1a286:	e7d5      	b.n	1a234 <trisolve_dbl+0x78>

0001a288 <ud_dbl>:
   1a288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a28c:	ed2d 8b02 	vpush	{d8}
   1a290:	fb03 f503 	mul.w	r5, r3, r3
   1a294:	b091      	sub	sp, #68	; 0x44
   1a296:	460f      	mov	r7, r1
   1a298:	00ed      	lsls	r5, r5, #3
   1a29a:	4606      	mov	r6, r0
   1a29c:	9209      	str	r2, [sp, #36]	; 0x24
   1a29e:	2100      	movs	r1, #0
   1a2a0:	462a      	mov	r2, r5
   1a2a2:	4638      	mov	r0, r7
   1a2a4:	461c      	mov	r4, r3
   1a2a6:	f7f3 fc18 	bl	dada <memset>
   1a2aa:	462a      	mov	r2, r5
   1a2ac:	2100      	movs	r1, #0
   1a2ae:	9809      	ldr	r0, [sp, #36]	; 0x24
   1a2b0:	f7f3 fc13 	bl	dada <memset>
   1a2b4:	43e3      	mvns	r3, r4
   1a2b6:	00db      	lsls	r3, r3, #3
   1a2b8:	1e65      	subs	r5, r4, #1
   1a2ba:	b22d      	sxth	r5, r5
   1a2bc:	9306      	str	r3, [sp, #24]
   1a2be:	1c63      	adds	r3, r4, #1
   1a2c0:	930d      	str	r3, [sp, #52]	; 0x34
   1a2c2:	436b      	muls	r3, r5
   1a2c4:	00da      	lsls	r2, r3, #3
   1a2c6:	00d9      	lsls	r1, r3, #3
   1a2c8:	3301      	adds	r3, #1
   1a2ca:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
   1a2ce:	9308      	str	r3, [sp, #32]
   1a2d0:	f06f 0307 	mvn.w	r3, #7
   1a2d4:	4363      	muls	r3, r4
   1a2d6:	920b      	str	r2, [sp, #44]	; 0x2c
   1a2d8:	ed9f 8b51 	vldr	d8, [pc, #324]	; 1a420 <ud_dbl+0x198>
   1a2dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1a2de:	930c      	str	r3, [sp, #48]	; 0x30
   1a2e0:	fb05 fa04 	mul.w	sl, r5, r4
   1a2e4:	187b      	adds	r3, r7, r1
   1a2e6:	f04f 0900 	mov.w	r9, #0
   1a2ea:	eb02 0b01 	add.w	fp, r2, r1
   1a2ee:	f8cd a01c 	str.w	sl, [sp, #28]
   1a2f2:	930f      	str	r3, [sp, #60]	; 0x3c
   1a2f4:	f8cd 9010 	str.w	r9, [sp, #16]
   1a2f8:	2d00      	cmp	r5, #0
   1a2fa:	da0d      	bge.n	1a318 <ud_dbl+0x90>
   1a2fc:	2000      	movs	r0, #0
   1a2fe:	f04f 0800 	mov.w	r8, #0
   1a302:	f04f 0900 	mov.w	r9, #0
   1a306:	b201      	sxth	r1, r0
   1a308:	428c      	cmp	r4, r1
   1a30a:	dd7f      	ble.n	1a40c <ud_dbl+0x184>
   1a30c:	fb04 f301 	mul.w	r3, r4, r1
   1a310:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
   1a314:	2200      	movs	r2, #0
   1a316:	e074      	b.n	1a402 <ud_dbl+0x17a>
   1a318:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1a31a:	f8cd a014 	str.w	sl, [sp, #20]
   1a31e:	444b      	add	r3, r9
   1a320:	9303      	str	r3, [sp, #12]
   1a322:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a324:	444b      	add	r3, r9
   1a326:	18fb      	adds	r3, r7, r3
   1a328:	930e      	str	r3, [sp, #56]	; 0x38
   1a32a:	9b08      	ldr	r3, [sp, #32]
   1a32c:	930a      	str	r3, [sp, #40]	; 0x28
   1a32e:	46a8      	mov	r8, r5
   1a330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a332:	ed33 7b02 	vldmdb	r3!, {d7}
   1a336:	ed8d 7b00 	vstr	d7, [sp]
   1a33a:	930a      	str	r3, [sp, #40]	; 0x28
   1a33c:	462e      	mov	r6, r5
   1a33e:	42b4      	cmp	r4, r6
   1a340:	dc30      	bgt.n	1a3a4 <ud_dbl+0x11c>
   1a342:	4545      	cmp	r5, r8
   1a344:	d150      	bne.n	1a3e8 <ud_dbl+0x160>
   1a346:	4b38      	ldr	r3, [pc, #224]	; (1a428 <ud_dbl+0x1a0>)
   1a348:	2200      	movs	r2, #0
   1a34a:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a34e:	f007 faab 	bl	218a8 <__aeabi_dcmple>
   1a352:	2800      	cmp	r0, #0
   1a354:	9b04      	ldr	r3, [sp, #16]
   1a356:	ed9d 7b00 	vldr	d7, [sp]
   1a35a:	bf18      	it	ne
   1a35c:	2301      	movne	r3, #1
   1a35e:	9304      	str	r3, [sp, #16]
   1a360:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1a362:	ed8b 7b00 	vstr	d7, [fp]
   1a366:	ed83 8b00 	vstr	d8, [r3]
   1a36a:	9b03      	ldr	r3, [sp, #12]
   1a36c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1a36e:	4413      	add	r3, r2
   1a370:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   1a374:	9303      	str	r3, [sp, #12]
   1a376:	9b05      	ldr	r3, [sp, #20]
   1a378:	fa0f f888 	sxth.w	r8, r8
   1a37c:	1b1b      	subs	r3, r3, r4
   1a37e:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   1a382:	9305      	str	r3, [sp, #20]
   1a384:	d1d4      	bne.n	1a330 <ud_dbl+0xa8>
   1a386:	9b06      	ldr	r3, [sp, #24]
   1a388:	9a06      	ldr	r2, [sp, #24]
   1a38a:	449b      	add	fp, r3
   1a38c:	9b08      	ldr	r3, [sp, #32]
   1a38e:	4413      	add	r3, r2
   1a390:	9308      	str	r3, [sp, #32]
   1a392:	9b07      	ldr	r3, [sp, #28]
   1a394:	3d01      	subs	r5, #1
   1a396:	1b1b      	subs	r3, r3, r4
   1a398:	b22d      	sxth	r5, r5
   1a39a:	ebaa 0a04 	sub.w	sl, sl, r4
   1a39e:	9307      	str	r3, [sp, #28]
   1a3a0:	4491      	add	r9, r2
   1a3a2:	e7a9      	b.n	1a2f8 <ud_dbl+0x70>
   1a3a4:	9b05      	ldr	r3, [sp, #20]
   1a3a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1a3a8:	1999      	adds	r1, r3, r6
   1a3aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1a3ac:	4373      	muls	r3, r6
   1a3ae:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
   1a3b2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1a3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a3ba:	e9d1 0100 	ldrd	r0, r1, [r1]
   1a3be:	f006 fff7 	bl	213b0 <__aeabi_dmul>
   1a3c2:	9b07      	ldr	r3, [sp, #28]
   1a3c4:	4433      	add	r3, r6
   1a3c6:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
   1a3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a3ce:	f006 ffef 	bl	213b0 <__aeabi_dmul>
   1a3d2:	4602      	mov	r2, r0
   1a3d4:	460b      	mov	r3, r1
   1a3d6:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a3da:	f006 fe31 	bl	21040 <__aeabi_dsub>
   1a3de:	3601      	adds	r6, #1
   1a3e0:	e9cd 0100 	strd	r0, r1, [sp]
   1a3e4:	b236      	sxth	r6, r6
   1a3e6:	e7aa      	b.n	1a33e <ud_dbl+0xb6>
   1a3e8:	e9db 2300 	ldrd	r2, r3, [fp]
   1a3ec:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a3f0:	f007 f908 	bl	21604 <__aeabi_ddiv>
   1a3f4:	9b03      	ldr	r3, [sp, #12]
   1a3f6:	e9c3 0100 	strd	r0, r1, [r3]
   1a3fa:	e7b6      	b.n	1a36a <ud_dbl+0xe2>
   1a3fc:	e8e3 8902 	strd	r8, r9, [r3], #8
   1a400:	3201      	adds	r2, #1
   1a402:	b215      	sxth	r5, r2
   1a404:	42a9      	cmp	r1, r5
   1a406:	dcf9      	bgt.n	1a3fc <ud_dbl+0x174>
   1a408:	3001      	adds	r0, #1
   1a40a:	e77c      	b.n	1a306 <ud_dbl+0x7e>
   1a40c:	9b04      	ldr	r3, [sp, #16]
   1a40e:	f04f 0000 	mov.w	r0, #0
   1a412:	f363 0000 	bfi	r0, r3, #0, #1
   1a416:	b011      	add	sp, #68	; 0x44
   1a418:	ecbd 8b02 	vpop	{d8}
   1a41c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a420:	00000000 	.word	0x00000000
   1a424:	3ff00000 	.word	0x3ff00000
   1a428:	3cb00000 	.word	0x3cb00000
   1a42c:	00000000 	.word	0x00000000

0001a430 <thornton_dbl>:
   1a430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a434:	ed2d 8b02 	vpush	{d8}
   1a438:	b09d      	sub	sp, #116	; 0x74
   1a43a:	af00      	add	r7, sp, #0
   1a43c:	f8b7 b0a8 	ldrh.w	fp, [r7, #168]	; 0xa8
   1a440:	603b      	str	r3, [r7, #0]
   1a442:	ea4f 03cb 	mov.w	r3, fp, lsl #3
   1a446:	6578      	str	r0, [r7, #84]	; 0x54
   1a448:	667b      	str	r3, [r7, #100]	; 0x64
   1a44a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
   1a44e:	6279      	str	r1, [r7, #36]	; 0x24
   1a450:	2300      	movs	r3, #0
   1a452:	637a      	str	r2, [r7, #52]	; 0x34
   1a454:	4619      	mov	r1, r3
   1a456:	b28a      	uxth	r2, r1
   1a458:	4593      	cmp	fp, r2
   1a45a:	d856      	bhi.n	1a50a <thornton_dbl+0xda>
   1a45c:	f10b 34ff 	add.w	r4, fp, #4294967295	; 0xffffffff
   1a460:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1a462:	b224      	sxth	r4, r4
   1a464:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1a468:	64fb      	str	r3, [r7, #76]	; 0x4c
   1a46a:	65fc      	str	r4, [r7, #92]	; 0x5c
   1a46c:	2300      	movs	r3, #0
   1a46e:	65bb      	str	r3, [r7, #88]	; 0x58
   1a470:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
   1a474:	455b      	cmp	r3, fp
   1a476:	db4e      	blt.n	1a516 <thornton_dbl+0xe6>
   1a478:	fb0b f304 	mul.w	r3, fp, r4
   1a47c:	643b      	str	r3, [r7, #64]	; 0x40
   1a47e:	ea6f 030b 	mvn.w	r3, fp
   1a482:	00db      	lsls	r3, r3, #3
   1a484:	60bb      	str	r3, [r7, #8]
   1a486:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   1a48a:	f10b 0301 	add.w	r3, fp, #1
   1a48e:	63bb      	str	r3, [r7, #56]	; 0x38
   1a490:	4363      	muls	r3, r4
   1a492:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1a496:	63fb      	str	r3, [r7, #60]	; 0x3c
   1a498:	f06f 0307 	mvn.w	r3, #7
   1a49c:	fb03 f30b 	mul.w	r3, r3, fp
   1a4a0:	607b      	str	r3, [r7, #4]
   1a4a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1a4a4:	4363      	muls	r3, r4
   1a4a6:	65bb      	str	r3, [r7, #88]	; 0x58
   1a4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1a4aa:	00db      	lsls	r3, r3, #3
   1a4ac:	62bb      	str	r3, [r7, #40]	; 0x28
   1a4ae:	2300      	movs	r3, #0
   1a4b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   1a4b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1a4b4:	330e      	adds	r3, #14
   1a4b6:	08db      	lsrs	r3, r3, #3
   1a4b8:	ed9f 8bb1 	vldr	d8, [pc, #708]	; 1a780 <thornton_dbl+0x350>
   1a4bc:	00db      	lsls	r3, r3, #3
   1a4be:	653b      	str	r3, [r7, #80]	; 0x50
   1a4c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1a4c2:	041b      	lsls	r3, r3, #16
   1a4c4:	d56b      	bpl.n	1a59e <thornton_dbl+0x16e>
   1a4c6:	ed9f 6bae 	vldr	d6, [pc, #696]	; 1a780 <thornton_dbl+0x350>
   1a4ca:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 1a78c <thornton_dbl+0x35c>
   1a4ce:	2100      	movs	r1, #0
   1a4d0:	f04f 0800 	mov.w	r8, #0
   1a4d4:	b20a      	sxth	r2, r1
   1a4d6:	455a      	cmp	r2, fp
   1a4d8:	f2c0 81a3 	blt.w	1a822 <thornton_dbl+0x3f2>
   1a4dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1a4de:	f04f 0000 	mov.w	r0, #0
   1a4e2:	f363 0000 	bfi	r0, r3, #0, #1
   1a4e6:	3774      	adds	r7, #116	; 0x74
   1a4e8:	46bd      	mov	sp, r7
   1a4ea:	ecbd 8b02 	vpop	{d8}
   1a4ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a4f2:	e8f5 8902 	ldrd	r8, r9, [r5], #8
   1a4f6:	e8e4 8902 	strd	r8, r9, [r4], #8
   1a4fa:	3201      	adds	r2, #1
   1a4fc:	b296      	uxth	r6, r2
   1a4fe:	45b3      	cmp	fp, r6
   1a500:	d8f7      	bhi.n	1a4f2 <thornton_dbl+0xc2>
   1a502:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   1a504:	3101      	adds	r1, #1
   1a506:	4413      	add	r3, r2
   1a508:	e7a5      	b.n	1a456 <thornton_dbl+0x26>
   1a50a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   1a50e:	18c5      	adds	r5, r0, r3
   1a510:	18d4      	adds	r4, r2, r3
   1a512:	2200      	movs	r2, #0
   1a514:	e7f2      	b.n	1a4fc <thornton_dbl+0xcc>
   1a516:	fb0b f303 	mul.w	r3, fp, r3
   1a51a:	191d      	adds	r5, r3, r4
   1a51c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   1a520:	3501      	adds	r5, #1
   1a522:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
   1a526:	663a      	str	r2, [r7, #96]	; 0x60
   1a528:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   1a52c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1a530:	653b      	str	r3, [r7, #80]	; 0x50
   1a532:	4626      	mov	r6, r4
   1a534:	f04f 0800 	mov.w	r8, #0
   1a538:	2e00      	cmp	r6, #0
   1a53a:	da02      	bge.n	1a542 <thornton_dbl+0x112>
   1a53c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1a53e:	3301      	adds	r3, #1
   1a540:	e795      	b.n	1a46e <thornton_dbl+0x3e>
   1a542:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1a544:	ed13 7b02 	vldr	d7, [r3, #-8]
   1a548:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1a54a:	ed87 7b1a 	vstr	d7, [r7, #104]	; 0x68
   1a54e:	eb08 0a03 	add.w	sl, r8, r3
   1a552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1a554:	f04f 0900 	mov.w	r9, #0
   1a558:	461d      	mov	r5, r3
   1a55a:	fa0f f389 	sxth.w	r3, r9
   1a55e:	429e      	cmp	r6, r3
   1a560:	dc0a      	bgt.n	1a578 <thornton_dbl+0x148>
   1a562:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
   1a566:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1a568:	ed23 7b02 	vstmdb	r3!, {d7}
   1a56c:	3e01      	subs	r6, #1
   1a56e:	663b      	str	r3, [r7, #96]	; 0x60
   1a570:	b236      	sxth	r6, r6
   1a572:	f1a8 0808 	sub.w	r8, r8, #8
   1a576:	e7df      	b.n	1a538 <thornton_dbl+0x108>
   1a578:	e9da 2300 	ldrd	r2, r3, [sl]
   1a57c:	e8f5 0102 	ldrd	r0, r1, [r5], #8
   1a580:	f006 ff16 	bl	213b0 <__aeabi_dmul>
   1a584:	460b      	mov	r3, r1
   1a586:	4602      	mov	r2, r0
   1a588:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
   1a58c:	f006 fd5a 	bl	21044 <__adddf3>
   1a590:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1a592:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
   1a596:	f109 0901 	add.w	r9, r9, #1
   1a59a:	449a      	add	sl, r3
   1a59c:	e7dd      	b.n	1a55a <thornton_dbl+0x12a>
   1a59e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1a5a0:	f8c7 d020 	str.w	sp, [r7, #32]
   1a5a4:	ebad 0d03 	sub.w	sp, sp, r3
   1a5a8:	f8c7 d048 	str.w	sp, [r7, #72]	; 0x48
   1a5ac:	ebad 0d03 	sub.w	sp, sp, r3
   1a5b0:	f8c7 d044 	str.w	sp, [r7, #68]	; 0x44
   1a5b4:	ebad 0d03 	sub.w	sp, sp, r3
   1a5b8:	f8c7 d030 	str.w	sp, [r7, #48]	; 0x30
   1a5bc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   1a5c0:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   1a5c2:	6a7d      	ldr	r5, [r7, #36]	; 0x24
   1a5c4:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
   1a5c8:	ebad 0d03 	sub.w	sp, sp, r3
   1a5cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1a5ce:	f8c7 d02c 	str.w	sp, [r7, #44]	; 0x2c
   1a5d2:	4413      	add	r3, r2
   1a5d4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   1a5d6:	663b      	str	r3, [r7, #96]	; 0x60
   1a5d8:	ed87 8b1a 	vstr	d8, [r7, #104]	; 0x68
   1a5dc:	4623      	mov	r3, r4
   1a5de:	4413      	add	r3, r2
   1a5e0:	6e3e      	ldr	r6, [r7, #96]	; 0x60
   1a5e2:	60fb      	str	r3, [r7, #12]
   1a5e4:	68fb      	ldr	r3, [r7, #12]
   1a5e6:	429c      	cmp	r4, r3
   1a5e8:	d137      	bne.n	1a65a <thornton_dbl+0x22a>
   1a5ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a5ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
   1a5ee:	6c7c      	ldr	r4, [r7, #68]	; 0x44
   1a5f0:	683d      	ldr	r5, [r7, #0]
   1a5f2:	f8d7 a02c 	ldr.w	sl, [r7, #44]	; 0x2c
   1a5f6:	189e      	adds	r6, r3, r2
   1a5f8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   1a5fa:	4623      	mov	r3, r4
   1a5fc:	4413      	add	r3, r2
   1a5fe:	60fb      	str	r3, [r7, #12]
   1a600:	68fb      	ldr	r3, [r7, #12]
   1a602:	429c      	cmp	r4, r3
   1a604:	d146      	bne.n	1a694 <thornton_dbl+0x264>
   1a606:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
   1a60a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1a60c:	ec51 0b17 	vmov	r0, r1, d7
   1a610:	ed83 7b00 	vstr	d7, [r3]
   1a614:	2200      	movs	r2, #0
   1a616:	4b5c      	ldr	r3, [pc, #368]	; (1a788 <thornton_dbl+0x358>)
   1a618:	f007 f946 	bl	218a8 <__aeabi_dcmple>
   1a61c:	2800      	cmp	r0, #0
   1a61e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1a620:	495a      	ldr	r1, [pc, #360]	; (1a78c <thornton_dbl+0x35c>)
   1a622:	bf18      	it	ne
   1a624:	2301      	movne	r3, #1
   1a626:	64fb      	str	r3, [r7, #76]	; 0x4c
   1a628:	2000      	movs	r0, #0
   1a62a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
   1a62e:	f006 ffe9 	bl	21604 <__aeabi_ddiv>
   1a632:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1a634:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1a636:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
   1a63a:	fa12 fa83 	uxtah	sl, r2, r3
   1a63e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
   1a642:	2600      	movs	r6, #0
   1a644:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
   1a648:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1a64a:	4553      	cmp	r3, sl
   1a64c:	f000 80d7 	beq.w	1a7fe <thornton_dbl+0x3ce>
   1a650:	f04f 0800 	mov.w	r8, #0
   1a654:	ec55 4b18 	vmov	r4, r5, d8
   1a658:	e04f      	b.n	1a6fa <thornton_dbl+0x2ca>
   1a65a:	e8f6 8902 	ldrd	r8, r9, [r6], #8
   1a65e:	e9d5 2300 	ldrd	r2, r3, [r5]
   1a662:	e8e4 8902 	strd	r8, r9, [r4], #8
   1a666:	4640      	mov	r0, r8
   1a668:	4649      	mov	r1, r9
   1a66a:	f006 fea1 	bl	213b0 <__aeabi_dmul>
   1a66e:	4602      	mov	r2, r0
   1a670:	460b      	mov	r3, r1
   1a672:	e8ea 2302 	strd	r2, r3, [sl], #8
   1a676:	4640      	mov	r0, r8
   1a678:	4649      	mov	r1, r9
   1a67a:	f006 fe99 	bl	213b0 <__aeabi_dmul>
   1a67e:	460b      	mov	r3, r1
   1a680:	4602      	mov	r2, r0
   1a682:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
   1a686:	f006 fcdd 	bl	21044 <__adddf3>
   1a68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a68c:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
   1a690:	441d      	add	r5, r3
   1a692:	e7a7      	b.n	1a5e4 <thornton_dbl+0x1b4>
   1a694:	e8f6 8902 	ldrd	r8, r9, [r6], #8
   1a698:	e9d5 2300 	ldrd	r2, r3, [r5]
   1a69c:	e8e4 8902 	strd	r8, r9, [r4], #8
   1a6a0:	4640      	mov	r0, r8
   1a6a2:	4649      	mov	r1, r9
   1a6a4:	f006 fe84 	bl	213b0 <__aeabi_dmul>
   1a6a8:	4602      	mov	r2, r0
   1a6aa:	460b      	mov	r3, r1
   1a6ac:	e8ea 2302 	strd	r2, r3, [sl], #8
   1a6b0:	4640      	mov	r0, r8
   1a6b2:	4649      	mov	r1, r9
   1a6b4:	f006 fe7c 	bl	213b0 <__aeabi_dmul>
   1a6b8:	460b      	mov	r3, r1
   1a6ba:	4602      	mov	r2, r0
   1a6bc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
   1a6c0:	f006 fcc0 	bl	21044 <__adddf3>
   1a6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a6c6:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
   1a6ca:	441d      	add	r5, r3
   1a6cc:	e798      	b.n	1a600 <thornton_dbl+0x1d0>
   1a6ce:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   1a6d2:	18f1      	adds	r1, r6, r3
   1a6d4:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
   1a6d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a6da:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1a6de:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a6e2:	e9d1 0100 	ldrd	r0, r1, [r1]
   1a6e6:	f006 fe63 	bl	213b0 <__aeabi_dmul>
   1a6ea:	4602      	mov	r2, r0
   1a6ec:	460b      	mov	r3, r1
   1a6ee:	4620      	mov	r0, r4
   1a6f0:	4629      	mov	r1, r5
   1a6f2:	f006 fca7 	bl	21044 <__adddf3>
   1a6f6:	4604      	mov	r4, r0
   1a6f8:	460d      	mov	r5, r1
   1a6fa:	fa0f f388 	sxth.w	r3, r8
   1a6fe:	455b      	cmp	r3, fp
   1a700:	f108 0801 	add.w	r8, r8, #1
   1a704:	dbe3      	blt.n	1a6ce <thornton_dbl+0x29e>
   1a706:	f04f 0800 	mov.w	r8, #0
   1a70a:	fa0f f388 	sxth.w	r3, r8
   1a70e:	455b      	cmp	r3, fp
   1a710:	f108 0801 	add.w	r8, r8, #1
   1a714:	db1d      	blt.n	1a752 <thornton_dbl+0x322>
   1a716:	4620      	mov	r0, r4
   1a718:	4629      	mov	r1, r5
   1a71a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
   1a71e:	f006 fe47 	bl	213b0 <__aeabi_dmul>
   1a722:	f04f 0900 	mov.w	r9, #0
   1a726:	4604      	mov	r4, r0
   1a728:	460d      	mov	r5, r1
   1a72a:	fa0f f389 	sxth.w	r3, r9
   1a72e:	455b      	cmp	r3, fp
   1a730:	f109 0901 	add.w	r9, r9, #1
   1a734:	db2c      	blt.n	1a790 <thornton_dbl+0x360>
   1a736:	f04f 0900 	mov.w	r9, #0
   1a73a:	fa0f f389 	sxth.w	r3, r9
   1a73e:	455b      	cmp	r3, fp
   1a740:	f109 0901 	add.w	r9, r9, #1
   1a744:	db40      	blt.n	1a7c8 <thornton_dbl+0x398>
   1a746:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1a748:	e8e3 4502 	strd	r4, r5, [r3], #8
   1a74c:	445e      	add	r6, fp
   1a74e:	663b      	str	r3, [r7, #96]	; 0x60
   1a750:	e77a      	b.n	1a648 <thornton_dbl+0x218>
   1a752:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1a754:	18f1      	adds	r1, r6, r3
   1a756:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
   1a75a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1a75c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1a760:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a764:	e9d1 0100 	ldrd	r0, r1, [r1]
   1a768:	f006 fe22 	bl	213b0 <__aeabi_dmul>
   1a76c:	4602      	mov	r2, r0
   1a76e:	460b      	mov	r3, r1
   1a770:	4620      	mov	r0, r4
   1a772:	4629      	mov	r1, r5
   1a774:	f006 fc66 	bl	21044 <__adddf3>
   1a778:	4604      	mov	r4, r0
   1a77a:	460d      	mov	r5, r1
   1a77c:	e7c5      	b.n	1a70a <thornton_dbl+0x2da>
   1a77e:	bf00      	nop
	...
   1a788:	3cb00000 	.word	0x3cb00000
   1a78c:	3ff00000 	.word	0x3ff00000
   1a790:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   1a794:	61bc      	str	r4, [r7, #24]
   1a796:	eb06 0803 	add.w	r8, r6, r3
   1a79a:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
   1a79e:	6cba      	ldr	r2, [r7, #72]	; 0x48
   1a7a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1a7a4:	f105 4200 	add.w	r2, r5, #2147483648	; 0x80000000
   1a7a8:	61fa      	str	r2, [r7, #28]
   1a7aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   1a7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a7b2:	f006 fdfd 	bl	213b0 <__aeabi_dmul>
   1a7b6:	4602      	mov	r2, r0
   1a7b8:	460b      	mov	r3, r1
   1a7ba:	e9d8 0100 	ldrd	r0, r1, [r8]
   1a7be:	f006 fc41 	bl	21044 <__adddf3>
   1a7c2:	e9c8 0100 	strd	r0, r1, [r8]
   1a7c6:	e7b0      	b.n	1a72a <thornton_dbl+0x2fa>
   1a7c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1a7ca:	613c      	str	r4, [r7, #16]
   1a7cc:	eb06 0803 	add.w	r8, r6, r3
   1a7d0:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
   1a7d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   1a7d6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1a7da:	f105 4200 	add.w	r2, r5, #2147483648	; 0x80000000
   1a7de:	617a      	str	r2, [r7, #20]
   1a7e0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   1a7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a7e8:	f006 fde2 	bl	213b0 <__aeabi_dmul>
   1a7ec:	4602      	mov	r2, r0
   1a7ee:	460b      	mov	r3, r1
   1a7f0:	e9d8 0100 	ldrd	r0, r1, [r8]
   1a7f4:	f006 fc26 	bl	21044 <__adddf3>
   1a7f8:	e9c8 0100 	strd	r0, r1, [r8]
   1a7fc:	e79d      	b.n	1a73a <thornton_dbl+0x30a>
   1a7fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1a800:	68ba      	ldr	r2, [r7, #8]
   1a802:	f8d7 d020 	ldr.w	sp, [r7, #32]
   1a806:	3b01      	subs	r3, #1
   1a808:	65fb      	str	r3, [r7, #92]	; 0x5c
   1a80a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a80c:	eba3 030b 	sub.w	r3, r3, fp
   1a810:	643b      	str	r3, [r7, #64]	; 0x40
   1a812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1a814:	4413      	add	r3, r2
   1a816:	63fb      	str	r3, [r7, #60]	; 0x3c
   1a818:	687a      	ldr	r2, [r7, #4]
   1a81a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1a81c:	4413      	add	r3, r2
   1a81e:	65bb      	str	r3, [r7, #88]	; 0x58
   1a820:	e64e      	b.n	1a4c0 <thornton_dbl+0x90>
   1a822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1a824:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
   1a828:	4353      	muls	r3, r2
   1a82a:	00db      	lsls	r3, r3, #3
   1a82c:	4418      	add	r0, r3
   1a82e:	e9d0 4500 	ldrd	r4, r5, [r0]
   1a832:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1a834:	4418      	add	r0, r3
   1a836:	e9c0 4500 	strd	r4, r5, [r0]
   1a83a:	6d78      	ldr	r0, [r7, #84]	; 0x54
   1a83c:	4403      	add	r3, r0
   1a83e:	e9c3 8900 	strd	r8, r9, [r3]
   1a842:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
   1a846:	fb0b f302 	mul.w	r3, fp, r2
   1a84a:	00db      	lsls	r3, r3, #3
   1a84c:	18c5      	adds	r5, r0, r3
   1a84e:	6d78      	ldr	r0, [r7, #84]	; 0x54
   1a850:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
   1a854:	4403      	add	r3, r0
   1a856:	2000      	movs	r0, #0
   1a858:	b206      	sxth	r6, r0
   1a85a:	42b2      	cmp	r2, r6
   1a85c:	dc01      	bgt.n	1a862 <thornton_dbl+0x432>
   1a85e:	3101      	adds	r1, #1
   1a860:	e638      	b.n	1a4d4 <thornton_dbl+0xa4>
   1a862:	ecb5 7b02 	vldmia	r5!, {d7}
   1a866:	6e7e      	ldr	r6, [r7, #100]	; 0x64
   1a868:	ed84 7b00 	vstr	d7, [r4]
   1a86c:	3001      	adds	r0, #1
   1a86e:	eca3 6b02 	vstmia	r3!, {d6}
   1a872:	4434      	add	r4, r6
   1a874:	e7f0      	b.n	1a858 <thornton_dbl+0x428>
   1a876:	bf00      	nop

0001a878 <bierman_dbl>:
   1a878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a87c:	ed2d 8b04 	vpush	{d8-d9}
   1a880:	eeb0 8a40 	vmov.f32	s16, s0
   1a884:	eef0 8a60 	vmov.f32	s17, s1
   1a888:	b095      	sub	sp, #84	; 0x54
   1a88a:	af00      	add	r7, sp, #0
   1a88c:	4682      	mov	sl, r0
   1a88e:	62bb      	str	r3, [r7, #40]	; 0x28
   1a890:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
   1a894:	637b      	str	r3, [r7, #52]	; 0x34
   1a896:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
   1a89a:	f10b 030e 	add.w	r3, fp, #14
   1a89e:	08db      	lsrs	r3, r3, #3
   1a8a0:	00db      	lsls	r3, r3, #3
   1a8a2:	ebad 0d03 	sub.w	sp, sp, r3
   1a8a6:	466c      	mov	r4, sp
   1a8a8:	6079      	str	r1, [r7, #4]
   1a8aa:	ebad 0d03 	sub.w	sp, sp, r3
   1a8ae:	61ba      	str	r2, [r7, #24]
   1a8b0:	2000      	movs	r0, #0
   1a8b2:	ec53 2b11 	vmov	r2, r3, d1
   1a8b6:	4970      	ldr	r1, [pc, #448]	; (1aa78 <bierman_dbl+0x200>)
   1a8b8:	f8c7 d044 	str.w	sp, [r7, #68]	; 0x44
   1a8bc:	ed87 1b0e 	vstr	d1, [r7, #56]	; 0x38
   1a8c0:	f006 fea0 	bl	21604 <__aeabi_ddiv>
   1a8c4:	ed9f 9b6a 	vldr	d9, [pc, #424]	; 1aa70 <bierman_dbl+0x1f8>
   1a8c8:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
   1a8cc:	eb0a 030b 	add.w	r3, sl, fp
   1a8d0:	627c      	str	r4, [r7, #36]	; 0x24
   1a8d2:	643b      	str	r3, [r7, #64]	; 0x40
   1a8d4:	4626      	mov	r6, r4
   1a8d6:	2500      	movs	r5, #0
   1a8d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1a8da:	b2ab      	uxth	r3, r5
   1a8dc:	429a      	cmp	r2, r3
   1a8de:	d820      	bhi.n	1a922 <bierman_dbl+0xaa>
   1a8e0:	f10b 0308 	add.w	r3, fp, #8
   1a8e4:	61fb      	str	r3, [r7, #28]
   1a8e6:	f8d7 a028 	ldr.w	sl, [r7, #40]	; 0x28
   1a8ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1a8ec:	633b      	str	r3, [r7, #48]	; 0x30
   1a8ee:	eb04 060b 	add.w	r6, r4, fp
   1a8f2:	461d      	mov	r5, r3
   1a8f4:	46d0      	mov	r8, sl
   1a8f6:	42b4      	cmp	r4, r6
   1a8f8:	d12e      	bne.n	1a958 <bierman_dbl+0xe0>
   1a8fa:	2300      	movs	r3, #0
   1a8fc:	6c7c      	ldr	r4, [r7, #68]	; 0x44
   1a8fe:	643b      	str	r3, [r7, #64]	; 0x40
   1a900:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
   1a904:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1a906:	429a      	cmp	r2, r3
   1a908:	d831      	bhi.n	1a96e <bierman_dbl+0xf6>
   1a90a:	687e      	ldr	r6, [r7, #4]
   1a90c:	eb06 0a0b 	add.w	sl, r6, fp
   1a910:	4556      	cmp	r6, sl
   1a912:	f040 8095 	bne.w	1aa40 <bierman_dbl+0x1c8>
   1a916:	3754      	adds	r7, #84	; 0x54
   1a918:	46bd      	mov	sp, r7
   1a91a:	ecbd 8b04 	vpop	{d8-d9}
   1a91e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a922:	69bb      	ldr	r3, [r7, #24]
   1a924:	eca6 9b02 	vstmia	r6!, {d9}
   1a928:	eb03 09c5 	add.w	r9, r3, r5, lsl #3
   1a92c:	46d0      	mov	r8, sl
   1a92e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a930:	4598      	cmp	r8, r3
   1a932:	d101      	bne.n	1a938 <bierman_dbl+0xc0>
   1a934:	3501      	adds	r5, #1
   1a936:	e7cf      	b.n	1a8d8 <bierman_dbl+0x60>
   1a938:	e9d9 2300 	ldrd	r2, r3, [r9]
   1a93c:	e8f8 0102 	ldrd	r0, r1, [r8], #8
   1a940:	f006 fd36 	bl	213b0 <__aeabi_dmul>
   1a944:	4602      	mov	r2, r0
   1a946:	460b      	mov	r3, r1
   1a948:	e956 0102 	ldrd	r0, r1, [r6, #-8]
   1a94c:	f006 fb7a 	bl	21044 <__adddf3>
   1a950:	44d9      	add	r9, fp
   1a952:	e946 0102 	strd	r0, r1, [r6, #-8]
   1a956:	e7ea      	b.n	1a92e <bierman_dbl+0xb6>
   1a958:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   1a95c:	e9d8 0100 	ldrd	r0, r1, [r8]
   1a960:	f006 fd26 	bl	213b0 <__aeabi_dmul>
   1a964:	69fb      	ldr	r3, [r7, #28]
   1a966:	e8e5 0102 	strd	r0, r1, [r5], #8
   1a96a:	4498      	add	r8, r3
   1a96c:	e7c3      	b.n	1a8f6 <bierman_dbl+0x7e>
   1a96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a970:	e8f3 8902 	ldrd	r8, r9, [r3], #8
   1a974:	627b      	str	r3, [r7, #36]	; 0x24
   1a976:	f104 0308 	add.w	r3, r4, #8
   1a97a:	623b      	str	r3, [r7, #32]
   1a97c:	4640      	mov	r0, r8
   1a97e:	e9d4 2300 	ldrd	r2, r3, [r4]
   1a982:	4649      	mov	r1, r9
   1a984:	f006 fd14 	bl	213b0 <__aeabi_dmul>
   1a988:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
   1a98c:	f006 fb5a 	bl	21044 <__adddf3>
   1a990:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   1a994:	617b      	str	r3, [r7, #20]
   1a996:	f8c7 8010 	str.w	r8, [r7, #16]
   1a99a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
   1a99e:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
   1a9a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   1a9a6:	f006 fd03 	bl	213b0 <__aeabi_dmul>
   1a9aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   1a9ae:	e9c7 0102 	strd	r0, r1, [r7, #8]
   1a9b2:	2000      	movs	r0, #0
   1a9b4:	4930      	ldr	r1, [pc, #192]	; (1aa78 <bierman_dbl+0x200>)
   1a9b6:	f006 fe25 	bl	21604 <__aeabi_ddiv>
   1a9ba:	4602      	mov	r2, r0
   1a9bc:	460b      	mov	r3, r1
   1a9be:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
   1a9c2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
   1a9c6:	f006 fcf3 	bl	213b0 <__aeabi_dmul>
   1a9ca:	4602      	mov	r2, r0
   1a9cc:	460b      	mov	r3, r1
   1a9ce:	e9da 0100 	ldrd	r0, r1, [sl]
   1a9d2:	f006 fced 	bl	213b0 <__aeabi_dmul>
   1a9d6:	69bb      	ldr	r3, [r7, #24]
   1a9d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1a9da:	6c7d      	ldr	r5, [r7, #68]	; 0x44
   1a9dc:	e9ca 0100 	strd	r0, r1, [sl]
   1a9e0:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
   1a9e4:	42a5      	cmp	r5, r4
   1a9e6:	d10a      	bne.n	1a9fe <bierman_dbl+0x186>
   1a9e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a9ea:	6a3c      	ldr	r4, [r7, #32]
   1a9ec:	3301      	adds	r3, #1
   1a9ee:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
   1a9f2:	643b      	str	r3, [r7, #64]	; 0x40
   1a9f4:	69fb      	ldr	r3, [r7, #28]
   1a9f6:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
   1a9fa:	449a      	add	sl, r3
   1a9fc:	e780      	b.n	1a900 <bierman_dbl+0x88>
   1a9fe:	e9d5 8900 	ldrd	r8, r9, [r5]
   1aa02:	ed96 7b00 	vldr	d7, [r6]
   1aa06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1aa0a:	4640      	mov	r0, r8
   1aa0c:	4649      	mov	r1, r9
   1aa0e:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
   1aa12:	f006 fccd 	bl	213b0 <__aeabi_dmul>
   1aa16:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
   1aa1a:	f006 fb13 	bl	21044 <__adddf3>
   1aa1e:	6a3b      	ldr	r3, [r7, #32]
   1aa20:	e9c6 0100 	strd	r0, r1, [r6]
   1aa24:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   1aa28:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
   1aa2c:	f006 fcc0 	bl	213b0 <__aeabi_dmul>
   1aa30:	4642      	mov	r2, r8
   1aa32:	464b      	mov	r3, r9
   1aa34:	f006 fb06 	bl	21044 <__adddf3>
   1aa38:	445e      	add	r6, fp
   1aa3a:	e8e5 0102 	strd	r0, r1, [r5], #8
   1aa3e:	e7d1      	b.n	1a9e4 <bierman_dbl+0x16c>
   1aa40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1aa42:	e8f3 8902 	ldrd	r8, r9, [r3], #8
   1aa46:	e9d6 4500 	ldrd	r4, r5, [r6]
   1aa4a:	633b      	str	r3, [r7, #48]	; 0x30
   1aa4c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
   1aa50:	ec53 2b18 	vmov	r2, r3, d8
   1aa54:	f006 fcac 	bl	213b0 <__aeabi_dmul>
   1aa58:	4642      	mov	r2, r8
   1aa5a:	464b      	mov	r3, r9
   1aa5c:	f006 fca8 	bl	213b0 <__aeabi_dmul>
   1aa60:	4622      	mov	r2, r4
   1aa62:	462b      	mov	r3, r5
   1aa64:	f006 faee 	bl	21044 <__adddf3>
   1aa68:	e8e6 0102 	strd	r0, r1, [r6], #8
   1aa6c:	e750      	b.n	1a910 <bierman_dbl+0x98>
   1aa6e:	bf00      	nop
	...
   1aa78:	3ff00000 	.word	0x3ff00000
   1aa7c:	00000000 	.word	0x00000000

0001aa80 <rx_complete_cb>:
 */
static bool
rx_complete_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
    struct uwb_rng_txd txd;
    if (inst->fctrl != FCNTL_IEEE_RANGE_16)
   1aa80:	f8b0 24e0 	ldrh.w	r2, [r0, #1248]	; 0x4e0
   1aa84:	f648 0341 	movw	r3, #34881	; 0x8841
   1aa88:	429a      	cmp	r2, r3
   1aa8a:	f040 8210 	bne.w	1aeae <rx_complete_cb+0x42e>
{
   1aa8e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1aa92:	b089      	sub	sp, #36	; 0x24
   1aa94:	4604      	mov	r4, r0
        return false;

    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
   1aa96:	684d      	ldr	r5, [r1, #4]
    assert(rng);
   1aa98:	b18d      	cbz	r5, 1aabe <rx_complete_cb+0x3e>
   1aa9a:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
    if(dpl_sem_get_count(&rng->sem) == 1) {
   1aa9e:	2b01      	cmp	r3, #1
   1aaa0:	f000 8207 	beq.w	1aeb2 <rx_complete_cb+0x432>
        // unsolicited inbound
        return false;
    }

    switch(rng->code){
   1aaa4:	f8b5 304c 	ldrh.w	r3, [r5, #76]	; 0x4c
   1aaa8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
   1aaac:	2b03      	cmp	r3, #3
   1aaae:	f200 8204 	bhi.w	1aeba <rx_complete_cb+0x43a>
   1aab2:	e8df f013 	tbh	[pc, r3, lsl #1]
   1aab6:	000a      	.short	0x000a
   1aab8:	015b009f 	.word	0x015b009f
   1aabc:	01ef      	.short	0x01ef
    assert(rng);
   1aabe:	2300      	movs	r3, #0
   1aac0:	461a      	mov	r2, r3
   1aac2:	4619      	mov	r1, r3
   1aac4:	4618      	mov	r0, r3
   1aac6:	f7ee fa4d 	bl	8f64 <__assert_func>
       case UWB_DATA_CODE_DS_TWR:
            {
                // This code executes on the device that is responding to a original request
                twr_frame_t * frame = rng->frames[(rng->idx)%rng->nframes];  // Frame already read within loader layers.
   1aaca:	f8b5 3076 	ldrh.w	r3, [r5, #118]	; 0x76
   1aace:	f8b5 207a 	ldrh.w	r2, [r5, #122]	; 0x7a
   1aad2:	fbb3 f1f2 	udiv	r1, r3, r2
   1aad6:	fb02 3311 	mls	r3, r2, r1, r3
   1aada:	b29b      	uxth	r3, r3
   1aadc:	3326      	adds	r3, #38	; 0x26
   1aade:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   1aae2:	685e      	ldr	r6, [r3, #4]

                if (inst->frame_len != sizeof(ieee_rng_request_frame_t))
   1aae4:	f8b0 34e2 	ldrh.w	r3, [r0, #1250]	; 0x4e2
   1aae8:	2b0b      	cmp	r3, #11
   1aaea:	d001      	beq.n	1aaf0 <rx_complete_cb+0x70>
            }
        default:
                return false;
                break;
    }
    return true;
   1aaec:	2001      	movs	r0, #1
   1aaee:	e1e1      	b.n	1aeb4 <rx_complete_cb+0x434>
                uint64_t request_timestamp = inst->rxtimestamp;
   1aaf0:	f8d0 74e8 	ldr.w	r7, [r0, #1256]	; 0x4e8
   1aaf4:	f8d0 24ec 	ldr.w	r2, [r0, #1260]	; 0x4ec
                uwb_rng_calc_rel_tx(rng, &txd, &g_config, request_timestamp, inst->frame_len);
   1aaf8:	9302      	str	r3, [sp, #8]
   1aafa:	9700      	str	r7, [sp, #0]
   1aafc:	9201      	str	r2, [sp, #4]
   1aafe:	4aa4      	ldr	r2, [pc, #656]	; (1ad90 <rx_complete_cb+0x310>)
   1ab00:	a904      	add	r1, sp, #16
   1ab02:	4628      	mov	r0, r5
   1ab04:	f7f1 fec4 	bl	c890 <uwb_rng_calc_rel_tx>
                frame->reception_timestamp =  (uint32_t) (request_timestamp & 0xFFFFFFFFUL);
   1ab08:	f8c6 700b 	str.w	r7, [r6, #11]
                frame->transmission_timestamp =  (uint32_t) (txd.response_timestamp & 0xFFFFFFFFUL);
   1ab0c:	9b06      	ldr	r3, [sp, #24]
   1ab0e:	f8c6 300f 	str.w	r3, [r6, #15]
                frame->dst_address = frame->src_address;
   1ab12:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   1ab16:	f8a6 3005 	strh.w	r3, [r6, #5]
                frame->src_address = inst->my_short_address;
   1ab1a:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
   1ab1e:	f8a6 3007 	strh.w	r3, [r6, #7]
                frame->carrier_integrator  = 0.0l;
   1ab22:	2700      	movs	r7, #0
   1ab24:	76f7      	strb	r7, [r6, #27]
   1ab26:	7737      	strb	r7, [r6, #28]
   1ab28:	7777      	strb	r7, [r6, #29]
   1ab2a:	77b7      	strb	r7, [r6, #30]
                frame->code = UWB_DATA_CODE_DS_TWR_T1;
   1ab2c:	2321      	movs	r3, #33	; 0x21
   1ab2e:	7273      	strb	r3, [r6, #9]
   1ab30:	2301      	movs	r3, #1
   1ab32:	72b3      	strb	r3, [r6, #10]
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
   1ab34:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ab36:	f8d3 8044 	ldr.w	r8, [r3, #68]	; 0x44
   1ab3a:	2313      	movs	r3, #19
   1ab3c:	463a      	mov	r2, r7
   1ab3e:	4631      	mov	r1, r6
   1ab40:	4620      	mov	r0, r4
   1ab42:	47c0      	blx	r8
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
   1ab44:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ab46:	6c9e      	ldr	r6, [r3, #72]	; 0x48
   1ab48:	463b      	mov	r3, r7
   1ab4a:	463a      	mov	r2, r7
   1ab4c:	2113      	movs	r1, #19
   1ab4e:	4620      	mov	r0, r4
   1ab50:	47b0      	blx	r6
    return (dev->uw_funcs->uf_set_wait4resp(dev, enable));
   1ab52:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ab54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1ab56:	2101      	movs	r1, #1
   1ab58:	4620      	mov	r0, r4
   1ab5a:	4798      	blx	r3
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
   1ab5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ab5e:	6b59      	ldr	r1, [r3, #52]	; 0x34
   1ab60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1ab64:	4620      	mov	r0, r4
   1ab66:	4788      	blx	r1
    return (dev->uw_funcs->uf_set_rxauto_disable(dev, disable));
   1ab68:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ab6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1ab6c:	2101      	movs	r1, #1
   1ab6e:	4620      	mov	r0, r4
   1ab70:	4798      	blx	r3
    return (dev->uw_funcs->uf_start_tx(dev));
   1ab72:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ab74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1ab76:	4620      	mov	r0, r4
   1ab78:	4798      	blx	r3
                if (uwb_start_tx(inst).start_tx_error){
   1ab7a:	f010 0f04 	tst.w	r0, #4
   1ab7e:	d130      	bne.n	1abe2 <rx_complete_cb+0x162>
                uwb_set_wait4resp_delay(inst, g_config.tx_holdoff_delay -
   1ab80:	4d83      	ldr	r5, [pc, #524]	; (1ad90 <rx_complete_cb+0x310>)
   1ab82:	6869      	ldr	r1, [r5, #4]
                                        inst->config.rx.timeToRxStable);
   1ab84:	f894 251b 	ldrb.w	r2, [r4, #1307]	; 0x51b
    return (dev->uw_funcs->uf_set_wait4resp_delay(dev, delay));
   1ab88:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ab8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   1ab8c:	1a89      	subs	r1, r1, r2
   1ab8e:	4620      	mov	r0, r4
   1ab90:	4798      	blx	r3
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
   1ab92:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ab94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1ab96:	2113      	movs	r1, #19
   1ab98:	4620      	mov	r0, r4
   1ab9a:	4798      	blx	r3
                uwb_set_rx_timeout(inst, uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst, sizeof(ieee_rng_response_frame_t))) +
   1ab9c:	f006 fb9e 	bl	212dc <__aeabi_i2d>
   1aba0:	a379      	add	r3, pc, #484	; (adr r3, 1ad88 <rx_complete_cb+0x308>)
   1aba2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1aba6:	f006 fd2d 	bl	21604 <__aeabi_ddiv>
   1abaa:	4606      	mov	r6, r0
   1abac:	460f      	mov	r7, r1
   1abae:	89a8      	ldrh	r0, [r5, #12]
   1abb0:	f006 fb94 	bl	212dc <__aeabi_i2d>
   1abb4:	4632      	mov	r2, r6
   1abb6:	463b      	mov	r3, r7
   1abb8:	f006 fa44 	bl	21044 <__adddf3>
   1abbc:	4606      	mov	r6, r0
   1abbe:	460f      	mov	r7, r1
                                   g_config.rx_timeout_delay + inst->config.rx.timeToRxStable);
   1abc0:	f894 051b 	ldrb.w	r0, [r4, #1307]	; 0x51b
   1abc4:	f006 fb8a 	bl	212dc <__aeabi_i2d>
   1abc8:	4632      	mov	r2, r6
   1abca:	463b      	mov	r3, r7
   1abcc:	f006 fa3a 	bl	21044 <__adddf3>
                uwb_set_rx_timeout(inst, uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst, sizeof(ieee_rng_response_frame_t))) +
   1abd0:	f006 fec6 	bl	21960 <__aeabi_d2uiz>
   1abd4:	4601      	mov	r1, r0
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
   1abd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1abd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1abda:	4620      	mov	r0, r4
   1abdc:	4798      	blx	r3
    return true;
   1abde:	2001      	movs	r0, #1
                break;
   1abe0:	e168      	b.n	1aeb4 <rx_complete_cb+0x434>
                    DS_STATS_INC(start_tx_error);
   1abe2:	4a6c      	ldr	r2, [pc, #432]	; (1ad94 <rx_complete_cb+0x314>)
   1abe4:	6993      	ldr	r3, [r2, #24]
   1abe6:	3301      	adds	r3, #1
   1abe8:	6193      	str	r3, [r2, #24]
    return (dpl_error_t)os_sem_release(&sem->sem);
   1abea:	f105 0050 	add.w	r0, r5, #80	; 0x50
   1abee:	f7ef f8d9 	bl	9da4 <os_sem_release>
   1abf2:	e7c5      	b.n	1ab80 <rx_complete_cb+0x100>
                if(inst->status.lde_error)
   1abf4:	f890 3509 	ldrb.w	r3, [r0, #1289]	; 0x509
   1abf8:	f013 0f04 	tst.w	r3, #4
   1abfc:	f040 815f 	bne.w	1aebe <rx_complete_cb+0x43e>
                if (inst->frame_len != sizeof(ieee_rng_response_frame_t))
   1ac00:	f8b0 34e2 	ldrh.w	r3, [r0, #1250]	; 0x4e2
   1ac04:	2b13      	cmp	r3, #19
   1ac06:	d001      	beq.n	1ac0c <rx_complete_cb+0x18c>
    return true;
   1ac08:	2001      	movs	r0, #1
   1ac0a:	e153      	b.n	1aeb4 <rx_complete_cb+0x434>
                twr_frame_t * frame = rng->frames[(rng->idx)%rng->nframes];
   1ac0c:	f8b5 3076 	ldrh.w	r3, [r5, #118]	; 0x76
   1ac10:	f8b5 107a 	ldrh.w	r1, [r5, #122]	; 0x7a
   1ac14:	fbb3 f2f1 	udiv	r2, r3, r1
   1ac18:	fb01 3212 	mls	r2, r1, r2, r3
   1ac1c:	b292      	uxth	r2, r2
   1ac1e:	3226      	adds	r2, #38	; 0x26
   1ac20:	eb05 0282 	add.w	r2, r5, r2, lsl #2
   1ac24:	6856      	ldr	r6, [r2, #4]
                twr_frame_t * next_frame = rng->frames[(rng->idx+1)%rng->nframes];
   1ac26:	3301      	adds	r3, #1
   1ac28:	fb93 f2f1 	sdiv	r2, r3, r1
   1ac2c:	fb01 3312 	mls	r3, r1, r2, r3
   1ac30:	3326      	adds	r3, #38	; 0x26
   1ac32:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   1ac36:	685f      	ldr	r7, [r3, #4]
                uint64_t request_timestamp = inst->rxtimestamp;
   1ac38:	f8d0 84e8 	ldr.w	r8, [r0, #1256]	; 0x4e8
   1ac3c:	f8d0 94ec 	ldr.w	r9, [r0, #1260]	; 0x4ec
    return (dev->uw_funcs->uf_read_txtime_lo32(dev));
   1ac40:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1ac42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   1ac44:	4798      	blx	r3
                frame->request_timestamp = next_frame->request_timestamp = uwb_read_txtime_lo32(inst); // This corresponds to when the original request was actually sent
   1ac46:	f8c7 0013 	str.w	r0, [r7, #19]
   1ac4a:	f8c6 0013 	str.w	r0, [r6, #19]
                frame->response_timestamp = next_frame->response_timestamp = (uint32_t)(request_timestamp & 0xFFFFFFFFUL); // This corresponds to the response just received
   1ac4e:	f8c7 8017 	str.w	r8, [r7, #23]
   1ac52:	f8c6 8017 	str.w	r8, [r6, #23]
                uint16_t src_address = frame->src_address;
   1ac56:	f8b6 1007 	ldrh.w	r1, [r6, #7]
                uint8_t seq_num = frame->seq_num;
   1ac5a:	78b2      	ldrb	r2, [r6, #2]
                frame->carrier_integrator  = 0.0l;
   1ac5c:	2300      	movs	r3, #0
   1ac5e:	76f3      	strb	r3, [r6, #27]
   1ac60:	7733      	strb	r3, [r6, #28]
   1ac62:	7773      	strb	r3, [r6, #29]
   1ac64:	77b3      	strb	r3, [r6, #30]
                frame->dst_address = src_address;
   1ac66:	f8a7 1005 	strh.w	r1, [r7, #5]
                frame->src_address = inst->my_short_address;
   1ac6a:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
   1ac6e:	f8a7 3007 	strh.w	r3, [r7, #7]
                frame->seq_num = seq_num + 1;
   1ac72:	1c53      	adds	r3, r2, #1
   1ac74:	70bb      	strb	r3, [r7, #2]
                frame->code = UWB_DATA_CODE_DS_TWR_T2;
   1ac76:	2322      	movs	r3, #34	; 0x22
   1ac78:	727b      	strb	r3, [r7, #9]
   1ac7a:	2301      	movs	r3, #1
   1ac7c:	72bb      	strb	r3, [r7, #10]
                if(inst->status.lde_error)
   1ac7e:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   1ac82:	f013 0f04 	tst.w	r3, #4
   1ac86:	d001      	beq.n	1ac8c <rx_complete_cb+0x20c>
    return true;
   1ac88:	2001      	movs	r0, #1
   1ac8a:	e113      	b.n	1aeb4 <rx_complete_cb+0x434>
                uwb_rng_calc_rel_tx(rng, &txd, &g_config, request_timestamp, inst->frame_len);
   1ac8c:	f8b4 34e2 	ldrh.w	r3, [r4, #1250]	; 0x4e2
   1ac90:	9302      	str	r3, [sp, #8]
   1ac92:	f8cd 8000 	str.w	r8, [sp]
   1ac96:	f8cd 9004 	str.w	r9, [sp, #4]
   1ac9a:	4a3d      	ldr	r2, [pc, #244]	; (1ad90 <rx_complete_cb+0x310>)
   1ac9c:	a904      	add	r1, sp, #16
   1ac9e:	4628      	mov	r0, r5
   1aca0:	f7f1 fdf6 	bl	c890 <uwb_rng_calc_rel_tx>
                frame->reception_timestamp =  (uint32_t) (request_timestamp & 0xFFFFFFFFUL);
   1aca4:	f8c7 800b 	str.w	r8, [r7, #11]
                frame->transmission_timestamp =  (uint32_t) (txd.response_timestamp & 0xFFFFFFFFUL);
   1aca8:	9b06      	ldr	r3, [sp, #24]
   1acaa:	f8c7 300f 	str.w	r3, [r7, #15]
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
   1acae:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1acb0:	6c5e      	ldr	r6, [r3, #68]	; 0x44
   1acb2:	231f      	movs	r3, #31
   1acb4:	2200      	movs	r2, #0
   1acb6:	4639      	mov	r1, r7
   1acb8:	4620      	mov	r0, r4
   1acba:	47b0      	blx	r6
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
   1acbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1acbe:	6c9e      	ldr	r6, [r3, #72]	; 0x48
   1acc0:	2300      	movs	r3, #0
   1acc2:	461a      	mov	r2, r3
   1acc4:	211f      	movs	r1, #31
   1acc6:	4620      	mov	r0, r4
   1acc8:	47b0      	blx	r6
    return (dev->uw_funcs->uf_set_wait4resp(dev, enable));
   1acca:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1accc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1acce:	2101      	movs	r1, #1
   1acd0:	4620      	mov	r0, r4
   1acd2:	4798      	blx	r3
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
   1acd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1acd6:	6b59      	ldr	r1, [r3, #52]	; 0x34
   1acd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1acdc:	4620      	mov	r0, r4
   1acde:	4788      	blx	r1
    return (dev->uw_funcs->uf_set_rxauto_disable(dev, disable));
   1ace0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ace2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1ace4:	2101      	movs	r1, #1
   1ace6:	4620      	mov	r0, r4
   1ace8:	4798      	blx	r3
    return (dev->uw_funcs->uf_start_tx(dev));
   1acea:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1acec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1acee:	4620      	mov	r0, r4
   1acf0:	4798      	blx	r3
                if (uwb_start_tx(inst).start_tx_error){
   1acf2:	f010 0f04 	tst.w	r0, #4
   1acf6:	d130      	bne.n	1ad5a <rx_complete_cb+0x2da>
                uwb_set_wait4resp_delay(inst, g_config.tx_holdoff_delay -
   1acf8:	4d25      	ldr	r5, [pc, #148]	; (1ad90 <rx_complete_cb+0x310>)
   1acfa:	6869      	ldr	r1, [r5, #4]
                                        inst->config.rx.timeToRxStable);
   1acfc:	f894 251b 	ldrb.w	r2, [r4, #1307]	; 0x51b
    return (dev->uw_funcs->uf_set_wait4resp_delay(dev, delay));
   1ad00:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ad02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   1ad04:	1a89      	subs	r1, r1, r2
   1ad06:	4620      	mov	r0, r4
   1ad08:	4798      	blx	r3
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
   1ad0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ad0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1ad0e:	211f      	movs	r1, #31
   1ad10:	4620      	mov	r0, r4
   1ad12:	4798      	blx	r3
                uwb_set_rx_timeout(inst, uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst, sizeof(twr_frame_final_t))) +
   1ad14:	f006 fae2 	bl	212dc <__aeabi_i2d>
   1ad18:	a31b      	add	r3, pc, #108	; (adr r3, 1ad88 <rx_complete_cb+0x308>)
   1ad1a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ad1e:	f006 fc71 	bl	21604 <__aeabi_ddiv>
   1ad22:	4606      	mov	r6, r0
   1ad24:	460f      	mov	r7, r1
   1ad26:	89a8      	ldrh	r0, [r5, #12]
   1ad28:	f006 fad8 	bl	212dc <__aeabi_i2d>
   1ad2c:	4632      	mov	r2, r6
   1ad2e:	463b      	mov	r3, r7
   1ad30:	f006 f988 	bl	21044 <__adddf3>
   1ad34:	4606      	mov	r6, r0
   1ad36:	460f      	mov	r7, r1
                                   g_config.rx_timeout_delay + inst->config.rx.timeToRxStable);
   1ad38:	f894 051b 	ldrb.w	r0, [r4, #1307]	; 0x51b
   1ad3c:	f006 face 	bl	212dc <__aeabi_i2d>
   1ad40:	4632      	mov	r2, r6
   1ad42:	463b      	mov	r3, r7
   1ad44:	f006 f97e 	bl	21044 <__adddf3>
                uwb_set_rx_timeout(inst, uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst, sizeof(twr_frame_final_t))) +
   1ad48:	f006 fe0a 	bl	21960 <__aeabi_d2uiz>
   1ad4c:	4601      	mov	r1, r0
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
   1ad4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ad50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1ad52:	4620      	mov	r0, r4
   1ad54:	4798      	blx	r3
    return true;
   1ad56:	2001      	movs	r0, #1
                break;
   1ad58:	e0ac      	b.n	1aeb4 <rx_complete_cb+0x434>
                    DS_STATS_INC(start_tx_error);
   1ad5a:	4a0e      	ldr	r2, [pc, #56]	; (1ad94 <rx_complete_cb+0x314>)
   1ad5c:	6993      	ldr	r3, [r2, #24]
   1ad5e:	3301      	adds	r3, #1
   1ad60:	6193      	str	r3, [r2, #24]
   1ad62:	f105 0050 	add.w	r0, r5, #80	; 0x50
   1ad66:	f7ef f81d 	bl	9da4 <os_sem_release>
   1ad6a:	e7c5      	b.n	1acf8 <rx_complete_cb+0x278>
                if(inst->status.lde_error)
   1ad6c:	f890 3509 	ldrb.w	r3, [r0, #1289]	; 0x509
   1ad70:	f013 0f04 	tst.w	r3, #4
   1ad74:	f040 80a5 	bne.w	1aec2 <rx_complete_cb+0x442>
                if (inst->frame_len != sizeof(twr_frame_final_t))
   1ad78:	f8b0 34e2 	ldrh.w	r3, [r0, #1250]	; 0x4e2
   1ad7c:	2b1f      	cmp	r3, #31
   1ad7e:	d00b      	beq.n	1ad98 <rx_complete_cb+0x318>
    return true;
   1ad80:	2001      	movs	r0, #1
   1ad82:	e097      	b.n	1aeb4 <rx_complete_cb+0x434>
   1ad84:	f3af 8000 	nop.w
   1ad88:	90690691 	.word	0x90690691
   1ad8c:	3ff06906 	.word	0x3ff06906
   1ad90:	20000db4 	.word	0x20000db4
   1ad94:	200045b8 	.word	0x200045b8
                twr_frame_t * previous_frame = rng->frames[(uint16_t)(rng->idx-1)%rng->nframes];
   1ad98:	f8b5 2076 	ldrh.w	r2, [r5, #118]	; 0x76
   1ad9c:	1e53      	subs	r3, r2, #1
   1ad9e:	b29b      	uxth	r3, r3
   1ada0:	f8b5 107a 	ldrh.w	r1, [r5, #122]	; 0x7a
   1ada4:	fbb3 f0f1 	udiv	r0, r3, r1
   1ada8:	fb01 3310 	mls	r3, r1, r0, r3
   1adac:	b29b      	uxth	r3, r3
   1adae:	3326      	adds	r3, #38	; 0x26
   1adb0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   1adb4:	6858      	ldr	r0, [r3, #4]
                twr_frame_t * frame = rng->frames[(rng->idx)%rng->nframes];
   1adb6:	fbb2 f3f1 	udiv	r3, r2, r1
   1adba:	fb01 2313 	mls	r3, r1, r3, r2
   1adbe:	b29b      	uxth	r3, r3
   1adc0:	3326      	adds	r3, #38	; 0x26
   1adc2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   1adc6:	685e      	ldr	r6, [r3, #4]
                previous_frame->request_timestamp = frame->request_timestamp;
   1adc8:	f8d6 3013 	ldr.w	r3, [r6, #19]
   1adcc:	f8c0 3013 	str.w	r3, [r0, #19]
                previous_frame->response_timestamp = frame->response_timestamp;
   1add0:	f8d6 3017 	ldr.w	r3, [r6, #23]
   1add4:	f8c0 3017 	str.w	r3, [r0, #23]
                uint64_t request_timestamp = inst->rxtimestamp;
   1add8:	f504 689e 	add.w	r8, r4, #1264	; 0x4f0
   1addc:	f8d4 74e8 	ldr.w	r7, [r4, #1256]	; 0x4e8
    return (dev->uw_funcs->uf_read_txtime_lo32(dev));
   1ade0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ade2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   1ade4:	4620      	mov	r0, r4
   1ade6:	4798      	blx	r3
                frame->request_timestamp = uwb_read_txtime_lo32(inst);   // This corresponds to when the original request was actually sent
   1ade8:	f8c6 0013 	str.w	r0, [r6, #19]
                frame->response_timestamp = (uint32_t) (request_timestamp & 0xFFFFFFFFUL);  // This corresponds to the response just received
   1adec:	f8c6 7017 	str.w	r7, [r6, #23]
                frame->dst_address = frame->src_address;
   1adf0:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   1adf4:	f8a6 3005 	strh.w	r3, [r6, #5]
                frame->src_address = inst->my_short_address;
   1adf8:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
   1adfc:	f8a6 3007 	strh.w	r3, [r6, #7]
                frame->carrier_integrator  = 0.0l;
   1ae00:	2700      	movs	r7, #0
   1ae02:	76f7      	strb	r7, [r6, #27]
   1ae04:	7737      	strb	r7, [r6, #28]
   1ae06:	7777      	strb	r7, [r6, #29]
   1ae08:	77b7      	strb	r7, [r6, #30]
                frame->code = UWB_DATA_CODE_DS_TWR_FINAL;
   1ae0a:	2323      	movs	r3, #35	; 0x23
   1ae0c:	7273      	strb	r3, [r6, #9]
   1ae0e:	2301      	movs	r3, #1
   1ae10:	72b3      	strb	r3, [r6, #10]
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
   1ae12:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ae14:	f8d3 9044 	ldr.w	r9, [r3, #68]	; 0x44
   1ae18:	231f      	movs	r3, #31
   1ae1a:	463a      	mov	r2, r7
   1ae1c:	4631      	mov	r1, r6
   1ae1e:	4620      	mov	r0, r4
   1ae20:	47c8      	blx	r9
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
   1ae22:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ae24:	6c9e      	ldr	r6, [r3, #72]	; 0x48
   1ae26:	463b      	mov	r3, r7
   1ae28:	463a      	mov	r2, r7
   1ae2a:	211f      	movs	r1, #31
   1ae2c:	4620      	mov	r0, r4
   1ae2e:	47b0      	blx	r6
                uwb_rng_calc_rel_tx(rng, &txd, &g_config, inst->rxtimestamp, inst->frame_len);
   1ae30:	f8b4 34e2 	ldrh.w	r3, [r4, #1250]	; 0x4e2
   1ae34:	9302      	str	r3, [sp, #8]
   1ae36:	e958 2302 	ldrd	r2, r3, [r8, #-8]
   1ae3a:	e9cd 2300 	strd	r2, r3, [sp]
   1ae3e:	4a22      	ldr	r2, [pc, #136]	; (1aec8 <rx_complete_cb+0x448>)
   1ae40:	a904      	add	r1, sp, #16
   1ae42:	4628      	mov	r0, r5
   1ae44:	f7f1 fd24 	bl	c890 <uwb_rng_calc_rel_tx>
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
   1ae48:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ae4a:	6b59      	ldr	r1, [r3, #52]	; 0x34
   1ae4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1ae50:	4620      	mov	r0, r4
   1ae52:	4788      	blx	r1
    return (dev->uw_funcs->uf_start_tx(dev));
   1ae54:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ae56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1ae58:	4620      	mov	r0, r4
   1ae5a:	4798      	blx	r3
                if (uwb_start_tx(inst).start_tx_error) {
   1ae5c:	f010 0f04 	tst.w	r0, #4
   1ae60:	d10b      	bne.n	1ae7a <rx_complete_cb+0x3fa>
                    DS_STATS_INC(complete);
   1ae62:	4a1a      	ldr	r2, [pc, #104]	; (1aecc <rx_complete_cb+0x44c>)
   1ae64:	6953      	ldr	r3, [r2, #20]
   1ae66:	3301      	adds	r3, #1
   1ae68:	6153      	str	r3, [r2, #20]
                    rng->control.complete_after_tx = 1;
   1ae6a:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
   1ae6e:	f043 0302 	orr.w	r3, r3, #2
   1ae72:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
    return true;
   1ae76:	2001      	movs	r0, #1
   1ae78:	e01c      	b.n	1aeb4 <rx_complete_cb+0x434>
                    DS_STATS_INC(start_tx_error);
   1ae7a:	4a14      	ldr	r2, [pc, #80]	; (1aecc <rx_complete_cb+0x44c>)
   1ae7c:	6993      	ldr	r3, [r2, #24]
   1ae7e:	3301      	adds	r3, #1
   1ae80:	6193      	str	r3, [r2, #24]
   1ae82:	f105 0050 	add.w	r0, r5, #80	; 0x50
   1ae86:	f7ee ff8d 	bl	9da4 <os_sem_release>
                    rng_issue_complete(inst);
   1ae8a:	4620      	mov	r0, r4
   1ae8c:	f7f1 fff4 	bl	ce78 <rng_issue_complete>
    return true;
   1ae90:	2001      	movs	r0, #1
   1ae92:	e00f      	b.n	1aeb4 <rx_complete_cb+0x434>
                DS_STATS_INC(complete);
   1ae94:	4a0d      	ldr	r2, [pc, #52]	; (1aecc <rx_complete_cb+0x44c>)
   1ae96:	6953      	ldr	r3, [r2, #20]
   1ae98:	3301      	adds	r3, #1
   1ae9a:	6153      	str	r3, [r2, #20]
   1ae9c:	f105 0050 	add.w	r0, r5, #80	; 0x50
   1aea0:	f7ee ff80 	bl	9da4 <os_sem_release>
                rng_issue_complete(inst);
   1aea4:	4620      	mov	r0, r4
   1aea6:	f7f1 ffe7 	bl	ce78 <rng_issue_complete>
    return true;
   1aeaa:	2001      	movs	r0, #1
                break;
   1aeac:	e002      	b.n	1aeb4 <rx_complete_cb+0x434>
        return false;
   1aeae:	2000      	movs	r0, #0
}
   1aeb0:	4770      	bx	lr
        return false;
   1aeb2:	2000      	movs	r0, #0
}
   1aeb4:	b009      	add	sp, #36	; 0x24
   1aeb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch(rng->code){
   1aeba:	2000      	movs	r0, #0
   1aebc:	e7fa      	b.n	1aeb4 <rx_complete_cb+0x434>
    return true;
   1aebe:	2001      	movs	r0, #1
   1aec0:	e7f8      	b.n	1aeb4 <rx_complete_cb+0x434>
   1aec2:	2001      	movs	r0, #1
   1aec4:	e7f6      	b.n	1aeb4 <rx_complete_cb+0x434>
   1aec6:	bf00      	nop
   1aec8:	20000db4 	.word	0x20000db4
   1aecc:	200045b8 	.word	0x200045b8

0001aed0 <twr_ds_pkg_init>:
{
   1aed0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1aed2:	b083      	sub	sp, #12
    printf("{\"utime\": %"PRIu32",\"msg\": \"twr_ds_pkg_init\"}\n",
   1aed4:	f7f3 fa99 	bl	e40a <dpl_cputime_get32>
   1aed8:	4601      	mov	r1, r0
   1aeda:	481d      	ldr	r0, [pc, #116]	; (1af50 <twr_ds_pkg_init+0x80>)
   1aedc:	f7f3 fa10 	bl	e300 <printf>
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   1aee0:	2400      	movs	r4, #0
   1aee2:	b174      	cbz	r4, 1af02 <twr_ds_pkg_init+0x32>
    rc = stats_init(
   1aee4:	2202      	movs	r2, #2
   1aee6:	9200      	str	r2, [sp, #0]
   1aee8:	4b1a      	ldr	r3, [pc, #104]	; (1af54 <twr_ds_pkg_init+0x84>)
   1aeea:	2104      	movs	r1, #4
   1aeec:	481a      	ldr	r0, [pc, #104]	; (1af58 <twr_ds_pkg_init+0x88>)
   1aeee:	f7f6 f87f 	bl	10ff0 <stats_init>
    assert(rc == 0);
   1aef2:	bb00      	cbnz	r0, 1af36 <twr_ds_pkg_init+0x66>
    rc = stats_register("twr_ds", STATS_HDR(g_twr_ds_stat));
   1aef4:	4918      	ldr	r1, [pc, #96]	; (1af58 <twr_ds_pkg_init+0x88>)
   1aef6:	4819      	ldr	r0, [pc, #100]	; (1af5c <twr_ds_pkg_init+0x8c>)
   1aef8:	f7f6 f904 	bl	11104 <stats_register>
    assert(rc == 0);
   1aefc:	bb08      	cbnz	r0, 1af42 <twr_ds_pkg_init+0x72>
}
   1aefe:	b003      	add	sp, #12
   1af00:	bdf0      	pop	{r4, r5, r6, r7, pc}
        udev = uwb_dev_idx_lookup(i);
   1af02:	4620      	mov	r0, r4
   1af04:	f7ed fd86 	bl	8a14 <uwb_dev_idx_lookup>
        if (!udev) {
   1af08:	4607      	mov	r7, r0
   1af0a:	b190      	cbz	r0, 1af32 <twr_ds_pkg_init+0x62>
        g_cbs[i].inst_ptr = (struct uwb_rng_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_RNG);
   1af0c:	2104      	movs	r1, #4
   1af0e:	f7ed fe06 	bl	8b1e <uwb_mac_find_cb_inst_ptr>
   1af12:	0126      	lsls	r6, r4, #4
   1af14:	ebc4 1504 	rsb	r5, r4, r4, lsl #4
   1af18:	4b11      	ldr	r3, [pc, #68]	; (1af60 <twr_ds_pkg_init+0x90>)
   1af1a:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   1af1e:	6068      	str	r0, [r5, #4]
        uwb_mac_append_interface(udev, &g_cbs[i]);
   1af20:	4629      	mov	r1, r5
   1af22:	4638      	mov	r0, r7
   1af24:	f7ed fda6 	bl	8a74 <uwb_mac_append_interface>
        uwb_rng_append_config(g_cbs[i].inst_ptr, &g_rng_cfgs[i]);
   1af28:	490e      	ldr	r1, [pc, #56]	; (1af64 <twr_ds_pkg_init+0x94>)
   1af2a:	4431      	add	r1, r6
   1af2c:	6868      	ldr	r0, [r5, #4]
   1af2e:	f7f1 fc75 	bl	c81c <uwb_rng_append_config>
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   1af32:	3401      	adds	r4, #1
   1af34:	e7d5      	b.n	1aee2 <twr_ds_pkg_init+0x12>
    assert(rc == 0);
   1af36:	2300      	movs	r3, #0
   1af38:	461a      	mov	r2, r3
   1af3a:	4619      	mov	r1, r3
   1af3c:	4618      	mov	r0, r3
   1af3e:	f7ee f811 	bl	8f64 <__assert_func>
    assert(rc == 0);
   1af42:	2300      	movs	r3, #0
   1af44:	461a      	mov	r2, r3
   1af46:	4619      	mov	r1, r3
   1af48:	4618      	mov	r0, r3
   1af4a:	f7ee f80b 	bl	8f64 <__assert_func>
   1af4e:	bf00      	nop
   1af50:	00024840 	.word	0x00024840
   1af54:	00024890 	.word	0x00024890
   1af58:	200045b8 	.word	0x200045b8
   1af5c:	0002486c 	.word	0x0002486c
   1af60:	20000d78 	.word	0x20000d78
   1af64:	20000dc4 	.word	0x20000dc4

0001af68 <twr_ds_free>:
twr_ds_free(struct uwb_dev * inst){
   1af68:	b508      	push	{r3, lr}
    assert(inst);
   1af6a:	b118      	cbz	r0, 1af74 <twr_ds_free+0xc>
    uwb_mac_remove_interface(inst, UWBEXT_RNG_DS);
   1af6c:	2108      	movs	r1, #8
   1af6e:	f7ed fda6 	bl	8abe <uwb_mac_remove_interface>
}
   1af72:	bd08      	pop	{r3, pc}
    assert(inst);
   1af74:	2300      	movs	r3, #0
   1af76:	461a      	mov	r2, r3
   1af78:	4619      	mov	r1, r3
   1af7a:	4618      	mov	r0, r3
   1af7c:	f7ed fff2 	bl	8f64 <__assert_func>

0001af80 <twr_ds_pkg_down>:
{
   1af80:	b538      	push	{r3, r4, r5, lr}
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   1af82:	2400      	movs	r4, #0
   1af84:	b10c      	cbz	r4, 1af8a <twr_ds_pkg_down+0xa>
}
   1af86:	2000      	movs	r0, #0
   1af88:	bd38      	pop	{r3, r4, r5, pc}
        rng = (struct uwb_rng_instance *)g_cbs[i].inst_ptr;
   1af8a:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   1af8e:	009a      	lsls	r2, r3, #2
   1af90:	4b07      	ldr	r3, [pc, #28]	; (1afb0 <twr_ds_pkg_down+0x30>)
   1af92:	4413      	add	r3, r2
   1af94:	685d      	ldr	r5, [r3, #4]
        if (!rng) continue;
   1af96:	b145      	cbz	r5, 1afaa <twr_ds_pkg_down+0x2a>
        uwb_rng_remove_config(g_cbs[i].inst_ptr, g_rng_cfgs[i].rng_code);
   1af98:	0123      	lsls	r3, r4, #4
   1af9a:	4a06      	ldr	r2, [pc, #24]	; (1afb4 <twr_ds_pkg_down+0x34>)
   1af9c:	5ad1      	ldrh	r1, [r2, r3]
   1af9e:	4628      	mov	r0, r5
   1afa0:	f7f1 fc55 	bl	c84e <uwb_rng_remove_config>
        twr_ds_free(rng->dev_inst);
   1afa4:	6828      	ldr	r0, [r5, #0]
   1afa6:	f7ff ffdf 	bl	1af68 <twr_ds_free>
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   1afaa:	3401      	adds	r4, #1
   1afac:	e7ea      	b.n	1af84 <twr_ds_pkg_down+0x4>
   1afae:	bf00      	nop
   1afb0:	20000d78 	.word	0x20000d78
   1afb4:	20000dc4 	.word	0x20000dc4

0001afb8 <rx_complete_cb>:
static bool
rx_complete_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
    struct uwb_rng_txd txd;
    struct uwb_mac_interface * cbs_i;
    if (inst->fctrl != FCNTL_IEEE_RANGE_16)
   1afb8:	f8b0 24e0 	ldrh.w	r2, [r0, #1248]	; 0x4e0
   1afbc:	f648 0341 	movw	r3, #34881	; 0x8841
   1afc0:	429a      	cmp	r2, r3
   1afc2:	f040 821e 	bne.w	1b402 <rx_complete_cb+0x44a>
{
   1afc6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1afca:	b089      	sub	sp, #36	; 0x24
   1afcc:	4604      	mov	r4, r0
        return false;

    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
   1afce:	684e      	ldr	r6, [r1, #4]
   1afd0:	f8b6 3056 	ldrh.w	r3, [r6, #86]	; 0x56
    if(dpl_sem_get_count(&rng->sem) == 1){
   1afd4:	2b01      	cmp	r3, #1
   1afd6:	f000 8216 	beq.w	1b406 <rx_complete_cb+0x44e>
        // unsolicited inbound
        return false;
    }

    switch(rng->code){
   1afda:	f8b6 304c 	ldrh.w	r3, [r6, #76]	; 0x4c
   1afde:	f2a3 1325 	subw	r3, r3, #293	; 0x125
   1afe2:	2b03      	cmp	r3, #3
   1afe4:	f200 8213 	bhi.w	1b40e <rx_complete_cb+0x456>
   1afe8:	e8df f013 	tbh	[pc, r3, lsl #1]
   1afec:	00950004 	.word	0x00950004
   1aff0:	01fe0166 	.word	0x01fe0166
        case UWB_DATA_CODE_DS_TWR_EXT:
            {
                // This code executes on the device that is responding to a original request

                twr_frame_t * frame = rng->frames[(rng->idx)%rng->nframes];
   1aff4:	f8b6 3076 	ldrh.w	r3, [r6, #118]	; 0x76
   1aff8:	f8b6 207a 	ldrh.w	r2, [r6, #122]	; 0x7a
   1affc:	fbb3 f1f2 	udiv	r1, r3, r2
   1b000:	fb02 3311 	mls	r3, r2, r1, r3
   1b004:	b29b      	uxth	r3, r3
   1b006:	3326      	adds	r3, #38	; 0x26
   1b008:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   1b00c:	685d      	ldr	r5, [r3, #4]

                uint64_t request_timestamp = inst->rxtimestamp;
   1b00e:	f8d0 74e8 	ldr.w	r7, [r0, #1256]	; 0x4e8
   1b012:	f8d0 34ec 	ldr.w	r3, [r0, #1260]	; 0x4ec
                uwb_rng_calc_rel_tx(rng, &txd, &g_config, request_timestamp, inst->frame_len);
   1b016:	f8b0 24e2 	ldrh.w	r2, [r0, #1250]	; 0x4e2
   1b01a:	9202      	str	r2, [sp, #8]
   1b01c:	9700      	str	r7, [sp, #0]
   1b01e:	9301      	str	r3, [sp, #4]
   1b020:	4aa3      	ldr	r2, [pc, #652]	; (1b2b0 <rx_complete_cb+0x2f8>)
   1b022:	a904      	add	r1, sp, #16
   1b024:	4630      	mov	r0, r6
   1b026:	f7f1 fc33 	bl	c890 <uwb_rng_calc_rel_tx>

                frame->reception_timestamp =  (uint32_t) (request_timestamp & 0xFFFFFFFFUL);
   1b02a:	f8c5 700b 	str.w	r7, [r5, #11]
                frame->transmission_timestamp =  (uint32_t) (txd.response_timestamp & 0xFFFFFFFFUL);
   1b02e:	9b06      	ldr	r3, [sp, #24]
   1b030:	f8c5 300f 	str.w	r3, [r5, #15]

                frame->dst_address = frame->src_address;
   1b034:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   1b038:	f8a5 3005 	strh.w	r3, [r5, #5]
                frame->src_address = inst->my_short_address;
   1b03c:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
   1b040:	f8a5 3007 	strh.w	r3, [r5, #7]
#if MYNEWT_VAL(UWB_WCS_ENABLED)
                frame->carrier_integrator  = 0.0l;
   1b044:	2700      	movs	r7, #0
   1b046:	76ef      	strb	r7, [r5, #27]
   1b048:	772f      	strb	r7, [r5, #28]
   1b04a:	776f      	strb	r7, [r5, #29]
   1b04c:	77af      	strb	r7, [r5, #30]
#else
                frame->carrier_integrator  = - inst->carrier_integrator;
#endif
                frame->code = UWB_DATA_CODE_DS_TWR_EXT_T1;
   1b04e:	2326      	movs	r3, #38	; 0x26
   1b050:	726b      	strb	r3, [r5, #9]
   1b052:	2301      	movs	r3, #1
   1b054:	72ab      	strb	r3, [r5, #10]
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
   1b056:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b058:	f8d3 8044 	ldr.w	r8, [r3, #68]	; 0x44
   1b05c:	2313      	movs	r3, #19
   1b05e:	463a      	mov	r2, r7
   1b060:	4629      	mov	r1, r5
   1b062:	4620      	mov	r0, r4
   1b064:	47c0      	blx	r8
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
   1b066:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b068:	6c9d      	ldr	r5, [r3, #72]	; 0x48
   1b06a:	463b      	mov	r3, r7
   1b06c:	463a      	mov	r2, r7
   1b06e:	2113      	movs	r1, #19
   1b070:	4620      	mov	r0, r4
   1b072:	47a8      	blx	r5
    return (dev->uw_funcs->uf_set_wait4resp(dev, enable));
   1b074:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1b078:	2101      	movs	r1, #1
   1b07a:	4620      	mov	r0, r4
   1b07c:	4798      	blx	r3
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
   1b07e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b080:	6b59      	ldr	r1, [r3, #52]	; 0x34
   1b082:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1b086:	4620      	mov	r0, r4
   1b088:	4788      	blx	r1
    return (dev->uw_funcs->uf_set_rxauto_disable(dev, disable));
   1b08a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b08c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1b08e:	2101      	movs	r1, #1
   1b090:	4620      	mov	r0, r4
   1b092:	4798      	blx	r3
    return (dev->uw_funcs->uf_start_tx(dev));
   1b094:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b098:	4620      	mov	r0, r4
   1b09a:	4798      	blx	r3

                uwb_set_delay_start(inst, txd.response_tx_delay);
                // Disable default behavor, do not RXENAB on RXFCG thereby avoiding rx timeout events
                uwb_set_rxauto_disable(inst, true);

                if (uwb_start_tx(inst).start_tx_error){
   1b09c:	f010 0f04 	tst.w	r0, #4
   1b0a0:	d130      	bne.n	1b104 <rx_complete_cb+0x14c>
                    DS_STATS_INC(tx_error);
                    dpl_sem_release(&rng->sem);
                }

                /* Setup when to listen for response, relative the end of our transmitted frame */
                uwb_set_wait4resp_delay(inst, g_config.tx_holdoff_delay -
   1b0a2:	4d83      	ldr	r5, [pc, #524]	; (1b2b0 <rx_complete_cb+0x2f8>)
   1b0a4:	6869      	ldr	r1, [r5, #4]
                                        inst->config.rx.timeToRxStable);
   1b0a6:	f894 251b 	ldrb.w	r2, [r4, #1307]	; 0x51b
    return (dev->uw_funcs->uf_set_wait4resp_delay(dev, delay));
   1b0aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b0ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   1b0ae:	1a89      	subs	r1, r1, r2
   1b0b0:	4620      	mov	r0, r4
   1b0b2:	4798      	blx	r3
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
   1b0b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b0b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1b0b8:	2120      	movs	r1, #32
   1b0ba:	4620      	mov	r0, r4
   1b0bc:	4798      	blx	r3
                uwb_set_rx_timeout(inst, uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst, TWR_EXT_FRAME_SIZE)) +
   1b0be:	f006 f90d 	bl	212dc <__aeabi_i2d>
   1b0c2:	a379      	add	r3, pc, #484	; (adr r3, 1b2a8 <rx_complete_cb+0x2f0>)
   1b0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b0c8:	f006 fa9c 	bl	21604 <__aeabi_ddiv>
   1b0cc:	4606      	mov	r6, r0
   1b0ce:	460f      	mov	r7, r1
   1b0d0:	89a8      	ldrh	r0, [r5, #12]
   1b0d2:	f006 f903 	bl	212dc <__aeabi_i2d>
   1b0d6:	4632      	mov	r2, r6
   1b0d8:	463b      	mov	r3, r7
   1b0da:	f005 ffb3 	bl	21044 <__adddf3>
   1b0de:	4606      	mov	r6, r0
   1b0e0:	460f      	mov	r7, r1
                                   g_config.rx_timeout_delay + inst->config.rx.timeToRxStable);
   1b0e2:	f894 051b 	ldrb.w	r0, [r4, #1307]	; 0x51b
   1b0e6:	f006 f8f9 	bl	212dc <__aeabi_i2d>
   1b0ea:	4632      	mov	r2, r6
   1b0ec:	463b      	mov	r3, r7
   1b0ee:	f005 ffa9 	bl	21044 <__adddf3>
                uwb_set_rx_timeout(inst, uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst, TWR_EXT_FRAME_SIZE)) +
   1b0f2:	f006 fc35 	bl	21960 <__aeabi_d2uiz>
   1b0f6:	4601      	mov	r1, r0
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
   1b0f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b0fc:	4620      	mov	r0, r4
   1b0fe:	4798      	blx	r3
            }
        default:
                return false;
                break;
    }
    return true;
   1b100:	2001      	movs	r0, #1
                break;
   1b102:	e181      	b.n	1b408 <rx_complete_cb+0x450>
                    DS_STATS_INC(tx_error);
   1b104:	4a6b      	ldr	r2, [pc, #428]	; (1b2b4 <rx_complete_cb+0x2fc>)
   1b106:	6993      	ldr	r3, [r2, #24]
   1b108:	3301      	adds	r3, #1
   1b10a:	6193      	str	r3, [r2, #24]
   1b10c:	f106 0050 	add.w	r0, r6, #80	; 0x50
   1b110:	f7ee fe48 	bl	9da4 <os_sem_release>
   1b114:	e7c5      	b.n	1b0a2 <rx_complete_cb+0xea>
                if (inst->frame_len != sizeof(ieee_rng_response_frame_t))
   1b116:	f8b0 34e2 	ldrh.w	r3, [r0, #1250]	; 0x4e2
   1b11a:	2b13      	cmp	r3, #19
   1b11c:	d001      	beq.n	1b122 <rx_complete_cb+0x16a>
    return true;
   1b11e:	2001      	movs	r0, #1
   1b120:	e172      	b.n	1b408 <rx_complete_cb+0x450>
                twr_frame_t * frame = rng->frames[(rng->idx)%rng->nframes];
   1b122:	f8b6 3076 	ldrh.w	r3, [r6, #118]	; 0x76
   1b126:	f8b6 107a 	ldrh.w	r1, [r6, #122]	; 0x7a
   1b12a:	fbb3 f2f1 	udiv	r2, r3, r1
   1b12e:	fb01 3212 	mls	r2, r1, r2, r3
   1b132:	b292      	uxth	r2, r2
   1b134:	3226      	adds	r2, #38	; 0x26
   1b136:	eb06 0282 	add.w	r2, r6, r2, lsl #2
   1b13a:	6855      	ldr	r5, [r2, #4]
                twr_frame_t * next_frame = rng->frames[(rng->idx+1)%rng->nframes];
   1b13c:	3301      	adds	r3, #1
   1b13e:	fb93 f2f1 	sdiv	r2, r3, r1
   1b142:	fb01 3312 	mls	r3, r1, r2, r3
   1b146:	3326      	adds	r3, #38	; 0x26
   1b148:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   1b14c:	685f      	ldr	r7, [r3, #4]
                uint64_t request_timestamp = inst->rxtimestamp;
   1b14e:	f8d0 84e8 	ldr.w	r8, [r0, #1256]	; 0x4e8
   1b152:	f8d0 94ec 	ldr.w	r9, [r0, #1260]	; 0x4ec
    return (dev->uw_funcs->uf_read_txtime_lo32(dev));
   1b156:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1b158:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   1b15a:	4798      	blx	r3
                frame->request_timestamp = next_frame->request_timestamp = uwb_read_txtime_lo32(inst); // This corresponds to when the original request was actually sent
   1b15c:	f8c7 0013 	str.w	r0, [r7, #19]
   1b160:	f8c5 0013 	str.w	r0, [r5, #19]
                frame->response_timestamp = next_frame->response_timestamp = (uint32_t)(request_timestamp & 0xFFFFFFFFUL); // This corresponds to the response just received
   1b164:	f8c7 8017 	str.w	r8, [r7, #23]
   1b168:	f8c5 8017 	str.w	r8, [r5, #23]
                uint16_t src_address = frame->src_address;
   1b16c:	f8b5 1007 	ldrh.w	r1, [r5, #7]
                uint8_t seq_num = frame->seq_num;
   1b170:	78aa      	ldrb	r2, [r5, #2]
                frame->carrier_integrator  = 0.0l;
   1b172:	2300      	movs	r3, #0
   1b174:	76eb      	strb	r3, [r5, #27]
   1b176:	772b      	strb	r3, [r5, #28]
   1b178:	776b      	strb	r3, [r5, #29]
   1b17a:	77ab      	strb	r3, [r5, #30]
                frame->dst_address = src_address;
   1b17c:	f8a7 1005 	strh.w	r1, [r7, #5]
                frame->src_address = inst->my_short_address;
   1b180:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
   1b184:	f8a7 3007 	strh.w	r3, [r7, #7]
                frame->seq_num = seq_num + 1;
   1b188:	1c53      	adds	r3, r2, #1
   1b18a:	70bb      	strb	r3, [r7, #2]
                frame->code = UWB_DATA_CODE_DS_TWR_EXT_T2;
   1b18c:	2327      	movs	r3, #39	; 0x27
   1b18e:	727b      	strb	r3, [r7, #9]
   1b190:	2301      	movs	r3, #1
   1b192:	72bb      	strb	r3, [r7, #10]
                if(inst->status.lde_error)
   1b194:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   1b198:	f013 0f04 	tst.w	r3, #4
   1b19c:	d001      	beq.n	1b1a2 <rx_complete_cb+0x1ea>
    return true;
   1b19e:	2001      	movs	r0, #1
   1b1a0:	e132      	b.n	1b408 <rx_complete_cb+0x450>
                uwb_rng_calc_rel_tx(rng, &txd, &g_config, request_timestamp, inst->frame_len);
   1b1a2:	f8b4 34e2 	ldrh.w	r3, [r4, #1250]	; 0x4e2
   1b1a6:	9302      	str	r3, [sp, #8]
   1b1a8:	f8cd 8000 	str.w	r8, [sp]
   1b1ac:	f8cd 9004 	str.w	r9, [sp, #4]
   1b1b0:	4a3f      	ldr	r2, [pc, #252]	; (1b2b0 <rx_complete_cb+0x2f8>)
   1b1b2:	a904      	add	r1, sp, #16
   1b1b4:	4630      	mov	r0, r6
   1b1b6:	f7f1 fb6b 	bl	c890 <uwb_rng_calc_rel_tx>
                frame->reception_timestamp =  (uint32_t) (request_timestamp & 0xFFFFFFFFUL);
   1b1ba:	f8c7 800b 	str.w	r8, [r7, #11]
                frame->transmission_timestamp =  (uint32_t) (txd.response_timestamp & 0xFFFFFFFFUL);
   1b1be:	9b06      	ldr	r3, [sp, #24]
   1b1c0:	f8c7 300f 	str.w	r3, [r7, #15]
                if(!(SLIST_EMPTY(&inst->interface_cbs))) {
   1b1c4:	f8d4 5530 	ldr.w	r5, [r4, #1328]	; 0x530
   1b1c8:	2d00      	cmp	r5, #0
   1b1ca:	d156      	bne.n	1b27a <rx_complete_cb+0x2c2>
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
   1b1cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b1ce:	6c5d      	ldr	r5, [r3, #68]	; 0x44
   1b1d0:	2320      	movs	r3, #32
   1b1d2:	2200      	movs	r2, #0
   1b1d4:	4639      	mov	r1, r7
   1b1d6:	4620      	mov	r0, r4
   1b1d8:	47a8      	blx	r5
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
   1b1da:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b1dc:	6c9d      	ldr	r5, [r3, #72]	; 0x48
   1b1de:	2300      	movs	r3, #0
   1b1e0:	461a      	mov	r2, r3
   1b1e2:	2120      	movs	r1, #32
   1b1e4:	4620      	mov	r0, r4
   1b1e6:	47a8      	blx	r5
    return (dev->uw_funcs->uf_set_wait4resp(dev, enable));
   1b1e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b1ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1b1ec:	2101      	movs	r1, #1
   1b1ee:	4620      	mov	r0, r4
   1b1f0:	4798      	blx	r3
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
   1b1f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b1f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
   1b1f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1b1fa:	4620      	mov	r0, r4
   1b1fc:	4788      	blx	r1
    return (dev->uw_funcs->uf_set_rxauto_disable(dev, disable));
   1b1fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1b202:	2101      	movs	r1, #1
   1b204:	4620      	mov	r0, r4
   1b206:	4798      	blx	r3
    return (dev->uw_funcs->uf_start_tx(dev));
   1b208:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b20a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b20c:	4620      	mov	r0, r4
   1b20e:	4798      	blx	r3
                if (uwb_start_tx(inst).start_tx_error){
   1b210:	f010 0f04 	tst.w	r0, #4
   1b214:	d13c      	bne.n	1b290 <rx_complete_cb+0x2d8>
                uwb_set_wait4resp_delay(inst, g_config.tx_holdoff_delay -
   1b216:	4d26      	ldr	r5, [pc, #152]	; (1b2b0 <rx_complete_cb+0x2f8>)
   1b218:	6869      	ldr	r1, [r5, #4]
                                        inst->config.rx.timeToRxStable);
   1b21a:	f894 251b 	ldrb.w	r2, [r4, #1307]	; 0x51b
    return (dev->uw_funcs->uf_set_wait4resp_delay(dev, delay));
   1b21e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   1b222:	1a89      	subs	r1, r1, r2
   1b224:	4620      	mov	r0, r4
   1b226:	4798      	blx	r3
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
   1b228:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b22a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1b22c:	2120      	movs	r1, #32
   1b22e:	4620      	mov	r0, r4
   1b230:	4798      	blx	r3
                uwb_set_rx_timeout(inst, uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst, TWR_EXT_FRAME_SIZE)) +
   1b232:	f006 f853 	bl	212dc <__aeabi_i2d>
   1b236:	a31c      	add	r3, pc, #112	; (adr r3, 1b2a8 <rx_complete_cb+0x2f0>)
   1b238:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b23c:	f006 f9e2 	bl	21604 <__aeabi_ddiv>
   1b240:	4606      	mov	r6, r0
   1b242:	460f      	mov	r7, r1
   1b244:	89a8      	ldrh	r0, [r5, #12]
   1b246:	f006 f849 	bl	212dc <__aeabi_i2d>
   1b24a:	4632      	mov	r2, r6
   1b24c:	463b      	mov	r3, r7
   1b24e:	f005 fef9 	bl	21044 <__adddf3>
   1b252:	4606      	mov	r6, r0
   1b254:	460f      	mov	r7, r1
                                   g_config.rx_timeout_delay + inst->config.rx.timeToRxStable);
   1b256:	f894 051b 	ldrb.w	r0, [r4, #1307]	; 0x51b
   1b25a:	f006 f83f 	bl	212dc <__aeabi_i2d>
   1b25e:	4632      	mov	r2, r6
   1b260:	463b      	mov	r3, r7
   1b262:	f005 feef 	bl	21044 <__adddf3>
                uwb_set_rx_timeout(inst, uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst, TWR_EXT_FRAME_SIZE)) +
   1b266:	f006 fb7b 	bl	21960 <__aeabi_d2uiz>
   1b26a:	4601      	mov	r1, r0
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
   1b26c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b26e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b270:	4620      	mov	r0, r4
   1b272:	4798      	blx	r3
    return true;
   1b274:	2001      	movs	r0, #1
                break;
   1b276:	e0c7      	b.n	1b408 <rx_complete_cb+0x450>
                    SLIST_FOREACH(cbs_i, &inst->interface_cbs, next) {
   1b278:	6bad      	ldr	r5, [r5, #56]	; 0x38
   1b27a:	2d00      	cmp	r5, #0
   1b27c:	d0a6      	beq.n	1b1cc <rx_complete_cb+0x214>
                        if (cbs_i != NULL && cbs_i->final_cb)
   1b27e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1b280:	2b00      	cmp	r3, #0
   1b282:	d0f9      	beq.n	1b278 <rx_complete_cb+0x2c0>
                            if(cbs_i->final_cb(inst, cbs_i)) break;
   1b284:	4629      	mov	r1, r5
   1b286:	4620      	mov	r0, r4
   1b288:	4798      	blx	r3
   1b28a:	2800      	cmp	r0, #0
   1b28c:	d0f4      	beq.n	1b278 <rx_complete_cb+0x2c0>
   1b28e:	e79d      	b.n	1b1cc <rx_complete_cb+0x214>
                    DS_STATS_INC(tx_error);
   1b290:	4a08      	ldr	r2, [pc, #32]	; (1b2b4 <rx_complete_cb+0x2fc>)
   1b292:	6993      	ldr	r3, [r2, #24]
   1b294:	3301      	adds	r3, #1
   1b296:	6193      	str	r3, [r2, #24]
   1b298:	f106 0050 	add.w	r0, r6, #80	; 0x50
   1b29c:	f7ee fd82 	bl	9da4 <os_sem_release>
   1b2a0:	e7b9      	b.n	1b216 <rx_complete_cb+0x25e>
   1b2a2:	bf00      	nop
   1b2a4:	f3af 8000 	nop.w
   1b2a8:	90690691 	.word	0x90690691
   1b2ac:	3ff06906 	.word	0x3ff06906
   1b2b0:	20000e10 	.word	0x20000e10
   1b2b4:	200045d4 	.word	0x200045d4
                twr_frame_t * previous_frame = rng->frames[(uint16_t)(rng->idx-1)%rng->nframes];
   1b2b8:	f8b6 2076 	ldrh.w	r2, [r6, #118]	; 0x76
   1b2bc:	1e53      	subs	r3, r2, #1
   1b2be:	b29b      	uxth	r3, r3
   1b2c0:	f8b6 107a 	ldrh.w	r1, [r6, #122]	; 0x7a
   1b2c4:	fbb3 f0f1 	udiv	r0, r3, r1
   1b2c8:	fb01 3310 	mls	r3, r1, r0, r3
   1b2cc:	b29b      	uxth	r3, r3
   1b2ce:	3326      	adds	r3, #38	; 0x26
   1b2d0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   1b2d4:	6858      	ldr	r0, [r3, #4]
                twr_frame_t * frame = rng->frames[(rng->idx)%rng->nframes];
   1b2d6:	fbb2 f3f1 	udiv	r3, r2, r1
   1b2da:	fb01 2313 	mls	r3, r1, r3, r2
   1b2de:	b29b      	uxth	r3, r3
   1b2e0:	3326      	adds	r3, #38	; 0x26
   1b2e2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   1b2e6:	685f      	ldr	r7, [r3, #4]
                previous_frame->request_timestamp = frame->request_timestamp;
   1b2e8:	f8d7 3013 	ldr.w	r3, [r7, #19]
   1b2ec:	f8c0 3013 	str.w	r3, [r0, #19]
                previous_frame->response_timestamp = frame->response_timestamp;
   1b2f0:	f8d7 3017 	ldr.w	r3, [r7, #23]
   1b2f4:	f8c0 3017 	str.w	r3, [r0, #23]
                uint64_t request_timestamp = inst->rxtimestamp;
   1b2f8:	f8d4 54e8 	ldr.w	r5, [r4, #1256]	; 0x4e8
    return (dev->uw_funcs->uf_read_txtime_lo32(dev));
   1b2fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b2fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   1b300:	4620      	mov	r0, r4
   1b302:	4798      	blx	r3
                frame->request_timestamp = uwb_read_txtime_lo32(inst);   // This corresponds to when the original request was actually sent
   1b304:	f8c7 0013 	str.w	r0, [r7, #19]
                frame->response_timestamp = (uint32_t) (request_timestamp & 0xFFFFFFFFUL);  // This corresponds to the response just received
   1b308:	f8c7 5017 	str.w	r5, [r7, #23]
                frame->dst_address = frame->src_address;
   1b30c:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   1b310:	f8a7 3005 	strh.w	r3, [r7, #5]
                frame->src_address = inst->my_short_address;
   1b314:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
   1b318:	f8a7 3007 	strh.w	r3, [r7, #7]
                frame->carrier_integrator  = 0.0l;
   1b31c:	2300      	movs	r3, #0
   1b31e:	76fb      	strb	r3, [r7, #27]
   1b320:	773b      	strb	r3, [r7, #28]
   1b322:	777b      	strb	r3, [r7, #29]
   1b324:	77bb      	strb	r3, [r7, #30]
                frame->code = UWB_DATA_CODE_DS_TWR_EXT_FINAL;
   1b326:	2328      	movs	r3, #40	; 0x28
   1b328:	727b      	strb	r3, [r7, #9]
   1b32a:	2301      	movs	r3, #1
   1b32c:	72bb      	strb	r3, [r7, #10]
                if(!(SLIST_EMPTY(&inst->interface_cbs))) {
   1b32e:	f8d4 5530 	ldr.w	r5, [r4, #1328]	; 0x530
   1b332:	2d00      	cmp	r5, #0
   1b334:	d140      	bne.n	1b3b8 <rx_complete_cb+0x400>
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
   1b336:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b338:	6c5d      	ldr	r5, [r3, #68]	; 0x44
   1b33a:	2320      	movs	r3, #32
   1b33c:	2200      	movs	r2, #0
   1b33e:	4639      	mov	r1, r7
   1b340:	4620      	mov	r0, r4
   1b342:	47a8      	blx	r5
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
   1b344:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b346:	6c9d      	ldr	r5, [r3, #72]	; 0x48
   1b348:	2300      	movs	r3, #0
   1b34a:	461a      	mov	r2, r3
   1b34c:	2120      	movs	r1, #32
   1b34e:	4620      	mov	r0, r4
   1b350:	47a8      	blx	r5
                uwb_rng_calc_rel_tx(rng, &txd, &g_config, inst->rxtimestamp, inst->frame_len);
   1b352:	f8b4 34e2 	ldrh.w	r3, [r4, #1250]	; 0x4e2
   1b356:	9302      	str	r3, [sp, #8]
   1b358:	f504 639e 	add.w	r3, r4, #1264	; 0x4f0
   1b35c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   1b360:	e9cd 2300 	strd	r2, r3, [sp]
   1b364:	4a2b      	ldr	r2, [pc, #172]	; (1b414 <rx_complete_cb+0x45c>)
   1b366:	a904      	add	r1, sp, #16
   1b368:	4630      	mov	r0, r6
   1b36a:	f7f1 fa91 	bl	c890 <uwb_rng_calc_rel_tx>
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
   1b36e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b370:	6b59      	ldr	r1, [r3, #52]	; 0x34
   1b372:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1b376:	4620      	mov	r0, r4
   1b378:	4788      	blx	r1
                memcpy(&frame->local, &frame->remote, sizeof(frame->local));
   1b37a:	f107 0520 	add.w	r5, r7, #32
   1b37e:	2268      	movs	r2, #104	; 0x68
   1b380:	4629      	mov	r1, r5
   1b382:	f107 0088 	add.w	r0, r7, #136	; 0x88
   1b386:	f7f2 fb9b 	bl	dac0 <memcpy>
                uwb_rng_clear_twr_data(&frame->remote);
   1b38a:	4628      	mov	r0, r5
   1b38c:	f7f1 fac0 	bl	c910 <uwb_rng_clear_twr_data>
    return (dev->uw_funcs->uf_start_tx(dev));
   1b390:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b394:	4620      	mov	r0, r4
   1b396:	4798      	blx	r3
                if (uwb_start_tx(inst).start_tx_error) {
   1b398:	f010 0f04 	tst.w	r0, #4
   1b39c:	d117      	bne.n	1b3ce <rx_complete_cb+0x416>
                    DS_STATS_INC(complete);
   1b39e:	4a1e      	ldr	r2, [pc, #120]	; (1b418 <rx_complete_cb+0x460>)
   1b3a0:	6953      	ldr	r3, [r2, #20]
   1b3a2:	3301      	adds	r3, #1
   1b3a4:	6153      	str	r3, [r2, #20]
                    rng->control.complete_after_tx = 1;
   1b3a6:	f896 3070 	ldrb.w	r3, [r6, #112]	; 0x70
   1b3aa:	f043 0302 	orr.w	r3, r3, #2
   1b3ae:	f886 3070 	strb.w	r3, [r6, #112]	; 0x70
    return true;
   1b3b2:	2001      	movs	r0, #1
   1b3b4:	e028      	b.n	1b408 <rx_complete_cb+0x450>
                    SLIST_FOREACH(cbs_i, &inst->interface_cbs, next) {
   1b3b6:	6bad      	ldr	r5, [r5, #56]	; 0x38
   1b3b8:	2d00      	cmp	r5, #0
   1b3ba:	d0bc      	beq.n	1b336 <rx_complete_cb+0x37e>
                        if (cbs_i != NULL && cbs_i->final_cb)
   1b3bc:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1b3be:	2b00      	cmp	r3, #0
   1b3c0:	d0f9      	beq.n	1b3b6 <rx_complete_cb+0x3fe>
                            if(cbs_i->final_cb(inst, cbs_i)) break;
   1b3c2:	4629      	mov	r1, r5
   1b3c4:	4620      	mov	r0, r4
   1b3c6:	4798      	blx	r3
   1b3c8:	2800      	cmp	r0, #0
   1b3ca:	d0f4      	beq.n	1b3b6 <rx_complete_cb+0x3fe>
   1b3cc:	e7b3      	b.n	1b336 <rx_complete_cb+0x37e>
                    DS_STATS_INC(tx_error);
   1b3ce:	4a12      	ldr	r2, [pc, #72]	; (1b418 <rx_complete_cb+0x460>)
   1b3d0:	6993      	ldr	r3, [r2, #24]
   1b3d2:	3301      	adds	r3, #1
   1b3d4:	6193      	str	r3, [r2, #24]
   1b3d6:	f106 0050 	add.w	r0, r6, #80	; 0x50
   1b3da:	f7ee fce3 	bl	9da4 <os_sem_release>
                    rng_issue_complete(inst);
   1b3de:	4620      	mov	r0, r4
   1b3e0:	f7f1 fd4a 	bl	ce78 <rng_issue_complete>
    return true;
   1b3e4:	2001      	movs	r0, #1
   1b3e6:	e00f      	b.n	1b408 <rx_complete_cb+0x450>
                DS_STATS_INC(complete);
   1b3e8:	4a0b      	ldr	r2, [pc, #44]	; (1b418 <rx_complete_cb+0x460>)
   1b3ea:	6953      	ldr	r3, [r2, #20]
   1b3ec:	3301      	adds	r3, #1
   1b3ee:	6153      	str	r3, [r2, #20]
   1b3f0:	f106 0050 	add.w	r0, r6, #80	; 0x50
   1b3f4:	f7ee fcd6 	bl	9da4 <os_sem_release>
                rng_issue_complete(inst);
   1b3f8:	4620      	mov	r0, r4
   1b3fa:	f7f1 fd3d 	bl	ce78 <rng_issue_complete>
    return true;
   1b3fe:	2001      	movs	r0, #1
                break;
   1b400:	e002      	b.n	1b408 <rx_complete_cb+0x450>
        return false;
   1b402:	2000      	movs	r0, #0
}
   1b404:	4770      	bx	lr
        return false;
   1b406:	2000      	movs	r0, #0
}
   1b408:	b009      	add	sp, #36	; 0x24
   1b40a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch(rng->code){
   1b40e:	2000      	movs	r0, #0
   1b410:	e7fa      	b.n	1b408 <rx_complete_cb+0x450>
   1b412:	bf00      	nop
   1b414:	20000e10 	.word	0x20000e10
   1b418:	200045d4 	.word	0x200045d4

0001b41c <twr_ds_ext_pkg_init>:
{
   1b41c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b41e:	b083      	sub	sp, #12
    printf("{\"utime\": %"PRIu32",\"msg\": \"twr_ds_ext_pkg_init\"}\n",
   1b420:	f7f2 fff3 	bl	e40a <dpl_cputime_get32>
   1b424:	4601      	mov	r1, r0
   1b426:	481d      	ldr	r0, [pc, #116]	; (1b49c <twr_ds_ext_pkg_init+0x80>)
   1b428:	f7f2 ff6a 	bl	e300 <printf>
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   1b42c:	2400      	movs	r4, #0
   1b42e:	b174      	cbz	r4, 1b44e <twr_ds_ext_pkg_init+0x32>
    rc = stats_init(
   1b430:	2202      	movs	r2, #2
   1b432:	9200      	str	r2, [sp, #0]
   1b434:	4b1a      	ldr	r3, [pc, #104]	; (1b4a0 <twr_ds_ext_pkg_init+0x84>)
   1b436:	2104      	movs	r1, #4
   1b438:	481a      	ldr	r0, [pc, #104]	; (1b4a4 <twr_ds_ext_pkg_init+0x88>)
   1b43a:	f7f5 fdd9 	bl	10ff0 <stats_init>
    assert(rc == 0);
   1b43e:	bb00      	cbnz	r0, 1b482 <twr_ds_ext_pkg_init+0x66>
    rc = stats_register("twr_ds_ext", STATS_HDR(g_twr_ds_ext_stat));
   1b440:	4918      	ldr	r1, [pc, #96]	; (1b4a4 <twr_ds_ext_pkg_init+0x88>)
   1b442:	4819      	ldr	r0, [pc, #100]	; (1b4a8 <twr_ds_ext_pkg_init+0x8c>)
   1b444:	f7f5 fe5e 	bl	11104 <stats_register>
    assert(rc == 0);
   1b448:	bb08      	cbnz	r0, 1b48e <twr_ds_ext_pkg_init+0x72>
}
   1b44a:	b003      	add	sp, #12
   1b44c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        udev = uwb_dev_idx_lookup(i);
   1b44e:	4620      	mov	r0, r4
   1b450:	f7ed fae0 	bl	8a14 <uwb_dev_idx_lookup>
        if (!udev) {
   1b454:	4607      	mov	r7, r0
   1b456:	b190      	cbz	r0, 1b47e <twr_ds_ext_pkg_init+0x62>
        g_cbs[i].inst_ptr = (struct uwb_rng_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_RNG);
   1b458:	2104      	movs	r1, #4
   1b45a:	f7ed fb60 	bl	8b1e <uwb_mac_find_cb_inst_ptr>
   1b45e:	0126      	lsls	r6, r4, #4
   1b460:	ebc4 1504 	rsb	r5, r4, r4, lsl #4
   1b464:	4b11      	ldr	r3, [pc, #68]	; (1b4ac <twr_ds_ext_pkg_init+0x90>)
   1b466:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   1b46a:	6068      	str	r0, [r5, #4]
        uwb_mac_append_interface(udev, &g_cbs[i]);
   1b46c:	4629      	mov	r1, r5
   1b46e:	4638      	mov	r0, r7
   1b470:	f7ed fb00 	bl	8a74 <uwb_mac_append_interface>
        uwb_rng_append_config(g_cbs[i].inst_ptr, &g_rng_cfgs[i]);
   1b474:	490e      	ldr	r1, [pc, #56]	; (1b4b0 <twr_ds_ext_pkg_init+0x94>)
   1b476:	4431      	add	r1, r6
   1b478:	6868      	ldr	r0, [r5, #4]
   1b47a:	f7f1 f9cf 	bl	c81c <uwb_rng_append_config>
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   1b47e:	3401      	adds	r4, #1
   1b480:	e7d5      	b.n	1b42e <twr_ds_ext_pkg_init+0x12>
    assert(rc == 0);
   1b482:	2300      	movs	r3, #0
   1b484:	461a      	mov	r2, r3
   1b486:	4619      	mov	r1, r3
   1b488:	4618      	mov	r0, r3
   1b48a:	f7ed fd6b 	bl	8f64 <__assert_func>
    assert(rc == 0);
   1b48e:	2300      	movs	r3, #0
   1b490:	461a      	mov	r2, r3
   1b492:	4619      	mov	r1, r3
   1b494:	4618      	mov	r0, r3
   1b496:	f7ed fd65 	bl	8f64 <__assert_func>
   1b49a:	bf00      	nop
   1b49c:	0002489c 	.word	0x0002489c
   1b4a0:	000248d8 	.word	0x000248d8
   1b4a4:	200045d4 	.word	0x200045d4
   1b4a8:	000248cc 	.word	0x000248cc
   1b4ac:	20000dd4 	.word	0x20000dd4
   1b4b0:	20000e20 	.word	0x20000e20

0001b4b4 <twr_ds_ext_free>:
twr_ds_ext_free(struct uwb_dev * inst){
   1b4b4:	b508      	push	{r3, lr}
    assert(inst);
   1b4b6:	b118      	cbz	r0, 1b4c0 <twr_ds_ext_free+0xc>
    uwb_mac_remove_interface(inst, UWBEXT_RNG_DS_EXT);
   1b4b8:	2109      	movs	r1, #9
   1b4ba:	f7ed fb00 	bl	8abe <uwb_mac_remove_interface>
}
   1b4be:	bd08      	pop	{r3, pc}
    assert(inst);
   1b4c0:	2300      	movs	r3, #0
   1b4c2:	461a      	mov	r2, r3
   1b4c4:	4619      	mov	r1, r3
   1b4c6:	4618      	mov	r0, r3
   1b4c8:	f7ed fd4c 	bl	8f64 <__assert_func>

0001b4cc <twr_ds_ext_pkg_down>:
{
   1b4cc:	b538      	push	{r3, r4, r5, lr}
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   1b4ce:	2400      	movs	r4, #0
   1b4d0:	b10c      	cbz	r4, 1b4d6 <twr_ds_ext_pkg_down+0xa>
}
   1b4d2:	2000      	movs	r0, #0
   1b4d4:	bd38      	pop	{r3, r4, r5, pc}
        rng = (struct uwb_rng_instance *)g_cbs[i].inst_ptr;
   1b4d6:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   1b4da:	009a      	lsls	r2, r3, #2
   1b4dc:	4b07      	ldr	r3, [pc, #28]	; (1b4fc <twr_ds_ext_pkg_down+0x30>)
   1b4de:	4413      	add	r3, r2
   1b4e0:	685d      	ldr	r5, [r3, #4]
        if (!rng) continue;
   1b4e2:	b145      	cbz	r5, 1b4f6 <twr_ds_ext_pkg_down+0x2a>
        uwb_rng_remove_config(g_cbs[i].inst_ptr, g_rng_cfgs[i].rng_code);
   1b4e4:	0123      	lsls	r3, r4, #4
   1b4e6:	4a06      	ldr	r2, [pc, #24]	; (1b500 <twr_ds_ext_pkg_down+0x34>)
   1b4e8:	5ad1      	ldrh	r1, [r2, r3]
   1b4ea:	4628      	mov	r0, r5
   1b4ec:	f7f1 f9af 	bl	c84e <uwb_rng_remove_config>
        twr_ds_ext_free(rng->dev_inst);
   1b4f0:	6828      	ldr	r0, [r5, #0]
   1b4f2:	f7ff ffdf 	bl	1b4b4 <twr_ds_ext_free>
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   1b4f6:	3401      	adds	r4, #1
   1b4f8:	e7ea      	b.n	1b4d0 <twr_ds_ext_pkg_down+0x4>
   1b4fa:	bf00      	nop
   1b4fc:	20000dd4 	.word	0x20000dd4
   1b500:	20000e20 	.word	0x20000e20
   1b504:	00000000 	.word	0x00000000

0001b508 <rx_complete_cb>:
 *
 * @return true on sucess
 */
static bool
rx_complete_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
   1b508:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b50c:	b089      	sub	sp, #36	; 0x24
    twr_frame_t * frame;
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
   1b50e:	684d      	ldr	r5, [r1, #4]
    if (inst->fctrl != FCNTL_IEEE_RANGE_16)
   1b510:	f8b0 24e0 	ldrh.w	r2, [r0, #1248]	; 0x4e0
   1b514:	f648 0341 	movw	r3, #34881	; 0x8841
   1b518:	429a      	cmp	r2, r3
   1b51a:	f040 813b 	bne.w	1b794 <rx_complete_cb+0x28c>
   1b51e:	4604      	mov	r4, r0
        return false;

    assert(rng);
   1b520:	b30d      	cbz	r5, 1b566 <rx_complete_cb+0x5e>
   1b522:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
    if(dpl_sem_get_count(&rng->sem) == 1) // unsolicited inbound
   1b526:	2b01      	cmp	r3, #1
   1b528:	f000 8138 	beq.w	1b79c <rx_complete_cb+0x294>
        return false;

    frame = rng->frames[(rng->idx)%rng->nframes]; // Frame already read within loader layers.
   1b52c:	f8b5 3076 	ldrh.w	r3, [r5, #118]	; 0x76
   1b530:	f8b5 207a 	ldrh.w	r2, [r5, #122]	; 0x7a
   1b534:	fbb3 f1f2 	udiv	r1, r3, r2
   1b538:	fb02 3311 	mls	r3, r2, r1, r3
   1b53c:	b29b      	uxth	r3, r3
   1b53e:	3326      	adds	r3, #38	; 0x26
   1b540:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   1b544:	685e      	ldr	r6, [r3, #4]

    switch(rng->code){
   1b546:	f8b5 304c 	ldrh.w	r3, [r5, #76]	; 0x4c
   1b54a:	f240 1211 	movw	r2, #273	; 0x111
   1b54e:	4293      	cmp	r3, r2
   1b550:	f000 809e 	beq.w	1b690 <rx_complete_cb+0x188>
   1b554:	f5b3 7f89 	cmp.w	r3, #274	; 0x112
   1b558:	f000 8109 	beq.w	1b76e <rx_complete_cb+0x266>
   1b55c:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
   1b560:	d007      	beq.n	1b572 <rx_complete_cb+0x6a>
   1b562:	2000      	movs	r0, #0
   1b564:	e117      	b.n	1b796 <rx_complete_cb+0x28e>
    assert(rng);
   1b566:	2300      	movs	r3, #0
   1b568:	461a      	mov	r2, r3
   1b56a:	4619      	mov	r1, r3
   1b56c:	4618      	mov	r0, r3
   1b56e:	f7ed fcf9 	bl	8f64 <__assert_func>
        case UWB_DATA_CODE_SS_TWR:
            {
                // This code executes on the device that is responding to a request
                uint64_t request_timestamp = inst->rxtimestamp;
   1b572:	f500 639e 	add.w	r3, r0, #1264	; 0x4f0
   1b576:	e953 8902 	ldrd	r8, r9, [r3, #-8]
                struct uwb_rng_txd txd;
                uwb_rng_calc_rel_tx(rng, &txd, &g_config, request_timestamp, inst->frame_len);
   1b57a:	f8b0 34e2 	ldrh.w	r3, [r0, #1250]	; 0x4e2
   1b57e:	9302      	str	r3, [sp, #8]
   1b580:	e9cd 8900 	strd	r8, r9, [sp]
   1b584:	4a88      	ldr	r2, [pc, #544]	; (1b7a8 <rx_complete_cb+0x2a0>)
   1b586:	a904      	add	r1, sp, #16
   1b588:	4628      	mov	r0, r5
   1b58a:	f7f1 f981 	bl	c890 <uwb_rng_calc_rel_tx>

#if MYNEWT_VAL(UWB_WCS_ENABLED)
                struct uwb_wcs_instance * wcs = rng->ccp_inst->wcs;
   1b58e:	686b      	ldr	r3, [r5, #4]
   1b590:	6e9f      	ldr	r7, [r3, #104]	; 0x68
                frame->reception_timestamp = (uint32_t)(uwb_wcs_local_to_master(wcs, request_timestamp)) & 0xFFFFFFFFULL;
   1b592:	4642      	mov	r2, r8
   1b594:	464b      	mov	r3, r9
   1b596:	4638      	mov	r0, r7
   1b598:	f7f2 f906 	bl	d7a8 <uwb_wcs_local_to_master>
   1b59c:	f8c6 000b 	str.w	r0, [r6, #11]
                frame->transmission_timestamp = (uint32_t)(uwb_wcs_local_to_master(wcs, txd.response_timestamp)) & 0xFFFFFFFFULL;
   1b5a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1b5a4:	4638      	mov	r0, r7
   1b5a6:	f7f2 f8ff 	bl	d7a8 <uwb_wcs_local_to_master>
   1b5aa:	f8c6 000f 	str.w	r0, [r6, #15]
#else
                frame->reception_timestamp = request_timestamp & 0xFFFFFFFFULL;
                frame->transmission_timestamp = txd.response_timestamp & 0xFFFFFFFFULL;
#endif

                frame->dst_address = frame->src_address;
   1b5ae:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   1b5b2:	f8a6 3005 	strh.w	r3, [r6, #5]
                frame->src_address = inst->my_short_address;
   1b5b6:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
   1b5ba:	f8a6 3007 	strh.w	r3, [r6, #7]
                frame->code = UWB_DATA_CODE_SS_TWR_T1;
   1b5be:	2700      	movs	r7, #0
   1b5c0:	2311      	movs	r3, #17
   1b5c2:	7273      	strb	r3, [r6, #9]
   1b5c4:	2301      	movs	r3, #1
   1b5c6:	72b3      	strb	r3, [r6, #10]

#if MYNEWT_VAL(UWB_WCS_ENABLED)
                frame->carrier_integrator  = 0l;
   1b5c8:	76f7      	strb	r7, [r6, #27]
   1b5ca:	7737      	strb	r7, [r6, #28]
   1b5cc:	7777      	strb	r7, [r6, #29]
   1b5ce:	77b7      	strb	r7, [r6, #30]
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
   1b5d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b5d2:	f8d3 8044 	ldr.w	r8, [r3, #68]	; 0x44
   1b5d6:	2313      	movs	r3, #19
   1b5d8:	463a      	mov	r2, r7
   1b5da:	4631      	mov	r1, r6
   1b5dc:	4620      	mov	r0, r4
   1b5de:	47c0      	blx	r8
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
   1b5e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b5e2:	6c9e      	ldr	r6, [r3, #72]	; 0x48
   1b5e4:	463b      	mov	r3, r7
   1b5e6:	463a      	mov	r2, r7
   1b5e8:	2113      	movs	r1, #19
   1b5ea:	4620      	mov	r0, r4
   1b5ec:	47b0      	blx	r6
    return (dev->uw_funcs->uf_set_wait4resp(dev, enable));
   1b5ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b5f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1b5f2:	2101      	movs	r1, #1
   1b5f4:	4620      	mov	r0, r4
   1b5f6:	4798      	blx	r3
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
   1b5f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b5fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
   1b5fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1b600:	4620      	mov	r0, r4
   1b602:	4788      	blx	r1
    return (dev->uw_funcs->uf_start_tx(dev));
   1b604:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b608:	4620      	mov	r0, r4
   1b60a:	4798      	blx	r3
                uwb_write_tx_fctrl(inst, sizeof(ieee_rng_response_frame_t), 0);
                uwb_set_wait4resp(inst, true);
                uwb_set_delay_start(inst, txd.response_tx_delay);

                /* Start tx now, the remaining settings can be done whilst sending anyway */
                if (uwb_start_tx(inst).start_tx_error){
   1b60c:	f010 0f04 	tst.w	r0, #4
   1b610:	d135      	bne.n	1b67e <rx_complete_cb+0x176>
                    SS_STATS_INC(tx_error);
                    dpl_sem_release(&rng->sem);
                }

                /* Setup when to listen for response, relative the end of our transmitted frame */
                uwb_set_wait4resp_delay(inst, g_config.tx_holdoff_delay -
   1b612:	4d65      	ldr	r5, [pc, #404]	; (1b7a8 <rx_complete_cb+0x2a0>)
   1b614:	6869      	ldr	r1, [r5, #4]
                                        inst->config.rx.timeToRxStable);
   1b616:	f894 251b 	ldrb.w	r2, [r4, #1307]	; 0x51b
    return (dev->uw_funcs->uf_set_wait4resp_delay(dev, delay));
   1b61a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b61c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   1b61e:	1a89      	subs	r1, r1, r2
   1b620:	4620      	mov	r0, r4
   1b622:	4798      	blx	r3
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
   1b624:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b626:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1b628:	211f      	movs	r1, #31
   1b62a:	4620      	mov	r0, r4
   1b62c:	4798      	blx	r3
                uwb_set_rx_timeout(inst, uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst, sizeof(twr_frame_final_t))) +
   1b62e:	f005 fe55 	bl	212dc <__aeabi_i2d>
   1b632:	a35b      	add	r3, pc, #364	; (adr r3, 1b7a0 <rx_complete_cb+0x298>)
   1b634:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b638:	f005 ffe4 	bl	21604 <__aeabi_ddiv>
   1b63c:	4606      	mov	r6, r0
   1b63e:	460f      	mov	r7, r1
   1b640:	89a8      	ldrh	r0, [r5, #12]
   1b642:	f005 fe4b 	bl	212dc <__aeabi_i2d>
   1b646:	4632      	mov	r2, r6
   1b648:	463b      	mov	r3, r7
   1b64a:	f005 fcfb 	bl	21044 <__adddf3>
   1b64e:	4606      	mov	r6, r0
   1b650:	460f      	mov	r7, r1
                                   g_config.rx_timeout_delay + inst->config.rx.timeToRxStable);
   1b652:	f894 051b 	ldrb.w	r0, [r4, #1307]	; 0x51b
   1b656:	f005 fe41 	bl	212dc <__aeabi_i2d>
   1b65a:	4632      	mov	r2, r6
   1b65c:	463b      	mov	r3, r7
   1b65e:	f005 fcf1 	bl	21044 <__adddf3>
                uwb_set_rx_timeout(inst, uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst, sizeof(twr_frame_final_t))) +
   1b662:	f006 f97d 	bl	21960 <__aeabi_d2uiz>
   1b666:	4601      	mov	r1, r0
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
   1b668:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b66a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b66c:	4620      	mov	r0, r4
   1b66e:	4798      	blx	r3
    return (dev->uw_funcs->uf_set_rxauto_disable(dev, disable));
   1b670:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1b674:	2101      	movs	r1, #1
   1b676:	4620      	mov	r0, r4
   1b678:	4798      	blx	r3
        default:
                return false;
                break;
    }

    return true;
   1b67a:	2001      	movs	r0, #1
   1b67c:	e08b      	b.n	1b796 <rx_complete_cb+0x28e>
                    SS_STATS_INC(tx_error);
   1b67e:	4a4b      	ldr	r2, [pc, #300]	; (1b7ac <rx_complete_cb+0x2a4>)
   1b680:	6993      	ldr	r3, [r2, #24]
   1b682:	3301      	adds	r3, #1
   1b684:	6193      	str	r3, [r2, #24]
   1b686:	f105 0050 	add.w	r0, r5, #80	; 0x50
   1b68a:	f7ee fb8b 	bl	9da4 <os_sem_release>
   1b68e:	e7c0      	b.n	1b612 <rx_complete_cb+0x10a>
                uint64_t response_timestamp = inst->rxtimestamp;
   1b690:	f500 639e 	add.w	r3, r0, #1264	; 0x4f0
   1b694:	e953 8902 	ldrd	r8, r9, [r3, #-8]
                if (inst->frame_len != sizeof(ieee_rng_response_frame_t))
   1b698:	f8b0 34e2 	ldrh.w	r3, [r0, #1250]	; 0x4e2
   1b69c:	2b13      	cmp	r3, #19
   1b69e:	d001      	beq.n	1b6a4 <rx_complete_cb+0x19c>
    return true;
   1b6a0:	2001      	movs	r0, #1
   1b6a2:	e078      	b.n	1b796 <rx_complete_cb+0x28e>
                if(inst->status.lde_error)
   1b6a4:	f890 2509 	ldrb.w	r2, [r0, #1289]	; 0x509
   1b6a8:	f012 0f04 	tst.w	r2, #4
   1b6ac:	d1f8      	bne.n	1b6a0 <rx_complete_cb+0x198>
                uwb_rng_calc_rel_tx(rng, &txd, &g_config, response_timestamp, inst->frame_len);
   1b6ae:	9302      	str	r3, [sp, #8]
   1b6b0:	e9cd 8900 	strd	r8, r9, [sp]
   1b6b4:	4a3c      	ldr	r2, [pc, #240]	; (1b7a8 <rx_complete_cb+0x2a0>)
   1b6b6:	a904      	add	r1, sp, #16
   1b6b8:	4628      	mov	r0, r5
   1b6ba:	f7f1 f8e9 	bl	c890 <uwb_rng_calc_rel_tx>
                struct uwb_wcs_instance * wcs = rng->ccp_inst->wcs;
   1b6be:	686b      	ldr	r3, [r5, #4]
   1b6c0:	6e9f      	ldr	r7, [r3, #104]	; 0x68
    return (dev->uw_funcs->uf_read_txtime(dev));
   1b6c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b6c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   1b6c6:	4620      	mov	r0, r4
   1b6c8:	4798      	blx	r3
   1b6ca:	4602      	mov	r2, r0
   1b6cc:	460b      	mov	r3, r1
                frame->request_timestamp = (uint32_t)(uwb_wcs_local_to_master(wcs, uwb_read_txtime(inst))) & 0xFFFFFFFFULL;
   1b6ce:	4638      	mov	r0, r7
   1b6d0:	f7f2 f86a 	bl	d7a8 <uwb_wcs_local_to_master>
   1b6d4:	f8c6 0013 	str.w	r0, [r6, #19]
                frame->response_timestamp = (uint32_t)(uwb_wcs_local_to_master(wcs, response_timestamp)) & 0xFFFFFFFFULL;
   1b6d8:	4642      	mov	r2, r8
   1b6da:	464b      	mov	r3, r9
   1b6dc:	4638      	mov	r0, r7
   1b6de:	f7f2 f863 	bl	d7a8 <uwb_wcs_local_to_master>
   1b6e2:	f8c6 0017 	str.w	r0, [r6, #23]
                frame->dst_address = frame->src_address;
   1b6e6:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   1b6ea:	f8a6 3005 	strh.w	r3, [r6, #5]
                frame->src_address = inst->my_short_address;
   1b6ee:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
   1b6f2:	f8a6 3007 	strh.w	r3, [r6, #7]
                frame->code = UWB_DATA_CODE_SS_TWR_FINAL;
   1b6f6:	2700      	movs	r7, #0
   1b6f8:	2312      	movs	r3, #18
   1b6fa:	7273      	strb	r3, [r6, #9]
   1b6fc:	2301      	movs	r3, #1
   1b6fe:	72b3      	strb	r3, [r6, #10]
                frame->carrier_integrator = inst->carrier_integrator;
   1b700:	f8d4 34f0 	ldr.w	r3, [r4, #1264]	; 0x4f0
   1b704:	f8c6 301b 	str.w	r3, [r6, #27]
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
   1b708:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b70a:	f8d3 8044 	ldr.w	r8, [r3, #68]	; 0x44
   1b70e:	231f      	movs	r3, #31
   1b710:	463a      	mov	r2, r7
   1b712:	4631      	mov	r1, r6
   1b714:	4620      	mov	r0, r4
   1b716:	47c0      	blx	r8
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
   1b718:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b71a:	6c9e      	ldr	r6, [r3, #72]	; 0x48
   1b71c:	463b      	mov	r3, r7
   1b71e:	463a      	mov	r2, r7
   1b720:	211f      	movs	r1, #31
   1b722:	4620      	mov	r0, r4
   1b724:	47b0      	blx	r6
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
   1b726:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b728:	6b59      	ldr	r1, [r3, #52]	; 0x34
   1b72a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1b72e:	4620      	mov	r0, r4
   1b730:	4788      	blx	r1
    return (dev->uw_funcs->uf_start_tx(dev));
   1b732:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b736:	4620      	mov	r0, r4
   1b738:	4798      	blx	r3
                if (uwb_start_tx(inst).start_tx_error) {
   1b73a:	f010 0f04 	tst.w	r0, #4
   1b73e:	d10a      	bne.n	1b756 <rx_complete_cb+0x24e>
                    SS_STATS_INC(complete);
   1b740:	4a1a      	ldr	r2, [pc, #104]	; (1b7ac <rx_complete_cb+0x2a4>)
   1b742:	6953      	ldr	r3, [r2, #20]
   1b744:	3301      	adds	r3, #1
   1b746:	6153      	str	r3, [r2, #20]
                    rng->control.complete_after_tx = 1;
   1b748:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
   1b74c:	f043 0302 	orr.w	r3, r3, #2
   1b750:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
   1b754:	e7a4      	b.n	1b6a0 <rx_complete_cb+0x198>
                    SS_STATS_INC(tx_error);
   1b756:	4a15      	ldr	r2, [pc, #84]	; (1b7ac <rx_complete_cb+0x2a4>)
   1b758:	6993      	ldr	r3, [r2, #24]
   1b75a:	3301      	adds	r3, #1
   1b75c:	6193      	str	r3, [r2, #24]
   1b75e:	f105 0050 	add.w	r0, r5, #80	; 0x50
   1b762:	f7ee fb1f 	bl	9da4 <os_sem_release>
                    rng_issue_complete(inst);
   1b766:	4620      	mov	r0, r4
   1b768:	f7f1 fb86 	bl	ce78 <rng_issue_complete>
   1b76c:	e798      	b.n	1b6a0 <rx_complete_cb+0x198>
                if (inst->frame_len != sizeof(twr_frame_final_t))
   1b76e:	f8b0 34e2 	ldrh.w	r3, [r0, #1250]	; 0x4e2
   1b772:	2b1f      	cmp	r3, #31
   1b774:	d001      	beq.n	1b77a <rx_complete_cb+0x272>
    return true;
   1b776:	2001      	movs	r0, #1
   1b778:	e00d      	b.n	1b796 <rx_complete_cb+0x28e>
                SS_STATS_INC(complete);
   1b77a:	4a0c      	ldr	r2, [pc, #48]	; (1b7ac <rx_complete_cb+0x2a4>)
   1b77c:	6953      	ldr	r3, [r2, #20]
   1b77e:	3301      	adds	r3, #1
   1b780:	6153      	str	r3, [r2, #20]
   1b782:	f105 0050 	add.w	r0, r5, #80	; 0x50
   1b786:	f7ee fb0d 	bl	9da4 <os_sem_release>
                rng_issue_complete(inst);
   1b78a:	4620      	mov	r0, r4
   1b78c:	f7f1 fb74 	bl	ce78 <rng_issue_complete>
    return true;
   1b790:	2001      	movs	r0, #1
                break;
   1b792:	e000      	b.n	1b796 <rx_complete_cb+0x28e>
        return false;
   1b794:	2000      	movs	r0, #0
}
   1b796:	b009      	add	sp, #36	; 0x24
   1b798:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return false;
   1b79c:	2000      	movs	r0, #0
   1b79e:	e7fa      	b.n	1b796 <rx_complete_cb+0x28e>
   1b7a0:	90690691 	.word	0x90690691
   1b7a4:	3ff06906 	.word	0x3ff06906
   1b7a8:	20000e6c 	.word	0x20000e6c
   1b7ac:	200045f0 	.word	0x200045f0

0001b7b0 <twr_ss_pkg_init>:
{
   1b7b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b7b2:	b083      	sub	sp, #12
    printf("{\"utime\": %"PRIu32",\"msg\": \"twr_ss_pkg_init\"}\n",
   1b7b4:	f7f2 fe29 	bl	e40a <dpl_cputime_get32>
   1b7b8:	4601      	mov	r1, r0
   1b7ba:	481e      	ldr	r0, [pc, #120]	; (1b834 <twr_ss_pkg_init+0x84>)
   1b7bc:	f7f2 fda0 	bl	e300 <printf>
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   1b7c0:	2400      	movs	r4, #0
   1b7c2:	b18c      	cbz	r4, 1b7e8 <twr_ss_pkg_init+0x38>
    rc = stats_init(
   1b7c4:	2202      	movs	r2, #2
   1b7c6:	9200      	str	r2, [sp, #0]
   1b7c8:	4b1b      	ldr	r3, [pc, #108]	; (1b838 <twr_ss_pkg_init+0x88>)
   1b7ca:	2104      	movs	r1, #4
   1b7cc:	481b      	ldr	r0, [pc, #108]	; (1b83c <twr_ss_pkg_init+0x8c>)
   1b7ce:	f7f5 fc0f 	bl	10ff0 <stats_init>
    assert(rc == 0);
   1b7d2:	4604      	mov	r4, r0
   1b7d4:	bb10      	cbnz	r0, 1b81c <twr_ss_pkg_init+0x6c>
    rc |= stats_register("twr_ss", STATS_HDR(g_twr_ss_stat));
   1b7d6:	4919      	ldr	r1, [pc, #100]	; (1b83c <twr_ss_pkg_init+0x8c>)
   1b7d8:	4819      	ldr	r0, [pc, #100]	; (1b840 <twr_ss_pkg_init+0x90>)
   1b7da:	f7f5 fc93 	bl	11104 <stats_register>
    assert(rc == 0);
   1b7de:	ea54 0300 	orrs.w	r3, r4, r0
   1b7e2:	d121      	bne.n	1b828 <twr_ss_pkg_init+0x78>
}
   1b7e4:	b003      	add	sp, #12
   1b7e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        udev = uwb_dev_idx_lookup(i);
   1b7e8:	4620      	mov	r0, r4
   1b7ea:	f7ed f913 	bl	8a14 <uwb_dev_idx_lookup>
        if (!udev) {
   1b7ee:	4607      	mov	r7, r0
   1b7f0:	b190      	cbz	r0, 1b818 <twr_ss_pkg_init+0x68>
        g_cbs[i].inst_ptr = (struct uwb_rng_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_RNG);
   1b7f2:	2104      	movs	r1, #4
   1b7f4:	f7ed f993 	bl	8b1e <uwb_mac_find_cb_inst_ptr>
   1b7f8:	0126      	lsls	r6, r4, #4
   1b7fa:	ebc4 1504 	rsb	r5, r4, r4, lsl #4
   1b7fe:	4b11      	ldr	r3, [pc, #68]	; (1b844 <twr_ss_pkg_init+0x94>)
   1b800:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   1b804:	6068      	str	r0, [r5, #4]
        uwb_mac_append_interface(udev, &g_cbs[i]);
   1b806:	4629      	mov	r1, r5
   1b808:	4638      	mov	r0, r7
   1b80a:	f7ed f933 	bl	8a74 <uwb_mac_append_interface>
        uwb_rng_append_config(g_cbs[i].inst_ptr, &g_rng_cfgs[i]);
   1b80e:	490e      	ldr	r1, [pc, #56]	; (1b848 <twr_ss_pkg_init+0x98>)
   1b810:	4431      	add	r1, r6
   1b812:	6868      	ldr	r0, [r5, #4]
   1b814:	f7f1 f802 	bl	c81c <uwb_rng_append_config>
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   1b818:	3401      	adds	r4, #1
   1b81a:	e7d2      	b.n	1b7c2 <twr_ss_pkg_init+0x12>
    assert(rc == 0);
   1b81c:	2300      	movs	r3, #0
   1b81e:	461a      	mov	r2, r3
   1b820:	4619      	mov	r1, r3
   1b822:	4618      	mov	r0, r3
   1b824:	f7ed fb9e 	bl	8f64 <__assert_func>
    assert(rc == 0);
   1b828:	2300      	movs	r3, #0
   1b82a:	461a      	mov	r2, r3
   1b82c:	4619      	mov	r1, r3
   1b82e:	4618      	mov	r0, r3
   1b830:	f7ed fb98 	bl	8f64 <__assert_func>
   1b834:	000248e4 	.word	0x000248e4
   1b838:	00024918 	.word	0x00024918
   1b83c:	200045f0 	.word	0x200045f0
   1b840:	00024910 	.word	0x00024910
   1b844:	20000e30 	.word	0x20000e30
   1b848:	20000e7c 	.word	0x20000e7c

0001b84c <twr_ss_free>:
{
   1b84c:	b508      	push	{r3, lr}
    assert(dev);
   1b84e:	b118      	cbz	r0, 1b858 <twr_ss_free+0xc>
    uwb_mac_remove_interface(dev, UWBEXT_RNG_SS);
   1b850:	2105      	movs	r1, #5
   1b852:	f7ed f934 	bl	8abe <uwb_mac_remove_interface>
}
   1b856:	bd08      	pop	{r3, pc}
    assert(dev);
   1b858:	2300      	movs	r3, #0
   1b85a:	461a      	mov	r2, r3
   1b85c:	4619      	mov	r1, r3
   1b85e:	4618      	mov	r0, r3
   1b860:	f7ed fb80 	bl	8f64 <__assert_func>

0001b864 <twr_ss_pkg_down>:
{
   1b864:	b538      	push	{r3, r4, r5, lr}
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   1b866:	2400      	movs	r4, #0
   1b868:	b10c      	cbz	r4, 1b86e <twr_ss_pkg_down+0xa>
}
   1b86a:	2000      	movs	r0, #0
   1b86c:	bd38      	pop	{r3, r4, r5, pc}
        rng = (struct uwb_rng_instance *)g_cbs[i].inst_ptr;
   1b86e:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   1b872:	009a      	lsls	r2, r3, #2
   1b874:	4b07      	ldr	r3, [pc, #28]	; (1b894 <twr_ss_pkg_down+0x30>)
   1b876:	4413      	add	r3, r2
   1b878:	685d      	ldr	r5, [r3, #4]
        if (!rng) continue;
   1b87a:	b145      	cbz	r5, 1b88e <twr_ss_pkg_down+0x2a>
        uwb_rng_remove_config(g_cbs[i].inst_ptr, g_rng_cfgs[i].rng_code);
   1b87c:	0123      	lsls	r3, r4, #4
   1b87e:	4a06      	ldr	r2, [pc, #24]	; (1b898 <twr_ss_pkg_down+0x34>)
   1b880:	5ad1      	ldrh	r1, [r2, r3]
   1b882:	4628      	mov	r0, r5
   1b884:	f7f0 ffe3 	bl	c84e <uwb_rng_remove_config>
        twr_ss_free(rng->dev_inst);
   1b888:	6828      	ldr	r0, [r5, #0]
   1b88a:	f7ff ffdf 	bl	1b84c <twr_ss_free>
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   1b88e:	3401      	adds	r4, #1
   1b890:	e7ea      	b.n	1b868 <twr_ss_pkg_down+0x4>
   1b892:	bf00      	nop
   1b894:	20000e30 	.word	0x20000e30
   1b898:	20000e7c 	.word	0x20000e7c
   1b89c:	00000000 	.word	0x00000000

0001b8a0 <rx_complete_cb>:
 *
 * @return true on sucess
 */
static bool
rx_complete_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
   1b8a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b8a4:	4605      	mov	r5, r0
    twr_frame_t * frame;
    if (inst->fctrl != FCNTL_IEEE_RANGE_16 &&
   1b8a6:	f8b0 34e0 	ldrh.w	r3, [r0, #1248]	; 0x4e0
   1b8aa:	f648 0241 	movw	r2, #34881	; 0x8841
   1b8ae:	4293      	cmp	r3, r2
   1b8b0:	d006      	beq.n	1b8c0 <rx_complete_cb+0x20>
   1b8b2:	f648 0261 	movw	r2, #34913	; 0x8861
   1b8b6:	4293      	cmp	r3, r2
   1b8b8:	d002      	beq.n	1b8c0 <rx_complete_cb+0x20>
        inst->fctrl != (FCNTL_IEEE_RANGE_16|UWB_FCTRL_ACK_REQUESTED) &&
   1b8ba:	2b02      	cmp	r3, #2
   1b8bc:	f040 8128 	bne.w	1bb10 <rx_complete_cb+0x270>
        inst->fctrl != UWB_FCTRL_FRAME_TYPE_ACK) {
        return false;
    }

    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
   1b8c0:	684c      	ldr	r4, [r1, #4]
    assert(rng);
   1b8c2:	b394      	cbz	r4, 1b92a <rx_complete_cb+0x8a>
   1b8c4:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
    if(dpl_sem_get_count(&rng->sem) == 1) // unsolicited inbound
   1b8c8:	2a01      	cmp	r2, #1
   1b8ca:	f000 8123 	beq.w	1bb14 <rx_complete_cb+0x274>
        return false;

    if (inst->fctrl == UWB_FCTRL_FRAME_TYPE_ACK && !rng->status.rx_ack_expected) {
   1b8ce:	2b02      	cmp	r3, #2
   1b8d0:	d031      	beq.n	1b936 <rx_complete_cb+0x96>
        return false;
    }
    rng->status.rx_ack_expected = 0;
   1b8d2:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   1b8d6:	f36f 1345 	bfc	r3, #5, #1
   1b8da:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
    rng->status.tx_ack_expected = 0;
   1b8de:	b2db      	uxtb	r3, r3
   1b8e0:	f36f 1304 	bfc	r3, #4, #1
   1b8e4:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
    frame = rng->frames[(rng->idx)%rng->nframes]; // Frame already read within loader layers.
   1b8e8:	f8b4 3076 	ldrh.w	r3, [r4, #118]	; 0x76
   1b8ec:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
   1b8f0:	fbb3 f1f2 	udiv	r1, r3, r2
   1b8f4:	fb02 3311 	mls	r3, r2, r1, r3
   1b8f8:	b29b      	uxth	r3, r3
   1b8fa:	3326      	adds	r3, #38	; 0x26
   1b8fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   1b900:	685e      	ldr	r6, [r3, #4]

    /* Receive the ack response from the other side and store timestamp */
    if (inst->fctrl == UWB_FCTRL_FRAME_TYPE_ACK) {
   1b902:	f8b5 34e0 	ldrh.w	r3, [r5, #1248]	; 0x4e0
   1b906:	2b02      	cmp	r3, #2
   1b908:	d01c      	beq.n	1b944 <rx_complete_cb+0xa4>
        /* Need to set, not just adjust, timeout here */
        uwb_set_rx_timeout(inst, g_config.tx_holdoff_delay + frame_duration + g_config.rx_timeout_delay);
        return true;
    }

    switch(rng->code){
   1b90a:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
   1b90e:	f240 1219 	movw	r2, #281	; 0x119
   1b912:	4293      	cmp	r3, r2
   1b914:	d07c      	beq.n	1ba10 <rx_complete_cb+0x170>
   1b916:	f5b3 7f8d 	cmp.w	r3, #282	; 0x11a
   1b91a:	f000 80e6 	beq.w	1baea <rx_complete_cb+0x24a>
   1b91e:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
   1b922:	d040      	beq.n	1b9a6 <rx_complete_cb+0x106>
   1b924:	2000      	movs	r0, #0
                return false;
                break;
    }

    return true;
}
   1b926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    assert(rng);
   1b92a:	2300      	movs	r3, #0
   1b92c:	461a      	mov	r2, r3
   1b92e:	4619      	mov	r1, r3
   1b930:	4618      	mov	r0, r3
   1b932:	f7ed fb17 	bl	8f64 <__assert_func>
    if (inst->fctrl == UWB_FCTRL_FRAME_TYPE_ACK && !rng->status.rx_ack_expected) {
   1b936:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   1b93a:	f013 0f20 	tst.w	r3, #32
   1b93e:	d1c8      	bne.n	1b8d2 <rx_complete_cb+0x32>
        return false;
   1b940:	2000      	movs	r0, #0
   1b942:	e7f0      	b.n	1b926 <rx_complete_cb+0x86>
        if (inst->rxbuf[2] != (rng->seq_num&0xff)) {
   1b944:	f8d5 34fc 	ldr.w	r3, [r5, #1276]	; 0x4fc
   1b948:	789a      	ldrb	r2, [r3, #2]
   1b94a:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
   1b94e:	429a      	cmp	r2, r3
   1b950:	d11f      	bne.n	1b992 <rx_complete_cb+0xf2>
        rng->ack_rx_timestamp = inst->rxtimestamp;
   1b952:	f505 639e 	add.w	r3, r5, #1264	; 0x4f0
   1b956:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   1b95a:	e9c4 2320 	strd	r2, r3, [r4, #128]	; 0x80
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
   1b95e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1b960:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1b962:	2113      	movs	r1, #19
   1b964:	4628      	mov	r0, r5
   1b966:	4798      	blx	r3
        uint16_t frame_duration = uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst,sizeof(ieee_rng_response_frame_t)));
   1b968:	f005 fcb8 	bl	212dc <__aeabi_i2d>
   1b96c:	a36e      	add	r3, pc, #440	; (adr r3, 1bb28 <rx_complete_cb+0x288>)
   1b96e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b972:	f005 fe47 	bl	21604 <__aeabi_ddiv>
   1b976:	f005 fff3 	bl	21960 <__aeabi_d2uiz>
        uwb_set_rx_timeout(inst, g_config.tx_holdoff_delay + frame_duration + g_config.rx_timeout_delay);
   1b97a:	4b69      	ldr	r3, [pc, #420]	; (1bb20 <rx_complete_cb+0x280>)
   1b97c:	6859      	ldr	r1, [r3, #4]
   1b97e:	fa11 f080 	uxtah	r0, r1, r0
   1b982:	8999      	ldrh	r1, [r3, #12]
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
   1b984:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1b986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b988:	4401      	add	r1, r0
   1b98a:	4628      	mov	r0, r5
   1b98c:	4798      	blx	r3
        return true;
   1b98e:	2001      	movs	r0, #1
   1b990:	e7c9      	b.n	1b926 <rx_complete_cb+0x86>
            SS_STATS_INC(ack_seq_err);
   1b992:	4a64      	ldr	r2, [pc, #400]	; (1bb24 <rx_complete_cb+0x284>)
   1b994:	6a53      	ldr	r3, [r2, #36]	; 0x24
   1b996:	3301      	adds	r3, #1
   1b998:	6253      	str	r3, [r2, #36]	; 0x24
   1b99a:	f104 0050 	add.w	r0, r4, #80	; 0x50
   1b99e:	f7ee fa01 	bl	9da4 <os_sem_release>
            return false;
   1b9a2:	2000      	movs	r0, #0
   1b9a4:	e7bf      	b.n	1b926 <rx_complete_cb+0x86>
                if (!inst->status.autoack_triggered) {
   1b9a6:	f895 3509 	ldrb.w	r3, [r5, #1289]	; 0x509
   1b9aa:	f013 0f40 	tst.w	r3, #64	; 0x40
   1b9ae:	d025      	beq.n	1b9fc <rx_complete_cb+0x15c>
                uint64_t request_timestamp = inst->rxtimestamp;
   1b9b0:	f505 639e 	add.w	r3, r5, #1264	; 0x4f0
                struct uwb_wcs_instance * wcs = rng->ccp_inst->wcs;
   1b9b4:	6861      	ldr	r1, [r4, #4]
                frame->reception_timestamp = (uint32_t)(uwb_wcs_local_to_master(wcs, request_timestamp)) & 0xFFFFFFFFULL;
   1b9b6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   1b9ba:	6e88      	ldr	r0, [r1, #104]	; 0x68
   1b9bc:	f7f1 fef4 	bl	d7a8 <uwb_wcs_local_to_master>
   1b9c0:	f8c6 000b 	str.w	r0, [r6, #11]
                frame->fctrl = FCNTL_IEEE_RANGE_16;
   1b9c4:	f648 0341 	movw	r3, #34881	; 0x8841
   1b9c8:	8033      	strh	r3, [r6, #0]
                frame->dst_address = frame->src_address;
   1b9ca:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   1b9ce:	f8a6 3005 	strh.w	r3, [r6, #5]
                frame->src_address = inst->my_short_address;
   1b9d2:	f8b5 34b6 	ldrh.w	r3, [r5, #1206]	; 0x4b6
   1b9d6:	f8a6 3007 	strh.w	r3, [r6, #7]
                frame->code = UWB_DATA_CODE_SS_TWR_ACK_T1;
   1b9da:	2300      	movs	r3, #0
   1b9dc:	2219      	movs	r2, #25
   1b9de:	7272      	strb	r2, [r6, #9]
   1b9e0:	2201      	movs	r2, #1
   1b9e2:	72b2      	strb	r2, [r6, #10]
                frame->carrier_integrator  = 0l;
   1b9e4:	76f3      	strb	r3, [r6, #27]
   1b9e6:	7733      	strb	r3, [r6, #28]
   1b9e8:	7773      	strb	r3, [r6, #29]
   1b9ea:	77b3      	strb	r3, [r6, #30]
                rng->status.tx_ack_expected = 1;
   1b9ec:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   1b9f0:	f043 0310 	orr.w	r3, r3, #16
   1b9f4:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
    return true;
   1b9f8:	4610      	mov	r0, r2
                break;
   1b9fa:	e794      	b.n	1b926 <rx_complete_cb+0x86>
                    SS_STATS_INC(ack_tx_err);
   1b9fc:	4a49      	ldr	r2, [pc, #292]	; (1bb24 <rx_complete_cb+0x284>)
   1b9fe:	69d3      	ldr	r3, [r2, #28]
   1ba00:	3301      	adds	r3, #1
   1ba02:	61d3      	str	r3, [r2, #28]
   1ba04:	f104 0050 	add.w	r0, r4, #80	; 0x50
   1ba08:	f7ee f9cc 	bl	9da4 <os_sem_release>
                    return true;
   1ba0c:	2001      	movs	r0, #1
   1ba0e:	e78a      	b.n	1b926 <rx_complete_cb+0x86>
                if (inst->frame_len != sizeof(ieee_rng_response_frame_t))
   1ba10:	f8b5 34e2 	ldrh.w	r3, [r5, #1250]	; 0x4e2
   1ba14:	2b13      	cmp	r3, #19
   1ba16:	d001      	beq.n	1ba1c <rx_complete_cb+0x17c>
    return true;
   1ba18:	2001      	movs	r0, #1
   1ba1a:	e784      	b.n	1b926 <rx_complete_cb+0x86>
                if(inst->status.lde_error)
   1ba1c:	f895 3509 	ldrb.w	r3, [r5, #1289]	; 0x509
   1ba20:	f013 0f04 	tst.w	r3, #4
   1ba24:	d178      	bne.n	1bb18 <rx_complete_cb+0x278>
                uint64_t response_timestamp = rng->ack_rx_timestamp;
   1ba26:	e9d4 8920 	ldrd	r8, r9, [r4, #128]	; 0x80
                struct uwb_wcs_instance * wcs = rng->ccp_inst->wcs;
   1ba2a:	6863      	ldr	r3, [r4, #4]
   1ba2c:	6e9f      	ldr	r7, [r3, #104]	; 0x68
    return (dev->uw_funcs->uf_read_txtime(dev));
   1ba2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1ba30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   1ba32:	4628      	mov	r0, r5
   1ba34:	4798      	blx	r3
   1ba36:	4602      	mov	r2, r0
   1ba38:	460b      	mov	r3, r1
                frame->request_timestamp = (uint32_t)(uwb_wcs_local_to_master(wcs, uwb_read_txtime(inst))) & 0xFFFFFFFFULL;
   1ba3a:	4638      	mov	r0, r7
   1ba3c:	f7f1 feb4 	bl	d7a8 <uwb_wcs_local_to_master>
   1ba40:	f8c6 0013 	str.w	r0, [r6, #19]
                frame->response_timestamp = (uint32_t)(uwb_wcs_local_to_master(wcs, response_timestamp)) & 0xFFFFFFFFULL;
   1ba44:	4642      	mov	r2, r8
   1ba46:	464b      	mov	r3, r9
   1ba48:	4638      	mov	r0, r7
   1ba4a:	f7f1 fead 	bl	d7a8 <uwb_wcs_local_to_master>
   1ba4e:	f8c6 0017 	str.w	r0, [r6, #23]
                if (!rng->ack_rx_timestamp) {
   1ba52:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
   1ba56:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   1ba5a:	4313      	orrs	r3, r2
   1ba5c:	d105      	bne.n	1ba6a <rx_complete_cb+0x1ca>
                    SS_STATS_INC(ack_rx_err);
   1ba5e:	4a31      	ldr	r2, [pc, #196]	; (1bb24 <rx_complete_cb+0x284>)
   1ba60:	6a13      	ldr	r3, [r2, #32]
   1ba62:	3301      	adds	r3, #1
   1ba64:	6213      	str	r3, [r2, #32]
    return true;
   1ba66:	2001      	movs	r0, #1
                    break;
   1ba68:	e75d      	b.n	1b926 <rx_complete_cb+0x86>
                frame->dst_address = frame->src_address;
   1ba6a:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   1ba6e:	f8a6 3005 	strh.w	r3, [r6, #5]
                frame->src_address = inst->my_short_address;
   1ba72:	f8b5 34b6 	ldrh.w	r3, [r5, #1206]	; 0x4b6
   1ba76:	f8a6 3007 	strh.w	r3, [r6, #7]
                frame->code = UWB_DATA_CODE_SS_TWR_ACK_FINAL;
   1ba7a:	2700      	movs	r7, #0
   1ba7c:	231a      	movs	r3, #26
   1ba7e:	7273      	strb	r3, [r6, #9]
   1ba80:	2301      	movs	r3, #1
   1ba82:	72b3      	strb	r3, [r6, #10]
                frame->carrier_integrator  = inst->carrier_integrator;
   1ba84:	f8d5 34f0 	ldr.w	r3, [r5, #1264]	; 0x4f0
   1ba88:	f8c6 301b 	str.w	r3, [r6, #27]
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
   1ba8c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1ba8e:	f8d3 8044 	ldr.w	r8, [r3, #68]	; 0x44
   1ba92:	231f      	movs	r3, #31
   1ba94:	463a      	mov	r2, r7
   1ba96:	4631      	mov	r1, r6
   1ba98:	4628      	mov	r0, r5
   1ba9a:	47c0      	blx	r8
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
   1ba9c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1ba9e:	6c9e      	ldr	r6, [r3, #72]	; 0x48
   1baa0:	463b      	mov	r3, r7
   1baa2:	463a      	mov	r2, r7
   1baa4:	211f      	movs	r1, #31
   1baa6:	4628      	mov	r0, r5
   1baa8:	47b0      	blx	r6
    return (dev->uw_funcs->uf_start_tx(dev));
   1baaa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1baac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1baae:	4628      	mov	r0, r5
   1bab0:	4798      	blx	r3
                if (uwb_start_tx(inst).start_tx_error) {
   1bab2:	f010 0f04 	tst.w	r0, #4
   1bab6:	d10b      	bne.n	1bad0 <rx_complete_cb+0x230>
                    SS_STATS_INC(complete);
   1bab8:	4a1a      	ldr	r2, [pc, #104]	; (1bb24 <rx_complete_cb+0x284>)
   1baba:	6953      	ldr	r3, [r2, #20]
   1babc:	3301      	adds	r3, #1
   1babe:	6153      	str	r3, [r2, #20]
                    rng->control.complete_after_tx = 1;
   1bac0:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   1bac4:	f043 0302 	orr.w	r3, r3, #2
   1bac8:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    return true;
   1bacc:	2001      	movs	r0, #1
   1bace:	e72a      	b.n	1b926 <rx_complete_cb+0x86>
                    SS_STATS_INC(tx_error);
   1bad0:	4a14      	ldr	r2, [pc, #80]	; (1bb24 <rx_complete_cb+0x284>)
   1bad2:	6993      	ldr	r3, [r2, #24]
   1bad4:	3301      	adds	r3, #1
   1bad6:	6193      	str	r3, [r2, #24]
   1bad8:	f104 0050 	add.w	r0, r4, #80	; 0x50
   1badc:	f7ee f962 	bl	9da4 <os_sem_release>
                    rng_issue_complete(inst);
   1bae0:	4628      	mov	r0, r5
   1bae2:	f7f1 f9c9 	bl	ce78 <rng_issue_complete>
    return true;
   1bae6:	2001      	movs	r0, #1
   1bae8:	e71d      	b.n	1b926 <rx_complete_cb+0x86>
                if (inst->frame_len != sizeof(twr_frame_final_t))
   1baea:	f8b5 34e2 	ldrh.w	r3, [r5, #1250]	; 0x4e2
   1baee:	2b1f      	cmp	r3, #31
   1baf0:	d001      	beq.n	1baf6 <rx_complete_cb+0x256>
    return true;
   1baf2:	2001      	movs	r0, #1
   1baf4:	e717      	b.n	1b926 <rx_complete_cb+0x86>
                SS_STATS_INC(complete);
   1baf6:	4a0b      	ldr	r2, [pc, #44]	; (1bb24 <rx_complete_cb+0x284>)
   1baf8:	6953      	ldr	r3, [r2, #20]
   1bafa:	3301      	adds	r3, #1
   1bafc:	6153      	str	r3, [r2, #20]
   1bafe:	f104 0050 	add.w	r0, r4, #80	; 0x50
   1bb02:	f7ee f94f 	bl	9da4 <os_sem_release>
                rng_issue_complete(inst);
   1bb06:	4628      	mov	r0, r5
   1bb08:	f7f1 f9b6 	bl	ce78 <rng_issue_complete>
    return true;
   1bb0c:	2001      	movs	r0, #1
                break;
   1bb0e:	e70a      	b.n	1b926 <rx_complete_cb+0x86>
        return false;
   1bb10:	2000      	movs	r0, #0
   1bb12:	e708      	b.n	1b926 <rx_complete_cb+0x86>
        return false;
   1bb14:	2000      	movs	r0, #0
   1bb16:	e706      	b.n	1b926 <rx_complete_cb+0x86>
    return true;
   1bb18:	2001      	movs	r0, #1
   1bb1a:	e704      	b.n	1b926 <rx_complete_cb+0x86>
   1bb1c:	f3af 8000 	nop.w
   1bb20:	20000ec8 	.word	0x20000ec8
   1bb24:	2000460c 	.word	0x2000460c
   1bb28:	90690691 	.word	0x90690691
   1bb2c:	3ff06906 	.word	0x3ff06906

0001bb30 <tx_complete_cb>:

static bool
tx_complete_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
   1bb30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
   1bb34:	684c      	ldr	r4, [r1, #4]
    assert(rng);
   1bb36:	b33c      	cbz	r4, 1bb88 <tx_complete_cb+0x58>
   1bb38:	4605      	mov	r5, r0
   1bb3a:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
    if(dpl_sem_get_count(&rng->sem) == 1) // unsolicited inbound
   1bb3e:	2b01      	cmp	r3, #1
   1bb40:	f000 8096 	beq.w	1bc70 <tx_complete_cb+0x140>
        return false;

    if (rng->status.tx_ack_expected != 1) {
   1bb44:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   1bb48:	f013 0f10 	tst.w	r3, #16
   1bb4c:	f000 8092 	beq.w	1bc74 <tx_complete_cb+0x144>
        return false;
    }
    rng->status.tx_ack_expected = 0;
   1bb50:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   1bb54:	f36f 1304 	bfc	r3, #4, #1
   1bb58:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72

    twr_frame_t * frame = rng->frames[(rng->idx)%rng->nframes]; // Frame already read in rx_complete_cb
   1bb5c:	f8b4 3076 	ldrh.w	r3, [r4, #118]	; 0x76
   1bb60:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
   1bb64:	fbb3 f1f2 	udiv	r1, r3, r2
   1bb68:	fb02 3311 	mls	r3, r2, r1, r3
   1bb6c:	b29b      	uxth	r3, r3
   1bb6e:	3326      	adds	r3, #38	; 0x26
   1bb70:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   1bb74:	f8d3 a004 	ldr.w	sl, [r3, #4]

    if (rng->code == UWB_DATA_CODE_SS_TWR_ACK) {
   1bb78:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
   1bb7c:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
   1bb80:	d008      	beq.n	1bb94 <tx_complete_cb+0x64>
        if (uwb_start_tx(inst).start_tx_error){
            SS_STATS_INC(tx_error);
            dpl_sem_release(&rng->sem);
        }
    }
    return true;
   1bb82:	2001      	movs	r0, #1
}
   1bb84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(rng);
   1bb88:	2300      	movs	r3, #0
   1bb8a:	461a      	mov	r2, r3
   1bb8c:	4619      	mov	r1, r3
   1bb8e:	4618      	mov	r0, r3
   1bb90:	f7ed f9e8 	bl	8f64 <__assert_func>
    return (dev->uw_funcs->uf_read_txtime(dev));
   1bb94:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1bb96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   1bb98:	4798      	blx	r3
   1bb9a:	4606      	mov	r6, r0
   1bb9c:	4688      	mov	r8, r1
    return (dev->uw_funcs->uf_read_systime(dev));
   1bb9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1bba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1bba2:	4628      	mov	r0, r5
   1bba4:	4798      	blx	r3
   1bba6:	4607      	mov	r7, r0
   1bba8:	4689      	mov	r9, r1
        struct uwb_wcs_instance * wcs = rng->ccp_inst->wcs;
   1bbaa:	6861      	ldr	r1, [r4, #4]
        frame->transmission_timestamp = (uint32_t)(uwb_wcs_local_to_master(wcs, response_timestamp)) & 0xFFFFFFFFULL;
   1bbac:	4632      	mov	r2, r6
   1bbae:	4643      	mov	r3, r8
   1bbb0:	6e88      	ldr	r0, [r1, #104]	; 0x68
   1bbb2:	f7f1 fdf9 	bl	d7a8 <uwb_wcs_local_to_master>
   1bbb6:	f8ca 000f 	str.w	r0, [sl, #15]
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
   1bbba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1bbbc:	f8d3 b044 	ldr.w	fp, [r3, #68]	; 0x44
   1bbc0:	2313      	movs	r3, #19
   1bbc2:	2200      	movs	r2, #0
   1bbc4:	4651      	mov	r1, sl
   1bbc6:	4628      	mov	r0, r5
   1bbc8:	47d8      	blx	fp
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
   1bbca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1bbcc:	f8d3 a048 	ldr.w	sl, [r3, #72]	; 0x48
   1bbd0:	2300      	movs	r3, #0
   1bbd2:	461a      	mov	r2, r3
   1bbd4:	2113      	movs	r1, #19
   1bbd6:	4628      	mov	r0, r5
   1bbd8:	47d0      	blx	sl
    return (dev->uw_funcs->uf_set_wait4resp(dev, enable));
   1bbda:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1bbdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1bbde:	2101      	movs	r1, #1
   1bbe0:	4628      	mov	r0, r5
   1bbe2:	4798      	blx	r3
    return (dev->uw_funcs->uf_set_wait4resp_delay(dev, delay));
   1bbe4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1bbe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   1bbe8:	2100      	movs	r1, #0
   1bbea:	4628      	mov	r0, r5
   1bbec:	4798      	blx	r3
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
   1bbee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1bbf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1bbf2:	2113      	movs	r1, #19
   1bbf4:	4628      	mov	r0, r5
   1bbf6:	4798      	blx	r3
        uint16_t frame_duration = uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst,sizeof(ieee_rng_response_frame_t)));
   1bbf8:	f005 fb70 	bl	212dc <__aeabi_i2d>
   1bbfc:	a321      	add	r3, pc, #132	; (adr r3, 1bc84 <tx_complete_cb+0x154>)
   1bbfe:	e9d3 2300 	ldrd	r2, r3, [r3]
   1bc02:	f005 fcff 	bl	21604 <__aeabi_ddiv>
   1bc06:	f005 feab 	bl	21960 <__aeabi_d2uiz>
        uwb_set_rx_timeout(inst, g_config.tx_holdoff_delay + frame_duration + g_config.rx_timeout_delay);
   1bc0a:	4b1b      	ldr	r3, [pc, #108]	; (1bc78 <tx_complete_cb+0x148>)
   1bc0c:	6859      	ldr	r1, [r3, #4]
   1bc0e:	fa11 f080 	uxtah	r0, r1, r0
   1bc12:	8999      	ldrh	r1, [r3, #12]
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
   1bc14:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1bc16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1bc18:	4401      	add	r1, r0
   1bc1a:	4628      	mov	r0, r5
   1bc1c:	4798      	blx	r3
    return (dev->uw_funcs->uf_set_rxauto_disable(dev, disable));
   1bc1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1bc20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1bc22:	2101      	movs	r1, #1
   1bc24:	4628      	mov	r0, r5
   1bc26:	4798      	blx	r3
        if (((0xffffffffffULL&(current_timestamp - response_timestamp))>>16) < MYNEWT_VAL(TWR_SS_ACK_TX_HOLDOFF)/4) {
   1bc28:	1bbe      	subs	r6, r7, r6
   1bc2a:	eb69 0808 	sbc.w	r8, r9, r8
   1bc2e:	0c36      	lsrs	r6, r6, #16
   1bc30:	ea46 4608 	orr.w	r6, r6, r8, lsl #16
   1bc34:	4b11      	ldr	r3, [pc, #68]	; (1bc7c <tx_complete_cb+0x14c>)
   1bc36:	4033      	ands	r3, r6
   1bc38:	b93b      	cbnz	r3, 1bc4a <tx_complete_cb+0x11a>
            uwb_set_delay_start(inst, current_timestamp + (MYNEWT_VAL(TWR_SS_ACK_TX_HOLDOFF)*3/4 << 16));
   1bc3a:	f117 62c0 	adds.w	r2, r7, #100663296	; 0x6000000
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
   1bc3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1bc40:	6b59      	ldr	r1, [r3, #52]	; 0x34
   1bc42:	f149 0300 	adc.w	r3, r9, #0
   1bc46:	4628      	mov	r0, r5
   1bc48:	4788      	blx	r1
    return (dev->uw_funcs->uf_start_tx(dev));
   1bc4a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1bc4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1bc4e:	4628      	mov	r0, r5
   1bc50:	4798      	blx	r3
        if (uwb_start_tx(inst).start_tx_error){
   1bc52:	f010 0f04 	tst.w	r0, #4
   1bc56:	d101      	bne.n	1bc5c <tx_complete_cb+0x12c>
    return true;
   1bc58:	2001      	movs	r0, #1
   1bc5a:	e793      	b.n	1bb84 <tx_complete_cb+0x54>
            SS_STATS_INC(tx_error);
   1bc5c:	4a08      	ldr	r2, [pc, #32]	; (1bc80 <tx_complete_cb+0x150>)
   1bc5e:	6993      	ldr	r3, [r2, #24]
   1bc60:	3301      	adds	r3, #1
   1bc62:	6193      	str	r3, [r2, #24]
   1bc64:	f104 0050 	add.w	r0, r4, #80	; 0x50
   1bc68:	f7ee f89c 	bl	9da4 <os_sem_release>
    return true;
   1bc6c:	2001      	movs	r0, #1
   1bc6e:	e789      	b.n	1bb84 <tx_complete_cb+0x54>
        return false;
   1bc70:	2000      	movs	r0, #0
   1bc72:	e787      	b.n	1bb84 <tx_complete_cb+0x54>
        return false;
   1bc74:	2000      	movs	r0, #0
   1bc76:	e785      	b.n	1bb84 <tx_complete_cb+0x54>
   1bc78:	20000ec8 	.word	0x20000ec8
   1bc7c:	00fffe00 	.word	0x00fffe00
   1bc80:	2000460c 	.word	0x2000460c
   1bc84:	90690691 	.word	0x90690691
   1bc88:	3ff06906 	.word	0x3ff06906

0001bc8c <twr_ss_ack_pkg_init>:
{
   1bc8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bc8e:	b083      	sub	sp, #12
    printf("{\"utime\": %"PRIu32",\"msg\": \"twr_ss_ack_pkg_init\"}\n",
   1bc90:	f7f2 fbbb 	bl	e40a <dpl_cputime_get32>
   1bc94:	4601      	mov	r1, r0
   1bc96:	481e      	ldr	r0, [pc, #120]	; (1bd10 <twr_ss_ack_pkg_init+0x84>)
   1bc98:	f7f2 fb32 	bl	e300 <printf>
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   1bc9c:	2400      	movs	r4, #0
   1bc9e:	b18c      	cbz	r4, 1bcc4 <twr_ss_ack_pkg_init+0x38>
    rc = stats_init(
   1bca0:	2205      	movs	r2, #5
   1bca2:	9200      	str	r2, [sp, #0]
   1bca4:	4b1b      	ldr	r3, [pc, #108]	; (1bd14 <twr_ss_ack_pkg_init+0x88>)
   1bca6:	2104      	movs	r1, #4
   1bca8:	481b      	ldr	r0, [pc, #108]	; (1bd18 <twr_ss_ack_pkg_init+0x8c>)
   1bcaa:	f7f5 f9a1 	bl	10ff0 <stats_init>
    assert(rc == 0);
   1bcae:	4604      	mov	r4, r0
   1bcb0:	bb10      	cbnz	r0, 1bcf8 <twr_ss_ack_pkg_init+0x6c>
    rc |= stats_register("twr_ss_ack", STATS_HDR(g_twr_ss_ack_stat));
   1bcb2:	4919      	ldr	r1, [pc, #100]	; (1bd18 <twr_ss_ack_pkg_init+0x8c>)
   1bcb4:	4819      	ldr	r0, [pc, #100]	; (1bd1c <twr_ss_ack_pkg_init+0x90>)
   1bcb6:	f7f5 fa25 	bl	11104 <stats_register>
    assert(rc == 0);
   1bcba:	ea54 0300 	orrs.w	r3, r4, r0
   1bcbe:	d121      	bne.n	1bd04 <twr_ss_ack_pkg_init+0x78>
}
   1bcc0:	b003      	add	sp, #12
   1bcc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        udev = uwb_dev_idx_lookup(i);
   1bcc4:	4620      	mov	r0, r4
   1bcc6:	f7ec fea5 	bl	8a14 <uwb_dev_idx_lookup>
        if (!udev) {
   1bcca:	4607      	mov	r7, r0
   1bccc:	b190      	cbz	r0, 1bcf4 <twr_ss_ack_pkg_init+0x68>
        g_cbs[i].inst_ptr = (struct uwb_rng_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_RNG);
   1bcce:	2104      	movs	r1, #4
   1bcd0:	f7ec ff25 	bl	8b1e <uwb_mac_find_cb_inst_ptr>
   1bcd4:	0126      	lsls	r6, r4, #4
   1bcd6:	ebc4 1504 	rsb	r5, r4, r4, lsl #4
   1bcda:	4b11      	ldr	r3, [pc, #68]	; (1bd20 <twr_ss_ack_pkg_init+0x94>)
   1bcdc:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   1bce0:	6068      	str	r0, [r5, #4]
        uwb_mac_append_interface(udev, &g_cbs[i]);
   1bce2:	4629      	mov	r1, r5
   1bce4:	4638      	mov	r0, r7
   1bce6:	f7ec fec5 	bl	8a74 <uwb_mac_append_interface>
        uwb_rng_append_config(g_cbs[i].inst_ptr, &g_rng_cfgs[i]);
   1bcea:	490e      	ldr	r1, [pc, #56]	; (1bd24 <twr_ss_ack_pkg_init+0x98>)
   1bcec:	4431      	add	r1, r6
   1bcee:	6868      	ldr	r0, [r5, #4]
   1bcf0:	f7f0 fd94 	bl	c81c <uwb_rng_append_config>
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   1bcf4:	3401      	adds	r4, #1
   1bcf6:	e7d2      	b.n	1bc9e <twr_ss_ack_pkg_init+0x12>
    assert(rc == 0);
   1bcf8:	2300      	movs	r3, #0
   1bcfa:	461a      	mov	r2, r3
   1bcfc:	4619      	mov	r1, r3
   1bcfe:	4618      	mov	r0, r3
   1bd00:	f7ed f930 	bl	8f64 <__assert_func>
    assert(rc == 0);
   1bd04:	2300      	movs	r3, #0
   1bd06:	461a      	mov	r2, r3
   1bd08:	4619      	mov	r1, r3
   1bd0a:	4618      	mov	r0, r3
   1bd0c:	f7ed f92a 	bl	8f64 <__assert_func>
   1bd10:	00024924 	.word	0x00024924
   1bd14:	00024984 	.word	0x00024984
   1bd18:	2000460c 	.word	0x2000460c
   1bd1c:	00024954 	.word	0x00024954
   1bd20:	20000e8c 	.word	0x20000e8c
   1bd24:	20000ed8 	.word	0x20000ed8

0001bd28 <twr_ss_ack_free>:
{
   1bd28:	b508      	push	{r3, lr}
    assert(dev);
   1bd2a:	b118      	cbz	r0, 1bd34 <twr_ss_ack_free+0xc>
    uwb_mac_remove_interface(dev, UWBEXT_RNG_SS_ACK);
   1bd2c:	2107      	movs	r1, #7
   1bd2e:	f7ec fec6 	bl	8abe <uwb_mac_remove_interface>
}
   1bd32:	bd08      	pop	{r3, pc}
    assert(dev);
   1bd34:	2300      	movs	r3, #0
   1bd36:	461a      	mov	r2, r3
   1bd38:	4619      	mov	r1, r3
   1bd3a:	4618      	mov	r0, r3
   1bd3c:	f7ed f912 	bl	8f64 <__assert_func>

0001bd40 <twr_ss_ack_pkg_down>:
{
   1bd40:	b508      	push	{r3, lr}
    if (g_cbs[0].inst_ptr) {
   1bd42:	4b04      	ldr	r3, [pc, #16]	; (1bd54 <twr_ss_ack_pkg_down+0x14>)
   1bd44:	685b      	ldr	r3, [r3, #4]
   1bd46:	b113      	cbz	r3, 1bd4e <twr_ss_ack_pkg_down+0xe>
        twr_ss_ack_free(rng->dev_inst);
   1bd48:	6818      	ldr	r0, [r3, #0]
   1bd4a:	f7ff ffed 	bl	1bd28 <twr_ss_ack_free>
}
   1bd4e:	2000      	movs	r0, #0
   1bd50:	bd08      	pop	{r3, pc}
   1bd52:	bf00      	nop
   1bd54:	20000e8c 	.word	0x20000e8c

0001bd58 <rx_complete_cb>:
static bool
rx_complete_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
    struct uwb_rng_txd txd;
    struct uwb_mac_interface * cbs_i = NULL;
    if (inst->fctrl != FCNTL_IEEE_RANGE_16)
   1bd58:	f8b0 24e0 	ldrh.w	r2, [r0, #1248]	; 0x4e0
   1bd5c:	f648 0341 	movw	r3, #34881	; 0x8841
   1bd60:	429a      	cmp	r2, r3
   1bd62:	f040 813c 	bne.w	1bfde <rx_complete_cb+0x286>
{
   1bd66:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1bd6a:	b089      	sub	sp, #36	; 0x24
   1bd6c:	4604      	mov	r4, r0
        return false;

    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
   1bd6e:	684e      	ldr	r6, [r1, #4]
    assert(rng);
   1bd70:	b31e      	cbz	r6, 1bdba <rx_complete_cb+0x62>
   1bd72:	f8b6 3056 	ldrh.w	r3, [r6, #86]	; 0x56
    if(dpl_sem_get_count(&rng->sem) == 1) // unsolicited inbound
   1bd76:	2b01      	cmp	r3, #1
   1bd78:	f000 8133 	beq.w	1bfe2 <rx_complete_cb+0x28a>
        return false;

    twr_frame_t * frame = rng->frames[(rng->idx)%rng->nframes]; // Frame already read within loader layers.
   1bd7c:	f8b6 3076 	ldrh.w	r3, [r6, #118]	; 0x76
   1bd80:	f8b6 207a 	ldrh.w	r2, [r6, #122]	; 0x7a
   1bd84:	fbb3 f1f2 	udiv	r1, r3, r2
   1bd88:	fb02 3311 	mls	r3, r2, r1, r3
   1bd8c:	b29b      	uxth	r3, r3
   1bd8e:	3326      	adds	r3, #38	; 0x26
   1bd90:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   1bd94:	685f      	ldr	r7, [r3, #4]

    switch(rng->code){
   1bd96:	f8b6 304c 	ldrh.w	r3, [r6, #76]	; 0x4c
   1bd9a:	f240 1215 	movw	r2, #277	; 0x115
   1bd9e:	4293      	cmp	r3, r2
   1bda0:	f000 8097 	beq.w	1bed2 <rx_complete_cb+0x17a>
   1bda4:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
   1bda8:	f000 8106 	beq.w	1bfb8 <rx_complete_cb+0x260>
   1bdac:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
   1bdb0:	d009      	beq.n	1bdc6 <rx_complete_cb+0x6e>
   1bdb2:	2000      	movs	r0, #0
        default:
                return false;
                break;
    }
    return true;
}
   1bdb4:	b009      	add	sp, #36	; 0x24
   1bdb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    assert(rng);
   1bdba:	2300      	movs	r3, #0
   1bdbc:	461a      	mov	r2, r3
   1bdbe:	4619      	mov	r1, r3
   1bdc0:	4618      	mov	r0, r3
   1bdc2:	f7ed f8cf 	bl	8f64 <__assert_func>
                uint64_t request_timestamp = inst->rxtimestamp;
   1bdc6:	f500 639e 	add.w	r3, r0, #1264	; 0x4f0
   1bdca:	e953 8902 	ldrd	r8, r9, [r3, #-8]
                uwb_rng_calc_rel_tx(rng, &txd, &g_config, request_timestamp, inst->frame_len);
   1bdce:	f8b0 34e2 	ldrh.w	r3, [r0, #1250]	; 0x4e2
   1bdd2:	9302      	str	r3, [sp, #8]
   1bdd4:	e9cd 8900 	strd	r8, r9, [sp]
   1bdd8:	4a83      	ldr	r2, [pc, #524]	; (1bfe8 <rx_complete_cb+0x290>)
   1bdda:	a904      	add	r1, sp, #16
   1bddc:	4630      	mov	r0, r6
   1bdde:	f7f0 fd57 	bl	c890 <uwb_rng_calc_rel_tx>
                struct uwb_wcs_instance * wcs = rng->ccp_inst->wcs;
   1bde2:	6873      	ldr	r3, [r6, #4]
   1bde4:	6e9d      	ldr	r5, [r3, #104]	; 0x68
                frame->reception_timestamp = (uint32_t)(uwb_wcs_local_to_master(wcs, request_timestamp)) & 0xFFFFFFFFULL;
   1bde6:	4642      	mov	r2, r8
   1bde8:	464b      	mov	r3, r9
   1bdea:	4628      	mov	r0, r5
   1bdec:	f7f1 fcdc 	bl	d7a8 <uwb_wcs_local_to_master>
   1bdf0:	f8c7 000b 	str.w	r0, [r7, #11]
                frame->transmission_timestamp = (uint32_t)(uwb_wcs_local_to_master(wcs, txd.response_timestamp)) & 0xFFFFFFFFULL;
   1bdf4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1bdf8:	4628      	mov	r0, r5
   1bdfa:	f7f1 fcd5 	bl	d7a8 <uwb_wcs_local_to_master>
   1bdfe:	f8c7 000f 	str.w	r0, [r7, #15]
                frame->dst_address = frame->src_address;
   1be02:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   1be06:	f8a7 3005 	strh.w	r3, [r7, #5]
                frame->src_address = inst->my_short_address;
   1be0a:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
   1be0e:	f8a7 3007 	strh.w	r3, [r7, #7]
                frame->code = UWB_DATA_CODE_SS_TWR_EXT_T1;
   1be12:	2300      	movs	r3, #0
   1be14:	2215      	movs	r2, #21
   1be16:	727a      	strb	r2, [r7, #9]
   1be18:	2201      	movs	r2, #1
   1be1a:	72ba      	strb	r2, [r7, #10]
                frame->carrier_integrator  = 0l;
   1be1c:	76fb      	strb	r3, [r7, #27]
   1be1e:	773b      	strb	r3, [r7, #28]
   1be20:	777b      	strb	r3, [r7, #29]
   1be22:	77bb      	strb	r3, [r7, #30]
                if(!(SLIST_EMPTY(&inst->interface_cbs))) {
   1be24:	f8d4 5530 	ldr.w	r5, [r4, #1328]	; 0x530
   1be28:	2d00      	cmp	r5, #0
   1be2a:	d13e      	bne.n	1beaa <rx_complete_cb+0x152>
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
   1be2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1be2e:	6c5d      	ldr	r5, [r3, #68]	; 0x44
   1be30:	2320      	movs	r3, #32
   1be32:	2200      	movs	r2, #0
   1be34:	4639      	mov	r1, r7
   1be36:	4620      	mov	r0, r4
   1be38:	47a8      	blx	r5
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
   1be3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1be3c:	6c9d      	ldr	r5, [r3, #72]	; 0x48
   1be3e:	2300      	movs	r3, #0
   1be40:	461a      	mov	r2, r3
   1be42:	2120      	movs	r1, #32
   1be44:	4620      	mov	r0, r4
   1be46:	47a8      	blx	r5
    return (dev->uw_funcs->uf_set_wait4resp(dev, enable));
   1be48:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1be4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1be4c:	2101      	movs	r1, #1
   1be4e:	4620      	mov	r0, r4
   1be50:	4798      	blx	r3
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
   1be52:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1be54:	6b59      	ldr	r1, [r3, #52]	; 0x34
   1be56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1be5a:	4620      	mov	r0, r4
   1be5c:	4788      	blx	r1
    return (dev->uw_funcs->uf_start_tx(dev));
   1be5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1be60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1be62:	4620      	mov	r0, r4
   1be64:	4798      	blx	r3
                if (uwb_start_tx(inst).start_tx_error){
   1be66:	f010 0f04 	tst.w	r0, #4
   1be6a:	d129      	bne.n	1bec0 <rx_complete_cb+0x168>
                uwb_set_wait4resp_delay(inst, g_config.tx_holdoff_delay -
   1be6c:	4d5e      	ldr	r5, [pc, #376]	; (1bfe8 <rx_complete_cb+0x290>)
   1be6e:	6869      	ldr	r1, [r5, #4]
                                        inst->config.rx.timeToRxStable);
   1be70:	f894 251b 	ldrb.w	r2, [r4, #1307]	; 0x51b
    return (dev->uw_funcs->uf_set_wait4resp_delay(dev, delay));
   1be74:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1be76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   1be78:	1a89      	subs	r1, r1, r2
   1be7a:	4620      	mov	r0, r4
   1be7c:	4798      	blx	r3
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
   1be7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1be80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1be82:	211f      	movs	r1, #31
   1be84:	4620      	mov	r0, r4
   1be86:	4798      	blx	r3
                                   g_config.rx_timeout_delay + inst->config.rx.timeToRxStable);
   1be88:	89a9      	ldrh	r1, [r5, #12]
                uwb_set_rx_timeout(inst, uwb_phy_frame_duration(inst, sizeof(twr_frame_final_t)) +
   1be8a:	4408      	add	r0, r1
                                   g_config.rx_timeout_delay + inst->config.rx.timeToRxStable);
   1be8c:	f894 151b 	ldrb.w	r1, [r4, #1307]	; 0x51b
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
   1be90:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1be92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1be94:	4401      	add	r1, r0
   1be96:	4620      	mov	r0, r4
   1be98:	4798      	blx	r3
    return (dev->uw_funcs->uf_set_rxauto_disable(dev, disable));
   1be9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1be9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1be9e:	2101      	movs	r1, #1
   1bea0:	4620      	mov	r0, r4
   1bea2:	4798      	blx	r3
    return true;
   1bea4:	2001      	movs	r0, #1
                break;
   1bea6:	e785      	b.n	1bdb4 <rx_complete_cb+0x5c>
                    SLIST_FOREACH(cbs_i, &inst->interface_cbs, next) {
   1bea8:	6bad      	ldr	r5, [r5, #56]	; 0x38
   1beaa:	2d00      	cmp	r5, #0
   1beac:	d0be      	beq.n	1be2c <rx_complete_cb+0xd4>
                        if (cbs_i != NULL && cbs_i->final_cb)
   1beae:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1beb0:	2b00      	cmp	r3, #0
   1beb2:	d0f9      	beq.n	1bea8 <rx_complete_cb+0x150>
                            if(cbs_i->final_cb(inst, cbs_i)) break;
   1beb4:	4629      	mov	r1, r5
   1beb6:	4620      	mov	r0, r4
   1beb8:	4798      	blx	r3
   1beba:	2800      	cmp	r0, #0
   1bebc:	d0f4      	beq.n	1bea8 <rx_complete_cb+0x150>
   1bebe:	e7b5      	b.n	1be2c <rx_complete_cb+0xd4>
                    SS_STATS_INC(tx_error);
   1bec0:	4a4a      	ldr	r2, [pc, #296]	; (1bfec <rx_complete_cb+0x294>)
   1bec2:	6993      	ldr	r3, [r2, #24]
   1bec4:	3301      	adds	r3, #1
   1bec6:	6193      	str	r3, [r2, #24]
   1bec8:	f106 0050 	add.w	r0, r6, #80	; 0x50
   1becc:	f7ed ff6a 	bl	9da4 <os_sem_release>
   1bed0:	e7cc      	b.n	1be6c <rx_complete_cb+0x114>
                if (inst->frame_len != TWR_EXT_FRAME_SIZE)
   1bed2:	f8b0 34e2 	ldrh.w	r3, [r0, #1250]	; 0x4e2
   1bed6:	2b20      	cmp	r3, #32
   1bed8:	d001      	beq.n	1bede <rx_complete_cb+0x186>
    return true;
   1beda:	2001      	movs	r0, #1
   1bedc:	e76a      	b.n	1bdb4 <rx_complete_cb+0x5c>
                if(inst->status.lde_error)
   1bede:	f890 2509 	ldrb.w	r2, [r0, #1289]	; 0x509
   1bee2:	f012 0f04 	tst.w	r2, #4
   1bee6:	d001      	beq.n	1beec <rx_complete_cb+0x194>
    return true;
   1bee8:	2001      	movs	r0, #1
   1beea:	e763      	b.n	1bdb4 <rx_complete_cb+0x5c>
                uint64_t response_timestamp = inst->rxtimestamp;
   1beec:	f500 629e 	add.w	r2, r0, #1264	; 0x4f0
   1bef0:	e952 8902 	ldrd	r8, r9, [r2, #-8]
                uwb_rng_calc_rel_tx(rng, &txd, &g_config, response_timestamp, inst->frame_len);
   1bef4:	9302      	str	r3, [sp, #8]
   1bef6:	e9cd 8900 	strd	r8, r9, [sp]
   1befa:	4a3b      	ldr	r2, [pc, #236]	; (1bfe8 <rx_complete_cb+0x290>)
   1befc:	a904      	add	r1, sp, #16
   1befe:	4630      	mov	r0, r6
   1bf00:	f7f0 fcc6 	bl	c890 <uwb_rng_calc_rel_tx>
                struct uwb_wcs_instance * wcs = rng->ccp_inst->wcs;
   1bf04:	6873      	ldr	r3, [r6, #4]
   1bf06:	6e9d      	ldr	r5, [r3, #104]	; 0x68
    return (dev->uw_funcs->uf_read_txtime(dev));
   1bf08:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1bf0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   1bf0c:	4620      	mov	r0, r4
   1bf0e:	4798      	blx	r3
   1bf10:	4602      	mov	r2, r0
   1bf12:	460b      	mov	r3, r1
                frame->request_timestamp = (uint32_t)(uwb_wcs_local_to_master(wcs, uwb_read_txtime(inst))) & 0xFFFFFFFFULL;
   1bf14:	4628      	mov	r0, r5
   1bf16:	f7f1 fc47 	bl	d7a8 <uwb_wcs_local_to_master>
   1bf1a:	f8c7 0013 	str.w	r0, [r7, #19]
                frame->response_timestamp = (uint32_t)(uwb_wcs_local_to_master(wcs, response_timestamp)) & 0xFFFFFFFFULL;
   1bf1e:	4642      	mov	r2, r8
   1bf20:	464b      	mov	r3, r9
   1bf22:	4628      	mov	r0, r5
   1bf24:	f7f1 fc40 	bl	d7a8 <uwb_wcs_local_to_master>
   1bf28:	f8c7 0017 	str.w	r0, [r7, #23]
                frame->dst_address = frame->src_address;
   1bf2c:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   1bf30:	f8a7 3005 	strh.w	r3, [r7, #5]
                frame->src_address = inst->my_short_address;
   1bf34:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
   1bf38:	f8a7 3007 	strh.w	r3, [r7, #7]
                frame->code = UWB_DATA_CODE_SS_TWR_EXT_FINAL;
   1bf3c:	2500      	movs	r5, #0
   1bf3e:	2316      	movs	r3, #22
   1bf40:	727b      	strb	r3, [r7, #9]
   1bf42:	2301      	movs	r3, #1
   1bf44:	72bb      	strb	r3, [r7, #10]
                frame->carrier_integrator  = inst->carrier_integrator;
   1bf46:	f8d4 34f0 	ldr.w	r3, [r4, #1264]	; 0x4f0
   1bf4a:	f8c7 301b 	str.w	r3, [r7, #27]
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
   1bf4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1bf50:	f8d3 8044 	ldr.w	r8, [r3, #68]	; 0x44
   1bf54:	231f      	movs	r3, #31
   1bf56:	462a      	mov	r2, r5
   1bf58:	4639      	mov	r1, r7
   1bf5a:	4620      	mov	r0, r4
   1bf5c:	47c0      	blx	r8
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
   1bf5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1bf60:	6c9f      	ldr	r7, [r3, #72]	; 0x48
   1bf62:	462b      	mov	r3, r5
   1bf64:	462a      	mov	r2, r5
   1bf66:	211f      	movs	r1, #31
   1bf68:	4620      	mov	r0, r4
   1bf6a:	47b8      	blx	r7
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
   1bf6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1bf6e:	6b59      	ldr	r1, [r3, #52]	; 0x34
   1bf70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1bf74:	4620      	mov	r0, r4
   1bf76:	4788      	blx	r1
    return (dev->uw_funcs->uf_start_tx(dev));
   1bf78:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1bf7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1bf7c:	4620      	mov	r0, r4
   1bf7e:	4798      	blx	r3
                if (uwb_start_tx(inst).start_tx_error){
   1bf80:	f010 0f04 	tst.w	r0, #4
   1bf84:	d10b      	bne.n	1bf9e <rx_complete_cb+0x246>
                    SS_STATS_INC(complete);
   1bf86:	4a19      	ldr	r2, [pc, #100]	; (1bfec <rx_complete_cb+0x294>)
   1bf88:	6953      	ldr	r3, [r2, #20]
   1bf8a:	3301      	adds	r3, #1
   1bf8c:	6153      	str	r3, [r2, #20]
                    rng->control.complete_after_tx = 1;
   1bf8e:	f896 3070 	ldrb.w	r3, [r6, #112]	; 0x70
   1bf92:	f043 0302 	orr.w	r3, r3, #2
   1bf96:	f886 3070 	strb.w	r3, [r6, #112]	; 0x70
    return true;
   1bf9a:	2001      	movs	r0, #1
   1bf9c:	e70a      	b.n	1bdb4 <rx_complete_cb+0x5c>
                    SS_STATS_INC(tx_error);
   1bf9e:	4a13      	ldr	r2, [pc, #76]	; (1bfec <rx_complete_cb+0x294>)
   1bfa0:	6993      	ldr	r3, [r2, #24]
   1bfa2:	3301      	adds	r3, #1
   1bfa4:	6193      	str	r3, [r2, #24]
   1bfa6:	f106 0050 	add.w	r0, r6, #80	; 0x50
   1bfaa:	f7ed fefb 	bl	9da4 <os_sem_release>
                    rng_issue_complete(inst);
   1bfae:	4620      	mov	r0, r4
   1bfb0:	f7f0 ff62 	bl	ce78 <rng_issue_complete>
    return true;
   1bfb4:	2001      	movs	r0, #1
   1bfb6:	e6fd      	b.n	1bdb4 <rx_complete_cb+0x5c>
                if (inst->frame_len != sizeof(twr_frame_final_t))
   1bfb8:	f8b0 34e2 	ldrh.w	r3, [r0, #1250]	; 0x4e2
   1bfbc:	2b1f      	cmp	r3, #31
   1bfbe:	d001      	beq.n	1bfc4 <rx_complete_cb+0x26c>
    return true;
   1bfc0:	2001      	movs	r0, #1
   1bfc2:	e6f7      	b.n	1bdb4 <rx_complete_cb+0x5c>
                SS_STATS_INC(complete);
   1bfc4:	4a09      	ldr	r2, [pc, #36]	; (1bfec <rx_complete_cb+0x294>)
   1bfc6:	6953      	ldr	r3, [r2, #20]
   1bfc8:	3301      	adds	r3, #1
   1bfca:	6153      	str	r3, [r2, #20]
   1bfcc:	f106 0050 	add.w	r0, r6, #80	; 0x50
   1bfd0:	f7ed fee8 	bl	9da4 <os_sem_release>
                rng_issue_complete(inst);
   1bfd4:	4620      	mov	r0, r4
   1bfd6:	f7f0 ff4f 	bl	ce78 <rng_issue_complete>
    return true;
   1bfda:	2001      	movs	r0, #1
                break;
   1bfdc:	e6ea      	b.n	1bdb4 <rx_complete_cb+0x5c>
        return false;
   1bfde:	2000      	movs	r0, #0
}
   1bfe0:	4770      	bx	lr
        return false;
   1bfe2:	2000      	movs	r0, #0
   1bfe4:	e6e6      	b.n	1bdb4 <rx_complete_cb+0x5c>
   1bfe6:	bf00      	nop
   1bfe8:	20000f24 	.word	0x20000f24
   1bfec:	20004634 	.word	0x20004634

0001bff0 <twr_ss_ext_pkg_init>:
{
   1bff0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bff2:	b083      	sub	sp, #12
    printf("{\"utime\": %"PRIu32",\"msg\": \"twr_ss_ext_pkg_init\"}\n",
   1bff4:	f7f2 fa09 	bl	e40a <dpl_cputime_get32>
   1bff8:	4601      	mov	r1, r0
   1bffa:	481b      	ldr	r0, [pc, #108]	; (1c068 <twr_ss_ext_pkg_init+0x78>)
   1bffc:	f7f2 f980 	bl	e300 <printf>
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   1c000:	2400      	movs	r4, #0
   1c002:	b18c      	cbz	r4, 1c028 <twr_ss_ext_pkg_init+0x38>
    rc = stats_init(
   1c004:	4d19      	ldr	r5, [pc, #100]	; (1c06c <twr_ss_ext_pkg_init+0x7c>)
   1c006:	2202      	movs	r2, #2
   1c008:	9200      	str	r2, [sp, #0]
   1c00a:	4b19      	ldr	r3, [pc, #100]	; (1c070 <twr_ss_ext_pkg_init+0x80>)
   1c00c:	2104      	movs	r1, #4
   1c00e:	4628      	mov	r0, r5
   1c010:	f7f4 ffee 	bl	10ff0 <stats_init>
   1c014:	4604      	mov	r4, r0
    rc |= stats_register("twr_ss_ext", STATS_HDR(g_twr_ss_ext_stat));
   1c016:	4629      	mov	r1, r5
   1c018:	4816      	ldr	r0, [pc, #88]	; (1c074 <twr_ss_ext_pkg_init+0x84>)
   1c01a:	f7f5 f873 	bl	11104 <stats_register>
    assert(rc == 0);
   1c01e:	ea54 0300 	orrs.w	r3, r4, r0
   1c022:	d11b      	bne.n	1c05c <twr_ss_ext_pkg_init+0x6c>
}
   1c024:	b003      	add	sp, #12
   1c026:	bdf0      	pop	{r4, r5, r6, r7, pc}
        udev = uwb_dev_idx_lookup(i);
   1c028:	4620      	mov	r0, r4
   1c02a:	f7ec fcf3 	bl	8a14 <uwb_dev_idx_lookup>
        if (!udev) {
   1c02e:	4607      	mov	r7, r0
   1c030:	b190      	cbz	r0, 1c058 <twr_ss_ext_pkg_init+0x68>
        g_cbs[i].inst_ptr = (struct uwb_rng_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_RNG);
   1c032:	2104      	movs	r1, #4
   1c034:	f7ec fd73 	bl	8b1e <uwb_mac_find_cb_inst_ptr>
   1c038:	0126      	lsls	r6, r4, #4
   1c03a:	ebc4 1504 	rsb	r5, r4, r4, lsl #4
   1c03e:	4b0e      	ldr	r3, [pc, #56]	; (1c078 <twr_ss_ext_pkg_init+0x88>)
   1c040:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   1c044:	6068      	str	r0, [r5, #4]
        uwb_mac_append_interface(udev, &g_cbs[i]);
   1c046:	4629      	mov	r1, r5
   1c048:	4638      	mov	r0, r7
   1c04a:	f7ec fd13 	bl	8a74 <uwb_mac_append_interface>
        uwb_rng_append_config(g_cbs[i].inst_ptr, &g_rng_cfgs[i]);
   1c04e:	490b      	ldr	r1, [pc, #44]	; (1c07c <twr_ss_ext_pkg_init+0x8c>)
   1c050:	4431      	add	r1, r6
   1c052:	6868      	ldr	r0, [r5, #4]
   1c054:	f7f0 fbe2 	bl	c81c <uwb_rng_append_config>
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   1c058:	3401      	adds	r4, #1
   1c05a:	e7d2      	b.n	1c002 <twr_ss_ext_pkg_init+0x12>
    assert(rc == 0);
   1c05c:	2300      	movs	r3, #0
   1c05e:	461a      	mov	r2, r3
   1c060:	4619      	mov	r1, r3
   1c062:	4618      	mov	r0, r3
   1c064:	f7ec ff7e 	bl	8f64 <__assert_func>
   1c068:	000249a4 	.word	0x000249a4
   1c06c:	20004634 	.word	0x20004634
   1c070:	000249e0 	.word	0x000249e0
   1c074:	000249d4 	.word	0x000249d4
   1c078:	20000ee8 	.word	0x20000ee8
   1c07c:	20000f34 	.word	0x20000f34

0001c080 <twr_ss_ext_free>:
twr_ss_ext_free(struct uwb_dev * inst){
   1c080:	b508      	push	{r3, lr}
    assert(inst);
   1c082:	b118      	cbz	r0, 1c08c <twr_ss_ext_free+0xc>
    uwb_mac_remove_interface(inst, UWBEXT_RNG_SS_EXT);
   1c084:	2106      	movs	r1, #6
   1c086:	f7ec fd1a 	bl	8abe <uwb_mac_remove_interface>
}
   1c08a:	bd08      	pop	{r3, pc}
    assert(inst);
   1c08c:	2300      	movs	r3, #0
   1c08e:	461a      	mov	r2, r3
   1c090:	4619      	mov	r1, r3
   1c092:	4618      	mov	r0, r3
   1c094:	f7ec ff66 	bl	8f64 <__assert_func>

0001c098 <twr_ss_ext_pkg_down>:
{
   1c098:	b538      	push	{r3, r4, r5, lr}
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   1c09a:	2400      	movs	r4, #0
   1c09c:	b10c      	cbz	r4, 1c0a2 <twr_ss_ext_pkg_down+0xa>
}
   1c09e:	2000      	movs	r0, #0
   1c0a0:	bd38      	pop	{r3, r4, r5, pc}
        rng = (struct uwb_rng_instance *)g_cbs[i].inst_ptr;
   1c0a2:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   1c0a6:	009a      	lsls	r2, r3, #2
   1c0a8:	4b07      	ldr	r3, [pc, #28]	; (1c0c8 <twr_ss_ext_pkg_down+0x30>)
   1c0aa:	4413      	add	r3, r2
   1c0ac:	685d      	ldr	r5, [r3, #4]
        if (!rng) continue;
   1c0ae:	b145      	cbz	r5, 1c0c2 <twr_ss_ext_pkg_down+0x2a>
        uwb_rng_remove_config(g_cbs[i].inst_ptr, g_rng_cfgs[i].rng_code);
   1c0b0:	0123      	lsls	r3, r4, #4
   1c0b2:	4a06      	ldr	r2, [pc, #24]	; (1c0cc <twr_ss_ext_pkg_down+0x34>)
   1c0b4:	5ad1      	ldrh	r1, [r2, r3]
   1c0b6:	4628      	mov	r0, r5
   1c0b8:	f7f0 fbc9 	bl	c84e <uwb_rng_remove_config>
        twr_ss_ext_free(rng->dev_inst);
   1c0bc:	6828      	ldr	r0, [r5, #0]
   1c0be:	f7ff ffdf 	bl	1c080 <twr_ss_ext_free>
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   1c0c2:	3401      	adds	r4, #1
   1c0c4:	e7ea      	b.n	1c09c <twr_ss_ext_pkg_down+0x4>
   1c0c6:	bf00      	nop
   1c0c8:	20000ee8 	.word	0x20000ee8
   1c0cc:	20000f34 	.word	0x20000f34

0001c0d0 <wcs_timescale_cb>:
 *
 * returns none
 */
static bool
wcs_timescale_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
   1c0d0:	b510      	push	{r4, lr}
    struct uwb_wcs_instance * wcs = (struct uwb_wcs_instance *)cbs->inst_ptr;
   1c0d2:	684c      	ldr	r4, [r1, #4]
    struct uwb_ccp_instance * ccp = wcs->ccp;
   1c0d4:	6e22      	ldr	r2, [r4, #96]	; 0x60

    uwb_ccp_frame_t * frame = ccp->frames[(ccp->idx)%ccp->nframes];
   1c0d6:	f8b2 30ee 	ldrh.w	r3, [r2, #238]	; 0xee
   1c0da:	f8b2 10ec 	ldrh.w	r1, [r2, #236]	; 0xec
   1c0de:	fbb3 f0f1 	udiv	r0, r3, r1
   1c0e2:	fb01 3310 	mls	r3, r1, r0, r3
   1c0e6:	b29b      	uxth	r3, r3
   1c0e8:	33e0      	adds	r3, #224	; 0xe0
   1c0ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    wcs->carrier_integrator = frame->carrier_integrator;
   1c0ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c0f0:	63a3      	str	r3, [r4, #56]	; 0x38
    wcs->observed_interval = (ccp->local_epoch - wcs->local_epoch.lo) & 0x0FFFFFFFFFFUL; // Observed ccp interval
   1c0f2:	f8d2 00d8 	ldr.w	r0, [r2, #216]	; 0xd8
   1c0f6:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
   1c0fa:	69a1      	ldr	r1, [r4, #24]
   1c0fc:	f894 c01c 	ldrb.w	ip, [r4, #28]
   1c100:	1a40      	subs	r0, r0, r1
   1c102:	eb63 030c 	sbc.w	r3, r3, ip
   1c106:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   1c10a:	60a0      	str	r0, [r4, #8]
   1c10c:	60e3      	str	r3, [r4, #12]
    wcs->master_epoch.timestamp = ccp->master_epoch.timestamp;
   1c10e:	ed92 7b34 	vldr	d7, [r2, #208]	; 0xd0
   1c112:	ed84 7b04 	vstr	d7, [r4, #16]
    wcs->local_epoch.timestamp += wcs->observed_interval;
   1c116:	1809      	adds	r1, r1, r0
   1c118:	69e0      	ldr	r0, [r4, #28]
   1c11a:	eb43 0300 	adc.w	r3, r3, r0
   1c11e:	61a1      	str	r1, [r4, #24]
   1c120:	61e3      	str	r3, [r4, #28]

    if(ccp->status.valid){
   1c122:	f892 30c8 	ldrb.w	r3, [r2, #200]	; 0xc8
   1c126:	f013 0f04 	tst.w	r3, #4
   1c12a:	d00a      	beq.n	1c142 <wcs_timescale_cb+0x72>
        if (wcs->config.postprocess == true)
   1c12c:	7923      	ldrb	r3, [r4, #4]
   1c12e:	f013 0f01 	tst.w	r3, #1
   1c132:	d012      	beq.n	1c15a <wcs_timescale_cb+0x8a>
    return (struct dpl_eventq *) os_eventq_dflt_get();
   1c134:	f7ed faf8 	bl	9728 <os_eventq_dflt_get>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
   1c138:	f104 0150 	add.w	r1, r4, #80	; 0x50
   1c13c:	f7ed fa46 	bl	95cc <os_eventq_put>
}
   1c140:	e00b      	b.n	1c15a <wcs_timescale_cb+0x8a>
            dpl_eventq_put(dpl_eventq_dflt_get(), &wcs->postprocess_ev);
    }else{
        wcs->normalized_skew = (dpl_float64_t) 1.0l;
   1c142:	2200      	movs	r2, #0
   1c144:	4b06      	ldr	r3, [pc, #24]	; (1c160 <wcs_timescale_cb+0x90>)
   1c146:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
        wcs->fractional_skew = (dpl_float64_t) 0.0l;
   1c14a:	2200      	movs	r2, #0
   1c14c:	2300      	movs	r3, #0
   1c14e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
        wcs->status.initialized = 0;
   1c152:	7823      	ldrb	r3, [r4, #0]
   1c154:	f36f 0341 	bfc	r3, #1, #1
   1c158:	7023      	strb	r3, [r4, #0]
    }
    return true;

}
   1c15a:	2001      	movs	r0, #1
   1c15c:	bd10      	pop	{r4, pc}
   1c15e:	bf00      	nop
   1c160:	3ff00000 	.word	0x3ff00000
   1c164:	00000000 	.word	0x00000000

0001c168 <wcs_timescale_ev>:
 *
 * returns none
 */
void
wcs_timescale_ev(struct dpl_event * ev)
{
   1c168:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c16a:	b091      	sub	sp, #68	; 0x44
    assert(ev != NULL);
   1c16c:	2800      	cmp	r0, #0
   1c16e:	f000 8089 	beq.w	1c284 <wcs_timescale_ev+0x11c>
    return ev->ev.ev_arg;
   1c172:	6884      	ldr	r4, [r0, #8]
    assert(dpl_event_get_arg(ev) != NULL);
   1c174:	2c00      	cmp	r4, #0
   1c176:	f000 808b 	beq.w	1c290 <wcs_timescale_ev+0x128>

    struct uwb_wcs_instance * wcs = (struct uwb_wcs_instance *)dpl_event_get_arg(ev);
    struct uwb_ccp_instance * ccp = wcs->ccp;
   1c17a:	6e27      	ldr	r7, [r4, #96]	; 0x60
    uwb_wcs_states_t * states = (uwb_wcs_states_t *) wcs->states.array;
    timescale_instance_t * timescale = wcs->timescale;
   1c17c:	f8d4 60a0 	ldr.w	r6, [r4, #160]	; 0xa0

    if(ccp->status.valid){
   1c180:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
   1c184:	f013 0f04 	tst.w	r3, #4
   1c188:	d07a      	beq.n	1c280 <wcs_timescale_ev+0x118>
        double q[] = { MYNEWT_VAL(TIMESCALE_QVAR) * 1.0l, MYNEWT_VAL(TIMESCALE_QVAR) * 0.1l, MYNEWT_VAL(TIMESCALE_QVAR) * 0.01l};
   1c18a:	f10d 0c10 	add.w	ip, sp, #16
   1c18e:	4d68      	ldr	r5, [pc, #416]	; (1c330 <wcs_timescale_ev+0x1c8>)
   1c190:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1c192:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1c196:	e895 0003 	ldmia.w	r5, {r0, r1}
   1c19a:	e88c 0003 	stmia.w	ip, {r0, r1}

        if (wcs->status.initialized == 0){
   1c19e:	7823      	ldrb	r3, [r4, #0]
   1c1a0:	f013 0f02 	tst.w	r3, #2
   1c1a4:	d17a      	bne.n	1c29c <wcs_timescale_ev+0x134>
            states->time = (double) wcs->master_epoch.lo;
   1c1a6:	6920      	ldr	r0, [r4, #16]
   1c1a8:	7d21      	ldrb	r1, [r4, #20]
   1c1aa:	f005 f8cb 	bl	21344 <__aeabi_ul2d>
   1c1ae:	e9c4 0108 	strd	r0, r1, [r4, #32]
            states->skew = (1.0l + (double ) uwb_calc_clock_offset_ratio(
   1c1b2:	6838      	ldr	r0, [r7, #0]
    return (dev->uw_funcs->uf_calc_clock_offset_ratio(dev, integrator_val, type));
   1c1b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1c1b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   1c1ba:	2200      	movs	r2, #0
   1c1bc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   1c1be:	4798      	blx	r3
   1c1c0:	ec51 0b10 	vmov	r0, r1, d0
   1c1c4:	2200      	movs	r2, #0
   1c1c6:	4b5b      	ldr	r3, [pc, #364]	; (1c334 <wcs_timescale_ev+0x1cc>)
   1c1c8:	f004 ff3c 	bl	21044 <__adddf3>
                                ccp->dev_inst, wcs->carrier_integrator,
                                UWB_CR_CARRIER_INTEGRATOR)) * MYNEWT_VAL(UWB_WCS_DTU) ;
   1c1cc:	a354      	add	r3, pc, #336	; (adr r3, 1c320 <wcs_timescale_ev+0x1b8>)
   1c1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c1d2:	f005 f8ed 	bl	213b0 <__aeabi_dmul>
            states->skew = (1.0l + (double ) uwb_calc_clock_offset_ratio(
   1c1d6:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
            states->drift = 0;
   1c1da:	2200      	movs	r2, #0
   1c1dc:	2300      	movs	r3, #0
   1c1de:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
            double x0[] = {states->time, states->skew, states->drift};
   1c1e2:	ed94 7b08 	vldr	d7, [r4, #32]
   1c1e6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
   1c1ea:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   1c1ee:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
            double T = 1e-6l * MYNEWT_VAL(UWB_CCP_PERIOD);
            timescale = timescale_init(timescale, x0, q, T);
   1c1f2:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 1c328 <wcs_timescale_ev+0x1c0>
   1c1f6:	aa04      	add	r2, sp, #16
   1c1f8:	a90a      	add	r1, sp, #40	; 0x28
   1c1fa:	4630      	mov	r0, r6
   1c1fc:	f7fd fa1a 	bl	19634 <timescale_init>
   1c200:	4606      	mov	r6, r0
            ((timescale_states_t * )timescale->eke->x)->time = states->time;
   1c202:	6803      	ldr	r3, [r0, #0]
   1c204:	689b      	ldr	r3, [r3, #8]
   1c206:	e9d4 0108 	ldrd	r0, r1, [r4, #32]
   1c20a:	e9c3 0100 	strd	r0, r1, [r3]
            ((timescale_states_t * )timescale->eke->x)->skew = states->skew;
   1c20e:	6833      	ldr	r3, [r6, #0]
   1c210:	689b      	ldr	r3, [r3, #8]
   1c212:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
   1c216:	e9c3 0102 	strd	r0, r1, [r3, #8]
            ((timescale_states_t * )timescale->eke->x)->drift =states->drift;
   1c21a:	6833      	ldr	r3, [r6, #0]
   1c21c:	689b      	ldr	r3, [r3, #8]
   1c21e:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
   1c222:	e9c3 0104 	strd	r0, r1, [r3, #16]
            wcs->status.valid = wcs->status.initialized = 1;
   1c226:	7823      	ldrb	r3, [r4, #0]
   1c228:	f043 0302 	orr.w	r3, r3, #2
   1c22c:	7023      	strb	r3, [r4, #0]
   1c22e:	b2db      	uxtb	r3, r3
   1c230:	f043 0304 	orr.w	r3, r3, #4
   1c234:	7023      	strb	r3, [r4, #0]
            double T = wcs->observed_interval / MYNEWT_VAL(UWB_WCS_DTU) ; // observed interval in seconds, master reference
            double r[] = {MYNEWT_VAL(TIMESCALE_RVAR), MYNEWT_VAL(UWB_WCS_DTU) * 1e20};
            wcs->status.valid = timescale_main(timescale, z, q, r, T).valid;
        }

        if (wcs->status.valid){
   1c236:	7823      	ldrb	r3, [r4, #0]
   1c238:	f013 0f04 	tst.w	r3, #4
   1c23c:	d065      	beq.n	1c30a <wcs_timescale_ev+0x1a2>
            states->time = ((timescale_states_t * )timescale->eke->x)->time;
   1c23e:	6833      	ldr	r3, [r6, #0]
   1c240:	689b      	ldr	r3, [r3, #8]
   1c242:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c246:	e9c4 2308 	strd	r2, r3, [r4, #32]
            states->skew = ((timescale_states_t * )timescale->eke->x)->skew;
   1c24a:	6833      	ldr	r3, [r6, #0]
   1c24c:	689b      	ldr	r3, [r3, #8]
   1c24e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
   1c252:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
            states->drift = ((timescale_states_t * )timescale->eke->x)->drift;
   1c256:	6833      	ldr	r3, [r6, #0]
   1c258:	689b      	ldr	r3, [r3, #8]
   1c25a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
   1c25e:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
            wcs->normalized_skew = states->skew / MYNEWT_VAL(UWB_WCS_DTU);
   1c262:	a32f      	add	r3, pc, #188	; (adr r3, 1c320 <wcs_timescale_ev+0x1b8>)
   1c264:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c268:	f005 f9cc 	bl	21604 <__aeabi_ddiv>
   1c26c:	4602      	mov	r2, r0
   1c26e:	460b      	mov	r3, r1
   1c270:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
            wcs->fractional_skew = (dpl_float64_t) 1.0l - wcs->normalized_skew;
   1c274:	2000      	movs	r0, #0
   1c276:	492f      	ldr	r1, [pc, #188]	; (1c334 <wcs_timescale_ev+0x1cc>)
   1c278:	f004 fee2 	bl	21040 <__aeabi_dsub>
   1c27c:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
        .ppm = DPL_FLOAT64_MUL(wcs->fractional_skew, DPL_FLOAT64_INIT(1e6l))
    };
    wcs_json_write_uint64(&json);
#endif
    }
}
   1c280:	b011      	add	sp, #68	; 0x44
   1c282:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert(ev != NULL);
   1c284:	2300      	movs	r3, #0
   1c286:	461a      	mov	r2, r3
   1c288:	4619      	mov	r1, r3
   1c28a:	4618      	mov	r0, r3
   1c28c:	f7ec fe6a 	bl	8f64 <__assert_func>
    assert(dpl_event_get_arg(ev) != NULL);
   1c290:	2300      	movs	r3, #0
   1c292:	461a      	mov	r2, r3
   1c294:	4619      	mov	r1, r3
   1c296:	4618      	mov	r0, r3
   1c298:	f7ec fe64 	bl	8f64 <__assert_func>
            double z[] ={(double) wcs->master_epoch.lo,
   1c29c:	6920      	ldr	r0, [r4, #16]
   1c29e:	7d21      	ldrb	r1, [r4, #20]
   1c2a0:	f005 f850 	bl	21344 <__aeabi_ul2d>
   1c2a4:	e9cd 0100 	strd	r0, r1, [sp]
                        (1.0l + (double ) uwb_calc_clock_offset_ratio(
   1c2a8:	6838      	ldr	r0, [r7, #0]
   1c2aa:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1c2ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   1c2b0:	2200      	movs	r2, #0
   1c2b2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   1c2b4:	4798      	blx	r3
   1c2b6:	ec51 0b10 	vmov	r0, r1, d0
   1c2ba:	2200      	movs	r2, #0
   1c2bc:	4b1d      	ldr	r3, [pc, #116]	; (1c334 <wcs_timescale_ev+0x1cc>)
   1c2be:	f004 fec1 	bl	21044 <__adddf3>
                               UWB_CR_CARRIER_INTEGRATOR)) * MYNEWT_VAL(UWB_WCS_DTU)
   1c2c2:	a317      	add	r3, pc, #92	; (adr r3, 1c320 <wcs_timescale_ev+0x1b8>)
   1c2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c2c8:	f005 f872 	bl	213b0 <__aeabi_dmul>
            double z[] ={(double) wcs->master_epoch.lo,
   1c2cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
            double T = wcs->observed_interval / MYNEWT_VAL(UWB_WCS_DTU) ; // observed interval in seconds, master reference
   1c2d0:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
   1c2d4:	f005 f836 	bl	21344 <__aeabi_ul2d>
   1c2d8:	a311      	add	r3, pc, #68	; (adr r3, 1c320 <wcs_timescale_ev+0x1b8>)
   1c2da:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c2de:	f005 f991 	bl	21604 <__aeabi_ddiv>
   1c2e2:	ec41 0b10 	vmov	d0, r0, r1
            double r[] = {MYNEWT_VAL(TIMESCALE_RVAR), MYNEWT_VAL(UWB_WCS_DTU) * 1e20};
   1c2e6:	ad0a      	add	r5, sp, #40	; 0x28
   1c2e8:	4b13      	ldr	r3, [pc, #76]	; (1c338 <wcs_timescale_ev+0x1d0>)
   1c2ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1c2ec:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            wcs->status.valid = timescale_main(timescale, z, q, r, T).valid;
   1c2f0:	462b      	mov	r3, r5
   1c2f2:	aa04      	add	r2, sp, #16
   1c2f4:	4669      	mov	r1, sp
   1c2f6:	4630      	mov	r0, r6
   1c2f8:	f7fd fa32 	bl	19760 <timescale_main>
   1c2fc:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   1c300:	7823      	ldrb	r3, [r4, #0]
   1c302:	f360 0382 	bfi	r3, r0, #2, #1
   1c306:	7023      	strb	r3, [r4, #0]
   1c308:	e795      	b.n	1c236 <wcs_timescale_ev+0xce>
            wcs->normalized_skew = (dpl_float64_t) 1.0l;
   1c30a:	2200      	movs	r2, #0
   1c30c:	4b09      	ldr	r3, [pc, #36]	; (1c334 <wcs_timescale_ev+0x1cc>)
   1c30e:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
            wcs->fractional_skew = (dpl_float64_t) 0.0l;
   1c312:	2200      	movs	r2, #0
   1c314:	2300      	movs	r3, #0
   1c316:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
}
   1c31a:	e7b1      	b.n	1c280 <wcs_timescale_ev+0x118>
   1c31c:	f3af 8000 	nop.w
   1c320:	00000000 	.word	0x00000000
   1c324:	422e8480 	.word	0x422e8480
   1c328:	a0b5ed8d 	.word	0xa0b5ed8d
   1c32c:	3ff0c6f7 	.word	0x3ff0c6f7
   1c330:	00024a20 	.word	0x00024a20
   1c334:	3ff00000 	.word	0x3ff00000
   1c338:	00024a38 	.word	0x00024a38
   1c33c:	00000000 	.word	0x00000000

0001c340 <wcs_timescale_init>:
wcs_timescale_init(struct uwb_wcs_instance * wcs){
   1c340:	b570      	push	{r4, r5, r6, lr}
   1c342:	b086      	sub	sp, #24
   1c344:	4604      	mov	r4, r0
    struct uwb_ccp_instance * ccp = wcs->ccp;
   1c346:	6e06      	ldr	r6, [r0, #96]	; 0x60
    double q[] = { MYNEWT_VAL(TIMESCALE_QVAR) * 1.0l, MYNEWT_VAL(TIMESCALE_QVAR) * 0.1l, MYNEWT_VAL(TIMESCALE_QVAR) * 0.01l};
   1c348:	46ec      	mov	ip, sp
   1c34a:	4d1b      	ldr	r5, [pc, #108]	; (1c3b8 <wcs_timescale_init+0x78>)
   1c34c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1c34e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1c352:	e895 0003 	ldmia.w	r5, {r0, r1}
   1c356:	e88c 0003 	stmia.w	ip, {r0, r1}
    wcs->timescale = timescale_init(NULL, NULL, q, T);
   1c35a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 1c3b0 <wcs_timescale_init+0x70>
   1c35e:	466a      	mov	r2, sp
   1c360:	2100      	movs	r1, #0
   1c362:	4608      	mov	r0, r1
   1c364:	f7fd f966 	bl	19634 <timescale_init>
   1c368:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    wcs->cbs = (struct uwb_mac_interface){
   1c36c:	f104 0564 	add.w	r5, r4, #100	; 0x64
   1c370:	223c      	movs	r2, #60	; 0x3c
   1c372:	2100      	movs	r1, #0
   1c374:	4628      	mov	r0, r5
   1c376:	f7f1 fbb0 	bl	dada <memset>
   1c37a:	2302      	movs	r3, #2
   1c37c:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
   1c380:	66a4      	str	r4, [r4, #104]	; 0x68
   1c382:	4b0e      	ldr	r3, [pc, #56]	; (1c3bc <wcs_timescale_init+0x7c>)
   1c384:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    wcs->normalized_skew = (dpl_float64_t) 1.0l;
   1c388:	2200      	movs	r2, #0
   1c38a:	4b0d      	ldr	r3, [pc, #52]	; (1c3c0 <wcs_timescale_init+0x80>)
   1c38c:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
    wcs->fractional_skew = (dpl_float64_t) 0.0l;
   1c390:	2200      	movs	r2, #0
   1c392:	2300      	movs	r3, #0
   1c394:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
    uwb_mac_append_interface(ccp->dev_inst, &wcs->cbs);
   1c398:	4629      	mov	r1, r5
   1c39a:	6830      	ldr	r0, [r6, #0]
   1c39c:	f7ec fb6a 	bl	8a74 <uwb_mac_append_interface>
    uwb_wcs_set_postprocess(wcs, &wcs_timescale_ev);      // Using default process
   1c3a0:	4908      	ldr	r1, [pc, #32]	; (1c3c4 <wcs_timescale_init+0x84>)
   1c3a2:	4620      	mov	r0, r4
   1c3a4:	f7f1 f968 	bl	d678 <uwb_wcs_set_postprocess>
}
   1c3a8:	4620      	mov	r0, r4
   1c3aa:	b006      	add	sp, #24
   1c3ac:	bd70      	pop	{r4, r5, r6, pc}
   1c3ae:	bf00      	nop
   1c3b0:	a0b5ed8d 	.word	0xa0b5ed8d
   1c3b4:	3ff0c6f7 	.word	0x3ff0c6f7
   1c3b8:	00024a20 	.word	0x00024a20
   1c3bc:	0001c0d1 	.word	0x0001c0d1
   1c3c0:	3ff00000 	.word	0x3ff00000
   1c3c4:	0001c169 	.word	0x0001c169

0001c3c8 <wcs_timescale_free>:
{
   1c3c8:	b510      	push	{r4, lr}
   1c3ca:	4604      	mov	r4, r0
    uwb_mac_remove_interface(wcs->ccp->dev_inst, wcs->cbs.id);
   1c3cc:	6e03      	ldr	r3, [r0, #96]	; 0x60
   1c3ce:	f8b0 1066 	ldrh.w	r1, [r0, #102]	; 0x66
   1c3d2:	6818      	ldr	r0, [r3, #0]
   1c3d4:	f7ec fb73 	bl	8abe <uwb_mac_remove_interface>
    timescale_free(wcs->timescale);
   1c3d8:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   1c3dc:	f7fd f9a4 	bl	19728 <timescale_free>
}
   1c3e0:	bd10      	pop	{r4, pc}
	...

0001c3e4 <wcs_timescale_pkg_init>:
 *
 * @return void
 */
void
wcs_timescale_pkg_init(void)
{
   1c3e4:	b510      	push	{r4, lr}
    int i;
    struct uwb_dev * udev;
    struct uwb_ccp_instance * ccp;

#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    printf("{\"utime\": %lu,\"msg\": \"wcs_timescale_pkg_init\"}\n",dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
   1c3e6:	f7f2 f810 	bl	e40a <dpl_cputime_get32>
   1c3ea:	4601      	mov	r1, r0
   1c3ec:	480a      	ldr	r0, [pc, #40]	; (1c418 <wcs_timescale_pkg_init+0x34>)
   1c3ee:	f7f1 ff87 	bl	e300 <printf>
#endif

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
   1c3f2:	2400      	movs	r4, #0
   1c3f4:	e000      	b.n	1c3f8 <wcs_timescale_pkg_init+0x14>
   1c3f6:	3401      	adds	r4, #1
   1c3f8:	2c02      	cmp	r4, #2
   1c3fa:	dc0b      	bgt.n	1c414 <wcs_timescale_pkg_init+0x30>
        udev = uwb_dev_idx_lookup(i);
   1c3fc:	4620      	mov	r0, r4
   1c3fe:	f7ec fb09 	bl	8a14 <uwb_dev_idx_lookup>
        if (!udev) {
   1c402:	2800      	cmp	r0, #0
   1c404:	d0f7      	beq.n	1c3f6 <wcs_timescale_pkg_init+0x12>
            continue;
        }
        ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_CCP);
   1c406:	2101      	movs	r1, #1
   1c408:	f7ec fb89 	bl	8b1e <uwb_mac_find_cb_inst_ptr>
        wcs_timescale_init(ccp->wcs);
   1c40c:	6e80      	ldr	r0, [r0, #104]	; 0x68
   1c40e:	f7ff ff97 	bl	1c340 <wcs_timescale_init>
   1c412:	e7f0      	b.n	1c3f6 <wcs_timescale_pkg_init+0x12>
    }
}
   1c414:	bd10      	pop	{r4, pc}
   1c416:	bf00      	nop
   1c418:	000249ec 	.word	0x000249ec

0001c41c <wcs_timescale_pkg_down>:
 *
 * @return void
 */
int
wcs_timescale_pkg_down(int reason)
{
   1c41c:	b510      	push	{r4, lr}
    int i;
    struct uwb_dev *udev;
    struct uwb_wcs_instance * wcs;

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
   1c41e:	2400      	movs	r4, #0
   1c420:	e000      	b.n	1c424 <wcs_timescale_pkg_down+0x8>
   1c422:	3401      	adds	r4, #1
   1c424:	2c02      	cmp	r4, #2
   1c426:	dc0c      	bgt.n	1c442 <wcs_timescale_pkg_down+0x26>
        udev = uwb_dev_idx_lookup(i);
   1c428:	4620      	mov	r0, r4
   1c42a:	f7ec faf3 	bl	8a14 <uwb_dev_idx_lookup>
        if (!udev) {
   1c42e:	2800      	cmp	r0, #0
   1c430:	d0f7      	beq.n	1c422 <wcs_timescale_pkg_down+0x6>
            continue;
        }
        wcs = (struct uwb_wcs_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_WCS);
   1c432:	2102      	movs	r1, #2
   1c434:	f7ec fb73 	bl	8b1e <uwb_mac_find_cb_inst_ptr>
        if (!wcs) {
   1c438:	2800      	cmp	r0, #0
   1c43a:	d0f2      	beq.n	1c422 <wcs_timescale_pkg_down+0x6>
            continue;
        }
        wcs_timescale_free(wcs);
   1c43c:	f7ff ffc4 	bl	1c3c8 <wcs_timescale_free>
   1c440:	e7ef      	b.n	1c422 <wcs_timescale_pkg_down+0x6>
    }

    return 0;
}
   1c442:	2000      	movs	r0, #0
   1c444:	bd10      	pop	{r4, pc}

0001c446 <realloc>:
#include "malloc.h"

/* FIXME: This is cheesy, it should be fixed later */

void *realloc(void *ptr, size_t size)
{
   1c446:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct free_arena_header *ah;
	void *newptr;
	size_t oldsize;

	if (!ptr)
   1c448:	b300      	cbz	r0, 1c48c <realloc+0x46>
   1c44a:	4606      	mov	r6, r0
		return malloc(size);

	if (size == 0 || size > (SIZE_MAX - sizeof(struct arena_header))) {
   1c44c:	1e4b      	subs	r3, r1, #1
   1c44e:	f113 0f12 	cmn.w	r3, #18
   1c452:	d820      	bhi.n	1c496 <realloc+0x50>
		free(ptr);
		return NULL;
	}

	/* Add the obligatory arena header, and round up */
	size = (size + 2 * sizeof(struct arena_header) - 1) & ARENA_SIZE_MASK;
   1c454:	311f      	adds	r1, #31
   1c456:	f021 040f 	bic.w	r4, r1, #15

	ah = (struct free_arena_header *)
	    ((struct arena_header *)ptr - 1);

	if (ah->a.size >= size && size >= (ah->a.size >> 2)) {
   1c45a:	f850 5c0c 	ldr.w	r5, [r0, #-12]
   1c45e:	42a5      	cmp	r5, r4
   1c460:	d302      	bcc.n	1c468 <realloc+0x22>
   1c462:	ebb4 0f95 	cmp.w	r4, r5, lsr #2
   1c466:	d21c      	bcs.n	1c4a2 <realloc+0x5c>
	} else {
		/* Make me a new block.  This is kind of bogus; we should
		   be checking the following block to see if we can do an
		   in-place adjustment... fix that later. */

		oldsize = ah->a.size - sizeof(struct arena_header);
   1c468:	3d10      	subs	r5, #16

		newptr = malloc(size);
   1c46a:	4620      	mov	r0, r4
   1c46c:	f7f1 fab8 	bl	d9e0 <malloc>
                if (newptr) {
   1c470:	4607      	mov	r7, r0
   1c472:	b1a0      	cbz	r0, 1c49e <realloc+0x58>
                    memcpy(newptr, ptr, (size < oldsize) ? size : oldsize);
   1c474:	4622      	mov	r2, r4
   1c476:	42ac      	cmp	r4, r5
   1c478:	bf28      	it	cs
   1c47a:	462a      	movcs	r2, r5
   1c47c:	4631      	mov	r1, r6
   1c47e:	f7f1 fb1f 	bl	dac0 <memcpy>
                    free(ptr);
   1c482:	4630      	mov	r0, r6
   1c484:	f7f1 fae2 	bl	da4c <free>
                } else {
                    newptr = ptr;
                }
		return newptr;
	}
}
   1c488:	4638      	mov	r0, r7
   1c48a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return malloc(size);
   1c48c:	4608      	mov	r0, r1
   1c48e:	f7f1 faa7 	bl	d9e0 <malloc>
   1c492:	4607      	mov	r7, r0
   1c494:	e7f8      	b.n	1c488 <realloc+0x42>
		free(ptr);
   1c496:	f7f1 fad9 	bl	da4c <free>
		return NULL;
   1c49a:	2700      	movs	r7, #0
   1c49c:	e7f4      	b.n	1c488 <realloc+0x42>
                    newptr = ptr;
   1c49e:	4637      	mov	r7, r6
		return newptr;
   1c4a0:	e7f2      	b.n	1c488 <realloc+0x42>
		return ptr;
   1c4a2:	4607      	mov	r7, r0
   1c4a4:	e7f0      	b.n	1c488 <realloc+0x42>

0001c4a6 <sprintf>:
#include <stdio.h>
#include <unistd.h>
#include <stdint.h>

int sprintf(char *buffer, const char *format, ...)
{
   1c4a6:	b40e      	push	{r1, r2, r3}
   1c4a8:	b500      	push	{lr}
   1c4aa:	b082      	sub	sp, #8
   1c4ac:	ab03      	add	r3, sp, #12
   1c4ae:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list ap;
	int rv;

	va_start(ap, format);
   1c4b2:	9301      	str	r3, [sp, #4]
	rv = vsnprintf(buffer, SIZE_MAX/2, format, ap);
   1c4b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1c4b8:	f7f1 ff34 	bl	e324 <vsnprintf>
	va_end(ap);

	return rv;
}
   1c4bc:	b002      	add	sp, #8
   1c4be:	f85d eb04 	ldr.w	lr, [sp], #4
   1c4c2:	b003      	add	sp, #12
   1c4c4:	4770      	bx	lr

0001c4c6 <strchr>:

#include <string.h>

char *strchr(const char *s, int c)
{
	while (*s != (char)c) {
   1c4c6:	e000      	b.n	1c4ca <strchr+0x4>
		if (!*s)
			return NULL;
		s++;
   1c4c8:	3001      	adds	r0, #1
	while (*s != (char)c) {
   1c4ca:	7803      	ldrb	r3, [r0, #0]
   1c4cc:	b2ca      	uxtb	r2, r1
   1c4ce:	4293      	cmp	r3, r2
   1c4d0:	d003      	beq.n	1c4da <strchr+0x14>
		if (!*s)
   1c4d2:	2b00      	cmp	r3, #0
   1c4d4:	d1f8      	bne.n	1c4c8 <strchr+0x2>
			return NULL;
   1c4d6:	2000      	movs	r0, #0
	}

	return (char *)s;
}
   1c4d8:	4770      	bx	lr
   1c4da:	4770      	bx	lr

0001c4dc <strcpy>:
 */

#include <string.h>

char *strcpy(char *dst, const char *src)
{
   1c4dc:	b410      	push	{r4}
	char *q = dst;
   1c4de:	4602      	mov	r2, r0
	const char *p = src;
	char ch;

	do {
		*q++ = ch = *p++;
   1c4e0:	780c      	ldrb	r4, [r1, #0]
   1c4e2:	3101      	adds	r1, #1
   1c4e4:	7014      	strb	r4, [r2, #0]
   1c4e6:	3201      	adds	r2, #1
	} while (ch);
   1c4e8:	2c00      	cmp	r4, #0
   1c4ea:	d1f9      	bne.n	1c4e0 <strcpy+0x4>

	return dst;
}
   1c4ec:	f85d 4b04 	ldr.w	r4, [sp], #4
   1c4f0:	4770      	bx	lr

0001c4f2 <strncmp>:
 */

#include <string.h>

int strncmp(const char *s1, const char *s2, size_t n)
{
   1c4f2:	b410      	push	{r4}
   1c4f4:	4603      	mov	r3, r0
	const unsigned char *c1 = (const unsigned char *)s1;
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;
   1c4f6:	2000      	movs	r0, #0

	while (n--) {
   1c4f8:	4614      	mov	r4, r2
   1c4fa:	3a01      	subs	r2, #1
   1c4fc:	b13c      	cbz	r4, 1c50e <strncmp+0x1c>
		d = (int)(ch = *c1++) - (int)*c2++;
   1c4fe:	f813 4b01 	ldrb.w	r4, [r3], #1
   1c502:	f811 0b01 	ldrb.w	r0, [r1], #1
		if (d || !ch)
   1c506:	1a20      	subs	r0, r4, r0
   1c508:	d101      	bne.n	1c50e <strncmp+0x1c>
   1c50a:	2c00      	cmp	r4, #0
   1c50c:	d1f4      	bne.n	1c4f8 <strncmp+0x6>
			break;
	}

	return d;
}
   1c50e:	f85d 4b04 	ldr.w	r4, [sp], #4
   1c512:	4770      	bx	lr

0001c514 <strrchr>:
 */

#include <string.h>

char *strrchr(const char *s, int c)
{
   1c514:	4603      	mov	r3, r0
	const char *found = NULL;
   1c516:	2000      	movs	r0, #0

	while (*s) {
   1c518:	e000      	b.n	1c51c <strrchr+0x8>
		if (*s == (char)c)
			found = s;
		s++;
   1c51a:	3301      	adds	r3, #1
	while (*s) {
   1c51c:	781a      	ldrb	r2, [r3, #0]
   1c51e:	b12a      	cbz	r2, 1c52c <strrchr+0x18>
		if (*s == (char)c)
   1c520:	fa5f fc81 	uxtb.w	ip, r1
   1c524:	4594      	cmp	ip, r2
   1c526:	d1f8      	bne.n	1c51a <strrchr+0x6>
			found = s;
   1c528:	4618      	mov	r0, r3
   1c52a:	e7f6      	b.n	1c51a <strrchr+0x6>
	}

	return (char *)found;
}
   1c52c:	4770      	bx	lr

0001c52e <strtok_r>:
#include <string.h>

char *strtok_r(char *s, const char *delim, char **holder)
{
   1c52e:	b538      	push	{r3, r4, r5, lr}
   1c530:	460d      	mov	r5, r1
   1c532:	4614      	mov	r4, r2
	if (s)
   1c534:	b100      	cbz	r0, 1c538 <strtok_r+0xa>
		*holder = s;
   1c536:	6020      	str	r0, [r4, #0]

	do {
		s = strsep(holder, delim);
   1c538:	4629      	mov	r1, r5
   1c53a:	4620      	mov	r0, r4
   1c53c:	f000 f89e 	bl	1c67c <strsep>
	} while (s && !*s);
   1c540:	4603      	mov	r3, r0
   1c542:	b110      	cbz	r0, 1c54a <strtok_r+0x1c>
   1c544:	7800      	ldrb	r0, [r0, #0]
   1c546:	2800      	cmp	r0, #0
   1c548:	d0f6      	beq.n	1c538 <strtok_r+0xa>

	return s;
}
   1c54a:	4618      	mov	r0, r3
   1c54c:	bd38      	pop	{r3, r4, r5, pc}

0001c54e <strtol>:
#include <stddef.h>
#include <stdlib.h>
#include <inttypes.h>

TYPE NAME(const char *nptr, char **endptr, int base)
{
   1c54e:	b508      	push	{r3, lr}
	return (TYPE) strntoumax(nptr, endptr, base, ~(size_t) 0);
   1c550:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c554:	f000 f812 	bl	1c57c <strntoumax>
}
   1c558:	bd08      	pop	{r3, pc}

0001c55a <strtoll>:
{
   1c55a:	b508      	push	{r3, lr}
	return (TYPE) strntoumax(nptr, endptr, base, ~(size_t) 0);
   1c55c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c560:	f000 f80c 	bl	1c57c <strntoumax>
}
   1c564:	bd08      	pop	{r3, pc}
	...

0001c568 <vprintf>:

#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
   1c568:	b508      	push	{r3, lr}
   1c56a:	460a      	mov	r2, r1
	return vfprintf(stdout, format, ap);
   1c56c:	4601      	mov	r1, r0
   1c56e:	4b02      	ldr	r3, [pc, #8]	; (1c578 <vprintf+0x10>)
   1c570:	6818      	ldr	r0, [r3, #0]
   1c572:	f7f1 fec1 	bl	e2f8 <vfprintf>
}
   1c576:	bd08      	pop	{r3, pc}
   1c578:	00023388 	.word	0x00023388

0001c57c <strntoumax>:
		return -1;
	}
}

uintmax_t strntoumax(const char *nptr, char **endptr, int base, size_t n)
{
   1c57c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c57e:	4604      	mov	r4, r0
   1c580:	460d      	mov	r5, r1
	int minus = 0;
	uintmax_t v = 0;
	int d;

	while (n && isspace((unsigned char)*nptr)) {
   1c582:	e001      	b.n	1c588 <strntoumax+0xc>
		nptr++;
   1c584:	3401      	adds	r4, #1
		n--;
   1c586:	3b01      	subs	r3, #1
	while (n && isspace((unsigned char)*nptr)) {
   1c588:	b143      	cbz	r3, 1c59c <strntoumax+0x20>
   1c58a:	7821      	ldrb	r1, [r4, #0]
	return __c == ' ' || __c == '\n' || __c == '\t' || __c == '\r';
   1c58c:	2920      	cmp	r1, #32
   1c58e:	d0f9      	beq.n	1c584 <strntoumax+0x8>
   1c590:	290a      	cmp	r1, #10
   1c592:	d0f7      	beq.n	1c584 <strntoumax+0x8>
   1c594:	2909      	cmp	r1, #9
   1c596:	d0f5      	beq.n	1c584 <strntoumax+0x8>
   1c598:	290d      	cmp	r1, #13
   1c59a:	d0f3      	beq.n	1c584 <strntoumax+0x8>
	}

	/* Single optional + or - */
	if (n) {
   1c59c:	b16b      	cbz	r3, 1c5ba <strntoumax+0x3e>
		char c = *nptr;
   1c59e:	7827      	ldrb	r7, [r4, #0]
		if (c == '-' || c == '+') {
   1c5a0:	2f2d      	cmp	r7, #45	; 0x2d
   1c5a2:	d003      	beq.n	1c5ac <strntoumax+0x30>
   1c5a4:	2f2b      	cmp	r7, #43	; 0x2b
   1c5a6:	d001      	beq.n	1c5ac <strntoumax+0x30>
	int minus = 0;
   1c5a8:	2700      	movs	r7, #0
   1c5aa:	e007      	b.n	1c5bc <strntoumax+0x40>
			minus = (c == '-');
   1c5ac:	2f2d      	cmp	r7, #45	; 0x2d
   1c5ae:	bf14      	ite	ne
   1c5b0:	2700      	movne	r7, #0
   1c5b2:	2701      	moveq	r7, #1
			nptr++;
   1c5b4:	3401      	adds	r4, #1
			n--;
   1c5b6:	3b01      	subs	r3, #1
   1c5b8:	e000      	b.n	1c5bc <strntoumax+0x40>
	int minus = 0;
   1c5ba:	2700      	movs	r7, #0
		}
	}

	if (base == 0) {
   1c5bc:	b9ba      	cbnz	r2, 1c5ee <strntoumax+0x72>
		if (n >= 2 && nptr[0] == '0' &&
   1c5be:	2b01      	cmp	r3, #1
   1c5c0:	d902      	bls.n	1c5c8 <strntoumax+0x4c>
   1c5c2:	7822      	ldrb	r2, [r4, #0]
   1c5c4:	2a30      	cmp	r2, #48	; 0x30
   1c5c6:	d005      	beq.n	1c5d4 <strntoumax+0x58>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
			n -= 2;
			nptr += 2;
			base = 16;
		} else if (n >= 1 && nptr[0] == '0') {
   1c5c8:	b31b      	cbz	r3, 1c612 <strntoumax+0x96>
   1c5ca:	7822      	ldrb	r2, [r4, #0]
   1c5cc:	2a30      	cmp	r2, #48	; 0x30
   1c5ce:	d00a      	beq.n	1c5e6 <strntoumax+0x6a>
			n--;
			nptr++;
			base = 8;
		} else {
			base = 10;
   1c5d0:	220a      	movs	r2, #10
   1c5d2:	e00e      	b.n	1c5f2 <strntoumax+0x76>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   1c5d4:	7862      	ldrb	r2, [r4, #1]
		if (n >= 2 && nptr[0] == '0' &&
   1c5d6:	2a78      	cmp	r2, #120	; 0x78
   1c5d8:	d001      	beq.n	1c5de <strntoumax+0x62>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   1c5da:	2a58      	cmp	r2, #88	; 0x58
   1c5dc:	d1f4      	bne.n	1c5c8 <strntoumax+0x4c>
			n -= 2;
   1c5de:	3b02      	subs	r3, #2
			nptr += 2;
   1c5e0:	3402      	adds	r4, #2
			base = 16;
   1c5e2:	2210      	movs	r2, #16
   1c5e4:	e005      	b.n	1c5f2 <strntoumax+0x76>
			n--;
   1c5e6:	3b01      	subs	r3, #1
			nptr++;
   1c5e8:	3401      	adds	r4, #1
			base = 8;
   1c5ea:	2208      	movs	r2, #8
   1c5ec:	e001      	b.n	1c5f2 <strntoumax+0x76>
		}
	} else if (base == 16) {
   1c5ee:	2a10      	cmp	r2, #16
   1c5f0:	d002      	beq.n	1c5f8 <strntoumax+0x7c>
			base = 16;
   1c5f2:	2000      	movs	r0, #0
   1c5f4:	4601      	mov	r1, r0
   1c5f6:	e028      	b.n	1c64a <strntoumax+0xce>
		if (n >= 2 && nptr[0] == '0' &&
   1c5f8:	2b01      	cmp	r3, #1
   1c5fa:	d9fa      	bls.n	1c5f2 <strntoumax+0x76>
   1c5fc:	7821      	ldrb	r1, [r4, #0]
   1c5fe:	2930      	cmp	r1, #48	; 0x30
   1c600:	d1f7      	bne.n	1c5f2 <strntoumax+0x76>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   1c602:	7861      	ldrb	r1, [r4, #1]
		if (n >= 2 && nptr[0] == '0' &&
   1c604:	2978      	cmp	r1, #120	; 0x78
   1c606:	d001      	beq.n	1c60c <strntoumax+0x90>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   1c608:	2958      	cmp	r1, #88	; 0x58
   1c60a:	d1f2      	bne.n	1c5f2 <strntoumax+0x76>
			n -= 2;
   1c60c:	3b02      	subs	r3, #2
			nptr += 2;
   1c60e:	3402      	adds	r4, #2
   1c610:	e7ef      	b.n	1c5f2 <strntoumax+0x76>
			base = 10;
   1c612:	220a      	movs	r2, #10
   1c614:	e7ed      	b.n	1c5f2 <strntoumax+0x76>
		return ch - '0';
   1c616:	46b4      	mov	ip, r6
   1c618:	e004      	b.n	1c624 <strntoumax+0xa8>
		return ch - 'A' + 10;
   1c61a:	f1ac 0c37 	sub.w	ip, ip, #55	; 0x37
   1c61e:	e001      	b.n	1c624 <strntoumax+0xa8>
		return ch - 'a' + 10;
   1c620:	f1ac 0c57 	sub.w	ip, ip, #87	; 0x57
		}
	}

	while (n && (d = digitval(*nptr)) >= 0 && d < base) {
   1c624:	f1bc 0f00 	cmp.w	ip, #0
   1c628:	db21      	blt.n	1c66e <strntoumax+0xf2>
   1c62a:	4562      	cmp	r2, ip
   1c62c:	dd1f      	ble.n	1c66e <strntoumax+0xf2>
		v = v * base + d;
   1c62e:	17d6      	asrs	r6, r2, #31
   1c630:	fb02 fe01 	mul.w	lr, r2, r1
   1c634:	fb00 e106 	mla	r1, r0, r6, lr
   1c638:	fba2 0600 	umull	r0, r6, r2, r0
   1c63c:	4431      	add	r1, r6
   1c63e:	eb10 000c 	adds.w	r0, r0, ip
   1c642:	eb41 71ec 	adc.w	r1, r1, ip, asr #31
		n--;
   1c646:	3b01      	subs	r3, #1
		nptr++;
   1c648:	3401      	adds	r4, #1
	while (n && (d = digitval(*nptr)) >= 0 && d < base) {
   1c64a:	b183      	cbz	r3, 1c66e <strntoumax+0xf2>
   1c64c:	f894 c000 	ldrb.w	ip, [r4]
	if (ch >= '0' && ch <= '9') {
   1c650:	f1ac 0630 	sub.w	r6, ip, #48	; 0x30
   1c654:	2e09      	cmp	r6, #9
   1c656:	d9de      	bls.n	1c616 <strntoumax+0x9a>
	} else if (ch >= 'A' && ch <= 'Z') {
   1c658:	f1ac 0641 	sub.w	r6, ip, #65	; 0x41
   1c65c:	2e19      	cmp	r6, #25
   1c65e:	d9dc      	bls.n	1c61a <strntoumax+0x9e>
	} else if (ch >= 'a' && ch <= 'z') {
   1c660:	f1ac 0661 	sub.w	r6, ip, #97	; 0x61
   1c664:	2e19      	cmp	r6, #25
   1c666:	d9db      	bls.n	1c620 <strntoumax+0xa4>
		return -1;
   1c668:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   1c66c:	e7da      	b.n	1c624 <strntoumax+0xa8>
	}

	if (endptr)
   1c66e:	b105      	cbz	r5, 1c672 <strntoumax+0xf6>
		*endptr = (char *)nptr;
   1c670:	602c      	str	r4, [r5, #0]

	return minus ? -v : v;
   1c672:	b117      	cbz	r7, 1c67a <strntoumax+0xfe>
   1c674:	4240      	negs	r0, r0
   1c676:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
}
   1c67a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001c67c <strsep>:
 */

#include <string.h>

char *strsep(char **stringp, const char *delim)
{
   1c67c:	b538      	push	{r3, r4, r5, lr}
	char *s = *stringp;
   1c67e:	6805      	ldr	r5, [r0, #0]
	char *e;

	if (!s)
   1c680:	b14d      	cbz	r5, 1c696 <strsep+0x1a>
   1c682:	4604      	mov	r4, r0
		return NULL;

	e = strpbrk(s, delim);
   1c684:	4628      	mov	r0, r5
   1c686:	f000 f808 	bl	1c69a <strpbrk>
	if (e)
   1c68a:	4603      	mov	r3, r0
   1c68c:	b110      	cbz	r0, 1c694 <strsep+0x18>
		*e++ = '\0';
   1c68e:	2200      	movs	r2, #0
   1c690:	f803 2b01 	strb.w	r2, [r3], #1

	*stringp = e;
   1c694:	6023      	str	r3, [r4, #0]
	return s;
}
   1c696:	4628      	mov	r0, r5
   1c698:	bd38      	pop	{r3, r4, r5, pc}

0001c69a <strpbrk>:
*/

#include <string.h>

char *strpbrk(const char *s1, const char *s2)
{
   1c69a:	468c      	mov	ip, r1
  const char *c = s2;
  if (!*s1)
   1c69c:	7803      	ldrb	r3, [r0, #0]
   1c69e:	b183      	cbz	r3, 1c6c2 <strpbrk+0x28>
  const char *c = s2;
   1c6a0:	460a      	mov	r2, r1
   1c6a2:	e001      	b.n	1c6a8 <strpbrk+0xe>
      for (c = s2; *c; c++)
	{
	  if (*s1 == *c)
	    break;
	}
      if (*c)
   1c6a4:	b953      	cbnz	r3, 1c6bc <strpbrk+0x22>
	break;
      s1++;
   1c6a6:	3001      	adds	r0, #1
  while (*s1)
   1c6a8:	7801      	ldrb	r1, [r0, #0]
   1c6aa:	b139      	cbz	r1, 1c6bc <strpbrk+0x22>
      for (c = s2; *c; c++)
   1c6ac:	4662      	mov	r2, ip
   1c6ae:	7813      	ldrb	r3, [r2, #0]
   1c6b0:	2b00      	cmp	r3, #0
   1c6b2:	d0f7      	beq.n	1c6a4 <strpbrk+0xa>
	  if (*s1 == *c)
   1c6b4:	428b      	cmp	r3, r1
   1c6b6:	d0f5      	beq.n	1c6a4 <strpbrk+0xa>
      for (c = s2; *c; c++)
   1c6b8:	3201      	adds	r2, #1
   1c6ba:	e7f8      	b.n	1c6ae <strpbrk+0x14>
    }

  if (*c == '\0')
   1c6bc:	7813      	ldrb	r3, [r2, #0]
   1c6be:	b113      	cbz	r3, 1c6c6 <strpbrk+0x2c>
   1c6c0:	4770      	bx	lr
    return (char *) NULL;
   1c6c2:	2000      	movs	r0, #0
   1c6c4:	4770      	bx	lr
    s1 = NULL;
   1c6c6:	2000      	movs	r0, #0

  return (char *) s1;
}
   1c6c8:	4770      	bx	lr

0001c6ca <imgr_vercmp>:
 * @return                       1 if a > b
 */
static int
imgr_vercmp(const struct image_version *a, const struct image_version *b)
{
    if (a->iv_major < b->iv_major) {
   1c6ca:	7802      	ldrb	r2, [r0, #0]
   1c6cc:	780b      	ldrb	r3, [r1, #0]
   1c6ce:	429a      	cmp	r2, r3
   1c6d0:	d30c      	bcc.n	1c6ec <imgr_vercmp+0x22>
        return -1;
    } else if (a->iv_major > b->iv_major) {
   1c6d2:	d80e      	bhi.n	1c6f2 <imgr_vercmp+0x28>
        return 1;
    }

    if (a->iv_minor < b->iv_minor) {
   1c6d4:	7842      	ldrb	r2, [r0, #1]
   1c6d6:	784b      	ldrb	r3, [r1, #1]
   1c6d8:	429a      	cmp	r2, r3
   1c6da:	d30c      	bcc.n	1c6f6 <imgr_vercmp+0x2c>
        return -1;
    } else if (a->iv_minor > b->iv_minor) {
   1c6dc:	d80e      	bhi.n	1c6fc <imgr_vercmp+0x32>
        return 1;
    }

    if (a->iv_revision < b->iv_revision) {
   1c6de:	8842      	ldrh	r2, [r0, #2]
   1c6e0:	884b      	ldrh	r3, [r1, #2]
   1c6e2:	429a      	cmp	r2, r3
   1c6e4:	d30c      	bcc.n	1c700 <imgr_vercmp+0x36>
        return -1;
    } else if (a->iv_revision > b->iv_revision) {
   1c6e6:	d80e      	bhi.n	1c706 <imgr_vercmp+0x3c>
        return 1;
    }

    /* Note: For semver compatibility, don't compare the 32-bit build num. */

    return 0;
   1c6e8:	2000      	movs	r0, #0
   1c6ea:	4770      	bx	lr
        return -1;
   1c6ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c6f0:	4770      	bx	lr
        return 1;
   1c6f2:	2001      	movs	r0, #1
   1c6f4:	4770      	bx	lr
        return -1;
   1c6f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c6fa:	4770      	bx	lr
        return 1;
   1c6fc:	2001      	movs	r0, #1
   1c6fe:	4770      	bx	lr
        return -1;
   1c700:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c704:	4770      	bx	lr
        return 1;
   1c706:	2001      	movs	r0, #1
}
   1c708:	4770      	bx	lr

0001c70a <imgr_img_tlvs>:
{
   1c70a:	b530      	push	{r4, r5, lr}
   1c70c:	b083      	sub	sp, #12
   1c70e:	4614      	mov	r4, r2
   1c710:	461d      	mov	r5, r3
    rc = flash_area_read(fa, *start_off, &tlv_info, sizeof(tlv_info));
   1c712:	2304      	movs	r3, #4
   1c714:	eb0d 0203 	add.w	r2, sp, r3
   1c718:	6821      	ldr	r1, [r4, #0]
   1c71a:	f001 fdaf 	bl	1e27c <flash_area_read>
    if (rc) {
   1c71e:	b968      	cbnz	r0, 1c73c <imgr_img_tlvs+0x32>
    if (tlv_info.it_magic != IMAGE_TLV_INFO_MAGIC) {
   1c720:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1c724:	f646 1307 	movw	r3, #26887	; 0x6907
   1c728:	429a      	cmp	r2, r3
   1c72a:	d10b      	bne.n	1c744 <imgr_img_tlvs+0x3a>
    *start_off += sizeof(tlv_info);
   1c72c:	6822      	ldr	r2, [r4, #0]
   1c72e:	3204      	adds	r2, #4
   1c730:	6022      	str	r2, [r4, #0]
    *end_off = *start_off + tlv_info.it_tlv_tot;
   1c732:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1c736:	441a      	add	r2, r3
   1c738:	602a      	str	r2, [r5, #0]
    rc = 0;
   1c73a:	e001      	b.n	1c740 <imgr_img_tlvs+0x36>
        rc = -1;
   1c73c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1c740:	b003      	add	sp, #12
   1c742:	bd30      	pop	{r4, r5, pc}
        rc = 1;
   1c744:	2001      	movs	r0, #1
    return rc;
   1c746:	e7fb      	b.n	1c740 <imgr_img_tlvs+0x36>

0001c748 <imgr_upload_good_rsp>:
    return 0;
}

static int
imgr_upload_good_rsp(struct mgmt_cbuf *cb)
{
   1c748:	b538      	push	{r3, r4, r5, lr}
    CborError err = CborNoError;

    err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1c74a:	f100 040c 	add.w	r4, r0, #12
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1c74e:	2202      	movs	r2, #2
   1c750:	490e      	ldr	r1, [pc, #56]	; (1c78c <imgr_upload_good_rsp+0x44>)
   1c752:	4620      	mov	r0, r4
   1c754:	f7f6 fd49 	bl	131ea <cbor_encode_text_string>
   1c758:	4605      	mov	r5, r0
    err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1c75a:	2200      	movs	r2, #0
   1c75c:	2300      	movs	r3, #0
   1c75e:	4620      	mov	r0, r4
   1c760:	f7f6 fcc8 	bl	130f4 <cbor_encode_int>
   1c764:	4305      	orrs	r5, r0
   1c766:	2203      	movs	r2, #3
   1c768:	4909      	ldr	r1, [pc, #36]	; (1c790 <imgr_upload_good_rsp+0x48>)
   1c76a:	4620      	mov	r0, r4
   1c76c:	f7f6 fd3d 	bl	131ea <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&cb->encoder, "off");
   1c770:	4305      	orrs	r5, r0
    err |= cbor_encode_int(&cb->encoder, imgr_state.off);
   1c772:	4b08      	ldr	r3, [pc, #32]	; (1c794 <imgr_upload_good_rsp+0x4c>)
   1c774:	685a      	ldr	r2, [r3, #4]
   1c776:	2300      	movs	r3, #0
   1c778:	4620      	mov	r0, r4
   1c77a:	f7f6 fcbb 	bl	130f4 <cbor_encode_int>

    if (err != 0) {
   1c77e:	ea55 0300 	orrs.w	r3, r5, r0
   1c782:	d101      	bne.n	1c788 <imgr_upload_good_rsp+0x40>
        return MGMT_ERR_ENOMEM;
    }

    return 0;
   1c784:	2000      	movs	r0, #0
}
   1c786:	bd38      	pop	{r3, r4, r5, pc}
        return MGMT_ERR_ENOMEM;
   1c788:	2002      	movs	r0, #2
   1c78a:	e7fc      	b.n	1c786 <imgr_upload_good_rsp+0x3e>
   1c78c:	00023a48 	.word	0x00023a48
   1c790:	0002396c 	.word	0x0002396c
   1c794:	20004654 	.word	0x20004654

0001c798 <imgr_read_info>:
{
   1c798:	b570      	push	{r4, r5, r6, lr}
   1c79a:	b08c      	sub	sp, #48	; 0x30
   1c79c:	460c      	mov	r4, r1
   1c79e:	4615      	mov	r5, r2
   1c7a0:	461e      	mov	r6, r3
    data_end = 0;
   1c7a2:	2200      	movs	r2, #0
   1c7a4:	9201      	str	r2, [sp, #4]
    area_id = flash_area_id_from_image_slot(image_slot);
   1c7a6:	f001 fdc9 	bl	1e33c <flash_area_id_from_image_slot>
    rc2 = flash_area_open(area_id, &fa);
   1c7aa:	a90b      	add	r1, sp, #44	; 0x2c
   1c7ac:	b2c0      	uxtb	r0, r0
   1c7ae:	f001 fd05 	bl	1e1bc <flash_area_open>
    if (rc2) {
   1c7b2:	2800      	cmp	r0, #0
   1c7b4:	d163      	bne.n	1c87e <imgr_read_info+0xe6>
    rc2 = flash_area_read_is_empty(fa, 0, hdr, sizeof(*hdr));
   1c7b6:	2320      	movs	r3, #32
   1c7b8:	aa03      	add	r2, sp, #12
   1c7ba:	2100      	movs	r1, #0
   1c7bc:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1c7be:	f001 fdb6 	bl	1e32e <flash_area_read_is_empty>
    if (rc2 < 0) {
   1c7c2:	2800      	cmp	r0, #0
   1c7c4:	db5e      	blt.n	1c884 <imgr_read_info+0xec>
    if (ver) {
   1c7c6:	b11c      	cbz	r4, 1c7d0 <imgr_read_info+0x38>
        memset(ver, 0xff, sizeof(*ver));
   1c7c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c7cc:	6023      	str	r3, [r4, #0]
   1c7ce:	6063      	str	r3, [r4, #4]
    if (hdr->ih_magic == IMAGE_MAGIC) {
   1c7d0:	9a03      	ldr	r2, [sp, #12]
   1c7d2:	4b2f      	ldr	r3, [pc, #188]	; (1c890 <imgr_read_info+0xf8>)
   1c7d4:	429a      	cmp	r2, r3
   1c7d6:	d005      	beq.n	1c7e4 <imgr_read_info+0x4c>
    } else if (rc2 == 1) {
   1c7d8:	2801      	cmp	r0, #1
   1c7da:	d020      	beq.n	1c81e <imgr_read_info+0x86>
        rc = 1;
   1c7dc:	2401      	movs	r4, #1
}
   1c7de:	4620      	mov	r0, r4
   1c7e0:	b00c      	add	sp, #48	; 0x30
   1c7e2:	bd70      	pop	{r4, r5, r6, pc}
        if (ver) {
   1c7e4:	b11c      	cbz	r4, 1c7ee <imgr_read_info+0x56>
            memcpy(ver, &hdr->ih_ver, sizeof(*ver));
   1c7e6:	ab08      	add	r3, sp, #32
   1c7e8:	cb03      	ldmia	r3!, {r0, r1}
   1c7ea:	6020      	str	r0, [r4, #0]
   1c7ec:	6061      	str	r1, [r4, #4]
    if (flags) {
   1c7ee:	b10e      	cbz	r6, 1c7f4 <imgr_read_info+0x5c>
        *flags = hdr->ih_flags;
   1c7f0:	9b07      	ldr	r3, [sp, #28]
   1c7f2:	6033      	str	r3, [r6, #0]
    data_off = hdr->ih_hdr_size + hdr->ih_img_size;
   1c7f4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1c7f8:	9a06      	ldr	r2, [sp, #24]
   1c7fa:	4413      	add	r3, r2
   1c7fc:	9302      	str	r3, [sp, #8]
    rc = imgr_img_tlvs(fa, hdr, &data_off, &data_end);
   1c7fe:	ab01      	add	r3, sp, #4
   1c800:	aa02      	add	r2, sp, #8
   1c802:	a903      	add	r1, sp, #12
   1c804:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1c806:	f7ff ff80 	bl	1c70a <imgr_img_tlvs>
    if (rc) {
   1c80a:	4604      	mov	r4, r0
   1c80c:	2800      	cmp	r0, #0
   1c80e:	d1e6      	bne.n	1c7de <imgr_read_info+0x46>
    if (data_end > fa->fa_size) {
   1c810:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1c812:	689a      	ldr	r2, [r3, #8]
   1c814:	9b01      	ldr	r3, [sp, #4]
   1c816:	429a      	cmp	r2, r3
   1c818:	d209      	bcs.n	1c82e <imgr_read_info+0x96>
        rc = 1;
   1c81a:	2401      	movs	r4, #1
   1c81c:	e7df      	b.n	1c7de <imgr_read_info+0x46>
        rc = 2;
   1c81e:	2402      	movs	r4, #2
   1c820:	e7dd      	b.n	1c7de <imgr_read_info+0x46>
            data_off += sizeof(*tlv) + tlv->it_len;
   1c822:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1c826:	9a02      	ldr	r2, [sp, #8]
   1c828:	4413      	add	r3, r2
   1c82a:	3304      	adds	r3, #4
   1c82c:	9302      	str	r3, [sp, #8]
    while (data_off + sizeof(*tlv) <= data_end) {
   1c82e:	9902      	ldr	r1, [sp, #8]
   1c830:	1d0a      	adds	r2, r1, #4
   1c832:	9b01      	ldr	r3, [sp, #4]
   1c834:	429a      	cmp	r2, r3
   1c836:	d820      	bhi.n	1c87a <imgr_read_info+0xe2>
        rc2 = flash_area_read_is_empty(fa, data_off, tlv, sizeof(*tlv));
   1c838:	2304      	movs	r3, #4
   1c83a:	aa03      	add	r2, sp, #12
   1c83c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1c83e:	f001 fd76 	bl	1e32e <flash_area_read_is_empty>
        if (rc2 < 0) {
   1c842:	2800      	cmp	r0, #0
   1c844:	dbcb      	blt.n	1c7de <imgr_read_info+0x46>
        if (rc2 == 1) {
   1c846:	2801      	cmp	r0, #1
   1c848:	d01f      	beq.n	1c88a <imgr_read_info+0xf2>
        if (tlv->it_type != IMAGE_TLV_SHA256 ||
   1c84a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1c84e:	2b10      	cmp	r3, #16
   1c850:	d1e7      	bne.n	1c822 <imgr_read_info+0x8a>
          tlv->it_len != IMGMGR_HASH_LEN) {
   1c852:	f8bd 300e 	ldrh.w	r3, [sp, #14]
        if (tlv->it_type != IMAGE_TLV_SHA256 ||
   1c856:	2b20      	cmp	r3, #32
   1c858:	d1e3      	bne.n	1c822 <imgr_read_info+0x8a>
        data_off += sizeof(*tlv);
   1c85a:	9902      	ldr	r1, [sp, #8]
   1c85c:	3104      	adds	r1, #4
   1c85e:	9102      	str	r1, [sp, #8]
        if (hash) {
   1c860:	2d00      	cmp	r5, #0
   1c862:	d0bc      	beq.n	1c7de <imgr_read_info+0x46>
            if (data_off + IMGMGR_HASH_LEN > data_end) {
   1c864:	f101 0320 	add.w	r3, r1, #32
   1c868:	9a01      	ldr	r2, [sp, #4]
   1c86a:	4293      	cmp	r3, r2
   1c86c:	d8b7      	bhi.n	1c7de <imgr_read_info+0x46>
            rc2 = flash_area_read(fa, data_off, hash, IMGMGR_HASH_LEN);
   1c86e:	2320      	movs	r3, #32
   1c870:	462a      	mov	r2, r5
   1c872:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1c874:	f001 fd02 	bl	1e27c <flash_area_read>
            if (rc2) {
   1c878:	e7b1      	b.n	1c7de <imgr_read_info+0x46>
    rc = 1;
   1c87a:	2401      	movs	r4, #1
   1c87c:	e7af      	b.n	1c7de <imgr_read_info+0x46>
        return -1;
   1c87e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1c882:	e7ac      	b.n	1c7de <imgr_read_info+0x46>
    int rc = -1;
   1c884:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1c888:	e7a9      	b.n	1c7de <imgr_read_info+0x46>
    rc = 1;
   1c88a:	4604      	mov	r4, r0
   1c88c:	e7a7      	b.n	1c7de <imgr_read_info+0x46>
   1c88e:	bf00      	nop
   1c890:	96f3b83d 	.word	0x96f3b83d

0001c894 <imgr_upload_log>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
imgr_upload_log(bool is_first, bool is_last, int status)
{
   1c894:	b510      	push	{r4, lr}
   1c896:	b088      	sub	sp, #32
   1c898:	4614      	mov	r4, r2
    uint8_t hash[IMGMGR_HASH_LEN];
    const uint8_t *hashp;
    int rc;

    if (is_first) {
   1c89a:	b920      	cbnz	r0, 1c8a6 <imgr_upload_log+0x12>
        return imgmgr_log_upload_start(status);
    }

    if (is_last || status != 0) {
   1c89c:	b939      	cbnz	r1, 1c8ae <imgr_upload_log+0x1a>
   1c89e:	b932      	cbnz	r2, 1c8ae <imgr_upload_log+0x1a>

        return imgmgr_log_upload_done(status, hashp);
    }

    /* Nothing to log. */
    return 0;
   1c8a0:	4610      	mov	r0, r2
}
   1c8a2:	b008      	add	sp, #32
   1c8a4:	bd10      	pop	{r4, pc}
        return imgmgr_log_upload_start(status);
   1c8a6:	4610      	mov	r0, r2
   1c8a8:	f000 fad8 	bl	1ce5c <imgmgr_log_upload_start>
   1c8ac:	e7f9      	b.n	1c8a2 <imgr_upload_log+0xe>
        rc = imgr_read_info(1, NULL, hash, NULL);
   1c8ae:	2300      	movs	r3, #0
   1c8b0:	466a      	mov	r2, sp
   1c8b2:	4619      	mov	r1, r3
   1c8b4:	2001      	movs	r0, #1
   1c8b6:	f7ff ff6f 	bl	1c798 <imgr_read_info>
        if (rc != 0) {
   1c8ba:	b120      	cbz	r0, 1c8c6 <imgr_upload_log+0x32>
            hashp = NULL;
   1c8bc:	2100      	movs	r1, #0
        return imgmgr_log_upload_done(status, hashp);
   1c8be:	4620      	mov	r0, r4
   1c8c0:	f000 fad6 	bl	1ce70 <imgmgr_log_upload_done>
   1c8c4:	e7ed      	b.n	1c8a2 <imgr_upload_log+0xe>
            hashp = hash;
   1c8c6:	4669      	mov	r1, sp
   1c8c8:	e7f9      	b.n	1c8be <imgr_upload_log+0x2a>
	...

0001c8cc <imgr_my_version>:
{
   1c8cc:	b508      	push	{r3, lr}
   1c8ce:	4601      	mov	r1, r0
    return imgr_read_info(boot_current_slot, ver, NULL, NULL);
   1c8d0:	2300      	movs	r3, #0
   1c8d2:	461a      	mov	r2, r3
   1c8d4:	4802      	ldr	r0, [pc, #8]	; (1c8e0 <imgr_my_version+0x14>)
   1c8d6:	6800      	ldr	r0, [r0, #0]
   1c8d8:	f7ff ff5e 	bl	1c798 <imgr_read_info>
}
   1c8dc:	bd08      	pop	{r3, pc}
   1c8de:	bf00      	nop
   1c8e0:	20004a24 	.word	0x20004a24

0001c8e4 <imgr_find_by_hash>:
{
   1c8e4:	b570      	push	{r4, r5, r6, lr}
   1c8e6:	b088      	sub	sp, #32
   1c8e8:	4606      	mov	r6, r0
   1c8ea:	460d      	mov	r5, r1
    for (i = 0; i < 2; i++) {
   1c8ec:	2400      	movs	r4, #0
   1c8ee:	e000      	b.n	1c8f2 <imgr_find_by_hash+0xe>
   1c8f0:	3401      	adds	r4, #1
   1c8f2:	2c01      	cmp	r4, #1
   1c8f4:	dc0f      	bgt.n	1c916 <imgr_find_by_hash+0x32>
        if (imgr_read_info(i, ver, hash, NULL) != 0) {
   1c8f6:	2300      	movs	r3, #0
   1c8f8:	466a      	mov	r2, sp
   1c8fa:	4629      	mov	r1, r5
   1c8fc:	4620      	mov	r0, r4
   1c8fe:	f7ff ff4b 	bl	1c798 <imgr_read_info>
   1c902:	2800      	cmp	r0, #0
   1c904:	d1f4      	bne.n	1c8f0 <imgr_find_by_hash+0xc>
        if (!memcmp(hash, find, IMGMGR_HASH_LEN)) {
   1c906:	2220      	movs	r2, #32
   1c908:	4631      	mov	r1, r6
   1c90a:	4668      	mov	r0, sp
   1c90c:	f7f1 f8b4 	bl	da78 <memcmp>
   1c910:	2800      	cmp	r0, #0
   1c912:	d1ed      	bne.n	1c8f0 <imgr_find_by_hash+0xc>
   1c914:	e001      	b.n	1c91a <imgr_find_by_hash+0x36>
    return -1;
   1c916:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   1c91a:	4620      	mov	r0, r4
   1c91c:	b008      	add	sp, #32
   1c91e:	bd70      	pop	{r4, r5, r6, pc}

0001c920 <imgmgr_find_best_area_id>:
{
   1c920:	b530      	push	{r4, r5, lr}
   1c922:	b083      	sub	sp, #12
    for (i = 0; i < 2; i++) {
   1c924:	2400      	movs	r4, #0
    int best = -1;
   1c926:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    for (i = 0; i < 2; i++) {
   1c92a:	e000      	b.n	1c92e <imgmgr_find_best_area_id+0xe>
   1c92c:	3401      	adds	r4, #1
   1c92e:	2c01      	cmp	r4, #1
   1c930:	dc10      	bgt.n	1c954 <imgmgr_find_best_area_id+0x34>
        rc = imgr_read_info(i, &ver, NULL, NULL);
   1c932:	2300      	movs	r3, #0
   1c934:	461a      	mov	r2, r3
   1c936:	4669      	mov	r1, sp
   1c938:	4620      	mov	r0, r4
   1c93a:	f7ff ff2d 	bl	1c798 <imgr_read_info>
        if (rc < 0) {
   1c93e:	2800      	cmp	r0, #0
   1c940:	dbf4      	blt.n	1c92c <imgmgr_find_best_area_id+0xc>
        if (rc == 0) {
   1c942:	b930      	cbnz	r0, 1c952 <imgmgr_find_best_area_id+0x32>
            if (imgmgr_state_slot_in_use(i)) {
   1c944:	4620      	mov	r0, r4
   1c946:	f000 fb1f 	bl	1cf88 <imgmgr_state_slot_in_use>
   1c94a:	2800      	cmp	r0, #0
   1c94c:	d1ee      	bne.n	1c92c <imgmgr_find_best_area_id+0xc>
                best = i;
   1c94e:	4625      	mov	r5, r4
   1c950:	e7ec      	b.n	1c92c <imgmgr_find_best_area_id+0xc>
        best = i;
   1c952:	4625      	mov	r5, r4
    if (best >= 0) {
   1c954:	2d00      	cmp	r5, #0
   1c956:	da02      	bge.n	1c95e <imgmgr_find_best_area_id+0x3e>
}
   1c958:	4628      	mov	r0, r5
   1c95a:	b003      	add	sp, #12
   1c95c:	bd30      	pop	{r4, r5, pc}
        best = flash_area_id_from_image_slot(best);
   1c95e:	4628      	mov	r0, r5
   1c960:	f001 fcec 	bl	1e33c <flash_area_id_from_image_slot>
   1c964:	4605      	mov	r5, r0
    return best;
   1c966:	e7f7      	b.n	1c958 <imgmgr_find_best_area_id+0x38>

0001c968 <imgr_erase_state>:
{
   1c968:	b570      	push	{r4, r5, r6, lr}
   1c96a:	b082      	sub	sp, #8
   1c96c:	4604      	mov	r4, r0
    area_id = imgmgr_find_best_area_id();
   1c96e:	f7ff ffd7 	bl	1c920 <imgmgr_find_best_area_id>
    if (area_id >= 0) {
   1c972:	2800      	cmp	r0, #0
   1c974:	db1f      	blt.n	1c9b6 <imgr_erase_state+0x4e>
        rc = flash_area_open(area_id, &fa);
   1c976:	a901      	add	r1, sp, #4
   1c978:	b2c0      	uxtb	r0, r0
   1c97a:	f001 fc1f 	bl	1e1bc <flash_area_open>
        if (rc) {
   1c97e:	b9f0      	cbnz	r0, 1c9be <imgr_erase_state+0x56>
        rc = flash_area_erase(fa, 0, sizeof(struct image_header));
   1c980:	2220      	movs	r2, #32
   1c982:	2100      	movs	r1, #0
   1c984:	9801      	ldr	r0, [sp, #4]
   1c986:	f001 fca1 	bl	1e2cc <flash_area_erase>
        if (rc) {
   1c98a:	4605      	mov	r5, r0
   1c98c:	b9c8      	cbnz	r0, 1c9c2 <imgr_erase_state+0x5a>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1c98e:	340c      	adds	r4, #12
   1c990:	2202      	movs	r2, #2
   1c992:	490e      	ldr	r1, [pc, #56]	; (1c9cc <imgr_erase_state+0x64>)
   1c994:	4620      	mov	r0, r4
   1c996:	f7f6 fc28 	bl	131ea <cbor_encode_text_string>
   1c99a:	4606      	mov	r6, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1c99c:	2200      	movs	r2, #0
   1c99e:	2300      	movs	r3, #0
   1c9a0:	4620      	mov	r0, r4
   1c9a2:	f7f6 fba7 	bl	130f4 <cbor_encode_int>
    if (g_err) {
   1c9a6:	ea50 0306 	orrs.w	r3, r0, r6
   1c9aa:	d10c      	bne.n	1c9c6 <imgr_erase_state+0x5e>
    imgr_state.area_id = -1;
   1c9ac:	4b08      	ldr	r3, [pc, #32]	; (1c9d0 <imgr_erase_state+0x68>)
   1c9ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c9b2:	601a      	str	r2, [r3, #0]
    return 0;
   1c9b4:	e000      	b.n	1c9b8 <imgr_erase_state+0x50>
        return imgr_error_rsp(cb, MGMT_ERR_ENOMEM, imgmgr_err_str_no_slot);
   1c9b6:	2502      	movs	r5, #2
}
   1c9b8:	4628      	mov	r0, r5
   1c9ba:	b002      	add	sp, #8
   1c9bc:	bd70      	pop	{r4, r5, r6, pc}
            return imgr_error_rsp(cb, MGMT_ERR_EINVAL,
   1c9be:	2503      	movs	r5, #3
   1c9c0:	e7fa      	b.n	1c9b8 <imgr_erase_state+0x50>
            return imgr_error_rsp(cb, MGMT_ERR_EINVAL,
   1c9c2:	2503      	movs	r5, #3
   1c9c4:	e7f8      	b.n	1c9b8 <imgr_erase_state+0x50>
        return MGMT_ERR_ENOMEM;
   1c9c6:	2502      	movs	r5, #2
   1c9c8:	e7f6      	b.n	1c9b8 <imgr_erase_state+0x50>
   1c9ca:	bf00      	nop
   1c9cc:	00023a48 	.word	0x00023a48
   1c9d0:	20004654 	.word	0x20004654

0001c9d4 <imgr_erase>:
{
   1c9d4:	b570      	push	{r4, r5, r6, lr}
   1c9d6:	b082      	sub	sp, #8
   1c9d8:	4604      	mov	r4, r0
    area_id = imgmgr_find_best_area_id();
   1c9da:	f7ff ffa1 	bl	1c920 <imgmgr_find_best_area_id>
    if (area_id >= 0) {
   1c9de:	2800      	cmp	r0, #0
   1c9e0:	db1f      	blt.n	1ca22 <imgr_erase+0x4e>
        rc = flash_area_open(area_id, &fa);
   1c9e2:	a901      	add	r1, sp, #4
   1c9e4:	b2c0      	uxtb	r0, r0
   1c9e6:	f001 fbe9 	bl	1e1bc <flash_area_open>
        if (rc) {
   1c9ea:	b9f0      	cbnz	r0, 1ca2a <imgr_erase+0x56>
        rc = flash_area_erase(fa, 0, fa->fa_size);
   1c9ec:	9801      	ldr	r0, [sp, #4]
   1c9ee:	6882      	ldr	r2, [r0, #8]
   1c9f0:	2100      	movs	r1, #0
   1c9f2:	f001 fc6b 	bl	1e2cc <flash_area_erase>
        if (rc) {
   1c9f6:	4605      	mov	r5, r0
   1c9f8:	b9c8      	cbnz	r0, 1ca2e <imgr_erase+0x5a>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1c9fa:	340c      	adds	r4, #12
   1c9fc:	2202      	movs	r2, #2
   1c9fe:	490e      	ldr	r1, [pc, #56]	; (1ca38 <imgr_erase+0x64>)
   1ca00:	4620      	mov	r0, r4
   1ca02:	f7f6 fbf2 	bl	131ea <cbor_encode_text_string>
   1ca06:	4606      	mov	r6, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1ca08:	2200      	movs	r2, #0
   1ca0a:	2300      	movs	r3, #0
   1ca0c:	4620      	mov	r0, r4
   1ca0e:	f7f6 fb71 	bl	130f4 <cbor_encode_int>
    if (g_err) {
   1ca12:	ea50 0306 	orrs.w	r3, r0, r6
   1ca16:	d10c      	bne.n	1ca32 <imgr_erase+0x5e>
    imgr_state.area_id = -1;
   1ca18:	4b08      	ldr	r3, [pc, #32]	; (1ca3c <imgr_erase+0x68>)
   1ca1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ca1e:	601a      	str	r2, [r3, #0]
    return 0;
   1ca20:	e000      	b.n	1ca24 <imgr_erase+0x50>
        return imgr_error_rsp(cb, MGMT_ERR_ENOMEM, imgmgr_err_str_no_slot);
   1ca22:	2502      	movs	r5, #2
}
   1ca24:	4628      	mov	r0, r5
   1ca26:	b002      	add	sp, #8
   1ca28:	bd70      	pop	{r4, r5, r6, pc}
            return imgr_error_rsp(cb, MGMT_ERR_EINVAL,
   1ca2a:	2503      	movs	r5, #3
   1ca2c:	e7fa      	b.n	1ca24 <imgr_erase+0x50>
            return imgr_error_rsp(cb, MGMT_ERR_EINVAL,
   1ca2e:	2503      	movs	r5, #3
   1ca30:	e7f8      	b.n	1ca24 <imgr_erase+0x50>
        return MGMT_ERR_ENOMEM;
   1ca32:	2502      	movs	r5, #2
   1ca34:	e7f6      	b.n	1ca24 <imgr_erase+0x50>
   1ca36:	bf00      	nop
   1ca38:	00023a48 	.word	0x00023a48
   1ca3c:	20004654 	.word	0x20004654

0001ca40 <imgr_upload_inspect>:
{
   1ca40:	b570      	push	{r4, r5, r6, lr}
   1ca42:	b084      	sub	sp, #16
   1ca44:	460c      	mov	r4, r1
   1ca46:	4616      	mov	r6, r2
    memset(action, 0, sizeof *action);
   1ca48:	2300      	movs	r3, #0
   1ca4a:	600b      	str	r3, [r1, #0]
   1ca4c:	604b      	str	r3, [r1, #4]
   1ca4e:	608b      	str	r3, [r1, #8]
   1ca50:	60cb      	str	r3, [r1, #12]
   1ca52:	610b      	str	r3, [r1, #16]
   1ca54:	614b      	str	r3, [r1, #20]
    if (req->off == -1) {
   1ca56:	6801      	ldr	r1, [r0, #0]
   1ca58:	6843      	ldr	r3, [r0, #4]
   1ca5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1ca5e:	bf08      	it	eq
   1ca60:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
   1ca64:	d03e      	beq.n	1cae4 <imgr_upload_inspect+0xa4>
   1ca66:	4605      	mov	r5, r0
    if (req->off == 0) {
   1ca68:	430b      	orrs	r3, r1
   1ca6a:	d168      	bne.n	1cb3e <imgr_upload_inspect+0xfe>
        if (req->data_len < sizeof(struct image_header)) {
   1ca6c:	6903      	ldr	r3, [r0, #16]
   1ca6e:	2b1f      	cmp	r3, #31
   1ca70:	d93c      	bls.n	1caec <imgr_upload_inspect+0xac>
        if (req->size == -1) {
   1ca72:	6882      	ldr	r2, [r0, #8]
   1ca74:	68c3      	ldr	r3, [r0, #12]
   1ca76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1ca7a:	bf08      	it	eq
   1ca7c:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   1ca80:	d038      	beq.n	1caf4 <imgr_upload_inspect+0xb4>
        action->size = req->size;
   1ca82:	6022      	str	r2, [r4, #0]
   1ca84:	6063      	str	r3, [r4, #4]
        if (hdr->ih_magic != IMAGE_MAGIC) {
   1ca86:	6982      	ldr	r2, [r0, #24]
   1ca88:	4b4e      	ldr	r3, [pc, #312]	; (1cbc4 <imgr_upload_inspect+0x184>)
   1ca8a:	429a      	cmp	r2, r3
   1ca8c:	d136      	bne.n	1cafc <imgr_upload_inspect+0xbc>
        if (req->data_sha_len > IMGMGR_DATA_SHA_LEN) {
   1ca8e:	6942      	ldr	r2, [r0, #20]
   1ca90:	2a20      	cmp	r2, #32
   1ca92:	f200 808d 	bhi.w	1cbb0 <imgr_upload_inspect+0x170>
        if ((req->data_sha_len > 0) && (imgr_state.area_id != -1)) {
   1ca96:	b142      	cbz	r2, 1caaa <imgr_upload_inspect+0x6a>
   1ca98:	4b4b      	ldr	r3, [pc, #300]	; (1cbc8 <imgr_upload_inspect+0x188>)
   1ca9a:	681b      	ldr	r3, [r3, #0]
   1ca9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1caa0:	d003      	beq.n	1caaa <imgr_upload_inspect+0x6a>
            if ((imgr_state.data_sha_len == req->data_sha_len) &&
   1caa2:	4b49      	ldr	r3, [pc, #292]	; (1cbc8 <imgr_upload_inspect+0x188>)
   1caa4:	7b1b      	ldrb	r3, [r3, #12]
   1caa6:	429a      	cmp	r2, r3
   1caa8:	d02c      	beq.n	1cb04 <imgr_upload_inspect+0xc4>
        action->area_id = imgmgr_find_best_area_id();
   1caaa:	f7ff ff39 	bl	1c920 <imgmgr_find_best_area_id>
   1caae:	60e0      	str	r0, [r4, #12]
        if (action->area_id < 0) {
   1cab0:	2800      	cmp	r0, #0
   1cab2:	db2f      	blt.n	1cb14 <imgr_upload_inspect+0xd4>
        if (req->upgrade) {
   1cab4:	f895 3238 	ldrb.w	r3, [r5, #568]	; 0x238
   1cab8:	b15b      	cbz	r3, 1cad2 <imgr_upload_inspect+0x92>
            rc = imgr_my_version(&cur_ver);
   1caba:	a801      	add	r0, sp, #4
   1cabc:	f7ff ff06 	bl	1c8cc <imgr_my_version>
            if (rc != 0) {
   1cac0:	2800      	cmp	r0, #0
   1cac2:	d177      	bne.n	1cbb4 <imgr_upload_inspect+0x174>
            if (imgr_vercmp(&cur_ver, &hdr->ih_ver) >= 0) {
   1cac4:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   1cac8:	a801      	add	r0, sp, #4
   1caca:	f7ff fdfe 	bl	1c6ca <imgr_vercmp>
   1cace:	2800      	cmp	r0, #0
   1cad0:	da24      	bge.n	1cb1c <imgr_upload_inspect+0xdc>
        rc = flash_area_open(action->area_id, &fa);
   1cad2:	a903      	add	r1, sp, #12
   1cad4:	7b20      	ldrb	r0, [r4, #12]
   1cad6:	f001 fb71 	bl	1e1bc <flash_area_open>
        if (rc) {
   1cada:	b318      	cbz	r0, 1cb24 <imgr_upload_inspect+0xe4>
            *errstr = imgmgr_err_str_flash_open_failed;
   1cadc:	2300      	movs	r3, #0
   1cade:	6033      	str	r3, [r6, #0]
            return MGMT_ERR_EUNKNOWN;
   1cae0:	2001      	movs	r0, #1
   1cae2:	e06c      	b.n	1cbbe <imgr_upload_inspect+0x17e>
        *errstr = imgmgr_err_str_hdr_malformed;
   1cae4:	2300      	movs	r3, #0
   1cae6:	6013      	str	r3, [r2, #0]
        return MGMT_ERR_EINVAL;
   1cae8:	2003      	movs	r0, #3
   1caea:	e068      	b.n	1cbbe <imgr_upload_inspect+0x17e>
            *errstr = imgmgr_err_str_hdr_malformed;
   1caec:	2300      	movs	r3, #0
   1caee:	6013      	str	r3, [r2, #0]
            return MGMT_ERR_EINVAL;
   1caf0:	2003      	movs	r0, #3
   1caf2:	e064      	b.n	1cbbe <imgr_upload_inspect+0x17e>
            *errstr = imgmgr_err_str_hdr_malformed;
   1caf4:	2300      	movs	r3, #0
   1caf6:	6033      	str	r3, [r6, #0]
            return MGMT_ERR_EINVAL;
   1caf8:	2003      	movs	r0, #3
   1cafa:	e060      	b.n	1cbbe <imgr_upload_inspect+0x17e>
            *errstr = imgmgr_err_str_magic_mismatch;
   1cafc:	2300      	movs	r3, #0
   1cafe:	6033      	str	r3, [r6, #0]
            return MGMT_ERR_EINVAL;
   1cb00:	2003      	movs	r0, #3
   1cb02:	e05c      	b.n	1cbbe <imgr_upload_inspect+0x17e>
                            !memcmp(imgr_state.data_sha, req->data_sha,
   1cb04:	f500 7106 	add.w	r1, r0, #536	; 0x218
   1cb08:	4830      	ldr	r0, [pc, #192]	; (1cbcc <imgr_upload_inspect+0x18c>)
   1cb0a:	f7f0 ffb5 	bl	da78 <memcmp>
            if ((imgr_state.data_sha_len == req->data_sha_len) &&
   1cb0e:	2800      	cmp	r0, #0
   1cb10:	d1cb      	bne.n	1caaa <imgr_upload_inspect+0x6a>
   1cb12:	e054      	b.n	1cbbe <imgr_upload_inspect+0x17e>
            *errstr = imgmgr_err_str_no_slot;
   1cb14:	2300      	movs	r3, #0
   1cb16:	6033      	str	r3, [r6, #0]
            return MGMT_ERR_ENOMEM;
   1cb18:	2002      	movs	r0, #2
   1cb1a:	e050      	b.n	1cbbe <imgr_upload_inspect+0x17e>
                *errstr = imgmgr_err_str_downgrade;
   1cb1c:	2300      	movs	r3, #0
   1cb1e:	6033      	str	r3, [r6, #0]
                return MGMT_ERR_EBADSTATE;
   1cb20:	2006      	movs	r0, #6
   1cb22:	e04c      	b.n	1cbbe <imgr_upload_inspect+0x17e>
        rc = flash_area_is_empty(fa, &empty);
   1cb24:	f10d 0103 	add.w	r1, sp, #3
   1cb28:	9803      	ldr	r0, [sp, #12]
   1cb2a:	f001 fbed 	bl	1e308 <flash_area_is_empty>
        if (rc) {
   1cb2e:	2800      	cmp	r0, #0
   1cb30:	d142      	bne.n	1cbb8 <imgr_upload_inspect+0x178>
        action->erase = !empty;
   1cb32:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1cb36:	f083 0301 	eor.w	r3, r3, #1
   1cb3a:	7463      	strb	r3, [r4, #17]
   1cb3c:	e00d      	b.n	1cb5a <imgr_upload_inspect+0x11a>
        action->area_id = imgr_state.area_id;
   1cb3e:	4b22      	ldr	r3, [pc, #136]	; (1cbc8 <imgr_upload_inspect+0x188>)
   1cb40:	681a      	ldr	r2, [r3, #0]
   1cb42:	60e2      	str	r2, [r4, #12]
        action->size = imgr_state.size;
   1cb44:	6899      	ldr	r1, [r3, #8]
   1cb46:	2200      	movs	r2, #0
   1cb48:	6021      	str	r1, [r4, #0]
   1cb4a:	6062      	str	r2, [r4, #4]
        if (req->off != imgr_state.off) {
   1cb4c:	6800      	ldr	r0, [r0, #0]
   1cb4e:	6869      	ldr	r1, [r5, #4]
   1cb50:	685b      	ldr	r3, [r3, #4]
   1cb52:	4291      	cmp	r1, r2
   1cb54:	bf08      	it	eq
   1cb56:	4298      	cmpeq	r0, r3
   1cb58:	d130      	bne.n	1cbbc <imgr_upload_inspect+0x17c>
    action->write_bytes = req->data_len;
   1cb5a:	692b      	ldr	r3, [r5, #16]
   1cb5c:	60a3      	str	r3, [r4, #8]
    if (req->off + req->data_len < action->size) {
   1cb5e:	682b      	ldr	r3, [r5, #0]
   1cb60:	686a      	ldr	r2, [r5, #4]
   1cb62:	6929      	ldr	r1, [r5, #16]
   1cb64:	185b      	adds	r3, r3, r1
   1cb66:	f142 0200 	adc.w	r2, r2, #0
   1cb6a:	6820      	ldr	r0, [r4, #0]
   1cb6c:	6861      	ldr	r1, [r4, #4]
   1cb6e:	4283      	cmp	r3, r0
   1cb70:	eb72 0301 	sbcs.w	r3, r2, r1
   1cb74:	d303      	bcc.n	1cb7e <imgr_upload_inspect+0x13e>
    action->proceed = true;
   1cb76:	2301      	movs	r3, #1
   1cb78:	7423      	strb	r3, [r4, #16]
    return 0;
   1cb7a:	2000      	movs	r0, #0
   1cb7c:	e01f      	b.n	1cbbe <imgr_upload_inspect+0x17e>
        rc = flash_area_open(action->area_id, &fa);
   1cb7e:	a903      	add	r1, sp, #12
   1cb80:	7b20      	ldrb	r0, [r4, #12]
   1cb82:	f001 fb1b 	bl	1e1bc <flash_area_open>
        if (rc) {
   1cb86:	b118      	cbz	r0, 1cb90 <imgr_upload_inspect+0x150>
            *errstr = imgmgr_err_str_flash_open_failed;
   1cb88:	2300      	movs	r3, #0
   1cb8a:	6033      	str	r3, [r6, #0]
            return MGMT_ERR_EUNKNOWN;
   1cb8c:	2001      	movs	r0, #1
   1cb8e:	e016      	b.n	1cbbe <imgr_upload_inspect+0x17e>
        rem_bytes = req->data_len % flash_area_align(fa);
   1cb90:	692d      	ldr	r5, [r5, #16]
   1cb92:	9803      	ldr	r0, [sp, #12]
   1cb94:	f001 fbae 	bl	1e2f4 <flash_area_align>
   1cb98:	fbb5 f3f0 	udiv	r3, r5, r0
   1cb9c:	fb00 5513 	mls	r5, r0, r3, r5
        if (rem_bytes) {
   1cba0:	f015 0fff 	tst.w	r5, #255	; 0xff
   1cba4:	d0e7      	beq.n	1cb76 <imgr_upload_inspect+0x136>
            action->write_bytes -= rem_bytes;
   1cba6:	b2ed      	uxtb	r5, r5
   1cba8:	68a3      	ldr	r3, [r4, #8]
   1cbaa:	1b5d      	subs	r5, r3, r5
   1cbac:	60a5      	str	r5, [r4, #8]
   1cbae:	e7e2      	b.n	1cb76 <imgr_upload_inspect+0x136>
            return MGMT_ERR_EINVAL;
   1cbb0:	2003      	movs	r0, #3
   1cbb2:	e004      	b.n	1cbbe <imgr_upload_inspect+0x17e>
                return MGMT_ERR_EUNKNOWN;
   1cbb4:	2001      	movs	r0, #1
   1cbb6:	e002      	b.n	1cbbe <imgr_upload_inspect+0x17e>
            return MGMT_ERR_EUNKNOWN;
   1cbb8:	2001      	movs	r0, #1
   1cbba:	e000      	b.n	1cbbe <imgr_upload_inspect+0x17e>
            return 0;
   1cbbc:	2000      	movs	r0, #0
}
   1cbbe:	b004      	add	sp, #16
   1cbc0:	bd70      	pop	{r4, r5, r6, pc}
   1cbc2:	bf00      	nop
   1cbc4:	96f3b83d 	.word	0x96f3b83d
   1cbc8:	20004654 	.word	0x20004654
   1cbcc:	20004661 	.word	0x20004661

0001cbd0 <imgmgr_dfu_stopped>:
    return imgr_upload_good_rsp(cb);
}

void
imgmgr_dfu_stopped(void)
{
   1cbd0:	b508      	push	{r3, lr}
    if (imgmgr_dfu_callbacks_fn && imgmgr_dfu_callbacks_fn->dfu_stopped_cb) {
   1cbd2:	4b03      	ldr	r3, [pc, #12]	; (1cbe0 <imgmgr_dfu_stopped+0x10>)
   1cbd4:	681b      	ldr	r3, [r3, #0]
   1cbd6:	b113      	cbz	r3, 1cbde <imgmgr_dfu_stopped+0xe>
   1cbd8:	685b      	ldr	r3, [r3, #4]
   1cbda:	b103      	cbz	r3, 1cbde <imgmgr_dfu_stopped+0xe>
        imgmgr_dfu_callbacks_fn->dfu_stopped_cb();
   1cbdc:	4798      	blx	r3
    }
}
   1cbde:	bd08      	pop	{r3, pc}
   1cbe0:	20004650 	.word	0x20004650

0001cbe4 <imgmgr_dfu_started>:

void
imgmgr_dfu_started(void)
{
   1cbe4:	b508      	push	{r3, lr}
    if (imgmgr_dfu_callbacks_fn && imgmgr_dfu_callbacks_fn->dfu_started_cb) {
   1cbe6:	4b03      	ldr	r3, [pc, #12]	; (1cbf4 <imgmgr_dfu_started+0x10>)
   1cbe8:	681b      	ldr	r3, [r3, #0]
   1cbea:	b113      	cbz	r3, 1cbf2 <imgmgr_dfu_started+0xe>
   1cbec:	681b      	ldr	r3, [r3, #0]
   1cbee:	b103      	cbz	r3, 1cbf2 <imgmgr_dfu_started+0xe>
        imgmgr_dfu_callbacks_fn->dfu_started_cb();
   1cbf0:	4798      	blx	r3
    }
}
   1cbf2:	bd08      	pop	{r3, pc}
   1cbf4:	20004650 	.word	0x20004650

0001cbf8 <imgmgr_dfu_pending>:

void
imgmgr_dfu_pending(void)
{
   1cbf8:	b508      	push	{r3, lr}
    if (imgmgr_dfu_callbacks_fn && imgmgr_dfu_callbacks_fn->dfu_pending_cb) {
   1cbfa:	4b03      	ldr	r3, [pc, #12]	; (1cc08 <imgmgr_dfu_pending+0x10>)
   1cbfc:	681b      	ldr	r3, [r3, #0]
   1cbfe:	b113      	cbz	r3, 1cc06 <imgmgr_dfu_pending+0xe>
   1cc00:	689b      	ldr	r3, [r3, #8]
   1cc02:	b103      	cbz	r3, 1cc06 <imgmgr_dfu_pending+0xe>
        imgmgr_dfu_callbacks_fn->dfu_pending_cb();
   1cc04:	4798      	blx	r3
    }
}
   1cc06:	bd08      	pop	{r3, pc}
   1cc08:	20004650 	.word	0x20004650

0001cc0c <imgr_upload>:
{
   1cc0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cc10:	f5ad 7d62 	sub.w	sp, sp, #904	; 0x388
   1cc14:	4605      	mov	r5, r0
    struct imgr_upload_req req = {
   1cc16:	ac52      	add	r4, sp, #328	; 0x148
   1cc18:	f44f 7210 	mov.w	r2, #576	; 0x240
   1cc1c:	2100      	movs	r1, #0
   1cc1e:	4620      	mov	r0, r4
   1cc20:	f7f0 ff5b 	bl	dada <memset>
   1cc24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1cc28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1cc2c:	e9cd 2352 	strd	r2, r3, [sp, #328]	; 0x148
   1cc30:	e9cd 2354 	strd	r2, r3, [sp, #336]	; 0x150
    const struct cbor_attr_t off_attr[] = {
   1cc34:	f44f 7290 	mov.w	r2, #288	; 0x120
   1cc38:	2100      	movs	r1, #0
   1cc3a:	a80a      	add	r0, sp, #40	; 0x28
   1cc3c:	f7f0 ff4d 	bl	dada <memset>
   1cc40:	4b69      	ldr	r3, [pc, #420]	; (1cde8 <imgr_upload+0x1dc>)
   1cc42:	930a      	str	r3, [sp, #40]	; 0x28
   1cc44:	2303      	movs	r3, #3
   1cc46:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   1cc4a:	aa58      	add	r2, sp, #352	; 0x160
   1cc4c:	920c      	str	r2, [sp, #48]	; 0x30
   1cc4e:	aa56      	add	r2, sp, #344	; 0x158
   1cc50:	920d      	str	r2, [sp, #52]	; 0x34
   1cc52:	f44f 7200 	mov.w	r2, #512	; 0x200
   1cc56:	9214      	str	r2, [sp, #80]	; 0x50
   1cc58:	4a64      	ldr	r2, [pc, #400]	; (1cdec <imgr_upload+0x1e0>)
   1cc5a:	9216      	str	r2, [sp, #88]	; 0x58
   1cc5c:	2102      	movs	r1, #2
   1cc5e:	f88d 105c 	strb.w	r1, [sp, #92]	; 0x5c
   1cc62:	aa54      	add	r2, sp, #336	; 0x150
   1cc64:	9218      	str	r2, [sp, #96]	; 0x60
   1cc66:	2201      	movs	r2, #1
   1cc68:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   1cc6c:	4860      	ldr	r0, [pc, #384]	; (1cdf0 <imgr_upload+0x1e4>)
   1cc6e:	9022      	str	r0, [sp, #136]	; 0x88
   1cc70:	f88d 108c 	strb.w	r1, [sp, #140]	; 0x8c
   1cc74:	9424      	str	r4, [sp, #144]	; 0x90
   1cc76:	f88d 20b4 	strb.w	r2, [sp, #180]	; 0xb4
   1cc7a:	4a5e      	ldr	r2, [pc, #376]	; (1cdf4 <imgr_upload+0x1e8>)
   1cc7c:	922e      	str	r2, [sp, #184]	; 0xb8
   1cc7e:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
   1cc82:	abd8      	add	r3, sp, #864	; 0x360
   1cc84:	9330      	str	r3, [sp, #192]	; 0xc0
   1cc86:	ab57      	add	r3, sp, #348	; 0x15c
   1cc88:	9331      	str	r3, [sp, #196]	; 0xc4
   1cc8a:	2320      	movs	r3, #32
   1cc8c:	9338      	str	r3, [sp, #224]	; 0xe0
   1cc8e:	4b5a      	ldr	r3, [pc, #360]	; (1cdf8 <imgr_upload+0x1ec>)
   1cc90:	933a      	str	r3, [sp, #232]	; 0xe8
   1cc92:	2305      	movs	r3, #5
   1cc94:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
   1cc98:	abe0      	add	r3, sp, #896	; 0x380
   1cc9a:	933c      	str	r3, [sp, #240]	; 0xf0
    const char *errstr = NULL;
   1cc9c:	2300      	movs	r3, #0
   1cc9e:	9309      	str	r3, [sp, #36]	; 0x24
    const struct flash_area *fa = NULL;
   1cca0:	9301      	str	r3, [sp, #4]
    rc = cbor_read_object(&cb->it, off_attr);
   1cca2:	a90a      	add	r1, sp, #40	; 0x28
   1cca4:	f105 001c 	add.w	r0, r5, #28
   1cca8:	f7f6 f8b8 	bl	12e1c <cbor_read_object>
    if (rc != 0) {
   1ccac:	2800      	cmp	r0, #0
   1ccae:	f040 8095 	bne.w	1cddc <imgr_upload+0x1d0>
    rc = imgr_upload_inspect(&req, &action, &errstr);
   1ccb2:	aa09      	add	r2, sp, #36	; 0x24
   1ccb4:	a902      	add	r1, sp, #8
   1ccb6:	4620      	mov	r0, r4
   1ccb8:	f7ff fec2 	bl	1ca40 <imgr_upload_inspect>
    if (rc != 0) {
   1ccbc:	4604      	mov	r4, r0
   1ccbe:	2800      	cmp	r0, #0
   1ccc0:	d137      	bne.n	1cd32 <imgr_upload+0x126>
    if (!action.proceed) {
   1ccc2:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1ccc6:	2b00      	cmp	r3, #0
   1ccc8:	d036      	beq.n	1cd38 <imgr_upload+0x12c>
    if (imgr_upload_cb != NULL) {
   1ccca:	4b4c      	ldr	r3, [pc, #304]	; (1cdfc <imgr_upload+0x1f0>)
   1cccc:	681b      	ldr	r3, [r3, #0]
   1ccce:	b13b      	cbz	r3, 1cce0 <imgr_upload+0xd4>
        rc = imgr_upload_cb(req.off, action.size, imgr_upload_arg);
   1ccd0:	4a4b      	ldr	r2, [pc, #300]	; (1ce00 <imgr_upload+0x1f4>)
   1ccd2:	6812      	ldr	r2, [r2, #0]
   1ccd4:	9902      	ldr	r1, [sp, #8]
   1ccd6:	9852      	ldr	r0, [sp, #328]	; 0x148
   1ccd8:	4798      	blx	r3
        if (rc != 0) {
   1ccda:	4604      	mov	r4, r0
   1ccdc:	2800      	cmp	r0, #0
   1ccde:	d130      	bne.n	1cd42 <imgr_upload+0x136>
    imgr_state.area_id = action.area_id;
   1cce0:	9805      	ldr	r0, [sp, #20]
   1cce2:	4b48      	ldr	r3, [pc, #288]	; (1ce04 <imgr_upload+0x1f8>)
   1cce4:	6018      	str	r0, [r3, #0]
    imgr_state.size = action.size;
   1cce6:	9a02      	ldr	r2, [sp, #8]
   1cce8:	609a      	str	r2, [r3, #8]
    rc = flash_area_open(imgr_state.area_id, &fa);
   1ccea:	a901      	add	r1, sp, #4
   1ccec:	b2c0      	uxtb	r0, r0
   1ccee:	f001 fa65 	bl	1e1bc <flash_area_open>
    if (rc != 0) {
   1ccf2:	4604      	mov	r4, r0
   1ccf4:	bb40      	cbnz	r0, 1cd48 <imgr_upload+0x13c>
    if (req.off == 0) {
   1ccf6:	9a52      	ldr	r2, [sp, #328]	; 0x148
   1ccf8:	9b53      	ldr	r3, [sp, #332]	; 0x14c
   1ccfa:	4313      	orrs	r3, r2
   1ccfc:	d028      	beq.n	1cd50 <imgr_upload+0x144>
    if (req.data_len != 0) {
   1ccfe:	9b56      	ldr	r3, [sp, #344]	; 0x158
   1cd00:	2b00      	cmp	r3, #0
   1cd02:	d14d      	bne.n	1cda0 <imgr_upload+0x194>
    imgr_upload_log(req.off == 0, imgr_state.off == imgr_state.size, rc);
   1cd04:	9852      	ldr	r0, [sp, #328]	; 0x148
   1cd06:	9a53      	ldr	r2, [sp, #332]	; 0x14c
   1cd08:	4b3e      	ldr	r3, [pc, #248]	; (1ce04 <imgr_upload+0x1f8>)
   1cd0a:	6859      	ldr	r1, [r3, #4]
   1cd0c:	689b      	ldr	r3, [r3, #8]
   1cd0e:	4302      	orrs	r2, r0
   1cd10:	bf0c      	ite	eq
   1cd12:	2001      	moveq	r0, #1
   1cd14:	2000      	movne	r0, #0
   1cd16:	4622      	mov	r2, r4
   1cd18:	4299      	cmp	r1, r3
   1cd1a:	bf14      	ite	ne
   1cd1c:	2100      	movne	r1, #0
   1cd1e:	2101      	moveq	r1, #1
   1cd20:	f7ff fdb8 	bl	1c894 <imgr_upload_log>
    if (rc != 0) {
   1cd24:	2c00      	cmp	r4, #0
   1cd26:	d156      	bne.n	1cdd6 <imgr_upload+0x1ca>
    return imgr_upload_good_rsp(cb);
   1cd28:	4628      	mov	r0, r5
   1cd2a:	f7ff fd0d 	bl	1c748 <imgr_upload_good_rsp>
   1cd2e:	4604      	mov	r4, r0
   1cd30:	e055      	b.n	1cdde <imgr_upload+0x1d2>
        imgmgr_dfu_stopped();
   1cd32:	f7ff ff4d 	bl	1cbd0 <imgmgr_dfu_stopped>
        return rc;
   1cd36:	e052      	b.n	1cdde <imgr_upload+0x1d2>
        return imgr_upload_good_rsp(cb);
   1cd38:	4628      	mov	r0, r5
   1cd3a:	f7ff fd05 	bl	1c748 <imgr_upload_good_rsp>
   1cd3e:	4604      	mov	r4, r0
   1cd40:	e04d      	b.n	1cdde <imgr_upload+0x1d2>
            errstr = imgmgr_err_str_app_reject;
   1cd42:	2300      	movs	r3, #0
   1cd44:	9309      	str	r3, [sp, #36]	; 0x24
            goto end;
   1cd46:	e7dd      	b.n	1cd04 <imgr_upload+0xf8>
        errstr = imgmgr_err_str_flash_open_failed;
   1cd48:	2300      	movs	r3, #0
   1cd4a:	9309      	str	r3, [sp, #36]	; 0x24
        rc = MGMT_ERR_EUNKNOWN;
   1cd4c:	2401      	movs	r4, #1
        goto end;
   1cd4e:	e7d9      	b.n	1cd04 <imgr_upload+0xf8>
        imgr_state.off = 0;
   1cd50:	4e2c      	ldr	r6, [pc, #176]	; (1ce04 <imgr_upload+0x1f8>)
   1cd52:	f04f 0800 	mov.w	r8, #0
   1cd56:	f8c6 8004 	str.w	r8, [r6, #4]
        imgmgr_dfu_started();
   1cd5a:	f7ff ff43 	bl	1cbe4 <imgmgr_dfu_started>
        imgr_state.data_sha_len = req.data_sha_len;
   1cd5e:	9f57      	ldr	r7, [sp, #348]	; 0x15c
   1cd60:	7337      	strb	r7, [r6, #12]
        memcpy(imgr_state.data_sha, req.data_sha, req.data_sha_len);
   1cd62:	463a      	mov	r2, r7
   1cd64:	a9d8      	add	r1, sp, #864	; 0x360
   1cd66:	f106 000d 	add.w	r0, r6, #13
   1cd6a:	f7f0 fea9 	bl	dac0 <memcpy>
        memset(&imgr_state.data_sha[req.data_sha_len], 0,
   1cd6e:	f107 0008 	add.w	r0, r7, #8
   1cd72:	4430      	add	r0, r6
   1cd74:	f1c7 0220 	rsb	r2, r7, #32
   1cd78:	4641      	mov	r1, r8
   1cd7a:	3005      	adds	r0, #5
   1cd7c:	f7f0 fead 	bl	dada <memset>
        if (action.erase) {
   1cd80:	f89d 3019 	ldrb.w	r3, [sp, #25]
   1cd84:	2b00      	cmp	r3, #0
   1cd86:	d0ba      	beq.n	1ccfe <imgr_upload+0xf2>
            rc = flash_area_erase(fa, 0, req.size);
   1cd88:	9a54      	ldr	r2, [sp, #336]	; 0x150
   1cd8a:	4641      	mov	r1, r8
   1cd8c:	9801      	ldr	r0, [sp, #4]
   1cd8e:	f001 fa9d 	bl	1e2cc <flash_area_erase>
            if (rc != 0) {
   1cd92:	4604      	mov	r4, r0
   1cd94:	2800      	cmp	r0, #0
   1cd96:	d0b2      	beq.n	1ccfe <imgr_upload+0xf2>
                errstr = imgmgr_err_str_flash_erase_failed;
   1cd98:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
                rc = MGMT_ERR_EUNKNOWN;
   1cd9c:	2401      	movs	r4, #1
                goto end;
   1cd9e:	e7b1      	b.n	1cd04 <imgr_upload+0xf8>
        rc = flash_area_write(fa, req.off, req.img_data, action.write_bytes);
   1cda0:	9b04      	ldr	r3, [sp, #16]
   1cda2:	aa58      	add	r2, sp, #352	; 0x160
   1cda4:	9952      	ldr	r1, [sp, #328]	; 0x148
   1cda6:	9801      	ldr	r0, [sp, #4]
   1cda8:	f001 fa7c 	bl	1e2a4 <flash_area_write>
        if (rc != 0) {
   1cdac:	4604      	mov	r4, r0
   1cdae:	b970      	cbnz	r0, 1cdce <imgr_upload+0x1c2>
            imgr_state.off += action.write_bytes;
   1cdb0:	9b04      	ldr	r3, [sp, #16]
   1cdb2:	4a14      	ldr	r2, [pc, #80]	; (1ce04 <imgr_upload+0x1f8>)
   1cdb4:	6851      	ldr	r1, [r2, #4]
   1cdb6:	440b      	add	r3, r1
   1cdb8:	6053      	str	r3, [r2, #4]
            if (imgr_state.off == imgr_state.size) {
   1cdba:	6892      	ldr	r2, [r2, #8]
   1cdbc:	4293      	cmp	r3, r2
   1cdbe:	d1a1      	bne.n	1cd04 <imgr_upload+0xf8>
                imgmgr_dfu_pending();
   1cdc0:	f7ff ff1a 	bl	1cbf8 <imgmgr_dfu_pending>
                imgr_state.area_id = -1;
   1cdc4:	4b0f      	ldr	r3, [pc, #60]	; (1ce04 <imgr_upload+0x1f8>)
   1cdc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1cdca:	601a      	str	r2, [r3, #0]
   1cdcc:	e79a      	b.n	1cd04 <imgr_upload+0xf8>
            errstr = imgmgr_err_str_flash_write_failed;
   1cdce:	2300      	movs	r3, #0
   1cdd0:	9309      	str	r3, [sp, #36]	; 0x24
            rc = MGMT_ERR_EUNKNOWN;
   1cdd2:	2401      	movs	r4, #1
            goto end;
   1cdd4:	e796      	b.n	1cd04 <imgr_upload+0xf8>
        imgmgr_dfu_stopped();
   1cdd6:	f7ff fefb 	bl	1cbd0 <imgmgr_dfu_stopped>
        return imgr_error_rsp(cb, rc, errstr);
   1cdda:	e000      	b.n	1cdde <imgr_upload+0x1d2>
        return MGMT_ERR_EINVAL;
   1cddc:	2403      	movs	r4, #3
}
   1cdde:	4620      	mov	r0, r4
   1cde0:	f50d 7d62 	add.w	sp, sp, #904	; 0x388
   1cde4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cde8:	00024a48 	.word	0x00024a48
   1cdec:	00024a50 	.word	0x00024a50
   1cdf0:	0002396c 	.word	0x0002396c
   1cdf4:	00024a54 	.word	0x00024a54
   1cdf8:	00024a58 	.word	0x00024a58
   1cdfc:	20004688 	.word	0x20004688
   1ce00:	20004684 	.word	0x20004684
   1ce04:	20004654 	.word	0x20004654

0001ce08 <imgmgr_dfu_confirmed>:

void
imgmgr_dfu_confirmed(void)
{
   1ce08:	b508      	push	{r3, lr}
    if (imgmgr_dfu_callbacks_fn && imgmgr_dfu_callbacks_fn->dfu_confirmed_cb) {
   1ce0a:	4b03      	ldr	r3, [pc, #12]	; (1ce18 <imgmgr_dfu_confirmed+0x10>)
   1ce0c:	681b      	ldr	r3, [r3, #0]
   1ce0e:	b113      	cbz	r3, 1ce16 <imgmgr_dfu_confirmed+0xe>
   1ce10:	68db      	ldr	r3, [r3, #12]
   1ce12:	b103      	cbz	r3, 1ce16 <imgmgr_dfu_confirmed+0xe>
        imgmgr_dfu_callbacks_fn->dfu_confirmed_cb();
   1ce14:	4798      	blx	r3
    }
}
   1ce16:	bd08      	pop	{r3, pc}
   1ce18:	20004650 	.word	0x20004650

0001ce1c <imgmgr_module_init>:
    imgmgr_dfu_callbacks_fn = cb_struct;
}

void
imgmgr_module_init(void)
{
   1ce1c:	b510      	push	{r4, lr}
   1ce1e:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1ce20:	4b0a      	ldr	r3, [pc, #40]	; (1ce4c <imgmgr_module_init+0x30>)
   1ce22:	781b      	ldrb	r3, [r3, #0]
   1ce24:	b16b      	cbz	r3, 1ce42 <imgmgr_module_init+0x26>

    rc = mgmt_group_register(&imgr_nmgr_group);
   1ce26:	480a      	ldr	r0, [pc, #40]	; (1ce50 <imgmgr_module_init+0x34>)
   1ce28:	f000 fab6 	bl	1d398 <mgmt_group_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1ce2c:	b138      	cbz	r0, 1ce3e <imgmgr_module_init+0x22>
   1ce2e:	2000      	movs	r0, #0
   1ce30:	9000      	str	r0, [sp, #0]
   1ce32:	4b08      	ldr	r3, [pc, #32]	; (1ce54 <imgmgr_module_init+0x38>)
   1ce34:	681c      	ldr	r4, [r3, #0]
   1ce36:	4603      	mov	r3, r0
   1ce38:	4602      	mov	r2, r0
   1ce3a:	4601      	mov	r1, r0
   1ce3c:	47a0      	blx	r4
     */
    if (imgmgr_state_slot_in_use(1)) {
        log_fcb_slot1_lock();
    }
#endif
}
   1ce3e:	b002      	add	sp, #8
   1ce40:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1ce42:	461a      	mov	r2, r3
   1ce44:	4619      	mov	r1, r3
   1ce46:	4618      	mov	r0, r3
   1ce48:	f7ec f88c 	bl	8f64 <__assert_func>
   1ce4c:	20004538 	.word	0x20004538
   1ce50:	20000f44 	.word	0x20000f44
   1ce54:	2000064c 	.word	0x2000064c

0001ce58 <imgmgr_log_gen>:
    modlog_append_mbuf(MYNEWT_VAL(IMGMGR_LOG_MOD), LOG_LEVEL_INFO,
                       LOG_ETYPE_CBOR, om);
#endif

    return 0;
}
   1ce58:	2000      	movs	r0, #0
   1ce5a:	4770      	bx	lr

0001ce5c <imgmgr_log_upload_start>:

int
imgmgr_log_upload_start(int status)
{
   1ce5c:	b508      	push	{r3, lr}
   1ce5e:	4601      	mov	r1, r0
    return imgmgr_log_gen(IMGMGR_LOG_EV_UPSTART, status, NULL);
   1ce60:	2200      	movs	r2, #0
   1ce62:	4802      	ldr	r0, [pc, #8]	; (1ce6c <imgmgr_log_upload_start+0x10>)
   1ce64:	f7ff fff8 	bl	1ce58 <imgmgr_log_gen>
}
   1ce68:	bd08      	pop	{r3, pc}
   1ce6a:	bf00      	nop
   1ce6c:	00024a98 	.word	0x00024a98

0001ce70 <imgmgr_log_upload_done>:

int
imgmgr_log_upload_done(int status, const uint8_t *hash)
{
   1ce70:	b508      	push	{r3, lr}
   1ce72:	460a      	mov	r2, r1
    return imgmgr_log_gen(IMGMGR_LOG_EV_UPDONE, 0, hash);
   1ce74:	2100      	movs	r1, #0
   1ce76:	4802      	ldr	r0, [pc, #8]	; (1ce80 <imgmgr_log_upload_done+0x10>)
   1ce78:	f7ff ffee 	bl	1ce58 <imgmgr_log_gen>
}
   1ce7c:	bd08      	pop	{r3, pc}
   1ce7e:	bf00      	nop
   1ce80:	00024aa0 	.word	0x00024aa0

0001ce84 <imgmgr_log_pending>:

int
imgmgr_log_pending(int status, const uint8_t *hash)
{
   1ce84:	b508      	push	{r3, lr}
   1ce86:	460a      	mov	r2, r1
    return imgmgr_log_gen(IMGMGR_LOG_EV_PEND, status, hash);
   1ce88:	4601      	mov	r1, r0
   1ce8a:	4802      	ldr	r0, [pc, #8]	; (1ce94 <imgmgr_log_pending+0x10>)
   1ce8c:	f7ff ffe4 	bl	1ce58 <imgmgr_log_gen>
}
   1ce90:	bd08      	pop	{r3, pc}
   1ce92:	bf00      	nop
   1ce94:	00024aa8 	.word	0x00024aa8

0001ce98 <imgmgr_log_confirm>:

int
imgmgr_log_confirm(int status, const uint8_t *hash)
{
   1ce98:	b508      	push	{r3, lr}
   1ce9a:	460a      	mov	r2, r1
    return imgmgr_log_gen(IMGMGR_LOG_EV_CONF, status, hash);
   1ce9c:	4601      	mov	r1, r0
   1ce9e:	4802      	ldr	r0, [pc, #8]	; (1cea8 <imgmgr_log_confirm+0x10>)
   1cea0:	f7ff ffda 	bl	1ce58 <imgmgr_log_gen>
}
   1cea4:	bd08      	pop	{r3, pc}
   1cea6:	bf00      	nop
   1cea8:	00024ab0 	.word	0x00024ab0

0001ceac <imgmgr_state_flags>:
#include "imgmgr_priv.h"
#include "log/log_fcb_slot1.h"

uint8_t
imgmgr_state_flags(int query_slot)
{
   1ceac:	b538      	push	{r3, r4, r5, lr}
    split_mode_t split_mode;
    uint8_t flags;
    int swap_type;

    assert(query_slot == 0 || query_slot == 1);
   1ceae:	2801      	cmp	r0, #1
   1ceb0:	d809      	bhi.n	1cec6 <imgmgr_state_flags+0x1a>
   1ceb2:	4604      	mov	r4, r0
    flags = 0;

    /* Determine if this is is pending or confirmed (only applicable for
     * unified images and loaders.
     */
    swap_type = boot_swap_type();
   1ceb4:	f002 ff46 	bl	1fd44 <boot_swap_type>
    switch (swap_type) {
   1ceb8:	3801      	subs	r0, #1
   1ceba:	2803      	cmp	r0, #3
   1cebc:	d825      	bhi.n	1cf0a <imgmgr_state_flags+0x5e>
   1cebe:	e8df f000 	tbb	[pc, r0]
   1cec2:	1508      	.short	0x1508
   1cec4:	1f1a      	.short	0x1f1a
    assert(query_slot == 0 || query_slot == 1);
   1cec6:	2300      	movs	r3, #0
   1cec8:	461a      	mov	r2, r3
   1ceca:	4619      	mov	r1, r3
   1cecc:	4618      	mov	r0, r3
   1cece:	f7ec f849 	bl	8f64 <__assert_func>
    case BOOT_SWAP_TYPE_NONE:
        if (query_slot == 0) {
   1ced2:	b1e4      	cbz	r4, 1cf0e <imgmgr_state_flags+0x62>
    flags = 0;
   1ced4:	2500      	movs	r5, #0

    /* Slot 0 is always active.  Slot 1 is also active if a split app is
     * currently running.
     */
    /* XXX: The slot 0 assumption only holds when running from flash. */
    if (query_slot == 0 || split_app_active_get()) {
   1ced6:	bb44      	cbnz	r4, 1cf2a <imgmgr_state_flags+0x7e>
        flags |= IMGMGR_STATE_F_ACTIVE;
   1ced8:	f045 0504 	orr.w	r5, r5, #4
    }

    /* Read the split/status config state to determine any pending split-image
     * state changes.
     */
    split_mode = split_mode_get();
   1cedc:	f7f5 fb16 	bl	1250c <split_mode_get>
    switch (split_mode) {
   1cee0:	2803      	cmp	r0, #3
   1cee2:	d838      	bhi.n	1cf56 <imgmgr_state_flags+0xaa>
   1cee4:	e8df f000 	tbb	[pc, r0]
   1cee8:	2d263228 	.word	0x2d263228
        if (query_slot == 0) {
   1ceec:	b18c      	cbz	r4, 1cf12 <imgmgr_state_flags+0x66>
        } else if (query_slot == 1) {
   1ceee:	2c01      	cmp	r4, #1
   1cef0:	d011      	beq.n	1cf16 <imgmgr_state_flags+0x6a>
    flags = 0;
   1cef2:	2500      	movs	r5, #0
   1cef4:	e7ef      	b.n	1ced6 <imgmgr_state_flags+0x2a>
        if (query_slot == 0) {
   1cef6:	b184      	cbz	r4, 1cf1a <imgmgr_state_flags+0x6e>
        } else if (query_slot == 1) {
   1cef8:	2c01      	cmp	r4, #1
   1cefa:	d010      	beq.n	1cf1e <imgmgr_state_flags+0x72>
    flags = 0;
   1cefc:	2500      	movs	r5, #0
   1cefe:	e7ea      	b.n	1ced6 <imgmgr_state_flags+0x2a>
        if (query_slot == 0) {
   1cf00:	b17c      	cbz	r4, 1cf22 <imgmgr_state_flags+0x76>
        } else if (query_slot == 1) {
   1cf02:	2c01      	cmp	r4, #1
   1cf04:	d00f      	beq.n	1cf26 <imgmgr_state_flags+0x7a>
    flags = 0;
   1cf06:	2500      	movs	r5, #0
   1cf08:	e7e5      	b.n	1ced6 <imgmgr_state_flags+0x2a>
    switch (swap_type) {
   1cf0a:	2500      	movs	r5, #0
   1cf0c:	e7e3      	b.n	1ced6 <imgmgr_state_flags+0x2a>
            flags |= IMGMGR_STATE_F_ACTIVE;
   1cf0e:	2506      	movs	r5, #6
   1cf10:	e7e1      	b.n	1ced6 <imgmgr_state_flags+0x2a>
            flags |= IMGMGR_STATE_F_CONFIRMED;
   1cf12:	2502      	movs	r5, #2
   1cf14:	e7df      	b.n	1ced6 <imgmgr_state_flags+0x2a>
            flags |= IMGMGR_STATE_F_PENDING;
   1cf16:	2501      	movs	r5, #1
   1cf18:	e7dd      	b.n	1ced6 <imgmgr_state_flags+0x2a>
            flags |= IMGMGR_STATE_F_CONFIRMED;
   1cf1a:	2502      	movs	r5, #2
   1cf1c:	e7db      	b.n	1ced6 <imgmgr_state_flags+0x2a>
            flags |= IMGMGR_STATE_F_PENDING | IMGMGR_STATE_F_PERMANENT;
   1cf1e:	2509      	movs	r5, #9
   1cf20:	e7d9      	b.n	1ced6 <imgmgr_state_flags+0x2a>
            flags |= IMGMGR_STATE_F_ACTIVE;
   1cf22:	2504      	movs	r5, #4
   1cf24:	e7d7      	b.n	1ced6 <imgmgr_state_flags+0x2a>
            flags |= IMGMGR_STATE_F_CONFIRMED;
   1cf26:	2502      	movs	r5, #2
   1cf28:	e7d5      	b.n	1ced6 <imgmgr_state_flags+0x2a>
    if (query_slot == 0 || split_app_active_get()) {
   1cf2a:	f7f5 faf5 	bl	12518 <split_app_active_get>
   1cf2e:	2800      	cmp	r0, #0
   1cf30:	d0d4      	beq.n	1cedc <imgmgr_state_flags+0x30>
   1cf32:	e7d1      	b.n	1ced8 <imgmgr_state_flags+0x2c>
    case SPLIT_MODE_LOADER:
        break;

    case SPLIT_MODE_APP:
        if (query_slot == 1) {
   1cf34:	2c01      	cmp	r4, #1
   1cf36:	d001      	beq.n	1cf3c <imgmgr_state_flags+0x90>
        assert(0);
        break;
    }

    return flags;
}
   1cf38:	4628      	mov	r0, r5
   1cf3a:	bd38      	pop	{r3, r4, r5, pc}
            flags |= IMGMGR_STATE_F_CONFIRMED;
   1cf3c:	f045 0502 	orr.w	r5, r5, #2
   1cf40:	e7fa      	b.n	1cf38 <imgmgr_state_flags+0x8c>
        if (query_slot == 0) {
   1cf42:	2c00      	cmp	r4, #0
   1cf44:	d1f8      	bne.n	1cf38 <imgmgr_state_flags+0x8c>
            flags |= IMGMGR_STATE_F_PENDING;
   1cf46:	f045 0501 	orr.w	r5, r5, #1
   1cf4a:	e7f5      	b.n	1cf38 <imgmgr_state_flags+0x8c>
        if (query_slot == 1) {
   1cf4c:	2c01      	cmp	r4, #1
   1cf4e:	d1f3      	bne.n	1cf38 <imgmgr_state_flags+0x8c>
            flags |= IMGMGR_STATE_F_PENDING;
   1cf50:	f045 0501 	orr.w	r5, r5, #1
   1cf54:	e7f0      	b.n	1cf38 <imgmgr_state_flags+0x8c>
        assert(0);
   1cf56:	2300      	movs	r3, #0
   1cf58:	461a      	mov	r2, r3
   1cf5a:	4619      	mov	r1, r3
   1cf5c:	4618      	mov	r0, r3
   1cf5e:	f7ec f801 	bl	8f64 <__assert_func>

0001cf62 <imgmgr_state_any_pending>:

static int
imgmgr_state_any_pending(void)
{
   1cf62:	b508      	push	{r3, lr}
    return (imgmgr_state_flags(0) & IMGMGR_STATE_F_PENDING) ||
   1cf64:	2000      	movs	r0, #0
   1cf66:	f7ff ffa1 	bl	1ceac <imgmgr_state_flags>
   1cf6a:	f010 0f01 	tst.w	r0, #1
   1cf6e:	d001      	beq.n	1cf74 <imgmgr_state_any_pending+0x12>
   1cf70:	2001      	movs	r0, #1
           (imgmgr_state_flags(1) & IMGMGR_STATE_F_PENDING);
}
   1cf72:	bd08      	pop	{r3, pc}
           (imgmgr_state_flags(1) & IMGMGR_STATE_F_PENDING);
   1cf74:	2001      	movs	r0, #1
   1cf76:	f7ff ff99 	bl	1ceac <imgmgr_state_flags>
    return (imgmgr_state_flags(0) & IMGMGR_STATE_F_PENDING) ||
   1cf7a:	f010 0f01 	tst.w	r0, #1
   1cf7e:	d101      	bne.n	1cf84 <imgmgr_state_any_pending+0x22>
   1cf80:	2000      	movs	r0, #0
   1cf82:	e7f6      	b.n	1cf72 <imgmgr_state_any_pending+0x10>
   1cf84:	2001      	movs	r0, #1
   1cf86:	e7f4      	b.n	1cf72 <imgmgr_state_any_pending+0x10>

0001cf88 <imgmgr_state_slot_in_use>:

int
imgmgr_state_slot_in_use(int slot)
{
   1cf88:	b508      	push	{r3, lr}
    uint8_t state_flags;

    state_flags = imgmgr_state_flags(slot);
   1cf8a:	f7ff ff8f 	bl	1ceac <imgmgr_state_flags>
    return (state_flags & IMGMGR_STATE_F_ACTIVE)       ||
           (state_flags & IMGMGR_STATE_F_CONFIRMED)    ||
   1cf8e:	f010 0f06 	tst.w	r0, #6
   1cf92:	d104      	bne.n	1cf9e <imgmgr_state_slot_in_use+0x16>
   1cf94:	f010 0f01 	tst.w	r0, #1
   1cf98:	d003      	beq.n	1cfa2 <imgmgr_state_slot_in_use+0x1a>
   1cf9a:	2001      	movs	r0, #1
   1cf9c:	e000      	b.n	1cfa0 <imgmgr_state_slot_in_use+0x18>
   1cf9e:	2001      	movs	r0, #1
           (state_flags & IMGMGR_STATE_F_PENDING);
}
   1cfa0:	bd08      	pop	{r3, pc}
           (state_flags & IMGMGR_STATE_F_CONFIRMED)    ||
   1cfa2:	2000      	movs	r0, #0
   1cfa4:	e7fc      	b.n	1cfa0 <imgmgr_state_slot_in_use+0x18>

0001cfa6 <imgmgr_state_set_pending>:

int
imgmgr_state_set_pending(int slot, int permanent)
{
   1cfa6:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cfa8:	b08b      	sub	sp, #44	; 0x2c
   1cfaa:	4605      	mov	r5, r0
   1cfac:	460c      	mov	r4, r1
    uint8_t hash[IMGMGR_HASH_LEN];
    const uint8_t *hashp;
    int split_app_active;
    int rc;

    state_flags = imgmgr_state_flags(slot);
   1cfae:	f7ff ff7d 	bl	1ceac <imgmgr_state_flags>
   1cfb2:	4606      	mov	r6, r0
    split_app_active = split_app_active_get();
   1cfb4:	f7f5 fab0 	bl	12518 <split_app_active_get>
   1cfb8:	4607      	mov	r7, r0
    hashp = NULL;

    /* Unconfirmed slots are always runable.  A confirmed slot can only be
     * run if it is a loader in a split image setup.
     */
    if ((state_flags & IMGMGR_STATE_F_CONFIRMED) &&
   1cfba:	f016 0f02 	tst.w	r6, #2
   1cfbe:	d001      	beq.n	1cfc4 <imgmgr_state_set_pending+0x1e>
   1cfc0:	bb6d      	cbnz	r5, 1d01e <imgmgr_state_set_pending+0x78>
        (slot != 0 || !split_app_active)) {
   1cfc2:	b378      	cbz	r0, 1d024 <imgmgr_state_set_pending+0x7e>

        rc = MGMT_ERR_EBADSTATE;
        goto done;
    }

    rc = imgr_read_info(slot, NULL, hash, &image_flags);
   1cfc4:	ab09      	add	r3, sp, #36	; 0x24
   1cfc6:	aa01      	add	r2, sp, #4
   1cfc8:	2100      	movs	r1, #0
   1cfca:	4628      	mov	r0, r5
   1cfcc:	f7ff fbe4 	bl	1c798 <imgr_read_info>
    if (rc != 0) {
   1cfd0:	bb58      	cbnz	r0, 1d02a <imgmgr_state_set_pending+0x84>
        rc = MGMT_ERR_EUNKNOWN;
        goto done;
    }
    hashp = hash;

    if (!(image_flags & IMAGE_F_NON_BOOTABLE)) {
   1cfd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1cfd4:	f013 0f10 	tst.w	r3, #16
   1cfd8:	d114      	bne.n	1d004 <imgmgr_state_set_pending+0x5e>
        /* Unified image or loader. */
        if (!split_app_active) {
   1cfda:	b13f      	cbz	r7, 1cfec <imgmgr_state_set_pending+0x46>
                rc = MGMT_ERR_EUNKNOWN;
                goto done;
            }
        } else {
            /* Currently loader + app; testing loader-only. */
            if (permanent) {
   1cfdc:	b16c      	cbz	r4, 1cffa <imgmgr_state_set_pending+0x54>
                rc = split_write_split(SPLIT_MODE_LOADER);
   1cfde:	2000      	movs	r0, #0
   1cfe0:	f7f5 fb0e 	bl	12600 <split_write_split>
   1cfe4:	4605      	mov	r5, r0
            } else {
                rc = split_write_split(SPLIT_MODE_TEST_LOADER);
            }
            if (rc != 0) {
   1cfe6:	bb65      	cbnz	r5, 1d042 <imgmgr_state_set_pending+0x9c>
    hashp = hash;
   1cfe8:	a901      	add	r1, sp, #4
   1cfea:	e020      	b.n	1d02e <imgmgr_state_set_pending+0x88>
            rc = boot_set_pending(permanent);
   1cfec:	4620      	mov	r0, r4
   1cfee:	f002 fefb 	bl	1fde8 <boot_set_pending>
            if (rc != 0) {
   1cff2:	4605      	mov	r5, r0
   1cff4:	bb10      	cbnz	r0, 1d03c <imgmgr_state_set_pending+0x96>
    hashp = hash;
   1cff6:	a901      	add	r1, sp, #4
   1cff8:	e019      	b.n	1d02e <imgmgr_state_set_pending+0x88>
                rc = split_write_split(SPLIT_MODE_TEST_LOADER);
   1cffa:	2003      	movs	r0, #3
   1cffc:	f7f5 fb00 	bl	12600 <split_write_split>
   1d000:	4605      	mov	r5, r0
   1d002:	e7f0      	b.n	1cfe6 <imgmgr_state_set_pending+0x40>
                goto done;
            }
        }
    } else {
        /* Testing split app. */
        if (permanent) {
   1d004:	b134      	cbz	r4, 1d014 <imgmgr_state_set_pending+0x6e>
            rc = split_write_split(SPLIT_MODE_APP);
   1d006:	2002      	movs	r0, #2
   1d008:	f7f5 fafa 	bl	12600 <split_write_split>
   1d00c:	4605      	mov	r5, r0
        } else {
            rc = split_write_split(SPLIT_MODE_TEST_APP);
        }
        if (rc != 0) {
   1d00e:	b9dd      	cbnz	r5, 1d048 <imgmgr_state_set_pending+0xa2>
    hashp = hash;
   1d010:	a901      	add	r1, sp, #4
   1d012:	e00c      	b.n	1d02e <imgmgr_state_set_pending+0x88>
            rc = split_write_split(SPLIT_MODE_TEST_APP);
   1d014:	2001      	movs	r0, #1
   1d016:	f7f5 faf3 	bl	12600 <split_write_split>
   1d01a:	4605      	mov	r5, r0
   1d01c:	e7f7      	b.n	1d00e <imgmgr_state_set_pending+0x68>
        rc = MGMT_ERR_EBADSTATE;
   1d01e:	2506      	movs	r5, #6
    hashp = NULL;
   1d020:	2100      	movs	r1, #0
   1d022:	e004      	b.n	1d02e <imgmgr_state_set_pending+0x88>
        rc = MGMT_ERR_EBADSTATE;
   1d024:	2506      	movs	r5, #6
    hashp = NULL;
   1d026:	2100      	movs	r1, #0
   1d028:	e001      	b.n	1d02e <imgmgr_state_set_pending+0x88>
        rc = MGMT_ERR_EUNKNOWN;
   1d02a:	2501      	movs	r5, #1
    hashp = NULL;
   1d02c:	2100      	movs	r1, #0
            goto done;
        }
    }

done:
    if (permanent) {
   1d02e:	b174      	cbz	r4, 1d04e <imgmgr_state_set_pending+0xa8>
        imgmgr_log_confirm(rc, hashp);
   1d030:	4628      	mov	r0, r5
   1d032:	f7ff ff31 	bl	1ce98 <imgmgr_log_confirm>
    } else {
        imgmgr_log_pending(rc, hashp);
    }
    return rc;
}
   1d036:	4628      	mov	r0, r5
   1d038:	b00b      	add	sp, #44	; 0x2c
   1d03a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                rc = MGMT_ERR_EUNKNOWN;
   1d03c:	2501      	movs	r5, #1
    hashp = hash;
   1d03e:	a901      	add	r1, sp, #4
   1d040:	e7f5      	b.n	1d02e <imgmgr_state_set_pending+0x88>
                rc = MGMT_ERR_EUNKNOWN;
   1d042:	2501      	movs	r5, #1
    hashp = hash;
   1d044:	a901      	add	r1, sp, #4
   1d046:	e7f2      	b.n	1d02e <imgmgr_state_set_pending+0x88>
            rc = MGMT_ERR_EUNKNOWN;
   1d048:	2501      	movs	r5, #1
    hashp = hash;
   1d04a:	a901      	add	r1, sp, #4
   1d04c:	e7ef      	b.n	1d02e <imgmgr_state_set_pending+0x88>
        imgmgr_log_pending(rc, hashp);
   1d04e:	4628      	mov	r0, r5
   1d050:	f7ff ff18 	bl	1ce84 <imgmgr_log_pending>
    return rc;
   1d054:	e7ef      	b.n	1d036 <imgmgr_state_set_pending+0x90>

0001d056 <imgmgr_state_confirm>:

int
imgmgr_state_confirm(void)
{
   1d056:	b510      	push	{r4, lr}
    int rc;

    /* Confirm disallowed if a test is pending. */
    if (imgmgr_state_any_pending()) {
   1d058:	f7ff ff83 	bl	1cf62 <imgmgr_state_any_pending>
   1d05c:	b9b8      	cbnz	r0, 1d08e <imgmgr_state_confirm+0x38>
        rc = MGMT_ERR_EBADSTATE;
        goto done;
    }

    /* Confirm the unified image or loader in slot 0. */
    rc = boot_set_confirmed();
   1d05e:	f002 ff06 	bl	1fe6e <boot_set_confirmed>
    if (rc != 0) {
   1d062:	b108      	cbz	r0, 1d068 <imgmgr_state_confirm+0x12>
        rc = MGMT_ERR_EUNKNOWN;
   1d064:	2401      	movs	r4, #1
   1d066:	e013      	b.n	1d090 <imgmgr_state_confirm+0x3a>
        goto done;
    }

    /* If a split app in slot 1 is active, confirm it as well. */
    if (split_app_active_get()) {
   1d068:	f7f5 fa56 	bl	12518 <split_app_active_get>
   1d06c:	b138      	cbz	r0, 1d07e <imgmgr_state_confirm+0x28>
        rc = split_write_split(SPLIT_MODE_APP);
   1d06e:	2002      	movs	r0, #2
   1d070:	f7f5 fac6 	bl	12600 <split_write_split>
        if (rc != 0) {
   1d074:	4604      	mov	r4, r0
   1d076:	b988      	cbnz	r0, 1d09c <imgmgr_state_confirm+0x46>
        /* If logging to slot1 is enabled, we can unlock slot1 here. */
        log_fcb_slot1_unlock();
#endif
    }

    imgmgr_dfu_confirmed();
   1d078:	f7ff fec6 	bl	1ce08 <imgmgr_dfu_confirmed>
   1d07c:	e008      	b.n	1d090 <imgmgr_state_confirm+0x3a>
        rc = split_write_split(SPLIT_MODE_LOADER);
   1d07e:	2000      	movs	r0, #0
   1d080:	f7f5 fabe 	bl	12600 <split_write_split>
        if (rc != 0) {
   1d084:	4604      	mov	r4, r0
   1d086:	2800      	cmp	r0, #0
   1d088:	d0f6      	beq.n	1d078 <imgmgr_state_confirm+0x22>
            rc = MGMT_ERR_EUNKNOWN;
   1d08a:	2401      	movs	r4, #1
   1d08c:	e000      	b.n	1d090 <imgmgr_state_confirm+0x3a>
        rc = MGMT_ERR_EBADSTATE;
   1d08e:	2406      	movs	r4, #6

done:
    imgmgr_log_confirm(rc, NULL);
   1d090:	2100      	movs	r1, #0
   1d092:	4620      	mov	r0, r4
   1d094:	f7ff ff00 	bl	1ce98 <imgmgr_log_confirm>
    return rc;
}
   1d098:	4620      	mov	r0, r4
   1d09a:	bd10      	pop	{r4, pc}
            rc = MGMT_ERR_EUNKNOWN;
   1d09c:	2401      	movs	r4, #1
   1d09e:	e7f7      	b.n	1d090 <imgmgr_state_confirm+0x3a>

0001d0a0 <imgmgr_state_read>:

int
imgmgr_state_read(struct mgmt_cbuf *cb)
{
   1d0a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d0a4:	b09a      	sub	sp, #104	; 0x68
    CborEncoder images;
    CborEncoder image;

    any_non_bootable = 0;

    g_err |= cbor_encode_text_stringz(&cb->encoder, "images");
   1d0a6:	f100 070c 	add.w	r7, r0, #12
   1d0aa:	2206      	movs	r2, #6
   1d0ac:	4961      	ldr	r1, [pc, #388]	; (1d234 <imgmgr_state_read+0x194>)
   1d0ae:	4638      	mov	r0, r7
   1d0b0:	f7f6 f89b 	bl	131ea <cbor_encode_text_string>
   1d0b4:	4604      	mov	r4, r0

    g_err |= cbor_encoder_create_array(&cb->encoder, &images,
   1d0b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d0ba:	a904      	add	r1, sp, #16
   1d0bc:	4638      	mov	r0, r7
   1d0be:	f7f6 f89b 	bl	131f8 <cbor_encoder_create_array>
   1d0c2:	4304      	orrs	r4, r0
    any_non_bootable = 0;
   1d0c4:	f04f 0800 	mov.w	r8, #0
                                       CborIndefiniteLength);
    for (i = 0; i < 2; i++) {
   1d0c8:	4645      	mov	r5, r8
   1d0ca:	e080      	b.n	1d1ce <imgmgr_state_read+0x12e>

        if (flags & IMAGE_F_NON_BOOTABLE) {
            any_non_bootable = 1;
        }

        state_flags = imgmgr_state_flags(i);
   1d0cc:	4628      	mov	r0, r5
   1d0ce:	f7ff feed 	bl	1ceac <imgmgr_state_flags>
   1d0d2:	4606      	mov	r6, r0

        g_err |= cbor_encoder_create_map(&images, &image,
   1d0d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d0d8:	4669      	mov	r1, sp
   1d0da:	a804      	add	r0, sp, #16
   1d0dc:	f7f6 f891 	bl	13202 <cbor_encoder_create_map>
   1d0e0:	4304      	orrs	r4, r0
   1d0e2:	2204      	movs	r2, #4
   1d0e4:	4954      	ldr	r1, [pc, #336]	; (1d238 <imgmgr_state_read+0x198>)
   1d0e6:	4668      	mov	r0, sp
   1d0e8:	f7f6 f87f 	bl	131ea <cbor_encode_text_string>
                                         CborIndefiniteLength);
        g_err |= cbor_encode_text_stringz(&image, "slot");
   1d0ec:	4304      	orrs	r4, r0
        g_err |= cbor_encode_int(&image, i);
   1d0ee:	462a      	mov	r2, r5
   1d0f0:	17eb      	asrs	r3, r5, #31
   1d0f2:	4668      	mov	r0, sp
   1d0f4:	f7f5 fffe 	bl	130f4 <cbor_encode_int>
   1d0f8:	4304      	orrs	r4, r0
   1d0fa:	2207      	movs	r2, #7
   1d0fc:	494f      	ldr	r1, [pc, #316]	; (1d23c <imgmgr_state_read+0x19c>)
   1d0fe:	4668      	mov	r0, sp
   1d100:	f7f6 f873 	bl	131ea <cbor_encode_text_string>

        g_err |= cbor_encode_text_stringz(&image, "version");
   1d104:	4304      	orrs	r4, r0
        imgr_ver_str(&ver, vers_str);
   1d106:	a908      	add	r1, sp, #32
   1d108:	a817      	add	r0, sp, #92	; 0x5c
   1d10a:	f000 f8f5 	bl	1d2f8 <imgr_ver_str>
   1d10e:	a808      	add	r0, sp, #32
   1d110:	f7f0 fd1a 	bl	db48 <strlen>
   1d114:	4602      	mov	r2, r0
   1d116:	a908      	add	r1, sp, #32
   1d118:	4668      	mov	r0, sp
   1d11a:	f7f6 f866 	bl	131ea <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&image, vers_str);
   1d11e:	4304      	orrs	r4, r0
   1d120:	2204      	movs	r2, #4
   1d122:	4947      	ldr	r1, [pc, #284]	; (1d240 <imgmgr_state_read+0x1a0>)
   1d124:	4668      	mov	r0, sp
   1d126:	f7f6 f860 	bl	131ea <cbor_encode_text_string>

        g_err |= cbor_encode_text_stringz(&image, "hash");
   1d12a:	4304      	orrs	r4, r0
        g_err |= cbor_encode_byte_string(&image, hash, IMGMGR_HASH_LEN);
   1d12c:	2220      	movs	r2, #32
   1d12e:	a90f      	add	r1, sp, #60	; 0x3c
   1d130:	4668      	mov	r0, sp
   1d132:	f7f6 f853 	bl	131dc <cbor_encode_byte_string>
   1d136:	4304      	orrs	r4, r0
   1d138:	2208      	movs	r2, #8
   1d13a:	4942      	ldr	r1, [pc, #264]	; (1d244 <imgmgr_state_read+0x1a4>)
   1d13c:	4668      	mov	r0, sp
   1d13e:	f7f6 f854 	bl	131ea <cbor_encode_text_string>

        g_err |= cbor_encode_text_stringz(&image, "bootable");
   1d142:	4304      	orrs	r4, r0
        g_err |= cbor_encode_boolean(&image, !(flags & IMAGE_F_NON_BOOTABLE));
   1d144:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1d146:	f013 0f10 	tst.w	r3, #16
   1d14a:	bf0c      	ite	eq
   1d14c:	2101      	moveq	r1, #1
   1d14e:	2100      	movne	r1, #0
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   1d150:	3114      	adds	r1, #20
   1d152:	4668      	mov	r0, sp
   1d154:	f7f6 f814 	bl	13180 <cbor_encode_simple_value>
   1d158:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1d15a:	2207      	movs	r2, #7
   1d15c:	493a      	ldr	r1, [pc, #232]	; (1d248 <imgmgr_state_read+0x1a8>)
   1d15e:	4668      	mov	r0, sp
   1d160:	f7f6 f843 	bl	131ea <cbor_encode_text_string>

        g_err |= cbor_encode_text_stringz(&image, "pending");
   1d164:	4304      	orrs	r4, r0
        g_err |= cbor_encode_boolean(&image,
   1d166:	f006 0101 	and.w	r1, r6, #1
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   1d16a:	3114      	adds	r1, #20
   1d16c:	4668      	mov	r0, sp
   1d16e:	f7f6 f807 	bl	13180 <cbor_encode_simple_value>
   1d172:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1d174:	2209      	movs	r2, #9
   1d176:	4935      	ldr	r1, [pc, #212]	; (1d24c <imgmgr_state_read+0x1ac>)
   1d178:	4668      	mov	r0, sp
   1d17a:	f7f6 f836 	bl	131ea <cbor_encode_text_string>
                                     state_flags & IMGMGR_STATE_F_PENDING);

        g_err |= cbor_encode_text_stringz(&image, "confirmed");
   1d17e:	4304      	orrs	r4, r0
        g_err |= cbor_encode_boolean(&image,
   1d180:	f3c6 0140 	ubfx	r1, r6, #1, #1
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   1d184:	3114      	adds	r1, #20
   1d186:	4668      	mov	r0, sp
   1d188:	f7f5 fffa 	bl	13180 <cbor_encode_simple_value>
   1d18c:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1d18e:	2206      	movs	r2, #6
   1d190:	492f      	ldr	r1, [pc, #188]	; (1d250 <imgmgr_state_read+0x1b0>)
   1d192:	4668      	mov	r0, sp
   1d194:	f7f6 f829 	bl	131ea <cbor_encode_text_string>
                                     state_flags & IMGMGR_STATE_F_CONFIRMED);

        g_err |= cbor_encode_text_stringz(&image, "active");
   1d198:	4304      	orrs	r4, r0
        g_err |= cbor_encode_boolean(&image,
   1d19a:	f3c6 0180 	ubfx	r1, r6, #2, #1
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   1d19e:	3114      	adds	r1, #20
   1d1a0:	4668      	mov	r0, sp
   1d1a2:	f7f5 ffed 	bl	13180 <cbor_encode_simple_value>
   1d1a6:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1d1a8:	2209      	movs	r2, #9
   1d1aa:	492a      	ldr	r1, [pc, #168]	; (1d254 <imgmgr_state_read+0x1b4>)
   1d1ac:	4668      	mov	r0, sp
   1d1ae:	f7f6 f81c 	bl	131ea <cbor_encode_text_string>
                                     state_flags & IMGMGR_STATE_F_ACTIVE);

        g_err |= cbor_encode_text_stringz(&image, "permanent");
   1d1b2:	4304      	orrs	r4, r0
        g_err |= cbor_encode_boolean(&image,
   1d1b4:	f3c6 01c0 	ubfx	r1, r6, #3, #1
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   1d1b8:	3114      	adds	r1, #20
   1d1ba:	4668      	mov	r0, sp
   1d1bc:	f7f5 ffe0 	bl	13180 <cbor_encode_simple_value>
   1d1c0:	4304      	orrs	r4, r0
                                     state_flags & IMGMGR_STATE_F_PERMANENT);

        g_err |= cbor_encoder_close_container(&images, &image);
   1d1c2:	4669      	mov	r1, sp
   1d1c4:	a804      	add	r0, sp, #16
   1d1c6:	f7f6 f82a 	bl	1321e <cbor_encoder_close_container>
   1d1ca:	4304      	orrs	r4, r0
    for (i = 0; i < 2; i++) {
   1d1cc:	3501      	adds	r5, #1
   1d1ce:	2d01      	cmp	r5, #1
   1d1d0:	dc0f      	bgt.n	1d1f2 <imgmgr_state_read+0x152>
        rc = imgr_read_info(i, &ver, hash, &flags);
   1d1d2:	ab19      	add	r3, sp, #100	; 0x64
   1d1d4:	aa0f      	add	r2, sp, #60	; 0x3c
   1d1d6:	a917      	add	r1, sp, #92	; 0x5c
   1d1d8:	4628      	mov	r0, r5
   1d1da:	f7ff fadd 	bl	1c798 <imgr_read_info>
        if (rc != 0) {
   1d1de:	2800      	cmp	r0, #0
   1d1e0:	d1f4      	bne.n	1d1cc <imgmgr_state_read+0x12c>
        if (flags & IMAGE_F_NON_BOOTABLE) {
   1d1e2:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1d1e4:	f013 0f10 	tst.w	r3, #16
   1d1e8:	f43f af70 	beq.w	1d0cc <imgmgr_state_read+0x2c>
            any_non_bootable = 1;
   1d1ec:	f04f 0801 	mov.w	r8, #1
   1d1f0:	e76c      	b.n	1d0cc <imgmgr_state_read+0x2c>
    }

    g_err |= cbor_encoder_close_container(&cb->encoder, &images);
   1d1f2:	a904      	add	r1, sp, #16
   1d1f4:	4638      	mov	r0, r7
   1d1f6:	f7f6 f812 	bl	1321e <cbor_encoder_close_container>
   1d1fa:	4304      	orrs	r4, r0

    if (any_non_bootable) {
   1d1fc:	f1b8 0f00 	cmp.w	r8, #0
   1d200:	d112      	bne.n	1d228 <imgmgr_state_read+0x188>
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1d202:	220b      	movs	r2, #11
   1d204:	4914      	ldr	r1, [pc, #80]	; (1d258 <imgmgr_state_read+0x1b8>)
   1d206:	4638      	mov	r0, r7
   1d208:	f7f5 ffef 	bl	131ea <cbor_encode_text_string>
        split_status = split_check_status();
    } else {
        split_status = SPLIT_STATUS_INVALID;
    }

    g_err |= cbor_encode_text_stringz(&cb->encoder, "splitStatus");
   1d20c:	4304      	orrs	r4, r0
    g_err |= cbor_encode_int(&cb->encoder, split_status);
   1d20e:	4642      	mov	r2, r8
   1d210:	ea4f 73e8 	mov.w	r3, r8, asr #31
   1d214:	4638      	mov	r0, r7
   1d216:	f7f5 ff6d 	bl	130f4 <cbor_encode_int>

    if (g_err) {
   1d21a:	ea54 0300 	orrs.w	r3, r4, r0
   1d21e:	d107      	bne.n	1d230 <imgmgr_state_read+0x190>
        return MGMT_ERR_ENOMEM;
    }
    return 0;
   1d220:	2000      	movs	r0, #0
}
   1d222:	b01a      	add	sp, #104	; 0x68
   1d224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        split_status = split_check_status();
   1d228:	f7f5 f954 	bl	124d4 <split_check_status>
   1d22c:	4680      	mov	r8, r0
   1d22e:	e7e8      	b.n	1d202 <imgmgr_state_read+0x162>
        return MGMT_ERR_ENOMEM;
   1d230:	2002      	movs	r0, #2
   1d232:	e7f6      	b.n	1d222 <imgmgr_state_read+0x182>
   1d234:	00024ab8 	.word	0x00024ab8
   1d238:	00024ac0 	.word	0x00024ac0
   1d23c:	00024ac8 	.word	0x00024ac8
   1d240:	00024ad0 	.word	0x00024ad0
   1d244:	00024ad8 	.word	0x00024ad8
   1d248:	00024ae4 	.word	0x00024ae4
   1d24c:	00024aec 	.word	0x00024aec
   1d250:	00024af8 	.word	0x00024af8
   1d254:	00024b00 	.word	0x00024b00
   1d258:	00024b0c 	.word	0x00024b0c

0001d25c <imgmgr_state_write>:

int
imgmgr_state_write(struct mgmt_cbuf *cb)
{
   1d25c:	b510      	push	{r4, lr}
   1d25e:	b0ae      	sub	sp, #184	; 0xb8
   1d260:	4604      	mov	r4, r0
    uint8_t hash[IMGMGR_HASH_LEN];
    size_t hash_len = 0;
   1d262:	2100      	movs	r1, #0
   1d264:	9125      	str	r1, [sp, #148]	; 0x94
    bool confirm;
    int slot;
    int rc;

    const struct cbor_attr_t write_attr[] = {
   1d266:	2290      	movs	r2, #144	; 0x90
   1d268:	4668      	mov	r0, sp
   1d26a:	f7f0 fc36 	bl	dada <memset>
   1d26e:	4b20      	ldr	r3, [pc, #128]	; (1d2f0 <imgmgr_state_write+0x94>)
   1d270:	9300      	str	r3, [sp, #0]
   1d272:	2303      	movs	r3, #3
   1d274:	f88d 3004 	strb.w	r3, [sp, #4]
   1d278:	ab26      	add	r3, sp, #152	; 0x98
   1d27a:	9302      	str	r3, [sp, #8]
   1d27c:	ab25      	add	r3, sp, #148	; 0x94
   1d27e:	9303      	str	r3, [sp, #12]
   1d280:	2320      	movs	r3, #32
   1d282:	930a      	str	r3, [sp, #40]	; 0x28
   1d284:	4b1b      	ldr	r3, [pc, #108]	; (1d2f4 <imgmgr_state_write+0x98>)
   1d286:	930c      	str	r3, [sp, #48]	; 0x30
   1d288:	2305      	movs	r3, #5
   1d28a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   1d28e:	f10d 0393 	add.w	r3, sp, #147	; 0x93
   1d292:	930e      	str	r3, [sp, #56]	; 0x38
            .dflt.boolean = false,
        },
        [2] = { 0 },
    };

    rc = cbor_read_object(&cb->it, write_attr);
   1d294:	4669      	mov	r1, sp
   1d296:	f104 001c 	add.w	r0, r4, #28
   1d29a:	f7f5 fdbf 	bl	12e1c <cbor_read_object>
    if (rc != 0) {
   1d29e:	bb10      	cbnz	r0, 1d2e6 <imgmgr_state_write+0x8a>
   1d2a0:	4603      	mov	r3, r0
        return MGMT_ERR_EINVAL;
    }

    /* Determine which slot is being operated on. */
    if (hash_len == 0) {
   1d2a2:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1d2a4:	b97a      	cbnz	r2, 1d2c6 <imgmgr_state_write+0x6a>
        if (confirm) {
   1d2a6:	f89d 2093 	ldrb.w	r2, [sp, #147]	; 0x93
   1d2aa:	b152      	cbz	r2, 1d2c2 <imgmgr_state_write+0x66>
        if (slot < 0) {
            return MGMT_ERR_EINVAL;
        }
    }

    if (slot == 0 && confirm) {
   1d2ac:	f89d 2093 	ldrb.w	r2, [sp, #147]	; 0x93
   1d2b0:	b992      	cbnz	r2, 1d2d8 <imgmgr_state_write+0x7c>
        /* Confirm current setup. */
        rc = imgmgr_state_confirm();
    } else {
        rc = imgmgr_state_set_pending(slot, confirm);
   1d2b2:	f89d 1093 	ldrb.w	r1, [sp, #147]	; 0x93
   1d2b6:	4618      	mov	r0, r3
   1d2b8:	f7ff fe75 	bl	1cfa6 <imgmgr_state_set_pending>
    }
    if (rc != 0) {
   1d2bc:	b178      	cbz	r0, 1d2de <imgmgr_state_write+0x82>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1d2be:	b02e      	add	sp, #184	; 0xb8
   1d2c0:	bd10      	pop	{r4, pc}
            return MGMT_ERR_EINVAL;
   1d2c2:	2003      	movs	r0, #3
   1d2c4:	e7fb      	b.n	1d2be <imgmgr_state_write+0x62>
        slot = imgr_find_by_hash(hash, NULL);
   1d2c6:	2100      	movs	r1, #0
   1d2c8:	a826      	add	r0, sp, #152	; 0x98
   1d2ca:	f7ff fb0b 	bl	1c8e4 <imgr_find_by_hash>
        if (slot < 0) {
   1d2ce:	1e03      	subs	r3, r0, #0
   1d2d0:	db0b      	blt.n	1d2ea <imgmgr_state_write+0x8e>
    if (slot == 0 && confirm) {
   1d2d2:	2b00      	cmp	r3, #0
   1d2d4:	d1ed      	bne.n	1d2b2 <imgmgr_state_write+0x56>
   1d2d6:	e7e9      	b.n	1d2ac <imgmgr_state_write+0x50>
        rc = imgmgr_state_confirm();
   1d2d8:	f7ff febd 	bl	1d056 <imgmgr_state_confirm>
   1d2dc:	e7ee      	b.n	1d2bc <imgmgr_state_write+0x60>
    rc = imgmgr_state_read(cb);
   1d2de:	4620      	mov	r0, r4
   1d2e0:	f7ff fede 	bl	1d0a0 <imgmgr_state_read>
    if (rc != 0) {
   1d2e4:	e7eb      	b.n	1d2be <imgmgr_state_write+0x62>
        return MGMT_ERR_EINVAL;
   1d2e6:	2003      	movs	r0, #3
   1d2e8:	e7e9      	b.n	1d2be <imgmgr_state_write+0x62>
            return MGMT_ERR_EINVAL;
   1d2ea:	2003      	movs	r0, #3
   1d2ec:	e7e7      	b.n	1d2be <imgmgr_state_write+0x62>
   1d2ee:	bf00      	nop
   1d2f0:	00024ad0 	.word	0x00024ad0
   1d2f4:	00024b18 	.word	0x00024b18

0001d2f8 <imgr_ver_str>:
    return 0;
}

int
imgr_ver_str(struct image_version *ver, char *dst)
{
   1d2f8:	b500      	push	{lr}
   1d2fa:	b083      	sub	sp, #12
   1d2fc:	4602      	mov	r2, r0
   1d2fe:	4608      	mov	r0, r1
    if (ver->iv_build_num) {
   1d300:	6853      	ldr	r3, [r2, #4]
   1d302:	b153      	cbz	r3, 1d31a <imgr_ver_str+0x22>
        return sprintf(dst, "%u.%u.%u.%lu",
          ver->iv_major, ver->iv_minor, ver->iv_revision,
   1d304:	8851      	ldrh	r1, [r2, #2]
        return sprintf(dst, "%u.%u.%u.%lu",
   1d306:	9301      	str	r3, [sp, #4]
   1d308:	9100      	str	r1, [sp, #0]
   1d30a:	7853      	ldrb	r3, [r2, #1]
   1d30c:	7812      	ldrb	r2, [r2, #0]
   1d30e:	4907      	ldr	r1, [pc, #28]	; (1d32c <imgr_ver_str+0x34>)
   1d310:	f7ff f8c9 	bl	1c4a6 <sprintf>
          (unsigned long)ver->iv_build_num);
    } else {
        return sprintf(dst, "%u.%u.%u",
          ver->iv_major, ver->iv_minor, ver->iv_revision);
    }
}
   1d314:	b003      	add	sp, #12
   1d316:	f85d fb04 	ldr.w	pc, [sp], #4
          ver->iv_major, ver->iv_minor, ver->iv_revision);
   1d31a:	8853      	ldrh	r3, [r2, #2]
        return sprintf(dst, "%u.%u.%u",
   1d31c:	9300      	str	r3, [sp, #0]
   1d31e:	7853      	ldrb	r3, [r2, #1]
   1d320:	7812      	ldrb	r2, [r2, #0]
   1d322:	4903      	ldr	r1, [pc, #12]	; (1d330 <imgr_ver_str+0x38>)
   1d324:	f7ff f8bf 	bl	1c4a6 <sprintf>
   1d328:	e7f4      	b.n	1d314 <imgr_ver_str+0x1c>
   1d32a:	bf00      	nop
   1d32c:	00024b20 	.word	0x00024b20
   1d330:	00024b30 	.word	0x00024b30

0001d334 <mgmt_group_list_lock>:
static STAILQ_HEAD(, mgmt_group) mgmt_group_list =
    STAILQ_HEAD_INITIALIZER(mgmt_group_list);

static int
mgmt_group_list_lock(void)
{
   1d334:	b508      	push	{r3, lr}
    int rc;

    if (!os_started()) {
   1d336:	f7eb fecf 	bl	90d8 <os_started>
   1d33a:	b900      	cbnz	r0, 1d33e <mgmt_group_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
   1d33c:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&mgmt_group_lock, OS_WAIT_FOREVER);
   1d33e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d342:	4802      	ldr	r0, [pc, #8]	; (1d34c <mgmt_group_list_lock+0x18>)
   1d344:	f7ed fb80 	bl	aa48 <os_mutex_pend>
    if (rc != 0) {
   1d348:	e7f8      	b.n	1d33c <mgmt_group_list_lock+0x8>
   1d34a:	bf00      	nop
   1d34c:	2000468c 	.word	0x2000468c

0001d350 <mgmt_group_list_unlock>:

int
mgmt_group_list_unlock(void)
{
   1d350:	b508      	push	{r3, lr}
    int rc;

    if (!os_started()) {
   1d352:	f7eb fec1 	bl	90d8 <os_started>
   1d356:	b900      	cbnz	r0, 1d35a <mgmt_group_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
   1d358:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&mgmt_group_lock);
   1d35a:	4802      	ldr	r0, [pc, #8]	; (1d364 <mgmt_group_list_unlock+0x14>)
   1d35c:	f7ed fb18 	bl	a990 <os_mutex_release>
    if (rc != 0) {
   1d360:	e7fa      	b.n	1d358 <mgmt_group_list_unlock+0x8>
   1d362:	bf00      	nop
   1d364:	2000468c 	.word	0x2000468c

0001d368 <mgmt_find_group>:
    return (rc);
}

static struct mgmt_group *
mgmt_find_group(uint16_t group_id)
{
   1d368:	b538      	push	{r3, r4, r5, lr}
   1d36a:	4605      	mov	r5, r0
    struct mgmt_group *group;
    int rc;

    group = NULL;

    rc = mgmt_group_list_lock();
   1d36c:	f7ff ffe2 	bl	1d334 <mgmt_group_list_lock>
    if (rc != 0) {
   1d370:	b960      	cbnz	r0, 1d38c <mgmt_find_group+0x24>
        goto err;
    }

    STAILQ_FOREACH(group, &mgmt_group_list, mg_next) {
   1d372:	4b08      	ldr	r3, [pc, #32]	; (1d394 <mgmt_find_group+0x2c>)
   1d374:	681c      	ldr	r4, [r3, #0]
   1d376:	b124      	cbz	r4, 1d382 <mgmt_find_group+0x1a>
        if (group->mg_group_id == group_id) {
   1d378:	88e3      	ldrh	r3, [r4, #6]
   1d37a:	42ab      	cmp	r3, r5
   1d37c:	d001      	beq.n	1d382 <mgmt_find_group+0x1a>
    STAILQ_FOREACH(group, &mgmt_group_list, mg_next) {
   1d37e:	68a4      	ldr	r4, [r4, #8]
   1d380:	e7f9      	b.n	1d376 <mgmt_find_group+0xe>
            break;
        }
    }

    rc = mgmt_group_list_unlock();
   1d382:	f7ff ffe5 	bl	1d350 <mgmt_group_list_unlock>
    if (rc != 0) {
   1d386:	b918      	cbnz	r0, 1d390 <mgmt_find_group+0x28>
    }

    return (group);
err:
    return (NULL);
}
   1d388:	4620      	mov	r0, r4
   1d38a:	bd38      	pop	{r3, r4, r5, pc}
    return (NULL);
   1d38c:	2400      	movs	r4, #0
   1d38e:	e7fb      	b.n	1d388 <mgmt_find_group+0x20>
   1d390:	2400      	movs	r4, #0
   1d392:	e7f9      	b.n	1d388 <mgmt_find_group+0x20>
   1d394:	20000f50 	.word	0x20000f50

0001d398 <mgmt_group_register>:
{
   1d398:	b510      	push	{r4, lr}
   1d39a:	4604      	mov	r4, r0
    rc = mgmt_group_list_lock();
   1d39c:	f7ff ffca 	bl	1d334 <mgmt_group_list_lock>
    if (rc != 0) {
   1d3a0:	b100      	cbz	r0, 1d3a4 <mgmt_group_register+0xc>
}
   1d3a2:	bd10      	pop	{r4, pc}
    STAILQ_INSERT_TAIL(&mgmt_group_list, group, mg_next);
   1d3a4:	60a0      	str	r0, [r4, #8]
   1d3a6:	4b04      	ldr	r3, [pc, #16]	; (1d3b8 <mgmt_group_register+0x20>)
   1d3a8:	685a      	ldr	r2, [r3, #4]
   1d3aa:	6014      	str	r4, [r2, #0]
   1d3ac:	3408      	adds	r4, #8
   1d3ae:	605c      	str	r4, [r3, #4]
    rc = mgmt_group_list_unlock();
   1d3b0:	f7ff ffce 	bl	1d350 <mgmt_group_list_unlock>
    if (rc != 0) {
   1d3b4:	e7f5      	b.n	1d3a2 <mgmt_group_register+0xa>
   1d3b6:	bf00      	nop
   1d3b8:	20000f50 	.word	0x20000f50

0001d3bc <mgmt_find_handler>:

const struct mgmt_handler *
mgmt_find_handler(uint16_t group_id, uint16_t handler_id)
{
   1d3bc:	b510      	push	{r4, lr}
   1d3be:	460c      	mov	r4, r1
    struct mgmt_group *group;
    const struct mgmt_handler *handler;

    group = mgmt_find_group(group_id);
   1d3c0:	f7ff ffd2 	bl	1d368 <mgmt_find_group>
    if (!group) {
   1d3c4:	4603      	mov	r3, r0
   1d3c6:	b128      	cbz	r0, 1d3d4 <mgmt_find_handler+0x18>
        goto err;
    }

    if (handler_id >= group->mg_handlers_count) {
   1d3c8:	8882      	ldrh	r2, [r0, #4]
   1d3ca:	42a2      	cmp	r2, r4
   1d3cc:	d904      	bls.n	1d3d8 <mgmt_find_handler+0x1c>
        goto err;
    }

    handler = &group->mg_handlers[handler_id];
   1d3ce:	6803      	ldr	r3, [r0, #0]
   1d3d0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3

    return (handler);
err:
    return (NULL);
}
   1d3d4:	4618      	mov	r0, r3
   1d3d6:	bd10      	pop	{r4, pc}
    return (NULL);
   1d3d8:	2300      	movs	r3, #0
   1d3da:	e7fb      	b.n	1d3d4 <mgmt_find_handler+0x18>

0001d3dc <mgmt_cbuf_setoerr>:

int
mgmt_cbuf_setoerr(struct mgmt_cbuf *cb, int errcode)
{
   1d3dc:	b538      	push	{r3, r4, r5, lr}
   1d3de:	460d      	mov	r5, r1
    int rc;

    rc = cbor_encode_text_stringz(&cb->encoder, "rc");
   1d3e0:	f100 040c 	add.w	r4, r0, #12
   1d3e4:	2202      	movs	r2, #2
   1d3e6:	4906      	ldr	r1, [pc, #24]	; (1d400 <mgmt_cbuf_setoerr+0x24>)
   1d3e8:	4620      	mov	r0, r4
   1d3ea:	f7f5 fefe 	bl	131ea <cbor_encode_text_string>
    if (rc != 0) {
   1d3ee:	b100      	cbz	r0, 1d3f2 <mgmt_cbuf_setoerr+0x16>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1d3f0:	bd38      	pop	{r3, r4, r5, pc}
    rc = cbor_encode_int(&cb->encoder, errcode);
   1d3f2:	462a      	mov	r2, r5
   1d3f4:	17eb      	asrs	r3, r5, #31
   1d3f6:	4620      	mov	r0, r4
   1d3f8:	f7f5 fe7c 	bl	130f4 <cbor_encode_int>
    if (rc != 0) {
   1d3fc:	e7f8      	b.n	1d3f0 <mgmt_cbuf_setoerr+0x14>
   1d3fe:	bf00      	nop
   1d400:	00023a48 	.word	0x00023a48

0001d404 <nmgr_rsp_frag_alloc>:
/**
 * Allocates an mbuf to contain an outgoing response fragment.
 */
static struct os_mbuf *
nmgr_rsp_frag_alloc(uint16_t frag_size, void *arg)
{
   1d404:	b538      	push	{r3, r4, r5, lr}
   1d406:	460c      	mov	r4, r1
    /* We need to duplicate the user header from the source response, as that
     * is where transport-specific information is stored.
     */
    src_rsp = arg;

    frag = os_msys_get_pkthdr(frag_size, OS_MBUF_USRHDR_LEN(src_rsp));
   1d408:	7949      	ldrb	r1, [r1, #5]
   1d40a:	3908      	subs	r1, #8
   1d40c:	b289      	uxth	r1, r1
   1d40e:	f7ec faa3 	bl	9958 <os_msys_get_pkthdr>
    if (frag != NULL) {
   1d412:	4605      	mov	r5, r0
   1d414:	b130      	cbz	r0, 1d424 <nmgr_rsp_frag_alloc+0x20>
        /* Copy the user header from the response into the fragment mbuf. */
        memcpy(OS_MBUF_USRHDR(frag), OS_MBUF_USRHDR(src_rsp),
               OS_MBUF_USRHDR_LEN(src_rsp));
   1d416:	7962      	ldrb	r2, [r4, #5]
        memcpy(OS_MBUF_USRHDR(frag), OS_MBUF_USRHDR(src_rsp),
   1d418:	3a08      	subs	r2, #8
   1d41a:	f104 0118 	add.w	r1, r4, #24
   1d41e:	3018      	adds	r0, #24
   1d420:	f7f0 fb4e 	bl	dac0 <memcpy>
    }

    return frag;
}
   1d424:	4628      	mov	r0, r5
   1d426:	bd38      	pop	{r3, r4, r5, pc}

0001d428 <nmgr_init_rsp>:
{
   1d428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d42a:	4606      	mov	r6, r0
   1d42c:	460d      	mov	r5, r1
    hdr = (struct nmgr_hdr *) os_mbuf_extend(m, sizeof(struct nmgr_hdr));
   1d42e:	2108      	movs	r1, #8
   1d430:	f7ed fa76 	bl	a920 <os_mbuf_extend>
    if (!hdr) {
   1d434:	4604      	mov	r4, r0
   1d436:	b318      	cbz	r0, 1d480 <nmgr_init_rsp+0x58>
    memcpy(hdr, src, sizeof(*hdr));
   1d438:	682a      	ldr	r2, [r5, #0]
   1d43a:	686b      	ldr	r3, [r5, #4]
   1d43c:	6002      	str	r2, [r0, #0]
   1d43e:	6043      	str	r3, [r0, #4]
    hdr->nh_len = 0;
   1d440:	2300      	movs	r3, #0
   1d442:	8043      	strh	r3, [r0, #2]
    hdr->nh_flags = 0;
   1d444:	7043      	strb	r3, [r0, #1]
    hdr->nh_op = (src->nh_op == NMGR_OP_READ) ? NMGR_OP_READ_RSP :
   1d446:	782b      	ldrb	r3, [r5, #0]
   1d448:	f013 0f07 	tst.w	r3, #7
   1d44c:	d11a      	bne.n	1d484 <nmgr_init_rsp+0x5c>
   1d44e:	2201      	movs	r2, #1
   1d450:	7823      	ldrb	r3, [r4, #0]
   1d452:	f362 0302 	bfi	r3, r2, #0, #3
   1d456:	7023      	strb	r3, [r4, #0]
    hdr->nh_group = src->nh_group;
   1d458:	88ab      	ldrh	r3, [r5, #4]
   1d45a:	80a3      	strh	r3, [r4, #4]
    hdr->nh_seq = src->nh_seq;
   1d45c:	79ab      	ldrb	r3, [r5, #6]
   1d45e:	71a3      	strb	r3, [r4, #6]
    hdr->nh_id = src->nh_id;
   1d460:	79eb      	ldrb	r3, [r5, #7]
   1d462:	71e3      	strb	r3, [r4, #7]
    cbor_mbuf_writer_init(&nmgr_task_cbuf.writer, m);
   1d464:	4d08      	ldr	r5, [pc, #32]	; (1d488 <nmgr_init_rsp+0x60>)
   1d466:	f105 072c 	add.w	r7, r5, #44	; 0x2c
   1d46a:	4631      	mov	r1, r6
   1d46c:	4638      	mov	r0, r7
   1d46e:	f7f5 fd67 	bl	12f40 <cbor_mbuf_writer_init>
    cbor_encoder_init(&nmgr_task_cbuf.n_b.encoder, &nmgr_task_cbuf.writer.enc, 0);
   1d472:	2200      	movs	r2, #0
   1d474:	4639      	mov	r1, r7
   1d476:	f105 000c 	add.w	r0, r5, #12
   1d47a:	f7f5 fdf6 	bl	1306a <cbor_encoder_init>
    nmgr_task_cbuf.n_out_m = m;
   1d47e:	65ee      	str	r6, [r5, #92]	; 0x5c
}
   1d480:	4620      	mov	r0, r4
   1d482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdr->nh_op = (src->nh_op == NMGR_OP_READ) ? NMGR_OP_READ_RSP :
   1d484:	2203      	movs	r2, #3
   1d486:	e7e3      	b.n	1d450 <nmgr_init_rsp+0x28>
   1d488:	2000469c 	.word	0x2000469c

0001d48c <nmgr_rsp_tx>:
 * reason for this is to allow the caller to reuse the mbuf for an error
 * response.
 */
static int
nmgr_rsp_tx(struct nmgr_transport *nt, struct os_mbuf **rsp, uint16_t mtu)
{
   1d48c:	b570      	push	{r4, r5, r6, lr}
   1d48e:	4605      	mov	r5, r0
   1d490:	460c      	mov	r4, r1
   1d492:	4616      	mov	r6, r2
    struct os_mbuf *frag;
    int rc;

    while (*rsp != NULL) {
   1d494:	6823      	ldr	r3, [r4, #0]
   1d496:	b16b      	cbz	r3, 1d4b4 <nmgr_rsp_tx+0x28>
        frag = mem_split_frag(rsp, mtu, nmgr_rsp_frag_alloc, *rsp);
   1d498:	4a08      	ldr	r2, [pc, #32]	; (1d4bc <nmgr_rsp_tx+0x30>)
   1d49a:	4631      	mov	r1, r6
   1d49c:	4620      	mov	r0, r4
   1d49e:	f7f0 fff1 	bl	e484 <mem_split_frag>
        if (frag == NULL) {
   1d4a2:	4601      	mov	r1, r0
   1d4a4:	b140      	cbz	r0, 1d4b8 <nmgr_rsp_tx+0x2c>
            return MGMT_ERR_ENOMEM;
        }

        rc = nt->nt_output(nt, frag);
   1d4a6:	69ab      	ldr	r3, [r5, #24]
   1d4a8:	4628      	mov	r0, r5
   1d4aa:	4798      	blx	r3
        if (rc != 0) {
   1d4ac:	2800      	cmp	r0, #0
   1d4ae:	d0f1      	beq.n	1d494 <nmgr_rsp_tx+0x8>
            /* Output function already freed mbuf. */
            return MGMT_ERR_EUNKNOWN;
   1d4b0:	2001      	movs	r0, #1
   1d4b2:	e000      	b.n	1d4b6 <nmgr_rsp_tx+0x2a>
        }
    }

    return MGMT_ERR_EOK;
   1d4b4:	2000      	movs	r0, #0
}
   1d4b6:	bd70      	pop	{r4, r5, r6, pc}
            return MGMT_ERR_ENOMEM;
   1d4b8:	2002      	movs	r0, #2
   1d4ba:	e7fc      	b.n	1d4b6 <nmgr_rsp_tx+0x2a>
   1d4bc:	0001d405 	.word	0x0001d405

0001d4c0 <nmgr_send_err_rsp>:
{
   1d4c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d4c2:	b085      	sub	sp, #20
   1d4c4:	4606      	mov	r6, r0
   1d4c6:	460c      	mov	r4, r1
   1d4c8:	461d      	mov	r5, r3
    hdr = nmgr_init_rsp(m, hdr);
   1d4ca:	4611      	mov	r1, r2
   1d4cc:	4620      	mov	r0, r4
   1d4ce:	f7ff ffab 	bl	1d428 <nmgr_init_rsp>
    if (!hdr) {
   1d4d2:	b148      	cbz	r0, 1d4e8 <nmgr_send_err_rsp+0x28>
   1d4d4:	4607      	mov	r7, r0
    rc = cbor_encoder_create_map(&nmgr_task_cbuf.n_b.encoder, &map,
   1d4d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d4da:	4669      	mov	r1, sp
   1d4dc:	4811      	ldr	r0, [pc, #68]	; (1d524 <nmgr_send_err_rsp+0x64>)
   1d4de:	f7f5 fe90 	bl	13202 <cbor_encoder_create_map>
    if (rc != 0) {
   1d4e2:	b128      	cbz	r0, 1d4f0 <nmgr_send_err_rsp+0x30>
}
   1d4e4:	b005      	add	sp, #20
   1d4e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        os_mbuf_free_chain(m);
   1d4e8:	4620      	mov	r0, r4
   1d4ea:	f7ed f89e 	bl	a62a <os_mbuf_free_chain>
        return;
   1d4ee:	e7f9      	b.n	1d4e4 <nmgr_send_err_rsp+0x24>
    rc = mgmt_cbuf_setoerr(&nmgr_task_cbuf.n_b, status);
   1d4f0:	4629      	mov	r1, r5
   1d4f2:	480d      	ldr	r0, [pc, #52]	; (1d528 <nmgr_send_err_rsp+0x68>)
   1d4f4:	f7ff ff72 	bl	1d3dc <mgmt_cbuf_setoerr>
    if (rc != 0) {
   1d4f8:	2800      	cmp	r0, #0
   1d4fa:	d1f3      	bne.n	1d4e4 <nmgr_send_err_rsp+0x24>
    rc = cbor_encoder_close_container(&nmgr_task_cbuf.n_b.encoder, &map);
   1d4fc:	4669      	mov	r1, sp
   1d4fe:	4809      	ldr	r0, [pc, #36]	; (1d524 <nmgr_send_err_rsp+0x64>)
   1d500:	f7f5 fe8d 	bl	1321e <cbor_encoder_close_container>
    if (rc != 0) {
   1d504:	2800      	cmp	r0, #0
   1d506:	d1ed      	bne.n	1d4e4 <nmgr_send_err_rsp+0x24>
{   return encoder->writer->bytes_written; }
   1d508:	4907      	ldr	r1, [pc, #28]	; (1d528 <nmgr_send_err_rsp+0x68>)
   1d50a:	68cb      	ldr	r3, [r1, #12]
   1d50c:	685a      	ldr	r2, [r3, #4]
        htons(cbor_encode_bytes_written(&nmgr_task_cbuf.n_b.encoder));
   1d50e:	0213      	lsls	r3, r2, #8
   1d510:	b29b      	uxth	r3, r3
   1d512:	f3c2 2207 	ubfx	r2, r2, #8, #8
   1d516:	4313      	orrs	r3, r2
    hdr->nh_len =
   1d518:	807b      	strh	r3, [r7, #2]
    nt->nt_output(nt, nmgr_task_cbuf.n_out_m);
   1d51a:	69b3      	ldr	r3, [r6, #24]
   1d51c:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
   1d51e:	4630      	mov	r0, r6
   1d520:	4798      	blx	r3
   1d522:	e7df      	b.n	1d4e4 <nmgr_send_err_rsp+0x24>
   1d524:	200046a8 	.word	0x200046a8
   1d528:	2000469c 	.word	0x2000469c

0001d52c <nmgr_handle_req>:

static void
nmgr_handle_req(struct nmgr_transport *nt, struct os_mbuf *req)
{
   1d52c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d530:	b088      	sub	sp, #32
   1d532:	4606      	mov	r6, r0
   1d534:	460c      	mov	r4, r1
    uint16_t mtu;
    int rc;

    rsp_hdr = NULL;

    rsp = os_msys_get_pkthdr(512, OS_MBUF_USRHDR_LEN(req));
   1d536:	7949      	ldrb	r1, [r1, #5]
   1d538:	3908      	subs	r1, #8
   1d53a:	b289      	uxth	r1, r1
   1d53c:	f44f 7000 	mov.w	r0, #512	; 0x200
   1d540:	f7ec fa0a 	bl	9958 <os_msys_get_pkthdr>
   1d544:	9007      	str	r0, [sp, #28]
    if (!rsp) {
   1d546:	b168      	cbz	r0, 1d564 <nmgr_handle_req+0x38>
        rsp = req;
        req = NULL;
        goto err;
    }

    mtu = nt->nt_get_mtu(req);
   1d548:	69f3      	ldr	r3, [r6, #28]
   1d54a:	4620      	mov	r0, r4
   1d54c:	4798      	blx	r3
    if (mtu == 0) {
   1d54e:	4605      	mov	r5, r0
   1d550:	bb08      	cbnz	r0, 1d596 <nmgr_handle_req+0x6a>
    nmgr_send_err_rsp(nt, rsp, &hdr, rc);
    os_mbuf_free_chain(req);
    return;

err_norsp:
    os_mbuf_free_chain(rsp);
   1d552:	9807      	ldr	r0, [sp, #28]
   1d554:	f7ed f869 	bl	a62a <os_mbuf_free_chain>
    os_mbuf_free_chain(req);
   1d558:	4620      	mov	r0, r4
   1d55a:	f7ed f866 	bl	a62a <os_mbuf_free_chain>
    return;
}
   1d55e:	b008      	add	sp, #32
   1d560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d564:	4605      	mov	r5, r0
        rc = os_mbuf_copydata(req, 0, sizeof(hdr), &hdr);
   1d566:	ab01      	add	r3, sp, #4
   1d568:	2208      	movs	r2, #8
   1d56a:	2100      	movs	r1, #0
   1d56c:	4620      	mov	r0, r4
   1d56e:	f7ed f8d2 	bl	a716 <os_mbuf_copydata>
        if (rc < 0) {
   1d572:	1e07      	subs	r7, r0, #0
   1d574:	dbed      	blt.n	1d552 <nmgr_handle_req+0x26>
        rsp = req;
   1d576:	9407      	str	r4, [sp, #28]
        req = NULL;
   1d578:	462c      	mov	r4, r5
    os_mbuf_adj(rsp, OS_MBUF_PKTLEN(rsp));
   1d57a:	9807      	ldr	r0, [sp, #28]
   1d57c:	8a01      	ldrh	r1, [r0, #16]
   1d57e:	f7ed f8f7 	bl	a770 <os_mbuf_adj>
    nmgr_send_err_rsp(nt, rsp, &hdr, rc);
   1d582:	463b      	mov	r3, r7
   1d584:	aa01      	add	r2, sp, #4
   1d586:	9907      	ldr	r1, [sp, #28]
   1d588:	4630      	mov	r0, r6
   1d58a:	f7ff ff99 	bl	1d4c0 <nmgr_send_err_rsp>
    os_mbuf_free_chain(req);
   1d58e:	4620      	mov	r0, r4
   1d590:	f7ed f84b 	bl	a62a <os_mbuf_free_chain>
    return;
   1d594:	e7e3      	b.n	1d55e <nmgr_handle_req+0x32>
    memcpy(OS_MBUF_USRHDR(rsp), OS_MBUF_USRHDR(req), OS_MBUF_USRHDR_LEN(req));
   1d596:	7962      	ldrb	r2, [r4, #5]
   1d598:	3a08      	subs	r2, #8
   1d59a:	f104 0118 	add.w	r1, r4, #24
   1d59e:	9807      	ldr	r0, [sp, #28]
   1d5a0:	3018      	adds	r0, #24
   1d5a2:	f7f0 fa8d 	bl	dac0 <memcpy>
    rc = os_mbuf_copydata(req, 0, sizeof(hdr), &hdr);
   1d5a6:	ab01      	add	r3, sp, #4
   1d5a8:	2208      	movs	r2, #8
   1d5aa:	2100      	movs	r1, #0
   1d5ac:	4620      	mov	r0, r4
   1d5ae:	f7ed f8b2 	bl	a716 <os_mbuf_copydata>
    if (rc < 0) {
   1d5b2:	2800      	cmp	r0, #0
   1d5b4:	dbcd      	blt.n	1d552 <nmgr_handle_req+0x26>
    hdr.nh_len = ntohs(hdr.nh_len);
   1d5b6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1d5ba:	0213      	lsls	r3, r2, #8
   1d5bc:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   1d5c0:	f8ad 3006 	strh.w	r3, [sp, #6]
    handler = mgmt_find_handler(ntohs(hdr.nh_group), hdr.nh_id);
   1d5c4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1d5c8:	0218      	lsls	r0, r3, #8
   1d5ca:	ea40 2013 	orr.w	r0, r0, r3, lsr #8
   1d5ce:	f89d 100b 	ldrb.w	r1, [sp, #11]
   1d5d2:	b280      	uxth	r0, r0
   1d5d4:	f7ff fef2 	bl	1d3bc <mgmt_find_handler>
    if (!handler) {
   1d5d8:	4680      	mov	r8, r0
   1d5da:	2800      	cmp	r0, #0
   1d5dc:	d062      	beq.n	1d6a4 <nmgr_handle_req+0x178>
    rsp_hdr = nmgr_init_rsp(rsp, &hdr);
   1d5de:	a901      	add	r1, sp, #4
   1d5e0:	9807      	ldr	r0, [sp, #28]
   1d5e2:	f7ff ff21 	bl	1d428 <nmgr_init_rsp>
    if (!rsp_hdr) {
   1d5e6:	4681      	mov	r9, r0
   1d5e8:	2800      	cmp	r0, #0
   1d5ea:	d0b2      	beq.n	1d552 <nmgr_handle_req+0x26>
    cbor_mbuf_reader_init(&nmgr_task_cbuf.reader, req, sizeof(hdr));
   1d5ec:	4f2f      	ldr	r7, [pc, #188]	; (1d6ac <nmgr_handle_req+0x180>)
   1d5ee:	f107 0a38 	add.w	sl, r7, #56	; 0x38
   1d5f2:	2208      	movs	r2, #8
   1d5f4:	4621      	mov	r1, r4
   1d5f6:	4650      	mov	r0, sl
   1d5f8:	f7f5 fc6a 	bl	12ed0 <cbor_mbuf_reader_init>
    cbor_parser_init(&nmgr_task_cbuf.reader.r, 0,
   1d5fc:	f107 031c 	add.w	r3, r7, #28
   1d600:	463a      	mov	r2, r7
   1d602:	2100      	movs	r1, #0
   1d604:	4650      	mov	r0, sl
   1d606:	f7f6 f89a 	bl	1373e <cbor_parser_init>
    rc = cbor_encoder_create_map(&nmgr_task_cbuf.n_b.encoder, &payload_enc,
   1d60a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d60e:	a903      	add	r1, sp, #12
   1d610:	f107 000c 	add.w	r0, r7, #12
   1d614:	f7f5 fdf5 	bl	13202 <cbor_encoder_create_map>
    if (rc != 0) {
   1d618:	2800      	cmp	r0, #0
   1d61a:	d145      	bne.n	1d6a8 <nmgr_handle_req+0x17c>
    if (hdr.nh_op == NMGR_OP_READ) {
   1d61c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1d620:	f013 0307 	ands.w	r3, r3, #7
   1d624:	d10e      	bne.n	1d644 <nmgr_handle_req+0x118>
        if (handler->mh_read) {
   1d626:	f8d8 3000 	ldr.w	r3, [r8]
   1d62a:	b1a3      	cbz	r3, 1d656 <nmgr_handle_req+0x12a>
            rc = handler->mh_read(&nmgr_task_cbuf.n_b);
   1d62c:	4638      	mov	r0, r7
   1d62e:	4798      	blx	r3
   1d630:	4607      	mov	r7, r0
    if (rc != 0) {
   1d632:	2f00      	cmp	r7, #0
   1d634:	d1a1      	bne.n	1d57a <nmgr_handle_req+0x4e>
    rc = cbor_encoder_close_container(&nmgr_task_cbuf.n_b.encoder,
   1d636:	a903      	add	r1, sp, #12
   1d638:	481d      	ldr	r0, [pc, #116]	; (1d6b0 <nmgr_handle_req+0x184>)
   1d63a:	f7f5 fdf0 	bl	1321e <cbor_encoder_close_container>
    if (rc != 0) {
   1d63e:	b180      	cbz	r0, 1d662 <nmgr_handle_req+0x136>
        rc = MGMT_ERR_ENOMEM;
   1d640:	2702      	movs	r7, #2
   1d642:	e79a      	b.n	1d57a <nmgr_handle_req+0x4e>
    } else if (hdr.nh_op == NMGR_OP_WRITE) {
   1d644:	2b02      	cmp	r3, #2
   1d646:	d108      	bne.n	1d65a <nmgr_handle_req+0x12e>
        if (handler->mh_write) {
   1d648:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1d64c:	b13b      	cbz	r3, 1d65e <nmgr_handle_req+0x132>
            rc = handler->mh_write(&nmgr_task_cbuf.n_b);
   1d64e:	4817      	ldr	r0, [pc, #92]	; (1d6ac <nmgr_handle_req+0x180>)
   1d650:	4798      	blx	r3
   1d652:	4607      	mov	r7, r0
   1d654:	e7ed      	b.n	1d632 <nmgr_handle_req+0x106>
            rc = MGMT_ERR_ENOENT;
   1d656:	2705      	movs	r7, #5
   1d658:	e78f      	b.n	1d57a <nmgr_handle_req+0x4e>
        rc = MGMT_ERR_EINVAL;
   1d65a:	2703      	movs	r7, #3
   1d65c:	e78d      	b.n	1d57a <nmgr_handle_req+0x4e>
            rc = MGMT_ERR_ENOENT;
   1d65e:	2705      	movs	r7, #5
        goto err;
   1d660:	e78b      	b.n	1d57a <nmgr_handle_req+0x4e>
   1d662:	4b12      	ldr	r3, [pc, #72]	; (1d6ac <nmgr_handle_req+0x180>)
   1d664:	68db      	ldr	r3, [r3, #12]
   1d666:	685b      	ldr	r3, [r3, #4]
    rsp_hdr->nh_len += cbor_encode_bytes_written(&nmgr_task_cbuf.n_b.encoder);
   1d668:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   1d66c:	4413      	add	r3, r2
   1d66e:	b29b      	uxth	r3, r3
   1d670:	f8a9 3002 	strh.w	r3, [r9, #2]
    rsp_hdr->nh_len = htons(rsp_hdr->nh_len);
   1d674:	021a      	lsls	r2, r3, #8
   1d676:	ea42 2313 	orr.w	r3, r2, r3, lsr #8
   1d67a:	f8a9 3002 	strh.w	r3, [r9, #2]
    rc = nmgr_rsp_tx(nt, &rsp, mtu);
   1d67e:	462a      	mov	r2, r5
   1d680:	a907      	add	r1, sp, #28
   1d682:	4630      	mov	r0, r6
   1d684:	f7ff ff02 	bl	1d48c <nmgr_rsp_tx>
    if (rc) {
   1d688:	4607      	mov	r7, r0
   1d68a:	b120      	cbz	r0, 1d696 <nmgr_handle_req+0x16a>
        if (rsp == NULL) {
   1d68c:	9b07      	ldr	r3, [sp, #28]
   1d68e:	2b00      	cmp	r3, #0
   1d690:	f47f af73 	bne.w	1d57a <nmgr_handle_req+0x4e>
   1d694:	e75d      	b.n	1d552 <nmgr_handle_req+0x26>
    os_mbuf_free_chain(rsp);
   1d696:	9807      	ldr	r0, [sp, #28]
   1d698:	f7ec ffc7 	bl	a62a <os_mbuf_free_chain>
    os_mbuf_free_chain(req);
   1d69c:	4620      	mov	r0, r4
   1d69e:	f7ec ffc4 	bl	a62a <os_mbuf_free_chain>
    return;
   1d6a2:	e75c      	b.n	1d55e <nmgr_handle_req+0x32>
        rc = MGMT_ERR_ENOENT;
   1d6a4:	2705      	movs	r7, #5
   1d6a6:	e768      	b.n	1d57a <nmgr_handle_req+0x4e>
        rc = MGMT_ERR_ENOMEM;
   1d6a8:	2702      	movs	r7, #2
   1d6aa:	e766      	b.n	1d57a <nmgr_handle_req+0x4e>
   1d6ac:	2000469c 	.word	0x2000469c
   1d6b0:	200046a8 	.word	0x200046a8

0001d6b4 <nmgr_process>:


static void
nmgr_process(struct nmgr_transport *nt)
{
   1d6b4:	b510      	push	{r4, lr}
   1d6b6:	4604      	mov	r4, r0
   1d6b8:	e002      	b.n	1d6c0 <nmgr_process+0xc>
        m = os_mqueue_get(&nt->nt_imq);
        if (!m) {
            break;
        }

        nmgr_handle_req(nt, m);
   1d6ba:	4620      	mov	r0, r4
   1d6bc:	f7ff ff36 	bl	1d52c <nmgr_handle_req>
        m = os_mqueue_get(&nt->nt_imq);
   1d6c0:	4620      	mov	r0, r4
   1d6c2:	f7ec ff48 	bl	a556 <os_mqueue_get>
        if (!m) {
   1d6c6:	4601      	mov	r1, r0
   1d6c8:	2800      	cmp	r0, #0
   1d6ca:	d1f6      	bne.n	1d6ba <nmgr_process+0x6>
    }
}
   1d6cc:	bd10      	pop	{r4, pc}

0001d6ce <nmgr_event_data_in>:

static void
nmgr_event_data_in(struct os_event *ev)
{
   1d6ce:	b508      	push	{r3, lr}
    nmgr_process(ev->ev_arg);
   1d6d0:	6880      	ldr	r0, [r0, #8]
   1d6d2:	f7ff ffef 	bl	1d6b4 <nmgr_process>
}
   1d6d6:	bd08      	pop	{r3, pc}

0001d6d8 <nmgr_cbuf_init>:
{
   1d6d8:	b508      	push	{r3, lr}
    memset(njb, 0, sizeof(*njb));
   1d6da:	2260      	movs	r2, #96	; 0x60
   1d6dc:	2100      	movs	r1, #0
   1d6de:	f7f0 f9fc 	bl	dada <memset>
}
   1d6e2:	2000      	movs	r0, #0
   1d6e4:	bd08      	pop	{r3, pc}
	...

0001d6e8 <mgmt_evq_get>:
}
   1d6e8:	4b01      	ldr	r3, [pc, #4]	; (1d6f0 <mgmt_evq_get+0x8>)
   1d6ea:	6818      	ldr	r0, [r3, #0]
   1d6ec:	4770      	bx	lr
   1d6ee:	bf00      	nop
   1d6f0:	20004698 	.word	0x20004698

0001d6f4 <mgmt_evq_set>:
    nmgr_evq = evq;
   1d6f4:	4b01      	ldr	r3, [pc, #4]	; (1d6fc <mgmt_evq_set+0x8>)
   1d6f6:	6018      	str	r0, [r3, #0]
}
   1d6f8:	4770      	bx	lr
   1d6fa:	bf00      	nop
   1d6fc:	20004698 	.word	0x20004698

0001d700 <nmgr_transport_init>:

int
nmgr_transport_init(struct nmgr_transport *nt,
        nmgr_transport_out_func_t output_func,
        nmgr_transport_get_mtu_func_t get_mtu_func)
{
   1d700:	b508      	push	{r3, lr}
    int rc;

    nt->nt_output = output_func;
   1d702:	6181      	str	r1, [r0, #24]
    nt->nt_get_mtu = get_mtu_func;
   1d704:	61c2      	str	r2, [r0, #28]

    rc = os_mqueue_init(&nt->nt_imq, nmgr_event_data_in, nt);
   1d706:	4602      	mov	r2, r0
   1d708:	4901      	ldr	r1, [pc, #4]	; (1d710 <nmgr_transport_init+0x10>)
   1d70a:	f7ec ff19 	bl	a540 <os_mqueue_init>
    }

    return (0);
err:
    return (rc);
}
   1d70e:	bd08      	pop	{r3, pc}
   1d710:	0001d6cf 	.word	0x0001d6cf

0001d714 <nmgr_rx_req>:
 *
 * @return                      0 on success; nonzero on failure.
 */
int
nmgr_rx_req(struct nmgr_transport *nt, struct os_mbuf *req)
{
   1d714:	b538      	push	{r3, r4, r5, lr}
   1d716:	4605      	mov	r5, r0
   1d718:	460c      	mov	r4, r1
    int rc;

    rc = os_mqueue_put(&nt->nt_imq, mgmt_evq_get(), req);
   1d71a:	f7ff ffe5 	bl	1d6e8 <mgmt_evq_get>
   1d71e:	4601      	mov	r1, r0
   1d720:	4622      	mov	r2, r4
   1d722:	4628      	mov	r0, r5
   1d724:	f7ec ff28 	bl	a578 <os_mqueue_put>
    if (rc != 0) {
   1d728:	4605      	mov	r5, r0
   1d72a:	b908      	cbnz	r0, 1d730 <nmgr_rx_req+0x1c>
        os_mbuf_free_chain(req);
    }

    return rc;
}
   1d72c:	4628      	mov	r0, r5
   1d72e:	bd38      	pop	{r3, r4, r5, pc}
        os_mbuf_free_chain(req);
   1d730:	4620      	mov	r0, r4
   1d732:	f7ec ff7a 	bl	a62a <os_mbuf_free_chain>
    return rc;
   1d736:	e7f9      	b.n	1d72c <nmgr_rx_req+0x18>

0001d738 <nmgr_pkg_init>:

void
nmgr_pkg_init(void)
{
   1d738:	b510      	push	{r4, lr}
   1d73a:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1d73c:	4b0d      	ldr	r3, [pc, #52]	; (1d774 <nmgr_pkg_init+0x3c>)
   1d73e:	781b      	ldrb	r3, [r3, #0]
   1d740:	b19b      	cbz	r3, 1d76a <nmgr_pkg_init+0x32>

    rc = nmgr_os_groups_register();
   1d742:	f000 fa79 	bl	1dc38 <nmgr_os_groups_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1d746:	b138      	cbz	r0, 1d758 <nmgr_pkg_init+0x20>
   1d748:	2000      	movs	r0, #0
   1d74a:	9000      	str	r0, [sp, #0]
   1d74c:	4b0a      	ldr	r3, [pc, #40]	; (1d778 <nmgr_pkg_init+0x40>)
   1d74e:	681c      	ldr	r4, [r3, #0]
   1d750:	4603      	mov	r3, r0
   1d752:	4602      	mov	r2, r0
   1d754:	4601      	mov	r1, r0
   1d756:	47a0      	blx	r4

    nmgr_cbuf_init(&nmgr_task_cbuf);
   1d758:	4808      	ldr	r0, [pc, #32]	; (1d77c <nmgr_pkg_init+0x44>)
   1d75a:	f7ff ffbd 	bl	1d6d8 <nmgr_cbuf_init>

    mgmt_evq_set(os_eventq_dflt_get());
   1d75e:	f7eb ffe3 	bl	9728 <os_eventq_dflt_get>
   1d762:	f7ff ffc7 	bl	1d6f4 <mgmt_evq_set>
}
   1d766:	b002      	add	sp, #8
   1d768:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1d76a:	461a      	mov	r2, r3
   1d76c:	4619      	mov	r1, r3
   1d76e:	4618      	mov	r0, r3
   1d770:	f7eb fbf8 	bl	8f64 <__assert_func>
   1d774:	20004538 	.word	0x20004538
   1d778:	2000064c 	.word	0x2000064c
   1d77c:	2000469c 	.word	0x2000469c

0001d780 <nmgr_reset>:
    os_reboot(HAL_RESET_REQUESTED);
}

static int
nmgr_reset(struct mgmt_cbuf *cb)
{
   1d780:	b570      	push	{r4, r5, r6, lr}
   1d782:	b084      	sub	sp, #16
   1d784:	4605      	mov	r5, r0
#if MYNEWT_VAL(LOG_SOFT_RESET)
    struct log_reboot_info info;
#endif
    int rc;

    os_callout_init(&nmgr_reset_callout, mgmt_evq_get(), nmgr_reset_tmo, NULL);
   1d786:	f7ff ffaf 	bl	1d6e8 <mgmt_evq_get>
   1d78a:	4601      	mov	r1, r0
   1d78c:	4e0e      	ldr	r6, [pc, #56]	; (1d7c8 <nmgr_reset+0x48>)
   1d78e:	2300      	movs	r3, #0
   1d790:	4a0e      	ldr	r2, [pc, #56]	; (1d7cc <nmgr_reset+0x4c>)
   1d792:	4630      	mov	r0, r6
   1d794:	f7eb fd74 	bl	9280 <os_callout_init>

#if MYNEWT_VAL(LOG_SOFT_RESET)
    info = (struct log_reboot_info) {
   1d798:	2306      	movs	r3, #6
   1d79a:	f88d 3000 	strb.w	r3, [sp]
   1d79e:	2400      	movs	r4, #0
   1d7a0:	9401      	str	r4, [sp, #4]
   1d7a2:	9402      	str	r4, [sp, #8]
   1d7a4:	9403      	str	r4, [sp, #12]
        .reason = HAL_RESET_REQUESTED,
        .file = NULL,
        .line = 0,
        .pc = 0,
    };
    log_reboot(&info);
   1d7a6:	4668      	mov	r0, sp
   1d7a8:	f002 f8d0 	bl	1f94c <log_reboot>
#endif
    os_callout_reset(&nmgr_reset_callout, OS_TICKS_PER_SEC / 4);
   1d7ac:	2120      	movs	r1, #32
   1d7ae:	4630      	mov	r0, r6
   1d7b0:	f7eb fd92 	bl	92d8 <os_callout_reset>

    rc = mgmt_cbuf_setoerr(cb, 0);
   1d7b4:	4621      	mov	r1, r4
   1d7b6:	4628      	mov	r0, r5
   1d7b8:	f7ff fe10 	bl	1d3dc <mgmt_cbuf_setoerr>
    if (rc != 0) {
   1d7bc:	b908      	cbnz	r0, 1d7c2 <nmgr_reset+0x42>
        return MGMT_ERR_EUNKNOWN;
    }

    return 0;
}
   1d7be:	b004      	add	sp, #16
   1d7c0:	bd70      	pop	{r4, r5, r6, pc}
        return MGMT_ERR_EUNKNOWN;
   1d7c2:	2001      	movs	r0, #1
   1d7c4:	e7fb      	b.n	1d7be <nmgr_reset+0x3e>
   1d7c6:	bf00      	nop
   1d7c8:	200046fc 	.word	0x200046fc
   1d7cc:	0001d7d1 	.word	0x0001d7d1

0001d7d0 <nmgr_reset_tmo>:
{
   1d7d0:	b508      	push	{r3, lr}
    os_reboot(HAL_RESET_REQUESTED);
   1d7d2:	2006      	movs	r0, #6
   1d7d4:	f7eb fd2f 	bl	9236 <os_reboot>
}
   1d7d8:	bd08      	pop	{r3, pc}
	...

0001d7dc <nmgr_datetime_set>:
{
   1d7dc:	b510      	push	{r4, lr}
   1d7de:	b0a6      	sub	sp, #152	; 0x98
   1d7e0:	4604      	mov	r4, r0
    const struct cbor_attr_t datetime_write_attr[] = {
   1d7e2:	2260      	movs	r2, #96	; 0x60
   1d7e4:	2100      	movs	r1, #0
   1d7e6:	4668      	mov	r0, sp
   1d7e8:	f7f0 f977 	bl	dada <memset>
   1d7ec:	4b12      	ldr	r3, [pc, #72]	; (1d838 <nmgr_datetime_set+0x5c>)
   1d7ee:	9300      	str	r3, [sp, #0]
   1d7f0:	2304      	movs	r3, #4
   1d7f2:	f88d 3004 	strb.w	r3, [sp, #4]
   1d7f6:	ab18      	add	r3, sp, #96	; 0x60
   1d7f8:	9302      	str	r3, [sp, #8]
   1d7fa:	2321      	movs	r3, #33	; 0x21
   1d7fc:	930a      	str	r3, [sp, #40]	; 0x28
    rc = cbor_read_object(&cb->it, datetime_write_attr);
   1d7fe:	4669      	mov	r1, sp
   1d800:	f104 001c 	add.w	r0, r4, #28
   1d804:	f7f5 fb0a 	bl	12e1c <cbor_read_object>
    if (rc) {
   1d808:	b978      	cbnz	r0, 1d82a <nmgr_datetime_set+0x4e>
    rc = datetime_parse(buf, &tv, &tz);
   1d80a:	aa21      	add	r2, sp, #132	; 0x84
   1d80c:	a922      	add	r1, sp, #136	; 0x88
   1d80e:	a818      	add	r0, sp, #96	; 0x60
   1d810:	f7f4 fc68 	bl	120e4 <datetime_parse>
    if (!rc) {
   1d814:	b960      	cbnz	r0, 1d830 <nmgr_datetime_set+0x54>
        rc = os_settimeofday(&tv, &tz);
   1d816:	a921      	add	r1, sp, #132	; 0x84
   1d818:	a822      	add	r0, sp, #136	; 0x88
   1d81a:	f7ec fd1d 	bl	a258 <os_settimeofday>
        if (rc) {
   1d81e:	b948      	cbnz	r0, 1d834 <nmgr_datetime_set+0x58>
    rc = mgmt_cbuf_setoerr(cb, 0);
   1d820:	2100      	movs	r1, #0
   1d822:	4620      	mov	r0, r4
   1d824:	f7ff fdda 	bl	1d3dc <mgmt_cbuf_setoerr>
    if (rc != 0) {
   1d828:	e000      	b.n	1d82c <nmgr_datetime_set+0x50>
        return MGMT_ERR_EINVAL;
   1d82a:	2003      	movs	r0, #3
}
   1d82c:	b026      	add	sp, #152	; 0x98
   1d82e:	bd10      	pop	{r4, pc}
        return MGMT_ERR_EINVAL;
   1d830:	2003      	movs	r0, #3
   1d832:	e7fb      	b.n	1d82c <nmgr_datetime_set+0x50>
          return MGMT_ERR_EINVAL;
   1d834:	2003      	movs	r0, #3
   1d836:	e7f9      	b.n	1d82c <nmgr_datetime_set+0x50>
   1d838:	00024b3c 	.word	0x00024b3c

0001d83c <nmgr_def_console_echo>:
{
   1d83c:	b510      	push	{r4, lr}
   1d83e:	b09a      	sub	sp, #104	; 0x68
   1d840:	4604      	mov	r4, r0
    long long int echo_on = 1;
   1d842:	2201      	movs	r2, #1
   1d844:	2300      	movs	r3, #0
   1d846:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    struct cbor_attr_t attrs[2] = {
   1d84a:	2260      	movs	r2, #96	; 0x60
   1d84c:	2100      	movs	r1, #0
   1d84e:	4668      	mov	r0, sp
   1d850:	f7f0 f943 	bl	dada <memset>
   1d854:	4b0f      	ldr	r3, [pc, #60]	; (1d894 <nmgr_def_console_echo+0x58>)
   1d856:	9300      	str	r3, [sp, #0]
   1d858:	2301      	movs	r3, #1
   1d85a:	f88d 3004 	strb.w	r3, [sp, #4]
   1d85e:	aa18      	add	r2, sp, #96	; 0x60
   1d860:	9202      	str	r2, [sp, #8]
   1d862:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    rc = cbor_read_object(&cb->it, attrs);
   1d866:	4669      	mov	r1, sp
   1d868:	f104 001c 	add.w	r0, r4, #28
   1d86c:	f7f5 fad6 	bl	12e1c <cbor_read_object>
    if (rc) {
   1d870:	b970      	cbnz	r0, 1d890 <nmgr_def_console_echo+0x54>
   1d872:	4604      	mov	r4, r0
    if (echo_on) {
   1d874:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1d876:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1d878:	4313      	orrs	r3, r2
   1d87a:	d005      	beq.n	1d888 <nmgr_def_console_echo+0x4c>
        console_echo(1);
   1d87c:	2001      	movs	r0, #1
   1d87e:	f7f1 fcd1 	bl	f224 <console_echo>
}
   1d882:	4620      	mov	r0, r4
   1d884:	b01a      	add	sp, #104	; 0x68
   1d886:	bd10      	pop	{r4, pc}
        console_echo(0);
   1d888:	2000      	movs	r0, #0
   1d88a:	f7f1 fccb 	bl	f224 <console_echo>
   1d88e:	e7f8      	b.n	1d882 <nmgr_def_console_echo+0x46>
        return MGMT_ERR_EINVAL;
   1d890:	2403      	movs	r4, #3
   1d892:	e7f6      	b.n	1d882 <nmgr_def_console_echo+0x46>
   1d894:	00024b48 	.word	0x00024b48

0001d898 <nmgr_def_echo>:
{
   1d898:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d89a:	b0b9      	sub	sp, #228	; 0xe4
   1d89c:	4604      	mov	r4, r0
    char echo_buf[128] = {'\0'};
   1d89e:	2500      	movs	r5, #0
   1d8a0:	9518      	str	r5, [sp, #96]	; 0x60
   1d8a2:	227c      	movs	r2, #124	; 0x7c
   1d8a4:	4629      	mov	r1, r5
   1d8a6:	a819      	add	r0, sp, #100	; 0x64
   1d8a8:	f7f0 f917 	bl	dada <memset>
    struct cbor_attr_t attrs[2] = {
   1d8ac:	2260      	movs	r2, #96	; 0x60
   1d8ae:	4629      	mov	r1, r5
   1d8b0:	4668      	mov	r0, sp
   1d8b2:	f7f0 f912 	bl	dada <memset>
   1d8b6:	4b14      	ldr	r3, [pc, #80]	; (1d908 <nmgr_def_echo+0x70>)
   1d8b8:	9300      	str	r3, [sp, #0]
   1d8ba:	2304      	movs	r3, #4
   1d8bc:	f88d 3004 	strb.w	r3, [sp, #4]
   1d8c0:	ad18      	add	r5, sp, #96	; 0x60
   1d8c2:	9502      	str	r5, [sp, #8]
   1d8c4:	2380      	movs	r3, #128	; 0x80
   1d8c6:	930a      	str	r3, [sp, #40]	; 0x28
   1d8c8:	2201      	movs	r2, #1
   1d8ca:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
    g_err |= cbor_encode_text_stringz(&cb->encoder, "r");
   1d8ce:	f104 070c 	add.w	r7, r4, #12
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1d8d2:	490e      	ldr	r1, [pc, #56]	; (1d90c <nmgr_def_echo+0x74>)
   1d8d4:	4638      	mov	r0, r7
   1d8d6:	f7f5 fc88 	bl	131ea <cbor_encode_text_string>
   1d8da:	4606      	mov	r6, r0
    g_err |= cbor_read_object(&cb->it, attrs);
   1d8dc:	4669      	mov	r1, sp
   1d8de:	f104 001c 	add.w	r0, r4, #28
   1d8e2:	f7f5 fa9b 	bl	12e1c <cbor_read_object>
   1d8e6:	4306      	orrs	r6, r0
    g_err |= cbor_encode_text_string(&cb->encoder, echo_buf, strlen(echo_buf));
   1d8e8:	4628      	mov	r0, r5
   1d8ea:	f7f0 f92d 	bl	db48 <strlen>
   1d8ee:	4602      	mov	r2, r0
   1d8f0:	4629      	mov	r1, r5
   1d8f2:	4638      	mov	r0, r7
   1d8f4:	f7f5 fc79 	bl	131ea <cbor_encode_text_string>
    if (g_err) {
   1d8f8:	ea56 0300 	orrs.w	r3, r6, r0
   1d8fc:	d102      	bne.n	1d904 <nmgr_def_echo+0x6c>
    return (0);
   1d8fe:	2000      	movs	r0, #0
}
   1d900:	b039      	add	sp, #228	; 0xe4
   1d902:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return MGMT_ERR_ENOMEM;
   1d904:	2002      	movs	r0, #2
   1d906:	e7fb      	b.n	1d900 <nmgr_def_echo+0x68>
   1d908:	00022e18 	.word	0x00022e18
   1d90c:	000245ac 	.word	0x000245ac

0001d910 <nmgr_datetime_get>:
{
   1d910:	b570      	push	{r4, r5, r6, lr}
   1d912:	b08e      	sub	sp, #56	; 0x38
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1d914:	f100 040c 	add.w	r4, r0, #12
   1d918:	2202      	movs	r2, #2
   1d91a:	491b      	ldr	r1, [pc, #108]	; (1d988 <nmgr_datetime_get+0x78>)
   1d91c:	4620      	mov	r0, r4
   1d91e:	f7f5 fc64 	bl	131ea <cbor_encode_text_string>
   1d922:	4605      	mov	r5, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1d924:	2200      	movs	r2, #0
   1d926:	2300      	movs	r3, #0
   1d928:	4620      	mov	r0, r4
   1d92a:	f7f5 fbe3 	bl	130f4 <cbor_encode_int>
   1d92e:	4305      	orrs	r5, r0
    rc = os_gettimeofday(&tv, &tz);
   1d930:	a909      	add	r1, sp, #36	; 0x24
   1d932:	a80a      	add	r0, sp, #40	; 0x28
   1d934:	f7ec fc44 	bl	a1c0 <os_gettimeofday>
    assert(rc == 0);
   1d938:	b9d8      	cbnz	r0, 1d972 <nmgr_datetime_get+0x62>
    rc = datetime_format(&tv, &tz, buf, DATETIME_BUFSIZE);
   1d93a:	2321      	movs	r3, #33	; 0x21
   1d93c:	466a      	mov	r2, sp
   1d93e:	a909      	add	r1, sp, #36	; 0x24
   1d940:	a80a      	add	r0, sp, #40	; 0x28
   1d942:	f7f4 fccf 	bl	122e4 <datetime_format>
    if (rc) {
   1d946:	4606      	mov	r6, r0
   1d948:	b9c8      	cbnz	r0, 1d97e <nmgr_datetime_get+0x6e>
   1d94a:	2208      	movs	r2, #8
   1d94c:	490f      	ldr	r1, [pc, #60]	; (1d98c <nmgr_datetime_get+0x7c>)
   1d94e:	4620      	mov	r0, r4
   1d950:	f7f5 fc4b 	bl	131ea <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "datetime");
   1d954:	4305      	orrs	r5, r0
   1d956:	4668      	mov	r0, sp
   1d958:	f7f0 f8f6 	bl	db48 <strlen>
   1d95c:	4602      	mov	r2, r0
   1d95e:	4669      	mov	r1, sp
   1d960:	4620      	mov	r0, r4
   1d962:	f7f5 fc42 	bl	131ea <cbor_encode_text_string>
    if (g_err) {
   1d966:	ea55 0300 	orrs.w	r3, r5, r0
   1d96a:	d10a      	bne.n	1d982 <nmgr_datetime_get+0x72>
}
   1d96c:	4630      	mov	r0, r6
   1d96e:	b00e      	add	sp, #56	; 0x38
   1d970:	bd70      	pop	{r4, r5, r6, pc}
    assert(rc == 0);
   1d972:	2300      	movs	r3, #0
   1d974:	461a      	mov	r2, r3
   1d976:	4619      	mov	r1, r3
   1d978:	4618      	mov	r0, r3
   1d97a:	f7eb faf3 	bl	8f64 <__assert_func>
    return (rc);
   1d97e:	2603      	movs	r6, #3
   1d980:	e7f4      	b.n	1d96c <nmgr_datetime_get+0x5c>
        return MGMT_ERR_ENOMEM;
   1d982:	2602      	movs	r6, #2
   1d984:	e7f2      	b.n	1d96c <nmgr_datetime_get+0x5c>
   1d986:	bf00      	nop
   1d988:	00023a48 	.word	0x00023a48
   1d98c:	00024b3c 	.word	0x00024b3c

0001d990 <nmgr_def_mpstat_read>:
{
   1d990:	b570      	push	{r4, r5, r6, lr}
   1d992:	b094      	sub	sp, #80	; 0x50
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1d994:	f100 060c 	add.w	r6, r0, #12
   1d998:	2202      	movs	r2, #2
   1d99a:	4939      	ldr	r1, [pc, #228]	; (1da80 <nmgr_def_mpstat_read+0xf0>)
   1d99c:	4630      	mov	r0, r6
   1d99e:	f7f5 fc24 	bl	131ea <cbor_encode_text_string>
   1d9a2:	4604      	mov	r4, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1d9a4:	2200      	movs	r2, #0
   1d9a6:	2300      	movs	r3, #0
   1d9a8:	4630      	mov	r0, r6
   1d9aa:	f7f5 fba3 	bl	130f4 <cbor_encode_int>
   1d9ae:	4304      	orrs	r4, r0
   1d9b0:	2206      	movs	r2, #6
   1d9b2:	4934      	ldr	r1, [pc, #208]	; (1da84 <nmgr_def_mpstat_read+0xf4>)
   1d9b4:	4630      	mov	r0, r6
   1d9b6:	f7f5 fc18 	bl	131ea <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "mpools");
   1d9ba:	4304      	orrs	r4, r0
    g_err |= cbor_encoder_create_map(&cb->encoder, &pools,
   1d9bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d9c0:	a904      	add	r1, sp, #16
   1d9c2:	4630      	mov	r0, r6
   1d9c4:	f7f5 fc1d 	bl	13202 <cbor_encoder_create_map>
   1d9c8:	4304      	orrs	r4, r0
    prev_mp = NULL;
   1d9ca:	2500      	movs	r5, #0
   1d9cc:	e044      	b.n	1da58 <nmgr_def_mpstat_read+0xc8>
   1d9ce:	a80c      	add	r0, sp, #48	; 0x30
   1d9d0:	f7f0 f8ba 	bl	db48 <strlen>
   1d9d4:	4602      	mov	r2, r0
   1d9d6:	a90c      	add	r1, sp, #48	; 0x30
   1d9d8:	a804      	add	r0, sp, #16
   1d9da:	f7f5 fc06 	bl	131ea <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&pools, omi.omi_name);
   1d9de:	4304      	orrs	r4, r0
        g_err |= cbor_encoder_create_map(&pools, &pool, CborIndefiniteLength);
   1d9e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d9e4:	4669      	mov	r1, sp
   1d9e6:	a804      	add	r0, sp, #16
   1d9e8:	f7f5 fc0b 	bl	13202 <cbor_encoder_create_map>
   1d9ec:	4304      	orrs	r4, r0
   1d9ee:	2206      	movs	r2, #6
   1d9f0:	4925      	ldr	r1, [pc, #148]	; (1da88 <nmgr_def_mpstat_read+0xf8>)
   1d9f2:	4668      	mov	r0, sp
   1d9f4:	f7f5 fbf9 	bl	131ea <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&pool, "blksiz");
   1d9f8:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&pool, omi.omi_block_size);
   1d9fa:	9a08      	ldr	r2, [sp, #32]
   1d9fc:	17d3      	asrs	r3, r2, #31
   1d9fe:	4668      	mov	r0, sp
   1da00:	f7f5 fb38 	bl	13074 <cbor_encode_uint>
   1da04:	4304      	orrs	r4, r0
   1da06:	2205      	movs	r2, #5
   1da08:	4920      	ldr	r1, [pc, #128]	; (1da8c <nmgr_def_mpstat_read+0xfc>)
   1da0a:	4668      	mov	r0, sp
   1da0c:	f7f5 fbed 	bl	131ea <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&pool, "nblks");
   1da10:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&pool, omi.omi_num_blocks);
   1da12:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1da14:	17d3      	asrs	r3, r2, #31
   1da16:	4668      	mov	r0, sp
   1da18:	f7f5 fb2c 	bl	13074 <cbor_encode_uint>
   1da1c:	4304      	orrs	r4, r0
   1da1e:	2205      	movs	r2, #5
   1da20:	491b      	ldr	r1, [pc, #108]	; (1da90 <nmgr_def_mpstat_read+0x100>)
   1da22:	4668      	mov	r0, sp
   1da24:	f7f5 fbe1 	bl	131ea <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&pool, "nfree");
   1da28:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&pool, omi.omi_num_free);
   1da2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1da2c:	17d3      	asrs	r3, r2, #31
   1da2e:	4668      	mov	r0, sp
   1da30:	f7f5 fb20 	bl	13074 <cbor_encode_uint>
   1da34:	4304      	orrs	r4, r0
   1da36:	2203      	movs	r2, #3
   1da38:	4916      	ldr	r1, [pc, #88]	; (1da94 <nmgr_def_mpstat_read+0x104>)
   1da3a:	4668      	mov	r0, sp
   1da3c:	f7f5 fbd5 	bl	131ea <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&pool, "min");
   1da40:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&pool, omi.omi_min_free);
   1da42:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1da44:	17d3      	asrs	r3, r2, #31
   1da46:	4668      	mov	r0, sp
   1da48:	f7f5 fb14 	bl	13074 <cbor_encode_uint>
   1da4c:	4304      	orrs	r4, r0
        g_err |= cbor_encoder_close_container(&pools, &pool);
   1da4e:	4669      	mov	r1, sp
   1da50:	a804      	add	r0, sp, #16
   1da52:	f7f5 fbe4 	bl	1321e <cbor_encoder_close_container>
   1da56:	4304      	orrs	r4, r0
        prev_mp = os_mempool_info_get_next(prev_mp, &omi);
   1da58:	a908      	add	r1, sp, #32
   1da5a:	4628      	mov	r0, r5
   1da5c:	f7eb feec 	bl	9838 <os_mempool_info_get_next>
        if (prev_mp == NULL) {
   1da60:	4605      	mov	r5, r0
   1da62:	2800      	cmp	r0, #0
   1da64:	d1b3      	bne.n	1d9ce <nmgr_def_mpstat_read+0x3e>
    g_err |= cbor_encoder_close_container(&cb->encoder, &pools);
   1da66:	a904      	add	r1, sp, #16
   1da68:	4630      	mov	r0, r6
   1da6a:	f7f5 fbd8 	bl	1321e <cbor_encoder_close_container>
    if (g_err) {
   1da6e:	ea54 0300 	orrs.w	r3, r4, r0
   1da72:	d102      	bne.n	1da7a <nmgr_def_mpstat_read+0xea>
    return (0);
   1da74:	2000      	movs	r0, #0
}
   1da76:	b014      	add	sp, #80	; 0x50
   1da78:	bd70      	pop	{r4, r5, r6, pc}
        return MGMT_ERR_ENOMEM;
   1da7a:	2002      	movs	r0, #2
   1da7c:	e7fb      	b.n	1da76 <nmgr_def_mpstat_read+0xe6>
   1da7e:	bf00      	nop
   1da80:	00023a48 	.word	0x00023a48
   1da84:	00024b50 	.word	0x00024b50
   1da88:	00024b58 	.word	0x00024b58
   1da8c:	00024b60 	.word	0x00024b60
   1da90:	00024b68 	.word	0x00024b68
   1da94:	000236bc 	.word	0x000236bc

0001da98 <nmgr_def_taskstat_read>:
{
   1da98:	b5f0      	push	{r4, r5, r6, r7, lr}
   1da9a:	b097      	sub	sp, #92	; 0x5c
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1da9c:	f100 060c 	add.w	r6, r0, #12
   1daa0:	2202      	movs	r2, #2
   1daa2:	495a      	ldr	r1, [pc, #360]	; (1dc0c <nmgr_def_taskstat_read+0x174>)
   1daa4:	4630      	mov	r0, r6
   1daa6:	f7f5 fba0 	bl	131ea <cbor_encode_text_string>
   1daaa:	4604      	mov	r4, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1daac:	2200      	movs	r2, #0
   1daae:	2300      	movs	r3, #0
   1dab0:	4630      	mov	r0, r6
   1dab2:	f7f5 fb1f 	bl	130f4 <cbor_encode_int>
   1dab6:	4304      	orrs	r4, r0
   1dab8:	2205      	movs	r2, #5
   1daba:	4955      	ldr	r1, [pc, #340]	; (1dc10 <nmgr_def_taskstat_read+0x178>)
   1dabc:	4630      	mov	r0, r6
   1dabe:	f7f5 fb94 	bl	131ea <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "tasks");
   1dac2:	4304      	orrs	r4, r0
    g_err |= cbor_encoder_create_map(&cb->encoder, &tasks,
   1dac4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1dac8:	a904      	add	r1, sp, #16
   1daca:	4630      	mov	r0, r6
   1dacc:	f7f5 fb99 	bl	13202 <cbor_encoder_create_map>
   1dad0:	4304      	orrs	r4, r0
    prev_task = NULL;
   1dad2:	2500      	movs	r5, #0
   1dad4:	e086      	b.n	1dbe4 <nmgr_def_taskstat_read+0x14c>
   1dad6:	a80e      	add	r0, sp, #56	; 0x38
   1dad8:	f7f0 f836 	bl	db48 <strlen>
   1dadc:	4602      	mov	r2, r0
   1dade:	a90e      	add	r1, sp, #56	; 0x38
   1dae0:	a804      	add	r0, sp, #16
   1dae2:	f7f5 fb82 	bl	131ea <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&tasks, oti.oti_name);
   1dae6:	4304      	orrs	r4, r0
        g_err |= cbor_encoder_create_map(&tasks, &task, CborIndefiniteLength);
   1dae8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1daec:	4669      	mov	r1, sp
   1daee:	a804      	add	r0, sp, #16
   1daf0:	f7f5 fb87 	bl	13202 <cbor_encoder_create_map>
   1daf4:	4304      	orrs	r4, r0
   1daf6:	2204      	movs	r2, #4
   1daf8:	4946      	ldr	r1, [pc, #280]	; (1dc14 <nmgr_def_taskstat_read+0x17c>)
   1dafa:	4668      	mov	r0, sp
   1dafc:	f7f5 fb75 	bl	131ea <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&task, "prio");
   1db00:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_prio);
   1db02:	2700      	movs	r7, #0
   1db04:	f89d 2020 	ldrb.w	r2, [sp, #32]
   1db08:	463b      	mov	r3, r7
   1db0a:	4668      	mov	r0, sp
   1db0c:	f7f5 fab2 	bl	13074 <cbor_encode_uint>
   1db10:	4304      	orrs	r4, r0
   1db12:	2203      	movs	r2, #3
   1db14:	4940      	ldr	r1, [pc, #256]	; (1dc18 <nmgr_def_taskstat_read+0x180>)
   1db16:	4668      	mov	r0, sp
   1db18:	f7f5 fb67 	bl	131ea <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&task, "tid");
   1db1c:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_taskid);
   1db1e:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   1db22:	463b      	mov	r3, r7
   1db24:	4668      	mov	r0, sp
   1db26:	f7f5 faa5 	bl	13074 <cbor_encode_uint>
   1db2a:	4304      	orrs	r4, r0
   1db2c:	2205      	movs	r2, #5
   1db2e:	493b      	ldr	r1, [pc, #236]	; (1dc1c <nmgr_def_taskstat_read+0x184>)
   1db30:	4668      	mov	r0, sp
   1db32:	f7f5 fb5a 	bl	131ea <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&task, "state");
   1db36:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_state);
   1db38:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   1db3c:	463b      	mov	r3, r7
   1db3e:	4668      	mov	r0, sp
   1db40:	f7f5 fa98 	bl	13074 <cbor_encode_uint>
   1db44:	4304      	orrs	r4, r0
   1db46:	2206      	movs	r2, #6
   1db48:	4935      	ldr	r1, [pc, #212]	; (1dc20 <nmgr_def_taskstat_read+0x188>)
   1db4a:	4668      	mov	r0, sp
   1db4c:	f7f5 fb4d 	bl	131ea <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&task, "stkuse");
   1db50:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_stkusage);
   1db52:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   1db56:	463b      	mov	r3, r7
   1db58:	4668      	mov	r0, sp
   1db5a:	f7f5 fa8b 	bl	13074 <cbor_encode_uint>
   1db5e:	4304      	orrs	r4, r0
   1db60:	2206      	movs	r2, #6
   1db62:	4930      	ldr	r1, [pc, #192]	; (1dc24 <nmgr_def_taskstat_read+0x18c>)
   1db64:	4668      	mov	r0, sp
   1db66:	f7f5 fb40 	bl	131ea <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&task, "stksiz");
   1db6a:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_stksize);
   1db6c:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
   1db70:	463b      	mov	r3, r7
   1db72:	4668      	mov	r0, sp
   1db74:	f7f5 fa7e 	bl	13074 <cbor_encode_uint>
   1db78:	4304      	orrs	r4, r0
   1db7a:	2206      	movs	r2, #6
   1db7c:	492a      	ldr	r1, [pc, #168]	; (1dc28 <nmgr_def_taskstat_read+0x190>)
   1db7e:	4668      	mov	r0, sp
   1db80:	f7f5 fb33 	bl	131ea <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&task, "cswcnt");
   1db84:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_cswcnt);
   1db86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1db88:	463b      	mov	r3, r7
   1db8a:	4668      	mov	r0, sp
   1db8c:	f7f5 fa72 	bl	13074 <cbor_encode_uint>
   1db90:	4304      	orrs	r4, r0
   1db92:	2207      	movs	r2, #7
   1db94:	4925      	ldr	r1, [pc, #148]	; (1dc2c <nmgr_def_taskstat_read+0x194>)
   1db96:	4668      	mov	r0, sp
   1db98:	f7f5 fb27 	bl	131ea <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&task, "runtime");
   1db9c:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_runtime);
   1db9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1dba0:	463b      	mov	r3, r7
   1dba2:	4668      	mov	r0, sp
   1dba4:	f7f5 fa66 	bl	13074 <cbor_encode_uint>
   1dba8:	4304      	orrs	r4, r0
   1dbaa:	220c      	movs	r2, #12
   1dbac:	4920      	ldr	r1, [pc, #128]	; (1dc30 <nmgr_def_taskstat_read+0x198>)
   1dbae:	4668      	mov	r0, sp
   1dbb0:	f7f5 fb1b 	bl	131ea <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&task, "last_checkin");
   1dbb4:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_last_checkin);
   1dbb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1dbb8:	463b      	mov	r3, r7
   1dbba:	4668      	mov	r0, sp
   1dbbc:	f7f5 fa5a 	bl	13074 <cbor_encode_uint>
   1dbc0:	4304      	orrs	r4, r0
   1dbc2:	220c      	movs	r2, #12
   1dbc4:	491b      	ldr	r1, [pc, #108]	; (1dc34 <nmgr_def_taskstat_read+0x19c>)
   1dbc6:	4668      	mov	r0, sp
   1dbc8:	f7f5 fb0f 	bl	131ea <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&task, "next_checkin");
   1dbcc:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_next_checkin);
   1dbce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1dbd0:	463b      	mov	r3, r7
   1dbd2:	4668      	mov	r0, sp
   1dbd4:	f7f5 fa4e 	bl	13074 <cbor_encode_uint>
   1dbd8:	4304      	orrs	r4, r0
        g_err |= cbor_encoder_close_container(&tasks, &task);
   1dbda:	4669      	mov	r1, sp
   1dbdc:	a804      	add	r0, sp, #16
   1dbde:	f7f5 fb1e 	bl	1321e <cbor_encoder_close_container>
   1dbe2:	4304      	orrs	r4, r0
        prev_task = os_task_info_get_next(prev_task, &oti);
   1dbe4:	a908      	add	r1, sp, #32
   1dbe6:	4628      	mov	r0, r5
   1dbe8:	f7ec fa06 	bl	9ff8 <os_task_info_get_next>
        if (prev_task == NULL) {
   1dbec:	4605      	mov	r5, r0
   1dbee:	2800      	cmp	r0, #0
   1dbf0:	f47f af71 	bne.w	1dad6 <nmgr_def_taskstat_read+0x3e>
    g_err |= cbor_encoder_close_container(&cb->encoder, &tasks);
   1dbf4:	a904      	add	r1, sp, #16
   1dbf6:	4630      	mov	r0, r6
   1dbf8:	f7f5 fb11 	bl	1321e <cbor_encoder_close_container>
    if (g_err) {
   1dbfc:	ea54 0300 	orrs.w	r3, r4, r0
   1dc00:	d102      	bne.n	1dc08 <nmgr_def_taskstat_read+0x170>
    return (0);
   1dc02:	2000      	movs	r0, #0
}
   1dc04:	b017      	add	sp, #92	; 0x5c
   1dc06:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return MGMT_ERR_ENOMEM;
   1dc08:	2002      	movs	r0, #2
   1dc0a:	e7fb      	b.n	1dc04 <nmgr_def_taskstat_read+0x16c>
   1dc0c:	00023a48 	.word	0x00023a48
   1dc10:	0002386c 	.word	0x0002386c
   1dc14:	00024b70 	.word	0x00024b70
   1dc18:	000237a4 	.word	0x000237a4
   1dc1c:	00024b78 	.word	0x00024b78
   1dc20:	00023788 	.word	0x00023788
   1dc24:	00024b80 	.word	0x00024b80
   1dc28:	00024b88 	.word	0x00024b88
   1dc2c:	0002379c 	.word	0x0002379c
   1dc30:	00024b90 	.word	0x00024b90
   1dc34:	00024ba0 	.word	0x00024ba0

0001dc38 <nmgr_os_groups_register>:

int
nmgr_os_groups_register(void)
{
   1dc38:	b508      	push	{r3, lr}
    return mgmt_group_register(&nmgr_def_group);
   1dc3a:	4802      	ldr	r0, [pc, #8]	; (1dc44 <nmgr_os_groups_register+0xc>)
   1dc3c:	f7ff fbac 	bl	1d398 <mgmt_group_register>
}
   1dc40:	bd08      	pop	{r3, pc}
   1dc42:	bf00      	nop
   1dc44:	20000f58 	.word	0x20000f58

0001dc48 <nmgr_shell_get_mtu>:

static uint16_t
nmgr_shell_get_mtu(struct os_mbuf *m)
{
    return MGMT_MAX_MTU;
}
   1dc48:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1dc4c:	4770      	bx	lr
	...

0001dc50 <nmgr_shell_in>:
    return (rc);
}

static int
nmgr_shell_in(struct os_mbuf *m, void *arg)
{
   1dc50:	b508      	push	{r3, lr}
   1dc52:	4601      	mov	r1, r0
    return nmgr_rx_req(&nmgr_shell_transport, m);
   1dc54:	4801      	ldr	r0, [pc, #4]	; (1dc5c <nmgr_shell_in+0xc>)
   1dc56:	f7ff fd5d 	bl	1d714 <nmgr_rx_req>
}
   1dc5a:	bd08      	pop	{r3, pc}
   1dc5c:	2000471c 	.word	0x2000471c

0001dc60 <nmgr_shell_out>:
{
   1dc60:	b538      	push	{r3, r4, r5, lr}
   1dc62:	460c      	mov	r4, r1
    rc = shell_nlip_output(m);
   1dc64:	4608      	mov	r0, r1
   1dc66:	f7f2 ff91 	bl	10b8c <shell_nlip_output>
    if (rc != 0) {
   1dc6a:	4605      	mov	r5, r0
   1dc6c:	b908      	cbnz	r0, 1dc72 <nmgr_shell_out+0x12>
}
   1dc6e:	4628      	mov	r0, r5
   1dc70:	bd38      	pop	{r3, r4, r5, pc}
    os_mbuf_free_chain(m);
   1dc72:	4620      	mov	r0, r4
   1dc74:	f7ec fcd9 	bl	a62a <os_mbuf_free_chain>
    return (rc);
   1dc78:	e7f9      	b.n	1dc6e <nmgr_shell_out+0xe>
	...

0001dc7c <nmgr_shell_pkg_init>:

void
nmgr_shell_pkg_init(void)
{
   1dc7c:	b508      	push	{r3, lr}
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1dc7e:	4b10      	ldr	r3, [pc, #64]	; (1dcc0 <nmgr_shell_pkg_init+0x44>)
   1dc80:	781b      	ldrb	r3, [r3, #0]
   1dc82:	b15b      	cbz	r3, 1dc9c <nmgr_shell_pkg_init+0x20>

    rc = nmgr_transport_init(&nmgr_shell_transport, nmgr_shell_out,
   1dc84:	4a0f      	ldr	r2, [pc, #60]	; (1dcc4 <nmgr_shell_pkg_init+0x48>)
   1dc86:	4910      	ldr	r1, [pc, #64]	; (1dcc8 <nmgr_shell_pkg_init+0x4c>)
   1dc88:	4810      	ldr	r0, [pc, #64]	; (1dccc <nmgr_shell_pkg_init+0x50>)
   1dc8a:	f7ff fd39 	bl	1d700 <nmgr_transport_init>
      nmgr_shell_get_mtu);
    assert(rc == 0);
   1dc8e:	b950      	cbnz	r0, 1dca6 <nmgr_shell_pkg_init+0x2a>

    rc = shell_nlip_input_register(nmgr_shell_in, &nmgr_shell_transport);
   1dc90:	490e      	ldr	r1, [pc, #56]	; (1dccc <nmgr_shell_pkg_init+0x50>)
   1dc92:	480f      	ldr	r0, [pc, #60]	; (1dcd0 <nmgr_shell_pkg_init+0x54>)
   1dc94:	f7f2 ff70 	bl	10b78 <shell_nlip_input_register>
    assert(rc == 0);
   1dc98:	b958      	cbnz	r0, 1dcb2 <nmgr_shell_pkg_init+0x36>
}
   1dc9a:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1dc9c:	461a      	mov	r2, r3
   1dc9e:	4619      	mov	r1, r3
   1dca0:	4618      	mov	r0, r3
   1dca2:	f7eb f95f 	bl	8f64 <__assert_func>
    assert(rc == 0);
   1dca6:	2300      	movs	r3, #0
   1dca8:	461a      	mov	r2, r3
   1dcaa:	4619      	mov	r1, r3
   1dcac:	4618      	mov	r0, r3
   1dcae:	f7eb f959 	bl	8f64 <__assert_func>
    assert(rc == 0);
   1dcb2:	2300      	movs	r3, #0
   1dcb4:	461a      	mov	r2, r3
   1dcb6:	4619      	mov	r1, r3
   1dcb8:	4618      	mov	r0, r3
   1dcba:	f7eb f953 	bl	8f64 <__assert_func>
   1dcbe:	bf00      	nop
   1dcc0:	20004538 	.word	0x20004538
   1dcc4:	0001dc49 	.word	0x0001dc49
   1dcc8:	0001dc61 	.word	0x0001dc61
   1dccc:	2000471c 	.word	0x2000471c
   1dcd0:	0001dc51 	.word	0x0001dc51

0001dcd4 <config_init_fcb>:
    .cf_fcb.f_sectors = conf_fcb_area,
};

static void
config_init_fcb(void)
{
   1dcd4:	b510      	push	{r4, lr}
   1dcd6:	b084      	sub	sp, #16
    int cnt;
    int rc;

    rc = flash_area_to_sectors(MYNEWT_VAL(CONFIG_FCB_FLASH_AREA), &cnt, NULL);
   1dcd8:	2200      	movs	r2, #0
   1dcda:	a903      	add	r1, sp, #12
   1dcdc:	2011      	movs	r0, #17
   1dcde:	f000 fa8f 	bl	1e200 <flash_area_to_sectors>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1dce2:	b138      	cbz	r0, 1dcf4 <config_init_fcb+0x20>
   1dce4:	2000      	movs	r0, #0
   1dce6:	9000      	str	r0, [sp, #0]
   1dce8:	4b26      	ldr	r3, [pc, #152]	; (1dd84 <config_init_fcb+0xb0>)
   1dcea:	681c      	ldr	r4, [r3, #0]
   1dcec:	4603      	mov	r3, r0
   1dcee:	4602      	mov	r2, r0
   1dcf0:	4601      	mov	r1, r0
   1dcf2:	47a0      	blx	r4
    SYSINIT_PANIC_ASSERT(
   1dcf4:	9b03      	ldr	r3, [sp, #12]
   1dcf6:	2b09      	cmp	r3, #9
   1dcf8:	d907      	bls.n	1dd0a <config_init_fcb+0x36>
   1dcfa:	2000      	movs	r0, #0
   1dcfc:	9000      	str	r0, [sp, #0]
   1dcfe:	4b21      	ldr	r3, [pc, #132]	; (1dd84 <config_init_fcb+0xb0>)
   1dd00:	681c      	ldr	r4, [r3, #0]
   1dd02:	4603      	mov	r3, r0
   1dd04:	4602      	mov	r2, r0
   1dd06:	4601      	mov	r1, r0
   1dd08:	47a0      	blx	r4
        cnt <= sizeof(conf_fcb_area) / sizeof(conf_fcb_area[0]));
    flash_area_to_sectors(
   1dd0a:	4a1f      	ldr	r2, [pc, #124]	; (1dd88 <config_init_fcb+0xb4>)
   1dd0c:	a903      	add	r1, sp, #12
   1dd0e:	2011      	movs	r0, #17
   1dd10:	f000 fa76 	bl	1e200 <flash_area_to_sectors>
        MYNEWT_VAL(CONFIG_FCB_FLASH_AREA), &cnt, conf_fcb_area);

    config_init_conf_fcb.cf_fcb.f_sector_cnt = cnt;
   1dd14:	481d      	ldr	r0, [pc, #116]	; (1dd8c <config_init_fcb+0xb8>)
   1dd16:	9b03      	ldr	r3, [sp, #12]
   1dd18:	7343      	strb	r3, [r0, #13]

    rc = conf_fcb_src(&config_init_conf_fcb);
   1dd1a:	f000 f933 	bl	1df84 <conf_fcb_src>
    if (rc) {
   1dd1e:	4603      	mov	r3, r0
   1dd20:	b1c0      	cbz	r0, 1dd54 <config_init_fcb+0x80>
        for (cnt = 0;
   1dd22:	2300      	movs	r3, #0
   1dd24:	9303      	str	r3, [sp, #12]
   1dd26:	e00c      	b.n	1dd42 <config_init_fcb+0x6e>
             cnt < config_init_conf_fcb.cf_fcb.f_sector_cnt;
             cnt++) {

            flash_area_erase(&conf_fcb_area[cnt], 0,
   1dd28:	4817      	ldr	r0, [pc, #92]	; (1dd88 <config_init_fcb+0xb4>)
   1dd2a:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
   1dd2e:	eb00 038c 	add.w	r3, r0, ip, lsl #2
   1dd32:	689a      	ldr	r2, [r3, #8]
   1dd34:	2100      	movs	r1, #0
   1dd36:	4618      	mov	r0, r3
   1dd38:	f000 fac8 	bl	1e2cc <flash_area_erase>
             cnt++) {
   1dd3c:	9b03      	ldr	r3, [sp, #12]
   1dd3e:	3301      	adds	r3, #1
   1dd40:	9303      	str	r3, [sp, #12]
             cnt < config_init_conf_fcb.cf_fcb.f_sector_cnt;
   1dd42:	4b12      	ldr	r3, [pc, #72]	; (1dd8c <config_init_fcb+0xb8>)
   1dd44:	7b5a      	ldrb	r2, [r3, #13]
   1dd46:	9b03      	ldr	r3, [sp, #12]
        for (cnt = 0;
   1dd48:	429a      	cmp	r2, r3
   1dd4a:	dced      	bgt.n	1dd28 <config_init_fcb+0x54>
                             conf_fcb_area[cnt].fa_size);
        }
        rc = conf_fcb_src(&config_init_conf_fcb);
   1dd4c:	480f      	ldr	r0, [pc, #60]	; (1dd8c <config_init_fcb+0xb8>)
   1dd4e:	f000 f919 	bl	1df84 <conf_fcb_src>
   1dd52:	4603      	mov	r3, r0
    }
    SYSINIT_PANIC_ASSERT(rc == 0);
   1dd54:	b13b      	cbz	r3, 1dd66 <config_init_fcb+0x92>
   1dd56:	2000      	movs	r0, #0
   1dd58:	9000      	str	r0, [sp, #0]
   1dd5a:	4b0a      	ldr	r3, [pc, #40]	; (1dd84 <config_init_fcb+0xb0>)
   1dd5c:	681c      	ldr	r4, [r3, #0]
   1dd5e:	4603      	mov	r3, r0
   1dd60:	4602      	mov	r2, r0
   1dd62:	4601      	mov	r1, r0
   1dd64:	47a0      	blx	r4
    rc = conf_fcb_dst(&config_init_conf_fcb);
   1dd66:	4809      	ldr	r0, [pc, #36]	; (1dd8c <config_init_fcb+0xb8>)
   1dd68:	f000 f938 	bl	1dfdc <conf_fcb_dst>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1dd6c:	b138      	cbz	r0, 1dd7e <config_init_fcb+0xaa>
   1dd6e:	2000      	movs	r0, #0
   1dd70:	9000      	str	r0, [sp, #0]
   1dd72:	4b04      	ldr	r3, [pc, #16]	; (1dd84 <config_init_fcb+0xb0>)
   1dd74:	681c      	ldr	r4, [r3, #0]
   1dd76:	4603      	mov	r3, r0
   1dd78:	4602      	mov	r2, r0
   1dd7a:	4601      	mov	r1, r0
   1dd7c:	47a0      	blx	r4
}
   1dd7e:	b004      	add	sp, #16
   1dd80:	bd10      	pop	{r4, pc}
   1dd82:	bf00      	nop
   1dd84:	2000064c 	.word	0x2000064c
   1dd88:	2000473c 	.word	0x2000473c
   1dd8c:	20000f64 	.word	0x20000f64

0001dd90 <config_pkg_init>:
#endif
#endif

void
config_pkg_init(void)
{
   1dd90:	b508      	push	{r3, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1dd92:	4b06      	ldr	r3, [pc, #24]	; (1ddac <config_pkg_init+0x1c>)
   1dd94:	781b      	ldrb	r3, [r3, #0]
   1dd96:	b123      	cbz	r3, 1dda2 <config_pkg_init+0x12>

    conf_init();
   1dd98:	f7f0 fe64 	bl	ea64 <conf_init>

#if MYNEWT_VAL(CONFIG_AUTO_INIT)
#if MYNEWT_VAL(CONFIG_NFFS)
    config_init_fs();
#elif MYNEWT_VAL(CONFIG_FCB)
    config_init_fcb();
   1dd9c:	f7ff ff9a 	bl	1dcd4 <config_init_fcb>
#endif
#endif
}
   1dda0:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1dda2:	461a      	mov	r2, r3
   1dda4:	4619      	mov	r1, r3
   1dda6:	4618      	mov	r0, r3
   1dda8:	f7eb f8dc 	bl	8f64 <__assert_func>
   1ddac:	20004538 	.word	0x20004538

0001ddb0 <config_pkg_init_stage2>:
     */
#if MYNEWT_VAL(CONFIG_NFFS)
    fs_mkdir(MYNEWT_VAL(CONFIG_NFFS_DIR));
#endif
#endif
}
   1ddb0:	4770      	bx	lr
	...

0001ddb4 <conf_fcb_load>:
    return 0;
}

static int
conf_fcb_load(struct conf_store *cs, conf_store_load_cb cb, void *cb_arg)
{
   1ddb4:	b500      	push	{lr}
   1ddb6:	b083      	sub	sp, #12
    struct conf_fcb *cf = (struct conf_fcb *)cs;
    struct conf_fcb_load_cb_arg arg;
    int rc;

    arg.cb = cb;
   1ddb8:	9100      	str	r1, [sp, #0]
    arg.cb_arg = cb_arg;
   1ddba:	9201      	str	r2, [sp, #4]
    rc = fcb_walk(&cf->cf_fcb, 0, conf_fcb_load_cb, &arg);
   1ddbc:	466b      	mov	r3, sp
   1ddbe:	4a05      	ldr	r2, [pc, #20]	; (1ddd4 <conf_fcb_load+0x20>)
   1ddc0:	2100      	movs	r1, #0
   1ddc2:	3008      	adds	r0, #8
   1ddc4:	f002 ff40 	bl	20c48 <fcb_walk>
    if (rc) {
   1ddc8:	b910      	cbnz	r0, 1ddd0 <conf_fcb_load+0x1c>
        return OS_EINVAL;
    }
    return OS_OK;
}
   1ddca:	b003      	add	sp, #12
   1ddcc:	f85d fb04 	ldr.w	pc, [sp], #4
        return OS_EINVAL;
   1ddd0:	2002      	movs	r0, #2
   1ddd2:	e7fa      	b.n	1ddca <conf_fcb_load+0x16>
   1ddd4:	0001ddd9 	.word	0x0001ddd9

0001ddd8 <conf_fcb_load_cb>:
{
   1ddd8:	b530      	push	{r4, r5, lr}
   1ddda:	b0db      	sub	sp, #364	; 0x16c
   1dddc:	460d      	mov	r5, r1
    len = loc->fe_data_len;
   1ddde:	8984      	ldrh	r4, [r0, #12]
    if (len >= sizeof(buf)) {
   1dde0:	f5b4 7fb0 	cmp.w	r4, #352	; 0x160
   1dde4:	d301      	bcc.n	1ddea <conf_fcb_load_cb+0x12>
        len = sizeof(buf) - 1;
   1dde6:	f240 145f 	movw	r4, #351	; 0x15f
    rc = flash_area_read(loc->fe_area, loc->fe_data_off, buf, len);
   1ddea:	4623      	mov	r3, r4
   1ddec:	aa02      	add	r2, sp, #8
   1ddee:	6881      	ldr	r1, [r0, #8]
   1ddf0:	6800      	ldr	r0, [r0, #0]
   1ddf2:	f000 fa43 	bl	1e27c <flash_area_read>
    if (rc) {
   1ddf6:	b110      	cbz	r0, 1ddfe <conf_fcb_load_cb+0x26>
}
   1ddf8:	2000      	movs	r0, #0
   1ddfa:	b05b      	add	sp, #364	; 0x16c
   1ddfc:	bd30      	pop	{r4, r5, pc}
    buf[len] = '\0';
   1ddfe:	a802      	add	r0, sp, #8
   1de00:	2300      	movs	r3, #0
   1de02:	5503      	strb	r3, [r0, r4]
    rc = conf_line_parse(buf, &name_str, &val_str);
   1de04:	466a      	mov	r2, sp
   1de06:	a901      	add	r1, sp, #4
   1de08:	f000 f910 	bl	1e02c <conf_line_parse>
    if (rc) {
   1de0c:	2800      	cmp	r0, #0
   1de0e:	d1f3      	bne.n	1ddf8 <conf_fcb_load_cb+0x20>
    argp->cb(name_str, val_str, argp->cb_arg);
   1de10:	682b      	ldr	r3, [r5, #0]
   1de12:	686a      	ldr	r2, [r5, #4]
   1de14:	9900      	ldr	r1, [sp, #0]
   1de16:	9801      	ldr	r0, [sp, #4]
   1de18:	4798      	blx	r3
    return 0;
   1de1a:	e7ed      	b.n	1ddf8 <conf_fcb_load_cb+0x20>

0001de1c <conf_fcb_var_read>:

static int
conf_fcb_var_read(struct fcb_entry *loc, char *buf, char **name, char **val)
{
   1de1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1de1e:	4604      	mov	r4, r0
   1de20:	460d      	mov	r5, r1
   1de22:	4617      	mov	r7, r2
   1de24:	461e      	mov	r6, r3
    int rc;

    rc = flash_area_read(loc->fe_area, loc->fe_data_off, buf, loc->fe_data_len);
   1de26:	8983      	ldrh	r3, [r0, #12]
   1de28:	460a      	mov	r2, r1
   1de2a:	6881      	ldr	r1, [r0, #8]
   1de2c:	6800      	ldr	r0, [r0, #0]
   1de2e:	f000 fa25 	bl	1e27c <flash_area_read>
    if (rc) {
   1de32:	b100      	cbz	r0, 1de36 <conf_fcb_var_read+0x1a>
        return rc;
    }
    buf[loc->fe_data_len] = '\0';
    rc = conf_line_parse(buf, name, val);
    return rc;
}
   1de34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    buf[loc->fe_data_len] = '\0';
   1de36:	89a3      	ldrh	r3, [r4, #12]
   1de38:	2200      	movs	r2, #0
   1de3a:	54ea      	strb	r2, [r5, r3]
    rc = conf_line_parse(buf, name, val);
   1de3c:	4632      	mov	r2, r6
   1de3e:	4639      	mov	r1, r7
   1de40:	4628      	mov	r0, r5
   1de42:	f000 f8f3 	bl	1e02c <conf_line_parse>
    return rc;
   1de46:	e7f5      	b.n	1de34 <conf_fcb_var_read+0x18>

0001de48 <conf_fcb_compress_internal>:
static void
conf_fcb_compress_internal(struct fcb *fcb,
                           int (*copy_or_not)(const char *name, const char *val,
                                              void *cn_arg),
                           void *cn_arg)
{
   1de48:	b570      	push	{r4, r5, r6, lr}
   1de4a:	f5ad 7d3c 	sub.w	sp, sp, #752	; 0x2f0
   1de4e:	4604      	mov	r4, r0
   1de50:	460d      	mov	r5, r1
   1de52:	4616      	mov	r6, r2
    struct fcb_entry loc2;
    char *name1, *val1;
    char *name2, *val2;
    int copy;

    rc = fcb_append_to_scratch(fcb);
   1de54:	f002 fceb 	bl	2082e <fcb_append_to_scratch>
    if (rc) {
   1de58:	2800      	cmp	r0, #0
   1de5a:	d15e      	bne.n	1df1a <conf_fcb_compress_internal+0xd2>
        return; /* XXX */
    }

    loc1.fe_area = NULL;
   1de5c:	2300      	movs	r3, #0
   1de5e:	9308      	str	r3, [sp, #32]
    loc1.fe_elem_off = 0;
   1de60:	9309      	str	r3, [sp, #36]	; 0x24
    while (fcb_getnext(fcb, &loc1) == 0) {
   1de62:	a908      	add	r1, sp, #32
   1de64:	4620      	mov	r0, r4
   1de66:	f002 fe99 	bl	20b9c <fcb_getnext>
   1de6a:	2800      	cmp	r0, #0
   1de6c:	d152      	bne.n	1df14 <conf_fcb_compress_internal+0xcc>
        if (loc1.fe_area != fcb->f_oldest) {
   1de6e:	9a08      	ldr	r2, [sp, #32]
   1de70:	69a3      	ldr	r3, [r4, #24]
   1de72:	429a      	cmp	r2, r3
   1de74:	d14e      	bne.n	1df14 <conf_fcb_compress_internal+0xcc>
            break;
        }
        rc = conf_fcb_var_read(&loc1, buf1, &name1, &val1);
   1de76:	ab02      	add	r3, sp, #8
   1de78:	aa03      	add	r2, sp, #12
   1de7a:	a964      	add	r1, sp, #400	; 0x190
   1de7c:	a808      	add	r0, sp, #32
   1de7e:	f7ff ffcd 	bl	1de1c <conf_fcb_var_read>
        if (rc) {
   1de82:	2800      	cmp	r0, #0
   1de84:	d1ed      	bne.n	1de62 <conf_fcb_compress_internal+0x1a>
            continue;
        }
        if (!val1) {
   1de86:	9b02      	ldr	r3, [sp, #8]
   1de88:	2b00      	cmp	r3, #0
   1de8a:	d0ea      	beq.n	1de62 <conf_fcb_compress_internal+0x1a>
            continue;
        }
        loc2 = loc1;
   1de8c:	f10d 0c10 	add.w	ip, sp, #16
   1de90:	ab08      	add	r3, sp, #32
   1de92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1de94:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
        copy = 1;
        while (fcb_getnext(fcb, &loc2) == 0) {
   1de98:	a904      	add	r1, sp, #16
   1de9a:	4620      	mov	r0, r4
   1de9c:	f002 fe7e 	bl	20b9c <fcb_getnext>
   1dea0:	b978      	cbnz	r0, 1dec2 <conf_fcb_compress_internal+0x7a>
            rc = conf_fcb_var_read(&loc2, buf2, &name2, &val2);
   1dea2:	466b      	mov	r3, sp
   1dea4:	aa01      	add	r2, sp, #4
   1dea6:	a90c      	add	r1, sp, #48	; 0x30
   1dea8:	a804      	add	r0, sp, #16
   1deaa:	f7ff ffb7 	bl	1de1c <conf_fcb_var_read>
            if (rc) {
   1deae:	2800      	cmp	r0, #0
   1deb0:	d1f2      	bne.n	1de98 <conf_fcb_compress_internal+0x50>
                continue;
            }
            if (!strcmp(name1, name2)) {
   1deb2:	9901      	ldr	r1, [sp, #4]
   1deb4:	9803      	ldr	r0, [sp, #12]
   1deb6:	f7ef fe3b 	bl	db30 <strcmp>
   1deba:	4603      	mov	r3, r0
   1debc:	2800      	cmp	r0, #0
   1debe:	d1eb      	bne.n	1de98 <conf_fcb_compress_internal+0x50>
   1dec0:	e000      	b.n	1dec4 <conf_fcb_compress_internal+0x7c>
        copy = 1;
   1dec2:	2301      	movs	r3, #1
                copy = 0;
                break;
            }
        }
        if (!copy) {
   1dec4:	2b00      	cmp	r3, #0
   1dec6:	d0cc      	beq.n	1de62 <conf_fcb_compress_internal+0x1a>
            continue;
        }

        if (copy_or_not) {
   1dec8:	b12d      	cbz	r5, 1ded6 <conf_fcb_compress_internal+0x8e>
            if (copy_or_not(name1, val1, cn_arg)) {
   1deca:	4632      	mov	r2, r6
   1decc:	9902      	ldr	r1, [sp, #8]
   1dece:	9803      	ldr	r0, [sp, #12]
   1ded0:	47a8      	blx	r5
   1ded2:	2800      	cmp	r0, #0
   1ded4:	d1c5      	bne.n	1de62 <conf_fcb_compress_internal+0x1a>
            }
        }
        /*
         * Can't find one. Must copy.
         */
        rc = flash_area_read(loc1.fe_area, loc1.fe_data_off, buf1,
   1ded6:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   1deda:	aa64      	add	r2, sp, #400	; 0x190
   1dedc:	990a      	ldr	r1, [sp, #40]	; 0x28
   1dede:	9808      	ldr	r0, [sp, #32]
   1dee0:	f000 f9cc 	bl	1e27c <flash_area_read>
          loc1.fe_data_len);
        if (rc) {
   1dee4:	2800      	cmp	r0, #0
   1dee6:	d1bc      	bne.n	1de62 <conf_fcb_compress_internal+0x1a>
            continue;
        }
        rc = fcb_append(fcb, loc1.fe_data_len, &loc2);
   1dee8:	aa04      	add	r2, sp, #16
   1deea:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
   1deee:	4620      	mov	r0, r4
   1def0:	f002 fcb6 	bl	20860 <fcb_append>
        if (rc) {
   1def4:	2800      	cmp	r0, #0
   1def6:	d1b4      	bne.n	1de62 <conf_fcb_compress_internal+0x1a>
            continue;
        }
        rc = flash_area_write(loc2.fe_area, loc2.fe_data_off, buf1,
   1def8:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   1defc:	aa64      	add	r2, sp, #400	; 0x190
   1defe:	9906      	ldr	r1, [sp, #24]
   1df00:	9804      	ldr	r0, [sp, #16]
   1df02:	f000 f9cf 	bl	1e2a4 <flash_area_write>
          loc1.fe_data_len);
        if (rc) {
   1df06:	2800      	cmp	r0, #0
   1df08:	d1ab      	bne.n	1de62 <conf_fcb_compress_internal+0x1a>
            continue;
        }
        fcb_append_finish(fcb, &loc2);
   1df0a:	a904      	add	r1, sp, #16
   1df0c:	4620      	mov	r0, r4
   1df0e:	f002 fd24 	bl	2095a <fcb_append_finish>
   1df12:	e7a6      	b.n	1de62 <conf_fcb_compress_internal+0x1a>
    }
    rc = fcb_rotate(fcb);
   1df14:	4620      	mov	r0, r4
   1df16:	f002 fe5b 	bl	20bd0 <fcb_rotate>
    if (rc) {
        /* XXXX */
        ;
    }
}
   1df1a:	f50d 7d3c 	add.w	sp, sp, #752	; 0x2f0
   1df1e:	bd70      	pop	{r4, r5, r6, pc}

0001df20 <conf_fcb_append>:

static int
conf_fcb_append(struct fcb *fcb, char *buf, int len)
{
   1df20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1df24:	b084      	sub	sp, #16
   1df26:	4606      	mov	r6, r0
   1df28:	4688      	mov	r8, r1
   1df2a:	4617      	mov	r7, r2
    int rc;
    int i;
    struct fcb_entry loc;

    for (i = 0; i < 10; i++) {
   1df2c:	2500      	movs	r5, #0
   1df2e:	2d09      	cmp	r5, #9
   1df30:	dc11      	bgt.n	1df56 <conf_fcb_append+0x36>
        rc = fcb_append(fcb, len, &loc);
   1df32:	466a      	mov	r2, sp
   1df34:	b2b9      	uxth	r1, r7
   1df36:	4630      	mov	r0, r6
   1df38:	f002 fc92 	bl	20860 <fcb_append>
   1df3c:	4604      	mov	r4, r0
        if (rc != FCB_ERR_NOSPACE) {
   1df3e:	f110 0f04 	cmn.w	r0, #4
   1df42:	d108      	bne.n	1df56 <conf_fcb_append+0x36>
            break;
        }
        if (fcb->f_scratch_cnt == 0) {
   1df44:	79b0      	ldrb	r0, [r6, #6]
   1df46:	b1b8      	cbz	r0, 1df78 <conf_fcb_append+0x58>
            return OS_ENOMEM;
        }
        conf_fcb_compress_internal(fcb, NULL, NULL);
   1df48:	2200      	movs	r2, #0
   1df4a:	4611      	mov	r1, r2
   1df4c:	4630      	mov	r0, r6
   1df4e:	f7ff ff7b 	bl	1de48 <conf_fcb_compress_internal>
    for (i = 0; i < 10; i++) {
   1df52:	3501      	adds	r5, #1
   1df54:	e7eb      	b.n	1df2e <conf_fcb_append+0xe>
    }
    if (rc) {
   1df56:	b98c      	cbnz	r4, 1df7c <conf_fcb_append+0x5c>
        return OS_EINVAL;
    }
    rc = flash_area_write(loc.fe_area, loc.fe_data_off, buf, len);
   1df58:	463b      	mov	r3, r7
   1df5a:	4642      	mov	r2, r8
   1df5c:	9902      	ldr	r1, [sp, #8]
   1df5e:	9800      	ldr	r0, [sp, #0]
   1df60:	f000 f9a0 	bl	1e2a4 <flash_area_write>
    if (rc) {
   1df64:	4604      	mov	r4, r0
   1df66:	b958      	cbnz	r0, 1df80 <conf_fcb_append+0x60>
        return OS_EINVAL;
    }
    fcb_append_finish(fcb, &loc);
   1df68:	4669      	mov	r1, sp
   1df6a:	4630      	mov	r0, r6
   1df6c:	f002 fcf5 	bl	2095a <fcb_append_finish>
    return OS_OK;
}
   1df70:	4620      	mov	r0, r4
   1df72:	b004      	add	sp, #16
   1df74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return OS_ENOMEM;
   1df78:	2401      	movs	r4, #1
   1df7a:	e7f9      	b.n	1df70 <conf_fcb_append+0x50>
        return OS_EINVAL;
   1df7c:	2402      	movs	r4, #2
   1df7e:	e7f7      	b.n	1df70 <conf_fcb_append+0x50>
        return OS_EINVAL;
   1df80:	2402      	movs	r4, #2
   1df82:	e7f5      	b.n	1df70 <conf_fcb_append+0x50>

0001df84 <conf_fcb_src>:
{
   1df84:	b570      	push	{r4, r5, r6, lr}
   1df86:	4604      	mov	r4, r0
    cf->cf_fcb.f_version = CONF_FCB_VERS;
   1df88:	2301      	movs	r3, #1
   1df8a:	7303      	strb	r3, [r0, #12]
    if (cf->cf_fcb.f_sector_cnt > 1) {
   1df8c:	7b43      	ldrb	r3, [r0, #13]
   1df8e:	2b01      	cmp	r3, #1
   1df90:	d902      	bls.n	1df98 <conf_fcb_src+0x14>
        cf->cf_fcb.f_scratch_cnt = 1;
   1df92:	2301      	movs	r3, #1
   1df94:	7383      	strb	r3, [r0, #14]
   1df96:	e007      	b.n	1dfa8 <conf_fcb_src+0x24>
        cf->cf_fcb.f_scratch_cnt = 0;
   1df98:	2300      	movs	r3, #0
   1df9a:	7383      	strb	r3, [r0, #14]
   1df9c:	e004      	b.n	1dfa8 <conf_fcb_src+0x24>
            flash_area_erase(cf->cf_fcb.f_active.fe_area, 0,
   1df9e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1dfa0:	6882      	ldr	r2, [r0, #8]
   1dfa2:	2100      	movs	r1, #0
   1dfa4:	f000 f992 	bl	1e2cc <flash_area_erase>
        rc = fcb_init(&cf->cf_fcb);
   1dfa8:	f104 0508 	add.w	r5, r4, #8
   1dfac:	4628      	mov	r0, r5
   1dfae:	f002 fb94 	bl	206da <fcb_init>
        if (rc) {
   1dfb2:	4606      	mov	r6, r0
   1dfb4:	b968      	cbnz	r0, 1dfd2 <conf_fcb_src+0x4e>
        if (cf->cf_fcb.f_scratch_cnt &&
   1dfb6:	7ba3      	ldrb	r3, [r4, #14]
   1dfb8:	b123      	cbz	r3, 1dfc4 <conf_fcb_src+0x40>
            fcb_free_sector_cnt(&cf->cf_fcb) < 1) {
   1dfba:	4628      	mov	r0, r5
   1dfbc:	f002 fb17 	bl	205ee <fcb_free_sector_cnt>
        if (cf->cf_fcb.f_scratch_cnt &&
   1dfc0:	2800      	cmp	r0, #0
   1dfc2:	ddec      	ble.n	1df9e <conf_fcb_src+0x1a>
    cf->cf_store.cs_itf = &conf_fcb_itf;
   1dfc4:	4b04      	ldr	r3, [pc, #16]	; (1dfd8 <conf_fcb_src+0x54>)
   1dfc6:	6063      	str	r3, [r4, #4]
    conf_src_register(&cf->cf_store);
   1dfc8:	4620      	mov	r0, r4
   1dfca:	f7f0 fc89 	bl	e8e0 <conf_src_register>
}
   1dfce:	4630      	mov	r0, r6
   1dfd0:	bd70      	pop	{r4, r5, r6, pc}
            return OS_INVALID_PARM;
   1dfd2:	2603      	movs	r6, #3
   1dfd4:	e7fb      	b.n	1dfce <conf_fcb_src+0x4a>
   1dfd6:	bf00      	nop
   1dfd8:	20000f9c 	.word	0x20000f9c

0001dfdc <conf_fcb_dst>:
{
   1dfdc:	b508      	push	{r3, lr}
    cf->cf_store.cs_itf = &conf_fcb_itf;
   1dfde:	4b03      	ldr	r3, [pc, #12]	; (1dfec <conf_fcb_dst+0x10>)
   1dfe0:	6043      	str	r3, [r0, #4]
    conf_dst_register(&cf->cf_store);
   1dfe2:	f7f0 fc91 	bl	e908 <conf_dst_register>
}
   1dfe6:	2000      	movs	r0, #0
   1dfe8:	bd08      	pop	{r3, pc}
   1dfea:	bf00      	nop
   1dfec:	20000f9c 	.word	0x20000f9c

0001dff0 <conf_fcb_kv_save>:
conf_fcb_kv_save(struct fcb *fcb, const char *name, const char *value)
{
    char buf[CONF_MAX_NAME_LEN + CONF_MAX_VAL_LEN + 32];
    int len;

    if (!name) {
   1dff0:	b199      	cbz	r1, 1e01a <conf_fcb_kv_save+0x2a>
{
   1dff2:	b510      	push	{r4, lr}
   1dff4:	b0d8      	sub	sp, #352	; 0x160
   1dff6:	4604      	mov	r4, r0
   1dff8:	4613      	mov	r3, r2
   1dffa:	460a      	mov	r2, r1
        return OS_INVALID_PARM;
    }

    len = conf_line_make(buf, sizeof(buf), name, value);
   1dffc:	f44f 71b0 	mov.w	r1, #352	; 0x160
   1e000:	4668      	mov	r0, sp
   1e002:	f000 f875 	bl	1e0f0 <conf_line_make>
   1e006:	4602      	mov	r2, r0
    if (len < 0 || len + 2 > sizeof(buf)) {
   1e008:	f5b0 7faf 	cmp.w	r0, #350	; 0x15e
   1e00c:	d807      	bhi.n	1e01e <conf_fcb_kv_save+0x2e>
        return OS_INVALID_PARM;
    }
    return conf_fcb_append(fcb, buf, len);
   1e00e:	4669      	mov	r1, sp
   1e010:	4620      	mov	r0, r4
   1e012:	f7ff ff85 	bl	1df20 <conf_fcb_append>
}
   1e016:	b058      	add	sp, #352	; 0x160
   1e018:	bd10      	pop	{r4, pc}
        return OS_INVALID_PARM;
   1e01a:	2003      	movs	r0, #3
}
   1e01c:	4770      	bx	lr
        return OS_INVALID_PARM;
   1e01e:	2003      	movs	r0, #3
   1e020:	e7f9      	b.n	1e016 <conf_fcb_kv_save+0x26>

0001e022 <conf_fcb_save>:
{
   1e022:	b508      	push	{r3, lr}
    return conf_fcb_kv_save(&cf->cf_fcb, name, value);
   1e024:	3008      	adds	r0, #8
   1e026:	f7ff ffe3 	bl	1dff0 <conf_fcb_kv_save>
}
   1e02a:	bd08      	pop	{r3, pc}

0001e02c <conf_line_parse>:
        FIND_NAME_END,
        FIND_VAL,
        FIND_VAL_END
    } state = FIND_NAME;

    *valp = NULL;
   1e02c:	2300      	movs	r3, #0
   1e02e:	6013      	str	r3, [r2, #0]
    } state = FIND_NAME;
   1e030:	469c      	mov	ip, r3
    for (cp = buf; *cp != '\0'; cp++) {
   1e032:	7803      	ldrb	r3, [r0, #0]
   1e034:	2b00      	cmp	r3, #0
   1e036:	d04f      	beq.n	1e0d8 <conf_line_parse+0xac>
{
   1e038:	b500      	push	{lr}
   1e03a:	e01a      	b.n	1e072 <conf_line_parse+0x46>
   1e03c:	2b20      	cmp	r3, #32
   1e03e:	d015      	beq.n	1e06c <conf_line_parse+0x40>
   1e040:	2b0a      	cmp	r3, #10
   1e042:	d013      	beq.n	1e06c <conf_line_parse+0x40>
   1e044:	2b09      	cmp	r3, #9
   1e046:	d011      	beq.n	1e06c <conf_line_parse+0x40>
   1e048:	2b0d      	cmp	r3, #13
   1e04a:	d00f      	beq.n	1e06c <conf_line_parse+0x40>
        switch (state) {
        case FIND_NAME:
            if (!isspace((unsigned char)*cp)) {
                *namep = cp;
   1e04c:	6008      	str	r0, [r1, #0]
                state = FIND_NAME_END;
   1e04e:	f04f 0c01 	mov.w	ip, #1
   1e052:	e00b      	b.n	1e06c <conf_line_parse+0x40>
            }
            break;
        case FIND_NAME_END:
            if (*cp == '=') {
   1e054:	2b3d      	cmp	r3, #61	; 0x3d
   1e056:	d01b      	beq.n	1e090 <conf_line_parse+0x64>
   1e058:	2b20      	cmp	r3, #32
   1e05a:	d005      	beq.n	1e068 <conf_line_parse+0x3c>
   1e05c:	2b0a      	cmp	r3, #10
   1e05e:	d003      	beq.n	1e068 <conf_line_parse+0x3c>
   1e060:	2b09      	cmp	r3, #9
   1e062:	d001      	beq.n	1e068 <conf_line_parse+0x3c>
   1e064:	2b0d      	cmp	r3, #13
   1e066:	d101      	bne.n	1e06c <conf_line_parse+0x40>
                *cp = '\0';
                state = FIND_VAL;
            } else if (isspace((unsigned char)*cp)) {
                *cp = '\0';
   1e068:	2300      	movs	r3, #0
   1e06a:	7003      	strb	r3, [r0, #0]
    for (cp = buf; *cp != '\0'; cp++) {
   1e06c:	3001      	adds	r0, #1
   1e06e:	7803      	ldrb	r3, [r0, #0]
   1e070:	b32b      	cbz	r3, 1e0be <conf_line_parse+0x92>
        switch (state) {
   1e072:	f1bc 0f03 	cmp.w	ip, #3
   1e076:	d8f9      	bhi.n	1e06c <conf_line_parse+0x40>
   1e078:	f20f 0e04 	addw	lr, pc, #4
   1e07c:	f85e f02c 	ldr.w	pc, [lr, ip, lsl #2]
   1e080:	0001e03d 	.word	0x0001e03d
   1e084:	0001e055 	.word	0x0001e055
   1e088:	0001e09b 	.word	0x0001e09b
   1e08c:	0001e0b3 	.word	0x0001e0b3
                *cp = '\0';
   1e090:	2300      	movs	r3, #0
   1e092:	7003      	strb	r3, [r0, #0]
                state = FIND_VAL;
   1e094:	f04f 0c02 	mov.w	ip, #2
   1e098:	e7e8      	b.n	1e06c <conf_line_parse+0x40>
   1e09a:	2b20      	cmp	r3, #32
   1e09c:	d0e6      	beq.n	1e06c <conf_line_parse+0x40>
   1e09e:	2b0a      	cmp	r3, #10
   1e0a0:	d0e4      	beq.n	1e06c <conf_line_parse+0x40>
   1e0a2:	2b09      	cmp	r3, #9
   1e0a4:	d0e2      	beq.n	1e06c <conf_line_parse+0x40>
   1e0a6:	2b0d      	cmp	r3, #13
   1e0a8:	d0e0      	beq.n	1e06c <conf_line_parse+0x40>
            }
            break;
        case FIND_VAL:
            if (!isspace((unsigned char)*cp)) {
                *valp = cp;
   1e0aa:	6010      	str	r0, [r2, #0]
                state = FIND_VAL_END;
   1e0ac:	f04f 0c03 	mov.w	ip, #3
   1e0b0:	e7dc      	b.n	1e06c <conf_line_parse+0x40>
	return (__c >= 0x20 && __c <= 0x7e);
   1e0b2:	3b20      	subs	r3, #32
            }
            break;
        case FIND_VAL_END:
            if (!isprint((unsigned char)*cp)) {
   1e0b4:	2b5e      	cmp	r3, #94	; 0x5e
   1e0b6:	d9d9      	bls.n	1e06c <conf_line_parse+0x40>
                *cp = '\0';
   1e0b8:	2300      	movs	r3, #0
   1e0ba:	7003      	strb	r3, [r0, #0]
   1e0bc:	e7d6      	b.n	1e06c <conf_line_parse+0x40>
            }
            break;
        }
    }
    if (state == FIND_VAL_END || state == FIND_VAL) {
   1e0be:	f1ac 0c02 	sub.w	ip, ip, #2
   1e0c2:	fa5f fc8c 	uxtb.w	ip, ip
   1e0c6:	f1bc 0f01 	cmp.w	ip, #1
   1e0ca:	d802      	bhi.n	1e0d2 <conf_line_parse+0xa6>
        return 0;
   1e0cc:	2000      	movs	r0, #0
    } else {
        return -1;
    }
}
   1e0ce:	f85d fb04 	ldr.w	pc, [sp], #4
        return -1;
   1e0d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e0d6:	e7fa      	b.n	1e0ce <conf_line_parse+0xa2>
    if (state == FIND_VAL_END || state == FIND_VAL) {
   1e0d8:	f1ac 0c02 	sub.w	ip, ip, #2
   1e0dc:	fa5f fc8c 	uxtb.w	ip, ip
   1e0e0:	f1bc 0f01 	cmp.w	ip, #1
   1e0e4:	d801      	bhi.n	1e0ea <conf_line_parse+0xbe>
        return 0;
   1e0e6:	2000      	movs	r0, #0
   1e0e8:	4770      	bx	lr
        return -1;
   1e0ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1e0ee:	4770      	bx	lr

0001e0f0 <conf_line_make>:

int
conf_line_make(char *dst, int dlen, const char *name, const char *value)
{
   1e0f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e0f4:	4606      	mov	r6, r0
   1e0f6:	4689      	mov	r9, r1
   1e0f8:	4690      	mov	r8, r2
   1e0fa:	461f      	mov	r7, r3
    int nlen;
    int vlen;
    int off;

    nlen = strlen(name);
   1e0fc:	4610      	mov	r0, r2
   1e0fe:	f7ef fd23 	bl	db48 <strlen>
   1e102:	4605      	mov	r5, r0
    if (value) {
   1e104:	b1e7      	cbz	r7, 1e140 <conf_line_make+0x50>
        vlen = strlen(value);
   1e106:	4638      	mov	r0, r7
   1e108:	f7ef fd1e 	bl	db48 <strlen>
   1e10c:	4604      	mov	r4, r0
    } else {
        vlen = 0;
    }
    if (nlen + vlen + 2 > dlen) {
   1e10e:	1963      	adds	r3, r4, r5
   1e110:	3301      	adds	r3, #1
   1e112:	454b      	cmp	r3, r9
   1e114:	da16      	bge.n	1e144 <conf_line_make+0x54>
        return -1;
    }
    memcpy(dst, name, nlen);
   1e116:	462a      	mov	r2, r5
   1e118:	4641      	mov	r1, r8
   1e11a:	4630      	mov	r0, r6
   1e11c:	f7ef fcd0 	bl	dac0 <memcpy>
    off = nlen;
    dst[off++] = '=';
   1e120:	f105 0801 	add.w	r8, r5, #1
   1e124:	233d      	movs	r3, #61	; 0x3d
   1e126:	5573      	strb	r3, [r6, r5]

    memcpy(dst + off, value, vlen);
   1e128:	4622      	mov	r2, r4
   1e12a:	4639      	mov	r1, r7
   1e12c:	eb06 0008 	add.w	r0, r6, r8
   1e130:	f7ef fcc6 	bl	dac0 <memcpy>
    off += vlen;
   1e134:	eb04 0008 	add.w	r0, r4, r8
    dst[off] = '\0';
   1e138:	2300      	movs	r3, #0
   1e13a:	5433      	strb	r3, [r6, r0]

    return off;
}
   1e13c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        vlen = 0;
   1e140:	2400      	movs	r4, #0
   1e142:	e7e4      	b.n	1e10e <conf_line_make+0x1e>
        return -1;
   1e144:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e148:	e7f8      	b.n	1e13c <conf_line_make+0x4c>

0001e14a <flash_map_read_mfg>:
 * @return                      0 on success; nonzero on failure.
 */
static int
flash_map_read_mfg(int max_areas,
                   struct flash_area *out_areas, int *out_num_areas)
{
   1e14a:	b570      	push	{r4, r5, r6, lr}
   1e14c:	b086      	sub	sp, #24
   1e14e:	4605      	mov	r5, r0
   1e150:	460e      	mov	r6, r1
   1e152:	4614      	mov	r4, r2
    struct mfg_meta_flash_area meta_flash_area;
    struct mfg_reader reader;
    struct flash_area *fap;
    int rc;

    *out_num_areas = 0;
   1e154:	2300      	movs	r3, #0
   1e156:	6013      	str	r3, [r2, #0]

    /* Ensure manufacturing meta region has been located in flash. */
    mfg_init();
   1e158:	f001 fa9c 	bl	1f694 <mfg_init>

    mfg_open(&reader);
   1e15c:	a801      	add	r0, sp, #4
   1e15e:	f001 fabf 	bl	1f6e0 <mfg_open>

    while (1) {
        if (*out_num_areas >= max_areas) {
   1e162:	6823      	ldr	r3, [r4, #0]
   1e164:	42ab      	cmp	r3, r5
   1e166:	da22      	bge.n	1e1ae <flash_map_read_mfg+0x64>
            return -1;
        }

        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_FLASH_AREA);
   1e168:	2102      	movs	r1, #2
   1e16a:	a801      	add	r0, sp, #4
   1e16c:	f001 fa7a 	bl	1f664 <mfg_seek_next_with_type>
        switch (rc) {
   1e170:	f110 0f0f 	cmn.w	r0, #15
   1e174:	d01e      	beq.n	1e1b4 <flash_map_read_mfg+0x6a>
   1e176:	b9f0      	cbnz	r0, 1e1b6 <flash_map_read_mfg+0x6c>
            return 0;
        default:
            return rc;
        }

        rc = mfg_read_tlv_flash_area(&reader, &meta_flash_area);
   1e178:	a903      	add	r1, sp, #12
   1e17a:	a801      	add	r0, sp, #4
   1e17c:	f001 fa7f 	bl	1f67e <mfg_read_tlv_flash_area>
        if (rc != 0) {
   1e180:	b9c8      	cbnz	r0, 1e1b6 <flash_map_read_mfg+0x6c>
            return rc;
        }

        fap = out_areas + *out_num_areas;
   1e182:	6823      	ldr	r3, [r4, #0]
   1e184:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1e188:	eb06 0283 	add.w	r2, r6, r3, lsl #2
        fap->fa_id = meta_flash_area.area_id;
   1e18c:	f89d 100c 	ldrb.w	r1, [sp, #12]
   1e190:	f806 1023 	strb.w	r1, [r6, r3, lsl #2]
        fap->fa_device_id = meta_flash_area.device_id;
   1e194:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1e198:	7053      	strb	r3, [r2, #1]
        fap->fa_off = meta_flash_area.offset;
   1e19a:	f8dd 300e 	ldr.w	r3, [sp, #14]
   1e19e:	6053      	str	r3, [r2, #4]
        fap->fa_size = meta_flash_area.size;
   1e1a0:	f8dd 3012 	ldr.w	r3, [sp, #18]
   1e1a4:	6093      	str	r3, [r2, #8]

        (*out_num_areas)++;
   1e1a6:	6823      	ldr	r3, [r4, #0]
   1e1a8:	3301      	adds	r3, #1
   1e1aa:	6023      	str	r3, [r4, #0]
        if (*out_num_areas >= max_areas) {
   1e1ac:	e7d9      	b.n	1e162 <flash_map_read_mfg+0x18>
            return -1;
   1e1ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e1b2:	e000      	b.n	1e1b6 <flash_map_read_mfg+0x6c>
        switch (rc) {
   1e1b4:	2000      	movs	r0, #0
    }
}
   1e1b6:	b006      	add	sp, #24
   1e1b8:	bd70      	pop	{r4, r5, r6, pc}
	...

0001e1bc <flash_area_open>:
{
   1e1bc:	b430      	push	{r4, r5}
    if (flash_map == NULL) {
   1e1be:	4b0e      	ldr	r3, [pc, #56]	; (1e1f8 <flash_area_open+0x3c>)
   1e1c0:	681c      	ldr	r4, [r3, #0]
   1e1c2:	b1ac      	cbz	r4, 1e1f0 <flash_area_open+0x34>
    for (i = 0; i < flash_map_entries; i++) {
   1e1c4:	2300      	movs	r3, #0
   1e1c6:	4a0d      	ldr	r2, [pc, #52]	; (1e1fc <flash_area_open+0x40>)
   1e1c8:	6812      	ldr	r2, [r2, #0]
   1e1ca:	429a      	cmp	r2, r3
   1e1cc:	dd0c      	ble.n	1e1e8 <flash_area_open+0x2c>
        area = flash_map + i;
   1e1ce:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1e1d2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
        if (area->fa_id == id) {
   1e1d6:	f814 2022 	ldrb.w	r2, [r4, r2, lsl #2]
   1e1da:	4282      	cmp	r2, r0
   1e1dc:	d001      	beq.n	1e1e2 <flash_area_open+0x26>
    for (i = 0; i < flash_map_entries; i++) {
   1e1de:	3301      	adds	r3, #1
   1e1e0:	e7f1      	b.n	1e1c6 <flash_area_open+0xa>
            *fap = area;
   1e1e2:	600d      	str	r5, [r1, #0]
            return 0;
   1e1e4:	2000      	movs	r0, #0
   1e1e6:	e001      	b.n	1e1ec <flash_area_open+0x30>
    return SYS_ENOENT;
   1e1e8:	f06f 0003 	mvn.w	r0, #3
}
   1e1ec:	bc30      	pop	{r4, r5}
   1e1ee:	4770      	bx	lr
        return SYS_EACCES;
   1e1f0:	f06f 0006 	mvn.w	r0, #6
   1e1f4:	e7fa      	b.n	1e1ec <flash_area_open+0x30>
   1e1f6:	bf00      	nop
   1e1f8:	200047a8 	.word	0x200047a8
   1e1fc:	200047ac 	.word	0x200047ac

0001e200 <flash_area_to_sectors>:
{
   1e200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e204:	b084      	sub	sp, #16
   1e206:	460f      	mov	r7, r1
   1e208:	4616      	mov	r6, r2
    rc = flash_area_open(id, &fa);
   1e20a:	fa5f f880 	uxtb.w	r8, r0
   1e20e:	a903      	add	r1, sp, #12
   1e210:	4640      	mov	r0, r8
   1e212:	f7ff ffd3 	bl	1e1bc <flash_area_open>
    if (rc != 0) {
   1e216:	4681      	mov	r9, r0
   1e218:	b118      	cbz	r0, 1e222 <flash_area_to_sectors+0x22>
}
   1e21a:	4648      	mov	r0, r9
   1e21c:	b004      	add	sp, #16
   1e21e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    *cnt = 0;
   1e222:	2300      	movs	r3, #0
   1e224:	603b      	str	r3, [r7, #0]
    hf = hal_bsp_flash_dev(fa->fa_device_id);
   1e226:	9b03      	ldr	r3, [sp, #12]
   1e228:	7858      	ldrb	r0, [r3, #1]
   1e22a:	f7f5 fbc9 	bl	139c0 <hal_bsp_flash_dev>
   1e22e:	4605      	mov	r5, r0
    for (i = 0; i < hf->hf_sector_cnt; i++) {
   1e230:	464c      	mov	r4, r9
   1e232:	e003      	b.n	1e23c <flash_area_to_sectors+0x3c>
            (*cnt)++;
   1e234:	683b      	ldr	r3, [r7, #0]
   1e236:	3301      	adds	r3, #1
   1e238:	603b      	str	r3, [r7, #0]
    for (i = 0; i < hf->hf_sector_cnt; i++) {
   1e23a:	3401      	adds	r4, #1
   1e23c:	68eb      	ldr	r3, [r5, #12]
   1e23e:	42a3      	cmp	r3, r4
   1e240:	ddeb      	ble.n	1e21a <flash_area_to_sectors+0x1a>
        hf->hf_itf->hff_sector_info(hf, i, &start, &size);
   1e242:	682b      	ldr	r3, [r5, #0]
   1e244:	f8d3 a00c 	ldr.w	sl, [r3, #12]
   1e248:	ab01      	add	r3, sp, #4
   1e24a:	aa02      	add	r2, sp, #8
   1e24c:	4621      	mov	r1, r4
   1e24e:	4628      	mov	r0, r5
   1e250:	47d0      	blx	sl
        if (start >= fa->fa_off && start < fa->fa_off + fa->fa_size) {
   1e252:	9903      	ldr	r1, [sp, #12]
   1e254:	684b      	ldr	r3, [r1, #4]
   1e256:	9a02      	ldr	r2, [sp, #8]
   1e258:	4293      	cmp	r3, r2
   1e25a:	d8ee      	bhi.n	1e23a <flash_area_to_sectors+0x3a>
   1e25c:	6889      	ldr	r1, [r1, #8]
   1e25e:	440b      	add	r3, r1
   1e260:	429a      	cmp	r2, r3
   1e262:	d2ea      	bcs.n	1e23a <flash_area_to_sectors+0x3a>
            if (ret) {
   1e264:	2e00      	cmp	r6, #0
   1e266:	d0e5      	beq.n	1e234 <flash_area_to_sectors+0x34>
                ret->fa_id = id;
   1e268:	f886 8000 	strb.w	r8, [r6]
                ret->fa_device_id = fa->fa_device_id;
   1e26c:	9b03      	ldr	r3, [sp, #12]
   1e26e:	785b      	ldrb	r3, [r3, #1]
   1e270:	7073      	strb	r3, [r6, #1]
                ret->fa_off = start;
   1e272:	6072      	str	r2, [r6, #4]
                ret->fa_size = size;
   1e274:	9b01      	ldr	r3, [sp, #4]
   1e276:	60b3      	str	r3, [r6, #8]
                ret++;
   1e278:	360c      	adds	r6, #12
   1e27a:	e7db      	b.n	1e234 <flash_area_to_sectors+0x34>

0001e27c <flash_area_read>:
{
   1e27c:	b510      	push	{r4, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   1e27e:	6884      	ldr	r4, [r0, #8]
   1e280:	428c      	cmp	r4, r1
   1e282:	d309      	bcc.n	1e298 <flash_area_read+0x1c>
   1e284:	eb01 0c03 	add.w	ip, r1, r3
   1e288:	4564      	cmp	r4, ip
   1e28a:	d308      	bcc.n	1e29e <flash_area_read+0x22>
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
   1e28c:	6844      	ldr	r4, [r0, #4]
   1e28e:	4421      	add	r1, r4
   1e290:	7840      	ldrb	r0, [r0, #1]
   1e292:	f002 fd46 	bl	20d22 <hal_flash_read>
}
   1e296:	bd10      	pop	{r4, pc}
        return -1;
   1e298:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e29c:	e7fb      	b.n	1e296 <flash_area_read+0x1a>
   1e29e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e2a2:	e7f8      	b.n	1e296 <flash_area_read+0x1a>

0001e2a4 <flash_area_write>:
{
   1e2a4:	b510      	push	{r4, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   1e2a6:	6884      	ldr	r4, [r0, #8]
   1e2a8:	428c      	cmp	r4, r1
   1e2aa:	d309      	bcc.n	1e2c0 <flash_area_write+0x1c>
   1e2ac:	eb01 0c03 	add.w	ip, r1, r3
   1e2b0:	4564      	cmp	r4, ip
   1e2b2:	d308      	bcc.n	1e2c6 <flash_area_write+0x22>
    return hal_flash_write(fa->fa_device_id, fa->fa_off + off,
   1e2b4:	6844      	ldr	r4, [r0, #4]
   1e2b6:	4421      	add	r1, r4
   1e2b8:	7840      	ldrb	r0, [r0, #1]
   1e2ba:	f002 fd5b 	bl	20d74 <hal_flash_write>
}
   1e2be:	bd10      	pop	{r4, pc}
        return -1;
   1e2c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e2c4:	e7fb      	b.n	1e2be <flash_area_write+0x1a>
   1e2c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e2ca:	e7f8      	b.n	1e2be <flash_area_write+0x1a>

0001e2cc <flash_area_erase>:
{
   1e2cc:	b508      	push	{r3, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   1e2ce:	6883      	ldr	r3, [r0, #8]
   1e2d0:	428b      	cmp	r3, r1
   1e2d2:	d309      	bcc.n	1e2e8 <flash_area_erase+0x1c>
   1e2d4:	eb01 0c02 	add.w	ip, r1, r2
   1e2d8:	4563      	cmp	r3, ip
   1e2da:	d308      	bcc.n	1e2ee <flash_area_erase+0x22>
    return hal_flash_erase(fa->fa_device_id, fa->fa_off + off, len);
   1e2dc:	6843      	ldr	r3, [r0, #4]
   1e2de:	4419      	add	r1, r3
   1e2e0:	7840      	ldrb	r0, [r0, #1]
   1e2e2:	f002 fd7f 	bl	20de4 <hal_flash_erase>
}
   1e2e6:	bd08      	pop	{r3, pc}
        return -1;
   1e2e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e2ec:	e7fb      	b.n	1e2e6 <flash_area_erase+0x1a>
   1e2ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e2f2:	e7f8      	b.n	1e2e6 <flash_area_erase+0x1a>

0001e2f4 <flash_area_align>:
{
   1e2f4:	b508      	push	{r3, lr}
    return hal_flash_align(fa->fa_device_id);
   1e2f6:	7840      	ldrb	r0, [r0, #1]
   1e2f8:	f002 fd03 	bl	20d02 <hal_flash_align>
}
   1e2fc:	bd08      	pop	{r3, pc}

0001e2fe <flash_area_erased_val>:
{
   1e2fe:	b508      	push	{r3, lr}
    return hal_flash_erased_val(fa->fa_device_id);
   1e300:	7840      	ldrb	r0, [r0, #1]
   1e302:	f002 fd06 	bl	20d12 <hal_flash_erased_val>
}
   1e306:	bd08      	pop	{r3, pc}

0001e308 <flash_area_is_empty>:
{
   1e308:	b510      	push	{r4, lr}
   1e30a:	460c      	mov	r4, r1
    *empty = false;
   1e30c:	2300      	movs	r3, #0
   1e30e:	700b      	strb	r3, [r1, #0]
    rc = hal_flash_isempty_no_buf(fa->fa_device_id, fa->fa_off, fa->fa_size);
   1e310:	6882      	ldr	r2, [r0, #8]
   1e312:	6841      	ldr	r1, [r0, #4]
   1e314:	7840      	ldrb	r0, [r0, #1]
   1e316:	f002 fe15 	bl	20f44 <hal_flash_isempty_no_buf>
    if (rc < 0) {
   1e31a:	2800      	cmp	r0, #0
   1e31c:	db02      	blt.n	1e324 <flash_area_is_empty+0x1c>
    } else if (rc == 1) {
   1e31e:	2801      	cmp	r0, #1
   1e320:	d001      	beq.n	1e326 <flash_area_is_empty+0x1e>
    return 0;
   1e322:	2000      	movs	r0, #0
}
   1e324:	bd10      	pop	{r4, pc}
        *empty = true;
   1e326:	2301      	movs	r3, #1
   1e328:	7023      	strb	r3, [r4, #0]
    return 0;
   1e32a:	2000      	movs	r0, #0
   1e32c:	e7fa      	b.n	1e324 <flash_area_is_empty+0x1c>

0001e32e <flash_area_read_is_empty>:
{
   1e32e:	b510      	push	{r4, lr}
    return hal_flash_isempty(fa->fa_device_id, fa->fa_off + off, dst, len);
   1e330:	6844      	ldr	r4, [r0, #4]
   1e332:	4421      	add	r1, r4
   1e334:	7840      	ldrb	r0, [r0, #1]
   1e336:	f002 fdd4 	bl	20ee2 <hal_flash_isempty>
}
   1e33a:	bd10      	pop	{r4, pc}

0001e33c <flash_area_id_from_image_slot>:
    switch (slot) {
   1e33c:	b150      	cbz	r0, 1e354 <flash_area_id_from_image_slot+0x18>
{
   1e33e:	b508      	push	{r3, lr}
    switch (slot) {
   1e340:	2801      	cmp	r0, #1
   1e342:	d101      	bne.n	1e348 <flash_area_id_from_image_slot+0xc>
        return FLASH_AREA_IMAGE_1;
   1e344:	2002      	movs	r0, #2
}
   1e346:	bd08      	pop	{r3, pc}
        assert(0);
   1e348:	2300      	movs	r3, #0
   1e34a:	461a      	mov	r2, r3
   1e34c:	4619      	mov	r1, r3
   1e34e:	4618      	mov	r0, r3
   1e350:	f7ea fe08 	bl	8f64 <__assert_func>
    switch (slot) {
   1e354:	2001      	movs	r0, #1
}
   1e356:	4770      	bx	lr

0001e358 <flash_map_init>:

void
flash_map_init(void)
{
   1e358:	b510      	push	{r4, lr}
   1e35a:	b084      	sub	sp, #16

    int num_areas;
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1e35c:	4b14      	ldr	r3, [pc, #80]	; (1e3b0 <flash_map_init+0x58>)
   1e35e:	781b      	ldrb	r3, [r3, #0]
   1e360:	b303      	cbz	r3, 1e3a4 <flash_map_init+0x4c>

    rc = hal_flash_init();
   1e362:	f002 fcba 	bl	20cda <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1e366:	b138      	cbz	r0, 1e378 <flash_map_init+0x20>
   1e368:	2000      	movs	r0, #0
   1e36a:	9000      	str	r0, [sp, #0]
   1e36c:	4b11      	ldr	r3, [pc, #68]	; (1e3b4 <flash_map_init+0x5c>)
   1e36e:	681c      	ldr	r4, [r3, #0]
   1e370:	4603      	mov	r3, r0
   1e372:	4602      	mov	r2, r0
   1e374:	4601      	mov	r1, r0
   1e376:	47a0      	blx	r4
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
   1e378:	4b0f      	ldr	r3, [pc, #60]	; (1e3b8 <flash_map_init+0x60>)
   1e37a:	4a10      	ldr	r2, [pc, #64]	; (1e3bc <flash_map_init+0x64>)
   1e37c:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
   1e37e:	4b10      	ldr	r3, [pc, #64]	; (1e3c0 <flash_map_init+0x68>)
   1e380:	2206      	movs	r2, #6
   1e382:	601a      	str	r2, [r3, #0]

    /* Attempt to read the flash map from the manufacturing meta regions.  On
     * success, use the new flash map instead of the default hardcoded one.
     */
    rc = flash_map_read_mfg(sizeof mfg_areas / sizeof mfg_areas[0],
   1e384:	aa03      	add	r2, sp, #12
   1e386:	490f      	ldr	r1, [pc, #60]	; (1e3c4 <flash_map_init+0x6c>)
   1e388:	200a      	movs	r0, #10
   1e38a:	f7ff fede 	bl	1e14a <flash_map_read_mfg>
                            mfg_areas, &num_areas);
    if (rc == 0 && num_areas > 0) {
   1e38e:	b938      	cbnz	r0, 1e3a0 <flash_map_init+0x48>
   1e390:	9b03      	ldr	r3, [sp, #12]
   1e392:	2b00      	cmp	r3, #0
   1e394:	dd04      	ble.n	1e3a0 <flash_map_init+0x48>
        flash_map = mfg_areas;
   1e396:	4a08      	ldr	r2, [pc, #32]	; (1e3b8 <flash_map_init+0x60>)
   1e398:	490a      	ldr	r1, [pc, #40]	; (1e3c4 <flash_map_init+0x6c>)
   1e39a:	6011      	str	r1, [r2, #0]
        flash_map_entries = num_areas;
   1e39c:	4a08      	ldr	r2, [pc, #32]	; (1e3c0 <flash_map_init+0x68>)
   1e39e:	6013      	str	r3, [r2, #0]
    }
}
   1e3a0:	b004      	add	sp, #16
   1e3a2:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1e3a4:	461a      	mov	r2, r3
   1e3a6:	4619      	mov	r1, r3
   1e3a8:	4618      	mov	r0, r3
   1e3aa:	f7ea fddb 	bl	8f64 <__assert_func>
   1e3ae:	bf00      	nop
   1e3b0:	20004538 	.word	0x20004538
   1e3b4:	2000064c 	.word	0x2000064c
   1e3b8:	200047a8 	.word	0x200047a8
   1e3bc:	00024e58 	.word	0x00024e58
   1e3c0:	200047ac 	.word	0x200047ac
   1e3c4:	200047b0 	.word	0x200047b0

0001e3c8 <log_registered>:
static int
log_registered(struct log *log)
{
    struct log *cur;

    STAILQ_FOREACH(cur, &g_log_list, l_next) {
   1e3c8:	4b05      	ldr	r3, [pc, #20]	; (1e3e0 <log_registered+0x18>)
   1e3ca:	681b      	ldr	r3, [r3, #0]
   1e3cc:	e000      	b.n	1e3d0 <log_registered+0x8>
   1e3ce:	68db      	ldr	r3, [r3, #12]
   1e3d0:	b11b      	cbz	r3, 1e3da <log_registered+0x12>
        if (cur == log) {
   1e3d2:	4283      	cmp	r3, r0
   1e3d4:	d1fb      	bne.n	1e3ce <log_registered+0x6>
            return 1;
   1e3d6:	2001      	movs	r0, #1
        }
    }

    return 0;
}
   1e3d8:	4770      	bx	lr
    return 0;
   1e3da:	2000      	movs	r0, #0
   1e3dc:	4770      	bx	lr
   1e3de:	bf00      	nop
   1e3e0:	20000fac 	.word	0x20000fac

0001e3e4 <log_chk_type>:
            break;
    }
#endif

    return rc;
}
   1e3e4:	2000      	movs	r0, #0
   1e3e6:	4770      	bx	lr

0001e3e8 <log_chk_max_entry_len>:
log_chk_max_entry_len(struct log *log, uint16_t len)
{
    int rc;

    rc = OS_OK;
    if (log->l_max_entry_len != 0) {
   1e3e8:	8ac3      	ldrh	r3, [r0, #22]
   1e3ea:	b11b      	cbz	r3, 1e3f4 <log_chk_max_entry_len+0xc>
        if (len > log->l_max_entry_len) {
   1e3ec:	428b      	cmp	r3, r1
   1e3ee:	d303      	bcc.n	1e3f8 <log_chk_max_entry_len+0x10>
    rc = OS_OK;
   1e3f0:	2000      	movs	r0, #0
   1e3f2:	4770      	bx	lr
   1e3f4:	2000      	movs	r0, #0
   1e3f6:	4770      	bx	lr
            LOG_STATS_INC(log, too_long);
            rc = OS_ENOMEM;
   1e3f8:	2001      	movs	r0, #1
        }
    }

    return rc;
}
   1e3fa:	4770      	bx	lr

0001e3fc <log_call_append_cb>:
/**
 * Calls the given log's append callback, if it has one.
 */
static void
log_call_append_cb(struct log *log, uint32_t idx)
{
   1e3fc:	b500      	push	{lr}
   1e3fe:	b083      	sub	sp, #12
     * preventing a TOCTTOU race.
     * (This all assumes that function pointer reads and writes are atomic.)
     */
    log_append_cb * volatile cb;

    cb = log->l_append_cb;
   1e400:	6903      	ldr	r3, [r0, #16]
   1e402:	9301      	str	r3, [sp, #4]
    if (cb != NULL) {
   1e404:	9b01      	ldr	r3, [sp, #4]
   1e406:	b10b      	cbz	r3, 1e40c <log_call_append_cb+0x10>
        cb(log, idx);
   1e408:	9b01      	ldr	r3, [sp, #4]
   1e40a:	4798      	blx	r3
    }
}
   1e40c:	b003      	add	sp, #12
   1e40e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0001e414 <log_append_prepare>:
{
   1e414:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e418:	b085      	sub	sp, #20
   1e41a:	4605      	mov	r5, r0
   1e41c:	4688      	mov	r8, r1
   1e41e:	4614      	mov	r4, r2
   1e420:	461f      	mov	r7, r3
   1e422:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    rc = log_chk_type(etype);
   1e424:	4618      	mov	r0, r3
   1e426:	f7ff ffdd 	bl	1e3e4 <log_chk_type>
    assert(rc == OS_OK);
   1e42a:	2800      	cmp	r0, #0
   1e42c:	d136      	bne.n	1e49c <log_append_prepare+0x88>
    if (log->l_name == NULL || log->l_log == NULL) {
   1e42e:	682b      	ldr	r3, [r5, #0]
   1e430:	2b00      	cmp	r3, #0
   1e432:	d063      	beq.n	1e4fc <log_append_prepare+0xe8>
   1e434:	686b      	ldr	r3, [r5, #4]
   1e436:	2b00      	cmp	r3, #0
   1e438:	d063      	beq.n	1e502 <log_append_prepare+0xee>
    if (level > LOG_LEVEL_MAX) {
   1e43a:	2c0f      	cmp	r4, #15
   1e43c:	d900      	bls.n	1e440 <log_append_prepare+0x2c>
        level = LOG_LEVEL_MAX;
   1e43e:	240f      	movs	r4, #15
    if (log->l_log->log_type == LOG_TYPE_STORAGE) {
   1e440:	681b      	ldr	r3, [r3, #0]
   1e442:	2b02      	cmp	r3, #2
   1e444:	d030      	beq.n	1e4a8 <log_append_prepare+0x94>
    if (level < log->l_level) {
   1e446:	7d2b      	ldrb	r3, [r5, #20]
   1e448:	42a3      	cmp	r3, r4
   1e44a:	d85d      	bhi.n	1e508 <log_append_prepare+0xf4>
    if (level < log_level_get(module)) {
   1e44c:	4640      	mov	r0, r8
   1e44e:	f000 fa79 	bl	1e944 <log_level_get>
   1e452:	42a0      	cmp	r0, r4
   1e454:	d85b      	bhi.n	1e50e <log_append_prepare+0xfa>
    OS_ENTER_CRITICAL(sr);
   1e456:	f7eb ff9d 	bl	a394 <os_arch_save_sr>
    idx = g_log_info.li_next_index++;
   1e45a:	4b2e      	ldr	r3, [pc, #184]	; (1e514 <log_append_prepare+0x100>)
   1e45c:	681d      	ldr	r5, [r3, #0]
   1e45e:	1c6a      	adds	r2, r5, #1
   1e460:	601a      	str	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   1e462:	f7eb ff9d 	bl	a3a0 <os_arch_restore_sr>
    rc = os_gettimeofday(&tv, NULL);
   1e466:	2100      	movs	r1, #0
   1e468:	4668      	mov	r0, sp
   1e46a:	f7eb fea9 	bl	a1c0 <os_gettimeofday>
    if (rc || tv.tv_sec < UTC01_01_2016) {
   1e46e:	4681      	mov	r9, r0
   1e470:	b938      	cbnz	r0, 1e482 <log_append_prepare+0x6e>
   1e472:	9800      	ldr	r0, [sp, #0]
   1e474:	9901      	ldr	r1, [sp, #4]
   1e476:	4b28      	ldr	r3, [pc, #160]	; (1e518 <log_append_prepare+0x104>)
   1e478:	4283      	cmp	r3, r0
   1e47a:	f04f 0300 	mov.w	r3, #0
   1e47e:	418b      	sbcs	r3, r1
   1e480:	db16      	blt.n	1e4b0 <log_append_prepare+0x9c>
        ue->ue_ts = os_get_uptime_usec();
   1e482:	f7eb ff41 	bl	a308 <os_get_uptime_usec>
   1e486:	6030      	str	r0, [r6, #0]
   1e488:	6071      	str	r1, [r6, #4]
    ue->ue_level = level;
   1e48a:	7374      	strb	r4, [r6, #13]
    ue->ue_module = module;
   1e48c:	f886 800c 	strb.w	r8, [r6, #12]
    ue->ue_index = idx;
   1e490:	60b5      	str	r5, [r6, #8]
    assert(etype == LOG_ETYPE_STRING);
   1e492:	bb6f      	cbnz	r7, 1e4f0 <log_append_prepare+0xdc>
}
   1e494:	4648      	mov	r0, r9
   1e496:	b005      	add	sp, #20
   1e498:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    assert(rc == OS_OK);
   1e49c:	2300      	movs	r3, #0
   1e49e:	461a      	mov	r2, r3
   1e4a0:	4619      	mov	r1, r3
   1e4a2:	4618      	mov	r0, r3
   1e4a4:	f7ea fd5e 	bl	8f64 <__assert_func>
        log_written = 1;
   1e4a8:	4b1c      	ldr	r3, [pc, #112]	; (1e51c <log_append_prepare+0x108>)
   1e4aa:	2201      	movs	r2, #1
   1e4ac:	701a      	strb	r2, [r3, #0]
   1e4ae:	e7ca      	b.n	1e446 <log_append_prepare+0x32>
        ue->ue_ts = tv.tv_sec * 1000000 + tv.tv_usec;
   1e4b0:	014a      	lsls	r2, r1, #5
   1e4b2:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
   1e4b6:	0143      	lsls	r3, r0, #5
   1e4b8:	1a1b      	subs	r3, r3, r0
   1e4ba:	eb62 0201 	sbc.w	r2, r2, r1
   1e4be:	0252      	lsls	r2, r2, #9
   1e4c0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
   1e4c4:	025b      	lsls	r3, r3, #9
   1e4c6:	181b      	adds	r3, r3, r0
   1e4c8:	eb41 0c02 	adc.w	ip, r1, r2
   1e4cc:	ea4f 1e8c 	mov.w	lr, ip, lsl #6
   1e4d0:	ea4e 6e93 	orr.w	lr, lr, r3, lsr #26
   1e4d4:	019a      	lsls	r2, r3, #6
   1e4d6:	1ad3      	subs	r3, r2, r3
   1e4d8:	eb6e 020c 	sbc.w	r2, lr, ip
   1e4dc:	181b      	adds	r3, r3, r0
   1e4de:	eb41 0102 	adc.w	r1, r1, r2
   1e4e2:	9a02      	ldr	r2, [sp, #8]
   1e4e4:	189b      	adds	r3, r3, r2
   1e4e6:	eb41 71e2 	adc.w	r1, r1, r2, asr #31
   1e4ea:	6033      	str	r3, [r6, #0]
   1e4ec:	6071      	str	r1, [r6, #4]
   1e4ee:	e7cc      	b.n	1e48a <log_append_prepare+0x76>
    assert(etype == LOG_ETYPE_STRING);
   1e4f0:	2300      	movs	r3, #0
   1e4f2:	461a      	mov	r2, r3
   1e4f4:	4619      	mov	r1, r3
   1e4f6:	4618      	mov	r0, r3
   1e4f8:	f7ea fd34 	bl	8f64 <__assert_func>
        rc = -1;
   1e4fc:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   1e500:	e7c8      	b.n	1e494 <log_append_prepare+0x80>
   1e502:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   1e506:	e7c5      	b.n	1e494 <log_append_prepare+0x80>
        rc = -1;
   1e508:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   1e50c:	e7c2      	b.n	1e494 <log_append_prepare+0x80>
        rc = -1;
   1e50e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    return (rc);
   1e512:	e7bf      	b.n	1e494 <log_append_prepare+0x80>
   1e514:	20004828 	.word	0x20004828
   1e518:	5685c17f 	.word	0x5685c17f
   1e51c:	20004834 	.word	0x20004834

0001e520 <log_init>:
{
   1e520:	b510      	push	{r4, lr}
   1e522:	b082      	sub	sp, #8
    SYSINIT_ASSERT_ACTIVE();
   1e524:	4b11      	ldr	r3, [pc, #68]	; (1e56c <log_init+0x4c>)
   1e526:	781b      	ldrb	r3, [r3, #0]
   1e528:	b1d3      	cbz	r3, 1e560 <log_init+0x40>
    memset(g_log_module_list, 0, sizeof(g_log_module_list));
   1e52a:	2300      	movs	r3, #0
   1e52c:	4a10      	ldr	r2, [pc, #64]	; (1e570 <log_init+0x50>)
   1e52e:	6013      	str	r3, [r2, #0]
    log_written = 0;
   1e530:	4a10      	ldr	r2, [pc, #64]	; (1e574 <log_init+0x54>)
   1e532:	7013      	strb	r3, [r2, #0]
    STAILQ_INIT(&g_log_list);
   1e534:	4a10      	ldr	r2, [pc, #64]	; (1e578 <log_init+0x58>)
   1e536:	6013      	str	r3, [r2, #0]
   1e538:	6052      	str	r2, [r2, #4]
    g_log_info.li_version = MYNEWT_VAL(LOG_VERSION);
   1e53a:	4a10      	ldr	r2, [pc, #64]	; (1e57c <log_init+0x5c>)
   1e53c:	2102      	movs	r1, #2
   1e53e:	7111      	strb	r1, [r2, #4]
    g_log_info.li_next_index = 0;
   1e540:	6013      	str	r3, [r2, #0]
    rc = log_nmgr_register_group();
   1e542:	f000 fe07 	bl	1f154 <log_nmgr_register_group>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1e546:	b138      	cbz	r0, 1e558 <log_init+0x38>
   1e548:	2000      	movs	r0, #0
   1e54a:	9000      	str	r0, [sp, #0]
   1e54c:	4b0c      	ldr	r3, [pc, #48]	; (1e580 <log_init+0x60>)
   1e54e:	681c      	ldr	r4, [r3, #0]
   1e550:	4603      	mov	r3, r0
   1e552:	4602      	mov	r2, r0
   1e554:	4601      	mov	r1, r0
   1e556:	47a0      	blx	r4
    log_console_init();
   1e558:	f000 f9ce 	bl	1e8f8 <log_console_init>
}
   1e55c:	b002      	add	sp, #8
   1e55e:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1e560:	461a      	mov	r2, r3
   1e562:	4619      	mov	r1, r3
   1e564:	4618      	mov	r0, r3
   1e566:	f7ea fcfd 	bl	8f64 <__assert_func>
   1e56a:	bf00      	nop
   1e56c:	20004538 	.word	0x20004538
   1e570:	20004830 	.word	0x20004830
   1e574:	20004834 	.word	0x20004834
   1e578:	20000fac 	.word	0x20000fac
   1e57c:	20004828 	.word	0x20004828
   1e580:	2000064c 	.word	0x2000064c

0001e584 <log_list_get_next>:
    if (log == NULL) {
   1e584:	b108      	cbz	r0, 1e58a <log_list_get_next+0x6>
        next = STAILQ_NEXT(log, l_next);
   1e586:	68c0      	ldr	r0, [r0, #12]
}
   1e588:	4770      	bx	lr
        next = STAILQ_FIRST(&g_log_list);
   1e58a:	4b01      	ldr	r3, [pc, #4]	; (1e590 <log_list_get_next+0xc>)
   1e58c:	6818      	ldr	r0, [r3, #0]
   1e58e:	4770      	bx	lr
   1e590:	20000fac 	.word	0x20000fac

0001e594 <log_module_get_name>:
    if (module < LOG_MODULE_PERUSER) {
   1e594:	283f      	cmp	r0, #63	; 0x3f
   1e596:	d81a      	bhi.n	1e5ce <log_module_get_name+0x3a>
        switch (module) {
   1e598:	2808      	cmp	r0, #8
   1e59a:	d806      	bhi.n	1e5aa <log_module_get_name+0x16>
   1e59c:	e8df f000 	tbb	[pc, r0]
   1e5a0:	0b09071e 	.word	0x0b09071e
   1e5a4:	13110f0d 	.word	0x13110f0d
   1e5a8:	15          	.byte	0x15
   1e5a9:	00          	.byte	0x00
   1e5aa:	2000      	movs	r0, #0
   1e5ac:	4770      	bx	lr
            return "OS";
   1e5ae:	480d      	ldr	r0, [pc, #52]	; (1e5e4 <log_module_get_name+0x50>)
   1e5b0:	4770      	bx	lr
            return "NEWTMGR";
   1e5b2:	480d      	ldr	r0, [pc, #52]	; (1e5e8 <log_module_get_name+0x54>)
   1e5b4:	4770      	bx	lr
            return "NIMBLE_CTLR";
   1e5b6:	480d      	ldr	r0, [pc, #52]	; (1e5ec <log_module_get_name+0x58>)
   1e5b8:	4770      	bx	lr
            return "NIMBLE_HOST";
   1e5ba:	480d      	ldr	r0, [pc, #52]	; (1e5f0 <log_module_get_name+0x5c>)
   1e5bc:	4770      	bx	lr
            return "NFFS";
   1e5be:	480d      	ldr	r0, [pc, #52]	; (1e5f4 <log_module_get_name+0x60>)
   1e5c0:	4770      	bx	lr
            return "REBOOT";
   1e5c2:	480d      	ldr	r0, [pc, #52]	; (1e5f8 <log_module_get_name+0x64>)
   1e5c4:	4770      	bx	lr
            return "IOTIVITY";
   1e5c6:	480d      	ldr	r0, [pc, #52]	; (1e5fc <log_module_get_name+0x68>)
   1e5c8:	4770      	bx	lr
            return "TEST";
   1e5ca:	480d      	ldr	r0, [pc, #52]	; (1e600 <log_module_get_name+0x6c>)
   1e5cc:	4770      	bx	lr
    } else if (module - LOG_MODULE_PERUSER < MYNEWT_VAL(LOG_MAX_USER_MODULES)) {
   1e5ce:	2840      	cmp	r0, #64	; 0x40
   1e5d0:	d806      	bhi.n	1e5e0 <log_module_get_name+0x4c>
        return g_log_module_list[module - LOG_MODULE_PERUSER];
   1e5d2:	3840      	subs	r0, #64	; 0x40
   1e5d4:	4b0b      	ldr	r3, [pc, #44]	; (1e604 <log_module_get_name+0x70>)
   1e5d6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1e5da:	4770      	bx	lr
            return "DEFAULT";
   1e5dc:	480a      	ldr	r0, [pc, #40]	; (1e608 <log_module_get_name+0x74>)
   1e5de:	4770      	bx	lr
    return NULL;
   1e5e0:	2000      	movs	r0, #0
}
   1e5e2:	4770      	bx	lr
   1e5e4:	00024be8 	.word	0x00024be8
   1e5e8:	00024bec 	.word	0x00024bec
   1e5ec:	00024bf4 	.word	0x00024bf4
   1e5f0:	00024c00 	.word	0x00024c00
   1e5f4:	00024c0c 	.word	0x00024c0c
   1e5f8:	00024c14 	.word	0x00024c14
   1e5fc:	00024c1c 	.word	0x00024c1c
   1e600:	00024c28 	.word	0x00024c28
   1e604:	20004830 	.word	0x20004830
   1e608:	00024be0 	.word	0x00024be0

0001e60c <log_append_body>:
}

int
log_append_body(struct log *log, uint8_t module, uint8_t level, uint8_t etype,
                const void *body, uint16_t body_len)
{
   1e60c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e610:	b087      	sub	sp, #28
   1e612:	4604      	mov	r4, r0
   1e614:	460d      	mov	r5, r1
   1e616:	4691      	mov	r9, r2
   1e618:	461e      	mov	r6, r3
   1e61a:	f8bd 803c 	ldrh.w	r8, [sp, #60]	; 0x3c
    struct log_entry_hdr hdr;
    int rc;

    LOG_STATS_INC(log, writes);

    rc = log_chk_max_entry_len(log, body_len);
   1e61e:	4641      	mov	r1, r8
   1e620:	f7ff fee2 	bl	1e3e8 <log_chk_max_entry_len>
    if (rc != OS_OK) {
   1e624:	4607      	mov	r7, r0
   1e626:	b118      	cbz	r0, 1e630 <log_append_body+0x24>
    }

    log_call_append_cb(log, hdr.ue_index);

    return 0;
}
   1e628:	4638      	mov	r0, r7
   1e62a:	b007      	add	sp, #28
   1e62c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    rc = log_append_prepare(log, module, level, etype, &hdr);
   1e630:	ab02      	add	r3, sp, #8
   1e632:	9300      	str	r3, [sp, #0]
   1e634:	4633      	mov	r3, r6
   1e636:	464a      	mov	r2, r9
   1e638:	4629      	mov	r1, r5
   1e63a:	4620      	mov	r0, r4
   1e63c:	f7ff feea 	bl	1e414 <log_append_prepare>
    if (rc != 0) {
   1e640:	4607      	mov	r7, r0
   1e642:	2800      	cmp	r0, #0
   1e644:	d1f0      	bne.n	1e628 <log_append_body+0x1c>
    rc = log->l_log->log_append_body(log, &hdr, body, body_len);
   1e646:	6863      	ldr	r3, [r4, #4]
   1e648:	691d      	ldr	r5, [r3, #16]
   1e64a:	4643      	mov	r3, r8
   1e64c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1e64e:	a902      	add	r1, sp, #8
   1e650:	4620      	mov	r0, r4
   1e652:	47a8      	blx	r5
    if (rc != 0) {
   1e654:	4607      	mov	r7, r0
   1e656:	2800      	cmp	r0, #0
   1e658:	d1e6      	bne.n	1e628 <log_append_body+0x1c>
    log_call_append_cb(log, hdr.ue_index);
   1e65a:	9904      	ldr	r1, [sp, #16]
   1e65c:	4620      	mov	r0, r4
   1e65e:	f7ff fecd 	bl	1e3fc <log_call_append_cb>
    return 0;
   1e662:	e7e1      	b.n	1e628 <log_append_body+0x1c>

0001e664 <log_printf>:
}

void
log_printf(struct log *log, uint8_t module, uint8_t level,
           const char *msg, ...)
{
   1e664:	b408      	push	{r3}
   1e666:	b570      	push	{r4, r5, r6, lr}
   1e668:	b0a5      	sub	sp, #148	; 0x94
   1e66a:	4604      	mov	r4, r0
   1e66c:	460d      	mov	r5, r1
   1e66e:	4616      	mov	r6, r2
   1e670:	ab29      	add	r3, sp, #164	; 0xa4
   1e672:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    char buf[LOG_PRINTF_MAX_ENTRY_LEN];
    int len;

    va_start(args, msg);
   1e676:	9323      	str	r3, [sp, #140]	; 0x8c
    len = vsnprintf(buf, LOG_PRINTF_MAX_ENTRY_LEN, msg, args);
   1e678:	2180      	movs	r1, #128	; 0x80
   1e67a:	a803      	add	r0, sp, #12
   1e67c:	f7ef fe52 	bl	e324 <vsnprintf>
    va_end(args);
    if (len >= LOG_PRINTF_MAX_ENTRY_LEN) {
   1e680:	287f      	cmp	r0, #127	; 0x7f
   1e682:	dd00      	ble.n	1e686 <log_printf+0x22>
        len = LOG_PRINTF_MAX_ENTRY_LEN-1;
   1e684:	207f      	movs	r0, #127	; 0x7f
    }

    log_append_body(log, module, level, LOG_ETYPE_STRING, buf, len);
   1e686:	b280      	uxth	r0, r0
   1e688:	9001      	str	r0, [sp, #4]
   1e68a:	ab03      	add	r3, sp, #12
   1e68c:	9300      	str	r3, [sp, #0]
   1e68e:	2300      	movs	r3, #0
   1e690:	4632      	mov	r2, r6
   1e692:	4629      	mov	r1, r5
   1e694:	4620      	mov	r0, r4
   1e696:	f7ff ffb9 	bl	1e60c <log_append_body>
}
   1e69a:	b025      	add	sp, #148	; 0x94
   1e69c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1e6a0:	b001      	add	sp, #4
   1e6a2:	4770      	bx	lr

0001e6a4 <log_walk>:

int
log_walk(struct log *log, log_walk_func_t walk_func,
         struct log_offset *log_offset)
{
   1e6a4:	b508      	push	{r3, lr}
    int rc;

    rc = log->l_log->log_walk(log, walk_func, log_offset);
   1e6a6:	6843      	ldr	r3, [r0, #4]
   1e6a8:	69db      	ldr	r3, [r3, #28]
   1e6aa:	4798      	blx	r3
    }

    return (0);
err:
    return (rc);
}
   1e6ac:	bd08      	pop	{r3, pc}
	...

0001e6b0 <log_read_last_hdr>:
{
   1e6b0:	b500      	push	{lr}
   1e6b2:	b089      	sub	sp, #36	; 0x24
    arg.hdr = out_hdr;
   1e6b4:	9106      	str	r1, [sp, #24]
    arg.read_success = 0;
   1e6b6:	2300      	movs	r3, #0
   1e6b8:	9307      	str	r3, [sp, #28]
    log_offset.lo_arg = &arg;
   1e6ba:	aa06      	add	r2, sp, #24
   1e6bc:	9204      	str	r2, [sp, #16]
    log_offset.lo_ts = -1;
   1e6be:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 1e6e8 <log_read_last_hdr+0x38>
   1e6c2:	ed8d 7b00 	vstr	d7, [sp]
    log_offset.lo_index = 0;
   1e6c6:	9302      	str	r3, [sp, #8]
    log_offset.lo_data_len = 0;
   1e6c8:	9303      	str	r3, [sp, #12]
    log_walk(log, log_read_hdr_walk, &log_offset);
   1e6ca:	466a      	mov	r2, sp
   1e6cc:	4908      	ldr	r1, [pc, #32]	; (1e6f0 <log_read_last_hdr+0x40>)
   1e6ce:	f7ff ffe9 	bl	1e6a4 <log_walk>
    if (!arg.read_success) {
   1e6d2:	9b07      	ldr	r3, [sp, #28]
   1e6d4:	b11b      	cbz	r3, 1e6de <log_read_last_hdr+0x2e>
    return 0;
   1e6d6:	2000      	movs	r0, #0
}
   1e6d8:	b009      	add	sp, #36	; 0x24
   1e6da:	f85d fb04 	ldr.w	pc, [sp], #4
        return -1;
   1e6de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e6e2:	e7f9      	b.n	1e6d8 <log_read_last_hdr+0x28>
   1e6e4:	f3af 8000 	nop.w
   1e6e8:	ffffffff 	.word	0xffffffff
   1e6ec:	ffffffff 	.word	0xffffffff
   1e6f0:	0001e7c1 	.word	0x0001e7c1

0001e6f4 <log_register>:
{
   1e6f4:	b530      	push	{r4, r5, lr}
   1e6f6:	b085      	sub	sp, #20
   1e6f8:	460c      	mov	r4, r1
   1e6fa:	f89d 1020 	ldrb.w	r1, [sp, #32]
    assert(!log_written);
   1e6fe:	4d1f      	ldr	r5, [pc, #124]	; (1e77c <log_register+0x88>)
   1e700:	782d      	ldrb	r5, [r5, #0]
   1e702:	bb0d      	cbnz	r5, 1e748 <log_register+0x54>
    if (level > LOG_LEVEL_MAX) {
   1e704:	290f      	cmp	r1, #15
   1e706:	d900      	bls.n	1e70a <log_register+0x16>
        level = LOG_LEVEL_MAX;
   1e708:	210f      	movs	r1, #15
    log->l_name = name;
   1e70a:	6020      	str	r0, [r4, #0]
    log->l_log = lh;
   1e70c:	6062      	str	r2, [r4, #4]
    log->l_arg = arg;
   1e70e:	60a3      	str	r3, [r4, #8]
    log->l_level = level;
   1e710:	7521      	strb	r1, [r4, #20]
    log->l_append_cb = NULL;
   1e712:	2300      	movs	r3, #0
   1e714:	6123      	str	r3, [r4, #16]
    log->l_max_entry_len = 0;
   1e716:	82e3      	strh	r3, [r4, #22]
    if (!log_registered(log)) {
   1e718:	4620      	mov	r0, r4
   1e71a:	f7ff fe55 	bl	1e3c8 <log_registered>
   1e71e:	b938      	cbnz	r0, 1e730 <log_register+0x3c>
        STAILQ_INSERT_TAIL(&g_log_list, log, l_next);
   1e720:	2300      	movs	r3, #0
   1e722:	60e3      	str	r3, [r4, #12]
   1e724:	4b16      	ldr	r3, [pc, #88]	; (1e780 <log_register+0x8c>)
   1e726:	685a      	ldr	r2, [r3, #4]
   1e728:	6014      	str	r4, [r2, #0]
   1e72a:	f104 020c 	add.w	r2, r4, #12
   1e72e:	605a      	str	r2, [r3, #4]
    if (log->l_log->log_registered) {
   1e730:	6863      	ldr	r3, [r4, #4]
   1e732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1e734:	b10b      	cbz	r3, 1e73a <log_register+0x46>
        log->l_log->log_registered(log);
   1e736:	4620      	mov	r0, r4
   1e738:	4798      	blx	r3
    if (log->l_log->log_type == LOG_TYPE_STORAGE) {
   1e73a:	6863      	ldr	r3, [r4, #4]
   1e73c:	681b      	ldr	r3, [r3, #0]
   1e73e:	2b02      	cmp	r3, #2
   1e740:	d008      	beq.n	1e754 <log_register+0x60>
}
   1e742:	2000      	movs	r0, #0
   1e744:	b005      	add	sp, #20
   1e746:	bd30      	pop	{r4, r5, pc}
    assert(!log_written);
   1e748:	2300      	movs	r3, #0
   1e74a:	461a      	mov	r2, r3
   1e74c:	4619      	mov	r1, r3
   1e74e:	4618      	mov	r0, r3
   1e750:	f7ea fc08 	bl	8f64 <__assert_func>
        rc = log_read_last_hdr(log, &hdr);
   1e754:	4669      	mov	r1, sp
   1e756:	4620      	mov	r0, r4
   1e758:	f7ff ffaa 	bl	1e6b0 <log_read_last_hdr>
        if (rc == 0) {
   1e75c:	2800      	cmp	r0, #0
   1e75e:	d1f0      	bne.n	1e742 <log_register+0x4e>
            OS_ENTER_CRITICAL(sr);
   1e760:	f7eb fe18 	bl	a394 <os_arch_save_sr>
            if (hdr.ue_index >= g_log_info.li_next_index) {
   1e764:	9b02      	ldr	r3, [sp, #8]
   1e766:	4a07      	ldr	r2, [pc, #28]	; (1e784 <log_register+0x90>)
   1e768:	6812      	ldr	r2, [r2, #0]
   1e76a:	4293      	cmp	r3, r2
   1e76c:	d302      	bcc.n	1e774 <log_register+0x80>
                g_log_info.li_next_index = hdr.ue_index + 1;
   1e76e:	3301      	adds	r3, #1
   1e770:	4a04      	ldr	r2, [pc, #16]	; (1e784 <log_register+0x90>)
   1e772:	6013      	str	r3, [r2, #0]
            OS_EXIT_CRITICAL(sr);
   1e774:	f7eb fe14 	bl	a3a0 <os_arch_restore_sr>
   1e778:	e7e3      	b.n	1e742 <log_register+0x4e>
   1e77a:	bf00      	nop
   1e77c:	20004834 	.word	0x20004834
   1e780:	20000fac 	.word	0x20000fac
   1e784:	20004828 	.word	0x20004828

0001e788 <log_walk_body>:
}

int
log_walk_body(struct log *log, log_walk_body_func_t walk_body_func,
              struct log_offset *log_offset)
{
   1e788:	b510      	push	{r4, lr}
   1e78a:	b082      	sub	sp, #8
   1e78c:	4614      	mov	r4, r2
    struct log_walk_body_arg lwba = {
   1e78e:	9100      	str	r1, [sp, #0]
        .fn = walk_body_func,
        .arg = log_offset->lo_arg,
   1e790:	6913      	ldr	r3, [r2, #16]
    struct log_walk_body_arg lwba = {
   1e792:	9301      	str	r3, [sp, #4]
    };
    int rc;

    log_offset->lo_arg = &lwba;
   1e794:	f8c2 d010 	str.w	sp, [r2, #16]
    rc = log->l_log->log_walk(log, log_walk_body_fn, log_offset);
   1e798:	6843      	ldr	r3, [r0, #4]
   1e79a:	69db      	ldr	r3, [r3, #28]
   1e79c:	4902      	ldr	r1, [pc, #8]	; (1e7a8 <log_walk_body+0x20>)
   1e79e:	4798      	blx	r3
    log_offset->lo_arg = lwba.arg;
   1e7a0:	9b01      	ldr	r3, [sp, #4]
   1e7a2:	6123      	str	r3, [r4, #16]

    return rc;
}
   1e7a4:	b002      	add	sp, #8
   1e7a6:	bd10      	pop	{r4, pc}
   1e7a8:	0001e805 	.word	0x0001e805

0001e7ac <log_read>:
 * @return                      The number of bytes read; 0 on failure.
 */
int
log_read(struct log *log, void *dptr, void *buf, uint16_t off,
         uint16_t len)
{
   1e7ac:	b530      	push	{r4, r5, lr}
   1e7ae:	b083      	sub	sp, #12
    int rc;

    rc = log->l_log->log_read(log, dptr, buf, off, len);
   1e7b0:	6844      	ldr	r4, [r0, #4]
   1e7b2:	6864      	ldr	r4, [r4, #4]
   1e7b4:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   1e7b8:	9500      	str	r5, [sp, #0]
   1e7ba:	47a0      	blx	r4

    return (rc);
}
   1e7bc:	b003      	add	sp, #12
   1e7be:	bd30      	pop	{r4, r5, pc}

0001e7c0 <log_read_hdr_walk>:
{
   1e7c0:	b510      	push	{r4, lr}
   1e7c2:	b082      	sub	sp, #8
   1e7c4:	460b      	mov	r3, r1
   1e7c6:	4611      	mov	r1, r2
    arg = log_offset->lo_arg;
   1e7c8:	691c      	ldr	r4, [r3, #16]
    rc = log_read(log, dptr, arg->hdr, 0, sizeof *arg->hdr);
   1e7ca:	6822      	ldr	r2, [r4, #0]
   1e7cc:	230e      	movs	r3, #14
   1e7ce:	9300      	str	r3, [sp, #0]
   1e7d0:	2300      	movs	r3, #0
   1e7d2:	f7ff ffeb 	bl	1e7ac <log_read>
    if (rc >= sizeof *arg->hdr) {
   1e7d6:	280d      	cmp	r0, #13
   1e7d8:	d901      	bls.n	1e7de <log_read_hdr_walk+0x1e>
        arg->read_success = 1;
   1e7da:	2301      	movs	r3, #1
   1e7dc:	6063      	str	r3, [r4, #4]
}
   1e7de:	2001      	movs	r0, #1
   1e7e0:	b002      	add	sp, #8
   1e7e2:	bd10      	pop	{r4, pc}

0001e7e4 <log_read_hdr>:

int
log_read_hdr(struct log *log, void *dptr, struct log_entry_hdr *hdr)
{
   1e7e4:	b500      	push	{lr}
   1e7e6:	b083      	sub	sp, #12
    int bytes_read;

    bytes_read = log_read(log, dptr, hdr, 0, LOG_ENTRY_HDR_SIZE);
   1e7e8:	230e      	movs	r3, #14
   1e7ea:	9300      	str	r3, [sp, #0]
   1e7ec:	2300      	movs	r3, #0
   1e7ee:	f7ff ffdd 	bl	1e7ac <log_read>
    if (bytes_read != LOG_ENTRY_HDR_SIZE) {
   1e7f2:	280e      	cmp	r0, #14
   1e7f4:	d103      	bne.n	1e7fe <log_read_hdr+0x1a>
        return SYS_EIO;
    }

    return 0;
   1e7f6:	2000      	movs	r0, #0
}
   1e7f8:	b003      	add	sp, #12
   1e7fa:	f85d fb04 	ldr.w	pc, [sp], #4
        return SYS_EIO;
   1e7fe:	f06f 0004 	mvn.w	r0, #4
   1e802:	e7f9      	b.n	1e7f8 <log_read_hdr+0x14>

0001e804 <log_walk_body_fn>:
{
   1e804:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e808:	b087      	sub	sp, #28
   1e80a:	4680      	mov	r8, r0
   1e80c:	460c      	mov	r4, r1
   1e80e:	4616      	mov	r6, r2
   1e810:	4699      	mov	r9, r3
    lwba = log_offset->lo_arg;
   1e812:	690f      	ldr	r7, [r1, #16]
    rc = log_read_hdr(log, dptr, &ueh);
   1e814:	aa02      	add	r2, sp, #8
   1e816:	4631      	mov	r1, r6
   1e818:	f7ff ffe4 	bl	1e7e4 <log_read_hdr>
    if (rc != 0) {
   1e81c:	b988      	cbnz	r0, 1e842 <log_walk_body_fn+0x3e>
    if (log_offset->lo_index <= ueh.ue_index) {
   1e81e:	68a2      	ldr	r2, [r4, #8]
   1e820:	9b04      	ldr	r3, [sp, #16]
   1e822:	429a      	cmp	r2, r3
   1e824:	d80d      	bhi.n	1e842 <log_walk_body_fn+0x3e>
        len -= sizeof ueh;
   1e826:	f1a9 050e 	sub.w	r5, r9, #14
   1e82a:	b2ad      	uxth	r5, r5
        log_offset->lo_arg = lwba->arg;
   1e82c:	687b      	ldr	r3, [r7, #4]
   1e82e:	6123      	str	r3, [r4, #16]
        rc = lwba->fn(log, log_offset, &ueh, dptr, len);
   1e830:	f8d7 9000 	ldr.w	r9, [r7]
   1e834:	9500      	str	r5, [sp, #0]
   1e836:	4633      	mov	r3, r6
   1e838:	aa02      	add	r2, sp, #8
   1e83a:	4621      	mov	r1, r4
   1e83c:	4640      	mov	r0, r8
   1e83e:	47c8      	blx	r9
        log_offset->lo_arg = lwba;
   1e840:	6127      	str	r7, [r4, #16]
}
   1e842:	b007      	add	sp, #28
   1e844:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001e848 <log_read_body>:

int
log_read_body(struct log *log, void *dptr, void *buf, uint16_t off,
              uint16_t len)
{
   1e848:	b510      	push	{r4, lr}
   1e84a:	b082      	sub	sp, #8
    return log_read(log, dptr, buf, LOG_ENTRY_HDR_SIZE + off, len);
   1e84c:	330e      	adds	r3, #14
   1e84e:	f8bd 4010 	ldrh.w	r4, [sp, #16]
   1e852:	9400      	str	r4, [sp, #0]
   1e854:	b29b      	uxth	r3, r3
   1e856:	f7ff ffa9 	bl	1e7ac <log_read>
}
   1e85a:	b002      	add	sp, #8
   1e85c:	bd10      	pop	{r4, pc}

0001e85e <log_flush>:
    return log_read_mbuf(log, dptr, om, LOG_ENTRY_HDR_SIZE + off, len);
}

int
log_flush(struct log *log)
{
   1e85e:	b508      	push	{r3, lr}
    int rc;

    rc = log->l_log->log_flush(log);
   1e860:	6843      	ldr	r3, [r0, #4]
   1e862:	6a1b      	ldr	r3, [r3, #32]
   1e864:	4798      	blx	r3
    }

    return (0);
err:
    return (rc);
}
   1e866:	bd08      	pop	{r3, pc}

0001e868 <log_console_read>:
log_console_read(struct log *log, void *dptr, void *buf, uint16_t offset,
        uint16_t len)
{
    /* You don't read console, console read you */
    return (OS_EINVAL);
}
   1e868:	2002      	movs	r0, #2
   1e86a:	4770      	bx	lr

0001e86c <log_console_walk>:
log_console_walk(struct log *log, log_walk_func_t walk_func,
        struct log_offset *log_offset)
{
    /* You don't walk console, console walk you. */
    return (OS_EINVAL);
}
   1e86c:	2002      	movs	r0, #2
   1e86e:	4770      	bx	lr

0001e870 <log_console_flush>:
static int
log_console_flush(struct log *log)
{
    /* You don't flush console, console flush you. */
    return (OS_EINVAL);
}
   1e870:	2002      	movs	r0, #2
   1e872:	4770      	bx	lr

0001e874 <log_console_print_hdr>:
{
   1e874:	b500      	push	{lr}
   1e876:	b083      	sub	sp, #12
                   hdr->ue_ts, hdr->ue_module, hdr->ue_level);
   1e878:	7b03      	ldrb	r3, [r0, #12]
   1e87a:	7b42      	ldrb	r2, [r0, #13]
    console_printf("[ts=%lluus, mod=%u level=%u] ",
   1e87c:	9201      	str	r2, [sp, #4]
   1e87e:	9300      	str	r3, [sp, #0]
   1e880:	6802      	ldr	r2, [r0, #0]
   1e882:	6843      	ldr	r3, [r0, #4]
   1e884:	4802      	ldr	r0, [pc, #8]	; (1e890 <log_console_print_hdr+0x1c>)
   1e886:	f7f1 f8f1 	bl	fa6c <console_printf>
}
   1e88a:	b003      	add	sp, #12
   1e88c:	f85d fb04 	ldr.w	pc, [sp], #4
   1e890:	00024c30 	.word	0x00024c30

0001e894 <log_console_append_body>:
{
   1e894:	b570      	push	{r4, r5, r6, lr}
   1e896:	460e      	mov	r6, r1
   1e898:	4614      	mov	r4, r2
   1e89a:	461d      	mov	r5, r3
    if (!console_is_init()) {
   1e89c:	f7f1 f87c 	bl	f998 <console_is_init>
   1e8a0:	b130      	cbz	r0, 1e8b0 <log_console_append_body+0x1c>
    if (!console_is_midline) {
   1e8a2:	4b06      	ldr	r3, [pc, #24]	; (1e8bc <log_console_append_body+0x28>)
   1e8a4:	681b      	ldr	r3, [r3, #0]
   1e8a6:	b12b      	cbz	r3, 1e8b4 <log_console_append_body+0x20>
    console_write(body, body_len);
   1e8a8:	4629      	mov	r1, r5
   1e8aa:	4620      	mov	r0, r4
   1e8ac:	f7f0 feb6 	bl	f61c <console_write>
}
   1e8b0:	2000      	movs	r0, #0
   1e8b2:	bd70      	pop	{r4, r5, r6, pc}
        log_console_print_hdr(hdr);
   1e8b4:	4630      	mov	r0, r6
   1e8b6:	f7ff ffdd 	bl	1e874 <log_console_print_hdr>
   1e8ba:	e7f5      	b.n	1e8a8 <log_console_append_body+0x14>
   1e8bc:	200040cc 	.word	0x200040cc

0001e8c0 <log_console_append>:
{
   1e8c0:	b538      	push	{r3, r4, r5, lr}
   1e8c2:	460c      	mov	r4, r1
   1e8c4:	4615      	mov	r5, r2
    if (!console_is_init()) {
   1e8c6:	f7f1 f867 	bl	f998 <console_is_init>
   1e8ca:	b140      	cbz	r0, 1e8de <log_console_append+0x1e>
    if (!console_is_midline) {
   1e8cc:	4b07      	ldr	r3, [pc, #28]	; (1e8ec <log_console_append+0x2c>)
   1e8ce:	681b      	ldr	r3, [r3, #0]
   1e8d0:	b13b      	cbz	r3, 1e8e2 <log_console_append+0x22>
    console_write((char *) buf + LOG_ENTRY_HDR_SIZE, len - LOG_ENTRY_HDR_SIZE);
   1e8d2:	f1a5 010e 	sub.w	r1, r5, #14
   1e8d6:	f104 000e 	add.w	r0, r4, #14
   1e8da:	f7f0 fe9f 	bl	f61c <console_write>
}
   1e8de:	2000      	movs	r0, #0
   1e8e0:	bd38      	pop	{r3, r4, r5, pc}
        log_console_print_hdr(hdr);
   1e8e2:	4620      	mov	r0, r4
   1e8e4:	f7ff ffc6 	bl	1e874 <log_console_print_hdr>
   1e8e8:	e7f3      	b.n	1e8d2 <log_console_append+0x12>
   1e8ea:	bf00      	nop
   1e8ec:	200040cc 	.word	0x200040cc

0001e8f0 <log_console_get>:
}
   1e8f0:	4800      	ldr	r0, [pc, #0]	; (1e8f4 <log_console_get+0x4>)
   1e8f2:	4770      	bx	lr
   1e8f4:	20004838 	.word	0x20004838

0001e8f8 <log_console_init>:
    .log_flush = log_console_flush,
};

void
log_console_init(void)
{
   1e8f8:	b510      	push	{r4, lr}
   1e8fa:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1e8fc:	4b0c      	ldr	r3, [pc, #48]	; (1e930 <log_console_init+0x38>)
   1e8fe:	781b      	ldrb	r3, [r3, #0]
   1e900:	b18b      	cbz	r3, 1e926 <log_console_init+0x2e>

    rc = log_register("console", &log_console, &log_console_handler, NULL,
   1e902:	2300      	movs	r3, #0
   1e904:	9300      	str	r3, [sp, #0]
   1e906:	4a0b      	ldr	r2, [pc, #44]	; (1e934 <log_console_init+0x3c>)
   1e908:	490b      	ldr	r1, [pc, #44]	; (1e938 <log_console_init+0x40>)
   1e90a:	480c      	ldr	r0, [pc, #48]	; (1e93c <log_console_init+0x44>)
   1e90c:	f7ff fef2 	bl	1e6f4 <log_register>
                      MYNEWT_VAL(LOG_LEVEL));
    SYSINIT_PANIC_ASSERT(rc == 0);
   1e910:	b138      	cbz	r0, 1e922 <log_console_init+0x2a>
   1e912:	2000      	movs	r0, #0
   1e914:	9000      	str	r0, [sp, #0]
   1e916:	4b0a      	ldr	r3, [pc, #40]	; (1e940 <log_console_init+0x48>)
   1e918:	681c      	ldr	r4, [r3, #0]
   1e91a:	4603      	mov	r3, r0
   1e91c:	4602      	mov	r2, r0
   1e91e:	4601      	mov	r1, r0
   1e920:	47a0      	blx	r4
}
   1e922:	b002      	add	sp, #8
   1e924:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1e926:	461a      	mov	r2, r3
   1e928:	4619      	mov	r1, r3
   1e92a:	4618      	mov	r0, r3
   1e92c:	f7ea fb1a 	bl	8f64 <__assert_func>
   1e930:	20004538 	.word	0x20004538
   1e934:	00024c58 	.word	0x00024c58
   1e938:	20004838 	.word	0x20004838
   1e93c:	00024c50 	.word	0x00024c50
   1e940:	2000064c 	.word	0x2000064c

0001e944 <log_level_get>:
uint8_t
log_level_get(uint8_t module)
{
    uint8_t byte;

    byte = log_level_map[module / 2];
   1e944:	0843      	lsrs	r3, r0, #1
   1e946:	4a05      	ldr	r2, [pc, #20]	; (1e95c <log_level_get+0x18>)
   1e948:	5cd3      	ldrb	r3, [r2, r3]
    if (module % 2 == 0) {
   1e94a:	f010 0f01 	tst.w	r0, #1
   1e94e:	d102      	bne.n	1e956 <log_level_get+0x12>
        return byte & 0x0f;
   1e950:	f003 000f 	and.w	r0, r3, #15
   1e954:	4770      	bx	lr
    } else {
        return byte >> 4;
   1e956:	0918      	lsrs	r0, r3, #4
    }
}
   1e958:	4770      	bx	lr
   1e95a:	bf00      	nop
   1e95c:	20004850 	.word	0x20004850

0001e960 <log_level_set>:
int
log_level_set(uint8_t module, uint8_t level)
{
    uint8_t *byte;

    if (level > LOG_LEVEL_MAX) {
   1e960:	290f      	cmp	r1, #15
   1e962:	d900      	bls.n	1e966 <log_level_set+0x6>
        level = LOG_LEVEL_MAX;
   1e964:	210f      	movs	r1, #15
    }

    byte = &log_level_map[module / 2];
   1e966:	0843      	lsrs	r3, r0, #1
    if (module % 2 == 0) {
   1e968:	f010 0f01 	tst.w	r0, #1
   1e96c:	d107      	bne.n	1e97e <log_level_set+0x1e>
        *byte = (*byte & 0xf0) | level;
   1e96e:	4808      	ldr	r0, [pc, #32]	; (1e990 <log_level_set+0x30>)
   1e970:	56c2      	ldrsb	r2, [r0, r3]
   1e972:	f022 020f 	bic.w	r2, r2, #15
   1e976:	4311      	orrs	r1, r2
   1e978:	54c1      	strb	r1, [r0, r3]
    } else {
        *byte = (*byte & 0x0f) | (level << 4);
    }

    return 0;
}
   1e97a:	2000      	movs	r0, #0
   1e97c:	4770      	bx	lr
        *byte = (*byte & 0x0f) | (level << 4);
   1e97e:	4804      	ldr	r0, [pc, #16]	; (1e990 <log_level_set+0x30>)
   1e980:	56c2      	ldrsb	r2, [r0, r3]
   1e982:	f002 020f 	and.w	r2, r2, #15
   1e986:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
   1e98a:	54c1      	strb	r1, [r0, r3]
   1e98c:	e7f5      	b.n	1e97a <log_level_set+0x1a>
   1e98e:	bf00      	nop
   1e990:	20004850 	.word	0x20004850

0001e994 <cbor_cnt_writer>:
};

static inline int
cbor_cnt_writer(struct cbor_encoder_writer *arg, const char *data, int len) {
    struct CborCntWriter *cb = (struct CborCntWriter *) arg;
    cb->enc.bytes_written += len;
   1e994:	6843      	ldr	r3, [r0, #4]
   1e996:	4413      	add	r3, r2
   1e998:	6043      	str	r3, [r0, #4]
    return CborNoError;
}
   1e99a:	2000      	movs	r0, #0
   1e99c:	4770      	bx	lr

0001e99e <log_nmgr_clear>:
 * @param nmgr json buffer
 * @return 0 on success; non-zero on failure
 */
static int
log_nmgr_clear(struct mgmt_cbuf *cb)
{
   1e99e:	b538      	push	{r3, r4, r5, lr}
   1e9a0:	4605      	mov	r5, r0
    struct log *log;
    int rc;

    log = NULL;
   1e9a2:	2400      	movs	r4, #0
    while (1) {
        log = log_list_get_next(log);
   1e9a4:	4620      	mov	r0, r4
   1e9a6:	f7ff fded 	bl	1e584 <log_list_get_next>
        if (log == NULL) {
   1e9aa:	4604      	mov	r4, r0
   1e9ac:	b148      	cbz	r0, 1e9c2 <log_nmgr_clear+0x24>
            break;
        }

        if (log->l_log->log_type == LOG_TYPE_STREAM) {
   1e9ae:	6843      	ldr	r3, [r0, #4]
   1e9b0:	681b      	ldr	r3, [r3, #0]
   1e9b2:	2b00      	cmp	r3, #0
   1e9b4:	d0f6      	beq.n	1e9a4 <log_nmgr_clear+0x6>
            continue;
        }

        rc = log_flush(log);
   1e9b6:	f7ff ff52 	bl	1e85e <log_flush>
        if (rc) {
   1e9ba:	4603      	mov	r3, r0
   1e9bc:	2800      	cmp	r0, #0
   1e9be:	d0f1      	beq.n	1e9a4 <log_nmgr_clear+0x6>
   1e9c0:	e004      	b.n	1e9cc <log_nmgr_clear+0x2e>
            return rc;
        }
    }

    rc = mgmt_cbuf_setoerr(cb, 0);
   1e9c2:	2100      	movs	r1, #0
   1e9c4:	4628      	mov	r0, r5
   1e9c6:	f7fe fd09 	bl	1d3dc <mgmt_cbuf_setoerr>
   1e9ca:	4603      	mov	r3, r0
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1e9cc:	4618      	mov	r0, r3
   1e9ce:	bd38      	pop	{r3, r4, r5, pc}

0001e9d0 <log_nmgr_logs_list>:
{
   1e9d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e9d2:	b085      	sub	sp, #20
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1e9d4:	f100 070c 	add.w	r7, r0, #12
   1e9d8:	2202      	movs	r2, #2
   1e9da:	491c      	ldr	r1, [pc, #112]	; (1ea4c <log_nmgr_logs_list+0x7c>)
   1e9dc:	4638      	mov	r0, r7
   1e9de:	f7f4 fc04 	bl	131ea <cbor_encode_text_string>
   1e9e2:	4605      	mov	r5, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1e9e4:	2200      	movs	r2, #0
   1e9e6:	2300      	movs	r3, #0
   1e9e8:	4638      	mov	r0, r7
   1e9ea:	f7f4 fb83 	bl	130f4 <cbor_encode_int>
   1e9ee:	4305      	orrs	r5, r0
   1e9f0:	2208      	movs	r2, #8
   1e9f2:	4917      	ldr	r1, [pc, #92]	; (1ea50 <log_nmgr_logs_list+0x80>)
   1e9f4:	4638      	mov	r0, r7
   1e9f6:	f7f4 fbf8 	bl	131ea <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "log_list");
   1e9fa:	4305      	orrs	r5, r0
    g_err |= cbor_encoder_create_array(&cb->encoder, &log_list,
   1e9fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ea00:	4669      	mov	r1, sp
   1ea02:	4638      	mov	r0, r7
   1ea04:	f7f4 fbf8 	bl	131f8 <cbor_encoder_create_array>
   1ea08:	4305      	orrs	r5, r0
    log = NULL;
   1ea0a:	2400      	movs	r4, #0
        log = log_list_get_next(log);
   1ea0c:	4620      	mov	r0, r4
   1ea0e:	f7ff fdb9 	bl	1e584 <log_list_get_next>
        if (!log) {
   1ea12:	4604      	mov	r4, r0
   1ea14:	b170      	cbz	r0, 1ea34 <log_nmgr_logs_list+0x64>
        if (log->l_log->log_type == LOG_TYPE_STREAM) {
   1ea16:	6843      	ldr	r3, [r0, #4]
   1ea18:	681b      	ldr	r3, [r3, #0]
   1ea1a:	2b00      	cmp	r3, #0
   1ea1c:	d0f6      	beq.n	1ea0c <log_nmgr_logs_list+0x3c>
        g_err |= cbor_encode_text_stringz(&log_list, log->l_name);
   1ea1e:	6806      	ldr	r6, [r0, #0]
   1ea20:	4630      	mov	r0, r6
   1ea22:	f7ef f891 	bl	db48 <strlen>
   1ea26:	4602      	mov	r2, r0
   1ea28:	4631      	mov	r1, r6
   1ea2a:	4668      	mov	r0, sp
   1ea2c:	f7f4 fbdd 	bl	131ea <cbor_encode_text_string>
   1ea30:	4305      	orrs	r5, r0
   1ea32:	e7eb      	b.n	1ea0c <log_nmgr_logs_list+0x3c>
    g_err |= cbor_encoder_close_container(&cb->encoder, &log_list);
   1ea34:	4669      	mov	r1, sp
   1ea36:	4638      	mov	r0, r7
   1ea38:	f7f4 fbf1 	bl	1321e <cbor_encoder_close_container>
    if (g_err) {
   1ea3c:	ea55 0300 	orrs.w	r3, r5, r0
   1ea40:	d102      	bne.n	1ea48 <log_nmgr_logs_list+0x78>
    return (0);
   1ea42:	2000      	movs	r0, #0
}
   1ea44:	b005      	add	sp, #20
   1ea46:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return MGMT_ERR_ENOMEM;
   1ea48:	2002      	movs	r0, #2
   1ea4a:	e7fb      	b.n	1ea44 <log_nmgr_logs_list+0x74>
   1ea4c:	00023a48 	.word	0x00023a48
   1ea50:	00024c80 	.word	0x00024c80

0001ea54 <log_nmgr_module_list>:
{
   1ea54:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ea56:	b085      	sub	sp, #20
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1ea58:	f100 060c 	add.w	r6, r0, #12
   1ea5c:	2202      	movs	r2, #2
   1ea5e:	491f      	ldr	r1, [pc, #124]	; (1eadc <log_nmgr_module_list+0x88>)
   1ea60:	4630      	mov	r0, r6
   1ea62:	f7f4 fbc2 	bl	131ea <cbor_encode_text_string>
   1ea66:	4605      	mov	r5, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1ea68:	2200      	movs	r2, #0
   1ea6a:	2300      	movs	r3, #0
   1ea6c:	4630      	mov	r0, r6
   1ea6e:	f7f4 fb41 	bl	130f4 <cbor_encode_int>
   1ea72:	4305      	orrs	r5, r0
   1ea74:	220a      	movs	r2, #10
   1ea76:	491a      	ldr	r1, [pc, #104]	; (1eae0 <log_nmgr_module_list+0x8c>)
   1ea78:	4630      	mov	r0, r6
   1ea7a:	f7f4 fbb6 	bl	131ea <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "module_map");
   1ea7e:	4305      	orrs	r5, r0
    g_err |= cbor_encoder_create_map(&cb->encoder, &modules,
   1ea80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ea84:	4669      	mov	r1, sp
   1ea86:	4630      	mov	r0, r6
   1ea88:	f7f4 fbbb 	bl	13202 <cbor_encoder_create_map>
   1ea8c:	4305      	orrs	r5, r0
    module = LOG_MODULE_DEFAULT;
   1ea8e:	2400      	movs	r4, #0
    while (module < LOG_MODULE_MAX) {
   1ea90:	e000      	b.n	1ea94 <log_nmgr_module_list+0x40>
            module++;
   1ea92:	3401      	adds	r4, #1
    while (module < LOG_MODULE_MAX) {
   1ea94:	2cfe      	cmp	r4, #254	; 0xfe
   1ea96:	dc15      	bgt.n	1eac4 <log_nmgr_module_list+0x70>
        str = LOG_MODULE_STR(module);
   1ea98:	b2e0      	uxtb	r0, r4
   1ea9a:	f7ff fd7b 	bl	1e594 <log_module_get_name>
        if (!str) {
   1ea9e:	4607      	mov	r7, r0
   1eaa0:	2800      	cmp	r0, #0
   1eaa2:	d0f6      	beq.n	1ea92 <log_nmgr_module_list+0x3e>
   1eaa4:	f7ef f850 	bl	db48 <strlen>
   1eaa8:	4602      	mov	r2, r0
   1eaaa:	4639      	mov	r1, r7
   1eaac:	4668      	mov	r0, sp
   1eaae:	f7f4 fb9c 	bl	131ea <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&modules, str);
   1eab2:	4305      	orrs	r5, r0
        g_err |= cbor_encode_uint(&modules, module);
   1eab4:	4622      	mov	r2, r4
   1eab6:	17e3      	asrs	r3, r4, #31
   1eab8:	4668      	mov	r0, sp
   1eaba:	f7f4 fadb 	bl	13074 <cbor_encode_uint>
   1eabe:	4305      	orrs	r5, r0
        module++;
   1eac0:	3401      	adds	r4, #1
   1eac2:	e7e7      	b.n	1ea94 <log_nmgr_module_list+0x40>
    g_err |= cbor_encoder_close_container(&cb->encoder, &modules);
   1eac4:	4669      	mov	r1, sp
   1eac6:	4630      	mov	r0, r6
   1eac8:	f7f4 fba9 	bl	1321e <cbor_encoder_close_container>
    if (g_err) {
   1eacc:	ea55 0300 	orrs.w	r3, r5, r0
   1ead0:	d102      	bne.n	1ead8 <log_nmgr_module_list+0x84>
    return (0);
   1ead2:	2000      	movs	r0, #0
}
   1ead4:	b005      	add	sp, #20
   1ead6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return MGMT_ERR_ENOMEM;
   1ead8:	2002      	movs	r0, #2
   1eada:	e7fb      	b.n	1ead4 <log_nmgr_module_list+0x80>
   1eadc:	00023a48 	.word	0x00023a48
   1eae0:	00024c8c 	.word	0x00024c8c

0001eae4 <log_nmgr_level_list>:
{
   1eae4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1eae6:	b085      	sub	sp, #20
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1eae8:	f100 070c 	add.w	r7, r0, #12
   1eaec:	2202      	movs	r2, #2
   1eaee:	492a      	ldr	r1, [pc, #168]	; (1eb98 <log_nmgr_level_list+0xb4>)
   1eaf0:	4638      	mov	r0, r7
   1eaf2:	f7f4 fb7a 	bl	131ea <cbor_encode_text_string>
   1eaf6:	4606      	mov	r6, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1eaf8:	2200      	movs	r2, #0
   1eafa:	2300      	movs	r3, #0
   1eafc:	4638      	mov	r0, r7
   1eafe:	f7f4 faf9 	bl	130f4 <cbor_encode_int>
   1eb02:	4306      	orrs	r6, r0
   1eb04:	2209      	movs	r2, #9
   1eb06:	4925      	ldr	r1, [pc, #148]	; (1eb9c <log_nmgr_level_list+0xb8>)
   1eb08:	4638      	mov	r0, r7
   1eb0a:	f7f4 fb6e 	bl	131ea <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "level_map");
   1eb0e:	4306      	orrs	r6, r0
    g_err |= cbor_encoder_create_map(&cb->encoder, &level_map,
   1eb10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1eb14:	4669      	mov	r1, sp
   1eb16:	4638      	mov	r0, r7
   1eb18:	f7f4 fb73 	bl	13202 <cbor_encoder_create_map>
   1eb1c:	4306      	orrs	r6, r0
    level = LOG_LEVEL_DEBUG;
   1eb1e:	2400      	movs	r4, #0
    while (level < LOG_LEVEL_MAX) {
   1eb20:	e008      	b.n	1eb34 <log_nmgr_level_list+0x50>
        str = LOG_LEVEL_STR(level);
   1eb22:	4d1f      	ldr	r5, [pc, #124]	; (1eba0 <log_nmgr_level_list+0xbc>)
   1eb24:	e000      	b.n	1eb28 <log_nmgr_level_list+0x44>
   1eb26:	4d1f      	ldr	r5, [pc, #124]	; (1eba4 <log_nmgr_level_list+0xc0>)
        if (!strcmp(str, "UNKNOWN")) {
   1eb28:	491f      	ldr	r1, [pc, #124]	; (1eba8 <log_nmgr_level_list+0xc4>)
   1eb2a:	4628      	mov	r0, r5
   1eb2c:	f7ef f800 	bl	db30 <strcmp>
   1eb30:	b9a0      	cbnz	r0, 1eb5c <log_nmgr_level_list+0x78>
            level++;
   1eb32:	3401      	adds	r4, #1
    while (level < LOG_LEVEL_MAX) {
   1eb34:	2c0e      	cmp	r4, #14
   1eb36:	dc22      	bgt.n	1eb7e <log_nmgr_level_list+0x9a>
        str = LOG_LEVEL_STR(level);
   1eb38:	2c00      	cmp	r4, #0
   1eb3a:	d0f4      	beq.n	1eb26 <log_nmgr_level_list+0x42>
   1eb3c:	2c01      	cmp	r4, #1
   1eb3e:	d007      	beq.n	1eb50 <log_nmgr_level_list+0x6c>
   1eb40:	2c02      	cmp	r4, #2
   1eb42:	d007      	beq.n	1eb54 <log_nmgr_level_list+0x70>
   1eb44:	2c03      	cmp	r4, #3
   1eb46:	d007      	beq.n	1eb58 <log_nmgr_level_list+0x74>
   1eb48:	2c04      	cmp	r4, #4
   1eb4a:	d0ea      	beq.n	1eb22 <log_nmgr_level_list+0x3e>
   1eb4c:	4d16      	ldr	r5, [pc, #88]	; (1eba8 <log_nmgr_level_list+0xc4>)
   1eb4e:	e7eb      	b.n	1eb28 <log_nmgr_level_list+0x44>
   1eb50:	4d16      	ldr	r5, [pc, #88]	; (1ebac <log_nmgr_level_list+0xc8>)
   1eb52:	e7e9      	b.n	1eb28 <log_nmgr_level_list+0x44>
   1eb54:	4d16      	ldr	r5, [pc, #88]	; (1ebb0 <log_nmgr_level_list+0xcc>)
   1eb56:	e7e7      	b.n	1eb28 <log_nmgr_level_list+0x44>
   1eb58:	4d16      	ldr	r5, [pc, #88]	; (1ebb4 <log_nmgr_level_list+0xd0>)
   1eb5a:	e7e5      	b.n	1eb28 <log_nmgr_level_list+0x44>
   1eb5c:	4628      	mov	r0, r5
   1eb5e:	f7ee fff3 	bl	db48 <strlen>
   1eb62:	4602      	mov	r2, r0
   1eb64:	4629      	mov	r1, r5
   1eb66:	4668      	mov	r0, sp
   1eb68:	f7f4 fb3f 	bl	131ea <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&level_map, str);
   1eb6c:	4306      	orrs	r6, r0
        g_err |= cbor_encode_uint(&level_map, level);
   1eb6e:	4622      	mov	r2, r4
   1eb70:	17e3      	asrs	r3, r4, #31
   1eb72:	4668      	mov	r0, sp
   1eb74:	f7f4 fa7e 	bl	13074 <cbor_encode_uint>
   1eb78:	4306      	orrs	r6, r0
        level++;
   1eb7a:	3401      	adds	r4, #1
   1eb7c:	e7da      	b.n	1eb34 <log_nmgr_level_list+0x50>
    g_err |= cbor_encoder_close_container(&cb->encoder, &level_map);
   1eb7e:	4669      	mov	r1, sp
   1eb80:	4638      	mov	r0, r7
   1eb82:	f7f4 fb4c 	bl	1321e <cbor_encoder_close_container>
    if (g_err) {
   1eb86:	ea56 0300 	orrs.w	r3, r6, r0
   1eb8a:	d102      	bne.n	1eb92 <log_nmgr_level_list+0xae>
    return (0);
   1eb8c:	2000      	movs	r0, #0
}
   1eb8e:	b005      	add	sp, #20
   1eb90:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return MGMT_ERR_ENOMEM;
   1eb92:	2002      	movs	r0, #2
   1eb94:	e7fb      	b.n	1eb8e <log_nmgr_level_list+0xaa>
   1eb96:	bf00      	nop
   1eb98:	00023a48 	.word	0x00023a48
   1eb9c:	00024ccc 	.word	0x00024ccc
   1eba0:	00024cc0 	.word	0x00024cc0
   1eba4:	00024c98 	.word	0x00024c98
   1eba8:	00024cb8 	.word	0x00024cb8
   1ebac:	00024ca8 	.word	0x00024ca8
   1ebb0:	00024cb0 	.word	0x00024cb0
   1ebb4:	00024ca0 	.word	0x00024ca0

0001ebb8 <log_nmgr_modlevel_set>:
{
   1ebb8:	b570      	push	{r4, r5, r6, lr}
   1ebba:	b0b4      	sub	sp, #208	; 0xd0
   1ebbc:	4604      	mov	r4, r0
    const struct cbor_attr_t attr[4] = {
   1ebbe:	22c0      	movs	r2, #192	; 0xc0
   1ebc0:	2100      	movs	r1, #0
   1ebc2:	4668      	mov	r0, sp
   1ebc4:	f7ee ff89 	bl	dada <memset>
   1ebc8:	4b15      	ldr	r3, [pc, #84]	; (1ec20 <log_nmgr_modlevel_set+0x68>)
   1ebca:	9300      	str	r3, [sp, #0]
   1ebcc:	2302      	movs	r3, #2
   1ebce:	f88d 3004 	strb.w	r3, [sp, #4]
   1ebd2:	aa30      	add	r2, sp, #192	; 0xc0
   1ebd4:	9202      	str	r2, [sp, #8]
   1ebd6:	4a13      	ldr	r2, [pc, #76]	; (1ec24 <log_nmgr_modlevel_set+0x6c>)
   1ebd8:	920c      	str	r2, [sp, #48]	; 0x30
   1ebda:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   1ebde:	ab32      	add	r3, sp, #200	; 0xc8
   1ebe0:	930e      	str	r3, [sp, #56]	; 0x38
    rc = cbor_read_object(&cb->it, attr);
   1ebe2:	4669      	mov	r1, sp
   1ebe4:	f104 001c 	add.w	r0, r4, #28
   1ebe8:	f7f4 f918 	bl	12e1c <cbor_read_object>
    if (rc) {
   1ebec:	4605      	mov	r5, r0
   1ebee:	b110      	cbz	r0, 1ebf6 <log_nmgr_modlevel_set+0x3e>
}
   1ebf0:	4628      	mov	r0, r5
   1ebf2:	b034      	add	sp, #208	; 0xd0
   1ebf4:	bd70      	pop	{r4, r5, r6, pc}
    rc = log_level_set(module, level);
   1ebf6:	f89d 10c8 	ldrb.w	r1, [sp, #200]	; 0xc8
   1ebfa:	f89d 00c0 	ldrb.w	r0, [sp, #192]	; 0xc0
   1ebfe:	f7ff feaf 	bl	1e960 <log_level_set>
    if (rc) {
   1ec02:	4606      	mov	r6, r0
   1ec04:	b100      	cbz	r0, 1ec08 <log_nmgr_modlevel_set+0x50>
        rc = MGMT_ERR_EINVAL;
   1ec06:	2603      	movs	r6, #3
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1ec08:	340c      	adds	r4, #12
   1ec0a:	2202      	movs	r2, #2
   1ec0c:	4906      	ldr	r1, [pc, #24]	; (1ec28 <log_nmgr_modlevel_set+0x70>)
   1ec0e:	4620      	mov	r0, r4
   1ec10:	f7f4 faeb 	bl	131ea <cbor_encode_text_string>
    g_err |= cbor_encode_int(&cb->encoder, rc);
   1ec14:	4632      	mov	r2, r6
   1ec16:	17f3      	asrs	r3, r6, #31
   1ec18:	4620      	mov	r0, r4
   1ec1a:	f7f4 fa6b 	bl	130f4 <cbor_encode_int>
    return (rc);
   1ec1e:	e7e7      	b.n	1ebf0 <log_nmgr_modlevel_set+0x38>
   1ec20:	00024cd8 	.word	0x00024cd8
   1ec24:	00024ce4 	.word	0x00024ce4
   1ec28:	00023a48 	.word	0x00023a48

0001ec2c <log_nmgr_modlevel_get>:
{
   1ec2c:	b570      	push	{r4, r5, r6, lr}
   1ec2e:	b0b2      	sub	sp, #200	; 0xc8
   1ec30:	4604      	mov	r4, r0
    const struct cbor_attr_t attr[4] = {
   1ec32:	22c0      	movs	r2, #192	; 0xc0
   1ec34:	2100      	movs	r1, #0
   1ec36:	4668      	mov	r0, sp
   1ec38:	f7ee ff4f 	bl	dada <memset>
   1ec3c:	4b15      	ldr	r3, [pc, #84]	; (1ec94 <log_nmgr_modlevel_get+0x68>)
   1ec3e:	9300      	str	r3, [sp, #0]
   1ec40:	2302      	movs	r3, #2
   1ec42:	f88d 3004 	strb.w	r3, [sp, #4]
   1ec46:	ab30      	add	r3, sp, #192	; 0xc0
   1ec48:	9302      	str	r3, [sp, #8]
    rc = cbor_read_object(&cb->it, attr);
   1ec4a:	4669      	mov	r1, sp
   1ec4c:	f104 001c 	add.w	r0, r4, #28
   1ec50:	f7f4 f8e4 	bl	12e1c <cbor_read_object>
    if (rc) {
   1ec54:	4605      	mov	r5, r0
   1ec56:	b110      	cbz	r0, 1ec5e <log_nmgr_modlevel_get+0x32>
}
   1ec58:	4628      	mov	r0, r5
   1ec5a:	b032      	add	sp, #200	; 0xc8
   1ec5c:	bd70      	pop	{r4, r5, r6, pc}
    level = log_level_get(module);
   1ec5e:	f89d 00c0 	ldrb.w	r0, [sp, #192]	; 0xc0
   1ec62:	f7ff fe6f 	bl	1e944 <log_level_get>
   1ec66:	4606      	mov	r6, r0
    g_err |= cbor_encode_text_stringz(&cb->encoder, "level");
   1ec68:	340c      	adds	r4, #12
   1ec6a:	2205      	movs	r2, #5
   1ec6c:	490a      	ldr	r1, [pc, #40]	; (1ec98 <log_nmgr_modlevel_get+0x6c>)
   1ec6e:	4620      	mov	r0, r4
   1ec70:	f7f4 fabb 	bl	131ea <cbor_encode_text_string>
    g_err |= cbor_encode_uint(&cb->encoder, level);
   1ec74:	4632      	mov	r2, r6
   1ec76:	2300      	movs	r3, #0
   1ec78:	4620      	mov	r0, r4
   1ec7a:	f7f4 f9fb 	bl	13074 <cbor_encode_uint>
   1ec7e:	2202      	movs	r2, #2
   1ec80:	4906      	ldr	r1, [pc, #24]	; (1ec9c <log_nmgr_modlevel_get+0x70>)
   1ec82:	4620      	mov	r0, r4
   1ec84:	f7f4 fab1 	bl	131ea <cbor_encode_text_string>
    g_err |= cbor_encode_int(&cb->encoder, rc);
   1ec88:	462a      	mov	r2, r5
   1ec8a:	17eb      	asrs	r3, r5, #31
   1ec8c:	4620      	mov	r0, r4
   1ec8e:	f7f4 fa31 	bl	130f4 <cbor_encode_int>
    return (rc);
   1ec92:	e7e1      	b.n	1ec58 <log_nmgr_modlevel_get+0x2c>
   1ec94:	00024cd8 	.word	0x00024cd8
   1ec98:	00024ce4 	.word	0x00024ce4
   1ec9c:	00023a48 	.word	0x00023a48

0001eca0 <log_encode_entries>:
{
   1eca0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1eca4:	b093      	sub	sp, #76	; 0x4c
   1eca6:	4606      	mov	r6, r0
   1eca8:	460c      	mov	r4, r1
   1ecaa:	4690      	mov	r8, r2
   1ecac:	461f      	mov	r7, r3
    memset(&log_offset, 0, sizeof(log_offset));
   1ecae:	2200      	movs	r2, #0
   1ecb0:	920c      	str	r2, [sp, #48]	; 0x30
   1ecb2:	920d      	str	r2, [sp, #52]	; 0x34
   1ecb4:	920e      	str	r2, [sp, #56]	; 0x38
   1ecb6:	920f      	str	r2, [sp, #60]	; 0x3c
   1ecb8:	9210      	str	r2, [sp, #64]	; 0x40
   1ecba:	9211      	str	r2, [sp, #68]	; 0x44

static inline void
cbor_cnt_writer_init(struct CborCntWriter *cb) {
    cb->enc.bytes_written = 0;
   1ecbc:	9207      	str	r2, [sp, #28]
    cb->enc.write = &cbor_cnt_writer;
   1ecbe:	4b23      	ldr	r3, [pc, #140]	; (1ed4c <log_encode_entries+0xac>)
   1ecc0:	9306      	str	r3, [sp, #24]
    cbor_encoder_init(&cnt_encoder, &cnt_writer.enc, 0);
   1ecc2:	a906      	add	r1, sp, #24
   1ecc4:	a802      	add	r0, sp, #8
   1ecc6:	f7f4 f9d0 	bl	1306a <cbor_encoder_init>
   1ecca:	2207      	movs	r2, #7
   1eccc:	4920      	ldr	r1, [pc, #128]	; (1ed50 <log_encode_entries+0xb0>)
   1ecce:	a802      	add	r0, sp, #8
   1ecd0:	f7f4 fa8b 	bl	131ea <cbor_encode_text_string>
    g_err |= cbor_encoder_create_array(&cnt_encoder, &entries,
   1ecd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ecd8:	a908      	add	r1, sp, #32
   1ecda:	a802      	add	r0, sp, #8
   1ecdc:	f7f4 fa8c 	bl	131f8 <cbor_encoder_create_array>
    g_err |= cbor_encoder_close_container(&cnt_encoder, &entries);
   1ece0:	a908      	add	r1, sp, #32
   1ece2:	a802      	add	r0, sp, #8
   1ece4:	f7f4 fa9b 	bl	1321e <cbor_encoder_close_container>
{   return encoder->writer->bytes_written; }
   1ece8:	6823      	ldr	r3, [r4, #0]
   1ecea:	685b      	ldr	r3, [r3, #4]
   1ecec:	9a02      	ldr	r2, [sp, #8]
   1ecee:	6855      	ldr	r5, [r2, #4]
    rsp_len = cbor_encode_bytes_written(cb) +
   1ecf0:	441d      	add	r5, r3
    if (rsp_len > MYNEWT_VAL(LOG_NMGR_MAX_RSP_LEN)) {
   1ecf2:	f5b5 7fc8 	cmp.w	r5, #400	; 0x190
   1ecf6:	dd04      	ble.n	1ed02 <log_encode_entries+0x62>
        rc = OS_ENOMEM;
   1ecf8:	2501      	movs	r5, #1
}
   1ecfa:	4628      	mov	r0, r5
   1ecfc:	b013      	add	sp, #76	; 0x4c
   1ecfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1ed02:	2207      	movs	r2, #7
   1ed04:	4912      	ldr	r1, [pc, #72]	; (1ed50 <log_encode_entries+0xb0>)
   1ed06:	4620      	mov	r0, r4
   1ed08:	f7f4 fa6f 	bl	131ea <cbor_encode_text_string>
    g_err |= cbor_encoder_create_array(cb, &entries, CborIndefiniteLength);
   1ed0c:	f10d 0920 	add.w	r9, sp, #32
   1ed10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ed14:	4649      	mov	r1, r9
   1ed16:	4620      	mov	r0, r4
   1ed18:	f7f4 fa6e 	bl	131f8 <cbor_encoder_create_array>
    ed.counter = 0;
   1ed1c:	2300      	movs	r3, #0
   1ed1e:	9300      	str	r3, [sp, #0]
    ed.enc = &entries;
   1ed20:	f8cd 9004 	str.w	r9, [sp, #4]
    log_offset.lo_arg       = &ed;
   1ed24:	f8cd d040 	str.w	sp, [sp, #64]	; 0x40
    log_offset.lo_index     = index;
   1ed28:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1ed2a:	930e      	str	r3, [sp, #56]	; 0x38
    log_offset.lo_ts        = ts;
   1ed2c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
   1ed30:	970d      	str	r7, [sp, #52]	; 0x34
    log_offset.lo_data_len  = rsp_len;
   1ed32:	950f      	str	r5, [sp, #60]	; 0x3c
    rc = log_walk_body(log, log_nmgr_encode_entry, &log_offset);
   1ed34:	aa0c      	add	r2, sp, #48	; 0x30
   1ed36:	4907      	ldr	r1, [pc, #28]	; (1ed54 <log_encode_entries+0xb4>)
   1ed38:	4630      	mov	r0, r6
   1ed3a:	f7ff fd25 	bl	1e788 <log_walk_body>
   1ed3e:	4605      	mov	r5, r0
    g_err |= cbor_encoder_close_container(cb, &entries);
   1ed40:	4649      	mov	r1, r9
   1ed42:	4620      	mov	r0, r4
   1ed44:	f7f4 fa6b 	bl	1321e <cbor_encoder_close_container>
   1ed48:	e7d7      	b.n	1ecfa <log_encode_entries+0x5a>
   1ed4a:	bf00      	nop
   1ed4c:	0001e995 	.word	0x0001e995
   1ed50:	00024cec 	.word	0x00024cec
   1ed54:	0001ef1d 	.word	0x0001ef1d

0001ed58 <log_encode>:
{
   1ed58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ed5c:	b087      	sub	sp, #28
   1ed5e:	4605      	mov	r5, r0
   1ed60:	460e      	mov	r6, r1
   1ed62:	4690      	mov	r8, r2
   1ed64:	461f      	mov	r7, r3
    g_err |= cbor_encoder_create_map(cb, &logs, CborIndefiniteLength);
   1ed66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ed6a:	a902      	add	r1, sp, #8
   1ed6c:	4630      	mov	r0, r6
   1ed6e:	f7f4 fa48 	bl	13202 <cbor_encoder_create_map>
   1ed72:	4604      	mov	r4, r0
   1ed74:	2204      	movs	r2, #4
   1ed76:	4919      	ldr	r1, [pc, #100]	; (1eddc <log_encode+0x84>)
   1ed78:	a802      	add	r0, sp, #8
   1ed7a:	f7f4 fa36 	bl	131ea <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&logs, "name");
   1ed7e:	4304      	orrs	r4, r0
    g_err |= cbor_encode_text_stringz(&logs, log->l_name);
   1ed80:	f8d5 9000 	ldr.w	r9, [r5]
   1ed84:	4648      	mov	r0, r9
   1ed86:	f7ee fedf 	bl	db48 <strlen>
   1ed8a:	4602      	mov	r2, r0
   1ed8c:	4649      	mov	r1, r9
   1ed8e:	a802      	add	r0, sp, #8
   1ed90:	f7f4 fa2b 	bl	131ea <cbor_encode_text_string>
   1ed94:	4304      	orrs	r4, r0
   1ed96:	2204      	movs	r2, #4
   1ed98:	4911      	ldr	r1, [pc, #68]	; (1ede0 <log_encode+0x88>)
   1ed9a:	a802      	add	r0, sp, #8
   1ed9c:	f7f4 fa25 	bl	131ea <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&logs, "type");
   1eda0:	4304      	orrs	r4, r0
    g_err |= cbor_encode_uint(&logs, log->l_log->log_type);
   1eda2:	686b      	ldr	r3, [r5, #4]
   1eda4:	681a      	ldr	r2, [r3, #0]
   1eda6:	17d3      	asrs	r3, r2, #31
   1eda8:	a802      	add	r0, sp, #8
   1edaa:	f7f4 f963 	bl	13074 <cbor_encode_uint>
   1edae:	4304      	orrs	r4, r0
    rc = log_encode_entries(log, &logs, ts, index);
   1edb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1edb2:	9300      	str	r3, [sp, #0]
   1edb4:	4642      	mov	r2, r8
   1edb6:	463b      	mov	r3, r7
   1edb8:	a902      	add	r1, sp, #8
   1edba:	4628      	mov	r0, r5
   1edbc:	f7ff ff70 	bl	1eca0 <log_encode_entries>
   1edc0:	4605      	mov	r5, r0
    g_err |= cbor_encoder_close_container(cb, &logs);
   1edc2:	a902      	add	r1, sp, #8
   1edc4:	4630      	mov	r0, r6
   1edc6:	f7f4 fa2a 	bl	1321e <cbor_encoder_close_container>
    if (g_err) {
   1edca:	ea54 0300 	orrs.w	r3, r4, r0
   1edce:	d103      	bne.n	1edd8 <log_encode+0x80>
}
   1edd0:	4628      	mov	r0, r5
   1edd2:	b007      	add	sp, #28
   1edd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return MGMT_ERR_ENOMEM;
   1edd8:	2502      	movs	r5, #2
   1edda:	e7f9      	b.n	1edd0 <log_encode+0x78>
   1eddc:	00024d00 	.word	0x00024d00
   1ede0:	00024cf4 	.word	0x00024cf4

0001ede4 <log_nmgr_read>:
{
   1ede4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ede8:	b0cb      	sub	sp, #300	; 0x12c
   1edea:	4606      	mov	r6, r0
    char name[LOG_NAME_MAX_LEN] = {0};
   1edec:	2400      	movs	r4, #0
   1edee:	943a      	str	r4, [sp, #232]	; 0xe8
   1edf0:	223c      	movs	r2, #60	; 0x3c
   1edf2:	4621      	mov	r1, r4
   1edf4:	a83b      	add	r0, sp, #236	; 0xec
   1edf6:	f7ee fe70 	bl	dada <memset>
    const struct cbor_attr_t attr[4] = {
   1edfa:	22c0      	movs	r2, #192	; 0xc0
   1edfc:	4621      	mov	r1, r4
   1edfe:	a802      	add	r0, sp, #8
   1ee00:	f7ee fe6b 	bl	dada <memset>
   1ee04:	4b3e      	ldr	r3, [pc, #248]	; (1ef00 <log_nmgr_read+0x11c>)
   1ee06:	9302      	str	r3, [sp, #8]
   1ee08:	2304      	movs	r3, #4
   1ee0a:	f88d 300c 	strb.w	r3, [sp, #12]
   1ee0e:	ab3a      	add	r3, sp, #232	; 0xe8
   1ee10:	9304      	str	r3, [sp, #16]
   1ee12:	2340      	movs	r3, #64	; 0x40
   1ee14:	930c      	str	r3, [sp, #48]	; 0x30
   1ee16:	4b3b      	ldr	r3, [pc, #236]	; (1ef04 <log_nmgr_read+0x120>)
   1ee18:	930e      	str	r3, [sp, #56]	; 0x38
   1ee1a:	2301      	movs	r3, #1
   1ee1c:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
   1ee20:	ab38      	add	r3, sp, #224	; 0xe0
   1ee22:	9310      	str	r3, [sp, #64]	; 0x40
   1ee24:	4b38      	ldr	r3, [pc, #224]	; (1ef08 <log_nmgr_read+0x124>)
   1ee26:	931a      	str	r3, [sp, #104]	; 0x68
   1ee28:	2302      	movs	r3, #2
   1ee2a:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
   1ee2e:	ab36      	add	r3, sp, #216	; 0xd8
   1ee30:	931c      	str	r3, [sp, #112]	; 0x70
    rc = cbor_read_object(&cb->it, attr);
   1ee32:	a902      	add	r1, sp, #8
   1ee34:	f106 001c 	add.w	r0, r6, #28
   1ee38:	f7f3 fff0 	bl	12e1c <cbor_read_object>
    if (rc) {
   1ee3c:	4681      	mov	r9, r0
   1ee3e:	b118      	cbz	r0, 1ee48 <log_nmgr_read+0x64>
}
   1ee40:	4648      	mov	r0, r9
   1ee42:	b04b      	add	sp, #300	; 0x12c
   1ee44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    g_err |= cbor_encode_text_stringz(&cb->encoder, "next_index");
   1ee48:	360c      	adds	r6, #12
   1ee4a:	220a      	movs	r2, #10
   1ee4c:	492f      	ldr	r1, [pc, #188]	; (1ef0c <log_nmgr_read+0x128>)
   1ee4e:	4630      	mov	r0, r6
   1ee50:	f7f4 f9cb 	bl	131ea <cbor_encode_text_string>
   1ee54:	4607      	mov	r7, r0
    g_err |= cbor_encode_int(&cb->encoder, g_log_info.li_next_index);
   1ee56:	4b2e      	ldr	r3, [pc, #184]	; (1ef10 <log_nmgr_read+0x12c>)
   1ee58:	681a      	ldr	r2, [r3, #0]
   1ee5a:	4623      	mov	r3, r4
   1ee5c:	4630      	mov	r0, r6
   1ee5e:	f7f4 f949 	bl	130f4 <cbor_encode_int>
   1ee62:	4307      	orrs	r7, r0
   1ee64:	2204      	movs	r2, #4
   1ee66:	492b      	ldr	r1, [pc, #172]	; (1ef14 <log_nmgr_read+0x130>)
   1ee68:	4630      	mov	r0, r6
   1ee6a:	f7f4 f9be 	bl	131ea <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "logs");
   1ee6e:	4307      	orrs	r7, r0
    g_err |= cbor_encoder_create_array(&cb->encoder, &logs,
   1ee70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ee74:	a932      	add	r1, sp, #200	; 0xc8
   1ee76:	4630      	mov	r0, r6
   1ee78:	f7f4 f9be 	bl	131f8 <cbor_encoder_create_array>
   1ee7c:	4307      	orrs	r7, r0
    name_len = strlen(name);
   1ee7e:	a83a      	add	r0, sp, #232	; 0xe8
   1ee80:	f7ee fe62 	bl	db48 <strlen>
   1ee84:	4605      	mov	r5, r0
    rc = cbor_read_object(&cb->it, attr);
   1ee86:	46c8      	mov	r8, r9
   1ee88:	e00b      	b.n	1eea2 <log_nmgr_read+0xbe>
        rc = log_encode(log, &logs, ts, index);
   1ee8a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
   1ee8c:	9300      	str	r3, [sp, #0]
   1ee8e:	e9dd 2338 	ldrd	r2, r3, [sp, #224]	; 0xe0
   1ee92:	a932      	add	r1, sp, #200	; 0xc8
   1ee94:	4620      	mov	r0, r4
   1ee96:	f7ff ff5f 	bl	1ed58 <log_encode>
        if (rc) {
   1ee9a:	4680      	mov	r8, r0
   1ee9c:	b9a0      	cbnz	r0, 1eec8 <log_nmgr_read+0xe4>
        if (name_len > 0) {
   1ee9e:	2d00      	cmp	r5, #0
   1eea0:	dc11      	bgt.n	1eec6 <log_nmgr_read+0xe2>
        log = log_list_get_next(log);
   1eea2:	4620      	mov	r0, r4
   1eea4:	f7ff fb6e 	bl	1e584 <log_list_get_next>
        if (!log) {
   1eea8:	4604      	mov	r4, r0
   1eeaa:	b160      	cbz	r0, 1eec6 <log_nmgr_read+0xe2>
        if (log->l_log->log_type == LOG_TYPE_STREAM) {
   1eeac:	6843      	ldr	r3, [r0, #4]
   1eeae:	681b      	ldr	r3, [r3, #0]
   1eeb0:	2b00      	cmp	r3, #0
   1eeb2:	d0f6      	beq.n	1eea2 <log_nmgr_read+0xbe>
        if ((name_len > 0) && strcmp(name, log->l_name)) {
   1eeb4:	2d00      	cmp	r5, #0
   1eeb6:	dde8      	ble.n	1ee8a <log_nmgr_read+0xa6>
   1eeb8:	6801      	ldr	r1, [r0, #0]
   1eeba:	a83a      	add	r0, sp, #232	; 0xe8
   1eebc:	f7ee fe38 	bl	db30 <strcmp>
   1eec0:	2800      	cmp	r0, #0
   1eec2:	d0e2      	beq.n	1ee8a <log_nmgr_read+0xa6>
   1eec4:	e7ed      	b.n	1eea2 <log_nmgr_read+0xbe>
    if (!log && name_len > 0) {
   1eec6:	b1b4      	cbz	r4, 1eef6 <log_nmgr_read+0x112>
    g_err |= cbor_encoder_close_container(&cb->encoder, &logs);
   1eec8:	a932      	add	r1, sp, #200	; 0xc8
   1eeca:	4630      	mov	r0, r6
   1eecc:	f7f4 f9a7 	bl	1321e <cbor_encoder_close_container>
   1eed0:	4307      	orrs	r7, r0
   1eed2:	2202      	movs	r2, #2
   1eed4:	4910      	ldr	r1, [pc, #64]	; (1ef18 <log_nmgr_read+0x134>)
   1eed6:	4630      	mov	r0, r6
   1eed8:	f7f4 f987 	bl	131ea <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1eedc:	4307      	orrs	r7, r0
    g_err |= cbor_encode_int(&cb->encoder, rc);
   1eede:	4642      	mov	r2, r8
   1eee0:	ea4f 73e8 	mov.w	r3, r8, asr #31
   1eee4:	4630      	mov	r0, r6
   1eee6:	f7f4 f905 	bl	130f4 <cbor_encode_int>
    if (g_err) {
   1eeea:	ea57 0300 	orrs.w	r3, r7, r0
   1eeee:	d0a7      	beq.n	1ee40 <log_nmgr_read+0x5c>
        return MGMT_ERR_ENOMEM;
   1eef0:	f04f 0902 	mov.w	r9, #2
   1eef4:	e7a4      	b.n	1ee40 <log_nmgr_read+0x5c>
    if (!log && name_len > 0) {
   1eef6:	2d00      	cmp	r5, #0
   1eef8:	dde6      	ble.n	1eec8 <log_nmgr_read+0xe4>
        rc = OS_EINVAL;
   1eefa:	f04f 0802 	mov.w	r8, #2
   1eefe:	e7e3      	b.n	1eec8 <log_nmgr_read+0xe4>
   1ef00:	00024cfc 	.word	0x00024cfc
   1ef04:	00024d08 	.word	0x00024d08
   1ef08:	00024d0c 	.word	0x00024d0c
   1ef0c:	00024d14 	.word	0x00024d14
   1ef10:	20004828 	.word	0x20004828
   1ef14:	00024d20 	.word	0x00024d20
   1ef18:	00023a48 	.word	0x00023a48

0001ef1c <log_nmgr_encode_entry>:
{
   1ef1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ef20:	b0ad      	sub	sp, #180	; 0xb4
   1ef22:	460e      	mov	r6, r1
   1ef24:	4615      	mov	r5, r2
   1ef26:	4619      	mov	r1, r3
    struct log_encode_data *ed = log_offset->lo_arg;
   1ef28:	6937      	ldr	r7, [r6, #16]
    if (log_offset->lo_ts == 0) {
   1ef2a:	6834      	ldr	r4, [r6, #0]
   1ef2c:	6872      	ldr	r2, [r6, #4]
   1ef2e:	ea54 0302 	orrs.w	r3, r4, r2
   1ef32:	f040 80d7 	bne.w	1f0e4 <log_nmgr_encode_entry+0x1c8>
        if (log_offset->lo_index > ueh->ue_index) {
   1ef36:	68b2      	ldr	r2, [r6, #8]
   1ef38:	68ab      	ldr	r3, [r5, #8]
   1ef3a:	429a      	cmp	r2, r3
   1ef3c:	f200 80ee 	bhi.w	1f11c <log_nmgr_encode_entry+0x200>
    rc = log_read_body(log, dptr, data, 0, min(len, 128));
   1ef40:	f8bd 20d0 	ldrh.w	r2, [sp, #208]	; 0xd0
   1ef44:	2a80      	cmp	r2, #128	; 0x80
   1ef46:	bf28      	it	cs
   1ef48:	2280      	movcs	r2, #128	; 0x80
   1ef4a:	9200      	str	r2, [sp, #0]
   1ef4c:	2300      	movs	r3, #0
   1ef4e:	aa0c      	add	r2, sp, #48	; 0x30
   1ef50:	f7ff fc7a 	bl	1e848 <log_read_body>
    if (rc < 0) {
   1ef54:	2800      	cmp	r0, #0
   1ef56:	f2c0 80e5 	blt.w	1f124 <log_nmgr_encode_entry+0x208>
    data[rc] = 0;
   1ef5a:	f100 03b0 	add.w	r3, r0, #176	; 0xb0
   1ef5e:	eb0d 0003 	add.w	r0, sp, r3
   1ef62:	f04f 0900 	mov.w	r9, #0
   1ef66:	f800 9c80 	strb.w	r9, [r0, #-128]
    cb->enc.bytes_written = 0;
   1ef6a:	f8cd 901c 	str.w	r9, [sp, #28]
    cb->enc.write = &cbor_cnt_writer;
   1ef6e:	4b72      	ldr	r3, [pc, #456]	; (1f138 <log_nmgr_encode_entry+0x21c>)
   1ef70:	9306      	str	r3, [sp, #24]
    cbor_encoder_init(&cnt_encoder, &cnt_writer.enc, 0);
   1ef72:	464a      	mov	r2, r9
   1ef74:	a906      	add	r1, sp, #24
   1ef76:	a802      	add	r0, sp, #8
   1ef78:	f7f4 f877 	bl	1306a <cbor_encoder_init>
    rsp_len = log_offset->lo_data_len;
   1ef7c:	f8d6 800c 	ldr.w	r8, [r6, #12]
    g_err |= cbor_encoder_create_map(&cnt_encoder, &rsp, CborIndefiniteLength);
   1ef80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ef84:	a908      	add	r1, sp, #32
   1ef86:	a802      	add	r0, sp, #8
   1ef88:	f7f4 f93b 	bl	13202 <cbor_encoder_create_map>
   1ef8c:	4604      	mov	r4, r0
   1ef8e:	2203      	movs	r2, #3
   1ef90:	496a      	ldr	r1, [pc, #424]	; (1f13c <log_nmgr_encode_entry+0x220>)
   1ef92:	a808      	add	r0, sp, #32
   1ef94:	f7f4 f929 	bl	131ea <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&rsp, "msg");
   1ef98:	4304      	orrs	r4, r0
   1ef9a:	a80c      	add	r0, sp, #48	; 0x30
   1ef9c:	f7ee fdd4 	bl	db48 <strlen>
   1efa0:	4602      	mov	r2, r0
   1efa2:	a90c      	add	r1, sp, #48	; 0x30
   1efa4:	a808      	add	r0, sp, #32
   1efa6:	f7f4 f920 	bl	131ea <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&rsp, (char *)data);
   1efaa:	4304      	orrs	r4, r0
   1efac:	2202      	movs	r2, #2
   1efae:	4964      	ldr	r1, [pc, #400]	; (1f140 <log_nmgr_encode_entry+0x224>)
   1efb0:	a808      	add	r0, sp, #32
   1efb2:	f7f4 f91a 	bl	131ea <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&rsp, "ts");
   1efb6:	4304      	orrs	r4, r0
    g_err |= cbor_encode_int(&rsp, ueh->ue_ts);
   1efb8:	682a      	ldr	r2, [r5, #0]
   1efba:	686b      	ldr	r3, [r5, #4]
   1efbc:	a808      	add	r0, sp, #32
   1efbe:	f7f4 f899 	bl	130f4 <cbor_encode_int>
   1efc2:	4304      	orrs	r4, r0
   1efc4:	2205      	movs	r2, #5
   1efc6:	495f      	ldr	r1, [pc, #380]	; (1f144 <log_nmgr_encode_entry+0x228>)
   1efc8:	a808      	add	r0, sp, #32
   1efca:	f7f4 f90e 	bl	131ea <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&rsp, "level");
   1efce:	4304      	orrs	r4, r0
    g_err |= cbor_encode_uint(&rsp, ueh->ue_level);
   1efd0:	7b6a      	ldrb	r2, [r5, #13]
   1efd2:	464b      	mov	r3, r9
   1efd4:	a808      	add	r0, sp, #32
   1efd6:	f7f4 f84d 	bl	13074 <cbor_encode_uint>
   1efda:	4304      	orrs	r4, r0
   1efdc:	2205      	movs	r2, #5
   1efde:	495a      	ldr	r1, [pc, #360]	; (1f148 <log_nmgr_encode_entry+0x22c>)
   1efe0:	a808      	add	r0, sp, #32
   1efe2:	f7f4 f902 	bl	131ea <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&rsp, "index");
   1efe6:	4304      	orrs	r4, r0
    g_err |= cbor_encode_uint(&rsp,  ueh->ue_index);
   1efe8:	68aa      	ldr	r2, [r5, #8]
   1efea:	464b      	mov	r3, r9
   1efec:	a808      	add	r0, sp, #32
   1efee:	f7f4 f841 	bl	13074 <cbor_encode_uint>
   1eff2:	4304      	orrs	r4, r0
   1eff4:	2206      	movs	r2, #6
   1eff6:	4955      	ldr	r1, [pc, #340]	; (1f14c <log_nmgr_encode_entry+0x230>)
   1eff8:	a808      	add	r0, sp, #32
   1effa:	f7f4 f8f6 	bl	131ea <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&rsp, "module");
   1effe:	4304      	orrs	r4, r0
    g_err |= cbor_encode_uint(&rsp,  ueh->ue_module);
   1f000:	7b2a      	ldrb	r2, [r5, #12]
   1f002:	464b      	mov	r3, r9
   1f004:	a808      	add	r0, sp, #32
   1f006:	f7f4 f835 	bl	13074 <cbor_encode_uint>
   1f00a:	4304      	orrs	r4, r0
    g_err |= cbor_encoder_close_container(&cnt_encoder, &rsp);
   1f00c:	a908      	add	r1, sp, #32
   1f00e:	a802      	add	r0, sp, #8
   1f010:	f7f4 f905 	bl	1321e <cbor_encoder_close_container>
   1f014:	4304      	orrs	r4, r0
{   return encoder->writer->bytes_written; }
   1f016:	9b02      	ldr	r3, [sp, #8]
   1f018:	685b      	ldr	r3, [r3, #4]
    rsp_len += cbor_encode_bytes_written(&cnt_encoder);
   1f01a:	4498      	add	r8, r3
    if (rsp_len > MYNEWT_VAL(LOG_NMGR_MAX_RSP_LEN)) {
   1f01c:	f5b8 7fc8 	cmp.w	r8, #400	; 0x190
   1f020:	dd73      	ble.n	1f10a <log_nmgr_encode_entry+0x1ee>
        if (ed->counter == 0) {
   1f022:	683b      	ldr	r3, [r7, #0]
   1f024:	2b00      	cmp	r3, #0
   1f026:	f040 8081 	bne.w	1f12c <log_nmgr_encode_entry+0x210>
            too_long = true;
   1f02a:	f04f 0901 	mov.w	r9, #1
    log_offset->lo_data_len = rsp_len;
   1f02e:	f8c6 800c 	str.w	r8, [r6, #12]
    g_err |= cbor_encoder_create_map(ed->enc, &rsp, CborIndefiniteLength);
   1f032:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f036:	a908      	add	r1, sp, #32
   1f038:	6878      	ldr	r0, [r7, #4]
   1f03a:	f7f4 f8e2 	bl	13202 <cbor_encoder_create_map>
   1f03e:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1f040:	2203      	movs	r2, #3
   1f042:	493e      	ldr	r1, [pc, #248]	; (1f13c <log_nmgr_encode_entry+0x220>)
   1f044:	a808      	add	r0, sp, #32
   1f046:	f7f4 f8d0 	bl	131ea <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&rsp, "msg");
   1f04a:	4304      	orrs	r4, r0
    if (too_long) {
   1f04c:	f1b9 0f00 	cmp.w	r9, #0
   1f050:	d15e      	bne.n	1f110 <log_nmgr_encode_entry+0x1f4>
   1f052:	a80c      	add	r0, sp, #48	; 0x30
   1f054:	f7ee fd78 	bl	db48 <strlen>
   1f058:	4602      	mov	r2, r0
   1f05a:	a90c      	add	r1, sp, #48	; 0x30
   1f05c:	a808      	add	r0, sp, #32
   1f05e:	f7f4 f8c4 	bl	131ea <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&rsp, (char *)data);
   1f062:	4304      	orrs	r4, r0
   1f064:	2202      	movs	r2, #2
   1f066:	4936      	ldr	r1, [pc, #216]	; (1f140 <log_nmgr_encode_entry+0x224>)
   1f068:	a808      	add	r0, sp, #32
   1f06a:	f7f4 f8be 	bl	131ea <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&rsp, "ts");
   1f06e:	4304      	orrs	r4, r0
    g_err |= cbor_encode_int(&rsp, ueh->ue_ts);
   1f070:	682a      	ldr	r2, [r5, #0]
   1f072:	686b      	ldr	r3, [r5, #4]
   1f074:	a808      	add	r0, sp, #32
   1f076:	f7f4 f83d 	bl	130f4 <cbor_encode_int>
   1f07a:	4304      	orrs	r4, r0
   1f07c:	2205      	movs	r2, #5
   1f07e:	4931      	ldr	r1, [pc, #196]	; (1f144 <log_nmgr_encode_entry+0x228>)
   1f080:	a808      	add	r0, sp, #32
   1f082:	f7f4 f8b2 	bl	131ea <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&rsp, "level");
   1f086:	4304      	orrs	r4, r0
    g_err |= cbor_encode_uint(&rsp, ueh->ue_level);
   1f088:	2600      	movs	r6, #0
   1f08a:	7b6a      	ldrb	r2, [r5, #13]
   1f08c:	4633      	mov	r3, r6
   1f08e:	a808      	add	r0, sp, #32
   1f090:	f7f3 fff0 	bl	13074 <cbor_encode_uint>
   1f094:	4304      	orrs	r4, r0
   1f096:	2205      	movs	r2, #5
   1f098:	492b      	ldr	r1, [pc, #172]	; (1f148 <log_nmgr_encode_entry+0x22c>)
   1f09a:	a808      	add	r0, sp, #32
   1f09c:	f7f4 f8a5 	bl	131ea <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&rsp, "index");
   1f0a0:	4304      	orrs	r4, r0
    g_err |= cbor_encode_uint(&rsp,  ueh->ue_index);
   1f0a2:	68aa      	ldr	r2, [r5, #8]
   1f0a4:	4633      	mov	r3, r6
   1f0a6:	a808      	add	r0, sp, #32
   1f0a8:	f7f3 ffe4 	bl	13074 <cbor_encode_uint>
   1f0ac:	4304      	orrs	r4, r0
   1f0ae:	2206      	movs	r2, #6
   1f0b0:	4926      	ldr	r1, [pc, #152]	; (1f14c <log_nmgr_encode_entry+0x230>)
   1f0b2:	a808      	add	r0, sp, #32
   1f0b4:	f7f4 f899 	bl	131ea <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&rsp, "module");
   1f0b8:	4304      	orrs	r4, r0
    g_err |= cbor_encode_uint(&rsp,  ueh->ue_module);
   1f0ba:	7b2a      	ldrb	r2, [r5, #12]
   1f0bc:	4633      	mov	r3, r6
   1f0be:	a808      	add	r0, sp, #32
   1f0c0:	f7f3 ffd8 	bl	13074 <cbor_encode_uint>
   1f0c4:	4304      	orrs	r4, r0
    g_err |= cbor_encoder_close_container(ed->enc, &rsp);
   1f0c6:	a908      	add	r1, sp, #32
   1f0c8:	6878      	ldr	r0, [r7, #4]
   1f0ca:	f7f4 f8a8 	bl	1321e <cbor_encoder_close_container>
    ed->counter++;
   1f0ce:	683b      	ldr	r3, [r7, #0]
   1f0d0:	3301      	adds	r3, #1
   1f0d2:	603b      	str	r3, [r7, #0]
    if (g_err) {
   1f0d4:	ea54 0300 	orrs.w	r3, r4, r0
   1f0d8:	d12a      	bne.n	1f130 <log_nmgr_encode_entry+0x214>
    if (too_long) {
   1f0da:	f1b9 0f00 	cmp.w	r9, #0
   1f0de:	d029      	beq.n	1f134 <log_nmgr_encode_entry+0x218>
        rc = OS_ENOMEM;
   1f0e0:	2001      	movs	r0, #1
   1f0e2:	e020      	b.n	1f126 <log_nmgr_encode_entry+0x20a>
    } else if (ueh->ue_ts < log_offset->lo_ts   ||
   1f0e4:	f8d5 c000 	ldr.w	ip, [r5]
   1f0e8:	686b      	ldr	r3, [r5, #4]
   1f0ea:	45a4      	cmp	ip, r4
   1f0ec:	eb73 0e02 	sbcs.w	lr, r3, r2
   1f0f0:	db16      	blt.n	1f120 <log_nmgr_encode_entry+0x204>
   1f0f2:	429a      	cmp	r2, r3
   1f0f4:	bf08      	it	eq
   1f0f6:	4564      	cmpeq	r4, ip
   1f0f8:	f47f af22 	bne.w	1ef40 <log_nmgr_encode_entry+0x24>
                ueh->ue_index < log_offset->lo_index)) {
   1f0fc:	68aa      	ldr	r2, [r5, #8]
   1f0fe:	68b3      	ldr	r3, [r6, #8]
               (ueh->ue_ts == log_offset->lo_ts &&
   1f100:	429a      	cmp	r2, r3
   1f102:	f4bf af1d 	bcs.w	1ef40 <log_nmgr_encode_entry+0x24>
    rc = OS_OK;
   1f106:	2000      	movs	r0, #0
   1f108:	e00d      	b.n	1f126 <log_nmgr_encode_entry+0x20a>
    too_long = false;
   1f10a:	f04f 0900 	mov.w	r9, #0
   1f10e:	e78e      	b.n	1f02e <log_nmgr_encode_entry+0x112>
        sprintf((char *)data, "error: entry too large (%d bytes)", rsp_len);
   1f110:	4642      	mov	r2, r8
   1f112:	490f      	ldr	r1, [pc, #60]	; (1f150 <log_nmgr_encode_entry+0x234>)
   1f114:	a80c      	add	r0, sp, #48	; 0x30
   1f116:	f7fd f9c6 	bl	1c4a6 <sprintf>
   1f11a:	e79a      	b.n	1f052 <log_nmgr_encode_entry+0x136>
    rc = OS_OK;
   1f11c:	2000      	movs	r0, #0
   1f11e:	e002      	b.n	1f126 <log_nmgr_encode_entry+0x20a>
   1f120:	2000      	movs	r0, #0
   1f122:	e000      	b.n	1f126 <log_nmgr_encode_entry+0x20a>
        rc = OS_ENOENT;
   1f124:	200a      	movs	r0, #10
}
   1f126:	b02d      	add	sp, #180	; 0xb4
   1f128:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            rc = OS_ENOMEM;
   1f12c:	2001      	movs	r0, #1
   1f12e:	e7fa      	b.n	1f126 <log_nmgr_encode_entry+0x20a>
        return MGMT_ERR_ENOMEM;
   1f130:	2002      	movs	r0, #2
   1f132:	e7f8      	b.n	1f126 <log_nmgr_encode_entry+0x20a>
        rc = 0;
   1f134:	2000      	movs	r0, #0
   1f136:	e7f6      	b.n	1f126 <log_nmgr_encode_entry+0x20a>
   1f138:	0001e995 	.word	0x0001e995
   1f13c:	00024d28 	.word	0x00024d28
   1f140:	00024d08 	.word	0x00024d08
   1f144:	00024ce4 	.word	0x00024ce4
   1f148:	00024d0c 	.word	0x00024d0c
   1f14c:	00024cdc 	.word	0x00024cdc
   1f150:	00024d2c 	.word	0x00024d2c

0001f154 <log_nmgr_register_group>:
 * Register nmgr group handlers.
 * @return 0 on success; non-zero on failure
 */
int
log_nmgr_register_group(void)
{
   1f154:	b508      	push	{r3, lr}
    int rc;

    MGMT_GROUP_SET_HANDLERS(&log_nmgr_group, log_nmgr_group_handlers);
   1f156:	4805      	ldr	r0, [pc, #20]	; (1f16c <log_nmgr_register_group+0x18>)
   1f158:	4b05      	ldr	r3, [pc, #20]	; (1f170 <log_nmgr_register_group+0x1c>)
   1f15a:	6003      	str	r3, [r0, #0]
   1f15c:	2309      	movs	r3, #9
   1f15e:	8083      	strh	r3, [r0, #4]
    log_nmgr_group.mg_group_id = MGMT_GROUP_ID_LOGS;
   1f160:	2304      	movs	r3, #4
   1f162:	80c3      	strh	r3, [r0, #6]

    rc = mgmt_group_register(&log_nmgr_group);
   1f164:	f7fe f918 	bl	1d398 <mgmt_group_register>
    }

    return (0);
err:
    return (rc);
}
   1f168:	bd08      	pop	{r3, pc}
   1f16a:	bf00      	nop
   1f16c:	200048d0 	.word	0x200048d0
   1f170:	20000fb4 	.word	0x20000fb4

0001f174 <modlog_find_by_module>:
    return cur;
}

static struct modlog_mapping *
modlog_find_by_module(uint8_t module, struct modlog_mapping **out_prev)
{
   1f174:	b410      	push	{r4}
   1f176:	4602      	mov	r2, r0
    struct modlog_mapping *prev;
    struct modlog_mapping *cur;

    prev = NULL;
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   1f178:	4b08      	ldr	r3, [pc, #32]	; (1f19c <modlog_find_by_module+0x28>)
   1f17a:	6818      	ldr	r0, [r3, #0]
    prev = NULL;
   1f17c:	2400      	movs	r4, #0
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   1f17e:	e001      	b.n	1f184 <modlog_find_by_module+0x10>
        if (cur->desc.module > module) {
            cur = NULL;
            break;
        }

        prev = cur;
   1f180:	4604      	mov	r4, r0
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   1f182:	6800      	ldr	r0, [r0, #0]
   1f184:	b120      	cbz	r0, 1f190 <modlog_find_by_module+0x1c>
        if (cur->desc.module == module) {
   1f186:	7a43      	ldrb	r3, [r0, #9]
   1f188:	4293      	cmp	r3, r2
   1f18a:	d001      	beq.n	1f190 <modlog_find_by_module+0x1c>
        if (cur->desc.module > module) {
   1f18c:	d9f8      	bls.n	1f180 <modlog_find_by_module+0xc>
            cur = NULL;
   1f18e:	2000      	movs	r0, #0
    }

    if (out_prev != NULL) {
   1f190:	b101      	cbz	r1, 1f194 <modlog_find_by_module+0x20>
        *out_prev = prev;
   1f192:	600c      	str	r4, [r1, #0]
    }

    return cur;
}
   1f194:	f85d 4b04 	ldr.w	r4, [sp], #4
   1f198:	4770      	bx	lr
   1f19a:	bf00      	nop
   1f19c:	200049bc 	.word	0x200049bc

0001f1a0 <modlog_insert>:

static void
modlog_insert(struct modlog_mapping *mm)
{
   1f1a0:	b510      	push	{r4, lr}
   1f1a2:	b082      	sub	sp, #8
   1f1a4:	4604      	mov	r4, r0
    struct modlog_mapping *prev;

    modlog_find_by_module(mm->desc.module, &prev);
   1f1a6:	a901      	add	r1, sp, #4
   1f1a8:	7a40      	ldrb	r0, [r0, #9]
   1f1aa:	f7ff ffe3 	bl	1f174 <modlog_find_by_module>
    if (prev == NULL) {
   1f1ae:	9b01      	ldr	r3, [sp, #4]
   1f1b0:	b143      	cbz	r3, 1f1c4 <modlog_insert+0x24>
        SLIST_INSERT_HEAD(&modlog_mappings, mm, next);
    } else {
        SLIST_INSERT_AFTER(prev, mm, next);
   1f1b2:	681b      	ldr	r3, [r3, #0]
   1f1b4:	6023      	str	r3, [r4, #0]
   1f1b6:	9b01      	ldr	r3, [sp, #4]
   1f1b8:	601c      	str	r4, [r3, #0]
    }

    if (mm->desc.module == MODLOG_MODULE_DFLT) {
   1f1ba:	7a63      	ldrb	r3, [r4, #9]
   1f1bc:	2bff      	cmp	r3, #255	; 0xff
   1f1be:	d006      	beq.n	1f1ce <modlog_insert+0x2e>
        modlog_first_dflt = mm;
    }
}
   1f1c0:	b002      	add	sp, #8
   1f1c2:	bd10      	pop	{r4, pc}
        SLIST_INSERT_HEAD(&modlog_mappings, mm, next);
   1f1c4:	4b03      	ldr	r3, [pc, #12]	; (1f1d4 <modlog_insert+0x34>)
   1f1c6:	681a      	ldr	r2, [r3, #0]
   1f1c8:	6022      	str	r2, [r4, #0]
   1f1ca:	601c      	str	r4, [r3, #0]
   1f1cc:	e7f5      	b.n	1f1ba <modlog_insert+0x1a>
        modlog_first_dflt = mm;
   1f1ce:	4b02      	ldr	r3, [pc, #8]	; (1f1d8 <modlog_insert+0x38>)
   1f1d0:	601c      	str	r4, [r3, #0]
}
   1f1d2:	e7f5      	b.n	1f1c0 <modlog_insert+0x20>
   1f1d4:	200049bc 	.word	0x200049bc
   1f1d8:	200048dc 	.word	0x200048dc

0001f1dc <modlog_alloc>:
{
   1f1dc:	b508      	push	{r3, lr}
    mm = os_memblock_get(&modlog_mapping_pool);
   1f1de:	4805      	ldr	r0, [pc, #20]	; (1f1f4 <modlog_alloc+0x18>)
   1f1e0:	f7ea faec 	bl	97bc <os_memblock_get>
    if (mm != NULL) {
   1f1e4:	4603      	mov	r3, r0
   1f1e6:	b118      	cbz	r0, 1f1f0 <modlog_alloc+0x14>
        *mm = (struct modlog_mapping) { 0 };
   1f1e8:	2200      	movs	r2, #0
   1f1ea:	6002      	str	r2, [r0, #0]
   1f1ec:	6042      	str	r2, [r0, #4]
   1f1ee:	6082      	str	r2, [r0, #8]
}
   1f1f0:	4618      	mov	r0, r3
   1f1f2:	bd08      	pop	{r3, pc}
   1f1f4:	200049a0 	.word	0x200049a0

0001f1f8 <modlog_infer_handle>:
{
   1f1f8:	b508      	push	{r3, lr}
    off = (uintptr_t)mm - (uintptr_t)modlog_mapping_buf;
   1f1fa:	4a0f      	ldr	r2, [pc, #60]	; (1f238 <modlog_infer_handle+0x40>)
   1f1fc:	1a82      	subs	r2, r0, r2
    idx = off / elem_sz;
   1f1fe:	480f      	ldr	r0, [pc, #60]	; (1f23c <modlog_infer_handle+0x44>)
   1f200:	fba0 3002 	umull	r3, r0, r0, r2
    assert(idx >= 0 && idx < MYNEWT_VAL(MODLOG_MAX_MAPPINGS));
   1f204:	2abf      	cmp	r2, #191	; 0xbf
   1f206:	d80b      	bhi.n	1f220 <modlog_infer_handle+0x28>
   1f208:	08c0      	lsrs	r0, r0, #3
    assert(off % elem_sz == 0);
   1f20a:	4b0c      	ldr	r3, [pc, #48]	; (1f23c <modlog_infer_handle+0x44>)
   1f20c:	fba3 1302 	umull	r1, r3, r3, r2
   1f210:	08db      	lsrs	r3, r3, #3
   1f212:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1f216:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   1f21a:	d107      	bne.n	1f22c <modlog_infer_handle+0x34>
}
   1f21c:	b2c0      	uxtb	r0, r0
   1f21e:	bd08      	pop	{r3, pc}
    assert(idx >= 0 && idx < MYNEWT_VAL(MODLOG_MAX_MAPPINGS));
   1f220:	2300      	movs	r3, #0
   1f222:	461a      	mov	r2, r3
   1f224:	4619      	mov	r1, r3
   1f226:	4618      	mov	r0, r3
   1f228:	f7e9 fe9c 	bl	8f64 <__assert_func>
    assert(off % elem_sz == 0);
   1f22c:	2300      	movs	r3, #0
   1f22e:	461a      	mov	r2, r3
   1f230:	4619      	mov	r1, r3
   1f232:	4618      	mov	r0, r3
   1f234:	f7e9 fe96 	bl	8f64 <__assert_func>
   1f238:	200048e0 	.word	0x200048e0
   1f23c:	aaaaaaab 	.word	0xaaaaaaab

0001f240 <modlog_register_no_lock>:
modlog_register_no_lock(uint8_t module, struct log *log, uint8_t min_level,
                        uint8_t *out_handle)
{
    struct modlog_mapping *mm;

    if (log == NULL) {
   1f240:	b1c9      	cbz	r1, 1f276 <modlog_register_no_lock+0x36>
{
   1f242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f246:	4607      	mov	r7, r0
   1f248:	4616      	mov	r6, r2
   1f24a:	461d      	mov	r5, r3
   1f24c:	4688      	mov	r8, r1
        return SYS_EINVAL;
    }

    mm = modlog_alloc();
   1f24e:	f7ff ffc5 	bl	1f1dc <modlog_alloc>
    if (mm == NULL) {
   1f252:	4604      	mov	r4, r0
   1f254:	b190      	cbz	r0, 1f27c <modlog_register_no_lock+0x3c>
        return SYS_ENOMEM;
    }

    mm->desc = (struct modlog_desc) {
        .log = log,
        .handle = modlog_infer_handle(mm),
   1f256:	f7ff ffcf 	bl	1f1f8 <modlog_infer_handle>
    mm->desc = (struct modlog_desc) {
   1f25a:	f8c4 8004 	str.w	r8, [r4, #4]
   1f25e:	7220      	strb	r0, [r4, #8]
   1f260:	7267      	strb	r7, [r4, #9]
   1f262:	72a6      	strb	r6, [r4, #10]
        .module = module,
        .min_level = min_level,
    };

    modlog_insert(mm);
   1f264:	4620      	mov	r0, r4
   1f266:	f7ff ff9b 	bl	1f1a0 <modlog_insert>

    if (out_handle != NULL) {
   1f26a:	b155      	cbz	r5, 1f282 <modlog_register_no_lock+0x42>
        *out_handle = mm->desc.handle;
   1f26c:	7a23      	ldrb	r3, [r4, #8]
   1f26e:	702b      	strb	r3, [r5, #0]
    }

    return 0;
   1f270:	2000      	movs	r0, #0
}
   1f272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
   1f276:	f06f 0001 	mvn.w	r0, #1
}
   1f27a:	4770      	bx	lr
        return SYS_ENOMEM;
   1f27c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f280:	e7f7      	b.n	1f272 <modlog_register_no_lock+0x32>
    return 0;
   1f282:	2000      	movs	r0, #0
   1f284:	e7f5      	b.n	1f272 <modlog_register_no_lock+0x32>

0001f286 <modlog_append_one>:
modlog_append_one(struct modlog_mapping *mm, uint8_t module, uint8_t level,
                  uint8_t etype, void *data, uint16_t len)
{
    int rc;

    if (level >= mm->desc.min_level) {
   1f286:	f890 c00a 	ldrb.w	ip, [r0, #10]
   1f28a:	4594      	cmp	ip, r2
   1f28c:	d901      	bls.n	1f292 <modlog_append_one+0xc>
    } else {
        LOG_STATS_INC(mm->desc.log, writes);
        LOG_STATS_INC(mm->desc.log, drops);
    }

    return 0;
   1f28e:	2000      	movs	r0, #0
}
   1f290:	4770      	bx	lr
{
   1f292:	b510      	push	{r4, lr}
   1f294:	b082      	sub	sp, #8
        rc = log_append_body(mm->desc.log, module, level, etype, data, len);
   1f296:	f8bd 4014 	ldrh.w	r4, [sp, #20]
   1f29a:	9401      	str	r4, [sp, #4]
   1f29c:	9c04      	ldr	r4, [sp, #16]
   1f29e:	9400      	str	r4, [sp, #0]
   1f2a0:	6840      	ldr	r0, [r0, #4]
   1f2a2:	f7ff f9b3 	bl	1e60c <log_append_body>
        if (rc != 0) {
   1f2a6:	b908      	cbnz	r0, 1f2ac <modlog_append_one+0x26>
}
   1f2a8:	b002      	add	sp, #8
   1f2aa:	bd10      	pop	{r4, pc}
            return SYS_EIO;
   1f2ac:	f06f 0004 	mvn.w	r0, #4
   1f2b0:	e7fa      	b.n	1f2a8 <modlog_append_one+0x22>
	...

0001f2b4 <modlog_append_no_lock>:

static int
modlog_append_no_lock(uint8_t module, uint8_t level, uint8_t etype,
                      void *data, uint16_t len)
{
   1f2b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f2b8:	b083      	sub	sp, #12
   1f2ba:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
    struct modlog_mapping *mm;
    int rc;

    if (module == MODLOG_MODULE_DFLT) {
   1f2be:	28ff      	cmp	r0, #255	; 0xff
   1f2c0:	d031      	beq.n	1f326 <modlog_append_no_lock+0x72>
   1f2c2:	4605      	mov	r5, r0
   1f2c4:	460e      	mov	r6, r1
   1f2c6:	4617      	mov	r7, r2
   1f2c8:	4698      	mov	r8, r3
        return SYS_EINVAL;
    }

    mm = modlog_find_by_module(module, NULL);
   1f2ca:	2100      	movs	r1, #0
   1f2cc:	f7ff ff52 	bl	1f174 <modlog_find_by_module>
    if (mm != NULL) {
   1f2d0:	4604      	mov	r4, r0
   1f2d2:	b198      	cbz	r0, 1f2fc <modlog_append_no_lock+0x48>
        while (mm != NULL && mm->desc.module == module) {
   1f2d4:	b354      	cbz	r4, 1f32c <modlog_append_no_lock+0x78>
   1f2d6:	7a60      	ldrb	r0, [r4, #9]
   1f2d8:	42a8      	cmp	r0, r5
   1f2da:	d10d      	bne.n	1f2f8 <modlog_append_no_lock+0x44>
            rc = modlog_append_one(mm, module, level, etype, data, len);
   1f2dc:	f8cd 9004 	str.w	r9, [sp, #4]
   1f2e0:	f8cd 8000 	str.w	r8, [sp]
   1f2e4:	463b      	mov	r3, r7
   1f2e6:	4632      	mov	r2, r6
   1f2e8:	4629      	mov	r1, r5
   1f2ea:	4620      	mov	r0, r4
   1f2ec:	f7ff ffcb 	bl	1f286 <modlog_append_one>
            if (rc != 0) {
   1f2f0:	4603      	mov	r3, r0
   1f2f2:	b9e0      	cbnz	r0, 1f32e <modlog_append_no_lock+0x7a>
                return rc;
            }

            mm = SLIST_NEXT(mm, next);
   1f2f4:	6824      	ldr	r4, [r4, #0]
   1f2f6:	e7ed      	b.n	1f2d4 <modlog_append_no_lock+0x20>
        }
        return 0;
   1f2f8:	2300      	movs	r3, #0
   1f2fa:	e018      	b.n	1f32e <modlog_append_no_lock+0x7a>
    }

    /* No mappings match the specified module; write to the default set. */
    for (mm = modlog_first_dflt;
   1f2fc:	4b0e      	ldr	r3, [pc, #56]	; (1f338 <modlog_append_no_lock+0x84>)
   1f2fe:	681c      	ldr	r4, [r3, #0]
   1f300:	e000      	b.n	1f304 <modlog_append_no_lock+0x50>
         mm != NULL;
         mm = SLIST_NEXT(mm, next)) {
   1f302:	6824      	ldr	r4, [r4, #0]
    for (mm = modlog_first_dflt;
   1f304:	b16c      	cbz	r4, 1f322 <modlog_append_no_lock+0x6e>

        rc = modlog_append_one(mm, module, level, etype, data, len);
   1f306:	f8cd 9004 	str.w	r9, [sp, #4]
   1f30a:	f8cd 8000 	str.w	r8, [sp]
   1f30e:	463b      	mov	r3, r7
   1f310:	4632      	mov	r2, r6
   1f312:	4629      	mov	r1, r5
   1f314:	4620      	mov	r0, r4
   1f316:	f7ff ffb6 	bl	1f286 <modlog_append_one>
        if (rc != 0) {
   1f31a:	4603      	mov	r3, r0
   1f31c:	2800      	cmp	r0, #0
   1f31e:	d0f0      	beq.n	1f302 <modlog_append_no_lock+0x4e>
   1f320:	e005      	b.n	1f32e <modlog_append_no_lock+0x7a>
            return rc;
        }
    }

    return 0;
   1f322:	2300      	movs	r3, #0
   1f324:	e003      	b.n	1f32e <modlog_append_no_lock+0x7a>
        return SYS_EINVAL;
   1f326:	f06f 0301 	mvn.w	r3, #1
   1f32a:	e000      	b.n	1f32e <modlog_append_no_lock+0x7a>
        return 0;
   1f32c:	2300      	movs	r3, #0
}
   1f32e:	4618      	mov	r0, r3
   1f330:	b003      	add	sp, #12
   1f332:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1f336:	bf00      	nop
   1f338:	200048dc 	.word	0x200048dc

0001f33c <modlog_register>:
}

int
modlog_register(uint8_t module, struct log *log, uint8_t min_level,
                uint8_t *out_handle)
{
   1f33c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f340:	4604      	mov	r4, r0
   1f342:	460d      	mov	r5, r1
   1f344:	4616      	mov	r6, r2
   1f346:	461f      	mov	r7, r3
    int rc;

    rwlock_acquire_write(&modlog_rwl);
   1f348:	f8df 8020 	ldr.w	r8, [pc, #32]	; 1f36c <modlog_register+0x30>
   1f34c:	4640      	mov	r0, r8
   1f34e:	f000 fbbe 	bl	1face <rwlock_acquire_write>
    rc = modlog_register_no_lock(module, log, min_level, out_handle);
   1f352:	463b      	mov	r3, r7
   1f354:	4632      	mov	r2, r6
   1f356:	4629      	mov	r1, r5
   1f358:	4620      	mov	r0, r4
   1f35a:	f7ff ff71 	bl	1f240 <modlog_register_no_lock>
   1f35e:	4604      	mov	r4, r0
    rwlock_release_write(&modlog_rwl);
   1f360:	4640      	mov	r0, r8
   1f362:	f000 fbde 	bl	1fb22 <rwlock_release_write>

    return rc;
}
   1f366:	4620      	mov	r0, r4
   1f368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f36c:	200049c0 	.word	0x200049c0

0001f370 <modlog_append>:
}

int
modlog_append(uint8_t module, uint8_t level, uint8_t etype,
              void *data, uint16_t len)
{
   1f370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f374:	b082      	sub	sp, #8
   1f376:	4604      	mov	r4, r0
   1f378:	460d      	mov	r5, r1
   1f37a:	4616      	mov	r6, r2
   1f37c:	461f      	mov	r7, r3
    int rc;

    rwlock_acquire_read(&modlog_rwl);
   1f37e:	f8df 802c 	ldr.w	r8, [pc, #44]	; 1f3ac <modlog_append+0x3c>
   1f382:	4640      	mov	r0, r8
   1f384:	f000 fb63 	bl	1fa4e <rwlock_acquire_read>
    rc = modlog_append_no_lock(module, level, etype, data, len);
   1f388:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   1f38c:	9300      	str	r3, [sp, #0]
   1f38e:	463b      	mov	r3, r7
   1f390:	4632      	mov	r2, r6
   1f392:	4629      	mov	r1, r5
   1f394:	4620      	mov	r0, r4
   1f396:	f7ff ff8d 	bl	1f2b4 <modlog_append_no_lock>
   1f39a:	4604      	mov	r4, r0
    rwlock_release_read(&modlog_rwl);
   1f39c:	4640      	mov	r0, r8
   1f39e:	f000 fb83 	bl	1faa8 <rwlock_release_read>

    return rc;
}
   1f3a2:	4620      	mov	r0, r4
   1f3a4:	b002      	add	sp, #8
   1f3a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f3aa:	bf00      	nop
   1f3ac:	200049c0 	.word	0x200049c0

0001f3b0 <modlog_printf>:
    return rc;
}

void
modlog_printf(uint8_t module, uint8_t level, const char *msg, ...)
{
   1f3b0:	b40c      	push	{r2, r3}
   1f3b2:	b530      	push	{r4, r5, lr}
   1f3b4:	b0a5      	sub	sp, #148	; 0x94
   1f3b6:	4604      	mov	r4, r0
   1f3b8:	460d      	mov	r5, r1
   1f3ba:	ab28      	add	r3, sp, #160	; 0xa0
   1f3bc:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    char buf[MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN)];
    int len;

    va_start(args, msg);
   1f3c0:	9323      	str	r3, [sp, #140]	; 0x8c
    len = vsnprintf(buf, MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN), msg, args);
   1f3c2:	2180      	movs	r1, #128	; 0x80
   1f3c4:	a803      	add	r0, sp, #12
   1f3c6:	f7ee ffad 	bl	e324 <vsnprintf>
    va_end(args);

    if (len >= MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN)) {
   1f3ca:	287f      	cmp	r0, #127	; 0x7f
   1f3cc:	dd00      	ble.n	1f3d0 <modlog_printf+0x20>
        len = MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN) - 1;
   1f3ce:	207f      	movs	r0, #127	; 0x7f
    }

    modlog_append(module, level, LOG_ETYPE_STRING, buf, len);
   1f3d0:	b280      	uxth	r0, r0
   1f3d2:	9000      	str	r0, [sp, #0]
   1f3d4:	ab03      	add	r3, sp, #12
   1f3d6:	2200      	movs	r2, #0
   1f3d8:	4629      	mov	r1, r5
   1f3da:	4620      	mov	r0, r4
   1f3dc:	f7ff ffc8 	bl	1f370 <modlog_append>
}
   1f3e0:	b025      	add	sp, #148	; 0x94
   1f3e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1f3e6:	b002      	add	sp, #8
   1f3e8:	4770      	bx	lr
	...

0001f3ec <modlog_init>:

void
modlog_init(void)
{
   1f3ec:	b510      	push	{r4, lr}
   1f3ee:	b082      	sub	sp, #8
    int rc;

    SYSINIT_ASSERT_ACTIVE();
   1f3f0:	4b1e      	ldr	r3, [pc, #120]	; (1f46c <modlog_init+0x80>)
   1f3f2:	781b      	ldrb	r3, [r3, #0]
   1f3f4:	2b00      	cmp	r3, #0
   1f3f6:	d034      	beq.n	1f462 <modlog_init+0x76>

    rc = os_mempool_init(&modlog_mapping_pool, MYNEWT_VAL(MODLOG_MAX_MAPPINGS),
   1f3f8:	4b1d      	ldr	r3, [pc, #116]	; (1f470 <modlog_init+0x84>)
   1f3fa:	9300      	str	r3, [sp, #0]
   1f3fc:	4b1d      	ldr	r3, [pc, #116]	; (1f474 <modlog_init+0x88>)
   1f3fe:	220c      	movs	r2, #12
   1f400:	2110      	movs	r1, #16
   1f402:	481d      	ldr	r0, [pc, #116]	; (1f478 <modlog_init+0x8c>)
   1f404:	f7ea f9d0 	bl	97a8 <os_mempool_init>
                         sizeof (struct modlog_mapping), modlog_mapping_buf,
                         "modlog_mapping_pool");
    SYSINIT_PANIC_ASSERT(rc == 0);
   1f408:	b138      	cbz	r0, 1f41a <modlog_init+0x2e>
   1f40a:	2000      	movs	r0, #0
   1f40c:	9000      	str	r0, [sp, #0]
   1f40e:	4b1b      	ldr	r3, [pc, #108]	; (1f47c <modlog_init+0x90>)
   1f410:	681c      	ldr	r4, [r3, #0]
   1f412:	4603      	mov	r3, r0
   1f414:	4602      	mov	r2, r0
   1f416:	4601      	mov	r1, r0
   1f418:	47a0      	blx	r4

    SLIST_INIT(&modlog_mappings);
   1f41a:	2300      	movs	r3, #0
   1f41c:	4a18      	ldr	r2, [pc, #96]	; (1f480 <modlog_init+0x94>)
   1f41e:	6013      	str	r3, [r2, #0]
    modlog_first_dflt = NULL;
   1f420:	4a18      	ldr	r2, [pc, #96]	; (1f484 <modlog_init+0x98>)
   1f422:	6013      	str	r3, [r2, #0]

    rc = rwlock_init(&modlog_rwl);
   1f424:	4818      	ldr	r0, [pc, #96]	; (1f488 <modlog_init+0x9c>)
   1f426:	f000 fb8b 	bl	1fb40 <rwlock_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1f42a:	b138      	cbz	r0, 1f43c <modlog_init+0x50>
   1f42c:	2000      	movs	r0, #0
   1f42e:	9000      	str	r0, [sp, #0]
   1f430:	4b12      	ldr	r3, [pc, #72]	; (1f47c <modlog_init+0x90>)
   1f432:	681c      	ldr	r4, [r3, #0]
   1f434:	4603      	mov	r3, r0
   1f436:	4602      	mov	r2, r0
   1f438:	4601      	mov	r1, r0
   1f43a:	47a0      	blx	r4

    /* Register the default console mapping if configured. */
#if MYNEWT_VAL(MODLOG_CONSOLE_DFLT)
    rc = modlog_register(MODLOG_MODULE_DFLT, log_console_get(),
   1f43c:	f7ff fa58 	bl	1e8f0 <log_console_get>
   1f440:	4601      	mov	r1, r0
   1f442:	2300      	movs	r3, #0
   1f444:	461a      	mov	r2, r3
   1f446:	20ff      	movs	r0, #255	; 0xff
   1f448:	f7ff ff78 	bl	1f33c <modlog_register>
                         LOG_LEVEL_DEBUG, NULL);
    SYSINIT_PANIC_ASSERT(rc == 0);
   1f44c:	b138      	cbz	r0, 1f45e <modlog_init+0x72>
   1f44e:	2000      	movs	r0, #0
   1f450:	9000      	str	r0, [sp, #0]
   1f452:	4b0a      	ldr	r3, [pc, #40]	; (1f47c <modlog_init+0x90>)
   1f454:	681c      	ldr	r4, [r3, #0]
   1f456:	4603      	mov	r3, r0
   1f458:	4602      	mov	r2, r0
   1f45a:	4601      	mov	r1, r0
   1f45c:	47a0      	blx	r4
#endif
}
   1f45e:	b002      	add	sp, #8
   1f460:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1f462:	461a      	mov	r2, r3
   1f464:	4619      	mov	r1, r3
   1f466:	4618      	mov	r0, r3
   1f468:	f7e9 fd7c 	bl	8f64 <__assert_func>
   1f46c:	20004538 	.word	0x20004538
   1f470:	00024d50 	.word	0x00024d50
   1f474:	200048e0 	.word	0x200048e0
   1f478:	200049a0 	.word	0x200049a0
   1f47c:	2000064c 	.word	0x2000064c
   1f480:	200049bc 	.word	0x200049bc
   1f484:	200048dc 	.word	0x200048dc
   1f488:	200049c0 	.word	0x200049c0

0001f48c <mfg_seek_next_aux>:
 *                                  for reading.
 *                              Other MFG error code on failure.
 */
static int
mfg_seek_next_aux(struct mfg_reader *reader)
{
   1f48c:	b530      	push	{r4, r5, lr}
   1f48e:	b083      	sub	sp, #12
    const struct flash_area *fap;
    const struct mfg_mmr *mmr;
    int rc;

    if (reader->mmr_idx >= mfg_num_mmrs) {
   1f490:	7885      	ldrb	r5, [r0, #2]
   1f492:	4b20      	ldr	r3, [pc, #128]	; (1f514 <mfg_seek_next_aux+0x88>)
   1f494:	681b      	ldr	r3, [r3, #0]
   1f496:	429d      	cmp	r5, r3
   1f498:	da33      	bge.n	1f502 <mfg_seek_next_aux+0x76>
   1f49a:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }

    mmr = &mfg_mmrs[reader->mmr_idx];

    rc = flash_area_open(mmr->area_id, &fap);
   1f49c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   1f4a0:	a901      	add	r1, sp, #4
   1f4a2:	4a1d      	ldr	r2, [pc, #116]	; (1f518 <mfg_seek_next_aux+0x8c>)
   1f4a4:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
   1f4a8:	f7fe fe88 	bl	1e1bc <flash_area_open>
    if (rc != 0) {
   1f4ac:	bb60      	cbnz	r0, 1f508 <mfg_seek_next_aux+0x7c>
        return SYS_EIO;
    }

    if (reader->offset == 0) {
   1f4ae:	6862      	ldr	r2, [r4, #4]
   1f4b0:	b9c2      	cbnz	r2, 1f4e4 <mfg_seek_next_aux+0x58>
        /* First seek; advance to the start of the MMR. */
        reader->offset = mmr->offset;
   1f4b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1f4b6:	4b18      	ldr	r3, [pc, #96]	; (1f518 <mfg_seek_next_aux+0x8c>)
   1f4b8:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   1f4bc:	686b      	ldr	r3, [r5, #4]
   1f4be:	6063      	str	r3, [r4, #4]
    } else {
        /* Follow-up seek; skip the current TLV. */
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    }

    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
   1f4c0:	6861      	ldr	r1, [r4, #4]
   1f4c2:	9801      	ldr	r0, [sp, #4]
   1f4c4:	6883      	ldr	r3, [r0, #8]
   1f4c6:	3b08      	subs	r3, #8
   1f4c8:	4299      	cmp	r1, r3
   1f4ca:	d313      	bcc.n	1f4f4 <mfg_seek_next_aux+0x68>
        /* Reached end of the MMR; advance to the next MMR if one exists. */
        if (reader->mmr_idx + 1 >= mfg_num_mmrs) {
   1f4cc:	78a3      	ldrb	r3, [r4, #2]
   1f4ce:	1c59      	adds	r1, r3, #1
   1f4d0:	4a10      	ldr	r2, [pc, #64]	; (1f514 <mfg_seek_next_aux+0x88>)
   1f4d2:	6812      	ldr	r2, [r2, #0]
   1f4d4:	4291      	cmp	r1, r2
   1f4d6:	da0a      	bge.n	1f4ee <mfg_seek_next_aux+0x62>
            rc = SYS_EDONE;
        } else {
            reader->offset = 0;
   1f4d8:	2200      	movs	r2, #0
   1f4da:	6062      	str	r2, [r4, #4]
            reader->mmr_idx++;
   1f4dc:	70a1      	strb	r1, [r4, #2]
            rc = SYS_EAGAIN;
   1f4de:	f06f 0005 	mvn.w	r0, #5
   1f4e2:	e00c      	b.n	1f4fe <mfg_seek_next_aux+0x72>
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
   1f4e4:	7863      	ldrb	r3, [r4, #1]
   1f4e6:	4413      	add	r3, r2
   1f4e8:	3302      	adds	r3, #2
   1f4ea:	6063      	str	r3, [r4, #4]
   1f4ec:	e7e8      	b.n	1f4c0 <mfg_seek_next_aux+0x34>
            rc = SYS_EDONE;
   1f4ee:	f06f 000e 	mvn.w	r0, #14
        }
        goto done;
   1f4f2:	e004      	b.n	1f4fe <mfg_seek_next_aux+0x72>
    }

    /* Read current TLV header. */
    rc = flash_area_read(fap, reader->offset, &reader->cur_tlv,
   1f4f4:	2302      	movs	r3, #2
   1f4f6:	4622      	mov	r2, r4
   1f4f8:	f7fe fec0 	bl	1e27c <flash_area_read>
                         MFG_META_TLV_SZ);
    if (rc != 0) {
   1f4fc:	b938      	cbnz	r0, 1f50e <mfg_seek_next_aux+0x82>
    }

done:
    flash_area_close(fap);
    return rc;
}
   1f4fe:	b003      	add	sp, #12
   1f500:	bd30      	pop	{r4, r5, pc}
        return SYS_EINVAL;
   1f502:	f06f 0001 	mvn.w	r0, #1
   1f506:	e7fa      	b.n	1f4fe <mfg_seek_next_aux+0x72>
        return SYS_EIO;
   1f508:	f06f 0004 	mvn.w	r0, #4
   1f50c:	e7f7      	b.n	1f4fe <mfg_seek_next_aux+0x72>
        rc = SYS_EIO;
   1f50e:	f06f 0004 	mvn.w	r0, #4
   1f512:	e7f4      	b.n	1f4fe <mfg_seek_next_aux+0x72>
   1f514:	20004a00 	.word	0x20004a00
   1f518:	200049e8 	.word	0x200049e8

0001f51c <mfg_read_mmr>:
/**
 * Reads an MMR from the end of the specified flash area.
 */
static int
mfg_read_mmr(uint8_t area_id, struct mfg_mmr *out_mmr)
{
   1f51c:	b530      	push	{r4, r5, lr}
   1f51e:	b085      	sub	sp, #20
   1f520:	4605      	mov	r5, r0
   1f522:	460c      	mov	r4, r1
    const struct flash_area *fap;
    struct mfg_meta_footer ftr;
    int rc;

    rc = flash_area_open(area_id, &fap);
   1f524:	a903      	add	r1, sp, #12
   1f526:	f7fe fe49 	bl	1e1bc <flash_area_open>
    if (rc != 0) {
   1f52a:	b9d8      	cbnz	r0, 1f564 <mfg_read_mmr+0x48>
        return SYS_EIO;
    }

    /* Read the MMR footer. */
    rc = flash_area_read(fap, fap->fa_size - sizeof ftr, &ftr, sizeof ftr);
   1f52c:	9803      	ldr	r0, [sp, #12]
   1f52e:	6881      	ldr	r1, [r0, #8]
   1f530:	2308      	movs	r3, #8
   1f532:	aa01      	add	r2, sp, #4
   1f534:	3908      	subs	r1, #8
   1f536:	f7fe fea1 	bl	1e27c <flash_area_read>
    flash_area_close(fap);

    if (rc != 0) {
   1f53a:	b9b0      	cbnz	r0, 1f56a <mfg_read_mmr+0x4e>
        return SYS_EIO;
    }

    if (ftr.magic != MFG_META_MAGIC) {
   1f53c:	9a02      	ldr	r2, [sp, #8]
   1f53e:	4b11      	ldr	r3, [pc, #68]	; (1f584 <mfg_read_mmr+0x68>)
   1f540:	429a      	cmp	r2, r3
   1f542:	d115      	bne.n	1f570 <mfg_read_mmr+0x54>
        return SYS_ENODEV;
    }

    if (ftr.version != MFG_META_VERSION) {
   1f544:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1f548:	2b02      	cmp	r3, #2
   1f54a:	d114      	bne.n	1f576 <mfg_read_mmr+0x5a>
        return SYS_ENOTSUP;
    }

    if (ftr.size > fap->fa_size) {
   1f54c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1f550:	9b03      	ldr	r3, [sp, #12]
   1f552:	689b      	ldr	r3, [r3, #8]
   1f554:	429a      	cmp	r2, r3
   1f556:	d811      	bhi.n	1f57c <mfg_read_mmr+0x60>
        return SYS_ENODEV;
    }

    *out_mmr = (struct mfg_mmr) {
        .area_id = area_id,
        .offset = fap->fa_size - ftr.size,
   1f558:	1a9b      	subs	r3, r3, r2
    *out_mmr = (struct mfg_mmr) {
   1f55a:	7025      	strb	r5, [r4, #0]
   1f55c:	6063      	str	r3, [r4, #4]
   1f55e:	60a2      	str	r2, [r4, #8]
        .size = ftr.size,
    };

    return 0;
}
   1f560:	b005      	add	sp, #20
   1f562:	bd30      	pop	{r4, r5, pc}
        return SYS_EIO;
   1f564:	f06f 0004 	mvn.w	r0, #4
   1f568:	e7fa      	b.n	1f560 <mfg_read_mmr+0x44>
        return SYS_EIO;
   1f56a:	f06f 0004 	mvn.w	r0, #4
   1f56e:	e7f7      	b.n	1f560 <mfg_read_mmr+0x44>
        return SYS_ENODEV;
   1f570:	f06f 0008 	mvn.w	r0, #8
   1f574:	e7f4      	b.n	1f560 <mfg_read_mmr+0x44>
        return SYS_ENOTSUP;
   1f576:	f06f 000b 	mvn.w	r0, #11
   1f57a:	e7f1      	b.n	1f560 <mfg_read_mmr+0x44>
        return SYS_ENODEV;
   1f57c:	f06f 0008 	mvn.w	r0, #8
   1f580:	e7ee      	b.n	1f560 <mfg_read_mmr+0x44>
   1f582:	bf00      	nop
   1f584:	3bb2a269 	.word	0x3bb2a269

0001f588 <mfg_read_next_mmr>:
 * Reads an MMR from the end of the specified flash area.  On success, the
 * global MMR list is populated with the result for subsequent reading.
 */
static int
mfg_read_next_mmr(uint8_t area_id)
{
   1f588:	b508      	push	{r3, lr}
    int rc;
    int i;

    /* Detect if this MMR has already been read. */
    for (i = 0; i < mfg_num_mmrs; i++) {
   1f58a:	2300      	movs	r3, #0
   1f58c:	e000      	b.n	1f590 <mfg_read_next_mmr+0x8>
   1f58e:	3301      	adds	r3, #1
   1f590:	4a10      	ldr	r2, [pc, #64]	; (1f5d4 <mfg_read_next_mmr+0x4c>)
   1f592:	6811      	ldr	r1, [r2, #0]
   1f594:	4299      	cmp	r1, r3
   1f596:	dd09      	ble.n	1f5ac <mfg_read_next_mmr+0x24>
        if (mfg_mmrs[i].area_id == area_id) {
   1f598:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1f59c:	490e      	ldr	r1, [pc, #56]	; (1f5d8 <mfg_read_next_mmr+0x50>)
   1f59e:	f811 2022 	ldrb.w	r2, [r1, r2, lsl #2]
   1f5a2:	4282      	cmp	r2, r0
   1f5a4:	d1f3      	bne.n	1f58e <mfg_read_next_mmr+0x6>
            return SYS_EALREADY;
   1f5a6:	f06f 000a 	mvn.w	r0, #10
        return rc;
    }

    mfg_num_mmrs++;
    return 0;
}
   1f5aa:	bd08      	pop	{r3, pc}
    if (mfg_num_mmrs >= MYNEWT_VAL(MFG_MAX_MMRS)) {
   1f5ac:	2901      	cmp	r1, #1
   1f5ae:	dc0d      	bgt.n	1f5cc <mfg_read_next_mmr+0x44>
    rc = mfg_read_mmr(area_id, &mfg_mmrs[mfg_num_mmrs]);
   1f5b0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   1f5b4:	4b08      	ldr	r3, [pc, #32]	; (1f5d8 <mfg_read_next_mmr+0x50>)
   1f5b6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1f5ba:	f7ff ffaf 	bl	1f51c <mfg_read_mmr>
    if (rc != 0) {
   1f5be:	2800      	cmp	r0, #0
   1f5c0:	d1f3      	bne.n	1f5aa <mfg_read_next_mmr+0x22>
    mfg_num_mmrs++;
   1f5c2:	4a04      	ldr	r2, [pc, #16]	; (1f5d4 <mfg_read_next_mmr+0x4c>)
   1f5c4:	6813      	ldr	r3, [r2, #0]
   1f5c6:	3301      	adds	r3, #1
   1f5c8:	6013      	str	r3, [r2, #0]
    return 0;
   1f5ca:	e7ee      	b.n	1f5aa <mfg_read_next_mmr+0x22>
        return SYS_ENOMEM;
   1f5cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f5d0:	e7eb      	b.n	1f5aa <mfg_read_next_mmr+0x22>
   1f5d2:	bf00      	nop
   1f5d4:	20004a00 	.word	0x20004a00
   1f5d8:	200049e8 	.word	0x200049e8

0001f5dc <mfg_open_flash_area>:
{
   1f5dc:	b508      	push	{r3, lr}
    assert(reader->mmr_idx < mfg_num_mmrs);
   1f5de:	7883      	ldrb	r3, [r0, #2]
   1f5e0:	4a0a      	ldr	r2, [pc, #40]	; (1f60c <mfg_open_flash_area+0x30>)
   1f5e2:	6812      	ldr	r2, [r2, #0]
   1f5e4:	4293      	cmp	r3, r2
   1f5e6:	da08      	bge.n	1f5fa <mfg_open_flash_area+0x1e>
    rc = flash_area_open(mmr->area_id, fap);
   1f5e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1f5ec:	4a08      	ldr	r2, [pc, #32]	; (1f610 <mfg_open_flash_area+0x34>)
   1f5ee:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
   1f5f2:	f7fe fde3 	bl	1e1bc <flash_area_open>
    if (rc != 0) {
   1f5f6:	b930      	cbnz	r0, 1f606 <mfg_open_flash_area+0x2a>
}
   1f5f8:	bd08      	pop	{r3, pc}
    assert(reader->mmr_idx < mfg_num_mmrs);
   1f5fa:	2300      	movs	r3, #0
   1f5fc:	461a      	mov	r2, r3
   1f5fe:	4619      	mov	r1, r3
   1f600:	4618      	mov	r0, r3
   1f602:	f7e9 fcaf 	bl	8f64 <__assert_func>
        return SYS_EIO;
   1f606:	f06f 0004 	mvn.w	r0, #4
   1f60a:	e7f5      	b.n	1f5f8 <mfg_open_flash_area+0x1c>
   1f60c:	20004a00 	.word	0x20004a00
   1f610:	200049e8 	.word	0x200049e8

0001f614 <mfg_read_tlv_body>:
{
   1f614:	b570      	push	{r4, r5, r6, lr}
   1f616:	b082      	sub	sp, #8
   1f618:	4606      	mov	r6, r0
   1f61a:	460c      	mov	r4, r1
   1f61c:	4615      	mov	r5, r2
    rc = mfg_open_flash_area(reader, &fap);
   1f61e:	a901      	add	r1, sp, #4
   1f620:	f7ff ffdc 	bl	1f5dc <mfg_open_flash_area>
    if (rc != 0) {
   1f624:	b108      	cbz	r0, 1f62a <mfg_read_tlv_body+0x16>
}
   1f626:	b002      	add	sp, #8
   1f628:	bd70      	pop	{r4, r5, r6, pc}
    memset(dst, 0, max_size);
   1f62a:	462a      	mov	r2, r5
   1f62c:	2100      	movs	r1, #0
   1f62e:	4620      	mov	r0, r4
   1f630:	f7ee fa53 	bl	dada <memset>
    read_sz = min(max_size, reader->cur_tlv.size);
   1f634:	7873      	ldrb	r3, [r6, #1]
    rc = flash_area_read(fap, reader->offset + MFG_META_TLV_SZ, dst, read_sz);
   1f636:	6871      	ldr	r1, [r6, #4]
   1f638:	42ab      	cmp	r3, r5
   1f63a:	bfa8      	it	ge
   1f63c:	462b      	movge	r3, r5
   1f63e:	4622      	mov	r2, r4
   1f640:	3102      	adds	r1, #2
   1f642:	9801      	ldr	r0, [sp, #4]
   1f644:	f7fe fe1a 	bl	1e27c <flash_area_read>
    if (rc != 0) {
   1f648:	2800      	cmp	r0, #0
   1f64a:	d0ec      	beq.n	1f626 <mfg_read_tlv_body+0x12>
        return SYS_EIO;
   1f64c:	f06f 0004 	mvn.w	r0, #4
   1f650:	e7e9      	b.n	1f626 <mfg_read_tlv_body+0x12>

0001f652 <mfg_seek_next>:
{
   1f652:	b510      	push	{r4, lr}
   1f654:	4604      	mov	r4, r0
        rc = mfg_seek_next_aux(reader);
   1f656:	4620      	mov	r0, r4
   1f658:	f7ff ff18 	bl	1f48c <mfg_seek_next_aux>
    } while (rc == SYS_EAGAIN);
   1f65c:	f110 0f06 	cmn.w	r0, #6
   1f660:	d0f9      	beq.n	1f656 <mfg_seek_next+0x4>
}
   1f662:	bd10      	pop	{r4, pc}

0001f664 <mfg_seek_next_with_type>:
{
   1f664:	b538      	push	{r3, r4, r5, lr}
   1f666:	4604      	mov	r4, r0
   1f668:	460d      	mov	r5, r1
        rc = mfg_seek_next(reader);
   1f66a:	4620      	mov	r0, r4
   1f66c:	f7ff fff1 	bl	1f652 <mfg_seek_next>
        if (rc != 0) {
   1f670:	4602      	mov	r2, r0
   1f672:	b910      	cbnz	r0, 1f67a <mfg_seek_next_with_type+0x16>
        if (reader->cur_tlv.type == type) {
   1f674:	7823      	ldrb	r3, [r4, #0]
   1f676:	42ab      	cmp	r3, r5
   1f678:	d1f7      	bne.n	1f66a <mfg_seek_next_with_type+0x6>
}
   1f67a:	4610      	mov	r0, r2
   1f67c:	bd38      	pop	{r3, r4, r5, pc}

0001f67e <mfg_read_tlv_flash_area>:
{
   1f67e:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mfa, sizeof *out_mfa);
   1f680:	220a      	movs	r2, #10
   1f682:	f7ff ffc7 	bl	1f614 <mfg_read_tlv_body>
}
   1f686:	bd08      	pop	{r3, pc}

0001f688 <mfg_read_tlv_mmr_ref>:
{
   1f688:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mr, sizeof *out_mr);
   1f68a:	2201      	movs	r2, #1
   1f68c:	f7ff ffc2 	bl	1f614 <mfg_read_tlv_body>
}
   1f690:	bd08      	pop	{r3, pc}
	...

0001f694 <mfg_init>:
 * called before any TLVs can be read.  No-op if this function has already
 * executed successfully.
 */
void
mfg_init(void)
{
   1f694:	b508      	push	{r3, lr}
    int rc;

    if (mfg_initialized) {
   1f696:	4b0f      	ldr	r3, [pc, #60]	; (1f6d4 <mfg_init+0x40>)
   1f698:	781b      	ldrb	r3, [r3, #0]
   1f69a:	b97b      	cbnz	r3, 1f6bc <mfg_init+0x28>
        return;
    }
    mfg_initialized = true;
   1f69c:	4b0d      	ldr	r3, [pc, #52]	; (1f6d4 <mfg_init+0x40>)
   1f69e:	2201      	movs	r2, #1
   1f6a0:	701a      	strb	r2, [r3, #0]

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1f6a2:	4b0d      	ldr	r3, [pc, #52]	; (1f6d8 <mfg_init+0x44>)
   1f6a4:	781b      	ldrb	r3, [r3, #0]
   1f6a6:	b153      	cbz	r3, 1f6be <mfg_init+0x2a>

    /* Read the first MMR from the boot loader area. */
    rc = mfg_read_next_mmr(FLASH_AREA_BOOTLOADER);
   1f6a8:	2000      	movs	r0, #0
   1f6aa:	f7ff ff6d 	bl	1f588 <mfg_read_next_mmr>
    if (rc != 0) {
   1f6ae:	4603      	mov	r3, r0
   1f6b0:	b150      	cbz	r0, 1f6c8 <mfg_init+0x34>
    }

    return;

err:
    MFG_LOG(ERROR, "failed to read MMRs: rc=%d", rc);
   1f6b2:	4a0a      	ldr	r2, [pc, #40]	; (1f6dc <mfg_init+0x48>)
   1f6b4:	2103      	movs	r1, #3
   1f6b6:	2080      	movs	r0, #128	; 0x80
   1f6b8:	f7ff fe7a 	bl	1f3b0 <modlog_printf>
}
   1f6bc:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1f6be:	461a      	mov	r2, r3
   1f6c0:	4619      	mov	r1, r3
   1f6c2:	4618      	mov	r0, r3
   1f6c4:	f7e9 fc4e 	bl	8f64 <__assert_func>
    rc = mfg_read_mmr_refs();
   1f6c8:	f000 f812 	bl	1f6f0 <mfg_read_mmr_refs>
    if (rc != 0) {
   1f6cc:	4603      	mov	r3, r0
   1f6ce:	2800      	cmp	r0, #0
   1f6d0:	d0f4      	beq.n	1f6bc <mfg_init+0x28>
   1f6d2:	e7ee      	b.n	1f6b2 <mfg_init+0x1e>
   1f6d4:	200049e4 	.word	0x200049e4
   1f6d8:	20004538 	.word	0x20004538
   1f6dc:	00024d64 	.word	0x00024d64

0001f6e0 <mfg_open>:
{
   1f6e0:	b510      	push	{r4, lr}
   1f6e2:	4604      	mov	r4, r0
    mfg_init();
   1f6e4:	f7ff ffd6 	bl	1f694 <mfg_init>
    *out_reader = (struct mfg_reader) { 0 };
   1f6e8:	2300      	movs	r3, #0
   1f6ea:	6023      	str	r3, [r4, #0]
   1f6ec:	6063      	str	r3, [r4, #4]
}
   1f6ee:	bd10      	pop	{r4, pc}

0001f6f0 <mfg_read_mmr_refs>:
{
   1f6f0:	b500      	push	{lr}
   1f6f2:	b085      	sub	sp, #20
    mfg_open(&reader);
   1f6f4:	a801      	add	r0, sp, #4
   1f6f6:	f7ff fff3 	bl	1f6e0 <mfg_open>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_MMR_REF);
   1f6fa:	2104      	movs	r1, #4
   1f6fc:	eb0d 0001 	add.w	r0, sp, r1
   1f700:	f7ff ffb0 	bl	1f664 <mfg_seek_next_with_type>
        switch (rc) {
   1f704:	f110 0f0f 	cmn.w	r0, #15
   1f708:	d00f      	beq.n	1f72a <mfg_read_mmr_refs+0x3a>
   1f70a:	b978      	cbnz	r0, 1f72c <mfg_read_mmr_refs+0x3c>
        rc = mfg_read_tlv_mmr_ref(&reader, &mmr_ref);
   1f70c:	a903      	add	r1, sp, #12
   1f70e:	a801      	add	r0, sp, #4
   1f710:	f7ff ffba 	bl	1f688 <mfg_read_tlv_mmr_ref>
        if (rc != 0) {
   1f714:	b950      	cbnz	r0, 1f72c <mfg_read_mmr_refs+0x3c>
        rc = mfg_read_next_mmr(mmr_ref.area_id);
   1f716:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1f71a:	f7ff ff35 	bl	1f588 <mfg_read_next_mmr>
        if (rc != 0 && rc != SYS_EALREADY) {
   1f71e:	2800      	cmp	r0, #0
   1f720:	d0eb      	beq.n	1f6fa <mfg_read_mmr_refs+0xa>
   1f722:	f110 0f0b 	cmn.w	r0, #11
   1f726:	d0e8      	beq.n	1f6fa <mfg_read_mmr_refs+0xa>
   1f728:	e000      	b.n	1f72c <mfg_read_mmr_refs+0x3c>
        switch (rc) {
   1f72a:	2000      	movs	r0, #0
}
   1f72c:	b005      	add	sp, #20
   1f72e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0001f734 <reboot_conf_export>:

static int
reboot_conf_export(void (*func)(char *name, char *val),
                   enum conf_export_tgt tgt)
{
    if (tgt == CONF_EXPORT_SHOW) {
   1f734:	2901      	cmp	r1, #1
   1f736:	d001      	beq.n	1f73c <reboot_conf_export+0x8>
        func("reboot/reboot_cnt", reboot_cnt_str);
        func("reboot/written", log_reboot_written_str);
    }
    return 0;
}
   1f738:	2000      	movs	r0, #0
   1f73a:	4770      	bx	lr
{
   1f73c:	b510      	push	{r4, lr}
   1f73e:	4604      	mov	r4, r0
        func("reboot/reboot_cnt", reboot_cnt_str);
   1f740:	4903      	ldr	r1, [pc, #12]	; (1f750 <reboot_conf_export+0x1c>)
   1f742:	4804      	ldr	r0, [pc, #16]	; (1f754 <reboot_conf_export+0x20>)
   1f744:	47a0      	blx	r4
        func("reboot/written", log_reboot_written_str);
   1f746:	4904      	ldr	r1, [pc, #16]	; (1f758 <reboot_conf_export+0x24>)
   1f748:	4804      	ldr	r0, [pc, #16]	; (1f75c <reboot_conf_export+0x28>)
   1f74a:	47a0      	blx	r4
}
   1f74c:	2000      	movs	r0, #0
   1f74e:	bd10      	pop	{r4, pc}
   1f750:	20004a18 	.word	0x20004a18
   1f754:	00024d80 	.word	0x00024d80
   1f758:	20004a08 	.word	0x20004a08
   1f75c:	00024d94 	.word	0x00024d94

0001f760 <reboot_conf_set>:
    if (argc == 1) {
   1f760:	2801      	cmp	r0, #1
   1f762:	d001      	beq.n	1f768 <reboot_conf_set+0x8>
    return OS_ENOENT;
   1f764:	200a      	movs	r0, #10
}
   1f766:	4770      	bx	lr
{
   1f768:	b538      	push	{r3, r4, r5, lr}
   1f76a:	4614      	mov	r4, r2
        if (!strcmp(argv[0], "reboot_cnt")) {
   1f76c:	680d      	ldr	r5, [r1, #0]
   1f76e:	490d      	ldr	r1, [pc, #52]	; (1f7a4 <reboot_conf_set+0x44>)
   1f770:	4628      	mov	r0, r5
   1f772:	f7ee f9dd 	bl	db30 <strcmp>
   1f776:	b130      	cbz	r0, 1f786 <reboot_conf_set+0x26>
        } else if (!strcmp(argv[0], "written")) {
   1f778:	490b      	ldr	r1, [pc, #44]	; (1f7a8 <reboot_conf_set+0x48>)
   1f77a:	4628      	mov	r0, r5
   1f77c:	f7ee f9d8 	bl	db30 <strcmp>
   1f780:	b140      	cbz	r0, 1f794 <reboot_conf_set+0x34>
    return OS_ENOENT;
   1f782:	200a      	movs	r0, #10
}
   1f784:	bd38      	pop	{r3, r4, r5, pc}
            return CONF_VALUE_SET(val, CONF_INT16, reboot_cnt);
   1f786:	2302      	movs	r3, #2
   1f788:	4a08      	ldr	r2, [pc, #32]	; (1f7ac <reboot_conf_set+0x4c>)
   1f78a:	2103      	movs	r1, #3
   1f78c:	4620      	mov	r0, r4
   1f78e:	f7ef f9f0 	bl	eb72 <conf_value_from_str>
   1f792:	e7f7      	b.n	1f784 <reboot_conf_set+0x24>
            return CONF_VALUE_SET(val, CONF_INT16, log_reboot_written);
   1f794:	2301      	movs	r3, #1
   1f796:	4a06      	ldr	r2, [pc, #24]	; (1f7b0 <reboot_conf_set+0x50>)
   1f798:	2103      	movs	r1, #3
   1f79a:	4620      	mov	r0, r4
   1f79c:	f7ef f9e9 	bl	eb72 <conf_value_from_str>
   1f7a0:	e7f0      	b.n	1f784 <reboot_conf_set+0x24>
   1f7a2:	bf00      	nop
   1f7a4:	00024da4 	.word	0x00024da4
   1f7a8:	00024db0 	.word	0x00024db0
   1f7ac:	20004a14 	.word	0x20004a14
   1f7b0:	20004a04 	.word	0x20004a04

0001f7b4 <reboot_conf_get>:
    if (argc == 1) {
   1f7b4:	2801      	cmp	r0, #1
   1f7b6:	d11b      	bne.n	1f7f0 <reboot_conf_get+0x3c>
{
   1f7b8:	b510      	push	{r4, lr}
        if (!strcmp(argv[0], "reboot_cnt")) {
   1f7ba:	680c      	ldr	r4, [r1, #0]
   1f7bc:	490d      	ldr	r1, [pc, #52]	; (1f7f4 <reboot_conf_get+0x40>)
   1f7be:	4620      	mov	r0, r4
   1f7c0:	f7ee f9b6 	bl	db30 <strcmp>
   1f7c4:	b130      	cbz	r0, 1f7d4 <reboot_conf_get+0x20>
        } else if (!strcmp(argv[0], "written")) {
   1f7c6:	490c      	ldr	r1, [pc, #48]	; (1f7f8 <reboot_conf_get+0x44>)
   1f7c8:	4620      	mov	r0, r4
   1f7ca:	f7ee f9b1 	bl	db30 <strcmp>
   1f7ce:	b140      	cbz	r0, 1f7e2 <reboot_conf_get+0x2e>
    return NULL;
   1f7d0:	2000      	movs	r0, #0
}
   1f7d2:	bd10      	pop	{r4, pc}
            return conf_str_from_value(CONF_INT16, &reboot_cnt,
   1f7d4:	230c      	movs	r3, #12
   1f7d6:	4a09      	ldr	r2, [pc, #36]	; (1f7fc <reboot_conf_get+0x48>)
   1f7d8:	4909      	ldr	r1, [pc, #36]	; (1f800 <reboot_conf_get+0x4c>)
   1f7da:	2003      	movs	r0, #3
   1f7dc:	f7ef fa2e 	bl	ec3c <conf_str_from_value>
   1f7e0:	e7f7      	b.n	1f7d2 <reboot_conf_get+0x1e>
            return conf_str_from_value(CONF_BOOL, &log_reboot_written,
   1f7e2:	230c      	movs	r3, #12
   1f7e4:	4a07      	ldr	r2, [pc, #28]	; (1f804 <reboot_conf_get+0x50>)
   1f7e6:	4908      	ldr	r1, [pc, #32]	; (1f808 <reboot_conf_get+0x54>)
   1f7e8:	200a      	movs	r0, #10
   1f7ea:	f7ef fa27 	bl	ec3c <conf_str_from_value>
   1f7ee:	e7f0      	b.n	1f7d2 <reboot_conf_get+0x1e>
    return NULL;
   1f7f0:	2000      	movs	r0, #0
}
   1f7f2:	4770      	bx	lr
   1f7f4:	00024da4 	.word	0x00024da4
   1f7f8:	00024db0 	.word	0x00024db0
   1f7fc:	20004a18 	.word	0x20004a18
   1f800:	20004a14 	.word	0x20004a14
   1f804:	20004a08 	.word	0x20004a08
   1f808:	20004a04 	.word	0x20004a04

0001f80c <log_reboot_write>:
{
   1f80c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f80e:	b0d1      	sub	sp, #324	; 0x144
   1f810:	4606      	mov	r6, r0
    rc = imgr_read_info(boot_current_slot, &ver, hash, NULL);
   1f812:	2300      	movs	r3, #0
   1f814:	aa46      	add	r2, sp, #280	; 0x118
   1f816:	a94e      	add	r1, sp, #312	; 0x138
   1f818:	4839      	ldr	r0, [pc, #228]	; (1f900 <log_reboot_write+0xf4>)
   1f81a:	6800      	ldr	r0, [r0, #0]
   1f81c:	f7fc ffbc 	bl	1c798 <imgr_read_info>
    if (rc != 0) {
   1f820:	4607      	mov	r7, r0
   1f822:	2800      	cmp	r0, #0
   1f824:	d15f      	bne.n	1f8e6 <log_reboot_write+0xda>
                    REBOOT_REASON_STR(info->reason), reboot_cnt, ver.iv_major,
   1f826:	7833      	ldrb	r3, [r6, #0]
    off += snprintf(buf + off, sizeof buf - off,
   1f828:	2b01      	cmp	r3, #1
   1f82a:	d00f      	beq.n	1f84c <log_reboot_write+0x40>
                    REBOOT_REASON_STR(info->reason), reboot_cnt, ver.iv_major,
   1f82c:	2b02      	cmp	r3, #2
   1f82e:	d025      	beq.n	1f87c <log_reboot_write+0x70>
   1f830:	2b03      	cmp	r3, #3
   1f832:	d025      	beq.n	1f880 <log_reboot_write+0x74>
   1f834:	2b04      	cmp	r3, #4
   1f836:	d025      	beq.n	1f884 <log_reboot_write+0x78>
   1f838:	2b05      	cmp	r3, #5
   1f83a:	d025      	beq.n	1f888 <log_reboot_write+0x7c>
   1f83c:	2b06      	cmp	r3, #6
   1f83e:	d025      	beq.n	1f88c <log_reboot_write+0x80>
   1f840:	2b07      	cmp	r3, #7
   1f842:	d001      	beq.n	1f848 <log_reboot_write+0x3c>
   1f844:	4b2f      	ldr	r3, [pc, #188]	; (1f904 <log_reboot_write+0xf8>)
   1f846:	e002      	b.n	1f84e <log_reboot_write+0x42>
   1f848:	4b2f      	ldr	r3, [pc, #188]	; (1f908 <log_reboot_write+0xfc>)
   1f84a:	e000      	b.n	1f84e <log_reboot_write+0x42>
    off += snprintf(buf + off, sizeof buf - off,
   1f84c:	4b2f      	ldr	r3, [pc, #188]	; (1f90c <log_reboot_write+0x100>)
                    REBOOT_REASON_STR(info->reason), reboot_cnt, ver.iv_major,
   1f84e:	f89d 2138 	ldrb.w	r2, [sp, #312]	; 0x138
                    ver.iv_minor, ver.iv_revision,
   1f852:	f89d 1139 	ldrb.w	r1, [sp, #313]	; 0x139
   1f856:	f8bd 013a 	ldrh.w	r0, [sp, #314]	; 0x13a
    off += snprintf(buf + off, sizeof buf - off,
   1f85a:	9c4f      	ldr	r4, [sp, #316]	; 0x13c
   1f85c:	9404      	str	r4, [sp, #16]
   1f85e:	9003      	str	r0, [sp, #12]
   1f860:	9102      	str	r1, [sp, #8]
   1f862:	9201      	str	r2, [sp, #4]
   1f864:	4a2a      	ldr	r2, [pc, #168]	; (1f910 <log_reboot_write+0x104>)
   1f866:	8812      	ldrh	r2, [r2, #0]
   1f868:	9200      	str	r2, [sp, #0]
   1f86a:	4a2a      	ldr	r2, [pc, #168]	; (1f914 <log_reboot_write+0x108>)
   1f86c:	f44f 7180 	mov.w	r1, #256	; 0x100
   1f870:	a806      	add	r0, sp, #24
   1f872:	f7ee fd74 	bl	e35e <snprintf>
   1f876:	4604      	mov	r4, r0
    for (i = 0; i < sizeof hash; i++) {
   1f878:	463d      	mov	r5, r7
   1f87a:	e017      	b.n	1f8ac <log_reboot_write+0xa0>
                    REBOOT_REASON_STR(info->reason), reboot_cnt, ver.iv_major,
   1f87c:	4b26      	ldr	r3, [pc, #152]	; (1f918 <log_reboot_write+0x10c>)
   1f87e:	e7e6      	b.n	1f84e <log_reboot_write+0x42>
   1f880:	4b26      	ldr	r3, [pc, #152]	; (1f91c <log_reboot_write+0x110>)
   1f882:	e7e4      	b.n	1f84e <log_reboot_write+0x42>
   1f884:	4b26      	ldr	r3, [pc, #152]	; (1f920 <log_reboot_write+0x114>)
   1f886:	e7e2      	b.n	1f84e <log_reboot_write+0x42>
   1f888:	4b26      	ldr	r3, [pc, #152]	; (1f924 <log_reboot_write+0x118>)
   1f88a:	e7e0      	b.n	1f84e <log_reboot_write+0x42>
   1f88c:	4b26      	ldr	r3, [pc, #152]	; (1f928 <log_reboot_write+0x11c>)
   1f88e:	e7de      	b.n	1f84e <log_reboot_write+0x42>
                        (unsigned int)hash[i]);
   1f890:	f505 73a0 	add.w	r3, r5, #320	; 0x140
   1f894:	446b      	add	r3, sp
        off += snprintf(buf + off, sizeof buf - off, "%02x",
   1f896:	f813 3c28 	ldrb.w	r3, [r3, #-40]
   1f89a:	4a24      	ldr	r2, [pc, #144]	; (1f92c <log_reboot_write+0x120>)
   1f89c:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   1f8a0:	a806      	add	r0, sp, #24
   1f8a2:	4420      	add	r0, r4
   1f8a4:	f7ee fd5b 	bl	e35e <snprintf>
   1f8a8:	4404      	add	r4, r0
    for (i = 0; i < sizeof hash; i++) {
   1f8aa:	3501      	adds	r5, #1
   1f8ac:	2d1f      	cmp	r5, #31
   1f8ae:	d9ef      	bls.n	1f890 <log_reboot_write+0x84>
    if (info->file != NULL) {
   1f8b0:	6873      	ldr	r3, [r6, #4]
   1f8b2:	b14b      	cbz	r3, 1f8c8 <log_reboot_write+0xbc>
        off += snprintf(buf + off, sizeof buf - off, ", die:%s:%d",
   1f8b4:	68b2      	ldr	r2, [r6, #8]
   1f8b6:	9200      	str	r2, [sp, #0]
   1f8b8:	4a1d      	ldr	r2, [pc, #116]	; (1f930 <log_reboot_write+0x124>)
   1f8ba:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   1f8be:	a806      	add	r0, sp, #24
   1f8c0:	4420      	add	r0, r4
   1f8c2:	f7ee fd4c 	bl	e35e <snprintf>
   1f8c6:	4404      	add	r4, r0
    if (info->pc != 0) {
   1f8c8:	68f3      	ldr	r3, [r6, #12]
   1f8ca:	b97b      	cbnz	r3, 1f8ec <log_reboot_write+0xe0>
    if (off > sizeof buf) {
   1f8cc:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   1f8d0:	d901      	bls.n	1f8d6 <log_reboot_write+0xca>
        off = sizeof buf;
   1f8d2:	f44f 7480 	mov.w	r4, #256	; 0x100
    modlog_append(LOG_MODULE_REBOOT, LOG_LEVEL_CRITICAL, LOG_ETYPE_STRING,
   1f8d6:	b2a4      	uxth	r4, r4
   1f8d8:	9400      	str	r4, [sp, #0]
   1f8da:	ab06      	add	r3, sp, #24
   1f8dc:	2200      	movs	r2, #0
   1f8de:	2104      	movs	r1, #4
   1f8e0:	2006      	movs	r0, #6
   1f8e2:	f7ff fd45 	bl	1f370 <modlog_append>
}
   1f8e6:	4638      	mov	r0, r7
   1f8e8:	b051      	add	sp, #324	; 0x144
   1f8ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        off += snprintf(buf + off, sizeof buf - off, ", pc:0x%lx",
   1f8ec:	4a11      	ldr	r2, [pc, #68]	; (1f934 <log_reboot_write+0x128>)
   1f8ee:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   1f8f2:	a806      	add	r0, sp, #24
   1f8f4:	4420      	add	r0, r4
   1f8f6:	f7ee fd32 	bl	e35e <snprintf>
   1f8fa:	4404      	add	r4, r0
   1f8fc:	e7e6      	b.n	1f8cc <log_reboot_write+0xc0>
   1f8fe:	bf00      	nop
   1f900:	20004a24 	.word	0x20004a24
   1f904:	00024cb8 	.word	0x00024cb8
   1f908:	00024df4 	.word	0x00024df4
   1f90c:	00024db8 	.word	0x00024db8
   1f910:	20004a14 	.word	0x20004a14
   1f914:	00024e04 	.word	0x00024e04
   1f918:	00024dcc 	.word	0x00024dcc
   1f91c:	00024dd8 	.word	0x00024dd8
   1f920:	00024de0 	.word	0x00024de0
   1f924:	00024de8 	.word	0x00024de8
   1f928:	00024dc0 	.word	0x00024dc0
   1f92c:	00024e2c 	.word	0x00024e2c
   1f930:	00024e34 	.word	0x00024e34
   1f934:	00024e40 	.word	0x00024e40

0001f938 <log_reboot_init_console>:
{
   1f938:	b508      	push	{r3, lr}
    rc = modlog_register(LOG_MODULE_REBOOT, log_console_get(), LOG_SYSLEVEL,
   1f93a:	f7fe ffd9 	bl	1e8f0 <log_console_get>
   1f93e:	4601      	mov	r1, r0
   1f940:	2300      	movs	r3, #0
   1f942:	461a      	mov	r2, r3
   1f944:	2006      	movs	r0, #6
   1f946:	f7ff fcf9 	bl	1f33c <modlog_register>
}
   1f94a:	bd08      	pop	{r3, pc}

0001f94c <log_reboot>:
{
   1f94c:	b510      	push	{r4, lr}
    if (log_reboot_written) {
   1f94e:	4b0a      	ldr	r3, [pc, #40]	; (1f978 <log_reboot+0x2c>)
   1f950:	f993 3000 	ldrsb.w	r3, [r3]
   1f954:	b113      	cbz	r3, 1f95c <log_reboot+0x10>
        return 0;
   1f956:	2400      	movs	r4, #0
}
   1f958:	4620      	mov	r0, r4
   1f95a:	bd10      	pop	{r4, pc}
    rc = log_reboot_write(info);
   1f95c:	f7ff ff56 	bl	1f80c <log_reboot_write>
    if (rc != 0) {
   1f960:	4604      	mov	r4, r0
   1f962:	2800      	cmp	r0, #0
   1f964:	d1f8      	bne.n	1f958 <log_reboot+0xc>
    log_reboot_written = 1;
   1f966:	4b04      	ldr	r3, [pc, #16]	; (1f978 <log_reboot+0x2c>)
   1f968:	2201      	movs	r2, #1
   1f96a:	701a      	strb	r2, [r3, #0]
    conf_save_one("reboot/written", "1");
   1f96c:	4903      	ldr	r1, [pc, #12]	; (1f97c <log_reboot+0x30>)
   1f96e:	4804      	ldr	r0, [pc, #16]	; (1f980 <log_reboot+0x34>)
   1f970:	f7ef f806 	bl	e980 <conf_save_one>
    return 0;
   1f974:	e7f0      	b.n	1f958 <log_reboot+0xc>
   1f976:	bf00      	nop
   1f978:	20004a04 	.word	0x20004a04
   1f97c:	00024e4c 	.word	0x00024e4c
   1f980:	00024d94 	.word	0x00024d94

0001f984 <log_reboot_pkg_init>:

void
log_reboot_pkg_init(void)
{
   1f984:	b510      	push	{r4, lr}
   1f986:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1f988:	4b10      	ldr	r3, [pc, #64]	; (1f9cc <log_reboot_pkg_init+0x48>)
   1f98a:	781b      	ldrb	r3, [r3, #0]
   1f98c:	b1c3      	cbz	r3, 1f9c0 <log_reboot_pkg_init+0x3c>

    rc = conf_register(&reboot_conf_handler);
   1f98e:	4810      	ldr	r0, [pc, #64]	; (1f9d0 <log_reboot_pkg_init+0x4c>)
   1f990:	f7ef f8aa 	bl	eae8 <conf_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1f994:	b138      	cbz	r0, 1f9a6 <log_reboot_pkg_init+0x22>
   1f996:	2000      	movs	r0, #0
   1f998:	9000      	str	r0, [sp, #0]
   1f99a:	4b0e      	ldr	r3, [pc, #56]	; (1f9d4 <log_reboot_pkg_init+0x50>)
   1f99c:	681c      	ldr	r4, [r3, #0]
   1f99e:	4603      	mov	r3, r0
   1f9a0:	4602      	mov	r2, r0
   1f9a2:	4601      	mov	r1, r0
   1f9a4:	47a0      	blx	r4
#if MYNEWT_VAL(REBOOT_LOG_FCB)
    rc = log_reboot_init_fcb();
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
#if MYNEWT_VAL(REBOOT_LOG_CONSOLE)
    rc = log_reboot_init_console();
   1f9a6:	f7ff ffc7 	bl	1f938 <log_reboot_init_console>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1f9aa:	b138      	cbz	r0, 1f9bc <log_reboot_pkg_init+0x38>
   1f9ac:	2000      	movs	r0, #0
   1f9ae:	9000      	str	r0, [sp, #0]
   1f9b0:	4b08      	ldr	r3, [pc, #32]	; (1f9d4 <log_reboot_pkg_init+0x50>)
   1f9b2:	681c      	ldr	r4, [r3, #0]
   1f9b4:	4603      	mov	r3, r0
   1f9b6:	4602      	mov	r2, r0
   1f9b8:	4601      	mov	r1, r0
   1f9ba:	47a0      	blx	r4
#endif
}
   1f9bc:	b002      	add	sp, #8
   1f9be:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1f9c0:	461a      	mov	r2, r3
   1f9c2:	4619      	mov	r1, r3
   1f9c4:	4618      	mov	r0, r3
   1f9c6:	f7e9 facd 	bl	8f64 <__assert_func>
   1f9ca:	bf00      	nop
   1f9cc:	20004538 	.word	0x20004538
   1f9d0:	20000ffc 	.word	0x20000ffc
   1f9d4:	2000064c 	.word	0x2000064c

0001f9d8 <rwlock_complete_handoff>:
static void
rwlock_complete_handoff(struct rwlock *lock)
{
    RWLOCK_DBG_ASSERT(lock->mtx.mu_owner == g_current_task);
    RWLOCK_DBG_ASSERT(lock->handoffs > 0);
    lock->handoffs--;
   1f9d8:	f890 3020 	ldrb.w	r3, [r0, #32]
   1f9dc:	3b01      	subs	r3, #1
   1f9de:	f880 3020 	strb.w	r3, [r0, #32]
}
   1f9e2:	4770      	bx	lr

0001f9e4 <rwlock_read_must_block>:
static bool
rwlock_read_must_block(const struct rwlock *lock)
{
    RWLOCK_DBG_ASSERT(lock->mtx.mu_owner == g_current_task);

    return lock->active_writer ||
   1f9e4:	69c3      	ldr	r3, [r0, #28]
           lock->pending_writers > 0 ||
   1f9e6:	f013 2fff 	tst.w	r3, #4278255360	; 0xff00ff00
   1f9ea:	d104      	bne.n	1f9f6 <rwlock_read_must_block+0x12>
           lock->handoffs > 0;
   1f9ec:	f890 3020 	ldrb.w	r3, [r0, #32]
           lock->pending_writers > 0 ||
   1f9f0:	b11b      	cbz	r3, 1f9fa <rwlock_read_must_block+0x16>
   1f9f2:	2001      	movs	r0, #1
   1f9f4:	4770      	bx	lr
   1f9f6:	2001      	movs	r0, #1
   1f9f8:	4770      	bx	lr
   1f9fa:	2000      	movs	r0, #0
}
   1f9fc:	4770      	bx	lr

0001f9fe <rwlock_write_must_block>:
static bool
rwlock_write_must_block(const struct rwlock *lock)
{
    RWLOCK_DBG_ASSERT(lock->mtx.mu_owner == g_current_task);

    return lock->active_writer ||
   1f9fe:	8b83      	ldrh	r3, [r0, #28]
           lock->num_readers > 0 ||
   1fa00:	b923      	cbnz	r3, 1fa0c <rwlock_write_must_block+0xe>
           lock->handoffs > 0;
   1fa02:	f890 3020 	ldrb.w	r3, [r0, #32]
           lock->num_readers > 0 ||
   1fa06:	b11b      	cbz	r3, 1fa10 <rwlock_write_must_block+0x12>
   1fa08:	2001      	movs	r0, #1
   1fa0a:	4770      	bx	lr
   1fa0c:	2001      	movs	r0, #1
   1fa0e:	4770      	bx	lr
   1fa10:	2000      	movs	r0, #0
}
   1fa12:	4770      	bx	lr

0001fa14 <rwlock_unblock>:
{
   1fa14:	b510      	push	{r4, lr}
   1fa16:	4604      	mov	r4, r0
    if (lock->pending_writers > 0) {
   1fa18:	7fc3      	ldrb	r3, [r0, #31]
   1fa1a:	b91b      	cbnz	r3, 1fa24 <rwlock_unblock+0x10>
        lock->handoffs = lock->pending_readers;
   1fa1c:	7f83      	ldrb	r3, [r0, #30]
   1fa1e:	f880 3020 	strb.w	r3, [r0, #32]
        while (lock->pending_readers > 0) {
   1fa22:	e010      	b.n	1fa46 <rwlock_unblock+0x32>
        lock->handoffs = 1;
   1fa24:	2301      	movs	r3, #1
   1fa26:	f880 3020 	strb.w	r3, [r0, #32]
        os_sem_release(&lock->wsem);
   1fa2a:	3014      	adds	r0, #20
   1fa2c:	f7ea f9ba 	bl	9da4 <os_sem_release>
        lock->pending_writers--;
   1fa30:	7fe3      	ldrb	r3, [r4, #31]
   1fa32:	3b01      	subs	r3, #1
   1fa34:	77e3      	strb	r3, [r4, #31]
   1fa36:	e009      	b.n	1fa4c <rwlock_unblock+0x38>
            os_sem_release(&lock->rsem);
   1fa38:	f104 000c 	add.w	r0, r4, #12
   1fa3c:	f7ea f9b2 	bl	9da4 <os_sem_release>
            lock->pending_readers--;
   1fa40:	7fa3      	ldrb	r3, [r4, #30]
   1fa42:	3b01      	subs	r3, #1
   1fa44:	77a3      	strb	r3, [r4, #30]
        while (lock->pending_readers > 0) {
   1fa46:	7fa3      	ldrb	r3, [r4, #30]
   1fa48:	2b00      	cmp	r3, #0
   1fa4a:	d1f5      	bne.n	1fa38 <rwlock_unblock+0x24>
}
   1fa4c:	bd10      	pop	{r4, pc}

0001fa4e <rwlock_acquire_read>:

void
rwlock_acquire_read(struct rwlock *lock)
{
   1fa4e:	b538      	push	{r3, r4, r5, lr}
   1fa50:	4604      	mov	r4, r0
    bool acquired;

    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1fa52:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1fa56:	f7ea fff7 	bl	aa48 <os_mutex_pend>

    if (rwlock_read_must_block(lock)) {
   1fa5a:	4620      	mov	r0, r4
   1fa5c:	f7ff ffc2 	bl	1f9e4 <rwlock_read_must_block>
   1fa60:	b140      	cbz	r0, 1fa74 <rwlock_acquire_read+0x26>
        lock->pending_readers++;
   1fa62:	7fa3      	ldrb	r3, [r4, #30]
   1fa64:	3301      	adds	r3, #1
   1fa66:	77a3      	strb	r3, [r4, #30]
        acquired = false;
   1fa68:	2500      	movs	r5, #0
    } else {
        lock->num_readers++;
        acquired = true;
    }

    os_mutex_release(&lock->mtx);
   1fa6a:	4620      	mov	r0, r4
   1fa6c:	f7ea ff90 	bl	a990 <os_mutex_release>

    if (acquired) {
   1fa70:	b12d      	cbz	r5, 1fa7e <rwlock_acquire_read+0x30>
    /* Record reader ownership. */
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
    lock->num_readers++;
    rwlock_complete_handoff(lock);
    os_mutex_release(&lock->mtx);
}
   1fa72:	bd38      	pop	{r3, r4, r5, pc}
        lock->num_readers++;
   1fa74:	7f23      	ldrb	r3, [r4, #28]
   1fa76:	3301      	adds	r3, #1
   1fa78:	7723      	strb	r3, [r4, #28]
        acquired = true;
   1fa7a:	2501      	movs	r5, #1
   1fa7c:	e7f5      	b.n	1fa6a <rwlock_acquire_read+0x1c>
    os_sem_pend(&lock->rsem, OS_TIMEOUT_NEVER);
   1fa7e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1fa82:	f104 000c 	add.w	r0, r4, #12
   1fa86:	f7ea f9bf 	bl	9e08 <os_sem_pend>
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1fa8a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1fa8e:	4620      	mov	r0, r4
   1fa90:	f7ea ffda 	bl	aa48 <os_mutex_pend>
    lock->num_readers++;
   1fa94:	7f23      	ldrb	r3, [r4, #28]
   1fa96:	3301      	adds	r3, #1
   1fa98:	7723      	strb	r3, [r4, #28]
    rwlock_complete_handoff(lock);
   1fa9a:	4620      	mov	r0, r4
   1fa9c:	f7ff ff9c 	bl	1f9d8 <rwlock_complete_handoff>
    os_mutex_release(&lock->mtx);
   1faa0:	4620      	mov	r0, r4
   1faa2:	f7ea ff75 	bl	a990 <os_mutex_release>
   1faa6:	e7e4      	b.n	1fa72 <rwlock_acquire_read+0x24>

0001faa8 <rwlock_release_read>:

void
rwlock_release_read(struct rwlock *lock)
{
   1faa8:	b510      	push	{r4, lr}
   1faaa:	4604      	mov	r4, r0
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1faac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1fab0:	f7ea ffca 	bl	aa48 <os_mutex_pend>

    RWLOCK_DBG_ASSERT(lock->num_readers > 0);
    lock->num_readers--;
   1fab4:	7f23      	ldrb	r3, [r4, #28]
   1fab6:	3b01      	subs	r3, #1
   1fab8:	b2db      	uxtb	r3, r3
   1faba:	7723      	strb	r3, [r4, #28]

    /* If this is the last active reader, unblock a pending writer if there is
     * one.
     */
    if (lock->num_readers == 0) {
   1fabc:	b11b      	cbz	r3, 1fac6 <rwlock_release_read+0x1e>
        rwlock_unblock(lock);
    }

    os_mutex_release(&lock->mtx);
   1fabe:	4620      	mov	r0, r4
   1fac0:	f7ea ff66 	bl	a990 <os_mutex_release>
}
   1fac4:	bd10      	pop	{r4, pc}
        rwlock_unblock(lock);
   1fac6:	4620      	mov	r0, r4
   1fac8:	f7ff ffa4 	bl	1fa14 <rwlock_unblock>
   1facc:	e7f7      	b.n	1fabe <rwlock_release_read+0x16>

0001face <rwlock_acquire_write>:

void
rwlock_acquire_write(struct rwlock *lock)
{
   1face:	b538      	push	{r3, r4, r5, lr}
   1fad0:	4604      	mov	r4, r0
    bool acquired;

    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1fad2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1fad6:	f7ea ffb7 	bl	aa48 <os_mutex_pend>

    if (rwlock_write_must_block(lock)) {
   1fada:	4620      	mov	r0, r4
   1fadc:	f7ff ff8f 	bl	1f9fe <rwlock_write_must_block>
   1fae0:	b140      	cbz	r0, 1faf4 <rwlock_acquire_write+0x26>
        lock->pending_writers++;
   1fae2:	7fe3      	ldrb	r3, [r4, #31]
   1fae4:	3301      	adds	r3, #1
   1fae6:	77e3      	strb	r3, [r4, #31]
        acquired = false;
   1fae8:	2500      	movs	r5, #0
    } else {
        lock->active_writer = true;
        acquired = true;
    }

    os_mutex_release(&lock->mtx);
   1faea:	4620      	mov	r0, r4
   1faec:	f7ea ff50 	bl	a990 <os_mutex_release>

    if (acquired) {
   1faf0:	b11d      	cbz	r5, 1fafa <rwlock_acquire_write+0x2c>
    /* Record writer ownership. */
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
    lock->active_writer = true;
    rwlock_complete_handoff(lock);
    os_mutex_release(&lock->mtx);
}
   1faf2:	bd38      	pop	{r3, r4, r5, pc}
        lock->active_writer = true;
   1faf4:	2501      	movs	r5, #1
   1faf6:	7765      	strb	r5, [r4, #29]
        acquired = true;
   1faf8:	e7f7      	b.n	1faea <rwlock_acquire_write+0x1c>
    os_sem_pend(&lock->wsem, OS_TIMEOUT_NEVER);
   1fafa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1fafe:	f104 0014 	add.w	r0, r4, #20
   1fb02:	f7ea f981 	bl	9e08 <os_sem_pend>
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1fb06:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1fb0a:	4620      	mov	r0, r4
   1fb0c:	f7ea ff9c 	bl	aa48 <os_mutex_pend>
    lock->active_writer = true;
   1fb10:	2301      	movs	r3, #1
   1fb12:	7763      	strb	r3, [r4, #29]
    rwlock_complete_handoff(lock);
   1fb14:	4620      	mov	r0, r4
   1fb16:	f7ff ff5f 	bl	1f9d8 <rwlock_complete_handoff>
    os_mutex_release(&lock->mtx);
   1fb1a:	4620      	mov	r0, r4
   1fb1c:	f7ea ff38 	bl	a990 <os_mutex_release>
   1fb20:	e7e7      	b.n	1faf2 <rwlock_acquire_write+0x24>

0001fb22 <rwlock_release_write>:

void
rwlock_release_write(struct rwlock *lock)
{
   1fb22:	b510      	push	{r4, lr}
   1fb24:	4604      	mov	r4, r0
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1fb26:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1fb2a:	f7ea ff8d 	bl	aa48 <os_mutex_pend>

    RWLOCK_DBG_ASSERT(lock->active_writer);
    lock->active_writer = false;
   1fb2e:	2300      	movs	r3, #0
   1fb30:	7763      	strb	r3, [r4, #29]

    rwlock_unblock(lock);
   1fb32:	4620      	mov	r0, r4
   1fb34:	f7ff ff6e 	bl	1fa14 <rwlock_unblock>

    os_mutex_release(&lock->mtx);
   1fb38:	4620      	mov	r0, r4
   1fb3a:	f7ea ff29 	bl	a990 <os_mutex_release>
}
   1fb3e:	bd10      	pop	{r4, pc}

0001fb40 <rwlock_init>:

int
rwlock_init(struct rwlock *lock)
{
   1fb40:	b510      	push	{r4, lr}
   1fb42:	4604      	mov	r4, r0
    int rc;

    *lock = (struct rwlock) { 0 };
   1fb44:	2224      	movs	r2, #36	; 0x24
   1fb46:	2100      	movs	r1, #0
   1fb48:	f7ed ffc7 	bl	dada <memset>

    rc = os_mutex_init(&lock->mtx);
   1fb4c:	4620      	mov	r0, r4
   1fb4e:	f7ea ff15 	bl	a97c <os_mutex_init>
    if (rc != 0) {
   1fb52:	b100      	cbz	r0, 1fb56 <rwlock_init+0x16>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1fb54:	bd10      	pop	{r4, pc}
    rc = os_sem_init(&lock->rsem, 0);
   1fb56:	2100      	movs	r1, #0
   1fb58:	f104 000c 	add.w	r0, r4, #12
   1fb5c:	f7ea f91a 	bl	9d94 <os_sem_init>
    if (rc != 0) {
   1fb60:	2800      	cmp	r0, #0
   1fb62:	d1f7      	bne.n	1fb54 <rwlock_init+0x14>
    rc = os_sem_init(&lock->wsem, 0);
   1fb64:	2100      	movs	r1, #0
   1fb66:	f104 0014 	add.w	r0, r4, #20
   1fb6a:	f7ea f913 	bl	9d94 <os_sem_init>
    if (rc != 0) {
   1fb6e:	e7f1      	b.n	1fb54 <rwlock_init+0x14>

0001fb70 <boot_flag_decode>:
}

static int
boot_flag_decode(uint8_t flag)
{
    if (flag != BOOT_FLAG_SET) {
   1fb70:	2801      	cmp	r0, #1
   1fb72:	d100      	bne.n	1fb76 <boot_flag_decode+0x6>
        return BOOT_FLAG_BAD;
    }
    return BOOT_FLAG_SET;
}
   1fb74:	4770      	bx	lr
        return BOOT_FLAG_BAD;
   1fb76:	2002      	movs	r0, #2
   1fb78:	e7fc      	b.n	1fb74 <boot_flag_decode+0x4>

0001fb7a <boot_magic_off>:
}

static uint32_t
boot_magic_off(const struct flash_area *fap)
{
    return fap->fa_size - BOOT_MAGIC_SZ;
   1fb7a:	6880      	ldr	r0, [r0, #8]
}
   1fb7c:	3810      	subs	r0, #16
   1fb7e:	4770      	bx	lr

0001fb80 <boot_copy_done_off>:
}

static uint32_t
boot_copy_done_off(const struct flash_area *fap)
{
    return fap->fa_size - BOOT_MAGIC_SZ - BOOT_MAX_ALIGN * 2;
   1fb80:	6880      	ldr	r0, [r0, #8]
}
   1fb82:	3820      	subs	r0, #32
   1fb84:	4770      	bx	lr

0001fb86 <boot_image_ok_off>:

static uint32_t
boot_image_ok_off(const struct flash_area *fap)
{
    return fap->fa_size - BOOT_MAGIC_SZ - BOOT_MAX_ALIGN;
   1fb86:	6880      	ldr	r0, [r0, #8]
}
   1fb88:	3818      	subs	r0, #24
   1fb8a:	4770      	bx	lr

0001fb8c <boot_magic_decode>:
{
   1fb8c:	b508      	push	{r3, lr}
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
   1fb8e:	2210      	movs	r2, #16
   1fb90:	4903      	ldr	r1, [pc, #12]	; (1fba0 <boot_magic_decode+0x14>)
   1fb92:	f7ed ff71 	bl	da78 <memcmp>
   1fb96:	b108      	cbz	r0, 1fb9c <boot_magic_decode+0x10>
    return BOOT_MAGIC_BAD;
   1fb98:	2002      	movs	r0, #2
}
   1fb9a:	bd08      	pop	{r3, pc}
        return BOOT_MAGIC_GOOD;
   1fb9c:	2001      	movs	r0, #1
   1fb9e:	e7fc      	b.n	1fb9a <boot_magic_decode+0xe>
   1fba0:	00024ea0 	.word	0x00024ea0

0001fba4 <boot_write_trailer_byte>:
}

static int
boot_write_trailer_byte(const struct flash_area *fap, uint32_t off,
                        uint8_t val)
{
   1fba4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fba6:	b083      	sub	sp, #12
   1fba8:	4605      	mov	r5, r0
   1fbaa:	460e      	mov	r6, r1
   1fbac:	4617      	mov	r7, r2
    uint8_t buf[BOOT_MAX_ALIGN];
    uint8_t align;
    uint8_t erased_val;
    int rc;

    align = flash_area_align(fap);
   1fbae:	f7fe fba1 	bl	1e2f4 <flash_area_align>
    assert(align <= BOOT_MAX_ALIGN);
   1fbb2:	2808      	cmp	r0, #8
   1fbb4:	d813      	bhi.n	1fbde <boot_write_trailer_byte+0x3a>
   1fbb6:	4604      	mov	r4, r0
    erased_val = flash_area_erased_val(fap);
   1fbb8:	4628      	mov	r0, r5
   1fbba:	f7fe fba0 	bl	1e2fe <flash_area_erased_val>
    memset(buf, erased_val, BOOT_MAX_ALIGN);
   1fbbe:	2208      	movs	r2, #8
   1fbc0:	b2c1      	uxtb	r1, r0
   1fbc2:	4668      	mov	r0, sp
   1fbc4:	f7ed ff89 	bl	dada <memset>
    buf[0] = val;
   1fbc8:	f88d 7000 	strb.w	r7, [sp]

    rc = flash_area_write(fap, off, buf, align);
   1fbcc:	4623      	mov	r3, r4
   1fbce:	466a      	mov	r2, sp
   1fbd0:	4631      	mov	r1, r6
   1fbd2:	4628      	mov	r0, r5
   1fbd4:	f7fe fb66 	bl	1e2a4 <flash_area_write>
    if (rc != 0) {
   1fbd8:	b938      	cbnz	r0, 1fbea <boot_write_trailer_byte+0x46>
        return BOOT_EFLASH;
    }

    return 0;
}
   1fbda:	b003      	add	sp, #12
   1fbdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert(align <= BOOT_MAX_ALIGN);
   1fbde:	2300      	movs	r3, #0
   1fbe0:	461a      	mov	r2, r3
   1fbe2:	4619      	mov	r1, r3
   1fbe4:	4618      	mov	r0, r3
   1fbe6:	f7e9 f9bd 	bl	8f64 <__assert_func>
        return BOOT_EFLASH;
   1fbea:	2001      	movs	r0, #1
   1fbec:	e7f5      	b.n	1fbda <boot_write_trailer_byte+0x36>

0001fbee <boot_magic_compatible_check>:
    switch (tbl_val) {
   1fbee:	2804      	cmp	r0, #4
   1fbf0:	d00a      	beq.n	1fc08 <boot_magic_compatible_check+0x1a>
   1fbf2:	2805      	cmp	r0, #5
   1fbf4:	d103      	bne.n	1fbfe <boot_magic_compatible_check+0x10>
        return val != BOOT_MAGIC_GOOD;
   1fbf6:	1e48      	subs	r0, r1, #1
   1fbf8:	bf18      	it	ne
   1fbfa:	2001      	movne	r0, #1
   1fbfc:	4770      	bx	lr
        return tbl_val == val;
   1fbfe:	4288      	cmp	r0, r1
   1fc00:	bf14      	ite	ne
   1fc02:	2000      	movne	r0, #0
   1fc04:	2001      	moveq	r0, #1
   1fc06:	4770      	bx	lr
    switch (tbl_val) {
   1fc08:	2001      	movs	r0, #1
}
   1fc0a:	4770      	bx	lr

0001fc0c <boot_swap_type_off>:
    return fap->fa_size - BOOT_MAGIC_SZ - BOOT_MAX_ALIGN * 3;
   1fc0c:	6880      	ldr	r0, [r0, #8]
}
   1fc0e:	3828      	subs	r0, #40	; 0x28
   1fc10:	4770      	bx	lr

0001fc12 <boot_read_swap_state>:
{
   1fc12:	b530      	push	{r4, r5, lr}
   1fc14:	b085      	sub	sp, #20
   1fc16:	4604      	mov	r4, r0
   1fc18:	460d      	mov	r5, r1
    off = boot_magic_off(fap);
   1fc1a:	f7ff ffae 	bl	1fb7a <boot_magic_off>
   1fc1e:	4601      	mov	r1, r0
    rc = flash_area_read_is_empty(fap, off, magic, BOOT_MAGIC_SZ);
   1fc20:	2310      	movs	r3, #16
   1fc22:	466a      	mov	r2, sp
   1fc24:	4620      	mov	r0, r4
   1fc26:	f7fe fb82 	bl	1e32e <flash_area_read_is_empty>
    if (rc < 0) {
   1fc2a:	2800      	cmp	r0, #0
   1fc2c:	db45      	blt.n	1fcba <boot_read_swap_state+0xa8>
    if (rc == 1) {
   1fc2e:	2801      	cmp	r0, #1
   1fc30:	d039      	beq.n	1fca6 <boot_read_swap_state+0x94>
        state->magic = boot_magic_decode(magic);
   1fc32:	4668      	mov	r0, sp
   1fc34:	f7ff ffaa 	bl	1fb8c <boot_magic_decode>
   1fc38:	7028      	strb	r0, [r5, #0]
    off = boot_swap_type_off(fap);
   1fc3a:	4620      	mov	r0, r4
   1fc3c:	f7ff ffe6 	bl	1fc0c <boot_swap_type_off>
   1fc40:	4601      	mov	r1, r0
    rc = flash_area_read_is_empty(fap, off, &state->swap_type,
   1fc42:	2301      	movs	r3, #1
   1fc44:	18ea      	adds	r2, r5, r3
   1fc46:	4620      	mov	r0, r4
   1fc48:	f7fe fb71 	bl	1e32e <flash_area_read_is_empty>
    if (rc < 0) {
   1fc4c:	2800      	cmp	r0, #0
   1fc4e:	db37      	blt.n	1fcc0 <boot_read_swap_state+0xae>
    if (rc == 1 || state->swap_type > BOOT_SWAP_TYPE_REVERT) {
   1fc50:	2801      	cmp	r0, #1
   1fc52:	d002      	beq.n	1fc5a <boot_read_swap_state+0x48>
   1fc54:	786b      	ldrb	r3, [r5, #1]
   1fc56:	2b04      	cmp	r3, #4
   1fc58:	d901      	bls.n	1fc5e <boot_read_swap_state+0x4c>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
   1fc5a:	2301      	movs	r3, #1
   1fc5c:	706b      	strb	r3, [r5, #1]
    off = boot_copy_done_off(fap);
   1fc5e:	4620      	mov	r0, r4
   1fc60:	f7ff ff8e 	bl	1fb80 <boot_copy_done_off>
   1fc64:	4601      	mov	r1, r0
    rc = flash_area_read_is_empty(fap, off, &state->copy_done,
   1fc66:	2301      	movs	r3, #1
   1fc68:	1caa      	adds	r2, r5, #2
   1fc6a:	4620      	mov	r0, r4
   1fc6c:	f7fe fb5f 	bl	1e32e <flash_area_read_is_empty>
    if (rc < 0) {
   1fc70:	2800      	cmp	r0, #0
   1fc72:	db27      	blt.n	1fcc4 <boot_read_swap_state+0xb2>
    if (rc == 1) {
   1fc74:	2801      	cmp	r0, #1
   1fc76:	d019      	beq.n	1fcac <boot_read_swap_state+0x9a>
        state->copy_done = boot_flag_decode(state->copy_done);
   1fc78:	78a8      	ldrb	r0, [r5, #2]
   1fc7a:	f7ff ff79 	bl	1fb70 <boot_flag_decode>
   1fc7e:	70a8      	strb	r0, [r5, #2]
    off = boot_image_ok_off(fap);
   1fc80:	4620      	mov	r0, r4
   1fc82:	f7ff ff80 	bl	1fb86 <boot_image_ok_off>
   1fc86:	4601      	mov	r1, r0
    rc = flash_area_read_is_empty(fap, off, &state->image_ok,
   1fc88:	2301      	movs	r3, #1
   1fc8a:	1cea      	adds	r2, r5, #3
   1fc8c:	4620      	mov	r0, r4
   1fc8e:	f7fe fb4e 	bl	1e32e <flash_area_read_is_empty>
    if (rc < 0) {
   1fc92:	2800      	cmp	r0, #0
   1fc94:	db18      	blt.n	1fcc8 <boot_read_swap_state+0xb6>
    if (rc == 1) {
   1fc96:	2801      	cmp	r0, #1
   1fc98:	d00b      	beq.n	1fcb2 <boot_read_swap_state+0xa0>
        state->image_ok = boot_flag_decode(state->image_ok);
   1fc9a:	78e8      	ldrb	r0, [r5, #3]
   1fc9c:	f7ff ff68 	bl	1fb70 <boot_flag_decode>
   1fca0:	70e8      	strb	r0, [r5, #3]
    return 0;
   1fca2:	2000      	movs	r0, #0
   1fca4:	e00a      	b.n	1fcbc <boot_read_swap_state+0xaa>
        state->magic = BOOT_MAGIC_UNSET;
   1fca6:	2303      	movs	r3, #3
   1fca8:	702b      	strb	r3, [r5, #0]
   1fcaa:	e7c6      	b.n	1fc3a <boot_read_swap_state+0x28>
        state->copy_done = BOOT_FLAG_UNSET;
   1fcac:	2303      	movs	r3, #3
   1fcae:	70ab      	strb	r3, [r5, #2]
   1fcb0:	e7e6      	b.n	1fc80 <boot_read_swap_state+0x6e>
        state->image_ok = BOOT_FLAG_UNSET;
   1fcb2:	2303      	movs	r3, #3
   1fcb4:	70eb      	strb	r3, [r5, #3]
    return 0;
   1fcb6:	2000      	movs	r0, #0
   1fcb8:	e000      	b.n	1fcbc <boot_read_swap_state+0xaa>
        return BOOT_EFLASH;
   1fcba:	2001      	movs	r0, #1
}
   1fcbc:	b005      	add	sp, #20
   1fcbe:	bd30      	pop	{r4, r5, pc}
        return BOOT_EFLASH;
   1fcc0:	2001      	movs	r0, #1
   1fcc2:	e7fb      	b.n	1fcbc <boot_read_swap_state+0xaa>
        return BOOT_EFLASH;
   1fcc4:	2001      	movs	r0, #1
   1fcc6:	e7f9      	b.n	1fcbc <boot_read_swap_state+0xaa>
        return BOOT_EFLASH;
   1fcc8:	2001      	movs	r0, #1
   1fcca:	e7f7      	b.n	1fcbc <boot_read_swap_state+0xaa>

0001fccc <boot_read_swap_state_by_id>:
    switch (flash_area_id) {
   1fccc:	1e43      	subs	r3, r0, #1
   1fcce:	2b02      	cmp	r3, #2
   1fcd0:	d901      	bls.n	1fcd6 <boot_read_swap_state_by_id+0xa>
        return BOOT_EBADARGS;
   1fcd2:	2007      	movs	r0, #7
}
   1fcd4:	4770      	bx	lr
{
   1fcd6:	b510      	push	{r4, lr}
   1fcd8:	b082      	sub	sp, #8
   1fcda:	460c      	mov	r4, r1
        rc = flash_area_open(flash_area_id, &fap);
   1fcdc:	a901      	add	r1, sp, #4
   1fcde:	b2c0      	uxtb	r0, r0
   1fce0:	f7fe fa6c 	bl	1e1bc <flash_area_open>
        if (rc != 0) {
   1fce4:	b110      	cbz	r0, 1fcec <boot_read_swap_state_by_id+0x20>
            return BOOT_EFLASH;
   1fce6:	2001      	movs	r0, #1
}
   1fce8:	b002      	add	sp, #8
   1fcea:	bd10      	pop	{r4, pc}
    rc = boot_read_swap_state(fap, state);
   1fcec:	4621      	mov	r1, r4
   1fcee:	9801      	ldr	r0, [sp, #4]
   1fcf0:	f7ff ff8f 	bl	1fc12 <boot_read_swap_state>
    return rc;
   1fcf4:	e7f8      	b.n	1fce8 <boot_read_swap_state_by_id+0x1c>
	...

0001fcf8 <boot_write_magic>:
{
   1fcf8:	b510      	push	{r4, lr}
   1fcfa:	4604      	mov	r4, r0
    off = boot_magic_off(fap);
   1fcfc:	f7ff ff3d 	bl	1fb7a <boot_magic_off>
   1fd00:	4601      	mov	r1, r0
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
   1fd02:	2310      	movs	r3, #16
   1fd04:	4a03      	ldr	r2, [pc, #12]	; (1fd14 <boot_write_magic+0x1c>)
   1fd06:	4620      	mov	r0, r4
   1fd08:	f7fe facc 	bl	1e2a4 <flash_area_write>
    if (rc != 0) {
   1fd0c:	b900      	cbnz	r0, 1fd10 <boot_write_magic+0x18>
}
   1fd0e:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
   1fd10:	2001      	movs	r0, #1
   1fd12:	e7fc      	b.n	1fd0e <boot_write_magic+0x16>
   1fd14:	00024ea0 	.word	0x00024ea0

0001fd18 <boot_write_image_ok>:
    return boot_write_trailer_byte(fap, off, BOOT_FLAG_SET);
}

int
boot_write_image_ok(const struct flash_area *fap)
{
   1fd18:	b510      	push	{r4, lr}
   1fd1a:	4604      	mov	r4, r0
    uint32_t off;

    off = boot_image_ok_off(fap);
   1fd1c:	f7ff ff33 	bl	1fb86 <boot_image_ok_off>
   1fd20:	4601      	mov	r1, r0
    BOOT_LOG_DBG("writing image_ok; fa_id=%d off=0x%x (0x%x)",
                 fap->fa_id, off, fap->fa_off + off);
    return boot_write_trailer_byte(fap, off, BOOT_FLAG_SET);
   1fd22:	2201      	movs	r2, #1
   1fd24:	4620      	mov	r0, r4
   1fd26:	f7ff ff3d 	bl	1fba4 <boot_write_trailer_byte>
}
   1fd2a:	bd10      	pop	{r4, pc}

0001fd2c <boot_write_swap_type>:
 * This value is persisted so that the boot loader knows what swap operation to
 * resume in case of an unexpected reset.
 */
int
boot_write_swap_type(const struct flash_area *fap, uint8_t swap_type)
{
   1fd2c:	b538      	push	{r3, r4, r5, lr}
   1fd2e:	4604      	mov	r4, r0
   1fd30:	460d      	mov	r5, r1
    uint32_t off;

    off = boot_swap_type_off(fap);
   1fd32:	f7ff ff6b 	bl	1fc0c <boot_swap_type_off>
   1fd36:	4601      	mov	r1, r0
    BOOT_LOG_DBG("writing swap_type; fa_id=%d off=0x%x (0x%x), swap_type=0x%x",
                 fap->fa_id, off, fap->fa_off + off, swap_type);
    return boot_write_trailer_byte(fap, off, swap_type);
   1fd38:	462a      	mov	r2, r5
   1fd3a:	4620      	mov	r0, r4
   1fd3c:	f7ff ff32 	bl	1fba4 <boot_write_trailer_byte>
}
   1fd40:	bd38      	pop	{r3, r4, r5, pc}
	...

0001fd44 <boot_swap_type>:
}
#endif

int
boot_swap_type(void)
{
   1fd44:	b530      	push	{r4, r5, lr}
   1fd46:	b083      	sub	sp, #12
    struct boot_swap_state primary_slot;
    struct boot_swap_state secondary_slot;
    int rc;
    size_t i;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY, &primary_slot);
   1fd48:	a901      	add	r1, sp, #4
   1fd4a:	2001      	movs	r0, #1
   1fd4c:	f7ff ffbe 	bl	1fccc <boot_read_swap_state_by_id>
    if (rc) {
   1fd50:	2800      	cmp	r0, #0
   1fd52:	d142      	bne.n	1fdda <boot_swap_type+0x96>
        return BOOT_SWAP_TYPE_PANIC;
    }

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY,
   1fd54:	4669      	mov	r1, sp
   1fd56:	2002      	movs	r0, #2
   1fd58:	f7ff ffb8 	bl	1fccc <boot_read_swap_state_by_id>
                                    &secondary_slot);
    if (rc) {
   1fd5c:	2800      	cmp	r0, #0
   1fd5e:	d13e      	bne.n	1fdde <boot_swap_type+0x9a>
        return BOOT_SWAP_TYPE_PANIC;
    }

    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
   1fd60:	2400      	movs	r4, #0
   1fd62:	e007      	b.n	1fd74 <boot_swap_type+0x30>
                                        secondary_slot.magic) &&
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
                table->image_ok_primary_slot == primary_slot.image_ok) &&
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
   1fd64:	792b      	ldrb	r3, [r5, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
   1fd66:	2b04      	cmp	r3, #4
   1fd68:	d029      	beq.n	1fdbe <boot_swap_type+0x7a>
                table->copy_done_primary_slot == primary_slot.copy_done)) {
   1fd6a:	f89d 2006 	ldrb.w	r2, [sp, #6]
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
   1fd6e:	4293      	cmp	r3, r2
   1fd70:	d025      	beq.n	1fdbe <boot_swap_type+0x7a>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
   1fd72:	3401      	adds	r4, #1
   1fd74:	2c02      	cmp	r4, #2
   1fd76:	d82d      	bhi.n	1fdd4 <boot_swap_type+0x90>
        table = boot_swap_tables + i;
   1fd78:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1fd7c:	4a19      	ldr	r2, [pc, #100]	; (1fde4 <boot_swap_type+0xa0>)
   1fd7e:	eb02 0543 	add.w	r5, r2, r3, lsl #1
        if (boot_magic_compatible_check(table->magic_primary_slot,
   1fd82:	f89d 1004 	ldrb.w	r1, [sp, #4]
   1fd86:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
   1fd8a:	f7ff ff30 	bl	1fbee <boot_magic_compatible_check>
   1fd8e:	2800      	cmp	r0, #0
   1fd90:	d0ef      	beq.n	1fd72 <boot_swap_type+0x2e>
            boot_magic_compatible_check(table->magic_secondary_slot,
   1fd92:	f89d 1000 	ldrb.w	r1, [sp]
   1fd96:	7868      	ldrb	r0, [r5, #1]
   1fd98:	f7ff ff29 	bl	1fbee <boot_magic_compatible_check>
                                        primary_slot.magic) &&
   1fd9c:	2800      	cmp	r0, #0
   1fd9e:	d0e8      	beq.n	1fd72 <boot_swap_type+0x2e>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
   1fda0:	78ab      	ldrb	r3, [r5, #2]
                                        secondary_slot.magic) &&
   1fda2:	2b04      	cmp	r3, #4
   1fda4:	d003      	beq.n	1fdae <boot_swap_type+0x6a>
                table->image_ok_primary_slot == primary_slot.image_ok) &&
   1fda6:	f89d 2007 	ldrb.w	r2, [sp, #7]
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
   1fdaa:	4293      	cmp	r3, r2
   1fdac:	d1e1      	bne.n	1fd72 <boot_swap_type+0x2e>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
   1fdae:	78eb      	ldrb	r3, [r5, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
   1fdb0:	2b04      	cmp	r3, #4
   1fdb2:	d0d7      	beq.n	1fd64 <boot_swap_type+0x20>
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
   1fdb4:	f89d 2003 	ldrb.w	r2, [sp, #3]
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
   1fdb8:	4293      	cmp	r3, r2
   1fdba:	d1da      	bne.n	1fd72 <boot_swap_type+0x2e>
   1fdbc:	e7d2      	b.n	1fd64 <boot_swap_type+0x20>
            BOOT_LOG_INF("Swap type: %s",
   1fdbe:	7968      	ldrb	r0, [r5, #5]
                         table->swap_type == BOOT_SWAP_TYPE_TEST   ? "test"   :
                         table->swap_type == BOOT_SWAP_TYPE_PERM   ? "perm"   :
                         table->swap_type == BOOT_SWAP_TYPE_REVERT ? "revert" :
                         "BUG; can't happen");
            assert(table->swap_type == BOOT_SWAP_TYPE_TEST ||
   1fdc0:	1e83      	subs	r3, r0, #2
   1fdc2:	b2db      	uxtb	r3, r3
   1fdc4:	2b02      	cmp	r3, #2
   1fdc6:	d906      	bls.n	1fdd6 <boot_swap_type+0x92>
   1fdc8:	2300      	movs	r3, #0
   1fdca:	461a      	mov	r2, r3
   1fdcc:	4619      	mov	r1, r3
   1fdce:	4618      	mov	r0, r3
   1fdd0:	f7e9 f8c8 	bl	8f64 <__assert_func>
            return table->swap_type;
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
   1fdd4:	2001      	movs	r0, #1
}
   1fdd6:	b003      	add	sp, #12
   1fdd8:	bd30      	pop	{r4, r5, pc}
        return BOOT_SWAP_TYPE_PANIC;
   1fdda:	20ff      	movs	r0, #255	; 0xff
   1fddc:	e7fb      	b.n	1fdd6 <boot_swap_type+0x92>
        return BOOT_SWAP_TYPE_PANIC;
   1fdde:	20ff      	movs	r0, #255	; 0xff
   1fde0:	e7f9      	b.n	1fdd6 <boot_swap_type+0x92>
   1fde2:	bf00      	nop
   1fde4:	00024eb0 	.word	0x00024eb0

0001fde8 <boot_set_pending>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_pending(int permanent)
{
   1fde8:	b530      	push	{r4, r5, lr}
   1fdea:	b083      	sub	sp, #12
   1fdec:	4604      	mov	r4, r0
    const struct flash_area *fap;
    struct boot_swap_state state_secondary_slot;
    uint8_t swap_type;
    int rc;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY,
   1fdee:	4669      	mov	r1, sp
   1fdf0:	2002      	movs	r0, #2
   1fdf2:	f7ff ff6b 	bl	1fccc <boot_read_swap_state_by_id>
                                    &state_secondary_slot);
    if (rc != 0) {
   1fdf6:	4603      	mov	r3, r0
   1fdf8:	bb78      	cbnz	r0, 1fe5a <boot_set_pending+0x72>
        return rc;
    }

    switch (state_secondary_slot.magic) {
   1fdfa:	f89d 5000 	ldrb.w	r5, [sp]
   1fdfe:	2d02      	cmp	r5, #2
   1fe00:	d025      	beq.n	1fe4e <boot_set_pending+0x66>
   1fe02:	2d03      	cmp	r5, #3
   1fe04:	d007      	beq.n	1fe16 <boot_set_pending+0x2e>
   1fe06:	2d01      	cmp	r5, #1
   1fe08:	d027      	beq.n	1fe5a <boot_set_pending+0x72>
        flash_area_erase(fap, 0, fap->fa_size);
        flash_area_close(fap);
        return BOOT_EBADIMAGE;

    default:
        assert(0);
   1fe0a:	2300      	movs	r3, #0
   1fe0c:	461a      	mov	r2, r3
   1fe0e:	4619      	mov	r1, r3
   1fe10:	4618      	mov	r0, r3
   1fe12:	f7e9 f8a7 	bl	8f64 <__assert_func>
        rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY, &fap);
   1fe16:	a901      	add	r1, sp, #4
   1fe18:	2002      	movs	r0, #2
   1fe1a:	f7fe f9cf 	bl	1e1bc <flash_area_open>
        if (rc != 0) {
   1fe1e:	b148      	cbz	r0, 1fe34 <boot_set_pending+0x4c>
            rc = BOOT_EFLASH;
   1fe20:	2301      	movs	r3, #1
        if (rc == 0) {
   1fe22:	b9d3      	cbnz	r3, 1fe5a <boot_set_pending+0x72>
            if (permanent) {
   1fe24:	b904      	cbnz	r4, 1fe28 <boot_set_pending+0x40>
                swap_type = BOOT_SWAP_TYPE_TEST;
   1fe26:	2502      	movs	r5, #2
            rc = boot_write_swap_type(fap, swap_type);
   1fe28:	4629      	mov	r1, r5
   1fe2a:	9801      	ldr	r0, [sp, #4]
   1fe2c:	f7ff ff7e 	bl	1fd2c <boot_write_swap_type>
   1fe30:	4603      	mov	r3, r0
   1fe32:	e012      	b.n	1fe5a <boot_set_pending+0x72>
            rc = boot_write_magic(fap);
   1fe34:	9801      	ldr	r0, [sp, #4]
   1fe36:	f7ff ff5f 	bl	1fcf8 <boot_write_magic>
        if (rc == 0 && permanent) {
   1fe3a:	4603      	mov	r3, r0
   1fe3c:	2800      	cmp	r0, #0
   1fe3e:	d1f0      	bne.n	1fe22 <boot_set_pending+0x3a>
   1fe40:	2c00      	cmp	r4, #0
   1fe42:	d0ee      	beq.n	1fe22 <boot_set_pending+0x3a>
            rc = boot_write_image_ok(fap);
   1fe44:	9801      	ldr	r0, [sp, #4]
   1fe46:	f7ff ff67 	bl	1fd18 <boot_write_image_ok>
   1fe4a:	4603      	mov	r3, r0
   1fe4c:	e7e9      	b.n	1fe22 <boot_set_pending+0x3a>
        rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY, &fap);
   1fe4e:	a901      	add	r1, sp, #4
   1fe50:	2002      	movs	r0, #2
   1fe52:	f7fe f9b3 	bl	1e1bc <flash_area_open>
        if (rc != 0) {
   1fe56:	b118      	cbz	r0, 1fe60 <boot_set_pending+0x78>
            return BOOT_EFLASH;
   1fe58:	2301      	movs	r3, #1
        return BOOT_EBADIMAGE;
    }
}
   1fe5a:	4618      	mov	r0, r3
   1fe5c:	b003      	add	sp, #12
   1fe5e:	bd30      	pop	{r4, r5, pc}
        flash_area_erase(fap, 0, fap->fa_size);
   1fe60:	9801      	ldr	r0, [sp, #4]
   1fe62:	6882      	ldr	r2, [r0, #8]
   1fe64:	2100      	movs	r1, #0
   1fe66:	f7fe fa31 	bl	1e2cc <flash_area_erase>
        return BOOT_EBADIMAGE;
   1fe6a:	2303      	movs	r3, #3
   1fe6c:	e7f5      	b.n	1fe5a <boot_set_pending+0x72>

0001fe6e <boot_set_confirmed>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_confirmed(void)
{
   1fe6e:	b500      	push	{lr}
   1fe70:	b083      	sub	sp, #12
    const struct flash_area *fap;
    struct boot_swap_state state_primary_slot;
    int rc;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY,
   1fe72:	4669      	mov	r1, sp
   1fe74:	2001      	movs	r0, #1
   1fe76:	f7ff ff29 	bl	1fccc <boot_read_swap_state_by_id>
                                    &state_primary_slot);
    if (rc != 0) {
   1fe7a:	b9b8      	cbnz	r0, 1feac <boot_set_confirmed+0x3e>
        return rc;
    }

    switch (state_primary_slot.magic) {
   1fe7c:	f89d 3000 	ldrb.w	r3, [sp]
   1fe80:	2b02      	cmp	r3, #2
   1fe82:	d012      	beq.n	1feaa <boot_set_confirmed+0x3c>
   1fe84:	2b03      	cmp	r3, #3
   1fe86:	d011      	beq.n	1feac <boot_set_confirmed+0x3e>
    case BOOT_MAGIC_BAD:
        /* Unexpected state. */
        return BOOT_EBADVECT;
    }

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY, &fap);
   1fe88:	a901      	add	r1, sp, #4
   1fe8a:	2001      	movs	r0, #1
   1fe8c:	f7fe f996 	bl	1e1bc <flash_area_open>
    if (rc) {
   1fe90:	b978      	cbnz	r0, 1feb2 <boot_set_confirmed+0x44>
        rc = BOOT_EFLASH;
        goto done;
    }

    if (state_primary_slot.copy_done == BOOT_FLAG_UNSET) {
   1fe92:	f89d 3002 	ldrb.w	r3, [sp, #2]
   1fe96:	2b03      	cmp	r3, #3
   1fe98:	d00d      	beq.n	1feb6 <boot_set_confirmed+0x48>
        /* Swap never completed.  This is unexpected. */
        rc = BOOT_EBADVECT;
        goto done;
    }

    if (state_primary_slot.image_ok != BOOT_FLAG_UNSET) {
   1fe9a:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1fe9e:	2b03      	cmp	r3, #3
   1fea0:	d104      	bne.n	1feac <boot_set_confirmed+0x3e>
        /* Already confirmed. */
        goto done;
    }

    rc = boot_write_image_ok(fap);
   1fea2:	9801      	ldr	r0, [sp, #4]
   1fea4:	f7ff ff38 	bl	1fd18 <boot_write_image_ok>
   1fea8:	e000      	b.n	1feac <boot_set_confirmed+0x3e>
        return BOOT_EBADVECT;
   1feaa:	2004      	movs	r0, #4

done:
    flash_area_close(fap);
    return rc;
}
   1feac:	b003      	add	sp, #12
   1feae:	f85d fb04 	ldr.w	pc, [sp], #4
        rc = BOOT_EFLASH;
   1feb2:	2001      	movs	r0, #1
   1feb4:	e7fa      	b.n	1feac <boot_set_confirmed+0x3e>
        rc = BOOT_EBADVECT;
   1feb6:	2004      	movs	r0, #4
   1feb8:	e7f8      	b.n	1feac <boot_set_confirmed+0x3e>
	...

0001febc <boot_write_sz>:
    return 0;
}

static uint8_t
boot_write_sz(void)
{
   1febc:	b538      	push	{r3, r4, r5, lr}

    /* Figure out what size to write update status update as.  The size depends
     * on what the minimum write size is for scratch area, active image slot.
     * We need to use the bigger of those 2 values.
     */
    elem_sz = flash_area_align(boot_data.imgs[BOOT_PRIMARY_SLOT].area);
   1febe:	4d06      	ldr	r5, [pc, #24]	; (1fed8 <boot_write_sz+0x1c>)
   1fec0:	6a28      	ldr	r0, [r5, #32]
   1fec2:	f7fe fa17 	bl	1e2f4 <flash_area_align>
   1fec6:	4604      	mov	r4, r0
    align = flash_area_align(boot_data.scratch.area);
   1fec8:	6da8      	ldr	r0, [r5, #88]	; 0x58
   1feca:	f7fe fa13 	bl	1e2f4 <flash_area_align>
    if (align > elem_sz) {
   1fece:	4284      	cmp	r4, r0
   1fed0:	d300      	bcc.n	1fed4 <boot_write_sz+0x18>
    elem_sz = flash_area_align(boot_data.imgs[BOOT_PRIMARY_SLOT].area);
   1fed2:	4620      	mov	r0, r4
        elem_sz = align;
    }

    return elem_sz;
}
   1fed4:	bd38      	pop	{r3, r4, r5, pc}
   1fed6:	bf00      	nop
   1fed8:	20004a28 	.word	0x20004a28

0001fedc <boot_read_image_header>:
{
   1fedc:	b510      	push	{r4, lr}
   1fede:	b082      	sub	sp, #8
   1fee0:	460c      	mov	r4, r1
    area_id = flash_area_id_from_image_slot(slot);
   1fee2:	f7fe fa2b 	bl	1e33c <flash_area_id_from_image_slot>
    rc = flash_area_open(area_id, &fap);
   1fee6:	a901      	add	r1, sp, #4
   1fee8:	b2c0      	uxtb	r0, r0
   1feea:	f7fe f967 	bl	1e1bc <flash_area_open>
    if (rc != 0) {
   1feee:	b110      	cbz	r0, 1fef6 <boot_read_image_header+0x1a>
        rc = BOOT_EFLASH;
   1fef0:	2001      	movs	r0, #1
}
   1fef2:	b002      	add	sp, #8
   1fef4:	bd10      	pop	{r4, pc}
    rc = flash_area_read(fap, 0, out_hdr, sizeof *out_hdr);
   1fef6:	2320      	movs	r3, #32
   1fef8:	4622      	mov	r2, r4
   1fefa:	2100      	movs	r1, #0
   1fefc:	9801      	ldr	r0, [sp, #4]
   1fefe:	f7fe f9bd 	bl	1e27c <flash_area_read>
    if (rc != 0) {
   1ff02:	2800      	cmp	r0, #0
   1ff04:	d0f5      	beq.n	1fef2 <boot_read_image_header+0x16>
        rc = BOOT_EFLASH;
   1ff06:	2001      	movs	r0, #1
    return rc;
   1ff08:	e7f3      	b.n	1fef2 <boot_read_image_header+0x16>
	...

0001ff0c <boot_read_image_headers>:
{
   1ff0c:	b538      	push	{r3, r4, r5, lr}
   1ff0e:	4605      	mov	r5, r0
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
   1ff10:	2400      	movs	r4, #0
   1ff12:	2c01      	cmp	r4, #1
   1ff14:	dc0f      	bgt.n	1ff36 <boot_read_image_headers+0x2a>
        rc = boot_read_image_header(i, boot_img_hdr(&boot_data, i));
   1ff16:	4b09      	ldr	r3, [pc, #36]	; (1ff3c <boot_read_image_headers+0x30>)
   1ff18:	212c      	movs	r1, #44	; 0x2c
   1ff1a:	fb01 3104 	mla	r1, r1, r4, r3
   1ff1e:	4620      	mov	r0, r4
   1ff20:	f7ff ffdc 	bl	1fedc <boot_read_image_header>
        if (rc != 0) {
   1ff24:	4603      	mov	r3, r0
   1ff26:	b908      	cbnz	r0, 1ff2c <boot_read_image_headers+0x20>
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
   1ff28:	3401      	adds	r4, #1
   1ff2a:	e7f2      	b.n	1ff12 <boot_read_image_headers+0x6>
            if (i > 0 && !require_all) {
   1ff2c:	2c00      	cmp	r4, #0
   1ff2e:	dd03      	ble.n	1ff38 <boot_read_image_headers+0x2c>
   1ff30:	b915      	cbnz	r5, 1ff38 <boot_read_image_headers+0x2c>
                return 0;
   1ff32:	2300      	movs	r3, #0
   1ff34:	e000      	b.n	1ff38 <boot_read_image_headers+0x2c>
    return 0;
   1ff36:	2300      	movs	r3, #0
}
   1ff38:	4618      	mov	r0, r3
   1ff3a:	bd38      	pop	{r3, r4, r5, pc}
   1ff3c:	20004a28 	.word	0x20004a28

0001ff40 <split_image_check>:
static int
split_image_check(struct image_header *app_hdr,
                  const struct flash_area *app_fap,
                  struct image_header *loader_hdr,
                  const struct flash_area *loader_fap)
{
   1ff40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ff44:	b08c      	sub	sp, #48	; 0x30
   1ff46:	4606      	mov	r6, r0
   1ff48:	460f      	mov	r7, r1
   1ff4a:	4690      	mov	r8, r2
   1ff4c:	461d      	mov	r5, r3
    static void *tmpbuf;
    uint8_t loader_hash[32];

    if (!tmpbuf) {
   1ff4e:	4c18      	ldr	r4, [pc, #96]	; (1ffb0 <split_image_check+0x70>)
   1ff50:	6824      	ldr	r4, [r4, #0]
   1ff52:	b1f4      	cbz	r4, 1ff92 <split_image_check+0x52>
        if (!tmpbuf) {
            return BOOT_ENOMEM;
        }
    }

    if (bootutil_img_validate(loader_hdr, loader_fap, tmpbuf, BOOT_TMPBUF_SZ,
   1ff54:	ab04      	add	r3, sp, #16
   1ff56:	9302      	str	r3, [sp, #8]
   1ff58:	2400      	movs	r4, #0
   1ff5a:	9401      	str	r4, [sp, #4]
   1ff5c:	9400      	str	r4, [sp, #0]
   1ff5e:	f44f 7380 	mov.w	r3, #256	; 0x100
   1ff62:	4a13      	ldr	r2, [pc, #76]	; (1ffb0 <split_image_check+0x70>)
   1ff64:	6812      	ldr	r2, [r2, #0]
   1ff66:	4629      	mov	r1, r5
   1ff68:	4640      	mov	r0, r8
   1ff6a:	f000 f8fd 	bl	20168 <bootutil_img_validate>
   1ff6e:	b9d0      	cbnz	r0, 1ffa6 <split_image_check+0x66>
                              NULL, 0, loader_hash)) {
        return BOOT_EBADIMAGE;
    }

    if (bootutil_img_validate(app_hdr, app_fap, tmpbuf, BOOT_TMPBUF_SZ,
   1ff70:	9402      	str	r4, [sp, #8]
   1ff72:	2320      	movs	r3, #32
   1ff74:	9301      	str	r3, [sp, #4]
   1ff76:	ab04      	add	r3, sp, #16
   1ff78:	9300      	str	r3, [sp, #0]
   1ff7a:	f44f 7380 	mov.w	r3, #256	; 0x100
   1ff7e:	4a0c      	ldr	r2, [pc, #48]	; (1ffb0 <split_image_check+0x70>)
   1ff80:	6812      	ldr	r2, [r2, #0]
   1ff82:	4639      	mov	r1, r7
   1ff84:	4630      	mov	r0, r6
   1ff86:	f000 f8ef 	bl	20168 <bootutil_img_validate>
   1ff8a:	b970      	cbnz	r0, 1ffaa <split_image_check+0x6a>
                              loader_hash, 32, NULL)) {
        return BOOT_EBADIMAGE;
    }

    return 0;
}
   1ff8c:	b00c      	add	sp, #48	; 0x30
   1ff8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tmpbuf = malloc(BOOT_TMPBUF_SZ);
   1ff92:	f44f 7080 	mov.w	r0, #256	; 0x100
   1ff96:	f001 f819 	bl	20fcc <os_malloc>
   1ff9a:	4b05      	ldr	r3, [pc, #20]	; (1ffb0 <split_image_check+0x70>)
   1ff9c:	6018      	str	r0, [r3, #0]
        if (!tmpbuf) {
   1ff9e:	2800      	cmp	r0, #0
   1ffa0:	d1d8      	bne.n	1ff54 <split_image_check+0x14>
            return BOOT_ENOMEM;
   1ffa2:	2006      	movs	r0, #6
   1ffa4:	e7f2      	b.n	1ff8c <split_image_check+0x4c>
        return BOOT_EBADIMAGE;
   1ffa6:	2003      	movs	r0, #3
   1ffa8:	e7f0      	b.n	1ff8c <split_image_check+0x4c>
        return BOOT_EBADIMAGE;
   1ffaa:	2003      	movs	r0, #3
   1ffac:	e7ee      	b.n	1ff8c <split_image_check+0x4c>
   1ffae:	bf00      	nop
   1ffb0:	20004a90 	.word	0x20004a90

0001ffb4 <boot_read_sectors>:
{
   1ffb4:	b510      	push	{r4, lr}
   1ffb6:	b082      	sub	sp, #8
}

static inline int
boot_initialize_area(struct boot_loader_state *state, int flash_area)
{
    int num_sectors = BOOT_MAX_IMG_SECTORS;
   1ffb8:	2380      	movs	r3, #128	; 0x80
   1ffba:	9301      	str	r3, [sp, #4]
    int rc;

    switch (flash_area) {
    case FLASH_AREA_IMAGE_PRIMARY:
        rc = flash_area_to_sectors(flash_area, &num_sectors,
                                   state->imgs[BOOT_PRIMARY_SLOT].sectors);
   1ffbc:	4c15      	ldr	r4, [pc, #84]	; (20014 <boot_read_sectors+0x60>)
        rc = flash_area_to_sectors(flash_area, &num_sectors,
   1ffbe:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1ffc0:	a901      	add	r1, sp, #4
   1ffc2:	2001      	movs	r0, #1
   1ffc4:	f7fe f91c 	bl	1e200 <flash_area_to_sectors>
        state->imgs[BOOT_PRIMARY_SLOT].num_sectors = (size_t)num_sectors;
   1ffc8:	9b01      	ldr	r3, [sp, #4]
   1ffca:	62a3      	str	r3, [r4, #40]	; 0x28
    if (rc != 0) {
   1ffcc:	b118      	cbz	r0, 1ffd6 <boot_read_sectors+0x22>
        return BOOT_EFLASH;
   1ffce:	2401      	movs	r4, #1
}
   1ffd0:	4620      	mov	r0, r4
   1ffd2:	b002      	add	sp, #8
   1ffd4:	bd10      	pop	{r4, pc}
    int num_sectors = BOOT_MAX_IMG_SECTORS;
   1ffd6:	2380      	movs	r3, #128	; 0x80
   1ffd8:	9301      	str	r3, [sp, #4]
        break;
    case FLASH_AREA_IMAGE_SECONDARY:
        rc = flash_area_to_sectors(flash_area, &num_sectors,
   1ffda:	6d22      	ldr	r2, [r4, #80]	; 0x50
   1ffdc:	a901      	add	r1, sp, #4
   1ffde:	2002      	movs	r0, #2
   1ffe0:	f7fe f90e 	bl	1e200 <flash_area_to_sectors>
                                   state->imgs[BOOT_SECONDARY_SLOT].sectors);
        state->imgs[BOOT_SECONDARY_SLOT].num_sectors = (size_t)num_sectors;
   1ffe4:	9b01      	ldr	r3, [sp, #4]
   1ffe6:	6563      	str	r3, [r4, #84]	; 0x54
    if (rc != 0) {
   1ffe8:	b108      	cbz	r0, 1ffee <boot_read_sectors+0x3a>
        return BOOT_EFLASH;
   1ffea:	2401      	movs	r4, #1
   1ffec:	e7f0      	b.n	1ffd0 <boot_read_sectors+0x1c>
    int num_sectors = BOOT_MAX_IMG_SECTORS;
   1ffee:	2380      	movs	r3, #128	; 0x80
   1fff0:	9301      	str	r3, [sp, #4]
        break;
    case FLASH_AREA_IMAGE_SCRATCH:
        rc = flash_area_to_sectors(flash_area, &num_sectors,
   1fff2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   1fff4:	a901      	add	r1, sp, #4
   1fff6:	2003      	movs	r0, #3
   1fff8:	f7fe f902 	bl	1e200 <flash_area_to_sectors>
                                   state->scratch.sectors);
        state->scratch.num_sectors = (size_t)num_sectors;
   1fffc:	9b01      	ldr	r3, [sp, #4]
   1fffe:	6623      	str	r3, [r4, #96]	; 0x60
    if (rc != 0) {
   20000:	4604      	mov	r4, r0
   20002:	b108      	cbz	r0, 20008 <boot_read_sectors+0x54>
        return BOOT_EFLASH;
   20004:	2401      	movs	r4, #1
   20006:	e7e3      	b.n	1ffd0 <boot_read_sectors+0x1c>
    BOOT_WRITE_SZ(&boot_data) = boot_write_sz();
   20008:	f7ff ff58 	bl	1febc <boot_write_sz>
   2000c:	4b01      	ldr	r3, [pc, #4]	; (20014 <boot_read_sectors+0x60>)
   2000e:	f883 0064 	strb.w	r0, [r3, #100]	; 0x64
    return 0;
   20012:	e7dd      	b.n	1ffd0 <boot_read_sectors+0x1c>
   20014:	20004a28 	.word	0x20004a28

00020018 <split_go>:
    return rc;
}

int
split_go(int loader_slot, int split_slot, void **entry)
{
   20018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2001c:	4605      	mov	r5, r0
   2001e:	460c      	mov	r4, r1
   20020:	4690      	mov	r8, r2
    uintptr_t entry_val;
    int loader_flash_id;
    int split_flash_id;
    int rc;

    sectors = malloc(BOOT_MAX_IMG_SECTORS * 2 * sizeof *sectors);
   20022:	f44f 6040 	mov.w	r0, #3072	; 0xc00
   20026:	f000 ffd1 	bl	20fcc <os_malloc>
    if (sectors == NULL) {
   2002a:	2800      	cmp	r0, #0
   2002c:	d05b      	beq.n	200e6 <split_go+0xce>
   2002e:	4607      	mov	r7, r0
        return SPLIT_GO_ERR;
    }
    boot_data.imgs[loader_slot].sectors = sectors + 0;
   20030:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 200ec <split_go+0xd4>
   20034:	232c      	movs	r3, #44	; 0x2c
   20036:	fb03 f605 	mul.w	r6, r3, r5
   2003a:	eb09 0206 	add.w	r2, r9, r6
   2003e:	6250      	str	r0, [r2, #36]	; 0x24
    boot_data.imgs[split_slot].sectors = sectors + BOOT_MAX_IMG_SECTORS;
   20040:	f500 62c0 	add.w	r2, r0, #1536	; 0x600
   20044:	fb03 9304 	mla	r3, r3, r4, r9
   20048:	625a      	str	r2, [r3, #36]	; 0x24

    loader_flash_id = flash_area_id_from_image_slot(loader_slot);
   2004a:	4628      	mov	r0, r5
   2004c:	f7fe f976 	bl	1e33c <flash_area_id_from_image_slot>
    rc = flash_area_open(loader_flash_id,
   20050:	f106 0120 	add.w	r1, r6, #32
   20054:	4449      	add	r1, r9
   20056:	b2c0      	uxtb	r0, r0
   20058:	f7fe f8b0 	bl	1e1bc <flash_area_open>
                         &BOOT_IMG_AREA(&boot_data, loader_slot));
    assert(rc == 0);
   2005c:	b9b8      	cbnz	r0, 2008e <split_go+0x76>
    split_flash_id = flash_area_id_from_image_slot(split_slot);
   2005e:	4620      	mov	r0, r4
   20060:	f7fe f96c 	bl	1e33c <flash_area_id_from_image_slot>
    rc = flash_area_open(split_flash_id,
   20064:	232c      	movs	r3, #44	; 0x2c
   20066:	fb04 f303 	mul.w	r3, r4, r3
   2006a:	3320      	adds	r3, #32
   2006c:	491f      	ldr	r1, [pc, #124]	; (200ec <split_go+0xd4>)
   2006e:	4419      	add	r1, r3
   20070:	b2c0      	uxtb	r0, r0
   20072:	f7fe f8a3 	bl	1e1bc <flash_area_open>
                         &BOOT_IMG_AREA(&boot_data, split_slot));
    assert(rc == 0);
   20076:	b980      	cbnz	r0, 2009a <split_go+0x82>

    /* Determine the sector layout of the image slots and scratch area. */
    rc = boot_read_sectors();
   20078:	f7ff ff9c 	bl	1ffb4 <boot_read_sectors>
    if (rc != 0) {
   2007c:	b198      	cbz	r0, 200a6 <split_go+0x8e>
        rc = SPLIT_GO_ERR;
   2007e:	f06f 0601 	mvn.w	r6, #1
    rc = SPLIT_GO_OK;

done:
    flash_area_close(BOOT_IMG_AREA(&boot_data, split_slot));
    flash_area_close(BOOT_IMG_AREA(&boot_data, loader_slot));
    free(sectors);
   20082:	4638      	mov	r0, r7
   20084:	f000 ffae 	bl	20fe4 <os_free>
    return rc;
}
   20088:	4630      	mov	r0, r6
   2008a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    assert(rc == 0);
   2008e:	2300      	movs	r3, #0
   20090:	461a      	mov	r2, r3
   20092:	4619      	mov	r1, r3
   20094:	4618      	mov	r0, r3
   20096:	f7e8 ff65 	bl	8f64 <__assert_func>
    assert(rc == 0);
   2009a:	2300      	movs	r3, #0
   2009c:	461a      	mov	r2, r3
   2009e:	4619      	mov	r1, r3
   200a0:	4618      	mov	r0, r3
   200a2:	f7e8 ff5f 	bl	8f64 <__assert_func>
    rc = boot_read_image_headers(true);
   200a6:	2001      	movs	r0, #1
   200a8:	f7ff ff30 	bl	1ff0c <boot_read_image_headers>
    if (rc != 0) {
   200ac:	4606      	mov	r6, r0
   200ae:	2800      	cmp	r0, #0
   200b0:	d1e7      	bne.n	20082 <split_go+0x6a>
    return &state->imgs[slot].hdr;
   200b2:	4a0e      	ldr	r2, [pc, #56]	; (200ec <split_go+0xd4>)
   200b4:	232c      	movs	r3, #44	; 0x2c
   200b6:	fb03 2004 	mla	r0, r3, r4, r2
   200ba:	fb03 2205 	mla	r2, r3, r5, r2
    rc = split_image_check(boot_img_hdr(&boot_data, split_slot),
   200be:	6a13      	ldr	r3, [r2, #32]
   200c0:	6a01      	ldr	r1, [r0, #32]
   200c2:	f7ff ff3d 	bl	1ff40 <split_image_check>
    if (rc != 0) {
   200c6:	4606      	mov	r6, r0
   200c8:	b950      	cbnz	r0, 200e0 <split_go+0xc8>
    return state->imgs[slot].area->fa_off;
   200ca:	4908      	ldr	r1, [pc, #32]	; (200ec <split_go+0xd4>)
   200cc:	232c      	movs	r3, #44	; 0x2c
   200ce:	fb03 1404 	mla	r4, r3, r4, r1
   200d2:	6a23      	ldr	r3, [r4, #32]
   200d4:	685a      	ldr	r2, [r3, #4]
                boot_img_hdr(&boot_data, split_slot)->ih_hdr_size;
   200d6:	8923      	ldrh	r3, [r4, #8]
    entry_val = boot_img_slot_off(&boot_data, split_slot) +
   200d8:	4413      	add	r3, r2
    *entry = (void *) entry_val;
   200da:	f8c8 3000 	str.w	r3, [r8]
    rc = SPLIT_GO_OK;
   200de:	e7d0      	b.n	20082 <split_go+0x6a>
        rc = SPLIT_GO_NON_MATCHING;
   200e0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   200e4:	e7cd      	b.n	20082 <split_go+0x6a>
        return SPLIT_GO_ERR;
   200e6:	f06f 0601 	mvn.w	r6, #1
   200ea:	e7cd      	b.n	20088 <split_go+0x70>
   200ec:	20004a28 	.word	0x20004a28

000200f0 <bootutil_img_hash>:
 */
static int
bootutil_img_hash(struct image_header *hdr, const struct flash_area *fap,
                  uint8_t *tmp_buf, uint32_t tmp_buf_sz,
                  uint8_t *hash_result, uint8_t *seed, int seed_len)
{
   200f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   200f4:	b09d      	sub	sp, #116	; 0x74
   200f6:	4605      	mov	r5, r0
   200f8:	4689      	mov	r9, r1
   200fa:	4617      	mov	r7, r2
   200fc:	4698      	mov	r8, r3
   200fe:	9c25      	ldr	r4, [sp, #148]	; 0x94
#ifdef MCUBOOT_USE_MBED_TLS
typedef mbedtls_sha256_context bootutil_sha256_context;

static inline void bootutil_sha256_init(bootutil_sha256_context *ctx)
{
    mbedtls_sha256_init(ctx);
   20100:	a801      	add	r0, sp, #4
   20102:	f000 f8a1 	bl	20248 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
   20106:	2100      	movs	r1, #0
   20108:	a801      	add	r0, sp, #4
   2010a:	f000 f8a3 	bl	20254 <mbedtls_sha256_starts_ret>

    bootutil_sha256_init(&sha256_ctx);

    /* in some cases (split image) the hash is seeded with data from
     * the loader image */
    if (seed && (seed_len > 0)) {
   2010e:	b114      	cbz	r4, 20116 <bootutil_img_hash+0x26>
   20110:	9b26      	ldr	r3, [sp, #152]	; 0x98
   20112:	2b00      	cmp	r3, #0
   20114:	dc04      	bgt.n	20120 <bootutil_img_hash+0x30>

    /*
     * Hash is computed over image header and image itself. No TLV is
     * included ATM.
     */
    hdr_size = hdr->ih_hdr_size;
   20116:	892b      	ldrh	r3, [r5, #8]
    size = hdr->ih_img_size + hdr_size;
   20118:	68ee      	ldr	r6, [r5, #12]
   2011a:	441e      	add	r6, r3
    for (off = 0; off < size; off += blk_sz) {
   2011c:	2500      	movs	r5, #0
   2011e:	e013      	b.n	20148 <bootutil_img_hash+0x58>

static inline void bootutil_sha256_update(bootutil_sha256_context *ctx,
                                          const void *data,
                                          uint32_t data_len)
{
    (void)mbedtls_sha256_update_ret(ctx, data, data_len);
   20120:	461a      	mov	r2, r3
   20122:	4621      	mov	r1, r4
   20124:	a801      	add	r0, sp, #4
   20126:	f000 f97f 	bl	20428 <mbedtls_sha256_update_ret>
}
   2012a:	e7f4      	b.n	20116 <bootutil_img_hash+0x26>
         */
        if ((off < hdr_size) && ((off + blk_sz) > hdr_size)) {
            blk_sz = hdr_size - off;
        }
#endif
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
   2012c:	4623      	mov	r3, r4
   2012e:	463a      	mov	r2, r7
   20130:	4629      	mov	r1, r5
   20132:	4648      	mov	r0, r9
   20134:	f7fe f8a2 	bl	1e27c <flash_area_read>
        if (rc) {
   20138:	4603      	mov	r3, r0
   2013a:	b988      	cbnz	r0, 20160 <bootutil_img_hash+0x70>
    (void)mbedtls_sha256_update_ret(ctx, data, data_len);
   2013c:	4622      	mov	r2, r4
   2013e:	4639      	mov	r1, r7
   20140:	a801      	add	r0, sp, #4
   20142:	f000 f971 	bl	20428 <mbedtls_sha256_update_ret>
    for (off = 0; off < size; off += blk_sz) {
   20146:	4425      	add	r5, r4
   20148:	42b5      	cmp	r5, r6
   2014a:	d204      	bcs.n	20156 <bootutil_img_hash+0x66>
        blk_sz = size - off;
   2014c:	1b74      	subs	r4, r6, r5
        if (blk_sz > tmp_buf_sz) {
   2014e:	4544      	cmp	r4, r8
   20150:	d9ec      	bls.n	2012c <bootutil_img_hash+0x3c>
            blk_sz = tmp_buf_sz;
   20152:	4644      	mov	r4, r8
   20154:	e7ea      	b.n	2012c <bootutil_img_hash+0x3c>

static inline void bootutil_sha256_finish(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    (void)mbedtls_sha256_finish_ret(ctx, output);
   20156:	9924      	ldr	r1, [sp, #144]	; 0x90
   20158:	a801      	add	r0, sp, #4
   2015a:	f000 f9a8 	bl	204ae <mbedtls_sha256_finish_ret>
#endif
        bootutil_sha256_update(&sha256_ctx, tmp_buf, blk_sz);
    }
    bootutil_sha256_finish(&sha256_ctx, hash_result);

    return 0;
   2015e:	2300      	movs	r3, #0
}
   20160:	4618      	mov	r0, r3
   20162:	b01d      	add	sp, #116	; 0x74
   20164:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00020168 <bootutil_img_validate>:
 */
int
bootutil_img_validate(struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz,
                      uint8_t *seed, int seed_len, uint8_t *out_hash)
{
   20168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2016c:	b096      	sub	sp, #88	; 0x58
   2016e:	4680      	mov	r8, r0
   20170:	460d      	mov	r5, r1
   20172:	9e1e      	ldr	r6, [sp, #120]	; 0x78
    struct image_tlv tlv;
    uint8_t buf[SIG_BUF_SIZE];
    uint8_t hash[32];
    int rc;

    rc = bootutil_img_hash(hdr, fap, tmp_buf, tmp_buf_sz, hash, seed, seed_len);
   20174:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   20176:	9402      	str	r4, [sp, #8]
   20178:	9c1c      	ldr	r4, [sp, #112]	; 0x70
   2017a:	9401      	str	r4, [sp, #4]
   2017c:	ac04      	add	r4, sp, #16
   2017e:	9400      	str	r4, [sp, #0]
   20180:	f7ff ffb6 	bl	200f0 <bootutil_img_hash>
    if (rc) {
   20184:	4607      	mov	r7, r0
   20186:	2800      	cmp	r0, #0
   20188:	d14a      	bne.n	20220 <bootutil_img_validate+0xb8>
        return rc;
    }

    if (out_hash) {
   2018a:	b14e      	cbz	r6, 201a0 <bootutil_img_validate+0x38>
        memcpy(out_hash, hash, 32);
   2018c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   2018e:	6030      	str	r0, [r6, #0]
   20190:	6071      	str	r1, [r6, #4]
   20192:	60b2      	str	r2, [r6, #8]
   20194:	60f3      	str	r3, [r6, #12]
   20196:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   20198:	6130      	str	r0, [r6, #16]
   2019a:	6171      	str	r1, [r6, #20]
   2019c:	61b2      	str	r2, [r6, #24]
   2019e:	61f3      	str	r3, [r6, #28]
    }

    /* The TLVs come after the image. */
    /* After image there are TLVs. */
    off = hdr->ih_img_size + hdr->ih_hdr_size;
   201a0:	f8d8 400c 	ldr.w	r4, [r8, #12]
   201a4:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   201a8:	441c      	add	r4, r3

    rc = flash_area_read(fap, off, &info, sizeof(info));
   201aa:	2304      	movs	r3, #4
   201ac:	aa15      	add	r2, sp, #84	; 0x54
   201ae:	4621      	mov	r1, r4
   201b0:	4628      	mov	r0, r5
   201b2:	f7fe f863 	bl	1e27c <flash_area_read>
    if (rc) {
   201b6:	4607      	mov	r7, r0
   201b8:	bb90      	cbnz	r0, 20220 <bootutil_img_validate+0xb8>
        return rc;
    }
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
   201ba:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
   201be:	f646 1307 	movw	r3, #26887	; 0x6907
   201c2:	429a      	cmp	r2, r3
   201c4:	d130      	bne.n	20228 <bootutil_img_validate+0xc0>
        return -1;
    }
    end = off + info.it_tlv_tot;
   201c6:	f8bd 6056 	ldrh.w	r6, [sp, #86]	; 0x56
   201ca:	4426      	add	r6, r4
    off += sizeof(info);
   201cc:	3404      	adds	r4, #4
    int sha256_valid = 0;
   201ce:	4680      	mov	r8, r0

    /*
     * Traverse through all of the TLVs, performing any checks we know
     * and are able to do.
     */
    for (; off < end; off += sizeof(tlv) + tlv.it_len) {
   201d0:	e003      	b.n	201da <bootutil_img_validate+0x72>
   201d2:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
   201d6:	441c      	add	r4, r3
   201d8:	3404      	adds	r4, #4
   201da:	42b4      	cmp	r4, r6
   201dc:	d21d      	bcs.n	2021a <bootutil_img_validate+0xb2>
        rc = flash_area_read(fap, off, &tlv, sizeof tlv);
   201de:	2304      	movs	r3, #4
   201e0:	aa14      	add	r2, sp, #80	; 0x50
   201e2:	4621      	mov	r1, r4
   201e4:	4628      	mov	r0, r5
   201e6:	f7fe f849 	bl	1e27c <flash_area_read>
        if (rc) {
   201ea:	bb00      	cbnz	r0, 2022e <bootutil_img_validate+0xc6>
            return rc;
        }

        if (tlv.it_type == IMAGE_TLV_SHA256) {
   201ec:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
   201f0:	2b10      	cmp	r3, #16
   201f2:	d1ee      	bne.n	201d2 <bootutil_img_validate+0x6a>
            /*
             * Verify the SHA256 image hash.  This must always be
             * present.
             */
            if (tlv.it_len != sizeof(hash)) {
   201f4:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
   201f8:	2b20      	cmp	r3, #32
   201fa:	d11a      	bne.n	20232 <bootutil_img_validate+0xca>
                return -1;
            }
            rc = flash_area_read(fap, off + sizeof(tlv), buf, sizeof hash);
   201fc:	aa0c      	add	r2, sp, #48	; 0x30
   201fe:	1d21      	adds	r1, r4, #4
   20200:	4628      	mov	r0, r5
   20202:	f7fe f83b 	bl	1e27c <flash_area_read>
            if (rc) {
   20206:	b9b8      	cbnz	r0, 20238 <bootutil_img_validate+0xd0>
                return rc;
            }
            if (memcmp(hash, buf, sizeof(hash))) {
   20208:	2220      	movs	r2, #32
   2020a:	a90c      	add	r1, sp, #48	; 0x30
   2020c:	a804      	add	r0, sp, #16
   2020e:	f7ed fc33 	bl	da78 <memcmp>
   20212:	b998      	cbnz	r0, 2023c <bootutil_img_validate+0xd4>
                return -1;
            }

            sha256_valid = 1;
   20214:	f04f 0801 	mov.w	r8, #1
   20218:	e7db      	b.n	201d2 <bootutil_img_validate+0x6a>
            key_id = -1;
#endif
        }
    }

    if (!sha256_valid) {
   2021a:	f1b8 0f00 	cmp.w	r8, #0
   2021e:	d010      	beq.n	20242 <bootutil_img_validate+0xda>
        return -1;
    }
#endif

    return 0;
}
   20220:	4638      	mov	r0, r7
   20222:	b016      	add	sp, #88	; 0x58
   20224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
   20228:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2022c:	e7f8      	b.n	20220 <bootutil_img_validate+0xb8>
            return rc;
   2022e:	4607      	mov	r7, r0
   20230:	e7f6      	b.n	20220 <bootutil_img_validate+0xb8>
                return -1;
   20232:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   20236:	e7f3      	b.n	20220 <bootutil_img_validate+0xb8>
                return rc;
   20238:	4607      	mov	r7, r0
   2023a:	e7f1      	b.n	20220 <bootutil_img_validate+0xb8>
                return -1;
   2023c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   20240:	e7ee      	b.n	20220 <bootutil_img_validate+0xb8>
        return -1;
   20242:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   20246:	e7eb      	b.n	20220 <bootutil_img_validate+0xb8>

00020248 <mbedtls_sha256_init>:
    (b)[(i) + 3] = (unsigned char) ( (n)       );       \
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
   20248:	b508      	push	{r3, lr}
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
   2024a:	226c      	movs	r2, #108	; 0x6c
   2024c:	2100      	movs	r1, #0
   2024e:	f7ed fc44 	bl	dada <memset>
}
   20252:	bd08      	pop	{r3, pc}

00020254 <mbedtls_sha256_starts_ret>:
/*
 * SHA-256 context setup
 */
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    ctx->total[0] = 0;
   20254:	2300      	movs	r3, #0
   20256:	6003      	str	r3, [r0, #0]
    ctx->total[1] = 0;
   20258:	6043      	str	r3, [r0, #4]

    if( is224 == 0 )
   2025a:	460b      	mov	r3, r1
   2025c:	b9b9      	cbnz	r1, 2028e <mbedtls_sha256_starts_ret+0x3a>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
   2025e:	4a19      	ldr	r2, [pc, #100]	; (202c4 <mbedtls_sha256_starts_ret+0x70>)
   20260:	6082      	str	r2, [r0, #8]
        ctx->state[1] = 0xBB67AE85;
   20262:	4a19      	ldr	r2, [pc, #100]	; (202c8 <mbedtls_sha256_starts_ret+0x74>)
   20264:	60c2      	str	r2, [r0, #12]
        ctx->state[2] = 0x3C6EF372;
   20266:	4a19      	ldr	r2, [pc, #100]	; (202cc <mbedtls_sha256_starts_ret+0x78>)
   20268:	6102      	str	r2, [r0, #16]
        ctx->state[3] = 0xA54FF53A;
   2026a:	4a19      	ldr	r2, [pc, #100]	; (202d0 <mbedtls_sha256_starts_ret+0x7c>)
   2026c:	6142      	str	r2, [r0, #20]
        ctx->state[4] = 0x510E527F;
   2026e:	4a19      	ldr	r2, [pc, #100]	; (202d4 <mbedtls_sha256_starts_ret+0x80>)
   20270:	6182      	str	r2, [r0, #24]
        ctx->state[5] = 0x9B05688C;
   20272:	4a19      	ldr	r2, [pc, #100]	; (202d8 <mbedtls_sha256_starts_ret+0x84>)
   20274:	61c2      	str	r2, [r0, #28]
        ctx->state[6] = 0x1F83D9AB;
   20276:	4a19      	ldr	r2, [pc, #100]	; (202dc <mbedtls_sha256_starts_ret+0x88>)
   20278:	6202      	str	r2, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
   2027a:	f102 5274 	add.w	r2, r2, #1023410176	; 0x3d000000
   2027e:	f5a2 0223 	sub.w	r2, r2, #10682368	; 0xa30000
   20282:	f6a2 4292 	subw	r2, r2, #3218	; 0xc92
   20286:	6242      	str	r2, [r0, #36]	; 0x24
        ctx->state[5] = 0x68581511;
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
    }

    ctx->is224 = is224;
   20288:	6683      	str	r3, [r0, #104]	; 0x68

    return( 0 );
}
   2028a:	2000      	movs	r0, #0
   2028c:	4770      	bx	lr
        ctx->state[0] = 0xC1059ED8;
   2028e:	4a14      	ldr	r2, [pc, #80]	; (202e0 <mbedtls_sha256_starts_ret+0x8c>)
   20290:	6082      	str	r2, [r0, #8]
        ctx->state[1] = 0x367CD507;
   20292:	4a14      	ldr	r2, [pc, #80]	; (202e4 <mbedtls_sha256_starts_ret+0x90>)
   20294:	60c2      	str	r2, [r0, #12]
        ctx->state[2] = 0x3070DD17;
   20296:	f102 4279 	add.w	r2, r2, #4177526784	; 0xf9000000
   2029a:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
   2029e:	f502 6201 	add.w	r2, r2, #2064	; 0x810
   202a2:	6102      	str	r2, [r0, #16]
        ctx->state[3] = 0xF70E5939;
   202a4:	4a10      	ldr	r2, [pc, #64]	; (202e8 <mbedtls_sha256_starts_ret+0x94>)
   202a6:	6142      	str	r2, [r0, #20]
        ctx->state[4] = 0xFFC00B31;
   202a8:	4a10      	ldr	r2, [pc, #64]	; (202ec <mbedtls_sha256_starts_ret+0x98>)
   202aa:	6182      	str	r2, [r0, #24]
        ctx->state[5] = 0x68581511;
   202ac:	f102 42d1 	add.w	r2, r2, #1753219072	; 0x68800000
   202b0:	f502 12c0 	add.w	r2, r2, #1572864	; 0x180000
   202b4:	f502 621e 	add.w	r2, r2, #2528	; 0x9e0
   202b8:	61c2      	str	r2, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
   202ba:	4a0d      	ldr	r2, [pc, #52]	; (202f0 <mbedtls_sha256_starts_ret+0x9c>)
   202bc:	6202      	str	r2, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
   202be:	4a0d      	ldr	r2, [pc, #52]	; (202f4 <mbedtls_sha256_starts_ret+0xa0>)
   202c0:	6242      	str	r2, [r0, #36]	; 0x24
   202c2:	e7e1      	b.n	20288 <mbedtls_sha256_starts_ret+0x34>
   202c4:	6a09e667 	.word	0x6a09e667
   202c8:	bb67ae85 	.word	0xbb67ae85
   202cc:	3c6ef372 	.word	0x3c6ef372
   202d0:	a54ff53a 	.word	0xa54ff53a
   202d4:	510e527f 	.word	0x510e527f
   202d8:	9b05688c 	.word	0x9b05688c
   202dc:	1f83d9ab 	.word	0x1f83d9ab
   202e0:	c1059ed8 	.word	0xc1059ed8
   202e4:	367cd507 	.word	0x367cd507
   202e8:	f70e5939 	.word	0xf70e5939
   202ec:	ffc00b31 	.word	0xffc00b31
   202f0:	64f98fa7 	.word	0x64f98fa7
   202f4:	befa4fa4 	.word	0xbefa4fa4

000202f8 <mbedtls_internal_sha256_process>:
    d += temp1; h = temp1 + temp2;              \
}

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
   202f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   202fc:	b0c8      	sub	sp, #288	; 0x120
    uint32_t temp1, temp2, W[64];
    uint32_t A[8];
    unsigned int i;

    for( i = 0; i < 8; i++ )
   202fe:	2300      	movs	r3, #0
   20300:	e005      	b.n	2030e <mbedtls_internal_sha256_process+0x16>
        A[i] = ctx->state[i];
   20302:	1c9a      	adds	r2, r3, #2
   20304:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   20308:	f84d 2023 	str.w	r2, [sp, r3, lsl #2]
    for( i = 0; i < 8; i++ )
   2030c:	3301      	adds	r3, #1
   2030e:	2b07      	cmp	r3, #7
   20310:	d9f7      	bls.n	20302 <mbedtls_internal_sha256_process+0xa>

#if defined(MBEDTLS_SHA256_SMALLER)
    for( i = 0; i < 64; i++ )
   20312:	2200      	movs	r2, #0
   20314:	e04f      	b.n	203b6 <mbedtls_internal_sha256_process+0xbe>
    {
        if( i < 16 )
            GET_UINT32_BE( W[i], data, 4 * i );
   20316:	f811 5022 	ldrb.w	r5, [r1, r2, lsl #2]
   2031a:	eb01 0482 	add.w	r4, r1, r2, lsl #2
   2031e:	7863      	ldrb	r3, [r4, #1]
   20320:	041b      	lsls	r3, r3, #16
   20322:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   20326:	78a5      	ldrb	r5, [r4, #2]
   20328:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   2032c:	78e4      	ldrb	r4, [r4, #3]
   2032e:	4323      	orrs	r3, r4
   20330:	ac08      	add	r4, sp, #32
   20332:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
        else
            R( i );

        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i], K[i] );
   20336:	9b07      	ldr	r3, [sp, #28]
   20338:	9c04      	ldr	r4, [sp, #16]
   2033a:	ea4f 2cf4 	mov.w	ip, r4, ror #11
   2033e:	ea8c 1cb4 	eor.w	ip, ip, r4, ror #6
   20342:	ea8c 6c74 	eor.w	ip, ip, r4, ror #25
   20346:	4463      	add	r3, ip
   20348:	9d06      	ldr	r5, [sp, #24]
   2034a:	9e05      	ldr	r6, [sp, #20]
   2034c:	ea85 0c06 	eor.w	ip, r5, r6
   20350:	ea04 0c0c 	and.w	ip, r4, ip
   20354:	ea85 0c0c 	eor.w	ip, r5, ip
   20358:	4463      	add	r3, ip
   2035a:	4f32      	ldr	r7, [pc, #200]	; (20424 <mbedtls_internal_sha256_process+0x12c>)
   2035c:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
   20360:	443b      	add	r3, r7
   20362:	af08      	add	r7, sp, #32
   20364:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
   20368:	443b      	add	r3, r7
   2036a:	f8dd e000 	ldr.w	lr, [sp]
   2036e:	ea4f 3c7e 	mov.w	ip, lr, ror #13
   20372:	ea8c 0cbe 	eor.w	ip, ip, lr, ror #2
   20376:	ea8c 5cbe 	eor.w	ip, ip, lr, ror #22
   2037a:	f8dd 8004 	ldr.w	r8, [sp, #4]
   2037e:	ea0e 0708 	and.w	r7, lr, r8
   20382:	f8dd 9008 	ldr.w	r9, [sp, #8]
   20386:	ea4e 0a08 	orr.w	sl, lr, r8
   2038a:	ea09 0a0a 	and.w	sl, r9, sl
   2038e:	ea47 070a 	orr.w	r7, r7, sl
   20392:	44bc      	add	ip, r7
   20394:	9f03      	ldr	r7, [sp, #12]
   20396:	441f      	add	r7, r3
   20398:	9703      	str	r7, [sp, #12]
   2039a:	4463      	add	r3, ip
   2039c:	9307      	str	r3, [sp, #28]

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
   2039e:	9507      	str	r5, [sp, #28]
   203a0:	9606      	str	r6, [sp, #24]
   203a2:	9405      	str	r4, [sp, #20]
   203a4:	9704      	str	r7, [sp, #16]
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
   203a6:	f8cd 900c 	str.w	r9, [sp, #12]
   203aa:	f8cd 8008 	str.w	r8, [sp, #8]
   203ae:	f8cd e004 	str.w	lr, [sp, #4]
   203b2:	9300      	str	r3, [sp, #0]
    for( i = 0; i < 64; i++ )
   203b4:	3201      	adds	r2, #1
   203b6:	2a3f      	cmp	r2, #63	; 0x3f
   203b8:	d822      	bhi.n	20400 <mbedtls_internal_sha256_process+0x108>
        if( i < 16 )
   203ba:	2a0f      	cmp	r2, #15
   203bc:	d9ab      	bls.n	20316 <mbedtls_internal_sha256_process+0x1e>
            R( i );
   203be:	1e93      	subs	r3, r2, #2
   203c0:	ac08      	add	r4, sp, #32
   203c2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
   203c6:	ea4f 43f5 	mov.w	r3, r5, ror #19
   203ca:	ea83 4375 	eor.w	r3, r3, r5, ror #17
   203ce:	ea83 2395 	eor.w	r3, r3, r5, lsr #10
   203d2:	1fd5      	subs	r5, r2, #7
   203d4:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   203d8:	442b      	add	r3, r5
   203da:	f1a2 050f 	sub.w	r5, r2, #15
   203de:	f854 6025 	ldr.w	r6, [r4, r5, lsl #2]
   203e2:	ea4f 45b6 	mov.w	r5, r6, ror #18
   203e6:	ea85 15f6 	eor.w	r5, r5, r6, ror #7
   203ea:	ea85 05d6 	eor.w	r5, r5, r6, lsr #3
   203ee:	442b      	add	r3, r5
   203f0:	f1a2 0510 	sub.w	r5, r2, #16
   203f4:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   203f8:	442b      	add	r3, r5
   203fa:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
   203fe:	e79a      	b.n	20336 <mbedtls_internal_sha256_process+0x3e>
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
   20400:	2300      	movs	r3, #0
   20402:	e008      	b.n	20416 <mbedtls_internal_sha256_process+0x11e>
        ctx->state[i] += A[i];
   20404:	f85d 4023 	ldr.w	r4, [sp, r3, lsl #2]
   20408:	1c99      	adds	r1, r3, #2
   2040a:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
   2040e:	4422      	add	r2, r4
   20410:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
    for( i = 0; i < 8; i++ )
   20414:	3301      	adds	r3, #1
   20416:	2b07      	cmp	r3, #7
   20418:	d9f4      	bls.n	20404 <mbedtls_internal_sha256_process+0x10c>

    return( 0 );
}
   2041a:	2000      	movs	r0, #0
   2041c:	b048      	add	sp, #288	; 0x120
   2041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   20422:	bf00      	nop
   20424:	00024ec4 	.word	0x00024ec4

00020428 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
   20428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    int ret;
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
   2042c:	b3da      	cbz	r2, 204a6 <mbedtls_sha256_update_ret+0x7e>
   2042e:	4606      	mov	r6, r0
   20430:	460d      	mov	r5, r1
   20432:	4614      	mov	r4, r2
        return( 0 );

    left = ctx->total[0] & 0x3F;
   20434:	6803      	ldr	r3, [r0, #0]
   20436:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    fill = 64 - left;
   2043a:	f1c7 0840 	rsb	r8, r7, #64	; 0x40

    ctx->total[0] += (uint32_t) ilen;
   2043e:	4413      	add	r3, r2
   20440:	6003      	str	r3, [r0, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
   20442:	4293      	cmp	r3, r2
   20444:	d202      	bcs.n	2044c <mbedtls_sha256_update_ret+0x24>
        ctx->total[1]++;
   20446:	6843      	ldr	r3, [r0, #4]
   20448:	3301      	adds	r3, #1
   2044a:	6043      	str	r3, [r0, #4]

    if( left && ilen >= fill )
   2044c:	b10f      	cbz	r7, 20452 <mbedtls_sha256_update_ret+0x2a>
   2044e:	4544      	cmp	r4, r8
   20450:	d20a      	bcs.n	20468 <mbedtls_sha256_update_ret+0x40>
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
   20452:	2c3f      	cmp	r4, #63	; 0x3f
   20454:	d91b      	bls.n	2048e <mbedtls_sha256_update_ret+0x66>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
   20456:	4629      	mov	r1, r5
   20458:	4630      	mov	r0, r6
   2045a:	f7ff ff4d 	bl	202f8 <mbedtls_internal_sha256_process>
   2045e:	4603      	mov	r3, r0
   20460:	bb10      	cbnz	r0, 204a8 <mbedtls_sha256_update_ret+0x80>
            return( ret );

        input += 64;
   20462:	3540      	adds	r5, #64	; 0x40
        ilen  -= 64;
   20464:	3c40      	subs	r4, #64	; 0x40
   20466:	e7f4      	b.n	20452 <mbedtls_sha256_update_ret+0x2a>
        memcpy( (void *) (ctx->buffer + left), input, fill );
   20468:	f106 0928 	add.w	r9, r6, #40	; 0x28
   2046c:	4642      	mov	r2, r8
   2046e:	4629      	mov	r1, r5
   20470:	eb09 0007 	add.w	r0, r9, r7
   20474:	f7ed fb24 	bl	dac0 <memcpy>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
   20478:	4649      	mov	r1, r9
   2047a:	4630      	mov	r0, r6
   2047c:	f7ff ff3c 	bl	202f8 <mbedtls_internal_sha256_process>
   20480:	4603      	mov	r3, r0
   20482:	b988      	cbnz	r0, 204a8 <mbedtls_sha256_update_ret+0x80>
        input += fill;
   20484:	4445      	add	r5, r8
        ilen  -= fill;
   20486:	3f40      	subs	r7, #64	; 0x40
   20488:	443c      	add	r4, r7
        left = 0;
   2048a:	2700      	movs	r7, #0
   2048c:	e7e1      	b.n	20452 <mbedtls_sha256_update_ret+0x2a>
    }

    if( ilen > 0 )
   2048e:	b90c      	cbnz	r4, 20494 <mbedtls_sha256_update_ret+0x6c>
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
   20490:	2300      	movs	r3, #0
   20492:	e009      	b.n	204a8 <mbedtls_sha256_update_ret+0x80>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
   20494:	f106 0028 	add.w	r0, r6, #40	; 0x28
   20498:	4622      	mov	r2, r4
   2049a:	4629      	mov	r1, r5
   2049c:	4438      	add	r0, r7
   2049e:	f7ed fb0f 	bl	dac0 <memcpy>
    return( 0 );
   204a2:	2300      	movs	r3, #0
   204a4:	e000      	b.n	204a8 <mbedtls_sha256_update_ret+0x80>
        return( 0 );
   204a6:	2300      	movs	r3, #0
}
   204a8:	4618      	mov	r0, r3
   204aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000204ae <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
   204ae:	b570      	push	{r4, r5, r6, lr}
   204b0:	4604      	mov	r4, r0
   204b2:	460d      	mov	r5, r1
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
   204b4:	6803      	ldr	r3, [r0, #0]
   204b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
   204ba:	1c58      	adds	r0, r3, #1
   204bc:	4423      	add	r3, r4
   204be:	2280      	movs	r2, #128	; 0x80
   204c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( used <= 56 )
   204c4:	2838      	cmp	r0, #56	; 0x38
   204c6:	d87c      	bhi.n	205c2 <mbedtls_sha256_finish_ret+0x114>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
   204c8:	f104 0328 	add.w	r3, r4, #40	; 0x28
   204cc:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   204d0:	2100      	movs	r1, #0
   204d2:	4418      	add	r0, r3
   204d4:	f7ed fb01 	bl	dada <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
   204d8:	6822      	ldr	r2, [r4, #0]
         | ( ctx->total[1] <<  3 );
   204da:	6863      	ldr	r3, [r4, #4]
   204dc:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
   204de:	ea43 7052 	orr.w	r0, r3, r2, lsr #29
    low  = ( ctx->total[0] <<  3 );
   204e2:	00d1      	lsls	r1, r2, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
   204e4:	0e1e      	lsrs	r6, r3, #24
   204e6:	f884 6060 	strb.w	r6, [r4, #96]	; 0x60
   204ea:	f3c3 4607 	ubfx	r6, r3, #16, #8
   204ee:	f884 6061 	strb.w	r6, [r4, #97]	; 0x61
   204f2:	f3c3 2307 	ubfx	r3, r3, #8, #8
   204f6:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
   204fa:	f884 0063 	strb.w	r0, [r4, #99]	; 0x63
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
   204fe:	f3c2 5347 	ubfx	r3, r2, #21, #8
   20502:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
   20506:	f3c2 3347 	ubfx	r3, r2, #13, #8
   2050a:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
   2050e:	f3c2 1247 	ubfx	r2, r2, #5, #8
   20512:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
   20516:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
   2051a:	f104 0128 	add.w	r1, r4, #40	; 0x28
   2051e:	4620      	mov	r0, r4
   20520:	f7ff feea 	bl	202f8 <mbedtls_internal_sha256_process>
   20524:	4603      	mov	r3, r0
   20526:	2800      	cmp	r0, #0
   20528:	d159      	bne.n	205de <mbedtls_sha256_finish_ret+0x130>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
   2052a:	7ae2      	ldrb	r2, [r4, #11]
   2052c:	702a      	strb	r2, [r5, #0]
   2052e:	7aa2      	ldrb	r2, [r4, #10]
   20530:	706a      	strb	r2, [r5, #1]
   20532:	7a62      	ldrb	r2, [r4, #9]
   20534:	70aa      	strb	r2, [r5, #2]
   20536:	7a22      	ldrb	r2, [r4, #8]
   20538:	70ea      	strb	r2, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
   2053a:	7be2      	ldrb	r2, [r4, #15]
   2053c:	712a      	strb	r2, [r5, #4]
   2053e:	7ba2      	ldrb	r2, [r4, #14]
   20540:	716a      	strb	r2, [r5, #5]
   20542:	7b62      	ldrb	r2, [r4, #13]
   20544:	71aa      	strb	r2, [r5, #6]
   20546:	7b22      	ldrb	r2, [r4, #12]
   20548:	71ea      	strb	r2, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
   2054a:	7ce2      	ldrb	r2, [r4, #19]
   2054c:	722a      	strb	r2, [r5, #8]
   2054e:	7ca2      	ldrb	r2, [r4, #18]
   20550:	726a      	strb	r2, [r5, #9]
   20552:	7c62      	ldrb	r2, [r4, #17]
   20554:	72aa      	strb	r2, [r5, #10]
   20556:	7c22      	ldrb	r2, [r4, #16]
   20558:	72ea      	strb	r2, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
   2055a:	7de2      	ldrb	r2, [r4, #23]
   2055c:	732a      	strb	r2, [r5, #12]
   2055e:	7da2      	ldrb	r2, [r4, #22]
   20560:	736a      	strb	r2, [r5, #13]
   20562:	7d62      	ldrb	r2, [r4, #21]
   20564:	73aa      	strb	r2, [r5, #14]
   20566:	7d22      	ldrb	r2, [r4, #20]
   20568:	73ea      	strb	r2, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
   2056a:	7ee2      	ldrb	r2, [r4, #27]
   2056c:	742a      	strb	r2, [r5, #16]
   2056e:	7ea2      	ldrb	r2, [r4, #26]
   20570:	746a      	strb	r2, [r5, #17]
   20572:	7e62      	ldrb	r2, [r4, #25]
   20574:	74aa      	strb	r2, [r5, #18]
   20576:	7e22      	ldrb	r2, [r4, #24]
   20578:	74ea      	strb	r2, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
   2057a:	7fe2      	ldrb	r2, [r4, #31]
   2057c:	752a      	strb	r2, [r5, #20]
   2057e:	7fa2      	ldrb	r2, [r4, #30]
   20580:	756a      	strb	r2, [r5, #21]
   20582:	7f62      	ldrb	r2, [r4, #29]
   20584:	75aa      	strb	r2, [r5, #22]
   20586:	7f22      	ldrb	r2, [r4, #28]
   20588:	75ea      	strb	r2, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
   2058a:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
   2058e:	762a      	strb	r2, [r5, #24]
   20590:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
   20594:	766a      	strb	r2, [r5, #25]
   20596:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
   2059a:	76aa      	strb	r2, [r5, #26]
   2059c:	f894 2020 	ldrb.w	r2, [r4, #32]
   205a0:	76ea      	strb	r2, [r5, #27]

    if( ctx->is224 == 0 )
   205a2:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   205a4:	b9da      	cbnz	r2, 205de <mbedtls_sha256_finish_ret+0x130>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
   205a6:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   205aa:	772b      	strb	r3, [r5, #28]
   205ac:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   205b0:	776b      	strb	r3, [r5, #29]
   205b2:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   205b6:	77ab      	strb	r3, [r5, #30]
   205b8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   205bc:	77eb      	strb	r3, [r5, #31]

    return( 0 );
   205be:	4613      	mov	r3, r2
   205c0:	e00d      	b.n	205de <mbedtls_sha256_finish_ret+0x130>
        memset( ctx->buffer + used, 0, 64 - used );
   205c2:	f104 0628 	add.w	r6, r4, #40	; 0x28
   205c6:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   205ca:	2100      	movs	r1, #0
   205cc:	4430      	add	r0, r6
   205ce:	f7ed fa84 	bl	dada <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
   205d2:	4631      	mov	r1, r6
   205d4:	4620      	mov	r0, r4
   205d6:	f7ff fe8f 	bl	202f8 <mbedtls_internal_sha256_process>
   205da:	4603      	mov	r3, r0
   205dc:	b108      	cbz	r0, 205e2 <mbedtls_sha256_finish_ret+0x134>
}
   205de:	4618      	mov	r0, r3
   205e0:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer, 0, 56 );
   205e2:	2238      	movs	r2, #56	; 0x38
   205e4:	2100      	movs	r1, #0
   205e6:	4630      	mov	r0, r6
   205e8:	f7ed fa77 	bl	dada <memset>
   205ec:	e774      	b.n	204d8 <mbedtls_sha256_finish_ret+0x2a>

000205ee <fcb_free_sector_cnt>:
    return rc;
}

int
fcb_free_sector_cnt(struct fcb *fcb)
{
   205ee:	b538      	push	{r3, r4, r5, lr}
   205f0:	4604      	mov	r4, r0
    int i;
    struct flash_area *fa;

    fa = fcb->f_active.fe_area;
   205f2:	69c1      	ldr	r1, [r0, #28]
    for (i = 0; i < fcb->f_sector_cnt; i++) {
   205f4:	2500      	movs	r5, #0
   205f6:	e000      	b.n	205fa <fcb_free_sector_cnt+0xc>
   205f8:	3501      	adds	r5, #1
   205fa:	7963      	ldrb	r3, [r4, #5]
   205fc:	42ab      	cmp	r3, r5
   205fe:	dd06      	ble.n	2060e <fcb_free_sector_cnt+0x20>
        fa = fcb_getnext_area(fcb, fa);
   20600:	4620      	mov	r0, r4
   20602:	f000 fa7b 	bl	20afc <fcb_getnext_area>
   20606:	4601      	mov	r1, r0
        if (fa == fcb->f_oldest) {
   20608:	69a3      	ldr	r3, [r4, #24]
   2060a:	4283      	cmp	r3, r0
   2060c:	d1f4      	bne.n	205f8 <fcb_free_sector_cnt+0xa>
            break;
        }
    }
    return i;
}
   2060e:	4628      	mov	r0, r5
   20610:	bd38      	pop	{r3, r4, r5, pc}

00020612 <fcb_put_len>:
 * 1 byte for lengths < 128 bytes, and 2 bytes for < 16384.
 */
int
fcb_put_len(uint8_t *buf, uint16_t len)
{
    if (len < 0x80) {
   20612:	297f      	cmp	r1, #127	; 0x7f
   20614:	d90a      	bls.n	2062c <fcb_put_len+0x1a>
        buf[0] = len;
        return 1;
    } else if (len < FCB_MAX_LEN) {
   20616:	f647 73fe 	movw	r3, #32766	; 0x7ffe
   2061a:	4299      	cmp	r1, r3
   2061c:	d809      	bhi.n	20632 <fcb_put_len+0x20>
        buf[0] = (len & 0x7f) | 0x80;
   2061e:	f061 037f 	orn	r3, r1, #127	; 0x7f
   20622:	7003      	strb	r3, [r0, #0]
        buf[1] = len >> 7;
   20624:	09c9      	lsrs	r1, r1, #7
   20626:	7041      	strb	r1, [r0, #1]
        return 2;
   20628:	2002      	movs	r0, #2
   2062a:	4770      	bx	lr
        buf[0] = len;
   2062c:	7001      	strb	r1, [r0, #0]
        return 1;
   2062e:	2001      	movs	r0, #1
   20630:	4770      	bx	lr
    } else {
        return FCB_ERR_ARGS;
   20632:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
}
   20636:	4770      	bx	lr

00020638 <fcb_get_len>:
int
fcb_get_len(uint8_t *buf, uint16_t *len)
{
    int rc;

    if (buf[0] & 0x80) {
   20638:	7803      	ldrb	r3, [r0, #0]
   2063a:	f990 2000 	ldrsb.w	r2, [r0]
   2063e:	2a00      	cmp	r2, #0
   20640:	db02      	blt.n	20648 <fcb_get_len+0x10>
        *len = (buf[0] & 0x7f) | (buf[1] << 7);
        rc = 2;
    } else {
        *len = buf[0];
   20642:	800b      	strh	r3, [r1, #0]
        rc = 1;
   20644:	2001      	movs	r0, #1
    }
    return rc;
}
   20646:	4770      	bx	lr
        *len = (buf[0] & 0x7f) | (buf[1] << 7);
   20648:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2064c:	7842      	ldrb	r2, [r0, #1]
   2064e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
   20652:	800b      	strh	r3, [r1, #0]
        rc = 2;
   20654:	2002      	movs	r0, #2
   20656:	4770      	bx	lr

00020658 <fcb_sector_hdr_init>:
/**
 * Initialize erased sector for use.
 */
int
fcb_sector_hdr_init(struct fcb *fcb, struct flash_area *fap, uint16_t id)
{
   20658:	b500      	push	{lr}
   2065a:	b083      	sub	sp, #12
   2065c:	4603      	mov	r3, r0
   2065e:	4608      	mov	r0, r1
    struct fcb_disk_area fda;
    int rc;

    fda.fd_magic = fcb->f_magic;
   20660:	6819      	ldr	r1, [r3, #0]
   20662:	9100      	str	r1, [sp, #0]
    fda.fd_ver = fcb->f_version;
   20664:	791b      	ldrb	r3, [r3, #4]
   20666:	f88d 3004 	strb.w	r3, [sp, #4]
    fda._pad = 0xff;
   2066a:	23ff      	movs	r3, #255	; 0xff
   2066c:	f88d 3005 	strb.w	r3, [sp, #5]
    fda.fd_id = id;
   20670:	f8ad 2006 	strh.w	r2, [sp, #6]

    rc = flash_area_write(fap, 0, &fda, sizeof(fda));
   20674:	2308      	movs	r3, #8
   20676:	466a      	mov	r2, sp
   20678:	2100      	movs	r1, #0
   2067a:	f7fd fe13 	bl	1e2a4 <flash_area_write>
    if (rc) {
   2067e:	b910      	cbnz	r0, 20686 <fcb_sector_hdr_init+0x2e>
        return FCB_ERR_FLASH;
    }
    return 0;
}
   20680:	b003      	add	sp, #12
   20682:	f85d fb04 	ldr.w	pc, [sp], #4
        return FCB_ERR_FLASH;
   20686:	f06f 0001 	mvn.w	r0, #1
   2068a:	e7f9      	b.n	20680 <fcb_sector_hdr_init+0x28>

0002068c <fcb_sector_hdr_read>:
 * Returns 1 if sector has data.
 */
int
fcb_sector_hdr_read(struct fcb *fcb, struct flash_area *fap,
  struct fcb_disk_area *fdap)
{
   2068c:	b530      	push	{r4, r5, lr}
   2068e:	b083      	sub	sp, #12
   20690:	4604      	mov	r4, r0
   20692:	4608      	mov	r0, r1
    struct fcb_disk_area fda;
    int rc;

    if (!fdap) {
   20694:	4615      	mov	r5, r2
   20696:	b19a      	cbz	r2, 206c0 <fcb_sector_hdr_read+0x34>
        fdap = &fda;
    }
    rc = flash_area_read_is_empty(fap, 0, fdap, sizeof(*fdap));
   20698:	2308      	movs	r3, #8
   2069a:	462a      	mov	r2, r5
   2069c:	2100      	movs	r1, #0
   2069e:	f7fd fe46 	bl	1e32e <flash_area_read_is_empty>
    if (rc < 0) {
   206a2:	1e03      	subs	r3, r0, #0
   206a4:	db0e      	blt.n	206c4 <fcb_sector_hdr_read+0x38>
        return FCB_ERR_FLASH;
    } else if (rc == 1) {
   206a6:	2b01      	cmp	r3, #1
   206a8:	d00f      	beq.n	206ca <fcb_sector_hdr_read+0x3e>
        return 0;
    }
    if (fdap->fd_magic != fcb->f_magic) {
   206aa:	682a      	ldr	r2, [r5, #0]
   206ac:	6823      	ldr	r3, [r4, #0]
   206ae:	429a      	cmp	r2, r3
   206b0:	d10d      	bne.n	206ce <fcb_sector_hdr_read+0x42>
        return FCB_ERR_MAGIC;
    }
    if (fdap->fd_ver != fcb->f_version) {
   206b2:	792a      	ldrb	r2, [r5, #4]
   206b4:	7923      	ldrb	r3, [r4, #4]
   206b6:	429a      	cmp	r2, r3
   206b8:	d10c      	bne.n	206d4 <fcb_sector_hdr_read+0x48>
        return FCB_ERR_VERSION;
    }
    return 1;
   206ba:	2001      	movs	r0, #1
}
   206bc:	b003      	add	sp, #12
   206be:	bd30      	pop	{r4, r5, pc}
        fdap = &fda;
   206c0:	466d      	mov	r5, sp
   206c2:	e7e9      	b.n	20698 <fcb_sector_hdr_read+0xc>
        return FCB_ERR_FLASH;
   206c4:	f06f 0001 	mvn.w	r0, #1
   206c8:	e7f8      	b.n	206bc <fcb_sector_hdr_read+0x30>
        return 0;
   206ca:	2000      	movs	r0, #0
   206cc:	e7f6      	b.n	206bc <fcb_sector_hdr_read+0x30>
        return FCB_ERR_MAGIC;
   206ce:	f06f 0006 	mvn.w	r0, #6
   206d2:	e7f3      	b.n	206bc <fcb_sector_hdr_read+0x30>
        return FCB_ERR_VERSION;
   206d4:	f06f 0007 	mvn.w	r0, #7
   206d8:	e7f0      	b.n	206bc <fcb_sector_hdr_read+0x30>

000206da <fcb_init>:
{
   206da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   206de:	b085      	sub	sp, #20
    if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   206e0:	6883      	ldr	r3, [r0, #8]
   206e2:	2b00      	cmp	r3, #0
   206e4:	f000 8082 	beq.w	207ec <fcb_init+0x112>
   206e8:	4606      	mov	r6, r0
   206ea:	7943      	ldrb	r3, [r0, #5]
   206ec:	7982      	ldrb	r2, [r0, #6]
   206ee:	1a9b      	subs	r3, r3, r2
   206f0:	2b00      	cmp	r3, #0
   206f2:	dd7e      	ble.n	207f2 <fcb_init+0x118>
    struct flash_area *oldest_fap = NULL, *newest_fap = NULL;
   206f4:	f04f 0b00 	mov.w	fp, #0
   206f8:	f8cd b004 	str.w	fp, [sp, #4]
    int oldest = -1, newest = -1;
   206fc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   20700:	46d1      	mov	r9, sl
    int max_align = 1;
   20702:	f04f 0801 	mov.w	r8, #1
    for (i = 0; i < fcb->f_sector_cnt; i++) {
   20706:	465f      	mov	r7, fp
   20708:	e00a      	b.n	20720 <fcb_init+0x46>
            max_align = flash_area_align(fap);
   2070a:	4620      	mov	r0, r4
   2070c:	f7fd fdf2 	bl	1e2f4 <flash_area_align>
   20710:	4680      	mov	r8, r0
   20712:	e012      	b.n	2073a <fcb_init+0x60>
            oldest = newest = fda.fd_id;
   20714:	f8bd 900e 	ldrh.w	r9, [sp, #14]
            oldest_fap = newest_fap = fap;
   20718:	46a3      	mov	fp, r4
   2071a:	9401      	str	r4, [sp, #4]
            oldest = newest = fda.fd_id;
   2071c:	46ca      	mov	sl, r9
    for (i = 0; i < fcb->f_sector_cnt; i++) {
   2071e:	3701      	adds	r7, #1
   20720:	7973      	ldrb	r3, [r6, #5]
   20722:	42bb      	cmp	r3, r7
   20724:	dd29      	ble.n	2077a <fcb_init+0xa0>
        fap = &fcb->f_sectors[i];
   20726:	68b4      	ldr	r4, [r6, #8]
   20728:	eb07 0347 	add.w	r3, r7, r7, lsl #1
   2072c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
        align = flash_area_align(fap);
   20730:	4620      	mov	r0, r4
   20732:	f7fd fddf 	bl	1e2f4 <flash_area_align>
        if (align > max_align) {
   20736:	4580      	cmp	r8, r0
   20738:	dbe7      	blt.n	2070a <fcb_init+0x30>
        rc = fcb_sector_hdr_read(fcb, fap, &fda);
   2073a:	aa02      	add	r2, sp, #8
   2073c:	4621      	mov	r1, r4
   2073e:	4630      	mov	r0, r6
   20740:	f7ff ffa4 	bl	2068c <fcb_sector_hdr_read>
        if (rc < 0) {
   20744:	1e05      	subs	r5, r0, #0
   20746:	db3b      	blt.n	207c0 <fcb_init+0xe6>
        if (rc == 0) {
   20748:	2d00      	cmp	r5, #0
   2074a:	d0e8      	beq.n	2071e <fcb_init+0x44>
        if (oldest < 0) {
   2074c:	f1b9 0f00 	cmp.w	r9, #0
   20750:	dbe0      	blt.n	20714 <fcb_init+0x3a>
        if (FCB_ID_GT(fda.fd_id, newest)) {
   20752:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   20756:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
   2075a:	fa0f f38a 	sxth.w	r3, sl
   2075e:	1ad3      	subs	r3, r2, r3
   20760:	2b00      	cmp	r3, #0
   20762:	dd02      	ble.n	2076a <fcb_init+0x90>
            newest = fda.fd_id;
   20764:	468a      	mov	sl, r1
            newest_fap = fap;
   20766:	46a3      	mov	fp, r4
   20768:	e7d9      	b.n	2071e <fcb_init+0x44>
        } else if (FCB_ID_GT(oldest, fda.fd_id)) {
   2076a:	fa0f f389 	sxth.w	r3, r9
   2076e:	1a9a      	subs	r2, r3, r2
   20770:	2a00      	cmp	r2, #0
   20772:	ddd4      	ble.n	2071e <fcb_init+0x44>
            oldest = fda.fd_id;
   20774:	4689      	mov	r9, r1
            oldest_fap = fap;
   20776:	9401      	str	r4, [sp, #4]
   20778:	e7d1      	b.n	2071e <fcb_init+0x44>
    if (oldest < 0) {
   2077a:	f1b9 0f00 	cmp.w	r9, #0
   2077e:	db23      	blt.n	207c8 <fcb_init+0xee>
    fcb->f_align = max_align;
   20780:	fa5f f888 	uxtb.w	r8, r8
   20784:	f886 802e 	strb.w	r8, [r6, #46]	; 0x2e
    fcb->f_oldest = oldest_fap;
   20788:	9b01      	ldr	r3, [sp, #4]
   2078a:	61b3      	str	r3, [r6, #24]
    fcb->f_active.fe_area = newest_fap;
   2078c:	f8c6 b01c 	str.w	fp, [r6, #28]
    fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   20790:	2308      	movs	r3, #8
   20792:	6233      	str	r3, [r6, #32]
    fcb->f_active_id = newest;
   20794:	f8a6 a02c 	strh.w	sl, [r6, #44]	; 0x2c
    assert((fcb->f_align & (fcb->f_align - 1)) == 0);
   20798:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
   2079c:	ea18 0505 	ands.w	r5, r8, r5
   207a0:	d11e      	bne.n	207e0 <fcb_init+0x106>
        rc = fcb_getnext_in_area(fcb, &fcb->f_active);
   207a2:	f106 011c 	add.w	r1, r6, #28
   207a6:	4630      	mov	r0, r6
   207a8:	f000 f984 	bl	20ab4 <fcb_getnext_in_area>
        if (rc == FCB_ERR_NOVAR) {
   207ac:	f110 0f03 	cmn.w	r0, #3
   207b0:	d002      	beq.n	207b8 <fcb_init+0xde>
        if (rc != 0) {
   207b2:	2800      	cmp	r0, #0
   207b4:	d0f5      	beq.n	207a2 <fcb_init+0xc8>
        rc = fcb_getnext_in_area(fcb, &fcb->f_active);
   207b6:	4605      	mov	r5, r0
    os_mutex_init(&fcb->f_mtx);
   207b8:	f106 000c 	add.w	r0, r6, #12
   207bc:	f7ea f8de 	bl	a97c <os_mutex_init>
}
   207c0:	4628      	mov	r0, r5
   207c2:	b005      	add	sp, #20
   207c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        oldest_fap = newest_fap = &fcb->f_sectors[0];
   207c8:	68b3      	ldr	r3, [r6, #8]
   207ca:	461c      	mov	r4, r3
   207cc:	9301      	str	r3, [sp, #4]
        rc = fcb_sector_hdr_init(fcb, oldest_fap, 0);
   207ce:	2200      	movs	r2, #0
   207d0:	4619      	mov	r1, r3
   207d2:	4630      	mov	r0, r6
   207d4:	f7ff ff40 	bl	20658 <fcb_sector_hdr_init>
        if (rc) {
   207d8:	4682      	mov	sl, r0
   207da:	b968      	cbnz	r0, 207f8 <fcb_init+0x11e>
        oldest_fap = newest_fap = &fcb->f_sectors[0];
   207dc:	46a3      	mov	fp, r4
   207de:	e7cf      	b.n	20780 <fcb_init+0xa6>
    assert((fcb->f_align & (fcb->f_align - 1)) == 0);
   207e0:	2300      	movs	r3, #0
   207e2:	461a      	mov	r2, r3
   207e4:	4619      	mov	r1, r3
   207e6:	4618      	mov	r0, r3
   207e8:	f7e8 fbbc 	bl	8f64 <__assert_func>
        return FCB_ERR_ARGS;
   207ec:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   207f0:	e7e6      	b.n	207c0 <fcb_init+0xe6>
   207f2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   207f6:	e7e3      	b.n	207c0 <fcb_init+0xe6>
            return rc;
   207f8:	4605      	mov	r5, r0
   207fa:	e7e1      	b.n	207c0 <fcb_init+0xe6>

000207fc <fcb_new_area>:
#include "fcb/fcb.h"
#include "fcb_priv.h"

static struct flash_area *
fcb_new_area(struct fcb *fcb, int cnt)
{
   207fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   207fe:	4605      	mov	r5, r0
   20800:	460f      	mov	r7, r1
    struct flash_area *rfa;
    int i;

    rfa = NULL;
    i = 0;
    fa = fcb->f_active.fe_area;
   20802:	69c1      	ldr	r1, [r0, #28]
    i = 0;
   20804:	2400      	movs	r4, #0
    rfa = NULL;
   20806:	4626      	mov	r6, r4
   20808:	e006      	b.n	20818 <fcb_new_area+0x1c>
    do {
        fa = fcb_getnext_area(fcb, fa);
        if (!rfa) {
            rfa = fa;
        }
        if (fa == fcb->f_oldest) {
   2080a:	69ab      	ldr	r3, [r5, #24]
   2080c:	428b      	cmp	r3, r1
   2080e:	d00b      	beq.n	20828 <fcb_new_area+0x2c>
            return NULL;
        }
    } while (i++ < cnt);
   20810:	1c63      	adds	r3, r4, #1
   20812:	42bc      	cmp	r4, r7
   20814:	da09      	bge.n	2082a <fcb_new_area+0x2e>
   20816:	461c      	mov	r4, r3
        fa = fcb_getnext_area(fcb, fa);
   20818:	4628      	mov	r0, r5
   2081a:	f000 f96f 	bl	20afc <fcb_getnext_area>
   2081e:	4601      	mov	r1, r0
        if (!rfa) {
   20820:	2e00      	cmp	r6, #0
   20822:	d1f2      	bne.n	2080a <fcb_new_area+0xe>
            rfa = fa;
   20824:	4606      	mov	r6, r0
   20826:	e7f0      	b.n	2080a <fcb_new_area+0xe>
            return NULL;
   20828:	2600      	movs	r6, #0
    return rfa;
}
   2082a:	4630      	mov	r0, r6
   2082c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002082e <fcb_append_to_scratch>:
/*
 * Take one of the scratch blocks into use, if at all possible.
 */
int
fcb_append_to_scratch(struct fcb *fcb)
{
   2082e:	b538      	push	{r3, r4, r5, lr}
   20830:	4604      	mov	r4, r0
    struct flash_area *fa;
    int rc;

    fa = fcb_new_area(fcb, 0);
   20832:	2100      	movs	r1, #0
   20834:	f7ff ffe2 	bl	207fc <fcb_new_area>
    if (!fa) {
   20838:	b178      	cbz	r0, 2085a <fcb_append_to_scratch+0x2c>
   2083a:	4605      	mov	r5, r0
        return FCB_ERR_NOSPACE;
    }
    rc = fcb_sector_hdr_init(fcb, fa, fcb->f_active_id + 1);
   2083c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   2083e:	3201      	adds	r2, #1
   20840:	b292      	uxth	r2, r2
   20842:	4601      	mov	r1, r0
   20844:	4620      	mov	r0, r4
   20846:	f7ff ff07 	bl	20658 <fcb_sector_hdr_init>
    if (rc) {
   2084a:	b928      	cbnz	r0, 20858 <fcb_append_to_scratch+0x2a>
        return rc;
    }
    fcb->f_active.fe_area = fa;
   2084c:	61e5      	str	r5, [r4, #28]
    fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   2084e:	2308      	movs	r3, #8
   20850:	6223      	str	r3, [r4, #32]
    fcb->f_active_id++;
   20852:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   20854:	3301      	adds	r3, #1
   20856:	85a3      	strh	r3, [r4, #44]	; 0x2c
    return FCB_OK;
}
   20858:	bd38      	pop	{r3, r4, r5, pc}
        return FCB_ERR_NOSPACE;
   2085a:	f06f 0003 	mvn.w	r0, #3
   2085e:	e7fb      	b.n	20858 <fcb_append_to_scratch+0x2a>

00020860 <fcb_append>:

int
fcb_append(struct fcb *fcb, uint16_t len, struct fcb_entry *append_loc)
{
   20860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20864:	b082      	sub	sp, #8
   20866:	4605      	mov	r5, r0
   20868:	460c      	mov	r4, r1
   2086a:	4617      	mov	r7, r2
    struct flash_area *fa;
    uint8_t tmp_str[2];
    int cnt;
    int rc;

    cnt = fcb_put_len(tmp_str, len);
   2086c:	a801      	add	r0, sp, #4
   2086e:	f7ff fed0 	bl	20612 <fcb_put_len>
    if (cnt < 0) {
   20872:	1e06      	subs	r6, r0, #0
   20874:	db58      	blt.n	20928 <fcb_append+0xc8>
int fcb_get_len(uint8_t *buf, uint16_t *len);

static inline int
fcb_len_in_flash(struct fcb *fcb, uint16_t len)
{
    if (fcb->f_align <= 1) {
   20876:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   2087a:	2b01      	cmp	r3, #1
   2087c:	d933      	bls.n	208e6 <fcb_append+0x86>
        return len;
    }
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   2087e:	1e58      	subs	r0, r3, #1
   20880:	fa10 f686 	uxtah	r6, r0, r6
   20884:	4258      	negs	r0, r3
   20886:	4006      	ands	r6, r0
    if (fcb->f_align <= 1) {
   20888:	2b01      	cmp	r3, #1
   2088a:	d903      	bls.n	20894 <fcb_append+0x34>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   2088c:	1e59      	subs	r1, r3, #1
   2088e:	440c      	add	r4, r1
   20890:	4259      	negs	r1, r3
   20892:	400c      	ands	r4, r1
        return cnt;
    }
    cnt = fcb_len_in_flash(fcb, cnt);
    len = fcb_len_in_flash(fcb, len) + fcb_len_in_flash(fcb, FCB_CRC_SZ);
   20894:	b2a1      	uxth	r1, r4
    if (fcb->f_align <= 1) {
   20896:	2b01      	cmp	r3, #1
   20898:	d927      	bls.n	208ea <fcb_append+0x8a>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   2089a:	425c      	negs	r4, r3
   2089c:	401c      	ands	r4, r3
   2089e:	440c      	add	r4, r1
   208a0:	b2a4      	uxth	r4, r4

    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   208a2:	f105 080c 	add.w	r8, r5, #12
   208a6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   208aa:	4640      	mov	r0, r8
   208ac:	f7ea f8cc 	bl	aa48 <os_mutex_pend>
    if (rc && rc != OS_NOT_STARTED) {
   208b0:	b108      	cbz	r0, 208b6 <fcb_append+0x56>
   208b2:	2809      	cmp	r0, #9
   208b4:	d14e      	bne.n	20954 <fcb_append+0xf4>
        return FCB_ERR_ARGS;
    }
    active = &fcb->f_active;
    if (active->fe_elem_off + len + cnt > active->fe_area->fa_size) {
   208b6:	6a2b      	ldr	r3, [r5, #32]
   208b8:	4423      	add	r3, r4
   208ba:	46b1      	mov	r9, r6
   208bc:	441e      	add	r6, r3
   208be:	69eb      	ldr	r3, [r5, #28]
   208c0:	689b      	ldr	r3, [r3, #8]
   208c2:	429e      	cmp	r6, r3
   208c4:	d923      	bls.n	2090e <fcb_append+0xae>
        fa = fcb_new_area(fcb, fcb->f_scratch_cnt);
   208c6:	79a9      	ldrb	r1, [r5, #6]
   208c8:	4628      	mov	r0, r5
   208ca:	f7ff ff97 	bl	207fc <fcb_new_area>
        if (!fa || (fa->fa_size <
   208ce:	4682      	mov	sl, r0
   208d0:	2800      	cmp	r0, #0
   208d2:	d03c      	beq.n	2094e <fcb_append+0xee>
   208d4:	6882      	ldr	r2, [r0, #8]
            sizeof(struct fcb_disk_area) + len + cnt)) {
   208d6:	eb04 0309 	add.w	r3, r4, r9
   208da:	3308      	adds	r3, #8
        if (!fa || (fa->fa_size <
   208dc:	429a      	cmp	r2, r3
   208de:	d206      	bcs.n	208ee <fcb_append+0x8e>
            rc = FCB_ERR_NOSPACE;
   208e0:	f06f 0603 	mvn.w	r6, #3
   208e4:	e01d      	b.n	20922 <fcb_append+0xc2>
        return len;
   208e6:	b2b6      	uxth	r6, r6
   208e8:	e7ce      	b.n	20888 <fcb_append+0x28>
   208ea:	2401      	movs	r4, #1
   208ec:	e7d7      	b.n	2089e <fcb_append+0x3e>
            goto err;
        }
        rc = fcb_sector_hdr_init(fcb, fa, fcb->f_active_id + 1);
   208ee:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
   208f0:	3201      	adds	r2, #1
   208f2:	b292      	uxth	r2, r2
   208f4:	4601      	mov	r1, r0
   208f6:	4628      	mov	r0, r5
   208f8:	f7ff feae 	bl	20658 <fcb_sector_hdr_init>
        if (rc) {
   208fc:	4606      	mov	r6, r0
   208fe:	b980      	cbnz	r0, 20922 <fcb_append+0xc2>
            goto err;
        }
        fcb->f_active.fe_area = fa;
   20900:	f8c5 a01c 	str.w	sl, [r5, #28]
        fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   20904:	2308      	movs	r3, #8
   20906:	622b      	str	r3, [r5, #32]
        fcb->f_active_id++;
   20908:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
   2090a:	3301      	adds	r3, #1
   2090c:	85ab      	strh	r3, [r5, #44]	; 0x2c
    }

    rc = flash_area_write(active->fe_area, active->fe_elem_off, tmp_str, cnt);
   2090e:	464b      	mov	r3, r9
   20910:	aa01      	add	r2, sp, #4
   20912:	6a29      	ldr	r1, [r5, #32]
   20914:	69e8      	ldr	r0, [r5, #28]
   20916:	f7fd fcc5 	bl	1e2a4 <flash_area_write>
    if (rc) {
   2091a:	4606      	mov	r6, r0
   2091c:	b140      	cbz	r0, 20930 <fcb_append+0xd0>
        rc = FCB_ERR_FLASH;
   2091e:	f06f 0601 	mvn.w	r6, #1

    os_mutex_release(&fcb->f_mtx);

    return FCB_OK;
err:
    os_mutex_release(&fcb->f_mtx);
   20922:	4640      	mov	r0, r8
   20924:	f7ea f834 	bl	a990 <os_mutex_release>
    return rc;
}
   20928:	4630      	mov	r0, r6
   2092a:	b002      	add	sp, #8
   2092c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    append_loc->fe_area = active->fe_area;
   20930:	69eb      	ldr	r3, [r5, #28]
   20932:	603b      	str	r3, [r7, #0]
    append_loc->fe_elem_off = active->fe_elem_off;
   20934:	6a2b      	ldr	r3, [r5, #32]
   20936:	607b      	str	r3, [r7, #4]
    append_loc->fe_data_off = active->fe_elem_off + cnt;
   20938:	444b      	add	r3, r9
   2093a:	60bb      	str	r3, [r7, #8]
    active->fe_elem_off = append_loc->fe_data_off + len;
   2093c:	4423      	add	r3, r4
   2093e:	622b      	str	r3, [r5, #32]
    active->fe_data_off = append_loc->fe_data_off;
   20940:	68bb      	ldr	r3, [r7, #8]
   20942:	626b      	str	r3, [r5, #36]	; 0x24
    active->fe_data_len = len;
   20944:	852c      	strh	r4, [r5, #40]	; 0x28
    os_mutex_release(&fcb->f_mtx);
   20946:	4640      	mov	r0, r8
   20948:	f7ea f822 	bl	a990 <os_mutex_release>
    return FCB_OK;
   2094c:	e7ec      	b.n	20928 <fcb_append+0xc8>
            rc = FCB_ERR_NOSPACE;
   2094e:	f06f 0603 	mvn.w	r6, #3
   20952:	e7e6      	b.n	20922 <fcb_append+0xc2>
        return FCB_ERR_ARGS;
   20954:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   20958:	e7e6      	b.n	20928 <fcb_append+0xc8>

0002095a <fcb_append_finish>:

int
fcb_append_finish(struct fcb *fcb, struct fcb_entry *loc)
{
   2095a:	b530      	push	{r4, r5, lr}
   2095c:	b083      	sub	sp, #12
   2095e:	4605      	mov	r5, r0
   20960:	460c      	mov	r4, r1
    int rc;
    uint8_t crc8;
    uint32_t off;

    rc = fcb_elem_crc8(fcb, loc, &crc8);
   20962:	f10d 0207 	add.w	r2, sp, #7
   20966:	f000 f818 	bl	2099a <fcb_elem_crc8>
    if (rc) {
   2096a:	b988      	cbnz	r0, 20990 <fcb_append_finish+0x36>
        return rc;
    }
    off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   2096c:	68a0      	ldr	r0, [r4, #8]
   2096e:	89a1      	ldrh	r1, [r4, #12]
    if (fcb->f_align <= 1) {
   20970:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   20974:	2b01      	cmp	r3, #1
   20976:	d903      	bls.n	20980 <fcb_append_finish+0x26>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   20978:	1e5a      	subs	r2, r3, #1
   2097a:	4411      	add	r1, r2
   2097c:	425b      	negs	r3, r3
   2097e:	4019      	ands	r1, r3

    rc = flash_area_write(loc->fe_area, off, &crc8, sizeof(crc8));
   20980:	2301      	movs	r3, #1
   20982:	f10d 0207 	add.w	r2, sp, #7
   20986:	4401      	add	r1, r0
   20988:	6820      	ldr	r0, [r4, #0]
   2098a:	f7fd fc8b 	bl	1e2a4 <flash_area_write>
    if (rc) {
   2098e:	b908      	cbnz	r0, 20994 <fcb_append_finish+0x3a>
        return FCB_ERR_FLASH;
    }
    return 0;
}
   20990:	b003      	add	sp, #12
   20992:	bd30      	pop	{r4, r5, pc}
        return FCB_ERR_FLASH;
   20994:	f06f 0001 	mvn.w	r0, #1
   20998:	e7fa      	b.n	20990 <fcb_append_finish+0x36>

0002099a <fcb_elem_crc8>:
 * Given offset in flash area, fill in rest of the fcb_entry, and crc8 over
 * the data.
 */
int
fcb_elem_crc8(struct fcb *fcb, struct fcb_entry *loc, uint8_t *c8p)
{
   2099a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2099e:	b08b      	sub	sp, #44	; 0x2c
   209a0:	4605      	mov	r5, r0
   209a2:	4688      	mov	r8, r1
   209a4:	4691      	mov	r9, r2
    uint16_t len;
    uint32_t off;
    uint32_t end;
    int rc;

    if (loc->fe_elem_off + 2 > loc->fe_area->fa_size) {
   209a6:	6849      	ldr	r1, [r1, #4]
   209a8:	1c8a      	adds	r2, r1, #2
   209aa:	f8d8 0000 	ldr.w	r0, [r8]
   209ae:	6883      	ldr	r3, [r0, #8]
   209b0:	429a      	cmp	r2, r3
   209b2:	d84a      	bhi.n	20a4a <fcb_elem_crc8+0xb0>
        return FCB_ERR_NOVAR;
    }
    rc = flash_area_read_is_empty(loc->fe_area, loc->fe_elem_off, tmp_str, 2);
   209b4:	2302      	movs	r3, #2
   209b6:	aa02      	add	r2, sp, #8
   209b8:	f7fd fcb9 	bl	1e32e <flash_area_read_is_empty>
    if (rc < 0) {
   209bc:	1e03      	subs	r3, r0, #0
   209be:	db47      	blt.n	20a50 <fcb_elem_crc8+0xb6>
        return FCB_ERR_FLASH;
    } else if (rc == 1) {
   209c0:	2b01      	cmp	r3, #1
   209c2:	d048      	beq.n	20a56 <fcb_elem_crc8+0xbc>
        return FCB_ERR_NOVAR;
    }

    cnt = fcb_get_len(tmp_str, &len);
   209c4:	f10d 0106 	add.w	r1, sp, #6
   209c8:	a802      	add	r0, sp, #8
   209ca:	f7ff fe35 	bl	20638 <fcb_get_len>
   209ce:	4604      	mov	r4, r0
    loc->fe_data_off = loc->fe_elem_off + fcb_len_in_flash(fcb, cnt);
   209d0:	f8d8 1004 	ldr.w	r1, [r8, #4]
    if (fcb->f_align <= 1) {
   209d4:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   209d8:	2b01      	cmp	r3, #1
   209da:	d918      	bls.n	20a0e <fcb_elem_crc8+0x74>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   209dc:	1e5a      	subs	r2, r3, #1
   209de:	fa12 f280 	uxtah	r2, r2, r0
   209e2:	425b      	negs	r3, r3
   209e4:	4013      	ands	r3, r2
   209e6:	440b      	add	r3, r1
   209e8:	f8c8 3008 	str.w	r3, [r8, #8]
    loc->fe_data_len = len;
   209ec:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   209f0:	f8a8 300c 	strh.w	r3, [r8, #12]

    crc8 = crc8_init();
   209f4:	f000 fb00 	bl	20ff8 <crc8_init>
    crc8 = crc8_calc(crc8, tmp_str, cnt);
   209f8:	4622      	mov	r2, r4
   209fa:	a902      	add	r1, sp, #8
   209fc:	f000 fafe 	bl	20ffc <crc8_calc>
   20a00:	4606      	mov	r6, r0

    off = loc->fe_data_off;
   20a02:	f8d8 5008 	ldr.w	r5, [r8, #8]
    end = loc->fe_data_off + len;
   20a06:	f8bd 7006 	ldrh.w	r7, [sp, #6]
   20a0a:	442f      	add	r7, r5
    for (; off < end; off += blk_sz) {
   20a0c:	e010      	b.n	20a30 <fcb_elem_crc8+0x96>
        return len;
   20a0e:	b283      	uxth	r3, r0
   20a10:	e7e9      	b.n	209e6 <fcb_elem_crc8+0x4c>
        blk_sz = end - off;
        if (blk_sz > sizeof(tmp_str)) {
            blk_sz = sizeof(tmp_str);
        }

        rc = flash_area_read(loc->fe_area, off, tmp_str, blk_sz);
   20a12:	4623      	mov	r3, r4
   20a14:	aa02      	add	r2, sp, #8
   20a16:	4629      	mov	r1, r5
   20a18:	f8d8 0000 	ldr.w	r0, [r8]
   20a1c:	f7fd fc2e 	bl	1e27c <flash_area_read>
        if (rc) {
   20a20:	b9e0      	cbnz	r0, 20a5c <fcb_elem_crc8+0xc2>
            return FCB_ERR_FLASH;
        }
        crc8 = crc8_calc(crc8, tmp_str, blk_sz);
   20a22:	4622      	mov	r2, r4
   20a24:	a902      	add	r1, sp, #8
   20a26:	4630      	mov	r0, r6
   20a28:	f000 fae8 	bl	20ffc <crc8_calc>
   20a2c:	4606      	mov	r6, r0
    for (; off < end; off += blk_sz) {
   20a2e:	4425      	add	r5, r4
   20a30:	42bd      	cmp	r5, r7
   20a32:	d204      	bcs.n	20a3e <fcb_elem_crc8+0xa4>
        blk_sz = end - off;
   20a34:	1b7c      	subs	r4, r7, r5
        if (blk_sz > sizeof(tmp_str)) {
   20a36:	2c20      	cmp	r4, #32
   20a38:	d9eb      	bls.n	20a12 <fcb_elem_crc8+0x78>
            blk_sz = sizeof(tmp_str);
   20a3a:	2420      	movs	r4, #32
   20a3c:	e7e9      	b.n	20a12 <fcb_elem_crc8+0x78>
    }
    *c8p = crc8;
   20a3e:	f889 6000 	strb.w	r6, [r9]

    return 0;
   20a42:	2000      	movs	r0, #0
}
   20a44:	b00b      	add	sp, #44	; 0x2c
   20a46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return FCB_ERR_NOVAR;
   20a4a:	f06f 0002 	mvn.w	r0, #2
   20a4e:	e7f9      	b.n	20a44 <fcb_elem_crc8+0xaa>
        return FCB_ERR_FLASH;
   20a50:	f06f 0001 	mvn.w	r0, #1
   20a54:	e7f6      	b.n	20a44 <fcb_elem_crc8+0xaa>
        return FCB_ERR_NOVAR;
   20a56:	f06f 0002 	mvn.w	r0, #2
   20a5a:	e7f3      	b.n	20a44 <fcb_elem_crc8+0xaa>
            return FCB_ERR_FLASH;
   20a5c:	f06f 0001 	mvn.w	r0, #1
   20a60:	e7f0      	b.n	20a44 <fcb_elem_crc8+0xaa>

00020a62 <fcb_elem_info>:

int
fcb_elem_info(struct fcb *fcb, struct fcb_entry *loc)
{
   20a62:	b530      	push	{r4, r5, lr}
   20a64:	b083      	sub	sp, #12
   20a66:	4605      	mov	r5, r0
   20a68:	460c      	mov	r4, r1
    int rc;
    uint8_t crc8;
    uint8_t fl_crc8;
    uint32_t off;

    rc = fcb_elem_crc8(fcb, loc, &crc8);
   20a6a:	f10d 0207 	add.w	r2, sp, #7
   20a6e:	f7ff ff94 	bl	2099a <fcb_elem_crc8>
    if (rc) {
   20a72:	b9b8      	cbnz	r0, 20aa4 <fcb_elem_info+0x42>
        return rc;
    }
    off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   20a74:	68a0      	ldr	r0, [r4, #8]
   20a76:	89a1      	ldrh	r1, [r4, #12]
    if (fcb->f_align <= 1) {
   20a78:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   20a7c:	2b01      	cmp	r3, #1
   20a7e:	d903      	bls.n	20a88 <fcb_elem_info+0x26>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   20a80:	1e5a      	subs	r2, r3, #1
   20a82:	4411      	add	r1, r2
   20a84:	425b      	negs	r3, r3
   20a86:	4019      	ands	r1, r3

    rc = flash_area_read(loc->fe_area, off, &fl_crc8, sizeof(fl_crc8));
   20a88:	2301      	movs	r3, #1
   20a8a:	f10d 0206 	add.w	r2, sp, #6
   20a8e:	4401      	add	r1, r0
   20a90:	6820      	ldr	r0, [r4, #0]
   20a92:	f7fd fbf3 	bl	1e27c <flash_area_read>
    if (rc) {
   20a96:	b938      	cbnz	r0, 20aa8 <fcb_elem_info+0x46>
        return FCB_ERR_FLASH;
    }

    if (fl_crc8 != crc8) {
   20a98:	f89d 2006 	ldrb.w	r2, [sp, #6]
   20a9c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   20aa0:	429a      	cmp	r2, r3
   20aa2:	d104      	bne.n	20aae <fcb_elem_info+0x4c>
        return FCB_ERR_CRC;
    }
    return 0;
}
   20aa4:	b003      	add	sp, #12
   20aa6:	bd30      	pop	{r4, r5, pc}
        return FCB_ERR_FLASH;
   20aa8:	f06f 0001 	mvn.w	r0, #1
   20aac:	e7fa      	b.n	20aa4 <fcb_elem_info+0x42>
        return FCB_ERR_CRC;
   20aae:	f06f 0005 	mvn.w	r0, #5
   20ab2:	e7f7      	b.n	20aa4 <fcb_elem_info+0x42>

00020ab4 <fcb_getnext_in_area>:
#include "fcb/fcb.h"
#include "fcb_priv.h"

int
fcb_getnext_in_area(struct fcb *fcb, struct fcb_entry *loc)
{
   20ab4:	b570      	push	{r4, r5, r6, lr}
   20ab6:	4606      	mov	r6, r0
   20ab8:	460d      	mov	r5, r1
    int rc;

    rc = fcb_elem_info(fcb, loc);
   20aba:	f7ff ffd2 	bl	20a62 <fcb_elem_info>
    if (rc == 0 || rc == FCB_ERR_CRC) {
   20abe:	b170      	cbz	r0, 20ade <fcb_getnext_in_area+0x2a>
   20ac0:	f110 0f06 	cmn.w	r0, #6
   20ac4:	d00b      	beq.n	20ade <fcb_getnext_in_area+0x2a>
                break;
            }
        } while (rc == FCB_ERR_CRC);
    }
    return rc;
}
   20ac6:	bd70      	pop	{r4, r5, r6, pc}
   20ac8:	4259      	negs	r1, r3
   20aca:	400b      	ands	r3, r1
              fcb_len_in_flash(fcb, loc->fe_data_len) +
   20acc:	4413      	add	r3, r2
            loc->fe_elem_off = loc->fe_data_off +
   20ace:	606b      	str	r3, [r5, #4]
            rc = fcb_elem_info(fcb, loc);
   20ad0:	4629      	mov	r1, r5
   20ad2:	4630      	mov	r0, r6
   20ad4:	f7ff ffc5 	bl	20a62 <fcb_elem_info>
            if (rc != FCB_ERR_CRC) {
   20ad8:	f110 0f06 	cmn.w	r0, #6
   20adc:	d1f3      	bne.n	20ac6 <fcb_getnext_in_area+0x12>
            loc->fe_elem_off = loc->fe_data_off +
   20ade:	68ac      	ldr	r4, [r5, #8]
              fcb_len_in_flash(fcb, loc->fe_data_len) +
   20ae0:	89aa      	ldrh	r2, [r5, #12]
    if (fcb->f_align <= 1) {
   20ae2:	f896 302e 	ldrb.w	r3, [r6, #46]	; 0x2e
   20ae6:	2b01      	cmp	r3, #1
   20ae8:	d903      	bls.n	20af2 <fcb_getnext_in_area+0x3e>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   20aea:	1e59      	subs	r1, r3, #1
   20aec:	440a      	add	r2, r1
   20aee:	4259      	negs	r1, r3
   20af0:	400a      	ands	r2, r1
            loc->fe_elem_off = loc->fe_data_off +
   20af2:	4422      	add	r2, r4
    if (fcb->f_align <= 1) {
   20af4:	2b01      	cmp	r3, #1
   20af6:	d8e7      	bhi.n	20ac8 <fcb_getnext_in_area+0x14>
        return len;
   20af8:	2301      	movs	r3, #1
   20afa:	e7e7      	b.n	20acc <fcb_getnext_in_area+0x18>

00020afc <fcb_getnext_area>:

struct flash_area *
fcb_getnext_area(struct fcb *fcb, struct flash_area *fap)
{
   20afc:	4603      	mov	r3, r0
    fap++;
   20afe:	310c      	adds	r1, #12
    if (fap >= &fcb->f_sectors[fcb->f_sector_cnt]) {
   20b00:	6880      	ldr	r0, [r0, #8]
   20b02:	795b      	ldrb	r3, [r3, #5]
   20b04:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   20b08:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   20b0c:	428b      	cmp	r3, r1
   20b0e:	d900      	bls.n	20b12 <fcb_getnext_area+0x16>
    fap++;
   20b10:	4608      	mov	r0, r1
        fap = &fcb->f_sectors[0];
    }
    return fap;
}
   20b12:	4770      	bx	lr

00020b14 <fcb_getnext_nolock>:

int
fcb_getnext_nolock(struct fcb *fcb, struct fcb_entry *loc)
{
   20b14:	b538      	push	{r3, r4, r5, lr}
   20b16:	4605      	mov	r5, r0
   20b18:	460c      	mov	r4, r1
    int rc;

    if (loc->fe_area == NULL) {
   20b1a:	680b      	ldr	r3, [r1, #0]
   20b1c:	b313      	cbz	r3, 20b64 <fcb_getnext_nolock+0x50>
        /*
         * Find the first one we have in flash.
         */
        loc->fe_area = fcb->f_oldest;
    }
    if (loc->fe_elem_off == 0) {
   20b1e:	6863      	ldr	r3, [r4, #4]
   20b20:	bb1b      	cbnz	r3, 20b6a <fcb_getnext_nolock+0x56>
        /*
         * If offset is zero, we serve the first entry from the area.
         */
        loc->fe_elem_off = sizeof(struct fcb_disk_area);
   20b22:	2308      	movs	r3, #8
   20b24:	6063      	str	r3, [r4, #4]
        rc = fcb_elem_info(fcb, loc);
   20b26:	4621      	mov	r1, r4
   20b28:	4628      	mov	r0, r5
   20b2a:	f7ff ff9a 	bl	20a62 <fcb_elem_info>
   20b2e:	4603      	mov	r3, r0
    } else {
        rc = fcb_getnext_in_area(fcb, loc);
    }
    switch (rc) {
   20b30:	f113 0f06 	cmn.w	r3, #6
   20b34:	d01f      	beq.n	20b76 <fcb_getnext_nolock+0x62>
   20b36:	b19b      	cbz	r3, 20b60 <fcb_getnext_nolock+0x4c>
        if (rc != FCB_ERR_CRC) {
            /*
             * Moving to next sector.
             */
next_sector:
            if (loc->fe_area == fcb->f_active.fe_area) {
   20b38:	6821      	ldr	r1, [r4, #0]
   20b3a:	69eb      	ldr	r3, [r5, #28]
   20b3c:	4299      	cmp	r1, r3
   20b3e:	d02a      	beq.n	20b96 <fcb_getnext_nolock+0x82>
                return FCB_ERR_NOVAR;
            }
            loc->fe_area = fcb_getnext_area(fcb, loc->fe_area);
   20b40:	4628      	mov	r0, r5
   20b42:	f7ff ffdb 	bl	20afc <fcb_getnext_area>
   20b46:	6020      	str	r0, [r4, #0]
            loc->fe_elem_off = sizeof(struct fcb_disk_area);
   20b48:	2308      	movs	r3, #8
   20b4a:	6063      	str	r3, [r4, #4]
            rc = fcb_elem_info(fcb, loc);
   20b4c:	4621      	mov	r1, r4
   20b4e:	4628      	mov	r0, r5
   20b50:	f7ff ff87 	bl	20a62 <fcb_elem_info>
   20b54:	4603      	mov	r3, r0
            switch (rc) {
   20b56:	f110 0f06 	cmn.w	r0, #6
   20b5a:	d00c      	beq.n	20b76 <fcb_getnext_nolock+0x62>
   20b5c:	2800      	cmp	r0, #0
   20b5e:	d1eb      	bne.n	20b38 <fcb_getnext_nolock+0x24>
            }
        }
    }

    return 0;
}
   20b60:	4618      	mov	r0, r3
   20b62:	bd38      	pop	{r3, r4, r5, pc}
        loc->fe_area = fcb->f_oldest;
   20b64:	6983      	ldr	r3, [r0, #24]
   20b66:	600b      	str	r3, [r1, #0]
   20b68:	e7d9      	b.n	20b1e <fcb_getnext_nolock+0xa>
        rc = fcb_getnext_in_area(fcb, loc);
   20b6a:	4621      	mov	r1, r4
   20b6c:	4628      	mov	r0, r5
   20b6e:	f7ff ffa1 	bl	20ab4 <fcb_getnext_in_area>
   20b72:	4603      	mov	r3, r0
   20b74:	e7dc      	b.n	20b30 <fcb_getnext_nolock+0x1c>
    while (rc == FCB_ERR_CRC) {
   20b76:	f113 0f06 	cmn.w	r3, #6
   20b7a:	d10a      	bne.n	20b92 <fcb_getnext_nolock+0x7e>
        rc = fcb_getnext_in_area(fcb, loc);
   20b7c:	4621      	mov	r1, r4
   20b7e:	4628      	mov	r0, r5
   20b80:	f7ff ff98 	bl	20ab4 <fcb_getnext_in_area>
        if (rc == 0) {
   20b84:	4603      	mov	r3, r0
   20b86:	2800      	cmp	r0, #0
   20b88:	d0ea      	beq.n	20b60 <fcb_getnext_nolock+0x4c>
        if (rc != FCB_ERR_CRC) {
   20b8a:	f110 0f06 	cmn.w	r0, #6
   20b8e:	d0f2      	beq.n	20b76 <fcb_getnext_nolock+0x62>
next_sector:
   20b90:	e7d2      	b.n	20b38 <fcb_getnext_nolock+0x24>
    return 0;
   20b92:	2300      	movs	r3, #0
   20b94:	e7e4      	b.n	20b60 <fcb_getnext_nolock+0x4c>
                return FCB_ERR_NOVAR;
   20b96:	f06f 0302 	mvn.w	r3, #2
   20b9a:	e7e1      	b.n	20b60 <fcb_getnext_nolock+0x4c>

00020b9c <fcb_getnext>:

int
fcb_getnext(struct fcb *fcb, struct fcb_entry *loc)
{
   20b9c:	b570      	push	{r4, r5, r6, lr}
   20b9e:	4604      	mov	r4, r0
   20ba0:	460d      	mov	r5, r1
    int rc;

    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   20ba2:	f100 060c 	add.w	r6, r0, #12
   20ba6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20baa:	4630      	mov	r0, r6
   20bac:	f7e9 ff4c 	bl	aa48 <os_mutex_pend>
    if (rc && rc != OS_NOT_STARTED) {
   20bb0:	b108      	cbz	r0, 20bb6 <fcb_getnext+0x1a>
   20bb2:	2809      	cmp	r0, #9
   20bb4:	d109      	bne.n	20bca <fcb_getnext+0x2e>
        return FCB_ERR_ARGS;
    }
    rc = fcb_getnext_nolock(fcb, loc);
   20bb6:	4629      	mov	r1, r5
   20bb8:	4620      	mov	r0, r4
   20bba:	f7ff ffab 	bl	20b14 <fcb_getnext_nolock>
   20bbe:	4604      	mov	r4, r0
    os_mutex_release(&fcb->f_mtx);
   20bc0:	4630      	mov	r0, r6
   20bc2:	f7e9 fee5 	bl	a990 <os_mutex_release>

    return rc;
}
   20bc6:	4620      	mov	r0, r4
   20bc8:	bd70      	pop	{r4, r5, r6, pc}
        return FCB_ERR_ARGS;
   20bca:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   20bce:	e7fa      	b.n	20bc6 <fcb_getnext+0x2a>

00020bd0 <fcb_rotate>:
#include "fcb/fcb.h"
#include "fcb_priv.h"

int
fcb_rotate(struct fcb *fcb)
{
   20bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20bd2:	4604      	mov	r4, r0
    struct flash_area *fap;
    int rc = 0;

    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   20bd4:	f100 050c 	add.w	r5, r0, #12
   20bd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20bdc:	4628      	mov	r0, r5
   20bde:	f7e9 ff33 	bl	aa48 <os_mutex_pend>
    if (rc && rc != OS_NOT_STARTED) {
   20be2:	b108      	cbz	r0, 20be8 <fcb_rotate+0x18>
   20be4:	2809      	cmp	r0, #9
   20be6:	d12c      	bne.n	20c42 <fcb_rotate+0x72>
        return FCB_ERR_ARGS;
    }

    rc = flash_area_erase(fcb->f_oldest, 0, fcb->f_oldest->fa_size);
   20be8:	69a0      	ldr	r0, [r4, #24]
   20bea:	6882      	ldr	r2, [r0, #8]
   20bec:	2100      	movs	r1, #0
   20bee:	f7fd fb6d 	bl	1e2cc <flash_area_erase>
    if (rc) {
   20bf2:	4606      	mov	r6, r0
   20bf4:	bb10      	cbnz	r0, 20c3c <fcb_rotate+0x6c>
        rc = FCB_ERR_FLASH;
        goto out;
    }
    if (fcb->f_oldest == fcb->f_active.fe_area) {
   20bf6:	69a1      	ldr	r1, [r4, #24]
   20bf8:	69e3      	ldr	r3, [r4, #28]
   20bfa:	4299      	cmp	r1, r3
   20bfc:	d009      	beq.n	20c12 <fcb_rotate+0x42>
        }
        fcb->f_active.fe_area = fap;
        fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
        fcb->f_active_id++;
    }
    fcb->f_oldest = fcb_getnext_area(fcb, fcb->f_oldest);
   20bfe:	69a1      	ldr	r1, [r4, #24]
   20c00:	4620      	mov	r0, r4
   20c02:	f7ff ff7b 	bl	20afc <fcb_getnext_area>
   20c06:	61a0      	str	r0, [r4, #24]
out:
    os_mutex_release(&fcb->f_mtx);
   20c08:	4628      	mov	r0, r5
   20c0a:	f7e9 fec1 	bl	a990 <os_mutex_release>
    return rc;
}
   20c0e:	4630      	mov	r0, r6
   20c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        fap = fcb_getnext_area(fcb, fcb->f_oldest);
   20c12:	4620      	mov	r0, r4
   20c14:	f7ff ff72 	bl	20afc <fcb_getnext_area>
   20c18:	4607      	mov	r7, r0
        rc = fcb_sector_hdr_init(fcb, fap, fcb->f_active_id + 1);
   20c1a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   20c1c:	3201      	adds	r2, #1
   20c1e:	b292      	uxth	r2, r2
   20c20:	4601      	mov	r1, r0
   20c22:	4620      	mov	r0, r4
   20c24:	f7ff fd18 	bl	20658 <fcb_sector_hdr_init>
        if (rc) {
   20c28:	4606      	mov	r6, r0
   20c2a:	2800      	cmp	r0, #0
   20c2c:	d1ec      	bne.n	20c08 <fcb_rotate+0x38>
        fcb->f_active.fe_area = fap;
   20c2e:	61e7      	str	r7, [r4, #28]
        fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   20c30:	2308      	movs	r3, #8
   20c32:	6223      	str	r3, [r4, #32]
        fcb->f_active_id++;
   20c34:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   20c36:	3301      	adds	r3, #1
   20c38:	85a3      	strh	r3, [r4, #44]	; 0x2c
   20c3a:	e7e0      	b.n	20bfe <fcb_rotate+0x2e>
        rc = FCB_ERR_FLASH;
   20c3c:	f06f 0601 	mvn.w	r6, #1
   20c40:	e7e2      	b.n	20c08 <fcb_rotate+0x38>
        return FCB_ERR_ARGS;
   20c42:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   20c46:	e7e2      	b.n	20c0e <fcb_rotate+0x3e>

00020c48 <fcb_walk>:
 * Call 'cb' for every element in flash circular buffer. If fap is specified,
 * only elements with that flash_area are reported.
 */
int
fcb_walk(struct fcb *fcb, struct flash_area *fap, fcb_walk_cb cb, void *cb_arg)
{
   20c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20c4c:	b084      	sub	sp, #16
   20c4e:	4606      	mov	r6, r0
   20c50:	460d      	mov	r5, r1
   20c52:	4617      	mov	r7, r2
   20c54:	4698      	mov	r8, r3
    struct fcb_entry loc;
    int rc;

    loc.fe_area = fap;
   20c56:	9100      	str	r1, [sp, #0]
    loc.fe_elem_off = 0;
   20c58:	2300      	movs	r3, #0
   20c5a:	9301      	str	r3, [sp, #4]

    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   20c5c:	f100 040c 	add.w	r4, r0, #12
   20c60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20c64:	4620      	mov	r0, r4
   20c66:	f7e9 feef 	bl	aa48 <os_mutex_pend>
    if (rc && rc != OS_NOT_STARTED) {
   20c6a:	b170      	cbz	r0, 20c8a <fcb_walk+0x42>
   20c6c:	2809      	cmp	r0, #9
   20c6e:	d00c      	beq.n	20c8a <fcb_walk+0x42>
        return FCB_ERR_ARGS;
   20c70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20c74:	e01e      	b.n	20cb4 <fcb_walk+0x6c>
    while ((rc = fcb_getnext_nolock(fcb, &loc)) != FCB_ERR_NOVAR) {
        os_mutex_release(&fcb->f_mtx);
        if (fap && loc.fe_area != fap) {
            return 0;
        }
        rc = cb(&loc, cb_arg);
   20c76:	4641      	mov	r1, r8
   20c78:	4668      	mov	r0, sp
   20c7a:	47b8      	blx	r7
        if (rc) {
   20c7c:	4603      	mov	r3, r0
   20c7e:	b9c8      	cbnz	r0, 20cb4 <fcb_walk+0x6c>
            return rc;
        }
        os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   20c80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20c84:	4620      	mov	r0, r4
   20c86:	f7e9 fedf 	bl	aa48 <os_mutex_pend>
    while ((rc = fcb_getnext_nolock(fcb, &loc)) != FCB_ERR_NOVAR) {
   20c8a:	4669      	mov	r1, sp
   20c8c:	4630      	mov	r0, r6
   20c8e:	f7ff ff41 	bl	20b14 <fcb_getnext_nolock>
   20c92:	f110 0f03 	cmn.w	r0, #3
   20c96:	d009      	beq.n	20cac <fcb_walk+0x64>
        os_mutex_release(&fcb->f_mtx);
   20c98:	4620      	mov	r0, r4
   20c9a:	f7e9 fe79 	bl	a990 <os_mutex_release>
        if (fap && loc.fe_area != fap) {
   20c9e:	2d00      	cmp	r5, #0
   20ca0:	d0e9      	beq.n	20c76 <fcb_walk+0x2e>
   20ca2:	9800      	ldr	r0, [sp, #0]
   20ca4:	42a8      	cmp	r0, r5
   20ca6:	d0e6      	beq.n	20c76 <fcb_walk+0x2e>
            return 0;
   20ca8:	2300      	movs	r3, #0
   20caa:	e003      	b.n	20cb4 <fcb_walk+0x6c>
    }
    os_mutex_release(&fcb->f_mtx);
   20cac:	4620      	mov	r0, r4
   20cae:	f7e9 fe6f 	bl	a990 <os_mutex_release>
    return 0;
   20cb2:	2300      	movs	r3, #0
}
   20cb4:	4618      	mov	r0, r3
   20cb6:	b004      	add	sp, #16
   20cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00020cbc <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
   20cbc:	6843      	ldr	r3, [r0, #4]
   20cbe:	428b      	cmp	r3, r1
   20cc0:	d805      	bhi.n	20cce <hal_flash_check_addr+0x12>
   20cc2:	6882      	ldr	r2, [r0, #8]
   20cc4:	4413      	add	r3, r2
   20cc6:	428b      	cmp	r3, r1
   20cc8:	d304      	bcc.n	20cd4 <hal_flash_check_addr+0x18>
        return SYS_EINVAL;
    }
    return 0;
   20cca:	2000      	movs	r0, #0
   20ccc:	4770      	bx	lr
        return SYS_EINVAL;
   20cce:	f06f 0001 	mvn.w	r0, #1
   20cd2:	4770      	bx	lr
   20cd4:	f06f 0001 	mvn.w	r0, #1
}
   20cd8:	4770      	bx	lr

00020cda <hal_flash_init>:
{
   20cda:	b538      	push	{r3, r4, r5, lr}
    int rc = 0;
   20cdc:	2500      	movs	r5, #0
    for (i = 0; ; i++) {
   20cde:	462c      	mov	r4, r5
   20ce0:	e001      	b.n	20ce6 <hal_flash_init+0xc>
   20ce2:	3401      	adds	r4, #1
   20ce4:	b2e4      	uxtb	r4, r4
        hf = hal_bsp_flash_dev(i);
   20ce6:	4620      	mov	r0, r4
   20ce8:	f7f2 fe6a 	bl	139c0 <hal_bsp_flash_dev>
        if (!hf) {
   20cec:	b138      	cbz	r0, 20cfe <hal_flash_init+0x24>
        if (hf->hf_itf->hff_init(hf)) {
   20cee:	6802      	ldr	r2, [r0, #0]
   20cf0:	6952      	ldr	r2, [r2, #20]
   20cf2:	4790      	blx	r2
   20cf4:	2800      	cmp	r0, #0
   20cf6:	d0f4      	beq.n	20ce2 <hal_flash_init+0x8>
            rc = SYS_EIO;
   20cf8:	f06f 0504 	mvn.w	r5, #4
   20cfc:	e7f1      	b.n	20ce2 <hal_flash_init+0x8>
}
   20cfe:	4628      	mov	r0, r5
   20d00:	bd38      	pop	{r3, r4, r5, pc}

00020d02 <hal_flash_align>:
{
   20d02:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
   20d04:	f7f2 fe5c 	bl	139c0 <hal_bsp_flash_dev>
    if (!hf) {
   20d08:	b108      	cbz	r0, 20d0e <hal_flash_align+0xc>
    return hf->hf_align;
   20d0a:	7c00      	ldrb	r0, [r0, #16]
}
   20d0c:	bd08      	pop	{r3, pc}
        return 1;
   20d0e:	2001      	movs	r0, #1
   20d10:	e7fc      	b.n	20d0c <hal_flash_align+0xa>

00020d12 <hal_flash_erased_val>:
{
   20d12:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
   20d14:	f7f2 fe54 	bl	139c0 <hal_bsp_flash_dev>
    if (!hf) {
   20d18:	b108      	cbz	r0, 20d1e <hal_flash_erased_val+0xc>
    return hf->hf_erased_val;
   20d1a:	7d00      	ldrb	r0, [r0, #20]
}
   20d1c:	bd08      	pop	{r3, pc}
        return 1;
   20d1e:	2001      	movs	r0, #1
   20d20:	e7fc      	b.n	20d1c <hal_flash_erased_val+0xa>

00020d22 <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
   20d22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20d26:	460c      	mov	r4, r1
   20d28:	4617      	mov	r7, r2
   20d2a:	461d      	mov	r5, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   20d2c:	f7f2 fe48 	bl	139c0 <hal_bsp_flash_dev>
    if (!hf) {
   20d30:	b1a0      	cbz	r0, 20d5c <hal_flash_read+0x3a>
   20d32:	4606      	mov	r6, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   20d34:	4621      	mov	r1, r4
   20d36:	f7ff ffc1 	bl	20cbc <hal_flash_check_addr>
   20d3a:	b990      	cbnz	r0, 20d62 <hal_flash_read+0x40>
      hal_flash_check_addr(hf, address + num_bytes)) {
   20d3c:	1961      	adds	r1, r4, r5
   20d3e:	4630      	mov	r0, r6
   20d40:	f7ff ffbc 	bl	20cbc <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   20d44:	b980      	cbnz	r0, 20d68 <hal_flash_read+0x46>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
   20d46:	6833      	ldr	r3, [r6, #0]
   20d48:	f8d3 8000 	ldr.w	r8, [r3]
   20d4c:	462b      	mov	r3, r5
   20d4e:	463a      	mov	r2, r7
   20d50:	4621      	mov	r1, r4
   20d52:	4630      	mov	r0, r6
   20d54:	47c0      	blx	r8
    if (rc != 0) {
   20d56:	b950      	cbnz	r0, 20d6e <hal_flash_read+0x4c>
        return SYS_EIO;
    }

    return 0;
}
   20d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
   20d5c:	f06f 0001 	mvn.w	r0, #1
   20d60:	e7fa      	b.n	20d58 <hal_flash_read+0x36>
        return SYS_EINVAL;
   20d62:	f06f 0001 	mvn.w	r0, #1
   20d66:	e7f7      	b.n	20d58 <hal_flash_read+0x36>
   20d68:	f06f 0001 	mvn.w	r0, #1
   20d6c:	e7f4      	b.n	20d58 <hal_flash_read+0x36>
        return SYS_EIO;
   20d6e:	f06f 0004 	mvn.w	r0, #4
   20d72:	e7f1      	b.n	20d58 <hal_flash_read+0x36>

00020d74 <hal_flash_write>:
#endif

int
hal_flash_write(uint8_t id, uint32_t address, const void *src,
  uint32_t num_bytes)
{
   20d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20d78:	4604      	mov	r4, r0
   20d7a:	460d      	mov	r5, r1
   20d7c:	4690      	mov	r8, r2
   20d7e:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   20d80:	f7f2 fe1e 	bl	139c0 <hal_bsp_flash_dev>
    if (!hf) {
   20d84:	b1e8      	cbz	r0, 20dc2 <hal_flash_write+0x4e>
   20d86:	4607      	mov	r7, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   20d88:	4629      	mov	r1, r5
   20d8a:	f7ff ff97 	bl	20cbc <hal_flash_check_addr>
   20d8e:	b9d8      	cbnz	r0, 20dc8 <hal_flash_write+0x54>
      hal_flash_check_addr(hf, address + num_bytes)) {
   20d90:	19a9      	adds	r1, r5, r6
   20d92:	4638      	mov	r0, r7
   20d94:	f7ff ff92 	bl	20cbc <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   20d98:	b9c8      	cbnz	r0, 20dce <hal_flash_write+0x5a>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
   20d9a:	08e3      	lsrs	r3, r4, #3
   20d9c:	4a10      	ldr	r2, [pc, #64]	; (20de0 <hal_flash_write+0x6c>)
   20d9e:	5cd0      	ldrb	r0, [r2, r3]
   20da0:	f004 0407 	and.w	r4, r4, #7
   20da4:	fa40 f404 	asr.w	r4, r0, r4
   20da8:	f014 0f01 	tst.w	r4, #1
   20dac:	d112      	bne.n	20dd4 <hal_flash_write+0x60>
        return SYS_EACCES;
    }

    rc = hf->hf_itf->hff_write(hf, address, src, num_bytes);
   20dae:	683b      	ldr	r3, [r7, #0]
   20db0:	685c      	ldr	r4, [r3, #4]
   20db2:	4633      	mov	r3, r6
   20db4:	4642      	mov	r2, r8
   20db6:	4629      	mov	r1, r5
   20db8:	4638      	mov	r0, r7
   20dba:	47a0      	blx	r4
    if (rc != 0) {
   20dbc:	b968      	cbnz	r0, 20dda <hal_flash_write+0x66>
#if MYNEWT_VAL(HAL_FLASH_VERIFY_WRITES)
    assert(hal_flash_cmp(hf, address, src, num_bytes) == 0);
#endif

    return 0;
}
   20dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
   20dc2:	f06f 0001 	mvn.w	r0, #1
   20dc6:	e7fa      	b.n	20dbe <hal_flash_write+0x4a>
        return SYS_EINVAL;
   20dc8:	f06f 0001 	mvn.w	r0, #1
   20dcc:	e7f7      	b.n	20dbe <hal_flash_write+0x4a>
   20dce:	f06f 0001 	mvn.w	r0, #1
   20dd2:	e7f4      	b.n	20dbe <hal_flash_write+0x4a>
        return SYS_EACCES;
   20dd4:	f06f 0006 	mvn.w	r0, #6
   20dd8:	e7f1      	b.n	20dbe <hal_flash_write+0x4a>
        return SYS_EIO;
   20dda:	f06f 0004 	mvn.w	r0, #4
   20dde:	e7ee      	b.n	20dbe <hal_flash_write+0x4a>
   20de0:	20004a94 	.word	0x20004a94

00020de4 <hal_flash_erase>:
    return 0;
}

int
hal_flash_erase(uint8_t id, uint32_t address, uint32_t num_bytes)
{
   20de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20de8:	b082      	sub	sp, #8
   20dea:	4605      	mov	r5, r0
   20dec:	460e      	mov	r6, r1
   20dee:	4691      	mov	r9, r2
    uint32_t end;
    uint32_t end_area;
    int i;
    int rc;

    hf = hal_bsp_flash_dev(id);
   20df0:	f7f2 fde6 	bl	139c0 <hal_bsp_flash_dev>
    if (!hf) {
   20df4:	2800      	cmp	r0, #0
   20df6:	d049      	beq.n	20e8c <hal_flash_erase+0xa8>
   20df8:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   20dfa:	4631      	mov	r1, r6
   20dfc:	f7ff ff5e 	bl	20cbc <hal_flash_check_addr>
   20e00:	2800      	cmp	r0, #0
   20e02:	d146      	bne.n	20e92 <hal_flash_erase+0xae>
      hal_flash_check_addr(hf, address + num_bytes)) {
   20e04:	eb06 0809 	add.w	r8, r6, r9
   20e08:	4641      	mov	r1, r8
   20e0a:	4620      	mov	r0, r4
   20e0c:	f7ff ff56 	bl	20cbc <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   20e10:	2800      	cmp	r0, #0
   20e12:	d141      	bne.n	20e98 <hal_flash_erase+0xb4>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
   20e14:	08eb      	lsrs	r3, r5, #3
   20e16:	4a25      	ldr	r2, [pc, #148]	; (20eac <hal_flash_erase+0xc8>)
   20e18:	5cd7      	ldrb	r7, [r2, r3]
   20e1a:	f005 0507 	and.w	r5, r5, #7
   20e1e:	fa47 f505 	asr.w	r5, r7, r5
   20e22:	f015 0a01 	ands.w	sl, r5, #1
   20e26:	d13a      	bne.n	20e9e <hal_flash_erase+0xba>
        return SYS_EACCES;
    }

    end = address + num_bytes;
    if (end <= address) {
   20e28:	45b0      	cmp	r8, r6
   20e2a:	d93b      	bls.n	20ea4 <hal_flash_erase+0xc0>
         * Check for wrap-around.
         */
        return SYS_EINVAL;
    }

    if (hf->hf_itf->hff_erase) {
   20e2c:	6823      	ldr	r3, [r4, #0]
   20e2e:	699b      	ldr	r3, [r3, #24]
   20e30:	b353      	cbz	r3, 20e88 <hal_flash_erase+0xa4>
        hf->hf_itf->hff_erase(hf, address, num_bytes);
   20e32:	464a      	mov	r2, r9
   20e34:	4631      	mov	r1, r6
   20e36:	4620      	mov	r0, r4
   20e38:	4798      	blx	r3
#endif
            }
        }
    }
    return 0;
}
   20e3a:	4650      	mov	r0, sl
   20e3c:	b002      	add	sp, #8
   20e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            assert(rc == 0);
   20e42:	2300      	movs	r3, #0
   20e44:	461a      	mov	r2, r3
   20e46:	4619      	mov	r1, r3
   20e48:	4618      	mov	r0, r3
   20e4a:	f7e8 f88b 	bl	8f64 <__assert_func>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
   20e4e:	3501      	adds	r5, #1
   20e50:	68e3      	ldr	r3, [r4, #12]
   20e52:	42ab      	cmp	r3, r5
   20e54:	ddf1      	ble.n	20e3a <hal_flash_erase+0x56>
            rc = hf->hf_itf->hff_sector_info(hf, i, &start, &size);
   20e56:	6823      	ldr	r3, [r4, #0]
   20e58:	68df      	ldr	r7, [r3, #12]
   20e5a:	466b      	mov	r3, sp
   20e5c:	aa01      	add	r2, sp, #4
   20e5e:	4629      	mov	r1, r5
   20e60:	4620      	mov	r0, r4
   20e62:	47b8      	blx	r7
            assert(rc == 0);
   20e64:	2800      	cmp	r0, #0
   20e66:	d1ec      	bne.n	20e42 <hal_flash_erase+0x5e>
            end_area = start + size;
   20e68:	9901      	ldr	r1, [sp, #4]
   20e6a:	9b00      	ldr	r3, [sp, #0]
   20e6c:	440b      	add	r3, r1
            if (address < end_area && end > start) {
   20e6e:	429e      	cmp	r6, r3
   20e70:	d2ed      	bcs.n	20e4e <hal_flash_erase+0x6a>
   20e72:	4588      	cmp	r8, r1
   20e74:	d9eb      	bls.n	20e4e <hal_flash_erase+0x6a>
                if (hf->hf_itf->hff_erase_sector(hf, start)) {
   20e76:	6823      	ldr	r3, [r4, #0]
   20e78:	689b      	ldr	r3, [r3, #8]
   20e7a:	4620      	mov	r0, r4
   20e7c:	4798      	blx	r3
   20e7e:	2800      	cmp	r0, #0
   20e80:	d0e5      	beq.n	20e4e <hal_flash_erase+0x6a>
                    return SYS_EIO;
   20e82:	f06f 0a04 	mvn.w	sl, #4
   20e86:	e7d8      	b.n	20e3a <hal_flash_erase+0x56>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
   20e88:	4655      	mov	r5, sl
   20e8a:	e7e1      	b.n	20e50 <hal_flash_erase+0x6c>
        return SYS_EINVAL;
   20e8c:	f06f 0a01 	mvn.w	sl, #1
   20e90:	e7d3      	b.n	20e3a <hal_flash_erase+0x56>
        return SYS_EINVAL;
   20e92:	f06f 0a01 	mvn.w	sl, #1
   20e96:	e7d0      	b.n	20e3a <hal_flash_erase+0x56>
   20e98:	f06f 0a01 	mvn.w	sl, #1
   20e9c:	e7cd      	b.n	20e3a <hal_flash_erase+0x56>
        return SYS_EACCES;
   20e9e:	f06f 0a06 	mvn.w	sl, #6
   20ea2:	e7ca      	b.n	20e3a <hal_flash_erase+0x56>
        return SYS_EINVAL;
   20ea4:	f06f 0a01 	mvn.w	sl, #1
   20ea8:	e7c7      	b.n	20e3a <hal_flash_erase+0x56>
   20eaa:	bf00      	nop
   20eac:	20004a94 	.word	0x20004a94

00020eb0 <hal_flash_is_erased>:

int
hal_flash_is_erased(const struct hal_flash *hf, uint32_t address, void *dst,
        uint32_t num_bytes)
{
   20eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20eb2:	4604      	mov	r4, r0
   20eb4:	4616      	mov	r6, r2
   20eb6:	461d      	mov	r5, r3
    uint8_t *buf;
    int rc;

    buf = dst;

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
   20eb8:	6807      	ldr	r7, [r0, #0]
   20eba:	683f      	ldr	r7, [r7, #0]
   20ebc:	47b8      	blx	r7
    if (rc != 0) {
   20ebe:	b968      	cbnz	r0, 20edc <hal_flash_is_erased+0x2c>
        return SYS_EIO;
    }

    for (i = 0; i < num_bytes; i++) {
   20ec0:	2100      	movs	r1, #0
   20ec2:	e000      	b.n	20ec6 <hal_flash_is_erased+0x16>
   20ec4:	3101      	adds	r1, #1
   20ec6:	42a9      	cmp	r1, r5
   20ec8:	d206      	bcs.n	20ed8 <hal_flash_is_erased+0x28>
        if (buf[i] != hf->hf_erased_val) {
   20eca:	f816 e001 	ldrb.w	lr, [r6, r1]
   20ece:	f894 c014 	ldrb.w	ip, [r4, #20]
   20ed2:	45e6      	cmp	lr, ip
   20ed4:	d0f6      	beq.n	20ec4 <hal_flash_is_erased+0x14>
   20ed6:	e000      	b.n	20eda <hal_flash_is_erased+0x2a>
            return 0;
        }
    }
    return 1;
   20ed8:	2001      	movs	r0, #1
}
   20eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return SYS_EIO;
   20edc:	f06f 0004 	mvn.w	r0, #4
   20ee0:	e7fb      	b.n	20eda <hal_flash_is_erased+0x2a>

00020ee2 <hal_flash_isempty>:

int
hal_flash_isempty(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
   20ee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20ee6:	460c      	mov	r4, r1
   20ee8:	4690      	mov	r8, r2
   20eea:	461d      	mov	r5, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   20eec:	f7f2 fd68 	bl	139c0 <hal_bsp_flash_dev>
    if (!hf) {
   20ef0:	b1f8      	cbz	r0, 20f32 <hal_flash_isempty+0x50>
   20ef2:	4606      	mov	r6, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   20ef4:	4621      	mov	r1, r4
   20ef6:	f7ff fee1 	bl	20cbc <hal_flash_check_addr>
   20efa:	b9e8      	cbnz	r0, 20f38 <hal_flash_isempty+0x56>
      hal_flash_check_addr(hf, address + num_bytes)) {
   20efc:	1961      	adds	r1, r4, r5
   20efe:	4630      	mov	r0, r6
   20f00:	f7ff fedc 	bl	20cbc <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   20f04:	b9d8      	cbnz	r0, 20f3e <hal_flash_isempty+0x5c>
        return SYS_EINVAL;
    }
    if (hf->hf_itf->hff_is_empty) {
   20f06:	6833      	ldr	r3, [r6, #0]
   20f08:	691f      	ldr	r7, [r3, #16]
   20f0a:	b15f      	cbz	r7, 20f24 <hal_flash_isempty+0x42>
        rc = hf->hf_itf->hff_is_empty(hf, address, dst, num_bytes);
   20f0c:	462b      	mov	r3, r5
   20f0e:	4642      	mov	r2, r8
   20f10:	4621      	mov	r1, r4
   20f12:	4630      	mov	r0, r6
   20f14:	47b8      	blx	r7
        if (rc < 0) {
   20f16:	2800      	cmp	r0, #0
   20f18:	db01      	blt.n	20f1e <hal_flash_isempty+0x3c>
            return rc;
        }
    } else {
        return hal_flash_is_erased(hf, address, dst, num_bytes);
    }
}
   20f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return SYS_EIO;
   20f1e:	f06f 0004 	mvn.w	r0, #4
   20f22:	e7fa      	b.n	20f1a <hal_flash_isempty+0x38>
        return hal_flash_is_erased(hf, address, dst, num_bytes);
   20f24:	462b      	mov	r3, r5
   20f26:	4642      	mov	r2, r8
   20f28:	4621      	mov	r1, r4
   20f2a:	4630      	mov	r0, r6
   20f2c:	f7ff ffc0 	bl	20eb0 <hal_flash_is_erased>
   20f30:	e7f3      	b.n	20f1a <hal_flash_isempty+0x38>
        return SYS_EINVAL;
   20f32:	f06f 0001 	mvn.w	r0, #1
   20f36:	e7f0      	b.n	20f1a <hal_flash_isempty+0x38>
        return SYS_EINVAL;
   20f38:	f06f 0001 	mvn.w	r0, #1
   20f3c:	e7ed      	b.n	20f1a <hal_flash_isempty+0x38>
   20f3e:	f06f 0001 	mvn.w	r0, #1
   20f42:	e7ea      	b.n	20f1a <hal_flash_isempty+0x38>

00020f44 <hal_flash_isempty_no_buf>:

int
hal_flash_isempty_no_buf(uint8_t id, uint32_t address, uint32_t num_bytes)
{
   20f44:	b5f0      	push	{r4, r5, r6, r7, lr}
   20f46:	b085      	sub	sp, #20
   20f48:	4607      	mov	r7, r0
   20f4a:	460e      	mov	r6, r1
   20f4c:	4615      	mov	r5, r2
    uint32_t blksz;
    uint32_t rem;
    uint32_t off;
    int empty;

    for (off = 0; off < num_bytes; off += sizeof buf) {
   20f4e:	2400      	movs	r4, #0
   20f50:	e007      	b.n	20f62 <hal_flash_isempty_no_buf+0x1e>
        blksz = sizeof buf;
        if (blksz > rem) {
            blksz = rem;
        }

        empty = hal_flash_isempty(id, address + off, buf, blksz);
   20f52:	466a      	mov	r2, sp
   20f54:	19a1      	adds	r1, r4, r6
   20f56:	4638      	mov	r0, r7
   20f58:	f7ff ffc3 	bl	20ee2 <hal_flash_isempty>
        if (empty != 1) {
   20f5c:	2801      	cmp	r0, #1
   20f5e:	d108      	bne.n	20f72 <hal_flash_isempty_no_buf+0x2e>
    for (off = 0; off < num_bytes; off += sizeof buf) {
   20f60:	3410      	adds	r4, #16
   20f62:	42ac      	cmp	r4, r5
   20f64:	d204      	bcs.n	20f70 <hal_flash_isempty_no_buf+0x2c>
        rem = num_bytes - off;
   20f66:	1b2b      	subs	r3, r5, r4
        if (blksz > rem) {
   20f68:	2b0f      	cmp	r3, #15
   20f6a:	d9f2      	bls.n	20f52 <hal_flash_isempty_no_buf+0xe>
        blksz = sizeof buf;
   20f6c:	2310      	movs	r3, #16
   20f6e:	e7f0      	b.n	20f52 <hal_flash_isempty_no_buf+0xe>
            return empty;
        }
    }

    return 1;
   20f70:	2001      	movs	r0, #1
}
   20f72:	b005      	add	sp, #20
   20f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00020f78 <os_malloc_lock>:
static struct os_mutex os_malloc_mutex;
#endif

static void
os_malloc_lock(void)
{
   20f78:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    int rc;

    if (g_os_started) {
   20f7a:	4b08      	ldr	r3, [pc, #32]	; (20f9c <os_malloc_lock+0x24>)
   20f7c:	681b      	ldr	r3, [r3, #0]
   20f7e:	b903      	cbnz	r3, 20f82 <os_malloc_lock+0xa>
        rc = os_mutex_pend(&os_malloc_mutex, 0xffffffff);
        assert(rc == 0);
    }
#endif
}
   20f80:	bd08      	pop	{r3, pc}
        rc = os_mutex_pend(&os_malloc_mutex, 0xffffffff);
   20f82:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20f86:	4806      	ldr	r0, [pc, #24]	; (20fa0 <os_malloc_lock+0x28>)
   20f88:	f7e9 fd5e 	bl	aa48 <os_mutex_pend>
        assert(rc == 0);
   20f8c:	2800      	cmp	r0, #0
   20f8e:	d0f7      	beq.n	20f80 <os_malloc_lock+0x8>
   20f90:	2300      	movs	r3, #0
   20f92:	461a      	mov	r2, r3
   20f94:	4619      	mov	r1, r3
   20f96:	4618      	mov	r0, r3
   20f98:	f7e7 ffe4 	bl	8f64 <__assert_func>
   20f9c:	20002648 	.word	0x20002648
   20fa0:	20004a98 	.word	0x20004a98

00020fa4 <os_malloc_unlock>:

static void
os_malloc_unlock(void)
{
   20fa4:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    int rc;

    if (g_os_started) {
   20fa6:	4b07      	ldr	r3, [pc, #28]	; (20fc4 <os_malloc_unlock+0x20>)
   20fa8:	681b      	ldr	r3, [r3, #0]
   20faa:	b903      	cbnz	r3, 20fae <os_malloc_unlock+0xa>
        rc = os_mutex_release(&os_malloc_mutex);
        assert(rc == 0);
    }
#endif
}
   20fac:	bd08      	pop	{r3, pc}
        rc = os_mutex_release(&os_malloc_mutex);
   20fae:	4806      	ldr	r0, [pc, #24]	; (20fc8 <os_malloc_unlock+0x24>)
   20fb0:	f7e9 fcee 	bl	a990 <os_mutex_release>
        assert(rc == 0);
   20fb4:	2800      	cmp	r0, #0
   20fb6:	d0f9      	beq.n	20fac <os_malloc_unlock+0x8>
   20fb8:	2300      	movs	r3, #0
   20fba:	461a      	mov	r2, r3
   20fbc:	4619      	mov	r1, r3
   20fbe:	4618      	mov	r0, r3
   20fc0:	f7e7 ffd0 	bl	8f64 <__assert_func>
   20fc4:	20002648 	.word	0x20002648
   20fc8:	20004a98 	.word	0x20004a98

00020fcc <os_malloc>:

void *
os_malloc(size_t size)
{
   20fcc:	b510      	push	{r4, lr}
   20fce:	4604      	mov	r4, r0
    void *ptr;

    os_malloc_lock();
   20fd0:	f7ff ffd2 	bl	20f78 <os_malloc_lock>
    ptr = malloc(size);
   20fd4:	4620      	mov	r0, r4
   20fd6:	f7ec fd03 	bl	d9e0 <malloc>
   20fda:	4604      	mov	r4, r0
    os_malloc_unlock();
   20fdc:	f7ff ffe2 	bl	20fa4 <os_malloc_unlock>

    return ptr;
}
   20fe0:	4620      	mov	r0, r4
   20fe2:	bd10      	pop	{r4, pc}

00020fe4 <os_free>:

void
os_free(void *mem)
{
   20fe4:	b510      	push	{r4, lr}
   20fe6:	4604      	mov	r4, r0
    os_malloc_lock();
   20fe8:	f7ff ffc6 	bl	20f78 <os_malloc_lock>
    free(mem);
   20fec:	4620      	mov	r0, r4
   20fee:	f7ec fd2d 	bl	da4c <free>
    os_malloc_unlock();
   20ff2:	f7ff ffd7 	bl	20fa4 <os_malloc_unlock>
}
   20ff6:	bd10      	pop	{r4, pc}

00020ff8 <crc8_init>:

uint8_t
crc8_init(void)
{
    return 0xff;
}
   20ff8:	20ff      	movs	r0, #255	; 0xff
   20ffa:	4770      	bx	lr

00020ffc <crc8_calc>:
crc8_calc(uint8_t val, void *buf, int cnt)
{
	int i;
	uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
   20ffc:	f04f 0c00 	mov.w	ip, #0
   21000:	4594      	cmp	ip, r2
   21002:	da16      	bge.n	21032 <crc8_calc+0x36>
{
   21004:	b410      	push	{r4}
		val ^= p[i];
   21006:	f811 300c 	ldrb.w	r3, [r1, ip]
   2100a:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_small_table[val >> 4];
   2100c:	0918      	lsrs	r0, r3, #4
   2100e:	4c09      	ldr	r4, [pc, #36]	; (21034 <crc8_calc+0x38>)
   21010:	5620      	ldrsb	r0, [r4, r0]
   21012:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
   21016:	b2c3      	uxtb	r3, r0
		val = (val << 4) ^ crc8_small_table[val >> 4];
   21018:	f3c0 1003 	ubfx	r0, r0, #4, #4
   2101c:	5620      	ldrsb	r0, [r4, r0]
   2101e:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
   21022:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
   21024:	f10c 0c01 	add.w	ip, ip, #1
   21028:	4594      	cmp	ip, r2
   2102a:	dbec      	blt.n	21006 <crc8_calc+0xa>
	}
	return val;
}
   2102c:	f85d 4b04 	ldr.w	r4, [sp], #4
   21030:	4770      	bx	lr
   21032:	4770      	bx	lr
   21034:	00024fc4 	.word	0x00024fc4

00021038 <__aeabi_drsub>:
   21038:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   2103c:	e002      	b.n	21044 <__adddf3>
   2103e:	bf00      	nop

00021040 <__aeabi_dsub>:
   21040:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00021044 <__adddf3>:
   21044:	b530      	push	{r4, r5, lr}
   21046:	ea4f 0441 	mov.w	r4, r1, lsl #1
   2104a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   2104e:	ea94 0f05 	teq	r4, r5
   21052:	bf08      	it	eq
   21054:	ea90 0f02 	teqeq	r0, r2
   21058:	bf1f      	itttt	ne
   2105a:	ea54 0c00 	orrsne.w	ip, r4, r0
   2105e:	ea55 0c02 	orrsne.w	ip, r5, r2
   21062:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   21066:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   2106a:	f000 80e2 	beq.w	21232 <__adddf3+0x1ee>
   2106e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   21072:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   21076:	bfb8      	it	lt
   21078:	426d      	neglt	r5, r5
   2107a:	dd0c      	ble.n	21096 <__adddf3+0x52>
   2107c:	442c      	add	r4, r5
   2107e:	ea80 0202 	eor.w	r2, r0, r2
   21082:	ea81 0303 	eor.w	r3, r1, r3
   21086:	ea82 0000 	eor.w	r0, r2, r0
   2108a:	ea83 0101 	eor.w	r1, r3, r1
   2108e:	ea80 0202 	eor.w	r2, r0, r2
   21092:	ea81 0303 	eor.w	r3, r1, r3
   21096:	2d36      	cmp	r5, #54	; 0x36
   21098:	bf88      	it	hi
   2109a:	bd30      	pophi	{r4, r5, pc}
   2109c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   210a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   210a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   210a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   210ac:	d002      	beq.n	210b4 <__adddf3+0x70>
   210ae:	4240      	negs	r0, r0
   210b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   210b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   210b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   210bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   210c0:	d002      	beq.n	210c8 <__adddf3+0x84>
   210c2:	4252      	negs	r2, r2
   210c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   210c8:	ea94 0f05 	teq	r4, r5
   210cc:	f000 80a7 	beq.w	2121e <__adddf3+0x1da>
   210d0:	f1a4 0401 	sub.w	r4, r4, #1
   210d4:	f1d5 0e20 	rsbs	lr, r5, #32
   210d8:	db0d      	blt.n	210f6 <__adddf3+0xb2>
   210da:	fa02 fc0e 	lsl.w	ip, r2, lr
   210de:	fa22 f205 	lsr.w	r2, r2, r5
   210e2:	1880      	adds	r0, r0, r2
   210e4:	f141 0100 	adc.w	r1, r1, #0
   210e8:	fa03 f20e 	lsl.w	r2, r3, lr
   210ec:	1880      	adds	r0, r0, r2
   210ee:	fa43 f305 	asr.w	r3, r3, r5
   210f2:	4159      	adcs	r1, r3
   210f4:	e00e      	b.n	21114 <__adddf3+0xd0>
   210f6:	f1a5 0520 	sub.w	r5, r5, #32
   210fa:	f10e 0e20 	add.w	lr, lr, #32
   210fe:	2a01      	cmp	r2, #1
   21100:	fa03 fc0e 	lsl.w	ip, r3, lr
   21104:	bf28      	it	cs
   21106:	f04c 0c02 	orrcs.w	ip, ip, #2
   2110a:	fa43 f305 	asr.w	r3, r3, r5
   2110e:	18c0      	adds	r0, r0, r3
   21110:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   21114:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   21118:	d507      	bpl.n	2112a <__adddf3+0xe6>
   2111a:	f04f 0e00 	mov.w	lr, #0
   2111e:	f1dc 0c00 	rsbs	ip, ip, #0
   21122:	eb7e 0000 	sbcs.w	r0, lr, r0
   21126:	eb6e 0101 	sbc.w	r1, lr, r1
   2112a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   2112e:	d31b      	bcc.n	21168 <__adddf3+0x124>
   21130:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   21134:	d30c      	bcc.n	21150 <__adddf3+0x10c>
   21136:	0849      	lsrs	r1, r1, #1
   21138:	ea5f 0030 	movs.w	r0, r0, rrx
   2113c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   21140:	f104 0401 	add.w	r4, r4, #1
   21144:	ea4f 5244 	mov.w	r2, r4, lsl #21
   21148:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   2114c:	f080 809a 	bcs.w	21284 <__adddf3+0x240>
   21150:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   21154:	bf08      	it	eq
   21156:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   2115a:	f150 0000 	adcs.w	r0, r0, #0
   2115e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   21162:	ea41 0105 	orr.w	r1, r1, r5
   21166:	bd30      	pop	{r4, r5, pc}
   21168:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   2116c:	4140      	adcs	r0, r0
   2116e:	eb41 0101 	adc.w	r1, r1, r1
   21172:	3c01      	subs	r4, #1
   21174:	bf28      	it	cs
   21176:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   2117a:	d2e9      	bcs.n	21150 <__adddf3+0x10c>
   2117c:	f091 0f00 	teq	r1, #0
   21180:	bf04      	itt	eq
   21182:	4601      	moveq	r1, r0
   21184:	2000      	moveq	r0, #0
   21186:	fab1 f381 	clz	r3, r1
   2118a:	bf08      	it	eq
   2118c:	3320      	addeq	r3, #32
   2118e:	f1a3 030b 	sub.w	r3, r3, #11
   21192:	f1b3 0220 	subs.w	r2, r3, #32
   21196:	da0c      	bge.n	211b2 <__adddf3+0x16e>
   21198:	320c      	adds	r2, #12
   2119a:	dd08      	ble.n	211ae <__adddf3+0x16a>
   2119c:	f102 0c14 	add.w	ip, r2, #20
   211a0:	f1c2 020c 	rsb	r2, r2, #12
   211a4:	fa01 f00c 	lsl.w	r0, r1, ip
   211a8:	fa21 f102 	lsr.w	r1, r1, r2
   211ac:	e00c      	b.n	211c8 <__adddf3+0x184>
   211ae:	f102 0214 	add.w	r2, r2, #20
   211b2:	bfd8      	it	le
   211b4:	f1c2 0c20 	rsble	ip, r2, #32
   211b8:	fa01 f102 	lsl.w	r1, r1, r2
   211bc:	fa20 fc0c 	lsr.w	ip, r0, ip
   211c0:	bfdc      	itt	le
   211c2:	ea41 010c 	orrle.w	r1, r1, ip
   211c6:	4090      	lslle	r0, r2
   211c8:	1ae4      	subs	r4, r4, r3
   211ca:	bfa2      	ittt	ge
   211cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   211d0:	4329      	orrge	r1, r5
   211d2:	bd30      	popge	{r4, r5, pc}
   211d4:	ea6f 0404 	mvn.w	r4, r4
   211d8:	3c1f      	subs	r4, #31
   211da:	da1c      	bge.n	21216 <__adddf3+0x1d2>
   211dc:	340c      	adds	r4, #12
   211de:	dc0e      	bgt.n	211fe <__adddf3+0x1ba>
   211e0:	f104 0414 	add.w	r4, r4, #20
   211e4:	f1c4 0220 	rsb	r2, r4, #32
   211e8:	fa20 f004 	lsr.w	r0, r0, r4
   211ec:	fa01 f302 	lsl.w	r3, r1, r2
   211f0:	ea40 0003 	orr.w	r0, r0, r3
   211f4:	fa21 f304 	lsr.w	r3, r1, r4
   211f8:	ea45 0103 	orr.w	r1, r5, r3
   211fc:	bd30      	pop	{r4, r5, pc}
   211fe:	f1c4 040c 	rsb	r4, r4, #12
   21202:	f1c4 0220 	rsb	r2, r4, #32
   21206:	fa20 f002 	lsr.w	r0, r0, r2
   2120a:	fa01 f304 	lsl.w	r3, r1, r4
   2120e:	ea40 0003 	orr.w	r0, r0, r3
   21212:	4629      	mov	r1, r5
   21214:	bd30      	pop	{r4, r5, pc}
   21216:	fa21 f004 	lsr.w	r0, r1, r4
   2121a:	4629      	mov	r1, r5
   2121c:	bd30      	pop	{r4, r5, pc}
   2121e:	f094 0f00 	teq	r4, #0
   21222:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   21226:	bf06      	itte	eq
   21228:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   2122c:	3401      	addeq	r4, #1
   2122e:	3d01      	subne	r5, #1
   21230:	e74e      	b.n	210d0 <__adddf3+0x8c>
   21232:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   21236:	bf18      	it	ne
   21238:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   2123c:	d029      	beq.n	21292 <__adddf3+0x24e>
   2123e:	ea94 0f05 	teq	r4, r5
   21242:	bf08      	it	eq
   21244:	ea90 0f02 	teqeq	r0, r2
   21248:	d005      	beq.n	21256 <__adddf3+0x212>
   2124a:	ea54 0c00 	orrs.w	ip, r4, r0
   2124e:	bf04      	itt	eq
   21250:	4619      	moveq	r1, r3
   21252:	4610      	moveq	r0, r2
   21254:	bd30      	pop	{r4, r5, pc}
   21256:	ea91 0f03 	teq	r1, r3
   2125a:	bf1e      	ittt	ne
   2125c:	2100      	movne	r1, #0
   2125e:	2000      	movne	r0, #0
   21260:	bd30      	popne	{r4, r5, pc}
   21262:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   21266:	d105      	bne.n	21274 <__adddf3+0x230>
   21268:	0040      	lsls	r0, r0, #1
   2126a:	4149      	adcs	r1, r1
   2126c:	bf28      	it	cs
   2126e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   21272:	bd30      	pop	{r4, r5, pc}
   21274:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   21278:	bf3c      	itt	cc
   2127a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   2127e:	bd30      	popcc	{r4, r5, pc}
   21280:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   21284:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   21288:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   2128c:	f04f 0000 	mov.w	r0, #0
   21290:	bd30      	pop	{r4, r5, pc}
   21292:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   21296:	bf1a      	itte	ne
   21298:	4619      	movne	r1, r3
   2129a:	4610      	movne	r0, r2
   2129c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   212a0:	bf1c      	itt	ne
   212a2:	460b      	movne	r3, r1
   212a4:	4602      	movne	r2, r0
   212a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   212aa:	bf06      	itte	eq
   212ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   212b0:	ea91 0f03 	teqeq	r1, r3
   212b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   212b8:	bd30      	pop	{r4, r5, pc}
   212ba:	bf00      	nop

000212bc <__aeabi_ui2d>:
   212bc:	f090 0f00 	teq	r0, #0
   212c0:	bf04      	itt	eq
   212c2:	2100      	moveq	r1, #0
   212c4:	4770      	bxeq	lr
   212c6:	b530      	push	{r4, r5, lr}
   212c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   212cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   212d0:	f04f 0500 	mov.w	r5, #0
   212d4:	f04f 0100 	mov.w	r1, #0
   212d8:	e750      	b.n	2117c <__adddf3+0x138>
   212da:	bf00      	nop

000212dc <__aeabi_i2d>:
   212dc:	f090 0f00 	teq	r0, #0
   212e0:	bf04      	itt	eq
   212e2:	2100      	moveq	r1, #0
   212e4:	4770      	bxeq	lr
   212e6:	b530      	push	{r4, r5, lr}
   212e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   212ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
   212f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   212f4:	bf48      	it	mi
   212f6:	4240      	negmi	r0, r0
   212f8:	f04f 0100 	mov.w	r1, #0
   212fc:	e73e      	b.n	2117c <__adddf3+0x138>
   212fe:	bf00      	nop

00021300 <__aeabi_f2d>:
   21300:	0042      	lsls	r2, r0, #1
   21302:	ea4f 01e2 	mov.w	r1, r2, asr #3
   21306:	ea4f 0131 	mov.w	r1, r1, rrx
   2130a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   2130e:	bf1f      	itttt	ne
   21310:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   21314:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   21318:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   2131c:	4770      	bxne	lr
   2131e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   21322:	bf08      	it	eq
   21324:	4770      	bxeq	lr
   21326:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   2132a:	bf04      	itt	eq
   2132c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   21330:	4770      	bxeq	lr
   21332:	b530      	push	{r4, r5, lr}
   21334:	f44f 7460 	mov.w	r4, #896	; 0x380
   21338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   2133c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   21340:	e71c      	b.n	2117c <__adddf3+0x138>
   21342:	bf00      	nop

00021344 <__aeabi_ul2d>:
   21344:	ea50 0201 	orrs.w	r2, r0, r1
   21348:	bf08      	it	eq
   2134a:	4770      	bxeq	lr
   2134c:	b530      	push	{r4, r5, lr}
   2134e:	f04f 0500 	mov.w	r5, #0
   21352:	e00a      	b.n	2136a <__aeabi_l2d+0x16>

00021354 <__aeabi_l2d>:
   21354:	ea50 0201 	orrs.w	r2, r0, r1
   21358:	bf08      	it	eq
   2135a:	4770      	bxeq	lr
   2135c:	b530      	push	{r4, r5, lr}
   2135e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   21362:	d502      	bpl.n	2136a <__aeabi_l2d+0x16>
   21364:	4240      	negs	r0, r0
   21366:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   2136a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   2136e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   21372:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   21376:	f43f aed8 	beq.w	2112a <__adddf3+0xe6>
   2137a:	f04f 0203 	mov.w	r2, #3
   2137e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   21382:	bf18      	it	ne
   21384:	3203      	addne	r2, #3
   21386:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   2138a:	bf18      	it	ne
   2138c:	3203      	addne	r2, #3
   2138e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   21392:	f1c2 0320 	rsb	r3, r2, #32
   21396:	fa00 fc03 	lsl.w	ip, r0, r3
   2139a:	fa20 f002 	lsr.w	r0, r0, r2
   2139e:	fa01 fe03 	lsl.w	lr, r1, r3
   213a2:	ea40 000e 	orr.w	r0, r0, lr
   213a6:	fa21 f102 	lsr.w	r1, r1, r2
   213aa:	4414      	add	r4, r2
   213ac:	e6bd      	b.n	2112a <__adddf3+0xe6>
   213ae:	bf00      	nop

000213b0 <__aeabi_dmul>:
   213b0:	b570      	push	{r4, r5, r6, lr}
   213b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   213b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   213ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   213be:	bf1d      	ittte	ne
   213c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   213c4:	ea94 0f0c 	teqne	r4, ip
   213c8:	ea95 0f0c 	teqne	r5, ip
   213cc:	f000 f8de 	bleq	2158c <__aeabi_dmul+0x1dc>
   213d0:	442c      	add	r4, r5
   213d2:	ea81 0603 	eor.w	r6, r1, r3
   213d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   213da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   213de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   213e2:	bf18      	it	ne
   213e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   213e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   213ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   213f0:	d038      	beq.n	21464 <__aeabi_dmul+0xb4>
   213f2:	fba0 ce02 	umull	ip, lr, r0, r2
   213f6:	f04f 0500 	mov.w	r5, #0
   213fa:	fbe1 e502 	umlal	lr, r5, r1, r2
   213fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   21402:	fbe0 e503 	umlal	lr, r5, r0, r3
   21406:	f04f 0600 	mov.w	r6, #0
   2140a:	fbe1 5603 	umlal	r5, r6, r1, r3
   2140e:	f09c 0f00 	teq	ip, #0
   21412:	bf18      	it	ne
   21414:	f04e 0e01 	orrne.w	lr, lr, #1
   21418:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   2141c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   21420:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   21424:	d204      	bcs.n	21430 <__aeabi_dmul+0x80>
   21426:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   2142a:	416d      	adcs	r5, r5
   2142c:	eb46 0606 	adc.w	r6, r6, r6
   21430:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   21434:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   21438:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   2143c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   21440:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   21444:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   21448:	bf88      	it	hi
   2144a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   2144e:	d81e      	bhi.n	2148e <__aeabi_dmul+0xde>
   21450:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   21454:	bf08      	it	eq
   21456:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   2145a:	f150 0000 	adcs.w	r0, r0, #0
   2145e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   21462:	bd70      	pop	{r4, r5, r6, pc}
   21464:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   21468:	ea46 0101 	orr.w	r1, r6, r1
   2146c:	ea40 0002 	orr.w	r0, r0, r2
   21470:	ea81 0103 	eor.w	r1, r1, r3
   21474:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   21478:	bfc2      	ittt	gt
   2147a:	ebd4 050c 	rsbsgt	r5, r4, ip
   2147e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   21482:	bd70      	popgt	{r4, r5, r6, pc}
   21484:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   21488:	f04f 0e00 	mov.w	lr, #0
   2148c:	3c01      	subs	r4, #1
   2148e:	f300 80ab 	bgt.w	215e8 <__aeabi_dmul+0x238>
   21492:	f114 0f36 	cmn.w	r4, #54	; 0x36
   21496:	bfde      	ittt	le
   21498:	2000      	movle	r0, #0
   2149a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   2149e:	bd70      	pople	{r4, r5, r6, pc}
   214a0:	f1c4 0400 	rsb	r4, r4, #0
   214a4:	3c20      	subs	r4, #32
   214a6:	da35      	bge.n	21514 <__aeabi_dmul+0x164>
   214a8:	340c      	adds	r4, #12
   214aa:	dc1b      	bgt.n	214e4 <__aeabi_dmul+0x134>
   214ac:	f104 0414 	add.w	r4, r4, #20
   214b0:	f1c4 0520 	rsb	r5, r4, #32
   214b4:	fa00 f305 	lsl.w	r3, r0, r5
   214b8:	fa20 f004 	lsr.w	r0, r0, r4
   214bc:	fa01 f205 	lsl.w	r2, r1, r5
   214c0:	ea40 0002 	orr.w	r0, r0, r2
   214c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   214c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   214cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   214d0:	fa21 f604 	lsr.w	r6, r1, r4
   214d4:	eb42 0106 	adc.w	r1, r2, r6
   214d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   214dc:	bf08      	it	eq
   214de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   214e2:	bd70      	pop	{r4, r5, r6, pc}
   214e4:	f1c4 040c 	rsb	r4, r4, #12
   214e8:	f1c4 0520 	rsb	r5, r4, #32
   214ec:	fa00 f304 	lsl.w	r3, r0, r4
   214f0:	fa20 f005 	lsr.w	r0, r0, r5
   214f4:	fa01 f204 	lsl.w	r2, r1, r4
   214f8:	ea40 0002 	orr.w	r0, r0, r2
   214fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   21500:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   21504:	f141 0100 	adc.w	r1, r1, #0
   21508:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   2150c:	bf08      	it	eq
   2150e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   21512:	bd70      	pop	{r4, r5, r6, pc}
   21514:	f1c4 0520 	rsb	r5, r4, #32
   21518:	fa00 f205 	lsl.w	r2, r0, r5
   2151c:	ea4e 0e02 	orr.w	lr, lr, r2
   21520:	fa20 f304 	lsr.w	r3, r0, r4
   21524:	fa01 f205 	lsl.w	r2, r1, r5
   21528:	ea43 0302 	orr.w	r3, r3, r2
   2152c:	fa21 f004 	lsr.w	r0, r1, r4
   21530:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   21534:	fa21 f204 	lsr.w	r2, r1, r4
   21538:	ea20 0002 	bic.w	r0, r0, r2
   2153c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   21540:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   21544:	bf08      	it	eq
   21546:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   2154a:	bd70      	pop	{r4, r5, r6, pc}
   2154c:	f094 0f00 	teq	r4, #0
   21550:	d10f      	bne.n	21572 <__aeabi_dmul+0x1c2>
   21552:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   21556:	0040      	lsls	r0, r0, #1
   21558:	eb41 0101 	adc.w	r1, r1, r1
   2155c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   21560:	bf08      	it	eq
   21562:	3c01      	subeq	r4, #1
   21564:	d0f7      	beq.n	21556 <__aeabi_dmul+0x1a6>
   21566:	ea41 0106 	orr.w	r1, r1, r6
   2156a:	f095 0f00 	teq	r5, #0
   2156e:	bf18      	it	ne
   21570:	4770      	bxne	lr
   21572:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   21576:	0052      	lsls	r2, r2, #1
   21578:	eb43 0303 	adc.w	r3, r3, r3
   2157c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   21580:	bf08      	it	eq
   21582:	3d01      	subeq	r5, #1
   21584:	d0f7      	beq.n	21576 <__aeabi_dmul+0x1c6>
   21586:	ea43 0306 	orr.w	r3, r3, r6
   2158a:	4770      	bx	lr
   2158c:	ea94 0f0c 	teq	r4, ip
   21590:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   21594:	bf18      	it	ne
   21596:	ea95 0f0c 	teqne	r5, ip
   2159a:	d00c      	beq.n	215b6 <__aeabi_dmul+0x206>
   2159c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   215a0:	bf18      	it	ne
   215a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   215a6:	d1d1      	bne.n	2154c <__aeabi_dmul+0x19c>
   215a8:	ea81 0103 	eor.w	r1, r1, r3
   215ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   215b0:	f04f 0000 	mov.w	r0, #0
   215b4:	bd70      	pop	{r4, r5, r6, pc}
   215b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   215ba:	bf06      	itte	eq
   215bc:	4610      	moveq	r0, r2
   215be:	4619      	moveq	r1, r3
   215c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   215c4:	d019      	beq.n	215fa <__aeabi_dmul+0x24a>
   215c6:	ea94 0f0c 	teq	r4, ip
   215ca:	d102      	bne.n	215d2 <__aeabi_dmul+0x222>
   215cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   215d0:	d113      	bne.n	215fa <__aeabi_dmul+0x24a>
   215d2:	ea95 0f0c 	teq	r5, ip
   215d6:	d105      	bne.n	215e4 <__aeabi_dmul+0x234>
   215d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   215dc:	bf1c      	itt	ne
   215de:	4610      	movne	r0, r2
   215e0:	4619      	movne	r1, r3
   215e2:	d10a      	bne.n	215fa <__aeabi_dmul+0x24a>
   215e4:	ea81 0103 	eor.w	r1, r1, r3
   215e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   215ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   215f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   215f4:	f04f 0000 	mov.w	r0, #0
   215f8:	bd70      	pop	{r4, r5, r6, pc}
   215fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   215fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   21602:	bd70      	pop	{r4, r5, r6, pc}

00021604 <__aeabi_ddiv>:
   21604:	b570      	push	{r4, r5, r6, lr}
   21606:	f04f 0cff 	mov.w	ip, #255	; 0xff
   2160a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   2160e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   21612:	bf1d      	ittte	ne
   21614:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   21618:	ea94 0f0c 	teqne	r4, ip
   2161c:	ea95 0f0c 	teqne	r5, ip
   21620:	f000 f8a7 	bleq	21772 <__aeabi_ddiv+0x16e>
   21624:	eba4 0405 	sub.w	r4, r4, r5
   21628:	ea81 0e03 	eor.w	lr, r1, r3
   2162c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   21630:	ea4f 3101 	mov.w	r1, r1, lsl #12
   21634:	f000 8088 	beq.w	21748 <__aeabi_ddiv+0x144>
   21638:	ea4f 3303 	mov.w	r3, r3, lsl #12
   2163c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   21640:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   21644:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   21648:	ea4f 2202 	mov.w	r2, r2, lsl #8
   2164c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   21650:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   21654:	ea4f 2600 	mov.w	r6, r0, lsl #8
   21658:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   2165c:	429d      	cmp	r5, r3
   2165e:	bf08      	it	eq
   21660:	4296      	cmpeq	r6, r2
   21662:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   21666:	f504 7440 	add.w	r4, r4, #768	; 0x300
   2166a:	d202      	bcs.n	21672 <__aeabi_ddiv+0x6e>
   2166c:	085b      	lsrs	r3, r3, #1
   2166e:	ea4f 0232 	mov.w	r2, r2, rrx
   21672:	1ab6      	subs	r6, r6, r2
   21674:	eb65 0503 	sbc.w	r5, r5, r3
   21678:	085b      	lsrs	r3, r3, #1
   2167a:	ea4f 0232 	mov.w	r2, r2, rrx
   2167e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   21682:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   21686:	ebb6 0e02 	subs.w	lr, r6, r2
   2168a:	eb75 0e03 	sbcs.w	lr, r5, r3
   2168e:	bf22      	ittt	cs
   21690:	1ab6      	subcs	r6, r6, r2
   21692:	4675      	movcs	r5, lr
   21694:	ea40 000c 	orrcs.w	r0, r0, ip
   21698:	085b      	lsrs	r3, r3, #1
   2169a:	ea4f 0232 	mov.w	r2, r2, rrx
   2169e:	ebb6 0e02 	subs.w	lr, r6, r2
   216a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   216a6:	bf22      	ittt	cs
   216a8:	1ab6      	subcs	r6, r6, r2
   216aa:	4675      	movcs	r5, lr
   216ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   216b0:	085b      	lsrs	r3, r3, #1
   216b2:	ea4f 0232 	mov.w	r2, r2, rrx
   216b6:	ebb6 0e02 	subs.w	lr, r6, r2
   216ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   216be:	bf22      	ittt	cs
   216c0:	1ab6      	subcs	r6, r6, r2
   216c2:	4675      	movcs	r5, lr
   216c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   216c8:	085b      	lsrs	r3, r3, #1
   216ca:	ea4f 0232 	mov.w	r2, r2, rrx
   216ce:	ebb6 0e02 	subs.w	lr, r6, r2
   216d2:	eb75 0e03 	sbcs.w	lr, r5, r3
   216d6:	bf22      	ittt	cs
   216d8:	1ab6      	subcs	r6, r6, r2
   216da:	4675      	movcs	r5, lr
   216dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   216e0:	ea55 0e06 	orrs.w	lr, r5, r6
   216e4:	d018      	beq.n	21718 <__aeabi_ddiv+0x114>
   216e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   216ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   216ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
   216f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   216f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   216fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   216fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   21702:	d1c0      	bne.n	21686 <__aeabi_ddiv+0x82>
   21704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   21708:	d10b      	bne.n	21722 <__aeabi_ddiv+0x11e>
   2170a:	ea41 0100 	orr.w	r1, r1, r0
   2170e:	f04f 0000 	mov.w	r0, #0
   21712:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   21716:	e7b6      	b.n	21686 <__aeabi_ddiv+0x82>
   21718:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   2171c:	bf04      	itt	eq
   2171e:	4301      	orreq	r1, r0
   21720:	2000      	moveq	r0, #0
   21722:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   21726:	bf88      	it	hi
   21728:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   2172c:	f63f aeaf 	bhi.w	2148e <__aeabi_dmul+0xde>
   21730:	ebb5 0c03 	subs.w	ip, r5, r3
   21734:	bf04      	itt	eq
   21736:	ebb6 0c02 	subseq.w	ip, r6, r2
   2173a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   2173e:	f150 0000 	adcs.w	r0, r0, #0
   21742:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   21746:	bd70      	pop	{r4, r5, r6, pc}
   21748:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   2174c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   21750:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   21754:	bfc2      	ittt	gt
   21756:	ebd4 050c 	rsbsgt	r5, r4, ip
   2175a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   2175e:	bd70      	popgt	{r4, r5, r6, pc}
   21760:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   21764:	f04f 0e00 	mov.w	lr, #0
   21768:	3c01      	subs	r4, #1
   2176a:	e690      	b.n	2148e <__aeabi_dmul+0xde>
   2176c:	ea45 0e06 	orr.w	lr, r5, r6
   21770:	e68d      	b.n	2148e <__aeabi_dmul+0xde>
   21772:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   21776:	ea94 0f0c 	teq	r4, ip
   2177a:	bf08      	it	eq
   2177c:	ea95 0f0c 	teqeq	r5, ip
   21780:	f43f af3b 	beq.w	215fa <__aeabi_dmul+0x24a>
   21784:	ea94 0f0c 	teq	r4, ip
   21788:	d10a      	bne.n	217a0 <__aeabi_ddiv+0x19c>
   2178a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   2178e:	f47f af34 	bne.w	215fa <__aeabi_dmul+0x24a>
   21792:	ea95 0f0c 	teq	r5, ip
   21796:	f47f af25 	bne.w	215e4 <__aeabi_dmul+0x234>
   2179a:	4610      	mov	r0, r2
   2179c:	4619      	mov	r1, r3
   2179e:	e72c      	b.n	215fa <__aeabi_dmul+0x24a>
   217a0:	ea95 0f0c 	teq	r5, ip
   217a4:	d106      	bne.n	217b4 <__aeabi_ddiv+0x1b0>
   217a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   217aa:	f43f aefd 	beq.w	215a8 <__aeabi_dmul+0x1f8>
   217ae:	4610      	mov	r0, r2
   217b0:	4619      	mov	r1, r3
   217b2:	e722      	b.n	215fa <__aeabi_dmul+0x24a>
   217b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   217b8:	bf18      	it	ne
   217ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   217be:	f47f aec5 	bne.w	2154c <__aeabi_dmul+0x19c>
   217c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   217c6:	f47f af0d 	bne.w	215e4 <__aeabi_dmul+0x234>
   217ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   217ce:	f47f aeeb 	bne.w	215a8 <__aeabi_dmul+0x1f8>
   217d2:	e712      	b.n	215fa <__aeabi_dmul+0x24a>

000217d4 <__gedf2>:
   217d4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   217d8:	e006      	b.n	217e8 <__cmpdf2+0x4>
   217da:	bf00      	nop

000217dc <__ledf2>:
   217dc:	f04f 0c01 	mov.w	ip, #1
   217e0:	e002      	b.n	217e8 <__cmpdf2+0x4>
   217e2:	bf00      	nop

000217e4 <__cmpdf2>:
   217e4:	f04f 0c01 	mov.w	ip, #1
   217e8:	f84d cd04 	str.w	ip, [sp, #-4]!
   217ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   217f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   217f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   217f8:	bf18      	it	ne
   217fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   217fe:	d01b      	beq.n	21838 <__cmpdf2+0x54>
   21800:	b001      	add	sp, #4
   21802:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   21806:	bf0c      	ite	eq
   21808:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   2180c:	ea91 0f03 	teqne	r1, r3
   21810:	bf02      	ittt	eq
   21812:	ea90 0f02 	teqeq	r0, r2
   21816:	2000      	moveq	r0, #0
   21818:	4770      	bxeq	lr
   2181a:	f110 0f00 	cmn.w	r0, #0
   2181e:	ea91 0f03 	teq	r1, r3
   21822:	bf58      	it	pl
   21824:	4299      	cmppl	r1, r3
   21826:	bf08      	it	eq
   21828:	4290      	cmpeq	r0, r2
   2182a:	bf2c      	ite	cs
   2182c:	17d8      	asrcs	r0, r3, #31
   2182e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   21832:	f040 0001 	orr.w	r0, r0, #1
   21836:	4770      	bx	lr
   21838:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   2183c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   21840:	d102      	bne.n	21848 <__cmpdf2+0x64>
   21842:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   21846:	d107      	bne.n	21858 <__cmpdf2+0x74>
   21848:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   2184c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   21850:	d1d6      	bne.n	21800 <__cmpdf2+0x1c>
   21852:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   21856:	d0d3      	beq.n	21800 <__cmpdf2+0x1c>
   21858:	f85d 0b04 	ldr.w	r0, [sp], #4
   2185c:	4770      	bx	lr
   2185e:	bf00      	nop

00021860 <__aeabi_cdrcmple>:
   21860:	4684      	mov	ip, r0
   21862:	4610      	mov	r0, r2
   21864:	4662      	mov	r2, ip
   21866:	468c      	mov	ip, r1
   21868:	4619      	mov	r1, r3
   2186a:	4663      	mov	r3, ip
   2186c:	e000      	b.n	21870 <__aeabi_cdcmpeq>
   2186e:	bf00      	nop

00021870 <__aeabi_cdcmpeq>:
   21870:	b501      	push	{r0, lr}
   21872:	f7ff ffb7 	bl	217e4 <__cmpdf2>
   21876:	2800      	cmp	r0, #0
   21878:	bf48      	it	mi
   2187a:	f110 0f00 	cmnmi.w	r0, #0
   2187e:	bd01      	pop	{r0, pc}

00021880 <__aeabi_dcmpeq>:
   21880:	f84d ed08 	str.w	lr, [sp, #-8]!
   21884:	f7ff fff4 	bl	21870 <__aeabi_cdcmpeq>
   21888:	bf0c      	ite	eq
   2188a:	2001      	moveq	r0, #1
   2188c:	2000      	movne	r0, #0
   2188e:	f85d fb08 	ldr.w	pc, [sp], #8
   21892:	bf00      	nop

00021894 <__aeabi_dcmplt>:
   21894:	f84d ed08 	str.w	lr, [sp, #-8]!
   21898:	f7ff ffea 	bl	21870 <__aeabi_cdcmpeq>
   2189c:	bf34      	ite	cc
   2189e:	2001      	movcc	r0, #1
   218a0:	2000      	movcs	r0, #0
   218a2:	f85d fb08 	ldr.w	pc, [sp], #8
   218a6:	bf00      	nop

000218a8 <__aeabi_dcmple>:
   218a8:	f84d ed08 	str.w	lr, [sp, #-8]!
   218ac:	f7ff ffe0 	bl	21870 <__aeabi_cdcmpeq>
   218b0:	bf94      	ite	ls
   218b2:	2001      	movls	r0, #1
   218b4:	2000      	movhi	r0, #0
   218b6:	f85d fb08 	ldr.w	pc, [sp], #8
   218ba:	bf00      	nop

000218bc <__aeabi_dcmpge>:
   218bc:	f84d ed08 	str.w	lr, [sp, #-8]!
   218c0:	f7ff ffce 	bl	21860 <__aeabi_cdrcmple>
   218c4:	bf94      	ite	ls
   218c6:	2001      	movls	r0, #1
   218c8:	2000      	movhi	r0, #0
   218ca:	f85d fb08 	ldr.w	pc, [sp], #8
   218ce:	bf00      	nop

000218d0 <__aeabi_dcmpgt>:
   218d0:	f84d ed08 	str.w	lr, [sp, #-8]!
   218d4:	f7ff ffc4 	bl	21860 <__aeabi_cdrcmple>
   218d8:	bf34      	ite	cc
   218da:	2001      	movcc	r0, #1
   218dc:	2000      	movcs	r0, #0
   218de:	f85d fb08 	ldr.w	pc, [sp], #8
   218e2:	bf00      	nop

000218e4 <__aeabi_dcmpun>:
   218e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   218e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   218ec:	d102      	bne.n	218f4 <__aeabi_dcmpun+0x10>
   218ee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   218f2:	d10a      	bne.n	2190a <__aeabi_dcmpun+0x26>
   218f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   218f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   218fc:	d102      	bne.n	21904 <__aeabi_dcmpun+0x20>
   218fe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   21902:	d102      	bne.n	2190a <__aeabi_dcmpun+0x26>
   21904:	f04f 0000 	mov.w	r0, #0
   21908:	4770      	bx	lr
   2190a:	f04f 0001 	mov.w	r0, #1
   2190e:	4770      	bx	lr

00021910 <__aeabi_d2iz>:
   21910:	ea4f 0241 	mov.w	r2, r1, lsl #1
   21914:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   21918:	d215      	bcs.n	21946 <__aeabi_d2iz+0x36>
   2191a:	d511      	bpl.n	21940 <__aeabi_d2iz+0x30>
   2191c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   21920:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   21924:	d912      	bls.n	2194c <__aeabi_d2iz+0x3c>
   21926:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   2192a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   2192e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   21932:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   21936:	fa23 f002 	lsr.w	r0, r3, r2
   2193a:	bf18      	it	ne
   2193c:	4240      	negne	r0, r0
   2193e:	4770      	bx	lr
   21940:	f04f 0000 	mov.w	r0, #0
   21944:	4770      	bx	lr
   21946:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   2194a:	d105      	bne.n	21958 <__aeabi_d2iz+0x48>
   2194c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   21950:	bf08      	it	eq
   21952:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   21956:	4770      	bx	lr
   21958:	f04f 0000 	mov.w	r0, #0
   2195c:	4770      	bx	lr
   2195e:	bf00      	nop

00021960 <__aeabi_d2uiz>:
   21960:	004a      	lsls	r2, r1, #1
   21962:	d211      	bcs.n	21988 <__aeabi_d2uiz+0x28>
   21964:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   21968:	d211      	bcs.n	2198e <__aeabi_d2uiz+0x2e>
   2196a:	d50d      	bpl.n	21988 <__aeabi_d2uiz+0x28>
   2196c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   21970:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   21974:	d40e      	bmi.n	21994 <__aeabi_d2uiz+0x34>
   21976:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   2197a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   2197e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   21982:	fa23 f002 	lsr.w	r0, r3, r2
   21986:	4770      	bx	lr
   21988:	f04f 0000 	mov.w	r0, #0
   2198c:	4770      	bx	lr
   2198e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   21992:	d102      	bne.n	2199a <__aeabi_d2uiz+0x3a>
   21994:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21998:	4770      	bx	lr
   2199a:	f04f 0000 	mov.w	r0, #0
   2199e:	4770      	bx	lr

000219a0 <__aeabi_d2f>:
   219a0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   219a4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   219a8:	bf24      	itt	cs
   219aa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   219ae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   219b2:	d90d      	bls.n	219d0 <__aeabi_d2f+0x30>
   219b4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   219b8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   219bc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   219c0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   219c4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   219c8:	bf08      	it	eq
   219ca:	f020 0001 	biceq.w	r0, r0, #1
   219ce:	4770      	bx	lr
   219d0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   219d4:	d121      	bne.n	21a1a <__aeabi_d2f+0x7a>
   219d6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   219da:	bfbc      	itt	lt
   219dc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   219e0:	4770      	bxlt	lr
   219e2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   219e6:	ea4f 5252 	mov.w	r2, r2, lsr #21
   219ea:	f1c2 0218 	rsb	r2, r2, #24
   219ee:	f1c2 0c20 	rsb	ip, r2, #32
   219f2:	fa10 f30c 	lsls.w	r3, r0, ip
   219f6:	fa20 f002 	lsr.w	r0, r0, r2
   219fa:	bf18      	it	ne
   219fc:	f040 0001 	orrne.w	r0, r0, #1
   21a00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   21a04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   21a08:	fa03 fc0c 	lsl.w	ip, r3, ip
   21a0c:	ea40 000c 	orr.w	r0, r0, ip
   21a10:	fa23 f302 	lsr.w	r3, r3, r2
   21a14:	ea4f 0343 	mov.w	r3, r3, lsl #1
   21a18:	e7cc      	b.n	219b4 <__aeabi_d2f+0x14>
   21a1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   21a1e:	d107      	bne.n	21a30 <__aeabi_d2f+0x90>
   21a20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   21a24:	bf1e      	ittt	ne
   21a26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   21a2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   21a2e:	4770      	bxne	lr
   21a30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   21a34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   21a38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   21a3c:	4770      	bx	lr
   21a3e:	bf00      	nop

00021a40 <__aeabi_ldivmod>:
   21a40:	b97b      	cbnz	r3, 21a62 <__aeabi_ldivmod+0x22>
   21a42:	b972      	cbnz	r2, 21a62 <__aeabi_ldivmod+0x22>
   21a44:	2900      	cmp	r1, #0
   21a46:	bfbe      	ittt	lt
   21a48:	2000      	movlt	r0, #0
   21a4a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   21a4e:	e006      	blt.n	21a5e <__aeabi_ldivmod+0x1e>
   21a50:	bf08      	it	eq
   21a52:	2800      	cmpeq	r0, #0
   21a54:	bf1c      	itt	ne
   21a56:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   21a5a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   21a5e:	f000 ba15 	b.w	21e8c <__aeabi_idiv0>
   21a62:	f1ad 0c08 	sub.w	ip, sp, #8
   21a66:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   21a6a:	2900      	cmp	r1, #0
   21a6c:	db09      	blt.n	21a82 <__aeabi_ldivmod+0x42>
   21a6e:	2b00      	cmp	r3, #0
   21a70:	db1a      	blt.n	21aa8 <__aeabi_ldivmod+0x68>
   21a72:	f000 f8a3 	bl	21bbc <__udivmoddi4>
   21a76:	f8dd e004 	ldr.w	lr, [sp, #4]
   21a7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   21a7e:	b004      	add	sp, #16
   21a80:	4770      	bx	lr
   21a82:	4240      	negs	r0, r0
   21a84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   21a88:	2b00      	cmp	r3, #0
   21a8a:	db1b      	blt.n	21ac4 <__aeabi_ldivmod+0x84>
   21a8c:	f000 f896 	bl	21bbc <__udivmoddi4>
   21a90:	f8dd e004 	ldr.w	lr, [sp, #4]
   21a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   21a98:	b004      	add	sp, #16
   21a9a:	4240      	negs	r0, r0
   21a9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   21aa0:	4252      	negs	r2, r2
   21aa2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   21aa6:	4770      	bx	lr
   21aa8:	4252      	negs	r2, r2
   21aaa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   21aae:	f000 f885 	bl	21bbc <__udivmoddi4>
   21ab2:	f8dd e004 	ldr.w	lr, [sp, #4]
   21ab6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   21aba:	b004      	add	sp, #16
   21abc:	4240      	negs	r0, r0
   21abe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   21ac2:	4770      	bx	lr
   21ac4:	4252      	negs	r2, r2
   21ac6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   21aca:	f000 f877 	bl	21bbc <__udivmoddi4>
   21ace:	f8dd e004 	ldr.w	lr, [sp, #4]
   21ad2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   21ad6:	b004      	add	sp, #16
   21ad8:	4252      	negs	r2, r2
   21ada:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   21ade:	4770      	bx	lr

00021ae0 <__aeabi_uldivmod>:
   21ae0:	b953      	cbnz	r3, 21af8 <__aeabi_uldivmod+0x18>
   21ae2:	b94a      	cbnz	r2, 21af8 <__aeabi_uldivmod+0x18>
   21ae4:	2900      	cmp	r1, #0
   21ae6:	bf08      	it	eq
   21ae8:	2800      	cmpeq	r0, #0
   21aea:	bf1c      	itt	ne
   21aec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   21af0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   21af4:	f000 b9ca 	b.w	21e8c <__aeabi_idiv0>
   21af8:	f1ad 0c08 	sub.w	ip, sp, #8
   21afc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   21b00:	f000 f85c 	bl	21bbc <__udivmoddi4>
   21b04:	f8dd e004 	ldr.w	lr, [sp, #4]
   21b08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   21b0c:	b004      	add	sp, #16
   21b0e:	4770      	bx	lr

00021b10 <__aeabi_d2lz>:
   21b10:	b538      	push	{r3, r4, r5, lr}
   21b12:	2200      	movs	r2, #0
   21b14:	2300      	movs	r3, #0
   21b16:	4604      	mov	r4, r0
   21b18:	460d      	mov	r5, r1
   21b1a:	f7ff febb 	bl	21894 <__aeabi_dcmplt>
   21b1e:	b928      	cbnz	r0, 21b2c <__aeabi_d2lz+0x1c>
   21b20:	4620      	mov	r0, r4
   21b22:	4629      	mov	r1, r5
   21b24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   21b28:	f000 b82a 	b.w	21b80 <__aeabi_d2ulz>
   21b2c:	4620      	mov	r0, r4
   21b2e:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   21b32:	f000 f825 	bl	21b80 <__aeabi_d2ulz>
   21b36:	4240      	negs	r0, r0
   21b38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   21b3c:	bd38      	pop	{r3, r4, r5, pc}
   21b3e:	bf00      	nop

00021b40 <__aeabi_f2ulz>:
   21b40:	b5d0      	push	{r4, r6, r7, lr}
   21b42:	f7ff fbdd 	bl	21300 <__aeabi_f2d>
   21b46:	4b0c      	ldr	r3, [pc, #48]	; (21b78 <__aeabi_f2ulz+0x38>)
   21b48:	2200      	movs	r2, #0
   21b4a:	4606      	mov	r6, r0
   21b4c:	460f      	mov	r7, r1
   21b4e:	f7ff fc2f 	bl	213b0 <__aeabi_dmul>
   21b52:	f7ff ff05 	bl	21960 <__aeabi_d2uiz>
   21b56:	4604      	mov	r4, r0
   21b58:	f7ff fbb0 	bl	212bc <__aeabi_ui2d>
   21b5c:	4b07      	ldr	r3, [pc, #28]	; (21b7c <__aeabi_f2ulz+0x3c>)
   21b5e:	2200      	movs	r2, #0
   21b60:	f7ff fc26 	bl	213b0 <__aeabi_dmul>
   21b64:	4602      	mov	r2, r0
   21b66:	460b      	mov	r3, r1
   21b68:	4630      	mov	r0, r6
   21b6a:	4639      	mov	r1, r7
   21b6c:	f7ff fa68 	bl	21040 <__aeabi_dsub>
   21b70:	f7ff fef6 	bl	21960 <__aeabi_d2uiz>
   21b74:	4621      	mov	r1, r4
   21b76:	bdd0      	pop	{r4, r6, r7, pc}
   21b78:	3df00000 	.word	0x3df00000
   21b7c:	41f00000 	.word	0x41f00000

00021b80 <__aeabi_d2ulz>:
   21b80:	b5d0      	push	{r4, r6, r7, lr}
   21b82:	4b0c      	ldr	r3, [pc, #48]	; (21bb4 <__aeabi_d2ulz+0x34>)
   21b84:	2200      	movs	r2, #0
   21b86:	4606      	mov	r6, r0
   21b88:	460f      	mov	r7, r1
   21b8a:	f7ff fc11 	bl	213b0 <__aeabi_dmul>
   21b8e:	f7ff fee7 	bl	21960 <__aeabi_d2uiz>
   21b92:	4604      	mov	r4, r0
   21b94:	f7ff fb92 	bl	212bc <__aeabi_ui2d>
   21b98:	4b07      	ldr	r3, [pc, #28]	; (21bb8 <__aeabi_d2ulz+0x38>)
   21b9a:	2200      	movs	r2, #0
   21b9c:	f7ff fc08 	bl	213b0 <__aeabi_dmul>
   21ba0:	4602      	mov	r2, r0
   21ba2:	460b      	mov	r3, r1
   21ba4:	4630      	mov	r0, r6
   21ba6:	4639      	mov	r1, r7
   21ba8:	f7ff fa4a 	bl	21040 <__aeabi_dsub>
   21bac:	f7ff fed8 	bl	21960 <__aeabi_d2uiz>
   21bb0:	4621      	mov	r1, r4
   21bb2:	bdd0      	pop	{r4, r6, r7, pc}
   21bb4:	3df00000 	.word	0x3df00000
   21bb8:	41f00000 	.word	0x41f00000

00021bbc <__udivmoddi4>:
   21bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21bc0:	9d08      	ldr	r5, [sp, #32]
   21bc2:	4604      	mov	r4, r0
   21bc4:	468e      	mov	lr, r1
   21bc6:	2b00      	cmp	r3, #0
   21bc8:	d14d      	bne.n	21c66 <__udivmoddi4+0xaa>
   21bca:	428a      	cmp	r2, r1
   21bcc:	4694      	mov	ip, r2
   21bce:	d969      	bls.n	21ca4 <__udivmoddi4+0xe8>
   21bd0:	fab2 f282 	clz	r2, r2
   21bd4:	b152      	cbz	r2, 21bec <__udivmoddi4+0x30>
   21bd6:	fa01 f302 	lsl.w	r3, r1, r2
   21bda:	f1c2 0120 	rsb	r1, r2, #32
   21bde:	fa20 f101 	lsr.w	r1, r0, r1
   21be2:	fa0c fc02 	lsl.w	ip, ip, r2
   21be6:	ea41 0e03 	orr.w	lr, r1, r3
   21bea:	4094      	lsls	r4, r2
   21bec:	ea4f 481c 	mov.w	r8, ip, lsr #16
   21bf0:	0c21      	lsrs	r1, r4, #16
   21bf2:	fbbe f6f8 	udiv	r6, lr, r8
   21bf6:	fa1f f78c 	uxth.w	r7, ip
   21bfa:	fb08 e316 	mls	r3, r8, r6, lr
   21bfe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   21c02:	fb06 f107 	mul.w	r1, r6, r7
   21c06:	4299      	cmp	r1, r3
   21c08:	d90a      	bls.n	21c20 <__udivmoddi4+0x64>
   21c0a:	eb1c 0303 	adds.w	r3, ip, r3
   21c0e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   21c12:	f080 811f 	bcs.w	21e54 <__udivmoddi4+0x298>
   21c16:	4299      	cmp	r1, r3
   21c18:	f240 811c 	bls.w	21e54 <__udivmoddi4+0x298>
   21c1c:	3e02      	subs	r6, #2
   21c1e:	4463      	add	r3, ip
   21c20:	1a5b      	subs	r3, r3, r1
   21c22:	b2a4      	uxth	r4, r4
   21c24:	fbb3 f0f8 	udiv	r0, r3, r8
   21c28:	fb08 3310 	mls	r3, r8, r0, r3
   21c2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   21c30:	fb00 f707 	mul.w	r7, r0, r7
   21c34:	42a7      	cmp	r7, r4
   21c36:	d90a      	bls.n	21c4e <__udivmoddi4+0x92>
   21c38:	eb1c 0404 	adds.w	r4, ip, r4
   21c3c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   21c40:	f080 810a 	bcs.w	21e58 <__udivmoddi4+0x29c>
   21c44:	42a7      	cmp	r7, r4
   21c46:	f240 8107 	bls.w	21e58 <__udivmoddi4+0x29c>
   21c4a:	4464      	add	r4, ip
   21c4c:	3802      	subs	r0, #2
   21c4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   21c52:	1be4      	subs	r4, r4, r7
   21c54:	2600      	movs	r6, #0
   21c56:	b11d      	cbz	r5, 21c60 <__udivmoddi4+0xa4>
   21c58:	40d4      	lsrs	r4, r2
   21c5a:	2300      	movs	r3, #0
   21c5c:	e9c5 4300 	strd	r4, r3, [r5]
   21c60:	4631      	mov	r1, r6
   21c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   21c66:	428b      	cmp	r3, r1
   21c68:	d909      	bls.n	21c7e <__udivmoddi4+0xc2>
   21c6a:	2d00      	cmp	r5, #0
   21c6c:	f000 80ef 	beq.w	21e4e <__udivmoddi4+0x292>
   21c70:	2600      	movs	r6, #0
   21c72:	e9c5 0100 	strd	r0, r1, [r5]
   21c76:	4630      	mov	r0, r6
   21c78:	4631      	mov	r1, r6
   21c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   21c7e:	fab3 f683 	clz	r6, r3
   21c82:	2e00      	cmp	r6, #0
   21c84:	d14a      	bne.n	21d1c <__udivmoddi4+0x160>
   21c86:	428b      	cmp	r3, r1
   21c88:	d302      	bcc.n	21c90 <__udivmoddi4+0xd4>
   21c8a:	4282      	cmp	r2, r0
   21c8c:	f200 80f9 	bhi.w	21e82 <__udivmoddi4+0x2c6>
   21c90:	1a84      	subs	r4, r0, r2
   21c92:	eb61 0303 	sbc.w	r3, r1, r3
   21c96:	2001      	movs	r0, #1
   21c98:	469e      	mov	lr, r3
   21c9a:	2d00      	cmp	r5, #0
   21c9c:	d0e0      	beq.n	21c60 <__udivmoddi4+0xa4>
   21c9e:	e9c5 4e00 	strd	r4, lr, [r5]
   21ca2:	e7dd      	b.n	21c60 <__udivmoddi4+0xa4>
   21ca4:	b902      	cbnz	r2, 21ca8 <__udivmoddi4+0xec>
   21ca6:	deff      	udf	#255	; 0xff
   21ca8:	fab2 f282 	clz	r2, r2
   21cac:	2a00      	cmp	r2, #0
   21cae:	f040 8092 	bne.w	21dd6 <__udivmoddi4+0x21a>
   21cb2:	eba1 010c 	sub.w	r1, r1, ip
   21cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
   21cba:	fa1f fe8c 	uxth.w	lr, ip
   21cbe:	2601      	movs	r6, #1
   21cc0:	0c20      	lsrs	r0, r4, #16
   21cc2:	fbb1 f3f7 	udiv	r3, r1, r7
   21cc6:	fb07 1113 	mls	r1, r7, r3, r1
   21cca:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   21cce:	fb0e f003 	mul.w	r0, lr, r3
   21cd2:	4288      	cmp	r0, r1
   21cd4:	d908      	bls.n	21ce8 <__udivmoddi4+0x12c>
   21cd6:	eb1c 0101 	adds.w	r1, ip, r1
   21cda:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   21cde:	d202      	bcs.n	21ce6 <__udivmoddi4+0x12a>
   21ce0:	4288      	cmp	r0, r1
   21ce2:	f200 80cb 	bhi.w	21e7c <__udivmoddi4+0x2c0>
   21ce6:	4643      	mov	r3, r8
   21ce8:	1a09      	subs	r1, r1, r0
   21cea:	b2a4      	uxth	r4, r4
   21cec:	fbb1 f0f7 	udiv	r0, r1, r7
   21cf0:	fb07 1110 	mls	r1, r7, r0, r1
   21cf4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   21cf8:	fb0e fe00 	mul.w	lr, lr, r0
   21cfc:	45a6      	cmp	lr, r4
   21cfe:	d908      	bls.n	21d12 <__udivmoddi4+0x156>
   21d00:	eb1c 0404 	adds.w	r4, ip, r4
   21d04:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   21d08:	d202      	bcs.n	21d10 <__udivmoddi4+0x154>
   21d0a:	45a6      	cmp	lr, r4
   21d0c:	f200 80bb 	bhi.w	21e86 <__udivmoddi4+0x2ca>
   21d10:	4608      	mov	r0, r1
   21d12:	eba4 040e 	sub.w	r4, r4, lr
   21d16:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   21d1a:	e79c      	b.n	21c56 <__udivmoddi4+0x9a>
   21d1c:	f1c6 0720 	rsb	r7, r6, #32
   21d20:	40b3      	lsls	r3, r6
   21d22:	fa22 fc07 	lsr.w	ip, r2, r7
   21d26:	ea4c 0c03 	orr.w	ip, ip, r3
   21d2a:	fa20 f407 	lsr.w	r4, r0, r7
   21d2e:	fa01 f306 	lsl.w	r3, r1, r6
   21d32:	431c      	orrs	r4, r3
   21d34:	40f9      	lsrs	r1, r7
   21d36:	ea4f 491c 	mov.w	r9, ip, lsr #16
   21d3a:	fa00 f306 	lsl.w	r3, r0, r6
   21d3e:	fbb1 f8f9 	udiv	r8, r1, r9
   21d42:	0c20      	lsrs	r0, r4, #16
   21d44:	fa1f fe8c 	uxth.w	lr, ip
   21d48:	fb09 1118 	mls	r1, r9, r8, r1
   21d4c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   21d50:	fb08 f00e 	mul.w	r0, r8, lr
   21d54:	4288      	cmp	r0, r1
   21d56:	fa02 f206 	lsl.w	r2, r2, r6
   21d5a:	d90b      	bls.n	21d74 <__udivmoddi4+0x1b8>
   21d5c:	eb1c 0101 	adds.w	r1, ip, r1
   21d60:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   21d64:	f080 8088 	bcs.w	21e78 <__udivmoddi4+0x2bc>
   21d68:	4288      	cmp	r0, r1
   21d6a:	f240 8085 	bls.w	21e78 <__udivmoddi4+0x2bc>
   21d6e:	f1a8 0802 	sub.w	r8, r8, #2
   21d72:	4461      	add	r1, ip
   21d74:	1a09      	subs	r1, r1, r0
   21d76:	b2a4      	uxth	r4, r4
   21d78:	fbb1 f0f9 	udiv	r0, r1, r9
   21d7c:	fb09 1110 	mls	r1, r9, r0, r1
   21d80:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   21d84:	fb00 fe0e 	mul.w	lr, r0, lr
   21d88:	458e      	cmp	lr, r1
   21d8a:	d908      	bls.n	21d9e <__udivmoddi4+0x1e2>
   21d8c:	eb1c 0101 	adds.w	r1, ip, r1
   21d90:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
   21d94:	d26c      	bcs.n	21e70 <__udivmoddi4+0x2b4>
   21d96:	458e      	cmp	lr, r1
   21d98:	d96a      	bls.n	21e70 <__udivmoddi4+0x2b4>
   21d9a:	3802      	subs	r0, #2
   21d9c:	4461      	add	r1, ip
   21d9e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   21da2:	fba0 9402 	umull	r9, r4, r0, r2
   21da6:	eba1 010e 	sub.w	r1, r1, lr
   21daa:	42a1      	cmp	r1, r4
   21dac:	46c8      	mov	r8, r9
   21dae:	46a6      	mov	lr, r4
   21db0:	d356      	bcc.n	21e60 <__udivmoddi4+0x2a4>
   21db2:	d053      	beq.n	21e5c <__udivmoddi4+0x2a0>
   21db4:	b15d      	cbz	r5, 21dce <__udivmoddi4+0x212>
   21db6:	ebb3 0208 	subs.w	r2, r3, r8
   21dba:	eb61 010e 	sbc.w	r1, r1, lr
   21dbe:	fa01 f707 	lsl.w	r7, r1, r7
   21dc2:	fa22 f306 	lsr.w	r3, r2, r6
   21dc6:	40f1      	lsrs	r1, r6
   21dc8:	431f      	orrs	r7, r3
   21dca:	e9c5 7100 	strd	r7, r1, [r5]
   21dce:	2600      	movs	r6, #0
   21dd0:	4631      	mov	r1, r6
   21dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   21dd6:	f1c2 0320 	rsb	r3, r2, #32
   21dda:	40d8      	lsrs	r0, r3
   21ddc:	fa0c fc02 	lsl.w	ip, ip, r2
   21de0:	fa21 f303 	lsr.w	r3, r1, r3
   21de4:	4091      	lsls	r1, r2
   21de6:	4301      	orrs	r1, r0
   21de8:	ea4f 471c 	mov.w	r7, ip, lsr #16
   21dec:	fa1f fe8c 	uxth.w	lr, ip
   21df0:	fbb3 f0f7 	udiv	r0, r3, r7
   21df4:	fb07 3610 	mls	r6, r7, r0, r3
   21df8:	0c0b      	lsrs	r3, r1, #16
   21dfa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   21dfe:	fb00 f60e 	mul.w	r6, r0, lr
   21e02:	429e      	cmp	r6, r3
   21e04:	fa04 f402 	lsl.w	r4, r4, r2
   21e08:	d908      	bls.n	21e1c <__udivmoddi4+0x260>
   21e0a:	eb1c 0303 	adds.w	r3, ip, r3
   21e0e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
   21e12:	d22f      	bcs.n	21e74 <__udivmoddi4+0x2b8>
   21e14:	429e      	cmp	r6, r3
   21e16:	d92d      	bls.n	21e74 <__udivmoddi4+0x2b8>
   21e18:	3802      	subs	r0, #2
   21e1a:	4463      	add	r3, ip
   21e1c:	1b9b      	subs	r3, r3, r6
   21e1e:	b289      	uxth	r1, r1
   21e20:	fbb3 f6f7 	udiv	r6, r3, r7
   21e24:	fb07 3316 	mls	r3, r7, r6, r3
   21e28:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   21e2c:	fb06 f30e 	mul.w	r3, r6, lr
   21e30:	428b      	cmp	r3, r1
   21e32:	d908      	bls.n	21e46 <__udivmoddi4+0x28a>
   21e34:	eb1c 0101 	adds.w	r1, ip, r1
   21e38:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
   21e3c:	d216      	bcs.n	21e6c <__udivmoddi4+0x2b0>
   21e3e:	428b      	cmp	r3, r1
   21e40:	d914      	bls.n	21e6c <__udivmoddi4+0x2b0>
   21e42:	3e02      	subs	r6, #2
   21e44:	4461      	add	r1, ip
   21e46:	1ac9      	subs	r1, r1, r3
   21e48:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   21e4c:	e738      	b.n	21cc0 <__udivmoddi4+0x104>
   21e4e:	462e      	mov	r6, r5
   21e50:	4628      	mov	r0, r5
   21e52:	e705      	b.n	21c60 <__udivmoddi4+0xa4>
   21e54:	4606      	mov	r6, r0
   21e56:	e6e3      	b.n	21c20 <__udivmoddi4+0x64>
   21e58:	4618      	mov	r0, r3
   21e5a:	e6f8      	b.n	21c4e <__udivmoddi4+0x92>
   21e5c:	454b      	cmp	r3, r9
   21e5e:	d2a9      	bcs.n	21db4 <__udivmoddi4+0x1f8>
   21e60:	ebb9 0802 	subs.w	r8, r9, r2
   21e64:	eb64 0e0c 	sbc.w	lr, r4, ip
   21e68:	3801      	subs	r0, #1
   21e6a:	e7a3      	b.n	21db4 <__udivmoddi4+0x1f8>
   21e6c:	4646      	mov	r6, r8
   21e6e:	e7ea      	b.n	21e46 <__udivmoddi4+0x28a>
   21e70:	4620      	mov	r0, r4
   21e72:	e794      	b.n	21d9e <__udivmoddi4+0x1e2>
   21e74:	4640      	mov	r0, r8
   21e76:	e7d1      	b.n	21e1c <__udivmoddi4+0x260>
   21e78:	46d0      	mov	r8, sl
   21e7a:	e77b      	b.n	21d74 <__udivmoddi4+0x1b8>
   21e7c:	3b02      	subs	r3, #2
   21e7e:	4461      	add	r1, ip
   21e80:	e732      	b.n	21ce8 <__udivmoddi4+0x12c>
   21e82:	4630      	mov	r0, r6
   21e84:	e709      	b.n	21c9a <__udivmoddi4+0xde>
   21e86:	4464      	add	r4, ip
   21e88:	3802      	subs	r0, #2
   21e8a:	e742      	b.n	21d12 <__udivmoddi4+0x156>

00021e8c <__aeabi_idiv0>:
   21e8c:	4770      	bx	lr
   21e8e:	bf00      	nop

00021e90 <fabs>:
   21e90:	ec51 0b10 	vmov	r0, r1, d0
   21e94:	ee10 2a10 	vmov	r2, s0
   21e98:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   21e9c:	ec43 2b10 	vmov	d0, r2, r3
   21ea0:	4770      	bx	lr
   21ea2:	bf00      	nop

00021ea4 <ceilf>:
   21ea4:	ee10 2a10 	vmov	r2, s0
   21ea8:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   21eac:	3b7f      	subs	r3, #127	; 0x7f
   21eae:	2b16      	cmp	r3, #22
   21eb0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   21eb4:	dc2f      	bgt.n	21f16 <ceilf+0x72>
   21eb6:	2b00      	cmp	r3, #0
   21eb8:	db18      	blt.n	21eec <ceilf+0x48>
   21eba:	491a      	ldr	r1, [pc, #104]	; (21f24 <ceilf+0x80>)
   21ebc:	4119      	asrs	r1, r3
   21ebe:	420a      	tst	r2, r1
   21ec0:	d028      	beq.n	21f14 <ceilf+0x70>
   21ec2:	eddf 7a19 	vldr	s15, [pc, #100]	; 21f28 <ceilf+0x84>
   21ec6:	ee70 7a27 	vadd.f32	s15, s0, s15
   21eca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   21ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   21ed2:	dd1f      	ble.n	21f14 <ceilf+0x70>
   21ed4:	2a00      	cmp	r2, #0
   21ed6:	dd04      	ble.n	21ee2 <ceilf+0x3e>
   21ed8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   21edc:	fa40 f303 	asr.w	r3, r0, r3
   21ee0:	441a      	add	r2, r3
   21ee2:	ea22 0301 	bic.w	r3, r2, r1
   21ee6:	ee00 3a10 	vmov	s0, r3
   21eea:	4770      	bx	lr
   21eec:	eddf 7a0e 	vldr	s15, [pc, #56]	; 21f28 <ceilf+0x84>
   21ef0:	ee70 7a27 	vadd.f32	s15, s0, s15
   21ef4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   21ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   21efc:	dd0a      	ble.n	21f14 <ceilf+0x70>
   21efe:	2a00      	cmp	r2, #0
   21f00:	db06      	blt.n	21f10 <ceilf+0x6c>
   21f02:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   21f06:	2900      	cmp	r1, #0
   21f08:	bf18      	it	ne
   21f0a:	eeb0 0a67 	vmovne.f32	s0, s15
   21f0e:	4770      	bx	lr
   21f10:	ed9f 0a06 	vldr	s0, [pc, #24]	; 21f2c <ceilf+0x88>
   21f14:	4770      	bx	lr
   21f16:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   21f1a:	d3fb      	bcc.n	21f14 <ceilf+0x70>
   21f1c:	ee30 0a00 	vadd.f32	s0, s0, s0
   21f20:	4770      	bx	lr
   21f22:	bf00      	nop
   21f24:	007fffff 	.word	0x007fffff
   21f28:	7149f2ca 	.word	0x7149f2ca
   21f2c:	80000000 	.word	0x80000000

00021f30 <asin>:
   21f30:	b538      	push	{r3, r4, r5, lr}
   21f32:	ed2d 8b02 	vpush	{d8}
   21f36:	ec55 4b10 	vmov	r4, r5, d0
   21f3a:	f000 f8a9 	bl	22090 <__ieee754_asin>
   21f3e:	4b17      	ldr	r3, [pc, #92]	; (21f9c <asin+0x6c>)
   21f40:	eeb0 8a40 	vmov.f32	s16, s0
   21f44:	eef0 8a60 	vmov.f32	s17, s1
   21f48:	f993 3000 	ldrsb.w	r3, [r3]
   21f4c:	3301      	adds	r3, #1
   21f4e:	d011      	beq.n	21f74 <asin+0x44>
   21f50:	4622      	mov	r2, r4
   21f52:	462b      	mov	r3, r5
   21f54:	4620      	mov	r0, r4
   21f56:	4629      	mov	r1, r5
   21f58:	f7ff fcc4 	bl	218e4 <__aeabi_dcmpun>
   21f5c:	b950      	cbnz	r0, 21f74 <asin+0x44>
   21f5e:	ec45 4b10 	vmov	d0, r4, r5
   21f62:	f7ff ff95 	bl	21e90 <fabs>
   21f66:	4b0e      	ldr	r3, [pc, #56]	; (21fa0 <asin+0x70>)
   21f68:	ec51 0b10 	vmov	r0, r1, d0
   21f6c:	2200      	movs	r2, #0
   21f6e:	f7ff fcaf 	bl	218d0 <__aeabi_dcmpgt>
   21f72:	b930      	cbnz	r0, 21f82 <asin+0x52>
   21f74:	eeb0 0a48 	vmov.f32	s0, s16
   21f78:	eef0 0a68 	vmov.f32	s1, s17
   21f7c:	ecbd 8b02 	vpop	{d8}
   21f80:	bd38      	pop	{r3, r4, r5, pc}
   21f82:	f000 fe4f 	bl	22c24 <__errno>
   21f86:	ecbd 8b02 	vpop	{d8}
   21f8a:	4603      	mov	r3, r0
   21f8c:	2221      	movs	r2, #33	; 0x21
   21f8e:	601a      	str	r2, [r3, #0]
   21f90:	4804      	ldr	r0, [pc, #16]	; (21fa4 <asin+0x74>)
   21f92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   21f96:	f000 bd37 	b.w	22a08 <nan>
   21f9a:	bf00      	nop
   21f9c:	20001014 	.word	0x20001014
   21fa0:	3ff00000 	.word	0x3ff00000
   21fa4:	0002373c 	.word	0x0002373c

00021fa8 <fmod>:
   21fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21faa:	ed2d 8b02 	vpush	{d8}
   21fae:	ec57 6b10 	vmov	r6, r7, d0
   21fb2:	ec55 4b11 	vmov	r4, r5, d1
   21fb6:	f000 fabd 	bl	22534 <__ieee754_fmod>
   21fba:	4b18      	ldr	r3, [pc, #96]	; (2201c <fmod+0x74>)
   21fbc:	eeb0 8a40 	vmov.f32	s16, s0
   21fc0:	eef0 8a60 	vmov.f32	s17, s1
   21fc4:	f993 3000 	ldrsb.w	r3, [r3]
   21fc8:	3301      	adds	r3, #1
   21fca:	d00d      	beq.n	21fe8 <fmod+0x40>
   21fcc:	4630      	mov	r0, r6
   21fce:	4639      	mov	r1, r7
   21fd0:	4622      	mov	r2, r4
   21fd2:	462b      	mov	r3, r5
   21fd4:	f7ff fc86 	bl	218e4 <__aeabi_dcmpun>
   21fd8:	b930      	cbnz	r0, 21fe8 <fmod+0x40>
   21fda:	2200      	movs	r2, #0
   21fdc:	2300      	movs	r3, #0
   21fde:	4620      	mov	r0, r4
   21fe0:	4629      	mov	r1, r5
   21fe2:	f7ff fc4d 	bl	21880 <__aeabi_dcmpeq>
   21fe6:	b930      	cbnz	r0, 21ff6 <fmod+0x4e>
   21fe8:	eeb0 0a48 	vmov.f32	s0, s16
   21fec:	eef0 0a68 	vmov.f32	s1, s17
   21ff0:	ecbd 8b02 	vpop	{d8}
   21ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21ff6:	f000 fe15 	bl	22c24 <__errno>
   21ffa:	2200      	movs	r2, #0
   21ffc:	2300      	movs	r3, #0
   21ffe:	2121      	movs	r1, #33	; 0x21
   22000:	6001      	str	r1, [r0, #0]
   22002:	4610      	mov	r0, r2
   22004:	4619      	mov	r1, r3
   22006:	f7ff fafd 	bl	21604 <__aeabi_ddiv>
   2200a:	ec41 0b18 	vmov	d8, r0, r1
   2200e:	eeb0 0a48 	vmov.f32	s0, s16
   22012:	eef0 0a68 	vmov.f32	s1, s17
   22016:	ecbd 8b02 	vpop	{d8}
   2201a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2201c:	20001014 	.word	0x20001014

00022020 <log10f>:
   22020:	b508      	push	{r3, lr}
   22022:	ed2d 8b02 	vpush	{d8}
   22026:	eeb0 8a40 	vmov.f32	s16, s0
   2202a:	f000 fc8d 	bl	22948 <__ieee754_log10f>
   2202e:	4b14      	ldr	r3, [pc, #80]	; (22080 <log10f+0x60>)
   22030:	f993 3000 	ldrsb.w	r3, [r3]
   22034:	3301      	adds	r3, #1
   22036:	d014      	beq.n	22062 <log10f+0x42>
   22038:	eeb4 8a48 	vcmp.f32	s16, s16
   2203c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   22040:	d60f      	bvs.n	22062 <log10f+0x42>
   22042:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   22046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2204a:	d80a      	bhi.n	22062 <log10f+0x42>
   2204c:	eeb5 8a40 	vcmp.f32	s16, #0.0
   22050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   22054:	d108      	bne.n	22068 <log10f+0x48>
   22056:	f000 fde5 	bl	22c24 <__errno>
   2205a:	2322      	movs	r3, #34	; 0x22
   2205c:	ed9f 0a09 	vldr	s0, [pc, #36]	; 22084 <log10f+0x64>
   22060:	6003      	str	r3, [r0, #0]
   22062:	ecbd 8b02 	vpop	{d8}
   22066:	bd08      	pop	{r3, pc}
   22068:	f000 fddc 	bl	22c24 <__errno>
   2206c:	ecbd 8b02 	vpop	{d8}
   22070:	4603      	mov	r3, r0
   22072:	2221      	movs	r2, #33	; 0x21
   22074:	601a      	str	r2, [r3, #0]
   22076:	4804      	ldr	r0, [pc, #16]	; (22088 <log10f+0x68>)
   22078:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2207c:	f000 bccc 	b.w	22a18 <nanf>
   22080:	20001014 	.word	0x20001014
   22084:	ff800000 	.word	0xff800000
   22088:	0002373c 	.word	0x0002373c
   2208c:	00000000 	.word	0x00000000

00022090 <__ieee754_asin>:
   22090:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22094:	ec55 4b10 	vmov	r4, r5, d0
   22098:	4bcf      	ldr	r3, [pc, #828]	; (223d8 <__ieee754_asin+0x348>)
   2209a:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
   2209e:	429f      	cmp	r7, r3
   220a0:	ed2d 8b04 	vpush	{d8-d9}
   220a4:	dd37      	ble.n	22116 <__ieee754_asin+0x86>
   220a6:	ee10 3a10 	vmov	r3, s0
   220aa:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
   220ae:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
   220b2:	433b      	orrs	r3, r7
   220b4:	d010      	beq.n	220d8 <__ieee754_asin+0x48>
   220b6:	ee10 2a10 	vmov	r2, s0
   220ba:	462b      	mov	r3, r5
   220bc:	4620      	mov	r0, r4
   220be:	4629      	mov	r1, r5
   220c0:	f7fe ffbe 	bl	21040 <__aeabi_dsub>
   220c4:	4602      	mov	r2, r0
   220c6:	460b      	mov	r3, r1
   220c8:	f7ff fa9c 	bl	21604 <__aeabi_ddiv>
   220cc:	ec41 0b10 	vmov	d0, r0, r1
   220d0:	ecbd 8b04 	vpop	{d8-d9}
   220d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   220d8:	ee10 0a10 	vmov	r0, s0
   220dc:	a3a2      	add	r3, pc, #648	; (adr r3, 22368 <__ieee754_asin+0x2d8>)
   220de:	e9d3 2300 	ldrd	r2, r3, [r3]
   220e2:	4629      	mov	r1, r5
   220e4:	f7ff f964 	bl	213b0 <__aeabi_dmul>
   220e8:	4602      	mov	r2, r0
   220ea:	460b      	mov	r3, r1
   220ec:	4620      	mov	r0, r4
   220ee:	4629      	mov	r1, r5
   220f0:	4614      	mov	r4, r2
   220f2:	461d      	mov	r5, r3
   220f4:	a39e      	add	r3, pc, #632	; (adr r3, 22370 <__ieee754_asin+0x2e0>)
   220f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   220fa:	f7ff f959 	bl	213b0 <__aeabi_dmul>
   220fe:	4602      	mov	r2, r0
   22100:	460b      	mov	r3, r1
   22102:	4620      	mov	r0, r4
   22104:	4629      	mov	r1, r5
   22106:	f7fe ff9d 	bl	21044 <__adddf3>
   2210a:	ecbd 8b04 	vpop	{d8-d9}
   2210e:	ec41 0b10 	vmov	d0, r0, r1
   22112:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22116:	4bb1      	ldr	r3, [pc, #708]	; (223dc <__ieee754_asin+0x34c>)
   22118:	429f      	cmp	r7, r3
   2211a:	462e      	mov	r6, r5
   2211c:	dc12      	bgt.n	22144 <__ieee754_asin+0xb4>
   2211e:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
   22122:	f280 8163 	bge.w	223ec <__ieee754_asin+0x35c>
   22126:	a394      	add	r3, pc, #592	; (adr r3, 22378 <__ieee754_asin+0x2e8>)
   22128:	e9d3 2300 	ldrd	r2, r3, [r3]
   2212c:	ee10 0a10 	vmov	r0, s0
   22130:	4629      	mov	r1, r5
   22132:	f7fe ff87 	bl	21044 <__adddf3>
   22136:	4baa      	ldr	r3, [pc, #680]	; (223e0 <__ieee754_asin+0x350>)
   22138:	2200      	movs	r2, #0
   2213a:	f7ff fbc9 	bl	218d0 <__aeabi_dcmpgt>
   2213e:	2800      	cmp	r0, #0
   22140:	f040 810c 	bne.w	2235c <__ieee754_asin+0x2cc>
   22144:	ec45 4b10 	vmov	d0, r4, r5
   22148:	f7ff fea2 	bl	21e90 <fabs>
   2214c:	49a4      	ldr	r1, [pc, #656]	; (223e0 <__ieee754_asin+0x350>)
   2214e:	ec53 2b10 	vmov	r2, r3, d0
   22152:	2000      	movs	r0, #0
   22154:	f7fe ff74 	bl	21040 <__aeabi_dsub>
   22158:	4ba2      	ldr	r3, [pc, #648]	; (223e4 <__ieee754_asin+0x354>)
   2215a:	2200      	movs	r2, #0
   2215c:	f7ff f928 	bl	213b0 <__aeabi_dmul>
   22160:	a387      	add	r3, pc, #540	; (adr r3, 22380 <__ieee754_asin+0x2f0>)
   22162:	e9d3 2300 	ldrd	r2, r3, [r3]
   22166:	4604      	mov	r4, r0
   22168:	460d      	mov	r5, r1
   2216a:	f7ff f921 	bl	213b0 <__aeabi_dmul>
   2216e:	a386      	add	r3, pc, #536	; (adr r3, 22388 <__ieee754_asin+0x2f8>)
   22170:	e9d3 2300 	ldrd	r2, r3, [r3]
   22174:	f7fe ff66 	bl	21044 <__adddf3>
   22178:	4622      	mov	r2, r4
   2217a:	462b      	mov	r3, r5
   2217c:	f7ff f918 	bl	213b0 <__aeabi_dmul>
   22180:	a383      	add	r3, pc, #524	; (adr r3, 22390 <__ieee754_asin+0x300>)
   22182:	e9d3 2300 	ldrd	r2, r3, [r3]
   22186:	f7fe ff5b 	bl	21040 <__aeabi_dsub>
   2218a:	4622      	mov	r2, r4
   2218c:	462b      	mov	r3, r5
   2218e:	f7ff f90f 	bl	213b0 <__aeabi_dmul>
   22192:	a381      	add	r3, pc, #516	; (adr r3, 22398 <__ieee754_asin+0x308>)
   22194:	e9d3 2300 	ldrd	r2, r3, [r3]
   22198:	f7fe ff54 	bl	21044 <__adddf3>
   2219c:	4622      	mov	r2, r4
   2219e:	462b      	mov	r3, r5
   221a0:	f7ff f906 	bl	213b0 <__aeabi_dmul>
   221a4:	a37e      	add	r3, pc, #504	; (adr r3, 223a0 <__ieee754_asin+0x310>)
   221a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   221aa:	f7fe ff49 	bl	21040 <__aeabi_dsub>
   221ae:	4622      	mov	r2, r4
   221b0:	462b      	mov	r3, r5
   221b2:	f7ff f8fd 	bl	213b0 <__aeabi_dmul>
   221b6:	a37c      	add	r3, pc, #496	; (adr r3, 223a8 <__ieee754_asin+0x318>)
   221b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   221bc:	f7fe ff42 	bl	21044 <__adddf3>
   221c0:	4622      	mov	r2, r4
   221c2:	462b      	mov	r3, r5
   221c4:	f7ff f8f4 	bl	213b0 <__aeabi_dmul>
   221c8:	a379      	add	r3, pc, #484	; (adr r3, 223b0 <__ieee754_asin+0x320>)
   221ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   221ce:	ec41 0b18 	vmov	d8, r0, r1
   221d2:	ec41 0b19 	vmov	d9, r0, r1
   221d6:	4620      	mov	r0, r4
   221d8:	4629      	mov	r1, r5
   221da:	f7ff f8e9 	bl	213b0 <__aeabi_dmul>
   221de:	a376      	add	r3, pc, #472	; (adr r3, 223b8 <__ieee754_asin+0x328>)
   221e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   221e4:	f7fe ff2c 	bl	21040 <__aeabi_dsub>
   221e8:	4622      	mov	r2, r4
   221ea:	462b      	mov	r3, r5
   221ec:	f7ff f8e0 	bl	213b0 <__aeabi_dmul>
   221f0:	a373      	add	r3, pc, #460	; (adr r3, 223c0 <__ieee754_asin+0x330>)
   221f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   221f6:	f7fe ff25 	bl	21044 <__adddf3>
   221fa:	4622      	mov	r2, r4
   221fc:	462b      	mov	r3, r5
   221fe:	f7ff f8d7 	bl	213b0 <__aeabi_dmul>
   22202:	a371      	add	r3, pc, #452	; (adr r3, 223c8 <__ieee754_asin+0x338>)
   22204:	e9d3 2300 	ldrd	r2, r3, [r3]
   22208:	f7fe ff1a 	bl	21040 <__aeabi_dsub>
   2220c:	4622      	mov	r2, r4
   2220e:	462b      	mov	r3, r5
   22210:	f7ff f8ce 	bl	213b0 <__aeabi_dmul>
   22214:	4b72      	ldr	r3, [pc, #456]	; (223e0 <__ieee754_asin+0x350>)
   22216:	2200      	movs	r2, #0
   22218:	f7fe ff14 	bl	21044 <__adddf3>
   2221c:	ec45 4b10 	vmov	d0, r4, r5
   22220:	4680      	mov	r8, r0
   22222:	4689      	mov	r9, r1
   22224:	f000 fac4 	bl	227b0 <__ieee754_sqrt>
   22228:	4b6f      	ldr	r3, [pc, #444]	; (223e8 <__ieee754_asin+0x358>)
   2222a:	429f      	cmp	r7, r3
   2222c:	ec5b ab10 	vmov	sl, fp, d0
   22230:	dc73      	bgt.n	2231a <__ieee754_asin+0x28a>
   22232:	465b      	mov	r3, fp
   22234:	2200      	movs	r2, #0
   22236:	ee10 0a10 	vmov	r0, s0
   2223a:	ec43 2b18 	vmov	d8, r2, r3
   2223e:	4659      	mov	r1, fp
   22240:	ee10 2a10 	vmov	r2, s0
   22244:	f7fe fefe 	bl	21044 <__adddf3>
   22248:	4642      	mov	r2, r8
   2224a:	464b      	mov	r3, r9
   2224c:	4680      	mov	r8, r0
   2224e:	4689      	mov	r9, r1
   22250:	ec51 0b19 	vmov	r0, r1, d9
   22254:	f7ff f9d6 	bl	21604 <__aeabi_ddiv>
   22258:	4602      	mov	r2, r0
   2225a:	460b      	mov	r3, r1
   2225c:	4640      	mov	r0, r8
   2225e:	4649      	mov	r1, r9
   22260:	f7ff f8a6 	bl	213b0 <__aeabi_dmul>
   22264:	ec53 2b18 	vmov	r2, r3, d8
   22268:	4680      	mov	r8, r0
   2226a:	4689      	mov	r9, r1
   2226c:	ec51 0b18 	vmov	r0, r1, d8
   22270:	f7ff f89e 	bl	213b0 <__aeabi_dmul>
   22274:	4602      	mov	r2, r0
   22276:	460b      	mov	r3, r1
   22278:	4620      	mov	r0, r4
   2227a:	4629      	mov	r1, r5
   2227c:	f7fe fee0 	bl	21040 <__aeabi_dsub>
   22280:	ec53 2b18 	vmov	r2, r3, d8
   22284:	4604      	mov	r4, r0
   22286:	460d      	mov	r5, r1
   22288:	4650      	mov	r0, sl
   2228a:	4659      	mov	r1, fp
   2228c:	f7fe feda 	bl	21044 <__adddf3>
   22290:	4602      	mov	r2, r0
   22292:	460b      	mov	r3, r1
   22294:	4620      	mov	r0, r4
   22296:	4629      	mov	r1, r5
   22298:	f7ff f9b4 	bl	21604 <__aeabi_ddiv>
   2229c:	4602      	mov	r2, r0
   2229e:	460b      	mov	r3, r1
   222a0:	f7fe fed0 	bl	21044 <__adddf3>
   222a4:	4602      	mov	r2, r0
   222a6:	460b      	mov	r3, r1
   222a8:	a131      	add	r1, pc, #196	; (adr r1, 22370 <__ieee754_asin+0x2e0>)
   222aa:	e9d1 0100 	ldrd	r0, r1, [r1]
   222ae:	f7fe fec7 	bl	21040 <__aeabi_dsub>
   222b2:	4602      	mov	r2, r0
   222b4:	460b      	mov	r3, r1
   222b6:	4640      	mov	r0, r8
   222b8:	4649      	mov	r1, r9
   222ba:	f7fe fec1 	bl	21040 <__aeabi_dsub>
   222be:	ec53 2b18 	vmov	r2, r3, d8
   222c2:	4604      	mov	r4, r0
   222c4:	460d      	mov	r5, r1
   222c6:	ee18 0a10 	vmov	r0, s16
   222ca:	4619      	mov	r1, r3
   222cc:	f7fe feba 	bl	21044 <__adddf3>
   222d0:	4602      	mov	r2, r0
   222d2:	460b      	mov	r3, r1
   222d4:	a13e      	add	r1, pc, #248	; (adr r1, 223d0 <__ieee754_asin+0x340>)
   222d6:	e9d1 0100 	ldrd	r0, r1, [r1]
   222da:	f7fe feb1 	bl	21040 <__aeabi_dsub>
   222de:	4602      	mov	r2, r0
   222e0:	460b      	mov	r3, r1
   222e2:	4620      	mov	r0, r4
   222e4:	4629      	mov	r1, r5
   222e6:	f7fe feab 	bl	21040 <__aeabi_dsub>
   222ea:	4602      	mov	r2, r0
   222ec:	460b      	mov	r3, r1
   222ee:	a138      	add	r1, pc, #224	; (adr r1, 223d0 <__ieee754_asin+0x340>)
   222f0:	e9d1 0100 	ldrd	r0, r1, [r1]
   222f4:	f7fe fea4 	bl	21040 <__aeabi_dsub>
   222f8:	ec41 0b10 	vmov	d0, r0, r1
   222fc:	2e00      	cmp	r6, #0
   222fe:	f73f aee7 	bgt.w	220d0 <__ieee754_asin+0x40>
   22302:	ecbd 8b04 	vpop	{d8-d9}
   22306:	ee10 1a90 	vmov	r1, s1
   2230a:	ee10 2a10 	vmov	r2, s0
   2230e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   22312:	ec43 2b10 	vmov	d0, r2, r3
   22316:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2231a:	4642      	mov	r2, r8
   2231c:	464b      	mov	r3, r9
   2231e:	ec51 0b18 	vmov	r0, r1, d8
   22322:	f7ff f96f 	bl	21604 <__aeabi_ddiv>
   22326:	4652      	mov	r2, sl
   22328:	465b      	mov	r3, fp
   2232a:	f7ff f841 	bl	213b0 <__aeabi_dmul>
   2232e:	4652      	mov	r2, sl
   22330:	465b      	mov	r3, fp
   22332:	f7fe fe87 	bl	21044 <__adddf3>
   22336:	4602      	mov	r2, r0
   22338:	460b      	mov	r3, r1
   2233a:	f7fe fe83 	bl	21044 <__adddf3>
   2233e:	a30c      	add	r3, pc, #48	; (adr r3, 22370 <__ieee754_asin+0x2e0>)
   22340:	e9d3 2300 	ldrd	r2, r3, [r3]
   22344:	f7fe fe7c 	bl	21040 <__aeabi_dsub>
   22348:	4602      	mov	r2, r0
   2234a:	460b      	mov	r3, r1
   2234c:	a106      	add	r1, pc, #24	; (adr r1, 22368 <__ieee754_asin+0x2d8>)
   2234e:	e9d1 0100 	ldrd	r0, r1, [r1]
   22352:	f7fe fe75 	bl	21040 <__aeabi_dsub>
   22356:	ec41 0b10 	vmov	d0, r0, r1
   2235a:	e7cf      	b.n	222fc <__ieee754_asin+0x26c>
   2235c:	ec45 4b10 	vmov	d0, r4, r5
   22360:	e6b6      	b.n	220d0 <__ieee754_asin+0x40>
   22362:	bf00      	nop
   22364:	f3af 8000 	nop.w
   22368:	54442d18 	.word	0x54442d18
   2236c:	3ff921fb 	.word	0x3ff921fb
   22370:	33145c07 	.word	0x33145c07
   22374:	3c91a626 	.word	0x3c91a626
   22378:	8800759c 	.word	0x8800759c
   2237c:	7e37e43c 	.word	0x7e37e43c
   22380:	0dfdf709 	.word	0x0dfdf709
   22384:	3f023de1 	.word	0x3f023de1
   22388:	7501b288 	.word	0x7501b288
   2238c:	3f49efe0 	.word	0x3f49efe0
   22390:	b5688f3b 	.word	0xb5688f3b
   22394:	3fa48228 	.word	0x3fa48228
   22398:	0e884455 	.word	0x0e884455
   2239c:	3fc9c155 	.word	0x3fc9c155
   223a0:	03eb6f7d 	.word	0x03eb6f7d
   223a4:	3fd4d612 	.word	0x3fd4d612
   223a8:	55555555 	.word	0x55555555
   223ac:	3fc55555 	.word	0x3fc55555
   223b0:	b12e9282 	.word	0xb12e9282
   223b4:	3fb3b8c5 	.word	0x3fb3b8c5
   223b8:	1b8d0159 	.word	0x1b8d0159
   223bc:	3fe6066c 	.word	0x3fe6066c
   223c0:	9c598ac8 	.word	0x9c598ac8
   223c4:	40002ae5 	.word	0x40002ae5
   223c8:	1c8a2d4b 	.word	0x1c8a2d4b
   223cc:	40033a27 	.word	0x40033a27
   223d0:	54442d18 	.word	0x54442d18
   223d4:	3fe921fb 	.word	0x3fe921fb
   223d8:	3fefffff 	.word	0x3fefffff
   223dc:	3fdfffff 	.word	0x3fdfffff
   223e0:	3ff00000 	.word	0x3ff00000
   223e4:	3fe00000 	.word	0x3fe00000
   223e8:	3fef3332 	.word	0x3fef3332
   223ec:	ee10 2a10 	vmov	r2, s0
   223f0:	ee10 0a10 	vmov	r0, s0
   223f4:	462b      	mov	r3, r5
   223f6:	4629      	mov	r1, r5
   223f8:	f7fe ffda 	bl	213b0 <__aeabi_dmul>
   223fc:	a339      	add	r3, pc, #228	; (adr r3, 224e4 <__ieee754_asin+0x454>)
   223fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   22402:	4606      	mov	r6, r0
   22404:	460f      	mov	r7, r1
   22406:	f7fe ffd3 	bl	213b0 <__aeabi_dmul>
   2240a:	a338      	add	r3, pc, #224	; (adr r3, 224ec <__ieee754_asin+0x45c>)
   2240c:	e9d3 2300 	ldrd	r2, r3, [r3]
   22410:	f7fe fe18 	bl	21044 <__adddf3>
   22414:	4632      	mov	r2, r6
   22416:	463b      	mov	r3, r7
   22418:	f7fe ffca 	bl	213b0 <__aeabi_dmul>
   2241c:	a335      	add	r3, pc, #212	; (adr r3, 224f4 <__ieee754_asin+0x464>)
   2241e:	e9d3 2300 	ldrd	r2, r3, [r3]
   22422:	f7fe fe0d 	bl	21040 <__aeabi_dsub>
   22426:	4632      	mov	r2, r6
   22428:	463b      	mov	r3, r7
   2242a:	f7fe ffc1 	bl	213b0 <__aeabi_dmul>
   2242e:	a333      	add	r3, pc, #204	; (adr r3, 224fc <__ieee754_asin+0x46c>)
   22430:	e9d3 2300 	ldrd	r2, r3, [r3]
   22434:	f7fe fe06 	bl	21044 <__adddf3>
   22438:	4632      	mov	r2, r6
   2243a:	463b      	mov	r3, r7
   2243c:	f7fe ffb8 	bl	213b0 <__aeabi_dmul>
   22440:	a330      	add	r3, pc, #192	; (adr r3, 22504 <__ieee754_asin+0x474>)
   22442:	e9d3 2300 	ldrd	r2, r3, [r3]
   22446:	f7fe fdfb 	bl	21040 <__aeabi_dsub>
   2244a:	4632      	mov	r2, r6
   2244c:	463b      	mov	r3, r7
   2244e:	f7fe ffaf 	bl	213b0 <__aeabi_dmul>
   22452:	a32e      	add	r3, pc, #184	; (adr r3, 2250c <__ieee754_asin+0x47c>)
   22454:	e9d3 2300 	ldrd	r2, r3, [r3]
   22458:	f7fe fdf4 	bl	21044 <__adddf3>
   2245c:	4632      	mov	r2, r6
   2245e:	463b      	mov	r3, r7
   22460:	f7fe ffa6 	bl	213b0 <__aeabi_dmul>
   22464:	a32b      	add	r3, pc, #172	; (adr r3, 22514 <__ieee754_asin+0x484>)
   22466:	e9d3 2300 	ldrd	r2, r3, [r3]
   2246a:	4680      	mov	r8, r0
   2246c:	4689      	mov	r9, r1
   2246e:	4630      	mov	r0, r6
   22470:	4639      	mov	r1, r7
   22472:	f7fe ff9d 	bl	213b0 <__aeabi_dmul>
   22476:	a329      	add	r3, pc, #164	; (adr r3, 2251c <__ieee754_asin+0x48c>)
   22478:	e9d3 2300 	ldrd	r2, r3, [r3]
   2247c:	f7fe fde0 	bl	21040 <__aeabi_dsub>
   22480:	4632      	mov	r2, r6
   22482:	463b      	mov	r3, r7
   22484:	f7fe ff94 	bl	213b0 <__aeabi_dmul>
   22488:	a326      	add	r3, pc, #152	; (adr r3, 22524 <__ieee754_asin+0x494>)
   2248a:	e9d3 2300 	ldrd	r2, r3, [r3]
   2248e:	f7fe fdd9 	bl	21044 <__adddf3>
   22492:	4632      	mov	r2, r6
   22494:	463b      	mov	r3, r7
   22496:	f7fe ff8b 	bl	213b0 <__aeabi_dmul>
   2249a:	a324      	add	r3, pc, #144	; (adr r3, 2252c <__ieee754_asin+0x49c>)
   2249c:	e9d3 2300 	ldrd	r2, r3, [r3]
   224a0:	f7fe fdce 	bl	21040 <__aeabi_dsub>
   224a4:	4632      	mov	r2, r6
   224a6:	463b      	mov	r3, r7
   224a8:	f7fe ff82 	bl	213b0 <__aeabi_dmul>
   224ac:	4b0c      	ldr	r3, [pc, #48]	; (224e0 <__ieee754_asin+0x450>)
   224ae:	2200      	movs	r2, #0
   224b0:	f7fe fdc8 	bl	21044 <__adddf3>
   224b4:	4602      	mov	r2, r0
   224b6:	460b      	mov	r3, r1
   224b8:	4640      	mov	r0, r8
   224ba:	4649      	mov	r1, r9
   224bc:	f7ff f8a2 	bl	21604 <__aeabi_ddiv>
   224c0:	4622      	mov	r2, r4
   224c2:	462b      	mov	r3, r5
   224c4:	f7fe ff74 	bl	213b0 <__aeabi_dmul>
   224c8:	4622      	mov	r2, r4
   224ca:	462b      	mov	r3, r5
   224cc:	f7fe fdba 	bl	21044 <__adddf3>
   224d0:	ecbd 8b04 	vpop	{d8-d9}
   224d4:	ec41 0b10 	vmov	d0, r0, r1
   224d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   224dc:	f3af 8000 	nop.w
   224e0:	3ff00000 	.word	0x3ff00000
   224e4:	0dfdf709 	.word	0x0dfdf709
   224e8:	3f023de1 	.word	0x3f023de1
   224ec:	7501b288 	.word	0x7501b288
   224f0:	3f49efe0 	.word	0x3f49efe0
   224f4:	b5688f3b 	.word	0xb5688f3b
   224f8:	3fa48228 	.word	0x3fa48228
   224fc:	0e884455 	.word	0x0e884455
   22500:	3fc9c155 	.word	0x3fc9c155
   22504:	03eb6f7d 	.word	0x03eb6f7d
   22508:	3fd4d612 	.word	0x3fd4d612
   2250c:	55555555 	.word	0x55555555
   22510:	3fc55555 	.word	0x3fc55555
   22514:	b12e9282 	.word	0xb12e9282
   22518:	3fb3b8c5 	.word	0x3fb3b8c5
   2251c:	1b8d0159 	.word	0x1b8d0159
   22520:	3fe6066c 	.word	0x3fe6066c
   22524:	9c598ac8 	.word	0x9c598ac8
   22528:	40002ae5 	.word	0x40002ae5
   2252c:	1c8a2d4b 	.word	0x1c8a2d4b
   22530:	40033a27 	.word	0x40033a27

00022534 <__ieee754_fmod>:
   22534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22538:	ec53 2b11 	vmov	r2, r3, d1
   2253c:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
   22540:	ea5e 0402 	orrs.w	r4, lr, r2
   22544:	ec51 0b10 	vmov	r0, r1, d0
   22548:	d033      	beq.n	225b2 <__ieee754_fmod+0x7e>
   2254a:	4c93      	ldr	r4, [pc, #588]	; (22798 <__ieee754_fmod+0x264>)
   2254c:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
   22550:	45a1      	cmp	r9, r4
   22552:	4688      	mov	r8, r1
   22554:	dc2d      	bgt.n	225b2 <__ieee754_fmod+0x7e>
   22556:	4254      	negs	r4, r2
   22558:	4e90      	ldr	r6, [pc, #576]	; (2279c <__ieee754_fmod+0x268>)
   2255a:	4314      	orrs	r4, r2
   2255c:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
   22560:	42b4      	cmp	r4, r6
   22562:	ee11 7a10 	vmov	r7, s2
   22566:	d824      	bhi.n	225b2 <__ieee754_fmod+0x7e>
   22568:	45f1      	cmp	r9, lr
   2256a:	469c      	mov	ip, r3
   2256c:	ee11 5a10 	vmov	r5, s2
   22570:	ee10 3a10 	vmov	r3, s0
   22574:	4602      	mov	r2, r0
   22576:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
   2257a:	dc06      	bgt.n	2258a <__ieee754_fmod+0x56>
   2257c:	f2c0 80bd 	blt.w	226fa <__ieee754_fmod+0x1c6>
   22580:	42b8      	cmp	r0, r7
   22582:	f0c0 80ba 	bcc.w	226fa <__ieee754_fmod+0x1c6>
   22586:	f000 80ef 	beq.w	22768 <__ieee754_fmod+0x234>
   2258a:	4984      	ldr	r1, [pc, #528]	; (2279c <__ieee754_fmod+0x268>)
   2258c:	ea08 0101 	and.w	r1, r8, r1
   22590:	b9c9      	cbnz	r1, 225c6 <__ieee754_fmod+0x92>
   22592:	f1b9 0f00 	cmp.w	r9, #0
   22596:	f040 80d0 	bne.w	2273a <__ieee754_fmod+0x206>
   2259a:	2b00      	cmp	r3, #0
   2259c:	4618      	mov	r0, r3
   2259e:	f340 80f8 	ble.w	22792 <__ieee754_fmod+0x25e>
   225a2:	f2a1 4113 	subw	r1, r1, #1043	; 0x413
   225a6:	0040      	lsls	r0, r0, #1
   225a8:	2800      	cmp	r0, #0
   225aa:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
   225ae:	dcfa      	bgt.n	225a6 <__ieee754_fmod+0x72>
   225b0:	e00d      	b.n	225ce <__ieee754_fmod+0x9a>
   225b2:	f7fe fefd 	bl	213b0 <__aeabi_dmul>
   225b6:	4602      	mov	r2, r0
   225b8:	460b      	mov	r3, r1
   225ba:	f7ff f823 	bl	21604 <__aeabi_ddiv>
   225be:	ec41 0b10 	vmov	d0, r0, r1
   225c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   225c6:	ea4f 5129 	mov.w	r1, r9, asr #20
   225ca:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   225ce:	4873      	ldr	r0, [pc, #460]	; (2279c <__ieee754_fmod+0x268>)
   225d0:	ea0c 0000 	and.w	r0, ip, r0
   225d4:	b968      	cbnz	r0, 225f2 <__ieee754_fmod+0xbe>
   225d6:	f1be 0f00 	cmp.w	lr, #0
   225da:	f040 80a2 	bne.w	22722 <__ieee754_fmod+0x1ee>
   225de:	2f00      	cmp	r7, #0
   225e0:	4e6f      	ldr	r6, [pc, #444]	; (227a0 <__ieee754_fmod+0x26c>)
   225e2:	4638      	mov	r0, r7
   225e4:	dd09      	ble.n	225fa <__ieee754_fmod+0xc6>
   225e6:	0040      	lsls	r0, r0, #1
   225e8:	2800      	cmp	r0, #0
   225ea:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   225ee:	dcfa      	bgt.n	225e6 <__ieee754_fmod+0xb2>
   225f0:	e003      	b.n	225fa <__ieee754_fmod+0xc6>
   225f2:	ea4f 562e 	mov.w	r6, lr, asr #20
   225f6:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
   225fa:	486a      	ldr	r0, [pc, #424]	; (227a4 <__ieee754_fmod+0x270>)
   225fc:	4281      	cmp	r1, r0
   225fe:	db6f      	blt.n	226e0 <__ieee754_fmod+0x1ac>
   22600:	f3c8 0313 	ubfx	r3, r8, #0, #20
   22604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   22608:	4866      	ldr	r0, [pc, #408]	; (227a4 <__ieee754_fmod+0x270>)
   2260a:	4286      	cmp	r6, r0
   2260c:	db58      	blt.n	226c0 <__ieee754_fmod+0x18c>
   2260e:	f3cc 0c13 	ubfx	ip, ip, #0, #20
   22612:	f44c 1c80 	orr.w	ip, ip, #1048576	; 0x100000
   22616:	1bd0      	subs	r0, r2, r7
   22618:	1b89      	subs	r1, r1, r6
   2261a:	d10b      	bne.n	22634 <__ieee754_fmod+0x100>
   2261c:	e01d      	b.n	2265a <__ieee754_fmod+0x126>
   2261e:	ea50 030e 	orrs.w	r3, r0, lr
   22622:	d045      	beq.n	226b0 <__ieee754_fmod+0x17c>
   22624:	ea4f 73de 	mov.w	r3, lr, lsr #31
   22628:	3901      	subs	r1, #1
   2262a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
   2262e:	ea4f 024e 	mov.w	r2, lr, lsl #1
   22632:	d011      	beq.n	22658 <__ieee754_fmod+0x124>
   22634:	eba3 000c 	sub.w	r0, r3, ip
   22638:	4295      	cmp	r5, r2
   2263a:	bf88      	it	hi
   2263c:	f100 30ff 	addhi.w	r0, r0, #4294967295	; 0xffffffff
   22640:	2800      	cmp	r0, #0
   22642:	eba2 0e05 	sub.w	lr, r2, r5
   22646:	ea4f 77d2 	mov.w	r7, r2, lsr #31
   2264a:	dae8      	bge.n	2261e <__ieee754_fmod+0xea>
   2264c:	3901      	subs	r1, #1
   2264e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   22652:	ea4f 0242 	mov.w	r2, r2, lsl #1
   22656:	d1ed      	bne.n	22634 <__ieee754_fmod+0x100>
   22658:	1b50      	subs	r0, r2, r5
   2265a:	eba3 0c0c 	sub.w	ip, r3, ip
   2265e:	4295      	cmp	r5, r2
   22660:	bf88      	it	hi
   22662:	f10c 3cff 	addhi.w	ip, ip, #4294967295	; 0xffffffff
   22666:	f1bc 0f00 	cmp.w	ip, #0
   2266a:	bfa4      	itt	ge
   2266c:	4602      	movge	r2, r0
   2266e:	4663      	movge	r3, ip
   22670:	ea53 0102 	orrs.w	r1, r3, r2
   22674:	d105      	bne.n	22682 <__ieee754_fmod+0x14e>
   22676:	e01b      	b.n	226b0 <__ieee754_fmod+0x17c>
   22678:	0fd1      	lsrs	r1, r2, #31
   2267a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   2267e:	0052      	lsls	r2, r2, #1
   22680:	3e01      	subs	r6, #1
   22682:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   22686:	dbf7      	blt.n	22678 <__ieee754_fmod+0x144>
   22688:	4946      	ldr	r1, [pc, #280]	; (227a4 <__ieee754_fmod+0x270>)
   2268a:	428e      	cmp	r6, r1
   2268c:	da61      	bge.n	22752 <__ieee754_fmod+0x21e>
   2268e:	1b89      	subs	r1, r1, r6
   22690:	2914      	cmp	r1, #20
   22692:	dc6f      	bgt.n	22774 <__ieee754_fmod+0x240>
   22694:	f206 401e 	addw	r0, r6, #1054	; 0x41e
   22698:	40ca      	lsrs	r2, r1
   2269a:	fa03 f000 	lsl.w	r0, r3, r0
   2269e:	fa43 f101 	asr.w	r1, r3, r1
   226a2:	4310      	orrs	r0, r2
   226a4:	430c      	orrs	r4, r1
   226a6:	4623      	mov	r3, r4
   226a8:	4602      	mov	r2, r0
   226aa:	ec43 2b10 	vmov	d0, r2, r3
   226ae:	e788      	b.n	225c2 <__ieee754_fmod+0x8e>
   226b0:	4b3d      	ldr	r3, [pc, #244]	; (227a8 <__ieee754_fmod+0x274>)
   226b2:	0fe4      	lsrs	r4, r4, #31
   226b4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   226b8:	ed94 0b00 	vldr	d0, [r4]
   226bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   226c0:	1b80      	subs	r0, r0, r6
   226c2:	281f      	cmp	r0, #31
   226c4:	dd21      	ble.n	2270a <__ieee754_fmod+0x1d6>
   226c6:	4839      	ldr	r0, [pc, #228]	; (227ac <__ieee754_fmod+0x278>)
   226c8:	1b89      	subs	r1, r1, r6
   226ca:	eba0 0c06 	sub.w	ip, r0, r6
   226ce:	fa07 fc0c 	lsl.w	ip, r7, ip
   226d2:	bf18      	it	ne
   226d4:	2500      	movne	r5, #0
   226d6:	d1ad      	bne.n	22634 <__ieee754_fmod+0x100>
   226d8:	eba3 0c0c 	sub.w	ip, r3, ip
   226dc:	4610      	mov	r0, r2
   226de:	e7c2      	b.n	22666 <__ieee754_fmod+0x132>
   226e0:	1a40      	subs	r0, r0, r1
   226e2:	281f      	cmp	r0, #31
   226e4:	dc0c      	bgt.n	22700 <__ieee754_fmod+0x1cc>
   226e6:	fa09 f900 	lsl.w	r9, r9, r0
   226ea:	fa03 f200 	lsl.w	r2, r3, r0
   226ee:	f201 401e 	addw	r0, r1, #1054	; 0x41e
   226f2:	40c3      	lsrs	r3, r0
   226f4:	ea43 0309 	orr.w	r3, r3, r9
   226f8:	e786      	b.n	22608 <__ieee754_fmod+0xd4>
   226fa:	ec41 0b10 	vmov	d0, r0, r1
   226fe:	e760      	b.n	225c2 <__ieee754_fmod+0x8e>
   22700:	4a2a      	ldr	r2, [pc, #168]	; (227ac <__ieee754_fmod+0x278>)
   22702:	1a52      	subs	r2, r2, r1
   22704:	4093      	lsls	r3, r2
   22706:	2200      	movs	r2, #0
   22708:	e77e      	b.n	22608 <__ieee754_fmod+0xd4>
   2270a:	fa0e fe00 	lsl.w	lr, lr, r0
   2270e:	fa07 f500 	lsl.w	r5, r7, r0
   22712:	f206 401e 	addw	r0, r6, #1054	; 0x41e
   22716:	fa27 f000 	lsr.w	r0, r7, r0
   2271a:	ea40 0c0e 	orr.w	ip, r0, lr
   2271e:	1b50      	subs	r0, r2, r5
   22720:	e77a      	b.n	22618 <__ieee754_fmod+0xe4>
   22722:	ea4f 20ce 	mov.w	r0, lr, lsl #11
   22726:	2800      	cmp	r0, #0
   22728:	4e1e      	ldr	r6, [pc, #120]	; (227a4 <__ieee754_fmod+0x270>)
   2272a:	f77f af66 	ble.w	225fa <__ieee754_fmod+0xc6>
   2272e:	0040      	lsls	r0, r0, #1
   22730:	2800      	cmp	r0, #0
   22732:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   22736:	dcfa      	bgt.n	2272e <__ieee754_fmod+0x1fa>
   22738:	e75f      	b.n	225fa <__ieee754_fmod+0xc6>
   2273a:	ea4f 20c9 	mov.w	r0, r9, lsl #11
   2273e:	2800      	cmp	r0, #0
   22740:	4918      	ldr	r1, [pc, #96]	; (227a4 <__ieee754_fmod+0x270>)
   22742:	f77f af44 	ble.w	225ce <__ieee754_fmod+0x9a>
   22746:	0040      	lsls	r0, r0, #1
   22748:	2800      	cmp	r0, #0
   2274a:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
   2274e:	dcfa      	bgt.n	22746 <__ieee754_fmod+0x212>
   22750:	e73d      	b.n	225ce <__ieee754_fmod+0x9a>
   22752:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   22756:	431c      	orrs	r4, r3
   22758:	f206 36ff 	addw	r6, r6, #1023	; 0x3ff
   2275c:	ea44 5106 	orr.w	r1, r4, r6, lsl #20
   22760:	4610      	mov	r0, r2
   22762:	ec41 0b10 	vmov	d0, r0, r1
   22766:	e72c      	b.n	225c2 <__ieee754_fmod+0x8e>
   22768:	4b0f      	ldr	r3, [pc, #60]	; (227a8 <__ieee754_fmod+0x274>)
   2276a:	eb03 7414 	add.w	r4, r3, r4, lsr #28
   2276e:	ed94 0b00 	vldr	d0, [r4]
   22772:	e726      	b.n	225c2 <__ieee754_fmod+0x8e>
   22774:	291f      	cmp	r1, #31
   22776:	dc07      	bgt.n	22788 <__ieee754_fmod+0x254>
   22778:	f206 401e 	addw	r0, r6, #1054	; 0x41e
   2277c:	fa22 f101 	lsr.w	r1, r2, r1
   22780:	4083      	lsls	r3, r0
   22782:	ea43 0001 	orr.w	r0, r3, r1
   22786:	e78e      	b.n	226a6 <__ieee754_fmod+0x172>
   22788:	4908      	ldr	r1, [pc, #32]	; (227ac <__ieee754_fmod+0x278>)
   2278a:	1b89      	subs	r1, r1, r6
   2278c:	fa43 f001 	asr.w	r0, r3, r1
   22790:	e789      	b.n	226a6 <__ieee754_fmod+0x172>
   22792:	4903      	ldr	r1, [pc, #12]	; (227a0 <__ieee754_fmod+0x26c>)
   22794:	e71b      	b.n	225ce <__ieee754_fmod+0x9a>
   22796:	bf00      	nop
   22798:	7fefffff 	.word	0x7fefffff
   2279c:	7ff00000 	.word	0x7ff00000
   227a0:	fffffbed 	.word	0xfffffbed
   227a4:	fffffc02 	.word	0xfffffc02
   227a8:	00024fd8 	.word	0x00024fd8
   227ac:	fffffbe2 	.word	0xfffffbe2

000227b0 <__ieee754_sqrt>:
   227b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   227b4:	4a63      	ldr	r2, [pc, #396]	; (22944 <__ieee754_sqrt+0x194>)
   227b6:	ec55 4b10 	vmov	r4, r5, d0
   227ba:	43aa      	bics	r2, r5
   227bc:	f000 809f 	beq.w	228fe <__ieee754_sqrt+0x14e>
   227c0:	2d00      	cmp	r5, #0
   227c2:	ee10 ca10 	vmov	ip, s0
   227c6:	462b      	mov	r3, r5
   227c8:	dd54      	ble.n	22874 <__ieee754_sqrt+0xc4>
   227ca:	1529      	asrs	r1, r5, #20
   227cc:	d063      	beq.n	22896 <__ieee754_sqrt+0xe6>
   227ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
   227d2:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   227d6:	07c9      	lsls	r1, r1, #31
   227d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   227dc:	d404      	bmi.n	227e8 <__ieee754_sqrt+0x38>
   227de:	005b      	lsls	r3, r3, #1
   227e0:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   227e4:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   227e8:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   227ec:	2600      	movs	r6, #0
   227ee:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   227f2:	107f      	asrs	r7, r7, #1
   227f4:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   227f8:	f04f 0e16 	mov.w	lr, #22
   227fc:	4634      	mov	r4, r6
   227fe:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   22802:	18a1      	adds	r1, r4, r2
   22804:	4299      	cmp	r1, r3
   22806:	dc02      	bgt.n	2280e <__ieee754_sqrt+0x5e>
   22808:	1a5b      	subs	r3, r3, r1
   2280a:	188c      	adds	r4, r1, r2
   2280c:	4416      	add	r6, r2
   2280e:	005b      	lsls	r3, r3, #1
   22810:	f1be 0e01 	subs.w	lr, lr, #1
   22814:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   22818:	ea4f 0252 	mov.w	r2, r2, lsr #1
   2281c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   22820:	d1ef      	bne.n	22802 <__ieee754_sqrt+0x52>
   22822:	4675      	mov	r5, lr
   22824:	2020      	movs	r0, #32
   22826:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   2282a:	e00a      	b.n	22842 <__ieee754_sqrt+0x92>
   2282c:	d044      	beq.n	228b8 <__ieee754_sqrt+0x108>
   2282e:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   22832:	3801      	subs	r0, #1
   22834:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   22838:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   2283c:	ea4f 0252 	mov.w	r2, r2, lsr #1
   22840:	d043      	beq.n	228ca <__ieee754_sqrt+0x11a>
   22842:	42a3      	cmp	r3, r4
   22844:	eb02 010e 	add.w	r1, r2, lr
   22848:	ddf0      	ble.n	2282c <__ieee754_sqrt+0x7c>
   2284a:	2900      	cmp	r1, #0
   2284c:	eb01 0e02 	add.w	lr, r1, r2
   22850:	db0a      	blt.n	22868 <__ieee754_sqrt+0xb8>
   22852:	46a0      	mov	r8, r4
   22854:	1b1b      	subs	r3, r3, r4
   22856:	4561      	cmp	r1, ip
   22858:	bf88      	it	hi
   2285a:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   2285e:	ebac 0c01 	sub.w	ip, ip, r1
   22862:	4415      	add	r5, r2
   22864:	4644      	mov	r4, r8
   22866:	e7e2      	b.n	2282e <__ieee754_sqrt+0x7e>
   22868:	f1be 0f00 	cmp.w	lr, #0
   2286c:	dbf1      	blt.n	22852 <__ieee754_sqrt+0xa2>
   2286e:	f104 0801 	add.w	r8, r4, #1
   22872:	e7ef      	b.n	22854 <__ieee754_sqrt+0xa4>
   22874:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   22878:	4322      	orrs	r2, r4
   2287a:	d038      	beq.n	228ee <__ieee754_sqrt+0x13e>
   2287c:	2d00      	cmp	r5, #0
   2287e:	d14e      	bne.n	2291e <__ieee754_sqrt+0x16e>
   22880:	4629      	mov	r1, r5
   22882:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   22886:	3915      	subs	r1, #21
   22888:	4613      	mov	r3, r2
   2288a:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   2288e:	2a00      	cmp	r2, #0
   22890:	d0f7      	beq.n	22882 <__ieee754_sqrt+0xd2>
   22892:	02d6      	lsls	r6, r2, #11
   22894:	d450      	bmi.n	22938 <__ieee754_sqrt+0x188>
   22896:	2000      	movs	r0, #0
   22898:	005b      	lsls	r3, r3, #1
   2289a:	02dd      	lsls	r5, r3, #11
   2289c:	4604      	mov	r4, r0
   2289e:	f100 0001 	add.w	r0, r0, #1
   228a2:	d5f9      	bpl.n	22898 <__ieee754_sqrt+0xe8>
   228a4:	461a      	mov	r2, r3
   228a6:	4663      	mov	r3, ip
   228a8:	fa0c fc00 	lsl.w	ip, ip, r0
   228ac:	f1c0 0020 	rsb	r0, r0, #32
   228b0:	40c3      	lsrs	r3, r0
   228b2:	1b09      	subs	r1, r1, r4
   228b4:	4313      	orrs	r3, r2
   228b6:	e78a      	b.n	227ce <__ieee754_sqrt+0x1e>
   228b8:	4561      	cmp	r1, ip
   228ba:	d8b8      	bhi.n	2282e <__ieee754_sqrt+0x7e>
   228bc:	2900      	cmp	r1, #0
   228be:	eb01 0e02 	add.w	lr, r1, r2
   228c2:	dbd1      	blt.n	22868 <__ieee754_sqrt+0xb8>
   228c4:	4698      	mov	r8, r3
   228c6:	2300      	movs	r3, #0
   228c8:	e7c9      	b.n	2285e <__ieee754_sqrt+0xae>
   228ca:	ea53 030c 	orrs.w	r3, r3, ip
   228ce:	d110      	bne.n	228f2 <__ieee754_sqrt+0x142>
   228d0:	0868      	lsrs	r0, r5, #1
   228d2:	1071      	asrs	r1, r6, #1
   228d4:	07f3      	lsls	r3, r6, #31
   228d6:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   228da:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   228de:	bf48      	it	mi
   228e0:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   228e4:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   228e8:	4602      	mov	r2, r0
   228ea:	ec43 2b10 	vmov	d0, r2, r3
   228ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   228f2:	1c6a      	adds	r2, r5, #1
   228f4:	bf16      	itet	ne
   228f6:	1c68      	addne	r0, r5, #1
   228f8:	3601      	addeq	r6, #1
   228fa:	0840      	lsrne	r0, r0, #1
   228fc:	e7e9      	b.n	228d2 <__ieee754_sqrt+0x122>
   228fe:	ee10 2a10 	vmov	r2, s0
   22902:	ee10 0a10 	vmov	r0, s0
   22906:	462b      	mov	r3, r5
   22908:	4629      	mov	r1, r5
   2290a:	f7fe fd51 	bl	213b0 <__aeabi_dmul>
   2290e:	4622      	mov	r2, r4
   22910:	462b      	mov	r3, r5
   22912:	f7fe fb97 	bl	21044 <__adddf3>
   22916:	ec41 0b10 	vmov	d0, r0, r1
   2291a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2291e:	ee10 2a10 	vmov	r2, s0
   22922:	4620      	mov	r0, r4
   22924:	4629      	mov	r1, r5
   22926:	f7fe fb8b 	bl	21040 <__aeabi_dsub>
   2292a:	4602      	mov	r2, r0
   2292c:	460b      	mov	r3, r1
   2292e:	f7fe fe69 	bl	21604 <__aeabi_ddiv>
   22932:	ec41 0b10 	vmov	d0, r0, r1
   22936:	e7da      	b.n	228ee <__ieee754_sqrt+0x13e>
   22938:	4663      	mov	r3, ip
   2293a:	2020      	movs	r0, #32
   2293c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   22940:	e7b6      	b.n	228b0 <__ieee754_sqrt+0x100>
   22942:	bf00      	nop
   22944:	7ff00000 	.word	0x7ff00000

00022948 <__ieee754_log10f>:
   22948:	b508      	push	{r3, lr}
   2294a:	ee10 3a10 	vmov	r3, s0
   2294e:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   22952:	ed2d 8b02 	vpush	{d8}
   22956:	d02b      	beq.n	229b0 <__ieee754_log10f+0x68>
   22958:	2b00      	cmp	r3, #0
   2295a:	db32      	blt.n	229c2 <__ieee754_log10f+0x7a>
   2295c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   22960:	da41      	bge.n	229e6 <__ieee754_log10f+0x9e>
   22962:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   22966:	db35      	blt.n	229d4 <__ieee754_log10f+0x8c>
   22968:	2100      	movs	r1, #0
   2296a:	15da      	asrs	r2, r3, #23
   2296c:	3a7f      	subs	r2, #127	; 0x7f
   2296e:	440a      	add	r2, r1
   22970:	0fd1      	lsrs	r1, r2, #31
   22972:	f1c1 017f 	rsb	r1, r1, #127	; 0x7f
   22976:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   2297a:	f3c3 0316 	ubfx	r3, r3, #0, #23
   2297e:	ee07 2a90 	vmov	s15, r2
   22982:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
   22986:	ee00 3a10 	vmov	s0, r3
   2298a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
   2298e:	f000 f849 	bl	22a24 <__ieee754_logf>
   22992:	eddf 7a17 	vldr	s15, [pc, #92]	; 229f0 <__ieee754_log10f+0xa8>
   22996:	ed9f 7a17 	vldr	s14, [pc, #92]	; 229f4 <__ieee754_log10f+0xac>
   2299a:	ee20 0a27 	vmul.f32	s0, s0, s15
   2299e:	eddf 7a16 	vldr	s15, [pc, #88]	; 229f8 <__ieee754_log10f+0xb0>
   229a2:	eea8 0a07 	vfma.f32	s0, s16, s14
   229a6:	eea8 0a27 	vfma.f32	s0, s16, s15
   229aa:	ecbd 8b02 	vpop	{d8}
   229ae:	bd08      	pop	{r3, pc}
   229b0:	ecbd 8b02 	vpop	{d8}
   229b4:	ed9f 7a11 	vldr	s14, [pc, #68]	; 229fc <__ieee754_log10f+0xb4>
   229b8:	eddf 7a11 	vldr	s15, [pc, #68]	; 22a00 <__ieee754_log10f+0xb8>
   229bc:	ee87 0a27 	vdiv.f32	s0, s14, s15
   229c0:	bd08      	pop	{r3, pc}
   229c2:	ecbd 8b02 	vpop	{d8}
   229c6:	ee70 7a40 	vsub.f32	s15, s0, s0
   229ca:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 22a00 <__ieee754_log10f+0xb8>
   229ce:	ee87 0a87 	vdiv.f32	s0, s15, s14
   229d2:	bd08      	pop	{r3, pc}
   229d4:	eddf 7a0b 	vldr	s15, [pc, #44]	; 22a04 <__ieee754_log10f+0xbc>
   229d8:	ee60 7a27 	vmul.f32	s15, s0, s15
   229dc:	f06f 0118 	mvn.w	r1, #24
   229e0:	ee17 3a90 	vmov	r3, s15
   229e4:	e7c1      	b.n	2296a <__ieee754_log10f+0x22>
   229e6:	ecbd 8b02 	vpop	{d8}
   229ea:	ee30 0a00 	vadd.f32	s0, s0, s0
   229ee:	bd08      	pop	{r3, pc}
   229f0:	3ede5bd9 	.word	0x3ede5bd9
   229f4:	355427db 	.word	0x355427db
   229f8:	3e9a2080 	.word	0x3e9a2080
   229fc:	cc000000 	.word	0xcc000000
   22a00:	00000000 	.word	0x00000000
   22a04:	4c000000 	.word	0x4c000000

00022a08 <nan>:
   22a08:	ed9f 0b01 	vldr	d0, [pc, #4]	; 22a10 <nan+0x8>
   22a0c:	4770      	bx	lr
   22a0e:	bf00      	nop
   22a10:	00000000 	.word	0x00000000
   22a14:	7ff80000 	.word	0x7ff80000

00022a18 <nanf>:
   22a18:	ed9f 0a01 	vldr	s0, [pc, #4]	; 22a20 <nanf+0x8>
   22a1c:	4770      	bx	lr
   22a1e:	bf00      	nop
   22a20:	7fc00000 	.word	0x7fc00000

00022a24 <__ieee754_logf>:
   22a24:	ee10 3a10 	vmov	r3, s0
   22a28:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   22a2c:	d02e      	beq.n	22a8c <__ieee754_logf+0x68>
   22a2e:	2b00      	cmp	r3, #0
   22a30:	db33      	blt.n	22a9a <__ieee754_logf+0x76>
   22a32:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   22a36:	da40      	bge.n	22aba <__ieee754_logf+0x96>
   22a38:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   22a3c:	db34      	blt.n	22aa8 <__ieee754_logf+0x84>
   22a3e:	f04f 0c00 	mov.w	ip, #0
   22a42:	4868      	ldr	r0, [pc, #416]	; (22be4 <__ieee754_logf+0x1c0>)
   22a44:	f3c3 0116 	ubfx	r1, r3, #0, #23
   22a48:	4408      	add	r0, r1
   22a4a:	f400 0200 	and.w	r2, r0, #8388608	; 0x800000
   22a4e:	f082 527e 	eor.w	r2, r2, #1065353216	; 0x3f800000
   22a52:	430a      	orrs	r2, r1
   22a54:	15db      	asrs	r3, r3, #23
   22a56:	ee00 2a10 	vmov	s0, r2
   22a5a:	3b7f      	subs	r3, #127	; 0x7f
   22a5c:	4a62      	ldr	r2, [pc, #392]	; (22be8 <__ieee754_logf+0x1c4>)
   22a5e:	4463      	add	r3, ip
   22a60:	f101 0c0f 	add.w	ip, r1, #15
   22a64:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   22a68:	ea0c 0202 	and.w	r2, ip, r2
   22a6c:	ee30 0a67 	vsub.f32	s0, s0, s15
   22a70:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
   22a74:	bb22      	cbnz	r2, 22ac0 <__ieee754_logf+0x9c>
   22a76:	eeb5 0a40 	vcmp.f32	s0, #0.0
   22a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   22a7e:	d160      	bne.n	22b42 <__ieee754_logf+0x11e>
   22a80:	2b00      	cmp	r3, #0
   22a82:	f040 8092 	bne.w	22baa <__ieee754_logf+0x186>
   22a86:	ed9f 0a59 	vldr	s0, [pc, #356]	; 22bec <__ieee754_logf+0x1c8>
   22a8a:	4770      	bx	lr
   22a8c:	ed9f 7a58 	vldr	s14, [pc, #352]	; 22bf0 <__ieee754_logf+0x1cc>
   22a90:	eddf 7a56 	vldr	s15, [pc, #344]	; 22bec <__ieee754_logf+0x1c8>
   22a94:	ee87 0a27 	vdiv.f32	s0, s14, s15
   22a98:	4770      	bx	lr
   22a9a:	ee70 7a40 	vsub.f32	s15, s0, s0
   22a9e:	ed9f 7a53 	vldr	s14, [pc, #332]	; 22bec <__ieee754_logf+0x1c8>
   22aa2:	ee87 0a87 	vdiv.f32	s0, s15, s14
   22aa6:	4770      	bx	lr
   22aa8:	eddf 7a52 	vldr	s15, [pc, #328]	; 22bf4 <__ieee754_logf+0x1d0>
   22aac:	ee60 7a27 	vmul.f32	s15, s0, s15
   22ab0:	f06f 0c18 	mvn.w	ip, #24
   22ab4:	ee17 3a90 	vmov	r3, s15
   22ab8:	e7c3      	b.n	22a42 <__ieee754_logf+0x1e>
   22aba:	ee30 0a00 	vadd.f32	s0, s0, s0
   22abe:	4770      	bx	lr
   22ac0:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   22ac4:	ee70 7a27 	vadd.f32	s15, s0, s15
   22ac8:	ee07 3a10 	vmov	s14, r3
   22acc:	ee80 4a27 	vdiv.f32	s8, s0, s15
   22ad0:	4849      	ldr	r0, [pc, #292]	; (22bf8 <__ieee754_logf+0x1d4>)
   22ad2:	f5c1 1257 	rsb	r2, r1, #3522560	; 0x35c000
   22ad6:	4408      	add	r0, r1
   22ad8:	f502 7222 	add.w	r2, r2, #648	; 0x288
   22adc:	4302      	orrs	r2, r0
   22ade:	2a00      	cmp	r2, #0
   22ae0:	ed9f 3a46 	vldr	s6, [pc, #280]	; 22bfc <__ieee754_logf+0x1d8>
   22ae4:	eddf 4a46 	vldr	s9, [pc, #280]	; 22c00 <__ieee754_logf+0x1dc>
   22ae8:	eddf 5a46 	vldr	s11, [pc, #280]	; 22c04 <__ieee754_logf+0x1e0>
   22aec:	eddf 3a46 	vldr	s7, [pc, #280]	; 22c08 <__ieee754_logf+0x1e4>
   22af0:	ed9f 5a46 	vldr	s10, [pc, #280]	; 22c0c <__ieee754_logf+0x1e8>
   22af4:	eddf 7a46 	vldr	s15, [pc, #280]	; 22c10 <__ieee754_logf+0x1ec>
   22af8:	eddf 6a46 	vldr	s13, [pc, #280]	; 22c14 <__ieee754_logf+0x1f0>
   22afc:	ee24 6a04 	vmul.f32	s12, s8, s8
   22b00:	eef8 2ac7 	vcvt.f32.s32	s5, s14
   22b04:	ee26 7a06 	vmul.f32	s14, s12, s12
   22b08:	eee7 4a03 	vfma.f32	s9, s14, s6
   22b0c:	eea7 5a23 	vfma.f32	s10, s14, s7
   22b10:	eee4 5a87 	vfma.f32	s11, s9, s14
   22b14:	eee5 6a07 	vfma.f32	s13, s10, s14
   22b18:	eee5 7a87 	vfma.f32	s15, s11, s14
   22b1c:	ee67 7a86 	vmul.f32	s15, s15, s12
   22b20:	eee6 7a87 	vfma.f32	s15, s13, s14
   22b24:	dd2a      	ble.n	22b7c <__ieee754_logf+0x158>
   22b26:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   22b2a:	ee20 7a07 	vmul.f32	s14, s0, s14
   22b2e:	ee27 7a00 	vmul.f32	s14, s14, s0
   22b32:	bb4b      	cbnz	r3, 22b88 <__ieee754_logf+0x164>
   22b34:	ee77 7a87 	vadd.f32	s15, s15, s14
   22b38:	eea7 7ac4 	vfms.f32	s14, s15, s8
   22b3c:	ee30 0a47 	vsub.f32	s0, s0, s14
   22b40:	4770      	bx	lr
   22b42:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   22b46:	eddf 6a34 	vldr	s13, [pc, #208]	; 22c18 <__ieee754_logf+0x1f4>
   22b4a:	eef0 7a47 	vmov.f32	s15, s14
   22b4e:	eee0 7a66 	vfms.f32	s15, s0, s13
   22b52:	ee20 7a00 	vmul.f32	s14, s0, s0
   22b56:	ee27 7a27 	vmul.f32	s14, s14, s15
   22b5a:	2b00      	cmp	r3, #0
   22b5c:	d0ee      	beq.n	22b3c <__ieee754_logf+0x118>
   22b5e:	ee07 3a90 	vmov	s15, r3
   22b62:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 22c1c <__ieee754_logf+0x1f8>
   22b66:	eddf 6a2e 	vldr	s13, [pc, #184]	; 22c20 <__ieee754_logf+0x1fc>
   22b6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   22b6e:	eea7 7ac6 	vfms.f32	s14, s15, s12
   22b72:	ee37 0a40 	vsub.f32	s0, s14, s0
   22b76:	ee97 0aa6 	vfnms.f32	s0, s15, s13
   22b7a:	4770      	bx	lr
   22b7c:	bb13      	cbnz	r3, 22bc4 <__ieee754_logf+0x1a0>
   22b7e:	ee70 7a67 	vsub.f32	s15, s0, s15
   22b82:	eea7 0ac4 	vfms.f32	s0, s15, s8
   22b86:	4770      	bx	lr
   22b88:	eddf 6a24 	vldr	s13, [pc, #144]	; 22c1c <__ieee754_logf+0x1f8>
   22b8c:	ed9f 6a24 	vldr	s12, [pc, #144]	; 22c20 <__ieee754_logf+0x1fc>
   22b90:	ee77 7a87 	vadd.f32	s15, s15, s14
   22b94:	ee62 6aa6 	vmul.f32	s13, s5, s13
   22b98:	eee7 6a84 	vfma.f32	s13, s15, s8
   22b9c:	ee37 7a66 	vsub.f32	s14, s14, s13
   22ba0:	ee37 0a40 	vsub.f32	s0, s14, s0
   22ba4:	ee92 0a86 	vfnms.f32	s0, s5, s12
   22ba8:	4770      	bx	lr
   22baa:	ee07 3a90 	vmov	s15, r3
   22bae:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 22c1c <__ieee754_logf+0x1f8>
   22bb2:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 22c20 <__ieee754_logf+0x1fc>
   22bb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   22bba:	ee27 0a80 	vmul.f32	s0, s15, s0
   22bbe:	eea7 0a87 	vfma.f32	s0, s15, s14
   22bc2:	4770      	bx	lr
   22bc4:	ed9f 7a15 	vldr	s14, [pc, #84]	; 22c1c <__ieee754_logf+0x1f8>
   22bc8:	eddf 6a15 	vldr	s13, [pc, #84]	; 22c20 <__ieee754_logf+0x1fc>
   22bcc:	ee70 7a67 	vsub.f32	s15, s0, s15
   22bd0:	ee27 7a62 	vnmul.f32	s14, s14, s5
   22bd4:	eea7 7a84 	vfma.f32	s14, s15, s8
   22bd8:	ee37 0a40 	vsub.f32	s0, s14, s0
   22bdc:	ee92 0aa6 	vfnms.f32	s0, s5, s13
   22be0:	4770      	bx	lr
   22be2:	bf00      	nop
   22be4:	004afb20 	.word	0x004afb20
   22be8:	007ffff0 	.word	0x007ffff0
   22bec:	00000000 	.word	0x00000000
   22bf0:	cc000000 	.word	0xcc000000
   22bf4:	4c000000 	.word	0x4c000000
   22bf8:	ffcf5c30 	.word	0xffcf5c30
   22bfc:	3e178897 	.word	0x3e178897
   22c00:	3e3a3325 	.word	0x3e3a3325
   22c04:	3e924925 	.word	0x3e924925
   22c08:	3e1cd04f 	.word	0x3e1cd04f
   22c0c:	3e638e29 	.word	0x3e638e29
   22c10:	3f2aaaab 	.word	0x3f2aaaab
   22c14:	3ecccccd 	.word	0x3ecccccd
   22c18:	3eaaaaab 	.word	0x3eaaaaab
   22c1c:	3717f7d1 	.word	0x3717f7d1
   22c20:	3f317180 	.word	0x3f317180

00022c24 <__errno>:
   22c24:	4b01      	ldr	r3, [pc, #4]	; (22c2c <__errno+0x8>)
   22c26:	6818      	ldr	r0, [r3, #0]
   22c28:	4770      	bx	lr
   22c2a:	bf00      	nop
   22c2c:	20001018 	.word	0x20001018
   22c30:	7475227b 	.word	0x7475227b
   22c34:	22656d69 	.word	0x22656d69
   22c38:	6c25203a 	.word	0x6c25203a
   22c3c:	6d222c75 	.word	0x6d222c75
   22c40:	3a226773 	.word	0x3a226773
   22c44:	656e2220 	.word	0x656e2220
   22c48:	6f632077 	.word	0x6f632077
   22c4c:	6769666e 	.word	0x6769666e
   22c50:	70706120 	.word	0x70706120
   22c54:	6465696c 	.word	0x6465696c
   22c58:	000a7d22 	.word	0x000a7d22
   22c5c:	73707061 	.word	0x73707061
   22c60:	7277742f 	.word	0x7277742f
   22c64:	6761745f 	.word	0x6761745f
   22c68:	6d64745f 	.word	0x6d64745f
   22c6c:	72732f61 	.word	0x72732f61
   22c70:	616d2f63 	.word	0x616d2f63
   22c74:	632e6e69 	.word	0x632e6e69
   22c78:	00000000 	.word	0x00000000
   22c7c:	7475227b 	.word	0x7475227b
   22c80:	22656d69 	.word	0x22656d69
   22c84:	6c25203a 	.word	0x6c25203a
   22c88:	6d222c75 	.word	0x6d222c75
   22c8c:	3a226773 	.word	0x3a226773
   22c90:	74732220 	.word	0x74732220
   22c94:	5f747261 	.word	0x5f747261
   22c98:	655f7872 	.word	0x655f7872
   22c9c:	726f7272 	.word	0x726f7272
   22ca0:	3a73252c 	.word	0x3a73252c
   22ca4:	7d226425 	.word	0x7d226425
   22ca8:	0000000a 	.word	0x0000000a
   22cac:	7475227b 	.word	0x7475227b
   22cb0:	22656d69 	.word	0x22656d69
   22cb4:	6c25203a 	.word	0x6c25203a
   22cb8:	6d222c75 	.word	0x6d222c75
   22cbc:	3a226773 	.word	0x3a226773
   22cc0:	74732220 	.word	0x74732220
   22cc4:	5f747261 	.word	0x5f747261
   22cc8:	655f7874 	.word	0x655f7874
   22ccc:	726f7272 	.word	0x726f7272
   22cd0:	3a73252c 	.word	0x3a73252c
   22cd4:	7d226425 	.word	0x7d226425
   22cd8:	0000000a 	.word	0x0000000a
   22cdc:	7475227b 	.word	0x7475227b
   22ce0:	22656d69 	.word	0x22656d69
   22ce4:	6c25203a 	.word	0x6c25203a
   22ce8:	6d222c75 	.word	0x6d222c75
   22cec:	3a226773 	.word	0x3a226773
   22cf0:	78722220 	.word	0x78722220
   22cf4:	7272655f 	.word	0x7272655f
   22cf8:	252c726f 	.word	0x252c726f
   22cfc:	64253a73 	.word	0x64253a73
   22d00:	000a7d22 	.word	0x000a7d22
   22d04:	7475227b 	.word	0x7475227b
   22d08:	22656d69 	.word	0x22656d69
   22d0c:	6c25203a 	.word	0x6c25203a
   22d10:	65222c75 	.word	0x65222c75
   22d14:	22636578 	.word	0x22636578
   22d18:	2522203a 	.word	0x2522203a
   22d1c:	0a7d2273 	.word	0x0a7d2273
   22d20:	00000000 	.word	0x00000000
   22d24:	6564227b 	.word	0x6564227b
   22d28:	65636976 	.word	0x65636976
   22d2c:	2264695f 	.word	0x2264695f
   22d30:	6c25223d 	.word	0x6c25223d
   22d34:	00002258 	.word	0x00002258
   22d38:	6170222c 	.word	0x6170222c
   22d3c:	3d64696e 	.word	0x3d64696e
   22d40:	22582522 	.word	0x22582522
   22d44:	00000000 	.word	0x00000000
   22d48:	6461222c 	.word	0x6461222c
   22d4c:	3d227264 	.word	0x3d227264
   22d50:	22582522 	.word	0x22582522
   22d54:	00000000 	.word	0x00000000
   22d58:	6170222c 	.word	0x6170222c
   22d5c:	695f7472 	.word	0x695f7472
   22d60:	223d2264 	.word	0x223d2264
   22d64:	22586c25 	.word	0x22586c25
   22d68:	00000000 	.word	0x00000000
   22d6c:	6f6c222c 	.word	0x6f6c222c
   22d70:	64695f74 	.word	0x64695f74
   22d74:	25223d22 	.word	0x25223d22
   22d78:	7d22586c 	.word	0x7d22586c
   22d7c:	0000000a 	.word	0x0000000a
   22d80:	7475227b 	.word	0x7475227b
   22d84:	22656d69 	.word	0x22656d69
   22d88:	6c25203a 	.word	0x6c25203a
   22d8c:	6d222c75 	.word	0x6d222c75
   22d90:	3a226773 	.word	0x3a226773
   22d94:	72662220 	.word	0x72662220
   22d98:	5f656d61 	.word	0x5f656d61
   22d9c:	61727564 	.word	0x61727564
   22da0:	6e6f6974 	.word	0x6e6f6974
   22da4:	25203d20 	.word	0x25203d20
   22da8:	73752064 	.word	0x73752064
   22dac:	7d226365 	.word	0x7d226365
   22db0:	0000000a 	.word	0x0000000a
   22db4:	7475227b 	.word	0x7475227b
   22db8:	22656d69 	.word	0x22656d69
   22dbc:	6c25203a 	.word	0x6c25203a
   22dc0:	6d222c75 	.word	0x6d222c75
   22dc4:	3a226773 	.word	0x3a226773
   22dc8:	48532220 	.word	0x48532220
   22dcc:	75645f52 	.word	0x75645f52
   22dd0:	69746172 	.word	0x69746172
   22dd4:	3d206e6f 	.word	0x3d206e6f
   22dd8:	20642520 	.word	0x20642520
   22ddc:	63657375 	.word	0x63657375
   22de0:	000a7d22 	.word	0x000a7d22
   22de4:	7475227b 	.word	0x7475227b
   22de8:	22656d69 	.word	0x22656d69
   22dec:	6c25203a 	.word	0x6c25203a
   22df0:	6d222c75 	.word	0x6d222c75
   22df4:	3a226773 	.word	0x3a226773
   22df8:	6f682220 	.word	0x6f682220
   22dfc:	666f646c 	.word	0x666f646c
   22e00:	203d2066 	.word	0x203d2066
   22e04:	75206425 	.word	0x75206425
   22e08:	22636573 	.word	0x22636573
   22e0c:	00000a7d 	.word	0x00000a7d
   22e10:	30317764 	.word	0x30317764
   22e14:	255f3030 	.word	0x255f3030
   22e18:	00000064 	.word	0x00000064
   22e1c:	30337764 	.word	0x30337764
   22e20:	255f3030 	.word	0x255f3030
   22e24:	00000064 	.word	0x00000064
   22e28:	5f627775 	.word	0x5f627775
   22e2c:	00717269 	.word	0x00717269
   22e30:	65737341 	.word	0x65737341
   22e34:	40207472 	.word	0x40207472
   22e38:	25783020 	.word	0x25783020
   22e3c:	00000a78 	.word	0x00000a78
   22e40:	65737341 	.word	0x65737341
   22e44:	40207472 	.word	0x40207472
   22e48:	25783020 	.word	0x25783020
   22e4c:	202d2078 	.word	0x202d2078
   22e50:	253a7325 	.word	0x253a7325
   22e54:	00000a64 	.word	0x00000a64
   22e58:	61686e55 	.word	0x61686e55
   22e5c:	656c646e 	.word	0x656c646e
   22e60:	6e692064 	.word	0x6e692064
   22e64:	72726574 	.word	0x72726574
   22e68:	20747075 	.word	0x20747075
   22e6c:	646c2528 	.word	0x646c2528
   22e70:	65202c29 	.word	0x65202c29
   22e74:	70656378 	.word	0x70656378
   22e78:	6e6f6974 	.word	0x6e6f6974
   22e7c:	20707320 	.word	0x20707320
   22e80:	30257830 	.word	0x30257830
   22e84:	0a786c38 	.word	0x0a786c38
   22e88:	00000000 	.word	0x00000000
   22e8c:	3a307220 	.word	0x3a307220
   22e90:	30257830 	.word	0x30257830
   22e94:	20786c38 	.word	0x20786c38
   22e98:	3a317220 	.word	0x3a317220
   22e9c:	30257830 	.word	0x30257830
   22ea0:	20786c38 	.word	0x20786c38
   22ea4:	3a327220 	.word	0x3a327220
   22ea8:	30257830 	.word	0x30257830
   22eac:	20786c38 	.word	0x20786c38
   22eb0:	3a337220 	.word	0x3a337220
   22eb4:	30257830 	.word	0x30257830
   22eb8:	0a786c38 	.word	0x0a786c38
   22ebc:	00000000 	.word	0x00000000
   22ec0:	3a347220 	.word	0x3a347220
   22ec4:	30257830 	.word	0x30257830
   22ec8:	20786c38 	.word	0x20786c38
   22ecc:	3a357220 	.word	0x3a357220
   22ed0:	30257830 	.word	0x30257830
   22ed4:	20786c38 	.word	0x20786c38
   22ed8:	3a367220 	.word	0x3a367220
   22edc:	30257830 	.word	0x30257830
   22ee0:	20786c38 	.word	0x20786c38
   22ee4:	3a377220 	.word	0x3a377220
   22ee8:	30257830 	.word	0x30257830
   22eec:	0a786c38 	.word	0x0a786c38
   22ef0:	00000000 	.word	0x00000000
   22ef4:	3a387220 	.word	0x3a387220
   22ef8:	30257830 	.word	0x30257830
   22efc:	20786c38 	.word	0x20786c38
   22f00:	3a397220 	.word	0x3a397220
   22f04:	30257830 	.word	0x30257830
   22f08:	20786c38 	.word	0x20786c38
   22f0c:	3a303172 	.word	0x3a303172
   22f10:	30257830 	.word	0x30257830
   22f14:	20786c38 	.word	0x20786c38
   22f18:	3a313172 	.word	0x3a313172
   22f1c:	30257830 	.word	0x30257830
   22f20:	0a786c38 	.word	0x0a786c38
   22f24:	00000000 	.word	0x00000000
   22f28:	3a323172 	.word	0x3a323172
   22f2c:	30257830 	.word	0x30257830
   22f30:	20786c38 	.word	0x20786c38
   22f34:	3a726c20 	.word	0x3a726c20
   22f38:	30257830 	.word	0x30257830
   22f3c:	20786c38 	.word	0x20786c38
   22f40:	3a637020 	.word	0x3a637020
   22f44:	30257830 	.word	0x30257830
   22f48:	20786c38 	.word	0x20786c38
   22f4c:	3a727370 	.word	0x3a727370
   22f50:	30257830 	.word	0x30257830
   22f54:	0a786c38 	.word	0x0a786c38
   22f58:	00000000 	.word	0x00000000
   22f5c:	52534349 	.word	0x52534349
   22f60:	2578303a 	.word	0x2578303a
   22f64:	786c3830 	.word	0x786c3830
   22f68:	53464820 	.word	0x53464820
   22f6c:	78303a52 	.word	0x78303a52
   22f70:	6c383025 	.word	0x6c383025
   22f74:	46432078 	.word	0x46432078
   22f78:	303a5253 	.word	0x303a5253
   22f7c:	38302578 	.word	0x38302578
   22f80:	000a786c 	.word	0x000a786c
   22f84:	52414642 	.word	0x52414642
   22f88:	2578303a 	.word	0x2578303a
   22f8c:	786c3830 	.word	0x786c3830
   22f90:	464d4d20 	.word	0x464d4d20
   22f94:	303a5241 	.word	0x303a5241
   22f98:	38302578 	.word	0x38302578
   22f9c:	000a786c 	.word	0x000a786c
   22fa0:	656c6469 	.word	0x656c6469
   22fa4:	00000000 	.word	0x00000000
   22fa8:	6e69616d 	.word	0x6e69616d
   22fac:	00000000 	.word	0x00000000
   22fb0:	7379736d 	.word	0x7379736d
   22fb4:	0000315f 	.word	0x0000315f
   22fb8:	616d6474 	.word	0x616d6474
   22fbc:	00000000 	.word	0x00000000
   22fc0:	7475227b 	.word	0x7475227b
   22fc4:	22656d69 	.word	0x22656d69
   22fc8:	6c25203a 	.word	0x6c25203a
   22fcc:	6d222c75 	.word	0x6d222c75
   22fd0:	3a226773 	.word	0x3a226773
   22fd4:	64742220 	.word	0x64742220
   22fd8:	705f616d 	.word	0x705f616d
   22fdc:	695f676b 	.word	0x695f676b
   22fe0:	2274696e 	.word	0x2274696e
   22fe4:	00000a7d 	.word	0x00000a7d
   22fe8:	7475227b 	.word	0x7475227b
   22fec:	22656d69 	.word	0x22656d69
   22ff0:	6c25203a 	.word	0x6c25203a
   22ff4:	6d222c75 	.word	0x6d222c75
   22ff8:	3a226773 	.word	0x3a226773
   22ffc:	64742220 	.word	0x64742220
   23000:	705f616d 	.word	0x705f616d
   23004:	645f676b 	.word	0x645f676b
   23008:	226e776f 	.word	0x226e776f
   2300c:	00000a7d 	.word	0x00000a7d
   23010:	746f6c73 	.word	0x746f6c73
   23014:	6d69745f 	.word	0x6d69745f
   23018:	635f7265 	.word	0x635f7265
   2301c:	0000746e 	.word	0x0000746e
   23020:	65707573 	.word	0x65707573
   23024:	61726672 	.word	0x61726672
   23028:	635f656d 	.word	0x635f656d
   2302c:	0000746e 	.word	0x0000746e
   23030:	65707573 	.word	0x65707573
   23034:	61726672 	.word	0x61726672
   23038:	6d5f656d 	.word	0x6d5f656d
   2303c:	00737369 	.word	0x00737369
   23040:	706f7264 	.word	0x706f7264
   23044:	5f646570 	.word	0x5f646570
   23048:	746f6c73 	.word	0x746f6c73
   2304c:	00000073 	.word	0x00000073

00023050 <g_stats_map_tdma_stat_section>:
   23050:	30100014 00180002 00023020 3030001c     ...0.... 0....00
   23060:	00200002 00023040 00706363 7475227b     .. .@0..ccp.{"ut
   23070:	22656d69 6c25203a 6d222c75 3a226773     ime": %lu,"msg":
   23080:	77752220 63635f62 6b705f70 6e695f67      "uwb_ccp_pkg_in
   23090:	7d227469 0000000a 7473616d 635f7265     it"}....master_c
   230a0:	0000746e 76616c73 6e635f65 00000074     nt..slave_cnt...
   230b0:	646e6573 00000000 635f7874 6c706d6f     send....tx_compl
   230c0:	00657465 635f7872 6c706d6f 00657465     ete.rx_complete.
   230d0:	725f7872 79616c65 00006465 735f7872     rx_relayed..rx_s
   230e0:	74726174 7272655f 0000726f 755f7872     tart_error..rx_u
   230f0:	6c6f736e 74696369 00006465 6f5f7872     nsolicited..rx_o
   23100:	72656874 6172665f 0000656d 78727874     ther_frame..txrx
   23110:	7272655f 0000726f 735f7874 74726174     _error..tx_start
   23120:	7272655f 0000726f 725f7874 79616c65     _error..tx_relay
   23130:	7272655f 0000726f 725f7874 79616c65     _error..tx_relay
   23140:	006b6f5f 5f717269 6574616c 0079636e     _ok.irq_latency.
   23150:	6c5f736f 625f7461 6e696865 00000064     os_lat_behind...
   23160:	6c5f736f 6d5f7461 69677261 0000006e     os_lat_margin...
   23170:	745f7872 6f656d69 00007475 5f6d6573     rx_timeout..sem_
   23180:	656d6974 0074756f 65736572 00000074     timeout.reset...

00023190 <g_stats_map_uwb_ccp_stat_section>:
   23190:	30980014 00180002 000230a4 30b0001c     ...0.....0.....0
   231a0:	00200002 00023270 30b80024 00280002     .. .p2..$..0..(.
   231b0:	000230c4 30d0002c 00300002 000230dc     .0..,..0..0..0..
   231c0:	30ec0034 00380002 000230fc 310c003c     4..0..8..0..<..1
   231d0:	00400002 00023118 31280044 00480002     ..@..1..D.(1..H.
   231e0:	00023138 3144004c 00500002 00023150     81..L.D1..P.P1..
   231f0:	31600054 00580002 00023170 317c005c     T.`1..X.p1..\.|1
   23200:	00600002 00023188 7475227b 22656d69     ..`..1..{"utime"
   23210:	6c25203a 6d222c75 3a226773 75732220     : %lu,"msg": "su
   23220:	66726570 656d6172 7365725f 7d227465     perframe_reset"}
   23230:	0000000a 00676e72 7475227b 22656d69     ....rng.{"utime"
   23240:	6c25203a 6d222c75 3a226773 6e722220     : %lu,"msg": "rn
   23250:	6b705f67 6e695f67 7d227469 0000000a     g_pkg_init"}....
   23260:	5f676e72 75716572 00747365 5f676e72     rng_request.rng_
   23270:	7473696c 00006e65 655f7872 726f7272     listen..rx_error
   23280:	00000000 655f7874 726f7272 00000000     ....tx_error....
   23290:	706d6f63 6574656c 0062635f 65707573     complete_cb.supe
   232a0:	61726672 725f656d 74657365 00000000     rframe_reset....

000232b0 <g_stats_map_rng_stat_section>:
   232b0:	32600014 00180002 0002326c 30b8001c     ..`2....l2.....0
   232c0:	00200002 000230c4 30ec0024 00280002     .. ..0..$..0..(.
   232d0:	000230fc 3278002c 00300002 00023284     .0..,.x2..0..2..
   232e0:	31700034 00380002 00023290 3188003c     4.p1..8..2..<..1
   232f0:	00400002 0002329c 7272652c 203a726f     ..@..2..,error: 
   23300:	6b6e5522 6e776f6e 61724620 4320656d     "Unknown Frame C
   23310:	2265646f 7825202c 0000000a 6d697475     ode", %x....utim
   23320:	00000065 00716573 00000063 00646975     e...seq.c...uid.
   23330:	6469756f 00000000 007a6172 7a617262     ouid....raz.braz
   23340:	00000000 69737372 00000000 00736f6c     ....rssi....los.
   23350:	006d7070 00737473 00000000 7475227b     ppm.sts.....{"ut
   23360:	22656d69 6c25203a 6d222c75 3a226773     ime": %lu,"msg":
   23370:	77752220 63775f62 6b705f73 6e695f67      "uwb_wcs_pkg_in
   23380:	7d227469 0000000a                       it"}....

00023388 <stdout>:
   23388:	200005cc                                ... 

0002338c <MemFile_methods>:
   2338c:	0000e37b 00000000 0000002f 00646c25     {......./...%ld.
   2339c:	646c6c25 00000000 6c65643c 0000003e     %lld....<del>...
   233ac:	3d207325 0a732520 00000000 656e6f44     %s = %s.....Done
   233bc:	0000000a 6c696146 74206465 6f63206f     ....Failed to co
   233cc:	74696d6d 0000000a 6d6d6f63 00007469     mmit....commit..
   233dc:	00007325 706d7564 00000000 6e6e7572     %s..dump....runn
   233ec:	00676e69 65766173 00000000 6e6e6143     ing.save....Cann
   233fc:	6420746f 6c707369 76207961 65756c61     ot display value
   2340c:	0000000a 6c696146 74206465 6573206f     ....Failed to se
   2341c:	65202c74 203a7272 000a6425 61766e49     t, err: %d..Inva
   2342c:	2064696c 73677261 0000000a 666e6f63     lid args....conf
   2343c:	00006769 006c6176                       ig..val.

00023444 <conf_nmgr_handlers>:
   23444:	0000ef5d 0000eea5 75255b1b 00000044     ]........[%uD...
   23454:	75255b1b 00000043 6c363025 00002075     .[%uC...%06lu ..
   23464:	706c6568 0000000a 30332d25 00000073     help....%-30s...
   23474:	30332d25 0a732573 00000000 65726e55     %-30s%s.....Unre
   23484:	6e676f63 64657a69 6d6f6320 646e616d     cognized command
   23494:	0000000a 65726e55 6e676f63 64657a69     ....Unrecognized
   234a4:	6d6f6320 646e616d 7325203a 0000000a      command: %s....
   234b4:	656c6c49 206c6167 75646f6d 2520656c     Illegal module %
   234c4:	00000a73 656c6c49 206c6167 61726170     s...Illegal para
   234d4:	6574656d 00000a72 706c6568 00000000     meter...help....
   234e4:	656c6573 00007463 7373694d 20676e69     select..Missing 
   234f4:	61726170 6574656d 00000a72 206f6e28     parameter...(no 
   23504:	706c6568 61766120 62616c69 0a29656c     help available).
   23514:	00000000 6d6d7553 3a797261 0000000a     ....Summary:....
   23524:	67617355 000a3a65 61726150 6574656d     Usage:..Paramete
   23534:	0a3a7372 00000000 69617641 6c62616c     rs:.....Availabl
   23544:	6f6d2065 656c7564 000a3a73 73206f54     e modules:..To s
   23554:	63656c65 20612074 75646f6d 202c656c     elect a module, 
   23564:	65746e65 73272072 63656c65 6d3c2074     enter 'select <m
   23574:	6c75646f 616e2065 273e656d 00000a2e     odule name>'....
   23584:	0000203e 73257325 00000000 206f6f54     > ..%s%s....Too 
   23594:	796e616d 72617020 74656d61 20737265     many parameters 
   235a4:	78616d28 757a2520 00000a29 65707954     (max %zu)...Type
   235b4:	65682720 2027706c 20726f66 7473696c      'help' for list
   235c4:	20666f20 69617661 6c62616c 6f632065      of available co
   235d4:	6e616d6d 000a7364 2078614d 626d756e     mmands..Max numb
   235e4:	6f207265 6f6d2066 656c7564 65722073     er of modules re
   235f4:	65686361 00000a64 2078614d 626d756e     ached...Max numb
   23604:	6f207265 6f632066 7461706d 6d6f6320     er of compat com
   23614:	646e616d 65722073 65686361 00000a64     mands reached...
   23624:	706d6f63 00007461 656c6c49 206c6167     compat..Illegal 
   23634:	75646f6d 2520656c 64202c73 75616665     module %s, defau
   23644:	6920746c 6f6e2073 68632074 65676e61     lt is not change
   23654:	00000a64 6c656873 0000006c              d...shell...

00023660 <shell_cmd_help>:
   23660:	00000001 0000ffb9 000234dc 00000000     .........4......

00023670 <shell_cmd_select_module>:
   23670:	00000001 0000fd7d 000234e4 00000000     ....}....4......
   23680:	0009060a 20643425 20783325 000a7325     ....%4d %3x %s..
   23690:	706d654d 736c6f6f 000a203a 736b6c62     Mempools: ..blks
   236a0:	0000007a 73323325 73352520 73342520     z...%32s %5s %4s
   236b0:	73342520 73342520 0000000a 006e696d      %4s %4s....min.
   236c0:	65657266 00000000 73323325 64352520     free....%32s %5d
   236d0:	64342520 64342520 64342520 0000000a      %4d %4d %4d....
   236e0:	6c756f43 74276e64 6e696620 20612064     Couldn't find a 
   236f0:	6f6d656d 70207972 206c6f6f 68746977     memory pool with
   23700:	6d616e20 73252065 0000000a 61766e49      name %s....Inva
   23710:	2064696c 65746164 656d6974 0000000a     lid datetime....
   23720:	00676c66 00666572 20733425 20733325     flg.ref.%4s %3s 
   23730:	000a7325 6b736154 0a203a73 00000000     %s..Tasks: .....
   23740:	00697270 6b736174 00000000 20733825     pri.task....%8s 
   23750:	20733325 20733325 20733825 20733825     %3s %3s %8s %8s 
   23760:	20733825 20733825 20733825 20733825     %8s %8s %8s %8s 
   23770:	0a733325 00000000 6568636e 00006b63     %3s.....ncheck..
   23780:	6568636c 00006b63 756b7473 00006573     lcheck..stkuse..
   23790:	736b7473 0000007a 00777363 746e7572     stksz...csw.runt
   237a0:	00656d69 00646974 20733825 20753325     ime.tid.%8s %3u 
   237b0:	20753325 756c3825 6c382520 38252075     %3u %8lu %8lu %8
   237c0:	38252075 38252075 2520756c 0a756c38     u %8u %8lu %8lu.
   237d0:	00000000 6c756f43 74276e64 6e696620     ....Couldn't fin
   237e0:	61742064 77206b73 20687469 656d616e     d task with name
   237f0:	0a732520 00000000 6564736c 00000076      %s.....lsdev...
   23800:	7473696c 20534f20 69766564 00736563     list OS devices.
   23810:	65736572 79732074 6d657473 00000000     reset system....
   23820:	776f6873 73797320 206d6574 65746164     show system date
   23830:	00000000 65746164 656d6974 206f7420     ....datetime to 
   23840:	00746573 776f6873 73797320 206d6574     set.show system 
   23850:	6f6f706d 0000006c 6f6f706d 616e206c     mpool...mpool na
   23860:	0000656d 776f6873 20736f20 6b736174     me..show os task
   23870:	00000073 6b736174 6d616e20 00000065     s...task name...

00023880 <date_help>:
   23880:	00023820 00000000 0002388c               8.......8..

0002388c <date_params>:
   2388c:	0002373c 00023834 00000000 00000000     <7..48..........

0002389c <ls_dev_help>:
   2389c:	00023800 00000000 00000000              .8..........

000238a8 <mpool_help>:
   238a8:	00023844 00000000 000238b4              D8.......8..

000238b4 <mpool_params>:
   238b4:	0002373c 00023858 00000000 00000000     <7..X8..........

000238c4 <os_commands>:
   238c4:	00000001 00010d61 0002386c 00023938     ....a...l8..89..
   238d4:	00000001 00010be1 00023850 000238a8     ........P8...8..
   238e4:	00000001 00010c91 0002382c 00023880     ........,8...8..
   238f4:	00000001 00010d15 00023188 00023924     .........1..$9..
   23904:	00000001 00010d29 000237f8 0002389c     ....)....7...8..
	...

00023924 <reset_help>:
   23924:	00023810 00000000 00023930              .8......09..

00023930 <reset_params>:
	...

00023938 <tasks_help>:
   23938:	00023864 00000000 00023944              d8......D9..

00023944 <tasks_params>:
   23944:	0002373c 00023874 00000000 00000000     <7..t8..........
   23954:	00006e6f 6e6f4320 656c6f73 63695420     on.. Console Tic
   23964:	6f20736b 00000a6e 0066666f 6e6f4320     ks on...off. Con
   23974:	656c6f73 63695420 6f20736b 000a6666     sole Ticks off..
   23984:	61735520 203a6567 6b636974 6f5b2073      Usage: ticks [o
   23994:	666f7c6e 000a5d66 6d6f7270 00007470     n|off]..prompt..
   239a4:	6b636974 00000073 6c656873 6974206c     ticks...shell ti
   239b4:	20736b63 6d6d6f63 00646e61 67617375     cks command.usag
   239c4:	74203a65 736b6369 6e6f5b20 66666f7c     e: ticks [on|off
   239d4:	0000005d 6e727574 006e6f20              ]...turn on.

000239e0 <prompt_commands>:
   239e0:	00000000 00010e89 000239a4 00023a00     .........9...:..
	...

00023a00 <ticks_help>:
   23a00:	000239ac 000239c0 00023a0c              .9...9...:..

00023a0c <ticks_params>:
   23a0c:	00023954 000239d8 0002396c 000239d8     T9...9..l9...9..
	...
   23a24:	00642573 74617473 00000000 5f6d756e     s%d.stat....num_
   23a34:	69676572 72657473 00006465              registered..

00023a40 <g_stats_map_stats>:
   23a40:	3a300014 00000002 00006372 74617473     ..0:....rc..stat
   23a50:	73696c5f 00000074 756f7267 00000070     _list...group...
   23a60:	00737973 6c656966 00007364 203a7325     sys.fields..%s: 
   23a70:	000a7525 203a7325 0a756c25 00000000     %u..%s: %lu.....
   23a80:	203a7325 756c6c25 0000000a 6e6b6e55     %s: %llu....Unkn
   23a90:	206e776f 74617473 7a697320 6f662065     own stat size fo
   23aa0:	73252072 0a752520 00000000 0a732509     r %s %u......%s.
   23ab0:	00000000 7473754d 65707320 79666963     ....Must specify
   23ac0:	73206120 69746174 63697473 6d616e20      a statistic nam
   23ad0:	6f742065 6d756420 70202c70 6973736f     e to dump, possi
   23ae0:	20656c62 656d616e 72612073 000a3a65     ble names are:..
   23af0:	6c756f43 6f6e2064 69662074 7320646e     Could not find s
   23b00:	69746174 63697473 6f726720 25207075     tatistic group %
   23b10:	00000a73 252f7325 00000073 00386d36     s...%s/%s...6m8.
   23b20:	6b303538 00000000 6b303131 00000000     850k....110k....
   23b30:	20766e69 61657270 6c5f626d 000a6e65     inv preamb_len..
   23b40:	63627775 00006766 00627775 00667270     uwbcfg..uwb.prf.
   23b50:	61746164 65746172 00000000 705f7872     datarate....rx_p
   23b60:	656c6361 0000006e 705f7872 6d616572     aclen...rx_pream
   23b70:	6469635f 00000078 735f7872 79746466     _cidx...rx_sfdty
   23b80:	00006570 735f7872 745f6466 0000006f     pe..rx_sfd_to...
   23b90:	705f7872 6f6d7268 00006564 645f7872     rx_phrmode..rx_d
   23ba0:	5f676169 00006e65 705f7874 6d616572     iag_en..tx_pream
   23bb0:	6469635f 00000078 705f7874 6d616572     _cidx...tx_pream
   23bc0:	6e656c5f 00000000 66727874 776f705f     _len....txrf_pow
   23bd0:	635f7265 7372616f 00000065 66727874     er_coarse...txrf
   23be0:	776f705f 665f7265 00656e69 615f7872     _power_fine.rx_a
   23bf0:	6c64746e 00000079 615f7874 6c64746e     ntdly...tx_antdl
   23c00:	00000079 615f7872 735f746e 72617065     y...rx_ant_separ
   23c10:	6f697461 0000006e 5f747865 646b6c63     ation...ext_clkd
   23c20:	0000796c 656c6f72 00000000 6d617266     ly..role....fram
   23c30:	69665f65 7265746c 00000000 6c617478     e_filter....xtal
   23c40:	6972745f 0000006d 20766e69 61657270     _trim...inv prea
   23c50:	6f63206d 28206564 6e697375 64252067     m code (using %d
   23c60:	00000a29 20766e69 20667270 000a6425     )...inv prf %d..
   23c70:	20766e69 000a6863 20766e69 61746164     inv ch..inv data
   23c80:	65746172 0000000a 20766e69 6c636170     rate....inv pacl
   23c90:	000a6e65 20766e69 54646673 0a657079     en..inv sfdType.
   23ca0:	00000000 20766e69 72616f63 74206573     ....inv coarse t
   23cb0:	72777078 0000000a 64343025 3230252d     xpwr....%04d-%02
   23cc0:	30252d64 25546432 3a643230 64323025     d-%02dT%02d:%02d
   23cd0:	3230253a 30252e64 00006436 30256325     :%02d.%06d..%c%0
   23ce0:	253a6432 00643230                       2d:%02d.

00023ce8 <month_days>:
   23ce8:	0000001f 0000001c 0000001f 0000001e     ................
   23cf8:	0000001f 0000001e 0000001f 0000001f     ................
   23d08:	0000001e 0000001f 0000001e 0000001f     ................

00023d18 <crc16tab>:
   23d18:	10210000 30632042 50a54084 70e760c6     ..!.B c0.@.P.`.p
   23d28:	91298108 b16ba14a d1adc18c f1efe1ce     ..).J.k.........
   23d38:	02101231 22523273 429452b5 62d672f7     1...s2R".R.B.r.b
   23d48:	83189339 a35ab37b c39cd3bd e3def3ff     9...{.Z.........
   23d58:	34432462 14010420 74c764e6 548544a4     b$C4 ....d.t.D.T
   23d68:	b54ba56a 95098528 f5cfe5ee d58dc5ac     j.K.(...........
   23d78:	26723653 06301611 66f676d7 46b45695     S6r&..0..v.f.V.F
   23d88:	a77ab75b 87389719 e7fef7df c7bcd79d     [.z...8.........
   23d98:	58e548c4 78a76886 18610840 38232802     .H.X.h.x@.a..(#8
   23da8:	d9edc9cc f9afe98e 99698948 b92ba90a     ........H.i...+.
   23db8:	4ad45af5 6a967ab7 0a501a71 2a123a33     .Z.J.z.jq.P.3:.*
   23dc8:	cbdcdbfd eb9efbbf 8b589b79 ab1abb3b     ........y.X.;...
   23dd8:	7c876ca6 5cc54ce4 3c032c22 1c410c60     .l.|.L.\",.<`.A.
   23de8:	fd8fedae ddcdcdec bd0bad2a 9d498d68     ........*...h.I.
   23df8:	6eb67e97 4ef45ed5 2e323e13 0e701e51     .~.n.^.N.>2.Q.p.
   23e08:	efbeff9f cffcdfdd af3abf1b 8f789f59     ..........:.Y.x.
   23e18:	81a99188 a1ebb1ca c12dd10c e16ff14e     ..........-.N.o.
   23e28:	00a11080 20e330c2 40255004 60677046     .....0. .P%@Fpg`
   23e38:	939883b9 b3daa3fb d31cc33d f35ee37f     ........=.....^.
   23e48:	129002b1 32d222f3 52144235 72566277     .....".25B.RwbVr
   23e58:	a5cbb5ea 858995a8 e54ff56e c50dd52c     ........n.O.,...
   23e68:	24c334e2 048114a0 64477466 44055424     .4.$....ftGd$T.D
   23e78:	b7faa7db 97b88799 f77ee75f d73cc71d     ........_.~...<.
   23e88:	36f226d3 16b00691 76766657 56344615     .&.6....Wfvv.F4V
   23e98:	c96dd94c e92ff90e 89e999c8 a9abb98a     L.m.../.........
   23ea8:	48655844 68277806 08e118c0 28a33882     DXeH.x'h.....8.(
   23eb8:	db5ccb7d fb1eeb3f 9bd88bf9 bb9aabbb     }.\.?...........
   23ec8:	5a544a75 7a166a37 1ad00af1 3a922ab3     uJTZ7j.z.....*.:
   23ed8:	ed0ffd2e cd4ddd6c ad8bbdaa 8dc99de8     ....l.M.........
   23ee8:	6c077c26 4c455c64 2c833ca2 0cc11ce0     &|.ld\EL.<.,....
   23ef8:	ff3eef1f df7ccf5d bfbaaf9b 9ff88fd9     ..>.].|.........
   23f08:	7e366e17 5e744e55 3eb22e93 1ef00ed1     .n6~UNt^...>....

00023f18 <streamer_cfg_console>:
   23f18:	0001241b 0001240f                       .$...$..

00023f20 <sysdown_cbs>:
   23f20:	00017751 00018c2f 0000c439 0000d821     Qw../...9...!...
   23f30:	0000b149 0000cfb9 0001c41d 0001bd41     I...........A...
   23f40:	0001c099 0001b865 0001af81 0001b4cd     ....e...........
   23f50:	00011895 00000000 696c7073 74732f74     ........split/st
   23f60:	73757461 00000000 74617473 00007375     atus....status..
   23f70:	696c7073 00000074                       split...

00023f78 <base64_chars>:
   23f78:	44434241 48474645 4c4b4a49 504f4e4d     ABCDEFGHIJKLMNOP
   23f88:	54535251 58575655 62615a59 66656463     QRSTUVWXYZabcdef
   23f98:	6a696867 6e6d6c6b 7271706f 76757473     ghijklmnopqrstuv
   23fa8:	7a797877 33323130 37363534 2f2b3938     wxyz0123456789+/
   23fb8:	00000000 30317764 305f3030 00000000     ....dw1000_0....

00023fc8 <dw1000_0_cfg>:
   23fc8:	20004560 00001f40 000007d0 11131800     `E. @...........
   23fd8:	40424042 00000000 6d726554 6c616e69     B@B@....Terminal
   23fe8:	00000000 00545452 47474553 00005245     ....RTT.SEGGER..
   23ff8:	6e207325 6920746f 656c706d 746e656d     %s not implement
   24008:	000a6465 7475227b 22656d69 6c25203a     ed..{"utime": %l
   24018:	6d222c75 3a226773 77642220 30303031     u,"msg": "dw1000
   24028:	7665645f 696e695f 0a7d2274 00000000     _dev_init"}.....

00024038 <__func__.0>:
   24038:	5f627775 30317764 635f3030 5f636c61     uwb_dw1000_calc_
   24048:	616f6470 00000000                       pdoa....

00024050 <dw1000_uwb_funcs>:
   24050:	00013f57 00013f4f 00013f47 00014463     W?..O?..G?..cD..
   24060:	000144e1 000147e1 00014833 00014791     .D...G..3H...G..
   24070:	00013f3f 00013f35 00013f2b 00013f15     ??..5?..+?...?..
   24080:	00013f0d 00013f05 00013efd 00013ef5     .?...?...>...>..
   24090:	00013eed 00013ee5 00013edd 00013d63     .>...>...>..c=..
   240a0:	00013ed5 00013ecd 00013ec5 00013ebd     .>...>...>...>..
   240b0:	00013eb5 00013ead 00013ea5 00013e9d     .>...>...>...>..
   240c0:	00013d59 00013e95 00013e8d 00013e81     Y=...>...>...>..
   240d0:	00013e75 00013e69 00013e61 00013e59     u>..i>..a>..Y>..
   240e0:	00013e51 00013e49 000142f9 000142df     Q>..I>...B...B..
   240f0:	000142c5 00013e21 00013e19 00013e11     .B..!>...>...>..
   24100:	00013e09 00013e01 00013df9 00013df1     .>...>...=...=..
   24110:	00013dd1 00000000 00013d6b 00013daf     .=......k=...=..
   24120:	00013db7 00013dbf 00013dc7 0063616d     .=...=...=..mac.
   24130:	625f7874 73657479 00000000 625f7872     tx_bytes....rx_b
   24140:	73657479 00000000 5f524644 00746e63     ytes....DFR_cnt.
   24150:	5f4f5452 00746e63 5f564f52 00727265     RTO_cnt.ROV_err.
   24160:	5f474654 00746e63 5f45444c 00727265     TFG_cnt.LDE_err.
   24170:	655f5852 00007272 55425854 72655f46     RX_err..TXBUF_er
   24180:	00000072 5f4c4c50 655f4c4c 00007272     r...PLL_LL_err..

00024190 <agc_config>:
   24190:	2502a907 889b8870                       ...%p...

00024198 <chan_idx>:
   24198:	02010000 05000403                       ........

000241a0 <digital_bb_config>:
   241a0:	311a002d 331a0052 351a009a 371a011d     -..1R..3...5...7
   241b0:	313b006b 333b00be 353b015e 373b0296     k.;1..;3^.;5..;7

000241c0 <dtune1>:
   241c0:	008d0087                                ....

000241c4 <dwnsSFDlen>:
   241c4:	00081040                                @...

000241c8 <fs_pll_cfg>:
   241c8:	09000407 08400508 08401009 08400508     ......@...@...@.
   241d8:	0800041d 0800041d                       ........

000241e0 <fs_pll_tune>:
   241e0:	2656261e 0000bebe                       .&V&....

000241e8 <g_stats_map_mac_stat_section>:
   241e8:	41300014 00180002 0002413c 4148001c     ..0A....<A....HA
   241f8:	00200002 00024150 41580024 00280002     .. .PA..$.XA..(.
   24208:	00024160 4168002c 00300002 00024170     `A..,.hA..0.pA..
   24218:	41780034 00380002 00024184              4.xA..8..A..

00024224 <lde_replicaCoeff>:
   24224:	59980000 51ea5998 451e428e 80002e14     ...Y.Y.Q.B.E....
   24234:	28f451ea 3ae03332 3ae03d70 2b8435c2     .Q.(23.:p=.:.5.+
   24244:	333235c2 35c235c2 3ae047ae 30a23850     .523.5.5.G.:P8.0
   24254:	00003850                                P8..

00024258 <rx_config>:
   24258:	0000bcd8                                ....

0002425c <sftsh>:
   2425c:	0016000a 00060001 00020001              ............

00024268 <tx_config>:
   24268:	00005c40 00045ca0 00086cc0 00045c80     @\...\...l...\..
   24278:	001e3fe0 001e7de0 43534d50 5b44495f     .?...}..PMSC_ID[
   24288:	203a5d30 0a786c25 00000000 43534d50     0]: %lx.....PMSC
   24298:	5b44495f 203a5d31 0a786c25 00000000     _ID[1]: %lx.....
   242a8:	7475227b 22656d69 6c25203a 6d222c75     {"utime": %lu,"m
   242b8:	3a226773 77642220 30303031 676b705f     sg": "dw1000_pkg
   242c8:	696e695f 0a7d2274 00000000 7475227b     _init"}.....{"ut
   242d8:	22656d69 6c25203a 6d222c75 3a226773     ime": %lu,"msg":
   242e8:	77642220 30303031 676b705f 776f645f      "dw1000_pkg_dow
   242f8:	0a7d226e 00000000 30317764 315f3030     n"}.....dw1000_1
   24308:	00000000 30317764 325f3030 00000000     ....dw1000_2....
   24318:	206f6f54 20776566 73677261 0000000a     Too few args....
   24328:	6572227b 30255b67 225d5832 7830223d     {"reg[%02X]"="0x
   24338:	6c383025 7d22586c 0000000a 6572227b     %08llX"}....{"re
   24348:	30255b67 225d5832 7830223d 30313025     g[%02X]"="0x%010
   24358:	22586c6c 00000a7d 6572227b 30255b67     llX"}...{"reg[%0
   24368:	225d5832 7830223d 36313025 22586c6c     2X]"="0x%016llX"
   24378:	00000a7d 6e69227b 3e2d7473 5f717269     }...{"inst->irq_
   24388:	226d6573 7d64253d 0000000a 6e69227b     sem"=%d}....{"in
   24398:	3e2d7473 735f7874 3d226d65 0a7d6425     st->tx_sem"=%d}.
   243a8:	00000000 6e72227b 733e2d67 3d226d65     ....{"rng->sem"=
   243b8:	0a7d6425 00000000 6363227b 733e2d70     %d}.....{"ccp->s
   243c8:	3d226d65 0a7d6425 00000000 706d7544     em"=%d}.....Dump
   243d8:	61747320 6e697472 74612067 36302520      starting at %06
   243e8:	0a3a586c 00000000 58343025 3025203a     lX:.....%04X: %0
   243f8:	25205832 20583230 58323025 32302520     2X %02X %02X %02
   24408:	30252058 25205832 20583230 58323025     X %02X %02X %02X
   24418:	32302520 30252058 25205832 20583230      %02X %02X %02X 
   24428:	58323025 32302520 30252058 25205832     %02X %02X %02X %
   24438:	20583230 58323025 32302520 00000a58     02X %02X %02X...
   24448:	00006164 00007763 69766544 255b6563     da..cw..Device[%
   24458:	6e205d64 6920776f 5743206e 646f6d20     d] now in CW mod
   24468:	6e6f2065 20686320 202e6425 65736552     e on ch %d. Rese
   24478:	6f742074 6e6f6320 756e6974 00000a65     t to continue...
   24488:	00007277 00006472 30257830 2c586c36     wr..rd..0x%06lX,
   24498:	30257830 203a5834 6c257830 000a586c     0x%04X: 0x%llX..
   244a8:	6e6b6e55 206e776f 0a646d63 00000000     Unknown cmd.....
   244b8:	30317764 00003030 30317764 64203030     dw1000..dw1000 d
   244c8:	00006762 30317764 64203030 67756265     bg..dw1000 debug
   244d8:	00000000 736e695b 64205d74 20706d75     ....[inst] dump 
   244e8:	206c6c61 69676572 72657473 00000073     all registers...
   244f8:	736e693c 74203e74 57432078 206e6f20     <inst> tx CW on 
   24508:	72727563 20746e65 6e616863 006c656e     current channel.
   24518:	736e693c 3c203e74 72646461 6c5b203e     <inst> <addr> [l
   24528:	74676e65 202c5d68 706d7564 65726120     ength], dump are
   24538:	00000061 736e693c 3c203e74 72646461     a...<inst> <addr
   24548:	733c203e 64616275 203e7264 6e656c3c     > <subaddr> <len
   24558:	3e687467 6572202c 72206461 73696765     gth>, read regis
   24568:	00726574 736e693c 3c203e74 72646461     ter.<inst> <addr
   24578:	733c203e 64616275 203e7264 6c61763c     > <subaddr> <val
   24588:	203e6575 6e656c3c 3e687467 7277202c     ue> <length>, wr
   24598:	20657469 756c6176 6f742065 67657220     ite value to reg
   245a8:	65747369 00000072                       ister...

000245b0 <cmd_dw1000_help>:
   245b0:	000244c0 000244cc 000245bc              .D...D...E..

000245bc <cmd_dw1000_param>:
   245bc:	000233e0 000244dc 0002444c 000244f8     .3...D..LD...D..
   245cc:	00024448 00024518 0002448c 0002453c     HD...E...D..<E..
   245dc:	00024488 0002456c 00000000 00000000     .D..lE..........

000245ec <nrf52k_flash_dev>:
   245ec:	00024604 00000000 00080000 00000080     .F..............
   245fc:	00000001 000000ff                       ........

00024604 <nrf52k_flash_funcs>:
   24604:	00017eb1 00017de9 00017d75 00017dc9     .~...}..u}...}..
   24614:	00000000 00017dc5 00000000              .....}......

00024620 <nrf52_hal_spis>:
   24620:	20004574 00000000 00000000 00000000     tE. ............

00024630 <nrf52_hal_timers>:
   24630:	2000459c 00000000 00000000 00000000     .E. ............
	...

00024648 <os_bsp_spi0m_cfg>:
   24648:	00121410 0000002c 0000007b 00000022     ....,...{..."...
   24658:	00203a22 736c6166 00000065 65757274     ": .false...true
   24668:	00000000 756c6c25 00000000 696c6c25     ....%llu....%lli
   24678:	00000000 6c6c756e 00000000 00006625     ....null....%f..
   24688:	0000005c 0000745c 0000725c 00006e5c     \...\t..\r..\n..
   24698:	0000665c 0000625c 0000005b               \f..\b..[...}.

000246a6 <__func__.7324>:
   246a6:	656d6974 6c616373 6e695f65               timescale_init.

000246b5 <__func__.7336>:
   246b5:	656d6974 6c616373 72665f65 69006565     timescale_free.i
   246c5:	2d74736e 656b653e 736e6900 682f0074     nst->eke.inst./h
   246d5:	2f656d6f 6c6b696e 642f7361 742f7665     ome/niklas/dev/t
   246e5:	73656d69 656c6163 726f632d 696c2f65     imescale-core/li
   246f5:	69742f62 6373656d 2e656c61               b/timescale.c.

00024703 <__func__.7283>:
   24703:	666b7273 6c62645f 69616d5f               srkf_dbl_main.

00024711 <__func__.7299>:
   24711:	666b7273 6c62645f 696e695f               srkf_dbl_init.

0002471f <__func__.7311>:
   2471f:	666b7273 6c62645f 6572665f 6e690065     srkf_dbl_free.in
   2472f:	21207473 4c554e3d 6e69004c 3e2d7473     st !=NULL.inst->
   2473f:	3d3d206e 69006e20 2d74736e 6900783e     n == n.inst->x.i
   2474f:	2d74736e 6900793e 2d74736e 69007a3e     nst->y.inst->z.i
   2475f:	2d74736e 6900653e 2d74736e 6900483e     nst->e.inst->H.i
   2476f:	2d74736e 6900503e 2d74736e 0050553e     nst->P.inst->UP.
   2477f:	74736e69 50443e2d 736e6900 513e2d74     inst->DP.inst->Q
   2478f:	736e6900 553e2d74 6e690051 3e2d7473     .inst->UQ.inst->
   2479f:	69005144 2d74736e 6900523e 2d74736e     DQ.inst->R.inst-
   247af:	0052553e 74736e69 52443e2d 736e6900     >UR.inst->DR.ins
   247bf:	533e2d74 736e6900 5f3e2d74 6e690053     t->S.inst->_S.in
   247cf:	3e2d7473 6e690041 3e2d7473 6e69004b     st->A.inst->K.in
   247df:	21207473 554e203d 2f004c4c 656d6f68     st != NULL./home
   247ef:	6b696e2f 2f73616c 2f766564 656d6974     /niklas/dev/time
   247ff:	6c616373 6f632d65 6c2f6572 732f6269     scale-core/lib/s
   2480f:	5f666b72 2e6c6264 6e690063 3e2d7473     rkf_dbl.c.inst->
   2481f:	78666f41 203d2120 4c4c554e 736e6900     Aofx != NULL.ins
   2482f:	483e2d74 2078666f 4e203d21 004c4c55     t->Hofx != NULL.
   2483f:	75227b00 656d6974 25203a22 222c756c     .{"utime": %lu,"
   2484f:	2267736d 7422203a 645f7277 6b705f73     msg": "twr_ds_pk
   2485f:	6e695f67 7d227469 0000000a 72777400     g_init"}.....twr
   2486f:	0073645f 6d6f6300 74656c70 00000065     _ds..complete...
   2487f:	61747300 745f7472 72655f78 00726f72     .start_tx_error.
	...

00024890 <g_stats_map_twr_ds_stat_section>:
   24890:	48740014 00180002 00024880 7475227b     ..tH.....H..{"ut
   248a0:	22656d69 6c25203a 6d222c75 3a226773     ime": %lu,"msg":
   248b0:	77742220 73645f72 7478655f 676b705f      "twr_ds_ext_pkg
   248c0:	696e695f 0a7d2274 00000000 5f727774     _init"}.....twr_
   248d0:	655f7364 00007478                       ds_ext..

000248d8 <g_stats_map_twr_ds_ext_stat_section>:
   248d8:	48740014 00180002 00023284 7475227b     ..tH.....2..{"ut
   248e8:	22656d69 6c25203a 6d222c75 3a226773     ime": %lu,"msg":
   248f8:	77742220 73735f72 676b705f 696e695f      "twr_ss_pkg_ini
   24908:	0a7d2274 00000000 5f727774 00007373     t"}.....twr_ss..

00024918 <g_stats_map_twr_ss_stat_section>:
   24918:	48740014 00180002 00023284 7475227b     ..tH.....2..{"ut
   24928:	22656d69 6c25203a 6d222c75 3a226773     ime": %lu,"msg":
   24938:	77742220 73735f72 6b63615f 676b705f      "twr_ss_ack_pkg
   24948:	696e695f 0a7d2274 00000000 5f727774     _init"}.....twr_
   24958:	615f7373 00006b63 5f6b6361 655f7874     ss_ack..ack_tx_e
   24968:	00007272 5f6b6361 655f7872 00007272     rr..ack_rx_err..
   24978:	5f6b6361 5f716573 00727265              ack_seq_err.

00024984 <g_stats_map_twr_ss_ack_stat_section>:
   24984:	48740014 00180002 00023284 4960001c     ..tH.....2....`I
   24994:	00200002 0002496c 49780024 00000002     .. .lI..$.xI....
   249a4:	7475227b 22656d69 6c25203a 6d222c75     {"utime": %lu,"m
   249b4:	3a226773 77742220 73735f72 7478655f     sg": "twr_ss_ext
   249c4:	676b705f 696e695f 0a7d2274 00000000     _pkg_init"}.....
   249d4:	5f727774 655f7373 00007478              twr_ss_ext..

000249e0 <g_stats_map_twr_ss_ext_stat_section>:
   249e0:	48740014 00180002 00023284 7475227b     ..tH.....2..{"ut
   249f0:	22656d69 6c25203a 6d222c75 3a226773     ime": %lu,"msg":
   24a00:	63772220 69745f73 6373656d 5f656c61      "wcs_timescale_
   24a10:	5f676b70 74696e69 000a7d22 00000000     pkg_init"}......
   24a20:	a4f8e0b5 3e20e374 6e5b0122 3deb0587     ....t. >".[n...=
   24a30:	f1e2674e 3db59e05 a4f8e0b5 3e30e374     Ng.....=....t.0>
   24a40:	b7320335 4654adf4 61746164 00000000     5.2...TFdata....
   24a50:	006e656c 00616873 72677075 00656461     len.sha.upgrade.

00024a60 <imgr_nmgr_handlers>:
   24a60:	0001d0a1 0001d25d 00000000 0001cc0d     ....]...........
	...
   24a8c:	0001c9d5 00000000 0001c969 74737075     ........i...upst
   24a9c:	00747261 6f647075 0000656e 646e6570     art.updone..pend
   24aac:	00000000 666e6f63 00000000 67616d69     ....conf....imag
   24abc:	00007365 746f6c73 00000000 73726576     es..slot....vers
   24acc:	006e6f69 68736168 00000000 746f6f62     ion.hash....boot
   24adc:	656c6261 00000000 646e6570 00676e69     able....pending.
   24aec:	666e6f63 656d7269 00000064 69746361     confirmed...acti
   24afc:	00006576 6d726570 6e656e61 00000074     ve..permanent...
   24b0c:	696c7073 61745374 00737574 666e6f63     splitStatus.conf
   24b1c:	006d7269 252e7525 75252e75 756c252e     irm.%u.%u.%u.%lu
   24b2c:	00000000 252e7525 75252e75 00000000     ....%u.%u.%u....
   24b3c:	65746164 656d6974 00000000 6f686365     datetime....echo
   24b4c:	00000000 6f6f706d 0000736c 736b6c62     ....mpools..blks
   24b5c:	00007a69 6b6c626e 00000073 6572666e     iz..nblks...nfre
   24b6c:	00000065 6f697270 00000000 74617473     e...prio....stat
   24b7c:	00000065 736b7473 00007a69 63777363     e...stksiz..cswc
   24b8c:	0000746e 7473616c 6568635f 6e696b63     nt..last_checkin
   24b9c:	00000000 7478656e 6568635f 6e696b63     ....next_checkin
   24bac:	00000000                                ....

00024bb0 <nmgr_def_group_handlers>:
   24bb0:	0001d899 0001d899 0001d83d 0001d83d     ........=...=...
   24bc0:	0001da99 00000000 0001d991 00000000     ................
   24bd0:	0001d911 0001d7dd 00000000 0001d781     ................
   24be0:	41464544 00544c55 0000534f 5457454e     DEFAULT.OS..NEWT
   24bf0:	0052474d 424d494e 435f454c 00524c54     MGR.NIMBLE_CTLR.
   24c00:	424d494e 485f454c 0054534f 5346464e     NIMBLE_HOST.NFFS
   24c10:	00000000 4f424552 0000544f 49544f49     ....REBOOT..IOTI
   24c20:	59544956 00000000 54534554 00000000     VITY....TEST....
   24c30:	3d73745b 756c6c25 202c7375 3d646f6d     [ts=%lluus, mod=
   24c40:	6c207525 6c657665 5d75253d 00000020     %u level=%u] ...
   24c50:	736e6f63 00656c6f                       console.

00024c58 <log_console_handler>:
   24c58:	00000000 0001e869 00000000 0001e8c1     ....i...........
   24c68:	0001e895 00000000 00000000 0001e86d     ............m...
   24c78:	0001e871 00000000 5f676f6c 7473696c     q.......log_list
   24c88:	00000000 75646f6d 6d5f656c 00007061     ....module_map..
   24c98:	55424544 00000047 4f525245 00000052     DEBUG...ERROR...
   24ca8:	4f464e49 00000000 4e524157 00000000     INFO....WARN....
   24cb8:	4e4b4e55 004e574f 54495243 4c414349     UNKNOWN.CRITICAL
   24cc8:	00000000 6576656c 616d5f6c 00000070     ....level_map...
   24cd8:	5f676f6c 75646f6d 0000656c 6576656c     log_module..leve
   24ce8:	0000006c 72746e65 00736569 65707974     l...entries.type
   24cf8:	00000000 5f676f6c 656d616e 00000000     ....log_name....
   24d08:	00007374 65646e69 00000078 7478656e     ts..index...next
   24d18:	646e695f 00007865 73676f6c 00000000     _index..logs....
   24d28:	0067736d 6f727265 65203a72 7972746e     msg.error: entry
   24d38:	6f6f7420 72616c20 28206567 62206425      too large (%d b
   24d48:	73657479 00000029 6c646f6d 6d5f676f     ytes)...modlog_m
   24d58:	69707061 705f676e 006c6f6f 6c696166     apping_pool.fail
   24d68:	74206465 6572206f 4d206461 3a73524d     ed to read MMRs:
   24d78:	3d637220 00006425 6f626572 722f746f      rc=%d..reboot/r
   24d88:	6f6f6265 6e635f74 00000074 6f626572     eboot_cnt...rebo
   24d98:	772f746f 74746972 00006e65 6f626572     ot/written..rebo
   24da8:	635f746f 0000746e 74697277 006e6574     ot_cnt..written.
   24db8:	44524148 00000000 55514552 45545345     HARD....REQUESTE
   24dc8:	00000044 45534552 49505f54 0000004e     D...RESET_PIN...
   24dd8:	474f4457 00000000 54464f53 00000000     WDOG....SOFT....
   24de8:	574f5242 54554f4e 00000000 54535953     BROWNOUT....SYST
   24df8:	4f5f4d45 495f4646 0000544e 3a6e7372     EM_OFF_INT..rsn:
   24e08:	202c7325 3a746e63 202c7525 3a676d69     %s, cnt:%u, img:
   24e18:	252e7525 75252e75 2c75252e 73616820     %u.%u.%u.%u, has
   24e28:	00003a68 78323025 00000000 6964202c     h:..%02x...., di
   24e38:	73253a65 0064253a 6370202c 2578303a     e:%s:%d., pc:0x%
   24e48:	0000786c 00000031 6f626572 0000746f     lx..1...reboot..

00024e58 <sysflash_map_dflt>:
	...
   24e60:	00004000 00000001 00008000 0003a000     .@..............
   24e70:	00000002 00042000 0003a000 00000003     ..... ..........
   24e80:	0007c000 00001000 00000010 00004000     .............@..
   24e90:	00004000 00000011 0007d000 00003000     .@...........0..

00024ea0 <boot_img_magic>:
   24ea0:	f395c277 7fefd260 0f505235 8079b62c     w...`...5RP.,.y.

00024eb0 <boot_swap_tables>:
   24eb0:	03040104 01040204 03040104 04030301     ................
   24ec0:	00000401                                ....

00024ec4 <K>:
   24ec4:	428a2f98 71374491 b5c0fbcf e9b5dba5     ./.B.D7q........
   24ed4:	3956c25b 59f111f1 923f82a4 ab1c5ed5     [.V9...Y..?..^..
   24ee4:	d807aa98 12835b01 243185be 550c7dc3     .....[....1$.}.U
   24ef4:	72be5d74 80deb1fe 9bdc06a7 c19bf174     t].r........t...
   24f04:	e49b69c1 efbe4786 0fc19dc6 240ca1cc     .i...G.........$
   24f14:	2de92c6f 4a7484aa 5cb0a9dc 76f988da     o,.-..tJ...\...v
   24f24:	983e5152 a831c66d b00327c8 bf597fc7     RQ>.m.1..'....Y.
   24f34:	c6e00bf3 d5a79147 06ca6351 14292967     ....G...Qc..g)).
   24f44:	27b70a85 2e1b2138 4d2c6dfc 53380d13     ...'8!...m,M..8S
   24f54:	650a7354 766a0abb 81c2c92e 92722c85     Ts.e..jv.....,r.
   24f64:	a2bfe8a1 a81a664b c24b8b70 c76c51a3     ....Kf..p.K..Ql.
   24f74:	d192e819 d6990624 f40e3585 106aa070     ....$....5..p.j.
   24f84:	19a4c116 1e376c08 2748774c 34b0bcb5     .....l7.LwH'...4
   24f94:	391c0cb3 4ed8aa4a 5b9cca4f 682e6ff3     ...9J..NO..[.o.h
   24fa4:	748f82ee 78a5636f 84c87814 8cc70208     ...toc.x.x......
   24fb4:	90befffa a4506ceb bef9a3f7 c67178f2     .....lP......xq.

00024fc4 <crc8_small_table>:
   24fc4:	090e0700 15121b1c 31363f38 2d2a2324     ........8?61$#*-
   24fd4:	00000000                                ....

00024fd8 <Zero>:
	...
   24fe4:	80000000                                ....

/home/joel/Capstone/uwb-apps/bin/targets/twr_tag_tdma/app/apps/twr_tag_tdma/twr_tag_tdma.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
 118752	   3864	  15276	 137892	  21aa4	/home/joel/Capstone/uwb-apps/bin/targets/twr_tag_tdma/app/apps/twr_tag_tdma/twr_tag_tdma.elf
